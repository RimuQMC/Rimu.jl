var documenterSearchIndex = {"docs":
[{"location":"mpi.html#Working-with-MPI","page":"Using MPI","title":"Working with MPI","text":"","category":"section"},{"location":"mpi.html","page":"Using MPI","title":"Using MPI","text":"If you are using PDVecs to store your vectors, working with MPI should be fairly straightforward. Generally, PDVec will work with MPI automatically, as long as MPI is set up correctly and a few common pitfalls are avoided.","category":"page"},{"location":"mpi.html#Configuring-MPI","page":"Using MPI","title":"Configuring MPI","text":"","category":"section"},{"location":"mpi.html","page":"Using MPI","title":"Using MPI","text":"When running on a cluster, ensure that MPI.jl is using the system binary. See the MPI.jl documentation for more information.","category":"page"},{"location":"mpi.html","page":"Using MPI","title":"Using MPI","text":"It is always a good idea to start your script with a quick test that ensures the MPI is set up correctly. One way to do this is to open with","category":"page"},{"location":"mpi.html","page":"Using MPI","title":"Using MPI","text":"mpi_allprintln(\"hello\")","category":"page"},{"location":"mpi.html","page":"Using MPI","title":"Using MPI","text":"which should print something like","category":"page"},{"location":"mpi.html","page":"Using MPI","title":"Using MPI","text":"[ rank 0: hello\n[ rank 1: hello\n[ rank 2: hello\n[ rank 3: hello","category":"page"},{"location":"mpi.html","page":"Using MPI","title":"Using MPI","text":"If it prints rank 0 several times, the code will run, but ranks will not communicate.","category":"page"},{"location":"mpi.html#Using-Slurm","page":"Using MPI","title":"Using Slurm","text":"","category":"section"},{"location":"mpi.html","page":"Using MPI","title":"Using MPI","text":"When using PDVec, the recommended setup is to use threads to parallelise the computation within a node, and to only use MPI for inter-node communication. In a slurm script, this is done as follows:","category":"page"},{"location":"mpi.html","page":"Using MPI","title":"Using MPI","text":"...\n#SBATCH --ntasks-per-node=1\n#SBATCH --nodes=4            # replace 4 with the desired number of nodes\n#SBATCH --cpus-per-task=28   # replace 28 with the number of cores available in a node\n#SBATCH --hint=nomultithread # don't use hyperthreading\n...\n\nsrun julia --project -tauto script.jl","category":"page"},{"location":"mpi.html","page":"Using MPI","title":"Using MPI","text":"On some clusters, additional settings must be used with srun, for example the CTCP cluster requires the following.","category":"page"},{"location":"mpi.html","page":"Using MPI","title":"Using MPI","text":"srun mpi=pmi2 julia --project -tauto script.jl","category":"page"},{"location":"mpi.html#Common-pitfalls-with-reducing-functions","page":"Using MPI","title":"Common pitfalls with reducing functions","text":"","category":"section"},{"location":"mpi.html#Using-@mpi_root","page":"Using MPI","title":"Using @mpi_root","text":"","category":"section"},{"location":"mpi.html","page":"Using MPI","title":"Using MPI","text":"Take care to not use reducing functions (such as length, sum, norm, ...) inside @mpi_root blocks. Doing so will only initiate the distributed reduction on one rank only, which will cause the code to go out of sync and freeze. As an example, to report the current length of a vector, calculate the length before the @mpi_root block:","category":"page"},{"location":"mpi.html","page":"Using MPI","title":"Using MPI","text":"len = length(pdvec)\n@mpi_root println(\"vector length is $len\")","category":"page"},{"location":"mpi.html#Threaded-operations-and-reductions","page":"Using MPI","title":"Threaded operations and reductions","text":"","category":"section"},{"location":"mpi.html","page":"Using MPI","title":"Using MPI","text":"When using functions that take anonymous functions, such as map(!), sum, or mapreduce, it is important that the anonymous functions passed to them do not perform any MPI-reducing operations (length, norm, sum, etc.). These anonymous functions are executed on multiple threads and initiating MPI communication from multiple threads may cause issues.","category":"page"},{"location":"mpi.html","page":"Using MPI","title":"Using MPI","text":"As an example, suppose we want to scale a vector by its length by using map!. The correct way to write this code is as","category":"page"},{"location":"mpi.html","page":"Using MPI","title":"Using MPI","text":"len = length(pdvec)\nmap!(values(pdvec)) do x\n\tx / len\nend","category":"page"},{"location":"mpi.html","page":"Using MPI","title":"Using MPI","text":"Similar to the previous example, len is calculated first and not within the body of map!. In this specific case, an even better option is to use the scale! function from VectorInterface.jl:","category":"page"},{"location":"mpi.html","page":"Using MPI","title":"Using MPI","text":"scale!(pdvec, 1 / length(pdvec))","category":"page"},{"location":"projectormontecarlo.html#Projector-Monte-Carlo-/-FCIQMC","page":"Projector Monte Carlo","title":"Projector Monte Carlo / FCIQMC","text":"","category":"section"},{"location":"projectormontecarlo.html","page":"Projector Monte Carlo","title":"Projector Monte Carlo","text":"The purpose of Projector Monte Carlo is to stochastically sample the ground state, i.e. the  eigenvector corresponding to the lowest eigenvalue of a quantum Hamiltonian, or more generally,  a very large matrix. Rimu implements a flavor of Projector Monte Carlo called  Full Configuration Interaction Quantum Monte Carlo (FCIQMC).","category":"page"},{"location":"projectormontecarlo.html#ProjectorMonteCarloProblem","page":"Projector Monte Carlo","title":"ProjectorMonteCarloProblem","text":"","category":"section"},{"location":"projectormontecarlo.html","page":"Projector Monte Carlo","title":"Projector Monte Carlo","text":"To run a projector Monte Carlo simulation you set up a problem with ProjectorMonteCarloProblem and solve it with solve. Alternatively you can init it with to obtain a PMCSimulation struct, step!  through time steps, and solve! it to completion. ","category":"page"},{"location":"projectormontecarlo.html","page":"Projector Monte Carlo","title":"Projector Monte Carlo","text":"ProjectorMonteCarloProblem\ninit\nsolve\nsolve!\nstep!","category":"page"},{"location":"projectormontecarlo.html#Rimu.ProjectorMonteCarloProblem-projectormontecarlo","page":"Projector Monte Carlo","title":"Rimu.ProjectorMonteCarloProblem","text":"ProjectorMonteCarloProblem(hamiltonian::AbstractHamiltonian; kwargs...)\n\nDefines a problem to be solved by projector quantum Monte Carlo (QMC) methods, such as the the FCIQMC algorithm.\n\nCommon keyword arguments and defaults:\n\ntime_step = 0.01: Initial time step size.\nlast_step = 100: Controls the number of steps.\ntarget_walkers = 1_000: Target for the 1-norm of the coefficient vector.\nstart_at = starting_address(hamiltonian): Define the initial state vector(s).   An r  s matrix of state vectors can be passed where r is the   number of replicas and s the number of spectral states. See also   default_starting_vector.\nstyle = IsDynamicSemistochastic(): The StochasticStyle of the simulation.\ninitiator = false: Whether to use initiators. Can be true, false, or a valid   InitiatorRule.\nthreading: Default is to use multithreading and/or MPI if available. Set to true to force PDVec for the starting vector, false for serial computation; may be overridden by start_at.\nreporting_strategy = ReportDFAndInfo(): How and when to report results, see ReportingStrategy.\npost_step_strategy = (): Extract observables (e.g. ProjectedEnergy), see PostStepStrategy.\nn_replicas = 1: Number of synchronised independent simulations.\nreplica_strategy = NoStats(n_replicas): Which results to report from replica simulations, see ReplicaStrategy.\nn_spectral = 1: Number of targeted spectral states. Set n_spectral > 1 to find excited states.\nspectral_strategy = GramSchmidt(n_spectral): The SpectralStrategy used for orthogonalizing spectral states.\n\nExample\n\njulia> hamiltonian = HubbardReal1D(BoseFS(1,2,3));\n\njulia> problem = ProjectorMonteCarloProblem(hamiltonian; target_walkers = 500, last_step = 100);\n\njulia> simulation = solve(problem);\n\njulia> simulation.success[]\ntrue\n\njulia> size(DataFrame(simulation))\n(100, 9)\n\nFurther keyword arguments:\n\nstarting_step = 1: Starting step of the simulation.\nwall_time = Inf: Maximum time allowed for the simulation.\nsimulation_plan = SimulationPlan(; starting_step, last_step, wall_time): Defines the   duration of the simulation. Takes precedence over last_step and wall_time.\nζ = 0.08: Damping parameter for the shift update.\nξ = ζ^2/4: Forcing parameter for the shift update.\nshift_strategy = DoubleLogUpdate(; target_walkers, ζ, ξ): How to update the shift,   see ShiftStrategy.\ntime_step_strategy = ConstantTimeStep(): Adjust time step or not, see   TimeStepStrategy.\nalgorithm = FCIQMC(; shift_strategy, time_step_strategy): The algorithm to use.   Currenlty only FCIQMC is implemented.\nshift: Initial shift value or collection of shift values. Determined by default from the   Hamiltonian and the starting vectors.\ninitial_shift_parameters: Initial shift parameters or collection of initial shift   parameters. Overrides shift if provided.\nmax_length = 2 * target_walkers + 100: Maximum length of the vectors.\ndisplay_name = \"PMCSimulation\": Name displayed in progress bar (via ProgressLogging).\nmetadata: User-supplied metadata to be added to the report. Must be an iterable of pairs or a NamedTuple, e.g. metadata = (\"key1\" => \"value1\", \"key2\" => \"value2\"). All metadata is converted to strings.\nrandom_seed = true: Provide and store a seed for the random number generator. If set to   true, a new random seed is generated from RandomDevice(). If set to number, this   number is used as the seed. This seed is used by solve (and init) to re-seed the   default random number generator (consistently on each MPI rank) such that   solveing the same ProjectorMonteCarloProblem twice will yield identical results. If   set to false, no seed is used and consecutive random numbers are used.\nminimum_size = 2*num_spectral_states(spectral_strategy): The minimum size of the basis   used to construct starting vectors for simulations of spectral states, if start_at   is not provided.\n\nSee also init, solve.\n\n\n\n\n\n","category":"type"},{"location":"projectormontecarlo.html#CommonSolve.init-projectormontecarlo","page":"Projector Monte Carlo","title":"CommonSolve.init","text":"init(p::ExactDiagonalizationProblem, [algorithm]; kwargs...)\n\nInitialize a solver for an ExactDiagonalizationProblem p with an optional algorithm. Returns a solver instance that can be solved with solve.\n\nFor a description of the keyword arguments, see the documentation for ExactDiagonalizationProblem.\n\n\n\n\n\ninit(problem::ProjectorMonteCarloProblem; copy_vectors=true)::PMCSimulation\n\nInitialise a Rimu.PMCSimulation.\n\nSee also ProjectorMonteCarloProblem, solve!, solve, step!, Rimu.PMCSimulation.\n\n\n\n\n\n","category":"function"},{"location":"projectormontecarlo.html#CommonSolve.solve-projectormontecarlo","page":"Projector Monte Carlo","title":"CommonSolve.solve","text":"solve(::ProjectorMonteCarloProblem)::PMCSimulation\n\nInitialize and solve a ProjectorMonteCarloProblem until the last step is completed or the wall time limit is reached.\n\nSee also init, solve!, step!, Rimu.PMCSimulation, and solve(::ExactDiagonalizationProblem).\n\n\n\n\n\n","category":"function"},{"location":"projectormontecarlo.html#CommonSolve.solve!-projectormontecarlo","page":"Projector Monte Carlo","title":"CommonSolve.solve!","text":"solve!(sm::PMCSimulation; kwargs...)::PMCSimulation\n\nSolve a Rimu.PMCSimulation until the last step is completed or the wall time limit is reached.\n\nTo continue a previously completed simulation, set a new last_step or wall_time using the keyword arguments. Optionally, changes can be made to the replica_strategy, the post_step_strategy, or the reporting_strategy.\n\nOptional keyword arguments:\n\nlast_step = nothing: Set the last step to a new value and continue the simulation.\nwall_time = nothing: Set the allowed wall time to a new value and continue the   simulation.\nreset_time = false: Reset the elapsed_time counter and continue the simulation.\nempty_report = false: Empty the report before continuing the simulation.\nreplica_strategy = nothing: Change the replica strategy. Requires the number of replicas   to match the number of replicas in the simulation sm. Implies empty_report = true.\npost_step_strategy = nothing: Change the post-step strategy. Implies   empty_report = true.\nreporting_strategy = nothing: Change the reporting strategy. Implies   empty_report = true.\nmetadata = nothing: Add metadata to the report.\n\nSee also ProjectorMonteCarloProblem, init, solve, step!, Rimu.PMCSimulation.\n\n\n\n\n\n","category":"function"},{"location":"projectormontecarlo.html#CommonSolve.step!-projectormontecarlo","page":"Projector Monte Carlo","title":"CommonSolve.step!","text":"step!(sm::PMCSimulation)::PMCSimulation\n\nAdvance the simulation by one step.\n\nCalling solve! will advance the simulation until the last step or the wall time is exceeded. When completing the simulation without calling solve!, the simulation report needs to be finalised by calling Rimu.finalize_report!.\n\nSee also ProjectorMonteCarloProblem, init, solve!, solve, Rimu.PMCSimulation.\n\n\n\n\n\n","category":"function"},{"location":"projectormontecarlo.html","page":"Projector Monte Carlo","title":"Projector Monte Carlo","text":"After solve or solve! have been called the returned PMCSimulation contains the results of  the projector Monte Carlo calculation.","category":"page"},{"location":"projectormontecarlo.html#PMCSimulation-and-report-as-a-DataFrame","page":"Projector Monte Carlo","title":"PMCSimulation and report as a DataFrame","text":"","category":"section"},{"location":"projectormontecarlo.html","page":"Projector Monte Carlo","title":"Projector Monte Carlo","text":"Rimu.PMCSimulation","category":"page"},{"location":"projectormontecarlo.html#Rimu.PMCSimulation-projectormontecarlo","page":"Projector Monte Carlo","title":"Rimu.PMCSimulation","text":"PMCSimulation\n\nHolds the state and the results of a projector quantum Monte Carlo (PMC) simulation. Is returned by init(::ProjectorMonteCarloProblem) and solved with solve!(::PMCSimulation).\n\nObtain the results of a simulation sm as a DataFrame with DataFrame(sm).\n\nFields\n\nproblem::ProjectorMonteCarloProblem: The problem that was solved\nstate::Rimu.ReplicaState: The current state of the simulation\nreport::Rimu.Report: The report of the simulation\nmodified::Bool: Whether the simulation has been modified\naborted::Bool: Whether the simulation has been aborted\nsuccess::Bool: Whether the simulation has been completed successfully\nmessage::String: A message about the simulation status\nelapsed_time::Float64: The time elapsed during the simulation\n\nSee also state_vectors, ProjectorMonteCarloProblem, init, solve!.\n\n\n\n\n\n","category":"type"},{"location":"projectormontecarlo.html","page":"Projector Monte Carlo","title":"Projector Monte Carlo","text":"The DataFrame returned from DataFrame(::PMCSimulation) contains the time series data from  the projector Monte Carlo simulation that is of primary interest for analysis. Depending on the  reporting_strategy and other options passed as keyword arguments to  ProjectorMonteCarloProblem it can have different numbers of rows and columns. The rows  correspond to the reported time steps (Monte Carlo steps). There is at least one column with the name :step. Further columns are usually present with additional data reported from the simulation.","category":"page"},{"location":"projectormontecarlo.html","page":"Projector Monte Carlo","title":"Projector Monte Carlo","text":"For the default option algorithm = FCIQMC(; shift_strategy, time_step_strategy) with a single replica (n_replicas = 1) and single spectral state, the fields :shift, :norm, :len will  be present as well as others depending on the style argument and the post_step_strategy.","category":"page"},{"location":"projectormontecarlo.html","page":"Projector Monte Carlo","title":"Projector Monte Carlo","text":"If multiple replicas or spectral states are requested, then the relevant field names in the  DataFrame will have a suffix identifying the respective replica simulation, e.g. the shifts will be reported as shift_1, shift_2, ... ","category":"page"},{"location":"projectormontecarlo.html","page":"Projector Monte Carlo","title":"Projector Monte Carlo","text":"Many tools for analysing the time series data obtained from a  ProjectorMonteCarloProblem are contained in the Module StatsTools.","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"EditURL = \"../../../scripts/G2-example.jl\"","category":"page"},{"location":"generated/G2-example.html#Example-3:-Calculating-observables","page":"Calculating observables","title":"Example 3: Calculating observables","text":"","category":"section"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"This is an example calculation of the two-body correlation function G_2.","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"A runnable script for this example is located here. Run it with julia G2-example.jl.","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"First, we load the reqired packages. Rimu for FCIQMC calculation, and DataFrames for maniplating the output.","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"using Rimu\nusing Random\nusing DataFrames","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"We use the same Hamiltonian as the first example, a Bose-Hubbard model with 6 particles in 6 sites, with strong interactions (we expect a Mott insulating state).","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"m = n = 6\ninitial_address = near_uniform(BoseFS{n,m})\nH = HubbardReal1D(initial_address; u = 6.0, t = 1.0)","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"HubbardReal1D(fs\"|1 1 1 1 1 1⟩\"; u=6.0, t=1.0)","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"Now, we define the operators for the observables we wish to calculate.","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"dvals = 0:m-1\nG2list = ((G2RealCorrelator(d) for d in dvals)...,)","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"(G2RealCorrelator(0), G2RealCorrelator(1), G2RealCorrelator(2), G2RealCorrelator(3), G2RealCorrelator(4), G2RealCorrelator(5))","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"This is a tuple of G2RealCorrelators, subtypes of AbstractHamiltonian. It calculates the density-density correlation function on a lattice","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"    hatG^(2)(d) = frac1M sum_i^M hatn_i (hatn_i+d - delta_0d)","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"with normalisation","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"    sum_d=0^M-1 langle hatG^(2)(d) rangle = fracN (N-1)M","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"Observables that are defined by expectation values are calculated using the \"replica trick\". Thereby several independent copies or \"replicas\" of the state vector are propagated simultaneously. The reason is to have two (or more) stochastically independent copies of the state vector available such that we can calculate bias-free overlaps. We enable this by defining a ReplicaStrategy. Each replica has its own state and FCIQMC is effectively performed independently on each one.  For calculating observables, we use AllOverlaps for the ReplicaStrategy. At each timestep, after the FCIQMC step is performed on, this strategy calculates the overlaps of every operator with the wavefunctions from each pair of replicas.","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"To obtain an unbiased result, at least two replicas should be used. One can also use more than two to improve the statistics. This is particularly helpful when the walker number is low.","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"n_replicas = 3\nreplica_strategy = AllOverlaps(n_replicas; operator=G2list)","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"AllOverlaps{3, 6, Tuple{G2RealCorrelator{0}, G2RealCorrelator{1}, G2RealCorrelator{2}, G2RealCorrelator{3}, G2RealCorrelator{4}, G2RealCorrelator{5}}, true}((G2RealCorrelator(0), G2RealCorrelator(1), G2RealCorrelator(2), G2RealCorrelator(3), G2RealCorrelator(4), G2RealCorrelator(5)))","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"Other FCIQMC parameters and strategies can be set in the same way as before.","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"steps_equilibrate = 1_000\nsteps_measure = 5_000\ntarget_walkers = 100;\ntime_step = 0.001\n","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"Now, we run FCIQMC. Note that passing an initial vector is optional - if we only pass the style, a vector with the appropriate style is created automatically.","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"problem = ProjectorMonteCarloProblem(H;\n    style=IsDynamicSemistochastic(),\n    time_step,\n    last_step = steps_equilibrate + steps_measure,\n    target_walkers,\n    replica_strategy,\n)\nresult = solve(problem)\ndf = DataFrame(result);","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"The output DataFrame has FCIQMC statistics for each replica (e.g. shift, norm),","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"println(filter(startswith(\"shift_\"), names(df)))","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"[\"shift_1\", \"shift_2\", \"shift_3\"]\n","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"as well as vector-vector overlaps (e.g. c1_dot_c2),","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"println(filter(contains(\"dot\"), names(df)))","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"[\"c1_dot_c2\", \"c1_dot_c3\", \"c2_dot_c3\"]\n","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"and operator overlaps (e.g. c1_Op1_c2) between the replicas.","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"println(filter(contains(\"Op\"), names(df)))","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"[\"c1_Op1_c2\", \"c1_Op2_c2\", \"c1_Op3_c2\", \"c1_Op4_c2\", \"c1_Op5_c2\", \"c1_Op6_c2\", \"c1_Op1_c3\", \"c1_Op2_c3\", \"c1_Op3_c3\", \"c1_Op4_c3\", \"c1_Op5_c3\", \"c1_Op6_c3\", \"c2_Op1_c3\", \"c2_Op2_c3\", \"c2_Op3_c3\", \"c2_Op4_c3\", \"c2_Op5_c3\", \"c2_Op6_c3\"]\n","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"The vector-vector and operator overlaps go into calculating the Rayleigh quotient for an observable","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"    langle hatG^(2)(d) rangle = fracsum_ab mathbfc_a^dagger cdot hatG^(2)(d) cdot mathbfc_bsum_ab mathbfc_a^dagger cdot mathbfc_b ","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"The sum over all replica pairs (a,b), especially in the denominator, helps to avoid errors from poor sampling if the number of walkers is too low.","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"We use the function rayleigh_replica_estimator to calculate the Rayleigh quotient using all replicas in df, returning a RatioBlockingResult. Using the keyword skip will ignore the initial equilibration steps.","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"Now, we can calculate the correlation function for each value of d.","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"println(\"Two-body correlator from $n_replicas replicas:\")\nfor d in dvals\n    r = rayleigh_replica_estimator(df; op_name = \"Op$(d+1)\", skip=steps_equilibrate)\n    println(\"   G2($d) = $(r.f) ± $(r.σ_f)\")\nend","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"Two-body correlator from 3 replicas:\n   G2(0) = 0.21271686764762548 ± 0.0016505685007100013\n   G2(1) = 0.9177315504032093 ± 0.0005076670936241788\n   G2(2) = 0.9815451217385612 ± 0.000754907455300774\n   G2(3) = 0.9887297880688332 ± 0.0009427327665294891\n   G2(4) = 0.9815451217385612 ± 0.000754907455300774\n   G2(5) = 0.9177315504032093 ± 0.0005076670936241788\n","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"As expected, the onsite correlation at d=0 is low since this is a Mott insulating state with unit filling fraction, and is close to 10 for all other values of the displacement d.","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"Since we ran multiple independent replicas, we also have multiple estimates of the shift energy.","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"println(\"Shift energy from $n_replicas replicas:\")\nfor i in 1:n_replicas\n    se = shift_estimator(df; shift=\"shift_$i\", skip=steps_equilibrate)\n    println(\"   Replica $i: $(se.mean) ± $(se.err)\")\nend\n","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"Shift energy from 3 replicas:\n   Replica 1: -3.9980521561346904 ± 0.12654854014615718\n   Replica 2: -4.0007830757053675 ± 0.12683766415175615\n   Replica 3: -4.09754797173171 ± 0.15220786064018157\n","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"This page was generated using Literate.jl.","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"EditURL = \"../../../scripts/BHM-example.jl\"","category":"page"},{"location":"generated/BHM-example.html#Example-1:-1D-Bose-Hubbard-Model","page":"1D Bose-Hubbard Model","title":"Example 1: 1D Bose-Hubbard Model","text":"","category":"section"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"This is an example calculation finding the ground state of a 1D Bose-Hubbard chain with 6 particles in 6 lattice sites.","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"A runnable script for this example is located here. Run it with julia BHM-example.jl.","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"First, we load Rimu and Plots.","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"using Rimu\nusing Plots","category":"page"},{"location":"generated/BHM-example.html#Setting-up-the-model","page":"1D Bose-Hubbard Model","title":"Setting up the model","text":"","category":"section"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"We start by defining the physical problem. First, we generate an initial configuration which will be used as a starting point of our computation. In this example, we use a bosonic Fock state with 6 particles evenly distributed in 6 lattice sites.","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"initial_address = near_uniform(BoseFS{6,6})","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"BoseFS{6,6}(1, 1, 1, 1, 1, 1)","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"The Hamiltonian is constructed by initializing a struct with an initial address and model parameters. Here, we use the Bose Hubbard model in one-dimensional real space.","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"H = HubbardReal1D(initial_address; u = 6.0, t = 1.0)","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"HubbardReal1D(fs\"|1 1 1 1 1 1⟩\"; u=6.0, t=1.0)","category":"page"},{"location":"generated/BHM-example.html#Parameters-of-the-calculation","page":"1D Bose-Hubbard Model","title":"Parameters of the calculation","text":"","category":"section"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"Now, let's setup the Monte Carlo calculation. We need to decide the number of walkers to use in this Monte Carlo run, which is equivalent to the average one-norm of the coefficient vector. Higher values will result in better statistics, but require more memory and computing power.","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"target_walkers = 1_000;","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"FCIQMC takes a certain number of steps to equllibrate, after which the observables will fluctuate around a mean value. In this example, we will devote 1000 steps to equilibration and take an additional 2000 steps for measurement.","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"steps_equilibrate = 1_000;\nsteps_measure = 2_000;\nlast_step = steps_equilibrate + steps_measure","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"3000","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"Next, we pick a time step size. FCIQMC does not have a time step error, but the time step needs to be small enough, or the computation might diverge. If the time step is too small, however, the computation might take a long time to equilibrate. The appropriate time step size is problem-dependent and is best determined through experimentation.","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"time_step = 0.001;","category":"page"},{"location":"generated/BHM-example.html#Defining-an-observable","page":"1D Bose-Hubbard Model","title":"Defining an observable","text":"","category":"section"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"Now, let's set up an observable to measure. Here we will measure the projected energy. In additon to the shift, the projected energy is a second estimator for the energy. It usually produces better statistics than the shift.","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"We first need to define a projector. Here, we use the function default_starting_vector to generate a vector with only a single occupied configuration. We will use the same vector as the starting vector for the FCIQMC calculation.","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"initial_vector = default_starting_vector(initial_address; style=IsDynamicSemistochastic())","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"DVec{BoseFS{6, 6, BitString{11, 1, UInt16}},Float64} with 1 entry, style = IsDynamicSemistochastic{Float64,ThresholdCompression,DynamicSemistochastic}()\n  fs\"|1 1 1 1 1 1⟩\" => 10.0","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"The choice of the style argument already determines the FCIQMC algorithm to use. IsDynamicSemistochastic is usually the best choice as it reduces noise and improves the sign problem.","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"Observables that can be calculated by projection of the fluctuating quantum state onto a constant vector are passed into the ProjectorMonteCarloProblem with the post_step_strategy keyword argument.","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"post_step_strategy = ProjectedEnergy(H, initial_vector)","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"ProjectedEnergy{HubbardReal1D{Float64, BoseFS{6, 6, BitString{11, 1, UInt16}}, 6.0, 1.0}, Rimu.DictVectors.FrozenDVec{BoseFS{6, 6, BitString{11, 1, UInt16}}, Float64}, Rimu.DictVectors.FrozenDVec{BoseFS{6, 6, BitString{11, 1, UInt16}}, Float64}}(:vproj, :hproj, HubbardReal1D(fs\"|1 1 1 1 1 1⟩\"; u=6.0, t=1.0), Rimu.FrozenDVec([fs\"|1 1 1 1 1 1⟩\"=>10.0]), Rimu.FrozenDVec([fs\"|1 1 1 1 2 0⟩\"=>-14.1421, fs\"|0 2 1 1 1 1⟩\"=>-14.1421, fs\"|1 1 1 1 0 2⟩\"=>-14.1421, fs\"|1 2 0 1 1 1⟩\"=>-14.1421, fs\"|2 0 1 1 1 1⟩\"=>-14.1421, fs\"|1 1 1 2 0 1⟩\"=>-14.1421, fs\"|1 1 2 0 1 1⟩\"=>-14.1421, fs\"|1 1 0 2 1 1⟩\"=>-14.1421, fs\"|1 1 1 0 2 1⟩\"=>-14.1421, fs\"|1 0 2 1 1 1⟩\"=>-14.1421, fs\"|2 1 1 1 1 0⟩\"=>-14.1421, fs\"|0 1 1 1 1 2⟩\"=>-14.1421]))","category":"page"},{"location":"generated/BHM-example.html#Running-the-calculation","page":"1D Bose-Hubbard Model","title":"Running the calculation","text":"","category":"section"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"This is a two-step process: First we define a ProjectorMonteCarloProblem with all the parameters needed for the simulation","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"problem = ProjectorMonteCarloProblem(\n    H;\n    start_at = initial_vector,\n    last_step,\n    time_step,\n    target_walkers,\n    post_step_strategy\n);","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"To run the simulation we simply call solve on the problem","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"simulation = solve(problem);","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"The simulation object contains the results of the simulation as well as state vectors and strategies. We can extract the time series data for further analysis:","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"df = DataFrame(simulation);","category":"page"},{"location":"generated/BHM-example.html#Analysing-the-results","page":"1D Bose-Hubbard Model","title":"Analysing the results","text":"","category":"section"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"We can plot the norm of the coefficient vector as a function of the number of steps.","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"hline(\n    [target_walkers];\n    label=\"target_walkers\", xlabel=\"step\", ylabel=\"norm\",\n    color=2, linestyle=:dash, margin = 1Plots.cm\n)\nplot!(df.step, df.norm, label=\"norm\", color=1)","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"<?xml version=\"1.0\" encoding=\"utf-8\"?>\n<svg xmlns=\"http://www.w3.org/2000/svg\" xmlns:xlink=\"http://www.w3.org/1999/xlink\" width=\"600\" height=\"400\" viewBox=\"0 0 2400 1600\">\n<defs>\n  <clipPath id=\"clip400\">\n    <rect x=\"0\" y=\"0\" width=\"2400\" height=\"1600\"/>\n  </clipPath>\n</defs>\n<path clip-path=\"url(#clip400)\" d=\"M0 1600 L2400 1600 L2400 0 L0 0  Z\" fill=\"#ffffff\" fill-rule=\"evenodd\" fill-opacity=\"1\"/>\n<defs>\n  <clipPath id=\"clip401\">\n    <rect x=\"480\" y=\"0\" width=\"1681\" height=\"1600\"/>\n  </clipPath>\n</defs>\n<path clip-path=\"url(#clip400)\" d=\"M404.284 1281.45 L2211.02 1281.45 L2211.02 188.976 L404.284 188.976  Z\" fill=\"#ffffff\" fill-rule=\"evenodd\" fill-opacity=\"1\"/>\n<defs>\n  <clipPath id=\"clip402\">\n    <rect x=\"404\" y=\"188\" width=\"1808\" height=\"1093\"/>\n  </clipPath>\n</defs>\n<polyline clip-path=\"url(#clip402)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:2; stroke-opacity:0.1; fill:none\" points=\"454.849,1281.45 454.849,188.976 \"/>\n<polyline clip-path=\"url(#clip402)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:2; stroke-opacity:0.1; fill:none\" points=\"1023.2,1281.45 1023.2,188.976 \"/>\n<polyline clip-path=\"url(#clip402)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:2; stroke-opacity:0.1; fill:none\" points=\"1591.54,1281.45 1591.54,188.976 \"/>\n<polyline clip-path=\"url(#clip402)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:2; stroke-opacity:0.1; fill:none\" points=\"2159.89,1281.45 2159.89,188.976 \"/>\n<polyline clip-path=\"url(#clip402)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:2; stroke-opacity:0.1; fill:none\" points=\"404.284,1260.84 2211.02,1260.84 \"/>\n<polyline clip-path=\"url(#clip402)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:2; stroke-opacity:0.1; fill:none\" points=\"404.284,1003.11 2211.02,1003.11 \"/>\n<polyline clip-path=\"url(#clip402)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:2; stroke-opacity:0.1; fill:none\" points=\"404.284,745.378 2211.02,745.378 \"/>\n<polyline clip-path=\"url(#clip402)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:2; stroke-opacity:0.1; fill:none\" points=\"404.284,487.648 2211.02,487.648 \"/>\n<polyline clip-path=\"url(#clip402)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:2; stroke-opacity:0.1; fill:none\" points=\"404.284,229.919 2211.02,229.919 \"/>\n<polyline clip-path=\"url(#clip400)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"404.284,1281.45 2211.02,1281.45 \"/>\n<polyline clip-path=\"url(#clip400)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"454.849,1281.45 454.849,1262.55 \"/>\n<polyline clip-path=\"url(#clip400)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"1023.2,1281.45 1023.2,1262.55 \"/>\n<polyline clip-path=\"url(#clip400)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"1591.54,1281.45 1591.54,1262.55 \"/>\n<polyline clip-path=\"url(#clip400)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"2159.89,1281.45 2159.89,1262.55 \"/>\n<path clip-path=\"url(#clip400)\" d=\"M454.849 1312.37 Q451.238 1312.37 449.41 1315.93 Q447.604 1319.47 447.604 1326.6 Q447.604 1333.71 449.41 1337.27 Q451.238 1340.82 454.849 1340.82 Q458.484 1340.82 460.289 1337.27 Q462.118 1333.71 462.118 1326.6 Q462.118 1319.47 460.289 1315.93 Q458.484 1312.37 454.849 1312.37 M454.849 1308.66 Q460.659 1308.66 463.715 1313.27 Q466.794 1317.85 466.794 1326.6 Q466.794 1335.33 463.715 1339.94 Q460.659 1344.52 454.849 1344.52 Q449.039 1344.52 445.96 1339.94 Q442.905 1335.33 442.905 1326.6 Q442.905 1317.85 445.96 1313.27 Q449.039 1308.66 454.849 1308.66 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip400)\" d=\"M967.722 1339.91 L975.361 1339.91 L975.361 1313.55 L967.05 1315.21 L967.05 1310.95 L975.314 1309.29 L979.99 1309.29 L979.99 1339.91 L987.629 1339.91 L987.629 1343.85 L967.722 1343.85 L967.722 1339.91 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip400)\" d=\"M1007.07 1312.37 Q1003.46 1312.37 1001.63 1315.93 Q999.828 1319.47 999.828 1326.6 Q999.828 1333.71 1001.63 1337.27 Q1003.46 1340.82 1007.07 1340.82 Q1010.71 1340.82 1012.51 1337.27 Q1014.34 1333.71 1014.34 1326.6 Q1014.34 1319.47 1012.51 1315.93 Q1010.71 1312.37 1007.07 1312.37 M1007.07 1308.66 Q1012.88 1308.66 1015.94 1313.27 Q1019.02 1317.85 1019.02 1326.6 Q1019.02 1335.33 1015.94 1339.94 Q1012.88 1344.52 1007.07 1344.52 Q1001.26 1344.52 998.185 1339.94 Q995.129 1335.33 995.129 1326.6 Q995.129 1317.85 998.185 1313.27 Q1001.26 1308.66 1007.07 1308.66 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip400)\" d=\"M1037.24 1312.37 Q1033.62 1312.37 1031.8 1315.93 Q1029.99 1319.47 1029.99 1326.6 Q1029.99 1333.71 1031.8 1337.27 Q1033.62 1340.82 1037.24 1340.82 Q1040.87 1340.82 1042.68 1337.27 Q1044.5 1333.71 1044.5 1326.6 Q1044.5 1319.47 1042.68 1315.93 Q1040.87 1312.37 1037.24 1312.37 M1037.24 1308.66 Q1043.05 1308.66 1046.1 1313.27 Q1049.18 1317.85 1049.18 1326.6 Q1049.18 1335.33 1046.1 1339.94 Q1043.05 1344.52 1037.24 1344.52 Q1031.43 1344.52 1028.35 1339.94 Q1025.29 1335.33 1025.29 1326.6 Q1025.29 1317.85 1028.35 1313.27 Q1031.43 1308.66 1037.24 1308.66 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip400)\" d=\"M1067.4 1312.37 Q1063.79 1312.37 1061.96 1315.93 Q1060.15 1319.47 1060.15 1326.6 Q1060.15 1333.71 1061.96 1337.27 Q1063.79 1340.82 1067.4 1340.82 Q1071.03 1340.82 1072.84 1337.27 Q1074.67 1333.71 1074.67 1326.6 Q1074.67 1319.47 1072.84 1315.93 Q1071.03 1312.37 1067.4 1312.37 M1067.4 1308.66 Q1073.21 1308.66 1076.26 1313.27 Q1079.34 1317.85 1079.34 1326.6 Q1079.34 1335.33 1076.26 1339.94 Q1073.21 1344.52 1067.4 1344.52 Q1061.59 1344.52 1058.51 1339.94 Q1055.45 1335.33 1055.45 1326.6 Q1055.45 1317.85 1058.51 1313.27 Q1061.59 1308.66 1067.4 1308.66 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip400)\" d=\"M1540.15 1339.91 L1556.47 1339.91 L1556.47 1343.85 L1534.53 1343.85 L1534.53 1339.91 Q1537.19 1337.16 1541.77 1332.53 Q1546.38 1327.88 1547.56 1326.53 Q1549.81 1324.01 1550.69 1322.27 Q1551.59 1320.51 1551.59 1318.82 Q1551.59 1316.07 1549.64 1314.33 Q1547.72 1312.6 1544.62 1312.6 Q1542.42 1312.6 1539.97 1313.36 Q1537.54 1314.13 1534.76 1315.68 L1534.76 1310.95 Q1537.58 1309.82 1540.04 1309.24 Q1542.49 1308.66 1544.53 1308.66 Q1549.9 1308.66 1553.09 1311.35 Q1556.29 1314.03 1556.29 1318.52 Q1556.29 1320.65 1555.48 1322.57 Q1554.69 1324.47 1552.58 1327.07 Q1552.01 1327.74 1548.9 1330.95 Q1545.8 1334.15 1540.15 1339.91 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip400)\" d=\"M1576.29 1312.37 Q1572.68 1312.37 1570.85 1315.93 Q1569.04 1319.47 1569.04 1326.6 Q1569.04 1333.71 1570.85 1337.27 Q1572.68 1340.82 1576.29 1340.82 Q1579.92 1340.82 1581.73 1337.27 Q1583.56 1333.71 1583.56 1326.6 Q1583.56 1319.47 1581.73 1315.93 Q1579.92 1312.37 1576.29 1312.37 M1576.29 1308.66 Q1582.1 1308.66 1585.15 1313.27 Q1588.23 1317.85 1588.23 1326.6 Q1588.23 1335.33 1585.15 1339.94 Q1582.1 1344.52 1576.29 1344.52 Q1570.48 1344.52 1567.4 1339.94 Q1564.34 1335.33 1564.34 1326.6 Q1564.34 1317.85 1567.4 1313.27 Q1570.48 1308.66 1576.29 1308.66 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip400)\" d=\"M1606.45 1312.37 Q1602.84 1312.37 1601.01 1315.93 Q1599.2 1319.47 1599.2 1326.6 Q1599.2 1333.71 1601.01 1337.27 Q1602.84 1340.82 1606.45 1340.82 Q1610.08 1340.82 1611.89 1337.27 Q1613.72 1333.71 1613.72 1326.6 Q1613.72 1319.47 1611.89 1315.93 Q1610.08 1312.37 1606.45 1312.37 M1606.45 1308.66 Q1612.26 1308.66 1615.32 1313.27 Q1618.39 1317.85 1618.39 1326.6 Q1618.39 1335.33 1615.32 1339.94 Q1612.26 1344.52 1606.45 1344.52 Q1600.64 1344.52 1597.56 1339.94 Q1594.51 1335.33 1594.51 1326.6 Q1594.51 1317.85 1597.56 1313.27 Q1600.64 1308.66 1606.45 1308.66 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip400)\" d=\"M1636.61 1312.37 Q1633 1312.37 1631.17 1315.93 Q1629.37 1319.47 1629.37 1326.6 Q1629.37 1333.71 1631.17 1337.27 Q1633 1340.82 1636.61 1340.82 Q1640.25 1340.82 1642.05 1337.27 Q1643.88 1333.71 1643.88 1326.6 Q1643.88 1319.47 1642.05 1315.93 Q1640.25 1312.37 1636.61 1312.37 M1636.61 1308.66 Q1642.42 1308.66 1645.48 1313.27 Q1648.56 1317.85 1648.56 1326.6 Q1648.56 1335.33 1645.48 1339.94 Q1642.42 1344.52 1636.61 1344.52 Q1630.8 1344.52 1627.72 1339.94 Q1624.67 1335.33 1624.67 1326.6 Q1624.67 1317.85 1627.72 1313.27 Q1630.8 1308.66 1636.61 1308.66 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip400)\" d=\"M2118.57 1325.21 Q2121.93 1325.93 2123.8 1328.2 Q2125.7 1330.47 2125.7 1333.8 Q2125.7 1338.92 2122.18 1341.72 Q2118.66 1344.52 2112.18 1344.52 Q2110.01 1344.52 2107.69 1344.08 Q2105.4 1343.66 2102.95 1342.81 L2102.95 1338.29 Q2104.89 1339.43 2107.2 1340 Q2109.52 1340.58 2112.04 1340.58 Q2116.44 1340.58 2118.73 1338.85 Q2121.05 1337.11 2121.05 1333.8 Q2121.05 1330.75 2118.89 1329.03 Q2116.76 1327.3 2112.95 1327.3 L2108.92 1327.3 L2108.92 1323.45 L2113.13 1323.45 Q2116.58 1323.45 2118.41 1322.09 Q2120.24 1320.7 2120.24 1318.11 Q2120.24 1315.44 2118.34 1314.03 Q2116.46 1312.6 2112.95 1312.6 Q2111.02 1312.6 2108.82 1313.01 Q2106.63 1313.43 2103.99 1314.31 L2103.99 1310.14 Q2106.65 1309.4 2108.96 1309.03 Q2111.3 1308.66 2113.36 1308.66 Q2118.69 1308.66 2121.79 1311.09 Q2124.89 1313.5 2124.89 1317.62 Q2124.89 1320.49 2123.25 1322.48 Q2121.6 1324.45 2118.57 1325.21 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip400)\" d=\"M2144.57 1312.37 Q2140.95 1312.37 2139.13 1315.93 Q2137.32 1319.47 2137.32 1326.6 Q2137.32 1333.71 2139.13 1337.27 Q2140.95 1340.82 2144.57 1340.82 Q2148.2 1340.82 2150.01 1337.27 Q2151.83 1333.71 2151.83 1326.6 Q2151.83 1319.47 2150.01 1315.93 Q2148.2 1312.37 2144.57 1312.37 M2144.57 1308.66 Q2150.38 1308.66 2153.43 1313.27 Q2156.51 1317.85 2156.51 1326.6 Q2156.51 1335.33 2153.43 1339.94 Q2150.38 1344.52 2144.57 1344.52 Q2138.76 1344.52 2135.68 1339.94 Q2132.62 1335.33 2132.62 1326.6 Q2132.62 1317.85 2135.68 1313.27 Q2138.76 1308.66 2144.57 1308.66 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip400)\" d=\"M2174.73 1312.37 Q2171.12 1312.37 2169.29 1315.93 Q2167.48 1319.47 2167.48 1326.6 Q2167.48 1333.71 2169.29 1337.27 Q2171.12 1340.82 2174.73 1340.82 Q2178.36 1340.82 2180.17 1337.27 Q2182 1333.71 2182 1326.6 Q2182 1319.47 2180.17 1315.93 Q2178.36 1312.37 2174.73 1312.37 M2174.73 1308.66 Q2180.54 1308.66 2183.59 1313.27 Q2186.67 1317.85 2186.67 1326.6 Q2186.67 1335.33 2183.59 1339.94 Q2180.54 1344.52 2174.73 1344.52 Q2168.92 1344.52 2165.84 1339.94 Q2162.78 1335.33 2162.78 1326.6 Q2162.78 1317.85 2165.84 1313.27 Q2168.92 1308.66 2174.73 1308.66 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip400)\" d=\"M2204.89 1312.37 Q2201.28 1312.37 2199.45 1315.93 Q2197.64 1319.47 2197.64 1326.6 Q2197.64 1333.71 2199.45 1337.27 Q2201.28 1340.82 2204.89 1340.82 Q2208.52 1340.82 2210.33 1337.27 Q2212.16 1333.71 2212.16 1326.6 Q2212.16 1319.47 2210.33 1315.93 Q2208.52 1312.37 2204.89 1312.37 M2204.89 1308.66 Q2210.7 1308.66 2213.75 1313.27 Q2216.83 1317.85 2216.83 1326.6 Q2216.83 1335.33 2213.75 1339.94 Q2210.7 1344.52 2204.89 1344.52 Q2199.08 1344.52 2196 1339.94 Q2192.94 1335.33 2192.94 1326.6 Q2192.94 1317.85 2196 1313.27 Q2199.08 1308.66 2204.89 1308.66 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip400)\" d=\"M1266.04 1391.71 L1266.04 1397.25 Q1263.56 1395.98 1260.88 1395.34 Q1258.21 1394.71 1255.34 1394.71 Q1250.98 1394.71 1248.79 1396.04 Q1246.62 1397.38 1246.62 1400.05 Q1246.62 1402.09 1248.18 1403.27 Q1249.74 1404.41 1254.45 1405.46 L1256.46 1405.91 Q1262.7 1407.25 1265.31 1409.7 Q1267.95 1412.12 1267.95 1416.48 Q1267.95 1421.44 1264 1424.34 Q1260.09 1427.23 1253.21 1427.23 Q1250.35 1427.23 1247.23 1426.66 Q1244.14 1426.12 1240.7 1425.01 L1240.7 1418.96 Q1243.95 1420.65 1247.1 1421.51 Q1250.25 1422.33 1253.34 1422.33 Q1257.48 1422.33 1259.7 1420.93 Q1261.93 1419.5 1261.93 1416.92 Q1261.93 1414.54 1260.31 1413.26 Q1258.72 1411.99 1253.27 1410.81 L1251.24 1410.33 Q1245.79 1409.19 1243.38 1406.83 Q1240.96 1404.45 1240.96 1400.31 Q1240.96 1395.28 1244.52 1392.54 Q1248.09 1389.8 1254.64 1389.8 Q1257.89 1389.8 1260.75 1390.28 Q1263.62 1390.76 1266.04 1391.71 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip400)\" d=\"M1283.07 1380.54 L1283.07 1390.66 L1295.13 1390.66 L1295.13 1395.22 L1283.07 1395.22 L1283.07 1414.57 Q1283.07 1418.93 1284.24 1420.17 Q1285.45 1421.41 1289.11 1421.41 L1295.13 1421.41 L1295.13 1426.31 L1289.11 1426.31 Q1282.33 1426.31 1279.76 1423.8 Q1277.18 1421.25 1277.18 1414.57 L1277.18 1395.22 L1272.88 1395.22 L1272.88 1390.66 L1277.18 1390.66 L1277.18 1380.54 L1283.07 1380.54 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip400)\" d=\"M1333.32 1407.02 L1333.32 1409.89 L1306.4 1409.89 Q1306.78 1415.94 1310.02 1419.12 Q1313.3 1422.27 1319.13 1422.27 Q1322.5 1422.27 1325.65 1421.44 Q1328.84 1420.61 1331.95 1418.96 L1331.95 1424.5 Q1328.8 1425.83 1325.49 1426.53 Q1322.18 1427.23 1318.78 1427.23 Q1310.25 1427.23 1305.25 1422.27 Q1300.29 1417.3 1300.29 1408.84 Q1300.29 1400.08 1305 1394.96 Q1309.74 1389.8 1317.76 1389.8 Q1324.95 1389.8 1329.12 1394.45 Q1333.32 1399.07 1333.32 1407.02 M1327.47 1405.3 Q1327.4 1400.5 1324.76 1397.63 Q1322.15 1394.77 1317.82 1394.77 Q1312.92 1394.77 1309.96 1397.54 Q1307.03 1400.31 1306.59 1405.34 L1327.47 1405.3 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip400)\" d=\"M1348.6 1420.96 L1348.6 1439.87 L1342.71 1439.87 L1342.71 1390.66 L1348.6 1390.66 L1348.6 1396.07 Q1350.45 1392.89 1353.25 1391.36 Q1356.08 1389.8 1360 1389.8 Q1366.49 1389.8 1370.53 1394.96 Q1374.6 1400.12 1374.6 1408.52 Q1374.6 1416.92 1370.53 1422.08 Q1366.49 1427.23 1360 1427.23 Q1356.08 1427.23 1353.25 1425.71 Q1350.45 1424.15 1348.6 1420.96 M1368.53 1408.52 Q1368.53 1402.06 1365.85 1398.4 Q1363.21 1394.71 1358.56 1394.71 Q1353.92 1394.71 1351.24 1398.4 Q1348.6 1402.06 1348.6 1408.52 Q1348.6 1414.98 1351.24 1418.67 Q1353.92 1422.33 1358.56 1422.33 Q1363.21 1422.33 1365.85 1418.67 Q1368.53 1414.98 1368.53 1408.52 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><polyline clip-path=\"url(#clip400)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"404.284,1281.45 404.284,188.976 \"/>\n<polyline clip-path=\"url(#clip400)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"404.284,1260.84 423.181,1260.84 \"/>\n<polyline clip-path=\"url(#clip400)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"404.284,1003.11 423.181,1003.11 \"/>\n<polyline clip-path=\"url(#clip400)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"404.284,745.378 423.181,745.378 \"/>\n<polyline clip-path=\"url(#clip400)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"404.284,487.648 423.181,487.648 \"/>\n<polyline clip-path=\"url(#clip400)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"404.284,229.919 423.181,229.919 \"/>\n<path clip-path=\"url(#clip400)\" d=\"M356.339 1246.64 Q352.728 1246.64 350.899 1250.2 Q349.094 1253.74 349.094 1260.87 Q349.094 1267.98 350.899 1271.54 Q352.728 1275.09 356.339 1275.09 Q359.973 1275.09 361.779 1271.54 Q363.608 1267.98 363.608 1260.87 Q363.608 1253.74 361.779 1250.2 Q359.973 1246.64 356.339 1246.64 M356.339 1242.93 Q362.149 1242.93 365.205 1247.54 Q368.284 1252.12 368.284 1260.87 Q368.284 1269.6 365.205 1274.21 Q362.149 1278.79 356.339 1278.79 Q350.529 1278.79 347.45 1274.21 Q344.395 1269.6 344.395 1260.87 Q344.395 1252.12 347.45 1247.54 Q350.529 1242.93 356.339 1242.93 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip400)\" d=\"M290.043 1016.45 L306.363 1016.45 L306.363 1020.39 L284.418 1020.39 L284.418 1016.45 Q287.08 1013.7 291.664 1009.07 Q296.27 1004.42 297.451 1003.07 Q299.696 1000.55 300.576 998.814 Q301.478 997.055 301.478 995.365 Q301.478 992.61 299.534 990.874 Q297.613 989.138 294.511 989.138 Q292.312 989.138 289.858 989.902 Q287.427 990.666 284.65 992.217 L284.65 987.495 Q287.474 986.36 289.927 985.782 Q292.381 985.203 294.418 985.203 Q299.789 985.203 302.983 987.888 Q306.177 990.573 306.177 995.064 Q306.177 997.194 305.367 999.115 Q304.58 1001.01 302.474 1003.61 Q301.895 1004.28 298.793 1007.49 Q295.691 1010.69 290.043 1016.45 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip400)\" d=\"M316.224 985.828 L334.58 985.828 L334.58 989.763 L320.506 989.763 L320.506 998.235 Q321.524 997.888 322.543 997.726 Q323.562 997.541 324.58 997.541 Q330.367 997.541 333.747 1000.71 Q337.126 1003.88 337.126 1009.3 Q337.126 1014.88 333.654 1017.98 Q330.182 1021.06 323.862 1021.06 Q321.687 1021.06 319.418 1020.69 Q317.173 1020.32 314.765 1019.58 L314.765 1014.88 Q316.849 1016.01 319.071 1016.57 Q321.293 1017.12 323.77 1017.12 Q327.774 1017.12 330.112 1015.02 Q332.45 1012.91 332.45 1009.3 Q332.45 1005.69 330.112 1003.58 Q327.774 1001.48 323.77 1001.48 Q321.895 1001.48 320.02 1001.89 Q318.168 1002.31 316.224 1003.19 L316.224 985.828 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip400)\" d=\"M356.339 988.907 Q352.728 988.907 350.899 992.471 Q349.094 996.013 349.094 1003.14 Q349.094 1010.25 350.899 1013.81 Q352.728 1017.36 356.339 1017.36 Q359.973 1017.36 361.779 1013.81 Q363.608 1010.25 363.608 1003.14 Q363.608 996.013 361.779 992.471 Q359.973 988.907 356.339 988.907 M356.339 985.203 Q362.149 985.203 365.205 989.809 Q368.284 994.393 368.284 1003.14 Q368.284 1011.87 365.205 1016.48 Q362.149 1021.06 356.339 1021.06 Q350.529 1021.06 347.45 1016.48 Q344.395 1011.87 344.395 1003.14 Q344.395 994.393 347.45 989.809 Q350.529 985.203 356.339 985.203 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip400)\" d=\"M286.062 728.098 L304.418 728.098 L304.418 732.033 L290.344 732.033 L290.344 740.506 Q291.363 740.158 292.381 739.996 Q293.4 739.811 294.418 739.811 Q300.205 739.811 303.585 742.982 Q306.964 746.154 306.964 751.57 Q306.964 757.149 303.492 760.251 Q300.02 763.329 293.701 763.329 Q291.525 763.329 289.256 762.959 Q287.011 762.589 284.603 761.848 L284.603 757.149 Q286.687 758.283 288.909 758.839 Q291.131 759.394 293.608 759.394 Q297.613 759.394 299.951 757.288 Q302.288 755.181 302.288 751.57 Q302.288 747.959 299.951 745.853 Q297.613 743.746 293.608 743.746 Q291.733 743.746 289.858 744.163 Q288.006 744.58 286.062 745.459 L286.062 728.098 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip400)\" d=\"M326.177 731.177 Q322.566 731.177 320.737 734.742 Q318.932 738.283 318.932 745.413 Q318.932 752.519 320.737 756.084 Q322.566 759.626 326.177 759.626 Q329.811 759.626 331.617 756.084 Q333.446 752.519 333.446 745.413 Q333.446 738.283 331.617 734.742 Q329.811 731.177 326.177 731.177 M326.177 727.473 Q331.987 727.473 335.043 732.08 Q338.122 736.663 338.122 745.413 Q338.122 754.14 335.043 758.746 Q331.987 763.329 326.177 763.329 Q320.367 763.329 317.288 758.746 Q314.233 754.14 314.233 745.413 Q314.233 736.663 317.288 732.08 Q320.367 727.473 326.177 727.473 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip400)\" d=\"M356.339 731.177 Q352.728 731.177 350.899 734.742 Q349.094 738.283 349.094 745.413 Q349.094 752.519 350.899 756.084 Q352.728 759.626 356.339 759.626 Q359.973 759.626 361.779 756.084 Q363.608 752.519 363.608 745.413 Q363.608 738.283 361.779 734.742 Q359.973 731.177 356.339 731.177 M356.339 727.473 Q362.149 727.473 365.205 732.08 Q368.284 736.663 368.284 745.413 Q368.284 754.14 365.205 758.746 Q362.149 763.329 356.339 763.329 Q350.529 763.329 347.45 758.746 Q344.395 754.14 344.395 745.413 Q344.395 736.663 347.45 732.08 Q350.529 727.473 356.339 727.473 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip400)\" d=\"M284.835 470.368 L307.057 470.368 L307.057 472.359 L294.511 504.928 L289.627 504.928 L301.432 474.304 L284.835 474.304 L284.835 470.368 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip400)\" d=\"M316.224 470.368 L334.58 470.368 L334.58 474.304 L320.506 474.304 L320.506 482.776 Q321.524 482.429 322.543 482.266 Q323.562 482.081 324.58 482.081 Q330.367 482.081 333.747 485.253 Q337.126 488.424 337.126 493.84 Q337.126 499.419 333.654 502.521 Q330.182 505.6 323.862 505.6 Q321.687 505.6 319.418 505.229 Q317.173 504.859 314.765 504.118 L314.765 499.419 Q316.849 500.553 319.071 501.109 Q321.293 501.665 323.77 501.665 Q327.774 501.665 330.112 499.558 Q332.45 497.452 332.45 493.84 Q332.45 490.229 330.112 488.123 Q327.774 486.016 323.77 486.016 Q321.895 486.016 320.02 486.433 Q318.168 486.85 316.224 487.729 L316.224 470.368 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip400)\" d=\"M356.339 473.447 Q352.728 473.447 350.899 477.012 Q349.094 480.554 349.094 487.683 Q349.094 494.79 350.899 498.354 Q352.728 501.896 356.339 501.896 Q359.973 501.896 361.779 498.354 Q363.608 494.79 363.608 487.683 Q363.608 480.554 361.779 477.012 Q359.973 473.447 356.339 473.447 M356.339 469.743 Q362.149 469.743 365.205 474.35 Q368.284 478.933 368.284 487.683 Q368.284 496.41 365.205 501.016 Q362.149 505.6 356.339 505.6 Q350.529 505.6 347.45 501.016 Q344.395 496.41 344.395 487.683 Q344.395 478.933 347.45 474.35 Q350.529 469.743 356.339 469.743 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip400)\" d=\"M256.664 243.263 L264.303 243.263 L264.303 216.898 L255.992 218.564 L255.992 214.305 L264.256 212.639 L268.932 212.639 L268.932 243.263 L276.571 243.263 L276.571 247.199 L256.664 247.199 L256.664 243.263 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip400)\" d=\"M296.015 215.717 Q292.404 215.717 290.576 219.282 Q288.77 222.824 288.77 229.953 Q288.77 237.06 290.576 240.625 Q292.404 244.166 296.015 244.166 Q299.65 244.166 301.455 240.625 Q303.284 237.06 303.284 229.953 Q303.284 222.824 301.455 219.282 Q299.65 215.717 296.015 215.717 M296.015 212.014 Q301.826 212.014 304.881 216.62 Q307.96 221.203 307.96 229.953 Q307.96 238.68 304.881 243.287 Q301.826 247.87 296.015 247.87 Q290.205 247.87 287.127 243.287 Q284.071 238.68 284.071 229.953 Q284.071 221.203 287.127 216.62 Q290.205 212.014 296.015 212.014 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip400)\" d=\"M326.177 215.717 Q322.566 215.717 320.737 219.282 Q318.932 222.824 318.932 229.953 Q318.932 237.06 320.737 240.625 Q322.566 244.166 326.177 244.166 Q329.811 244.166 331.617 240.625 Q333.446 237.06 333.446 229.953 Q333.446 222.824 331.617 219.282 Q329.811 215.717 326.177 215.717 M326.177 212.014 Q331.987 212.014 335.043 216.62 Q338.122 221.203 338.122 229.953 Q338.122 238.68 335.043 243.287 Q331.987 247.87 326.177 247.87 Q320.367 247.87 317.288 243.287 Q314.233 238.68 314.233 229.953 Q314.233 221.203 317.288 216.62 Q320.367 212.014 326.177 212.014 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip400)\" d=\"M356.339 215.717 Q352.728 215.717 350.899 219.282 Q349.094 222.824 349.094 229.953 Q349.094 237.06 350.899 240.625 Q352.728 244.166 356.339 244.166 Q359.973 244.166 361.779 240.625 Q363.608 237.06 363.608 229.953 Q363.608 222.824 361.779 219.282 Q359.973 215.717 356.339 215.717 M356.339 212.014 Q362.149 212.014 365.205 216.62 Q368.284 221.203 368.284 229.953 Q368.284 238.68 365.205 243.287 Q362.149 247.87 356.339 247.87 Q350.529 247.87 347.45 243.287 Q344.395 238.68 344.395 229.953 Q344.395 221.203 347.45 216.62 Q350.529 212.014 356.339 212.014 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip400)\" d=\"M184.22 784.801 L205.736 784.801 L205.736 790.657 L184.411 790.657 Q179.351 790.657 176.836 792.631 Q174.322 794.604 174.322 798.551 Q174.322 803.293 177.345 806.03 Q180.369 808.768 185.589 808.768 L205.736 808.768 L205.736 814.656 L170.088 814.656 L170.088 808.768 L175.627 808.768 Q172.412 806.667 170.821 803.834 Q169.229 800.97 169.229 797.246 Q169.229 791.103 173.049 787.952 Q176.836 784.801 184.22 784.801 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip400)\" d=\"M174.194 759.306 Q174.194 764.017 177.886 766.754 Q181.547 769.491 187.944 769.491 Q194.342 769.491 198.034 766.786 Q201.694 764.049 201.694 759.306 Q201.694 754.627 198.002 751.89 Q194.31 749.153 187.944 749.153 Q181.61 749.153 177.918 751.89 Q174.194 754.627 174.194 759.306 M169.229 759.306 Q169.229 751.667 174.194 747.307 Q179.16 742.946 187.944 742.946 Q196.697 742.946 201.694 747.307 Q206.659 751.667 206.659 759.306 Q206.659 766.977 201.694 771.337 Q196.697 775.666 187.944 775.666 Q179.16 775.666 174.194 771.337 Q169.229 766.977 169.229 759.306 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip400)\" d=\"M175.563 712.582 Q174.99 713.569 174.735 714.746 Q174.449 715.892 174.449 717.293 Q174.449 722.258 177.696 724.931 Q180.91 727.573 186.958 727.573 L205.736 727.573 L205.736 733.461 L170.088 733.461 L170.088 727.573 L175.627 727.573 Q172.38 725.727 170.821 722.767 Q169.229 719.807 169.229 715.574 Q169.229 714.969 169.325 714.237 Q169.388 713.505 169.547 712.614 L175.563 712.582 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip400)\" d=\"M176.932 679.83 Q172.985 677.634 171.107 674.579 Q169.229 671.523 169.229 667.385 Q169.229 661.815 173.144 658.792 Q177.027 655.768 184.22 655.768 L205.736 655.768 L205.736 661.656 L184.411 661.656 Q179.287 661.656 176.804 663.47 Q174.322 665.285 174.322 669.009 Q174.322 673.56 177.345 676.202 Q180.369 678.844 185.589 678.844 L205.736 678.844 L205.736 684.732 L184.411 684.732 Q179.255 684.732 176.804 686.546 Q174.322 688.36 174.322 692.148 Q174.322 696.636 177.377 699.278 Q180.401 701.919 185.589 701.919 L205.736 701.919 L205.736 707.808 L170.088 707.808 L170.088 701.919 L175.627 701.919 Q172.348 699.914 170.789 697.113 Q169.229 694.312 169.229 690.461 Q169.229 686.578 171.202 683.873 Q173.176 681.135 176.932 679.83 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><polyline clip-path=\"url(#clip402)\" style=\"stroke:#e26f46; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" stroke-dasharray=\"16, 10\" points=\"-1402.46,229.919 4017.76,229.919 \"/>\n<polyline clip-path=\"url(#clip402)\" style=\"stroke:#009af9; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"455.418,1250.53 455.986,1250.45 456.554,1249.27 457.123,1249.13 457.691,1248.9 458.259,1248.56 458.828,1248.19 459.396,1247.75 459.964,1247.2 460.533,1246.6 461.101,1244.92 461.669,1244.19 462.238,1243.4 462.806,1242.52 463.375,1241.55 463.943,1240.49 464.511,1239.33 465.08,1238.07 465.648,1235.67 466.216,1234.18 466.785,1232.58 467.353,1229.79 467.921,1225.9 468.49,1222.9 469.058,1220.8 469.626,1218.49 470.195,1215.02 470.763,1212.47 471.331,1209.79 471.9,1205.85 472.468,1201.71 473.036,1198.49 473.605,1194.99 474.173,1191.4 474.741,1187.57 475.31,1182.51 475.878,1178.27 476.446,1173.69 477.015,1169.02 477.583,1164.1 478.152,1155.84 478.72,1150.49 479.288,1143.9 479.857,1137.17 480.425,1130.15 480.993,1122.93 481.562,1116.57 482.13,1108.91 482.698,1102.01 483.267,1093.85 483.835,1086.55 484.403,1078.05 484.972,1069.29 485.54,1059.44 486.108,1051.55 486.677,1042.37 487.245,1034.15 487.813,1024.65 488.382,1014.02 488.95,1003.02 489.518,994.006 490.087,983.957 490.655,972.688 491.224,961.405 491.792,949.008 492.36,938.521 492.929,926.766 493.497,915.112 494.065,903.735 494.634,891.205 495.202,881.622 495.77,872.025 496.339,862.39 496.907,850.732 497.475,841.277 498.044,830.605 498.612,820.095 499.18,809.542 499.749,799.992 500.317,788.185 500.885,772.298 501.454,761.993 502.022,746.627 502.59,734.675 503.159,723.918 503.727,714.481 504.295,705.963 504.864,694.345 505.432,686.016 506.001,677.792 506.569,668.436 507.137,659.221 507.706,649.365 508.274,639.475 508.842,630.845 509.411,621.295 509.979,610.772 510.547,602.484 511.116,594.383 511.684,587.445 512.252,576.521 512.821,567.926 513.389,560.489 513.957,553.299 514.526,544.988 515.094,539.032 515.662,529.1 516.231,521.418 516.799,511.843 517.367,506.502 517.936,500.255 518.504,491.994 519.072,486.326 519.641,481.585 520.209,477.782 520.778,470.86 521.346,467.042 521.914,462.426 522.483,456.77 523.051,453.214 523.619,446.515 524.188,443.345 524.756,437.969 525.324,434.792 525.893,430.606 526.461,424.402 527.029,420.26 527.598,414.206 528.166,408.333 528.734,402.503 529.303,396.809 529.871,394.563 530.439,386.26 531.008,383.396 531.576,380.567 532.144,376.766 532.713,373.797 533.281,371.217 533.85,366.451 534.418,364.02 534.986,360.701 535.555,357.313 536.123,353.983 536.691,350.677 537.26,346.383 537.828,343.18 538.396,340.089 538.965,334.192 539.533,329.724 540.101,326.061 540.67,324.139 541.238,322.006 541.806,320.05 542.375,317.957 542.943,317.015 543.511,314.984 544.08,313.927 544.648,316.076 545.216,313.8 545.785,311.683 546.353,311.331 546.921,309.348 547.49,308.322 548.058,306.079 548.627,306.948 549.195,305.939 549.763,302.763 550.332,299.667 550.9,295.502 551.468,294.628 552.037,292.856 552.605,291.216 553.173,288.39 553.742,286.651 554.31,285.26 554.878,287.998 555.447,287.293 556.015,286.421 556.583,285.627 557.152,283.616 557.72,280.886 558.288,280.307 558.857,280.914 559.425,280.401 559.993,280.613 560.562,275.954 561.13,275.776 561.698,275.228 562.267,274.605 562.835,272.233 563.404,270.836 563.972,270.617 564.54,268.434 565.109,268.116 565.677,265.029 566.245,267.032 566.814,268.116 567.382,268.914 567.95,267.348 568.519,269.109 569.087,267.76 569.655,266.404 570.224,266.081 570.792,267.684 571.36,267.264 571.929,266.757 572.497,269.031 573.065,267.304 573.634,267.689 574.202,266.998 574.77,265.095 575.339,264.582 575.907,259.873 576.476,257.431 577.044,257.538 577.612,255.241 578.181,254.168 578.749,254.864 579.317,252.814 579.886,250.94 580.454,249.044 581.022,248.234 581.591,245.366 582.159,245.876 582.727,244.389 583.296,243.804 583.864,243.398 584.432,246.138 585.001,246.655 585.569,246.883 586.137,245.191 586.706,247.638 587.274,247.823 587.842,247.043 588.411,245.269 588.979,245.558 589.547,242.676 590.116,244.098 590.684,244.545 591.253,242.71 591.821,242.974 592.389,244.201 592.958,243.195 593.526,244.598 594.094,244.763 594.663,245.029 595.231,244.173 595.799,244.519 596.368,242.823 596.936,241.963 597.504,242.152 598.073,240.529 598.641,243.032 599.209,244.3 599.778,244.315 600.346,243.544 600.914,244.646 601.483,244.778 602.051,246.874 602.619,243.461 603.188,244.704 603.756,246.726 604.325,247.801 604.893,245.552 605.461,245.786 606.03,248.826 606.598,248.598 607.166,248.207 607.735,247.863 608.303,247.568 608.871,247.348 609.44,248.056 610.008,246.889 610.576,245.555 611.145,243.278 611.713,241.243 612.281,241.471 612.85,241.67 613.418,240.568 613.986,238.648 614.555,238.953 615.123,239.229 615.691,237.52 616.26,237.872 616.828,238.197 617.396,238.454 617.965,238.602 618.533,238.867 619.102,239.972 619.67,240.119 620.238,238.008 620.807,239.157 621.375,240.368 621.943,241.291 622.512,240.193 623.08,240.12 623.648,241.205 624.217,240.167 624.785,241.315 625.353,241.103 625.922,240.844 626.49,239.794 627.058,237.769 627.627,237.051 628.195,235.36 628.763,235.622 629.332,235.89 629.9,232.11 630.468,230.784 631.037,230.454 631.605,230.161 632.173,230.785 632.742,230.47 633.31,231.085 633.879,232.846 634.447,234.373 635.015,233.845 635.584,232.227 636.152,232.535 636.72,234.188 637.289,235.759 637.857,237.069 638.425,237.351 638.994,237.704 639.562,238.936 640.13,239.023 640.699,239.191 641.267,237.151 641.835,238.178 642.404,237.31 642.972,239.585 643.54,238.535 644.109,238.565 644.677,236.367 645.245,238.58 645.814,239.642 646.382,241.439 646.951,241.421 647.519,243.061 648.087,241.307 648.656,240.811 649.224,240.594 649.792,240.296 650.361,242.356 650.929,240.293 651.497,239.258 652.066,239.296 652.634,239.245 653.202,239.069 653.771,237.935 654.339,236.783 654.907,236.685 655.476,237.914 656.044,238.911 656.612,238.793 657.181,239.477 657.749,238.243 658.317,236.001 658.886,239.208 659.454,239.159 660.022,237.863 660.591,238.606 661.159,238.171 661.728,237.023 662.296,236.777 662.864,236.671 663.433,237.735 664.001,237.366 664.569,239.215 665.138,238.845 665.706,238.721 666.274,236.313 666.843,234.845 667.411,233.964 667.979,231.961 668.548,232.314 669.116,232.535 669.684,235.75 670.253,235.351 670.821,234.339 671.389,234.491 671.958,232.556 672.526,233.732 673.094,231.535 673.663,227.655 674.231,227.058 674.799,228.549 675.368,228.859 675.936,229.391 676.505,227.875 677.073,228.192 677.641,226.528 678.21,226.273 678.778,227.073 679.346,226.624 679.915,225.298 680.483,225.928 681.051,226.599 681.62,229.412 682.188,232.063 682.756,234.37 683.325,234.57 683.893,234.539 684.461,238.778 685.03,239.622 685.598,239.276 686.166,241.01 686.735,240.529 687.303,240.066 687.871,239.745 688.44,239.459 689.008,239.302 689.577,238.91 690.145,238.579 690.713,239.255 691.282,238.855 691.85,237.241 692.418,237.928 692.987,237.44 693.555,236.382 694.123,234.167 694.692,236.018 695.26,234.814 695.828,235.486 696.397,234.11 696.965,232.959 697.533,233.808 698.102,232.8 698.67,230.838 699.238,230.031 699.807,230.234 700.375,226.183 700.943,229.731 701.512,228.025 702.08,230.58 702.648,230.685 703.217,231.951 703.785,233.098 704.354,234.391 704.922,235.258 705.49,237.261 706.059,239.06 706.627,235.646 707.195,234.268 707.764,234.273 708.332,232.152 708.9,232.175 709.469,233.382 710.037,232.195 710.605,233.232 711.174,234.23 711.742,233.073 712.31,233.005 712.879,231.983 713.447,233.901 714.015,233.668 714.584,232.497 715.152,230.348 715.72,228.35 716.289,229.59 716.857,228.8 717.425,229.107 717.994,228.355 718.562,227.58 719.131,227.639 719.699,228.863 720.267,228.181 720.836,227.503 721.404,226.683 721.972,224.949 722.541,225.776 723.109,226.26 723.677,226.81 724.246,227.209 724.814,228.819 725.382,229.198 725.951,230.616 726.519,228.653 727.087,227.996 727.656,227.353 728.224,227.817 728.792,227.295 729.361,226.705 729.929,228.276 730.497,228.53 731.066,228.923 731.634,228.163 732.203,229.634 732.771,229.839 733.339,227.978 733.908,229.588 734.476,226.855 735.044,228.359 735.613,227.725 736.181,228.208 736.749,228.629 737.318,231.175 737.886,233.592 738.454,234.68 739.023,233.541 739.591,234.518 740.159,234.488 740.728,234.417 741.296,235.537 741.864,234.463 742.433,232.289 743.001,232.445 743.569,231.504 744.138,230.663 744.706,231.914 745.274,232.946 745.843,235.264 746.411,233.948 746.98,237.083 747.548,235.821 748.116,233.472 748.685,233.406 749.253,233.524 749.821,234.8 750.39,236.804 750.958,237.432 751.526,237.26 752.095,236.835 752.663,236.558 753.231,235.326 753.8,235.991 754.368,237.987 754.936,237.429 755.505,238.972 756.073,239.645 756.641,240.1 757.21,239.49 757.778,238.829 758.346,238.048 758.915,237.66 759.483,236.164 760.052,235.93 760.62,235.45 761.188,235.218 761.757,236.048 762.325,235.673 762.893,232.177 763.462,230.835 764.03,230.811 764.598,230.587 765.167,231.502 765.735,230.285 766.303,230.475 766.872,230.539 767.44,229.443 768.008,230.355 768.577,230.499 769.145,229.359 769.713,227.487 770.282,227.874 770.85,226.004 771.418,225.413 771.987,225.115 772.555,226.55 773.123,226.985 773.692,227.351 774.26,228.603 774.829,229.825 775.397,230.729 775.965,231.818 776.534,231.916 777.102,233.801 777.67,231.613 778.239,229.573 778.807,227.605 779.375,225.684 779.944,228.03 780.512,229.418 781.08,228.528 781.649,227.628 782.217,226.96 782.785,228.353 783.354,226.51 783.922,229.061 784.49,231.267 785.059,236.542 785.627,236.029 786.195,232.557 786.764,232.44 787.332,232.354 787.9,234.512 788.469,233.388 789.037,233.359 789.606,235.296 790.174,234.023 790.742,233.875 791.311,231.617 791.879,232.684 792.447,232.591 793.016,232.289 793.584,232.166 794.152,232.224 794.721,230.154 795.289,231.336 795.857,232.411 796.426,234.329 796.994,230.866 797.562,231.809 798.131,230.799 798.699,230.461 799.267,229.632 799.836,232.683 800.404,232.502 800.972,232.545 801.541,232.468 802.109,232.45 802.678,229.475 803.246,226.1 803.814,226.237 804.383,226.536 804.951,225.965 805.519,225.338 806.088,226.983 806.656,229.32 807.224,227.423 807.793,224.649 808.361,226.061 808.929,226.464 809.498,226.695 810.066,228.014 810.634,227.104 811.203,226.377 811.771,228.756 812.339,229.911 812.908,231.864 813.476,230.995 814.044,230.785 814.613,232.029 815.181,231.938 815.749,229.996 816.318,231.705 816.886,228.631 817.455,224.732 818.023,227.205 818.591,228.495 819.16,228.757 819.728,230.808 820.296,233.953 820.865,230.836 821.433,231.877 822.001,233.008 822.57,232.958 823.138,231.853 823.706,231.956 824.275,232.957 824.843,231.84 825.411,231.919 825.98,229.641 826.548,230.652 827.116,230.735 827.685,231.867 828.253,232.945 828.821,231.729 829.39,231.727 829.958,232.865 830.526,232.805 831.095,229.636 831.663,227.836 832.232,228.158 832.8,227.186 833.368,227.636 833.937,227.939 834.505,229.306 835.073,230.738 835.642,232.925 836.21,234.155 836.778,232.919 837.347,232.975 837.915,232.089 838.483,232.175 839.052,232.192 839.62,231.104 840.188,231.038 840.757,231.001 841.325,229.814 841.893,228.823 842.462,226.785 843.03,227.071 843.598,228.567 844.167,228.767 844.735,227.019 845.304,228.285 845.872,228.64 846.44,230.764 847.009,229.762 847.577,227.957 848.145,226.275 848.714,225.435 849.282,224.788 849.85,224.295 850.419,226.964 850.987,228.216 851.555,226.202 852.124,227.522 852.692,229.033 853.26,228.926 853.829,230.364 854.397,229.379 854.965,227.725 855.534,226.902 856.102,227.411 856.67,227.958 857.239,230.33 857.807,230.348 858.375,230.419 858.944,230.641 859.512,231.815 860.081,231.9 860.649,230.873 861.217,231.909 861.786,232.033 862.354,233.082 862.922,234.016 863.491,233.962 864.059,232.841 864.627,231.597 865.196,231.716 865.764,230.567 866.332,229.716 866.901,229.64 867.469,229.813 868.037,230.262 868.606,230.583 869.174,230.597 869.742,231.558 870.311,229.694 870.879,232.179 871.447,233.462 872.016,232.307 872.584,231.381 873.152,231.222 873.721,232.429 874.289,231.476 874.858,230.493 875.426,230.673 875.994,231.725 876.563,232.724 877.131,232.622 877.699,234.552 878.268,234.259 878.836,234.085 879.404,231.73 879.973,231.739 880.541,231.742 881.109,232.835 881.678,231.597 882.246,232.29 882.814,233.202 883.383,234.041 883.951,231.785 884.519,232.9 885.088,231.885 885.656,230.767 886.224,229.711 886.793,228.681 887.361,227.831 887.93,229.071 888.498,230.322 889.066,231.547 889.635,233.62 890.203,234.575 890.771,234.357 891.34,236.3 891.908,234.95 892.476,235.736 893.045,233.357 893.613,236.187 894.181,234.763 894.75,233.377 895.318,234.07 895.886,232.633 896.455,232.6 897.023,231.486 897.591,232.422 898.16,233.169 898.728,229.859 899.296,231.903 899.865,231.98 900.433,232.808 901.001,230.624 901.57,231.681 902.138,231.463 902.707,232.502 903.275,232.124 903.843,230.906 904.412,230.845 904.98,228.508 905.548,228.532 906.117,228.543 906.685,228.466 907.253,228.395 907.822,229.414 908.39,228.504 908.958,226.695 909.527,226.644 910.095,228.103 910.663,227.366 911.232,227.553 911.8,227.689 912.368,227.998 912.937,228.156 913.505,229.323 914.073,228.532 914.642,230.633 915.21,231.634 915.779,230.441 916.347,231.409 916.915,233.645 917.484,232.483 918.052,232.475 918.62,233.217 919.189,231.119 919.757,231.219 920.325,230.259 920.894,230.357 921.462,230.267 922.03,229.418 922.599,229.637 923.167,227.913 923.735,228.206 924.304,229.519 924.872,229.869 925.44,231.982 926.009,230.862 926.577,230.774 927.145,227.784 927.714,231.032 928.282,230.923 928.85,230.957 929.419,231.923 929.987,231.654 930.556,231.583 931.124,231.306 931.692,232.222 932.261,232.248 932.829,230.817 933.397,230.73 933.966,230.533 934.534,229.473 935.102,229.457 935.671,229.804 936.239,228.736 936.807,228.941 937.376,228.146 937.944,227.394 938.512,225.504 939.081,227.907 939.649,227.071 940.217,226.237 940.786,228.615 941.354,228.906 941.922,231.155 942.491,232.075 943.059,230.148 943.627,231.164 944.196,230.137 944.764,232.376 945.333,231.254 945.901,233.491 946.469,236.421 947.038,234.937 947.606,235.745 948.174,234.211 948.743,233.829 949.311,233.298 949.879,232.955 950.448,233.513 951.016,233.135 951.584,231.941 952.153,228.517 952.721,230.544 953.289,229.318 953.858,231.256 954.426,231.101 954.994,231.124 955.563,230.789 956.131,232.691 956.699,232.479 957.268,230.156 957.836,233.259 958.405,231.936 958.973,233.846 959.541,232.575 960.11,234.569 960.678,233.208 961.246,231.948 961.815,232.747 962.383,231.548 962.951,230.478 963.52,228.512 964.088,227.341 964.656,227.433 965.225,224.548 965.793,225.91 966.361,227.373 966.93,225.435 967.498,226.607 968.066,226.755 968.635,226.756 969.203,223.973 969.771,225.379 970.34,227.949 970.908,230.167 971.476,231.142 972.045,229.882 972.613,229.93 973.182,229.976 973.75,231.918 974.318,230.467 974.887,228.392 975.455,228.593 976.023,229.796 976.592,230.078 977.16,230.988 977.728,232.958 978.297,232.656 978.865,232.566 979.433,232.377 980.002,232.355 980.57,231.218 981.138,233.208 981.707,233.335 982.275,234.117 982.843,233.81 983.412,234.604 983.98,234.331 984.548,231.977 985.117,233.932 985.685,234.522 986.253,235.195 986.822,232.906 987.39,232.672 987.959,231.374 988.527,231.21 989.095,229.85 989.664,228.719 990.232,228.677 990.8,230.009 991.369,229.896 991.937,230.94 992.505,230.918 993.074,229.783 993.642,230.707 994.21,227.604 994.779,229.677 995.347,228.549 995.915,230.656 996.484,230.508 997.052,228.546 997.62,228.801 998.189,228.886 998.757,233.053 999.325,233.06 999.894,233.599 1000.46,234.265 1001.03,231.992 1001.6,232.94 1002.17,235.797 1002.74,234.175 1003.3,233.631 1003.87,234.248 1004.44,232.861 1005.01,232.452 1005.58,230.935 1006.15,230.721 1006.71,230.535 1007.28,229.34 1007.85,229.453 1008.42,230.465 1008.99,231.581 1009.56,230.236 1010.12,228.349 1010.69,227.134 1011.26,228.22 1011.83,227.355 1012.4,225.333 1012.97,224.641 1013.53,223.906 1014.1,227.498 1014.67,225.512 1015.24,225.744 1015.81,225.083 1016.38,223.242 1016.94,221.394 1017.51,222.891 1018.08,222.424 1018.65,221.884 1019.22,223.328 1019.79,224.83 1020.35,223.978 1020.92,223.4 1021.49,223.89 1022.06,224.112 1022.63,224.542 1023.2,226.927 1023.76,227.232 1024.33,227.452 1024.9,226.37 1025.47,226.59 1026.04,226.996 1026.61,226.347 1027.17,226.724 1027.74,228.068 1028.31,229.284 1028.88,229.366 1029.45,229.51 1030.02,229.473 1030.58,231.489 1031.15,233.571 1031.72,235.121 1032.29,234.93 1032.86,234.738 1033.43,237.58 1033.99,238.002 1034.56,240.429 1035.13,239.74 1035.7,239.261 1036.27,239.675 1036.84,237.813 1037.4,237.27 1037.97,235.723 1038.54,235.243 1039.11,234.564 1039.68,233.328 1040.25,233.036 1040.81,233.8 1041.38,232.691 1041.95,232.28 1042.52,229.824 1043.09,226.661 1043.66,226.705 1044.22,225.846 1044.79,228.159 1045.36,227.071 1045.93,225.149 1046.5,227.764 1047.07,227.787 1047.63,227.78 1048.2,227.811 1048.77,229.168 1049.34,229.199 1049.91,227.302 1050.48,227.667 1051.05,227.761 1051.61,225.757 1052.18,228.218 1052.75,228.241 1053.32,228.366 1053.89,227.656 1054.46,228.887 1055.02,228.876 1055.59,227.895 1056.16,228.022 1056.73,228.333 1057.3,227.583 1057.87,228.685 1058.43,229.945 1059,227.091 1059.57,226.024 1060.14,225.213 1060.71,225.482 1061.28,225.947 1061.84,226.454 1062.41,226.797 1062.98,226.181 1063.55,228.58 1064.12,229.716 1064.69,227.865 1065.25,227.939 1065.82,231.357 1066.39,233.614 1066.96,233.559 1067.53,232.32 1068.1,234.188 1068.66,232.926 1069.23,232.858 1069.8,232.687 1070.37,232.559 1070.94,232.797 1071.51,231.499 1072.07,231.458 1072.64,231.224 1073.21,229.061 1073.78,229.239 1074.35,231.194 1074.92,232.023 1075.48,230.716 1076.05,231.78 1076.62,230.672 1077.19,230.505 1077.76,230.389 1078.33,232.27 1078.89,232.117 1079.46,231.948 1080.03,231.685 1080.6,229.319 1081.17,229.17 1081.74,230.42 1082.3,228.222 1082.87,228.264 1083.44,228.422 1084.01,226.366 1084.58,226.702 1085.15,226.072 1085.71,226.172 1086.28,225.405 1086.85,227.841 1087.42,224.882 1087.99,227.223 1088.56,227.434 1089.12,228.433 1089.69,228.491 1090.26,228.549 1090.83,229.646 1091.4,228.841 1091.97,231.192 1092.53,232.072 1093.1,229.945 1093.67,229.042 1094.24,232.282 1094.81,231.15 1095.38,230.98 1095.94,232.109 1096.51,231.064 1097.08,230.775 1097.65,229.857 1098.22,229.659 1098.79,228.796 1099.35,230.113 1099.92,228.945 1100.49,228.987 1101.06,227.166 1101.63,226.363 1102.2,227.685 1102.76,227.927 1103.33,228.216 1103.9,230.605 1104.47,229.808 1105.04,229.797 1105.61,229.008 1106.17,226.816 1106.74,225.954 1107.31,225.19 1107.88,223.63 1108.45,226.362 1109.02,227.716 1109.58,227.978 1110.15,228.151 1110.72,226.366 1111.29,226.841 1111.86,228.312 1112.43,229.634 1112.99,227.813 1113.56,227.873 1114.13,228.183 1114.7,228.413 1115.27,227.493 1115.84,227.853 1116.4,229.2 1116.97,229.376 1117.54,229.53 1118.11,231.676 1118.68,230.535 1119.25,230.726 1119.81,231.769 1120.38,231.7 1120.95,231.801 1121.52,232.799 1122.09,232.714 1122.66,233.562 1123.23,235.371 1123.79,237.187 1124.36,236.621 1124.93,238.017 1125.5,237.6 1126.07,236.126 1126.64,235.523 1127.2,235.068 1127.77,234.753 1128.34,235.472 1128.91,234.125 1129.48,236.05 1130.05,234.622 1130.61,234.152 1131.18,231.666 1131.75,232.815 1132.32,235.689 1132.89,235.342 1133.46,234.832 1134.02,235.473 1134.59,231.946 1135.16,232.777 1135.73,234.392 1136.3,234.986 1136.87,234.589 1137.43,235.321 1138,234.126 1138.57,235.943 1139.14,235.517 1139.71,235.952 1140.28,235.682 1140.84,234.12 1141.41,232.689 1141.98,230.488 1142.55,232.439 1143.12,234.217 1143.69,231.653 1144.25,230.22 1144.82,230.174 1145.39,231.85 1145.96,231.824 1146.53,231.734 1147.1,232.679 1147.66,234.484 1148.23,230.896 1148.8,229.641 1149.37,229.554 1149.94,229.668 1150.51,229.55 1151.07,231.525 1151.64,231.273 1152.21,231.257 1152.78,226.686 1153.35,225.809 1153.92,224.919 1154.48,225.207 1155.05,223.263 1155.62,223.769 1156.19,223.951 1156.76,223.361 1157.33,225.788 1157.89,225.866 1158.46,226.009 1159.03,226.216 1159.6,225.581 1160.17,223.7 1160.74,224.014 1161.3,223.494 1161.87,225.958 1162.44,224.14 1163.01,223.684 1163.58,224.139 1164.15,223.424 1164.71,225.004 1165.28,224.335 1165.85,225.028 1166.42,226.563 1166.99,224.579 1167.56,225.968 1168.12,229.39 1168.69,225.563 1169.26,226.043 1169.83,227.457 1170.4,227.74 1170.97,225.923 1171.53,225.218 1172.1,225.856 1172.67,225.099 1173.24,226.566 1173.81,227.905 1174.38,231.196 1174.94,230.317 1175.51,229.398 1176.08,230.505 1176.65,231.451 1177.22,230.305 1177.79,230.475 1178.35,230.587 1178.92,230.63 1179.49,229.77 1180.06,230.07 1180.63,232.276 1181.2,232.236 1181.76,231.058 1182.33,233.279 1182.9,234.072 1183.47,231.789 1184.04,231.967 1184.61,232.131 1185.17,233.175 1185.74,234.057 1186.31,234.946 1186.88,235.669 1187.45,237.311 1188.02,236.887 1188.58,238.571 1189.15,236.998 1189.72,236.323 1190.29,236.954 1190.86,236.472 1191.43,234.813 1192,233.073 1192.56,230.886 1193.13,229.763 1193.7,229.705 1194.27,229.755 1194.84,229.624 1195.41,227.47 1195.97,228.704 1196.54,229.915 1197.11,227.92 1197.68,225.79 1198.25,224.697 1198.82,228.041 1199.38,226.238 1199.95,228.604 1200.52,230.764 1201.09,230.686 1201.66,230.625 1202.23,231.55 1202.79,231.397 1203.36,231.424 1203.93,231.376 1204.5,229.492 1205.07,228.494 1205.64,229.624 1206.2,229.633 1206.77,227.584 1207.34,226.996 1207.91,227.024 1208.48,225.306 1209.05,224.548 1209.61,221.777 1210.18,221.274 1210.75,225.141 1211.32,225.491 1211.89,224.762 1212.46,223.205 1213.02,224.662 1213.59,224.036 1214.16,222.631 1214.73,223.42 1215.3,226.014 1215.87,227.503 1216.43,226.536 1217,224.886 1217.57,228.408 1218.14,227.703 1218.71,229.107 1219.28,230.598 1219.84,230.755 1220.41,229.862 1220.98,230.207 1221.55,230.293 1222.12,229.422 1222.69,232.58 1223.25,232.574 1223.82,232.462 1224.39,234.476 1224.96,233.098 1225.53,232.897 1226.1,235.032 1226.66,233.972 1227.23,236.814 1227.8,233.412 1228.37,236.381 1228.94,235.049 1229.51,233.651 1230.07,230.372 1230.64,229.602 1231.21,226.412 1231.78,228.896 1232.35,229.06 1232.92,230.396 1233.48,230.621 1234.05,229.586 1234.62,229.851 1235.19,229.954 1235.76,229.079 1236.33,231.317 1236.89,231.497 1237.46,232.233 1238.03,231.085 1238.6,232.08 1239.17,234.375 1239.74,234.975 1240.3,235.772 1240.87,237.465 1241.44,236.886 1242.01,237.272 1242.58,239.875 1243.15,237.045 1243.71,236.52 1244.28,236.117 1244.85,235.745 1245.42,234.198 1245.99,230.68 1246.56,229.548 1247.12,228.589 1247.69,228.622 1248.26,229.561 1248.83,230.578 1249.4,230.474 1249.97,229.317 1250.53,229.056 1251.1,230.073 1251.67,230.149 1252.24,230.075 1252.81,230.271 1253.38,230.319 1253.94,233.233 1254.51,232.775 1255.08,232.344 1255.65,232.137 1256.22,232.933 1256.79,232.442 1257.35,234.458 1257.92,232.855 1258.49,233.713 1259.06,233.238 1259.63,232.885 1260.2,231.503 1260.76,231.255 1261.33,232.2 1261.9,232.191 1262.47,231.759 1263.04,233.572 1263.61,232.224 1264.18,233 1264.74,233.675 1265.31,234.312 1265.88,232.651 1266.45,232.135 1267.02,230.973 1267.59,230.847 1268.15,232.703 1268.72,231.286 1269.29,231.935 1269.86,232.484 1270.43,233.22 1271,231.955 1271.56,232.739 1272.13,231.331 1272.7,230.99 1273.27,230.931 1273.84,229.691 1274.41,228.544 1274.97,228.235 1275.54,227.21 1276.11,227.35 1276.68,227.509 1277.25,227.672 1277.82,228.967 1278.38,227.936 1278.95,228.786 1279.52,230.009 1280.09,229.813 1280.66,231.69 1281.23,231.399 1281.79,231.12 1282.36,228.648 1282.93,228.804 1283.5,227.798 1284.07,227.77 1284.64,226.724 1285.2,228.065 1285.77,226.328 1286.34,223.551 1286.91,222.891 1287.48,222.121 1288.05,224.506 1288.61,223.787 1289.18,221.068 1289.75,220.564 1290.32,222.147 1290.89,222.537 1291.46,224.043 1292.02,223.414 1292.59,223.815 1293.16,224.378 1293.73,223.918 1294.3,225.297 1294.87,225.727 1295.43,230.298 1296,230.085 1296.57,231.107 1297.14,228.987 1297.71,230.148 1298.28,228.147 1298.84,224.91 1299.41,225.167 1299.98,224.553 1300.55,223.823 1301.12,224.094 1301.69,224.643 1302.25,225.003 1302.82,223.419 1303.39,222.852 1303.96,225.464 1304.53,224.786 1305.1,226.353 1305.66,225.534 1306.23,227.088 1306.8,227.336 1307.37,228.618 1307.94,227.814 1308.51,225.835 1309.07,226.252 1309.64,226.475 1310.21,226.745 1310.78,226.159 1311.35,227.726 1311.92,230.114 1312.48,229.13 1313.05,226.458 1313.62,226.724 1314.19,229.119 1314.76,230.315 1315.33,231.527 1315.89,231.623 1316.46,231.734 1317.03,231.888 1317.6,235.055 1318.17,232.904 1318.74,230.744 1319.3,230.654 1319.87,230.607 1320.44,229.598 1321.01,230.806 1321.58,230.829 1322.15,227.726 1322.71,229.005 1323.28,231.429 1323.85,230.463 1324.42,231.565 1324.99,233.491 1325.56,233.364 1326.12,232.065 1326.69,229.588 1327.26,230.641 1327.83,229.722 1328.4,232.011 1328.97,231.964 1329.53,232.951 1330.1,234.075 1330.67,233.92 1331.24,235.69 1331.81,236.395 1332.38,235.005 1332.94,234.656 1333.51,235.353 1334.08,234.212 1334.65,234.894 1335.22,235.78 1335.79,235.245 1336.36,232.875 1336.92,232.846 1337.49,232.823 1338.06,230.718 1338.63,233.736 1339.2,234.52 1339.77,237.042 1340.33,234.627 1340.9,233.244 1341.47,234.053 1342.04,231.68 1342.61,230.221 1343.18,227.033 1343.74,227.077 1344.31,228.362 1344.88,228.426 1345.45,230.528 1346.02,229.534 1346.59,227.417 1347.15,225.608 1347.72,224.858 1348.29,225.311 1348.86,226.611 1349.43,228.04 1350,229.049 1350.56,229.096 1351.13,228.297 1351.7,227.686 1352.27,230.022 1352.84,231.15 1353.41,229.974 1353.97,230.015 1354.54,231.025 1355.11,228.972 1355.68,229.153 1356.25,229.216 1356.82,229.256 1357.38,229.133 1357.95,227.199 1358.52,226.314 1359.09,227.611 1359.66,226.834 1360.23,227.086 1360.79,227.207 1361.36,225.134 1361.93,226.513 1362.5,227.165 1363.07,227.632 1363.64,229.049 1364.2,230.189 1364.77,231.391 1365.34,231.391 1365.91,231.304 1366.48,231.37 1367.05,234.521 1367.61,233.292 1368.18,232.972 1368.75,229.562 1369.32,230.477 1369.89,231.381 1370.46,232.515 1371.02,232.112 1371.59,231.779 1372.16,231.681 1372.73,232.675 1373.3,232.642 1373.87,232.664 1374.43,230.334 1375,232.57 1375.57,235.412 1376.14,234.995 1376.71,233.65 1377.28,233.377 1377.84,232.187 1378.41,233.025 1378.98,233.942 1379.55,232.581 1380.12,235.376 1380.69,234.005 1381.25,233.785 1381.82,232.469 1382.39,231.032 1382.96,233.815 1383.53,233.378 1384.1,233.964 1384.66,233.236 1385.23,232.603 1385.8,234.53 1386.37,233.958 1386.94,233.607 1387.51,234.561 1388.07,234.943 1388.64,234.272 1389.21,235.086 1389.78,234.496 1390.35,235.16 1390.92,234.497 1391.48,232.755 1392.05,233.479 1392.62,233.216 1393.19,232.871 1393.76,234.543 1394.33,234.994 1394.89,232.313 1395.46,231.99 1396.03,233.923 1396.6,233.56 1397.17,233.166 1397.74,233.97 1398.3,232.572 1398.87,232.035 1399.44,231.599 1400.01,230.397 1400.58,227.336 1401.15,226.433 1401.71,225.768 1402.28,227.026 1402.85,226.044 1403.42,225.024 1403.99,224.021 1404.56,225.302 1405.13,227.44 1405.69,225.581 1406.26,225.983 1406.83,229.172 1407.4,229.175 1407.97,230.279 1408.54,231.015 1409.1,231.813 1409.67,230.747 1410.24,232.328 1410.81,232.172 1411.38,234.716 1411.95,235.251 1412.51,233.664 1413.08,233.25 1413.65,230.877 1414.22,229.801 1414.79,229.903 1415.36,228.652 1415.92,228.509 1416.49,228.735 1417.06,228.536 1417.63,227.542 1418.2,227.344 1418.77,225.277 1419.33,223.64 1419.9,225.012 1420.47,227.219 1421.04,227.265 1421.61,228.245 1422.18,232.217 1422.74,232.049 1423.31,230.856 1423.88,229.671 1424.45,231.711 1425.02,232.313 1425.59,232.262 1426.15,232.048 1426.72,230.546 1427.29,227.246 1427.86,229.564 1428.43,227.285 1429,227.317 1429.56,224.371 1430.13,224.484 1430.7,222.865 1431.27,221.156 1431.84,222.569 1432.41,223.096 1432.97,222.586 1433.54,223.916 1434.11,221.134 1434.68,221.865 1435.25,221.288 1435.82,223.976 1436.38,223.046 1436.95,223.479 1437.52,225.072 1438.09,225.172 1438.66,225.775 1439.23,226.07 1439.79,224.318 1440.36,224.865 1440.93,226.31 1441.5,226.783 1442.07,227.183 1442.64,227.47 1443.2,227.912 1443.77,227.086 1444.34,227.305 1444.91,227.513 1445.48,228.613 1446.05,229.605 1446.61,229.663 1447.18,228.828 1447.75,225.905 1448.32,226.346 1448.89,226.728 1449.46,226.177 1450.02,228.763 1450.59,228.835 1451.16,228.861 1451.73,228.953 1452.3,229.223 1452.87,229.462 1453.43,225.305 1454,225.544 1454.57,223.545 1455.14,222.95 1455.71,225.459 1456.28,227.037 1456.84,227.438 1457.41,230.017 1457.98,229.968 1458.55,232.213 1459.12,232.149 1459.69,231.275 1460.25,231.106 1460.82,230.162 1461.39,230.085 1461.96,235.133 1462.53,235.91 1463.1,235.615 1463.66,236.448 1464.23,237.064 1464.8,237.584 1465.37,236.23 1465.94,236.686 1466.51,235.19 1467.07,236.941 1467.64,236.275 1468.21,238.925 1468.78,239.216 1469.35,237.46 1469.92,239.136 1470.48,238.403 1471.05,235.694 1471.62,232.089 1472.19,231.805 1472.76,232.681 1473.33,232.444 1473.89,233.436 1474.46,231.919 1475.03,231.844 1475.6,230.383 1476.17,231.296 1476.74,231.106 1477.31,228.928 1477.87,227.92 1478.44,227.084 1479.01,225.247 1479.58,227.694 1480.15,229.816 1480.72,226.712 1481.28,225.995 1481.85,225.535 1482.42,223.759 1482.99,224.097 1483.56,222.262 1484.13,221.951 1484.69,223.641 1485.26,225.128 1485.83,225.459 1486.4,226.843 1486.97,229.396 1487.54,229.334 1488.1,227.428 1488.67,228.882 1489.24,228.038 1489.81,229.353 1490.38,230.521 1490.95,231.412 1491.51,231.428 1492.08,231.468 1492.65,230.454 1493.22,230.608 1493.79,230.535 1494.36,232.774 1494.92,233.56 1495.49,233.213 1496.06,232.85 1496.63,232.374 1497.2,233.259 1497.77,234.96 1498.33,235.675 1498.9,235.476 1499.47,235.106 1500.04,235.783 1500.61,236.396 1501.18,236.034 1501.74,235.715 1502.31,232.197 1502.88,230.745 1503.45,231.56 1504.02,233.649 1504.59,232.222 1505.15,231.812 1505.72,230.69 1506.29,229.283 1506.86,228.191 1507.43,228.329 1508,228.335 1508.56,228.28 1509.13,231.363 1509.7,227.061 1510.27,227.15 1510.84,226.355 1511.41,225.706 1511.97,225.98 1512.54,228.159 1513.11,228.134 1513.68,228.283 1514.25,228.384 1514.82,229.416 1515.38,229.491 1515.95,227.549 1516.52,227.623 1517.09,229.763 1517.66,228.774 1518.23,227.885 1518.79,226.983 1519.36,228.035 1519.93,229.082 1520.5,229.073 1521.07,228.045 1521.64,229.119 1522.2,229.172 1522.77,227.284 1523.34,227.558 1523.91,226.703 1524.48,228.134 1525.05,225.373 1525.61,225.751 1526.18,227.099 1526.75,228.379 1527.32,230.649 1527.89,232.867 1528.46,232.635 1529.02,233.456 1529.59,233.151 1530.16,232.974 1530.73,232.636 1531.3,230.402 1531.87,230.047 1532.43,229.963 1533,227.697 1533.57,227.883 1534.14,228.986 1534.71,230.128 1535.28,228.118 1535.84,228.365 1536.41,228.535 1536.98,231.787 1537.55,231.661 1538.12,231.444 1538.69,234.444 1539.25,234.042 1539.82,233.722 1540.39,235.231 1540.96,233.895 1541.53,232.897 1542.1,233.698 1542.66,233.634 1543.23,232.321 1543.8,232.273 1544.37,232.273 1544.94,231.046 1545.51,231.894 1546.08,231.715 1546.64,231.512 1547.21,234.582 1547.78,235.372 1548.35,234.024 1548.92,233.838 1549.49,234.742 1550.05,233.551 1550.62,233.257 1551.19,234.919 1551.76,233.203 1552.33,232.973 1552.9,232.752 1553.46,230.369 1554.03,232.248 1554.6,231.936 1555.17,231.556 1555.74,230.581 1556.31,230.59 1556.87,228.456 1557.44,228.484 1558.01,229.584 1558.58,229.635 1559.15,230.495 1559.72,231.291 1560.28,228.924 1560.85,227.917 1561.42,225.886 1561.99,226.109 1562.56,225.204 1563.13,224.441 1563.69,223.479 1564.26,221.62 1564.83,223.184 1565.4,223.7 1565.97,225.235 1566.54,224.702 1567.1,224.92 1567.67,225.309 1568.24,226.784 1568.81,225.032 1569.38,225.617 1569.95,222.976 1570.51,225.411 1571.08,224.657 1571.65,226.091 1572.22,222.287 1572.79,222.971 1573.36,224.715 1573.92,225.068 1574.49,226.452 1575.06,227.677 1575.63,227.898 1576.2,226.79 1576.77,229.099 1577.33,229.98 1577.9,231.827 1578.47,231.841 1579.04,229.042 1579.61,229.414 1580.18,229.582 1580.74,231.732 1581.31,230.732 1581.88,228.738 1582.45,229.855 1583.02,228.726 1583.59,228.678 1584.15,228.897 1584.72,228.056 1585.29,229.358 1585.86,231.56 1586.43,232.401 1587,232.522 1587.56,233.798 1588.13,234.74 1588.7,234.336 1589.27,232.888 1589.84,232.653 1590.41,230.258 1590.97,230.448 1591.54,230.531 1592.11,228.598 1592.68,228.723 1593.25,228.775 1593.82,228.944 1594.38,228.843 1594.95,229.098 1595.52,231.361 1596.09,229.48 1596.66,232.767 1597.23,234.849 1597.79,235.439 1598.36,235.117 1598.93,233.657 1599.5,233.161 1600.07,232.033 1600.64,232.018 1601.2,233.83 1601.77,233.613 1602.34,233.314 1602.91,232.085 1603.48,233.117 1604.05,233.761 1604.61,232.328 1605.18,231.986 1605.75,231.823 1606.32,231.733 1606.89,232.404 1607.46,229.997 1608.02,231.118 1608.59,231.101 1609.16,230.923 1609.73,230.522 1610.3,231.514 1610.87,232.516 1611.43,232.173 1612,229.819 1612.57,231.891 1613.14,231.594 1613.71,230.495 1614.28,230.304 1614.84,230.241 1615.41,230.17 1615.98,230.048 1616.55,230.201 1617.12,229.87 1617.69,230.83 1618.26,230.844 1618.82,232.881 1619.39,229.581 1619.96,228.539 1620.53,227.51 1621.1,228.523 1621.67,228.566 1622.23,230.7 1622.8,232.721 1623.37,234.633 1623.94,232.136 1624.51,229.587 1625.08,228.463 1625.64,228.354 1626.21,228.366 1626.78,228.507 1627.35,230.51 1627.92,231.549 1628.49,230.401 1629.05,229.306 1629.62,229.346 1630.19,231.183 1630.76,230.138 1631.33,230.019 1631.9,229.022 1632.46,229.797 1633.03,229.726 1633.6,230.709 1634.17,230.603 1634.74,229.492 1635.31,229.482 1635.87,229.338 1636.44,227.21 1637.01,228.547 1637.58,228.636 1638.15,230.868 1638.72,232.865 1639.28,232.845 1639.85,231.681 1640.42,231.573 1640.99,232.231 1641.56,233.043 1642.13,232.759 1642.69,232.637 1643.26,233.481 1643.83,233.216 1644.4,230.949 1644.97,228.83 1645.54,230.05 1646.1,230.904 1646.67,230.708 1647.24,230.503 1647.81,231.24 1648.38,230.756 1648.95,229.592 1649.51,229.367 1650.08,229.348 1650.65,228.339 1651.22,228.439 1651.79,226.451 1652.36,226.687 1652.92,227.678 1653.49,228.544 1654.06,227.622 1654.63,225.834 1655.2,225.071 1655.77,224.239 1656.33,225.639 1656.9,225.076 1657.47,225.34 1658.04,227.654 1658.61,225.719 1659.18,225.939 1659.74,222.088 1660.31,220.428 1660.88,219.895 1661.45,220.581 1662.02,222.236 1662.59,220.756 1663.15,222.677 1663.72,223.336 1664.29,223.008 1664.86,224.411 1665.43,225.794 1666,228.267 1666.56,226.477 1667.13,229.021 1667.7,229.433 1668.27,229.398 1668.84,228.46 1669.41,226.627 1669.97,226.029 1670.54,229.405 1671.11,228.417 1671.68,228.718 1672.25,229.051 1672.82,227.12 1673.38,227.559 1673.95,226.772 1674.52,227.103 1675.09,228.304 1675.66,228.495 1676.23,227.705 1676.79,227.89 1677.36,226.818 1677.93,228.278 1678.5,228.562 1679.07,230.985 1679.64,230.906 1680.2,230.863 1680.77,231.093 1681.34,232.291 1681.91,231.231 1682.48,229.31 1683.05,228.539 1683.61,228.66 1684.18,230.917 1684.75,233.92 1685.32,230.568 1685.89,229.512 1686.46,228.409 1687.02,228.668 1687.59,229.883 1688.16,229.99 1688.73,231.285 1689.3,234.333 1689.87,233.025 1690.44,231.939 1691,231.782 1691.57,231.844 1692.14,229.925 1692.71,232.092 1693.28,231.778 1693.85,231.885 1694.41,231.842 1694.98,231.585 1695.55,231.587 1696.12,232.7 1696.69,231.641 1697.26,232.511 1697.82,233.395 1698.39,232.319 1698.96,232.206 1699.53,233.266 1700.1,232.178 1700.67,229.846 1701.23,230.023 1701.8,230.117 1702.37,228.4 1702.94,228.505 1703.51,228.661 1704.08,228.776 1704.64,230.012 1705.21,232.265 1705.78,235.312 1706.35,234.07 1706.92,233.78 1707.49,233.619 1708.05,233.437 1708.62,235.12 1709.19,233.645 1709.76,232.468 1710.33,230.986 1710.9,230.872 1711.46,230.729 1712.03,230.69 1712.6,230.659 1713.17,230.5 1713.74,228.377 1714.31,227.437 1714.87,227.759 1715.44,227.702 1716.01,228.904 1716.58,228.795 1717.15,229.648 1717.72,229.719 1718.28,228.792 1718.85,229.775 1719.42,230.066 1719.99,231.076 1720.56,232.044 1721.13,234.014 1721.69,232.796 1722.26,231.646 1722.83,228.551 1723.4,228.603 1723.97,229.882 1724.54,229.969 1725.1,228.97 1725.67,228.983 1726.24,225.102 1726.81,225.513 1727.38,224.818 1727.95,224.823 1728.51,226.141 1729.08,225.465 1729.65,225.768 1730.22,226.148 1730.79,226.633 1731.36,227.05 1731.92,227.303 1732.49,227.58 1733.06,228.707 1733.63,226.696 1734.2,225.027 1734.77,226.577 1735.33,224.805 1735.9,224.082 1736.47,225.575 1737.04,227.037 1737.61,225.256 1738.18,227.791 1738.74,226.981 1739.31,226.154 1739.88,226.847 1740.45,227.292 1741.02,230.736 1741.59,231.674 1742.15,230.743 1742.72,231.202 1743.29,230.352 1743.86,231.362 1744.43,232.504 1745,234.544 1745.56,234.473 1746.13,235.406 1746.7,237.218 1747.27,236.823 1747.84,238.565 1748.41,239.006 1748.97,239.456 1749.54,238.886 1750.11,238.27 1750.68,237.904 1751.25,234.179 1751.82,232.972 1752.38,229.636 1752.95,228.562 1753.52,230.736 1754.09,232.547 1754.66,233.362 1755.23,233.137 1755.79,235.998 1756.36,238.765 1756.93,234.81 1757.5,234.547 1758.07,234.25 1758.64,235.977 1759.21,233.486 1759.77,231.068 1760.34,233.072 1760.91,230.688 1761.48,232.592 1762.05,230.236 1762.62,230.126 1763.18,229.186 1763.75,231.182 1764.32,232.245 1764.89,232.958 1765.46,233.858 1766.03,233.541 1766.59,232.281 1767.16,232.176 1767.73,232.907 1768.3,231.548 1768.87,229.123 1769.44,230.112 1770,225.858 1770.57,226.209 1771.14,226.436 1771.71,226.96 1772.28,225.233 1772.85,226.861 1773.41,229.212 1773.98,230.311 1774.55,231.35 1775.12,231.223 1775.69,230.954 1776.26,230.887 1776.82,230.561 1777.39,230.414 1777.96,230.355 1778.53,228.054 1779.1,228.989 1779.67,229.121 1780.23,229.087 1780.8,230.205 1781.37,230.243 1781.94,230.195 1782.51,231.19 1783.08,230.206 1783.64,228.251 1784.21,227.192 1784.78,225.196 1785.35,225.379 1785.92,222.755 1786.49,226.326 1787.05,228.485 1787.62,230.654 1788.19,230.708 1788.76,228.465 1789.33,228.488 1789.9,230.704 1790.46,228.638 1791.03,226.652 1791.6,229.03 1792.17,229.94 1792.74,230.784 1793.31,231.025 1793.87,227.733 1794.44,227.073 1795.01,227.302 1795.58,228.414 1796.15,228.686 1796.72,229.826 1797.28,231.853 1797.85,229.751 1798.42,228.615 1798.99,228.04 1799.56,228.035 1800.13,228.36 1800.69,226.306 1801.26,226.607 1801.83,224.896 1802.4,226.21 1802.97,226.526 1803.54,227.899 1804.1,226.846 1804.67,227.346 1805.24,227.483 1805.81,228.656 1806.38,228.039 1806.95,229.012 1807.51,231.081 1808.08,233.063 1808.65,230.802 1809.22,230.742 1809.79,230.883 1810.36,232.894 1810.92,231.646 1811.49,233.52 1812.06,235.192 1812.63,236.84 1813.2,233.395 1813.77,233.269 1814.33,236.331 1814.9,236.854 1815.47,236.034 1816.04,235.702 1816.61,238.529 1817.18,237.734 1817.74,236.077 1818.31,234.722 1818.88,236.217 1819.45,233.643 1820.02,231.259 1820.59,232.139 1821.15,231.889 1821.72,231.577 1822.29,231.259 1822.86,231.08 1823.43,235.077 1824,236.639 1824.56,233.808 1825.13,233.531 1825.7,233.237 1826.27,233.016 1826.84,231.406 1827.41,231.07 1827.97,227.808 1828.54,227.92 1829.11,228.794 1829.68,228.608 1830.25,229.672 1830.82,228.491 1831.39,226.561 1831.95,225.712 1832.52,226.068 1833.09,225.384 1833.66,225.43 1834.23,226.489 1834.8,228.703 1835.36,227.601 1835.93,230.828 1836.5,228.85 1837.07,229.793 1837.64,229.553 1838.21,231.454 1838.77,232.428 1839.34,232.18 1839.91,231.99 1840.48,231.566 1841.05,231.296 1841.62,231.143 1842.18,231.03 1842.75,230.805 1843.32,229.643 1843.89,230.312 1844.46,230.058 1845.03,229.937 1845.59,229.755 1846.16,231.809 1846.73,231.515 1847.3,232.235 1847.87,231.981 1848.44,229.71 1849,231.742 1849.57,231.578 1850.14,233.43 1850.71,231.86 1851.28,230.507 1851.85,226.24 1852.41,223.139 1852.98,221.472 1853.55,223.087 1854.12,225.781 1854.69,225.895 1855.26,225.088 1855.82,223.363 1856.39,226.83 1856.96,228.138 1857.53,227.029 1858.1,230.385 1858.67,232.334 1859.23,233.233 1859.8,233.117 1860.37,232.902 1860.94,230.471 1861.51,229.511 1862.08,230.419 1862.64,229.349 1863.21,232.246 1863.78,232.099 1864.35,231.842 1864.92,230.714 1865.49,230.767 1866.05,230.588 1866.62,230.49 1867.19,230.435 1867.76,228.354 1868.33,229.709 1868.9,228.553 1869.46,229.628 1870.03,228.65 1870.6,227.686 1871.17,226.855 1871.74,224.946 1872.31,225.311 1872.87,226.527 1873.44,226.638 1874.01,224.612 1874.58,225.935 1875.15,227 1875.72,225.966 1876.28,226.228 1876.85,226.496 1877.42,225.755 1877.99,225.834 1878.56,228.098 1879.13,230.421 1879.69,231.321 1880.26,231.15 1880.83,233.247 1881.4,231.216 1881.97,229.149 1882.54,229.329 1883.1,227.437 1883.67,229.81 1884.24,230.903 1884.81,230.666 1885.38,230.535 1885.95,230.539 1886.51,231.384 1887.08,231.253 1887.65,230.175 1888.22,232.204 1888.79,232.983 1889.36,232.702 1889.92,232.432 1890.49,231.09 1891.06,229.904 1891.63,230.994 1892.2,230.012 1892.77,226.961 1893.33,225.982 1893.9,225.126 1894.47,226.542 1895.04,226.651 1895.61,227.956 1896.18,224.787 1896.74,222.012 1897.31,222.561 1897.88,225.066 1898.45,226.57 1899.02,227.885 1899.59,227.09 1900.16,226.354 1900.72,225.659 1901.29,228.055 1901.86,226.203 1902.43,224.382 1903,223.605 1903.57,224.968 1904.13,226.319 1904.7,227.771 1905.27,229.076 1905.84,232.336 1906.41,231.135 1906.98,229.846 1907.54,229.107 1908.11,228.285 1908.68,227.559 1909.25,227.919 1909.82,227.326 1910.39,225.452 1910.95,226.81 1911.52,229.028 1912.09,231.25 1912.66,232.103 1913.23,231.142 1913.8,231.099 1914.36,233.031 1914.93,235.114 1915.5,233.934 1916.07,232.684 1916.64,231.727 1917.21,231.664 1917.77,232.547 1918.34,231.364 1918.91,232.189 1919.48,231.254 1920.05,231.14 1920.62,232.298 1921.18,233.356 1921.75,231.046 1922.32,227.865 1922.89,226.996 1923.46,225.254 1924.03,224.668 1924.59,226.119 1925.16,227.409 1925.73,227.59 1926.3,226.842 1926.87,224.959 1927.44,224.294 1928,224.786 1928.57,227.057 1929.14,226.29 1929.71,228.843 1930.28,231.124 1930.85,231.138 1931.41,228.099 1931.98,227.332 1932.55,227.45 1933.12,226.529 1933.69,227.001 1934.26,227.355 1934.82,229.687 1935.39,231.929 1935.96,230.827 1936.53,229.935 1937.1,229.817 1937.67,228.022 1938.23,229.206 1938.8,232.559 1939.37,233.535 1939.94,234.597 1940.51,233.296 1941.08,233.046 1941.64,234.772 1942.21,234.522 1942.78,235.281 1943.35,233.261 1943.92,232.801 1944.49,234.88 1945.05,235.836 1945.62,230.77 1946.19,230.531 1946.76,231.34 1947.33,230.425 1947.9,227.491 1948.46,228.784 1949.03,228.265 1949.6,227.527 1950.17,226.733 1950.74,230.317 1951.31,231.577 1951.87,232.645 1952.44,231.473 1953.01,232.481 1953.58,232.383 1954.15,232.27 1954.72,236.105 1955.28,235.915 1955.85,236.426 1956.42,236.03 1956.99,235.59 1957.56,237.229 1958.13,235.801 1958.69,233.216 1959.26,233.847 1959.83,233.575 1960.4,234.185 1960.97,232.905 1961.54,232.485 1962.1,233.078 1962.67,230.639 1963.24,228.542 1963.81,227.681 1964.38,228.704 1964.95,225.595 1965.51,227.035 1966.08,227.158 1966.65,228.158 1967.22,227.39 1967.79,228.793 1968.36,229.799 1968.92,228.56 1969.49,226.455 1970.06,225.497 1970.63,223.579 1971.2,223.977 1971.77,222.375 1972.34,222.954 1972.9,223.644 1973.47,224 1974.04,225.539 1974.61,225.766 1975.18,228.19 1975.75,228.44 1976.31,227.584 1976.88,228.936 1977.45,227.942 1978.02,230.172 1978.59,231.131 1979.16,231.975 1979.72,233.139 1980.29,234.923 1980.86,234.716 1981.43,234.454 1982,236.004 1982.57,235.594 1983.13,233.161 1983.7,231.766 1984.27,230.675 1984.84,230.658 1985.41,231.809 1985.98,231.962 1986.54,234.885 1987.11,233.428 1987.68,231.978 1988.25,232.693 1988.82,232.741 1989.39,231.509 1989.95,230.378 1990.52,230.43 1991.09,232.341 1991.66,232.155 1992.23,233.929 1992.8,232.491 1993.36,233.388 1993.93,231.84 1994.5,232.561 1995.07,232.196 1995.64,231.956 1996.21,233.992 1996.77,235.595 1997.34,235.09 1997.91,236.717 1998.48,234.268 1999.05,231.882 1999.62,229.839 2000.18,227.986 2000.75,227.166 2001.32,226.385 2001.89,226.638 2002.46,227.788 2003.03,230.991 2003.59,228.649 2004.16,225.572 2004.73,221.726 2005.3,222.439 2005.87,222.895 2006.44,223.299 2007,222.776 2007.57,223.37 2008.14,225.806 2008.71,226.116 2009.28,225.498 2009.85,226.785 2010.41,229.094 2010.98,229.384 2011.55,230.516 2012.12,229.357 2012.69,231.582 2013.26,231.494 2013.82,230.362 2014.39,228.24 2014.96,227.283 2015.53,226.482 2016.1,224.6 2016.67,224.981 2017.23,224.288 2017.8,225.795 2018.37,227.288 2018.94,225.533 2019.51,225.982 2020.08,226.349 2020.64,225.718 2021.21,226.99 2021.78,227.169 2022.35,228.519 2022.92,227.886 2023.49,229.08 2024.05,228.223 2024.62,229.315 2025.19,232.425 2025.76,231.172 2026.33,230.178 2026.9,230.307 2027.46,229.47 2028.03,230.736 2028.6,230.796 2029.17,231.894 2029.74,233.024 2030.31,233.709 2030.87,233.418 2031.44,235.396 2032.01,237.302 2032.58,235.819 2033.15,234.514 2033.72,234.199 2034.28,233.045 2034.85,231.793 2035.42,233.896 2035.99,233.809 2036.56,233.452 2037.13,232.101 2037.69,233.112 2038.26,232.04 2038.83,231.713 2039.4,232.437 2039.97,229.327 2040.54,228.373 2041.11,228.432 2041.67,229.606 2042.24,228.51 2042.81,228.581 2043.38,228.618 2043.95,229.865 2044.52,228.922 2045.08,228.849 2045.65,226.722 2046.22,225.989 2046.79,226.399 2047.36,226.897 2047.93,226.945 2048.49,227.317 2049.06,226.335 2049.63,227.432 2050.2,227.565 2050.77,225.896 2051.34,225.08 2051.9,225.509 2052.47,226.806 2053.04,226.116 2053.61,226.543 2054.18,226.772 2054.75,223.939 2055.31,221.529 2055.88,223.201 2056.45,223.78 2057.02,226.167 2057.59,227.64 2058.16,226.663 2058.72,227.074 2059.29,229.41 2059.86,231.929 2060.43,231.871 2061,231.083 2061.57,234.369 2062.13,235.18 2062.7,233.667 2063.27,233.567 2063.84,234.337 2064.41,234.215 2064.98,234.168 2065.54,234.757 2066.11,235.756 2066.68,234.245 2067.25,232.985 2067.82,232.706 2068.39,234.718 2068.95,234.536 2069.52,233.45 2070.09,233.184 2070.66,235.131 2071.23,234.974 2071.8,233.511 2072.36,233.341 2072.93,233.107 2073.5,234.057 2074.07,236.753 2074.64,236.21 2075.21,235.768 2075.77,233.406 2076.34,234.307 2076.91,235.841 2077.48,237.538 2078.05,236.769 2078.62,237.338 2079.18,235.732 2079.75,234.273 2080.32,234.09 2080.89,233.782 2081.46,233.323 2082.03,232.929 2082.59,230.544 2083.16,230.411 2083.73,230.209 2084.3,231.117 2084.87,227.966 2085.44,229.86 2086,229.834 2086.57,228.499 2087.14,229.481 2087.71,231.522 2088.28,231.407 2088.85,231.602 2089.41,231.55 2089.98,234.263 2090.55,232.667 2091.12,232.387 2091.69,233.09 2092.26,231.796 2092.82,231.452 2093.39,229.189 2093.96,228.994 2094.53,230.847 2095.1,230.611 2095.67,231.443 2096.23,231.265 2096.8,231.902 2097.37,229.814 2097.94,229.562 2098.51,228.23 2099.08,231.46 2099.64,233.274 2100.21,231.121 2100.78,232.824 2101.35,232.323 2101.92,230.063 2102.49,230.806 2103.05,229.619 2103.62,227.211 2104.19,229.303 2104.76,229.148 2105.33,228.278 2105.9,227.246 2106.46,229.275 2107.03,229.456 2107.6,230.279 2108.17,230.115 2108.74,231.146 2109.31,227.874 2109.87,227.854 2110.44,229.67 2111.01,230.442 2111.58,232.282 2112.15,232.042 2112.72,229.918 2113.29,232.045 2113.85,231.856 2114.42,233.826 2114.99,233.492 2115.56,231.059 2116.13,224.662 2116.7,224.839 2117.26,228.065 2117.83,227.942 2118.4,228.051 2118.97,228 2119.54,228.966 2120.11,227.723 2120.67,226.742 2121.24,227.071 2121.81,230.149 2122.38,230.974 2122.95,228.665 2123.52,229.808 2124.08,229.782 2124.65,231.759 2125.22,229.547 2125.79,228.331 2126.36,225.056 2126.93,226.249 2127.49,223.407 2128.06,222.82 2128.63,224.316 2129.2,224.667 2129.77,222.819 2130.34,223.247 2130.9,224.549 2131.47,225.727 2132.04,226.102 2132.61,227.3 2133.18,226.428 2133.75,225.691 2134.31,225.872 2134.88,224.035 2135.45,223.403 2136.02,223.901 2136.59,224.418 2137.16,224.872 2137.72,225.121 2138.29,223.627 2138.86,225.108 2139.43,222.436 2140,222.238 2140.57,222.887 2141.13,224.547 2141.7,224 2142.27,221.302 2142.84,219.956 2143.41,221.742 2143.98,222.573 2144.54,226.326 2145.11,225.615 2145.68,227.026 2146.25,226.414 2146.82,228.991 2147.39,228.412 2147.95,228.707 2148.52,229.085 2149.09,229.522 2149.66,230.816 2150.23,231.005 2150.8,231.151 2151.36,233.501 2151.93,232.483 2152.5,232.384 2153.07,233.496 2153.64,234.673 2154.21,233.469 2154.77,232.287 2155.34,230.247 2155.91,229.209 2156.48,231.455 2157.05,231.254 2157.62,231.341 2158.18,232.382 2158.75,234.436 2159.32,232.103 2159.89,231.02 \"/>\n<path clip-path=\"url(#clip400)\" d=\"M1625.75 1245.03 L2150.8 1245.03 L2150.8 1089.51 L1625.75 1089.51  Z\" fill=\"#ffffff\" fill-rule=\"evenodd\" fill-opacity=\"1\"/>\n<polyline clip-path=\"url(#clip400)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"1625.75,1245.03 2150.8,1245.03 2150.8,1089.51 1625.75,1089.51 1625.75,1245.03 \"/>\n<polyline clip-path=\"url(#clip400)\" style=\"stroke:#e26f46; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" stroke-dasharray=\"16, 10\" points=\"1645.83,1141.35 1766.28,1141.35 \"/>\n<path clip-path=\"url(#clip400)\" d=\"M1793.76 1125.34 L1793.76 1132.71 L1802.53 1132.71 L1802.53 1136.02 L1793.76 1136.02 L1793.76 1150.09 Q1793.76 1153.26 1794.61 1154.16 Q1795.49 1155.07 1798.16 1155.07 L1802.53 1155.07 L1802.53 1158.63 L1798.16 1158.63 Q1793.23 1158.63 1791.35 1156.8 Q1789.48 1154.95 1789.48 1150.09 L1789.48 1136.02 L1786.35 1136.02 L1786.35 1132.71 L1789.48 1132.71 L1789.48 1125.34 L1793.76 1125.34 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip400)\" d=\"M1819.92 1145.6 Q1814.75 1145.6 1812.76 1146.78 Q1810.77 1147.96 1810.77 1150.81 Q1810.77 1153.08 1812.25 1154.42 Q1813.76 1155.74 1816.33 1155.74 Q1819.87 1155.74 1822 1153.24 Q1824.15 1150.72 1824.15 1146.55 L1824.15 1145.6 L1819.92 1145.6 M1828.41 1143.84 L1828.41 1158.63 L1824.15 1158.63 L1824.15 1154.7 Q1822.69 1157.06 1820.52 1158.19 Q1818.34 1159.3 1815.19 1159.3 Q1811.21 1159.3 1808.85 1157.08 Q1806.51 1154.84 1806.51 1151.09 Q1806.51 1146.71 1809.43 1144.49 Q1812.37 1142.27 1818.18 1142.27 L1824.15 1142.27 L1824.15 1141.85 Q1824.15 1138.91 1822.21 1137.31 Q1820.29 1135.69 1816.79 1135.69 Q1814.57 1135.69 1812.46 1136.22 Q1810.36 1136.76 1808.41 1137.82 L1808.41 1133.89 Q1810.75 1132.98 1812.95 1132.54 Q1815.15 1132.08 1817.23 1132.08 Q1822.86 1132.08 1825.63 1135 Q1828.41 1137.91 1828.41 1143.84 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip400)\" d=\"M1852.21 1136.69 Q1851.49 1136.27 1850.63 1136.09 Q1849.8 1135.88 1848.78 1135.88 Q1845.17 1135.88 1843.23 1138.24 Q1841.3 1140.58 1841.3 1144.97 L1841.3 1158.63 L1837.02 1158.63 L1837.02 1132.71 L1841.3 1132.71 L1841.3 1136.73 Q1842.65 1134.37 1844.8 1133.24 Q1846.95 1132.08 1850.03 1132.08 Q1850.47 1132.08 1851 1132.15 Q1851.54 1132.2 1852.18 1132.31 L1852.21 1136.69 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip400)\" d=\"M1872.9 1145.37 Q1872.9 1140.74 1870.98 1138.19 Q1869.08 1135.65 1865.63 1135.65 Q1862.21 1135.65 1860.29 1138.19 Q1858.39 1140.74 1858.39 1145.37 Q1858.39 1149.97 1860.29 1152.52 Q1862.21 1155.07 1865.63 1155.07 Q1869.08 1155.07 1870.98 1152.52 Q1872.9 1149.97 1872.9 1145.37 M1877.16 1155.41 Q1877.16 1162.03 1874.22 1165.25 Q1871.28 1168.49 1865.22 1168.49 Q1862.97 1168.49 1860.98 1168.15 Q1858.99 1167.82 1857.11 1167.13 L1857.11 1162.98 Q1858.99 1164 1860.82 1164.49 Q1862.65 1164.97 1864.54 1164.97 Q1868.73 1164.97 1870.82 1162.78 Q1872.9 1160.6 1872.9 1156.18 L1872.9 1154.07 Q1871.58 1156.36 1869.52 1157.5 Q1867.46 1158.63 1864.59 1158.63 Q1859.82 1158.63 1856.91 1155 Q1853.99 1151.36 1853.99 1145.37 Q1853.99 1139.35 1856.91 1135.72 Q1859.82 1132.08 1864.59 1132.08 Q1867.46 1132.08 1869.52 1133.22 Q1871.58 1134.35 1872.9 1136.64 L1872.9 1132.71 L1877.16 1132.71 L1877.16 1155.41 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip400)\" d=\"M1908.11 1144.6 L1908.11 1146.69 L1888.53 1146.69 Q1888.8 1151.09 1891.17 1153.4 Q1893.55 1155.69 1897.79 1155.69 Q1900.24 1155.69 1902.53 1155.09 Q1904.85 1154.49 1907.11 1153.28 L1907.11 1157.31 Q1904.82 1158.28 1902.42 1158.79 Q1900.01 1159.3 1897.53 1159.3 Q1891.33 1159.3 1887.69 1155.69 Q1884.08 1152.08 1884.08 1145.92 Q1884.08 1139.56 1887.51 1135.83 Q1890.96 1132.08 1896.79 1132.08 Q1902.02 1132.08 1905.05 1135.46 Q1908.11 1138.82 1908.11 1144.6 M1903.85 1143.35 Q1903.8 1139.86 1901.88 1137.78 Q1899.98 1135.69 1896.84 1135.69 Q1893.27 1135.69 1891.12 1137.71 Q1888.99 1139.72 1888.67 1143.38 L1903.85 1143.35 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip400)\" d=\"M1919.31 1125.34 L1919.31 1132.71 L1928.09 1132.71 L1928.09 1136.02 L1919.31 1136.02 L1919.31 1150.09 Q1919.31 1153.26 1920.17 1154.16 Q1921.05 1155.07 1923.71 1155.07 L1928.09 1155.07 L1928.09 1158.63 L1923.71 1158.63 Q1918.78 1158.63 1916.91 1156.8 Q1915.03 1154.95 1915.03 1150.09 L1915.03 1136.02 L1911.91 1136.02 L1911.91 1132.71 L1915.03 1132.71 L1915.03 1125.34 L1919.31 1125.34 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip400)\" d=\"M1953.39 1166.5 L1953.39 1169.81 L1928.76 1169.81 L1928.76 1166.5 L1953.39 1166.5 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip400)\" d=\"M1954.91 1132.71 L1959.17 1132.71 L1964.5 1152.94 L1969.8 1132.71 L1974.82 1132.71 L1980.15 1152.94 L1985.45 1132.71 L1989.71 1132.71 L1982.92 1158.63 L1977.9 1158.63 L1972.32 1137.38 L1966.72 1158.63 L1961.7 1158.63 L1954.91 1132.71 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip400)\" d=\"M2007.95 1145.6 Q2002.78 1145.6 2000.79 1146.78 Q1998.8 1147.96 1998.8 1150.81 Q1998.8 1153.08 2000.28 1154.42 Q2001.79 1155.74 2004.36 1155.74 Q2007.9 1155.74 2010.03 1153.24 Q2012.18 1150.72 2012.18 1146.55 L2012.18 1145.6 L2007.95 1145.6 M2016.44 1143.84 L2016.44 1158.63 L2012.18 1158.63 L2012.18 1154.7 Q2010.72 1157.06 2008.55 1158.19 Q2006.37 1159.3 2003.22 1159.3 Q1999.24 1159.3 1996.88 1157.08 Q1994.54 1154.84 1994.54 1151.09 Q1994.54 1146.71 1997.46 1144.49 Q2000.4 1142.27 2006.21 1142.27 L2012.18 1142.27 L2012.18 1141.85 Q2012.18 1138.91 2010.24 1137.31 Q2008.32 1135.69 2004.82 1135.69 Q2002.6 1135.69 2000.49 1136.22 Q1998.39 1136.76 1996.44 1137.82 L1996.44 1133.89 Q1998.78 1132.98 2000.98 1132.54 Q2003.18 1132.08 2005.26 1132.08 Q2010.89 1132.08 2013.66 1135 Q2016.44 1137.91 2016.44 1143.84 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip400)\" d=\"M2025.22 1122.61 L2029.47 1122.61 L2029.47 1158.63 L2025.22 1158.63 L2025.22 1122.61 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip400)\" d=\"M2038.22 1122.61 L2042.51 1122.61 L2042.51 1143.89 L2055.22 1132.71 L2060.65 1132.71 L2046.91 1144.84 L2061.23 1158.63 L2055.68 1158.63 L2042.51 1145.97 L2042.51 1158.63 L2038.22 1158.63 L2038.22 1122.61 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip400)\" d=\"M2086.33 1144.6 L2086.33 1146.69 L2066.74 1146.69 Q2067.02 1151.09 2069.38 1153.4 Q2071.77 1155.69 2076 1155.69 Q2078.46 1155.69 2080.75 1155.09 Q2083.06 1154.49 2085.33 1153.28 L2085.33 1157.31 Q2083.04 1158.28 2080.63 1158.79 Q2078.22 1159.3 2075.75 1159.3 Q2069.54 1159.3 2065.91 1155.69 Q2062.3 1152.08 2062.3 1145.92 Q2062.3 1139.56 2065.72 1135.83 Q2069.17 1132.08 2075.01 1132.08 Q2080.24 1132.08 2083.27 1135.46 Q2086.33 1138.82 2086.33 1144.6 M2082.07 1143.35 Q2082.02 1139.86 2080.1 1137.78 Q2078.2 1135.69 2075.05 1135.69 Q2071.49 1135.69 2069.34 1137.71 Q2067.21 1139.72 2066.88 1143.38 L2082.07 1143.35 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip400)\" d=\"M2108.34 1136.69 Q2107.62 1136.27 2106.77 1136.09 Q2105.93 1135.88 2104.91 1135.88 Q2101.3 1135.88 2099.36 1138.24 Q2097.44 1140.58 2097.44 1144.97 L2097.44 1158.63 L2093.15 1158.63 L2093.15 1132.71 L2097.44 1132.71 L2097.44 1136.73 Q2098.78 1134.37 2100.93 1133.24 Q2103.09 1132.08 2106.16 1132.08 Q2106.6 1132.08 2107.14 1132.15 Q2107.67 1132.2 2108.32 1132.31 L2108.34 1136.69 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip400)\" d=\"M2129.34 1133.47 L2129.34 1137.5 Q2127.53 1136.57 2125.59 1136.11 Q2123.64 1135.65 2121.56 1135.65 Q2118.39 1135.65 2116.79 1136.62 Q2115.21 1137.59 2115.21 1139.53 Q2115.21 1141.02 2116.35 1141.87 Q2117.48 1142.71 2120.91 1143.47 L2122.37 1143.79 Q2126.9 1144.77 2128.8 1146.55 Q2130.72 1148.31 2130.72 1151.48 Q2130.72 1155.09 2127.85 1157.2 Q2125.01 1159.3 2120.01 1159.3 Q2117.92 1159.3 2115.65 1158.89 Q2113.41 1158.49 2110.91 1157.68 L2110.91 1153.28 Q2113.27 1154.51 2115.56 1155.14 Q2117.85 1155.74 2120.1 1155.74 Q2123.11 1155.74 2124.73 1154.72 Q2126.35 1153.68 2126.35 1151.8 Q2126.35 1150.07 2125.17 1149.14 Q2124.01 1148.22 2120.05 1147.36 L2118.57 1147.01 Q2114.61 1146.18 2112.85 1144.47 Q2111.09 1142.73 2111.09 1139.72 Q2111.09 1136.06 2113.69 1134.07 Q2116.28 1132.08 2121.05 1132.08 Q2123.41 1132.08 2125.49 1132.43 Q2127.58 1132.78 2129.34 1133.47 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><polyline clip-path=\"url(#clip400)\" style=\"stroke:#009af9; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"1645.83,1193.19 1766.28,1193.19 \"/>\n<path clip-path=\"url(#clip400)\" d=\"M1808.06 1194.82 L1808.06 1210.47 L1803.8 1210.47 L1803.8 1194.96 Q1803.8 1191.28 1802.37 1189.45 Q1800.93 1187.62 1798.06 1187.62 Q1794.61 1187.62 1792.62 1189.82 Q1790.63 1192.02 1790.63 1195.82 L1790.63 1210.47 L1786.35 1210.47 L1786.35 1184.55 L1790.63 1184.55 L1790.63 1188.57 Q1792.16 1186.24 1794.22 1185.08 Q1796.3 1183.92 1799.01 1183.92 Q1803.48 1183.92 1805.77 1186.7 Q1808.06 1189.45 1808.06 1194.82 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip400)\" d=\"M1826.61 1187.53 Q1823.18 1187.53 1821.19 1190.22 Q1819.2 1192.88 1819.2 1197.53 Q1819.2 1202.18 1821.17 1204.87 Q1823.16 1207.53 1826.61 1207.53 Q1830.01 1207.53 1832 1204.85 Q1833.99 1202.16 1833.99 1197.53 Q1833.99 1192.93 1832 1190.24 Q1830.01 1187.53 1826.61 1187.53 M1826.61 1183.92 Q1832.16 1183.92 1835.33 1187.53 Q1838.5 1191.14 1838.5 1197.53 Q1838.5 1203.9 1835.33 1207.53 Q1832.16 1211.14 1826.61 1211.14 Q1821.03 1211.14 1817.86 1207.53 Q1814.71 1203.9 1814.71 1197.53 Q1814.71 1191.14 1817.86 1187.53 Q1821.03 1183.92 1826.61 1183.92 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip400)\" d=\"M1860.59 1188.53 Q1859.87 1188.11 1859.01 1187.93 Q1858.18 1187.72 1857.16 1187.72 Q1853.55 1187.72 1851.61 1190.08 Q1849.68 1192.42 1849.68 1196.81 L1849.68 1210.47 L1845.4 1210.47 L1845.4 1184.55 L1849.68 1184.55 L1849.68 1188.57 Q1851.03 1186.21 1853.18 1185.08 Q1855.33 1183.92 1858.41 1183.92 Q1858.85 1183.92 1859.38 1183.99 Q1859.92 1184.04 1860.56 1184.15 L1860.59 1188.53 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip400)\" d=\"M1884.41 1189.52 Q1886 1186.65 1888.23 1185.29 Q1890.45 1183.92 1893.46 1183.92 Q1897.51 1183.92 1899.71 1186.77 Q1901.91 1189.59 1901.91 1194.82 L1901.91 1210.47 L1897.62 1210.47 L1897.62 1194.96 Q1897.62 1191.24 1896.3 1189.43 Q1894.98 1187.62 1892.28 1187.62 Q1888.97 1187.62 1887.04 1189.82 Q1885.12 1192.02 1885.12 1195.82 L1885.12 1210.47 L1880.84 1210.47 L1880.84 1194.96 Q1880.84 1191.21 1879.52 1189.43 Q1878.2 1187.62 1875.45 1187.62 Q1872.18 1187.62 1870.26 1189.85 Q1868.34 1192.05 1868.34 1195.82 L1868.34 1210.47 L1864.06 1210.47 L1864.06 1184.55 L1868.34 1184.55 L1868.34 1188.57 Q1869.8 1186.19 1871.84 1185.06 Q1873.87 1183.92 1876.67 1183.92 Q1879.5 1183.92 1881.47 1185.36 Q1883.46 1186.79 1884.41 1189.52 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /></svg>\n","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"After an initial equilibriation period, the norm fluctuates around the target number of walkers.","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"Now, let's look at using the shift to estimate the ground state energy of H. The mean of the shift is a useful estimator of the energy. Calculating the error bars is a bit more involved as autocorrelations have to be removed from the time series. This can be done with the function shift_estimator, which performs a blocking analysis on the shift column of the dataframe.","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"se = shift_estimator(df; skip=steps_equilibrate)","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"BlockingResult{Float64}\n  mean = -4.04 ± 0.025\n  with uncertainty of ± 0.002297266051216784\n  from 62 blocks after 5 transformations (k = 6).\n","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"Here, se contains the calculated mean and standard errors of the shift, as well as some additional information related to the blocking analysis.","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"Computing the error of the projected energy is a bit more complicated, as it's a ratio of fluctuating variables contained in the hproj and vproj columns in the dataframe. Thankfully, the complications are handled by the function projected_energy.","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"pe = projected_energy(df; skip=steps_equilibrate)","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"RatioBlockingResult{Float64,MonteCarloMeasurements.Particles{Float64, 2000}}\n  ratio = -4.01868 ± (0.00160725, 0.00163631) (MC)\n  95% confidence interval: [-4.0219, -4.01564] (MC)\n  linear error propagation: -4.01865 ± 0.00163278\n  |δ_y| = |0.00154873| (≤ 0.1 for normal approx)\n  Blocking successful with 31 blocks after 6 transformations (k = 7).\n","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"The result is a ratio distribution. We extract its median and the edges of the 95% confidence interval.","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"v = val_and_errs(pe; p=0.95)","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"(val = -4.018681904717955, val_l = 0.0032164222596158254, val_u = 0.0030390252842185106)","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"Let's visualise these estimators together with the time series of the shift.","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"plot(df.step, df.shift, ylabel=\"energy\", xlabel=\"step\", label=\"shift\", margin = 1Plots.cm)\n\nplot!(x->se.mean, df.step[steps_equilibrate+1:end], ribbon=se.err, label=\"shift mean\")\nplot!(\n    x -> v.val, df.step[steps_equilibrate+1:end], ribbon=(v.val_l,v.val_u),\n    label=\"projected energy\",\n)\nlens!([steps_equilibrate, last_step], [-5.1, -2.9]; inset=(1, bbox(0.2, 0.25, 0.6, 0.4)))","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"<?xml version=\"1.0\" encoding=\"utf-8\"?>\n<svg xmlns=\"http://www.w3.org/2000/svg\" xmlns:xlink=\"http://www.w3.org/1999/xlink\" width=\"600\" height=\"400\" viewBox=\"0 0 2400 1600\">\n<defs>\n  <clipPath id=\"clip430\">\n    <rect x=\"0\" y=\"0\" width=\"2400\" height=\"1600\"/>\n  </clipPath>\n</defs>\n<path clip-path=\"url(#clip430)\" d=\"M0 1600 L2400 1600 L2400 0 L0 0  Z\" fill=\"#ffffff\" fill-rule=\"evenodd\" fill-opacity=\"1\"/>\n<defs>\n  <clipPath id=\"clip431\">\n    <rect x=\"480\" y=\"0\" width=\"1681\" height=\"1600\"/>\n  </clipPath>\n</defs>\n<path clip-path=\"url(#clip430)\" d=\"M346.853 1281.45 L2211.02 1281.45 L2211.02 188.976 L346.853 188.976  Z\" fill=\"#ffffff\" fill-rule=\"evenodd\" fill-opacity=\"1\"/>\n<defs>\n  <clipPath id=\"clip432\">\n    <rect x=\"346\" y=\"188\" width=\"1865\" height=\"1093\"/>\n  </clipPath>\n</defs>\n<polyline clip-path=\"url(#clip432)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:2; stroke-opacity:0.1; fill:none\" points=\"399.026,1281.45 399.026,188.976 \"/>\n<polyline clip-path=\"url(#clip432)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:2; stroke-opacity:0.1; fill:none\" points=\"985.439,1281.45 985.439,188.976 \"/>\n<polyline clip-path=\"url(#clip432)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:2; stroke-opacity:0.1; fill:none\" points=\"1571.85,1281.45 1571.85,188.976 \"/>\n<polyline clip-path=\"url(#clip432)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:2; stroke-opacity:0.1; fill:none\" points=\"2158.26,1281.45 2158.26,188.976 \"/>\n<polyline clip-path=\"url(#clip432)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:2; stroke-opacity:0.1; fill:none\" points=\"346.853,1148.71 2211.02,1148.71 \"/>\n<polyline clip-path=\"url(#clip432)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:2; stroke-opacity:0.1; fill:none\" points=\"346.853,991.686 2211.02,991.686 \"/>\n<polyline clip-path=\"url(#clip432)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:2; stroke-opacity:0.1; fill:none\" points=\"346.853,834.66 2211.02,834.66 \"/>\n<polyline clip-path=\"url(#clip432)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:2; stroke-opacity:0.1; fill:none\" points=\"346.853,677.634 2211.02,677.634 \"/>\n<polyline clip-path=\"url(#clip432)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:2; stroke-opacity:0.1; fill:none\" points=\"346.853,520.609 2211.02,520.609 \"/>\n<polyline clip-path=\"url(#clip432)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:2; stroke-opacity:0.1; fill:none\" points=\"346.853,363.583 2211.02,363.583 \"/>\n<polyline clip-path=\"url(#clip432)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:2; stroke-opacity:0.1; fill:none\" points=\"346.853,206.557 2211.02,206.557 \"/>\n<polyline clip-path=\"url(#clip430)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"346.853,1281.45 2211.02,1281.45 \"/>\n<polyline clip-path=\"url(#clip430)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"399.026,1281.45 399.026,1262.55 \"/>\n<polyline clip-path=\"url(#clip430)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"985.439,1281.45 985.439,1262.55 \"/>\n<polyline clip-path=\"url(#clip430)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"1571.85,1281.45 1571.85,1262.55 \"/>\n<polyline clip-path=\"url(#clip430)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"2158.26,1281.45 2158.26,1262.55 \"/>\n<path clip-path=\"url(#clip430)\" d=\"M399.026 1312.37 Q395.415 1312.37 393.587 1315.93 Q391.781 1319.47 391.781 1326.6 Q391.781 1333.71 393.587 1337.27 Q395.415 1340.82 399.026 1340.82 Q402.661 1340.82 404.466 1337.27 Q406.295 1333.71 406.295 1326.6 Q406.295 1319.47 404.466 1315.93 Q402.661 1312.37 399.026 1312.37 M399.026 1308.66 Q404.837 1308.66 407.892 1313.27 Q410.971 1317.85 410.971 1326.6 Q410.971 1335.33 407.892 1339.94 Q404.837 1344.52 399.026 1344.52 Q393.216 1344.52 390.138 1339.94 Q387.082 1335.33 387.082 1326.6 Q387.082 1317.85 390.138 1313.27 Q393.216 1308.66 399.026 1308.66 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip430)\" d=\"M929.965 1339.91 L937.604 1339.91 L937.604 1313.55 L929.293 1315.21 L929.293 1310.95 L937.557 1309.29 L942.233 1309.29 L942.233 1339.91 L949.872 1339.91 L949.872 1343.85 L929.965 1343.85 L929.965 1339.91 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip430)\" d=\"M969.316 1312.37 Q965.705 1312.37 963.877 1315.93 Q962.071 1319.47 962.071 1326.6 Q962.071 1333.71 963.877 1337.27 Q965.705 1340.82 969.316 1340.82 Q972.951 1340.82 974.756 1337.27 Q976.585 1333.71 976.585 1326.6 Q976.585 1319.47 974.756 1315.93 Q972.951 1312.37 969.316 1312.37 M969.316 1308.66 Q975.127 1308.66 978.182 1313.27 Q981.261 1317.85 981.261 1326.6 Q981.261 1335.33 978.182 1339.94 Q975.127 1344.52 969.316 1344.52 Q963.506 1344.52 960.428 1339.94 Q957.372 1335.33 957.372 1326.6 Q957.372 1317.85 960.428 1313.27 Q963.506 1308.66 969.316 1308.66 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip430)\" d=\"M999.478 1312.37 Q995.867 1312.37 994.038 1315.93 Q992.233 1319.47 992.233 1326.6 Q992.233 1333.71 994.038 1337.27 Q995.867 1340.82 999.478 1340.82 Q1003.11 1340.82 1004.92 1337.27 Q1006.75 1333.71 1006.75 1326.6 Q1006.75 1319.47 1004.92 1315.93 Q1003.11 1312.37 999.478 1312.37 M999.478 1308.66 Q1005.29 1308.66 1008.34 1313.27 Q1011.42 1317.85 1011.42 1326.6 Q1011.42 1335.33 1008.34 1339.94 Q1005.29 1344.52 999.478 1344.52 Q993.668 1344.52 990.589 1339.94 Q987.534 1335.33 987.534 1326.6 Q987.534 1317.85 990.589 1313.27 Q993.668 1308.66 999.478 1308.66 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip430)\" d=\"M1029.64 1312.37 Q1026.03 1312.37 1024.2 1315.93 Q1022.39 1319.47 1022.39 1326.6 Q1022.39 1333.71 1024.2 1337.27 Q1026.03 1340.82 1029.64 1340.82 Q1033.27 1340.82 1035.08 1337.27 Q1036.91 1333.71 1036.91 1326.6 Q1036.91 1319.47 1035.08 1315.93 Q1033.27 1312.37 1029.64 1312.37 M1029.64 1308.66 Q1035.45 1308.66 1038.51 1313.27 Q1041.58 1317.85 1041.58 1326.6 Q1041.58 1335.33 1038.51 1339.94 Q1035.45 1344.52 1029.64 1344.52 Q1023.83 1344.52 1020.75 1339.94 Q1017.7 1335.33 1017.7 1326.6 Q1017.7 1317.85 1020.75 1313.27 Q1023.83 1308.66 1029.64 1308.66 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip430)\" d=\"M1520.46 1339.91 L1536.78 1339.91 L1536.78 1343.85 L1514.84 1343.85 L1514.84 1339.91 Q1517.5 1337.16 1522.08 1332.53 Q1526.69 1327.88 1527.87 1326.53 Q1530.12 1324.01 1531 1322.27 Q1531.9 1320.51 1531.9 1318.82 Q1531.9 1316.07 1529.95 1314.33 Q1528.03 1312.6 1524.93 1312.6 Q1522.73 1312.6 1520.28 1313.36 Q1517.85 1314.13 1515.07 1315.68 L1515.07 1310.95 Q1517.89 1309.82 1520.35 1309.24 Q1522.8 1308.66 1524.84 1308.66 Q1530.21 1308.66 1533.4 1311.35 Q1536.6 1314.03 1536.6 1318.52 Q1536.6 1320.65 1535.79 1322.57 Q1535 1324.47 1532.89 1327.07 Q1532.31 1327.74 1529.21 1330.95 Q1526.11 1334.15 1520.46 1339.91 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip430)\" d=\"M1556.6 1312.37 Q1552.99 1312.37 1551.16 1315.93 Q1549.35 1319.47 1549.35 1326.6 Q1549.35 1333.71 1551.16 1337.27 Q1552.99 1340.82 1556.6 1340.82 Q1560.23 1340.82 1562.04 1337.27 Q1563.87 1333.71 1563.87 1326.6 Q1563.87 1319.47 1562.04 1315.93 Q1560.23 1312.37 1556.6 1312.37 M1556.6 1308.66 Q1562.41 1308.66 1565.46 1313.27 Q1568.54 1317.85 1568.54 1326.6 Q1568.54 1335.33 1565.46 1339.94 Q1562.41 1344.52 1556.6 1344.52 Q1550.79 1344.52 1547.71 1339.94 Q1544.65 1335.33 1544.65 1326.6 Q1544.65 1317.85 1547.71 1313.27 Q1550.79 1308.66 1556.6 1308.66 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip430)\" d=\"M1586.76 1312.37 Q1583.15 1312.37 1581.32 1315.93 Q1579.51 1319.47 1579.51 1326.6 Q1579.51 1333.71 1581.32 1337.27 Q1583.15 1340.82 1586.76 1340.82 Q1590.39 1340.82 1592.2 1337.27 Q1594.03 1333.71 1594.03 1326.6 Q1594.03 1319.47 1592.2 1315.93 Q1590.39 1312.37 1586.76 1312.37 M1586.76 1308.66 Q1592.57 1308.66 1595.62 1313.27 Q1598.7 1317.85 1598.7 1326.6 Q1598.7 1335.33 1595.62 1339.94 Q1592.57 1344.52 1586.76 1344.52 Q1580.95 1344.52 1577.87 1339.94 Q1574.81 1335.33 1574.81 1326.6 Q1574.81 1317.85 1577.87 1313.27 Q1580.95 1308.66 1586.76 1308.66 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip430)\" d=\"M1616.92 1312.37 Q1613.31 1312.37 1611.48 1315.93 Q1609.68 1319.47 1609.68 1326.6 Q1609.68 1333.71 1611.48 1337.27 Q1613.31 1340.82 1616.92 1340.82 Q1620.55 1340.82 1622.36 1337.27 Q1624.19 1333.71 1624.19 1326.6 Q1624.19 1319.47 1622.36 1315.93 Q1620.55 1312.37 1616.92 1312.37 M1616.92 1308.66 Q1622.73 1308.66 1625.79 1313.27 Q1628.87 1317.85 1628.87 1326.6 Q1628.87 1335.33 1625.79 1339.94 Q1622.73 1344.52 1616.92 1344.52 Q1611.11 1344.52 1608.03 1339.94 Q1604.98 1335.33 1604.98 1326.6 Q1604.98 1317.85 1608.03 1313.27 Q1611.11 1308.66 1616.92 1308.66 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip430)\" d=\"M2116.94 1325.21 Q2120.3 1325.93 2122.18 1328.2 Q2124.07 1330.47 2124.07 1333.8 Q2124.07 1338.92 2120.56 1341.72 Q2117.04 1344.52 2110.56 1344.52 Q2108.38 1344.52 2106.07 1344.08 Q2103.77 1343.66 2101.32 1342.81 L2101.32 1338.29 Q2103.26 1339.43 2105.58 1340 Q2107.89 1340.58 2110.42 1340.58 Q2114.82 1340.58 2117.11 1338.85 Q2119.42 1337.11 2119.42 1333.8 Q2119.42 1330.75 2117.27 1329.03 Q2115.14 1327.3 2111.32 1327.3 L2107.29 1327.3 L2107.29 1323.45 L2111.51 1323.45 Q2114.95 1323.45 2116.78 1322.09 Q2118.61 1320.7 2118.61 1318.11 Q2118.61 1315.44 2116.71 1314.03 Q2114.84 1312.6 2111.32 1312.6 Q2109.4 1312.6 2107.2 1313.01 Q2105 1313.43 2102.36 1314.31 L2102.36 1310.14 Q2105.02 1309.4 2107.34 1309.03 Q2109.68 1308.66 2111.74 1308.66 Q2117.06 1308.66 2120.16 1311.09 Q2123.26 1313.5 2123.26 1317.62 Q2123.26 1320.49 2121.62 1322.48 Q2119.98 1324.45 2116.94 1325.21 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip430)\" d=\"M2142.94 1312.37 Q2139.33 1312.37 2137.5 1315.93 Q2135.69 1319.47 2135.69 1326.6 Q2135.69 1333.71 2137.5 1337.27 Q2139.33 1340.82 2142.94 1340.82 Q2146.57 1340.82 2148.38 1337.27 Q2150.21 1333.71 2150.21 1326.6 Q2150.21 1319.47 2148.38 1315.93 Q2146.57 1312.37 2142.94 1312.37 M2142.94 1308.66 Q2148.75 1308.66 2151.81 1313.27 Q2154.88 1317.85 2154.88 1326.6 Q2154.88 1335.33 2151.81 1339.94 Q2148.75 1344.52 2142.94 1344.52 Q2137.13 1344.52 2134.05 1339.94 Q2131 1335.33 2131 1326.6 Q2131 1317.85 2134.05 1313.27 Q2137.13 1308.66 2142.94 1308.66 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip430)\" d=\"M2173.1 1312.37 Q2169.49 1312.37 2167.66 1315.93 Q2165.86 1319.47 2165.86 1326.6 Q2165.86 1333.71 2167.66 1337.27 Q2169.49 1340.82 2173.1 1340.82 Q2176.74 1340.82 2178.54 1337.27 Q2180.37 1333.71 2180.37 1326.6 Q2180.37 1319.47 2178.54 1315.93 Q2176.74 1312.37 2173.1 1312.37 M2173.1 1308.66 Q2178.91 1308.66 2181.97 1313.27 Q2185.05 1317.85 2185.05 1326.6 Q2185.05 1335.33 2181.97 1339.94 Q2178.91 1344.52 2173.1 1344.52 Q2167.29 1344.52 2164.21 1339.94 Q2161.16 1335.33 2161.16 1326.6 Q2161.16 1317.85 2164.21 1313.27 Q2167.29 1308.66 2173.1 1308.66 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip430)\" d=\"M2203.26 1312.37 Q2199.65 1312.37 2197.82 1315.93 Q2196.02 1319.47 2196.02 1326.6 Q2196.02 1333.71 2197.82 1337.27 Q2199.65 1340.82 2203.26 1340.82 Q2206.9 1340.82 2208.7 1337.27 Q2210.53 1333.71 2210.53 1326.6 Q2210.53 1319.47 2208.7 1315.93 Q2206.9 1312.37 2203.26 1312.37 M2203.26 1308.66 Q2209.07 1308.66 2212.13 1313.27 Q2215.21 1317.85 2215.21 1326.6 Q2215.21 1335.33 2212.13 1339.94 Q2209.07 1344.52 2203.26 1344.52 Q2197.45 1344.52 2194.38 1339.94 Q2191.32 1335.33 2191.32 1326.6 Q2191.32 1317.85 2194.38 1313.27 Q2197.45 1308.66 2203.26 1308.66 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip430)\" d=\"M1237.32 1391.71 L1237.32 1397.25 Q1234.84 1395.98 1232.17 1395.34 Q1229.49 1394.71 1226.63 1394.71 Q1222.27 1394.71 1220.07 1396.04 Q1217.91 1397.38 1217.91 1400.05 Q1217.91 1402.09 1219.47 1403.27 Q1221.03 1404.41 1225.74 1405.46 L1227.74 1405.91 Q1233.98 1407.25 1236.59 1409.7 Q1239.23 1412.12 1239.23 1416.48 Q1239.23 1421.44 1235.29 1424.34 Q1231.37 1427.23 1224.5 1427.23 Q1221.63 1427.23 1218.51 1426.66 Q1215.42 1426.12 1211.99 1425.01 L1211.99 1418.96 Q1215.23 1420.65 1218.38 1421.51 Q1221.54 1422.33 1224.62 1422.33 Q1228.76 1422.33 1230.99 1420.93 Q1233.22 1419.5 1233.22 1416.92 Q1233.22 1414.54 1231.59 1413.26 Q1230 1411.99 1224.56 1410.81 L1222.52 1410.33 Q1217.08 1409.19 1214.66 1406.83 Q1212.24 1404.45 1212.24 1400.31 Q1212.24 1395.28 1215.81 1392.54 Q1219.37 1389.8 1225.93 1389.8 Q1229.17 1389.8 1232.04 1390.28 Q1234.9 1390.76 1237.32 1391.71 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip430)\" d=\"M1254.35 1380.54 L1254.35 1390.66 L1266.41 1390.66 L1266.41 1395.22 L1254.35 1395.22 L1254.35 1414.57 Q1254.35 1418.93 1255.53 1420.17 Q1256.74 1421.41 1260.4 1421.41 L1266.41 1421.41 L1266.41 1426.31 L1260.4 1426.31 Q1253.62 1426.31 1251.04 1423.8 Q1248.46 1421.25 1248.46 1414.57 L1248.46 1395.22 L1244.17 1395.22 L1244.17 1390.66 L1248.46 1390.66 L1248.46 1380.54 L1254.35 1380.54 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip430)\" d=\"M1304.61 1407.02 L1304.61 1409.89 L1277.68 1409.89 Q1278.06 1415.94 1281.31 1419.12 Q1284.59 1422.27 1290.41 1422.27 Q1293.79 1422.27 1296.94 1421.44 Q1300.12 1420.61 1303.24 1418.96 L1303.24 1424.5 Q1300.09 1425.83 1296.78 1426.53 Q1293.47 1427.23 1290.06 1427.23 Q1281.53 1427.23 1276.54 1422.27 Q1271.57 1417.3 1271.57 1408.84 Q1271.57 1400.08 1276.28 1394.96 Q1281.02 1389.8 1289.04 1389.8 Q1296.24 1389.8 1300.41 1394.45 Q1304.61 1399.07 1304.61 1407.02 M1298.75 1405.3 Q1298.69 1400.5 1296.05 1397.63 Q1293.44 1394.77 1289.11 1394.77 Q1284.21 1394.77 1281.25 1397.54 Q1278.32 1400.31 1277.87 1405.34 L1298.75 1405.3 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip430)\" d=\"M1319.89 1420.96 L1319.89 1439.87 L1314 1439.87 L1314 1390.66 L1319.89 1390.66 L1319.89 1396.07 Q1321.73 1392.89 1324.53 1391.36 Q1327.37 1389.8 1331.28 1389.8 Q1337.77 1389.8 1341.82 1394.96 Q1345.89 1400.12 1345.89 1408.52 Q1345.89 1416.92 1341.82 1422.08 Q1337.77 1427.23 1331.28 1427.23 Q1327.37 1427.23 1324.53 1425.71 Q1321.73 1424.15 1319.89 1420.96 M1339.81 1408.52 Q1339.81 1402.06 1337.14 1398.4 Q1334.5 1394.71 1329.85 1394.71 Q1325.2 1394.71 1322.53 1398.4 Q1319.89 1402.06 1319.89 1408.52 Q1319.89 1414.98 1322.53 1418.67 Q1325.2 1422.33 1329.85 1422.33 Q1334.5 1422.33 1337.14 1418.67 Q1339.81 1414.98 1339.81 1408.52 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><polyline clip-path=\"url(#clip430)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"346.853,1281.45 346.853,188.976 \"/>\n<polyline clip-path=\"url(#clip430)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"346.853,1148.71 365.751,1148.71 \"/>\n<polyline clip-path=\"url(#clip430)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"346.853,991.686 365.751,991.686 \"/>\n<polyline clip-path=\"url(#clip430)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"346.853,834.66 365.751,834.66 \"/>\n<polyline clip-path=\"url(#clip430)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"346.853,677.634 365.751,677.634 \"/>\n<polyline clip-path=\"url(#clip430)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"346.853,520.609 365.751,520.609 \"/>\n<polyline clip-path=\"url(#clip430)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"346.853,363.583 365.751,363.583 \"/>\n<polyline clip-path=\"url(#clip430)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"346.853,206.557 365.751,206.557 \"/>\n<path clip-path=\"url(#clip430)\" d=\"M298.909 1134.51 Q295.298 1134.51 293.469 1138.08 Q291.664 1141.62 291.664 1148.75 Q291.664 1155.85 293.469 1159.42 Q295.298 1162.96 298.909 1162.96 Q302.543 1162.96 304.349 1159.42 Q306.177 1155.85 306.177 1148.75 Q306.177 1141.62 304.349 1138.08 Q302.543 1134.51 298.909 1134.51 M298.909 1130.81 Q304.719 1130.81 307.775 1135.41 Q310.853 1140 310.853 1148.75 Q310.853 1157.47 307.775 1162.08 Q304.719 1166.66 298.909 1166.66 Q293.099 1166.66 290.02 1162.08 Q286.964 1157.47 286.964 1148.75 Q286.964 1140 290.02 1135.41 Q293.099 1130.81 298.909 1130.81 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip430)\" d=\"M259.557 1005.03 L267.196 1005.03 L267.196 978.665 L258.886 980.332 L258.886 976.073 L267.15 974.406 L271.826 974.406 L271.826 1005.03 L279.465 1005.03 L279.465 1008.97 L259.557 1008.97 L259.557 1005.03 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip430)\" d=\"M298.909 977.485 Q295.298 977.485 293.469 981.049 Q291.664 984.591 291.664 991.721 Q291.664 998.827 293.469 1002.39 Q295.298 1005.93 298.909 1005.93 Q302.543 1005.93 304.349 1002.39 Q306.177 998.827 306.177 991.721 Q306.177 984.591 304.349 981.049 Q302.543 977.485 298.909 977.485 M298.909 973.781 Q304.719 973.781 307.775 978.387 Q310.853 982.971 310.853 991.721 Q310.853 1000.45 307.775 1005.05 Q304.719 1009.64 298.909 1009.64 Q293.099 1009.64 290.02 1005.05 Q286.964 1000.45 286.964 991.721 Q286.964 982.971 290.02 978.387 Q293.099 973.781 298.909 973.781 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip430)\" d=\"M262.775 848.005 L279.094 848.005 L279.094 851.94 L257.15 851.94 L257.15 848.005 Q259.812 845.25 264.395 840.621 Q269.002 835.968 270.182 834.625 Q272.428 832.102 273.307 830.366 Q274.21 828.607 274.21 826.917 Q274.21 824.163 272.266 822.426 Q270.344 820.69 267.242 820.69 Q265.043 820.69 262.59 821.454 Q260.159 822.218 257.381 823.769 L257.381 819.047 Q260.205 817.913 262.659 817.334 Q265.113 816.755 267.15 816.755 Q272.52 816.755 275.715 819.44 Q278.909 822.126 278.909 826.616 Q278.909 828.746 278.099 830.667 Q277.312 832.565 275.205 835.158 Q274.627 835.829 271.525 839.047 Q268.423 842.241 262.775 848.005 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip430)\" d=\"M298.909 820.459 Q295.298 820.459 293.469 824.024 Q291.664 827.565 291.664 834.695 Q291.664 841.801 293.469 845.366 Q295.298 848.908 298.909 848.908 Q302.543 848.908 304.349 845.366 Q306.177 841.801 306.177 834.695 Q306.177 827.565 304.349 824.024 Q302.543 820.459 298.909 820.459 M298.909 816.755 Q304.719 816.755 307.775 821.362 Q310.853 825.945 310.853 834.695 Q310.853 843.422 307.775 848.028 Q304.719 852.611 298.909 852.611 Q293.099 852.611 290.02 848.028 Q286.964 843.422 286.964 834.695 Q286.964 825.945 290.02 821.362 Q293.099 816.755 298.909 816.755 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip430)\" d=\"M272.914 676.28 Q276.27 676.998 278.145 679.266 Q280.043 681.535 280.043 684.868 Q280.043 689.984 276.525 692.785 Q273.006 695.586 266.525 695.586 Q264.349 695.586 262.034 695.146 Q259.742 694.729 257.289 693.873 L257.289 689.359 Q259.233 690.493 261.548 691.072 Q263.863 691.651 266.386 691.651 Q270.784 691.651 273.076 689.915 Q275.39 688.178 275.39 684.868 Q275.39 681.813 273.238 680.1 Q271.108 678.364 267.289 678.364 L263.261 678.364 L263.261 674.521 L267.474 674.521 Q270.923 674.521 272.752 673.155 Q274.58 671.766 274.58 669.174 Q274.58 666.512 272.682 665.1 Q270.807 663.665 267.289 663.665 Q265.367 663.665 263.168 664.081 Q260.969 664.498 258.33 665.378 L258.33 661.211 Q260.992 660.47 263.307 660.1 Q265.645 659.729 267.705 659.729 Q273.029 659.729 276.131 662.16 Q279.233 664.567 279.233 668.688 Q279.233 671.558 277.59 673.549 Q275.946 675.516 272.914 676.28 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip430)\" d=\"M298.909 663.433 Q295.298 663.433 293.469 666.998 Q291.664 670.54 291.664 677.669 Q291.664 684.776 293.469 688.34 Q295.298 691.882 298.909 691.882 Q302.543 691.882 304.349 688.34 Q306.177 684.776 306.177 677.669 Q306.177 670.54 304.349 666.998 Q302.543 663.433 298.909 663.433 M298.909 659.729 Q304.719 659.729 307.775 664.336 Q310.853 668.919 310.853 677.669 Q310.853 686.396 307.775 691.002 Q304.719 695.586 298.909 695.586 Q293.099 695.586 290.02 691.002 Q286.964 686.396 286.964 677.669 Q286.964 668.919 290.02 664.336 Q293.099 659.729 298.909 659.729 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip430)\" d=\"M271.594 507.403 L259.789 525.852 L271.594 525.852 L271.594 507.403 M270.367 503.329 L276.247 503.329 L276.247 525.852 L281.177 525.852 L281.177 529.741 L276.247 529.741 L276.247 537.889 L271.594 537.889 L271.594 529.741 L255.992 529.741 L255.992 525.227 L270.367 503.329 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip430)\" d=\"M298.909 506.407 Q295.298 506.407 293.469 509.972 Q291.664 513.514 291.664 520.644 Q291.664 527.75 293.469 531.315 Q295.298 534.856 298.909 534.856 Q302.543 534.856 304.349 531.315 Q306.177 527.75 306.177 520.644 Q306.177 513.514 304.349 509.972 Q302.543 506.407 298.909 506.407 M298.909 502.704 Q304.719 502.704 307.775 507.31 Q310.853 511.894 310.853 520.644 Q310.853 529.37 307.775 533.977 Q304.719 538.56 298.909 538.56 Q293.099 538.56 290.02 533.977 Q286.964 529.37 286.964 520.644 Q286.964 511.894 290.02 507.31 Q293.099 502.704 298.909 502.704 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip430)\" d=\"M258.793 346.303 L277.15 346.303 L277.15 350.238 L263.076 350.238 L263.076 358.71 Q264.094 358.363 265.113 358.201 Q266.131 358.016 267.15 358.016 Q272.937 358.016 276.316 361.187 Q279.696 364.359 279.696 369.775 Q279.696 375.354 276.224 378.456 Q272.752 381.534 266.432 381.534 Q264.256 381.534 261.988 381.164 Q259.742 380.794 257.335 380.053 L257.335 375.354 Q259.418 376.488 261.641 377.044 Q263.863 377.599 266.34 377.599 Q270.344 377.599 272.682 375.493 Q275.02 373.386 275.02 369.775 Q275.02 366.164 272.682 364.058 Q270.344 361.951 266.34 361.951 Q264.465 361.951 262.59 362.368 Q260.738 362.785 258.793 363.664 L258.793 346.303 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip430)\" d=\"M298.909 349.382 Q295.298 349.382 293.469 352.947 Q291.664 356.488 291.664 363.618 Q291.664 370.724 293.469 374.289 Q295.298 377.831 298.909 377.831 Q302.543 377.831 304.349 374.289 Q306.177 370.724 306.177 363.618 Q306.177 356.488 304.349 352.947 Q302.543 349.382 298.909 349.382 M298.909 345.678 Q304.719 345.678 307.775 350.285 Q310.853 354.868 310.853 363.618 Q310.853 372.345 307.775 376.951 Q304.719 381.534 298.909 381.534 Q293.099 381.534 290.02 376.951 Q286.964 372.345 286.964 363.618 Q286.964 354.868 290.02 350.285 Q293.099 345.678 298.909 345.678 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip430)\" d=\"M269.326 204.694 Q266.178 204.694 264.326 206.847 Q262.497 209 262.497 212.75 Q262.497 216.476 264.326 218.652 Q266.178 220.805 269.326 220.805 Q272.474 220.805 274.303 218.652 Q276.154 216.476 276.154 212.75 Q276.154 209 274.303 206.847 Q272.474 204.694 269.326 204.694 M278.608 190.041 L278.608 194.301 Q276.849 193.467 275.043 193.027 Q273.261 192.588 271.502 192.588 Q266.872 192.588 264.418 195.713 Q261.988 198.838 261.641 205.157 Q263.006 203.143 265.066 202.078 Q267.127 200.99 269.603 200.99 Q274.812 200.99 277.821 204.162 Q280.853 207.31 280.853 212.75 Q280.853 218.074 277.705 221.291 Q274.557 224.509 269.326 224.509 Q263.33 224.509 260.159 219.925 Q256.988 215.319 256.988 206.592 Q256.988 198.398 260.877 193.537 Q264.766 188.652 271.316 188.652 Q273.076 188.652 274.858 189 Q276.664 189.347 278.608 190.041 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip430)\" d=\"M298.909 192.356 Q295.298 192.356 293.469 195.921 Q291.664 199.463 291.664 206.592 Q291.664 213.699 293.469 217.263 Q295.298 220.805 298.909 220.805 Q302.543 220.805 304.349 217.263 Q306.177 213.699 306.177 206.592 Q306.177 199.463 304.349 195.921 Q302.543 192.356 298.909 192.356 M298.909 188.652 Q304.719 188.652 307.775 193.259 Q310.853 197.842 310.853 206.592 Q310.853 215.319 307.775 219.925 Q304.719 224.509 298.909 224.509 Q293.099 224.509 290.02 219.925 Q286.964 215.319 286.964 206.592 Q286.964 197.842 290.02 193.259 Q293.099 188.652 298.909 188.652 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip430)\" d=\"M186.448 812.969 L189.313 812.969 L189.313 839.896 Q195.36 839.514 198.543 836.268 Q201.694 832.989 201.694 827.165 Q201.694 823.791 200.867 820.64 Q200.039 817.457 198.384 814.338 L203.922 814.338 Q205.259 817.489 205.959 820.799 Q206.659 824.109 206.659 827.515 Q206.659 836.045 201.694 841.042 Q196.729 846.007 188.263 846.007 Q179.51 846.007 174.385 841.296 Q169.229 836.554 169.229 828.533 Q169.229 821.34 173.876 817.17 Q178.491 812.969 186.448 812.969 M184.73 818.826 Q179.924 818.889 177.059 821.531 Q174.194 824.141 174.194 828.47 Q174.194 833.371 176.963 836.331 Q179.733 839.259 184.761 839.705 L184.73 818.826 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip430)\" d=\"M184.22 773.724 L205.736 773.724 L205.736 779.581 L184.411 779.581 Q179.351 779.581 176.836 781.554 Q174.322 783.528 174.322 787.474 Q174.322 792.217 177.345 794.954 Q180.369 797.691 185.589 797.691 L205.736 797.691 L205.736 803.58 L170.088 803.58 L170.088 797.691 L175.627 797.691 Q172.412 795.591 170.821 792.758 Q169.229 789.893 169.229 786.169 Q169.229 780.027 173.049 776.876 Q176.836 773.724 184.22 773.724 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip430)\" d=\"M186.448 731.552 L189.313 731.552 L189.313 758.479 Q195.36 758.097 198.543 754.85 Q201.694 751.572 201.694 745.747 Q201.694 742.373 200.867 739.222 Q200.039 736.04 198.384 732.92 L203.922 732.92 Q205.259 736.071 205.959 739.382 Q206.659 742.692 206.659 746.097 Q206.659 754.627 201.694 759.624 Q196.729 764.59 188.263 764.59 Q179.51 764.59 174.385 759.879 Q169.229 755.137 169.229 747.116 Q169.229 739.923 173.876 735.753 Q178.491 731.552 186.448 731.552 M184.73 737.408 Q179.924 737.472 177.059 740.114 Q174.194 742.724 174.194 747.052 Q174.194 751.954 176.963 754.914 Q179.733 757.842 184.761 758.288 L184.73 737.408 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip430)\" d=\"M175.563 701.283 Q174.99 702.269 174.735 703.447 Q174.449 704.593 174.449 705.993 Q174.449 710.959 177.696 713.632 Q180.91 716.274 186.958 716.274 L205.736 716.274 L205.736 722.162 L170.088 722.162 L170.088 716.274 L175.627 716.274 Q172.38 714.428 170.821 711.468 Q169.229 708.508 169.229 704.275 Q169.229 703.67 169.325 702.938 Q169.388 702.206 169.547 701.315 L175.563 701.283 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip430)\" d=\"M187.499 672.828 Q181.133 672.828 177.632 675.47 Q174.131 678.08 174.131 682.822 Q174.131 687.533 177.632 690.175 Q181.133 692.785 187.499 692.785 Q193.833 692.785 197.334 690.175 Q200.835 687.533 200.835 682.822 Q200.835 678.08 197.334 675.47 Q193.833 672.828 187.499 672.828 M201.312 666.972 Q210.415 666.972 214.839 671.014 Q219.295 675.056 219.295 683.395 Q219.295 686.482 218.818 689.22 Q218.372 691.957 217.418 694.535 L211.72 694.535 Q213.121 691.957 213.789 689.443 Q214.457 686.928 214.457 684.318 Q214.457 678.557 211.434 675.693 Q208.442 672.828 202.363 672.828 L199.466 672.828 Q202.617 674.642 204.177 677.475 Q205.736 680.308 205.736 684.254 Q205.736 690.811 200.739 694.822 Q195.742 698.832 187.499 698.832 Q179.223 698.832 174.226 694.822 Q169.229 690.811 169.229 684.254 Q169.229 680.308 170.789 677.475 Q172.348 674.642 175.499 672.828 L170.088 672.828 L170.088 666.972 L201.312 666.972 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip430)\" d=\"M209.047 640.076 Q215.412 642.559 217.354 644.914 Q219.295 647.27 219.295 651.216 L219.295 655.895 L214.394 655.895 L214.394 652.458 Q214.394 650.039 213.248 648.702 Q212.102 647.365 207.837 645.742 L205.164 644.692 L170.088 659.11 L170.088 652.903 L197.97 641.763 L170.088 630.623 L170.088 624.417 L209.047 640.076 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><polyline clip-path=\"url(#clip432)\" style=\"stroke:#009af9; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"399.613,1033.01 400.199,926.717 400.786,948.845 401.372,851.557 401.958,764.341 402.545,688.079 403.131,615.043 403.718,548.347 404.304,491.198 404.891,437.797 405.477,473.552 406.063,426.086 406.65,381.831 407.236,342.171 407.823,306.809 408.409,275.464 408.995,247.876 409.582,223.796 410.168,256.578 410.755,236.764 411.341,219.895 411.927,249.774 412.514,313.301 413.1,333.716 413.687,319.702 414.273,310.095 414.86,330.73 415.446,321.924 416.032,314.195 416.619,334.037 417.205,353.272 417.792,349.466 418.378,348.992 418.964,347.902 419.551,348.842 420.137,368.031 420.724,370.738 421.31,376.536 421.896,381.301 422.483,387.518 423.069,433.056 423.656,439.264 424.242,457.511 424.829,474.502 425.415,491.98 426.001,508.958 426.588,516.193 427.174,533.122 427.761,541.892 428.347,559.118 428.933,568.194 429.52,584.534 430.106,601.049 430.693,623.058 431.279,631.252 431.865,646.189 432.452,654.528 433.038,669.095 433.625,688.462 434.211,708.405 434.798,717.635 435.384,731.046 435.97,749.136 436.557,766.325 437.143,787.243 437.73,799.581 438.316,816.271 438.902,831.897 439.489,845.933 440.075,863.485 440.662,870.511 441.248,877.409 441.835,884.275 442.421,897.343 443.007,903.391 443.594,912.989 444.18,921.958 444.767,930.927 445.353,937.004 445.939,949.19 446.526,971.957 447.112,979.943 447.699,1000.58 448.285,1012.54 448.871,1021.58 449.458,1027.51 450.044,1031.38 450.631,1042.37 451.217,1046.03 451.804,1049.55 452.39,1055.63 452.976,1061.49 453.563,1068.78 454.149,1076.22 454.736,1081.17 455.322,1088.08 455.908,1096.99 456.495,1101.64 457.081,1106.04 457.668,1108.35 458.254,1118.27 458.84,1123.97 459.427,1127.67 460.013,1131.04 460.6,1136.55 461.186,1138 461.773,1146.56 462.359,1151.32 462.945,1159.46 463.532,1160.54 464.118,1163.26 464.705,1169.46 465.291,1171.5 465.877,1172.14 466.464,1171.34 467.05,1175.71 467.637,1175.2 468.223,1176.06 468.809,1178.69 469.396,1178.1 469.982,1182.55 470.569,1181.6 471.155,1184.17 471.742,1183.45 472.328,1184.36 472.914,1188.46 473.501,1189.53 474.087,1193.6 474.674,1197.51 475.26,1201.47 475.846,1205.34 476.433,1204.23 477.019,1212.08 477.606,1212.14 478.192,1212.21 478.778,1213.76 479.365,1214.2 479.951,1214.14 480.538,1217.29 481.124,1217.19 481.711,1218.43 482.297,1219.83 482.883,1221.23 483.47,1222.67 484.056,1225.57 484.643,1227.04 485.229,1228.43 485.815,1233.77 486.402,1237.25 486.988,1239.72 487.575,1239.9 488.161,1240.4 488.748,1240.72 489.334,1241.27 489.92,1240.3 490.507,1240.84 491.093,1240.11 491.68,1235.06 492.266,1235.95 492.852,1236.68 493.439,1235.08 494.025,1235.69 494.612,1235.05 495.198,1236.08 495.784,1232.98 496.371,1232.39 496.957,1234.72 497.544,1237.01 498.13,1240.79 498.717,1240.3 499.303,1241.02 499.889,1241.6 500.476,1243.79 501.062,1244.62 501.649,1245.02 502.235,1240.03 502.821,1239.51 503.408,1239.21 503.994,1238.84 504.581,1240.09 505.167,1242.32 505.753,1241.8 506.34,1239.75 506.926,1239.14 507.513,1237.6 508.099,1242.41 508.686,1241.5 509.272,1241.07 509.858,1240.75 510.445,1242.71 511.031,1243.47 511.618,1242.73 512.204,1244.54 512.79,1244 513.377,1247.03 513.963,1243.58 514.55,1241.26 515.136,1239.28 515.722,1240.33 516.309,1237.13 516.895,1237.9 517.482,1238.71 518.068,1238.22 518.655,1235.25 519.241,1234.86 519.827,1234.58 520.414,1230.73 521,1231.99 521.587,1230.57 522.173,1230.52 522.759,1232.05 523.346,1231.84 523.932,1237.02 524.519,1239.4 525.105,1238.59 525.691,1240.84 526.278,1241.58 526.864,1240.09 527.451,1242.09 528.037,1243.9 528.624,1245.79 529.21,1246.34 529.796,1249.52 530.383,1248.49 530.969,1249.98 531.556,1250.36 532.142,1250.53 532.728,1246.74 533.315,1245.69 533.901,1244.99 534.488,1246.71 535.074,1243.25 535.661,1242.58 536.247,1243.12 536.833,1244.94 537.42,1244.2 538.006,1247.45 538.593,1245.34 539.179,1244.43 539.765,1246.39 540.352,1245.74 540.938,1243.87 541.525,1244.79 542.111,1242.7 542.697,1242.13 543.284,1241.43 543.87,1242.14 544.457,1241.35 545.043,1243.13 545.63,1243.9 546.216,1243.36 546.802,1245.1 547.389,1241.69 547.975,1239.78 548.562,1239.4 549.148,1240.02 549.734,1238.3 550.321,1237.77 550.907,1234.76 551.494,1238.65 552.08,1236.75 552.666,1233.84 553.253,1232.06 553.839,1234.47 554.426,1233.79 555.012,1229.55 555.599,1229.38 556.185,1229.41 556.771,1229.4 557.358,1229.33 557.944,1229.17 558.531,1227.85 559.117,1228.88 559.703,1230.15 560.29,1232.63 560.876,1234.87 561.463,1234.3 562.049,1233.77 562.635,1234.87 563.222,1237.01 563.808,1236.42 564.395,1235.85 564.981,1237.76 565.568,1237.14 566.154,1236.54 566.74,1236.01 567.327,1235.62 567.913,1235.07 568.5,1233.47 569.086,1233.04 569.672,1235.43 570.259,1233.8 570.845,1232.05 571.432,1230.63 572.018,1231.73 572.605,1231.58 573.191,1229.96 573.777,1230.99 574.364,1229.3 574.95,1229.28 575.537,1229.34 576.123,1230.39 576.709,1232.68 577.296,1233.39 577.882,1235.33 578.469,1234.87 579.055,1234.39 579.641,1238.97 580.228,1240.56 580.814,1240.95 581.401,1241.3 581.987,1240.52 582.574,1240.89 583.16,1240.11 583.746,1237.89 584.333,1235.92 584.919,1236.47 585.506,1238.39 586.092,1237.95 586.678,1235.82 587.265,1233.76 587.851,1231.97 588.438,1231.45 589.024,1230.82 589.61,1229.09 590.197,1228.76 590.783,1228.32 591.37,1230.65 591.956,1229.19 592.543,1230.08 593.129,1227.04 593.715,1228.12 594.302,1227.88 594.888,1230.42 595.475,1227.49 596.061,1225.94 596.647,1223.45 597.234,1223.19 597.82,1220.84 598.407,1222.73 598.993,1223.07 599.579,1223.08 600.166,1223.19 600.752,1220.35 601.339,1222.63 601.925,1223.68 602.512,1223.4 603.098,1223.24 603.684,1223.23 604.271,1224.43 604.857,1225.67 605.444,1225.63 606.03,1223.92 606.616,1222.48 607.203,1222.41 607.789,1221.33 608.376,1222.65 608.962,1225.25 609.548,1221.08 610.135,1220.92 610.721,1222.32 611.308,1221.19 611.894,1221.52 612.481,1222.76 613.067,1222.89 613.653,1222.86 614.24,1221.36 614.826,1221.63 615.413,1219.13 615.999,1219.37 616.585,1219.3 617.172,1222.11 617.758,1223.78 618.345,1224.76 618.931,1227.16 619.518,1226.67 620.104,1226.34 620.69,1222.26 621.277,1222.62 621.863,1223.75 622.45,1223.45 623.036,1225.75 623.622,1224.22 624.209,1226.87 624.795,1231.65 625.382,1232.44 625.968,1230.66 626.554,1230.31 627.141,1229.68 627.727,1231.57 628.314,1231.23 628.9,1233.33 629.487,1233.73 630.073,1232.83 630.659,1233.46 631.246,1235.18 631.832,1234.51 632.419,1233.78 633.005,1230.37 633.591,1227.08 634.178,1224.15 634.764,1223.79 635.351,1223.72 635.937,1218.3 636.523,1217.03 637.11,1217.22 637.696,1214.82 638.283,1215.15 638.869,1215.47 639.456,1215.63 640.042,1215.75 640.628,1215.71 641.215,1215.97 641.801,1216.17 642.388,1215.11 642.974,1215.38 643.56,1217.18 644.147,1216.14 644.733,1216.56 645.32,1217.7 645.906,1220.31 646.492,1217.89 647.079,1219.25 647.665,1218.29 648.252,1219.87 648.838,1221.2 649.425,1220.07 650.011,1221.23 650.597,1223.61 651.184,1224.59 651.77,1224.33 652.357,1229.35 652.943,1225.04 653.529,1227.16 654.116,1224.03 654.702,1223.89 655.289,1222.29 655.875,1220.81 656.462,1219.12 657.048,1217.93 657.634,1215.3 658.221,1212.86 658.807,1216.91 659.394,1218.49 659.98,1218.38 660.566,1220.92 661.153,1220.84 661.739,1219.28 662.326,1220.67 662.912,1219.32 663.498,1218 664.085,1219.34 664.671,1219.34 665.258,1220.54 665.844,1218.1 666.431,1218.3 667.017,1219.66 667.603,1222.28 668.19,1224.75 668.776,1223.24 669.363,1224.23 669.949,1223.88 670.535,1224.83 671.122,1225.83 671.708,1225.82 672.295,1224.35 672.881,1225.23 673.467,1226.11 674.054,1227.18 674.64,1229.41 675.227,1228.51 675.813,1228.01 676.4,1227.42 676.986,1227 677.572,1225.07 678.159,1224.62 678.745,1222.88 679.332,1225.3 679.918,1226.15 680.504,1226.99 681.091,1226.48 681.677,1227.18 682.264,1227.97 682.85,1226.1 683.436,1225.83 684.023,1225.37 684.609,1226.34 685.196,1224.56 685.782,1224.31 686.369,1226.62 686.955,1224.67 687.541,1228.07 688.128,1226.28 688.714,1227.1 689.301,1226.56 689.887,1226.08 690.473,1222.94 691.06,1219.9 691.646,1218.45 692.233,1219.76 692.819,1218.45 693.405,1218.38 693.992,1218.35 694.578,1216.84 695.165,1218.05 695.751,1220.65 696.338,1220.4 696.924,1221.51 697.51,1222.51 698.097,1220.94 698.683,1219.6 699.27,1216.64 699.856,1218.15 700.442,1214.13 701.029,1215.54 701.615,1218.33 702.202,1218.32 702.788,1218.09 703.375,1216.41 703.961,1213.78 704.547,1212.83 705.134,1212.86 705.72,1213.21 706.307,1213.39 706.893,1214.77 707.479,1213.81 708.066,1211.16 708.652,1211.66 709.239,1209.54 709.825,1208.48 710.411,1207.67 710.998,1208.19 711.584,1208.78 712.171,1209.54 712.757,1209.83 713.344,1211.51 713.93,1211.65 714.516,1212.1 715.103,1212.26 715.689,1211.09 716.276,1211.41 716.862,1215.63 717.448,1217.25 718.035,1217.25 718.621,1217.51 719.208,1216.36 719.794,1217.83 720.38,1217.59 720.967,1217.49 721.553,1218.84 722.14,1217.72 722.726,1217.53 723.313,1218.93 723.899,1221.27 724.485,1220.85 725.072,1223.22 725.658,1224.04 726.245,1224.52 726.831,1222.86 727.417,1222.4 728.004,1222.02 728.59,1220.53 729.177,1219.05 729.763,1217.92 730.349,1216.55 730.936,1216.38 731.522,1213.98 732.109,1216.61 732.695,1219.11 733.282,1221.56 733.868,1224 734.454,1221.19 735.041,1219.52 735.627,1220.63 736.214,1221.78 736.8,1222.67 737.386,1221.01 737.973,1223.34 738.559,1220.25 739.146,1217.53 739.732,1210.92 740.318,1211.4 740.905,1215.58 741.491,1215.66 742.078,1215.71 742.664,1212.96 743.251,1214.25 743.837,1214.2 744.423,1211.7 745.01,1213.16 745.596,1213.24 746.183,1215.96 746.769,1214.59 747.355,1214.64 747.942,1214.95 748.528,1215.04 749.115,1214.92 749.701,1217.44 750.288,1215.96 750.874,1214.59 751.46,1212.13 752.047,1216.34 752.633,1215.14 753.22,1216.35 753.806,1216.75 754.392,1217.77 754.979,1213.98 755.565,1214.14 756.152,1214.02 756.738,1214.06 757.324,1214.02 757.911,1217.65 758.497,1221.85 759.084,1221.78 759.67,1221.49 760.257,1222.28 760.843,1223.16 761.429,1221.23 762.016,1218.4 762.602,1220.77 763.189,1224.27 763.775,1222.65 764.361,1222.24 764.948,1222.04 765.534,1220.48 766.121,1221.66 766.707,1222.63 767.293,1219.76 767.88,1218.36 768.466,1215.93 769.053,1216.96 769.639,1217.2 770.226,1215.63 770.812,1215.69 771.398,1218.06 771.985,1215.93 772.571,1219.71 773.158,1224.57 773.744,1221.63 774.33,1220.1 774.917,1219.81 775.503,1217.29 776.09,1213.35 776.676,1217.13 777.262,1215.81 777.849,1214.36 778.435,1214.34 779.022,1215.65 779.608,1215.47 780.195,1214.17 780.781,1215.49 781.367,1215.35 781.954,1218.13 782.54,1216.88 783.127,1216.76 783.713,1215.33 784.299,1213.94 784.886,1215.38 785.472,1215.34 786.059,1213.88 786.645,1213.88 787.232,1217.75 787.818,1220 788.404,1219.65 788.991,1220.9 789.577,1220.4 790.164,1220.08 790.75,1218.43 791.336,1216.67 791.923,1213.93 792.509,1212.32 793.096,1213.76 793.682,1213.61 794.268,1214.64 794.855,1214.48 795.441,1214.41 796.028,1215.71 796.614,1215.76 797.201,1215.78 797.787,1217.23 798.373,1218.46 798.96,1221.02 799.546,1220.74 800.133,1218.95 800.719,1218.74 801.305,1220.93 801.892,1219.43 802.478,1219.03 803.065,1216.42 803.651,1217.65 804.237,1219.89 804.824,1222.03 805.41,1223.16 805.997,1224.06 806.583,1224.8 807.17,1221.63 807.756,1220.15 808.342,1222.69 808.929,1221.14 809.515,1219.33 810.102,1219.48 810.688,1217.72 811.274,1218.93 811.861,1221 812.447,1222.07 813.034,1221.52 813.62,1220.9 814.206,1218 814.793,1217.97 815.379,1217.87 815.966,1217.58 816.552,1216.1 817.139,1215.95 817.725,1217.18 818.311,1215.87 818.898,1215.66 819.484,1214.31 820.071,1213.06 820.657,1213.03 821.243,1214.33 821.83,1215.81 822.416,1215.62 823.003,1217.01 823.589,1218.05 824.175,1218.15 824.762,1217.94 825.348,1217.38 825.935,1216.97 826.521,1216.94 827.108,1215.73 827.694,1218.01 828.28,1214.92 828.867,1213.27 829.453,1214.62 830.04,1215.71 830.626,1215.88 831.212,1214.34 831.799,1215.47 832.385,1216.65 832.972,1216.41 833.558,1215.09 834.145,1213.8 834.731,1213.86 835.317,1211.38 835.904,1211.64 836.49,1211.75 837.077,1214.58 837.663,1214.53 838.249,1214.48 838.836,1213.07 839.422,1214.54 840.009,1213.64 840.595,1212.44 841.181,1211.32 841.768,1214.03 842.354,1212.59 842.941,1213.79 843.527,1215.13 844.114,1216.42 844.7,1217.71 845.286,1218.79 845.873,1217.3 846.459,1215.77 847.046,1214.24 847.632,1211.61 848.218,1210.33 848.805,1210.49 849.391,1207.95 849.978,1209.48 850.564,1208.38 851.15,1211.21 851.737,1207.59 852.323,1209.22 852.91,1210.83 853.496,1209.88 854.083,1211.57 854.669,1211.54 855.255,1212.87 855.842,1211.66 856.428,1210.67 857.015,1214.71 857.601,1212.17 858.187,1212.02 858.774,1210.94 859.36,1213.59 859.947,1212.26 860.533,1212.49 861.119,1211.16 861.706,1211.56 862.292,1213.03 862.879,1213.08 863.465,1215.96 864.052,1215.96 864.638,1215.98 865.224,1216.11 865.811,1216.24 866.397,1215.01 866.984,1216.15 867.57,1218.43 868.156,1218.57 868.743,1216.84 869.329,1217.8 869.916,1217.63 870.502,1217.52 871.089,1217.19 871.675,1217.04 872.261,1215.63 872.848,1216.63 873.434,1214.05 874.021,1212.79 874.607,1214.23 875.193,1213.02 875.78,1210.19 876.366,1211.55 876.953,1211.5 877.539,1210.51 878.125,1213.05 878.712,1212.89 879.298,1214.05 879.885,1213.92 880.471,1214.02 881.058,1215.07 881.644,1214.81 882.23,1216.96 882.817,1216.64 883.403,1215.06 883.99,1214.63 884.576,1212 885.162,1213.35 885.749,1213.43 886.335,1217.13 886.922,1213.14 887.508,1213.25 888.094,1213.18 888.681,1211.96 889.267,1212.24 889.854,1212.29 890.44,1212.59 891.027,1211.42 891.613,1211.33 892.199,1213.05 892.786,1213.14 893.372,1213.37 893.959,1214.67 894.545,1214.7 895.131,1214.28 895.718,1215.61 896.304,1215.38 896.891,1216.39 897.477,1217.37 898.063,1219.77 898.65,1216.9 899.236,1217.99 899.823,1219.09 900.409,1216.23 900.996,1215.9 901.582,1213.13 902.168,1211.96 902.755,1214.3 903.341,1213.03 903.928,1214.28 904.514,1211.49 905.1,1212.82 905.687,1210 906.273,1206.26 906.86,1207.95 907.446,1206.82 908.032,1208.6 908.619,1208.97 909.205,1209.53 909.792,1209.88 910.378,1209.11 910.965,1209.49 911.551,1210.9 912.137,1215.11 912.724,1212.63 913.31,1214.13 913.897,1211.74 914.483,1211.9 915.069,1211.84 915.656,1212.23 916.242,1209.84 916.829,1210.04 917.415,1212.87 918.002,1209 918.588,1210.56 919.174,1208.13 919.761,1209.62 920.347,1207.07 920.934,1208.65 921.52,1210.14 922.106,1209.1 922.693,1210.52 923.279,1211.82 923.866,1214.24 924.452,1215.73 925.038,1215.68 925.625,1219.31 926.211,1217.76 926.798,1216.04 927.384,1218.5 927.971,1217.16 928.557,1217.06 929.143,1217.14 929.73,1220.66 930.316,1219.06 930.903,1215.99 931.489,1213.28 932.075,1212.06 932.662,1213.6 933.248,1213.54 933.835,1213.48 934.421,1211.07 935.007,1212.82 935.594,1215.39 936.18,1215.18 936.767,1213.71 937.353,1213.37 937.94,1212.23 938.526,1209.75 939.112,1210.05 939.699,1210.1 940.285,1210.27 940.872,1210.24 941.458,1211.59 942.044,1209.08 942.631,1208.84 943.217,1207.79 943.804,1208.07 944.39,1206.98 944.976,1207.21 945.563,1210.03 946.149,1207.55 946.736,1206.71 947.322,1205.76 947.909,1208.49 948.495,1208.7 949.081,1210.25 949.668,1210.42 950.254,1212.08 950.841,1213.49 951.427,1213.57 952.013,1211.95 952.6,1212.08 953.186,1210.79 953.773,1210.79 954.359,1212.18 954.945,1211.03 955.532,1214.87 956.118,1212.35 956.705,1213.76 957.291,1211.17 957.878,1211.34 958.464,1213.76 959.05,1213.48 959.637,1213.4 960.223,1208.24 960.81,1208.15 961.396,1207.41 961.982,1206.48 962.569,1209.21 963.155,1207.98 963.742,1204.34 964.328,1206.22 964.915,1206.8 965.501,1205.94 966.087,1207.56 966.674,1208 967.26,1209.83 967.847,1210.07 968.433,1210.28 969.019,1211.75 969.606,1211.62 970.192,1210.38 970.779,1208.97 971.365,1210.61 971.951,1212.94 972.538,1214.49 973.124,1213.21 973.711,1214.32 974.297,1216.89 974.884,1217.86 975.47,1218.89 976.056,1214.6 976.643,1217.11 977.229,1216.93 977.816,1217.85 978.402,1220.25 978.988,1222.69 979.575,1221.05 980.161,1221.8 980.748,1222.64 981.334,1221.06 981.92,1219.36 982.507,1220.54 983.093,1221.4 983.68,1220.95 984.266,1220.82 984.853,1220.43 985.439,1217.61 986.025,1217.3 986.612,1217.1 987.198,1218.5 987.785,1218.31 988.371,1217.89 988.957,1218.77 989.544,1218.39 990.13,1216.8 990.717,1215.33 991.303,1215.25 991.889,1215.08 992.476,1215.14 993.062,1212.64 993.649,1210.01 994.235,1207.98 994.822,1208.09 995.408,1208.21 995.994,1204.54 996.581,1203.82 997.167,1200.58 997.754,1201.19 998.34,1201.55 998.926,1200.8 999.513,1202.9 1000.1,1203.38 1000.69,1205.14 1001.27,1205.6 1001.86,1206.32 1002.44,1207.75 1003.03,1208.03 1003.62,1207 1004.2,1208.28 1004.79,1208.73 1005.38,1211.73 1005.96,1215.65 1006.55,1215.68 1007.14,1216.82 1007.72,1214.05 1008.31,1215.45 1008.9,1217.9 1009.48,1214.77 1010.07,1214.8 1010.65,1214.86 1011.24,1214.87 1011.83,1213.24 1012.41,1213.22 1013,1215.59 1013.59,1215.2 1014.17,1215.14 1014.76,1217.67 1015.35,1214.72 1015.93,1214.74 1016.52,1214.62 1017.11,1215.54 1017.69,1214.07 1018.28,1214.11 1018.86,1215.35 1019.45,1215.24 1020.04,1214.9 1020.62,1215.87 1021.21,1214.56 1021.8,1213.03 1022.38,1216.57 1022.97,1217.96 1023.56,1219.06 1024.14,1218.84 1024.73,1218.37 1025.32,1217.84 1025.9,1217.5 1026.49,1218.34 1027.07,1215.45 1027.66,1214.08 1028.25,1216.38 1028.83,1216.34 1029.42,1212.14 1030.01,1209.29 1030.59,1209.27 1031.18,1210.73 1031.77,1208.34 1032.35,1209.81 1032.94,1209.82 1033.52,1209.96 1034.11,1210.05 1034.7,1209.69 1035.28,1211.24 1035.87,1211.25 1036.46,1211.5 1037.04,1214.16 1037.63,1213.96 1038.22,1211.55 1038.8,1210.48 1039.39,1212.06 1039.98,1210.72 1040.56,1212.05 1041.15,1212.24 1041.73,1212.37 1042.32,1210.02 1042.91,1210.15 1043.49,1210.31 1044.08,1210.58 1044.67,1213.48 1045.25,1213.68 1045.84,1212.15 1046.43,1214.87 1047.01,1214.85 1047.6,1214.7 1048.19,1217.28 1048.77,1216.95 1049.36,1217.81 1049.94,1217.78 1050.53,1218.82 1051.12,1215.92 1051.7,1219.63 1052.29,1216.85 1052.88,1216.66 1053.46,1215.48 1054.05,1215.44 1054.64,1215.41 1055.22,1214.08 1055.81,1215.09 1056.39,1212.19 1056.98,1211.06 1057.57,1213.66 1058.15,1214.78 1058.74,1210.77 1059.33,1212.12 1059.91,1212.3 1060.5,1210.87 1061.09,1212.12 1061.67,1212.45 1062.26,1213.57 1062.85,1213.82 1063.43,1214.9 1064.02,1213.29 1064.6,1214.73 1065.19,1214.71 1065.78,1216.99 1066.36,1218.05 1066.95,1216.5 1067.54,1216.25 1068.12,1215.94 1068.71,1213.01 1069.3,1213.99 1069.88,1214.01 1070.47,1214.99 1071.06,1217.73 1071.64,1218.87 1072.23,1219.91 1072.81,1221.96 1073.4,1218.73 1073.99,1217.14 1074.57,1216.87 1075.16,1216.7 1075.75,1218.96 1076.33,1218.46 1076.92,1216.71 1077.51,1215.1 1078.09,1217.37 1078.68,1217.35 1079.26,1217.01 1079.85,1216.77 1080.44,1217.95 1081.02,1217.56 1081.61,1215.94 1082.2,1215.74 1082.78,1215.56 1083.37,1212.9 1083.96,1214.28 1084.54,1214.02 1085.13,1212.71 1085.72,1212.75 1086.3,1212.58 1086.89,1211.29 1087.47,1211.32 1088.06,1210.2 1088.65,1207.85 1089.23,1205.45 1089.82,1205.98 1090.41,1204.07 1090.99,1204.39 1091.58,1206.05 1092.17,1206.65 1092.75,1207.08 1093.34,1207.35 1093.93,1206.33 1094.51,1207.88 1095.1,1205.37 1095.68,1207.01 1096.27,1207.48 1096.86,1210.47 1097.44,1209 1098.03,1205.34 1098.62,1205.63 1099.2,1206.14 1099.79,1205.22 1100.38,1209.48 1100.96,1208.4 1101.55,1206.31 1102.14,1205.46 1102.72,1205.83 1103.31,1204.81 1103.89,1206.17 1104.48,1203.79 1105.07,1204.18 1105.65,1203.5 1106.24,1203.69 1106.83,1205.5 1107.41,1207.18 1108,1209.85 1108.59,1207.41 1109.17,1205.13 1109.76,1208.22 1110.34,1209.96 1110.93,1210.01 1111.52,1207.92 1112.1,1207.91 1112.69,1207.97 1113.28,1206.75 1113.86,1204.43 1114.45,1208.79 1115.04,1210.33 1115.62,1210.44 1116.21,1210.31 1116.8,1210.46 1117.38,1208.02 1117.97,1208.29 1118.55,1208.28 1119.14,1213.92 1119.73,1215.09 1120.31,1216.29 1120.9,1216.05 1121.49,1218.57 1122.07,1218.11 1122.66,1218.03 1123.25,1218.91 1123.83,1216.06 1124.42,1216.07 1125.01,1215.99 1125.59,1215.83 1126.18,1216.7 1126.76,1219.13 1127.35,1218.9 1127.94,1219.68 1128.52,1216.79 1129.11,1219.14 1129.7,1219.84 1130.28,1219.43 1130.87,1220.45 1131.46,1218.66 1132.04,1219.61 1132.63,1218.89 1133.21,1217.1 1133.8,1219.64 1134.39,1218.05 1134.97,1213.91 1135.56,1218.66 1136.15,1218.17 1136.73,1216.52 1137.32,1216.23 1137.91,1218.53 1138.49,1219.5 1139.08,1218.83 1139.67,1219.86 1140.25,1218.16 1140.84,1216.58 1141.42,1212.54 1142.01,1213.61 1142.6,1214.74 1143.18,1213.37 1143.77,1212.18 1144.36,1213.57 1144.94,1213.35 1145.53,1213.2 1146.12,1213.13 1146.7,1214.18 1147.29,1213.81 1147.88,1211.06 1148.46,1211.05 1149.05,1212.46 1149.63,1209.67 1150.22,1208.6 1150.81,1211.34 1151.39,1211.08 1151.98,1210.82 1152.57,1209.47 1153.15,1208.29 1153.74,1207.08 1154.33,1206.05 1154.91,1203.86 1155.5,1204.21 1156.09,1201.93 1156.67,1203.69 1157.26,1204.36 1157.84,1203.41 1158.43,1203.84 1159.02,1205.75 1159.6,1207.81 1160.19,1210.45 1160.78,1211.83 1161.36,1211.9 1161.95,1211.84 1162.54,1212.01 1163.12,1214.69 1163.71,1213.22 1164.29,1211.75 1164.88,1214.22 1165.47,1216.91 1166.05,1218.36 1166.64,1214.35 1167.23,1216.63 1167.81,1213.79 1168.4,1211.13 1168.99,1211.21 1169.57,1211.27 1170.16,1210.1 1170.75,1210.25 1171.33,1210.18 1171.92,1210.2 1172.5,1212.51 1173.09,1213.76 1173.68,1212.39 1174.26,1212.39 1174.85,1214.94 1175.44,1215.72 1176.02,1215.76 1176.61,1217.96 1177.2,1219.01 1177.78,1222.56 1178.37,1223.38 1178.96,1218.81 1179.54,1218.49 1180.13,1219.5 1180.71,1221.55 1181.3,1219.92 1181.89,1220.82 1182.47,1222.7 1183.06,1221.9 1183.65,1218.85 1184.23,1217.1 1184.82,1218.36 1185.41,1220.48 1185.99,1216.24 1186.58,1217.15 1187.16,1215.46 1187.75,1213.63 1188.34,1213.42 1188.92,1214.51 1189.51,1214.08 1190.1,1213.97 1190.68,1215.04 1191.27,1211.12 1191.86,1211.07 1192.44,1211.14 1193.03,1208.57 1193.62,1210.17 1194.2,1210.35 1194.79,1207.61 1195.37,1208.81 1195.96,1205.16 1196.55,1209.24 1197.13,1205.45 1197.72,1206.95 1198.31,1208.57 1198.89,1212.57 1199.48,1213.51 1200.07,1217.48 1200.65,1214.48 1201.24,1214.3 1201.83,1212.66 1202.41,1212.37 1203,1213.64 1203.58,1213.32 1204.17,1213.19 1204.76,1214.28 1205.34,1211.52 1205.93,1211.26 1206.52,1210.3 1207.1,1211.68 1207.69,1210.41 1208.28,1207.5 1208.86,1206.64 1209.45,1205.52 1210.03,1203.26 1210.62,1203.8 1211.21,1203.14 1211.79,1199.7 1212.38,1203.01 1212.97,1203.49 1213.55,1203.83 1214.14,1204.14 1214.73,1205.93 1215.31,1210.21 1215.9,1211.6 1216.49,1212.8 1217.07,1212.79 1217.66,1211.66 1218.24,1210.4 1218.83,1210.52 1219.42,1211.94 1220,1212.28 1220.59,1211.04 1221.18,1210.94 1221.76,1211.03 1222.35,1210.78 1222.94,1210.71 1223.52,1207.07 1224.11,1207.56 1224.7,1208.03 1225.28,1208.23 1225.87,1207.18 1226.45,1207.72 1227.04,1205.14 1227.63,1207.03 1228.21,1205.89 1228.8,1206.39 1229.39,1206.75 1229.97,1208.4 1230.56,1208.67 1231.15,1207.46 1231.73,1207.41 1232.32,1207.9 1232.91,1205.59 1233.49,1207.18 1234.08,1206.16 1234.66,1205.24 1235.25,1204.36 1235.84,1206.32 1236.42,1206.9 1237.01,1208.29 1237.6,1208.42 1238.18,1206.09 1238.77,1207.79 1239.36,1206.94 1239.94,1206.21 1240.53,1205.23 1241.11,1206.73 1241.7,1205.7 1242.29,1207.38 1242.87,1207.77 1243.46,1207.82 1244.05,1209.34 1244.63,1210.77 1245.22,1211.19 1245.81,1212.5 1246.39,1212.39 1246.98,1212.26 1247.57,1212.11 1248.15,1210.56 1248.74,1211.86 1249.32,1210.86 1249.91,1209.36 1250.5,1209.61 1251.08,1207.27 1251.67,1207.59 1252.26,1207.9 1252.84,1210.95 1253.43,1210.78 1254.02,1212.06 1254.6,1212.15 1255.19,1213.49 1255.78,1211.91 1256.36,1214.11 1256.95,1217.63 1257.53,1218.6 1258.12,1219.72 1258.71,1216.96 1259.29,1217.99 1259.88,1221.49 1260.47,1222.32 1261.05,1220.6 1261.64,1220.31 1262.23,1218.63 1262.81,1219.55 1263.4,1219.21 1263.98,1218.66 1264.57,1219.37 1265.16,1217.81 1265.74,1217.39 1266.33,1211.82 1266.92,1212.07 1267.5,1210.8 1268.09,1213.4 1268.68,1211.98 1269.26,1214.46 1269.85,1218.52 1270.44,1218.32 1271.02,1219.2 1271.61,1220.23 1272.19,1220.04 1272.78,1219.5 1273.37,1219.19 1273.95,1221.27 1274.54,1222.12 1275.13,1219.07 1275.71,1220.01 1276.3,1218.2 1276.89,1219.3 1277.47,1217.48 1278.06,1217.24 1278.65,1215.72 1279.23,1216.75 1279.82,1219.25 1280.4,1218.83 1280.99,1218.64 1281.58,1218.39 1282.16,1219.2 1282.75,1217.35 1283.34,1214.44 1283.92,1215.65 1284.51,1218.99 1285.1,1218.74 1285.68,1215.85 1286.27,1214.38 1286.86,1212.86 1287.44,1212.7 1288.03,1212.52 1288.61,1212.29 1289.2,1208.29 1289.79,1210.85 1290.37,1213.47 1290.96,1213.56 1291.55,1213.6 1292.13,1214.84 1292.72,1213.34 1293.31,1213.29 1293.89,1217.12 1294.48,1215.59 1295.06,1212.6 1295.65,1213.76 1296.24,1212.38 1296.82,1209.94 1297.41,1210.01 1298,1211.55 1298.58,1214.57 1299.17,1213.27 1299.76,1214.4 1300.34,1211.56 1300.93,1211.56 1301.52,1210.28 1302.1,1208.81 1302.69,1208.9 1303.27,1206.59 1303.86,1205.57 1304.45,1207.15 1305.03,1207.46 1305.62,1206.47 1306.21,1207.76 1306.79,1206.81 1307.38,1205.58 1307.97,1206.11 1308.55,1208.93 1309.14,1208.9 1309.73,1208.85 1310.31,1211.4 1310.9,1207.63 1311.48,1206.55 1312.07,1203.29 1312.66,1206.13 1313.24,1207.74 1313.83,1206.65 1314.42,1209.51 1315,1211.28 1315.59,1215.23 1316.18,1215.25 1316.76,1213.72 1317.35,1213.68 1317.93,1211.11 1318.52,1212.33 1319.11,1214.96 1319.69,1217.27 1320.28,1218.3 1320.87,1217.86 1321.45,1216.36 1322.04,1214.67 1322.63,1213.47 1323.21,1213.43 1323.8,1214.44 1324.39,1215.24 1324.97,1212.39 1325.56,1210.99 1326.14,1212.42 1326.73,1212.37 1327.32,1211.11 1327.9,1213.63 1328.49,1213.43 1329.08,1213.37 1329.66,1213.34 1330.25,1213.51 1330.84,1215.93 1331.42,1217.09 1332.01,1215.57 1332.6,1216.59 1333.18,1216.35 1333.77,1216.27 1334.35,1218.91 1334.94,1217.31 1335.53,1216.59 1336.11,1216.08 1336.7,1214.37 1337.29,1212.98 1337.87,1211.48 1338.46,1211.44 1339.05,1211.51 1339.63,1211.4 1340.22,1207.43 1340.8,1208.86 1341.39,1209.17 1341.98,1213.34 1342.56,1212.21 1343.15,1211.08 1343.74,1209.63 1344.32,1210.07 1344.91,1210.43 1345.5,1210.5 1346.08,1209.22 1346.67,1209.2 1347.26,1209.1 1347.84,1211.94 1348.43,1209.14 1349.01,1205.53 1349.6,1205.92 1350.19,1207.47 1350.77,1207.72 1351.36,1209.12 1351.95,1208.02 1352.53,1206.8 1353.12,1208.4 1353.71,1204.85 1354.29,1206.43 1354.88,1206.6 1355.47,1208.15 1356.05,1209.87 1356.64,1206.38 1357.22,1206.83 1357.81,1206.01 1358.4,1206.82 1358.98,1207.53 1359.57,1205.06 1360.16,1205.66 1360.74,1206 1361.33,1204.72 1361.92,1204.13 1362.5,1204.85 1363.09,1203.72 1363.68,1204.34 1364.26,1203.39 1364.85,1204.09 1365.43,1206.15 1366.02,1205.18 1366.61,1205.42 1367.19,1205.77 1367.78,1203.62 1368.37,1202.94 1368.95,1206.16 1369.54,1206.5 1370.13,1204.04 1370.71,1204.4 1371.3,1204.8 1371.88,1203.72 1372.47,1205.36 1373.06,1205.97 1373.64,1206.46 1374.23,1207.91 1374.82,1211.7 1375.4,1212.89 1375.99,1213.79 1376.58,1212.34 1377.16,1213.62 1377.75,1214.98 1378.34,1216.34 1378.92,1214.9 1379.51,1212.36 1380.09,1214.73 1380.68,1214.33 1381.27,1210.47 1381.85,1210.49 1382.44,1209.13 1383.03,1208.21 1383.61,1207.19 1384.2,1208.47 1384.79,1206.48 1385.37,1206.62 1385.96,1203.39 1386.55,1202.6 1387.13,1204.46 1387.72,1204.88 1388.3,1207.75 1388.89,1209.07 1389.48,1208.95 1390.06,1210.5 1390.65,1210.71 1391.24,1210.46 1391.82,1210.74 1392.41,1212 1393,1212.31 1393.58,1214.93 1394.17,1217.07 1394.75,1215.52 1395.34,1212.91 1395.93,1212.92 1396.51,1211.77 1397.1,1206.87 1397.69,1207.02 1398.27,1208.46 1398.86,1209.91 1399.45,1207.38 1400.03,1206.58 1400.62,1206.59 1401.21,1206.8 1401.79,1208.61 1402.38,1212.7 1402.96,1209.88 1403.55,1212.72 1404.14,1212.75 1404.72,1216.46 1405.31,1216.45 1405.9,1218.58 1406.48,1220.86 1407.07,1219.33 1407.66,1218.86 1408.24,1219.66 1408.83,1218.19 1409.42,1221.77 1410,1221.08 1410.59,1221.99 1411.17,1218.88 1411.76,1220.18 1412.35,1219.81 1412.93,1218 1413.52,1217.99 1414.11,1217.36 1414.69,1217.09 1415.28,1219.35 1415.87,1218.81 1416.45,1217.15 1417.04,1216.65 1417.63,1216.23 1418.21,1215.94 1418.8,1215.45 1419.38,1216.53 1419.97,1216.32 1420.56,1216.13 1421.14,1214.82 1421.73,1213.62 1422.32,1213.56 1422.9,1214.6 1423.49,1218.25 1424.08,1217.8 1424.66,1217.42 1425.25,1218.18 1425.83,1215.06 1426.42,1215 1427.01,1215 1427.59,1214.91 1428.18,1214.6 1428.77,1214.32 1429.35,1219.48 1429.94,1219.3 1430.53,1221.88 1431.11,1222.76 1431.7,1219.83 1432.29,1217.99 1432.87,1217.56 1433.46,1214.42 1434.04,1214.48 1434.63,1211.68 1435.22,1211.71 1435.8,1212.74 1436.39,1212.92 1436.98,1214.06 1437.56,1214.15 1438.15,1207.86 1438.74,1206.76 1439.32,1206.98 1439.91,1205.8 1440.5,1204.87 1441.08,1204.04 1441.67,1205.55 1442.25,1204.83 1442.84,1206.53 1443.43,1204.21 1444.01,1204.88 1444.6,1201.4 1445.19,1200.82 1445.77,1202.79 1446.36,1200.5 1446.95,1201.2 1447.53,1204.38 1448.12,1208.74 1448.7,1209.04 1449.29,1207.9 1449.88,1208.13 1450.46,1206.83 1451.05,1208.63 1451.64,1208.68 1452.22,1210.45 1452.81,1209.3 1453.4,1209.51 1453.98,1212.18 1454.57,1213.46 1455.16,1214.54 1455.74,1216.89 1456.33,1213.97 1456.91,1211.39 1457.5,1215.24 1458.09,1216.21 1458.67,1216.88 1459.26,1219.18 1459.85,1218.91 1460.43,1221.32 1461.02,1221.89 1461.61,1220 1462.19,1218.31 1462.78,1218.02 1463.37,1216.41 1463.95,1213.32 1464.54,1213.41 1465.12,1215.79 1465.71,1214.04 1466.3,1215.12 1466.88,1213.53 1467.47,1212.09 1468.06,1210.97 1468.64,1210.91 1469.23,1210.83 1469.82,1212.05 1470.4,1211.85 1470.99,1211.92 1471.57,1209.12 1472.16,1208.07 1472.75,1208.41 1473.33,1208.78 1473.92,1209.3 1474.51,1208.14 1475.09,1205.94 1475.68,1204.92 1476.27,1205.03 1476.85,1205.36 1477.44,1204.38 1478.03,1203.47 1478.61,1203.77 1479.2,1204.02 1479.78,1208.26 1480.37,1210.02 1480.96,1208.98 1481.54,1206.34 1482.13,1208.03 1482.72,1208.48 1483.3,1209.83 1483.89,1211.56 1484.48,1212.93 1485.06,1212.8 1485.65,1212.83 1486.24,1212.94 1486.82,1209.15 1487.41,1214.46 1487.99,1214.42 1488.58,1215.47 1489.17,1216.36 1489.75,1216.12 1490.34,1213.52 1490.93,1213.59 1491.51,1213.45 1492.1,1213.36 1492.69,1212.12 1493.27,1212.04 1493.86,1214.46 1494.45,1214.43 1495.03,1211.83 1495.62,1213.06 1496.2,1214.19 1496.79,1215.36 1497.38,1214.12 1497.96,1212.87 1498.55,1212.9 1499.14,1214.2 1499.72,1212.91 1500.31,1212.86 1500.9,1215.23 1501.48,1214.95 1502.07,1216.07 1502.65,1214.37 1503.24,1217.84 1503.83,1217.48 1504.41,1215.91 1505,1214.39 1505.59,1211.61 1506.17,1208.83 1506.76,1209.05 1507.35,1207.96 1507.93,1208.25 1508.52,1208.39 1509.11,1208.74 1509.69,1211.45 1510.28,1211.88 1510.86,1211.98 1511.45,1214.8 1512.04,1214.62 1512.62,1213.3 1513.21,1211.9 1513.8,1214.4 1514.38,1214.13 1514.97,1213.96 1515.56,1209.95 1516.14,1210.06 1516.73,1210.29 1517.32,1206.51 1517.9,1206.9 1518.49,1207.2 1519.07,1205.23 1519.66,1206.76 1520.25,1207.91 1520.83,1206.84 1521.42,1206.83 1522.01,1208.37 1522.59,1208.38 1523.18,1208.32 1523.77,1209.79 1524.35,1208.7 1524.94,1208.88 1525.52,1209.09 1526.11,1205.22 1526.7,1204.12 1527.28,1205.67 1527.87,1205.8 1528.46,1204.58 1529.04,1205.95 1529.63,1206.22 1530.22,1204.07 1530.8,1206.09 1531.39,1206.3 1531.98,1206.5 1532.56,1209.39 1533.15,1207.04 1533.73,1207.38 1534.32,1207.8 1534.91,1208.97 1535.49,1208.95 1536.08,1211.58 1536.67,1211.58 1537.25,1210.25 1537.84,1210.2 1538.43,1209.13 1539.01,1208.13 1539.6,1211.04 1540.19,1212.31 1540.77,1214.88 1541.36,1214.7 1541.94,1215.91 1542.53,1216.97 1543.12,1218.29 1543.7,1220.74 1544.29,1219.02 1544.88,1218.54 1545.46,1216.79 1546.05,1217.57 1546.64,1217.42 1547.22,1217.07 1547.81,1215.35 1548.4,1217.6 1548.98,1216.99 1549.57,1220.36 1550.15,1217.52 1550.74,1218.56 1551.33,1216.92 1551.91,1221.71 1552.5,1221.05 1553.09,1219.07 1553.67,1218.75 1554.26,1217.16 1554.85,1215.73 1555.43,1215.51 1556.02,1216.93 1556.6,1214.14 1557.19,1213.07 1557.78,1210.77 1558.36,1210.7 1558.95,1214.14 1559.54,1213.7 1560.12,1213.5 1560.71,1210.83 1561.3,1212.03 1561.88,1214.49 1562.47,1213.13 1563.06,1214.54 1563.64,1214.63 1564.23,1214.38 1564.81,1215.45 1565.4,1213.88 1565.99,1211.16 1566.57,1210.07 1567.16,1209.86 1567.75,1208.2 1568.33,1206.93 1568.92,1207.32 1569.51,1209.02 1570.09,1209.24 1570.68,1212.15 1571.27,1211.91 1571.85,1211.79 1572.44,1214.18 1573.02,1214.06 1573.61,1214.02 1574.2,1213.84 1574.78,1213.99 1575.37,1213.7 1575.96,1210.9 1576.54,1213.21 1577.13,1209.13 1577.72,1206.46 1578.3,1205.6 1578.89,1205.87 1579.47,1207.57 1580.06,1208.09 1580.65,1209.42 1581.23,1209.39 1581.82,1207.08 1582.41,1207.25 1582.99,1207.54 1583.58,1208.98 1584.17,1207.65 1584.75,1206.76 1585.34,1208.46 1585.93,1208.82 1586.51,1208.98 1587.1,1209.04 1587.68,1208.16 1588.27,1211.1 1588.86,1209.7 1589.44,1209.69 1590.03,1209.89 1590.62,1210.36 1591.2,1209.11 1591.79,1207.82 1592.38,1208.19 1592.96,1211.06 1593.55,1208.49 1594.14,1208.81 1594.72,1210.13 1595.31,1210.36 1595.89,1210.43 1596.48,1210.51 1597.07,1210.65 1597.65,1210.46 1598.24,1210.86 1598.83,1209.67 1599.41,1209.63 1600,1207.07 1600.59,1211.11 1601.17,1212.41 1601.76,1213.72 1602.34,1212.52 1602.93,1212.5 1603.52,1209.88 1604.1,1207.35 1604.69,1204.89 1605.28,1207.89 1605.86,1211.01 1606.45,1212.41 1607.04,1212.59 1607.62,1212.61 1608.21,1212.47 1608.8,1210.02 1609.38,1208.71 1609.97,1210.1 1610.55,1211.45 1611.14,1211.41 1611.73,1209.14 1612.31,1210.41 1612.9,1210.56 1613.49,1211.79 1614.07,1210.85 1614.66,1210.94 1615.25,1209.72 1615.83,1209.84 1616.42,1211.2 1617.01,1211.22 1617.59,1211.41 1618.18,1214.07 1618.76,1212.48 1619.35,1212.4 1619.94,1209.66 1620.52,1207.15 1621.11,1207.1 1621.7,1208.48 1622.28,1208.57 1622.87,1207.71 1623.46,1206.64 1624.04,1206.92 1624.63,1207 1625.22,1205.88 1625.8,1206.13 1626.39,1208.87 1626.97,1211.48 1627.56,1209.99 1628.15,1208.92 1628.73,1209.14 1629.32,1209.38 1629.91,1208.45 1630.49,1209.02 1631.08,1210.44 1631.67,1210.73 1632.25,1210.77 1632.84,1212.04 1633.42,1211.95 1634.01,1214.45 1634.6,1214.24 1635.18,1213.09 1635.77,1212.07 1636.36,1213.25 1636.94,1215.52 1637.53,1216.57 1638.12,1217.71 1638.7,1216.12 1639.29,1216.92 1639.88,1216.71 1640.46,1213.96 1641.05,1216.41 1641.63,1216.24 1642.22,1221.09 1642.81,1223.33 1643.39,1224.22 1643.98,1223.61 1644.57,1221.8 1645.15,1223.81 1645.74,1221.67 1646.33,1221.03 1646.91,1221.59 1647.5,1220.03 1648.09,1218.45 1648.67,1215.49 1649.26,1217.75 1649.84,1214.67 1650.43,1214.18 1651.02,1214.24 1651.6,1215.42 1652.19,1217.73 1652.78,1218.55 1653.36,1214.45 1653.95,1215.69 1654.54,1215.36 1655.12,1214.97 1655.71,1217.39 1656.29,1216.91 1656.88,1217.95 1657.47,1217.61 1658.05,1216.19 1658.64,1215.99 1659.23,1217.01 1659.81,1216.83 1660.4,1218.21 1660.99,1216.48 1661.57,1216.16 1662.16,1213.18 1662.75,1213.26 1663.33,1213.29 1663.92,1212.98 1664.5,1211.46 1665.09,1212.72 1665.68,1215.08 1666.26,1216.05 1666.85,1215.93 1667.44,1213.16 1668.02,1209.39 1668.61,1213.47 1669.2,1214.77 1669.78,1216.15 1670.37,1215.86 1670.96,1214.38 1671.54,1214.25 1672.13,1212.64 1672.71,1208.8 1673.3,1210.33 1673.89,1211.61 1674.47,1211.75 1675.06,1211.63 1675.65,1213.97 1676.23,1211.27 1676.82,1211.61 1677.41,1211.43 1677.99,1211.44 1678.58,1211.71 1679.17,1211.67 1679.75,1210.24 1680.34,1211.49 1680.92,1210.37 1681.51,1209.2 1682.1,1210.46 1682.68,1210.54 1683.27,1209.16 1683.86,1210.44 1684.44,1213.29 1685.03,1213.07 1685.62,1212.95 1686.2,1215.07 1686.79,1214.98 1687.37,1214.82 1687.96,1214.71 1688.55,1213.2 1689.13,1210.4 1689.72,1206.54 1690.31,1207.96 1690.89,1208.22 1691.48,1208.32 1692.07,1208.46 1692.65,1206.27 1693.24,1207.99 1693.83,1209.37 1694.41,1211.15 1695,1211.26 1695.58,1211.42 1696.17,1211.45 1696.76,1211.47 1697.34,1211.65 1697.93,1214.27 1698.52,1215.47 1699.1,1215.13 1699.69,1215.26 1700.28,1213.82 1700.86,1213.98 1701.45,1212.95 1702.04,1212.87 1702.62,1214.02 1703.21,1212.83 1703.79,1212.47 1704.38,1211.21 1704.97,1209.98 1705.55,1207.47 1706.14,1208.89 1706.73,1210.25 1707.31,1214.06 1707.9,1214.03 1708.49,1212.47 1709.07,1212.36 1709.66,1213.6 1710.24,1213.61 1710.83,1218.44 1711.42,1218.05 1712,1219.02 1712.59,1219.13 1713.18,1217.63 1713.76,1218.56 1714.35,1218.29 1714.94,1217.92 1715.52,1217.41 1716.11,1216.97 1716.7,1216.73 1717.28,1216.45 1717.87,1215.11 1718.45,1217.63 1719.04,1219.78 1719.63,1217.98 1720.21,1220.25 1720.8,1221.27 1721.39,1219.57 1721.97,1217.86 1722.56,1220.14 1723.15,1217.11 1723.73,1218.17 1724.32,1219.26 1724.91,1218.5 1725.49,1218.02 1726.08,1213.8 1726.66,1212.62 1727.25,1213.73 1727.84,1213.14 1728.42,1214.17 1729.01,1212.9 1729.6,1211.44 1730.18,1208.84 1730.77,1208.81 1731.36,1207.54 1731.94,1205.14 1732.53,1205.45 1733.11,1203.1 1733.7,1202.34 1734.29,1201.55 1734.87,1202.03 1735.46,1202.58 1736.05,1202.84 1736.63,1207.3 1737.22,1208.7 1737.81,1212.78 1738.39,1214.12 1738.98,1211.45 1739.57,1209.18 1740.15,1208.1 1740.74,1208.29 1741.32,1204.64 1741.91,1201.03 1742.5,1205.76 1743.08,1205.97 1743.67,1206.23 1744.26,1203.97 1744.84,1206.93 1745.43,1209.85 1746.02,1207.33 1746.6,1210.22 1747.19,1207.83 1747.78,1210.7 1748.36,1210.83 1748.95,1211.99 1749.53,1209.53 1750.12,1208.17 1750.71,1207.23 1751.29,1206.03 1751.88,1206.33 1752.47,1207.81 1753.05,1207.88 1753.64,1206.92 1754.23,1208.54 1754.81,1211.52 1755.4,1210.3 1755.99,1215.58 1756.57,1215.24 1757.16,1215.05 1757.74,1214.49 1758.33,1216.7 1758.92,1214.79 1759.5,1211.95 1760.09,1210.6 1760.68,1209.3 1761.26,1209.43 1761.85,1209.73 1762.44,1209.79 1763.02,1210.17 1763.61,1210.34 1764.19,1210.4 1764.78,1213.24 1765.37,1212.13 1765.95,1211.99 1766.54,1212.05 1767.13,1210.68 1767.71,1210.63 1768.3,1210.68 1768.89,1209.43 1769.47,1210.63 1770.06,1213.05 1770.65,1214.4 1771.23,1216.94 1771.82,1216.83 1772.4,1220.18 1772.99,1215.94 1773.58,1213.35 1774.16,1210.69 1774.75,1210.61 1775.34,1213.37 1775.92,1213.38 1776.51,1210.66 1777.1,1213.21 1777.68,1215.7 1778.27,1212.83 1778.86,1211.72 1779.44,1210.68 1780.03,1210.35 1780.61,1214.42 1781.2,1215.29 1781.79,1215.07 1782.37,1213.76 1782.96,1213.46 1783.55,1212.07 1784.13,1209.55 1784.72,1212.12 1785.31,1213.53 1785.89,1214.28 1786.48,1214.33 1787.06,1213.97 1787.65,1216.56 1788.24,1216.27 1788.82,1218.47 1789.41,1216.97 1790,1216.67 1790.58,1215.05 1791.17,1216.4 1791.76,1215.86 1792.34,1215.75 1792.93,1214.35 1793.52,1215.15 1794.1,1213.99 1794.69,1211.44 1795.27,1208.94 1795.86,1211.68 1796.45,1211.73 1797.03,1211.54 1797.62,1209.01 1798.21,1210.49 1798.79,1208.11 1799.38,1205.94 1799.97,1203.75 1800.55,1207.88 1801.14,1207.96 1801.73,1204.05 1802.31,1203.24 1802.9,1204.1 1803.48,1204.36 1804.07,1200.68 1804.66,1201.47 1805.24,1203.35 1805.83,1204.89 1806.42,1202.91 1807,1205.97 1807.59,1208.85 1808.18,1207.72 1808.76,1207.98 1809.35,1208.32 1809.94,1208.67 1810.52,1208.86 1811.11,1203.85 1811.69,1201.77 1812.28,1205.14 1812.87,1205.4 1813.45,1205.67 1814.04,1205.87 1814.63,1207.8 1815.21,1208.18 1815.8,1212.2 1816.39,1212.12 1816.97,1211.08 1817.56,1211.34 1818.14,1210.05 1818.73,1211.52 1819.32,1213.95 1819.9,1215.08 1820.49,1214.74 1821.08,1215.68 1821.66,1215.74 1822.25,1214.54 1822.84,1211.87 1823.42,1213.27 1824.01,1209.32 1824.6,1211.75 1825.18,1210.61 1825.77,1210.91 1826.35,1208.56 1826.94,1207.31 1827.53,1207.55 1828.11,1207.73 1828.7,1208.21 1829.29,1208.51 1829.87,1208.66 1830.46,1208.78 1831.05,1209.03 1831.63,1210.45 1832.22,1209.63 1832.81,1209.93 1833.39,1210.08 1833.98,1210.31 1834.56,1207.76 1835.15,1208.07 1835.74,1207.14 1836.32,1207.4 1836.91,1210.17 1837.5,1207.65 1838.08,1207.81 1838.67,1205.46 1839.26,1207.33 1839.84,1208.97 1840.43,1214.25 1841.01,1218.18 1841.6,1220.4 1842.19,1218.61 1842.77,1215.44 1843.36,1215.4 1843.95,1216.5 1844.53,1218.75 1845.12,1214.62 1845.71,1213.07 1846.29,1214.49 1846.88,1210.4 1847.47,1207.96 1848.05,1206.78 1848.64,1206.84 1849.22,1207.03 1849.81,1209.99 1850.4,1211.17 1850.98,1210.05 1851.57,1211.37 1852.16,1207.78 1852.74,1207.9 1853.33,1208.17 1853.92,1209.53 1854.5,1209.44 1855.09,1209.64 1855.68,1209.75 1856.26,1209.8 1856.85,1212.38 1857.43,1210.73 1858.02,1212.17 1858.61,1210.87 1859.19,1212.09 1859.78,1213.32 1860.37,1214.4 1860.95,1216.84 1861.54,1216.51 1862.13,1215.12 1862.71,1215.06 1863.3,1217.65 1863.88,1216.14 1864.47,1214.92 1865.06,1216.27 1865.64,1216.04 1866.23,1215.8 1866.82,1216.8 1867.4,1216.81 1867.99,1214.1 1868.58,1211.26 1869.16,1210.13 1869.75,1210.3 1870.34,1207.66 1870.92,1210.11 1871.51,1212.65 1872.09,1212.44 1872.68,1214.81 1873.27,1211.92 1873.85,1210.57 1874.44,1210.84 1875.03,1210.98 1875.61,1210.96 1876.2,1209.89 1876.79,1210.02 1877.37,1211.33 1877.96,1208.8 1878.55,1207.77 1879.13,1208.05 1879.72,1208.32 1880.3,1209.93 1880.89,1211.37 1881.48,1210.02 1882.06,1211.21 1882.65,1215 1883.24,1216.28 1883.82,1217.44 1884.41,1215.8 1885,1215.75 1885.58,1214.21 1886.17,1218.18 1886.76,1221.73 1887.34,1221.25 1887.93,1218.33 1888.51,1216.59 1889.1,1215.04 1889.69,1216.08 1890.27,1217.06 1890.86,1218 1891.45,1215.14 1892.03,1217.48 1892.62,1219.82 1893.21,1220.92 1893.79,1219.39 1894.38,1217.83 1894.96,1216.12 1895.55,1214.55 1896.14,1210.52 1896.72,1211.96 1897.31,1213.53 1897.9,1214.45 1898.48,1215.49 1899.07,1216.43 1899.66,1216.04 1900.24,1216.82 1900.83,1219.21 1901.42,1217.64 1902,1214.96 1902.59,1212.22 1903.17,1211.13 1903.76,1212.27 1904.35,1212.29 1904.93,1209.86 1905.52,1207.18 1906.11,1208.53 1906.69,1209.99 1907.28,1211.11 1907.87,1211.15 1908.45,1210.01 1909.04,1211.41 1909.63,1210.35 1910.21,1211.46 1910.8,1211.57 1911.38,1210.1 1911.97,1208.72 1912.56,1211.51 1913.14,1215.44 1913.73,1216.57 1914.32,1218.79 1914.9,1219.63 1915.49,1217.96 1916.08,1216.46 1916.66,1216.3 1917.25,1217.28 1917.83,1219.69 1918.42,1220.63 1919.01,1220.16 1919.59,1217.47 1920.18,1218.49 1920.77,1215.41 1921.35,1212.6 1921.94,1212.56 1922.53,1216.3 1923.11,1217.3 1923.7,1217.22 1924.29,1218.42 1924.87,1217.91 1925.46,1217.55 1926.04,1214.72 1926.63,1211.93 1927.22,1213.25 1927.8,1214.34 1928.39,1214.49 1928.98,1216.72 1929.56,1215.29 1930.15,1211.14 1930.74,1209.86 1931.32,1208.45 1931.91,1209.96 1932.5,1210.18 1933.08,1207.96 1933.67,1208.15 1934.25,1207.09 1934.84,1209.48 1935.43,1209.97 1936.01,1207.31 1936.6,1205.99 1937.19,1212.16 1937.77,1212.44 1938.36,1211.42 1938.95,1212.52 1939.53,1216.15 1940.12,1214.61 1940.71,1215.28 1941.29,1216.23 1941.88,1217.28 1942.46,1212.91 1943.05,1211.33 1943.64,1209.96 1944.22,1211.35 1944.81,1210.06 1945.4,1210.12 1945.98,1210.2 1946.57,1205.35 1947.16,1205.44 1947.74,1204.66 1948.33,1204.99 1948.91,1205.39 1949.5,1203.2 1950.09,1204.81 1950.67,1207.89 1951.26,1207.03 1951.85,1207.27 1952.43,1206.42 1953.02,1207.91 1953.61,1208.36 1954.19,1207.56 1954.78,1210.52 1955.37,1213.11 1955.95,1214.21 1956.54,1213 1957.12,1216.88 1957.71,1215.2 1958.3,1215.12 1958.88,1213.95 1959.47,1214.94 1960.06,1213.26 1960.64,1212.04 1961.23,1213.58 1961.82,1216.22 1962.4,1217.49 1962.99,1219.97 1963.58,1219.64 1964.16,1221.76 1964.75,1221.23 1965.33,1220.54 1965.92,1220.26 1966.51,1218.5 1967.09,1218.32 1967.68,1215.42 1968.27,1215.15 1968.85,1216.25 1969.44,1214.63 1970.03,1215.89 1970.61,1213.17 1971.2,1211.97 1971.78,1210.89 1972.37,1209.39 1972.96,1207.08 1973.54,1207.22 1974.13,1207.43 1974.72,1205.38 1975.3,1205.74 1975.89,1208.64 1976.48,1210.3 1977.06,1211.61 1977.65,1211.62 1978.24,1210.17 1978.82,1209.93 1979.41,1206.23 1979.99,1207.93 1980.58,1209.65 1981.17,1208.71 1981.75,1208.58 1982.34,1210.05 1982.93,1211.42 1983.51,1211.34 1984.1,1208.95 1984.69,1209.12 1985.27,1206.86 1985.86,1208.55 1986.45,1207.37 1987.03,1209.22 1987.62,1208.27 1988.2,1208.66 1988.79,1208.91 1989.38,1206.32 1989.96,1204.22 1990.55,1204.71 1991.14,1202.55 1991.72,1205.44 1992.31,1208.31 1992.9,1210.8 1993.48,1213.11 1994.07,1214.17 1994.65,1215.21 1995.24,1214.98 1995.83,1213.63 1996.41,1209.71 1997,1212.59 1997.59,1216.43 1998.17,1221.29 1998.76,1220.61 1999.35,1220.23 1999.93,1219.9 2000.52,1220.71 2001.11,1220.15 2001.69,1217.3 2002.28,1217.01 2002.86,1217.87 2003.45,1216.38 2004.04,1213.59 2004.62,1213.25 2005.21,1211.86 2005.8,1213.29 2006.38,1210.53 2006.97,1210.6 2007.56,1211.97 2008.14,1214.6 2008.73,1215.82 2009.32,1216.88 2009.9,1219.29 2010.49,1218.95 2011.07,1219.93 2011.66,1218.2 2012.25,1216.45 2012.83,1218.69 2013.42,1218.24 2014.01,1217.88 2014.59,1218.75 2015.18,1217.28 2015.77,1217.13 2016.35,1215.52 2016.94,1216.34 2017.53,1214.91 2018.11,1215.99 2018.7,1214.68 2019.28,1210.82 2019.87,1212.32 2020.46,1213.53 2021.04,1213.36 2021.63,1214.39 2022.22,1212.83 2022.8,1212.73 2023.39,1211.35 2023.98,1209.89 2024.56,1208.96 2025.15,1209.23 2025.73,1206.68 2026.32,1204.16 2026.91,1205.83 2027.49,1207.32 2028.08,1207.6 2028.67,1208.93 2029.25,1210.42 2029.84,1207.75 2030.43,1207.76 2031.01,1208.11 2031.6,1209.71 2032.19,1208.4 2032.77,1209.65 2033.36,1210.01 2033.94,1209.07 2034.53,1212.87 2035.12,1214.07 2035.7,1214.04 2036.29,1212.61 2036.88,1213.98 2037.46,1213.93 2038.05,1213.92 2038.64,1212.4 2039.22,1213.57 2039.81,1213.69 2040.4,1216.35 2040.98,1217.34 2041.57,1216.92 2042.15,1216.39 2042.74,1216.41 2043.33,1216.02 2043.91,1217.3 2044.5,1216.03 2045.09,1215.92 2045.67,1218.05 2046.26,1219.15 2046.85,1218.74 2047.43,1217.24 2048.02,1218.17 2048.6,1217.74 2049.19,1217.53 2049.78,1221.12 2050.36,1224.24 2050.95,1222.38 2051.54,1221.83 2052.12,1219.02 2052.71,1217.29 2053.3,1218.55 2053.88,1218.12 2054.47,1215.29 2055.06,1212.17 2055.64,1212.2 2056.23,1213.13 2056.81,1209.01 2057.4,1207.89 2057.99,1209.65 2058.57,1209.68 2059.16,1208.63 2059.75,1208.67 2060.33,1208.63 2060.92,1207.79 2061.51,1206.42 2062.09,1208.17 2062.68,1209.63 2063.27,1209.9 2063.85,1207.33 2064.44,1207.44 2065.02,1208.68 2065.61,1208.92 2066.2,1206.41 2066.78,1206.48 2067.37,1208.19 2067.96,1208.31 2068.54,1208.52 2069.13,1207.26 2069.72,1203.79 2070.3,1204.3 2070.89,1204.7 2071.48,1207.5 2072.06,1206.29 2072.65,1204.27 2073.23,1202 2073.82,1202.78 2074.41,1201.9 2074.99,1203.73 2075.58,1205.41 2076.17,1205.53 2076.75,1205.81 2077.34,1206.29 2077.93,1206.7 2078.51,1209.59 2079.1,1209.74 2079.68,1209.98 2080.27,1208.85 2080.86,1212.73 2081.44,1210.43 2082.03,1210.46 2082.62,1212.12 2083.2,1210.94 2083.79,1208.41 2084.38,1208.51 2084.96,1208.24 2085.55,1208.26 2086.14,1204.84 2086.72,1206.72 2087.31,1207 2087.89,1206.07 2088.48,1207.6 2089.07,1207.98 2089.65,1210.76 2090.24,1211.02 2090.83,1208.74 2091.41,1209.01 2092,1207.96 2092.59,1208.14 2093.17,1207.32 2093.76,1209.87 2094.35,1210.18 2094.93,1211.84 2095.52,1207.87 2096.1,1205.57 2096.69,1208.17 2097.28,1206.02 2097.86,1206.58 2098.45,1209.33 2099.04,1208.4 2099.62,1209.86 2100.21,1212.85 2100.8,1210.32 2101.38,1210.53 2101.97,1211.63 2102.55,1212.95 2103.14,1210.5 2103.73,1210.29 2104.31,1209.28 2104.9,1209.47 2105.49,1208.18 2106.07,1212.22 2106.66,1212.29 2107.25,1210.09 2107.83,1209.14 2108.42,1206.83 2109.01,1207.07 2109.59,1209.67 2110.18,1207.02 2110.76,1207.2 2111.35,1204.7 2111.94,1205.02 2112.52,1207.97 2113.11,1215.87 2113.7,1215.78 2114.28,1211.91 2114.87,1212.11 2115.46,1212.02 2116.04,1212.13 2116.63,1210.98 2117.22,1212.54 2117.8,1213.81 2118.39,1213.48 2118.97,1209.73 2119.56,1208.7 2120.15,1211.54 2120.73,1210.15 2121.32,1210.19 2121.91,1207.73 2122.49,1210.44 2123.08,1211.96 2123.67,1216.05 2124.25,1214.69 2124.84,1218.3 2125.42,1219.18 2126.01,1217.51 2126.6,1217.21 2127.18,1219.62 2127.77,1219.26 2128.36,1217.82 2128.94,1216.49 2129.53,1216.13 2130.12,1214.74 2130.7,1215.88 2131.29,1216.88 2131.88,1216.76 2132.46,1219.13 2133.05,1220.05 2133.63,1219.59 2134.22,1219.1 2134.81,1218.67 2135.39,1218.49 2135.98,1220.45 2136.57,1218.77 2137.15,1222.19 2137.74,1222.62 2138.33,1222 2138.91,1220.12 2139.5,1220.93 2140.09,1224.4 2140.67,1226.27 2141.26,1224.31 2141.84,1223.48 2142.43,1219.02 2143.02,1219.99 2143.6,1218.35 2144.19,1219.18 2144.78,1216.07 2145.36,1216.81 2145.95,1216.48 2146.54,1216.04 2147.12,1215.52 2147.71,1213.92 2148.3,1213.66 2148.88,1213.45 2149.47,1210.49 2150.05,1211.68 2150.64,1211.74 2151.23,1210.29 2151.81,1208.73 2152.4,1210.12 2152.99,1211.51 2153.57,1213.99 2154.16,1215.27 2154.75,1212.49 2155.33,1212.71 2155.92,1212.57 2156.5,1211.24 2157.09,1208.61 2157.68,1211.41 2158.26,1212.71 \"/>\n<path clip-path=\"url(#clip432)\" d=\"M986.025 1212.54 L986.612 1212.54 L987.198 1212.54 L987.785 1212.54 L988.371 1212.54 L988.957 1212.54 L989.544 1212.54 L990.13 1212.54 L990.717 1212.54 L991.303 1212.54 L991.889 1212.54 L992.476 1212.54 L993.062 1212.54 L993.649 1212.54 L994.235 1212.54 L994.822 1212.54 L995.408 1212.54 L995.994 1212.54 L996.581 1212.54 L997.167 1212.54 L997.754 1212.54 L998.34 1212.54 L998.926 1212.54 L999.513 1212.54 L1000.1 1212.54 L1000.69 1212.54 L1001.27 1212.54 L1001.86 1212.54 L1002.44 1212.54 L1003.03 1212.54 L1003.62 1212.54 L1004.2 1212.54 L1004.79 1212.54 L1005.38 1212.54 L1005.96 1212.54 L1006.55 1212.54 L1007.14 1212.54 L1007.72 1212.54 L1008.31 1212.54 L1008.9 1212.54 L1009.48 1212.54 L1010.07 1212.54 L1010.65 1212.54 L1011.24 1212.54 L1011.83 1212.54 L1012.41 1212.54 L1013 1212.54 L1013.59 1212.54 L1014.17 1212.54 L1014.76 1212.54 L1015.35 1212.54 L1015.93 1212.54 L1016.52 1212.54 L1017.11 1212.54 L1017.69 1212.54 L1018.28 1212.54 L1018.86 1212.54 L1019.45 1212.54 L1020.04 1212.54 L1020.62 1212.54 L1021.21 1212.54 L1021.8 1212.54 L1022.38 1212.54 L1022.97 1212.54 L1023.56 1212.54 L1024.14 1212.54 L1024.73 1212.54 L1025.32 1212.54 L1025.9 1212.54 L1026.49 1212.54 L1027.07 1212.54 L1027.66 1212.54 L1028.25 1212.54 L1028.83 1212.54 L1029.42 1212.54 L1030.01 1212.54 L1030.59 1212.54 L1031.18 1212.54 L1031.77 1212.54 L1032.35 1212.54 L1032.94 1212.54 L1033.52 1212.54 L1034.11 1212.54 L1034.7 1212.54 L1035.28 1212.54 L1035.87 1212.54 L1036.46 1212.54 L1037.04 1212.54 L1037.63 1212.54 L1038.22 1212.54 L1038.8 1212.54 L1039.39 1212.54 L1039.98 1212.54 L1040.56 1212.54 L1041.15 1212.54 L1041.73 1212.54 L1042.32 1212.54 L1042.91 1212.54 L1043.49 1212.54 L1044.08 1212.54 L1044.67 1212.54 L1045.25 1212.54 L1045.84 1212.54 L1046.43 1212.54 L1047.01 1212.54 L1047.6 1212.54 L1048.19 1212.54 L1048.77 1212.54 L1049.36 1212.54 L1049.94 1212.54 L1050.53 1212.54 L1051.12 1212.54 L1051.7 1212.54 L1052.29 1212.54 L1052.88 1212.54 L1053.46 1212.54 L1054.05 1212.54 L1054.64 1212.54 L1055.22 1212.54 L1055.81 1212.54 L1056.39 1212.54 L1056.98 1212.54 L1057.57 1212.54 L1058.15 1212.54 L1058.74 1212.54 L1059.33 1212.54 L1059.91 1212.54 L1060.5 1212.54 L1061.09 1212.54 L1061.67 1212.54 L1062.26 1212.54 L1062.85 1212.54 L1063.43 1212.54 L1064.02 1212.54 L1064.6 1212.54 L1065.19 1212.54 L1065.78 1212.54 L1066.36 1212.54 L1066.95 1212.54 L1067.54 1212.54 L1068.12 1212.54 L1068.71 1212.54 L1069.3 1212.54 L1069.88 1212.54 L1070.47 1212.54 L1071.06 1212.54 L1071.64 1212.54 L1072.23 1212.54 L1072.81 1212.54 L1073.4 1212.54 L1073.99 1212.54 L1074.57 1212.54 L1075.16 1212.54 L1075.75 1212.54 L1076.33 1212.54 L1076.92 1212.54 L1077.51 1212.54 L1078.09 1212.54 L1078.68 1212.54 L1079.26 1212.54 L1079.85 1212.54 L1080.44 1212.54 L1081.02 1212.54 L1081.61 1212.54 L1082.2 1212.54 L1082.78 1212.54 L1083.37 1212.54 L1083.96 1212.54 L1084.54 1212.54 L1085.13 1212.54 L1085.72 1212.54 L1086.3 1212.54 L1086.89 1212.54 L1087.47 1212.54 L1088.06 1212.54 L1088.65 1212.54 L1089.23 1212.54 L1089.82 1212.54 L1090.41 1212.54 L1090.99 1212.54 L1091.58 1212.54 L1092.17 1212.54 L1092.75 1212.54 L1093.34 1212.54 L1093.93 1212.54 L1094.51 1212.54 L1095.1 1212.54 L1095.68 1212.54 L1096.27 1212.54 L1096.86 1212.54 L1097.44 1212.54 L1098.03 1212.54 L1098.62 1212.54 L1099.2 1212.54 L1099.79 1212.54 L1100.38 1212.54 L1100.96 1212.54 L1101.55 1212.54 L1102.14 1212.54 L1102.72 1212.54 L1103.31 1212.54 L1103.89 1212.54 L1104.48 1212.54 L1105.07 1212.54 L1105.65 1212.54 L1106.24 1212.54 L1106.83 1212.54 L1107.41 1212.54 L1108 1212.54 L1108.59 1212.54 L1109.17 1212.54 L1109.76 1212.54 L1110.34 1212.54 L1110.93 1212.54 L1111.52 1212.54 L1112.1 1212.54 L1112.69 1212.54 L1113.28 1212.54 L1113.86 1212.54 L1114.45 1212.54 L1115.04 1212.54 L1115.62 1212.54 L1116.21 1212.54 L1116.8 1212.54 L1117.38 1212.54 L1117.97 1212.54 L1118.55 1212.54 L1119.14 1212.54 L1119.73 1212.54 L1120.31 1212.54 L1120.9 1212.54 L1121.49 1212.54 L1122.07 1212.54 L1122.66 1212.54 L1123.25 1212.54 L1123.83 1212.54 L1124.42 1212.54 L1125.01 1212.54 L1125.59 1212.54 L1126.18 1212.54 L1126.76 1212.54 L1127.35 1212.54 L1127.94 1212.54 L1128.52 1212.54 L1129.11 1212.54 L1129.7 1212.54 L1130.28 1212.54 L1130.87 1212.54 L1131.46 1212.54 L1132.04 1212.54 L1132.63 1212.54 L1133.21 1212.54 L1133.8 1212.54 L1134.39 1212.54 L1134.97 1212.54 L1135.56 1212.54 L1136.15 1212.54 L1136.73 1212.54 L1137.32 1212.54 L1137.91 1212.54 L1138.49 1212.54 L1139.08 1212.54 L1139.67 1212.54 L1140.25 1212.54 L1140.84 1212.54 L1141.42 1212.54 L1142.01 1212.54 L1142.6 1212.54 L1143.18 1212.54 L1143.77 1212.54 L1144.36 1212.54 L1144.94 1212.54 L1145.53 1212.54 L1146.12 1212.54 L1146.7 1212.54 L1147.29 1212.54 L1147.88 1212.54 L1148.46 1212.54 L1149.05 1212.54 L1149.63 1212.54 L1150.22 1212.54 L1150.81 1212.54 L1151.39 1212.54 L1151.98 1212.54 L1152.57 1212.54 L1153.15 1212.54 L1153.74 1212.54 L1154.33 1212.54 L1154.91 1212.54 L1155.5 1212.54 L1156.09 1212.54 L1156.67 1212.54 L1157.26 1212.54 L1157.84 1212.54 L1158.43 1212.54 L1159.02 1212.54 L1159.6 1212.54 L1160.19 1212.54 L1160.78 1212.54 L1161.36 1212.54 L1161.95 1212.54 L1162.54 1212.54 L1163.12 1212.54 L1163.71 1212.54 L1164.29 1212.54 L1164.88 1212.54 L1165.47 1212.54 L1166.05 1212.54 L1166.64 1212.54 L1167.23 1212.54 L1167.81 1212.54 L1168.4 1212.54 L1168.99 1212.54 L1169.57 1212.54 L1170.16 1212.54 L1170.75 1212.54 L1171.33 1212.54 L1171.92 1212.54 L1172.5 1212.54 L1173.09 1212.54 L1173.68 1212.54 L1174.26 1212.54 L1174.85 1212.54 L1175.44 1212.54 L1176.02 1212.54 L1176.61 1212.54 L1177.2 1212.54 L1177.78 1212.54 L1178.37 1212.54 L1178.96 1212.54 L1179.54 1212.54 L1180.13 1212.54 L1180.71 1212.54 L1181.3 1212.54 L1181.89 1212.54 L1182.47 1212.54 L1183.06 1212.54 L1183.65 1212.54 L1184.23 1212.54 L1184.82 1212.54 L1185.41 1212.54 L1185.99 1212.54 L1186.58 1212.54 L1187.16 1212.54 L1187.75 1212.54 L1188.34 1212.54 L1188.92 1212.54 L1189.51 1212.54 L1190.1 1212.54 L1190.68 1212.54 L1191.27 1212.54 L1191.86 1212.54 L1192.44 1212.54 L1193.03 1212.54 L1193.62 1212.54 L1194.2 1212.54 L1194.79 1212.54 L1195.37 1212.54 L1195.96 1212.54 L1196.55 1212.54 L1197.13 1212.54 L1197.72 1212.54 L1198.31 1212.54 L1198.89 1212.54 L1199.48 1212.54 L1200.07 1212.54 L1200.65 1212.54 L1201.24 1212.54 L1201.83 1212.54 L1202.41 1212.54 L1203 1212.54 L1203.58 1212.54 L1204.17 1212.54 L1204.76 1212.54 L1205.34 1212.54 L1205.93 1212.54 L1206.52 1212.54 L1207.1 1212.54 L1207.69 1212.54 L1208.28 1212.54 L1208.86 1212.54 L1209.45 1212.54 L1210.03 1212.54 L1210.62 1212.54 L1211.21 1212.54 L1211.79 1212.54 L1212.38 1212.54 L1212.97 1212.54 L1213.55 1212.54 L1214.14 1212.54 L1214.73 1212.54 L1215.31 1212.54 L1215.9 1212.54 L1216.49 1212.54 L1217.07 1212.54 L1217.66 1212.54 L1218.24 1212.54 L1218.83 1212.54 L1219.42 1212.54 L1220 1212.54 L1220.59 1212.54 L1221.18 1212.54 L1221.76 1212.54 L1222.35 1212.54 L1222.94 1212.54 L1223.52 1212.54 L1224.11 1212.54 L1224.7 1212.54 L1225.28 1212.54 L1225.87 1212.54 L1226.45 1212.54 L1227.04 1212.54 L1227.63 1212.54 L1228.21 1212.54 L1228.8 1212.54 L1229.39 1212.54 L1229.97 1212.54 L1230.56 1212.54 L1231.15 1212.54 L1231.73 1212.54 L1232.32 1212.54 L1232.91 1212.54 L1233.49 1212.54 L1234.08 1212.54 L1234.66 1212.54 L1235.25 1212.54 L1235.84 1212.54 L1236.42 1212.54 L1237.01 1212.54 L1237.6 1212.54 L1238.18 1212.54 L1238.77 1212.54 L1239.36 1212.54 L1239.94 1212.54 L1240.53 1212.54 L1241.11 1212.54 L1241.7 1212.54 L1242.29 1212.54 L1242.87 1212.54 L1243.46 1212.54 L1244.05 1212.54 L1244.63 1212.54 L1245.22 1212.54 L1245.81 1212.54 L1246.39 1212.54 L1246.98 1212.54 L1247.57 1212.54 L1248.15 1212.54 L1248.74 1212.54 L1249.32 1212.54 L1249.91 1212.54 L1250.5 1212.54 L1251.08 1212.54 L1251.67 1212.54 L1252.26 1212.54 L1252.84 1212.54 L1253.43 1212.54 L1254.02 1212.54 L1254.6 1212.54 L1255.19 1212.54 L1255.78 1212.54 L1256.36 1212.54 L1256.95 1212.54 L1257.53 1212.54 L1258.12 1212.54 L1258.71 1212.54 L1259.29 1212.54 L1259.88 1212.54 L1260.47 1212.54 L1261.05 1212.54 L1261.64 1212.54 L1262.23 1212.54 L1262.81 1212.54 L1263.4 1212.54 L1263.98 1212.54 L1264.57 1212.54 L1265.16 1212.54 L1265.74 1212.54 L1266.33 1212.54 L1266.92 1212.54 L1267.5 1212.54 L1268.09 1212.54 L1268.68 1212.54 L1269.26 1212.54 L1269.85 1212.54 L1270.44 1212.54 L1271.02 1212.54 L1271.61 1212.54 L1272.19 1212.54 L1272.78 1212.54 L1273.37 1212.54 L1273.95 1212.54 L1274.54 1212.54 L1275.13 1212.54 L1275.71 1212.54 L1276.3 1212.54 L1276.89 1212.54 L1277.47 1212.54 L1278.06 1212.54 L1278.65 1212.54 L1279.23 1212.54 L1279.82 1212.54 L1280.4 1212.54 L1280.99 1212.54 L1281.58 1212.54 L1282.16 1212.54 L1282.75 1212.54 L1283.34 1212.54 L1283.92 1212.54 L1284.51 1212.54 L1285.1 1212.54 L1285.68 1212.54 L1286.27 1212.54 L1286.86 1212.54 L1287.44 1212.54 L1288.03 1212.54 L1288.61 1212.54 L1289.2 1212.54 L1289.79 1212.54 L1290.37 1212.54 L1290.96 1212.54 L1291.55 1212.54 L1292.13 1212.54 L1292.72 1212.54 L1293.31 1212.54 L1293.89 1212.54 L1294.48 1212.54 L1295.06 1212.54 L1295.65 1212.54 L1296.24 1212.54 L1296.82 1212.54 L1297.41 1212.54 L1298 1212.54 L1298.58 1212.54 L1299.17 1212.54 L1299.76 1212.54 L1300.34 1212.54 L1300.93 1212.54 L1301.52 1212.54 L1302.1 1212.54 L1302.69 1212.54 L1303.27 1212.54 L1303.86 1212.54 L1304.45 1212.54 L1305.03 1212.54 L1305.62 1212.54 L1306.21 1212.54 L1306.79 1212.54 L1307.38 1212.54 L1307.97 1212.54 L1308.55 1212.54 L1309.14 1212.54 L1309.73 1212.54 L1310.31 1212.54 L1310.9 1212.54 L1311.48 1212.54 L1312.07 1212.54 L1312.66 1212.54 L1313.24 1212.54 L1313.83 1212.54 L1314.42 1212.54 L1315 1212.54 L1315.59 1212.54 L1316.18 1212.54 L1316.76 1212.54 L1317.35 1212.54 L1317.93 1212.54 L1318.52 1212.54 L1319.11 1212.54 L1319.69 1212.54 L1320.28 1212.54 L1320.87 1212.54 L1321.45 1212.54 L1322.04 1212.54 L1322.63 1212.54 L1323.21 1212.54 L1323.8 1212.54 L1324.39 1212.54 L1324.97 1212.54 L1325.56 1212.54 L1326.14 1212.54 L1326.73 1212.54 L1327.32 1212.54 L1327.9 1212.54 L1328.49 1212.54 L1329.08 1212.54 L1329.66 1212.54 L1330.25 1212.54 L1330.84 1212.54 L1331.42 1212.54 L1332.01 1212.54 L1332.6 1212.54 L1333.18 1212.54 L1333.77 1212.54 L1334.35 1212.54 L1334.94 1212.54 L1335.53 1212.54 L1336.11 1212.54 L1336.7 1212.54 L1337.29 1212.54 L1337.87 1212.54 L1338.46 1212.54 L1339.05 1212.54 L1339.63 1212.54 L1340.22 1212.54 L1340.8 1212.54 L1341.39 1212.54 L1341.98 1212.54 L1342.56 1212.54 L1343.15 1212.54 L1343.74 1212.54 L1344.32 1212.54 L1344.91 1212.54 L1345.5 1212.54 L1346.08 1212.54 L1346.67 1212.54 L1347.26 1212.54 L1347.84 1212.54 L1348.43 1212.54 L1349.01 1212.54 L1349.6 1212.54 L1350.19 1212.54 L1350.77 1212.54 L1351.36 1212.54 L1351.95 1212.54 L1352.53 1212.54 L1353.12 1212.54 L1353.71 1212.54 L1354.29 1212.54 L1354.88 1212.54 L1355.47 1212.54 L1356.05 1212.54 L1356.64 1212.54 L1357.22 1212.54 L1357.81 1212.54 L1358.4 1212.54 L1358.98 1212.54 L1359.57 1212.54 L1360.16 1212.54 L1360.74 1212.54 L1361.33 1212.54 L1361.92 1212.54 L1362.5 1212.54 L1363.09 1212.54 L1363.68 1212.54 L1364.26 1212.54 L1364.85 1212.54 L1365.43 1212.54 L1366.02 1212.54 L1366.61 1212.54 L1367.19 1212.54 L1367.78 1212.54 L1368.37 1212.54 L1368.95 1212.54 L1369.54 1212.54 L1370.13 1212.54 L1370.71 1212.54 L1371.3 1212.54 L1371.88 1212.54 L1372.47 1212.54 L1373.06 1212.54 L1373.64 1212.54 L1374.23 1212.54 L1374.82 1212.54 L1375.4 1212.54 L1375.99 1212.54 L1376.58 1212.54 L1377.16 1212.54 L1377.75 1212.54 L1378.34 1212.54 L1378.92 1212.54 L1379.51 1212.54 L1380.09 1212.54 L1380.68 1212.54 L1381.27 1212.54 L1381.85 1212.54 L1382.44 1212.54 L1383.03 1212.54 L1383.61 1212.54 L1384.2 1212.54 L1384.79 1212.54 L1385.37 1212.54 L1385.96 1212.54 L1386.55 1212.54 L1387.13 1212.54 L1387.72 1212.54 L1388.3 1212.54 L1388.89 1212.54 L1389.48 1212.54 L1390.06 1212.54 L1390.65 1212.54 L1391.24 1212.54 L1391.82 1212.54 L1392.41 1212.54 L1393 1212.54 L1393.58 1212.54 L1394.17 1212.54 L1394.75 1212.54 L1395.34 1212.54 L1395.93 1212.54 L1396.51 1212.54 L1397.1 1212.54 L1397.69 1212.54 L1398.27 1212.54 L1398.86 1212.54 L1399.45 1212.54 L1400.03 1212.54 L1400.62 1212.54 L1401.21 1212.54 L1401.79 1212.54 L1402.38 1212.54 L1402.96 1212.54 L1403.55 1212.54 L1404.14 1212.54 L1404.72 1212.54 L1405.31 1212.54 L1405.9 1212.54 L1406.48 1212.54 L1407.07 1212.54 L1407.66 1212.54 L1408.24 1212.54 L1408.83 1212.54 L1409.42 1212.54 L1410 1212.54 L1410.59 1212.54 L1411.17 1212.54 L1411.76 1212.54 L1412.35 1212.54 L1412.93 1212.54 L1413.52 1212.54 L1414.11 1212.54 L1414.69 1212.54 L1415.28 1212.54 L1415.87 1212.54 L1416.45 1212.54 L1417.04 1212.54 L1417.63 1212.54 L1418.21 1212.54 L1418.8 1212.54 L1419.38 1212.54 L1419.97 1212.54 L1420.56 1212.54 L1421.14 1212.54 L1421.73 1212.54 L1422.32 1212.54 L1422.9 1212.54 L1423.49 1212.54 L1424.08 1212.54 L1424.66 1212.54 L1425.25 1212.54 L1425.83 1212.54 L1426.42 1212.54 L1427.01 1212.54 L1427.59 1212.54 L1428.18 1212.54 L1428.77 1212.54 L1429.35 1212.54 L1429.94 1212.54 L1430.53 1212.54 L1431.11 1212.54 L1431.7 1212.54 L1432.29 1212.54 L1432.87 1212.54 L1433.46 1212.54 L1434.04 1212.54 L1434.63 1212.54 L1435.22 1212.54 L1435.8 1212.54 L1436.39 1212.54 L1436.98 1212.54 L1437.56 1212.54 L1438.15 1212.54 L1438.74 1212.54 L1439.32 1212.54 L1439.91 1212.54 L1440.5 1212.54 L1441.08 1212.54 L1441.67 1212.54 L1442.25 1212.54 L1442.84 1212.54 L1443.43 1212.54 L1444.01 1212.54 L1444.6 1212.54 L1445.19 1212.54 L1445.77 1212.54 L1446.36 1212.54 L1446.95 1212.54 L1447.53 1212.54 L1448.12 1212.54 L1448.7 1212.54 L1449.29 1212.54 L1449.88 1212.54 L1450.46 1212.54 L1451.05 1212.54 L1451.64 1212.54 L1452.22 1212.54 L1452.81 1212.54 L1453.4 1212.54 L1453.98 1212.54 L1454.57 1212.54 L1455.16 1212.54 L1455.74 1212.54 L1456.33 1212.54 L1456.91 1212.54 L1457.5 1212.54 L1458.09 1212.54 L1458.67 1212.54 L1459.26 1212.54 L1459.85 1212.54 L1460.43 1212.54 L1461.02 1212.54 L1461.61 1212.54 L1462.19 1212.54 L1462.78 1212.54 L1463.37 1212.54 L1463.95 1212.54 L1464.54 1212.54 L1465.12 1212.54 L1465.71 1212.54 L1466.3 1212.54 L1466.88 1212.54 L1467.47 1212.54 L1468.06 1212.54 L1468.64 1212.54 L1469.23 1212.54 L1469.82 1212.54 L1470.4 1212.54 L1470.99 1212.54 L1471.57 1212.54 L1472.16 1212.54 L1472.75 1212.54 L1473.33 1212.54 L1473.92 1212.54 L1474.51 1212.54 L1475.09 1212.54 L1475.68 1212.54 L1476.27 1212.54 L1476.85 1212.54 L1477.44 1212.54 L1478.03 1212.54 L1478.61 1212.54 L1479.2 1212.54 L1479.78 1212.54 L1480.37 1212.54 L1480.96 1212.54 L1481.54 1212.54 L1482.13 1212.54 L1482.72 1212.54 L1483.3 1212.54 L1483.89 1212.54 L1484.48 1212.54 L1485.06 1212.54 L1485.65 1212.54 L1486.24 1212.54 L1486.82 1212.54 L1487.41 1212.54 L1487.99 1212.54 L1488.58 1212.54 L1489.17 1212.54 L1489.75 1212.54 L1490.34 1212.54 L1490.93 1212.54 L1491.51 1212.54 L1492.1 1212.54 L1492.69 1212.54 L1493.27 1212.54 L1493.86 1212.54 L1494.45 1212.54 L1495.03 1212.54 L1495.62 1212.54 L1496.2 1212.54 L1496.79 1212.54 L1497.38 1212.54 L1497.96 1212.54 L1498.55 1212.54 L1499.14 1212.54 L1499.72 1212.54 L1500.31 1212.54 L1500.9 1212.54 L1501.48 1212.54 L1502.07 1212.54 L1502.65 1212.54 L1503.24 1212.54 L1503.83 1212.54 L1504.41 1212.54 L1505 1212.54 L1505.59 1212.54 L1506.17 1212.54 L1506.76 1212.54 L1507.35 1212.54 L1507.93 1212.54 L1508.52 1212.54 L1509.11 1212.54 L1509.69 1212.54 L1510.28 1212.54 L1510.86 1212.54 L1511.45 1212.54 L1512.04 1212.54 L1512.62 1212.54 L1513.21 1212.54 L1513.8 1212.54 L1514.38 1212.54 L1514.97 1212.54 L1515.56 1212.54 L1516.14 1212.54 L1516.73 1212.54 L1517.32 1212.54 L1517.9 1212.54 L1518.49 1212.54 L1519.07 1212.54 L1519.66 1212.54 L1520.25 1212.54 L1520.83 1212.54 L1521.42 1212.54 L1522.01 1212.54 L1522.59 1212.54 L1523.18 1212.54 L1523.77 1212.54 L1524.35 1212.54 L1524.94 1212.54 L1525.52 1212.54 L1526.11 1212.54 L1526.7 1212.54 L1527.28 1212.54 L1527.87 1212.54 L1528.46 1212.54 L1529.04 1212.54 L1529.63 1212.54 L1530.22 1212.54 L1530.8 1212.54 L1531.39 1212.54 L1531.98 1212.54 L1532.56 1212.54 L1533.15 1212.54 L1533.73 1212.54 L1534.32 1212.54 L1534.91 1212.54 L1535.49 1212.54 L1536.08 1212.54 L1536.67 1212.54 L1537.25 1212.54 L1537.84 1212.54 L1538.43 1212.54 L1539.01 1212.54 L1539.6 1212.54 L1540.19 1212.54 L1540.77 1212.54 L1541.36 1212.54 L1541.94 1212.54 L1542.53 1212.54 L1543.12 1212.54 L1543.7 1212.54 L1544.29 1212.54 L1544.88 1212.54 L1545.46 1212.54 L1546.05 1212.54 L1546.64 1212.54 L1547.22 1212.54 L1547.81 1212.54 L1548.4 1212.54 L1548.98 1212.54 L1549.57 1212.54 L1550.15 1212.54 L1550.74 1212.54 L1551.33 1212.54 L1551.91 1212.54 L1552.5 1212.54 L1553.09 1212.54 L1553.67 1212.54 L1554.26 1212.54 L1554.85 1212.54 L1555.43 1212.54 L1556.02 1212.54 L1556.6 1212.54 L1557.19 1212.54 L1557.78 1212.54 L1558.36 1212.54 L1558.95 1212.54 L1559.54 1212.54 L1560.12 1212.54 L1560.71 1212.54 L1561.3 1212.54 L1561.88 1212.54 L1562.47 1212.54 L1563.06 1212.54 L1563.64 1212.54 L1564.23 1212.54 L1564.81 1212.54 L1565.4 1212.54 L1565.99 1212.54 L1566.57 1212.54 L1567.16 1212.54 L1567.75 1212.54 L1568.33 1212.54 L1568.92 1212.54 L1569.51 1212.54 L1570.09 1212.54 L1570.68 1212.54 L1571.27 1212.54 L1571.85 1212.54 L1572.44 1212.54 L1573.02 1212.54 L1573.61 1212.54 L1574.2 1212.54 L1574.78 1212.54 L1575.37 1212.54 L1575.96 1212.54 L1576.54 1212.54 L1577.13 1212.54 L1577.72 1212.54 L1578.3 1212.54 L1578.89 1212.54 L1579.47 1212.54 L1580.06 1212.54 L1580.65 1212.54 L1581.23 1212.54 L1581.82 1212.54 L1582.41 1212.54 L1582.99 1212.54 L1583.58 1212.54 L1584.17 1212.54 L1584.75 1212.54 L1585.34 1212.54 L1585.93 1212.54 L1586.51 1212.54 L1587.1 1212.54 L1587.68 1212.54 L1588.27 1212.54 L1588.86 1212.54 L1589.44 1212.54 L1590.03 1212.54 L1590.62 1212.54 L1591.2 1212.54 L1591.79 1212.54 L1592.38 1212.54 L1592.96 1212.54 L1593.55 1212.54 L1594.14 1212.54 L1594.72 1212.54 L1595.31 1212.54 L1595.89 1212.54 L1596.48 1212.54 L1597.07 1212.54 L1597.65 1212.54 L1598.24 1212.54 L1598.83 1212.54 L1599.41 1212.54 L1600 1212.54 L1600.59 1212.54 L1601.17 1212.54 L1601.76 1212.54 L1602.34 1212.54 L1602.93 1212.54 L1603.52 1212.54 L1604.1 1212.54 L1604.69 1212.54 L1605.28 1212.54 L1605.86 1212.54 L1606.45 1212.54 L1607.04 1212.54 L1607.62 1212.54 L1608.21 1212.54 L1608.8 1212.54 L1609.38 1212.54 L1609.97 1212.54 L1610.55 1212.54 L1611.14 1212.54 L1611.73 1212.54 L1612.31 1212.54 L1612.9 1212.54 L1613.49 1212.54 L1614.07 1212.54 L1614.66 1212.54 L1615.25 1212.54 L1615.83 1212.54 L1616.42 1212.54 L1617.01 1212.54 L1617.59 1212.54 L1618.18 1212.54 L1618.76 1212.54 L1619.35 1212.54 L1619.94 1212.54 L1620.52 1212.54 L1621.11 1212.54 L1621.7 1212.54 L1622.28 1212.54 L1622.87 1212.54 L1623.46 1212.54 L1624.04 1212.54 L1624.63 1212.54 L1625.22 1212.54 L1625.8 1212.54 L1626.39 1212.54 L1626.97 1212.54 L1627.56 1212.54 L1628.15 1212.54 L1628.73 1212.54 L1629.32 1212.54 L1629.91 1212.54 L1630.49 1212.54 L1631.08 1212.54 L1631.67 1212.54 L1632.25 1212.54 L1632.84 1212.54 L1633.42 1212.54 L1634.01 1212.54 L1634.6 1212.54 L1635.18 1212.54 L1635.77 1212.54 L1636.36 1212.54 L1636.94 1212.54 L1637.53 1212.54 L1638.12 1212.54 L1638.7 1212.54 L1639.29 1212.54 L1639.88 1212.54 L1640.46 1212.54 L1641.05 1212.54 L1641.63 1212.54 L1642.22 1212.54 L1642.81 1212.54 L1643.39 1212.54 L1643.98 1212.54 L1644.57 1212.54 L1645.15 1212.54 L1645.74 1212.54 L1646.33 1212.54 L1646.91 1212.54 L1647.5 1212.54 L1648.09 1212.54 L1648.67 1212.54 L1649.26 1212.54 L1649.84 1212.54 L1650.43 1212.54 L1651.02 1212.54 L1651.6 1212.54 L1652.19 1212.54 L1652.78 1212.54 L1653.36 1212.54 L1653.95 1212.54 L1654.54 1212.54 L1655.12 1212.54 L1655.71 1212.54 L1656.29 1212.54 L1656.88 1212.54 L1657.47 1212.54 L1658.05 1212.54 L1658.64 1212.54 L1659.23 1212.54 L1659.81 1212.54 L1660.4 1212.54 L1660.99 1212.54 L1661.57 1212.54 L1662.16 1212.54 L1662.75 1212.54 L1663.33 1212.54 L1663.92 1212.54 L1664.5 1212.54 L1665.09 1212.54 L1665.68 1212.54 L1666.26 1212.54 L1666.85 1212.54 L1667.44 1212.54 L1668.02 1212.54 L1668.61 1212.54 L1669.2 1212.54 L1669.78 1212.54 L1670.37 1212.54 L1670.96 1212.54 L1671.54 1212.54 L1672.13 1212.54 L1672.71 1212.54 L1673.3 1212.54 L1673.89 1212.54 L1674.47 1212.54 L1675.06 1212.54 L1675.65 1212.54 L1676.23 1212.54 L1676.82 1212.54 L1677.41 1212.54 L1677.99 1212.54 L1678.58 1212.54 L1679.17 1212.54 L1679.75 1212.54 L1680.34 1212.54 L1680.92 1212.54 L1681.51 1212.54 L1682.1 1212.54 L1682.68 1212.54 L1683.27 1212.54 L1683.86 1212.54 L1684.44 1212.54 L1685.03 1212.54 L1685.62 1212.54 L1686.2 1212.54 L1686.79 1212.54 L1687.37 1212.54 L1687.96 1212.54 L1688.55 1212.54 L1689.13 1212.54 L1689.72 1212.54 L1690.31 1212.54 L1690.89 1212.54 L1691.48 1212.54 L1692.07 1212.54 L1692.65 1212.54 L1693.24 1212.54 L1693.83 1212.54 L1694.41 1212.54 L1695 1212.54 L1695.58 1212.54 L1696.17 1212.54 L1696.76 1212.54 L1697.34 1212.54 L1697.93 1212.54 L1698.52 1212.54 L1699.1 1212.54 L1699.69 1212.54 L1700.28 1212.54 L1700.86 1212.54 L1701.45 1212.54 L1702.04 1212.54 L1702.62 1212.54 L1703.21 1212.54 L1703.79 1212.54 L1704.38 1212.54 L1704.97 1212.54 L1705.55 1212.54 L1706.14 1212.54 L1706.73 1212.54 L1707.31 1212.54 L1707.9 1212.54 L1708.49 1212.54 L1709.07 1212.54 L1709.66 1212.54 L1710.24 1212.54 L1710.83 1212.54 L1711.42 1212.54 L1712 1212.54 L1712.59 1212.54 L1713.18 1212.54 L1713.76 1212.54 L1714.35 1212.54 L1714.94 1212.54 L1715.52 1212.54 L1716.11 1212.54 L1716.7 1212.54 L1717.28 1212.54 L1717.87 1212.54 L1718.45 1212.54 L1719.04 1212.54 L1719.63 1212.54 L1720.21 1212.54 L1720.8 1212.54 L1721.39 1212.54 L1721.97 1212.54 L1722.56 1212.54 L1723.15 1212.54 L1723.73 1212.54 L1724.32 1212.54 L1724.91 1212.54 L1725.49 1212.54 L1726.08 1212.54 L1726.66 1212.54 L1727.25 1212.54 L1727.84 1212.54 L1728.42 1212.54 L1729.01 1212.54 L1729.6 1212.54 L1730.18 1212.54 L1730.77 1212.54 L1731.36 1212.54 L1731.94 1212.54 L1732.53 1212.54 L1733.11 1212.54 L1733.7 1212.54 L1734.29 1212.54 L1734.87 1212.54 L1735.46 1212.54 L1736.05 1212.54 L1736.63 1212.54 L1737.22 1212.54 L1737.81 1212.54 L1738.39 1212.54 L1738.98 1212.54 L1739.57 1212.54 L1740.15 1212.54 L1740.74 1212.54 L1741.32 1212.54 L1741.91 1212.54 L1742.5 1212.54 L1743.08 1212.54 L1743.67 1212.54 L1744.26 1212.54 L1744.84 1212.54 L1745.43 1212.54 L1746.02 1212.54 L1746.6 1212.54 L1747.19 1212.54 L1747.78 1212.54 L1748.36 1212.54 L1748.95 1212.54 L1749.53 1212.54 L1750.12 1212.54 L1750.71 1212.54 L1751.29 1212.54 L1751.88 1212.54 L1752.47 1212.54 L1753.05 1212.54 L1753.64 1212.54 L1754.23 1212.54 L1754.81 1212.54 L1755.4 1212.54 L1755.99 1212.54 L1756.57 1212.54 L1757.16 1212.54 L1757.74 1212.54 L1758.33 1212.54 L1758.92 1212.54 L1759.5 1212.54 L1760.09 1212.54 L1760.68 1212.54 L1761.26 1212.54 L1761.85 1212.54 L1762.44 1212.54 L1763.02 1212.54 L1763.61 1212.54 L1764.19 1212.54 L1764.78 1212.54 L1765.37 1212.54 L1765.95 1212.54 L1766.54 1212.54 L1767.13 1212.54 L1767.71 1212.54 L1768.3 1212.54 L1768.89 1212.54 L1769.47 1212.54 L1770.06 1212.54 L1770.65 1212.54 L1771.23 1212.54 L1771.82 1212.54 L1772.4 1212.54 L1772.99 1212.54 L1773.58 1212.54 L1774.16 1212.54 L1774.75 1212.54 L1775.34 1212.54 L1775.92 1212.54 L1776.51 1212.54 L1777.1 1212.54 L1777.68 1212.54 L1778.27 1212.54 L1778.86 1212.54 L1779.44 1212.54 L1780.03 1212.54 L1780.61 1212.54 L1781.2 1212.54 L1781.79 1212.54 L1782.37 1212.54 L1782.96 1212.54 L1783.55 1212.54 L1784.13 1212.54 L1784.72 1212.54 L1785.31 1212.54 L1785.89 1212.54 L1786.48 1212.54 L1787.06 1212.54 L1787.65 1212.54 L1788.24 1212.54 L1788.82 1212.54 L1789.41 1212.54 L1790 1212.54 L1790.58 1212.54 L1791.17 1212.54 L1791.76 1212.54 L1792.34 1212.54 L1792.93 1212.54 L1793.52 1212.54 L1794.1 1212.54 L1794.69 1212.54 L1795.27 1212.54 L1795.86 1212.54 L1796.45 1212.54 L1797.03 1212.54 L1797.62 1212.54 L1798.21 1212.54 L1798.79 1212.54 L1799.38 1212.54 L1799.97 1212.54 L1800.55 1212.54 L1801.14 1212.54 L1801.73 1212.54 L1802.31 1212.54 L1802.9 1212.54 L1803.48 1212.54 L1804.07 1212.54 L1804.66 1212.54 L1805.24 1212.54 L1805.83 1212.54 L1806.42 1212.54 L1807 1212.54 L1807.59 1212.54 L1808.18 1212.54 L1808.76 1212.54 L1809.35 1212.54 L1809.94 1212.54 L1810.52 1212.54 L1811.11 1212.54 L1811.69 1212.54 L1812.28 1212.54 L1812.87 1212.54 L1813.45 1212.54 L1814.04 1212.54 L1814.63 1212.54 L1815.21 1212.54 L1815.8 1212.54 L1816.39 1212.54 L1816.97 1212.54 L1817.56 1212.54 L1818.14 1212.54 L1818.73 1212.54 L1819.32 1212.54 L1819.9 1212.54 L1820.49 1212.54 L1821.08 1212.54 L1821.66 1212.54 L1822.25 1212.54 L1822.84 1212.54 L1823.42 1212.54 L1824.01 1212.54 L1824.6 1212.54 L1825.18 1212.54 L1825.77 1212.54 L1826.35 1212.54 L1826.94 1212.54 L1827.53 1212.54 L1828.11 1212.54 L1828.7 1212.54 L1829.29 1212.54 L1829.87 1212.54 L1830.46 1212.54 L1831.05 1212.54 L1831.63 1212.54 L1832.22 1212.54 L1832.81 1212.54 L1833.39 1212.54 L1833.98 1212.54 L1834.56 1212.54 L1835.15 1212.54 L1835.74 1212.54 L1836.32 1212.54 L1836.91 1212.54 L1837.5 1212.54 L1838.08 1212.54 L1838.67 1212.54 L1839.26 1212.54 L1839.84 1212.54 L1840.43 1212.54 L1841.01 1212.54 L1841.6 1212.54 L1842.19 1212.54 L1842.77 1212.54 L1843.36 1212.54 L1843.95 1212.54 L1844.53 1212.54 L1845.12 1212.54 L1845.71 1212.54 L1846.29 1212.54 L1846.88 1212.54 L1847.47 1212.54 L1848.05 1212.54 L1848.64 1212.54 L1849.22 1212.54 L1849.81 1212.54 L1850.4 1212.54 L1850.98 1212.54 L1851.57 1212.54 L1852.16 1212.54 L1852.74 1212.54 L1853.33 1212.54 L1853.92 1212.54 L1854.5 1212.54 L1855.09 1212.54 L1855.68 1212.54 L1856.26 1212.54 L1856.85 1212.54 L1857.43 1212.54 L1858.02 1212.54 L1858.61 1212.54 L1859.19 1212.54 L1859.78 1212.54 L1860.37 1212.54 L1860.95 1212.54 L1861.54 1212.54 L1862.13 1212.54 L1862.71 1212.54 L1863.3 1212.54 L1863.88 1212.54 L1864.47 1212.54 L1865.06 1212.54 L1865.64 1212.54 L1866.23 1212.54 L1866.82 1212.54 L1867.4 1212.54 L1867.99 1212.54 L1868.58 1212.54 L1869.16 1212.54 L1869.75 1212.54 L1870.34 1212.54 L1870.92 1212.54 L1871.51 1212.54 L1872.09 1212.54 L1872.68 1212.54 L1873.27 1212.54 L1873.85 1212.54 L1874.44 1212.54 L1875.03 1212.54 L1875.61 1212.54 L1876.2 1212.54 L1876.79 1212.54 L1877.37 1212.54 L1877.96 1212.54 L1878.55 1212.54 L1879.13 1212.54 L1879.72 1212.54 L1880.3 1212.54 L1880.89 1212.54 L1881.48 1212.54 L1882.06 1212.54 L1882.65 1212.54 L1883.24 1212.54 L1883.82 1212.54 L1884.41 1212.54 L1885 1212.54 L1885.58 1212.54 L1886.17 1212.54 L1886.76 1212.54 L1887.34 1212.54 L1887.93 1212.54 L1888.51 1212.54 L1889.1 1212.54 L1889.69 1212.54 L1890.27 1212.54 L1890.86 1212.54 L1891.45 1212.54 L1892.03 1212.54 L1892.62 1212.54 L1893.21 1212.54 L1893.79 1212.54 L1894.38 1212.54 L1894.96 1212.54 L1895.55 1212.54 L1896.14 1212.54 L1896.72 1212.54 L1897.31 1212.54 L1897.9 1212.54 L1898.48 1212.54 L1899.07 1212.54 L1899.66 1212.54 L1900.24 1212.54 L1900.83 1212.54 L1901.42 1212.54 L1902 1212.54 L1902.59 1212.54 L1903.17 1212.54 L1903.76 1212.54 L1904.35 1212.54 L1904.93 1212.54 L1905.52 1212.54 L1906.11 1212.54 L1906.69 1212.54 L1907.28 1212.54 L1907.87 1212.54 L1908.45 1212.54 L1909.04 1212.54 L1909.63 1212.54 L1910.21 1212.54 L1910.8 1212.54 L1911.38 1212.54 L1911.97 1212.54 L1912.56 1212.54 L1913.14 1212.54 L1913.73 1212.54 L1914.32 1212.54 L1914.9 1212.54 L1915.49 1212.54 L1916.08 1212.54 L1916.66 1212.54 L1917.25 1212.54 L1917.83 1212.54 L1918.42 1212.54 L1919.01 1212.54 L1919.59 1212.54 L1920.18 1212.54 L1920.77 1212.54 L1921.35 1212.54 L1921.94 1212.54 L1922.53 1212.54 L1923.11 1212.54 L1923.7 1212.54 L1924.29 1212.54 L1924.87 1212.54 L1925.46 1212.54 L1926.04 1212.54 L1926.63 1212.54 L1927.22 1212.54 L1927.8 1212.54 L1928.39 1212.54 L1928.98 1212.54 L1929.56 1212.54 L1930.15 1212.54 L1930.74 1212.54 L1931.32 1212.54 L1931.91 1212.54 L1932.5 1212.54 L1933.08 1212.54 L1933.67 1212.54 L1934.25 1212.54 L1934.84 1212.54 L1935.43 1212.54 L1936.01 1212.54 L1936.6 1212.54 L1937.19 1212.54 L1937.77 1212.54 L1938.36 1212.54 L1938.95 1212.54 L1939.53 1212.54 L1940.12 1212.54 L1940.71 1212.54 L1941.29 1212.54 L1941.88 1212.54 L1942.46 1212.54 L1943.05 1212.54 L1943.64 1212.54 L1944.22 1212.54 L1944.81 1212.54 L1945.4 1212.54 L1945.98 1212.54 L1946.57 1212.54 L1947.16 1212.54 L1947.74 1212.54 L1948.33 1212.54 L1948.91 1212.54 L1949.5 1212.54 L1950.09 1212.54 L1950.67 1212.54 L1951.26 1212.54 L1951.85 1212.54 L1952.43 1212.54 L1953.02 1212.54 L1953.61 1212.54 L1954.19 1212.54 L1954.78 1212.54 L1955.37 1212.54 L1955.95 1212.54 L1956.54 1212.54 L1957.12 1212.54 L1957.71 1212.54 L1958.3 1212.54 L1958.88 1212.54 L1959.47 1212.54 L1960.06 1212.54 L1960.64 1212.54 L1961.23 1212.54 L1961.82 1212.54 L1962.4 1212.54 L1962.99 1212.54 L1963.58 1212.54 L1964.16 1212.54 L1964.75 1212.54 L1965.33 1212.54 L1965.92 1212.54 L1966.51 1212.54 L1967.09 1212.54 L1967.68 1212.54 L1968.27 1212.54 L1968.85 1212.54 L1969.44 1212.54 L1970.03 1212.54 L1970.61 1212.54 L1971.2 1212.54 L1971.78 1212.54 L1972.37 1212.54 L1972.96 1212.54 L1973.54 1212.54 L1974.13 1212.54 L1974.72 1212.54 L1975.3 1212.54 L1975.89 1212.54 L1976.48 1212.54 L1977.06 1212.54 L1977.65 1212.54 L1978.24 1212.54 L1978.82 1212.54 L1979.41 1212.54 L1979.99 1212.54 L1980.58 1212.54 L1981.17 1212.54 L1981.75 1212.54 L1982.34 1212.54 L1982.93 1212.54 L1983.51 1212.54 L1984.1 1212.54 L1984.69 1212.54 L1985.27 1212.54 L1985.86 1212.54 L1986.45 1212.54 L1987.03 1212.54 L1987.62 1212.54 L1988.2 1212.54 L1988.79 1212.54 L1989.38 1212.54 L1989.96 1212.54 L1990.55 1212.54 L1991.14 1212.54 L1991.72 1212.54 L1992.31 1212.54 L1992.9 1212.54 L1993.48 1212.54 L1994.07 1212.54 L1994.65 1212.54 L1995.24 1212.54 L1995.83 1212.54 L1996.41 1212.54 L1997 1212.54 L1997.59 1212.54 L1998.17 1212.54 L1998.76 1212.54 L1999.35 1212.54 L1999.93 1212.54 L2000.52 1212.54 L2001.11 1212.54 L2001.69 1212.54 L2002.28 1212.54 L2002.86 1212.54 L2003.45 1212.54 L2004.04 1212.54 L2004.62 1212.54 L2005.21 1212.54 L2005.8 1212.54 L2006.38 1212.54 L2006.97 1212.54 L2007.56 1212.54 L2008.14 1212.54 L2008.73 1212.54 L2009.32 1212.54 L2009.9 1212.54 L2010.49 1212.54 L2011.07 1212.54 L2011.66 1212.54 L2012.25 1212.54 L2012.83 1212.54 L2013.42 1212.54 L2014.01 1212.54 L2014.59 1212.54 L2015.18 1212.54 L2015.77 1212.54 L2016.35 1212.54 L2016.94 1212.54 L2017.53 1212.54 L2018.11 1212.54 L2018.7 1212.54 L2019.28 1212.54 L2019.87 1212.54 L2020.46 1212.54 L2021.04 1212.54 L2021.63 1212.54 L2022.22 1212.54 L2022.8 1212.54 L2023.39 1212.54 L2023.98 1212.54 L2024.56 1212.54 L2025.15 1212.54 L2025.73 1212.54 L2026.32 1212.54 L2026.91 1212.54 L2027.49 1212.54 L2028.08 1212.54 L2028.67 1212.54 L2029.25 1212.54 L2029.84 1212.54 L2030.43 1212.54 L2031.01 1212.54 L2031.6 1212.54 L2032.19 1212.54 L2032.77 1212.54 L2033.36 1212.54 L2033.94 1212.54 L2034.53 1212.54 L2035.12 1212.54 L2035.7 1212.54 L2036.29 1212.54 L2036.88 1212.54 L2037.46 1212.54 L2038.05 1212.54 L2038.64 1212.54 L2039.22 1212.54 L2039.81 1212.54 L2040.4 1212.54 L2040.98 1212.54 L2041.57 1212.54 L2042.15 1212.54 L2042.74 1212.54 L2043.33 1212.54 L2043.91 1212.54 L2044.5 1212.54 L2045.09 1212.54 L2045.67 1212.54 L2046.26 1212.54 L2046.85 1212.54 L2047.43 1212.54 L2048.02 1212.54 L2048.6 1212.54 L2049.19 1212.54 L2049.78 1212.54 L2050.36 1212.54 L2050.95 1212.54 L2051.54 1212.54 L2052.12 1212.54 L2052.71 1212.54 L2053.3 1212.54 L2053.88 1212.54 L2054.47 1212.54 L2055.06 1212.54 L2055.64 1212.54 L2056.23 1212.54 L2056.81 1212.54 L2057.4 1212.54 L2057.99 1212.54 L2058.57 1212.54 L2059.16 1212.54 L2059.75 1212.54 L2060.33 1212.54 L2060.92 1212.54 L2061.51 1212.54 L2062.09 1212.54 L2062.68 1212.54 L2063.27 1212.54 L2063.85 1212.54 L2064.44 1212.54 L2065.02 1212.54 L2065.61 1212.54 L2066.2 1212.54 L2066.78 1212.54 L2067.37 1212.54 L2067.96 1212.54 L2068.54 1212.54 L2069.13 1212.54 L2069.72 1212.54 L2070.3 1212.54 L2070.89 1212.54 L2071.48 1212.54 L2072.06 1212.54 L2072.65 1212.54 L2073.23 1212.54 L2073.82 1212.54 L2074.41 1212.54 L2074.99 1212.54 L2075.58 1212.54 L2076.17 1212.54 L2076.75 1212.54 L2077.34 1212.54 L2077.93 1212.54 L2078.51 1212.54 L2079.1 1212.54 L2079.68 1212.54 L2080.27 1212.54 L2080.86 1212.54 L2081.44 1212.54 L2082.03 1212.54 L2082.62 1212.54 L2083.2 1212.54 L2083.79 1212.54 L2084.38 1212.54 L2084.96 1212.54 L2085.55 1212.54 L2086.14 1212.54 L2086.72 1212.54 L2087.31 1212.54 L2087.89 1212.54 L2088.48 1212.54 L2089.07 1212.54 L2089.65 1212.54 L2090.24 1212.54 L2090.83 1212.54 L2091.41 1212.54 L2092 1212.54 L2092.59 1212.54 L2093.17 1212.54 L2093.76 1212.54 L2094.35 1212.54 L2094.93 1212.54 L2095.52 1212.54 L2096.1 1212.54 L2096.69 1212.54 L2097.28 1212.54 L2097.86 1212.54 L2098.45 1212.54 L2099.04 1212.54 L2099.62 1212.54 L2100.21 1212.54 L2100.8 1212.54 L2101.38 1212.54 L2101.97 1212.54 L2102.55 1212.54 L2103.14 1212.54 L2103.73 1212.54 L2104.31 1212.54 L2104.9 1212.54 L2105.49 1212.54 L2106.07 1212.54 L2106.66 1212.54 L2107.25 1212.54 L2107.83 1212.54 L2108.42 1212.54 L2109.01 1212.54 L2109.59 1212.54 L2110.18 1212.54 L2110.76 1212.54 L2111.35 1212.54 L2111.94 1212.54 L2112.52 1212.54 L2113.11 1212.54 L2113.7 1212.54 L2114.28 1212.54 L2114.87 1212.54 L2115.46 1212.54 L2116.04 1212.54 L2116.63 1212.54 L2117.22 1212.54 L2117.8 1212.54 L2118.39 1212.54 L2118.97 1212.54 L2119.56 1212.54 L2120.15 1212.54 L2120.73 1212.54 L2121.32 1212.54 L2121.91 1212.54 L2122.49 1212.54 L2123.08 1212.54 L2123.67 1212.54 L2124.25 1212.54 L2124.84 1212.54 L2125.42 1212.54 L2126.01 1212.54 L2126.6 1212.54 L2127.18 1212.54 L2127.77 1212.54 L2128.36 1212.54 L2128.94 1212.54 L2129.53 1212.54 L2130.12 1212.54 L2130.7 1212.54 L2131.29 1212.54 L2131.88 1212.54 L2132.46 1212.54 L2133.05 1212.54 L2133.63 1212.54 L2134.22 1212.54 L2134.81 1212.54 L2135.39 1212.54 L2135.98 1212.54 L2136.57 1212.54 L2137.15 1212.54 L2137.74 1212.54 L2138.33 1212.54 L2138.91 1212.54 L2139.5 1212.54 L2140.09 1212.54 L2140.67 1212.54 L2141.26 1212.54 L2141.84 1212.54 L2142.43 1212.54 L2143.02 1212.54 L2143.6 1212.54 L2144.19 1212.54 L2144.78 1212.54 L2145.36 1212.54 L2145.95 1212.54 L2146.54 1212.54 L2147.12 1212.54 L2147.71 1212.54 L2148.3 1212.54 L2148.88 1212.54 L2149.47 1212.54 L2150.05 1212.54 L2150.64 1212.54 L2151.23 1212.54 L2151.81 1212.54 L2152.4 1212.54 L2152.99 1212.54 L2153.57 1212.54 L2154.16 1212.54 L2154.75 1212.54 L2155.33 1212.54 L2155.92 1212.54 L2156.5 1212.54 L2157.09 1212.54 L2157.68 1212.54 L2158.26 1212.54 L2158.26 1211.74 L2157.68 1211.74 L2157.09 1211.74 L2156.5 1211.74 L2155.92 1211.74 L2155.33 1211.74 L2154.75 1211.74 L2154.16 1211.74 L2153.57 1211.74 L2152.99 1211.74 L2152.4 1211.74 L2151.81 1211.74 L2151.23 1211.74 L2150.64 1211.74 L2150.05 1211.74 L2149.47 1211.74 L2148.88 1211.74 L2148.3 1211.74 L2147.71 1211.74 L2147.12 1211.74 L2146.54 1211.74 L2145.95 1211.74 L2145.36 1211.74 L2144.78 1211.74 L2144.19 1211.74 L2143.6 1211.74 L2143.02 1211.74 L2142.43 1211.74 L2141.84 1211.74 L2141.26 1211.74 L2140.67 1211.74 L2140.09 1211.74 L2139.5 1211.74 L2138.91 1211.74 L2138.33 1211.74 L2137.74 1211.74 L2137.15 1211.74 L2136.57 1211.74 L2135.98 1211.74 L2135.39 1211.74 L2134.81 1211.74 L2134.22 1211.74 L2133.63 1211.74 L2133.05 1211.74 L2132.46 1211.74 L2131.88 1211.74 L2131.29 1211.74 L2130.7 1211.74 L2130.12 1211.74 L2129.53 1211.74 L2128.94 1211.74 L2128.36 1211.74 L2127.77 1211.74 L2127.18 1211.74 L2126.6 1211.74 L2126.01 1211.74 L2125.42 1211.74 L2124.84 1211.74 L2124.25 1211.74 L2123.67 1211.74 L2123.08 1211.74 L2122.49 1211.74 L2121.91 1211.74 L2121.32 1211.74 L2120.73 1211.74 L2120.15 1211.74 L2119.56 1211.74 L2118.97 1211.74 L2118.39 1211.74 L2117.8 1211.74 L2117.22 1211.74 L2116.63 1211.74 L2116.04 1211.74 L2115.46 1211.74 L2114.87 1211.74 L2114.28 1211.74 L2113.7 1211.74 L2113.11 1211.74 L2112.52 1211.74 L2111.94 1211.74 L2111.35 1211.74 L2110.76 1211.74 L2110.18 1211.74 L2109.59 1211.74 L2109.01 1211.74 L2108.42 1211.74 L2107.83 1211.74 L2107.25 1211.74 L2106.66 1211.74 L2106.07 1211.74 L2105.49 1211.74 L2104.9 1211.74 L2104.31 1211.74 L2103.73 1211.74 L2103.14 1211.74 L2102.55 1211.74 L2101.97 1211.74 L2101.38 1211.74 L2100.8 1211.74 L2100.21 1211.74 L2099.62 1211.74 L2099.04 1211.74 L2098.45 1211.74 L2097.86 1211.74 L2097.28 1211.74 L2096.69 1211.74 L2096.1 1211.74 L2095.52 1211.74 L2094.93 1211.74 L2094.35 1211.74 L2093.76 1211.74 L2093.17 1211.74 L2092.59 1211.74 L2092 1211.74 L2091.41 1211.74 L2090.83 1211.74 L2090.24 1211.74 L2089.65 1211.74 L2089.07 1211.74 L2088.48 1211.74 L2087.89 1211.74 L2087.31 1211.74 L2086.72 1211.74 L2086.14 1211.74 L2085.55 1211.74 L2084.96 1211.74 L2084.38 1211.74 L2083.79 1211.74 L2083.2 1211.74 L2082.62 1211.74 L2082.03 1211.74 L2081.44 1211.74 L2080.86 1211.74 L2080.27 1211.74 L2079.68 1211.74 L2079.1 1211.74 L2078.51 1211.74 L2077.93 1211.74 L2077.34 1211.74 L2076.75 1211.74 L2076.17 1211.74 L2075.58 1211.74 L2074.99 1211.74 L2074.41 1211.74 L2073.82 1211.74 L2073.23 1211.74 L2072.65 1211.74 L2072.06 1211.74 L2071.48 1211.74 L2070.89 1211.74 L2070.3 1211.74 L2069.72 1211.74 L2069.13 1211.74 L2068.54 1211.74 L2067.96 1211.74 L2067.37 1211.74 L2066.78 1211.74 L2066.2 1211.74 L2065.61 1211.74 L2065.02 1211.74 L2064.44 1211.74 L2063.85 1211.74 L2063.27 1211.74 L2062.68 1211.74 L2062.09 1211.74 L2061.51 1211.74 L2060.92 1211.74 L2060.33 1211.74 L2059.75 1211.74 L2059.16 1211.74 L2058.57 1211.74 L2057.99 1211.74 L2057.4 1211.74 L2056.81 1211.74 L2056.23 1211.74 L2055.64 1211.74 L2055.06 1211.74 L2054.47 1211.74 L2053.88 1211.74 L2053.3 1211.74 L2052.71 1211.74 L2052.12 1211.74 L2051.54 1211.74 L2050.95 1211.74 L2050.36 1211.74 L2049.78 1211.74 L2049.19 1211.74 L2048.6 1211.74 L2048.02 1211.74 L2047.43 1211.74 L2046.85 1211.74 L2046.26 1211.74 L2045.67 1211.74 L2045.09 1211.74 L2044.5 1211.74 L2043.91 1211.74 L2043.33 1211.74 L2042.74 1211.74 L2042.15 1211.74 L2041.57 1211.74 L2040.98 1211.74 L2040.4 1211.74 L2039.81 1211.74 L2039.22 1211.74 L2038.64 1211.74 L2038.05 1211.74 L2037.46 1211.74 L2036.88 1211.74 L2036.29 1211.74 L2035.7 1211.74 L2035.12 1211.74 L2034.53 1211.74 L2033.94 1211.74 L2033.36 1211.74 L2032.77 1211.74 L2032.19 1211.74 L2031.6 1211.74 L2031.01 1211.74 L2030.43 1211.74 L2029.84 1211.74 L2029.25 1211.74 L2028.67 1211.74 L2028.08 1211.74 L2027.49 1211.74 L2026.91 1211.74 L2026.32 1211.74 L2025.73 1211.74 L2025.15 1211.74 L2024.56 1211.74 L2023.98 1211.74 L2023.39 1211.74 L2022.8 1211.74 L2022.22 1211.74 L2021.63 1211.74 L2021.04 1211.74 L2020.46 1211.74 L2019.87 1211.74 L2019.28 1211.74 L2018.7 1211.74 L2018.11 1211.74 L2017.53 1211.74 L2016.94 1211.74 L2016.35 1211.74 L2015.77 1211.74 L2015.18 1211.74 L2014.59 1211.74 L2014.01 1211.74 L2013.42 1211.74 L2012.83 1211.74 L2012.25 1211.74 L2011.66 1211.74 L2011.07 1211.74 L2010.49 1211.74 L2009.9 1211.74 L2009.32 1211.74 L2008.73 1211.74 L2008.14 1211.74 L2007.56 1211.74 L2006.97 1211.74 L2006.38 1211.74 L2005.8 1211.74 L2005.21 1211.74 L2004.62 1211.74 L2004.04 1211.74 L2003.45 1211.74 L2002.86 1211.74 L2002.28 1211.74 L2001.69 1211.74 L2001.11 1211.74 L2000.52 1211.74 L1999.93 1211.74 L1999.35 1211.74 L1998.76 1211.74 L1998.17 1211.74 L1997.59 1211.74 L1997 1211.74 L1996.41 1211.74 L1995.83 1211.74 L1995.24 1211.74 L1994.65 1211.74 L1994.07 1211.74 L1993.48 1211.74 L1992.9 1211.74 L1992.31 1211.74 L1991.72 1211.74 L1991.14 1211.74 L1990.55 1211.74 L1989.96 1211.74 L1989.38 1211.74 L1988.79 1211.74 L1988.2 1211.74 L1987.62 1211.74 L1987.03 1211.74 L1986.45 1211.74 L1985.86 1211.74 L1985.27 1211.74 L1984.69 1211.74 L1984.1 1211.74 L1983.51 1211.74 L1982.93 1211.74 L1982.34 1211.74 L1981.75 1211.74 L1981.17 1211.74 L1980.58 1211.74 L1979.99 1211.74 L1979.41 1211.74 L1978.82 1211.74 L1978.24 1211.74 L1977.65 1211.74 L1977.06 1211.74 L1976.48 1211.74 L1975.89 1211.74 L1975.3 1211.74 L1974.72 1211.74 L1974.13 1211.74 L1973.54 1211.74 L1972.96 1211.74 L1972.37 1211.74 L1971.78 1211.74 L1971.2 1211.74 L1970.61 1211.74 L1970.03 1211.74 L1969.44 1211.74 L1968.85 1211.74 L1968.27 1211.74 L1967.68 1211.74 L1967.09 1211.74 L1966.51 1211.74 L1965.92 1211.74 L1965.33 1211.74 L1964.75 1211.74 L1964.16 1211.74 L1963.58 1211.74 L1962.99 1211.74 L1962.4 1211.74 L1961.82 1211.74 L1961.23 1211.74 L1960.64 1211.74 L1960.06 1211.74 L1959.47 1211.74 L1958.88 1211.74 L1958.3 1211.74 L1957.71 1211.74 L1957.12 1211.74 L1956.54 1211.74 L1955.95 1211.74 L1955.37 1211.74 L1954.78 1211.74 L1954.19 1211.74 L1953.61 1211.74 L1953.02 1211.74 L1952.43 1211.74 L1951.85 1211.74 L1951.26 1211.74 L1950.67 1211.74 L1950.09 1211.74 L1949.5 1211.74 L1948.91 1211.74 L1948.33 1211.74 L1947.74 1211.74 L1947.16 1211.74 L1946.57 1211.74 L1945.98 1211.74 L1945.4 1211.74 L1944.81 1211.74 L1944.22 1211.74 L1943.64 1211.74 L1943.05 1211.74 L1942.46 1211.74 L1941.88 1211.74 L1941.29 1211.74 L1940.71 1211.74 L1940.12 1211.74 L1939.53 1211.74 L1938.95 1211.74 L1938.36 1211.74 L1937.77 1211.74 L1937.19 1211.74 L1936.6 1211.74 L1936.01 1211.74 L1935.43 1211.74 L1934.84 1211.74 L1934.25 1211.74 L1933.67 1211.74 L1933.08 1211.74 L1932.5 1211.74 L1931.91 1211.74 L1931.32 1211.74 L1930.74 1211.74 L1930.15 1211.74 L1929.56 1211.74 L1928.98 1211.74 L1928.39 1211.74 L1927.8 1211.74 L1927.22 1211.74 L1926.63 1211.74 L1926.04 1211.74 L1925.46 1211.74 L1924.87 1211.74 L1924.29 1211.74 L1923.7 1211.74 L1923.11 1211.74 L1922.53 1211.74 L1921.94 1211.74 L1921.35 1211.74 L1920.77 1211.74 L1920.18 1211.74 L1919.59 1211.74 L1919.01 1211.74 L1918.42 1211.74 L1917.83 1211.74 L1917.25 1211.74 L1916.66 1211.74 L1916.08 1211.74 L1915.49 1211.74 L1914.9 1211.74 L1914.32 1211.74 L1913.73 1211.74 L1913.14 1211.74 L1912.56 1211.74 L1911.97 1211.74 L1911.38 1211.74 L1910.8 1211.74 L1910.21 1211.74 L1909.63 1211.74 L1909.04 1211.74 L1908.45 1211.74 L1907.87 1211.74 L1907.28 1211.74 L1906.69 1211.74 L1906.11 1211.74 L1905.52 1211.74 L1904.93 1211.74 L1904.35 1211.74 L1903.76 1211.74 L1903.17 1211.74 L1902.59 1211.74 L1902 1211.74 L1901.42 1211.74 L1900.83 1211.74 L1900.24 1211.74 L1899.66 1211.74 L1899.07 1211.74 L1898.48 1211.74 L1897.9 1211.74 L1897.31 1211.74 L1896.72 1211.74 L1896.14 1211.74 L1895.55 1211.74 L1894.96 1211.74 L1894.38 1211.74 L1893.79 1211.74 L1893.21 1211.74 L1892.62 1211.74 L1892.03 1211.74 L1891.45 1211.74 L1890.86 1211.74 L1890.27 1211.74 L1889.69 1211.74 L1889.1 1211.74 L1888.51 1211.74 L1887.93 1211.74 L1887.34 1211.74 L1886.76 1211.74 L1886.17 1211.74 L1885.58 1211.74 L1885 1211.74 L1884.41 1211.74 L1883.82 1211.74 L1883.24 1211.74 L1882.65 1211.74 L1882.06 1211.74 L1881.48 1211.74 L1880.89 1211.74 L1880.3 1211.74 L1879.72 1211.74 L1879.13 1211.74 L1878.55 1211.74 L1877.96 1211.74 L1877.37 1211.74 L1876.79 1211.74 L1876.2 1211.74 L1875.61 1211.74 L1875.03 1211.74 L1874.44 1211.74 L1873.85 1211.74 L1873.27 1211.74 L1872.68 1211.74 L1872.09 1211.74 L1871.51 1211.74 L1870.92 1211.74 L1870.34 1211.74 L1869.75 1211.74 L1869.16 1211.74 L1868.58 1211.74 L1867.99 1211.74 L1867.4 1211.74 L1866.82 1211.74 L1866.23 1211.74 L1865.64 1211.74 L1865.06 1211.74 L1864.47 1211.74 L1863.88 1211.74 L1863.3 1211.74 L1862.71 1211.74 L1862.13 1211.74 L1861.54 1211.74 L1860.95 1211.74 L1860.37 1211.74 L1859.78 1211.74 L1859.19 1211.74 L1858.61 1211.74 L1858.02 1211.74 L1857.43 1211.74 L1856.85 1211.74 L1856.26 1211.74 L1855.68 1211.74 L1855.09 1211.74 L1854.5 1211.74 L1853.92 1211.74 L1853.33 1211.74 L1852.74 1211.74 L1852.16 1211.74 L1851.57 1211.74 L1850.98 1211.74 L1850.4 1211.74 L1849.81 1211.74 L1849.22 1211.74 L1848.64 1211.74 L1848.05 1211.74 L1847.47 1211.74 L1846.88 1211.74 L1846.29 1211.74 L1845.71 1211.74 L1845.12 1211.74 L1844.53 1211.74 L1843.95 1211.74 L1843.36 1211.74 L1842.77 1211.74 L1842.19 1211.74 L1841.6 1211.74 L1841.01 1211.74 L1840.43 1211.74 L1839.84 1211.74 L1839.26 1211.74 L1838.67 1211.74 L1838.08 1211.74 L1837.5 1211.74 L1836.91 1211.74 L1836.32 1211.74 L1835.74 1211.74 L1835.15 1211.74 L1834.56 1211.74 L1833.98 1211.74 L1833.39 1211.74 L1832.81 1211.74 L1832.22 1211.74 L1831.63 1211.74 L1831.05 1211.74 L1830.46 1211.74 L1829.87 1211.74 L1829.29 1211.74 L1828.7 1211.74 L1828.11 1211.74 L1827.53 1211.74 L1826.94 1211.74 L1826.35 1211.74 L1825.77 1211.74 L1825.18 1211.74 L1824.6 1211.74 L1824.01 1211.74 L1823.42 1211.74 L1822.84 1211.74 L1822.25 1211.74 L1821.66 1211.74 L1821.08 1211.74 L1820.49 1211.74 L1819.9 1211.74 L1819.32 1211.74 L1818.73 1211.74 L1818.14 1211.74 L1817.56 1211.74 L1816.97 1211.74 L1816.39 1211.74 L1815.8 1211.74 L1815.21 1211.74 L1814.63 1211.74 L1814.04 1211.74 L1813.45 1211.74 L1812.87 1211.74 L1812.28 1211.74 L1811.69 1211.74 L1811.11 1211.74 L1810.52 1211.74 L1809.94 1211.74 L1809.35 1211.74 L1808.76 1211.74 L1808.18 1211.74 L1807.59 1211.74 L1807 1211.74 L1806.42 1211.74 L1805.83 1211.74 L1805.24 1211.74 L1804.66 1211.74 L1804.07 1211.74 L1803.48 1211.74 L1802.9 1211.74 L1802.31 1211.74 L1801.73 1211.74 L1801.14 1211.74 L1800.55 1211.74 L1799.97 1211.74 L1799.38 1211.74 L1798.79 1211.74 L1798.21 1211.74 L1797.62 1211.74 L1797.03 1211.74 L1796.45 1211.74 L1795.86 1211.74 L1795.27 1211.74 L1794.69 1211.74 L1794.1 1211.74 L1793.52 1211.74 L1792.93 1211.74 L1792.34 1211.74 L1791.76 1211.74 L1791.17 1211.74 L1790.58 1211.74 L1790 1211.74 L1789.41 1211.74 L1788.82 1211.74 L1788.24 1211.74 L1787.65 1211.74 L1787.06 1211.74 L1786.48 1211.74 L1785.89 1211.74 L1785.31 1211.74 L1784.72 1211.74 L1784.13 1211.74 L1783.55 1211.74 L1782.96 1211.74 L1782.37 1211.74 L1781.79 1211.74 L1781.2 1211.74 L1780.61 1211.74 L1780.03 1211.74 L1779.44 1211.74 L1778.86 1211.74 L1778.27 1211.74 L1777.68 1211.74 L1777.1 1211.74 L1776.51 1211.74 L1775.92 1211.74 L1775.34 1211.74 L1774.75 1211.74 L1774.16 1211.74 L1773.58 1211.74 L1772.99 1211.74 L1772.4 1211.74 L1771.82 1211.74 L1771.23 1211.74 L1770.65 1211.74 L1770.06 1211.74 L1769.47 1211.74 L1768.89 1211.74 L1768.3 1211.74 L1767.71 1211.74 L1767.13 1211.74 L1766.54 1211.74 L1765.95 1211.74 L1765.37 1211.74 L1764.78 1211.74 L1764.19 1211.74 L1763.61 1211.74 L1763.02 1211.74 L1762.44 1211.74 L1761.85 1211.74 L1761.26 1211.74 L1760.68 1211.74 L1760.09 1211.74 L1759.5 1211.74 L1758.92 1211.74 L1758.33 1211.74 L1757.74 1211.74 L1757.16 1211.74 L1756.57 1211.74 L1755.99 1211.74 L1755.4 1211.74 L1754.81 1211.74 L1754.23 1211.74 L1753.64 1211.74 L1753.05 1211.74 L1752.47 1211.74 L1751.88 1211.74 L1751.29 1211.74 L1750.71 1211.74 L1750.12 1211.74 L1749.53 1211.74 L1748.95 1211.74 L1748.36 1211.74 L1747.78 1211.74 L1747.19 1211.74 L1746.6 1211.74 L1746.02 1211.74 L1745.43 1211.74 L1744.84 1211.74 L1744.26 1211.74 L1743.67 1211.74 L1743.08 1211.74 L1742.5 1211.74 L1741.91 1211.74 L1741.32 1211.74 L1740.74 1211.74 L1740.15 1211.74 L1739.57 1211.74 L1738.98 1211.74 L1738.39 1211.74 L1737.81 1211.74 L1737.22 1211.74 L1736.63 1211.74 L1736.05 1211.74 L1735.46 1211.74 L1734.87 1211.74 L1734.29 1211.74 L1733.7 1211.74 L1733.11 1211.74 L1732.53 1211.74 L1731.94 1211.74 L1731.36 1211.74 L1730.77 1211.74 L1730.18 1211.74 L1729.6 1211.74 L1729.01 1211.74 L1728.42 1211.74 L1727.84 1211.74 L1727.25 1211.74 L1726.66 1211.74 L1726.08 1211.74 L1725.49 1211.74 L1724.91 1211.74 L1724.32 1211.74 L1723.73 1211.74 L1723.15 1211.74 L1722.56 1211.74 L1721.97 1211.74 L1721.39 1211.74 L1720.8 1211.74 L1720.21 1211.74 L1719.63 1211.74 L1719.04 1211.74 L1718.45 1211.74 L1717.87 1211.74 L1717.28 1211.74 L1716.7 1211.74 L1716.11 1211.74 L1715.52 1211.74 L1714.94 1211.74 L1714.35 1211.74 L1713.76 1211.74 L1713.18 1211.74 L1712.59 1211.74 L1712 1211.74 L1711.42 1211.74 L1710.83 1211.74 L1710.24 1211.74 L1709.66 1211.74 L1709.07 1211.74 L1708.49 1211.74 L1707.9 1211.74 L1707.31 1211.74 L1706.73 1211.74 L1706.14 1211.74 L1705.55 1211.74 L1704.97 1211.74 L1704.38 1211.74 L1703.79 1211.74 L1703.21 1211.74 L1702.62 1211.74 L1702.04 1211.74 L1701.45 1211.74 L1700.86 1211.74 L1700.28 1211.74 L1699.69 1211.74 L1699.1 1211.74 L1698.52 1211.74 L1697.93 1211.74 L1697.34 1211.74 L1696.76 1211.74 L1696.17 1211.74 L1695.58 1211.74 L1695 1211.74 L1694.41 1211.74 L1693.83 1211.74 L1693.24 1211.74 L1692.65 1211.74 L1692.07 1211.74 L1691.48 1211.74 L1690.89 1211.74 L1690.31 1211.74 L1689.72 1211.74 L1689.13 1211.74 L1688.55 1211.74 L1687.96 1211.74 L1687.37 1211.74 L1686.79 1211.74 L1686.2 1211.74 L1685.62 1211.74 L1685.03 1211.74 L1684.44 1211.74 L1683.86 1211.74 L1683.27 1211.74 L1682.68 1211.74 L1682.1 1211.74 L1681.51 1211.74 L1680.92 1211.74 L1680.34 1211.74 L1679.75 1211.74 L1679.17 1211.74 L1678.58 1211.74 L1677.99 1211.74 L1677.41 1211.74 L1676.82 1211.74 L1676.23 1211.74 L1675.65 1211.74 L1675.06 1211.74 L1674.47 1211.74 L1673.89 1211.74 L1673.3 1211.74 L1672.71 1211.74 L1672.13 1211.74 L1671.54 1211.74 L1670.96 1211.74 L1670.37 1211.74 L1669.78 1211.74 L1669.2 1211.74 L1668.61 1211.74 L1668.02 1211.74 L1667.44 1211.74 L1666.85 1211.74 L1666.26 1211.74 L1665.68 1211.74 L1665.09 1211.74 L1664.5 1211.74 L1663.92 1211.74 L1663.33 1211.74 L1662.75 1211.74 L1662.16 1211.74 L1661.57 1211.74 L1660.99 1211.74 L1660.4 1211.74 L1659.81 1211.74 L1659.23 1211.74 L1658.64 1211.74 L1658.05 1211.74 L1657.47 1211.74 L1656.88 1211.74 L1656.29 1211.74 L1655.71 1211.74 L1655.12 1211.74 L1654.54 1211.74 L1653.95 1211.74 L1653.36 1211.74 L1652.78 1211.74 L1652.19 1211.74 L1651.6 1211.74 L1651.02 1211.74 L1650.43 1211.74 L1649.84 1211.74 L1649.26 1211.74 L1648.67 1211.74 L1648.09 1211.74 L1647.5 1211.74 L1646.91 1211.74 L1646.33 1211.74 L1645.74 1211.74 L1645.15 1211.74 L1644.57 1211.74 L1643.98 1211.74 L1643.39 1211.74 L1642.81 1211.74 L1642.22 1211.74 L1641.63 1211.74 L1641.05 1211.74 L1640.46 1211.74 L1639.88 1211.74 L1639.29 1211.74 L1638.7 1211.74 L1638.12 1211.74 L1637.53 1211.74 L1636.94 1211.74 L1636.36 1211.74 L1635.77 1211.74 L1635.18 1211.74 L1634.6 1211.74 L1634.01 1211.74 L1633.42 1211.74 L1632.84 1211.74 L1632.25 1211.74 L1631.67 1211.74 L1631.08 1211.74 L1630.49 1211.74 L1629.91 1211.74 L1629.32 1211.74 L1628.73 1211.74 L1628.15 1211.74 L1627.56 1211.74 L1626.97 1211.74 L1626.39 1211.74 L1625.8 1211.74 L1625.22 1211.74 L1624.63 1211.74 L1624.04 1211.74 L1623.46 1211.74 L1622.87 1211.74 L1622.28 1211.74 L1621.7 1211.74 L1621.11 1211.74 L1620.52 1211.74 L1619.94 1211.74 L1619.35 1211.74 L1618.76 1211.74 L1618.18 1211.74 L1617.59 1211.74 L1617.01 1211.74 L1616.42 1211.74 L1615.83 1211.74 L1615.25 1211.74 L1614.66 1211.74 L1614.07 1211.74 L1613.49 1211.74 L1612.9 1211.74 L1612.31 1211.74 L1611.73 1211.74 L1611.14 1211.74 L1610.55 1211.74 L1609.97 1211.74 L1609.38 1211.74 L1608.8 1211.74 L1608.21 1211.74 L1607.62 1211.74 L1607.04 1211.74 L1606.45 1211.74 L1605.86 1211.74 L1605.28 1211.74 L1604.69 1211.74 L1604.1 1211.74 L1603.52 1211.74 L1602.93 1211.74 L1602.34 1211.74 L1601.76 1211.74 L1601.17 1211.74 L1600.59 1211.74 L1600 1211.74 L1599.41 1211.74 L1598.83 1211.74 L1598.24 1211.74 L1597.65 1211.74 L1597.07 1211.74 L1596.48 1211.74 L1595.89 1211.74 L1595.31 1211.74 L1594.72 1211.74 L1594.14 1211.74 L1593.55 1211.74 L1592.96 1211.74 L1592.38 1211.74 L1591.79 1211.74 L1591.2 1211.74 L1590.62 1211.74 L1590.03 1211.74 L1589.44 1211.74 L1588.86 1211.74 L1588.27 1211.74 L1587.68 1211.74 L1587.1 1211.74 L1586.51 1211.74 L1585.93 1211.74 L1585.34 1211.74 L1584.75 1211.74 L1584.17 1211.74 L1583.58 1211.74 L1582.99 1211.74 L1582.41 1211.74 L1581.82 1211.74 L1581.23 1211.74 L1580.65 1211.74 L1580.06 1211.74 L1579.47 1211.74 L1578.89 1211.74 L1578.3 1211.74 L1577.72 1211.74 L1577.13 1211.74 L1576.54 1211.74 L1575.96 1211.74 L1575.37 1211.74 L1574.78 1211.74 L1574.2 1211.74 L1573.61 1211.74 L1573.02 1211.74 L1572.44 1211.74 L1571.85 1211.74 L1571.27 1211.74 L1570.68 1211.74 L1570.09 1211.74 L1569.51 1211.74 L1568.92 1211.74 L1568.33 1211.74 L1567.75 1211.74 L1567.16 1211.74 L1566.57 1211.74 L1565.99 1211.74 L1565.4 1211.74 L1564.81 1211.74 L1564.23 1211.74 L1563.64 1211.74 L1563.06 1211.74 L1562.47 1211.74 L1561.88 1211.74 L1561.3 1211.74 L1560.71 1211.74 L1560.12 1211.74 L1559.54 1211.74 L1558.95 1211.74 L1558.36 1211.74 L1557.78 1211.74 L1557.19 1211.74 L1556.6 1211.74 L1556.02 1211.74 L1555.43 1211.74 L1554.85 1211.74 L1554.26 1211.74 L1553.67 1211.74 L1553.09 1211.74 L1552.5 1211.74 L1551.91 1211.74 L1551.33 1211.74 L1550.74 1211.74 L1550.15 1211.74 L1549.57 1211.74 L1548.98 1211.74 L1548.4 1211.74 L1547.81 1211.74 L1547.22 1211.74 L1546.64 1211.74 L1546.05 1211.74 L1545.46 1211.74 L1544.88 1211.74 L1544.29 1211.74 L1543.7 1211.74 L1543.12 1211.74 L1542.53 1211.74 L1541.94 1211.74 L1541.36 1211.74 L1540.77 1211.74 L1540.19 1211.74 L1539.6 1211.74 L1539.01 1211.74 L1538.43 1211.74 L1537.84 1211.74 L1537.25 1211.74 L1536.67 1211.74 L1536.08 1211.74 L1535.49 1211.74 L1534.91 1211.74 L1534.32 1211.74 L1533.73 1211.74 L1533.15 1211.74 L1532.56 1211.74 L1531.98 1211.74 L1531.39 1211.74 L1530.8 1211.74 L1530.22 1211.74 L1529.63 1211.74 L1529.04 1211.74 L1528.46 1211.74 L1527.87 1211.74 L1527.28 1211.74 L1526.7 1211.74 L1526.11 1211.74 L1525.52 1211.74 L1524.94 1211.74 L1524.35 1211.74 L1523.77 1211.74 L1523.18 1211.74 L1522.59 1211.74 L1522.01 1211.74 L1521.42 1211.74 L1520.83 1211.74 L1520.25 1211.74 L1519.66 1211.74 L1519.07 1211.74 L1518.49 1211.74 L1517.9 1211.74 L1517.32 1211.74 L1516.73 1211.74 L1516.14 1211.74 L1515.56 1211.74 L1514.97 1211.74 L1514.38 1211.74 L1513.8 1211.74 L1513.21 1211.74 L1512.62 1211.74 L1512.04 1211.74 L1511.45 1211.74 L1510.86 1211.74 L1510.28 1211.74 L1509.69 1211.74 L1509.11 1211.74 L1508.52 1211.74 L1507.93 1211.74 L1507.35 1211.74 L1506.76 1211.74 L1506.17 1211.74 L1505.59 1211.74 L1505 1211.74 L1504.41 1211.74 L1503.83 1211.74 L1503.24 1211.74 L1502.65 1211.74 L1502.07 1211.74 L1501.48 1211.74 L1500.9 1211.74 L1500.31 1211.74 L1499.72 1211.74 L1499.14 1211.74 L1498.55 1211.74 L1497.96 1211.74 L1497.38 1211.74 L1496.79 1211.74 L1496.2 1211.74 L1495.62 1211.74 L1495.03 1211.74 L1494.45 1211.74 L1493.86 1211.74 L1493.27 1211.74 L1492.69 1211.74 L1492.1 1211.74 L1491.51 1211.74 L1490.93 1211.74 L1490.34 1211.74 L1489.75 1211.74 L1489.17 1211.74 L1488.58 1211.74 L1487.99 1211.74 L1487.41 1211.74 L1486.82 1211.74 L1486.24 1211.74 L1485.65 1211.74 L1485.06 1211.74 L1484.48 1211.74 L1483.89 1211.74 L1483.3 1211.74 L1482.72 1211.74 L1482.13 1211.74 L1481.54 1211.74 L1480.96 1211.74 L1480.37 1211.74 L1479.78 1211.74 L1479.2 1211.74 L1478.61 1211.74 L1478.03 1211.74 L1477.44 1211.74 L1476.85 1211.74 L1476.27 1211.74 L1475.68 1211.74 L1475.09 1211.74 L1474.51 1211.74 L1473.92 1211.74 L1473.33 1211.74 L1472.75 1211.74 L1472.16 1211.74 L1471.57 1211.74 L1470.99 1211.74 L1470.4 1211.74 L1469.82 1211.74 L1469.23 1211.74 L1468.64 1211.74 L1468.06 1211.74 L1467.47 1211.74 L1466.88 1211.74 L1466.3 1211.74 L1465.71 1211.74 L1465.12 1211.74 L1464.54 1211.74 L1463.95 1211.74 L1463.37 1211.74 L1462.78 1211.74 L1462.19 1211.74 L1461.61 1211.74 L1461.02 1211.74 L1460.43 1211.74 L1459.85 1211.74 L1459.26 1211.74 L1458.67 1211.74 L1458.09 1211.74 L1457.5 1211.74 L1456.91 1211.74 L1456.33 1211.74 L1455.74 1211.74 L1455.16 1211.74 L1454.57 1211.74 L1453.98 1211.74 L1453.4 1211.74 L1452.81 1211.74 L1452.22 1211.74 L1451.64 1211.74 L1451.05 1211.74 L1450.46 1211.74 L1449.88 1211.74 L1449.29 1211.74 L1448.7 1211.74 L1448.12 1211.74 L1447.53 1211.74 L1446.95 1211.74 L1446.36 1211.74 L1445.77 1211.74 L1445.19 1211.74 L1444.6 1211.74 L1444.01 1211.74 L1443.43 1211.74 L1442.84 1211.74 L1442.25 1211.74 L1441.67 1211.74 L1441.08 1211.74 L1440.5 1211.74 L1439.91 1211.74 L1439.32 1211.74 L1438.74 1211.74 L1438.15 1211.74 L1437.56 1211.74 L1436.98 1211.74 L1436.39 1211.74 L1435.8 1211.74 L1435.22 1211.74 L1434.63 1211.74 L1434.04 1211.74 L1433.46 1211.74 L1432.87 1211.74 L1432.29 1211.74 L1431.7 1211.74 L1431.11 1211.74 L1430.53 1211.74 L1429.94 1211.74 L1429.35 1211.74 L1428.77 1211.74 L1428.18 1211.74 L1427.59 1211.74 L1427.01 1211.74 L1426.42 1211.74 L1425.83 1211.74 L1425.25 1211.74 L1424.66 1211.74 L1424.08 1211.74 L1423.49 1211.74 L1422.9 1211.74 L1422.32 1211.74 L1421.73 1211.74 L1421.14 1211.74 L1420.56 1211.74 L1419.97 1211.74 L1419.38 1211.74 L1418.8 1211.74 L1418.21 1211.74 L1417.63 1211.74 L1417.04 1211.74 L1416.45 1211.74 L1415.87 1211.74 L1415.28 1211.74 L1414.69 1211.74 L1414.11 1211.74 L1413.52 1211.74 L1412.93 1211.74 L1412.35 1211.74 L1411.76 1211.74 L1411.17 1211.74 L1410.59 1211.74 L1410 1211.74 L1409.42 1211.74 L1408.83 1211.74 L1408.24 1211.74 L1407.66 1211.74 L1407.07 1211.74 L1406.48 1211.74 L1405.9 1211.74 L1405.31 1211.74 L1404.72 1211.74 L1404.14 1211.74 L1403.55 1211.74 L1402.96 1211.74 L1402.38 1211.74 L1401.79 1211.74 L1401.21 1211.74 L1400.62 1211.74 L1400.03 1211.74 L1399.45 1211.74 L1398.86 1211.74 L1398.27 1211.74 L1397.69 1211.74 L1397.1 1211.74 L1396.51 1211.74 L1395.93 1211.74 L1395.34 1211.74 L1394.75 1211.74 L1394.17 1211.74 L1393.58 1211.74 L1393 1211.74 L1392.41 1211.74 L1391.82 1211.74 L1391.24 1211.74 L1390.65 1211.74 L1390.06 1211.74 L1389.48 1211.74 L1388.89 1211.74 L1388.3 1211.74 L1387.72 1211.74 L1387.13 1211.74 L1386.55 1211.74 L1385.96 1211.74 L1385.37 1211.74 L1384.79 1211.74 L1384.2 1211.74 L1383.61 1211.74 L1383.03 1211.74 L1382.44 1211.74 L1381.85 1211.74 L1381.27 1211.74 L1380.68 1211.74 L1380.09 1211.74 L1379.51 1211.74 L1378.92 1211.74 L1378.34 1211.74 L1377.75 1211.74 L1377.16 1211.74 L1376.58 1211.74 L1375.99 1211.74 L1375.4 1211.74 L1374.82 1211.74 L1374.23 1211.74 L1373.64 1211.74 L1373.06 1211.74 L1372.47 1211.74 L1371.88 1211.74 L1371.3 1211.74 L1370.71 1211.74 L1370.13 1211.74 L1369.54 1211.74 L1368.95 1211.74 L1368.37 1211.74 L1367.78 1211.74 L1367.19 1211.74 L1366.61 1211.74 L1366.02 1211.74 L1365.43 1211.74 L1364.85 1211.74 L1364.26 1211.74 L1363.68 1211.74 L1363.09 1211.74 L1362.5 1211.74 L1361.92 1211.74 L1361.33 1211.74 L1360.74 1211.74 L1360.16 1211.74 L1359.57 1211.74 L1358.98 1211.74 L1358.4 1211.74 L1357.81 1211.74 L1357.22 1211.74 L1356.64 1211.74 L1356.05 1211.74 L1355.47 1211.74 L1354.88 1211.74 L1354.29 1211.74 L1353.71 1211.74 L1353.12 1211.74 L1352.53 1211.74 L1351.95 1211.74 L1351.36 1211.74 L1350.77 1211.74 L1350.19 1211.74 L1349.6 1211.74 L1349.01 1211.74 L1348.43 1211.74 L1347.84 1211.74 L1347.26 1211.74 L1346.67 1211.74 L1346.08 1211.74 L1345.5 1211.74 L1344.91 1211.74 L1344.32 1211.74 L1343.74 1211.74 L1343.15 1211.74 L1342.56 1211.74 L1341.98 1211.74 L1341.39 1211.74 L1340.8 1211.74 L1340.22 1211.74 L1339.63 1211.74 L1339.05 1211.74 L1338.46 1211.74 L1337.87 1211.74 L1337.29 1211.74 L1336.7 1211.74 L1336.11 1211.74 L1335.53 1211.74 L1334.94 1211.74 L1334.35 1211.74 L1333.77 1211.74 L1333.18 1211.74 L1332.6 1211.74 L1332.01 1211.74 L1331.42 1211.74 L1330.84 1211.74 L1330.25 1211.74 L1329.66 1211.74 L1329.08 1211.74 L1328.49 1211.74 L1327.9 1211.74 L1327.32 1211.74 L1326.73 1211.74 L1326.14 1211.74 L1325.56 1211.74 L1324.97 1211.74 L1324.39 1211.74 L1323.8 1211.74 L1323.21 1211.74 L1322.63 1211.74 L1322.04 1211.74 L1321.45 1211.74 L1320.87 1211.74 L1320.28 1211.74 L1319.69 1211.74 L1319.11 1211.74 L1318.52 1211.74 L1317.93 1211.74 L1317.35 1211.74 L1316.76 1211.74 L1316.18 1211.74 L1315.59 1211.74 L1315 1211.74 L1314.42 1211.74 L1313.83 1211.74 L1313.24 1211.74 L1312.66 1211.74 L1312.07 1211.74 L1311.48 1211.74 L1310.9 1211.74 L1310.31 1211.74 L1309.73 1211.74 L1309.14 1211.74 L1308.55 1211.74 L1307.97 1211.74 L1307.38 1211.74 L1306.79 1211.74 L1306.21 1211.74 L1305.62 1211.74 L1305.03 1211.74 L1304.45 1211.74 L1303.86 1211.74 L1303.27 1211.74 L1302.69 1211.74 L1302.1 1211.74 L1301.52 1211.74 L1300.93 1211.74 L1300.34 1211.74 L1299.76 1211.74 L1299.17 1211.74 L1298.58 1211.74 L1298 1211.74 L1297.41 1211.74 L1296.82 1211.74 L1296.24 1211.74 L1295.65 1211.74 L1295.06 1211.74 L1294.48 1211.74 L1293.89 1211.74 L1293.31 1211.74 L1292.72 1211.74 L1292.13 1211.74 L1291.55 1211.74 L1290.96 1211.74 L1290.37 1211.74 L1289.79 1211.74 L1289.2 1211.74 L1288.61 1211.74 L1288.03 1211.74 L1287.44 1211.74 L1286.86 1211.74 L1286.27 1211.74 L1285.68 1211.74 L1285.1 1211.74 L1284.51 1211.74 L1283.92 1211.74 L1283.34 1211.74 L1282.75 1211.74 L1282.16 1211.74 L1281.58 1211.74 L1280.99 1211.74 L1280.4 1211.74 L1279.82 1211.74 L1279.23 1211.74 L1278.65 1211.74 L1278.06 1211.74 L1277.47 1211.74 L1276.89 1211.74 L1276.3 1211.74 L1275.71 1211.74 L1275.13 1211.74 L1274.54 1211.74 L1273.95 1211.74 L1273.37 1211.74 L1272.78 1211.74 L1272.19 1211.74 L1271.61 1211.74 L1271.02 1211.74 L1270.44 1211.74 L1269.85 1211.74 L1269.26 1211.74 L1268.68 1211.74 L1268.09 1211.74 L1267.5 1211.74 L1266.92 1211.74 L1266.33 1211.74 L1265.74 1211.74 L1265.16 1211.74 L1264.57 1211.74 L1263.98 1211.74 L1263.4 1211.74 L1262.81 1211.74 L1262.23 1211.74 L1261.64 1211.74 L1261.05 1211.74 L1260.47 1211.74 L1259.88 1211.74 L1259.29 1211.74 L1258.71 1211.74 L1258.12 1211.74 L1257.53 1211.74 L1256.95 1211.74 L1256.36 1211.74 L1255.78 1211.74 L1255.19 1211.74 L1254.6 1211.74 L1254.02 1211.74 L1253.43 1211.74 L1252.84 1211.74 L1252.26 1211.74 L1251.67 1211.74 L1251.08 1211.74 L1250.5 1211.74 L1249.91 1211.74 L1249.32 1211.74 L1248.74 1211.74 L1248.15 1211.74 L1247.57 1211.74 L1246.98 1211.74 L1246.39 1211.74 L1245.81 1211.74 L1245.22 1211.74 L1244.63 1211.74 L1244.05 1211.74 L1243.46 1211.74 L1242.87 1211.74 L1242.29 1211.74 L1241.7 1211.74 L1241.11 1211.74 L1240.53 1211.74 L1239.94 1211.74 L1239.36 1211.74 L1238.77 1211.74 L1238.18 1211.74 L1237.6 1211.74 L1237.01 1211.74 L1236.42 1211.74 L1235.84 1211.74 L1235.25 1211.74 L1234.66 1211.74 L1234.08 1211.74 L1233.49 1211.74 L1232.91 1211.74 L1232.32 1211.74 L1231.73 1211.74 L1231.15 1211.74 L1230.56 1211.74 L1229.97 1211.74 L1229.39 1211.74 L1228.8 1211.74 L1228.21 1211.74 L1227.63 1211.74 L1227.04 1211.74 L1226.45 1211.74 L1225.87 1211.74 L1225.28 1211.74 L1224.7 1211.74 L1224.11 1211.74 L1223.52 1211.74 L1222.94 1211.74 L1222.35 1211.74 L1221.76 1211.74 L1221.18 1211.74 L1220.59 1211.74 L1220 1211.74 L1219.42 1211.74 L1218.83 1211.74 L1218.24 1211.74 L1217.66 1211.74 L1217.07 1211.74 L1216.49 1211.74 L1215.9 1211.74 L1215.31 1211.74 L1214.73 1211.74 L1214.14 1211.74 L1213.55 1211.74 L1212.97 1211.74 L1212.38 1211.74 L1211.79 1211.74 L1211.21 1211.74 L1210.62 1211.74 L1210.03 1211.74 L1209.45 1211.74 L1208.86 1211.74 L1208.28 1211.74 L1207.69 1211.74 L1207.1 1211.74 L1206.52 1211.74 L1205.93 1211.74 L1205.34 1211.74 L1204.76 1211.74 L1204.17 1211.74 L1203.58 1211.74 L1203 1211.74 L1202.41 1211.74 L1201.83 1211.74 L1201.24 1211.74 L1200.65 1211.74 L1200.07 1211.74 L1199.48 1211.74 L1198.89 1211.74 L1198.31 1211.74 L1197.72 1211.74 L1197.13 1211.74 L1196.55 1211.74 L1195.96 1211.74 L1195.37 1211.74 L1194.79 1211.74 L1194.2 1211.74 L1193.62 1211.74 L1193.03 1211.74 L1192.44 1211.74 L1191.86 1211.74 L1191.27 1211.74 L1190.68 1211.74 L1190.1 1211.74 L1189.51 1211.74 L1188.92 1211.74 L1188.34 1211.74 L1187.75 1211.74 L1187.16 1211.74 L1186.58 1211.74 L1185.99 1211.74 L1185.41 1211.74 L1184.82 1211.74 L1184.23 1211.74 L1183.65 1211.74 L1183.06 1211.74 L1182.47 1211.74 L1181.89 1211.74 L1181.3 1211.74 L1180.71 1211.74 L1180.13 1211.74 L1179.54 1211.74 L1178.96 1211.74 L1178.37 1211.74 L1177.78 1211.74 L1177.2 1211.74 L1176.61 1211.74 L1176.02 1211.74 L1175.44 1211.74 L1174.85 1211.74 L1174.26 1211.74 L1173.68 1211.74 L1173.09 1211.74 L1172.5 1211.74 L1171.92 1211.74 L1171.33 1211.74 L1170.75 1211.74 L1170.16 1211.74 L1169.57 1211.74 L1168.99 1211.74 L1168.4 1211.74 L1167.81 1211.74 L1167.23 1211.74 L1166.64 1211.74 L1166.05 1211.74 L1165.47 1211.74 L1164.88 1211.74 L1164.29 1211.74 L1163.71 1211.74 L1163.12 1211.74 L1162.54 1211.74 L1161.95 1211.74 L1161.36 1211.74 L1160.78 1211.74 L1160.19 1211.74 L1159.6 1211.74 L1159.02 1211.74 L1158.43 1211.74 L1157.84 1211.74 L1157.26 1211.74 L1156.67 1211.74 L1156.09 1211.74 L1155.5 1211.74 L1154.91 1211.74 L1154.33 1211.74 L1153.74 1211.74 L1153.15 1211.74 L1152.57 1211.74 L1151.98 1211.74 L1151.39 1211.74 L1150.81 1211.74 L1150.22 1211.74 L1149.63 1211.74 L1149.05 1211.74 L1148.46 1211.74 L1147.88 1211.74 L1147.29 1211.74 L1146.7 1211.74 L1146.12 1211.74 L1145.53 1211.74 L1144.94 1211.74 L1144.36 1211.74 L1143.77 1211.74 L1143.18 1211.74 L1142.6 1211.74 L1142.01 1211.74 L1141.42 1211.74 L1140.84 1211.74 L1140.25 1211.74 L1139.67 1211.74 L1139.08 1211.74 L1138.49 1211.74 L1137.91 1211.74 L1137.32 1211.74 L1136.73 1211.74 L1136.15 1211.74 L1135.56 1211.74 L1134.97 1211.74 L1134.39 1211.74 L1133.8 1211.74 L1133.21 1211.74 L1132.63 1211.74 L1132.04 1211.74 L1131.46 1211.74 L1130.87 1211.74 L1130.28 1211.74 L1129.7 1211.74 L1129.11 1211.74 L1128.52 1211.74 L1127.94 1211.74 L1127.35 1211.74 L1126.76 1211.74 L1126.18 1211.74 L1125.59 1211.74 L1125.01 1211.74 L1124.42 1211.74 L1123.83 1211.74 L1123.25 1211.74 L1122.66 1211.74 L1122.07 1211.74 L1121.49 1211.74 L1120.9 1211.74 L1120.31 1211.74 L1119.73 1211.74 L1119.14 1211.74 L1118.55 1211.74 L1117.97 1211.74 L1117.38 1211.74 L1116.8 1211.74 L1116.21 1211.74 L1115.62 1211.74 L1115.04 1211.74 L1114.45 1211.74 L1113.86 1211.74 L1113.28 1211.74 L1112.69 1211.74 L1112.1 1211.74 L1111.52 1211.74 L1110.93 1211.74 L1110.34 1211.74 L1109.76 1211.74 L1109.17 1211.74 L1108.59 1211.74 L1108 1211.74 L1107.41 1211.74 L1106.83 1211.74 L1106.24 1211.74 L1105.65 1211.74 L1105.07 1211.74 L1104.48 1211.74 L1103.89 1211.74 L1103.31 1211.74 L1102.72 1211.74 L1102.14 1211.74 L1101.55 1211.74 L1100.96 1211.74 L1100.38 1211.74 L1099.79 1211.74 L1099.2 1211.74 L1098.62 1211.74 L1098.03 1211.74 L1097.44 1211.74 L1096.86 1211.74 L1096.27 1211.74 L1095.68 1211.74 L1095.1 1211.74 L1094.51 1211.74 L1093.93 1211.74 L1093.34 1211.74 L1092.75 1211.74 L1092.17 1211.74 L1091.58 1211.74 L1090.99 1211.74 L1090.41 1211.74 L1089.82 1211.74 L1089.23 1211.74 L1088.65 1211.74 L1088.06 1211.74 L1087.47 1211.74 L1086.89 1211.74 L1086.3 1211.74 L1085.72 1211.74 L1085.13 1211.74 L1084.54 1211.74 L1083.96 1211.74 L1083.37 1211.74 L1082.78 1211.74 L1082.2 1211.74 L1081.61 1211.74 L1081.02 1211.74 L1080.44 1211.74 L1079.85 1211.74 L1079.26 1211.74 L1078.68 1211.74 L1078.09 1211.74 L1077.51 1211.74 L1076.92 1211.74 L1076.33 1211.74 L1075.75 1211.74 L1075.16 1211.74 L1074.57 1211.74 L1073.99 1211.74 L1073.4 1211.74 L1072.81 1211.74 L1072.23 1211.74 L1071.64 1211.74 L1071.06 1211.74 L1070.47 1211.74 L1069.88 1211.74 L1069.3 1211.74 L1068.71 1211.74 L1068.12 1211.74 L1067.54 1211.74 L1066.95 1211.74 L1066.36 1211.74 L1065.78 1211.74 L1065.19 1211.74 L1064.6 1211.74 L1064.02 1211.74 L1063.43 1211.74 L1062.85 1211.74 L1062.26 1211.74 L1061.67 1211.74 L1061.09 1211.74 L1060.5 1211.74 L1059.91 1211.74 L1059.33 1211.74 L1058.74 1211.74 L1058.15 1211.74 L1057.57 1211.74 L1056.98 1211.74 L1056.39 1211.74 L1055.81 1211.74 L1055.22 1211.74 L1054.64 1211.74 L1054.05 1211.74 L1053.46 1211.74 L1052.88 1211.74 L1052.29 1211.74 L1051.7 1211.74 L1051.12 1211.74 L1050.53 1211.74 L1049.94 1211.74 L1049.36 1211.74 L1048.77 1211.74 L1048.19 1211.74 L1047.6 1211.74 L1047.01 1211.74 L1046.43 1211.74 L1045.84 1211.74 L1045.25 1211.74 L1044.67 1211.74 L1044.08 1211.74 L1043.49 1211.74 L1042.91 1211.74 L1042.32 1211.74 L1041.73 1211.74 L1041.15 1211.74 L1040.56 1211.74 L1039.98 1211.74 L1039.39 1211.74 L1038.8 1211.74 L1038.22 1211.74 L1037.63 1211.74 L1037.04 1211.74 L1036.46 1211.74 L1035.87 1211.74 L1035.28 1211.74 L1034.7 1211.74 L1034.11 1211.74 L1033.52 1211.74 L1032.94 1211.74 L1032.35 1211.74 L1031.77 1211.74 L1031.18 1211.74 L1030.59 1211.74 L1030.01 1211.74 L1029.42 1211.74 L1028.83 1211.74 L1028.25 1211.74 L1027.66 1211.74 L1027.07 1211.74 L1026.49 1211.74 L1025.9 1211.74 L1025.32 1211.74 L1024.73 1211.74 L1024.14 1211.74 L1023.56 1211.74 L1022.97 1211.74 L1022.38 1211.74 L1021.8 1211.74 L1021.21 1211.74 L1020.62 1211.74 L1020.04 1211.74 L1019.45 1211.74 L1018.86 1211.74 L1018.28 1211.74 L1017.69 1211.74 L1017.11 1211.74 L1016.52 1211.74 L1015.93 1211.74 L1015.35 1211.74 L1014.76 1211.74 L1014.17 1211.74 L1013.59 1211.74 L1013 1211.74 L1012.41 1211.74 L1011.83 1211.74 L1011.24 1211.74 L1010.65 1211.74 L1010.07 1211.74 L1009.48 1211.74 L1008.9 1211.74 L1008.31 1211.74 L1007.72 1211.74 L1007.14 1211.74 L1006.55 1211.74 L1005.96 1211.74 L1005.38 1211.74 L1004.79 1211.74 L1004.2 1211.74 L1003.62 1211.74 L1003.03 1211.74 L1002.44 1211.74 L1001.86 1211.74 L1001.27 1211.74 L1000.69 1211.74 L1000.1 1211.74 L999.513 1211.74 L998.926 1211.74 L998.34 1211.74 L997.754 1211.74 L997.167 1211.74 L996.581 1211.74 L995.994 1211.74 L995.408 1211.74 L994.822 1211.74 L994.235 1211.74 L993.649 1211.74 L993.062 1211.74 L992.476 1211.74 L991.889 1211.74 L991.303 1211.74 L990.717 1211.74 L990.13 1211.74 L989.544 1211.74 L988.957 1211.74 L988.371 1211.74 L987.785 1211.74 L987.198 1211.74 L986.612 1211.74 L986.025 1211.74  Z\" fill=\"#e26f46\" fill-rule=\"evenodd\" fill-opacity=\"0.5\"/>\n<polyline clip-path=\"url(#clip432)\" style=\"stroke:#e26f46; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"986.025,1212.14 986.612,1212.14 987.198,1212.14 987.785,1212.14 988.371,1212.14 988.957,1212.14 989.544,1212.14 990.13,1212.14 990.717,1212.14 991.303,1212.14 991.889,1212.14 992.476,1212.14 993.062,1212.14 993.649,1212.14 994.235,1212.14 994.822,1212.14 995.408,1212.14 995.994,1212.14 996.581,1212.14 997.167,1212.14 997.754,1212.14 998.34,1212.14 998.926,1212.14 999.513,1212.14 1000.1,1212.14 1000.69,1212.14 1001.27,1212.14 1001.86,1212.14 1002.44,1212.14 1003.03,1212.14 1003.62,1212.14 1004.2,1212.14 1004.79,1212.14 1005.38,1212.14 1005.96,1212.14 1006.55,1212.14 1007.14,1212.14 1007.72,1212.14 1008.31,1212.14 1008.9,1212.14 1009.48,1212.14 1010.07,1212.14 1010.65,1212.14 1011.24,1212.14 1011.83,1212.14 1012.41,1212.14 1013,1212.14 1013.59,1212.14 1014.17,1212.14 1014.76,1212.14 1015.35,1212.14 1015.93,1212.14 1016.52,1212.14 1017.11,1212.14 1017.69,1212.14 1018.28,1212.14 1018.86,1212.14 1019.45,1212.14 1020.04,1212.14 1020.62,1212.14 1021.21,1212.14 1021.8,1212.14 1022.38,1212.14 1022.97,1212.14 1023.56,1212.14 1024.14,1212.14 1024.73,1212.14 1025.32,1212.14 1025.9,1212.14 1026.49,1212.14 1027.07,1212.14 1027.66,1212.14 1028.25,1212.14 1028.83,1212.14 1029.42,1212.14 1030.01,1212.14 1030.59,1212.14 1031.18,1212.14 1031.77,1212.14 1032.35,1212.14 1032.94,1212.14 1033.52,1212.14 1034.11,1212.14 1034.7,1212.14 1035.28,1212.14 1035.87,1212.14 1036.46,1212.14 1037.04,1212.14 1037.63,1212.14 1038.22,1212.14 1038.8,1212.14 1039.39,1212.14 1039.98,1212.14 1040.56,1212.14 1041.15,1212.14 1041.73,1212.14 1042.32,1212.14 1042.91,1212.14 1043.49,1212.14 1044.08,1212.14 1044.67,1212.14 1045.25,1212.14 1045.84,1212.14 1046.43,1212.14 1047.01,1212.14 1047.6,1212.14 1048.19,1212.14 1048.77,1212.14 1049.36,1212.14 1049.94,1212.14 1050.53,1212.14 1051.12,1212.14 1051.7,1212.14 1052.29,1212.14 1052.88,1212.14 1053.46,1212.14 1054.05,1212.14 1054.64,1212.14 1055.22,1212.14 1055.81,1212.14 1056.39,1212.14 1056.98,1212.14 1057.57,1212.14 1058.15,1212.14 1058.74,1212.14 1059.33,1212.14 1059.91,1212.14 1060.5,1212.14 1061.09,1212.14 1061.67,1212.14 1062.26,1212.14 1062.85,1212.14 1063.43,1212.14 1064.02,1212.14 1064.6,1212.14 1065.19,1212.14 1065.78,1212.14 1066.36,1212.14 1066.95,1212.14 1067.54,1212.14 1068.12,1212.14 1068.71,1212.14 1069.3,1212.14 1069.88,1212.14 1070.47,1212.14 1071.06,1212.14 1071.64,1212.14 1072.23,1212.14 1072.81,1212.14 1073.4,1212.14 1073.99,1212.14 1074.57,1212.14 1075.16,1212.14 1075.75,1212.14 1076.33,1212.14 1076.92,1212.14 1077.51,1212.14 1078.09,1212.14 1078.68,1212.14 1079.26,1212.14 1079.85,1212.14 1080.44,1212.14 1081.02,1212.14 1081.61,1212.14 1082.2,1212.14 1082.78,1212.14 1083.37,1212.14 1083.96,1212.14 1084.54,1212.14 1085.13,1212.14 1085.72,1212.14 1086.3,1212.14 1086.89,1212.14 1087.47,1212.14 1088.06,1212.14 1088.65,1212.14 1089.23,1212.14 1089.82,1212.14 1090.41,1212.14 1090.99,1212.14 1091.58,1212.14 1092.17,1212.14 1092.75,1212.14 1093.34,1212.14 1093.93,1212.14 1094.51,1212.14 1095.1,1212.14 1095.68,1212.14 1096.27,1212.14 1096.86,1212.14 1097.44,1212.14 1098.03,1212.14 1098.62,1212.14 1099.2,1212.14 1099.79,1212.14 1100.38,1212.14 1100.96,1212.14 1101.55,1212.14 1102.14,1212.14 1102.72,1212.14 1103.31,1212.14 1103.89,1212.14 1104.48,1212.14 1105.07,1212.14 1105.65,1212.14 1106.24,1212.14 1106.83,1212.14 1107.41,1212.14 1108,1212.14 1108.59,1212.14 1109.17,1212.14 1109.76,1212.14 1110.34,1212.14 1110.93,1212.14 1111.52,1212.14 1112.1,1212.14 1112.69,1212.14 1113.28,1212.14 1113.86,1212.14 1114.45,1212.14 1115.04,1212.14 1115.62,1212.14 1116.21,1212.14 1116.8,1212.14 1117.38,1212.14 1117.97,1212.14 1118.55,1212.14 1119.14,1212.14 1119.73,1212.14 1120.31,1212.14 1120.9,1212.14 1121.49,1212.14 1122.07,1212.14 1122.66,1212.14 1123.25,1212.14 1123.83,1212.14 1124.42,1212.14 1125.01,1212.14 1125.59,1212.14 1126.18,1212.14 1126.76,1212.14 1127.35,1212.14 1127.94,1212.14 1128.52,1212.14 1129.11,1212.14 1129.7,1212.14 1130.28,1212.14 1130.87,1212.14 1131.46,1212.14 1132.04,1212.14 1132.63,1212.14 1133.21,1212.14 1133.8,1212.14 1134.39,1212.14 1134.97,1212.14 1135.56,1212.14 1136.15,1212.14 1136.73,1212.14 1137.32,1212.14 1137.91,1212.14 1138.49,1212.14 1139.08,1212.14 1139.67,1212.14 1140.25,1212.14 1140.84,1212.14 1141.42,1212.14 1142.01,1212.14 1142.6,1212.14 1143.18,1212.14 1143.77,1212.14 1144.36,1212.14 1144.94,1212.14 1145.53,1212.14 1146.12,1212.14 1146.7,1212.14 1147.29,1212.14 1147.88,1212.14 1148.46,1212.14 1149.05,1212.14 1149.63,1212.14 1150.22,1212.14 1150.81,1212.14 1151.39,1212.14 1151.98,1212.14 1152.57,1212.14 1153.15,1212.14 1153.74,1212.14 1154.33,1212.14 1154.91,1212.14 1155.5,1212.14 1156.09,1212.14 1156.67,1212.14 1157.26,1212.14 1157.84,1212.14 1158.43,1212.14 1159.02,1212.14 1159.6,1212.14 1160.19,1212.14 1160.78,1212.14 1161.36,1212.14 1161.95,1212.14 1162.54,1212.14 1163.12,1212.14 1163.71,1212.14 1164.29,1212.14 1164.88,1212.14 1165.47,1212.14 1166.05,1212.14 1166.64,1212.14 1167.23,1212.14 1167.81,1212.14 1168.4,1212.14 1168.99,1212.14 1169.57,1212.14 1170.16,1212.14 1170.75,1212.14 1171.33,1212.14 1171.92,1212.14 1172.5,1212.14 1173.09,1212.14 1173.68,1212.14 1174.26,1212.14 1174.85,1212.14 1175.44,1212.14 1176.02,1212.14 1176.61,1212.14 1177.2,1212.14 1177.78,1212.14 1178.37,1212.14 1178.96,1212.14 1179.54,1212.14 1180.13,1212.14 1180.71,1212.14 1181.3,1212.14 1181.89,1212.14 1182.47,1212.14 1183.06,1212.14 1183.65,1212.14 1184.23,1212.14 1184.82,1212.14 1185.41,1212.14 1185.99,1212.14 1186.58,1212.14 1187.16,1212.14 1187.75,1212.14 1188.34,1212.14 1188.92,1212.14 1189.51,1212.14 1190.1,1212.14 1190.68,1212.14 1191.27,1212.14 1191.86,1212.14 1192.44,1212.14 1193.03,1212.14 1193.62,1212.14 1194.2,1212.14 1194.79,1212.14 1195.37,1212.14 1195.96,1212.14 1196.55,1212.14 1197.13,1212.14 1197.72,1212.14 1198.31,1212.14 1198.89,1212.14 1199.48,1212.14 1200.07,1212.14 1200.65,1212.14 1201.24,1212.14 1201.83,1212.14 1202.41,1212.14 1203,1212.14 1203.58,1212.14 1204.17,1212.14 1204.76,1212.14 1205.34,1212.14 1205.93,1212.14 1206.52,1212.14 1207.1,1212.14 1207.69,1212.14 1208.28,1212.14 1208.86,1212.14 1209.45,1212.14 1210.03,1212.14 1210.62,1212.14 1211.21,1212.14 1211.79,1212.14 1212.38,1212.14 1212.97,1212.14 1213.55,1212.14 1214.14,1212.14 1214.73,1212.14 1215.31,1212.14 1215.9,1212.14 1216.49,1212.14 1217.07,1212.14 1217.66,1212.14 1218.24,1212.14 1218.83,1212.14 1219.42,1212.14 1220,1212.14 1220.59,1212.14 1221.18,1212.14 1221.76,1212.14 1222.35,1212.14 1222.94,1212.14 1223.52,1212.14 1224.11,1212.14 1224.7,1212.14 1225.28,1212.14 1225.87,1212.14 1226.45,1212.14 1227.04,1212.14 1227.63,1212.14 1228.21,1212.14 1228.8,1212.14 1229.39,1212.14 1229.97,1212.14 1230.56,1212.14 1231.15,1212.14 1231.73,1212.14 1232.32,1212.14 1232.91,1212.14 1233.49,1212.14 1234.08,1212.14 1234.66,1212.14 1235.25,1212.14 1235.84,1212.14 1236.42,1212.14 1237.01,1212.14 1237.6,1212.14 1238.18,1212.14 1238.77,1212.14 1239.36,1212.14 1239.94,1212.14 1240.53,1212.14 1241.11,1212.14 1241.7,1212.14 1242.29,1212.14 1242.87,1212.14 1243.46,1212.14 1244.05,1212.14 1244.63,1212.14 1245.22,1212.14 1245.81,1212.14 1246.39,1212.14 1246.98,1212.14 1247.57,1212.14 1248.15,1212.14 1248.74,1212.14 1249.32,1212.14 1249.91,1212.14 1250.5,1212.14 1251.08,1212.14 1251.67,1212.14 1252.26,1212.14 1252.84,1212.14 1253.43,1212.14 1254.02,1212.14 1254.6,1212.14 1255.19,1212.14 1255.78,1212.14 1256.36,1212.14 1256.95,1212.14 1257.53,1212.14 1258.12,1212.14 1258.71,1212.14 1259.29,1212.14 1259.88,1212.14 1260.47,1212.14 1261.05,1212.14 1261.64,1212.14 1262.23,1212.14 1262.81,1212.14 1263.4,1212.14 1263.98,1212.14 1264.57,1212.14 1265.16,1212.14 1265.74,1212.14 1266.33,1212.14 1266.92,1212.14 1267.5,1212.14 1268.09,1212.14 1268.68,1212.14 1269.26,1212.14 1269.85,1212.14 1270.44,1212.14 1271.02,1212.14 1271.61,1212.14 1272.19,1212.14 1272.78,1212.14 1273.37,1212.14 1273.95,1212.14 1274.54,1212.14 1275.13,1212.14 1275.71,1212.14 1276.3,1212.14 1276.89,1212.14 1277.47,1212.14 1278.06,1212.14 1278.65,1212.14 1279.23,1212.14 1279.82,1212.14 1280.4,1212.14 1280.99,1212.14 1281.58,1212.14 1282.16,1212.14 1282.75,1212.14 1283.34,1212.14 1283.92,1212.14 1284.51,1212.14 1285.1,1212.14 1285.68,1212.14 1286.27,1212.14 1286.86,1212.14 1287.44,1212.14 1288.03,1212.14 1288.61,1212.14 1289.2,1212.14 1289.79,1212.14 1290.37,1212.14 1290.96,1212.14 1291.55,1212.14 1292.13,1212.14 1292.72,1212.14 1293.31,1212.14 1293.89,1212.14 1294.48,1212.14 1295.06,1212.14 1295.65,1212.14 1296.24,1212.14 1296.82,1212.14 1297.41,1212.14 1298,1212.14 1298.58,1212.14 1299.17,1212.14 1299.76,1212.14 1300.34,1212.14 1300.93,1212.14 1301.52,1212.14 1302.1,1212.14 1302.69,1212.14 1303.27,1212.14 1303.86,1212.14 1304.45,1212.14 1305.03,1212.14 1305.62,1212.14 1306.21,1212.14 1306.79,1212.14 1307.38,1212.14 1307.97,1212.14 1308.55,1212.14 1309.14,1212.14 1309.73,1212.14 1310.31,1212.14 1310.9,1212.14 1311.48,1212.14 1312.07,1212.14 1312.66,1212.14 1313.24,1212.14 1313.83,1212.14 1314.42,1212.14 1315,1212.14 1315.59,1212.14 1316.18,1212.14 1316.76,1212.14 1317.35,1212.14 1317.93,1212.14 1318.52,1212.14 1319.11,1212.14 1319.69,1212.14 1320.28,1212.14 1320.87,1212.14 1321.45,1212.14 1322.04,1212.14 1322.63,1212.14 1323.21,1212.14 1323.8,1212.14 1324.39,1212.14 1324.97,1212.14 1325.56,1212.14 1326.14,1212.14 1326.73,1212.14 1327.32,1212.14 1327.9,1212.14 1328.49,1212.14 1329.08,1212.14 1329.66,1212.14 1330.25,1212.14 1330.84,1212.14 1331.42,1212.14 1332.01,1212.14 1332.6,1212.14 1333.18,1212.14 1333.77,1212.14 1334.35,1212.14 1334.94,1212.14 1335.53,1212.14 1336.11,1212.14 1336.7,1212.14 1337.29,1212.14 1337.87,1212.14 1338.46,1212.14 1339.05,1212.14 1339.63,1212.14 1340.22,1212.14 1340.8,1212.14 1341.39,1212.14 1341.98,1212.14 1342.56,1212.14 1343.15,1212.14 1343.74,1212.14 1344.32,1212.14 1344.91,1212.14 1345.5,1212.14 1346.08,1212.14 1346.67,1212.14 1347.26,1212.14 1347.84,1212.14 1348.43,1212.14 1349.01,1212.14 1349.6,1212.14 1350.19,1212.14 1350.77,1212.14 1351.36,1212.14 1351.95,1212.14 1352.53,1212.14 1353.12,1212.14 1353.71,1212.14 1354.29,1212.14 1354.88,1212.14 1355.47,1212.14 1356.05,1212.14 1356.64,1212.14 1357.22,1212.14 1357.81,1212.14 1358.4,1212.14 1358.98,1212.14 1359.57,1212.14 1360.16,1212.14 1360.74,1212.14 1361.33,1212.14 1361.92,1212.14 1362.5,1212.14 1363.09,1212.14 1363.68,1212.14 1364.26,1212.14 1364.85,1212.14 1365.43,1212.14 1366.02,1212.14 1366.61,1212.14 1367.19,1212.14 1367.78,1212.14 1368.37,1212.14 1368.95,1212.14 1369.54,1212.14 1370.13,1212.14 1370.71,1212.14 1371.3,1212.14 1371.88,1212.14 1372.47,1212.14 1373.06,1212.14 1373.64,1212.14 1374.23,1212.14 1374.82,1212.14 1375.4,1212.14 1375.99,1212.14 1376.58,1212.14 1377.16,1212.14 1377.75,1212.14 1378.34,1212.14 1378.92,1212.14 1379.51,1212.14 1380.09,1212.14 1380.68,1212.14 1381.27,1212.14 1381.85,1212.14 1382.44,1212.14 1383.03,1212.14 1383.61,1212.14 1384.2,1212.14 1384.79,1212.14 1385.37,1212.14 1385.96,1212.14 1386.55,1212.14 1387.13,1212.14 1387.72,1212.14 1388.3,1212.14 1388.89,1212.14 1389.48,1212.14 1390.06,1212.14 1390.65,1212.14 1391.24,1212.14 1391.82,1212.14 1392.41,1212.14 1393,1212.14 1393.58,1212.14 1394.17,1212.14 1394.75,1212.14 1395.34,1212.14 1395.93,1212.14 1396.51,1212.14 1397.1,1212.14 1397.69,1212.14 1398.27,1212.14 1398.86,1212.14 1399.45,1212.14 1400.03,1212.14 1400.62,1212.14 1401.21,1212.14 1401.79,1212.14 1402.38,1212.14 1402.96,1212.14 1403.55,1212.14 1404.14,1212.14 1404.72,1212.14 1405.31,1212.14 1405.9,1212.14 1406.48,1212.14 1407.07,1212.14 1407.66,1212.14 1408.24,1212.14 1408.83,1212.14 1409.42,1212.14 1410,1212.14 1410.59,1212.14 1411.17,1212.14 1411.76,1212.14 1412.35,1212.14 1412.93,1212.14 1413.52,1212.14 1414.11,1212.14 1414.69,1212.14 1415.28,1212.14 1415.87,1212.14 1416.45,1212.14 1417.04,1212.14 1417.63,1212.14 1418.21,1212.14 1418.8,1212.14 1419.38,1212.14 1419.97,1212.14 1420.56,1212.14 1421.14,1212.14 1421.73,1212.14 1422.32,1212.14 1422.9,1212.14 1423.49,1212.14 1424.08,1212.14 1424.66,1212.14 1425.25,1212.14 1425.83,1212.14 1426.42,1212.14 1427.01,1212.14 1427.59,1212.14 1428.18,1212.14 1428.77,1212.14 1429.35,1212.14 1429.94,1212.14 1430.53,1212.14 1431.11,1212.14 1431.7,1212.14 1432.29,1212.14 1432.87,1212.14 1433.46,1212.14 1434.04,1212.14 1434.63,1212.14 1435.22,1212.14 1435.8,1212.14 1436.39,1212.14 1436.98,1212.14 1437.56,1212.14 1438.15,1212.14 1438.74,1212.14 1439.32,1212.14 1439.91,1212.14 1440.5,1212.14 1441.08,1212.14 1441.67,1212.14 1442.25,1212.14 1442.84,1212.14 1443.43,1212.14 1444.01,1212.14 1444.6,1212.14 1445.19,1212.14 1445.77,1212.14 1446.36,1212.14 1446.95,1212.14 1447.53,1212.14 1448.12,1212.14 1448.7,1212.14 1449.29,1212.14 1449.88,1212.14 1450.46,1212.14 1451.05,1212.14 1451.64,1212.14 1452.22,1212.14 1452.81,1212.14 1453.4,1212.14 1453.98,1212.14 1454.57,1212.14 1455.16,1212.14 1455.74,1212.14 1456.33,1212.14 1456.91,1212.14 1457.5,1212.14 1458.09,1212.14 1458.67,1212.14 1459.26,1212.14 1459.85,1212.14 1460.43,1212.14 1461.02,1212.14 1461.61,1212.14 1462.19,1212.14 1462.78,1212.14 1463.37,1212.14 1463.95,1212.14 1464.54,1212.14 1465.12,1212.14 1465.71,1212.14 1466.3,1212.14 1466.88,1212.14 1467.47,1212.14 1468.06,1212.14 1468.64,1212.14 1469.23,1212.14 1469.82,1212.14 1470.4,1212.14 1470.99,1212.14 1471.57,1212.14 1472.16,1212.14 1472.75,1212.14 1473.33,1212.14 1473.92,1212.14 1474.51,1212.14 1475.09,1212.14 1475.68,1212.14 1476.27,1212.14 1476.85,1212.14 1477.44,1212.14 1478.03,1212.14 1478.61,1212.14 1479.2,1212.14 1479.78,1212.14 1480.37,1212.14 1480.96,1212.14 1481.54,1212.14 1482.13,1212.14 1482.72,1212.14 1483.3,1212.14 1483.89,1212.14 1484.48,1212.14 1485.06,1212.14 1485.65,1212.14 1486.24,1212.14 1486.82,1212.14 1487.41,1212.14 1487.99,1212.14 1488.58,1212.14 1489.17,1212.14 1489.75,1212.14 1490.34,1212.14 1490.93,1212.14 1491.51,1212.14 1492.1,1212.14 1492.69,1212.14 1493.27,1212.14 1493.86,1212.14 1494.45,1212.14 1495.03,1212.14 1495.62,1212.14 1496.2,1212.14 1496.79,1212.14 1497.38,1212.14 1497.96,1212.14 1498.55,1212.14 1499.14,1212.14 1499.72,1212.14 1500.31,1212.14 1500.9,1212.14 1501.48,1212.14 1502.07,1212.14 1502.65,1212.14 1503.24,1212.14 1503.83,1212.14 1504.41,1212.14 1505,1212.14 1505.59,1212.14 1506.17,1212.14 1506.76,1212.14 1507.35,1212.14 1507.93,1212.14 1508.52,1212.14 1509.11,1212.14 1509.69,1212.14 1510.28,1212.14 1510.86,1212.14 1511.45,1212.14 1512.04,1212.14 1512.62,1212.14 1513.21,1212.14 1513.8,1212.14 1514.38,1212.14 1514.97,1212.14 1515.56,1212.14 1516.14,1212.14 1516.73,1212.14 1517.32,1212.14 1517.9,1212.14 1518.49,1212.14 1519.07,1212.14 1519.66,1212.14 1520.25,1212.14 1520.83,1212.14 1521.42,1212.14 1522.01,1212.14 1522.59,1212.14 1523.18,1212.14 1523.77,1212.14 1524.35,1212.14 1524.94,1212.14 1525.52,1212.14 1526.11,1212.14 1526.7,1212.14 1527.28,1212.14 1527.87,1212.14 1528.46,1212.14 1529.04,1212.14 1529.63,1212.14 1530.22,1212.14 1530.8,1212.14 1531.39,1212.14 1531.98,1212.14 1532.56,1212.14 1533.15,1212.14 1533.73,1212.14 1534.32,1212.14 1534.91,1212.14 1535.49,1212.14 1536.08,1212.14 1536.67,1212.14 1537.25,1212.14 1537.84,1212.14 1538.43,1212.14 1539.01,1212.14 1539.6,1212.14 1540.19,1212.14 1540.77,1212.14 1541.36,1212.14 1541.94,1212.14 1542.53,1212.14 1543.12,1212.14 1543.7,1212.14 1544.29,1212.14 1544.88,1212.14 1545.46,1212.14 1546.05,1212.14 1546.64,1212.14 1547.22,1212.14 1547.81,1212.14 1548.4,1212.14 1548.98,1212.14 1549.57,1212.14 1550.15,1212.14 1550.74,1212.14 1551.33,1212.14 1551.91,1212.14 1552.5,1212.14 1553.09,1212.14 1553.67,1212.14 1554.26,1212.14 1554.85,1212.14 1555.43,1212.14 1556.02,1212.14 1556.6,1212.14 1557.19,1212.14 1557.78,1212.14 1558.36,1212.14 1558.95,1212.14 1559.54,1212.14 1560.12,1212.14 1560.71,1212.14 1561.3,1212.14 1561.88,1212.14 1562.47,1212.14 1563.06,1212.14 1563.64,1212.14 1564.23,1212.14 1564.81,1212.14 1565.4,1212.14 1565.99,1212.14 1566.57,1212.14 1567.16,1212.14 1567.75,1212.14 1568.33,1212.14 1568.92,1212.14 1569.51,1212.14 1570.09,1212.14 1570.68,1212.14 1571.27,1212.14 1571.85,1212.14 1572.44,1212.14 1573.02,1212.14 1573.61,1212.14 1574.2,1212.14 1574.78,1212.14 1575.37,1212.14 1575.96,1212.14 1576.54,1212.14 1577.13,1212.14 1577.72,1212.14 1578.3,1212.14 1578.89,1212.14 1579.47,1212.14 1580.06,1212.14 1580.65,1212.14 1581.23,1212.14 1581.82,1212.14 1582.41,1212.14 1582.99,1212.14 1583.58,1212.14 1584.17,1212.14 1584.75,1212.14 1585.34,1212.14 1585.93,1212.14 1586.51,1212.14 1587.1,1212.14 1587.68,1212.14 1588.27,1212.14 1588.86,1212.14 1589.44,1212.14 1590.03,1212.14 1590.62,1212.14 1591.2,1212.14 1591.79,1212.14 1592.38,1212.14 1592.96,1212.14 1593.55,1212.14 1594.14,1212.14 1594.72,1212.14 1595.31,1212.14 1595.89,1212.14 1596.48,1212.14 1597.07,1212.14 1597.65,1212.14 1598.24,1212.14 1598.83,1212.14 1599.41,1212.14 1600,1212.14 1600.59,1212.14 1601.17,1212.14 1601.76,1212.14 1602.34,1212.14 1602.93,1212.14 1603.52,1212.14 1604.1,1212.14 1604.69,1212.14 1605.28,1212.14 1605.86,1212.14 1606.45,1212.14 1607.04,1212.14 1607.62,1212.14 1608.21,1212.14 1608.8,1212.14 1609.38,1212.14 1609.97,1212.14 1610.55,1212.14 1611.14,1212.14 1611.73,1212.14 1612.31,1212.14 1612.9,1212.14 1613.49,1212.14 1614.07,1212.14 1614.66,1212.14 1615.25,1212.14 1615.83,1212.14 1616.42,1212.14 1617.01,1212.14 1617.59,1212.14 1618.18,1212.14 1618.76,1212.14 1619.35,1212.14 1619.94,1212.14 1620.52,1212.14 1621.11,1212.14 1621.7,1212.14 1622.28,1212.14 1622.87,1212.14 1623.46,1212.14 1624.04,1212.14 1624.63,1212.14 1625.22,1212.14 1625.8,1212.14 1626.39,1212.14 1626.97,1212.14 1627.56,1212.14 1628.15,1212.14 1628.73,1212.14 1629.32,1212.14 1629.91,1212.14 1630.49,1212.14 1631.08,1212.14 1631.67,1212.14 1632.25,1212.14 1632.84,1212.14 1633.42,1212.14 1634.01,1212.14 1634.6,1212.14 1635.18,1212.14 1635.77,1212.14 1636.36,1212.14 1636.94,1212.14 1637.53,1212.14 1638.12,1212.14 1638.7,1212.14 1639.29,1212.14 1639.88,1212.14 1640.46,1212.14 1641.05,1212.14 1641.63,1212.14 1642.22,1212.14 1642.81,1212.14 1643.39,1212.14 1643.98,1212.14 1644.57,1212.14 1645.15,1212.14 1645.74,1212.14 1646.33,1212.14 1646.91,1212.14 1647.5,1212.14 1648.09,1212.14 1648.67,1212.14 1649.26,1212.14 1649.84,1212.14 1650.43,1212.14 1651.02,1212.14 1651.6,1212.14 1652.19,1212.14 1652.78,1212.14 1653.36,1212.14 1653.95,1212.14 1654.54,1212.14 1655.12,1212.14 1655.71,1212.14 1656.29,1212.14 1656.88,1212.14 1657.47,1212.14 1658.05,1212.14 1658.64,1212.14 1659.23,1212.14 1659.81,1212.14 1660.4,1212.14 1660.99,1212.14 1661.57,1212.14 1662.16,1212.14 1662.75,1212.14 1663.33,1212.14 1663.92,1212.14 1664.5,1212.14 1665.09,1212.14 1665.68,1212.14 1666.26,1212.14 1666.85,1212.14 1667.44,1212.14 1668.02,1212.14 1668.61,1212.14 1669.2,1212.14 1669.78,1212.14 1670.37,1212.14 1670.96,1212.14 1671.54,1212.14 1672.13,1212.14 1672.71,1212.14 1673.3,1212.14 1673.89,1212.14 1674.47,1212.14 1675.06,1212.14 1675.65,1212.14 1676.23,1212.14 1676.82,1212.14 1677.41,1212.14 1677.99,1212.14 1678.58,1212.14 1679.17,1212.14 1679.75,1212.14 1680.34,1212.14 1680.92,1212.14 1681.51,1212.14 1682.1,1212.14 1682.68,1212.14 1683.27,1212.14 1683.86,1212.14 1684.44,1212.14 1685.03,1212.14 1685.62,1212.14 1686.2,1212.14 1686.79,1212.14 1687.37,1212.14 1687.96,1212.14 1688.55,1212.14 1689.13,1212.14 1689.72,1212.14 1690.31,1212.14 1690.89,1212.14 1691.48,1212.14 1692.07,1212.14 1692.65,1212.14 1693.24,1212.14 1693.83,1212.14 1694.41,1212.14 1695,1212.14 1695.58,1212.14 1696.17,1212.14 1696.76,1212.14 1697.34,1212.14 1697.93,1212.14 1698.52,1212.14 1699.1,1212.14 1699.69,1212.14 1700.28,1212.14 1700.86,1212.14 1701.45,1212.14 1702.04,1212.14 1702.62,1212.14 1703.21,1212.14 1703.79,1212.14 1704.38,1212.14 1704.97,1212.14 1705.55,1212.14 1706.14,1212.14 1706.73,1212.14 1707.31,1212.14 1707.9,1212.14 1708.49,1212.14 1709.07,1212.14 1709.66,1212.14 1710.24,1212.14 1710.83,1212.14 1711.42,1212.14 1712,1212.14 1712.59,1212.14 1713.18,1212.14 1713.76,1212.14 1714.35,1212.14 1714.94,1212.14 1715.52,1212.14 1716.11,1212.14 1716.7,1212.14 1717.28,1212.14 1717.87,1212.14 1718.45,1212.14 1719.04,1212.14 1719.63,1212.14 1720.21,1212.14 1720.8,1212.14 1721.39,1212.14 1721.97,1212.14 1722.56,1212.14 1723.15,1212.14 1723.73,1212.14 1724.32,1212.14 1724.91,1212.14 1725.49,1212.14 1726.08,1212.14 1726.66,1212.14 1727.25,1212.14 1727.84,1212.14 1728.42,1212.14 1729.01,1212.14 1729.6,1212.14 1730.18,1212.14 1730.77,1212.14 1731.36,1212.14 1731.94,1212.14 1732.53,1212.14 1733.11,1212.14 1733.7,1212.14 1734.29,1212.14 1734.87,1212.14 1735.46,1212.14 1736.05,1212.14 1736.63,1212.14 1737.22,1212.14 1737.81,1212.14 1738.39,1212.14 1738.98,1212.14 1739.57,1212.14 1740.15,1212.14 1740.74,1212.14 1741.32,1212.14 1741.91,1212.14 1742.5,1212.14 1743.08,1212.14 1743.67,1212.14 1744.26,1212.14 1744.84,1212.14 1745.43,1212.14 1746.02,1212.14 1746.6,1212.14 1747.19,1212.14 1747.78,1212.14 1748.36,1212.14 1748.95,1212.14 1749.53,1212.14 1750.12,1212.14 1750.71,1212.14 1751.29,1212.14 1751.88,1212.14 1752.47,1212.14 1753.05,1212.14 1753.64,1212.14 1754.23,1212.14 1754.81,1212.14 1755.4,1212.14 1755.99,1212.14 1756.57,1212.14 1757.16,1212.14 1757.74,1212.14 1758.33,1212.14 1758.92,1212.14 1759.5,1212.14 1760.09,1212.14 1760.68,1212.14 1761.26,1212.14 1761.85,1212.14 1762.44,1212.14 1763.02,1212.14 1763.61,1212.14 1764.19,1212.14 1764.78,1212.14 1765.37,1212.14 1765.95,1212.14 1766.54,1212.14 1767.13,1212.14 1767.71,1212.14 1768.3,1212.14 1768.89,1212.14 1769.47,1212.14 1770.06,1212.14 1770.65,1212.14 1771.23,1212.14 1771.82,1212.14 1772.4,1212.14 1772.99,1212.14 1773.58,1212.14 1774.16,1212.14 1774.75,1212.14 1775.34,1212.14 1775.92,1212.14 1776.51,1212.14 1777.1,1212.14 1777.68,1212.14 1778.27,1212.14 1778.86,1212.14 1779.44,1212.14 1780.03,1212.14 1780.61,1212.14 1781.2,1212.14 1781.79,1212.14 1782.37,1212.14 1782.96,1212.14 1783.55,1212.14 1784.13,1212.14 1784.72,1212.14 1785.31,1212.14 1785.89,1212.14 1786.48,1212.14 1787.06,1212.14 1787.65,1212.14 1788.24,1212.14 1788.82,1212.14 1789.41,1212.14 1790,1212.14 1790.58,1212.14 1791.17,1212.14 1791.76,1212.14 1792.34,1212.14 1792.93,1212.14 1793.52,1212.14 1794.1,1212.14 1794.69,1212.14 1795.27,1212.14 1795.86,1212.14 1796.45,1212.14 1797.03,1212.14 1797.62,1212.14 1798.21,1212.14 1798.79,1212.14 1799.38,1212.14 1799.97,1212.14 1800.55,1212.14 1801.14,1212.14 1801.73,1212.14 1802.31,1212.14 1802.9,1212.14 1803.48,1212.14 1804.07,1212.14 1804.66,1212.14 1805.24,1212.14 1805.83,1212.14 1806.42,1212.14 1807,1212.14 1807.59,1212.14 1808.18,1212.14 1808.76,1212.14 1809.35,1212.14 1809.94,1212.14 1810.52,1212.14 1811.11,1212.14 1811.69,1212.14 1812.28,1212.14 1812.87,1212.14 1813.45,1212.14 1814.04,1212.14 1814.63,1212.14 1815.21,1212.14 1815.8,1212.14 1816.39,1212.14 1816.97,1212.14 1817.56,1212.14 1818.14,1212.14 1818.73,1212.14 1819.32,1212.14 1819.9,1212.14 1820.49,1212.14 1821.08,1212.14 1821.66,1212.14 1822.25,1212.14 1822.84,1212.14 1823.42,1212.14 1824.01,1212.14 1824.6,1212.14 1825.18,1212.14 1825.77,1212.14 1826.35,1212.14 1826.94,1212.14 1827.53,1212.14 1828.11,1212.14 1828.7,1212.14 1829.29,1212.14 1829.87,1212.14 1830.46,1212.14 1831.05,1212.14 1831.63,1212.14 1832.22,1212.14 1832.81,1212.14 1833.39,1212.14 1833.98,1212.14 1834.56,1212.14 1835.15,1212.14 1835.74,1212.14 1836.32,1212.14 1836.91,1212.14 1837.5,1212.14 1838.08,1212.14 1838.67,1212.14 1839.26,1212.14 1839.84,1212.14 1840.43,1212.14 1841.01,1212.14 1841.6,1212.14 1842.19,1212.14 1842.77,1212.14 1843.36,1212.14 1843.95,1212.14 1844.53,1212.14 1845.12,1212.14 1845.71,1212.14 1846.29,1212.14 1846.88,1212.14 1847.47,1212.14 1848.05,1212.14 1848.64,1212.14 1849.22,1212.14 1849.81,1212.14 1850.4,1212.14 1850.98,1212.14 1851.57,1212.14 1852.16,1212.14 1852.74,1212.14 1853.33,1212.14 1853.92,1212.14 1854.5,1212.14 1855.09,1212.14 1855.68,1212.14 1856.26,1212.14 1856.85,1212.14 1857.43,1212.14 1858.02,1212.14 1858.61,1212.14 1859.19,1212.14 1859.78,1212.14 1860.37,1212.14 1860.95,1212.14 1861.54,1212.14 1862.13,1212.14 1862.71,1212.14 1863.3,1212.14 1863.88,1212.14 1864.47,1212.14 1865.06,1212.14 1865.64,1212.14 1866.23,1212.14 1866.82,1212.14 1867.4,1212.14 1867.99,1212.14 1868.58,1212.14 1869.16,1212.14 1869.75,1212.14 1870.34,1212.14 1870.92,1212.14 1871.51,1212.14 1872.09,1212.14 1872.68,1212.14 1873.27,1212.14 1873.85,1212.14 1874.44,1212.14 1875.03,1212.14 1875.61,1212.14 1876.2,1212.14 1876.79,1212.14 1877.37,1212.14 1877.96,1212.14 1878.55,1212.14 1879.13,1212.14 1879.72,1212.14 1880.3,1212.14 1880.89,1212.14 1881.48,1212.14 1882.06,1212.14 1882.65,1212.14 1883.24,1212.14 1883.82,1212.14 1884.41,1212.14 1885,1212.14 1885.58,1212.14 1886.17,1212.14 1886.76,1212.14 1887.34,1212.14 1887.93,1212.14 1888.51,1212.14 1889.1,1212.14 1889.69,1212.14 1890.27,1212.14 1890.86,1212.14 1891.45,1212.14 1892.03,1212.14 1892.62,1212.14 1893.21,1212.14 1893.79,1212.14 1894.38,1212.14 1894.96,1212.14 1895.55,1212.14 1896.14,1212.14 1896.72,1212.14 1897.31,1212.14 1897.9,1212.14 1898.48,1212.14 1899.07,1212.14 1899.66,1212.14 1900.24,1212.14 1900.83,1212.14 1901.42,1212.14 1902,1212.14 1902.59,1212.14 1903.17,1212.14 1903.76,1212.14 1904.35,1212.14 1904.93,1212.14 1905.52,1212.14 1906.11,1212.14 1906.69,1212.14 1907.28,1212.14 1907.87,1212.14 1908.45,1212.14 1909.04,1212.14 1909.63,1212.14 1910.21,1212.14 1910.8,1212.14 1911.38,1212.14 1911.97,1212.14 1912.56,1212.14 1913.14,1212.14 1913.73,1212.14 1914.32,1212.14 1914.9,1212.14 1915.49,1212.14 1916.08,1212.14 1916.66,1212.14 1917.25,1212.14 1917.83,1212.14 1918.42,1212.14 1919.01,1212.14 1919.59,1212.14 1920.18,1212.14 1920.77,1212.14 1921.35,1212.14 1921.94,1212.14 1922.53,1212.14 1923.11,1212.14 1923.7,1212.14 1924.29,1212.14 1924.87,1212.14 1925.46,1212.14 1926.04,1212.14 1926.63,1212.14 1927.22,1212.14 1927.8,1212.14 1928.39,1212.14 1928.98,1212.14 1929.56,1212.14 1930.15,1212.14 1930.74,1212.14 1931.32,1212.14 1931.91,1212.14 1932.5,1212.14 1933.08,1212.14 1933.67,1212.14 1934.25,1212.14 1934.84,1212.14 1935.43,1212.14 1936.01,1212.14 1936.6,1212.14 1937.19,1212.14 1937.77,1212.14 1938.36,1212.14 1938.95,1212.14 1939.53,1212.14 1940.12,1212.14 1940.71,1212.14 1941.29,1212.14 1941.88,1212.14 1942.46,1212.14 1943.05,1212.14 1943.64,1212.14 1944.22,1212.14 1944.81,1212.14 1945.4,1212.14 1945.98,1212.14 1946.57,1212.14 1947.16,1212.14 1947.74,1212.14 1948.33,1212.14 1948.91,1212.14 1949.5,1212.14 1950.09,1212.14 1950.67,1212.14 1951.26,1212.14 1951.85,1212.14 1952.43,1212.14 1953.02,1212.14 1953.61,1212.14 1954.19,1212.14 1954.78,1212.14 1955.37,1212.14 1955.95,1212.14 1956.54,1212.14 1957.12,1212.14 1957.71,1212.14 1958.3,1212.14 1958.88,1212.14 1959.47,1212.14 1960.06,1212.14 1960.64,1212.14 1961.23,1212.14 1961.82,1212.14 1962.4,1212.14 1962.99,1212.14 1963.58,1212.14 1964.16,1212.14 1964.75,1212.14 1965.33,1212.14 1965.92,1212.14 1966.51,1212.14 1967.09,1212.14 1967.68,1212.14 1968.27,1212.14 1968.85,1212.14 1969.44,1212.14 1970.03,1212.14 1970.61,1212.14 1971.2,1212.14 1971.78,1212.14 1972.37,1212.14 1972.96,1212.14 1973.54,1212.14 1974.13,1212.14 1974.72,1212.14 1975.3,1212.14 1975.89,1212.14 1976.48,1212.14 1977.06,1212.14 1977.65,1212.14 1978.24,1212.14 1978.82,1212.14 1979.41,1212.14 1979.99,1212.14 1980.58,1212.14 1981.17,1212.14 1981.75,1212.14 1982.34,1212.14 1982.93,1212.14 1983.51,1212.14 1984.1,1212.14 1984.69,1212.14 1985.27,1212.14 1985.86,1212.14 1986.45,1212.14 1987.03,1212.14 1987.62,1212.14 1988.2,1212.14 1988.79,1212.14 1989.38,1212.14 1989.96,1212.14 1990.55,1212.14 1991.14,1212.14 1991.72,1212.14 1992.31,1212.14 1992.9,1212.14 1993.48,1212.14 1994.07,1212.14 1994.65,1212.14 1995.24,1212.14 1995.83,1212.14 1996.41,1212.14 1997,1212.14 1997.59,1212.14 1998.17,1212.14 1998.76,1212.14 1999.35,1212.14 1999.93,1212.14 2000.52,1212.14 2001.11,1212.14 2001.69,1212.14 2002.28,1212.14 2002.86,1212.14 2003.45,1212.14 2004.04,1212.14 2004.62,1212.14 2005.21,1212.14 2005.8,1212.14 2006.38,1212.14 2006.97,1212.14 2007.56,1212.14 2008.14,1212.14 2008.73,1212.14 2009.32,1212.14 2009.9,1212.14 2010.49,1212.14 2011.07,1212.14 2011.66,1212.14 2012.25,1212.14 2012.83,1212.14 2013.42,1212.14 2014.01,1212.14 2014.59,1212.14 2015.18,1212.14 2015.77,1212.14 2016.35,1212.14 2016.94,1212.14 2017.53,1212.14 2018.11,1212.14 2018.7,1212.14 2019.28,1212.14 2019.87,1212.14 2020.46,1212.14 2021.04,1212.14 2021.63,1212.14 2022.22,1212.14 2022.8,1212.14 2023.39,1212.14 2023.98,1212.14 2024.56,1212.14 2025.15,1212.14 2025.73,1212.14 2026.32,1212.14 2026.91,1212.14 2027.49,1212.14 2028.08,1212.14 2028.67,1212.14 2029.25,1212.14 2029.84,1212.14 2030.43,1212.14 2031.01,1212.14 2031.6,1212.14 2032.19,1212.14 2032.77,1212.14 2033.36,1212.14 2033.94,1212.14 2034.53,1212.14 2035.12,1212.14 2035.7,1212.14 2036.29,1212.14 2036.88,1212.14 2037.46,1212.14 2038.05,1212.14 2038.64,1212.14 2039.22,1212.14 2039.81,1212.14 2040.4,1212.14 2040.98,1212.14 2041.57,1212.14 2042.15,1212.14 2042.74,1212.14 2043.33,1212.14 2043.91,1212.14 2044.5,1212.14 2045.09,1212.14 2045.67,1212.14 2046.26,1212.14 2046.85,1212.14 2047.43,1212.14 2048.02,1212.14 2048.6,1212.14 2049.19,1212.14 2049.78,1212.14 2050.36,1212.14 2050.95,1212.14 2051.54,1212.14 2052.12,1212.14 2052.71,1212.14 2053.3,1212.14 2053.88,1212.14 2054.47,1212.14 2055.06,1212.14 2055.64,1212.14 2056.23,1212.14 2056.81,1212.14 2057.4,1212.14 2057.99,1212.14 2058.57,1212.14 2059.16,1212.14 2059.75,1212.14 2060.33,1212.14 2060.92,1212.14 2061.51,1212.14 2062.09,1212.14 2062.68,1212.14 2063.27,1212.14 2063.85,1212.14 2064.44,1212.14 2065.02,1212.14 2065.61,1212.14 2066.2,1212.14 2066.78,1212.14 2067.37,1212.14 2067.96,1212.14 2068.54,1212.14 2069.13,1212.14 2069.72,1212.14 2070.3,1212.14 2070.89,1212.14 2071.48,1212.14 2072.06,1212.14 2072.65,1212.14 2073.23,1212.14 2073.82,1212.14 2074.41,1212.14 2074.99,1212.14 2075.58,1212.14 2076.17,1212.14 2076.75,1212.14 2077.34,1212.14 2077.93,1212.14 2078.51,1212.14 2079.1,1212.14 2079.68,1212.14 2080.27,1212.14 2080.86,1212.14 2081.44,1212.14 2082.03,1212.14 2082.62,1212.14 2083.2,1212.14 2083.79,1212.14 2084.38,1212.14 2084.96,1212.14 2085.55,1212.14 2086.14,1212.14 2086.72,1212.14 2087.31,1212.14 2087.89,1212.14 2088.48,1212.14 2089.07,1212.14 2089.65,1212.14 2090.24,1212.14 2090.83,1212.14 2091.41,1212.14 2092,1212.14 2092.59,1212.14 2093.17,1212.14 2093.76,1212.14 2094.35,1212.14 2094.93,1212.14 2095.52,1212.14 2096.1,1212.14 2096.69,1212.14 2097.28,1212.14 2097.86,1212.14 2098.45,1212.14 2099.04,1212.14 2099.62,1212.14 2100.21,1212.14 2100.8,1212.14 2101.38,1212.14 2101.97,1212.14 2102.55,1212.14 2103.14,1212.14 2103.73,1212.14 2104.31,1212.14 2104.9,1212.14 2105.49,1212.14 2106.07,1212.14 2106.66,1212.14 2107.25,1212.14 2107.83,1212.14 2108.42,1212.14 2109.01,1212.14 2109.59,1212.14 2110.18,1212.14 2110.76,1212.14 2111.35,1212.14 2111.94,1212.14 2112.52,1212.14 2113.11,1212.14 2113.7,1212.14 2114.28,1212.14 2114.87,1212.14 2115.46,1212.14 2116.04,1212.14 2116.63,1212.14 2117.22,1212.14 2117.8,1212.14 2118.39,1212.14 2118.97,1212.14 2119.56,1212.14 2120.15,1212.14 2120.73,1212.14 2121.32,1212.14 2121.91,1212.14 2122.49,1212.14 2123.08,1212.14 2123.67,1212.14 2124.25,1212.14 2124.84,1212.14 2125.42,1212.14 2126.01,1212.14 2126.6,1212.14 2127.18,1212.14 2127.77,1212.14 2128.36,1212.14 2128.94,1212.14 2129.53,1212.14 2130.12,1212.14 2130.7,1212.14 2131.29,1212.14 2131.88,1212.14 2132.46,1212.14 2133.05,1212.14 2133.63,1212.14 2134.22,1212.14 2134.81,1212.14 2135.39,1212.14 2135.98,1212.14 2136.57,1212.14 2137.15,1212.14 2137.74,1212.14 2138.33,1212.14 2138.91,1212.14 2139.5,1212.14 2140.09,1212.14 2140.67,1212.14 2141.26,1212.14 2141.84,1212.14 2142.43,1212.14 2143.02,1212.14 2143.6,1212.14 2144.19,1212.14 2144.78,1212.14 2145.36,1212.14 2145.95,1212.14 2146.54,1212.14 2147.12,1212.14 2147.71,1212.14 2148.3,1212.14 2148.88,1212.14 2149.47,1212.14 2150.05,1212.14 2150.64,1212.14 2151.23,1212.14 2151.81,1212.14 2152.4,1212.14 2152.99,1212.14 2153.57,1212.14 2154.16,1212.14 2154.75,1212.14 2155.33,1212.14 2155.92,1212.14 2156.5,1212.14 2157.09,1212.14 2157.68,1212.14 2158.26,1212.14 \"/>\n<path clip-path=\"url(#clip432)\" d=\"M986.025 1211.87 L986.612 1211.87 L987.198 1211.87 L987.785 1211.87 L988.371 1211.87 L988.957 1211.87 L989.544 1211.87 L990.13 1211.87 L990.717 1211.87 L991.303 1211.87 L991.889 1211.87 L992.476 1211.87 L993.062 1211.87 L993.649 1211.87 L994.235 1211.87 L994.822 1211.87 L995.408 1211.87 L995.994 1211.87 L996.581 1211.87 L997.167 1211.87 L997.754 1211.87 L998.34 1211.87 L998.926 1211.87 L999.513 1211.87 L1000.1 1211.87 L1000.69 1211.87 L1001.27 1211.87 L1001.86 1211.87 L1002.44 1211.87 L1003.03 1211.87 L1003.62 1211.87 L1004.2 1211.87 L1004.79 1211.87 L1005.38 1211.87 L1005.96 1211.87 L1006.55 1211.87 L1007.14 1211.87 L1007.72 1211.87 L1008.31 1211.87 L1008.9 1211.87 L1009.48 1211.87 L1010.07 1211.87 L1010.65 1211.87 L1011.24 1211.87 L1011.83 1211.87 L1012.41 1211.87 L1013 1211.87 L1013.59 1211.87 L1014.17 1211.87 L1014.76 1211.87 L1015.35 1211.87 L1015.93 1211.87 L1016.52 1211.87 L1017.11 1211.87 L1017.69 1211.87 L1018.28 1211.87 L1018.86 1211.87 L1019.45 1211.87 L1020.04 1211.87 L1020.62 1211.87 L1021.21 1211.87 L1021.8 1211.87 L1022.38 1211.87 L1022.97 1211.87 L1023.56 1211.87 L1024.14 1211.87 L1024.73 1211.87 L1025.32 1211.87 L1025.9 1211.87 L1026.49 1211.87 L1027.07 1211.87 L1027.66 1211.87 L1028.25 1211.87 L1028.83 1211.87 L1029.42 1211.87 L1030.01 1211.87 L1030.59 1211.87 L1031.18 1211.87 L1031.77 1211.87 L1032.35 1211.87 L1032.94 1211.87 L1033.52 1211.87 L1034.11 1211.87 L1034.7 1211.87 L1035.28 1211.87 L1035.87 1211.87 L1036.46 1211.87 L1037.04 1211.87 L1037.63 1211.87 L1038.22 1211.87 L1038.8 1211.87 L1039.39 1211.87 L1039.98 1211.87 L1040.56 1211.87 L1041.15 1211.87 L1041.73 1211.87 L1042.32 1211.87 L1042.91 1211.87 L1043.49 1211.87 L1044.08 1211.87 L1044.67 1211.87 L1045.25 1211.87 L1045.84 1211.87 L1046.43 1211.87 L1047.01 1211.87 L1047.6 1211.87 L1048.19 1211.87 L1048.77 1211.87 L1049.36 1211.87 L1049.94 1211.87 L1050.53 1211.87 L1051.12 1211.87 L1051.7 1211.87 L1052.29 1211.87 L1052.88 1211.87 L1053.46 1211.87 L1054.05 1211.87 L1054.64 1211.87 L1055.22 1211.87 L1055.81 1211.87 L1056.39 1211.87 L1056.98 1211.87 L1057.57 1211.87 L1058.15 1211.87 L1058.74 1211.87 L1059.33 1211.87 L1059.91 1211.87 L1060.5 1211.87 L1061.09 1211.87 L1061.67 1211.87 L1062.26 1211.87 L1062.85 1211.87 L1063.43 1211.87 L1064.02 1211.87 L1064.6 1211.87 L1065.19 1211.87 L1065.78 1211.87 L1066.36 1211.87 L1066.95 1211.87 L1067.54 1211.87 L1068.12 1211.87 L1068.71 1211.87 L1069.3 1211.87 L1069.88 1211.87 L1070.47 1211.87 L1071.06 1211.87 L1071.64 1211.87 L1072.23 1211.87 L1072.81 1211.87 L1073.4 1211.87 L1073.99 1211.87 L1074.57 1211.87 L1075.16 1211.87 L1075.75 1211.87 L1076.33 1211.87 L1076.92 1211.87 L1077.51 1211.87 L1078.09 1211.87 L1078.68 1211.87 L1079.26 1211.87 L1079.85 1211.87 L1080.44 1211.87 L1081.02 1211.87 L1081.61 1211.87 L1082.2 1211.87 L1082.78 1211.87 L1083.37 1211.87 L1083.96 1211.87 L1084.54 1211.87 L1085.13 1211.87 L1085.72 1211.87 L1086.3 1211.87 L1086.89 1211.87 L1087.47 1211.87 L1088.06 1211.87 L1088.65 1211.87 L1089.23 1211.87 L1089.82 1211.87 L1090.41 1211.87 L1090.99 1211.87 L1091.58 1211.87 L1092.17 1211.87 L1092.75 1211.87 L1093.34 1211.87 L1093.93 1211.87 L1094.51 1211.87 L1095.1 1211.87 L1095.68 1211.87 L1096.27 1211.87 L1096.86 1211.87 L1097.44 1211.87 L1098.03 1211.87 L1098.62 1211.87 L1099.2 1211.87 L1099.79 1211.87 L1100.38 1211.87 L1100.96 1211.87 L1101.55 1211.87 L1102.14 1211.87 L1102.72 1211.87 L1103.31 1211.87 L1103.89 1211.87 L1104.48 1211.87 L1105.07 1211.87 L1105.65 1211.87 L1106.24 1211.87 L1106.83 1211.87 L1107.41 1211.87 L1108 1211.87 L1108.59 1211.87 L1109.17 1211.87 L1109.76 1211.87 L1110.34 1211.87 L1110.93 1211.87 L1111.52 1211.87 L1112.1 1211.87 L1112.69 1211.87 L1113.28 1211.87 L1113.86 1211.87 L1114.45 1211.87 L1115.04 1211.87 L1115.62 1211.87 L1116.21 1211.87 L1116.8 1211.87 L1117.38 1211.87 L1117.97 1211.87 L1118.55 1211.87 L1119.14 1211.87 L1119.73 1211.87 L1120.31 1211.87 L1120.9 1211.87 L1121.49 1211.87 L1122.07 1211.87 L1122.66 1211.87 L1123.25 1211.87 L1123.83 1211.87 L1124.42 1211.87 L1125.01 1211.87 L1125.59 1211.87 L1126.18 1211.87 L1126.76 1211.87 L1127.35 1211.87 L1127.94 1211.87 L1128.52 1211.87 L1129.11 1211.87 L1129.7 1211.87 L1130.28 1211.87 L1130.87 1211.87 L1131.46 1211.87 L1132.04 1211.87 L1132.63 1211.87 L1133.21 1211.87 L1133.8 1211.87 L1134.39 1211.87 L1134.97 1211.87 L1135.56 1211.87 L1136.15 1211.87 L1136.73 1211.87 L1137.32 1211.87 L1137.91 1211.87 L1138.49 1211.87 L1139.08 1211.87 L1139.67 1211.87 L1140.25 1211.87 L1140.84 1211.87 L1141.42 1211.87 L1142.01 1211.87 L1142.6 1211.87 L1143.18 1211.87 L1143.77 1211.87 L1144.36 1211.87 L1144.94 1211.87 L1145.53 1211.87 L1146.12 1211.87 L1146.7 1211.87 L1147.29 1211.87 L1147.88 1211.87 L1148.46 1211.87 L1149.05 1211.87 L1149.63 1211.87 L1150.22 1211.87 L1150.81 1211.87 L1151.39 1211.87 L1151.98 1211.87 L1152.57 1211.87 L1153.15 1211.87 L1153.74 1211.87 L1154.33 1211.87 L1154.91 1211.87 L1155.5 1211.87 L1156.09 1211.87 L1156.67 1211.87 L1157.26 1211.87 L1157.84 1211.87 L1158.43 1211.87 L1159.02 1211.87 L1159.6 1211.87 L1160.19 1211.87 L1160.78 1211.87 L1161.36 1211.87 L1161.95 1211.87 L1162.54 1211.87 L1163.12 1211.87 L1163.71 1211.87 L1164.29 1211.87 L1164.88 1211.87 L1165.47 1211.87 L1166.05 1211.87 L1166.64 1211.87 L1167.23 1211.87 L1167.81 1211.87 L1168.4 1211.87 L1168.99 1211.87 L1169.57 1211.87 L1170.16 1211.87 L1170.75 1211.87 L1171.33 1211.87 L1171.92 1211.87 L1172.5 1211.87 L1173.09 1211.87 L1173.68 1211.87 L1174.26 1211.87 L1174.85 1211.87 L1175.44 1211.87 L1176.02 1211.87 L1176.61 1211.87 L1177.2 1211.87 L1177.78 1211.87 L1178.37 1211.87 L1178.96 1211.87 L1179.54 1211.87 L1180.13 1211.87 L1180.71 1211.87 L1181.3 1211.87 L1181.89 1211.87 L1182.47 1211.87 L1183.06 1211.87 L1183.65 1211.87 L1184.23 1211.87 L1184.82 1211.87 L1185.41 1211.87 L1185.99 1211.87 L1186.58 1211.87 L1187.16 1211.87 L1187.75 1211.87 L1188.34 1211.87 L1188.92 1211.87 L1189.51 1211.87 L1190.1 1211.87 L1190.68 1211.87 L1191.27 1211.87 L1191.86 1211.87 L1192.44 1211.87 L1193.03 1211.87 L1193.62 1211.87 L1194.2 1211.87 L1194.79 1211.87 L1195.37 1211.87 L1195.96 1211.87 L1196.55 1211.87 L1197.13 1211.87 L1197.72 1211.87 L1198.31 1211.87 L1198.89 1211.87 L1199.48 1211.87 L1200.07 1211.87 L1200.65 1211.87 L1201.24 1211.87 L1201.83 1211.87 L1202.41 1211.87 L1203 1211.87 L1203.58 1211.87 L1204.17 1211.87 L1204.76 1211.87 L1205.34 1211.87 L1205.93 1211.87 L1206.52 1211.87 L1207.1 1211.87 L1207.69 1211.87 L1208.28 1211.87 L1208.86 1211.87 L1209.45 1211.87 L1210.03 1211.87 L1210.62 1211.87 L1211.21 1211.87 L1211.79 1211.87 L1212.38 1211.87 L1212.97 1211.87 L1213.55 1211.87 L1214.14 1211.87 L1214.73 1211.87 L1215.31 1211.87 L1215.9 1211.87 L1216.49 1211.87 L1217.07 1211.87 L1217.66 1211.87 L1218.24 1211.87 L1218.83 1211.87 L1219.42 1211.87 L1220 1211.87 L1220.59 1211.87 L1221.18 1211.87 L1221.76 1211.87 L1222.35 1211.87 L1222.94 1211.87 L1223.52 1211.87 L1224.11 1211.87 L1224.7 1211.87 L1225.28 1211.87 L1225.87 1211.87 L1226.45 1211.87 L1227.04 1211.87 L1227.63 1211.87 L1228.21 1211.87 L1228.8 1211.87 L1229.39 1211.87 L1229.97 1211.87 L1230.56 1211.87 L1231.15 1211.87 L1231.73 1211.87 L1232.32 1211.87 L1232.91 1211.87 L1233.49 1211.87 L1234.08 1211.87 L1234.66 1211.87 L1235.25 1211.87 L1235.84 1211.87 L1236.42 1211.87 L1237.01 1211.87 L1237.6 1211.87 L1238.18 1211.87 L1238.77 1211.87 L1239.36 1211.87 L1239.94 1211.87 L1240.53 1211.87 L1241.11 1211.87 L1241.7 1211.87 L1242.29 1211.87 L1242.87 1211.87 L1243.46 1211.87 L1244.05 1211.87 L1244.63 1211.87 L1245.22 1211.87 L1245.81 1211.87 L1246.39 1211.87 L1246.98 1211.87 L1247.57 1211.87 L1248.15 1211.87 L1248.74 1211.87 L1249.32 1211.87 L1249.91 1211.87 L1250.5 1211.87 L1251.08 1211.87 L1251.67 1211.87 L1252.26 1211.87 L1252.84 1211.87 L1253.43 1211.87 L1254.02 1211.87 L1254.6 1211.87 L1255.19 1211.87 L1255.78 1211.87 L1256.36 1211.87 L1256.95 1211.87 L1257.53 1211.87 L1258.12 1211.87 L1258.71 1211.87 L1259.29 1211.87 L1259.88 1211.87 L1260.47 1211.87 L1261.05 1211.87 L1261.64 1211.87 L1262.23 1211.87 L1262.81 1211.87 L1263.4 1211.87 L1263.98 1211.87 L1264.57 1211.87 L1265.16 1211.87 L1265.74 1211.87 L1266.33 1211.87 L1266.92 1211.87 L1267.5 1211.87 L1268.09 1211.87 L1268.68 1211.87 L1269.26 1211.87 L1269.85 1211.87 L1270.44 1211.87 L1271.02 1211.87 L1271.61 1211.87 L1272.19 1211.87 L1272.78 1211.87 L1273.37 1211.87 L1273.95 1211.87 L1274.54 1211.87 L1275.13 1211.87 L1275.71 1211.87 L1276.3 1211.87 L1276.89 1211.87 L1277.47 1211.87 L1278.06 1211.87 L1278.65 1211.87 L1279.23 1211.87 L1279.82 1211.87 L1280.4 1211.87 L1280.99 1211.87 L1281.58 1211.87 L1282.16 1211.87 L1282.75 1211.87 L1283.34 1211.87 L1283.92 1211.87 L1284.51 1211.87 L1285.1 1211.87 L1285.68 1211.87 L1286.27 1211.87 L1286.86 1211.87 L1287.44 1211.87 L1288.03 1211.87 L1288.61 1211.87 L1289.2 1211.87 L1289.79 1211.87 L1290.37 1211.87 L1290.96 1211.87 L1291.55 1211.87 L1292.13 1211.87 L1292.72 1211.87 L1293.31 1211.87 L1293.89 1211.87 L1294.48 1211.87 L1295.06 1211.87 L1295.65 1211.87 L1296.24 1211.87 L1296.82 1211.87 L1297.41 1211.87 L1298 1211.87 L1298.58 1211.87 L1299.17 1211.87 L1299.76 1211.87 L1300.34 1211.87 L1300.93 1211.87 L1301.52 1211.87 L1302.1 1211.87 L1302.69 1211.87 L1303.27 1211.87 L1303.86 1211.87 L1304.45 1211.87 L1305.03 1211.87 L1305.62 1211.87 L1306.21 1211.87 L1306.79 1211.87 L1307.38 1211.87 L1307.97 1211.87 L1308.55 1211.87 L1309.14 1211.87 L1309.73 1211.87 L1310.31 1211.87 L1310.9 1211.87 L1311.48 1211.87 L1312.07 1211.87 L1312.66 1211.87 L1313.24 1211.87 L1313.83 1211.87 L1314.42 1211.87 L1315 1211.87 L1315.59 1211.87 L1316.18 1211.87 L1316.76 1211.87 L1317.35 1211.87 L1317.93 1211.87 L1318.52 1211.87 L1319.11 1211.87 L1319.69 1211.87 L1320.28 1211.87 L1320.87 1211.87 L1321.45 1211.87 L1322.04 1211.87 L1322.63 1211.87 L1323.21 1211.87 L1323.8 1211.87 L1324.39 1211.87 L1324.97 1211.87 L1325.56 1211.87 L1326.14 1211.87 L1326.73 1211.87 L1327.32 1211.87 L1327.9 1211.87 L1328.49 1211.87 L1329.08 1211.87 L1329.66 1211.87 L1330.25 1211.87 L1330.84 1211.87 L1331.42 1211.87 L1332.01 1211.87 L1332.6 1211.87 L1333.18 1211.87 L1333.77 1211.87 L1334.35 1211.87 L1334.94 1211.87 L1335.53 1211.87 L1336.11 1211.87 L1336.7 1211.87 L1337.29 1211.87 L1337.87 1211.87 L1338.46 1211.87 L1339.05 1211.87 L1339.63 1211.87 L1340.22 1211.87 L1340.8 1211.87 L1341.39 1211.87 L1341.98 1211.87 L1342.56 1211.87 L1343.15 1211.87 L1343.74 1211.87 L1344.32 1211.87 L1344.91 1211.87 L1345.5 1211.87 L1346.08 1211.87 L1346.67 1211.87 L1347.26 1211.87 L1347.84 1211.87 L1348.43 1211.87 L1349.01 1211.87 L1349.6 1211.87 L1350.19 1211.87 L1350.77 1211.87 L1351.36 1211.87 L1351.95 1211.87 L1352.53 1211.87 L1353.12 1211.87 L1353.71 1211.87 L1354.29 1211.87 L1354.88 1211.87 L1355.47 1211.87 L1356.05 1211.87 L1356.64 1211.87 L1357.22 1211.87 L1357.81 1211.87 L1358.4 1211.87 L1358.98 1211.87 L1359.57 1211.87 L1360.16 1211.87 L1360.74 1211.87 L1361.33 1211.87 L1361.92 1211.87 L1362.5 1211.87 L1363.09 1211.87 L1363.68 1211.87 L1364.26 1211.87 L1364.85 1211.87 L1365.43 1211.87 L1366.02 1211.87 L1366.61 1211.87 L1367.19 1211.87 L1367.78 1211.87 L1368.37 1211.87 L1368.95 1211.87 L1369.54 1211.87 L1370.13 1211.87 L1370.71 1211.87 L1371.3 1211.87 L1371.88 1211.87 L1372.47 1211.87 L1373.06 1211.87 L1373.64 1211.87 L1374.23 1211.87 L1374.82 1211.87 L1375.4 1211.87 L1375.99 1211.87 L1376.58 1211.87 L1377.16 1211.87 L1377.75 1211.87 L1378.34 1211.87 L1378.92 1211.87 L1379.51 1211.87 L1380.09 1211.87 L1380.68 1211.87 L1381.27 1211.87 L1381.85 1211.87 L1382.44 1211.87 L1383.03 1211.87 L1383.61 1211.87 L1384.2 1211.87 L1384.79 1211.87 L1385.37 1211.87 L1385.96 1211.87 L1386.55 1211.87 L1387.13 1211.87 L1387.72 1211.87 L1388.3 1211.87 L1388.89 1211.87 L1389.48 1211.87 L1390.06 1211.87 L1390.65 1211.87 L1391.24 1211.87 L1391.82 1211.87 L1392.41 1211.87 L1393 1211.87 L1393.58 1211.87 L1394.17 1211.87 L1394.75 1211.87 L1395.34 1211.87 L1395.93 1211.87 L1396.51 1211.87 L1397.1 1211.87 L1397.69 1211.87 L1398.27 1211.87 L1398.86 1211.87 L1399.45 1211.87 L1400.03 1211.87 L1400.62 1211.87 L1401.21 1211.87 L1401.79 1211.87 L1402.38 1211.87 L1402.96 1211.87 L1403.55 1211.87 L1404.14 1211.87 L1404.72 1211.87 L1405.31 1211.87 L1405.9 1211.87 L1406.48 1211.87 L1407.07 1211.87 L1407.66 1211.87 L1408.24 1211.87 L1408.83 1211.87 L1409.42 1211.87 L1410 1211.87 L1410.59 1211.87 L1411.17 1211.87 L1411.76 1211.87 L1412.35 1211.87 L1412.93 1211.87 L1413.52 1211.87 L1414.11 1211.87 L1414.69 1211.87 L1415.28 1211.87 L1415.87 1211.87 L1416.45 1211.87 L1417.04 1211.87 L1417.63 1211.87 L1418.21 1211.87 L1418.8 1211.87 L1419.38 1211.87 L1419.97 1211.87 L1420.56 1211.87 L1421.14 1211.87 L1421.73 1211.87 L1422.32 1211.87 L1422.9 1211.87 L1423.49 1211.87 L1424.08 1211.87 L1424.66 1211.87 L1425.25 1211.87 L1425.83 1211.87 L1426.42 1211.87 L1427.01 1211.87 L1427.59 1211.87 L1428.18 1211.87 L1428.77 1211.87 L1429.35 1211.87 L1429.94 1211.87 L1430.53 1211.87 L1431.11 1211.87 L1431.7 1211.87 L1432.29 1211.87 L1432.87 1211.87 L1433.46 1211.87 L1434.04 1211.87 L1434.63 1211.87 L1435.22 1211.87 L1435.8 1211.87 L1436.39 1211.87 L1436.98 1211.87 L1437.56 1211.87 L1438.15 1211.87 L1438.74 1211.87 L1439.32 1211.87 L1439.91 1211.87 L1440.5 1211.87 L1441.08 1211.87 L1441.67 1211.87 L1442.25 1211.87 L1442.84 1211.87 L1443.43 1211.87 L1444.01 1211.87 L1444.6 1211.87 L1445.19 1211.87 L1445.77 1211.87 L1446.36 1211.87 L1446.95 1211.87 L1447.53 1211.87 L1448.12 1211.87 L1448.7 1211.87 L1449.29 1211.87 L1449.88 1211.87 L1450.46 1211.87 L1451.05 1211.87 L1451.64 1211.87 L1452.22 1211.87 L1452.81 1211.87 L1453.4 1211.87 L1453.98 1211.87 L1454.57 1211.87 L1455.16 1211.87 L1455.74 1211.87 L1456.33 1211.87 L1456.91 1211.87 L1457.5 1211.87 L1458.09 1211.87 L1458.67 1211.87 L1459.26 1211.87 L1459.85 1211.87 L1460.43 1211.87 L1461.02 1211.87 L1461.61 1211.87 L1462.19 1211.87 L1462.78 1211.87 L1463.37 1211.87 L1463.95 1211.87 L1464.54 1211.87 L1465.12 1211.87 L1465.71 1211.87 L1466.3 1211.87 L1466.88 1211.87 L1467.47 1211.87 L1468.06 1211.87 L1468.64 1211.87 L1469.23 1211.87 L1469.82 1211.87 L1470.4 1211.87 L1470.99 1211.87 L1471.57 1211.87 L1472.16 1211.87 L1472.75 1211.87 L1473.33 1211.87 L1473.92 1211.87 L1474.51 1211.87 L1475.09 1211.87 L1475.68 1211.87 L1476.27 1211.87 L1476.85 1211.87 L1477.44 1211.87 L1478.03 1211.87 L1478.61 1211.87 L1479.2 1211.87 L1479.78 1211.87 L1480.37 1211.87 L1480.96 1211.87 L1481.54 1211.87 L1482.13 1211.87 L1482.72 1211.87 L1483.3 1211.87 L1483.89 1211.87 L1484.48 1211.87 L1485.06 1211.87 L1485.65 1211.87 L1486.24 1211.87 L1486.82 1211.87 L1487.41 1211.87 L1487.99 1211.87 L1488.58 1211.87 L1489.17 1211.87 L1489.75 1211.87 L1490.34 1211.87 L1490.93 1211.87 L1491.51 1211.87 L1492.1 1211.87 L1492.69 1211.87 L1493.27 1211.87 L1493.86 1211.87 L1494.45 1211.87 L1495.03 1211.87 L1495.62 1211.87 L1496.2 1211.87 L1496.79 1211.87 L1497.38 1211.87 L1497.96 1211.87 L1498.55 1211.87 L1499.14 1211.87 L1499.72 1211.87 L1500.31 1211.87 L1500.9 1211.87 L1501.48 1211.87 L1502.07 1211.87 L1502.65 1211.87 L1503.24 1211.87 L1503.83 1211.87 L1504.41 1211.87 L1505 1211.87 L1505.59 1211.87 L1506.17 1211.87 L1506.76 1211.87 L1507.35 1211.87 L1507.93 1211.87 L1508.52 1211.87 L1509.11 1211.87 L1509.69 1211.87 L1510.28 1211.87 L1510.86 1211.87 L1511.45 1211.87 L1512.04 1211.87 L1512.62 1211.87 L1513.21 1211.87 L1513.8 1211.87 L1514.38 1211.87 L1514.97 1211.87 L1515.56 1211.87 L1516.14 1211.87 L1516.73 1211.87 L1517.32 1211.87 L1517.9 1211.87 L1518.49 1211.87 L1519.07 1211.87 L1519.66 1211.87 L1520.25 1211.87 L1520.83 1211.87 L1521.42 1211.87 L1522.01 1211.87 L1522.59 1211.87 L1523.18 1211.87 L1523.77 1211.87 L1524.35 1211.87 L1524.94 1211.87 L1525.52 1211.87 L1526.11 1211.87 L1526.7 1211.87 L1527.28 1211.87 L1527.87 1211.87 L1528.46 1211.87 L1529.04 1211.87 L1529.63 1211.87 L1530.22 1211.87 L1530.8 1211.87 L1531.39 1211.87 L1531.98 1211.87 L1532.56 1211.87 L1533.15 1211.87 L1533.73 1211.87 L1534.32 1211.87 L1534.91 1211.87 L1535.49 1211.87 L1536.08 1211.87 L1536.67 1211.87 L1537.25 1211.87 L1537.84 1211.87 L1538.43 1211.87 L1539.01 1211.87 L1539.6 1211.87 L1540.19 1211.87 L1540.77 1211.87 L1541.36 1211.87 L1541.94 1211.87 L1542.53 1211.87 L1543.12 1211.87 L1543.7 1211.87 L1544.29 1211.87 L1544.88 1211.87 L1545.46 1211.87 L1546.05 1211.87 L1546.64 1211.87 L1547.22 1211.87 L1547.81 1211.87 L1548.4 1211.87 L1548.98 1211.87 L1549.57 1211.87 L1550.15 1211.87 L1550.74 1211.87 L1551.33 1211.87 L1551.91 1211.87 L1552.5 1211.87 L1553.09 1211.87 L1553.67 1211.87 L1554.26 1211.87 L1554.85 1211.87 L1555.43 1211.87 L1556.02 1211.87 L1556.6 1211.87 L1557.19 1211.87 L1557.78 1211.87 L1558.36 1211.87 L1558.95 1211.87 L1559.54 1211.87 L1560.12 1211.87 L1560.71 1211.87 L1561.3 1211.87 L1561.88 1211.87 L1562.47 1211.87 L1563.06 1211.87 L1563.64 1211.87 L1564.23 1211.87 L1564.81 1211.87 L1565.4 1211.87 L1565.99 1211.87 L1566.57 1211.87 L1567.16 1211.87 L1567.75 1211.87 L1568.33 1211.87 L1568.92 1211.87 L1569.51 1211.87 L1570.09 1211.87 L1570.68 1211.87 L1571.27 1211.87 L1571.85 1211.87 L1572.44 1211.87 L1573.02 1211.87 L1573.61 1211.87 L1574.2 1211.87 L1574.78 1211.87 L1575.37 1211.87 L1575.96 1211.87 L1576.54 1211.87 L1577.13 1211.87 L1577.72 1211.87 L1578.3 1211.87 L1578.89 1211.87 L1579.47 1211.87 L1580.06 1211.87 L1580.65 1211.87 L1581.23 1211.87 L1581.82 1211.87 L1582.41 1211.87 L1582.99 1211.87 L1583.58 1211.87 L1584.17 1211.87 L1584.75 1211.87 L1585.34 1211.87 L1585.93 1211.87 L1586.51 1211.87 L1587.1 1211.87 L1587.68 1211.87 L1588.27 1211.87 L1588.86 1211.87 L1589.44 1211.87 L1590.03 1211.87 L1590.62 1211.87 L1591.2 1211.87 L1591.79 1211.87 L1592.38 1211.87 L1592.96 1211.87 L1593.55 1211.87 L1594.14 1211.87 L1594.72 1211.87 L1595.31 1211.87 L1595.89 1211.87 L1596.48 1211.87 L1597.07 1211.87 L1597.65 1211.87 L1598.24 1211.87 L1598.83 1211.87 L1599.41 1211.87 L1600 1211.87 L1600.59 1211.87 L1601.17 1211.87 L1601.76 1211.87 L1602.34 1211.87 L1602.93 1211.87 L1603.52 1211.87 L1604.1 1211.87 L1604.69 1211.87 L1605.28 1211.87 L1605.86 1211.87 L1606.45 1211.87 L1607.04 1211.87 L1607.62 1211.87 L1608.21 1211.87 L1608.8 1211.87 L1609.38 1211.87 L1609.97 1211.87 L1610.55 1211.87 L1611.14 1211.87 L1611.73 1211.87 L1612.31 1211.87 L1612.9 1211.87 L1613.49 1211.87 L1614.07 1211.87 L1614.66 1211.87 L1615.25 1211.87 L1615.83 1211.87 L1616.42 1211.87 L1617.01 1211.87 L1617.59 1211.87 L1618.18 1211.87 L1618.76 1211.87 L1619.35 1211.87 L1619.94 1211.87 L1620.52 1211.87 L1621.11 1211.87 L1621.7 1211.87 L1622.28 1211.87 L1622.87 1211.87 L1623.46 1211.87 L1624.04 1211.87 L1624.63 1211.87 L1625.22 1211.87 L1625.8 1211.87 L1626.39 1211.87 L1626.97 1211.87 L1627.56 1211.87 L1628.15 1211.87 L1628.73 1211.87 L1629.32 1211.87 L1629.91 1211.87 L1630.49 1211.87 L1631.08 1211.87 L1631.67 1211.87 L1632.25 1211.87 L1632.84 1211.87 L1633.42 1211.87 L1634.01 1211.87 L1634.6 1211.87 L1635.18 1211.87 L1635.77 1211.87 L1636.36 1211.87 L1636.94 1211.87 L1637.53 1211.87 L1638.12 1211.87 L1638.7 1211.87 L1639.29 1211.87 L1639.88 1211.87 L1640.46 1211.87 L1641.05 1211.87 L1641.63 1211.87 L1642.22 1211.87 L1642.81 1211.87 L1643.39 1211.87 L1643.98 1211.87 L1644.57 1211.87 L1645.15 1211.87 L1645.74 1211.87 L1646.33 1211.87 L1646.91 1211.87 L1647.5 1211.87 L1648.09 1211.87 L1648.67 1211.87 L1649.26 1211.87 L1649.84 1211.87 L1650.43 1211.87 L1651.02 1211.87 L1651.6 1211.87 L1652.19 1211.87 L1652.78 1211.87 L1653.36 1211.87 L1653.95 1211.87 L1654.54 1211.87 L1655.12 1211.87 L1655.71 1211.87 L1656.29 1211.87 L1656.88 1211.87 L1657.47 1211.87 L1658.05 1211.87 L1658.64 1211.87 L1659.23 1211.87 L1659.81 1211.87 L1660.4 1211.87 L1660.99 1211.87 L1661.57 1211.87 L1662.16 1211.87 L1662.75 1211.87 L1663.33 1211.87 L1663.92 1211.87 L1664.5 1211.87 L1665.09 1211.87 L1665.68 1211.87 L1666.26 1211.87 L1666.85 1211.87 L1667.44 1211.87 L1668.02 1211.87 L1668.61 1211.87 L1669.2 1211.87 L1669.78 1211.87 L1670.37 1211.87 L1670.96 1211.87 L1671.54 1211.87 L1672.13 1211.87 L1672.71 1211.87 L1673.3 1211.87 L1673.89 1211.87 L1674.47 1211.87 L1675.06 1211.87 L1675.65 1211.87 L1676.23 1211.87 L1676.82 1211.87 L1677.41 1211.87 L1677.99 1211.87 L1678.58 1211.87 L1679.17 1211.87 L1679.75 1211.87 L1680.34 1211.87 L1680.92 1211.87 L1681.51 1211.87 L1682.1 1211.87 L1682.68 1211.87 L1683.27 1211.87 L1683.86 1211.87 L1684.44 1211.87 L1685.03 1211.87 L1685.62 1211.87 L1686.2 1211.87 L1686.79 1211.87 L1687.37 1211.87 L1687.96 1211.87 L1688.55 1211.87 L1689.13 1211.87 L1689.72 1211.87 L1690.31 1211.87 L1690.89 1211.87 L1691.48 1211.87 L1692.07 1211.87 L1692.65 1211.87 L1693.24 1211.87 L1693.83 1211.87 L1694.41 1211.87 L1695 1211.87 L1695.58 1211.87 L1696.17 1211.87 L1696.76 1211.87 L1697.34 1211.87 L1697.93 1211.87 L1698.52 1211.87 L1699.1 1211.87 L1699.69 1211.87 L1700.28 1211.87 L1700.86 1211.87 L1701.45 1211.87 L1702.04 1211.87 L1702.62 1211.87 L1703.21 1211.87 L1703.79 1211.87 L1704.38 1211.87 L1704.97 1211.87 L1705.55 1211.87 L1706.14 1211.87 L1706.73 1211.87 L1707.31 1211.87 L1707.9 1211.87 L1708.49 1211.87 L1709.07 1211.87 L1709.66 1211.87 L1710.24 1211.87 L1710.83 1211.87 L1711.42 1211.87 L1712 1211.87 L1712.59 1211.87 L1713.18 1211.87 L1713.76 1211.87 L1714.35 1211.87 L1714.94 1211.87 L1715.52 1211.87 L1716.11 1211.87 L1716.7 1211.87 L1717.28 1211.87 L1717.87 1211.87 L1718.45 1211.87 L1719.04 1211.87 L1719.63 1211.87 L1720.21 1211.87 L1720.8 1211.87 L1721.39 1211.87 L1721.97 1211.87 L1722.56 1211.87 L1723.15 1211.87 L1723.73 1211.87 L1724.32 1211.87 L1724.91 1211.87 L1725.49 1211.87 L1726.08 1211.87 L1726.66 1211.87 L1727.25 1211.87 L1727.84 1211.87 L1728.42 1211.87 L1729.01 1211.87 L1729.6 1211.87 L1730.18 1211.87 L1730.77 1211.87 L1731.36 1211.87 L1731.94 1211.87 L1732.53 1211.87 L1733.11 1211.87 L1733.7 1211.87 L1734.29 1211.87 L1734.87 1211.87 L1735.46 1211.87 L1736.05 1211.87 L1736.63 1211.87 L1737.22 1211.87 L1737.81 1211.87 L1738.39 1211.87 L1738.98 1211.87 L1739.57 1211.87 L1740.15 1211.87 L1740.74 1211.87 L1741.32 1211.87 L1741.91 1211.87 L1742.5 1211.87 L1743.08 1211.87 L1743.67 1211.87 L1744.26 1211.87 L1744.84 1211.87 L1745.43 1211.87 L1746.02 1211.87 L1746.6 1211.87 L1747.19 1211.87 L1747.78 1211.87 L1748.36 1211.87 L1748.95 1211.87 L1749.53 1211.87 L1750.12 1211.87 L1750.71 1211.87 L1751.29 1211.87 L1751.88 1211.87 L1752.47 1211.87 L1753.05 1211.87 L1753.64 1211.87 L1754.23 1211.87 L1754.81 1211.87 L1755.4 1211.87 L1755.99 1211.87 L1756.57 1211.87 L1757.16 1211.87 L1757.74 1211.87 L1758.33 1211.87 L1758.92 1211.87 L1759.5 1211.87 L1760.09 1211.87 L1760.68 1211.87 L1761.26 1211.87 L1761.85 1211.87 L1762.44 1211.87 L1763.02 1211.87 L1763.61 1211.87 L1764.19 1211.87 L1764.78 1211.87 L1765.37 1211.87 L1765.95 1211.87 L1766.54 1211.87 L1767.13 1211.87 L1767.71 1211.87 L1768.3 1211.87 L1768.89 1211.87 L1769.47 1211.87 L1770.06 1211.87 L1770.65 1211.87 L1771.23 1211.87 L1771.82 1211.87 L1772.4 1211.87 L1772.99 1211.87 L1773.58 1211.87 L1774.16 1211.87 L1774.75 1211.87 L1775.34 1211.87 L1775.92 1211.87 L1776.51 1211.87 L1777.1 1211.87 L1777.68 1211.87 L1778.27 1211.87 L1778.86 1211.87 L1779.44 1211.87 L1780.03 1211.87 L1780.61 1211.87 L1781.2 1211.87 L1781.79 1211.87 L1782.37 1211.87 L1782.96 1211.87 L1783.55 1211.87 L1784.13 1211.87 L1784.72 1211.87 L1785.31 1211.87 L1785.89 1211.87 L1786.48 1211.87 L1787.06 1211.87 L1787.65 1211.87 L1788.24 1211.87 L1788.82 1211.87 L1789.41 1211.87 L1790 1211.87 L1790.58 1211.87 L1791.17 1211.87 L1791.76 1211.87 L1792.34 1211.87 L1792.93 1211.87 L1793.52 1211.87 L1794.1 1211.87 L1794.69 1211.87 L1795.27 1211.87 L1795.86 1211.87 L1796.45 1211.87 L1797.03 1211.87 L1797.62 1211.87 L1798.21 1211.87 L1798.79 1211.87 L1799.38 1211.87 L1799.97 1211.87 L1800.55 1211.87 L1801.14 1211.87 L1801.73 1211.87 L1802.31 1211.87 L1802.9 1211.87 L1803.48 1211.87 L1804.07 1211.87 L1804.66 1211.87 L1805.24 1211.87 L1805.83 1211.87 L1806.42 1211.87 L1807 1211.87 L1807.59 1211.87 L1808.18 1211.87 L1808.76 1211.87 L1809.35 1211.87 L1809.94 1211.87 L1810.52 1211.87 L1811.11 1211.87 L1811.69 1211.87 L1812.28 1211.87 L1812.87 1211.87 L1813.45 1211.87 L1814.04 1211.87 L1814.63 1211.87 L1815.21 1211.87 L1815.8 1211.87 L1816.39 1211.87 L1816.97 1211.87 L1817.56 1211.87 L1818.14 1211.87 L1818.73 1211.87 L1819.32 1211.87 L1819.9 1211.87 L1820.49 1211.87 L1821.08 1211.87 L1821.66 1211.87 L1822.25 1211.87 L1822.84 1211.87 L1823.42 1211.87 L1824.01 1211.87 L1824.6 1211.87 L1825.18 1211.87 L1825.77 1211.87 L1826.35 1211.87 L1826.94 1211.87 L1827.53 1211.87 L1828.11 1211.87 L1828.7 1211.87 L1829.29 1211.87 L1829.87 1211.87 L1830.46 1211.87 L1831.05 1211.87 L1831.63 1211.87 L1832.22 1211.87 L1832.81 1211.87 L1833.39 1211.87 L1833.98 1211.87 L1834.56 1211.87 L1835.15 1211.87 L1835.74 1211.87 L1836.32 1211.87 L1836.91 1211.87 L1837.5 1211.87 L1838.08 1211.87 L1838.67 1211.87 L1839.26 1211.87 L1839.84 1211.87 L1840.43 1211.87 L1841.01 1211.87 L1841.6 1211.87 L1842.19 1211.87 L1842.77 1211.87 L1843.36 1211.87 L1843.95 1211.87 L1844.53 1211.87 L1845.12 1211.87 L1845.71 1211.87 L1846.29 1211.87 L1846.88 1211.87 L1847.47 1211.87 L1848.05 1211.87 L1848.64 1211.87 L1849.22 1211.87 L1849.81 1211.87 L1850.4 1211.87 L1850.98 1211.87 L1851.57 1211.87 L1852.16 1211.87 L1852.74 1211.87 L1853.33 1211.87 L1853.92 1211.87 L1854.5 1211.87 L1855.09 1211.87 L1855.68 1211.87 L1856.26 1211.87 L1856.85 1211.87 L1857.43 1211.87 L1858.02 1211.87 L1858.61 1211.87 L1859.19 1211.87 L1859.78 1211.87 L1860.37 1211.87 L1860.95 1211.87 L1861.54 1211.87 L1862.13 1211.87 L1862.71 1211.87 L1863.3 1211.87 L1863.88 1211.87 L1864.47 1211.87 L1865.06 1211.87 L1865.64 1211.87 L1866.23 1211.87 L1866.82 1211.87 L1867.4 1211.87 L1867.99 1211.87 L1868.58 1211.87 L1869.16 1211.87 L1869.75 1211.87 L1870.34 1211.87 L1870.92 1211.87 L1871.51 1211.87 L1872.09 1211.87 L1872.68 1211.87 L1873.27 1211.87 L1873.85 1211.87 L1874.44 1211.87 L1875.03 1211.87 L1875.61 1211.87 L1876.2 1211.87 L1876.79 1211.87 L1877.37 1211.87 L1877.96 1211.87 L1878.55 1211.87 L1879.13 1211.87 L1879.72 1211.87 L1880.3 1211.87 L1880.89 1211.87 L1881.48 1211.87 L1882.06 1211.87 L1882.65 1211.87 L1883.24 1211.87 L1883.82 1211.87 L1884.41 1211.87 L1885 1211.87 L1885.58 1211.87 L1886.17 1211.87 L1886.76 1211.87 L1887.34 1211.87 L1887.93 1211.87 L1888.51 1211.87 L1889.1 1211.87 L1889.69 1211.87 L1890.27 1211.87 L1890.86 1211.87 L1891.45 1211.87 L1892.03 1211.87 L1892.62 1211.87 L1893.21 1211.87 L1893.79 1211.87 L1894.38 1211.87 L1894.96 1211.87 L1895.55 1211.87 L1896.14 1211.87 L1896.72 1211.87 L1897.31 1211.87 L1897.9 1211.87 L1898.48 1211.87 L1899.07 1211.87 L1899.66 1211.87 L1900.24 1211.87 L1900.83 1211.87 L1901.42 1211.87 L1902 1211.87 L1902.59 1211.87 L1903.17 1211.87 L1903.76 1211.87 L1904.35 1211.87 L1904.93 1211.87 L1905.52 1211.87 L1906.11 1211.87 L1906.69 1211.87 L1907.28 1211.87 L1907.87 1211.87 L1908.45 1211.87 L1909.04 1211.87 L1909.63 1211.87 L1910.21 1211.87 L1910.8 1211.87 L1911.38 1211.87 L1911.97 1211.87 L1912.56 1211.87 L1913.14 1211.87 L1913.73 1211.87 L1914.32 1211.87 L1914.9 1211.87 L1915.49 1211.87 L1916.08 1211.87 L1916.66 1211.87 L1917.25 1211.87 L1917.83 1211.87 L1918.42 1211.87 L1919.01 1211.87 L1919.59 1211.87 L1920.18 1211.87 L1920.77 1211.87 L1921.35 1211.87 L1921.94 1211.87 L1922.53 1211.87 L1923.11 1211.87 L1923.7 1211.87 L1924.29 1211.87 L1924.87 1211.87 L1925.46 1211.87 L1926.04 1211.87 L1926.63 1211.87 L1927.22 1211.87 L1927.8 1211.87 L1928.39 1211.87 L1928.98 1211.87 L1929.56 1211.87 L1930.15 1211.87 L1930.74 1211.87 L1931.32 1211.87 L1931.91 1211.87 L1932.5 1211.87 L1933.08 1211.87 L1933.67 1211.87 L1934.25 1211.87 L1934.84 1211.87 L1935.43 1211.87 L1936.01 1211.87 L1936.6 1211.87 L1937.19 1211.87 L1937.77 1211.87 L1938.36 1211.87 L1938.95 1211.87 L1939.53 1211.87 L1940.12 1211.87 L1940.71 1211.87 L1941.29 1211.87 L1941.88 1211.87 L1942.46 1211.87 L1943.05 1211.87 L1943.64 1211.87 L1944.22 1211.87 L1944.81 1211.87 L1945.4 1211.87 L1945.98 1211.87 L1946.57 1211.87 L1947.16 1211.87 L1947.74 1211.87 L1948.33 1211.87 L1948.91 1211.87 L1949.5 1211.87 L1950.09 1211.87 L1950.67 1211.87 L1951.26 1211.87 L1951.85 1211.87 L1952.43 1211.87 L1953.02 1211.87 L1953.61 1211.87 L1954.19 1211.87 L1954.78 1211.87 L1955.37 1211.87 L1955.95 1211.87 L1956.54 1211.87 L1957.12 1211.87 L1957.71 1211.87 L1958.3 1211.87 L1958.88 1211.87 L1959.47 1211.87 L1960.06 1211.87 L1960.64 1211.87 L1961.23 1211.87 L1961.82 1211.87 L1962.4 1211.87 L1962.99 1211.87 L1963.58 1211.87 L1964.16 1211.87 L1964.75 1211.87 L1965.33 1211.87 L1965.92 1211.87 L1966.51 1211.87 L1967.09 1211.87 L1967.68 1211.87 L1968.27 1211.87 L1968.85 1211.87 L1969.44 1211.87 L1970.03 1211.87 L1970.61 1211.87 L1971.2 1211.87 L1971.78 1211.87 L1972.37 1211.87 L1972.96 1211.87 L1973.54 1211.87 L1974.13 1211.87 L1974.72 1211.87 L1975.3 1211.87 L1975.89 1211.87 L1976.48 1211.87 L1977.06 1211.87 L1977.65 1211.87 L1978.24 1211.87 L1978.82 1211.87 L1979.41 1211.87 L1979.99 1211.87 L1980.58 1211.87 L1981.17 1211.87 L1981.75 1211.87 L1982.34 1211.87 L1982.93 1211.87 L1983.51 1211.87 L1984.1 1211.87 L1984.69 1211.87 L1985.27 1211.87 L1985.86 1211.87 L1986.45 1211.87 L1987.03 1211.87 L1987.62 1211.87 L1988.2 1211.87 L1988.79 1211.87 L1989.38 1211.87 L1989.96 1211.87 L1990.55 1211.87 L1991.14 1211.87 L1991.72 1211.87 L1992.31 1211.87 L1992.9 1211.87 L1993.48 1211.87 L1994.07 1211.87 L1994.65 1211.87 L1995.24 1211.87 L1995.83 1211.87 L1996.41 1211.87 L1997 1211.87 L1997.59 1211.87 L1998.17 1211.87 L1998.76 1211.87 L1999.35 1211.87 L1999.93 1211.87 L2000.52 1211.87 L2001.11 1211.87 L2001.69 1211.87 L2002.28 1211.87 L2002.86 1211.87 L2003.45 1211.87 L2004.04 1211.87 L2004.62 1211.87 L2005.21 1211.87 L2005.8 1211.87 L2006.38 1211.87 L2006.97 1211.87 L2007.56 1211.87 L2008.14 1211.87 L2008.73 1211.87 L2009.32 1211.87 L2009.9 1211.87 L2010.49 1211.87 L2011.07 1211.87 L2011.66 1211.87 L2012.25 1211.87 L2012.83 1211.87 L2013.42 1211.87 L2014.01 1211.87 L2014.59 1211.87 L2015.18 1211.87 L2015.77 1211.87 L2016.35 1211.87 L2016.94 1211.87 L2017.53 1211.87 L2018.11 1211.87 L2018.7 1211.87 L2019.28 1211.87 L2019.87 1211.87 L2020.46 1211.87 L2021.04 1211.87 L2021.63 1211.87 L2022.22 1211.87 L2022.8 1211.87 L2023.39 1211.87 L2023.98 1211.87 L2024.56 1211.87 L2025.15 1211.87 L2025.73 1211.87 L2026.32 1211.87 L2026.91 1211.87 L2027.49 1211.87 L2028.08 1211.87 L2028.67 1211.87 L2029.25 1211.87 L2029.84 1211.87 L2030.43 1211.87 L2031.01 1211.87 L2031.6 1211.87 L2032.19 1211.87 L2032.77 1211.87 L2033.36 1211.87 L2033.94 1211.87 L2034.53 1211.87 L2035.12 1211.87 L2035.7 1211.87 L2036.29 1211.87 L2036.88 1211.87 L2037.46 1211.87 L2038.05 1211.87 L2038.64 1211.87 L2039.22 1211.87 L2039.81 1211.87 L2040.4 1211.87 L2040.98 1211.87 L2041.57 1211.87 L2042.15 1211.87 L2042.74 1211.87 L2043.33 1211.87 L2043.91 1211.87 L2044.5 1211.87 L2045.09 1211.87 L2045.67 1211.87 L2046.26 1211.87 L2046.85 1211.87 L2047.43 1211.87 L2048.02 1211.87 L2048.6 1211.87 L2049.19 1211.87 L2049.78 1211.87 L2050.36 1211.87 L2050.95 1211.87 L2051.54 1211.87 L2052.12 1211.87 L2052.71 1211.87 L2053.3 1211.87 L2053.88 1211.87 L2054.47 1211.87 L2055.06 1211.87 L2055.64 1211.87 L2056.23 1211.87 L2056.81 1211.87 L2057.4 1211.87 L2057.99 1211.87 L2058.57 1211.87 L2059.16 1211.87 L2059.75 1211.87 L2060.33 1211.87 L2060.92 1211.87 L2061.51 1211.87 L2062.09 1211.87 L2062.68 1211.87 L2063.27 1211.87 L2063.85 1211.87 L2064.44 1211.87 L2065.02 1211.87 L2065.61 1211.87 L2066.2 1211.87 L2066.78 1211.87 L2067.37 1211.87 L2067.96 1211.87 L2068.54 1211.87 L2069.13 1211.87 L2069.72 1211.87 L2070.3 1211.87 L2070.89 1211.87 L2071.48 1211.87 L2072.06 1211.87 L2072.65 1211.87 L2073.23 1211.87 L2073.82 1211.87 L2074.41 1211.87 L2074.99 1211.87 L2075.58 1211.87 L2076.17 1211.87 L2076.75 1211.87 L2077.34 1211.87 L2077.93 1211.87 L2078.51 1211.87 L2079.1 1211.87 L2079.68 1211.87 L2080.27 1211.87 L2080.86 1211.87 L2081.44 1211.87 L2082.03 1211.87 L2082.62 1211.87 L2083.2 1211.87 L2083.79 1211.87 L2084.38 1211.87 L2084.96 1211.87 L2085.55 1211.87 L2086.14 1211.87 L2086.72 1211.87 L2087.31 1211.87 L2087.89 1211.87 L2088.48 1211.87 L2089.07 1211.87 L2089.65 1211.87 L2090.24 1211.87 L2090.83 1211.87 L2091.41 1211.87 L2092 1211.87 L2092.59 1211.87 L2093.17 1211.87 L2093.76 1211.87 L2094.35 1211.87 L2094.93 1211.87 L2095.52 1211.87 L2096.1 1211.87 L2096.69 1211.87 L2097.28 1211.87 L2097.86 1211.87 L2098.45 1211.87 L2099.04 1211.87 L2099.62 1211.87 L2100.21 1211.87 L2100.8 1211.87 L2101.38 1211.87 L2101.97 1211.87 L2102.55 1211.87 L2103.14 1211.87 L2103.73 1211.87 L2104.31 1211.87 L2104.9 1211.87 L2105.49 1211.87 L2106.07 1211.87 L2106.66 1211.87 L2107.25 1211.87 L2107.83 1211.87 L2108.42 1211.87 L2109.01 1211.87 L2109.59 1211.87 L2110.18 1211.87 L2110.76 1211.87 L2111.35 1211.87 L2111.94 1211.87 L2112.52 1211.87 L2113.11 1211.87 L2113.7 1211.87 L2114.28 1211.87 L2114.87 1211.87 L2115.46 1211.87 L2116.04 1211.87 L2116.63 1211.87 L2117.22 1211.87 L2117.8 1211.87 L2118.39 1211.87 L2118.97 1211.87 L2119.56 1211.87 L2120.15 1211.87 L2120.73 1211.87 L2121.32 1211.87 L2121.91 1211.87 L2122.49 1211.87 L2123.08 1211.87 L2123.67 1211.87 L2124.25 1211.87 L2124.84 1211.87 L2125.42 1211.87 L2126.01 1211.87 L2126.6 1211.87 L2127.18 1211.87 L2127.77 1211.87 L2128.36 1211.87 L2128.94 1211.87 L2129.53 1211.87 L2130.12 1211.87 L2130.7 1211.87 L2131.29 1211.87 L2131.88 1211.87 L2132.46 1211.87 L2133.05 1211.87 L2133.63 1211.87 L2134.22 1211.87 L2134.81 1211.87 L2135.39 1211.87 L2135.98 1211.87 L2136.57 1211.87 L2137.15 1211.87 L2137.74 1211.87 L2138.33 1211.87 L2138.91 1211.87 L2139.5 1211.87 L2140.09 1211.87 L2140.67 1211.87 L2141.26 1211.87 L2141.84 1211.87 L2142.43 1211.87 L2143.02 1211.87 L2143.6 1211.87 L2144.19 1211.87 L2144.78 1211.87 L2145.36 1211.87 L2145.95 1211.87 L2146.54 1211.87 L2147.12 1211.87 L2147.71 1211.87 L2148.3 1211.87 L2148.88 1211.87 L2149.47 1211.87 L2150.05 1211.87 L2150.64 1211.87 L2151.23 1211.87 L2151.81 1211.87 L2152.4 1211.87 L2152.99 1211.87 L2153.57 1211.87 L2154.16 1211.87 L2154.75 1211.87 L2155.33 1211.87 L2155.92 1211.87 L2156.5 1211.87 L2157.09 1211.87 L2157.68 1211.87 L2158.26 1211.87 L2158.26 1211.77 L2157.68 1211.77 L2157.09 1211.77 L2156.5 1211.77 L2155.92 1211.77 L2155.33 1211.77 L2154.75 1211.77 L2154.16 1211.77 L2153.57 1211.77 L2152.99 1211.77 L2152.4 1211.77 L2151.81 1211.77 L2151.23 1211.77 L2150.64 1211.77 L2150.05 1211.77 L2149.47 1211.77 L2148.88 1211.77 L2148.3 1211.77 L2147.71 1211.77 L2147.12 1211.77 L2146.54 1211.77 L2145.95 1211.77 L2145.36 1211.77 L2144.78 1211.77 L2144.19 1211.77 L2143.6 1211.77 L2143.02 1211.77 L2142.43 1211.77 L2141.84 1211.77 L2141.26 1211.77 L2140.67 1211.77 L2140.09 1211.77 L2139.5 1211.77 L2138.91 1211.77 L2138.33 1211.77 L2137.74 1211.77 L2137.15 1211.77 L2136.57 1211.77 L2135.98 1211.77 L2135.39 1211.77 L2134.81 1211.77 L2134.22 1211.77 L2133.63 1211.77 L2133.05 1211.77 L2132.46 1211.77 L2131.88 1211.77 L2131.29 1211.77 L2130.7 1211.77 L2130.12 1211.77 L2129.53 1211.77 L2128.94 1211.77 L2128.36 1211.77 L2127.77 1211.77 L2127.18 1211.77 L2126.6 1211.77 L2126.01 1211.77 L2125.42 1211.77 L2124.84 1211.77 L2124.25 1211.77 L2123.67 1211.77 L2123.08 1211.77 L2122.49 1211.77 L2121.91 1211.77 L2121.32 1211.77 L2120.73 1211.77 L2120.15 1211.77 L2119.56 1211.77 L2118.97 1211.77 L2118.39 1211.77 L2117.8 1211.77 L2117.22 1211.77 L2116.63 1211.77 L2116.04 1211.77 L2115.46 1211.77 L2114.87 1211.77 L2114.28 1211.77 L2113.7 1211.77 L2113.11 1211.77 L2112.52 1211.77 L2111.94 1211.77 L2111.35 1211.77 L2110.76 1211.77 L2110.18 1211.77 L2109.59 1211.77 L2109.01 1211.77 L2108.42 1211.77 L2107.83 1211.77 L2107.25 1211.77 L2106.66 1211.77 L2106.07 1211.77 L2105.49 1211.77 L2104.9 1211.77 L2104.31 1211.77 L2103.73 1211.77 L2103.14 1211.77 L2102.55 1211.77 L2101.97 1211.77 L2101.38 1211.77 L2100.8 1211.77 L2100.21 1211.77 L2099.62 1211.77 L2099.04 1211.77 L2098.45 1211.77 L2097.86 1211.77 L2097.28 1211.77 L2096.69 1211.77 L2096.1 1211.77 L2095.52 1211.77 L2094.93 1211.77 L2094.35 1211.77 L2093.76 1211.77 L2093.17 1211.77 L2092.59 1211.77 L2092 1211.77 L2091.41 1211.77 L2090.83 1211.77 L2090.24 1211.77 L2089.65 1211.77 L2089.07 1211.77 L2088.48 1211.77 L2087.89 1211.77 L2087.31 1211.77 L2086.72 1211.77 L2086.14 1211.77 L2085.55 1211.77 L2084.96 1211.77 L2084.38 1211.77 L2083.79 1211.77 L2083.2 1211.77 L2082.62 1211.77 L2082.03 1211.77 L2081.44 1211.77 L2080.86 1211.77 L2080.27 1211.77 L2079.68 1211.77 L2079.1 1211.77 L2078.51 1211.77 L2077.93 1211.77 L2077.34 1211.77 L2076.75 1211.77 L2076.17 1211.77 L2075.58 1211.77 L2074.99 1211.77 L2074.41 1211.77 L2073.82 1211.77 L2073.23 1211.77 L2072.65 1211.77 L2072.06 1211.77 L2071.48 1211.77 L2070.89 1211.77 L2070.3 1211.77 L2069.72 1211.77 L2069.13 1211.77 L2068.54 1211.77 L2067.96 1211.77 L2067.37 1211.77 L2066.78 1211.77 L2066.2 1211.77 L2065.61 1211.77 L2065.02 1211.77 L2064.44 1211.77 L2063.85 1211.77 L2063.27 1211.77 L2062.68 1211.77 L2062.09 1211.77 L2061.51 1211.77 L2060.92 1211.77 L2060.33 1211.77 L2059.75 1211.77 L2059.16 1211.77 L2058.57 1211.77 L2057.99 1211.77 L2057.4 1211.77 L2056.81 1211.77 L2056.23 1211.77 L2055.64 1211.77 L2055.06 1211.77 L2054.47 1211.77 L2053.88 1211.77 L2053.3 1211.77 L2052.71 1211.77 L2052.12 1211.77 L2051.54 1211.77 L2050.95 1211.77 L2050.36 1211.77 L2049.78 1211.77 L2049.19 1211.77 L2048.6 1211.77 L2048.02 1211.77 L2047.43 1211.77 L2046.85 1211.77 L2046.26 1211.77 L2045.67 1211.77 L2045.09 1211.77 L2044.5 1211.77 L2043.91 1211.77 L2043.33 1211.77 L2042.74 1211.77 L2042.15 1211.77 L2041.57 1211.77 L2040.98 1211.77 L2040.4 1211.77 L2039.81 1211.77 L2039.22 1211.77 L2038.64 1211.77 L2038.05 1211.77 L2037.46 1211.77 L2036.88 1211.77 L2036.29 1211.77 L2035.7 1211.77 L2035.12 1211.77 L2034.53 1211.77 L2033.94 1211.77 L2033.36 1211.77 L2032.77 1211.77 L2032.19 1211.77 L2031.6 1211.77 L2031.01 1211.77 L2030.43 1211.77 L2029.84 1211.77 L2029.25 1211.77 L2028.67 1211.77 L2028.08 1211.77 L2027.49 1211.77 L2026.91 1211.77 L2026.32 1211.77 L2025.73 1211.77 L2025.15 1211.77 L2024.56 1211.77 L2023.98 1211.77 L2023.39 1211.77 L2022.8 1211.77 L2022.22 1211.77 L2021.63 1211.77 L2021.04 1211.77 L2020.46 1211.77 L2019.87 1211.77 L2019.28 1211.77 L2018.7 1211.77 L2018.11 1211.77 L2017.53 1211.77 L2016.94 1211.77 L2016.35 1211.77 L2015.77 1211.77 L2015.18 1211.77 L2014.59 1211.77 L2014.01 1211.77 L2013.42 1211.77 L2012.83 1211.77 L2012.25 1211.77 L2011.66 1211.77 L2011.07 1211.77 L2010.49 1211.77 L2009.9 1211.77 L2009.32 1211.77 L2008.73 1211.77 L2008.14 1211.77 L2007.56 1211.77 L2006.97 1211.77 L2006.38 1211.77 L2005.8 1211.77 L2005.21 1211.77 L2004.62 1211.77 L2004.04 1211.77 L2003.45 1211.77 L2002.86 1211.77 L2002.28 1211.77 L2001.69 1211.77 L2001.11 1211.77 L2000.52 1211.77 L1999.93 1211.77 L1999.35 1211.77 L1998.76 1211.77 L1998.17 1211.77 L1997.59 1211.77 L1997 1211.77 L1996.41 1211.77 L1995.83 1211.77 L1995.24 1211.77 L1994.65 1211.77 L1994.07 1211.77 L1993.48 1211.77 L1992.9 1211.77 L1992.31 1211.77 L1991.72 1211.77 L1991.14 1211.77 L1990.55 1211.77 L1989.96 1211.77 L1989.38 1211.77 L1988.79 1211.77 L1988.2 1211.77 L1987.62 1211.77 L1987.03 1211.77 L1986.45 1211.77 L1985.86 1211.77 L1985.27 1211.77 L1984.69 1211.77 L1984.1 1211.77 L1983.51 1211.77 L1982.93 1211.77 L1982.34 1211.77 L1981.75 1211.77 L1981.17 1211.77 L1980.58 1211.77 L1979.99 1211.77 L1979.41 1211.77 L1978.82 1211.77 L1978.24 1211.77 L1977.65 1211.77 L1977.06 1211.77 L1976.48 1211.77 L1975.89 1211.77 L1975.3 1211.77 L1974.72 1211.77 L1974.13 1211.77 L1973.54 1211.77 L1972.96 1211.77 L1972.37 1211.77 L1971.78 1211.77 L1971.2 1211.77 L1970.61 1211.77 L1970.03 1211.77 L1969.44 1211.77 L1968.85 1211.77 L1968.27 1211.77 L1967.68 1211.77 L1967.09 1211.77 L1966.51 1211.77 L1965.92 1211.77 L1965.33 1211.77 L1964.75 1211.77 L1964.16 1211.77 L1963.58 1211.77 L1962.99 1211.77 L1962.4 1211.77 L1961.82 1211.77 L1961.23 1211.77 L1960.64 1211.77 L1960.06 1211.77 L1959.47 1211.77 L1958.88 1211.77 L1958.3 1211.77 L1957.71 1211.77 L1957.12 1211.77 L1956.54 1211.77 L1955.95 1211.77 L1955.37 1211.77 L1954.78 1211.77 L1954.19 1211.77 L1953.61 1211.77 L1953.02 1211.77 L1952.43 1211.77 L1951.85 1211.77 L1951.26 1211.77 L1950.67 1211.77 L1950.09 1211.77 L1949.5 1211.77 L1948.91 1211.77 L1948.33 1211.77 L1947.74 1211.77 L1947.16 1211.77 L1946.57 1211.77 L1945.98 1211.77 L1945.4 1211.77 L1944.81 1211.77 L1944.22 1211.77 L1943.64 1211.77 L1943.05 1211.77 L1942.46 1211.77 L1941.88 1211.77 L1941.29 1211.77 L1940.71 1211.77 L1940.12 1211.77 L1939.53 1211.77 L1938.95 1211.77 L1938.36 1211.77 L1937.77 1211.77 L1937.19 1211.77 L1936.6 1211.77 L1936.01 1211.77 L1935.43 1211.77 L1934.84 1211.77 L1934.25 1211.77 L1933.67 1211.77 L1933.08 1211.77 L1932.5 1211.77 L1931.91 1211.77 L1931.32 1211.77 L1930.74 1211.77 L1930.15 1211.77 L1929.56 1211.77 L1928.98 1211.77 L1928.39 1211.77 L1927.8 1211.77 L1927.22 1211.77 L1926.63 1211.77 L1926.04 1211.77 L1925.46 1211.77 L1924.87 1211.77 L1924.29 1211.77 L1923.7 1211.77 L1923.11 1211.77 L1922.53 1211.77 L1921.94 1211.77 L1921.35 1211.77 L1920.77 1211.77 L1920.18 1211.77 L1919.59 1211.77 L1919.01 1211.77 L1918.42 1211.77 L1917.83 1211.77 L1917.25 1211.77 L1916.66 1211.77 L1916.08 1211.77 L1915.49 1211.77 L1914.9 1211.77 L1914.32 1211.77 L1913.73 1211.77 L1913.14 1211.77 L1912.56 1211.77 L1911.97 1211.77 L1911.38 1211.77 L1910.8 1211.77 L1910.21 1211.77 L1909.63 1211.77 L1909.04 1211.77 L1908.45 1211.77 L1907.87 1211.77 L1907.28 1211.77 L1906.69 1211.77 L1906.11 1211.77 L1905.52 1211.77 L1904.93 1211.77 L1904.35 1211.77 L1903.76 1211.77 L1903.17 1211.77 L1902.59 1211.77 L1902 1211.77 L1901.42 1211.77 L1900.83 1211.77 L1900.24 1211.77 L1899.66 1211.77 L1899.07 1211.77 L1898.48 1211.77 L1897.9 1211.77 L1897.31 1211.77 L1896.72 1211.77 L1896.14 1211.77 L1895.55 1211.77 L1894.96 1211.77 L1894.38 1211.77 L1893.79 1211.77 L1893.21 1211.77 L1892.62 1211.77 L1892.03 1211.77 L1891.45 1211.77 L1890.86 1211.77 L1890.27 1211.77 L1889.69 1211.77 L1889.1 1211.77 L1888.51 1211.77 L1887.93 1211.77 L1887.34 1211.77 L1886.76 1211.77 L1886.17 1211.77 L1885.58 1211.77 L1885 1211.77 L1884.41 1211.77 L1883.82 1211.77 L1883.24 1211.77 L1882.65 1211.77 L1882.06 1211.77 L1881.48 1211.77 L1880.89 1211.77 L1880.3 1211.77 L1879.72 1211.77 L1879.13 1211.77 L1878.55 1211.77 L1877.96 1211.77 L1877.37 1211.77 L1876.79 1211.77 L1876.2 1211.77 L1875.61 1211.77 L1875.03 1211.77 L1874.44 1211.77 L1873.85 1211.77 L1873.27 1211.77 L1872.68 1211.77 L1872.09 1211.77 L1871.51 1211.77 L1870.92 1211.77 L1870.34 1211.77 L1869.75 1211.77 L1869.16 1211.77 L1868.58 1211.77 L1867.99 1211.77 L1867.4 1211.77 L1866.82 1211.77 L1866.23 1211.77 L1865.64 1211.77 L1865.06 1211.77 L1864.47 1211.77 L1863.88 1211.77 L1863.3 1211.77 L1862.71 1211.77 L1862.13 1211.77 L1861.54 1211.77 L1860.95 1211.77 L1860.37 1211.77 L1859.78 1211.77 L1859.19 1211.77 L1858.61 1211.77 L1858.02 1211.77 L1857.43 1211.77 L1856.85 1211.77 L1856.26 1211.77 L1855.68 1211.77 L1855.09 1211.77 L1854.5 1211.77 L1853.92 1211.77 L1853.33 1211.77 L1852.74 1211.77 L1852.16 1211.77 L1851.57 1211.77 L1850.98 1211.77 L1850.4 1211.77 L1849.81 1211.77 L1849.22 1211.77 L1848.64 1211.77 L1848.05 1211.77 L1847.47 1211.77 L1846.88 1211.77 L1846.29 1211.77 L1845.71 1211.77 L1845.12 1211.77 L1844.53 1211.77 L1843.95 1211.77 L1843.36 1211.77 L1842.77 1211.77 L1842.19 1211.77 L1841.6 1211.77 L1841.01 1211.77 L1840.43 1211.77 L1839.84 1211.77 L1839.26 1211.77 L1838.67 1211.77 L1838.08 1211.77 L1837.5 1211.77 L1836.91 1211.77 L1836.32 1211.77 L1835.74 1211.77 L1835.15 1211.77 L1834.56 1211.77 L1833.98 1211.77 L1833.39 1211.77 L1832.81 1211.77 L1832.22 1211.77 L1831.63 1211.77 L1831.05 1211.77 L1830.46 1211.77 L1829.87 1211.77 L1829.29 1211.77 L1828.7 1211.77 L1828.11 1211.77 L1827.53 1211.77 L1826.94 1211.77 L1826.35 1211.77 L1825.77 1211.77 L1825.18 1211.77 L1824.6 1211.77 L1824.01 1211.77 L1823.42 1211.77 L1822.84 1211.77 L1822.25 1211.77 L1821.66 1211.77 L1821.08 1211.77 L1820.49 1211.77 L1819.9 1211.77 L1819.32 1211.77 L1818.73 1211.77 L1818.14 1211.77 L1817.56 1211.77 L1816.97 1211.77 L1816.39 1211.77 L1815.8 1211.77 L1815.21 1211.77 L1814.63 1211.77 L1814.04 1211.77 L1813.45 1211.77 L1812.87 1211.77 L1812.28 1211.77 L1811.69 1211.77 L1811.11 1211.77 L1810.52 1211.77 L1809.94 1211.77 L1809.35 1211.77 L1808.76 1211.77 L1808.18 1211.77 L1807.59 1211.77 L1807 1211.77 L1806.42 1211.77 L1805.83 1211.77 L1805.24 1211.77 L1804.66 1211.77 L1804.07 1211.77 L1803.48 1211.77 L1802.9 1211.77 L1802.31 1211.77 L1801.73 1211.77 L1801.14 1211.77 L1800.55 1211.77 L1799.97 1211.77 L1799.38 1211.77 L1798.79 1211.77 L1798.21 1211.77 L1797.62 1211.77 L1797.03 1211.77 L1796.45 1211.77 L1795.86 1211.77 L1795.27 1211.77 L1794.69 1211.77 L1794.1 1211.77 L1793.52 1211.77 L1792.93 1211.77 L1792.34 1211.77 L1791.76 1211.77 L1791.17 1211.77 L1790.58 1211.77 L1790 1211.77 L1789.41 1211.77 L1788.82 1211.77 L1788.24 1211.77 L1787.65 1211.77 L1787.06 1211.77 L1786.48 1211.77 L1785.89 1211.77 L1785.31 1211.77 L1784.72 1211.77 L1784.13 1211.77 L1783.55 1211.77 L1782.96 1211.77 L1782.37 1211.77 L1781.79 1211.77 L1781.2 1211.77 L1780.61 1211.77 L1780.03 1211.77 L1779.44 1211.77 L1778.86 1211.77 L1778.27 1211.77 L1777.68 1211.77 L1777.1 1211.77 L1776.51 1211.77 L1775.92 1211.77 L1775.34 1211.77 L1774.75 1211.77 L1774.16 1211.77 L1773.58 1211.77 L1772.99 1211.77 L1772.4 1211.77 L1771.82 1211.77 L1771.23 1211.77 L1770.65 1211.77 L1770.06 1211.77 L1769.47 1211.77 L1768.89 1211.77 L1768.3 1211.77 L1767.71 1211.77 L1767.13 1211.77 L1766.54 1211.77 L1765.95 1211.77 L1765.37 1211.77 L1764.78 1211.77 L1764.19 1211.77 L1763.61 1211.77 L1763.02 1211.77 L1762.44 1211.77 L1761.85 1211.77 L1761.26 1211.77 L1760.68 1211.77 L1760.09 1211.77 L1759.5 1211.77 L1758.92 1211.77 L1758.33 1211.77 L1757.74 1211.77 L1757.16 1211.77 L1756.57 1211.77 L1755.99 1211.77 L1755.4 1211.77 L1754.81 1211.77 L1754.23 1211.77 L1753.64 1211.77 L1753.05 1211.77 L1752.47 1211.77 L1751.88 1211.77 L1751.29 1211.77 L1750.71 1211.77 L1750.12 1211.77 L1749.53 1211.77 L1748.95 1211.77 L1748.36 1211.77 L1747.78 1211.77 L1747.19 1211.77 L1746.6 1211.77 L1746.02 1211.77 L1745.43 1211.77 L1744.84 1211.77 L1744.26 1211.77 L1743.67 1211.77 L1743.08 1211.77 L1742.5 1211.77 L1741.91 1211.77 L1741.32 1211.77 L1740.74 1211.77 L1740.15 1211.77 L1739.57 1211.77 L1738.98 1211.77 L1738.39 1211.77 L1737.81 1211.77 L1737.22 1211.77 L1736.63 1211.77 L1736.05 1211.77 L1735.46 1211.77 L1734.87 1211.77 L1734.29 1211.77 L1733.7 1211.77 L1733.11 1211.77 L1732.53 1211.77 L1731.94 1211.77 L1731.36 1211.77 L1730.77 1211.77 L1730.18 1211.77 L1729.6 1211.77 L1729.01 1211.77 L1728.42 1211.77 L1727.84 1211.77 L1727.25 1211.77 L1726.66 1211.77 L1726.08 1211.77 L1725.49 1211.77 L1724.91 1211.77 L1724.32 1211.77 L1723.73 1211.77 L1723.15 1211.77 L1722.56 1211.77 L1721.97 1211.77 L1721.39 1211.77 L1720.8 1211.77 L1720.21 1211.77 L1719.63 1211.77 L1719.04 1211.77 L1718.45 1211.77 L1717.87 1211.77 L1717.28 1211.77 L1716.7 1211.77 L1716.11 1211.77 L1715.52 1211.77 L1714.94 1211.77 L1714.35 1211.77 L1713.76 1211.77 L1713.18 1211.77 L1712.59 1211.77 L1712 1211.77 L1711.42 1211.77 L1710.83 1211.77 L1710.24 1211.77 L1709.66 1211.77 L1709.07 1211.77 L1708.49 1211.77 L1707.9 1211.77 L1707.31 1211.77 L1706.73 1211.77 L1706.14 1211.77 L1705.55 1211.77 L1704.97 1211.77 L1704.38 1211.77 L1703.79 1211.77 L1703.21 1211.77 L1702.62 1211.77 L1702.04 1211.77 L1701.45 1211.77 L1700.86 1211.77 L1700.28 1211.77 L1699.69 1211.77 L1699.1 1211.77 L1698.52 1211.77 L1697.93 1211.77 L1697.34 1211.77 L1696.76 1211.77 L1696.17 1211.77 L1695.58 1211.77 L1695 1211.77 L1694.41 1211.77 L1693.83 1211.77 L1693.24 1211.77 L1692.65 1211.77 L1692.07 1211.77 L1691.48 1211.77 L1690.89 1211.77 L1690.31 1211.77 L1689.72 1211.77 L1689.13 1211.77 L1688.55 1211.77 L1687.96 1211.77 L1687.37 1211.77 L1686.79 1211.77 L1686.2 1211.77 L1685.62 1211.77 L1685.03 1211.77 L1684.44 1211.77 L1683.86 1211.77 L1683.27 1211.77 L1682.68 1211.77 L1682.1 1211.77 L1681.51 1211.77 L1680.92 1211.77 L1680.34 1211.77 L1679.75 1211.77 L1679.17 1211.77 L1678.58 1211.77 L1677.99 1211.77 L1677.41 1211.77 L1676.82 1211.77 L1676.23 1211.77 L1675.65 1211.77 L1675.06 1211.77 L1674.47 1211.77 L1673.89 1211.77 L1673.3 1211.77 L1672.71 1211.77 L1672.13 1211.77 L1671.54 1211.77 L1670.96 1211.77 L1670.37 1211.77 L1669.78 1211.77 L1669.2 1211.77 L1668.61 1211.77 L1668.02 1211.77 L1667.44 1211.77 L1666.85 1211.77 L1666.26 1211.77 L1665.68 1211.77 L1665.09 1211.77 L1664.5 1211.77 L1663.92 1211.77 L1663.33 1211.77 L1662.75 1211.77 L1662.16 1211.77 L1661.57 1211.77 L1660.99 1211.77 L1660.4 1211.77 L1659.81 1211.77 L1659.23 1211.77 L1658.64 1211.77 L1658.05 1211.77 L1657.47 1211.77 L1656.88 1211.77 L1656.29 1211.77 L1655.71 1211.77 L1655.12 1211.77 L1654.54 1211.77 L1653.95 1211.77 L1653.36 1211.77 L1652.78 1211.77 L1652.19 1211.77 L1651.6 1211.77 L1651.02 1211.77 L1650.43 1211.77 L1649.84 1211.77 L1649.26 1211.77 L1648.67 1211.77 L1648.09 1211.77 L1647.5 1211.77 L1646.91 1211.77 L1646.33 1211.77 L1645.74 1211.77 L1645.15 1211.77 L1644.57 1211.77 L1643.98 1211.77 L1643.39 1211.77 L1642.81 1211.77 L1642.22 1211.77 L1641.63 1211.77 L1641.05 1211.77 L1640.46 1211.77 L1639.88 1211.77 L1639.29 1211.77 L1638.7 1211.77 L1638.12 1211.77 L1637.53 1211.77 L1636.94 1211.77 L1636.36 1211.77 L1635.77 1211.77 L1635.18 1211.77 L1634.6 1211.77 L1634.01 1211.77 L1633.42 1211.77 L1632.84 1211.77 L1632.25 1211.77 L1631.67 1211.77 L1631.08 1211.77 L1630.49 1211.77 L1629.91 1211.77 L1629.32 1211.77 L1628.73 1211.77 L1628.15 1211.77 L1627.56 1211.77 L1626.97 1211.77 L1626.39 1211.77 L1625.8 1211.77 L1625.22 1211.77 L1624.63 1211.77 L1624.04 1211.77 L1623.46 1211.77 L1622.87 1211.77 L1622.28 1211.77 L1621.7 1211.77 L1621.11 1211.77 L1620.52 1211.77 L1619.94 1211.77 L1619.35 1211.77 L1618.76 1211.77 L1618.18 1211.77 L1617.59 1211.77 L1617.01 1211.77 L1616.42 1211.77 L1615.83 1211.77 L1615.25 1211.77 L1614.66 1211.77 L1614.07 1211.77 L1613.49 1211.77 L1612.9 1211.77 L1612.31 1211.77 L1611.73 1211.77 L1611.14 1211.77 L1610.55 1211.77 L1609.97 1211.77 L1609.38 1211.77 L1608.8 1211.77 L1608.21 1211.77 L1607.62 1211.77 L1607.04 1211.77 L1606.45 1211.77 L1605.86 1211.77 L1605.28 1211.77 L1604.69 1211.77 L1604.1 1211.77 L1603.52 1211.77 L1602.93 1211.77 L1602.34 1211.77 L1601.76 1211.77 L1601.17 1211.77 L1600.59 1211.77 L1600 1211.77 L1599.41 1211.77 L1598.83 1211.77 L1598.24 1211.77 L1597.65 1211.77 L1597.07 1211.77 L1596.48 1211.77 L1595.89 1211.77 L1595.31 1211.77 L1594.72 1211.77 L1594.14 1211.77 L1593.55 1211.77 L1592.96 1211.77 L1592.38 1211.77 L1591.79 1211.77 L1591.2 1211.77 L1590.62 1211.77 L1590.03 1211.77 L1589.44 1211.77 L1588.86 1211.77 L1588.27 1211.77 L1587.68 1211.77 L1587.1 1211.77 L1586.51 1211.77 L1585.93 1211.77 L1585.34 1211.77 L1584.75 1211.77 L1584.17 1211.77 L1583.58 1211.77 L1582.99 1211.77 L1582.41 1211.77 L1581.82 1211.77 L1581.23 1211.77 L1580.65 1211.77 L1580.06 1211.77 L1579.47 1211.77 L1578.89 1211.77 L1578.3 1211.77 L1577.72 1211.77 L1577.13 1211.77 L1576.54 1211.77 L1575.96 1211.77 L1575.37 1211.77 L1574.78 1211.77 L1574.2 1211.77 L1573.61 1211.77 L1573.02 1211.77 L1572.44 1211.77 L1571.85 1211.77 L1571.27 1211.77 L1570.68 1211.77 L1570.09 1211.77 L1569.51 1211.77 L1568.92 1211.77 L1568.33 1211.77 L1567.75 1211.77 L1567.16 1211.77 L1566.57 1211.77 L1565.99 1211.77 L1565.4 1211.77 L1564.81 1211.77 L1564.23 1211.77 L1563.64 1211.77 L1563.06 1211.77 L1562.47 1211.77 L1561.88 1211.77 L1561.3 1211.77 L1560.71 1211.77 L1560.12 1211.77 L1559.54 1211.77 L1558.95 1211.77 L1558.36 1211.77 L1557.78 1211.77 L1557.19 1211.77 L1556.6 1211.77 L1556.02 1211.77 L1555.43 1211.77 L1554.85 1211.77 L1554.26 1211.77 L1553.67 1211.77 L1553.09 1211.77 L1552.5 1211.77 L1551.91 1211.77 L1551.33 1211.77 L1550.74 1211.77 L1550.15 1211.77 L1549.57 1211.77 L1548.98 1211.77 L1548.4 1211.77 L1547.81 1211.77 L1547.22 1211.77 L1546.64 1211.77 L1546.05 1211.77 L1545.46 1211.77 L1544.88 1211.77 L1544.29 1211.77 L1543.7 1211.77 L1543.12 1211.77 L1542.53 1211.77 L1541.94 1211.77 L1541.36 1211.77 L1540.77 1211.77 L1540.19 1211.77 L1539.6 1211.77 L1539.01 1211.77 L1538.43 1211.77 L1537.84 1211.77 L1537.25 1211.77 L1536.67 1211.77 L1536.08 1211.77 L1535.49 1211.77 L1534.91 1211.77 L1534.32 1211.77 L1533.73 1211.77 L1533.15 1211.77 L1532.56 1211.77 L1531.98 1211.77 L1531.39 1211.77 L1530.8 1211.77 L1530.22 1211.77 L1529.63 1211.77 L1529.04 1211.77 L1528.46 1211.77 L1527.87 1211.77 L1527.28 1211.77 L1526.7 1211.77 L1526.11 1211.77 L1525.52 1211.77 L1524.94 1211.77 L1524.35 1211.77 L1523.77 1211.77 L1523.18 1211.77 L1522.59 1211.77 L1522.01 1211.77 L1521.42 1211.77 L1520.83 1211.77 L1520.25 1211.77 L1519.66 1211.77 L1519.07 1211.77 L1518.49 1211.77 L1517.9 1211.77 L1517.32 1211.77 L1516.73 1211.77 L1516.14 1211.77 L1515.56 1211.77 L1514.97 1211.77 L1514.38 1211.77 L1513.8 1211.77 L1513.21 1211.77 L1512.62 1211.77 L1512.04 1211.77 L1511.45 1211.77 L1510.86 1211.77 L1510.28 1211.77 L1509.69 1211.77 L1509.11 1211.77 L1508.52 1211.77 L1507.93 1211.77 L1507.35 1211.77 L1506.76 1211.77 L1506.17 1211.77 L1505.59 1211.77 L1505 1211.77 L1504.41 1211.77 L1503.83 1211.77 L1503.24 1211.77 L1502.65 1211.77 L1502.07 1211.77 L1501.48 1211.77 L1500.9 1211.77 L1500.31 1211.77 L1499.72 1211.77 L1499.14 1211.77 L1498.55 1211.77 L1497.96 1211.77 L1497.38 1211.77 L1496.79 1211.77 L1496.2 1211.77 L1495.62 1211.77 L1495.03 1211.77 L1494.45 1211.77 L1493.86 1211.77 L1493.27 1211.77 L1492.69 1211.77 L1492.1 1211.77 L1491.51 1211.77 L1490.93 1211.77 L1490.34 1211.77 L1489.75 1211.77 L1489.17 1211.77 L1488.58 1211.77 L1487.99 1211.77 L1487.41 1211.77 L1486.82 1211.77 L1486.24 1211.77 L1485.65 1211.77 L1485.06 1211.77 L1484.48 1211.77 L1483.89 1211.77 L1483.3 1211.77 L1482.72 1211.77 L1482.13 1211.77 L1481.54 1211.77 L1480.96 1211.77 L1480.37 1211.77 L1479.78 1211.77 L1479.2 1211.77 L1478.61 1211.77 L1478.03 1211.77 L1477.44 1211.77 L1476.85 1211.77 L1476.27 1211.77 L1475.68 1211.77 L1475.09 1211.77 L1474.51 1211.77 L1473.92 1211.77 L1473.33 1211.77 L1472.75 1211.77 L1472.16 1211.77 L1471.57 1211.77 L1470.99 1211.77 L1470.4 1211.77 L1469.82 1211.77 L1469.23 1211.77 L1468.64 1211.77 L1468.06 1211.77 L1467.47 1211.77 L1466.88 1211.77 L1466.3 1211.77 L1465.71 1211.77 L1465.12 1211.77 L1464.54 1211.77 L1463.95 1211.77 L1463.37 1211.77 L1462.78 1211.77 L1462.19 1211.77 L1461.61 1211.77 L1461.02 1211.77 L1460.43 1211.77 L1459.85 1211.77 L1459.26 1211.77 L1458.67 1211.77 L1458.09 1211.77 L1457.5 1211.77 L1456.91 1211.77 L1456.33 1211.77 L1455.74 1211.77 L1455.16 1211.77 L1454.57 1211.77 L1453.98 1211.77 L1453.4 1211.77 L1452.81 1211.77 L1452.22 1211.77 L1451.64 1211.77 L1451.05 1211.77 L1450.46 1211.77 L1449.88 1211.77 L1449.29 1211.77 L1448.7 1211.77 L1448.12 1211.77 L1447.53 1211.77 L1446.95 1211.77 L1446.36 1211.77 L1445.77 1211.77 L1445.19 1211.77 L1444.6 1211.77 L1444.01 1211.77 L1443.43 1211.77 L1442.84 1211.77 L1442.25 1211.77 L1441.67 1211.77 L1441.08 1211.77 L1440.5 1211.77 L1439.91 1211.77 L1439.32 1211.77 L1438.74 1211.77 L1438.15 1211.77 L1437.56 1211.77 L1436.98 1211.77 L1436.39 1211.77 L1435.8 1211.77 L1435.22 1211.77 L1434.63 1211.77 L1434.04 1211.77 L1433.46 1211.77 L1432.87 1211.77 L1432.29 1211.77 L1431.7 1211.77 L1431.11 1211.77 L1430.53 1211.77 L1429.94 1211.77 L1429.35 1211.77 L1428.77 1211.77 L1428.18 1211.77 L1427.59 1211.77 L1427.01 1211.77 L1426.42 1211.77 L1425.83 1211.77 L1425.25 1211.77 L1424.66 1211.77 L1424.08 1211.77 L1423.49 1211.77 L1422.9 1211.77 L1422.32 1211.77 L1421.73 1211.77 L1421.14 1211.77 L1420.56 1211.77 L1419.97 1211.77 L1419.38 1211.77 L1418.8 1211.77 L1418.21 1211.77 L1417.63 1211.77 L1417.04 1211.77 L1416.45 1211.77 L1415.87 1211.77 L1415.28 1211.77 L1414.69 1211.77 L1414.11 1211.77 L1413.52 1211.77 L1412.93 1211.77 L1412.35 1211.77 L1411.76 1211.77 L1411.17 1211.77 L1410.59 1211.77 L1410 1211.77 L1409.42 1211.77 L1408.83 1211.77 L1408.24 1211.77 L1407.66 1211.77 L1407.07 1211.77 L1406.48 1211.77 L1405.9 1211.77 L1405.31 1211.77 L1404.72 1211.77 L1404.14 1211.77 L1403.55 1211.77 L1402.96 1211.77 L1402.38 1211.77 L1401.79 1211.77 L1401.21 1211.77 L1400.62 1211.77 L1400.03 1211.77 L1399.45 1211.77 L1398.86 1211.77 L1398.27 1211.77 L1397.69 1211.77 L1397.1 1211.77 L1396.51 1211.77 L1395.93 1211.77 L1395.34 1211.77 L1394.75 1211.77 L1394.17 1211.77 L1393.58 1211.77 L1393 1211.77 L1392.41 1211.77 L1391.82 1211.77 L1391.24 1211.77 L1390.65 1211.77 L1390.06 1211.77 L1389.48 1211.77 L1388.89 1211.77 L1388.3 1211.77 L1387.72 1211.77 L1387.13 1211.77 L1386.55 1211.77 L1385.96 1211.77 L1385.37 1211.77 L1384.79 1211.77 L1384.2 1211.77 L1383.61 1211.77 L1383.03 1211.77 L1382.44 1211.77 L1381.85 1211.77 L1381.27 1211.77 L1380.68 1211.77 L1380.09 1211.77 L1379.51 1211.77 L1378.92 1211.77 L1378.34 1211.77 L1377.75 1211.77 L1377.16 1211.77 L1376.58 1211.77 L1375.99 1211.77 L1375.4 1211.77 L1374.82 1211.77 L1374.23 1211.77 L1373.64 1211.77 L1373.06 1211.77 L1372.47 1211.77 L1371.88 1211.77 L1371.3 1211.77 L1370.71 1211.77 L1370.13 1211.77 L1369.54 1211.77 L1368.95 1211.77 L1368.37 1211.77 L1367.78 1211.77 L1367.19 1211.77 L1366.61 1211.77 L1366.02 1211.77 L1365.43 1211.77 L1364.85 1211.77 L1364.26 1211.77 L1363.68 1211.77 L1363.09 1211.77 L1362.5 1211.77 L1361.92 1211.77 L1361.33 1211.77 L1360.74 1211.77 L1360.16 1211.77 L1359.57 1211.77 L1358.98 1211.77 L1358.4 1211.77 L1357.81 1211.77 L1357.22 1211.77 L1356.64 1211.77 L1356.05 1211.77 L1355.47 1211.77 L1354.88 1211.77 L1354.29 1211.77 L1353.71 1211.77 L1353.12 1211.77 L1352.53 1211.77 L1351.95 1211.77 L1351.36 1211.77 L1350.77 1211.77 L1350.19 1211.77 L1349.6 1211.77 L1349.01 1211.77 L1348.43 1211.77 L1347.84 1211.77 L1347.26 1211.77 L1346.67 1211.77 L1346.08 1211.77 L1345.5 1211.77 L1344.91 1211.77 L1344.32 1211.77 L1343.74 1211.77 L1343.15 1211.77 L1342.56 1211.77 L1341.98 1211.77 L1341.39 1211.77 L1340.8 1211.77 L1340.22 1211.77 L1339.63 1211.77 L1339.05 1211.77 L1338.46 1211.77 L1337.87 1211.77 L1337.29 1211.77 L1336.7 1211.77 L1336.11 1211.77 L1335.53 1211.77 L1334.94 1211.77 L1334.35 1211.77 L1333.77 1211.77 L1333.18 1211.77 L1332.6 1211.77 L1332.01 1211.77 L1331.42 1211.77 L1330.84 1211.77 L1330.25 1211.77 L1329.66 1211.77 L1329.08 1211.77 L1328.49 1211.77 L1327.9 1211.77 L1327.32 1211.77 L1326.73 1211.77 L1326.14 1211.77 L1325.56 1211.77 L1324.97 1211.77 L1324.39 1211.77 L1323.8 1211.77 L1323.21 1211.77 L1322.63 1211.77 L1322.04 1211.77 L1321.45 1211.77 L1320.87 1211.77 L1320.28 1211.77 L1319.69 1211.77 L1319.11 1211.77 L1318.52 1211.77 L1317.93 1211.77 L1317.35 1211.77 L1316.76 1211.77 L1316.18 1211.77 L1315.59 1211.77 L1315 1211.77 L1314.42 1211.77 L1313.83 1211.77 L1313.24 1211.77 L1312.66 1211.77 L1312.07 1211.77 L1311.48 1211.77 L1310.9 1211.77 L1310.31 1211.77 L1309.73 1211.77 L1309.14 1211.77 L1308.55 1211.77 L1307.97 1211.77 L1307.38 1211.77 L1306.79 1211.77 L1306.21 1211.77 L1305.62 1211.77 L1305.03 1211.77 L1304.45 1211.77 L1303.86 1211.77 L1303.27 1211.77 L1302.69 1211.77 L1302.1 1211.77 L1301.52 1211.77 L1300.93 1211.77 L1300.34 1211.77 L1299.76 1211.77 L1299.17 1211.77 L1298.58 1211.77 L1298 1211.77 L1297.41 1211.77 L1296.82 1211.77 L1296.24 1211.77 L1295.65 1211.77 L1295.06 1211.77 L1294.48 1211.77 L1293.89 1211.77 L1293.31 1211.77 L1292.72 1211.77 L1292.13 1211.77 L1291.55 1211.77 L1290.96 1211.77 L1290.37 1211.77 L1289.79 1211.77 L1289.2 1211.77 L1288.61 1211.77 L1288.03 1211.77 L1287.44 1211.77 L1286.86 1211.77 L1286.27 1211.77 L1285.68 1211.77 L1285.1 1211.77 L1284.51 1211.77 L1283.92 1211.77 L1283.34 1211.77 L1282.75 1211.77 L1282.16 1211.77 L1281.58 1211.77 L1280.99 1211.77 L1280.4 1211.77 L1279.82 1211.77 L1279.23 1211.77 L1278.65 1211.77 L1278.06 1211.77 L1277.47 1211.77 L1276.89 1211.77 L1276.3 1211.77 L1275.71 1211.77 L1275.13 1211.77 L1274.54 1211.77 L1273.95 1211.77 L1273.37 1211.77 L1272.78 1211.77 L1272.19 1211.77 L1271.61 1211.77 L1271.02 1211.77 L1270.44 1211.77 L1269.85 1211.77 L1269.26 1211.77 L1268.68 1211.77 L1268.09 1211.77 L1267.5 1211.77 L1266.92 1211.77 L1266.33 1211.77 L1265.74 1211.77 L1265.16 1211.77 L1264.57 1211.77 L1263.98 1211.77 L1263.4 1211.77 L1262.81 1211.77 L1262.23 1211.77 L1261.64 1211.77 L1261.05 1211.77 L1260.47 1211.77 L1259.88 1211.77 L1259.29 1211.77 L1258.71 1211.77 L1258.12 1211.77 L1257.53 1211.77 L1256.95 1211.77 L1256.36 1211.77 L1255.78 1211.77 L1255.19 1211.77 L1254.6 1211.77 L1254.02 1211.77 L1253.43 1211.77 L1252.84 1211.77 L1252.26 1211.77 L1251.67 1211.77 L1251.08 1211.77 L1250.5 1211.77 L1249.91 1211.77 L1249.32 1211.77 L1248.74 1211.77 L1248.15 1211.77 L1247.57 1211.77 L1246.98 1211.77 L1246.39 1211.77 L1245.81 1211.77 L1245.22 1211.77 L1244.63 1211.77 L1244.05 1211.77 L1243.46 1211.77 L1242.87 1211.77 L1242.29 1211.77 L1241.7 1211.77 L1241.11 1211.77 L1240.53 1211.77 L1239.94 1211.77 L1239.36 1211.77 L1238.77 1211.77 L1238.18 1211.77 L1237.6 1211.77 L1237.01 1211.77 L1236.42 1211.77 L1235.84 1211.77 L1235.25 1211.77 L1234.66 1211.77 L1234.08 1211.77 L1233.49 1211.77 L1232.91 1211.77 L1232.32 1211.77 L1231.73 1211.77 L1231.15 1211.77 L1230.56 1211.77 L1229.97 1211.77 L1229.39 1211.77 L1228.8 1211.77 L1228.21 1211.77 L1227.63 1211.77 L1227.04 1211.77 L1226.45 1211.77 L1225.87 1211.77 L1225.28 1211.77 L1224.7 1211.77 L1224.11 1211.77 L1223.52 1211.77 L1222.94 1211.77 L1222.35 1211.77 L1221.76 1211.77 L1221.18 1211.77 L1220.59 1211.77 L1220 1211.77 L1219.42 1211.77 L1218.83 1211.77 L1218.24 1211.77 L1217.66 1211.77 L1217.07 1211.77 L1216.49 1211.77 L1215.9 1211.77 L1215.31 1211.77 L1214.73 1211.77 L1214.14 1211.77 L1213.55 1211.77 L1212.97 1211.77 L1212.38 1211.77 L1211.79 1211.77 L1211.21 1211.77 L1210.62 1211.77 L1210.03 1211.77 L1209.45 1211.77 L1208.86 1211.77 L1208.28 1211.77 L1207.69 1211.77 L1207.1 1211.77 L1206.52 1211.77 L1205.93 1211.77 L1205.34 1211.77 L1204.76 1211.77 L1204.17 1211.77 L1203.58 1211.77 L1203 1211.77 L1202.41 1211.77 L1201.83 1211.77 L1201.24 1211.77 L1200.65 1211.77 L1200.07 1211.77 L1199.48 1211.77 L1198.89 1211.77 L1198.31 1211.77 L1197.72 1211.77 L1197.13 1211.77 L1196.55 1211.77 L1195.96 1211.77 L1195.37 1211.77 L1194.79 1211.77 L1194.2 1211.77 L1193.62 1211.77 L1193.03 1211.77 L1192.44 1211.77 L1191.86 1211.77 L1191.27 1211.77 L1190.68 1211.77 L1190.1 1211.77 L1189.51 1211.77 L1188.92 1211.77 L1188.34 1211.77 L1187.75 1211.77 L1187.16 1211.77 L1186.58 1211.77 L1185.99 1211.77 L1185.41 1211.77 L1184.82 1211.77 L1184.23 1211.77 L1183.65 1211.77 L1183.06 1211.77 L1182.47 1211.77 L1181.89 1211.77 L1181.3 1211.77 L1180.71 1211.77 L1180.13 1211.77 L1179.54 1211.77 L1178.96 1211.77 L1178.37 1211.77 L1177.78 1211.77 L1177.2 1211.77 L1176.61 1211.77 L1176.02 1211.77 L1175.44 1211.77 L1174.85 1211.77 L1174.26 1211.77 L1173.68 1211.77 L1173.09 1211.77 L1172.5 1211.77 L1171.92 1211.77 L1171.33 1211.77 L1170.75 1211.77 L1170.16 1211.77 L1169.57 1211.77 L1168.99 1211.77 L1168.4 1211.77 L1167.81 1211.77 L1167.23 1211.77 L1166.64 1211.77 L1166.05 1211.77 L1165.47 1211.77 L1164.88 1211.77 L1164.29 1211.77 L1163.71 1211.77 L1163.12 1211.77 L1162.54 1211.77 L1161.95 1211.77 L1161.36 1211.77 L1160.78 1211.77 L1160.19 1211.77 L1159.6 1211.77 L1159.02 1211.77 L1158.43 1211.77 L1157.84 1211.77 L1157.26 1211.77 L1156.67 1211.77 L1156.09 1211.77 L1155.5 1211.77 L1154.91 1211.77 L1154.33 1211.77 L1153.74 1211.77 L1153.15 1211.77 L1152.57 1211.77 L1151.98 1211.77 L1151.39 1211.77 L1150.81 1211.77 L1150.22 1211.77 L1149.63 1211.77 L1149.05 1211.77 L1148.46 1211.77 L1147.88 1211.77 L1147.29 1211.77 L1146.7 1211.77 L1146.12 1211.77 L1145.53 1211.77 L1144.94 1211.77 L1144.36 1211.77 L1143.77 1211.77 L1143.18 1211.77 L1142.6 1211.77 L1142.01 1211.77 L1141.42 1211.77 L1140.84 1211.77 L1140.25 1211.77 L1139.67 1211.77 L1139.08 1211.77 L1138.49 1211.77 L1137.91 1211.77 L1137.32 1211.77 L1136.73 1211.77 L1136.15 1211.77 L1135.56 1211.77 L1134.97 1211.77 L1134.39 1211.77 L1133.8 1211.77 L1133.21 1211.77 L1132.63 1211.77 L1132.04 1211.77 L1131.46 1211.77 L1130.87 1211.77 L1130.28 1211.77 L1129.7 1211.77 L1129.11 1211.77 L1128.52 1211.77 L1127.94 1211.77 L1127.35 1211.77 L1126.76 1211.77 L1126.18 1211.77 L1125.59 1211.77 L1125.01 1211.77 L1124.42 1211.77 L1123.83 1211.77 L1123.25 1211.77 L1122.66 1211.77 L1122.07 1211.77 L1121.49 1211.77 L1120.9 1211.77 L1120.31 1211.77 L1119.73 1211.77 L1119.14 1211.77 L1118.55 1211.77 L1117.97 1211.77 L1117.38 1211.77 L1116.8 1211.77 L1116.21 1211.77 L1115.62 1211.77 L1115.04 1211.77 L1114.45 1211.77 L1113.86 1211.77 L1113.28 1211.77 L1112.69 1211.77 L1112.1 1211.77 L1111.52 1211.77 L1110.93 1211.77 L1110.34 1211.77 L1109.76 1211.77 L1109.17 1211.77 L1108.59 1211.77 L1108 1211.77 L1107.41 1211.77 L1106.83 1211.77 L1106.24 1211.77 L1105.65 1211.77 L1105.07 1211.77 L1104.48 1211.77 L1103.89 1211.77 L1103.31 1211.77 L1102.72 1211.77 L1102.14 1211.77 L1101.55 1211.77 L1100.96 1211.77 L1100.38 1211.77 L1099.79 1211.77 L1099.2 1211.77 L1098.62 1211.77 L1098.03 1211.77 L1097.44 1211.77 L1096.86 1211.77 L1096.27 1211.77 L1095.68 1211.77 L1095.1 1211.77 L1094.51 1211.77 L1093.93 1211.77 L1093.34 1211.77 L1092.75 1211.77 L1092.17 1211.77 L1091.58 1211.77 L1090.99 1211.77 L1090.41 1211.77 L1089.82 1211.77 L1089.23 1211.77 L1088.65 1211.77 L1088.06 1211.77 L1087.47 1211.77 L1086.89 1211.77 L1086.3 1211.77 L1085.72 1211.77 L1085.13 1211.77 L1084.54 1211.77 L1083.96 1211.77 L1083.37 1211.77 L1082.78 1211.77 L1082.2 1211.77 L1081.61 1211.77 L1081.02 1211.77 L1080.44 1211.77 L1079.85 1211.77 L1079.26 1211.77 L1078.68 1211.77 L1078.09 1211.77 L1077.51 1211.77 L1076.92 1211.77 L1076.33 1211.77 L1075.75 1211.77 L1075.16 1211.77 L1074.57 1211.77 L1073.99 1211.77 L1073.4 1211.77 L1072.81 1211.77 L1072.23 1211.77 L1071.64 1211.77 L1071.06 1211.77 L1070.47 1211.77 L1069.88 1211.77 L1069.3 1211.77 L1068.71 1211.77 L1068.12 1211.77 L1067.54 1211.77 L1066.95 1211.77 L1066.36 1211.77 L1065.78 1211.77 L1065.19 1211.77 L1064.6 1211.77 L1064.02 1211.77 L1063.43 1211.77 L1062.85 1211.77 L1062.26 1211.77 L1061.67 1211.77 L1061.09 1211.77 L1060.5 1211.77 L1059.91 1211.77 L1059.33 1211.77 L1058.74 1211.77 L1058.15 1211.77 L1057.57 1211.77 L1056.98 1211.77 L1056.39 1211.77 L1055.81 1211.77 L1055.22 1211.77 L1054.64 1211.77 L1054.05 1211.77 L1053.46 1211.77 L1052.88 1211.77 L1052.29 1211.77 L1051.7 1211.77 L1051.12 1211.77 L1050.53 1211.77 L1049.94 1211.77 L1049.36 1211.77 L1048.77 1211.77 L1048.19 1211.77 L1047.6 1211.77 L1047.01 1211.77 L1046.43 1211.77 L1045.84 1211.77 L1045.25 1211.77 L1044.67 1211.77 L1044.08 1211.77 L1043.49 1211.77 L1042.91 1211.77 L1042.32 1211.77 L1041.73 1211.77 L1041.15 1211.77 L1040.56 1211.77 L1039.98 1211.77 L1039.39 1211.77 L1038.8 1211.77 L1038.22 1211.77 L1037.63 1211.77 L1037.04 1211.77 L1036.46 1211.77 L1035.87 1211.77 L1035.28 1211.77 L1034.7 1211.77 L1034.11 1211.77 L1033.52 1211.77 L1032.94 1211.77 L1032.35 1211.77 L1031.77 1211.77 L1031.18 1211.77 L1030.59 1211.77 L1030.01 1211.77 L1029.42 1211.77 L1028.83 1211.77 L1028.25 1211.77 L1027.66 1211.77 L1027.07 1211.77 L1026.49 1211.77 L1025.9 1211.77 L1025.32 1211.77 L1024.73 1211.77 L1024.14 1211.77 L1023.56 1211.77 L1022.97 1211.77 L1022.38 1211.77 L1021.8 1211.77 L1021.21 1211.77 L1020.62 1211.77 L1020.04 1211.77 L1019.45 1211.77 L1018.86 1211.77 L1018.28 1211.77 L1017.69 1211.77 L1017.11 1211.77 L1016.52 1211.77 L1015.93 1211.77 L1015.35 1211.77 L1014.76 1211.77 L1014.17 1211.77 L1013.59 1211.77 L1013 1211.77 L1012.41 1211.77 L1011.83 1211.77 L1011.24 1211.77 L1010.65 1211.77 L1010.07 1211.77 L1009.48 1211.77 L1008.9 1211.77 L1008.31 1211.77 L1007.72 1211.77 L1007.14 1211.77 L1006.55 1211.77 L1005.96 1211.77 L1005.38 1211.77 L1004.79 1211.77 L1004.2 1211.77 L1003.62 1211.77 L1003.03 1211.77 L1002.44 1211.77 L1001.86 1211.77 L1001.27 1211.77 L1000.69 1211.77 L1000.1 1211.77 L999.513 1211.77 L998.926 1211.77 L998.34 1211.77 L997.754 1211.77 L997.167 1211.77 L996.581 1211.77 L995.994 1211.77 L995.408 1211.77 L994.822 1211.77 L994.235 1211.77 L993.649 1211.77 L993.062 1211.77 L992.476 1211.77 L991.889 1211.77 L991.303 1211.77 L990.717 1211.77 L990.13 1211.77 L989.544 1211.77 L988.957 1211.77 L988.371 1211.77 L987.785 1211.77 L987.198 1211.77 L986.612 1211.77 L986.025 1211.77  Z\" fill=\"#3da44d\" fill-rule=\"evenodd\" fill-opacity=\"0.5\"/>\n<polyline clip-path=\"url(#clip432)\" style=\"stroke:#3da44d; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"986.025,1211.82 986.612,1211.82 987.198,1211.82 987.785,1211.82 988.371,1211.82 988.957,1211.82 989.544,1211.82 990.13,1211.82 990.717,1211.82 991.303,1211.82 991.889,1211.82 992.476,1211.82 993.062,1211.82 993.649,1211.82 994.235,1211.82 994.822,1211.82 995.408,1211.82 995.994,1211.82 996.581,1211.82 997.167,1211.82 997.754,1211.82 998.34,1211.82 998.926,1211.82 999.513,1211.82 1000.1,1211.82 1000.69,1211.82 1001.27,1211.82 1001.86,1211.82 1002.44,1211.82 1003.03,1211.82 1003.62,1211.82 1004.2,1211.82 1004.79,1211.82 1005.38,1211.82 1005.96,1211.82 1006.55,1211.82 1007.14,1211.82 1007.72,1211.82 1008.31,1211.82 1008.9,1211.82 1009.48,1211.82 1010.07,1211.82 1010.65,1211.82 1011.24,1211.82 1011.83,1211.82 1012.41,1211.82 1013,1211.82 1013.59,1211.82 1014.17,1211.82 1014.76,1211.82 1015.35,1211.82 1015.93,1211.82 1016.52,1211.82 1017.11,1211.82 1017.69,1211.82 1018.28,1211.82 1018.86,1211.82 1019.45,1211.82 1020.04,1211.82 1020.62,1211.82 1021.21,1211.82 1021.8,1211.82 1022.38,1211.82 1022.97,1211.82 1023.56,1211.82 1024.14,1211.82 1024.73,1211.82 1025.32,1211.82 1025.9,1211.82 1026.49,1211.82 1027.07,1211.82 1027.66,1211.82 1028.25,1211.82 1028.83,1211.82 1029.42,1211.82 1030.01,1211.82 1030.59,1211.82 1031.18,1211.82 1031.77,1211.82 1032.35,1211.82 1032.94,1211.82 1033.52,1211.82 1034.11,1211.82 1034.7,1211.82 1035.28,1211.82 1035.87,1211.82 1036.46,1211.82 1037.04,1211.82 1037.63,1211.82 1038.22,1211.82 1038.8,1211.82 1039.39,1211.82 1039.98,1211.82 1040.56,1211.82 1041.15,1211.82 1041.73,1211.82 1042.32,1211.82 1042.91,1211.82 1043.49,1211.82 1044.08,1211.82 1044.67,1211.82 1045.25,1211.82 1045.84,1211.82 1046.43,1211.82 1047.01,1211.82 1047.6,1211.82 1048.19,1211.82 1048.77,1211.82 1049.36,1211.82 1049.94,1211.82 1050.53,1211.82 1051.12,1211.82 1051.7,1211.82 1052.29,1211.82 1052.88,1211.82 1053.46,1211.82 1054.05,1211.82 1054.64,1211.82 1055.22,1211.82 1055.81,1211.82 1056.39,1211.82 1056.98,1211.82 1057.57,1211.82 1058.15,1211.82 1058.74,1211.82 1059.33,1211.82 1059.91,1211.82 1060.5,1211.82 1061.09,1211.82 1061.67,1211.82 1062.26,1211.82 1062.85,1211.82 1063.43,1211.82 1064.02,1211.82 1064.6,1211.82 1065.19,1211.82 1065.78,1211.82 1066.36,1211.82 1066.95,1211.82 1067.54,1211.82 1068.12,1211.82 1068.71,1211.82 1069.3,1211.82 1069.88,1211.82 1070.47,1211.82 1071.06,1211.82 1071.64,1211.82 1072.23,1211.82 1072.81,1211.82 1073.4,1211.82 1073.99,1211.82 1074.57,1211.82 1075.16,1211.82 1075.75,1211.82 1076.33,1211.82 1076.92,1211.82 1077.51,1211.82 1078.09,1211.82 1078.68,1211.82 1079.26,1211.82 1079.85,1211.82 1080.44,1211.82 1081.02,1211.82 1081.61,1211.82 1082.2,1211.82 1082.78,1211.82 1083.37,1211.82 1083.96,1211.82 1084.54,1211.82 1085.13,1211.82 1085.72,1211.82 1086.3,1211.82 1086.89,1211.82 1087.47,1211.82 1088.06,1211.82 1088.65,1211.82 1089.23,1211.82 1089.82,1211.82 1090.41,1211.82 1090.99,1211.82 1091.58,1211.82 1092.17,1211.82 1092.75,1211.82 1093.34,1211.82 1093.93,1211.82 1094.51,1211.82 1095.1,1211.82 1095.68,1211.82 1096.27,1211.82 1096.86,1211.82 1097.44,1211.82 1098.03,1211.82 1098.62,1211.82 1099.2,1211.82 1099.79,1211.82 1100.38,1211.82 1100.96,1211.82 1101.55,1211.82 1102.14,1211.82 1102.72,1211.82 1103.31,1211.82 1103.89,1211.82 1104.48,1211.82 1105.07,1211.82 1105.65,1211.82 1106.24,1211.82 1106.83,1211.82 1107.41,1211.82 1108,1211.82 1108.59,1211.82 1109.17,1211.82 1109.76,1211.82 1110.34,1211.82 1110.93,1211.82 1111.52,1211.82 1112.1,1211.82 1112.69,1211.82 1113.28,1211.82 1113.86,1211.82 1114.45,1211.82 1115.04,1211.82 1115.62,1211.82 1116.21,1211.82 1116.8,1211.82 1117.38,1211.82 1117.97,1211.82 1118.55,1211.82 1119.14,1211.82 1119.73,1211.82 1120.31,1211.82 1120.9,1211.82 1121.49,1211.82 1122.07,1211.82 1122.66,1211.82 1123.25,1211.82 1123.83,1211.82 1124.42,1211.82 1125.01,1211.82 1125.59,1211.82 1126.18,1211.82 1126.76,1211.82 1127.35,1211.82 1127.94,1211.82 1128.52,1211.82 1129.11,1211.82 1129.7,1211.82 1130.28,1211.82 1130.87,1211.82 1131.46,1211.82 1132.04,1211.82 1132.63,1211.82 1133.21,1211.82 1133.8,1211.82 1134.39,1211.82 1134.97,1211.82 1135.56,1211.82 1136.15,1211.82 1136.73,1211.82 1137.32,1211.82 1137.91,1211.82 1138.49,1211.82 1139.08,1211.82 1139.67,1211.82 1140.25,1211.82 1140.84,1211.82 1141.42,1211.82 1142.01,1211.82 1142.6,1211.82 1143.18,1211.82 1143.77,1211.82 1144.36,1211.82 1144.94,1211.82 1145.53,1211.82 1146.12,1211.82 1146.7,1211.82 1147.29,1211.82 1147.88,1211.82 1148.46,1211.82 1149.05,1211.82 1149.63,1211.82 1150.22,1211.82 1150.81,1211.82 1151.39,1211.82 1151.98,1211.82 1152.57,1211.82 1153.15,1211.82 1153.74,1211.82 1154.33,1211.82 1154.91,1211.82 1155.5,1211.82 1156.09,1211.82 1156.67,1211.82 1157.26,1211.82 1157.84,1211.82 1158.43,1211.82 1159.02,1211.82 1159.6,1211.82 1160.19,1211.82 1160.78,1211.82 1161.36,1211.82 1161.95,1211.82 1162.54,1211.82 1163.12,1211.82 1163.71,1211.82 1164.29,1211.82 1164.88,1211.82 1165.47,1211.82 1166.05,1211.82 1166.64,1211.82 1167.23,1211.82 1167.81,1211.82 1168.4,1211.82 1168.99,1211.82 1169.57,1211.82 1170.16,1211.82 1170.75,1211.82 1171.33,1211.82 1171.92,1211.82 1172.5,1211.82 1173.09,1211.82 1173.68,1211.82 1174.26,1211.82 1174.85,1211.82 1175.44,1211.82 1176.02,1211.82 1176.61,1211.82 1177.2,1211.82 1177.78,1211.82 1178.37,1211.82 1178.96,1211.82 1179.54,1211.82 1180.13,1211.82 1180.71,1211.82 1181.3,1211.82 1181.89,1211.82 1182.47,1211.82 1183.06,1211.82 1183.65,1211.82 1184.23,1211.82 1184.82,1211.82 1185.41,1211.82 1185.99,1211.82 1186.58,1211.82 1187.16,1211.82 1187.75,1211.82 1188.34,1211.82 1188.92,1211.82 1189.51,1211.82 1190.1,1211.82 1190.68,1211.82 1191.27,1211.82 1191.86,1211.82 1192.44,1211.82 1193.03,1211.82 1193.62,1211.82 1194.2,1211.82 1194.79,1211.82 1195.37,1211.82 1195.96,1211.82 1196.55,1211.82 1197.13,1211.82 1197.72,1211.82 1198.31,1211.82 1198.89,1211.82 1199.48,1211.82 1200.07,1211.82 1200.65,1211.82 1201.24,1211.82 1201.83,1211.82 1202.41,1211.82 1203,1211.82 1203.58,1211.82 1204.17,1211.82 1204.76,1211.82 1205.34,1211.82 1205.93,1211.82 1206.52,1211.82 1207.1,1211.82 1207.69,1211.82 1208.28,1211.82 1208.86,1211.82 1209.45,1211.82 1210.03,1211.82 1210.62,1211.82 1211.21,1211.82 1211.79,1211.82 1212.38,1211.82 1212.97,1211.82 1213.55,1211.82 1214.14,1211.82 1214.73,1211.82 1215.31,1211.82 1215.9,1211.82 1216.49,1211.82 1217.07,1211.82 1217.66,1211.82 1218.24,1211.82 1218.83,1211.82 1219.42,1211.82 1220,1211.82 1220.59,1211.82 1221.18,1211.82 1221.76,1211.82 1222.35,1211.82 1222.94,1211.82 1223.52,1211.82 1224.11,1211.82 1224.7,1211.82 1225.28,1211.82 1225.87,1211.82 1226.45,1211.82 1227.04,1211.82 1227.63,1211.82 1228.21,1211.82 1228.8,1211.82 1229.39,1211.82 1229.97,1211.82 1230.56,1211.82 1231.15,1211.82 1231.73,1211.82 1232.32,1211.82 1232.91,1211.82 1233.49,1211.82 1234.08,1211.82 1234.66,1211.82 1235.25,1211.82 1235.84,1211.82 1236.42,1211.82 1237.01,1211.82 1237.6,1211.82 1238.18,1211.82 1238.77,1211.82 1239.36,1211.82 1239.94,1211.82 1240.53,1211.82 1241.11,1211.82 1241.7,1211.82 1242.29,1211.82 1242.87,1211.82 1243.46,1211.82 1244.05,1211.82 1244.63,1211.82 1245.22,1211.82 1245.81,1211.82 1246.39,1211.82 1246.98,1211.82 1247.57,1211.82 1248.15,1211.82 1248.74,1211.82 1249.32,1211.82 1249.91,1211.82 1250.5,1211.82 1251.08,1211.82 1251.67,1211.82 1252.26,1211.82 1252.84,1211.82 1253.43,1211.82 1254.02,1211.82 1254.6,1211.82 1255.19,1211.82 1255.78,1211.82 1256.36,1211.82 1256.95,1211.82 1257.53,1211.82 1258.12,1211.82 1258.71,1211.82 1259.29,1211.82 1259.88,1211.82 1260.47,1211.82 1261.05,1211.82 1261.64,1211.82 1262.23,1211.82 1262.81,1211.82 1263.4,1211.82 1263.98,1211.82 1264.57,1211.82 1265.16,1211.82 1265.74,1211.82 1266.33,1211.82 1266.92,1211.82 1267.5,1211.82 1268.09,1211.82 1268.68,1211.82 1269.26,1211.82 1269.85,1211.82 1270.44,1211.82 1271.02,1211.82 1271.61,1211.82 1272.19,1211.82 1272.78,1211.82 1273.37,1211.82 1273.95,1211.82 1274.54,1211.82 1275.13,1211.82 1275.71,1211.82 1276.3,1211.82 1276.89,1211.82 1277.47,1211.82 1278.06,1211.82 1278.65,1211.82 1279.23,1211.82 1279.82,1211.82 1280.4,1211.82 1280.99,1211.82 1281.58,1211.82 1282.16,1211.82 1282.75,1211.82 1283.34,1211.82 1283.92,1211.82 1284.51,1211.82 1285.1,1211.82 1285.68,1211.82 1286.27,1211.82 1286.86,1211.82 1287.44,1211.82 1288.03,1211.82 1288.61,1211.82 1289.2,1211.82 1289.79,1211.82 1290.37,1211.82 1290.96,1211.82 1291.55,1211.82 1292.13,1211.82 1292.72,1211.82 1293.31,1211.82 1293.89,1211.82 1294.48,1211.82 1295.06,1211.82 1295.65,1211.82 1296.24,1211.82 1296.82,1211.82 1297.41,1211.82 1298,1211.82 1298.58,1211.82 1299.17,1211.82 1299.76,1211.82 1300.34,1211.82 1300.93,1211.82 1301.52,1211.82 1302.1,1211.82 1302.69,1211.82 1303.27,1211.82 1303.86,1211.82 1304.45,1211.82 1305.03,1211.82 1305.62,1211.82 1306.21,1211.82 1306.79,1211.82 1307.38,1211.82 1307.97,1211.82 1308.55,1211.82 1309.14,1211.82 1309.73,1211.82 1310.31,1211.82 1310.9,1211.82 1311.48,1211.82 1312.07,1211.82 1312.66,1211.82 1313.24,1211.82 1313.83,1211.82 1314.42,1211.82 1315,1211.82 1315.59,1211.82 1316.18,1211.82 1316.76,1211.82 1317.35,1211.82 1317.93,1211.82 1318.52,1211.82 1319.11,1211.82 1319.69,1211.82 1320.28,1211.82 1320.87,1211.82 1321.45,1211.82 1322.04,1211.82 1322.63,1211.82 1323.21,1211.82 1323.8,1211.82 1324.39,1211.82 1324.97,1211.82 1325.56,1211.82 1326.14,1211.82 1326.73,1211.82 1327.32,1211.82 1327.9,1211.82 1328.49,1211.82 1329.08,1211.82 1329.66,1211.82 1330.25,1211.82 1330.84,1211.82 1331.42,1211.82 1332.01,1211.82 1332.6,1211.82 1333.18,1211.82 1333.77,1211.82 1334.35,1211.82 1334.94,1211.82 1335.53,1211.82 1336.11,1211.82 1336.7,1211.82 1337.29,1211.82 1337.87,1211.82 1338.46,1211.82 1339.05,1211.82 1339.63,1211.82 1340.22,1211.82 1340.8,1211.82 1341.39,1211.82 1341.98,1211.82 1342.56,1211.82 1343.15,1211.82 1343.74,1211.82 1344.32,1211.82 1344.91,1211.82 1345.5,1211.82 1346.08,1211.82 1346.67,1211.82 1347.26,1211.82 1347.84,1211.82 1348.43,1211.82 1349.01,1211.82 1349.6,1211.82 1350.19,1211.82 1350.77,1211.82 1351.36,1211.82 1351.95,1211.82 1352.53,1211.82 1353.12,1211.82 1353.71,1211.82 1354.29,1211.82 1354.88,1211.82 1355.47,1211.82 1356.05,1211.82 1356.64,1211.82 1357.22,1211.82 1357.81,1211.82 1358.4,1211.82 1358.98,1211.82 1359.57,1211.82 1360.16,1211.82 1360.74,1211.82 1361.33,1211.82 1361.92,1211.82 1362.5,1211.82 1363.09,1211.82 1363.68,1211.82 1364.26,1211.82 1364.85,1211.82 1365.43,1211.82 1366.02,1211.82 1366.61,1211.82 1367.19,1211.82 1367.78,1211.82 1368.37,1211.82 1368.95,1211.82 1369.54,1211.82 1370.13,1211.82 1370.71,1211.82 1371.3,1211.82 1371.88,1211.82 1372.47,1211.82 1373.06,1211.82 1373.64,1211.82 1374.23,1211.82 1374.82,1211.82 1375.4,1211.82 1375.99,1211.82 1376.58,1211.82 1377.16,1211.82 1377.75,1211.82 1378.34,1211.82 1378.92,1211.82 1379.51,1211.82 1380.09,1211.82 1380.68,1211.82 1381.27,1211.82 1381.85,1211.82 1382.44,1211.82 1383.03,1211.82 1383.61,1211.82 1384.2,1211.82 1384.79,1211.82 1385.37,1211.82 1385.96,1211.82 1386.55,1211.82 1387.13,1211.82 1387.72,1211.82 1388.3,1211.82 1388.89,1211.82 1389.48,1211.82 1390.06,1211.82 1390.65,1211.82 1391.24,1211.82 1391.82,1211.82 1392.41,1211.82 1393,1211.82 1393.58,1211.82 1394.17,1211.82 1394.75,1211.82 1395.34,1211.82 1395.93,1211.82 1396.51,1211.82 1397.1,1211.82 1397.69,1211.82 1398.27,1211.82 1398.86,1211.82 1399.45,1211.82 1400.03,1211.82 1400.62,1211.82 1401.21,1211.82 1401.79,1211.82 1402.38,1211.82 1402.96,1211.82 1403.55,1211.82 1404.14,1211.82 1404.72,1211.82 1405.31,1211.82 1405.9,1211.82 1406.48,1211.82 1407.07,1211.82 1407.66,1211.82 1408.24,1211.82 1408.83,1211.82 1409.42,1211.82 1410,1211.82 1410.59,1211.82 1411.17,1211.82 1411.76,1211.82 1412.35,1211.82 1412.93,1211.82 1413.52,1211.82 1414.11,1211.82 1414.69,1211.82 1415.28,1211.82 1415.87,1211.82 1416.45,1211.82 1417.04,1211.82 1417.63,1211.82 1418.21,1211.82 1418.8,1211.82 1419.38,1211.82 1419.97,1211.82 1420.56,1211.82 1421.14,1211.82 1421.73,1211.82 1422.32,1211.82 1422.9,1211.82 1423.49,1211.82 1424.08,1211.82 1424.66,1211.82 1425.25,1211.82 1425.83,1211.82 1426.42,1211.82 1427.01,1211.82 1427.59,1211.82 1428.18,1211.82 1428.77,1211.82 1429.35,1211.82 1429.94,1211.82 1430.53,1211.82 1431.11,1211.82 1431.7,1211.82 1432.29,1211.82 1432.87,1211.82 1433.46,1211.82 1434.04,1211.82 1434.63,1211.82 1435.22,1211.82 1435.8,1211.82 1436.39,1211.82 1436.98,1211.82 1437.56,1211.82 1438.15,1211.82 1438.74,1211.82 1439.32,1211.82 1439.91,1211.82 1440.5,1211.82 1441.08,1211.82 1441.67,1211.82 1442.25,1211.82 1442.84,1211.82 1443.43,1211.82 1444.01,1211.82 1444.6,1211.82 1445.19,1211.82 1445.77,1211.82 1446.36,1211.82 1446.95,1211.82 1447.53,1211.82 1448.12,1211.82 1448.7,1211.82 1449.29,1211.82 1449.88,1211.82 1450.46,1211.82 1451.05,1211.82 1451.64,1211.82 1452.22,1211.82 1452.81,1211.82 1453.4,1211.82 1453.98,1211.82 1454.57,1211.82 1455.16,1211.82 1455.74,1211.82 1456.33,1211.82 1456.91,1211.82 1457.5,1211.82 1458.09,1211.82 1458.67,1211.82 1459.26,1211.82 1459.85,1211.82 1460.43,1211.82 1461.02,1211.82 1461.61,1211.82 1462.19,1211.82 1462.78,1211.82 1463.37,1211.82 1463.95,1211.82 1464.54,1211.82 1465.12,1211.82 1465.71,1211.82 1466.3,1211.82 1466.88,1211.82 1467.47,1211.82 1468.06,1211.82 1468.64,1211.82 1469.23,1211.82 1469.82,1211.82 1470.4,1211.82 1470.99,1211.82 1471.57,1211.82 1472.16,1211.82 1472.75,1211.82 1473.33,1211.82 1473.92,1211.82 1474.51,1211.82 1475.09,1211.82 1475.68,1211.82 1476.27,1211.82 1476.85,1211.82 1477.44,1211.82 1478.03,1211.82 1478.61,1211.82 1479.2,1211.82 1479.78,1211.82 1480.37,1211.82 1480.96,1211.82 1481.54,1211.82 1482.13,1211.82 1482.72,1211.82 1483.3,1211.82 1483.89,1211.82 1484.48,1211.82 1485.06,1211.82 1485.65,1211.82 1486.24,1211.82 1486.82,1211.82 1487.41,1211.82 1487.99,1211.82 1488.58,1211.82 1489.17,1211.82 1489.75,1211.82 1490.34,1211.82 1490.93,1211.82 1491.51,1211.82 1492.1,1211.82 1492.69,1211.82 1493.27,1211.82 1493.86,1211.82 1494.45,1211.82 1495.03,1211.82 1495.62,1211.82 1496.2,1211.82 1496.79,1211.82 1497.38,1211.82 1497.96,1211.82 1498.55,1211.82 1499.14,1211.82 1499.72,1211.82 1500.31,1211.82 1500.9,1211.82 1501.48,1211.82 1502.07,1211.82 1502.65,1211.82 1503.24,1211.82 1503.83,1211.82 1504.41,1211.82 1505,1211.82 1505.59,1211.82 1506.17,1211.82 1506.76,1211.82 1507.35,1211.82 1507.93,1211.82 1508.52,1211.82 1509.11,1211.82 1509.69,1211.82 1510.28,1211.82 1510.86,1211.82 1511.45,1211.82 1512.04,1211.82 1512.62,1211.82 1513.21,1211.82 1513.8,1211.82 1514.38,1211.82 1514.97,1211.82 1515.56,1211.82 1516.14,1211.82 1516.73,1211.82 1517.32,1211.82 1517.9,1211.82 1518.49,1211.82 1519.07,1211.82 1519.66,1211.82 1520.25,1211.82 1520.83,1211.82 1521.42,1211.82 1522.01,1211.82 1522.59,1211.82 1523.18,1211.82 1523.77,1211.82 1524.35,1211.82 1524.94,1211.82 1525.52,1211.82 1526.11,1211.82 1526.7,1211.82 1527.28,1211.82 1527.87,1211.82 1528.46,1211.82 1529.04,1211.82 1529.63,1211.82 1530.22,1211.82 1530.8,1211.82 1531.39,1211.82 1531.98,1211.82 1532.56,1211.82 1533.15,1211.82 1533.73,1211.82 1534.32,1211.82 1534.91,1211.82 1535.49,1211.82 1536.08,1211.82 1536.67,1211.82 1537.25,1211.82 1537.84,1211.82 1538.43,1211.82 1539.01,1211.82 1539.6,1211.82 1540.19,1211.82 1540.77,1211.82 1541.36,1211.82 1541.94,1211.82 1542.53,1211.82 1543.12,1211.82 1543.7,1211.82 1544.29,1211.82 1544.88,1211.82 1545.46,1211.82 1546.05,1211.82 1546.64,1211.82 1547.22,1211.82 1547.81,1211.82 1548.4,1211.82 1548.98,1211.82 1549.57,1211.82 1550.15,1211.82 1550.74,1211.82 1551.33,1211.82 1551.91,1211.82 1552.5,1211.82 1553.09,1211.82 1553.67,1211.82 1554.26,1211.82 1554.85,1211.82 1555.43,1211.82 1556.02,1211.82 1556.6,1211.82 1557.19,1211.82 1557.78,1211.82 1558.36,1211.82 1558.95,1211.82 1559.54,1211.82 1560.12,1211.82 1560.71,1211.82 1561.3,1211.82 1561.88,1211.82 1562.47,1211.82 1563.06,1211.82 1563.64,1211.82 1564.23,1211.82 1564.81,1211.82 1565.4,1211.82 1565.99,1211.82 1566.57,1211.82 1567.16,1211.82 1567.75,1211.82 1568.33,1211.82 1568.92,1211.82 1569.51,1211.82 1570.09,1211.82 1570.68,1211.82 1571.27,1211.82 1571.85,1211.82 1572.44,1211.82 1573.02,1211.82 1573.61,1211.82 1574.2,1211.82 1574.78,1211.82 1575.37,1211.82 1575.96,1211.82 1576.54,1211.82 1577.13,1211.82 1577.72,1211.82 1578.3,1211.82 1578.89,1211.82 1579.47,1211.82 1580.06,1211.82 1580.65,1211.82 1581.23,1211.82 1581.82,1211.82 1582.41,1211.82 1582.99,1211.82 1583.58,1211.82 1584.17,1211.82 1584.75,1211.82 1585.34,1211.82 1585.93,1211.82 1586.51,1211.82 1587.1,1211.82 1587.68,1211.82 1588.27,1211.82 1588.86,1211.82 1589.44,1211.82 1590.03,1211.82 1590.62,1211.82 1591.2,1211.82 1591.79,1211.82 1592.38,1211.82 1592.96,1211.82 1593.55,1211.82 1594.14,1211.82 1594.72,1211.82 1595.31,1211.82 1595.89,1211.82 1596.48,1211.82 1597.07,1211.82 1597.65,1211.82 1598.24,1211.82 1598.83,1211.82 1599.41,1211.82 1600,1211.82 1600.59,1211.82 1601.17,1211.82 1601.76,1211.82 1602.34,1211.82 1602.93,1211.82 1603.52,1211.82 1604.1,1211.82 1604.69,1211.82 1605.28,1211.82 1605.86,1211.82 1606.45,1211.82 1607.04,1211.82 1607.62,1211.82 1608.21,1211.82 1608.8,1211.82 1609.38,1211.82 1609.97,1211.82 1610.55,1211.82 1611.14,1211.82 1611.73,1211.82 1612.31,1211.82 1612.9,1211.82 1613.49,1211.82 1614.07,1211.82 1614.66,1211.82 1615.25,1211.82 1615.83,1211.82 1616.42,1211.82 1617.01,1211.82 1617.59,1211.82 1618.18,1211.82 1618.76,1211.82 1619.35,1211.82 1619.94,1211.82 1620.52,1211.82 1621.11,1211.82 1621.7,1211.82 1622.28,1211.82 1622.87,1211.82 1623.46,1211.82 1624.04,1211.82 1624.63,1211.82 1625.22,1211.82 1625.8,1211.82 1626.39,1211.82 1626.97,1211.82 1627.56,1211.82 1628.15,1211.82 1628.73,1211.82 1629.32,1211.82 1629.91,1211.82 1630.49,1211.82 1631.08,1211.82 1631.67,1211.82 1632.25,1211.82 1632.84,1211.82 1633.42,1211.82 1634.01,1211.82 1634.6,1211.82 1635.18,1211.82 1635.77,1211.82 1636.36,1211.82 1636.94,1211.82 1637.53,1211.82 1638.12,1211.82 1638.7,1211.82 1639.29,1211.82 1639.88,1211.82 1640.46,1211.82 1641.05,1211.82 1641.63,1211.82 1642.22,1211.82 1642.81,1211.82 1643.39,1211.82 1643.98,1211.82 1644.57,1211.82 1645.15,1211.82 1645.74,1211.82 1646.33,1211.82 1646.91,1211.82 1647.5,1211.82 1648.09,1211.82 1648.67,1211.82 1649.26,1211.82 1649.84,1211.82 1650.43,1211.82 1651.02,1211.82 1651.6,1211.82 1652.19,1211.82 1652.78,1211.82 1653.36,1211.82 1653.95,1211.82 1654.54,1211.82 1655.12,1211.82 1655.71,1211.82 1656.29,1211.82 1656.88,1211.82 1657.47,1211.82 1658.05,1211.82 1658.64,1211.82 1659.23,1211.82 1659.81,1211.82 1660.4,1211.82 1660.99,1211.82 1661.57,1211.82 1662.16,1211.82 1662.75,1211.82 1663.33,1211.82 1663.92,1211.82 1664.5,1211.82 1665.09,1211.82 1665.68,1211.82 1666.26,1211.82 1666.85,1211.82 1667.44,1211.82 1668.02,1211.82 1668.61,1211.82 1669.2,1211.82 1669.78,1211.82 1670.37,1211.82 1670.96,1211.82 1671.54,1211.82 1672.13,1211.82 1672.71,1211.82 1673.3,1211.82 1673.89,1211.82 1674.47,1211.82 1675.06,1211.82 1675.65,1211.82 1676.23,1211.82 1676.82,1211.82 1677.41,1211.82 1677.99,1211.82 1678.58,1211.82 1679.17,1211.82 1679.75,1211.82 1680.34,1211.82 1680.92,1211.82 1681.51,1211.82 1682.1,1211.82 1682.68,1211.82 1683.27,1211.82 1683.86,1211.82 1684.44,1211.82 1685.03,1211.82 1685.62,1211.82 1686.2,1211.82 1686.79,1211.82 1687.37,1211.82 1687.96,1211.82 1688.55,1211.82 1689.13,1211.82 1689.72,1211.82 1690.31,1211.82 1690.89,1211.82 1691.48,1211.82 1692.07,1211.82 1692.65,1211.82 1693.24,1211.82 1693.83,1211.82 1694.41,1211.82 1695,1211.82 1695.58,1211.82 1696.17,1211.82 1696.76,1211.82 1697.34,1211.82 1697.93,1211.82 1698.52,1211.82 1699.1,1211.82 1699.69,1211.82 1700.28,1211.82 1700.86,1211.82 1701.45,1211.82 1702.04,1211.82 1702.62,1211.82 1703.21,1211.82 1703.79,1211.82 1704.38,1211.82 1704.97,1211.82 1705.55,1211.82 1706.14,1211.82 1706.73,1211.82 1707.31,1211.82 1707.9,1211.82 1708.49,1211.82 1709.07,1211.82 1709.66,1211.82 1710.24,1211.82 1710.83,1211.82 1711.42,1211.82 1712,1211.82 1712.59,1211.82 1713.18,1211.82 1713.76,1211.82 1714.35,1211.82 1714.94,1211.82 1715.52,1211.82 1716.11,1211.82 1716.7,1211.82 1717.28,1211.82 1717.87,1211.82 1718.45,1211.82 1719.04,1211.82 1719.63,1211.82 1720.21,1211.82 1720.8,1211.82 1721.39,1211.82 1721.97,1211.82 1722.56,1211.82 1723.15,1211.82 1723.73,1211.82 1724.32,1211.82 1724.91,1211.82 1725.49,1211.82 1726.08,1211.82 1726.66,1211.82 1727.25,1211.82 1727.84,1211.82 1728.42,1211.82 1729.01,1211.82 1729.6,1211.82 1730.18,1211.82 1730.77,1211.82 1731.36,1211.82 1731.94,1211.82 1732.53,1211.82 1733.11,1211.82 1733.7,1211.82 1734.29,1211.82 1734.87,1211.82 1735.46,1211.82 1736.05,1211.82 1736.63,1211.82 1737.22,1211.82 1737.81,1211.82 1738.39,1211.82 1738.98,1211.82 1739.57,1211.82 1740.15,1211.82 1740.74,1211.82 1741.32,1211.82 1741.91,1211.82 1742.5,1211.82 1743.08,1211.82 1743.67,1211.82 1744.26,1211.82 1744.84,1211.82 1745.43,1211.82 1746.02,1211.82 1746.6,1211.82 1747.19,1211.82 1747.78,1211.82 1748.36,1211.82 1748.95,1211.82 1749.53,1211.82 1750.12,1211.82 1750.71,1211.82 1751.29,1211.82 1751.88,1211.82 1752.47,1211.82 1753.05,1211.82 1753.64,1211.82 1754.23,1211.82 1754.81,1211.82 1755.4,1211.82 1755.99,1211.82 1756.57,1211.82 1757.16,1211.82 1757.74,1211.82 1758.33,1211.82 1758.92,1211.82 1759.5,1211.82 1760.09,1211.82 1760.68,1211.82 1761.26,1211.82 1761.85,1211.82 1762.44,1211.82 1763.02,1211.82 1763.61,1211.82 1764.19,1211.82 1764.78,1211.82 1765.37,1211.82 1765.95,1211.82 1766.54,1211.82 1767.13,1211.82 1767.71,1211.82 1768.3,1211.82 1768.89,1211.82 1769.47,1211.82 1770.06,1211.82 1770.65,1211.82 1771.23,1211.82 1771.82,1211.82 1772.4,1211.82 1772.99,1211.82 1773.58,1211.82 1774.16,1211.82 1774.75,1211.82 1775.34,1211.82 1775.92,1211.82 1776.51,1211.82 1777.1,1211.82 1777.68,1211.82 1778.27,1211.82 1778.86,1211.82 1779.44,1211.82 1780.03,1211.82 1780.61,1211.82 1781.2,1211.82 1781.79,1211.82 1782.37,1211.82 1782.96,1211.82 1783.55,1211.82 1784.13,1211.82 1784.72,1211.82 1785.31,1211.82 1785.89,1211.82 1786.48,1211.82 1787.06,1211.82 1787.65,1211.82 1788.24,1211.82 1788.82,1211.82 1789.41,1211.82 1790,1211.82 1790.58,1211.82 1791.17,1211.82 1791.76,1211.82 1792.34,1211.82 1792.93,1211.82 1793.52,1211.82 1794.1,1211.82 1794.69,1211.82 1795.27,1211.82 1795.86,1211.82 1796.45,1211.82 1797.03,1211.82 1797.62,1211.82 1798.21,1211.82 1798.79,1211.82 1799.38,1211.82 1799.97,1211.82 1800.55,1211.82 1801.14,1211.82 1801.73,1211.82 1802.31,1211.82 1802.9,1211.82 1803.48,1211.82 1804.07,1211.82 1804.66,1211.82 1805.24,1211.82 1805.83,1211.82 1806.42,1211.82 1807,1211.82 1807.59,1211.82 1808.18,1211.82 1808.76,1211.82 1809.35,1211.82 1809.94,1211.82 1810.52,1211.82 1811.11,1211.82 1811.69,1211.82 1812.28,1211.82 1812.87,1211.82 1813.45,1211.82 1814.04,1211.82 1814.63,1211.82 1815.21,1211.82 1815.8,1211.82 1816.39,1211.82 1816.97,1211.82 1817.56,1211.82 1818.14,1211.82 1818.73,1211.82 1819.32,1211.82 1819.9,1211.82 1820.49,1211.82 1821.08,1211.82 1821.66,1211.82 1822.25,1211.82 1822.84,1211.82 1823.42,1211.82 1824.01,1211.82 1824.6,1211.82 1825.18,1211.82 1825.77,1211.82 1826.35,1211.82 1826.94,1211.82 1827.53,1211.82 1828.11,1211.82 1828.7,1211.82 1829.29,1211.82 1829.87,1211.82 1830.46,1211.82 1831.05,1211.82 1831.63,1211.82 1832.22,1211.82 1832.81,1211.82 1833.39,1211.82 1833.98,1211.82 1834.56,1211.82 1835.15,1211.82 1835.74,1211.82 1836.32,1211.82 1836.91,1211.82 1837.5,1211.82 1838.08,1211.82 1838.67,1211.82 1839.26,1211.82 1839.84,1211.82 1840.43,1211.82 1841.01,1211.82 1841.6,1211.82 1842.19,1211.82 1842.77,1211.82 1843.36,1211.82 1843.95,1211.82 1844.53,1211.82 1845.12,1211.82 1845.71,1211.82 1846.29,1211.82 1846.88,1211.82 1847.47,1211.82 1848.05,1211.82 1848.64,1211.82 1849.22,1211.82 1849.81,1211.82 1850.4,1211.82 1850.98,1211.82 1851.57,1211.82 1852.16,1211.82 1852.74,1211.82 1853.33,1211.82 1853.92,1211.82 1854.5,1211.82 1855.09,1211.82 1855.68,1211.82 1856.26,1211.82 1856.85,1211.82 1857.43,1211.82 1858.02,1211.82 1858.61,1211.82 1859.19,1211.82 1859.78,1211.82 1860.37,1211.82 1860.95,1211.82 1861.54,1211.82 1862.13,1211.82 1862.71,1211.82 1863.3,1211.82 1863.88,1211.82 1864.47,1211.82 1865.06,1211.82 1865.64,1211.82 1866.23,1211.82 1866.82,1211.82 1867.4,1211.82 1867.99,1211.82 1868.58,1211.82 1869.16,1211.82 1869.75,1211.82 1870.34,1211.82 1870.92,1211.82 1871.51,1211.82 1872.09,1211.82 1872.68,1211.82 1873.27,1211.82 1873.85,1211.82 1874.44,1211.82 1875.03,1211.82 1875.61,1211.82 1876.2,1211.82 1876.79,1211.82 1877.37,1211.82 1877.96,1211.82 1878.55,1211.82 1879.13,1211.82 1879.72,1211.82 1880.3,1211.82 1880.89,1211.82 1881.48,1211.82 1882.06,1211.82 1882.65,1211.82 1883.24,1211.82 1883.82,1211.82 1884.41,1211.82 1885,1211.82 1885.58,1211.82 1886.17,1211.82 1886.76,1211.82 1887.34,1211.82 1887.93,1211.82 1888.51,1211.82 1889.1,1211.82 1889.69,1211.82 1890.27,1211.82 1890.86,1211.82 1891.45,1211.82 1892.03,1211.82 1892.62,1211.82 1893.21,1211.82 1893.79,1211.82 1894.38,1211.82 1894.96,1211.82 1895.55,1211.82 1896.14,1211.82 1896.72,1211.82 1897.31,1211.82 1897.9,1211.82 1898.48,1211.82 1899.07,1211.82 1899.66,1211.82 1900.24,1211.82 1900.83,1211.82 1901.42,1211.82 1902,1211.82 1902.59,1211.82 1903.17,1211.82 1903.76,1211.82 1904.35,1211.82 1904.93,1211.82 1905.52,1211.82 1906.11,1211.82 1906.69,1211.82 1907.28,1211.82 1907.87,1211.82 1908.45,1211.82 1909.04,1211.82 1909.63,1211.82 1910.21,1211.82 1910.8,1211.82 1911.38,1211.82 1911.97,1211.82 1912.56,1211.82 1913.14,1211.82 1913.73,1211.82 1914.32,1211.82 1914.9,1211.82 1915.49,1211.82 1916.08,1211.82 1916.66,1211.82 1917.25,1211.82 1917.83,1211.82 1918.42,1211.82 1919.01,1211.82 1919.59,1211.82 1920.18,1211.82 1920.77,1211.82 1921.35,1211.82 1921.94,1211.82 1922.53,1211.82 1923.11,1211.82 1923.7,1211.82 1924.29,1211.82 1924.87,1211.82 1925.46,1211.82 1926.04,1211.82 1926.63,1211.82 1927.22,1211.82 1927.8,1211.82 1928.39,1211.82 1928.98,1211.82 1929.56,1211.82 1930.15,1211.82 1930.74,1211.82 1931.32,1211.82 1931.91,1211.82 1932.5,1211.82 1933.08,1211.82 1933.67,1211.82 1934.25,1211.82 1934.84,1211.82 1935.43,1211.82 1936.01,1211.82 1936.6,1211.82 1937.19,1211.82 1937.77,1211.82 1938.36,1211.82 1938.95,1211.82 1939.53,1211.82 1940.12,1211.82 1940.71,1211.82 1941.29,1211.82 1941.88,1211.82 1942.46,1211.82 1943.05,1211.82 1943.64,1211.82 1944.22,1211.82 1944.81,1211.82 1945.4,1211.82 1945.98,1211.82 1946.57,1211.82 1947.16,1211.82 1947.74,1211.82 1948.33,1211.82 1948.91,1211.82 1949.5,1211.82 1950.09,1211.82 1950.67,1211.82 1951.26,1211.82 1951.85,1211.82 1952.43,1211.82 1953.02,1211.82 1953.61,1211.82 1954.19,1211.82 1954.78,1211.82 1955.37,1211.82 1955.95,1211.82 1956.54,1211.82 1957.12,1211.82 1957.71,1211.82 1958.3,1211.82 1958.88,1211.82 1959.47,1211.82 1960.06,1211.82 1960.64,1211.82 1961.23,1211.82 1961.82,1211.82 1962.4,1211.82 1962.99,1211.82 1963.58,1211.82 1964.16,1211.82 1964.75,1211.82 1965.33,1211.82 1965.92,1211.82 1966.51,1211.82 1967.09,1211.82 1967.68,1211.82 1968.27,1211.82 1968.85,1211.82 1969.44,1211.82 1970.03,1211.82 1970.61,1211.82 1971.2,1211.82 1971.78,1211.82 1972.37,1211.82 1972.96,1211.82 1973.54,1211.82 1974.13,1211.82 1974.72,1211.82 1975.3,1211.82 1975.89,1211.82 1976.48,1211.82 1977.06,1211.82 1977.65,1211.82 1978.24,1211.82 1978.82,1211.82 1979.41,1211.82 1979.99,1211.82 1980.58,1211.82 1981.17,1211.82 1981.75,1211.82 1982.34,1211.82 1982.93,1211.82 1983.51,1211.82 1984.1,1211.82 1984.69,1211.82 1985.27,1211.82 1985.86,1211.82 1986.45,1211.82 1987.03,1211.82 1987.62,1211.82 1988.2,1211.82 1988.79,1211.82 1989.38,1211.82 1989.96,1211.82 1990.55,1211.82 1991.14,1211.82 1991.72,1211.82 1992.31,1211.82 1992.9,1211.82 1993.48,1211.82 1994.07,1211.82 1994.65,1211.82 1995.24,1211.82 1995.83,1211.82 1996.41,1211.82 1997,1211.82 1997.59,1211.82 1998.17,1211.82 1998.76,1211.82 1999.35,1211.82 1999.93,1211.82 2000.52,1211.82 2001.11,1211.82 2001.69,1211.82 2002.28,1211.82 2002.86,1211.82 2003.45,1211.82 2004.04,1211.82 2004.62,1211.82 2005.21,1211.82 2005.8,1211.82 2006.38,1211.82 2006.97,1211.82 2007.56,1211.82 2008.14,1211.82 2008.73,1211.82 2009.32,1211.82 2009.9,1211.82 2010.49,1211.82 2011.07,1211.82 2011.66,1211.82 2012.25,1211.82 2012.83,1211.82 2013.42,1211.82 2014.01,1211.82 2014.59,1211.82 2015.18,1211.82 2015.77,1211.82 2016.35,1211.82 2016.94,1211.82 2017.53,1211.82 2018.11,1211.82 2018.7,1211.82 2019.28,1211.82 2019.87,1211.82 2020.46,1211.82 2021.04,1211.82 2021.63,1211.82 2022.22,1211.82 2022.8,1211.82 2023.39,1211.82 2023.98,1211.82 2024.56,1211.82 2025.15,1211.82 2025.73,1211.82 2026.32,1211.82 2026.91,1211.82 2027.49,1211.82 2028.08,1211.82 2028.67,1211.82 2029.25,1211.82 2029.84,1211.82 2030.43,1211.82 2031.01,1211.82 2031.6,1211.82 2032.19,1211.82 2032.77,1211.82 2033.36,1211.82 2033.94,1211.82 2034.53,1211.82 2035.12,1211.82 2035.7,1211.82 2036.29,1211.82 2036.88,1211.82 2037.46,1211.82 2038.05,1211.82 2038.64,1211.82 2039.22,1211.82 2039.81,1211.82 2040.4,1211.82 2040.98,1211.82 2041.57,1211.82 2042.15,1211.82 2042.74,1211.82 2043.33,1211.82 2043.91,1211.82 2044.5,1211.82 2045.09,1211.82 2045.67,1211.82 2046.26,1211.82 2046.85,1211.82 2047.43,1211.82 2048.02,1211.82 2048.6,1211.82 2049.19,1211.82 2049.78,1211.82 2050.36,1211.82 2050.95,1211.82 2051.54,1211.82 2052.12,1211.82 2052.71,1211.82 2053.3,1211.82 2053.88,1211.82 2054.47,1211.82 2055.06,1211.82 2055.64,1211.82 2056.23,1211.82 2056.81,1211.82 2057.4,1211.82 2057.99,1211.82 2058.57,1211.82 2059.16,1211.82 2059.75,1211.82 2060.33,1211.82 2060.92,1211.82 2061.51,1211.82 2062.09,1211.82 2062.68,1211.82 2063.27,1211.82 2063.85,1211.82 2064.44,1211.82 2065.02,1211.82 2065.61,1211.82 2066.2,1211.82 2066.78,1211.82 2067.37,1211.82 2067.96,1211.82 2068.54,1211.82 2069.13,1211.82 2069.72,1211.82 2070.3,1211.82 2070.89,1211.82 2071.48,1211.82 2072.06,1211.82 2072.65,1211.82 2073.23,1211.82 2073.82,1211.82 2074.41,1211.82 2074.99,1211.82 2075.58,1211.82 2076.17,1211.82 2076.75,1211.82 2077.34,1211.82 2077.93,1211.82 2078.51,1211.82 2079.1,1211.82 2079.68,1211.82 2080.27,1211.82 2080.86,1211.82 2081.44,1211.82 2082.03,1211.82 2082.62,1211.82 2083.2,1211.82 2083.79,1211.82 2084.38,1211.82 2084.96,1211.82 2085.55,1211.82 2086.14,1211.82 2086.72,1211.82 2087.31,1211.82 2087.89,1211.82 2088.48,1211.82 2089.07,1211.82 2089.65,1211.82 2090.24,1211.82 2090.83,1211.82 2091.41,1211.82 2092,1211.82 2092.59,1211.82 2093.17,1211.82 2093.76,1211.82 2094.35,1211.82 2094.93,1211.82 2095.52,1211.82 2096.1,1211.82 2096.69,1211.82 2097.28,1211.82 2097.86,1211.82 2098.45,1211.82 2099.04,1211.82 2099.62,1211.82 2100.21,1211.82 2100.8,1211.82 2101.38,1211.82 2101.97,1211.82 2102.55,1211.82 2103.14,1211.82 2103.73,1211.82 2104.31,1211.82 2104.9,1211.82 2105.49,1211.82 2106.07,1211.82 2106.66,1211.82 2107.25,1211.82 2107.83,1211.82 2108.42,1211.82 2109.01,1211.82 2109.59,1211.82 2110.18,1211.82 2110.76,1211.82 2111.35,1211.82 2111.94,1211.82 2112.52,1211.82 2113.11,1211.82 2113.7,1211.82 2114.28,1211.82 2114.87,1211.82 2115.46,1211.82 2116.04,1211.82 2116.63,1211.82 2117.22,1211.82 2117.8,1211.82 2118.39,1211.82 2118.97,1211.82 2119.56,1211.82 2120.15,1211.82 2120.73,1211.82 2121.32,1211.82 2121.91,1211.82 2122.49,1211.82 2123.08,1211.82 2123.67,1211.82 2124.25,1211.82 2124.84,1211.82 2125.42,1211.82 2126.01,1211.82 2126.6,1211.82 2127.18,1211.82 2127.77,1211.82 2128.36,1211.82 2128.94,1211.82 2129.53,1211.82 2130.12,1211.82 2130.7,1211.82 2131.29,1211.82 2131.88,1211.82 2132.46,1211.82 2133.05,1211.82 2133.63,1211.82 2134.22,1211.82 2134.81,1211.82 2135.39,1211.82 2135.98,1211.82 2136.57,1211.82 2137.15,1211.82 2137.74,1211.82 2138.33,1211.82 2138.91,1211.82 2139.5,1211.82 2140.09,1211.82 2140.67,1211.82 2141.26,1211.82 2141.84,1211.82 2142.43,1211.82 2143.02,1211.82 2143.6,1211.82 2144.19,1211.82 2144.78,1211.82 2145.36,1211.82 2145.95,1211.82 2146.54,1211.82 2147.12,1211.82 2147.71,1211.82 2148.3,1211.82 2148.88,1211.82 2149.47,1211.82 2150.05,1211.82 2150.64,1211.82 2151.23,1211.82 2151.81,1211.82 2152.4,1211.82 2152.99,1211.82 2153.57,1211.82 2154.16,1211.82 2154.75,1211.82 2155.33,1211.82 2155.92,1211.82 2156.5,1211.82 2157.09,1211.82 2157.68,1211.82 2158.26,1211.82 \"/>\n<polyline clip-path=\"url(#clip432)\" style=\"stroke:#d3d3d3; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"1562.32,1194.25 1399.48,899.083 \"/>\n<polyline clip-path=\"url(#clip432)\" style=\"stroke:#d3d3d3; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"985.439,1228.79 985.439,1194.25 2158.26,1194.25 2158.26,1228.79 985.439,1228.79 \"/>\n<path clip-path=\"url(#clip430)\" d=\"M1564.14 432.752 L2148.88 432.752 L2148.88 225.392 L1564.14 225.392  Z\" fill=\"#ffffff\" fill-rule=\"evenodd\" fill-opacity=\"1\"/>\n<polyline clip-path=\"url(#clip430)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"1564.14,432.752 2148.88,432.752 2148.88,225.392 1564.14,225.392 1564.14,432.752 \"/>\n<polyline clip-path=\"url(#clip430)\" style=\"stroke:#009af9; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"1584.85,277.232 1709.13,277.232 \"/>\n<path clip-path=\"url(#clip430)\" d=\"M1748.27 269.35 L1748.27 273.378 Q1746.46 272.452 1744.52 271.989 Q1742.57 271.526 1740.49 271.526 Q1737.32 271.526 1735.72 272.498 Q1734.15 273.471 1734.15 275.415 Q1734.15 276.896 1735.28 277.753 Q1736.41 278.586 1739.84 279.35 L1741.3 279.674 Q1745.84 280.646 1747.73 282.429 Q1749.66 284.188 1749.66 287.359 Q1749.66 290.97 1746.78 293.077 Q1743.94 295.183 1738.94 295.183 Q1736.85 295.183 1734.59 294.767 Q1732.34 294.373 1729.84 293.563 L1729.84 289.165 Q1732.2 290.392 1734.49 291.017 Q1736.78 291.619 1739.03 291.619 Q1742.04 291.619 1743.66 290.6 Q1745.28 289.558 1745.28 287.683 Q1745.28 285.947 1744.1 285.021 Q1742.94 284.095 1738.98 283.239 L1737.5 282.892 Q1733.54 282.058 1731.78 280.345 Q1730.03 278.609 1730.03 275.6 Q1730.03 271.943 1732.62 269.952 Q1735.21 267.961 1739.98 267.961 Q1742.34 267.961 1744.42 268.309 Q1746.51 268.656 1748.27 269.35 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip430)\" d=\"M1777.99 278.864 L1777.99 294.512 L1773.73 294.512 L1773.73 279.003 Q1773.73 275.322 1772.29 273.494 Q1770.86 271.665 1767.99 271.665 Q1764.54 271.665 1762.55 273.864 Q1760.56 276.063 1760.56 279.859 L1760.56 294.512 L1756.28 294.512 L1756.28 258.494 L1760.56 258.494 L1760.56 272.614 Q1762.09 270.276 1764.15 269.119 Q1766.23 267.961 1768.94 267.961 Q1773.4 267.961 1775.7 270.739 Q1777.99 273.494 1777.99 278.864 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip430)\" d=\"M1786.48 268.586 L1790.74 268.586 L1790.74 294.512 L1786.48 294.512 L1786.48 268.586 M1786.48 258.494 L1790.74 258.494 L1790.74 263.887 L1786.48 263.887 L1786.48 258.494 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip430)\" d=\"M1812.78 258.494 L1812.78 262.035 L1808.71 262.035 Q1806.41 262.035 1805.51 262.961 Q1804.63 263.887 1804.63 266.295 L1804.63 268.586 L1811.65 268.586 L1811.65 271.896 L1804.63 271.896 L1804.63 294.512 L1800.35 294.512 L1800.35 271.896 L1796.28 271.896 L1796.28 268.586 L1800.35 268.586 L1800.35 266.781 Q1800.35 262.452 1802.36 260.484 Q1804.38 258.494 1808.75 258.494 L1812.78 258.494 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip430)\" d=\"M1819.72 261.225 L1819.72 268.586 L1828.5 268.586 L1828.5 271.896 L1819.72 271.896 L1819.72 285.97 Q1819.72 289.142 1820.58 290.045 Q1821.46 290.947 1824.12 290.947 L1828.5 290.947 L1828.5 294.512 L1824.12 294.512 Q1819.19 294.512 1817.32 292.683 Q1815.44 290.832 1815.44 285.97 L1815.44 271.896 L1812.32 271.896 L1812.32 268.586 L1815.44 268.586 L1815.44 261.225 L1819.72 261.225 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><polyline clip-path=\"url(#clip430)\" style=\"stroke:#e26f46; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"1584.85,329.072 1709.13,329.072 \"/>\n<path clip-path=\"url(#clip430)\" d=\"M1748.27 321.19 L1748.27 325.218 Q1746.46 324.292 1744.52 323.829 Q1742.57 323.366 1740.49 323.366 Q1737.32 323.366 1735.72 324.338 Q1734.15 325.311 1734.15 327.255 Q1734.15 328.736 1735.28 329.593 Q1736.41 330.426 1739.84 331.19 L1741.3 331.514 Q1745.84 332.486 1747.73 334.269 Q1749.66 336.028 1749.66 339.199 Q1749.66 342.81 1746.78 344.917 Q1743.94 347.023 1738.94 347.023 Q1736.85 347.023 1734.59 346.607 Q1732.34 346.213 1729.84 345.403 L1729.84 341.005 Q1732.2 342.232 1734.49 342.857 Q1736.78 343.459 1739.03 343.459 Q1742.04 343.459 1743.66 342.44 Q1745.28 341.398 1745.28 339.523 Q1745.28 337.787 1744.1 336.861 Q1742.94 335.935 1738.98 335.079 L1737.5 334.732 Q1733.54 333.898 1731.78 332.185 Q1730.03 330.449 1730.03 327.44 Q1730.03 323.783 1732.62 321.792 Q1735.21 319.801 1739.98 319.801 Q1742.34 319.801 1744.42 320.149 Q1746.51 320.496 1748.27 321.19 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip430)\" d=\"M1777.99 330.704 L1777.99 346.352 L1773.73 346.352 L1773.73 330.843 Q1773.73 327.162 1772.29 325.334 Q1770.86 323.505 1767.99 323.505 Q1764.54 323.505 1762.55 325.704 Q1760.56 327.903 1760.56 331.699 L1760.56 346.352 L1756.28 346.352 L1756.28 310.334 L1760.56 310.334 L1760.56 324.454 Q1762.09 322.116 1764.15 320.959 Q1766.23 319.801 1768.94 319.801 Q1773.4 319.801 1775.7 322.579 Q1777.99 325.334 1777.99 330.704 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip430)\" d=\"M1786.48 320.426 L1790.74 320.426 L1790.74 346.352 L1786.48 346.352 L1786.48 320.426 M1786.48 310.334 L1790.74 310.334 L1790.74 315.727 L1786.48 315.727 L1786.48 310.334 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip430)\" d=\"M1812.78 310.334 L1812.78 313.875 L1808.71 313.875 Q1806.41 313.875 1805.51 314.801 Q1804.63 315.727 1804.63 318.135 L1804.63 320.426 L1811.65 320.426 L1811.65 323.736 L1804.63 323.736 L1804.63 346.352 L1800.35 346.352 L1800.35 323.736 L1796.28 323.736 L1796.28 320.426 L1800.35 320.426 L1800.35 318.621 Q1800.35 314.292 1802.36 312.324 Q1804.38 310.334 1808.75 310.334 L1812.78 310.334 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip430)\" d=\"M1819.72 313.065 L1819.72 320.426 L1828.5 320.426 L1828.5 323.736 L1819.72 323.736 L1819.72 337.81 Q1819.72 340.982 1820.58 341.885 Q1821.46 342.787 1824.12 342.787 L1828.5 342.787 L1828.5 346.352 L1824.12 346.352 Q1819.19 346.352 1817.32 344.523 Q1815.44 342.672 1815.44 337.81 L1815.44 323.736 L1812.32 323.736 L1812.32 320.426 L1815.44 320.426 L1815.44 313.065 L1819.72 313.065 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip430)\" d=\"M1869.35 325.403 Q1870.95 322.533 1873.17 321.167 Q1875.4 319.801 1878.4 319.801 Q1882.46 319.801 1884.65 322.649 Q1886.85 325.473 1886.85 330.704 L1886.85 346.352 L1882.57 346.352 L1882.57 330.843 Q1882.57 327.116 1881.25 325.311 Q1879.93 323.505 1877.22 323.505 Q1873.91 323.505 1871.99 325.704 Q1870.07 327.903 1870.07 331.699 L1870.07 346.352 L1865.79 346.352 L1865.79 330.843 Q1865.79 327.093 1864.47 325.311 Q1863.15 323.505 1860.4 323.505 Q1857.13 323.505 1855.21 325.727 Q1853.29 327.926 1853.29 331.699 L1853.29 346.352 L1849.01 346.352 L1849.01 320.426 L1853.29 320.426 L1853.29 324.454 Q1854.75 322.07 1856.78 320.936 Q1858.82 319.801 1861.62 319.801 Q1864.45 319.801 1866.41 321.236 Q1868.4 322.672 1869.35 325.403 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip430)\" d=\"M1917.52 332.324 L1917.52 334.408 L1897.94 334.408 Q1898.22 338.806 1900.58 341.121 Q1902.96 343.412 1907.2 343.412 Q1909.65 343.412 1911.95 342.81 Q1914.26 342.209 1916.53 341.005 L1916.53 345.033 Q1914.24 346.005 1911.83 346.514 Q1909.42 347.023 1906.95 347.023 Q1900.74 347.023 1897.11 343.412 Q1893.5 339.801 1893.5 333.644 Q1893.5 327.278 1896.92 323.551 Q1900.37 319.801 1906.21 319.801 Q1911.44 319.801 1914.47 323.181 Q1917.52 326.537 1917.52 332.324 M1913.27 331.074 Q1913.22 327.579 1911.3 325.496 Q1909.4 323.412 1906.25 323.412 Q1902.69 323.412 1900.53 325.426 Q1898.4 327.44 1898.08 331.098 L1913.27 331.074 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip430)\" d=\"M1936.3 333.32 Q1931.14 333.32 1929.14 334.5 Q1927.15 335.681 1927.15 338.528 Q1927.15 340.797 1928.64 342.139 Q1930.14 343.459 1932.71 343.459 Q1936.25 343.459 1938.38 340.959 Q1940.53 338.435 1940.53 334.269 L1940.53 333.32 L1936.3 333.32 M1944.79 331.56 L1944.79 346.352 L1940.53 346.352 L1940.53 342.417 Q1939.08 344.778 1936.9 345.912 Q1934.72 347.023 1931.58 347.023 Q1927.59 347.023 1925.23 344.801 Q1922.89 342.556 1922.89 338.806 Q1922.89 334.431 1925.81 332.209 Q1928.75 329.986 1934.56 329.986 L1940.53 329.986 L1940.53 329.57 Q1940.53 326.63 1938.59 325.033 Q1936.67 323.412 1933.17 323.412 Q1930.95 323.412 1928.84 323.945 Q1926.74 324.477 1924.79 325.542 L1924.79 321.607 Q1927.13 320.704 1929.33 320.264 Q1931.53 319.801 1933.61 319.801 Q1939.24 319.801 1942.02 322.718 Q1944.79 325.635 1944.79 331.56 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip430)\" d=\"M1975.12 330.704 L1975.12 346.352 L1970.86 346.352 L1970.86 330.843 Q1970.86 327.162 1969.42 325.334 Q1967.99 323.505 1965.12 323.505 Q1961.67 323.505 1959.68 325.704 Q1957.69 327.903 1957.69 331.699 L1957.69 346.352 L1953.4 346.352 L1953.4 320.426 L1957.69 320.426 L1957.69 324.454 Q1959.21 322.116 1961.27 320.959 Q1963.36 319.801 1966.07 319.801 Q1970.53 319.801 1972.83 322.579 Q1975.12 325.334 1975.12 330.704 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><polyline clip-path=\"url(#clip430)\" style=\"stroke:#3da44d; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"1584.85,380.912 1709.13,380.912 \"/>\n<path clip-path=\"url(#clip430)\" d=\"M1734.12 394.303 L1734.12 408.053 L1729.84 408.053 L1729.84 372.266 L1734.12 372.266 L1734.12 376.201 Q1735.47 373.887 1737.5 372.776 Q1739.56 371.641 1742.41 371.641 Q1747.13 371.641 1750.07 375.391 Q1753.03 379.141 1753.03 385.252 Q1753.03 391.363 1750.07 395.113 Q1747.13 398.863 1742.41 398.863 Q1739.56 398.863 1737.5 397.752 Q1735.47 396.618 1734.12 394.303 M1748.61 385.252 Q1748.61 380.553 1746.67 377.891 Q1744.75 375.206 1741.37 375.206 Q1737.99 375.206 1736.04 377.891 Q1734.12 380.553 1734.12 385.252 Q1734.12 389.951 1736.04 392.637 Q1737.99 395.299 1741.37 395.299 Q1744.75 395.299 1746.67 392.637 Q1748.61 389.951 1748.61 385.252 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip430)\" d=\"M1775.12 376.248 Q1774.4 375.831 1773.54 375.646 Q1772.71 375.438 1771.69 375.438 Q1768.08 375.438 1766.14 377.799 Q1764.22 380.137 1764.22 384.535 L1764.22 398.192 L1759.93 398.192 L1759.93 372.266 L1764.22 372.266 L1764.22 376.294 Q1765.56 373.933 1767.71 372.799 Q1769.86 371.641 1772.94 371.641 Q1773.38 371.641 1773.91 371.711 Q1774.45 371.757 1775.09 371.873 L1775.12 376.248 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip430)\" d=\"M1788.59 375.252 Q1785.16 375.252 1783.17 377.938 Q1781.18 380.6 1781.18 385.252 Q1781.18 389.905 1783.15 392.59 Q1785.14 395.252 1788.59 395.252 Q1791.99 395.252 1793.98 392.567 Q1795.97 389.882 1795.97 385.252 Q1795.97 380.646 1793.98 377.961 Q1791.99 375.252 1788.59 375.252 M1788.59 371.641 Q1794.15 371.641 1797.32 375.252 Q1800.49 378.863 1800.49 385.252 Q1800.49 391.618 1797.32 395.252 Q1794.15 398.863 1788.59 398.863 Q1783.01 398.863 1779.84 395.252 Q1776.69 391.618 1776.69 385.252 Q1776.69 378.863 1779.84 375.252 Q1783.01 371.641 1788.59 371.641 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip430)\" d=\"M1807.55 372.266 L1811.81 372.266 L1811.81 398.655 Q1811.81 403.609 1809.91 405.831 Q1808.03 408.053 1803.84 408.053 L1802.22 408.053 L1802.22 404.442 L1803.36 404.442 Q1805.79 404.442 1806.67 403.308 Q1807.55 402.197 1807.55 398.655 L1807.55 372.266 M1807.55 362.174 L1811.81 362.174 L1811.81 367.567 L1807.55 367.567 L1807.55 362.174 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip430)\" d=\"M1842.9 384.164 L1842.9 386.248 L1823.31 386.248 Q1823.59 390.646 1825.95 392.961 Q1828.34 395.252 1832.57 395.252 Q1835.03 395.252 1837.32 394.65 Q1839.63 394.049 1841.9 392.845 L1841.9 396.873 Q1839.61 397.845 1837.2 398.354 Q1834.79 398.863 1832.32 398.863 Q1826.11 398.863 1822.48 395.252 Q1818.87 391.641 1818.87 385.484 Q1818.87 379.118 1822.29 375.391 Q1825.74 371.641 1831.58 371.641 Q1836.81 371.641 1839.84 375.021 Q1842.9 378.377 1842.9 384.164 M1838.64 382.914 Q1838.59 379.419 1836.67 377.336 Q1834.77 375.252 1831.62 375.252 Q1828.06 375.252 1825.9 377.266 Q1823.78 379.28 1823.45 382.938 L1838.64 382.914 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip430)\" d=\"M1868.54 373.262 L1868.54 377.243 Q1866.74 376.248 1864.91 375.762 Q1863.1 375.252 1861.25 375.252 Q1857.11 375.252 1854.82 377.891 Q1852.52 380.507 1852.52 385.252 Q1852.52 389.998 1854.82 392.637 Q1857.11 395.252 1861.25 395.252 Q1863.1 395.252 1864.91 394.766 Q1866.74 394.257 1868.54 393.262 L1868.54 397.197 Q1866.76 398.03 1864.84 398.447 Q1862.94 398.863 1860.79 398.863 Q1854.93 398.863 1851.48 395.183 Q1848.03 391.502 1848.03 385.252 Q1848.03 378.91 1851.51 375.276 Q1855 371.641 1861.07 371.641 Q1863.03 371.641 1864.91 372.058 Q1866.78 372.451 1868.54 373.262 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip430)\" d=\"M1880.16 364.905 L1880.16 372.266 L1888.94 372.266 L1888.94 375.576 L1880.16 375.576 L1880.16 389.65 Q1880.16 392.822 1881.02 393.725 Q1881.9 394.627 1884.56 394.627 L1888.94 394.627 L1888.94 398.192 L1884.56 398.192 Q1879.63 398.192 1877.76 396.363 Q1875.88 394.512 1875.88 389.65 L1875.88 375.576 L1872.76 375.576 L1872.76 372.266 L1875.88 372.266 L1875.88 364.905 L1880.16 364.905 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip430)\" d=\"M1916.71 384.164 L1916.71 386.248 L1897.13 386.248 Q1897.41 390.646 1899.77 392.961 Q1902.15 395.252 1906.39 395.252 Q1908.84 395.252 1911.14 394.65 Q1913.45 394.049 1915.72 392.845 L1915.72 396.873 Q1913.43 397.845 1911.02 398.354 Q1908.61 398.863 1906.14 398.863 Q1899.93 398.863 1896.3 395.252 Q1892.69 391.641 1892.69 385.484 Q1892.69 379.118 1896.11 375.391 Q1899.56 371.641 1905.4 371.641 Q1910.63 371.641 1913.66 375.021 Q1916.71 378.377 1916.71 384.164 M1912.46 382.914 Q1912.41 379.419 1910.49 377.336 Q1908.59 375.252 1905.44 375.252 Q1901.88 375.252 1899.72 377.266 Q1897.59 379.28 1897.27 382.938 L1912.46 382.914 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip430)\" d=\"M1940.77 376.201 L1940.77 362.174 L1945.02 362.174 L1945.02 398.192 L1940.77 398.192 L1940.77 394.303 Q1939.42 396.618 1937.36 397.752 Q1935.33 398.863 1932.46 398.863 Q1927.76 398.863 1924.79 395.113 Q1921.85 391.363 1921.85 385.252 Q1921.85 379.141 1924.79 375.391 Q1927.76 371.641 1932.46 371.641 Q1935.33 371.641 1937.36 372.776 Q1939.42 373.887 1940.77 376.201 M1926.25 385.252 Q1926.25 389.951 1928.17 392.637 Q1930.12 395.299 1933.5 395.299 Q1936.88 395.299 1938.82 392.637 Q1940.77 389.951 1940.77 385.252 Q1940.77 380.553 1938.82 377.891 Q1936.88 375.206 1933.5 375.206 Q1930.12 375.206 1928.17 377.891 Q1926.25 380.553 1926.25 385.252 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip430)\" d=\"M1991.04 384.164 L1991.04 386.248 L1971.46 386.248 Q1971.74 390.646 1974.1 392.961 Q1976.48 395.252 1980.72 395.252 Q1983.17 395.252 1985.46 394.65 Q1987.78 394.049 1990.05 392.845 L1990.05 396.873 Q1987.76 397.845 1985.35 398.354 Q1982.94 398.863 1980.46 398.863 Q1974.26 398.863 1970.63 395.252 Q1967.02 391.641 1967.02 385.484 Q1967.02 379.118 1970.44 375.391 Q1973.89 371.641 1979.72 371.641 Q1984.95 371.641 1987.99 375.021 Q1991.04 378.377 1991.04 384.164 M1986.78 382.914 Q1986.74 379.419 1984.82 377.336 Q1982.92 375.252 1979.77 375.252 Q1976.2 375.252 1974.05 377.266 Q1971.92 379.28 1971.6 382.938 L1986.78 382.914 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip430)\" d=\"M2019.58 382.544 L2019.58 398.192 L2015.32 398.192 L2015.32 382.683 Q2015.32 379.002 2013.89 377.174 Q2012.45 375.345 2009.58 375.345 Q2006.14 375.345 2004.14 377.544 Q2002.15 379.743 2002.15 383.539 L2002.15 398.192 L1997.87 398.192 L1997.87 372.266 L2002.15 372.266 L2002.15 376.294 Q2003.68 373.956 2005.74 372.799 Q2007.83 371.641 2010.53 371.641 Q2015 371.641 2017.29 374.419 Q2019.58 377.174 2019.58 382.544 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip430)\" d=\"M2050.26 384.164 L2050.26 386.248 L2030.67 386.248 Q2030.95 390.646 2033.31 392.961 Q2035.7 395.252 2039.93 395.252 Q2042.39 395.252 2044.68 394.65 Q2046.99 394.049 2049.26 392.845 L2049.26 396.873 Q2046.97 397.845 2044.56 398.354 Q2042.15 398.863 2039.68 398.863 Q2033.47 398.863 2029.84 395.252 Q2026.23 391.641 2026.23 385.484 Q2026.23 379.118 2029.65 375.391 Q2033.1 371.641 2038.94 371.641 Q2044.17 371.641 2047.2 375.021 Q2050.26 378.377 2050.26 384.164 M2046 382.914 Q2045.95 379.419 2044.03 377.336 Q2042.13 375.252 2038.98 375.252 Q2035.42 375.252 2033.26 377.266 Q2031.14 379.28 2030.81 382.938 L2046 382.914 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip430)\" d=\"M2072.27 376.248 Q2071.55 375.831 2070.7 375.646 Q2069.86 375.438 2068.84 375.438 Q2065.23 375.438 2063.29 377.799 Q2061.37 380.137 2061.37 384.535 L2061.37 398.192 L2057.08 398.192 L2057.08 372.266 L2061.37 372.266 L2061.37 376.294 Q2062.71 373.933 2064.86 372.799 Q2067.01 371.641 2070.09 371.641 Q2070.53 371.641 2071.07 371.711 Q2071.6 371.757 2072.25 371.873 L2072.27 376.248 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip430)\" d=\"M2092.96 384.928 Q2092.96 380.299 2091.04 377.752 Q2089.14 375.206 2085.69 375.206 Q2082.27 375.206 2080.35 377.752 Q2078.45 380.299 2078.45 384.928 Q2078.45 389.535 2080.35 392.081 Q2082.27 394.627 2085.69 394.627 Q2089.14 394.627 2091.04 392.081 Q2092.96 389.535 2092.96 384.928 M2097.22 394.975 Q2097.22 401.595 2094.28 404.812 Q2091.34 408.053 2085.28 408.053 Q2083.03 408.053 2081.04 407.706 Q2079.05 407.382 2077.18 406.687 L2077.18 402.544 Q2079.05 403.562 2080.88 404.049 Q2082.71 404.535 2084.61 404.535 Q2088.8 404.535 2090.88 402.336 Q2092.96 400.16 2092.96 395.738 L2092.96 393.632 Q2091.64 395.924 2089.58 397.058 Q2087.52 398.192 2084.65 398.192 Q2079.88 398.192 2076.97 394.558 Q2074.05 390.924 2074.05 384.928 Q2074.05 378.91 2076.97 375.276 Q2079.88 371.641 2084.65 371.641 Q2087.52 371.641 2089.58 372.776 Q2091.64 373.91 2092.96 376.201 L2092.96 372.266 L2097.22 372.266 L2097.22 394.975 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip430)\" d=\"M2116.78 400.599 Q2114.98 405.229 2113.26 406.641 Q2111.55 408.053 2108.68 408.053 L2105.28 408.053 L2105.28 404.488 L2107.78 404.488 Q2109.54 404.488 2110.51 403.655 Q2111.48 402.822 2112.66 399.72 L2113.43 397.775 L2102.94 372.266 L2107.45 372.266 L2115.56 392.544 L2123.66 372.266 L2128.17 372.266 L2116.78 400.599 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip430)\" d=\"M719.687 899.083 L1838.19 899.083 L1838.19 462.094 L719.687 462.094  Z\" fill=\"#ffffff\" fill-rule=\"evenodd\" fill-opacity=\"1\"/>\n<defs>\n  <clipPath id=\"clip433\">\n    <rect x=\"719\" y=\"462\" width=\"1120\" height=\"438\"/>\n  </clipPath>\n</defs>\n<polyline clip-path=\"url(#clip433)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:2; stroke-opacity:0.1; fill:none\" points=\"719.687,899.083 719.687,462.094 \"/>\n<polyline clip-path=\"url(#clip433)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:2; stroke-opacity:0.1; fill:none\" points=\"999.313,899.083 999.313,462.094 \"/>\n<polyline clip-path=\"url(#clip433)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:2; stroke-opacity:0.1; fill:none\" points=\"1278.94,899.083 1278.94,462.094 \"/>\n<polyline clip-path=\"url(#clip433)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:2; stroke-opacity:0.1; fill:none\" points=\"1558.56,899.083 1558.56,462.094 \"/>\n<polyline clip-path=\"url(#clip433)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:2; stroke-opacity:0.1; fill:none\" points=\"1838.19,899.083 1838.19,462.094 \"/>\n<polyline clip-path=\"url(#clip433)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:2; stroke-opacity:0.1; fill:none\" points=\"719.687,879.22 1838.19,879.22 \"/>\n<polyline clip-path=\"url(#clip433)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:2; stroke-opacity:0.1; fill:none\" points=\"719.687,779.904 1838.19,779.904 \"/>\n<polyline clip-path=\"url(#clip433)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:2; stroke-opacity:0.1; fill:none\" points=\"719.687,680.588 1838.19,680.588 \"/>\n<polyline clip-path=\"url(#clip433)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:2; stroke-opacity:0.1; fill:none\" points=\"719.687,581.273 1838.19,581.273 \"/>\n<polyline clip-path=\"url(#clip433)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:2; stroke-opacity:0.1; fill:none\" points=\"719.687,481.957 1838.19,481.957 \"/>\n<polyline clip-path=\"url(#clip430)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"719.687,899.083 1838.19,899.083 \"/>\n<polyline clip-path=\"url(#clip430)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"719.687,899.083 719.687,880.185 \"/>\n<polyline clip-path=\"url(#clip430)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"999.313,899.083 999.313,880.185 \"/>\n<polyline clip-path=\"url(#clip430)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"1278.94,899.083 1278.94,880.185 \"/>\n<polyline clip-path=\"url(#clip430)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"1558.56,899.083 1558.56,880.185 \"/>\n<polyline clip-path=\"url(#clip430)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"1838.19,899.083 1838.19,880.185 \"/>\n<path clip-path=\"url(#clip430)\" d=\"M664.213 957.547 L671.852 957.547 L671.852 931.182 L663.542 932.849 L663.542 928.589 L671.806 926.923 L676.482 926.923 L676.482 957.547 L684.12 957.547 L684.12 961.483 L664.213 961.483 L664.213 957.547 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip430)\" d=\"M703.565 930.001 Q699.954 930.001 698.125 933.566 Q696.319 937.108 696.319 944.237 Q696.319 951.344 698.125 954.909 Q699.954 958.45 703.565 958.45 Q707.199 958.45 709.005 954.909 Q710.833 951.344 710.833 944.237 Q710.833 937.108 709.005 933.566 Q707.199 930.001 703.565 930.001 M703.565 926.298 Q709.375 926.298 712.43 930.904 Q715.509 935.487 715.509 944.237 Q715.509 952.964 712.43 957.571 Q709.375 962.154 703.565 962.154 Q697.755 962.154 694.676 957.571 Q691.62 952.964 691.62 944.237 Q691.62 935.487 694.676 930.904 Q697.755 926.298 703.565 926.298 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip430)\" d=\"M733.727 930.001 Q730.116 930.001 728.287 933.566 Q726.481 937.108 726.481 944.237 Q726.481 951.344 728.287 954.909 Q730.116 958.45 733.727 958.45 Q737.361 958.45 739.166 954.909 Q740.995 951.344 740.995 944.237 Q740.995 937.108 739.166 933.566 Q737.361 930.001 733.727 930.001 M733.727 926.298 Q739.537 926.298 742.592 930.904 Q745.671 935.487 745.671 944.237 Q745.671 952.964 742.592 957.571 Q739.537 962.154 733.727 962.154 Q727.916 962.154 724.838 957.571 Q721.782 952.964 721.782 944.237 Q721.782 935.487 724.838 930.904 Q727.916 926.298 733.727 926.298 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip430)\" d=\"M763.888 930.001 Q760.277 930.001 758.449 933.566 Q756.643 937.108 756.643 944.237 Q756.643 951.344 758.449 954.909 Q760.277 958.45 763.888 958.45 Q767.523 958.45 769.328 954.909 Q771.157 951.344 771.157 944.237 Q771.157 937.108 769.328 933.566 Q767.523 930.001 763.888 930.001 M763.888 926.298 Q769.699 926.298 772.754 930.904 Q775.833 935.487 775.833 944.237 Q775.833 952.964 772.754 957.571 Q769.699 962.154 763.888 962.154 Q758.078 962.154 755 957.571 Q751.944 952.964 751.944 944.237 Q751.944 935.487 755 930.904 Q758.078 926.298 763.888 926.298 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip430)\" d=\"M943.839 957.547 L951.477 957.547 L951.477 931.182 L943.167 932.849 L943.167 928.589 L951.431 926.923 L956.107 926.923 L956.107 957.547 L963.746 957.547 L963.746 961.483 L943.839 961.483 L943.839 957.547 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip430)\" d=\"M973.237 926.923 L991.593 926.923 L991.593 930.858 L977.519 930.858 L977.519 939.33 Q978.538 938.983 979.556 938.821 Q980.575 938.636 981.593 938.636 Q987.38 938.636 990.76 941.807 Q994.139 944.978 994.139 950.395 Q994.139 955.973 990.667 959.075 Q987.195 962.154 980.875 962.154 Q978.7 962.154 976.431 961.784 Q974.186 961.413 971.778 960.672 L971.778 955.973 Q973.862 957.108 976.084 957.663 Q978.306 958.219 980.783 958.219 Q984.788 958.219 987.125 956.112 Q989.463 954.006 989.463 950.395 Q989.463 946.784 987.125 944.677 Q984.788 942.571 980.783 942.571 Q978.908 942.571 977.033 942.987 Q975.181 943.404 973.237 944.284 L973.237 926.923 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip430)\" d=\"M1013.35 930.001 Q1009.74 930.001 1007.91 933.566 Q1006.11 937.108 1006.11 944.237 Q1006.11 951.344 1007.91 954.909 Q1009.74 958.45 1013.35 958.45 Q1016.99 958.45 1018.79 954.909 Q1020.62 951.344 1020.62 944.237 Q1020.62 937.108 1018.79 933.566 Q1016.99 930.001 1013.35 930.001 M1013.35 926.298 Q1019.16 926.298 1022.22 930.904 Q1025.3 935.487 1025.3 944.237 Q1025.3 952.964 1022.22 957.571 Q1019.16 962.154 1013.35 962.154 Q1007.54 962.154 1004.46 957.571 Q1001.41 952.964 1001.41 944.237 Q1001.41 935.487 1004.46 930.904 Q1007.54 926.298 1013.35 926.298 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip430)\" d=\"M1043.51 930.001 Q1039.9 930.001 1038.07 933.566 Q1036.27 937.108 1036.27 944.237 Q1036.27 951.344 1038.07 954.909 Q1039.9 958.45 1043.51 958.45 Q1047.15 958.45 1048.95 954.909 Q1050.78 951.344 1050.78 944.237 Q1050.78 937.108 1048.95 933.566 Q1047.15 930.001 1043.51 930.001 M1043.51 926.298 Q1049.32 926.298 1052.38 930.904 Q1055.46 935.487 1055.46 944.237 Q1055.46 952.964 1052.38 957.571 Q1049.32 962.154 1043.51 962.154 Q1037.7 962.154 1034.63 957.571 Q1031.57 952.964 1031.57 944.237 Q1031.57 935.487 1034.63 930.904 Q1037.7 926.298 1043.51 926.298 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip430)\" d=\"M1227.55 957.547 L1243.87 957.547 L1243.87 961.483 L1221.92 961.483 L1221.92 957.547 Q1224.59 954.793 1229.17 950.163 Q1233.78 945.511 1234.96 944.168 Q1237.2 941.645 1238.08 939.909 Q1238.98 938.149 1238.98 936.46 Q1238.98 933.705 1237.04 931.969 Q1235.12 930.233 1232.02 930.233 Q1229.82 930.233 1227.36 930.997 Q1224.93 931.761 1222.16 933.312 L1222.16 928.589 Q1224.98 927.455 1227.43 926.876 Q1229.89 926.298 1231.92 926.298 Q1237.3 926.298 1240.49 928.983 Q1243.68 931.668 1243.68 936.159 Q1243.68 938.288 1242.87 940.21 Q1242.09 942.108 1239.98 944.7 Q1239.4 945.372 1236.3 948.589 Q1233.2 951.784 1227.55 957.547 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip430)\" d=\"M1263.68 930.001 Q1260.07 930.001 1258.24 933.566 Q1256.44 937.108 1256.44 944.237 Q1256.44 951.344 1258.24 954.909 Q1260.07 958.45 1263.68 958.45 Q1267.32 958.45 1269.12 954.909 Q1270.95 951.344 1270.95 944.237 Q1270.95 937.108 1269.12 933.566 Q1267.32 930.001 1263.68 930.001 M1263.68 926.298 Q1269.49 926.298 1272.55 930.904 Q1275.63 935.487 1275.63 944.237 Q1275.63 952.964 1272.55 957.571 Q1269.49 962.154 1263.68 962.154 Q1257.87 962.154 1254.8 957.571 Q1251.74 952.964 1251.74 944.237 Q1251.74 935.487 1254.8 930.904 Q1257.87 926.298 1263.68 926.298 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip430)\" d=\"M1293.85 930.001 Q1290.23 930.001 1288.41 933.566 Q1286.6 937.108 1286.6 944.237 Q1286.6 951.344 1288.41 954.909 Q1290.23 958.45 1293.85 958.45 Q1297.48 958.45 1299.29 954.909 Q1301.11 951.344 1301.11 944.237 Q1301.11 937.108 1299.29 933.566 Q1297.48 930.001 1293.85 930.001 M1293.85 926.298 Q1299.66 926.298 1302.71 930.904 Q1305.79 935.487 1305.79 944.237 Q1305.79 952.964 1302.71 957.571 Q1299.66 962.154 1293.85 962.154 Q1288.04 962.154 1284.96 957.571 Q1281.9 952.964 1281.9 944.237 Q1281.9 935.487 1284.96 930.904 Q1288.04 926.298 1293.85 926.298 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip430)\" d=\"M1324.01 930.001 Q1320.4 930.001 1318.57 933.566 Q1316.76 937.108 1316.76 944.237 Q1316.76 951.344 1318.57 954.909 Q1320.4 958.45 1324.01 958.45 Q1327.64 958.45 1329.45 954.909 Q1331.28 951.344 1331.28 944.237 Q1331.28 937.108 1329.45 933.566 Q1327.64 930.001 1324.01 930.001 M1324.01 926.298 Q1329.82 926.298 1332.87 930.904 Q1335.95 935.487 1335.95 944.237 Q1335.95 952.964 1332.87 957.571 Q1329.82 962.154 1324.01 962.154 Q1318.2 962.154 1315.12 957.571 Q1312.06 952.964 1312.06 944.237 Q1312.06 935.487 1315.12 930.904 Q1318.2 926.298 1324.01 926.298 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip430)\" d=\"M1507.18 957.547 L1523.49 957.547 L1523.49 961.483 L1501.55 961.483 L1501.55 957.547 Q1504.21 954.793 1508.8 950.163 Q1513.4 945.511 1514.58 944.168 Q1516.83 941.645 1517.71 939.909 Q1518.61 938.149 1518.61 936.46 Q1518.61 933.705 1516.67 931.969 Q1514.74 930.233 1511.64 930.233 Q1509.44 930.233 1506.99 930.997 Q1504.56 931.761 1501.78 933.312 L1501.78 928.589 Q1504.61 927.455 1507.06 926.876 Q1509.51 926.298 1511.55 926.298 Q1516.92 926.298 1520.12 928.983 Q1523.31 931.668 1523.31 936.159 Q1523.31 938.288 1522.5 940.21 Q1521.71 942.108 1519.61 944.7 Q1519.03 945.372 1515.93 948.589 Q1512.82 951.784 1507.18 957.547 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip430)\" d=\"M1533.36 926.923 L1551.71 926.923 L1551.71 930.858 L1537.64 930.858 L1537.64 939.33 Q1538.66 938.983 1539.68 938.821 Q1540.69 938.636 1541.71 938.636 Q1547.5 938.636 1550.88 941.807 Q1554.26 944.978 1554.26 950.395 Q1554.26 955.973 1550.79 959.075 Q1547.31 962.154 1540.99 962.154 Q1538.82 962.154 1536.55 961.784 Q1534.3 961.413 1531.9 960.672 L1531.9 955.973 Q1533.98 957.108 1536.2 957.663 Q1538.43 958.219 1540.9 958.219 Q1544.91 958.219 1547.24 956.112 Q1549.58 954.006 1549.58 950.395 Q1549.58 946.784 1547.24 944.677 Q1544.91 942.571 1540.9 942.571 Q1539.03 942.571 1537.15 942.987 Q1535.3 943.404 1533.36 944.284 L1533.36 926.923 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip430)\" d=\"M1573.47 930.001 Q1569.86 930.001 1568.03 933.566 Q1566.23 937.108 1566.23 944.237 Q1566.23 951.344 1568.03 954.909 Q1569.86 958.45 1573.47 958.45 Q1577.11 958.45 1578.91 954.909 Q1580.74 951.344 1580.74 944.237 Q1580.74 937.108 1578.91 933.566 Q1577.11 930.001 1573.47 930.001 M1573.47 926.298 Q1579.28 926.298 1582.34 930.904 Q1585.42 935.487 1585.42 944.237 Q1585.42 952.964 1582.34 957.571 Q1579.28 962.154 1573.47 962.154 Q1567.66 962.154 1564.58 957.571 Q1561.53 952.964 1561.53 944.237 Q1561.53 935.487 1564.58 930.904 Q1567.66 926.298 1573.47 926.298 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip430)\" d=\"M1603.63 930.001 Q1600.02 930.001 1598.19 933.566 Q1596.39 937.108 1596.39 944.237 Q1596.39 951.344 1598.19 954.909 Q1600.02 958.45 1603.63 958.45 Q1607.27 958.45 1609.07 954.909 Q1610.9 951.344 1610.9 944.237 Q1610.9 937.108 1609.07 933.566 Q1607.27 930.001 1603.63 930.001 M1603.63 926.298 Q1609.44 926.298 1612.5 930.904 Q1615.58 935.487 1615.58 944.237 Q1615.58 952.964 1612.5 957.571 Q1609.44 962.154 1603.63 962.154 Q1597.82 962.154 1594.74 957.571 Q1591.69 952.964 1591.69 944.237 Q1591.69 935.487 1594.74 930.904 Q1597.82 926.298 1603.63 926.298 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip430)\" d=\"M1796.87 942.848 Q1800.23 943.566 1802.1 945.835 Q1804 948.103 1804 951.436 Q1804 956.552 1800.48 959.353 Q1796.96 962.154 1790.48 962.154 Q1788.31 962.154 1785.99 961.714 Q1783.7 961.297 1781.25 960.441 L1781.25 955.927 Q1783.19 957.061 1785.5 957.64 Q1787.82 958.219 1790.34 958.219 Q1794.74 958.219 1797.03 956.483 Q1799.35 954.747 1799.35 951.436 Q1799.35 948.381 1797.19 946.668 Q1795.06 944.932 1791.25 944.932 L1787.22 944.932 L1787.22 941.089 L1791.43 941.089 Q1794.88 941.089 1796.71 939.724 Q1798.54 938.335 1798.54 935.742 Q1798.54 933.08 1796.64 931.668 Q1794.76 930.233 1791.25 930.233 Q1789.32 930.233 1787.13 930.649 Q1784.93 931.066 1782.29 931.946 L1782.29 927.779 Q1784.95 927.038 1787.26 926.668 Q1789.6 926.298 1791.66 926.298 Q1796.99 926.298 1800.09 928.728 Q1803.19 931.136 1803.19 935.256 Q1803.19 938.126 1801.55 940.117 Q1799.9 942.085 1796.87 942.848 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip430)\" d=\"M1822.87 930.001 Q1819.25 930.001 1817.43 933.566 Q1815.62 937.108 1815.62 944.237 Q1815.62 951.344 1817.43 954.909 Q1819.25 958.45 1822.87 958.45 Q1826.5 958.45 1828.31 954.909 Q1830.13 951.344 1830.13 944.237 Q1830.13 937.108 1828.31 933.566 Q1826.5 930.001 1822.87 930.001 M1822.87 926.298 Q1828.68 926.298 1831.73 930.904 Q1834.81 935.487 1834.81 944.237 Q1834.81 952.964 1831.73 957.571 Q1828.68 962.154 1822.87 962.154 Q1817.06 962.154 1813.98 957.571 Q1810.92 952.964 1810.92 944.237 Q1810.92 935.487 1813.98 930.904 Q1817.06 926.298 1822.87 926.298 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip430)\" d=\"M1853.03 930.001 Q1849.42 930.001 1847.59 933.566 Q1845.78 937.108 1845.78 944.237 Q1845.78 951.344 1847.59 954.909 Q1849.42 958.45 1853.03 958.45 Q1856.66 958.45 1858.47 954.909 Q1860.3 951.344 1860.3 944.237 Q1860.3 937.108 1858.47 933.566 Q1856.66 930.001 1853.03 930.001 M1853.03 926.298 Q1858.84 926.298 1861.89 930.904 Q1864.97 935.487 1864.97 944.237 Q1864.97 952.964 1861.89 957.571 Q1858.84 962.154 1853.03 962.154 Q1847.22 962.154 1844.14 957.571 Q1841.08 952.964 1841.08 944.237 Q1841.08 935.487 1844.14 930.904 Q1847.22 926.298 1853.03 926.298 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip430)\" d=\"M1883.19 930.001 Q1879.58 930.001 1877.75 933.566 Q1875.94 937.108 1875.94 944.237 Q1875.94 951.344 1877.75 954.909 Q1879.58 958.45 1883.19 958.45 Q1886.82 958.45 1888.63 954.909 Q1890.46 951.344 1890.46 944.237 Q1890.46 937.108 1888.63 933.566 Q1886.82 930.001 1883.19 930.001 M1883.19 926.298 Q1889 926.298 1892.06 930.904 Q1895.13 935.487 1895.13 944.237 Q1895.13 952.964 1892.06 957.571 Q1889 962.154 1883.19 962.154 Q1877.38 962.154 1874.3 957.571 Q1871.24 952.964 1871.24 944.237 Q1871.24 935.487 1874.3 930.904 Q1877.38 926.298 1883.19 926.298 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><polyline clip-path=\"url(#clip430)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"719.687,899.083 719.687,462.094 \"/>\n<polyline clip-path=\"url(#clip430)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"719.687,879.22 738.585,879.22 \"/>\n<polyline clip-path=\"url(#clip430)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"719.687,779.904 738.585,779.904 \"/>\n<polyline clip-path=\"url(#clip430)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"719.687,680.588 738.585,680.588 \"/>\n<polyline clip-path=\"url(#clip430)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"719.687,581.273 738.585,581.273 \"/>\n<polyline clip-path=\"url(#clip430)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"719.687,481.957 738.585,481.957 \"/>\n<path clip-path=\"url(#clip430)\" d=\"M576.743 879.671 L606.419 879.671 L606.419 883.606 L576.743 883.606 L576.743 879.671 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip430)\" d=\"M616.558 861.94 L634.914 861.94 L634.914 865.875 L620.84 865.875 L620.84 874.347 Q621.859 874 622.877 873.838 Q623.896 873.652 624.914 873.652 Q630.702 873.652 634.081 876.824 Q637.461 879.995 637.461 885.412 Q637.461 890.99 633.989 894.092 Q630.516 897.171 624.197 897.171 Q622.021 897.171 619.752 896.8 Q617.507 896.43 615.1 895.689 L615.1 890.99 Q617.183 892.125 619.405 892.68 Q621.627 893.236 624.104 893.236 Q628.109 893.236 630.447 891.129 Q632.785 889.023 632.785 885.412 Q632.785 881.801 630.447 879.694 Q628.109 877.588 624.104 877.588 Q622.229 877.588 620.354 878.004 Q618.502 878.421 616.558 879.301 L616.558 861.94 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip430)\" d=\"M646.674 890.62 L651.558 890.62 L651.558 896.5 L646.674 896.5 L646.674 890.62 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip430)\" d=\"M671.743 865.018 Q668.132 865.018 666.303 868.583 Q664.498 872.125 664.498 879.254 Q664.498 886.361 666.303 889.925 Q668.132 893.467 671.743 893.467 Q675.377 893.467 677.183 889.925 Q679.011 886.361 679.011 879.254 Q679.011 872.125 677.183 868.583 Q675.377 865.018 671.743 865.018 M671.743 861.315 Q677.553 861.315 680.609 865.921 Q683.687 870.504 683.687 879.254 Q683.687 887.981 680.609 892.588 Q677.553 897.171 671.743 897.171 Q665.933 897.171 662.854 892.588 Q659.799 887.981 659.799 879.254 Q659.799 870.504 662.854 865.921 Q665.933 861.315 671.743 861.315 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip430)\" d=\"M577.739 780.355 L607.415 780.355 L607.415 784.291 L577.739 784.291 L577.739 780.355 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip430)\" d=\"M630.354 766.698 L618.549 785.147 L630.354 785.147 L630.354 766.698 M629.127 762.624 L635.007 762.624 L635.007 785.147 L639.938 785.147 L639.938 789.036 L635.007 789.036 L635.007 797.184 L630.354 797.184 L630.354 789.036 L614.753 789.036 L614.753 784.522 L629.127 762.624 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip430)\" d=\"M647.669 791.304 L652.553 791.304 L652.553 797.184 L647.669 797.184 L647.669 791.304 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip430)\" d=\"M662.785 762.624 L681.141 762.624 L681.141 766.559 L667.067 766.559 L667.067 775.031 Q668.086 774.684 669.104 774.522 Q670.123 774.337 671.141 774.337 Q676.928 774.337 680.308 777.508 Q683.687 780.679 683.687 786.096 Q683.687 791.675 680.215 794.777 Q676.743 797.855 670.424 797.855 Q668.248 797.855 665.979 797.485 Q663.734 797.115 661.326 796.374 L661.326 791.675 Q663.41 792.809 665.632 793.365 Q667.854 793.92 670.331 793.92 Q674.336 793.92 676.673 791.814 Q679.011 789.707 679.011 786.096 Q679.011 782.485 676.673 780.379 Q674.336 778.272 670.331 778.272 Q668.456 778.272 666.581 778.689 Q664.729 779.105 662.785 779.985 L662.785 762.624 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip430)\" d=\"M576.743 681.04 L606.419 681.04 L606.419 684.975 L576.743 684.975 L576.743 681.04 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip430)\" d=\"M629.359 667.382 L617.553 685.831 L629.359 685.831 L629.359 667.382 M628.132 663.308 L634.012 663.308 L634.012 685.831 L638.942 685.831 L638.942 689.72 L634.012 689.72 L634.012 697.868 L629.359 697.868 L629.359 689.72 L613.757 689.72 L613.757 685.206 L628.132 663.308 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip430)\" d=\"M646.674 691.989 L651.558 691.989 L651.558 697.868 L646.674 697.868 L646.674 691.989 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip430)\" d=\"M671.743 666.387 Q668.132 666.387 666.303 669.952 Q664.498 673.494 664.498 680.623 Q664.498 687.73 666.303 691.294 Q668.132 694.836 671.743 694.836 Q675.377 694.836 677.183 691.294 Q679.011 687.73 679.011 680.623 Q679.011 673.494 677.183 669.952 Q675.377 666.387 671.743 666.387 M671.743 662.683 Q677.553 662.683 680.609 667.29 Q683.687 671.873 683.687 680.623 Q683.687 689.35 680.609 693.956 Q677.553 698.54 671.743 698.54 Q665.933 698.54 662.854 693.956 Q659.799 689.35 659.799 680.623 Q659.799 671.873 662.854 667.29 Q665.933 662.683 671.743 662.683 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip430)\" d=\"M577.739 581.724 L607.415 581.724 L607.415 585.659 L577.739 585.659 L577.739 581.724 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip430)\" d=\"M631.674 579.919 Q635.03 580.636 636.905 582.905 Q638.803 585.173 638.803 588.507 Q638.803 593.622 635.285 596.423 Q631.766 599.224 625.285 599.224 Q623.109 599.224 620.794 598.784 Q618.502 598.368 616.049 597.511 L616.049 592.997 Q617.993 594.132 620.308 594.71 Q622.623 595.289 625.146 595.289 Q629.544 595.289 631.836 593.553 Q634.151 591.817 634.151 588.507 Q634.151 585.451 631.998 583.738 Q629.868 582.002 626.049 582.002 L622.021 582.002 L622.021 578.159 L626.234 578.159 Q629.683 578.159 631.512 576.794 Q633.34 575.405 633.34 572.812 Q633.34 570.15 631.442 568.738 Q629.567 567.303 626.049 567.303 Q624.127 567.303 621.928 567.72 Q619.729 568.136 617.09 569.016 L617.09 564.849 Q619.752 564.109 622.067 563.738 Q624.405 563.368 626.465 563.368 Q631.789 563.368 634.891 565.798 Q637.993 568.206 637.993 572.326 Q637.993 575.196 636.35 577.187 Q634.706 579.155 631.674 579.919 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip430)\" d=\"M647.669 592.673 L652.553 592.673 L652.553 598.553 L647.669 598.553 L647.669 592.673 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip430)\" d=\"M662.785 563.993 L681.141 563.993 L681.141 567.928 L667.067 567.928 L667.067 576.4 Q668.086 576.053 669.104 575.891 Q670.123 575.706 671.141 575.706 Q676.928 575.706 680.308 578.877 Q683.687 582.048 683.687 587.465 Q683.687 593.044 680.215 596.145 Q676.743 599.224 670.424 599.224 Q668.248 599.224 665.979 598.854 Q663.734 598.483 661.326 597.743 L661.326 593.044 Q663.41 594.178 665.632 594.733 Q667.854 595.289 670.331 595.289 Q674.336 595.289 676.673 593.183 Q679.011 591.076 679.011 587.465 Q679.011 583.854 676.673 581.747 Q674.336 579.641 670.331 579.641 Q668.456 579.641 666.581 580.058 Q664.729 580.474 662.785 581.354 L662.785 563.993 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip430)\" d=\"M576.743 482.409 L606.419 482.409 L606.419 486.344 L576.743 486.344 L576.743 482.409 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip430)\" d=\"M630.678 480.603 Q634.035 481.321 635.91 483.589 Q637.808 485.858 637.808 489.191 Q637.808 494.307 634.289 497.108 Q630.771 499.909 624.29 499.909 Q622.114 499.909 619.799 499.469 Q617.507 499.052 615.053 498.196 L615.053 493.682 Q616.998 494.816 619.313 495.395 Q621.627 495.973 624.151 495.973 Q628.549 495.973 630.84 494.237 Q633.155 492.501 633.155 489.191 Q633.155 486.136 631.002 484.423 Q628.873 482.686 625.053 482.686 L621.026 482.686 L621.026 478.844 L625.239 478.844 Q628.688 478.844 630.516 477.478 Q632.345 476.089 632.345 473.497 Q632.345 470.835 630.447 469.423 Q628.572 467.987 625.053 467.987 Q623.132 467.987 620.933 468.404 Q618.734 468.821 616.095 469.7 L616.095 465.534 Q618.757 464.793 621.072 464.423 Q623.41 464.052 625.47 464.052 Q630.794 464.052 633.896 466.483 Q636.998 468.89 636.998 473.011 Q636.998 475.881 635.354 477.872 Q633.711 479.839 630.678 480.603 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip430)\" d=\"M646.674 493.358 L651.558 493.358 L651.558 499.237 L646.674 499.237 L646.674 493.358 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip430)\" d=\"M671.743 467.756 Q668.132 467.756 666.303 471.321 Q664.498 474.862 664.498 481.992 Q664.498 489.098 666.303 492.663 Q668.132 496.205 671.743 496.205 Q675.377 496.205 677.183 492.663 Q679.011 489.098 679.011 481.992 Q679.011 474.862 677.183 471.321 Q675.377 467.756 671.743 467.756 M671.743 464.052 Q677.553 464.052 680.609 468.659 Q683.687 473.242 683.687 481.992 Q683.687 490.719 680.609 495.325 Q677.553 499.909 671.743 499.909 Q665.933 499.909 662.854 495.325 Q659.799 490.719 659.799 481.992 Q659.799 473.242 662.854 468.659 Q665.933 464.052 671.743 464.052 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><polyline clip-path=\"url(#clip433)\" style=\"stroke:#009af9; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"160.995,-1577.5 161.555,-2922.08 162.114,-2642.16 162.673,-3872.82 163.232,-4976.07 163.792,-5940.75 164.351,-6864.63 164.91,-7708.3 165.469,-8431.21 166.029,-9106.71 166.588,-8654.43 167.147,-9254.86 167.706,-9814.67 168.266,-10316.3 168.825,-10763.7 169.384,-11160.2 169.943,-11509.1 170.503,-11813.7 171.062,-11399.1 171.621,-11649.7 172.18,-11863.1 172.74,-11485.1 173.299,-10681.5 173.858,-10423.3 174.417,-10600.6 174.977,-10722.1 175.536,-10461.1 176.095,-10572.5 176.655,-10670.2 177.214,-10419.2 177.773,-10175.9 178.332,-10224.1 178.892,-10230.1 179.451,-10243.9 180.01,-10232 180.569,-9989.23 181.129,-9954.99 181.688,-9881.65 182.247,-9821.37 182.806,-9742.72 183.366,-9166.69 183.925,-9088.16 184.484,-8857.34 185.043,-8642.41 185.603,-8421.32 186.162,-8206.56 186.721,-8115.04 187.28,-7900.89 187.84,-7789.96 188.399,-7572.05 188.958,-7457.24 189.517,-7250.55 190.077,-7041.65 190.636,-6763.24 191.195,-6659.59 191.754,-6470.65 192.314,-6365.16 192.873,-6180.89 193.432,-5935.91 193.991,-5683.63 194.551,-5566.87 195.11,-5397.24 195.669,-5168.41 196.228,-4950.97 196.788,-4686.37 197.347,-4530.29 197.906,-4319.18 198.465,-4121.51 199.025,-3943.96 199.584,-3721.93 200.143,-3633.06 200.702,-3545.8 201.262,-3458.95 201.821,-3293.65 202.38,-3217.14 202.939,-3095.73 203.499,-2982.27 204.058,-2868.83 204.617,-2791.95 205.176,-2637.81 205.736,-2349.81 206.295,-2248.79 206.854,-1987.77 207.413,-1836.42 207.973,-1722.14 208.532,-1647.05 209.091,-1598.11 209.65,-1459.12 210.21,-1412.83 210.769,-1368.23 211.328,-1291.34 211.887,-1217.23 212.447,-1125.01 213.006,-1030.95 213.565,-968.286 214.124,-880.948 214.684,-768.182 215.243,-709.393 215.802,-653.681 216.361,-624.47 216.921,-498.981 217.48,-426.919 218.039,-380.144 218.598,-337.463 219.158,-267.814 219.717,-249.435 220.276,-141.202 220.835,-80.8779 221.395,22.032 221.954,35.6814 222.513,70.0763 223.072,148.527 223.632,174.343 224.191,182.376 224.75,172.348 225.309,227.601 225.869,221.149 226.428,232.05 226.987,265.246 227.546,257.776 228.106,314.097 228.665,302.098 229.224,334.627 229.783,325.445 230.343,336.958 230.902,388.82 231.461,402.444 232.02,453.891 232.58,503.346 233.139,553.431 233.698,602.369 234.257,588.32 234.817,687.632 235.376,688.363 235.935,689.293 236.494,708.934 237.054,714.432 237.613,713.741 238.172,753.495 238.731,752.34 239.291,767.919 239.85,785.698 240.409,803.399 240.968,821.626 241.528,858.324 242.087,876.902 242.646,894.411 243.205,961.981 243.765,1006.05 244.324,1037.32 244.883,1039.51 245.442,1045.92 246.002,1049.91 246.561,1056.85 247.12,1044.67 247.679,1051.45 248.239,1042.19 248.798,978.354 249.357,989.621 249.916,998.826 250.476,978.577 251.035,986.258 251.594,978.246 252.153,991.229 252.713,952.066 253.272,944.532 253.831,974.003 254.39,1003 254.95,1050.83 255.509,1044.6 256.068,1053.69 256.627,1061.11 257.187,1088.81 257.746,1099.21 258.305,1104.34 258.864,1041.26 259.424,1034.58 259.983,1030.89 260.542,1026.17 261.101,1041.91 261.661,1070.12 262.22,1063.59 262.779,1037.63 263.338,1029.99 263.898,1010.52 264.457,1071.35 265.016,1059.76 265.575,1054.31 266.135,1050.27 266.694,1075.13 267.253,1084.69 267.812,1075.4 268.372,1098.3 268.931,1091.4 269.49,1129.71 270.049,1086.07 270.609,1056.73 271.168,1031.69 271.727,1045.01 272.286,1004.5 272.846,1014.22 273.405,1024.45 273.964,1018.25 274.523,980.771 275.083,975.766 275.642,972.297 276.201,923.617 276.76,939.521 277.32,921.507 277.879,920.908 278.438,940.283 278.997,937.592 279.557,1003.15 280.116,1033.28 280.675,1022.95 281.234,1051.39 281.794,1060.77 282.353,1041.99 282.912,1067.21 283.471,1090.17 284.031,1114.03 284.59,1121.05 285.149,1161.19 285.708,1148.26 286.268,1167.03 286.827,1171.86 287.386,1174.01 287.945,1126.13 288.505,1112.83 289.064,1103.98 289.623,1125.74 290.182,1081.89 290.742,1073.41 291.301,1080.32 291.86,1103.33 292.419,1093.97 292.979,1135.04 293.538,1108.43 294.097,1096.9 294.656,1121.61 295.216,1113.43 295.775,1089.83 296.334,1101.43 296.893,1074.95 297.453,1067.75 298.012,1058.91 298.571,1067.87 299.13,1057.92 299.69,1080.41 300.249,1090.1 300.808,1083.36 301.368,1105.37 301.927,1062.26 302.486,1038 303.045,1033.28 303.605,1041.11 304.164,1019.32 304.723,1012.64 305.282,974.55 305.842,1023.74 306.401,999.727 306.96,962.846 307.519,940.44 308.079,970.819 308.638,962.23 309.197,908.688 309.756,906.444 310.316,906.903 310.875,906.708 311.434,905.851 311.993,903.891 312.553,887.141 313.112,900.171 313.671,916.195 314.23,947.655 314.79,975.882 315.349,968.758 315.908,962.015 316.467,975.88 317.027,1003.06 317.586,995.52 318.145,988.34 318.704,1012.55 319.264,1004.62 319.823,997.006 320.382,990.365 320.941,985.383 321.501,978.493 322.06,958.182 322.619,952.733 323.178,983.071 323.738,962.339 324.297,940.252 324.856,922.36 325.415,936.27 325.975,934.258 326.534,913.846 327.093,926.841 327.652,905.435 328.212,905.274 328.771,905.922 329.33,919.209 329.889,948.269 330.449,957.21 331.008,981.74 331.567,975.915 332.126,969.915 332.686,1027.74 333.245,1047.95 333.804,1052.87 334.363,1057.31 334.923,1047.42 335.482,1052.11 336.041,1042.26 336.6,1014.16 337.16,989.166 337.719,996.13 338.278,1020.43 338.837,1014.86 339.397,987.969 339.956,961.842 340.515,939.304 341.074,932.626 341.634,924.731 342.193,902.805 342.752,898.625 343.311,893.14 343.871,922.6 344.43,904.091 344.989,915.29 345.548,876.934 346.108,890.604 346.667,887.453 347.226,919.588 347.785,882.546 348.345,863.025 348.904,831.462 349.463,828.181 350.022,798.507 350.582,822.345 351.141,826.702 351.7,826.77 352.259,828.19 352.819,792.237 353.378,821.162 353.937,834.377 354.496,830.89 355.056,828.797 355.615,828.702 356.174,843.837 356.733,859.607 357.293,859.032 357.852,837.478 358.411,819.195 358.97,818.279 359.53,804.691 360.089,821.296 360.648,854.218 361.207,801.532 361.767,799.444 362.326,817.124 362.885,802.895 363.444,807.096 364.004,822.733 364.563,824.415 365.122,823.986 365.681,805.037 366.241,808.464 366.8,776.853 367.359,779.852 367.918,779.041 368.478,814.463 369.037,835.697 369.596,848.079 370.155,878.425 370.715,872.23 371.274,868.002 371.833,816.434 372.392,820.942 372.952,835.25 373.511,831.496 374.07,860.609 374.629,841.245 375.189,874.693 375.748,935.191 376.307,945.24 376.866,922.731 377.426,918.283 377.985,910.255 378.544,934.228 379.103,929.878 379.663,956.509 380.222,961.55 380.781,950.119 381.34,958.049 381.9,979.822 382.459,971.377 383.018,962.099 383.577,918.967 384.137,877.415 384.696,840.366 385.255,835.83 385.814,834.881 386.374,766.365 386.933,750.244 387.492,752.731 388.051,722.298 388.611,726.493 389.17,730.557 389.729,732.511 390.288,734.011 390.848,733.554 391.407,736.854 391.966,739.328 392.525,725.927 393.085,729.38 393.644,752.193 394.203,739.038 394.762,744.296 395.322,758.704 395.881,791.717 396.44,761.163 396.999,778.298 397.559,766.17 398.118,786.182 398.677,803.058 399.236,788.714 399.796,803.42 400.355,833.439 400.914,845.843 401.473,842.622 402.033,906.112 402.592,851.579 403.151,878.425 403.71,838.875 404.27,837.009 404.829,816.85 405.388,798.142 405.947,776.76 406.507,761.677 407.066,728.34 407.625,697.547 408.184,748.791 408.744,768.786 409.303,767.364 409.862,799.483 410.421,798.429 410.981,778.702 411.54,796.342 412.099,779.285 412.658,762.515 413.218,779.44 413.777,779.541 414.336,794.692 414.895,763.82 415.455,766.27 416.014,783.577 416.573,816.621 417.132,847.871 417.692,828.877 418.251,841.391 418.81,836.918 419.369,848.975 419.929,861.626 420.488,861.412 421.047,842.909 421.606,853.94 422.166,865.11 422.725,878.708 423.284,906.862 423.843,895.453 424.403,889.132 424.962,881.648 425.521,876.34 426.08,851.919 426.64,846.295 427.199,824.232 427.758,854.876 428.318,865.579 428.877,876.258 429.436,869.759 429.995,878.599 430.555,888.654 431.114,864.998 431.673,861.526 432.232,855.781 432.792,868.022 433.351,845.459 433.91,842.317 434.469,871.58 435.029,846.889 435.588,889.89 436.147,867.241 436.706,877.669 437.266,870.769 437.825,864.689 438.384,825.051 438.943,786.565 439.503,768.264 440.062,784.771 440.621,768.226 441.18,767.28 441.74,766.984 442.299,747.905 442.858,763.143 443.417,796.035 443.977,792.839 444.536,806.883 445.095,819.627 445.654,799.71 446.214,782.82 446.773,745.3 447.332,764.436 447.891,713.628 448.451,731.377 449.01,766.66 449.569,766.596 450.128,763.661 450.688,742.409 451.247,709.207 451.806,697.139 452.365,697.532 452.925,701.986 453.484,704.239 454.043,721.675 454.602,709.481 455.162,676.004 455.721,682.353 456.28,655.563 456.839,642.084 457.399,631.859 457.958,638.38 458.517,645.902 459.076,655.521 459.636,659.153 460.195,680.44 460.754,682.218 461.313,687.938 461.873,689.894 462.432,675.143 462.991,679.177 463.55,732.58 464.11,753.011 464.669,753.106 465.228,756.346 465.787,741.742 466.347,760.414 466.906,757.312 467.465,756.132 468.024,773.167 468.584,758.977 469.143,756.576 469.702,774.328 470.261,803.892 470.821,798.566 471.38,828.505 471.939,838.974 472.498,845.016 473.058,824.021 473.617,818.242 474.176,813.399 474.735,794.543 475.295,775.759 475.854,761.573 476.413,744.178 476.972,742.045 477.532,711.702 478.091,745.007 478.65,776.57 479.209,807.585 479.769,838.391 480.328,802.925 480.887,781.717 481.446,795.843 482.006,810.397 482.565,821.579 483.124,800.638 483.683,830.026 484.243,791.052 484.802,756.615 485.361,672.947 485.92,679.023 486.48,731.942 487.039,732.981 487.598,733.551 488.157,698.764 488.717,715.074 489.276,714.473 489.835,682.818 490.394,701.266 490.954,702.33 491.513,736.712 492.072,719.369 492.631,719.981 493.191,723.914 493.75,725.119 494.309,723.526 494.868,755.396 495.428,736.719 495.987,719.357 496.546,688.324 497.105,741.544 497.665,726.418 498.224,741.725 498.783,746.777 499.342,759.637 499.902,711.699 500.461,713.707 501.02,712.234 501.579,712.636 502.139,712.13 502.698,758.167 503.257,811.257 503.816,810.288 504.376,806.738 504.935,816.717 505.494,827.749 506.053,803.401 506.613,767.625 507.172,797.581 507.731,841.799 508.29,821.323 508.85,816.201 509.409,813.63 509.968,793.94 510.527,808.808 511.087,821.064 511.646,784.834 512.205,767.052 512.764,736.316 513.324,749.391 513.883,752.378 514.442,732.511 515.001,733.293 515.561,763.233 516.12,736.32 516.679,784.118 517.238,845.623 517.798,808.48 518.357,789.069 518.916,785.396 519.475,753.515 520.035,703.679 520.594,751.552 521.153,734.887 521.712,716.455 522.272,716.288 522.831,732.769 523.39,730.539 523.949,714.142 524.509,730.807 525.068,728.963 525.627,764.19 526.186,748.383 526.746,746.856 527.305,728.774 527.864,711.185 528.423,729.419 528.983,728.881 529.542,710.396 530.101,710.43 530.66,759.429 531.22,787.777 531.779,783.377 532.338,799.16 532.897,792.952 533.457,788.889 534.016,768.036 534.575,745.718 535.134,711.009 535.694,690.678 536.253,708.874 536.812,707.052 537.371,720.08 537.931,718.063 538.49,717.091 539.049,733.528 539.608,734.2 540.168,734.431 540.727,752.773 541.286,768.373 541.845,800.689 542.405,797.174 542.964,774.571 543.523,771.85 544.082,799.633 544.642,780.672 545.201,775.601 545.76,742.604 546.319,758.102 546.879,786.498 547.438,813.483 547.997,827.748 548.556,839.25 549.116,848.537 549.675,808.491 550.234,789.762 550.793,821.866 551.353,802.312 551.912,779.336 552.471,781.281 553.031,758.984 553.59,774.333 554.149,800.469 554.708,814.055 555.268,807.003 555.827,799.187 556.386,762.526 556.945,762.121 557.505,760.873 558.064,757.232 558.623,738.518 559.182,736.591 559.742,752.155 560.301,735.555 560.86,732.978 561.419,715.799 561.979,700.078 562.538,699.665 563.097,716.105 563.656,734.808 564.216,732.418 564.775,749.95 565.334,763.12 565.893,764.376 566.453,761.75 567.012,754.73 567.571,749.562 568.13,749.147 568.69,733.799 569.249,762.622 569.808,723.594 570.367,702.668 570.927,719.772 571.486,733.622 572.045,735.68 572.604,716.264 573.164,730.503 573.723,745.49 574.282,742.481 574.841,725.692 575.401,709.395 575.96,710.136 576.519,678.843 577.078,682.046 577.638,683.454 578.197,719.293 578.756,718.597 579.315,717.981 579.875,700.201 580.434,718.801 580.993,707.368 581.552,692.266 582.112,678.005 582.671,712.317 583.23,694.154 583.789,709.236 584.349,726.239 584.908,742.586 585.467,758.83 586.026,772.546 586.586,753.724 587.145,734.326 587.704,714.925 588.263,681.743 588.823,665.518 589.382,667.52 589.941,635.448 590.5,654.813 591.06,640.843 591.619,676.602 592.178,630.836 592.737,651.415 593.297,671.797 593.856,659.791 594.415,681.176 594.974,680.857 595.534,697.589 596.093,682.352 596.652,669.803 597.211,720.919 597.771,688.772 598.33,686.952 598.889,673.26 599.448,706.771 600.008,689.92 600.567,692.805 601.126,675.964 601.685,681.114 602.245,699.622 602.804,700.278 603.363,736.713 603.922,736.78 604.482,737.033 605.041,738.663 605.6,740.234 606.159,724.696 606.719,739.142 607.278,767.95 607.837,769.742 608.396,747.871 608.956,759.994 609.515,757.852 610.074,756.434 610.633,752.282 611.193,750.39 611.752,732.609 612.311,745.209 612.87,712.618 613.43,696.65 613.989,714.892 614.548,699.5 615.107,663.794 615.667,680.96 616.226,680.298 616.785,667.82 617.344,699.859 617.904,697.905 618.463,712.605 619.022,710.963 619.581,712.246 620.141,725.48 620.7,722.198 621.259,749.362 621.818,745.382 622.378,725.285 622.937,719.904 623.496,686.671 624.055,703.668 624.615,704.758 625.174,751.471 625.733,701.091 626.292,702.47 626.852,701.625 627.411,686.098 627.97,689.709 628.529,690.294 629.089,694.14 629.648,679.29 630.207,678.163 630.766,699.971 631.326,701.066 631.885,703.92 632.444,720.394 633.003,720.784 633.563,715.469 634.122,732.297 634.681,729.434 635.24,742.219 635.8,754.57 636.359,784.958 636.918,748.648 637.477,762.378 638.037,776.323 638.596,740.171 639.155,735.996 639.714,700.953 640.274,686.077 640.833,715.751 641.392,699.69 641.951,715.458 642.511,680.153 643.07,697.067 643.629,661.395 644.188,613.995 644.748,635.456 645.307,621.123 645.866,643.566 646.425,648.263 646.985,655.438 647.544,659.812 648.103,650.071 648.662,654.924 649.222,672.752 649.781,725.966 650.34,694.547 650.899,713.626 651.459,683.34 652.018,685.368 652.577,684.63 653.136,689.527 653.696,659.313 654.255,661.79 654.814,697.582 655.373,648.631 655.933,668.458 656.492,637.711 657.051,656.551 657.61,624.277 658.17,644.317 658.729,663.155 659.288,649.939 659.847,667.96 660.407,684.304 660.966,715.021 661.525,733.833 662.084,733.19 662.644,779.132 663.203,759.466 663.762,737.775 664.321,768.916 664.881,751.939 665.44,750.647 665.999,751.598 666.558,796.141 667.118,775.968 667.677,737.086 668.236,702.861 668.795,687.432 669.355,706.879 669.914,706.139 670.473,705.416 671.032,674.832 671.592,697.063 672.151,729.492 672.71,726.814 673.269,708.321 673.829,703.927 674.388,689.548 674.947,658.189 675.506,662.013 676.066,662.595 676.625,664.746 677.184,664.335 677.743,681.493 678.303,649.731 678.862,646.713 679.421,633.325 679.981,636.871 680.54,623.137 681.099,625.994 681.658,661.754 682.218,630.299 682.777,619.745 683.336,607.689 683.895,642.184 684.455,644.954 685.014,664.56 685.573,666.686 686.132,687.689 686.692,705.482 687.251,706.513 687.81,685.961 688.369,687.703 688.929,671.298 689.488,671.327 690.047,688.869 690.606,674.377 691.166,722.89 691.725,691.051 692.284,708.84 692.843,676.147 693.403,678.247 693.962,708.896 694.521,705.316 695.08,704.328 695.64,639.068 696.199,637.991 696.758,628.514 697.317,616.866 697.877,651.371 698.436,635.797 698.995,589.74 699.554,613.561 700.114,620.834 700.673,609.936 701.232,630.489 701.791,636.025 702.351,659.134 702.91,662.187 703.469,664.872 704.028,683.472 704.588,681.873 705.147,666.103 705.706,648.369 706.265,669.017 706.825,698.568 707.384,718.121 707.943,701.936 708.502,716.039 709.062,748.505 709.621,760.739 710.18,773.856 710.739,719.468 711.299,751.328 711.858,749.055 712.417,760.692 712.976,790.95 713.536,821.853 714.095,801.107 714.654,810.555 715.213,821.279 715.773,801.203 716.332,779.753 716.891,794.647 717.45,805.508 718.01,799.851 718.569,798.234 719.128,793.297 719.687,757.598 720.247,753.738 720.806,751.107 721.365,768.83 721.924,766.484 722.484,761.142 723.043,772.216 723.602,767.41 724.161,747.309 724.721,728.782 725.28,727.69 725.839,725.596 726.398,726.301 726.958,694.733 727.517,661.429 728.076,635.821 728.635,637.24 729.195,638.721 729.754,592.274 730.313,583.223 730.872,542.216 731.432,549.903 731.991,554.463 732.55,544.986 733.109,571.502 733.669,577.659 734.228,599.861 734.787,605.66 735.346,614.728 735.906,632.816 736.465,636.365 737.024,623.346 737.583,639.638 738.143,645.264 738.702,683.183 739.261,732.871 739.82,733.176 740.38,747.63 740.939,712.624 741.498,730.221 742.057,761.215 742.617,721.706 743.176,721.998 743.735,722.768 744.294,722.944 744.854,702.287 745.413,702.023 745.972,732.034 746.531,727.102 747.091,726.322 747.65,758.41 748.209,721.106 748.768,721.256 749.328,719.811 749.887,731.439 750.446,712.81 751.005,713.296 751.565,729.03 752.124,727.658 752.683,723.352 753.242,735.61 753.802,719.042 754.361,699.618 754.92,744.421 755.479,762.017 756.039,775.91 756.598,773.14 757.157,767.237 757.716,760.503 758.276,756.206 758.835,766.811 759.394,730.338 759.953,712.905 760.513,742.032 761.072,741.505 761.631,688.397 762.19,652.377 762.75,652.11 763.309,670.521 763.868,640.315 764.427,658.903 764.987,659.043 765.546,660.833 766.105,661.995 766.664,657.427 767.224,676.988 767.783,677.152 768.342,680.363 768.901,713.968 769.461,711.437 770.02,680.899 770.579,667.451 771.138,687.378 771.698,670.387 772.257,687.257 772.816,689.657 773.375,691.297 773.935,661.541 774.494,663.221 775.053,665.202 775.612,668.727 776.172,705.395 776.731,707.922 777.29,688.502 777.849,722.893 778.409,722.747 778.968,720.771 779.527,753.489 780.086,749.315 780.646,760.178 781.205,759.787 781.764,772.96 782.323,736.167 782.883,783.172 783.442,748.051 784.001,745.576 784.56,730.652 785.12,730.199 785.679,729.737 786.238,712.927 786.797,725.662 787.357,689.027 787.916,674.769 788.475,707.583 789.034,721.763 789.594,671.059 790.153,688.156 790.712,690.454 791.271,672.355 791.831,688.13 792.39,692.318 792.949,706.491 793.508,709.623 794.068,723.262 794.627,702.915 795.186,721.206 795.745,720.86 796.305,749.722 796.864,763.156 797.423,743.515 797.982,740.409 798.542,736.496 799.101,699.472 799.66,711.794 800.219,712.003 800.779,724.436 801.338,759.108 801.897,773.572 802.456,786.751 803.016,812.61 803.575,771.792 804.134,751.659 804.693,748.227 805.253,746.114 805.812,774.637 806.371,768.297 806.931,746.172 807.49,725.899 808.049,754.586 808.608,754.286 809.168,750.049 809.727,746.977 810.286,761.883 810.845,756.974 811.405,736.466 811.964,733.92 812.523,731.667 813.082,698.02 813.642,715.437 814.201,712.25 814.76,695.581 815.319,696.096 815.879,693.946 816.438,677.649 816.997,678.091 817.556,663.851 818.116,634.168 818.675,603.746 819.234,610.469 819.793,586.284 820.353,590.379 820.912,611.336 821.471,618.953 822.03,624.411 822.59,627.8 823.149,614.94 823.708,634.507 824.267,602.793 824.827,623.464 825.386,629.435 825.945,667.32 826.504,648.682 827.064,602.413 827.623,606.103 828.182,612.497 828.741,600.845 829.301,654.789 829.86,641.059 830.419,614.689 830.978,603.929 831.538,608.641 832.097,595.626 832.656,612.828 833.215,582.821 833.775,587.705 834.334,579.092 834.893,581.495 835.452,604.397 836.012,625.667 836.571,659.467 837.13,628.57 837.689,599.752 838.249,638.857 838.808,660.878 839.367,661.495 839.926,635.046 840.486,634.857 841.045,635.683 841.604,620.243 842.163,590.911 842.723,646.06 843.282,665.495 843.841,666.947 844.4,665.263 844.96,667.2 845.519,636.245 846.078,639.714 846.637,639.542 847.197,710.931 847.756,725.672 848.315,740.863 848.874,737.904 849.434,769.748 849.993,763.883 850.552,762.926 851.111,773.989 851.671,738.032 852.23,738.083 852.789,737.098 853.348,735.05 853.908,746.132 854.467,776.889 855.026,773.894 855.585,783.845 856.145,747.269 856.704,776.936 857.263,785.833 857.822,780.644 858.382,793.589 858.941,770.885 859.5,782.86 860.059,773.735 860.619,751.212 861.178,783.305 861.737,763.197 862.296,710.74 862.856,770.925 863.415,764.745 863.974,743.775 864.533,740.087 865.093,769.247 865.652,781.521 866.211,772.977 866.77,786.078 867.33,764.583 867.889,744.61 868.448,693.514 869.007,706.946 869.567,721.279 870.126,704.028 870.685,688.958 871.244,706.515 871.804,703.723 872.363,701.8 872.922,700.911 873.481,714.216 874.041,709.54 874.6,674.77 875.159,674.678 875.718,692.516 876.278,657.167 876.837,643.619 877.396,678.328 877.955,674.958 878.515,671.738 879.074,654.602 879.633,639.681 880.192,624.362 880.752,611.371 881.311,583.61 881.87,588.038 882.429,559.21 882.989,581.456 883.548,589.946 884.107,577.974 884.666,583.422 885.226,607.632 885.785,633.585 886.344,667.063 886.903,684.43 887.463,685.381 888.022,684.67 888.581,686.771 889.14,720.688 889.7,702.07 890.259,683.425 890.818,714.754 891.377,748.759 891.937,767.141 892.496,716.349 893.055,745.193 893.614,709.227 894.174,675.672 894.733,676.643 895.292,677.371 895.851,662.589 896.411,664.491 896.97,663.609 897.529,663.906 898.088,693.084 898.648,708.903 899.207,691.579 899.766,691.541 900.325,723.799 900.885,733.735 901.444,734.197 902.003,762.007 902.562,775.281 903.122,820.22 903.681,830.56 904.24,772.809 904.799,768.793 905.359,781.571 905.918,807.487 906.477,786.789 907.036,798.181 907.596,821.943 908.155,811.856 908.714,773.278 909.273,751.136 909.833,767.051 910.392,793.929 910.951,740.268 911.51,751.804 912.07,730.447 912.629,707.26 913.188,704.577 913.747,718.355 914.307,712.955 914.866,711.512 915.425,725.086 915.984,675.544 916.544,674.814 917.103,675.759 917.662,643.203 918.221,663.544 918.781,665.725 919.34,631.112 919.899,646.265 920.458,600.087 921.018,651.713 921.577,603.737 922.136,622.804 922.695,643.286 923.255,693.785 923.814,705.758 924.373,755.914 924.932,718.035 925.492,715.76 926.051,695.033 926.61,691.339 927.169,707.405 927.729,703.341 928.288,701.743 928.847,715.475 929.406,680.545 929.966,677.281 930.525,665.196 931.084,682.559 931.644,666.536 932.203,629.672 932.762,618.822 933.321,604.652 933.881,576.062 934.44,582.88 934.999,574.623 935.558,531.079 936.118,572.859 936.677,578.968 937.236,583.289 937.795,587.261 938.355,609.901 938.914,664.02 939.473,681.59 940.032,696.767 940.592,696.658 941.151,682.315 941.71,666.434 942.269,667.869 942.829,685.88 943.388,690.165 943.947,674.443 944.506,673.203 945.066,674.305 945.625,671.175 946.184,670.298 946.743,624.285 947.303,630.488 947.862,636.392 948.421,638.913 948.98,625.683 949.54,632.482 950.099,599.898 950.658,623.8 951.217,609.358 951.777,615.673 952.336,620.211 952.895,641.084 953.454,644.5 954.014,629.195 954.573,628.634 955.132,634.746 955.691,605.586 956.251,625.716 956.81,612.772 957.369,601.174 957.928,589.966 958.488,614.813 959.047,622.093 959.606,639.713 960.165,641.363 960.725,611.854 961.284,633.321 961.843,622.676 962.402,613.403 962.962,600.998 963.521,619.923 964.08,606.934 964.639,628.258 965.199,633.188 965.758,633.784 966.317,652.97 966.876,671.061 967.436,676.339 967.995,692.931 968.554,691.572 969.113,689.867 969.673,688.052 970.232,668.424 970.791,684.897 971.35,672.174 971.91,653.297 972.469,656.344 973.028,626.844 973.587,630.889 974.147,634.823 974.706,673.305 975.265,671.254 975.824,687.386 976.384,688.482 976.943,705.546 977.502,685.5 978.061,713.3 978.621,757.865 979.18,770.128 979.739,784.304 980.298,749.441 980.858,762.35 981.417,806.672 981.976,817.242 982.535,795.432 983.095,791.725 983.654,770.48 984.213,782.106 984.772,777.848 985.332,770.913 985.891,779.813 986.45,760.083 987.009,754.782 987.569,684.334 988.128,687.57 988.687,671.441 989.246,704.407 989.806,686.437 990.365,717.811 990.924,769.086 991.483,766.598 992.043,777.667 992.602,790.733 993.161,788.364 993.72,781.569 994.28,777.571 994.839,803.848 995.398,814.694 995.957,776.022 996.517,788.01 997.076,765.058 997.635,778.986 998.194,755.981 998.754,752.959 999.313,733.642 999.872,746.664 1000.43,778.327 1000.99,773.06 1001.55,770.683 1002.11,767.519 1002.67,777.674 1003.23,754.263 1003.79,717.439 1004.35,732.836 1004.91,775.007 1005.46,771.905 1006.02,735.312 1006.58,716.759 1007.14,697.559 1007.7,695.542 1008.26,693.27 1008.82,690.293 1009.38,639.715 1009.94,672.079 1010.5,705.183 1011.06,706.346 1011.62,706.85 1012.18,722.506 1012.73,703.615 1013.29,702.973 1013.85,751.455 1014.41,732.046 1014.97,694.208 1015.53,708.938 1016.09,691.427 1016.65,660.569 1017.21,661.469 1017.77,680.882 1018.33,719.199 1018.89,702.745 1019.45,716.966 1020.01,681.013 1020.56,681.111 1021.12,664.92 1021.68,646.247 1022.24,647.405 1022.8,618.21 1023.36,605.281 1023.92,625.25 1024.48,629.192 1025.04,616.719 1025.6,633.062 1026.16,620.97 1026.72,605.43 1027.28,612.075 1027.83,647.836 1028.39,647.374 1028.95,646.84 1029.51,679.096 1030.07,631.296 1030.63,617.743 1031.19,576.431 1031.75,612.424 1032.31,632.802 1032.87,618.998 1033.43,655.14 1033.99,677.569 1034.55,727.534 1035.1,727.723 1035.66,708.435 1036.22,707.91 1036.78,675.343 1037.34,690.777 1037.9,724.134 1038.46,753.264 1039.02,766.319 1039.58,760.794 1040.14,741.844 1040.7,720.445 1041.26,705.194 1041.82,704.713 1042.38,717.522 1042.93,727.609 1043.49,691.608 1044.05,673.829 1044.61,691.949 1045.17,691.282 1045.73,675.362 1046.29,707.301 1046.85,704.751 1047.41,704.008 1047.97,703.595 1048.53,705.726 1049.09,736.33 1049.65,751.031 1050.2,731.815 1050.76,744.703 1051.32,741.697 1051.88,740.675 1052.44,773.99 1053,753.866 1053.56,744.695 1054.12,738.208 1054.68,716.676 1055.24,699.03 1055.8,680.021 1056.36,679.577 1056.92,680.495 1057.48,679.026 1058.03,628.883 1058.59,646.86 1059.15,650.865 1059.71,703.614 1060.27,689.33 1060.83,674.937 1061.39,656.62 1061.95,662.171 1062.51,666.732 1063.07,667.709 1063.63,651.491 1064.19,651.175 1064.75,649.983 1065.3,685.823 1065.86,650.49 1066.42,604.811 1066.98,609.697 1067.54,629.365 1068.1,632.521 1068.66,650.218 1069.22,636.309 1069.78,620.878 1070.34,641.098 1070.9,596.159 1071.46,616.132 1072.02,618.338 1072.57,637.901 1073.13,659.747 1073.69,615.543 1074.25,621.238 1074.81,610.929 1075.37,621.165 1075.93,630.123 1076.49,598.883 1077.05,606.494 1077.61,610.778 1078.17,594.589 1078.73,587.109 1079.29,596.158 1079.85,581.959 1080.4,589.68 1080.96,577.773 1081.52,586.638 1082.08,612.7 1082.64,600.414 1083.2,603.465 1083.76,607.877 1084.32,580.591 1084.88,572.03 1085.44,612.775 1086,617.116 1086.56,585.992 1087.12,590.487 1087.67,595.587 1088.23,581.885 1088.79,602.69 1089.35,610.338 1089.91,616.549 1090.47,634.946 1091.03,682.873 1091.59,697.836 1092.15,709.311 1092.71,690.88 1093.27,707.165 1093.83,724.322 1094.39,741.51 1094.94,723.297 1095.5,691.215 1096.06,721.113 1096.62,716.149 1097.18,667.333 1097.74,667.513 1098.3,650.383 1098.86,638.697 1099.42,625.796 1099.98,642 1100.54,616.851 1101.1,618.552 1101.66,577.723 1102.22,567.794 1102.77,591.2 1103.33,596.585 1103.89,632.935 1104.45,649.571 1105.01,648.001 1105.57,667.668 1106.13,670.295 1106.69,667.185 1107.25,670.669 1107.81,686.697 1108.37,690.541 1108.93,723.718 1109.49,750.742 1110.04,731.218 1110.6,698.155 1111.16,698.258 1111.72,683.699 1112.28,621.759 1112.84,623.689 1113.4,641.818 1113.96,660.16 1114.52,628.146 1115.08,618.101 1115.64,618.173 1116.2,620.819 1116.76,643.813 1117.31,695.448 1117.87,659.881 1118.43,695.775 1118.99,696.082 1119.55,743.011 1120.11,742.956 1120.67,769.921 1121.23,798.759 1121.79,779.409 1122.35,773.427 1122.91,783.497 1123.47,764.967 1124.03,810.237 1124.59,801.54 1125.14,813.012 1125.7,773.698 1126.26,790.049 1126.82,785.404 1127.38,762.476 1127.94,762.404 1128.5,754.423 1129.06,751.072 1129.62,779.673 1130.18,772.839 1130.74,751.775 1131.3,745.477 1131.86,740.166 1132.41,736.505 1132.97,730.324 1133.53,743.903 1134.09,741.334 1134.65,738.883 1135.21,722.357 1135.77,707.177 1136.33,706.36 1136.89,719.557 1137.45,765.737 1138.01,760.057 1138.57,755.172 1139.13,764.791 1139.68,725.38 1140.24,724.607 1140.8,724.533 1141.36,723.419 1141.92,719.478 1142.48,715.926 1143.04,781.263 1143.6,778.938 1144.16,811.558 1144.72,822.805 1145.28,785.725 1145.84,762.377 1146.4,756.973 1146.96,717.228 1147.51,717.974 1148.07,682.615 1148.63,682.924 1149.19,695.995 1149.75,698.246 1150.31,712.721 1150.87,713.858 1151.43,634.231 1151.99,620.339 1152.55,623.152 1153.11,608.219 1153.67,596.446 1154.23,586.008 1154.78,605.063 1155.34,595.896 1155.9,617.464 1156.46,588.147 1157.02,596.512 1157.58,552.563 1158.14,545.156 1158.7,570.112 1159.26,541.22 1159.82,549.992 1160.38,590.253 1160.94,645.356 1161.5,649.161 1162.05,634.786 1162.61,637.66 1163.17,621.237 1163.73,644.066 1164.29,644.634 1164.85,667.039 1165.41,652.519 1165.97,655.086 1166.53,688.971 1167.09,705.101 1167.65,718.827 1168.21,748.479 1168.77,711.575 1169.33,678.931 1169.88,727.684 1170.44,739.911 1171,748.315 1171.56,777.444 1172.12,774.057 1172.68,804.51 1173.24,811.709 1173.8,787.778 1174.36,766.447 1174.92,762.741 1175.48,742.426 1176.04,703.313 1176.6,704.44 1177.15,734.544 1177.71,712.488 1178.27,726.057 1178.83,705.992 1179.39,687.807 1179.95,673.599 1180.51,672.884 1181.07,671.779 1181.63,687.27 1182.19,684.681 1182.75,685.61 1183.31,650.159 1183.87,636.879 1184.43,641.238 1184.98,645.943 1185.54,652.543 1186.1,637.831 1186.66,609.941 1187.22,597.092 1187.78,598.451 1188.34,602.586 1188.9,590.275 1189.46,578.763 1190.02,582.496 1190.58,585.654 1191.14,639.385 1191.7,661.543 1192.25,648.454 1192.81,615.022 1193.37,636.38 1193.93,642.128 1194.49,659.193 1195.05,681.087 1195.61,698.434 1196.17,696.793 1196.73,697.195 1197.29,698.548 1197.85,650.576 1198.41,717.718 1198.97,717.216 1199.52,730.528 1200.08,741.777 1200.64,738.787 1201.2,705.832 1201.76,706.766 1202.32,704.983 1202.88,703.895 1203.44,688.158 1204,687.139 1204.56,717.761 1205.12,717.327 1205.68,684.436 1206.24,700.019 1206.8,714.325 1207.35,729.105 1207.91,713.505 1208.47,697.649 1209.03,698.038 1209.59,714.452 1210.15,698.152 1210.71,697.573 1211.27,727.44 1211.83,723.949 1212.39,738.082 1212.95,716.628 1213.51,760.46 1214.07,755.94 1214.62,736.091 1215.18,716.882 1215.74,681.684 1216.3,646.517 1216.86,649.265 1217.42,635.487 1217.98,639.197 1218.54,640.996 1219.1,645.38 1219.66,679.727 1220.22,685.153 1220.78,686.435 1221.34,722.014 1221.89,719.776 1222.45,703.089 1223.01,685.432 1223.57,716.941 1224.13,713.622 1224.69,711.423 1225.25,660.712 1225.81,662.115 1226.37,664.997 1226.93,617.229 1227.49,622.177 1228.05,625.952 1228.61,600.948 1229.17,620.408 1229.72,634.917 1230.28,621.363 1230.84,621.2 1231.4,640.76 1231.96,640.785 1232.52,640.057 1233.08,658.655 1233.64,644.952 1234.2,647.16 1234.76,649.809 1235.32,600.895 1235.88,586.968 1236.44,606.573 1236.99,608.249 1237.55,592.769 1238.11,610.073 1238.67,613.585 1239.23,586.328 1239.79,611.859 1240.35,614.478 1240.91,617.019 1241.47,653.674 1242.03,623.947 1242.59,628.15 1243.15,633.503 1243.71,648.348 1244.26,648.001 1244.82,681.339 1245.38,681.35 1245.94,664.508 1246.5,663.811 1247.06,650.377 1247.62,637.676 1248.18,674.466 1248.74,690.582 1249.3,723.036 1249.86,720.786 1250.42,736.129 1250.98,749.515 1251.54,766.24 1252.09,797.237 1252.65,775.378 1253.21,769.378 1253.77,747.292 1254.33,757.069 1254.89,755.259 1255.45,750.708 1256.01,729.03 1256.57,757.436 1257.13,749.774 1257.69,792.399 1258.25,756.464 1258.81,769.642 1259.36,748.817 1259.92,809.475 1260.48,801.141 1261.04,776.009 1261.6,772.084 1262.16,751.914 1262.72,733.76 1263.28,730.987 1263.84,748.992 1264.4,713.712 1264.96,700.126 1265.52,671.035 1266.08,670.226 1266.63,713.664 1267.19,708.098 1267.75,705.613 1268.31,671.876 1268.87,687.067 1269.43,718.163 1269.99,700.972 1270.55,718.729 1271.11,719.85 1271.67,716.802 1272.23,730.321 1272.79,710.442 1273.35,675.972 1273.91,662.221 1274.46,659.552 1275.02,638.619 1275.58,622.552 1276.14,627.438 1276.7,648.92 1277.26,651.709 1277.82,688.571 1278.38,685.478 1278.94,684.01 1279.5,714.2 1280.06,712.646 1280.62,712.194 1281.18,709.904 1281.73,711.791 1282.29,708.118 1282.85,672.78 1283.41,701.924 1283.97,650.319 1284.53,616.575 1285.09,605.734 1285.65,609.116 1286.21,630.555 1286.77,637.237 1287.33,654.008 1287.89,653.601 1288.45,624.38 1289,626.593 1289.56,630.166 1290.12,648.494 1290.68,631.561 1291.24,620.413 1291.8,641.823 1292.36,646.474 1292.92,648.403 1293.48,649.222 1294.04,638.088 1294.6,675.215 1295.16,657.553 1295.72,657.453 1296.28,659.9 1296.83,665.896 1297.39,650.088 1297.95,633.816 1298.51,638.424 1299.07,674.777 1299.63,642.197 1300.19,646.265 1300.75,663.043 1301.31,665.878 1301.87,666.738 1302.43,667.763 1302.99,669.604 1303.55,667.153 1304.1,672.28 1304.66,657.19 1305.22,656.694 1305.78,624.321 1306.34,675.345 1306.9,691.821 1307.46,708.403 1308.02,693.237 1308.58,692.997 1309.14,659.874 1309.7,627.802 1310.26,596.761 1310.82,634.707 1311.38,674.128 1311.93,691.882 1312.49,694.042 1313.05,694.334 1313.61,692.61 1314.17,661.554 1314.73,645.025 1315.29,662.594 1315.85,679.651 1316.41,679.209 1316.97,650.502 1317.53,666.557 1318.09,668.363 1318.65,683.998 1319.2,672.088 1319.76,673.249 1320.32,657.853 1320.88,659.277 1321.44,676.532 1322,676.815 1322.56,679.211 1323.12,712.791 1323.68,692.649 1324.24,691.676 1324.8,656.992 1325.36,625.24 1325.92,624.649 1326.47,642.083 1327.03,643.231 1327.59,632.354 1328.15,618.851 1328.71,622.356 1329.27,623.405 1329.83,609.257 1330.39,612.341 1330.95,647.036 1331.51,680.033 1332.07,661.2 1332.63,647.731 1333.19,650.508 1333.75,653.479 1334.3,641.708 1334.86,648.921 1335.42,666.963 1335.98,670.597 1336.54,671.067 1337.1,687.094 1337.66,686.007 1338.22,717.65 1338.78,715.009 1339.34,700.472 1339.9,687.57 1340.46,702.459 1341.02,731.2 1341.57,744.39 1342.13,758.9 1342.69,738.741 1343.25,748.871 1343.81,746.229 1344.37,711.378 1344.93,742.403 1345.49,740.253 1346.05,801.666 1346.61,829.96 1347.17,841.167 1347.73,833.556 1348.29,810.626 1348.84,836.055 1349.4,808.91 1349.96,800.835 1350.52,807.981 1351.08,788.18 1351.64,768.243 1352.2,730.726 1352.76,759.314 1353.32,720.459 1353.88,714.263 1354.44,714.967 1355,729.864 1355.56,759.066 1356.12,769.439 1356.67,717.671 1357.23,733.357 1357.79,729.086 1358.35,724.219 1358.91,754.794 1359.47,748.78 1360.03,761.85 1360.59,757.618 1361.15,739.654 1361.71,737.151 1362.27,749.986 1362.83,747.755 1363.39,765.2 1363.94,743.245 1364.5,739.302 1365.06,701.623 1365.62,702.542 1366.18,702.912 1366.74,699.006 1367.3,679.771 1367.86,695.741 1368.42,725.544 1368.98,737.848 1369.54,736.368 1370.1,701.269 1370.66,653.637 1371.21,705.214 1371.77,721.623 1372.33,739.072 1372.89,735.476 1373.45,716.776 1374.01,715.093 1374.57,694.696 1375.13,646.22 1375.69,665.504 1376.25,681.656 1376.81,683.512 1377.37,681.95 1377.93,711.56 1378.49,677.453 1379.04,681.732 1379.6,679.467 1380.16,679.541 1380.72,682.993 1381.28,682.456 1381.84,664.393 1382.4,680.226 1382.96,665.984 1383.52,651.241 1384.08,667.142 1384.64,668.18 1385.2,650.764 1385.76,666.883 1386.31,702.894 1386.87,700.132 1387.43,698.614 1387.99,725.527 1388.55,724.347 1389.11,722.337 1389.67,720.913 1390.23,701.854 1390.79,666.351 1391.35,617.55 1391.91,635.49 1392.47,638.783 1393.03,640.14 1393.58,641.874 1394.14,614.203 1394.7,635.896 1395.26,653.306 1395.82,675.857 1396.38,677.321 1396.94,679.285 1397.5,679.636 1398.06,679.891 1398.62,682.169 1399.18,715.343 1399.74,730.578 1400.3,726.279 1400.86,727.837 1401.41,709.652 1401.97,711.682 1402.53,698.627 1403.09,697.598 1403.65,712.22 1404.21,697.128 1404.77,692.597 1405.33,676.655 1405.89,661.053 1406.45,629.341 1407.01,647.288 1407.57,664.514 1408.13,712.648 1408.68,712.257 1409.24,692.564 1409.8,691.207 1410.36,706.892 1410.92,706.986 1411.48,768.12 1412.04,763.165 1412.6,775.396 1413.16,776.89 1413.72,757.824 1414.28,769.564 1414.84,766.2 1415.4,761.519 1415.95,755.086 1416.51,749.557 1417.07,746.468 1417.63,742.937 1418.19,725.972 1418.75,757.889 1419.31,785.025 1419.87,762.25 1420.43,791.025 1420.99,803.9 1421.55,782.34 1422.11,760.767 1422.67,789.552 1423.23,751.262 1423.78,764.632 1424.34,778.489 1424.9,768.797 1425.46,762.754 1426.02,709.469 1426.58,694.451 1427.14,708.56 1427.7,701.091 1428.26,714.06 1428.82,698.036 1429.38,679.609 1429.94,646.626 1430.5,646.309 1431.05,630.167 1431.61,599.803 1432.17,603.793 1432.73,574.069 1433.29,564.393 1433.85,554.442 1434.41,560.521 1434.97,567.517 1435.53,570.729 1436.09,627.184 1436.65,644.91 1437.21,696.478 1437.77,713.436 1438.33,679.686 1438.88,650.922 1439.44,637.258 1440,639.737 1440.56,593.565 1441.12,547.859 1441.68,607.724 1442.24,610.356 1442.8,613.619 1443.36,585.002 1443.92,622.477 1444.48,659.474 1445.04,627.551 1445.6,664.124 1446.15,633.899 1446.71,670.167 1447.27,671.803 1447.83,686.512 1448.39,655.346 1448.95,638.226 1449.51,626.26 1450.07,611.124 1450.63,614.906 1451.19,633.664 1451.75,634.578 1452.31,622.37 1452.87,642.856 1453.42,680.504 1453.98,665.193 1454.54,731.895 1455.1,727.645 1455.66,725.231 1456.22,718.091 1456.78,746.06 1457.34,721.993 1457.9,686.041 1458.46,668.987 1459.02,652.504 1459.58,654.065 1460.14,657.904 1460.7,658.629 1461.25,663.467 1461.81,665.578 1462.37,666.349 1462.93,702.374 1463.49,688.259 1464.05,686.479 1464.61,687.267 1465.17,669.938 1465.73,669.261 1466.29,669.909 1466.85,654.172 1467.41,669.268 1467.97,699.887 1468.52,717.01 1469.08,749.129 1469.64,747.709 1470.2,790.135 1470.76,736.483 1471.32,703.719 1471.88,670.075 1472.44,669 1473,704.015 1473.56,704.1 1474.12,669.704 1474.68,701.946 1475.24,733.486 1475.79,697.181 1476.35,683.151 1476.91,669.879 1477.47,665.819 1478.03,717.202 1478.59,728.221 1479.15,725.517 1479.71,708.865 1480.27,705.057 1480.83,687.524 1481.39,655.669 1481.95,688.144 1482.51,706.046 1483.07,715.47 1483.62,716.123 1484.18,711.602 1484.74,744.299 1485.3,740.69 1485.86,768.505 1486.42,749.47 1486.98,745.667 1487.54,725.18 1488.1,742.322 1488.66,735.42 1489.22,734.073 1489.78,716.409 1490.34,726.482 1490.89,711.783 1491.45,679.537 1492.01,647.939 1492.57,682.593 1493.13,683.272 1493.69,680.796 1494.25,648.815 1494.81,667.566 1495.37,637.493 1495.93,609.971 1496.49,582.28 1497.05,634.578 1497.61,635.499 1498.16,586.091 1498.72,575.831 1499.28,586.653 1499.84,590.019 1500.4,543.465 1500.96,553.404 1501.52,577.219 1502.08,596.735 1502.64,571.612 1503.2,610.334 1503.76,646.749 1504.32,632.484 1504.88,635.744 1505.44,640.039 1505.99,644.531 1506.55,646.948 1507.11,583.548 1507.67,557.259 1508.23,599.913 1508.79,603.089 1509.35,606.604 1509.91,609.061 1510.47,633.486 1511.03,638.311 1511.59,689.212 1512.15,688.106 1512.71,675 1513.26,678.279 1513.82,661.963 1514.38,680.588 1514.94,711.297 1515.5,725.631 1516.06,721.351 1516.62,733.251 1517.18,733.927 1517.74,718.722 1518.3,685.046 1518.86,702.713 1519.42,652.721 1519.98,683.536 1520.53,669.059 1521.09,672.865 1521.65,643.068 1522.21,627.256 1522.77,630.387 1523.33,632.678 1523.89,638.724 1524.45,642.475 1525.01,644.447 1525.57,645.856 1526.13,649.046 1526.69,667.052 1527.25,656.613 1527.81,660.495 1528.36,662.352 1528.92,665.202 1529.48,632.944 1530.04,636.988 1530.6,625.153 1531.16,628.44 1531.72,663.539 1532.28,631.636 1532.84,633.657 1533.4,603.954 1533.96,627.611 1534.52,648.304 1535.08,715.11 1535.63,764.756 1536.19,792.852 1536.75,770.249 1537.31,730.206 1537.87,729.704 1538.43,743.573 1538.99,772.031 1539.55,719.789 1540.11,700.222 1540.67,718.175 1541.23,666.358 1541.79,635.524 1542.35,620.611 1542.9,621.411 1543.46,623.809 1544.02,661.175 1544.58,676.106 1545.14,661.951 1545.7,678.617 1546.26,633.205 1546.82,634.817 1547.38,638.179 1547.94,655.352 1548.5,654.264 1549.06,656.832 1549.62,658.166 1550.18,658.848 1550.73,691.396 1551.29,670.592 1551.85,688.808 1552.41,672.34 1552.97,687.809 1553.53,703.326 1554.09,717.047 1554.65,747.887 1555.21,743.693 1555.77,726.07 1556.33,725.385 1556.89,758.106 1557.45,739.036 1558,723.573 1558.56,740.671 1559.12,737.778 1559.68,734.722 1560.24,747.382 1560.8,747.428 1561.36,713.193 1561.92,677.253 1562.48,662.939 1563.04,665.196 1563.6,631.769 1564.16,662.74 1564.72,694.858 1565.28,692.254 1565.83,722.148 1566.39,685.638 1566.95,668.491 1567.51,671.906 1568.07,673.737 1568.63,673.483 1569.19,660.005 1569.75,661.615 1570.31,678.168 1570.87,646.143 1571.43,633.158 1571.99,636.641 1572.55,640.043 1573.1,660.393 1573.66,678.693 1574.22,661.556 1574.78,676.675 1575.34,724.546 1575.9,740.795 1576.46,755.412 1577.02,734.713 1577.58,734.04 1578.14,714.575 1578.7,764.842 1579.26,809.771 1579.82,803.633 1580.37,766.731 1580.93,744.672 1581.49,725.083 1582.05,738.186 1582.61,750.589 1583.17,762.565 1583.73,726.317 1584.29,755.937 1584.85,785.573 1585.41,799.422 1585.97,780.058 1586.53,760.425 1587.09,738.765 1587.65,718.937 1588.2,667.912 1588.76,686.086 1589.32,705.986 1589.88,717.61 1590.44,730.778 1591,742.664 1591.56,737.751 1592.12,747.672 1592.68,777.824 1593.24,757.936 1593.8,724.08 1594.36,689.411 1594.92,675.571 1595.47,690.03 1596.03,690.332 1596.59,659.531 1597.15,625.685 1597.71,642.717 1598.27,661.189 1598.83,675.413 1599.39,675.853 1599.95,661.407 1600.51,679.222 1601.07,665.781 1601.63,679.814 1602.19,681.192 1602.74,662.578 1603.3,645.157 1603.86,680.499 1604.42,730.146 1604.98,744.41 1605.54,772.584 1606.1,783.198 1606.66,762.091 1607.22,743.042 1607.78,740.973 1608.34,753.429 1608.9,783.865 1609.46,795.792 1610.02,789.832 1610.57,755.839 1611.13,768.738 1611.69,729.811 1612.25,694.278 1612.81,693.687 1613.37,741.074 1613.93,753.67 1614.49,752.609 1615.05,767.811 1615.61,761.451 1616.17,756.81 1616.73,720.983 1617.29,685.775 1617.84,702.505 1618.4,716.243 1618.96,718.1 1619.52,746.326 1620.08,728.316 1620.64,675.764 1621.2,659.561 1621.76,641.69 1622.32,660.774 1622.88,663.666 1623.44,635.47 1624,637.915 1624.56,624.496 1625.11,654.733 1625.67,660.959 1626.23,627.25 1626.79,610.616 1627.35,688.692 1627.91,692.192 1628.47,679.278 1629.03,693.241 1629.59,739.159 1630.15,719.623 1630.71,728.109 1631.27,740.203 1631.83,753.386 1632.39,698.093 1632.94,678.152 1633.5,660.814 1634.06,678.436 1634.62,662.074 1635.18,662.83 1635.74,663.854 1636.3,602.573 1636.86,603.668 1637.42,593.731 1637.98,597.978 1638.54,603.053 1639.1,575.37 1639.66,595.698 1640.21,634.711 1640.77,623.731 1641.33,626.817 1641.89,616.058 1642.45,634.932 1643.01,640.631 1643.57,630.482 1644.13,667.928 1644.69,700.667 1645.25,714.607 1645.81,699.233 1646.37,748.364 1646.93,727.124 1647.48,726.09 1648.04,711.255 1648.6,723.847 1649.16,702.605 1649.72,687.136 1650.28,706.638 1650.84,740.078 1651.4,756.145 1651.96,787.506 1652.52,783.243 1653.08,810.088 1653.64,803.362 1654.2,794.726 1654.76,791.092 1655.31,768.828 1655.87,766.632 1656.43,729.899 1656.99,726.517 1657.55,740.401 1658.11,719.891 1658.67,735.8 1659.23,701.385 1659.79,686.217 1660.35,672.556 1660.91,653.573 1661.47,624.409 1662.03,626.132 1662.58,628.786 1663.14,602.902 1663.7,607.497 1664.26,644.156 1664.82,665.142 1665.38,681.757 1665.94,681.793 1666.5,663.435 1667.06,660.452 1667.62,613.698 1668.18,635.175 1668.74,656.95 1669.3,645.046 1669.85,643.427 1670.41,661.974 1670.97,679.269 1671.53,678.32 1672.09,648.065 1672.65,650.252 1673.21,621.595 1673.77,643.026 1674.33,628.09 1674.89,651.43 1675.45,639.477 1676.01,644.41 1676.57,647.487 1677.13,614.744 1677.68,588.164 1678.24,594.39 1678.8,567.072 1679.36,603.673 1679.92,639.956 1680.48,671.5 1681.04,700.639 1681.6,714.091 1682.16,727.188 1682.72,724.314 1683.28,707.285 1683.84,657.607 1684.4,694.099 1684.95,742.734 1685.51,804.176 1686.07,795.563 1686.63,790.744 1687.19,786.588 1687.75,796.788 1688.31,789.699 1688.87,753.622 1689.43,750.031 1689.99,760.872 1690.55,742.073 1691.11,706.813 1691.67,702.502 1692.23,684.872 1692.78,702.907 1693.34,668.077 1693.9,668.951 1694.46,686.28 1695.02,719.492 1695.58,735.014 1696.14,748.388 1696.7,778.902 1697.26,774.587 1697.82,786.946 1698.38,765.086 1698.94,742.967 1699.5,771.266 1700.05,765.586 1700.61,761.056 1701.17,772.034 1701.73,753.394 1702.29,751.499 1702.85,731.152 1703.41,741.517 1703.97,723.396 1704.53,737.112 1705.09,720.497 1705.65,671.74 1706.21,690.692 1706.77,705.955 1707.32,703.84 1707.88,716.879 1708.44,697.113 1709,695.916 1709.56,678.366 1710.12,659.944 1710.68,648.176 1711.24,651.6 1711.8,619.279 1712.36,587.436 1712.92,608.621 1713.48,627.42 1714.04,630.973 1714.6,647.848 1715.15,666.628 1715.71,632.878 1716.27,633.03 1716.83,637.458 1717.39,657.674 1717.95,641.06 1718.51,656.974 1719.07,661.468 1719.63,649.515 1720.19,697.678 1720.75,712.846 1721.31,712.392 1721.87,694.404 1722.42,711.718 1722.98,711.039 1723.54,710.866 1724.1,691.678 1724.66,706.515 1725.22,707.968 1725.78,741.66 1726.34,754.141 1726.9,748.92 1727.46,742.195 1728.02,742.38 1728.58,737.459 1729.14,753.656 1729.69,737.555 1730.25,736.247 1730.81,763.116 1731.37,777.14 1731.93,771.907 1732.49,752.949 1733.05,764.722 1733.61,759.199 1734.17,756.645 1734.73,801.956 1735.29,841.431 1735.85,817.914 1736.41,810.929 1736.97,775.46 1737.52,753.53 1738.08,769.541 1738.64,764.102 1739.2,728.314 1739.76,688.84 1740.32,689.132 1740.88,700.937 1741.44,648.774 1742,634.587 1742.56,656.857 1743.12,657.268 1743.68,643.999 1744.24,644.56 1744.79,643.961 1745.35,633.359 1745.91,616.078 1746.47,638.133 1747.03,656.68 1747.59,660.135 1748.15,627.527 1748.71,628.919 1749.27,644.628 1749.83,647.734 1750.39,615.989 1750.95,616.859 1751.51,638.395 1752.06,639.975 1752.62,642.613 1753.18,626.639 1753.74,582.737 1754.3,589.219 1754.86,594.263 1755.42,629.757 1755.98,614.46 1756.54,588.874 1757.1,560.184 1757.66,569.996 1758.22,558.867 1758.78,581.995 1759.34,603.24 1759.89,604.784 1760.45,608.363 1761.01,614.404 1761.57,619.564 1762.13,656.202 1762.69,658.098 1763.25,661.13 1763.81,646.754 1764.37,695.913 1764.93,666.76 1765.49,667.187 1766.05,688.19 1766.61,673.202 1767.16,641.222 1767.72,642.542 1768.28,639.02 1768.84,639.307 1769.4,596.035 1769.96,619.862 1770.52,623.433 1771.08,611.582 1771.64,631.004 1772.2,635.836 1772.76,670.955 1773.32,674.251 1773.88,645.399 1774.43,648.832 1774.99,635.512 1775.55,637.857 1776.11,627.413 1776.67,659.644 1777.23,663.638 1777.79,684.674 1778.35,634.418 1778.91,605.359 1779.47,638.238 1780.03,611.046 1780.59,618.05 1781.15,652.877 1781.71,641.146 1782.26,659.545 1782.82,697.434 1783.38,665.437 1783.94,668.063 1784.5,681.964 1785.06,698.66 1785.62,667.629 1786.18,664.985 1786.74,652.192 1787.3,654.651 1787.86,638.377 1788.42,689.417 1788.98,690.353 1789.53,662.472 1790.09,650.411 1790.65,621.275 1791.21,624.33 1791.77,657.103 1792.33,623.636 1792.89,625.945 1793.45,594.297 1794.01,598.354 1794.57,635.6 1795.13,735.618 1795.69,734.462 1796.25,685.479 1796.8,687.98 1797.36,686.869 1797.92,688.252 1798.48,673.682 1799.04,693.487 1799.6,709.54 1800.16,705.363 1800.72,657.911 1801.28,644.858 1801.84,680.831 1802.4,663.26 1802.96,663.698 1803.52,632.629 1804.08,666.87 1804.63,686.083 1805.19,737.897 1805.75,720.711 1806.31,766.316 1806.87,777.488 1807.43,756.283 1807.99,752.518 1808.55,783.011 1809.11,778.507 1809.67,760.211 1810.23,743.421 1810.79,738.835 1811.35,721.238 1811.9,735.718 1812.46,748.337 1813.02,746.795 1813.58,776.781 1814.14,788.479 1814.7,782.692 1815.26,776.462 1815.82,771.049 1816.38,768.711 1816.94,793.548 1817.5,772.324 1818.06,815.556 1818.62,820.941 1819.18,813.176 1819.73,789.395 1820.29,799.605 1820.85,843.538 1821.41,867.157 1821.97,842.375 1822.53,831.914 1823.09,775.486 1823.65,787.728 1824.21,766.946 1824.77,777.427 1825.33,738.074 1825.89,747.447 1826.45,743.29 1827,737.724 1827.56,731.11 1828.12,710.885 1828.68,707.634 1829.24,705.001 1829.8,667.585 1830.36,682.535 1830.92,683.298 1831.48,665.012 1832.04,645.315 1832.6,662.854 1833.16,680.393 1833.72,711.777 1834.27,727.998 1834.83,692.893 1835.39,695.589 1835.95,693.797 1836.51,676.969 1837.07,643.801 1837.63,679.207 1838.19,695.59 \"/>\n<path clip-path=\"url(#clip433)\" d=\"M720.247 693.479 L720.806 693.479 L721.365 693.479 L721.924 693.479 L722.484 693.479 L723.043 693.479 L723.602 693.479 L724.161 693.479 L724.721 693.479 L725.28 693.479 L725.839 693.479 L726.398 693.479 L726.958 693.479 L727.517 693.479 L728.076 693.479 L728.635 693.479 L729.195 693.479 L729.754 693.479 L730.313 693.479 L730.872 693.479 L731.432 693.479 L731.991 693.479 L732.55 693.479 L733.109 693.479 L733.669 693.479 L734.228 693.479 L734.787 693.479 L735.346 693.479 L735.906 693.479 L736.465 693.479 L737.024 693.479 L737.583 693.479 L738.143 693.479 L738.702 693.479 L739.261 693.479 L739.82 693.479 L740.38 693.479 L740.939 693.479 L741.498 693.479 L742.057 693.479 L742.617 693.479 L743.176 693.479 L743.735 693.479 L744.294 693.479 L744.854 693.479 L745.413 693.479 L745.972 693.479 L746.531 693.479 L747.091 693.479 L747.65 693.479 L748.209 693.479 L748.768 693.479 L749.328 693.479 L749.887 693.479 L750.446 693.479 L751.005 693.479 L751.565 693.479 L752.124 693.479 L752.683 693.479 L753.242 693.479 L753.802 693.479 L754.361 693.479 L754.92 693.479 L755.479 693.479 L756.039 693.479 L756.598 693.479 L757.157 693.479 L757.716 693.479 L758.276 693.479 L758.835 693.479 L759.394 693.479 L759.953 693.479 L760.513 693.479 L761.072 693.479 L761.631 693.479 L762.19 693.479 L762.75 693.479 L763.309 693.479 L763.868 693.479 L764.427 693.479 L764.987 693.479 L765.546 693.479 L766.105 693.479 L766.664 693.479 L767.224 693.479 L767.783 693.479 L768.342 693.479 L768.901 693.479 L769.461 693.479 L770.02 693.479 L770.579 693.479 L771.138 693.479 L771.698 693.479 L772.257 693.479 L772.816 693.479 L773.375 693.479 L773.935 693.479 L774.494 693.479 L775.053 693.479 L775.612 693.479 L776.172 693.479 L776.731 693.479 L777.29 693.479 L777.849 693.479 L778.409 693.479 L778.968 693.479 L779.527 693.479 L780.086 693.479 L780.646 693.479 L781.205 693.479 L781.764 693.479 L782.323 693.479 L782.883 693.479 L783.442 693.479 L784.001 693.479 L784.56 693.479 L785.12 693.479 L785.679 693.479 L786.238 693.479 L786.797 693.479 L787.357 693.479 L787.916 693.479 L788.475 693.479 L789.034 693.479 L789.594 693.479 L790.153 693.479 L790.712 693.479 L791.271 693.479 L791.831 693.479 L792.39 693.479 L792.949 693.479 L793.508 693.479 L794.068 693.479 L794.627 693.479 L795.186 693.479 L795.745 693.479 L796.305 693.479 L796.864 693.479 L797.423 693.479 L797.982 693.479 L798.542 693.479 L799.101 693.479 L799.66 693.479 L800.219 693.479 L800.779 693.479 L801.338 693.479 L801.897 693.479 L802.456 693.479 L803.016 693.479 L803.575 693.479 L804.134 693.479 L804.693 693.479 L805.253 693.479 L805.812 693.479 L806.371 693.479 L806.931 693.479 L807.49 693.479 L808.049 693.479 L808.608 693.479 L809.168 693.479 L809.727 693.479 L810.286 693.479 L810.845 693.479 L811.405 693.479 L811.964 693.479 L812.523 693.479 L813.082 693.479 L813.642 693.479 L814.201 693.479 L814.76 693.479 L815.319 693.479 L815.879 693.479 L816.438 693.479 L816.997 693.479 L817.556 693.479 L818.116 693.479 L818.675 693.479 L819.234 693.479 L819.793 693.479 L820.353 693.479 L820.912 693.479 L821.471 693.479 L822.03 693.479 L822.59 693.479 L823.149 693.479 L823.708 693.479 L824.267 693.479 L824.827 693.479 L825.386 693.479 L825.945 693.479 L826.504 693.479 L827.064 693.479 L827.623 693.479 L828.182 693.479 L828.741 693.479 L829.301 693.479 L829.86 693.479 L830.419 693.479 L830.978 693.479 L831.538 693.479 L832.097 693.479 L832.656 693.479 L833.215 693.479 L833.775 693.479 L834.334 693.479 L834.893 693.479 L835.452 693.479 L836.012 693.479 L836.571 693.479 L837.13 693.479 L837.689 693.479 L838.249 693.479 L838.808 693.479 L839.367 693.479 L839.926 693.479 L840.486 693.479 L841.045 693.479 L841.604 693.479 L842.163 693.479 L842.723 693.479 L843.282 693.479 L843.841 693.479 L844.4 693.479 L844.96 693.479 L845.519 693.479 L846.078 693.479 L846.637 693.479 L847.197 693.479 L847.756 693.479 L848.315 693.479 L848.874 693.479 L849.434 693.479 L849.993 693.479 L850.552 693.479 L851.111 693.479 L851.671 693.479 L852.23 693.479 L852.789 693.479 L853.348 693.479 L853.908 693.479 L854.467 693.479 L855.026 693.479 L855.585 693.479 L856.145 693.479 L856.704 693.479 L857.263 693.479 L857.822 693.479 L858.382 693.479 L858.941 693.479 L859.5 693.479 L860.059 693.479 L860.619 693.479 L861.178 693.479 L861.737 693.479 L862.296 693.479 L862.856 693.479 L863.415 693.479 L863.974 693.479 L864.533 693.479 L865.093 693.479 L865.652 693.479 L866.211 693.479 L866.77 693.479 L867.33 693.479 L867.889 693.479 L868.448 693.479 L869.007 693.479 L869.567 693.479 L870.126 693.479 L870.685 693.479 L871.244 693.479 L871.804 693.479 L872.363 693.479 L872.922 693.479 L873.481 693.479 L874.041 693.479 L874.6 693.479 L875.159 693.479 L875.718 693.479 L876.278 693.479 L876.837 693.479 L877.396 693.479 L877.955 693.479 L878.515 693.479 L879.074 693.479 L879.633 693.479 L880.192 693.479 L880.752 693.479 L881.311 693.479 L881.87 693.479 L882.429 693.479 L882.989 693.479 L883.548 693.479 L884.107 693.479 L884.666 693.479 L885.226 693.479 L885.785 693.479 L886.344 693.479 L886.903 693.479 L887.463 693.479 L888.022 693.479 L888.581 693.479 L889.14 693.479 L889.7 693.479 L890.259 693.479 L890.818 693.479 L891.377 693.479 L891.937 693.479 L892.496 693.479 L893.055 693.479 L893.614 693.479 L894.174 693.479 L894.733 693.479 L895.292 693.479 L895.851 693.479 L896.411 693.479 L896.97 693.479 L897.529 693.479 L898.088 693.479 L898.648 693.479 L899.207 693.479 L899.766 693.479 L900.325 693.479 L900.885 693.479 L901.444 693.479 L902.003 693.479 L902.562 693.479 L903.122 693.479 L903.681 693.479 L904.24 693.479 L904.799 693.479 L905.359 693.479 L905.918 693.479 L906.477 693.479 L907.036 693.479 L907.596 693.479 L908.155 693.479 L908.714 693.479 L909.273 693.479 L909.833 693.479 L910.392 693.479 L910.951 693.479 L911.51 693.479 L912.07 693.479 L912.629 693.479 L913.188 693.479 L913.747 693.479 L914.307 693.479 L914.866 693.479 L915.425 693.479 L915.984 693.479 L916.544 693.479 L917.103 693.479 L917.662 693.479 L918.221 693.479 L918.781 693.479 L919.34 693.479 L919.899 693.479 L920.458 693.479 L921.018 693.479 L921.577 693.479 L922.136 693.479 L922.695 693.479 L923.255 693.479 L923.814 693.479 L924.373 693.479 L924.932 693.479 L925.492 693.479 L926.051 693.479 L926.61 693.479 L927.169 693.479 L927.729 693.479 L928.288 693.479 L928.847 693.479 L929.406 693.479 L929.966 693.479 L930.525 693.479 L931.084 693.479 L931.644 693.479 L932.203 693.479 L932.762 693.479 L933.321 693.479 L933.881 693.479 L934.44 693.479 L934.999 693.479 L935.558 693.479 L936.118 693.479 L936.677 693.479 L937.236 693.479 L937.795 693.479 L938.355 693.479 L938.914 693.479 L939.473 693.479 L940.032 693.479 L940.592 693.479 L941.151 693.479 L941.71 693.479 L942.269 693.479 L942.829 693.479 L943.388 693.479 L943.947 693.479 L944.506 693.479 L945.066 693.479 L945.625 693.479 L946.184 693.479 L946.743 693.479 L947.303 693.479 L947.862 693.479 L948.421 693.479 L948.98 693.479 L949.54 693.479 L950.099 693.479 L950.658 693.479 L951.217 693.479 L951.777 693.479 L952.336 693.479 L952.895 693.479 L953.454 693.479 L954.014 693.479 L954.573 693.479 L955.132 693.479 L955.691 693.479 L956.251 693.479 L956.81 693.479 L957.369 693.479 L957.928 693.479 L958.488 693.479 L959.047 693.479 L959.606 693.479 L960.165 693.479 L960.725 693.479 L961.284 693.479 L961.843 693.479 L962.402 693.479 L962.962 693.479 L963.521 693.479 L964.08 693.479 L964.639 693.479 L965.199 693.479 L965.758 693.479 L966.317 693.479 L966.876 693.479 L967.436 693.479 L967.995 693.479 L968.554 693.479 L969.113 693.479 L969.673 693.479 L970.232 693.479 L970.791 693.479 L971.35 693.479 L971.91 693.479 L972.469 693.479 L973.028 693.479 L973.587 693.479 L974.147 693.479 L974.706 693.479 L975.265 693.479 L975.824 693.479 L976.384 693.479 L976.943 693.479 L977.502 693.479 L978.061 693.479 L978.621 693.479 L979.18 693.479 L979.739 693.479 L980.298 693.479 L980.858 693.479 L981.417 693.479 L981.976 693.479 L982.535 693.479 L983.095 693.479 L983.654 693.479 L984.213 693.479 L984.772 693.479 L985.332 693.479 L985.891 693.479 L986.45 693.479 L987.009 693.479 L987.569 693.479 L988.128 693.479 L988.687 693.479 L989.246 693.479 L989.806 693.479 L990.365 693.479 L990.924 693.479 L991.483 693.479 L992.043 693.479 L992.602 693.479 L993.161 693.479 L993.72 693.479 L994.28 693.479 L994.839 693.479 L995.398 693.479 L995.957 693.479 L996.517 693.479 L997.076 693.479 L997.635 693.479 L998.194 693.479 L998.754 693.479 L999.313 693.479 L999.872 693.479 L1000.43 693.479 L1000.99 693.479 L1001.55 693.479 L1002.11 693.479 L1002.67 693.479 L1003.23 693.479 L1003.79 693.479 L1004.35 693.479 L1004.91 693.479 L1005.46 693.479 L1006.02 693.479 L1006.58 693.479 L1007.14 693.479 L1007.7 693.479 L1008.26 693.479 L1008.82 693.479 L1009.38 693.479 L1009.94 693.479 L1010.5 693.479 L1011.06 693.479 L1011.62 693.479 L1012.18 693.479 L1012.73 693.479 L1013.29 693.479 L1013.85 693.479 L1014.41 693.479 L1014.97 693.479 L1015.53 693.479 L1016.09 693.479 L1016.65 693.479 L1017.21 693.479 L1017.77 693.479 L1018.33 693.479 L1018.89 693.479 L1019.45 693.479 L1020.01 693.479 L1020.56 693.479 L1021.12 693.479 L1021.68 693.479 L1022.24 693.479 L1022.8 693.479 L1023.36 693.479 L1023.92 693.479 L1024.48 693.479 L1025.04 693.479 L1025.6 693.479 L1026.16 693.479 L1026.72 693.479 L1027.28 693.479 L1027.83 693.479 L1028.39 693.479 L1028.95 693.479 L1029.51 693.479 L1030.07 693.479 L1030.63 693.479 L1031.19 693.479 L1031.75 693.479 L1032.31 693.479 L1032.87 693.479 L1033.43 693.479 L1033.99 693.479 L1034.55 693.479 L1035.1 693.479 L1035.66 693.479 L1036.22 693.479 L1036.78 693.479 L1037.34 693.479 L1037.9 693.479 L1038.46 693.479 L1039.02 693.479 L1039.58 693.479 L1040.14 693.479 L1040.7 693.479 L1041.26 693.479 L1041.82 693.479 L1042.38 693.479 L1042.93 693.479 L1043.49 693.479 L1044.05 693.479 L1044.61 693.479 L1045.17 693.479 L1045.73 693.479 L1046.29 693.479 L1046.85 693.479 L1047.41 693.479 L1047.97 693.479 L1048.53 693.479 L1049.09 693.479 L1049.65 693.479 L1050.2 693.479 L1050.76 693.479 L1051.32 693.479 L1051.88 693.479 L1052.44 693.479 L1053 693.479 L1053.56 693.479 L1054.12 693.479 L1054.68 693.479 L1055.24 693.479 L1055.8 693.479 L1056.36 693.479 L1056.92 693.479 L1057.48 693.479 L1058.03 693.479 L1058.59 693.479 L1059.15 693.479 L1059.71 693.479 L1060.27 693.479 L1060.83 693.479 L1061.39 693.479 L1061.95 693.479 L1062.51 693.479 L1063.07 693.479 L1063.63 693.479 L1064.19 693.479 L1064.75 693.479 L1065.3 693.479 L1065.86 693.479 L1066.42 693.479 L1066.98 693.479 L1067.54 693.479 L1068.1 693.479 L1068.66 693.479 L1069.22 693.479 L1069.78 693.479 L1070.34 693.479 L1070.9 693.479 L1071.46 693.479 L1072.02 693.479 L1072.57 693.479 L1073.13 693.479 L1073.69 693.479 L1074.25 693.479 L1074.81 693.479 L1075.37 693.479 L1075.93 693.479 L1076.49 693.479 L1077.05 693.479 L1077.61 693.479 L1078.17 693.479 L1078.73 693.479 L1079.29 693.479 L1079.85 693.479 L1080.4 693.479 L1080.96 693.479 L1081.52 693.479 L1082.08 693.479 L1082.64 693.479 L1083.2 693.479 L1083.76 693.479 L1084.32 693.479 L1084.88 693.479 L1085.44 693.479 L1086 693.479 L1086.56 693.479 L1087.12 693.479 L1087.67 693.479 L1088.23 693.479 L1088.79 693.479 L1089.35 693.479 L1089.91 693.479 L1090.47 693.479 L1091.03 693.479 L1091.59 693.479 L1092.15 693.479 L1092.71 693.479 L1093.27 693.479 L1093.83 693.479 L1094.39 693.479 L1094.94 693.479 L1095.5 693.479 L1096.06 693.479 L1096.62 693.479 L1097.18 693.479 L1097.74 693.479 L1098.3 693.479 L1098.86 693.479 L1099.42 693.479 L1099.98 693.479 L1100.54 693.479 L1101.1 693.479 L1101.66 693.479 L1102.22 693.479 L1102.77 693.479 L1103.33 693.479 L1103.89 693.479 L1104.45 693.479 L1105.01 693.479 L1105.57 693.479 L1106.13 693.479 L1106.69 693.479 L1107.25 693.479 L1107.81 693.479 L1108.37 693.479 L1108.93 693.479 L1109.49 693.479 L1110.04 693.479 L1110.6 693.479 L1111.16 693.479 L1111.72 693.479 L1112.28 693.479 L1112.84 693.479 L1113.4 693.479 L1113.96 693.479 L1114.52 693.479 L1115.08 693.479 L1115.64 693.479 L1116.2 693.479 L1116.76 693.479 L1117.31 693.479 L1117.87 693.479 L1118.43 693.479 L1118.99 693.479 L1119.55 693.479 L1120.11 693.479 L1120.67 693.479 L1121.23 693.479 L1121.79 693.479 L1122.35 693.479 L1122.91 693.479 L1123.47 693.479 L1124.03 693.479 L1124.59 693.479 L1125.14 693.479 L1125.7 693.479 L1126.26 693.479 L1126.82 693.479 L1127.38 693.479 L1127.94 693.479 L1128.5 693.479 L1129.06 693.479 L1129.62 693.479 L1130.18 693.479 L1130.74 693.479 L1131.3 693.479 L1131.86 693.479 L1132.41 693.479 L1132.97 693.479 L1133.53 693.479 L1134.09 693.479 L1134.65 693.479 L1135.21 693.479 L1135.77 693.479 L1136.33 693.479 L1136.89 693.479 L1137.45 693.479 L1138.01 693.479 L1138.57 693.479 L1139.13 693.479 L1139.68 693.479 L1140.24 693.479 L1140.8 693.479 L1141.36 693.479 L1141.92 693.479 L1142.48 693.479 L1143.04 693.479 L1143.6 693.479 L1144.16 693.479 L1144.72 693.479 L1145.28 693.479 L1145.84 693.479 L1146.4 693.479 L1146.96 693.479 L1147.51 693.479 L1148.07 693.479 L1148.63 693.479 L1149.19 693.479 L1149.75 693.479 L1150.31 693.479 L1150.87 693.479 L1151.43 693.479 L1151.99 693.479 L1152.55 693.479 L1153.11 693.479 L1153.67 693.479 L1154.23 693.479 L1154.78 693.479 L1155.34 693.479 L1155.9 693.479 L1156.46 693.479 L1157.02 693.479 L1157.58 693.479 L1158.14 693.479 L1158.7 693.479 L1159.26 693.479 L1159.82 693.479 L1160.38 693.479 L1160.94 693.479 L1161.5 693.479 L1162.05 693.479 L1162.61 693.479 L1163.17 693.479 L1163.73 693.479 L1164.29 693.479 L1164.85 693.479 L1165.41 693.479 L1165.97 693.479 L1166.53 693.479 L1167.09 693.479 L1167.65 693.479 L1168.21 693.479 L1168.77 693.479 L1169.33 693.479 L1169.88 693.479 L1170.44 693.479 L1171 693.479 L1171.56 693.479 L1172.12 693.479 L1172.68 693.479 L1173.24 693.479 L1173.8 693.479 L1174.36 693.479 L1174.92 693.479 L1175.48 693.479 L1176.04 693.479 L1176.6 693.479 L1177.15 693.479 L1177.71 693.479 L1178.27 693.479 L1178.83 693.479 L1179.39 693.479 L1179.95 693.479 L1180.51 693.479 L1181.07 693.479 L1181.63 693.479 L1182.19 693.479 L1182.75 693.479 L1183.31 693.479 L1183.87 693.479 L1184.43 693.479 L1184.98 693.479 L1185.54 693.479 L1186.1 693.479 L1186.66 693.479 L1187.22 693.479 L1187.78 693.479 L1188.34 693.479 L1188.9 693.479 L1189.46 693.479 L1190.02 693.479 L1190.58 693.479 L1191.14 693.479 L1191.7 693.479 L1192.25 693.479 L1192.81 693.479 L1193.37 693.479 L1193.93 693.479 L1194.49 693.479 L1195.05 693.479 L1195.61 693.479 L1196.17 693.479 L1196.73 693.479 L1197.29 693.479 L1197.85 693.479 L1198.41 693.479 L1198.97 693.479 L1199.52 693.479 L1200.08 693.479 L1200.64 693.479 L1201.2 693.479 L1201.76 693.479 L1202.32 693.479 L1202.88 693.479 L1203.44 693.479 L1204 693.479 L1204.56 693.479 L1205.12 693.479 L1205.68 693.479 L1206.24 693.479 L1206.8 693.479 L1207.35 693.479 L1207.91 693.479 L1208.47 693.479 L1209.03 693.479 L1209.59 693.479 L1210.15 693.479 L1210.71 693.479 L1211.27 693.479 L1211.83 693.479 L1212.39 693.479 L1212.95 693.479 L1213.51 693.479 L1214.07 693.479 L1214.62 693.479 L1215.18 693.479 L1215.74 693.479 L1216.3 693.479 L1216.86 693.479 L1217.42 693.479 L1217.98 693.479 L1218.54 693.479 L1219.1 693.479 L1219.66 693.479 L1220.22 693.479 L1220.78 693.479 L1221.34 693.479 L1221.89 693.479 L1222.45 693.479 L1223.01 693.479 L1223.57 693.479 L1224.13 693.479 L1224.69 693.479 L1225.25 693.479 L1225.81 693.479 L1226.37 693.479 L1226.93 693.479 L1227.49 693.479 L1228.05 693.479 L1228.61 693.479 L1229.17 693.479 L1229.72 693.479 L1230.28 693.479 L1230.84 693.479 L1231.4 693.479 L1231.96 693.479 L1232.52 693.479 L1233.08 693.479 L1233.64 693.479 L1234.2 693.479 L1234.76 693.479 L1235.32 693.479 L1235.88 693.479 L1236.44 693.479 L1236.99 693.479 L1237.55 693.479 L1238.11 693.479 L1238.67 693.479 L1239.23 693.479 L1239.79 693.479 L1240.35 693.479 L1240.91 693.479 L1241.47 693.479 L1242.03 693.479 L1242.59 693.479 L1243.15 693.479 L1243.71 693.479 L1244.26 693.479 L1244.82 693.479 L1245.38 693.479 L1245.94 693.479 L1246.5 693.479 L1247.06 693.479 L1247.62 693.479 L1248.18 693.479 L1248.74 693.479 L1249.3 693.479 L1249.86 693.479 L1250.42 693.479 L1250.98 693.479 L1251.54 693.479 L1252.09 693.479 L1252.65 693.479 L1253.21 693.479 L1253.77 693.479 L1254.33 693.479 L1254.89 693.479 L1255.45 693.479 L1256.01 693.479 L1256.57 693.479 L1257.13 693.479 L1257.69 693.479 L1258.25 693.479 L1258.81 693.479 L1259.36 693.479 L1259.92 693.479 L1260.48 693.479 L1261.04 693.479 L1261.6 693.479 L1262.16 693.479 L1262.72 693.479 L1263.28 693.479 L1263.84 693.479 L1264.4 693.479 L1264.96 693.479 L1265.52 693.479 L1266.08 693.479 L1266.63 693.479 L1267.19 693.479 L1267.75 693.479 L1268.31 693.479 L1268.87 693.479 L1269.43 693.479 L1269.99 693.479 L1270.55 693.479 L1271.11 693.479 L1271.67 693.479 L1272.23 693.479 L1272.79 693.479 L1273.35 693.479 L1273.91 693.479 L1274.46 693.479 L1275.02 693.479 L1275.58 693.479 L1276.14 693.479 L1276.7 693.479 L1277.26 693.479 L1277.82 693.479 L1278.38 693.479 L1278.94 693.479 L1279.5 693.479 L1280.06 693.479 L1280.62 693.479 L1281.18 693.479 L1281.73 693.479 L1282.29 693.479 L1282.85 693.479 L1283.41 693.479 L1283.97 693.479 L1284.53 693.479 L1285.09 693.479 L1285.65 693.479 L1286.21 693.479 L1286.77 693.479 L1287.33 693.479 L1287.89 693.479 L1288.45 693.479 L1289 693.479 L1289.56 693.479 L1290.12 693.479 L1290.68 693.479 L1291.24 693.479 L1291.8 693.479 L1292.36 693.479 L1292.92 693.479 L1293.48 693.479 L1294.04 693.479 L1294.6 693.479 L1295.16 693.479 L1295.72 693.479 L1296.28 693.479 L1296.83 693.479 L1297.39 693.479 L1297.95 693.479 L1298.51 693.479 L1299.07 693.479 L1299.63 693.479 L1300.19 693.479 L1300.75 693.479 L1301.31 693.479 L1301.87 693.479 L1302.43 693.479 L1302.99 693.479 L1303.55 693.479 L1304.1 693.479 L1304.66 693.479 L1305.22 693.479 L1305.78 693.479 L1306.34 693.479 L1306.9 693.479 L1307.46 693.479 L1308.02 693.479 L1308.58 693.479 L1309.14 693.479 L1309.7 693.479 L1310.26 693.479 L1310.82 693.479 L1311.38 693.479 L1311.93 693.479 L1312.49 693.479 L1313.05 693.479 L1313.61 693.479 L1314.17 693.479 L1314.73 693.479 L1315.29 693.479 L1315.85 693.479 L1316.41 693.479 L1316.97 693.479 L1317.53 693.479 L1318.09 693.479 L1318.65 693.479 L1319.2 693.479 L1319.76 693.479 L1320.32 693.479 L1320.88 693.479 L1321.44 693.479 L1322 693.479 L1322.56 693.479 L1323.12 693.479 L1323.68 693.479 L1324.24 693.479 L1324.8 693.479 L1325.36 693.479 L1325.92 693.479 L1326.47 693.479 L1327.03 693.479 L1327.59 693.479 L1328.15 693.479 L1328.71 693.479 L1329.27 693.479 L1329.83 693.479 L1330.39 693.479 L1330.95 693.479 L1331.51 693.479 L1332.07 693.479 L1332.63 693.479 L1333.19 693.479 L1333.75 693.479 L1334.3 693.479 L1334.86 693.479 L1335.42 693.479 L1335.98 693.479 L1336.54 693.479 L1337.1 693.479 L1337.66 693.479 L1338.22 693.479 L1338.78 693.479 L1339.34 693.479 L1339.9 693.479 L1340.46 693.479 L1341.02 693.479 L1341.57 693.479 L1342.13 693.479 L1342.69 693.479 L1343.25 693.479 L1343.81 693.479 L1344.37 693.479 L1344.93 693.479 L1345.49 693.479 L1346.05 693.479 L1346.61 693.479 L1347.17 693.479 L1347.73 693.479 L1348.29 693.479 L1348.84 693.479 L1349.4 693.479 L1349.96 693.479 L1350.52 693.479 L1351.08 693.479 L1351.64 693.479 L1352.2 693.479 L1352.76 693.479 L1353.32 693.479 L1353.88 693.479 L1354.44 693.479 L1355 693.479 L1355.56 693.479 L1356.12 693.479 L1356.67 693.479 L1357.23 693.479 L1357.79 693.479 L1358.35 693.479 L1358.91 693.479 L1359.47 693.479 L1360.03 693.479 L1360.59 693.479 L1361.15 693.479 L1361.71 693.479 L1362.27 693.479 L1362.83 693.479 L1363.39 693.479 L1363.94 693.479 L1364.5 693.479 L1365.06 693.479 L1365.62 693.479 L1366.18 693.479 L1366.74 693.479 L1367.3 693.479 L1367.86 693.479 L1368.42 693.479 L1368.98 693.479 L1369.54 693.479 L1370.1 693.479 L1370.66 693.479 L1371.21 693.479 L1371.77 693.479 L1372.33 693.479 L1372.89 693.479 L1373.45 693.479 L1374.01 693.479 L1374.57 693.479 L1375.13 693.479 L1375.69 693.479 L1376.25 693.479 L1376.81 693.479 L1377.37 693.479 L1377.93 693.479 L1378.49 693.479 L1379.04 693.479 L1379.6 693.479 L1380.16 693.479 L1380.72 693.479 L1381.28 693.479 L1381.84 693.479 L1382.4 693.479 L1382.96 693.479 L1383.52 693.479 L1384.08 693.479 L1384.64 693.479 L1385.2 693.479 L1385.76 693.479 L1386.31 693.479 L1386.87 693.479 L1387.43 693.479 L1387.99 693.479 L1388.55 693.479 L1389.11 693.479 L1389.67 693.479 L1390.23 693.479 L1390.79 693.479 L1391.35 693.479 L1391.91 693.479 L1392.47 693.479 L1393.03 693.479 L1393.58 693.479 L1394.14 693.479 L1394.7 693.479 L1395.26 693.479 L1395.82 693.479 L1396.38 693.479 L1396.94 693.479 L1397.5 693.479 L1398.06 693.479 L1398.62 693.479 L1399.18 693.479 L1399.74 693.479 L1400.3 693.479 L1400.86 693.479 L1401.41 693.479 L1401.97 693.479 L1402.53 693.479 L1403.09 693.479 L1403.65 693.479 L1404.21 693.479 L1404.77 693.479 L1405.33 693.479 L1405.89 693.479 L1406.45 693.479 L1407.01 693.479 L1407.57 693.479 L1408.13 693.479 L1408.68 693.479 L1409.24 693.479 L1409.8 693.479 L1410.36 693.479 L1410.92 693.479 L1411.48 693.479 L1412.04 693.479 L1412.6 693.479 L1413.16 693.479 L1413.72 693.479 L1414.28 693.479 L1414.84 693.479 L1415.4 693.479 L1415.95 693.479 L1416.51 693.479 L1417.07 693.479 L1417.63 693.479 L1418.19 693.479 L1418.75 693.479 L1419.31 693.479 L1419.87 693.479 L1420.43 693.479 L1420.99 693.479 L1421.55 693.479 L1422.11 693.479 L1422.67 693.479 L1423.23 693.479 L1423.78 693.479 L1424.34 693.479 L1424.9 693.479 L1425.46 693.479 L1426.02 693.479 L1426.58 693.479 L1427.14 693.479 L1427.7 693.479 L1428.26 693.479 L1428.82 693.479 L1429.38 693.479 L1429.94 693.479 L1430.5 693.479 L1431.05 693.479 L1431.61 693.479 L1432.17 693.479 L1432.73 693.479 L1433.29 693.479 L1433.85 693.479 L1434.41 693.479 L1434.97 693.479 L1435.53 693.479 L1436.09 693.479 L1436.65 693.479 L1437.21 693.479 L1437.77 693.479 L1438.33 693.479 L1438.88 693.479 L1439.44 693.479 L1440 693.479 L1440.56 693.479 L1441.12 693.479 L1441.68 693.479 L1442.24 693.479 L1442.8 693.479 L1443.36 693.479 L1443.92 693.479 L1444.48 693.479 L1445.04 693.479 L1445.6 693.479 L1446.15 693.479 L1446.71 693.479 L1447.27 693.479 L1447.83 693.479 L1448.39 693.479 L1448.95 693.479 L1449.51 693.479 L1450.07 693.479 L1450.63 693.479 L1451.19 693.479 L1451.75 693.479 L1452.31 693.479 L1452.87 693.479 L1453.42 693.479 L1453.98 693.479 L1454.54 693.479 L1455.1 693.479 L1455.66 693.479 L1456.22 693.479 L1456.78 693.479 L1457.34 693.479 L1457.9 693.479 L1458.46 693.479 L1459.02 693.479 L1459.58 693.479 L1460.14 693.479 L1460.7 693.479 L1461.25 693.479 L1461.81 693.479 L1462.37 693.479 L1462.93 693.479 L1463.49 693.479 L1464.05 693.479 L1464.61 693.479 L1465.17 693.479 L1465.73 693.479 L1466.29 693.479 L1466.85 693.479 L1467.41 693.479 L1467.97 693.479 L1468.52 693.479 L1469.08 693.479 L1469.64 693.479 L1470.2 693.479 L1470.76 693.479 L1471.32 693.479 L1471.88 693.479 L1472.44 693.479 L1473 693.479 L1473.56 693.479 L1474.12 693.479 L1474.68 693.479 L1475.24 693.479 L1475.79 693.479 L1476.35 693.479 L1476.91 693.479 L1477.47 693.479 L1478.03 693.479 L1478.59 693.479 L1479.15 693.479 L1479.71 693.479 L1480.27 693.479 L1480.83 693.479 L1481.39 693.479 L1481.95 693.479 L1482.51 693.479 L1483.07 693.479 L1483.62 693.479 L1484.18 693.479 L1484.74 693.479 L1485.3 693.479 L1485.86 693.479 L1486.42 693.479 L1486.98 693.479 L1487.54 693.479 L1488.1 693.479 L1488.66 693.479 L1489.22 693.479 L1489.78 693.479 L1490.34 693.479 L1490.89 693.479 L1491.45 693.479 L1492.01 693.479 L1492.57 693.479 L1493.13 693.479 L1493.69 693.479 L1494.25 693.479 L1494.81 693.479 L1495.37 693.479 L1495.93 693.479 L1496.49 693.479 L1497.05 693.479 L1497.61 693.479 L1498.16 693.479 L1498.72 693.479 L1499.28 693.479 L1499.84 693.479 L1500.4 693.479 L1500.96 693.479 L1501.52 693.479 L1502.08 693.479 L1502.64 693.479 L1503.2 693.479 L1503.76 693.479 L1504.32 693.479 L1504.88 693.479 L1505.44 693.479 L1505.99 693.479 L1506.55 693.479 L1507.11 693.479 L1507.67 693.479 L1508.23 693.479 L1508.79 693.479 L1509.35 693.479 L1509.91 693.479 L1510.47 693.479 L1511.03 693.479 L1511.59 693.479 L1512.15 693.479 L1512.71 693.479 L1513.26 693.479 L1513.82 693.479 L1514.38 693.479 L1514.94 693.479 L1515.5 693.479 L1516.06 693.479 L1516.62 693.479 L1517.18 693.479 L1517.74 693.479 L1518.3 693.479 L1518.86 693.479 L1519.42 693.479 L1519.98 693.479 L1520.53 693.479 L1521.09 693.479 L1521.65 693.479 L1522.21 693.479 L1522.77 693.479 L1523.33 693.479 L1523.89 693.479 L1524.45 693.479 L1525.01 693.479 L1525.57 693.479 L1526.13 693.479 L1526.69 693.479 L1527.25 693.479 L1527.81 693.479 L1528.36 693.479 L1528.92 693.479 L1529.48 693.479 L1530.04 693.479 L1530.6 693.479 L1531.16 693.479 L1531.72 693.479 L1532.28 693.479 L1532.84 693.479 L1533.4 693.479 L1533.96 693.479 L1534.52 693.479 L1535.08 693.479 L1535.63 693.479 L1536.19 693.479 L1536.75 693.479 L1537.31 693.479 L1537.87 693.479 L1538.43 693.479 L1538.99 693.479 L1539.55 693.479 L1540.11 693.479 L1540.67 693.479 L1541.23 693.479 L1541.79 693.479 L1542.35 693.479 L1542.9 693.479 L1543.46 693.479 L1544.02 693.479 L1544.58 693.479 L1545.14 693.479 L1545.7 693.479 L1546.26 693.479 L1546.82 693.479 L1547.38 693.479 L1547.94 693.479 L1548.5 693.479 L1549.06 693.479 L1549.62 693.479 L1550.18 693.479 L1550.73 693.479 L1551.29 693.479 L1551.85 693.479 L1552.41 693.479 L1552.97 693.479 L1553.53 693.479 L1554.09 693.479 L1554.65 693.479 L1555.21 693.479 L1555.77 693.479 L1556.33 693.479 L1556.89 693.479 L1557.45 693.479 L1558 693.479 L1558.56 693.479 L1559.12 693.479 L1559.68 693.479 L1560.24 693.479 L1560.8 693.479 L1561.36 693.479 L1561.92 693.479 L1562.48 693.479 L1563.04 693.479 L1563.6 693.479 L1564.16 693.479 L1564.72 693.479 L1565.28 693.479 L1565.83 693.479 L1566.39 693.479 L1566.95 693.479 L1567.51 693.479 L1568.07 693.479 L1568.63 693.479 L1569.19 693.479 L1569.75 693.479 L1570.31 693.479 L1570.87 693.479 L1571.43 693.479 L1571.99 693.479 L1572.55 693.479 L1573.1 693.479 L1573.66 693.479 L1574.22 693.479 L1574.78 693.479 L1575.34 693.479 L1575.9 693.479 L1576.46 693.479 L1577.02 693.479 L1577.58 693.479 L1578.14 693.479 L1578.7 693.479 L1579.26 693.479 L1579.82 693.479 L1580.37 693.479 L1580.93 693.479 L1581.49 693.479 L1582.05 693.479 L1582.61 693.479 L1583.17 693.479 L1583.73 693.479 L1584.29 693.479 L1584.85 693.479 L1585.41 693.479 L1585.97 693.479 L1586.53 693.479 L1587.09 693.479 L1587.65 693.479 L1588.2 693.479 L1588.76 693.479 L1589.32 693.479 L1589.88 693.479 L1590.44 693.479 L1591 693.479 L1591.56 693.479 L1592.12 693.479 L1592.68 693.479 L1593.24 693.479 L1593.8 693.479 L1594.36 693.479 L1594.92 693.479 L1595.47 693.479 L1596.03 693.479 L1596.59 693.479 L1597.15 693.479 L1597.71 693.479 L1598.27 693.479 L1598.83 693.479 L1599.39 693.479 L1599.95 693.479 L1600.51 693.479 L1601.07 693.479 L1601.63 693.479 L1602.19 693.479 L1602.74 693.479 L1603.3 693.479 L1603.86 693.479 L1604.42 693.479 L1604.98 693.479 L1605.54 693.479 L1606.1 693.479 L1606.66 693.479 L1607.22 693.479 L1607.78 693.479 L1608.34 693.479 L1608.9 693.479 L1609.46 693.479 L1610.02 693.479 L1610.57 693.479 L1611.13 693.479 L1611.69 693.479 L1612.25 693.479 L1612.81 693.479 L1613.37 693.479 L1613.93 693.479 L1614.49 693.479 L1615.05 693.479 L1615.61 693.479 L1616.17 693.479 L1616.73 693.479 L1617.29 693.479 L1617.84 693.479 L1618.4 693.479 L1618.96 693.479 L1619.52 693.479 L1620.08 693.479 L1620.64 693.479 L1621.2 693.479 L1621.76 693.479 L1622.32 693.479 L1622.88 693.479 L1623.44 693.479 L1624 693.479 L1624.56 693.479 L1625.11 693.479 L1625.67 693.479 L1626.23 693.479 L1626.79 693.479 L1627.35 693.479 L1627.91 693.479 L1628.47 693.479 L1629.03 693.479 L1629.59 693.479 L1630.15 693.479 L1630.71 693.479 L1631.27 693.479 L1631.83 693.479 L1632.39 693.479 L1632.94 693.479 L1633.5 693.479 L1634.06 693.479 L1634.62 693.479 L1635.18 693.479 L1635.74 693.479 L1636.3 693.479 L1636.86 693.479 L1637.42 693.479 L1637.98 693.479 L1638.54 693.479 L1639.1 693.479 L1639.66 693.479 L1640.21 693.479 L1640.77 693.479 L1641.33 693.479 L1641.89 693.479 L1642.45 693.479 L1643.01 693.479 L1643.57 693.479 L1644.13 693.479 L1644.69 693.479 L1645.25 693.479 L1645.81 693.479 L1646.37 693.479 L1646.93 693.479 L1647.48 693.479 L1648.04 693.479 L1648.6 693.479 L1649.16 693.479 L1649.72 693.479 L1650.28 693.479 L1650.84 693.479 L1651.4 693.479 L1651.96 693.479 L1652.52 693.479 L1653.08 693.479 L1653.64 693.479 L1654.2 693.479 L1654.76 693.479 L1655.31 693.479 L1655.87 693.479 L1656.43 693.479 L1656.99 693.479 L1657.55 693.479 L1658.11 693.479 L1658.67 693.479 L1659.23 693.479 L1659.79 693.479 L1660.35 693.479 L1660.91 693.479 L1661.47 693.479 L1662.03 693.479 L1662.58 693.479 L1663.14 693.479 L1663.7 693.479 L1664.26 693.479 L1664.82 693.479 L1665.38 693.479 L1665.94 693.479 L1666.5 693.479 L1667.06 693.479 L1667.62 693.479 L1668.18 693.479 L1668.74 693.479 L1669.3 693.479 L1669.85 693.479 L1670.41 693.479 L1670.97 693.479 L1671.53 693.479 L1672.09 693.479 L1672.65 693.479 L1673.21 693.479 L1673.77 693.479 L1674.33 693.479 L1674.89 693.479 L1675.45 693.479 L1676.01 693.479 L1676.57 693.479 L1677.13 693.479 L1677.68 693.479 L1678.24 693.479 L1678.8 693.479 L1679.36 693.479 L1679.92 693.479 L1680.48 693.479 L1681.04 693.479 L1681.6 693.479 L1682.16 693.479 L1682.72 693.479 L1683.28 693.479 L1683.84 693.479 L1684.4 693.479 L1684.95 693.479 L1685.51 693.479 L1686.07 693.479 L1686.63 693.479 L1687.19 693.479 L1687.75 693.479 L1688.31 693.479 L1688.87 693.479 L1689.43 693.479 L1689.99 693.479 L1690.55 693.479 L1691.11 693.479 L1691.67 693.479 L1692.23 693.479 L1692.78 693.479 L1693.34 693.479 L1693.9 693.479 L1694.46 693.479 L1695.02 693.479 L1695.58 693.479 L1696.14 693.479 L1696.7 693.479 L1697.26 693.479 L1697.82 693.479 L1698.38 693.479 L1698.94 693.479 L1699.5 693.479 L1700.05 693.479 L1700.61 693.479 L1701.17 693.479 L1701.73 693.479 L1702.29 693.479 L1702.85 693.479 L1703.41 693.479 L1703.97 693.479 L1704.53 693.479 L1705.09 693.479 L1705.65 693.479 L1706.21 693.479 L1706.77 693.479 L1707.32 693.479 L1707.88 693.479 L1708.44 693.479 L1709 693.479 L1709.56 693.479 L1710.12 693.479 L1710.68 693.479 L1711.24 693.479 L1711.8 693.479 L1712.36 693.479 L1712.92 693.479 L1713.48 693.479 L1714.04 693.479 L1714.6 693.479 L1715.15 693.479 L1715.71 693.479 L1716.27 693.479 L1716.83 693.479 L1717.39 693.479 L1717.95 693.479 L1718.51 693.479 L1719.07 693.479 L1719.63 693.479 L1720.19 693.479 L1720.75 693.479 L1721.31 693.479 L1721.87 693.479 L1722.42 693.479 L1722.98 693.479 L1723.54 693.479 L1724.1 693.479 L1724.66 693.479 L1725.22 693.479 L1725.78 693.479 L1726.34 693.479 L1726.9 693.479 L1727.46 693.479 L1728.02 693.479 L1728.58 693.479 L1729.14 693.479 L1729.69 693.479 L1730.25 693.479 L1730.81 693.479 L1731.37 693.479 L1731.93 693.479 L1732.49 693.479 L1733.05 693.479 L1733.61 693.479 L1734.17 693.479 L1734.73 693.479 L1735.29 693.479 L1735.85 693.479 L1736.41 693.479 L1736.97 693.479 L1737.52 693.479 L1738.08 693.479 L1738.64 693.479 L1739.2 693.479 L1739.76 693.479 L1740.32 693.479 L1740.88 693.479 L1741.44 693.479 L1742 693.479 L1742.56 693.479 L1743.12 693.479 L1743.68 693.479 L1744.24 693.479 L1744.79 693.479 L1745.35 693.479 L1745.91 693.479 L1746.47 693.479 L1747.03 693.479 L1747.59 693.479 L1748.15 693.479 L1748.71 693.479 L1749.27 693.479 L1749.83 693.479 L1750.39 693.479 L1750.95 693.479 L1751.51 693.479 L1752.06 693.479 L1752.62 693.479 L1753.18 693.479 L1753.74 693.479 L1754.3 693.479 L1754.86 693.479 L1755.42 693.479 L1755.98 693.479 L1756.54 693.479 L1757.1 693.479 L1757.66 693.479 L1758.22 693.479 L1758.78 693.479 L1759.34 693.479 L1759.89 693.479 L1760.45 693.479 L1761.01 693.479 L1761.57 693.479 L1762.13 693.479 L1762.69 693.479 L1763.25 693.479 L1763.81 693.479 L1764.37 693.479 L1764.93 693.479 L1765.49 693.479 L1766.05 693.479 L1766.61 693.479 L1767.16 693.479 L1767.72 693.479 L1768.28 693.479 L1768.84 693.479 L1769.4 693.479 L1769.96 693.479 L1770.52 693.479 L1771.08 693.479 L1771.64 693.479 L1772.2 693.479 L1772.76 693.479 L1773.32 693.479 L1773.88 693.479 L1774.43 693.479 L1774.99 693.479 L1775.55 693.479 L1776.11 693.479 L1776.67 693.479 L1777.23 693.479 L1777.79 693.479 L1778.35 693.479 L1778.91 693.479 L1779.47 693.479 L1780.03 693.479 L1780.59 693.479 L1781.15 693.479 L1781.71 693.479 L1782.26 693.479 L1782.82 693.479 L1783.38 693.479 L1783.94 693.479 L1784.5 693.479 L1785.06 693.479 L1785.62 693.479 L1786.18 693.479 L1786.74 693.479 L1787.3 693.479 L1787.86 693.479 L1788.42 693.479 L1788.98 693.479 L1789.53 693.479 L1790.09 693.479 L1790.65 693.479 L1791.21 693.479 L1791.77 693.479 L1792.33 693.479 L1792.89 693.479 L1793.45 693.479 L1794.01 693.479 L1794.57 693.479 L1795.13 693.479 L1795.69 693.479 L1796.25 693.479 L1796.8 693.479 L1797.36 693.479 L1797.92 693.479 L1798.48 693.479 L1799.04 693.479 L1799.6 693.479 L1800.16 693.479 L1800.72 693.479 L1801.28 693.479 L1801.84 693.479 L1802.4 693.479 L1802.96 693.479 L1803.52 693.479 L1804.08 693.479 L1804.63 693.479 L1805.19 693.479 L1805.75 693.479 L1806.31 693.479 L1806.87 693.479 L1807.43 693.479 L1807.99 693.479 L1808.55 693.479 L1809.11 693.479 L1809.67 693.479 L1810.23 693.479 L1810.79 693.479 L1811.35 693.479 L1811.9 693.479 L1812.46 693.479 L1813.02 693.479 L1813.58 693.479 L1814.14 693.479 L1814.7 693.479 L1815.26 693.479 L1815.82 693.479 L1816.38 693.479 L1816.94 693.479 L1817.5 693.479 L1818.06 693.479 L1818.62 693.479 L1819.18 693.479 L1819.73 693.479 L1820.29 693.479 L1820.85 693.479 L1821.41 693.479 L1821.97 693.479 L1822.53 693.479 L1823.09 693.479 L1823.65 693.479 L1824.21 693.479 L1824.77 693.479 L1825.33 693.479 L1825.89 693.479 L1826.45 693.479 L1827 693.479 L1827.56 693.479 L1828.12 693.479 L1828.68 693.479 L1829.24 693.479 L1829.8 693.479 L1830.36 693.479 L1830.92 693.479 L1831.48 693.479 L1832.04 693.479 L1832.6 693.479 L1833.16 693.479 L1833.72 693.479 L1834.27 693.479 L1834.83 693.479 L1835.39 693.479 L1835.95 693.479 L1836.51 693.479 L1837.07 693.479 L1837.63 693.479 L1838.19 693.479 L1838.19 683.398 L1837.63 683.398 L1837.07 683.398 L1836.51 683.398 L1835.95 683.398 L1835.39 683.398 L1834.83 683.398 L1834.27 683.398 L1833.72 683.398 L1833.16 683.398 L1832.6 683.398 L1832.04 683.398 L1831.48 683.398 L1830.92 683.398 L1830.36 683.398 L1829.8 683.398 L1829.24 683.398 L1828.68 683.398 L1828.12 683.398 L1827.56 683.398 L1827 683.398 L1826.45 683.398 L1825.89 683.398 L1825.33 683.398 L1824.77 683.398 L1824.21 683.398 L1823.65 683.398 L1823.09 683.398 L1822.53 683.398 L1821.97 683.398 L1821.41 683.398 L1820.85 683.398 L1820.29 683.398 L1819.73 683.398 L1819.18 683.398 L1818.62 683.398 L1818.06 683.398 L1817.5 683.398 L1816.94 683.398 L1816.38 683.398 L1815.82 683.398 L1815.26 683.398 L1814.7 683.398 L1814.14 683.398 L1813.58 683.398 L1813.02 683.398 L1812.46 683.398 L1811.9 683.398 L1811.35 683.398 L1810.79 683.398 L1810.23 683.398 L1809.67 683.398 L1809.11 683.398 L1808.55 683.398 L1807.99 683.398 L1807.43 683.398 L1806.87 683.398 L1806.31 683.398 L1805.75 683.398 L1805.19 683.398 L1804.63 683.398 L1804.08 683.398 L1803.52 683.398 L1802.96 683.398 L1802.4 683.398 L1801.84 683.398 L1801.28 683.398 L1800.72 683.398 L1800.16 683.398 L1799.6 683.398 L1799.04 683.398 L1798.48 683.398 L1797.92 683.398 L1797.36 683.398 L1796.8 683.398 L1796.25 683.398 L1795.69 683.398 L1795.13 683.398 L1794.57 683.398 L1794.01 683.398 L1793.45 683.398 L1792.89 683.398 L1792.33 683.398 L1791.77 683.398 L1791.21 683.398 L1790.65 683.398 L1790.09 683.398 L1789.53 683.398 L1788.98 683.398 L1788.42 683.398 L1787.86 683.398 L1787.3 683.398 L1786.74 683.398 L1786.18 683.398 L1785.62 683.398 L1785.06 683.398 L1784.5 683.398 L1783.94 683.398 L1783.38 683.398 L1782.82 683.398 L1782.26 683.398 L1781.71 683.398 L1781.15 683.398 L1780.59 683.398 L1780.03 683.398 L1779.47 683.398 L1778.91 683.398 L1778.35 683.398 L1777.79 683.398 L1777.23 683.398 L1776.67 683.398 L1776.11 683.398 L1775.55 683.398 L1774.99 683.398 L1774.43 683.398 L1773.88 683.398 L1773.32 683.398 L1772.76 683.398 L1772.2 683.398 L1771.64 683.398 L1771.08 683.398 L1770.52 683.398 L1769.96 683.398 L1769.4 683.398 L1768.84 683.398 L1768.28 683.398 L1767.72 683.398 L1767.16 683.398 L1766.61 683.398 L1766.05 683.398 L1765.49 683.398 L1764.93 683.398 L1764.37 683.398 L1763.81 683.398 L1763.25 683.398 L1762.69 683.398 L1762.13 683.398 L1761.57 683.398 L1761.01 683.398 L1760.45 683.398 L1759.89 683.398 L1759.34 683.398 L1758.78 683.398 L1758.22 683.398 L1757.66 683.398 L1757.1 683.398 L1756.54 683.398 L1755.98 683.398 L1755.42 683.398 L1754.86 683.398 L1754.3 683.398 L1753.74 683.398 L1753.18 683.398 L1752.62 683.398 L1752.06 683.398 L1751.51 683.398 L1750.95 683.398 L1750.39 683.398 L1749.83 683.398 L1749.27 683.398 L1748.71 683.398 L1748.15 683.398 L1747.59 683.398 L1747.03 683.398 L1746.47 683.398 L1745.91 683.398 L1745.35 683.398 L1744.79 683.398 L1744.24 683.398 L1743.68 683.398 L1743.12 683.398 L1742.56 683.398 L1742 683.398 L1741.44 683.398 L1740.88 683.398 L1740.32 683.398 L1739.76 683.398 L1739.2 683.398 L1738.64 683.398 L1738.08 683.398 L1737.52 683.398 L1736.97 683.398 L1736.41 683.398 L1735.85 683.398 L1735.29 683.398 L1734.73 683.398 L1734.17 683.398 L1733.61 683.398 L1733.05 683.398 L1732.49 683.398 L1731.93 683.398 L1731.37 683.398 L1730.81 683.398 L1730.25 683.398 L1729.69 683.398 L1729.14 683.398 L1728.58 683.398 L1728.02 683.398 L1727.46 683.398 L1726.9 683.398 L1726.34 683.398 L1725.78 683.398 L1725.22 683.398 L1724.66 683.398 L1724.1 683.398 L1723.54 683.398 L1722.98 683.398 L1722.42 683.398 L1721.87 683.398 L1721.31 683.398 L1720.75 683.398 L1720.19 683.398 L1719.63 683.398 L1719.07 683.398 L1718.51 683.398 L1717.95 683.398 L1717.39 683.398 L1716.83 683.398 L1716.27 683.398 L1715.71 683.398 L1715.15 683.398 L1714.6 683.398 L1714.04 683.398 L1713.48 683.398 L1712.92 683.398 L1712.36 683.398 L1711.8 683.398 L1711.24 683.398 L1710.68 683.398 L1710.12 683.398 L1709.56 683.398 L1709 683.398 L1708.44 683.398 L1707.88 683.398 L1707.32 683.398 L1706.77 683.398 L1706.21 683.398 L1705.65 683.398 L1705.09 683.398 L1704.53 683.398 L1703.97 683.398 L1703.41 683.398 L1702.85 683.398 L1702.29 683.398 L1701.73 683.398 L1701.17 683.398 L1700.61 683.398 L1700.05 683.398 L1699.5 683.398 L1698.94 683.398 L1698.38 683.398 L1697.82 683.398 L1697.26 683.398 L1696.7 683.398 L1696.14 683.398 L1695.58 683.398 L1695.02 683.398 L1694.46 683.398 L1693.9 683.398 L1693.34 683.398 L1692.78 683.398 L1692.23 683.398 L1691.67 683.398 L1691.11 683.398 L1690.55 683.398 L1689.99 683.398 L1689.43 683.398 L1688.87 683.398 L1688.31 683.398 L1687.75 683.398 L1687.19 683.398 L1686.63 683.398 L1686.07 683.398 L1685.51 683.398 L1684.95 683.398 L1684.4 683.398 L1683.84 683.398 L1683.28 683.398 L1682.72 683.398 L1682.16 683.398 L1681.6 683.398 L1681.04 683.398 L1680.48 683.398 L1679.92 683.398 L1679.36 683.398 L1678.8 683.398 L1678.24 683.398 L1677.68 683.398 L1677.13 683.398 L1676.57 683.398 L1676.01 683.398 L1675.45 683.398 L1674.89 683.398 L1674.33 683.398 L1673.77 683.398 L1673.21 683.398 L1672.65 683.398 L1672.09 683.398 L1671.53 683.398 L1670.97 683.398 L1670.41 683.398 L1669.85 683.398 L1669.3 683.398 L1668.74 683.398 L1668.18 683.398 L1667.62 683.398 L1667.06 683.398 L1666.5 683.398 L1665.94 683.398 L1665.38 683.398 L1664.82 683.398 L1664.26 683.398 L1663.7 683.398 L1663.14 683.398 L1662.58 683.398 L1662.03 683.398 L1661.47 683.398 L1660.91 683.398 L1660.35 683.398 L1659.79 683.398 L1659.23 683.398 L1658.67 683.398 L1658.11 683.398 L1657.55 683.398 L1656.99 683.398 L1656.43 683.398 L1655.87 683.398 L1655.31 683.398 L1654.76 683.398 L1654.2 683.398 L1653.64 683.398 L1653.08 683.398 L1652.52 683.398 L1651.96 683.398 L1651.4 683.398 L1650.84 683.398 L1650.28 683.398 L1649.72 683.398 L1649.16 683.398 L1648.6 683.398 L1648.04 683.398 L1647.48 683.398 L1646.93 683.398 L1646.37 683.398 L1645.81 683.398 L1645.25 683.398 L1644.69 683.398 L1644.13 683.398 L1643.57 683.398 L1643.01 683.398 L1642.45 683.398 L1641.89 683.398 L1641.33 683.398 L1640.77 683.398 L1640.21 683.398 L1639.66 683.398 L1639.1 683.398 L1638.54 683.398 L1637.98 683.398 L1637.42 683.398 L1636.86 683.398 L1636.3 683.398 L1635.74 683.398 L1635.18 683.398 L1634.62 683.398 L1634.06 683.398 L1633.5 683.398 L1632.94 683.398 L1632.39 683.398 L1631.83 683.398 L1631.27 683.398 L1630.71 683.398 L1630.15 683.398 L1629.59 683.398 L1629.03 683.398 L1628.47 683.398 L1627.91 683.398 L1627.35 683.398 L1626.79 683.398 L1626.23 683.398 L1625.67 683.398 L1625.11 683.398 L1624.56 683.398 L1624 683.398 L1623.44 683.398 L1622.88 683.398 L1622.32 683.398 L1621.76 683.398 L1621.2 683.398 L1620.64 683.398 L1620.08 683.398 L1619.52 683.398 L1618.96 683.398 L1618.4 683.398 L1617.84 683.398 L1617.29 683.398 L1616.73 683.398 L1616.17 683.398 L1615.61 683.398 L1615.05 683.398 L1614.49 683.398 L1613.93 683.398 L1613.37 683.398 L1612.81 683.398 L1612.25 683.398 L1611.69 683.398 L1611.13 683.398 L1610.57 683.398 L1610.02 683.398 L1609.46 683.398 L1608.9 683.398 L1608.34 683.398 L1607.78 683.398 L1607.22 683.398 L1606.66 683.398 L1606.1 683.398 L1605.54 683.398 L1604.98 683.398 L1604.42 683.398 L1603.86 683.398 L1603.3 683.398 L1602.74 683.398 L1602.19 683.398 L1601.63 683.398 L1601.07 683.398 L1600.51 683.398 L1599.95 683.398 L1599.39 683.398 L1598.83 683.398 L1598.27 683.398 L1597.71 683.398 L1597.15 683.398 L1596.59 683.398 L1596.03 683.398 L1595.47 683.398 L1594.92 683.398 L1594.36 683.398 L1593.8 683.398 L1593.24 683.398 L1592.68 683.398 L1592.12 683.398 L1591.56 683.398 L1591 683.398 L1590.44 683.398 L1589.88 683.398 L1589.32 683.398 L1588.76 683.398 L1588.2 683.398 L1587.65 683.398 L1587.09 683.398 L1586.53 683.398 L1585.97 683.398 L1585.41 683.398 L1584.85 683.398 L1584.29 683.398 L1583.73 683.398 L1583.17 683.398 L1582.61 683.398 L1582.05 683.398 L1581.49 683.398 L1580.93 683.398 L1580.37 683.398 L1579.82 683.398 L1579.26 683.398 L1578.7 683.398 L1578.14 683.398 L1577.58 683.398 L1577.02 683.398 L1576.46 683.398 L1575.9 683.398 L1575.34 683.398 L1574.78 683.398 L1574.22 683.398 L1573.66 683.398 L1573.1 683.398 L1572.55 683.398 L1571.99 683.398 L1571.43 683.398 L1570.87 683.398 L1570.31 683.398 L1569.75 683.398 L1569.19 683.398 L1568.63 683.398 L1568.07 683.398 L1567.51 683.398 L1566.95 683.398 L1566.39 683.398 L1565.83 683.398 L1565.28 683.398 L1564.72 683.398 L1564.16 683.398 L1563.6 683.398 L1563.04 683.398 L1562.48 683.398 L1561.92 683.398 L1561.36 683.398 L1560.8 683.398 L1560.24 683.398 L1559.68 683.398 L1559.12 683.398 L1558.56 683.398 L1558 683.398 L1557.45 683.398 L1556.89 683.398 L1556.33 683.398 L1555.77 683.398 L1555.21 683.398 L1554.65 683.398 L1554.09 683.398 L1553.53 683.398 L1552.97 683.398 L1552.41 683.398 L1551.85 683.398 L1551.29 683.398 L1550.73 683.398 L1550.18 683.398 L1549.62 683.398 L1549.06 683.398 L1548.5 683.398 L1547.94 683.398 L1547.38 683.398 L1546.82 683.398 L1546.26 683.398 L1545.7 683.398 L1545.14 683.398 L1544.58 683.398 L1544.02 683.398 L1543.46 683.398 L1542.9 683.398 L1542.35 683.398 L1541.79 683.398 L1541.23 683.398 L1540.67 683.398 L1540.11 683.398 L1539.55 683.398 L1538.99 683.398 L1538.43 683.398 L1537.87 683.398 L1537.31 683.398 L1536.75 683.398 L1536.19 683.398 L1535.63 683.398 L1535.08 683.398 L1534.52 683.398 L1533.96 683.398 L1533.4 683.398 L1532.84 683.398 L1532.28 683.398 L1531.72 683.398 L1531.16 683.398 L1530.6 683.398 L1530.04 683.398 L1529.48 683.398 L1528.92 683.398 L1528.36 683.398 L1527.81 683.398 L1527.25 683.398 L1526.69 683.398 L1526.13 683.398 L1525.57 683.398 L1525.01 683.398 L1524.45 683.398 L1523.89 683.398 L1523.33 683.398 L1522.77 683.398 L1522.21 683.398 L1521.65 683.398 L1521.09 683.398 L1520.53 683.398 L1519.98 683.398 L1519.42 683.398 L1518.86 683.398 L1518.3 683.398 L1517.74 683.398 L1517.18 683.398 L1516.62 683.398 L1516.06 683.398 L1515.5 683.398 L1514.94 683.398 L1514.38 683.398 L1513.82 683.398 L1513.26 683.398 L1512.71 683.398 L1512.15 683.398 L1511.59 683.398 L1511.03 683.398 L1510.47 683.398 L1509.91 683.398 L1509.35 683.398 L1508.79 683.398 L1508.23 683.398 L1507.67 683.398 L1507.11 683.398 L1506.55 683.398 L1505.99 683.398 L1505.44 683.398 L1504.88 683.398 L1504.32 683.398 L1503.76 683.398 L1503.2 683.398 L1502.64 683.398 L1502.08 683.398 L1501.52 683.398 L1500.96 683.398 L1500.4 683.398 L1499.84 683.398 L1499.28 683.398 L1498.72 683.398 L1498.16 683.398 L1497.61 683.398 L1497.05 683.398 L1496.49 683.398 L1495.93 683.398 L1495.37 683.398 L1494.81 683.398 L1494.25 683.398 L1493.69 683.398 L1493.13 683.398 L1492.57 683.398 L1492.01 683.398 L1491.45 683.398 L1490.89 683.398 L1490.34 683.398 L1489.78 683.398 L1489.22 683.398 L1488.66 683.398 L1488.1 683.398 L1487.54 683.398 L1486.98 683.398 L1486.42 683.398 L1485.86 683.398 L1485.3 683.398 L1484.74 683.398 L1484.18 683.398 L1483.62 683.398 L1483.07 683.398 L1482.51 683.398 L1481.95 683.398 L1481.39 683.398 L1480.83 683.398 L1480.27 683.398 L1479.71 683.398 L1479.15 683.398 L1478.59 683.398 L1478.03 683.398 L1477.47 683.398 L1476.91 683.398 L1476.35 683.398 L1475.79 683.398 L1475.24 683.398 L1474.68 683.398 L1474.12 683.398 L1473.56 683.398 L1473 683.398 L1472.44 683.398 L1471.88 683.398 L1471.32 683.398 L1470.76 683.398 L1470.2 683.398 L1469.64 683.398 L1469.08 683.398 L1468.52 683.398 L1467.97 683.398 L1467.41 683.398 L1466.85 683.398 L1466.29 683.398 L1465.73 683.398 L1465.17 683.398 L1464.61 683.398 L1464.05 683.398 L1463.49 683.398 L1462.93 683.398 L1462.37 683.398 L1461.81 683.398 L1461.25 683.398 L1460.7 683.398 L1460.14 683.398 L1459.58 683.398 L1459.02 683.398 L1458.46 683.398 L1457.9 683.398 L1457.34 683.398 L1456.78 683.398 L1456.22 683.398 L1455.66 683.398 L1455.1 683.398 L1454.54 683.398 L1453.98 683.398 L1453.42 683.398 L1452.87 683.398 L1452.31 683.398 L1451.75 683.398 L1451.19 683.398 L1450.63 683.398 L1450.07 683.398 L1449.51 683.398 L1448.95 683.398 L1448.39 683.398 L1447.83 683.398 L1447.27 683.398 L1446.71 683.398 L1446.15 683.398 L1445.6 683.398 L1445.04 683.398 L1444.48 683.398 L1443.92 683.398 L1443.36 683.398 L1442.8 683.398 L1442.24 683.398 L1441.68 683.398 L1441.12 683.398 L1440.56 683.398 L1440 683.398 L1439.44 683.398 L1438.88 683.398 L1438.33 683.398 L1437.77 683.398 L1437.21 683.398 L1436.65 683.398 L1436.09 683.398 L1435.53 683.398 L1434.97 683.398 L1434.41 683.398 L1433.85 683.398 L1433.29 683.398 L1432.73 683.398 L1432.17 683.398 L1431.61 683.398 L1431.05 683.398 L1430.5 683.398 L1429.94 683.398 L1429.38 683.398 L1428.82 683.398 L1428.26 683.398 L1427.7 683.398 L1427.14 683.398 L1426.58 683.398 L1426.02 683.398 L1425.46 683.398 L1424.9 683.398 L1424.34 683.398 L1423.78 683.398 L1423.23 683.398 L1422.67 683.398 L1422.11 683.398 L1421.55 683.398 L1420.99 683.398 L1420.43 683.398 L1419.87 683.398 L1419.31 683.398 L1418.75 683.398 L1418.19 683.398 L1417.63 683.398 L1417.07 683.398 L1416.51 683.398 L1415.95 683.398 L1415.4 683.398 L1414.84 683.398 L1414.28 683.398 L1413.72 683.398 L1413.16 683.398 L1412.6 683.398 L1412.04 683.398 L1411.48 683.398 L1410.92 683.398 L1410.36 683.398 L1409.8 683.398 L1409.24 683.398 L1408.68 683.398 L1408.13 683.398 L1407.57 683.398 L1407.01 683.398 L1406.45 683.398 L1405.89 683.398 L1405.33 683.398 L1404.77 683.398 L1404.21 683.398 L1403.65 683.398 L1403.09 683.398 L1402.53 683.398 L1401.97 683.398 L1401.41 683.398 L1400.86 683.398 L1400.3 683.398 L1399.74 683.398 L1399.18 683.398 L1398.62 683.398 L1398.06 683.398 L1397.5 683.398 L1396.94 683.398 L1396.38 683.398 L1395.82 683.398 L1395.26 683.398 L1394.7 683.398 L1394.14 683.398 L1393.58 683.398 L1393.03 683.398 L1392.47 683.398 L1391.91 683.398 L1391.35 683.398 L1390.79 683.398 L1390.23 683.398 L1389.67 683.398 L1389.11 683.398 L1388.55 683.398 L1387.99 683.398 L1387.43 683.398 L1386.87 683.398 L1386.31 683.398 L1385.76 683.398 L1385.2 683.398 L1384.64 683.398 L1384.08 683.398 L1383.52 683.398 L1382.96 683.398 L1382.4 683.398 L1381.84 683.398 L1381.28 683.398 L1380.72 683.398 L1380.16 683.398 L1379.6 683.398 L1379.04 683.398 L1378.49 683.398 L1377.93 683.398 L1377.37 683.398 L1376.81 683.398 L1376.25 683.398 L1375.69 683.398 L1375.13 683.398 L1374.57 683.398 L1374.01 683.398 L1373.45 683.398 L1372.89 683.398 L1372.33 683.398 L1371.77 683.398 L1371.21 683.398 L1370.66 683.398 L1370.1 683.398 L1369.54 683.398 L1368.98 683.398 L1368.42 683.398 L1367.86 683.398 L1367.3 683.398 L1366.74 683.398 L1366.18 683.398 L1365.62 683.398 L1365.06 683.398 L1364.5 683.398 L1363.94 683.398 L1363.39 683.398 L1362.83 683.398 L1362.27 683.398 L1361.71 683.398 L1361.15 683.398 L1360.59 683.398 L1360.03 683.398 L1359.47 683.398 L1358.91 683.398 L1358.35 683.398 L1357.79 683.398 L1357.23 683.398 L1356.67 683.398 L1356.12 683.398 L1355.56 683.398 L1355 683.398 L1354.44 683.398 L1353.88 683.398 L1353.32 683.398 L1352.76 683.398 L1352.2 683.398 L1351.64 683.398 L1351.08 683.398 L1350.52 683.398 L1349.96 683.398 L1349.4 683.398 L1348.84 683.398 L1348.29 683.398 L1347.73 683.398 L1347.17 683.398 L1346.61 683.398 L1346.05 683.398 L1345.49 683.398 L1344.93 683.398 L1344.37 683.398 L1343.81 683.398 L1343.25 683.398 L1342.69 683.398 L1342.13 683.398 L1341.57 683.398 L1341.02 683.398 L1340.46 683.398 L1339.9 683.398 L1339.34 683.398 L1338.78 683.398 L1338.22 683.398 L1337.66 683.398 L1337.1 683.398 L1336.54 683.398 L1335.98 683.398 L1335.42 683.398 L1334.86 683.398 L1334.3 683.398 L1333.75 683.398 L1333.19 683.398 L1332.63 683.398 L1332.07 683.398 L1331.51 683.398 L1330.95 683.398 L1330.39 683.398 L1329.83 683.398 L1329.27 683.398 L1328.71 683.398 L1328.15 683.398 L1327.59 683.398 L1327.03 683.398 L1326.47 683.398 L1325.92 683.398 L1325.36 683.398 L1324.8 683.398 L1324.24 683.398 L1323.68 683.398 L1323.12 683.398 L1322.56 683.398 L1322 683.398 L1321.44 683.398 L1320.88 683.398 L1320.32 683.398 L1319.76 683.398 L1319.2 683.398 L1318.65 683.398 L1318.09 683.398 L1317.53 683.398 L1316.97 683.398 L1316.41 683.398 L1315.85 683.398 L1315.29 683.398 L1314.73 683.398 L1314.17 683.398 L1313.61 683.398 L1313.05 683.398 L1312.49 683.398 L1311.93 683.398 L1311.38 683.398 L1310.82 683.398 L1310.26 683.398 L1309.7 683.398 L1309.14 683.398 L1308.58 683.398 L1308.02 683.398 L1307.46 683.398 L1306.9 683.398 L1306.34 683.398 L1305.78 683.398 L1305.22 683.398 L1304.66 683.398 L1304.1 683.398 L1303.55 683.398 L1302.99 683.398 L1302.43 683.398 L1301.87 683.398 L1301.31 683.398 L1300.75 683.398 L1300.19 683.398 L1299.63 683.398 L1299.07 683.398 L1298.51 683.398 L1297.95 683.398 L1297.39 683.398 L1296.83 683.398 L1296.28 683.398 L1295.72 683.398 L1295.16 683.398 L1294.6 683.398 L1294.04 683.398 L1293.48 683.398 L1292.92 683.398 L1292.36 683.398 L1291.8 683.398 L1291.24 683.398 L1290.68 683.398 L1290.12 683.398 L1289.56 683.398 L1289 683.398 L1288.45 683.398 L1287.89 683.398 L1287.33 683.398 L1286.77 683.398 L1286.21 683.398 L1285.65 683.398 L1285.09 683.398 L1284.53 683.398 L1283.97 683.398 L1283.41 683.398 L1282.85 683.398 L1282.29 683.398 L1281.73 683.398 L1281.18 683.398 L1280.62 683.398 L1280.06 683.398 L1279.5 683.398 L1278.94 683.398 L1278.38 683.398 L1277.82 683.398 L1277.26 683.398 L1276.7 683.398 L1276.14 683.398 L1275.58 683.398 L1275.02 683.398 L1274.46 683.398 L1273.91 683.398 L1273.35 683.398 L1272.79 683.398 L1272.23 683.398 L1271.67 683.398 L1271.11 683.398 L1270.55 683.398 L1269.99 683.398 L1269.43 683.398 L1268.87 683.398 L1268.31 683.398 L1267.75 683.398 L1267.19 683.398 L1266.63 683.398 L1266.08 683.398 L1265.52 683.398 L1264.96 683.398 L1264.4 683.398 L1263.84 683.398 L1263.28 683.398 L1262.72 683.398 L1262.16 683.398 L1261.6 683.398 L1261.04 683.398 L1260.48 683.398 L1259.92 683.398 L1259.36 683.398 L1258.81 683.398 L1258.25 683.398 L1257.69 683.398 L1257.13 683.398 L1256.57 683.398 L1256.01 683.398 L1255.45 683.398 L1254.89 683.398 L1254.33 683.398 L1253.77 683.398 L1253.21 683.398 L1252.65 683.398 L1252.09 683.398 L1251.54 683.398 L1250.98 683.398 L1250.42 683.398 L1249.86 683.398 L1249.3 683.398 L1248.74 683.398 L1248.18 683.398 L1247.62 683.398 L1247.06 683.398 L1246.5 683.398 L1245.94 683.398 L1245.38 683.398 L1244.82 683.398 L1244.26 683.398 L1243.71 683.398 L1243.15 683.398 L1242.59 683.398 L1242.03 683.398 L1241.47 683.398 L1240.91 683.398 L1240.35 683.398 L1239.79 683.398 L1239.23 683.398 L1238.67 683.398 L1238.11 683.398 L1237.55 683.398 L1236.99 683.398 L1236.44 683.398 L1235.88 683.398 L1235.32 683.398 L1234.76 683.398 L1234.2 683.398 L1233.64 683.398 L1233.08 683.398 L1232.52 683.398 L1231.96 683.398 L1231.4 683.398 L1230.84 683.398 L1230.28 683.398 L1229.72 683.398 L1229.17 683.398 L1228.61 683.398 L1228.05 683.398 L1227.49 683.398 L1226.93 683.398 L1226.37 683.398 L1225.81 683.398 L1225.25 683.398 L1224.69 683.398 L1224.13 683.398 L1223.57 683.398 L1223.01 683.398 L1222.45 683.398 L1221.89 683.398 L1221.34 683.398 L1220.78 683.398 L1220.22 683.398 L1219.66 683.398 L1219.1 683.398 L1218.54 683.398 L1217.98 683.398 L1217.42 683.398 L1216.86 683.398 L1216.3 683.398 L1215.74 683.398 L1215.18 683.398 L1214.62 683.398 L1214.07 683.398 L1213.51 683.398 L1212.95 683.398 L1212.39 683.398 L1211.83 683.398 L1211.27 683.398 L1210.71 683.398 L1210.15 683.398 L1209.59 683.398 L1209.03 683.398 L1208.47 683.398 L1207.91 683.398 L1207.35 683.398 L1206.8 683.398 L1206.24 683.398 L1205.68 683.398 L1205.12 683.398 L1204.56 683.398 L1204 683.398 L1203.44 683.398 L1202.88 683.398 L1202.32 683.398 L1201.76 683.398 L1201.2 683.398 L1200.64 683.398 L1200.08 683.398 L1199.52 683.398 L1198.97 683.398 L1198.41 683.398 L1197.85 683.398 L1197.29 683.398 L1196.73 683.398 L1196.17 683.398 L1195.61 683.398 L1195.05 683.398 L1194.49 683.398 L1193.93 683.398 L1193.37 683.398 L1192.81 683.398 L1192.25 683.398 L1191.7 683.398 L1191.14 683.398 L1190.58 683.398 L1190.02 683.398 L1189.46 683.398 L1188.9 683.398 L1188.34 683.398 L1187.78 683.398 L1187.22 683.398 L1186.66 683.398 L1186.1 683.398 L1185.54 683.398 L1184.98 683.398 L1184.43 683.398 L1183.87 683.398 L1183.31 683.398 L1182.75 683.398 L1182.19 683.398 L1181.63 683.398 L1181.07 683.398 L1180.51 683.398 L1179.95 683.398 L1179.39 683.398 L1178.83 683.398 L1178.27 683.398 L1177.71 683.398 L1177.15 683.398 L1176.6 683.398 L1176.04 683.398 L1175.48 683.398 L1174.92 683.398 L1174.36 683.398 L1173.8 683.398 L1173.24 683.398 L1172.68 683.398 L1172.12 683.398 L1171.56 683.398 L1171 683.398 L1170.44 683.398 L1169.88 683.398 L1169.33 683.398 L1168.77 683.398 L1168.21 683.398 L1167.65 683.398 L1167.09 683.398 L1166.53 683.398 L1165.97 683.398 L1165.41 683.398 L1164.85 683.398 L1164.29 683.398 L1163.73 683.398 L1163.17 683.398 L1162.61 683.398 L1162.05 683.398 L1161.5 683.398 L1160.94 683.398 L1160.38 683.398 L1159.82 683.398 L1159.26 683.398 L1158.7 683.398 L1158.14 683.398 L1157.58 683.398 L1157.02 683.398 L1156.46 683.398 L1155.9 683.398 L1155.34 683.398 L1154.78 683.398 L1154.23 683.398 L1153.67 683.398 L1153.11 683.398 L1152.55 683.398 L1151.99 683.398 L1151.43 683.398 L1150.87 683.398 L1150.31 683.398 L1149.75 683.398 L1149.19 683.398 L1148.63 683.398 L1148.07 683.398 L1147.51 683.398 L1146.96 683.398 L1146.4 683.398 L1145.84 683.398 L1145.28 683.398 L1144.72 683.398 L1144.16 683.398 L1143.6 683.398 L1143.04 683.398 L1142.48 683.398 L1141.92 683.398 L1141.36 683.398 L1140.8 683.398 L1140.24 683.398 L1139.68 683.398 L1139.13 683.398 L1138.57 683.398 L1138.01 683.398 L1137.45 683.398 L1136.89 683.398 L1136.33 683.398 L1135.77 683.398 L1135.21 683.398 L1134.65 683.398 L1134.09 683.398 L1133.53 683.398 L1132.97 683.398 L1132.41 683.398 L1131.86 683.398 L1131.3 683.398 L1130.74 683.398 L1130.18 683.398 L1129.62 683.398 L1129.06 683.398 L1128.5 683.398 L1127.94 683.398 L1127.38 683.398 L1126.82 683.398 L1126.26 683.398 L1125.7 683.398 L1125.14 683.398 L1124.59 683.398 L1124.03 683.398 L1123.47 683.398 L1122.91 683.398 L1122.35 683.398 L1121.79 683.398 L1121.23 683.398 L1120.67 683.398 L1120.11 683.398 L1119.55 683.398 L1118.99 683.398 L1118.43 683.398 L1117.87 683.398 L1117.31 683.398 L1116.76 683.398 L1116.2 683.398 L1115.64 683.398 L1115.08 683.398 L1114.52 683.398 L1113.96 683.398 L1113.4 683.398 L1112.84 683.398 L1112.28 683.398 L1111.72 683.398 L1111.16 683.398 L1110.6 683.398 L1110.04 683.398 L1109.49 683.398 L1108.93 683.398 L1108.37 683.398 L1107.81 683.398 L1107.25 683.398 L1106.69 683.398 L1106.13 683.398 L1105.57 683.398 L1105.01 683.398 L1104.45 683.398 L1103.89 683.398 L1103.33 683.398 L1102.77 683.398 L1102.22 683.398 L1101.66 683.398 L1101.1 683.398 L1100.54 683.398 L1099.98 683.398 L1099.42 683.398 L1098.86 683.398 L1098.3 683.398 L1097.74 683.398 L1097.18 683.398 L1096.62 683.398 L1096.06 683.398 L1095.5 683.398 L1094.94 683.398 L1094.39 683.398 L1093.83 683.398 L1093.27 683.398 L1092.71 683.398 L1092.15 683.398 L1091.59 683.398 L1091.03 683.398 L1090.47 683.398 L1089.91 683.398 L1089.35 683.398 L1088.79 683.398 L1088.23 683.398 L1087.67 683.398 L1087.12 683.398 L1086.56 683.398 L1086 683.398 L1085.44 683.398 L1084.88 683.398 L1084.32 683.398 L1083.76 683.398 L1083.2 683.398 L1082.64 683.398 L1082.08 683.398 L1081.52 683.398 L1080.96 683.398 L1080.4 683.398 L1079.85 683.398 L1079.29 683.398 L1078.73 683.398 L1078.17 683.398 L1077.61 683.398 L1077.05 683.398 L1076.49 683.398 L1075.93 683.398 L1075.37 683.398 L1074.81 683.398 L1074.25 683.398 L1073.69 683.398 L1073.13 683.398 L1072.57 683.398 L1072.02 683.398 L1071.46 683.398 L1070.9 683.398 L1070.34 683.398 L1069.78 683.398 L1069.22 683.398 L1068.66 683.398 L1068.1 683.398 L1067.54 683.398 L1066.98 683.398 L1066.42 683.398 L1065.86 683.398 L1065.3 683.398 L1064.75 683.398 L1064.19 683.398 L1063.63 683.398 L1063.07 683.398 L1062.51 683.398 L1061.95 683.398 L1061.39 683.398 L1060.83 683.398 L1060.27 683.398 L1059.71 683.398 L1059.15 683.398 L1058.59 683.398 L1058.03 683.398 L1057.48 683.398 L1056.92 683.398 L1056.36 683.398 L1055.8 683.398 L1055.24 683.398 L1054.68 683.398 L1054.12 683.398 L1053.56 683.398 L1053 683.398 L1052.44 683.398 L1051.88 683.398 L1051.32 683.398 L1050.76 683.398 L1050.2 683.398 L1049.65 683.398 L1049.09 683.398 L1048.53 683.398 L1047.97 683.398 L1047.41 683.398 L1046.85 683.398 L1046.29 683.398 L1045.73 683.398 L1045.17 683.398 L1044.61 683.398 L1044.05 683.398 L1043.49 683.398 L1042.93 683.398 L1042.38 683.398 L1041.82 683.398 L1041.26 683.398 L1040.7 683.398 L1040.14 683.398 L1039.58 683.398 L1039.02 683.398 L1038.46 683.398 L1037.9 683.398 L1037.34 683.398 L1036.78 683.398 L1036.22 683.398 L1035.66 683.398 L1035.1 683.398 L1034.55 683.398 L1033.99 683.398 L1033.43 683.398 L1032.87 683.398 L1032.31 683.398 L1031.75 683.398 L1031.19 683.398 L1030.63 683.398 L1030.07 683.398 L1029.51 683.398 L1028.95 683.398 L1028.39 683.398 L1027.83 683.398 L1027.28 683.398 L1026.72 683.398 L1026.16 683.398 L1025.6 683.398 L1025.04 683.398 L1024.48 683.398 L1023.92 683.398 L1023.36 683.398 L1022.8 683.398 L1022.24 683.398 L1021.68 683.398 L1021.12 683.398 L1020.56 683.398 L1020.01 683.398 L1019.45 683.398 L1018.89 683.398 L1018.33 683.398 L1017.77 683.398 L1017.21 683.398 L1016.65 683.398 L1016.09 683.398 L1015.53 683.398 L1014.97 683.398 L1014.41 683.398 L1013.85 683.398 L1013.29 683.398 L1012.73 683.398 L1012.18 683.398 L1011.62 683.398 L1011.06 683.398 L1010.5 683.398 L1009.94 683.398 L1009.38 683.398 L1008.82 683.398 L1008.26 683.398 L1007.7 683.398 L1007.14 683.398 L1006.58 683.398 L1006.02 683.398 L1005.46 683.398 L1004.91 683.398 L1004.35 683.398 L1003.79 683.398 L1003.23 683.398 L1002.67 683.398 L1002.11 683.398 L1001.55 683.398 L1000.99 683.398 L1000.43 683.398 L999.872 683.398 L999.313 683.398 L998.754 683.398 L998.194 683.398 L997.635 683.398 L997.076 683.398 L996.517 683.398 L995.957 683.398 L995.398 683.398 L994.839 683.398 L994.28 683.398 L993.72 683.398 L993.161 683.398 L992.602 683.398 L992.043 683.398 L991.483 683.398 L990.924 683.398 L990.365 683.398 L989.806 683.398 L989.246 683.398 L988.687 683.398 L988.128 683.398 L987.569 683.398 L987.009 683.398 L986.45 683.398 L985.891 683.398 L985.332 683.398 L984.772 683.398 L984.213 683.398 L983.654 683.398 L983.095 683.398 L982.535 683.398 L981.976 683.398 L981.417 683.398 L980.858 683.398 L980.298 683.398 L979.739 683.398 L979.18 683.398 L978.621 683.398 L978.061 683.398 L977.502 683.398 L976.943 683.398 L976.384 683.398 L975.824 683.398 L975.265 683.398 L974.706 683.398 L974.147 683.398 L973.587 683.398 L973.028 683.398 L972.469 683.398 L971.91 683.398 L971.35 683.398 L970.791 683.398 L970.232 683.398 L969.673 683.398 L969.113 683.398 L968.554 683.398 L967.995 683.398 L967.436 683.398 L966.876 683.398 L966.317 683.398 L965.758 683.398 L965.199 683.398 L964.639 683.398 L964.08 683.398 L963.521 683.398 L962.962 683.398 L962.402 683.398 L961.843 683.398 L961.284 683.398 L960.725 683.398 L960.165 683.398 L959.606 683.398 L959.047 683.398 L958.488 683.398 L957.928 683.398 L957.369 683.398 L956.81 683.398 L956.251 683.398 L955.691 683.398 L955.132 683.398 L954.573 683.398 L954.014 683.398 L953.454 683.398 L952.895 683.398 L952.336 683.398 L951.777 683.398 L951.217 683.398 L950.658 683.398 L950.099 683.398 L949.54 683.398 L948.98 683.398 L948.421 683.398 L947.862 683.398 L947.303 683.398 L946.743 683.398 L946.184 683.398 L945.625 683.398 L945.066 683.398 L944.506 683.398 L943.947 683.398 L943.388 683.398 L942.829 683.398 L942.269 683.398 L941.71 683.398 L941.151 683.398 L940.592 683.398 L940.032 683.398 L939.473 683.398 L938.914 683.398 L938.355 683.398 L937.795 683.398 L937.236 683.398 L936.677 683.398 L936.118 683.398 L935.558 683.398 L934.999 683.398 L934.44 683.398 L933.881 683.398 L933.321 683.398 L932.762 683.398 L932.203 683.398 L931.644 683.398 L931.084 683.398 L930.525 683.398 L929.966 683.398 L929.406 683.398 L928.847 683.398 L928.288 683.398 L927.729 683.398 L927.169 683.398 L926.61 683.398 L926.051 683.398 L925.492 683.398 L924.932 683.398 L924.373 683.398 L923.814 683.398 L923.255 683.398 L922.695 683.398 L922.136 683.398 L921.577 683.398 L921.018 683.398 L920.458 683.398 L919.899 683.398 L919.34 683.398 L918.781 683.398 L918.221 683.398 L917.662 683.398 L917.103 683.398 L916.544 683.398 L915.984 683.398 L915.425 683.398 L914.866 683.398 L914.307 683.398 L913.747 683.398 L913.188 683.398 L912.629 683.398 L912.07 683.398 L911.51 683.398 L910.951 683.398 L910.392 683.398 L909.833 683.398 L909.273 683.398 L908.714 683.398 L908.155 683.398 L907.596 683.398 L907.036 683.398 L906.477 683.398 L905.918 683.398 L905.359 683.398 L904.799 683.398 L904.24 683.398 L903.681 683.398 L903.122 683.398 L902.562 683.398 L902.003 683.398 L901.444 683.398 L900.885 683.398 L900.325 683.398 L899.766 683.398 L899.207 683.398 L898.648 683.398 L898.088 683.398 L897.529 683.398 L896.97 683.398 L896.411 683.398 L895.851 683.398 L895.292 683.398 L894.733 683.398 L894.174 683.398 L893.614 683.398 L893.055 683.398 L892.496 683.398 L891.937 683.398 L891.377 683.398 L890.818 683.398 L890.259 683.398 L889.7 683.398 L889.14 683.398 L888.581 683.398 L888.022 683.398 L887.463 683.398 L886.903 683.398 L886.344 683.398 L885.785 683.398 L885.226 683.398 L884.666 683.398 L884.107 683.398 L883.548 683.398 L882.989 683.398 L882.429 683.398 L881.87 683.398 L881.311 683.398 L880.752 683.398 L880.192 683.398 L879.633 683.398 L879.074 683.398 L878.515 683.398 L877.955 683.398 L877.396 683.398 L876.837 683.398 L876.278 683.398 L875.718 683.398 L875.159 683.398 L874.6 683.398 L874.041 683.398 L873.481 683.398 L872.922 683.398 L872.363 683.398 L871.804 683.398 L871.244 683.398 L870.685 683.398 L870.126 683.398 L869.567 683.398 L869.007 683.398 L868.448 683.398 L867.889 683.398 L867.33 683.398 L866.77 683.398 L866.211 683.398 L865.652 683.398 L865.093 683.398 L864.533 683.398 L863.974 683.398 L863.415 683.398 L862.856 683.398 L862.296 683.398 L861.737 683.398 L861.178 683.398 L860.619 683.398 L860.059 683.398 L859.5 683.398 L858.941 683.398 L858.382 683.398 L857.822 683.398 L857.263 683.398 L856.704 683.398 L856.145 683.398 L855.585 683.398 L855.026 683.398 L854.467 683.398 L853.908 683.398 L853.348 683.398 L852.789 683.398 L852.23 683.398 L851.671 683.398 L851.111 683.398 L850.552 683.398 L849.993 683.398 L849.434 683.398 L848.874 683.398 L848.315 683.398 L847.756 683.398 L847.197 683.398 L846.637 683.398 L846.078 683.398 L845.519 683.398 L844.96 683.398 L844.4 683.398 L843.841 683.398 L843.282 683.398 L842.723 683.398 L842.163 683.398 L841.604 683.398 L841.045 683.398 L840.486 683.398 L839.926 683.398 L839.367 683.398 L838.808 683.398 L838.249 683.398 L837.689 683.398 L837.13 683.398 L836.571 683.398 L836.012 683.398 L835.452 683.398 L834.893 683.398 L834.334 683.398 L833.775 683.398 L833.215 683.398 L832.656 683.398 L832.097 683.398 L831.538 683.398 L830.978 683.398 L830.419 683.398 L829.86 683.398 L829.301 683.398 L828.741 683.398 L828.182 683.398 L827.623 683.398 L827.064 683.398 L826.504 683.398 L825.945 683.398 L825.386 683.398 L824.827 683.398 L824.267 683.398 L823.708 683.398 L823.149 683.398 L822.59 683.398 L822.03 683.398 L821.471 683.398 L820.912 683.398 L820.353 683.398 L819.793 683.398 L819.234 683.398 L818.675 683.398 L818.116 683.398 L817.556 683.398 L816.997 683.398 L816.438 683.398 L815.879 683.398 L815.319 683.398 L814.76 683.398 L814.201 683.398 L813.642 683.398 L813.082 683.398 L812.523 683.398 L811.964 683.398 L811.405 683.398 L810.845 683.398 L810.286 683.398 L809.727 683.398 L809.168 683.398 L808.608 683.398 L808.049 683.398 L807.49 683.398 L806.931 683.398 L806.371 683.398 L805.812 683.398 L805.253 683.398 L804.693 683.398 L804.134 683.398 L803.575 683.398 L803.016 683.398 L802.456 683.398 L801.897 683.398 L801.338 683.398 L800.779 683.398 L800.219 683.398 L799.66 683.398 L799.101 683.398 L798.542 683.398 L797.982 683.398 L797.423 683.398 L796.864 683.398 L796.305 683.398 L795.745 683.398 L795.186 683.398 L794.627 683.398 L794.068 683.398 L793.508 683.398 L792.949 683.398 L792.39 683.398 L791.831 683.398 L791.271 683.398 L790.712 683.398 L790.153 683.398 L789.594 683.398 L789.034 683.398 L788.475 683.398 L787.916 683.398 L787.357 683.398 L786.797 683.398 L786.238 683.398 L785.679 683.398 L785.12 683.398 L784.56 683.398 L784.001 683.398 L783.442 683.398 L782.883 683.398 L782.323 683.398 L781.764 683.398 L781.205 683.398 L780.646 683.398 L780.086 683.398 L779.527 683.398 L778.968 683.398 L778.409 683.398 L777.849 683.398 L777.29 683.398 L776.731 683.398 L776.172 683.398 L775.612 683.398 L775.053 683.398 L774.494 683.398 L773.935 683.398 L773.375 683.398 L772.816 683.398 L772.257 683.398 L771.698 683.398 L771.138 683.398 L770.579 683.398 L770.02 683.398 L769.461 683.398 L768.901 683.398 L768.342 683.398 L767.783 683.398 L767.224 683.398 L766.664 683.398 L766.105 683.398 L765.546 683.398 L764.987 683.398 L764.427 683.398 L763.868 683.398 L763.309 683.398 L762.75 683.398 L762.19 683.398 L761.631 683.398 L761.072 683.398 L760.513 683.398 L759.953 683.398 L759.394 683.398 L758.835 683.398 L758.276 683.398 L757.716 683.398 L757.157 683.398 L756.598 683.398 L756.039 683.398 L755.479 683.398 L754.92 683.398 L754.361 683.398 L753.802 683.398 L753.242 683.398 L752.683 683.398 L752.124 683.398 L751.565 683.398 L751.005 683.398 L750.446 683.398 L749.887 683.398 L749.328 683.398 L748.768 683.398 L748.209 683.398 L747.65 683.398 L747.091 683.398 L746.531 683.398 L745.972 683.398 L745.413 683.398 L744.854 683.398 L744.294 683.398 L743.735 683.398 L743.176 683.398 L742.617 683.398 L742.057 683.398 L741.498 683.398 L740.939 683.398 L740.38 683.398 L739.82 683.398 L739.261 683.398 L738.702 683.398 L738.143 683.398 L737.583 683.398 L737.024 683.398 L736.465 683.398 L735.906 683.398 L735.346 683.398 L734.787 683.398 L734.228 683.398 L733.669 683.398 L733.109 683.398 L732.55 683.398 L731.991 683.398 L731.432 683.398 L730.872 683.398 L730.313 683.398 L729.754 683.398 L729.195 683.398 L728.635 683.398 L728.076 683.398 L727.517 683.398 L726.958 683.398 L726.398 683.398 L725.839 683.398 L725.28 683.398 L724.721 683.398 L724.161 683.398 L723.602 683.398 L723.043 683.398 L722.484 683.398 L721.924 683.398 L721.365 683.398 L720.806 683.398 L720.247 683.398  Z\" fill=\"#e26f46\" fill-rule=\"evenodd\" fill-opacity=\"0.5\"/>\n<polyline clip-path=\"url(#clip433)\" style=\"stroke:#e26f46; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"720.247,688.439 720.806,688.439 721.365,688.439 721.924,688.439 722.484,688.439 723.043,688.439 723.602,688.439 724.161,688.439 724.721,688.439 725.28,688.439 725.839,688.439 726.398,688.439 726.958,688.439 727.517,688.439 728.076,688.439 728.635,688.439 729.195,688.439 729.754,688.439 730.313,688.439 730.872,688.439 731.432,688.439 731.991,688.439 732.55,688.439 733.109,688.439 733.669,688.439 734.228,688.439 734.787,688.439 735.346,688.439 735.906,688.439 736.465,688.439 737.024,688.439 737.583,688.439 738.143,688.439 738.702,688.439 739.261,688.439 739.82,688.439 740.38,688.439 740.939,688.439 741.498,688.439 742.057,688.439 742.617,688.439 743.176,688.439 743.735,688.439 744.294,688.439 744.854,688.439 745.413,688.439 745.972,688.439 746.531,688.439 747.091,688.439 747.65,688.439 748.209,688.439 748.768,688.439 749.328,688.439 749.887,688.439 750.446,688.439 751.005,688.439 751.565,688.439 752.124,688.439 752.683,688.439 753.242,688.439 753.802,688.439 754.361,688.439 754.92,688.439 755.479,688.439 756.039,688.439 756.598,688.439 757.157,688.439 757.716,688.439 758.276,688.439 758.835,688.439 759.394,688.439 759.953,688.439 760.513,688.439 761.072,688.439 761.631,688.439 762.19,688.439 762.75,688.439 763.309,688.439 763.868,688.439 764.427,688.439 764.987,688.439 765.546,688.439 766.105,688.439 766.664,688.439 767.224,688.439 767.783,688.439 768.342,688.439 768.901,688.439 769.461,688.439 770.02,688.439 770.579,688.439 771.138,688.439 771.698,688.439 772.257,688.439 772.816,688.439 773.375,688.439 773.935,688.439 774.494,688.439 775.053,688.439 775.612,688.439 776.172,688.439 776.731,688.439 777.29,688.439 777.849,688.439 778.409,688.439 778.968,688.439 779.527,688.439 780.086,688.439 780.646,688.439 781.205,688.439 781.764,688.439 782.323,688.439 782.883,688.439 783.442,688.439 784.001,688.439 784.56,688.439 785.12,688.439 785.679,688.439 786.238,688.439 786.797,688.439 787.357,688.439 787.916,688.439 788.475,688.439 789.034,688.439 789.594,688.439 790.153,688.439 790.712,688.439 791.271,688.439 791.831,688.439 792.39,688.439 792.949,688.439 793.508,688.439 794.068,688.439 794.627,688.439 795.186,688.439 795.745,688.439 796.305,688.439 796.864,688.439 797.423,688.439 797.982,688.439 798.542,688.439 799.101,688.439 799.66,688.439 800.219,688.439 800.779,688.439 801.338,688.439 801.897,688.439 802.456,688.439 803.016,688.439 803.575,688.439 804.134,688.439 804.693,688.439 805.253,688.439 805.812,688.439 806.371,688.439 806.931,688.439 807.49,688.439 808.049,688.439 808.608,688.439 809.168,688.439 809.727,688.439 810.286,688.439 810.845,688.439 811.405,688.439 811.964,688.439 812.523,688.439 813.082,688.439 813.642,688.439 814.201,688.439 814.76,688.439 815.319,688.439 815.879,688.439 816.438,688.439 816.997,688.439 817.556,688.439 818.116,688.439 818.675,688.439 819.234,688.439 819.793,688.439 820.353,688.439 820.912,688.439 821.471,688.439 822.03,688.439 822.59,688.439 823.149,688.439 823.708,688.439 824.267,688.439 824.827,688.439 825.386,688.439 825.945,688.439 826.504,688.439 827.064,688.439 827.623,688.439 828.182,688.439 828.741,688.439 829.301,688.439 829.86,688.439 830.419,688.439 830.978,688.439 831.538,688.439 832.097,688.439 832.656,688.439 833.215,688.439 833.775,688.439 834.334,688.439 834.893,688.439 835.452,688.439 836.012,688.439 836.571,688.439 837.13,688.439 837.689,688.439 838.249,688.439 838.808,688.439 839.367,688.439 839.926,688.439 840.486,688.439 841.045,688.439 841.604,688.439 842.163,688.439 842.723,688.439 843.282,688.439 843.841,688.439 844.4,688.439 844.96,688.439 845.519,688.439 846.078,688.439 846.637,688.439 847.197,688.439 847.756,688.439 848.315,688.439 848.874,688.439 849.434,688.439 849.993,688.439 850.552,688.439 851.111,688.439 851.671,688.439 852.23,688.439 852.789,688.439 853.348,688.439 853.908,688.439 854.467,688.439 855.026,688.439 855.585,688.439 856.145,688.439 856.704,688.439 857.263,688.439 857.822,688.439 858.382,688.439 858.941,688.439 859.5,688.439 860.059,688.439 860.619,688.439 861.178,688.439 861.737,688.439 862.296,688.439 862.856,688.439 863.415,688.439 863.974,688.439 864.533,688.439 865.093,688.439 865.652,688.439 866.211,688.439 866.77,688.439 867.33,688.439 867.889,688.439 868.448,688.439 869.007,688.439 869.567,688.439 870.126,688.439 870.685,688.439 871.244,688.439 871.804,688.439 872.363,688.439 872.922,688.439 873.481,688.439 874.041,688.439 874.6,688.439 875.159,688.439 875.718,688.439 876.278,688.439 876.837,688.439 877.396,688.439 877.955,688.439 878.515,688.439 879.074,688.439 879.633,688.439 880.192,688.439 880.752,688.439 881.311,688.439 881.87,688.439 882.429,688.439 882.989,688.439 883.548,688.439 884.107,688.439 884.666,688.439 885.226,688.439 885.785,688.439 886.344,688.439 886.903,688.439 887.463,688.439 888.022,688.439 888.581,688.439 889.14,688.439 889.7,688.439 890.259,688.439 890.818,688.439 891.377,688.439 891.937,688.439 892.496,688.439 893.055,688.439 893.614,688.439 894.174,688.439 894.733,688.439 895.292,688.439 895.851,688.439 896.411,688.439 896.97,688.439 897.529,688.439 898.088,688.439 898.648,688.439 899.207,688.439 899.766,688.439 900.325,688.439 900.885,688.439 901.444,688.439 902.003,688.439 902.562,688.439 903.122,688.439 903.681,688.439 904.24,688.439 904.799,688.439 905.359,688.439 905.918,688.439 906.477,688.439 907.036,688.439 907.596,688.439 908.155,688.439 908.714,688.439 909.273,688.439 909.833,688.439 910.392,688.439 910.951,688.439 911.51,688.439 912.07,688.439 912.629,688.439 913.188,688.439 913.747,688.439 914.307,688.439 914.866,688.439 915.425,688.439 915.984,688.439 916.544,688.439 917.103,688.439 917.662,688.439 918.221,688.439 918.781,688.439 919.34,688.439 919.899,688.439 920.458,688.439 921.018,688.439 921.577,688.439 922.136,688.439 922.695,688.439 923.255,688.439 923.814,688.439 924.373,688.439 924.932,688.439 925.492,688.439 926.051,688.439 926.61,688.439 927.169,688.439 927.729,688.439 928.288,688.439 928.847,688.439 929.406,688.439 929.966,688.439 930.525,688.439 931.084,688.439 931.644,688.439 932.203,688.439 932.762,688.439 933.321,688.439 933.881,688.439 934.44,688.439 934.999,688.439 935.558,688.439 936.118,688.439 936.677,688.439 937.236,688.439 937.795,688.439 938.355,688.439 938.914,688.439 939.473,688.439 940.032,688.439 940.592,688.439 941.151,688.439 941.71,688.439 942.269,688.439 942.829,688.439 943.388,688.439 943.947,688.439 944.506,688.439 945.066,688.439 945.625,688.439 946.184,688.439 946.743,688.439 947.303,688.439 947.862,688.439 948.421,688.439 948.98,688.439 949.54,688.439 950.099,688.439 950.658,688.439 951.217,688.439 951.777,688.439 952.336,688.439 952.895,688.439 953.454,688.439 954.014,688.439 954.573,688.439 955.132,688.439 955.691,688.439 956.251,688.439 956.81,688.439 957.369,688.439 957.928,688.439 958.488,688.439 959.047,688.439 959.606,688.439 960.165,688.439 960.725,688.439 961.284,688.439 961.843,688.439 962.402,688.439 962.962,688.439 963.521,688.439 964.08,688.439 964.639,688.439 965.199,688.439 965.758,688.439 966.317,688.439 966.876,688.439 967.436,688.439 967.995,688.439 968.554,688.439 969.113,688.439 969.673,688.439 970.232,688.439 970.791,688.439 971.35,688.439 971.91,688.439 972.469,688.439 973.028,688.439 973.587,688.439 974.147,688.439 974.706,688.439 975.265,688.439 975.824,688.439 976.384,688.439 976.943,688.439 977.502,688.439 978.061,688.439 978.621,688.439 979.18,688.439 979.739,688.439 980.298,688.439 980.858,688.439 981.417,688.439 981.976,688.439 982.535,688.439 983.095,688.439 983.654,688.439 984.213,688.439 984.772,688.439 985.332,688.439 985.891,688.439 986.45,688.439 987.009,688.439 987.569,688.439 988.128,688.439 988.687,688.439 989.246,688.439 989.806,688.439 990.365,688.439 990.924,688.439 991.483,688.439 992.043,688.439 992.602,688.439 993.161,688.439 993.72,688.439 994.28,688.439 994.839,688.439 995.398,688.439 995.957,688.439 996.517,688.439 997.076,688.439 997.635,688.439 998.194,688.439 998.754,688.439 999.313,688.439 999.872,688.439 1000.43,688.439 1000.99,688.439 1001.55,688.439 1002.11,688.439 1002.67,688.439 1003.23,688.439 1003.79,688.439 1004.35,688.439 1004.91,688.439 1005.46,688.439 1006.02,688.439 1006.58,688.439 1007.14,688.439 1007.7,688.439 1008.26,688.439 1008.82,688.439 1009.38,688.439 1009.94,688.439 1010.5,688.439 1011.06,688.439 1011.62,688.439 1012.18,688.439 1012.73,688.439 1013.29,688.439 1013.85,688.439 1014.41,688.439 1014.97,688.439 1015.53,688.439 1016.09,688.439 1016.65,688.439 1017.21,688.439 1017.77,688.439 1018.33,688.439 1018.89,688.439 1019.45,688.439 1020.01,688.439 1020.56,688.439 1021.12,688.439 1021.68,688.439 1022.24,688.439 1022.8,688.439 1023.36,688.439 1023.92,688.439 1024.48,688.439 1025.04,688.439 1025.6,688.439 1026.16,688.439 1026.72,688.439 1027.28,688.439 1027.83,688.439 1028.39,688.439 1028.95,688.439 1029.51,688.439 1030.07,688.439 1030.63,688.439 1031.19,688.439 1031.75,688.439 1032.31,688.439 1032.87,688.439 1033.43,688.439 1033.99,688.439 1034.55,688.439 1035.1,688.439 1035.66,688.439 1036.22,688.439 1036.78,688.439 1037.34,688.439 1037.9,688.439 1038.46,688.439 1039.02,688.439 1039.58,688.439 1040.14,688.439 1040.7,688.439 1041.26,688.439 1041.82,688.439 1042.38,688.439 1042.93,688.439 1043.49,688.439 1044.05,688.439 1044.61,688.439 1045.17,688.439 1045.73,688.439 1046.29,688.439 1046.85,688.439 1047.41,688.439 1047.97,688.439 1048.53,688.439 1049.09,688.439 1049.65,688.439 1050.2,688.439 1050.76,688.439 1051.32,688.439 1051.88,688.439 1052.44,688.439 1053,688.439 1053.56,688.439 1054.12,688.439 1054.68,688.439 1055.24,688.439 1055.8,688.439 1056.36,688.439 1056.92,688.439 1057.48,688.439 1058.03,688.439 1058.59,688.439 1059.15,688.439 1059.71,688.439 1060.27,688.439 1060.83,688.439 1061.39,688.439 1061.95,688.439 1062.51,688.439 1063.07,688.439 1063.63,688.439 1064.19,688.439 1064.75,688.439 1065.3,688.439 1065.86,688.439 1066.42,688.439 1066.98,688.439 1067.54,688.439 1068.1,688.439 1068.66,688.439 1069.22,688.439 1069.78,688.439 1070.34,688.439 1070.9,688.439 1071.46,688.439 1072.02,688.439 1072.57,688.439 1073.13,688.439 1073.69,688.439 1074.25,688.439 1074.81,688.439 1075.37,688.439 1075.93,688.439 1076.49,688.439 1077.05,688.439 1077.61,688.439 1078.17,688.439 1078.73,688.439 1079.29,688.439 1079.85,688.439 1080.4,688.439 1080.96,688.439 1081.52,688.439 1082.08,688.439 1082.64,688.439 1083.2,688.439 1083.76,688.439 1084.32,688.439 1084.88,688.439 1085.44,688.439 1086,688.439 1086.56,688.439 1087.12,688.439 1087.67,688.439 1088.23,688.439 1088.79,688.439 1089.35,688.439 1089.91,688.439 1090.47,688.439 1091.03,688.439 1091.59,688.439 1092.15,688.439 1092.71,688.439 1093.27,688.439 1093.83,688.439 1094.39,688.439 1094.94,688.439 1095.5,688.439 1096.06,688.439 1096.62,688.439 1097.18,688.439 1097.74,688.439 1098.3,688.439 1098.86,688.439 1099.42,688.439 1099.98,688.439 1100.54,688.439 1101.1,688.439 1101.66,688.439 1102.22,688.439 1102.77,688.439 1103.33,688.439 1103.89,688.439 1104.45,688.439 1105.01,688.439 1105.57,688.439 1106.13,688.439 1106.69,688.439 1107.25,688.439 1107.81,688.439 1108.37,688.439 1108.93,688.439 1109.49,688.439 1110.04,688.439 1110.6,688.439 1111.16,688.439 1111.72,688.439 1112.28,688.439 1112.84,688.439 1113.4,688.439 1113.96,688.439 1114.52,688.439 1115.08,688.439 1115.64,688.439 1116.2,688.439 1116.76,688.439 1117.31,688.439 1117.87,688.439 1118.43,688.439 1118.99,688.439 1119.55,688.439 1120.11,688.439 1120.67,688.439 1121.23,688.439 1121.79,688.439 1122.35,688.439 1122.91,688.439 1123.47,688.439 1124.03,688.439 1124.59,688.439 1125.14,688.439 1125.7,688.439 1126.26,688.439 1126.82,688.439 1127.38,688.439 1127.94,688.439 1128.5,688.439 1129.06,688.439 1129.62,688.439 1130.18,688.439 1130.74,688.439 1131.3,688.439 1131.86,688.439 1132.41,688.439 1132.97,688.439 1133.53,688.439 1134.09,688.439 1134.65,688.439 1135.21,688.439 1135.77,688.439 1136.33,688.439 1136.89,688.439 1137.45,688.439 1138.01,688.439 1138.57,688.439 1139.13,688.439 1139.68,688.439 1140.24,688.439 1140.8,688.439 1141.36,688.439 1141.92,688.439 1142.48,688.439 1143.04,688.439 1143.6,688.439 1144.16,688.439 1144.72,688.439 1145.28,688.439 1145.84,688.439 1146.4,688.439 1146.96,688.439 1147.51,688.439 1148.07,688.439 1148.63,688.439 1149.19,688.439 1149.75,688.439 1150.31,688.439 1150.87,688.439 1151.43,688.439 1151.99,688.439 1152.55,688.439 1153.11,688.439 1153.67,688.439 1154.23,688.439 1154.78,688.439 1155.34,688.439 1155.9,688.439 1156.46,688.439 1157.02,688.439 1157.58,688.439 1158.14,688.439 1158.7,688.439 1159.26,688.439 1159.82,688.439 1160.38,688.439 1160.94,688.439 1161.5,688.439 1162.05,688.439 1162.61,688.439 1163.17,688.439 1163.73,688.439 1164.29,688.439 1164.85,688.439 1165.41,688.439 1165.97,688.439 1166.53,688.439 1167.09,688.439 1167.65,688.439 1168.21,688.439 1168.77,688.439 1169.33,688.439 1169.88,688.439 1170.44,688.439 1171,688.439 1171.56,688.439 1172.12,688.439 1172.68,688.439 1173.24,688.439 1173.8,688.439 1174.36,688.439 1174.92,688.439 1175.48,688.439 1176.04,688.439 1176.6,688.439 1177.15,688.439 1177.71,688.439 1178.27,688.439 1178.83,688.439 1179.39,688.439 1179.95,688.439 1180.51,688.439 1181.07,688.439 1181.63,688.439 1182.19,688.439 1182.75,688.439 1183.31,688.439 1183.87,688.439 1184.43,688.439 1184.98,688.439 1185.54,688.439 1186.1,688.439 1186.66,688.439 1187.22,688.439 1187.78,688.439 1188.34,688.439 1188.9,688.439 1189.46,688.439 1190.02,688.439 1190.58,688.439 1191.14,688.439 1191.7,688.439 1192.25,688.439 1192.81,688.439 1193.37,688.439 1193.93,688.439 1194.49,688.439 1195.05,688.439 1195.61,688.439 1196.17,688.439 1196.73,688.439 1197.29,688.439 1197.85,688.439 1198.41,688.439 1198.97,688.439 1199.52,688.439 1200.08,688.439 1200.64,688.439 1201.2,688.439 1201.76,688.439 1202.32,688.439 1202.88,688.439 1203.44,688.439 1204,688.439 1204.56,688.439 1205.12,688.439 1205.68,688.439 1206.24,688.439 1206.8,688.439 1207.35,688.439 1207.91,688.439 1208.47,688.439 1209.03,688.439 1209.59,688.439 1210.15,688.439 1210.71,688.439 1211.27,688.439 1211.83,688.439 1212.39,688.439 1212.95,688.439 1213.51,688.439 1214.07,688.439 1214.62,688.439 1215.18,688.439 1215.74,688.439 1216.3,688.439 1216.86,688.439 1217.42,688.439 1217.98,688.439 1218.54,688.439 1219.1,688.439 1219.66,688.439 1220.22,688.439 1220.78,688.439 1221.34,688.439 1221.89,688.439 1222.45,688.439 1223.01,688.439 1223.57,688.439 1224.13,688.439 1224.69,688.439 1225.25,688.439 1225.81,688.439 1226.37,688.439 1226.93,688.439 1227.49,688.439 1228.05,688.439 1228.61,688.439 1229.17,688.439 1229.72,688.439 1230.28,688.439 1230.84,688.439 1231.4,688.439 1231.96,688.439 1232.52,688.439 1233.08,688.439 1233.64,688.439 1234.2,688.439 1234.76,688.439 1235.32,688.439 1235.88,688.439 1236.44,688.439 1236.99,688.439 1237.55,688.439 1238.11,688.439 1238.67,688.439 1239.23,688.439 1239.79,688.439 1240.35,688.439 1240.91,688.439 1241.47,688.439 1242.03,688.439 1242.59,688.439 1243.15,688.439 1243.71,688.439 1244.26,688.439 1244.82,688.439 1245.38,688.439 1245.94,688.439 1246.5,688.439 1247.06,688.439 1247.62,688.439 1248.18,688.439 1248.74,688.439 1249.3,688.439 1249.86,688.439 1250.42,688.439 1250.98,688.439 1251.54,688.439 1252.09,688.439 1252.65,688.439 1253.21,688.439 1253.77,688.439 1254.33,688.439 1254.89,688.439 1255.45,688.439 1256.01,688.439 1256.57,688.439 1257.13,688.439 1257.69,688.439 1258.25,688.439 1258.81,688.439 1259.36,688.439 1259.92,688.439 1260.48,688.439 1261.04,688.439 1261.6,688.439 1262.16,688.439 1262.72,688.439 1263.28,688.439 1263.84,688.439 1264.4,688.439 1264.96,688.439 1265.52,688.439 1266.08,688.439 1266.63,688.439 1267.19,688.439 1267.75,688.439 1268.31,688.439 1268.87,688.439 1269.43,688.439 1269.99,688.439 1270.55,688.439 1271.11,688.439 1271.67,688.439 1272.23,688.439 1272.79,688.439 1273.35,688.439 1273.91,688.439 1274.46,688.439 1275.02,688.439 1275.58,688.439 1276.14,688.439 1276.7,688.439 1277.26,688.439 1277.82,688.439 1278.38,688.439 1278.94,688.439 1279.5,688.439 1280.06,688.439 1280.62,688.439 1281.18,688.439 1281.73,688.439 1282.29,688.439 1282.85,688.439 1283.41,688.439 1283.97,688.439 1284.53,688.439 1285.09,688.439 1285.65,688.439 1286.21,688.439 1286.77,688.439 1287.33,688.439 1287.89,688.439 1288.45,688.439 1289,688.439 1289.56,688.439 1290.12,688.439 1290.68,688.439 1291.24,688.439 1291.8,688.439 1292.36,688.439 1292.92,688.439 1293.48,688.439 1294.04,688.439 1294.6,688.439 1295.16,688.439 1295.72,688.439 1296.28,688.439 1296.83,688.439 1297.39,688.439 1297.95,688.439 1298.51,688.439 1299.07,688.439 1299.63,688.439 1300.19,688.439 1300.75,688.439 1301.31,688.439 1301.87,688.439 1302.43,688.439 1302.99,688.439 1303.55,688.439 1304.1,688.439 1304.66,688.439 1305.22,688.439 1305.78,688.439 1306.34,688.439 1306.9,688.439 1307.46,688.439 1308.02,688.439 1308.58,688.439 1309.14,688.439 1309.7,688.439 1310.26,688.439 1310.82,688.439 1311.38,688.439 1311.93,688.439 1312.49,688.439 1313.05,688.439 1313.61,688.439 1314.17,688.439 1314.73,688.439 1315.29,688.439 1315.85,688.439 1316.41,688.439 1316.97,688.439 1317.53,688.439 1318.09,688.439 1318.65,688.439 1319.2,688.439 1319.76,688.439 1320.32,688.439 1320.88,688.439 1321.44,688.439 1322,688.439 1322.56,688.439 1323.12,688.439 1323.68,688.439 1324.24,688.439 1324.8,688.439 1325.36,688.439 1325.92,688.439 1326.47,688.439 1327.03,688.439 1327.59,688.439 1328.15,688.439 1328.71,688.439 1329.27,688.439 1329.83,688.439 1330.39,688.439 1330.95,688.439 1331.51,688.439 1332.07,688.439 1332.63,688.439 1333.19,688.439 1333.75,688.439 1334.3,688.439 1334.86,688.439 1335.42,688.439 1335.98,688.439 1336.54,688.439 1337.1,688.439 1337.66,688.439 1338.22,688.439 1338.78,688.439 1339.34,688.439 1339.9,688.439 1340.46,688.439 1341.02,688.439 1341.57,688.439 1342.13,688.439 1342.69,688.439 1343.25,688.439 1343.81,688.439 1344.37,688.439 1344.93,688.439 1345.49,688.439 1346.05,688.439 1346.61,688.439 1347.17,688.439 1347.73,688.439 1348.29,688.439 1348.84,688.439 1349.4,688.439 1349.96,688.439 1350.52,688.439 1351.08,688.439 1351.64,688.439 1352.2,688.439 1352.76,688.439 1353.32,688.439 1353.88,688.439 1354.44,688.439 1355,688.439 1355.56,688.439 1356.12,688.439 1356.67,688.439 1357.23,688.439 1357.79,688.439 1358.35,688.439 1358.91,688.439 1359.47,688.439 1360.03,688.439 1360.59,688.439 1361.15,688.439 1361.71,688.439 1362.27,688.439 1362.83,688.439 1363.39,688.439 1363.94,688.439 1364.5,688.439 1365.06,688.439 1365.62,688.439 1366.18,688.439 1366.74,688.439 1367.3,688.439 1367.86,688.439 1368.42,688.439 1368.98,688.439 1369.54,688.439 1370.1,688.439 1370.66,688.439 1371.21,688.439 1371.77,688.439 1372.33,688.439 1372.89,688.439 1373.45,688.439 1374.01,688.439 1374.57,688.439 1375.13,688.439 1375.69,688.439 1376.25,688.439 1376.81,688.439 1377.37,688.439 1377.93,688.439 1378.49,688.439 1379.04,688.439 1379.6,688.439 1380.16,688.439 1380.72,688.439 1381.28,688.439 1381.84,688.439 1382.4,688.439 1382.96,688.439 1383.52,688.439 1384.08,688.439 1384.64,688.439 1385.2,688.439 1385.76,688.439 1386.31,688.439 1386.87,688.439 1387.43,688.439 1387.99,688.439 1388.55,688.439 1389.11,688.439 1389.67,688.439 1390.23,688.439 1390.79,688.439 1391.35,688.439 1391.91,688.439 1392.47,688.439 1393.03,688.439 1393.58,688.439 1394.14,688.439 1394.7,688.439 1395.26,688.439 1395.82,688.439 1396.38,688.439 1396.94,688.439 1397.5,688.439 1398.06,688.439 1398.62,688.439 1399.18,688.439 1399.74,688.439 1400.3,688.439 1400.86,688.439 1401.41,688.439 1401.97,688.439 1402.53,688.439 1403.09,688.439 1403.65,688.439 1404.21,688.439 1404.77,688.439 1405.33,688.439 1405.89,688.439 1406.45,688.439 1407.01,688.439 1407.57,688.439 1408.13,688.439 1408.68,688.439 1409.24,688.439 1409.8,688.439 1410.36,688.439 1410.92,688.439 1411.48,688.439 1412.04,688.439 1412.6,688.439 1413.16,688.439 1413.72,688.439 1414.28,688.439 1414.84,688.439 1415.4,688.439 1415.95,688.439 1416.51,688.439 1417.07,688.439 1417.63,688.439 1418.19,688.439 1418.75,688.439 1419.31,688.439 1419.87,688.439 1420.43,688.439 1420.99,688.439 1421.55,688.439 1422.11,688.439 1422.67,688.439 1423.23,688.439 1423.78,688.439 1424.34,688.439 1424.9,688.439 1425.46,688.439 1426.02,688.439 1426.58,688.439 1427.14,688.439 1427.7,688.439 1428.26,688.439 1428.82,688.439 1429.38,688.439 1429.94,688.439 1430.5,688.439 1431.05,688.439 1431.61,688.439 1432.17,688.439 1432.73,688.439 1433.29,688.439 1433.85,688.439 1434.41,688.439 1434.97,688.439 1435.53,688.439 1436.09,688.439 1436.65,688.439 1437.21,688.439 1437.77,688.439 1438.33,688.439 1438.88,688.439 1439.44,688.439 1440,688.439 1440.56,688.439 1441.12,688.439 1441.68,688.439 1442.24,688.439 1442.8,688.439 1443.36,688.439 1443.92,688.439 1444.48,688.439 1445.04,688.439 1445.6,688.439 1446.15,688.439 1446.71,688.439 1447.27,688.439 1447.83,688.439 1448.39,688.439 1448.95,688.439 1449.51,688.439 1450.07,688.439 1450.63,688.439 1451.19,688.439 1451.75,688.439 1452.31,688.439 1452.87,688.439 1453.42,688.439 1453.98,688.439 1454.54,688.439 1455.1,688.439 1455.66,688.439 1456.22,688.439 1456.78,688.439 1457.34,688.439 1457.9,688.439 1458.46,688.439 1459.02,688.439 1459.58,688.439 1460.14,688.439 1460.7,688.439 1461.25,688.439 1461.81,688.439 1462.37,688.439 1462.93,688.439 1463.49,688.439 1464.05,688.439 1464.61,688.439 1465.17,688.439 1465.73,688.439 1466.29,688.439 1466.85,688.439 1467.41,688.439 1467.97,688.439 1468.52,688.439 1469.08,688.439 1469.64,688.439 1470.2,688.439 1470.76,688.439 1471.32,688.439 1471.88,688.439 1472.44,688.439 1473,688.439 1473.56,688.439 1474.12,688.439 1474.68,688.439 1475.24,688.439 1475.79,688.439 1476.35,688.439 1476.91,688.439 1477.47,688.439 1478.03,688.439 1478.59,688.439 1479.15,688.439 1479.71,688.439 1480.27,688.439 1480.83,688.439 1481.39,688.439 1481.95,688.439 1482.51,688.439 1483.07,688.439 1483.62,688.439 1484.18,688.439 1484.74,688.439 1485.3,688.439 1485.86,688.439 1486.42,688.439 1486.98,688.439 1487.54,688.439 1488.1,688.439 1488.66,688.439 1489.22,688.439 1489.78,688.439 1490.34,688.439 1490.89,688.439 1491.45,688.439 1492.01,688.439 1492.57,688.439 1493.13,688.439 1493.69,688.439 1494.25,688.439 1494.81,688.439 1495.37,688.439 1495.93,688.439 1496.49,688.439 1497.05,688.439 1497.61,688.439 1498.16,688.439 1498.72,688.439 1499.28,688.439 1499.84,688.439 1500.4,688.439 1500.96,688.439 1501.52,688.439 1502.08,688.439 1502.64,688.439 1503.2,688.439 1503.76,688.439 1504.32,688.439 1504.88,688.439 1505.44,688.439 1505.99,688.439 1506.55,688.439 1507.11,688.439 1507.67,688.439 1508.23,688.439 1508.79,688.439 1509.35,688.439 1509.91,688.439 1510.47,688.439 1511.03,688.439 1511.59,688.439 1512.15,688.439 1512.71,688.439 1513.26,688.439 1513.82,688.439 1514.38,688.439 1514.94,688.439 1515.5,688.439 1516.06,688.439 1516.62,688.439 1517.18,688.439 1517.74,688.439 1518.3,688.439 1518.86,688.439 1519.42,688.439 1519.98,688.439 1520.53,688.439 1521.09,688.439 1521.65,688.439 1522.21,688.439 1522.77,688.439 1523.33,688.439 1523.89,688.439 1524.45,688.439 1525.01,688.439 1525.57,688.439 1526.13,688.439 1526.69,688.439 1527.25,688.439 1527.81,688.439 1528.36,688.439 1528.92,688.439 1529.48,688.439 1530.04,688.439 1530.6,688.439 1531.16,688.439 1531.72,688.439 1532.28,688.439 1532.84,688.439 1533.4,688.439 1533.96,688.439 1534.52,688.439 1535.08,688.439 1535.63,688.439 1536.19,688.439 1536.75,688.439 1537.31,688.439 1537.87,688.439 1538.43,688.439 1538.99,688.439 1539.55,688.439 1540.11,688.439 1540.67,688.439 1541.23,688.439 1541.79,688.439 1542.35,688.439 1542.9,688.439 1543.46,688.439 1544.02,688.439 1544.58,688.439 1545.14,688.439 1545.7,688.439 1546.26,688.439 1546.82,688.439 1547.38,688.439 1547.94,688.439 1548.5,688.439 1549.06,688.439 1549.62,688.439 1550.18,688.439 1550.73,688.439 1551.29,688.439 1551.85,688.439 1552.41,688.439 1552.97,688.439 1553.53,688.439 1554.09,688.439 1554.65,688.439 1555.21,688.439 1555.77,688.439 1556.33,688.439 1556.89,688.439 1557.45,688.439 1558,688.439 1558.56,688.439 1559.12,688.439 1559.68,688.439 1560.24,688.439 1560.8,688.439 1561.36,688.439 1561.92,688.439 1562.48,688.439 1563.04,688.439 1563.6,688.439 1564.16,688.439 1564.72,688.439 1565.28,688.439 1565.83,688.439 1566.39,688.439 1566.95,688.439 1567.51,688.439 1568.07,688.439 1568.63,688.439 1569.19,688.439 1569.75,688.439 1570.31,688.439 1570.87,688.439 1571.43,688.439 1571.99,688.439 1572.55,688.439 1573.1,688.439 1573.66,688.439 1574.22,688.439 1574.78,688.439 1575.34,688.439 1575.9,688.439 1576.46,688.439 1577.02,688.439 1577.58,688.439 1578.14,688.439 1578.7,688.439 1579.26,688.439 1579.82,688.439 1580.37,688.439 1580.93,688.439 1581.49,688.439 1582.05,688.439 1582.61,688.439 1583.17,688.439 1583.73,688.439 1584.29,688.439 1584.85,688.439 1585.41,688.439 1585.97,688.439 1586.53,688.439 1587.09,688.439 1587.65,688.439 1588.2,688.439 1588.76,688.439 1589.32,688.439 1589.88,688.439 1590.44,688.439 1591,688.439 1591.56,688.439 1592.12,688.439 1592.68,688.439 1593.24,688.439 1593.8,688.439 1594.36,688.439 1594.92,688.439 1595.47,688.439 1596.03,688.439 1596.59,688.439 1597.15,688.439 1597.71,688.439 1598.27,688.439 1598.83,688.439 1599.39,688.439 1599.95,688.439 1600.51,688.439 1601.07,688.439 1601.63,688.439 1602.19,688.439 1602.74,688.439 1603.3,688.439 1603.86,688.439 1604.42,688.439 1604.98,688.439 1605.54,688.439 1606.1,688.439 1606.66,688.439 1607.22,688.439 1607.78,688.439 1608.34,688.439 1608.9,688.439 1609.46,688.439 1610.02,688.439 1610.57,688.439 1611.13,688.439 1611.69,688.439 1612.25,688.439 1612.81,688.439 1613.37,688.439 1613.93,688.439 1614.49,688.439 1615.05,688.439 1615.61,688.439 1616.17,688.439 1616.73,688.439 1617.29,688.439 1617.84,688.439 1618.4,688.439 1618.96,688.439 1619.52,688.439 1620.08,688.439 1620.64,688.439 1621.2,688.439 1621.76,688.439 1622.32,688.439 1622.88,688.439 1623.44,688.439 1624,688.439 1624.56,688.439 1625.11,688.439 1625.67,688.439 1626.23,688.439 1626.79,688.439 1627.35,688.439 1627.91,688.439 1628.47,688.439 1629.03,688.439 1629.59,688.439 1630.15,688.439 1630.71,688.439 1631.27,688.439 1631.83,688.439 1632.39,688.439 1632.94,688.439 1633.5,688.439 1634.06,688.439 1634.62,688.439 1635.18,688.439 1635.74,688.439 1636.3,688.439 1636.86,688.439 1637.42,688.439 1637.98,688.439 1638.54,688.439 1639.1,688.439 1639.66,688.439 1640.21,688.439 1640.77,688.439 1641.33,688.439 1641.89,688.439 1642.45,688.439 1643.01,688.439 1643.57,688.439 1644.13,688.439 1644.69,688.439 1645.25,688.439 1645.81,688.439 1646.37,688.439 1646.93,688.439 1647.48,688.439 1648.04,688.439 1648.6,688.439 1649.16,688.439 1649.72,688.439 1650.28,688.439 1650.84,688.439 1651.4,688.439 1651.96,688.439 1652.52,688.439 1653.08,688.439 1653.64,688.439 1654.2,688.439 1654.76,688.439 1655.31,688.439 1655.87,688.439 1656.43,688.439 1656.99,688.439 1657.55,688.439 1658.11,688.439 1658.67,688.439 1659.23,688.439 1659.79,688.439 1660.35,688.439 1660.91,688.439 1661.47,688.439 1662.03,688.439 1662.58,688.439 1663.14,688.439 1663.7,688.439 1664.26,688.439 1664.82,688.439 1665.38,688.439 1665.94,688.439 1666.5,688.439 1667.06,688.439 1667.62,688.439 1668.18,688.439 1668.74,688.439 1669.3,688.439 1669.85,688.439 1670.41,688.439 1670.97,688.439 1671.53,688.439 1672.09,688.439 1672.65,688.439 1673.21,688.439 1673.77,688.439 1674.33,688.439 1674.89,688.439 1675.45,688.439 1676.01,688.439 1676.57,688.439 1677.13,688.439 1677.68,688.439 1678.24,688.439 1678.8,688.439 1679.36,688.439 1679.92,688.439 1680.48,688.439 1681.04,688.439 1681.6,688.439 1682.16,688.439 1682.72,688.439 1683.28,688.439 1683.84,688.439 1684.4,688.439 1684.95,688.439 1685.51,688.439 1686.07,688.439 1686.63,688.439 1687.19,688.439 1687.75,688.439 1688.31,688.439 1688.87,688.439 1689.43,688.439 1689.99,688.439 1690.55,688.439 1691.11,688.439 1691.67,688.439 1692.23,688.439 1692.78,688.439 1693.34,688.439 1693.9,688.439 1694.46,688.439 1695.02,688.439 1695.58,688.439 1696.14,688.439 1696.7,688.439 1697.26,688.439 1697.82,688.439 1698.38,688.439 1698.94,688.439 1699.5,688.439 1700.05,688.439 1700.61,688.439 1701.17,688.439 1701.73,688.439 1702.29,688.439 1702.85,688.439 1703.41,688.439 1703.97,688.439 1704.53,688.439 1705.09,688.439 1705.65,688.439 1706.21,688.439 1706.77,688.439 1707.32,688.439 1707.88,688.439 1708.44,688.439 1709,688.439 1709.56,688.439 1710.12,688.439 1710.68,688.439 1711.24,688.439 1711.8,688.439 1712.36,688.439 1712.92,688.439 1713.48,688.439 1714.04,688.439 1714.6,688.439 1715.15,688.439 1715.71,688.439 1716.27,688.439 1716.83,688.439 1717.39,688.439 1717.95,688.439 1718.51,688.439 1719.07,688.439 1719.63,688.439 1720.19,688.439 1720.75,688.439 1721.31,688.439 1721.87,688.439 1722.42,688.439 1722.98,688.439 1723.54,688.439 1724.1,688.439 1724.66,688.439 1725.22,688.439 1725.78,688.439 1726.34,688.439 1726.9,688.439 1727.46,688.439 1728.02,688.439 1728.58,688.439 1729.14,688.439 1729.69,688.439 1730.25,688.439 1730.81,688.439 1731.37,688.439 1731.93,688.439 1732.49,688.439 1733.05,688.439 1733.61,688.439 1734.17,688.439 1734.73,688.439 1735.29,688.439 1735.85,688.439 1736.41,688.439 1736.97,688.439 1737.52,688.439 1738.08,688.439 1738.64,688.439 1739.2,688.439 1739.76,688.439 1740.32,688.439 1740.88,688.439 1741.44,688.439 1742,688.439 1742.56,688.439 1743.12,688.439 1743.68,688.439 1744.24,688.439 1744.79,688.439 1745.35,688.439 1745.91,688.439 1746.47,688.439 1747.03,688.439 1747.59,688.439 1748.15,688.439 1748.71,688.439 1749.27,688.439 1749.83,688.439 1750.39,688.439 1750.95,688.439 1751.51,688.439 1752.06,688.439 1752.62,688.439 1753.18,688.439 1753.74,688.439 1754.3,688.439 1754.86,688.439 1755.42,688.439 1755.98,688.439 1756.54,688.439 1757.1,688.439 1757.66,688.439 1758.22,688.439 1758.78,688.439 1759.34,688.439 1759.89,688.439 1760.45,688.439 1761.01,688.439 1761.57,688.439 1762.13,688.439 1762.69,688.439 1763.25,688.439 1763.81,688.439 1764.37,688.439 1764.93,688.439 1765.49,688.439 1766.05,688.439 1766.61,688.439 1767.16,688.439 1767.72,688.439 1768.28,688.439 1768.84,688.439 1769.4,688.439 1769.96,688.439 1770.52,688.439 1771.08,688.439 1771.64,688.439 1772.2,688.439 1772.76,688.439 1773.32,688.439 1773.88,688.439 1774.43,688.439 1774.99,688.439 1775.55,688.439 1776.11,688.439 1776.67,688.439 1777.23,688.439 1777.79,688.439 1778.35,688.439 1778.91,688.439 1779.47,688.439 1780.03,688.439 1780.59,688.439 1781.15,688.439 1781.71,688.439 1782.26,688.439 1782.82,688.439 1783.38,688.439 1783.94,688.439 1784.5,688.439 1785.06,688.439 1785.62,688.439 1786.18,688.439 1786.74,688.439 1787.3,688.439 1787.86,688.439 1788.42,688.439 1788.98,688.439 1789.53,688.439 1790.09,688.439 1790.65,688.439 1791.21,688.439 1791.77,688.439 1792.33,688.439 1792.89,688.439 1793.45,688.439 1794.01,688.439 1794.57,688.439 1795.13,688.439 1795.69,688.439 1796.25,688.439 1796.8,688.439 1797.36,688.439 1797.92,688.439 1798.48,688.439 1799.04,688.439 1799.6,688.439 1800.16,688.439 1800.72,688.439 1801.28,688.439 1801.84,688.439 1802.4,688.439 1802.96,688.439 1803.52,688.439 1804.08,688.439 1804.63,688.439 1805.19,688.439 1805.75,688.439 1806.31,688.439 1806.87,688.439 1807.43,688.439 1807.99,688.439 1808.55,688.439 1809.11,688.439 1809.67,688.439 1810.23,688.439 1810.79,688.439 1811.35,688.439 1811.9,688.439 1812.46,688.439 1813.02,688.439 1813.58,688.439 1814.14,688.439 1814.7,688.439 1815.26,688.439 1815.82,688.439 1816.38,688.439 1816.94,688.439 1817.5,688.439 1818.06,688.439 1818.62,688.439 1819.18,688.439 1819.73,688.439 1820.29,688.439 1820.85,688.439 1821.41,688.439 1821.97,688.439 1822.53,688.439 1823.09,688.439 1823.65,688.439 1824.21,688.439 1824.77,688.439 1825.33,688.439 1825.89,688.439 1826.45,688.439 1827,688.439 1827.56,688.439 1828.12,688.439 1828.68,688.439 1829.24,688.439 1829.8,688.439 1830.36,688.439 1830.92,688.439 1831.48,688.439 1832.04,688.439 1832.6,688.439 1833.16,688.439 1833.72,688.439 1834.27,688.439 1834.83,688.439 1835.39,688.439 1835.95,688.439 1836.51,688.439 1837.07,688.439 1837.63,688.439 1838.19,688.439 \"/>\n<path clip-path=\"url(#clip433)\" d=\"M720.247 684.938 L720.806 684.938 L721.365 684.938 L721.924 684.938 L722.484 684.938 L723.043 684.938 L723.602 684.938 L724.161 684.938 L724.721 684.938 L725.28 684.938 L725.839 684.938 L726.398 684.938 L726.958 684.938 L727.517 684.938 L728.076 684.938 L728.635 684.938 L729.195 684.938 L729.754 684.938 L730.313 684.938 L730.872 684.938 L731.432 684.938 L731.991 684.938 L732.55 684.938 L733.109 684.938 L733.669 684.938 L734.228 684.938 L734.787 684.938 L735.346 684.938 L735.906 684.938 L736.465 684.938 L737.024 684.938 L737.583 684.938 L738.143 684.938 L738.702 684.938 L739.261 684.938 L739.82 684.938 L740.38 684.938 L740.939 684.938 L741.498 684.938 L742.057 684.938 L742.617 684.938 L743.176 684.938 L743.735 684.938 L744.294 684.938 L744.854 684.938 L745.413 684.938 L745.972 684.938 L746.531 684.938 L747.091 684.938 L747.65 684.938 L748.209 684.938 L748.768 684.938 L749.328 684.938 L749.887 684.938 L750.446 684.938 L751.005 684.938 L751.565 684.938 L752.124 684.938 L752.683 684.938 L753.242 684.938 L753.802 684.938 L754.361 684.938 L754.92 684.938 L755.479 684.938 L756.039 684.938 L756.598 684.938 L757.157 684.938 L757.716 684.938 L758.276 684.938 L758.835 684.938 L759.394 684.938 L759.953 684.938 L760.513 684.938 L761.072 684.938 L761.631 684.938 L762.19 684.938 L762.75 684.938 L763.309 684.938 L763.868 684.938 L764.427 684.938 L764.987 684.938 L765.546 684.938 L766.105 684.938 L766.664 684.938 L767.224 684.938 L767.783 684.938 L768.342 684.938 L768.901 684.938 L769.461 684.938 L770.02 684.938 L770.579 684.938 L771.138 684.938 L771.698 684.938 L772.257 684.938 L772.816 684.938 L773.375 684.938 L773.935 684.938 L774.494 684.938 L775.053 684.938 L775.612 684.938 L776.172 684.938 L776.731 684.938 L777.29 684.938 L777.849 684.938 L778.409 684.938 L778.968 684.938 L779.527 684.938 L780.086 684.938 L780.646 684.938 L781.205 684.938 L781.764 684.938 L782.323 684.938 L782.883 684.938 L783.442 684.938 L784.001 684.938 L784.56 684.938 L785.12 684.938 L785.679 684.938 L786.238 684.938 L786.797 684.938 L787.357 684.938 L787.916 684.938 L788.475 684.938 L789.034 684.938 L789.594 684.938 L790.153 684.938 L790.712 684.938 L791.271 684.938 L791.831 684.938 L792.39 684.938 L792.949 684.938 L793.508 684.938 L794.068 684.938 L794.627 684.938 L795.186 684.938 L795.745 684.938 L796.305 684.938 L796.864 684.938 L797.423 684.938 L797.982 684.938 L798.542 684.938 L799.101 684.938 L799.66 684.938 L800.219 684.938 L800.779 684.938 L801.338 684.938 L801.897 684.938 L802.456 684.938 L803.016 684.938 L803.575 684.938 L804.134 684.938 L804.693 684.938 L805.253 684.938 L805.812 684.938 L806.371 684.938 L806.931 684.938 L807.49 684.938 L808.049 684.938 L808.608 684.938 L809.168 684.938 L809.727 684.938 L810.286 684.938 L810.845 684.938 L811.405 684.938 L811.964 684.938 L812.523 684.938 L813.082 684.938 L813.642 684.938 L814.201 684.938 L814.76 684.938 L815.319 684.938 L815.879 684.938 L816.438 684.938 L816.997 684.938 L817.556 684.938 L818.116 684.938 L818.675 684.938 L819.234 684.938 L819.793 684.938 L820.353 684.938 L820.912 684.938 L821.471 684.938 L822.03 684.938 L822.59 684.938 L823.149 684.938 L823.708 684.938 L824.267 684.938 L824.827 684.938 L825.386 684.938 L825.945 684.938 L826.504 684.938 L827.064 684.938 L827.623 684.938 L828.182 684.938 L828.741 684.938 L829.301 684.938 L829.86 684.938 L830.419 684.938 L830.978 684.938 L831.538 684.938 L832.097 684.938 L832.656 684.938 L833.215 684.938 L833.775 684.938 L834.334 684.938 L834.893 684.938 L835.452 684.938 L836.012 684.938 L836.571 684.938 L837.13 684.938 L837.689 684.938 L838.249 684.938 L838.808 684.938 L839.367 684.938 L839.926 684.938 L840.486 684.938 L841.045 684.938 L841.604 684.938 L842.163 684.938 L842.723 684.938 L843.282 684.938 L843.841 684.938 L844.4 684.938 L844.96 684.938 L845.519 684.938 L846.078 684.938 L846.637 684.938 L847.197 684.938 L847.756 684.938 L848.315 684.938 L848.874 684.938 L849.434 684.938 L849.993 684.938 L850.552 684.938 L851.111 684.938 L851.671 684.938 L852.23 684.938 L852.789 684.938 L853.348 684.938 L853.908 684.938 L854.467 684.938 L855.026 684.938 L855.585 684.938 L856.145 684.938 L856.704 684.938 L857.263 684.938 L857.822 684.938 L858.382 684.938 L858.941 684.938 L859.5 684.938 L860.059 684.938 L860.619 684.938 L861.178 684.938 L861.737 684.938 L862.296 684.938 L862.856 684.938 L863.415 684.938 L863.974 684.938 L864.533 684.938 L865.093 684.938 L865.652 684.938 L866.211 684.938 L866.77 684.938 L867.33 684.938 L867.889 684.938 L868.448 684.938 L869.007 684.938 L869.567 684.938 L870.126 684.938 L870.685 684.938 L871.244 684.938 L871.804 684.938 L872.363 684.938 L872.922 684.938 L873.481 684.938 L874.041 684.938 L874.6 684.938 L875.159 684.938 L875.718 684.938 L876.278 684.938 L876.837 684.938 L877.396 684.938 L877.955 684.938 L878.515 684.938 L879.074 684.938 L879.633 684.938 L880.192 684.938 L880.752 684.938 L881.311 684.938 L881.87 684.938 L882.429 684.938 L882.989 684.938 L883.548 684.938 L884.107 684.938 L884.666 684.938 L885.226 684.938 L885.785 684.938 L886.344 684.938 L886.903 684.938 L887.463 684.938 L888.022 684.938 L888.581 684.938 L889.14 684.938 L889.7 684.938 L890.259 684.938 L890.818 684.938 L891.377 684.938 L891.937 684.938 L892.496 684.938 L893.055 684.938 L893.614 684.938 L894.174 684.938 L894.733 684.938 L895.292 684.938 L895.851 684.938 L896.411 684.938 L896.97 684.938 L897.529 684.938 L898.088 684.938 L898.648 684.938 L899.207 684.938 L899.766 684.938 L900.325 684.938 L900.885 684.938 L901.444 684.938 L902.003 684.938 L902.562 684.938 L903.122 684.938 L903.681 684.938 L904.24 684.938 L904.799 684.938 L905.359 684.938 L905.918 684.938 L906.477 684.938 L907.036 684.938 L907.596 684.938 L908.155 684.938 L908.714 684.938 L909.273 684.938 L909.833 684.938 L910.392 684.938 L910.951 684.938 L911.51 684.938 L912.07 684.938 L912.629 684.938 L913.188 684.938 L913.747 684.938 L914.307 684.938 L914.866 684.938 L915.425 684.938 L915.984 684.938 L916.544 684.938 L917.103 684.938 L917.662 684.938 L918.221 684.938 L918.781 684.938 L919.34 684.938 L919.899 684.938 L920.458 684.938 L921.018 684.938 L921.577 684.938 L922.136 684.938 L922.695 684.938 L923.255 684.938 L923.814 684.938 L924.373 684.938 L924.932 684.938 L925.492 684.938 L926.051 684.938 L926.61 684.938 L927.169 684.938 L927.729 684.938 L928.288 684.938 L928.847 684.938 L929.406 684.938 L929.966 684.938 L930.525 684.938 L931.084 684.938 L931.644 684.938 L932.203 684.938 L932.762 684.938 L933.321 684.938 L933.881 684.938 L934.44 684.938 L934.999 684.938 L935.558 684.938 L936.118 684.938 L936.677 684.938 L937.236 684.938 L937.795 684.938 L938.355 684.938 L938.914 684.938 L939.473 684.938 L940.032 684.938 L940.592 684.938 L941.151 684.938 L941.71 684.938 L942.269 684.938 L942.829 684.938 L943.388 684.938 L943.947 684.938 L944.506 684.938 L945.066 684.938 L945.625 684.938 L946.184 684.938 L946.743 684.938 L947.303 684.938 L947.862 684.938 L948.421 684.938 L948.98 684.938 L949.54 684.938 L950.099 684.938 L950.658 684.938 L951.217 684.938 L951.777 684.938 L952.336 684.938 L952.895 684.938 L953.454 684.938 L954.014 684.938 L954.573 684.938 L955.132 684.938 L955.691 684.938 L956.251 684.938 L956.81 684.938 L957.369 684.938 L957.928 684.938 L958.488 684.938 L959.047 684.938 L959.606 684.938 L960.165 684.938 L960.725 684.938 L961.284 684.938 L961.843 684.938 L962.402 684.938 L962.962 684.938 L963.521 684.938 L964.08 684.938 L964.639 684.938 L965.199 684.938 L965.758 684.938 L966.317 684.938 L966.876 684.938 L967.436 684.938 L967.995 684.938 L968.554 684.938 L969.113 684.938 L969.673 684.938 L970.232 684.938 L970.791 684.938 L971.35 684.938 L971.91 684.938 L972.469 684.938 L973.028 684.938 L973.587 684.938 L974.147 684.938 L974.706 684.938 L975.265 684.938 L975.824 684.938 L976.384 684.938 L976.943 684.938 L977.502 684.938 L978.061 684.938 L978.621 684.938 L979.18 684.938 L979.739 684.938 L980.298 684.938 L980.858 684.938 L981.417 684.938 L981.976 684.938 L982.535 684.938 L983.095 684.938 L983.654 684.938 L984.213 684.938 L984.772 684.938 L985.332 684.938 L985.891 684.938 L986.45 684.938 L987.009 684.938 L987.569 684.938 L988.128 684.938 L988.687 684.938 L989.246 684.938 L989.806 684.938 L990.365 684.938 L990.924 684.938 L991.483 684.938 L992.043 684.938 L992.602 684.938 L993.161 684.938 L993.72 684.938 L994.28 684.938 L994.839 684.938 L995.398 684.938 L995.957 684.938 L996.517 684.938 L997.076 684.938 L997.635 684.938 L998.194 684.938 L998.754 684.938 L999.313 684.938 L999.872 684.938 L1000.43 684.938 L1000.99 684.938 L1001.55 684.938 L1002.11 684.938 L1002.67 684.938 L1003.23 684.938 L1003.79 684.938 L1004.35 684.938 L1004.91 684.938 L1005.46 684.938 L1006.02 684.938 L1006.58 684.938 L1007.14 684.938 L1007.7 684.938 L1008.26 684.938 L1008.82 684.938 L1009.38 684.938 L1009.94 684.938 L1010.5 684.938 L1011.06 684.938 L1011.62 684.938 L1012.18 684.938 L1012.73 684.938 L1013.29 684.938 L1013.85 684.938 L1014.41 684.938 L1014.97 684.938 L1015.53 684.938 L1016.09 684.938 L1016.65 684.938 L1017.21 684.938 L1017.77 684.938 L1018.33 684.938 L1018.89 684.938 L1019.45 684.938 L1020.01 684.938 L1020.56 684.938 L1021.12 684.938 L1021.68 684.938 L1022.24 684.938 L1022.8 684.938 L1023.36 684.938 L1023.92 684.938 L1024.48 684.938 L1025.04 684.938 L1025.6 684.938 L1026.16 684.938 L1026.72 684.938 L1027.28 684.938 L1027.83 684.938 L1028.39 684.938 L1028.95 684.938 L1029.51 684.938 L1030.07 684.938 L1030.63 684.938 L1031.19 684.938 L1031.75 684.938 L1032.31 684.938 L1032.87 684.938 L1033.43 684.938 L1033.99 684.938 L1034.55 684.938 L1035.1 684.938 L1035.66 684.938 L1036.22 684.938 L1036.78 684.938 L1037.34 684.938 L1037.9 684.938 L1038.46 684.938 L1039.02 684.938 L1039.58 684.938 L1040.14 684.938 L1040.7 684.938 L1041.26 684.938 L1041.82 684.938 L1042.38 684.938 L1042.93 684.938 L1043.49 684.938 L1044.05 684.938 L1044.61 684.938 L1045.17 684.938 L1045.73 684.938 L1046.29 684.938 L1046.85 684.938 L1047.41 684.938 L1047.97 684.938 L1048.53 684.938 L1049.09 684.938 L1049.65 684.938 L1050.2 684.938 L1050.76 684.938 L1051.32 684.938 L1051.88 684.938 L1052.44 684.938 L1053 684.938 L1053.56 684.938 L1054.12 684.938 L1054.68 684.938 L1055.24 684.938 L1055.8 684.938 L1056.36 684.938 L1056.92 684.938 L1057.48 684.938 L1058.03 684.938 L1058.59 684.938 L1059.15 684.938 L1059.71 684.938 L1060.27 684.938 L1060.83 684.938 L1061.39 684.938 L1061.95 684.938 L1062.51 684.938 L1063.07 684.938 L1063.63 684.938 L1064.19 684.938 L1064.75 684.938 L1065.3 684.938 L1065.86 684.938 L1066.42 684.938 L1066.98 684.938 L1067.54 684.938 L1068.1 684.938 L1068.66 684.938 L1069.22 684.938 L1069.78 684.938 L1070.34 684.938 L1070.9 684.938 L1071.46 684.938 L1072.02 684.938 L1072.57 684.938 L1073.13 684.938 L1073.69 684.938 L1074.25 684.938 L1074.81 684.938 L1075.37 684.938 L1075.93 684.938 L1076.49 684.938 L1077.05 684.938 L1077.61 684.938 L1078.17 684.938 L1078.73 684.938 L1079.29 684.938 L1079.85 684.938 L1080.4 684.938 L1080.96 684.938 L1081.52 684.938 L1082.08 684.938 L1082.64 684.938 L1083.2 684.938 L1083.76 684.938 L1084.32 684.938 L1084.88 684.938 L1085.44 684.938 L1086 684.938 L1086.56 684.938 L1087.12 684.938 L1087.67 684.938 L1088.23 684.938 L1088.79 684.938 L1089.35 684.938 L1089.91 684.938 L1090.47 684.938 L1091.03 684.938 L1091.59 684.938 L1092.15 684.938 L1092.71 684.938 L1093.27 684.938 L1093.83 684.938 L1094.39 684.938 L1094.94 684.938 L1095.5 684.938 L1096.06 684.938 L1096.62 684.938 L1097.18 684.938 L1097.74 684.938 L1098.3 684.938 L1098.86 684.938 L1099.42 684.938 L1099.98 684.938 L1100.54 684.938 L1101.1 684.938 L1101.66 684.938 L1102.22 684.938 L1102.77 684.938 L1103.33 684.938 L1103.89 684.938 L1104.45 684.938 L1105.01 684.938 L1105.57 684.938 L1106.13 684.938 L1106.69 684.938 L1107.25 684.938 L1107.81 684.938 L1108.37 684.938 L1108.93 684.938 L1109.49 684.938 L1110.04 684.938 L1110.6 684.938 L1111.16 684.938 L1111.72 684.938 L1112.28 684.938 L1112.84 684.938 L1113.4 684.938 L1113.96 684.938 L1114.52 684.938 L1115.08 684.938 L1115.64 684.938 L1116.2 684.938 L1116.76 684.938 L1117.31 684.938 L1117.87 684.938 L1118.43 684.938 L1118.99 684.938 L1119.55 684.938 L1120.11 684.938 L1120.67 684.938 L1121.23 684.938 L1121.79 684.938 L1122.35 684.938 L1122.91 684.938 L1123.47 684.938 L1124.03 684.938 L1124.59 684.938 L1125.14 684.938 L1125.7 684.938 L1126.26 684.938 L1126.82 684.938 L1127.38 684.938 L1127.94 684.938 L1128.5 684.938 L1129.06 684.938 L1129.62 684.938 L1130.18 684.938 L1130.74 684.938 L1131.3 684.938 L1131.86 684.938 L1132.41 684.938 L1132.97 684.938 L1133.53 684.938 L1134.09 684.938 L1134.65 684.938 L1135.21 684.938 L1135.77 684.938 L1136.33 684.938 L1136.89 684.938 L1137.45 684.938 L1138.01 684.938 L1138.57 684.938 L1139.13 684.938 L1139.68 684.938 L1140.24 684.938 L1140.8 684.938 L1141.36 684.938 L1141.92 684.938 L1142.48 684.938 L1143.04 684.938 L1143.6 684.938 L1144.16 684.938 L1144.72 684.938 L1145.28 684.938 L1145.84 684.938 L1146.4 684.938 L1146.96 684.938 L1147.51 684.938 L1148.07 684.938 L1148.63 684.938 L1149.19 684.938 L1149.75 684.938 L1150.31 684.938 L1150.87 684.938 L1151.43 684.938 L1151.99 684.938 L1152.55 684.938 L1153.11 684.938 L1153.67 684.938 L1154.23 684.938 L1154.78 684.938 L1155.34 684.938 L1155.9 684.938 L1156.46 684.938 L1157.02 684.938 L1157.58 684.938 L1158.14 684.938 L1158.7 684.938 L1159.26 684.938 L1159.82 684.938 L1160.38 684.938 L1160.94 684.938 L1161.5 684.938 L1162.05 684.938 L1162.61 684.938 L1163.17 684.938 L1163.73 684.938 L1164.29 684.938 L1164.85 684.938 L1165.41 684.938 L1165.97 684.938 L1166.53 684.938 L1167.09 684.938 L1167.65 684.938 L1168.21 684.938 L1168.77 684.938 L1169.33 684.938 L1169.88 684.938 L1170.44 684.938 L1171 684.938 L1171.56 684.938 L1172.12 684.938 L1172.68 684.938 L1173.24 684.938 L1173.8 684.938 L1174.36 684.938 L1174.92 684.938 L1175.48 684.938 L1176.04 684.938 L1176.6 684.938 L1177.15 684.938 L1177.71 684.938 L1178.27 684.938 L1178.83 684.938 L1179.39 684.938 L1179.95 684.938 L1180.51 684.938 L1181.07 684.938 L1181.63 684.938 L1182.19 684.938 L1182.75 684.938 L1183.31 684.938 L1183.87 684.938 L1184.43 684.938 L1184.98 684.938 L1185.54 684.938 L1186.1 684.938 L1186.66 684.938 L1187.22 684.938 L1187.78 684.938 L1188.34 684.938 L1188.9 684.938 L1189.46 684.938 L1190.02 684.938 L1190.58 684.938 L1191.14 684.938 L1191.7 684.938 L1192.25 684.938 L1192.81 684.938 L1193.37 684.938 L1193.93 684.938 L1194.49 684.938 L1195.05 684.938 L1195.61 684.938 L1196.17 684.938 L1196.73 684.938 L1197.29 684.938 L1197.85 684.938 L1198.41 684.938 L1198.97 684.938 L1199.52 684.938 L1200.08 684.938 L1200.64 684.938 L1201.2 684.938 L1201.76 684.938 L1202.32 684.938 L1202.88 684.938 L1203.44 684.938 L1204 684.938 L1204.56 684.938 L1205.12 684.938 L1205.68 684.938 L1206.24 684.938 L1206.8 684.938 L1207.35 684.938 L1207.91 684.938 L1208.47 684.938 L1209.03 684.938 L1209.59 684.938 L1210.15 684.938 L1210.71 684.938 L1211.27 684.938 L1211.83 684.938 L1212.39 684.938 L1212.95 684.938 L1213.51 684.938 L1214.07 684.938 L1214.62 684.938 L1215.18 684.938 L1215.74 684.938 L1216.3 684.938 L1216.86 684.938 L1217.42 684.938 L1217.98 684.938 L1218.54 684.938 L1219.1 684.938 L1219.66 684.938 L1220.22 684.938 L1220.78 684.938 L1221.34 684.938 L1221.89 684.938 L1222.45 684.938 L1223.01 684.938 L1223.57 684.938 L1224.13 684.938 L1224.69 684.938 L1225.25 684.938 L1225.81 684.938 L1226.37 684.938 L1226.93 684.938 L1227.49 684.938 L1228.05 684.938 L1228.61 684.938 L1229.17 684.938 L1229.72 684.938 L1230.28 684.938 L1230.84 684.938 L1231.4 684.938 L1231.96 684.938 L1232.52 684.938 L1233.08 684.938 L1233.64 684.938 L1234.2 684.938 L1234.76 684.938 L1235.32 684.938 L1235.88 684.938 L1236.44 684.938 L1236.99 684.938 L1237.55 684.938 L1238.11 684.938 L1238.67 684.938 L1239.23 684.938 L1239.79 684.938 L1240.35 684.938 L1240.91 684.938 L1241.47 684.938 L1242.03 684.938 L1242.59 684.938 L1243.15 684.938 L1243.71 684.938 L1244.26 684.938 L1244.82 684.938 L1245.38 684.938 L1245.94 684.938 L1246.5 684.938 L1247.06 684.938 L1247.62 684.938 L1248.18 684.938 L1248.74 684.938 L1249.3 684.938 L1249.86 684.938 L1250.42 684.938 L1250.98 684.938 L1251.54 684.938 L1252.09 684.938 L1252.65 684.938 L1253.21 684.938 L1253.77 684.938 L1254.33 684.938 L1254.89 684.938 L1255.45 684.938 L1256.01 684.938 L1256.57 684.938 L1257.13 684.938 L1257.69 684.938 L1258.25 684.938 L1258.81 684.938 L1259.36 684.938 L1259.92 684.938 L1260.48 684.938 L1261.04 684.938 L1261.6 684.938 L1262.16 684.938 L1262.72 684.938 L1263.28 684.938 L1263.84 684.938 L1264.4 684.938 L1264.96 684.938 L1265.52 684.938 L1266.08 684.938 L1266.63 684.938 L1267.19 684.938 L1267.75 684.938 L1268.31 684.938 L1268.87 684.938 L1269.43 684.938 L1269.99 684.938 L1270.55 684.938 L1271.11 684.938 L1271.67 684.938 L1272.23 684.938 L1272.79 684.938 L1273.35 684.938 L1273.91 684.938 L1274.46 684.938 L1275.02 684.938 L1275.58 684.938 L1276.14 684.938 L1276.7 684.938 L1277.26 684.938 L1277.82 684.938 L1278.38 684.938 L1278.94 684.938 L1279.5 684.938 L1280.06 684.938 L1280.62 684.938 L1281.18 684.938 L1281.73 684.938 L1282.29 684.938 L1282.85 684.938 L1283.41 684.938 L1283.97 684.938 L1284.53 684.938 L1285.09 684.938 L1285.65 684.938 L1286.21 684.938 L1286.77 684.938 L1287.33 684.938 L1287.89 684.938 L1288.45 684.938 L1289 684.938 L1289.56 684.938 L1290.12 684.938 L1290.68 684.938 L1291.24 684.938 L1291.8 684.938 L1292.36 684.938 L1292.92 684.938 L1293.48 684.938 L1294.04 684.938 L1294.6 684.938 L1295.16 684.938 L1295.72 684.938 L1296.28 684.938 L1296.83 684.938 L1297.39 684.938 L1297.95 684.938 L1298.51 684.938 L1299.07 684.938 L1299.63 684.938 L1300.19 684.938 L1300.75 684.938 L1301.31 684.938 L1301.87 684.938 L1302.43 684.938 L1302.99 684.938 L1303.55 684.938 L1304.1 684.938 L1304.66 684.938 L1305.22 684.938 L1305.78 684.938 L1306.34 684.938 L1306.9 684.938 L1307.46 684.938 L1308.02 684.938 L1308.58 684.938 L1309.14 684.938 L1309.7 684.938 L1310.26 684.938 L1310.82 684.938 L1311.38 684.938 L1311.93 684.938 L1312.49 684.938 L1313.05 684.938 L1313.61 684.938 L1314.17 684.938 L1314.73 684.938 L1315.29 684.938 L1315.85 684.938 L1316.41 684.938 L1316.97 684.938 L1317.53 684.938 L1318.09 684.938 L1318.65 684.938 L1319.2 684.938 L1319.76 684.938 L1320.32 684.938 L1320.88 684.938 L1321.44 684.938 L1322 684.938 L1322.56 684.938 L1323.12 684.938 L1323.68 684.938 L1324.24 684.938 L1324.8 684.938 L1325.36 684.938 L1325.92 684.938 L1326.47 684.938 L1327.03 684.938 L1327.59 684.938 L1328.15 684.938 L1328.71 684.938 L1329.27 684.938 L1329.83 684.938 L1330.39 684.938 L1330.95 684.938 L1331.51 684.938 L1332.07 684.938 L1332.63 684.938 L1333.19 684.938 L1333.75 684.938 L1334.3 684.938 L1334.86 684.938 L1335.42 684.938 L1335.98 684.938 L1336.54 684.938 L1337.1 684.938 L1337.66 684.938 L1338.22 684.938 L1338.78 684.938 L1339.34 684.938 L1339.9 684.938 L1340.46 684.938 L1341.02 684.938 L1341.57 684.938 L1342.13 684.938 L1342.69 684.938 L1343.25 684.938 L1343.81 684.938 L1344.37 684.938 L1344.93 684.938 L1345.49 684.938 L1346.05 684.938 L1346.61 684.938 L1347.17 684.938 L1347.73 684.938 L1348.29 684.938 L1348.84 684.938 L1349.4 684.938 L1349.96 684.938 L1350.52 684.938 L1351.08 684.938 L1351.64 684.938 L1352.2 684.938 L1352.76 684.938 L1353.32 684.938 L1353.88 684.938 L1354.44 684.938 L1355 684.938 L1355.56 684.938 L1356.12 684.938 L1356.67 684.938 L1357.23 684.938 L1357.79 684.938 L1358.35 684.938 L1358.91 684.938 L1359.47 684.938 L1360.03 684.938 L1360.59 684.938 L1361.15 684.938 L1361.71 684.938 L1362.27 684.938 L1362.83 684.938 L1363.39 684.938 L1363.94 684.938 L1364.5 684.938 L1365.06 684.938 L1365.62 684.938 L1366.18 684.938 L1366.74 684.938 L1367.3 684.938 L1367.86 684.938 L1368.42 684.938 L1368.98 684.938 L1369.54 684.938 L1370.1 684.938 L1370.66 684.938 L1371.21 684.938 L1371.77 684.938 L1372.33 684.938 L1372.89 684.938 L1373.45 684.938 L1374.01 684.938 L1374.57 684.938 L1375.13 684.938 L1375.69 684.938 L1376.25 684.938 L1376.81 684.938 L1377.37 684.938 L1377.93 684.938 L1378.49 684.938 L1379.04 684.938 L1379.6 684.938 L1380.16 684.938 L1380.72 684.938 L1381.28 684.938 L1381.84 684.938 L1382.4 684.938 L1382.96 684.938 L1383.52 684.938 L1384.08 684.938 L1384.64 684.938 L1385.2 684.938 L1385.76 684.938 L1386.31 684.938 L1386.87 684.938 L1387.43 684.938 L1387.99 684.938 L1388.55 684.938 L1389.11 684.938 L1389.67 684.938 L1390.23 684.938 L1390.79 684.938 L1391.35 684.938 L1391.91 684.938 L1392.47 684.938 L1393.03 684.938 L1393.58 684.938 L1394.14 684.938 L1394.7 684.938 L1395.26 684.938 L1395.82 684.938 L1396.38 684.938 L1396.94 684.938 L1397.5 684.938 L1398.06 684.938 L1398.62 684.938 L1399.18 684.938 L1399.74 684.938 L1400.3 684.938 L1400.86 684.938 L1401.41 684.938 L1401.97 684.938 L1402.53 684.938 L1403.09 684.938 L1403.65 684.938 L1404.21 684.938 L1404.77 684.938 L1405.33 684.938 L1405.89 684.938 L1406.45 684.938 L1407.01 684.938 L1407.57 684.938 L1408.13 684.938 L1408.68 684.938 L1409.24 684.938 L1409.8 684.938 L1410.36 684.938 L1410.92 684.938 L1411.48 684.938 L1412.04 684.938 L1412.6 684.938 L1413.16 684.938 L1413.72 684.938 L1414.28 684.938 L1414.84 684.938 L1415.4 684.938 L1415.95 684.938 L1416.51 684.938 L1417.07 684.938 L1417.63 684.938 L1418.19 684.938 L1418.75 684.938 L1419.31 684.938 L1419.87 684.938 L1420.43 684.938 L1420.99 684.938 L1421.55 684.938 L1422.11 684.938 L1422.67 684.938 L1423.23 684.938 L1423.78 684.938 L1424.34 684.938 L1424.9 684.938 L1425.46 684.938 L1426.02 684.938 L1426.58 684.938 L1427.14 684.938 L1427.7 684.938 L1428.26 684.938 L1428.82 684.938 L1429.38 684.938 L1429.94 684.938 L1430.5 684.938 L1431.05 684.938 L1431.61 684.938 L1432.17 684.938 L1432.73 684.938 L1433.29 684.938 L1433.85 684.938 L1434.41 684.938 L1434.97 684.938 L1435.53 684.938 L1436.09 684.938 L1436.65 684.938 L1437.21 684.938 L1437.77 684.938 L1438.33 684.938 L1438.88 684.938 L1439.44 684.938 L1440 684.938 L1440.56 684.938 L1441.12 684.938 L1441.68 684.938 L1442.24 684.938 L1442.8 684.938 L1443.36 684.938 L1443.92 684.938 L1444.48 684.938 L1445.04 684.938 L1445.6 684.938 L1446.15 684.938 L1446.71 684.938 L1447.27 684.938 L1447.83 684.938 L1448.39 684.938 L1448.95 684.938 L1449.51 684.938 L1450.07 684.938 L1450.63 684.938 L1451.19 684.938 L1451.75 684.938 L1452.31 684.938 L1452.87 684.938 L1453.42 684.938 L1453.98 684.938 L1454.54 684.938 L1455.1 684.938 L1455.66 684.938 L1456.22 684.938 L1456.78 684.938 L1457.34 684.938 L1457.9 684.938 L1458.46 684.938 L1459.02 684.938 L1459.58 684.938 L1460.14 684.938 L1460.7 684.938 L1461.25 684.938 L1461.81 684.938 L1462.37 684.938 L1462.93 684.938 L1463.49 684.938 L1464.05 684.938 L1464.61 684.938 L1465.17 684.938 L1465.73 684.938 L1466.29 684.938 L1466.85 684.938 L1467.41 684.938 L1467.97 684.938 L1468.52 684.938 L1469.08 684.938 L1469.64 684.938 L1470.2 684.938 L1470.76 684.938 L1471.32 684.938 L1471.88 684.938 L1472.44 684.938 L1473 684.938 L1473.56 684.938 L1474.12 684.938 L1474.68 684.938 L1475.24 684.938 L1475.79 684.938 L1476.35 684.938 L1476.91 684.938 L1477.47 684.938 L1478.03 684.938 L1478.59 684.938 L1479.15 684.938 L1479.71 684.938 L1480.27 684.938 L1480.83 684.938 L1481.39 684.938 L1481.95 684.938 L1482.51 684.938 L1483.07 684.938 L1483.62 684.938 L1484.18 684.938 L1484.74 684.938 L1485.3 684.938 L1485.86 684.938 L1486.42 684.938 L1486.98 684.938 L1487.54 684.938 L1488.1 684.938 L1488.66 684.938 L1489.22 684.938 L1489.78 684.938 L1490.34 684.938 L1490.89 684.938 L1491.45 684.938 L1492.01 684.938 L1492.57 684.938 L1493.13 684.938 L1493.69 684.938 L1494.25 684.938 L1494.81 684.938 L1495.37 684.938 L1495.93 684.938 L1496.49 684.938 L1497.05 684.938 L1497.61 684.938 L1498.16 684.938 L1498.72 684.938 L1499.28 684.938 L1499.84 684.938 L1500.4 684.938 L1500.96 684.938 L1501.52 684.938 L1502.08 684.938 L1502.64 684.938 L1503.2 684.938 L1503.76 684.938 L1504.32 684.938 L1504.88 684.938 L1505.44 684.938 L1505.99 684.938 L1506.55 684.938 L1507.11 684.938 L1507.67 684.938 L1508.23 684.938 L1508.79 684.938 L1509.35 684.938 L1509.91 684.938 L1510.47 684.938 L1511.03 684.938 L1511.59 684.938 L1512.15 684.938 L1512.71 684.938 L1513.26 684.938 L1513.82 684.938 L1514.38 684.938 L1514.94 684.938 L1515.5 684.938 L1516.06 684.938 L1516.62 684.938 L1517.18 684.938 L1517.74 684.938 L1518.3 684.938 L1518.86 684.938 L1519.42 684.938 L1519.98 684.938 L1520.53 684.938 L1521.09 684.938 L1521.65 684.938 L1522.21 684.938 L1522.77 684.938 L1523.33 684.938 L1523.89 684.938 L1524.45 684.938 L1525.01 684.938 L1525.57 684.938 L1526.13 684.938 L1526.69 684.938 L1527.25 684.938 L1527.81 684.938 L1528.36 684.938 L1528.92 684.938 L1529.48 684.938 L1530.04 684.938 L1530.6 684.938 L1531.16 684.938 L1531.72 684.938 L1532.28 684.938 L1532.84 684.938 L1533.4 684.938 L1533.96 684.938 L1534.52 684.938 L1535.08 684.938 L1535.63 684.938 L1536.19 684.938 L1536.75 684.938 L1537.31 684.938 L1537.87 684.938 L1538.43 684.938 L1538.99 684.938 L1539.55 684.938 L1540.11 684.938 L1540.67 684.938 L1541.23 684.938 L1541.79 684.938 L1542.35 684.938 L1542.9 684.938 L1543.46 684.938 L1544.02 684.938 L1544.58 684.938 L1545.14 684.938 L1545.7 684.938 L1546.26 684.938 L1546.82 684.938 L1547.38 684.938 L1547.94 684.938 L1548.5 684.938 L1549.06 684.938 L1549.62 684.938 L1550.18 684.938 L1550.73 684.938 L1551.29 684.938 L1551.85 684.938 L1552.41 684.938 L1552.97 684.938 L1553.53 684.938 L1554.09 684.938 L1554.65 684.938 L1555.21 684.938 L1555.77 684.938 L1556.33 684.938 L1556.89 684.938 L1557.45 684.938 L1558 684.938 L1558.56 684.938 L1559.12 684.938 L1559.68 684.938 L1560.24 684.938 L1560.8 684.938 L1561.36 684.938 L1561.92 684.938 L1562.48 684.938 L1563.04 684.938 L1563.6 684.938 L1564.16 684.938 L1564.72 684.938 L1565.28 684.938 L1565.83 684.938 L1566.39 684.938 L1566.95 684.938 L1567.51 684.938 L1568.07 684.938 L1568.63 684.938 L1569.19 684.938 L1569.75 684.938 L1570.31 684.938 L1570.87 684.938 L1571.43 684.938 L1571.99 684.938 L1572.55 684.938 L1573.1 684.938 L1573.66 684.938 L1574.22 684.938 L1574.78 684.938 L1575.34 684.938 L1575.9 684.938 L1576.46 684.938 L1577.02 684.938 L1577.58 684.938 L1578.14 684.938 L1578.7 684.938 L1579.26 684.938 L1579.82 684.938 L1580.37 684.938 L1580.93 684.938 L1581.49 684.938 L1582.05 684.938 L1582.61 684.938 L1583.17 684.938 L1583.73 684.938 L1584.29 684.938 L1584.85 684.938 L1585.41 684.938 L1585.97 684.938 L1586.53 684.938 L1587.09 684.938 L1587.65 684.938 L1588.2 684.938 L1588.76 684.938 L1589.32 684.938 L1589.88 684.938 L1590.44 684.938 L1591 684.938 L1591.56 684.938 L1592.12 684.938 L1592.68 684.938 L1593.24 684.938 L1593.8 684.938 L1594.36 684.938 L1594.92 684.938 L1595.47 684.938 L1596.03 684.938 L1596.59 684.938 L1597.15 684.938 L1597.71 684.938 L1598.27 684.938 L1598.83 684.938 L1599.39 684.938 L1599.95 684.938 L1600.51 684.938 L1601.07 684.938 L1601.63 684.938 L1602.19 684.938 L1602.74 684.938 L1603.3 684.938 L1603.86 684.938 L1604.42 684.938 L1604.98 684.938 L1605.54 684.938 L1606.1 684.938 L1606.66 684.938 L1607.22 684.938 L1607.78 684.938 L1608.34 684.938 L1608.9 684.938 L1609.46 684.938 L1610.02 684.938 L1610.57 684.938 L1611.13 684.938 L1611.69 684.938 L1612.25 684.938 L1612.81 684.938 L1613.37 684.938 L1613.93 684.938 L1614.49 684.938 L1615.05 684.938 L1615.61 684.938 L1616.17 684.938 L1616.73 684.938 L1617.29 684.938 L1617.84 684.938 L1618.4 684.938 L1618.96 684.938 L1619.52 684.938 L1620.08 684.938 L1620.64 684.938 L1621.2 684.938 L1621.76 684.938 L1622.32 684.938 L1622.88 684.938 L1623.44 684.938 L1624 684.938 L1624.56 684.938 L1625.11 684.938 L1625.67 684.938 L1626.23 684.938 L1626.79 684.938 L1627.35 684.938 L1627.91 684.938 L1628.47 684.938 L1629.03 684.938 L1629.59 684.938 L1630.15 684.938 L1630.71 684.938 L1631.27 684.938 L1631.83 684.938 L1632.39 684.938 L1632.94 684.938 L1633.5 684.938 L1634.06 684.938 L1634.62 684.938 L1635.18 684.938 L1635.74 684.938 L1636.3 684.938 L1636.86 684.938 L1637.42 684.938 L1637.98 684.938 L1638.54 684.938 L1639.1 684.938 L1639.66 684.938 L1640.21 684.938 L1640.77 684.938 L1641.33 684.938 L1641.89 684.938 L1642.45 684.938 L1643.01 684.938 L1643.57 684.938 L1644.13 684.938 L1644.69 684.938 L1645.25 684.938 L1645.81 684.938 L1646.37 684.938 L1646.93 684.938 L1647.48 684.938 L1648.04 684.938 L1648.6 684.938 L1649.16 684.938 L1649.72 684.938 L1650.28 684.938 L1650.84 684.938 L1651.4 684.938 L1651.96 684.938 L1652.52 684.938 L1653.08 684.938 L1653.64 684.938 L1654.2 684.938 L1654.76 684.938 L1655.31 684.938 L1655.87 684.938 L1656.43 684.938 L1656.99 684.938 L1657.55 684.938 L1658.11 684.938 L1658.67 684.938 L1659.23 684.938 L1659.79 684.938 L1660.35 684.938 L1660.91 684.938 L1661.47 684.938 L1662.03 684.938 L1662.58 684.938 L1663.14 684.938 L1663.7 684.938 L1664.26 684.938 L1664.82 684.938 L1665.38 684.938 L1665.94 684.938 L1666.5 684.938 L1667.06 684.938 L1667.62 684.938 L1668.18 684.938 L1668.74 684.938 L1669.3 684.938 L1669.85 684.938 L1670.41 684.938 L1670.97 684.938 L1671.53 684.938 L1672.09 684.938 L1672.65 684.938 L1673.21 684.938 L1673.77 684.938 L1674.33 684.938 L1674.89 684.938 L1675.45 684.938 L1676.01 684.938 L1676.57 684.938 L1677.13 684.938 L1677.68 684.938 L1678.24 684.938 L1678.8 684.938 L1679.36 684.938 L1679.92 684.938 L1680.48 684.938 L1681.04 684.938 L1681.6 684.938 L1682.16 684.938 L1682.72 684.938 L1683.28 684.938 L1683.84 684.938 L1684.4 684.938 L1684.95 684.938 L1685.51 684.938 L1686.07 684.938 L1686.63 684.938 L1687.19 684.938 L1687.75 684.938 L1688.31 684.938 L1688.87 684.938 L1689.43 684.938 L1689.99 684.938 L1690.55 684.938 L1691.11 684.938 L1691.67 684.938 L1692.23 684.938 L1692.78 684.938 L1693.34 684.938 L1693.9 684.938 L1694.46 684.938 L1695.02 684.938 L1695.58 684.938 L1696.14 684.938 L1696.7 684.938 L1697.26 684.938 L1697.82 684.938 L1698.38 684.938 L1698.94 684.938 L1699.5 684.938 L1700.05 684.938 L1700.61 684.938 L1701.17 684.938 L1701.73 684.938 L1702.29 684.938 L1702.85 684.938 L1703.41 684.938 L1703.97 684.938 L1704.53 684.938 L1705.09 684.938 L1705.65 684.938 L1706.21 684.938 L1706.77 684.938 L1707.32 684.938 L1707.88 684.938 L1708.44 684.938 L1709 684.938 L1709.56 684.938 L1710.12 684.938 L1710.68 684.938 L1711.24 684.938 L1711.8 684.938 L1712.36 684.938 L1712.92 684.938 L1713.48 684.938 L1714.04 684.938 L1714.6 684.938 L1715.15 684.938 L1715.71 684.938 L1716.27 684.938 L1716.83 684.938 L1717.39 684.938 L1717.95 684.938 L1718.51 684.938 L1719.07 684.938 L1719.63 684.938 L1720.19 684.938 L1720.75 684.938 L1721.31 684.938 L1721.87 684.938 L1722.42 684.938 L1722.98 684.938 L1723.54 684.938 L1724.1 684.938 L1724.66 684.938 L1725.22 684.938 L1725.78 684.938 L1726.34 684.938 L1726.9 684.938 L1727.46 684.938 L1728.02 684.938 L1728.58 684.938 L1729.14 684.938 L1729.69 684.938 L1730.25 684.938 L1730.81 684.938 L1731.37 684.938 L1731.93 684.938 L1732.49 684.938 L1733.05 684.938 L1733.61 684.938 L1734.17 684.938 L1734.73 684.938 L1735.29 684.938 L1735.85 684.938 L1736.41 684.938 L1736.97 684.938 L1737.52 684.938 L1738.08 684.938 L1738.64 684.938 L1739.2 684.938 L1739.76 684.938 L1740.32 684.938 L1740.88 684.938 L1741.44 684.938 L1742 684.938 L1742.56 684.938 L1743.12 684.938 L1743.68 684.938 L1744.24 684.938 L1744.79 684.938 L1745.35 684.938 L1745.91 684.938 L1746.47 684.938 L1747.03 684.938 L1747.59 684.938 L1748.15 684.938 L1748.71 684.938 L1749.27 684.938 L1749.83 684.938 L1750.39 684.938 L1750.95 684.938 L1751.51 684.938 L1752.06 684.938 L1752.62 684.938 L1753.18 684.938 L1753.74 684.938 L1754.3 684.938 L1754.86 684.938 L1755.42 684.938 L1755.98 684.938 L1756.54 684.938 L1757.1 684.938 L1757.66 684.938 L1758.22 684.938 L1758.78 684.938 L1759.34 684.938 L1759.89 684.938 L1760.45 684.938 L1761.01 684.938 L1761.57 684.938 L1762.13 684.938 L1762.69 684.938 L1763.25 684.938 L1763.81 684.938 L1764.37 684.938 L1764.93 684.938 L1765.49 684.938 L1766.05 684.938 L1766.61 684.938 L1767.16 684.938 L1767.72 684.938 L1768.28 684.938 L1768.84 684.938 L1769.4 684.938 L1769.96 684.938 L1770.52 684.938 L1771.08 684.938 L1771.64 684.938 L1772.2 684.938 L1772.76 684.938 L1773.32 684.938 L1773.88 684.938 L1774.43 684.938 L1774.99 684.938 L1775.55 684.938 L1776.11 684.938 L1776.67 684.938 L1777.23 684.938 L1777.79 684.938 L1778.35 684.938 L1778.91 684.938 L1779.47 684.938 L1780.03 684.938 L1780.59 684.938 L1781.15 684.938 L1781.71 684.938 L1782.26 684.938 L1782.82 684.938 L1783.38 684.938 L1783.94 684.938 L1784.5 684.938 L1785.06 684.938 L1785.62 684.938 L1786.18 684.938 L1786.74 684.938 L1787.3 684.938 L1787.86 684.938 L1788.42 684.938 L1788.98 684.938 L1789.53 684.938 L1790.09 684.938 L1790.65 684.938 L1791.21 684.938 L1791.77 684.938 L1792.33 684.938 L1792.89 684.938 L1793.45 684.938 L1794.01 684.938 L1794.57 684.938 L1795.13 684.938 L1795.69 684.938 L1796.25 684.938 L1796.8 684.938 L1797.36 684.938 L1797.92 684.938 L1798.48 684.938 L1799.04 684.938 L1799.6 684.938 L1800.16 684.938 L1800.72 684.938 L1801.28 684.938 L1801.84 684.938 L1802.4 684.938 L1802.96 684.938 L1803.52 684.938 L1804.08 684.938 L1804.63 684.938 L1805.19 684.938 L1805.75 684.938 L1806.31 684.938 L1806.87 684.938 L1807.43 684.938 L1807.99 684.938 L1808.55 684.938 L1809.11 684.938 L1809.67 684.938 L1810.23 684.938 L1810.79 684.938 L1811.35 684.938 L1811.9 684.938 L1812.46 684.938 L1813.02 684.938 L1813.58 684.938 L1814.14 684.938 L1814.7 684.938 L1815.26 684.938 L1815.82 684.938 L1816.38 684.938 L1816.94 684.938 L1817.5 684.938 L1818.06 684.938 L1818.62 684.938 L1819.18 684.938 L1819.73 684.938 L1820.29 684.938 L1820.85 684.938 L1821.41 684.938 L1821.97 684.938 L1822.53 684.938 L1823.09 684.938 L1823.65 684.938 L1824.21 684.938 L1824.77 684.938 L1825.33 684.938 L1825.89 684.938 L1826.45 684.938 L1827 684.938 L1827.56 684.938 L1828.12 684.938 L1828.68 684.938 L1829.24 684.938 L1829.8 684.938 L1830.36 684.938 L1830.92 684.938 L1831.48 684.938 L1832.04 684.938 L1832.6 684.938 L1833.16 684.938 L1833.72 684.938 L1834.27 684.938 L1834.83 684.938 L1835.39 684.938 L1835.95 684.938 L1836.51 684.938 L1837.07 684.938 L1837.63 684.938 L1838.19 684.938 L1838.19 683.696 L1837.63 683.696 L1837.07 683.696 L1836.51 683.696 L1835.95 683.696 L1835.39 683.696 L1834.83 683.696 L1834.27 683.696 L1833.72 683.696 L1833.16 683.696 L1832.6 683.696 L1832.04 683.696 L1831.48 683.696 L1830.92 683.696 L1830.36 683.696 L1829.8 683.696 L1829.24 683.696 L1828.68 683.696 L1828.12 683.696 L1827.56 683.696 L1827 683.696 L1826.45 683.696 L1825.89 683.696 L1825.33 683.696 L1824.77 683.696 L1824.21 683.696 L1823.65 683.696 L1823.09 683.696 L1822.53 683.696 L1821.97 683.696 L1821.41 683.696 L1820.85 683.696 L1820.29 683.696 L1819.73 683.696 L1819.18 683.696 L1818.62 683.696 L1818.06 683.696 L1817.5 683.696 L1816.94 683.696 L1816.38 683.696 L1815.82 683.696 L1815.26 683.696 L1814.7 683.696 L1814.14 683.696 L1813.58 683.696 L1813.02 683.696 L1812.46 683.696 L1811.9 683.696 L1811.35 683.696 L1810.79 683.696 L1810.23 683.696 L1809.67 683.696 L1809.11 683.696 L1808.55 683.696 L1807.99 683.696 L1807.43 683.696 L1806.87 683.696 L1806.31 683.696 L1805.75 683.696 L1805.19 683.696 L1804.63 683.696 L1804.08 683.696 L1803.52 683.696 L1802.96 683.696 L1802.4 683.696 L1801.84 683.696 L1801.28 683.696 L1800.72 683.696 L1800.16 683.696 L1799.6 683.696 L1799.04 683.696 L1798.48 683.696 L1797.92 683.696 L1797.36 683.696 L1796.8 683.696 L1796.25 683.696 L1795.69 683.696 L1795.13 683.696 L1794.57 683.696 L1794.01 683.696 L1793.45 683.696 L1792.89 683.696 L1792.33 683.696 L1791.77 683.696 L1791.21 683.696 L1790.65 683.696 L1790.09 683.696 L1789.53 683.696 L1788.98 683.696 L1788.42 683.696 L1787.86 683.696 L1787.3 683.696 L1786.74 683.696 L1786.18 683.696 L1785.62 683.696 L1785.06 683.696 L1784.5 683.696 L1783.94 683.696 L1783.38 683.696 L1782.82 683.696 L1782.26 683.696 L1781.71 683.696 L1781.15 683.696 L1780.59 683.696 L1780.03 683.696 L1779.47 683.696 L1778.91 683.696 L1778.35 683.696 L1777.79 683.696 L1777.23 683.696 L1776.67 683.696 L1776.11 683.696 L1775.55 683.696 L1774.99 683.696 L1774.43 683.696 L1773.88 683.696 L1773.32 683.696 L1772.76 683.696 L1772.2 683.696 L1771.64 683.696 L1771.08 683.696 L1770.52 683.696 L1769.96 683.696 L1769.4 683.696 L1768.84 683.696 L1768.28 683.696 L1767.72 683.696 L1767.16 683.696 L1766.61 683.696 L1766.05 683.696 L1765.49 683.696 L1764.93 683.696 L1764.37 683.696 L1763.81 683.696 L1763.25 683.696 L1762.69 683.696 L1762.13 683.696 L1761.57 683.696 L1761.01 683.696 L1760.45 683.696 L1759.89 683.696 L1759.34 683.696 L1758.78 683.696 L1758.22 683.696 L1757.66 683.696 L1757.1 683.696 L1756.54 683.696 L1755.98 683.696 L1755.42 683.696 L1754.86 683.696 L1754.3 683.696 L1753.74 683.696 L1753.18 683.696 L1752.62 683.696 L1752.06 683.696 L1751.51 683.696 L1750.95 683.696 L1750.39 683.696 L1749.83 683.696 L1749.27 683.696 L1748.71 683.696 L1748.15 683.696 L1747.59 683.696 L1747.03 683.696 L1746.47 683.696 L1745.91 683.696 L1745.35 683.696 L1744.79 683.696 L1744.24 683.696 L1743.68 683.696 L1743.12 683.696 L1742.56 683.696 L1742 683.696 L1741.44 683.696 L1740.88 683.696 L1740.32 683.696 L1739.76 683.696 L1739.2 683.696 L1738.64 683.696 L1738.08 683.696 L1737.52 683.696 L1736.97 683.696 L1736.41 683.696 L1735.85 683.696 L1735.29 683.696 L1734.73 683.696 L1734.17 683.696 L1733.61 683.696 L1733.05 683.696 L1732.49 683.696 L1731.93 683.696 L1731.37 683.696 L1730.81 683.696 L1730.25 683.696 L1729.69 683.696 L1729.14 683.696 L1728.58 683.696 L1728.02 683.696 L1727.46 683.696 L1726.9 683.696 L1726.34 683.696 L1725.78 683.696 L1725.22 683.696 L1724.66 683.696 L1724.1 683.696 L1723.54 683.696 L1722.98 683.696 L1722.42 683.696 L1721.87 683.696 L1721.31 683.696 L1720.75 683.696 L1720.19 683.696 L1719.63 683.696 L1719.07 683.696 L1718.51 683.696 L1717.95 683.696 L1717.39 683.696 L1716.83 683.696 L1716.27 683.696 L1715.71 683.696 L1715.15 683.696 L1714.6 683.696 L1714.04 683.696 L1713.48 683.696 L1712.92 683.696 L1712.36 683.696 L1711.8 683.696 L1711.24 683.696 L1710.68 683.696 L1710.12 683.696 L1709.56 683.696 L1709 683.696 L1708.44 683.696 L1707.88 683.696 L1707.32 683.696 L1706.77 683.696 L1706.21 683.696 L1705.65 683.696 L1705.09 683.696 L1704.53 683.696 L1703.97 683.696 L1703.41 683.696 L1702.85 683.696 L1702.29 683.696 L1701.73 683.696 L1701.17 683.696 L1700.61 683.696 L1700.05 683.696 L1699.5 683.696 L1698.94 683.696 L1698.38 683.696 L1697.82 683.696 L1697.26 683.696 L1696.7 683.696 L1696.14 683.696 L1695.58 683.696 L1695.02 683.696 L1694.46 683.696 L1693.9 683.696 L1693.34 683.696 L1692.78 683.696 L1692.23 683.696 L1691.67 683.696 L1691.11 683.696 L1690.55 683.696 L1689.99 683.696 L1689.43 683.696 L1688.87 683.696 L1688.31 683.696 L1687.75 683.696 L1687.19 683.696 L1686.63 683.696 L1686.07 683.696 L1685.51 683.696 L1684.95 683.696 L1684.4 683.696 L1683.84 683.696 L1683.28 683.696 L1682.72 683.696 L1682.16 683.696 L1681.6 683.696 L1681.04 683.696 L1680.48 683.696 L1679.92 683.696 L1679.36 683.696 L1678.8 683.696 L1678.24 683.696 L1677.68 683.696 L1677.13 683.696 L1676.57 683.696 L1676.01 683.696 L1675.45 683.696 L1674.89 683.696 L1674.33 683.696 L1673.77 683.696 L1673.21 683.696 L1672.65 683.696 L1672.09 683.696 L1671.53 683.696 L1670.97 683.696 L1670.41 683.696 L1669.85 683.696 L1669.3 683.696 L1668.74 683.696 L1668.18 683.696 L1667.62 683.696 L1667.06 683.696 L1666.5 683.696 L1665.94 683.696 L1665.38 683.696 L1664.82 683.696 L1664.26 683.696 L1663.7 683.696 L1663.14 683.696 L1662.58 683.696 L1662.03 683.696 L1661.47 683.696 L1660.91 683.696 L1660.35 683.696 L1659.79 683.696 L1659.23 683.696 L1658.67 683.696 L1658.11 683.696 L1657.55 683.696 L1656.99 683.696 L1656.43 683.696 L1655.87 683.696 L1655.31 683.696 L1654.76 683.696 L1654.2 683.696 L1653.64 683.696 L1653.08 683.696 L1652.52 683.696 L1651.96 683.696 L1651.4 683.696 L1650.84 683.696 L1650.28 683.696 L1649.72 683.696 L1649.16 683.696 L1648.6 683.696 L1648.04 683.696 L1647.48 683.696 L1646.93 683.696 L1646.37 683.696 L1645.81 683.696 L1645.25 683.696 L1644.69 683.696 L1644.13 683.696 L1643.57 683.696 L1643.01 683.696 L1642.45 683.696 L1641.89 683.696 L1641.33 683.696 L1640.77 683.696 L1640.21 683.696 L1639.66 683.696 L1639.1 683.696 L1638.54 683.696 L1637.98 683.696 L1637.42 683.696 L1636.86 683.696 L1636.3 683.696 L1635.74 683.696 L1635.18 683.696 L1634.62 683.696 L1634.06 683.696 L1633.5 683.696 L1632.94 683.696 L1632.39 683.696 L1631.83 683.696 L1631.27 683.696 L1630.71 683.696 L1630.15 683.696 L1629.59 683.696 L1629.03 683.696 L1628.47 683.696 L1627.91 683.696 L1627.35 683.696 L1626.79 683.696 L1626.23 683.696 L1625.67 683.696 L1625.11 683.696 L1624.56 683.696 L1624 683.696 L1623.44 683.696 L1622.88 683.696 L1622.32 683.696 L1621.76 683.696 L1621.2 683.696 L1620.64 683.696 L1620.08 683.696 L1619.52 683.696 L1618.96 683.696 L1618.4 683.696 L1617.84 683.696 L1617.29 683.696 L1616.73 683.696 L1616.17 683.696 L1615.61 683.696 L1615.05 683.696 L1614.49 683.696 L1613.93 683.696 L1613.37 683.696 L1612.81 683.696 L1612.25 683.696 L1611.69 683.696 L1611.13 683.696 L1610.57 683.696 L1610.02 683.696 L1609.46 683.696 L1608.9 683.696 L1608.34 683.696 L1607.78 683.696 L1607.22 683.696 L1606.66 683.696 L1606.1 683.696 L1605.54 683.696 L1604.98 683.696 L1604.42 683.696 L1603.86 683.696 L1603.3 683.696 L1602.74 683.696 L1602.19 683.696 L1601.63 683.696 L1601.07 683.696 L1600.51 683.696 L1599.95 683.696 L1599.39 683.696 L1598.83 683.696 L1598.27 683.696 L1597.71 683.696 L1597.15 683.696 L1596.59 683.696 L1596.03 683.696 L1595.47 683.696 L1594.92 683.696 L1594.36 683.696 L1593.8 683.696 L1593.24 683.696 L1592.68 683.696 L1592.12 683.696 L1591.56 683.696 L1591 683.696 L1590.44 683.696 L1589.88 683.696 L1589.32 683.696 L1588.76 683.696 L1588.2 683.696 L1587.65 683.696 L1587.09 683.696 L1586.53 683.696 L1585.97 683.696 L1585.41 683.696 L1584.85 683.696 L1584.29 683.696 L1583.73 683.696 L1583.17 683.696 L1582.61 683.696 L1582.05 683.696 L1581.49 683.696 L1580.93 683.696 L1580.37 683.696 L1579.82 683.696 L1579.26 683.696 L1578.7 683.696 L1578.14 683.696 L1577.58 683.696 L1577.02 683.696 L1576.46 683.696 L1575.9 683.696 L1575.34 683.696 L1574.78 683.696 L1574.22 683.696 L1573.66 683.696 L1573.1 683.696 L1572.55 683.696 L1571.99 683.696 L1571.43 683.696 L1570.87 683.696 L1570.31 683.696 L1569.75 683.696 L1569.19 683.696 L1568.63 683.696 L1568.07 683.696 L1567.51 683.696 L1566.95 683.696 L1566.39 683.696 L1565.83 683.696 L1565.28 683.696 L1564.72 683.696 L1564.16 683.696 L1563.6 683.696 L1563.04 683.696 L1562.48 683.696 L1561.92 683.696 L1561.36 683.696 L1560.8 683.696 L1560.24 683.696 L1559.68 683.696 L1559.12 683.696 L1558.56 683.696 L1558 683.696 L1557.45 683.696 L1556.89 683.696 L1556.33 683.696 L1555.77 683.696 L1555.21 683.696 L1554.65 683.696 L1554.09 683.696 L1553.53 683.696 L1552.97 683.696 L1552.41 683.696 L1551.85 683.696 L1551.29 683.696 L1550.73 683.696 L1550.18 683.696 L1549.62 683.696 L1549.06 683.696 L1548.5 683.696 L1547.94 683.696 L1547.38 683.696 L1546.82 683.696 L1546.26 683.696 L1545.7 683.696 L1545.14 683.696 L1544.58 683.696 L1544.02 683.696 L1543.46 683.696 L1542.9 683.696 L1542.35 683.696 L1541.79 683.696 L1541.23 683.696 L1540.67 683.696 L1540.11 683.696 L1539.55 683.696 L1538.99 683.696 L1538.43 683.696 L1537.87 683.696 L1537.31 683.696 L1536.75 683.696 L1536.19 683.696 L1535.63 683.696 L1535.08 683.696 L1534.52 683.696 L1533.96 683.696 L1533.4 683.696 L1532.84 683.696 L1532.28 683.696 L1531.72 683.696 L1531.16 683.696 L1530.6 683.696 L1530.04 683.696 L1529.48 683.696 L1528.92 683.696 L1528.36 683.696 L1527.81 683.696 L1527.25 683.696 L1526.69 683.696 L1526.13 683.696 L1525.57 683.696 L1525.01 683.696 L1524.45 683.696 L1523.89 683.696 L1523.33 683.696 L1522.77 683.696 L1522.21 683.696 L1521.65 683.696 L1521.09 683.696 L1520.53 683.696 L1519.98 683.696 L1519.42 683.696 L1518.86 683.696 L1518.3 683.696 L1517.74 683.696 L1517.18 683.696 L1516.62 683.696 L1516.06 683.696 L1515.5 683.696 L1514.94 683.696 L1514.38 683.696 L1513.82 683.696 L1513.26 683.696 L1512.71 683.696 L1512.15 683.696 L1511.59 683.696 L1511.03 683.696 L1510.47 683.696 L1509.91 683.696 L1509.35 683.696 L1508.79 683.696 L1508.23 683.696 L1507.67 683.696 L1507.11 683.696 L1506.55 683.696 L1505.99 683.696 L1505.44 683.696 L1504.88 683.696 L1504.32 683.696 L1503.76 683.696 L1503.2 683.696 L1502.64 683.696 L1502.08 683.696 L1501.52 683.696 L1500.96 683.696 L1500.4 683.696 L1499.84 683.696 L1499.28 683.696 L1498.72 683.696 L1498.16 683.696 L1497.61 683.696 L1497.05 683.696 L1496.49 683.696 L1495.93 683.696 L1495.37 683.696 L1494.81 683.696 L1494.25 683.696 L1493.69 683.696 L1493.13 683.696 L1492.57 683.696 L1492.01 683.696 L1491.45 683.696 L1490.89 683.696 L1490.34 683.696 L1489.78 683.696 L1489.22 683.696 L1488.66 683.696 L1488.1 683.696 L1487.54 683.696 L1486.98 683.696 L1486.42 683.696 L1485.86 683.696 L1485.3 683.696 L1484.74 683.696 L1484.18 683.696 L1483.62 683.696 L1483.07 683.696 L1482.51 683.696 L1481.95 683.696 L1481.39 683.696 L1480.83 683.696 L1480.27 683.696 L1479.71 683.696 L1479.15 683.696 L1478.59 683.696 L1478.03 683.696 L1477.47 683.696 L1476.91 683.696 L1476.35 683.696 L1475.79 683.696 L1475.24 683.696 L1474.68 683.696 L1474.12 683.696 L1473.56 683.696 L1473 683.696 L1472.44 683.696 L1471.88 683.696 L1471.32 683.696 L1470.76 683.696 L1470.2 683.696 L1469.64 683.696 L1469.08 683.696 L1468.52 683.696 L1467.97 683.696 L1467.41 683.696 L1466.85 683.696 L1466.29 683.696 L1465.73 683.696 L1465.17 683.696 L1464.61 683.696 L1464.05 683.696 L1463.49 683.696 L1462.93 683.696 L1462.37 683.696 L1461.81 683.696 L1461.25 683.696 L1460.7 683.696 L1460.14 683.696 L1459.58 683.696 L1459.02 683.696 L1458.46 683.696 L1457.9 683.696 L1457.34 683.696 L1456.78 683.696 L1456.22 683.696 L1455.66 683.696 L1455.1 683.696 L1454.54 683.696 L1453.98 683.696 L1453.42 683.696 L1452.87 683.696 L1452.31 683.696 L1451.75 683.696 L1451.19 683.696 L1450.63 683.696 L1450.07 683.696 L1449.51 683.696 L1448.95 683.696 L1448.39 683.696 L1447.83 683.696 L1447.27 683.696 L1446.71 683.696 L1446.15 683.696 L1445.6 683.696 L1445.04 683.696 L1444.48 683.696 L1443.92 683.696 L1443.36 683.696 L1442.8 683.696 L1442.24 683.696 L1441.68 683.696 L1441.12 683.696 L1440.56 683.696 L1440 683.696 L1439.44 683.696 L1438.88 683.696 L1438.33 683.696 L1437.77 683.696 L1437.21 683.696 L1436.65 683.696 L1436.09 683.696 L1435.53 683.696 L1434.97 683.696 L1434.41 683.696 L1433.85 683.696 L1433.29 683.696 L1432.73 683.696 L1432.17 683.696 L1431.61 683.696 L1431.05 683.696 L1430.5 683.696 L1429.94 683.696 L1429.38 683.696 L1428.82 683.696 L1428.26 683.696 L1427.7 683.696 L1427.14 683.696 L1426.58 683.696 L1426.02 683.696 L1425.46 683.696 L1424.9 683.696 L1424.34 683.696 L1423.78 683.696 L1423.23 683.696 L1422.67 683.696 L1422.11 683.696 L1421.55 683.696 L1420.99 683.696 L1420.43 683.696 L1419.87 683.696 L1419.31 683.696 L1418.75 683.696 L1418.19 683.696 L1417.63 683.696 L1417.07 683.696 L1416.51 683.696 L1415.95 683.696 L1415.4 683.696 L1414.84 683.696 L1414.28 683.696 L1413.72 683.696 L1413.16 683.696 L1412.6 683.696 L1412.04 683.696 L1411.48 683.696 L1410.92 683.696 L1410.36 683.696 L1409.8 683.696 L1409.24 683.696 L1408.68 683.696 L1408.13 683.696 L1407.57 683.696 L1407.01 683.696 L1406.45 683.696 L1405.89 683.696 L1405.33 683.696 L1404.77 683.696 L1404.21 683.696 L1403.65 683.696 L1403.09 683.696 L1402.53 683.696 L1401.97 683.696 L1401.41 683.696 L1400.86 683.696 L1400.3 683.696 L1399.74 683.696 L1399.18 683.696 L1398.62 683.696 L1398.06 683.696 L1397.5 683.696 L1396.94 683.696 L1396.38 683.696 L1395.82 683.696 L1395.26 683.696 L1394.7 683.696 L1394.14 683.696 L1393.58 683.696 L1393.03 683.696 L1392.47 683.696 L1391.91 683.696 L1391.35 683.696 L1390.79 683.696 L1390.23 683.696 L1389.67 683.696 L1389.11 683.696 L1388.55 683.696 L1387.99 683.696 L1387.43 683.696 L1386.87 683.696 L1386.31 683.696 L1385.76 683.696 L1385.2 683.696 L1384.64 683.696 L1384.08 683.696 L1383.52 683.696 L1382.96 683.696 L1382.4 683.696 L1381.84 683.696 L1381.28 683.696 L1380.72 683.696 L1380.16 683.696 L1379.6 683.696 L1379.04 683.696 L1378.49 683.696 L1377.93 683.696 L1377.37 683.696 L1376.81 683.696 L1376.25 683.696 L1375.69 683.696 L1375.13 683.696 L1374.57 683.696 L1374.01 683.696 L1373.45 683.696 L1372.89 683.696 L1372.33 683.696 L1371.77 683.696 L1371.21 683.696 L1370.66 683.696 L1370.1 683.696 L1369.54 683.696 L1368.98 683.696 L1368.42 683.696 L1367.86 683.696 L1367.3 683.696 L1366.74 683.696 L1366.18 683.696 L1365.62 683.696 L1365.06 683.696 L1364.5 683.696 L1363.94 683.696 L1363.39 683.696 L1362.83 683.696 L1362.27 683.696 L1361.71 683.696 L1361.15 683.696 L1360.59 683.696 L1360.03 683.696 L1359.47 683.696 L1358.91 683.696 L1358.35 683.696 L1357.79 683.696 L1357.23 683.696 L1356.67 683.696 L1356.12 683.696 L1355.56 683.696 L1355 683.696 L1354.44 683.696 L1353.88 683.696 L1353.32 683.696 L1352.76 683.696 L1352.2 683.696 L1351.64 683.696 L1351.08 683.696 L1350.52 683.696 L1349.96 683.696 L1349.4 683.696 L1348.84 683.696 L1348.29 683.696 L1347.73 683.696 L1347.17 683.696 L1346.61 683.696 L1346.05 683.696 L1345.49 683.696 L1344.93 683.696 L1344.37 683.696 L1343.81 683.696 L1343.25 683.696 L1342.69 683.696 L1342.13 683.696 L1341.57 683.696 L1341.02 683.696 L1340.46 683.696 L1339.9 683.696 L1339.34 683.696 L1338.78 683.696 L1338.22 683.696 L1337.66 683.696 L1337.1 683.696 L1336.54 683.696 L1335.98 683.696 L1335.42 683.696 L1334.86 683.696 L1334.3 683.696 L1333.75 683.696 L1333.19 683.696 L1332.63 683.696 L1332.07 683.696 L1331.51 683.696 L1330.95 683.696 L1330.39 683.696 L1329.83 683.696 L1329.27 683.696 L1328.71 683.696 L1328.15 683.696 L1327.59 683.696 L1327.03 683.696 L1326.47 683.696 L1325.92 683.696 L1325.36 683.696 L1324.8 683.696 L1324.24 683.696 L1323.68 683.696 L1323.12 683.696 L1322.56 683.696 L1322 683.696 L1321.44 683.696 L1320.88 683.696 L1320.32 683.696 L1319.76 683.696 L1319.2 683.696 L1318.65 683.696 L1318.09 683.696 L1317.53 683.696 L1316.97 683.696 L1316.41 683.696 L1315.85 683.696 L1315.29 683.696 L1314.73 683.696 L1314.17 683.696 L1313.61 683.696 L1313.05 683.696 L1312.49 683.696 L1311.93 683.696 L1311.38 683.696 L1310.82 683.696 L1310.26 683.696 L1309.7 683.696 L1309.14 683.696 L1308.58 683.696 L1308.02 683.696 L1307.46 683.696 L1306.9 683.696 L1306.34 683.696 L1305.78 683.696 L1305.22 683.696 L1304.66 683.696 L1304.1 683.696 L1303.55 683.696 L1302.99 683.696 L1302.43 683.696 L1301.87 683.696 L1301.31 683.696 L1300.75 683.696 L1300.19 683.696 L1299.63 683.696 L1299.07 683.696 L1298.51 683.696 L1297.95 683.696 L1297.39 683.696 L1296.83 683.696 L1296.28 683.696 L1295.72 683.696 L1295.16 683.696 L1294.6 683.696 L1294.04 683.696 L1293.48 683.696 L1292.92 683.696 L1292.36 683.696 L1291.8 683.696 L1291.24 683.696 L1290.68 683.696 L1290.12 683.696 L1289.56 683.696 L1289 683.696 L1288.45 683.696 L1287.89 683.696 L1287.33 683.696 L1286.77 683.696 L1286.21 683.696 L1285.65 683.696 L1285.09 683.696 L1284.53 683.696 L1283.97 683.696 L1283.41 683.696 L1282.85 683.696 L1282.29 683.696 L1281.73 683.696 L1281.18 683.696 L1280.62 683.696 L1280.06 683.696 L1279.5 683.696 L1278.94 683.696 L1278.38 683.696 L1277.82 683.696 L1277.26 683.696 L1276.7 683.696 L1276.14 683.696 L1275.58 683.696 L1275.02 683.696 L1274.46 683.696 L1273.91 683.696 L1273.35 683.696 L1272.79 683.696 L1272.23 683.696 L1271.67 683.696 L1271.11 683.696 L1270.55 683.696 L1269.99 683.696 L1269.43 683.696 L1268.87 683.696 L1268.31 683.696 L1267.75 683.696 L1267.19 683.696 L1266.63 683.696 L1266.08 683.696 L1265.52 683.696 L1264.96 683.696 L1264.4 683.696 L1263.84 683.696 L1263.28 683.696 L1262.72 683.696 L1262.16 683.696 L1261.6 683.696 L1261.04 683.696 L1260.48 683.696 L1259.92 683.696 L1259.36 683.696 L1258.81 683.696 L1258.25 683.696 L1257.69 683.696 L1257.13 683.696 L1256.57 683.696 L1256.01 683.696 L1255.45 683.696 L1254.89 683.696 L1254.33 683.696 L1253.77 683.696 L1253.21 683.696 L1252.65 683.696 L1252.09 683.696 L1251.54 683.696 L1250.98 683.696 L1250.42 683.696 L1249.86 683.696 L1249.3 683.696 L1248.74 683.696 L1248.18 683.696 L1247.62 683.696 L1247.06 683.696 L1246.5 683.696 L1245.94 683.696 L1245.38 683.696 L1244.82 683.696 L1244.26 683.696 L1243.71 683.696 L1243.15 683.696 L1242.59 683.696 L1242.03 683.696 L1241.47 683.696 L1240.91 683.696 L1240.35 683.696 L1239.79 683.696 L1239.23 683.696 L1238.67 683.696 L1238.11 683.696 L1237.55 683.696 L1236.99 683.696 L1236.44 683.696 L1235.88 683.696 L1235.32 683.696 L1234.76 683.696 L1234.2 683.696 L1233.64 683.696 L1233.08 683.696 L1232.52 683.696 L1231.96 683.696 L1231.4 683.696 L1230.84 683.696 L1230.28 683.696 L1229.72 683.696 L1229.17 683.696 L1228.61 683.696 L1228.05 683.696 L1227.49 683.696 L1226.93 683.696 L1226.37 683.696 L1225.81 683.696 L1225.25 683.696 L1224.69 683.696 L1224.13 683.696 L1223.57 683.696 L1223.01 683.696 L1222.45 683.696 L1221.89 683.696 L1221.34 683.696 L1220.78 683.696 L1220.22 683.696 L1219.66 683.696 L1219.1 683.696 L1218.54 683.696 L1217.98 683.696 L1217.42 683.696 L1216.86 683.696 L1216.3 683.696 L1215.74 683.696 L1215.18 683.696 L1214.62 683.696 L1214.07 683.696 L1213.51 683.696 L1212.95 683.696 L1212.39 683.696 L1211.83 683.696 L1211.27 683.696 L1210.71 683.696 L1210.15 683.696 L1209.59 683.696 L1209.03 683.696 L1208.47 683.696 L1207.91 683.696 L1207.35 683.696 L1206.8 683.696 L1206.24 683.696 L1205.68 683.696 L1205.12 683.696 L1204.56 683.696 L1204 683.696 L1203.44 683.696 L1202.88 683.696 L1202.32 683.696 L1201.76 683.696 L1201.2 683.696 L1200.64 683.696 L1200.08 683.696 L1199.52 683.696 L1198.97 683.696 L1198.41 683.696 L1197.85 683.696 L1197.29 683.696 L1196.73 683.696 L1196.17 683.696 L1195.61 683.696 L1195.05 683.696 L1194.49 683.696 L1193.93 683.696 L1193.37 683.696 L1192.81 683.696 L1192.25 683.696 L1191.7 683.696 L1191.14 683.696 L1190.58 683.696 L1190.02 683.696 L1189.46 683.696 L1188.9 683.696 L1188.34 683.696 L1187.78 683.696 L1187.22 683.696 L1186.66 683.696 L1186.1 683.696 L1185.54 683.696 L1184.98 683.696 L1184.43 683.696 L1183.87 683.696 L1183.31 683.696 L1182.75 683.696 L1182.19 683.696 L1181.63 683.696 L1181.07 683.696 L1180.51 683.696 L1179.95 683.696 L1179.39 683.696 L1178.83 683.696 L1178.27 683.696 L1177.71 683.696 L1177.15 683.696 L1176.6 683.696 L1176.04 683.696 L1175.48 683.696 L1174.92 683.696 L1174.36 683.696 L1173.8 683.696 L1173.24 683.696 L1172.68 683.696 L1172.12 683.696 L1171.56 683.696 L1171 683.696 L1170.44 683.696 L1169.88 683.696 L1169.33 683.696 L1168.77 683.696 L1168.21 683.696 L1167.65 683.696 L1167.09 683.696 L1166.53 683.696 L1165.97 683.696 L1165.41 683.696 L1164.85 683.696 L1164.29 683.696 L1163.73 683.696 L1163.17 683.696 L1162.61 683.696 L1162.05 683.696 L1161.5 683.696 L1160.94 683.696 L1160.38 683.696 L1159.82 683.696 L1159.26 683.696 L1158.7 683.696 L1158.14 683.696 L1157.58 683.696 L1157.02 683.696 L1156.46 683.696 L1155.9 683.696 L1155.34 683.696 L1154.78 683.696 L1154.23 683.696 L1153.67 683.696 L1153.11 683.696 L1152.55 683.696 L1151.99 683.696 L1151.43 683.696 L1150.87 683.696 L1150.31 683.696 L1149.75 683.696 L1149.19 683.696 L1148.63 683.696 L1148.07 683.696 L1147.51 683.696 L1146.96 683.696 L1146.4 683.696 L1145.84 683.696 L1145.28 683.696 L1144.72 683.696 L1144.16 683.696 L1143.6 683.696 L1143.04 683.696 L1142.48 683.696 L1141.92 683.696 L1141.36 683.696 L1140.8 683.696 L1140.24 683.696 L1139.68 683.696 L1139.13 683.696 L1138.57 683.696 L1138.01 683.696 L1137.45 683.696 L1136.89 683.696 L1136.33 683.696 L1135.77 683.696 L1135.21 683.696 L1134.65 683.696 L1134.09 683.696 L1133.53 683.696 L1132.97 683.696 L1132.41 683.696 L1131.86 683.696 L1131.3 683.696 L1130.74 683.696 L1130.18 683.696 L1129.62 683.696 L1129.06 683.696 L1128.5 683.696 L1127.94 683.696 L1127.38 683.696 L1126.82 683.696 L1126.26 683.696 L1125.7 683.696 L1125.14 683.696 L1124.59 683.696 L1124.03 683.696 L1123.47 683.696 L1122.91 683.696 L1122.35 683.696 L1121.79 683.696 L1121.23 683.696 L1120.67 683.696 L1120.11 683.696 L1119.55 683.696 L1118.99 683.696 L1118.43 683.696 L1117.87 683.696 L1117.31 683.696 L1116.76 683.696 L1116.2 683.696 L1115.64 683.696 L1115.08 683.696 L1114.52 683.696 L1113.96 683.696 L1113.4 683.696 L1112.84 683.696 L1112.28 683.696 L1111.72 683.696 L1111.16 683.696 L1110.6 683.696 L1110.04 683.696 L1109.49 683.696 L1108.93 683.696 L1108.37 683.696 L1107.81 683.696 L1107.25 683.696 L1106.69 683.696 L1106.13 683.696 L1105.57 683.696 L1105.01 683.696 L1104.45 683.696 L1103.89 683.696 L1103.33 683.696 L1102.77 683.696 L1102.22 683.696 L1101.66 683.696 L1101.1 683.696 L1100.54 683.696 L1099.98 683.696 L1099.42 683.696 L1098.86 683.696 L1098.3 683.696 L1097.74 683.696 L1097.18 683.696 L1096.62 683.696 L1096.06 683.696 L1095.5 683.696 L1094.94 683.696 L1094.39 683.696 L1093.83 683.696 L1093.27 683.696 L1092.71 683.696 L1092.15 683.696 L1091.59 683.696 L1091.03 683.696 L1090.47 683.696 L1089.91 683.696 L1089.35 683.696 L1088.79 683.696 L1088.23 683.696 L1087.67 683.696 L1087.12 683.696 L1086.56 683.696 L1086 683.696 L1085.44 683.696 L1084.88 683.696 L1084.32 683.696 L1083.76 683.696 L1083.2 683.696 L1082.64 683.696 L1082.08 683.696 L1081.52 683.696 L1080.96 683.696 L1080.4 683.696 L1079.85 683.696 L1079.29 683.696 L1078.73 683.696 L1078.17 683.696 L1077.61 683.696 L1077.05 683.696 L1076.49 683.696 L1075.93 683.696 L1075.37 683.696 L1074.81 683.696 L1074.25 683.696 L1073.69 683.696 L1073.13 683.696 L1072.57 683.696 L1072.02 683.696 L1071.46 683.696 L1070.9 683.696 L1070.34 683.696 L1069.78 683.696 L1069.22 683.696 L1068.66 683.696 L1068.1 683.696 L1067.54 683.696 L1066.98 683.696 L1066.42 683.696 L1065.86 683.696 L1065.3 683.696 L1064.75 683.696 L1064.19 683.696 L1063.63 683.696 L1063.07 683.696 L1062.51 683.696 L1061.95 683.696 L1061.39 683.696 L1060.83 683.696 L1060.27 683.696 L1059.71 683.696 L1059.15 683.696 L1058.59 683.696 L1058.03 683.696 L1057.48 683.696 L1056.92 683.696 L1056.36 683.696 L1055.8 683.696 L1055.24 683.696 L1054.68 683.696 L1054.12 683.696 L1053.56 683.696 L1053 683.696 L1052.44 683.696 L1051.88 683.696 L1051.32 683.696 L1050.76 683.696 L1050.2 683.696 L1049.65 683.696 L1049.09 683.696 L1048.53 683.696 L1047.97 683.696 L1047.41 683.696 L1046.85 683.696 L1046.29 683.696 L1045.73 683.696 L1045.17 683.696 L1044.61 683.696 L1044.05 683.696 L1043.49 683.696 L1042.93 683.696 L1042.38 683.696 L1041.82 683.696 L1041.26 683.696 L1040.7 683.696 L1040.14 683.696 L1039.58 683.696 L1039.02 683.696 L1038.46 683.696 L1037.9 683.696 L1037.34 683.696 L1036.78 683.696 L1036.22 683.696 L1035.66 683.696 L1035.1 683.696 L1034.55 683.696 L1033.99 683.696 L1033.43 683.696 L1032.87 683.696 L1032.31 683.696 L1031.75 683.696 L1031.19 683.696 L1030.63 683.696 L1030.07 683.696 L1029.51 683.696 L1028.95 683.696 L1028.39 683.696 L1027.83 683.696 L1027.28 683.696 L1026.72 683.696 L1026.16 683.696 L1025.6 683.696 L1025.04 683.696 L1024.48 683.696 L1023.92 683.696 L1023.36 683.696 L1022.8 683.696 L1022.24 683.696 L1021.68 683.696 L1021.12 683.696 L1020.56 683.696 L1020.01 683.696 L1019.45 683.696 L1018.89 683.696 L1018.33 683.696 L1017.77 683.696 L1017.21 683.696 L1016.65 683.696 L1016.09 683.696 L1015.53 683.696 L1014.97 683.696 L1014.41 683.696 L1013.85 683.696 L1013.29 683.696 L1012.73 683.696 L1012.18 683.696 L1011.62 683.696 L1011.06 683.696 L1010.5 683.696 L1009.94 683.696 L1009.38 683.696 L1008.82 683.696 L1008.26 683.696 L1007.7 683.696 L1007.14 683.696 L1006.58 683.696 L1006.02 683.696 L1005.46 683.696 L1004.91 683.696 L1004.35 683.696 L1003.79 683.696 L1003.23 683.696 L1002.67 683.696 L1002.11 683.696 L1001.55 683.696 L1000.99 683.696 L1000.43 683.696 L999.872 683.696 L999.313 683.696 L998.754 683.696 L998.194 683.696 L997.635 683.696 L997.076 683.696 L996.517 683.696 L995.957 683.696 L995.398 683.696 L994.839 683.696 L994.28 683.696 L993.72 683.696 L993.161 683.696 L992.602 683.696 L992.043 683.696 L991.483 683.696 L990.924 683.696 L990.365 683.696 L989.806 683.696 L989.246 683.696 L988.687 683.696 L988.128 683.696 L987.569 683.696 L987.009 683.696 L986.45 683.696 L985.891 683.696 L985.332 683.696 L984.772 683.696 L984.213 683.696 L983.654 683.696 L983.095 683.696 L982.535 683.696 L981.976 683.696 L981.417 683.696 L980.858 683.696 L980.298 683.696 L979.739 683.696 L979.18 683.696 L978.621 683.696 L978.061 683.696 L977.502 683.696 L976.943 683.696 L976.384 683.696 L975.824 683.696 L975.265 683.696 L974.706 683.696 L974.147 683.696 L973.587 683.696 L973.028 683.696 L972.469 683.696 L971.91 683.696 L971.35 683.696 L970.791 683.696 L970.232 683.696 L969.673 683.696 L969.113 683.696 L968.554 683.696 L967.995 683.696 L967.436 683.696 L966.876 683.696 L966.317 683.696 L965.758 683.696 L965.199 683.696 L964.639 683.696 L964.08 683.696 L963.521 683.696 L962.962 683.696 L962.402 683.696 L961.843 683.696 L961.284 683.696 L960.725 683.696 L960.165 683.696 L959.606 683.696 L959.047 683.696 L958.488 683.696 L957.928 683.696 L957.369 683.696 L956.81 683.696 L956.251 683.696 L955.691 683.696 L955.132 683.696 L954.573 683.696 L954.014 683.696 L953.454 683.696 L952.895 683.696 L952.336 683.696 L951.777 683.696 L951.217 683.696 L950.658 683.696 L950.099 683.696 L949.54 683.696 L948.98 683.696 L948.421 683.696 L947.862 683.696 L947.303 683.696 L946.743 683.696 L946.184 683.696 L945.625 683.696 L945.066 683.696 L944.506 683.696 L943.947 683.696 L943.388 683.696 L942.829 683.696 L942.269 683.696 L941.71 683.696 L941.151 683.696 L940.592 683.696 L940.032 683.696 L939.473 683.696 L938.914 683.696 L938.355 683.696 L937.795 683.696 L937.236 683.696 L936.677 683.696 L936.118 683.696 L935.558 683.696 L934.999 683.696 L934.44 683.696 L933.881 683.696 L933.321 683.696 L932.762 683.696 L932.203 683.696 L931.644 683.696 L931.084 683.696 L930.525 683.696 L929.966 683.696 L929.406 683.696 L928.847 683.696 L928.288 683.696 L927.729 683.696 L927.169 683.696 L926.61 683.696 L926.051 683.696 L925.492 683.696 L924.932 683.696 L924.373 683.696 L923.814 683.696 L923.255 683.696 L922.695 683.696 L922.136 683.696 L921.577 683.696 L921.018 683.696 L920.458 683.696 L919.899 683.696 L919.34 683.696 L918.781 683.696 L918.221 683.696 L917.662 683.696 L917.103 683.696 L916.544 683.696 L915.984 683.696 L915.425 683.696 L914.866 683.696 L914.307 683.696 L913.747 683.696 L913.188 683.696 L912.629 683.696 L912.07 683.696 L911.51 683.696 L910.951 683.696 L910.392 683.696 L909.833 683.696 L909.273 683.696 L908.714 683.696 L908.155 683.696 L907.596 683.696 L907.036 683.696 L906.477 683.696 L905.918 683.696 L905.359 683.696 L904.799 683.696 L904.24 683.696 L903.681 683.696 L903.122 683.696 L902.562 683.696 L902.003 683.696 L901.444 683.696 L900.885 683.696 L900.325 683.696 L899.766 683.696 L899.207 683.696 L898.648 683.696 L898.088 683.696 L897.529 683.696 L896.97 683.696 L896.411 683.696 L895.851 683.696 L895.292 683.696 L894.733 683.696 L894.174 683.696 L893.614 683.696 L893.055 683.696 L892.496 683.696 L891.937 683.696 L891.377 683.696 L890.818 683.696 L890.259 683.696 L889.7 683.696 L889.14 683.696 L888.581 683.696 L888.022 683.696 L887.463 683.696 L886.903 683.696 L886.344 683.696 L885.785 683.696 L885.226 683.696 L884.666 683.696 L884.107 683.696 L883.548 683.696 L882.989 683.696 L882.429 683.696 L881.87 683.696 L881.311 683.696 L880.752 683.696 L880.192 683.696 L879.633 683.696 L879.074 683.696 L878.515 683.696 L877.955 683.696 L877.396 683.696 L876.837 683.696 L876.278 683.696 L875.718 683.696 L875.159 683.696 L874.6 683.696 L874.041 683.696 L873.481 683.696 L872.922 683.696 L872.363 683.696 L871.804 683.696 L871.244 683.696 L870.685 683.696 L870.126 683.696 L869.567 683.696 L869.007 683.696 L868.448 683.696 L867.889 683.696 L867.33 683.696 L866.77 683.696 L866.211 683.696 L865.652 683.696 L865.093 683.696 L864.533 683.696 L863.974 683.696 L863.415 683.696 L862.856 683.696 L862.296 683.696 L861.737 683.696 L861.178 683.696 L860.619 683.696 L860.059 683.696 L859.5 683.696 L858.941 683.696 L858.382 683.696 L857.822 683.696 L857.263 683.696 L856.704 683.696 L856.145 683.696 L855.585 683.696 L855.026 683.696 L854.467 683.696 L853.908 683.696 L853.348 683.696 L852.789 683.696 L852.23 683.696 L851.671 683.696 L851.111 683.696 L850.552 683.696 L849.993 683.696 L849.434 683.696 L848.874 683.696 L848.315 683.696 L847.756 683.696 L847.197 683.696 L846.637 683.696 L846.078 683.696 L845.519 683.696 L844.96 683.696 L844.4 683.696 L843.841 683.696 L843.282 683.696 L842.723 683.696 L842.163 683.696 L841.604 683.696 L841.045 683.696 L840.486 683.696 L839.926 683.696 L839.367 683.696 L838.808 683.696 L838.249 683.696 L837.689 683.696 L837.13 683.696 L836.571 683.696 L836.012 683.696 L835.452 683.696 L834.893 683.696 L834.334 683.696 L833.775 683.696 L833.215 683.696 L832.656 683.696 L832.097 683.696 L831.538 683.696 L830.978 683.696 L830.419 683.696 L829.86 683.696 L829.301 683.696 L828.741 683.696 L828.182 683.696 L827.623 683.696 L827.064 683.696 L826.504 683.696 L825.945 683.696 L825.386 683.696 L824.827 683.696 L824.267 683.696 L823.708 683.696 L823.149 683.696 L822.59 683.696 L822.03 683.696 L821.471 683.696 L820.912 683.696 L820.353 683.696 L819.793 683.696 L819.234 683.696 L818.675 683.696 L818.116 683.696 L817.556 683.696 L816.997 683.696 L816.438 683.696 L815.879 683.696 L815.319 683.696 L814.76 683.696 L814.201 683.696 L813.642 683.696 L813.082 683.696 L812.523 683.696 L811.964 683.696 L811.405 683.696 L810.845 683.696 L810.286 683.696 L809.727 683.696 L809.168 683.696 L808.608 683.696 L808.049 683.696 L807.49 683.696 L806.931 683.696 L806.371 683.696 L805.812 683.696 L805.253 683.696 L804.693 683.696 L804.134 683.696 L803.575 683.696 L803.016 683.696 L802.456 683.696 L801.897 683.696 L801.338 683.696 L800.779 683.696 L800.219 683.696 L799.66 683.696 L799.101 683.696 L798.542 683.696 L797.982 683.696 L797.423 683.696 L796.864 683.696 L796.305 683.696 L795.745 683.696 L795.186 683.696 L794.627 683.696 L794.068 683.696 L793.508 683.696 L792.949 683.696 L792.39 683.696 L791.831 683.696 L791.271 683.696 L790.712 683.696 L790.153 683.696 L789.594 683.696 L789.034 683.696 L788.475 683.696 L787.916 683.696 L787.357 683.696 L786.797 683.696 L786.238 683.696 L785.679 683.696 L785.12 683.696 L784.56 683.696 L784.001 683.696 L783.442 683.696 L782.883 683.696 L782.323 683.696 L781.764 683.696 L781.205 683.696 L780.646 683.696 L780.086 683.696 L779.527 683.696 L778.968 683.696 L778.409 683.696 L777.849 683.696 L777.29 683.696 L776.731 683.696 L776.172 683.696 L775.612 683.696 L775.053 683.696 L774.494 683.696 L773.935 683.696 L773.375 683.696 L772.816 683.696 L772.257 683.696 L771.698 683.696 L771.138 683.696 L770.579 683.696 L770.02 683.696 L769.461 683.696 L768.901 683.696 L768.342 683.696 L767.783 683.696 L767.224 683.696 L766.664 683.696 L766.105 683.696 L765.546 683.696 L764.987 683.696 L764.427 683.696 L763.868 683.696 L763.309 683.696 L762.75 683.696 L762.19 683.696 L761.631 683.696 L761.072 683.696 L760.513 683.696 L759.953 683.696 L759.394 683.696 L758.835 683.696 L758.276 683.696 L757.716 683.696 L757.157 683.696 L756.598 683.696 L756.039 683.696 L755.479 683.696 L754.92 683.696 L754.361 683.696 L753.802 683.696 L753.242 683.696 L752.683 683.696 L752.124 683.696 L751.565 683.696 L751.005 683.696 L750.446 683.696 L749.887 683.696 L749.328 683.696 L748.768 683.696 L748.209 683.696 L747.65 683.696 L747.091 683.696 L746.531 683.696 L745.972 683.696 L745.413 683.696 L744.854 683.696 L744.294 683.696 L743.735 683.696 L743.176 683.696 L742.617 683.696 L742.057 683.696 L741.498 683.696 L740.939 683.696 L740.38 683.696 L739.82 683.696 L739.261 683.696 L738.702 683.696 L738.143 683.696 L737.583 683.696 L737.024 683.696 L736.465 683.696 L735.906 683.696 L735.346 683.696 L734.787 683.696 L734.228 683.696 L733.669 683.696 L733.109 683.696 L732.55 683.696 L731.991 683.696 L731.432 683.696 L730.872 683.696 L730.313 683.696 L729.754 683.696 L729.195 683.696 L728.635 683.696 L728.076 683.696 L727.517 683.696 L726.958 683.696 L726.398 683.696 L725.839 683.696 L725.28 683.696 L724.721 683.696 L724.161 683.696 L723.602 683.696 L723.043 683.696 L722.484 683.696 L721.924 683.696 L721.365 683.696 L720.806 683.696 L720.247 683.696  Z\" fill=\"#3da44d\" fill-rule=\"evenodd\" fill-opacity=\"0.5\"/>\n<polyline clip-path=\"url(#clip433)\" style=\"stroke:#3da44d; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"720.247,684.299 720.806,684.299 721.365,684.299 721.924,684.299 722.484,684.299 723.043,684.299 723.602,684.299 724.161,684.299 724.721,684.299 725.28,684.299 725.839,684.299 726.398,684.299 726.958,684.299 727.517,684.299 728.076,684.299 728.635,684.299 729.195,684.299 729.754,684.299 730.313,684.299 730.872,684.299 731.432,684.299 731.991,684.299 732.55,684.299 733.109,684.299 733.669,684.299 734.228,684.299 734.787,684.299 735.346,684.299 735.906,684.299 736.465,684.299 737.024,684.299 737.583,684.299 738.143,684.299 738.702,684.299 739.261,684.299 739.82,684.299 740.38,684.299 740.939,684.299 741.498,684.299 742.057,684.299 742.617,684.299 743.176,684.299 743.735,684.299 744.294,684.299 744.854,684.299 745.413,684.299 745.972,684.299 746.531,684.299 747.091,684.299 747.65,684.299 748.209,684.299 748.768,684.299 749.328,684.299 749.887,684.299 750.446,684.299 751.005,684.299 751.565,684.299 752.124,684.299 752.683,684.299 753.242,684.299 753.802,684.299 754.361,684.299 754.92,684.299 755.479,684.299 756.039,684.299 756.598,684.299 757.157,684.299 757.716,684.299 758.276,684.299 758.835,684.299 759.394,684.299 759.953,684.299 760.513,684.299 761.072,684.299 761.631,684.299 762.19,684.299 762.75,684.299 763.309,684.299 763.868,684.299 764.427,684.299 764.987,684.299 765.546,684.299 766.105,684.299 766.664,684.299 767.224,684.299 767.783,684.299 768.342,684.299 768.901,684.299 769.461,684.299 770.02,684.299 770.579,684.299 771.138,684.299 771.698,684.299 772.257,684.299 772.816,684.299 773.375,684.299 773.935,684.299 774.494,684.299 775.053,684.299 775.612,684.299 776.172,684.299 776.731,684.299 777.29,684.299 777.849,684.299 778.409,684.299 778.968,684.299 779.527,684.299 780.086,684.299 780.646,684.299 781.205,684.299 781.764,684.299 782.323,684.299 782.883,684.299 783.442,684.299 784.001,684.299 784.56,684.299 785.12,684.299 785.679,684.299 786.238,684.299 786.797,684.299 787.357,684.299 787.916,684.299 788.475,684.299 789.034,684.299 789.594,684.299 790.153,684.299 790.712,684.299 791.271,684.299 791.831,684.299 792.39,684.299 792.949,684.299 793.508,684.299 794.068,684.299 794.627,684.299 795.186,684.299 795.745,684.299 796.305,684.299 796.864,684.299 797.423,684.299 797.982,684.299 798.542,684.299 799.101,684.299 799.66,684.299 800.219,684.299 800.779,684.299 801.338,684.299 801.897,684.299 802.456,684.299 803.016,684.299 803.575,684.299 804.134,684.299 804.693,684.299 805.253,684.299 805.812,684.299 806.371,684.299 806.931,684.299 807.49,684.299 808.049,684.299 808.608,684.299 809.168,684.299 809.727,684.299 810.286,684.299 810.845,684.299 811.405,684.299 811.964,684.299 812.523,684.299 813.082,684.299 813.642,684.299 814.201,684.299 814.76,684.299 815.319,684.299 815.879,684.299 816.438,684.299 816.997,684.299 817.556,684.299 818.116,684.299 818.675,684.299 819.234,684.299 819.793,684.299 820.353,684.299 820.912,684.299 821.471,684.299 822.03,684.299 822.59,684.299 823.149,684.299 823.708,684.299 824.267,684.299 824.827,684.299 825.386,684.299 825.945,684.299 826.504,684.299 827.064,684.299 827.623,684.299 828.182,684.299 828.741,684.299 829.301,684.299 829.86,684.299 830.419,684.299 830.978,684.299 831.538,684.299 832.097,684.299 832.656,684.299 833.215,684.299 833.775,684.299 834.334,684.299 834.893,684.299 835.452,684.299 836.012,684.299 836.571,684.299 837.13,684.299 837.689,684.299 838.249,684.299 838.808,684.299 839.367,684.299 839.926,684.299 840.486,684.299 841.045,684.299 841.604,684.299 842.163,684.299 842.723,684.299 843.282,684.299 843.841,684.299 844.4,684.299 844.96,684.299 845.519,684.299 846.078,684.299 846.637,684.299 847.197,684.299 847.756,684.299 848.315,684.299 848.874,684.299 849.434,684.299 849.993,684.299 850.552,684.299 851.111,684.299 851.671,684.299 852.23,684.299 852.789,684.299 853.348,684.299 853.908,684.299 854.467,684.299 855.026,684.299 855.585,684.299 856.145,684.299 856.704,684.299 857.263,684.299 857.822,684.299 858.382,684.299 858.941,684.299 859.5,684.299 860.059,684.299 860.619,684.299 861.178,684.299 861.737,684.299 862.296,684.299 862.856,684.299 863.415,684.299 863.974,684.299 864.533,684.299 865.093,684.299 865.652,684.299 866.211,684.299 866.77,684.299 867.33,684.299 867.889,684.299 868.448,684.299 869.007,684.299 869.567,684.299 870.126,684.299 870.685,684.299 871.244,684.299 871.804,684.299 872.363,684.299 872.922,684.299 873.481,684.299 874.041,684.299 874.6,684.299 875.159,684.299 875.718,684.299 876.278,684.299 876.837,684.299 877.396,684.299 877.955,684.299 878.515,684.299 879.074,684.299 879.633,684.299 880.192,684.299 880.752,684.299 881.311,684.299 881.87,684.299 882.429,684.299 882.989,684.299 883.548,684.299 884.107,684.299 884.666,684.299 885.226,684.299 885.785,684.299 886.344,684.299 886.903,684.299 887.463,684.299 888.022,684.299 888.581,684.299 889.14,684.299 889.7,684.299 890.259,684.299 890.818,684.299 891.377,684.299 891.937,684.299 892.496,684.299 893.055,684.299 893.614,684.299 894.174,684.299 894.733,684.299 895.292,684.299 895.851,684.299 896.411,684.299 896.97,684.299 897.529,684.299 898.088,684.299 898.648,684.299 899.207,684.299 899.766,684.299 900.325,684.299 900.885,684.299 901.444,684.299 902.003,684.299 902.562,684.299 903.122,684.299 903.681,684.299 904.24,684.299 904.799,684.299 905.359,684.299 905.918,684.299 906.477,684.299 907.036,684.299 907.596,684.299 908.155,684.299 908.714,684.299 909.273,684.299 909.833,684.299 910.392,684.299 910.951,684.299 911.51,684.299 912.07,684.299 912.629,684.299 913.188,684.299 913.747,684.299 914.307,684.299 914.866,684.299 915.425,684.299 915.984,684.299 916.544,684.299 917.103,684.299 917.662,684.299 918.221,684.299 918.781,684.299 919.34,684.299 919.899,684.299 920.458,684.299 921.018,684.299 921.577,684.299 922.136,684.299 922.695,684.299 923.255,684.299 923.814,684.299 924.373,684.299 924.932,684.299 925.492,684.299 926.051,684.299 926.61,684.299 927.169,684.299 927.729,684.299 928.288,684.299 928.847,684.299 929.406,684.299 929.966,684.299 930.525,684.299 931.084,684.299 931.644,684.299 932.203,684.299 932.762,684.299 933.321,684.299 933.881,684.299 934.44,684.299 934.999,684.299 935.558,684.299 936.118,684.299 936.677,684.299 937.236,684.299 937.795,684.299 938.355,684.299 938.914,684.299 939.473,684.299 940.032,684.299 940.592,684.299 941.151,684.299 941.71,684.299 942.269,684.299 942.829,684.299 943.388,684.299 943.947,684.299 944.506,684.299 945.066,684.299 945.625,684.299 946.184,684.299 946.743,684.299 947.303,684.299 947.862,684.299 948.421,684.299 948.98,684.299 949.54,684.299 950.099,684.299 950.658,684.299 951.217,684.299 951.777,684.299 952.336,684.299 952.895,684.299 953.454,684.299 954.014,684.299 954.573,684.299 955.132,684.299 955.691,684.299 956.251,684.299 956.81,684.299 957.369,684.299 957.928,684.299 958.488,684.299 959.047,684.299 959.606,684.299 960.165,684.299 960.725,684.299 961.284,684.299 961.843,684.299 962.402,684.299 962.962,684.299 963.521,684.299 964.08,684.299 964.639,684.299 965.199,684.299 965.758,684.299 966.317,684.299 966.876,684.299 967.436,684.299 967.995,684.299 968.554,684.299 969.113,684.299 969.673,684.299 970.232,684.299 970.791,684.299 971.35,684.299 971.91,684.299 972.469,684.299 973.028,684.299 973.587,684.299 974.147,684.299 974.706,684.299 975.265,684.299 975.824,684.299 976.384,684.299 976.943,684.299 977.502,684.299 978.061,684.299 978.621,684.299 979.18,684.299 979.739,684.299 980.298,684.299 980.858,684.299 981.417,684.299 981.976,684.299 982.535,684.299 983.095,684.299 983.654,684.299 984.213,684.299 984.772,684.299 985.332,684.299 985.891,684.299 986.45,684.299 987.009,684.299 987.569,684.299 988.128,684.299 988.687,684.299 989.246,684.299 989.806,684.299 990.365,684.299 990.924,684.299 991.483,684.299 992.043,684.299 992.602,684.299 993.161,684.299 993.72,684.299 994.28,684.299 994.839,684.299 995.398,684.299 995.957,684.299 996.517,684.299 997.076,684.299 997.635,684.299 998.194,684.299 998.754,684.299 999.313,684.299 999.872,684.299 1000.43,684.299 1000.99,684.299 1001.55,684.299 1002.11,684.299 1002.67,684.299 1003.23,684.299 1003.79,684.299 1004.35,684.299 1004.91,684.299 1005.46,684.299 1006.02,684.299 1006.58,684.299 1007.14,684.299 1007.7,684.299 1008.26,684.299 1008.82,684.299 1009.38,684.299 1009.94,684.299 1010.5,684.299 1011.06,684.299 1011.62,684.299 1012.18,684.299 1012.73,684.299 1013.29,684.299 1013.85,684.299 1014.41,684.299 1014.97,684.299 1015.53,684.299 1016.09,684.299 1016.65,684.299 1017.21,684.299 1017.77,684.299 1018.33,684.299 1018.89,684.299 1019.45,684.299 1020.01,684.299 1020.56,684.299 1021.12,684.299 1021.68,684.299 1022.24,684.299 1022.8,684.299 1023.36,684.299 1023.92,684.299 1024.48,684.299 1025.04,684.299 1025.6,684.299 1026.16,684.299 1026.72,684.299 1027.28,684.299 1027.83,684.299 1028.39,684.299 1028.95,684.299 1029.51,684.299 1030.07,684.299 1030.63,684.299 1031.19,684.299 1031.75,684.299 1032.31,684.299 1032.87,684.299 1033.43,684.299 1033.99,684.299 1034.55,684.299 1035.1,684.299 1035.66,684.299 1036.22,684.299 1036.78,684.299 1037.34,684.299 1037.9,684.299 1038.46,684.299 1039.02,684.299 1039.58,684.299 1040.14,684.299 1040.7,684.299 1041.26,684.299 1041.82,684.299 1042.38,684.299 1042.93,684.299 1043.49,684.299 1044.05,684.299 1044.61,684.299 1045.17,684.299 1045.73,684.299 1046.29,684.299 1046.85,684.299 1047.41,684.299 1047.97,684.299 1048.53,684.299 1049.09,684.299 1049.65,684.299 1050.2,684.299 1050.76,684.299 1051.32,684.299 1051.88,684.299 1052.44,684.299 1053,684.299 1053.56,684.299 1054.12,684.299 1054.68,684.299 1055.24,684.299 1055.8,684.299 1056.36,684.299 1056.92,684.299 1057.48,684.299 1058.03,684.299 1058.59,684.299 1059.15,684.299 1059.71,684.299 1060.27,684.299 1060.83,684.299 1061.39,684.299 1061.95,684.299 1062.51,684.299 1063.07,684.299 1063.63,684.299 1064.19,684.299 1064.75,684.299 1065.3,684.299 1065.86,684.299 1066.42,684.299 1066.98,684.299 1067.54,684.299 1068.1,684.299 1068.66,684.299 1069.22,684.299 1069.78,684.299 1070.34,684.299 1070.9,684.299 1071.46,684.299 1072.02,684.299 1072.57,684.299 1073.13,684.299 1073.69,684.299 1074.25,684.299 1074.81,684.299 1075.37,684.299 1075.93,684.299 1076.49,684.299 1077.05,684.299 1077.61,684.299 1078.17,684.299 1078.73,684.299 1079.29,684.299 1079.85,684.299 1080.4,684.299 1080.96,684.299 1081.52,684.299 1082.08,684.299 1082.64,684.299 1083.2,684.299 1083.76,684.299 1084.32,684.299 1084.88,684.299 1085.44,684.299 1086,684.299 1086.56,684.299 1087.12,684.299 1087.67,684.299 1088.23,684.299 1088.79,684.299 1089.35,684.299 1089.91,684.299 1090.47,684.299 1091.03,684.299 1091.59,684.299 1092.15,684.299 1092.71,684.299 1093.27,684.299 1093.83,684.299 1094.39,684.299 1094.94,684.299 1095.5,684.299 1096.06,684.299 1096.62,684.299 1097.18,684.299 1097.74,684.299 1098.3,684.299 1098.86,684.299 1099.42,684.299 1099.98,684.299 1100.54,684.299 1101.1,684.299 1101.66,684.299 1102.22,684.299 1102.77,684.299 1103.33,684.299 1103.89,684.299 1104.45,684.299 1105.01,684.299 1105.57,684.299 1106.13,684.299 1106.69,684.299 1107.25,684.299 1107.81,684.299 1108.37,684.299 1108.93,684.299 1109.49,684.299 1110.04,684.299 1110.6,684.299 1111.16,684.299 1111.72,684.299 1112.28,684.299 1112.84,684.299 1113.4,684.299 1113.96,684.299 1114.52,684.299 1115.08,684.299 1115.64,684.299 1116.2,684.299 1116.76,684.299 1117.31,684.299 1117.87,684.299 1118.43,684.299 1118.99,684.299 1119.55,684.299 1120.11,684.299 1120.67,684.299 1121.23,684.299 1121.79,684.299 1122.35,684.299 1122.91,684.299 1123.47,684.299 1124.03,684.299 1124.59,684.299 1125.14,684.299 1125.7,684.299 1126.26,684.299 1126.82,684.299 1127.38,684.299 1127.94,684.299 1128.5,684.299 1129.06,684.299 1129.62,684.299 1130.18,684.299 1130.74,684.299 1131.3,684.299 1131.86,684.299 1132.41,684.299 1132.97,684.299 1133.53,684.299 1134.09,684.299 1134.65,684.299 1135.21,684.299 1135.77,684.299 1136.33,684.299 1136.89,684.299 1137.45,684.299 1138.01,684.299 1138.57,684.299 1139.13,684.299 1139.68,684.299 1140.24,684.299 1140.8,684.299 1141.36,684.299 1141.92,684.299 1142.48,684.299 1143.04,684.299 1143.6,684.299 1144.16,684.299 1144.72,684.299 1145.28,684.299 1145.84,684.299 1146.4,684.299 1146.96,684.299 1147.51,684.299 1148.07,684.299 1148.63,684.299 1149.19,684.299 1149.75,684.299 1150.31,684.299 1150.87,684.299 1151.43,684.299 1151.99,684.299 1152.55,684.299 1153.11,684.299 1153.67,684.299 1154.23,684.299 1154.78,684.299 1155.34,684.299 1155.9,684.299 1156.46,684.299 1157.02,684.299 1157.58,684.299 1158.14,684.299 1158.7,684.299 1159.26,684.299 1159.82,684.299 1160.38,684.299 1160.94,684.299 1161.5,684.299 1162.05,684.299 1162.61,684.299 1163.17,684.299 1163.73,684.299 1164.29,684.299 1164.85,684.299 1165.41,684.299 1165.97,684.299 1166.53,684.299 1167.09,684.299 1167.65,684.299 1168.21,684.299 1168.77,684.299 1169.33,684.299 1169.88,684.299 1170.44,684.299 1171,684.299 1171.56,684.299 1172.12,684.299 1172.68,684.299 1173.24,684.299 1173.8,684.299 1174.36,684.299 1174.92,684.299 1175.48,684.299 1176.04,684.299 1176.6,684.299 1177.15,684.299 1177.71,684.299 1178.27,684.299 1178.83,684.299 1179.39,684.299 1179.95,684.299 1180.51,684.299 1181.07,684.299 1181.63,684.299 1182.19,684.299 1182.75,684.299 1183.31,684.299 1183.87,684.299 1184.43,684.299 1184.98,684.299 1185.54,684.299 1186.1,684.299 1186.66,684.299 1187.22,684.299 1187.78,684.299 1188.34,684.299 1188.9,684.299 1189.46,684.299 1190.02,684.299 1190.58,684.299 1191.14,684.299 1191.7,684.299 1192.25,684.299 1192.81,684.299 1193.37,684.299 1193.93,684.299 1194.49,684.299 1195.05,684.299 1195.61,684.299 1196.17,684.299 1196.73,684.299 1197.29,684.299 1197.85,684.299 1198.41,684.299 1198.97,684.299 1199.52,684.299 1200.08,684.299 1200.64,684.299 1201.2,684.299 1201.76,684.299 1202.32,684.299 1202.88,684.299 1203.44,684.299 1204,684.299 1204.56,684.299 1205.12,684.299 1205.68,684.299 1206.24,684.299 1206.8,684.299 1207.35,684.299 1207.91,684.299 1208.47,684.299 1209.03,684.299 1209.59,684.299 1210.15,684.299 1210.71,684.299 1211.27,684.299 1211.83,684.299 1212.39,684.299 1212.95,684.299 1213.51,684.299 1214.07,684.299 1214.62,684.299 1215.18,684.299 1215.74,684.299 1216.3,684.299 1216.86,684.299 1217.42,684.299 1217.98,684.299 1218.54,684.299 1219.1,684.299 1219.66,684.299 1220.22,684.299 1220.78,684.299 1221.34,684.299 1221.89,684.299 1222.45,684.299 1223.01,684.299 1223.57,684.299 1224.13,684.299 1224.69,684.299 1225.25,684.299 1225.81,684.299 1226.37,684.299 1226.93,684.299 1227.49,684.299 1228.05,684.299 1228.61,684.299 1229.17,684.299 1229.72,684.299 1230.28,684.299 1230.84,684.299 1231.4,684.299 1231.96,684.299 1232.52,684.299 1233.08,684.299 1233.64,684.299 1234.2,684.299 1234.76,684.299 1235.32,684.299 1235.88,684.299 1236.44,684.299 1236.99,684.299 1237.55,684.299 1238.11,684.299 1238.67,684.299 1239.23,684.299 1239.79,684.299 1240.35,684.299 1240.91,684.299 1241.47,684.299 1242.03,684.299 1242.59,684.299 1243.15,684.299 1243.71,684.299 1244.26,684.299 1244.82,684.299 1245.38,684.299 1245.94,684.299 1246.5,684.299 1247.06,684.299 1247.62,684.299 1248.18,684.299 1248.74,684.299 1249.3,684.299 1249.86,684.299 1250.42,684.299 1250.98,684.299 1251.54,684.299 1252.09,684.299 1252.65,684.299 1253.21,684.299 1253.77,684.299 1254.33,684.299 1254.89,684.299 1255.45,684.299 1256.01,684.299 1256.57,684.299 1257.13,684.299 1257.69,684.299 1258.25,684.299 1258.81,684.299 1259.36,684.299 1259.92,684.299 1260.48,684.299 1261.04,684.299 1261.6,684.299 1262.16,684.299 1262.72,684.299 1263.28,684.299 1263.84,684.299 1264.4,684.299 1264.96,684.299 1265.52,684.299 1266.08,684.299 1266.63,684.299 1267.19,684.299 1267.75,684.299 1268.31,684.299 1268.87,684.299 1269.43,684.299 1269.99,684.299 1270.55,684.299 1271.11,684.299 1271.67,684.299 1272.23,684.299 1272.79,684.299 1273.35,684.299 1273.91,684.299 1274.46,684.299 1275.02,684.299 1275.58,684.299 1276.14,684.299 1276.7,684.299 1277.26,684.299 1277.82,684.299 1278.38,684.299 1278.94,684.299 1279.5,684.299 1280.06,684.299 1280.62,684.299 1281.18,684.299 1281.73,684.299 1282.29,684.299 1282.85,684.299 1283.41,684.299 1283.97,684.299 1284.53,684.299 1285.09,684.299 1285.65,684.299 1286.21,684.299 1286.77,684.299 1287.33,684.299 1287.89,684.299 1288.45,684.299 1289,684.299 1289.56,684.299 1290.12,684.299 1290.68,684.299 1291.24,684.299 1291.8,684.299 1292.36,684.299 1292.92,684.299 1293.48,684.299 1294.04,684.299 1294.6,684.299 1295.16,684.299 1295.72,684.299 1296.28,684.299 1296.83,684.299 1297.39,684.299 1297.95,684.299 1298.51,684.299 1299.07,684.299 1299.63,684.299 1300.19,684.299 1300.75,684.299 1301.31,684.299 1301.87,684.299 1302.43,684.299 1302.99,684.299 1303.55,684.299 1304.1,684.299 1304.66,684.299 1305.22,684.299 1305.78,684.299 1306.34,684.299 1306.9,684.299 1307.46,684.299 1308.02,684.299 1308.58,684.299 1309.14,684.299 1309.7,684.299 1310.26,684.299 1310.82,684.299 1311.38,684.299 1311.93,684.299 1312.49,684.299 1313.05,684.299 1313.61,684.299 1314.17,684.299 1314.73,684.299 1315.29,684.299 1315.85,684.299 1316.41,684.299 1316.97,684.299 1317.53,684.299 1318.09,684.299 1318.65,684.299 1319.2,684.299 1319.76,684.299 1320.32,684.299 1320.88,684.299 1321.44,684.299 1322,684.299 1322.56,684.299 1323.12,684.299 1323.68,684.299 1324.24,684.299 1324.8,684.299 1325.36,684.299 1325.92,684.299 1326.47,684.299 1327.03,684.299 1327.59,684.299 1328.15,684.299 1328.71,684.299 1329.27,684.299 1329.83,684.299 1330.39,684.299 1330.95,684.299 1331.51,684.299 1332.07,684.299 1332.63,684.299 1333.19,684.299 1333.75,684.299 1334.3,684.299 1334.86,684.299 1335.42,684.299 1335.98,684.299 1336.54,684.299 1337.1,684.299 1337.66,684.299 1338.22,684.299 1338.78,684.299 1339.34,684.299 1339.9,684.299 1340.46,684.299 1341.02,684.299 1341.57,684.299 1342.13,684.299 1342.69,684.299 1343.25,684.299 1343.81,684.299 1344.37,684.299 1344.93,684.299 1345.49,684.299 1346.05,684.299 1346.61,684.299 1347.17,684.299 1347.73,684.299 1348.29,684.299 1348.84,684.299 1349.4,684.299 1349.96,684.299 1350.52,684.299 1351.08,684.299 1351.64,684.299 1352.2,684.299 1352.76,684.299 1353.32,684.299 1353.88,684.299 1354.44,684.299 1355,684.299 1355.56,684.299 1356.12,684.299 1356.67,684.299 1357.23,684.299 1357.79,684.299 1358.35,684.299 1358.91,684.299 1359.47,684.299 1360.03,684.299 1360.59,684.299 1361.15,684.299 1361.71,684.299 1362.27,684.299 1362.83,684.299 1363.39,684.299 1363.94,684.299 1364.5,684.299 1365.06,684.299 1365.62,684.299 1366.18,684.299 1366.74,684.299 1367.3,684.299 1367.86,684.299 1368.42,684.299 1368.98,684.299 1369.54,684.299 1370.1,684.299 1370.66,684.299 1371.21,684.299 1371.77,684.299 1372.33,684.299 1372.89,684.299 1373.45,684.299 1374.01,684.299 1374.57,684.299 1375.13,684.299 1375.69,684.299 1376.25,684.299 1376.81,684.299 1377.37,684.299 1377.93,684.299 1378.49,684.299 1379.04,684.299 1379.6,684.299 1380.16,684.299 1380.72,684.299 1381.28,684.299 1381.84,684.299 1382.4,684.299 1382.96,684.299 1383.52,684.299 1384.08,684.299 1384.64,684.299 1385.2,684.299 1385.76,684.299 1386.31,684.299 1386.87,684.299 1387.43,684.299 1387.99,684.299 1388.55,684.299 1389.11,684.299 1389.67,684.299 1390.23,684.299 1390.79,684.299 1391.35,684.299 1391.91,684.299 1392.47,684.299 1393.03,684.299 1393.58,684.299 1394.14,684.299 1394.7,684.299 1395.26,684.299 1395.82,684.299 1396.38,684.299 1396.94,684.299 1397.5,684.299 1398.06,684.299 1398.62,684.299 1399.18,684.299 1399.74,684.299 1400.3,684.299 1400.86,684.299 1401.41,684.299 1401.97,684.299 1402.53,684.299 1403.09,684.299 1403.65,684.299 1404.21,684.299 1404.77,684.299 1405.33,684.299 1405.89,684.299 1406.45,684.299 1407.01,684.299 1407.57,684.299 1408.13,684.299 1408.68,684.299 1409.24,684.299 1409.8,684.299 1410.36,684.299 1410.92,684.299 1411.48,684.299 1412.04,684.299 1412.6,684.299 1413.16,684.299 1413.72,684.299 1414.28,684.299 1414.84,684.299 1415.4,684.299 1415.95,684.299 1416.51,684.299 1417.07,684.299 1417.63,684.299 1418.19,684.299 1418.75,684.299 1419.31,684.299 1419.87,684.299 1420.43,684.299 1420.99,684.299 1421.55,684.299 1422.11,684.299 1422.67,684.299 1423.23,684.299 1423.78,684.299 1424.34,684.299 1424.9,684.299 1425.46,684.299 1426.02,684.299 1426.58,684.299 1427.14,684.299 1427.7,684.299 1428.26,684.299 1428.82,684.299 1429.38,684.299 1429.94,684.299 1430.5,684.299 1431.05,684.299 1431.61,684.299 1432.17,684.299 1432.73,684.299 1433.29,684.299 1433.85,684.299 1434.41,684.299 1434.97,684.299 1435.53,684.299 1436.09,684.299 1436.65,684.299 1437.21,684.299 1437.77,684.299 1438.33,684.299 1438.88,684.299 1439.44,684.299 1440,684.299 1440.56,684.299 1441.12,684.299 1441.68,684.299 1442.24,684.299 1442.8,684.299 1443.36,684.299 1443.92,684.299 1444.48,684.299 1445.04,684.299 1445.6,684.299 1446.15,684.299 1446.71,684.299 1447.27,684.299 1447.83,684.299 1448.39,684.299 1448.95,684.299 1449.51,684.299 1450.07,684.299 1450.63,684.299 1451.19,684.299 1451.75,684.299 1452.31,684.299 1452.87,684.299 1453.42,684.299 1453.98,684.299 1454.54,684.299 1455.1,684.299 1455.66,684.299 1456.22,684.299 1456.78,684.299 1457.34,684.299 1457.9,684.299 1458.46,684.299 1459.02,684.299 1459.58,684.299 1460.14,684.299 1460.7,684.299 1461.25,684.299 1461.81,684.299 1462.37,684.299 1462.93,684.299 1463.49,684.299 1464.05,684.299 1464.61,684.299 1465.17,684.299 1465.73,684.299 1466.29,684.299 1466.85,684.299 1467.41,684.299 1467.97,684.299 1468.52,684.299 1469.08,684.299 1469.64,684.299 1470.2,684.299 1470.76,684.299 1471.32,684.299 1471.88,684.299 1472.44,684.299 1473,684.299 1473.56,684.299 1474.12,684.299 1474.68,684.299 1475.24,684.299 1475.79,684.299 1476.35,684.299 1476.91,684.299 1477.47,684.299 1478.03,684.299 1478.59,684.299 1479.15,684.299 1479.71,684.299 1480.27,684.299 1480.83,684.299 1481.39,684.299 1481.95,684.299 1482.51,684.299 1483.07,684.299 1483.62,684.299 1484.18,684.299 1484.74,684.299 1485.3,684.299 1485.86,684.299 1486.42,684.299 1486.98,684.299 1487.54,684.299 1488.1,684.299 1488.66,684.299 1489.22,684.299 1489.78,684.299 1490.34,684.299 1490.89,684.299 1491.45,684.299 1492.01,684.299 1492.57,684.299 1493.13,684.299 1493.69,684.299 1494.25,684.299 1494.81,684.299 1495.37,684.299 1495.93,684.299 1496.49,684.299 1497.05,684.299 1497.61,684.299 1498.16,684.299 1498.72,684.299 1499.28,684.299 1499.84,684.299 1500.4,684.299 1500.96,684.299 1501.52,684.299 1502.08,684.299 1502.64,684.299 1503.2,684.299 1503.76,684.299 1504.32,684.299 1504.88,684.299 1505.44,684.299 1505.99,684.299 1506.55,684.299 1507.11,684.299 1507.67,684.299 1508.23,684.299 1508.79,684.299 1509.35,684.299 1509.91,684.299 1510.47,684.299 1511.03,684.299 1511.59,684.299 1512.15,684.299 1512.71,684.299 1513.26,684.299 1513.82,684.299 1514.38,684.299 1514.94,684.299 1515.5,684.299 1516.06,684.299 1516.62,684.299 1517.18,684.299 1517.74,684.299 1518.3,684.299 1518.86,684.299 1519.42,684.299 1519.98,684.299 1520.53,684.299 1521.09,684.299 1521.65,684.299 1522.21,684.299 1522.77,684.299 1523.33,684.299 1523.89,684.299 1524.45,684.299 1525.01,684.299 1525.57,684.299 1526.13,684.299 1526.69,684.299 1527.25,684.299 1527.81,684.299 1528.36,684.299 1528.92,684.299 1529.48,684.299 1530.04,684.299 1530.6,684.299 1531.16,684.299 1531.72,684.299 1532.28,684.299 1532.84,684.299 1533.4,684.299 1533.96,684.299 1534.52,684.299 1535.08,684.299 1535.63,684.299 1536.19,684.299 1536.75,684.299 1537.31,684.299 1537.87,684.299 1538.43,684.299 1538.99,684.299 1539.55,684.299 1540.11,684.299 1540.67,684.299 1541.23,684.299 1541.79,684.299 1542.35,684.299 1542.9,684.299 1543.46,684.299 1544.02,684.299 1544.58,684.299 1545.14,684.299 1545.7,684.299 1546.26,684.299 1546.82,684.299 1547.38,684.299 1547.94,684.299 1548.5,684.299 1549.06,684.299 1549.62,684.299 1550.18,684.299 1550.73,684.299 1551.29,684.299 1551.85,684.299 1552.41,684.299 1552.97,684.299 1553.53,684.299 1554.09,684.299 1554.65,684.299 1555.21,684.299 1555.77,684.299 1556.33,684.299 1556.89,684.299 1557.45,684.299 1558,684.299 1558.56,684.299 1559.12,684.299 1559.68,684.299 1560.24,684.299 1560.8,684.299 1561.36,684.299 1561.92,684.299 1562.48,684.299 1563.04,684.299 1563.6,684.299 1564.16,684.299 1564.72,684.299 1565.28,684.299 1565.83,684.299 1566.39,684.299 1566.95,684.299 1567.51,684.299 1568.07,684.299 1568.63,684.299 1569.19,684.299 1569.75,684.299 1570.31,684.299 1570.87,684.299 1571.43,684.299 1571.99,684.299 1572.55,684.299 1573.1,684.299 1573.66,684.299 1574.22,684.299 1574.78,684.299 1575.34,684.299 1575.9,684.299 1576.46,684.299 1577.02,684.299 1577.58,684.299 1578.14,684.299 1578.7,684.299 1579.26,684.299 1579.82,684.299 1580.37,684.299 1580.93,684.299 1581.49,684.299 1582.05,684.299 1582.61,684.299 1583.17,684.299 1583.73,684.299 1584.29,684.299 1584.85,684.299 1585.41,684.299 1585.97,684.299 1586.53,684.299 1587.09,684.299 1587.65,684.299 1588.2,684.299 1588.76,684.299 1589.32,684.299 1589.88,684.299 1590.44,684.299 1591,684.299 1591.56,684.299 1592.12,684.299 1592.68,684.299 1593.24,684.299 1593.8,684.299 1594.36,684.299 1594.92,684.299 1595.47,684.299 1596.03,684.299 1596.59,684.299 1597.15,684.299 1597.71,684.299 1598.27,684.299 1598.83,684.299 1599.39,684.299 1599.95,684.299 1600.51,684.299 1601.07,684.299 1601.63,684.299 1602.19,684.299 1602.74,684.299 1603.3,684.299 1603.86,684.299 1604.42,684.299 1604.98,684.299 1605.54,684.299 1606.1,684.299 1606.66,684.299 1607.22,684.299 1607.78,684.299 1608.34,684.299 1608.9,684.299 1609.46,684.299 1610.02,684.299 1610.57,684.299 1611.13,684.299 1611.69,684.299 1612.25,684.299 1612.81,684.299 1613.37,684.299 1613.93,684.299 1614.49,684.299 1615.05,684.299 1615.61,684.299 1616.17,684.299 1616.73,684.299 1617.29,684.299 1617.84,684.299 1618.4,684.299 1618.96,684.299 1619.52,684.299 1620.08,684.299 1620.64,684.299 1621.2,684.299 1621.76,684.299 1622.32,684.299 1622.88,684.299 1623.44,684.299 1624,684.299 1624.56,684.299 1625.11,684.299 1625.67,684.299 1626.23,684.299 1626.79,684.299 1627.35,684.299 1627.91,684.299 1628.47,684.299 1629.03,684.299 1629.59,684.299 1630.15,684.299 1630.71,684.299 1631.27,684.299 1631.83,684.299 1632.39,684.299 1632.94,684.299 1633.5,684.299 1634.06,684.299 1634.62,684.299 1635.18,684.299 1635.74,684.299 1636.3,684.299 1636.86,684.299 1637.42,684.299 1637.98,684.299 1638.54,684.299 1639.1,684.299 1639.66,684.299 1640.21,684.299 1640.77,684.299 1641.33,684.299 1641.89,684.299 1642.45,684.299 1643.01,684.299 1643.57,684.299 1644.13,684.299 1644.69,684.299 1645.25,684.299 1645.81,684.299 1646.37,684.299 1646.93,684.299 1647.48,684.299 1648.04,684.299 1648.6,684.299 1649.16,684.299 1649.72,684.299 1650.28,684.299 1650.84,684.299 1651.4,684.299 1651.96,684.299 1652.52,684.299 1653.08,684.299 1653.64,684.299 1654.2,684.299 1654.76,684.299 1655.31,684.299 1655.87,684.299 1656.43,684.299 1656.99,684.299 1657.55,684.299 1658.11,684.299 1658.67,684.299 1659.23,684.299 1659.79,684.299 1660.35,684.299 1660.91,684.299 1661.47,684.299 1662.03,684.299 1662.58,684.299 1663.14,684.299 1663.7,684.299 1664.26,684.299 1664.82,684.299 1665.38,684.299 1665.94,684.299 1666.5,684.299 1667.06,684.299 1667.62,684.299 1668.18,684.299 1668.74,684.299 1669.3,684.299 1669.85,684.299 1670.41,684.299 1670.97,684.299 1671.53,684.299 1672.09,684.299 1672.65,684.299 1673.21,684.299 1673.77,684.299 1674.33,684.299 1674.89,684.299 1675.45,684.299 1676.01,684.299 1676.57,684.299 1677.13,684.299 1677.68,684.299 1678.24,684.299 1678.8,684.299 1679.36,684.299 1679.92,684.299 1680.48,684.299 1681.04,684.299 1681.6,684.299 1682.16,684.299 1682.72,684.299 1683.28,684.299 1683.84,684.299 1684.4,684.299 1684.95,684.299 1685.51,684.299 1686.07,684.299 1686.63,684.299 1687.19,684.299 1687.75,684.299 1688.31,684.299 1688.87,684.299 1689.43,684.299 1689.99,684.299 1690.55,684.299 1691.11,684.299 1691.67,684.299 1692.23,684.299 1692.78,684.299 1693.34,684.299 1693.9,684.299 1694.46,684.299 1695.02,684.299 1695.58,684.299 1696.14,684.299 1696.7,684.299 1697.26,684.299 1697.82,684.299 1698.38,684.299 1698.94,684.299 1699.5,684.299 1700.05,684.299 1700.61,684.299 1701.17,684.299 1701.73,684.299 1702.29,684.299 1702.85,684.299 1703.41,684.299 1703.97,684.299 1704.53,684.299 1705.09,684.299 1705.65,684.299 1706.21,684.299 1706.77,684.299 1707.32,684.299 1707.88,684.299 1708.44,684.299 1709,684.299 1709.56,684.299 1710.12,684.299 1710.68,684.299 1711.24,684.299 1711.8,684.299 1712.36,684.299 1712.92,684.299 1713.48,684.299 1714.04,684.299 1714.6,684.299 1715.15,684.299 1715.71,684.299 1716.27,684.299 1716.83,684.299 1717.39,684.299 1717.95,684.299 1718.51,684.299 1719.07,684.299 1719.63,684.299 1720.19,684.299 1720.75,684.299 1721.31,684.299 1721.87,684.299 1722.42,684.299 1722.98,684.299 1723.54,684.299 1724.1,684.299 1724.66,684.299 1725.22,684.299 1725.78,684.299 1726.34,684.299 1726.9,684.299 1727.46,684.299 1728.02,684.299 1728.58,684.299 1729.14,684.299 1729.69,684.299 1730.25,684.299 1730.81,684.299 1731.37,684.299 1731.93,684.299 1732.49,684.299 1733.05,684.299 1733.61,684.299 1734.17,684.299 1734.73,684.299 1735.29,684.299 1735.85,684.299 1736.41,684.299 1736.97,684.299 1737.52,684.299 1738.08,684.299 1738.64,684.299 1739.2,684.299 1739.76,684.299 1740.32,684.299 1740.88,684.299 1741.44,684.299 1742,684.299 1742.56,684.299 1743.12,684.299 1743.68,684.299 1744.24,684.299 1744.79,684.299 1745.35,684.299 1745.91,684.299 1746.47,684.299 1747.03,684.299 1747.59,684.299 1748.15,684.299 1748.71,684.299 1749.27,684.299 1749.83,684.299 1750.39,684.299 1750.95,684.299 1751.51,684.299 1752.06,684.299 1752.62,684.299 1753.18,684.299 1753.74,684.299 1754.3,684.299 1754.86,684.299 1755.42,684.299 1755.98,684.299 1756.54,684.299 1757.1,684.299 1757.66,684.299 1758.22,684.299 1758.78,684.299 1759.34,684.299 1759.89,684.299 1760.45,684.299 1761.01,684.299 1761.57,684.299 1762.13,684.299 1762.69,684.299 1763.25,684.299 1763.81,684.299 1764.37,684.299 1764.93,684.299 1765.49,684.299 1766.05,684.299 1766.61,684.299 1767.16,684.299 1767.72,684.299 1768.28,684.299 1768.84,684.299 1769.4,684.299 1769.96,684.299 1770.52,684.299 1771.08,684.299 1771.64,684.299 1772.2,684.299 1772.76,684.299 1773.32,684.299 1773.88,684.299 1774.43,684.299 1774.99,684.299 1775.55,684.299 1776.11,684.299 1776.67,684.299 1777.23,684.299 1777.79,684.299 1778.35,684.299 1778.91,684.299 1779.47,684.299 1780.03,684.299 1780.59,684.299 1781.15,684.299 1781.71,684.299 1782.26,684.299 1782.82,684.299 1783.38,684.299 1783.94,684.299 1784.5,684.299 1785.06,684.299 1785.62,684.299 1786.18,684.299 1786.74,684.299 1787.3,684.299 1787.86,684.299 1788.42,684.299 1788.98,684.299 1789.53,684.299 1790.09,684.299 1790.65,684.299 1791.21,684.299 1791.77,684.299 1792.33,684.299 1792.89,684.299 1793.45,684.299 1794.01,684.299 1794.57,684.299 1795.13,684.299 1795.69,684.299 1796.25,684.299 1796.8,684.299 1797.36,684.299 1797.92,684.299 1798.48,684.299 1799.04,684.299 1799.6,684.299 1800.16,684.299 1800.72,684.299 1801.28,684.299 1801.84,684.299 1802.4,684.299 1802.96,684.299 1803.52,684.299 1804.08,684.299 1804.63,684.299 1805.19,684.299 1805.75,684.299 1806.31,684.299 1806.87,684.299 1807.43,684.299 1807.99,684.299 1808.55,684.299 1809.11,684.299 1809.67,684.299 1810.23,684.299 1810.79,684.299 1811.35,684.299 1811.9,684.299 1812.46,684.299 1813.02,684.299 1813.58,684.299 1814.14,684.299 1814.7,684.299 1815.26,684.299 1815.82,684.299 1816.38,684.299 1816.94,684.299 1817.5,684.299 1818.06,684.299 1818.62,684.299 1819.18,684.299 1819.73,684.299 1820.29,684.299 1820.85,684.299 1821.41,684.299 1821.97,684.299 1822.53,684.299 1823.09,684.299 1823.65,684.299 1824.21,684.299 1824.77,684.299 1825.33,684.299 1825.89,684.299 1826.45,684.299 1827,684.299 1827.56,684.299 1828.12,684.299 1828.68,684.299 1829.24,684.299 1829.8,684.299 1830.36,684.299 1830.92,684.299 1831.48,684.299 1832.04,684.299 1832.6,684.299 1833.16,684.299 1833.72,684.299 1834.27,684.299 1834.83,684.299 1835.39,684.299 1835.95,684.299 1836.51,684.299 1837.07,684.299 1837.63,684.299 1838.19,684.299 \"/>\n</svg>\n","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"In this case the projected energy and the shift are close to each other and the error bars are hard to see.","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"The problem was just a toy example, as the dimension of the Hamiltonian is rather small:","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"dimension(H)","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"462","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"In this case, it's easy (and more efficient) to calculate the exact ground state energy using standard linear algebra. Read more about Rimu's capabilities for exact diagonalization in the example \"Exact diagonalization\".","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"edp = ExactDiagonalizationProblem(H)\nexact_energy = solve(edp).values[1]","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"-4.021502406906473","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"We finish by comparing our FCIQMC results with the exact computation.","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"println(\n    \"\"\"\n    Energy from $steps_measure steps with $target_walkers walkers:\n    Shift: $(se.mean) ± $(se.err)\n    Projected Energy: $(v.val) ± ($(v.val_l), $(v.val_u))\n    Exact Energy: $exact_energy\n    \"\"\"\n)\n\n","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"Energy from 2000 steps with 1000 walkers:\nShift: -4.039521104539925 ± 0.02537413288821758\nProjected Energy: -4.018681904717955 ± (0.0032164222596158254, 0.0030390252842185106)\nExact Energy: -4.021502406906473\n\n","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"This page was generated using Literate.jl.","category":"page"},{"location":"statstools.html#Module-StatsTools","page":"StatsTools","title":"Module StatsTools","text":"","category":"section"},{"location":"statstools.html","page":"StatsTools","title":"StatsTools","text":"The  module StatsTools contains helper function for analysis and post processing of Monte Carlo data.","category":"page"},{"location":"statstools.html#Blocking-analysis","page":"StatsTools","title":"Blocking analysis","text":"","category":"section"},{"location":"statstools.html","page":"StatsTools","title":"StatsTools","text":"After equilibration, FCIQMC produces information about observables through correlated time series. In order to estimate the statistical errors the time series need to be decorrelated. The main workhorse for achieving this is the blocking_analysis, which is based on the paper by Flyvberg and Peterson JCP (1989), and automated with the M test of Jonsson PRE (2018).","category":"page"},{"location":"statstools.html","page":"StatsTools","title":"StatsTools","text":"Analysing the stochastic errors of observables obtained from the ratio of sample means is done with ratio_of_means, where error propagation of correlated uncertainties is done with the help of the package MonteCarloMeasurements.","category":"page"},{"location":"statstools.html","page":"StatsTools","title":"StatsTools","text":"Many convenience functions are implemented for directly analysing data obtained from solve as a DataFrame. See, e.g., shift_estimator and projected_energy. Asymptotically unbiased estimators are implemented as mixed_estimator, growth_estimator and rayleigh_replica_estimator.","category":"page"},{"location":"statstools.html#Exported","page":"StatsTools","title":"Exported","text":"","category":"section"},{"location":"statstools.html","page":"StatsTools","title":"StatsTools","text":"Modules = [StatsTools]\nPages = [\"StatsTools.jl\", \"blocking.jl\", \"ratio_of_means.jl\", \"convenience.jl\",\n  \"variances.jl\", \"growth_witness.jl\", \"reweighting.jl\", \"fidelity.jl\", \"variational_energy_estimator.jl\"\n]\nPrivate = false","category":"page"},{"location":"statstools.html#Rimu.StatsTools","page":"StatsTools","title":"Rimu.StatsTools","text":"Tools for the statistical analysis of Monte Carlo data.\n\nExports:\n\nblocking_analysis\nblocking_analysis_data\nratio_of_means\ngrowth_witness\nsmoothen\nshift_estimator\nprojected_energy\nvariational_energy_estimator\ngrowth_estimator\ngrowth_estimator_analysis\nmixed_estimator\nmixed_estimator_analysis\nrayleigh_replica_estimator\nrayleigh_replica_estimator_analysis\nval_and_errs\nval\nmean_and_se\n\n\n\n\n\n","category":"module"},{"location":"statstools.html#Rimu.StatsTools.blocking_analysis-Tuple{AbstractVector}","page":"StatsTools","title":"Rimu.StatsTools.blocking_analysis","text":"blocking_analysis(v::AbstractVector; α = 0.01, corrected = true, skip=0, warn=true)\n-> BlockingResult(mean, err, err_err, p_cov, k, blocks)\n\nCompute the sample mean mean and estimate the standard deviation of the mean (standard error) err of a correlated time series. It uses the blocking algorithm from Flyvberg and Peterson JCP (1989) and the M test of Jonsson PRE (2018) at significance level 1-α.\n\nUse skip to skip the first skip elements in v. corrected controls whether bias correction for variances is used. If decorrelating the time series fails according to the M test, NaN is returned as the standard error and -1 for k. The keyword argument warn controls whether a warning message is logged.\n\nThe summary result is returned as a BlockingResult. k - 1 is the number of blocking transformations required to pass the hypothesis test for an uncorrelated time series and err_err the estimated standard error or err.\n\nThe detailed results from each reblocking step can be obtained with blocking_analysis_data.\n\nSee BlockingResult, shift_estimator, ratio_of_means, blocking_analysis_data.\n\n\n\n\n\n","category":"method"},{"location":"statstools.html#Rimu.StatsTools.blocking_analysis_data-Tuple{AbstractVector}","page":"StatsTools","title":"Rimu.StatsTools.blocking_analysis_data","text":"blocking_analysis_data(v::AbstractVector; kwargs...) ->\n(; br::BlockingResult, df::DataFrame)\n\nPerform a blocking_analysis and return the summary result br as well as a DataFrame df with information about the standard error in each blocking step.\n\nFor a description of the keyword arguments see blocking_analysis.\n\nExample\n\njulia> data = smoothen(rand(10_000), 2^6); # generate correlated data\n\njulia> br, df = blocking_analysis_data(data)\n(br = BlockingResult{Float64}\n  mean = 0.5088 ± 0.0029\n  with uncertainty of ± 0.00023454488294744232\n  from 78 blocks after 7 transformations (k = 8).\n, df = 13×6 DataFrame\n Row │ blocks  mean      std_err      std_err_err  p_cov       mj\n     │ Int64   Float64   Float64      Float64      Float64     Float64\n─────┼──────────────────────────────────────────────────────────────────────\n   1 │  10000  0.508806  0.000375044  2.6521e-6    1.40658e-7  9715.08\n   2 │   5000  0.508806  0.000528547  5.28599e-6   2.79361e-7  4778.14\n   3 │   2500  0.508806  0.000743386  1.05152e-5   5.52622e-7  2298.64\n   4 │   1250  0.508806  0.00104064   2.08212e-5   1.08293e-6  1056.24\n   5 │    625  0.508806  0.00144177   4.08121e-5   2.07871e-6   427.949\n   6 │    312  0.508736  0.00194209   7.78707e-5   3.77171e-6   128.711\n   7 │    156  0.508736  0.00247921   0.00014081   6.14647e-6    17.3075\n   8 │     78  0.508736  0.00291063   0.000234545  8.47174e-6     0.731386\n   9 │     39  0.508736  0.00284613   0.000326474  8.10046e-6     0.901054\n  10 │     19  0.508241  0.0026998    0.000449967  7.28892e-6     2.85915\n  11 │      9  0.507939  0.00359907   0.000899766  1.29533e-5     1.08644\n  12 │      4  0.509327  0.00440559   0.00179857   1.94092e-5     0.0370381\n  13 │      2  0.509327  0.00432708   0.00305971   1.87237e-5     0.125)\n\njulia> using StatsPlots; unicodeplots();\n\njulia> plot([br.k,br.k],[0.0,maximum(df.std_err.+df.std_err_err)], label=\"m test\");\n\njulia> @df df plot!(\n           1:length(:std_err), :std_err;\n           err=:std_err_err, xlabel=\"k\", label=\"std err\",\n           title=\"std err vs blocking steps\"\n       )\n               ⠀⠀⠀⠀⠀⠀⠀⠀⠀std err vs blocking steps⠀⠀⠀⠀⠀⠀⠀⠀\n               ┌────────────────────────────────────────┐\n    0.00423501 │⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⡀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⢠⠀⠀⠀⠀│ m test\n               │⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⡇⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⢀⠀⠀⢸⠀⠀⠀⠀│ std err\n               │⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⡇⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⢸⠀⠀⢸⠀⠀⠀⠀│\n               │⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⡇⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⢸⠀⠀⢸⠀⠀⠀⠀│\n               │⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⡇⠀⠀⠀⠀⠀⠀⠀⠀⡇⠀⡠⢺⠒⠒⢺⠀⠀⠀⠀│\n               │⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⡇⠀⠀⡀⠀⠀⡆⣀⠤⡗⠉⠀⢸⠀⠀⢸⡆⠀⠀⠀│\n               │⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⢀⡧⠤⠔⡗⠊⠉⡏⠀⠀⡇⠀⠀⢸⠀⠀⢸⢣⠀⠀⠀│\n               │⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⢀⠔⠁⡇⠀⠀⠁⠀⠀⠁⠀⠀⠁⠀⠀⠀⠀⠀⢸⠸⡀⠀⠀│\n               │⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⢀⠴⠁⠀⠀⡇⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠸⠀⡇⠀⠀│\n               │⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⢀⠔⠁⠀⠀⠀⠀⡇⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⢸⠀⠀│\n               │⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⢀⠔⠊⠀⠀⠀⠀⠀⠀⡇⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠈⣦⠀│\n               │⠀⠀⠀⠀⠀⠀⠀⠀⡠⠔⠒⠁⠀⠀⠀⠀⠀⠀⠀⠀⡇⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⢹⠀│\n               │⠀⠀⠀⢀⣀⠤⠒⠉⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⡇⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⢸⠀│\n               │⠀⠒⠉⠁⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⡇⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⢸⠀│\n   -0.00012335 │⠤⠤⠤⠤⠤⠤⠤⠤⠤⠤⠤⠤⠤⠤⠤⠤⠤⠤⠤⠤⠧⠤⠤⠤⠤⠤⠤⠤⠤⠤⠤⠤⠤⠤⠤⠤⠤⠤⠤⠤│\n               └────────────────────────────────────────┘\n               ⠀0.64⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀k⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀13.36⠀\n\nA vertical line at k==8 indicates the blocking step identified by hypothesis testing to decorrelate the time series data. The decorrelation length can thus be estimated at 2^k-1 = 2^7 = 128. Note that the data was correlated with a sliding window of 2^6 steps.\n\nSee blocking_analysis, BlockingResult.\n\n\n\n\n\n","category":"method"},{"location":"statstools.html#Rimu.StatsTools.mean_and_se-Tuple{Rimu.StatsTools.BlockingResult}","page":"StatsTools","title":"Rimu.StatsTools.mean_and_se","text":"mean_and_se(v::AbstractVector; α = 0.01, corrected::Bool=true, skip=0) -> mean, err\nmean_and_se(r::BlockingResult) -> mean, err\n\nReturn the mean and standard error (as a tuple) of a time series obtained from blocking_analysis. See also BlockingResult.\n\n\n\n\n\n","category":"method"},{"location":"statstools.html#Statistics.cov-Tuple{Rimu.StatsTools.BlockingResult{<:Complex}}","page":"StatsTools","title":"Statistics.cov","text":"cov(r::BlockingResult{<:Complex})\n\nReturn the covariance matrix of the multivariate normal distribution approximating the uncertainty of the blocking result r of a complex time series. See (https://en.wikipedia.org/wiki/Complexnormaldistribution).\n\n\n\n\n\n","category":"method"},{"location":"statstools.html#Rimu.StatsTools.ratio_of_means-Tuple{Any, Any}","page":"StatsTools","title":"Rimu.StatsTools.ratio_of_means","text":"ratio_of_means(num, denom; α=0.01, corrected=true, mc_samples=nothing, skip=0, warn=true)\n-> r::RatioBlockingResult\n\nEstimate the ratio of mean(num)/mean(denom) assuming that num and denom are possibly correlated time series, skipping the first skip elements. A blocking analysis with m-test is used to uncorrelate the time series, see blocking_analysis. The remaining standard error and correlation of the means is propagated using MonteCarloMeasurements. The results are reported as a RatioBlockingResult.\n\nRobust estimates for the ratio are obtained from pmedian(r) and confidence intervals from pquantile(), e.g. pquantile(r, [0.025, 0.975]) for the 95% confidence interval.\n\nEstimates from linear uncertainty propagation are returned as r.f and r.σ_f using x_by_y_linear. The standard error estimate r.σ_f should only be trusted when the coefficient of variation std(denom)/mean(denom) is small: abs(r.δ_y) < 0.1. Under this condition can the ratio be approximated as a normal distribution. See wikipedia and Díaz-Francés, Rubio (2013)\n\nThe keyword mc_samples controls the number of samples used for error propagation by MonteCarloMeasurements. Use nothing for the default and Val(1000) to set the number to 1000 samples in a type-consistent way.\n\nThe keyword warn controls whether warning messages are logged when blocking fails or noisy denominators are encountered.\n\nNote: to compute statistics on the RatioBlockingResult, use functions pmedian, pquantile, pmiddle, piterate, pextrema, pminimum, pmaximum, pmean, and pcov.\n\n\n\n\n\n","category":"method"},{"location":"statstools.html#Rimu.StatsTools.errs-Tuple","page":"StatsTools","title":"Rimu.StatsTools.errs","text":"errs(x; n=1, p=nothing, name=:err) -> (; err_l, err_u)\n\nReturn the lower and upper error bar for the uncertain value x.\n\nSee val_and_errs.\n\n\n\n\n\n","category":"method"},{"location":"statstools.html#Rimu.StatsTools.to_measurement-Tuple{MonteCarloMeasurements.Particles}","page":"StatsTools","title":"Rimu.StatsTools.to_measurement","text":"to_measurement(p::MonteCarloMeasurements.Particles) -> ::Measurements.measurement\n\nConvert an uncertain number from MonteCarloMeasurements  to Measurements format  using the median as the central point. The new ± boundaries will include  the 68% quantile around the median.\n\n\n\n\n\n","category":"method"},{"location":"statstools.html#Rimu.StatsTools.val-Tuple{Any}","page":"StatsTools","title":"Rimu.StatsTools.val","text":"val(x)\n\nReturn the best estimate value for an uncertain x. Defaults to the median for uncertain x represented by a (sampled) distribution. Supports  MonteCarloMeasurements and Measurements.\n\nSee errs, BlockingResult, RatioBlockingResult.\n\n\n\n\n\n","category":"method"},{"location":"statstools.html#Rimu.StatsTools.val_and_errs-Tuple{Any}","page":"StatsTools","title":"Rimu.StatsTools.val_and_errs","text":"val_and_errs(x; n=1, p=nothing, name=:val) -> (;val, val_l, val_u)\n\nReturn the median and the lower and upper error bar for the uncertain value x as a NamedTuple. This is useful for plotting scripts. The interval [val - val_l, val + val_u] represents the confidence interval at level n*σ, or at probability p. Setting p overrides n. Supports  MonteCarloMeasurements and Measurements. The  names in the NamedTuple can be changed with name.\n\nExample:\n\njulia> results = [blocking_analysis(i:0.1:2i+20) for i in 1:3]; # mock results\n\njulia> v = val_and_errs.(results, name=\"res\"); # Vector of NamedTuple's with standard errors\n\njulia> DataFrame(v)\n3×3 DataFrame\n Row │ res      res_l    res_u\n     │ Float64  Float64  Float64\n─────┼───────────────────────────\n   1 │    11.5  1.7282   1.7282\n   2 │    13.0  1.7282   1.7282\n   3 │    14.5  1.78885  1.78885\n\nSee NamedTuple, val, errs, BlockingResult, RatioBlockingResult.\n\n\n\n\n\n","category":"method"},{"location":"statstools.html#Rimu.StatsTools.growth_witness","page":"StatsTools","title":"Rimu.StatsTools.growth_witness","text":"growth_witness(df::DataFrame, [b];\n    shift=:shift,\n    norm=:norm,\n    time_step=determine_constant_time_step(df),\n    skip=0\n)\ngrowth_witness(sim::PMCSimulation, [b]; kwargs...)\n\nCalculate the growth witness directly from the result (DataFrame or PMCSimulation) of solveing a ProjectorMonteCarloProblem. The keyword arguments shift and norm can be used to change the names of the relevant columns.\n\n\n\n\n\n","category":"function"},{"location":"statstools.html#Rimu.StatsTools.growth_witness-Tuple{AbstractArray, AbstractArray, Any}","page":"StatsTools","title":"Rimu.StatsTools.growth_witness","text":"growth_witness(shift::AbstractArray, norm::AbstractArray, dt, [b]; skip=0)\n\nCompute the growth witness\n\nG^(n) = S^(n) - fracvertmathbfc^(n+1)vert -\n          vertmathbfc^(n)vertvertmathbfc^(n)vert dtau\n\nwhere S is the shift and vertmathbfc^(n)vert == norm[n, 1]. Setting b ≥ 1 a sliding average over b time steps is computed using smoothen(). The first skip time steps are skipped. mean(growth_witness) is approximately the same as growth_estimator with h=0.\n\nSee also growth_estimator.\n\n\n\n\n\n","category":"method"},{"location":"statstools.html#Rimu.StatsTools.smoothen-Tuple{AbstractVector, Integer}","page":"StatsTools","title":"Rimu.StatsTools.smoothen","text":"smoothen(noisy::AbstractVector, b)\n\nSmoothen the array noisy by averaging over a sliding window of length b and wrapping noisy periodically. The mean(noisy) is preserved.\n\n\n\n\n\n","category":"method"},{"location":"statstools.html#Rimu.StatsTools.growth_estimator-NTuple{4, Any}","page":"StatsTools","title":"Rimu.StatsTools.growth_estimator","text":"growth_estimator(\n    shift, wn, h, time_step;\n    skip = 0,\n    E_r = mean(shift[skip+1:end]),\n    weights = w_exp,\n    change_type = identity,\n    kwargs...\n)\ngrowth_estimator(\n    df::DataFrame, h;\n    shift_name=:shift,\n    norm_name=:norm,\n    time_step=determine_constant_time_step(df),\n    kwargs...\n)\ngrowth_estimator(sim::PMCSimulation; kwargs...)\n-> r::RatioBlockingResult\n\nCompute the growth estimator with reference energy E_r by the reweighting technique described in Umrigar et al. (1993), see Eq. (20). shift and wn are equal length vectors containing the shift and walker number time series, respectively.  Reweighting is done over h time steps and length(shift) - skip time steps are used for the blocking analysis done with ratio_of_means. weights is a function that calulates the weights. See w_exp and w_lin.\n\nE_gr = E_r - frac1dτln\n    fracsum_n w_h+1^(n+1) N_mathrmw^(n+1)\n        sum_m w_h^(m) N_mathrmw^(m) \n\nwhere dτ is the time_step\n\nWhen h is greater than the autocorrelation time scale of the shift, then E_gr (returned as r.ratio) is an unbiased but approximate estimator for the ground state energy E_0 with an error mathcalO(dτ^2) and potentially increased confidence intervals compared to the (biased) shift estimator.  Error propagation is done with MonteCarloMeasurements. Propagation through the logarithm can be modified by setting change_type to to_measurement in order to avoid NaN results from negative outliers.\n\nIf success==true the blocking analysis was successful in k-1 steps, using blocks uncorrelated data points.\n\nThe second method calculates the growth estimator directly from a PMCSimulation or DataFrame returned by solve. The keyword arguments shift_name and norm_name can be used to change the names of the relevant columns.\n\nSee also mixed_estimator and RatioBlockingResult.\n\n\n\n\n\n","category":"method"},{"location":"statstools.html#Rimu.StatsTools.growth_estimator_analysis-Tuple{Any}","page":"StatsTools","title":"Rimu.StatsTools.growth_estimator_analysis","text":"growth_estimator_analysis(df::DataFrame; kwargs...)\ngrowth_estimator_analysis(sim::PMCSimulation; kwargs...)\n-> (; df_ge, correlation_estimate, se, se_l, se_u)\n\nCompute the growth_estimator on a DataFrame df or PMCSimulation sim. repeatedly over a range of reweighting depths.\n\nReturns a NamedTuple with the fields\n\ndf_ge: DataFrame with reweighting depth and growth_estiamator data. See example below.\ncorrelation_estimate: estimated correlation time from blocking analysis\nse, se_l, se_u: shift_estimator and error\n\nKeyword arguments\n\nh_range: The default is about h_values values from 0 to twice the estimated correlation time\nh_values = 100: minimum number of reweighting depths\nskip = 0: initial time steps to exclude from averaging\nthreading = Threads.nthreads() > 1: if false a progress meter is displayed\nshift_name = :shift name of column in df with shift data\nnorm_name = :norm name of column in df with walkernumber data\ntime_step = determine_constant_time_step(df) the time step\nwarn = true whether to log warning messages when blocking fails or denominators are small\n\nExample\n\nsim = solve(...)\ndf_ge, correlation_estimate, se, se_l, se_u = growth_estimator_analysis(sim; skip=5_000)\n\nusing StatsPlots\n@df df_ge plot(_ -> se, :h, ribbon = (se_l, se_u), label = \"⟨S⟩\") # constant line and ribbon for shift estimator\n@df df_ge plot!(:h, :val, ribbon = (:val_l, :val_u), label=\"E_gr\") # growth estimator as a function of reweighting depth\nxlabel!(\"h\")\n\nSee also: growth_estimator, mixed_estimator_analysis.\n\n\n\n\n\n","category":"method"},{"location":"statstools.html#Rimu.StatsTools.mixed_estimator-Tuple{AbstractVector, AbstractVector, AbstractVector, Any, Any}","page":"StatsTools","title":"Rimu.StatsTools.mixed_estimator","text":"mixed_estimator(\n    hproj, vproj, shift, h, time_step;\n    skip = 0,\n    E_r = mean(shift[skip+1:end]),\n    weights = w_exp,\n    kwargs...\n)\nmixed_estimator(\n    df::DataFrame, h;\n    hproj_name=:hproj,\n    vproj_name=:vproj,\n    shift_name=:shift,\n    time_step=determine_constant_time_step(df),\n    kwargs...\n)\nmixed_estimator(sim::PMCSimulation, h; kwargs...)\n-> r::RatioBlockingResult\n\nCompute the mixed estimator by the reweighting technique described in Umrigar et al. (1993), Eq. (19)\n\nE_mathrmmix = fracsum_n w_h^(n)  (Hmathbfv)mathbfc^(n)\n        sum_m w_h^(m)  mathbfvmathbfc^(m) \n\nwhere the time series hproj == (Hmathbfv)mathbfc^(n) and vproj == mathbfvmathbfc^(m) have the same length as shift (See ProjectedEnergy on how to set these up).  Reweighting is done over h time steps and length(shift) - skip time steps are used for the blocking analysis done with ratio_of_means. weights is a function that calulates the weights. See w_exp and w_lin.  Additional keyword arguments are passed on to ratio_of_means.\n\nWhen h is greater than the autocorrelation time scale of the shift, then r.ratio is an unbiased but approximate estimator for the ground state energy E_0 with an error mathcalO(dτ^2), where dτ is the time_step, and potentially increased confidence intervals compared to the unweighted ratio.  Error propagation is done with MonteCarloMeasurements. Results are returned as RatioBlockingResult.\n\nThe second method calculates the mixed energy estimator directly from a DataFrame or PMCSimulation returned by solve. The keyword arguments hproj_name, vproj_name, and shift_name can be used to change the names of the relevant columns.\n\nSee also growth_estimator.\n\n\n\n\n\n","category":"method"},{"location":"statstools.html#Rimu.StatsTools.mixed_estimator_analysis-Tuple{DataFrame}","page":"StatsTools","title":"Rimu.StatsTools.mixed_estimator_analysis","text":"mixed_estimator_analysis(df::DataFrame; kwargs...)\nmixed_estimator_analysis(sim::PMCSimulation; kwargs...)\n-> (; df_me, correlation_estimate, se, se_l, se_u)\n\nCompute the mixed_estimator on a DataFrame df or PMCSimulation sim returned from solve repeatedly over a range of reweighting depths.\n\nReturns a NamedTuple with the fields\n\ndf_me: DataFrame with reweighting depth and mixed_estiamator data. See example below.\ncorrelation_estimate: estimated correlation time from blocking analysis\nse, se_l, se_u: shift_estimator and error\n\nKeyword arguments\n\nh_range: The default is about h_values values from 0 to twice the estimated correlation time\nh_values = 100: minimum number of reweighting depths\nskip = 0: initial time steps to exclude from averaging\nthreading = Threads.nthreads() > 1: if false a progress meter is displayed\nshift_name = :shift name of column in df with shift data\nhproj_name = :hproj name of column in df with operator overlap data\nvproj_name = :vproj name of column in df with projector overlap data\ntime_step = determine_constant_time_step(df) the time step\nwarn = true whether to log warning messages when blocking fails or denominators are small\n\nExample\n\nsim = solve(...)\ndf_me, correlation_estimate, se, se_l, se_u = mixed_estimator_analysis(sim; skip=5_000)\n\nusing StatsPlots\n@df df_me plot(_ -> se, :h, ribbon = (se_l, se_u), label = \"⟨S⟩\") # constant line and ribbon for shift estimator\n@df df_me plot!(:h, :val, ribbon = (:val_l, :val_u), label=\"E_mix\") # mixed estimator as a function of reweighting depth\nxlabel!(\"h\")\n\nSee also: mixed_estimator, growth_estimator_analysis.\n\n\n\n\n\n","category":"method"},{"location":"statstools.html#Rimu.StatsTools.projected_energy-Tuple{Any}","page":"StatsTools","title":"Rimu.StatsTools.projected_energy","text":"projected_energy(df::DataFrame; skip=0, hproj=:hproj, vproj=:vproj, kwargs...)\nprojected_energy(sim::PMCSimulation; kwargs...)\n-> r::RatioBlockingResult\n\nCompute the projected energy estimator\n\nE_mathrmp = fracsum_n  mathbfvHmathbfc^(n)\n        sum_m mathbfvmathbfc^(m) \n\nwhere the time series df.hproj == mathbfvHmathbfc^(n) and df.vproj == mathbfvmathbfc^(m) are taken from df, skipping the first skip entries (use post_step_strategy =ProjectedEnergy(...) to set these up in ProjectorMonteCarloProblem). projected_energy is equivalent to mixed_estimator with h=0.\n\nThe keyword arguments hproj and vproj can be used to change the names of the relevant columns. Other kwargs are passed on to ratio_of_means. Returns a RatioBlockingResult.\n\nSee NamedTuple, val_and_errs, val, errs for processing results.\n\n\n\n\n\n","category":"method"},{"location":"statstools.html#Rimu.StatsTools.rayleigh_replica_estimator-Tuple{Vector, Vector, Vector, Any, Any}","page":"StatsTools","title":"Rimu.StatsTools.rayleigh_replica_estimator","text":"rayleigh_replica_estimator(\n    op_ol, vec_ol, shift, h, time_step;\n    skip = 0,\n    E_r = mean(shift[skip+1:end]),\n    weights = w_exp,\n    kwargs...\n)\nrayleigh_replica_estimator(\n    df::DataFrame;\n    shift_name=\"shift\",\n    op_name=\"Op1\",\n    vec_name=\"dot\",\n    h=0,\n    skip=0,\n    Anorm=1,\n    kwargs...\n)\nrayleigh_replica_estimator(sim::PMCSimulation; kwargs...)\n-> r::RatioBlockingResult\n\nCompute the estimator of a Rayleigh quotient of operator hatA with reweighting,\n\nA_mathrmest(h) = fracsum_ab sum_n w_ha^(n) w_hb^(n)\n    mathbfc_a^(n) cdot hatA cdot mathbfc_b^(n)\n    sum_ab sum_n w_ha^(n) w_hb^(n) mathbfc_a^(n) cdot mathbfc_b^(n)\n\nusing data from multiple replicas.\n\nArgument op_ol holds data for the operator overlap mathbfc_a^(n) hatA mathbfc_b^(n) and vec_ol holds data for the vector overlap mathbfc_a^(n) mathbfc_b^(n). They are of type Vector{Vector}, with each element Vector holding the data for a pair of replicas. Argument shift is of type Vector{Vector}, with each element Vector holding the shift data for each individual replica.\n\nThe second method computes the Rayleigh quotient directly from a DataFrame or PMCSimulation returned by solve. The keyword arguments shift_name, op_name and vec_name can be used to change the names of the relevant columns, see AllOverlaps for default formatting. The operator overlap data can be scaled by a prefactor Anorm. A specific reweighting depth can be set with keyword argument h. The default is h = 0 which calculates the Rayleigh quotient without reweighting.\n\nThe reweighting is an extension of the mixed estimator using the reweighting technique described in Umrigar et al. (1993). Reweighting is done over h time steps and length(shift) - skip time steps are used for the blocking analysis done with ratio_of_means. weights is a function that calulates the weights. See w_exp and w_lin. Additional keyword arguments are passed on to ratio_of_means.\n\nError propagation is done with MonteCarloMeasurements. Results are returned as RatioBlockingResult.\n\nSee also mixed_estimator, growth_estimator.\n\n\n\n\n\n","category":"method"},{"location":"statstools.html#Rimu.StatsTools.rayleigh_replica_estimator_analysis-Tuple{Any}","page":"StatsTools","title":"Rimu.StatsTools.rayleigh_replica_estimator_analysis","text":"rayleigh_replica_estimator_analysis(df::DataFrame; kwargs...)\nrayleigh_replica_estimator_analysis(sim::PMCSimulation; kwargs...)\n-> (; df_rre, df_se)\n\nCompute the rayleigh_replica_estimator on a DataFrame df or PMCSimulation sim returned from solve repeatedly over a range of reweighting depths.\n\nReturns a NamedTuple with the fields\n\ndf_rre: DataFrame with reweighting depth and rayleigh_replica_estimator data. See example below.\ndf_se: DataFrame with shift_estimator output, one row per replica\n\nKeyword arguments\n\nh_range: The default is about h_values values from 0 to twice the estimated correlation time\nh_values = 100: minimum number of reweighting depths\nskip = 0: initial time steps to exclude from averaging\nthreading = Threads.nthreads() > 1: if false a progress meter is displayed\nshift_name = \"shift\": shift data corresponding to column in df with names <shift>_1, ...\nop_name = \"Op1\": name of operator overlap corresponding to column in df with names c1_<op_ol>_c2, ...\nvec_name = \"dot\": name of vector-vector overlap corresponding to column in df with names c1_<vec_ol>_c2, ...\nAnorm = 1: a scalar prefactor to scale the operator overlap data\nwarn = true: whether to log warning messages when blocking fails or denominators are small\n\nExample\n\nsim = solve(...)\ndf_rre, df_se = rayleigh_replica_estimator_analysis(sim; skip=5_000)\n\nusing StatsPlots\n@df df_rre plot(_ -> se, :h, ribbon = (se_l, se_u), label = \"⟨S⟩\") # constant line and ribbon for shift estimator\n@df df_rre plot!(:h, :val, ribbon = (:val_l, :val_u), label=\"E_mix\") # Rayleigh quotient estimator as a function of reweighting depth\nxlabel!(\"h\")\n\nSee also: rayleigh_replica_estimator, mixed_estimator_analysis, AllOverlaps.\n\n\n\n\n\n","category":"method"},{"location":"statstools.html#Rimu.StatsTools.shift_estimator-Tuple{Any}","page":"StatsTools","title":"Rimu.StatsTools.shift_estimator","text":"shift_estimator(df::DataFrame; shift=:shift, kwargs...)\nshift_estimator(sim::PMCSimulation; kwargs...)\n-> r::BlockingResult\n\nReturn the shift estimator from the data in df.shift. The keyword argument shift can be used to change the name of the relevant column. Other keyword arguments are passed on to blocking_analysis. Returns a BlockingResult.\n\nSee also growth_estimator, projected_energy.\n\n\n\n\n\n","category":"method"},{"location":"statstools.html#Rimu.StatsTools.w_exp-Tuple{Union{SubArray{<:Any, 1, <:Vector, <:Any, true}, Vector}, Any, Any}","page":"StatsTools","title":"Rimu.StatsTools.w_exp","text":"w_exp(shift, h, time_step; E_r = mean(shift), skip = 0)\n\nCompute the weights for reweighting over h time steps with reference energy E_r from the exponential formula\n\nw_h^(n) = prod_j=1^h exp-dτ(S^(q+n-j)-E_r) \n\nwhere q = skip and dτ is the time_step.\n\nSee also w_lin, growth_estimator, mixed_estimator.\n\n\n\n\n\n","category":"method"},{"location":"statstools.html#Rimu.StatsTools.w_lin-Tuple{Union{SubArray{<:Any, 1, <:Vector, <:Any, true}, Vector}, Any, Any}","page":"StatsTools","title":"Rimu.StatsTools.w_lin","text":"w_lin(shift, h, time_step; E_r = mean(shift), skip = 0)\n\nCompute the weights for reweighting over h time steps with reference energy E_r from the linearised formula\n\nw_h^(n) = prod_j=1^h 1-dτ(S^(q+n-j)-E_r) \n\nwhere q = skip and dτ is the time_step.\n\nSee also w_exp, growth_estimator, mixed_estimator.\n\n\n\n\n\n","category":"method"},{"location":"statstools.html#Rimu.StatsTools.replica_fidelity-Tuple{Any}","page":"StatsTools","title":"Rimu.StatsTools.replica_fidelity","text":"replica_fidelity(df::DataFrame; p_field = :hproj, skip = 0)\nreplica_fidelity(sim::PMCSimulation; kwargs...)\n\nCompute the fidelity of the average coefficient vector and the projector defined in p_field from the PMCSimulation or DataFrame returned by solve, using replicas _1 and _2. Calls ratio_of_means to perform a blocking analysis on a ratio of the means of separate time series and returns a RatioBlockingResult. The first skip steps in the time series are skipped.\n\nThe fidelity of states |ψ⟩ and |ϕ⟩ is defined as\n\nF(ψϕ) = fracψϕ^2ψψϕϕ \n\nSpecifically, replica_fidelity computes\n\nF(mathbfvmathbfc) =\n    frac(mathbfc_1mathbfv)(mathbfvmathbfc_1)\n    mathbfc_1mathbfc_1 \n\nwhere v is the projector specified by p_field, which is assumed to be normalised to unity with the two-norm (i.e. v⋅v == 1), and mathbfc_1 and mathbfc_2 are two replica coefficient vectors.\n\n\n\n\n\n","category":"method"},{"location":"statstools.html#Rimu.StatsTools.variational_energy_estimator-Tuple{Any, Any}","page":"StatsTools","title":"Rimu.StatsTools.variational_energy_estimator","text":"variational_energy_estimator(shifts, overlaps; kwargs...)\nvariational_energy_estimator(df::DataFrame; max_replicas=:all, kwargs...)\nvariational_energy_estimator(sim::PMCSimulation; kwargs...)\n-> r::RatioBlockingResult\n\nCompute the variational energy estimator from the replica time series of the shifts and coefficient vector overlaps by blocking analysis. The keyword argument max_replicas can be used to constrain the number of replicas processed to be smaller than all available in df. Other keyword arguments are passed on to ratio_of_means(). Returns a RatioBlockingResult.\n\nAn estimator for the variational energy\n\nfracmathbfc^ mathbfHmathbfcmathbfc^mathbfc\n\nis calculated from\n\nE_v  =  fracsum_ab^R overline(S_a+S_b) mathbfc_a^ mathbfc_b\n               2sum_ab^R overlinemathbfc_a^ mathbfc_b \n\nwhere the sum goes over distinct pairs out of the R replicas. See arXiv:2103.07800.\n\nThe DataFrame and PMCSimulation versions can extract the relevant information from the result of solve. Set up the ProjectorMonteCarloProblem with the keyword argument replica_strategy = AllOverlaps(R) and R ≥ 2. If passing shifts and overlaps, the data has to be arranged in the correct order (as provided in the DataFrame version).\n\nSee AllOverlaps.\n\n\n\n\n\n","category":"method"},{"location":"statstools.html#Additional-docstrings","page":"StatsTools","title":"Additional docstrings","text":"","category":"section"},{"location":"statstools.html","page":"StatsTools","title":"StatsTools","text":"Modules = [StatsTools]\nPages = [\"StatsTools.jl\", \"blocking.jl\", \"ratio_of_means.jl\", \"convenience.jl\",\n  \"variances.jl\", \"growth_witness.jl\", \"reweighting.jl\"\n]\nPublic = false","category":"page"},{"location":"statstools.html#MonteCarloMeasurements.Particles-Tuple{Rimu.StatsTools.BlockingResult{<:Real}}","page":"StatsTools","title":"MonteCarloMeasurements.Particles","text":"MonteCarloMeasurements.Particles(r::BlockingResult; mc_samples = 2000)\nMonteCarloMeasurements.±(r::BlockingResult)\n\nConvert a BlockingResult into a Particles object for nonlinear error propagation with MonteCarloMeasurements.\n\n\n\n\n\n","category":"method"},{"location":"statstools.html#Rimu.StatsTools.BlockingResult","page":"StatsTools","title":"Rimu.StatsTools.BlockingResult","text":"BlockingResult(mean, err, err_err, p_cov, k, blocks)\n\nResult of blocking_analysis.\n\nFields:\n\nmean: sample mean\nerr: standard error (estimated standard deviation of the mean)\nerr_err: estimated uncertainty of err\np_cov: estimated pseudo covariance of mean, relevant for complex time series\nk::Int: k-1 blocking steps were used to uncorrelate time series\nblocks::Int: number of uncorrelated values after blocking\n\nHas methods for NamedTuple, val_and_errs, val, errs, mean_and_se, Measurements.:±, MonteCarloMeasurements.Particles, and Statistics.cov for Complex data.\n\nExample:\n\njulia> blocking_analysis(smoothen(randn(2^10), 2^5))\nBlockingResult{Float64}\n  mean = -0.026 ± 0.029\n  with uncertainty of ± 0.003638545517264226\n  from 32 blocks after 5 transformations (k = 6).\n\n\n\n\n\n","category":"type"},{"location":"statstools.html#Measurements.measurement-Tuple{Rimu.StatsTools.BlockingResult{<:Real}}","page":"StatsTools","title":"Measurements.measurement","text":"measurement(r::BlockingResult)\nMeasurements.±(r::BlockingResult)\n\nConvert a BlockingResult into a Measurement for linear error propagation with Measurements.\n\nLimitation: Does not account for covariance in complex BlockingResult. Consider using MonteCarloMeasurements.Particles(r)!\n\n\n\n\n\n","category":"method"},{"location":"statstools.html#Rimu.StatsTools.blocker-Union{Tuple{AbstractVector{T}}, Tuple{T}} where T","page":"StatsTools","title":"Rimu.StatsTools.blocker","text":"blocker(v::Vector) -> new_v::Vector\n\nReblock the data by successively taking the mean of two adjacent data points to form a new vector with a half of the length(v). The last data point will be discarded if length(v) is odd.\n\n\n\n\n\n","category":"method"},{"location":"statstools.html#Rimu.StatsTools.blocks_with_m-Tuple{Any}","page":"StatsTools","title":"Rimu.StatsTools.blocks_with_m","text":"blocks_with_m(v; corrected = true) -> (;blocks, mean, std_err, std_err_err, p_cov, mj)\n\nPerform the blocking algorithm from Flyvberg and Peterson JCP (1989). Returns named tuple with the results from all blocking steps. See mtest().\n\n\n\n\n\n","category":"method"},{"location":"statstools.html#Rimu.StatsTools.mtest-Tuple{AbstractVector}","page":"StatsTools","title":"Rimu.StatsTools.mtest","text":"mtest(mj::AbstractVector; α = 0.01) -> k\nmtest(table::NamedTuple; α = 0.01) -> k\n\nHypothesis test for decorrelation of a time series after blocking transformations with significance level 1-α after Jonson PRE (2018). mj or table.mj is expected to be a vector with relevant M_j values from a blocking analysis as obtained from blocks_with_m(). Returns the row number k where the M-test is passed. If the M-test has failed mtest() returns the value -1.\n\n\n\n\n\n","category":"method"},{"location":"statstools.html#Rimu.StatsTools.RatioBlockingResult","page":"StatsTools","title":"Rimu.StatsTools.RatioBlockingResult","text":"RatioBlockingResult(ratio, f, σ_f, δ_y, k, success)\n\nResult of ratio_of_means().\n\nFields:\n\nratio::P: ratio with uncertainties propagated by MonteCarloMeasurements\nf::T: ratio of means\nσ_f::T: std from linear propagation\nδ_y::T: coefficient of variation for denominator (≤ 0.1 for normal approx)\nk::Int: k-1 blocking steps were used to uncorrelate time series\nblocks::Int: number of data values after blocking\nsuccess::Bool: false if any of the blocking steps failed\n\nHas methods for NamedTuple, val_and_errs, val, errs.\n\nNote: to compute statistics on the RatioBlockingResult, use functions pmedian, pquantile, pmiddle, piterate, pextrema, pminimum, pmaximum, pmean, and pcov.\n\n\n\n\n\n","category":"type"},{"location":"statstools.html#Rimu.StatsTools.particles-Tuple{Any, Any, Any}","page":"StatsTools","title":"Rimu.StatsTools.particles","text":"particles(samples, μ, σ)\nparticles(samples, μ::AbstractVector, Σ::AbstractMatrix)\n\nReturn Particles object from MonteCarloMeasurements with single- or multivariate normal distribution. Zero variance parameters are supported.\n\n\n\n\n\n","category":"method"},{"location":"statstools.html#Rimu.StatsTools.particles-Tuple{Any, Distributions.Distribution}","page":"StatsTools","title":"Rimu.StatsTools.particles","text":"particles(samples, d)\nparticles(::Nothing, d)\nparticles(::Val{T}, d) where T\n\nReturn Particles object from  MonteCarloMeasurements using  a type-stable constructor if possible. Pass nothing for the default number of particles or Val(1_000) for using 1000 particles in a type-stable manner. If d is a Particles object it is passed through without re-sampling.\n\n\n\n\n\n","category":"method"},{"location":"statstools.html#Rimu.StatsTools.ratio_estimators-Tuple{AbstractVector{<:Real}, AbstractVector{<:Real}}","page":"StatsTools","title":"Rimu.StatsTools.ratio_estimators","text":"ratio_estimators(x, y, [k]; corrected=true, mc_samples=10_000) -> (; r, f, σ_f, δ_y, n)\n\nEstimators for the ratio of means mean(x)/mean(y). If k is given, k-1 blocking steps are performed to remove internal correlations in the time series x and y. Otherwise these are assumed to be free of internal correlations. Correlations between x and y may be present and are taken into account.\n\nReturn values:\n\nr::Particles is the Monte Carlo sampled ratio estimator, see Particles\nf = mean(x)/mean(y)\nσ_f standard deviation of f from linear error propagation (normal approximation)\nδ_y = std(y)/mean(y) coefficient of variation; < 0.1 for normal approximation to work\nn: number of uncorrelated data used for uncertainty estimation\n\n\n\n\n\n","category":"method"},{"location":"statstools.html#Rimu.StatsTools.x_by_y_linear-NTuple{5, Any}","page":"StatsTools","title":"Rimu.StatsTools.x_by_y_linear","text":"x_by_y_linear(μ_x,μ_y,σ_x,σ_y,ρ) -> f, σ_f\n\nLinear error propagation for ratio f = x/y assuming x and y are correlated normal random variables and assuming the ratio can be approximated as a normal distribution. See wikipedia and Díaz-Francés, Rubio (2013).\n\nσ_f = sqrtfracσ_xμ_y^2 + fracμ_x σ_yμ_y^2^2 - frac2 ρ μ_xμ_y^3\n\n\n\n\n\n","category":"method"},{"location":"statstools.html#Core.NamedTuple-Tuple{Rimu.StatsTools.BlockingResult}","page":"StatsTools","title":"Core.NamedTuple","text":"NamedTuple(x::BlockingResult; n=1, p=nothing, name=:val)\nNamedTuple(x::RatioBlockingResult; n=1, p=nothing, name=:val)\n\nReturn a named tuple with value and error bars (see val_and_errs) as well as additional numerical fields relevant for x.\n\nExample:\n\njulia> results = [blocking_analysis(i:0.1:2i+20) for i in 1:3]; # mock results\n\njulia> df = NamedTuple.(results, name=:res)|>DataFrame\n3×7 DataFrame\n Row │ res      res_l    res_u    res_err_err  res_p_cov  res_k  res_blocks\n     │ Float64  Float64  Float64  Float64      Float64    Int64  Int64\n─────┼──────────────────────────────────────────────────────────────────────\n   1 │    11.5  1.7282   1.7282      0.352767    2.98667      5          13\n   2 │    13.0  1.7282   1.7282      0.352767    2.98667      5          13\n   3 │    14.5  1.78885  1.78885     0.350823    3.2          5          14\n\njulia> rbs = ratio_of_means(1 .+sin.(1:0.1:11),2 .+sin.(2:0.1:12)); # more mock results\n\njulia> [NamedTuple(rbs),]|>DataFrame\n1×9 DataFrame\n Row │ val       val_l      val_u      val_f     val_σ_f    val_δ_y    val_k  val_blocks  val_success\n     │ Float64   Float64    Float64    Float64   Float64    Float64    Int64  Int64       Bool\n─────┼────────────────────────────────────────────────────────────────────────────────────────────────\n   1 │ 0.581549  0.0925669  0.0812292  0.560532  0.0875548  0.0875548      4          12         true\n\n\nSee val_and_errs, val, errs, BlockingResult, RatioBlockingResult.\n\n\n\n\n\n","category":"method"},{"location":"statstools.html#Rimu.StatsTools.autocovariance-Tuple{AbstractVector, Int64}","page":"StatsTools","title":"Rimu.StatsTools.autocovariance","text":"autocovariance(v::Vector,h::Int; corrected::Bool=true)\n\nhatgamma(h) =frac1nsum_t=1^n-h(v_t+h-barv)(v_t-barv)^* Calculate the autocovariance of dataset v with a delay h. If corrected is true (the default) then the sum is scaled with n-h, whereas the sum is scaled with n if corrected is false where n = length(v).\n\n\n\n\n\n","category":"method"},{"location":"statstools.html#Rimu.StatsTools.pseudo_cov-Tuple{Any, Any}","page":"StatsTools","title":"Rimu.StatsTools.pseudo_cov","text":"pseudo_cov(x, y; xmean = mean(x), ymean = mean(y), corrected = true)\n\nCompute the pseudo covariance between collections x and y returning a scalar:\n\nfrac1nsum_i=1^n (x_i - barx)(y_i - bary)\n\nOptionally, precomputed means can be passed as keyword arguments. pseudo_cov(x,y) is functionally equivalent to Statistics.cov(x, conj(y); corrected = false) but it is found to be significantly faster and avoids allocations.\n\n\n\n\n\n","category":"method"},{"location":"statstools.html#Rimu.StatsTools.determine_constant_time_step-Tuple{Any}","page":"StatsTools","title":"Rimu.StatsTools.determine_constant_time_step","text":"determine_constant_time_step(df) -> time_step\n\nGiven a DataFrame df, determine the time step that was used to compute it. Throw an error if time step is not constant.\n\n\n\n\n\n","category":"method"},{"location":"statstools.html#Index","page":"StatsTools","title":"Index","text":"","category":"section"},{"location":"statstools.html","page":"StatsTools","title":"StatsTools","text":"Pages   = [\"statstools.md\"]","category":"page"},{"location":"interfaces.html#Module-Interfaces","page":"Interfaces","title":"Module Interfaces","text":"","category":"section"},{"location":"interfaces.html","page":"Interfaces","title":"Interfaces","text":"Interfaces","category":"page"},{"location":"interfaces.html#Rimu.Interfaces","page":"Interfaces","title":"Rimu.Interfaces","text":"module Interfaces\n\nThis module contains interfaces that can be used to extend and modify the algorithms and behaviours of Rimu.\n\nInterfaces\n\nFollow the links for the definitions of the interfaces!\n\nAbstractHamiltonian for defining Hamiltonians\nAbstractOperator for defining observable operators\nAbstractDVec for defining data structures for Rimu as in DictVectors\nStochasticStyle for controlling the stochastic algorithms used by ProjectorMonteCarloProblem as implemented in StochasticStyles\n\nAdditional exports\n\nInterface functions forAbstractHamiltonians:\n\ndiagonal_element\nnum_offdiagonals\nget_offdiagonal\noffdiagonals.\nrandom_offdiagonal\nstarting_address\nLOStructure\nallows_address_type\n\nworking with  AbstractDVecs and StochasticStyle\n\ndeposit!\ndefault_style\nCompressionStrategy\nThe interface from VectorInterface.jl.\n\nFunctions Rimu.jl uses to do FCIQMC:\n\napply_column!\napply_operator!\nstep_stats\n\n\n\n\n\n","category":"module"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"EditURL = \"../../../scripts/HO-example.jl\"","category":"page"},{"location":"generated/HO-example.html#Example-5:-Degenerate-perturbation-theory-in-a-harmonic-oscillator-basis","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Example 5: Degenerate perturbation theory in a harmonic oscillator basis","text":"","category":"section"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"Rimu can also handle non-lattice systems. This example looks at weakly-interacting bosonic particles in a harmonic oscillator external potential using a basis of (Cartesian product) single-particle eigenstates of the harmonic oscillator potential. Blocks of degenerate non-interacting states are coupled by a contact interaction in first order degenerate perturbation theory. This example shows how to generate these blocks and find the energy and angular momentum eigenstates.","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"A runnable script for this example is located here. Run it with julia HO-example.jl.","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"First, load all needed packages.","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"using Rimu\nusing DataFrames\nusing LinearAlgebra","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"Define the system size for N=2 particles in a 2D harmonic oscillator allowing M=4 levels in each dimension, including the groundstate.","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"N = 2\nM = 4;","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"Use a tuple S to define the range of harmonic oscillator states in a Cartesian basis, in this isotropic case n_xn_y=01ldotsM-1.","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"S = (M, M);","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"In Rimu the N-particle states are still stored as Fock states.","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"P = prod(S)\naddr = BoseFS(P, M => N)","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"BoseFS{2,16}(0, 0, 0, 2, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0)","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"Here, the numbering of the modes folds in the two spatial dimensions.  Use the utility function fock_to_cart to convert a Fock address to human-readable Cartesian quantum numbers for inspection.","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"fock_to_cart(addr, S)","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"2-element StaticArraysCore.SVector{2, Tuple{Int64, Int64}} with indices SOneTo(2):\n (3, 0)\n (3, 0)","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"The output shows that all N particles are in single-particle state n_x=M-1 n_y=0.","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"The harmonic oscillator Hamiltonian HOCartesianContactInteractions handles contact interactions with first-order perturbation theory, so the matrix representation will block according to the non-interacting energy of the basis states. The first task is to find all blocks of basis states with the same energy. The strength of the interaction is not relevant at this point, just that it is non-zero. Use an arbitrary N-particle starting address to build the Hamiltonian.","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"H = HOCartesianContactInteractions(BoseFS(P, 1 => N); S);","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"Then, use the utility function get_all_blocks to find all blocks. The blocks are found by looping over all possible states with N particles in Cartesian states defined by S. Note that this will only work for total energy up to the maximum accessible by a single particle. The N-particle groundstate energy for a 2D harmonic oscillator is E_0 = N hbar omega and the maximum single-particle energy is E = (E_0 + M - 1) hbar omega.","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"block_df = get_all_blocks(H; max_energy = N + M - 1)","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"<div><div style = \"float: left;\"><span>7×6 DataFrame</span></div><div style = \"clear: both;\"></div></div><div class = \"data-frame\" style = \"overflow-x: scroll;\"><table class = \"data-frame\" style = \"margin-bottom: 6px;\"><thead><tr class = \"header\"><th class = \"rowNumber\" style = \"font-weight: bold; text-align: right;\">Row</th><th style = \"text-align: left;\">block_id</th><th style = \"text-align: left;\">block_E0</th><th style = \"text-align: left;\">block_size</th><th style = \"text-align: left;\">addr</th><th style = \"text-align: left;\">indices</th><th style = \"text-align: left;\">t_basis</th></tr><tr class = \"subheader headerLastRow\"><th class = \"rowNumber\" style = \"font-weight: bold; text-align: right;\"></th><th title = \"Int64\" style = \"text-align: left;\">Int64</th><th title = \"Float64\" style = \"text-align: left;\">Float64</th><th title = \"Int64\" style = \"text-align: left;\">Int64</th><th title = \"BoseFS{2, 16, BitString{17, 1, UInt32}}\" style = \"text-align: left;\">BoseFS…</th><th title = \"Tuple{Int64, Int64}\" style = \"text-align: left;\">Tuple…</th><th title = \"Float64\" style = \"text-align: left;\">Float64</th></tr></thead><tbody><tr><td class = \"rowNumber\" style = \"font-weight: bold; text-align: right;\">1</td><td style = \"text-align: right;\">1</td><td style = \"text-align: right;\">2.0</td><td style = \"text-align: right;\">1</td><td style = \"text-align: left;\">fs&quot;|2 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0⟩&quot;</td><td style = \"text-align: left;\">(1, 1)</td><td style = \"text-align: right;\">1.10476</td></tr><tr><td class = \"rowNumber\" style = \"font-weight: bold; text-align: right;\">2</td><td style = \"text-align: right;\">2</td><td style = \"text-align: right;\">3.0</td><td style = \"text-align: right;\">1</td><td style = \"text-align: left;\">fs&quot;|1 1 0 0 0 0 0 0 0 0 0 0 0 0 0 0⟩&quot;</td><td style = \"text-align: left;\">(2, 1)</td><td style = \"text-align: right;\">3.3904e-5</td></tr><tr><td class = \"rowNumber\" style = \"font-weight: bold; text-align: right;\">3</td><td style = \"text-align: right;\">3</td><td style = \"text-align: right;\">4.0</td><td style = \"text-align: right;\">4</td><td style = \"text-align: left;\">fs&quot;|0 2 0 0 0 0 0 0 0 0 0 0 0 0 0 0⟩&quot;</td><td style = \"text-align: left;\">(2, 2)</td><td style = \"text-align: right;\">2.6269e-5</td></tr><tr><td class = \"rowNumber\" style = \"font-weight: bold; text-align: right;\">4</td><td style = \"text-align: right;\">4</td><td style = \"text-align: right;\">5.0</td><td style = \"text-align: right;\">5</td><td style = \"text-align: left;\">fs&quot;|0 1 1 0 0 0 0 0 0 0 0 0 0 0 0 0⟩&quot;</td><td style = \"text-align: left;\">(3, 2)</td><td style = \"text-align: right;\">1.4998e-5</td></tr><tr><td class = \"rowNumber\" style = \"font-weight: bold; text-align: right;\">5</td><td style = \"text-align: right;\">5</td><td style = \"text-align: right;\">3.0</td><td style = \"text-align: right;\">1</td><td style = \"text-align: left;\">fs&quot;|1 0 0 0 1 0 0 0 0 0 0 0 0 0 0 0⟩&quot;</td><td style = \"text-align: left;\">(5, 1)</td><td style = \"text-align: right;\">3.447e-6</td></tr><tr><td class = \"rowNumber\" style = \"font-weight: bold; text-align: right;\">6</td><td style = \"text-align: right;\">6</td><td style = \"text-align: right;\">4.0</td><td style = \"text-align: right;\">2</td><td style = \"text-align: left;\">fs&quot;|0 1 0 0 1 0 0 0 0 0 0 0 0 0 0 0⟩&quot;</td><td style = \"text-align: left;\">(5, 2)</td><td style = \"text-align: right;\">6.792e-6</td></tr><tr><td class = \"rowNumber\" style = \"font-weight: bold; text-align: right;\">7</td><td style = \"text-align: right;\">7</td><td style = \"text-align: right;\">5.0</td><td style = \"text-align: right;\">5</td><td style = \"text-align: left;\">fs&quot;|0 0 1 0 1 0 0 0 0 0 0 0 0 0 0 0⟩&quot;</td><td style = \"text-align: left;\">(5, 3)</td><td style = \"text-align: right;\">1.3315e-5</td></tr></tbody></table></div>","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"This outputs a list of blocks in H indexed by the noninteracting energy of all states in the block, and a single address that can be used to rebuild the block for further analysis.","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"addr1 = block_df[7,:addr]\nE = block_df[7,:block_E0]","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"5.0","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"First, notice that all basis states have the same energy, defined by the block.","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"basis1 = build_basis(H, addr1)\nmap(b -> Hamiltonians.noninteracting_energy(H, b), basis1)","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"5-element Vector{Float64}:\n 5.0\n 5.0\n 5.0\n 5.0\n 5.0","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"There are two blocks at each energy level (except the groundstate), which are different due to parity conservation, which is the only other symmetry in the Cartesian harmonic oscillator. The basis of this other block is different,","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"addr2 = block_df[4,:addr]\nbasis2 = build_basis(H, addr2);\nbasis1 ≠ basis2","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"true","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"but its basis elements have the same energy.","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"map(b -> Hamiltonians.noninteracting_energy(H, b), basis2)","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"5-element Vector{Float64}:\n 5.0\n 5.0\n 5.0\n 5.0\n 5.0","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"However, since this system is an isotropic harmonic oscillator, it is possible to build simultaneous eigenstates of the angular momentum operator L_z, implemented with AxialAngularMomentumHO.","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"Lz = AxialAngularMomentumHO(S)","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"AxialAngularMomentumHO((4, 4); z_dim = 3, addr = BoseFS{0,16}(0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0))","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"L_z does not conserve parity, so both blocks are required. First combine the bases of each block and convert to DVecs.","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"dvs = map(b -> DVec(b => 1.0), vcat(basis1, basis2));","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"and then compute overlaps for the matrix elements of L_z.","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"Lz_mat = [dot(v, Lz, w) for v in dvs, w in dvs]","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"10×10 Matrix{ComplexF64}:\n 0.0+0.0im      0.0+0.0im      0.0+0.0im      0.0+0.0im      0.0+0.0im      0.0+1.0im      0.0+0.0im      0.0+0.0im      0.0+0.0im      0.0-1.41421im\n 0.0+0.0im      0.0+0.0im      0.0+0.0im      0.0+0.0im      0.0+0.0im      0.0+0.0im      0.0+1.0im      0.0+0.0im      0.0+0.0im      0.0+1.41421im\n 0.0+0.0im      0.0+0.0im      0.0+0.0im      0.0+0.0im      0.0+0.0im      0.0+0.0im      0.0+0.0im      0.0-2.0im      0.0+1.73205im  0.0+0.0im\n 0.0+0.0im      0.0+0.0im      0.0+0.0im      0.0+0.0im      0.0+0.0im      0.0+1.41421im  0.0-1.41421im  0.0+0.0im      0.0+0.0im      0.0-1.0im\n 0.0+0.0im      0.0+0.0im      0.0+0.0im      0.0+0.0im      0.0+0.0im      0.0+0.0im      0.0+0.0im      0.0+1.73205im  0.0+0.0im      0.0+0.0im\n 0.0-1.0im      0.0+0.0im      0.0+0.0im      0.0-1.41421im  0.0+0.0im      0.0+0.0im      0.0+0.0im      0.0+0.0im      0.0+0.0im      0.0+0.0im\n 0.0+0.0im      0.0-1.0im      0.0+0.0im      0.0+1.41421im  0.0+0.0im      0.0+0.0im      0.0+0.0im      0.0+0.0im      0.0+0.0im      0.0+0.0im\n 0.0+0.0im      0.0+0.0im      0.0+2.0im      0.0+0.0im      0.0-1.73205im  0.0+0.0im      0.0+0.0im      0.0+0.0im      0.0+0.0im      0.0+0.0im\n 0.0+0.0im      0.0+0.0im      0.0-1.73205im  0.0+0.0im      0.0+0.0im      0.0+0.0im      0.0+0.0im      0.0+0.0im      0.0+0.0im      0.0+0.0im\n 0.0+1.41421im  0.0-1.41421im  0.0+0.0im      0.0+1.0im      0.0+0.0im      0.0+0.0im      0.0+0.0im      0.0+0.0im      0.0+0.0im      0.0+0.0im","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"By diagonalising this matrix the eigenstate have energy E and well-defined angular momentum.","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"Diagonalise this matrix to obtain the eigenstates of L_z. The eigenvectors provide the linear combinations of basis states with well-defined angular momentum, within the subspace of energy E.","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"Lz_vals, Lz_vecs = eigen(Lz_mat)","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"Eigen{ComplexF64, Float64, Matrix{ComplexF64}, Vector{Float64}}\nvalues:\n10-element Vector{Float64}:\n -2.9999999999999956\n -2.999999999999992\n -0.9999999999999991\n -0.9999999999999991\n -0.9999999999999989\n  1.0000000000000002\n  1.0000000000000027\n  1.0000000000000036\n  3.0\n  3.0000000000000004\nvectors:\n10×10 Matrix{ComplexF64}:\n -5.21142e-19-1.11022e-16im        0.0+0.353553im   8.5601e-18-0.0618116im            0.0+0.353553im    0.0394729+0.494592im     -0.000677524+0.16408im               0.0-0.353553im  -3.16732e-17-0.472311im           0.0+0.353553im  -5.48449e-18-5.55112e-17im\n -5.21142e-19-5.55112e-17im        0.0-0.353553im   8.5601e-18-0.0618116im            0.0-0.353553im    0.0394729+0.494592im     -0.000677524+0.16408im               0.0+0.353553im  -3.16732e-17-0.472311im           0.0-0.353553im  -5.48449e-18-5.55112e-17im\n -7.63858e-18-0.612372im           0.0+0.0im       1.29697e-17-0.350841im             0.0+0.0im       -0.00347719-0.0435689im     -0.00137905+0.333971im              0.0+0.0im       -4.17496e-17+0.116023im           0.0+0.0im        5.13001e-18-0.612372im\n  4.62223e-33-2.77556e-17im        0.0+0.5im       3.08149e-33+5.55112e-17im          0.0-0.5im       8.67362e-18+3.46945e-17im           0.0+0.0im                   0.0+0.5im       -6.16298e-33+1.38778e-17im        0.0+0.5im       -1.54074e-33-2.77556e-17im\n          0.0+0.353553im           0.0+0.0im               0.0-0.607675im             0.0+0.0im       -0.00602267-0.0754635im     -0.00238858+0.578455im              0.0+0.0im       -8.32667e-17+0.200958im           0.0+0.0im                0.0+0.353553im\n -3.33067e-16+1.80109e-17im  -0.353553+0.0im         0.0618116-6.81613e-18im     0.353553+0.0im         -0.494592+0.0394729im         0.16408+0.000677524im      0.353553+0.0im          -0.472311-1.92131e-17im   0.353553+0.0im        5.55112e-17+6.86785e-18im\n -2.77556e-16+1.80109e-17im   0.353553+0.0im         0.0618116-6.81613e-18im    -0.353553+0.0im         -0.494592+0.0394729im         0.16408+0.000677524im     -0.353553+0.0im          -0.472311-1.92131e-17im  -0.353553+0.0im       -1.66533e-16+6.86785e-18im\n    -0.612372+1.31535e-17im        0.0+0.0im          0.350841-1.23225e-17im          0.0+0.0im         0.0435689-0.00347719im       0.333971+0.00137905im            0.0+0.0im           0.116023+4.42387e-17im        0.0+0.0im           0.612372-5.88226e-18im\n     0.353553-2.94055e-17im        0.0+0.0im          0.607675-3.22708e-17im  5.55112e-17+0.0im         0.0754635-0.00602267im       0.578455+0.00238858im   -1.38778e-16+0.0im           0.200958+5.6114e-17im         0.0+0.0im          -0.353553+1.82545e-17im\n          0.0+0.0im                0.5+0.0im               0.0+0.0im                  0.5+0.0im               0.0+0.0im                   0.0+0.0im                   0.5+0.0im                0.0+0.0im               -0.5-0.0im                0.0+0.0im","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"Finally, consider the effect of interactions by looking at how states in a single block are perturbed. Only the energy shift due to the interaction is relevant so now rebuild the Hamiltonian without the non-interacting energy.","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"Hint = HOCartesianContactInteractions(addr1; S, interaction_only = true)\nΔE = eigvals(Matrix(Hint, addr1))","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"5-element Vector{Float64}:\n -2.081668171172327e-17\n  1.0625181290352691e-17\n  0.15915494309189532\n  0.15915494309189535\n  0.15915494309189543","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"Two eigenstates in this block are unaffected by the interaction and three have a non-zero energy shift.","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"The default strength of the interaction is g = 1.0. Other interactions strengths can be obtained by using keyword argument g in HOCartesianContactInteractions or by rescaling ΔE since the interactions are handled with first-order perturbation theory.","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"Rimu also contains HOCartesianEnergyConservedPerDim which is a similar Hamiltonian but with the stricter condition that the contact interaction only connects states that have the same total energy in each dimension, rather than conserving the overall total energy. Both Hamiltonians can handle anisotropic systems by passing a tuple S whose elements are not all the same. This will alter which states are connected by the interaction, but assumes that the harmonic trapping frequencies in each dimension are commensurate.","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"This page was generated using Literate.jl.","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"EditURL = \"../../../scripts/exact-example.jl\"","category":"page"},{"location":"generated/exact-example.html#Example-4:-Exact-diagonalization","page":"Exact diagonalization","title":"Example 4: Exact diagonalization","text":"","category":"section"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"When working with smaller systems or when multiple eigenvalues of a system are required, one can use an exact diagonalization method. There are a few ways to go about this, each with its pros and cons. The purpose of this tutorial is to show off the methods as well as provide a few tips regarding them.","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"A runnable script for this example is located here. Run it with julia exact-example.jl.","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"We start by loading Rimu.","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"using Rimu","category":"page"},{"location":"generated/exact-example.html#Introduction","page":"Exact diagonalization","title":"Introduction","text":"","category":"section"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"We will look at a bosonic system of 4 particles in 5 sites, formulated in momentum space. Let's start by building the Hamiltonian. To create a Fock state where all particles have zero momentum, we put all the particles in the mode at the centre of the address.","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"M = 5\nN = 4\nadd = BoseFS(M, cld(M, 2) => N)\nham = HubbardMom1D(add)","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"HubbardMom1D(fs\"|0 0 4 0 0⟩\"; u=1.0, t=1.0)","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"Before performing exact diagonalization, it is a good idea to check the dimension of the Hamiltonian.","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"dimension(ham)","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"70","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"Keep in mind that this is an estimate of the number of Fock states the Hamiltonian can act on, not the actual matrix size - the matrix size can sometimes be smaller. It can still be used as a guide to decide whether a Hamiltonian is amenable to exact diagonalization and to determine which algorithm would be best suited to diagonalising it.","category":"page"},{"location":"generated/exact-example.html#The-BasisSetRepresentation","page":"Exact diagonalization","title":"The BasisSetRepresentation","text":"","category":"section"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"As we'll see later, there are two ways to construct the matrices from Hamiltonians directly, but they both use BasisSetRepresentation under the hood. The BasisSetRepresentation, when called with a Hamiltonian and optionally a starting address, constructs the sparse matrix of the system, as well as its basis. The starting address defaults to the one that was used to initialize the Hamiltonian. BasisSetRepresentation only returns the part of the matrix that is accessible from this starting address through non-zero offdiagonal elements.","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"bsr = BasisSetRepresentation(ham);","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"To access the matrix or basis, access the sparse_matrix and basis fields, respectively.","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"bsr.sparse_matrix","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"14×14 SparseArrays.SparseMatrixCSC{Float64, Int32} with 104 stored entries:\n -6.8       0.69282   0.69282    ⋅         ⋅         ⋅         ⋅         ⋅          ⋅         ⋅         ⋅         ⋅         ⋅         ⋅ \n  0.69282  -3.03607   0.4       0.4       0.8        ⋅        0.4       0.282843   0.565685  0.8        ⋅         ⋅         ⋅         ⋅ \n  0.69282   0.4       1.43607   0.8       0.4       0.565685  0.8       0.282843    ⋅        0.4        ⋅         ⋅         ⋅         ⋅ \n   ⋅        0.4       0.8       2.81803   0.4       0.282843   ⋅        0.565685    ⋅        0.4       0.69282   0.69282    ⋅         ⋅ \n   ⋅        0.8       0.4       0.4       0.581966   ⋅        0.4       0.565685   0.282843   ⋅         ⋅        0.69282   0.69282    ⋅ \n   ⋅         ⋅        0.565685  0.282843   ⋅        8.47214   0.282843  0.8         ⋅         ⋅         ⋅        0.489898   ⋅        0.489898\n   ⋅        0.4       0.8        ⋅        0.4       0.282843  2.81803   0.565685    ⋅        0.4        ⋅         ⋅        0.69282   0.69282\n   ⋅        0.282843  0.282843  0.565685  0.565685  0.8       0.565685  4.4        0.8       0.565685  0.489898  0.489898  0.489898  0.489898\n   ⋅        0.565685   ⋅         ⋅        0.282843   ⋅         ⋅        0.8       -0.472136  0.282843  0.489898   ⋅        0.489898   ⋅ \n   ⋅        0.8       0.4       0.4        ⋅         ⋅        0.4       0.565685   0.282843  0.581966  0.69282    ⋅         ⋅        0.69282\n   ⋅         ⋅         ⋅        0.69282    ⋅         ⋅         ⋅        0.489898   0.489898  0.69282   1.56393    ⋅         ⋅         ⋅ \n   ⋅         ⋅         ⋅        0.69282   0.69282   0.489898   ⋅        0.489898    ⋅         ⋅         ⋅        6.03607    ⋅         ⋅ \n   ⋅         ⋅         ⋅         ⋅        0.69282    ⋅        0.69282   0.489898   0.489898   ⋅         ⋅         ⋅        1.56393    ⋅ \n   ⋅         ⋅         ⋅         ⋅         ⋅        0.489898  0.69282   0.489898    ⋅        0.69282    ⋅         ⋅         ⋅        6.03607","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"bsr.basis","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"14-element Vector{BoseFS{4, 5, BitString{8, 1, UInt8}}}:\n fs\"|0 0 4 0 0⟩\"\n fs\"|0 1 2 1 0⟩\"\n fs\"|1 0 2 0 1⟩\"\n fs\"|2 1 1 0 0⟩\"\n fs\"|1 0 1 2 0⟩\"\n fs\"|2 0 0 0 2⟩\"\n fs\"|0 0 1 1 2⟩\"\n fs\"|1 1 0 1 1⟩\"\n fs\"|0 2 0 2 0⟩\"\n fs\"|0 2 1 0 1⟩\"\n fs\"|1 3 0 0 0⟩\"\n fs\"|3 0 0 1 0⟩\"\n fs\"|0 0 0 3 1⟩\"\n fs\"|0 1 0 0 3⟩\"","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"When the basis is not needed, we can use Matrix or sparse directly.","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"Matrix(ham)","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"14×14 Matrix{Float64}:\n -6.8       0.69282   0.69282   0.0       0.0       0.0       0.0       0.0        0.0       0.0       0.0       0.0       0.0       0.0\n  0.69282  -3.03607   0.4       0.4       0.8       0.0       0.4       0.282843   0.565685  0.8       0.0       0.0       0.0       0.0\n  0.69282   0.4       1.43607   0.8       0.4       0.565685  0.8       0.282843   0.0       0.4       0.0       0.0       0.0       0.0\n  0.0       0.4       0.8       2.81803   0.4       0.282843  0.0       0.565685   0.0       0.4       0.69282   0.69282   0.0       0.0\n  0.0       0.8       0.4       0.4       0.581966  0.0       0.4       0.565685   0.282843  0.0       0.0       0.69282   0.69282   0.0\n  0.0       0.0       0.565685  0.282843  0.0       8.47214   0.282843  0.8        0.0       0.0       0.0       0.489898  0.0       0.489898\n  0.0       0.4       0.8       0.0       0.4       0.282843  2.81803   0.565685   0.0       0.4       0.0       0.0       0.69282   0.69282\n  0.0       0.282843  0.282843  0.565685  0.565685  0.8       0.565685  4.4        0.8       0.565685  0.489898  0.489898  0.489898  0.489898\n  0.0       0.565685  0.0       0.0       0.282843  0.0       0.0       0.8       -0.472136  0.282843  0.489898  0.0       0.489898  0.0\n  0.0       0.8       0.4       0.4       0.0       0.0       0.4       0.565685   0.282843  0.581966  0.69282   0.0       0.0       0.69282\n  0.0       0.0       0.0       0.69282   0.0       0.0       0.0       0.489898   0.489898  0.69282   1.56393   0.0       0.0       0.0\n  0.0       0.0       0.0       0.69282   0.69282   0.489898  0.0       0.489898   0.0       0.0       0.0       6.03607   0.0       0.0\n  0.0       0.0       0.0       0.0       0.69282   0.0       0.69282   0.489898   0.489898  0.0       0.0       0.0       1.56393   0.0\n  0.0       0.0       0.0       0.0       0.0       0.489898  0.69282   0.489898   0.0       0.69282   0.0       0.0       0.0       6.03607","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"sparse(ham)","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"14×14 SparseArrays.SparseMatrixCSC{Float64, Int32} with 104 stored entries:\n -6.8       0.69282   0.69282    ⋅         ⋅         ⋅         ⋅         ⋅          ⋅         ⋅         ⋅         ⋅         ⋅         ⋅ \n  0.69282  -3.03607   0.4       0.4       0.8        ⋅        0.4       0.282843   0.565685  0.8        ⋅         ⋅         ⋅         ⋅ \n  0.69282   0.4       1.43607   0.8       0.4       0.565685  0.8       0.282843    ⋅        0.4        ⋅         ⋅         ⋅         ⋅ \n   ⋅        0.4       0.8       2.81803   0.4       0.282843   ⋅        0.565685    ⋅        0.4       0.69282   0.69282    ⋅         ⋅ \n   ⋅        0.8       0.4       0.4       0.581966   ⋅        0.4       0.565685   0.282843   ⋅         ⋅        0.69282   0.69282    ⋅ \n   ⋅         ⋅        0.565685  0.282843   ⋅        8.47214   0.282843  0.8         ⋅         ⋅         ⋅        0.489898   ⋅        0.489898\n   ⋅        0.4       0.8        ⋅        0.4       0.282843  2.81803   0.565685    ⋅        0.4        ⋅         ⋅        0.69282   0.69282\n   ⋅        0.282843  0.282843  0.565685  0.565685  0.8       0.565685  4.4        0.8       0.565685  0.489898  0.489898  0.489898  0.489898\n   ⋅        0.565685   ⋅         ⋅        0.282843   ⋅         ⋅        0.8       -0.472136  0.282843  0.489898   ⋅        0.489898   ⋅ \n   ⋅        0.8       0.4       0.4        ⋅         ⋅        0.4       0.565685   0.282843  0.581966  0.69282    ⋅         ⋅        0.69282\n   ⋅         ⋅         ⋅        0.69282    ⋅         ⋅         ⋅        0.489898   0.489898  0.69282   1.56393    ⋅         ⋅         ⋅ \n   ⋅         ⋅         ⋅        0.69282   0.69282   0.489898   ⋅        0.489898    ⋅         ⋅         ⋅        6.03607    ⋅         ⋅ \n   ⋅         ⋅         ⋅         ⋅        0.69282    ⋅        0.69282   0.489898   0.489898   ⋅         ⋅         ⋅        1.56393    ⋅ \n   ⋅         ⋅         ⋅         ⋅         ⋅        0.489898  0.69282   0.489898    ⋅        0.69282    ⋅         ⋅         ⋅        6.03607","category":"page"},{"location":"generated/exact-example.html#Computing-eigenvalues","page":"Exact diagonalization","title":"Computing eigenvalues","text":"","category":"section"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"Now that we have a way of constructing matrices from Hamiltonians, we can use standard Julia functionality to diagonalise them.","category":"page"},{"location":"generated/exact-example.html#The-built-in-method","page":"Exact diagonalization","title":"The built-in method","text":"","category":"section"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"Let's begin by looking at the eigen, eigvecs, and eigvals functions from the LinearAlgebra standard library. They operate on dense matrices and return the full spectra, hence they are only useful for small systems, or when all eigenvalues are required.","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"using LinearAlgebra\n\nmat = Matrix(ham)\neig = eigen(mat);","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"The values can be accessed like so:","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"eig.values","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"14-element Vector{Float64}:\n -6.979863998321608\n -3.3631242916133672\n -0.759019192277071\n  0.1358418221962303\n  0.1578999869460933\n  0.8767114411781449\n  1.5305929970973349\n  1.5835732611867455\n  3.072870330325866\n  3.1256726539518453\n  4.862107221562177\n  6.2606948503805935\n  6.402671211183116\n  9.093371706203953","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"The vectors are stored as columns in eig.vectors:","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"eig.vectors","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"14×14 Matrix{Float64}:\n -0.980348    -0.175378    -0.0135766   -3.15026e-15   0.0221221   0.0697193   9.29812e-16  -0.0314466   -1.42247e-16  -0.0360987   -0.0161557  -9.02056e-17   0.00625248  -0.0058099\n  0.177701    -0.932229    -0.105473     3.33067e-14  -0.225254    0.132826    9.4369e-16    0.00292026  -1.49013e-15  -0.0861158   -0.0907789  -1.16573e-15   0.0591715   -0.0264275\n  0.0768085    0.0622307   -0.0129069   -6.11039e-14   0.447424    0.63969     1.24831e-14  -0.383444    -3.80078e-15  -0.431051    -0.181167   -1.16573e-15   0.0599783   -0.106852\n -0.0119687    0.0373038   -0.0678797    0.0693699    -0.0495446  -0.416847    0.33773      -0.0584554   -0.601232     -0.467179    -0.215841   -0.140166      0.190543    -0.114342\n -0.0214153    0.175119     0.20169     -0.616673     -0.522017    0.296818    0.31234       0.122119     0.123629     -0.106455    -0.126661   -0.0829132     0.148347    -0.0574235\n -0.00237613  -0.00294196  -0.00143189   6.05072e-15  -0.0427486  -0.0110863  -1.72085e-15   0.0663108   -5.55112e-17   0.00167015   0.0832916   4.36456e-15  -0.448519    -0.8863\n -0.0119687    0.0373038   -0.0678797   -0.0693699    -0.0495446  -0.416847   -0.33773      -0.0584554    0.601232     -0.467179    -0.215841    0.140166      0.190543    -0.114342\n -0.00234782  -0.00840544   0.098969    -1.28231e-14   0.0847116  -0.082999    6.70297e-15  -0.274424     3.2474e-15    0.575786    -0.61385    -5.37764e-15   0.353775    -0.259338\n -0.0138439    0.165902    -0.922758     1.50713e-14  -0.1111      0.172508   -4.02109e-15   0.207974    -4.85723e-17   0.0848902   -0.149153   -8.60423e-16   0.0712921   -0.0301968\n -0.0214153    0.175119     0.20169      0.616673     -0.522017    0.296818   -0.31234       0.122119    -0.123629     -0.106455    -0.126661    0.0829132     0.148347    -0.0574235\n  0.00363555  -0.0455298    0.133824    -0.332825      0.290831    0.057199   -0.527627      0.588225    -0.332816     -0.0472302   -0.18528    -0.00844536    0.0915588   -0.0346434\n  0.00195478  -0.0150664   -0.0206752    0.0642658     0.0638689   0.0250518  -0.0999631     0.012992     0.111668      0.0393523    0.423534   -0.688046      0.513839    -0.222499\n  0.00363555  -0.0455298    0.133824     0.332825      0.290831    0.057199    0.527627      0.588225     0.332816     -0.0472302   -0.18528     0.00844536    0.0915588   -0.0346434\n  0.00195478  -0.0150664   -0.0206752   -0.0642658     0.0638689   0.0250518   0.0999631     0.012992    -0.111668      0.0393523    0.423534    0.688046      0.513839    -0.222499","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"If you need the full spectrum, but would like to use less memory, consider using the in-place eigen!.","category":"page"},{"location":"generated/exact-example.html#Iterative-sparse-solvers","page":"Exact diagonalization","title":"Iterative sparse solvers","text":"","category":"section"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"For larger Hamiltonians, it is better to use an iterative solver. There are several options. We will look at eigs from Arpack.jl and eigsolve from KrylovKit.jl.","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"Let's start with Arpack's eigs. It is important to set the nev and which keyword arguments. nev sets the number of eigenpairs to find. which should in most cases be set to :SR, which will find the eigenvalues with the smallest real part.","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"using Arpack\n\nnum_eigvals = 3\n\nsparse_matrix = sparse(ham)\nvals_ar, vecs_ar = eigs(sparse_matrix; which=:SR, nev=num_eigvals)\nvals_ar","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"3-element Vector{Float64}:\n -6.979863998321618\n -3.363124291613361\n -0.7590191922770777","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"Using KrylovKit's eigsolve is similar, but the nev and which are given as positional arguments. Note that KrylovKit may sometimes return more than nev eigenpairs if it happens to find them.","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"using KrylovKit\n\nvals_kk, vecs_kk = eigsolve(sparse_matrix, num_eigvals, :SR)\nvals_kk","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"14-element Vector{Float64}:\n -6.979863998321633\n -3.363124291613362\n -0.7590191922770853\n  0.13584182219622853\n  0.157899986946072\n  0.8767114411781343\n  1.5305929970973322\n  1.5835732611867357\n  3.072870330325868\n  3.1256726539518356\n  4.862107221562171\n  6.260694850380599\n  6.402671211183114\n  9.093371706203957","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"Both solvers use variants of the Lanczos algorithm for Hermitian matrices and the Arnoldi algorithm for non-Hermitian ones. These may in some cases miss degenerate eigenpairs.","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"If diagonalization takes too long, you can reduce the tolerance by setting the tol keyword argument to eigs or eigsolve. Using drastically lower tolerances than the default can still produce good results in practice. This, however, should be checked on a case-by-case basis.","category":"page"},{"location":"generated/exact-example.html#The-matrix-free-method","page":"Exact diagonalization","title":"The matrix-free method","text":"","category":"section"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"KrylovKit's eigsolve function is implemented in a way that does not require the linear operator and vector to be Julia arrays. Rimu leverages this functionality, which allows diagonalising Hamiltonians without ever needing to construct the matrix - all matrix elements are generated on the fly.","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"While this method is by far the slowest of the ones discussed, it also uses drastically less memory. This allows us to diagonalise much larger Hamiltonians.","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"To use this method, you first need a starting vector. It's best to use PDVec here as it leverages threading during the diagonalization.","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"dvec = PDVec(add => 1.0)","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"1-element PDVec: style = IsDeterministic{Float64}()\n  fs\"|0 0 4 0 0⟩\" => 1.0","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"Then, pass that vector and the Hamiltonian to eigsolve.","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"vals_mf, vecs_mf = eigsolve(ham, dvec, num_eigvals, :SR; issymmetric=true)\nvals_mf","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"10-element Vector{Float64}:\n -6.979863998321612\n -3.3631242916133406\n -0.7590191922770728\n  0.1578999869460862\n  0.8767114411781503\n  1.5835732611867401\n  3.125672653951839\n  4.862107221562172\n  6.402671211183112\n  9.093371706203953","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"Keep in mind that if an eigenvector is orthogonal to dvec, KrylovKit will miss it. Consider the following example:","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"eigsolve(ham, vecs_mf[2], num_eigvals, :SR, issymmetric=true)[1]","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"1-element Vector{Float64}:\n -3.3631242916133606","category":"page"},{"location":"generated/exact-example.html#Reducing-matrix-size-with-symmetries","page":"Exact diagonalization","title":"Reducing matrix size with symmetries","text":"","category":"section"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"As these matrices tend to get large quickly, memory is usually the bottleneck.  There are currently two methods implemented to reduce the matrix size, ParitySymmetry and TimeReversalSymmetry. These symmetries work by performing a unitary transformation on the Hamiltonian which causes it to become block-diagonal. When building a matrix from a block-diagonal Hamiltonian, only the block that contains the starting address is constructed.","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"You should only use these where the relevant symmetries actually apply - no checks are performed to make sure they do. There is also currently no way of using both at the same time. Please consult the documentation for a more in-depth description of these options.","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"The Hamiltonian presented in this example is compatible with ParitySymmetry. Let's see how the matrix size is reduced when applying it.","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"size(sparse(ham))","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"(14, 14)","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"size(sparse(ParitySymmetry(ham)))","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"(10, 10)","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"In this small example, the size reduction is modest, but for larger systems, you can expect to reduce the dimension of the matrix by about half.","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"all_eigs = eigvals(Matrix(ham))\neven_eigs = eigvals(Matrix(ParitySymmetry(ham)))","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"10-element Vector{Float64}:\n -6.979863998321619\n -3.3631242916133615\n -0.7590191922770766\n  0.1578999869460802\n  0.876711441178143\n  1.5835732611867412\n  3.1256726539518436\n  4.862107221562176\n  6.4026712111831126\n  9.093371706203952","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"The eigenvalues of the transformed Hamiltonian are a subset of the full spectrum. To get the other half, we can pass the even=false keyword argument to ParitySymmetry. When doing that, we need to make sure the starting address of the Hamiltonian is not symmetric under reversal:","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"add_odd = BoseFS(M, cld(M, 2) => N - 3, cld(M, 2) - 1 => 2, cld(M, 2) + 2 => 1)","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"BoseFS{4,5}(0, 2, 1, 0, 1)","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"odd_eigs = eigvals(Matrix(ParitySymmetry(HubbardMom1D(add_odd); even=false)))","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"4-element Vector{Float64}:\n 0.135841822196218\n 1.530592997097328\n 3.0728703303258613\n 6.260694850380591","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"Now, let's check that combining the two sets of eigenvalues indeed recovers the whole spectrum.","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"sort([even_eigs; odd_eigs]) ≈ all_eigs","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"true","category":"page"},{"location":"generated/exact-example.html#Computing-observables","page":"Exact diagonalization","title":"Computing observables","text":"","category":"section"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"Since building a matrix from an operator only builds the part that is reachable from the starting address, we need to use a different approach when computing observables.","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"To demonstrate this, we will use the DensityMatrixDiagonal operator, which in this case will give the momentum density.","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"The idea here is to construct a PDVec from the computed eigenvector and use it directly with the operator.","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"dvec = PDVec(zip(bsr.basis, eigvecs(Matrix(ham))[:, 1]))","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"14-element PDVec: style = IsDeterministic{Float64}()\n  fs\"|1 0 1 2 0⟩\" => -0.0214153\n  fs\"|2 0 0 0 2⟩\" => -0.00237613\n  fs\"|0 0 4 0 0⟩\" => -0.980348\n  fs\"|0 0 0 3 1⟩\" => 0.00363555\n  fs\"|2 1 1 0 0⟩\" => -0.0119687\n  fs\"|1 0 2 0 1⟩\" => 0.0768085\n  fs\"|1 3 0 0 0⟩\" => 0.00363555\n  fs\"|0 1 2 1 0⟩\" => 0.177701\n  fs\"|0 0 1 1 2⟩\" => -0.0119687\n  fs\"|3 0 0 1 0⟩\" => 0.00195478\n  fs\"|0 2 0 2 0⟩\" => -0.0138439\n  fs\"|1 1 0 1 1⟩\" => -0.00234782\n  fs\"|0 1 0 0 3⟩\" => 0.00195478\n  fs\"|0 2 1 0 1⟩\" => -0.0214153","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"The eigenvectors these methods produce are normalized, hence we can use the three-argument dot to compute the values of observables. Here we are computing the single particle momentum density distribution, which is just the diagonal of the single-particle density matrix in momentum space.","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"[dot(dvec, DensityMatrixDiagonal(i), dvec) for i in 1:M]","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"5-element Vector{Float64}:\n 0.006686138945087833\n 0.033070399772042\n 3.9204869225657397\n 0.033070399772041965\n 0.006686138945087815","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"This page was generated using Literate.jl.","category":"page"},{"location":"rimuio.html#Module-RimuIO","page":"I/O","title":"Module RimuIO","text":"","category":"section"},{"location":"rimuio.html","page":"I/O","title":"I/O","text":"Modules = [RimuIO]","category":"page"},{"location":"rimuio.html#Rimu.RimuIO","page":"I/O","title":"Rimu.RimuIO","text":"Module to provide file input and output functionality for Rimu. Provides convenience functions:\n\nRimuIO.save_df(filename, df::DataFrame) Save dataframe in Arrow format.\nRimuIO.load_df(filename) Load Arrow file into dataframe.\n\n\n\n\n\n","category":"module"},{"location":"rimuio.html#Rimu.RimuIO.load_df-Tuple{Any}","page":"I/O","title":"Rimu.RimuIO.load_df","text":"RimuIO.load_df(filename; propagate_metadata = true, add_filename = true) -> DataFrame\n\nLoad Arrow file into DataFrame. Optionally propagate metadata to DataFrame and add the file name as metadata.\n\nSee also RimuIO.save_df.\n\n\n\n\n\n","category":"method"},{"location":"rimuio.html#Rimu.RimuIO.save_df-Tuple{Any, DataFrame}","page":"I/O","title":"Rimu.RimuIO.save_df","text":"RimuIO.save_df(filename, df::DataFrame; kwargs...)\n\nSave dataframe in Arrow format.\n\nKeyword arguments are passed on to Arrow.write. Compression is enabled by default for large DataFrames (over 10,000 rows).\n\nTable-level metadata of the DataFrame is saved as Arrow metadata (with String value) unless overwritten with the keyword argument metadata.\n\nSee also RimuIO.load_df.\n\n\n\n\n\n","category":"method"},{"location":"rimuio.html#Index","page":"I/O","title":"Index","text":"","category":"section"},{"location":"rimuio.html","page":"I/O","title":"I/O","text":"Pages   = [\"rimuio.md\"]","category":"page"},{"location":"hamiltonians.html#Module-Hamiltonians","page":"Hamiltonians","title":"Module Hamiltonians","text":"","category":"section"},{"location":"hamiltonians.html","page":"Hamiltonians","title":"Hamiltonians","text":"This module contains definitions of Hamiltonians, in particular specific physical models of interest. These are organised by means of an interface around the abstract type AbstractHamiltonian, in the spirit of the AbstractArray interface as discussed in the Julia Documentation.","category":"page"},{"location":"hamiltonians.html","page":"Hamiltonians","title":"Hamiltonians","text":"The Hamiltonians can be used for projector quantum Monte Carlo with ProjectorMonteCarloProblem or for exact diagonalization with ExactDiagonalizationProblem, see Exact Diagonalization.","category":"page"},{"location":"hamiltonians.html","page":"Hamiltonians","title":"Hamiltonians","text":"Hamiltonians","category":"page"},{"location":"hamiltonians.html#Rimu.Hamiltonians","page":"Hamiltonians","title":"Rimu.Hamiltonians","text":"The module Rimu.Hamiltonians defines types and functions for working with Hamiltonians.\n\nExported concrete Hamiltonian types\n\nReal space Hubbard models\n\nHubbardReal1D\nHubbardReal1DEP\nHubbardRealSpace\nExtendedHubbardReal1D\n\nMomentum space Hubbard models\n\nHubbardMom1D\nHubbardMom1DEP\n\nHarmonic oscillator models\n\nHOCartesianContactInteractions\nHOCartesianEnergyConservedPerDim\nHOCartesianCentralImpurity\n\nOther\n\nFroehlichPolaron\nMatrixHamiltonian\nTranscorrelated1D\n\nWrappers\n\nGutzwillerSampling\nGuidingVectorSampling\nParitySymmetry\nTimeReversalSymmetry\nStoquastic\n\nObservables\n\nParticleNumberOperator\nG2RealCorrelator\nG2MomCorrelator\nG2RealSpace\nDensityMatrixDiagonal\nSingleParticleExcitation\nTwoParticleExcitation\nMomentum\nAxialAngularMomentumHO\n\nInterface for working with Hamiltonians\n\nAbstractHamiltonian: defined in the module Interfaces\n\n\n\n\n\n","category":"module"},{"location":"hamiltonians.html","page":"Hamiltonians","title":"Hamiltonians","text":"Here is a list of fully implemented model Hamiltonians. There are several variants of the Hubbard model in real and momentum space, as well as some other models.","category":"page"},{"location":"hamiltonians.html#Real-space-Hubbard-models","page":"Hamiltonians","title":"Real space Hubbard models","text":"","category":"section"},{"location":"hamiltonians.html","page":"Hamiltonians","title":"Hamiltonians","text":"HubbardReal1D\nHubbardReal1DEP\nHubbardRealSpace\nExtendedHubbardReal1D","category":"page"},{"location":"hamiltonians.html#Rimu.Hamiltonians.HubbardReal1D","page":"Hamiltonians","title":"Rimu.Hamiltonians.HubbardReal1D","text":"HubbardReal1D(address; u=1.0, t=1.0)\n\nImplements a one-dimensional Bose Hubbard chain in real space.\n\nhatH = -t sum_langle ijrangle a_i^ a_j + fracu2sum_i n_i (n_i-1)\n\nArguments\n\naddress: the starting address, defines number of particles and sites.\nu: the interaction parameter.\nt: the hopping strength.\n\nSee also\n\nHubbardMom1D\nExtendedHubbardReal1D\n\n\n\n\n\n","category":"type"},{"location":"hamiltonians.html#Rimu.Hamiltonians.HubbardReal1DEP","page":"Hamiltonians","title":"Rimu.Hamiltonians.HubbardReal1DEP","text":"HubbardReal1DEP(address; u=1.0, t=1.0, v_ho=1.0)\n\nImplements a one-dimensional Bose Hubbard chain in real space with external potential.\n\nhatH = -t sum_langle ijrangle a_i^ a_j + sum_i ϵ_i n_i\n+ fracu2sum_i n_i (n_i-1)\n\nArguments\n\naddress: the starting address, defines number of particles and sites.\nu: the interaction parameter.\nt: the hopping strength.\nv_ho: strength of the external harmonic oscillator potential ϵ_i = v_ho i^2.\n\nThe first index is i=0 and the maximum of the potential occurs in the centre of the lattice.\n\nSee also\n\nHubbardReal1D\nHubbardMom1D\nExtendedHubbardReal1D\n\n\n\n\n\n","category":"type"},{"location":"hamiltonians.html#Rimu.Hamiltonians.HubbardRealSpace","page":"Hamiltonians","title":"Rimu.Hamiltonians.HubbardRealSpace","text":"HubbardRealSpace(address; geometry=PeriodicBoundaries(M,), t=ones(C), u=ones(C, C), v=zeros(C, D))\n\nHubbard model in real space. Supports single or multi-component Fock state addresses (with C components) and various (rectangular) lattice geometries in D dimensions.\n\n  hatH = -sum_langle ijrangleσ t_σ a^_iσ a_jσ +\n  frac12sum_iσ u_σσ n_iσ (n_iσ - 1) +\n  sum_iστu_στ n_iσ n_iτ\n\nIf v is nonzero then this calculates hatH + hatV by adding the harmonic trapping potential\n\n    hatV = sum_iσd v_σd x_di^2 n_iσ\n\nwhere x_di is the distance of site i from the centre of the trap along dimension d.\n\nAddress types\n\nBoseFS: Single-component Bose-Hubbard model.\nFermiFS: Single-component Fermi-Hubbard model.\nCompositeFS: For multi-component models.\n\nNote that a single component of fermions cannot interact with itself. A warning is produced if addressis incompatible with the interaction parameters u.\n\nGeometries\n\nImplemented CubicGrids for keyword geometry\n\nPeriodicBoundaries\nHardwallBoundaries\nLadderBoundaries\n\nDefault is geometry=PeriodicBoundaries(M,), i.e. a one-dimensional lattice with the number of sites M inferred from the number of modes in address.\n\nOther parameters\n\nt: the hopping strengths. Must be a vector of length C. The i-th element of the vector corresponds to the hopping strength of the i-th component.\nu: the on-site interaction parameters. Must be a symmetric matrix. u[i, j] corresponds to the interaction between the i-th and j-th component. u[i, i] corresponds to the interaction of a component with itself. Note that u[i,i] must be zero for fermionic components.\nv: the trap potential strengths. Must be a matrix of size C × D. v[i,j] is the strength of the trap for component i in the jth dimension.\n\n\n\n\n\n","category":"type"},{"location":"hamiltonians.html#Rimu.Hamiltonians.ExtendedHubbardReal1D","page":"Hamiltonians","title":"Rimu.Hamiltonians.ExtendedHubbardReal1D","text":"ExtendedHubbardReal1D(address; u=1.0, v=1.0, t=1.0, boundary_condition=:periodic)\n\nImplements the extended Hubbard model on a one-dimensional chain in real space. This Hamiltonian can be either real or complex, depending on the choice of boundary_condition.\n\nhatH = -t sum_langle ijrangle a_i^ a_j + fracu2sum_i n_i (n_i-1) +\nv sum_langle ijrangle n_i n_j\n\nArguments\n\naddress: the starting address.\nu: on-site interaction parameter\nv: the next-neighbor interaction\nt: the hopping strength\nboundary_condition The following values are supported:\n:periodic: usual period boundary condition realising a ring geometry.\n:hard_wall: hopping over the boundary is not allowed.\n:twisted: like :periodic but hopping over the boundary incurs an additional factor of -1.\nθ <: Number: like :periodic and :twisted but hopping over the boundary incurs a factor exp(iθ) for a hop to the right and exp(iθ) for a hop to the left. With this choice the Hamiltonian will have a complex eltype whereas otherwise the eltype is determined by the type of the parameters t, u, and v.\n\nSee also HubbardRealSpace.\n\n\n\n\n\n","category":"type"},{"location":"hamiltonians.html#Momentum-space-Hubbard-models","page":"Hamiltonians","title":"Momentum space Hubbard models","text":"","category":"section"},{"location":"hamiltonians.html","page":"Hamiltonians","title":"Hamiltonians","text":"HubbardMom1D\nHubbardMom1DEP\nExtendedHubbardMom1D","category":"page"},{"location":"hamiltonians.html#Rimu.Hamiltonians.HubbardMom1D","page":"Hamiltonians","title":"Rimu.Hamiltonians.HubbardMom1D","text":"HubbardMom1D(address; u=1.0, t=1.0, dispersion=hubbard_dispersion)\n\nImplements a one-dimensional Bose Hubbard chain in momentum space.\n\nhatH =  sum_k ϵ_k n_k + fracuMsum_kpqr a^_r a^_q a_p a_k δ_r+qp+k\n\nArguments\n\naddress: the starting address, defines number of particles and sites.\nu: the interaction parameter.\nt: the hopping strength.\ndispersion: defines ϵ_k =dispersion(t, k)\nhubbard_dispersion: ϵ_k = -2(Re(t) cos(k) + Im(t) sin(k))\ncontinuum_dispersion: ϵ_k = Re(t) k^2 - 2 Im(t) k\n\nSee also\n\nHubbardReal1D\nExtendedHubbardReal1D\n\n\n\n\n\n","category":"type"},{"location":"hamiltonians.html#Rimu.Hamiltonians.HubbardMom1DEP","page":"Hamiltonians","title":"Rimu.Hamiltonians.HubbardMom1DEP","text":"HubbardMom1DEP(address; u=1.0, t=1.0, v_ho=1.0, dispersion=hubbard_dispersion)\n\nImplements a one-dimensional Bose Hubbard chain in momentum space with harmonic external potential.\n\nH = sum_k ϵ_k n_k + fracuMsum_kpqr a^_r a^_q a_p a_k δ_r+qp+k\n            + V_mathrmho \n\nwhere\n\nbeginaligned\nV_mathrmho  = frac1M sum_pq  mathrmDFTV_ext_p-q \n                    a^_p a_q \nV_mathrmext(x) = v_mathrmho x^2 \nendaligned\n\nis an external harmonic potential in momentum space, mathrmDFT_k is a discrete Fourier transform performed by fft()[k%M + 1], and M == num_modes(address).\n\nArguments\n\naddress: the starting address, defines number of particles and sites.\nu: the interaction parameter.\nt: the hopping strength.\ndispersion: defines ϵ_k =dispersion(t, k)\nhubbard_dispersion: ϵ_k = -2Re(t) cos(k) + Im(t) sin(k)\ncontinuum_dispersion: ϵ_k = Re(t) k^2 - 2 Im(t) k\nv_ho: strength of the external harmonic oscillator potential v_mathrmho.\n\nSee also HubbardMom1D, HubbardReal1DEP, Transcorrelated1D, Hamiltonians.\n\n\n\n\n\n","category":"type"},{"location":"hamiltonians.html#Rimu.Hamiltonians.ExtendedHubbardMom1D","page":"Hamiltonians","title":"Rimu.Hamiltonians.ExtendedHubbardMom1D","text":"ExtendedHubbardMom1D(\n    address; \n    u=1.0, t=1.0, v=1.0, dispersion=hubbard_dispersion, boundary_condition = 0.0\n)\n\nImplements a one-dimensional extended Hubbard chain, also known as the t - V model,  in momentum space.\n\nhatH =  sum_k ϵ_k n_k + frac12M sum_kpqr (u + 2v cos(q-p)) a^_r a^_q a_p a_k δ_r+qp+k\n\nArguments\n\naddress: the starting address, defines number of particles and sites.\nu: the interaction parameter.\nt: the hopping strength.\nboundary_condition: θ <: Number: hopping over the boundary incurs a   factor exp(iθ) for a hop to the right and exp(iθ) for a hop to the left.\ndispersion: defines ϵ_k =dispersion(t, k + θ)\nhubbard_dispersion: ϵ_k = -2 (Re(t) cos(k + θ) + Im(t) sin(k + θ))\ncontinuum_dispersion: ϵ_k = Re(t) (k + θ)^2 - 2 Im(t) (k + θ)\n\nSee also\n\nHubbardMom1D\nHubbardReal1D\nExtendedHubbardReal1D\n\n\n\n\n\n","category":"type"},{"location":"hamiltonians.html#Harmonic-oscillator-models","page":"Hamiltonians","title":"Harmonic oscillator models","text":"","category":"section"},{"location":"hamiltonians.html","page":"Hamiltonians","title":"Hamiltonians","text":"HOCartesianContactInteractions\nHOCartesianEnergyConservedPerDim\nHOCartesianCentralImpurity","category":"page"},{"location":"hamiltonians.html#Rimu.Hamiltonians.HOCartesianContactInteractions","page":"Hamiltonians","title":"Rimu.Hamiltonians.HOCartesianContactInteractions","text":"HOCartesianContactInteractions(addr; S, η, g = 1.0, interaction_only = false, block_by_level = true)\n\nImplements a bosonic harmonic oscillator in Cartesian basis with contact interactions\n\nhatH = sum_i epsilon_mathbfi n_mathbfi + fracg2sum_mathbfijkl\n    V_mathbfijkl a^_mathbfi a^_mathbfj a_mathbfk a_mathbfl\n\nFor a D-dimensional harmonic oscillator indices mathbfi mathbfj ldots are D-tuples. The energy scale is defined by the first dimension i.e. hbar omega_x so that single particle energies are\n\n    fracepsilon_mathbfihbar omega_x = (i_x + 12) + eta_y (i_y+12) + ldots\n\nThe factors eta_y ldots allow for anisotropic trapping geometries and are assumed to be greater than 1 so that omega_x is the smallest trapping frequency.\n\nBy default the offdiagonal elements due to the interactions are consistent with first-order degenerate perturbation theory\n\n    V_mathbfijkl = delta_epsilon_mathbfi + epsilon_mathbfj\n        ^epsilon_mathbfk + epsilon_mathbfl\n        prod_d in x yldots mathcalI(i_dj_dk_dl_d)\n\nwhere the delta function indicates that the total noninteracting energy is conserved meaning all states with the same noninteracting energy are connected by this interaction and the Hamiltonian blocks according to noninteracting energy levels. Setting block_by_level = false will disable this restriction and allow coupling between basis states of any noninteracting energy level, leading to many more offdiagonals and fewer but larger blocks (the blocks are still distinguished by parity of basis states). Alternatively, see HOCartesianEnergyConservedPerDim for a model with the stronger restriction that conserves energy separately per spatial dimension. The integral mathcalI(abcd) is of four one dimensional harmonic oscillator basis functions, implemented in four_oscillator_integral_general.\n\nArguments\n\naddr: the starting address, defines number of particles and total number of modes.\nS: Tuple of the number of levels in each dimension, including the groundstate. The   allowed couplings between states is defined by the aspect ratio of S .- 1. Defaults   to a 1D spectrum with number of levels matching modes of addr. Will be sorted to make   the first dimension the largest.\nη: Define a custom aspect ratio for the trapping potential strengths, instead of deriving   from S .- 1. This will only affect the single particle energy scale and not the   interactions. The values are always scaled relative to the first dimension, which sets   the energy scale of the system, hbaromega_x.\ng: the (isotropic) bare interaction parameter. The value of g is assumed   to be in trap units.\ninteraction_only: if set to true then the noninteracting single-particle terms are   ignored. Useful if only energy shifts due to interactions are required.\nblock_by_level: if set to false will allow the interactions to couple all states without   comparing their noninteracting energy.\n\nwarning: Warning\nnum_offdiagonals is a bad estimate for this Hamiltonian. Take care when building a matrix or using QMC methods. Use get_all_blocks first then pass option col_hint = block_size to BasisSetRep to safely build the matrix.\n\n\n\n\n\n","category":"type"},{"location":"hamiltonians.html#Rimu.Hamiltonians.HOCartesianEnergyConservedPerDim","page":"Hamiltonians","title":"Rimu.Hamiltonians.HOCartesianEnergyConservedPerDim","text":"HOCartesianEnergyConservedPerDim(addr; S, η, g = 1.0, interaction_only = false)\n\nImplements a bosonic harmonic oscillator in Cartesian basis with contact interactions\n\nhatH = sum_i ϵ_i n_i + fracg2sum_ijkl V_ijkl a^_i a^_j a_k a_l\n\nwith the additional restriction that the interactions only couple states with the same energy in each dimension separately. See HOCartesianContactInteractions for a model that conserves total energy.\n\nFor a D-dimensional harmonic oscillator indices mathbfi mathbfj ldots are D-tuples. The energy scale is defined by the first dimension i.e. hbar omega_x so that single particle energies are\n\n    fracepsilon_mathbfihbar omega_x = (i_x + 12) + eta_y (i_y+12) + ldots\n\nThe factors eta_y ldots allow for anisotropic trapping geometries and are assumed to be greater than 1 so that omega_x is the smallest trapping frequency.\n\nMatrix elements V_mathbfijkl are for a contact interaction calculated in this basis using first-order degenerate perturbation theory.\n\n    V_mathbfijkl = prod_d in x yldots mathcalI(i_dj_dk_dl_d)\n        delta_i_d + j_d^k_d + l_d\n\nwhere the delta-function indicates that the noninteracting energy is conserved along each dimension. The integral mathcalI(abcd) is of four one dimensional harmonic oscillator basis functions, see four_oscillator_integral_general, with the additional restriction that energy is conserved in each dimension.\n\nArguments\n\naddr: the starting address, defines number of particles and total number of modes.\nS: Tuple of the number of levels in each dimension, including the groundstate. Defaults   to a 1D spectrum with number of levels matching modes of addr. Will be sorted to   make the first dimension the largest.\nη: Define a custom aspect ratio for the trapping potential strengths, instead of deriving   from S .- 1. The values are always scaled relative to the first dimension, which sets   the energy scale of the system, hbaromega_x.\ng: the (isotropic) interparticle interaction parameter. The value of g is assumed   to be in trap units.\ninteraction_only: if set to true then the noninteracting single-particle terms are   ignored. Useful if only energy shifts due to interactions are required.\n\n\n\n\n\n","category":"type"},{"location":"hamiltonians.html#Rimu.Hamiltonians.HOCartesianCentralImpurity","page":"Hamiltonians","title":"Rimu.Hamiltonians.HOCartesianCentralImpurity","text":"HOCartesianCentralImpurity(addr; kwargs...)\n\nHamiltonian of non-interacting particles in an arbitrary harmonic trap with a delta-function potential at the centre, with strength g,\n\nhatH_mathrmrel = sum_mathbfi ϵ_mathbfi n_mathbfi\n    + gsum_mathbfij V_mathbfij a^_mathbfi a_mathbfj\n\nFor a D-dimensional harmonic oscillator indices mathbfi mathbfj ldots are D-tuples. The energy scale is defined by the first dimension i.e. hbar omega_x so that single particle energies are\n\n    fracepsilon_mathbfihbar omega_x = (i_x + 12) + eta_y (i_y+12) + ldots\n\nThe factors eta_y ldots allow for anisotropic trapping geometries and are assumed to be greater than 1 so that omega_x is the smallest trapping frequency.\n\nMatrix elements V_mathbfij are for a delta function potential calculated in this basis\n\n    V_mathbfij = prod_d in x yldots psi_i_d(0) psi_j_d(0)\n\nOnly even parity states feel this impurity, so all i_d are even. Note that the matrix representation of this Hamiltonian for a single particle is completely dense in the even-parity subspace.\n\nArguments\n\naddr: the starting address, defines number of particles and total number of modes.\nmax_nx = num_modes(addr) - 1: the maximum harmonic oscillator index number in the x-dimension.   Must be even. Index number for the harmonic oscillator groundstate is 0.\nηs = (): a tuple of aspect ratios for the remaining dimensions (η_y, ...). Should be empty   for a 1D trap or contain values greater than 1.0. The maximum index   in other dimensions will be the largest even number less than M/η_y.\nS = nothing: Instead of max_nx, manually set the number of levels in each dimension,   including the groundstate. Must be a Tuple of Ints.\ng = 1.0: the strength of the delta impurity in (x-dimension) trap units.\nimpurity_only=false: if set to true then the trap energy terms are ignored. Useful if   only energy shifts due to the impurity are required.\n\nwarning: Warning\nDue to use of `SpecialFunctions` with large arguments the matrix representation of\nthis Hamiltonian may not be strictly symmetric, but is approximately symmetric within\nmachine precision.\n\nSee also HOCartesianContactInteractions andHOCartesianEnergyConservedPerDim.\n\n\n\n\n\n","category":"type"},{"location":"hamiltonians.html#Other-model-Hamiltonians","page":"Hamiltonians","title":"Other model Hamiltonians","text":"","category":"section"},{"location":"hamiltonians.html","page":"Hamiltonians","title":"Hamiltonians","text":"MatrixHamiltonian\nTranscorrelated1D\nFroehlichPolaron","category":"page"},{"location":"hamiltonians.html#Rimu.Hamiltonians.MatrixHamiltonian","page":"Hamiltonians","title":"Rimu.Hamiltonians.MatrixHamiltonian","text":"MatrixHamiltonian(\n    mat::AbstractMatrix{T};\n    starting_address::Int = starting_address(mat)\n) <: AbstractHamiltonian{T}\n\nWrap an abstract matrix mat as an AbstractHamiltonian object. Works with stochastic methods of ProjectorMonteCarloProblem() and DVec. Optionally, a valid index can be provided as the starting_address.\n\nSpecialised methods are implemented for sparse matrices of type AbstractSparseMatrixCSC. One based indexing is required for the matrix mat.\n\n\n\n\n\n","category":"type"},{"location":"hamiltonians.html#Rimu.Hamiltonians.Transcorrelated1D","page":"Hamiltonians","title":"Rimu.Hamiltonians.Transcorrelated1D","text":"Transcorrelated1D(address; t=1.0, v=1.0, v_ho=0.0, cutoff=1, three_body_term=true)\n\nImplements a transcorrelated Hamiltonian for contact interactions in one dimensional momentum space from Jeszenski et al. (2018). Currently limited to two component fermionic addresses.\n\nbeginaligned\n\ntildeH = t sum_kσk^2 n_kσ \n    quad + sum_pqkσσ T_pqk a^_p-kσ a^_q+kσ a_qσ a_pσ \n    quad + sum_pqskkσσ Q_kka^_p-kσ a^_q+kσ a^_s+k-kσ\n                                       a_sσ a_qσ a_pσ \n    quad + V_mathrmho\nendaligned\n\nwhere\n\nbeginaligned\ntildeu(k) = begincases -frac2k^2 mathrmif  k  k_c\n0  mathrmotherwise\nendcases\n\n\nT_pqk = fracvM + frac2vMleftk^2tildeu(k)\n          - (p - q)ktildeu(k)right + frac2v^2tW(k)\nW(k) = frac1M^2sum_q (k - q)q tildeu(q)tildeu(k - q) \nQ_kl = -fracv^2t M^2k tildeu(k)ltildeu(l)\nendaligned\n\nArguments\n\naddress: The starting address, defines number of particles and sites.\nv: The interaction parameter.\nt: The kinetic energy prefactor.\nv_ho: Strength of the external harmonic oscillator potential V_mathrmho. See HubbardMom1DEP.\ncutoff controls k_c in equations above. Note: skipping generating off-diagonal elements below the cutoff is not implemented - zero-valued elements are returned instead.\nthree_body_term: If set to false, generating three body excitations is skipped. Note: when disabling three body terms, cutoff should be set to a higher value for best results.\n\nSee also\n\nHubbardMom1D\nHubbardMom1DEP\n\n\n\n\n\n","category":"type"},{"location":"hamiltonians.html#Rimu.Hamiltonians.FroehlichPolaron","page":"Hamiltonians","title":"Rimu.Hamiltonians.FroehlichPolaron","text":"FroehlichPolaron(address::OccupationNumberFS{M}; kwargs...) <: AbstractHamiltonian\n\nThe Froehlich polaron Hamiltonian for a 1D lattice with M momentum modes is given by\n\nH = (p_f - p)^2m + ωN - v Σₖ(aₖ^ + aₖ)\n\nwhere p is the total momentum, p_f = Σ_k k aₖ^ aₖ is the momentum operator for the bosons, and k part of the momentum lattice with separation 2πl. N is the number operator for the bosons.\n\nKeyword Arguments\n\np=0.0: the total momentum p.\nv=1.0: the coupling strength v.\nmass=1.0: the particle mass m.\nomega=1.0: the oscillation frequency of the phonons ω.\nl=1.0: the box size in real space l. Provides scale parameter of the momentum   lattice.\nmomentum_cutoff=nothing: the maximum boson momentum allowed for an address.\nmode_cutoff: the maximum number of bosons in each momentum mode. Defaults to the maximum   value supported by the address type OccupationNumberFS.\n\nExamples\n\njulia> fs = OccupationNumberFS(0,0,0)\nOccupationNumberFS{3, UInt8}(0, 0, 0)\n\njulia> ham = FroehlichPolaron(fs; v=0.5)\nFroehlichPolaron(fs\"|0 0 0⟩{8}\"; v=0.5, mass=1.0, omega=1.0, l=1.0, p=0.0, mode_cutoff=255)\n\njulia> dimension(ham)\n16777216\n\njulia> dimension(FroehlichPolaron(fs; v=0.5, mode_cutoff=5))\n216\n\nSee also OccupationNumberFS, dimension, AbstractHamiltonian.\n\n\n\n\n\n","category":"type"},{"location":"hamiltonians.html#Convenience-functions","page":"Hamiltonians","title":"Convenience functions","text":"","category":"section"},{"location":"hamiltonians.html","page":"Hamiltonians","title":"Hamiltonians","text":"rayleigh_quotient\nmomentum\nhubbard_dispersion\ncontinuum_dispersion\nshift_lattice\nshift_lattice_inv","category":"page"},{"location":"hamiltonians.html#Rimu.Hamiltonians.rayleigh_quotient","page":"Hamiltonians","title":"Rimu.Hamiltonians.rayleigh_quotient","text":"rayleigh_quotient(H, v)\n\nReturn the Rayleigh quotient of the linear operator H and the vector v:\n\nfrac v  H  v  vv \n\n\n\n\n\n","category":"function"},{"location":"hamiltonians.html#Rimu.Hamiltonians.momentum","page":"Hamiltonians","title":"Rimu.Hamiltonians.momentum","text":"momentum(ham::AbstractHamiltonian)\n\nMomentum as a linear operator in Fock space. Pass a Hamiltonian ham in order to convey information about the Fock basis. Returns an AbstractHamiltonian that represents the momentum operator.\n\nNote: momentum is currently only defined on HubbardMom1D.\n\nExample\n\njulia> add = BoseFS((1, 0, 2, 1, 2, 1, 1, 3));\n\n\njulia> ham = HubbardMom1D(add; u = 2.0, t = 1.0);\n\n\njulia> mom = momentum(ham);\n\n\njulia> diagonal_element(mom, add) # calculate the momentum of a single configuration\n-1.5707963267948966\n\njulia> v = DVec(add => 10; capacity=1000);\n\n\njulia> rayleigh_quotient(mom, v) # momentum expectation value for state vector `v`\n-1.5707963267948966\n\nPart of the AbstractHamiltonian interface.\n\n\n\n\n\n","category":"function"},{"location":"hamiltonians.html#Rimu.Hamiltonians.hubbard_dispersion","page":"Hamiltonians","title":"Rimu.Hamiltonians.hubbard_dispersion","text":"hubbard_dispersion(t, k)\n\nDispersion relation for HubbardMom1D. Returns -2(Re(t) cos(k) + Im(t) sin(k)).\n\nSee also continuum_dispersion.\n\n\n\n\n\n","category":"function"},{"location":"hamiltonians.html#Rimu.Hamiltonians.continuum_dispersion","page":"Hamiltonians","title":"Rimu.Hamiltonians.continuum_dispersion","text":"continuum_dispersion(t, k)\n\nDispersion relation for HubbardMom1D. Returns Re(t) k^2 - 2 Im(t) k.\n\nSee also hubbard_dispersion.\n\n\n\n\n\n","category":"function"},{"location":"hamiltonians.html#Rimu.Hamiltonians.shift_lattice","page":"Hamiltonians","title":"Rimu.Hamiltonians.shift_lattice","text":"shift_lattice(is)\n\nCircular shift contiguous indices is in interval [M÷2, M÷2) such that set starts with 0, where M=length(is).\n\nInverse operation: shift_lattice_inv. Used in HubbardReal1DEP and HubbardMom1DEP\n\n\n\n\n\n","category":"function"},{"location":"hamiltonians.html#Rimu.Hamiltonians.shift_lattice_inv","page":"Hamiltonians","title":"Rimu.Hamiltonians.shift_lattice_inv","text":"shift_lattice_inv(js)\n\nCircular shift indices starting with 0 into a contiguous set in interval [M÷2, M÷2), where M=length(js).\n\nInverse operation of shift_lattice. Used in HubbardReal1DEP and HubbardMom1DEP\n\n\n\n\n\n","category":"function"},{"location":"hamiltonians.html#Hamiltonian-wrappers","page":"Hamiltonians","title":"Hamiltonian wrappers","text":"","category":"section"},{"location":"hamiltonians.html","page":"Hamiltonians","title":"Hamiltonians","text":"The following Hamiltonians are constructed from an existing Hamiltonian instance and change its behaviour:","category":"page"},{"location":"hamiltonians.html","page":"Hamiltonians","title":"Hamiltonians","text":"GutzwillerSampling\nGuidingVectorSampling\nParitySymmetry\nTimeReversalSymmetry\nStoquastic","category":"page"},{"location":"hamiltonians.html#Rimu.Hamiltonians.GutzwillerSampling","page":"Hamiltonians","title":"Rimu.Hamiltonians.GutzwillerSampling","text":"GutzwillerSampling(::AbstractHamiltonian; g)\n\nWrapper over any AbstractHamiltonian that implements Gutzwiller sampling. In this importance sampling scheme the Hamiltonian is modified as follows\n\ntildeH_ij = H_ij e^-g(H_ii - H_jj) \n\nThis way off-diagonal spawns to higher-energy configurations are discouraged and spawns to lower-energy configurations encouraged for positive g.\n\nConstructor\n\nGutzwillerSampling(::AbstractHamiltonian, g)\nGutzwillerSampling(::AbstractHamiltonian; g)\n\nAfter construction, we can access the underlying Hamiltonian with G.hamiltonian and the g parameter with G.g.\n\nExample\n\njulia> H = HubbardMom1D(BoseFS(1,1,1); u=6.0, t=1.0)\nHubbardMom1D(fs\"|1 1 1⟩\"; u=6.0, t=1.0)\n\njulia> G = GutzwillerSampling(H, g=0.3)\nGutzwillerSampling(HubbardMom1D(fs\"|1 1 1⟩\"; u=6.0, t=1.0); g=0.3)\n\njulia> get_offdiagonal(H, BoseFS(2, 1, 0), 1)\n(BoseFS{3,3}(1, 0, 2), 2.0)\n\njulia> get_offdiagonal(G, BoseFS(2, 1, 0), 1)\n(BoseFS{3,3}(1, 0, 2), 0.8131393194811987)\n\nObservables\n\nTo calculate observables, pass the transformed Hamiltonian G to AllOverlaps with keyword argument transform=G.\n\n\n\n\n\n","category":"type"},{"location":"hamiltonians.html#Rimu.Hamiltonians.GuidingVectorSampling","page":"Hamiltonians","title":"Rimu.Hamiltonians.GuidingVectorSampling","text":"GuidingVectorSampling\n\nWrapper over any AbstractHamiltonian that implements guided vector a.k.a. guided wave function sampling. In this importance sampling scheme the Hamiltonian is modified as follows.\n\ntildeH_ij = v_i H_ij v_j^-1\n\nand where v is the guiding vector. v_i and v_j are also thresholded to avoid dividing by zero (see below).\n\nConstructors\n\nGuidingVectorSampling(::AbstractHamiltonian, vector, eps)\nGuidingVectorSampling(::AbstractHamiltonian; vector, eps)\n\neps is a thresholding parameter used to avoid dividing by zero; all values below eps are set to eps. It is recommended that eps is in the same value range as the guiding vector. The default value is set to eps=norm(v, Inf) * 1e-2\n\nAfter construction, we can access the underlying hamiltonian with G.hamiltonian, the eps parameter with G.eps, and the guiding vector with G.vector.\n\nExample\n\njulia> H = HubbardReal1D(BoseFS(1,1,1); u=6.0, t=1.0);\n\njulia> v = DVec(starting_address(H) => 10; capacity=1);\n\njulia> G = GuidingVectorSampling(H, v, 0.1);\n\njulia> get_offdiagonal(H, starting_address(H), 4)\n(BoseFS{3,3}(2, 0, 1), -1.4142135623730951)\n\njulia> get_offdiagonal(G, starting_address(G), 4)\n(BoseFS{3,3}(2, 0, 1), -0.014142135623730952)\n\nObservables\n\nTo calculate observables, pass the transformed Hamiltonian G to AllOverlaps with keyword argument transform=G.\n\n\n\n\n\n","category":"type"},{"location":"hamiltonians.html#Rimu.Hamiltonians.ParitySymmetry","page":"Hamiltonians","title":"Rimu.Hamiltonians.ParitySymmetry","text":"ParitySymmetry(ham::AbstractHamiltonian{T}; even=true) <: AbstractHamiltonian{T}\n\nImpose even or odd parity on all states and the Hamiltonian ham as controlled by the keyword argument even. Parity symmetry of the Hamiltonian is assumed. For some Hamiltonians, ParitySymmetry reduces the size of the Hilbert space by half.\n\nParitySymmetry performs a unitary transformation, leaving the eigenvalues unchanged and preserving the LOStructure. This is achieved by changing the basis set to states with defined parity. Effectively, a non-even address α is replaced by frac12(α  α) for even and odd parity, respectively, where ᾱ == reverse(α).\n\nNotes\n\nThis modifier currently only works on starting_addresss with an odd number of modes.\nFor odd parity, the starting_address of the underlying Hamiltonian cannot be symmetric.\nIf parity is not a symmetry of the Hamiltonian ham then the result is undefined.\nParitySymmetry works by modifying the offdiagonals iterator.\n\njulia> ham = HubbardReal1D(BoseFS(0,2,1))\nHubbardReal1D(fs\"|0 2 1⟩\"; u=1.0, t=1.0)\n\njulia> size(Matrix(ham))\n(10, 10)\n\njulia> size(Matrix(ParitySymmetry(ham)))\n(6, 6)\n\njulia> size(Matrix(ParitySymmetry(ham; odd=true)))\n(4, 4)\n\njulia> eigvals(Matrix(ham))[1] ≈ eigvals(Matrix(ParitySymmetry(ham)))[1]\ntrue\n\nSee also TimeReversalSymmetry.\n\n\n\n\n\n","category":"type"},{"location":"hamiltonians.html#Rimu.Hamiltonians.TimeReversalSymmetry","page":"Hamiltonians","title":"Rimu.Hamiltonians.TimeReversalSymmetry","text":"TimeReversalSymmetry(ham::AbstractHamiltonian{T}; even=true) <: AbstractHamiltonian{T}\n\nImpose even or odd time reversal on all states and the Hamiltonian ham as controlled by the keyword argument even. If time reversal is a symmetry of the Hamiltonian it will block (reducing Hilbert space dimension) preserving the eigenvalues and LOStructure.\n\nNotes\n\nThis modifier only works two component starting_addresses.\nFor odd time reversal symmetry, the starting_address of the underlying Hamiltonian must not be symmetric.\nIf time reversal is not a symmetry of the Hamiltonian ham then the result is undefined.\nTimeReversalSymmetry works by modifying the offdiagonals iterator.\n\njulia> ham = HubbardMom1D(FermiFS2C((1,0,1),(0,1,1)));\n\njulia> size(Matrix(ham))\n(3, 3)\n\njulia> size(Matrix(TimeReversalSymmetry(ham)))\n(2, 2)\n\njulia> size(Matrix(TimeReversalSymmetry(ham, even=false)))\n(1, 1)\n\njulia> eigvals(Matrix(TimeReversalSymmetry(ham)))[1] ≈ eigvals(Matrix(ham))[1]\ntrue\n\nSee also ParitySymmetry.\n\n\n\n\n\n","category":"type"},{"location":"hamiltonians.html#Rimu.Hamiltonians.Stoquastic","page":"Hamiltonians","title":"Rimu.Hamiltonians.Stoquastic","text":"Stoquastic(ham <: AbstractHamiltonian) <: AbstractHamiltonian\n\nA wrapper for an AbstractHamiltonian that replaces all off-diagonal matrix elements v by -abs(v), thus making the new Hamiltonian stoquastic.\n\nA stoquastic Hamiltonian does not have a Monte Carlo sign problem. For a hermitian ham the smallest eigenvalue of Stoquastic(ham) is ≤ the smallest eigenvalue of ham.\n\n\n\n\n\n","category":"type"},{"location":"hamiltonians.html#Observables","page":"Hamiltonians","title":"Observables","text":"","category":"section"},{"location":"hamiltonians.html","page":"Hamiltonians","title":"Hamiltonians","text":"Rimu.jl offers two other supertypes for operators that are less  restrictive than AbstractHamiltonian.  AbstractObservable and AbstractOperators both can represent a physical observable. Their expectation values can be sampled during a ProjectorMonteCarloProblem simulation by  passing them into a suitable ReplicaStrategy, e.g.  AllOverlaps. Some observables are also AbstractHamiltonians. The full type hierarchy is","category":"page"},{"location":"hamiltonians.html","page":"Hamiltonians","title":"Hamiltonians","text":"AbstractHamiltonian{T} <: AbstractOperator{T} <: AbstractObservable{T}","category":"page"},{"location":"hamiltonians.html","page":"Hamiltonians","title":"Hamiltonians","text":"ParticleNumberOperator\nG2RealCorrelator\nG2RealSpace\nG2MomCorrelator\nSuperfluidCorrelator\nStringCorrelator\nDensityMatrixDiagonal\nSingleParticleExcitation\nTwoParticleExcitation\nReducedDensityMatrix\nMomentum\nAxialAngularMomentumHO","category":"page"},{"location":"hamiltonians.html#Rimu.Hamiltonians.ParticleNumberOperator","page":"Hamiltonians","title":"Rimu.Hamiltonians.ParticleNumberOperator","text":"ParticleNumberOperator() <: AbstractOperator{Float64}\n\nThe number operator in Fock space. This operator is diagonal in the Fock basis and returns the number of particles in the Fock state. It works with any address type that is a subtype of AbstractFockAddress.\n\njulia> p = ExactDiagonalizationProblem(FroehlichPolaron(fs\"|0 0⟩{}\"; mode_cutoff=5, v=3));\n\njulia> gs = solve(p).vectors[1]; # normalised ground state vector\n\njulia> dot(gs, ParticleNumberOperator(), gs) # particle number expectation value\n2.8823297252925917\n\nSee also AbstractHamiltonian.\n\n\n\n\n\n","category":"type"},{"location":"hamiltonians.html#Rimu.Hamiltonians.G2RealCorrelator","page":"Hamiltonians","title":"Rimu.Hamiltonians.G2RealCorrelator","text":"G2RealCorrelator(d::Int) <: AbstractOperator{Float64}\n\nTwo-body operator for density-density correlation between sites separated by d with 0 ≤ d < M.\n\n    hatG^(2)(d) = frac1M sum_i^M hatn_i (hatn_i+d - delta_0d)\n\nAssumes a one-dimensional lattice with periodic boundary conditions where\n\n    hatG^(2)(-M2 leq d  0) = hatG^(2)(d)\n\n    hatG^(2)(M2  d  M) = hatG^(2)(M - d)\n\nand normalisation\n\n    sum_d=0^M-1 langle hatG^(2)(d) rangle = fracN (N-1)M\n\nFor multicomponent basis, calculates correlations between all particles equally, equivalent to stacking all components into a single Fock state.\n\nArguments\n\nd::Integer: distance between sites.\n\nSee also\n\nHubbardReal1D\nG2RealSpace\nG2MomCorrelator\nAbstractOperator\nAllOverlaps\n\n\n\n\n\n","category":"type"},{"location":"hamiltonians.html#Rimu.Hamiltonians.G2RealSpace","page":"Hamiltonians","title":"Rimu.Hamiltonians.G2RealSpace","text":"G2RealSpace(geometry::CubicGrid, σ=1, τ=1; sum_components=false) <: AbstractOperator{SArray}\n\nTwo-body operator for density-density correlation for all Displacements d in the specified geometry.\n\n    hatG^(2)_στ(d) = frac1M _i n_σi (n_τi+d - δ_0dδ_στ)\n\nFor multicomponent addresses, σ and τ control the components involved. Alternatively, sum_components can be set to true, which treats all particles as belonging to the same component.\n\nExamples\n\njulia> geom = CubicGrid(2, 2);\n\njulia> g2 = G2RealSpace(geom)\nG2RealSpace(CubicGrid((2, 2), (true, true)), 1,1)\n\njulia> diagonal_element(g2, BoseFS(2,0,1,1))\n2×2 StaticArraysCore.SMatrix{2, 2, Float64, 4} with indices SOneTo(2)×SOneTo(2):\n 0.5  1.0\n 0.5  1.0\n\njulia> g2_cross = G2RealSpace(geom, 1, 2)\nG2RealSpace(CubicGrid((2, 2), (true, true)), 1,2)\n\njulia> g2_sum = G2RealSpace(geom, sum_components=true)\nG2RealSpace(CubicGrid((2, 2), (true, true)); sum_components=true)\n\njulia> diagonal_element(g2, fs\"|⇅⋅↓↑⟩\")\n2×2 StaticArraysCore.SMatrix{2, 2, Float64, 4} with indices SOneTo(2)×SOneTo(2):\n 0.0  0.0\n 0.0  0.5\n\njulia> diagonal_element(g2_cross, fs\"|⇅⋅↓↑⟩\")\n2×2 StaticArraysCore.SMatrix{2, 2, Float64, 4} with indices SOneTo(2)×SOneTo(2):\n 0.25  0.25\n 0.25  0.25\n\njulia> diagonal_element(g2_sum, fs\"|⇅⋅↓↑⟩\")\n2×2 StaticArraysCore.SMatrix{2, 2, Float64, 4} with indices SOneTo(2)×SOneTo(2):\n 0.5  1.0\n 0.5  1.0\n\nSee also\n\nCubicGrid\nHubbardRealSpace\nG2RealCorrelator\nG2MomCorrelator\nAbstractOperator\nAllOverlaps\n\n\n\n\n\n","category":"type"},{"location":"hamiltonians.html#Rimu.Hamiltonians.G2MomCorrelator","page":"Hamiltonians","title":"Rimu.Hamiltonians.G2MomCorrelator","text":"G2MomCorrelator(d::Int) <: AbstractOperator{ComplexF64}\n\nTwo-body correlation operator representing the density-density correlation at distance d. It returns a Complex value.\n\nCorrelation within a single component:\n\nhatG^(2)(d) = frac1Msum_spqr=1^M e^-id(p-q)2πM a^_s a^_p  a_q a_r δ_s+pq+r\n\nThe diagonal element, where (p-q)=0, is\n\nfrac1Msum_kp=1^M a^_k b^_p  b_p a_k \n\nArguments\n\nd::Integer: the distance between two particles.\n\nSee also\n\nRimu.G2RealCorrelator\nRimu.G2RealSpace\nRimu.AbstractOperator\nRimu.AllOverlaps\n\n\n\n\n\n","category":"type"},{"location":"hamiltonians.html#Rimu.Hamiltonians.SuperfluidCorrelator","page":"Hamiltonians","title":"Rimu.Hamiltonians.SuperfluidCorrelator","text":"SuperfluidCorrelator(d::Int) <: AbstractOperator{Float64}\n\nOperator for extracting superfluid correlation between sites separated by a distance d with 0 ≤ d < M:\n\n    hatC_textSF(d) = frac1M sum_i^M a_i^dagger a_i + d\n\nAssumes a one-dimensional lattice with M sites and periodic boundary conditions. M is also the number of modes in the Fock state address.\n\nUsage\n\nSuperfluid correlations can be extracted from a Monte Carlo calculation by wrapping SuperfluidCorrelator with AllOverlaps and passing into ProjectorMonteCarloProblem with the replica keyword argument. For an example with a similar use of G2RealCorrelator see G2 Correlator Example.\n\nSee also HubbardReal1D, G2RealCorrelator, AbstractOperator, and AllOverlaps.\n\n\n\n\n\n","category":"type"},{"location":"hamiltonians.html#Rimu.Hamiltonians.StringCorrelator","page":"Hamiltonians","title":"Rimu.Hamiltonians.StringCorrelator","text":"StringCorrelator(d::Int; address=nothing, type=nothing) <: AbstractOperator{T}\n\nOperator for extracting string correlation between lattice sites on a one-dimensional Hubbard lattice separated by a distance d with 0 ≤ d < M\n\n    C_textstring(d) = frac1M sum_j^M δ n_j\n                                         (e^i π sum_j  k  j + d δ n_k) δ n_j+d\n\nHere, δ n_j = n_j - n is the boson number deviation from the mean filling number and n = NM is the mean filling number of lattice sites with N particles and M lattice sites (or modes).\n\nAssumes a one-dimensional lattice with periodic boundary conditions. For usage see SuperfluidCorrelator and AllOverlaps.\n\nThe default element type T is ComplexF64. This can be overridden with the type keyword argument. If an address is provided, then T is calculated from the address type. It is set to ComplexF64 for non-integer filling numbers, and to Float64 for integer filling numbers or if d==0.\n\nSee also HubbardReal1D, G2RealCorrelator, SuperfluidCorrelator, AbstractOperator, and AllOverlaps.\n\n\n\n\n\n","category":"type"},{"location":"hamiltonians.html#Rimu.Hamiltonians.DensityMatrixDiagonal","page":"Hamiltonians","title":"Rimu.Hamiltonians.DensityMatrixDiagonal","text":"DensityMatrixDiagonal(mode; component=0) <: AbstractHamiltonian\n\nRepresent a diagonal element of the single-particle density:\n\nhatn_iσ = hat a^_iσ hat a_iσ\n\nwhere i is the mode and σ is the component. If component is zero, the sum over all components is computed.\n\nSee also\n\nsingle_particle_density\nSingleParticleDensity\nSingleParticleExcitation\n\n\n\n\n\n","category":"type"},{"location":"hamiltonians.html#Rimu.Hamiltonians.SingleParticleExcitation","page":"Hamiltonians","title":"Rimu.Hamiltonians.SingleParticleExcitation","text":"SingleParticleExcitation(i, j) <: AbstractOperator\n\nRepresent the ij element of the single-particle reduced density matrix:\n\nρ^(1)_ij = a^_i a_j\n\nwhere i <: Int and j <: Int specify the mode numbers.\n\nSee also\n\nsingle_particle_density\nSingleParticleDensity\nTwoParticleExcitation\n\n\n\n\n\n","category":"type"},{"location":"hamiltonians.html#Rimu.Hamiltonians.TwoParticleExcitation","page":"Hamiltonians","title":"Rimu.Hamiltonians.TwoParticleExcitation","text":"TwoParticleExcitation(i, j, k, l) <: AbstractOperator\n\nRepresent the ij kl element of the two-particle reduced density matrix:\n\nρ^(2)_ij kl =  a^_i a^_j a_l a_k\n\nwhere i, j, k, and l (all <: Int) specify the mode numbers.\n\nSee also\n\nsingle_particle_density\nSingleParticleDensity\nSingleParticleExcitation\n\n\n\n\n\n","category":"type"},{"location":"hamiltonians.html#Rimu.Hamiltonians.ReducedDensityMatrix","page":"Hamiltonians","title":"Rimu.Hamiltonians.ReducedDensityMatrix","text":"ReducedDensityMatrix{T=Float64}(p) <: AbstractObservable{Hermitian{T, Matrix{T}}}\n\nA matrix-valued operator that can be used to calculate the p-particle reduced density matrix. The matrix elements are defined as:\n\nhatρ^(p)_j_1j_1k_1k_p =  prod_i=1^p a^_j_i prod_l=p^1 a_k_l\n\nThe integer indices j_i and k_i represent single particle modes. For efficiency they are chosen to be distinct and ordered:\n\nj_1  j_2  ldots  j_p quad land quad k_1  k_2  ldots  k_p\n\nReducedDensityMatrix can be used to construct the single-particle reduced density matrix (with p == 1) for fermionic and bosonic Fock spaces with address types <: SingleComponentFockAddress. For higher order reduced density matrices with p > 1 only fermionic Fock addresses (FermiFS) are supported due to the ordering of indices.\n\nReducedDensityMatrix can be used with dot or AllOverlaps to calculate the whole matrix in one go.\n\nExamples\n\njulia> dvec_b = PDVec(BoseFS(1,1) => 0.5, BoseFS(2,0) => 0.5)\n2-element PDVec: style = IsDeterministic{Float64}()\n  fs\"|2 0⟩\" => 0.5\n  fs\"|1 1⟩\" => 0.5\n\njulia> Op1 = ReducedDensityMatrix(1)\nReducedDensityMatrix{Float64}(1)\n\njulia> dot(dvec_b, Op1, dvec_b)\n2×2 Hermitian{Float64, Matrix{Float64}}:\n 0.75      0.353553\n 0.353553  0.25\n\njulia> Op2 = ReducedDensityMatrix{Float32}(2)\nReducedDensityMatrix{Float32}(2)\n\njulia> dot(dvec_b, Op2, dvec_b)\nERROR: ArgumentError: ReducedDensityMatrix(p) with `p > 1` requires `FermiFS` addresses\n\njulia> dvec_f = PDVec(FermiFS(1,1,0,0) => 0.5, FermiFS(0,1,1,0) => 0.5)\n2-element PDVec: style = IsDeterministic{Float64}()\n  fs\"|⋅↑↑⋅⟩\" => 0.5\n  fs\"|↑↑⋅⋅⟩\" => 0.5\n\njulia> dot(dvec_f, Op2, dvec_f)\n6×6 Hermitian{Float32, Matrix{Float32}}:\n 0.25  0.0  0.25  0.0  0.0  0.0\n 0.0   0.0  0.0   0.0  0.0  0.0\n 0.25  0.0  0.25  0.0  0.0  0.0\n 0.0   0.0  0.0   0.0  0.0  0.0\n 0.0   0.0  0.0   0.0  0.0  0.0\n 0.0   0.0  0.0   0.0  0.0  0.0\n\nSee also single_particle_density, SingleParticleDensity, SingleParticleExcitation, TwoParticleExcitation.\n\n\n\n\n\n","category":"type"},{"location":"hamiltonians.html#Rimu.Hamiltonians.Momentum","page":"Hamiltonians","title":"Rimu.Hamiltonians.Momentum","text":"Momentum(component=0; fold=true) <: AbstractHamiltonian\n\nThe momentum operator P.\n\nThe component argument controls which component of the address is taken into consideration. A value of 0 sums the contributions of all components. If fold is true, the momentum is folded into the Brillouin zone.\n\njulia> address = BoseFS((1, 0, 2, 1, 2, 1, 1, 3))\nBoseFS{11,8}(1, 0, 2, 1, 2, 1, 1, 3)\n\njulia> v = DVec(address => 10);\n\njulia> rayleigh_quotient(Momentum(), DVec(address => 1))\n-2.0\n\njulia> rayleigh_quotient(Momentum(fold=false), DVec(address => 1))\n14.0\n\n\n\n\n\n","category":"type"},{"location":"hamiltonians.html#Rimu.Hamiltonians.AxialAngularMomentumHO","page":"Hamiltonians","title":"Rimu.Hamiltonians.AxialAngularMomentumHO","text":"AxialAngularMomentumHO(S; z_dim = 3, addr = BoseFS(prod(S))) <: AbstractHamiltonian\n\nAngular momentum operator for application to Cartesian harmonic oscillator basis, see HOCartesianContactInteractions or HOCartesianEnergyConservedPerDim. Represents the projection of angular momentum onto z-axis:\n\nhatL_z = i hbar sum_j=1^N left( b_x b_y^dag - b_y b_x^dag right)\n\nwhere b_x^dag and b_x are raising and lowering (ladder) operators for  a harmonic oscillator in the x dimension, and simlarly for y.\n\nThis is implemented for an N particle Fock space with creation and annihilation operators as\n\nfrac1hbar hatL_z = i sum_n_x=1^M_x sum_n_y=1^M_y\n    left( a_n_x-1n_y+1^dag - a_n_x+1n_y-1^dag right) a_n_x n_y\n\nin units of hbar.\n\nArgument S is a tuple defining the range of Cartesian modes in each dimension and their mapping to Fock space modes in a SingleComponentFockAddress. If S indicates a 3D system the z dimension can be changed by setting z_dim; S should be be isotropic in the remaining x-y plane, i.e. must have S[x_dim] == S[y_dim]. The starting address addr only needs to satisfy num_modes(addr) == prod(S).\n\nExample\n\nCalculate the overlap of two Fock addresses interpreted as harmonic oscillator states in a 2D Cartesian basis\n\njulia> S = (2,2)\n(2, 2)\n\njulia> Lz = AxialAngularMomentumHO(S)\nAxialAngularMomentumHO((2, 2); z_dim = 3, addr = BoseFS{0,4}(0, 0, 0, 0))\n\njulia> v = DVec(BoseFS(prod(S), 2 => 1) => 1.0)\nDVec{BoseFS{1, 4, BitString{4, 1, UInt8}},Float64} with 1 entry, style = IsDeterministic{Float64}()\n  fs\"|0 1 0 0⟩\" => 1.0\n\njulia> w = DVec(BoseFS(prod(S), 3 => 1) => 1.0)\nDVec{BoseFS{1, 4, BitString{4, 1, UInt8}},Float64} with 1 entry, style = IsDeterministic{Float64}()\n  fs\"|0 0 1 0⟩\" => 1.0\n\njulia> dot(w, Lz, v)\n0.0 + 1.0im\n\n\n\n\n\n","category":"type"},{"location":"hamiltonians.html#Geometry","page":"Hamiltonians","title":"Geometry","text":"","category":"section"},{"location":"hamiltonians.html","page":"Hamiltonians","title":"Hamiltonians","text":"Lattices in higher dimensions are defined here and can be passed with the keyword argument geometry to HubbardRealSpace and G2RealSpace.","category":"page"},{"location":"hamiltonians.html","page":"Hamiltonians","title":"Hamiltonians","text":"CubicGrid\nHamiltonians.Directions\nHamiltonians.Displacements\nHamiltonians.neighbor_site\nPeriodicBoundaries\nHardwallBoundaries\nLadderBoundaries","category":"page"},{"location":"hamiltonians.html#Rimu.Hamiltonians.CubicGrid","page":"Hamiltonians","title":"Rimu.Hamiltonians.CubicGrid","text":"CubicGrid(dims::NTuple{D,Int}, fold::NTuple{D,Bool})\n\nRepresents a D-dimensional grid. Used to define a cubic lattice and boundary conditions for some AbstractHamiltonians, e.g. with the keyword argument geometry when constructing a HubbardRealSpace. The type instance can be used to convert between cartesian vector indices (tuples or SVectors) and linear indices (integers). When indexed with vectors, it folds them back into the grid if the out-of-bounds dimension is periodic and 0 otherwise (see example below).\n\ndims controls the size of the grid in each dimension.\nfold controls whether the boundaries in each dimension are periodic (or folded in the case of momentum space).\n\njulia> geo = CubicGrid((2,3), (true,false))\nCubicGrid{2}((2, 3), (true, false))\n\njulia> geo[1]\n(1, 1)\n\njulia> geo[2]\n(2, 1)\n\njulia> geo[3]\n(1, 2)\n\njulia> geo[(1,2)]\n3\n\njulia> geo[(3,2)] # 3 is folded back into 1\n3\n\njulia> geo[(3,3)]\n5\n\njulia> geo[(3,4)] # returns 0 if out of bounds\n0\n\nSee also PeriodicBoundaries, HardwallBoundaries and LadderBoundaries for special-case constructors. See also HubbardRealSpace and G2RealSpace.\n\n\n\n\n\n","category":"type"},{"location":"hamiltonians.html#Rimu.Hamiltonians.Directions","page":"Hamiltonians","title":"Rimu.Hamiltonians.Directions","text":"Directions(D) <: AbstractVector{SVector{D,Int}}\nDirections(geometry::CubicGrid) <: AbstractVector{SVector{D,Int}}\n\nIterate over axis-aligned direction vectors in D dimensions.\n\njulia> Directions(3)\n6-element Directions{3}:\n [1, 0, 0]\n [0, 1, 0]\n [0, 0, 1]\n [-1, 0, 0]\n [0, -1, 0]\n [0, 0, -1]\n\n\nSee also CubicGrid.\n\n\n\n\n\n","category":"type"},{"location":"hamiltonians.html#Rimu.Hamiltonians.Displacements","page":"Hamiltonians","title":"Rimu.Hamiltonians.Displacements","text":"Displacements(geometry::CubicGrid) <: AbstractVector{SVector{D,Int}}\n\nReturn all valid offset vectors in a CubicGrid. If center=true the (0,0) displacement is placed at the centre of the array.\n\njulia> geometry = CubicGrid((3,4));\n\njulia> reshape(Displacements(geometry), (3,4))\n3×4 reshape(::Displacements{2, CubicGrid{2, (3, 4), (true, true)}}, 3, 4) with eltype StaticArraysCore.SVector{2, Int64}:\n [0, 0]  [0, 1]  [0, 2]  [0, 3]\n [1, 0]  [1, 1]  [1, 2]  [1, 3]\n [2, 0]  [2, 1]  [2, 2]  [2, 3]\n\njulia> reshape(Displacements(geometry; center=true), (3,4))\n3×4 reshape(::Displacements{2, CubicGrid{2, (3, 4), (true, true)}}, 3, 4) with eltype StaticArraysCore.SVector{2, Int64}:\n [-1, -1]  [-1, 0]  [-1, 1]  [-1, 2]\n [0, -1]   [0, 0]   [0, 1]   [0, 2]\n [1, -1]   [1, 0]   [1, 1]   [1, 2]\n\n\n\n\n\n\n","category":"type"},{"location":"hamiltonians.html#Rimu.Hamiltonians.neighbor_site","page":"Hamiltonians","title":"Rimu.Hamiltonians.neighbor_site","text":"neighbor_site(geom::CubicGrid, site, i)\n\nFind the i-th neighbor of site in the geometry. If the move is illegal, return 0.\n\nSee also CubicGrid.\n\n\n\n\n\n","category":"function"},{"location":"hamiltonians.html#Rimu.Hamiltonians.PeriodicBoundaries","page":"Hamiltonians","title":"Rimu.Hamiltonians.PeriodicBoundaries","text":"PeriodicBoundaries(dims...) -> CubicGrid\nPeriodicBoundaries(dims) -> CubicGrid\n\nReturn a CubicGrid with all dimensions periodic. Equivalent to CubicGrid(dims).\n\n\n\n\n\n","category":"function"},{"location":"hamiltonians.html#Rimu.Hamiltonians.HardwallBoundaries","page":"Hamiltonians","title":"Rimu.Hamiltonians.HardwallBoundaries","text":"HardwallBoundaries(dims...) -> CubicGrid\nHardwallBoundaries(dims) -> CubicGrid\n\nReturn a CubicGrid with all dimensions non-periodic. Equivalent to CubicGrid(dims, (false, false, ...)).\n\n\n\n\n\n","category":"function"},{"location":"hamiltonians.html#Rimu.Hamiltonians.LadderBoundaries","page":"Hamiltonians","title":"Rimu.Hamiltonians.LadderBoundaries","text":"LadderBoundaries(dims...) -> CubicGrid\nLadderBoundaries(dims) -> CubicGrid\n\nReturn a CubicGrid where the first dimension is dimensions non-periodic and the rest are periodic. Equivalent to CubicGrid(dims, (true, false, ...)).\n\n\n\n\n\n","category":"function"},{"location":"hamiltonians.html#Index","page":"Hamiltonians","title":"Index","text":"","category":"section"},{"location":"hamiltonians.html","page":"Hamiltonians","title":"Hamiltonians","text":"Pages   = [\"hamiltonians.md\"]","category":"page"},{"location":"testing.html#Code-testing","page":"Code testing","title":"Code testing","text":"","category":"section"},{"location":"testing.html","page":"Code testing","title":"Code testing","text":"The script runtest.jl in the test/ folder contains tests of the code in Rimu. To run the test simply run the script from the Julia REPL or run","category":"page"},{"location":"testing.html","page":"Code testing","title":"Code testing","text":"Rimu$ julia test/runtest.jl","category":"page"},{"location":"testing.html","page":"Code testing","title":"Code testing","text":"from the command line.","category":"page"},{"location":"testing.html","page":"Code testing","title":"Code testing","text":"More tests should be added over time to test core functionality of the code. To add new tests, directly edit the file runtest.jl.","category":"page"},{"location":"testing.html#Automated-testing-with-GitHub-Actions","page":"Code testing","title":"Automated testing with GitHub Actions","text":"","category":"section"},{"location":"testing.html","page":"Code testing","title":"Code testing","text":"GitHub Actions are set up to run the test script automatically on the GitHub cloud server every time a new commit to the master branch is pushed to the server. The setup for this to happen is configured in the file actions.yml in the Rimu/.github/workflows folder.","category":"page"},{"location":"testing.html#Testing-of-custom-types-for-use-with-Rimu","page":"Code testing","title":"Testing of custom types for use with Rimu","text":"","category":"section"},{"location":"testing.html","page":"Code testing","title":"Code testing","text":"The module Rimu.InterfaceTests contains a number of functions to test the interfaces of the AbstractHamiltonian type hierarchy. See Interface tests in the section Advanced operator usage and custom Hamiltonians.","category":"page"},{"location":"exactdiagonalization.html#Exact-Diagonalization","page":"Exact Diagonalization","title":"Exact Diagonalization","text":"","category":"section"},{"location":"exactdiagonalization.html","page":"Exact Diagonalization","title":"Exact Diagonalization","text":"The main functionality of Rimu for exact diagonalization is contained in the module ExactDiagonalization.","category":"page"},{"location":"exactdiagonalization.html","page":"Exact Diagonalization","title":"Exact Diagonalization","text":"ExactDiagonalization","category":"page"},{"location":"exactdiagonalization.html#Rimu.ExactDiagonalization","page":"Exact Diagonalization","title":"Rimu.ExactDiagonalization","text":"The module Rimu.ExactDiagonalization provides a framework for exact diagonalization of quantum many-body systems defined by an AbstractHamiltonian type.\n\nThe main usage is through defining an ExactDiagonalizationProblem and solving it with the solve function. The module provides a unified interface for accessing different solver algorithms, which make use of solvers provided by external packages.\n\nExports\n\nExactDiagonalizationProblem\nBasisSetRepresentation\nbuild_basis\nKrylovKitSolver\nLinearAlgebraSolver\nArpackSolver\nLOBPCGSolver\n\n\n\n\n\n","category":"module"},{"location":"exactdiagonalization.html#ExactDiagonalizationProblem","page":"Exact Diagonalization","title":"ExactDiagonalizationProblem","text":"","category":"section"},{"location":"exactdiagonalization.html","page":"Exact Diagonalization","title":"Exact Diagonalization","text":"ExactDiagonalizationProblem\nsolve(::ExactDiagonalizationProblem)\ninit(::ExactDiagonalizationProblem)","category":"page"},{"location":"exactdiagonalization.html#Rimu.ExactDiagonalization.ExactDiagonalizationProblem","page":"Exact Diagonalization","title":"Rimu.ExactDiagonalization.ExactDiagonalizationProblem","text":"ExactDiagonalizationProblem(hamiltonian::AbstractHamiltonian, [v0]; kwargs...)\n\nDefines an exact diagonalization problem with an AbstractHamiltonian hamiltonian. Optionally, a starting vector of type AbstractDVec, or a single address or a collection of addresses can be passed as v0.\n\nExactDiagonalizationProblems can be solved with solve.\n\nKeyword arguments\n\nalgorithm=LinearAlgebraSolver(): The algorithm to use for solving the problem. The   algorithm can also be specified as the second positional argument in the init   function.\nOptional keyword arguments will be passed on to the init and solve functions.\n\nAlgorithms\n\nLinearAlgebraSolver(): An algorithm for solving the problem using the   dense-matrix eigensolver from the LinearAlgebra standard library (eventually using   LAPACK). Only suitable for small matrices.\nKrylovKitSolver(matrix_free=true): An algorithm for finding a few eigenvalues   and vectors. With matrix_free=true the problem is solved without instatiating a   matrix. This is suitable for large dimensions. With matrix_free=false the problem is   solved after instantiating a sparse matrix. This is faster if sufficient memory is   available. Requires using KrylovKit.\nArpackSolver(): An algorithm for solving the problem after instantiating a   sparse matrix and using the Arpack Fortran library. Requires using Arpack.\nLOBPCGSolver(): An algorithm for solving the problem after instantiating a   sparse matrix using the LOBPCG method. Requires using IterativeSolvers.\n\nKeyword arguments for matrix-based algorithms (also accepted by init)\n\nSee BasisSetRepresentation for more information.\n\nsizelim: The maximum size of the basis set representation. The default is 10^6 for   sparse matrices and 10^5 for dense matrices.\ncutoff: A cutoff value for the basis set representation.\nfilter: A filter function for the basis set representation.\nmax_depth = Inf: Limit the depth when building the matrix.\nminimum_size = Inf: Stop building the matrix after this size is reached.\nnnzs = 0: A hint for the number of non-zero elements in the basis set representation. Setting a non-zero value can speed up the computation.\ncol_hint = 0: A hint for the number of columns in the basis set representation.\nsort = false: Whether to sort the basis set representation.\n\nKeyword arguments for iterative algorithms (also accepted by solve)\n\nverbose = false: Whether to print additional information.\nabstol = nothing: The absolute tolerance for the solver. If nothing, the solver   chooses a default value.\nhowmany = 1: The minimum number of eigenvalues to compute.\nwhich = :SR: Whether to compute the largest or smallest eigenvalues.\nmaxiters = nothing: The maximum number of iterations for the solver. If nothing, the   solver chooses a default value.\n\nSolving an ExactDiagonalizationProblem\n\nThe solve function can be called directly on an ExactDiagonalizationProblem to solve it. Alternatively, the init function can be used to initialize a solver, which can then be solved with solve. The solve function returns a result type with the eigenvalues, eigenvectors, and convergence information.\n\nResult type\n\nThe result type for the solve function is determined by the algorithm used. It has the following fields:\n\nvalues::Vector: The eigenvalues.\nvectors::Vector{<:AbstractDVec}: The eigenvectors.\nsuccess::Bool: A boolean flag indicating whether the solver was successful.\ninfo: Convergence information.\nalgorithm: The algorithm used for the computation.\nproblem: The ExactDiagonalizationProblem that was solved.\nAdditional fields may be present depending on the algorithm used.\n\nIterating the result type will yield the eigenvalues, eigenvectors, and a boolean flag success in that order.\n\nExamples\n\njulia> p = ExactDiagonalizationProblem(HubbardReal1D(BoseFS(1,1,1)))\nExactDiagonalizationProblem(\n  HubbardReal1D(fs\"|1 1 1⟩\"; u=1.0, t=1.0),\n  nothing;\n  NamedTuple()...\n)\n\njulia> result = solve(p) # convert to dense matrix and solve with LinearAlgebra.eigen\nEDResult for algorithm LinearAlgebraSolver() with 10 eigenvalue(s),\n  values = [-5.09593, -1.51882, -1.51882, 1.55611, 1.6093, 1.6093, 4.0, 4.53982, 4.90952, 4.90952],\n  and vectors of length 10.\n  Convergence info: \"Dense matrix eigensolver solution from `LinearAlgebra.eigen`\", with howmany = 10 eigenvalues requested.\n  success = true.\n\njulia> using KrylovKit # an external package has to be installed and loaded\n\njulia> s = init(p; algorithm = KrylovKitSolver(true)) # solve without building a matrix\nKrylovKitDirectEDSolver\n with algorithm KrylovKitSolver(matrix_free = true,) for hamiltonian = HubbardReal1D(fs\"|1 1 1⟩\"; u=1.0, t=1.0),\n  v0 = 1-element PDVec: style = IsDeterministic{Float64}()\n  fs\"|1 1 1⟩\" => 1.0,\n  kwargs = NamedTuple()\n)\n\njulia> values, vectors, success = solve(s);\n\njulia> result.values[1] ≈ values[1]\ntrue\n\nSee also solve(::ExactDiagonalizationProblem), init(::ExactDiagonalizationProblem), KrylovKitSolver, ArpackSolver, LinearAlgebraSolver.\n\nnote: Note\nUsing the KrylovKitSolver() algorithms requires the KrylovKit.jl package. The package can be loaded with using KrylovKit. Using the ArpackSolver() algorithm requires the Arpack.jl package. The package can be loaded with using Arpack. Using the LOBPCGSolver() algorithm requires the IterativeSolvers.jl package. The package can be loaded with using IterativeSolvers.\n\n\n\n\n\n","category":"type"},{"location":"exactdiagonalization.html#CommonSolve.solve-Tuple{ExactDiagonalizationProblem}","page":"Exact Diagonalization","title":"CommonSolve.solve","text":"solve(p::ExactDiagonalizationProblem, [algorithm]; kwargs...)\n\nSolve an ExactDiagonalizationProblem p directly. Optionally specify an algorithm. Returns a result type with the eigenvalues, eigenvectors, and convergence information.\n\nFor a description of the keyword arguments, see the documentation for ExactDiagonalizationProblem.\n\nSee also solve(::ProjectorMonteCarloProblem).\n\n\n\n\n\n","category":"method"},{"location":"exactdiagonalization.html#CommonSolve.init-Tuple{ExactDiagonalizationProblem}","page":"Exact Diagonalization","title":"CommonSolve.init","text":"init(p::ExactDiagonalizationProblem, [algorithm]; kwargs...)\n\nInitialize a solver for an ExactDiagonalizationProblem p with an optional algorithm. Returns a solver instance that can be solved with solve.\n\nFor a description of the keyword arguments, see the documentation for ExactDiagonalizationProblem.\n\n\n\n\n\n","category":"method"},{"location":"exactdiagonalization.html#Solver-algorithms","page":"Exact Diagonalization","title":"Solver algorithms","text":"","category":"section"},{"location":"exactdiagonalization.html","page":"Exact Diagonalization","title":"Exact Diagonalization","text":"KrylovKitSolver\nLinearAlgebraSolver\nArpackSolver\nLOBPCGSolver","category":"page"},{"location":"exactdiagonalization.html#Rimu.ExactDiagonalization.KrylovKitSolver","page":"Exact Diagonalization","title":"Rimu.ExactDiagonalization.KrylovKitSolver","text":"KrylovKitSolver(matrix_free::Bool; kwargs...)\nKrylovKitSolver(; matrix_free = false, kwargs...)\n\nAlgorithm for solving a large ExactDiagonalizationProblem to find a few eigenvalues and vectors using the KrylovKit.jl package. The Lanczos method is used for hermitian matrices, and the Arnoldi method is used for non-hermitian matrices.\n\nArguments\n\nmatrix_free = false: Whether to use a matrix-free algorithm. If false, a sparse matrix   will be instantiated. This is typically faster and recommended for small matrices,   but requires more memory. If true, the matrix is not instantiated, which is useful for   large matrices that would not fit into memory. The calculation will parallelise using   threading and MPI if available by making use of PDVec.\nkwargs: Additional keyword arguments are passed on to the function   KrylovKit.eigsolve().\n\nSee also ExactDiagonalizationProblem, solve.\n\nnote: Note\nRequires the KrylovKit.jl package to be loaded with using KrylovKit.\n\n\n\n\n\n","category":"type"},{"location":"exactdiagonalization.html#Rimu.ExactDiagonalization.LinearAlgebraSolver","page":"Exact Diagonalization","title":"Rimu.ExactDiagonalization.LinearAlgebraSolver","text":"LinearAlgebraSolver(; kwargs...)\n\nAlgorithm for solving an ExactDiagonalizationProblem using the dense-matrix eigensolver from the LinearAlgebra standard library. This is only suitable for small matrices.\n\nThe kwargs are passed on to function LinearAlgebra.eigen.\n\nKeyword arguments\n\npermute = true: Whether to permute the matrix before diagonalization.\nscale = true: Whether to scale the matrix before diagonalization.\nsortby: The sorting order for the eigenvalues.\n\nSee also ExactDiagonalizationProblem, solve.\n\n\n\n\n\n","category":"type"},{"location":"exactdiagonalization.html#Rimu.ExactDiagonalization.ArpackSolver","page":"Exact Diagonalization","title":"Rimu.ExactDiagonalization.ArpackSolver","text":"ArpackSolver(; kwargs...)\n\nAlgorithm for solving an ExactDiagonalizationProblem after instantiating a sparse matrix. It uses the Lanzcos method for hermitian problems, and the Arnoldi method for non-hermitian problems, using the Arpack Fortran library. This is faster than KrylovKitSolver(; matrix_free=true), but it requires more memory and will only be useful if the matrix fits into memory.\n\nThe kwargs are passed on to the function Arpack.eigs().\n\nSee also ExactDiagonalizationProblem, solve.\n\nnote: Note\nRequires the Arpack.jl package to be loaded with using Arpack.\n\n\n\n\n\n","category":"type"},{"location":"exactdiagonalization.html#Rimu.ExactDiagonalization.LOBPCGSolver","page":"Exact Diagonalization","title":"Rimu.ExactDiagonalization.LOBPCGSolver","text":"LOBPCGSolver(; kwargs...)\n\nThe Locally Optimal Block Preconditioned Conjugate Gradient Method (LOBPCG). Algorithm for solving an ExactDiagonalizationProblem after instantiating a sparse matrix.\n\nLOBPCG is not suitable for non-hermitian eigenvalue problems.\n\nThe kwargs are passed on to the function IterativeSolvers.lobpcg().\n\nSee also ExactDiagonalizationProblem, solve.\n\nnote: Note\nRequires the IterativeSolvers.jl package to be loaded with using IterativeSolvers.\n\n\n\n\n\n","category":"type"},{"location":"exactdiagonalization.html#Converting-a-Hamiltonian-in-to-a-matrix","page":"Exact Diagonalization","title":"Converting a Hamiltonian in to a matrix","text":"","category":"section"},{"location":"exactdiagonalization.html","page":"Exact Diagonalization","title":"Exact Diagonalization","text":"BasisSetRepresentation\nbuild_basis\nMatrix\nsparse","category":"page"},{"location":"exactdiagonalization.html#Rimu.ExactDiagonalization.BasisSetRepresentation","page":"Exact Diagonalization","title":"Rimu.ExactDiagonalization.BasisSetRepresentation","text":"BasisSetRepresentation(\n    hamiltonian::AbstractHamiltonian, addr=starting_address(hamiltonian);\n    sizelim=10^7, cutoff, filter, max_depth, minimum_size, sort=false, kwargs...\n)\nBasisSetRepresentation(hamiltonian::AbstractHamiltonian, addresses::AbstractVector; kwargs...)\n\nEagerly construct the basis set representation of the operator hamiltonian with all addresses reachable from addr. Instead of a single address, a vector of addresses can be passed.\n\nAn ArgumentError is thrown if dimension(hamiltonian) > sizelim in order to prevent memory overflow. Set sizelim = Inf in order to disable this behaviour.\n\nProviding the number nnzs of expected calculated matrix elements and col_hint for the estimated number of nonzero off-diagonal matrix elements in each matrix column may improve performance.\n\nProviding an energy cutoff will skip the columns and rows with diagonal elements greater than cutoff. Alternatively, an arbitrary filter function can be used instead. Addresses passed as arguments are not filtered. To generate the matrix truncated to the subspace spanned by the addresses, use filter = Returns(false).\n\nProviding a max_depth will limit the size of the matrix and basis by only visiting addresses that are connected to the starting_address through max_depth hops through the Hamiltonian. Similarly, providing minimum_size will stop the bulding process after the basis reaches a length of at least minimum_size.\n\nSetting sort to true will sort the matrix rows and columns. This is useful when the order of the columns matters, e.g. when comparing matrices. Any additional keyword arguments are passed on to Base.sortperm.\n\nwarning: Warning\nThe order of the returned basis and matrix rows and columns is arbitrary and\nnon-deterministic. Use `sort=true` if the ordering matters.\n\nFields\n\nsparse_matrix: sparse matrix representing hamiltonian in the basis basis\nbasis: vector of addresses\nhamiltonian: the Hamiltonian hamiltonian\n\nExample\n\njulia> hamiltonian = HubbardReal1D(BoseFS(1,0,0));\n\njulia> bsr = BasisSetRepresentation(hamiltonian)\nBasisSetRepresentation(HubbardReal1D(fs\"|1 0 0⟩\"; u=1.0, t=1.0)) with dimension 3 and 6 stored entries:3×3 SparseArrays.SparseMatrixCSC{Float64, Int32} with 6 stored entries:\n   ⋅   -1.0  -1.0\n -1.0    ⋅   -1.0\n -1.0  -1.0    ⋅\n\njulia> BasisSetRepresentation(hamiltonian, bsr.basis[1:2]; filter = Returns(false)) # passing addresses and truncating\nBasisSetRepresentation(HubbardReal1D(fs\"|1 0 0⟩\"; u=1.0, t=1.0)) with dimension 2 and 2 stored entries:2×2 SparseArrays.SparseMatrixCSC{Float64, Int32} with 2 stored entries:\n   ⋅   -1.0\n -1.0    ⋅\n\njulia> using LinearAlgebra; round.(eigvals(Matrix(bsr)); digits = 4) # eigenvalues\n3-element Vector{Float64}:\n -2.0\n  1.0\n  1.0\n\njulia> ev = eigvecs(Matrix(bsr))[:,1]; ev = ev .* sign(ev[1]) # ground state eigenvector\n3-element Vector{Float64}:\n 0.5773502691896257\n 0.5773502691896255\n 0.5773502691896257\n\njulia> dv = DVec(zip(bsr.basis, ev)) # ground state as DVec\nDVec{BoseFS{1, 3, BitString{3, 1, UInt8}},Float64} with 3 entries, style = IsDeterministic{Float64}()\n  fs\"|0 0 1⟩\" => 0.57735\n  fs\"|0 1 0⟩\" => 0.57735\n  fs\"|1 0 0⟩\" => 0.57735\n\nHas methods for dimension, sparse, Matrix, starting_address.\n\nPart of the AbstractHamiltonian interface. See also build_basis.\n\n\n\n\n\n","category":"type"},{"location":"exactdiagonalization.html#Rimu.ExactDiagonalization.build_basis","page":"Exact Diagonalization","title":"Rimu.ExactDiagonalization.build_basis","text":"build_basis(\n    ham, address=starting_address(ham);\n    cutoff, filter, sizelim, sort=false, kwargs...\n) -> basis\nbuild_basis(ham, addresses::AbstractVector; kwargs...)\n\nGet all basis element of a linear operator ham that are reachable (via non-zero matrix elements) from the address address, returned as a vector. Instead of a single address, a vector of addresses can be passed. Does not return the matrix, for that purpose use BasisSetRepresentation.\n\nProviding an energy cutoff will skip addresses with diagonal elements greater than cutoff. Alternatively, an arbitrary filter function can be used instead. Addresses passed as arguments are not filtered.\n\nProviding a max_depth will limit the size of the basis by only visiting addresses that are connected to the starting_address through max_depth hops through the Hamiltonian. Similarly, providing minimum_size will stop the bulding process after the basis reaches a length of at least minimum_size.\n\nA maximum basis size sizelim can be set which will throw an error if the expected dimension of ham is larger than sizelim. This may be useful when memory may be a concern. These options are disabled by default.\n\nwarning: Warning\nThe order the basis is returned in is arbitrary and non-deterministic. Use\n`sort=true` if the ordering matters.\n\n\n\n\n\nbuild_basis(addr::AbstractFockAddress)\nbuild_basis(::Type{<:AbstractFockAddress}) -> basis\n\nReturn all possible Fock states of a given type as a vector. This method is much faster than build_basis(::AbstractHamiltonian, ...), but does not take matrix blocking into account. This version of build_basis accepts no additional arguments.\n\nAll address types except OccupationNumberFS are supported.\n\nReturns a sorted vector of length equal to the dimension of addr.\n\nSee also AbstractFockAddress.\n\n\n\n\n\n","category":"function"},{"location":"exactdiagonalization.html#Base.Matrix","page":"Exact Diagonalization","title":"Base.Matrix","text":"Matrix(\n    hamiltonian::AbstractHamiltonian, addr=starting_address(hamiltonian);\n    sizelim=10^4, kwargs...\n)\nMatrix(bsr::BasisSetRepresentation)\n\nReturn a dense matrix representation of hamiltonian or bsr. kwargs are passed to BasisSetRepresentation.\n\nSee BasisSetRepresentation.\n\n\n\n\n\n","category":"type"},{"location":"exactdiagonalization.html#SparseArrays.sparse","page":"Exact Diagonalization","title":"SparseArrays.sparse","text":"sparse(hamiltonian::AbstractHamiltonian, addr=starting_address(hamiltonian); kwargs...)\nsparse(bsr::BasisSetRepresentation)\n\nReturn a sparse matrix representation of hamiltonian or bsr. kwargs are passed to BasisSetRepresentation.\n\nSee BasisSetRepresentation.\n\n\n\n\n\n","category":"function"},{"location":"exactdiagonalization.html#Deprecated","page":"Exact Diagonalization","title":"Deprecated","text":"","category":"section"},{"location":"exactdiagonalization.html","page":"Exact Diagonalization","title":"Exact Diagonalization","text":"BasisSetRep","category":"page"},{"location":"exactdiagonalization.html#Rimu.ExactDiagonalization.BasisSetRep","page":"Exact Diagonalization","title":"Rimu.ExactDiagonalization.BasisSetRep","text":"BasisSetRep(args...; kwargs...)\n\nBasisSetRep is deprecated. Use BasisSetRepresentation instead.\n\n\n\n\n\n","category":"function"},{"location":"documentation.html#Documentation-generation","page":"Documentation generation","title":"Documentation generation","text":"","category":"section"},{"location":"documentation.html","page":"Documentation generation","title":"Documentation generation","text":"We are using Documenter.jl to generate the documentation web site based on markdown files stored in docs/src. Please help keeping the documentation up-to-date by editing the markdown files! For instructions on how to write appropriate documentation please refer to the relevant chapter in the Julia documentation and the Documenter.jl documentation.","category":"page"},{"location":"documentation.html#Generating-the-documentation-web-site","page":"Documentation generation","title":"Generating the documentation web site","text":"","category":"section"},{"location":"documentation.html","page":"Documentation generation","title":"Documentation generation","text":"The documentation pages can be generated by running the build script by typing","category":"page"},{"location":"documentation.html","page":"Documentation generation","title":"Documentation generation","text":"Rimu$ julia --project=docs docs/make.jl","category":"page"},{"location":"documentation.html","page":"Documentation generation","title":"Documentation generation","text":"on the shell prompt from the Rimu/ folder. A complete image of the static documentation web site will be generated in the folder docs/build/. It can be viewed locally by pointing a web browser to file docs/build/index.html, or by deploying it to the GitHub pages web server.","category":"page"},{"location":"documentation.html#Automatic-documentation-generation-and-deployment","page":"Documentation generation","title":"Automatic documentation generation and deployment","text":"","category":"section"},{"location":"documentation.html","page":"Documentation generation","title":"Documentation generation","text":"Our documentation is hosted on GitHub pages. The documentation web site can be built and deployed automatically with GitHub Actions. This needs to be set up with an appropriate script in the file .github/workflows/docs.yml, where triggers for this to happen can be defined. In the current set up, a new documentation web site is generated and deployed whenever someone pushes to the develop branch on the GitHub server. The updated documentation can then be accessed here.","category":"page"},{"location":"documentation.html","page":"Documentation generation","title":"Documentation generation","text":"Previews for pull-requests can be accessed by replacing 101 in the following link with the PR number: https://RimuQMC.github.io/Rimu.jl/previews/PR101/","category":"page"},{"location":"documentation.html#Example-scripts","page":"Documentation generation","title":"Example scripts","text":"","category":"section"},{"location":"documentation.html","page":"Documentation generation","title":"Documentation generation","text":"Examples should be added to the scripts folder, in the form of .jl files suitable for parsing by Literate. The process of generating documentation is automated in the docs/make.jl file and assumes that the following line is at (or near) the top of the script:","category":"page"},{"location":"documentation.html","page":"Documentation generation","title":"Documentation generation","text":"# # Example N: Title","category":"page"},{"location":"documentation.html","page":"Documentation generation","title":"Documentation generation","text":"where the number N and Title will be extracted automatically.","category":"page"},{"location":"documentation.html","page":"Documentation generation","title":"Documentation generation","text":"Tests for the results and output of specific scripts should be added at the end of each example. The code to run the test should be hidden from the final generated document by appending \"#hide\" to each line of testing code. For example,","category":"page"},{"location":"documentation.html","page":"Documentation generation","title":"Documentation generation","text":"using Test                          #hide\n@test isfile(\"result.out\")          #hide\n@test result == expected_result     #hide","category":"page"},{"location":"addresses.html#Module-BitStringAddresses","page":"BitString addresses","title":"Module BitStringAddresses","text":"","category":"section"},{"location":"addresses.html","page":"BitString addresses","title":"BitString addresses","text":"This module contains the implementations of BitString and various Fock addresses. The addresses serve as a basis for a Hamiltonian.","category":"page"},{"location":"addresses.html","page":"BitString addresses","title":"BitString addresses","text":"While there are not restrictions on the type of address a Hamiltonian uses, Rimu provides implementations for Bosonic, Fermionic, and mixed Fock States.","category":"page"},{"location":"addresses.html","page":"BitString addresses","title":"BitString addresses","text":"When implementing a new address type, care must be taken to make them space-efficient and stack-allocated - avoid using (heap-allocated) arrays to represent your addresses at all costs!","category":"page"},{"location":"addresses.html#Fock-addresses","page":"BitString addresses","title":"Fock addresses","text":"","category":"section"},{"location":"addresses.html","page":"BitString addresses","title":"BitString addresses","text":"Rimu provides a variety of address implementations that should make it straightforward to implement efficient Hamiltonians. Examples are:","category":"page"},{"location":"addresses.html","page":"BitString addresses","title":"BitString addresses","text":"BoseFS Single-component bosonic Fock state with fixed particle and mode number.\nFermiFS Single-component fermionic Fock state with fixed particle and mode number.\nCompositeFS Multi-component Fock state composed of the above types.\nOccupationNumberFS Single-component bosonic Fock state with a fixed number of modes. The number of particles is not part of the type and can be changed by operators.","category":"page"},{"location":"addresses.html#Fock-address-API","page":"BitString addresses","title":"Fock address API","text":"","category":"section"},{"location":"addresses.html","page":"BitString addresses","title":"BitString addresses","text":"Modules = [BitStringAddresses]\nPages = [\"fockaddress.jl\",\"bosefs.jl\",\"fermifs.jl\",\"multicomponent.jl\",\"occupationnumberfs.jl\"]\nPrivate = false","category":"page"},{"location":"addresses.html#Rimu.BitStringAddresses.AbstractFockAddress","page":"BitString addresses","title":"Rimu.BitStringAddresses.AbstractFockAddress","text":"AbstractFockAddress{N,M}\n\nAbstract type representing a Fock state with N particles and M modes.\n\nSee also SingleComponentFockAddress, CompositeFS, BoseFS, FermiFS.\n\n\n\n\n\n","category":"type"},{"location":"addresses.html#Rimu.BitStringAddresses.BoseFSIndex","page":"BitString addresses","title":"Rimu.BitStringAddresses.BoseFSIndex","text":"BoseFSIndex\n\nStruct used for indexing and performing excitations on a BoseFS.\n\nFields:\n\noccnum: the occupation number.\nmode: the index of the mode.\noffset: the position of the mode in the address. This is the bit offset of the mode when\n\nthe address is represented by a bitstring, and the position in the list when it is  represented by SortedParticleList.\n\n\n\n\n\n","category":"type"},{"location":"addresses.html#Rimu.BitStringAddresses.FermiFSIndex","page":"BitString addresses","title":"Rimu.BitStringAddresses.FermiFSIndex","text":"FermiFSIndex\n\nStruct used for indexing and performing excitations on a FermiFS.\n\nFields:\n\noccnum: the occupation number.\nmode: the index of the mode.\noffset: the position of the mode in the address. This is mode - 1 when the address is represented by a bitstring, and the position in the list when using SortedParticleList.\n\n\n\n\n\n","category":"type"},{"location":"addresses.html#Rimu.BitStringAddresses.OccupiedModeMap","page":"BitString addresses","title":"Rimu.BitStringAddresses.OccupiedModeMap","text":"OccupiedModeMap(addr) <: AbstractVector\n\nGet a map of occupied modes in address as an AbstractVector of indices compatible with excitation - BoseFSIndex or FermiFSIndex.\n\nOccupiedModeMap(addr)[i] contains the index for the i-th occupied mode. This is useful because repeatedly looking for occupied modes with find_occupied_mode can be time-consuming. OccupiedModeMap(addr) is an eager version of the iterator returned by occupied_modes. It is similar to onr but contains more information.\n\nExample\n\njulia> b = BoseFS(10, 0, 0, 0, 2, 0, 1)\nBoseFS{13,7}(10, 0, 0, 0, 2, 0, 1)\n\njulia> mb = OccupiedModeMap(b)\n3-element OccupiedModeMap{7, BoseFSIndex}:\n BoseFSIndex(occnum=10, mode=1, offset=0)\n BoseFSIndex(occnum=2, mode=5, offset=14)\n BoseFSIndex(occnum=1, mode=7, offset=18)\n\njulia> f = FermiFS(1,1,1,1,0,0,1,0,0)\nFermiFS{5,9}(1, 1, 1, 1, 0, 0, 1, 0, 0)\n\njulia> mf = OccupiedModeMap(f)\n5-element OccupiedModeMap{5, FermiFSIndex}:\n FermiFSIndex(occnum=1, mode=1, offset=0)\n FermiFSIndex(occnum=1, mode=2, offset=1)\n FermiFSIndex(occnum=1, mode=3, offset=2)\n FermiFSIndex(occnum=1, mode=4, offset=3)\n FermiFSIndex(occnum=1, mode=7, offset=6)\n\njulia> mf == collect(occupied_modes(f))\ntrue\n\njulia> dot(mf, mb)\n11\n\njulia> dot(mf, 1:20)\n17\n\nSee also dot, SingleComponentFockAddress.\n\n\n\n\n\n","category":"type"},{"location":"addresses.html#Rimu.BitStringAddresses.OccupiedPairsMap","page":"BitString addresses","title":"Rimu.BitStringAddresses.OccupiedPairsMap","text":"OccupiedPairsMap(addr::SingleComponentFockAddress) <: AbstractVector\n\nGet a map of all distinct pairs of indices in addr. Pairs involving multiply-occupied modes are counted once, (including self-pairing). This is useful for cases where identifying pairs of particles for eg. interactions is not well-defined or efficient to do on the fly. This is an eager iterator whose elements are a tuple of particle indices that can be given to excitation\n\nExample\n\njulia> addr = BoseFS(10, 0, 0, 0, 2, 0, 1)\nBoseFS{13,7}(10, 0, 0, 0, 2, 0, 1)\n\njulia> pairs = OccupiedPairsMap(addr)\n5-element OccupiedPairsMap{78, Tuple{BoseFSIndex, BoseFSIndex}}:\n (BoseFSIndex(occnum=10, mode=1, offset=0), BoseFSIndex(occnum=10, mode=1, offset=0))\n (BoseFSIndex(occnum=2, mode=5, offset=14), BoseFSIndex(occnum=2, mode=5, offset=14))\n (BoseFSIndex(occnum=2, mode=5, offset=14), BoseFSIndex(occnum=10, mode=1, offset=0))\n (BoseFSIndex(occnum=1, mode=7, offset=18), BoseFSIndex(occnum=10, mode=1, offset=0))\n (BoseFSIndex(occnum=1, mode=7, offset=18), BoseFSIndex(occnum=2, mode=5, offset=14))\n\njulia> excitation(addr, pairs[2], pairs[4])\n(BoseFS{13,7}(9, 0, 0, 0, 4, 0, 0), 10.954451150103322)\n\nSee also OccupiedModeMap.\n\n\n\n\n\n","category":"type"},{"location":"addresses.html#Rimu.BitStringAddresses.SingleComponentFockAddress","page":"BitString addresses","title":"Rimu.BitStringAddresses.SingleComponentFockAddress","text":"SingleComponentFockAddress{N,M} <: AbstractFockAddress{N,M}\n\nA type representing a single component Fock state with N particles and M modes.\n\nImplemented subtypes: BoseFS, FermiFS.\n\nSupported functionality\n\nfind_mode\nfind_occupied_mode\nnum_occupied_modes\noccupied_modes: Lazy iterator.\nOccupiedModeMap: AbstractVector with eager construction.\nexcitation: Create a new address.\nBoseFSIndex and FermiFSIndex for indexing.\n\nSee also CompositeFS, AbstractFockAddress.\n\n\n\n\n\n","category":"type"},{"location":"addresses.html#Rimu.BitStringAddresses.excitation","page":"BitString addresses","title":"Rimu.BitStringAddresses.excitation","text":"excitation(addr::SingleComponentFockAddress, creations::NTuple, destructions::NTuple)\n\nGenerate an excitation on address addr by applying creations and destructions, which are tuples of the appropriate address indices (i.e. BoseFSIndex for bosons, or FermiFSIndex for fermions).\n\na^_c_1 a^_c_2 ldots a_d_1 a_d_2 ldots mathrmaddrrangle to\nαmathrmnaddrrangle\n\nReturns the new address naddr and the factor α. The value of α is given by the square root of the product of mode occupations before destruction and after creation. If the excitation is illegal, returns an arbitrary address and the value 0.0.\n\nExample\n\njulia> f = FermiFS(1,1,0,0,1,1,1,1)\nFermiFS{6,8}(1, 1, 0, 0, 1, 1, 1, 1)\n\njulia> i, j, k, l = find_mode(f, (3,4,2,5))\n(FermiFSIndex(occnum=0, mode=3, offset=2), FermiFSIndex(occnum=0, mode=4, offset=3), FermiFSIndex(occnum=1, mode=2, offset=1), FermiFSIndex(occnum=1, mode=5, offset=4))\n\njulia> excitation(f, (i,j), (k,l))\n(FermiFS{6,8}(1, 0, 1, 1, 0, 1, 1, 1), -1.0)\n\nSee SingleComponentFockAddress.\n\n\n\n\n\n","category":"function"},{"location":"addresses.html#Rimu.BitStringAddresses.find_mode","page":"BitString addresses","title":"Rimu.BitStringAddresses.find_mode","text":"find_mode(::SingleComponentFockAddress, i)\n\nFind the i-th mode in address. Returns BoseFSIndex for BoseFS, and FermiFSIndex for FermiFS. Can work on a tuple of modes. Does not check bounds.\n\njulia> find_mode(BoseFS(1, 0, 2), 2)\nBoseFSIndex(occnum=0, mode=2, offset=2)\n\njulia> find_mode(FermiFS(1, 1, 1, 0), (2,3))\n(FermiFSIndex(occnum=1, mode=2, offset=1), FermiFSIndex(occnum=1, mode=3, offset=2))\n\nSee SingleComponentFockAddress.\n\n\n\n\n\n","category":"function"},{"location":"addresses.html#Rimu.BitStringAddresses.find_occupied_mode","page":"BitString addresses","title":"Rimu.BitStringAddresses.find_occupied_mode","text":"find_occupied_mode(::SingleComponentFockAddress, k)\nfind_occupied_mode(::BoseFS, k, [n])\n\nFind the k-th occupied mode in address (with at least n particles). Returns BoseFSIndex for BoseFS, and FermiFSIndex for FermiFS. When unsuccessful it returns a zero index.\n\nExample\n\njulia> find_occupied_mode(FermiFS(1, 1, 1, 0), 2)\nFermiFSIndex(occnum=1, mode=2, offset=1)\n\njulia> find_occupied_mode(BoseFS(1, 0, 2), 1)\nBoseFSIndex(occnum=1, mode=1, offset=0)\n\njulia> find_occupied_mode(BoseFS(1, 0, 2), 1, 2)\nBoseFSIndex(occnum=2, mode=3, offset=3)\n\nSee also occupied_modes, OccupiedModeMap, SingleComponentFockAddress.\n\n\n\n\n\n","category":"function"},{"location":"addresses.html#Rimu.BitStringAddresses.num_components-Tuple{AbstractFockAddress}","page":"BitString addresses","title":"Rimu.BitStringAddresses.num_components","text":"num_components(::Type{<:AbstractFockAddress})\nnum_components(::AbstractFockAddress)\n\nNumber of components in address.\n\n\n\n\n\n","category":"method"},{"location":"addresses.html#Rimu.BitStringAddresses.num_modes-Tuple{AbstractFockAddress}","page":"BitString addresses","title":"Rimu.BitStringAddresses.num_modes","text":"num_modes(::Type{<:AbstractFockAddress})\nnum_modes(::AbstractFockAddress)\n\nNumber of modes represented by address.\n\n\n\n\n\n","category":"method"},{"location":"addresses.html#Rimu.BitStringAddresses.num_occupied_modes","page":"BitString addresses","title":"Rimu.BitStringAddresses.num_occupied_modes","text":"num_occupied_modes(::SingleComponentFockAddress)\n\nGet the number of occupied modes in address. Equivalent to length(occupied_modes(address)), or the number of non-zeros in its ONR representation.\n\nExample\n\njulia> num_occupied_modes(BoseFS((1, 0, 2)))\n2\njulia> num_occupied_modes(FermiFS((1, 1, 1, 0)))\n3\n\nSee SingleComponentFockAddress.\n\n\n\n\n\n","category":"function"},{"location":"addresses.html#Rimu.BitStringAddresses.num_particles-Tuple{AbstractFockAddress}","page":"BitString addresses","title":"Rimu.BitStringAddresses.num_particles","text":"num_particles(::Type{<:AbstractFockAddress})\nnum_particles(::AbstractFockAddress)\n\nNumber of particles represented by address.\n\n\n\n\n\n","category":"method"},{"location":"addresses.html#Rimu.BitStringAddresses.occupied_modes","page":"BitString addresses","title":"Rimu.BitStringAddresses.occupied_modes","text":"occupied_modes(::SingleComponentFockAddress)\n\nReturn a lazy iterator over all occupied modes in an address. Iterates over BoseFSIndexs for BoseFS, and over FermiFSIndexs for FermiFS. See OccupiedModeMap for an eager version.\n\nExample\n\njulia> b = BoseFS((1,5,0,4));\n\njulia> foreach(println, occupied_modes(b))\nBoseFSIndex(occnum=1, mode=1, offset=0)\nBoseFSIndex(occnum=5, mode=2, offset=2)\nBoseFSIndex(occnum=4, mode=4, offset=9)\n\njulia> f = FermiFS((1,1,0,1,0,0,1));\n\njulia> foreach(println, occupied_modes(f))\nFermiFSIndex(occnum=1, mode=1, offset=0)\nFermiFSIndex(occnum=1, mode=2, offset=1)\nFermiFSIndex(occnum=1, mode=4, offset=3)\nFermiFSIndex(occnum=1, mode=7, offset=6)\n\nSee also find_occupied_mode, SingleComponentFockAddress.\n\n\n\n\n\n","category":"function"},{"location":"addresses.html#Rimu.BitStringAddresses.onr","page":"BitString addresses","title":"Rimu.BitStringAddresses.onr","text":"occupation_number_representation(fs::SingleComponentFockAddress)\nonr(fs::SingleComponentFockAddress)\n\nCompute and return the occupation number representation of the Fock state fs as an SVector{M}, where M is the number of modes.\n\n\n\n\n\n","category":"function"},{"location":"addresses.html#Rimu.BitStringAddresses.@fs_str-Tuple{Any}","page":"BitString addresses","title":"Rimu.BitStringAddresses.@fs_str","text":"fs\"$(string)\"\n\nParse the compact representation of a Fock state. Useful for copying the printout from a vector to the REPL.\n\nExample\n\njulia> DVec(BoseFS{3,4}(0, 1, 2, 0) => 1)\nDVec{BoseFS{3, 4, BitString{6, 1, UInt8}},Int64} with 1 entry, style = IsStochasticInteger{Int64}()\n  fs\"|0 1 2 0⟩\" => 1\n\njulia> fs\"|0 1 2 0⟩\" => 1 # Copied from above printout\nBoseFS{3,4}(0, 1, 2, 0) => 1\n\njulia> fs\"|1 2 3⟩⊗|0 1 0⟩\" # composite bosonic Fock state\nCompositeFS(\n  BoseFS{6,3}(1, 2, 3),\n  BoseFS{1,3}(0, 1, 0),\n)\n\njulia> fs\"|↑↓↑⟩\" # construct a fermionic Fock state\nCompositeFS(\n  FermiFS{2,3}(1, 0, 1),\n  FermiFS{1,3}(0, 1, 0),\n)\n\njulia> s = fs\"|0 1 2 0⟩{}\" # constructing OccupationNumberFS with default UInt8 container\nOccupationNumberFS{4, UInt8}(0, 1, 2, 0)\n\njulia> [s] # prints out with the signifcant number of bits specified in braces\n1-element Vector{OccupationNumberFS{4, UInt8}}:\n fs\"|0 1 2 0⟩{8}\"\n\nSee also FermiFS, BoseFS, CompositeFS, FermiFS2C, OccupationNumberFS.\n\n\n\n\n\n","category":"macro"},{"location":"addresses.html#Rimu.BitStringAddresses.BoseFS","page":"BitString addresses","title":"Rimu.BitStringAddresses.BoseFS","text":"BoseFS{N,M,S} <: SingleComponentFockAddress\n\nAddress type that represents a Fock state of N spinless bosons in M modes by wrapping a BitString, or a SortedParticleList. Which is wrapped is chosen automatically based on the properties of the address.\n\nConstructors\n\nBoseFS{[N,M]}(val::Integer...): Create BoseFS{N,M} from occupation numbers. This is type-stable if the number of modes M and the number of particles N are provided. Otherwise, M and N are inferred from the arguments.\nBoseFS{[N,M]}(onr): Create BoseFS{N,M} from occupation number representation, see onr. This is efficient if N and M are provided, and onr is a statically-sized collection, such as a Tuple or SVector.\nBoseFS{[N,M]}([M, ]pairs...): Provide the number of modes M and mode => occupation_number pairs. If M is provided as a type parameter, it should not be provided as the first argument.  Useful for creating sparse addresses. pairs can be multiple arguments or an iterator of pairs.\nBoseFS{N,M,S}(bs::S): Unsafe constructor. Does not check whether the number of particles in bs is equal to N.\n@fs_str: Addresses are sometimes printed in a compact manner. This representation can also be used as a constructor. See the last example below.\n\nExamples\n\njulia> BoseFS{6,5}(0, 1, 2, 3, 0)\nBoseFS{6,5}(0, 1, 2, 3, 0)\n\njulia> BoseFS([abs(i - 3) ≤ 1 ? i - 1 : 0 for i in 1:5])\nBoseFS{6,5}(0, 1, 2, 3, 0)\n\njulia> BoseFS(5, 2 => 1, 3 => 2, 4 => 3)\nBoseFS{6,5}(0, 1, 2, 3, 0)\n\njulia> BoseFS{6,5}(i => i - 1 for i in 2:4)\nBoseFS{6,5}(0, 1, 2, 3, 0)\n\njulia> fs\"|0 1 2 3 0⟩\"\nBoseFS{6,5}(0, 1, 2, 3, 0)\n\njulia> fs\"|b 5: 2 3 3 4 4 4⟩\"\nBoseFS{6,5}(0, 1, 2, 3, 0)\n\nSee also: SingleComponentFockAddress, OccupationNumberFS, FermiFS, CompositeFS, FermiFS2C.\n\n\n\n\n\n","category":"type"},{"location":"addresses.html#Rimu.BitStringAddresses.bose_hubbard_interaction-Union{Tuple{BoseFS{<:Any, <:Any, A}}, Tuple{A}} where A<:BitString","page":"BitString addresses","title":"Rimu.BitStringAddresses.bose_hubbard_interaction","text":"bose_hubbard_interaction(address)\n\nReturn Σ_i n_i (n_i-1) for computing the Bose-Hubbard on-site interaction (without the U prefactor.)\n\nExample\n\njulia> Hamiltonians.bose_hubbard_interaction(BoseFS{4,4}((2,1,1,0)))\n2\njulia> Hamiltonians.bose_hubbard_interaction(BoseFS{4,4}((3,0,1,0)))\n6\n\n\n\n\n\n","category":"method"},{"location":"addresses.html#Rimu.BitStringAddresses.hopnextneighbour-Union{Tuple{A}, Tuple{M}, Tuple{N}, Tuple{BoseFS{N, M, A}, Any}} where {N, M, A<:BitString}","page":"BitString addresses","title":"Rimu.BitStringAddresses.hopnextneighbour","text":"new_address, value = hopnextneighbour(add, chosen, boundary_condition)\n\nCompute the new address of a hopping event for the Hubbard model. Returns the new address and the square root of product of occupation numbers of the involved modes multiplied by a term consistent with boundary condition as the value.  The following boundary conditions are supported:\n\n:periodic: hopping over the boundary gives does not change the value.\n:twisted: hopping over the boundary flips the sign of the value.\n:hard_wall: hopping over the boundary gives a value of zero.\nθ <: Number: hopping over the boundary gives a value multiplied by exp(iθ) or exp(iθ) depending on the direction of hopping.\n\nThe off-diagonals are indexed as follows:\n\n(chosen + 1) ÷ 2 selects the hopping site.\nEven chosen indicates a hop to the left.\nOdd chosen indicates a hop to the right.\n\nExample\n\njulia> using Rimu.Hamiltonians: hopnextneighbour\n\njulia> hopnextneighbour(BoseFS(1, 0, 1), 3)\n(BoseFS{2,3}(2, 0, 0), 1.4142135623730951)\n\njulia> hopnextneighbour(BoseFS(1, 0, 1), 4)\n(BoseFS{2,3}(1, 1, 0), 1.0)\n\njulia> hopnextneighbour(BoseFS(1, 0, 1), 3, :twisted)\n(BoseFS{2,3}(2, 0, 0), -1.4142135623730951)\n\njulia> hopnextneighbour(BoseFS(1, 0, 1), 3, :hard_wall)\n(BoseFS{2,3}(2, 0, 0), 0.0)\n\njulia> hopnextneighbour(BoseFS(1, 0, 1), 3, π/4)\n(BoseFS{2,3}(2, 0, 0), 1.0000000000000002 + 1.0im)\n\n\n\n\n\n","category":"method"},{"location":"addresses.html#Rimu.BitStringAddresses.near_uniform-Union{Tuple{Type{<:BoseFS{N, M}}}, Tuple{M}, Tuple{N}} where {N, M}","page":"BitString addresses","title":"Rimu.BitStringAddresses.near_uniform","text":"near_uniform(BoseFS{N,M}) -> BoseFS{N,M}\n\nCreate bosonic Fock state with near uniform occupation number of M modes with a total of N particles.\n\nExamples\n\njulia> near_uniform(BoseFS{7,5})\nBoseFS{7,5}(2, 2, 1, 1, 1)\n\njulia> near_uniform(FermiFS{3,5})\nFermiFS{3,5}(1, 1, 1, 0, 0)\n\n\n\n\n\n","category":"method"},{"location":"addresses.html#Rimu.BitStringAddresses.FermiFS","page":"BitString addresses","title":"Rimu.BitStringAddresses.FermiFS","text":"FermiFS{N,M,S} <: SingleComponentFockAddress\n\nAddress type that represents a Fock state of N fermions of the same spin in M modes by wrapping a BitString, or a SortedParticleList. Which is wrapped is chosen automatically based on the properties of the address.\n\nConstructors\n\nFermiFS{[N,M]}(val::Integer...): Create FermiFS{N,M} from occupation numbers. This is type-stable if the number of modes M and the number of particles N are provided. Otherwise, M and N are inferred from the arguments.\nFermiFS{[N,M]}(onr): Create FermiFS{N,M}  from occupation number representation, see onr. This is efficient if N and M are provided, and onr is a statically-sized collection, such as a Tuple{M} or SVector{M}.\nFermiFS{[N,M]}([M, ]pairs...): Provide the number of modes M and pairs of the form mode => 1. If M is provided as a type parameter, it should not be provided as the first argument.  Useful for creating sparse addresses. pairs can be multiple arguments or an iterator of pairs.\nFermiFS{N,M,S}(bs::S): Unsafe constructor. Does not check whether the number of particles in bs is equal to N, or whether each mode only contains one particle.\n@fs_str: Addresses are sometimes printed in a compact manner. This representation can also be used as a constructor. See the last example below.\n\nExamples\n\njulia> FermiFS{3,5}(0, 1, 1, 1, 0)\nFermiFS{3,5}(0, 1, 1, 1, 0)\n\njulia> FermiFS([abs(i - 3) ≤ 1 for i in 1:5])\nFermiFS{3,5}(0, 1, 1, 1, 0)\n\njulia> FermiFS(5, 2 => 1, 3 => 1, 4 => 1)\nFermiFS{3,5}(0, 1, 1, 1, 0)\n\njulia> FermiFS{3,5}(i => 1 for i in 2:4)\nFermiFS{3,5}(0, 1, 1, 1, 0)\n\njulia> fs\"|⋅↑↑↑⋅⟩\"\nFermiFS{3,5}(0, 1, 1, 1, 0)\n\njulia> fs\"|f 5: 2 3 4⟩\"\nFermiFS{3,5}(0, 1, 1, 1, 0)\n\nSee also: SingleComponentFockAddress, BoseFS, CompositeFS, FermiFS2C, BitString, OccupationNumberFS.\n\n\n\n\n\n","category":"type"},{"location":"addresses.html#Rimu.BitStringAddresses.CompositeFS","page":"BitString addresses","title":"Rimu.BitStringAddresses.CompositeFS","text":"CompositeFS(addresses::SingleComponentFockAddress...) <: AbstractFockAddress\n\nUsed to encode addresses for multi-component models. All component addresses are expected have the same number of modes.\n\nSee also: BoseFS, FermiFS, SingleComponentFockAddress, num_modes, FermiFS2C, AbstractFockAddress.\n\n\n\n\n\n","category":"type"},{"location":"addresses.html#Rimu.BitStringAddresses.FermiFS2C","page":"BitString addresses","title":"Rimu.BitStringAddresses.FermiFS2C","text":"FermiFS2C <: AbstractFockAddress\nFermiFS2C(onr_a, onr_b)\n\nFock state address with two fermionic (spin) components. Alias for CompositeFS with two FermiFS components. Construct by specifying either two compatible FermiFSs, two onrs, or the number of modes followed by mode => occupation_number pairs, where occupation_number=1 will put a particle in the first component and occupation_number=-1 will put a particle in the second component. See examples below.\n\nExamples\n\njulia> FermiFS2C(FermiFS(1,0,0), FermiFS(0,1,1))\nCompositeFS(\n  FermiFS{1,3}(1, 0, 0),\n  FermiFS{2,3}(0, 1, 1),\n)\n\njulia> FermiFS2C((1,0,0), (0,1,1))\nCompositeFS(\n  FermiFS{1,3}(1, 0, 0),\n  FermiFS{2,3}(0, 1, 1),\n)\n\njulia> FermiFS2C(3, 1 => 1, 2 => -1, 3 => -1)\nCompositeFS(\n  FermiFS{1,3}(1, 0, 0),\n  FermiFS{2,3}(0, 1, 1),\n)\n\njulia> fs\"|↑↓↓⟩\"\nCompositeFS(\n  FermiFS{1,3}(1, 0, 0),\n  FermiFS{2,3}(0, 1, 1),\n)\n\n\n\n\n\n","category":"type"},{"location":"addresses.html#Rimu.BitStringAddresses.time_reverse-Union{Tuple{CompositeFS{2, N, M, T}}, Tuple{T}, Tuple{M}, Tuple{N}} where {N, M, T<:(Tuple{T, T} where T)}","page":"BitString addresses","title":"Rimu.BitStringAddresses.time_reverse","text":"time_reverse(addr)\n\nApply the time-reversal operation on a two-component Fock address that flips all the spins.\n\nRequires each component address to have the same type.\n\n\n\n\n\n","category":"method"},{"location":"addresses.html#Rimu.BitStringAddresses.OccupationNumberFS","page":"BitString addresses","title":"Rimu.BitStringAddresses.OccupationNumberFS","text":"OccupationNumberFS{M,T} <: SingleComponentFockAddress\n\nAddress type that stores the occupation numbers of a single component bosonic Fock state with M modes. The occupation numbers must fit into the type T <: Unsigned. The number of particles is runtime data, and can be retrieved with num_particles(address).\n\nConstructors\n\nOccupationNumberFS(val::Integer...): Construct from occupation numbers. Must be < 256 to fit into UInt8.\nOccupationNumberFS{[M,T]}(onr): Construct from collection onr with M occupation numbers with type T. If unspecified, the type T of the occupation numbers is inferred from the type of the arguments.\nOccupationNumberFS(fs::BoseFS): Construct from BoseFS.\nWith shortform macro @fs_str. Specify the number of significant bits in braces. See example below.\n\nExamples\n\njulia> ofs = OccupationNumberFS(1,2,3)\nOccupationNumberFS{3, UInt8}(1, 2, 3)\n\njulia> ofs == fs\"|1 2 3⟩{8}\"\ntrue\n\njulia> num_particles(ofs)\n6\n\n\n\n\n\n","category":"type"},{"location":"addresses.html#Rimu.BitStringAddresses.excitation-Union{Tuple{T}, Tuple{OccupationNumberFS{<:Any, T}, NTuple{var\"#s61\", Int64} where var\"#s61\", NTuple{var\"#s5\", Int64} where var\"#s5\"}} where T","page":"BitString addresses","title":"Rimu.BitStringAddresses.excitation","text":"excitation(addr::OccupationNumberFS, c::NTuple, d::NTuple)\n→ (nadd, α)\n\nGenerate an excitation on an OccupationNumberFS by applying the creation and destruction operators specified by the tuples of mode numbers c and d to the Fock state addr. The modes are indexed by integers (starting at 1), or by indices of type BoseFSIndex. The value of α is given by the square root of the product of mode occupations before destruction and after creation.\n\nThe number of particles may change by this type of excitation.\n\nExample\n\njulia> s = fs\"|1 2 3⟩{8}\"\nOccupationNumberFS{3, UInt8}(1, 2, 3)\n\njulia> num_particles(s)\n6\n\njulia> es, α = excitation(s, (1,1), (3,))\n(OccupationNumberFS{3, UInt8}(3, 2, 2), 4.242640687119285)\n\njulia> num_particles(es)\n7\n\n\n\n\n\n","category":"method"},{"location":"addresses.html#Internal-representations","page":"BitString addresses","title":"Internal representations","text":"","category":"section"},{"location":"addresses.html","page":"BitString addresses","title":"BitString addresses","text":"The atomic addresses, BoseFS and FermiFS, are implemented as either bitstrings or sorted lists of particles. Using these approaches over an occupation number representation makes the addresses much more space-efficient.","category":"page"},{"location":"addresses.html","page":"BitString addresses","title":"BitString addresses","text":"Therewhile OccupationNumberFS internally uses the occupation number representation,  which allows it to handle excitation operations that change the particle number. This is fast but requires more storage space.","category":"page"},{"location":"addresses.html#Internal-APIs","page":"BitString addresses","title":"Internal APIs","text":"","category":"section"},{"location":"addresses.html","page":"BitString addresses","title":"BitString addresses","text":"Modules = [BitStringAddresses]\nPages = [\"bitstring.jl\", \"sortedparticlelist.jl\"]\nPrivate = false","category":"page"},{"location":"addresses.html#Rimu.BitStringAddresses.BitString","page":"BitString addresses","title":"Rimu.BitStringAddresses.BitString","text":"BitString{B,N,T<:Unsigned}\n\nType for storing bitstrings of static size. Holds B bits in N chunks, where each chunk is of type T.\n\nN is chosen automatically to accommodate B bits as efficiently as possible.\n\nConstructors\n\nBitString{B,N,T}(::SVector{N,T}): unsafe constructor. Does not check for ghost bits.\nBitString{B,N,T}(i::T): as above, but sets i as the rightmost chunk.\nBitString{B}(::Integer): Convert integer to BitString. Integer is truncated to the correct number of bits.\n\n\n\n\n\n","category":"type"},{"location":"addresses.html#Rimu.BitStringAddresses.SortedParticleList","page":"BitString addresses","title":"Rimu.BitStringAddresses.SortedParticleList","text":"SortedParticleList{N,M,T<:Unsigned}\n\nType for storing sparse fock states. Stores the mode number of each particle as an entry with only its mode stored. The entries are always kept sorted.\n\nIterating over SortedParticleLists yields occupied modes as a tuple of occupation number, mode number, and position in list.\n\nConstructors\n\nSortedParticleList{N,M,T}(::SVector{N,T}): unsafe constructor. Does not sort input.\nSortedParticleList(arr::AbstractVector): convert ONR to SortedParticleList\n\n\n\n\n\n","category":"type"},{"location":"addresses.html#Index","page":"BitString addresses","title":"Index","text":"","category":"section"},{"location":"addresses.html","page":"BitString addresses","title":"BitString addresses","text":"Pages   = [\"addresses.md\"]","category":"page"},{"location":"API.html#API","page":"API","title":"API","text":"","category":"section"},{"location":"API.html#Rimu","page":"API","title":"Rimu","text":"","category":"section"},{"location":"API.html","page":"API","title":"API","text":"Modules = [Rimu]","category":"page"},{"location":"API.html#Rimu.Rimu","page":"API","title":"Rimu.Rimu","text":"Rimu\n\nRandom integrators for many-body quantum systems\n\nWelcome to Rimu version 0.14.0. Read the documentation online.\n\n\n\n\n\n","category":"module"},{"location":"API.html#Rimu.PACKAGE_VERSION","page":"API","title":"Rimu.PACKAGE_VERSION","text":"Rimu.PACKAGE_VERSION\n\nConstant that contains the current VersionNumber of Rimu.\n\n\n\n\n\n","category":"constant"},{"location":"API.html#DataFrames.DataFrame-Tuple{Rimu.Report}","page":"API","title":"DataFrames.DataFrame","text":"DataFrame(report::Report)\n\nConvert the Report to a DataFrame. Metadata is added as metadata to the DataFrame.\n\n\n\n\n\n","category":"method"},{"location":"API.html#Rimu.AllOverlaps","page":"API","title":"Rimu.AllOverlaps","text":"AllOverlaps(n_replicas=2; operator=nothing, transform=nothing, vecnorm=true)\n    <: ReplicaStrategy{n_replicas}\n\nRun n_replicas replicas and report overlaps between all pairs of replica vectors. If operator is not nothing, the overlap dot(c1, operator, c2) is reported as well. If operator is a tuple of operators, the overlaps are computed for all operators.\n\nColumn names in the report are of the form c{i}_dot_c{j} for vector-vector overlaps, and c{i}_Op{k}_c{j} for operator overlaps.\n\nSee ProjectorMonteCarloProblem, ReplicaStrategy and AbstractOperator (for an interface for implementing operators).\n\nTransformed Hamiltonians\n\nIf a transformed Hamiltonian G has been passed to ProjectorMonteCarloProblem then overlaps can be calculated by passing the same transformed Hamiltonian to AllOverlaps by setting transform=G. A warning is given if these two Hamiltonians do not match.\n\nImplemented transformations are:\n\nGutzwillerSampling\nGuidingVectorSampling\n\nIn the case of a transformed Hamiltonian the overlaps are defined as follows. For a similarity transformation G of the Hamiltonian (see e.g. GutzwillerSampling.)\n\n    hatG = f hatH f^-1\n\nThe expectation value of an operator hatA is\n\n    langle hatA rangle = langle psi  hatA  psi rangle\n        = fraclangle phi  f^-1 hatA f^-1  phi ranglelangle phi  f^-2  phi rangle\n\nwhere\n\n     phi rangle = f  psi rangle\n\nis the (right) eigenvector of hatG and  psi rangle is an eigenvector of hatH.\n\nFor a K-tuple of input operators (hatA_1  hatA_K), overlaps of langle phi  f^-1 hatA f^-1  phi rangle are reported as c{i}_Op{k}_c{j}. The correct vector-vector overlap langle phi  f^-2  phi rangle is reported last as c{i}_Op{K+1}_c{j}. This is in addition to the bare vector-vector overlap langle phi  f^-2  phi rangle that is reported as c{i}_dot_c{j}.\n\nIn either case the c{i}_dot_c{j} overlap can be omitted with the flag vecnorm=false.\n\n\n\n\n\n","category":"type"},{"location":"API.html#Rimu.ConstantTimeStep","page":"API","title":"Rimu.ConstantTimeStep","text":"ConstantTimeStep <: TimeStepStrategy\n\nKeep time_step constant.\n\n\n\n\n\n","category":"type"},{"location":"API.html#Rimu.DefaultShiftParameters","page":"API","title":"Rimu.DefaultShiftParameters","text":"DefaultShiftParameters\n\nDefault mutable struct for storing the shift parameters.\n\nSee ShiftStrategy, initialise_shift_parameters.\n\n\n\n\n\n","category":"type"},{"location":"API.html#Rimu.DontUpdate","page":"API","title":"Rimu.DontUpdate","text":"DontUpdate(; target_walkers = 1_000) <: ShiftStrategy\n\nDon't update the shift.  Return when target_walkers is reached.\n\nSee ShiftStrategy, ProjectorMonteCarloProblem.\n\n\n\n\n\n","category":"type"},{"location":"API.html#Rimu.DoubleLogProjected","page":"API","title":"Rimu.DoubleLogProjected","text":"DoubleLogProjected(; target, projector, ζ = 0.08, ξ = ζ^2/4) <: ShiftStrategy\n\nStrategy for updating the shift according to the log formula with damping parameter ζ and ξ after projecting onto projector.\n\nS^n+1 = S^n -fracζdτlnleft(fracPΨ^(n+1)PΨ^(n)right)-fracξdτlnleft(fracPΨ^(n+1)texttargetright)\n\nNote that adjusting the keyword maxlength in ProjectorMonteCarloProblem is advised as the default may not be appropriate.\n\nSee ShiftStrategy, ProjectorMonteCarloProblem.\n\n\n\n\n\n","category":"type"},{"location":"API.html#Rimu.DoubleLogSumUpdate","page":"API","title":"Rimu.DoubleLogSumUpdate","text":"DoubleLogSumUpdate(; target_walkers = 1000, ζ = 0.08, ξ = ζ^2/4, α = 1/2) <: ShiftStrategy\n\nStrategy for updating the shift according to the log formula with damping parameters ζ and ξ.\n\nS^n+1 = S^n -fracζdτlnleft(fracN_mathrmw^n+1N_mathrmw^nright)\n- fracξdτlnleft(fracN_mathrmw^n+1N_mathrmw^texttargetright)\n\nwhere N_mathrmw = (1-α)*walkernumber() + α*UniformProjector()⋅ψ computed with walkernumber() and UniformProjector(). When ξ = ζ^2/4 this corresponds to critical damping with a damping time scale T = 2/ζ.\n\nSee ShiftStrategy, ProjectorMonteCarloProblem.\n\n\n\n\n\n","category":"type"},{"location":"API.html#Rimu.DoubleLogUpdate","page":"API","title":"Rimu.DoubleLogUpdate","text":"DoubleLogUpdate(; target_walkers = 1_000, ζ = 0.08, ξ = ζ^2/4) <: ShiftStrategy\n\nStrategy for updating the shift according to the log formula with damping parameter ζ and ξ.\n\nS^n+1 = S^n -fracζdτlnleft(fracΨ_1^n+1Ψ_1^nright)-fracξdτlnleft(fracΨ_1^n+1Ψ_1^texttargetright)\n\nWhen ξ = ζ^2/4 this corresponds to critical damping with a damping time scale T = 2/ζ.\n\nSee ShiftStrategy, ProjectorMonteCarloProblem.\n\n\n\n\n\n","category":"type"},{"location":"API.html#Rimu.DoubleLogUpdateAfterTargetWalkers","page":"API","title":"Rimu.DoubleLogUpdateAfterTargetWalkers","text":"DoubleLogUpdateAfterTargetWalkers(target_walkers = 1_000, ζ = 0.08, ξ = ζ^2/4) <: ShiftStrategy\n\nStrategy for updating the shift: After target_walkers is reached, update the shift according to the log formula with damping parameter ζ and ξ.\n\nSee DoubleLogUpdate, ShiftStrategy, ProjectorMonteCarloProblem.\n\n\n\n\n\n","category":"type"},{"location":"API.html#Rimu.FCIQMC","page":"API","title":"Rimu.FCIQMC","text":"FCIQMC(; kwargs...) <: PMCAlgorithm\n\nAlgorithm for the full configuration interaction quantum Monte Carlo (FCIQMC) method. The default algorithm for ProjectorMonteCarloProblem.\n\nKeyword arguments and defaults:\n\nshift_strategy = DoubleLogUpdate(; targetwalkers = 1_000, ζ = 0.08,   ξ = ζ^2/4): How to update the shift.\ntime_step_strategy = ConstantTimeStep(): Adjust time step or not.\n\nSee also ProjectorMonteCarloProblem, ShiftStrategy, TimeStepStrategy, DoubleLogUpdate, ConstantTimeStep.\n\n\n\n\n\n","category":"type"},{"location":"API.html#Rimu.FciqmcRunStrategy","page":"API","title":"Rimu.FciqmcRunStrategy","text":" FciqmcRunStrategy{T}\n\nAbstract type representing the strategy for running and terminating lomc!(). The type parameter T is relevant for reporting the shift and the norm.\n\nImplemented strategies:\n\nRunTillLastStep\n\nwarning: Warning\nThe use of this strategy is deprecated. Pass the relevant arguments directly to ProjectorMonteCarloProblem or to lomc!() instead.\n\n\n\n\n\n","category":"type"},{"location":"API.html#Rimu.FirstOrderTransitionOperator","page":"API","title":"Rimu.FirstOrderTransitionOperator","text":"FirstOrderTransitionOperator(hamiltonian, shift, time_step) <: AbstractHamiltonian\nFirstOrderTransitionOperator(sp::DefaultShiftParameters, hamiltonian)\n\nFirst order transition operator\n\n𝐓 = 1 + dτ(S - 𝐇)\n\nwhere 𝐇 is the hamiltonian, dτ the time_step and S is the shift.\n\n𝐓 represents the first order expansion of the exponential evolution operator of the imaginary-time Schrödinger equation (Euler step) and repeated application will project out the ground state eigenvector of the hamiltonian.  It is the transition operator used in FCIQMC.\n\n\n\n\n\n","category":"type"},{"location":"API.html#Rimu.GramSchmidt","page":"API","title":"Rimu.GramSchmidt","text":"GramSchmidt(S; orthogonalization_interval = 1) <: SpectralStrategy{S}\n\nUse the Gram-Schmidt procedure to orthogonalize the excited states. A total of S spectral states are used in the simulation, and they are orthogonalized every  orthogonalization_interval steps.\n\nUse with the keyword argument spectral_strategy in ProjectorMonteCarloProblem.\n\n\n\n\n\n","category":"type"},{"location":"API.html#Rimu.LogUpdate","page":"API","title":"Rimu.LogUpdate","text":"LogUpdate(ζ = 0.08) <: ShiftStrategy\n\nStrategy for updating the shift according to the log formula with damping parameter ζ.\n\nS^n+1 = S^n -fracζdτlnleft(fracΨ_1^n+1Ψ_1^nright)\n\nSee ShiftStrategy, ProjectorMonteCarloProblem.\n\n\n\n\n\n","category":"type"},{"location":"API.html#Rimu.LogUpdateAfterTargetWalkers","page":"API","title":"Rimu.LogUpdateAfterTargetWalkers","text":"LogUpdateAfterTargetWalkers(target_walkers = 1_000, ζ = 0.08) <: ShiftStrategy\n\nStrategy for updating the shift: After target_walkers is reached, update the shift according to the log formula with damping parameter ζ.\n\nSee LogUpdate, ShiftStrategy, ProjectorMonteCarloProblem.\n\n\n\n\n\n","category":"type"},{"location":"API.html#Rimu.MultiScalar","page":"API","title":"Rimu.MultiScalar","text":"MultiScalar\n\nWrapper over a tuple that supports +, *, min, and max. Used with MPI communication because SVectors are treated as arrays by MPI.Allreduce and Tuples do not support scalar operations.\n\nExample\n\nSuppose you want to compute the sum of a vector dv and also get the number of positive elements it has in a single pass. You can use MultiScalar:\n\njulia> dv = DVec(:a => 1, :b => -2, :c => 1);\n\njulia> s, p = mapreduce(+, values(dv)) do v\n    Rimu.MultiScalar(v, Int(sign(v) == 1))\nend;\n\njulia> s, p\n(0, 2)\n\nNote that only MultiScalars with the same types can be operated on. This is a feature, as it forces type stability.\n\n\n\n\n\n","category":"type"},{"location":"API.html#Rimu.NoStats","page":"API","title":"Rimu.NoStats","text":"NoStats(N=1) <: ReplicaStrategy{N}\n\nThe default ReplicaStrategy. N replicas are run, but no statistics are collected.\n\nSee also ProjectorMonteCarloProblem.\n\n\n\n\n\n","category":"type"},{"location":"API.html#Rimu.PMCAlgorithm","page":"API","title":"Rimu.PMCAlgorithm","text":"PMCAlgorithm\n\nAbstract type for projector Monte Carlo algorithms.\n\nSee ProjectorMonteCarloProblem, FCIQMC.\n\n\n\n\n\n","category":"type"},{"location":"API.html#Rimu.PMCSimulation","page":"API","title":"Rimu.PMCSimulation","text":"PMCSimulation\n\nHolds the state and the results of a projector quantum Monte Carlo (PMC) simulation. Is returned by init(::ProjectorMonteCarloProblem) and solved with solve!(::PMCSimulation).\n\nObtain the results of a simulation sm as a DataFrame with DataFrame(sm).\n\nFields\n\nproblem::ProjectorMonteCarloProblem: The problem that was solved\nstate::Rimu.ReplicaState: The current state of the simulation\nreport::Rimu.Report: The report of the simulation\nmodified::Bool: Whether the simulation has been modified\naborted::Bool: Whether the simulation has been aborted\nsuccess::Bool: Whether the simulation has been completed successfully\nmessage::String: A message about the simulation status\nelapsed_time::Float64: The time elapsed during the simulation\n\nSee also state_vectors, ProjectorMonteCarloProblem, init, solve!.\n\n\n\n\n\n","category":"type"},{"location":"API.html#Rimu.PostStepStrategy","page":"API","title":"Rimu.PostStepStrategy","text":"PostStepStrategy\n\nSubtypes of PostStepStrategy can be used to perform arbitrary computation on a single state after an FCIQMC step is finished and report the results.\n\nImplemented strategies:\n\nProjectedEnergy\nProjector\nSignCoherence\nWalkerLoneliness\nTimer\n\nNote: A tuple of multiple strategies can be passed to ProjectorMonteCarloProblem. In that case, all reported column names must be distinct.\n\nInterface:\n\nA subtype of this type must implement post_step_action(::PostStepStrategy, ::SingleState, step::Int).\n\n\n\n\n\n","category":"type"},{"location":"API.html#Rimu.ProjectedEnergy","page":"API","title":"Rimu.ProjectedEnergy","text":"ProjectedEnergy(hamiltonian, projector; hproj=:hproj, vproj=:vproj) <: PostStepStrategy\n\nAfter every step, compute hproj = dot(projector, hamiltonian, dv) and vproj = dot(projector, dv), where dv is the instantaneous coefficient vector.  projector can be an AbstractDVec, or an AbstractProjector.\n\nReports to columns hproj and vproj, which can be used to compute projective energy, e.g. with projected_energy. The keyword arguments hproj and vproj can be used to change the names of these columns. This can be used to make the names unique when computing projected energies with different projectors in the same run.\n\nSee also projected_energy, ratio_of_means, mixed_estimator, and PostStepStrategy.\n\n\n\n\n\n","category":"type"},{"location":"API.html#Rimu.Projector","page":"API","title":"Rimu.Projector","text":"Projector(name=projector) <: PostStepStrategy\n\nAfter each step, compute dot(projector, dv) and report it in the DataFrame under name. projector can be an AbstractDVec, or an AbstractProjector.\n\n\n\n\n\n","category":"type"},{"location":"API.html#Rimu.ProjectorMonteCarloProblem","page":"API","title":"Rimu.ProjectorMonteCarloProblem","text":"ProjectorMonteCarloProblem(hamiltonian::AbstractHamiltonian; kwargs...)\n\nDefines a problem to be solved by projector quantum Monte Carlo (QMC) methods, such as the the FCIQMC algorithm.\n\nCommon keyword arguments and defaults:\n\ntime_step = 0.01: Initial time step size.\nlast_step = 100: Controls the number of steps.\ntarget_walkers = 1_000: Target for the 1-norm of the coefficient vector.\nstart_at = starting_address(hamiltonian): Define the initial state vector(s).   An r  s matrix of state vectors can be passed where r is the   number of replicas and s the number of spectral states. See also   default_starting_vector.\nstyle = IsDynamicSemistochastic(): The StochasticStyle of the simulation.\ninitiator = false: Whether to use initiators. Can be true, false, or a valid   InitiatorRule.\nthreading: Default is to use multithreading and/or MPI if available. Set to true to force PDVec for the starting vector, false for serial computation; may be overridden by start_at.\nreporting_strategy = ReportDFAndInfo(): How and when to report results, see ReportingStrategy.\npost_step_strategy = (): Extract observables (e.g. ProjectedEnergy), see PostStepStrategy.\nn_replicas = 1: Number of synchronised independent simulations.\nreplica_strategy = NoStats(n_replicas): Which results to report from replica simulations, see ReplicaStrategy.\nn_spectral = 1: Number of targeted spectral states. Set n_spectral > 1 to find excited states.\nspectral_strategy = GramSchmidt(n_spectral): The SpectralStrategy used for orthogonalizing spectral states.\n\nExample\n\njulia> hamiltonian = HubbardReal1D(BoseFS(1,2,3));\n\njulia> problem = ProjectorMonteCarloProblem(hamiltonian; target_walkers = 500, last_step = 100);\n\njulia> simulation = solve(problem);\n\njulia> simulation.success[]\ntrue\n\njulia> size(DataFrame(simulation))\n(100, 9)\n\nFurther keyword arguments:\n\nstarting_step = 1: Starting step of the simulation.\nwall_time = Inf: Maximum time allowed for the simulation.\nsimulation_plan = SimulationPlan(; starting_step, last_step, wall_time): Defines the   duration of the simulation. Takes precedence over last_step and wall_time.\nζ = 0.08: Damping parameter for the shift update.\nξ = ζ^2/4: Forcing parameter for the shift update.\nshift_strategy = DoubleLogUpdate(; target_walkers, ζ, ξ): How to update the shift,   see ShiftStrategy.\ntime_step_strategy = ConstantTimeStep(): Adjust time step or not, see   TimeStepStrategy.\nalgorithm = FCIQMC(; shift_strategy, time_step_strategy): The algorithm to use.   Currenlty only FCIQMC is implemented.\nshift: Initial shift value or collection of shift values. Determined by default from the   Hamiltonian and the starting vectors.\ninitial_shift_parameters: Initial shift parameters or collection of initial shift   parameters. Overrides shift if provided.\nmax_length = 2 * target_walkers + 100: Maximum length of the vectors.\ndisplay_name = \"PMCSimulation\": Name displayed in progress bar (via ProgressLogging).\nmetadata: User-supplied metadata to be added to the report. Must be an iterable of pairs or a NamedTuple, e.g. metadata = (\"key1\" => \"value1\", \"key2\" => \"value2\"). All metadata is converted to strings.\nrandom_seed = true: Provide and store a seed for the random number generator. If set to   true, a new random seed is generated from RandomDevice(). If set to number, this   number is used as the seed. This seed is used by solve (and init) to re-seed the   default random number generator (consistently on each MPI rank) such that   solveing the same ProjectorMonteCarloProblem twice will yield identical results. If   set to false, no seed is used and consecutive random numbers are used.\nminimum_size = 2*num_spectral_states(spectral_strategy): The minimum size of the basis   used to construct starting vectors for simulations of spectral states, if start_at   is not provided.\n\nSee also init, solve.\n\n\n\n\n\n","category":"type"},{"location":"API.html#Rimu.ReplicaState","page":"API","title":"Rimu.ReplicaState","text":"ReplicaState <: AbstractMatrix{SingleState}\n\nHolds information about multiple replicas of SpectralStates. Indexing the ReplicaState state[i, j] returns a SingleState from the ith replica and jth spectral state.\n\nFields\n\nspectral_states: Tuple of SpectralStates\nmax_length::Ref{Int}: Maximum length of the simulation\nstep::Ref{Int}: Current step of the simulation\nsimulation_plan: Simulation plan\nreporting_strategy: Reporting strategy\npost_step_strategy: Post-step strategy\nreplica_strategy: Replica strategy\n\nSee also ReplicaStrategy, Rimu.SpectralState, Rimu.SingleState, Rimu.PMCSimulation.\n\n\n\n\n\n","category":"type"},{"location":"API.html#Rimu.ReplicaStrategy","page":"API","title":"Rimu.ReplicaStrategy","text":"ReplicaStrategy{N}\n\nSupertype for strategies that can be passed to ProjectorMonteCarloProblem and control how many replicas are used, and what information is computed and returned. The number of replicas is N.\n\nConcrete implementations\n\nNoStats: run (possibly one) replica(s), but don't report any additional info.\nAllOverlaps: report overlaps between all pairs of replica vectors.\n\nInterface\n\nA subtype of ReplicaStrategy{N} must implement the following function:\n\nRimu.replica_stats - return a tuple of Strings or Symbols of names for replica statistics and a tuple of the values. These will be reported to the DataFrame returned by ProjectorMonteCarloProblem.\n\n\n\n\n\n","category":"type"},{"location":"API.html#Rimu.Report","page":"API","title":"Rimu.Report","text":"Report()\nReport(df::DataFrame)\n\nInternal structure that holds the temporary reported values as well as metadata. It can be converted to a DataFrame with DataFrame(report::Report).\n\nSee report!, report_metadata!, get_metadata.\n\n\n\n\n\n","category":"type"},{"location":"API.html#Rimu.ReportDFAndInfo","page":"API","title":"Rimu.ReportDFAndInfo","text":"ReportDFAndInfo(; reporting_interval=1, info_interval=100, io=stdout, writeinfo=false) <: ReportingStrategy\n\nThe default ReportingStrategy for ProjectorMonteCarloProblem. Report every reporting_intervalth step to a DataFrame and write info message to io every info_intervalth reported step (unless writeinfo == false). The flag writeinfo is useful for controlling info messages in MPI codes, e.g. by setting writeinfo =is_mpi_root().\n\nSee also ProjectorMonteCarloProblem, ReportToFile.\n\n\n\n\n\n","category":"type"},{"location":"API.html#Rimu.ReportToFile","page":"API","title":"Rimu.ReportToFile","text":"ReportToFile(; kwargs...) <: ReportingStrategy\n\nReportingStrategy for ProjectorMonteCarloProblem that writes the report directly to a file in the Arrow format. Useful when dealing with long jobs or large numbers of replicas, when the report can incur a significant memory cost.\n\nThe arrow file can be read back in with load_df(filename) or using Arrow; Arrow.Table(filename).\n\nKeyword arguments\n\nfilename = \"out.arrow\": the file to report to. If the file already exists, a new file is created.\nreporting_interval = 1: interval between simulation steps that are reported.\nchunk_size = 1000: the size of each chunk that is written to the file. A DataFrame of this size is collected in memory and written to disk. When saving, an info message is also printed to io.\nsave_if =is_mpi_root(): if this value is true, save the report, otherwise ignore it.\nreturn_df = false: if this value is true, read the file and return the data frame at the end of computation. Otherwise, an empty DataFrame is returned.\nio = stdout: The IO to print messages to. Set to devnull if you don't want to see messages printed out.\ncompress = :zstd: compression algorithm to use. Can be :zstd, :lz4 or nothing.\n\nSee also load_df, save_df, ReportDFAndInfo, and ProjectorMonteCarloProblem.\n\n\n\n\n\n","category":"type"},{"location":"API.html#Rimu.ReportingStrategy","page":"API","title":"Rimu.ReportingStrategy","text":"ReportingStrategy\n\nAbstract type for strategies for reporting data during a simulation of a ProjectorMonteCarloProblem.\n\nImplemented strategies:\n\nReportDFAndInfo\nReportToFile\n\nExtended help\n\nInterface:\n\nA ReportingStrategy can define any of the following:\n\nRimu.refine_reporting_strategy\nRimu.report!\nRimu.report_after_step!\nRimu.finalize_report!\nRimu.reporting_interval\n\n\n\n\n\n","category":"type"},{"location":"API.html#Rimu.RunTillLastStep","page":"API","title":"Rimu.RunTillLastStep","text":"RunTillLastStep(step::Int = 0 # number of current/starting timestep\n             laststep::Int = 100 # number of final timestep\n             shiftMode::Bool = false # whether to adjust shift\n             shift = 0.0 # starting/current value of shift\n             dτ::Float64 = 0.01 # current value of time step\n) <: FciqmcRunStrategy\n\nParameters for running lomc!() for a fixed number of time steps. For alternative strategies, see FciqmcRunStrategy.\n\nwarning: Warning\nThe use of this strategy is deprecated. Pass the relevant arguments directly to ProjectorMonteCarloProblem or to lomc!() instead.\n\n\n\n\n\n","category":"type"},{"location":"API.html#Rimu.ShiftStrategy","page":"API","title":"Rimu.ShiftStrategy","text":"ShiftStrategy\n\nAbstract type for defining the strategy for controlling the norm, potentially by updating the shift. Passed as a parameter to ProjectorMonteCarloProblem or to FCIQMC.\n\nImplemented strategies:\n\nDontUpdate\nDoubleLogUpdate - default in ProjectorMonteCarloProblem()\nLogUpdate\nLogUpdateAfterTargetWalkers - FCIQMC standard\nDoubleLogUpdateAfterTargetWalkers\n\nExtended help\n\nInternally To implement a custom strategy, define a new subtype of Rimu.ShiftStrategy and implement methods for:\n\nRimu.update_shift_parameters! - to update the shift_parameters\nRimu.initialise_shift_parameters - (optional) to initialise and construct a   custom implementation of the shift_parameters. The default implementation is   Rimu.DefaultShiftParameters.\n\n\n\n\n\n","category":"type"},{"location":"API.html#Rimu.SignCoherence","page":"API","title":"Rimu.SignCoherence","text":"SignCoherence(reference[; name=:coherence]) <: PostStepStrategy\n\nAfter each step, compute the proportion of configurations that have the same sign as they do in the reference_dvec. Reports to a column named name, which defaults to coherence.\n\n\n\n\n\n","category":"type"},{"location":"API.html#Rimu.SimulationPlan","page":"API","title":"Rimu.SimulationPlan","text":"SimulationPlan(; starting_step = 1, last_step = 100, wall_time = Inf)\n\nDefines the duration of the simulation. The simulation ends when the last_step is reached or the wall_time is exceeded.\n\nSee ProjectorMonteCarloProblem, PMCSimulation.\n\n\n\n\n\n","category":"type"},{"location":"API.html#Rimu.SingleParticleDensity","page":"API","title":"Rimu.SingleParticleDensity","text":"SingleParticleDensity(; save_every=1, component) <: PostStepStrategy\n\nPostStepStrategy  to  compute the diagonal single_particle_density. It records a Tuple with the same eltype as the vector.\n\nComputing the density at every time step can be expensive. This cost can be reduced by setting the save_every argument to a higher value. If the value is set, a vector of zeros is recorded when the saving is skipped.\n\nIf the address type has multiple components, the component argument can be used to compute the density on a per-component basis.\n\nThe density is not normalized, and must be divided by the vector norm(⋅,2) squared.\n\nSee also\n\nsingle_particle_density\nDensityMatrixDiagonal\n\n\n\n\n\n","category":"type"},{"location":"API.html#Rimu.SingleState","page":"API","title":"Rimu.SingleState","text":"SingleState(hamiltonian, algorithm, v, wm, pnorm, params, id)\n\nStruct that holds a single state vector and all information needed for an independent run of the algorithm. Can be advanced a step forward with Rimu.advance!.\n\nFields\n\nhamiltonian: Hamiltonian\nalgorithm: Algorithm\nv: Vector\npv: Previous vector\nwm: Working memory\nshift_parameters: Shift parameters\nid::String: id is appended to column names\n\nSee also SpectralStrategy, ReplicaStrategy, Rimu.SpectralState, Rimu.ReplicaState, Rimu.replica_stats, Rimu.PMCSimulation.\n\n\n\n\n\n","category":"type"},{"location":"API.html#Rimu.SpectralState","page":"API","title":"Rimu.SpectralState","text":"SpectralState <: AbstractVector{SingleState}\n\nHolds one or several Rimu.SingleStates representing the ground state and excited states of a single replica. Indexing the SpectralState state[i] returns the ith SingleState.\n\nFields\n\nsingle_states: Tuple of SingleStates\nspectral_strategy: Strategy for computing the spectral states\nid::String: Identifies the replica\n\nSee also SpectralStrategy, Rimu.ReplicaState, Rimu.SingleState, Rimu.PMCSimulation.\n\n\n\n\n\n","category":"type"},{"location":"API.html#Rimu.SpectralStrategy","page":"API","title":"Rimu.SpectralStrategy","text":"SpectralStrategy{S}\n\nAbstract type for spectral strategies. The spectral strategy is used to control the number of spectral states used in the simulation.\n\nImplemented Strategies\n\nGramSchmidt: Orthogonalize the spectral states using the Gram-Schmidt procedure.\n\n\n\n\n\n","category":"type"},{"location":"API.html#Rimu.StateVectors","page":"API","title":"Rimu.StateVectors","text":"StateVectors <: AbstractMatrix{V}\n\nRepresents a matrix of configuration vectors from the state. Construct this object with state_vectors.\n\n\n\n\n\n","category":"type"},{"location":"API.html#Rimu.TimeStepStrategy","page":"API","title":"Rimu.TimeStepStrategy","text":"TimeStepStrategy\n\nAbstract type for strategies for updating the time step with update_time_step(). Implemented strategies:\n\nConstantTimeStep\n\n\n\n\n\n","category":"type"},{"location":"API.html#Rimu.Timer","page":"API","title":"Rimu.Timer","text":"Timer <: PostStepStrategy\n\nRecord current time after every step. See Base.Libc.time for information on what time is recorded.\n\n\n\n\n\n","category":"type"},{"location":"API.html#Rimu.WalkerLoneliness","page":"API","title":"Rimu.WalkerLoneliness","text":"WalkerLoneliness(threshold=1) <: PostStepStrategy\n\nAfter each step, compute the proportion of configurations that are occupied by at most threshold walkers. Reports to a column named loneliness.\n\n\n\n\n\n","category":"type"},{"location":"API.html#CommonSolve.init-Tuple{ProjectorMonteCarloProblem}","page":"API","title":"CommonSolve.init","text":"init(problem::ProjectorMonteCarloProblem; copy_vectors=true)::PMCSimulation\n\nInitialise a Rimu.PMCSimulation.\n\nSee also ProjectorMonteCarloProblem, solve!, solve, step!, Rimu.PMCSimulation.\n\n\n\n\n\n","category":"method"},{"location":"API.html#CommonSolve.solve","page":"API","title":"CommonSolve.solve","text":"solve(::ProjectorMonteCarloProblem)::PMCSimulation\n\nInitialize and solve a ProjectorMonteCarloProblem until the last step is completed or the wall time limit is reached.\n\nSee also init, solve!, step!, Rimu.PMCSimulation, and solve(::ExactDiagonalizationProblem).\n\n\n\n\n\n","category":"function"},{"location":"API.html#CommonSolve.solve!-Tuple{Rimu.PMCSimulation}","page":"API","title":"CommonSolve.solve!","text":"solve!(sm::PMCSimulation; kwargs...)::PMCSimulation\n\nSolve a Rimu.PMCSimulation until the last step is completed or the wall time limit is reached.\n\nTo continue a previously completed simulation, set a new last_step or wall_time using the keyword arguments. Optionally, changes can be made to the replica_strategy, the post_step_strategy, or the reporting_strategy.\n\nOptional keyword arguments:\n\nlast_step = nothing: Set the last step to a new value and continue the simulation.\nwall_time = nothing: Set the allowed wall time to a new value and continue the   simulation.\nreset_time = false: Reset the elapsed_time counter and continue the simulation.\nempty_report = false: Empty the report before continuing the simulation.\nreplica_strategy = nothing: Change the replica strategy. Requires the number of replicas   to match the number of replicas in the simulation sm. Implies empty_report = true.\npost_step_strategy = nothing: Change the post-step strategy. Implies   empty_report = true.\nreporting_strategy = nothing: Change the reporting strategy. Implies   empty_report = true.\nmetadata = nothing: Add metadata to the report.\n\nSee also ProjectorMonteCarloProblem, init, solve, step!, Rimu.PMCSimulation.\n\n\n\n\n\n","category":"method"},{"location":"API.html#CommonSolve.step!-Tuple{Rimu.PMCSimulation}","page":"API","title":"CommonSolve.step!","text":"step!(sm::PMCSimulation)::PMCSimulation\n\nAdvance the simulation by one step.\n\nCalling solve! will advance the simulation until the last step or the wall time is exceeded. When completing the simulation without calling solve!, the simulation report needs to be finalised by calling Rimu.finalize_report!.\n\nSee also ProjectorMonteCarloProblem, init, solve!, solve, Rimu.PMCSimulation.\n\n\n\n\n\n","category":"method"},{"location":"API.html#Rimu.advance!-Tuple{FCIQMC, Any, Rimu.ReplicaState, Rimu.SingleState}","page":"API","title":"Rimu.advance!","text":"advance!(algorithm::PMCAlgorithm, report::Report, state::ReplicaState, s_state::SingleState)\n\nAdvance the s_state by one step according to the algorithm. The state is used only to access the various strategies involved. Steps, stats, and computed quantities are written to the report.\n\nReturns true if the step was successful and calculation should proceed, false when it should terminate.\n\nSee also solve!, step!.\n\n\n\n\n\n","category":"method"},{"location":"API.html#Rimu.all_overlaps-Union{Tuple{B}, Tuple{N}, Tuple{Union{Tuple, Vector}, NTuple{N, AbstractDVec}, Any, Val{B}}} where {N, B}","page":"API","title":"Rimu.all_overlaps","text":"all_overlaps(operators, vectors, working_memories, vecnorm=true)\n\nGet all overlaps between vectors and operators.  The flag vecnorm can disable the vector-vector overlap c{i}_dot_c{j}.\n\n\n\n\n\n","category":"method"},{"location":"API.html#Rimu.check_transform-Tuple{AllOverlaps, AbstractHamiltonian}","page":"API","title":"Rimu.check_transform","text":"check_transform(r::AllOverlaps, ham)\n\nCheck that the transformation provided to r::AllOverlaps matches the given Hamiltonian ham. Used as a sanity check before starting main ProjectorMonteCarloProblem loop.\n\n\n\n\n\n","category":"method"},{"location":"API.html#Rimu.clean_and_warn_if_others_present-Union{Tuple{names}, Tuple{NamedTuple{names}, Any}} where names","page":"API","title":"Rimu.clean_and_warn_if_others_present","text":"clean_and_warn_if_others_present(nt::NamedTuple{names}, keys) where {names}\n\nRemove keys from a NamedTuple that are not in keys and issue a warning if they are present.\n\n\n\n\n\n","category":"method"},{"location":"API.html#Rimu.default_logger-Tuple","page":"API","title":"Rimu.default_logger","text":"default_logger(args...)\n\nReset the global_logger to Logging.ConsoleLogger. Undoes the effect of smart_logger. Arguments are passed on to Logging.ConsoleLogger.\n\n\n\n\n\n","category":"method"},{"location":"API.html#Rimu.default_starting_vector-Tuple{AbstractHamiltonian}","page":"API","title":"Rimu.default_starting_vector","text":"default_starting_vector(hamiltonian::AbstractHamiltonian; kwargs...)\ndefault_starting_vector(\n    address=starting_address(hamiltonian);\n    style=IsDynamicSemistochastic(),\n    initiator=NonInitiator(),\n    threading=nothing,\n    population=10\n)\n\nReturn a default starting vector for ProjectorMonteCarloProblem. The default choice for the starting vector is\n\nv = PDVec(address => population; style, initiator)\n\nif threading is available, or otherwise\n\nv = DVec(address => population; style)\n\nif initiator == NonInitiator(), and\n\nv = InitiatorDVec(address => population; style, initiator)\n\nif not. See PDVec, DVec, InitiatorDVec, StochasticStyle, and InitiatorRule.\n\n\n\n\n\n","category":"method"},{"location":"API.html#Rimu.delete_and_warn_if_present-Union{Tuple{names}, Tuple{NamedTuple{names}, Any}} where names","page":"API","title":"Rimu.delete_and_warn_if_present","text":"delete_and_warn_if_present(nt::NamedTuple, keys)\n\nDelete keys from a NamedTuple and issue a warning if they are present. This is useful for removing unused keyword arguments.\n\n\n\n\n\n","category":"method"},{"location":"API.html#Rimu.finalize_report!-Tuple{ReportingStrategy, Any}","page":"API","title":"Rimu.finalize_report!","text":"finalize_report!(::ReportingStrategy, report)\n\nFinalize the report. This function is called after all steps in solve! have finished.\n\n\n\n\n\n","category":"method"},{"location":"API.html#Rimu.get_metadata-Tuple{Rimu.Report, Any}","page":"API","title":"Rimu.get_metadata","text":"get_metadata(report::Report, key)\n\nGet metadata key from report. key is converted to a String.\n\nSee also report_metadata!, Report, report!.\n\n\n\n\n\n","category":"method"},{"location":"API.html#Rimu.initialise_shift_parameters","page":"API","title":"Rimu.initialise_shift_parameters","text":"initialise_shift_parameters(s::ShiftStrategy, shift, norm, time_step, counter=0, shift_mode=false)\n\nInitiatlise a struct to store the shift parameters.\n\nSee ShiftStrategy, update_shift_parameters!, DefaultShiftParameters.\n\n\n\n\n\n","category":"function"},{"location":"API.html#Rimu.is_mpi_root","page":"API","title":"Rimu.is_mpi_root","text":"is_mpi_root(root = mpi_root)\n\nReturns true if called from the root rank\n\n\n\n\n\n","category":"function"},{"location":"API.html#Rimu.lomc!-Tuple{Any, Any}","page":"API","title":"Rimu.lomc!","text":"lomc!(ham::AbstractHamiltonian, [v]; kwargs...) -> df, state\nlomc!(state::ReplicaState, [df]; kwargs...) -> df, state\n\nLinear operator Monte Carlo: Perform a projector quantum Monte Carlo simulation for determining the lowest eigenvalue of ham. The details of the simulation are controlled by the optional keyword arguments and by the type of the optional starting vector v. Alternatively, a ReplicaState can be passed in to continue a previous simulation.\n\nCommon keyword arguments and defaults:\n\nlaststep = 100 - controls the number of steps.\ndτ = 0.01 - time step.\ntargetwalkers = 1000 - target for the 1-norm of the coefficient vector.\naddress = starting_address(ham) - set starting address for default v and shift.\nstyle = IsStochasticInteger() - set StochasticStyle for default v; unused if v is specified.\ninitiator = NonInitiator() - set InitiatorRule for default v; unused if v is specified.\nthreading - default is to use multithreading and MPI if multiple threads are available. Set to true to force PDVec for the starting vector, false for serial computation; unused if v is specified.\nshift = diagonal_element(ham, address) - initial value of shift.\npost_step_strategy::NTuple{N,<:PostStepStrategy} = () - extract observables (e.g. ProjectedEnergy), see PostStepStrategy. (Deprecated: post_step is accepted as an alias for post_step_strategy.)\nreplica_strategy::ReplicaStrategy = NoStats(1) - run several synchronised simulations, see ReplicaStrategy. (Deprecated: replica is accepted as an alias for replica_strategy.)\nreporting_strategy::ReportingStrategy = ReportDFAndInfo() - how and when to report results, see ReportingStrategy. (Deprecated: r_strat is accepted as an alias for reporting_strategy.)\nname = \"lomc!\" - name displayed in progress bar (via ProgressLogging)\nmetadata - user-supplied metadata to be added to the report df. Must be an iterable of pairs or a NamedTuple, e.g. metadata = (\"key1\" => \"value1\", \"key2\" => \"value2\"). All metadata is converted to strings.\n\nSome metadata is automatically added to the report df including Rimu.PACKAGE_VERSION and data from state.\n\nReturn values\n\nlomc! returns a named tuple with the following fields:\n\ndf: a DataFrame with all statistics being reported.\nstate: a ReplicaState that can be used for continuations.\n\nExample\n\njulia> address = BoseFS(1,2,3);\n\njulia> hamiltonian = HubbardReal1D(address);\n\njulia> df1, state = @suppress lomc!(hamiltonian; targetwalkers=500, laststep=100);\n\njulia> df2, _ = @suppress lomc!(state, df1; laststep=200, metadata=(;info=\"cont\")); # Continuation run\n\njulia> size(df1)\n(100, 9)\n\njulia> size(df2)\n(200, 9)\n\njulia> using DataFrames; metadata(df2, \"info\") # retrieve custom metadata\n\"cont\"\n\njulia> metadata(df2, \"hamiltonian\") # some metadata is automatically added\n\"HubbardReal1D(fs\\\"|1 2 3⟩\\\"; u=1.0, t=1.0)\"\n\nFurther keyword arguments and defaults:\n\nτ_strat::TimeStepStrategy = ConstantTimeStep() - adjust time step or not, see TimeStepStrategy\ns_strat::ShiftStrategy = DoubleLogUpdate(; target_walkers=targetwalkers, ζ = 0.08, ξ = ζ^2/4) - how to update the shift, see ShiftStrategy.\nmaxlength = 2 * s_strat.target_walkers + 100 - upper limit on the length of v; when reached, lomc! will abort\nwm - working memory for re-use in subsequent calculations; is mutated.\ndf = DataFrame() - when called with AbstractHamiltonian argument, a DataFrame can be passed for merging with the report df.\n\nThe default choice for the starting vector is v = default_starting_vector(; address, style, threading, initiator). See default_starting_vector, PDVec, DVec, StochasticStyle, and InitiatorRule.\n\nwarning: Warning\nThe use of this lomc! is deprecated. Use ProjectorMonteCarloProblem and solve instead.\n\n\n\n\n\n","category":"method"},{"location":"API.html#Rimu.mpi_allprintln-Tuple","page":"API","title":"Rimu.mpi_allprintln","text":"mpi_allprintln(args...)\n\nPrint a message to stdout from each rank separately, in order. MPI synchronizing.\n\n\n\n\n\n","category":"method"},{"location":"API.html#Rimu.mpi_barrier","page":"API","title":"Rimu.mpi_barrier","text":"mpi_barrier(comm = mpi_comm())\n\nThe MPI barrier with optional argument. MPI syncronizing.\n\n\n\n\n\n","category":"function"},{"location":"API.html#Rimu.mpi_rank","page":"API","title":"Rimu.mpi_rank","text":"mpi_rank(comm = mpi_comm())\n\nReturn the current MPI rank.\n\n\n\n\n\n","category":"function"},{"location":"API.html#Rimu.mpi_seed!","page":"API","title":"Rimu.mpi_seed!","text":"mpi_seed!(seed = rand(Random.RandomDevice(), UInt))\n\nRe-seed the random number generators in an MPI-safe way. If seed is provided, the random numbers from rand will follow a deterministic sequence.\n\nIndependence of the random number generators on different MPI ranks is achieved by adding hash(mpi_rank()) to seed.\n\n\n\n\n\n","category":"function"},{"location":"API.html#Rimu.mpi_size","page":"API","title":"Rimu.mpi_size","text":"mpi_size(comm = mpi_comm())\n\nSize of MPI communicator.\n\n\n\n\n\n","category":"function"},{"location":"API.html#Rimu.num_replicas-Union{Tuple{ReplicaStrategy{N}}, Tuple{N}} where N","page":"API","title":"Rimu.num_replicas","text":"num_replicas(state_or_strategy)\n\nReturn the number of replicas used in the simulation.\n\n\n\n\n\n","category":"method"},{"location":"API.html#Rimu.num_spectral_states-Union{Tuple{Rimu.SpectralStrategy{S}}, Tuple{S}} where S","page":"API","title":"Rimu.num_spectral_states","text":"num_spectral_states(state_or_strategy)\n\nReturn the number of spectral states used in the simulation.\n\n\n\n\n\n","category":"method"},{"location":"API.html#Rimu.post_step_action","page":"API","title":"Rimu.post_step_action","text":"post_step_action(::PostStepStrategy, ::SingleState, step) -> kvpairs\n\nCompute statistics after FCIQMC step. Should return a tuple of :key => value pairs. This function is only called every reporting_interval steps, as defined by the ReportingStrategy.\n\nSee also PostStepStrategy, ReportingStrategy.\n\n\n\n\n\n","category":"function"},{"location":"API.html#Rimu.refine_reporting_strategy-Tuple{ReportingStrategy}","page":"API","title":"Rimu.refine_reporting_strategy","text":"refine_reporting_strategy(reporting_strategy::ReportingStrategy) -> reporting_strategy\n\nInitialize the reporting strategy. This can be used to set up filenames or other attributes that need to be unique for a run of FCIQMC.\n\n\n\n\n\n","category":"method"},{"location":"API.html#Rimu.replace_keys-Tuple{NamedTuple, Any}","page":"API","title":"Rimu.replace_keys","text":"replace_keys(nt::NamedTuple, (:old1 => :new1, :old2 => :new2, ...))\n\nReplace keys in a NamedTuple with new keys. This is useful for renaming fields in a NamedTuple. Ignores keys that are not present in the NamedTuple.\n\n\n\n\n\n","category":"method"},{"location":"API.html#Rimu.replica_stats","page":"API","title":"Rimu.replica_stats","text":"replica_stats(RS::ReplicaStrategy{N}, spectral_states::NTuple{N,SingleState}) -> (names, values)\n\nReturn the names and values of statistics related to N replica states consistent with the ReplicaStrategy RS. names should be a tuple of Symbols or Strings and values should be a tuple of the same length. This function will be called every reporting_interval steps from ProjectorMonteCarloProblem, or once per time step if reporting_interval is not defined.\n\nPart of the ReplicaStrategy interface. See also SingleState.\n\n\n\n\n\n","category":"function"},{"location":"API.html#Rimu.report!-Tuple{ReportingStrategy, Any, Vararg{Any}}","page":"API","title":"Rimu.report!","text":" report!(::ReportingStrategy, step, report::Report, keys, values, id=\"\")\n report!(::ReportingStrategy, step, report::Report, nt, id=\"\")\n\nReport keys and values to report, which will be converted to a DataFrame before ProjectorMonteCarloProblem exits. Alternatively, a nt::NamedTuple can be passed in place of keys and values. If id is specified, it is appended to all keys. This is used to differentiate between values reported by different replicas.\n\nTo overload this function for a new ReportingStrategy, overload report!(::ReportingStrategy, step, args...) and apply the report by calling report!(args...).\n\n\n\n\n\n","category":"method"},{"location":"API.html#Rimu.report!-Tuple{Rimu.Report, DataFrame}","page":"API","title":"Rimu.report!","text":"report!(report::Report, df::DataFrame)\n\nConvert the DataFrame df to a Report. This function does not copy the data.\n\n\n\n\n\n","category":"method"},{"location":"API.html#Rimu.report!-Tuple{Rimu.Report, Union{AbstractString, Symbol}, Any}","page":"API","title":"Rimu.report!","text":"report!(report, keys, values, id=\"\")\nreport!(report, pairs, id=\"\")\n\nWrite keys, values pairs to report that will be converted to a DataFrame later. Alternatively, a named tuple or a collection of pairs can be passed instead of keys and values.\n\nThe value of id is appended to the name of the column, e.g. report!(report, :key, value, :_1) will report value to a column named :key_1.\n\n\n\n\n\n","category":"method"},{"location":"API.html#Rimu.report_after_step!-Tuple{ReportingStrategy, Any, Any, Vararg{Any}}","page":"API","title":"Rimu.report_after_step!","text":"report_after_step!(::ReportingStrategy, step, report, state) -> report\n\nThis function is called at the very end of a step, after Rimu.reporting_interval steps. It may modify the report.\n\n\n\n\n\n","category":"method"},{"location":"API.html#Rimu.report_metadata!-Tuple{Rimu.Report, Any, Any}","page":"API","title":"Rimu.report_metadata!","text":"report_metadata!(report::Report, key, value)\nreport_metadata!(report::Report, kvpairs)\n\nSet metadata key to value in report. key and value are converted to Strings. Alternatively, an iterable of key-value pairs or a NamedTuple can be passed.\n\nSee also get_metadata, report!, Report.\n\n\n\n\n\n","category":"method"},{"location":"API.html#Rimu.reporting_interval-Tuple{ReportingStrategy}","page":"API","title":"Rimu.reporting_interval","text":"reporting_interval(::ReportingStrategy)\n\nGet the interval between steps for which non-essential statistics are reported. Defaults to 1 if chosen ReportingStrategy does not specify an interval.\n\n\n\n\n\n","category":"method"},{"location":"API.html#Rimu.set_up_initial_shift_parameters-Union{Tuple{S}, Tuple{R}, Tuple{FCIQMC, Any, StaticArraysCore.SMatrix{R, S}, Any, Any}} where {R, S}","page":"API","title":"Rimu.set_up_initial_shift_parameters","text":"set_up_initial_shift_parameters(\n    algorithm::FCIQMC, hamiltonian, starting_vectors, shift, time_step, initial_shift_parameters\n)\n\nSet up the initial shift parameters for the FCIQMC algorithm.\n\n\n\n\n\n","category":"method"},{"location":"API.html#Rimu.single_particle_density-Tuple{Any}","page":"API","title":"Rimu.single_particle_density","text":"single_particle_density(dvec; component)\nsingle_particle_density(add; component)\n\nCompute the diagonal single particle density of vector dvec or address add. If the component argument is given, only that component of the addresses is taken into account. The result is always normalized so that sum(result) ≈ num_particles(address).\n\nExamples\n\njulia> v = DVec(fs\"|⋅↑⇅↓⋅⟩\" => 1.0, fs\"|↓↓⋅↑↑⟩\" => 0.5)\nDVec{FermiFS2C{2, 2, 5, 4, FermiFS{2, 5, BitString{5, 1, UInt8}}, FermiFS{2, 5, BitString{5, 1, UInt8}}},Float64} with 2 entries, style = IsDeterministic{Float64}()\n  fs\"|↓↓⋅↑↑⟩\" => 0.5\n  fs\"|⋅↑⇅↓⋅⟩\" => 1.0\n\njulia> single_particle_density(v)\n(0.2, 1.0, 1.6, 1.0, 0.2)\n\njulia> single_particle_density(v; component=1)\n(0.0, 0.8, 0.8, 0.2, 0.2)\n\nSee also\n\nSingleParticleDensity\n\n\n\n\n\n","category":"method"},{"location":"API.html#Rimu.smart_logger-Tuple","page":"API","title":"Rimu.smart_logger","text":"smart_logger(args...)\n\nEnable terminal progress bar during interactive use (i.e. unless running on CI or HPC). Arguments are passed on to the logger. This is run once during Rimu startup. Undo with default_logger or by setting Base.global_logger().\n\n\n\n\n\n","category":"method"},{"location":"API.html#Rimu.state_vectors-Tuple{R} where R<:Rimu.ReplicaState","page":"API","title":"Rimu.state_vectors","text":"state_vectors(state::ReplicaState)\nstate_vectors(sim::PMCSimulation)\n\nReturn an r×s AbstractMatrix of configuration vectors from the state, or the result of solve(::ProjectorMonteCarloProblem). The vectors can be accessed by indexing the resulting collection, where the row index corresponds to the replica index and the column index corresponds to the spectral state index.\n\nSee also ProjectorMonteCarloProblem, Rimu.PMCSimulation, Rimu.SingleState, Rimu.ReplicaState, Rimu.SpectralState.\n\n\n\n\n\n","category":"method"},{"location":"API.html#Rimu.update_shift_parameters!","page":"API","title":"Rimu.update_shift_parameters!","text":"update_shift_parameters!(\n    s <: ShiftStrategy,\n    shift_parameters,\n    tnorm,\n    v_new,\n    v_old,\n    step,\n    report\n) -> shift_stats, proceed\n\nUpdate the shift_parameters according to strategy s. See ShiftStrategy. Returns a named tuple of the shift statistics and a boolean proceed indicating whether the simulation should proceed.\n\nSee initialise_shift_parameters, ShiftStrategy.\n\n\n\n\n\n","category":"function"},{"location":"API.html#Rimu.update_time_step-Tuple{ConstantTimeStep, Any, Vararg{Any}}","page":"API","title":"Rimu.update_time_step","text":"update_time_step(s<:TimeStepStrategy, time_step, tnorm) -> new_time_step\n\nUpdate the time step according to the strategy s.\n\n\n\n\n\n","category":"method"},{"location":"API.html#Rimu.@mpi_root-Tuple","page":"API","title":"Rimu.@mpi_root","text":"@mpi_root expr\n\nEvaluate expression only on the root rank. Extra care needs to be taken as expr must not contain any code that involves syncronising MPI operations, i.e. actions that would require syncronous action of all MPI ranks.\n\nExample:\n\nwn = walkernumber(dv)   # an MPI syncronising function call that gathers\n                        # information from all MPI ranks\n@mpi_root @info \"The current walker number is\" wn # print info message on root only\n\n\n\n\n\n","category":"macro"},{"location":"API.html#Reexported-Submodules","page":"API","title":"Reexported Submodules","text":"","category":"section"},{"location":"API.html#ExactDiagonalization","page":"API","title":"ExactDiagonalization","text":"","category":"section"},{"location":"API.html","page":"API","title":"API","text":"See Exact Diagonalization","category":"page"},{"location":"API.html#Interfaces","page":"API","title":"Interfaces","text":"","category":"section"},{"location":"API.html","page":"API","title":"API","text":"See Module Interfaces","category":"page"},{"location":"API.html#StochasticStyles","page":"API","title":"StochasticStyles","text":"","category":"section"},{"location":"API.html","page":"API","title":"API","text":"See Module StochasticStyles","category":"page"},{"location":"API.html#Hamiltonians","page":"API","title":"Hamiltonians","text":"","category":"section"},{"location":"API.html","page":"API","title":"API","text":"See Module Hamiltonians","category":"page"},{"location":"API.html#BitStringAddresses","page":"API","title":"BitStringAddresses","text":"","category":"section"},{"location":"API.html","page":"API","title":"API","text":"See Module BitStringAddresses","category":"page"},{"location":"API.html#DictVectors","page":"API","title":"DictVectors","text":"","category":"section"},{"location":"API.html","page":"API","title":"API","text":"See Module DictVectors","category":"page"},{"location":"API.html#StatsTools","page":"API","title":"StatsTools","text":"","category":"section"},{"location":"API.html","page":"API","title":"API","text":"See Module StatsTools","category":"page"},{"location":"API.html#Index","page":"API","title":"Index","text":"","category":"section"},{"location":"API.html","page":"API","title":"API","text":"","category":"page"},{"location":"stochasticstyles.html#Module-StochasticStyles","page":"Stochastic styles","title":"Module StochasticStyles","text":"","category":"section"},{"location":"stochasticstyles.html","page":"Stochastic styles","title":"Stochastic styles","text":"StochasticStyles","category":"page"},{"location":"stochasticstyles.html#Rimu.StochasticStyles","page":"Stochastic styles","title":"Rimu.StochasticStyles","text":"This module provides concrete implementations of StochasticStyles, which specify the algorithm used by ProjectorMonteCarloProblem when performing stochastic matrix-vector multiplication.\n\nImplemented stochastic styles:\n\nStochasticStyle: abstract type for stochastic styles\nIsStochasticInteger\nIsDeterministic\nIsStochasticWithThreshold\nIsDynamicSemistochastic\nStyleUnknown\n\nThe offdiagonal spawning is defined in spawning.jl and is controlled by setting a SpawningStrategy.\n\nThe vector compression strategies are defined in compression.jl and are controlled by setting a CompressionStrategy.\n\n\n\n\n\n","category":"module"},{"location":"stochasticstyles.html#Available-StochasticStyles","page":"Stochastic styles","title":"Available StochasticStyles","text":"","category":"section"},{"location":"stochasticstyles.html","page":"Stochastic styles","title":"Stochastic styles","text":"StyleUnknown","category":"page"},{"location":"stochasticstyles.html#Rimu.Interfaces.StyleUnknown","page":"Stochastic styles","title":"Rimu.Interfaces.StyleUnknown","text":"StyleUnknown{T}() <: StochasticStyle\n\nTrait for value types not (currently) compatible with FCIQMC. This style makes it possible to construct dict vectors with unsupported valtypes.\n\nSee also StochasticStyle.\n\n\n\n\n\n","category":"type"},{"location":"stochasticstyles.html","page":"Stochastic styles","title":"Stochastic styles","text":"Modules = [StochasticStyles]\nPages = [\"styles.jl\"]","category":"page"},{"location":"stochasticstyles.html#Rimu.StochasticStyles.IsDeterministic","page":"Stochastic styles","title":"Rimu.StochasticStyles.IsDeterministic","text":"IsDeterministic{T=Float64}(compression=NoCompression()) <: StochasticStyle{T}\n\nPropagate with deterministic vector matrix multiplications. Stochastic compression of the resultant vector (after annihilations) can be triggered by setting the optional compression argument to a relevant CompressionStrategy.\n\nSee also StochasticStyle.\n\n\n\n\n\n","category":"type"},{"location":"stochasticstyles.html#Rimu.StochasticStyles.IsDynamicSemistochastic","page":"Stochastic styles","title":"Rimu.StochasticStyles.IsDynamicSemistochastic","text":"IsDynamicSemistochastic{T=Float64}(; kwargs...) <: StochasticStyle{T}\n\nQMC propagation with floating-point walker numbers and reduced noise. All possible spawns (offdiagonal elements in vector-matrix multiplication) are performed deterministically when number of walkers in a configuration is high, as controlled by the rel_spawning_threshold and abs_spawning_threshold keywords. Stochastic selection of spawns is controlled by the spawning keyword.\n\nBy default, a stochastic vector compression is applied after annihilations are completed. This behaviour can be changed to on-the-fly projection (as in IsStochasticInteger or IsStochasticWithThreshold) by setting late_compression=false, or modifying spawning and compression. See parameters below for a more detailed explanation.\n\nParameters:\n\nthreshold = 1.0: Values below this number are stochastically projected to this value or zero. See also ThresholdCompression.\nlate_compression = true: If this is set to true, stochastic vector compression is performed after all the spawns are performed. If it is set to false, values are stochastically projected as they are being spawned. late_compression=true is equivalent to setting compression=ThresholdCompression(threshold) and spawning=WithReplacement().  late_compression=false is equivalent to compression=NoCompression() and spawning=WithReplacement(threshold).\nrel_spawning_threshold = 1.0: If the walker number on a configuration times this threshold is greater than the number of offdiagonals, spawning is done deterministically. Should be set to 1 or more for best performance.\nabs_spawning_threshold = Inf: If the walker number on a configuration is greater than this value, spawning is done deterministically. Can be set to e.g.  abs_spawning_threshold = 0.1 * target_walkers.\nspawning = WithReplacement(): SpawningStrategy to use for the non-exact spawns.\ncompression = ThresholdCompression(threshold): CompressionStrategy used to compress the vector after a step. Overrides threshold.\n\nSee also StochasticStyle.\n\n\n\n\n\n","category":"type"},{"location":"stochasticstyles.html#Rimu.StochasticStyles.IsStochastic2Pop","page":"Stochastic styles","title":"Rimu.StochasticStyles.IsStochastic2Pop","text":"IsStochastic2Pop{T=Complex{Int}}() <: StochasticStyle{T}\n\nStochastic propagation with complex walker numbers representing two populations of integer walkers.\n\nWhen using this style, make sure to set a complex number as target walkers in the ShiftStrategy!\n\nThis style is experimental.\n\nSee also StochasticStyle.\n\n\n\n\n\n","category":"type"},{"location":"stochasticstyles.html#Rimu.StochasticStyles.IsStochasticInteger","page":"Stochastic styles","title":"Rimu.StochasticStyles.IsStochasticInteger","text":"IsStochasticInteger{T=Int}() <: StochasticStyle{T}\n\nFCIQMC algorithm with integer walkers as in Booth et al. (2009). During the vector matrix product each individual diagonal and spawning step is rounded stochastically to a nearby integer value.\n\nSee also StochasticStyle.\n\n\n\n\n\n","category":"type"},{"location":"stochasticstyles.html#Rimu.StochasticStyles.IsStochasticWithThreshold","page":"Stochastic styles","title":"Rimu.StochasticStyles.IsStochasticWithThreshold","text":"IsStochasticWithThreshold{T=Float64}(threshold=1.0) <: StochasticStyle{T}\n\nStochastic propagation with floating point walker numbers. During the vector matrix product each individual diagonal and spawning result is rounded stochastically if smaller than threshold (before annihilations). For a more customizable stochastic style, see IsDynamicSemistochastic.\n\nSee also StochasticStyle.\n\n\n\n\n\n","category":"type"},{"location":"stochasticstyles.html#The-StochasticStyle-interface","page":"Stochastic styles","title":"The StochasticStyle interface","text":"","category":"section"},{"location":"stochasticstyles.html","page":"Stochastic styles","title":"Stochastic styles","text":"StochasticStyle\nstep_stats\napply_column!\ndefault_style","category":"page"},{"location":"stochasticstyles.html#Rimu.Interfaces.StochasticStyle","page":"Stochastic styles","title":"Rimu.Interfaces.StochasticStyle","text":"StochasticStyle(v)\n\nAbstract type. When called as a function it returns the native style of the generalised vector v that determines how simulations are to proceed.\n\nUsage\n\nConcrete StochasticStyles can be used for the style keyword argument of ProjectorMonteCarloProblem, DVec and PDVec. The following styles are available:\n\nIsStochasticInteger\nIsDeterministic\nIsStochasticWithThreshold\nIsDynamicSemistochastic\nStyleUnknown\n\nExtended Help\n\nInterface\n\nWhen defining a new StochasticStyle, subtype it as MyStyle<:StochasticStyle{T} where T is the concrete value type the style is designed to work with.\n\nFor it to work with ProjectorMonteCarloProblem, a StochasticStyle must define the following:\n\napply_column!(::StochasticStyle, w, H, address, value)\nstep_stats(::StochasticStyle)\n\nand optionally\n\nCompressionStrategy(::StochasticStyle) for vector compression after annihilations,\n\nSee also StochasticStyles, Interfaces.\n\n\n\n\n\n","category":"type"},{"location":"stochasticstyles.html#Rimu.Interfaces.step_stats","page":"Stochastic styles","title":"Rimu.Interfaces.step_stats","text":"step_stats(::StochasticStyle)\nstep_stats(::CompressionStrategy)\n\nReturn a tuple of stat names (Symbol or String) and a tuple of zeros of the same length. These will be reported as columns in the DataFrame returned by ProjectorMonteCarloProblem.\n\n\n\n\n\n","category":"function"},{"location":"stochasticstyles.html#Rimu.Interfaces.apply_column!","page":"Stochastic styles","title":"Rimu.Interfaces.apply_column!","text":"apply_column!(v, op, addr, num, boost=1) -> stats::Tuple\n\nApply the product of column addr of the operator op and the scalar num to the vector v according to the StochasticStyle of v. By expectation value this should be equivalent to\n\nv .+= op[:, add] .* num\n\nThis is used to perform the spawning step in FCIQMC and to implement operator-vector multiplications. Mutates v and reports spawning statistics.\n\nThe boost argument multiplicatively increases the number of spawns to be performed without affecting the expectation value of the procedure.\n\n\n\n\n\n","category":"function"},{"location":"stochasticstyles.html#Rimu.Interfaces.default_style","page":"Stochastic styles","title":"Rimu.Interfaces.default_style","text":"default_style(::Type)\n\nPick a StochasticStyle based on the value type. Returns StyleUnknown if no known default style is set.\n\n\n\n\n\n","category":"function"},{"location":"stochasticstyles.html#Compression-strategies","page":"Stochastic styles","title":"Compression strategies","text":"","category":"section"},{"location":"stochasticstyles.html","page":"Stochastic styles","title":"Stochastic styles","text":"CompressionStrategy\nNoCompression\nStochasticStyles.ThresholdCompression\ncompress!","category":"page"},{"location":"stochasticstyles.html#Rimu.Interfaces.CompressionStrategy","page":"Stochastic styles","title":"Rimu.Interfaces.CompressionStrategy","text":"CompressionStrategy\n\nThe CompressionStrategy controls how a vector is compressed after a step.\n\nDefault implementation:\n\nNoCompression: no vector compression\n\nUsage\n\nA subtype of CompressionStrategy can be passed as a keyword argument to the constructors for some StochasticStyles. Calling CompressionStrategy(s::StochasticStyle) returns a relevant subtype. The default is NoCompression.\n\nInterface\n\nWhen defining a new CompressionStrategy, subtype it as MyCompressionStrategy <: CompressionStrategy and define these methods:\n\ncompress!(s::CompressionStrategy, v)\ncompress!(s::CompressionStrategy, w, v)\nstep_stats(s::CompressionStrategy)\n\n\n\n\n\n","category":"type"},{"location":"stochasticstyles.html#Rimu.Interfaces.NoCompression","page":"Stochastic styles","title":"Rimu.Interfaces.NoCompression","text":"NoCompression <: CompressionStrategy end\n\nDefault CompressionStrategy. Leaves the vector intact.\n\n\n\n\n\n","category":"type"},{"location":"stochasticstyles.html#Rimu.StochasticStyles.ThresholdCompression","page":"Stochastic styles","title":"Rimu.StochasticStyles.ThresholdCompression","text":"ThresholdCompression(threshold=1) <: CompressionStrategy\n\nCompressionStrategy that compresses a vector by threshold projection. Every entry in the vector with a value below the threshold is either set to zero, or increased to the threshold. The probabilty of setting it to zero is equal to abs(value) / threshold.\n\n\n\n\n\n","category":"type"},{"location":"stochasticstyles.html#Rimu.Interfaces.compress!","page":"Stochastic styles","title":"Rimu.Interfaces.compress!","text":"compress!([::CompressionStrategy,] v) -> ::NTuple{N,::Symbol}, ::NTuple{N}\ncompress!([::CompressionStrategy,] w, v) -> ::NTuple{N,::Symbol}, ::NTuple{N}\n\nCompress the vector v. The one-argument version compresses the vector in-place. The two-argument vector stores the result in w. The CompressionStrategy associated with the StochasticStyle of v is used to determine the type of compression.\n\nReturns two tuples, containing the names and values of statistics that are to be reported.\n\n\n\n\n\n","category":"function"},{"location":"stochasticstyles.html#Spawning-strategies-and-convenience-functions","page":"Stochastic styles","title":"Spawning strategies and convenience functions","text":"","category":"section"},{"location":"stochasticstyles.html","page":"Stochastic styles","title":"Stochastic styles","text":"The following functions and types are unexported, but are useful when defining new styles.","category":"page"},{"location":"stochasticstyles.html","page":"Stochastic styles","title":"Stochastic styles","text":"Modules = [StochasticStyles]\nPages = [\"spawning.jl\"]\nOrder = [:function,:method,:type]","category":"page"},{"location":"stochasticstyles.html#Rimu.StochasticStyles.diagonal_step!","page":"Stochastic styles","title":"Rimu.StochasticStyles.diagonal_step!","text":"diagonal_step!(w, op, add, val, threshold=0) -> (clones, deaths, zombies)\n\nPerform diagonal step on a walker add => val. Optional argument threshold sets the projection threshold. If eltype(w) is an Integer, the val is rounded to the nearest integer stochastically.\n\n\n\n\n\n","category":"function"},{"location":"stochasticstyles.html#Rimu.StochasticStyles.projected_deposit!","page":"Stochastic styles","title":"Rimu.StochasticStyles.projected_deposit!","text":"projected_deposit!(w, add, val, parent, threshold=0)\n\nLike deposit!, but performs threshold projection before spawning. If eltype(w) is an Integer, values are stochastically rounded.\n\nReturns the value deposited.\n\n\n\n\n\n","category":"function"},{"location":"stochasticstyles.html#Rimu.StochasticStyles.spawn!","page":"Stochastic styles","title":"Rimu.StochasticStyles.spawn!","text":"spawn!(s::SpawningStrategy, w, op::AbstractHamiltonian, add, val, boost)\nspawn!(s::SpawningStrategy, w, offdiags::AbstractOffdiagonals, add, val, boost)\n\nPerform stochastic spawns to w from address add with val walkers. val * boost controls the number of spawns performed.\n\nThis function should be overloaded in the second form, with offdiags as an argument.\n\nSee SpawningStrategy.\n\n\n\n\n\n","category":"function"},{"location":"stochasticstyles.html#Rimu.StochasticStyles.Bernoulli","page":"Stochastic styles","title":"Rimu.StochasticStyles.Bernoulli","text":"Bernoulli(threshold=0.0) <: SpawningStrategy\n\nPerform Bernoulli sampling. A spawn is attempted on each offdiagonal element with a probability that results in an expected number of spawns equal to the number of walkers on the spawning configuration. This is significantly less efficient than WithReplacement.\n\nIf the number of spawn attempts is greater than the number of offdiagonals, this functions like Exact, but is less efficient. For best performance, this strategy is to be used as a substrategy of DynamicSemistochastic.\n\nParameters\n\nthreshold sets the projection threshold.\n\nspawn! with this strategy returns the number of spawn attempts and the number of spawns.\n\n\n\n\n\n","category":"type"},{"location":"stochasticstyles.html#Rimu.StochasticStyles.DynamicSemistochastic","page":"Stochastic styles","title":"Rimu.StochasticStyles.DynamicSemistochastic","text":"DynamicSemistochastic(; strat, rel_threshold, abs_threshold) <: SpawningStrategy\n\nSpawningStrategy that behaves like strat when the number of walkers is low, but performs exact steps when it is high. What \"high\" means is controlled by the two thresholds described below.\n\nParameters\n\nstrat = WithReplacement(): a SpawningStrategy to use when the multiplication is not performed exactly. If the strat has a threshold different from zero, all spawns will be projected to that threshold.\nrel_threshold = 1.0: When deciding on whether to perform an exact spawn, this value is multiplied to the number of walkers. Should be set to 1 or more for best performance. This threshold is affected by the boost argument to spawn!.\nabs_threshold = Inf: When deciding on whether to perform an exact spawn, min(abs_threshold, num_offdiagonals) is used. This threshold is not affected by the boost argument to spawn!.\n\nSee e.g. WithoutReplacement for a description of the strat.threshold parameter.\n\nspawn! with this strategy returns the numbers of exact and inexact spawns, the number of spawn attempts and the number of spawns.\n\n\n\n\n\n","category":"type"},{"location":"stochasticstyles.html#Rimu.StochasticStyles.Exact","page":"Stochastic styles","title":"Rimu.StochasticStyles.Exact","text":"Exact(threshold=0.0) <: SpawningStrategy\n\nPerform an exact spawning step.\n\nParameters\n\nthreshold sets the projection threshold. If set to zero, no projection is performed.\n\nspawn! with this strategy returns the number of spawn attempts and the number of spawns.\n\n\n\n\n\n","category":"type"},{"location":"stochasticstyles.html#Rimu.StochasticStyles.SingleSpawn","page":"Stochastic styles","title":"Rimu.StochasticStyles.SingleSpawn","text":"SingleSpawn(threshold=0.0) <: SpawningStrategy\n\nPerform a single spawn. Useful as a building block for other stochastic styles.\n\nParameters\n\nthreshold sets the projection threshold. If set to zero, no projection is performed.\n\nspawn! with this strategy returns the number of spawn attempts (always 1) and the number of spawns.\n\n\n\n\n\n","category":"type"},{"location":"stochasticstyles.html#Rimu.StochasticStyles.SpawningStrategy","page":"Stochastic styles","title":"Rimu.StochasticStyles.SpawningStrategy","text":"SpawningStrategy\n\nA SpawningStrategy is used to control how spawns (multiplies with off-diagonal part of the column vector) are performed and can be passed to some of the StochasticStyles as keyword arguments.\n\nThe following concrete implementations are provided:\n\nExact: Perform exact spawns. Used by IsDeterministic.\nWithReplacement: The default stochastic spawning strategy. Spawns are chosen with replacement.\nDynamicSemistochastic: Behave like Exact when the number of spawns performed is high, and like a different substrategy otherwise. Used by IsDynamicSemistochastic.\nSingleSpawn: Perform a single spawn only. Used as a building block for other strategies.\nWithoutReplacement: Similar to WithReplacement, but ensures each spawn is only performed once. Only to be used as a substrategy of DynamicSemistochastic.\nBernoulli: Each spawn is attempted with a fixed probability. Only to be used as a substrategy of DynamicSemistochastic.\n\nInterface\n\nIn order to implement a new SpawningStrategy, define a method for spawn!.\n\n\n\n\n\n","category":"type"},{"location":"stochasticstyles.html#Rimu.StochasticStyles.WithReplacement","page":"Stochastic styles","title":"Rimu.StochasticStyles.WithReplacement","text":"WithReplacement(threshold=0.0) <: SpawningStrategy\n\nSpawningStrategy where spawn targets are sampled with replacement. This is the default spawning strategy for most of the StochasticStyles.\n\nParameters\n\nthreshold sets the projection threshold. If set to zero, no projection is performed.\n\nspawn! with this strategy returns the number of spawn attempts and the number of spawns.\n\n\n\n\n\n","category":"type"},{"location":"stochasticstyles.html#Rimu.StochasticStyles.WithoutReplacement","page":"Stochastic styles","title":"Rimu.StochasticStyles.WithoutReplacement","text":"WithoutReplacement(threshold=0.0) <: SpawningStrategy\n\nSpawningStrategy where spawn targets are sampled without replacement. This strategy needs to allocate a temporary array during spawning, which makes it significantly less efficient than WithReplacement.\n\nIf the number of spawn attempts is greater than the number of offdiagonals, this functions like Exact, but is less efficient. For best performance, this strategy is to be used as a substrategy of DynamicSemistochastic.\n\nParameters\n\nthreshold sets the projection threshold. If set to zero, no projection is performed.\n\nspawn! with this strategy returns the number of spawn attempts and the number of spawns.\n\n\n\n\n\n","category":"type"},{"location":"stochasticstyles.html#Index","page":"Stochastic styles","title":"Index","text":"","category":"section"},{"location":"stochasticstyles.html","page":"Stochastic styles","title":"Stochastic styles","text":"Pages   = [\"stochasticstyles.md\"]","category":"page"},{"location":"generated/BHM-example-mpi.html","page":"Rimu with MPI","title":"Rimu with MPI","text":"EditURL = \"../../../scripts/BHM-example-mpi.jl\"","category":"page"},{"location":"generated/BHM-example-mpi.html#Example-2:-Rimu-with-MPI","page":"Rimu with MPI","title":"Example 2: Rimu with MPI","text":"","category":"section"},{"location":"generated/BHM-example-mpi.html","page":"Rimu with MPI","title":"Rimu with MPI","text":"In this example, we will demonstrate using Rimu with MPI. MPI is a standard for parallel and distributed computing, and it is widely used in high-performance computing. Rimu provides support for MPI to enable parallel computations on multiple nodes.","category":"page"},{"location":"generated/BHM-example-mpi.html","page":"Rimu with MPI","title":"Rimu with MPI","text":"A runnable script for this example is located here. Run it with 2 MPI ranks with mpirun -n 2 julia BHM-example-mpi.jl.","category":"page"},{"location":"generated/BHM-example-mpi.html","page":"Rimu with MPI","title":"Rimu with MPI","text":"We start by importing Rimu.","category":"page"},{"location":"generated/BHM-example-mpi.html","page":"Rimu with MPI","title":"Rimu with MPI","text":"using Rimu","category":"page"},{"location":"generated/BHM-example-mpi.html","page":"Rimu with MPI","title":"Rimu with MPI","text":"Note that it is not necessary to initialise the MPI library, as this is already done automatically when Rimu is loaded.","category":"page"},{"location":"generated/BHM-example-mpi.html","page":"Rimu with MPI","title":"Rimu with MPI","text":"We will compute the ground state of a Bose-Hubbard model in momentum space with 10 particles in 10 sites.","category":"page"},{"location":"generated/BHM-example-mpi.html","page":"Rimu with MPI","title":"Rimu with MPI","text":"First, we define the Hamiltonian. We want to start from an address with zero momentum, which is located at mode 5 in the momentum grid. We put all 10 particles, all in the zero momentum mode.","category":"page"},{"location":"generated/BHM-example-mpi.html","page":"Rimu with MPI","title":"Rimu with MPI","text":"address = BoseFS(10, 5 => 10)","category":"page"},{"location":"generated/BHM-example-mpi.html","page":"Rimu with MPI","title":"Rimu with MPI","text":"BoseFS{10,10}(0, 0, 0, 0, 10, 0, 0, 0, 0, 0)","category":"page"},{"location":"generated/BHM-example-mpi.html","page":"Rimu with MPI","title":"Rimu with MPI","text":"We will set the interaction strength u to 6.0. The hopping strength t defaults to 1.0.","category":"page"},{"location":"generated/BHM-example-mpi.html","page":"Rimu with MPI","title":"Rimu with MPI","text":"H = HubbardMom1D(address; u=6.0)","category":"page"},{"location":"generated/BHM-example-mpi.html","page":"Rimu with MPI","title":"Rimu with MPI","text":"HubbardMom1D(fs\"|0 0 0 0 10 0 0 0 0 0⟩\"; u=6.0, t=1.0)","category":"page"},{"location":"generated/BHM-example-mpi.html","page":"Rimu with MPI","title":"Rimu with MPI","text":"We set a reporting strategy. We will use ReportToFile, which writes the reports directly to a file. This is useful for MPI calculations, as they will typically run non-interactively. The reports will be written to disk and can be inspected later. This has the additional benefit of reducing memory use in long-running jobs, as we don't need to keep the results in memory. It also allows us to inspect the results before the computation finishes and recover some data if it fails.","category":"page"},{"location":"generated/BHM-example-mpi.html","page":"Rimu with MPI","title":"Rimu with MPI","text":"The default settings will ensure that only the root MPI rank will write to the file, which is reasonable, and that data is saved in chunks of 1000 time steps. We choose to suppress progress messages with setting io=devnull.","category":"page"},{"location":"generated/BHM-example-mpi.html","page":"Rimu with MPI","title":"Rimu with MPI","text":"reporting_strategy = ReportToFile(\n    filename=\"result.arrow\",\n    io=devnull\n)","category":"page"},{"location":"generated/BHM-example-mpi.html","page":"Rimu with MPI","title":"Rimu with MPI","text":"ReportToFile{Symbol}(\"result.arrow\", 1, 1000, true, false, Base.DevNull(), :zstd, nothing)","category":"page"},{"location":"generated/BHM-example-mpi.html","page":"Rimu with MPI","title":"Rimu with MPI","text":"For running parallel computations with MPI, it is important that a compatible state vector is used. Here we explicitly set up an MPI-enabled state vector, PDVec, which is automatically MPI-distributed over the available number of MPI ranks. In addition, threading will be used with all threads available to Julia.","category":"page"},{"location":"generated/BHM-example-mpi.html","page":"Rimu with MPI","title":"Rimu with MPI","text":"initial_vector = PDVec(address => 1.0; style=IsDynamicSemistochastic())","category":"page"},{"location":"generated/BHM-example-mpi.html","page":"Rimu with MPI","title":"Rimu with MPI","text":"1-element PDVec: style = IsDynamicSemistochastic{Float64,ThresholdCompression,DynamicSemistochastic}()\n  fs\"|0 0 0 0 10 0 0 0 0 0⟩\" => 1.0","category":"page"},{"location":"generated/BHM-example-mpi.html","page":"Rimu with MPI","title":"Rimu with MPI","text":"Now, we can set other parameters as usual. We will perform the computation with 10000 walkers and for 10000 time steps. We will also compute the projected energy by passing a ProjectedEnergy object as a post_step_strategy.","category":"page"},{"location":"generated/BHM-example-mpi.html","page":"Rimu with MPI","title":"Rimu with MPI","text":"problem = ProjectorMonteCarloProblem(H;\n    start_at=initial_vector,\n    reporting_strategy,\n    post_step_strategy=ProjectedEnergy(H, initial_vector),\n    target_walkers=10_000,\n    time_step=1e-4,\n    last_step=10_000\n);","category":"page"},{"location":"generated/BHM-example-mpi.html","page":"Rimu with MPI","title":"Rimu with MPI","text":"The @mpi_root macro performs an action on the root rank only, which is useful for printing.","category":"page"},{"location":"generated/BHM-example-mpi.html","page":"Rimu with MPI","title":"Rimu with MPI","text":"@mpi_root println(\"Running FCIQMC with \", mpi_size(), \" rank(s).\")","category":"page"},{"location":"generated/BHM-example-mpi.html","page":"Rimu with MPI","title":"Rimu with MPI","text":"Running FCIQMC with 1 rank(s).\n","category":"page"},{"location":"generated/BHM-example-mpi.html","page":"Rimu with MPI","title":"Rimu with MPI","text":"Finally, we can run the computation.","category":"page"},{"location":"generated/BHM-example-mpi.html","page":"Rimu with MPI","title":"Rimu with MPI","text":"simulation = solve(problem);\n\n@mpi_root println(\"Simulation success = \", simulation.success)","category":"page"},{"location":"generated/BHM-example-mpi.html","page":"Rimu with MPI","title":"Rimu with MPI","text":"Simulation success = true\n","category":"page"},{"location":"generated/BHM-example-mpi.html","page":"Rimu with MPI","title":"Rimu with MPI","text":"Once the calculation is done, the results are available in the arrow file on disk.","category":"page"},{"location":"generated/BHM-example-mpi.html","page":"Rimu with MPI","title":"Rimu with MPI","text":"In a typical workflow, the simulation results would be loaded from disk and analysed in the REPL or with a separate script. The arrow file can be loaded into a DataFrame with metadata using the load_df function.","category":"page"},{"location":"generated/BHM-example-mpi.html","page":"Rimu with MPI","title":"Rimu with MPI","text":"","category":"page"},{"location":"generated/BHM-example-mpi.html","page":"Rimu with MPI","title":"Rimu with MPI","text":"This page was generated using Literate.jl.","category":"page"},{"location":"index.html#Rimu.jl-Package-Guide","page":"Guide","title":"Rimu.jl Package Guide","text":"","category":"section"},{"location":"index.html","page":"Guide","title":"Guide","text":"Random Integrators for many-body quantum systems","category":"page"},{"location":"index.html","page":"Guide","title":"Guide","text":"The grand aim is to develop a toolbox for many-body quantum systems that can be represented by a Hamiltonian in second quantisation language. Currently supported features include:","category":"page"},{"location":"index.html#Interacting-with-quantum-many-body-models","page":"Guide","title":"Interacting with quantum many-body models","text":"","category":"section"},{"location":"index.html","page":"Guide","title":"Guide","text":"Full configuration interaction quantum Monte Carlo (FCIQMC), a flavour of projector quantum Monte Carlo for stochastically solving the time-independent Schrödinger equation. See References.\nMatrix-free exact diagonalisation of quantum Hamiltonians (with external package KrylovKit.jl).\nSparse matrix representation of quantum Hamiltonians for exact diagonalisation with sparse linear algebra package of your choice (fastest for small systems).","category":"page"},{"location":"index.html#Representing-quantum-many-body-models","page":"Guide","title":"Representing quantum many-body models","text":"","category":"section"},{"location":"index.html","page":"Guide","title":"Guide","text":"A composable and efficient type system for representing single- and multi-component Fock states of bosons, fermions, and mixtures thereof, to be used as a basis for representing Hamiltonians.\nAn interface for defining many-body Hamiltonians.\nPre-defined models include:\nHubbard model in real space for bosons and fermions and mixtures in 1, 2, and 3 spatial dimensions.\nHubbard and related lattice models in momentum space for bosons and fermions in one spatial dimension.\nTranscorrelated Hamiltonian for contact interactions in one dimension for fermions, as described in Jeszenski et al. arXiv:1806.11268.","category":"page"},{"location":"index.html#Statistical-analysis-of-Monte-Carlo-data","page":"Guide","title":"Statistical analysis of Monte Carlo data","text":"","category":"section"},{"location":"index.html","page":"Guide","title":"Guide","text":"Blocking analysis following Flyvberg & Peterson JCP (1989), and automated with hypothesis testing by Jonsson","category":"page"},{"location":"index.html","page":"Guide","title":"Guide","text":"PRE (2018).","category":"page"},{"location":"index.html","page":"Guide","title":"Guide","text":"Unbiased estimators for the ground state energy by re-reweighting following Nightingale & Blöte PRB (1986) and Umrigar et al. JCP (1993).","category":"page"},{"location":"index.html","page":"Guide","title":"Guide","text":"The code supports parallelisation with MPI (harnessing MPI.jl) as well as native Julia threading (experimental). In the future, we may add tools to solve the time-dependent Schrödinger equation and Master equations for open system time evolution.","category":"page"},{"location":"index.html","page":"Guide","title":"Guide","text":"Concept: Joachim Brand and Elke Pahl.","category":"page"},{"location":"index.html","page":"Guide","title":"Guide","text":"Contributors: Joachim Brand, Elke Pahl, Mingrui Yang, Matija Čufar, Chris Bradly.","category":"page"},{"location":"index.html","page":"Guide","title":"Guide","text":"Discussions, help, and additional contributions are acknowledged by Ali Alavi, Didier Adrien, Chris Scott (NeSI), Alexander Pletzer (NeSI).","category":"page"},{"location":"index.html#Installation","page":"Guide","title":"Installation","text":"","category":"section"},{"location":"index.html#Installing-Rimu-for-usage","page":"Guide","title":"Installing Rimu for usage","text":"","category":"section"},{"location":"index.html","page":"Guide","title":"Guide","text":"Rimu is a registered package and can be installed with the package manager. Hit the ] key at the Julia REPL to get into Pkg mode and type","category":"page"},{"location":"index.html","page":"Guide","title":"Guide","text":"pkg> add Rimu","category":"page"},{"location":"index.html","page":"Guide","title":"Guide","text":"Alternatively, use","category":"page"},{"location":"index.html","page":"Guide","title":"Guide","text":"julia> using Pkg; Pkg.add(name=\"Rimu\")","category":"page"},{"location":"index.html","page":"Guide","title":"Guide","text":"in order to install Rimu from a script.","category":"page"},{"location":"index.html#Installing-Rimu-for-development","page":"Guide","title":"Installing Rimu for development","text":"","category":"section"},{"location":"index.html","page":"Guide","title":"Guide","text":"In order to be able to edit the source code, push changes, change and make new git branches, etc., clone the git repository with git clone to a convenient location, e.g. ~/mygitpackagefolder/. Then hit the ] key at the Julia REPL to get into Pkg mode and type","category":"page"},{"location":"index.html","page":"Guide","title":"Guide","text":"pkg> develop ~/mygitpackagefolder/rimu.jl","category":"page"},{"location":"index.html","page":"Guide","title":"Guide","text":"where the file path has to be adjusted to the location of the cloned git repository.","category":"page"},{"location":"index.html#Usage","page":"Guide","title":"Usage","text":"","category":"section"},{"location":"index.html","page":"Guide","title":"Guide","text":"The package is now installed and can be imported with","category":"page"},{"location":"index.html","page":"Guide","title":"Guide","text":"julia> using Rimu","category":"page"},{"location":"index.html","page":"Guide","title":"Guide","text":"When planning to edit the code of the package it is advisable to use the Revise package by issuing","category":"page"},{"location":"index.html","page":"Guide","title":"Guide","text":"julia> using Revise","category":"page"},{"location":"index.html","page":"Guide","title":"Guide","text":"before using Rimu. This will track any changes made to the source code of Rimu and the changed package will be available after saving the source code (hopefully, and most of the time, without restarting the Julia REPL).","category":"page"},{"location":"index.html","page":"Guide","title":"Guide","text":"Rimu offers a number of tools for representing Hamiltonians (see Hamiltonians) and state vectors / wave functions (see DictVectors) as well as algorithms to find the ground state, e.g. ProjectorMonteCarloProblem, ExactDiagonalizationProblem.","category":"page"},{"location":"index.html#Scripts","page":"Guide","title":"Scripts","text":"","category":"section"},{"location":"index.html","page":"Guide","title":"Guide","text":"Rimu is written as a Julia package to be imported with using Rimu as described above. It supplies useful functions and types. Performing actual calculations and analysing the results is done with scripts. The folder scripts/ contains a collections of scripts that are either examples for use of the Rimu package or useful scripts for data analysis. In particular:","category":"page"},{"location":"index.html","page":"Guide","title":"Guide","text":"scripts/BHM-example.jl is an example script that runs fciqmc on the 1D Bose-Hubbard model. A data frame with results is written to the file fciqmcdata.arrow.\nscripts/BHM-example-mpi.jl demonstrates basic usage of Rimu with MPI.","category":"page"},{"location":"index.html#MPI","page":"Guide","title":"MPI","text":"","category":"section"},{"location":"index.html","page":"Guide","title":"Guide","text":"The Rimu package can run in parallel on different processes or node and distribute work by making use of MPI, or \"message passing interface\". For example, running","category":"page"},{"location":"index.html","page":"Guide","title":"Guide","text":"> julia scripts/BHM-example.jl","category":"page"},{"location":"index.html","page":"Guide","title":"Guide","text":"will run on one processor with the main computation (i.e. after package loading and compilation) completing in 2.69 seconds.","category":"page"},{"location":"index.html","page":"Guide","title":"Guide","text":"Running","category":"page"},{"location":"index.html","page":"Guide","title":"Guide","text":"> mpirun -np 4 julia scripts/BHM-example-mpi.jl","category":"page"},{"location":"index.html","page":"Guide","title":"Guide","text":"on the same hardware makes use of 4 cores and the main part completes in 1.04 seconds, a speedup factor of 2.6. This seems reasonable, given that extra work needs to be done for communicating between different processes.","category":"page"},{"location":"index.html","page":"Guide","title":"Guide","text":"Using MPI parallelism with Rimu is easy. Enabling MPI enabled automatically if PDVec is used to store a vector. In that case, data will be stored in a distributed fashion among the MPI ranks and only communicated between ranks when necessary.","category":"page"},{"location":"index.html#Compatibility","page":"Guide","title":"Compatibility","text":"","category":"section"},{"location":"index.html","page":"Guide","title":"Guide","text":"We recommend using Rimu with the latest Julia release version. Rimu requires at least julia v1.9.","category":"page"},{"location":"index.html#References","page":"Guide","title":"References","text":"","category":"section"},{"location":"index.html","page":"Guide","title":"Guide","text":"The code implements the FCIQMC algorithm originally described in","category":"page"},{"location":"index.html","page":"Guide","title":"Guide","text":"\"Fermion Monte Carlo without fixed nodes: A game of life, death, and annihilation in Slater determinant space\", G. H. Booth, A. J. W. Thom, A. Alavi, J. Chem. Phys. 131, 054106 (2009).\n\"Communications: Survival of the fittest: accelerating convergence in full configuration-interaction quantum Monte Carlo.\", D. Cleland,  G. H. Booth, A. Alavi, J. Chem. Phys. 132, 041103 (2010).","category":"page"},{"location":"index.html","page":"Guide","title":"Guide","text":"Scientific papers describing additional features implemented in Rimu:","category":"page"},{"location":"index.html","page":"Guide","title":"Guide","text":"\"Improved walker population control for full configuration interaction quantum Monte Carlo\", M. Yang, E. Pahl, J. Brand, J. Chem. Phys. 153, 170143 (2020); arXiv:2008.01927.\n\"Stochastic differential equation approach to understanding the population control bias in full configuration interaction quantum Monte Carlo\", J. Brand, M. Yang, E. Pahl, arXiv:2103.07800 (2021).","category":"page"},{"location":"index.html","page":"Guide","title":"Guide","text":"Papers discussing results obtained with Rimu:","category":"page"},{"location":"index.html","page":"Guide","title":"Guide","text":"\"Polaron-Depleton Transition in the Yrast Excitations of a One-Dimensional Bose Gas with a Mobile Impurity\", M. Yang, M. Čufar, E. Pahl, J. Brand, Condens. Matter 7, 15 (2022).\n\"Magnetic impurity in a one-dimensional few-fermion system\", L. Rammelmüller, D. Huber, M. Čufar, J. Brand, A. Volosniev, arXiv:2204.01606 (2022).","category":"page"},{"location":"dictvectors.html#Module-DictVectors","page":"Dict vectors","title":"Module DictVectors","text":"","category":"section"},{"location":"dictvectors.html","page":"Dict vectors","title":"Dict vectors","text":"DictVectors\nAbstractDVec","category":"page"},{"location":"dictvectors.html#Rimu.DictVectors","page":"Dict vectors","title":"Rimu.DictVectors","text":"Module that provides concrete implementations of the AbstractDVec interface.\n\nDVec: basic AbstractDVec\nPDVec: parallel AbstractDVec with MPI and initiator support\nInitiatorDVec: allows storing information about initiator status\n\nSee Interfaces.\n\n\n\n\n\n","category":"module"},{"location":"dictvectors.html#Rimu.Interfaces.AbstractDVec","page":"Dict vectors","title":"Rimu.Interfaces.AbstractDVec","text":"AbstractDVec{K,V}\n\nAbstract data type for vector-like data structures with sparse storage. While conceptually AbstractDVecs represent elements of a vector space over a scalar type V, they are indexed by an arbitrary type K (could be non-integers) similar to dictionaries. They support the interface from VectorInterface.jl and are designed to work well for quantum Monte Carlo with ProjectorMonteCarloProblem and for matrix-free linear algebra with KrylovKit.\n\nConcrete implementations are available as PDVec, DVec, and InitiatorDVec.\n\nAbstractDVecs have a StochasticStyle which selects the spawning algorithm in FCIQMC. Looking up an element that is not stored in the AbstractDVec should return a zero, and setting a value to zero should remove it from the vector. To iterate over an AbstractDVec, use keys, pairs, or values. When possible, use reduction functions such as sum or mapreduce.\n\nInterface\n\nThe interface is similar to the AbstractDict interface, but with the changed behaviour as noted above.  Implement what would be needed for the AbstractDict interface (pairs, keys, values, setindex!, getindex, delete!, length, empty, empty!) and, in addition:\n\nStochasticStyle\nstorage returns an AbstractDict storing the raw data with possibly different valtype than V.\ndeposit!\n\nA default implementation for the VectorInterface.jl interface is provided through the above functions.\n\nSee also DictVectors, Interfaces.\n\n\n\n\n\n","category":"type"},{"location":"dictvectors.html#Concrete-implementations","page":"Dict vectors","title":"Concrete implementations","text":"","category":"section"},{"location":"dictvectors.html","page":"Dict vectors","title":"Dict vectors","text":"DVec\nInitiatorDVec\nPDVec","category":"page"},{"location":"dictvectors.html#Rimu.DictVectors.DVec","page":"Dict vectors","title":"Rimu.DictVectors.DVec","text":"DVec{K,V,D<:AbstractDict{K,V},S}\n\nDictionary-based vector-like data structure for use with FCIQMC and KrylovKit. While mostly behaving like a Dict, it supports various linear algebra operations such as norm and dot. It has a StochasticStyle that is used to select an appropriate spawning strategy in the FCIQMC algorithm.\n\nSee also: AbstractDVec, InitiatorDVec, PDVec.\n\nConstructors\n\nDVec(dict::AbstractDict[; style, capacity]): create a DVec with dict for storage. Note that the data may or may not be copied.\nDVec(args...[; style, capacity]): args... are passed to the Dict constructor. The Dict is used for storage.\nDVec{K,V}([; style, capacity]): create an empty DVec{K,V}.\nDVec(dv::AbstractDVec[; style, capacity]): create a DVec with the same contents as  adv. The style is inherited from dv by default.\n\nThe default style is selected based on the DVec's valtype (see default_style). If a style is given and the valtype does not match the style's eltype, the values are converted to an appropriate type.\n\nThe capacity argument is optional and sets the initial size of the DVec via Base.sizehint!.\n\nExamples\n\njulia> dv = DVec(:a => 1)\nDVec{Symbol,Int64} with 1 entry, style = IsStochasticInteger{Int64}()\n  :a => 1\n\njulia> dv = DVec(:a => 2, :b => 3; style=IsDeterministic())\nDVec{Symbol,Float64} with 2 entries, style = IsDeterministic{Float64}()\n  :a => 2.0\n  :b => 3.0\n\n\n\n\n\n","category":"type"},{"location":"dictvectors.html#Rimu.DictVectors.InitiatorDVec","page":"Dict vectors","title":"Rimu.DictVectors.InitiatorDVec","text":"InitiatorDVec{K,V} <: AbstractDVec{K,V}\n\nDictionary-based vector-like data structure for use with ProjectorMonteCarloProblem and KrylovKit.jl. See AbstractDVec. Functionally identical to DVec, but contains InitiatorValues internally in order to facilitate initiator methods. Initiator methods for controlling the Monte Carlo sign problem were first introduced in J. Chem. Phys. 132, 041103 (2010). How the initiators are handled is controlled by specifying an InitiatorRule with the initiator keyword argument (see below).\n\nSee also: AbstractDVec, DVec, PDVec.\n\nConstructors\n\nInitiatorDVec(dict::AbstractDict[; style, initiator, capacity]): create an InitiatorDVec with dict for storage.  Note that the data may or may not be copied.\nInitiatorDVec(args...[; style, initiator, capacity]): args... are passed to the Dict constructor. The Dict is used for storage.\nInitiatorDVec{K,V}([; style, initiator, capacity]): create an empty InitiatorDVec{K,V}.\nInitiatorDVec(dv::AbstractDVec[; style, initiator, capacity]): create an InitiatorDVec  with the same contents as dv. The style is inherited from dv by default.\n\nKeyword  arguments\n\nstyle: A valid StochasticStyle.  The default is selected based on the InitiatorDVec's valtype (see default_style). If a style is given and the valtype does not match the style's eltype, the values are converted to an appropriate type.\ninitiator = Initiator(1): A valid InitiatorRule. See Initiator.\ncapacity: Indicative size as Int. Optional. Sets the initial size of the InitiatorDVec via Base.sizehint!.\n\n\n\n\n\n","category":"type"},{"location":"dictvectors.html#Rimu.DictVectors.PDVec","page":"Dict vectors","title":"Rimu.DictVectors.PDVec","text":"PDVec{K,V}(; kwargs...)\nPDVec(iter; kwargs...)\nPDVec(pairs...; kwargs...)\n\nDictionary-based vector-like data structure for use with FCIQMC and KrylovKit.jl. While mostly behaving like a Dict, it supports various linear algebra operations such as norm and dot, and the interface defined in VectorInterface.\n\nThe P in PDVec stands for parallel. PDVecs perform mapreduce, foreach, and various linear algebra operations in a threaded manner. If MPI is available, these operations are automatically distributed as well. As such it is not recommended to iterate over pairs, keys, or values directly unless explicitly performing them on the localpart of the vector.\n\nSee also: AbstractDVec, DVec, InitiatorDVec.\n\nKeyword arguments\n\nstyle =default_style(V): A StochasticStyle that is used to select the spawning strategy in the FCIQMC algorithm.\ninitiator =NonInitiator(): An InitiatorRule, used in FCIQMC to remove the sign problem.\ncommunicator: A Communicator that controls how operations are performed when using MPI. The defaults are NotDistributed when not using MPI and AllToAll when using MPI.\n\nExtended Help\n\nSegmentation\n\nThe vector is split into Threads.nthreads() subdictionaries called segments. Which dictionary a key-value pair is mapped to is determined by the hash of the key. The purpose of this segmentation is to allow parallel processing - functions such as mapreduce, add! or dot (full list below) process each subdictionary on a separate thread.\n\nSee also PDWorkingMemory.\n\nExample\n\njulia> add = FermiFS2C((1,1,0,0), (0,0,1,1));\n\njulia> op = HubbardMom1D(add; t=4/π^2, u=4);\n\njulia> pv = PDVec(add => 1.0)\n1-element PDVec: style = IsDeterministic{Float64}()\n  fs\"|↑↑↓↓⟩\" => 1.0\n\njulia> pv = op * pv\n7-element PDVec: style = IsDeterministic{Float64}()\n  fs\"|↑↓↑↓⟩\" => 1.0\n  fs\"|↑↑↓↓⟩\" => 4.0\n  fs\"|↓↑↓↑⟩\" => 1.0\n  fs\"|↓↑↑↓⟩\" => -1.0\n  fs\"|⇅⋅⋅⇅⟩\" => 1.0\n  fs\"|↑↓↓↑⟩\" => -1.0\n  fs\"|⋅⇅⇅⋅⟩\" => 1.0\n\njulia> scale!(pv, -1); pv\n7-element PDVec: style = IsDeterministic{Float64}()\n  fs\"|↑↓↑↓⟩\" => -1.0\n  fs\"|↑↑↓↓⟩\" => -4.0\n  fs\"|↓↑↓↑⟩\" => -1.0\n  fs\"|↓↑↑↓⟩\" => 1.0\n  fs\"|⇅⋅⋅⇅⟩\" => -1.0\n  fs\"|↑↓↓↑⟩\" => 1.0\n  fs\"|⋅⇅⇅⋅⟩\" => -1.0\n\njulia> dest = similar(pv)\n0-element PDVec: style = IsDeterministic{Float64}()\n\njulia> map!(x -> x + 2, dest, values(pv))\n7-element PDVec: style = IsDeterministic{Float64}()\n  fs\"|↑↓↑↓⟩\" => 1.0\n  fs\"|↑↑↓↓⟩\" => -2.0\n  fs\"|↓↑↓↑⟩\" => 1.0\n  fs\"|↓↑↑↓⟩\" => 3.0\n  fs\"|⇅⋅⋅⇅⟩\" => 1.0\n  fs\"|↑↓↓↑⟩\" => 3.0\n  fs\"|⋅⇅⇅⋅⟩\" => 1.0\n\njulia> sum(values(pv))\n-6.0\n\njulia> dot(dest, pv)\n10.0\n\njulia> dot(dest, op, pv)\n44.0\n\nMPI\n\nWhen MPI is active, all parallel reductions are automatically reduced across MPI ranks with a call to MPI.Allreduce!.\n\nIn a distributed setting, PDVec does not support iteration without first making it explicit the iteration is only to be performed on the local segments of the vector. This is done with localpart. In general, even when not using MPI, it is best practice to use localpart when explicit iteration is required.\n\nUse with KrylovKit\n\nPDVec is compatible with eigsolve from KrylovKit.jl. When used, the diagonalisation is performed in a threaded and distributed manner. Using multiple MPI ranks with this method does not distribute the memory load effectively, but does result in significant speedups.\n\nExample\n\njulia> using KrylovKit\n\njulia> add = BoseFS((0,0,5,0,0));\n\njulia> op = HubbardMom1D(add; u=6.0);\n\njulia> pv = PDVec(add => 1.0);\n\njulia> results = eigsolve(op, pv, 4, :SR);\n\njulia> results[1][1:4]\n4-element Vector{Float64}:\n -3.4311156892322234\n  1.1821748602612363\n  3.7377753753082823\n  6.996390417443125\n\nParallel functionality\n\nThe following functions are threaded and MPI-compatible:\n\nFrom Base: mapreduce and derivatives (sum, prod, reduce...), all, any,map! (on values only), +, -, *\nFrom LinearAlgebra: rmul!, lmul!, mul!, axpy!, axpby!, dot, norm, normalize, normalize!\nThe full interface defined in VectorInterface.jl\n\n\n\n\n\n","category":"type"},{"location":"dictvectors.html#Interface-functions","page":"Dict vectors","title":"Interface functions","text":"","category":"section"},{"location":"dictvectors.html","page":"Dict vectors","title":"Dict vectors","text":"deposit!\nstorage\nfreeze\nlocalpart\napply_operator!\nsort_into_targets!\nworking_memory\nmapreduce\nsum_mutating!","category":"page"},{"location":"dictvectors.html#Rimu.Interfaces.deposit!","page":"Dict vectors","title":"Rimu.Interfaces.deposit!","text":"deposit!(w::InitiatorDVec, add, val, p_add=>p_val)\n\nAdd val into w at address add as an AbstractInitiatorValue.\n\n\n\n\n\ndeposit!(w::AbstractDVec, add, val, parent::Pair)\n\nAdd val into w at address add, taking into account initiator rules if applicable. parent contains the address => value pair from which the pair add => val was created. InitiatorDVec can intercept this and add its own functionality.\n\n\n\n\n\n","category":"function"},{"location":"dictvectors.html#Rimu.Interfaces.storage","page":"Dict vectors","title":"Rimu.Interfaces.storage","text":"storage(dvec) -> AbstractDict\n\nReturn the raw storage associated with dvec as an AbstractDict. Used in MPI communication.\n\n\n\n\n\n","category":"function"},{"location":"dictvectors.html#OrderedCollections.freeze","page":"Dict vectors","title":"OrderedCollections.freeze","text":"freeze(dv)\n\nCreate a \"frozen\" version of dv which can no longer be modified or used in the conventional manner, but supports faster dot products.\n\n\n\n\n\n","category":"function"},{"location":"dictvectors.html#Rimu.Interfaces.localpart","page":"Dict vectors","title":"Rimu.Interfaces.localpart","text":"localpart(dv) -> AbstractDVec\n\nGet the part of dv that is located on this MPI rank. Returns dv itself for vectors that can't be MPI distributed (DVecs and InitiatorDVecs).\n\n\n\n\n\n","category":"function"},{"location":"dictvectors.html#Rimu.Interfaces.apply_operator!","page":"Dict vectors","title":"Rimu.Interfaces.apply_operator!","text":"apply_operator!(working_memory, target, source, operator, boost=1, compress=Val(true)) ->\n    stat_names, stats, working_memory, target\n\nPerform a single matrix(/operator)-vector multiplication:\n\nv^(n + 1) = hatT v^(n) \n\nwhere hatT is the operator, v^(n+1) is the target and v^(n) is the source. The working_memory can be used as temporary storage.\n\nThe boost argument is passed to apply_column! and increases the number of spawns performed. For the operator to be applied without compressing the vector after, set compress to Val(false).\n\nWhether the operation is performed in a stochastic, semistochastic, or determistic way is controlled by the trait StochasticStyle(target). See StochasticStyle.\n\nReturns the step stats generated by the StochasticStyle, the working memory and the target vector. target and working_memory may be mutated and/or swapped.\n\n\n\n\n\n","category":"function"},{"location":"dictvectors.html#Rimu.Interfaces.sort_into_targets!","page":"Dict vectors","title":"Rimu.Interfaces.sort_into_targets!","text":"sort_into_targets!(target, source, stats) -> target, source, agg_stats\n\nAggregate coefficients from source to target and from stats to agg_stats according to thread- or MPI-level parallelism.\n\nReturns the new target and source, as the sorting process may involve swapping them.\n\n\n\n\n\n","category":"function"},{"location":"dictvectors.html#Rimu.Interfaces.working_memory","page":"Dict vectors","title":"Rimu.Interfaces.working_memory","text":"working_memory(dv::AbstractDVec)\n\nCreate a working memory instance compatible with dv. The working memory must be compatible with sort_into_targets! and apply_operator!.\n\n\n\n\n\n","category":"function"},{"location":"dictvectors.html#Base.mapreduce","page":"Dict vectors","title":"Base.mapreduce","text":"mapreduce(f, op, keys(::PDVec); [init])\nmapreduce(f, op, values(::PDVec); [init])\nmapreduce(f, op, pairs(::PDVec); [init])\n\nPerform a parallel reduction operation on PDVecs. MPI-compatible. Is used in the definition of various functions from Base such as reduce, sum, prod, etc.\n\ninit, if provided, must be a neutral element for op.\n\n\n\n\n\n","category":"function"},{"location":"dictvectors.html#Rimu.Interfaces.sum_mutating!","page":"Dict vectors","title":"Rimu.Interfaces.sum_mutating!","text":"sum_mutating!(accumulator, [f! = add!], keys(::PDVec); [init])\nsum_mutating!(accumulator, [f! = add!], values(::PDVec); [init])\nsum_mutating!(accumulator, [f! = add!], pairs(::PDVec); [init])\n\nPerform a parallel sum on PDVecs for vector-valued results while minimizing allocations. The result of the sum will be added to accumulator and stored in accumulator. MPI-compatible. If f! is provided, it must accept two arguments, the first being the accumulator and the second the element of the iterator. Otherwise,add! is used.\n\nIf provided, init must be a neutral element for + and of the same type as accumulator.\n\nSee also mapreduce.\n\n\n\n\n\nsum_mutating!(accumulator, [f! = add!], iterator)\n\nAdd the sum of elements in iterator to accumulator, storing the result in accumulator. If f! is provided, it must accept two arguments, the first being the accumulator and the second the element of the iterator. Otherwise, add! is used.\n\nSee also mapreduce.\n\n\n\n\n\n","category":"function"},{"location":"dictvectors.html#Supported-operations","page":"Dict vectors","title":"Supported operations","text":"","category":"section"},{"location":"dictvectors.html","page":"Dict vectors","title":"Dict vectors","text":"AbstractDVecs generally support most operations that are defined on Vectors and Dicts. This includes the interface from VectorInterface.jl, and many functions from the LinearAlgebra standard library.","category":"page"},{"location":"dictvectors.html","page":"Dict vectors","title":"Dict vectors","text":"A significant difference between AbstractDVecs, Vectors, and Dicts, is that iteration on them is disabled by default. Iteration must be explicitly performed on keys, values, or pairs, however, it is highly recommended you use mapreduce, reduce, or similar functions when performing reductions, as that will make the operations compatible with MPI.","category":"page"},{"location":"dictvectors.html","page":"Dict vectors","title":"Dict vectors","text":"In addition, Rimu defines the following function.","category":"page"},{"location":"dictvectors.html","page":"Dict vectors","title":"Dict vectors","text":"walkernumber\nwalkernumber_and_length\ndot_from_right","category":"page"},{"location":"dictvectors.html#Rimu.DictVectors.walkernumber","page":"Dict vectors","title":"Rimu.DictVectors.walkernumber","text":"walkernumber(v)\n\nCompute the number of walkers in v. It is used for updating the shift. Overload this function for modifying population control.\n\nIn most cases walkernumber(v) is identical to norm(v, 1). For AbstractDVecs with complex coefficients it reports the one norm separately for the real and the imaginary part as a ComplexF64. See Norm1ProjectorPPop.\n\n\n\n\n\n","category":"function"},{"location":"dictvectors.html#Rimu.DictVectors.walkernumber_and_length","page":"Dict vectors","title":"Rimu.DictVectors.walkernumber_and_length","text":"walkernumber_and_length(v)\n\nCompute walkernumber and length at the same time. When MPI is used, this is more efficient than calling them separately.\n\n\n\n\n\n","category":"function"},{"location":"dictvectors.html#Rimu.Interfaces.dot_from_right","page":"Dict vectors","title":"Rimu.Interfaces.dot_from_right","text":"dot_from_right(w, op::AbstractObservable, v)\n\nInternal function evaluates the 3-argument dot() function in order from right to left.\n\n\n\n\n\n","category":"function"},{"location":"dictvectors.html#Projectors","page":"Dict vectors","title":"Projectors","text":"","category":"section"},{"location":"dictvectors.html","page":"Dict vectors","title":"Dict vectors","text":"AbstractProjector\nNormProjector\nNorm2Projector\nUniformProjector\nNorm1ProjectorPPop\nRimu.DictVectors.FrozenDVec\nRimu.DictVectors.FrozenPDVec","category":"page"},{"location":"dictvectors.html#Rimu.DictVectors.AbstractProjector","page":"Dict vectors","title":"Rimu.DictVectors.AbstractProjector","text":"Abstract supertype for projectors to be used in in lieu of DVecs or Vectors in dot products. Implemented subtypes:\n\nUniformProjector\nNormProjector\nNorm2Projector\nNorm1ProjectorPPop\n\nSee also PostStepStrategy for use of projectors in ProjectorMonteCarloProblem.\n\nInterface\n\nDefine a method for LinearAlgebra.dot(projector, v).\n\n\n\n\n\n","category":"type"},{"location":"dictvectors.html#Rimu.DictVectors.NormProjector","page":"Dict vectors","title":"Rimu.DictVectors.NormProjector","text":"NormProjector() <: AbstractProjector\n\nResults in computing the one-norm when used in dot(). E.g.\n\ndot(NormProjector(),x)\n-> norm(x,1)\n\nNormProjector() thus represents the vector sign.(x).\n\nSee also PostStepStrategy, and AbstractProjector for use of projectors in ProjectorMonteCarloProblem.\n\n\n\n\n\n","category":"type"},{"location":"dictvectors.html#Rimu.DictVectors.Norm2Projector","page":"Dict vectors","title":"Rimu.DictVectors.Norm2Projector","text":"Norm2Projector() <: AbstractProjector\n\nResults in computing the two-norm when used in dot(). E.g.\n\ndot(NormProjector(),x)\n-> norm(x,2) # with type Float64\n\nSee also PostStepStrategy, and AbstractProjector for use of projectors in ProjectorMonteCarloProblem.\n\n\n\n\n\n","category":"type"},{"location":"dictvectors.html#Rimu.DictVectors.UniformProjector","page":"Dict vectors","title":"Rimu.DictVectors.UniformProjector","text":"UniformProjector() <: AbstractProjector\n\nRepresents a vector with all elements 1. To be used with dot(). Minimizes memory allocations.\n\nUniformProjector()⋅v == sum(v)\ndot(UniformProjector(), LO, v) == sum(LO*v)\n\nSee also PostStepStrategy, and AbstractProjector for use of projectors in ProjectorMonteCarloProblem.\n\n\n\n\n\n","category":"type"},{"location":"dictvectors.html#Rimu.DictVectors.Norm1ProjectorPPop","page":"Dict vectors","title":"Rimu.DictVectors.Norm1ProjectorPPop","text":"Norm1ProjectorPPop() <: AbstractProjector\n\nResults in computing the one-norm per population when used in dot(). E.g.\n\ndot(Norm1ProjectorPPop(),x)\n-> norm(real.(x),1) + im*norm(imag.(x),1)\n\nSee also PostStepStrategy, and AbstractProjector for use of projectors in ProjectorMonteCarloProblem.\n\n\n\n\n\n","category":"type"},{"location":"dictvectors.html#Rimu.DictVectors.FrozenDVec","page":"Dict vectors","title":"Rimu.DictVectors.FrozenDVec","text":"FrozenDVec\n\nA frozen DVec(s) can't be modified or used in the conventional manner, but support faster dot products. See: freeze.\n\n\n\n\n\n","category":"type"},{"location":"dictvectors.html#Rimu.DictVectors.FrozenPDVec","page":"Dict vectors","title":"Rimu.DictVectors.FrozenPDVec","text":"FrozenPDVec\n\nParallel version of FrozenDVec. See: freeze, PDVec.\n\n\n\n\n\n","category":"type"},{"location":"dictvectors.html#Initiator-rules","page":"Dict vectors","title":"Initiator rules","text":"","category":"section"},{"location":"dictvectors.html","page":"Dict vectors","title":"Dict vectors","text":"Rimu.DictVectors.InitiatorRule\nRimu.DictVectors.AbstractInitiatorValue\nRimu.DictVectors.InitiatorValue\nRimu.DictVectors.initiator_valtype\nRimu.DictVectors.to_initiator_value\nRimu.DictVectors.from_initiator_value\nRimu.DictVectors.Initiator\nRimu.DictVectors.SimpleInitiator\nRimu.DictVectors.CoherentInitiator\nRimu.DictVectors.NonInitiator\nRimu.DictVectors.NonInitiatorValue","category":"page"},{"location":"dictvectors.html#Rimu.DictVectors.InitiatorRule","page":"Dict vectors","title":"Rimu.DictVectors.InitiatorRule","text":"InitiatorRule{V}\n\nAbstract type for defining initiator rules for InitiatorDVec. Concrete implementations:\n\nInitiator\nSimpleInitiator\nCoherentInitiator\nNonInitiator\n\nExtended Help\n\nInitiatorRules define how to store and retrieve data from associated AbstractInitiatorValues. When defining a new InitiatorRule, also define the following:\n\ninitiator_valtype\nfrom_initiator_value\nto_initiator_value\n\n\n\n\n\n","category":"type"},{"location":"dictvectors.html#Rimu.DictVectors.AbstractInitiatorValue","page":"Dict vectors","title":"Rimu.DictVectors.AbstractInitiatorValue","text":"abstract type AbstractInitiatorValue{V}\n\nA value equipped with additional information that enables a variation of the initiator approximation. To be used with PDVec, InitiatorDVec and InitiatorRules.\n\nMust define:\n\nBase.zero, Base.:+, Base.:-, Base.:*\nfrom_initiator_value and to_initiator_value\n\n\n\n\n\n","category":"type"},{"location":"dictvectors.html#Rimu.DictVectors.InitiatorValue","page":"Dict vectors","title":"Rimu.DictVectors.InitiatorValue","text":"InitiatorValue{V}(; safe::V, unsafe::V, initiator::V) where V\n\nComposite \"walker\" with three fields. For use with InitiatorDVecs.\n\n\n\n\n\n","category":"type"},{"location":"dictvectors.html#Rimu.DictVectors.initiator_valtype","page":"Dict vectors","title":"Rimu.DictVectors.initiator_valtype","text":"initiator_valtype(rule::InitiatorRule, T)\n\nReturn the AbstractInitiatorValue{T} that is employed by the rule.\n\n\n\n\n\n","category":"function"},{"location":"dictvectors.html#Rimu.DictVectors.to_initiator_value","page":"Dict vectors","title":"Rimu.DictVectors.to_initiator_value","text":"to_initiator_value(::InitiatorRule, k::K, v::V, parent)\n\nConvert v to an AbstractInitiatorValue, taking the initiator rule and the parent that spawned it into account.\n\n\n\n\n\n","category":"function"},{"location":"dictvectors.html#Rimu.DictVectors.from_initiator_value","page":"Dict vectors","title":"Rimu.DictVectors.from_initiator_value","text":"from_initiator_value(i::InitiatorRule, v::AbstractInitiatorValue)\n\nConvert the AbstractInitiatorValue v into a scalar value according to the InitiatorRule i.\n\n\n\n\n\n","category":"function"},{"location":"dictvectors.html#Rimu.DictVectors.Initiator","page":"Dict vectors","title":"Rimu.DictVectors.Initiator","text":"Initiator(threshold = 1.0) <: InitiatorRule\n\nInitiator rule to be passed to PDVec or InitiatorDVec. An initiator is a configuration add with a coefficient with magnitude abs(v[add]) > threshold. The threshold can be passed as a keyword argument. Rules:\n\nInitiators can spawn anywhere.\nNon-initiators can spawn to initiators.\n\nSee InitiatorRule.\n\n\n\n\n\n","category":"type"},{"location":"dictvectors.html#Rimu.DictVectors.SimpleInitiator","page":"Dict vectors","title":"Rimu.DictVectors.SimpleInitiator","text":"SimpleInitiator(threshold = 1.0) <: InitiatorRule\n\nInitiator rule to be passed to PDVec or InitiatorDVec. An initiator is a configuration add with a coefficient with magnitude abs(v[add]) > threshold. The threshold can be passed as a keyword argument. Rules:\n\nInitiators can spawn anywhere.\nNon-initiators cannot spawn.\n\nSee InitiatorRule.\n\n\n\n\n\n","category":"type"},{"location":"dictvectors.html#Rimu.DictVectors.CoherentInitiator","page":"Dict vectors","title":"Rimu.DictVectors.CoherentInitiator","text":"CoherentInitiator(threshold = 1.0) <: InitiatorRule\n\nInitiator rule to be passed to PDVec or InitiatorDVec. An initiator is a configuration add with a coefficient with magnitude abs(v[add]) > threshold. The threshold can be passed as a keyword argument. Rules:\n\nInitiators can spawn anywhere.\nNon-initiators can spawn to initiators.\nMultiple non-initiators can spawn to a single non-initiator if their contributions add up to a value greater than the initiator threshold.\n\nSee InitiatorRule.\n\n\n\n\n\n","category":"type"},{"location":"dictvectors.html#Rimu.DictVectors.NonInitiator","page":"Dict vectors","title":"Rimu.DictVectors.NonInitiator","text":"NonInitiator() <: InitiatorRule\n\nInitiator rule that disables the approximation. This is the default setting for PDVec.\n\nSee InitiatorRule.\n\n\n\n\n\n","category":"type"},{"location":"dictvectors.html#Rimu.DictVectors.NonInitiatorValue","page":"Dict vectors","title":"Rimu.DictVectors.NonInitiatorValue","text":"NonInitiatorValue{V}\n\nValue that does not contain any additional information - used with NonInitiator, the default initiator rule for PDVec.\n\n\n\n\n\n","category":"type"},{"location":"dictvectors.html#PDVec-internals","page":"Dict vectors","title":"PDVec internals","text":"","category":"section"},{"location":"dictvectors.html#Working-memory","page":"Dict vectors","title":"Working memory","text":"","category":"section"},{"location":"dictvectors.html","page":"Dict vectors","title":"Dict vectors","text":"Modules = [DictVectors]\nPages = [\"pdworkingmemory.jl\"]","category":"page"},{"location":"dictvectors.html#Rimu.DictVectors.FirstColumnIterator","page":"Dict vectors","title":"Rimu.DictVectors.FirstColumnIterator","text":"FirstColumnIterator{W,D} <: AbstractVector{D}\n\nIterates segments in the first column of a working memory that belong to a specified rank.\n\nSee PDWorkingMemory, remote_segments and local_segments.\n\n\n\n\n\n","category":"type"},{"location":"dictvectors.html#Rimu.DictVectors.PDWorkingMemory","page":"Dict vectors","title":"Rimu.DictVectors.PDWorkingMemory","text":"PDWorkingMemory(t::PDVec)\n\nThe working memory that handles threading and MPI distribution for operations that involve operators, such as FCIQMC propagation, operator-vector multiplication and three-way dot products with PDVecs.\n\nThe working memory is structured as a two-dimensional array of segments, which themselves are Dicts (see PDVec). The number of rows in this array is equal to the number of segments across all MPI ranks (covering the entire address space), while the number of columns corresponds to the number of segments in the current MPI rank (i.e. column corresponds to the part of the address space that is local to the current rank).\n\nThe purpose of this organisation is to allow spawning in parallel without using locks or atomic operations. The spawning is performed by applying the following sequence of operations:\n\nperform_spawns!: each segment in the PDVec is multiplied by the operator independently, with the results being stored in a column of the working memory.\ncollect_local!: the rows of the working memory are summed to the first column.\nsynchronize_remote!: the segments corresponding to other MPI ranks are distributed and transferred to the first column.\nmove_and_compress!: the results are stochastically compressed and moved to the result PDVec\n\nWhen used with three-argument dot products, a full copy of the left-hand side vector is materialized in the first column of the working memory on all ranks.\n\n\n\n\n\n","category":"type"},{"location":"dictvectors.html#Rimu.DictVectors.PDWorkingMemoryColumn","page":"Dict vectors","title":"Rimu.DictVectors.PDWorkingMemoryColumn","text":"PDWorkingMemoryColumn\n\nA column in PDWorkingMemory. Supports getindex, deposit! and StochasticStyle and acts as a target for spawning. Can be used as a target in a three-way dot-product.\n\n\n\n\n\n","category":"type"},{"location":"dictvectors.html#Rimu.DictVectors.collect_local!-Tuple{PDWorkingMemory}","page":"Dict vectors","title":"Rimu.DictVectors.collect_local!","text":"collect_local!(w::PDWorkingMemory)\n\nSum each row in w and store the result in the first column. This step must be performed before using local_segments or remote_segments to move the values elsewhere.\n\nSee PDWorkingMemory.\n\n\n\n\n\n","category":"method"},{"location":"dictvectors.html#Rimu.DictVectors.first_column-Union{Tuple{PDWorkingMemory{K, V, W, S}}, Tuple{S}, Tuple{W}, Tuple{V}, Tuple{K}} where {K, V, W, S}","page":"Dict vectors","title":"Rimu.DictVectors.first_column","text":"first_column(::PDWorkingMemory)\n\nReturn the first column of the working memory. This is where the vectors are collected with collect_local!, synchronize_remote!, copy_to_local!.\n\nSee PDWorkingMemory.\n\n\n\n\n\n","category":"method"},{"location":"dictvectors.html#Rimu.DictVectors.local_segments-Tuple{PDWorkingMemory}","page":"Dict vectors","title":"Rimu.DictVectors.local_segments","text":"local_segments(w::PDWorkingMemory)\n\nReturns iterator over the segments in the first column of w on the current rank. Iterates Dicts.\n\nSee PDWorkingMemory.\n\n\n\n\n\n","category":"method"},{"location":"dictvectors.html#Rimu.DictVectors.move_and_compress!-Tuple{PDVec, PDWorkingMemory}","page":"Dict vectors","title":"Rimu.DictVectors.move_and_compress!","text":"move_and_compress!(dst::PDVec, src::PDWorkingMemory)\nmove_and_compress!(::CompressionStrategy, dst::PDVec, src::PDWorkingMemory)\n\nMove the values in src to dst, compressing the according to the CompressionStrategy on the way. This step can only be performed after collect_local! and synchronize_remote!.\n\nSee PDWorkingMemory.\n\n\n\n\n\n","category":"method"},{"location":"dictvectors.html#Rimu.DictVectors.num_columns-Tuple{PDWorkingMemory}","page":"Dict vectors","title":"Rimu.DictVectors.num_columns","text":"num_columns(w::PDWorkingMemory) -> Int\n\nNumber of columns in the working memory. The number of rows is equal to the number of segments in the local MPI rank.\n\nSee PDWorkingMemory.\n\n\n\n\n\n","category":"method"},{"location":"dictvectors.html#Rimu.DictVectors.num_rows-Tuple{PDWorkingMemory}","page":"Dict vectors","title":"Rimu.DictVectors.num_rows","text":"num_rows(w::PDWorkingMemory) -> Int\n\nNumber of rows in the working memory. The number of rows is equal to the number of segments accross all MPI ranks.\n\nSee PDWorkingMemory.\n\n\n\n\n\n","category":"method"},{"location":"dictvectors.html#Rimu.DictVectors.perform_spawns!-Tuple{PDWorkingMemory, PDVec, Any, Any}","page":"Dict vectors","title":"Rimu.DictVectors.perform_spawns!","text":"perform_spawns!(w::PDWorkingMemory, v::PDVec, ham, boost)\n\nPerform spawns from v through ham to w. boost increases the number of spawns without affecting the expectation value of the process.\n\nSee PDVec and PDWorkingMemory.\n\n\n\n\n\n","category":"method"},{"location":"dictvectors.html#Rimu.DictVectors.remote_segments-Tuple{PDWorkingMemory, Any}","page":"Dict vectors","title":"Rimu.DictVectors.remote_segments","text":"remote_segments(w::PDWorkingMemory, rank_id)\n\nReturns iterator over the segments in the first column of w that belong to rank rank_id. Iterates Dicts.\n\nSee PDWorkingMemory.\n\n\n\n\n\n","category":"method"},{"location":"dictvectors.html#Rimu.DictVectors.synchronize_remote!-Tuple{PDWorkingMemory}","page":"Dict vectors","title":"Rimu.DictVectors.synchronize_remote!","text":"synchronize_remote!([::Communicator,] w::PDWorkingMemory) -> names, values\n\nSynchronize non-local segments across MPI and add the results to the first column. Controlled by the Communicator. This can only be perfomed after collect_local!.\n\nShould return a Tuple of names and a Tuple of values to report.\n\nSee PDWorkingMemory.\n\n\n\n\n\n","category":"method"},{"location":"dictvectors.html#Communicators","page":"Dict vectors","title":"Communicators","text":"","category":"section"},{"location":"dictvectors.html","page":"Dict vectors","title":"Dict vectors","text":"Modules = [DictVectors]\nPages = [\"communicators.jl\"]","category":"page"},{"location":"dictvectors.html#Rimu.DictVectors.AllToAll","page":"Dict vectors","title":"Rimu.DictVectors.AllToAll","text":"AllToAll{K,V}(; mpi_comm, n_segments, report) <: Communicator\n\nCommunicator that uses collective communication using MPI.Alltoall[v]!.\n\nKeyword arguments\n\nmpi_comm=MPI.COMM_WORLD: the MPI communicator to use.\nn_segments=Threads.nthreads(): the number of segments per rank to use. Should match the PDVec the communicator is used with.\nreport=false: if set to true, report MPI communication times during a projector Monte Carlo run.\n\nSee also: Communicator.\n\n\n\n\n\n","category":"type"},{"location":"dictvectors.html#Rimu.DictVectors.Communicator","page":"Dict vectors","title":"Rimu.DictVectors.Communicator","text":"abstract type Communicator\n\nCommunicators are used to handle MPI communication when using PDVecs. Currently, three implementations are provided, NotDistributed, AllToAll and PointToPoint. The communicator is picked automatically according to the number of MPI ranks available.\n\nWhen implementing a communicator, use local_segments and remote_segments.\n\nInterface\n\nsynchronize_remote!\nmpi_rank\nmpi_size\nmpi_comm\n\nOptional interface\n\nis_distributed: defaults to returning true.\nmerge_remote_reductions: defaults to using MPI.Allreduce.\ntotal_num_segments: defaults to n * mpi_size.\ntarget_segment: defaults to selecting using fastrange  to pick the segment.\n\nSee also: PDVec, PDWorkingMemory.\n\n\n\n\n\n","category":"type"},{"location":"dictvectors.html#Rimu.DictVectors.LocalPart","page":"Dict vectors","title":"Rimu.DictVectors.LocalPart","text":"LocalPart <: Communicator\n\nWhen localpart is used, the vector's Communicator is replaced with this. This allows iteration and local reductions.\n\n\n\n\n\n","category":"type"},{"location":"dictvectors.html#Rimu.DictVectors.NestedSegmentedBuffer","page":"Dict vectors","title":"Rimu.DictVectors.NestedSegmentedBuffer","text":"NestedSegmentedBuffer{T}(nrows) <: AbstractMatrix{AbstractVector{T}}\n\nMatrix of vectors stored in a single buffer with collective MPI communication support. The number of rows in the matrix is fixed to nrows.\n\nUsed in the AllToAll communication strategy, where each column corresponds to an MPI rank and each row corresponds to a segment in the PDVec.\n\nSupported operations\n\nappend_collections!: add a column to the matrix.\nappend_empty_column!: add an empty column to the matrix.\nmpi_exchange_alltoall!: each rank sends the i-th column of the matrix to the (i-1)-st rank.\nmpi_exchange_allgather!: each rank sends the 1-st column of the matrix to all ranks.\n\nSee also: SegmentedBuffer.\n\n\n\n\n\n","category":"type"},{"location":"dictvectors.html#Rimu.DictVectors.NotDistributed","page":"Dict vectors","title":"Rimu.DictVectors.NotDistributed","text":"NotDistributed <: Communicator\n\nThis Communicator is used when MPI is not available.\n\n\n\n\n\n","category":"type"},{"location":"dictvectors.html#Rimu.DictVectors.PointToPoint","page":"Dict vectors","title":"Rimu.DictVectors.PointToPoint","text":"PointToPoint{K,V}(; mpi_comm, report) <: Communicator\n\nMPI Communicator that uses circular communication using MPI.Isend and MPI.Recv!.\n\nKeyword arguments\n\nmpi_comm=MPI.COMM_WORLD: the MPI communicator to use.\nreport=false: if set to true, report MPI communication times during a projector Monte Carlo run.\n\n\n\n\n\n","category":"type"},{"location":"dictvectors.html#Rimu.DictVectors.SegmentedBuffer","page":"Dict vectors","title":"Rimu.DictVectors.SegmentedBuffer","text":"SegmentedBuffer{T}() <: AbstractVector{AbstractVector{T}}\n\nBehaves like a vector of vectors, but is stored in a single buffer. It can be sent/received over MPI keeping its structure intact. Used in the PointToPoint communication strategy.\n\nSupported operations\n\nreplace_collections!: insert data into the buffers\nmpi_send: send the contents of a buffer to a given rank\nmpi_recv_any!: receive a message sent by mpi_send from any rank, storing the contents in this buffer\n\nSee also: NestedSegmentedBuffer.\n\n\n\n\n\n","category":"type"},{"location":"dictvectors.html#Rimu.DictVectors.append_collections!-Tuple{Rimu.DictVectors.NestedSegmentedBuffer, Any}","page":"Dict vectors","title":"Rimu.DictVectors.append_collections!","text":"append_collections!(buf::NestedSegmentedBuffer, iters)\n\nAdd a column to buf. The length of iters should match buf.nrows.\n\nSee also: NestedSegmentedBuffer, append_empty_column!.\n\n\n\n\n\n","category":"method"},{"location":"dictvectors.html#Rimu.DictVectors.append_empty_column!-Tuple{Rimu.DictVectors.NestedSegmentedBuffer}","page":"Dict vectors","title":"Rimu.DictVectors.append_empty_column!","text":"append_empty_column!(buf::NestedSegmentedBuffer)\n\nLike append_collections!, but adds an empty column.\n\nSee also: NestedSegmentedBuffer, append_collections!.\n\n\n\n\n\n","category":"method"},{"location":"dictvectors.html#Rimu.DictVectors.copy_to_local!","page":"Dict vectors","title":"Rimu.DictVectors.copy_to_local!","text":"copy_to_local!([::Communicator,] w::PDWorkingMemory, t::PDVec) -> PDVec\n\nCopy pairs in t from all ranks and return them as a (possibly) new PDVec, possibly using the PDWorkingMemory as temporary storage.\n\nSee also: PDVec, PDWorkingMemory, Communicator.\n\n\n\n\n\n","category":"function"},{"location":"dictvectors.html#Rimu.DictVectors.is_distributed-Tuple{Rimu.DictVectors.Communicator}","page":"Dict vectors","title":"Rimu.DictVectors.is_distributed","text":"is_distributed(::Communicator)\n\nReturn true if Communicator operates over MPI.\n\n\n\n\n\n","category":"method"},{"location":"dictvectors.html#Rimu.DictVectors.merge_remote_reductions-Tuple{Rimu.DictVectors.Communicator, Any, Any}","page":"Dict vectors","title":"Rimu.DictVectors.merge_remote_reductions","text":"merge_remote_reductions(c::Communicator, op, x)\n\nMerge the results of reductions over MPI. By default, it uses MPI.Allreduce.\n\nSee also: Communicator.\n\n\n\n\n\n","category":"method"},{"location":"dictvectors.html#Rimu.DictVectors.mpi_exchange_allgather!-Tuple{Rimu.DictVectors.NestedSegmentedBuffer, Rimu.DictVectors.NestedSegmentedBuffer, Any}","page":"Dict vectors","title":"Rimu.DictVectors.mpi_exchange_allgather!","text":"mpi_exchange_allgather!(src::NestedSegmentedBuffer, dst::NestedSegmentedBuffer, comm)\n\nThe first and only column in src will be sent to all ranks. The data from all ranks will be gethered in dst. After this operation, dst will contain the same data on all ranks.\n\nSee also NestedSegmentedBuffer, mpi_exchange_alltoall!.\n\n\n\n\n\n","category":"method"},{"location":"dictvectors.html#Rimu.DictVectors.mpi_exchange_alltoall!-Tuple{Rimu.DictVectors.NestedSegmentedBuffer, Rimu.DictVectors.NestedSegmentedBuffer, Any}","page":"Dict vectors","title":"Rimu.DictVectors.mpi_exchange_alltoall!","text":"mpi_exchange_alltoall!(src::NestedSegmentedBuffer, dst::NestedSegmentedBuffer, comm)\n\nThe n-th column from src will be sent to rank n-1. The data sent from rank r will be stored in the (r+1)-st column of dst.\n\nSee also: NestedSegmentedBuffer, mpi_exchange_allgather!.\n\n\n\n\n\n","category":"method"},{"location":"dictvectors.html#Rimu.DictVectors.mpi_recv_any!-Tuple{Rimu.DictVectors.SegmentedBuffer, Any}","page":"Dict vectors","title":"Rimu.DictVectors.mpi_recv_any!","text":"mpi_recv_any!(buf::SegmentedBuffer, comm::MPI_Comm) -> Int\n\nFind a source that is ready to send a buffer and receive from it. Return the rank ID of the sender.\n\n\n\n\n\n","category":"method"},{"location":"dictvectors.html#Rimu.DictVectors.mpi_send-Tuple{Rimu.DictVectors.SegmentedBuffer, Any, Any}","page":"Dict vectors","title":"Rimu.DictVectors.mpi_send","text":"mpi_send(buf::SegmentedBuffer, dest, comm::MPI.Comm)\n\nSend the buffer to rank with id dest.\n\n\n\n\n\n","category":"method"},{"location":"dictvectors.html#Rimu.DictVectors.replace_collections!-Tuple{Rimu.DictVectors.SegmentedBuffer, Any}","page":"Dict vectors","title":"Rimu.DictVectors.replace_collections!","text":"replace_collections!(buf::SegmentedBuffer, iters)\n\nInsert collections in iters into a SegmentedBuffer.\n\njulia> using Rimu.DictVectors: SegmentedBuffer\n\njulia> buf = SegmentedBuffer{Int}()\n0-element SegmentedBuffer{Int64}\n\njulia> Rimu.DictVectors.replace_collections!(buf, [[1,2,3], [4,5]])\n2-element SegmentedBuffer{Int64}:\n [1, 2, 3]\n [4, 5]\n\njulia> Rimu.DictVectors.replace_collections!(buf, [[1], [2,3], [4]])\n3-element SegmentedBuffer{Int64}:\n [1]\n [2, 3]\n [4]\n\n\n\n\n\n","category":"method"},{"location":"dictvectors.html#Rimu.DictVectors.target_segment-Tuple{Rimu.DictVectors.Communicator, Any, Any}","page":"Dict vectors","title":"Rimu.DictVectors.target_segment","text":"target_segment(c::Communicator, k, num_segments) -> target, is_local\n\nThis function is used to determine where in the PDVec a key should be stored. If the key is local (stored on the same MPI rank), return its segment index and true. If the key is non-local, return any value and false.\n\nSee also: PDVec, Communicator.\n\n\n\n\n\n","category":"method"},{"location":"dictvectors.html#Rimu.DictVectors.total_num_segments-Tuple{Rimu.DictVectors.Communicator, Any}","page":"Dict vectors","title":"Rimu.DictVectors.total_num_segments","text":"total_num_segments(c::Communicator, n) -> Int\n\nReturn the total number of segments, including the remote ones, where n is number of local segments.\n\nSee also: PDVec, Communicator.\n\n\n\n\n\n","category":"method"},{"location":"dictvectors.html#Rimu.mpi_comm","page":"Dict vectors","title":"Rimu.mpi_comm","text":"mpi_comm(::Communicator) -> MPI.Comm\n\nReturn the MPI.Comm that the Communicator operates on.\n\n\n\n\n\n","category":"function"},{"location":"dictvectors.html#Rimu.mpi_rank","page":"Dict vectors","title":"Rimu.mpi_rank","text":"mpi_rank(::Communicator) -> Int\n\nReturn the MPI rank of the Communicator.\n\n\n\n\n\n","category":"function"},{"location":"dictvectors.html#Rimu.mpi_size","page":"Dict vectors","title":"Rimu.mpi_size","text":"mpi_size(::Communicator) -> Int\n\nReturn the total number of MPI ranks in the Communicator.\n\n\n\n\n\n","category":"function"},{"location":"dictvectors.html#Index","page":"Dict vectors","title":"Index","text":"","category":"section"},{"location":"dictvectors.html","page":"Dict vectors","title":"Dict vectors","text":"Pages   = [\"dictvectors.md\"]","category":"page"},{"location":"custom_hamiltonians.html#Advanced-operator-usage-and-custom-Hamiltonians","page":"Custom Hamiltonians","title":"Advanced operator usage and custom Hamiltonians","text":"","category":"section"},{"location":"custom_hamiltonians.html","page":"Custom Hamiltonians","title":"Custom Hamiltonians","text":"Rimu can be used to work with custom Hamiltonians and observables that are user-defined and  not part of the Rimu.jl package. To make this possible and reliable, Rimu exposes a number   of interfaces and provides helper functions to test compliance with the interfaces through the   submodule Rimu.InterfaceTests, see Interface tests. This section covers the  relevant interfaces, the interface functions as well as potentially useful helper functions.","category":"page"},{"location":"custom_hamiltonians.html","page":"Custom Hamiltonians","title":"Custom Hamiltonians","text":"In order to define custom Hamiltonians or observables it is useful to know how the operator   type hierarchy works in Rimu. For an example of how to implement custom Hamiltonians that   are not part of the Rimu.jl package, see   RimuLegacyHamiltonians.jl.","category":"page"},{"location":"custom_hamiltonians.html#Operator-type-hierarchy","page":"Custom Hamiltonians","title":"Operator type hierarchy","text":"","category":"section"},{"location":"custom_hamiltonians.html","page":"Custom Hamiltonians","title":"Custom Hamiltonians","text":"Rimu offers a hierarchy of abstract types that define interfaces with different requirements for operators:","category":"page"},{"location":"custom_hamiltonians.html","page":"Custom Hamiltonians","title":"Custom Hamiltonians","text":"AbstractHamiltonian <: AbstractOperator <: AbstractObservable","category":"page"},{"location":"custom_hamiltonians.html","page":"Custom Hamiltonians","title":"Custom Hamiltonians","text":"The different abstract types have different requirements and are meant to be used for different purposes. ","category":"page"},{"location":"custom_hamiltonians.html","page":"Custom Hamiltonians","title":"Custom Hamiltonians","text":"AbstractHamiltonians are fully featured models that define a Hilbert space and a linear operator over a scalar field. They can be passed as a Hamiltonian into ProjectorMonteCarloProblem or ExactDiagonalizationProblem.\nAbstractOperator and AbstractObservable are supertypes of AbstractHamiltonian with less stringent conditions. They are useful for defining observables that can be used in a three-way dot product, or passed as observables into a ReplicaStrategy that can be inserted with the keyword replica_strategy into a ProjectorMonteCarloProblem.","category":"page"},{"location":"custom_hamiltonians.html#Hamiltonians-interface","page":"Custom Hamiltonians","title":"Hamiltonians interface","text":"","category":"section"},{"location":"custom_hamiltonians.html","page":"Custom Hamiltonians","title":"Custom Hamiltonians","text":"Behind the implementation of a particular model is a more abstract interface for defining Hamiltonians. If you want to define a new model you should make use of this interface. A new  model Hamiltonian should subtype to AbstractHamiltonian and implement the relevant methods.","category":"page"},{"location":"custom_hamiltonians.html","page":"Custom Hamiltonians","title":"Custom Hamiltonians","text":"AbstractHamiltonian\noffdiagonals\ndiagonal_element\nstarting_address","category":"page"},{"location":"custom_hamiltonians.html#Rimu.Interfaces.AbstractHamiltonian","page":"Custom Hamiltonians","title":"Rimu.Interfaces.AbstractHamiltonian","text":"AbstractHamiltonian{T} <: AbstractOperator{T}\n\nSupertype that provides an interface for linear operators over a linear space with scalar type T that are suitable for FCIQMC (with ProjectorMonteCarloProblem). Indexing is done with addresses (typically not integers) from an address space that may be large (and will not need to be completely generated).\n\nAbstractHamiltonian instances operate on vectors of type AbstractDVec from the module DictVectors and work well with addresses of type AbstractFockAddress from the module BitStringAddresses. The type works well with the external package KrylovKit.jl.\n\nFor available implementations see Hamiltonians.\n\nInterface\n\nBasic interface methods to implement:\n\nstarting_address(::AbstractHamiltonian)\ndiagonal_element(::AbstractHamiltonian, address)\nnum_offdiagonals(::AbstractHamiltonian, address)\nget_offdiagonal(::AbstractHamiltonian, address, chosen::Integer) (optional, see   below)\n\nOptional additional methods to implement:\n\nLOStructure(::Type{typeof(lo)}): defaults to AdjointUnknown\ndimension(::AbstractHamiltonian, addr): defaults to dimension of address space\nallows_address_type(h::AbstractHamiltonian, type): defaults to type :< typeof(starting_address(h))\nmomentum(::AbstractHamiltonian): no default\n\nProvides the following functions and methods:\n\noffdiagonals: iterator over reachable off-diagonal matrix elements\nrandom_offdiagonal: function to generate random off-diagonal matrix element\n*(H, v): deterministic matrix-vector multiply (allocating)\nH(v): equivalent to H * v.\nmul!(w, H, v): mutating matrix-vector multiply.\ndot(x, H, v): compute x⋅(H*v) minimizing allocations.\nH[address1, address2]: indexing with getindex() - mostly for testing purposes (slow!)\nBasisSetRepresentation: construct a basis set repesentation\nsparse, Matrix: construct a (sparse) matrix representation\n\nAlternatively to the above, offdiagonals can be implemented instead of get_offdiagonal. Sometimes this can be done efficiently. In this case num_offdiagonals should provide an upper bound on the number of elements obtained when iterating offdiagonals.\n\nSee also Hamiltonians, Interfaces, AbstractOperator, AbstractObservable.\n\n\n\n\n\n","category":"type"},{"location":"custom_hamiltonians.html#Rimu.Interfaces.offdiagonals","page":"Custom Hamiltonians","title":"Rimu.Interfaces.offdiagonals","text":"offdiagonals(h::AbstractHamiltonian, address)\n\nReturn an iterator over nonzero off-diagonal matrix elements of h in the same column as address. Will iterate over pairs (newaddress, matrixelement).\n\nExample\n\njulia> address = BoseFS(3,2,1);\n\n\njulia> H = HubbardReal1D(address);\n\n\njulia> h = offdiagonals(H, address)\n6-element Rimu.Hamiltonians.Offdiagonals{BoseFS{6, 3, BitString{8, 1, UInt8}}, Float64, HubbardReal1D{Float64, BoseFS{6, 3, BitString{8, 1, UInt8}}, 1.0, 1.0}}:\n (fs\"|2 3 1⟩\", -3.0)\n (fs\"|2 2 2⟩\", -2.449489742783178)\n (fs\"|3 1 2⟩\", -2.0)\n (fs\"|4 1 1⟩\", -2.8284271247461903)\n (fs\"|4 2 0⟩\", -2.0)\n (fs\"|3 3 0⟩\", -1.7320508075688772)\n\nPart of the AbstractHamiltonian interface.\n\nExtemded help\n\noffdiagonals return and iterator of type <:AbstractOffdiagonals. It defaults to returning Offdiagonals(h, a)\n\nSee also Offdiagonals, AbstractOffdiagonals.\n\n\n\n\n\n","category":"function"},{"location":"custom_hamiltonians.html#Rimu.Interfaces.diagonal_element","page":"Custom Hamiltonians","title":"Rimu.Interfaces.diagonal_element","text":"diagonal_element(ham, address)\n\nCompute the diagonal matrix element of the linear operator ham at address address.\n\nExample\n\njulia> address = BoseFS((3, 2, 1));\n\n\njulia> H = HubbardMom1D(address);\n\n\njulia> diagonal_element(H, address)\n8.666666666666664\n\nPart of the AbstractHamiltonian interface.\n\n\n\n\n\n","category":"function"},{"location":"custom_hamiltonians.html#Rimu.Interfaces.starting_address","page":"Custom Hamiltonians","title":"Rimu.Interfaces.starting_address","text":"starting_address(h)\n\nReturn the starting address for Hamiltonian h. When called on an AbstractMatrix, starting_address returns the index of the lowest diagonal element.\n\nExample\n\njulia> address = BoseFS((3, 2, 1));\n\n\njulia> H = HubbardMom1D(address);\n\n\njulia> address == starting_address(H)\ntrue\n\nPart of the AbstractHamiltonian interface.\n\n\n\n\n\n","category":"function"},{"location":"custom_hamiltonians.html","page":"Custom Hamiltonians","title":"Custom Hamiltonians","text":"The following functions may be implemented instead of offdiagonals.","category":"page"},{"location":"custom_hamiltonians.html","page":"Custom Hamiltonians","title":"Custom Hamiltonians","text":"num_offdiagonals\nget_offdiagonal","category":"page"},{"location":"custom_hamiltonians.html#Rimu.Interfaces.num_offdiagonals","page":"Custom Hamiltonians","title":"Rimu.Interfaces.num_offdiagonals","text":"num_offdiagonals(ham, address)\n\nCompute the number of number of reachable configurations from address address.\n\nExample\n\njulia> address = BoseFS((3, 2, 1));\n\n\njulia> H = HubbardMom1D(address);\n\n\njulia> num_offdiagonals(H, address)\n10\n\nPart of the AbstractHamiltonian interface.\n\n\n\n\n\n","category":"function"},{"location":"custom_hamiltonians.html#Rimu.Interfaces.get_offdiagonal","page":"Custom Hamiltonians","title":"Rimu.Interfaces.get_offdiagonal","text":"newadd, me = get_offdiagonal(ham, address, chosen)\n\nCompute value me and new address newadd of a single (off-diagonal) matrix element in a Hamiltonian ham. The off-diagonal element is in the same column as address address and is indexed by integer index chosen.\n\nExample\n\njulia> addr = BoseFS(3, 2, 1);\n\njulia> H = HubbardMom1D(addr);\n\njulia> get_offdiagonal(H, addr, 3)\n(BoseFS{6,3}(2, 1, 3), 1.0)\n\nPart of the AbstractHamiltonian interface.\n\n\n\n\n\n","category":"function"},{"location":"custom_hamiltonians.html","page":"Custom Hamiltonians","title":"Custom Hamiltonians","text":"The following functions come with default implementations, but may be customized.","category":"page"},{"location":"custom_hamiltonians.html","page":"Custom Hamiltonians","title":"Custom Hamiltonians","text":"random_offdiagonal\nHamiltonians.LOStructure\ndimension\nhas_adjoint\nallows_address_type\nBase.eltype\nVectorInterface.scalartype\nmul!","category":"page"},{"location":"custom_hamiltonians.html#Rimu.Interfaces.random_offdiagonal","page":"Custom Hamiltonians","title":"Rimu.Interfaces.random_offdiagonal","text":"random_offdiagonal(offdiagonals::AbstractOffdiagonals)\nrandom_offdiagonal(ham::AbstractHamiltonian, address)\n-> newaddress, probability, matrixelement\n\nGenerate a single random excitation, i.e. choose from one of the accessible off-diagonal elements in the column corresponding to address in the Hamiltonian matrix represented by ham. Alternatively, pass as argument an iterator over the accessible matrix elements.\n\nPart of the AbstractHamiltonian interface.\n\n\n\n\n\n","category":"function"},{"location":"custom_hamiltonians.html#Rimu.Interfaces.LOStructure","page":"Custom Hamiltonians","title":"Rimu.Interfaces.LOStructure","text":"LOStructure(op::AbstractHamiltonian)\nLOStructure(typeof(op))\n\nReturn information about the structure of the linear operator op. LOStructure is used as a trait to speficy symmetries or other properties of the linear operator op that may simplify or speed up calculations. Implemented instances are:\n\nIsDiagonal(): The operator is diagonal.\nIsHermitian(): The operator is complex and Hermitian or real and symmetric.\nAdjointKnown(): The operator is not Hermitian, but its   adjoint is implemented.\nAdjointUnknown(): adjoint for this operator is not   implemented.\n\nPart of the AbstractHamiltonian interface.\n\nIn order to define this trait for a new linear operator type, define a method for LOStructure(::Type{<:MyNewLOType}) = ….\n\n\n\n\n\n","category":"type"},{"location":"custom_hamiltonians.html#Rimu.Hamiltonians.dimension","page":"Custom Hamiltonians","title":"Rimu.Hamiltonians.dimension","text":"dimension(h::AbstractHamiltonian, addr=starting_address(h))\ndimension(h::AbstractObservable, addr)\ndimension(addr::AbstractFockAddress)\ndimension(::Type{<:AbstractFockAddress})\n\nReturn the estimated dimension of Hilbert space. May return a BigInt number.\n\nWhen called on an address or address type, the dimension of the linear space spanned by the address type is returned. When called on an AbstractHamiltonian, an upper bound on the dimension of the matrix representing the Hamiltonian is returned.\n\nExamples\n\njulia> dimension(OccupationNumberFS(1,2,3))\n16777216\n\njulia> dimension(HubbardReal1D(OccupationNumberFS(1,2,3)))\n28\n\njulia> dimension(BoseFS{200,100})\n1386083821086188248261127842108801860093488668581216236221011219101585442774669540\n\njulia> Float64(ans)\n1.3860838210861882e81\n\nPart of the AbstractHamiltonian interface. See also BasisSetRepresentation.\n\nExtended Help\n\nThe default fallback for dimension called on an AbstractHamiltonian is to return the dimension of the address space, which provides an upper bound. For new Hamiltonians a tighter bound can be provided by defining a custom method.\n\nWhen extending AbstractHamiltonian, define a method for the two-argument form dimension(h::MyNewHamiltonian, addr). For number-conserving Hamiltonians, the function Hamiltonians.number_conserving_dimension may be useful.\n\nWhen extending AbstractFockAddress, define a method for dimension(::Type{MyNewFockAddress}).\n\n\n\n\n\n","category":"function"},{"location":"custom_hamiltonians.html#Rimu.Interfaces.has_adjoint","page":"Custom Hamiltonians","title":"Rimu.Interfaces.has_adjoint","text":"has_adjoint(op)\n\nReturn true if adjoint is defined on op.\n\nPart of the AbstractHamiltonian interface.\n\nSee also LOStructure.\n\n\n\n\n\n","category":"function"},{"location":"custom_hamiltonians.html#Rimu.Interfaces.allows_address_type","page":"Custom Hamiltonians","title":"Rimu.Interfaces.allows_address_type","text":"allows_address_type(operator, addr_or_type)\n\nReturns true if addr_or_type is a valid address for operator. Otherwise, returns false.\n\nPart of the AbstractHamiltonian interface.\n\nExtended help\n\nDefaults to addr_or_type <: typeof(starting_address(operator)). Overload this function if the operator can be used with addresses of different types.\n\n\n\n\n\n","category":"function"},{"location":"custom_hamiltonians.html#Base.eltype","page":"Custom Hamiltonians","title":"Base.eltype","text":"eltype(op::AbstractObservable)\n\nReturn the type of the elements of the operator. This can be a vector value. For the underlying scalar type use scalartype.\n\nPart of the AbstractObservable interface.\n\nnote: Note\nNew types do not have to implement this method explicitly. An implementation is provided based on the AbstractObservable's type parameter.\n\n\n\n\n\n","category":"function"},{"location":"custom_hamiltonians.html#VectorInterface.scalartype","page":"Custom Hamiltonians","title":"VectorInterface.scalartype","text":"scalartype(op::AbstractObservable)\n\nReturn the type of the underlying scalar field of the operator. This may be different from the element type of the operator returned by eltype, which can be a vector value.\n\nPart of the AbstractObservable interface.\n\nnote: Note\nNew types do not have to implement this method explicitly. An implementation is provided based on the AbstractObservable's type parameter.\n\n\n\n\n\n","category":"function"},{"location":"custom_hamiltonians.html#LinearAlgebra.mul!","page":"Custom Hamiltonians","title":"LinearAlgebra.mul!","text":"LinearAlgebra.mul!(w::AbstractDVec, op::AbstractOperator, v::AbstractDVec)\n\nIn place multiplication of op with v and storing the result in w. The result is returned. Note that w needs to have a valtype that can hold a product of instances of eltype(op) and valtype(v). Moreover, the StochasticStyle of w needs to be <:IsDeterministic.\n\nPart of the AbstractOperator interface.\n\nThe default implementation relies of diagonal_element and offdiagonals to access the elements of the operator. The function can be overloaded for custom operators.\n\n\n\n\n\n","category":"function"},{"location":"custom_hamiltonians.html","page":"Custom Hamiltonians","title":"Custom Hamiltonians","text":"This interface relies on unexported functionality, including","category":"page"},{"location":"custom_hamiltonians.html","page":"Custom Hamiltonians","title":"Custom Hamiltonians","text":"Hamiltonians.adjoint\nHamiltonians.dot\nHamiltonians.AbstractOffdiagonals\nHamiltonians.Offdiagonals\nHamiltonians.check_address_type\nHamiltonians.number_conserving_dimension\nHamiltonians.number_conserving_bose_dimension\nHamiltonians.number_conserving_fermi_dimension","category":"page"},{"location":"custom_hamiltonians.html#Base.adjoint","page":"Custom Hamiltonians","title":"Base.adjoint","text":"adjoint(::LOStructure, op::AbstractObservable)\n\nRepresent the adjoint of an AbstractObservable. Extend this method to define custom adjoints.\n\n\n\n\n\n","category":"function"},{"location":"custom_hamiltonians.html#LinearAlgebra.dot","page":"Custom Hamiltonians","title":"LinearAlgebra.dot","text":"dot(w, op::AbstractObservable, v)\n\nEvaluate w⋅op(v) minimizing memory allocations.\n\n\n\n\n\n","category":"function"},{"location":"custom_hamiltonians.html#Rimu.Hamiltonians.AbstractOffdiagonals","page":"Custom Hamiltonians","title":"Rimu.Hamiltonians.AbstractOffdiagonals","text":"AbstractOffdiagonals{A,T}<:AbstractVector{Tuple{A,T}}\n\nIterator over new address and matrix elements for reachable off-diagonal matrix elements of a linear operator.\n\nSee Offdiagonals for a default implementation.\n\nMethods to define\n\noffdiagonals(h, a)::AbstractOffdiagonals: This function is used to construct the correct type of offdiagonals for a given combination of Hamiltonian h and Fock address a.\nBase.getindex(::AbstractOffdiagonals, i): should be equivalent to get_offdiagonal(h, a, i).\nBase.size(::AbstractOffdiagonals): should be equivalent to num_offdiagonals(h, a).\n\nSee also offdiagonals, AbstractHamiltonian, AbstractOperator.\n\n\n\n\n\n","category":"type"},{"location":"custom_hamiltonians.html#Rimu.Hamiltonians.Offdiagonals","page":"Custom Hamiltonians","title":"Rimu.Hamiltonians.Offdiagonals","text":"Offdiagonals(h, address) <: AbstractOffdiagonals\n\nIterator over new address and matrix element for reachable off-diagonal matrix elements of linear operator h from address address.  Represents an abstract vector containing the non-zero off-diagonal matrix elements of the column of h indexed by address. To construct this iterator use offdiagonals.\n\nThis is the default implementation of AbstractOffdiagonals defined in terms of num_offdiagonals and get_offdiagonal.\n\nSee also offdiagonals, AbstractHamiltonian, AbstractOperator.\n\n\n\n\n\n","category":"type"},{"location":"custom_hamiltonians.html#Rimu.Hamiltonians.check_address_type","page":"Custom Hamiltonians","title":"Rimu.Hamiltonians.check_address_type","text":"check_address_type(h::AbstractObservable, addr_or_type)\n\nThrow an ArgumentError if addr_or_type is not compatible with h, otherwise return true. Acceptable arguments are either an address or an address type, or a tuple or array thereof.\n\nSee also allows_address_type.\n\n\n\n\n\n","category":"function"},{"location":"custom_hamiltonians.html#Rimu.Hamiltonians.number_conserving_dimension","page":"Custom Hamiltonians","title":"Rimu.Hamiltonians.number_conserving_dimension","text":"number_conserving_dimension(address <: AbstractFockAddress)\n\nReturn the dimension of the Fock space spanned by the address type assuming particle number conservation.\n\nSee also number_conserving_bose_dimension, number_conserving_fermi_dimension, dimension.\n\n\n\n\n\n","category":"function"},{"location":"custom_hamiltonians.html#Rimu.Hamiltonians.number_conserving_bose_dimension","page":"Custom Hamiltonians","title":"Rimu.Hamiltonians.number_conserving_bose_dimension","text":"number_conserving_bose_dimension(n, m)\n\nReturn the dimension of the number-conserving Fock space for n bosons in m modes: binomial(n + m - 1, n).\n\nSee also number_conserving_fermi_dimension, number_conserving_dimension.\n\n\n\n\n\n","category":"function"},{"location":"custom_hamiltonians.html#Rimu.Hamiltonians.number_conserving_fermi_dimension","page":"Custom Hamiltonians","title":"Rimu.Hamiltonians.number_conserving_fermi_dimension","text":"number_conserving_fermi_dimension(n, m)\n\nReturn the dimension of the number-conserving Fock space for n fermions in m modes: binomial(m, n).\n\nSee also number_conserving_bose_dimension, number_conserving_dimension.\n\n\n\n\n\n","category":"function"},{"location":"custom_hamiltonians.html#Operator-and-observable-interface","page":"Custom Hamiltonians","title":"Operator and observable interface","text":"","category":"section"},{"location":"custom_hamiltonians.html","page":"Custom Hamiltonians","title":"Custom Hamiltonians","text":"AbstractObservable\nAbstractOperator","category":"page"},{"location":"custom_hamiltonians.html#Rimu.Interfaces.AbstractObservable","page":"Custom Hamiltonians","title":"Rimu.Interfaces.AbstractObservable","text":"AbstractObservable{T}\n\nMost permissive supertype for operators in the type hierarchy:\n\nAbstractHamiltonian{T} <: AbstractOperator{T} <: AbstractObservable{T}\n\nAbstractObservable provides an interface for operators that can appear in a three-way dot product dot(x, op, y) with two vectors of type AbstractDVec. The result is a value of type T, which is also returned by the eltype function. This may be a vector type associated with a scalar type returned by the scalartype function.\n\nThe AbstractObservable type is useful for defining observables that can be calculated in the context of a ProjectorMonteCarloProblem using AllOverlaps.\n\nInterface\n\nBasic interface methods to implement:\n\nInterfaces.dot_from_right(x, op, y)\nallows_address_type(op, type)\n\nOptional additional methods to implement:\n\nVectorInterface.scalartype(op): defaults to eltype(eltype(op))\nLOStructure(::Type{typeof(op)}): defaults to AdjointUnknown\n\nSee also AbstractOperator, AbstractHamiltonian, Interfaces.\n\n\n\n\n\n","category":"type"},{"location":"custom_hamiltonians.html#Rimu.Interfaces.AbstractOperator","page":"Custom Hamiltonians","title":"Rimu.Interfaces.AbstractOperator","text":"AbstractOperator{T} <: AbstractObservable{T}\n\nSupertype that provides an interface for linear operators over a linear space with elements of type T (returned by eltype) and general (custom type) indices called 'addresses'.\n\nAbstractOperator instances operate on vectors of type AbstractDVec from the module DictVectors and work well with addresses of type AbstractFockAddress from the module BitStringAddresses.\n\nThe defining feature of an AbstractOperator is that it can be applied to a vector with mul!(y, op, x) and that three-way dot products can be calculated with dot(x, op, y).\n\nThe AbstractOperator type is useful for defining operators that are not necessarily Hamiltonians, but that can be used in the context of a ProjectorMonteCarloProblem as observable operators in a ReplicaStrategy, e.g. for defining correlation functions. In contrast to AbstractHamiltonians, AbstractOperators do not need to have a starting_address. Moreover, the eltype of an AbstractOperator can be a vector value whereas AbstractHamiltonians requre a scalar eltype.\n\nAbstractHamiltonian{T} <: AbstractOperator{T} <: AbstractObservable{T}\n\nThe AbstractOperator type is part of the AbstractObservable hierarchy. It is more restrictive than AbstractObservable in that it requires the interface for the generation of diagonal and off-diagonal elements.\n\nFor concrete implementations see Hamiltonians. In order to implement a Hamiltonian for use in ProjectorMonteCarloProblem or ExactDiagonalizationProblem use the type AbstractHamiltonian instead.\n\nInterface\n\nBasic interface methods to implement:\n\nallows_address_type(op, type)\ndiagonal_element(op, address)\nnum_offdiagonals(op, address) and\nget_offdiagonal(op, address, chosen) or offdiagonals\n\nOptional additional methods to implement:\n\nVectorInterface.scalartype(op): defaults to eltype(eltype(op))\nLOStructure(::Type{typeof(op)}): defaults to AdjointUnknown\ndimension(op, addr): defaults to dimension of address space\n\nIn order to calculate observables efficiently, it may make sense to implement custom methods for Interfaces.dot_from_right(x, op, y) and LinearAlgebra.mul!(y, op, x).\n\nSee also AbstractHamiltonian, Interfaces.\n\n\n\n\n\n","category":"type"},{"location":"custom_hamiltonians.html#Interface-tests","page":"Custom Hamiltonians","title":"Interface tests","text":"","category":"section"},{"location":"custom_hamiltonians.html","page":"Custom Hamiltonians","title":"Custom Hamiltonians","text":"Helper functions that can be used for testing the various interfaces are provided in the  (unexported) submodule Rimu.InterfaceTests. ","category":"page"},{"location":"custom_hamiltonians.html","page":"Custom Hamiltonians","title":"Custom Hamiltonians","text":"Rimu.InterfaceTests","category":"page"},{"location":"custom_hamiltonians.html#Rimu.InterfaceTests","page":"Custom Hamiltonians","title":"Rimu.InterfaceTests","text":"The module Rimu.InterfaceTests provides functions to test compliance with the AbstractObservable, AbstractOperator, and AbstractHamiltonian interfaces. Load the module with using Rimu.InterfaceTests.\n\nThe module exports the following functions:\n\ntest_observable_interface\ntest_operator_interface\ntest_hamiltonian_interface\ntest_hamiltonian_structure\n\n\n\n\n\n","category":"module"},{"location":"custom_hamiltonians.html#Testing-functions","page":"Custom Hamiltonians","title":"Testing functions","text":"","category":"section"},{"location":"custom_hamiltonians.html","page":"Custom Hamiltonians","title":"Custom Hamiltonians","text":"Rimu.InterfaceTests.test_hamiltonian_interface\nRimu.InterfaceTests.test_hamiltonian_structure\nRimu.InterfaceTests.test_observable_interface\nRimu.InterfaceTests.test_operator_interface","category":"page"},{"location":"custom_hamiltonians.html#Rimu.InterfaceTests.test_hamiltonian_interface","page":"Custom Hamiltonians","title":"Rimu.InterfaceTests.test_hamiltonian_interface","text":"test_hamiltonian_interface(h, addr=starting_address(h); test_spawning=true)\n\nThe main purpose of this test function is to check that all required methods of the AbstractHamiltonian interface are defined and work as expected.\n\nSet test_spawning=false to skip tests that require offdiagonals to return an AbstractVector.\n\nThis function also tests the following properties of the Hamiltonian:\n\ndimension(h) ≥ dimension(h, addr)\nscalartype(h) === eltype(h)\nHamiltonian action on a vector <: AbstractDVec\nstarting_address returns an allows_address_type address\nLOStructure is one of IsDiagonal, IsHermitian, AdjointKnown\nthe AbstractOperator interface is tested\nthe AbstractObservable interface is tested\n\nExample\n\njulia> using Rimu.InterfaceTests\n\njulia> test_hamiltonian_interface(HubbardRealSpace(BoseFS(2,0,3,1)));\nTest Summary:                          | Pass  Total  Time\nObservable interface: HubbardRealSpace |    4      4  0.0s\nTest Summary:       | Pass  Total  Time\nallows_address_type |    1      1  0.0s\nTest Summary:                        | Pass  Total  Time\nOperator interface: HubbardRealSpace |    9      9  0.0s\nTest Summary:       | Pass  Total  Time\nallows_address_type |    1      1  0.0s\nTest Summary:                                 | Pass  Total  Time\nHamiltonians-only tests with HubbardRealSpace |    6      6  0.0s\n\nSee also test_operator_interface, test_observable_interface.\n\n\n\n\n\n","category":"function"},{"location":"custom_hamiltonians.html#Rimu.InterfaceTests.test_hamiltonian_structure","page":"Custom Hamiltonians","title":"Rimu.InterfaceTests.test_hamiltonian_structure","text":"test_hamiltonian_structure(h::AbstractHamiltonian; sizelim=20)\n\nTest the LOStructure of a small Hamiltonian h by instantiating it as a sparse matrix and checking whether the structure of the matrix is constistent with the result of LOStructure(h) and the eltype is consistent with eltype(h).\n\nThis function is intended to be used in automated test for small Hamiltonians where instantiating the matrix is quick. A warning will print if the dimension of the Hamiltonian is larger than 20.\n\nExample\n\njulia> using Rimu.InterfaceTests\n\njulia> test_hamiltonian_structure(HubbardRealSpace(BoseFS(2,0,1)));\nTest Summary: | Pass  Total  Time\nstructure     |    4      4  0.0s\n\n\n\n\n\n","category":"function"},{"location":"custom_hamiltonians.html#Rimu.InterfaceTests.test_observable_interface","page":"Custom Hamiltonians","title":"Rimu.InterfaceTests.test_observable_interface","text":"test_observable_interface(obs, addr)\n\nThis function tests compliance with the AbstractObservable interface for an observable obs at address addr (typically <: AbstractFockAddress) by checking that all required methods are defined.\n\nThe following properties are tested:\n\ndot(v, obs, v) returns a value of the same type as the eltype of the observable\nLOStructure is set consistently\n\nExample\n\njulia> using Rimu.InterfaceTests\n\njulia> test_observable_interface(ReducedDensityMatrix(2), FermiFS(1,0,1,1));\nTest Summary:                              | Pass  Total  Time\nObservable interface: ReducedDensityMatrix |    4      4  0.0s\n\nSee also AbstractObservable, test_operator_interface, test_hamiltonian_interface.\n\n\n\n\n\n","category":"function"},{"location":"custom_hamiltonians.html#Rimu.InterfaceTests.test_operator_interface","page":"Custom Hamiltonians","title":"Rimu.InterfaceTests.test_operator_interface","text":"test_operator_interface(op, addr; test_spawning=true)\n\nThis function tests compliance with the AbstractOperator interface for an operator op at address addr (typically <: AbstractFockAddress) by checking that all required methods are defined.\n\nIf test_spawning is true, tests are performed that require offdiagonals to return an Hamiltonians.AbstractOffDiagonals, which is a prerequisite for using the spawn! function. Otherwise, the spawning tests are skipped.\n\nThe following properties are tested:\n\ndiagonal_element returns a value of the same type as the eltype of the operator\noffdiagonals behaves like an AbstractVector\nnum_offdiagonals returns the correct number of offdiagonals\nrandom_offdiagonal returns a tuple with the correct types\nmul! and dot work as expected\ndimension returns a consistent value\nthe AbstractObservable interface is tested\n\nExample\n\njulia> using Rimu.InterfaceTests\n\njulia> test_operator_interface(SuperfluidCorrelator(3), BoseFS(1, 2, 3, 1));\nTest Summary:                              | Pass  Total  Time\nObservable interface: SuperfluidCorrelator |    4      4  0.0s\nTest Summary:       | Pass  Total  Time\nallows_address_type |    1      1  0.0s\nTest Summary:                            | Pass  Total  Time\nOperator interface: SuperfluidCorrelator |    9      9  0.0s\n\nSee also AbstractOperator, test_observable_interface, test_hamiltonian_interface.\n\n\n\n\n\n","category":"function"},{"location":"custom_hamiltonians.html#Utilities-for-harmonic-oscillator-models","page":"Custom Hamiltonians","title":"Utilities for harmonic oscillator models","text":"","category":"section"},{"location":"custom_hamiltonians.html","page":"Custom Hamiltonians","title":"Custom Hamiltonians","text":"Useful utilities for harmonic oscillator in Cartesian basis, see HOCartesianContactInteractions and HOCartesianEnergyConservedPerDim.","category":"page"},{"location":"custom_hamiltonians.html","page":"Custom Hamiltonians","title":"Custom Hamiltonians","text":"get_all_blocks\nfock_to_cart","category":"page"},{"location":"custom_hamiltonians.html#Rimu.Hamiltonians.get_all_blocks","page":"Custom Hamiltonians","title":"Rimu.Hamiltonians.get_all_blocks","text":"get_all_blocks(h::Union{HOCartesianContactInteractions,HOCartesianEnergyConservedPerDim};\n    target_energy = nothing,\n    max_energy = nothing,\n    max_blocks = nothing,\n    method = :vertices,\n    kwargs...) -> df\n\nFind all distinct blocks of h. Returns a DataFrame with columns\n\nblock_id: index of block in order found\nblock_E0: noninteracting energy of all elements in the block\nblock_size: number of elements in the block\naddr: first address that generates the block with e.g. BasisSetRepresentation\nindices: tuple of mode indices that allow recreation of the generating address   addr; in this case use e.g. BoseFS(M; indices .=> 1) This is useful when   the DataFrame is loaded from file since Arrow.jl converts custom   types to NamedTuples.\nt_basis: time to generate the basis for each block\n\nKeyword arguments:\n\ntarget_energy: only blocks with this noninteracting energy are found\nmax_energy: only blocks with noninteracting energy less than this are found\nmax_blocks: exit after finding this many blocks\nmethod: Choose between :vertices and :comb for method of enumerating   tuples of quantum numbers\nsave_to_file=nothing: if set then the DataFrame recording blocks is saved   after each new block is found\nadditional kwargs: passed to isapprox for comparing block energies.   Useful for anisotropic traps\n\nNote: If h was constructed with option block_by_level = false then the block seeds addr are determined by parity. In this case the blocks are not generated; t_basis will be zero, and block_size will be an estimate. Pass the seed addresses to BasisSetRepresentation with an appropriate filter to generate the blocks.\n\n\n\n\n\n","category":"function"},{"location":"custom_hamiltonians.html#Rimu.Hamiltonians.fock_to_cart","page":"Custom Hamiltonians","title":"Rimu.Hamiltonians.fock_to_cart","text":"fock_to_cart(addr, S; zero_index = true)\n\nConvert a Fock state address addr to Cartesian harmonic oscillator basis indices n_xn_yldots. These indices are bounded by S which is a tuple of the maximum number of states in each dimension. By default the groundstate in each dimension is indexed by 0, but this can be changed by setting zero_index = false.\n\n\n\n\n\n","category":"function"},{"location":"custom_hamiltonians.html","page":"Custom Hamiltonians","title":"Custom Hamiltonians","text":"Underlying integrals for the interaction matrix elements are implemented in the following unexported functions","category":"page"},{"location":"custom_hamiltonians.html","page":"Custom Hamiltonians","title":"Custom Hamiltonians","text":"Hamiltonians.four_oscillator_integral_general\nHamiltonians.ho_delta_potential\nHamiltonians.log_abs_oscillator_zero","category":"page"},{"location":"custom_hamiltonians.html#Rimu.Hamiltonians.four_oscillator_integral_general","page":"Custom Hamiltonians","title":"Rimu.Hamiltonians.four_oscillator_integral_general","text":"four_oscillator_integral_general(i, j, k, l; max_level = typemax(Int))\n\nIntegral of four one-dimensional harmonic oscillator functions,\n\n    mathcalI(ijkl) = int_-infty^infty dx \n    phi_i(x) phi_j(x) phi_k(x) phi_l(x)\n\nIndices i,j,k,l start at 0 for the groundstate.\n\nThis integral has a closed form in terms of the hypergeometric _3F_2 function, and is non-zero unless i+j+k+l is odd. See e.g. Titchmarsh (1948). This is a generalisation of the closed form in Papenbrock (2002), which is is the special case where i+j == k+l, but is numerically unstable for large arguments. Used in HOCartesianContactInteractions and HOCartesianEnergyConservedPerDim.\n\n\n\n\n\n","category":"function"},{"location":"custom_hamiltonians.html#Rimu.Hamiltonians.ho_delta_potential","page":"Custom Hamiltonians","title":"Rimu.Hamiltonians.ho_delta_potential","text":"ho_delta_potential(S, i, j; [vals])\n\nReturns the matrix element of a delta potential at the centre of a trap, i.e. the  product of two harmonic oscillator functions evaluated at the origin,\n\n    v_ij = phi_mathbfn_i(0) phi_mathbfn_j(0)\n\nwhich is only non-zero for even-parity states. The ith single particle state corresponds to a D-tuple of harmonic oscillator indices mathbfn_i. S defines the bounds of Cartesian harmonic oscillator indices for each dimension. The optional keyword argument vals allows passing pre-computed values of phi_i(0) to speed-up the calculation. The values can be calculated with log_abs_oscillator_zero.\n\nSee also HOCartesianCentralImpurity.\n\n\n\n\n\n","category":"function"},{"location":"custom_hamiltonians.html#Rimu.Hamiltonians.log_abs_oscillator_zero","page":"Custom Hamiltonians","title":"Rimu.Hamiltonians.log_abs_oscillator_zero","text":"log_abs_oscillator_zero(n)\n\nCompute the logarithm of the absolute value of the n^mathrmth 1D harmonic oscillator function evaluated at the origin. The overall sign is determined when the matrix element is evaluated in ho_delta_potential.\n\n\n\n\n\n","category":"function"},{"location":"custom_hamiltonians.html#Index","page":"Custom Hamiltonians","title":"Index","text":"","category":"section"},{"location":"custom_hamiltonians.html","page":"Custom Hamiltonians","title":"Custom Hamiltonians","text":"Pages   = [\"custom_hamiltonians.md\"]","category":"page"}]
}
