var documenterSearchIndex = {"docs":
[{"location":"mpi.html#Working-with-MPI","page":"Using MPI","title":"Working with MPI","text":"","category":"section"},{"location":"mpi.html","page":"Using MPI","title":"Using MPI","text":"If you are using PDVecs to store your vectors, working with MPI should be fairly straightforward. Generally, PDVec will work with MPI automatically, as long as MPI is set up correctly and a few common pitfalls are avoided.","category":"page"},{"location":"mpi.html","page":"Using MPI","title":"Using MPI","text":"Rimu includes an unexported module RMPI, which must be imported to access additional MPI-related functionality.","category":"page"},{"location":"mpi.html#Configuring-MPI","page":"Using MPI","title":"Configuring MPI","text":"","category":"section"},{"location":"mpi.html","page":"Using MPI","title":"Using MPI","text":"When running on a cluster, ensure that MPI.jl is using the system binary. See the MPI.jl documentation for more information.","category":"page"},{"location":"mpi.html","page":"Using MPI","title":"Using MPI","text":"It is always a good idea to start your script with a quick test that ensures the MPI is set up correctly. One way to do this is to open with","category":"page"},{"location":"mpi.html","page":"Using MPI","title":"Using MPI","text":"using Rimu.RMPI\nmpi_allprintln(\"hello\")","category":"page"},{"location":"mpi.html","page":"Using MPI","title":"Using MPI","text":"which should print something like","category":"page"},{"location":"mpi.html","page":"Using MPI","title":"Using MPI","text":"[ rank 0: hello\n[ rank 1: hello\n[ rank 2: hello\n[ rank 3: hello","category":"page"},{"location":"mpi.html","page":"Using MPI","title":"Using MPI","text":"If it prints rank 0 several times, the code will run, but ranks will not communicate.","category":"page"},{"location":"mpi.html#Using-Slurm","page":"Using MPI","title":"Using Slurm","text":"","category":"section"},{"location":"mpi.html","page":"Using MPI","title":"Using MPI","text":"When using PDVec, the recommended setup is to use threads to parallelise the computation within a node, and to only use MPI for inter-node communication. In a slurm script, this is done as follows:","category":"page"},{"location":"mpi.html","page":"Using MPI","title":"Using MPI","text":"...\n#SBATCH --ntasks-per-node=1\n#SBATCH --nodes=4            # replace 4 with the desired number of nodes\n#SBATCH --cpus-per-task=28   # replace 28 with the number of cores available in a node\n#SBATCH --hint=nomultithread # don't use hyperthreading\n...\n\nsrun julia --project -tauto script.jl","category":"page"},{"location":"mpi.html","page":"Using MPI","title":"Using MPI","text":"On some clusters, additional settings must be used with srun, for example the CTCP cluster requires the following.","category":"page"},{"location":"mpi.html","page":"Using MPI","title":"Using MPI","text":"srun mpi=pmi2 julia --project -tauto script.jl","category":"page"},{"location":"mpi.html#Common-pitfalls-with-reducing-functions","page":"Using MPI","title":"Common pitfalls with reducing functions","text":"","category":"section"},{"location":"mpi.html#Using-@mpi_root","page":"Using MPI","title":"Using @mpi_root","text":"","category":"section"},{"location":"mpi.html","page":"Using MPI","title":"Using MPI","text":"Take care to not use reducing functions (such as length, sum, norm, ...) inside @mpi_root blocks. Doing so will only initiate the distributed reduction on one rank only, which will cause the code to go out of sync and freeze. As an example, to report the current length of a vector, calculate the length before the @mpi_root block:","category":"page"},{"location":"mpi.html","page":"Using MPI","title":"Using MPI","text":"len = length(pdvec)\n@mpi_root println(\"vector length is $len\")","category":"page"},{"location":"mpi.html#Threaded-operations-and-reductions","page":"Using MPI","title":"Threaded operations and reductions","text":"","category":"section"},{"location":"mpi.html","page":"Using MPI","title":"Using MPI","text":"When using functions that take anonymous functions, such as map(!), sum, or mapreduce, it is important that the anonymous functions passed to them do not perform any MPI-reducing operations (length, norm, sum, etc.). These anonymous functions are executed on multiple threads and initiating MPI communication from multiple threads may cause issues.","category":"page"},{"location":"mpi.html","page":"Using MPI","title":"Using MPI","text":"As an example, suppose we want to scale a vector by its length by using map!. The correct way to write this code is as","category":"page"},{"location":"mpi.html","page":"Using MPI","title":"Using MPI","text":"len = length(pdvec)\nmap!(values(pdvec)) do x\n\tx / len\nend","category":"page"},{"location":"mpi.html","page":"Using MPI","title":"Using MPI","text":"Similar to the previous example, len is calculated first and not within the body of map!. In this specific case, an even better option is to use the scale! function from VectorInterface.jl:","category":"page"},{"location":"mpi.html","page":"Using MPI","title":"Using MPI","text":"scale!(pdvec, 1 / length(pdvec))","category":"page"},{"location":"projectormontecarlo.html#Projector-Monte-Carlo-/-FCIQMC","page":"Projector Monte Carlo","title":"Projector Monte Carlo / FCIQMC","text":"","category":"section"},{"location":"projectormontecarlo.html","page":"Projector Monte Carlo","title":"Projector Monte Carlo","text":"The purpose of Projector Monte Carlo is to stochastically sample the ground state, i.e. the  eigenvector corresponding to the lowest eigenvalue of a quantum Hamiltonian, or more generally,  a very large matrix. Rimu implements a flavor of Projector Monte Carlo called  Full Configuration Interaction Quantum Monte Carlo (FCIQMC).","category":"page"},{"location":"projectormontecarlo.html#ProjectorMonteCarloProblem","page":"Projector Monte Carlo","title":"ProjectorMonteCarloProblem","text":"","category":"section"},{"location":"projectormontecarlo.html","page":"Projector Monte Carlo","title":"Projector Monte Carlo","text":"To run a projector Monte Carlo simulation you set up a problem with ProjectorMonteCarloProblem and solve it with solve. Alternatively you can initialize a PMCSimulation struct, step!  through time steps, and solve! it to completion. ","category":"page"},{"location":"projectormontecarlo.html","page":"Projector Monte Carlo","title":"Projector Monte Carlo","text":"ProjectorMonteCarloProblem\ninit\nsolve\nsolve!\nstep!","category":"page"},{"location":"projectormontecarlo.html#Rimu.ProjectorMonteCarloProblem-projectormontecarlo","page":"Projector Monte Carlo","title":"Rimu.ProjectorMonteCarloProblem","text":"ProjectorMonteCarloProblem(hamiltonian::AbstractHamiltonian; kwargs...)\n\nDefines a problem to be solved by projector quantum Monte Carlo (QMC) methods, such as the the FCIQMC algorithm.\n\nCommon keyword arguments and defaults:\n\ntime_step = 0.01: Initial time step size.\nlast_step = 100: Controls the number of steps.\ntarget_walkers = 1_000: Target for the 1-norm of the coefficient vector.\nstart_at = starting_address(hamiltonian): Define the initial state vector(s).   An r  s matrix of state vectors can be passed where r is the   number of replicas and s the number of spectral states. See also   default_starting_vector.\nstyle = IsDynamicSemistochastic(): The StochasticStyle of the simulation.\ninitiator = false: Whether to use initiators. Can be true, false, or a valid   InitiatorRule.\nthreading: Default is to use multithreading and/or MPI if available. Set to true to force PDVec for the starting vector, false for serial computation; may be overridden by start_at.\nreporting_strategy = ReportDFAndInfo(): How and when to report results, see ReportingStrategy.\npost_step_strategy = (): Extract observables (e.g. ProjectedEnergy), see PostStepStrategy.\nn_replicas = 1: Number of synchronised independent simulations.\nreplica_strategy = NoStats(n_replicas): Which results to report from replica simulations, see ReplicaStrategy.\n\nExample\n\njulia> hamiltonian = HubbardReal1D(BoseFS(1,2,3));\n\njulia> problem = ProjectorMonteCarloProblem(hamiltonian; target_walkers = 500, last_step = 100);\n\njulia> simulation = solve(problem);\n\njulia> simulation.success[]\ntrue\n\njulia> size(DataFrame(simulation))\n(100, 9)\n\nFurther keyword arguments:\n\nstarting_step = 1: Starting step of the simulation.\nwalltime = Inf: Maximum time allowed for the simulation.\nsimulation_plan = SimulationPlan(; starting_step, last_step, walltime): Defines the   duration of the simulation. Takes precedence over last_step and walltime.\nζ = 0.08: Damping parameter for the shift update.\nξ = ζ^2/4: Forcing parameter for the shift update.\nshift_strategy = DoubleLogUpdate(; target_walkers, ζ, ξ): How to update the shift,   see ShiftStrategy.\ntime_step_strategy = ConstantTimeStep(): Adjust time step or not, see   TimeStepStrategy.\nalgorithm = FCIQMC(; shift_strategy, time_step_strategy): The algorithm to use.   Currenlty only FCIQMC is implemented.\nshift: Initial shift value or collection of shift values. Determined by default from the   Hamiltonian and the starting vectors.\ninitial_shift_parameters: Initial shift parameters or collection of initial shift   parameters. Overrides shift if provided.\nmaxlength = 2 * target_walkers + 100: Maximum length of the vectors.\ndisplay_name = \"PMCSimulation\": Name displayed in progress bar (via ProgressLogging).\nmetadata: User-supplied metadata to be added to the report. Must be an iterable of pairs or a NamedTuple, e.g. metadata = (\"key1\" => \"value1\", \"key2\" => \"value2\"). All metadata is converted to strings.\nrandom_seed = true: Provide and store a seed for the random number generator. If set to   true, a random seed is generated. If set to number, this number is used as the seed.   The seed is used by solve such that solveing the problem twice will yield identical   results. If set to false, no seed is used and results are not reproducible.\n\nSee also init, solve.\n\n\n\n\n\n","category":"type"},{"location":"projectormontecarlo.html#CommonSolve.init-projectormontecarlo","page":"Projector Monte Carlo","title":"CommonSolve.init","text":"init(p::ExactDiagonalizationProblem, [algorithm]; kwargs...)\n\nInitialize a solver for an ExactDiagonalizationProblem p with an optional algorithm. Returns a solver instance that can be solved with solve.\n\nFor a description of the keyword arguments, see the documentation for ExactDiagonalizationProblem.\n\n\n\n\n\ninit(problem::ProjectorMonteCarloProblem; copy_vectors=true)::PMCSimulation\n\nInitialise a Rimu.PMCSimulation.\n\nSee also ProjectorMonteCarloProblem, solve!, solve, step!, Rimu.PMCSimulation.\n\n\n\n\n\n","category":"function"},{"location":"projectormontecarlo.html#CommonSolve.solve-projectormontecarlo","page":"Projector Monte Carlo","title":"CommonSolve.solve","text":"solve(::ProjectorMonteCarloProblem)::PMCSimulation\n\nInitialize and solve a ProjectorMonteCarloProblem until the last step is completed or the walltime limit is reached.\n\nSee also init, solve!, step!, Rimu.PMCSimulation, and solve(::ExactDiagonalizationProblem).\n\n\n\n\n\n","category":"function"},{"location":"projectormontecarlo.html#CommonSolve.solve!-projectormontecarlo","page":"Projector Monte Carlo","title":"CommonSolve.solve!","text":"solve!(sm::PMCSimulation; kwargs...)::PMCSimulation\n\nSolve a Rimu.PMCSimulation until the last step is completed or the walltime limit is reached.\n\nTo continue a previously completed simulation, set a new last_step or walltime using the keyword arguments. Optionally, changes can be made to the replica_strategy, the post_step_strategy, or the reporting_strategy.\n\nOptional keyword arguments:\n\nlast_step = nothing: Set the last step to a new value and continue the simulation.\nwalltime = nothing: Set the allowed walltime to a new value and continue the simulation.\nreset_time = false: Reset the elapsed_time counter and continue the simulation.\nempty_report = false: Empty the report before continuing the simulation.\nreplica_strategy = nothing: Change the replica strategy. Requires the number of replicas   to match the number of replicas in the simulation sm. Implies empty_report = true.\npost_step_strategy = nothing: Change the post-step strategy. Implies   empty_report = true.\nreporting_strategy = nothing: Change the reporting strategy. Implies   empty_report = true.\nmetadata = nothing: Add metadata to the report.\n\nSee also ProjectorMonteCarloProblem, init, solve, step!, Rimu.PMCSimulation.\n\n\n\n\n\n","category":"function"},{"location":"projectormontecarlo.html#CommonSolve.step!-projectormontecarlo","page":"Projector Monte Carlo","title":"CommonSolve.step!","text":"step!(sm::PMCSimulation)::PMCSimulation\n\nAdvance the simulation by one step.\n\nCalling solve! will advance the simulation until the last step or the walltime is exceeded. When completing the simulation without calling solve!, the simulation report needs to be finalised by calling Rimu.finalize_report!.\n\nSee also ProjectorMonteCarloProblem, init, solve!, solve, Rimu.PMCSimulation.\n\n\n\n\n\n","category":"function"},{"location":"projectormontecarlo.html","page":"Projector Monte Carlo","title":"Projector Monte Carlo","text":"After solve or solve! have been called the returned PMCSimulation contains the results of  the projector Monte Carlo calculation.","category":"page"},{"location":"projectormontecarlo.html#PMCSimulation-and-report-as-a-DataFrame","page":"Projector Monte Carlo","title":"PMCSimulation and report as a DataFrame","text":"","category":"section"},{"location":"projectormontecarlo.html","page":"Projector Monte Carlo","title":"Projector Monte Carlo","text":"Rimu.PMCSimulation","category":"page"},{"location":"projectormontecarlo.html#Rimu.PMCSimulation-projectormontecarlo","page":"Projector Monte Carlo","title":"Rimu.PMCSimulation","text":"PMCSimulation\n\nHolds the state and the results of a projector quantum Monte Carlo (PMC) simulation. Is returned by init(::ProjectorMonteCarloProblem) and solved with solve!(::PMCSimulation).\n\nObtain the results of a simulation sm as a DataFrame with DataFrame(sm).\n\nSee also state_vectors, ProjectorMonteCarloProblem, init, solve!.\n\n\n\n\n\n","category":"type"},{"location":"projectormontecarlo.html","page":"Projector Monte Carlo","title":"Projector Monte Carlo","text":"The DataFrame returned from DataFrame(::PMCSimulation) contains the time series data from  the projector Monte Carlo simulation that is of primary interest for analysis. Depending on the  reporting_strategy and other options passed as keyword arguments to  ProjectorMonteCarloProblem it can have different numbers of rows and columns. The rows  correspond to the reported time steps (Monte Carlo steps). There is at least one column with the name :step. Further columns are usually present with additional data reported from the simulation.","category":"page"},{"location":"projectormontecarlo.html","page":"Projector Monte Carlo","title":"Projector Monte Carlo","text":"For the default option algorithm = FCIQMC(; shift_strategy, time_step_strategy) with a single replica (n_replicas = 1) and single spectral state, the fields :shift, :norm, :len will  be present as well as others depending on the style argument and the post_step_strategy.","category":"page"},{"location":"projectormontecarlo.html","page":"Projector Monte Carlo","title":"Projector Monte Carlo","text":"If multiple replicas or spectral states are requested, then the relevant field names in the  DataFrame will have a suffix identifying the respective replica simulation, e.g. the shifts will be reported as shift_1, shift_2, ... ","category":"page"},{"location":"projectormontecarlo.html","page":"Projector Monte Carlo","title":"Projector Monte Carlo","text":"Many tools for analysing the time series data obtained from a  ProjectorMonteCarloProblem are contained in the Module StatsTools.","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"EditURL = \"../../../scripts/G2-example.jl\"","category":"page"},{"location":"generated/G2-example.html#Example-3:-Calculating-observables","page":"Calculating observables","title":"Example 3: Calculating observables","text":"","category":"section"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"This is an example calculation of the two-body correlation function G_2.","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"A runnable script for this example is located here. Run it with julia G2-example.jl.","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"First, we load the reqired packages. Rimu for FCIQMC calculation, and DataFrames for maniplating the output.","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"using Rimu\nusing Random\nusing DataFrames","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"We use the same Hamiltonian as the first example, a Bose-Hubbard model with 6 particles in 6 sites, with strong interactions (we expect a Mott insulating state).","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"m = n = 6\ninitial_address = near_uniform(BoseFS{n,m})\nH = HubbardReal1D(initial_address; u = 6.0, t = 1.0)","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"HubbardReal1D(fs\"|1 1 1 1 1 1⟩\"; u=6.0, t=1.0)","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"Now, we define the operators for the observables we wish to calculate.","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"dvals = 0:m-1\nG2list = ((G2RealCorrelator(d) for d in dvals)...,)","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"(G2RealCorrelator(0), G2RealCorrelator(1), G2RealCorrelator(2), G2RealCorrelator(3), G2RealCorrelator(4), G2RealCorrelator(5))","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"This is a tuple of G2RealCorrelators, subtypes of AbstractHamiltonian. It calculates the density-density correlation function on a lattice","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"    hatG^(2)(d) = frac1M sum_i^M hatn_i (hatn_i+d - delta_0d)","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"with normalisation","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"    sum_d=0^M-1 langle hatG^(2)(d) rangle = fracN (N-1)M","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"Observables that are defined by expectation values are calculated using the \"replica trick\". Thereby several independent copies or \"replicas\" of the state vector are propagated simultaneously. The reason is to have two (or more) stochastically independent copies of the state vector available such that we can calculate bias-free overlaps. We enable this by defining a ReplicaStrategy. Each replica has its own state and FCIQMC is effectively performed independently on each one.  For calculating observables, we use AllOverlaps for the ReplicaStrategy. At each timestep, after the FCIQMC step is performed on, this strategy calculates the overlaps of every operator with the wavefunctions from each pair of replicas.","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"To obtain an unbiased result, at least two replicas should be used. One can also use more than two to improve the statistics. This is particularly helpful when the walker number is low.","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"n_replicas = 3\nreplica_strategy = AllOverlaps(n_replicas; operator=G2list)","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"AllOverlaps{3, 6, Tuple{G2RealCorrelator{0}, G2RealCorrelator{1}, G2RealCorrelator{2}, G2RealCorrelator{3}, G2RealCorrelator{4}, G2RealCorrelator{5}}, true}((G2RealCorrelator(0), G2RealCorrelator(1), G2RealCorrelator(2), G2RealCorrelator(3), G2RealCorrelator(4), G2RealCorrelator(5)))","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"Other FCIQMC parameters and strategies can be set in the same way as before.","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"steps_equilibrate = 1_000\nsteps_measure = 5_000\ntarget_walkers = 100;\ntime_step = 0.001\n","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"Now, we run FCIQMC. Note that passing an initial vector is optional - if we only pass the style, a vector with the appropriate style is created automatically.","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"problem = ProjectorMonteCarloProblem(H;\n    style=IsDynamicSemistochastic(),\n    time_step,\n    last_step = steps_equilibrate + steps_measure,\n    target_walkers,\n    replica_strategy,\n)\nresult = solve(problem)\ndf = DataFrame(result);","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"The output DataFrame has FCIQMC statistics for each replica (e.g. shift, norm),","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"println(filter(startswith(\"shift_\"), names(df)))","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"[\"shift_1\", \"shift_2\", \"shift_3\"]\n","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"as well as vector-vector overlaps (e.g. c1_dot_c2),","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"println(filter(contains(\"dot\"), names(df)))","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"[\"c1_dot_c2\", \"c1_dot_c3\", \"c2_dot_c3\"]\n","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"and operator overlaps (e.g. c1_Op1_c2) between the replicas.","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"println(filter(contains(\"Op\"), names(df)))","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"[\"c1_Op1_c2\", \"c1_Op2_c2\", \"c1_Op3_c2\", \"c1_Op4_c2\", \"c1_Op5_c2\", \"c1_Op6_c2\", \"c1_Op1_c3\", \"c1_Op2_c3\", \"c1_Op3_c3\", \"c1_Op4_c3\", \"c1_Op5_c3\", \"c1_Op6_c3\", \"c2_Op1_c3\", \"c2_Op2_c3\", \"c2_Op3_c3\", \"c2_Op4_c3\", \"c2_Op5_c3\", \"c2_Op6_c3\"]\n","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"The vector-vector and operator overlaps go into calculating the Rayleigh quotient for an observable","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"    langle hatG^(2)(d) rangle = fracsum_ab mathbfc_a^dagger cdot hatG^(2)(d) cdot mathbfc_bsum_ab mathbfc_a^dagger cdot mathbfc_b ","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"The sum over all replica pairs (a,b), especially in the denominator, helps to avoid errors from poor sampling if the number of walkers is too low.","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"We use the function rayleigh_replica_estimator to calculate the Rayleigh quotient using all replicas in df, returning a RatioBlockingResult. Using the keyword skip will ignore the initial equilibration steps.","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"Now, we can calculate the correlation function for each value of d.","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"println(\"Two-body correlator from $n_replicas replicas:\")\nfor d in dvals\n    r = rayleigh_replica_estimator(df; op_name = \"Op$(d+1)\", skip=steps_equilibrate)\n    println(\"   G2($d) = $(r.f) ± $(r.σ_f)\")\nend","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"Two-body correlator from 3 replicas:\n   G2(0) = 0.21543190597382336 ± 0.0014009005513037152\n   G2(1) = 0.9166828882159375 ± 0.0008037768015947177\n   G2(2) = 0.9801722832906513 ± 0.0006896909668551284\n   G2(3) = 0.9908577510129988 ± 0.0008318604867432286\n   G2(4) = 0.9801722832906513 ± 0.0006896909668551284\n   G2(5) = 0.9166828882159375 ± 0.0008037768015947177\n","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"As expected, the onsite correlation at d=0 is low since this is a Mott insulating state with unit filling fraction, and is close to 10 for all other values of the displacement d.","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"Since we ran multiple independent replicas, we also have multiple estimates of the shift energy.","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"println(\"Shift energy from $n_replicas replicas:\")\nfor i in 1:n_replicas\n    se = shift_estimator(df; shift=\"shift_$i\", skip=steps_equilibrate)\n    println(\"   Replica $i: $(se.mean) ± $(se.err)\")\nend\n","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"Shift energy from 3 replicas:\n   Replica 1: -3.9718556614319263 ± 0.158747945418909\n   Replica 2: -4.013363741313479 ± 0.1251223779205368\n   Replica 3: -3.994242112789783 ± 0.12024240190620267\n","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"This page was generated using Literate.jl.","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"EditURL = \"../../../scripts/BHM-example.jl\"","category":"page"},{"location":"generated/BHM-example.html#Example-1:-1D-Bose-Hubbard-Model","page":"1D Bose-Hubbard Model","title":"Example 1: 1D Bose-Hubbard Model","text":"","category":"section"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"This is an example calculation finding the ground state of a 1D Bose-Hubbard chain with 6 particles in 6 lattice sites.","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"A runnable script for this example is located here. Run it with julia BHM-example.jl.","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"First, we load Rimu and Plots.","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"using Rimu\nusing Plots","category":"page"},{"location":"generated/BHM-example.html#Setting-up-the-model","page":"1D Bose-Hubbard Model","title":"Setting up the model","text":"","category":"section"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"We start by defining the physical problem. First, we generate an initial configuration which will be used as a starting point of our computation. In this example, we use a bosonic Fock state with 6 particles evenly distributed in 6 lattice sites.","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"initial_address = near_uniform(BoseFS{6,6})","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"BoseFS{6,6}(1, 1, 1, 1, 1, 1)","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"The Hamiltonian is constructed by initializing a struct with an initial address and model parameters. Here, we use the Bose Hubbard model in one-dimensional real space.","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"H = HubbardReal1D(initial_address; u = 6.0, t = 1.0)","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"HubbardReal1D(fs\"|1 1 1 1 1 1⟩\"; u=6.0, t=1.0)","category":"page"},{"location":"generated/BHM-example.html#Parameters-of-the-calculation","page":"1D Bose-Hubbard Model","title":"Parameters of the calculation","text":"","category":"section"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"Now, let's setup the Monte Carlo calculation. We need to decide the number of walkers to use in this Monte Carlo run, which is equivalent to the average one-norm of the coefficient vector. Higher values will result in better statistics, but require more memory and computing power.","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"target_walkers = 1_000;","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"FCIQMC takes a certain number of steps to equllibrate, after which the observables will fluctuate around a mean value. In this example, we will devote 1000 steps to equilibration and take an additional 2000 steps for measurement.","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"steps_equilibrate = 1_000;\nsteps_measure = 2_000;\nlast_step = steps_equilibrate + steps_measure","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"3000","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"Next, we pick a time step size. FCIQMC does not have a time step error, but the time step needs to be small enough, or the computation might diverge. If the time step is too small, however, the computation might take a long time to equilibrate. The appropriate time step size is problem-dependent and is best determined through experimentation.","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"time_step = 0.001;","category":"page"},{"location":"generated/BHM-example.html#Defining-an-observable","page":"1D Bose-Hubbard Model","title":"Defining an observable","text":"","category":"section"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"Now, let's set up an observable to measure. Here we will measure the projected energy. In additon to the shift, the projected energy is a second estimator for the energy. It usually produces better statistics than the shift.","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"We first need to define a projector. Here, we use the function default_starting_vector to generate a vector with only a single occupied configuration. We will use the same vector as the starting vector for the FCIQMC calculation.","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"initial_vector = default_starting_vector(initial_address; style=IsDynamicSemistochastic())","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"DVec{BoseFS{6, 6, BitString{11, 1, UInt16}},Float64} with 1 entry, style = IsDynamicSemistochastic{Float64,ThresholdCompression,DynamicSemistochastic}()\n  fs\"|1 1 1 1 1 1⟩\" => 10.0","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"The choice of the style argument already determines the FCIQMC algorithm to use. IsDynamicSemistochastic is usually the best choice as it reduces noise and improves the sign problem.","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"Observables that can be calculated by projection of the fluctuating quantum state onto a constant vector are passed into the ProjectorMonteCarloProblem with the post_step_strategy keyword argument.","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"post_step_strategy = ProjectedEnergy(H, initial_vector)","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"ProjectedEnergy{HubbardReal1D{Float64, BoseFS{6, 6, BitString{11, 1, UInt16}}, 6.0, 1.0}, Rimu.DictVectors.FrozenDVec{BoseFS{6, 6, BitString{11, 1, UInt16}}, Float64}, Rimu.DictVectors.FrozenDVec{BoseFS{6, 6, BitString{11, 1, UInt16}}, Float64}}(:vproj, :hproj, HubbardReal1D(fs\"|1 1 1 1 1 1⟩\"; u=6.0, t=1.0), Rimu.FrozenDVec([fs\"|1 1 1 1 1 1⟩\"=>10.0]), Rimu.FrozenDVec([fs\"|1 1 1 1 2 0⟩\"=>-14.1421, fs\"|0 2 1 1 1 1⟩\"=>-14.1421, fs\"|1 1 1 1 0 2⟩\"=>-14.1421, fs\"|1 2 0 1 1 1⟩\"=>-14.1421, fs\"|2 0 1 1 1 1⟩\"=>-14.1421, fs\"|1 1 1 2 0 1⟩\"=>-14.1421, fs\"|1 1 2 0 1 1⟩\"=>-14.1421, fs\"|1 1 0 2 1 1⟩\"=>-14.1421, fs\"|1 1 1 0 2 1⟩\"=>-14.1421, fs\"|1 0 2 1 1 1⟩\"=>-14.1421, fs\"|2 1 1 1 1 0⟩\"=>-14.1421, fs\"|0 1 1 1 1 2⟩\"=>-14.1421]))","category":"page"},{"location":"generated/BHM-example.html#Running-the-calculation","page":"1D Bose-Hubbard Model","title":"Running the calculation","text":"","category":"section"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"This is a two-step process: First we define a ProjectorMonteCarloProblem with all the parameters needed for the simulation","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"problem = ProjectorMonteCarloProblem(\n    H;\n    start_at = initial_vector,\n    last_step,\n    time_step,\n    target_walkers,\n    post_step_strategy\n);","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"To run the simulation we simply call solve on the problem","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"simulation = solve(problem);","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"The simulation object contains the results of the simulation as well as state vectors and strategies. We can extract the time series data for further analysis:","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"df = DataFrame(simulation);","category":"page"},{"location":"generated/BHM-example.html#Analysing-the-results","page":"1D Bose-Hubbard Model","title":"Analysing the results","text":"","category":"section"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"We can plot the norm of the coefficient vector as a function of the number of steps.","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"hline(\n    [target_walkers];\n    label=\"target_walkers\", xlabel=\"step\", ylabel=\"norm\",\n    color=2, linestyle=:dash, margin = 1Plots.cm\n)\nplot!(df.step, df.norm, label=\"norm\", color=1)","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"<?xml version=\"1.0\" encoding=\"utf-8\"?>\n<svg xmlns=\"http://www.w3.org/2000/svg\" xmlns:xlink=\"http://www.w3.org/1999/xlink\" width=\"600\" height=\"400\" viewBox=\"0 0 2400 1600\">\n<defs>\n  <clipPath id=\"clip750\">\n    <rect x=\"0\" y=\"0\" width=\"2400\" height=\"1600\"/>\n  </clipPath>\n</defs>\n<path clip-path=\"url(#clip750)\" d=\"M0 1600 L2400 1600 L2400 0 L0 0  Z\" fill=\"#ffffff\" fill-rule=\"evenodd\" fill-opacity=\"1\"/>\n<defs>\n  <clipPath id=\"clip751\">\n    <rect x=\"480\" y=\"0\" width=\"1681\" height=\"1600\"/>\n  </clipPath>\n</defs>\n<path clip-path=\"url(#clip750)\" d=\"M404.284 1281.45 L2211.02 1281.45 L2211.02 188.976 L404.284 188.976  Z\" fill=\"#ffffff\" fill-rule=\"evenodd\" fill-opacity=\"1\"/>\n<defs>\n  <clipPath id=\"clip752\">\n    <rect x=\"404\" y=\"188\" width=\"1808\" height=\"1093\"/>\n  </clipPath>\n</defs>\n<polyline clip-path=\"url(#clip752)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:2; stroke-opacity:0.1; fill:none\" points=\"454.849,1281.45 454.849,188.976 \"/>\n<polyline clip-path=\"url(#clip752)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:2; stroke-opacity:0.1; fill:none\" points=\"1023.2,1281.45 1023.2,188.976 \"/>\n<polyline clip-path=\"url(#clip752)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:2; stroke-opacity:0.1; fill:none\" points=\"1591.54,1281.45 1591.54,188.976 \"/>\n<polyline clip-path=\"url(#clip752)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:2; stroke-opacity:0.1; fill:none\" points=\"2159.89,1281.45 2159.89,188.976 \"/>\n<polyline clip-path=\"url(#clip752)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:2; stroke-opacity:0.1; fill:none\" points=\"404.284,1260.83 2211.02,1260.83 \"/>\n<polyline clip-path=\"url(#clip752)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:2; stroke-opacity:0.1; fill:none\" points=\"404.284,1003.3 2211.02,1003.3 \"/>\n<polyline clip-path=\"url(#clip752)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:2; stroke-opacity:0.1; fill:none\" points=\"404.284,745.762 2211.02,745.762 \"/>\n<polyline clip-path=\"url(#clip752)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:2; stroke-opacity:0.1; fill:none\" points=\"404.284,488.227 2211.02,488.227 \"/>\n<polyline clip-path=\"url(#clip752)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:2; stroke-opacity:0.1; fill:none\" points=\"404.284,230.693 2211.02,230.693 \"/>\n<polyline clip-path=\"url(#clip750)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"404.284,1281.45 2211.02,1281.45 \"/>\n<polyline clip-path=\"url(#clip750)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"454.849,1281.45 454.849,1262.55 \"/>\n<polyline clip-path=\"url(#clip750)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"1023.2,1281.45 1023.2,1262.55 \"/>\n<polyline clip-path=\"url(#clip750)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"1591.54,1281.45 1591.54,1262.55 \"/>\n<polyline clip-path=\"url(#clip750)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"2159.89,1281.45 2159.89,1262.55 \"/>\n<path clip-path=\"url(#clip750)\" d=\"M454.849 1312.37 Q451.238 1312.37 449.41 1315.93 Q447.604 1319.47 447.604 1326.6 Q447.604 1333.71 449.41 1337.27 Q451.238 1340.82 454.849 1340.82 Q458.484 1340.82 460.289 1337.27 Q462.118 1333.71 462.118 1326.6 Q462.118 1319.47 460.289 1315.93 Q458.484 1312.37 454.849 1312.37 M454.849 1308.66 Q460.659 1308.66 463.715 1313.27 Q466.794 1317.85 466.794 1326.6 Q466.794 1335.33 463.715 1339.94 Q460.659 1344.52 454.849 1344.52 Q449.039 1344.52 445.96 1339.94 Q442.905 1335.33 442.905 1326.6 Q442.905 1317.85 445.96 1313.27 Q449.039 1308.66 454.849 1308.66 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip750)\" d=\"M967.722 1339.91 L975.361 1339.91 L975.361 1313.55 L967.05 1315.21 L967.05 1310.95 L975.314 1309.29 L979.99 1309.29 L979.99 1339.91 L987.629 1339.91 L987.629 1343.85 L967.722 1343.85 L967.722 1339.91 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip750)\" d=\"M1007.07 1312.37 Q1003.46 1312.37 1001.63 1315.93 Q999.828 1319.47 999.828 1326.6 Q999.828 1333.71 1001.63 1337.27 Q1003.46 1340.82 1007.07 1340.82 Q1010.71 1340.82 1012.51 1337.27 Q1014.34 1333.71 1014.34 1326.6 Q1014.34 1319.47 1012.51 1315.93 Q1010.71 1312.37 1007.07 1312.37 M1007.07 1308.66 Q1012.88 1308.66 1015.94 1313.27 Q1019.02 1317.85 1019.02 1326.6 Q1019.02 1335.33 1015.94 1339.94 Q1012.88 1344.52 1007.07 1344.52 Q1001.26 1344.52 998.185 1339.94 Q995.129 1335.33 995.129 1326.6 Q995.129 1317.85 998.185 1313.27 Q1001.26 1308.66 1007.07 1308.66 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip750)\" d=\"M1037.24 1312.37 Q1033.62 1312.37 1031.8 1315.93 Q1029.99 1319.47 1029.99 1326.6 Q1029.99 1333.71 1031.8 1337.27 Q1033.62 1340.82 1037.24 1340.82 Q1040.87 1340.82 1042.68 1337.27 Q1044.5 1333.71 1044.5 1326.6 Q1044.5 1319.47 1042.68 1315.93 Q1040.87 1312.37 1037.24 1312.37 M1037.24 1308.66 Q1043.05 1308.66 1046.1 1313.27 Q1049.18 1317.85 1049.18 1326.6 Q1049.18 1335.33 1046.1 1339.94 Q1043.05 1344.52 1037.24 1344.52 Q1031.43 1344.52 1028.35 1339.94 Q1025.29 1335.33 1025.29 1326.6 Q1025.29 1317.85 1028.35 1313.27 Q1031.43 1308.66 1037.24 1308.66 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip750)\" d=\"M1067.4 1312.37 Q1063.79 1312.37 1061.96 1315.93 Q1060.15 1319.47 1060.15 1326.6 Q1060.15 1333.71 1061.96 1337.27 Q1063.79 1340.82 1067.4 1340.82 Q1071.03 1340.82 1072.84 1337.27 Q1074.67 1333.71 1074.67 1326.6 Q1074.67 1319.47 1072.84 1315.93 Q1071.03 1312.37 1067.4 1312.37 M1067.4 1308.66 Q1073.21 1308.66 1076.26 1313.27 Q1079.34 1317.85 1079.34 1326.6 Q1079.34 1335.33 1076.26 1339.94 Q1073.21 1344.52 1067.4 1344.52 Q1061.59 1344.52 1058.51 1339.94 Q1055.45 1335.33 1055.45 1326.6 Q1055.45 1317.85 1058.51 1313.27 Q1061.59 1308.66 1067.4 1308.66 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip750)\" d=\"M1540.15 1339.91 L1556.47 1339.91 L1556.47 1343.85 L1534.53 1343.85 L1534.53 1339.91 Q1537.19 1337.16 1541.77 1332.53 Q1546.38 1327.88 1547.56 1326.53 Q1549.81 1324.01 1550.69 1322.27 Q1551.59 1320.51 1551.59 1318.82 Q1551.59 1316.07 1549.64 1314.33 Q1547.72 1312.6 1544.62 1312.6 Q1542.42 1312.6 1539.97 1313.36 Q1537.54 1314.13 1534.76 1315.68 L1534.76 1310.95 Q1537.58 1309.82 1540.04 1309.24 Q1542.49 1308.66 1544.53 1308.66 Q1549.9 1308.66 1553.09 1311.35 Q1556.29 1314.03 1556.29 1318.52 Q1556.29 1320.65 1555.48 1322.57 Q1554.69 1324.47 1552.58 1327.07 Q1552.01 1327.74 1548.9 1330.95 Q1545.8 1334.15 1540.15 1339.91 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip750)\" d=\"M1576.29 1312.37 Q1572.68 1312.37 1570.85 1315.93 Q1569.04 1319.47 1569.04 1326.6 Q1569.04 1333.71 1570.85 1337.27 Q1572.68 1340.82 1576.29 1340.82 Q1579.92 1340.82 1581.73 1337.27 Q1583.56 1333.71 1583.56 1326.6 Q1583.56 1319.47 1581.73 1315.93 Q1579.92 1312.37 1576.29 1312.37 M1576.29 1308.66 Q1582.1 1308.66 1585.15 1313.27 Q1588.23 1317.85 1588.23 1326.6 Q1588.23 1335.33 1585.15 1339.94 Q1582.1 1344.52 1576.29 1344.52 Q1570.48 1344.52 1567.4 1339.94 Q1564.34 1335.33 1564.34 1326.6 Q1564.34 1317.85 1567.4 1313.27 Q1570.48 1308.66 1576.29 1308.66 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip750)\" d=\"M1606.45 1312.37 Q1602.84 1312.37 1601.01 1315.93 Q1599.2 1319.47 1599.2 1326.6 Q1599.2 1333.71 1601.01 1337.27 Q1602.84 1340.82 1606.45 1340.82 Q1610.08 1340.82 1611.89 1337.27 Q1613.72 1333.71 1613.72 1326.6 Q1613.72 1319.47 1611.89 1315.93 Q1610.08 1312.37 1606.45 1312.37 M1606.45 1308.66 Q1612.26 1308.66 1615.32 1313.27 Q1618.39 1317.85 1618.39 1326.6 Q1618.39 1335.33 1615.32 1339.94 Q1612.26 1344.52 1606.45 1344.52 Q1600.64 1344.52 1597.56 1339.94 Q1594.51 1335.33 1594.51 1326.6 Q1594.51 1317.85 1597.56 1313.27 Q1600.64 1308.66 1606.45 1308.66 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip750)\" d=\"M1636.61 1312.37 Q1633 1312.37 1631.17 1315.93 Q1629.37 1319.47 1629.37 1326.6 Q1629.37 1333.71 1631.17 1337.27 Q1633 1340.82 1636.61 1340.82 Q1640.25 1340.82 1642.05 1337.27 Q1643.88 1333.71 1643.88 1326.6 Q1643.88 1319.47 1642.05 1315.93 Q1640.25 1312.37 1636.61 1312.37 M1636.61 1308.66 Q1642.42 1308.66 1645.48 1313.27 Q1648.56 1317.85 1648.56 1326.6 Q1648.56 1335.33 1645.48 1339.94 Q1642.42 1344.52 1636.61 1344.52 Q1630.8 1344.52 1627.72 1339.94 Q1624.67 1335.33 1624.67 1326.6 Q1624.67 1317.85 1627.72 1313.27 Q1630.8 1308.66 1636.61 1308.66 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip750)\" d=\"M2118.57 1325.21 Q2121.93 1325.93 2123.8 1328.2 Q2125.7 1330.47 2125.7 1333.8 Q2125.7 1338.92 2122.18 1341.72 Q2118.66 1344.52 2112.18 1344.52 Q2110.01 1344.52 2107.69 1344.08 Q2105.4 1343.66 2102.95 1342.81 L2102.95 1338.29 Q2104.89 1339.43 2107.2 1340 Q2109.52 1340.58 2112.04 1340.58 Q2116.44 1340.58 2118.73 1338.85 Q2121.05 1337.11 2121.05 1333.8 Q2121.05 1330.75 2118.89 1329.03 Q2116.76 1327.3 2112.95 1327.3 L2108.92 1327.3 L2108.92 1323.45 L2113.13 1323.45 Q2116.58 1323.45 2118.41 1322.09 Q2120.24 1320.7 2120.24 1318.11 Q2120.24 1315.44 2118.34 1314.03 Q2116.46 1312.6 2112.95 1312.6 Q2111.02 1312.6 2108.82 1313.01 Q2106.63 1313.43 2103.99 1314.31 L2103.99 1310.14 Q2106.65 1309.4 2108.96 1309.03 Q2111.3 1308.66 2113.36 1308.66 Q2118.69 1308.66 2121.79 1311.09 Q2124.89 1313.5 2124.89 1317.62 Q2124.89 1320.49 2123.25 1322.48 Q2121.6 1324.45 2118.57 1325.21 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip750)\" d=\"M2144.57 1312.37 Q2140.95 1312.37 2139.13 1315.93 Q2137.32 1319.47 2137.32 1326.6 Q2137.32 1333.71 2139.13 1337.27 Q2140.95 1340.82 2144.57 1340.82 Q2148.2 1340.82 2150.01 1337.27 Q2151.83 1333.71 2151.83 1326.6 Q2151.83 1319.47 2150.01 1315.93 Q2148.2 1312.37 2144.57 1312.37 M2144.57 1308.66 Q2150.38 1308.66 2153.43 1313.27 Q2156.51 1317.85 2156.51 1326.6 Q2156.51 1335.33 2153.43 1339.94 Q2150.38 1344.52 2144.57 1344.52 Q2138.76 1344.52 2135.68 1339.94 Q2132.62 1335.33 2132.62 1326.6 Q2132.62 1317.85 2135.68 1313.27 Q2138.76 1308.66 2144.57 1308.66 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip750)\" d=\"M2174.73 1312.37 Q2171.12 1312.37 2169.29 1315.93 Q2167.48 1319.47 2167.48 1326.6 Q2167.48 1333.71 2169.29 1337.27 Q2171.12 1340.82 2174.73 1340.82 Q2178.36 1340.82 2180.17 1337.27 Q2182 1333.71 2182 1326.6 Q2182 1319.47 2180.17 1315.93 Q2178.36 1312.37 2174.73 1312.37 M2174.73 1308.66 Q2180.54 1308.66 2183.59 1313.27 Q2186.67 1317.85 2186.67 1326.6 Q2186.67 1335.33 2183.59 1339.94 Q2180.54 1344.52 2174.73 1344.52 Q2168.92 1344.52 2165.84 1339.94 Q2162.78 1335.33 2162.78 1326.6 Q2162.78 1317.85 2165.84 1313.27 Q2168.92 1308.66 2174.73 1308.66 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip750)\" d=\"M2204.89 1312.37 Q2201.28 1312.37 2199.45 1315.93 Q2197.64 1319.47 2197.64 1326.6 Q2197.64 1333.71 2199.45 1337.27 Q2201.28 1340.82 2204.89 1340.82 Q2208.52 1340.82 2210.33 1337.27 Q2212.16 1333.71 2212.16 1326.6 Q2212.16 1319.47 2210.33 1315.93 Q2208.52 1312.37 2204.89 1312.37 M2204.89 1308.66 Q2210.7 1308.66 2213.75 1313.27 Q2216.83 1317.85 2216.83 1326.6 Q2216.83 1335.33 2213.75 1339.94 Q2210.7 1344.52 2204.89 1344.52 Q2199.08 1344.52 2196 1339.94 Q2192.94 1335.33 2192.94 1326.6 Q2192.94 1317.85 2196 1313.27 Q2199.08 1308.66 2204.89 1308.66 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip750)\" d=\"M1266.04 1391.71 L1266.04 1397.25 Q1263.56 1395.98 1260.88 1395.34 Q1258.21 1394.71 1255.34 1394.71 Q1250.98 1394.71 1248.79 1396.04 Q1246.62 1397.38 1246.62 1400.05 Q1246.62 1402.09 1248.18 1403.27 Q1249.74 1404.41 1254.45 1405.46 L1256.46 1405.91 Q1262.7 1407.25 1265.31 1409.7 Q1267.95 1412.12 1267.95 1416.48 Q1267.95 1421.44 1264 1424.34 Q1260.09 1427.23 1253.21 1427.23 Q1250.35 1427.23 1247.23 1426.66 Q1244.14 1426.12 1240.7 1425.01 L1240.7 1418.96 Q1243.95 1420.65 1247.1 1421.51 Q1250.25 1422.33 1253.34 1422.33 Q1257.48 1422.33 1259.7 1420.93 Q1261.93 1419.5 1261.93 1416.92 Q1261.93 1414.54 1260.31 1413.26 Q1258.72 1411.99 1253.27 1410.81 L1251.24 1410.33 Q1245.79 1409.19 1243.38 1406.83 Q1240.96 1404.45 1240.96 1400.31 Q1240.96 1395.28 1244.52 1392.54 Q1248.09 1389.8 1254.64 1389.8 Q1257.89 1389.8 1260.75 1390.28 Q1263.62 1390.76 1266.04 1391.71 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip750)\" d=\"M1283.07 1380.54 L1283.07 1390.66 L1295.13 1390.66 L1295.13 1395.22 L1283.07 1395.22 L1283.07 1414.57 Q1283.07 1418.93 1284.24 1420.17 Q1285.45 1421.41 1289.11 1421.41 L1295.13 1421.41 L1295.13 1426.31 L1289.11 1426.31 Q1282.33 1426.31 1279.76 1423.8 Q1277.18 1421.25 1277.18 1414.57 L1277.18 1395.22 L1272.88 1395.22 L1272.88 1390.66 L1277.18 1390.66 L1277.18 1380.54 L1283.07 1380.54 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip750)\" d=\"M1333.32 1407.02 L1333.32 1409.89 L1306.4 1409.89 Q1306.78 1415.94 1310.02 1419.12 Q1313.3 1422.27 1319.13 1422.27 Q1322.5 1422.27 1325.65 1421.44 Q1328.84 1420.61 1331.95 1418.96 L1331.95 1424.5 Q1328.8 1425.83 1325.49 1426.53 Q1322.18 1427.23 1318.78 1427.23 Q1310.25 1427.23 1305.25 1422.27 Q1300.29 1417.3 1300.29 1408.84 Q1300.29 1400.08 1305 1394.96 Q1309.74 1389.8 1317.76 1389.8 Q1324.95 1389.8 1329.12 1394.45 Q1333.32 1399.07 1333.32 1407.02 M1327.47 1405.3 Q1327.4 1400.5 1324.76 1397.63 Q1322.15 1394.77 1317.82 1394.77 Q1312.92 1394.77 1309.96 1397.54 Q1307.03 1400.31 1306.59 1405.34 L1327.47 1405.3 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip750)\" d=\"M1348.6 1420.96 L1348.6 1439.87 L1342.71 1439.87 L1342.71 1390.66 L1348.6 1390.66 L1348.6 1396.07 Q1350.45 1392.89 1353.25 1391.36 Q1356.08 1389.8 1360 1389.8 Q1366.49 1389.8 1370.53 1394.96 Q1374.6 1400.12 1374.6 1408.52 Q1374.6 1416.92 1370.53 1422.08 Q1366.49 1427.23 1360 1427.23 Q1356.08 1427.23 1353.25 1425.71 Q1350.45 1424.15 1348.6 1420.96 M1368.53 1408.52 Q1368.53 1402.06 1365.85 1398.4 Q1363.21 1394.71 1358.56 1394.71 Q1353.92 1394.71 1351.24 1398.4 Q1348.6 1402.06 1348.6 1408.52 Q1348.6 1414.98 1351.24 1418.67 Q1353.92 1422.33 1358.56 1422.33 Q1363.21 1422.33 1365.85 1418.67 Q1368.53 1414.98 1368.53 1408.52 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><polyline clip-path=\"url(#clip750)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"404.284,1281.45 404.284,188.976 \"/>\n<polyline clip-path=\"url(#clip750)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"404.284,1260.83 423.181,1260.83 \"/>\n<polyline clip-path=\"url(#clip750)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"404.284,1003.3 423.181,1003.3 \"/>\n<polyline clip-path=\"url(#clip750)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"404.284,745.762 423.181,745.762 \"/>\n<polyline clip-path=\"url(#clip750)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"404.284,488.227 423.181,488.227 \"/>\n<polyline clip-path=\"url(#clip750)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"404.284,230.693 423.181,230.693 \"/>\n<path clip-path=\"url(#clip750)\" d=\"M356.339 1246.63 Q352.728 1246.63 350.899 1250.19 Q349.094 1253.74 349.094 1260.86 Q349.094 1267.97 350.899 1271.54 Q352.728 1275.08 356.339 1275.08 Q359.973 1275.08 361.779 1271.54 Q363.608 1267.97 363.608 1260.86 Q363.608 1253.74 361.779 1250.19 Q359.973 1246.63 356.339 1246.63 M356.339 1242.92 Q362.149 1242.92 365.205 1247.53 Q368.284 1252.11 368.284 1260.86 Q368.284 1269.59 365.205 1274.2 Q362.149 1278.78 356.339 1278.78 Q350.529 1278.78 347.45 1274.2 Q344.395 1269.59 344.395 1260.86 Q344.395 1252.11 347.45 1247.53 Q350.529 1242.92 356.339 1242.92 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip750)\" d=\"M290.043 1016.64 L306.363 1016.64 L306.363 1020.58 L284.418 1020.58 L284.418 1016.64 Q287.08 1013.89 291.664 1009.26 Q296.27 1004.6 297.451 1003.26 Q299.696 1000.74 300.576 999.002 Q301.478 997.243 301.478 995.553 Q301.478 992.798 299.534 991.062 Q297.613 989.326 294.511 989.326 Q292.312 989.326 289.858 990.09 Q287.427 990.854 284.65 992.405 L284.65 987.682 Q287.474 986.548 289.927 985.969 Q292.381 985.391 294.418 985.391 Q299.789 985.391 302.983 988.076 Q306.177 990.761 306.177 995.252 Q306.177 997.381 305.367 999.303 Q304.58 1001.2 302.474 1003.79 Q301.895 1004.46 298.793 1007.68 Q295.691 1010.88 290.043 1016.64 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip750)\" d=\"M316.224 986.016 L334.58 986.016 L334.58 989.951 L320.506 989.951 L320.506 998.423 Q321.524 998.076 322.543 997.914 Q323.562 997.729 324.58 997.729 Q330.367 997.729 333.747 1000.9 Q337.126 1004.07 337.126 1009.49 Q337.126 1015.07 333.654 1018.17 Q330.182 1021.25 323.862 1021.25 Q321.687 1021.25 319.418 1020.88 Q317.173 1020.51 314.765 1019.77 L314.765 1015.07 Q316.849 1016.2 319.071 1016.76 Q321.293 1017.31 323.77 1017.31 Q327.774 1017.31 330.112 1015.21 Q332.45 1013.1 332.45 1009.49 Q332.45 1005.88 330.112 1003.77 Q327.774 1001.66 323.77 1001.66 Q321.895 1001.66 320.02 1002.08 Q318.168 1002.5 316.224 1003.38 L316.224 986.016 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip750)\" d=\"M356.339 989.094 Q352.728 989.094 350.899 992.659 Q349.094 996.201 349.094 1003.33 Q349.094 1010.44 350.899 1014 Q352.728 1017.54 356.339 1017.54 Q359.973 1017.54 361.779 1014 Q363.608 1010.44 363.608 1003.33 Q363.608 996.201 361.779 992.659 Q359.973 989.094 356.339 989.094 M356.339 985.391 Q362.149 985.391 365.205 989.997 Q368.284 994.581 368.284 1003.33 Q368.284 1012.06 365.205 1016.66 Q362.149 1021.25 356.339 1021.25 Q350.529 1021.25 347.45 1016.66 Q344.395 1012.06 344.395 1003.33 Q344.395 994.581 347.45 989.997 Q350.529 985.391 356.339 985.391 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip750)\" d=\"M286.062 728.482 L304.418 728.482 L304.418 732.417 L290.344 732.417 L290.344 740.889 Q291.363 740.542 292.381 740.38 Q293.4 740.194 294.418 740.194 Q300.205 740.194 303.585 743.366 Q306.964 746.537 306.964 751.954 Q306.964 757.532 303.492 760.634 Q300.02 763.713 293.701 763.713 Q291.525 763.713 289.256 763.342 Q287.011 762.972 284.603 762.231 L284.603 757.532 Q286.687 758.667 288.909 759.222 Q291.131 759.778 293.608 759.778 Q297.613 759.778 299.951 757.671 Q302.288 755.565 302.288 751.954 Q302.288 748.343 299.951 746.236 Q297.613 744.13 293.608 744.13 Q291.733 744.13 289.858 744.546 Q288.006 744.963 286.062 745.843 L286.062 728.482 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip750)\" d=\"M326.177 731.56 Q322.566 731.56 320.737 735.125 Q318.932 738.667 318.932 745.796 Q318.932 752.903 320.737 756.468 Q322.566 760.009 326.177 760.009 Q329.811 760.009 331.617 756.468 Q333.446 752.903 333.446 745.796 Q333.446 738.667 331.617 735.125 Q329.811 731.56 326.177 731.56 M326.177 727.857 Q331.987 727.857 335.043 732.463 Q338.122 737.046 338.122 745.796 Q338.122 754.523 335.043 759.13 Q331.987 763.713 326.177 763.713 Q320.367 763.713 317.288 759.13 Q314.233 754.523 314.233 745.796 Q314.233 737.046 317.288 732.463 Q320.367 727.857 326.177 727.857 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip750)\" d=\"M356.339 731.56 Q352.728 731.56 350.899 735.125 Q349.094 738.667 349.094 745.796 Q349.094 752.903 350.899 756.468 Q352.728 760.009 356.339 760.009 Q359.973 760.009 361.779 756.468 Q363.608 752.903 363.608 745.796 Q363.608 738.667 361.779 735.125 Q359.973 731.56 356.339 731.56 M356.339 727.857 Q362.149 727.857 365.205 732.463 Q368.284 737.046 368.284 745.796 Q368.284 754.523 365.205 759.13 Q362.149 763.713 356.339 763.713 Q350.529 763.713 347.45 759.13 Q344.395 754.523 344.395 745.796 Q344.395 737.046 347.45 732.463 Q350.529 727.857 356.339 727.857 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip750)\" d=\"M284.835 470.947 L307.057 470.947 L307.057 472.938 L294.511 505.507 L289.627 505.507 L301.432 474.883 L284.835 474.883 L284.835 470.947 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip750)\" d=\"M316.224 470.947 L334.58 470.947 L334.58 474.883 L320.506 474.883 L320.506 483.355 Q321.524 483.008 322.543 482.845 Q323.562 482.66 324.58 482.66 Q330.367 482.66 333.747 485.832 Q337.126 489.003 337.126 494.419 Q337.126 499.998 333.654 503.1 Q330.182 506.179 323.862 506.179 Q321.687 506.179 319.418 505.808 Q317.173 505.438 314.765 504.697 L314.765 499.998 Q316.849 501.132 319.071 501.688 Q321.293 502.244 323.77 502.244 Q327.774 502.244 330.112 500.137 Q332.45 498.031 332.45 494.419 Q332.45 490.808 330.112 488.702 Q327.774 486.595 323.77 486.595 Q321.895 486.595 320.02 487.012 Q318.168 487.429 316.224 488.308 L316.224 470.947 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip750)\" d=\"M356.339 474.026 Q352.728 474.026 350.899 477.591 Q349.094 481.133 349.094 488.262 Q349.094 495.369 350.899 498.933 Q352.728 502.475 356.339 502.475 Q359.973 502.475 361.779 498.933 Q363.608 495.369 363.608 488.262 Q363.608 481.133 361.779 477.591 Q359.973 474.026 356.339 474.026 M356.339 470.322 Q362.149 470.322 365.205 474.929 Q368.284 479.512 368.284 488.262 Q368.284 496.989 365.205 501.595 Q362.149 506.179 356.339 506.179 Q350.529 506.179 347.45 501.595 Q344.395 496.989 344.395 488.262 Q344.395 479.512 347.45 474.929 Q350.529 470.322 356.339 470.322 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip750)\" d=\"M256.664 244.038 L264.303 244.038 L264.303 217.672 L255.992 219.339 L255.992 215.08 L264.256 213.413 L268.932 213.413 L268.932 244.038 L276.571 244.038 L276.571 247.973 L256.664 247.973 L256.664 244.038 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip750)\" d=\"M296.015 216.492 Q292.404 216.492 290.576 220.057 Q288.77 223.598 288.77 230.728 Q288.77 237.834 290.576 241.399 Q292.404 244.941 296.015 244.941 Q299.65 244.941 301.455 241.399 Q303.284 237.834 303.284 230.728 Q303.284 223.598 301.455 220.057 Q299.65 216.492 296.015 216.492 M296.015 212.788 Q301.826 212.788 304.881 217.395 Q307.96 221.978 307.96 230.728 Q307.96 239.455 304.881 244.061 Q301.826 248.644 296.015 248.644 Q290.205 248.644 287.127 244.061 Q284.071 239.455 284.071 230.728 Q284.071 221.978 287.127 217.395 Q290.205 212.788 296.015 212.788 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip750)\" d=\"M326.177 216.492 Q322.566 216.492 320.737 220.057 Q318.932 223.598 318.932 230.728 Q318.932 237.834 320.737 241.399 Q322.566 244.941 326.177 244.941 Q329.811 244.941 331.617 241.399 Q333.446 237.834 333.446 230.728 Q333.446 223.598 331.617 220.057 Q329.811 216.492 326.177 216.492 M326.177 212.788 Q331.987 212.788 335.043 217.395 Q338.122 221.978 338.122 230.728 Q338.122 239.455 335.043 244.061 Q331.987 248.644 326.177 248.644 Q320.367 248.644 317.288 244.061 Q314.233 239.455 314.233 230.728 Q314.233 221.978 317.288 217.395 Q320.367 212.788 326.177 212.788 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip750)\" d=\"M356.339 216.492 Q352.728 216.492 350.899 220.057 Q349.094 223.598 349.094 230.728 Q349.094 237.834 350.899 241.399 Q352.728 244.941 356.339 244.941 Q359.973 244.941 361.779 241.399 Q363.608 237.834 363.608 230.728 Q363.608 223.598 361.779 220.057 Q359.973 216.492 356.339 216.492 M356.339 212.788 Q362.149 212.788 365.205 217.395 Q368.284 221.978 368.284 230.728 Q368.284 239.455 365.205 244.061 Q362.149 248.644 356.339 248.644 Q350.529 248.644 347.45 244.061 Q344.395 239.455 344.395 230.728 Q344.395 221.978 347.45 217.395 Q350.529 212.788 356.339 212.788 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip750)\" d=\"M184.22 784.801 L205.736 784.801 L205.736 790.657 L184.411 790.657 Q179.351 790.657 176.836 792.631 Q174.322 794.604 174.322 798.551 Q174.322 803.293 177.345 806.03 Q180.369 808.768 185.589 808.768 L205.736 808.768 L205.736 814.656 L170.088 814.656 L170.088 808.768 L175.627 808.768 Q172.412 806.667 170.821 803.834 Q169.229 800.97 169.229 797.246 Q169.229 791.103 173.049 787.952 Q176.836 784.801 184.22 784.801 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip750)\" d=\"M174.194 759.306 Q174.194 764.017 177.886 766.754 Q181.547 769.491 187.944 769.491 Q194.342 769.491 198.034 766.786 Q201.694 764.049 201.694 759.306 Q201.694 754.627 198.002 751.89 Q194.31 749.153 187.944 749.153 Q181.61 749.153 177.918 751.89 Q174.194 754.627 174.194 759.306 M169.229 759.306 Q169.229 751.667 174.194 747.307 Q179.16 742.946 187.944 742.946 Q196.697 742.946 201.694 747.307 Q206.659 751.667 206.659 759.306 Q206.659 766.977 201.694 771.337 Q196.697 775.666 187.944 775.666 Q179.16 775.666 174.194 771.337 Q169.229 766.977 169.229 759.306 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip750)\" d=\"M175.563 712.582 Q174.99 713.569 174.735 714.746 Q174.449 715.892 174.449 717.293 Q174.449 722.258 177.696 724.931 Q180.91 727.573 186.958 727.573 L205.736 727.573 L205.736 733.461 L170.088 733.461 L170.088 727.573 L175.627 727.573 Q172.38 725.727 170.821 722.767 Q169.229 719.807 169.229 715.574 Q169.229 714.969 169.325 714.237 Q169.388 713.505 169.547 712.614 L175.563 712.582 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip750)\" d=\"M176.932 679.83 Q172.985 677.634 171.107 674.579 Q169.229 671.523 169.229 667.385 Q169.229 661.815 173.144 658.792 Q177.027 655.768 184.22 655.768 L205.736 655.768 L205.736 661.656 L184.411 661.656 Q179.287 661.656 176.804 663.47 Q174.322 665.285 174.322 669.009 Q174.322 673.56 177.345 676.202 Q180.369 678.844 185.589 678.844 L205.736 678.844 L205.736 684.732 L184.411 684.732 Q179.255 684.732 176.804 686.546 Q174.322 688.36 174.322 692.148 Q174.322 696.636 177.377 699.278 Q180.401 701.919 185.589 701.919 L205.736 701.919 L205.736 707.808 L170.088 707.808 L170.088 701.919 L175.627 701.919 Q172.348 699.914 170.789 697.113 Q169.229 694.312 169.229 690.461 Q169.229 686.578 171.202 683.873 Q173.176 681.135 176.932 679.83 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><polyline clip-path=\"url(#clip752)\" style=\"stroke:#e26f46; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" stroke-dasharray=\"16, 10\" points=\"-1402.46,230.693 4017.76,230.693 \"/>\n<polyline clip-path=\"url(#clip752)\" style=\"stroke:#009af9; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"455.418,1250.53 455.986,1250.45 456.554,1249.28 457.123,1249.1 457.691,1248.85 458.259,1248.55 458.828,1246.1 459.396,1244.74 459.964,1244.41 460.533,1243.99 461.101,1243.45 461.669,1242.8 462.238,1242.07 462.806,1239.19 463.375,1238.34 463.943,1237.39 464.511,1235.32 465.08,1234.21 465.648,1233.01 466.216,1231.65 466.785,1230.21 467.353,1228.63 467.921,1226.86 468.49,1225.02 469.058,1222.99 469.626,1220.86 470.195,1218.56 470.763,1216.13 471.331,1213.51 471.9,1210.74 472.468,1206.79 473.036,1202.56 473.605,1199.21 474.173,1195.66 474.741,1191.9 475.31,1187.97 475.878,1182.82 476.446,1178.43 477.015,1173.8 477.583,1168.97 478.152,1161.83 478.72,1156.58 479.288,1150.06 479.857,1144.36 480.425,1138.41 480.993,1131.29 481.562,1122.76 482.13,1114.06 482.698,1106.1 483.267,1097.98 483.835,1090.6 484.403,1083.17 484.972,1074.49 485.54,1065.47 486.108,1057.41 486.677,1047.06 487.245,1038.54 487.813,1029.82 488.382,1020.98 488.95,1011.91 489.518,1001.57 490.087,991.306 490.655,981.837 491.224,971.191 491.792,958.342 492.36,948.613 492.929,936.853 493.497,924.982 494.065,915.194 494.634,905.323 495.202,893.274 495.77,881.297 496.339,868.359 496.907,856.462 497.475,842.713 498.044,832.135 498.612,822.401 499.18,811.69 499.749,801.059 500.317,790.53 500.885,779.909 501.454,768.485 502.022,759.05 502.59,745.82 503.159,734.607 503.727,724.676 504.295,713.527 504.864,703.851 505.432,693.15 506.001,683.58 506.569,675.05 507.137,663.512 507.706,654.264 508.274,644.088 508.842,636.209 509.411,627.346 509.979,617.412 510.547,608.902 511.116,599.332 511.684,585.977 512.252,577.98 512.821,571.304 513.389,563.42 513.957,554.607 514.526,545.016 515.094,538.627 515.662,533.354 516.231,524.011 516.799,515.896 517.367,510.157 517.936,503.503 518.504,496.811 519.072,489.181 519.641,483.933 520.209,477.651 520.778,470.699 521.346,462.496 521.914,455.809 522.483,449.238 523.051,443.845 523.619,436.312 524.188,431.271 524.756,427.444 525.324,420.296 525.893,415.869 526.461,413.183 527.029,409.728 527.598,404.237 528.166,401.879 528.734,396.195 529.303,391.997 529.871,388.586 530.439,383.574 531.008,380.662 531.576,376.601 532.144,371.781 532.713,367.211 533.281,364.87 533.85,361.18 534.418,356.656 534.986,352.628 535.555,347.646 536.123,343.055 536.691,342.572 537.26,338.607 537.828,338.125 538.396,334.69 538.965,331.094 539.533,330.551 540.101,326.979 540.67,326.48 541.238,323.985 541.806,321.681 542.375,318.275 542.943,316.026 543.511,313.667 544.08,312.469 544.648,312.202 545.216,309.076 545.785,309.254 546.353,308.282 546.921,304.116 547.49,304.184 548.058,304.308 548.627,304.274 549.195,305.266 549.763,301.942 550.332,297.629 550.9,297.832 551.468,297.039 552.037,296.136 552.605,294.241 553.173,292.096 553.742,291.344 554.31,288.122 554.878,285.471 555.447,283.846 556.015,281.073 556.583,280.413 557.152,279.986 557.72,278.599 558.288,276.152 558.857,275.904 559.425,274.586 559.993,275.405 560.562,274.017 561.13,271.927 561.698,271.808 562.267,270.386 562.835,269.065 563.404,267.894 563.972,267.892 564.54,268.676 565.109,267.678 565.677,268.257 566.245,268.963 566.814,269.361 567.382,265.833 567.95,263.4 568.519,263.228 569.087,263.201 569.655,265.016 570.224,264.634 570.792,264.044 571.36,260.643 571.929,258.497 572.497,258.331 573.065,257.608 573.634,257.943 574.202,258.982 574.77,260.004 575.339,259.488 575.907,257.412 576.476,254.236 577.044,251.442 577.612,253.712 578.181,251.73 578.749,252.063 579.317,253.376 579.886,251.383 580.454,250.728 581.022,250.109 581.591,251.464 582.159,251.524 582.727,252.689 583.296,252.611 583.864,252.514 584.432,252.424 585.001,250.454 585.569,249.37 586.137,250.833 586.706,248.857 587.274,247.901 587.842,249.21 588.411,250.329 588.979,249.309 589.547,249.362 590.116,249.244 590.684,249.301 591.253,250.198 591.821,249.13 592.389,246.019 592.958,245.087 593.526,246.461 594.094,244.371 594.663,245.834 595.231,245.239 595.799,245.532 596.368,246.762 596.936,246.972 597.504,247.882 598.073,247.611 598.641,246.588 599.209,246.588 599.778,246.51 600.346,246.564 600.914,246.533 601.483,246.278 602.051,244.217 602.619,243.414 603.188,242.507 603.756,241.839 604.325,240.863 604.893,238.982 605.461,239.407 606.03,238.665 606.598,237.963 607.166,237.476 607.735,239.116 608.303,240.428 608.871,239.742 609.44,241.276 610.008,237.391 610.576,239.788 611.145,241.246 611.713,242.218 612.281,241.32 612.85,239.543 613.418,238.94 613.986,239.231 614.555,239.477 615.123,242.824 615.691,243.99 616.26,243.924 616.828,242.923 617.396,242.88 617.965,241.649 618.533,241.692 619.102,241.63 619.67,241.788 620.238,240.797 620.807,240.722 621.375,239.692 621.943,240.651 622.512,241.574 623.08,241.745 623.648,242.814 624.217,240.582 624.785,241.668 625.353,242.67 625.922,241.697 626.49,243.843 627.058,244.758 627.627,241.438 628.195,243.308 628.763,242.122 629.332,240.815 629.9,238.832 630.468,236.884 631.037,235.105 631.605,236.318 632.173,236.503 632.742,235.781 633.31,239.41 633.879,239.41 634.447,238.354 635.015,238.752 635.584,237.565 636.152,238.009 636.72,236.99 637.289,237.989 637.857,239.253 638.425,238.231 638.994,237.001 639.562,236.04 640.13,236.134 640.699,235.352 641.267,235.655 641.835,235.956 642.404,235.045 642.972,236.363 643.54,236.699 644.109,235.794 644.677,236.895 645.245,236.906 645.814,235.021 646.382,235.006 646.951,235.062 647.519,234.255 648.087,233.481 648.656,233.639 649.224,233.104 649.792,234.32 650.361,234.46 650.929,235.568 651.497,237.977 652.066,236.948 652.634,235.107 653.202,237.275 653.771,237.377 654.339,237.236 654.907,238.07 655.476,234.91 656.044,232.9 656.612,233.234 657.181,235.55 657.749,235.634 658.317,235.855 658.886,236.948 659.454,236.032 660.022,238.191 660.591,238.308 661.159,240.271 661.728,241.014 662.296,241.776 662.864,241.607 663.433,241.041 664.001,238.586 664.569,239.396 665.138,236.263 665.706,232.208 666.274,231.424 666.843,232.798 667.411,233.357 667.979,229.464 668.548,230.987 669.116,231.485 669.684,229.878 670.253,228.392 670.821,229.164 671.389,229.72 671.958,229.441 672.526,229.056 673.094,229.754 673.663,232.26 674.231,232.628 674.799,233.11 675.368,230.359 675.936,228.801 676.505,226.268 677.073,226.17 677.641,229.086 678.21,229.543 678.778,233.349 679.346,232.641 679.915,234.018 680.483,231.251 681.051,231.719 681.62,233.185 682.188,233.558 682.756,233.771 683.325,235.256 683.893,231.328 684.461,230.757 685.03,232.081 685.598,230.492 686.166,230.875 686.735,230.41 687.303,231.142 687.871,235.7 688.44,236.012 689.008,236.103 689.577,236.212 690.145,234.376 690.713,235.421 691.282,233.653 691.85,235.795 692.418,235.74 692.987,237.074 693.555,236.783 694.123,237.771 694.692,238.815 695.26,235.7 695.828,237.519 696.397,238.623 696.965,237.586 697.533,237.412 698.102,238.435 698.67,238.124 699.238,237.175 699.807,237.013 700.375,240.22 700.943,239.965 701.512,239.456 702.08,240.279 702.648,240.262 703.217,240.856 703.785,242.378 704.354,240.922 704.922,239.509 705.49,239.066 706.059,238.586 706.627,241.172 707.195,241.697 707.764,241.097 708.332,240.676 708.9,240.143 709.469,240.767 710.037,239.271 710.605,237.793 711.174,237.488 711.742,238.22 712.31,237.706 712.879,237.266 713.447,235.996 714.015,234.872 714.584,234.658 715.152,234.74 715.72,235.416 716.289,234.344 716.857,233.342 717.425,233.146 717.994,232.99 718.562,230.858 719.131,233.053 719.699,233.043 720.267,232.066 720.836,232.077 721.404,233.107 721.972,232.259 722.541,233.442 723.109,234.431 723.677,235.391 724.246,232.917 724.814,232.895 725.382,232.883 725.951,234.18 726.519,234.148 727.087,234.102 727.656,231.939 728.224,231.017 728.792,231.272 729.361,232.205 729.929,233.482 730.497,232.267 731.066,234.378 731.634,232.123 732.203,233.2 732.771,233.265 733.339,233.115 733.908,234.066 734.476,234.853 735.044,234.377 735.613,234.309 736.181,233.205 736.749,232.956 737.318,231.898 737.886,230.78 738.454,231.831 739.023,231.97 739.591,230.916 740.159,232.027 740.728,231.947 741.296,230.093 741.864,229.196 742.433,229.361 743.001,228.714 743.569,228.92 744.138,228.133 744.706,227.317 745.274,226.75 745.843,227.122 746.411,229.657 746.98,227.652 747.548,228.973 748.116,232.321 748.685,233.357 749.253,233.06 749.821,233.015 750.39,232.973 750.958,230.988 751.526,232.05 752.095,231.112 752.663,233.464 753.231,233.452 753.8,231.625 754.368,230.776 754.936,232.025 755.505,232.096 756.073,230.987 756.641,230.192 757.21,229.094 757.778,228.268 758.346,226.344 758.915,227.918 759.483,226.279 760.052,226.89 760.62,228.441 761.188,229.894 761.757,229.887 762.325,230.23 762.893,232.261 763.462,234.185 764.03,233.113 764.598,233.035 765.167,235.172 765.735,236.075 766.303,235.891 766.872,231.606 767.44,231.716 768.008,230.682 768.577,232.025 769.145,232.169 769.713,233.403 770.282,231.285 770.85,230.358 771.418,230.312 771.987,232.416 772.555,234.787 773.123,235.605 773.692,237.585 774.26,234.362 774.829,233.037 775.397,234.959 775.965,234.844 776.534,233.896 777.102,232.787 777.67,230.524 778.239,231.8 778.807,233.242 779.375,232.348 779.944,232.228 780.512,232.364 781.08,232.545 781.649,230.609 782.217,229.814 782.785,230.942 783.354,227.892 783.922,226.224 784.49,224.507 785.059,226.098 785.627,229.742 786.195,228.975 786.764,228.063 787.332,227.464 787.9,225.793 788.469,226.207 789.037,226.717 789.606,228.193 790.174,229.595 790.742,227.865 791.311,229.083 791.879,230.205 792.447,231.672 793.016,231.945 793.584,234.151 794.152,235.023 794.721,234.893 795.289,233.631 795.857,232.525 796.426,232.501 796.994,230.652 797.562,230.956 798.131,231.077 798.699,232.112 799.267,232.273 799.836,235.597 800.404,236.468 800.972,236.348 801.541,236.292 802.109,238.301 802.678,237.675 803.246,236.334 803.814,235.961 804.383,237.821 804.951,235.252 805.519,236.144 806.088,235.926 806.656,235.745 807.224,236.396 807.793,233.981 808.361,232.641 808.929,232.602 809.498,231.583 810.066,231.641 810.634,232.777 811.203,231.577 811.771,231.557 812.339,231.823 812.908,229.778 813.476,229.948 814.044,232.092 814.613,230.985 815.181,230.059 815.749,232.237 816.318,233.188 816.886,234.078 817.455,231.841 818.023,231.826 818.591,232.93 819.16,231.705 819.728,229.543 820.296,229.74 820.865,228.656 821.433,231.126 822.001,230.126 822.57,231.167 823.138,231.385 823.706,236.657 824.275,236.248 824.843,235.899 825.411,235.752 825.98,235.447 826.548,234.136 827.116,234.759 827.685,234.489 828.253,235.373 828.821,236.208 829.39,235.836 829.958,234.306 830.526,231.792 831.095,230.793 831.663,227.649 832.232,227.81 832.8,226.063 833.368,226.341 833.937,225.721 834.505,227.11 835.073,228.587 835.642,228.6 836.21,230.836 836.778,231.542 837.347,231.554 837.915,232.69 838.483,231.488 839.052,231.591 839.62,232.701 840.188,233.873 840.757,231.721 841.325,231.604 841.893,233.701 842.462,233.425 843.03,233.267 843.598,232.292 844.167,230.127 844.735,230.365 845.304,229.429 845.872,230.496 846.44,230.373 847.009,230.417 847.577,231.371 848.145,234.506 848.714,233.266 849.282,232.111 849.85,236.348 850.419,236.185 850.987,236.75 851.555,234.117 852.124,234.048 852.692,233.579 853.26,233.376 853.829,233.003 854.397,232.976 854.965,232.896 855.534,232.784 856.102,232.706 856.67,234.42 857.239,234.016 857.807,230.679 858.375,230.695 858.944,230.602 859.512,229.463 860.081,229.674 860.649,228.667 861.217,227.832 861.786,228.931 862.354,227.938 862.922,226.113 863.491,228.456 864.059,226.736 864.627,225.944 865.196,226.416 865.764,224.744 866.332,226.335 866.901,227.661 867.469,227.907 868.037,228.122 868.606,228.47 869.174,229.552 869.742,231.815 870.311,231.598 870.879,231.475 871.447,231.483 872.016,232.654 872.584,232.852 873.152,232.734 873.721,233.576 874.289,231.425 874.858,230.284 875.426,231.518 875.994,233.555 876.563,231.36 877.131,231.239 877.699,230.534 878.268,231.484 878.836,231.496 879.404,232.575 879.973,234.514 880.541,234.04 881.109,233.773 881.678,233.672 882.246,232.613 882.814,232.535 883.383,232.459 883.951,234.148 884.519,234.918 885.088,234.638 885.656,234.546 886.224,235.391 886.793,237.061 887.361,237.639 887.93,235.059 888.498,235.762 889.066,235.362 889.635,236.053 890.203,234.653 890.771,233.409 891.34,232.262 891.908,231.067 892.476,229.926 893.045,229.979 893.613,231.064 894.181,231.167 894.75,232.124 895.318,230.144 895.886,233.341 896.455,233.262 897.023,233.248 897.591,231.085 898.16,227.838 898.728,228.029 899.296,229.106 899.865,230.323 900.433,231.327 901.001,230.15 901.57,233.167 902.138,228.812 902.707,226.892 903.275,227.077 903.843,228.445 904.412,227.806 904.98,227.033 905.548,227.342 906.117,227.809 906.685,227.925 907.253,227.283 907.822,227.396 908.39,226.606 908.958,225.777 909.527,226.108 910.095,228.635 910.663,228.753 911.232,231.038 911.8,231.019 912.368,230.932 912.937,231.919 913.505,233.929 914.073,232.571 914.642,231.556 915.21,232.423 915.779,231.372 916.347,232.492 916.915,231.325 917.484,232.443 918.052,233.509 918.62,232.511 919.189,231.298 919.757,229.17 920.325,229.24 920.894,231.506 921.462,230.406 922.03,230.273 922.599,231.425 923.167,233.381 923.735,232.271 924.304,232.098 924.872,232.815 925.44,232.778 926.009,233.789 926.577,233.404 927.145,233.175 927.714,232.998 928.282,232.021 928.85,232.2 929.419,232.007 929.987,230.931 930.556,230.86 931.124,230.894 931.692,230.932 932.261,229.893 932.829,231.207 933.397,232.132 933.966,230.797 934.534,232.798 935.102,232.712 935.671,233.642 936.239,232.507 936.807,231.297 937.376,231.125 937.944,230.229 938.512,230.147 939.081,231.297 939.649,232.312 940.217,233.242 940.786,234.03 941.354,232.768 941.922,231.464 942.491,232.256 943.059,229.111 943.627,229.64 944.196,232.955 944.764,232.627 945.333,230.558 945.901,230.473 946.469,231.66 947.038,228.323 947.606,229.431 948.174,228.67 948.743,230.717 949.311,230.789 949.879,230.71 950.448,230.552 951.016,228.402 951.584,227.819 952.153,233.132 952.721,232.883 953.289,232.596 953.858,232.696 954.426,232.535 954.994,233.505 955.563,233.393 956.131,234.311 956.699,237.041 957.268,236.488 957.836,235.854 958.405,234.354 958.973,234.385 959.541,233.033 960.11,230.736 960.678,229.675 961.246,229.638 961.815,228.474 962.383,228.795 962.951,229.735 963.52,228.597 964.088,226.808 964.656,229.428 965.225,229.485 965.793,227.197 966.361,226.184 966.93,226.378 967.498,224.766 968.066,226.344 968.635,225.593 969.203,227.059 969.771,228.411 970.34,227.424 970.908,227.565 971.476,226.528 972.045,228.963 972.613,228.212 973.182,230.386 973.75,230.461 974.318,230.328 974.887,230.394 975.455,228.348 976.023,228.574 976.592,227.802 977.16,227.92 977.728,227.2 978.297,227.444 978.865,224.747 979.433,226.268 980.002,227.732 980.57,230.078 981.138,229.278 981.707,229.441 982.275,228.446 982.843,226.551 983.412,227.036 983.98,226.256 984.548,223.554 985.117,219.895 985.685,221.83 986.253,222.676 986.822,223.613 987.39,224.212 987.959,225.752 988.527,228.516 989.095,228.804 989.664,229.263 990.232,229.514 990.8,228.833 991.369,230.047 991.937,231.455 992.505,228.554 993.074,229.755 993.642,226.905 994.21,225.133 994.779,225.669 995.347,228.152 995.915,229.599 996.484,230.088 997.052,229.254 997.62,229.68 998.189,226.961 998.757,227.295 999.325,228.701 999.894,232.163 1000.46,233.284 1001.03,232.328 1001.6,232.349 1002.17,233.596 1002.74,230.698 1003.3,228.701 1003.87,230.025 1004.44,230.464 1005.01,230.539 1005.58,232.823 1006.15,231.916 1006.71,233.191 1007.28,237.006 1007.85,238.772 1008.42,237.211 1008.99,235.911 1009.56,236.836 1010.12,236.344 1010.69,235.926 1011.26,234.521 1011.83,231.312 1012.4,231.33 1012.97,232.456 1013.53,231.208 1014.1,231.467 1014.67,232.329 1015.24,232.326 1015.81,232.226 1016.38,232.234 1016.94,231.268 1017.51,229.04 1018.08,230.151 1018.65,230.232 1019.22,231.261 1019.79,231.328 1020.35,230.216 1020.92,229.229 1021.49,228.448 1022.06,227.537 1022.63,227.796 1023.2,230.228 1023.76,231.531 1024.33,232.603 1024.9,230.607 1025.47,232.724 1026.04,232.647 1026.61,232.621 1027.17,234.849 1027.74,233.782 1028.31,233.758 1028.88,232.567 1029.45,233.57 1030.02,234.426 1030.58,233.414 1031.15,236.455 1031.72,236.143 1032.29,235.941 1032.86,237.853 1033.43,237.447 1033.99,238.813 1034.56,238.517 1035.13,236.725 1035.7,236.34 1036.27,237.851 1036.84,237.508 1037.4,237.064 1037.97,239.76 1038.54,239.337 1039.11,237.789 1039.68,237.185 1040.25,235.707 1040.81,234.247 1041.38,232.084 1041.95,231.887 1042.52,231.649 1043.09,232.454 1043.66,233.391 1044.22,228.856 1044.79,225.883 1045.36,224.121 1045.93,225.518 1046.5,224.742 1047.07,226.224 1047.63,226.433 1048.2,227.615 1048.77,227.819 1049.34,227.955 1049.91,229.099 1050.48,230.295 1051.05,231.352 1051.61,233.339 1052.18,233.249 1052.75,234.202 1053.32,233.887 1053.89,234.736 1054.46,234.386 1055.02,235.18 1055.59,233.57 1056.16,233.538 1056.73,234.563 1057.3,230.235 1057.87,230.333 1058.43,229.287 1059,227.444 1059.57,228.647 1060.14,225.944 1060.71,227.269 1061.28,228.449 1061.84,229.679 1062.41,230.844 1062.98,230.231 1063.55,229.313 1064.12,228.411 1064.69,228.772 1065.25,229.032 1065.82,229.082 1066.39,230.28 1066.96,231.411 1067.53,230.263 1068.1,230.273 1068.66,232.716 1069.23,236.838 1069.8,236.504 1070.37,237.097 1070.94,234.631 1071.51,234.22 1072.07,232.958 1072.64,234.713 1073.21,233.379 1073.78,234.105 1074.35,232.707 1074.92,232.714 1075.48,233.507 1076.05,234.332 1076.62,231.984 1077.19,230.923 1077.76,231.847 1078.33,231.899 1078.89,231.817 1079.46,230.592 1080.03,229.344 1080.6,227.591 1081.17,229.619 1081.74,229.515 1082.3,227.391 1082.87,226.65 1083.44,227.917 1084.01,228.092 1084.58,229.332 1085.15,229.449 1085.71,229.39 1086.28,229.467 1086.85,228.552 1087.42,230.86 1087.99,228.634 1088.56,228.704 1089.12,229.999 1089.69,231.357 1090.26,229.314 1090.83,231.339 1091.4,227.063 1091.97,228.451 1092.53,228.355 1093.1,228.317 1093.67,227.202 1094.24,227.639 1094.81,226.871 1095.38,230.238 1095.94,229.437 1096.51,228.299 1097.08,232.331 1097.65,229.007 1098.22,229.344 1098.79,228.641 1099.35,228.61 1099.92,230.877 1100.49,227.626 1101.06,227.893 1101.63,228.119 1102.2,229.562 1102.76,228.721 1103.33,228.937 1103.9,230.226 1104.47,232.232 1105.04,234.141 1105.61,232.892 1106.17,233.849 1106.74,233.756 1107.31,234.456 1107.88,233.199 1108.45,232.834 1109.02,233.569 1109.58,231.177 1110.15,232.15 1110.72,232.24 1111.29,233.209 1111.86,232.853 1112.43,232.708 1112.99,233.559 1113.56,233.575 1114.13,231.404 1114.7,231.517 1115.27,229.198 1115.84,228.154 1116.4,229.531 1116.97,229.55 1117.54,229.559 1118.11,231.86 1118.68,231.788 1119.25,229.776 1119.81,230.651 1120.38,230.508 1120.95,231.708 1121.52,231.745 1122.09,230.54 1122.66,229.585 1123.23,229.537 1123.79,229.569 1124.36,231.898 1124.93,232.924 1125.5,230.748 1126.07,230.671 1126.64,230.725 1127.2,231.533 1127.77,233.601 1128.34,232.295 1128.91,231.068 1129.48,231.985 1130.05,230.954 1130.61,229.989 1131.18,229.98 1131.75,228.051 1132.32,229.134 1132.89,230.169 1133.46,230.402 1134.02,232.305 1134.59,231.132 1135.16,230.991 1135.73,231.936 1136.3,231.593 1136.87,231.76 1137.43,229.71 1138,233.797 1138.57,232.483 1139.14,232.283 1139.71,232.105 1140.28,229.729 1140.84,227.688 1141.41,227.64 1141.98,228.74 1142.55,230.009 1143.12,230.258 1143.69,229.332 1144.25,232.551 1144.82,231.401 1145.39,232.306 1145.96,229.935 1146.53,230.914 1147.1,230.014 1147.66,229.015 1148.23,227.049 1148.8,225.181 1149.37,225.582 1149.94,225.864 1150.51,225.145 1151.07,224.393 1151.64,224.048 1152.21,223.569 1152.78,223.854 1153.35,224.411 1153.92,227.98 1154.48,229.312 1155.05,229.327 1155.62,228.281 1156.19,227.56 1156.76,228.945 1157.33,228.054 1157.89,230.444 1158.46,231.324 1159.03,230.429 1159.6,229.494 1160.17,230.87 1160.74,229.961 1161.3,230.187 1161.87,229.402 1162.44,229.562 1163.01,230.948 1163.58,231.088 1164.15,232.249 1164.71,233.341 1165.28,230.313 1165.85,231.453 1166.42,231.664 1166.99,232.712 1167.56,233.836 1168.12,233.735 1168.69,237.592 1169.26,238.19 1169.83,235.718 1170.4,236.366 1170.97,236.067 1171.53,235.588 1172.1,233.232 1172.67,232.142 1173.24,232.988 1173.81,235.828 1174.38,234.673 1174.94,233.326 1175.51,234.023 1176.08,233.713 1176.65,232.504 1177.22,232.339 1177.79,232.313 1178.35,232.085 1178.92,230.966 1179.49,231.014 1180.06,228.852 1180.63,231.127 1181.2,232.207 1181.76,234.394 1182.33,233.098 1182.9,234.872 1183.47,233.783 1184.04,232.562 1184.61,235.677 1185.17,234.063 1185.74,233.683 1186.31,231.513 1186.88,232.693 1187.45,233.306 1188.02,230.096 1188.58,230.126 1189.15,231.167 1189.72,229.122 1190.29,230.021 1190.86,228.882 1191.43,226.006 1192,227.454 1192.56,227.523 1193.13,227.696 1193.7,228.753 1194.27,227.913 1194.84,227.931 1195.41,230.116 1195.97,228.035 1196.54,230.22 1197.11,232.392 1197.68,234.2 1198.25,233.881 1198.82,233.478 1199.38,232.314 1199.95,231.99 1200.52,233.91 1201.09,233.86 1201.66,232.51 1202.23,233.511 1202.79,232.33 1203.36,229.985 1203.93,229.977 1204.5,230.825 1205.07,229.461 1205.64,231.502 1206.2,230.294 1206.77,230.369 1207.34,230.289 1207.91,228.06 1208.48,229.163 1209.05,230.416 1209.61,232.261 1210.18,229.895 1210.75,230.904 1211.32,229.747 1211.89,229.04 1212.46,227.993 1213.02,227.279 1213.59,227.516 1214.16,226.587 1214.73,226.852 1215.3,228.174 1215.87,225.187 1216.43,226.462 1217,226.654 1217.57,227.168 1218.14,227.723 1218.71,229.091 1219.28,229.031 1219.84,231.1 1220.41,227.974 1220.98,226.967 1221.55,228.296 1222.12,230.581 1222.69,229.362 1223.25,230.527 1223.82,231.542 1224.39,230.633 1224.96,231.745 1225.53,233.844 1226.1,231.433 1226.66,231.275 1227.23,231.486 1227.8,230.573 1228.37,230.732 1228.94,230.757 1229.51,228.721 1230.07,228.74 1230.64,229.849 1231.21,229.014 1231.78,227.989 1232.35,227.982 1232.92,227.084 1233.48,227.408 1234.05,228.653 1234.62,228.904 1235.19,230.11 1235.76,231.172 1236.33,231.17 1236.89,230.09 1237.46,230.3 1238.03,228.263 1238.6,228.469 1239.17,228.878 1239.74,226.257 1240.3,225.715 1240.87,226.229 1241.44,226.523 1242.01,227.84 1242.58,228.155 1243.15,229.6 1243.71,232.968 1244.28,234.216 1244.85,232.982 1245.42,231.754 1245.99,232.763 1246.56,234.768 1247.12,232.552 1247.69,231.452 1248.26,232.745 1248.83,234.79 1249.4,235.187 1249.97,235.97 1250.53,236.773 1251.1,233.548 1251.67,234.545 1252.24,233.117 1252.81,233.156 1253.38,233.069 1253.94,234.179 1254.51,234.028 1255.08,233.852 1255.65,233.511 1256.22,234.377 1256.79,233.131 1257.35,231.84 1257.92,230.893 1258.49,230.895 1259.06,231.11 1259.63,229.03 1260.2,228.229 1260.76,228.463 1261.33,227.711 1261.9,225.983 1262.47,225.56 1263.04,224.869 1263.61,225.51 1264.18,225.783 1264.74,225.061 1265.31,223.276 1265.88,222.877 1266.45,225.671 1267.02,226.038 1267.59,224.36 1268.15,223.808 1268.72,224.525 1269.29,226.245 1269.86,226.744 1270.43,227.259 1271,227.514 1271.56,229.795 1272.13,230.986 1272.7,230.093 1273.27,231.247 1273.84,232.241 1274.41,233.185 1274.97,228.875 1275.54,228.971 1276.11,230.092 1276.68,231.445 1277.25,230.435 1277.82,230.493 1278.38,230.6 1278.95,231.822 1279.52,230.606 1280.09,232.709 1280.66,233.49 1281.23,234.505 1281.79,235.462 1282.36,236.237 1282.93,237.221 1283.5,238.778 1284.07,238.156 1284.64,237.63 1285.2,237.126 1285.77,233.68 1286.34,235.512 1286.91,235.158 1287.48,234.673 1288.05,234.314 1288.61,236.335 1289.18,236.182 1289.75,236.809 1290.32,235.497 1290.89,233.929 1291.46,231.364 1292.02,229.207 1292.59,229.285 1293.16,226.382 1293.73,228.748 1294.3,229.939 1294.87,233.119 1295.43,233.042 1296,230.792 1296.57,229.728 1297.14,226.792 1297.71,226.166 1298.28,227.657 1298.84,231.959 1299.41,231.784 1299.98,231.944 1300.55,232.018 1301.12,231.875 1301.69,231.847 1302.25,232.471 1302.82,233.353 1303.39,233.234 1303.96,236.19 1304.53,233.861 1305.1,234.651 1305.66,237.377 1306.23,237.919 1306.8,236.494 1307.37,235.998 1307.94,233.488 1308.51,234.245 1309.07,233.07 1309.64,228.826 1310.21,228.824 1310.78,227.924 1311.35,226.071 1311.92,227.418 1312.48,227.606 1313.05,225.677 1313.62,226.098 1314.19,228.502 1314.76,227.626 1315.33,223.662 1315.89,226.117 1316.46,227.53 1317.03,229.615 1317.6,231.61 1318.17,230.617 1318.74,229.649 1319.3,227.705 1319.87,227.769 1320.44,226.076 1321.01,227.339 1321.58,227.633 1322.15,226.056 1322.71,226.35 1323.28,227.759 1323.85,227.949 1324.42,229.143 1324.99,231.301 1325.56,231.169 1326.12,231.377 1326.69,230.322 1327.26,230.264 1327.83,234.471 1328.4,232.303 1328.97,230.107 1329.53,232.251 1330.1,233.361 1330.67,235.365 1331.24,234.245 1331.81,235.129 1332.38,232.937 1332.94,232.986 1333.51,232.704 1334.08,234.461 1334.65,235.295 1335.22,234.91 1335.79,232.554 1336.36,231.188 1336.92,229.822 1337.49,229.876 1338.06,232.187 1338.63,232.045 1339.2,231.915 1339.77,231.797 1340.33,229.7 1340.9,232.002 1341.47,231.783 1342.04,231.742 1342.61,230.608 1343.18,231.571 1343.74,228.509 1344.31,227.846 1344.88,227.098 1345.45,229.184 1346.02,229.632 1346.59,227.954 1347.15,228.406 1347.72,228.338 1348.29,228.502 1348.86,231.767 1349.43,231.838 1350,232.938 1350.56,233.864 1351.13,233.638 1351.7,234.359 1352.27,234.134 1352.84,234.748 1353.41,234.443 1353.97,237.616 1354.54,236.999 1355.11,236.298 1355.68,237.842 1356.25,236.176 1356.82,235.777 1357.38,236.389 1357.95,234.987 1358.52,231.531 1359.09,232.337 1359.66,235.369 1360.23,234.928 1360.79,237.514 1361.36,237.075 1361.93,239.699 1362.5,240.76 1363.07,239.877 1363.64,238.221 1364.2,236.404 1364.77,235.013 1365.34,233.428 1365.91,233.042 1366.48,232.759 1367.05,230.534 1367.61,229.448 1368.18,229.243 1368.75,228.57 1369.32,231.906 1369.89,231.726 1370.46,231.396 1371.02,232.111 1371.59,231.811 1372.16,231.636 1372.73,232.487 1373.3,231.174 1373.87,230.938 1374.43,230.596 1375,229.358 1375.57,228.166 1376.14,231.271 1376.71,229.999 1377.28,231.929 1377.84,231.681 1378.41,230.593 1378.98,227.317 1379.55,227.308 1380.12,227.459 1380.69,227.504 1381.25,226.47 1381.82,226.552 1382.39,226.705 1382.96,230.634 1383.53,230.438 1384.1,229.241 1384.66,229.253 1385.23,229.394 1385.8,230.479 1386.37,230.276 1386.94,227.204 1387.51,225.533 1388.07,228.083 1388.64,226.064 1389.21,225.373 1389.78,227.446 1390.35,226.735 1390.92,227.904 1391.48,227.912 1392.05,228.091 1392.62,228.411 1393.19,228.722 1393.76,229.769 1394.33,229.795 1394.89,231.181 1395.46,230.117 1396.03,229.142 1396.6,226.16 1397.17,228.8 1397.74,228.734 1398.3,227.631 1398.87,228.833 1399.44,226.722 1400.01,227.002 1400.58,227.275 1401.15,226.497 1401.71,225.636 1402.28,226.895 1402.85,228.131 1403.42,228.212 1403.99,229.377 1404.56,228.332 1405.13,226.718 1405.69,227.099 1406.26,229.285 1406.83,229.306 1407.4,229.444 1407.97,229.408 1408.54,230.401 1409.1,230.307 1409.67,229.401 1410.24,231.619 1410.81,229.538 1411.38,229.597 1411.95,229.719 1412.51,230.647 1413.08,230.694 1413.65,231.619 1414.22,234.355 1414.79,235.067 1415.36,234.047 1415.92,233.847 1416.49,234.423 1417.06,231.05 1417.63,231.007 1418.2,229.154 1418.77,231.263 1419.33,229.15 1419.9,230.395 1420.47,229.462 1421.04,227.449 1421.61,225.641 1422.18,226.063 1422.74,225.437 1423.31,227.079 1423.88,227.449 1424.45,229.599 1425.02,232.844 1425.59,231.656 1426.15,232.625 1426.72,232.441 1427.29,232.475 1427.86,231.434 1428.43,231.251 1429,233.211 1429.56,231.948 1430.13,231.9 1430.7,231.648 1431.27,232.43 1431.84,233.349 1432.41,232.07 1432.97,232.939 1433.54,232.729 1434.11,230.711 1434.68,231.747 1435.25,231.57 1435.82,233.395 1436.38,232.047 1436.95,230.892 1437.52,229.945 1438.09,229.091 1438.66,229.488 1439.23,229.681 1439.79,230.66 1440.36,229.745 1440.93,227.725 1441.5,226.898 1442.07,227.997 1442.64,227.031 1443.2,228.413 1443.77,229.312 1444.34,227.113 1444.91,226.565 1445.48,225.082 1446.05,227.884 1446.61,229.337 1447.18,231.561 1447.75,232.744 1448.32,234.806 1448.89,235.411 1449.46,235.011 1450.02,235.791 1450.59,234.357 1451.16,233.102 1451.73,232.963 1452.3,233.929 1452.87,233.662 1453.43,233.608 1454,232.337 1454.57,232.185 1455.14,232.182 1455.71,232.089 1456.28,230.86 1456.84,230.91 1457.41,230.73 1457.98,230.712 1458.55,230.615 1459.12,229.585 1459.69,230.545 1460.25,229.447 1460.82,229.472 1461.39,230.54 1461.96,232.543 1462.53,233.418 1463.1,232.153 1463.66,234.259 1464.23,233.843 1464.8,233.637 1465.37,235.52 1465.94,231.913 1466.51,229.679 1467.07,228.85 1467.64,228.718 1468.21,227.806 1468.78,227.83 1469.35,225.871 1469.92,225.03 1470.48,224.366 1471.05,224.646 1471.62,225.099 1472.19,226.543 1472.76,227.757 1473.33,227.88 1473.89,228.092 1474.46,228.228 1475.03,228.264 1475.6,227.462 1476.17,228.568 1476.74,227.925 1477.31,226.84 1477.87,224.433 1478.44,225.029 1479.01,226.53 1479.58,225.877 1480.15,226.16 1480.72,226.548 1481.28,225.823 1481.85,227.153 1482.42,225.222 1482.99,225.519 1483.56,225.111 1484.13,224.691 1484.69,224.994 1485.26,223.14 1485.83,223.727 1486.4,225.287 1486.97,222.715 1487.54,224.304 1488.1,226.989 1488.67,229.415 1489.24,230.513 1489.81,231.723 1490.38,232.653 1490.95,231.814 1491.51,232.987 1492.08,230.805 1492.65,233.094 1493.22,231.995 1493.79,230.046 1494.36,232.391 1494.92,231.239 1495.49,231.32 1496.06,228.355 1496.63,228.548 1497.2,228.758 1497.77,227.904 1498.33,226.177 1498.9,227.954 1499.47,227.179 1500.04,227.602 1500.61,227.934 1501.18,231.319 1501.74,232.336 1502.31,232.302 1502.88,231.278 1503.45,231.585 1504.02,230.556 1504.59,231.796 1505.15,230.965 1505.72,231.283 1506.29,233.54 1506.86,233.514 1507.43,235.652 1508,235.534 1508.56,235.389 1509.13,235.366 1509.7,236.219 1510.27,235.864 1510.84,237.62 1511.41,236.412 1511.97,238.098 1512.54,240.699 1513.11,240.345 1513.68,240.95 1514.25,240.151 1514.82,239.563 1515.38,240.086 1515.95,240.753 1516.52,239.075 1517.09,237.494 1517.66,236.989 1518.23,236.558 1518.79,235.973 1519.36,233.585 1519.93,233.253 1520.5,231.948 1521.07,232.696 1521.64,232.516 1522.2,235.569 1522.77,234.098 1523.34,230.65 1523.91,231.673 1524.48,230.51 1525.05,230.204 1525.61,231.176 1526.18,229.858 1526.75,231.919 1527.32,233.044 1527.89,232.981 1528.46,231.715 1529.02,229.505 1529.59,232.669 1530.16,233.447 1530.73,232.174 1531.3,231.995 1531.87,229.849 1532.43,229.838 1533,229.914 1533.57,231.069 1534.14,231.071 1534.71,230.093 1535.28,229.176 1535.84,229.97 1536.41,228.814 1536.98,228.974 1537.55,228.16 1538.12,229.261 1538.69,228.434 1539.25,227.562 1539.82,226.927 1540.39,226.071 1540.96,226.439 1541.53,223.699 1542.1,225.061 1542.66,226.365 1543.23,225.82 1543.8,225.115 1544.37,225.478 1544.94,226.868 1545.51,224.997 1546.08,224.63 1546.64,226.211 1547.21,226.438 1547.78,229.859 1548.35,229.826 1548.92,233.845 1549.49,233.287 1550.05,234.287 1550.62,231.878 1551.19,232.85 1551.76,231.677 1552.33,230.443 1552.9,233.395 1553.46,233.214 1554.03,233.17 1554.6,233.071 1555.17,228.775 1555.74,229.088 1556.31,228.067 1556.87,229.211 1557.44,230.304 1558.01,230.346 1558.58,229.317 1559.15,231.533 1559.72,231.532 1560.28,231.495 1560.85,234.565 1561.42,234.11 1561.99,234.123 1562.56,235.138 1563.13,234.731 1563.69,234.492 1564.26,233.138 1564.83,233.299 1565.4,234.349 1565.97,234.098 1566.54,233.792 1567.1,232.86 1567.67,233.597 1568.24,231.416 1568.81,231.416 1569.38,231.267 1569.95,230.19 1570.51,229.078 1571.08,230.203 1571.65,229.231 1572.22,233.31 1572.79,232.122 1573.36,232.267 1573.92,231.233 1574.49,233.146 1575.06,231.768 1575.63,230.588 1576.2,230.618 1576.77,229.538 1577.33,228.171 1577.9,227.552 1578.47,227.755 1579.04,229.835 1579.61,232.107 1580.18,231.928 1580.74,232.94 1581.31,233.685 1581.88,236.239 1582.45,234.678 1583.02,234.163 1583.59,234.958 1584.15,235.506 1584.72,237.354 1585.29,235.778 1585.86,236.247 1586.43,237.573 1587,238.991 1587.56,238.401 1588.13,235.742 1588.7,231.052 1589.27,230.196 1589.84,228.158 1590.41,228.125 1590.97,228.184 1591.54,229.268 1592.11,228.152 1592.68,229.302 1593.25,227.161 1593.82,228.304 1594.38,229.308 1594.95,228.225 1595.52,227.267 1596.09,228.358 1596.66,230.504 1597.23,231.482 1597.79,232.371 1598.36,229.96 1598.93,229.838 1599.5,229.927 1600.07,228.977 1600.64,228.978 1601.2,228.995 1601.77,227.973 1602.34,228.097 1602.91,225.078 1603.48,224.552 1604.05,223.87 1604.61,225.519 1605.18,226.065 1605.75,228.442 1606.32,228.639 1606.89,227.762 1607.46,227.885 1608.02,229.094 1608.59,227.149 1609.16,226.423 1609.73,224.935 1610.3,225.365 1610.87,225.621 1611.43,226.107 1612,228.42 1612.57,225.575 1613.14,224.953 1613.71,227.526 1614.28,226.765 1614.84,226.928 1615.41,227.138 1615.98,226.495 1616.55,225.891 1617.12,227.242 1617.69,227.555 1618.26,227.856 1618.82,228.124 1619.39,227.184 1619.96,229.549 1620.53,229.836 1621.1,231.238 1621.67,231.001 1622.23,231.139 1622.8,230.112 1623.37,234.374 1623.94,234.425 1624.51,237.394 1625.08,236.863 1625.64,237.296 1626.21,238.989 1626.78,237.53 1627.35,236.991 1627.92,236.422 1628.49,233.813 1629.05,232.574 1629.62,232.491 1630.19,231.384 1630.76,232.468 1631.33,234.329 1631.9,233.133 1632.46,232.059 1633.03,232.067 1633.6,232.97 1634.17,233.797 1634.74,233.383 1635.31,231.833 1635.87,234.107 1636.44,233.758 1637.01,232.593 1637.58,233.521 1638.15,235.152 1638.72,232.756 1639.28,231.458 1639.85,232.407 1640.42,233.23 1640.99,232.191 1641.56,231.008 1642.13,233.025 1642.69,233.826 1643.26,234.478 1643.83,236.228 1644.4,235.777 1644.97,235.27 1645.54,234.863 1646.1,234.635 1646.67,232.126 1647.24,231.856 1647.81,232.794 1648.38,233.546 1648.95,233.354 1649.51,229.819 1650.08,231.003 1650.65,230.957 1651.22,227.791 1651.79,228.017 1652.36,227.222 1652.92,225.312 1653.49,224.255 1654.06,225.511 1654.63,226.903 1655.2,227.171 1655.77,227.509 1656.33,227.888 1656.9,228.885 1657.47,227.775 1658.04,229.969 1658.61,230.93 1659.18,231.898 1659.74,231.642 1660.31,231.568 1660.88,231.321 1661.45,235.114 1662.02,232.602 1662.59,233.486 1663.15,232.526 1663.72,233.463 1664.29,232.215 1664.86,230.018 1665.43,231.094 1666,227.996 1666.56,228.32 1667.13,228.397 1667.7,229.711 1668.27,229.688 1668.84,229.758 1669.41,230.611 1669.97,231.714 1670.54,228.544 1671.11,228.776 1671.68,227.906 1672.25,230.963 1672.82,230.072 1673.38,231.151 1673.95,229.362 1674.52,226.529 1675.09,226.884 1675.66,226.992 1676.23,225.371 1676.79,224.579 1677.36,226.142 1677.93,226.495 1678.5,225.733 1679.07,227.143 1679.64,227.49 1680.2,229.002 1680.77,229.149 1681.34,229.264 1681.91,226.318 1682.48,226.592 1683.05,226.879 1683.61,227.048 1684.18,227.482 1684.75,228.52 1685.32,228.682 1685.89,231.019 1686.46,233.028 1687.02,230.949 1687.59,230.89 1688.16,229.784 1688.73,230.879 1689.3,230.952 1689.87,230.623 1690.44,230.554 1691,231.736 1691.57,232.71 1692.14,230.494 1692.71,231.475 1693.28,231.339 1693.85,231.339 1694.41,231.163 1694.98,231.198 1695.55,232.202 1696.12,232.05 1696.69,231.869 1697.26,234.992 1697.82,234.982 1698.39,232.927 1698.96,231.829 1699.53,231.833 1700.1,231.544 1700.67,233.822 1701.23,234.618 1701.8,235.493 1702.37,235.149 1702.94,230.53 1703.51,232.553 1704.08,232.479 1704.64,234.531 1705.21,234.185 1705.78,234.921 1706.35,234.687 1706.92,235.53 1707.49,236.268 1708.05,234.866 1708.62,235.719 1709.19,236.369 1709.76,233.951 1710.33,233.614 1710.9,231.358 1711.46,230.286 1712.03,230.265 1712.6,232.184 1713.17,232.039 1713.74,233.063 1714.31,233.777 1714.87,233.458 1715.44,232.252 1716.01,232.089 1716.58,231.709 1717.15,230.659 1717.72,230.703 1718.28,230.763 1718.85,232.015 1719.42,230.951 1719.99,228.915 1720.56,229.002 1721.13,229.911 1721.69,230.933 1722.26,231.827 1722.83,232.685 1723.4,232.495 1723.97,231.147 1724.54,231.088 1725.1,231.72 1725.67,232.565 1726.24,233.426 1726.81,234.174 1727.38,234.112 1727.95,234.908 1728.51,234.762 1729.08,235.514 1729.65,235.938 1730.22,236.152 1730.79,233.693 1731.36,234.431 1731.92,233.897 1732.49,230.525 1733.06,229.489 1733.63,229.59 1734.2,229.437 1734.77,227.514 1735.33,224.635 1735.9,226.965 1736.47,225.116 1737.04,224.342 1737.61,224.624 1738.18,223.935 1738.74,223.295 1739.31,224.734 1739.88,221.996 1740.45,223.468 1741.02,222.956 1741.59,222.739 1742.15,221.105 1742.72,220.866 1743.29,220.585 1743.86,220.155 1744.43,222.007 1745,223.697 1745.56,222.266 1746.13,222.88 1746.7,224.621 1747.27,226.213 1747.84,227.423 1748.41,226.646 1748.97,227.965 1749.54,229.182 1750.11,228.205 1750.68,227.445 1751.25,227.768 1751.82,226.914 1752.38,227.115 1752.95,228.708 1753.52,228.975 1754.09,231.168 1754.66,231.206 1755.23,232.486 1755.79,231.548 1756.36,233.66 1756.93,232.659 1757.5,230.378 1758.07,230.296 1758.64,228.454 1759.21,227.815 1759.77,228.131 1760.34,228.406 1760.91,228.819 1761.48,227.98 1762.05,227.14 1762.62,225.122 1763.18,225.824 1763.75,226.392 1764.32,223.604 1764.89,224.078 1765.46,226.638 1766.03,227.234 1766.59,229.715 1767.16,229.943 1767.73,232.031 1768.3,232.038 1768.87,231.94 1769.44,234.346 1770,233.232 1770.57,233.176 1771.14,235.271 1771.71,238.25 1772.28,236.873 1772.85,232.457 1773.41,230.216 1773.98,229.423 1774.55,231.837 1775.12,233.771 1775.69,233.698 1776.26,232.337 1776.82,231.311 1777.39,232.337 1777.96,234.354 1778.53,234.129 1779.1,236.008 1779.67,235.679 1780.23,236.359 1780.8,237.1 1781.37,236.735 1781.94,236.483 1782.51,234.043 1783.08,232.557 1783.64,233.428 1784.21,231.159 1784.78,231.245 1785.35,230.141 1785.92,231.219 1786.49,232.313 1787.05,233.195 1787.62,230.123 1788.19,231.004 1788.76,232.291 1789.33,233.318 1789.9,233.194 1790.46,235.106 1791.03,234.698 1791.6,236.529 1792.17,236.149 1792.74,234.551 1793.31,234.411 1793.87,235.354 1794.44,233.083 1795.01,232.943 1795.58,231.754 1796.15,231.444 1796.72,232.388 1797.28,236.269 1797.85,234.983 1798.42,235.528 1798.99,235.221 1799.56,233.811 1800.13,232.822 1800.69,233.41 1801.26,232.139 1801.83,233.917 1802.4,232.705 1802.97,232.616 1803.54,232.48 1804.1,231.287 1804.67,232.232 1805.24,231.02 1805.81,230.881 1806.38,229.895 1806.95,230.826 1807.51,230.759 1808.08,231.889 1808.65,229.814 1809.22,229.732 1809.79,228.459 1810.36,228.815 1810.92,226.828 1811.49,229.142 1812.06,230.259 1812.63,232.231 1813.2,229.338 1813.77,228.463 1814.33,228.65 1814.9,227.841 1815.47,228.089 1816.04,226.167 1816.61,223.354 1817.18,220.755 1817.74,222.383 1818.31,222.884 1818.88,220.184 1819.45,221.947 1820.02,223.751 1820.59,224.049 1821.15,223.609 1821.72,224.032 1822.29,223.703 1822.86,224.229 1823.43,222.762 1824,223.19 1824.56,224.881 1825.13,225.534 1825.7,227.965 1826.27,230.402 1826.84,231.48 1827.41,232.468 1827.97,232.351 1828.54,233.553 1829.11,234.391 1829.68,233.121 1830.25,231.033 1830.82,230.952 1831.39,232.095 1831.95,233.043 1832.52,233.076 1833.09,233.002 1833.66,231.881 1834.23,232.042 1834.8,232.022 1835.36,231.983 1835.93,231.806 1836.5,233.842 1837.07,234.752 1837.64,234.523 1838.21,234.506 1838.77,236.351 1839.34,238.044 1839.91,236.35 1840.48,235.821 1841.05,235.511 1841.62,235.084 1842.18,234.81 1842.75,235.477 1843.32,235.02 1843.89,233.565 1844.46,234.323 1845.03,233.989 1845.59,232.956 1846.16,233.036 1846.73,232.898 1847.3,231.44 1847.87,230.356 1848.44,227.123 1849,225.236 1849.57,225.527 1850.14,224.879 1850.71,224.358 1851.28,226.791 1851.85,226.06 1852.41,223.341 1852.98,225.98 1853.55,226.08 1854.12,227.141 1854.69,224.413 1855.26,225.941 1855.82,226.244 1856.39,228.594 1856.96,229.116 1857.53,229.263 1858.1,231.746 1858.67,231.791 1859.23,232.948 1859.8,231.864 1860.37,232.769 1860.94,233.946 1861.51,234.864 1862.08,234.408 1862.64,236.284 1863.21,236.996 1863.78,235.28 1864.35,232.936 1864.92,230.698 1865.49,232.02 1866.05,232.139 1866.62,232.236 1867.19,232.142 1867.76,233.308 1868.33,234.111 1868.9,232.901 1869.46,232.733 1870.03,234.617 1870.6,233.392 1871.17,233.295 1871.74,232.131 1872.31,232.084 1872.87,231.981 1873.44,229.686 1874.01,227.757 1874.58,230.025 1875.15,227.883 1875.72,226.958 1876.28,226.16 1876.85,225.472 1877.42,227.818 1877.99,227.908 1878.56,228.194 1879.13,227.286 1879.69,230.873 1880.26,230.824 1880.83,230.813 1881.4,230.003 1881.97,232.355 1882.54,232.29 1883.1,232.074 1883.67,233.121 1884.24,231.924 1884.81,232.949 1885.38,232.712 1885.95,232.617 1886.51,232.575 1887.08,232.285 1887.65,231.154 1888.22,231.06 1888.79,232.929 1889.36,231.68 1889.92,232.704 1890.49,231.543 1891.06,232.663 1891.63,232.595 1892.2,233.449 1892.77,233.36 1893.33,234.152 1893.9,233.764 1894.47,233.521 1895.04,231.228 1895.61,232.113 1896.18,231.848 1896.74,230.718 1897.31,230.749 1897.88,231.563 1898.45,233.536 1899.02,234.105 1899.59,232.936 1900.16,233.755 1900.72,234.288 1901.29,233.901 1901.86,233.533 1902.43,233.097 1903,232.984 1903.57,232.636 1904.13,230.572 1904.7,230.631 1905.27,232.642 1905.84,235.493 1906.41,235.049 1906.98,236.361 1907.54,234.844 1908.11,233.306 1908.68,234.937 1909.25,234.592 1909.82,234.269 1910.39,232.627 1910.95,233.28 1911.52,233.025 1912.09,232.862 1912.66,232.44 1913.23,232.055 1913.8,231.894 1914.36,231.495 1914.93,231.15 1915.5,230.908 1916.07,230.516 1916.64,231.543 1917.21,228.181 1917.77,228.404 1918.34,225.342 1918.91,224.562 1919.48,224.938 1920.05,225.109 1920.62,225.223 1921.18,224.478 1921.75,226.072 1922.32,226.452 1922.89,226.621 1923.46,227.738 1924.03,225.79 1924.59,225.134 1925.16,227.561 1925.73,227.828 1926.3,228.026 1926.87,228.035 1927.44,226.154 1928,224.337 1928.57,224.711 1929.14,226.243 1929.71,230.405 1930.28,231.043 1930.85,231.032 1931.41,224.739 1931.98,224.104 1932.55,226.69 1933.12,225.935 1933.69,227.422 1934.26,226.543 1934.82,226.87 1935.39,227.289 1935.96,227.568 1936.53,225.646 1937.1,225.008 1937.67,226.333 1938.23,229.791 1938.8,230.169 1939.37,229.36 1939.94,229.542 1940.51,230.594 1941.08,229.745 1941.64,230.569 1942.21,231.504 1942.78,230.212 1943.35,229.564 1943.92,229.737 1944.49,229.147 1945.05,228.255 1945.62,228.754 1946.19,228.999 1946.76,230.304 1947.33,228.424 1947.9,230.745 1948.46,234.08 1949.03,233.873 1949.6,235.724 1950.17,234.321 1950.74,234.241 1951.31,234.211 1951.87,235.887 1952.44,236.528 1953.01,238.394 1953.58,236.881 1954.15,236.627 1954.72,236.257 1955.28,233.748 1955.85,234.426 1956.42,237.116 1956.99,238.855 1957.56,236.194 1958.13,235.801 1958.69,234.393 1959.26,233.006 1959.83,232.868 1960.4,232.822 1960.97,231.676 1961.54,232.501 1962.1,232.369 1962.67,232.342 1963.24,232.89 1963.81,231.623 1964.38,229.546 1964.95,228.734 1965.51,228.755 1966.08,229.855 1966.65,229.961 1967.22,229.134 1967.79,230.128 1968.36,230.148 1968.92,230.303 1969.49,231.593 1970.06,232.535 1970.63,230.34 1971.2,228.276 1971.77,231.693 1972.34,231.719 1972.9,230.589 1973.47,227.46 1974.04,227.668 1974.61,225.976 1975.18,227.097 1975.75,226.423 1976.31,227.862 1976.88,229.283 1977.45,229.441 1978.02,229.648 1978.59,229.554 1979.16,228.479 1979.72,228.68 1980.29,227.774 1980.86,227.872 1981.43,228.195 1982,229.275 1982.57,228.571 1983.13,228.572 1983.7,228.962 1984.27,228.964 1984.84,230.168 1985.41,231.215 1985.98,229.113 1986.54,230.193 1987.11,232.373 1987.68,233.252 1988.25,232.113 1988.82,230.772 1989.39,231.735 1989.95,231.884 1990.52,230.719 1991.09,232.938 1991.66,232.917 1992.23,231.692 1992.8,233.718 1993.36,233.549 1993.93,231.126 1994.5,232.256 1995.07,232.268 1995.64,230.996 1996.21,231.851 1996.77,233.827 1997.34,233.761 1997.91,236.544 1998.48,236.272 1999.05,235.721 1999.62,235.298 2000.18,235.006 2000.75,233.719 2001.32,232.527 2001.89,232.331 2002.46,233.09 2003.03,231.882 2003.59,232.52 2004.16,231.292 2004.73,231.29 2005.3,228.796 2005.87,229.963 2006.44,229.104 2007,230.062 2007.57,227.829 2008.14,228.118 2008.71,229.203 2009.28,229.099 2009.85,230.276 2010.41,229.944 2010.98,233.023 2011.55,234.809 2012.12,233.551 2012.69,233.495 2013.26,232.07 2013.82,230.772 2014.39,231.647 2014.96,231.253 2015.53,231.208 2016.1,229.863 2016.67,229.68 2017.23,231.765 2017.8,228.485 2018.37,226.622 2018.94,226.784 2019.51,227.001 2020.08,225.208 2020.64,227.507 2021.21,228.684 2021.78,227.693 2022.35,229.884 2022.92,231.75 2023.49,232.445 2024.05,231.103 2024.62,232.242 2025.19,230.928 2025.76,232.23 2026.33,233.312 2026.9,235.124 2027.46,235.738 2028.03,234.222 2028.6,233.923 2029.17,234.498 2029.74,235.389 2030.31,234.734 2030.87,236.461 2031.44,235.007 2032.01,234.4 2032.58,236.204 2033.15,235.68 2033.72,231.043 2034.28,229.849 2034.85,230.589 2035.42,231.618 2035.99,234.673 2036.56,235.171 2037.13,237.506 2037.69,236.889 2038.26,236.357 2038.83,235.786 2039.4,235.154 2039.97,234.552 2040.54,234.058 2041.11,232.557 2041.67,230.974 2042.24,227.886 2042.81,226.816 2043.38,227.087 2043.95,228.545 2044.52,227.615 2045.08,227.419 2045.65,227.497 2046.22,227.481 2046.79,225.501 2047.36,225.714 2047.93,224.087 2048.49,224.718 2049.06,225.959 2049.63,223.964 2050.2,224.341 2050.77,223.932 2051.34,222.605 2051.9,224.348 2052.47,222.855 2053.04,223.557 2053.61,224.111 2054.18,224.661 2054.75,224.278 2055.31,223.639 2055.88,223.863 2056.45,224.45 2057.02,225.907 2057.59,227.21 2058.16,225.416 2058.72,224.88 2059.29,228.693 2059.86,227.802 2060.43,229.131 2061,230.196 2061.57,228.191 2062.13,230.693 2062.7,230.663 2063.27,229.75 2063.84,228.837 2064.41,228.948 2064.98,231.091 2065.54,231.09 2066.11,231.285 2066.68,231.301 2067.25,232.373 2067.82,232.398 2068.39,230.31 2068.95,226.459 2069.52,226.811 2070.09,225.406 2070.66,225.874 2071.23,227.343 2071.8,226.465 2072.36,226.798 2072.93,228.088 2073.5,229.488 2074.07,228.59 2074.64,229.774 2075.21,232.005 2075.77,232.159 2076.34,232.035 2076.91,231.983 2077.48,229.891 2078.05,229.943 2078.62,230.087 2079.18,228.068 2079.75,228.602 2080.32,225.938 2080.89,225.277 2081.46,225.782 2082.03,228.226 2082.59,228.528 2083.16,228.913 2083.73,229.032 2084.3,229.216 2084.87,229.303 2085.44,230.841 2086,228.937 2086.57,229.237 2087.14,228.558 2087.71,230.88 2088.28,232.071 2088.85,231.094 2089.41,232.307 2089.98,232.346 2090.55,231.468 2091.12,231.618 2091.69,234.763 2092.26,233.392 2092.82,230.265 2093.39,229.147 2093.96,229.424 2094.53,229.548 2095.1,230.768 2095.67,231.064 2096.23,232.151 2096.8,234.188 2097.37,233.123 2097.94,231.098 2098.51,231.06 2099.08,231.203 2099.64,231.059 2100.21,232.265 2100.78,233.49 2101.35,233.315 2101.92,234.218 2102.49,236.142 2103.05,235.787 2103.62,235.713 2104.19,233.325 2104.76,234.285 2105.33,234.99 2105.9,234.692 2106.46,233.461 2107.03,233.382 2107.6,234.413 2108.17,232.059 2108.74,231.835 2109.31,231.639 2109.87,230.514 2110.44,230.462 2111.01,229.532 2111.58,226.548 2112.15,226.971 2112.72,227.487 2113.29,225.497 2113.85,224.956 2114.42,224.422 2114.99,225.876 2115.56,227.079 2116.13,227.038 2116.7,228.254 2117.26,228.533 2117.83,225.586 2118.4,223.809 2118.97,224.61 2119.54,226.267 2120.11,228.639 2120.67,229.876 2121.24,232.143 2121.81,233.219 2122.38,234.194 2122.95,236.103 2123.52,234.915 2124.08,233.8 2124.65,232.795 2125.22,230.548 2125.79,229.531 2126.36,230.699 2126.93,229.584 2127.49,232.751 2128.06,232.65 2128.63,234.543 2129.2,238.233 2129.77,239.765 2130.34,239.167 2130.9,239.463 2131.47,237.775 2132.04,239.589 2132.61,238.266 2133.18,236.531 2133.75,236.056 2134.31,235.739 2134.88,233.39 2135.45,233.22 2136.02,233.041 2136.59,233.967 2137.16,232.795 2137.72,230.778 2138.29,228.748 2138.86,231.117 2139.43,232.91 2140,231.849 2140.57,231.604 2141.13,231.822 2141.7,230.493 2142.27,228.523 2142.84,230.696 2143.41,232.809 2143.98,230.655 2144.54,230.615 2145.11,229.637 2145.68,229.67 2146.25,229.885 2146.82,233.191 2147.39,232.965 2147.95,232.77 2148.52,233.437 2149.09,234.243 2149.66,232.84 2150.23,235.642 2150.8,233.096 2151.36,234.795 2151.93,234.497 2152.5,234.118 2153.07,233.836 2153.64,231.433 2154.21,228.174 2154.77,230.38 2155.34,231.378 2155.91,229.006 2156.48,229.167 2157.05,229.377 2157.62,228.198 2158.18,228.229 2158.75,227.466 2159.32,225.724 2159.89,225.087 \"/>\n<path clip-path=\"url(#clip750)\" d=\"M1625.75 1245.03 L2150.8 1245.03 L2150.8 1089.51 L1625.75 1089.51  Z\" fill=\"#ffffff\" fill-rule=\"evenodd\" fill-opacity=\"1\"/>\n<polyline clip-path=\"url(#clip750)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"1625.75,1245.03 2150.8,1245.03 2150.8,1089.51 1625.75,1089.51 1625.75,1245.03 \"/>\n<polyline clip-path=\"url(#clip750)\" style=\"stroke:#e26f46; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" stroke-dasharray=\"16, 10\" points=\"1645.83,1141.35 1766.28,1141.35 \"/>\n<path clip-path=\"url(#clip750)\" d=\"M1793.76 1125.34 L1793.76 1132.71 L1802.53 1132.71 L1802.53 1136.02 L1793.76 1136.02 L1793.76 1150.09 Q1793.76 1153.26 1794.61 1154.16 Q1795.49 1155.07 1798.16 1155.07 L1802.53 1155.07 L1802.53 1158.63 L1798.16 1158.63 Q1793.23 1158.63 1791.35 1156.8 Q1789.48 1154.95 1789.48 1150.09 L1789.48 1136.02 L1786.35 1136.02 L1786.35 1132.71 L1789.48 1132.71 L1789.48 1125.34 L1793.76 1125.34 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip750)\" d=\"M1819.92 1145.6 Q1814.75 1145.6 1812.76 1146.78 Q1810.77 1147.96 1810.77 1150.81 Q1810.77 1153.08 1812.25 1154.42 Q1813.76 1155.74 1816.33 1155.74 Q1819.87 1155.74 1822 1153.24 Q1824.15 1150.72 1824.15 1146.55 L1824.15 1145.6 L1819.92 1145.6 M1828.41 1143.84 L1828.41 1158.63 L1824.15 1158.63 L1824.15 1154.7 Q1822.69 1157.06 1820.52 1158.19 Q1818.34 1159.3 1815.19 1159.3 Q1811.21 1159.3 1808.85 1157.08 Q1806.51 1154.84 1806.51 1151.09 Q1806.51 1146.71 1809.43 1144.49 Q1812.37 1142.27 1818.18 1142.27 L1824.15 1142.27 L1824.15 1141.85 Q1824.15 1138.91 1822.21 1137.31 Q1820.29 1135.69 1816.79 1135.69 Q1814.57 1135.69 1812.46 1136.22 Q1810.36 1136.76 1808.41 1137.82 L1808.41 1133.89 Q1810.75 1132.98 1812.95 1132.54 Q1815.15 1132.08 1817.23 1132.08 Q1822.86 1132.08 1825.63 1135 Q1828.41 1137.91 1828.41 1143.84 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip750)\" d=\"M1852.21 1136.69 Q1851.49 1136.27 1850.63 1136.09 Q1849.8 1135.88 1848.78 1135.88 Q1845.17 1135.88 1843.23 1138.24 Q1841.3 1140.58 1841.3 1144.97 L1841.3 1158.63 L1837.02 1158.63 L1837.02 1132.71 L1841.3 1132.71 L1841.3 1136.73 Q1842.65 1134.37 1844.8 1133.24 Q1846.95 1132.08 1850.03 1132.08 Q1850.47 1132.08 1851 1132.15 Q1851.54 1132.2 1852.18 1132.31 L1852.21 1136.69 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip750)\" d=\"M1872.9 1145.37 Q1872.9 1140.74 1870.98 1138.19 Q1869.08 1135.65 1865.63 1135.65 Q1862.21 1135.65 1860.29 1138.19 Q1858.39 1140.74 1858.39 1145.37 Q1858.39 1149.97 1860.29 1152.52 Q1862.21 1155.07 1865.63 1155.07 Q1869.08 1155.07 1870.98 1152.52 Q1872.9 1149.97 1872.9 1145.37 M1877.16 1155.41 Q1877.16 1162.03 1874.22 1165.25 Q1871.28 1168.49 1865.22 1168.49 Q1862.97 1168.49 1860.98 1168.15 Q1858.99 1167.82 1857.11 1167.13 L1857.11 1162.98 Q1858.99 1164 1860.82 1164.49 Q1862.65 1164.97 1864.54 1164.97 Q1868.73 1164.97 1870.82 1162.78 Q1872.9 1160.6 1872.9 1156.18 L1872.9 1154.07 Q1871.58 1156.36 1869.52 1157.5 Q1867.46 1158.63 1864.59 1158.63 Q1859.82 1158.63 1856.91 1155 Q1853.99 1151.36 1853.99 1145.37 Q1853.99 1139.35 1856.91 1135.72 Q1859.82 1132.08 1864.59 1132.08 Q1867.46 1132.08 1869.52 1133.22 Q1871.58 1134.35 1872.9 1136.64 L1872.9 1132.71 L1877.16 1132.71 L1877.16 1155.41 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip750)\" d=\"M1908.11 1144.6 L1908.11 1146.69 L1888.53 1146.69 Q1888.8 1151.09 1891.17 1153.4 Q1893.55 1155.69 1897.79 1155.69 Q1900.24 1155.69 1902.53 1155.09 Q1904.85 1154.49 1907.11 1153.28 L1907.11 1157.31 Q1904.82 1158.28 1902.42 1158.79 Q1900.01 1159.3 1897.53 1159.3 Q1891.33 1159.3 1887.69 1155.69 Q1884.08 1152.08 1884.08 1145.92 Q1884.08 1139.56 1887.51 1135.83 Q1890.96 1132.08 1896.79 1132.08 Q1902.02 1132.08 1905.05 1135.46 Q1908.11 1138.82 1908.11 1144.6 M1903.85 1143.35 Q1903.8 1139.86 1901.88 1137.78 Q1899.98 1135.69 1896.84 1135.69 Q1893.27 1135.69 1891.12 1137.71 Q1888.99 1139.72 1888.67 1143.38 L1903.85 1143.35 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip750)\" d=\"M1919.31 1125.34 L1919.31 1132.71 L1928.09 1132.71 L1928.09 1136.02 L1919.31 1136.02 L1919.31 1150.09 Q1919.31 1153.26 1920.17 1154.16 Q1921.05 1155.07 1923.71 1155.07 L1928.09 1155.07 L1928.09 1158.63 L1923.71 1158.63 Q1918.78 1158.63 1916.91 1156.8 Q1915.03 1154.95 1915.03 1150.09 L1915.03 1136.02 L1911.91 1136.02 L1911.91 1132.71 L1915.03 1132.71 L1915.03 1125.34 L1919.31 1125.34 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip750)\" d=\"M1953.39 1166.5 L1953.39 1169.81 L1928.76 1169.81 L1928.76 1166.5 L1953.39 1166.5 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip750)\" d=\"M1954.91 1132.71 L1959.17 1132.71 L1964.5 1152.94 L1969.8 1132.71 L1974.82 1132.71 L1980.15 1152.94 L1985.45 1132.71 L1989.71 1132.71 L1982.92 1158.63 L1977.9 1158.63 L1972.32 1137.38 L1966.72 1158.63 L1961.7 1158.63 L1954.91 1132.71 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip750)\" d=\"M2007.95 1145.6 Q2002.78 1145.6 2000.79 1146.78 Q1998.8 1147.96 1998.8 1150.81 Q1998.8 1153.08 2000.28 1154.42 Q2001.79 1155.74 2004.36 1155.74 Q2007.9 1155.74 2010.03 1153.24 Q2012.18 1150.72 2012.18 1146.55 L2012.18 1145.6 L2007.95 1145.6 M2016.44 1143.84 L2016.44 1158.63 L2012.18 1158.63 L2012.18 1154.7 Q2010.72 1157.06 2008.55 1158.19 Q2006.37 1159.3 2003.22 1159.3 Q1999.24 1159.3 1996.88 1157.08 Q1994.54 1154.84 1994.54 1151.09 Q1994.54 1146.71 1997.46 1144.49 Q2000.4 1142.27 2006.21 1142.27 L2012.18 1142.27 L2012.18 1141.85 Q2012.18 1138.91 2010.24 1137.31 Q2008.32 1135.69 2004.82 1135.69 Q2002.6 1135.69 2000.49 1136.22 Q1998.39 1136.76 1996.44 1137.82 L1996.44 1133.89 Q1998.78 1132.98 2000.98 1132.54 Q2003.18 1132.08 2005.26 1132.08 Q2010.89 1132.08 2013.66 1135 Q2016.44 1137.91 2016.44 1143.84 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip750)\" d=\"M2025.22 1122.61 L2029.47 1122.61 L2029.47 1158.63 L2025.22 1158.63 L2025.22 1122.61 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip750)\" d=\"M2038.22 1122.61 L2042.51 1122.61 L2042.51 1143.89 L2055.22 1132.71 L2060.65 1132.71 L2046.91 1144.84 L2061.23 1158.63 L2055.68 1158.63 L2042.51 1145.97 L2042.51 1158.63 L2038.22 1158.63 L2038.22 1122.61 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip750)\" d=\"M2086.33 1144.6 L2086.33 1146.69 L2066.74 1146.69 Q2067.02 1151.09 2069.38 1153.4 Q2071.77 1155.69 2076 1155.69 Q2078.46 1155.69 2080.75 1155.09 Q2083.06 1154.49 2085.33 1153.28 L2085.33 1157.31 Q2083.04 1158.28 2080.63 1158.79 Q2078.22 1159.3 2075.75 1159.3 Q2069.54 1159.3 2065.91 1155.69 Q2062.3 1152.08 2062.3 1145.92 Q2062.3 1139.56 2065.72 1135.83 Q2069.17 1132.08 2075.01 1132.08 Q2080.24 1132.08 2083.27 1135.46 Q2086.33 1138.82 2086.33 1144.6 M2082.07 1143.35 Q2082.02 1139.86 2080.1 1137.78 Q2078.2 1135.69 2075.05 1135.69 Q2071.49 1135.69 2069.34 1137.71 Q2067.21 1139.72 2066.88 1143.38 L2082.07 1143.35 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip750)\" d=\"M2108.34 1136.69 Q2107.62 1136.27 2106.77 1136.09 Q2105.93 1135.88 2104.91 1135.88 Q2101.3 1135.88 2099.36 1138.24 Q2097.44 1140.58 2097.44 1144.97 L2097.44 1158.63 L2093.15 1158.63 L2093.15 1132.71 L2097.44 1132.71 L2097.44 1136.73 Q2098.78 1134.37 2100.93 1133.24 Q2103.09 1132.08 2106.16 1132.08 Q2106.6 1132.08 2107.14 1132.15 Q2107.67 1132.2 2108.32 1132.31 L2108.34 1136.69 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip750)\" d=\"M2129.34 1133.47 L2129.34 1137.5 Q2127.53 1136.57 2125.59 1136.11 Q2123.64 1135.65 2121.56 1135.65 Q2118.39 1135.65 2116.79 1136.62 Q2115.21 1137.59 2115.21 1139.53 Q2115.21 1141.02 2116.35 1141.87 Q2117.48 1142.71 2120.91 1143.47 L2122.37 1143.79 Q2126.9 1144.77 2128.8 1146.55 Q2130.72 1148.31 2130.72 1151.48 Q2130.72 1155.09 2127.85 1157.2 Q2125.01 1159.3 2120.01 1159.3 Q2117.92 1159.3 2115.65 1158.89 Q2113.41 1158.49 2110.91 1157.68 L2110.91 1153.28 Q2113.27 1154.51 2115.56 1155.14 Q2117.85 1155.74 2120.1 1155.74 Q2123.11 1155.74 2124.73 1154.72 Q2126.35 1153.68 2126.35 1151.8 Q2126.35 1150.07 2125.17 1149.14 Q2124.01 1148.22 2120.05 1147.36 L2118.57 1147.01 Q2114.61 1146.18 2112.85 1144.47 Q2111.09 1142.73 2111.09 1139.72 Q2111.09 1136.06 2113.69 1134.07 Q2116.28 1132.08 2121.05 1132.08 Q2123.41 1132.08 2125.49 1132.43 Q2127.58 1132.78 2129.34 1133.47 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><polyline clip-path=\"url(#clip750)\" style=\"stroke:#009af9; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"1645.83,1193.19 1766.28,1193.19 \"/>\n<path clip-path=\"url(#clip750)\" d=\"M1808.06 1194.82 L1808.06 1210.47 L1803.8 1210.47 L1803.8 1194.96 Q1803.8 1191.28 1802.37 1189.45 Q1800.93 1187.62 1798.06 1187.62 Q1794.61 1187.62 1792.62 1189.82 Q1790.63 1192.02 1790.63 1195.82 L1790.63 1210.47 L1786.35 1210.47 L1786.35 1184.55 L1790.63 1184.55 L1790.63 1188.57 Q1792.16 1186.24 1794.22 1185.08 Q1796.3 1183.92 1799.01 1183.92 Q1803.48 1183.92 1805.77 1186.7 Q1808.06 1189.45 1808.06 1194.82 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip750)\" d=\"M1826.61 1187.53 Q1823.18 1187.53 1821.19 1190.22 Q1819.2 1192.88 1819.2 1197.53 Q1819.2 1202.18 1821.17 1204.87 Q1823.16 1207.53 1826.61 1207.53 Q1830.01 1207.53 1832 1204.85 Q1833.99 1202.16 1833.99 1197.53 Q1833.99 1192.93 1832 1190.24 Q1830.01 1187.53 1826.61 1187.53 M1826.61 1183.92 Q1832.16 1183.92 1835.33 1187.53 Q1838.5 1191.14 1838.5 1197.53 Q1838.5 1203.9 1835.33 1207.53 Q1832.16 1211.14 1826.61 1211.14 Q1821.03 1211.14 1817.86 1207.53 Q1814.71 1203.9 1814.71 1197.53 Q1814.71 1191.14 1817.86 1187.53 Q1821.03 1183.92 1826.61 1183.92 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip750)\" d=\"M1860.59 1188.53 Q1859.87 1188.11 1859.01 1187.93 Q1858.18 1187.72 1857.16 1187.72 Q1853.55 1187.72 1851.61 1190.08 Q1849.68 1192.42 1849.68 1196.81 L1849.68 1210.47 L1845.4 1210.47 L1845.4 1184.55 L1849.68 1184.55 L1849.68 1188.57 Q1851.03 1186.21 1853.18 1185.08 Q1855.33 1183.92 1858.41 1183.92 Q1858.85 1183.92 1859.38 1183.99 Q1859.92 1184.04 1860.56 1184.15 L1860.59 1188.53 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip750)\" d=\"M1884.41 1189.52 Q1886 1186.65 1888.23 1185.29 Q1890.45 1183.92 1893.46 1183.92 Q1897.51 1183.92 1899.71 1186.77 Q1901.91 1189.59 1901.91 1194.82 L1901.91 1210.47 L1897.62 1210.47 L1897.62 1194.96 Q1897.62 1191.24 1896.3 1189.43 Q1894.98 1187.62 1892.28 1187.62 Q1888.97 1187.62 1887.04 1189.82 Q1885.12 1192.02 1885.12 1195.82 L1885.12 1210.47 L1880.84 1210.47 L1880.84 1194.96 Q1880.84 1191.21 1879.52 1189.43 Q1878.2 1187.62 1875.45 1187.62 Q1872.18 1187.62 1870.26 1189.85 Q1868.34 1192.05 1868.34 1195.82 L1868.34 1210.47 L1864.06 1210.47 L1864.06 1184.55 L1868.34 1184.55 L1868.34 1188.57 Q1869.8 1186.19 1871.84 1185.06 Q1873.87 1183.92 1876.67 1183.92 Q1879.5 1183.92 1881.47 1185.36 Q1883.46 1186.79 1884.41 1189.52 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /></svg>\n","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"After an initial equilibriation period, the norm fluctuates around the target number of walkers.","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"Now, let's look at using the shift to estimate the ground state energy of H. The mean of the shift is a useful estimator of the energy. Calculating the error bars is a bit more involved as autocorrelations have to be removed from the time series. This can be done with the function shift_estimator, which performs a blocking analysis on the shift column of the dataframe.","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"se = shift_estimator(df; skip=steps_equilibrate)","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"BlockingResult{Float64}\n  mean = -4.024 ± 0.024\n  with uncertainty of ± 0.0021940799756986714\n  from 62 blocks after 5 transformations (k = 6).\n","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"Here, se contains the calculated mean and standard errors of the shift, as well as some additional information related to the blocking analysis.","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"Computing the error of the projected energy is a bit more complicated, as it's a ratio of fluctuating variables contained in the hproj and vproj columns in the dataframe. Thankfully, the complications are handled by the function projected_energy.","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"pe = projected_energy(df; skip=steps_equilibrate)","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"RatioBlockingResult{Float64,MonteCarloMeasurements.Particles{Float64, 2000}}\n  ratio = -4.01408 ± (0.00157552, 0.0014769) (MC)\n  95% confidence interval: [-4.01696, -4.01083] (MC)\n  linear error propagation: -4.01398 ± 0.00153485\n  |δ_y| = |0.00145707| (≤ 0.1 for normal approx)\n  Blocking successful with 31 blocks after 6 transformations (k = 7).\n","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"The result is a ratio distribution. We extract its median and the edges of the 95% confidence interval.","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"v = val_and_errs(pe; p=0.95)","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"(val = -4.014083856020202, val_l = 0.002872099829682284, val_u = 0.0032541462053634618)","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"Let's visualise these estimators together with the time series of the shift.","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"plot(df.step, df.shift, ylabel=\"energy\", xlabel=\"step\", label=\"shift\", margin = 1Plots.cm)\n\nplot!(x->se.mean, df.step[steps_equilibrate+1:end], ribbon=se.err, label=\"shift mean\")\nplot!(\n    x -> v.val, df.step[steps_equilibrate+1:end], ribbon=(v.val_l,v.val_u),\n    label=\"projected energy\",\n)\nlens!([steps_equilibrate, last_step], [-5.1, -2.9]; inset=(1, bbox(0.2, 0.25, 0.6, 0.4)))","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"<?xml version=\"1.0\" encoding=\"utf-8\"?>\n<svg xmlns=\"http://www.w3.org/2000/svg\" xmlns:xlink=\"http://www.w3.org/1999/xlink\" width=\"600\" height=\"400\" viewBox=\"0 0 2400 1600\">\n<defs>\n  <clipPath id=\"clip780\">\n    <rect x=\"0\" y=\"0\" width=\"2400\" height=\"1600\"/>\n  </clipPath>\n</defs>\n<path clip-path=\"url(#clip780)\" d=\"M0 1600 L2400 1600 L2400 0 L0 0  Z\" fill=\"#ffffff\" fill-rule=\"evenodd\" fill-opacity=\"1\"/>\n<defs>\n  <clipPath id=\"clip781\">\n    <rect x=\"480\" y=\"0\" width=\"1681\" height=\"1600\"/>\n  </clipPath>\n</defs>\n<path clip-path=\"url(#clip780)\" d=\"M346.853 1281.45 L2211.02 1281.45 L2211.02 188.976 L346.853 188.976  Z\" fill=\"#ffffff\" fill-rule=\"evenodd\" fill-opacity=\"1\"/>\n<defs>\n  <clipPath id=\"clip782\">\n    <rect x=\"346\" y=\"188\" width=\"1865\" height=\"1093\"/>\n  </clipPath>\n</defs>\n<polyline clip-path=\"url(#clip782)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:2; stroke-opacity:0.1; fill:none\" points=\"399.026,1281.45 399.026,188.976 \"/>\n<polyline clip-path=\"url(#clip782)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:2; stroke-opacity:0.1; fill:none\" points=\"985.439,1281.45 985.439,188.976 \"/>\n<polyline clip-path=\"url(#clip782)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:2; stroke-opacity:0.1; fill:none\" points=\"1571.85,1281.45 1571.85,188.976 \"/>\n<polyline clip-path=\"url(#clip782)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:2; stroke-opacity:0.1; fill:none\" points=\"2158.26,1281.45 2158.26,188.976 \"/>\n<polyline clip-path=\"url(#clip782)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:2; stroke-opacity:0.1; fill:none\" points=\"346.853,1147.54 2211.02,1147.54 \"/>\n<polyline clip-path=\"url(#clip782)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:2; stroke-opacity:0.1; fill:none\" points=\"346.853,984.264 2211.02,984.264 \"/>\n<polyline clip-path=\"url(#clip782)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:2; stroke-opacity:0.1; fill:none\" points=\"346.853,820.992 2211.02,820.992 \"/>\n<polyline clip-path=\"url(#clip782)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:2; stroke-opacity:0.1; fill:none\" points=\"346.853,657.719 2211.02,657.719 \"/>\n<polyline clip-path=\"url(#clip782)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:2; stroke-opacity:0.1; fill:none\" points=\"346.853,494.446 2211.02,494.446 \"/>\n<polyline clip-path=\"url(#clip782)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:2; stroke-opacity:0.1; fill:none\" points=\"346.853,331.174 2211.02,331.174 \"/>\n<polyline clip-path=\"url(#clip780)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"346.853,1281.45 2211.02,1281.45 \"/>\n<polyline clip-path=\"url(#clip780)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"399.026,1281.45 399.026,1262.55 \"/>\n<polyline clip-path=\"url(#clip780)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"985.439,1281.45 985.439,1262.55 \"/>\n<polyline clip-path=\"url(#clip780)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"1571.85,1281.45 1571.85,1262.55 \"/>\n<polyline clip-path=\"url(#clip780)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"2158.26,1281.45 2158.26,1262.55 \"/>\n<path clip-path=\"url(#clip780)\" d=\"M399.026 1312.37 Q395.415 1312.37 393.587 1315.93 Q391.781 1319.47 391.781 1326.6 Q391.781 1333.71 393.587 1337.27 Q395.415 1340.82 399.026 1340.82 Q402.661 1340.82 404.466 1337.27 Q406.295 1333.71 406.295 1326.6 Q406.295 1319.47 404.466 1315.93 Q402.661 1312.37 399.026 1312.37 M399.026 1308.66 Q404.837 1308.66 407.892 1313.27 Q410.971 1317.85 410.971 1326.6 Q410.971 1335.33 407.892 1339.94 Q404.837 1344.52 399.026 1344.52 Q393.216 1344.52 390.138 1339.94 Q387.082 1335.33 387.082 1326.6 Q387.082 1317.85 390.138 1313.27 Q393.216 1308.66 399.026 1308.66 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip780)\" d=\"M929.965 1339.91 L937.604 1339.91 L937.604 1313.55 L929.293 1315.21 L929.293 1310.95 L937.557 1309.29 L942.233 1309.29 L942.233 1339.91 L949.872 1339.91 L949.872 1343.85 L929.965 1343.85 L929.965 1339.91 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip780)\" d=\"M969.316 1312.37 Q965.705 1312.37 963.877 1315.93 Q962.071 1319.47 962.071 1326.6 Q962.071 1333.71 963.877 1337.27 Q965.705 1340.82 969.316 1340.82 Q972.951 1340.82 974.756 1337.27 Q976.585 1333.71 976.585 1326.6 Q976.585 1319.47 974.756 1315.93 Q972.951 1312.37 969.316 1312.37 M969.316 1308.66 Q975.127 1308.66 978.182 1313.27 Q981.261 1317.85 981.261 1326.6 Q981.261 1335.33 978.182 1339.94 Q975.127 1344.52 969.316 1344.52 Q963.506 1344.52 960.428 1339.94 Q957.372 1335.33 957.372 1326.6 Q957.372 1317.85 960.428 1313.27 Q963.506 1308.66 969.316 1308.66 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip780)\" d=\"M999.478 1312.37 Q995.867 1312.37 994.038 1315.93 Q992.233 1319.47 992.233 1326.6 Q992.233 1333.71 994.038 1337.27 Q995.867 1340.82 999.478 1340.82 Q1003.11 1340.82 1004.92 1337.27 Q1006.75 1333.71 1006.75 1326.6 Q1006.75 1319.47 1004.92 1315.93 Q1003.11 1312.37 999.478 1312.37 M999.478 1308.66 Q1005.29 1308.66 1008.34 1313.27 Q1011.42 1317.85 1011.42 1326.6 Q1011.42 1335.33 1008.34 1339.94 Q1005.29 1344.52 999.478 1344.52 Q993.668 1344.52 990.589 1339.94 Q987.534 1335.33 987.534 1326.6 Q987.534 1317.85 990.589 1313.27 Q993.668 1308.66 999.478 1308.66 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip780)\" d=\"M1029.64 1312.37 Q1026.03 1312.37 1024.2 1315.93 Q1022.39 1319.47 1022.39 1326.6 Q1022.39 1333.71 1024.2 1337.27 Q1026.03 1340.82 1029.64 1340.82 Q1033.27 1340.82 1035.08 1337.27 Q1036.91 1333.71 1036.91 1326.6 Q1036.91 1319.47 1035.08 1315.93 Q1033.27 1312.37 1029.64 1312.37 M1029.64 1308.66 Q1035.45 1308.66 1038.51 1313.27 Q1041.58 1317.85 1041.58 1326.6 Q1041.58 1335.33 1038.51 1339.94 Q1035.45 1344.52 1029.64 1344.52 Q1023.83 1344.52 1020.75 1339.94 Q1017.7 1335.33 1017.7 1326.6 Q1017.7 1317.85 1020.75 1313.27 Q1023.83 1308.66 1029.64 1308.66 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip780)\" d=\"M1520.46 1339.91 L1536.78 1339.91 L1536.78 1343.85 L1514.84 1343.85 L1514.84 1339.91 Q1517.5 1337.16 1522.08 1332.53 Q1526.69 1327.88 1527.87 1326.53 Q1530.12 1324.01 1531 1322.27 Q1531.9 1320.51 1531.9 1318.82 Q1531.9 1316.07 1529.95 1314.33 Q1528.03 1312.6 1524.93 1312.6 Q1522.73 1312.6 1520.28 1313.36 Q1517.85 1314.13 1515.07 1315.68 L1515.07 1310.95 Q1517.89 1309.82 1520.35 1309.24 Q1522.8 1308.66 1524.84 1308.66 Q1530.21 1308.66 1533.4 1311.35 Q1536.6 1314.03 1536.6 1318.52 Q1536.6 1320.65 1535.79 1322.57 Q1535 1324.47 1532.89 1327.07 Q1532.31 1327.74 1529.21 1330.95 Q1526.11 1334.15 1520.46 1339.91 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip780)\" d=\"M1556.6 1312.37 Q1552.99 1312.37 1551.16 1315.93 Q1549.35 1319.47 1549.35 1326.6 Q1549.35 1333.71 1551.16 1337.27 Q1552.99 1340.82 1556.6 1340.82 Q1560.23 1340.82 1562.04 1337.27 Q1563.87 1333.71 1563.87 1326.6 Q1563.87 1319.47 1562.04 1315.93 Q1560.23 1312.37 1556.6 1312.37 M1556.6 1308.66 Q1562.41 1308.66 1565.46 1313.27 Q1568.54 1317.85 1568.54 1326.6 Q1568.54 1335.33 1565.46 1339.94 Q1562.41 1344.52 1556.6 1344.52 Q1550.79 1344.52 1547.71 1339.94 Q1544.65 1335.33 1544.65 1326.6 Q1544.65 1317.85 1547.71 1313.27 Q1550.79 1308.66 1556.6 1308.66 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip780)\" d=\"M1586.76 1312.37 Q1583.15 1312.37 1581.32 1315.93 Q1579.51 1319.47 1579.51 1326.6 Q1579.51 1333.71 1581.32 1337.27 Q1583.15 1340.82 1586.76 1340.82 Q1590.39 1340.82 1592.2 1337.27 Q1594.03 1333.71 1594.03 1326.6 Q1594.03 1319.47 1592.2 1315.93 Q1590.39 1312.37 1586.76 1312.37 M1586.76 1308.66 Q1592.57 1308.66 1595.62 1313.27 Q1598.7 1317.85 1598.7 1326.6 Q1598.7 1335.33 1595.62 1339.94 Q1592.57 1344.52 1586.76 1344.52 Q1580.95 1344.52 1577.87 1339.94 Q1574.81 1335.33 1574.81 1326.6 Q1574.81 1317.85 1577.87 1313.27 Q1580.95 1308.66 1586.76 1308.66 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip780)\" d=\"M1616.92 1312.37 Q1613.31 1312.37 1611.48 1315.93 Q1609.68 1319.47 1609.68 1326.6 Q1609.68 1333.71 1611.48 1337.27 Q1613.31 1340.82 1616.92 1340.82 Q1620.55 1340.82 1622.36 1337.27 Q1624.19 1333.71 1624.19 1326.6 Q1624.19 1319.47 1622.36 1315.93 Q1620.55 1312.37 1616.92 1312.37 M1616.92 1308.66 Q1622.73 1308.66 1625.79 1313.27 Q1628.87 1317.85 1628.87 1326.6 Q1628.87 1335.33 1625.79 1339.94 Q1622.73 1344.52 1616.92 1344.52 Q1611.11 1344.52 1608.03 1339.94 Q1604.98 1335.33 1604.98 1326.6 Q1604.98 1317.85 1608.03 1313.27 Q1611.11 1308.66 1616.92 1308.66 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip780)\" d=\"M2116.94 1325.21 Q2120.3 1325.93 2122.18 1328.2 Q2124.07 1330.47 2124.07 1333.8 Q2124.07 1338.92 2120.56 1341.72 Q2117.04 1344.52 2110.56 1344.52 Q2108.38 1344.52 2106.07 1344.08 Q2103.77 1343.66 2101.32 1342.81 L2101.32 1338.29 Q2103.26 1339.43 2105.58 1340 Q2107.89 1340.58 2110.42 1340.58 Q2114.82 1340.58 2117.11 1338.85 Q2119.42 1337.11 2119.42 1333.8 Q2119.42 1330.75 2117.27 1329.03 Q2115.14 1327.3 2111.32 1327.3 L2107.29 1327.3 L2107.29 1323.45 L2111.51 1323.45 Q2114.95 1323.45 2116.78 1322.09 Q2118.61 1320.7 2118.61 1318.11 Q2118.61 1315.44 2116.71 1314.03 Q2114.84 1312.6 2111.32 1312.6 Q2109.4 1312.6 2107.2 1313.01 Q2105 1313.43 2102.36 1314.31 L2102.36 1310.14 Q2105.02 1309.4 2107.34 1309.03 Q2109.68 1308.66 2111.74 1308.66 Q2117.06 1308.66 2120.16 1311.09 Q2123.26 1313.5 2123.26 1317.62 Q2123.26 1320.49 2121.62 1322.48 Q2119.98 1324.45 2116.94 1325.21 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip780)\" d=\"M2142.94 1312.37 Q2139.33 1312.37 2137.5 1315.93 Q2135.69 1319.47 2135.69 1326.6 Q2135.69 1333.71 2137.5 1337.27 Q2139.33 1340.82 2142.94 1340.82 Q2146.57 1340.82 2148.38 1337.27 Q2150.21 1333.71 2150.21 1326.6 Q2150.21 1319.47 2148.38 1315.93 Q2146.57 1312.37 2142.94 1312.37 M2142.94 1308.66 Q2148.75 1308.66 2151.81 1313.27 Q2154.88 1317.85 2154.88 1326.6 Q2154.88 1335.33 2151.81 1339.94 Q2148.75 1344.52 2142.94 1344.52 Q2137.13 1344.52 2134.05 1339.94 Q2131 1335.33 2131 1326.6 Q2131 1317.85 2134.05 1313.27 Q2137.13 1308.66 2142.94 1308.66 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip780)\" d=\"M2173.1 1312.37 Q2169.49 1312.37 2167.66 1315.93 Q2165.86 1319.47 2165.86 1326.6 Q2165.86 1333.71 2167.66 1337.27 Q2169.49 1340.82 2173.1 1340.82 Q2176.74 1340.82 2178.54 1337.27 Q2180.37 1333.71 2180.37 1326.6 Q2180.37 1319.47 2178.54 1315.93 Q2176.74 1312.37 2173.1 1312.37 M2173.1 1308.66 Q2178.91 1308.66 2181.97 1313.27 Q2185.05 1317.85 2185.05 1326.6 Q2185.05 1335.33 2181.97 1339.94 Q2178.91 1344.52 2173.1 1344.52 Q2167.29 1344.52 2164.21 1339.94 Q2161.16 1335.33 2161.16 1326.6 Q2161.16 1317.85 2164.21 1313.27 Q2167.29 1308.66 2173.1 1308.66 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip780)\" d=\"M2203.26 1312.37 Q2199.65 1312.37 2197.82 1315.93 Q2196.02 1319.47 2196.02 1326.6 Q2196.02 1333.71 2197.82 1337.27 Q2199.65 1340.82 2203.26 1340.82 Q2206.9 1340.82 2208.7 1337.27 Q2210.53 1333.71 2210.53 1326.6 Q2210.53 1319.47 2208.7 1315.93 Q2206.9 1312.37 2203.26 1312.37 M2203.26 1308.66 Q2209.07 1308.66 2212.13 1313.27 Q2215.21 1317.85 2215.21 1326.6 Q2215.21 1335.33 2212.13 1339.94 Q2209.07 1344.52 2203.26 1344.52 Q2197.45 1344.52 2194.38 1339.94 Q2191.32 1335.33 2191.32 1326.6 Q2191.32 1317.85 2194.38 1313.27 Q2197.45 1308.66 2203.26 1308.66 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip780)\" d=\"M1237.32 1391.71 L1237.32 1397.25 Q1234.84 1395.98 1232.17 1395.34 Q1229.49 1394.71 1226.63 1394.71 Q1222.27 1394.71 1220.07 1396.04 Q1217.91 1397.38 1217.91 1400.05 Q1217.91 1402.09 1219.47 1403.27 Q1221.03 1404.41 1225.74 1405.46 L1227.74 1405.91 Q1233.98 1407.25 1236.59 1409.7 Q1239.23 1412.12 1239.23 1416.48 Q1239.23 1421.44 1235.29 1424.34 Q1231.37 1427.23 1224.5 1427.23 Q1221.63 1427.23 1218.51 1426.66 Q1215.42 1426.12 1211.99 1425.01 L1211.99 1418.96 Q1215.23 1420.65 1218.38 1421.51 Q1221.54 1422.33 1224.62 1422.33 Q1228.76 1422.33 1230.99 1420.93 Q1233.22 1419.5 1233.22 1416.92 Q1233.22 1414.54 1231.59 1413.26 Q1230 1411.99 1224.56 1410.81 L1222.52 1410.33 Q1217.08 1409.19 1214.66 1406.83 Q1212.24 1404.45 1212.24 1400.31 Q1212.24 1395.28 1215.81 1392.54 Q1219.37 1389.8 1225.93 1389.8 Q1229.17 1389.8 1232.04 1390.28 Q1234.9 1390.76 1237.32 1391.71 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip780)\" d=\"M1254.35 1380.54 L1254.35 1390.66 L1266.41 1390.66 L1266.41 1395.22 L1254.35 1395.22 L1254.35 1414.57 Q1254.35 1418.93 1255.53 1420.17 Q1256.74 1421.41 1260.4 1421.41 L1266.41 1421.41 L1266.41 1426.31 L1260.4 1426.31 Q1253.62 1426.31 1251.04 1423.8 Q1248.46 1421.25 1248.46 1414.57 L1248.46 1395.22 L1244.17 1395.22 L1244.17 1390.66 L1248.46 1390.66 L1248.46 1380.54 L1254.35 1380.54 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip780)\" d=\"M1304.61 1407.02 L1304.61 1409.89 L1277.68 1409.89 Q1278.06 1415.94 1281.31 1419.12 Q1284.59 1422.27 1290.41 1422.27 Q1293.79 1422.27 1296.94 1421.44 Q1300.12 1420.61 1303.24 1418.96 L1303.24 1424.5 Q1300.09 1425.83 1296.78 1426.53 Q1293.47 1427.23 1290.06 1427.23 Q1281.53 1427.23 1276.54 1422.27 Q1271.57 1417.3 1271.57 1408.84 Q1271.57 1400.08 1276.28 1394.96 Q1281.02 1389.8 1289.04 1389.8 Q1296.24 1389.8 1300.41 1394.45 Q1304.61 1399.07 1304.61 1407.02 M1298.75 1405.3 Q1298.69 1400.5 1296.05 1397.63 Q1293.44 1394.77 1289.11 1394.77 Q1284.21 1394.77 1281.25 1397.54 Q1278.32 1400.31 1277.87 1405.34 L1298.75 1405.3 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip780)\" d=\"M1319.89 1420.96 L1319.89 1439.87 L1314 1439.87 L1314 1390.66 L1319.89 1390.66 L1319.89 1396.07 Q1321.73 1392.89 1324.53 1391.36 Q1327.37 1389.8 1331.28 1389.8 Q1337.77 1389.8 1341.82 1394.96 Q1345.89 1400.12 1345.89 1408.52 Q1345.89 1416.92 1341.82 1422.08 Q1337.77 1427.23 1331.28 1427.23 Q1327.37 1427.23 1324.53 1425.71 Q1321.73 1424.15 1319.89 1420.96 M1339.81 1408.52 Q1339.81 1402.06 1337.14 1398.4 Q1334.5 1394.71 1329.85 1394.71 Q1325.2 1394.71 1322.53 1398.4 Q1319.89 1402.06 1319.89 1408.52 Q1319.89 1414.98 1322.53 1418.67 Q1325.2 1422.33 1329.85 1422.33 Q1334.5 1422.33 1337.14 1418.67 Q1339.81 1414.98 1339.81 1408.52 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><polyline clip-path=\"url(#clip780)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"346.853,1281.45 346.853,188.976 \"/>\n<polyline clip-path=\"url(#clip780)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"346.853,1147.54 365.751,1147.54 \"/>\n<polyline clip-path=\"url(#clip780)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"346.853,984.264 365.751,984.264 \"/>\n<polyline clip-path=\"url(#clip780)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"346.853,820.992 365.751,820.992 \"/>\n<polyline clip-path=\"url(#clip780)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"346.853,657.719 365.751,657.719 \"/>\n<polyline clip-path=\"url(#clip780)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"346.853,494.446 365.751,494.446 \"/>\n<polyline clip-path=\"url(#clip780)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"346.853,331.174 365.751,331.174 \"/>\n<path clip-path=\"url(#clip780)\" d=\"M298.909 1133.34 Q295.298 1133.34 293.469 1136.9 Q291.664 1140.44 291.664 1147.57 Q291.664 1154.68 293.469 1158.24 Q295.298 1161.78 298.909 1161.78 Q302.543 1161.78 304.349 1158.24 Q306.177 1154.68 306.177 1147.57 Q306.177 1140.44 304.349 1136.9 Q302.543 1133.34 298.909 1133.34 M298.909 1129.63 Q304.719 1129.63 307.775 1134.24 Q310.853 1138.82 310.853 1147.57 Q310.853 1156.3 307.775 1160.9 Q304.719 1165.49 298.909 1165.49 Q293.099 1165.49 290.02 1160.9 Q286.964 1156.3 286.964 1147.57 Q286.964 1138.82 290.02 1134.24 Q293.099 1129.63 298.909 1129.63 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip780)\" d=\"M259.557 997.609 L267.196 997.609 L267.196 971.243 L258.886 972.91 L258.886 968.651 L267.15 966.984 L271.826 966.984 L271.826 997.609 L279.465 997.609 L279.465 1001.54 L259.557 1001.54 L259.557 997.609 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip780)\" d=\"M298.909 970.063 Q295.298 970.063 293.469 973.628 Q291.664 977.169 291.664 984.299 Q291.664 991.405 293.469 994.97 Q295.298 998.512 298.909 998.512 Q302.543 998.512 304.349 994.97 Q306.177 991.405 306.177 984.299 Q306.177 977.169 304.349 973.628 Q302.543 970.063 298.909 970.063 M298.909 966.359 Q304.719 966.359 307.775 970.966 Q310.853 975.549 310.853 984.299 Q310.853 993.026 307.775 997.632 Q304.719 1002.22 298.909 1002.22 Q293.099 1002.22 290.02 997.632 Q286.964 993.026 286.964 984.299 Q286.964 975.549 290.02 970.966 Q293.099 966.359 298.909 966.359 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip780)\" d=\"M262.775 834.336 L279.094 834.336 L279.094 838.272 L257.15 838.272 L257.15 834.336 Q259.812 831.582 264.395 826.952 Q269.002 822.299 270.182 820.957 Q272.428 818.434 273.307 816.698 Q274.21 814.938 274.21 813.249 Q274.21 810.494 272.266 808.758 Q270.344 807.022 267.242 807.022 Q265.043 807.022 262.59 807.786 Q260.159 808.55 257.381 810.1 L257.381 805.378 Q260.205 804.244 262.659 803.665 Q265.113 803.087 267.15 803.087 Q272.52 803.087 275.715 805.772 Q278.909 808.457 278.909 812.948 Q278.909 815.077 278.099 816.999 Q277.312 818.897 275.205 821.489 Q274.627 822.161 271.525 825.378 Q268.423 828.573 262.775 834.336 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip780)\" d=\"M298.909 806.79 Q295.298 806.79 293.469 810.355 Q291.664 813.897 291.664 821.026 Q291.664 828.133 293.469 831.698 Q295.298 835.239 298.909 835.239 Q302.543 835.239 304.349 831.698 Q306.177 828.133 306.177 821.026 Q306.177 813.897 304.349 810.355 Q302.543 806.79 298.909 806.79 M298.909 803.087 Q304.719 803.087 307.775 807.693 Q310.853 812.276 310.853 821.026 Q310.853 829.753 307.775 834.36 Q304.719 838.943 298.909 838.943 Q293.099 838.943 290.02 834.36 Q286.964 829.753 286.964 821.026 Q286.964 812.276 290.02 807.693 Q293.099 803.087 298.909 803.087 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip780)\" d=\"M272.914 656.365 Q276.27 657.082 278.145 659.351 Q280.043 661.619 280.043 664.953 Q280.043 670.068 276.525 672.869 Q273.006 675.67 266.525 675.67 Q264.349 675.67 262.034 675.23 Q259.742 674.814 257.289 673.957 L257.289 669.443 Q259.233 670.578 261.548 671.156 Q263.863 671.735 266.386 671.735 Q270.784 671.735 273.076 669.999 Q275.39 668.263 275.39 664.953 Q275.39 661.897 273.238 660.184 Q271.108 658.448 267.289 658.448 L263.261 658.448 L263.261 654.606 L267.474 654.606 Q270.923 654.606 272.752 653.24 Q274.58 651.851 274.58 649.258 Q274.58 646.596 272.682 645.184 Q270.807 643.749 267.289 643.749 Q265.367 643.749 263.168 644.166 Q260.969 644.582 258.33 645.462 L258.33 641.295 Q260.992 640.555 263.307 640.184 Q265.645 639.814 267.705 639.814 Q273.029 639.814 276.131 642.245 Q279.233 644.652 279.233 648.772 Q279.233 651.643 277.59 653.633 Q275.946 655.601 272.914 656.365 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip780)\" d=\"M298.909 643.518 Q295.298 643.518 293.469 647.082 Q291.664 650.624 291.664 657.754 Q291.664 664.86 293.469 668.425 Q295.298 671.967 298.909 671.967 Q302.543 671.967 304.349 668.425 Q306.177 664.86 306.177 657.754 Q306.177 650.624 304.349 647.082 Q302.543 643.518 298.909 643.518 M298.909 639.814 Q304.719 639.814 307.775 644.42 Q310.853 649.004 310.853 657.754 Q310.853 666.481 307.775 671.087 Q304.719 675.67 298.909 675.67 Q293.099 675.67 290.02 671.087 Q286.964 666.481 286.964 657.754 Q286.964 649.004 290.02 644.42 Q293.099 639.814 298.909 639.814 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip780)\" d=\"M271.594 481.24 L259.789 499.689 L271.594 499.689 L271.594 481.24 M270.367 477.166 L276.247 477.166 L276.247 499.689 L281.177 499.689 L281.177 503.578 L276.247 503.578 L276.247 511.726 L271.594 511.726 L271.594 503.578 L255.992 503.578 L255.992 499.064 L270.367 477.166 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip780)\" d=\"M298.909 480.245 Q295.298 480.245 293.469 483.81 Q291.664 487.352 291.664 494.481 Q291.664 501.588 293.469 505.152 Q295.298 508.694 298.909 508.694 Q302.543 508.694 304.349 505.152 Q306.177 501.588 306.177 494.481 Q306.177 487.352 304.349 483.81 Q302.543 480.245 298.909 480.245 M298.909 476.541 Q304.719 476.541 307.775 481.148 Q310.853 485.731 310.853 494.481 Q310.853 503.208 307.775 507.814 Q304.719 512.398 298.909 512.398 Q293.099 512.398 290.02 507.814 Q286.964 503.208 286.964 494.481 Q286.964 485.731 290.02 481.148 Q293.099 476.541 298.909 476.541 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip780)\" d=\"M258.793 313.894 L277.15 313.894 L277.15 317.829 L263.076 317.829 L263.076 326.301 Q264.094 325.954 265.113 325.792 Q266.131 325.607 267.15 325.607 Q272.937 325.607 276.316 328.778 Q279.696 331.949 279.696 337.366 Q279.696 342.945 276.224 346.046 Q272.752 349.125 266.432 349.125 Q264.256 349.125 261.988 348.755 Q259.742 348.384 257.335 347.644 L257.335 342.945 Q259.418 344.079 261.641 344.634 Q263.863 345.19 266.34 345.19 Q270.344 345.19 272.682 343.083 Q275.02 340.977 275.02 337.366 Q275.02 333.755 272.682 331.648 Q270.344 329.542 266.34 329.542 Q264.465 329.542 262.59 329.959 Q260.738 330.375 258.793 331.255 L258.793 313.894 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip780)\" d=\"M298.909 316.972 Q295.298 316.972 293.469 320.537 Q291.664 324.079 291.664 331.209 Q291.664 338.315 293.469 341.88 Q295.298 345.421 298.909 345.421 Q302.543 345.421 304.349 341.88 Q306.177 338.315 306.177 331.209 Q306.177 324.079 304.349 320.537 Q302.543 316.972 298.909 316.972 M298.909 313.269 Q304.719 313.269 307.775 317.875 Q310.853 322.459 310.853 331.209 Q310.853 339.935 307.775 344.542 Q304.719 349.125 298.909 349.125 Q293.099 349.125 290.02 344.542 Q286.964 339.935 286.964 331.209 Q286.964 322.459 290.02 317.875 Q293.099 313.269 298.909 313.269 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip780)\" d=\"M186.448 812.969 L189.313 812.969 L189.313 839.896 Q195.36 839.514 198.543 836.268 Q201.694 832.989 201.694 827.165 Q201.694 823.791 200.867 820.64 Q200.039 817.457 198.384 814.338 L203.922 814.338 Q205.259 817.489 205.959 820.799 Q206.659 824.109 206.659 827.515 Q206.659 836.045 201.694 841.042 Q196.729 846.007 188.263 846.007 Q179.51 846.007 174.385 841.296 Q169.229 836.554 169.229 828.533 Q169.229 821.34 173.876 817.17 Q178.491 812.969 186.448 812.969 M184.73 818.826 Q179.924 818.889 177.059 821.531 Q174.194 824.141 174.194 828.47 Q174.194 833.371 176.963 836.331 Q179.733 839.259 184.761 839.705 L184.73 818.826 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip780)\" d=\"M184.22 773.724 L205.736 773.724 L205.736 779.581 L184.411 779.581 Q179.351 779.581 176.836 781.554 Q174.322 783.528 174.322 787.474 Q174.322 792.217 177.345 794.954 Q180.369 797.691 185.589 797.691 L205.736 797.691 L205.736 803.58 L170.088 803.58 L170.088 797.691 L175.627 797.691 Q172.412 795.591 170.821 792.758 Q169.229 789.893 169.229 786.169 Q169.229 780.027 173.049 776.876 Q176.836 773.724 184.22 773.724 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip780)\" d=\"M186.448 731.552 L189.313 731.552 L189.313 758.479 Q195.36 758.097 198.543 754.85 Q201.694 751.572 201.694 745.747 Q201.694 742.373 200.867 739.222 Q200.039 736.04 198.384 732.92 L203.922 732.92 Q205.259 736.071 205.959 739.382 Q206.659 742.692 206.659 746.097 Q206.659 754.627 201.694 759.624 Q196.729 764.59 188.263 764.59 Q179.51 764.59 174.385 759.879 Q169.229 755.137 169.229 747.116 Q169.229 739.923 173.876 735.753 Q178.491 731.552 186.448 731.552 M184.73 737.408 Q179.924 737.472 177.059 740.114 Q174.194 742.724 174.194 747.052 Q174.194 751.954 176.963 754.914 Q179.733 757.842 184.761 758.288 L184.73 737.408 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip780)\" d=\"M175.563 701.283 Q174.99 702.269 174.735 703.447 Q174.449 704.593 174.449 705.993 Q174.449 710.959 177.696 713.632 Q180.91 716.274 186.958 716.274 L205.736 716.274 L205.736 722.162 L170.088 722.162 L170.088 716.274 L175.627 716.274 Q172.38 714.428 170.821 711.468 Q169.229 708.508 169.229 704.275 Q169.229 703.67 169.325 702.938 Q169.388 702.206 169.547 701.315 L175.563 701.283 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip780)\" d=\"M187.499 672.828 Q181.133 672.828 177.632 675.47 Q174.131 678.08 174.131 682.822 Q174.131 687.533 177.632 690.175 Q181.133 692.785 187.499 692.785 Q193.833 692.785 197.334 690.175 Q200.835 687.533 200.835 682.822 Q200.835 678.08 197.334 675.47 Q193.833 672.828 187.499 672.828 M201.312 666.972 Q210.415 666.972 214.839 671.014 Q219.295 675.056 219.295 683.395 Q219.295 686.482 218.818 689.22 Q218.372 691.957 217.418 694.535 L211.72 694.535 Q213.121 691.957 213.789 689.443 Q214.457 686.928 214.457 684.318 Q214.457 678.557 211.434 675.693 Q208.442 672.828 202.363 672.828 L199.466 672.828 Q202.617 674.642 204.177 677.475 Q205.736 680.308 205.736 684.254 Q205.736 690.811 200.739 694.822 Q195.742 698.832 187.499 698.832 Q179.223 698.832 174.226 694.822 Q169.229 690.811 169.229 684.254 Q169.229 680.308 170.789 677.475 Q172.348 674.642 175.499 672.828 L170.088 672.828 L170.088 666.972 L201.312 666.972 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip780)\" d=\"M209.047 640.076 Q215.412 642.559 217.354 644.914 Q219.295 647.27 219.295 651.216 L219.295 655.895 L214.394 655.895 L214.394 652.458 Q214.394 650.039 213.248 648.702 Q212.102 647.365 207.837 645.742 L205.164 644.692 L170.088 659.11 L170.088 652.903 L197.97 641.763 L170.088 630.623 L170.088 624.417 L209.047 640.076 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><polyline clip-path=\"url(#clip782)\" style=\"stroke:#009af9; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"399.613,1027.23 400.199,916.71 400.786,939.719 401.372,842.624 401.958,753.677 402.545,670.066 403.131,796.778 403.718,803.676 404.304,722.121 404.891,647.355 405.477,582.294 406.063,524.216 406.65,471.624 407.236,557.443 407.823,507.848 408.409,463.119 408.995,476.787 409.582,436.964 410.168,400.303 410.755,369.451 411.341,340.436 411.927,315.801 412.514,296.322 413.1,277.467 413.687,263.489 414.273,250.059 414.86,239.58 415.446,230.797 416.032,224.573 416.619,219.895 417.205,242.141 417.792,265.422 418.378,264.964 418.964,265.892 419.551,268.474 420.137,271.746 420.724,293.654 421.31,299.159 421.896,305.943 422.483,313.365 423.069,349.988 423.656,357.573 424.242,378.581 424.829,387.231 425.415,396.622 426.001,416.26 426.588,447.054 427.174,475.996 427.761,495.437 428.347,514.084 428.933,524.933 429.52,534.861 430.106,552.493 430.693,570.746 431.279,581.227 431.865,604.935 432.452,615.97 433.038,627.168 433.625,638.111 434.211,649.49 434.798,666.603 435.384,682.31 435.97,693.287 436.557,709.055 437.143,733.739 437.73,743.904 438.316,761.979 438.902,779.706 439.489,788.7 440.075,797.689 440.662,814.302 441.248,830.1 441.835,848.676 442.421,863.255 443.007,883.37 443.594,893.104 444.18,900.114 444.767,909.956 445.353,919.438 445.939,928.53 446.526,937.799 447.112,949.179 447.699,955.182 448.285,971.065 448.871,981.65 449.458,989.011 450.044,999.372 450.631,1006.2 451.217,1015.49 451.804,1022.2 452.39,1026.61 452.976,1037.85 453.563,1044.08 454.149,1052.41 454.736,1055.92 455.322,1061.62 455.908,1069.65 456.495,1074.86 457.081,1082.33 457.668,1097.39 458.254,1102.03 458.84,1104.25 459.427,1108.91 460.013,1115.45 460.6,1123.56 461.186,1125.89 461.773,1126.31 462.359,1134.22 462.945,1140.06 463.532,1141.82 464.118,1145.31 464.705,1148.99 465.291,1154.42 465.877,1155.91 466.464,1159.27 467.05,1163.88 467.637,1170.71 468.223,1175.17 468.809,1179.55 469.396,1182.15 469.982,1188.32 470.569,1190.63 471.155,1191.1 471.742,1196.94 472.328,1198.63 472.914,1197.68 473.501,1198 474.087,1201.59 474.674,1200.43 475.26,1204.47 475.846,1206.35 476.433,1207.12 477.019,1210.4 477.606,1210.62 478.192,1212.65 478.778,1215.9 479.365,1218.88 479.951,1218.65 480.538,1220.48 481.124,1223.63 481.711,1226.14 482.297,1230.14 482.883,1233.67 483.47,1231.36 484.056,1234.09 484.643,1231.9 485.229,1233.97 485.815,1236.36 486.402,1234.46 486.988,1236.9 487.575,1235.05 488.161,1236.05 488.748,1236.84 489.334,1239.25 489.92,1240.1 490.507,1241.17 491.093,1240.66 491.68,1238.87 492.266,1241.1 492.852,1238.78 493.439,1238.07 494.025,1241.84 494.612,1239.81 495.198,1237.71 495.784,1235.82 496.371,1232.5 496.957,1235.16 497.544,1239.27 498.13,1237.24 498.717,1236.57 499.303,1236.08 499.889,1236.98 500.476,1238.27 501.062,1237.7 501.649,1240.53 502.235,1242.66 502.821,1243.45 503.408,1245.84 503.994,1245.43 504.581,1244.72 505.167,1245.32 505.753,1247.39 506.34,1246.55 506.926,1247.16 507.513,1244.91 508.099,1245.63 508.686,1247.33 509.272,1246.42 509.858,1247.27 510.445,1248.02 511.031,1248.6 511.618,1247.64 512.204,1245.63 512.79,1245.98 513.377,1244.25 513.963,1242.33 514.55,1240.81 515.136,1244.54 515.722,1246.89 516.309,1246.28 516.895,1245.48 517.482,1242.21 518.068,1241.84 518.655,1241.75 519.241,1245.43 519.827,1247.51 520.414,1247.02 521,1247.27 521.587,1246.13 522.173,1244.05 522.759,1241.96 523.346,1241.9 523.932,1243.92 524.519,1247.44 525.105,1250.53 525.691,1247 526.278,1249.03 526.864,1248.05 527.451,1245.76 528.037,1247.82 528.624,1248.15 529.21,1248.45 529.796,1246.17 530.383,1245.56 530.969,1243.49 531.556,1243.02 532.142,1242.59 532.728,1242.15 533.315,1244.19 533.901,1245.12 534.488,1242.71 535.074,1244.8 535.661,1245.59 536.247,1243.43 536.833,1241.48 537.42,1242.32 538.006,1241.78 538.593,1241.45 539.179,1240.9 539.765,1239.24 540.352,1240.15 540.938,1243.77 541.525,1244.6 542.111,1242.43 542.697,1244.77 543.284,1242.5 543.87,1242.9 544.457,1242.14 545.043,1240.15 545.63,1239.46 546.216,1237.85 546.802,1237.76 547.389,1238.68 547.975,1238.27 548.562,1237.97 549.148,1237.49 549.734,1237.13 550.321,1237.06 550.907,1239.36 551.494,1240.07 552.08,1240.93 552.666,1241.5 553.253,1242.5 553.839,1244.69 554.426,1243.93 555.012,1244.67 555.599,1245.38 556.185,1245.83 556.771,1243.52 557.358,1241.6 557.944,1242.24 558.531,1240.01 559.117,1244.81 559.703,1241.51 560.29,1239.38 560.876,1237.84 561.463,1238.72 562.049,1240.77 562.635,1241.33 563.222,1240.74 563.808,1240.2 564.395,1235.6 564.981,1233.77 565.568,1233.51 566.154,1234.49 566.74,1234.23 567.327,1235.53 567.913,1235.2 568.5,1235 569.086,1234.51 569.672,1235.52 570.259,1235.36 570.845,1236.45 571.432,1234.97 572.018,1233.51 572.605,1233.01 573.191,1231.33 573.777,1233.94 574.364,1232.27 574.95,1230.68 575.537,1231.64 576.123,1228.56 576.709,1227.02 577.296,1231.01 577.882,1228.29 578.469,1229.52 579.055,1230.94 579.641,1233.26 580.228,1235.59 580.814,1237.75 581.401,1236.06 581.987,1235.68 582.574,1236.47 583.16,1231.61 583.746,1231.39 584.333,1232.55 584.919,1231.83 585.506,1233.17 586.092,1232.42 586.678,1233.56 587.265,1232.1 587.851,1230.27 588.438,1231.38 589.024,1232.79 589.61,1233.88 590.197,1233.62 590.783,1234.5 591.37,1233.99 591.956,1233.47 592.543,1234.52 593.129,1232.7 593.715,1232.12 594.302,1233.14 594.888,1231.58 595.475,1231.41 596.061,1233.7 596.647,1233.61 597.234,1233.43 597.82,1234.36 598.407,1235.28 598.993,1235 599.579,1235.62 600.166,1233.98 600.752,1233.71 601.339,1232.17 601.925,1228.92 602.512,1230.07 603.098,1232.3 603.684,1229.37 604.271,1229.07 604.857,1229.09 605.444,1227.83 606.03,1231.76 606.616,1234.26 607.203,1233.77 607.789,1230.7 608.376,1230.46 608.962,1230.05 609.548,1228.5 610.135,1229.53 610.721,1226.59 611.308,1226.24 611.894,1223.49 612.481,1222.27 613.067,1221.02 613.653,1220.95 614.24,1221.41 614.826,1224.35 615.413,1223.1 615.999,1226.96 616.585,1232.08 617.172,1233.05 617.758,1231.26 618.345,1230.48 618.931,1235.45 619.518,1233.51 620.104,1232.86 620.69,1234.92 621.277,1236.86 621.863,1235.92 622.45,1235.24 623.036,1235.62 623.622,1236.15 624.209,1235.29 624.795,1232.07 625.382,1231.56 625.968,1230.88 626.554,1234.38 627.141,1236.41 627.727,1239.72 628.314,1239.96 628.9,1236.31 629.487,1235.76 630.073,1230.87 630.659,1231.72 631.246,1229.88 631.832,1233.38 632.419,1232.76 633.005,1230.84 633.591,1230.29 634.178,1229.94 634.764,1227.94 635.351,1232.91 635.937,1233.63 636.523,1231.92 637.11,1233.94 637.696,1233.45 638.283,1234.05 638.869,1233.11 639.456,1227.19 640.042,1226.65 640.628,1226.4 641.215,1226.12 641.801,1228.37 642.388,1226.91 642.974,1229.09 643.56,1226.23 644.147,1226.17 644.733,1224.31 645.32,1224.53 645.906,1223.09 646.492,1221.55 647.079,1225.39 647.665,1222.9 648.252,1221.29 648.838,1222.44 649.425,1222.49 650.011,1220.99 650.597,1221.19 651.184,1222.24 651.77,1222.29 652.357,1217.95 652.943,1218.04 653.529,1218.46 654.116,1217.17 654.702,1216.94 655.289,1215.93 655.875,1213.68 656.462,1215.28 657.048,1216.87 657.634,1217.22 658.221,1217.63 658.807,1214.06 659.394,1213.1 659.98,1213.61 660.566,1213.89 661.153,1214.33 661.739,1213.28 662.326,1214.97 662.912,1216.68 663.498,1216.9 664.085,1215.77 664.671,1216.25 665.258,1216.64 665.844,1218.13 666.431,1219.45 667.017,1219.63 667.603,1219.42 668.19,1218.44 668.776,1219.71 669.363,1220.92 669.949,1221.1 670.535,1221.24 671.122,1223.95 671.708,1221.1 672.295,1221.05 672.881,1222.26 673.467,1222.21 674.054,1220.84 674.64,1221.88 675.227,1220.3 675.813,1218.95 676.4,1217.61 676.986,1220.7 677.572,1220.67 678.159,1220.63 678.745,1218.89 679.332,1218.85 679.918,1218.82 680.504,1221.54 681.091,1222.7 681.677,1222.36 682.264,1221.14 682.85,1219.45 683.436,1220.95 684.023,1218.17 684.609,1221 685.196,1219.57 685.782,1219.42 686.369,1219.55 686.955,1218.26 687.541,1217.15 688.128,1217.66 688.714,1217.66 689.301,1219 689.887,1219.25 690.473,1220.57 691.06,1221.98 691.646,1220.62 692.233,1220.41 692.819,1221.74 693.405,1220.3 693.992,1220.37 694.578,1222.74 695.165,1223.91 695.751,1223.74 696.338,1224.61 696.924,1224.39 697.51,1225.45 698.097,1226.57 698.683,1227.38 699.27,1227 699.856,1223.82 700.442,1226.44 701.029,1224.81 701.615,1220.52 702.202,1219.14 702.788,1219.46 703.375,1219.46 703.961,1219.45 704.547,1221.96 705.134,1220.58 705.72,1221.76 706.307,1218.7 706.893,1218.65 707.479,1220.95 708.066,1222.02 708.652,1220.4 709.239,1220.28 709.825,1221.68 710.411,1222.7 710.998,1224.13 711.584,1225.24 712.171,1227.78 712.757,1225.86 713.344,1228.04 713.93,1227.37 714.516,1225.46 715.103,1223.64 715.689,1223.67 716.276,1223.25 716.862,1220.63 717.448,1218.1 718.035,1219.4 718.621,1219.44 719.208,1216.61 719.794,1215.32 720.38,1215.42 720.967,1220.85 721.553,1220.68 722.14,1222 722.726,1220.26 723.313,1220.04 723.899,1218.4 724.485,1221.08 725.072,1222.26 725.658,1222.33 726.245,1219.61 726.831,1216.49 727.417,1215.33 728.004,1212.63 728.59,1216.64 729.177,1218.27 729.763,1215.72 730.349,1215.76 730.936,1216.88 731.522,1218.24 732.109,1221.11 732.695,1219.47 733.282,1217.57 733.868,1218.66 734.454,1218.78 735.041,1218.56 735.627,1218.29 736.214,1220.75 736.8,1221.78 737.386,1220.34 737.973,1224.27 738.559,1226.49 739.146,1228.82 739.732,1226.92 740.318,1222.34 740.905,1223.36 741.491,1224.58 742.078,1225.42 742.664,1227.65 743.251,1227.24 743.837,1226.7 744.423,1224.9 745.01,1223.15 745.596,1225.41 746.183,1223.91 746.769,1222.5 747.355,1220.61 747.942,1220.24 748.528,1217.35 749.115,1216.13 749.701,1216.18 750.288,1217.72 750.874,1219.07 751.46,1219.06 752.047,1221.41 752.633,1221.01 753.22,1220.85 753.806,1219.5 754.392,1219.26 754.979,1214.9 755.565,1213.65 756.152,1213.66 756.738,1213.59 757.324,1210.83 757.911,1211.45 758.497,1213.02 759.084,1213.36 759.67,1210.8 760.257,1213.97 760.843,1212.69 761.429,1212.84 762.016,1212.94 762.602,1211.96 763.189,1214.95 763.775,1216.61 764.361,1216.61 764.948,1217.88 765.534,1217.78 766.121,1216.29 766.707,1217.79 767.293,1217.79 767.88,1217.43 768.466,1220.04 769.053,1219.85 769.639,1217.09 770.226,1218.49 770.812,1219.68 771.398,1216.88 771.985,1215.6 772.571,1214.39 773.158,1217.2 773.744,1217.19 774.33,1215.73 774.917,1217.26 775.503,1220.03 776.09,1219.81 776.676,1221.23 777.262,1218.09 777.849,1219.37 778.435,1218.04 779.022,1217.75 779.608,1210.89 780.195,1211.27 780.781,1211.58 781.367,1211.64 781.954,1211.91 782.54,1213.49 783.127,1212.59 783.713,1212.84 784.299,1211.6 784.886,1210.39 785.472,1210.74 786.059,1212.59 786.645,1215.76 787.232,1217.02 787.818,1221.08 788.404,1220.95 788.991,1223.28 789.577,1223.03 790.164,1223.94 790.75,1222.28 791.336,1220.46 791.923,1220.5 792.509,1217.67 793.096,1216.75 793.682,1216.71 794.268,1215.22 794.855,1216.72 795.441,1216.57 796.028,1215.11 796.614,1213.54 797.201,1216.25 797.787,1216.37 798.373,1213.63 798.96,1213.92 799.546,1214.05 800.133,1215.25 800.719,1218.01 801.305,1217.72 801.892,1218.93 802.478,1217.59 803.065,1217.75 803.651,1217.7 804.237,1216.48 804.824,1212.4 805.41,1213.91 805.997,1215.34 806.583,1209.8 807.17,1209.87 807.756,1209 808.342,1212.26 808.929,1212.27 809.515,1212.79 810.102,1212.98 810.688,1213.39 811.274,1213.37 811.861,1213.42 812.447,1213.51 813.034,1213.55 813.62,1211.28 814.206,1211.71 814.793,1215.95 815.379,1215.93 815.966,1216.05 816.552,1217.52 817.139,1217.28 817.725,1218.61 818.311,1219.74 818.898,1218.39 819.484,1219.72 820.071,1222.14 820.657,1219.23 821.243,1221.51 821.83,1222.63 822.416,1222.14 823.003,1224.4 823.589,1222.5 824.175,1220.91 824.762,1220.67 825.348,1220.46 825.935,1220.07 826.521,1218.73 827.108,1215.84 827.694,1216.09 828.28,1216.22 828.867,1216.19 829.453,1214.66 830.04,1214.35 830.626,1214.45 831.212,1213.31 831.799,1216.02 832.385,1217.48 832.972,1215.89 833.558,1213.23 834.145,1216 834.731,1216.14 835.317,1217.04 835.904,1215.81 836.49,1215.78 837.077,1214.36 837.663,1211.8 838.249,1212.32 838.836,1212.58 839.422,1212.63 840.009,1213.93 840.595,1213.98 841.181,1214.03 841.768,1211.8 842.354,1210.71 842.941,1210.97 843.527,1210.99 844.114,1209.79 844.7,1207.5 845.286,1206.59 845.873,1209.76 846.459,1208.74 847.046,1209.13 847.632,1208.11 848.218,1209.8 848.805,1211.31 849.391,1212.73 849.978,1214.23 850.564,1215.7 851.15,1215.65 851.737,1214.27 852.323,1214.12 852.91,1212.87 853.496,1215.4 854.083,1211.27 854.669,1211.31 855.255,1211.26 855.842,1214 856.428,1218.18 857.015,1218.01 857.601,1216.69 858.187,1215.15 858.774,1213.86 859.36,1215.37 859.947,1211.48 860.533,1217.05 861.119,1219.57 861.706,1219.43 862.292,1217.76 862.879,1218.64 863.465,1219.71 864.052,1219.4 864.638,1218.89 865.224,1218.81 865.811,1219.71 866.397,1219.65 866.984,1220.75 867.57,1221.92 868.156,1221.62 868.743,1218.48 869.329,1218.38 869.916,1215.47 870.502,1215.49 871.089,1215.59 871.675,1214.31 872.261,1211.67 872.848,1213.35 873.434,1214.62 874.021,1213.47 874.607,1214.79 875.193,1213.33 875.78,1214.79 876.366,1213.33 876.953,1211.9 877.539,1213.12 878.125,1214.65 878.712,1217.38 879.298,1217.33 879.885,1214.44 880.471,1215.84 881.058,1216.02 881.644,1214.54 882.23,1211.99 882.817,1213.36 883.403,1213.54 883.99,1212.58 884.576,1212.57 885.162,1211.21 885.749,1211.63 886.335,1211.86 886.922,1212.02 887.508,1213.23 888.094,1212.97 888.681,1213.18 889.267,1214.54 889.854,1214.62 890.44,1214.57 891.027,1214.52 891.613,1215.86 892.199,1214.18 892.786,1212.97 893.372,1214.66 893.959,1212.07 894.545,1212.12 895.131,1210.87 895.718,1212.26 896.304,1213.78 896.891,1213.99 897.477,1215.14 898.063,1215.26 898.65,1213.78 899.236,1212.45 899.823,1211.21 900.409,1210.12 900.996,1211.67 901.582,1213.31 902.168,1212.26 902.755,1216.29 903.341,1215.65 903.928,1211.38 904.514,1211.75 905.1,1214.38 905.687,1214.49 906.273,1212.96 906.86,1217.25 907.446,1215.88 908.032,1216.9 908.619,1214.3 909.205,1214.21 909.792,1214.31 910.378,1214.51 910.965,1217.29 911.551,1218.1 912.137,1211.31 912.724,1211.57 913.31,1211.88 913.897,1211.71 914.483,1211.86 915.069,1210.56 915.656,1210.63 916.242,1209.37 916.829,1205.73 917.415,1206.29 918.002,1206.97 918.588,1208.79 919.174,1208.65 919.761,1210.31 920.347,1213.23 920.934,1214.6 921.52,1214.67 922.106,1216.2 922.693,1215.84 923.279,1214.68 923.866,1216.17 924.452,1218.53 925.038,1215.25 925.625,1215.21 926.211,1218.19 926.798,1219.59 927.384,1219.45 927.971,1221.63 928.557,1219.75 929.143,1220.83 929.73,1219.07 930.316,1217.42 930.903,1218.75 931.489,1218.65 932.075,1220.07 932.662,1217.03 933.248,1218.04 933.835,1215.3 934.421,1215.21 935.007,1215.39 935.594,1215.31 936.18,1217.96 936.767,1217.73 937.353,1218.78 937.94,1218.7 938.526,1219.7 939.112,1219.47 939.699,1223.03 940.285,1221.22 940.872,1219.45 941.458,1216.49 942.044,1217.54 942.631,1217.37 943.217,1218.68 943.804,1221.18 944.39,1220.66 944.976,1221.76 945.563,1225.35 946.149,1230.22 946.736,1228.01 947.322,1227.15 947.909,1226.15 948.495,1225.56 949.081,1223.74 949.668,1220.31 950.254,1219.99 950.841,1219.45 951.427,1219.16 952.013,1220.07 952.6,1218.55 953.186,1216.74 953.773,1220.47 954.359,1218.97 954.945,1222.68 955.532,1225.05 956.118,1224.5 956.705,1221.43 957.291,1219.63 957.878,1219.02 958.464,1220.12 959.05,1219.6 959.637,1223.14 960.223,1222.8 960.81,1221.07 961.396,1216.65 961.982,1215.16 962.569,1216.33 963.155,1216.26 963.742,1214.6 964.328,1218.28 964.915,1220.86 965.501,1219.2 966.087,1218.65 966.674,1218.56 967.26,1215.61 967.847,1216.73 968.433,1215.05 969.019,1210.03 969.606,1207.57 970.192,1209.4 970.779,1210.92 971.365,1209.58 971.951,1210.07 972.538,1210.47 973.124,1212.16 973.711,1216.22 974.297,1216.18 974.884,1214.71 975.47,1216.28 976.056,1215.93 976.643,1214.8 977.229,1214.76 977.816,1214.85 978.402,1214.8 978.988,1216.01 979.575,1218.87 980.161,1217.48 980.748,1217.39 981.334,1216.07 981.92,1215.97 982.507,1217.39 983.093,1218.68 983.68,1219.72 984.266,1220.96 984.853,1220.7 985.439,1217.64 986.025,1215.96 986.612,1214.55 987.198,1217.09 987.785,1214.35 988.371,1214.4 988.957,1214.38 989.544,1211.44 990.13,1212.72 990.717,1212.67 991.303,1214.14 991.889,1212.79 992.476,1211.61 993.062,1212.83 993.649,1208.81 994.235,1209.07 994.822,1209.19 995.408,1206.57 995.994,1206.92 996.581,1204.97 997.167,1205.15 997.754,1207.28 998.34,1207.63 998.926,1205.52 999.513,1205.78 1000.1,1206.19 1000.69,1202.51 1001.27,1202.83 1001.86,1204.63 1002.44,1205.23 1003.03,1206.99 1003.62,1208.76 1004.2,1211.47 1004.79,1211.69 1005.38,1211.97 1005.96,1210.91 1006.55,1209.65 1007.14,1215.45 1007.72,1219.32 1008.31,1221.71 1008.9,1220.08 1009.48,1221.21 1010.07,1219.45 1010.65,1219.3 1011.24,1217.88 1011.83,1217.7 1012.41,1217.6 1013,1216.19 1013.59,1214.68 1014.17,1213.33 1014.76,1210.74 1015.35,1210.79 1015.93,1209.48 1016.52,1209.8 1017.11,1208.62 1017.69,1208.97 1018.28,1207.85 1018.86,1209.82 1019.45,1209.79 1020.04,1208.39 1020.62,1213.9 1021.21,1213.78 1021.8,1215.14 1022.38,1217.56 1022.97,1216.09 1023.56,1219.62 1024.14,1218.04 1024.73,1216.6 1025.32,1215.07 1025.9,1213.59 1026.49,1214.38 1027.07,1215.58 1027.66,1216.78 1028.25,1216.37 1028.83,1216.08 1029.42,1216.06 1030.01,1214.55 1030.59,1213.1 1031.18,1214.57 1031.77,1214.56 1032.35,1211.41 1032.94,1206.01 1033.52,1206.29 1034.11,1205.37 1034.7,1208.41 1035.28,1208.84 1035.87,1210.39 1036.46,1208.06 1037.04,1209.69 1037.63,1208.68 1038.22,1210.4 1038.8,1210.34 1039.39,1209.26 1039.98,1208.12 1040.56,1211.07 1041.15,1212.41 1041.73,1211.21 1042.32,1211.11 1042.91,1211.19 1043.49,1212.75 1044.08,1214.36 1044.67,1216.66 1045.25,1214.12 1045.84,1214.28 1046.43,1217.05 1047.01,1218.09 1047.6,1216.56 1048.19,1216.41 1048.77,1214.87 1049.36,1214.75 1049.94,1214.86 1050.53,1214.79 1051.12,1216.01 1051.7,1213.08 1052.29,1215.95 1052.88,1215.91 1053.46,1214.29 1054.05,1212.55 1054.64,1215.18 1055.22,1212.59 1055.81,1218.1 1056.39,1216.4 1056.98,1216.58 1057.57,1216.69 1058.15,1218.19 1058.74,1217.71 1059.33,1218.78 1059.91,1214.53 1060.5,1215.58 1061.09,1217.08 1061.67,1211.93 1062.26,1216.18 1062.85,1215.79 1063.43,1216.73 1064.02,1216.83 1064.6,1213.95 1065.19,1218.14 1065.78,1217.88 1066.36,1217.66 1066.95,1215.86 1067.54,1216.97 1068.12,1216.74 1068.71,1215.12 1069.3,1212.54 1069.88,1210.03 1070.47,1211.56 1071.06,1210.26 1071.64,1210.3 1072.23,1209.32 1072.81,1210.85 1073.4,1211.26 1073.99,1210.25 1074.57,1213.28 1075.16,1212.01 1075.75,1211.85 1076.33,1210.56 1076.92,1210.95 1077.51,1211.09 1078.09,1209.93 1078.68,1209.84 1079.26,1212.58 1079.85,1212.42 1080.44,1215.39 1081.02,1216.78 1081.61,1215.07 1082.2,1215.07 1082.78,1215.09 1083.37,1212.14 1083.96,1212.2 1084.54,1214.78 1085.13,1213.67 1085.72,1213.86 1086.3,1212.31 1086.89,1212.23 1087.47,1213.77 1088.06,1215.01 1088.65,1215.1 1089.23,1215.08 1089.82,1212.1 1090.41,1210.74 1090.99,1213.5 1091.58,1213.6 1092.17,1213.53 1092.75,1212.48 1093.34,1209.78 1093.93,1211.4 1094.51,1212.95 1095.1,1211.75 1095.68,1213.05 1096.27,1214.3 1096.86,1214.33 1097.44,1216.83 1098.03,1215.5 1098.62,1214.21 1099.2,1213.92 1099.79,1211.46 1100.38,1212.94 1100.96,1213.11 1101.55,1211.88 1102.14,1212.29 1102.72,1212.05 1103.31,1214.68 1103.89,1209.41 1104.48,1211.04 1105.07,1211.25 1105.65,1211.44 1106.24,1214.48 1106.83,1217.14 1107.41,1217.28 1108,1215.93 1108.59,1214.34 1109.17,1214.04 1109.76,1215.25 1110.34,1211.12 1110.93,1212.56 1111.52,1211.37 1112.1,1214.4 1112.69,1213.15 1113.28,1214.31 1113.86,1215.62 1114.45,1218.19 1115.04,1220.69 1115.62,1220.31 1116.21,1220.08 1116.8,1221.13 1117.38,1222.24 1117.97,1222.84 1118.55,1223.62 1119.14,1223.44 1119.73,1222.89 1120.31,1218.46 1120.9,1216.81 1121.49,1216.82 1122.07,1218.21 1122.66,1219.2 1123.25,1217.49 1123.83,1218.68 1124.42,1215.66 1125.01,1214.53 1125.59,1215.67 1126.18,1216.89 1126.76,1215.14 1127.35,1216.31 1127.94,1216.04 1128.52,1217.07 1129.11,1216.89 1129.7,1215.13 1130.28,1214.94 1130.87,1213.43 1131.46,1211.97 1132.04,1215.83 1132.63,1214.36 1133.21,1214.07 1133.8,1212.69 1134.39,1211.18 1134.97,1211.23 1135.56,1206.14 1136.15,1205.19 1136.73,1208.21 1137.32,1207.24 1137.91,1207.49 1138.49,1207.97 1139.08,1210.9 1139.67,1212.25 1140.25,1211.12 1140.84,1207.38 1141.42,1208.75 1142.01,1210.39 1142.6,1209.42 1143.18,1209.74 1143.77,1211.23 1144.36,1211.4 1144.94,1211.39 1145.53,1211.64 1146.12,1213.06 1146.7,1212.99 1147.29,1215.77 1147.88,1212.88 1148.46,1211.47 1149.05,1208.6 1149.63,1210.18 1150.22,1207.82 1150.81,1209.13 1151.39,1210.63 1151.98,1206.54 1152.57,1208.51 1153.15,1208.92 1153.74,1211.66 1154.33,1210.11 1154.91,1209.26 1155.5,1213.35 1156.09,1213.33 1156.67,1211.99 1157.26,1214.63 1157.84,1213.5 1158.43,1214.99 1159.02,1218.75 1159.6,1217 1160.19,1216.99 1160.78,1216.85 1161.36,1215.56 1161.95,1216.69 1162.54,1216.74 1163.12,1213.99 1163.71,1216.69 1164.29,1213.94 1164.88,1211.14 1165.47,1208.75 1166.05,1209.08 1166.64,1209.52 1167.23,1210.96 1167.81,1211.34 1168.4,1208.81 1168.99,1208.8 1169.57,1210.47 1170.16,1209.12 1170.75,1210.58 1171.33,1213.58 1171.92,1213.6 1172.5,1212.52 1173.09,1214.29 1173.68,1211.68 1174.26,1213.22 1174.85,1213.13 1175.44,1213.24 1176.02,1216.13 1176.61,1214.78 1177.2,1213.19 1177.78,1210.81 1178.37,1213.84 1178.96,1212.55 1179.54,1214.04 1180.13,1214.98 1180.71,1216.37 1181.3,1217.36 1181.89,1217.14 1182.47,1218.42 1183.06,1218.18 1183.65,1216.58 1184.23,1220.49 1184.82,1218.99 1185.41,1218.85 1185.99,1218.28 1186.58,1217.66 1187.16,1215.97 1187.75,1216.09 1188.34,1213.45 1188.92,1217.48 1189.51,1218.85 1190.1,1217.23 1190.68,1214.34 1191.27,1215.92 1191.86,1214.45 1192.44,1213.14 1193.03,1214.29 1193.62,1212.85 1194.2,1210.11 1194.79,1213.15 1195.37,1213.34 1195.96,1213.05 1196.55,1214.21 1197.13,1214.01 1197.72,1213.98 1198.31,1216.6 1198.89,1216.63 1199.48,1215.25 1200.07,1216.35 1200.65,1217.71 1201.24,1217.79 1201.83,1219.02 1202.41,1218.69 1203,1217.17 1203.58,1216.89 1204.17,1215.38 1204.76,1214.02 1205.34,1214.01 1205.93,1215.4 1206.52,1215.14 1207.1,1217.78 1207.69,1217.58 1208.28,1217.11 1208.86,1220.53 1209.45,1221.34 1210.03,1220.81 1210.62,1220.54 1211.21,1218.95 1211.79,1218.62 1212.38,1216.81 1212.97,1212.48 1213.55,1210.81 1214.14,1212.32 1214.73,1213.85 1215.31,1212.52 1215.9,1209.86 1216.49,1212.63 1217.07,1214.01 1217.66,1212.32 1218.24,1209.61 1218.83,1208.99 1219.42,1207.86 1220,1206.68 1220.59,1210.72 1221.18,1209.35 1221.76,1211.11 1222.35,1210.99 1222.94,1211.04 1223.52,1209.54 1224.11,1209.65 1224.7,1209.79 1225.28,1210.16 1225.87,1208.96 1226.45,1210.48 1227.04,1212.1 1227.63,1213.29 1228.21,1213.28 1228.8,1213 1229.39,1215.68 1229.97,1216.75 1230.56,1216.51 1231.15,1217.54 1231.73,1219.84 1232.32,1220.51 1232.91,1221.53 1233.49,1220.85 1234.08,1220.63 1234.66,1221.68 1235.25,1224.12 1235.84,1224.82 1236.42,1221.42 1237.01,1221.08 1237.6,1223.36 1238.18,1224.23 1238.77,1223.48 1239.36,1221.42 1239.94,1220.89 1240.53,1220.33 1241.11,1220.08 1241.7,1217.22 1242.29,1215.7 1242.87,1216.85 1243.46,1215.37 1244.05,1214.07 1244.63,1212.81 1245.22,1218.32 1245.81,1218.24 1246.39,1216.84 1246.98,1215.11 1247.57,1216.39 1248.15,1216.33 1248.74,1216.19 1249.32,1214.61 1249.91,1216.16 1250.5,1213.44 1251.08,1212.37 1251.67,1210.99 1252.26,1209.65 1252.84,1208.52 1253.43,1207.1 1254.02,1204.9 1254.6,1205.51 1255.19,1206 1255.78,1206.48 1256.36,1210.8 1256.95,1208.34 1257.53,1208.68 1258.12,1209.2 1258.71,1209.56 1259.29,1206.84 1259.88,1206.9 1260.47,1205.94 1261.05,1207.49 1261.64,1209.41 1262.23,1212.65 1262.81,1215.42 1263.4,1215.36 1263.98,1219.14 1264.57,1216.19 1265.16,1214.71 1265.74,1210.61 1266.33,1210.65 1266.92,1213.5 1267.5,1214.87 1268.09,1218.69 1268.68,1219.59 1269.26,1217.78 1269.85,1212.3 1270.44,1212.5 1271.02,1212.26 1271.61,1212.14 1272.19,1212.29 1272.78,1212.29 1273.37,1211.46 1273.95,1210.27 1274.54,1210.35 1275.13,1206.45 1275.71,1209.34 1276.3,1208.23 1276.89,1204.59 1277.47,1203.71 1278.06,1205.38 1278.65,1205.88 1279.23,1209 1279.82,1207.95 1280.4,1209.38 1280.99,1214.81 1281.58,1214.86 1282.16,1216.07 1282.75,1218.53 1283.34,1216.91 1283.92,1216.75 1284.51,1219.31 1285.1,1218.9 1285.68,1215.92 1286.27,1217.1 1286.86,1222.28 1287.44,1219.3 1288.03,1217.6 1288.61,1214.99 1289.2,1212.43 1289.79,1213.7 1290.37,1214.95 1290.96,1217.48 1291.55,1217.48 1292.13,1219.73 1292.72,1218.22 1293.31,1217.93 1293.89,1220.04 1294.48,1219.78 1295.06,1218.07 1295.65,1217.9 1296.24,1216.43 1296.82,1213.68 1297.41,1213.83 1298,1213.55 1298.58,1214.9 1299.17,1214.98 1299.76,1209.54 1300.34,1212.26 1300.93,1215.06 1301.52,1212.3 1302.1,1210.82 1302.69,1208.16 1303.27,1209.49 1303.86,1208.25 1304.45,1210.98 1305.03,1210.86 1305.62,1211.17 1306.21,1208.84 1306.79,1207.66 1307.38,1208.05 1307.97,1210.99 1308.55,1212.72 1309.14,1214.47 1309.73,1214.42 1310.31,1211.45 1310.9,1211.6 1311.48,1211.73 1312.07,1211.86 1312.66,1214.54 1313.24,1211.59 1313.83,1211.84 1314.42,1211.86 1315,1213.3 1315.59,1212.06 1316.18,1216 1316.76,1216.91 1317.35,1217.94 1317.93,1215.34 1318.52,1214.8 1319.11,1216.99 1319.69,1216.48 1320.28,1216.63 1320.87,1216.47 1321.45,1212.31 1322.04,1212.19 1322.63,1210.74 1323.21,1209.48 1323.8,1209.69 1324.39,1208.68 1324.97,1208.88 1325.56,1208 1326.14,1208.29 1326.73,1204.07 1327.32,1204.69 1327.9,1205.45 1328.49,1203.29 1329.08,1205.28 1329.66,1205.66 1330.25,1204.73 1330.84,1206.41 1331.42,1210.78 1332.01,1209.72 1332.6,1205.74 1333.18,1206.2 1333.77,1202.73 1334.35,1203.13 1334.94,1199.54 1335.53,1197.93 1336.11,1198.83 1336.7,1200.75 1337.29,1202.93 1337.87,1204.59 1338.46,1206.53 1339.05,1206.96 1339.63,1207.27 1340.22,1210.1 1340.8,1211.51 1341.39,1211.8 1341.98,1212.71 1342.56,1208.45 1343.15,1208.65 1343.74,1209.05 1344.32,1208.11 1344.91,1208.46 1345.5,1208.66 1346.08,1207.54 1346.67,1209.19 1347.26,1209.48 1347.84,1209.92 1348.43,1211.52 1349.01,1213.09 1349.6,1209.15 1350.19,1210.78 1350.77,1208.3 1351.36,1208.59 1351.95,1209.97 1352.53,1214.2 1353.12,1214.3 1353.71,1214.19 1354.29,1214.21 1354.88,1215.63 1355.47,1215.63 1356.05,1215.54 1356.64,1210.57 1357.22,1210.82 1357.81,1212.37 1358.4,1212.4 1358.98,1212.25 1359.57,1210.88 1360.16,1211.15 1360.74,1215.12 1361.33,1217.37 1361.92,1214.21 1362.5,1216.88 1363.09,1217.89 1363.68,1215.35 1364.26,1216.35 1364.85,1214.94 1365.43,1215 1366.02,1214.84 1366.61,1214.49 1367.19,1214.15 1367.78,1212.85 1368.37,1212.84 1368.95,1211.07 1369.54,1212.43 1370.13,1213.71 1370.71,1217.59 1371.3,1214.3 1371.88,1214.43 1372.47,1215.91 1373.06,1214.43 1373.64,1217.2 1374.23,1216.94 1374.82,1216.69 1375.4,1217.77 1375.99,1218.99 1376.58,1217.5 1377.16,1216 1377.75,1215.96 1378.34,1214.52 1378.92,1215.9 1379.51,1218.04 1380.09,1217.65 1380.68,1214.92 1381.27,1214.93 1381.85,1214.79 1382.44,1214.86 1383.03,1213.61 1383.61,1213.74 1384.2,1214.92 1384.79,1212.09 1385.37,1214.76 1385.96,1214.71 1386.55,1214.58 1387.13,1213.4 1387.72,1213.34 1388.3,1212.15 1388.89,1208.58 1389.48,1207.56 1390.06,1208.77 1390.65,1208.95 1391.24,1208.12 1391.82,1212.4 1392.41,1212.44 1393,1214.83 1393.58,1212.14 1394.17,1214.86 1394.75,1213.29 1395.34,1214.5 1395.93,1217.13 1396.51,1219.54 1397.1,1219.13 1397.69,1220.05 1398.27,1218.07 1398.86,1217.68 1399.45,1214.99 1400.03,1210.82 1400.62,1212.3 1401.21,1211.02 1401.79,1211.21 1402.38,1211.13 1402.96,1212.43 1403.55,1212.65 1404.14,1210.09 1404.72,1211.67 1405.31,1211.7 1405.9,1211.99 1406.48,1210.96 1407.07,1209.72 1407.66,1211.31 1408.24,1210.15 1408.83,1210.36 1409.42,1212.93 1410,1211.59 1410.59,1211.79 1411.17,1209.4 1411.76,1211.08 1412.35,1212.54 1412.93,1213.76 1413.52,1214.88 1414.11,1214.41 1414.69,1214.19 1415.28,1212.95 1415.87,1214.13 1416.45,1216.77 1417.04,1217.91 1417.63,1216.59 1418.21,1217.9 1418.8,1216.21 1419.38,1215.11 1419.97,1217.98 1420.56,1218.78 1421.14,1220.79 1421.73,1217.32 1422.32,1215.52 1422.9,1212.68 1423.49,1211.12 1424.08,1208.4 1424.66,1207.51 1425.25,1207.9 1425.83,1206.78 1426.42,1208.51 1427.01,1210.05 1427.59,1210.17 1428.18,1208.86 1428.77,1209.12 1429.35,1209.12 1429.94,1210.69 1430.53,1210.85 1431.11,1210.81 1431.7,1210.89 1432.29,1212.45 1432.87,1212.38 1433.46,1212.61 1434.04,1212.63 1434.63,1212.76 1435.22,1214.09 1435.8,1212.88 1436.39,1214.3 1436.98,1214.3 1437.56,1212.95 1438.15,1210.36 1438.74,1209.18 1439.32,1210.75 1439.91,1207.98 1440.5,1208.43 1441.08,1208.62 1441.67,1206.1 1442.25,1210.66 1442.84,1213.51 1443.43,1214.61 1444.01,1214.83 1444.6,1216.05 1445.19,1216.1 1445.77,1218.69 1446.36,1219.9 1446.95,1220.89 1447.53,1220.69 1448.12,1220.26 1448.7,1218.55 1449.29,1217.09 1449.88,1217 1450.46,1216.8 1451.05,1216.69 1451.64,1216.71 1452.22,1217.8 1452.81,1216.46 1453.4,1217.34 1453.98,1218.81 1454.57,1222.01 1455.16,1221.4 1455.74,1219.61 1456.33,1220.55 1456.91,1220.31 1457.5,1219.93 1458.09,1220.97 1458.67,1219.38 1459.26,1221.95 1459.85,1221.71 1460.43,1222.36 1461.02,1223.05 1461.61,1222.81 1462.19,1225.33 1462.78,1224.77 1463.37,1222.94 1463.95,1226.38 1464.54,1224.54 1465.12,1221.25 1465.71,1218.21 1466.3,1216.83 1466.88,1215.27 1467.47,1214.04 1468.06,1215.07 1468.64,1213.52 1469.23,1216.29 1469.82,1213.32 1470.4,1214.69 1470.99,1217.18 1471.57,1214.16 1472.16,1215.61 1472.75,1215.49 1473.33,1219.3 1473.92,1219.11 1474.51,1218.9 1475.09,1220.05 1475.68,1222.34 1476.27,1220.17 1476.85,1221.24 1477.44,1220.78 1478.03,1220.43 1478.61,1216.13 1479.2,1214.79 1479.78,1214.8 1480.37,1216.08 1480.96,1215.67 1481.54,1216.98 1482.13,1215.38 1482.72,1216.42 1483.3,1216.01 1483.89,1213.07 1484.48,1213.03 1485.06,1210.18 1485.65,1210.21 1486.24,1210.27 1486.82,1210.18 1487.41,1208.96 1487.99,1209.28 1488.58,1206.86 1489.17,1208.26 1489.75,1205.92 1490.34,1202.34 1490.93,1202.54 1491.51,1201.51 1492.1,1202.29 1492.69,1202.82 1493.27,1201.91 1493.86,1200.8 1494.45,1202.73 1495.03,1204.58 1495.62,1205.06 1496.2,1205.46 1496.79,1206.07 1497.38,1209.04 1497.96,1209.4 1498.55,1211.02 1499.14,1210.02 1499.72,1210.21 1500.31,1206.2 1500.9,1207.98 1501.48,1212.36 1502.07,1211.04 1502.65,1212.52 1503.24,1212.92 1503.83,1211.68 1504.41,1213.37 1505,1210.72 1505.59,1209.24 1506.17,1209.26 1506.76,1210.84 1507.35,1213.67 1507.93,1209.61 1508.52,1208.55 1509.11,1210.13 1509.69,1210.32 1510.28,1213.07 1510.86,1213.1 1511.45,1213.03 1512.04,1211.55 1512.62,1211.54 1513.21,1212.79 1513.8,1214 1514.38,1213.01 1514.97,1214.52 1515.56,1214.36 1516.14,1215.45 1516.73,1214.1 1517.32,1215.2 1517.9,1216.38 1518.49,1217.28 1519.07,1218.48 1519.66,1218.12 1520.25,1221.75 1520.83,1220.18 1521.42,1218.65 1522.01,1219.46 1522.59,1220.49 1523.18,1220.16 1523.77,1218.5 1524.35,1221.01 1524.94,1221.62 1525.52,1219.74 1526.11,1219.56 1526.7,1215.26 1527.28,1215.32 1527.87,1210.14 1528.46,1210.78 1529.04,1209.42 1529.63,1212.45 1530.22,1211.16 1530.8,1212.63 1531.39,1214.2 1531.98,1210.38 1532.56,1210.55 1533.15,1210.54 1533.73,1210.61 1534.32,1216.1 1534.91,1215.75 1535.49,1217.11 1536.08,1215.7 1536.67,1214.32 1537.25,1214.28 1537.84,1215.62 1538.43,1212.79 1539.01,1212.77 1539.6,1212.79 1540.19,1208.79 1540.77,1209.29 1541.36,1209.18 1541.94,1207.78 1542.53,1208.19 1543.12,1208.4 1543.7,1210.06 1544.29,1209.79 1544.88,1208.36 1545.46,1208.59 1546.05,1208.9 1546.64,1210.03 1547.22,1209.02 1547.81,1211.78 1548.4,1211.76 1548.98,1211.93 1549.57,1213.31 1550.15,1214.76 1550.74,1213.35 1551.33,1214.62 1551.91,1209.37 1552.5,1210.85 1553.09,1210.62 1553.67,1211.92 1554.26,1209.43 1554.85,1211.15 1555.43,1212.65 1556.02,1212.62 1556.6,1214.01 1557.19,1215.81 1557.78,1216.67 1558.36,1216.49 1558.95,1213.88 1559.54,1210.96 1560.12,1211.16 1560.71,1209.81 1561.3,1208.79 1561.88,1205.4 1562.47,1207.28 1563.06,1207.85 1563.64,1206.73 1564.23,1205.91 1564.81,1203.39 1565.4,1205.27 1565.99,1204.53 1566.57,1202.66 1567.16,1200.64 1567.75,1201.2 1568.33,1204.46 1568.92,1210.41 1569.51,1211.51 1570.09,1214.16 1570.68,1214.26 1571.27,1214.25 1571.85,1212.92 1572.44,1214.39 1573.02,1212.97 1573.61,1215.77 1574.2,1214.39 1574.78,1213.15 1575.37,1214.58 1575.96,1215.88 1576.54,1214.56 1577.13,1211.85 1577.72,1210.59 1578.3,1209.42 1578.89,1212.49 1579.47,1212.67 1580.06,1212.58 1580.65,1213.82 1581.23,1213.87 1581.82,1213.89 1582.41,1215.25 1582.99,1215.16 1583.58,1219.11 1584.17,1219.93 1584.75,1220.96 1585.34,1219.02 1585.93,1218.44 1586.51,1215.5 1587.1,1215.3 1587.68,1216.48 1588.27,1216.4 1588.86,1214.91 1589.44,1217.46 1590.03,1218.48 1590.62,1220.51 1591.2,1220.1 1591.79,1219.9 1592.38,1219.41 1592.96,1216.54 1593.55,1220.27 1594.14,1221.2 1594.72,1218.03 1595.31,1219.09 1595.89,1218.98 1596.48,1218.8 1597.07,1219.72 1597.65,1220.61 1598.24,1218.99 1598.83,1218.67 1599.41,1218.36 1600,1218.09 1600.59,1219.36 1601.17,1216.4 1601.76,1216.06 1602.34,1214.27 1602.93,1214.56 1603.52,1214.38 1604.1,1215.69 1604.69,1210.19 1605.28,1210.03 1605.86,1206.07 1606.45,1206.59 1607.04,1205.87 1607.62,1203.5 1608.21,1205.19 1608.8,1205.72 1609.38,1206.3 1609.97,1209.54 1610.55,1211.07 1611.14,1211.13 1611.73,1212.51 1612.31,1211.09 1612.9,1208.63 1613.49,1210.09 1614.07,1211.42 1614.66,1211.38 1615.25,1210.17 1615.83,1209.04 1616.42,1209.5 1617.01,1211.44 1617.59,1208.47 1618.18,1208.83 1618.76,1210.26 1619.35,1209.01 1619.94,1206.82 1620.52,1209.82 1621.11,1211.45 1621.7,1210.2 1622.28,1209.09 1622.87,1210.37 1623.46,1211.86 1624.04,1209.24 1624.63,1208.15 1625.22,1207.22 1625.8,1204.85 1626.39,1205.3 1626.97,1205.83 1627.56,1206.24 1628.15,1206.43 1628.73,1209.58 1629.32,1209.9 1629.91,1208.65 1630.49,1207.62 1631.08,1207.8 1631.67,1212.31 1632.25,1210.8 1632.84,1210.85 1633.42,1214.93 1634.01,1214.72 1634.6,1215.81 1635.18,1218.36 1635.77,1219.85 1636.36,1218.4 1636.94,1216.74 1637.53,1216.49 1638.12,1216.14 1638.7,1215.73 1639.29,1214.52 1639.88,1216 1640.46,1213.24 1641.05,1212.01 1641.63,1210.75 1642.22,1211.06 1642.81,1211.13 1643.39,1211.42 1643.98,1206.49 1644.57,1209.64 1645.15,1208.44 1645.74,1209.62 1646.33,1208.35 1646.91,1209.9 1647.5,1212.71 1648.09,1211.33 1648.67,1215.32 1649.26,1214.97 1649.84,1214.93 1650.43,1213.3 1651.02,1213.35 1651.6,1213.29 1652.19,1212.21 1652.78,1210.78 1653.36,1214.85 1653.95,1214.61 1654.54,1215.78 1655.12,1211.9 1655.71,1213.05 1656.29,1211.67 1656.88,1213.97 1657.47,1217.66 1658.05,1217.3 1658.64,1217.26 1659.23,1219.44 1659.81,1220.6 1660.4,1218.74 1660.99,1218.4 1661.57,1219.49 1662.16,1217.8 1662.75,1217.44 1663.33,1215.57 1663.92,1215.42 1664.5,1215.31 1665.09,1219.15 1665.68,1218.91 1666.26,1218.64 1666.85,1218.52 1667.44,1218.05 1668.02,1216.79 1668.61,1216.64 1669.2,1213.67 1669.78,1211.06 1670.37,1213.69 1670.96,1213.76 1671.54,1215.19 1672.13,1213.8 1672.71,1213.7 1673.3,1214.12 1673.89,1214.21 1674.47,1212.68 1675.06,1211.39 1675.65,1214.21 1676.23,1212.95 1676.82,1213.1 1677.41,1213.09 1677.99,1213.3 1678.58,1213.24 1679.17,1211.93 1679.75,1212.09 1680.34,1212.29 1680.92,1208.21 1681.51,1208.11 1682.1,1210.67 1682.68,1212.03 1683.27,1212 1683.86,1212.35 1684.44,1209.37 1685.03,1208.26 1685.62,1207.02 1686.2,1207.35 1686.79,1213.22 1687.37,1210.61 1687.96,1210.66 1688.55,1207.95 1689.13,1208.3 1689.72,1207.26 1690.31,1207.45 1690.89,1206.26 1691.48,1205.17 1692.07,1206.85 1692.65,1205.64 1693.24,1204.67 1693.83,1207.66 1694.41,1208.02 1695,1210.87 1695.58,1212.24 1696.17,1212.27 1696.76,1209.8 1697.34,1209.95 1697.93,1208.59 1698.52,1207.6 1699.1,1207.94 1699.69,1209.43 1700.28,1209.6 1700.86,1210.06 1701.45,1211.39 1702.04,1211.34 1702.62,1211.26 1703.21,1209.64 1703.79,1210.98 1704.38,1213.61 1704.97,1213.54 1705.55,1212.41 1706.14,1211.11 1706.73,1209.94 1707.31,1208.8 1707.9,1209 1708.49,1210.7 1709.07,1210.76 1709.66,1209.93 1710.24,1208.81 1710.83,1207.65 1711.42,1206.61 1712,1206.6 1712.59,1205.48 1713.18,1205.56 1713.76,1204.49 1714.35,1203.81 1714.94,1203.4 1715.52,1206.45 1716.11,1205.42 1716.7,1206.02 1717.28,1210.3 1717.87,1211.65 1718.45,1211.55 1719.04,1211.77 1719.63,1214.29 1720.21,1218.07 1720.8,1215.23 1721.39,1217.7 1721.97,1218.84 1722.56,1218.64 1723.15,1219.68 1723.73,1220.67 1724.32,1219.01 1724.91,1222.67 1725.49,1221 1726.08,1221.84 1726.66,1222.32 1727.25,1224.62 1727.84,1225.16 1728.42,1225.77 1729.01,1226.58 1729.6,1224.47 1730.18,1222.52 1730.77,1224.53 1731.36,1223.96 1731.94,1221.92 1732.53,1220.02 1733.11,1218.58 1733.7,1219.66 1734.29,1218.07 1734.87,1216.56 1735.46,1217.86 1736.05,1218.91 1736.63,1218.57 1737.22,1219.75 1737.81,1219.58 1738.39,1217.62 1738.98,1217.33 1739.57,1214.53 1740.15,1214.47 1740.74,1212.8 1741.32,1213.97 1741.91,1211.21 1742.5,1212.44 1743.08,1215.34 1743.67,1215.45 1744.26,1217.84 1744.84,1218.72 1745.43,1218.39 1746.02,1218.1 1746.6,1217.62 1747.19,1218.75 1747.78,1219.9 1748.36,1222.59 1748.95,1221.83 1749.53,1221.22 1750.12,1224.92 1750.71,1224.49 1751.29,1221.36 1751.88,1220.7 1752.47,1217.58 1753.05,1217.31 1753.64,1214.63 1754.23,1214.59 1754.81,1214.68 1755.4,1211.53 1755.99,1212.88 1756.57,1212.89 1757.16,1210.11 1757.74,1206.11 1758.33,1207.72 1758.92,1213.29 1759.5,1216.15 1760.09,1217.18 1760.68,1214.09 1761.26,1211.56 1761.85,1211.58 1762.44,1213.26 1763.02,1214.55 1763.61,1213.21 1764.19,1210.55 1764.78,1210.75 1765.37,1208.22 1765.95,1208.51 1766.54,1207.5 1767.13,1206.39 1767.71,1206.71 1768.3,1206.88 1768.89,1209.9 1769.47,1211.74 1770.06,1210.57 1770.65,1213.44 1771.23,1213.31 1771.82,1214.73 1772.4,1213.35 1772.99,1211.92 1773.58,1210.73 1774.16,1214.65 1774.75,1213.52 1775.34,1211.85 1775.92,1210.48 1776.51,1210.57 1777.1,1208.03 1777.68,1208.44 1778.27,1205.96 1778.86,1206.31 1779.44,1208.25 1780.03,1208.33 1780.61,1207.01 1781.2,1209.84 1781.79,1209.96 1782.37,1211.44 1782.96,1211.82 1783.55,1210.58 1784.13,1205.5 1784.72,1207.03 1785.31,1206.21 1785.89,1206.48 1786.48,1208.2 1787.06,1209.4 1787.65,1208.59 1788.24,1210.17 1788.82,1207.82 1789.41,1209.31 1790,1209.38 1790.58,1209.51 1791.17,1211 1791.76,1209.77 1792.34,1211.3 1792.93,1211.47 1793.52,1212.74 1794.1,1211.55 1794.69,1211.64 1795.27,1210.17 1795.86,1212.83 1796.45,1212.96 1797.03,1214.62 1797.62,1214.22 1798.21,1216.83 1798.79,1213.94 1799.38,1212.54 1799.97,1210 1800.55,1213.7 1801.14,1214.87 1801.73,1214.68 1802.31,1215.78 1802.9,1215.53 1803.48,1218.07 1804.07,1221.8 1804.66,1225.32 1805.24,1223.49 1805.83,1223.05 1806.42,1226.71 1807,1224.72 1807.59,1222.62 1808.18,1222.42 1808.76,1223.15 1809.35,1222.79 1809.94,1223.38 1810.52,1222.88 1811.11,1224.92 1811.69,1224.58 1812.28,1222.59 1812.87,1221.9 1813.45,1218.9 1814.04,1215.82 1814.63,1214.43 1815.21,1213.13 1815.8,1213.24 1816.39,1211.64 1816.97,1210.48 1817.56,1212.03 1818.14,1214.67 1818.73,1214.77 1819.32,1213.29 1819.9,1212.02 1820.49,1211.92 1821.08,1211.95 1821.66,1213.35 1822.25,1213.11 1822.84,1213.1 1823.42,1213.12 1824.01,1213.31 1824.6,1210.65 1825.18,1209.39 1825.77,1209.58 1826.35,1209.51 1826.94,1207.01 1827.53,1204.66 1828.11,1206.68 1828.7,1207.23 1829.29,1207.5 1829.87,1207.93 1830.46,1208.17 1831.05,1207.2 1831.63,1207.68 1832.22,1209.45 1832.81,1208.4 1833.39,1208.74 1833.98,1210 1834.56,1209.83 1835.15,1209.95 1835.74,1211.79 1836.32,1213.17 1836.91,1217.35 1837.5,1219.87 1838.08,1219.63 1838.67,1220.6 1839.26,1221.42 1839.84,1218.44 1840.43,1219.49 1841.01,1223.1 1841.6,1219.89 1842.19,1219.88 1842.77,1218.63 1843.36,1222.23 1843.95,1220.43 1844.53,1220.16 1845.12,1217.24 1845.71,1216.62 1846.29,1216.47 1846.88,1213.29 1847.47,1213.21 1848.05,1211.68 1848.64,1213.03 1849.22,1211.83 1849.81,1210.25 1850.4,1208.97 1850.98,1209.46 1851.57,1206.93 1852.16,1205.86 1852.74,1207.93 1853.33,1210.86 1853.92,1213.7 1854.5,1211.99 1855.09,1211.8 1855.68,1211.64 1856.26,1211.72 1856.85,1210.17 1857.43,1209.06 1858.02,1210.54 1858.61,1210.71 1859.19,1208.21 1859.78,1209.7 1860.37,1209.76 1860.95,1211.2 1861.54,1211.23 1862.13,1211.32 1862.71,1214.26 1863.3,1216.77 1863.88,1213.92 1864.47,1216.7 1865.06,1217.97 1865.64,1219.09 1866.23,1220.09 1866.82,1217.2 1867.4,1217.16 1867.99,1216.86 1868.58,1218.09 1869.16,1213.55 1869.75,1213.61 1870.34,1213.62 1870.92,1214.66 1871.51,1211.63 1872.09,1211.68 1872.68,1211.92 1873.27,1210.52 1873.85,1212.01 1874.44,1210.66 1875.03,1210.9 1875.61,1210.98 1876.2,1210.98 1876.79,1211.31 1877.37,1212.73 1877.96,1212.84 1878.55,1210.41 1879.13,1211.97 1879.72,1210.62 1880.3,1212.08 1880.89,1210.6 1881.48,1210.64 1882.06,1209.49 1882.65,1209.53 1883.24,1208.44 1883.82,1208.85 1884.41,1209.09 1885,1211.99 1885.58,1210.83 1886.17,1211.14 1886.76,1212.57 1887.34,1212.53 1887.93,1211.47 1888.51,1208.9 1889.1,1208.09 1889.69,1209.51 1890.27,1208.4 1890.86,1207.63 1891.45,1208.04 1892.03,1208.43 1892.62,1208.93 1893.21,1209.01 1893.79,1209.4 1894.38,1212.03 1894.96,1211.95 1895.55,1209.35 1896.14,1205.6 1896.72,1206.06 1897.31,1204.24 1897.9,1206.07 1898.48,1207.96 1899.07,1205.78 1899.66,1206.12 1900.24,1206.44 1900.83,1208.48 1901.42,1207.58 1902,1207.85 1902.59,1208 1903.17,1208.49 1903.76,1208.94 1904.35,1209.12 1904.93,1209.6 1905.52,1210.03 1906.11,1210.33 1906.69,1210.83 1907.28,1209.51 1907.87,1213.83 1908.45,1213.61 1909.04,1217.61 1909.63,1218.75 1910.21,1218.42 1910.8,1218.35 1911.38,1218.34 1911.97,1219.44 1912.56,1217.54 1913.14,1217.17 1913.73,1217.06 1914.32,1215.73 1914.9,1218.31 1915.49,1219.28 1916.08,1216.29 1916.66,1216.03 1917.25,1215.85 1917.83,1215.9 1918.42,1218.39 1919.01,1220.84 1919.59,1220.52 1920.18,1218.7 1920.77,1213.45 1921.35,1212.63 1921.94,1212.63 1922.53,1220.74 1923.11,1221.71 1923.7,1218.55 1924.29,1219.62 1924.87,1217.83 1925.46,1219.04 1926.04,1218.73 1926.63,1218.28 1927.22,1218.01 1927.8,1220.56 1928.39,1221.51 1928.98,1219.95 1929.56,1215.6 1930.15,1215.14 1930.74,1216.19 1931.32,1215.99 1931.91,1214.66 1932.5,1215.76 1933.08,1214.72 1933.67,1213.51 1934.25,1215.17 1934.84,1216.01 1935.43,1215.82 1936.01,1216.61 1936.6,1217.8 1937.19,1217.21 1937.77,1216.95 1938.36,1215.3 1938.95,1217.74 1939.53,1214.8 1940.12,1210.48 1940.71,1210.66 1941.29,1208.18 1941.88,1209.87 1942.46,1209.88 1943.05,1209.83 1943.64,1207.57 1944.22,1206.6 1944.81,1204.02 1945.4,1205.8 1945.98,1205.97 1946.57,1206.3 1947.16,1209.42 1947.74,1208.46 1948.33,1204.87 1948.91,1202.44 1949.5,1205.7 1950.09,1206.07 1950.67,1207.77 1951.26,1209.47 1951.85,1209.59 1952.43,1209.6 1953.02,1211.03 1953.61,1209.93 1954.19,1210.06 1954.78,1210.05 1955.37,1209.3 1955.95,1210.89 1956.54,1213.55 1957.12,1214.63 1957.71,1214.65 1958.3,1213.28 1958.88,1213.16 1959.47,1214.25 1960.06,1213 1960.64,1212.99 1961.23,1212.8 1961.82,1211.15 1962.4,1209.9 1962.99,1212.7 1963.58,1215.37 1964.16,1211.02 1964.75,1210.96 1965.33,1212.39 1965.92,1216.44 1966.51,1216.25 1967.09,1218.51 1967.68,1217.18 1968.27,1218.14 1968.85,1216.4 1969.44,1214.63 1970.03,1214.46 1970.61,1214.23 1971.2,1214.38 1971.78,1215.79 1972.37,1215.59 1972.96,1216.81 1973.54,1216.76 1974.13,1216.41 1974.72,1215.08 1975.3,1216.03 1975.89,1216.08 1976.48,1215.63 1977.06,1215.67 1977.65,1214.16 1978.24,1212.82 1978.82,1215.52 1979.41,1214.17 1979.99,1211.36 1980.58,1210.18 1981.17,1211.59 1981.75,1213.29 1982.34,1212.04 1982.93,1211.82 1983.51,1213.3 1984.1,1210.42 1984.69,1210.39 1985.27,1211.92 1985.86,1209.27 1986.45,1209.42 1987.03,1212.48 1987.62,1211.01 1988.2,1210.95 1988.79,1212.56 1989.38,1211.44 1989.96,1208.85 1990.55,1208.86 1991.14,1205.17 1991.72,1205.37 1992.31,1205.95 1992.9,1206.37 1993.48,1206.63 1994.07,1208.19 1994.65,1209.66 1995.24,1209.87 1995.83,1208.84 1996.41,1210.35 1997,1209.49 1997.59,1211.03 1998.17,1211.02 1998.76,1214.23 1999.35,1212.77 1999.93,1213.9 2000.52,1212.7 2001.11,1215.6 2001.69,1215.3 2002.28,1213.97 2002.86,1214.14 2003.45,1212.66 2004.04,1213.1 2004.62,1209.13 2005.21,1206.75 2005.8,1208.28 2006.38,1208.28 2006.97,1210.06 2007.56,1211.7 2008.14,1210.57 2008.73,1211.05 2009.32,1211.1 2009.9,1212.82 2010.49,1213.08 2011.07,1210.41 2011.66,1214.62 2012.25,1217.08 2012.83,1216.98 2013.42,1216.79 2014.01,1219.2 2014.59,1216.38 2015.18,1214.94 2015.77,1216.27 2016.35,1213.51 2016.94,1211.12 2017.53,1210.19 2018.11,1211.89 2018.7,1210.4 2019.28,1212.06 2019.87,1210.37 2020.46,1208.93 2021.04,1206.51 2021.63,1205.6 2022.22,1207.44 2022.8,1207.74 2023.39,1206.91 2023.98,1205.66 2024.56,1206.39 2025.15,1204.05 2025.73,1205.79 2026.32,1206.47 2026.91,1204.03 2027.49,1204.57 2028.08,1210.45 2028.67,1211.99 2029.25,1211.06 2029.84,1209.73 2030.43,1205.74 2031.01,1204.99 2031.6,1201.84 2032.19,1202.47 2032.77,1203.01 2033.36,1203.61 2033.94,1204.3 2034.53,1204.97 2035.12,1205.51 2035.7,1207.37 2036.29,1209.37 2036.88,1213.35 2037.46,1214.81 2038.05,1214.55 2038.64,1212.76 2039.22,1214.02 2039.81,1214.35 2040.4,1214.33 2040.98,1214.43 2041.57,1217.06 2042.15,1216.92 2042.74,1219.14 2043.33,1218.5 2043.91,1217.05 2044.5,1219.74 2045.09,1219.42 2045.67,1220.11 2046.26,1221.98 2046.85,1219.95 2047.43,1222.03 2048.02,1221.32 2048.6,1220.79 2049.19,1220.25 2049.78,1220.9 2050.36,1221.88 2050.95,1221.77 2051.54,1221.19 2052.12,1219.47 2052.71,1217.91 2053.3,1220.31 2053.88,1221.14 2054.47,1216.37 2055.06,1217.57 2055.64,1215.93 2056.23,1214.59 2056.81,1217.19 2057.4,1214.03 2057.99,1214.06 2058.57,1215.25 2059.16,1216.45 2059.75,1216.35 2060.33,1213.63 2060.92,1213.62 2061.51,1213.36 2062.09,1213.32 2062.68,1211.92 2063.27,1211.84 2063.85,1214.5 2064.44,1219.48 2065.02,1219.13 2065.61,1221.04 2066.2,1220.57 2066.78,1218.8 2067.37,1220.02 2067.96,1219.7 2068.54,1218.13 2069.13,1216.39 2069.72,1217.58 2070.3,1216.1 2070.89,1213.24 2071.48,1213.01 2072.06,1213.13 2072.65,1213.17 2073.23,1215.84 2073.82,1215.79 2074.41,1215.63 2074.99,1218.25 2075.58,1217.63 2076.17,1221.11 2076.75,1222.08 2077.34,1221.57 2077.93,1218.54 2078.51,1218.22 2079.1,1217.78 2079.68,1217.67 2080.27,1217.47 2080.86,1217.4 2081.44,1215.44 2082.03,1217.9 2082.62,1217.56 2083.2,1218.47 2083.79,1215.52 2084.38,1213.98 2084.96,1215.21 2085.55,1213.63 2086.14,1213.54 2086.72,1214.63 2087.31,1214.42 2087.89,1210.32 2088.48,1211.99 2089.07,1215.97 2089.65,1217.43 2090.24,1217.11 2090.83,1216.98 2091.41,1215.43 2092,1215.05 2092.59,1213.63 2093.17,1210.95 2093.76,1212.25 2094.35,1214.81 2094.93,1214.85 2095.52,1214.65 2096.1,1214.83 2096.69,1213.26 2097.28,1211.63 2097.86,1211.78 2098.45,1210.55 2099.04,1207.96 2099.62,1208.28 2100.21,1208.25 2100.8,1211.22 2101.38,1209.91 2101.97,1208.9 2102.55,1209.18 2103.14,1210.67 2103.73,1210.71 2104.31,1209.3 2104.9,1212.26 2105.49,1212.51 2106.07,1212.74 2106.66,1214.17 2107.25,1214.24 2107.83,1215.45 2108.42,1219.33 2109.01,1218.89 2109.59,1218.32 2110.18,1220.96 2110.76,1221.79 2111.35,1222.62 2111.94,1220.91 2112.52,1219.48 2113.11,1219.62 2113.7,1218.15 2114.28,1217.85 2114.87,1221.7 2115.46,1224.12 2116.04,1223.26 2116.63,1221.28 2117.22,1218.34 2117.8,1216.79 2118.39,1213.88 2118.97,1212.45 2119.56,1211.12 2120.15,1208.55 2120.73,1209.96 2121.32,1211.3 2121.91,1212.52 2122.49,1215.38 2123.08,1216.7 2123.67,1215.22 2124.25,1216.66 2124.84,1212.59 2125.42,1212.67 2126.01,1210.16 2126.6,1205.26 2127.18,1203.07 2127.77,1203.62 2128.36,1203.02 2128.94,1205 2129.53,1202.45 2130.12,1203.95 2130.7,1206.02 2131.29,1206.49 2131.88,1206.76 2132.46,1209.68 2133.05,1209.84 2133.63,1210 2134.22,1208.74 2134.81,1210.18 2135.39,1212.74 2135.98,1215.36 2136.57,1212.35 2137.15,1210.01 2137.74,1211.33 2138.33,1211.62 2138.91,1211.32 2139.5,1213.01 2140.09,1215.56 2140.67,1212.8 2141.26,1210.07 2141.84,1212.8 2142.43,1212.86 2143.02,1214.12 2143.6,1214.11 2144.19,1213.85 2144.78,1209.6 2145.36,1209.82 2145.95,1210.02 2146.54,1209.1 2147.12,1207.99 2147.71,1209.72 2148.3,1206.03 2148.88,1209.2 2149.47,1206.94 2150.05,1207.22 2150.64,1207.62 2151.23,1207.9 2151.81,1210.93 2152.4,1215.12 2152.99,1212.34 2153.57,1211.05 2154.16,1214.1 2154.75,1213.94 2155.33,1213.7 2155.92,1215.26 2156.5,1215.28 2157.09,1216.33 2157.68,1218.66 2158.26,1219.6 \"/>\n<path clip-path=\"url(#clip782)\" d=\"M986.025 1213.63 L986.612 1213.63 L987.198 1213.63 L987.785 1213.63 L988.371 1213.63 L988.957 1213.63 L989.544 1213.63 L990.13 1213.63 L990.717 1213.63 L991.303 1213.63 L991.889 1213.63 L992.476 1213.63 L993.062 1213.63 L993.649 1213.63 L994.235 1213.63 L994.822 1213.63 L995.408 1213.63 L995.994 1213.63 L996.581 1213.63 L997.167 1213.63 L997.754 1213.63 L998.34 1213.63 L998.926 1213.63 L999.513 1213.63 L1000.1 1213.63 L1000.69 1213.63 L1001.27 1213.63 L1001.86 1213.63 L1002.44 1213.63 L1003.03 1213.63 L1003.62 1213.63 L1004.2 1213.63 L1004.79 1213.63 L1005.38 1213.63 L1005.96 1213.63 L1006.55 1213.63 L1007.14 1213.63 L1007.72 1213.63 L1008.31 1213.63 L1008.9 1213.63 L1009.48 1213.63 L1010.07 1213.63 L1010.65 1213.63 L1011.24 1213.63 L1011.83 1213.63 L1012.41 1213.63 L1013 1213.63 L1013.59 1213.63 L1014.17 1213.63 L1014.76 1213.63 L1015.35 1213.63 L1015.93 1213.63 L1016.52 1213.63 L1017.11 1213.63 L1017.69 1213.63 L1018.28 1213.63 L1018.86 1213.63 L1019.45 1213.63 L1020.04 1213.63 L1020.62 1213.63 L1021.21 1213.63 L1021.8 1213.63 L1022.38 1213.63 L1022.97 1213.63 L1023.56 1213.63 L1024.14 1213.63 L1024.73 1213.63 L1025.32 1213.63 L1025.9 1213.63 L1026.49 1213.63 L1027.07 1213.63 L1027.66 1213.63 L1028.25 1213.63 L1028.83 1213.63 L1029.42 1213.63 L1030.01 1213.63 L1030.59 1213.63 L1031.18 1213.63 L1031.77 1213.63 L1032.35 1213.63 L1032.94 1213.63 L1033.52 1213.63 L1034.11 1213.63 L1034.7 1213.63 L1035.28 1213.63 L1035.87 1213.63 L1036.46 1213.63 L1037.04 1213.63 L1037.63 1213.63 L1038.22 1213.63 L1038.8 1213.63 L1039.39 1213.63 L1039.98 1213.63 L1040.56 1213.63 L1041.15 1213.63 L1041.73 1213.63 L1042.32 1213.63 L1042.91 1213.63 L1043.49 1213.63 L1044.08 1213.63 L1044.67 1213.63 L1045.25 1213.63 L1045.84 1213.63 L1046.43 1213.63 L1047.01 1213.63 L1047.6 1213.63 L1048.19 1213.63 L1048.77 1213.63 L1049.36 1213.63 L1049.94 1213.63 L1050.53 1213.63 L1051.12 1213.63 L1051.7 1213.63 L1052.29 1213.63 L1052.88 1213.63 L1053.46 1213.63 L1054.05 1213.63 L1054.64 1213.63 L1055.22 1213.63 L1055.81 1213.63 L1056.39 1213.63 L1056.98 1213.63 L1057.57 1213.63 L1058.15 1213.63 L1058.74 1213.63 L1059.33 1213.63 L1059.91 1213.63 L1060.5 1213.63 L1061.09 1213.63 L1061.67 1213.63 L1062.26 1213.63 L1062.85 1213.63 L1063.43 1213.63 L1064.02 1213.63 L1064.6 1213.63 L1065.19 1213.63 L1065.78 1213.63 L1066.36 1213.63 L1066.95 1213.63 L1067.54 1213.63 L1068.12 1213.63 L1068.71 1213.63 L1069.3 1213.63 L1069.88 1213.63 L1070.47 1213.63 L1071.06 1213.63 L1071.64 1213.63 L1072.23 1213.63 L1072.81 1213.63 L1073.4 1213.63 L1073.99 1213.63 L1074.57 1213.63 L1075.16 1213.63 L1075.75 1213.63 L1076.33 1213.63 L1076.92 1213.63 L1077.51 1213.63 L1078.09 1213.63 L1078.68 1213.63 L1079.26 1213.63 L1079.85 1213.63 L1080.44 1213.63 L1081.02 1213.63 L1081.61 1213.63 L1082.2 1213.63 L1082.78 1213.63 L1083.37 1213.63 L1083.96 1213.63 L1084.54 1213.63 L1085.13 1213.63 L1085.72 1213.63 L1086.3 1213.63 L1086.89 1213.63 L1087.47 1213.63 L1088.06 1213.63 L1088.65 1213.63 L1089.23 1213.63 L1089.82 1213.63 L1090.41 1213.63 L1090.99 1213.63 L1091.58 1213.63 L1092.17 1213.63 L1092.75 1213.63 L1093.34 1213.63 L1093.93 1213.63 L1094.51 1213.63 L1095.1 1213.63 L1095.68 1213.63 L1096.27 1213.63 L1096.86 1213.63 L1097.44 1213.63 L1098.03 1213.63 L1098.62 1213.63 L1099.2 1213.63 L1099.79 1213.63 L1100.38 1213.63 L1100.96 1213.63 L1101.55 1213.63 L1102.14 1213.63 L1102.72 1213.63 L1103.31 1213.63 L1103.89 1213.63 L1104.48 1213.63 L1105.07 1213.63 L1105.65 1213.63 L1106.24 1213.63 L1106.83 1213.63 L1107.41 1213.63 L1108 1213.63 L1108.59 1213.63 L1109.17 1213.63 L1109.76 1213.63 L1110.34 1213.63 L1110.93 1213.63 L1111.52 1213.63 L1112.1 1213.63 L1112.69 1213.63 L1113.28 1213.63 L1113.86 1213.63 L1114.45 1213.63 L1115.04 1213.63 L1115.62 1213.63 L1116.21 1213.63 L1116.8 1213.63 L1117.38 1213.63 L1117.97 1213.63 L1118.55 1213.63 L1119.14 1213.63 L1119.73 1213.63 L1120.31 1213.63 L1120.9 1213.63 L1121.49 1213.63 L1122.07 1213.63 L1122.66 1213.63 L1123.25 1213.63 L1123.83 1213.63 L1124.42 1213.63 L1125.01 1213.63 L1125.59 1213.63 L1126.18 1213.63 L1126.76 1213.63 L1127.35 1213.63 L1127.94 1213.63 L1128.52 1213.63 L1129.11 1213.63 L1129.7 1213.63 L1130.28 1213.63 L1130.87 1213.63 L1131.46 1213.63 L1132.04 1213.63 L1132.63 1213.63 L1133.21 1213.63 L1133.8 1213.63 L1134.39 1213.63 L1134.97 1213.63 L1135.56 1213.63 L1136.15 1213.63 L1136.73 1213.63 L1137.32 1213.63 L1137.91 1213.63 L1138.49 1213.63 L1139.08 1213.63 L1139.67 1213.63 L1140.25 1213.63 L1140.84 1213.63 L1141.42 1213.63 L1142.01 1213.63 L1142.6 1213.63 L1143.18 1213.63 L1143.77 1213.63 L1144.36 1213.63 L1144.94 1213.63 L1145.53 1213.63 L1146.12 1213.63 L1146.7 1213.63 L1147.29 1213.63 L1147.88 1213.63 L1148.46 1213.63 L1149.05 1213.63 L1149.63 1213.63 L1150.22 1213.63 L1150.81 1213.63 L1151.39 1213.63 L1151.98 1213.63 L1152.57 1213.63 L1153.15 1213.63 L1153.74 1213.63 L1154.33 1213.63 L1154.91 1213.63 L1155.5 1213.63 L1156.09 1213.63 L1156.67 1213.63 L1157.26 1213.63 L1157.84 1213.63 L1158.43 1213.63 L1159.02 1213.63 L1159.6 1213.63 L1160.19 1213.63 L1160.78 1213.63 L1161.36 1213.63 L1161.95 1213.63 L1162.54 1213.63 L1163.12 1213.63 L1163.71 1213.63 L1164.29 1213.63 L1164.88 1213.63 L1165.47 1213.63 L1166.05 1213.63 L1166.64 1213.63 L1167.23 1213.63 L1167.81 1213.63 L1168.4 1213.63 L1168.99 1213.63 L1169.57 1213.63 L1170.16 1213.63 L1170.75 1213.63 L1171.33 1213.63 L1171.92 1213.63 L1172.5 1213.63 L1173.09 1213.63 L1173.68 1213.63 L1174.26 1213.63 L1174.85 1213.63 L1175.44 1213.63 L1176.02 1213.63 L1176.61 1213.63 L1177.2 1213.63 L1177.78 1213.63 L1178.37 1213.63 L1178.96 1213.63 L1179.54 1213.63 L1180.13 1213.63 L1180.71 1213.63 L1181.3 1213.63 L1181.89 1213.63 L1182.47 1213.63 L1183.06 1213.63 L1183.65 1213.63 L1184.23 1213.63 L1184.82 1213.63 L1185.41 1213.63 L1185.99 1213.63 L1186.58 1213.63 L1187.16 1213.63 L1187.75 1213.63 L1188.34 1213.63 L1188.92 1213.63 L1189.51 1213.63 L1190.1 1213.63 L1190.68 1213.63 L1191.27 1213.63 L1191.86 1213.63 L1192.44 1213.63 L1193.03 1213.63 L1193.62 1213.63 L1194.2 1213.63 L1194.79 1213.63 L1195.37 1213.63 L1195.96 1213.63 L1196.55 1213.63 L1197.13 1213.63 L1197.72 1213.63 L1198.31 1213.63 L1198.89 1213.63 L1199.48 1213.63 L1200.07 1213.63 L1200.65 1213.63 L1201.24 1213.63 L1201.83 1213.63 L1202.41 1213.63 L1203 1213.63 L1203.58 1213.63 L1204.17 1213.63 L1204.76 1213.63 L1205.34 1213.63 L1205.93 1213.63 L1206.52 1213.63 L1207.1 1213.63 L1207.69 1213.63 L1208.28 1213.63 L1208.86 1213.63 L1209.45 1213.63 L1210.03 1213.63 L1210.62 1213.63 L1211.21 1213.63 L1211.79 1213.63 L1212.38 1213.63 L1212.97 1213.63 L1213.55 1213.63 L1214.14 1213.63 L1214.73 1213.63 L1215.31 1213.63 L1215.9 1213.63 L1216.49 1213.63 L1217.07 1213.63 L1217.66 1213.63 L1218.24 1213.63 L1218.83 1213.63 L1219.42 1213.63 L1220 1213.63 L1220.59 1213.63 L1221.18 1213.63 L1221.76 1213.63 L1222.35 1213.63 L1222.94 1213.63 L1223.52 1213.63 L1224.11 1213.63 L1224.7 1213.63 L1225.28 1213.63 L1225.87 1213.63 L1226.45 1213.63 L1227.04 1213.63 L1227.63 1213.63 L1228.21 1213.63 L1228.8 1213.63 L1229.39 1213.63 L1229.97 1213.63 L1230.56 1213.63 L1231.15 1213.63 L1231.73 1213.63 L1232.32 1213.63 L1232.91 1213.63 L1233.49 1213.63 L1234.08 1213.63 L1234.66 1213.63 L1235.25 1213.63 L1235.84 1213.63 L1236.42 1213.63 L1237.01 1213.63 L1237.6 1213.63 L1238.18 1213.63 L1238.77 1213.63 L1239.36 1213.63 L1239.94 1213.63 L1240.53 1213.63 L1241.11 1213.63 L1241.7 1213.63 L1242.29 1213.63 L1242.87 1213.63 L1243.46 1213.63 L1244.05 1213.63 L1244.63 1213.63 L1245.22 1213.63 L1245.81 1213.63 L1246.39 1213.63 L1246.98 1213.63 L1247.57 1213.63 L1248.15 1213.63 L1248.74 1213.63 L1249.32 1213.63 L1249.91 1213.63 L1250.5 1213.63 L1251.08 1213.63 L1251.67 1213.63 L1252.26 1213.63 L1252.84 1213.63 L1253.43 1213.63 L1254.02 1213.63 L1254.6 1213.63 L1255.19 1213.63 L1255.78 1213.63 L1256.36 1213.63 L1256.95 1213.63 L1257.53 1213.63 L1258.12 1213.63 L1258.71 1213.63 L1259.29 1213.63 L1259.88 1213.63 L1260.47 1213.63 L1261.05 1213.63 L1261.64 1213.63 L1262.23 1213.63 L1262.81 1213.63 L1263.4 1213.63 L1263.98 1213.63 L1264.57 1213.63 L1265.16 1213.63 L1265.74 1213.63 L1266.33 1213.63 L1266.92 1213.63 L1267.5 1213.63 L1268.09 1213.63 L1268.68 1213.63 L1269.26 1213.63 L1269.85 1213.63 L1270.44 1213.63 L1271.02 1213.63 L1271.61 1213.63 L1272.19 1213.63 L1272.78 1213.63 L1273.37 1213.63 L1273.95 1213.63 L1274.54 1213.63 L1275.13 1213.63 L1275.71 1213.63 L1276.3 1213.63 L1276.89 1213.63 L1277.47 1213.63 L1278.06 1213.63 L1278.65 1213.63 L1279.23 1213.63 L1279.82 1213.63 L1280.4 1213.63 L1280.99 1213.63 L1281.58 1213.63 L1282.16 1213.63 L1282.75 1213.63 L1283.34 1213.63 L1283.92 1213.63 L1284.51 1213.63 L1285.1 1213.63 L1285.68 1213.63 L1286.27 1213.63 L1286.86 1213.63 L1287.44 1213.63 L1288.03 1213.63 L1288.61 1213.63 L1289.2 1213.63 L1289.79 1213.63 L1290.37 1213.63 L1290.96 1213.63 L1291.55 1213.63 L1292.13 1213.63 L1292.72 1213.63 L1293.31 1213.63 L1293.89 1213.63 L1294.48 1213.63 L1295.06 1213.63 L1295.65 1213.63 L1296.24 1213.63 L1296.82 1213.63 L1297.41 1213.63 L1298 1213.63 L1298.58 1213.63 L1299.17 1213.63 L1299.76 1213.63 L1300.34 1213.63 L1300.93 1213.63 L1301.52 1213.63 L1302.1 1213.63 L1302.69 1213.63 L1303.27 1213.63 L1303.86 1213.63 L1304.45 1213.63 L1305.03 1213.63 L1305.62 1213.63 L1306.21 1213.63 L1306.79 1213.63 L1307.38 1213.63 L1307.97 1213.63 L1308.55 1213.63 L1309.14 1213.63 L1309.73 1213.63 L1310.31 1213.63 L1310.9 1213.63 L1311.48 1213.63 L1312.07 1213.63 L1312.66 1213.63 L1313.24 1213.63 L1313.83 1213.63 L1314.42 1213.63 L1315 1213.63 L1315.59 1213.63 L1316.18 1213.63 L1316.76 1213.63 L1317.35 1213.63 L1317.93 1213.63 L1318.52 1213.63 L1319.11 1213.63 L1319.69 1213.63 L1320.28 1213.63 L1320.87 1213.63 L1321.45 1213.63 L1322.04 1213.63 L1322.63 1213.63 L1323.21 1213.63 L1323.8 1213.63 L1324.39 1213.63 L1324.97 1213.63 L1325.56 1213.63 L1326.14 1213.63 L1326.73 1213.63 L1327.32 1213.63 L1327.9 1213.63 L1328.49 1213.63 L1329.08 1213.63 L1329.66 1213.63 L1330.25 1213.63 L1330.84 1213.63 L1331.42 1213.63 L1332.01 1213.63 L1332.6 1213.63 L1333.18 1213.63 L1333.77 1213.63 L1334.35 1213.63 L1334.94 1213.63 L1335.53 1213.63 L1336.11 1213.63 L1336.7 1213.63 L1337.29 1213.63 L1337.87 1213.63 L1338.46 1213.63 L1339.05 1213.63 L1339.63 1213.63 L1340.22 1213.63 L1340.8 1213.63 L1341.39 1213.63 L1341.98 1213.63 L1342.56 1213.63 L1343.15 1213.63 L1343.74 1213.63 L1344.32 1213.63 L1344.91 1213.63 L1345.5 1213.63 L1346.08 1213.63 L1346.67 1213.63 L1347.26 1213.63 L1347.84 1213.63 L1348.43 1213.63 L1349.01 1213.63 L1349.6 1213.63 L1350.19 1213.63 L1350.77 1213.63 L1351.36 1213.63 L1351.95 1213.63 L1352.53 1213.63 L1353.12 1213.63 L1353.71 1213.63 L1354.29 1213.63 L1354.88 1213.63 L1355.47 1213.63 L1356.05 1213.63 L1356.64 1213.63 L1357.22 1213.63 L1357.81 1213.63 L1358.4 1213.63 L1358.98 1213.63 L1359.57 1213.63 L1360.16 1213.63 L1360.74 1213.63 L1361.33 1213.63 L1361.92 1213.63 L1362.5 1213.63 L1363.09 1213.63 L1363.68 1213.63 L1364.26 1213.63 L1364.85 1213.63 L1365.43 1213.63 L1366.02 1213.63 L1366.61 1213.63 L1367.19 1213.63 L1367.78 1213.63 L1368.37 1213.63 L1368.95 1213.63 L1369.54 1213.63 L1370.13 1213.63 L1370.71 1213.63 L1371.3 1213.63 L1371.88 1213.63 L1372.47 1213.63 L1373.06 1213.63 L1373.64 1213.63 L1374.23 1213.63 L1374.82 1213.63 L1375.4 1213.63 L1375.99 1213.63 L1376.58 1213.63 L1377.16 1213.63 L1377.75 1213.63 L1378.34 1213.63 L1378.92 1213.63 L1379.51 1213.63 L1380.09 1213.63 L1380.68 1213.63 L1381.27 1213.63 L1381.85 1213.63 L1382.44 1213.63 L1383.03 1213.63 L1383.61 1213.63 L1384.2 1213.63 L1384.79 1213.63 L1385.37 1213.63 L1385.96 1213.63 L1386.55 1213.63 L1387.13 1213.63 L1387.72 1213.63 L1388.3 1213.63 L1388.89 1213.63 L1389.48 1213.63 L1390.06 1213.63 L1390.65 1213.63 L1391.24 1213.63 L1391.82 1213.63 L1392.41 1213.63 L1393 1213.63 L1393.58 1213.63 L1394.17 1213.63 L1394.75 1213.63 L1395.34 1213.63 L1395.93 1213.63 L1396.51 1213.63 L1397.1 1213.63 L1397.69 1213.63 L1398.27 1213.63 L1398.86 1213.63 L1399.45 1213.63 L1400.03 1213.63 L1400.62 1213.63 L1401.21 1213.63 L1401.79 1213.63 L1402.38 1213.63 L1402.96 1213.63 L1403.55 1213.63 L1404.14 1213.63 L1404.72 1213.63 L1405.31 1213.63 L1405.9 1213.63 L1406.48 1213.63 L1407.07 1213.63 L1407.66 1213.63 L1408.24 1213.63 L1408.83 1213.63 L1409.42 1213.63 L1410 1213.63 L1410.59 1213.63 L1411.17 1213.63 L1411.76 1213.63 L1412.35 1213.63 L1412.93 1213.63 L1413.52 1213.63 L1414.11 1213.63 L1414.69 1213.63 L1415.28 1213.63 L1415.87 1213.63 L1416.45 1213.63 L1417.04 1213.63 L1417.63 1213.63 L1418.21 1213.63 L1418.8 1213.63 L1419.38 1213.63 L1419.97 1213.63 L1420.56 1213.63 L1421.14 1213.63 L1421.73 1213.63 L1422.32 1213.63 L1422.9 1213.63 L1423.49 1213.63 L1424.08 1213.63 L1424.66 1213.63 L1425.25 1213.63 L1425.83 1213.63 L1426.42 1213.63 L1427.01 1213.63 L1427.59 1213.63 L1428.18 1213.63 L1428.77 1213.63 L1429.35 1213.63 L1429.94 1213.63 L1430.53 1213.63 L1431.11 1213.63 L1431.7 1213.63 L1432.29 1213.63 L1432.87 1213.63 L1433.46 1213.63 L1434.04 1213.63 L1434.63 1213.63 L1435.22 1213.63 L1435.8 1213.63 L1436.39 1213.63 L1436.98 1213.63 L1437.56 1213.63 L1438.15 1213.63 L1438.74 1213.63 L1439.32 1213.63 L1439.91 1213.63 L1440.5 1213.63 L1441.08 1213.63 L1441.67 1213.63 L1442.25 1213.63 L1442.84 1213.63 L1443.43 1213.63 L1444.01 1213.63 L1444.6 1213.63 L1445.19 1213.63 L1445.77 1213.63 L1446.36 1213.63 L1446.95 1213.63 L1447.53 1213.63 L1448.12 1213.63 L1448.7 1213.63 L1449.29 1213.63 L1449.88 1213.63 L1450.46 1213.63 L1451.05 1213.63 L1451.64 1213.63 L1452.22 1213.63 L1452.81 1213.63 L1453.4 1213.63 L1453.98 1213.63 L1454.57 1213.63 L1455.16 1213.63 L1455.74 1213.63 L1456.33 1213.63 L1456.91 1213.63 L1457.5 1213.63 L1458.09 1213.63 L1458.67 1213.63 L1459.26 1213.63 L1459.85 1213.63 L1460.43 1213.63 L1461.02 1213.63 L1461.61 1213.63 L1462.19 1213.63 L1462.78 1213.63 L1463.37 1213.63 L1463.95 1213.63 L1464.54 1213.63 L1465.12 1213.63 L1465.71 1213.63 L1466.3 1213.63 L1466.88 1213.63 L1467.47 1213.63 L1468.06 1213.63 L1468.64 1213.63 L1469.23 1213.63 L1469.82 1213.63 L1470.4 1213.63 L1470.99 1213.63 L1471.57 1213.63 L1472.16 1213.63 L1472.75 1213.63 L1473.33 1213.63 L1473.92 1213.63 L1474.51 1213.63 L1475.09 1213.63 L1475.68 1213.63 L1476.27 1213.63 L1476.85 1213.63 L1477.44 1213.63 L1478.03 1213.63 L1478.61 1213.63 L1479.2 1213.63 L1479.78 1213.63 L1480.37 1213.63 L1480.96 1213.63 L1481.54 1213.63 L1482.13 1213.63 L1482.72 1213.63 L1483.3 1213.63 L1483.89 1213.63 L1484.48 1213.63 L1485.06 1213.63 L1485.65 1213.63 L1486.24 1213.63 L1486.82 1213.63 L1487.41 1213.63 L1487.99 1213.63 L1488.58 1213.63 L1489.17 1213.63 L1489.75 1213.63 L1490.34 1213.63 L1490.93 1213.63 L1491.51 1213.63 L1492.1 1213.63 L1492.69 1213.63 L1493.27 1213.63 L1493.86 1213.63 L1494.45 1213.63 L1495.03 1213.63 L1495.62 1213.63 L1496.2 1213.63 L1496.79 1213.63 L1497.38 1213.63 L1497.96 1213.63 L1498.55 1213.63 L1499.14 1213.63 L1499.72 1213.63 L1500.31 1213.63 L1500.9 1213.63 L1501.48 1213.63 L1502.07 1213.63 L1502.65 1213.63 L1503.24 1213.63 L1503.83 1213.63 L1504.41 1213.63 L1505 1213.63 L1505.59 1213.63 L1506.17 1213.63 L1506.76 1213.63 L1507.35 1213.63 L1507.93 1213.63 L1508.52 1213.63 L1509.11 1213.63 L1509.69 1213.63 L1510.28 1213.63 L1510.86 1213.63 L1511.45 1213.63 L1512.04 1213.63 L1512.62 1213.63 L1513.21 1213.63 L1513.8 1213.63 L1514.38 1213.63 L1514.97 1213.63 L1515.56 1213.63 L1516.14 1213.63 L1516.73 1213.63 L1517.32 1213.63 L1517.9 1213.63 L1518.49 1213.63 L1519.07 1213.63 L1519.66 1213.63 L1520.25 1213.63 L1520.83 1213.63 L1521.42 1213.63 L1522.01 1213.63 L1522.59 1213.63 L1523.18 1213.63 L1523.77 1213.63 L1524.35 1213.63 L1524.94 1213.63 L1525.52 1213.63 L1526.11 1213.63 L1526.7 1213.63 L1527.28 1213.63 L1527.87 1213.63 L1528.46 1213.63 L1529.04 1213.63 L1529.63 1213.63 L1530.22 1213.63 L1530.8 1213.63 L1531.39 1213.63 L1531.98 1213.63 L1532.56 1213.63 L1533.15 1213.63 L1533.73 1213.63 L1534.32 1213.63 L1534.91 1213.63 L1535.49 1213.63 L1536.08 1213.63 L1536.67 1213.63 L1537.25 1213.63 L1537.84 1213.63 L1538.43 1213.63 L1539.01 1213.63 L1539.6 1213.63 L1540.19 1213.63 L1540.77 1213.63 L1541.36 1213.63 L1541.94 1213.63 L1542.53 1213.63 L1543.12 1213.63 L1543.7 1213.63 L1544.29 1213.63 L1544.88 1213.63 L1545.46 1213.63 L1546.05 1213.63 L1546.64 1213.63 L1547.22 1213.63 L1547.81 1213.63 L1548.4 1213.63 L1548.98 1213.63 L1549.57 1213.63 L1550.15 1213.63 L1550.74 1213.63 L1551.33 1213.63 L1551.91 1213.63 L1552.5 1213.63 L1553.09 1213.63 L1553.67 1213.63 L1554.26 1213.63 L1554.85 1213.63 L1555.43 1213.63 L1556.02 1213.63 L1556.6 1213.63 L1557.19 1213.63 L1557.78 1213.63 L1558.36 1213.63 L1558.95 1213.63 L1559.54 1213.63 L1560.12 1213.63 L1560.71 1213.63 L1561.3 1213.63 L1561.88 1213.63 L1562.47 1213.63 L1563.06 1213.63 L1563.64 1213.63 L1564.23 1213.63 L1564.81 1213.63 L1565.4 1213.63 L1565.99 1213.63 L1566.57 1213.63 L1567.16 1213.63 L1567.75 1213.63 L1568.33 1213.63 L1568.92 1213.63 L1569.51 1213.63 L1570.09 1213.63 L1570.68 1213.63 L1571.27 1213.63 L1571.85 1213.63 L1572.44 1213.63 L1573.02 1213.63 L1573.61 1213.63 L1574.2 1213.63 L1574.78 1213.63 L1575.37 1213.63 L1575.96 1213.63 L1576.54 1213.63 L1577.13 1213.63 L1577.72 1213.63 L1578.3 1213.63 L1578.89 1213.63 L1579.47 1213.63 L1580.06 1213.63 L1580.65 1213.63 L1581.23 1213.63 L1581.82 1213.63 L1582.41 1213.63 L1582.99 1213.63 L1583.58 1213.63 L1584.17 1213.63 L1584.75 1213.63 L1585.34 1213.63 L1585.93 1213.63 L1586.51 1213.63 L1587.1 1213.63 L1587.68 1213.63 L1588.27 1213.63 L1588.86 1213.63 L1589.44 1213.63 L1590.03 1213.63 L1590.62 1213.63 L1591.2 1213.63 L1591.79 1213.63 L1592.38 1213.63 L1592.96 1213.63 L1593.55 1213.63 L1594.14 1213.63 L1594.72 1213.63 L1595.31 1213.63 L1595.89 1213.63 L1596.48 1213.63 L1597.07 1213.63 L1597.65 1213.63 L1598.24 1213.63 L1598.83 1213.63 L1599.41 1213.63 L1600 1213.63 L1600.59 1213.63 L1601.17 1213.63 L1601.76 1213.63 L1602.34 1213.63 L1602.93 1213.63 L1603.52 1213.63 L1604.1 1213.63 L1604.69 1213.63 L1605.28 1213.63 L1605.86 1213.63 L1606.45 1213.63 L1607.04 1213.63 L1607.62 1213.63 L1608.21 1213.63 L1608.8 1213.63 L1609.38 1213.63 L1609.97 1213.63 L1610.55 1213.63 L1611.14 1213.63 L1611.73 1213.63 L1612.31 1213.63 L1612.9 1213.63 L1613.49 1213.63 L1614.07 1213.63 L1614.66 1213.63 L1615.25 1213.63 L1615.83 1213.63 L1616.42 1213.63 L1617.01 1213.63 L1617.59 1213.63 L1618.18 1213.63 L1618.76 1213.63 L1619.35 1213.63 L1619.94 1213.63 L1620.52 1213.63 L1621.11 1213.63 L1621.7 1213.63 L1622.28 1213.63 L1622.87 1213.63 L1623.46 1213.63 L1624.04 1213.63 L1624.63 1213.63 L1625.22 1213.63 L1625.8 1213.63 L1626.39 1213.63 L1626.97 1213.63 L1627.56 1213.63 L1628.15 1213.63 L1628.73 1213.63 L1629.32 1213.63 L1629.91 1213.63 L1630.49 1213.63 L1631.08 1213.63 L1631.67 1213.63 L1632.25 1213.63 L1632.84 1213.63 L1633.42 1213.63 L1634.01 1213.63 L1634.6 1213.63 L1635.18 1213.63 L1635.77 1213.63 L1636.36 1213.63 L1636.94 1213.63 L1637.53 1213.63 L1638.12 1213.63 L1638.7 1213.63 L1639.29 1213.63 L1639.88 1213.63 L1640.46 1213.63 L1641.05 1213.63 L1641.63 1213.63 L1642.22 1213.63 L1642.81 1213.63 L1643.39 1213.63 L1643.98 1213.63 L1644.57 1213.63 L1645.15 1213.63 L1645.74 1213.63 L1646.33 1213.63 L1646.91 1213.63 L1647.5 1213.63 L1648.09 1213.63 L1648.67 1213.63 L1649.26 1213.63 L1649.84 1213.63 L1650.43 1213.63 L1651.02 1213.63 L1651.6 1213.63 L1652.19 1213.63 L1652.78 1213.63 L1653.36 1213.63 L1653.95 1213.63 L1654.54 1213.63 L1655.12 1213.63 L1655.71 1213.63 L1656.29 1213.63 L1656.88 1213.63 L1657.47 1213.63 L1658.05 1213.63 L1658.64 1213.63 L1659.23 1213.63 L1659.81 1213.63 L1660.4 1213.63 L1660.99 1213.63 L1661.57 1213.63 L1662.16 1213.63 L1662.75 1213.63 L1663.33 1213.63 L1663.92 1213.63 L1664.5 1213.63 L1665.09 1213.63 L1665.68 1213.63 L1666.26 1213.63 L1666.85 1213.63 L1667.44 1213.63 L1668.02 1213.63 L1668.61 1213.63 L1669.2 1213.63 L1669.78 1213.63 L1670.37 1213.63 L1670.96 1213.63 L1671.54 1213.63 L1672.13 1213.63 L1672.71 1213.63 L1673.3 1213.63 L1673.89 1213.63 L1674.47 1213.63 L1675.06 1213.63 L1675.65 1213.63 L1676.23 1213.63 L1676.82 1213.63 L1677.41 1213.63 L1677.99 1213.63 L1678.58 1213.63 L1679.17 1213.63 L1679.75 1213.63 L1680.34 1213.63 L1680.92 1213.63 L1681.51 1213.63 L1682.1 1213.63 L1682.68 1213.63 L1683.27 1213.63 L1683.86 1213.63 L1684.44 1213.63 L1685.03 1213.63 L1685.62 1213.63 L1686.2 1213.63 L1686.79 1213.63 L1687.37 1213.63 L1687.96 1213.63 L1688.55 1213.63 L1689.13 1213.63 L1689.72 1213.63 L1690.31 1213.63 L1690.89 1213.63 L1691.48 1213.63 L1692.07 1213.63 L1692.65 1213.63 L1693.24 1213.63 L1693.83 1213.63 L1694.41 1213.63 L1695 1213.63 L1695.58 1213.63 L1696.17 1213.63 L1696.76 1213.63 L1697.34 1213.63 L1697.93 1213.63 L1698.52 1213.63 L1699.1 1213.63 L1699.69 1213.63 L1700.28 1213.63 L1700.86 1213.63 L1701.45 1213.63 L1702.04 1213.63 L1702.62 1213.63 L1703.21 1213.63 L1703.79 1213.63 L1704.38 1213.63 L1704.97 1213.63 L1705.55 1213.63 L1706.14 1213.63 L1706.73 1213.63 L1707.31 1213.63 L1707.9 1213.63 L1708.49 1213.63 L1709.07 1213.63 L1709.66 1213.63 L1710.24 1213.63 L1710.83 1213.63 L1711.42 1213.63 L1712 1213.63 L1712.59 1213.63 L1713.18 1213.63 L1713.76 1213.63 L1714.35 1213.63 L1714.94 1213.63 L1715.52 1213.63 L1716.11 1213.63 L1716.7 1213.63 L1717.28 1213.63 L1717.87 1213.63 L1718.45 1213.63 L1719.04 1213.63 L1719.63 1213.63 L1720.21 1213.63 L1720.8 1213.63 L1721.39 1213.63 L1721.97 1213.63 L1722.56 1213.63 L1723.15 1213.63 L1723.73 1213.63 L1724.32 1213.63 L1724.91 1213.63 L1725.49 1213.63 L1726.08 1213.63 L1726.66 1213.63 L1727.25 1213.63 L1727.84 1213.63 L1728.42 1213.63 L1729.01 1213.63 L1729.6 1213.63 L1730.18 1213.63 L1730.77 1213.63 L1731.36 1213.63 L1731.94 1213.63 L1732.53 1213.63 L1733.11 1213.63 L1733.7 1213.63 L1734.29 1213.63 L1734.87 1213.63 L1735.46 1213.63 L1736.05 1213.63 L1736.63 1213.63 L1737.22 1213.63 L1737.81 1213.63 L1738.39 1213.63 L1738.98 1213.63 L1739.57 1213.63 L1740.15 1213.63 L1740.74 1213.63 L1741.32 1213.63 L1741.91 1213.63 L1742.5 1213.63 L1743.08 1213.63 L1743.67 1213.63 L1744.26 1213.63 L1744.84 1213.63 L1745.43 1213.63 L1746.02 1213.63 L1746.6 1213.63 L1747.19 1213.63 L1747.78 1213.63 L1748.36 1213.63 L1748.95 1213.63 L1749.53 1213.63 L1750.12 1213.63 L1750.71 1213.63 L1751.29 1213.63 L1751.88 1213.63 L1752.47 1213.63 L1753.05 1213.63 L1753.64 1213.63 L1754.23 1213.63 L1754.81 1213.63 L1755.4 1213.63 L1755.99 1213.63 L1756.57 1213.63 L1757.16 1213.63 L1757.74 1213.63 L1758.33 1213.63 L1758.92 1213.63 L1759.5 1213.63 L1760.09 1213.63 L1760.68 1213.63 L1761.26 1213.63 L1761.85 1213.63 L1762.44 1213.63 L1763.02 1213.63 L1763.61 1213.63 L1764.19 1213.63 L1764.78 1213.63 L1765.37 1213.63 L1765.95 1213.63 L1766.54 1213.63 L1767.13 1213.63 L1767.71 1213.63 L1768.3 1213.63 L1768.89 1213.63 L1769.47 1213.63 L1770.06 1213.63 L1770.65 1213.63 L1771.23 1213.63 L1771.82 1213.63 L1772.4 1213.63 L1772.99 1213.63 L1773.58 1213.63 L1774.16 1213.63 L1774.75 1213.63 L1775.34 1213.63 L1775.92 1213.63 L1776.51 1213.63 L1777.1 1213.63 L1777.68 1213.63 L1778.27 1213.63 L1778.86 1213.63 L1779.44 1213.63 L1780.03 1213.63 L1780.61 1213.63 L1781.2 1213.63 L1781.79 1213.63 L1782.37 1213.63 L1782.96 1213.63 L1783.55 1213.63 L1784.13 1213.63 L1784.72 1213.63 L1785.31 1213.63 L1785.89 1213.63 L1786.48 1213.63 L1787.06 1213.63 L1787.65 1213.63 L1788.24 1213.63 L1788.82 1213.63 L1789.41 1213.63 L1790 1213.63 L1790.58 1213.63 L1791.17 1213.63 L1791.76 1213.63 L1792.34 1213.63 L1792.93 1213.63 L1793.52 1213.63 L1794.1 1213.63 L1794.69 1213.63 L1795.27 1213.63 L1795.86 1213.63 L1796.45 1213.63 L1797.03 1213.63 L1797.62 1213.63 L1798.21 1213.63 L1798.79 1213.63 L1799.38 1213.63 L1799.97 1213.63 L1800.55 1213.63 L1801.14 1213.63 L1801.73 1213.63 L1802.31 1213.63 L1802.9 1213.63 L1803.48 1213.63 L1804.07 1213.63 L1804.66 1213.63 L1805.24 1213.63 L1805.83 1213.63 L1806.42 1213.63 L1807 1213.63 L1807.59 1213.63 L1808.18 1213.63 L1808.76 1213.63 L1809.35 1213.63 L1809.94 1213.63 L1810.52 1213.63 L1811.11 1213.63 L1811.69 1213.63 L1812.28 1213.63 L1812.87 1213.63 L1813.45 1213.63 L1814.04 1213.63 L1814.63 1213.63 L1815.21 1213.63 L1815.8 1213.63 L1816.39 1213.63 L1816.97 1213.63 L1817.56 1213.63 L1818.14 1213.63 L1818.73 1213.63 L1819.32 1213.63 L1819.9 1213.63 L1820.49 1213.63 L1821.08 1213.63 L1821.66 1213.63 L1822.25 1213.63 L1822.84 1213.63 L1823.42 1213.63 L1824.01 1213.63 L1824.6 1213.63 L1825.18 1213.63 L1825.77 1213.63 L1826.35 1213.63 L1826.94 1213.63 L1827.53 1213.63 L1828.11 1213.63 L1828.7 1213.63 L1829.29 1213.63 L1829.87 1213.63 L1830.46 1213.63 L1831.05 1213.63 L1831.63 1213.63 L1832.22 1213.63 L1832.81 1213.63 L1833.39 1213.63 L1833.98 1213.63 L1834.56 1213.63 L1835.15 1213.63 L1835.74 1213.63 L1836.32 1213.63 L1836.91 1213.63 L1837.5 1213.63 L1838.08 1213.63 L1838.67 1213.63 L1839.26 1213.63 L1839.84 1213.63 L1840.43 1213.63 L1841.01 1213.63 L1841.6 1213.63 L1842.19 1213.63 L1842.77 1213.63 L1843.36 1213.63 L1843.95 1213.63 L1844.53 1213.63 L1845.12 1213.63 L1845.71 1213.63 L1846.29 1213.63 L1846.88 1213.63 L1847.47 1213.63 L1848.05 1213.63 L1848.64 1213.63 L1849.22 1213.63 L1849.81 1213.63 L1850.4 1213.63 L1850.98 1213.63 L1851.57 1213.63 L1852.16 1213.63 L1852.74 1213.63 L1853.33 1213.63 L1853.92 1213.63 L1854.5 1213.63 L1855.09 1213.63 L1855.68 1213.63 L1856.26 1213.63 L1856.85 1213.63 L1857.43 1213.63 L1858.02 1213.63 L1858.61 1213.63 L1859.19 1213.63 L1859.78 1213.63 L1860.37 1213.63 L1860.95 1213.63 L1861.54 1213.63 L1862.13 1213.63 L1862.71 1213.63 L1863.3 1213.63 L1863.88 1213.63 L1864.47 1213.63 L1865.06 1213.63 L1865.64 1213.63 L1866.23 1213.63 L1866.82 1213.63 L1867.4 1213.63 L1867.99 1213.63 L1868.58 1213.63 L1869.16 1213.63 L1869.75 1213.63 L1870.34 1213.63 L1870.92 1213.63 L1871.51 1213.63 L1872.09 1213.63 L1872.68 1213.63 L1873.27 1213.63 L1873.85 1213.63 L1874.44 1213.63 L1875.03 1213.63 L1875.61 1213.63 L1876.2 1213.63 L1876.79 1213.63 L1877.37 1213.63 L1877.96 1213.63 L1878.55 1213.63 L1879.13 1213.63 L1879.72 1213.63 L1880.3 1213.63 L1880.89 1213.63 L1881.48 1213.63 L1882.06 1213.63 L1882.65 1213.63 L1883.24 1213.63 L1883.82 1213.63 L1884.41 1213.63 L1885 1213.63 L1885.58 1213.63 L1886.17 1213.63 L1886.76 1213.63 L1887.34 1213.63 L1887.93 1213.63 L1888.51 1213.63 L1889.1 1213.63 L1889.69 1213.63 L1890.27 1213.63 L1890.86 1213.63 L1891.45 1213.63 L1892.03 1213.63 L1892.62 1213.63 L1893.21 1213.63 L1893.79 1213.63 L1894.38 1213.63 L1894.96 1213.63 L1895.55 1213.63 L1896.14 1213.63 L1896.72 1213.63 L1897.31 1213.63 L1897.9 1213.63 L1898.48 1213.63 L1899.07 1213.63 L1899.66 1213.63 L1900.24 1213.63 L1900.83 1213.63 L1901.42 1213.63 L1902 1213.63 L1902.59 1213.63 L1903.17 1213.63 L1903.76 1213.63 L1904.35 1213.63 L1904.93 1213.63 L1905.52 1213.63 L1906.11 1213.63 L1906.69 1213.63 L1907.28 1213.63 L1907.87 1213.63 L1908.45 1213.63 L1909.04 1213.63 L1909.63 1213.63 L1910.21 1213.63 L1910.8 1213.63 L1911.38 1213.63 L1911.97 1213.63 L1912.56 1213.63 L1913.14 1213.63 L1913.73 1213.63 L1914.32 1213.63 L1914.9 1213.63 L1915.49 1213.63 L1916.08 1213.63 L1916.66 1213.63 L1917.25 1213.63 L1917.83 1213.63 L1918.42 1213.63 L1919.01 1213.63 L1919.59 1213.63 L1920.18 1213.63 L1920.77 1213.63 L1921.35 1213.63 L1921.94 1213.63 L1922.53 1213.63 L1923.11 1213.63 L1923.7 1213.63 L1924.29 1213.63 L1924.87 1213.63 L1925.46 1213.63 L1926.04 1213.63 L1926.63 1213.63 L1927.22 1213.63 L1927.8 1213.63 L1928.39 1213.63 L1928.98 1213.63 L1929.56 1213.63 L1930.15 1213.63 L1930.74 1213.63 L1931.32 1213.63 L1931.91 1213.63 L1932.5 1213.63 L1933.08 1213.63 L1933.67 1213.63 L1934.25 1213.63 L1934.84 1213.63 L1935.43 1213.63 L1936.01 1213.63 L1936.6 1213.63 L1937.19 1213.63 L1937.77 1213.63 L1938.36 1213.63 L1938.95 1213.63 L1939.53 1213.63 L1940.12 1213.63 L1940.71 1213.63 L1941.29 1213.63 L1941.88 1213.63 L1942.46 1213.63 L1943.05 1213.63 L1943.64 1213.63 L1944.22 1213.63 L1944.81 1213.63 L1945.4 1213.63 L1945.98 1213.63 L1946.57 1213.63 L1947.16 1213.63 L1947.74 1213.63 L1948.33 1213.63 L1948.91 1213.63 L1949.5 1213.63 L1950.09 1213.63 L1950.67 1213.63 L1951.26 1213.63 L1951.85 1213.63 L1952.43 1213.63 L1953.02 1213.63 L1953.61 1213.63 L1954.19 1213.63 L1954.78 1213.63 L1955.37 1213.63 L1955.95 1213.63 L1956.54 1213.63 L1957.12 1213.63 L1957.71 1213.63 L1958.3 1213.63 L1958.88 1213.63 L1959.47 1213.63 L1960.06 1213.63 L1960.64 1213.63 L1961.23 1213.63 L1961.82 1213.63 L1962.4 1213.63 L1962.99 1213.63 L1963.58 1213.63 L1964.16 1213.63 L1964.75 1213.63 L1965.33 1213.63 L1965.92 1213.63 L1966.51 1213.63 L1967.09 1213.63 L1967.68 1213.63 L1968.27 1213.63 L1968.85 1213.63 L1969.44 1213.63 L1970.03 1213.63 L1970.61 1213.63 L1971.2 1213.63 L1971.78 1213.63 L1972.37 1213.63 L1972.96 1213.63 L1973.54 1213.63 L1974.13 1213.63 L1974.72 1213.63 L1975.3 1213.63 L1975.89 1213.63 L1976.48 1213.63 L1977.06 1213.63 L1977.65 1213.63 L1978.24 1213.63 L1978.82 1213.63 L1979.41 1213.63 L1979.99 1213.63 L1980.58 1213.63 L1981.17 1213.63 L1981.75 1213.63 L1982.34 1213.63 L1982.93 1213.63 L1983.51 1213.63 L1984.1 1213.63 L1984.69 1213.63 L1985.27 1213.63 L1985.86 1213.63 L1986.45 1213.63 L1987.03 1213.63 L1987.62 1213.63 L1988.2 1213.63 L1988.79 1213.63 L1989.38 1213.63 L1989.96 1213.63 L1990.55 1213.63 L1991.14 1213.63 L1991.72 1213.63 L1992.31 1213.63 L1992.9 1213.63 L1993.48 1213.63 L1994.07 1213.63 L1994.65 1213.63 L1995.24 1213.63 L1995.83 1213.63 L1996.41 1213.63 L1997 1213.63 L1997.59 1213.63 L1998.17 1213.63 L1998.76 1213.63 L1999.35 1213.63 L1999.93 1213.63 L2000.52 1213.63 L2001.11 1213.63 L2001.69 1213.63 L2002.28 1213.63 L2002.86 1213.63 L2003.45 1213.63 L2004.04 1213.63 L2004.62 1213.63 L2005.21 1213.63 L2005.8 1213.63 L2006.38 1213.63 L2006.97 1213.63 L2007.56 1213.63 L2008.14 1213.63 L2008.73 1213.63 L2009.32 1213.63 L2009.9 1213.63 L2010.49 1213.63 L2011.07 1213.63 L2011.66 1213.63 L2012.25 1213.63 L2012.83 1213.63 L2013.42 1213.63 L2014.01 1213.63 L2014.59 1213.63 L2015.18 1213.63 L2015.77 1213.63 L2016.35 1213.63 L2016.94 1213.63 L2017.53 1213.63 L2018.11 1213.63 L2018.7 1213.63 L2019.28 1213.63 L2019.87 1213.63 L2020.46 1213.63 L2021.04 1213.63 L2021.63 1213.63 L2022.22 1213.63 L2022.8 1213.63 L2023.39 1213.63 L2023.98 1213.63 L2024.56 1213.63 L2025.15 1213.63 L2025.73 1213.63 L2026.32 1213.63 L2026.91 1213.63 L2027.49 1213.63 L2028.08 1213.63 L2028.67 1213.63 L2029.25 1213.63 L2029.84 1213.63 L2030.43 1213.63 L2031.01 1213.63 L2031.6 1213.63 L2032.19 1213.63 L2032.77 1213.63 L2033.36 1213.63 L2033.94 1213.63 L2034.53 1213.63 L2035.12 1213.63 L2035.7 1213.63 L2036.29 1213.63 L2036.88 1213.63 L2037.46 1213.63 L2038.05 1213.63 L2038.64 1213.63 L2039.22 1213.63 L2039.81 1213.63 L2040.4 1213.63 L2040.98 1213.63 L2041.57 1213.63 L2042.15 1213.63 L2042.74 1213.63 L2043.33 1213.63 L2043.91 1213.63 L2044.5 1213.63 L2045.09 1213.63 L2045.67 1213.63 L2046.26 1213.63 L2046.85 1213.63 L2047.43 1213.63 L2048.02 1213.63 L2048.6 1213.63 L2049.19 1213.63 L2049.78 1213.63 L2050.36 1213.63 L2050.95 1213.63 L2051.54 1213.63 L2052.12 1213.63 L2052.71 1213.63 L2053.3 1213.63 L2053.88 1213.63 L2054.47 1213.63 L2055.06 1213.63 L2055.64 1213.63 L2056.23 1213.63 L2056.81 1213.63 L2057.4 1213.63 L2057.99 1213.63 L2058.57 1213.63 L2059.16 1213.63 L2059.75 1213.63 L2060.33 1213.63 L2060.92 1213.63 L2061.51 1213.63 L2062.09 1213.63 L2062.68 1213.63 L2063.27 1213.63 L2063.85 1213.63 L2064.44 1213.63 L2065.02 1213.63 L2065.61 1213.63 L2066.2 1213.63 L2066.78 1213.63 L2067.37 1213.63 L2067.96 1213.63 L2068.54 1213.63 L2069.13 1213.63 L2069.72 1213.63 L2070.3 1213.63 L2070.89 1213.63 L2071.48 1213.63 L2072.06 1213.63 L2072.65 1213.63 L2073.23 1213.63 L2073.82 1213.63 L2074.41 1213.63 L2074.99 1213.63 L2075.58 1213.63 L2076.17 1213.63 L2076.75 1213.63 L2077.34 1213.63 L2077.93 1213.63 L2078.51 1213.63 L2079.1 1213.63 L2079.68 1213.63 L2080.27 1213.63 L2080.86 1213.63 L2081.44 1213.63 L2082.03 1213.63 L2082.62 1213.63 L2083.2 1213.63 L2083.79 1213.63 L2084.38 1213.63 L2084.96 1213.63 L2085.55 1213.63 L2086.14 1213.63 L2086.72 1213.63 L2087.31 1213.63 L2087.89 1213.63 L2088.48 1213.63 L2089.07 1213.63 L2089.65 1213.63 L2090.24 1213.63 L2090.83 1213.63 L2091.41 1213.63 L2092 1213.63 L2092.59 1213.63 L2093.17 1213.63 L2093.76 1213.63 L2094.35 1213.63 L2094.93 1213.63 L2095.52 1213.63 L2096.1 1213.63 L2096.69 1213.63 L2097.28 1213.63 L2097.86 1213.63 L2098.45 1213.63 L2099.04 1213.63 L2099.62 1213.63 L2100.21 1213.63 L2100.8 1213.63 L2101.38 1213.63 L2101.97 1213.63 L2102.55 1213.63 L2103.14 1213.63 L2103.73 1213.63 L2104.31 1213.63 L2104.9 1213.63 L2105.49 1213.63 L2106.07 1213.63 L2106.66 1213.63 L2107.25 1213.63 L2107.83 1213.63 L2108.42 1213.63 L2109.01 1213.63 L2109.59 1213.63 L2110.18 1213.63 L2110.76 1213.63 L2111.35 1213.63 L2111.94 1213.63 L2112.52 1213.63 L2113.11 1213.63 L2113.7 1213.63 L2114.28 1213.63 L2114.87 1213.63 L2115.46 1213.63 L2116.04 1213.63 L2116.63 1213.63 L2117.22 1213.63 L2117.8 1213.63 L2118.39 1213.63 L2118.97 1213.63 L2119.56 1213.63 L2120.15 1213.63 L2120.73 1213.63 L2121.32 1213.63 L2121.91 1213.63 L2122.49 1213.63 L2123.08 1213.63 L2123.67 1213.63 L2124.25 1213.63 L2124.84 1213.63 L2125.42 1213.63 L2126.01 1213.63 L2126.6 1213.63 L2127.18 1213.63 L2127.77 1213.63 L2128.36 1213.63 L2128.94 1213.63 L2129.53 1213.63 L2130.12 1213.63 L2130.7 1213.63 L2131.29 1213.63 L2131.88 1213.63 L2132.46 1213.63 L2133.05 1213.63 L2133.63 1213.63 L2134.22 1213.63 L2134.81 1213.63 L2135.39 1213.63 L2135.98 1213.63 L2136.57 1213.63 L2137.15 1213.63 L2137.74 1213.63 L2138.33 1213.63 L2138.91 1213.63 L2139.5 1213.63 L2140.09 1213.63 L2140.67 1213.63 L2141.26 1213.63 L2141.84 1213.63 L2142.43 1213.63 L2143.02 1213.63 L2143.6 1213.63 L2144.19 1213.63 L2144.78 1213.63 L2145.36 1213.63 L2145.95 1213.63 L2146.54 1213.63 L2147.12 1213.63 L2147.71 1213.63 L2148.3 1213.63 L2148.88 1213.63 L2149.47 1213.63 L2150.05 1213.63 L2150.64 1213.63 L2151.23 1213.63 L2151.81 1213.63 L2152.4 1213.63 L2152.99 1213.63 L2153.57 1213.63 L2154.16 1213.63 L2154.75 1213.63 L2155.33 1213.63 L2155.92 1213.63 L2156.5 1213.63 L2157.09 1213.63 L2157.68 1213.63 L2158.26 1213.63 L2158.26 1212.84 L2157.68 1212.84 L2157.09 1212.84 L2156.5 1212.84 L2155.92 1212.84 L2155.33 1212.84 L2154.75 1212.84 L2154.16 1212.84 L2153.57 1212.84 L2152.99 1212.84 L2152.4 1212.84 L2151.81 1212.84 L2151.23 1212.84 L2150.64 1212.84 L2150.05 1212.84 L2149.47 1212.84 L2148.88 1212.84 L2148.3 1212.84 L2147.71 1212.84 L2147.12 1212.84 L2146.54 1212.84 L2145.95 1212.84 L2145.36 1212.84 L2144.78 1212.84 L2144.19 1212.84 L2143.6 1212.84 L2143.02 1212.84 L2142.43 1212.84 L2141.84 1212.84 L2141.26 1212.84 L2140.67 1212.84 L2140.09 1212.84 L2139.5 1212.84 L2138.91 1212.84 L2138.33 1212.84 L2137.74 1212.84 L2137.15 1212.84 L2136.57 1212.84 L2135.98 1212.84 L2135.39 1212.84 L2134.81 1212.84 L2134.22 1212.84 L2133.63 1212.84 L2133.05 1212.84 L2132.46 1212.84 L2131.88 1212.84 L2131.29 1212.84 L2130.7 1212.84 L2130.12 1212.84 L2129.53 1212.84 L2128.94 1212.84 L2128.36 1212.84 L2127.77 1212.84 L2127.18 1212.84 L2126.6 1212.84 L2126.01 1212.84 L2125.42 1212.84 L2124.84 1212.84 L2124.25 1212.84 L2123.67 1212.84 L2123.08 1212.84 L2122.49 1212.84 L2121.91 1212.84 L2121.32 1212.84 L2120.73 1212.84 L2120.15 1212.84 L2119.56 1212.84 L2118.97 1212.84 L2118.39 1212.84 L2117.8 1212.84 L2117.22 1212.84 L2116.63 1212.84 L2116.04 1212.84 L2115.46 1212.84 L2114.87 1212.84 L2114.28 1212.84 L2113.7 1212.84 L2113.11 1212.84 L2112.52 1212.84 L2111.94 1212.84 L2111.35 1212.84 L2110.76 1212.84 L2110.18 1212.84 L2109.59 1212.84 L2109.01 1212.84 L2108.42 1212.84 L2107.83 1212.84 L2107.25 1212.84 L2106.66 1212.84 L2106.07 1212.84 L2105.49 1212.84 L2104.9 1212.84 L2104.31 1212.84 L2103.73 1212.84 L2103.14 1212.84 L2102.55 1212.84 L2101.97 1212.84 L2101.38 1212.84 L2100.8 1212.84 L2100.21 1212.84 L2099.62 1212.84 L2099.04 1212.84 L2098.45 1212.84 L2097.86 1212.84 L2097.28 1212.84 L2096.69 1212.84 L2096.1 1212.84 L2095.52 1212.84 L2094.93 1212.84 L2094.35 1212.84 L2093.76 1212.84 L2093.17 1212.84 L2092.59 1212.84 L2092 1212.84 L2091.41 1212.84 L2090.83 1212.84 L2090.24 1212.84 L2089.65 1212.84 L2089.07 1212.84 L2088.48 1212.84 L2087.89 1212.84 L2087.31 1212.84 L2086.72 1212.84 L2086.14 1212.84 L2085.55 1212.84 L2084.96 1212.84 L2084.38 1212.84 L2083.79 1212.84 L2083.2 1212.84 L2082.62 1212.84 L2082.03 1212.84 L2081.44 1212.84 L2080.86 1212.84 L2080.27 1212.84 L2079.68 1212.84 L2079.1 1212.84 L2078.51 1212.84 L2077.93 1212.84 L2077.34 1212.84 L2076.75 1212.84 L2076.17 1212.84 L2075.58 1212.84 L2074.99 1212.84 L2074.41 1212.84 L2073.82 1212.84 L2073.23 1212.84 L2072.65 1212.84 L2072.06 1212.84 L2071.48 1212.84 L2070.89 1212.84 L2070.3 1212.84 L2069.72 1212.84 L2069.13 1212.84 L2068.54 1212.84 L2067.96 1212.84 L2067.37 1212.84 L2066.78 1212.84 L2066.2 1212.84 L2065.61 1212.84 L2065.02 1212.84 L2064.44 1212.84 L2063.85 1212.84 L2063.27 1212.84 L2062.68 1212.84 L2062.09 1212.84 L2061.51 1212.84 L2060.92 1212.84 L2060.33 1212.84 L2059.75 1212.84 L2059.16 1212.84 L2058.57 1212.84 L2057.99 1212.84 L2057.4 1212.84 L2056.81 1212.84 L2056.23 1212.84 L2055.64 1212.84 L2055.06 1212.84 L2054.47 1212.84 L2053.88 1212.84 L2053.3 1212.84 L2052.71 1212.84 L2052.12 1212.84 L2051.54 1212.84 L2050.95 1212.84 L2050.36 1212.84 L2049.78 1212.84 L2049.19 1212.84 L2048.6 1212.84 L2048.02 1212.84 L2047.43 1212.84 L2046.85 1212.84 L2046.26 1212.84 L2045.67 1212.84 L2045.09 1212.84 L2044.5 1212.84 L2043.91 1212.84 L2043.33 1212.84 L2042.74 1212.84 L2042.15 1212.84 L2041.57 1212.84 L2040.98 1212.84 L2040.4 1212.84 L2039.81 1212.84 L2039.22 1212.84 L2038.64 1212.84 L2038.05 1212.84 L2037.46 1212.84 L2036.88 1212.84 L2036.29 1212.84 L2035.7 1212.84 L2035.12 1212.84 L2034.53 1212.84 L2033.94 1212.84 L2033.36 1212.84 L2032.77 1212.84 L2032.19 1212.84 L2031.6 1212.84 L2031.01 1212.84 L2030.43 1212.84 L2029.84 1212.84 L2029.25 1212.84 L2028.67 1212.84 L2028.08 1212.84 L2027.49 1212.84 L2026.91 1212.84 L2026.32 1212.84 L2025.73 1212.84 L2025.15 1212.84 L2024.56 1212.84 L2023.98 1212.84 L2023.39 1212.84 L2022.8 1212.84 L2022.22 1212.84 L2021.63 1212.84 L2021.04 1212.84 L2020.46 1212.84 L2019.87 1212.84 L2019.28 1212.84 L2018.7 1212.84 L2018.11 1212.84 L2017.53 1212.84 L2016.94 1212.84 L2016.35 1212.84 L2015.77 1212.84 L2015.18 1212.84 L2014.59 1212.84 L2014.01 1212.84 L2013.42 1212.84 L2012.83 1212.84 L2012.25 1212.84 L2011.66 1212.84 L2011.07 1212.84 L2010.49 1212.84 L2009.9 1212.84 L2009.32 1212.84 L2008.73 1212.84 L2008.14 1212.84 L2007.56 1212.84 L2006.97 1212.84 L2006.38 1212.84 L2005.8 1212.84 L2005.21 1212.84 L2004.62 1212.84 L2004.04 1212.84 L2003.45 1212.84 L2002.86 1212.84 L2002.28 1212.84 L2001.69 1212.84 L2001.11 1212.84 L2000.52 1212.84 L1999.93 1212.84 L1999.35 1212.84 L1998.76 1212.84 L1998.17 1212.84 L1997.59 1212.84 L1997 1212.84 L1996.41 1212.84 L1995.83 1212.84 L1995.24 1212.84 L1994.65 1212.84 L1994.07 1212.84 L1993.48 1212.84 L1992.9 1212.84 L1992.31 1212.84 L1991.72 1212.84 L1991.14 1212.84 L1990.55 1212.84 L1989.96 1212.84 L1989.38 1212.84 L1988.79 1212.84 L1988.2 1212.84 L1987.62 1212.84 L1987.03 1212.84 L1986.45 1212.84 L1985.86 1212.84 L1985.27 1212.84 L1984.69 1212.84 L1984.1 1212.84 L1983.51 1212.84 L1982.93 1212.84 L1982.34 1212.84 L1981.75 1212.84 L1981.17 1212.84 L1980.58 1212.84 L1979.99 1212.84 L1979.41 1212.84 L1978.82 1212.84 L1978.24 1212.84 L1977.65 1212.84 L1977.06 1212.84 L1976.48 1212.84 L1975.89 1212.84 L1975.3 1212.84 L1974.72 1212.84 L1974.13 1212.84 L1973.54 1212.84 L1972.96 1212.84 L1972.37 1212.84 L1971.78 1212.84 L1971.2 1212.84 L1970.61 1212.84 L1970.03 1212.84 L1969.44 1212.84 L1968.85 1212.84 L1968.27 1212.84 L1967.68 1212.84 L1967.09 1212.84 L1966.51 1212.84 L1965.92 1212.84 L1965.33 1212.84 L1964.75 1212.84 L1964.16 1212.84 L1963.58 1212.84 L1962.99 1212.84 L1962.4 1212.84 L1961.82 1212.84 L1961.23 1212.84 L1960.64 1212.84 L1960.06 1212.84 L1959.47 1212.84 L1958.88 1212.84 L1958.3 1212.84 L1957.71 1212.84 L1957.12 1212.84 L1956.54 1212.84 L1955.95 1212.84 L1955.37 1212.84 L1954.78 1212.84 L1954.19 1212.84 L1953.61 1212.84 L1953.02 1212.84 L1952.43 1212.84 L1951.85 1212.84 L1951.26 1212.84 L1950.67 1212.84 L1950.09 1212.84 L1949.5 1212.84 L1948.91 1212.84 L1948.33 1212.84 L1947.74 1212.84 L1947.16 1212.84 L1946.57 1212.84 L1945.98 1212.84 L1945.4 1212.84 L1944.81 1212.84 L1944.22 1212.84 L1943.64 1212.84 L1943.05 1212.84 L1942.46 1212.84 L1941.88 1212.84 L1941.29 1212.84 L1940.71 1212.84 L1940.12 1212.84 L1939.53 1212.84 L1938.95 1212.84 L1938.36 1212.84 L1937.77 1212.84 L1937.19 1212.84 L1936.6 1212.84 L1936.01 1212.84 L1935.43 1212.84 L1934.84 1212.84 L1934.25 1212.84 L1933.67 1212.84 L1933.08 1212.84 L1932.5 1212.84 L1931.91 1212.84 L1931.32 1212.84 L1930.74 1212.84 L1930.15 1212.84 L1929.56 1212.84 L1928.98 1212.84 L1928.39 1212.84 L1927.8 1212.84 L1927.22 1212.84 L1926.63 1212.84 L1926.04 1212.84 L1925.46 1212.84 L1924.87 1212.84 L1924.29 1212.84 L1923.7 1212.84 L1923.11 1212.84 L1922.53 1212.84 L1921.94 1212.84 L1921.35 1212.84 L1920.77 1212.84 L1920.18 1212.84 L1919.59 1212.84 L1919.01 1212.84 L1918.42 1212.84 L1917.83 1212.84 L1917.25 1212.84 L1916.66 1212.84 L1916.08 1212.84 L1915.49 1212.84 L1914.9 1212.84 L1914.32 1212.84 L1913.73 1212.84 L1913.14 1212.84 L1912.56 1212.84 L1911.97 1212.84 L1911.38 1212.84 L1910.8 1212.84 L1910.21 1212.84 L1909.63 1212.84 L1909.04 1212.84 L1908.45 1212.84 L1907.87 1212.84 L1907.28 1212.84 L1906.69 1212.84 L1906.11 1212.84 L1905.52 1212.84 L1904.93 1212.84 L1904.35 1212.84 L1903.76 1212.84 L1903.17 1212.84 L1902.59 1212.84 L1902 1212.84 L1901.42 1212.84 L1900.83 1212.84 L1900.24 1212.84 L1899.66 1212.84 L1899.07 1212.84 L1898.48 1212.84 L1897.9 1212.84 L1897.31 1212.84 L1896.72 1212.84 L1896.14 1212.84 L1895.55 1212.84 L1894.96 1212.84 L1894.38 1212.84 L1893.79 1212.84 L1893.21 1212.84 L1892.62 1212.84 L1892.03 1212.84 L1891.45 1212.84 L1890.86 1212.84 L1890.27 1212.84 L1889.69 1212.84 L1889.1 1212.84 L1888.51 1212.84 L1887.93 1212.84 L1887.34 1212.84 L1886.76 1212.84 L1886.17 1212.84 L1885.58 1212.84 L1885 1212.84 L1884.41 1212.84 L1883.82 1212.84 L1883.24 1212.84 L1882.65 1212.84 L1882.06 1212.84 L1881.48 1212.84 L1880.89 1212.84 L1880.3 1212.84 L1879.72 1212.84 L1879.13 1212.84 L1878.55 1212.84 L1877.96 1212.84 L1877.37 1212.84 L1876.79 1212.84 L1876.2 1212.84 L1875.61 1212.84 L1875.03 1212.84 L1874.44 1212.84 L1873.85 1212.84 L1873.27 1212.84 L1872.68 1212.84 L1872.09 1212.84 L1871.51 1212.84 L1870.92 1212.84 L1870.34 1212.84 L1869.75 1212.84 L1869.16 1212.84 L1868.58 1212.84 L1867.99 1212.84 L1867.4 1212.84 L1866.82 1212.84 L1866.23 1212.84 L1865.64 1212.84 L1865.06 1212.84 L1864.47 1212.84 L1863.88 1212.84 L1863.3 1212.84 L1862.71 1212.84 L1862.13 1212.84 L1861.54 1212.84 L1860.95 1212.84 L1860.37 1212.84 L1859.78 1212.84 L1859.19 1212.84 L1858.61 1212.84 L1858.02 1212.84 L1857.43 1212.84 L1856.85 1212.84 L1856.26 1212.84 L1855.68 1212.84 L1855.09 1212.84 L1854.5 1212.84 L1853.92 1212.84 L1853.33 1212.84 L1852.74 1212.84 L1852.16 1212.84 L1851.57 1212.84 L1850.98 1212.84 L1850.4 1212.84 L1849.81 1212.84 L1849.22 1212.84 L1848.64 1212.84 L1848.05 1212.84 L1847.47 1212.84 L1846.88 1212.84 L1846.29 1212.84 L1845.71 1212.84 L1845.12 1212.84 L1844.53 1212.84 L1843.95 1212.84 L1843.36 1212.84 L1842.77 1212.84 L1842.19 1212.84 L1841.6 1212.84 L1841.01 1212.84 L1840.43 1212.84 L1839.84 1212.84 L1839.26 1212.84 L1838.67 1212.84 L1838.08 1212.84 L1837.5 1212.84 L1836.91 1212.84 L1836.32 1212.84 L1835.74 1212.84 L1835.15 1212.84 L1834.56 1212.84 L1833.98 1212.84 L1833.39 1212.84 L1832.81 1212.84 L1832.22 1212.84 L1831.63 1212.84 L1831.05 1212.84 L1830.46 1212.84 L1829.87 1212.84 L1829.29 1212.84 L1828.7 1212.84 L1828.11 1212.84 L1827.53 1212.84 L1826.94 1212.84 L1826.35 1212.84 L1825.77 1212.84 L1825.18 1212.84 L1824.6 1212.84 L1824.01 1212.84 L1823.42 1212.84 L1822.84 1212.84 L1822.25 1212.84 L1821.66 1212.84 L1821.08 1212.84 L1820.49 1212.84 L1819.9 1212.84 L1819.32 1212.84 L1818.73 1212.84 L1818.14 1212.84 L1817.56 1212.84 L1816.97 1212.84 L1816.39 1212.84 L1815.8 1212.84 L1815.21 1212.84 L1814.63 1212.84 L1814.04 1212.84 L1813.45 1212.84 L1812.87 1212.84 L1812.28 1212.84 L1811.69 1212.84 L1811.11 1212.84 L1810.52 1212.84 L1809.94 1212.84 L1809.35 1212.84 L1808.76 1212.84 L1808.18 1212.84 L1807.59 1212.84 L1807 1212.84 L1806.42 1212.84 L1805.83 1212.84 L1805.24 1212.84 L1804.66 1212.84 L1804.07 1212.84 L1803.48 1212.84 L1802.9 1212.84 L1802.31 1212.84 L1801.73 1212.84 L1801.14 1212.84 L1800.55 1212.84 L1799.97 1212.84 L1799.38 1212.84 L1798.79 1212.84 L1798.21 1212.84 L1797.62 1212.84 L1797.03 1212.84 L1796.45 1212.84 L1795.86 1212.84 L1795.27 1212.84 L1794.69 1212.84 L1794.1 1212.84 L1793.52 1212.84 L1792.93 1212.84 L1792.34 1212.84 L1791.76 1212.84 L1791.17 1212.84 L1790.58 1212.84 L1790 1212.84 L1789.41 1212.84 L1788.82 1212.84 L1788.24 1212.84 L1787.65 1212.84 L1787.06 1212.84 L1786.48 1212.84 L1785.89 1212.84 L1785.31 1212.84 L1784.72 1212.84 L1784.13 1212.84 L1783.55 1212.84 L1782.96 1212.84 L1782.37 1212.84 L1781.79 1212.84 L1781.2 1212.84 L1780.61 1212.84 L1780.03 1212.84 L1779.44 1212.84 L1778.86 1212.84 L1778.27 1212.84 L1777.68 1212.84 L1777.1 1212.84 L1776.51 1212.84 L1775.92 1212.84 L1775.34 1212.84 L1774.75 1212.84 L1774.16 1212.84 L1773.58 1212.84 L1772.99 1212.84 L1772.4 1212.84 L1771.82 1212.84 L1771.23 1212.84 L1770.65 1212.84 L1770.06 1212.84 L1769.47 1212.84 L1768.89 1212.84 L1768.3 1212.84 L1767.71 1212.84 L1767.13 1212.84 L1766.54 1212.84 L1765.95 1212.84 L1765.37 1212.84 L1764.78 1212.84 L1764.19 1212.84 L1763.61 1212.84 L1763.02 1212.84 L1762.44 1212.84 L1761.85 1212.84 L1761.26 1212.84 L1760.68 1212.84 L1760.09 1212.84 L1759.5 1212.84 L1758.92 1212.84 L1758.33 1212.84 L1757.74 1212.84 L1757.16 1212.84 L1756.57 1212.84 L1755.99 1212.84 L1755.4 1212.84 L1754.81 1212.84 L1754.23 1212.84 L1753.64 1212.84 L1753.05 1212.84 L1752.47 1212.84 L1751.88 1212.84 L1751.29 1212.84 L1750.71 1212.84 L1750.12 1212.84 L1749.53 1212.84 L1748.95 1212.84 L1748.36 1212.84 L1747.78 1212.84 L1747.19 1212.84 L1746.6 1212.84 L1746.02 1212.84 L1745.43 1212.84 L1744.84 1212.84 L1744.26 1212.84 L1743.67 1212.84 L1743.08 1212.84 L1742.5 1212.84 L1741.91 1212.84 L1741.32 1212.84 L1740.74 1212.84 L1740.15 1212.84 L1739.57 1212.84 L1738.98 1212.84 L1738.39 1212.84 L1737.81 1212.84 L1737.22 1212.84 L1736.63 1212.84 L1736.05 1212.84 L1735.46 1212.84 L1734.87 1212.84 L1734.29 1212.84 L1733.7 1212.84 L1733.11 1212.84 L1732.53 1212.84 L1731.94 1212.84 L1731.36 1212.84 L1730.77 1212.84 L1730.18 1212.84 L1729.6 1212.84 L1729.01 1212.84 L1728.42 1212.84 L1727.84 1212.84 L1727.25 1212.84 L1726.66 1212.84 L1726.08 1212.84 L1725.49 1212.84 L1724.91 1212.84 L1724.32 1212.84 L1723.73 1212.84 L1723.15 1212.84 L1722.56 1212.84 L1721.97 1212.84 L1721.39 1212.84 L1720.8 1212.84 L1720.21 1212.84 L1719.63 1212.84 L1719.04 1212.84 L1718.45 1212.84 L1717.87 1212.84 L1717.28 1212.84 L1716.7 1212.84 L1716.11 1212.84 L1715.52 1212.84 L1714.94 1212.84 L1714.35 1212.84 L1713.76 1212.84 L1713.18 1212.84 L1712.59 1212.84 L1712 1212.84 L1711.42 1212.84 L1710.83 1212.84 L1710.24 1212.84 L1709.66 1212.84 L1709.07 1212.84 L1708.49 1212.84 L1707.9 1212.84 L1707.31 1212.84 L1706.73 1212.84 L1706.14 1212.84 L1705.55 1212.84 L1704.97 1212.84 L1704.38 1212.84 L1703.79 1212.84 L1703.21 1212.84 L1702.62 1212.84 L1702.04 1212.84 L1701.45 1212.84 L1700.86 1212.84 L1700.28 1212.84 L1699.69 1212.84 L1699.1 1212.84 L1698.52 1212.84 L1697.93 1212.84 L1697.34 1212.84 L1696.76 1212.84 L1696.17 1212.84 L1695.58 1212.84 L1695 1212.84 L1694.41 1212.84 L1693.83 1212.84 L1693.24 1212.84 L1692.65 1212.84 L1692.07 1212.84 L1691.48 1212.84 L1690.89 1212.84 L1690.31 1212.84 L1689.72 1212.84 L1689.13 1212.84 L1688.55 1212.84 L1687.96 1212.84 L1687.37 1212.84 L1686.79 1212.84 L1686.2 1212.84 L1685.62 1212.84 L1685.03 1212.84 L1684.44 1212.84 L1683.86 1212.84 L1683.27 1212.84 L1682.68 1212.84 L1682.1 1212.84 L1681.51 1212.84 L1680.92 1212.84 L1680.34 1212.84 L1679.75 1212.84 L1679.17 1212.84 L1678.58 1212.84 L1677.99 1212.84 L1677.41 1212.84 L1676.82 1212.84 L1676.23 1212.84 L1675.65 1212.84 L1675.06 1212.84 L1674.47 1212.84 L1673.89 1212.84 L1673.3 1212.84 L1672.71 1212.84 L1672.13 1212.84 L1671.54 1212.84 L1670.96 1212.84 L1670.37 1212.84 L1669.78 1212.84 L1669.2 1212.84 L1668.61 1212.84 L1668.02 1212.84 L1667.44 1212.84 L1666.85 1212.84 L1666.26 1212.84 L1665.68 1212.84 L1665.09 1212.84 L1664.5 1212.84 L1663.92 1212.84 L1663.33 1212.84 L1662.75 1212.84 L1662.16 1212.84 L1661.57 1212.84 L1660.99 1212.84 L1660.4 1212.84 L1659.81 1212.84 L1659.23 1212.84 L1658.64 1212.84 L1658.05 1212.84 L1657.47 1212.84 L1656.88 1212.84 L1656.29 1212.84 L1655.71 1212.84 L1655.12 1212.84 L1654.54 1212.84 L1653.95 1212.84 L1653.36 1212.84 L1652.78 1212.84 L1652.19 1212.84 L1651.6 1212.84 L1651.02 1212.84 L1650.43 1212.84 L1649.84 1212.84 L1649.26 1212.84 L1648.67 1212.84 L1648.09 1212.84 L1647.5 1212.84 L1646.91 1212.84 L1646.33 1212.84 L1645.74 1212.84 L1645.15 1212.84 L1644.57 1212.84 L1643.98 1212.84 L1643.39 1212.84 L1642.81 1212.84 L1642.22 1212.84 L1641.63 1212.84 L1641.05 1212.84 L1640.46 1212.84 L1639.88 1212.84 L1639.29 1212.84 L1638.7 1212.84 L1638.12 1212.84 L1637.53 1212.84 L1636.94 1212.84 L1636.36 1212.84 L1635.77 1212.84 L1635.18 1212.84 L1634.6 1212.84 L1634.01 1212.84 L1633.42 1212.84 L1632.84 1212.84 L1632.25 1212.84 L1631.67 1212.84 L1631.08 1212.84 L1630.49 1212.84 L1629.91 1212.84 L1629.32 1212.84 L1628.73 1212.84 L1628.15 1212.84 L1627.56 1212.84 L1626.97 1212.84 L1626.39 1212.84 L1625.8 1212.84 L1625.22 1212.84 L1624.63 1212.84 L1624.04 1212.84 L1623.46 1212.84 L1622.87 1212.84 L1622.28 1212.84 L1621.7 1212.84 L1621.11 1212.84 L1620.52 1212.84 L1619.94 1212.84 L1619.35 1212.84 L1618.76 1212.84 L1618.18 1212.84 L1617.59 1212.84 L1617.01 1212.84 L1616.42 1212.84 L1615.83 1212.84 L1615.25 1212.84 L1614.66 1212.84 L1614.07 1212.84 L1613.49 1212.84 L1612.9 1212.84 L1612.31 1212.84 L1611.73 1212.84 L1611.14 1212.84 L1610.55 1212.84 L1609.97 1212.84 L1609.38 1212.84 L1608.8 1212.84 L1608.21 1212.84 L1607.62 1212.84 L1607.04 1212.84 L1606.45 1212.84 L1605.86 1212.84 L1605.28 1212.84 L1604.69 1212.84 L1604.1 1212.84 L1603.52 1212.84 L1602.93 1212.84 L1602.34 1212.84 L1601.76 1212.84 L1601.17 1212.84 L1600.59 1212.84 L1600 1212.84 L1599.41 1212.84 L1598.83 1212.84 L1598.24 1212.84 L1597.65 1212.84 L1597.07 1212.84 L1596.48 1212.84 L1595.89 1212.84 L1595.31 1212.84 L1594.72 1212.84 L1594.14 1212.84 L1593.55 1212.84 L1592.96 1212.84 L1592.38 1212.84 L1591.79 1212.84 L1591.2 1212.84 L1590.62 1212.84 L1590.03 1212.84 L1589.44 1212.84 L1588.86 1212.84 L1588.27 1212.84 L1587.68 1212.84 L1587.1 1212.84 L1586.51 1212.84 L1585.93 1212.84 L1585.34 1212.84 L1584.75 1212.84 L1584.17 1212.84 L1583.58 1212.84 L1582.99 1212.84 L1582.41 1212.84 L1581.82 1212.84 L1581.23 1212.84 L1580.65 1212.84 L1580.06 1212.84 L1579.47 1212.84 L1578.89 1212.84 L1578.3 1212.84 L1577.72 1212.84 L1577.13 1212.84 L1576.54 1212.84 L1575.96 1212.84 L1575.37 1212.84 L1574.78 1212.84 L1574.2 1212.84 L1573.61 1212.84 L1573.02 1212.84 L1572.44 1212.84 L1571.85 1212.84 L1571.27 1212.84 L1570.68 1212.84 L1570.09 1212.84 L1569.51 1212.84 L1568.92 1212.84 L1568.33 1212.84 L1567.75 1212.84 L1567.16 1212.84 L1566.57 1212.84 L1565.99 1212.84 L1565.4 1212.84 L1564.81 1212.84 L1564.23 1212.84 L1563.64 1212.84 L1563.06 1212.84 L1562.47 1212.84 L1561.88 1212.84 L1561.3 1212.84 L1560.71 1212.84 L1560.12 1212.84 L1559.54 1212.84 L1558.95 1212.84 L1558.36 1212.84 L1557.78 1212.84 L1557.19 1212.84 L1556.6 1212.84 L1556.02 1212.84 L1555.43 1212.84 L1554.85 1212.84 L1554.26 1212.84 L1553.67 1212.84 L1553.09 1212.84 L1552.5 1212.84 L1551.91 1212.84 L1551.33 1212.84 L1550.74 1212.84 L1550.15 1212.84 L1549.57 1212.84 L1548.98 1212.84 L1548.4 1212.84 L1547.81 1212.84 L1547.22 1212.84 L1546.64 1212.84 L1546.05 1212.84 L1545.46 1212.84 L1544.88 1212.84 L1544.29 1212.84 L1543.7 1212.84 L1543.12 1212.84 L1542.53 1212.84 L1541.94 1212.84 L1541.36 1212.84 L1540.77 1212.84 L1540.19 1212.84 L1539.6 1212.84 L1539.01 1212.84 L1538.43 1212.84 L1537.84 1212.84 L1537.25 1212.84 L1536.67 1212.84 L1536.08 1212.84 L1535.49 1212.84 L1534.91 1212.84 L1534.32 1212.84 L1533.73 1212.84 L1533.15 1212.84 L1532.56 1212.84 L1531.98 1212.84 L1531.39 1212.84 L1530.8 1212.84 L1530.22 1212.84 L1529.63 1212.84 L1529.04 1212.84 L1528.46 1212.84 L1527.87 1212.84 L1527.28 1212.84 L1526.7 1212.84 L1526.11 1212.84 L1525.52 1212.84 L1524.94 1212.84 L1524.35 1212.84 L1523.77 1212.84 L1523.18 1212.84 L1522.59 1212.84 L1522.01 1212.84 L1521.42 1212.84 L1520.83 1212.84 L1520.25 1212.84 L1519.66 1212.84 L1519.07 1212.84 L1518.49 1212.84 L1517.9 1212.84 L1517.32 1212.84 L1516.73 1212.84 L1516.14 1212.84 L1515.56 1212.84 L1514.97 1212.84 L1514.38 1212.84 L1513.8 1212.84 L1513.21 1212.84 L1512.62 1212.84 L1512.04 1212.84 L1511.45 1212.84 L1510.86 1212.84 L1510.28 1212.84 L1509.69 1212.84 L1509.11 1212.84 L1508.52 1212.84 L1507.93 1212.84 L1507.35 1212.84 L1506.76 1212.84 L1506.17 1212.84 L1505.59 1212.84 L1505 1212.84 L1504.41 1212.84 L1503.83 1212.84 L1503.24 1212.84 L1502.65 1212.84 L1502.07 1212.84 L1501.48 1212.84 L1500.9 1212.84 L1500.31 1212.84 L1499.72 1212.84 L1499.14 1212.84 L1498.55 1212.84 L1497.96 1212.84 L1497.38 1212.84 L1496.79 1212.84 L1496.2 1212.84 L1495.62 1212.84 L1495.03 1212.84 L1494.45 1212.84 L1493.86 1212.84 L1493.27 1212.84 L1492.69 1212.84 L1492.1 1212.84 L1491.51 1212.84 L1490.93 1212.84 L1490.34 1212.84 L1489.75 1212.84 L1489.17 1212.84 L1488.58 1212.84 L1487.99 1212.84 L1487.41 1212.84 L1486.82 1212.84 L1486.24 1212.84 L1485.65 1212.84 L1485.06 1212.84 L1484.48 1212.84 L1483.89 1212.84 L1483.3 1212.84 L1482.72 1212.84 L1482.13 1212.84 L1481.54 1212.84 L1480.96 1212.84 L1480.37 1212.84 L1479.78 1212.84 L1479.2 1212.84 L1478.61 1212.84 L1478.03 1212.84 L1477.44 1212.84 L1476.85 1212.84 L1476.27 1212.84 L1475.68 1212.84 L1475.09 1212.84 L1474.51 1212.84 L1473.92 1212.84 L1473.33 1212.84 L1472.75 1212.84 L1472.16 1212.84 L1471.57 1212.84 L1470.99 1212.84 L1470.4 1212.84 L1469.82 1212.84 L1469.23 1212.84 L1468.64 1212.84 L1468.06 1212.84 L1467.47 1212.84 L1466.88 1212.84 L1466.3 1212.84 L1465.71 1212.84 L1465.12 1212.84 L1464.54 1212.84 L1463.95 1212.84 L1463.37 1212.84 L1462.78 1212.84 L1462.19 1212.84 L1461.61 1212.84 L1461.02 1212.84 L1460.43 1212.84 L1459.85 1212.84 L1459.26 1212.84 L1458.67 1212.84 L1458.09 1212.84 L1457.5 1212.84 L1456.91 1212.84 L1456.33 1212.84 L1455.74 1212.84 L1455.16 1212.84 L1454.57 1212.84 L1453.98 1212.84 L1453.4 1212.84 L1452.81 1212.84 L1452.22 1212.84 L1451.64 1212.84 L1451.05 1212.84 L1450.46 1212.84 L1449.88 1212.84 L1449.29 1212.84 L1448.7 1212.84 L1448.12 1212.84 L1447.53 1212.84 L1446.95 1212.84 L1446.36 1212.84 L1445.77 1212.84 L1445.19 1212.84 L1444.6 1212.84 L1444.01 1212.84 L1443.43 1212.84 L1442.84 1212.84 L1442.25 1212.84 L1441.67 1212.84 L1441.08 1212.84 L1440.5 1212.84 L1439.91 1212.84 L1439.32 1212.84 L1438.74 1212.84 L1438.15 1212.84 L1437.56 1212.84 L1436.98 1212.84 L1436.39 1212.84 L1435.8 1212.84 L1435.22 1212.84 L1434.63 1212.84 L1434.04 1212.84 L1433.46 1212.84 L1432.87 1212.84 L1432.29 1212.84 L1431.7 1212.84 L1431.11 1212.84 L1430.53 1212.84 L1429.94 1212.84 L1429.35 1212.84 L1428.77 1212.84 L1428.18 1212.84 L1427.59 1212.84 L1427.01 1212.84 L1426.42 1212.84 L1425.83 1212.84 L1425.25 1212.84 L1424.66 1212.84 L1424.08 1212.84 L1423.49 1212.84 L1422.9 1212.84 L1422.32 1212.84 L1421.73 1212.84 L1421.14 1212.84 L1420.56 1212.84 L1419.97 1212.84 L1419.38 1212.84 L1418.8 1212.84 L1418.21 1212.84 L1417.63 1212.84 L1417.04 1212.84 L1416.45 1212.84 L1415.87 1212.84 L1415.28 1212.84 L1414.69 1212.84 L1414.11 1212.84 L1413.52 1212.84 L1412.93 1212.84 L1412.35 1212.84 L1411.76 1212.84 L1411.17 1212.84 L1410.59 1212.84 L1410 1212.84 L1409.42 1212.84 L1408.83 1212.84 L1408.24 1212.84 L1407.66 1212.84 L1407.07 1212.84 L1406.48 1212.84 L1405.9 1212.84 L1405.31 1212.84 L1404.72 1212.84 L1404.14 1212.84 L1403.55 1212.84 L1402.96 1212.84 L1402.38 1212.84 L1401.79 1212.84 L1401.21 1212.84 L1400.62 1212.84 L1400.03 1212.84 L1399.45 1212.84 L1398.86 1212.84 L1398.27 1212.84 L1397.69 1212.84 L1397.1 1212.84 L1396.51 1212.84 L1395.93 1212.84 L1395.34 1212.84 L1394.75 1212.84 L1394.17 1212.84 L1393.58 1212.84 L1393 1212.84 L1392.41 1212.84 L1391.82 1212.84 L1391.24 1212.84 L1390.65 1212.84 L1390.06 1212.84 L1389.48 1212.84 L1388.89 1212.84 L1388.3 1212.84 L1387.72 1212.84 L1387.13 1212.84 L1386.55 1212.84 L1385.96 1212.84 L1385.37 1212.84 L1384.79 1212.84 L1384.2 1212.84 L1383.61 1212.84 L1383.03 1212.84 L1382.44 1212.84 L1381.85 1212.84 L1381.27 1212.84 L1380.68 1212.84 L1380.09 1212.84 L1379.51 1212.84 L1378.92 1212.84 L1378.34 1212.84 L1377.75 1212.84 L1377.16 1212.84 L1376.58 1212.84 L1375.99 1212.84 L1375.4 1212.84 L1374.82 1212.84 L1374.23 1212.84 L1373.64 1212.84 L1373.06 1212.84 L1372.47 1212.84 L1371.88 1212.84 L1371.3 1212.84 L1370.71 1212.84 L1370.13 1212.84 L1369.54 1212.84 L1368.95 1212.84 L1368.37 1212.84 L1367.78 1212.84 L1367.19 1212.84 L1366.61 1212.84 L1366.02 1212.84 L1365.43 1212.84 L1364.85 1212.84 L1364.26 1212.84 L1363.68 1212.84 L1363.09 1212.84 L1362.5 1212.84 L1361.92 1212.84 L1361.33 1212.84 L1360.74 1212.84 L1360.16 1212.84 L1359.57 1212.84 L1358.98 1212.84 L1358.4 1212.84 L1357.81 1212.84 L1357.22 1212.84 L1356.64 1212.84 L1356.05 1212.84 L1355.47 1212.84 L1354.88 1212.84 L1354.29 1212.84 L1353.71 1212.84 L1353.12 1212.84 L1352.53 1212.84 L1351.95 1212.84 L1351.36 1212.84 L1350.77 1212.84 L1350.19 1212.84 L1349.6 1212.84 L1349.01 1212.84 L1348.43 1212.84 L1347.84 1212.84 L1347.26 1212.84 L1346.67 1212.84 L1346.08 1212.84 L1345.5 1212.84 L1344.91 1212.84 L1344.32 1212.84 L1343.74 1212.84 L1343.15 1212.84 L1342.56 1212.84 L1341.98 1212.84 L1341.39 1212.84 L1340.8 1212.84 L1340.22 1212.84 L1339.63 1212.84 L1339.05 1212.84 L1338.46 1212.84 L1337.87 1212.84 L1337.29 1212.84 L1336.7 1212.84 L1336.11 1212.84 L1335.53 1212.84 L1334.94 1212.84 L1334.35 1212.84 L1333.77 1212.84 L1333.18 1212.84 L1332.6 1212.84 L1332.01 1212.84 L1331.42 1212.84 L1330.84 1212.84 L1330.25 1212.84 L1329.66 1212.84 L1329.08 1212.84 L1328.49 1212.84 L1327.9 1212.84 L1327.32 1212.84 L1326.73 1212.84 L1326.14 1212.84 L1325.56 1212.84 L1324.97 1212.84 L1324.39 1212.84 L1323.8 1212.84 L1323.21 1212.84 L1322.63 1212.84 L1322.04 1212.84 L1321.45 1212.84 L1320.87 1212.84 L1320.28 1212.84 L1319.69 1212.84 L1319.11 1212.84 L1318.52 1212.84 L1317.93 1212.84 L1317.35 1212.84 L1316.76 1212.84 L1316.18 1212.84 L1315.59 1212.84 L1315 1212.84 L1314.42 1212.84 L1313.83 1212.84 L1313.24 1212.84 L1312.66 1212.84 L1312.07 1212.84 L1311.48 1212.84 L1310.9 1212.84 L1310.31 1212.84 L1309.73 1212.84 L1309.14 1212.84 L1308.55 1212.84 L1307.97 1212.84 L1307.38 1212.84 L1306.79 1212.84 L1306.21 1212.84 L1305.62 1212.84 L1305.03 1212.84 L1304.45 1212.84 L1303.86 1212.84 L1303.27 1212.84 L1302.69 1212.84 L1302.1 1212.84 L1301.52 1212.84 L1300.93 1212.84 L1300.34 1212.84 L1299.76 1212.84 L1299.17 1212.84 L1298.58 1212.84 L1298 1212.84 L1297.41 1212.84 L1296.82 1212.84 L1296.24 1212.84 L1295.65 1212.84 L1295.06 1212.84 L1294.48 1212.84 L1293.89 1212.84 L1293.31 1212.84 L1292.72 1212.84 L1292.13 1212.84 L1291.55 1212.84 L1290.96 1212.84 L1290.37 1212.84 L1289.79 1212.84 L1289.2 1212.84 L1288.61 1212.84 L1288.03 1212.84 L1287.44 1212.84 L1286.86 1212.84 L1286.27 1212.84 L1285.68 1212.84 L1285.1 1212.84 L1284.51 1212.84 L1283.92 1212.84 L1283.34 1212.84 L1282.75 1212.84 L1282.16 1212.84 L1281.58 1212.84 L1280.99 1212.84 L1280.4 1212.84 L1279.82 1212.84 L1279.23 1212.84 L1278.65 1212.84 L1278.06 1212.84 L1277.47 1212.84 L1276.89 1212.84 L1276.3 1212.84 L1275.71 1212.84 L1275.13 1212.84 L1274.54 1212.84 L1273.95 1212.84 L1273.37 1212.84 L1272.78 1212.84 L1272.19 1212.84 L1271.61 1212.84 L1271.02 1212.84 L1270.44 1212.84 L1269.85 1212.84 L1269.26 1212.84 L1268.68 1212.84 L1268.09 1212.84 L1267.5 1212.84 L1266.92 1212.84 L1266.33 1212.84 L1265.74 1212.84 L1265.16 1212.84 L1264.57 1212.84 L1263.98 1212.84 L1263.4 1212.84 L1262.81 1212.84 L1262.23 1212.84 L1261.64 1212.84 L1261.05 1212.84 L1260.47 1212.84 L1259.88 1212.84 L1259.29 1212.84 L1258.71 1212.84 L1258.12 1212.84 L1257.53 1212.84 L1256.95 1212.84 L1256.36 1212.84 L1255.78 1212.84 L1255.19 1212.84 L1254.6 1212.84 L1254.02 1212.84 L1253.43 1212.84 L1252.84 1212.84 L1252.26 1212.84 L1251.67 1212.84 L1251.08 1212.84 L1250.5 1212.84 L1249.91 1212.84 L1249.32 1212.84 L1248.74 1212.84 L1248.15 1212.84 L1247.57 1212.84 L1246.98 1212.84 L1246.39 1212.84 L1245.81 1212.84 L1245.22 1212.84 L1244.63 1212.84 L1244.05 1212.84 L1243.46 1212.84 L1242.87 1212.84 L1242.29 1212.84 L1241.7 1212.84 L1241.11 1212.84 L1240.53 1212.84 L1239.94 1212.84 L1239.36 1212.84 L1238.77 1212.84 L1238.18 1212.84 L1237.6 1212.84 L1237.01 1212.84 L1236.42 1212.84 L1235.84 1212.84 L1235.25 1212.84 L1234.66 1212.84 L1234.08 1212.84 L1233.49 1212.84 L1232.91 1212.84 L1232.32 1212.84 L1231.73 1212.84 L1231.15 1212.84 L1230.56 1212.84 L1229.97 1212.84 L1229.39 1212.84 L1228.8 1212.84 L1228.21 1212.84 L1227.63 1212.84 L1227.04 1212.84 L1226.45 1212.84 L1225.87 1212.84 L1225.28 1212.84 L1224.7 1212.84 L1224.11 1212.84 L1223.52 1212.84 L1222.94 1212.84 L1222.35 1212.84 L1221.76 1212.84 L1221.18 1212.84 L1220.59 1212.84 L1220 1212.84 L1219.42 1212.84 L1218.83 1212.84 L1218.24 1212.84 L1217.66 1212.84 L1217.07 1212.84 L1216.49 1212.84 L1215.9 1212.84 L1215.31 1212.84 L1214.73 1212.84 L1214.14 1212.84 L1213.55 1212.84 L1212.97 1212.84 L1212.38 1212.84 L1211.79 1212.84 L1211.21 1212.84 L1210.62 1212.84 L1210.03 1212.84 L1209.45 1212.84 L1208.86 1212.84 L1208.28 1212.84 L1207.69 1212.84 L1207.1 1212.84 L1206.52 1212.84 L1205.93 1212.84 L1205.34 1212.84 L1204.76 1212.84 L1204.17 1212.84 L1203.58 1212.84 L1203 1212.84 L1202.41 1212.84 L1201.83 1212.84 L1201.24 1212.84 L1200.65 1212.84 L1200.07 1212.84 L1199.48 1212.84 L1198.89 1212.84 L1198.31 1212.84 L1197.72 1212.84 L1197.13 1212.84 L1196.55 1212.84 L1195.96 1212.84 L1195.37 1212.84 L1194.79 1212.84 L1194.2 1212.84 L1193.62 1212.84 L1193.03 1212.84 L1192.44 1212.84 L1191.86 1212.84 L1191.27 1212.84 L1190.68 1212.84 L1190.1 1212.84 L1189.51 1212.84 L1188.92 1212.84 L1188.34 1212.84 L1187.75 1212.84 L1187.16 1212.84 L1186.58 1212.84 L1185.99 1212.84 L1185.41 1212.84 L1184.82 1212.84 L1184.23 1212.84 L1183.65 1212.84 L1183.06 1212.84 L1182.47 1212.84 L1181.89 1212.84 L1181.3 1212.84 L1180.71 1212.84 L1180.13 1212.84 L1179.54 1212.84 L1178.96 1212.84 L1178.37 1212.84 L1177.78 1212.84 L1177.2 1212.84 L1176.61 1212.84 L1176.02 1212.84 L1175.44 1212.84 L1174.85 1212.84 L1174.26 1212.84 L1173.68 1212.84 L1173.09 1212.84 L1172.5 1212.84 L1171.92 1212.84 L1171.33 1212.84 L1170.75 1212.84 L1170.16 1212.84 L1169.57 1212.84 L1168.99 1212.84 L1168.4 1212.84 L1167.81 1212.84 L1167.23 1212.84 L1166.64 1212.84 L1166.05 1212.84 L1165.47 1212.84 L1164.88 1212.84 L1164.29 1212.84 L1163.71 1212.84 L1163.12 1212.84 L1162.54 1212.84 L1161.95 1212.84 L1161.36 1212.84 L1160.78 1212.84 L1160.19 1212.84 L1159.6 1212.84 L1159.02 1212.84 L1158.43 1212.84 L1157.84 1212.84 L1157.26 1212.84 L1156.67 1212.84 L1156.09 1212.84 L1155.5 1212.84 L1154.91 1212.84 L1154.33 1212.84 L1153.74 1212.84 L1153.15 1212.84 L1152.57 1212.84 L1151.98 1212.84 L1151.39 1212.84 L1150.81 1212.84 L1150.22 1212.84 L1149.63 1212.84 L1149.05 1212.84 L1148.46 1212.84 L1147.88 1212.84 L1147.29 1212.84 L1146.7 1212.84 L1146.12 1212.84 L1145.53 1212.84 L1144.94 1212.84 L1144.36 1212.84 L1143.77 1212.84 L1143.18 1212.84 L1142.6 1212.84 L1142.01 1212.84 L1141.42 1212.84 L1140.84 1212.84 L1140.25 1212.84 L1139.67 1212.84 L1139.08 1212.84 L1138.49 1212.84 L1137.91 1212.84 L1137.32 1212.84 L1136.73 1212.84 L1136.15 1212.84 L1135.56 1212.84 L1134.97 1212.84 L1134.39 1212.84 L1133.8 1212.84 L1133.21 1212.84 L1132.63 1212.84 L1132.04 1212.84 L1131.46 1212.84 L1130.87 1212.84 L1130.28 1212.84 L1129.7 1212.84 L1129.11 1212.84 L1128.52 1212.84 L1127.94 1212.84 L1127.35 1212.84 L1126.76 1212.84 L1126.18 1212.84 L1125.59 1212.84 L1125.01 1212.84 L1124.42 1212.84 L1123.83 1212.84 L1123.25 1212.84 L1122.66 1212.84 L1122.07 1212.84 L1121.49 1212.84 L1120.9 1212.84 L1120.31 1212.84 L1119.73 1212.84 L1119.14 1212.84 L1118.55 1212.84 L1117.97 1212.84 L1117.38 1212.84 L1116.8 1212.84 L1116.21 1212.84 L1115.62 1212.84 L1115.04 1212.84 L1114.45 1212.84 L1113.86 1212.84 L1113.28 1212.84 L1112.69 1212.84 L1112.1 1212.84 L1111.52 1212.84 L1110.93 1212.84 L1110.34 1212.84 L1109.76 1212.84 L1109.17 1212.84 L1108.59 1212.84 L1108 1212.84 L1107.41 1212.84 L1106.83 1212.84 L1106.24 1212.84 L1105.65 1212.84 L1105.07 1212.84 L1104.48 1212.84 L1103.89 1212.84 L1103.31 1212.84 L1102.72 1212.84 L1102.14 1212.84 L1101.55 1212.84 L1100.96 1212.84 L1100.38 1212.84 L1099.79 1212.84 L1099.2 1212.84 L1098.62 1212.84 L1098.03 1212.84 L1097.44 1212.84 L1096.86 1212.84 L1096.27 1212.84 L1095.68 1212.84 L1095.1 1212.84 L1094.51 1212.84 L1093.93 1212.84 L1093.34 1212.84 L1092.75 1212.84 L1092.17 1212.84 L1091.58 1212.84 L1090.99 1212.84 L1090.41 1212.84 L1089.82 1212.84 L1089.23 1212.84 L1088.65 1212.84 L1088.06 1212.84 L1087.47 1212.84 L1086.89 1212.84 L1086.3 1212.84 L1085.72 1212.84 L1085.13 1212.84 L1084.54 1212.84 L1083.96 1212.84 L1083.37 1212.84 L1082.78 1212.84 L1082.2 1212.84 L1081.61 1212.84 L1081.02 1212.84 L1080.44 1212.84 L1079.85 1212.84 L1079.26 1212.84 L1078.68 1212.84 L1078.09 1212.84 L1077.51 1212.84 L1076.92 1212.84 L1076.33 1212.84 L1075.75 1212.84 L1075.16 1212.84 L1074.57 1212.84 L1073.99 1212.84 L1073.4 1212.84 L1072.81 1212.84 L1072.23 1212.84 L1071.64 1212.84 L1071.06 1212.84 L1070.47 1212.84 L1069.88 1212.84 L1069.3 1212.84 L1068.71 1212.84 L1068.12 1212.84 L1067.54 1212.84 L1066.95 1212.84 L1066.36 1212.84 L1065.78 1212.84 L1065.19 1212.84 L1064.6 1212.84 L1064.02 1212.84 L1063.43 1212.84 L1062.85 1212.84 L1062.26 1212.84 L1061.67 1212.84 L1061.09 1212.84 L1060.5 1212.84 L1059.91 1212.84 L1059.33 1212.84 L1058.74 1212.84 L1058.15 1212.84 L1057.57 1212.84 L1056.98 1212.84 L1056.39 1212.84 L1055.81 1212.84 L1055.22 1212.84 L1054.64 1212.84 L1054.05 1212.84 L1053.46 1212.84 L1052.88 1212.84 L1052.29 1212.84 L1051.7 1212.84 L1051.12 1212.84 L1050.53 1212.84 L1049.94 1212.84 L1049.36 1212.84 L1048.77 1212.84 L1048.19 1212.84 L1047.6 1212.84 L1047.01 1212.84 L1046.43 1212.84 L1045.84 1212.84 L1045.25 1212.84 L1044.67 1212.84 L1044.08 1212.84 L1043.49 1212.84 L1042.91 1212.84 L1042.32 1212.84 L1041.73 1212.84 L1041.15 1212.84 L1040.56 1212.84 L1039.98 1212.84 L1039.39 1212.84 L1038.8 1212.84 L1038.22 1212.84 L1037.63 1212.84 L1037.04 1212.84 L1036.46 1212.84 L1035.87 1212.84 L1035.28 1212.84 L1034.7 1212.84 L1034.11 1212.84 L1033.52 1212.84 L1032.94 1212.84 L1032.35 1212.84 L1031.77 1212.84 L1031.18 1212.84 L1030.59 1212.84 L1030.01 1212.84 L1029.42 1212.84 L1028.83 1212.84 L1028.25 1212.84 L1027.66 1212.84 L1027.07 1212.84 L1026.49 1212.84 L1025.9 1212.84 L1025.32 1212.84 L1024.73 1212.84 L1024.14 1212.84 L1023.56 1212.84 L1022.97 1212.84 L1022.38 1212.84 L1021.8 1212.84 L1021.21 1212.84 L1020.62 1212.84 L1020.04 1212.84 L1019.45 1212.84 L1018.86 1212.84 L1018.28 1212.84 L1017.69 1212.84 L1017.11 1212.84 L1016.52 1212.84 L1015.93 1212.84 L1015.35 1212.84 L1014.76 1212.84 L1014.17 1212.84 L1013.59 1212.84 L1013 1212.84 L1012.41 1212.84 L1011.83 1212.84 L1011.24 1212.84 L1010.65 1212.84 L1010.07 1212.84 L1009.48 1212.84 L1008.9 1212.84 L1008.31 1212.84 L1007.72 1212.84 L1007.14 1212.84 L1006.55 1212.84 L1005.96 1212.84 L1005.38 1212.84 L1004.79 1212.84 L1004.2 1212.84 L1003.62 1212.84 L1003.03 1212.84 L1002.44 1212.84 L1001.86 1212.84 L1001.27 1212.84 L1000.69 1212.84 L1000.1 1212.84 L999.513 1212.84 L998.926 1212.84 L998.34 1212.84 L997.754 1212.84 L997.167 1212.84 L996.581 1212.84 L995.994 1212.84 L995.408 1212.84 L994.822 1212.84 L994.235 1212.84 L993.649 1212.84 L993.062 1212.84 L992.476 1212.84 L991.889 1212.84 L991.303 1212.84 L990.717 1212.84 L990.13 1212.84 L989.544 1212.84 L988.957 1212.84 L988.371 1212.84 L987.785 1212.84 L987.198 1212.84 L986.612 1212.84 L986.025 1212.84  Z\" fill=\"#e26f46\" fill-rule=\"evenodd\" fill-opacity=\"0.5\"/>\n<polyline clip-path=\"url(#clip782)\" style=\"stroke:#e26f46; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"986.025,1213.23 986.612,1213.23 987.198,1213.23 987.785,1213.23 988.371,1213.23 988.957,1213.23 989.544,1213.23 990.13,1213.23 990.717,1213.23 991.303,1213.23 991.889,1213.23 992.476,1213.23 993.062,1213.23 993.649,1213.23 994.235,1213.23 994.822,1213.23 995.408,1213.23 995.994,1213.23 996.581,1213.23 997.167,1213.23 997.754,1213.23 998.34,1213.23 998.926,1213.23 999.513,1213.23 1000.1,1213.23 1000.69,1213.23 1001.27,1213.23 1001.86,1213.23 1002.44,1213.23 1003.03,1213.23 1003.62,1213.23 1004.2,1213.23 1004.79,1213.23 1005.38,1213.23 1005.96,1213.23 1006.55,1213.23 1007.14,1213.23 1007.72,1213.23 1008.31,1213.23 1008.9,1213.23 1009.48,1213.23 1010.07,1213.23 1010.65,1213.23 1011.24,1213.23 1011.83,1213.23 1012.41,1213.23 1013,1213.23 1013.59,1213.23 1014.17,1213.23 1014.76,1213.23 1015.35,1213.23 1015.93,1213.23 1016.52,1213.23 1017.11,1213.23 1017.69,1213.23 1018.28,1213.23 1018.86,1213.23 1019.45,1213.23 1020.04,1213.23 1020.62,1213.23 1021.21,1213.23 1021.8,1213.23 1022.38,1213.23 1022.97,1213.23 1023.56,1213.23 1024.14,1213.23 1024.73,1213.23 1025.32,1213.23 1025.9,1213.23 1026.49,1213.23 1027.07,1213.23 1027.66,1213.23 1028.25,1213.23 1028.83,1213.23 1029.42,1213.23 1030.01,1213.23 1030.59,1213.23 1031.18,1213.23 1031.77,1213.23 1032.35,1213.23 1032.94,1213.23 1033.52,1213.23 1034.11,1213.23 1034.7,1213.23 1035.28,1213.23 1035.87,1213.23 1036.46,1213.23 1037.04,1213.23 1037.63,1213.23 1038.22,1213.23 1038.8,1213.23 1039.39,1213.23 1039.98,1213.23 1040.56,1213.23 1041.15,1213.23 1041.73,1213.23 1042.32,1213.23 1042.91,1213.23 1043.49,1213.23 1044.08,1213.23 1044.67,1213.23 1045.25,1213.23 1045.84,1213.23 1046.43,1213.23 1047.01,1213.23 1047.6,1213.23 1048.19,1213.23 1048.77,1213.23 1049.36,1213.23 1049.94,1213.23 1050.53,1213.23 1051.12,1213.23 1051.7,1213.23 1052.29,1213.23 1052.88,1213.23 1053.46,1213.23 1054.05,1213.23 1054.64,1213.23 1055.22,1213.23 1055.81,1213.23 1056.39,1213.23 1056.98,1213.23 1057.57,1213.23 1058.15,1213.23 1058.74,1213.23 1059.33,1213.23 1059.91,1213.23 1060.5,1213.23 1061.09,1213.23 1061.67,1213.23 1062.26,1213.23 1062.85,1213.23 1063.43,1213.23 1064.02,1213.23 1064.6,1213.23 1065.19,1213.23 1065.78,1213.23 1066.36,1213.23 1066.95,1213.23 1067.54,1213.23 1068.12,1213.23 1068.71,1213.23 1069.3,1213.23 1069.88,1213.23 1070.47,1213.23 1071.06,1213.23 1071.64,1213.23 1072.23,1213.23 1072.81,1213.23 1073.4,1213.23 1073.99,1213.23 1074.57,1213.23 1075.16,1213.23 1075.75,1213.23 1076.33,1213.23 1076.92,1213.23 1077.51,1213.23 1078.09,1213.23 1078.68,1213.23 1079.26,1213.23 1079.85,1213.23 1080.44,1213.23 1081.02,1213.23 1081.61,1213.23 1082.2,1213.23 1082.78,1213.23 1083.37,1213.23 1083.96,1213.23 1084.54,1213.23 1085.13,1213.23 1085.72,1213.23 1086.3,1213.23 1086.89,1213.23 1087.47,1213.23 1088.06,1213.23 1088.65,1213.23 1089.23,1213.23 1089.82,1213.23 1090.41,1213.23 1090.99,1213.23 1091.58,1213.23 1092.17,1213.23 1092.75,1213.23 1093.34,1213.23 1093.93,1213.23 1094.51,1213.23 1095.1,1213.23 1095.68,1213.23 1096.27,1213.23 1096.86,1213.23 1097.44,1213.23 1098.03,1213.23 1098.62,1213.23 1099.2,1213.23 1099.79,1213.23 1100.38,1213.23 1100.96,1213.23 1101.55,1213.23 1102.14,1213.23 1102.72,1213.23 1103.31,1213.23 1103.89,1213.23 1104.48,1213.23 1105.07,1213.23 1105.65,1213.23 1106.24,1213.23 1106.83,1213.23 1107.41,1213.23 1108,1213.23 1108.59,1213.23 1109.17,1213.23 1109.76,1213.23 1110.34,1213.23 1110.93,1213.23 1111.52,1213.23 1112.1,1213.23 1112.69,1213.23 1113.28,1213.23 1113.86,1213.23 1114.45,1213.23 1115.04,1213.23 1115.62,1213.23 1116.21,1213.23 1116.8,1213.23 1117.38,1213.23 1117.97,1213.23 1118.55,1213.23 1119.14,1213.23 1119.73,1213.23 1120.31,1213.23 1120.9,1213.23 1121.49,1213.23 1122.07,1213.23 1122.66,1213.23 1123.25,1213.23 1123.83,1213.23 1124.42,1213.23 1125.01,1213.23 1125.59,1213.23 1126.18,1213.23 1126.76,1213.23 1127.35,1213.23 1127.94,1213.23 1128.52,1213.23 1129.11,1213.23 1129.7,1213.23 1130.28,1213.23 1130.87,1213.23 1131.46,1213.23 1132.04,1213.23 1132.63,1213.23 1133.21,1213.23 1133.8,1213.23 1134.39,1213.23 1134.97,1213.23 1135.56,1213.23 1136.15,1213.23 1136.73,1213.23 1137.32,1213.23 1137.91,1213.23 1138.49,1213.23 1139.08,1213.23 1139.67,1213.23 1140.25,1213.23 1140.84,1213.23 1141.42,1213.23 1142.01,1213.23 1142.6,1213.23 1143.18,1213.23 1143.77,1213.23 1144.36,1213.23 1144.94,1213.23 1145.53,1213.23 1146.12,1213.23 1146.7,1213.23 1147.29,1213.23 1147.88,1213.23 1148.46,1213.23 1149.05,1213.23 1149.63,1213.23 1150.22,1213.23 1150.81,1213.23 1151.39,1213.23 1151.98,1213.23 1152.57,1213.23 1153.15,1213.23 1153.74,1213.23 1154.33,1213.23 1154.91,1213.23 1155.5,1213.23 1156.09,1213.23 1156.67,1213.23 1157.26,1213.23 1157.84,1213.23 1158.43,1213.23 1159.02,1213.23 1159.6,1213.23 1160.19,1213.23 1160.78,1213.23 1161.36,1213.23 1161.95,1213.23 1162.54,1213.23 1163.12,1213.23 1163.71,1213.23 1164.29,1213.23 1164.88,1213.23 1165.47,1213.23 1166.05,1213.23 1166.64,1213.23 1167.23,1213.23 1167.81,1213.23 1168.4,1213.23 1168.99,1213.23 1169.57,1213.23 1170.16,1213.23 1170.75,1213.23 1171.33,1213.23 1171.92,1213.23 1172.5,1213.23 1173.09,1213.23 1173.68,1213.23 1174.26,1213.23 1174.85,1213.23 1175.44,1213.23 1176.02,1213.23 1176.61,1213.23 1177.2,1213.23 1177.78,1213.23 1178.37,1213.23 1178.96,1213.23 1179.54,1213.23 1180.13,1213.23 1180.71,1213.23 1181.3,1213.23 1181.89,1213.23 1182.47,1213.23 1183.06,1213.23 1183.65,1213.23 1184.23,1213.23 1184.82,1213.23 1185.41,1213.23 1185.99,1213.23 1186.58,1213.23 1187.16,1213.23 1187.75,1213.23 1188.34,1213.23 1188.92,1213.23 1189.51,1213.23 1190.1,1213.23 1190.68,1213.23 1191.27,1213.23 1191.86,1213.23 1192.44,1213.23 1193.03,1213.23 1193.62,1213.23 1194.2,1213.23 1194.79,1213.23 1195.37,1213.23 1195.96,1213.23 1196.55,1213.23 1197.13,1213.23 1197.72,1213.23 1198.31,1213.23 1198.89,1213.23 1199.48,1213.23 1200.07,1213.23 1200.65,1213.23 1201.24,1213.23 1201.83,1213.23 1202.41,1213.23 1203,1213.23 1203.58,1213.23 1204.17,1213.23 1204.76,1213.23 1205.34,1213.23 1205.93,1213.23 1206.52,1213.23 1207.1,1213.23 1207.69,1213.23 1208.28,1213.23 1208.86,1213.23 1209.45,1213.23 1210.03,1213.23 1210.62,1213.23 1211.21,1213.23 1211.79,1213.23 1212.38,1213.23 1212.97,1213.23 1213.55,1213.23 1214.14,1213.23 1214.73,1213.23 1215.31,1213.23 1215.9,1213.23 1216.49,1213.23 1217.07,1213.23 1217.66,1213.23 1218.24,1213.23 1218.83,1213.23 1219.42,1213.23 1220,1213.23 1220.59,1213.23 1221.18,1213.23 1221.76,1213.23 1222.35,1213.23 1222.94,1213.23 1223.52,1213.23 1224.11,1213.23 1224.7,1213.23 1225.28,1213.23 1225.87,1213.23 1226.45,1213.23 1227.04,1213.23 1227.63,1213.23 1228.21,1213.23 1228.8,1213.23 1229.39,1213.23 1229.97,1213.23 1230.56,1213.23 1231.15,1213.23 1231.73,1213.23 1232.32,1213.23 1232.91,1213.23 1233.49,1213.23 1234.08,1213.23 1234.66,1213.23 1235.25,1213.23 1235.84,1213.23 1236.42,1213.23 1237.01,1213.23 1237.6,1213.23 1238.18,1213.23 1238.77,1213.23 1239.36,1213.23 1239.94,1213.23 1240.53,1213.23 1241.11,1213.23 1241.7,1213.23 1242.29,1213.23 1242.87,1213.23 1243.46,1213.23 1244.05,1213.23 1244.63,1213.23 1245.22,1213.23 1245.81,1213.23 1246.39,1213.23 1246.98,1213.23 1247.57,1213.23 1248.15,1213.23 1248.74,1213.23 1249.32,1213.23 1249.91,1213.23 1250.5,1213.23 1251.08,1213.23 1251.67,1213.23 1252.26,1213.23 1252.84,1213.23 1253.43,1213.23 1254.02,1213.23 1254.6,1213.23 1255.19,1213.23 1255.78,1213.23 1256.36,1213.23 1256.95,1213.23 1257.53,1213.23 1258.12,1213.23 1258.71,1213.23 1259.29,1213.23 1259.88,1213.23 1260.47,1213.23 1261.05,1213.23 1261.64,1213.23 1262.23,1213.23 1262.81,1213.23 1263.4,1213.23 1263.98,1213.23 1264.57,1213.23 1265.16,1213.23 1265.74,1213.23 1266.33,1213.23 1266.92,1213.23 1267.5,1213.23 1268.09,1213.23 1268.68,1213.23 1269.26,1213.23 1269.85,1213.23 1270.44,1213.23 1271.02,1213.23 1271.61,1213.23 1272.19,1213.23 1272.78,1213.23 1273.37,1213.23 1273.95,1213.23 1274.54,1213.23 1275.13,1213.23 1275.71,1213.23 1276.3,1213.23 1276.89,1213.23 1277.47,1213.23 1278.06,1213.23 1278.65,1213.23 1279.23,1213.23 1279.82,1213.23 1280.4,1213.23 1280.99,1213.23 1281.58,1213.23 1282.16,1213.23 1282.75,1213.23 1283.34,1213.23 1283.92,1213.23 1284.51,1213.23 1285.1,1213.23 1285.68,1213.23 1286.27,1213.23 1286.86,1213.23 1287.44,1213.23 1288.03,1213.23 1288.61,1213.23 1289.2,1213.23 1289.79,1213.23 1290.37,1213.23 1290.96,1213.23 1291.55,1213.23 1292.13,1213.23 1292.72,1213.23 1293.31,1213.23 1293.89,1213.23 1294.48,1213.23 1295.06,1213.23 1295.65,1213.23 1296.24,1213.23 1296.82,1213.23 1297.41,1213.23 1298,1213.23 1298.58,1213.23 1299.17,1213.23 1299.76,1213.23 1300.34,1213.23 1300.93,1213.23 1301.52,1213.23 1302.1,1213.23 1302.69,1213.23 1303.27,1213.23 1303.86,1213.23 1304.45,1213.23 1305.03,1213.23 1305.62,1213.23 1306.21,1213.23 1306.79,1213.23 1307.38,1213.23 1307.97,1213.23 1308.55,1213.23 1309.14,1213.23 1309.73,1213.23 1310.31,1213.23 1310.9,1213.23 1311.48,1213.23 1312.07,1213.23 1312.66,1213.23 1313.24,1213.23 1313.83,1213.23 1314.42,1213.23 1315,1213.23 1315.59,1213.23 1316.18,1213.23 1316.76,1213.23 1317.35,1213.23 1317.93,1213.23 1318.52,1213.23 1319.11,1213.23 1319.69,1213.23 1320.28,1213.23 1320.87,1213.23 1321.45,1213.23 1322.04,1213.23 1322.63,1213.23 1323.21,1213.23 1323.8,1213.23 1324.39,1213.23 1324.97,1213.23 1325.56,1213.23 1326.14,1213.23 1326.73,1213.23 1327.32,1213.23 1327.9,1213.23 1328.49,1213.23 1329.08,1213.23 1329.66,1213.23 1330.25,1213.23 1330.84,1213.23 1331.42,1213.23 1332.01,1213.23 1332.6,1213.23 1333.18,1213.23 1333.77,1213.23 1334.35,1213.23 1334.94,1213.23 1335.53,1213.23 1336.11,1213.23 1336.7,1213.23 1337.29,1213.23 1337.87,1213.23 1338.46,1213.23 1339.05,1213.23 1339.63,1213.23 1340.22,1213.23 1340.8,1213.23 1341.39,1213.23 1341.98,1213.23 1342.56,1213.23 1343.15,1213.23 1343.74,1213.23 1344.32,1213.23 1344.91,1213.23 1345.5,1213.23 1346.08,1213.23 1346.67,1213.23 1347.26,1213.23 1347.84,1213.23 1348.43,1213.23 1349.01,1213.23 1349.6,1213.23 1350.19,1213.23 1350.77,1213.23 1351.36,1213.23 1351.95,1213.23 1352.53,1213.23 1353.12,1213.23 1353.71,1213.23 1354.29,1213.23 1354.88,1213.23 1355.47,1213.23 1356.05,1213.23 1356.64,1213.23 1357.22,1213.23 1357.81,1213.23 1358.4,1213.23 1358.98,1213.23 1359.57,1213.23 1360.16,1213.23 1360.74,1213.23 1361.33,1213.23 1361.92,1213.23 1362.5,1213.23 1363.09,1213.23 1363.68,1213.23 1364.26,1213.23 1364.85,1213.23 1365.43,1213.23 1366.02,1213.23 1366.61,1213.23 1367.19,1213.23 1367.78,1213.23 1368.37,1213.23 1368.95,1213.23 1369.54,1213.23 1370.13,1213.23 1370.71,1213.23 1371.3,1213.23 1371.88,1213.23 1372.47,1213.23 1373.06,1213.23 1373.64,1213.23 1374.23,1213.23 1374.82,1213.23 1375.4,1213.23 1375.99,1213.23 1376.58,1213.23 1377.16,1213.23 1377.75,1213.23 1378.34,1213.23 1378.92,1213.23 1379.51,1213.23 1380.09,1213.23 1380.68,1213.23 1381.27,1213.23 1381.85,1213.23 1382.44,1213.23 1383.03,1213.23 1383.61,1213.23 1384.2,1213.23 1384.79,1213.23 1385.37,1213.23 1385.96,1213.23 1386.55,1213.23 1387.13,1213.23 1387.72,1213.23 1388.3,1213.23 1388.89,1213.23 1389.48,1213.23 1390.06,1213.23 1390.65,1213.23 1391.24,1213.23 1391.82,1213.23 1392.41,1213.23 1393,1213.23 1393.58,1213.23 1394.17,1213.23 1394.75,1213.23 1395.34,1213.23 1395.93,1213.23 1396.51,1213.23 1397.1,1213.23 1397.69,1213.23 1398.27,1213.23 1398.86,1213.23 1399.45,1213.23 1400.03,1213.23 1400.62,1213.23 1401.21,1213.23 1401.79,1213.23 1402.38,1213.23 1402.96,1213.23 1403.55,1213.23 1404.14,1213.23 1404.72,1213.23 1405.31,1213.23 1405.9,1213.23 1406.48,1213.23 1407.07,1213.23 1407.66,1213.23 1408.24,1213.23 1408.83,1213.23 1409.42,1213.23 1410,1213.23 1410.59,1213.23 1411.17,1213.23 1411.76,1213.23 1412.35,1213.23 1412.93,1213.23 1413.52,1213.23 1414.11,1213.23 1414.69,1213.23 1415.28,1213.23 1415.87,1213.23 1416.45,1213.23 1417.04,1213.23 1417.63,1213.23 1418.21,1213.23 1418.8,1213.23 1419.38,1213.23 1419.97,1213.23 1420.56,1213.23 1421.14,1213.23 1421.73,1213.23 1422.32,1213.23 1422.9,1213.23 1423.49,1213.23 1424.08,1213.23 1424.66,1213.23 1425.25,1213.23 1425.83,1213.23 1426.42,1213.23 1427.01,1213.23 1427.59,1213.23 1428.18,1213.23 1428.77,1213.23 1429.35,1213.23 1429.94,1213.23 1430.53,1213.23 1431.11,1213.23 1431.7,1213.23 1432.29,1213.23 1432.87,1213.23 1433.46,1213.23 1434.04,1213.23 1434.63,1213.23 1435.22,1213.23 1435.8,1213.23 1436.39,1213.23 1436.98,1213.23 1437.56,1213.23 1438.15,1213.23 1438.74,1213.23 1439.32,1213.23 1439.91,1213.23 1440.5,1213.23 1441.08,1213.23 1441.67,1213.23 1442.25,1213.23 1442.84,1213.23 1443.43,1213.23 1444.01,1213.23 1444.6,1213.23 1445.19,1213.23 1445.77,1213.23 1446.36,1213.23 1446.95,1213.23 1447.53,1213.23 1448.12,1213.23 1448.7,1213.23 1449.29,1213.23 1449.88,1213.23 1450.46,1213.23 1451.05,1213.23 1451.64,1213.23 1452.22,1213.23 1452.81,1213.23 1453.4,1213.23 1453.98,1213.23 1454.57,1213.23 1455.16,1213.23 1455.74,1213.23 1456.33,1213.23 1456.91,1213.23 1457.5,1213.23 1458.09,1213.23 1458.67,1213.23 1459.26,1213.23 1459.85,1213.23 1460.43,1213.23 1461.02,1213.23 1461.61,1213.23 1462.19,1213.23 1462.78,1213.23 1463.37,1213.23 1463.95,1213.23 1464.54,1213.23 1465.12,1213.23 1465.71,1213.23 1466.3,1213.23 1466.88,1213.23 1467.47,1213.23 1468.06,1213.23 1468.64,1213.23 1469.23,1213.23 1469.82,1213.23 1470.4,1213.23 1470.99,1213.23 1471.57,1213.23 1472.16,1213.23 1472.75,1213.23 1473.33,1213.23 1473.92,1213.23 1474.51,1213.23 1475.09,1213.23 1475.68,1213.23 1476.27,1213.23 1476.85,1213.23 1477.44,1213.23 1478.03,1213.23 1478.61,1213.23 1479.2,1213.23 1479.78,1213.23 1480.37,1213.23 1480.96,1213.23 1481.54,1213.23 1482.13,1213.23 1482.72,1213.23 1483.3,1213.23 1483.89,1213.23 1484.48,1213.23 1485.06,1213.23 1485.65,1213.23 1486.24,1213.23 1486.82,1213.23 1487.41,1213.23 1487.99,1213.23 1488.58,1213.23 1489.17,1213.23 1489.75,1213.23 1490.34,1213.23 1490.93,1213.23 1491.51,1213.23 1492.1,1213.23 1492.69,1213.23 1493.27,1213.23 1493.86,1213.23 1494.45,1213.23 1495.03,1213.23 1495.62,1213.23 1496.2,1213.23 1496.79,1213.23 1497.38,1213.23 1497.96,1213.23 1498.55,1213.23 1499.14,1213.23 1499.72,1213.23 1500.31,1213.23 1500.9,1213.23 1501.48,1213.23 1502.07,1213.23 1502.65,1213.23 1503.24,1213.23 1503.83,1213.23 1504.41,1213.23 1505,1213.23 1505.59,1213.23 1506.17,1213.23 1506.76,1213.23 1507.35,1213.23 1507.93,1213.23 1508.52,1213.23 1509.11,1213.23 1509.69,1213.23 1510.28,1213.23 1510.86,1213.23 1511.45,1213.23 1512.04,1213.23 1512.62,1213.23 1513.21,1213.23 1513.8,1213.23 1514.38,1213.23 1514.97,1213.23 1515.56,1213.23 1516.14,1213.23 1516.73,1213.23 1517.32,1213.23 1517.9,1213.23 1518.49,1213.23 1519.07,1213.23 1519.66,1213.23 1520.25,1213.23 1520.83,1213.23 1521.42,1213.23 1522.01,1213.23 1522.59,1213.23 1523.18,1213.23 1523.77,1213.23 1524.35,1213.23 1524.94,1213.23 1525.52,1213.23 1526.11,1213.23 1526.7,1213.23 1527.28,1213.23 1527.87,1213.23 1528.46,1213.23 1529.04,1213.23 1529.63,1213.23 1530.22,1213.23 1530.8,1213.23 1531.39,1213.23 1531.98,1213.23 1532.56,1213.23 1533.15,1213.23 1533.73,1213.23 1534.32,1213.23 1534.91,1213.23 1535.49,1213.23 1536.08,1213.23 1536.67,1213.23 1537.25,1213.23 1537.84,1213.23 1538.43,1213.23 1539.01,1213.23 1539.6,1213.23 1540.19,1213.23 1540.77,1213.23 1541.36,1213.23 1541.94,1213.23 1542.53,1213.23 1543.12,1213.23 1543.7,1213.23 1544.29,1213.23 1544.88,1213.23 1545.46,1213.23 1546.05,1213.23 1546.64,1213.23 1547.22,1213.23 1547.81,1213.23 1548.4,1213.23 1548.98,1213.23 1549.57,1213.23 1550.15,1213.23 1550.74,1213.23 1551.33,1213.23 1551.91,1213.23 1552.5,1213.23 1553.09,1213.23 1553.67,1213.23 1554.26,1213.23 1554.85,1213.23 1555.43,1213.23 1556.02,1213.23 1556.6,1213.23 1557.19,1213.23 1557.78,1213.23 1558.36,1213.23 1558.95,1213.23 1559.54,1213.23 1560.12,1213.23 1560.71,1213.23 1561.3,1213.23 1561.88,1213.23 1562.47,1213.23 1563.06,1213.23 1563.64,1213.23 1564.23,1213.23 1564.81,1213.23 1565.4,1213.23 1565.99,1213.23 1566.57,1213.23 1567.16,1213.23 1567.75,1213.23 1568.33,1213.23 1568.92,1213.23 1569.51,1213.23 1570.09,1213.23 1570.68,1213.23 1571.27,1213.23 1571.85,1213.23 1572.44,1213.23 1573.02,1213.23 1573.61,1213.23 1574.2,1213.23 1574.78,1213.23 1575.37,1213.23 1575.96,1213.23 1576.54,1213.23 1577.13,1213.23 1577.72,1213.23 1578.3,1213.23 1578.89,1213.23 1579.47,1213.23 1580.06,1213.23 1580.65,1213.23 1581.23,1213.23 1581.82,1213.23 1582.41,1213.23 1582.99,1213.23 1583.58,1213.23 1584.17,1213.23 1584.75,1213.23 1585.34,1213.23 1585.93,1213.23 1586.51,1213.23 1587.1,1213.23 1587.68,1213.23 1588.27,1213.23 1588.86,1213.23 1589.44,1213.23 1590.03,1213.23 1590.62,1213.23 1591.2,1213.23 1591.79,1213.23 1592.38,1213.23 1592.96,1213.23 1593.55,1213.23 1594.14,1213.23 1594.72,1213.23 1595.31,1213.23 1595.89,1213.23 1596.48,1213.23 1597.07,1213.23 1597.65,1213.23 1598.24,1213.23 1598.83,1213.23 1599.41,1213.23 1600,1213.23 1600.59,1213.23 1601.17,1213.23 1601.76,1213.23 1602.34,1213.23 1602.93,1213.23 1603.52,1213.23 1604.1,1213.23 1604.69,1213.23 1605.28,1213.23 1605.86,1213.23 1606.45,1213.23 1607.04,1213.23 1607.62,1213.23 1608.21,1213.23 1608.8,1213.23 1609.38,1213.23 1609.97,1213.23 1610.55,1213.23 1611.14,1213.23 1611.73,1213.23 1612.31,1213.23 1612.9,1213.23 1613.49,1213.23 1614.07,1213.23 1614.66,1213.23 1615.25,1213.23 1615.83,1213.23 1616.42,1213.23 1617.01,1213.23 1617.59,1213.23 1618.18,1213.23 1618.76,1213.23 1619.35,1213.23 1619.94,1213.23 1620.52,1213.23 1621.11,1213.23 1621.7,1213.23 1622.28,1213.23 1622.87,1213.23 1623.46,1213.23 1624.04,1213.23 1624.63,1213.23 1625.22,1213.23 1625.8,1213.23 1626.39,1213.23 1626.97,1213.23 1627.56,1213.23 1628.15,1213.23 1628.73,1213.23 1629.32,1213.23 1629.91,1213.23 1630.49,1213.23 1631.08,1213.23 1631.67,1213.23 1632.25,1213.23 1632.84,1213.23 1633.42,1213.23 1634.01,1213.23 1634.6,1213.23 1635.18,1213.23 1635.77,1213.23 1636.36,1213.23 1636.94,1213.23 1637.53,1213.23 1638.12,1213.23 1638.7,1213.23 1639.29,1213.23 1639.88,1213.23 1640.46,1213.23 1641.05,1213.23 1641.63,1213.23 1642.22,1213.23 1642.81,1213.23 1643.39,1213.23 1643.98,1213.23 1644.57,1213.23 1645.15,1213.23 1645.74,1213.23 1646.33,1213.23 1646.91,1213.23 1647.5,1213.23 1648.09,1213.23 1648.67,1213.23 1649.26,1213.23 1649.84,1213.23 1650.43,1213.23 1651.02,1213.23 1651.6,1213.23 1652.19,1213.23 1652.78,1213.23 1653.36,1213.23 1653.95,1213.23 1654.54,1213.23 1655.12,1213.23 1655.71,1213.23 1656.29,1213.23 1656.88,1213.23 1657.47,1213.23 1658.05,1213.23 1658.64,1213.23 1659.23,1213.23 1659.81,1213.23 1660.4,1213.23 1660.99,1213.23 1661.57,1213.23 1662.16,1213.23 1662.75,1213.23 1663.33,1213.23 1663.92,1213.23 1664.5,1213.23 1665.09,1213.23 1665.68,1213.23 1666.26,1213.23 1666.85,1213.23 1667.44,1213.23 1668.02,1213.23 1668.61,1213.23 1669.2,1213.23 1669.78,1213.23 1670.37,1213.23 1670.96,1213.23 1671.54,1213.23 1672.13,1213.23 1672.71,1213.23 1673.3,1213.23 1673.89,1213.23 1674.47,1213.23 1675.06,1213.23 1675.65,1213.23 1676.23,1213.23 1676.82,1213.23 1677.41,1213.23 1677.99,1213.23 1678.58,1213.23 1679.17,1213.23 1679.75,1213.23 1680.34,1213.23 1680.92,1213.23 1681.51,1213.23 1682.1,1213.23 1682.68,1213.23 1683.27,1213.23 1683.86,1213.23 1684.44,1213.23 1685.03,1213.23 1685.62,1213.23 1686.2,1213.23 1686.79,1213.23 1687.37,1213.23 1687.96,1213.23 1688.55,1213.23 1689.13,1213.23 1689.72,1213.23 1690.31,1213.23 1690.89,1213.23 1691.48,1213.23 1692.07,1213.23 1692.65,1213.23 1693.24,1213.23 1693.83,1213.23 1694.41,1213.23 1695,1213.23 1695.58,1213.23 1696.17,1213.23 1696.76,1213.23 1697.34,1213.23 1697.93,1213.23 1698.52,1213.23 1699.1,1213.23 1699.69,1213.23 1700.28,1213.23 1700.86,1213.23 1701.45,1213.23 1702.04,1213.23 1702.62,1213.23 1703.21,1213.23 1703.79,1213.23 1704.38,1213.23 1704.97,1213.23 1705.55,1213.23 1706.14,1213.23 1706.73,1213.23 1707.31,1213.23 1707.9,1213.23 1708.49,1213.23 1709.07,1213.23 1709.66,1213.23 1710.24,1213.23 1710.83,1213.23 1711.42,1213.23 1712,1213.23 1712.59,1213.23 1713.18,1213.23 1713.76,1213.23 1714.35,1213.23 1714.94,1213.23 1715.52,1213.23 1716.11,1213.23 1716.7,1213.23 1717.28,1213.23 1717.87,1213.23 1718.45,1213.23 1719.04,1213.23 1719.63,1213.23 1720.21,1213.23 1720.8,1213.23 1721.39,1213.23 1721.97,1213.23 1722.56,1213.23 1723.15,1213.23 1723.73,1213.23 1724.32,1213.23 1724.91,1213.23 1725.49,1213.23 1726.08,1213.23 1726.66,1213.23 1727.25,1213.23 1727.84,1213.23 1728.42,1213.23 1729.01,1213.23 1729.6,1213.23 1730.18,1213.23 1730.77,1213.23 1731.36,1213.23 1731.94,1213.23 1732.53,1213.23 1733.11,1213.23 1733.7,1213.23 1734.29,1213.23 1734.87,1213.23 1735.46,1213.23 1736.05,1213.23 1736.63,1213.23 1737.22,1213.23 1737.81,1213.23 1738.39,1213.23 1738.98,1213.23 1739.57,1213.23 1740.15,1213.23 1740.74,1213.23 1741.32,1213.23 1741.91,1213.23 1742.5,1213.23 1743.08,1213.23 1743.67,1213.23 1744.26,1213.23 1744.84,1213.23 1745.43,1213.23 1746.02,1213.23 1746.6,1213.23 1747.19,1213.23 1747.78,1213.23 1748.36,1213.23 1748.95,1213.23 1749.53,1213.23 1750.12,1213.23 1750.71,1213.23 1751.29,1213.23 1751.88,1213.23 1752.47,1213.23 1753.05,1213.23 1753.64,1213.23 1754.23,1213.23 1754.81,1213.23 1755.4,1213.23 1755.99,1213.23 1756.57,1213.23 1757.16,1213.23 1757.74,1213.23 1758.33,1213.23 1758.92,1213.23 1759.5,1213.23 1760.09,1213.23 1760.68,1213.23 1761.26,1213.23 1761.85,1213.23 1762.44,1213.23 1763.02,1213.23 1763.61,1213.23 1764.19,1213.23 1764.78,1213.23 1765.37,1213.23 1765.95,1213.23 1766.54,1213.23 1767.13,1213.23 1767.71,1213.23 1768.3,1213.23 1768.89,1213.23 1769.47,1213.23 1770.06,1213.23 1770.65,1213.23 1771.23,1213.23 1771.82,1213.23 1772.4,1213.23 1772.99,1213.23 1773.58,1213.23 1774.16,1213.23 1774.75,1213.23 1775.34,1213.23 1775.92,1213.23 1776.51,1213.23 1777.1,1213.23 1777.68,1213.23 1778.27,1213.23 1778.86,1213.23 1779.44,1213.23 1780.03,1213.23 1780.61,1213.23 1781.2,1213.23 1781.79,1213.23 1782.37,1213.23 1782.96,1213.23 1783.55,1213.23 1784.13,1213.23 1784.72,1213.23 1785.31,1213.23 1785.89,1213.23 1786.48,1213.23 1787.06,1213.23 1787.65,1213.23 1788.24,1213.23 1788.82,1213.23 1789.41,1213.23 1790,1213.23 1790.58,1213.23 1791.17,1213.23 1791.76,1213.23 1792.34,1213.23 1792.93,1213.23 1793.52,1213.23 1794.1,1213.23 1794.69,1213.23 1795.27,1213.23 1795.86,1213.23 1796.45,1213.23 1797.03,1213.23 1797.62,1213.23 1798.21,1213.23 1798.79,1213.23 1799.38,1213.23 1799.97,1213.23 1800.55,1213.23 1801.14,1213.23 1801.73,1213.23 1802.31,1213.23 1802.9,1213.23 1803.48,1213.23 1804.07,1213.23 1804.66,1213.23 1805.24,1213.23 1805.83,1213.23 1806.42,1213.23 1807,1213.23 1807.59,1213.23 1808.18,1213.23 1808.76,1213.23 1809.35,1213.23 1809.94,1213.23 1810.52,1213.23 1811.11,1213.23 1811.69,1213.23 1812.28,1213.23 1812.87,1213.23 1813.45,1213.23 1814.04,1213.23 1814.63,1213.23 1815.21,1213.23 1815.8,1213.23 1816.39,1213.23 1816.97,1213.23 1817.56,1213.23 1818.14,1213.23 1818.73,1213.23 1819.32,1213.23 1819.9,1213.23 1820.49,1213.23 1821.08,1213.23 1821.66,1213.23 1822.25,1213.23 1822.84,1213.23 1823.42,1213.23 1824.01,1213.23 1824.6,1213.23 1825.18,1213.23 1825.77,1213.23 1826.35,1213.23 1826.94,1213.23 1827.53,1213.23 1828.11,1213.23 1828.7,1213.23 1829.29,1213.23 1829.87,1213.23 1830.46,1213.23 1831.05,1213.23 1831.63,1213.23 1832.22,1213.23 1832.81,1213.23 1833.39,1213.23 1833.98,1213.23 1834.56,1213.23 1835.15,1213.23 1835.74,1213.23 1836.32,1213.23 1836.91,1213.23 1837.5,1213.23 1838.08,1213.23 1838.67,1213.23 1839.26,1213.23 1839.84,1213.23 1840.43,1213.23 1841.01,1213.23 1841.6,1213.23 1842.19,1213.23 1842.77,1213.23 1843.36,1213.23 1843.95,1213.23 1844.53,1213.23 1845.12,1213.23 1845.71,1213.23 1846.29,1213.23 1846.88,1213.23 1847.47,1213.23 1848.05,1213.23 1848.64,1213.23 1849.22,1213.23 1849.81,1213.23 1850.4,1213.23 1850.98,1213.23 1851.57,1213.23 1852.16,1213.23 1852.74,1213.23 1853.33,1213.23 1853.92,1213.23 1854.5,1213.23 1855.09,1213.23 1855.68,1213.23 1856.26,1213.23 1856.85,1213.23 1857.43,1213.23 1858.02,1213.23 1858.61,1213.23 1859.19,1213.23 1859.78,1213.23 1860.37,1213.23 1860.95,1213.23 1861.54,1213.23 1862.13,1213.23 1862.71,1213.23 1863.3,1213.23 1863.88,1213.23 1864.47,1213.23 1865.06,1213.23 1865.64,1213.23 1866.23,1213.23 1866.82,1213.23 1867.4,1213.23 1867.99,1213.23 1868.58,1213.23 1869.16,1213.23 1869.75,1213.23 1870.34,1213.23 1870.92,1213.23 1871.51,1213.23 1872.09,1213.23 1872.68,1213.23 1873.27,1213.23 1873.85,1213.23 1874.44,1213.23 1875.03,1213.23 1875.61,1213.23 1876.2,1213.23 1876.79,1213.23 1877.37,1213.23 1877.96,1213.23 1878.55,1213.23 1879.13,1213.23 1879.72,1213.23 1880.3,1213.23 1880.89,1213.23 1881.48,1213.23 1882.06,1213.23 1882.65,1213.23 1883.24,1213.23 1883.82,1213.23 1884.41,1213.23 1885,1213.23 1885.58,1213.23 1886.17,1213.23 1886.76,1213.23 1887.34,1213.23 1887.93,1213.23 1888.51,1213.23 1889.1,1213.23 1889.69,1213.23 1890.27,1213.23 1890.86,1213.23 1891.45,1213.23 1892.03,1213.23 1892.62,1213.23 1893.21,1213.23 1893.79,1213.23 1894.38,1213.23 1894.96,1213.23 1895.55,1213.23 1896.14,1213.23 1896.72,1213.23 1897.31,1213.23 1897.9,1213.23 1898.48,1213.23 1899.07,1213.23 1899.66,1213.23 1900.24,1213.23 1900.83,1213.23 1901.42,1213.23 1902,1213.23 1902.59,1213.23 1903.17,1213.23 1903.76,1213.23 1904.35,1213.23 1904.93,1213.23 1905.52,1213.23 1906.11,1213.23 1906.69,1213.23 1907.28,1213.23 1907.87,1213.23 1908.45,1213.23 1909.04,1213.23 1909.63,1213.23 1910.21,1213.23 1910.8,1213.23 1911.38,1213.23 1911.97,1213.23 1912.56,1213.23 1913.14,1213.23 1913.73,1213.23 1914.32,1213.23 1914.9,1213.23 1915.49,1213.23 1916.08,1213.23 1916.66,1213.23 1917.25,1213.23 1917.83,1213.23 1918.42,1213.23 1919.01,1213.23 1919.59,1213.23 1920.18,1213.23 1920.77,1213.23 1921.35,1213.23 1921.94,1213.23 1922.53,1213.23 1923.11,1213.23 1923.7,1213.23 1924.29,1213.23 1924.87,1213.23 1925.46,1213.23 1926.04,1213.23 1926.63,1213.23 1927.22,1213.23 1927.8,1213.23 1928.39,1213.23 1928.98,1213.23 1929.56,1213.23 1930.15,1213.23 1930.74,1213.23 1931.32,1213.23 1931.91,1213.23 1932.5,1213.23 1933.08,1213.23 1933.67,1213.23 1934.25,1213.23 1934.84,1213.23 1935.43,1213.23 1936.01,1213.23 1936.6,1213.23 1937.19,1213.23 1937.77,1213.23 1938.36,1213.23 1938.95,1213.23 1939.53,1213.23 1940.12,1213.23 1940.71,1213.23 1941.29,1213.23 1941.88,1213.23 1942.46,1213.23 1943.05,1213.23 1943.64,1213.23 1944.22,1213.23 1944.81,1213.23 1945.4,1213.23 1945.98,1213.23 1946.57,1213.23 1947.16,1213.23 1947.74,1213.23 1948.33,1213.23 1948.91,1213.23 1949.5,1213.23 1950.09,1213.23 1950.67,1213.23 1951.26,1213.23 1951.85,1213.23 1952.43,1213.23 1953.02,1213.23 1953.61,1213.23 1954.19,1213.23 1954.78,1213.23 1955.37,1213.23 1955.95,1213.23 1956.54,1213.23 1957.12,1213.23 1957.71,1213.23 1958.3,1213.23 1958.88,1213.23 1959.47,1213.23 1960.06,1213.23 1960.64,1213.23 1961.23,1213.23 1961.82,1213.23 1962.4,1213.23 1962.99,1213.23 1963.58,1213.23 1964.16,1213.23 1964.75,1213.23 1965.33,1213.23 1965.92,1213.23 1966.51,1213.23 1967.09,1213.23 1967.68,1213.23 1968.27,1213.23 1968.85,1213.23 1969.44,1213.23 1970.03,1213.23 1970.61,1213.23 1971.2,1213.23 1971.78,1213.23 1972.37,1213.23 1972.96,1213.23 1973.54,1213.23 1974.13,1213.23 1974.72,1213.23 1975.3,1213.23 1975.89,1213.23 1976.48,1213.23 1977.06,1213.23 1977.65,1213.23 1978.24,1213.23 1978.82,1213.23 1979.41,1213.23 1979.99,1213.23 1980.58,1213.23 1981.17,1213.23 1981.75,1213.23 1982.34,1213.23 1982.93,1213.23 1983.51,1213.23 1984.1,1213.23 1984.69,1213.23 1985.27,1213.23 1985.86,1213.23 1986.45,1213.23 1987.03,1213.23 1987.62,1213.23 1988.2,1213.23 1988.79,1213.23 1989.38,1213.23 1989.96,1213.23 1990.55,1213.23 1991.14,1213.23 1991.72,1213.23 1992.31,1213.23 1992.9,1213.23 1993.48,1213.23 1994.07,1213.23 1994.65,1213.23 1995.24,1213.23 1995.83,1213.23 1996.41,1213.23 1997,1213.23 1997.59,1213.23 1998.17,1213.23 1998.76,1213.23 1999.35,1213.23 1999.93,1213.23 2000.52,1213.23 2001.11,1213.23 2001.69,1213.23 2002.28,1213.23 2002.86,1213.23 2003.45,1213.23 2004.04,1213.23 2004.62,1213.23 2005.21,1213.23 2005.8,1213.23 2006.38,1213.23 2006.97,1213.23 2007.56,1213.23 2008.14,1213.23 2008.73,1213.23 2009.32,1213.23 2009.9,1213.23 2010.49,1213.23 2011.07,1213.23 2011.66,1213.23 2012.25,1213.23 2012.83,1213.23 2013.42,1213.23 2014.01,1213.23 2014.59,1213.23 2015.18,1213.23 2015.77,1213.23 2016.35,1213.23 2016.94,1213.23 2017.53,1213.23 2018.11,1213.23 2018.7,1213.23 2019.28,1213.23 2019.87,1213.23 2020.46,1213.23 2021.04,1213.23 2021.63,1213.23 2022.22,1213.23 2022.8,1213.23 2023.39,1213.23 2023.98,1213.23 2024.56,1213.23 2025.15,1213.23 2025.73,1213.23 2026.32,1213.23 2026.91,1213.23 2027.49,1213.23 2028.08,1213.23 2028.67,1213.23 2029.25,1213.23 2029.84,1213.23 2030.43,1213.23 2031.01,1213.23 2031.6,1213.23 2032.19,1213.23 2032.77,1213.23 2033.36,1213.23 2033.94,1213.23 2034.53,1213.23 2035.12,1213.23 2035.7,1213.23 2036.29,1213.23 2036.88,1213.23 2037.46,1213.23 2038.05,1213.23 2038.64,1213.23 2039.22,1213.23 2039.81,1213.23 2040.4,1213.23 2040.98,1213.23 2041.57,1213.23 2042.15,1213.23 2042.74,1213.23 2043.33,1213.23 2043.91,1213.23 2044.5,1213.23 2045.09,1213.23 2045.67,1213.23 2046.26,1213.23 2046.85,1213.23 2047.43,1213.23 2048.02,1213.23 2048.6,1213.23 2049.19,1213.23 2049.78,1213.23 2050.36,1213.23 2050.95,1213.23 2051.54,1213.23 2052.12,1213.23 2052.71,1213.23 2053.3,1213.23 2053.88,1213.23 2054.47,1213.23 2055.06,1213.23 2055.64,1213.23 2056.23,1213.23 2056.81,1213.23 2057.4,1213.23 2057.99,1213.23 2058.57,1213.23 2059.16,1213.23 2059.75,1213.23 2060.33,1213.23 2060.92,1213.23 2061.51,1213.23 2062.09,1213.23 2062.68,1213.23 2063.27,1213.23 2063.85,1213.23 2064.44,1213.23 2065.02,1213.23 2065.61,1213.23 2066.2,1213.23 2066.78,1213.23 2067.37,1213.23 2067.96,1213.23 2068.54,1213.23 2069.13,1213.23 2069.72,1213.23 2070.3,1213.23 2070.89,1213.23 2071.48,1213.23 2072.06,1213.23 2072.65,1213.23 2073.23,1213.23 2073.82,1213.23 2074.41,1213.23 2074.99,1213.23 2075.58,1213.23 2076.17,1213.23 2076.75,1213.23 2077.34,1213.23 2077.93,1213.23 2078.51,1213.23 2079.1,1213.23 2079.68,1213.23 2080.27,1213.23 2080.86,1213.23 2081.44,1213.23 2082.03,1213.23 2082.62,1213.23 2083.2,1213.23 2083.79,1213.23 2084.38,1213.23 2084.96,1213.23 2085.55,1213.23 2086.14,1213.23 2086.72,1213.23 2087.31,1213.23 2087.89,1213.23 2088.48,1213.23 2089.07,1213.23 2089.65,1213.23 2090.24,1213.23 2090.83,1213.23 2091.41,1213.23 2092,1213.23 2092.59,1213.23 2093.17,1213.23 2093.76,1213.23 2094.35,1213.23 2094.93,1213.23 2095.52,1213.23 2096.1,1213.23 2096.69,1213.23 2097.28,1213.23 2097.86,1213.23 2098.45,1213.23 2099.04,1213.23 2099.62,1213.23 2100.21,1213.23 2100.8,1213.23 2101.38,1213.23 2101.97,1213.23 2102.55,1213.23 2103.14,1213.23 2103.73,1213.23 2104.31,1213.23 2104.9,1213.23 2105.49,1213.23 2106.07,1213.23 2106.66,1213.23 2107.25,1213.23 2107.83,1213.23 2108.42,1213.23 2109.01,1213.23 2109.59,1213.23 2110.18,1213.23 2110.76,1213.23 2111.35,1213.23 2111.94,1213.23 2112.52,1213.23 2113.11,1213.23 2113.7,1213.23 2114.28,1213.23 2114.87,1213.23 2115.46,1213.23 2116.04,1213.23 2116.63,1213.23 2117.22,1213.23 2117.8,1213.23 2118.39,1213.23 2118.97,1213.23 2119.56,1213.23 2120.15,1213.23 2120.73,1213.23 2121.32,1213.23 2121.91,1213.23 2122.49,1213.23 2123.08,1213.23 2123.67,1213.23 2124.25,1213.23 2124.84,1213.23 2125.42,1213.23 2126.01,1213.23 2126.6,1213.23 2127.18,1213.23 2127.77,1213.23 2128.36,1213.23 2128.94,1213.23 2129.53,1213.23 2130.12,1213.23 2130.7,1213.23 2131.29,1213.23 2131.88,1213.23 2132.46,1213.23 2133.05,1213.23 2133.63,1213.23 2134.22,1213.23 2134.81,1213.23 2135.39,1213.23 2135.98,1213.23 2136.57,1213.23 2137.15,1213.23 2137.74,1213.23 2138.33,1213.23 2138.91,1213.23 2139.5,1213.23 2140.09,1213.23 2140.67,1213.23 2141.26,1213.23 2141.84,1213.23 2142.43,1213.23 2143.02,1213.23 2143.6,1213.23 2144.19,1213.23 2144.78,1213.23 2145.36,1213.23 2145.95,1213.23 2146.54,1213.23 2147.12,1213.23 2147.71,1213.23 2148.3,1213.23 2148.88,1213.23 2149.47,1213.23 2150.05,1213.23 2150.64,1213.23 2151.23,1213.23 2151.81,1213.23 2152.4,1213.23 2152.99,1213.23 2153.57,1213.23 2154.16,1213.23 2154.75,1213.23 2155.33,1213.23 2155.92,1213.23 2156.5,1213.23 2157.09,1213.23 2157.68,1213.23 2158.26,1213.23 \"/>\n<path clip-path=\"url(#clip782)\" d=\"M986.025 1213.12 L986.612 1213.12 L987.198 1213.12 L987.785 1213.12 L988.371 1213.12 L988.957 1213.12 L989.544 1213.12 L990.13 1213.12 L990.717 1213.12 L991.303 1213.12 L991.889 1213.12 L992.476 1213.12 L993.062 1213.12 L993.649 1213.12 L994.235 1213.12 L994.822 1213.12 L995.408 1213.12 L995.994 1213.12 L996.581 1213.12 L997.167 1213.12 L997.754 1213.12 L998.34 1213.12 L998.926 1213.12 L999.513 1213.12 L1000.1 1213.12 L1000.69 1213.12 L1001.27 1213.12 L1001.86 1213.12 L1002.44 1213.12 L1003.03 1213.12 L1003.62 1213.12 L1004.2 1213.12 L1004.79 1213.12 L1005.38 1213.12 L1005.96 1213.12 L1006.55 1213.12 L1007.14 1213.12 L1007.72 1213.12 L1008.31 1213.12 L1008.9 1213.12 L1009.48 1213.12 L1010.07 1213.12 L1010.65 1213.12 L1011.24 1213.12 L1011.83 1213.12 L1012.41 1213.12 L1013 1213.12 L1013.59 1213.12 L1014.17 1213.12 L1014.76 1213.12 L1015.35 1213.12 L1015.93 1213.12 L1016.52 1213.12 L1017.11 1213.12 L1017.69 1213.12 L1018.28 1213.12 L1018.86 1213.12 L1019.45 1213.12 L1020.04 1213.12 L1020.62 1213.12 L1021.21 1213.12 L1021.8 1213.12 L1022.38 1213.12 L1022.97 1213.12 L1023.56 1213.12 L1024.14 1213.12 L1024.73 1213.12 L1025.32 1213.12 L1025.9 1213.12 L1026.49 1213.12 L1027.07 1213.12 L1027.66 1213.12 L1028.25 1213.12 L1028.83 1213.12 L1029.42 1213.12 L1030.01 1213.12 L1030.59 1213.12 L1031.18 1213.12 L1031.77 1213.12 L1032.35 1213.12 L1032.94 1213.12 L1033.52 1213.12 L1034.11 1213.12 L1034.7 1213.12 L1035.28 1213.12 L1035.87 1213.12 L1036.46 1213.12 L1037.04 1213.12 L1037.63 1213.12 L1038.22 1213.12 L1038.8 1213.12 L1039.39 1213.12 L1039.98 1213.12 L1040.56 1213.12 L1041.15 1213.12 L1041.73 1213.12 L1042.32 1213.12 L1042.91 1213.12 L1043.49 1213.12 L1044.08 1213.12 L1044.67 1213.12 L1045.25 1213.12 L1045.84 1213.12 L1046.43 1213.12 L1047.01 1213.12 L1047.6 1213.12 L1048.19 1213.12 L1048.77 1213.12 L1049.36 1213.12 L1049.94 1213.12 L1050.53 1213.12 L1051.12 1213.12 L1051.7 1213.12 L1052.29 1213.12 L1052.88 1213.12 L1053.46 1213.12 L1054.05 1213.12 L1054.64 1213.12 L1055.22 1213.12 L1055.81 1213.12 L1056.39 1213.12 L1056.98 1213.12 L1057.57 1213.12 L1058.15 1213.12 L1058.74 1213.12 L1059.33 1213.12 L1059.91 1213.12 L1060.5 1213.12 L1061.09 1213.12 L1061.67 1213.12 L1062.26 1213.12 L1062.85 1213.12 L1063.43 1213.12 L1064.02 1213.12 L1064.6 1213.12 L1065.19 1213.12 L1065.78 1213.12 L1066.36 1213.12 L1066.95 1213.12 L1067.54 1213.12 L1068.12 1213.12 L1068.71 1213.12 L1069.3 1213.12 L1069.88 1213.12 L1070.47 1213.12 L1071.06 1213.12 L1071.64 1213.12 L1072.23 1213.12 L1072.81 1213.12 L1073.4 1213.12 L1073.99 1213.12 L1074.57 1213.12 L1075.16 1213.12 L1075.75 1213.12 L1076.33 1213.12 L1076.92 1213.12 L1077.51 1213.12 L1078.09 1213.12 L1078.68 1213.12 L1079.26 1213.12 L1079.85 1213.12 L1080.44 1213.12 L1081.02 1213.12 L1081.61 1213.12 L1082.2 1213.12 L1082.78 1213.12 L1083.37 1213.12 L1083.96 1213.12 L1084.54 1213.12 L1085.13 1213.12 L1085.72 1213.12 L1086.3 1213.12 L1086.89 1213.12 L1087.47 1213.12 L1088.06 1213.12 L1088.65 1213.12 L1089.23 1213.12 L1089.82 1213.12 L1090.41 1213.12 L1090.99 1213.12 L1091.58 1213.12 L1092.17 1213.12 L1092.75 1213.12 L1093.34 1213.12 L1093.93 1213.12 L1094.51 1213.12 L1095.1 1213.12 L1095.68 1213.12 L1096.27 1213.12 L1096.86 1213.12 L1097.44 1213.12 L1098.03 1213.12 L1098.62 1213.12 L1099.2 1213.12 L1099.79 1213.12 L1100.38 1213.12 L1100.96 1213.12 L1101.55 1213.12 L1102.14 1213.12 L1102.72 1213.12 L1103.31 1213.12 L1103.89 1213.12 L1104.48 1213.12 L1105.07 1213.12 L1105.65 1213.12 L1106.24 1213.12 L1106.83 1213.12 L1107.41 1213.12 L1108 1213.12 L1108.59 1213.12 L1109.17 1213.12 L1109.76 1213.12 L1110.34 1213.12 L1110.93 1213.12 L1111.52 1213.12 L1112.1 1213.12 L1112.69 1213.12 L1113.28 1213.12 L1113.86 1213.12 L1114.45 1213.12 L1115.04 1213.12 L1115.62 1213.12 L1116.21 1213.12 L1116.8 1213.12 L1117.38 1213.12 L1117.97 1213.12 L1118.55 1213.12 L1119.14 1213.12 L1119.73 1213.12 L1120.31 1213.12 L1120.9 1213.12 L1121.49 1213.12 L1122.07 1213.12 L1122.66 1213.12 L1123.25 1213.12 L1123.83 1213.12 L1124.42 1213.12 L1125.01 1213.12 L1125.59 1213.12 L1126.18 1213.12 L1126.76 1213.12 L1127.35 1213.12 L1127.94 1213.12 L1128.52 1213.12 L1129.11 1213.12 L1129.7 1213.12 L1130.28 1213.12 L1130.87 1213.12 L1131.46 1213.12 L1132.04 1213.12 L1132.63 1213.12 L1133.21 1213.12 L1133.8 1213.12 L1134.39 1213.12 L1134.97 1213.12 L1135.56 1213.12 L1136.15 1213.12 L1136.73 1213.12 L1137.32 1213.12 L1137.91 1213.12 L1138.49 1213.12 L1139.08 1213.12 L1139.67 1213.12 L1140.25 1213.12 L1140.84 1213.12 L1141.42 1213.12 L1142.01 1213.12 L1142.6 1213.12 L1143.18 1213.12 L1143.77 1213.12 L1144.36 1213.12 L1144.94 1213.12 L1145.53 1213.12 L1146.12 1213.12 L1146.7 1213.12 L1147.29 1213.12 L1147.88 1213.12 L1148.46 1213.12 L1149.05 1213.12 L1149.63 1213.12 L1150.22 1213.12 L1150.81 1213.12 L1151.39 1213.12 L1151.98 1213.12 L1152.57 1213.12 L1153.15 1213.12 L1153.74 1213.12 L1154.33 1213.12 L1154.91 1213.12 L1155.5 1213.12 L1156.09 1213.12 L1156.67 1213.12 L1157.26 1213.12 L1157.84 1213.12 L1158.43 1213.12 L1159.02 1213.12 L1159.6 1213.12 L1160.19 1213.12 L1160.78 1213.12 L1161.36 1213.12 L1161.95 1213.12 L1162.54 1213.12 L1163.12 1213.12 L1163.71 1213.12 L1164.29 1213.12 L1164.88 1213.12 L1165.47 1213.12 L1166.05 1213.12 L1166.64 1213.12 L1167.23 1213.12 L1167.81 1213.12 L1168.4 1213.12 L1168.99 1213.12 L1169.57 1213.12 L1170.16 1213.12 L1170.75 1213.12 L1171.33 1213.12 L1171.92 1213.12 L1172.5 1213.12 L1173.09 1213.12 L1173.68 1213.12 L1174.26 1213.12 L1174.85 1213.12 L1175.44 1213.12 L1176.02 1213.12 L1176.61 1213.12 L1177.2 1213.12 L1177.78 1213.12 L1178.37 1213.12 L1178.96 1213.12 L1179.54 1213.12 L1180.13 1213.12 L1180.71 1213.12 L1181.3 1213.12 L1181.89 1213.12 L1182.47 1213.12 L1183.06 1213.12 L1183.65 1213.12 L1184.23 1213.12 L1184.82 1213.12 L1185.41 1213.12 L1185.99 1213.12 L1186.58 1213.12 L1187.16 1213.12 L1187.75 1213.12 L1188.34 1213.12 L1188.92 1213.12 L1189.51 1213.12 L1190.1 1213.12 L1190.68 1213.12 L1191.27 1213.12 L1191.86 1213.12 L1192.44 1213.12 L1193.03 1213.12 L1193.62 1213.12 L1194.2 1213.12 L1194.79 1213.12 L1195.37 1213.12 L1195.96 1213.12 L1196.55 1213.12 L1197.13 1213.12 L1197.72 1213.12 L1198.31 1213.12 L1198.89 1213.12 L1199.48 1213.12 L1200.07 1213.12 L1200.65 1213.12 L1201.24 1213.12 L1201.83 1213.12 L1202.41 1213.12 L1203 1213.12 L1203.58 1213.12 L1204.17 1213.12 L1204.76 1213.12 L1205.34 1213.12 L1205.93 1213.12 L1206.52 1213.12 L1207.1 1213.12 L1207.69 1213.12 L1208.28 1213.12 L1208.86 1213.12 L1209.45 1213.12 L1210.03 1213.12 L1210.62 1213.12 L1211.21 1213.12 L1211.79 1213.12 L1212.38 1213.12 L1212.97 1213.12 L1213.55 1213.12 L1214.14 1213.12 L1214.73 1213.12 L1215.31 1213.12 L1215.9 1213.12 L1216.49 1213.12 L1217.07 1213.12 L1217.66 1213.12 L1218.24 1213.12 L1218.83 1213.12 L1219.42 1213.12 L1220 1213.12 L1220.59 1213.12 L1221.18 1213.12 L1221.76 1213.12 L1222.35 1213.12 L1222.94 1213.12 L1223.52 1213.12 L1224.11 1213.12 L1224.7 1213.12 L1225.28 1213.12 L1225.87 1213.12 L1226.45 1213.12 L1227.04 1213.12 L1227.63 1213.12 L1228.21 1213.12 L1228.8 1213.12 L1229.39 1213.12 L1229.97 1213.12 L1230.56 1213.12 L1231.15 1213.12 L1231.73 1213.12 L1232.32 1213.12 L1232.91 1213.12 L1233.49 1213.12 L1234.08 1213.12 L1234.66 1213.12 L1235.25 1213.12 L1235.84 1213.12 L1236.42 1213.12 L1237.01 1213.12 L1237.6 1213.12 L1238.18 1213.12 L1238.77 1213.12 L1239.36 1213.12 L1239.94 1213.12 L1240.53 1213.12 L1241.11 1213.12 L1241.7 1213.12 L1242.29 1213.12 L1242.87 1213.12 L1243.46 1213.12 L1244.05 1213.12 L1244.63 1213.12 L1245.22 1213.12 L1245.81 1213.12 L1246.39 1213.12 L1246.98 1213.12 L1247.57 1213.12 L1248.15 1213.12 L1248.74 1213.12 L1249.32 1213.12 L1249.91 1213.12 L1250.5 1213.12 L1251.08 1213.12 L1251.67 1213.12 L1252.26 1213.12 L1252.84 1213.12 L1253.43 1213.12 L1254.02 1213.12 L1254.6 1213.12 L1255.19 1213.12 L1255.78 1213.12 L1256.36 1213.12 L1256.95 1213.12 L1257.53 1213.12 L1258.12 1213.12 L1258.71 1213.12 L1259.29 1213.12 L1259.88 1213.12 L1260.47 1213.12 L1261.05 1213.12 L1261.64 1213.12 L1262.23 1213.12 L1262.81 1213.12 L1263.4 1213.12 L1263.98 1213.12 L1264.57 1213.12 L1265.16 1213.12 L1265.74 1213.12 L1266.33 1213.12 L1266.92 1213.12 L1267.5 1213.12 L1268.09 1213.12 L1268.68 1213.12 L1269.26 1213.12 L1269.85 1213.12 L1270.44 1213.12 L1271.02 1213.12 L1271.61 1213.12 L1272.19 1213.12 L1272.78 1213.12 L1273.37 1213.12 L1273.95 1213.12 L1274.54 1213.12 L1275.13 1213.12 L1275.71 1213.12 L1276.3 1213.12 L1276.89 1213.12 L1277.47 1213.12 L1278.06 1213.12 L1278.65 1213.12 L1279.23 1213.12 L1279.82 1213.12 L1280.4 1213.12 L1280.99 1213.12 L1281.58 1213.12 L1282.16 1213.12 L1282.75 1213.12 L1283.34 1213.12 L1283.92 1213.12 L1284.51 1213.12 L1285.1 1213.12 L1285.68 1213.12 L1286.27 1213.12 L1286.86 1213.12 L1287.44 1213.12 L1288.03 1213.12 L1288.61 1213.12 L1289.2 1213.12 L1289.79 1213.12 L1290.37 1213.12 L1290.96 1213.12 L1291.55 1213.12 L1292.13 1213.12 L1292.72 1213.12 L1293.31 1213.12 L1293.89 1213.12 L1294.48 1213.12 L1295.06 1213.12 L1295.65 1213.12 L1296.24 1213.12 L1296.82 1213.12 L1297.41 1213.12 L1298 1213.12 L1298.58 1213.12 L1299.17 1213.12 L1299.76 1213.12 L1300.34 1213.12 L1300.93 1213.12 L1301.52 1213.12 L1302.1 1213.12 L1302.69 1213.12 L1303.27 1213.12 L1303.86 1213.12 L1304.45 1213.12 L1305.03 1213.12 L1305.62 1213.12 L1306.21 1213.12 L1306.79 1213.12 L1307.38 1213.12 L1307.97 1213.12 L1308.55 1213.12 L1309.14 1213.12 L1309.73 1213.12 L1310.31 1213.12 L1310.9 1213.12 L1311.48 1213.12 L1312.07 1213.12 L1312.66 1213.12 L1313.24 1213.12 L1313.83 1213.12 L1314.42 1213.12 L1315 1213.12 L1315.59 1213.12 L1316.18 1213.12 L1316.76 1213.12 L1317.35 1213.12 L1317.93 1213.12 L1318.52 1213.12 L1319.11 1213.12 L1319.69 1213.12 L1320.28 1213.12 L1320.87 1213.12 L1321.45 1213.12 L1322.04 1213.12 L1322.63 1213.12 L1323.21 1213.12 L1323.8 1213.12 L1324.39 1213.12 L1324.97 1213.12 L1325.56 1213.12 L1326.14 1213.12 L1326.73 1213.12 L1327.32 1213.12 L1327.9 1213.12 L1328.49 1213.12 L1329.08 1213.12 L1329.66 1213.12 L1330.25 1213.12 L1330.84 1213.12 L1331.42 1213.12 L1332.01 1213.12 L1332.6 1213.12 L1333.18 1213.12 L1333.77 1213.12 L1334.35 1213.12 L1334.94 1213.12 L1335.53 1213.12 L1336.11 1213.12 L1336.7 1213.12 L1337.29 1213.12 L1337.87 1213.12 L1338.46 1213.12 L1339.05 1213.12 L1339.63 1213.12 L1340.22 1213.12 L1340.8 1213.12 L1341.39 1213.12 L1341.98 1213.12 L1342.56 1213.12 L1343.15 1213.12 L1343.74 1213.12 L1344.32 1213.12 L1344.91 1213.12 L1345.5 1213.12 L1346.08 1213.12 L1346.67 1213.12 L1347.26 1213.12 L1347.84 1213.12 L1348.43 1213.12 L1349.01 1213.12 L1349.6 1213.12 L1350.19 1213.12 L1350.77 1213.12 L1351.36 1213.12 L1351.95 1213.12 L1352.53 1213.12 L1353.12 1213.12 L1353.71 1213.12 L1354.29 1213.12 L1354.88 1213.12 L1355.47 1213.12 L1356.05 1213.12 L1356.64 1213.12 L1357.22 1213.12 L1357.81 1213.12 L1358.4 1213.12 L1358.98 1213.12 L1359.57 1213.12 L1360.16 1213.12 L1360.74 1213.12 L1361.33 1213.12 L1361.92 1213.12 L1362.5 1213.12 L1363.09 1213.12 L1363.68 1213.12 L1364.26 1213.12 L1364.85 1213.12 L1365.43 1213.12 L1366.02 1213.12 L1366.61 1213.12 L1367.19 1213.12 L1367.78 1213.12 L1368.37 1213.12 L1368.95 1213.12 L1369.54 1213.12 L1370.13 1213.12 L1370.71 1213.12 L1371.3 1213.12 L1371.88 1213.12 L1372.47 1213.12 L1373.06 1213.12 L1373.64 1213.12 L1374.23 1213.12 L1374.82 1213.12 L1375.4 1213.12 L1375.99 1213.12 L1376.58 1213.12 L1377.16 1213.12 L1377.75 1213.12 L1378.34 1213.12 L1378.92 1213.12 L1379.51 1213.12 L1380.09 1213.12 L1380.68 1213.12 L1381.27 1213.12 L1381.85 1213.12 L1382.44 1213.12 L1383.03 1213.12 L1383.61 1213.12 L1384.2 1213.12 L1384.79 1213.12 L1385.37 1213.12 L1385.96 1213.12 L1386.55 1213.12 L1387.13 1213.12 L1387.72 1213.12 L1388.3 1213.12 L1388.89 1213.12 L1389.48 1213.12 L1390.06 1213.12 L1390.65 1213.12 L1391.24 1213.12 L1391.82 1213.12 L1392.41 1213.12 L1393 1213.12 L1393.58 1213.12 L1394.17 1213.12 L1394.75 1213.12 L1395.34 1213.12 L1395.93 1213.12 L1396.51 1213.12 L1397.1 1213.12 L1397.69 1213.12 L1398.27 1213.12 L1398.86 1213.12 L1399.45 1213.12 L1400.03 1213.12 L1400.62 1213.12 L1401.21 1213.12 L1401.79 1213.12 L1402.38 1213.12 L1402.96 1213.12 L1403.55 1213.12 L1404.14 1213.12 L1404.72 1213.12 L1405.31 1213.12 L1405.9 1213.12 L1406.48 1213.12 L1407.07 1213.12 L1407.66 1213.12 L1408.24 1213.12 L1408.83 1213.12 L1409.42 1213.12 L1410 1213.12 L1410.59 1213.12 L1411.17 1213.12 L1411.76 1213.12 L1412.35 1213.12 L1412.93 1213.12 L1413.52 1213.12 L1414.11 1213.12 L1414.69 1213.12 L1415.28 1213.12 L1415.87 1213.12 L1416.45 1213.12 L1417.04 1213.12 L1417.63 1213.12 L1418.21 1213.12 L1418.8 1213.12 L1419.38 1213.12 L1419.97 1213.12 L1420.56 1213.12 L1421.14 1213.12 L1421.73 1213.12 L1422.32 1213.12 L1422.9 1213.12 L1423.49 1213.12 L1424.08 1213.12 L1424.66 1213.12 L1425.25 1213.12 L1425.83 1213.12 L1426.42 1213.12 L1427.01 1213.12 L1427.59 1213.12 L1428.18 1213.12 L1428.77 1213.12 L1429.35 1213.12 L1429.94 1213.12 L1430.53 1213.12 L1431.11 1213.12 L1431.7 1213.12 L1432.29 1213.12 L1432.87 1213.12 L1433.46 1213.12 L1434.04 1213.12 L1434.63 1213.12 L1435.22 1213.12 L1435.8 1213.12 L1436.39 1213.12 L1436.98 1213.12 L1437.56 1213.12 L1438.15 1213.12 L1438.74 1213.12 L1439.32 1213.12 L1439.91 1213.12 L1440.5 1213.12 L1441.08 1213.12 L1441.67 1213.12 L1442.25 1213.12 L1442.84 1213.12 L1443.43 1213.12 L1444.01 1213.12 L1444.6 1213.12 L1445.19 1213.12 L1445.77 1213.12 L1446.36 1213.12 L1446.95 1213.12 L1447.53 1213.12 L1448.12 1213.12 L1448.7 1213.12 L1449.29 1213.12 L1449.88 1213.12 L1450.46 1213.12 L1451.05 1213.12 L1451.64 1213.12 L1452.22 1213.12 L1452.81 1213.12 L1453.4 1213.12 L1453.98 1213.12 L1454.57 1213.12 L1455.16 1213.12 L1455.74 1213.12 L1456.33 1213.12 L1456.91 1213.12 L1457.5 1213.12 L1458.09 1213.12 L1458.67 1213.12 L1459.26 1213.12 L1459.85 1213.12 L1460.43 1213.12 L1461.02 1213.12 L1461.61 1213.12 L1462.19 1213.12 L1462.78 1213.12 L1463.37 1213.12 L1463.95 1213.12 L1464.54 1213.12 L1465.12 1213.12 L1465.71 1213.12 L1466.3 1213.12 L1466.88 1213.12 L1467.47 1213.12 L1468.06 1213.12 L1468.64 1213.12 L1469.23 1213.12 L1469.82 1213.12 L1470.4 1213.12 L1470.99 1213.12 L1471.57 1213.12 L1472.16 1213.12 L1472.75 1213.12 L1473.33 1213.12 L1473.92 1213.12 L1474.51 1213.12 L1475.09 1213.12 L1475.68 1213.12 L1476.27 1213.12 L1476.85 1213.12 L1477.44 1213.12 L1478.03 1213.12 L1478.61 1213.12 L1479.2 1213.12 L1479.78 1213.12 L1480.37 1213.12 L1480.96 1213.12 L1481.54 1213.12 L1482.13 1213.12 L1482.72 1213.12 L1483.3 1213.12 L1483.89 1213.12 L1484.48 1213.12 L1485.06 1213.12 L1485.65 1213.12 L1486.24 1213.12 L1486.82 1213.12 L1487.41 1213.12 L1487.99 1213.12 L1488.58 1213.12 L1489.17 1213.12 L1489.75 1213.12 L1490.34 1213.12 L1490.93 1213.12 L1491.51 1213.12 L1492.1 1213.12 L1492.69 1213.12 L1493.27 1213.12 L1493.86 1213.12 L1494.45 1213.12 L1495.03 1213.12 L1495.62 1213.12 L1496.2 1213.12 L1496.79 1213.12 L1497.38 1213.12 L1497.96 1213.12 L1498.55 1213.12 L1499.14 1213.12 L1499.72 1213.12 L1500.31 1213.12 L1500.9 1213.12 L1501.48 1213.12 L1502.07 1213.12 L1502.65 1213.12 L1503.24 1213.12 L1503.83 1213.12 L1504.41 1213.12 L1505 1213.12 L1505.59 1213.12 L1506.17 1213.12 L1506.76 1213.12 L1507.35 1213.12 L1507.93 1213.12 L1508.52 1213.12 L1509.11 1213.12 L1509.69 1213.12 L1510.28 1213.12 L1510.86 1213.12 L1511.45 1213.12 L1512.04 1213.12 L1512.62 1213.12 L1513.21 1213.12 L1513.8 1213.12 L1514.38 1213.12 L1514.97 1213.12 L1515.56 1213.12 L1516.14 1213.12 L1516.73 1213.12 L1517.32 1213.12 L1517.9 1213.12 L1518.49 1213.12 L1519.07 1213.12 L1519.66 1213.12 L1520.25 1213.12 L1520.83 1213.12 L1521.42 1213.12 L1522.01 1213.12 L1522.59 1213.12 L1523.18 1213.12 L1523.77 1213.12 L1524.35 1213.12 L1524.94 1213.12 L1525.52 1213.12 L1526.11 1213.12 L1526.7 1213.12 L1527.28 1213.12 L1527.87 1213.12 L1528.46 1213.12 L1529.04 1213.12 L1529.63 1213.12 L1530.22 1213.12 L1530.8 1213.12 L1531.39 1213.12 L1531.98 1213.12 L1532.56 1213.12 L1533.15 1213.12 L1533.73 1213.12 L1534.32 1213.12 L1534.91 1213.12 L1535.49 1213.12 L1536.08 1213.12 L1536.67 1213.12 L1537.25 1213.12 L1537.84 1213.12 L1538.43 1213.12 L1539.01 1213.12 L1539.6 1213.12 L1540.19 1213.12 L1540.77 1213.12 L1541.36 1213.12 L1541.94 1213.12 L1542.53 1213.12 L1543.12 1213.12 L1543.7 1213.12 L1544.29 1213.12 L1544.88 1213.12 L1545.46 1213.12 L1546.05 1213.12 L1546.64 1213.12 L1547.22 1213.12 L1547.81 1213.12 L1548.4 1213.12 L1548.98 1213.12 L1549.57 1213.12 L1550.15 1213.12 L1550.74 1213.12 L1551.33 1213.12 L1551.91 1213.12 L1552.5 1213.12 L1553.09 1213.12 L1553.67 1213.12 L1554.26 1213.12 L1554.85 1213.12 L1555.43 1213.12 L1556.02 1213.12 L1556.6 1213.12 L1557.19 1213.12 L1557.78 1213.12 L1558.36 1213.12 L1558.95 1213.12 L1559.54 1213.12 L1560.12 1213.12 L1560.71 1213.12 L1561.3 1213.12 L1561.88 1213.12 L1562.47 1213.12 L1563.06 1213.12 L1563.64 1213.12 L1564.23 1213.12 L1564.81 1213.12 L1565.4 1213.12 L1565.99 1213.12 L1566.57 1213.12 L1567.16 1213.12 L1567.75 1213.12 L1568.33 1213.12 L1568.92 1213.12 L1569.51 1213.12 L1570.09 1213.12 L1570.68 1213.12 L1571.27 1213.12 L1571.85 1213.12 L1572.44 1213.12 L1573.02 1213.12 L1573.61 1213.12 L1574.2 1213.12 L1574.78 1213.12 L1575.37 1213.12 L1575.96 1213.12 L1576.54 1213.12 L1577.13 1213.12 L1577.72 1213.12 L1578.3 1213.12 L1578.89 1213.12 L1579.47 1213.12 L1580.06 1213.12 L1580.65 1213.12 L1581.23 1213.12 L1581.82 1213.12 L1582.41 1213.12 L1582.99 1213.12 L1583.58 1213.12 L1584.17 1213.12 L1584.75 1213.12 L1585.34 1213.12 L1585.93 1213.12 L1586.51 1213.12 L1587.1 1213.12 L1587.68 1213.12 L1588.27 1213.12 L1588.86 1213.12 L1589.44 1213.12 L1590.03 1213.12 L1590.62 1213.12 L1591.2 1213.12 L1591.79 1213.12 L1592.38 1213.12 L1592.96 1213.12 L1593.55 1213.12 L1594.14 1213.12 L1594.72 1213.12 L1595.31 1213.12 L1595.89 1213.12 L1596.48 1213.12 L1597.07 1213.12 L1597.65 1213.12 L1598.24 1213.12 L1598.83 1213.12 L1599.41 1213.12 L1600 1213.12 L1600.59 1213.12 L1601.17 1213.12 L1601.76 1213.12 L1602.34 1213.12 L1602.93 1213.12 L1603.52 1213.12 L1604.1 1213.12 L1604.69 1213.12 L1605.28 1213.12 L1605.86 1213.12 L1606.45 1213.12 L1607.04 1213.12 L1607.62 1213.12 L1608.21 1213.12 L1608.8 1213.12 L1609.38 1213.12 L1609.97 1213.12 L1610.55 1213.12 L1611.14 1213.12 L1611.73 1213.12 L1612.31 1213.12 L1612.9 1213.12 L1613.49 1213.12 L1614.07 1213.12 L1614.66 1213.12 L1615.25 1213.12 L1615.83 1213.12 L1616.42 1213.12 L1617.01 1213.12 L1617.59 1213.12 L1618.18 1213.12 L1618.76 1213.12 L1619.35 1213.12 L1619.94 1213.12 L1620.52 1213.12 L1621.11 1213.12 L1621.7 1213.12 L1622.28 1213.12 L1622.87 1213.12 L1623.46 1213.12 L1624.04 1213.12 L1624.63 1213.12 L1625.22 1213.12 L1625.8 1213.12 L1626.39 1213.12 L1626.97 1213.12 L1627.56 1213.12 L1628.15 1213.12 L1628.73 1213.12 L1629.32 1213.12 L1629.91 1213.12 L1630.49 1213.12 L1631.08 1213.12 L1631.67 1213.12 L1632.25 1213.12 L1632.84 1213.12 L1633.42 1213.12 L1634.01 1213.12 L1634.6 1213.12 L1635.18 1213.12 L1635.77 1213.12 L1636.36 1213.12 L1636.94 1213.12 L1637.53 1213.12 L1638.12 1213.12 L1638.7 1213.12 L1639.29 1213.12 L1639.88 1213.12 L1640.46 1213.12 L1641.05 1213.12 L1641.63 1213.12 L1642.22 1213.12 L1642.81 1213.12 L1643.39 1213.12 L1643.98 1213.12 L1644.57 1213.12 L1645.15 1213.12 L1645.74 1213.12 L1646.33 1213.12 L1646.91 1213.12 L1647.5 1213.12 L1648.09 1213.12 L1648.67 1213.12 L1649.26 1213.12 L1649.84 1213.12 L1650.43 1213.12 L1651.02 1213.12 L1651.6 1213.12 L1652.19 1213.12 L1652.78 1213.12 L1653.36 1213.12 L1653.95 1213.12 L1654.54 1213.12 L1655.12 1213.12 L1655.71 1213.12 L1656.29 1213.12 L1656.88 1213.12 L1657.47 1213.12 L1658.05 1213.12 L1658.64 1213.12 L1659.23 1213.12 L1659.81 1213.12 L1660.4 1213.12 L1660.99 1213.12 L1661.57 1213.12 L1662.16 1213.12 L1662.75 1213.12 L1663.33 1213.12 L1663.92 1213.12 L1664.5 1213.12 L1665.09 1213.12 L1665.68 1213.12 L1666.26 1213.12 L1666.85 1213.12 L1667.44 1213.12 L1668.02 1213.12 L1668.61 1213.12 L1669.2 1213.12 L1669.78 1213.12 L1670.37 1213.12 L1670.96 1213.12 L1671.54 1213.12 L1672.13 1213.12 L1672.71 1213.12 L1673.3 1213.12 L1673.89 1213.12 L1674.47 1213.12 L1675.06 1213.12 L1675.65 1213.12 L1676.23 1213.12 L1676.82 1213.12 L1677.41 1213.12 L1677.99 1213.12 L1678.58 1213.12 L1679.17 1213.12 L1679.75 1213.12 L1680.34 1213.12 L1680.92 1213.12 L1681.51 1213.12 L1682.1 1213.12 L1682.68 1213.12 L1683.27 1213.12 L1683.86 1213.12 L1684.44 1213.12 L1685.03 1213.12 L1685.62 1213.12 L1686.2 1213.12 L1686.79 1213.12 L1687.37 1213.12 L1687.96 1213.12 L1688.55 1213.12 L1689.13 1213.12 L1689.72 1213.12 L1690.31 1213.12 L1690.89 1213.12 L1691.48 1213.12 L1692.07 1213.12 L1692.65 1213.12 L1693.24 1213.12 L1693.83 1213.12 L1694.41 1213.12 L1695 1213.12 L1695.58 1213.12 L1696.17 1213.12 L1696.76 1213.12 L1697.34 1213.12 L1697.93 1213.12 L1698.52 1213.12 L1699.1 1213.12 L1699.69 1213.12 L1700.28 1213.12 L1700.86 1213.12 L1701.45 1213.12 L1702.04 1213.12 L1702.62 1213.12 L1703.21 1213.12 L1703.79 1213.12 L1704.38 1213.12 L1704.97 1213.12 L1705.55 1213.12 L1706.14 1213.12 L1706.73 1213.12 L1707.31 1213.12 L1707.9 1213.12 L1708.49 1213.12 L1709.07 1213.12 L1709.66 1213.12 L1710.24 1213.12 L1710.83 1213.12 L1711.42 1213.12 L1712 1213.12 L1712.59 1213.12 L1713.18 1213.12 L1713.76 1213.12 L1714.35 1213.12 L1714.94 1213.12 L1715.52 1213.12 L1716.11 1213.12 L1716.7 1213.12 L1717.28 1213.12 L1717.87 1213.12 L1718.45 1213.12 L1719.04 1213.12 L1719.63 1213.12 L1720.21 1213.12 L1720.8 1213.12 L1721.39 1213.12 L1721.97 1213.12 L1722.56 1213.12 L1723.15 1213.12 L1723.73 1213.12 L1724.32 1213.12 L1724.91 1213.12 L1725.49 1213.12 L1726.08 1213.12 L1726.66 1213.12 L1727.25 1213.12 L1727.84 1213.12 L1728.42 1213.12 L1729.01 1213.12 L1729.6 1213.12 L1730.18 1213.12 L1730.77 1213.12 L1731.36 1213.12 L1731.94 1213.12 L1732.53 1213.12 L1733.11 1213.12 L1733.7 1213.12 L1734.29 1213.12 L1734.87 1213.12 L1735.46 1213.12 L1736.05 1213.12 L1736.63 1213.12 L1737.22 1213.12 L1737.81 1213.12 L1738.39 1213.12 L1738.98 1213.12 L1739.57 1213.12 L1740.15 1213.12 L1740.74 1213.12 L1741.32 1213.12 L1741.91 1213.12 L1742.5 1213.12 L1743.08 1213.12 L1743.67 1213.12 L1744.26 1213.12 L1744.84 1213.12 L1745.43 1213.12 L1746.02 1213.12 L1746.6 1213.12 L1747.19 1213.12 L1747.78 1213.12 L1748.36 1213.12 L1748.95 1213.12 L1749.53 1213.12 L1750.12 1213.12 L1750.71 1213.12 L1751.29 1213.12 L1751.88 1213.12 L1752.47 1213.12 L1753.05 1213.12 L1753.64 1213.12 L1754.23 1213.12 L1754.81 1213.12 L1755.4 1213.12 L1755.99 1213.12 L1756.57 1213.12 L1757.16 1213.12 L1757.74 1213.12 L1758.33 1213.12 L1758.92 1213.12 L1759.5 1213.12 L1760.09 1213.12 L1760.68 1213.12 L1761.26 1213.12 L1761.85 1213.12 L1762.44 1213.12 L1763.02 1213.12 L1763.61 1213.12 L1764.19 1213.12 L1764.78 1213.12 L1765.37 1213.12 L1765.95 1213.12 L1766.54 1213.12 L1767.13 1213.12 L1767.71 1213.12 L1768.3 1213.12 L1768.89 1213.12 L1769.47 1213.12 L1770.06 1213.12 L1770.65 1213.12 L1771.23 1213.12 L1771.82 1213.12 L1772.4 1213.12 L1772.99 1213.12 L1773.58 1213.12 L1774.16 1213.12 L1774.75 1213.12 L1775.34 1213.12 L1775.92 1213.12 L1776.51 1213.12 L1777.1 1213.12 L1777.68 1213.12 L1778.27 1213.12 L1778.86 1213.12 L1779.44 1213.12 L1780.03 1213.12 L1780.61 1213.12 L1781.2 1213.12 L1781.79 1213.12 L1782.37 1213.12 L1782.96 1213.12 L1783.55 1213.12 L1784.13 1213.12 L1784.72 1213.12 L1785.31 1213.12 L1785.89 1213.12 L1786.48 1213.12 L1787.06 1213.12 L1787.65 1213.12 L1788.24 1213.12 L1788.82 1213.12 L1789.41 1213.12 L1790 1213.12 L1790.58 1213.12 L1791.17 1213.12 L1791.76 1213.12 L1792.34 1213.12 L1792.93 1213.12 L1793.52 1213.12 L1794.1 1213.12 L1794.69 1213.12 L1795.27 1213.12 L1795.86 1213.12 L1796.45 1213.12 L1797.03 1213.12 L1797.62 1213.12 L1798.21 1213.12 L1798.79 1213.12 L1799.38 1213.12 L1799.97 1213.12 L1800.55 1213.12 L1801.14 1213.12 L1801.73 1213.12 L1802.31 1213.12 L1802.9 1213.12 L1803.48 1213.12 L1804.07 1213.12 L1804.66 1213.12 L1805.24 1213.12 L1805.83 1213.12 L1806.42 1213.12 L1807 1213.12 L1807.59 1213.12 L1808.18 1213.12 L1808.76 1213.12 L1809.35 1213.12 L1809.94 1213.12 L1810.52 1213.12 L1811.11 1213.12 L1811.69 1213.12 L1812.28 1213.12 L1812.87 1213.12 L1813.45 1213.12 L1814.04 1213.12 L1814.63 1213.12 L1815.21 1213.12 L1815.8 1213.12 L1816.39 1213.12 L1816.97 1213.12 L1817.56 1213.12 L1818.14 1213.12 L1818.73 1213.12 L1819.32 1213.12 L1819.9 1213.12 L1820.49 1213.12 L1821.08 1213.12 L1821.66 1213.12 L1822.25 1213.12 L1822.84 1213.12 L1823.42 1213.12 L1824.01 1213.12 L1824.6 1213.12 L1825.18 1213.12 L1825.77 1213.12 L1826.35 1213.12 L1826.94 1213.12 L1827.53 1213.12 L1828.11 1213.12 L1828.7 1213.12 L1829.29 1213.12 L1829.87 1213.12 L1830.46 1213.12 L1831.05 1213.12 L1831.63 1213.12 L1832.22 1213.12 L1832.81 1213.12 L1833.39 1213.12 L1833.98 1213.12 L1834.56 1213.12 L1835.15 1213.12 L1835.74 1213.12 L1836.32 1213.12 L1836.91 1213.12 L1837.5 1213.12 L1838.08 1213.12 L1838.67 1213.12 L1839.26 1213.12 L1839.84 1213.12 L1840.43 1213.12 L1841.01 1213.12 L1841.6 1213.12 L1842.19 1213.12 L1842.77 1213.12 L1843.36 1213.12 L1843.95 1213.12 L1844.53 1213.12 L1845.12 1213.12 L1845.71 1213.12 L1846.29 1213.12 L1846.88 1213.12 L1847.47 1213.12 L1848.05 1213.12 L1848.64 1213.12 L1849.22 1213.12 L1849.81 1213.12 L1850.4 1213.12 L1850.98 1213.12 L1851.57 1213.12 L1852.16 1213.12 L1852.74 1213.12 L1853.33 1213.12 L1853.92 1213.12 L1854.5 1213.12 L1855.09 1213.12 L1855.68 1213.12 L1856.26 1213.12 L1856.85 1213.12 L1857.43 1213.12 L1858.02 1213.12 L1858.61 1213.12 L1859.19 1213.12 L1859.78 1213.12 L1860.37 1213.12 L1860.95 1213.12 L1861.54 1213.12 L1862.13 1213.12 L1862.71 1213.12 L1863.3 1213.12 L1863.88 1213.12 L1864.47 1213.12 L1865.06 1213.12 L1865.64 1213.12 L1866.23 1213.12 L1866.82 1213.12 L1867.4 1213.12 L1867.99 1213.12 L1868.58 1213.12 L1869.16 1213.12 L1869.75 1213.12 L1870.34 1213.12 L1870.92 1213.12 L1871.51 1213.12 L1872.09 1213.12 L1872.68 1213.12 L1873.27 1213.12 L1873.85 1213.12 L1874.44 1213.12 L1875.03 1213.12 L1875.61 1213.12 L1876.2 1213.12 L1876.79 1213.12 L1877.37 1213.12 L1877.96 1213.12 L1878.55 1213.12 L1879.13 1213.12 L1879.72 1213.12 L1880.3 1213.12 L1880.89 1213.12 L1881.48 1213.12 L1882.06 1213.12 L1882.65 1213.12 L1883.24 1213.12 L1883.82 1213.12 L1884.41 1213.12 L1885 1213.12 L1885.58 1213.12 L1886.17 1213.12 L1886.76 1213.12 L1887.34 1213.12 L1887.93 1213.12 L1888.51 1213.12 L1889.1 1213.12 L1889.69 1213.12 L1890.27 1213.12 L1890.86 1213.12 L1891.45 1213.12 L1892.03 1213.12 L1892.62 1213.12 L1893.21 1213.12 L1893.79 1213.12 L1894.38 1213.12 L1894.96 1213.12 L1895.55 1213.12 L1896.14 1213.12 L1896.72 1213.12 L1897.31 1213.12 L1897.9 1213.12 L1898.48 1213.12 L1899.07 1213.12 L1899.66 1213.12 L1900.24 1213.12 L1900.83 1213.12 L1901.42 1213.12 L1902 1213.12 L1902.59 1213.12 L1903.17 1213.12 L1903.76 1213.12 L1904.35 1213.12 L1904.93 1213.12 L1905.52 1213.12 L1906.11 1213.12 L1906.69 1213.12 L1907.28 1213.12 L1907.87 1213.12 L1908.45 1213.12 L1909.04 1213.12 L1909.63 1213.12 L1910.21 1213.12 L1910.8 1213.12 L1911.38 1213.12 L1911.97 1213.12 L1912.56 1213.12 L1913.14 1213.12 L1913.73 1213.12 L1914.32 1213.12 L1914.9 1213.12 L1915.49 1213.12 L1916.08 1213.12 L1916.66 1213.12 L1917.25 1213.12 L1917.83 1213.12 L1918.42 1213.12 L1919.01 1213.12 L1919.59 1213.12 L1920.18 1213.12 L1920.77 1213.12 L1921.35 1213.12 L1921.94 1213.12 L1922.53 1213.12 L1923.11 1213.12 L1923.7 1213.12 L1924.29 1213.12 L1924.87 1213.12 L1925.46 1213.12 L1926.04 1213.12 L1926.63 1213.12 L1927.22 1213.12 L1927.8 1213.12 L1928.39 1213.12 L1928.98 1213.12 L1929.56 1213.12 L1930.15 1213.12 L1930.74 1213.12 L1931.32 1213.12 L1931.91 1213.12 L1932.5 1213.12 L1933.08 1213.12 L1933.67 1213.12 L1934.25 1213.12 L1934.84 1213.12 L1935.43 1213.12 L1936.01 1213.12 L1936.6 1213.12 L1937.19 1213.12 L1937.77 1213.12 L1938.36 1213.12 L1938.95 1213.12 L1939.53 1213.12 L1940.12 1213.12 L1940.71 1213.12 L1941.29 1213.12 L1941.88 1213.12 L1942.46 1213.12 L1943.05 1213.12 L1943.64 1213.12 L1944.22 1213.12 L1944.81 1213.12 L1945.4 1213.12 L1945.98 1213.12 L1946.57 1213.12 L1947.16 1213.12 L1947.74 1213.12 L1948.33 1213.12 L1948.91 1213.12 L1949.5 1213.12 L1950.09 1213.12 L1950.67 1213.12 L1951.26 1213.12 L1951.85 1213.12 L1952.43 1213.12 L1953.02 1213.12 L1953.61 1213.12 L1954.19 1213.12 L1954.78 1213.12 L1955.37 1213.12 L1955.95 1213.12 L1956.54 1213.12 L1957.12 1213.12 L1957.71 1213.12 L1958.3 1213.12 L1958.88 1213.12 L1959.47 1213.12 L1960.06 1213.12 L1960.64 1213.12 L1961.23 1213.12 L1961.82 1213.12 L1962.4 1213.12 L1962.99 1213.12 L1963.58 1213.12 L1964.16 1213.12 L1964.75 1213.12 L1965.33 1213.12 L1965.92 1213.12 L1966.51 1213.12 L1967.09 1213.12 L1967.68 1213.12 L1968.27 1213.12 L1968.85 1213.12 L1969.44 1213.12 L1970.03 1213.12 L1970.61 1213.12 L1971.2 1213.12 L1971.78 1213.12 L1972.37 1213.12 L1972.96 1213.12 L1973.54 1213.12 L1974.13 1213.12 L1974.72 1213.12 L1975.3 1213.12 L1975.89 1213.12 L1976.48 1213.12 L1977.06 1213.12 L1977.65 1213.12 L1978.24 1213.12 L1978.82 1213.12 L1979.41 1213.12 L1979.99 1213.12 L1980.58 1213.12 L1981.17 1213.12 L1981.75 1213.12 L1982.34 1213.12 L1982.93 1213.12 L1983.51 1213.12 L1984.1 1213.12 L1984.69 1213.12 L1985.27 1213.12 L1985.86 1213.12 L1986.45 1213.12 L1987.03 1213.12 L1987.62 1213.12 L1988.2 1213.12 L1988.79 1213.12 L1989.38 1213.12 L1989.96 1213.12 L1990.55 1213.12 L1991.14 1213.12 L1991.72 1213.12 L1992.31 1213.12 L1992.9 1213.12 L1993.48 1213.12 L1994.07 1213.12 L1994.65 1213.12 L1995.24 1213.12 L1995.83 1213.12 L1996.41 1213.12 L1997 1213.12 L1997.59 1213.12 L1998.17 1213.12 L1998.76 1213.12 L1999.35 1213.12 L1999.93 1213.12 L2000.52 1213.12 L2001.11 1213.12 L2001.69 1213.12 L2002.28 1213.12 L2002.86 1213.12 L2003.45 1213.12 L2004.04 1213.12 L2004.62 1213.12 L2005.21 1213.12 L2005.8 1213.12 L2006.38 1213.12 L2006.97 1213.12 L2007.56 1213.12 L2008.14 1213.12 L2008.73 1213.12 L2009.32 1213.12 L2009.9 1213.12 L2010.49 1213.12 L2011.07 1213.12 L2011.66 1213.12 L2012.25 1213.12 L2012.83 1213.12 L2013.42 1213.12 L2014.01 1213.12 L2014.59 1213.12 L2015.18 1213.12 L2015.77 1213.12 L2016.35 1213.12 L2016.94 1213.12 L2017.53 1213.12 L2018.11 1213.12 L2018.7 1213.12 L2019.28 1213.12 L2019.87 1213.12 L2020.46 1213.12 L2021.04 1213.12 L2021.63 1213.12 L2022.22 1213.12 L2022.8 1213.12 L2023.39 1213.12 L2023.98 1213.12 L2024.56 1213.12 L2025.15 1213.12 L2025.73 1213.12 L2026.32 1213.12 L2026.91 1213.12 L2027.49 1213.12 L2028.08 1213.12 L2028.67 1213.12 L2029.25 1213.12 L2029.84 1213.12 L2030.43 1213.12 L2031.01 1213.12 L2031.6 1213.12 L2032.19 1213.12 L2032.77 1213.12 L2033.36 1213.12 L2033.94 1213.12 L2034.53 1213.12 L2035.12 1213.12 L2035.7 1213.12 L2036.29 1213.12 L2036.88 1213.12 L2037.46 1213.12 L2038.05 1213.12 L2038.64 1213.12 L2039.22 1213.12 L2039.81 1213.12 L2040.4 1213.12 L2040.98 1213.12 L2041.57 1213.12 L2042.15 1213.12 L2042.74 1213.12 L2043.33 1213.12 L2043.91 1213.12 L2044.5 1213.12 L2045.09 1213.12 L2045.67 1213.12 L2046.26 1213.12 L2046.85 1213.12 L2047.43 1213.12 L2048.02 1213.12 L2048.6 1213.12 L2049.19 1213.12 L2049.78 1213.12 L2050.36 1213.12 L2050.95 1213.12 L2051.54 1213.12 L2052.12 1213.12 L2052.71 1213.12 L2053.3 1213.12 L2053.88 1213.12 L2054.47 1213.12 L2055.06 1213.12 L2055.64 1213.12 L2056.23 1213.12 L2056.81 1213.12 L2057.4 1213.12 L2057.99 1213.12 L2058.57 1213.12 L2059.16 1213.12 L2059.75 1213.12 L2060.33 1213.12 L2060.92 1213.12 L2061.51 1213.12 L2062.09 1213.12 L2062.68 1213.12 L2063.27 1213.12 L2063.85 1213.12 L2064.44 1213.12 L2065.02 1213.12 L2065.61 1213.12 L2066.2 1213.12 L2066.78 1213.12 L2067.37 1213.12 L2067.96 1213.12 L2068.54 1213.12 L2069.13 1213.12 L2069.72 1213.12 L2070.3 1213.12 L2070.89 1213.12 L2071.48 1213.12 L2072.06 1213.12 L2072.65 1213.12 L2073.23 1213.12 L2073.82 1213.12 L2074.41 1213.12 L2074.99 1213.12 L2075.58 1213.12 L2076.17 1213.12 L2076.75 1213.12 L2077.34 1213.12 L2077.93 1213.12 L2078.51 1213.12 L2079.1 1213.12 L2079.68 1213.12 L2080.27 1213.12 L2080.86 1213.12 L2081.44 1213.12 L2082.03 1213.12 L2082.62 1213.12 L2083.2 1213.12 L2083.79 1213.12 L2084.38 1213.12 L2084.96 1213.12 L2085.55 1213.12 L2086.14 1213.12 L2086.72 1213.12 L2087.31 1213.12 L2087.89 1213.12 L2088.48 1213.12 L2089.07 1213.12 L2089.65 1213.12 L2090.24 1213.12 L2090.83 1213.12 L2091.41 1213.12 L2092 1213.12 L2092.59 1213.12 L2093.17 1213.12 L2093.76 1213.12 L2094.35 1213.12 L2094.93 1213.12 L2095.52 1213.12 L2096.1 1213.12 L2096.69 1213.12 L2097.28 1213.12 L2097.86 1213.12 L2098.45 1213.12 L2099.04 1213.12 L2099.62 1213.12 L2100.21 1213.12 L2100.8 1213.12 L2101.38 1213.12 L2101.97 1213.12 L2102.55 1213.12 L2103.14 1213.12 L2103.73 1213.12 L2104.31 1213.12 L2104.9 1213.12 L2105.49 1213.12 L2106.07 1213.12 L2106.66 1213.12 L2107.25 1213.12 L2107.83 1213.12 L2108.42 1213.12 L2109.01 1213.12 L2109.59 1213.12 L2110.18 1213.12 L2110.76 1213.12 L2111.35 1213.12 L2111.94 1213.12 L2112.52 1213.12 L2113.11 1213.12 L2113.7 1213.12 L2114.28 1213.12 L2114.87 1213.12 L2115.46 1213.12 L2116.04 1213.12 L2116.63 1213.12 L2117.22 1213.12 L2117.8 1213.12 L2118.39 1213.12 L2118.97 1213.12 L2119.56 1213.12 L2120.15 1213.12 L2120.73 1213.12 L2121.32 1213.12 L2121.91 1213.12 L2122.49 1213.12 L2123.08 1213.12 L2123.67 1213.12 L2124.25 1213.12 L2124.84 1213.12 L2125.42 1213.12 L2126.01 1213.12 L2126.6 1213.12 L2127.18 1213.12 L2127.77 1213.12 L2128.36 1213.12 L2128.94 1213.12 L2129.53 1213.12 L2130.12 1213.12 L2130.7 1213.12 L2131.29 1213.12 L2131.88 1213.12 L2132.46 1213.12 L2133.05 1213.12 L2133.63 1213.12 L2134.22 1213.12 L2134.81 1213.12 L2135.39 1213.12 L2135.98 1213.12 L2136.57 1213.12 L2137.15 1213.12 L2137.74 1213.12 L2138.33 1213.12 L2138.91 1213.12 L2139.5 1213.12 L2140.09 1213.12 L2140.67 1213.12 L2141.26 1213.12 L2141.84 1213.12 L2142.43 1213.12 L2143.02 1213.12 L2143.6 1213.12 L2144.19 1213.12 L2144.78 1213.12 L2145.36 1213.12 L2145.95 1213.12 L2146.54 1213.12 L2147.12 1213.12 L2147.71 1213.12 L2148.3 1213.12 L2148.88 1213.12 L2149.47 1213.12 L2150.05 1213.12 L2150.64 1213.12 L2151.23 1213.12 L2151.81 1213.12 L2152.4 1213.12 L2152.99 1213.12 L2153.57 1213.12 L2154.16 1213.12 L2154.75 1213.12 L2155.33 1213.12 L2155.92 1213.12 L2156.5 1213.12 L2157.09 1213.12 L2157.68 1213.12 L2158.26 1213.12 L2158.26 1213.02 L2157.68 1213.02 L2157.09 1213.02 L2156.5 1213.02 L2155.92 1213.02 L2155.33 1213.02 L2154.75 1213.02 L2154.16 1213.02 L2153.57 1213.02 L2152.99 1213.02 L2152.4 1213.02 L2151.81 1213.02 L2151.23 1213.02 L2150.64 1213.02 L2150.05 1213.02 L2149.47 1213.02 L2148.88 1213.02 L2148.3 1213.02 L2147.71 1213.02 L2147.12 1213.02 L2146.54 1213.02 L2145.95 1213.02 L2145.36 1213.02 L2144.78 1213.02 L2144.19 1213.02 L2143.6 1213.02 L2143.02 1213.02 L2142.43 1213.02 L2141.84 1213.02 L2141.26 1213.02 L2140.67 1213.02 L2140.09 1213.02 L2139.5 1213.02 L2138.91 1213.02 L2138.33 1213.02 L2137.74 1213.02 L2137.15 1213.02 L2136.57 1213.02 L2135.98 1213.02 L2135.39 1213.02 L2134.81 1213.02 L2134.22 1213.02 L2133.63 1213.02 L2133.05 1213.02 L2132.46 1213.02 L2131.88 1213.02 L2131.29 1213.02 L2130.7 1213.02 L2130.12 1213.02 L2129.53 1213.02 L2128.94 1213.02 L2128.36 1213.02 L2127.77 1213.02 L2127.18 1213.02 L2126.6 1213.02 L2126.01 1213.02 L2125.42 1213.02 L2124.84 1213.02 L2124.25 1213.02 L2123.67 1213.02 L2123.08 1213.02 L2122.49 1213.02 L2121.91 1213.02 L2121.32 1213.02 L2120.73 1213.02 L2120.15 1213.02 L2119.56 1213.02 L2118.97 1213.02 L2118.39 1213.02 L2117.8 1213.02 L2117.22 1213.02 L2116.63 1213.02 L2116.04 1213.02 L2115.46 1213.02 L2114.87 1213.02 L2114.28 1213.02 L2113.7 1213.02 L2113.11 1213.02 L2112.52 1213.02 L2111.94 1213.02 L2111.35 1213.02 L2110.76 1213.02 L2110.18 1213.02 L2109.59 1213.02 L2109.01 1213.02 L2108.42 1213.02 L2107.83 1213.02 L2107.25 1213.02 L2106.66 1213.02 L2106.07 1213.02 L2105.49 1213.02 L2104.9 1213.02 L2104.31 1213.02 L2103.73 1213.02 L2103.14 1213.02 L2102.55 1213.02 L2101.97 1213.02 L2101.38 1213.02 L2100.8 1213.02 L2100.21 1213.02 L2099.62 1213.02 L2099.04 1213.02 L2098.45 1213.02 L2097.86 1213.02 L2097.28 1213.02 L2096.69 1213.02 L2096.1 1213.02 L2095.52 1213.02 L2094.93 1213.02 L2094.35 1213.02 L2093.76 1213.02 L2093.17 1213.02 L2092.59 1213.02 L2092 1213.02 L2091.41 1213.02 L2090.83 1213.02 L2090.24 1213.02 L2089.65 1213.02 L2089.07 1213.02 L2088.48 1213.02 L2087.89 1213.02 L2087.31 1213.02 L2086.72 1213.02 L2086.14 1213.02 L2085.55 1213.02 L2084.96 1213.02 L2084.38 1213.02 L2083.79 1213.02 L2083.2 1213.02 L2082.62 1213.02 L2082.03 1213.02 L2081.44 1213.02 L2080.86 1213.02 L2080.27 1213.02 L2079.68 1213.02 L2079.1 1213.02 L2078.51 1213.02 L2077.93 1213.02 L2077.34 1213.02 L2076.75 1213.02 L2076.17 1213.02 L2075.58 1213.02 L2074.99 1213.02 L2074.41 1213.02 L2073.82 1213.02 L2073.23 1213.02 L2072.65 1213.02 L2072.06 1213.02 L2071.48 1213.02 L2070.89 1213.02 L2070.3 1213.02 L2069.72 1213.02 L2069.13 1213.02 L2068.54 1213.02 L2067.96 1213.02 L2067.37 1213.02 L2066.78 1213.02 L2066.2 1213.02 L2065.61 1213.02 L2065.02 1213.02 L2064.44 1213.02 L2063.85 1213.02 L2063.27 1213.02 L2062.68 1213.02 L2062.09 1213.02 L2061.51 1213.02 L2060.92 1213.02 L2060.33 1213.02 L2059.75 1213.02 L2059.16 1213.02 L2058.57 1213.02 L2057.99 1213.02 L2057.4 1213.02 L2056.81 1213.02 L2056.23 1213.02 L2055.64 1213.02 L2055.06 1213.02 L2054.47 1213.02 L2053.88 1213.02 L2053.3 1213.02 L2052.71 1213.02 L2052.12 1213.02 L2051.54 1213.02 L2050.95 1213.02 L2050.36 1213.02 L2049.78 1213.02 L2049.19 1213.02 L2048.6 1213.02 L2048.02 1213.02 L2047.43 1213.02 L2046.85 1213.02 L2046.26 1213.02 L2045.67 1213.02 L2045.09 1213.02 L2044.5 1213.02 L2043.91 1213.02 L2043.33 1213.02 L2042.74 1213.02 L2042.15 1213.02 L2041.57 1213.02 L2040.98 1213.02 L2040.4 1213.02 L2039.81 1213.02 L2039.22 1213.02 L2038.64 1213.02 L2038.05 1213.02 L2037.46 1213.02 L2036.88 1213.02 L2036.29 1213.02 L2035.7 1213.02 L2035.12 1213.02 L2034.53 1213.02 L2033.94 1213.02 L2033.36 1213.02 L2032.77 1213.02 L2032.19 1213.02 L2031.6 1213.02 L2031.01 1213.02 L2030.43 1213.02 L2029.84 1213.02 L2029.25 1213.02 L2028.67 1213.02 L2028.08 1213.02 L2027.49 1213.02 L2026.91 1213.02 L2026.32 1213.02 L2025.73 1213.02 L2025.15 1213.02 L2024.56 1213.02 L2023.98 1213.02 L2023.39 1213.02 L2022.8 1213.02 L2022.22 1213.02 L2021.63 1213.02 L2021.04 1213.02 L2020.46 1213.02 L2019.87 1213.02 L2019.28 1213.02 L2018.7 1213.02 L2018.11 1213.02 L2017.53 1213.02 L2016.94 1213.02 L2016.35 1213.02 L2015.77 1213.02 L2015.18 1213.02 L2014.59 1213.02 L2014.01 1213.02 L2013.42 1213.02 L2012.83 1213.02 L2012.25 1213.02 L2011.66 1213.02 L2011.07 1213.02 L2010.49 1213.02 L2009.9 1213.02 L2009.32 1213.02 L2008.73 1213.02 L2008.14 1213.02 L2007.56 1213.02 L2006.97 1213.02 L2006.38 1213.02 L2005.8 1213.02 L2005.21 1213.02 L2004.62 1213.02 L2004.04 1213.02 L2003.45 1213.02 L2002.86 1213.02 L2002.28 1213.02 L2001.69 1213.02 L2001.11 1213.02 L2000.52 1213.02 L1999.93 1213.02 L1999.35 1213.02 L1998.76 1213.02 L1998.17 1213.02 L1997.59 1213.02 L1997 1213.02 L1996.41 1213.02 L1995.83 1213.02 L1995.24 1213.02 L1994.65 1213.02 L1994.07 1213.02 L1993.48 1213.02 L1992.9 1213.02 L1992.31 1213.02 L1991.72 1213.02 L1991.14 1213.02 L1990.55 1213.02 L1989.96 1213.02 L1989.38 1213.02 L1988.79 1213.02 L1988.2 1213.02 L1987.62 1213.02 L1987.03 1213.02 L1986.45 1213.02 L1985.86 1213.02 L1985.27 1213.02 L1984.69 1213.02 L1984.1 1213.02 L1983.51 1213.02 L1982.93 1213.02 L1982.34 1213.02 L1981.75 1213.02 L1981.17 1213.02 L1980.58 1213.02 L1979.99 1213.02 L1979.41 1213.02 L1978.82 1213.02 L1978.24 1213.02 L1977.65 1213.02 L1977.06 1213.02 L1976.48 1213.02 L1975.89 1213.02 L1975.3 1213.02 L1974.72 1213.02 L1974.13 1213.02 L1973.54 1213.02 L1972.96 1213.02 L1972.37 1213.02 L1971.78 1213.02 L1971.2 1213.02 L1970.61 1213.02 L1970.03 1213.02 L1969.44 1213.02 L1968.85 1213.02 L1968.27 1213.02 L1967.68 1213.02 L1967.09 1213.02 L1966.51 1213.02 L1965.92 1213.02 L1965.33 1213.02 L1964.75 1213.02 L1964.16 1213.02 L1963.58 1213.02 L1962.99 1213.02 L1962.4 1213.02 L1961.82 1213.02 L1961.23 1213.02 L1960.64 1213.02 L1960.06 1213.02 L1959.47 1213.02 L1958.88 1213.02 L1958.3 1213.02 L1957.71 1213.02 L1957.12 1213.02 L1956.54 1213.02 L1955.95 1213.02 L1955.37 1213.02 L1954.78 1213.02 L1954.19 1213.02 L1953.61 1213.02 L1953.02 1213.02 L1952.43 1213.02 L1951.85 1213.02 L1951.26 1213.02 L1950.67 1213.02 L1950.09 1213.02 L1949.5 1213.02 L1948.91 1213.02 L1948.33 1213.02 L1947.74 1213.02 L1947.16 1213.02 L1946.57 1213.02 L1945.98 1213.02 L1945.4 1213.02 L1944.81 1213.02 L1944.22 1213.02 L1943.64 1213.02 L1943.05 1213.02 L1942.46 1213.02 L1941.88 1213.02 L1941.29 1213.02 L1940.71 1213.02 L1940.12 1213.02 L1939.53 1213.02 L1938.95 1213.02 L1938.36 1213.02 L1937.77 1213.02 L1937.19 1213.02 L1936.6 1213.02 L1936.01 1213.02 L1935.43 1213.02 L1934.84 1213.02 L1934.25 1213.02 L1933.67 1213.02 L1933.08 1213.02 L1932.5 1213.02 L1931.91 1213.02 L1931.32 1213.02 L1930.74 1213.02 L1930.15 1213.02 L1929.56 1213.02 L1928.98 1213.02 L1928.39 1213.02 L1927.8 1213.02 L1927.22 1213.02 L1926.63 1213.02 L1926.04 1213.02 L1925.46 1213.02 L1924.87 1213.02 L1924.29 1213.02 L1923.7 1213.02 L1923.11 1213.02 L1922.53 1213.02 L1921.94 1213.02 L1921.35 1213.02 L1920.77 1213.02 L1920.18 1213.02 L1919.59 1213.02 L1919.01 1213.02 L1918.42 1213.02 L1917.83 1213.02 L1917.25 1213.02 L1916.66 1213.02 L1916.08 1213.02 L1915.49 1213.02 L1914.9 1213.02 L1914.32 1213.02 L1913.73 1213.02 L1913.14 1213.02 L1912.56 1213.02 L1911.97 1213.02 L1911.38 1213.02 L1910.8 1213.02 L1910.21 1213.02 L1909.63 1213.02 L1909.04 1213.02 L1908.45 1213.02 L1907.87 1213.02 L1907.28 1213.02 L1906.69 1213.02 L1906.11 1213.02 L1905.52 1213.02 L1904.93 1213.02 L1904.35 1213.02 L1903.76 1213.02 L1903.17 1213.02 L1902.59 1213.02 L1902 1213.02 L1901.42 1213.02 L1900.83 1213.02 L1900.24 1213.02 L1899.66 1213.02 L1899.07 1213.02 L1898.48 1213.02 L1897.9 1213.02 L1897.31 1213.02 L1896.72 1213.02 L1896.14 1213.02 L1895.55 1213.02 L1894.96 1213.02 L1894.38 1213.02 L1893.79 1213.02 L1893.21 1213.02 L1892.62 1213.02 L1892.03 1213.02 L1891.45 1213.02 L1890.86 1213.02 L1890.27 1213.02 L1889.69 1213.02 L1889.1 1213.02 L1888.51 1213.02 L1887.93 1213.02 L1887.34 1213.02 L1886.76 1213.02 L1886.17 1213.02 L1885.58 1213.02 L1885 1213.02 L1884.41 1213.02 L1883.82 1213.02 L1883.24 1213.02 L1882.65 1213.02 L1882.06 1213.02 L1881.48 1213.02 L1880.89 1213.02 L1880.3 1213.02 L1879.72 1213.02 L1879.13 1213.02 L1878.55 1213.02 L1877.96 1213.02 L1877.37 1213.02 L1876.79 1213.02 L1876.2 1213.02 L1875.61 1213.02 L1875.03 1213.02 L1874.44 1213.02 L1873.85 1213.02 L1873.27 1213.02 L1872.68 1213.02 L1872.09 1213.02 L1871.51 1213.02 L1870.92 1213.02 L1870.34 1213.02 L1869.75 1213.02 L1869.16 1213.02 L1868.58 1213.02 L1867.99 1213.02 L1867.4 1213.02 L1866.82 1213.02 L1866.23 1213.02 L1865.64 1213.02 L1865.06 1213.02 L1864.47 1213.02 L1863.88 1213.02 L1863.3 1213.02 L1862.71 1213.02 L1862.13 1213.02 L1861.54 1213.02 L1860.95 1213.02 L1860.37 1213.02 L1859.78 1213.02 L1859.19 1213.02 L1858.61 1213.02 L1858.02 1213.02 L1857.43 1213.02 L1856.85 1213.02 L1856.26 1213.02 L1855.68 1213.02 L1855.09 1213.02 L1854.5 1213.02 L1853.92 1213.02 L1853.33 1213.02 L1852.74 1213.02 L1852.16 1213.02 L1851.57 1213.02 L1850.98 1213.02 L1850.4 1213.02 L1849.81 1213.02 L1849.22 1213.02 L1848.64 1213.02 L1848.05 1213.02 L1847.47 1213.02 L1846.88 1213.02 L1846.29 1213.02 L1845.71 1213.02 L1845.12 1213.02 L1844.53 1213.02 L1843.95 1213.02 L1843.36 1213.02 L1842.77 1213.02 L1842.19 1213.02 L1841.6 1213.02 L1841.01 1213.02 L1840.43 1213.02 L1839.84 1213.02 L1839.26 1213.02 L1838.67 1213.02 L1838.08 1213.02 L1837.5 1213.02 L1836.91 1213.02 L1836.32 1213.02 L1835.74 1213.02 L1835.15 1213.02 L1834.56 1213.02 L1833.98 1213.02 L1833.39 1213.02 L1832.81 1213.02 L1832.22 1213.02 L1831.63 1213.02 L1831.05 1213.02 L1830.46 1213.02 L1829.87 1213.02 L1829.29 1213.02 L1828.7 1213.02 L1828.11 1213.02 L1827.53 1213.02 L1826.94 1213.02 L1826.35 1213.02 L1825.77 1213.02 L1825.18 1213.02 L1824.6 1213.02 L1824.01 1213.02 L1823.42 1213.02 L1822.84 1213.02 L1822.25 1213.02 L1821.66 1213.02 L1821.08 1213.02 L1820.49 1213.02 L1819.9 1213.02 L1819.32 1213.02 L1818.73 1213.02 L1818.14 1213.02 L1817.56 1213.02 L1816.97 1213.02 L1816.39 1213.02 L1815.8 1213.02 L1815.21 1213.02 L1814.63 1213.02 L1814.04 1213.02 L1813.45 1213.02 L1812.87 1213.02 L1812.28 1213.02 L1811.69 1213.02 L1811.11 1213.02 L1810.52 1213.02 L1809.94 1213.02 L1809.35 1213.02 L1808.76 1213.02 L1808.18 1213.02 L1807.59 1213.02 L1807 1213.02 L1806.42 1213.02 L1805.83 1213.02 L1805.24 1213.02 L1804.66 1213.02 L1804.07 1213.02 L1803.48 1213.02 L1802.9 1213.02 L1802.31 1213.02 L1801.73 1213.02 L1801.14 1213.02 L1800.55 1213.02 L1799.97 1213.02 L1799.38 1213.02 L1798.79 1213.02 L1798.21 1213.02 L1797.62 1213.02 L1797.03 1213.02 L1796.45 1213.02 L1795.86 1213.02 L1795.27 1213.02 L1794.69 1213.02 L1794.1 1213.02 L1793.52 1213.02 L1792.93 1213.02 L1792.34 1213.02 L1791.76 1213.02 L1791.17 1213.02 L1790.58 1213.02 L1790 1213.02 L1789.41 1213.02 L1788.82 1213.02 L1788.24 1213.02 L1787.65 1213.02 L1787.06 1213.02 L1786.48 1213.02 L1785.89 1213.02 L1785.31 1213.02 L1784.72 1213.02 L1784.13 1213.02 L1783.55 1213.02 L1782.96 1213.02 L1782.37 1213.02 L1781.79 1213.02 L1781.2 1213.02 L1780.61 1213.02 L1780.03 1213.02 L1779.44 1213.02 L1778.86 1213.02 L1778.27 1213.02 L1777.68 1213.02 L1777.1 1213.02 L1776.51 1213.02 L1775.92 1213.02 L1775.34 1213.02 L1774.75 1213.02 L1774.16 1213.02 L1773.58 1213.02 L1772.99 1213.02 L1772.4 1213.02 L1771.82 1213.02 L1771.23 1213.02 L1770.65 1213.02 L1770.06 1213.02 L1769.47 1213.02 L1768.89 1213.02 L1768.3 1213.02 L1767.71 1213.02 L1767.13 1213.02 L1766.54 1213.02 L1765.95 1213.02 L1765.37 1213.02 L1764.78 1213.02 L1764.19 1213.02 L1763.61 1213.02 L1763.02 1213.02 L1762.44 1213.02 L1761.85 1213.02 L1761.26 1213.02 L1760.68 1213.02 L1760.09 1213.02 L1759.5 1213.02 L1758.92 1213.02 L1758.33 1213.02 L1757.74 1213.02 L1757.16 1213.02 L1756.57 1213.02 L1755.99 1213.02 L1755.4 1213.02 L1754.81 1213.02 L1754.23 1213.02 L1753.64 1213.02 L1753.05 1213.02 L1752.47 1213.02 L1751.88 1213.02 L1751.29 1213.02 L1750.71 1213.02 L1750.12 1213.02 L1749.53 1213.02 L1748.95 1213.02 L1748.36 1213.02 L1747.78 1213.02 L1747.19 1213.02 L1746.6 1213.02 L1746.02 1213.02 L1745.43 1213.02 L1744.84 1213.02 L1744.26 1213.02 L1743.67 1213.02 L1743.08 1213.02 L1742.5 1213.02 L1741.91 1213.02 L1741.32 1213.02 L1740.74 1213.02 L1740.15 1213.02 L1739.57 1213.02 L1738.98 1213.02 L1738.39 1213.02 L1737.81 1213.02 L1737.22 1213.02 L1736.63 1213.02 L1736.05 1213.02 L1735.46 1213.02 L1734.87 1213.02 L1734.29 1213.02 L1733.7 1213.02 L1733.11 1213.02 L1732.53 1213.02 L1731.94 1213.02 L1731.36 1213.02 L1730.77 1213.02 L1730.18 1213.02 L1729.6 1213.02 L1729.01 1213.02 L1728.42 1213.02 L1727.84 1213.02 L1727.25 1213.02 L1726.66 1213.02 L1726.08 1213.02 L1725.49 1213.02 L1724.91 1213.02 L1724.32 1213.02 L1723.73 1213.02 L1723.15 1213.02 L1722.56 1213.02 L1721.97 1213.02 L1721.39 1213.02 L1720.8 1213.02 L1720.21 1213.02 L1719.63 1213.02 L1719.04 1213.02 L1718.45 1213.02 L1717.87 1213.02 L1717.28 1213.02 L1716.7 1213.02 L1716.11 1213.02 L1715.52 1213.02 L1714.94 1213.02 L1714.35 1213.02 L1713.76 1213.02 L1713.18 1213.02 L1712.59 1213.02 L1712 1213.02 L1711.42 1213.02 L1710.83 1213.02 L1710.24 1213.02 L1709.66 1213.02 L1709.07 1213.02 L1708.49 1213.02 L1707.9 1213.02 L1707.31 1213.02 L1706.73 1213.02 L1706.14 1213.02 L1705.55 1213.02 L1704.97 1213.02 L1704.38 1213.02 L1703.79 1213.02 L1703.21 1213.02 L1702.62 1213.02 L1702.04 1213.02 L1701.45 1213.02 L1700.86 1213.02 L1700.28 1213.02 L1699.69 1213.02 L1699.1 1213.02 L1698.52 1213.02 L1697.93 1213.02 L1697.34 1213.02 L1696.76 1213.02 L1696.17 1213.02 L1695.58 1213.02 L1695 1213.02 L1694.41 1213.02 L1693.83 1213.02 L1693.24 1213.02 L1692.65 1213.02 L1692.07 1213.02 L1691.48 1213.02 L1690.89 1213.02 L1690.31 1213.02 L1689.72 1213.02 L1689.13 1213.02 L1688.55 1213.02 L1687.96 1213.02 L1687.37 1213.02 L1686.79 1213.02 L1686.2 1213.02 L1685.62 1213.02 L1685.03 1213.02 L1684.44 1213.02 L1683.86 1213.02 L1683.27 1213.02 L1682.68 1213.02 L1682.1 1213.02 L1681.51 1213.02 L1680.92 1213.02 L1680.34 1213.02 L1679.75 1213.02 L1679.17 1213.02 L1678.58 1213.02 L1677.99 1213.02 L1677.41 1213.02 L1676.82 1213.02 L1676.23 1213.02 L1675.65 1213.02 L1675.06 1213.02 L1674.47 1213.02 L1673.89 1213.02 L1673.3 1213.02 L1672.71 1213.02 L1672.13 1213.02 L1671.54 1213.02 L1670.96 1213.02 L1670.37 1213.02 L1669.78 1213.02 L1669.2 1213.02 L1668.61 1213.02 L1668.02 1213.02 L1667.44 1213.02 L1666.85 1213.02 L1666.26 1213.02 L1665.68 1213.02 L1665.09 1213.02 L1664.5 1213.02 L1663.92 1213.02 L1663.33 1213.02 L1662.75 1213.02 L1662.16 1213.02 L1661.57 1213.02 L1660.99 1213.02 L1660.4 1213.02 L1659.81 1213.02 L1659.23 1213.02 L1658.64 1213.02 L1658.05 1213.02 L1657.47 1213.02 L1656.88 1213.02 L1656.29 1213.02 L1655.71 1213.02 L1655.12 1213.02 L1654.54 1213.02 L1653.95 1213.02 L1653.36 1213.02 L1652.78 1213.02 L1652.19 1213.02 L1651.6 1213.02 L1651.02 1213.02 L1650.43 1213.02 L1649.84 1213.02 L1649.26 1213.02 L1648.67 1213.02 L1648.09 1213.02 L1647.5 1213.02 L1646.91 1213.02 L1646.33 1213.02 L1645.74 1213.02 L1645.15 1213.02 L1644.57 1213.02 L1643.98 1213.02 L1643.39 1213.02 L1642.81 1213.02 L1642.22 1213.02 L1641.63 1213.02 L1641.05 1213.02 L1640.46 1213.02 L1639.88 1213.02 L1639.29 1213.02 L1638.7 1213.02 L1638.12 1213.02 L1637.53 1213.02 L1636.94 1213.02 L1636.36 1213.02 L1635.77 1213.02 L1635.18 1213.02 L1634.6 1213.02 L1634.01 1213.02 L1633.42 1213.02 L1632.84 1213.02 L1632.25 1213.02 L1631.67 1213.02 L1631.08 1213.02 L1630.49 1213.02 L1629.91 1213.02 L1629.32 1213.02 L1628.73 1213.02 L1628.15 1213.02 L1627.56 1213.02 L1626.97 1213.02 L1626.39 1213.02 L1625.8 1213.02 L1625.22 1213.02 L1624.63 1213.02 L1624.04 1213.02 L1623.46 1213.02 L1622.87 1213.02 L1622.28 1213.02 L1621.7 1213.02 L1621.11 1213.02 L1620.52 1213.02 L1619.94 1213.02 L1619.35 1213.02 L1618.76 1213.02 L1618.18 1213.02 L1617.59 1213.02 L1617.01 1213.02 L1616.42 1213.02 L1615.83 1213.02 L1615.25 1213.02 L1614.66 1213.02 L1614.07 1213.02 L1613.49 1213.02 L1612.9 1213.02 L1612.31 1213.02 L1611.73 1213.02 L1611.14 1213.02 L1610.55 1213.02 L1609.97 1213.02 L1609.38 1213.02 L1608.8 1213.02 L1608.21 1213.02 L1607.62 1213.02 L1607.04 1213.02 L1606.45 1213.02 L1605.86 1213.02 L1605.28 1213.02 L1604.69 1213.02 L1604.1 1213.02 L1603.52 1213.02 L1602.93 1213.02 L1602.34 1213.02 L1601.76 1213.02 L1601.17 1213.02 L1600.59 1213.02 L1600 1213.02 L1599.41 1213.02 L1598.83 1213.02 L1598.24 1213.02 L1597.65 1213.02 L1597.07 1213.02 L1596.48 1213.02 L1595.89 1213.02 L1595.31 1213.02 L1594.72 1213.02 L1594.14 1213.02 L1593.55 1213.02 L1592.96 1213.02 L1592.38 1213.02 L1591.79 1213.02 L1591.2 1213.02 L1590.62 1213.02 L1590.03 1213.02 L1589.44 1213.02 L1588.86 1213.02 L1588.27 1213.02 L1587.68 1213.02 L1587.1 1213.02 L1586.51 1213.02 L1585.93 1213.02 L1585.34 1213.02 L1584.75 1213.02 L1584.17 1213.02 L1583.58 1213.02 L1582.99 1213.02 L1582.41 1213.02 L1581.82 1213.02 L1581.23 1213.02 L1580.65 1213.02 L1580.06 1213.02 L1579.47 1213.02 L1578.89 1213.02 L1578.3 1213.02 L1577.72 1213.02 L1577.13 1213.02 L1576.54 1213.02 L1575.96 1213.02 L1575.37 1213.02 L1574.78 1213.02 L1574.2 1213.02 L1573.61 1213.02 L1573.02 1213.02 L1572.44 1213.02 L1571.85 1213.02 L1571.27 1213.02 L1570.68 1213.02 L1570.09 1213.02 L1569.51 1213.02 L1568.92 1213.02 L1568.33 1213.02 L1567.75 1213.02 L1567.16 1213.02 L1566.57 1213.02 L1565.99 1213.02 L1565.4 1213.02 L1564.81 1213.02 L1564.23 1213.02 L1563.64 1213.02 L1563.06 1213.02 L1562.47 1213.02 L1561.88 1213.02 L1561.3 1213.02 L1560.71 1213.02 L1560.12 1213.02 L1559.54 1213.02 L1558.95 1213.02 L1558.36 1213.02 L1557.78 1213.02 L1557.19 1213.02 L1556.6 1213.02 L1556.02 1213.02 L1555.43 1213.02 L1554.85 1213.02 L1554.26 1213.02 L1553.67 1213.02 L1553.09 1213.02 L1552.5 1213.02 L1551.91 1213.02 L1551.33 1213.02 L1550.74 1213.02 L1550.15 1213.02 L1549.57 1213.02 L1548.98 1213.02 L1548.4 1213.02 L1547.81 1213.02 L1547.22 1213.02 L1546.64 1213.02 L1546.05 1213.02 L1545.46 1213.02 L1544.88 1213.02 L1544.29 1213.02 L1543.7 1213.02 L1543.12 1213.02 L1542.53 1213.02 L1541.94 1213.02 L1541.36 1213.02 L1540.77 1213.02 L1540.19 1213.02 L1539.6 1213.02 L1539.01 1213.02 L1538.43 1213.02 L1537.84 1213.02 L1537.25 1213.02 L1536.67 1213.02 L1536.08 1213.02 L1535.49 1213.02 L1534.91 1213.02 L1534.32 1213.02 L1533.73 1213.02 L1533.15 1213.02 L1532.56 1213.02 L1531.98 1213.02 L1531.39 1213.02 L1530.8 1213.02 L1530.22 1213.02 L1529.63 1213.02 L1529.04 1213.02 L1528.46 1213.02 L1527.87 1213.02 L1527.28 1213.02 L1526.7 1213.02 L1526.11 1213.02 L1525.52 1213.02 L1524.94 1213.02 L1524.35 1213.02 L1523.77 1213.02 L1523.18 1213.02 L1522.59 1213.02 L1522.01 1213.02 L1521.42 1213.02 L1520.83 1213.02 L1520.25 1213.02 L1519.66 1213.02 L1519.07 1213.02 L1518.49 1213.02 L1517.9 1213.02 L1517.32 1213.02 L1516.73 1213.02 L1516.14 1213.02 L1515.56 1213.02 L1514.97 1213.02 L1514.38 1213.02 L1513.8 1213.02 L1513.21 1213.02 L1512.62 1213.02 L1512.04 1213.02 L1511.45 1213.02 L1510.86 1213.02 L1510.28 1213.02 L1509.69 1213.02 L1509.11 1213.02 L1508.52 1213.02 L1507.93 1213.02 L1507.35 1213.02 L1506.76 1213.02 L1506.17 1213.02 L1505.59 1213.02 L1505 1213.02 L1504.41 1213.02 L1503.83 1213.02 L1503.24 1213.02 L1502.65 1213.02 L1502.07 1213.02 L1501.48 1213.02 L1500.9 1213.02 L1500.31 1213.02 L1499.72 1213.02 L1499.14 1213.02 L1498.55 1213.02 L1497.96 1213.02 L1497.38 1213.02 L1496.79 1213.02 L1496.2 1213.02 L1495.62 1213.02 L1495.03 1213.02 L1494.45 1213.02 L1493.86 1213.02 L1493.27 1213.02 L1492.69 1213.02 L1492.1 1213.02 L1491.51 1213.02 L1490.93 1213.02 L1490.34 1213.02 L1489.75 1213.02 L1489.17 1213.02 L1488.58 1213.02 L1487.99 1213.02 L1487.41 1213.02 L1486.82 1213.02 L1486.24 1213.02 L1485.65 1213.02 L1485.06 1213.02 L1484.48 1213.02 L1483.89 1213.02 L1483.3 1213.02 L1482.72 1213.02 L1482.13 1213.02 L1481.54 1213.02 L1480.96 1213.02 L1480.37 1213.02 L1479.78 1213.02 L1479.2 1213.02 L1478.61 1213.02 L1478.03 1213.02 L1477.44 1213.02 L1476.85 1213.02 L1476.27 1213.02 L1475.68 1213.02 L1475.09 1213.02 L1474.51 1213.02 L1473.92 1213.02 L1473.33 1213.02 L1472.75 1213.02 L1472.16 1213.02 L1471.57 1213.02 L1470.99 1213.02 L1470.4 1213.02 L1469.82 1213.02 L1469.23 1213.02 L1468.64 1213.02 L1468.06 1213.02 L1467.47 1213.02 L1466.88 1213.02 L1466.3 1213.02 L1465.71 1213.02 L1465.12 1213.02 L1464.54 1213.02 L1463.95 1213.02 L1463.37 1213.02 L1462.78 1213.02 L1462.19 1213.02 L1461.61 1213.02 L1461.02 1213.02 L1460.43 1213.02 L1459.85 1213.02 L1459.26 1213.02 L1458.67 1213.02 L1458.09 1213.02 L1457.5 1213.02 L1456.91 1213.02 L1456.33 1213.02 L1455.74 1213.02 L1455.16 1213.02 L1454.57 1213.02 L1453.98 1213.02 L1453.4 1213.02 L1452.81 1213.02 L1452.22 1213.02 L1451.64 1213.02 L1451.05 1213.02 L1450.46 1213.02 L1449.88 1213.02 L1449.29 1213.02 L1448.7 1213.02 L1448.12 1213.02 L1447.53 1213.02 L1446.95 1213.02 L1446.36 1213.02 L1445.77 1213.02 L1445.19 1213.02 L1444.6 1213.02 L1444.01 1213.02 L1443.43 1213.02 L1442.84 1213.02 L1442.25 1213.02 L1441.67 1213.02 L1441.08 1213.02 L1440.5 1213.02 L1439.91 1213.02 L1439.32 1213.02 L1438.74 1213.02 L1438.15 1213.02 L1437.56 1213.02 L1436.98 1213.02 L1436.39 1213.02 L1435.8 1213.02 L1435.22 1213.02 L1434.63 1213.02 L1434.04 1213.02 L1433.46 1213.02 L1432.87 1213.02 L1432.29 1213.02 L1431.7 1213.02 L1431.11 1213.02 L1430.53 1213.02 L1429.94 1213.02 L1429.35 1213.02 L1428.77 1213.02 L1428.18 1213.02 L1427.59 1213.02 L1427.01 1213.02 L1426.42 1213.02 L1425.83 1213.02 L1425.25 1213.02 L1424.66 1213.02 L1424.08 1213.02 L1423.49 1213.02 L1422.9 1213.02 L1422.32 1213.02 L1421.73 1213.02 L1421.14 1213.02 L1420.56 1213.02 L1419.97 1213.02 L1419.38 1213.02 L1418.8 1213.02 L1418.21 1213.02 L1417.63 1213.02 L1417.04 1213.02 L1416.45 1213.02 L1415.87 1213.02 L1415.28 1213.02 L1414.69 1213.02 L1414.11 1213.02 L1413.52 1213.02 L1412.93 1213.02 L1412.35 1213.02 L1411.76 1213.02 L1411.17 1213.02 L1410.59 1213.02 L1410 1213.02 L1409.42 1213.02 L1408.83 1213.02 L1408.24 1213.02 L1407.66 1213.02 L1407.07 1213.02 L1406.48 1213.02 L1405.9 1213.02 L1405.31 1213.02 L1404.72 1213.02 L1404.14 1213.02 L1403.55 1213.02 L1402.96 1213.02 L1402.38 1213.02 L1401.79 1213.02 L1401.21 1213.02 L1400.62 1213.02 L1400.03 1213.02 L1399.45 1213.02 L1398.86 1213.02 L1398.27 1213.02 L1397.69 1213.02 L1397.1 1213.02 L1396.51 1213.02 L1395.93 1213.02 L1395.34 1213.02 L1394.75 1213.02 L1394.17 1213.02 L1393.58 1213.02 L1393 1213.02 L1392.41 1213.02 L1391.82 1213.02 L1391.24 1213.02 L1390.65 1213.02 L1390.06 1213.02 L1389.48 1213.02 L1388.89 1213.02 L1388.3 1213.02 L1387.72 1213.02 L1387.13 1213.02 L1386.55 1213.02 L1385.96 1213.02 L1385.37 1213.02 L1384.79 1213.02 L1384.2 1213.02 L1383.61 1213.02 L1383.03 1213.02 L1382.44 1213.02 L1381.85 1213.02 L1381.27 1213.02 L1380.68 1213.02 L1380.09 1213.02 L1379.51 1213.02 L1378.92 1213.02 L1378.34 1213.02 L1377.75 1213.02 L1377.16 1213.02 L1376.58 1213.02 L1375.99 1213.02 L1375.4 1213.02 L1374.82 1213.02 L1374.23 1213.02 L1373.64 1213.02 L1373.06 1213.02 L1372.47 1213.02 L1371.88 1213.02 L1371.3 1213.02 L1370.71 1213.02 L1370.13 1213.02 L1369.54 1213.02 L1368.95 1213.02 L1368.37 1213.02 L1367.78 1213.02 L1367.19 1213.02 L1366.61 1213.02 L1366.02 1213.02 L1365.43 1213.02 L1364.85 1213.02 L1364.26 1213.02 L1363.68 1213.02 L1363.09 1213.02 L1362.5 1213.02 L1361.92 1213.02 L1361.33 1213.02 L1360.74 1213.02 L1360.16 1213.02 L1359.57 1213.02 L1358.98 1213.02 L1358.4 1213.02 L1357.81 1213.02 L1357.22 1213.02 L1356.64 1213.02 L1356.05 1213.02 L1355.47 1213.02 L1354.88 1213.02 L1354.29 1213.02 L1353.71 1213.02 L1353.12 1213.02 L1352.53 1213.02 L1351.95 1213.02 L1351.36 1213.02 L1350.77 1213.02 L1350.19 1213.02 L1349.6 1213.02 L1349.01 1213.02 L1348.43 1213.02 L1347.84 1213.02 L1347.26 1213.02 L1346.67 1213.02 L1346.08 1213.02 L1345.5 1213.02 L1344.91 1213.02 L1344.32 1213.02 L1343.74 1213.02 L1343.15 1213.02 L1342.56 1213.02 L1341.98 1213.02 L1341.39 1213.02 L1340.8 1213.02 L1340.22 1213.02 L1339.63 1213.02 L1339.05 1213.02 L1338.46 1213.02 L1337.87 1213.02 L1337.29 1213.02 L1336.7 1213.02 L1336.11 1213.02 L1335.53 1213.02 L1334.94 1213.02 L1334.35 1213.02 L1333.77 1213.02 L1333.18 1213.02 L1332.6 1213.02 L1332.01 1213.02 L1331.42 1213.02 L1330.84 1213.02 L1330.25 1213.02 L1329.66 1213.02 L1329.08 1213.02 L1328.49 1213.02 L1327.9 1213.02 L1327.32 1213.02 L1326.73 1213.02 L1326.14 1213.02 L1325.56 1213.02 L1324.97 1213.02 L1324.39 1213.02 L1323.8 1213.02 L1323.21 1213.02 L1322.63 1213.02 L1322.04 1213.02 L1321.45 1213.02 L1320.87 1213.02 L1320.28 1213.02 L1319.69 1213.02 L1319.11 1213.02 L1318.52 1213.02 L1317.93 1213.02 L1317.35 1213.02 L1316.76 1213.02 L1316.18 1213.02 L1315.59 1213.02 L1315 1213.02 L1314.42 1213.02 L1313.83 1213.02 L1313.24 1213.02 L1312.66 1213.02 L1312.07 1213.02 L1311.48 1213.02 L1310.9 1213.02 L1310.31 1213.02 L1309.73 1213.02 L1309.14 1213.02 L1308.55 1213.02 L1307.97 1213.02 L1307.38 1213.02 L1306.79 1213.02 L1306.21 1213.02 L1305.62 1213.02 L1305.03 1213.02 L1304.45 1213.02 L1303.86 1213.02 L1303.27 1213.02 L1302.69 1213.02 L1302.1 1213.02 L1301.52 1213.02 L1300.93 1213.02 L1300.34 1213.02 L1299.76 1213.02 L1299.17 1213.02 L1298.58 1213.02 L1298 1213.02 L1297.41 1213.02 L1296.82 1213.02 L1296.24 1213.02 L1295.65 1213.02 L1295.06 1213.02 L1294.48 1213.02 L1293.89 1213.02 L1293.31 1213.02 L1292.72 1213.02 L1292.13 1213.02 L1291.55 1213.02 L1290.96 1213.02 L1290.37 1213.02 L1289.79 1213.02 L1289.2 1213.02 L1288.61 1213.02 L1288.03 1213.02 L1287.44 1213.02 L1286.86 1213.02 L1286.27 1213.02 L1285.68 1213.02 L1285.1 1213.02 L1284.51 1213.02 L1283.92 1213.02 L1283.34 1213.02 L1282.75 1213.02 L1282.16 1213.02 L1281.58 1213.02 L1280.99 1213.02 L1280.4 1213.02 L1279.82 1213.02 L1279.23 1213.02 L1278.65 1213.02 L1278.06 1213.02 L1277.47 1213.02 L1276.89 1213.02 L1276.3 1213.02 L1275.71 1213.02 L1275.13 1213.02 L1274.54 1213.02 L1273.95 1213.02 L1273.37 1213.02 L1272.78 1213.02 L1272.19 1213.02 L1271.61 1213.02 L1271.02 1213.02 L1270.44 1213.02 L1269.85 1213.02 L1269.26 1213.02 L1268.68 1213.02 L1268.09 1213.02 L1267.5 1213.02 L1266.92 1213.02 L1266.33 1213.02 L1265.74 1213.02 L1265.16 1213.02 L1264.57 1213.02 L1263.98 1213.02 L1263.4 1213.02 L1262.81 1213.02 L1262.23 1213.02 L1261.64 1213.02 L1261.05 1213.02 L1260.47 1213.02 L1259.88 1213.02 L1259.29 1213.02 L1258.71 1213.02 L1258.12 1213.02 L1257.53 1213.02 L1256.95 1213.02 L1256.36 1213.02 L1255.78 1213.02 L1255.19 1213.02 L1254.6 1213.02 L1254.02 1213.02 L1253.43 1213.02 L1252.84 1213.02 L1252.26 1213.02 L1251.67 1213.02 L1251.08 1213.02 L1250.5 1213.02 L1249.91 1213.02 L1249.32 1213.02 L1248.74 1213.02 L1248.15 1213.02 L1247.57 1213.02 L1246.98 1213.02 L1246.39 1213.02 L1245.81 1213.02 L1245.22 1213.02 L1244.63 1213.02 L1244.05 1213.02 L1243.46 1213.02 L1242.87 1213.02 L1242.29 1213.02 L1241.7 1213.02 L1241.11 1213.02 L1240.53 1213.02 L1239.94 1213.02 L1239.36 1213.02 L1238.77 1213.02 L1238.18 1213.02 L1237.6 1213.02 L1237.01 1213.02 L1236.42 1213.02 L1235.84 1213.02 L1235.25 1213.02 L1234.66 1213.02 L1234.08 1213.02 L1233.49 1213.02 L1232.91 1213.02 L1232.32 1213.02 L1231.73 1213.02 L1231.15 1213.02 L1230.56 1213.02 L1229.97 1213.02 L1229.39 1213.02 L1228.8 1213.02 L1228.21 1213.02 L1227.63 1213.02 L1227.04 1213.02 L1226.45 1213.02 L1225.87 1213.02 L1225.28 1213.02 L1224.7 1213.02 L1224.11 1213.02 L1223.52 1213.02 L1222.94 1213.02 L1222.35 1213.02 L1221.76 1213.02 L1221.18 1213.02 L1220.59 1213.02 L1220 1213.02 L1219.42 1213.02 L1218.83 1213.02 L1218.24 1213.02 L1217.66 1213.02 L1217.07 1213.02 L1216.49 1213.02 L1215.9 1213.02 L1215.31 1213.02 L1214.73 1213.02 L1214.14 1213.02 L1213.55 1213.02 L1212.97 1213.02 L1212.38 1213.02 L1211.79 1213.02 L1211.21 1213.02 L1210.62 1213.02 L1210.03 1213.02 L1209.45 1213.02 L1208.86 1213.02 L1208.28 1213.02 L1207.69 1213.02 L1207.1 1213.02 L1206.52 1213.02 L1205.93 1213.02 L1205.34 1213.02 L1204.76 1213.02 L1204.17 1213.02 L1203.58 1213.02 L1203 1213.02 L1202.41 1213.02 L1201.83 1213.02 L1201.24 1213.02 L1200.65 1213.02 L1200.07 1213.02 L1199.48 1213.02 L1198.89 1213.02 L1198.31 1213.02 L1197.72 1213.02 L1197.13 1213.02 L1196.55 1213.02 L1195.96 1213.02 L1195.37 1213.02 L1194.79 1213.02 L1194.2 1213.02 L1193.62 1213.02 L1193.03 1213.02 L1192.44 1213.02 L1191.86 1213.02 L1191.27 1213.02 L1190.68 1213.02 L1190.1 1213.02 L1189.51 1213.02 L1188.92 1213.02 L1188.34 1213.02 L1187.75 1213.02 L1187.16 1213.02 L1186.58 1213.02 L1185.99 1213.02 L1185.41 1213.02 L1184.82 1213.02 L1184.23 1213.02 L1183.65 1213.02 L1183.06 1213.02 L1182.47 1213.02 L1181.89 1213.02 L1181.3 1213.02 L1180.71 1213.02 L1180.13 1213.02 L1179.54 1213.02 L1178.96 1213.02 L1178.37 1213.02 L1177.78 1213.02 L1177.2 1213.02 L1176.61 1213.02 L1176.02 1213.02 L1175.44 1213.02 L1174.85 1213.02 L1174.26 1213.02 L1173.68 1213.02 L1173.09 1213.02 L1172.5 1213.02 L1171.92 1213.02 L1171.33 1213.02 L1170.75 1213.02 L1170.16 1213.02 L1169.57 1213.02 L1168.99 1213.02 L1168.4 1213.02 L1167.81 1213.02 L1167.23 1213.02 L1166.64 1213.02 L1166.05 1213.02 L1165.47 1213.02 L1164.88 1213.02 L1164.29 1213.02 L1163.71 1213.02 L1163.12 1213.02 L1162.54 1213.02 L1161.95 1213.02 L1161.36 1213.02 L1160.78 1213.02 L1160.19 1213.02 L1159.6 1213.02 L1159.02 1213.02 L1158.43 1213.02 L1157.84 1213.02 L1157.26 1213.02 L1156.67 1213.02 L1156.09 1213.02 L1155.5 1213.02 L1154.91 1213.02 L1154.33 1213.02 L1153.74 1213.02 L1153.15 1213.02 L1152.57 1213.02 L1151.98 1213.02 L1151.39 1213.02 L1150.81 1213.02 L1150.22 1213.02 L1149.63 1213.02 L1149.05 1213.02 L1148.46 1213.02 L1147.88 1213.02 L1147.29 1213.02 L1146.7 1213.02 L1146.12 1213.02 L1145.53 1213.02 L1144.94 1213.02 L1144.36 1213.02 L1143.77 1213.02 L1143.18 1213.02 L1142.6 1213.02 L1142.01 1213.02 L1141.42 1213.02 L1140.84 1213.02 L1140.25 1213.02 L1139.67 1213.02 L1139.08 1213.02 L1138.49 1213.02 L1137.91 1213.02 L1137.32 1213.02 L1136.73 1213.02 L1136.15 1213.02 L1135.56 1213.02 L1134.97 1213.02 L1134.39 1213.02 L1133.8 1213.02 L1133.21 1213.02 L1132.63 1213.02 L1132.04 1213.02 L1131.46 1213.02 L1130.87 1213.02 L1130.28 1213.02 L1129.7 1213.02 L1129.11 1213.02 L1128.52 1213.02 L1127.94 1213.02 L1127.35 1213.02 L1126.76 1213.02 L1126.18 1213.02 L1125.59 1213.02 L1125.01 1213.02 L1124.42 1213.02 L1123.83 1213.02 L1123.25 1213.02 L1122.66 1213.02 L1122.07 1213.02 L1121.49 1213.02 L1120.9 1213.02 L1120.31 1213.02 L1119.73 1213.02 L1119.14 1213.02 L1118.55 1213.02 L1117.97 1213.02 L1117.38 1213.02 L1116.8 1213.02 L1116.21 1213.02 L1115.62 1213.02 L1115.04 1213.02 L1114.45 1213.02 L1113.86 1213.02 L1113.28 1213.02 L1112.69 1213.02 L1112.1 1213.02 L1111.52 1213.02 L1110.93 1213.02 L1110.34 1213.02 L1109.76 1213.02 L1109.17 1213.02 L1108.59 1213.02 L1108 1213.02 L1107.41 1213.02 L1106.83 1213.02 L1106.24 1213.02 L1105.65 1213.02 L1105.07 1213.02 L1104.48 1213.02 L1103.89 1213.02 L1103.31 1213.02 L1102.72 1213.02 L1102.14 1213.02 L1101.55 1213.02 L1100.96 1213.02 L1100.38 1213.02 L1099.79 1213.02 L1099.2 1213.02 L1098.62 1213.02 L1098.03 1213.02 L1097.44 1213.02 L1096.86 1213.02 L1096.27 1213.02 L1095.68 1213.02 L1095.1 1213.02 L1094.51 1213.02 L1093.93 1213.02 L1093.34 1213.02 L1092.75 1213.02 L1092.17 1213.02 L1091.58 1213.02 L1090.99 1213.02 L1090.41 1213.02 L1089.82 1213.02 L1089.23 1213.02 L1088.65 1213.02 L1088.06 1213.02 L1087.47 1213.02 L1086.89 1213.02 L1086.3 1213.02 L1085.72 1213.02 L1085.13 1213.02 L1084.54 1213.02 L1083.96 1213.02 L1083.37 1213.02 L1082.78 1213.02 L1082.2 1213.02 L1081.61 1213.02 L1081.02 1213.02 L1080.44 1213.02 L1079.85 1213.02 L1079.26 1213.02 L1078.68 1213.02 L1078.09 1213.02 L1077.51 1213.02 L1076.92 1213.02 L1076.33 1213.02 L1075.75 1213.02 L1075.16 1213.02 L1074.57 1213.02 L1073.99 1213.02 L1073.4 1213.02 L1072.81 1213.02 L1072.23 1213.02 L1071.64 1213.02 L1071.06 1213.02 L1070.47 1213.02 L1069.88 1213.02 L1069.3 1213.02 L1068.71 1213.02 L1068.12 1213.02 L1067.54 1213.02 L1066.95 1213.02 L1066.36 1213.02 L1065.78 1213.02 L1065.19 1213.02 L1064.6 1213.02 L1064.02 1213.02 L1063.43 1213.02 L1062.85 1213.02 L1062.26 1213.02 L1061.67 1213.02 L1061.09 1213.02 L1060.5 1213.02 L1059.91 1213.02 L1059.33 1213.02 L1058.74 1213.02 L1058.15 1213.02 L1057.57 1213.02 L1056.98 1213.02 L1056.39 1213.02 L1055.81 1213.02 L1055.22 1213.02 L1054.64 1213.02 L1054.05 1213.02 L1053.46 1213.02 L1052.88 1213.02 L1052.29 1213.02 L1051.7 1213.02 L1051.12 1213.02 L1050.53 1213.02 L1049.94 1213.02 L1049.36 1213.02 L1048.77 1213.02 L1048.19 1213.02 L1047.6 1213.02 L1047.01 1213.02 L1046.43 1213.02 L1045.84 1213.02 L1045.25 1213.02 L1044.67 1213.02 L1044.08 1213.02 L1043.49 1213.02 L1042.91 1213.02 L1042.32 1213.02 L1041.73 1213.02 L1041.15 1213.02 L1040.56 1213.02 L1039.98 1213.02 L1039.39 1213.02 L1038.8 1213.02 L1038.22 1213.02 L1037.63 1213.02 L1037.04 1213.02 L1036.46 1213.02 L1035.87 1213.02 L1035.28 1213.02 L1034.7 1213.02 L1034.11 1213.02 L1033.52 1213.02 L1032.94 1213.02 L1032.35 1213.02 L1031.77 1213.02 L1031.18 1213.02 L1030.59 1213.02 L1030.01 1213.02 L1029.42 1213.02 L1028.83 1213.02 L1028.25 1213.02 L1027.66 1213.02 L1027.07 1213.02 L1026.49 1213.02 L1025.9 1213.02 L1025.32 1213.02 L1024.73 1213.02 L1024.14 1213.02 L1023.56 1213.02 L1022.97 1213.02 L1022.38 1213.02 L1021.8 1213.02 L1021.21 1213.02 L1020.62 1213.02 L1020.04 1213.02 L1019.45 1213.02 L1018.86 1213.02 L1018.28 1213.02 L1017.69 1213.02 L1017.11 1213.02 L1016.52 1213.02 L1015.93 1213.02 L1015.35 1213.02 L1014.76 1213.02 L1014.17 1213.02 L1013.59 1213.02 L1013 1213.02 L1012.41 1213.02 L1011.83 1213.02 L1011.24 1213.02 L1010.65 1213.02 L1010.07 1213.02 L1009.48 1213.02 L1008.9 1213.02 L1008.31 1213.02 L1007.72 1213.02 L1007.14 1213.02 L1006.55 1213.02 L1005.96 1213.02 L1005.38 1213.02 L1004.79 1213.02 L1004.2 1213.02 L1003.62 1213.02 L1003.03 1213.02 L1002.44 1213.02 L1001.86 1213.02 L1001.27 1213.02 L1000.69 1213.02 L1000.1 1213.02 L999.513 1213.02 L998.926 1213.02 L998.34 1213.02 L997.754 1213.02 L997.167 1213.02 L996.581 1213.02 L995.994 1213.02 L995.408 1213.02 L994.822 1213.02 L994.235 1213.02 L993.649 1213.02 L993.062 1213.02 L992.476 1213.02 L991.889 1213.02 L991.303 1213.02 L990.717 1213.02 L990.13 1213.02 L989.544 1213.02 L988.957 1213.02 L988.371 1213.02 L987.785 1213.02 L987.198 1213.02 L986.612 1213.02 L986.025 1213.02  Z\" fill=\"#3da44d\" fill-rule=\"evenodd\" fill-opacity=\"0.5\"/>\n<polyline clip-path=\"url(#clip782)\" style=\"stroke:#3da44d; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"986.025,1213.08 986.612,1213.08 987.198,1213.08 987.785,1213.08 988.371,1213.08 988.957,1213.08 989.544,1213.08 990.13,1213.08 990.717,1213.08 991.303,1213.08 991.889,1213.08 992.476,1213.08 993.062,1213.08 993.649,1213.08 994.235,1213.08 994.822,1213.08 995.408,1213.08 995.994,1213.08 996.581,1213.08 997.167,1213.08 997.754,1213.08 998.34,1213.08 998.926,1213.08 999.513,1213.08 1000.1,1213.08 1000.69,1213.08 1001.27,1213.08 1001.86,1213.08 1002.44,1213.08 1003.03,1213.08 1003.62,1213.08 1004.2,1213.08 1004.79,1213.08 1005.38,1213.08 1005.96,1213.08 1006.55,1213.08 1007.14,1213.08 1007.72,1213.08 1008.31,1213.08 1008.9,1213.08 1009.48,1213.08 1010.07,1213.08 1010.65,1213.08 1011.24,1213.08 1011.83,1213.08 1012.41,1213.08 1013,1213.08 1013.59,1213.08 1014.17,1213.08 1014.76,1213.08 1015.35,1213.08 1015.93,1213.08 1016.52,1213.08 1017.11,1213.08 1017.69,1213.08 1018.28,1213.08 1018.86,1213.08 1019.45,1213.08 1020.04,1213.08 1020.62,1213.08 1021.21,1213.08 1021.8,1213.08 1022.38,1213.08 1022.97,1213.08 1023.56,1213.08 1024.14,1213.08 1024.73,1213.08 1025.32,1213.08 1025.9,1213.08 1026.49,1213.08 1027.07,1213.08 1027.66,1213.08 1028.25,1213.08 1028.83,1213.08 1029.42,1213.08 1030.01,1213.08 1030.59,1213.08 1031.18,1213.08 1031.77,1213.08 1032.35,1213.08 1032.94,1213.08 1033.52,1213.08 1034.11,1213.08 1034.7,1213.08 1035.28,1213.08 1035.87,1213.08 1036.46,1213.08 1037.04,1213.08 1037.63,1213.08 1038.22,1213.08 1038.8,1213.08 1039.39,1213.08 1039.98,1213.08 1040.56,1213.08 1041.15,1213.08 1041.73,1213.08 1042.32,1213.08 1042.91,1213.08 1043.49,1213.08 1044.08,1213.08 1044.67,1213.08 1045.25,1213.08 1045.84,1213.08 1046.43,1213.08 1047.01,1213.08 1047.6,1213.08 1048.19,1213.08 1048.77,1213.08 1049.36,1213.08 1049.94,1213.08 1050.53,1213.08 1051.12,1213.08 1051.7,1213.08 1052.29,1213.08 1052.88,1213.08 1053.46,1213.08 1054.05,1213.08 1054.64,1213.08 1055.22,1213.08 1055.81,1213.08 1056.39,1213.08 1056.98,1213.08 1057.57,1213.08 1058.15,1213.08 1058.74,1213.08 1059.33,1213.08 1059.91,1213.08 1060.5,1213.08 1061.09,1213.08 1061.67,1213.08 1062.26,1213.08 1062.85,1213.08 1063.43,1213.08 1064.02,1213.08 1064.6,1213.08 1065.19,1213.08 1065.78,1213.08 1066.36,1213.08 1066.95,1213.08 1067.54,1213.08 1068.12,1213.08 1068.71,1213.08 1069.3,1213.08 1069.88,1213.08 1070.47,1213.08 1071.06,1213.08 1071.64,1213.08 1072.23,1213.08 1072.81,1213.08 1073.4,1213.08 1073.99,1213.08 1074.57,1213.08 1075.16,1213.08 1075.75,1213.08 1076.33,1213.08 1076.92,1213.08 1077.51,1213.08 1078.09,1213.08 1078.68,1213.08 1079.26,1213.08 1079.85,1213.08 1080.44,1213.08 1081.02,1213.08 1081.61,1213.08 1082.2,1213.08 1082.78,1213.08 1083.37,1213.08 1083.96,1213.08 1084.54,1213.08 1085.13,1213.08 1085.72,1213.08 1086.3,1213.08 1086.89,1213.08 1087.47,1213.08 1088.06,1213.08 1088.65,1213.08 1089.23,1213.08 1089.82,1213.08 1090.41,1213.08 1090.99,1213.08 1091.58,1213.08 1092.17,1213.08 1092.75,1213.08 1093.34,1213.08 1093.93,1213.08 1094.51,1213.08 1095.1,1213.08 1095.68,1213.08 1096.27,1213.08 1096.86,1213.08 1097.44,1213.08 1098.03,1213.08 1098.62,1213.08 1099.2,1213.08 1099.79,1213.08 1100.38,1213.08 1100.96,1213.08 1101.55,1213.08 1102.14,1213.08 1102.72,1213.08 1103.31,1213.08 1103.89,1213.08 1104.48,1213.08 1105.07,1213.08 1105.65,1213.08 1106.24,1213.08 1106.83,1213.08 1107.41,1213.08 1108,1213.08 1108.59,1213.08 1109.17,1213.08 1109.76,1213.08 1110.34,1213.08 1110.93,1213.08 1111.52,1213.08 1112.1,1213.08 1112.69,1213.08 1113.28,1213.08 1113.86,1213.08 1114.45,1213.08 1115.04,1213.08 1115.62,1213.08 1116.21,1213.08 1116.8,1213.08 1117.38,1213.08 1117.97,1213.08 1118.55,1213.08 1119.14,1213.08 1119.73,1213.08 1120.31,1213.08 1120.9,1213.08 1121.49,1213.08 1122.07,1213.08 1122.66,1213.08 1123.25,1213.08 1123.83,1213.08 1124.42,1213.08 1125.01,1213.08 1125.59,1213.08 1126.18,1213.08 1126.76,1213.08 1127.35,1213.08 1127.94,1213.08 1128.52,1213.08 1129.11,1213.08 1129.7,1213.08 1130.28,1213.08 1130.87,1213.08 1131.46,1213.08 1132.04,1213.08 1132.63,1213.08 1133.21,1213.08 1133.8,1213.08 1134.39,1213.08 1134.97,1213.08 1135.56,1213.08 1136.15,1213.08 1136.73,1213.08 1137.32,1213.08 1137.91,1213.08 1138.49,1213.08 1139.08,1213.08 1139.67,1213.08 1140.25,1213.08 1140.84,1213.08 1141.42,1213.08 1142.01,1213.08 1142.6,1213.08 1143.18,1213.08 1143.77,1213.08 1144.36,1213.08 1144.94,1213.08 1145.53,1213.08 1146.12,1213.08 1146.7,1213.08 1147.29,1213.08 1147.88,1213.08 1148.46,1213.08 1149.05,1213.08 1149.63,1213.08 1150.22,1213.08 1150.81,1213.08 1151.39,1213.08 1151.98,1213.08 1152.57,1213.08 1153.15,1213.08 1153.74,1213.08 1154.33,1213.08 1154.91,1213.08 1155.5,1213.08 1156.09,1213.08 1156.67,1213.08 1157.26,1213.08 1157.84,1213.08 1158.43,1213.08 1159.02,1213.08 1159.6,1213.08 1160.19,1213.08 1160.78,1213.08 1161.36,1213.08 1161.95,1213.08 1162.54,1213.08 1163.12,1213.08 1163.71,1213.08 1164.29,1213.08 1164.88,1213.08 1165.47,1213.08 1166.05,1213.08 1166.64,1213.08 1167.23,1213.08 1167.81,1213.08 1168.4,1213.08 1168.99,1213.08 1169.57,1213.08 1170.16,1213.08 1170.75,1213.08 1171.33,1213.08 1171.92,1213.08 1172.5,1213.08 1173.09,1213.08 1173.68,1213.08 1174.26,1213.08 1174.85,1213.08 1175.44,1213.08 1176.02,1213.08 1176.61,1213.08 1177.2,1213.08 1177.78,1213.08 1178.37,1213.08 1178.96,1213.08 1179.54,1213.08 1180.13,1213.08 1180.71,1213.08 1181.3,1213.08 1181.89,1213.08 1182.47,1213.08 1183.06,1213.08 1183.65,1213.08 1184.23,1213.08 1184.82,1213.08 1185.41,1213.08 1185.99,1213.08 1186.58,1213.08 1187.16,1213.08 1187.75,1213.08 1188.34,1213.08 1188.92,1213.08 1189.51,1213.08 1190.1,1213.08 1190.68,1213.08 1191.27,1213.08 1191.86,1213.08 1192.44,1213.08 1193.03,1213.08 1193.62,1213.08 1194.2,1213.08 1194.79,1213.08 1195.37,1213.08 1195.96,1213.08 1196.55,1213.08 1197.13,1213.08 1197.72,1213.08 1198.31,1213.08 1198.89,1213.08 1199.48,1213.08 1200.07,1213.08 1200.65,1213.08 1201.24,1213.08 1201.83,1213.08 1202.41,1213.08 1203,1213.08 1203.58,1213.08 1204.17,1213.08 1204.76,1213.08 1205.34,1213.08 1205.93,1213.08 1206.52,1213.08 1207.1,1213.08 1207.69,1213.08 1208.28,1213.08 1208.86,1213.08 1209.45,1213.08 1210.03,1213.08 1210.62,1213.08 1211.21,1213.08 1211.79,1213.08 1212.38,1213.08 1212.97,1213.08 1213.55,1213.08 1214.14,1213.08 1214.73,1213.08 1215.31,1213.08 1215.9,1213.08 1216.49,1213.08 1217.07,1213.08 1217.66,1213.08 1218.24,1213.08 1218.83,1213.08 1219.42,1213.08 1220,1213.08 1220.59,1213.08 1221.18,1213.08 1221.76,1213.08 1222.35,1213.08 1222.94,1213.08 1223.52,1213.08 1224.11,1213.08 1224.7,1213.08 1225.28,1213.08 1225.87,1213.08 1226.45,1213.08 1227.04,1213.08 1227.63,1213.08 1228.21,1213.08 1228.8,1213.08 1229.39,1213.08 1229.97,1213.08 1230.56,1213.08 1231.15,1213.08 1231.73,1213.08 1232.32,1213.08 1232.91,1213.08 1233.49,1213.08 1234.08,1213.08 1234.66,1213.08 1235.25,1213.08 1235.84,1213.08 1236.42,1213.08 1237.01,1213.08 1237.6,1213.08 1238.18,1213.08 1238.77,1213.08 1239.36,1213.08 1239.94,1213.08 1240.53,1213.08 1241.11,1213.08 1241.7,1213.08 1242.29,1213.08 1242.87,1213.08 1243.46,1213.08 1244.05,1213.08 1244.63,1213.08 1245.22,1213.08 1245.81,1213.08 1246.39,1213.08 1246.98,1213.08 1247.57,1213.08 1248.15,1213.08 1248.74,1213.08 1249.32,1213.08 1249.91,1213.08 1250.5,1213.08 1251.08,1213.08 1251.67,1213.08 1252.26,1213.08 1252.84,1213.08 1253.43,1213.08 1254.02,1213.08 1254.6,1213.08 1255.19,1213.08 1255.78,1213.08 1256.36,1213.08 1256.95,1213.08 1257.53,1213.08 1258.12,1213.08 1258.71,1213.08 1259.29,1213.08 1259.88,1213.08 1260.47,1213.08 1261.05,1213.08 1261.64,1213.08 1262.23,1213.08 1262.81,1213.08 1263.4,1213.08 1263.98,1213.08 1264.57,1213.08 1265.16,1213.08 1265.74,1213.08 1266.33,1213.08 1266.92,1213.08 1267.5,1213.08 1268.09,1213.08 1268.68,1213.08 1269.26,1213.08 1269.85,1213.08 1270.44,1213.08 1271.02,1213.08 1271.61,1213.08 1272.19,1213.08 1272.78,1213.08 1273.37,1213.08 1273.95,1213.08 1274.54,1213.08 1275.13,1213.08 1275.71,1213.08 1276.3,1213.08 1276.89,1213.08 1277.47,1213.08 1278.06,1213.08 1278.65,1213.08 1279.23,1213.08 1279.82,1213.08 1280.4,1213.08 1280.99,1213.08 1281.58,1213.08 1282.16,1213.08 1282.75,1213.08 1283.34,1213.08 1283.92,1213.08 1284.51,1213.08 1285.1,1213.08 1285.68,1213.08 1286.27,1213.08 1286.86,1213.08 1287.44,1213.08 1288.03,1213.08 1288.61,1213.08 1289.2,1213.08 1289.79,1213.08 1290.37,1213.08 1290.96,1213.08 1291.55,1213.08 1292.13,1213.08 1292.72,1213.08 1293.31,1213.08 1293.89,1213.08 1294.48,1213.08 1295.06,1213.08 1295.65,1213.08 1296.24,1213.08 1296.82,1213.08 1297.41,1213.08 1298,1213.08 1298.58,1213.08 1299.17,1213.08 1299.76,1213.08 1300.34,1213.08 1300.93,1213.08 1301.52,1213.08 1302.1,1213.08 1302.69,1213.08 1303.27,1213.08 1303.86,1213.08 1304.45,1213.08 1305.03,1213.08 1305.62,1213.08 1306.21,1213.08 1306.79,1213.08 1307.38,1213.08 1307.97,1213.08 1308.55,1213.08 1309.14,1213.08 1309.73,1213.08 1310.31,1213.08 1310.9,1213.08 1311.48,1213.08 1312.07,1213.08 1312.66,1213.08 1313.24,1213.08 1313.83,1213.08 1314.42,1213.08 1315,1213.08 1315.59,1213.08 1316.18,1213.08 1316.76,1213.08 1317.35,1213.08 1317.93,1213.08 1318.52,1213.08 1319.11,1213.08 1319.69,1213.08 1320.28,1213.08 1320.87,1213.08 1321.45,1213.08 1322.04,1213.08 1322.63,1213.08 1323.21,1213.08 1323.8,1213.08 1324.39,1213.08 1324.97,1213.08 1325.56,1213.08 1326.14,1213.08 1326.73,1213.08 1327.32,1213.08 1327.9,1213.08 1328.49,1213.08 1329.08,1213.08 1329.66,1213.08 1330.25,1213.08 1330.84,1213.08 1331.42,1213.08 1332.01,1213.08 1332.6,1213.08 1333.18,1213.08 1333.77,1213.08 1334.35,1213.08 1334.94,1213.08 1335.53,1213.08 1336.11,1213.08 1336.7,1213.08 1337.29,1213.08 1337.87,1213.08 1338.46,1213.08 1339.05,1213.08 1339.63,1213.08 1340.22,1213.08 1340.8,1213.08 1341.39,1213.08 1341.98,1213.08 1342.56,1213.08 1343.15,1213.08 1343.74,1213.08 1344.32,1213.08 1344.91,1213.08 1345.5,1213.08 1346.08,1213.08 1346.67,1213.08 1347.26,1213.08 1347.84,1213.08 1348.43,1213.08 1349.01,1213.08 1349.6,1213.08 1350.19,1213.08 1350.77,1213.08 1351.36,1213.08 1351.95,1213.08 1352.53,1213.08 1353.12,1213.08 1353.71,1213.08 1354.29,1213.08 1354.88,1213.08 1355.47,1213.08 1356.05,1213.08 1356.64,1213.08 1357.22,1213.08 1357.81,1213.08 1358.4,1213.08 1358.98,1213.08 1359.57,1213.08 1360.16,1213.08 1360.74,1213.08 1361.33,1213.08 1361.92,1213.08 1362.5,1213.08 1363.09,1213.08 1363.68,1213.08 1364.26,1213.08 1364.85,1213.08 1365.43,1213.08 1366.02,1213.08 1366.61,1213.08 1367.19,1213.08 1367.78,1213.08 1368.37,1213.08 1368.95,1213.08 1369.54,1213.08 1370.13,1213.08 1370.71,1213.08 1371.3,1213.08 1371.88,1213.08 1372.47,1213.08 1373.06,1213.08 1373.64,1213.08 1374.23,1213.08 1374.82,1213.08 1375.4,1213.08 1375.99,1213.08 1376.58,1213.08 1377.16,1213.08 1377.75,1213.08 1378.34,1213.08 1378.92,1213.08 1379.51,1213.08 1380.09,1213.08 1380.68,1213.08 1381.27,1213.08 1381.85,1213.08 1382.44,1213.08 1383.03,1213.08 1383.61,1213.08 1384.2,1213.08 1384.79,1213.08 1385.37,1213.08 1385.96,1213.08 1386.55,1213.08 1387.13,1213.08 1387.72,1213.08 1388.3,1213.08 1388.89,1213.08 1389.48,1213.08 1390.06,1213.08 1390.65,1213.08 1391.24,1213.08 1391.82,1213.08 1392.41,1213.08 1393,1213.08 1393.58,1213.08 1394.17,1213.08 1394.75,1213.08 1395.34,1213.08 1395.93,1213.08 1396.51,1213.08 1397.1,1213.08 1397.69,1213.08 1398.27,1213.08 1398.86,1213.08 1399.45,1213.08 1400.03,1213.08 1400.62,1213.08 1401.21,1213.08 1401.79,1213.08 1402.38,1213.08 1402.96,1213.08 1403.55,1213.08 1404.14,1213.08 1404.72,1213.08 1405.31,1213.08 1405.9,1213.08 1406.48,1213.08 1407.07,1213.08 1407.66,1213.08 1408.24,1213.08 1408.83,1213.08 1409.42,1213.08 1410,1213.08 1410.59,1213.08 1411.17,1213.08 1411.76,1213.08 1412.35,1213.08 1412.93,1213.08 1413.52,1213.08 1414.11,1213.08 1414.69,1213.08 1415.28,1213.08 1415.87,1213.08 1416.45,1213.08 1417.04,1213.08 1417.63,1213.08 1418.21,1213.08 1418.8,1213.08 1419.38,1213.08 1419.97,1213.08 1420.56,1213.08 1421.14,1213.08 1421.73,1213.08 1422.32,1213.08 1422.9,1213.08 1423.49,1213.08 1424.08,1213.08 1424.66,1213.08 1425.25,1213.08 1425.83,1213.08 1426.42,1213.08 1427.01,1213.08 1427.59,1213.08 1428.18,1213.08 1428.77,1213.08 1429.35,1213.08 1429.94,1213.08 1430.53,1213.08 1431.11,1213.08 1431.7,1213.08 1432.29,1213.08 1432.87,1213.08 1433.46,1213.08 1434.04,1213.08 1434.63,1213.08 1435.22,1213.08 1435.8,1213.08 1436.39,1213.08 1436.98,1213.08 1437.56,1213.08 1438.15,1213.08 1438.74,1213.08 1439.32,1213.08 1439.91,1213.08 1440.5,1213.08 1441.08,1213.08 1441.67,1213.08 1442.25,1213.08 1442.84,1213.08 1443.43,1213.08 1444.01,1213.08 1444.6,1213.08 1445.19,1213.08 1445.77,1213.08 1446.36,1213.08 1446.95,1213.08 1447.53,1213.08 1448.12,1213.08 1448.7,1213.08 1449.29,1213.08 1449.88,1213.08 1450.46,1213.08 1451.05,1213.08 1451.64,1213.08 1452.22,1213.08 1452.81,1213.08 1453.4,1213.08 1453.98,1213.08 1454.57,1213.08 1455.16,1213.08 1455.74,1213.08 1456.33,1213.08 1456.91,1213.08 1457.5,1213.08 1458.09,1213.08 1458.67,1213.08 1459.26,1213.08 1459.85,1213.08 1460.43,1213.08 1461.02,1213.08 1461.61,1213.08 1462.19,1213.08 1462.78,1213.08 1463.37,1213.08 1463.95,1213.08 1464.54,1213.08 1465.12,1213.08 1465.71,1213.08 1466.3,1213.08 1466.88,1213.08 1467.47,1213.08 1468.06,1213.08 1468.64,1213.08 1469.23,1213.08 1469.82,1213.08 1470.4,1213.08 1470.99,1213.08 1471.57,1213.08 1472.16,1213.08 1472.75,1213.08 1473.33,1213.08 1473.92,1213.08 1474.51,1213.08 1475.09,1213.08 1475.68,1213.08 1476.27,1213.08 1476.85,1213.08 1477.44,1213.08 1478.03,1213.08 1478.61,1213.08 1479.2,1213.08 1479.78,1213.08 1480.37,1213.08 1480.96,1213.08 1481.54,1213.08 1482.13,1213.08 1482.72,1213.08 1483.3,1213.08 1483.89,1213.08 1484.48,1213.08 1485.06,1213.08 1485.65,1213.08 1486.24,1213.08 1486.82,1213.08 1487.41,1213.08 1487.99,1213.08 1488.58,1213.08 1489.17,1213.08 1489.75,1213.08 1490.34,1213.08 1490.93,1213.08 1491.51,1213.08 1492.1,1213.08 1492.69,1213.08 1493.27,1213.08 1493.86,1213.08 1494.45,1213.08 1495.03,1213.08 1495.62,1213.08 1496.2,1213.08 1496.79,1213.08 1497.38,1213.08 1497.96,1213.08 1498.55,1213.08 1499.14,1213.08 1499.72,1213.08 1500.31,1213.08 1500.9,1213.08 1501.48,1213.08 1502.07,1213.08 1502.65,1213.08 1503.24,1213.08 1503.83,1213.08 1504.41,1213.08 1505,1213.08 1505.59,1213.08 1506.17,1213.08 1506.76,1213.08 1507.35,1213.08 1507.93,1213.08 1508.52,1213.08 1509.11,1213.08 1509.69,1213.08 1510.28,1213.08 1510.86,1213.08 1511.45,1213.08 1512.04,1213.08 1512.62,1213.08 1513.21,1213.08 1513.8,1213.08 1514.38,1213.08 1514.97,1213.08 1515.56,1213.08 1516.14,1213.08 1516.73,1213.08 1517.32,1213.08 1517.9,1213.08 1518.49,1213.08 1519.07,1213.08 1519.66,1213.08 1520.25,1213.08 1520.83,1213.08 1521.42,1213.08 1522.01,1213.08 1522.59,1213.08 1523.18,1213.08 1523.77,1213.08 1524.35,1213.08 1524.94,1213.08 1525.52,1213.08 1526.11,1213.08 1526.7,1213.08 1527.28,1213.08 1527.87,1213.08 1528.46,1213.08 1529.04,1213.08 1529.63,1213.08 1530.22,1213.08 1530.8,1213.08 1531.39,1213.08 1531.98,1213.08 1532.56,1213.08 1533.15,1213.08 1533.73,1213.08 1534.32,1213.08 1534.91,1213.08 1535.49,1213.08 1536.08,1213.08 1536.67,1213.08 1537.25,1213.08 1537.84,1213.08 1538.43,1213.08 1539.01,1213.08 1539.6,1213.08 1540.19,1213.08 1540.77,1213.08 1541.36,1213.08 1541.94,1213.08 1542.53,1213.08 1543.12,1213.08 1543.7,1213.08 1544.29,1213.08 1544.88,1213.08 1545.46,1213.08 1546.05,1213.08 1546.64,1213.08 1547.22,1213.08 1547.81,1213.08 1548.4,1213.08 1548.98,1213.08 1549.57,1213.08 1550.15,1213.08 1550.74,1213.08 1551.33,1213.08 1551.91,1213.08 1552.5,1213.08 1553.09,1213.08 1553.67,1213.08 1554.26,1213.08 1554.85,1213.08 1555.43,1213.08 1556.02,1213.08 1556.6,1213.08 1557.19,1213.08 1557.78,1213.08 1558.36,1213.08 1558.95,1213.08 1559.54,1213.08 1560.12,1213.08 1560.71,1213.08 1561.3,1213.08 1561.88,1213.08 1562.47,1213.08 1563.06,1213.08 1563.64,1213.08 1564.23,1213.08 1564.81,1213.08 1565.4,1213.08 1565.99,1213.08 1566.57,1213.08 1567.16,1213.08 1567.75,1213.08 1568.33,1213.08 1568.92,1213.08 1569.51,1213.08 1570.09,1213.08 1570.68,1213.08 1571.27,1213.08 1571.85,1213.08 1572.44,1213.08 1573.02,1213.08 1573.61,1213.08 1574.2,1213.08 1574.78,1213.08 1575.37,1213.08 1575.96,1213.08 1576.54,1213.08 1577.13,1213.08 1577.72,1213.08 1578.3,1213.08 1578.89,1213.08 1579.47,1213.08 1580.06,1213.08 1580.65,1213.08 1581.23,1213.08 1581.82,1213.08 1582.41,1213.08 1582.99,1213.08 1583.58,1213.08 1584.17,1213.08 1584.75,1213.08 1585.34,1213.08 1585.93,1213.08 1586.51,1213.08 1587.1,1213.08 1587.68,1213.08 1588.27,1213.08 1588.86,1213.08 1589.44,1213.08 1590.03,1213.08 1590.62,1213.08 1591.2,1213.08 1591.79,1213.08 1592.38,1213.08 1592.96,1213.08 1593.55,1213.08 1594.14,1213.08 1594.72,1213.08 1595.31,1213.08 1595.89,1213.08 1596.48,1213.08 1597.07,1213.08 1597.65,1213.08 1598.24,1213.08 1598.83,1213.08 1599.41,1213.08 1600,1213.08 1600.59,1213.08 1601.17,1213.08 1601.76,1213.08 1602.34,1213.08 1602.93,1213.08 1603.52,1213.08 1604.1,1213.08 1604.69,1213.08 1605.28,1213.08 1605.86,1213.08 1606.45,1213.08 1607.04,1213.08 1607.62,1213.08 1608.21,1213.08 1608.8,1213.08 1609.38,1213.08 1609.97,1213.08 1610.55,1213.08 1611.14,1213.08 1611.73,1213.08 1612.31,1213.08 1612.9,1213.08 1613.49,1213.08 1614.07,1213.08 1614.66,1213.08 1615.25,1213.08 1615.83,1213.08 1616.42,1213.08 1617.01,1213.08 1617.59,1213.08 1618.18,1213.08 1618.76,1213.08 1619.35,1213.08 1619.94,1213.08 1620.52,1213.08 1621.11,1213.08 1621.7,1213.08 1622.28,1213.08 1622.87,1213.08 1623.46,1213.08 1624.04,1213.08 1624.63,1213.08 1625.22,1213.08 1625.8,1213.08 1626.39,1213.08 1626.97,1213.08 1627.56,1213.08 1628.15,1213.08 1628.73,1213.08 1629.32,1213.08 1629.91,1213.08 1630.49,1213.08 1631.08,1213.08 1631.67,1213.08 1632.25,1213.08 1632.84,1213.08 1633.42,1213.08 1634.01,1213.08 1634.6,1213.08 1635.18,1213.08 1635.77,1213.08 1636.36,1213.08 1636.94,1213.08 1637.53,1213.08 1638.12,1213.08 1638.7,1213.08 1639.29,1213.08 1639.88,1213.08 1640.46,1213.08 1641.05,1213.08 1641.63,1213.08 1642.22,1213.08 1642.81,1213.08 1643.39,1213.08 1643.98,1213.08 1644.57,1213.08 1645.15,1213.08 1645.74,1213.08 1646.33,1213.08 1646.91,1213.08 1647.5,1213.08 1648.09,1213.08 1648.67,1213.08 1649.26,1213.08 1649.84,1213.08 1650.43,1213.08 1651.02,1213.08 1651.6,1213.08 1652.19,1213.08 1652.78,1213.08 1653.36,1213.08 1653.95,1213.08 1654.54,1213.08 1655.12,1213.08 1655.71,1213.08 1656.29,1213.08 1656.88,1213.08 1657.47,1213.08 1658.05,1213.08 1658.64,1213.08 1659.23,1213.08 1659.81,1213.08 1660.4,1213.08 1660.99,1213.08 1661.57,1213.08 1662.16,1213.08 1662.75,1213.08 1663.33,1213.08 1663.92,1213.08 1664.5,1213.08 1665.09,1213.08 1665.68,1213.08 1666.26,1213.08 1666.85,1213.08 1667.44,1213.08 1668.02,1213.08 1668.61,1213.08 1669.2,1213.08 1669.78,1213.08 1670.37,1213.08 1670.96,1213.08 1671.54,1213.08 1672.13,1213.08 1672.71,1213.08 1673.3,1213.08 1673.89,1213.08 1674.47,1213.08 1675.06,1213.08 1675.65,1213.08 1676.23,1213.08 1676.82,1213.08 1677.41,1213.08 1677.99,1213.08 1678.58,1213.08 1679.17,1213.08 1679.75,1213.08 1680.34,1213.08 1680.92,1213.08 1681.51,1213.08 1682.1,1213.08 1682.68,1213.08 1683.27,1213.08 1683.86,1213.08 1684.44,1213.08 1685.03,1213.08 1685.62,1213.08 1686.2,1213.08 1686.79,1213.08 1687.37,1213.08 1687.96,1213.08 1688.55,1213.08 1689.13,1213.08 1689.72,1213.08 1690.31,1213.08 1690.89,1213.08 1691.48,1213.08 1692.07,1213.08 1692.65,1213.08 1693.24,1213.08 1693.83,1213.08 1694.41,1213.08 1695,1213.08 1695.58,1213.08 1696.17,1213.08 1696.76,1213.08 1697.34,1213.08 1697.93,1213.08 1698.52,1213.08 1699.1,1213.08 1699.69,1213.08 1700.28,1213.08 1700.86,1213.08 1701.45,1213.08 1702.04,1213.08 1702.62,1213.08 1703.21,1213.08 1703.79,1213.08 1704.38,1213.08 1704.97,1213.08 1705.55,1213.08 1706.14,1213.08 1706.73,1213.08 1707.31,1213.08 1707.9,1213.08 1708.49,1213.08 1709.07,1213.08 1709.66,1213.08 1710.24,1213.08 1710.83,1213.08 1711.42,1213.08 1712,1213.08 1712.59,1213.08 1713.18,1213.08 1713.76,1213.08 1714.35,1213.08 1714.94,1213.08 1715.52,1213.08 1716.11,1213.08 1716.7,1213.08 1717.28,1213.08 1717.87,1213.08 1718.45,1213.08 1719.04,1213.08 1719.63,1213.08 1720.21,1213.08 1720.8,1213.08 1721.39,1213.08 1721.97,1213.08 1722.56,1213.08 1723.15,1213.08 1723.73,1213.08 1724.32,1213.08 1724.91,1213.08 1725.49,1213.08 1726.08,1213.08 1726.66,1213.08 1727.25,1213.08 1727.84,1213.08 1728.42,1213.08 1729.01,1213.08 1729.6,1213.08 1730.18,1213.08 1730.77,1213.08 1731.36,1213.08 1731.94,1213.08 1732.53,1213.08 1733.11,1213.08 1733.7,1213.08 1734.29,1213.08 1734.87,1213.08 1735.46,1213.08 1736.05,1213.08 1736.63,1213.08 1737.22,1213.08 1737.81,1213.08 1738.39,1213.08 1738.98,1213.08 1739.57,1213.08 1740.15,1213.08 1740.74,1213.08 1741.32,1213.08 1741.91,1213.08 1742.5,1213.08 1743.08,1213.08 1743.67,1213.08 1744.26,1213.08 1744.84,1213.08 1745.43,1213.08 1746.02,1213.08 1746.6,1213.08 1747.19,1213.08 1747.78,1213.08 1748.36,1213.08 1748.95,1213.08 1749.53,1213.08 1750.12,1213.08 1750.71,1213.08 1751.29,1213.08 1751.88,1213.08 1752.47,1213.08 1753.05,1213.08 1753.64,1213.08 1754.23,1213.08 1754.81,1213.08 1755.4,1213.08 1755.99,1213.08 1756.57,1213.08 1757.16,1213.08 1757.74,1213.08 1758.33,1213.08 1758.92,1213.08 1759.5,1213.08 1760.09,1213.08 1760.68,1213.08 1761.26,1213.08 1761.85,1213.08 1762.44,1213.08 1763.02,1213.08 1763.61,1213.08 1764.19,1213.08 1764.78,1213.08 1765.37,1213.08 1765.95,1213.08 1766.54,1213.08 1767.13,1213.08 1767.71,1213.08 1768.3,1213.08 1768.89,1213.08 1769.47,1213.08 1770.06,1213.08 1770.65,1213.08 1771.23,1213.08 1771.82,1213.08 1772.4,1213.08 1772.99,1213.08 1773.58,1213.08 1774.16,1213.08 1774.75,1213.08 1775.34,1213.08 1775.92,1213.08 1776.51,1213.08 1777.1,1213.08 1777.68,1213.08 1778.27,1213.08 1778.86,1213.08 1779.44,1213.08 1780.03,1213.08 1780.61,1213.08 1781.2,1213.08 1781.79,1213.08 1782.37,1213.08 1782.96,1213.08 1783.55,1213.08 1784.13,1213.08 1784.72,1213.08 1785.31,1213.08 1785.89,1213.08 1786.48,1213.08 1787.06,1213.08 1787.65,1213.08 1788.24,1213.08 1788.82,1213.08 1789.41,1213.08 1790,1213.08 1790.58,1213.08 1791.17,1213.08 1791.76,1213.08 1792.34,1213.08 1792.93,1213.08 1793.52,1213.08 1794.1,1213.08 1794.69,1213.08 1795.27,1213.08 1795.86,1213.08 1796.45,1213.08 1797.03,1213.08 1797.62,1213.08 1798.21,1213.08 1798.79,1213.08 1799.38,1213.08 1799.97,1213.08 1800.55,1213.08 1801.14,1213.08 1801.73,1213.08 1802.31,1213.08 1802.9,1213.08 1803.48,1213.08 1804.07,1213.08 1804.66,1213.08 1805.24,1213.08 1805.83,1213.08 1806.42,1213.08 1807,1213.08 1807.59,1213.08 1808.18,1213.08 1808.76,1213.08 1809.35,1213.08 1809.94,1213.08 1810.52,1213.08 1811.11,1213.08 1811.69,1213.08 1812.28,1213.08 1812.87,1213.08 1813.45,1213.08 1814.04,1213.08 1814.63,1213.08 1815.21,1213.08 1815.8,1213.08 1816.39,1213.08 1816.97,1213.08 1817.56,1213.08 1818.14,1213.08 1818.73,1213.08 1819.32,1213.08 1819.9,1213.08 1820.49,1213.08 1821.08,1213.08 1821.66,1213.08 1822.25,1213.08 1822.84,1213.08 1823.42,1213.08 1824.01,1213.08 1824.6,1213.08 1825.18,1213.08 1825.77,1213.08 1826.35,1213.08 1826.94,1213.08 1827.53,1213.08 1828.11,1213.08 1828.7,1213.08 1829.29,1213.08 1829.87,1213.08 1830.46,1213.08 1831.05,1213.08 1831.63,1213.08 1832.22,1213.08 1832.81,1213.08 1833.39,1213.08 1833.98,1213.08 1834.56,1213.08 1835.15,1213.08 1835.74,1213.08 1836.32,1213.08 1836.91,1213.08 1837.5,1213.08 1838.08,1213.08 1838.67,1213.08 1839.26,1213.08 1839.84,1213.08 1840.43,1213.08 1841.01,1213.08 1841.6,1213.08 1842.19,1213.08 1842.77,1213.08 1843.36,1213.08 1843.95,1213.08 1844.53,1213.08 1845.12,1213.08 1845.71,1213.08 1846.29,1213.08 1846.88,1213.08 1847.47,1213.08 1848.05,1213.08 1848.64,1213.08 1849.22,1213.08 1849.81,1213.08 1850.4,1213.08 1850.98,1213.08 1851.57,1213.08 1852.16,1213.08 1852.74,1213.08 1853.33,1213.08 1853.92,1213.08 1854.5,1213.08 1855.09,1213.08 1855.68,1213.08 1856.26,1213.08 1856.85,1213.08 1857.43,1213.08 1858.02,1213.08 1858.61,1213.08 1859.19,1213.08 1859.78,1213.08 1860.37,1213.08 1860.95,1213.08 1861.54,1213.08 1862.13,1213.08 1862.71,1213.08 1863.3,1213.08 1863.88,1213.08 1864.47,1213.08 1865.06,1213.08 1865.64,1213.08 1866.23,1213.08 1866.82,1213.08 1867.4,1213.08 1867.99,1213.08 1868.58,1213.08 1869.16,1213.08 1869.75,1213.08 1870.34,1213.08 1870.92,1213.08 1871.51,1213.08 1872.09,1213.08 1872.68,1213.08 1873.27,1213.08 1873.85,1213.08 1874.44,1213.08 1875.03,1213.08 1875.61,1213.08 1876.2,1213.08 1876.79,1213.08 1877.37,1213.08 1877.96,1213.08 1878.55,1213.08 1879.13,1213.08 1879.72,1213.08 1880.3,1213.08 1880.89,1213.08 1881.48,1213.08 1882.06,1213.08 1882.65,1213.08 1883.24,1213.08 1883.82,1213.08 1884.41,1213.08 1885,1213.08 1885.58,1213.08 1886.17,1213.08 1886.76,1213.08 1887.34,1213.08 1887.93,1213.08 1888.51,1213.08 1889.1,1213.08 1889.69,1213.08 1890.27,1213.08 1890.86,1213.08 1891.45,1213.08 1892.03,1213.08 1892.62,1213.08 1893.21,1213.08 1893.79,1213.08 1894.38,1213.08 1894.96,1213.08 1895.55,1213.08 1896.14,1213.08 1896.72,1213.08 1897.31,1213.08 1897.9,1213.08 1898.48,1213.08 1899.07,1213.08 1899.66,1213.08 1900.24,1213.08 1900.83,1213.08 1901.42,1213.08 1902,1213.08 1902.59,1213.08 1903.17,1213.08 1903.76,1213.08 1904.35,1213.08 1904.93,1213.08 1905.52,1213.08 1906.11,1213.08 1906.69,1213.08 1907.28,1213.08 1907.87,1213.08 1908.45,1213.08 1909.04,1213.08 1909.63,1213.08 1910.21,1213.08 1910.8,1213.08 1911.38,1213.08 1911.97,1213.08 1912.56,1213.08 1913.14,1213.08 1913.73,1213.08 1914.32,1213.08 1914.9,1213.08 1915.49,1213.08 1916.08,1213.08 1916.66,1213.08 1917.25,1213.08 1917.83,1213.08 1918.42,1213.08 1919.01,1213.08 1919.59,1213.08 1920.18,1213.08 1920.77,1213.08 1921.35,1213.08 1921.94,1213.08 1922.53,1213.08 1923.11,1213.08 1923.7,1213.08 1924.29,1213.08 1924.87,1213.08 1925.46,1213.08 1926.04,1213.08 1926.63,1213.08 1927.22,1213.08 1927.8,1213.08 1928.39,1213.08 1928.98,1213.08 1929.56,1213.08 1930.15,1213.08 1930.74,1213.08 1931.32,1213.08 1931.91,1213.08 1932.5,1213.08 1933.08,1213.08 1933.67,1213.08 1934.25,1213.08 1934.84,1213.08 1935.43,1213.08 1936.01,1213.08 1936.6,1213.08 1937.19,1213.08 1937.77,1213.08 1938.36,1213.08 1938.95,1213.08 1939.53,1213.08 1940.12,1213.08 1940.71,1213.08 1941.29,1213.08 1941.88,1213.08 1942.46,1213.08 1943.05,1213.08 1943.64,1213.08 1944.22,1213.08 1944.81,1213.08 1945.4,1213.08 1945.98,1213.08 1946.57,1213.08 1947.16,1213.08 1947.74,1213.08 1948.33,1213.08 1948.91,1213.08 1949.5,1213.08 1950.09,1213.08 1950.67,1213.08 1951.26,1213.08 1951.85,1213.08 1952.43,1213.08 1953.02,1213.08 1953.61,1213.08 1954.19,1213.08 1954.78,1213.08 1955.37,1213.08 1955.95,1213.08 1956.54,1213.08 1957.12,1213.08 1957.71,1213.08 1958.3,1213.08 1958.88,1213.08 1959.47,1213.08 1960.06,1213.08 1960.64,1213.08 1961.23,1213.08 1961.82,1213.08 1962.4,1213.08 1962.99,1213.08 1963.58,1213.08 1964.16,1213.08 1964.75,1213.08 1965.33,1213.08 1965.92,1213.08 1966.51,1213.08 1967.09,1213.08 1967.68,1213.08 1968.27,1213.08 1968.85,1213.08 1969.44,1213.08 1970.03,1213.08 1970.61,1213.08 1971.2,1213.08 1971.78,1213.08 1972.37,1213.08 1972.96,1213.08 1973.54,1213.08 1974.13,1213.08 1974.72,1213.08 1975.3,1213.08 1975.89,1213.08 1976.48,1213.08 1977.06,1213.08 1977.65,1213.08 1978.24,1213.08 1978.82,1213.08 1979.41,1213.08 1979.99,1213.08 1980.58,1213.08 1981.17,1213.08 1981.75,1213.08 1982.34,1213.08 1982.93,1213.08 1983.51,1213.08 1984.1,1213.08 1984.69,1213.08 1985.27,1213.08 1985.86,1213.08 1986.45,1213.08 1987.03,1213.08 1987.62,1213.08 1988.2,1213.08 1988.79,1213.08 1989.38,1213.08 1989.96,1213.08 1990.55,1213.08 1991.14,1213.08 1991.72,1213.08 1992.31,1213.08 1992.9,1213.08 1993.48,1213.08 1994.07,1213.08 1994.65,1213.08 1995.24,1213.08 1995.83,1213.08 1996.41,1213.08 1997,1213.08 1997.59,1213.08 1998.17,1213.08 1998.76,1213.08 1999.35,1213.08 1999.93,1213.08 2000.52,1213.08 2001.11,1213.08 2001.69,1213.08 2002.28,1213.08 2002.86,1213.08 2003.45,1213.08 2004.04,1213.08 2004.62,1213.08 2005.21,1213.08 2005.8,1213.08 2006.38,1213.08 2006.97,1213.08 2007.56,1213.08 2008.14,1213.08 2008.73,1213.08 2009.32,1213.08 2009.9,1213.08 2010.49,1213.08 2011.07,1213.08 2011.66,1213.08 2012.25,1213.08 2012.83,1213.08 2013.42,1213.08 2014.01,1213.08 2014.59,1213.08 2015.18,1213.08 2015.77,1213.08 2016.35,1213.08 2016.94,1213.08 2017.53,1213.08 2018.11,1213.08 2018.7,1213.08 2019.28,1213.08 2019.87,1213.08 2020.46,1213.08 2021.04,1213.08 2021.63,1213.08 2022.22,1213.08 2022.8,1213.08 2023.39,1213.08 2023.98,1213.08 2024.56,1213.08 2025.15,1213.08 2025.73,1213.08 2026.32,1213.08 2026.91,1213.08 2027.49,1213.08 2028.08,1213.08 2028.67,1213.08 2029.25,1213.08 2029.84,1213.08 2030.43,1213.08 2031.01,1213.08 2031.6,1213.08 2032.19,1213.08 2032.77,1213.08 2033.36,1213.08 2033.94,1213.08 2034.53,1213.08 2035.12,1213.08 2035.7,1213.08 2036.29,1213.08 2036.88,1213.08 2037.46,1213.08 2038.05,1213.08 2038.64,1213.08 2039.22,1213.08 2039.81,1213.08 2040.4,1213.08 2040.98,1213.08 2041.57,1213.08 2042.15,1213.08 2042.74,1213.08 2043.33,1213.08 2043.91,1213.08 2044.5,1213.08 2045.09,1213.08 2045.67,1213.08 2046.26,1213.08 2046.85,1213.08 2047.43,1213.08 2048.02,1213.08 2048.6,1213.08 2049.19,1213.08 2049.78,1213.08 2050.36,1213.08 2050.95,1213.08 2051.54,1213.08 2052.12,1213.08 2052.71,1213.08 2053.3,1213.08 2053.88,1213.08 2054.47,1213.08 2055.06,1213.08 2055.64,1213.08 2056.23,1213.08 2056.81,1213.08 2057.4,1213.08 2057.99,1213.08 2058.57,1213.08 2059.16,1213.08 2059.75,1213.08 2060.33,1213.08 2060.92,1213.08 2061.51,1213.08 2062.09,1213.08 2062.68,1213.08 2063.27,1213.08 2063.85,1213.08 2064.44,1213.08 2065.02,1213.08 2065.61,1213.08 2066.2,1213.08 2066.78,1213.08 2067.37,1213.08 2067.96,1213.08 2068.54,1213.08 2069.13,1213.08 2069.72,1213.08 2070.3,1213.08 2070.89,1213.08 2071.48,1213.08 2072.06,1213.08 2072.65,1213.08 2073.23,1213.08 2073.82,1213.08 2074.41,1213.08 2074.99,1213.08 2075.58,1213.08 2076.17,1213.08 2076.75,1213.08 2077.34,1213.08 2077.93,1213.08 2078.51,1213.08 2079.1,1213.08 2079.68,1213.08 2080.27,1213.08 2080.86,1213.08 2081.44,1213.08 2082.03,1213.08 2082.62,1213.08 2083.2,1213.08 2083.79,1213.08 2084.38,1213.08 2084.96,1213.08 2085.55,1213.08 2086.14,1213.08 2086.72,1213.08 2087.31,1213.08 2087.89,1213.08 2088.48,1213.08 2089.07,1213.08 2089.65,1213.08 2090.24,1213.08 2090.83,1213.08 2091.41,1213.08 2092,1213.08 2092.59,1213.08 2093.17,1213.08 2093.76,1213.08 2094.35,1213.08 2094.93,1213.08 2095.52,1213.08 2096.1,1213.08 2096.69,1213.08 2097.28,1213.08 2097.86,1213.08 2098.45,1213.08 2099.04,1213.08 2099.62,1213.08 2100.21,1213.08 2100.8,1213.08 2101.38,1213.08 2101.97,1213.08 2102.55,1213.08 2103.14,1213.08 2103.73,1213.08 2104.31,1213.08 2104.9,1213.08 2105.49,1213.08 2106.07,1213.08 2106.66,1213.08 2107.25,1213.08 2107.83,1213.08 2108.42,1213.08 2109.01,1213.08 2109.59,1213.08 2110.18,1213.08 2110.76,1213.08 2111.35,1213.08 2111.94,1213.08 2112.52,1213.08 2113.11,1213.08 2113.7,1213.08 2114.28,1213.08 2114.87,1213.08 2115.46,1213.08 2116.04,1213.08 2116.63,1213.08 2117.22,1213.08 2117.8,1213.08 2118.39,1213.08 2118.97,1213.08 2119.56,1213.08 2120.15,1213.08 2120.73,1213.08 2121.32,1213.08 2121.91,1213.08 2122.49,1213.08 2123.08,1213.08 2123.67,1213.08 2124.25,1213.08 2124.84,1213.08 2125.42,1213.08 2126.01,1213.08 2126.6,1213.08 2127.18,1213.08 2127.77,1213.08 2128.36,1213.08 2128.94,1213.08 2129.53,1213.08 2130.12,1213.08 2130.7,1213.08 2131.29,1213.08 2131.88,1213.08 2132.46,1213.08 2133.05,1213.08 2133.63,1213.08 2134.22,1213.08 2134.81,1213.08 2135.39,1213.08 2135.98,1213.08 2136.57,1213.08 2137.15,1213.08 2137.74,1213.08 2138.33,1213.08 2138.91,1213.08 2139.5,1213.08 2140.09,1213.08 2140.67,1213.08 2141.26,1213.08 2141.84,1213.08 2142.43,1213.08 2143.02,1213.08 2143.6,1213.08 2144.19,1213.08 2144.78,1213.08 2145.36,1213.08 2145.95,1213.08 2146.54,1213.08 2147.12,1213.08 2147.71,1213.08 2148.3,1213.08 2148.88,1213.08 2149.47,1213.08 2150.05,1213.08 2150.64,1213.08 2151.23,1213.08 2151.81,1213.08 2152.4,1213.08 2152.99,1213.08 2153.57,1213.08 2154.16,1213.08 2154.75,1213.08 2155.33,1213.08 2155.92,1213.08 2156.5,1213.08 2157.09,1213.08 2157.68,1213.08 2158.26,1213.08 \"/>\n<polyline clip-path=\"url(#clip782)\" style=\"stroke:#d3d3d3; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"1561.97,1194.89 1399.18,899.083 \"/>\n<polyline clip-path=\"url(#clip782)\" style=\"stroke:#d3d3d3; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"985.439,1230.81 985.439,1194.89 2158.26,1194.89 2158.26,1230.81 985.439,1230.81 \"/>\n<path clip-path=\"url(#clip780)\" d=\"M1564.14 432.752 L2148.88 432.752 L2148.88 225.392 L1564.14 225.392  Z\" fill=\"#ffffff\" fill-rule=\"evenodd\" fill-opacity=\"1\"/>\n<polyline clip-path=\"url(#clip780)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"1564.14,432.752 2148.88,432.752 2148.88,225.392 1564.14,225.392 1564.14,432.752 \"/>\n<polyline clip-path=\"url(#clip780)\" style=\"stroke:#009af9; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"1584.85,277.232 1709.13,277.232 \"/>\n<path clip-path=\"url(#clip780)\" d=\"M1748.27 269.35 L1748.27 273.378 Q1746.46 272.452 1744.52 271.989 Q1742.57 271.526 1740.49 271.526 Q1737.32 271.526 1735.72 272.498 Q1734.15 273.471 1734.15 275.415 Q1734.15 276.896 1735.28 277.753 Q1736.41 278.586 1739.84 279.35 L1741.3 279.674 Q1745.84 280.646 1747.73 282.429 Q1749.66 284.188 1749.66 287.359 Q1749.66 290.97 1746.78 293.077 Q1743.94 295.183 1738.94 295.183 Q1736.85 295.183 1734.59 294.767 Q1732.34 294.373 1729.84 293.563 L1729.84 289.165 Q1732.2 290.392 1734.49 291.017 Q1736.78 291.619 1739.03 291.619 Q1742.04 291.619 1743.66 290.6 Q1745.28 289.558 1745.28 287.683 Q1745.28 285.947 1744.1 285.021 Q1742.94 284.095 1738.98 283.239 L1737.5 282.892 Q1733.54 282.058 1731.78 280.345 Q1730.03 278.609 1730.03 275.6 Q1730.03 271.943 1732.62 269.952 Q1735.21 267.961 1739.98 267.961 Q1742.34 267.961 1744.42 268.309 Q1746.51 268.656 1748.27 269.35 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip780)\" d=\"M1777.99 278.864 L1777.99 294.512 L1773.73 294.512 L1773.73 279.003 Q1773.73 275.322 1772.29 273.494 Q1770.86 271.665 1767.99 271.665 Q1764.54 271.665 1762.55 273.864 Q1760.56 276.063 1760.56 279.859 L1760.56 294.512 L1756.28 294.512 L1756.28 258.494 L1760.56 258.494 L1760.56 272.614 Q1762.09 270.276 1764.15 269.119 Q1766.23 267.961 1768.94 267.961 Q1773.4 267.961 1775.7 270.739 Q1777.99 273.494 1777.99 278.864 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip780)\" d=\"M1786.48 268.586 L1790.74 268.586 L1790.74 294.512 L1786.48 294.512 L1786.48 268.586 M1786.48 258.494 L1790.74 258.494 L1790.74 263.887 L1786.48 263.887 L1786.48 258.494 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip780)\" d=\"M1812.78 258.494 L1812.78 262.035 L1808.71 262.035 Q1806.41 262.035 1805.51 262.961 Q1804.63 263.887 1804.63 266.295 L1804.63 268.586 L1811.65 268.586 L1811.65 271.896 L1804.63 271.896 L1804.63 294.512 L1800.35 294.512 L1800.35 271.896 L1796.28 271.896 L1796.28 268.586 L1800.35 268.586 L1800.35 266.781 Q1800.35 262.452 1802.36 260.484 Q1804.38 258.494 1808.75 258.494 L1812.78 258.494 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip780)\" d=\"M1819.72 261.225 L1819.72 268.586 L1828.5 268.586 L1828.5 271.896 L1819.72 271.896 L1819.72 285.97 Q1819.72 289.142 1820.58 290.045 Q1821.46 290.947 1824.12 290.947 L1828.5 290.947 L1828.5 294.512 L1824.12 294.512 Q1819.19 294.512 1817.32 292.683 Q1815.44 290.832 1815.44 285.97 L1815.44 271.896 L1812.32 271.896 L1812.32 268.586 L1815.44 268.586 L1815.44 261.225 L1819.72 261.225 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><polyline clip-path=\"url(#clip780)\" style=\"stroke:#e26f46; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"1584.85,329.072 1709.13,329.072 \"/>\n<path clip-path=\"url(#clip780)\" d=\"M1748.27 321.19 L1748.27 325.218 Q1746.46 324.292 1744.52 323.829 Q1742.57 323.366 1740.49 323.366 Q1737.32 323.366 1735.72 324.338 Q1734.15 325.311 1734.15 327.255 Q1734.15 328.736 1735.28 329.593 Q1736.41 330.426 1739.84 331.19 L1741.3 331.514 Q1745.84 332.486 1747.73 334.269 Q1749.66 336.028 1749.66 339.199 Q1749.66 342.81 1746.78 344.917 Q1743.94 347.023 1738.94 347.023 Q1736.85 347.023 1734.59 346.607 Q1732.34 346.213 1729.84 345.403 L1729.84 341.005 Q1732.2 342.232 1734.49 342.857 Q1736.78 343.459 1739.03 343.459 Q1742.04 343.459 1743.66 342.44 Q1745.28 341.398 1745.28 339.523 Q1745.28 337.787 1744.1 336.861 Q1742.94 335.935 1738.98 335.079 L1737.5 334.732 Q1733.54 333.898 1731.78 332.185 Q1730.03 330.449 1730.03 327.44 Q1730.03 323.783 1732.62 321.792 Q1735.21 319.801 1739.98 319.801 Q1742.34 319.801 1744.42 320.149 Q1746.51 320.496 1748.27 321.19 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip780)\" d=\"M1777.99 330.704 L1777.99 346.352 L1773.73 346.352 L1773.73 330.843 Q1773.73 327.162 1772.29 325.334 Q1770.86 323.505 1767.99 323.505 Q1764.54 323.505 1762.55 325.704 Q1760.56 327.903 1760.56 331.699 L1760.56 346.352 L1756.28 346.352 L1756.28 310.334 L1760.56 310.334 L1760.56 324.454 Q1762.09 322.116 1764.15 320.959 Q1766.23 319.801 1768.94 319.801 Q1773.4 319.801 1775.7 322.579 Q1777.99 325.334 1777.99 330.704 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip780)\" d=\"M1786.48 320.426 L1790.74 320.426 L1790.74 346.352 L1786.48 346.352 L1786.48 320.426 M1786.48 310.334 L1790.74 310.334 L1790.74 315.727 L1786.48 315.727 L1786.48 310.334 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip780)\" d=\"M1812.78 310.334 L1812.78 313.875 L1808.71 313.875 Q1806.41 313.875 1805.51 314.801 Q1804.63 315.727 1804.63 318.135 L1804.63 320.426 L1811.65 320.426 L1811.65 323.736 L1804.63 323.736 L1804.63 346.352 L1800.35 346.352 L1800.35 323.736 L1796.28 323.736 L1796.28 320.426 L1800.35 320.426 L1800.35 318.621 Q1800.35 314.292 1802.36 312.324 Q1804.38 310.334 1808.75 310.334 L1812.78 310.334 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip780)\" d=\"M1819.72 313.065 L1819.72 320.426 L1828.5 320.426 L1828.5 323.736 L1819.72 323.736 L1819.72 337.81 Q1819.72 340.982 1820.58 341.885 Q1821.46 342.787 1824.12 342.787 L1828.5 342.787 L1828.5 346.352 L1824.12 346.352 Q1819.19 346.352 1817.32 344.523 Q1815.44 342.672 1815.44 337.81 L1815.44 323.736 L1812.32 323.736 L1812.32 320.426 L1815.44 320.426 L1815.44 313.065 L1819.72 313.065 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip780)\" d=\"M1869.35 325.403 Q1870.95 322.533 1873.17 321.167 Q1875.4 319.801 1878.4 319.801 Q1882.46 319.801 1884.65 322.649 Q1886.85 325.473 1886.85 330.704 L1886.85 346.352 L1882.57 346.352 L1882.57 330.843 Q1882.57 327.116 1881.25 325.311 Q1879.93 323.505 1877.22 323.505 Q1873.91 323.505 1871.99 325.704 Q1870.07 327.903 1870.07 331.699 L1870.07 346.352 L1865.79 346.352 L1865.79 330.843 Q1865.79 327.093 1864.47 325.311 Q1863.15 323.505 1860.4 323.505 Q1857.13 323.505 1855.21 325.727 Q1853.29 327.926 1853.29 331.699 L1853.29 346.352 L1849.01 346.352 L1849.01 320.426 L1853.29 320.426 L1853.29 324.454 Q1854.75 322.07 1856.78 320.936 Q1858.82 319.801 1861.62 319.801 Q1864.45 319.801 1866.41 321.236 Q1868.4 322.672 1869.35 325.403 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip780)\" d=\"M1917.52 332.324 L1917.52 334.408 L1897.94 334.408 Q1898.22 338.806 1900.58 341.121 Q1902.96 343.412 1907.2 343.412 Q1909.65 343.412 1911.95 342.81 Q1914.26 342.209 1916.53 341.005 L1916.53 345.033 Q1914.24 346.005 1911.83 346.514 Q1909.42 347.023 1906.95 347.023 Q1900.74 347.023 1897.11 343.412 Q1893.5 339.801 1893.5 333.644 Q1893.5 327.278 1896.92 323.551 Q1900.37 319.801 1906.21 319.801 Q1911.44 319.801 1914.47 323.181 Q1917.52 326.537 1917.52 332.324 M1913.27 331.074 Q1913.22 327.579 1911.3 325.496 Q1909.4 323.412 1906.25 323.412 Q1902.69 323.412 1900.53 325.426 Q1898.4 327.44 1898.08 331.098 L1913.27 331.074 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip780)\" d=\"M1936.3 333.32 Q1931.14 333.32 1929.14 334.5 Q1927.15 335.681 1927.15 338.528 Q1927.15 340.797 1928.64 342.139 Q1930.14 343.459 1932.71 343.459 Q1936.25 343.459 1938.38 340.959 Q1940.53 338.435 1940.53 334.269 L1940.53 333.32 L1936.3 333.32 M1944.79 331.56 L1944.79 346.352 L1940.53 346.352 L1940.53 342.417 Q1939.08 344.778 1936.9 345.912 Q1934.72 347.023 1931.58 347.023 Q1927.59 347.023 1925.23 344.801 Q1922.89 342.556 1922.89 338.806 Q1922.89 334.431 1925.81 332.209 Q1928.75 329.986 1934.56 329.986 L1940.53 329.986 L1940.53 329.57 Q1940.53 326.63 1938.59 325.033 Q1936.67 323.412 1933.17 323.412 Q1930.95 323.412 1928.84 323.945 Q1926.74 324.477 1924.79 325.542 L1924.79 321.607 Q1927.13 320.704 1929.33 320.264 Q1931.53 319.801 1933.61 319.801 Q1939.24 319.801 1942.02 322.718 Q1944.79 325.635 1944.79 331.56 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip780)\" d=\"M1975.12 330.704 L1975.12 346.352 L1970.86 346.352 L1970.86 330.843 Q1970.86 327.162 1969.42 325.334 Q1967.99 323.505 1965.12 323.505 Q1961.67 323.505 1959.68 325.704 Q1957.69 327.903 1957.69 331.699 L1957.69 346.352 L1953.4 346.352 L1953.4 320.426 L1957.69 320.426 L1957.69 324.454 Q1959.21 322.116 1961.27 320.959 Q1963.36 319.801 1966.07 319.801 Q1970.53 319.801 1972.83 322.579 Q1975.12 325.334 1975.12 330.704 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><polyline clip-path=\"url(#clip780)\" style=\"stroke:#3da44d; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"1584.85,380.912 1709.13,380.912 \"/>\n<path clip-path=\"url(#clip780)\" d=\"M1734.12 394.303 L1734.12 408.053 L1729.84 408.053 L1729.84 372.266 L1734.12 372.266 L1734.12 376.201 Q1735.47 373.887 1737.5 372.776 Q1739.56 371.641 1742.41 371.641 Q1747.13 371.641 1750.07 375.391 Q1753.03 379.141 1753.03 385.252 Q1753.03 391.363 1750.07 395.113 Q1747.13 398.863 1742.41 398.863 Q1739.56 398.863 1737.5 397.752 Q1735.47 396.618 1734.12 394.303 M1748.61 385.252 Q1748.61 380.553 1746.67 377.891 Q1744.75 375.206 1741.37 375.206 Q1737.99 375.206 1736.04 377.891 Q1734.12 380.553 1734.12 385.252 Q1734.12 389.951 1736.04 392.637 Q1737.99 395.299 1741.37 395.299 Q1744.75 395.299 1746.67 392.637 Q1748.61 389.951 1748.61 385.252 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip780)\" d=\"M1775.12 376.248 Q1774.4 375.831 1773.54 375.646 Q1772.71 375.438 1771.69 375.438 Q1768.08 375.438 1766.14 377.799 Q1764.22 380.137 1764.22 384.535 L1764.22 398.192 L1759.93 398.192 L1759.93 372.266 L1764.22 372.266 L1764.22 376.294 Q1765.56 373.933 1767.71 372.799 Q1769.86 371.641 1772.94 371.641 Q1773.38 371.641 1773.91 371.711 Q1774.45 371.757 1775.09 371.873 L1775.12 376.248 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip780)\" d=\"M1788.59 375.252 Q1785.16 375.252 1783.17 377.938 Q1781.18 380.6 1781.18 385.252 Q1781.18 389.905 1783.15 392.59 Q1785.14 395.252 1788.59 395.252 Q1791.99 395.252 1793.98 392.567 Q1795.97 389.882 1795.97 385.252 Q1795.97 380.646 1793.98 377.961 Q1791.99 375.252 1788.59 375.252 M1788.59 371.641 Q1794.15 371.641 1797.32 375.252 Q1800.49 378.863 1800.49 385.252 Q1800.49 391.618 1797.32 395.252 Q1794.15 398.863 1788.59 398.863 Q1783.01 398.863 1779.84 395.252 Q1776.69 391.618 1776.69 385.252 Q1776.69 378.863 1779.84 375.252 Q1783.01 371.641 1788.59 371.641 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip780)\" d=\"M1807.55 372.266 L1811.81 372.266 L1811.81 398.655 Q1811.81 403.609 1809.91 405.831 Q1808.03 408.053 1803.84 408.053 L1802.22 408.053 L1802.22 404.442 L1803.36 404.442 Q1805.79 404.442 1806.67 403.308 Q1807.55 402.197 1807.55 398.655 L1807.55 372.266 M1807.55 362.174 L1811.81 362.174 L1811.81 367.567 L1807.55 367.567 L1807.55 362.174 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip780)\" d=\"M1842.9 384.164 L1842.9 386.248 L1823.31 386.248 Q1823.59 390.646 1825.95 392.961 Q1828.34 395.252 1832.57 395.252 Q1835.03 395.252 1837.32 394.65 Q1839.63 394.049 1841.9 392.845 L1841.9 396.873 Q1839.61 397.845 1837.2 398.354 Q1834.79 398.863 1832.32 398.863 Q1826.11 398.863 1822.48 395.252 Q1818.87 391.641 1818.87 385.484 Q1818.87 379.118 1822.29 375.391 Q1825.74 371.641 1831.58 371.641 Q1836.81 371.641 1839.84 375.021 Q1842.9 378.377 1842.9 384.164 M1838.64 382.914 Q1838.59 379.419 1836.67 377.336 Q1834.77 375.252 1831.62 375.252 Q1828.06 375.252 1825.9 377.266 Q1823.78 379.28 1823.45 382.938 L1838.64 382.914 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip780)\" d=\"M1868.54 373.262 L1868.54 377.243 Q1866.74 376.248 1864.91 375.762 Q1863.1 375.252 1861.25 375.252 Q1857.11 375.252 1854.82 377.891 Q1852.52 380.507 1852.52 385.252 Q1852.52 389.998 1854.82 392.637 Q1857.11 395.252 1861.25 395.252 Q1863.1 395.252 1864.91 394.766 Q1866.74 394.257 1868.54 393.262 L1868.54 397.197 Q1866.76 398.03 1864.84 398.447 Q1862.94 398.863 1860.79 398.863 Q1854.93 398.863 1851.48 395.183 Q1848.03 391.502 1848.03 385.252 Q1848.03 378.91 1851.51 375.276 Q1855 371.641 1861.07 371.641 Q1863.03 371.641 1864.91 372.058 Q1866.78 372.451 1868.54 373.262 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip780)\" d=\"M1880.16 364.905 L1880.16 372.266 L1888.94 372.266 L1888.94 375.576 L1880.16 375.576 L1880.16 389.65 Q1880.16 392.822 1881.02 393.725 Q1881.9 394.627 1884.56 394.627 L1888.94 394.627 L1888.94 398.192 L1884.56 398.192 Q1879.63 398.192 1877.76 396.363 Q1875.88 394.512 1875.88 389.65 L1875.88 375.576 L1872.76 375.576 L1872.76 372.266 L1875.88 372.266 L1875.88 364.905 L1880.16 364.905 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip780)\" d=\"M1916.71 384.164 L1916.71 386.248 L1897.13 386.248 Q1897.41 390.646 1899.77 392.961 Q1902.15 395.252 1906.39 395.252 Q1908.84 395.252 1911.14 394.65 Q1913.45 394.049 1915.72 392.845 L1915.72 396.873 Q1913.43 397.845 1911.02 398.354 Q1908.61 398.863 1906.14 398.863 Q1899.93 398.863 1896.3 395.252 Q1892.69 391.641 1892.69 385.484 Q1892.69 379.118 1896.11 375.391 Q1899.56 371.641 1905.4 371.641 Q1910.63 371.641 1913.66 375.021 Q1916.71 378.377 1916.71 384.164 M1912.46 382.914 Q1912.41 379.419 1910.49 377.336 Q1908.59 375.252 1905.44 375.252 Q1901.88 375.252 1899.72 377.266 Q1897.59 379.28 1897.27 382.938 L1912.46 382.914 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip780)\" d=\"M1940.77 376.201 L1940.77 362.174 L1945.02 362.174 L1945.02 398.192 L1940.77 398.192 L1940.77 394.303 Q1939.42 396.618 1937.36 397.752 Q1935.33 398.863 1932.46 398.863 Q1927.76 398.863 1924.79 395.113 Q1921.85 391.363 1921.85 385.252 Q1921.85 379.141 1924.79 375.391 Q1927.76 371.641 1932.46 371.641 Q1935.33 371.641 1937.36 372.776 Q1939.42 373.887 1940.77 376.201 M1926.25 385.252 Q1926.25 389.951 1928.17 392.637 Q1930.12 395.299 1933.5 395.299 Q1936.88 395.299 1938.82 392.637 Q1940.77 389.951 1940.77 385.252 Q1940.77 380.553 1938.82 377.891 Q1936.88 375.206 1933.5 375.206 Q1930.12 375.206 1928.17 377.891 Q1926.25 380.553 1926.25 385.252 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip780)\" d=\"M1991.04 384.164 L1991.04 386.248 L1971.46 386.248 Q1971.74 390.646 1974.1 392.961 Q1976.48 395.252 1980.72 395.252 Q1983.17 395.252 1985.46 394.65 Q1987.78 394.049 1990.05 392.845 L1990.05 396.873 Q1987.76 397.845 1985.35 398.354 Q1982.94 398.863 1980.46 398.863 Q1974.26 398.863 1970.63 395.252 Q1967.02 391.641 1967.02 385.484 Q1967.02 379.118 1970.44 375.391 Q1973.89 371.641 1979.72 371.641 Q1984.95 371.641 1987.99 375.021 Q1991.04 378.377 1991.04 384.164 M1986.78 382.914 Q1986.74 379.419 1984.82 377.336 Q1982.92 375.252 1979.77 375.252 Q1976.2 375.252 1974.05 377.266 Q1971.92 379.28 1971.6 382.938 L1986.78 382.914 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip780)\" d=\"M2019.58 382.544 L2019.58 398.192 L2015.32 398.192 L2015.32 382.683 Q2015.32 379.002 2013.89 377.174 Q2012.45 375.345 2009.58 375.345 Q2006.14 375.345 2004.14 377.544 Q2002.15 379.743 2002.15 383.539 L2002.15 398.192 L1997.87 398.192 L1997.87 372.266 L2002.15 372.266 L2002.15 376.294 Q2003.68 373.956 2005.74 372.799 Q2007.83 371.641 2010.53 371.641 Q2015 371.641 2017.29 374.419 Q2019.58 377.174 2019.58 382.544 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip780)\" d=\"M2050.26 384.164 L2050.26 386.248 L2030.67 386.248 Q2030.95 390.646 2033.31 392.961 Q2035.7 395.252 2039.93 395.252 Q2042.39 395.252 2044.68 394.65 Q2046.99 394.049 2049.26 392.845 L2049.26 396.873 Q2046.97 397.845 2044.56 398.354 Q2042.15 398.863 2039.68 398.863 Q2033.47 398.863 2029.84 395.252 Q2026.23 391.641 2026.23 385.484 Q2026.23 379.118 2029.65 375.391 Q2033.1 371.641 2038.94 371.641 Q2044.17 371.641 2047.2 375.021 Q2050.26 378.377 2050.26 384.164 M2046 382.914 Q2045.95 379.419 2044.03 377.336 Q2042.13 375.252 2038.98 375.252 Q2035.42 375.252 2033.26 377.266 Q2031.14 379.28 2030.81 382.938 L2046 382.914 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip780)\" d=\"M2072.27 376.248 Q2071.55 375.831 2070.7 375.646 Q2069.86 375.438 2068.84 375.438 Q2065.23 375.438 2063.29 377.799 Q2061.37 380.137 2061.37 384.535 L2061.37 398.192 L2057.08 398.192 L2057.08 372.266 L2061.37 372.266 L2061.37 376.294 Q2062.71 373.933 2064.86 372.799 Q2067.01 371.641 2070.09 371.641 Q2070.53 371.641 2071.07 371.711 Q2071.6 371.757 2072.25 371.873 L2072.27 376.248 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip780)\" d=\"M2092.96 384.928 Q2092.96 380.299 2091.04 377.752 Q2089.14 375.206 2085.69 375.206 Q2082.27 375.206 2080.35 377.752 Q2078.45 380.299 2078.45 384.928 Q2078.45 389.535 2080.35 392.081 Q2082.27 394.627 2085.69 394.627 Q2089.14 394.627 2091.04 392.081 Q2092.96 389.535 2092.96 384.928 M2097.22 394.975 Q2097.22 401.595 2094.28 404.812 Q2091.34 408.053 2085.28 408.053 Q2083.03 408.053 2081.04 407.706 Q2079.05 407.382 2077.18 406.687 L2077.18 402.544 Q2079.05 403.562 2080.88 404.049 Q2082.71 404.535 2084.61 404.535 Q2088.8 404.535 2090.88 402.336 Q2092.96 400.16 2092.96 395.738 L2092.96 393.632 Q2091.64 395.924 2089.58 397.058 Q2087.52 398.192 2084.65 398.192 Q2079.88 398.192 2076.97 394.558 Q2074.05 390.924 2074.05 384.928 Q2074.05 378.91 2076.97 375.276 Q2079.88 371.641 2084.65 371.641 Q2087.52 371.641 2089.58 372.776 Q2091.64 373.91 2092.96 376.201 L2092.96 372.266 L2097.22 372.266 L2097.22 394.975 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip780)\" d=\"M2116.78 400.599 Q2114.98 405.229 2113.26 406.641 Q2111.55 408.053 2108.68 408.053 L2105.28 408.053 L2105.28 404.488 L2107.78 404.488 Q2109.54 404.488 2110.51 403.655 Q2111.48 402.822 2112.66 399.72 L2113.43 397.775 L2102.94 372.266 L2107.45 372.266 L2115.56 392.544 L2123.66 372.266 L2128.17 372.266 L2116.78 400.599 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip780)\" d=\"M719.687 899.083 L1838.19 899.083 L1838.19 462.094 L719.687 462.094  Z\" fill=\"#ffffff\" fill-rule=\"evenodd\" fill-opacity=\"1\"/>\n<defs>\n  <clipPath id=\"clip783\">\n    <rect x=\"719\" y=\"462\" width=\"1120\" height=\"438\"/>\n  </clipPath>\n</defs>\n<polyline clip-path=\"url(#clip783)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:2; stroke-opacity:0.1; fill:none\" points=\"719.687,899.083 719.687,462.094 \"/>\n<polyline clip-path=\"url(#clip783)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:2; stroke-opacity:0.1; fill:none\" points=\"999.313,899.083 999.313,462.094 \"/>\n<polyline clip-path=\"url(#clip783)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:2; stroke-opacity:0.1; fill:none\" points=\"1278.94,899.083 1278.94,462.094 \"/>\n<polyline clip-path=\"url(#clip783)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:2; stroke-opacity:0.1; fill:none\" points=\"1558.56,899.083 1558.56,462.094 \"/>\n<polyline clip-path=\"url(#clip783)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:2; stroke-opacity:0.1; fill:none\" points=\"1838.19,899.083 1838.19,462.094 \"/>\n<polyline clip-path=\"url(#clip783)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:2; stroke-opacity:0.1; fill:none\" points=\"719.687,879.22 1838.19,879.22 \"/>\n<polyline clip-path=\"url(#clip783)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:2; stroke-opacity:0.1; fill:none\" points=\"719.687,779.904 1838.19,779.904 \"/>\n<polyline clip-path=\"url(#clip783)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:2; stroke-opacity:0.1; fill:none\" points=\"719.687,680.588 1838.19,680.588 \"/>\n<polyline clip-path=\"url(#clip783)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:2; stroke-opacity:0.1; fill:none\" points=\"719.687,581.273 1838.19,581.273 \"/>\n<polyline clip-path=\"url(#clip783)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:2; stroke-opacity:0.1; fill:none\" points=\"719.687,481.957 1838.19,481.957 \"/>\n<polyline clip-path=\"url(#clip780)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"719.687,899.083 1838.19,899.083 \"/>\n<polyline clip-path=\"url(#clip780)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"719.687,899.083 719.687,880.185 \"/>\n<polyline clip-path=\"url(#clip780)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"999.313,899.083 999.313,880.185 \"/>\n<polyline clip-path=\"url(#clip780)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"1278.94,899.083 1278.94,880.185 \"/>\n<polyline clip-path=\"url(#clip780)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"1558.56,899.083 1558.56,880.185 \"/>\n<polyline clip-path=\"url(#clip780)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"1838.19,899.083 1838.19,880.185 \"/>\n<path clip-path=\"url(#clip780)\" d=\"M664.213 957.547 L671.852 957.547 L671.852 931.182 L663.542 932.849 L663.542 928.589 L671.806 926.923 L676.482 926.923 L676.482 957.547 L684.12 957.547 L684.12 961.483 L664.213 961.483 L664.213 957.547 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip780)\" d=\"M703.565 930.001 Q699.954 930.001 698.125 933.566 Q696.319 937.108 696.319 944.237 Q696.319 951.344 698.125 954.909 Q699.954 958.45 703.565 958.45 Q707.199 958.45 709.005 954.909 Q710.833 951.344 710.833 944.237 Q710.833 937.108 709.005 933.566 Q707.199 930.001 703.565 930.001 M703.565 926.298 Q709.375 926.298 712.43 930.904 Q715.509 935.487 715.509 944.237 Q715.509 952.964 712.43 957.571 Q709.375 962.154 703.565 962.154 Q697.755 962.154 694.676 957.571 Q691.62 952.964 691.62 944.237 Q691.62 935.487 694.676 930.904 Q697.755 926.298 703.565 926.298 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip780)\" d=\"M733.727 930.001 Q730.116 930.001 728.287 933.566 Q726.481 937.108 726.481 944.237 Q726.481 951.344 728.287 954.909 Q730.116 958.45 733.727 958.45 Q737.361 958.45 739.166 954.909 Q740.995 951.344 740.995 944.237 Q740.995 937.108 739.166 933.566 Q737.361 930.001 733.727 930.001 M733.727 926.298 Q739.537 926.298 742.592 930.904 Q745.671 935.487 745.671 944.237 Q745.671 952.964 742.592 957.571 Q739.537 962.154 733.727 962.154 Q727.916 962.154 724.838 957.571 Q721.782 952.964 721.782 944.237 Q721.782 935.487 724.838 930.904 Q727.916 926.298 733.727 926.298 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip780)\" d=\"M763.888 930.001 Q760.277 930.001 758.449 933.566 Q756.643 937.108 756.643 944.237 Q756.643 951.344 758.449 954.909 Q760.277 958.45 763.888 958.45 Q767.523 958.45 769.328 954.909 Q771.157 951.344 771.157 944.237 Q771.157 937.108 769.328 933.566 Q767.523 930.001 763.888 930.001 M763.888 926.298 Q769.699 926.298 772.754 930.904 Q775.833 935.487 775.833 944.237 Q775.833 952.964 772.754 957.571 Q769.699 962.154 763.888 962.154 Q758.078 962.154 755 957.571 Q751.944 952.964 751.944 944.237 Q751.944 935.487 755 930.904 Q758.078 926.298 763.888 926.298 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip780)\" d=\"M943.839 957.547 L951.477 957.547 L951.477 931.182 L943.167 932.849 L943.167 928.589 L951.431 926.923 L956.107 926.923 L956.107 957.547 L963.746 957.547 L963.746 961.483 L943.839 961.483 L943.839 957.547 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip780)\" d=\"M973.237 926.923 L991.593 926.923 L991.593 930.858 L977.519 930.858 L977.519 939.33 Q978.538 938.983 979.556 938.821 Q980.575 938.636 981.593 938.636 Q987.38 938.636 990.76 941.807 Q994.139 944.978 994.139 950.395 Q994.139 955.973 990.667 959.075 Q987.195 962.154 980.875 962.154 Q978.7 962.154 976.431 961.784 Q974.186 961.413 971.778 960.672 L971.778 955.973 Q973.862 957.108 976.084 957.663 Q978.306 958.219 980.783 958.219 Q984.788 958.219 987.125 956.112 Q989.463 954.006 989.463 950.395 Q989.463 946.784 987.125 944.677 Q984.788 942.571 980.783 942.571 Q978.908 942.571 977.033 942.987 Q975.181 943.404 973.237 944.284 L973.237 926.923 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip780)\" d=\"M1013.35 930.001 Q1009.74 930.001 1007.91 933.566 Q1006.11 937.108 1006.11 944.237 Q1006.11 951.344 1007.91 954.909 Q1009.74 958.45 1013.35 958.45 Q1016.99 958.45 1018.79 954.909 Q1020.62 951.344 1020.62 944.237 Q1020.62 937.108 1018.79 933.566 Q1016.99 930.001 1013.35 930.001 M1013.35 926.298 Q1019.16 926.298 1022.22 930.904 Q1025.3 935.487 1025.3 944.237 Q1025.3 952.964 1022.22 957.571 Q1019.16 962.154 1013.35 962.154 Q1007.54 962.154 1004.46 957.571 Q1001.41 952.964 1001.41 944.237 Q1001.41 935.487 1004.46 930.904 Q1007.54 926.298 1013.35 926.298 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip780)\" d=\"M1043.51 930.001 Q1039.9 930.001 1038.07 933.566 Q1036.27 937.108 1036.27 944.237 Q1036.27 951.344 1038.07 954.909 Q1039.9 958.45 1043.51 958.45 Q1047.15 958.45 1048.95 954.909 Q1050.78 951.344 1050.78 944.237 Q1050.78 937.108 1048.95 933.566 Q1047.15 930.001 1043.51 930.001 M1043.51 926.298 Q1049.32 926.298 1052.38 930.904 Q1055.46 935.487 1055.46 944.237 Q1055.46 952.964 1052.38 957.571 Q1049.32 962.154 1043.51 962.154 Q1037.7 962.154 1034.63 957.571 Q1031.57 952.964 1031.57 944.237 Q1031.57 935.487 1034.63 930.904 Q1037.7 926.298 1043.51 926.298 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip780)\" d=\"M1227.55 957.547 L1243.87 957.547 L1243.87 961.483 L1221.92 961.483 L1221.92 957.547 Q1224.59 954.793 1229.17 950.163 Q1233.78 945.511 1234.96 944.168 Q1237.2 941.645 1238.08 939.909 Q1238.98 938.149 1238.98 936.46 Q1238.98 933.705 1237.04 931.969 Q1235.12 930.233 1232.02 930.233 Q1229.82 930.233 1227.36 930.997 Q1224.93 931.761 1222.16 933.312 L1222.16 928.589 Q1224.98 927.455 1227.43 926.876 Q1229.89 926.298 1231.92 926.298 Q1237.3 926.298 1240.49 928.983 Q1243.68 931.668 1243.68 936.159 Q1243.68 938.288 1242.87 940.21 Q1242.09 942.108 1239.98 944.7 Q1239.4 945.372 1236.3 948.589 Q1233.2 951.784 1227.55 957.547 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip780)\" d=\"M1263.68 930.001 Q1260.07 930.001 1258.24 933.566 Q1256.44 937.108 1256.44 944.237 Q1256.44 951.344 1258.24 954.909 Q1260.07 958.45 1263.68 958.45 Q1267.32 958.45 1269.12 954.909 Q1270.95 951.344 1270.95 944.237 Q1270.95 937.108 1269.12 933.566 Q1267.32 930.001 1263.68 930.001 M1263.68 926.298 Q1269.49 926.298 1272.55 930.904 Q1275.63 935.487 1275.63 944.237 Q1275.63 952.964 1272.55 957.571 Q1269.49 962.154 1263.68 962.154 Q1257.87 962.154 1254.8 957.571 Q1251.74 952.964 1251.74 944.237 Q1251.74 935.487 1254.8 930.904 Q1257.87 926.298 1263.68 926.298 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip780)\" d=\"M1293.85 930.001 Q1290.23 930.001 1288.41 933.566 Q1286.6 937.108 1286.6 944.237 Q1286.6 951.344 1288.41 954.909 Q1290.23 958.45 1293.85 958.45 Q1297.48 958.45 1299.29 954.909 Q1301.11 951.344 1301.11 944.237 Q1301.11 937.108 1299.29 933.566 Q1297.48 930.001 1293.85 930.001 M1293.85 926.298 Q1299.66 926.298 1302.71 930.904 Q1305.79 935.487 1305.79 944.237 Q1305.79 952.964 1302.71 957.571 Q1299.66 962.154 1293.85 962.154 Q1288.04 962.154 1284.96 957.571 Q1281.9 952.964 1281.9 944.237 Q1281.9 935.487 1284.96 930.904 Q1288.04 926.298 1293.85 926.298 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip780)\" d=\"M1324.01 930.001 Q1320.4 930.001 1318.57 933.566 Q1316.76 937.108 1316.76 944.237 Q1316.76 951.344 1318.57 954.909 Q1320.4 958.45 1324.01 958.45 Q1327.64 958.45 1329.45 954.909 Q1331.28 951.344 1331.28 944.237 Q1331.28 937.108 1329.45 933.566 Q1327.64 930.001 1324.01 930.001 M1324.01 926.298 Q1329.82 926.298 1332.87 930.904 Q1335.95 935.487 1335.95 944.237 Q1335.95 952.964 1332.87 957.571 Q1329.82 962.154 1324.01 962.154 Q1318.2 962.154 1315.12 957.571 Q1312.06 952.964 1312.06 944.237 Q1312.06 935.487 1315.12 930.904 Q1318.2 926.298 1324.01 926.298 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip780)\" d=\"M1507.18 957.547 L1523.49 957.547 L1523.49 961.483 L1501.55 961.483 L1501.55 957.547 Q1504.21 954.793 1508.8 950.163 Q1513.4 945.511 1514.58 944.168 Q1516.83 941.645 1517.71 939.909 Q1518.61 938.149 1518.61 936.46 Q1518.61 933.705 1516.67 931.969 Q1514.74 930.233 1511.64 930.233 Q1509.44 930.233 1506.99 930.997 Q1504.56 931.761 1501.78 933.312 L1501.78 928.589 Q1504.61 927.455 1507.06 926.876 Q1509.51 926.298 1511.55 926.298 Q1516.92 926.298 1520.12 928.983 Q1523.31 931.668 1523.31 936.159 Q1523.31 938.288 1522.5 940.21 Q1521.71 942.108 1519.61 944.7 Q1519.03 945.372 1515.93 948.589 Q1512.82 951.784 1507.18 957.547 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip780)\" d=\"M1533.36 926.923 L1551.71 926.923 L1551.71 930.858 L1537.64 930.858 L1537.64 939.33 Q1538.66 938.983 1539.68 938.821 Q1540.69 938.636 1541.71 938.636 Q1547.5 938.636 1550.88 941.807 Q1554.26 944.978 1554.26 950.395 Q1554.26 955.973 1550.79 959.075 Q1547.31 962.154 1540.99 962.154 Q1538.82 962.154 1536.55 961.784 Q1534.3 961.413 1531.9 960.672 L1531.9 955.973 Q1533.98 957.108 1536.2 957.663 Q1538.43 958.219 1540.9 958.219 Q1544.91 958.219 1547.24 956.112 Q1549.58 954.006 1549.58 950.395 Q1549.58 946.784 1547.24 944.677 Q1544.91 942.571 1540.9 942.571 Q1539.03 942.571 1537.15 942.987 Q1535.3 943.404 1533.36 944.284 L1533.36 926.923 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip780)\" d=\"M1573.47 930.001 Q1569.86 930.001 1568.03 933.566 Q1566.23 937.108 1566.23 944.237 Q1566.23 951.344 1568.03 954.909 Q1569.86 958.45 1573.47 958.45 Q1577.11 958.45 1578.91 954.909 Q1580.74 951.344 1580.74 944.237 Q1580.74 937.108 1578.91 933.566 Q1577.11 930.001 1573.47 930.001 M1573.47 926.298 Q1579.28 926.298 1582.34 930.904 Q1585.42 935.487 1585.42 944.237 Q1585.42 952.964 1582.34 957.571 Q1579.28 962.154 1573.47 962.154 Q1567.66 962.154 1564.58 957.571 Q1561.53 952.964 1561.53 944.237 Q1561.53 935.487 1564.58 930.904 Q1567.66 926.298 1573.47 926.298 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip780)\" d=\"M1603.63 930.001 Q1600.02 930.001 1598.19 933.566 Q1596.39 937.108 1596.39 944.237 Q1596.39 951.344 1598.19 954.909 Q1600.02 958.45 1603.63 958.45 Q1607.27 958.45 1609.07 954.909 Q1610.9 951.344 1610.9 944.237 Q1610.9 937.108 1609.07 933.566 Q1607.27 930.001 1603.63 930.001 M1603.63 926.298 Q1609.44 926.298 1612.5 930.904 Q1615.58 935.487 1615.58 944.237 Q1615.58 952.964 1612.5 957.571 Q1609.44 962.154 1603.63 962.154 Q1597.82 962.154 1594.74 957.571 Q1591.69 952.964 1591.69 944.237 Q1591.69 935.487 1594.74 930.904 Q1597.82 926.298 1603.63 926.298 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip780)\" d=\"M1796.87 942.848 Q1800.23 943.566 1802.1 945.835 Q1804 948.103 1804 951.436 Q1804 956.552 1800.48 959.353 Q1796.96 962.154 1790.48 962.154 Q1788.31 962.154 1785.99 961.714 Q1783.7 961.297 1781.25 960.441 L1781.25 955.927 Q1783.19 957.061 1785.5 957.64 Q1787.82 958.219 1790.34 958.219 Q1794.74 958.219 1797.03 956.483 Q1799.35 954.747 1799.35 951.436 Q1799.35 948.381 1797.19 946.668 Q1795.06 944.932 1791.25 944.932 L1787.22 944.932 L1787.22 941.089 L1791.43 941.089 Q1794.88 941.089 1796.71 939.724 Q1798.54 938.335 1798.54 935.742 Q1798.54 933.08 1796.64 931.668 Q1794.76 930.233 1791.25 930.233 Q1789.32 930.233 1787.13 930.649 Q1784.93 931.066 1782.29 931.946 L1782.29 927.779 Q1784.95 927.038 1787.26 926.668 Q1789.6 926.298 1791.66 926.298 Q1796.99 926.298 1800.09 928.728 Q1803.19 931.136 1803.19 935.256 Q1803.19 938.126 1801.55 940.117 Q1799.9 942.085 1796.87 942.848 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip780)\" d=\"M1822.87 930.001 Q1819.25 930.001 1817.43 933.566 Q1815.62 937.108 1815.62 944.237 Q1815.62 951.344 1817.43 954.909 Q1819.25 958.45 1822.87 958.45 Q1826.5 958.45 1828.31 954.909 Q1830.13 951.344 1830.13 944.237 Q1830.13 937.108 1828.31 933.566 Q1826.5 930.001 1822.87 930.001 M1822.87 926.298 Q1828.68 926.298 1831.73 930.904 Q1834.81 935.487 1834.81 944.237 Q1834.81 952.964 1831.73 957.571 Q1828.68 962.154 1822.87 962.154 Q1817.06 962.154 1813.98 957.571 Q1810.92 952.964 1810.92 944.237 Q1810.92 935.487 1813.98 930.904 Q1817.06 926.298 1822.87 926.298 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip780)\" d=\"M1853.03 930.001 Q1849.42 930.001 1847.59 933.566 Q1845.78 937.108 1845.78 944.237 Q1845.78 951.344 1847.59 954.909 Q1849.42 958.45 1853.03 958.45 Q1856.66 958.45 1858.47 954.909 Q1860.3 951.344 1860.3 944.237 Q1860.3 937.108 1858.47 933.566 Q1856.66 930.001 1853.03 930.001 M1853.03 926.298 Q1858.84 926.298 1861.89 930.904 Q1864.97 935.487 1864.97 944.237 Q1864.97 952.964 1861.89 957.571 Q1858.84 962.154 1853.03 962.154 Q1847.22 962.154 1844.14 957.571 Q1841.08 952.964 1841.08 944.237 Q1841.08 935.487 1844.14 930.904 Q1847.22 926.298 1853.03 926.298 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip780)\" d=\"M1883.19 930.001 Q1879.58 930.001 1877.75 933.566 Q1875.94 937.108 1875.94 944.237 Q1875.94 951.344 1877.75 954.909 Q1879.58 958.45 1883.19 958.45 Q1886.82 958.45 1888.63 954.909 Q1890.46 951.344 1890.46 944.237 Q1890.46 937.108 1888.63 933.566 Q1886.82 930.001 1883.19 930.001 M1883.19 926.298 Q1889 926.298 1892.06 930.904 Q1895.13 935.487 1895.13 944.237 Q1895.13 952.964 1892.06 957.571 Q1889 962.154 1883.19 962.154 Q1877.38 962.154 1874.3 957.571 Q1871.24 952.964 1871.24 944.237 Q1871.24 935.487 1874.3 930.904 Q1877.38 926.298 1883.19 926.298 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><polyline clip-path=\"url(#clip780)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"719.687,899.083 719.687,462.094 \"/>\n<polyline clip-path=\"url(#clip780)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"719.687,879.22 738.585,879.22 \"/>\n<polyline clip-path=\"url(#clip780)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"719.687,779.904 738.585,779.904 \"/>\n<polyline clip-path=\"url(#clip780)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"719.687,680.588 738.585,680.588 \"/>\n<polyline clip-path=\"url(#clip780)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"719.687,581.273 738.585,581.273 \"/>\n<polyline clip-path=\"url(#clip780)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"719.687,481.957 738.585,481.957 \"/>\n<path clip-path=\"url(#clip780)\" d=\"M576.743 879.671 L606.419 879.671 L606.419 883.606 L576.743 883.606 L576.743 879.671 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip780)\" d=\"M616.558 861.94 L634.914 861.94 L634.914 865.875 L620.84 865.875 L620.84 874.347 Q621.859 874 622.877 873.838 Q623.896 873.652 624.914 873.652 Q630.702 873.652 634.081 876.824 Q637.461 879.995 637.461 885.412 Q637.461 890.99 633.989 894.092 Q630.516 897.171 624.197 897.171 Q622.021 897.171 619.752 896.8 Q617.507 896.43 615.1 895.689 L615.1 890.99 Q617.183 892.125 619.405 892.68 Q621.627 893.236 624.104 893.236 Q628.109 893.236 630.447 891.129 Q632.785 889.023 632.785 885.412 Q632.785 881.801 630.447 879.694 Q628.109 877.588 624.104 877.588 Q622.229 877.588 620.354 878.004 Q618.502 878.421 616.558 879.301 L616.558 861.94 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip780)\" d=\"M646.674 890.62 L651.558 890.62 L651.558 896.5 L646.674 896.5 L646.674 890.62 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip780)\" d=\"M671.743 865.018 Q668.132 865.018 666.303 868.583 Q664.498 872.125 664.498 879.254 Q664.498 886.361 666.303 889.925 Q668.132 893.467 671.743 893.467 Q675.377 893.467 677.183 889.925 Q679.011 886.361 679.011 879.254 Q679.011 872.125 677.183 868.583 Q675.377 865.018 671.743 865.018 M671.743 861.315 Q677.553 861.315 680.609 865.921 Q683.687 870.504 683.687 879.254 Q683.687 887.981 680.609 892.588 Q677.553 897.171 671.743 897.171 Q665.933 897.171 662.854 892.588 Q659.799 887.981 659.799 879.254 Q659.799 870.504 662.854 865.921 Q665.933 861.315 671.743 861.315 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip780)\" d=\"M577.739 780.355 L607.415 780.355 L607.415 784.291 L577.739 784.291 L577.739 780.355 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip780)\" d=\"M630.354 766.698 L618.549 785.147 L630.354 785.147 L630.354 766.698 M629.127 762.624 L635.007 762.624 L635.007 785.147 L639.938 785.147 L639.938 789.036 L635.007 789.036 L635.007 797.184 L630.354 797.184 L630.354 789.036 L614.753 789.036 L614.753 784.522 L629.127 762.624 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip780)\" d=\"M647.669 791.304 L652.553 791.304 L652.553 797.184 L647.669 797.184 L647.669 791.304 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip780)\" d=\"M662.785 762.624 L681.141 762.624 L681.141 766.559 L667.067 766.559 L667.067 775.031 Q668.086 774.684 669.104 774.522 Q670.123 774.337 671.141 774.337 Q676.928 774.337 680.308 777.508 Q683.687 780.679 683.687 786.096 Q683.687 791.675 680.215 794.777 Q676.743 797.855 670.424 797.855 Q668.248 797.855 665.979 797.485 Q663.734 797.115 661.326 796.374 L661.326 791.675 Q663.41 792.809 665.632 793.365 Q667.854 793.92 670.331 793.92 Q674.336 793.92 676.673 791.814 Q679.011 789.707 679.011 786.096 Q679.011 782.485 676.673 780.379 Q674.336 778.272 670.331 778.272 Q668.456 778.272 666.581 778.689 Q664.729 779.105 662.785 779.985 L662.785 762.624 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip780)\" d=\"M576.743 681.04 L606.419 681.04 L606.419 684.975 L576.743 684.975 L576.743 681.04 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip780)\" d=\"M629.359 667.382 L617.553 685.831 L629.359 685.831 L629.359 667.382 M628.132 663.308 L634.012 663.308 L634.012 685.831 L638.942 685.831 L638.942 689.72 L634.012 689.72 L634.012 697.868 L629.359 697.868 L629.359 689.72 L613.757 689.72 L613.757 685.206 L628.132 663.308 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip780)\" d=\"M646.674 691.989 L651.558 691.989 L651.558 697.868 L646.674 697.868 L646.674 691.989 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip780)\" d=\"M671.743 666.387 Q668.132 666.387 666.303 669.952 Q664.498 673.494 664.498 680.623 Q664.498 687.73 666.303 691.294 Q668.132 694.836 671.743 694.836 Q675.377 694.836 677.183 691.294 Q679.011 687.73 679.011 680.623 Q679.011 673.494 677.183 669.952 Q675.377 666.387 671.743 666.387 M671.743 662.683 Q677.553 662.683 680.609 667.29 Q683.687 671.873 683.687 680.623 Q683.687 689.35 680.609 693.956 Q677.553 698.54 671.743 698.54 Q665.933 698.54 662.854 693.956 Q659.799 689.35 659.799 680.623 Q659.799 671.873 662.854 667.29 Q665.933 662.683 671.743 662.683 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip780)\" d=\"M577.739 581.724 L607.415 581.724 L607.415 585.659 L577.739 585.659 L577.739 581.724 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip780)\" d=\"M631.674 579.919 Q635.03 580.636 636.905 582.905 Q638.803 585.173 638.803 588.507 Q638.803 593.622 635.285 596.423 Q631.766 599.224 625.285 599.224 Q623.109 599.224 620.794 598.784 Q618.502 598.368 616.049 597.511 L616.049 592.997 Q617.993 594.132 620.308 594.71 Q622.623 595.289 625.146 595.289 Q629.544 595.289 631.836 593.553 Q634.151 591.817 634.151 588.507 Q634.151 585.451 631.998 583.738 Q629.868 582.002 626.049 582.002 L622.021 582.002 L622.021 578.159 L626.234 578.159 Q629.683 578.159 631.512 576.794 Q633.34 575.405 633.34 572.812 Q633.34 570.15 631.442 568.738 Q629.567 567.303 626.049 567.303 Q624.127 567.303 621.928 567.72 Q619.729 568.136 617.09 569.016 L617.09 564.849 Q619.752 564.109 622.067 563.738 Q624.405 563.368 626.465 563.368 Q631.789 563.368 634.891 565.798 Q637.993 568.206 637.993 572.326 Q637.993 575.196 636.35 577.187 Q634.706 579.155 631.674 579.919 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip780)\" d=\"M647.669 592.673 L652.553 592.673 L652.553 598.553 L647.669 598.553 L647.669 592.673 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip780)\" d=\"M662.785 563.993 L681.141 563.993 L681.141 567.928 L667.067 567.928 L667.067 576.4 Q668.086 576.053 669.104 575.891 Q670.123 575.706 671.141 575.706 Q676.928 575.706 680.308 578.877 Q683.687 582.048 683.687 587.465 Q683.687 593.044 680.215 596.145 Q676.743 599.224 670.424 599.224 Q668.248 599.224 665.979 598.854 Q663.734 598.483 661.326 597.743 L661.326 593.044 Q663.41 594.178 665.632 594.733 Q667.854 595.289 670.331 595.289 Q674.336 595.289 676.673 593.183 Q679.011 591.076 679.011 587.465 Q679.011 583.854 676.673 581.747 Q674.336 579.641 670.331 579.641 Q668.456 579.641 666.581 580.058 Q664.729 580.474 662.785 581.354 L662.785 563.993 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip780)\" d=\"M576.743 482.409 L606.419 482.409 L606.419 486.344 L576.743 486.344 L576.743 482.409 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip780)\" d=\"M630.678 480.603 Q634.035 481.321 635.91 483.589 Q637.808 485.858 637.808 489.191 Q637.808 494.307 634.289 497.108 Q630.771 499.909 624.29 499.909 Q622.114 499.909 619.799 499.469 Q617.507 499.052 615.053 498.196 L615.053 493.682 Q616.998 494.816 619.313 495.395 Q621.627 495.973 624.151 495.973 Q628.549 495.973 630.84 494.237 Q633.155 492.501 633.155 489.191 Q633.155 486.136 631.002 484.423 Q628.873 482.686 625.053 482.686 L621.026 482.686 L621.026 478.844 L625.239 478.844 Q628.688 478.844 630.516 477.478 Q632.345 476.089 632.345 473.497 Q632.345 470.835 630.447 469.423 Q628.572 467.987 625.053 467.987 Q623.132 467.987 620.933 468.404 Q618.734 468.821 616.095 469.7 L616.095 465.534 Q618.757 464.793 621.072 464.423 Q623.41 464.052 625.47 464.052 Q630.794 464.052 633.896 466.483 Q636.998 468.89 636.998 473.011 Q636.998 475.881 635.354 477.872 Q633.711 479.839 630.678 480.603 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip780)\" d=\"M646.674 493.358 L651.558 493.358 L651.558 499.237 L646.674 499.237 L646.674 493.358 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip780)\" d=\"M671.743 467.756 Q668.132 467.756 666.303 471.321 Q664.498 474.862 664.498 481.992 Q664.498 489.098 666.303 492.663 Q668.132 496.205 671.743 496.205 Q675.377 496.205 677.183 492.663 Q679.011 489.098 679.011 481.992 Q679.011 474.862 677.183 471.321 Q675.377 467.756 671.743 467.756 M671.743 464.052 Q677.553 464.052 680.609 468.659 Q683.687 473.242 683.687 481.992 Q683.687 490.719 680.609 495.325 Q677.553 499.909 671.743 499.909 Q665.933 499.909 662.854 495.325 Q659.799 490.719 659.799 481.992 Q659.799 473.242 662.854 468.659 Q665.933 464.052 671.743 464.052 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><polyline clip-path=\"url(#clip783)\" style=\"stroke:#009af9; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"160.995,-1577.5 161.555,-2922.08 162.114,-2642.16 162.673,-3823.39 163.232,-4905.48 163.792,-5922.66 164.351,-4381.14 164.91,-4297.21 165.469,-5289.38 166.029,-6198.95 166.588,-6990.46 167.147,-7697.02 167.706,-8336.82 168.266,-7292.79 168.825,-7896.15 169.384,-8440.29 169.943,-8274.01 170.503,-8758.49 171.062,-9204.5 171.621,-9579.82 172.18,-9932.81 172.74,-10232.5 173.299,-10469.5 173.858,-10698.9 174.417,-10868.9 174.977,-11032.3 175.536,-11159.8 176.095,-11266.6 176.655,-11342.4 177.214,-11399.3 177.773,-11128.6 178.332,-10845.4 178.892,-10851 179.451,-10839.7 180.01,-10808.3 180.569,-10768.5 181.129,-10501.9 181.688,-10435 182.247,-10352.4 182.806,-10262.2 183.366,-9816.61 183.925,-9724.32 184.484,-9468.75 185.043,-9363.52 185.603,-9249.27 186.162,-9010.37 186.721,-8635.74 187.28,-8283.64 187.84,-8047.13 188.399,-7820.28 188.958,-7688.3 189.517,-7567.51 190.077,-7353 190.636,-7130.95 191.195,-7003.45 191.754,-6715.01 192.314,-6580.77 192.873,-6444.54 193.432,-6311.42 193.991,-6172.98 194.551,-5964.79 195.11,-5773.7 195.669,-5640.16 196.228,-5448.33 196.788,-5148.03 197.347,-5024.38 197.906,-4804.49 198.465,-4588.82 199.025,-4479.4 199.584,-4370.05 200.143,-4167.94 200.702,-3975.75 201.262,-3749.76 201.821,-3572.39 202.38,-3327.68 202.939,-3209.27 203.499,-3123.98 204.058,-3004.25 204.617,-2888.9 205.176,-2778.29 205.736,-2665.52 206.295,-2527.08 206.854,-2454.05 207.413,-2260.83 207.973,-2132.04 208.532,-2042.5 209.091,-1916.45 209.65,-1833.4 210.21,-1720.36 210.769,-1638.78 211.328,-1585.1 211.887,-1448.35 212.447,-1372.53 213.006,-1271.19 213.565,-1228.48 214.124,-1159.12 214.684,-1061.43 215.243,-998.038 215.802,-907.231 216.361,-724.043 216.921,-667.529 217.48,-640.504 218.039,-583.811 218.598,-504.237 219.158,-405.575 219.717,-377.241 220.276,-372.197 220.835,-275.92 221.395,-204.888 221.954,-183.508 222.513,-141.059 223.072,-96.2285 223.632,-30.1474 224.191,-12.1115 224.75,28.7605 225.309,84.884 225.869,167.998 226.428,222.179 226.987,275.581 227.546,307.149 228.106,382.239 228.665,410.272 229.224,416.051 229.783,487.112 230.343,507.603 230.902,496.078 231.461,500.041 232.02,543.6 232.58,529.516 233.139,578.672 233.698,601.509 234.257,610.897 234.817,650.889 235.376,653.557 235.935,678.16 236.494,717.736 237.054,754.024 237.613,751.253 238.172,773.504 238.731,811.765 239.291,842.367 239.85,891.001 240.409,933.974 240.968,905.802 241.528,939.097 242.087,912.393 242.646,937.623 243.205,966.606 243.765,943.479 244.324,973.189 244.883,950.663 245.442,962.868 246.002,972.525 246.561,1001.81 247.12,1012.19 247.679,1025.13 248.239,1018.93 248.798,997.216 249.357,1024.34 249.916,996.151 250.476,987.491 251.035,1033.33 251.594,1008.68 252.153,983.068 252.713,960.079 253.272,919.705 253.831,952.097 254.39,1002.06 254.95,977.3 255.509,969.223 256.068,963.25 256.627,974.188 257.187,989.888 257.746,982.924 258.305,1017.43 258.864,1043.31 259.424,1052.92 259.983,1082.02 260.542,1077 261.101,1068.33 261.661,1075.66 262.22,1100.85 262.779,1090.59 263.338,1098 263.898,1070.69 264.457,1079.41 265.016,1100.05 265.575,1089.02 266.135,1099.36 266.694,1108.48 267.253,1115.54 267.812,1103.89 268.372,1079.38 268.931,1083.74 269.49,1062.68 270.049,1039.33 270.609,1020.79 271.168,1066.21 271.727,1094.76 272.286,1087.31 272.846,1077.54 273.405,1037.84 273.964,1033.29 274.523,1032.23 275.083,1076.98 275.642,1102.34 276.201,1096.33 276.76,1099.37 277.32,1085.55 277.879,1060.22 278.438,1034.83 278.997,1034.02 279.557,1058.57 280.116,1101.45 280.675,1139.02 281.234,1096.06 281.794,1120.75 282.353,1108.85 282.912,1081.07 283.471,1106.03 284.031,1110.09 284.59,1113.78 285.149,1085.99 285.708,1078.55 286.268,1053.33 286.827,1047.73 287.386,1042.46 287.945,1037.1 288.505,1061.95 289.064,1073.19 289.623,1043.9 290.182,1069.31 290.742,1078.95 291.301,1052.66 291.86,1028.94 292.419,1039.19 292.979,1032.54 293.538,1028.62 294.097,1021.93 294.656,1001.75 295.216,1012.81 295.775,1056.82 296.334,1066.95 296.893,1040.53 297.453,1068.98 298.012,1041.4 298.571,1046.18 299.13,1036.99 299.69,1012.73 300.249,1004.38 300.808,984.764 301.368,983.74 301.927,994.845 302.486,989.901 303.045,986.209 303.605,980.425 304.164,975.983 304.723,975.13 305.282,1003.19 305.842,1011.78 306.401,1022.27 306.96,1029.24 307.519,1041.3 308.079,1068.01 308.638,1058.69 309.197,1067.76 309.756,1076.43 310.316,1081.89 310.875,1053.79 311.434,1030.36 311.993,1038.23 312.553,1011.06 313.112,1069.42 313.671,1029.34 314.23,1003.36 314.79,984.635 315.349,995.342 315.908,1020.26 316.467,1027.1 317.027,1019.93 317.586,1013.38 318.145,957.448 318.704,935.111 319.264,932.029 319.823,943.872 320.382,940.759 320.941,956.564 321.501,952.485 322.06,950.067 322.619,944.15 323.178,956.469 323.738,954.534 324.297,967.777 324.856,949.764 325.415,932.005 325.975,925.904 326.534,905.465 327.093,937.2 327.652,916.882 328.212,897.532 328.771,909.291 329.33,871.719 329.889,853.041 330.449,901.543 331.008,868.452 331.567,883.42 332.126,900.663 332.686,928.999 333.245,957.336 333.804,983.565 334.363,963.016 334.923,958.361 335.482,967.983 336.041,908.921 336.6,906.212 337.16,920.265 337.719,911.585 338.278,927.902 338.837,918.744 339.397,932.61 339.956,914.849 340.515,892.534 341.074,906.092 341.634,923.246 342.193,936.504 342.752,933.353 343.311,944.041 343.871,937.815 344.43,931.51 344.989,944.291 345.548,922.109 346.108,915.031 346.667,927.498 347.226,908.499 347.785,906.408 348.345,934.285 348.904,933.187 349.463,930.967 350.022,942.367 350.582,953.485 351.141,950.122 351.7,957.658 352.259,937.728 352.819,934.393 353.378,915.722 353.937,876.084 354.496,890.132 355.056,917.317 355.615,881.652 356.174,877.991 356.733,878.156 357.293,862.922 357.852,910.642 358.411,941.06 358.97,935.113 359.53,897.766 360.089,894.923 360.648,889.899 361.207,871.012 361.767,883.579 362.326,847.741 362.885,843.563 363.444,810.061 364.004,795.291 364.563,779.976 365.122,779.22 365.681,784.837 366.241,820.597 366.8,805.306 367.359,852.242 367.918,914.553 368.478,926.424 369.037,904.558 369.596,895.094 370.155,955.565 370.715,931.994 371.274,924.067 371.833,949.105 372.392,972.698 372.952,961.29 373.511,953.024 374.07,957.696 374.629,964.14 375.189,953.677 375.748,914.523 376.307,908.233 376.866,900.037 377.426,942.617 377.985,967.205 378.544,1007.52 379.103,1010.42 379.663,966.068 380.222,959.389 380.781,899.814 381.34,910.162 381.9,887.828 382.459,930.421 383.018,922.88 383.577,899.46 384.137,892.81 384.696,888.555 385.255,864.159 385.814,924.705 386.374,933.492 386.933,912.629 387.492,937.218 388.051,931.263 388.611,938.519 389.17,927.086 389.729,855.035 390.288,848.56 390.848,845.467 391.407,842.083 391.966,869.394 392.525,851.739 393.085,878.195 393.644,843.442 394.203,842.743 394.762,820.067 395.322,822.71 395.881,805.178 396.44,786.444 396.999,833.241 397.559,802.911 398.118,783.309 398.677,797.277 399.236,797.91 399.796,779.62 400.355,782.144 400.914,794.873 401.473,795.433 402.033,742.627 402.592,743.735 403.151,748.928 403.71,733.159 404.27,730.456 404.829,718.058 405.388,690.697 405.947,710.229 406.507,729.488 407.066,733.797 407.625,738.806 408.184,695.315 408.744,683.72 409.303,689.837 409.862,693.307 410.421,698.683 410.981,685.839 411.54,706.465 412.099,727.235 412.658,729.87 413.218,716.171 413.777,721.993 414.336,726.782 414.895,744.854 415.455,760.978 416.014,763.073 416.573,760.54 417.132,748.605 417.692,764.09 418.251,778.778 418.81,781.051 419.369,782.749 419.929,815.625 420.488,780.989 421.047,780.432 421.606,795.094 422.166,794.499 422.725,777.839 423.284,790.46 423.843,771.327 424.403,754.865 424.962,738.543 425.521,776.141 426.08,775.809 426.64,775.322 427.199,754.173 427.758,753.602 428.318,753.263 428.877,786.316 429.436,800.453 429.995,796.34 430.555,781.461 431.114,760.873 431.673,779.162 432.232,745.373 432.792,779.801 433.351,762.38 433.91,760.584 434.469,762.158 435.029,746.409 435.588,732.941 436.147,739.159 436.706,739.104 437.266,755.407 437.825,758.553 438.384,774.535 438.943,791.77 439.503,775.196 440.062,772.649 440.621,788.849 441.18,771.286 441.74,772.133 442.299,800.937 442.858,815.214 443.417,813.083 443.977,823.663 444.536,821.037 445.095,833.938 445.654,847.533 446.214,857.464 446.773,852.837 447.332,814.146 447.891,845.94 448.451,826.147 449.01,773.994 449.569,757.156 450.128,761.024 450.688,761.01 451.247,760.946 451.806,791.52 452.365,774.695 452.925,789.048 453.484,751.864 454.043,751.201 454.602,779.147 455.162,792.223 455.721,772.524 456.28,770.997 456.839,788.027 457.399,800.436 457.958,817.85 458.517,831.328 459.076,862.246 459.636,838.896 460.195,865.452 460.754,857.236 461.313,834.073 461.873,811.944 462.432,812.304 462.991,807.153 463.55,775.323 464.11,744.499 464.669,760.323 465.228,760.806 465.787,726.35 466.347,710.686 466.906,711.936 467.465,777.959 468.024,775.938 468.584,791.895 469.143,770.759 469.702,768.084 470.261,748.174 470.821,780.715 471.38,795.119 471.939,795.942 472.498,762.929 473.058,724.982 473.617,710.799 474.176,677.946 474.735,726.776 475.295,746.55 475.854,715.5 476.413,715.994 476.972,729.684 477.532,746.18 478.091,781.182 478.65,761.147 479.209,738.076 479.769,751.381 480.328,752.761 480.887,750.141 481.446,746.782 482.006,776.693 482.565,789.226 483.124,771.748 483.683,819.598 484.243,846.621 484.802,874.873 485.361,851.869 485.92,796.098 486.48,808.449 487.039,823.296 487.598,833.505 488.157,860.689 488.717,855.709 489.276,849.094 489.835,827.176 490.394,805.918 490.954,833.425 491.513,815.185 492.072,798.045 492.631,775.096 493.191,770.502 493.75,735.328 494.309,720.485 494.868,721.198 495.428,739.833 495.987,756.363 496.546,756.181 497.105,784.735 497.665,779.968 498.224,777.98 498.783,761.563 499.342,758.584 499.902,705.638 500.461,690.337 501.02,690.448 501.579,689.594 502.139,656.043 502.698,663.599 503.257,682.681 503.816,686.832 504.376,655.756 504.935,694.205 505.494,678.696 506.053,680.459 506.613,681.7 507.172,669.832 507.731,706.235 508.29,726.353 508.85,726.369 509.409,741.84 509.968,740.652 510.527,722.448 511.087,740.723 511.646,740.766 512.205,736.313 512.764,768.131 513.324,765.74 513.883,732.231 514.442,749.227 515.001,763.713 515.561,729.619 516.12,714.151 516.679,699.346 517.238,733.562 517.798,733.443 518.357,715.703 518.916,734.316 519.475,768.015 520.035,765.28 520.594,782.597 521.153,744.389 521.712,760 522.272,743.785 522.831,740.217 523.39,656.778 523.949,661.409 524.509,665.211 525.068,665.924 525.627,669.18 526.186,688.414 526.746,677.515 527.305,680.528 527.864,665.378 528.423,650.741 528.983,654.913 529.542,677.49 530.101,716.032 530.66,731.421 531.22,780.79 531.779,779.196 532.338,807.472 532.897,804.543 533.457,815.598 534.016,795.357 534.575,773.281 535.134,773.737 535.694,739.236 536.253,728.064 536.812,727.626 537.371,709.456 537.931,727.778 538.49,725.903 539.049,708.145 539.608,689.036 540.168,721.977 540.727,723.511 541.286,690.161 541.845,693.599 542.405,695.244 542.964,709.817 543.523,743.403 544.082,739.834 544.642,754.655 545.201,738.264 545.76,740.267 546.319,739.678 546.879,724.75 547.438,675.105 547.997,693.493 548.556,710.913 549.116,643.567 549.675,644.397 550.234,633.769 550.793,673.504 551.353,673.539 551.912,679.903 552.471,682.222 553.031,687.268 553.59,686.989 554.149,687.541 554.708,688.627 555.268,689.207 555.827,661.552 556.386,666.77 556.945,718.34 557.505,718.08 558.064,719.549 558.623,737.483 559.182,734.547 559.742,750.678 560.301,764.419 560.86,748.041 561.419,764.177 561.979,793.634 562.538,758.299 563.097,785.982 563.656,799.612 564.216,793.677 564.775,821.17 565.334,798.08 565.893,778.638 566.453,775.72 567.012,773.199 567.571,768.522 568.13,752.218 568.69,716.96 569.249,720.032 569.808,721.696 570.367,721.329 570.927,702.633 571.486,698.905 572.045,700.094 572.604,686.185 573.164,719.202 573.723,736.934 574.282,717.641 574.841,685.276 575.401,718.987 575.96,720.693 576.519,731.618 577.078,716.705 577.638,716.268 578.197,699.031 578.756,667.853 579.315,674.165 579.875,677.33 580.434,677.977 580.993,693.763 581.552,694.394 582.112,695.028 582.671,667.834 583.23,654.618 583.789,657.727 584.349,657.97 584.908,643.426 585.467,615.554 586.026,604.429 586.586,643.097 587.145,630.636 587.704,635.391 588.263,623.013 588.823,643.497 589.382,661.909 589.941,679.145 590.5,697.481 591.06,715.311 591.619,714.714 592.178,697.87 592.737,696.141 593.297,680.914 593.856,711.647 594.415,661.461 594.974,661.881 595.534,661.314 596.093,694.611 596.652,745.519 597.211,743.396 597.771,727.305 598.33,708.661 598.889,692.977 599.448,711.3 600.008,663.959 600.567,731.734 601.126,762.449 601.685,760.718 602.245,740.362 602.804,751.092 603.363,764.094 603.922,760.378 604.482,754.083 605.041,753.148 605.6,764.079 606.159,763.364 606.719,776.754 607.278,791.006 607.837,787.335 608.396,749.114 608.956,747.89 609.515,712.559 610.074,712.757 610.633,714.021 611.193,698.413 611.752,666.336 612.311,686.757 612.87,702.166 613.43,688.242 613.989,704.274 614.548,686.422 615.107,704.242 615.667,686.437 616.226,669.085 616.785,683.959 617.344,702.506 617.904,735.785 618.463,735.147 619.022,699.96 619.581,717.019 620.141,719.209 620.7,701.197 621.259,670.145 621.818,686.817 622.378,689.066 622.937,677.326 623.496,677.246 624.055,660.663 624.615,665.772 625.174,668.546 625.733,670.574 626.292,685.259 626.852,682.039 627.411,684.618 627.97,701.156 628.529,702.189 629.089,701.599 629.648,700.948 630.207,717.218 630.766,696.786 631.326,682.061 631.885,702.643 632.444,671.099 633.003,671.802 633.563,656.501 634.122,673.501 634.681,692.002 635.24,694.513 635.8,708.487 636.359,709.912 636.918,691.987 637.477,675.821 638.037,660.656 638.596,647.422 639.155,666.301 639.714,686.21 640.274,673.495 640.833,722.5 641.392,714.678 641.951,662.815 642.511,667.277 643.07,699.266 643.629,700.647 644.188,682.038 644.748,734.206 645.307,717.531 645.866,729.87 646.425,698.32 646.985,697.178 647.544,698.39 648.103,700.875 648.662,734.712 649.222,744.562 649.781,661.869 650.34,665.05 650.899,668.895 651.459,666.722 652.018,668.656 652.577,652.779 653.136,653.684 653.696,638.364 654.255,594.077 654.814,600.873 655.373,609.096 655.933,631.209 656.492,629.584 657.051,649.788 657.61,685.235 658.17,701.909 658.729,702.817 659.288,721.42 659.847,717.061 660.407,702.873 660.966,721.06 661.525,749.765 662.084,709.837 662.644,709.341 663.203,745.621 663.762,762.583 664.321,760.933 664.881,787.498 665.44,764.615 665.999,777.708 666.558,756.314 667.118,736.231 667.677,752.42 668.236,751.207 668.795,768.427 669.355,731.507 669.914,743.837 670.473,710.437 671.032,709.353 671.592,711.519 672.151,710.599 672.71,742.833 673.269,740.007 673.829,752.788 674.388,751.818 674.947,763.964 675.506,761.224 676.066,804.461 676.625,782.48 677.184,760.896 677.743,724.951 678.303,737.727 678.862,735.593 679.421,751.612 679.981,782.025 680.54,775.702 681.099,789.059 681.658,832.701 682.218,891.959 682.777,865.117 683.336,854.641 683.895,842.464 684.455,835.289 685.014,813.183 685.573,771.355 686.132,767.506 686.692,760.886 687.251,757.38 687.81,768.437 688.369,749.935 688.929,727.985 689.488,773.361 690.047,755.15 690.606,800.174 691.166,829.1 691.725,822.425 692.284,785.04 692.843,763.093 693.403,755.74 693.962,769.037 694.521,762.798 695.08,805.786 695.64,801.706 696.199,780.678 696.758,726.845 697.317,708.713 697.877,722.99 698.436,722.151 698.995,701.977 699.554,746.741 700.114,778.131 700.673,757.944 701.232,751.237 701.791,750.135 702.351,714.206 702.91,727.846 703.469,707.36 704.028,646.318 704.588,616.385 705.147,638.61 705.706,657.167 706.265,640.914 706.825,646.795 707.384,651.659 707.943,672.254 708.502,721.662 709.062,721.191 709.621,703.264 710.18,722.376 710.739,718.142 711.299,704.322 711.858,703.855 712.417,704.929 712.976,704.332 713.536,719.072 714.095,753.928 714.654,736.985 715.213,735.874 715.773,719.823 716.332,718.595 716.891,735.894 717.45,751.565 718.01,764.276 718.569,779.26 719.128,776.171 719.687,738.857 720.247,718.5 720.806,701.346 721.365,732.193 721.924,698.883 722.484,699.471 723.043,699.275 723.602,663.527 724.161,679.086 724.721,678.507 725.28,696.35 725.839,679.952 726.398,665.546 726.958,680.363 727.517,631.49 728.076,634.642 728.635,636.145 729.195,604.26 729.754,608.466 730.313,584.728 730.872,586.905 731.432,612.871 731.991,617.095 732.55,591.425 733.109,594.652 733.669,599.566 734.228,554.862 734.787,558.764 735.346,580.632 735.906,587.994 736.465,609.368 737.024,630.889 737.583,663.907 738.143,666.58 738.702,669.964 739.261,656.987 739.82,641.658 740.38,712.219 740.939,759.405 741.498,788.467 742.057,768.628 742.617,782.359 743.176,760.988 743.735,759.096 744.294,741.878 744.854,739.63 745.413,738.368 745.972,721.261 746.531,702.953 747.091,686.432 747.65,654.919 748.209,655.528 748.768,639.695 749.328,643.579 749.887,629.192 750.446,633.474 751.005,619.79 751.565,643.817 752.124,643.431 752.683,626.379 753.242,693.392 753.802,691.984 754.361,708.539 754.92,737.916 755.479,720.028 756.039,763.05 756.598,743.747 757.157,726.283 757.716,707.654 758.276,689.642 758.835,699.238 759.394,713.822 759.953,728.407 760.513,723.452 761.072,719.955 761.631,719.686 762.19,701.34 762.75,683.675 763.309,701.52 763.868,701.489 764.427,663.154 764.987,597.423 765.546,600.794 766.105,589.612 766.664,626.639 767.224,631.905 767.783,650.722 768.342,622.329 768.901,642.152 769.461,629.865 770.02,650.858 770.579,650.126 771.138,637.004 771.698,623.1 772.257,659.014 772.816,675.316 773.375,660.709 773.935,659.525 774.494,660.445 775.053,679.39 775.612,699.038 776.172,726.968 776.731,696.089 777.29,698.054 777.849,731.759 778.409,744.395 778.968,725.772 779.527,723.889 780.086,705.208 780.646,703.789 781.205,705.096 781.764,704.289 782.323,719.051 782.883,683.425 783.442,718.371 784.001,717.903 784.56,698.167 785.12,677.015 785.679,708.948 786.238,677.524 786.797,744.498 787.357,723.847 787.916,726.041 788.475,727.35 789.034,745.577 789.594,739.802 790.153,752.78 790.712,701.09 791.271,713.825 791.831,732.086 792.39,669.409 792.949,721.209 793.508,716.424 794.068,727.886 794.627,729.007 795.186,694.018 795.745,745.037 796.305,741.787 796.864,739.105 797.423,717.234 797.982,730.806 798.542,728.012 799.101,708.292 799.66,676.867 800.219,646.276 800.779,664.912 801.338,649.146 801.897,649.64 802.456,637.636 803.016,656.318 803.575,661.29 804.134,649.042 804.693,685.845 805.253,670.382 805.812,668.503 806.371,652.761 806.931,657.585 807.49,659.218 808.049,645.169 808.608,644.03 809.168,677.364 809.727,675.362 810.286,711.587 810.845,728.429 811.405,707.597 811.964,707.658 812.523,707.863 813.082,672.002 813.642,672.775 814.201,704.109 814.76,690.628 815.319,692.889 815.879,674.05 816.438,673.154 816.997,691.798 817.556,706.862 818.116,707.97 818.675,707.825 819.234,671.518 819.793,654.969 820.353,688.562 820.912,689.751 821.471,688.907 822.03,676.181 822.59,643.325 823.149,663.023 823.708,681.849 824.267,667.294 824.827,683.128 825.386,698.231 825.945,698.59 826.504,729.113 827.064,712.928 827.623,697.127 828.182,693.637 828.741,663.765 829.301,681.74 829.86,683.827 830.419,668.855 830.978,673.872 831.538,670.959 832.097,702.895 832.656,638.817 833.215,658.589 833.775,661.179 834.334,663.501 834.893,700.461 835.452,732.801 836.012,734.481 836.571,718.154 837.13,698.821 837.689,695.119 838.249,709.809 838.808,659.563 839.367,677.099 839.926,662.64 840.486,699.458 841.045,684.288 841.604,698.373 842.163,714.295 842.723,745.656 843.282,776.036 843.841,771.456 844.4,768.62 844.96,781.369 845.519,794.829 846.078,802.171 846.637,811.704 847.197,809.433 847.756,802.824 848.315,748.851 848.874,728.762 849.434,728.954 849.993,745.81 850.552,757.858 851.111,737.095 851.671,751.625 852.23,714.876 852.789,701.113 853.348,714.999 853.908,729.775 854.467,708.518 855.026,722.748 855.585,719.429 856.145,731.925 856.704,729.812 857.263,708.362 857.822,706.073 858.382,687.673 858.941,669.974 859.5,716.847 860.059,699.024 860.619,695.464 861.178,678.651 861.737,660.306 862.296,660.921 862.856,598.998 863.415,587.396 863.974,624.199 864.533,612.407 865.093,615.382 865.652,621.284 866.211,656.977 866.77,673.386 867.33,659.602 867.889,614.035 868.448,630.71 869.007,650.742 869.567,638.933 870.126,642.786 870.685,660.921 871.244,662.959 871.804,662.873 872.363,665.961 872.922,683.157 873.481,682.317 874.041,716.21 874.6,680.996 875.159,663.853 875.718,628.9 876.278,648.198 876.837,619.46 877.396,635.368 877.955,653.669 878.515,603.905 879.074,627.869 879.633,632.826 880.192,666.102 880.752,647.262 881.311,636.977 881.87,686.733 882.429,686.436 882.989,670.229 883.548,702.245 884.107,688.605 884.666,706.717 885.226,752.385 885.785,731.127 886.344,731.048 886.903,729.302 887.463,713.64 888.022,727.414 888.581,727.996 889.14,694.519 889.7,727.385 890.259,693.879 890.818,659.84 891.377,630.796 891.937,634.738 892.496,640.117 893.055,657.61 893.614,662.22 894.174,631.539 894.733,631.331 895.292,651.644 895.851,635.302 896.411,653.056 896.97,689.46 897.529,689.802 898.088,676.682 898.648,698.099 899.207,666.366 899.766,685.127 900.325,684.071 900.885,685.425 901.444,720.571 902.003,704.071 902.562,684.837 903.122,655.881 903.681,692.634 904.24,677.019 904.799,695.149 905.359,706.549 905.918,723.5 906.477,735.523 907.036,732.865 907.596,748.411 908.155,745.514 908.714,725.971 909.273,773.548 909.833,755.283 910.392,753.578 910.951,746.756 911.51,739.137 912.07,718.582 912.629,720.025 913.188,687.995 913.747,737.001 914.307,753.638 914.866,733.937 915.425,698.762 915.984,717.97 916.544,700.059 917.103,684.134 917.662,698.174 918.221,680.7 918.781,647.268 919.34,684.308 919.899,686.574 920.458,683.068 921.018,697.197 921.577,694.724 922.136,694.329 922.695,726.306 923.255,726.609 923.814,709.794 924.373,723.169 924.932,739.781 925.492,740.731 926.051,755.65 926.61,751.678 927.169,733.155 927.729,729.833 928.288,711.434 928.847,694.904 929.406,694.792 929.966,711.638 930.525,708.518 931.084,740.654 931.644,738.167 932.203,732.427 932.762,774.095 933.321,783.952 933.881,777.432 934.44,774.199 934.999,754.833 935.558,750.774 936.118,728.857 936.677,676.174 937.236,655.785 937.795,674.156 938.355,692.81 938.914,676.582 939.473,644.296 940.032,678.004 940.592,694.758 941.151,674.164 941.71,641.246 942.269,633.717 942.829,619.939 943.388,605.607 943.947,654.683 944.506,638.062 945.066,659.416 945.625,658.054 946.184,658.669 946.743,640.407 947.303,641.724 947.862,643.461 948.421,647.879 948.98,633.335 949.54,651.858 950.099,671.458 950.658,686.015 951.217,685.915 951.777,682.467 952.336,715.052 952.895,728.143 953.454,725.222 954.014,737.721 954.573,765.721 955.132,773.79 955.691,786.19 956.251,777.946 956.81,775.268 957.369,788.08 957.928,817.725 958.488,826.243 959.047,784.948 959.606,780.753 960.165,808.443 960.725,819.024 961.284,809.924 961.843,784.908 962.402,778.452 962.962,771.591 963.521,768.649 964.08,733.816 964.639,715.347 965.199,729.313 965.758,711.348 966.317,695.517 966.876,680.159 967.436,747.217 967.995,746.271 968.554,729.182 969.113,708.085 969.673,723.739 970.232,722.919 970.791,721.297 971.35,702.08 971.91,720.877 972.469,687.785 973.028,674.847 973.587,657.962 974.147,641.668 974.706,627.924 975.265,610.649 975.824,583.95 976.384,591.302 976.943,597.327 977.502,603.164 978.061,655.642 978.621,625.783 979.18,629.89 979.739,636.179 980.298,640.607 980.858,607.555 981.417,608.23 981.976,596.604 982.535,615.469 983.095,638.749 983.654,678.182 984.213,711.896 984.772,711.129 985.332,757.119 985.891,721.328 986.45,703.211 987.009,653.375 987.569,653.842 988.128,688.551 988.687,705.257 989.246,751.637 989.806,762.651 990.365,740.669 990.924,673.975 991.483,676.348 992.043,673.495 992.602,671.941 993.161,673.78 993.72,673.853 994.28,663.674 994.839,649.206 995.398,650.269 995.957,602.788 996.517,637.883 997.076,624.44 997.635,580.102 998.194,569.441 998.754,589.774 999.313,595.822 999.872,633.838 1000.43,621.024 1000.99,638.465 1001.55,704.518 1002.11,705.129 1002.67,719.842 1003.23,749.741 1003.79,730.041 1004.35,728.104 1004.91,759.286 1005.46,754.248 1006.02,717.962 1006.58,732.374 1007.14,795.382 1007.7,759.134 1008.26,738.395 1008.82,706.636 1009.38,675.585 1009.94,690.922 1010.5,706.173 1011.06,737.024 1011.62,736.942 1012.18,764.383 1012.73,746.003 1013.29,742.43 1013.85,768.085 1014.41,764.913 1014.97,744.154 1015.53,742.082 1016.09,724.186 1016.65,690.721 1017.21,692.605 1017.77,689.193 1018.33,705.582 1018.89,706.605 1019.45,640.431 1020.01,673.47 1020.56,707.543 1021.12,673.966 1021.68,655.997 1022.24,623.525 1022.8,639.766 1023.36,624.705 1023.92,657.941 1024.48,656.48 1025.04,660.209 1025.6,631.864 1026.16,617.524 1026.72,622.189 1027.28,658.069 1027.83,679.012 1028.39,700.34 1028.95,699.759 1029.51,663.637 1030.07,665.418 1030.63,667.043 1031.19,668.535 1031.75,701.18 1032.31,665.261 1032.87,668.316 1033.43,668.621 1033.99,686.151 1034.55,671.025 1035.1,718.901 1035.66,729.975 1036.22,742.584 1036.78,710.954 1037.34,704.381 1037.9,731.054 1038.46,724.801 1039.02,726.578 1039.58,724.736 1040.14,674.066 1040.7,672.613 1041.26,654.919 1041.82,639.62 1042.38,642.208 1042.93,629.909 1043.49,632.333 1044.05,621.576 1044.61,625.14 1045.17,573.797 1045.73,581.425 1046.29,590.57 1046.85,564.395 1047.41,588.556 1047.97,593.161 1048.53,581.907 1049.09,602.315 1049.65,655.501 1050.2,642.55 1050.76,594.194 1051.32,599.703 1051.88,557.498 1052.44,562.34 1053,518.768 1053.56,499.123 1054.12,510.023 1054.68,533.445 1055.24,559.897 1055.8,580.123 1056.36,603.798 1056.92,609.042 1057.48,612.785 1058.03,647.182 1058.59,664.319 1059.15,667.911 1059.71,678.935 1060.27,627.126 1060.83,629.587 1061.39,634.457 1061.95,622.978 1062.51,627.273 1063.07,629.686 1063.63,615.981 1064.19,636.113 1064.75,639.683 1065.3,644.983 1065.86,664.478 1066.42,683.609 1066.98,635.582 1067.54,655.418 1068.1,625.257 1068.66,628.783 1069.22,645.602 1069.78,697.098 1070.34,698.28 1070.9,696.944 1071.46,697.243 1072.02,714.424 1072.57,714.448 1073.13,713.321 1073.69,652.856 1074.25,655.953 1074.81,674.853 1075.37,675.108 1075.93,673.333 1076.49,656.675 1077.05,659.944 1077.61,708.308 1078.17,735.57 1078.73,697.182 1079.29,729.639 1079.85,741.897 1080.4,711.044 1080.96,723.2 1081.52,706.076 1082.08,706.815 1082.64,704.865 1083.2,700.645 1083.76,696.465 1084.32,680.617 1084.88,680.493 1085.44,658.966 1086,675.564 1086.56,691.067 1087.12,738.312 1087.67,698.299 1088.23,699.921 1088.79,717.834 1089.35,699.918 1089.91,733.611 1090.47,730.443 1091.03,727.306 1091.59,740.548 1092.15,755.335 1092.71,737.156 1093.27,718.95 1093.83,718.458 1094.39,700.935 1094.94,717.752 1095.5,743.798 1096.06,739.039 1096.62,705.842 1097.18,705.944 1097.74,704.198 1098.3,705.151 1098.86,689.939 1099.42,691.501 1099.98,705.864 1100.54,671.368 1101.1,703.831 1101.66,703.262 1102.22,701.677 1102.77,687.378 1103.33,686.654 1103.89,672.096 1104.45,628.675 1105.01,616.294 1105.57,631.05 1106.13,633.163 1106.69,623.099 1107.25,675.117 1107.81,675.683 1108.37,704.728 1108.93,672.043 1109.49,705.094 1110.04,685.997 1110.6,700.755 1111.16,732.746 1111.72,762.069 1112.28,757.023 1112.84,768.252 1113.4,744.144 1113.96,739.447 1114.52,706.695 1115.08,655.949 1115.64,674.003 1116.2,658.431 1116.76,660.746 1117.31,659.662 1117.87,675.515 1118.43,678.167 1118.99,647.104 1119.55,666.247 1120.11,666.617 1120.67,670.203 1121.23,657.599 1121.79,642.569 1122.35,661.909 1122.91,647.789 1123.47,650.407 1124.03,681.563 1124.59,665.251 1125.14,667.705 1125.7,638.666 1126.26,659.091 1126.82,676.86 1127.38,691.687 1127.94,705.343 1128.5,699.603 1129.06,696.943 1129.62,681.856 1130.18,696.257 1130.74,728.269 1131.3,742.148 1131.86,726.09 1132.41,742.071 1132.97,721.511 1133.53,708.1 1134.09,743.037 1134.65,752.739 1135.21,777.223 1135.77,735.041 1136.33,713.097 1136.89,678.525 1137.45,659.614 1138.01,626.449 1138.57,615.617 1139.13,620.476 1139.68,606.806 1140.24,627.893 1140.8,646.574 1141.36,648.015 1141.92,632.075 1142.48,635.29 1143.04,635.226 1143.6,654.369 1144.16,656.252 1144.72,655.846 1145.28,656.852 1145.84,675.769 1146.4,674.929 1146.96,677.701 1147.51,677.96 1148.07,679.487 1148.63,695.704 1149.19,680.948 1149.75,698.268 1150.31,698.25 1150.87,681.837 1151.43,650.349 1151.99,635.971 1152.55,655.074 1153.11,621.408 1153.67,626.875 1154.23,629.158 1154.78,598.508 1155.34,653.938 1155.9,688.714 1156.46,702.042 1157.02,704.689 1157.58,719.617 1158.14,720.123 1158.7,751.709 1159.26,766.368 1159.82,778.491 1160.38,776.055 1160.94,770.831 1161.5,749.936 1162.05,732.179 1162.61,731.163 1163.17,728.694 1163.73,727.363 1164.29,727.556 1164.85,740.893 1165.41,724.534 1165.97,735.28 1166.53,753.15 1167.09,792.02 1167.65,784.621 1168.21,762.858 1168.77,774.372 1169.33,771.417 1169.88,766.742 1170.44,779.368 1171,760.025 1171.56,791.37 1172.12,788.401 1172.68,796.381 1173.24,804.67 1173.8,801.775 1174.36,832.514 1174.92,825.66 1175.48,803.407 1176.04,845.283 1176.6,822.909 1177.15,782.832 1177.71,745.896 1178.27,729.024 1178.83,710.03 1179.39,695.06 1179.95,707.682 1180.51,688.844 1181.07,722.498 1181.63,686.405 1182.19,702.999 1182.75,733.259 1183.31,696.559 1183.87,714.167 1184.43,712.732 1184.98,759.153 1185.54,756.832 1186.1,754.2 1186.66,768.198 1187.22,796.141 1187.78,769.668 1188.34,782.665 1188.9,777.125 1189.46,772.86 1190.02,720.508 1190.58,704.292 1191.14,704.33 1191.7,719.956 1192.25,714.942 1192.81,730.865 1193.37,711.386 1193.93,724.122 1194.49,719.035 1195.05,683.283 1195.61,682.816 1196.17,648.182 1196.73,648.503 1197.29,649.311 1197.85,648.214 1198.41,633.286 1198.97,637.192 1199.52,607.792 1200.08,624.782 1200.64,596.318 1201.2,552.75 1201.76,555.27 1202.32,542.658 1202.88,552.175 1203.44,558.571 1204,547.524 1204.56,534.016 1205.12,557.545 1205.68,580.015 1206.24,585.894 1206.8,590.771 1207.35,598.211 1207.91,634.298 1208.47,638.649 1209.03,658.434 1209.59,646.258 1210.15,648.467 1210.71,599.71 1211.27,621.44 1211.83,674.728 1212.39,658.649 1212.95,676.645 1213.51,681.522 1214.07,666.369 1214.62,686.966 1215.18,654.779 1215.74,636.676 1216.3,636.944 1216.86,656.179 1217.42,690.63 1217.98,641.196 1218.54,628.321 1219.1,647.54 1219.66,649.912 1220.22,683.274 1220.78,683.715 1221.34,682.785 1221.89,664.845 1222.45,664.703 1223.01,679.97 1223.57,694.571 1224.13,682.565 1224.69,700.954 1225.25,699.015 1225.81,712.32 1226.37,695.82 1226.93,709.24 1227.49,723.631 1228.05,734.544 1228.61,749.121 1229.17,744.775 1229.72,788.964 1230.28,769.824 1230.84,751.14 1231.4,761.004 1231.96,773.539 1232.52,769.572 1233.08,749.398 1233.64,779.879 1234.2,787.374 1234.76,764.502 1235.32,762.313 1235.88,709.927 1236.44,710.705 1236.99,647.677 1237.55,655.509 1238.11,638.914 1238.67,675.798 1239.23,660.113 1239.79,677.942 1240.35,697.049 1240.91,650.626 1241.47,652.652 1242.03,652.572 1242.59,653.361 1243.15,720.237 1243.71,715.914 1244.26,732.433 1244.82,715.277 1245.38,698.563 1245.94,698.024 1246.5,714.303 1247.06,679.86 1247.62,679.628 1248.18,679.95 1248.74,631.282 1249.3,637.277 1249.86,636.01 1250.42,618.918 1250.98,623.971 1251.54,626.501 1252.09,646.706 1252.65,643.403 1253.21,626.021 1253.77,628.855 1254.33,632.632 1254.89,646.376 1255.45,634.081 1256.01,667.575 1256.57,667.346 1257.13,669.468 1257.69,686.235 1258.25,703.875 1258.81,686.686 1259.36,702.115 1259.92,638.356 1260.48,656.272 1261.04,653.545 1261.6,669.344 1262.16,639.032 1262.72,659.994 1263.28,678.243 1263.84,677.806 1264.4,694.801 1264.96,716.629 1265.52,727.129 1266.08,724.9 1266.63,693.137 1267.19,657.648 1267.75,660.038 1268.31,643.71 1268.87,631.255 1269.43,589.98 1269.99,612.937 1270.55,619.84 1271.11,606.214 1271.67,596.234 1272.23,565.512 1272.79,588.383 1273.35,579.397 1273.91,556.68 1274.46,532.08 1275.02,538.87 1275.58,578.577 1276.14,651.006 1276.7,664.357 1277.26,696.538 1277.82,697.828 1278.38,697.699 1278.94,681.438 1279.5,699.408 1280.06,682.131 1280.62,716.17 1281.18,699.322 1281.73,684.298 1282.29,701.721 1282.85,717.513 1283.41,701.449 1283.97,668.456 1284.53,653.121 1285.09,638.874 1285.65,676.308 1286.21,678.449 1286.77,677.313 1287.33,692.471 1287.89,692.995 1288.45,693.256 1289,709.825 1289.56,708.708 1290.12,756.823 1290.68,766.786 1291.24,779.337 1291.8,755.641 1292.36,748.683 1292.92,712.838 1293.48,710.431 1294.04,724.837 1294.6,723.806 1295.16,705.69 1295.72,736.699 1296.28,749.175 1296.83,773.792 1297.39,768.826 1297.95,766.46 1298.51,760.422 1299.07,725.554 1299.63,770.86 1300.19,782.172 1300.75,743.619 1301.31,756.536 1301.87,755.185 1302.43,753.061 1302.99,764.224 1303.55,774.99 1304.1,755.286 1304.66,751.449 1305.22,747.692 1305.78,744.351 1306.34,759.889 1306.9,723.844 1307.46,719.682 1308.02,697.905 1308.58,701.456 1309.14,699.201 1309.7,715.211 1310.26,648.238 1310.82,646.289 1311.38,598.183 1311.93,604.519 1312.49,595.759 1313.05,566.874 1313.61,587.432 1314.17,593.859 1314.73,600.916 1315.29,640.365 1315.85,658.944 1316.41,659.665 1316.97,676.558 1317.53,659.26 1318.09,629.352 1318.65,647.113 1319.2,663.283 1319.76,662.73 1320.32,648.077 1320.88,634.325 1321.44,639.903 1322,663.511 1322.56,627.302 1323.12,631.753 1323.68,649.179 1324.24,633.948 1324.8,607.328 1325.36,643.771 1325.92,663.584 1326.47,648.398 1327.03,634.886 1327.59,650.49 1328.15,668.654 1328.71,636.778 1329.27,623.423 1329.83,612.162 1330.39,583.335 1330.95,588.747 1331.51,595.193 1332.07,600.208 1332.63,602.523 1333.19,640.883 1333.75,644.695 1334.3,629.555 1334.86,617.054 1335.42,619.193 1335.98,674.034 1336.54,655.679 1337.1,656.314 1337.66,705.985 1338.22,703.338 1338.78,716.628 1339.34,747.624 1339.9,765.809 1340.46,748.143 1341.02,727.935 1341.57,724.902 1342.13,720.682 1342.69,715.721 1343.25,700.926 1343.81,718.908 1344.37,685.353 1344.93,670.457 1345.49,655.136 1346.05,658.806 1346.61,659.669 1347.17,663.299 1347.73,603.279 1348.29,641.547 1348.84,627.016 1349.4,641.304 1349.96,625.954 1350.52,644.769 1351.08,678.89 1351.64,662.168 1352.2,710.742 1352.76,706.488 1353.32,706 1353.88,686.068 1354.44,686.737 1355,685.947 1355.56,672.82 1356.12,655.48 1356.67,705.021 1357.23,702.029 1357.79,716.284 1358.35,669.102 1358.91,683.03 1359.47,666.244 1360.03,694.251 1360.59,739.107 1361.15,734.829 1361.71,734.31 1362.27,760.843 1362.83,774.868 1363.39,752.286 1363.94,748.163 1364.5,761.394 1365.06,740.819 1365.62,736.48 1366.18,713.722 1366.74,711.943 1367.3,710.6 1367.86,757.27 1368.42,754.33 1368.98,751.085 1369.54,749.613 1370.1,743.922 1370.66,728.629 1371.21,726.754 1371.77,690.638 1372.33,658.886 1372.89,690.918 1373.45,691.769 1374.01,709.095 1374.57,692.152 1375.13,690.947 1375.69,696.051 1376.25,697.163 1376.81,678.586 1377.37,662.915 1377.93,697.195 1378.49,681.822 1379.04,683.713 1379.6,683.516 1380.16,686.089 1380.72,685.391 1381.28,669.42 1381.84,671.362 1382.4,673.781 1382.96,624.154 1383.52,622.984 1384.08,654.092 1384.64,670.708 1385.2,670.29 1385.76,674.504 1386.31,638.318 1386.87,624.792 1387.43,609.754 1387.99,613.701 1388.55,685.152 1389.11,653.347 1389.67,653.945 1390.23,621.01 1390.79,625.285 1391.35,612.589 1391.91,614.983 1392.47,600.42 1393.03,587.248 1393.58,607.692 1394.14,592.925 1394.7,581.082 1395.26,617.536 1395.82,621.852 1396.38,656.513 1396.94,673.181 1397.5,673.625 1398.06,643.544 1398.62,645.369 1399.18,628.817 1399.74,616.817 1400.3,620.911 1400.86,639.071 1401.41,641.145 1401.97,646.702 1402.53,662.929 1403.09,662.242 1403.65,661.298 1404.21,641.553 1404.77,657.9 1405.33,689.832 1405.89,689.024 1406.45,675.257 1407.01,659.418 1407.57,645.266 1408.13,631.407 1408.68,633.778 1409.24,654.462 1409.8,655.248 1410.36,645.166 1410.92,631.549 1411.48,617.385 1412.04,604.739 1412.6,604.647 1413.16,591.015 1413.72,592.012 1414.28,578.875 1414.84,570.685 1415.4,565.669 1415.95,602.83 1416.51,590.259 1417.07,597.53 1417.63,649.676 1418.19,666.022 1418.75,664.796 1419.31,667.547 1419.87,698.124 1420.43,744.197 1420.99,709.583 1421.55,739.69 1422.11,753.515 1422.67,751.059 1423.23,763.703 1423.78,775.776 1424.34,755.548 1424.9,800.163 1425.46,779.849 1426.02,790.069 1426.58,795.834 1427.14,823.78 1427.7,830.445 1428.26,837.84 1428.82,847.649 1429.38,822.001 1429.94,798.279 1430.5,822.79 1431.05,815.79 1431.61,790.984 1432.17,767.921 1432.73,750.333 1433.29,763.533 1433.85,744.097 1434.41,725.829 1434.97,741.638 1435.53,754.318 1436.09,750.253 1436.65,764.553 1437.21,762.558 1437.77,738.661 1438.33,735.086 1438.88,701.13 1439.44,700.391 1440,680.072 1440.56,694.285 1441.12,660.728 1441.68,675.606 1442.24,710.919 1442.8,712.302 1443.36,741.369 1443.92,752.086 1444.48,748.022 1445.04,744.492 1445.6,738.713 1446.15,752.453 1446.71,766.467 1447.27,799.18 1447.83,789.908 1448.39,782.508 1448.95,827.461 1449.51,822.23 1450.07,784.183 1450.63,776.094 1451.19,738.206 1451.75,734.924 1452.31,702.299 1452.87,701.769 1453.42,702.904 1453.98,664.573 1454.54,681.024 1455.1,681.122 1455.66,647.281 1456.22,598.703 1456.78,618.182 1457.34,686.026 1457.9,720.763 1458.46,733.365 1459.02,695.784 1459.58,664.931 1460.14,665.138 1460.7,685.68 1461.25,701.332 1461.81,684.97 1462.37,652.645 1462.93,655.076 1463.49,624.313 1464.05,627.871 1464.61,615.581 1465.17,602.101 1465.73,605.889 1466.29,608.016 1466.85,644.789 1467.41,667.191 1467.97,652.878 1468.52,687.795 1469.08,686.293 1469.64,703.486 1470.2,686.707 1470.76,669.308 1471.32,654.906 1471.88,702.512 1472.44,688.824 1473,668.464 1473.56,651.773 1474.12,652.92 1474.68,621.96 1475.24,627.039 1475.79,596.86 1476.35,601.065 1476.91,624.644 1477.47,625.658 1478.03,609.601 1478.59,644.026 1479.15,645.486 1479.71,663.537 1480.27,668.083 1480.83,652.985 1481.39,591.177 1481.95,609.782 1482.51,599.857 1483.07,603.2 1483.62,624.077 1484.18,638.72 1484.74,628.778 1485.3,647.977 1485.86,619.494 1486.42,637.623 1486.98,638.392 1487.54,639.948 1488.1,658.189 1488.66,643.127 1489.22,661.736 1489.78,663.825 1490.34,679.265 1490.89,664.874 1491.45,665.887 1492.01,648.076 1492.57,680.36 1493.13,681.929 1493.69,702.212 1494.25,697.319 1494.81,729.071 1495.37,693.941 1495.93,676.864 1496.49,645.958 1497.05,691.001 1497.61,705.164 1498.16,702.912 1498.72,716.238 1499.28,713.238 1499.84,744.177 1500.4,789.575 1500.96,832.388 1501.52,810.042 1502.08,804.771 1502.64,849.279 1503.2,825.019 1503.76,799.544 1504.32,797.012 1504.88,805.945 1505.44,801.512 1505.99,808.694 1506.55,802.628 1507.11,827.538 1507.67,823.29 1508.23,799.159 1508.79,790.731 1509.35,754.209 1509.91,716.77 1510.47,699.884 1511.03,684.083 1511.59,685.379 1512.15,665.912 1512.71,651.803 1513.26,670.694 1513.82,702.838 1514.38,704.008 1514.94,685.945 1515.5,670.567 1516.06,669.312 1516.62,669.739 1517.18,686.697 1517.74,683.799 1518.3,683.694 1518.86,683.897 1519.42,686.295 1519.98,653.847 1520.53,638.498 1521.09,640.861 1521.65,639.958 1522.21,609.612 1522.77,581.06 1523.33,605.601 1523.89,612.209 1524.45,615.532 1525.01,620.798 1525.57,623.76 1526.13,611.949 1526.69,617.697 1527.25,639.336 1527.81,626.48 1528.36,630.625 1528.92,645.912 1529.48,643.945 1530.04,645.396 1530.6,667.693 1531.16,684.514 1531.72,735.401 1532.28,766.059 1532.84,763.175 1533.4,774.908 1533.96,784.849 1534.52,748.703 1535.08,761.37 1535.63,805.315 1536.19,766.304 1536.75,766.181 1537.31,750.981 1537.87,794.797 1538.43,772.815 1538.99,769.529 1539.55,734.035 1540.11,726.488 1540.67,724.661 1541.23,686.044 1541.79,685.004 1542.35,666.44 1542.9,682.823 1543.46,668.208 1544.02,648.991 1544.58,633.492 1545.14,639.4 1545.7,608.613 1546.26,595.612 1546.82,620.807 1547.38,656.382 1547.94,690.948 1548.5,670.129 1549.06,667.849 1549.62,665.873 1550.18,666.878 1550.73,648.047 1551.29,634.565 1551.85,652.594 1552.41,654.564 1552.97,624.205 1553.53,642.331 1554.09,643.031 1554.65,660.58 1555.21,660.876 1555.77,662.063 1556.33,697.774 1556.89,728.38 1557.45,693.672 1558,727.525 1558.56,742.89 1559.12,756.556 1559.68,768.718 1560.24,733.551 1560.8,733.03 1561.36,729.395 1561.92,744.41 1562.48,689.112 1563.04,689.827 1563.6,689.958 1564.16,702.667 1564.72,665.853 1565.28,666.366 1565.83,669.28 1566.39,652.341 1566.95,670.472 1567.51,653.936 1568.07,656.967 1568.63,657.842 1569.19,657.916 1569.75,661.902 1570.31,679.221 1570.87,680.555 1571.43,651.001 1571.99,669.99 1572.55,653.558 1573.1,671.232 1573.66,653.315 1574.22,653.789 1574.78,639.728 1575.34,640.279 1575.9,626.957 1576.46,632.021 1577.02,634.905 1577.58,670.162 1578.14,656.067 1578.7,659.8 1579.26,677.229 1579.82,676.729 1580.37,663.901 1580.93,632.532 1581.49,622.671 1582.05,640.064 1582.61,626.452 1583.17,617.092 1583.73,622.091 1584.29,626.912 1584.85,632.908 1585.41,633.948 1585.97,638.723 1586.53,670.638 1587.09,669.737 1587.65,638.091 1588.2,592.479 1588.76,598.01 1589.32,575.93 1589.88,598.161 1590.44,621.158 1591,594.601 1591.56,598.729 1592.12,602.635 1592.68,627.426 1593.24,616.53 1593.8,619.758 1594.36,621.608 1594.92,627.583 1595.47,633.12 1596.03,635.237 1596.59,641.142 1597.15,646.327 1597.71,650 1598.27,656.1 1598.83,639.997 1599.39,692.584 1599.95,689.861 1600.51,738.562 1601.07,752.414 1601.63,748.426 1602.19,747.514 1602.74,747.444 1603.3,760.782 1603.86,737.743 1604.42,733.219 1604.98,731.87 1605.54,715.618 1606.1,747.051 1606.66,758.842 1607.22,722.527 1607.78,719.3 1608.34,717.077 1608.9,717.747 1609.46,748.059 1610.02,777.902 1610.57,774.003 1611.13,751.864 1611.69,687.899 1612.25,677.944 1612.81,678.016 1613.37,776.653 1613.93,788.417 1614.49,749.961 1615.05,763.024 1615.61,741.187 1616.17,755.969 1616.73,752.122 1617.29,746.735 1617.84,743.406 1618.4,774.495 1618.96,786.036 1619.52,767.038 1620.08,714.11 1620.64,708.442 1621.2,721.322 1621.76,718.872 1622.32,702.682 1622.88,716.066 1623.44,703.4 1624,688.726 1624.56,708.804 1625.11,719.138 1625.67,716.772 1626.23,726.326 1626.79,740.814 1627.35,733.74 1627.91,730.49 1628.47,710.498 1629.03,740.154 1629.59,704.379 1630.15,651.796 1630.71,654.021 1631.27,623.804 1631.83,644.403 1632.39,644.556 1632.94,643.929 1633.5,616.352 1634.06,604.614 1634.62,573.249 1635.18,594.83 1635.74,596.947 1636.3,600.957 1636.86,638.875 1637.42,627.228 1637.98,583.538 1638.54,554.001 1639.1,593.621 1639.66,598.134 1640.21,618.801 1640.77,639.542 1641.33,641.006 1641.89,641.07 1642.45,658.471 1643.01,645.155 1643.57,646.686 1644.13,646.591 1644.69,637.44 1645.25,656.737 1645.81,689.117 1646.37,702.237 1646.93,702.507 1647.48,685.815 1648.04,684.416 1648.6,697.638 1649.16,682.49 1649.72,682.349 1650.28,680.083 1650.84,659.902 1651.4,644.781 1651.96,678.778 1652.52,711.311 1653.08,658.336 1653.64,657.607 1654.2,675.093 1654.76,724.269 1655.31,722.01 1655.87,749.455 1656.43,733.34 1656.99,745.017 1657.55,723.771 1658.11,702.326 1658.67,700.279 1659.23,697.411 1659.79,699.217 1660.35,716.45 1660.91,713.969 1661.47,728.814 1662.03,728.177 1662.58,723.983 1663.14,707.793 1663.7,719.277 1664.26,719.92 1664.82,714.455 1665.38,714.951 1665.94,696.564 1666.5,680.257 1667.06,713.146 1667.62,696.655 1668.18,662.498 1668.74,648.107 1669.3,665.281 1669.85,685.956 1670.41,670.772 1670.97,668.097 1671.53,686.074 1672.09,651.118 1672.65,650.75 1673.21,669.365 1673.77,637.122 1674.33,638.851 1674.89,676.153 1675.45,658.227 1676.01,657.56 1676.57,677.109 1677.13,663.547 1677.68,632.038 1678.24,632.105 1678.8,587.174 1679.36,589.678 1679.92,596.662 1680.48,601.797 1681.04,604.98 1681.6,623.974 1682.16,641.834 1682.72,644.368 1683.28,631.89 1683.84,650.183 1684.4,639.776 1684.95,658.549 1685.51,658.403 1686.07,697.426 1686.63,679.669 1687.19,693.407 1687.75,678.826 1688.31,714.107 1688.87,710.443 1689.43,694.21 1689.99,696.302 1690.55,678.287 1691.11,683.64 1691.67,635.385 1692.23,606.483 1692.78,625.063 1693.34,625.071 1693.9,646.675 1694.46,666.676 1695.02,652.88 1695.58,658.786 1696.14,659.329 1696.7,680.333 1697.26,683.464 1697.82,650.966 1698.38,702.208 1698.94,732.115 1699.5,730.832 1700.05,728.627 1700.61,757.861 1701.17,723.527 1701.73,706.041 1702.29,722.21 1702.85,688.719 1703.41,659.608 1703.97,648.328 1704.53,668.934 1705.09,650.867 1705.65,671.081 1706.21,650.509 1706.77,632.962 1707.32,603.549 1707.88,592.479 1708.44,614.862 1709,618.503 1709.56,608.429 1710.12,593.172 1710.68,602.061 1711.24,573.523 1711.8,594.729 1712.36,602.976 1712.92,573.311 1713.48,579.893 1714.04,651.501 1714.6,670.186 1715.15,658.81 1715.71,642.633 1716.27,594.174 1716.83,585.066 1717.39,546.742 1717.95,554.402 1718.51,560.901 1719.07,568.186 1719.63,576.597 1720.19,584.732 1720.75,591.338 1721.31,613.981 1721.87,638.328 1722.42,686.779 1722.98,704.426 1723.54,701.361 1724.1,679.601 1724.66,694.853 1725.22,698.878 1725.78,698.668 1726.34,699.899 1726.9,731.914 1727.46,730.184 1728.02,757.169 1728.58,749.337 1729.14,731.743 1729.69,764.418 1730.25,760.592 1730.81,768.94 1731.37,791.759 1731.93,767.005 1732.49,792.28 1733.05,783.733 1733.61,777.266 1734.17,770.687 1734.73,778.527 1735.29,790.496 1735.85,789.164 1736.41,782.09 1736.97,761.205 1737.52,742.251 1738.08,771.444 1738.64,781.442 1739.2,723.47 1739.76,738.075 1740.32,718.092 1740.88,701.842 1741.44,733.488 1742,694.95 1742.56,695.421 1743.12,709.783 1743.68,724.419 1744.24,723.247 1744.79,690.097 1745.35,689.983 1745.91,686.798 1746.47,686.366 1747.03,669.283 1747.59,668.368 1748.15,700.724 1748.71,761.293 1749.27,757.087 1749.83,780.279 1750.39,774.591 1750.95,753.041 1751.51,767.839 1752.06,763.925 1752.62,744.895 1753.18,723.713 1753.74,738.185 1754.3,720.237 1754.86,685.4 1755.42,682.573 1755.98,684.083 1756.54,684.481 1757.1,717.006 1757.66,716.434 1758.22,714.407 1758.78,746.302 1759.34,738.737 1759.89,781.16 1760.45,792.969 1761.01,786.724 1761.57,749.923 1762.13,745.937 1762.69,740.564 1763.25,739.243 1763.81,736.858 1764.37,735.95 1764.93,712.204 1765.49,742.084 1766.05,737.911 1766.61,749.029 1767.16,713.182 1767.72,694.378 1768.28,709.337 1768.84,690.112 1769.4,689.001 1769.96,702.311 1770.52,699.716 1771.08,649.828 1771.64,670.203 1772.2,718.635 1772.76,736.333 1773.32,732.457 1773.88,730.899 1774.43,712.072 1774.99,707.387 1775.55,690.153 1776.11,657.576 1776.67,673.306 1777.23,704.462 1777.79,704.936 1778.35,702.561 1778.91,704.678 1779.47,685.572 1780.03,665.772 1780.59,667.672 1781.15,652.605 1781.71,621.114 1782.26,625.048 1782.82,624.629 1783.38,660.803 1783.94,644.839 1784.5,632.592 1785.06,635.96 1785.62,654.168 1786.18,654.555 1786.74,637.455 1787.3,673.438 1787.86,676.541 1788.42,679.282 1788.98,696.684 1789.53,697.568 1790.09,712.253 1790.65,759.447 1791.21,754.098 1791.77,747.145 1792.33,779.325 1792.89,789.379 1793.45,799.508 1794.01,778.68 1794.57,761.314 1795.13,763.058 1795.69,745.117 1796.25,741.486 1796.8,788.35 1797.36,817.73 1797.92,807.322 1798.48,783.243 1799.04,747.407 1799.6,728.609 1800.16,693.178 1800.72,675.774 1801.28,659.602 1801.84,628.349 1802.4,645.456 1802.96,661.757 1803.52,676.656 1804.08,711.392 1804.63,727.431 1805.19,709.426 1805.75,726.958 1806.31,677.437 1806.87,678.392 1807.43,647.919 1807.99,588.351 1808.55,561.711 1809.11,568.402 1809.67,561.07 1810.23,585.129 1810.79,554.162 1811.35,572.386 1811.9,597.52 1812.46,603.237 1813.02,606.582 1813.58,642.133 1814.14,643.971 1814.7,646.021 1815.26,630.687 1815.82,648.157 1816.38,679.286 1816.94,711.164 1817.5,674.521 1818.06,646.146 1818.62,662.185 1819.18,665.678 1819.73,661.971 1820.29,682.537 1820.85,713.565 1821.41,680.07 1821.97,646.79 1822.53,680.064 1823.09,680.701 1823.65,696.114 1824.21,695.913 1824.77,692.854 1825.33,641.047 1825.89,643.837 1826.45,646.202 1827,635.048 1827.56,621.478 1828.12,642.519 1828.68,597.615 1829.24,636.293 1829.8,608.722 1830.36,612.165 1830.92,616.972 1831.48,620.373 1832.04,657.279 1832.6,708.275 1833.16,674.401 1833.72,658.792 1834.27,695.88 1834.83,693.872 1835.39,691.041 1835.95,709.956 1836.51,710.251 1837.07,722.977 1837.63,751.273 1838.19,762.773 \"/>\n<path clip-path=\"url(#clip783)\" d=\"M720.247 690.108 L720.806 690.108 L721.365 690.108 L721.924 690.108 L722.484 690.108 L723.043 690.108 L723.602 690.108 L724.161 690.108 L724.721 690.108 L725.28 690.108 L725.839 690.108 L726.398 690.108 L726.958 690.108 L727.517 690.108 L728.076 690.108 L728.635 690.108 L729.195 690.108 L729.754 690.108 L730.313 690.108 L730.872 690.108 L731.432 690.108 L731.991 690.108 L732.55 690.108 L733.109 690.108 L733.669 690.108 L734.228 690.108 L734.787 690.108 L735.346 690.108 L735.906 690.108 L736.465 690.108 L737.024 690.108 L737.583 690.108 L738.143 690.108 L738.702 690.108 L739.261 690.108 L739.82 690.108 L740.38 690.108 L740.939 690.108 L741.498 690.108 L742.057 690.108 L742.617 690.108 L743.176 690.108 L743.735 690.108 L744.294 690.108 L744.854 690.108 L745.413 690.108 L745.972 690.108 L746.531 690.108 L747.091 690.108 L747.65 690.108 L748.209 690.108 L748.768 690.108 L749.328 690.108 L749.887 690.108 L750.446 690.108 L751.005 690.108 L751.565 690.108 L752.124 690.108 L752.683 690.108 L753.242 690.108 L753.802 690.108 L754.361 690.108 L754.92 690.108 L755.479 690.108 L756.039 690.108 L756.598 690.108 L757.157 690.108 L757.716 690.108 L758.276 690.108 L758.835 690.108 L759.394 690.108 L759.953 690.108 L760.513 690.108 L761.072 690.108 L761.631 690.108 L762.19 690.108 L762.75 690.108 L763.309 690.108 L763.868 690.108 L764.427 690.108 L764.987 690.108 L765.546 690.108 L766.105 690.108 L766.664 690.108 L767.224 690.108 L767.783 690.108 L768.342 690.108 L768.901 690.108 L769.461 690.108 L770.02 690.108 L770.579 690.108 L771.138 690.108 L771.698 690.108 L772.257 690.108 L772.816 690.108 L773.375 690.108 L773.935 690.108 L774.494 690.108 L775.053 690.108 L775.612 690.108 L776.172 690.108 L776.731 690.108 L777.29 690.108 L777.849 690.108 L778.409 690.108 L778.968 690.108 L779.527 690.108 L780.086 690.108 L780.646 690.108 L781.205 690.108 L781.764 690.108 L782.323 690.108 L782.883 690.108 L783.442 690.108 L784.001 690.108 L784.56 690.108 L785.12 690.108 L785.679 690.108 L786.238 690.108 L786.797 690.108 L787.357 690.108 L787.916 690.108 L788.475 690.108 L789.034 690.108 L789.594 690.108 L790.153 690.108 L790.712 690.108 L791.271 690.108 L791.831 690.108 L792.39 690.108 L792.949 690.108 L793.508 690.108 L794.068 690.108 L794.627 690.108 L795.186 690.108 L795.745 690.108 L796.305 690.108 L796.864 690.108 L797.423 690.108 L797.982 690.108 L798.542 690.108 L799.101 690.108 L799.66 690.108 L800.219 690.108 L800.779 690.108 L801.338 690.108 L801.897 690.108 L802.456 690.108 L803.016 690.108 L803.575 690.108 L804.134 690.108 L804.693 690.108 L805.253 690.108 L805.812 690.108 L806.371 690.108 L806.931 690.108 L807.49 690.108 L808.049 690.108 L808.608 690.108 L809.168 690.108 L809.727 690.108 L810.286 690.108 L810.845 690.108 L811.405 690.108 L811.964 690.108 L812.523 690.108 L813.082 690.108 L813.642 690.108 L814.201 690.108 L814.76 690.108 L815.319 690.108 L815.879 690.108 L816.438 690.108 L816.997 690.108 L817.556 690.108 L818.116 690.108 L818.675 690.108 L819.234 690.108 L819.793 690.108 L820.353 690.108 L820.912 690.108 L821.471 690.108 L822.03 690.108 L822.59 690.108 L823.149 690.108 L823.708 690.108 L824.267 690.108 L824.827 690.108 L825.386 690.108 L825.945 690.108 L826.504 690.108 L827.064 690.108 L827.623 690.108 L828.182 690.108 L828.741 690.108 L829.301 690.108 L829.86 690.108 L830.419 690.108 L830.978 690.108 L831.538 690.108 L832.097 690.108 L832.656 690.108 L833.215 690.108 L833.775 690.108 L834.334 690.108 L834.893 690.108 L835.452 690.108 L836.012 690.108 L836.571 690.108 L837.13 690.108 L837.689 690.108 L838.249 690.108 L838.808 690.108 L839.367 690.108 L839.926 690.108 L840.486 690.108 L841.045 690.108 L841.604 690.108 L842.163 690.108 L842.723 690.108 L843.282 690.108 L843.841 690.108 L844.4 690.108 L844.96 690.108 L845.519 690.108 L846.078 690.108 L846.637 690.108 L847.197 690.108 L847.756 690.108 L848.315 690.108 L848.874 690.108 L849.434 690.108 L849.993 690.108 L850.552 690.108 L851.111 690.108 L851.671 690.108 L852.23 690.108 L852.789 690.108 L853.348 690.108 L853.908 690.108 L854.467 690.108 L855.026 690.108 L855.585 690.108 L856.145 690.108 L856.704 690.108 L857.263 690.108 L857.822 690.108 L858.382 690.108 L858.941 690.108 L859.5 690.108 L860.059 690.108 L860.619 690.108 L861.178 690.108 L861.737 690.108 L862.296 690.108 L862.856 690.108 L863.415 690.108 L863.974 690.108 L864.533 690.108 L865.093 690.108 L865.652 690.108 L866.211 690.108 L866.77 690.108 L867.33 690.108 L867.889 690.108 L868.448 690.108 L869.007 690.108 L869.567 690.108 L870.126 690.108 L870.685 690.108 L871.244 690.108 L871.804 690.108 L872.363 690.108 L872.922 690.108 L873.481 690.108 L874.041 690.108 L874.6 690.108 L875.159 690.108 L875.718 690.108 L876.278 690.108 L876.837 690.108 L877.396 690.108 L877.955 690.108 L878.515 690.108 L879.074 690.108 L879.633 690.108 L880.192 690.108 L880.752 690.108 L881.311 690.108 L881.87 690.108 L882.429 690.108 L882.989 690.108 L883.548 690.108 L884.107 690.108 L884.666 690.108 L885.226 690.108 L885.785 690.108 L886.344 690.108 L886.903 690.108 L887.463 690.108 L888.022 690.108 L888.581 690.108 L889.14 690.108 L889.7 690.108 L890.259 690.108 L890.818 690.108 L891.377 690.108 L891.937 690.108 L892.496 690.108 L893.055 690.108 L893.614 690.108 L894.174 690.108 L894.733 690.108 L895.292 690.108 L895.851 690.108 L896.411 690.108 L896.97 690.108 L897.529 690.108 L898.088 690.108 L898.648 690.108 L899.207 690.108 L899.766 690.108 L900.325 690.108 L900.885 690.108 L901.444 690.108 L902.003 690.108 L902.562 690.108 L903.122 690.108 L903.681 690.108 L904.24 690.108 L904.799 690.108 L905.359 690.108 L905.918 690.108 L906.477 690.108 L907.036 690.108 L907.596 690.108 L908.155 690.108 L908.714 690.108 L909.273 690.108 L909.833 690.108 L910.392 690.108 L910.951 690.108 L911.51 690.108 L912.07 690.108 L912.629 690.108 L913.188 690.108 L913.747 690.108 L914.307 690.108 L914.866 690.108 L915.425 690.108 L915.984 690.108 L916.544 690.108 L917.103 690.108 L917.662 690.108 L918.221 690.108 L918.781 690.108 L919.34 690.108 L919.899 690.108 L920.458 690.108 L921.018 690.108 L921.577 690.108 L922.136 690.108 L922.695 690.108 L923.255 690.108 L923.814 690.108 L924.373 690.108 L924.932 690.108 L925.492 690.108 L926.051 690.108 L926.61 690.108 L927.169 690.108 L927.729 690.108 L928.288 690.108 L928.847 690.108 L929.406 690.108 L929.966 690.108 L930.525 690.108 L931.084 690.108 L931.644 690.108 L932.203 690.108 L932.762 690.108 L933.321 690.108 L933.881 690.108 L934.44 690.108 L934.999 690.108 L935.558 690.108 L936.118 690.108 L936.677 690.108 L937.236 690.108 L937.795 690.108 L938.355 690.108 L938.914 690.108 L939.473 690.108 L940.032 690.108 L940.592 690.108 L941.151 690.108 L941.71 690.108 L942.269 690.108 L942.829 690.108 L943.388 690.108 L943.947 690.108 L944.506 690.108 L945.066 690.108 L945.625 690.108 L946.184 690.108 L946.743 690.108 L947.303 690.108 L947.862 690.108 L948.421 690.108 L948.98 690.108 L949.54 690.108 L950.099 690.108 L950.658 690.108 L951.217 690.108 L951.777 690.108 L952.336 690.108 L952.895 690.108 L953.454 690.108 L954.014 690.108 L954.573 690.108 L955.132 690.108 L955.691 690.108 L956.251 690.108 L956.81 690.108 L957.369 690.108 L957.928 690.108 L958.488 690.108 L959.047 690.108 L959.606 690.108 L960.165 690.108 L960.725 690.108 L961.284 690.108 L961.843 690.108 L962.402 690.108 L962.962 690.108 L963.521 690.108 L964.08 690.108 L964.639 690.108 L965.199 690.108 L965.758 690.108 L966.317 690.108 L966.876 690.108 L967.436 690.108 L967.995 690.108 L968.554 690.108 L969.113 690.108 L969.673 690.108 L970.232 690.108 L970.791 690.108 L971.35 690.108 L971.91 690.108 L972.469 690.108 L973.028 690.108 L973.587 690.108 L974.147 690.108 L974.706 690.108 L975.265 690.108 L975.824 690.108 L976.384 690.108 L976.943 690.108 L977.502 690.108 L978.061 690.108 L978.621 690.108 L979.18 690.108 L979.739 690.108 L980.298 690.108 L980.858 690.108 L981.417 690.108 L981.976 690.108 L982.535 690.108 L983.095 690.108 L983.654 690.108 L984.213 690.108 L984.772 690.108 L985.332 690.108 L985.891 690.108 L986.45 690.108 L987.009 690.108 L987.569 690.108 L988.128 690.108 L988.687 690.108 L989.246 690.108 L989.806 690.108 L990.365 690.108 L990.924 690.108 L991.483 690.108 L992.043 690.108 L992.602 690.108 L993.161 690.108 L993.72 690.108 L994.28 690.108 L994.839 690.108 L995.398 690.108 L995.957 690.108 L996.517 690.108 L997.076 690.108 L997.635 690.108 L998.194 690.108 L998.754 690.108 L999.313 690.108 L999.872 690.108 L1000.43 690.108 L1000.99 690.108 L1001.55 690.108 L1002.11 690.108 L1002.67 690.108 L1003.23 690.108 L1003.79 690.108 L1004.35 690.108 L1004.91 690.108 L1005.46 690.108 L1006.02 690.108 L1006.58 690.108 L1007.14 690.108 L1007.7 690.108 L1008.26 690.108 L1008.82 690.108 L1009.38 690.108 L1009.94 690.108 L1010.5 690.108 L1011.06 690.108 L1011.62 690.108 L1012.18 690.108 L1012.73 690.108 L1013.29 690.108 L1013.85 690.108 L1014.41 690.108 L1014.97 690.108 L1015.53 690.108 L1016.09 690.108 L1016.65 690.108 L1017.21 690.108 L1017.77 690.108 L1018.33 690.108 L1018.89 690.108 L1019.45 690.108 L1020.01 690.108 L1020.56 690.108 L1021.12 690.108 L1021.68 690.108 L1022.24 690.108 L1022.8 690.108 L1023.36 690.108 L1023.92 690.108 L1024.48 690.108 L1025.04 690.108 L1025.6 690.108 L1026.16 690.108 L1026.72 690.108 L1027.28 690.108 L1027.83 690.108 L1028.39 690.108 L1028.95 690.108 L1029.51 690.108 L1030.07 690.108 L1030.63 690.108 L1031.19 690.108 L1031.75 690.108 L1032.31 690.108 L1032.87 690.108 L1033.43 690.108 L1033.99 690.108 L1034.55 690.108 L1035.1 690.108 L1035.66 690.108 L1036.22 690.108 L1036.78 690.108 L1037.34 690.108 L1037.9 690.108 L1038.46 690.108 L1039.02 690.108 L1039.58 690.108 L1040.14 690.108 L1040.7 690.108 L1041.26 690.108 L1041.82 690.108 L1042.38 690.108 L1042.93 690.108 L1043.49 690.108 L1044.05 690.108 L1044.61 690.108 L1045.17 690.108 L1045.73 690.108 L1046.29 690.108 L1046.85 690.108 L1047.41 690.108 L1047.97 690.108 L1048.53 690.108 L1049.09 690.108 L1049.65 690.108 L1050.2 690.108 L1050.76 690.108 L1051.32 690.108 L1051.88 690.108 L1052.44 690.108 L1053 690.108 L1053.56 690.108 L1054.12 690.108 L1054.68 690.108 L1055.24 690.108 L1055.8 690.108 L1056.36 690.108 L1056.92 690.108 L1057.48 690.108 L1058.03 690.108 L1058.59 690.108 L1059.15 690.108 L1059.71 690.108 L1060.27 690.108 L1060.83 690.108 L1061.39 690.108 L1061.95 690.108 L1062.51 690.108 L1063.07 690.108 L1063.63 690.108 L1064.19 690.108 L1064.75 690.108 L1065.3 690.108 L1065.86 690.108 L1066.42 690.108 L1066.98 690.108 L1067.54 690.108 L1068.1 690.108 L1068.66 690.108 L1069.22 690.108 L1069.78 690.108 L1070.34 690.108 L1070.9 690.108 L1071.46 690.108 L1072.02 690.108 L1072.57 690.108 L1073.13 690.108 L1073.69 690.108 L1074.25 690.108 L1074.81 690.108 L1075.37 690.108 L1075.93 690.108 L1076.49 690.108 L1077.05 690.108 L1077.61 690.108 L1078.17 690.108 L1078.73 690.108 L1079.29 690.108 L1079.85 690.108 L1080.4 690.108 L1080.96 690.108 L1081.52 690.108 L1082.08 690.108 L1082.64 690.108 L1083.2 690.108 L1083.76 690.108 L1084.32 690.108 L1084.88 690.108 L1085.44 690.108 L1086 690.108 L1086.56 690.108 L1087.12 690.108 L1087.67 690.108 L1088.23 690.108 L1088.79 690.108 L1089.35 690.108 L1089.91 690.108 L1090.47 690.108 L1091.03 690.108 L1091.59 690.108 L1092.15 690.108 L1092.71 690.108 L1093.27 690.108 L1093.83 690.108 L1094.39 690.108 L1094.94 690.108 L1095.5 690.108 L1096.06 690.108 L1096.62 690.108 L1097.18 690.108 L1097.74 690.108 L1098.3 690.108 L1098.86 690.108 L1099.42 690.108 L1099.98 690.108 L1100.54 690.108 L1101.1 690.108 L1101.66 690.108 L1102.22 690.108 L1102.77 690.108 L1103.33 690.108 L1103.89 690.108 L1104.45 690.108 L1105.01 690.108 L1105.57 690.108 L1106.13 690.108 L1106.69 690.108 L1107.25 690.108 L1107.81 690.108 L1108.37 690.108 L1108.93 690.108 L1109.49 690.108 L1110.04 690.108 L1110.6 690.108 L1111.16 690.108 L1111.72 690.108 L1112.28 690.108 L1112.84 690.108 L1113.4 690.108 L1113.96 690.108 L1114.52 690.108 L1115.08 690.108 L1115.64 690.108 L1116.2 690.108 L1116.76 690.108 L1117.31 690.108 L1117.87 690.108 L1118.43 690.108 L1118.99 690.108 L1119.55 690.108 L1120.11 690.108 L1120.67 690.108 L1121.23 690.108 L1121.79 690.108 L1122.35 690.108 L1122.91 690.108 L1123.47 690.108 L1124.03 690.108 L1124.59 690.108 L1125.14 690.108 L1125.7 690.108 L1126.26 690.108 L1126.82 690.108 L1127.38 690.108 L1127.94 690.108 L1128.5 690.108 L1129.06 690.108 L1129.62 690.108 L1130.18 690.108 L1130.74 690.108 L1131.3 690.108 L1131.86 690.108 L1132.41 690.108 L1132.97 690.108 L1133.53 690.108 L1134.09 690.108 L1134.65 690.108 L1135.21 690.108 L1135.77 690.108 L1136.33 690.108 L1136.89 690.108 L1137.45 690.108 L1138.01 690.108 L1138.57 690.108 L1139.13 690.108 L1139.68 690.108 L1140.24 690.108 L1140.8 690.108 L1141.36 690.108 L1141.92 690.108 L1142.48 690.108 L1143.04 690.108 L1143.6 690.108 L1144.16 690.108 L1144.72 690.108 L1145.28 690.108 L1145.84 690.108 L1146.4 690.108 L1146.96 690.108 L1147.51 690.108 L1148.07 690.108 L1148.63 690.108 L1149.19 690.108 L1149.75 690.108 L1150.31 690.108 L1150.87 690.108 L1151.43 690.108 L1151.99 690.108 L1152.55 690.108 L1153.11 690.108 L1153.67 690.108 L1154.23 690.108 L1154.78 690.108 L1155.34 690.108 L1155.9 690.108 L1156.46 690.108 L1157.02 690.108 L1157.58 690.108 L1158.14 690.108 L1158.7 690.108 L1159.26 690.108 L1159.82 690.108 L1160.38 690.108 L1160.94 690.108 L1161.5 690.108 L1162.05 690.108 L1162.61 690.108 L1163.17 690.108 L1163.73 690.108 L1164.29 690.108 L1164.85 690.108 L1165.41 690.108 L1165.97 690.108 L1166.53 690.108 L1167.09 690.108 L1167.65 690.108 L1168.21 690.108 L1168.77 690.108 L1169.33 690.108 L1169.88 690.108 L1170.44 690.108 L1171 690.108 L1171.56 690.108 L1172.12 690.108 L1172.68 690.108 L1173.24 690.108 L1173.8 690.108 L1174.36 690.108 L1174.92 690.108 L1175.48 690.108 L1176.04 690.108 L1176.6 690.108 L1177.15 690.108 L1177.71 690.108 L1178.27 690.108 L1178.83 690.108 L1179.39 690.108 L1179.95 690.108 L1180.51 690.108 L1181.07 690.108 L1181.63 690.108 L1182.19 690.108 L1182.75 690.108 L1183.31 690.108 L1183.87 690.108 L1184.43 690.108 L1184.98 690.108 L1185.54 690.108 L1186.1 690.108 L1186.66 690.108 L1187.22 690.108 L1187.78 690.108 L1188.34 690.108 L1188.9 690.108 L1189.46 690.108 L1190.02 690.108 L1190.58 690.108 L1191.14 690.108 L1191.7 690.108 L1192.25 690.108 L1192.81 690.108 L1193.37 690.108 L1193.93 690.108 L1194.49 690.108 L1195.05 690.108 L1195.61 690.108 L1196.17 690.108 L1196.73 690.108 L1197.29 690.108 L1197.85 690.108 L1198.41 690.108 L1198.97 690.108 L1199.52 690.108 L1200.08 690.108 L1200.64 690.108 L1201.2 690.108 L1201.76 690.108 L1202.32 690.108 L1202.88 690.108 L1203.44 690.108 L1204 690.108 L1204.56 690.108 L1205.12 690.108 L1205.68 690.108 L1206.24 690.108 L1206.8 690.108 L1207.35 690.108 L1207.91 690.108 L1208.47 690.108 L1209.03 690.108 L1209.59 690.108 L1210.15 690.108 L1210.71 690.108 L1211.27 690.108 L1211.83 690.108 L1212.39 690.108 L1212.95 690.108 L1213.51 690.108 L1214.07 690.108 L1214.62 690.108 L1215.18 690.108 L1215.74 690.108 L1216.3 690.108 L1216.86 690.108 L1217.42 690.108 L1217.98 690.108 L1218.54 690.108 L1219.1 690.108 L1219.66 690.108 L1220.22 690.108 L1220.78 690.108 L1221.34 690.108 L1221.89 690.108 L1222.45 690.108 L1223.01 690.108 L1223.57 690.108 L1224.13 690.108 L1224.69 690.108 L1225.25 690.108 L1225.81 690.108 L1226.37 690.108 L1226.93 690.108 L1227.49 690.108 L1228.05 690.108 L1228.61 690.108 L1229.17 690.108 L1229.72 690.108 L1230.28 690.108 L1230.84 690.108 L1231.4 690.108 L1231.96 690.108 L1232.52 690.108 L1233.08 690.108 L1233.64 690.108 L1234.2 690.108 L1234.76 690.108 L1235.32 690.108 L1235.88 690.108 L1236.44 690.108 L1236.99 690.108 L1237.55 690.108 L1238.11 690.108 L1238.67 690.108 L1239.23 690.108 L1239.79 690.108 L1240.35 690.108 L1240.91 690.108 L1241.47 690.108 L1242.03 690.108 L1242.59 690.108 L1243.15 690.108 L1243.71 690.108 L1244.26 690.108 L1244.82 690.108 L1245.38 690.108 L1245.94 690.108 L1246.5 690.108 L1247.06 690.108 L1247.62 690.108 L1248.18 690.108 L1248.74 690.108 L1249.3 690.108 L1249.86 690.108 L1250.42 690.108 L1250.98 690.108 L1251.54 690.108 L1252.09 690.108 L1252.65 690.108 L1253.21 690.108 L1253.77 690.108 L1254.33 690.108 L1254.89 690.108 L1255.45 690.108 L1256.01 690.108 L1256.57 690.108 L1257.13 690.108 L1257.69 690.108 L1258.25 690.108 L1258.81 690.108 L1259.36 690.108 L1259.92 690.108 L1260.48 690.108 L1261.04 690.108 L1261.6 690.108 L1262.16 690.108 L1262.72 690.108 L1263.28 690.108 L1263.84 690.108 L1264.4 690.108 L1264.96 690.108 L1265.52 690.108 L1266.08 690.108 L1266.63 690.108 L1267.19 690.108 L1267.75 690.108 L1268.31 690.108 L1268.87 690.108 L1269.43 690.108 L1269.99 690.108 L1270.55 690.108 L1271.11 690.108 L1271.67 690.108 L1272.23 690.108 L1272.79 690.108 L1273.35 690.108 L1273.91 690.108 L1274.46 690.108 L1275.02 690.108 L1275.58 690.108 L1276.14 690.108 L1276.7 690.108 L1277.26 690.108 L1277.82 690.108 L1278.38 690.108 L1278.94 690.108 L1279.5 690.108 L1280.06 690.108 L1280.62 690.108 L1281.18 690.108 L1281.73 690.108 L1282.29 690.108 L1282.85 690.108 L1283.41 690.108 L1283.97 690.108 L1284.53 690.108 L1285.09 690.108 L1285.65 690.108 L1286.21 690.108 L1286.77 690.108 L1287.33 690.108 L1287.89 690.108 L1288.45 690.108 L1289 690.108 L1289.56 690.108 L1290.12 690.108 L1290.68 690.108 L1291.24 690.108 L1291.8 690.108 L1292.36 690.108 L1292.92 690.108 L1293.48 690.108 L1294.04 690.108 L1294.6 690.108 L1295.16 690.108 L1295.72 690.108 L1296.28 690.108 L1296.83 690.108 L1297.39 690.108 L1297.95 690.108 L1298.51 690.108 L1299.07 690.108 L1299.63 690.108 L1300.19 690.108 L1300.75 690.108 L1301.31 690.108 L1301.87 690.108 L1302.43 690.108 L1302.99 690.108 L1303.55 690.108 L1304.1 690.108 L1304.66 690.108 L1305.22 690.108 L1305.78 690.108 L1306.34 690.108 L1306.9 690.108 L1307.46 690.108 L1308.02 690.108 L1308.58 690.108 L1309.14 690.108 L1309.7 690.108 L1310.26 690.108 L1310.82 690.108 L1311.38 690.108 L1311.93 690.108 L1312.49 690.108 L1313.05 690.108 L1313.61 690.108 L1314.17 690.108 L1314.73 690.108 L1315.29 690.108 L1315.85 690.108 L1316.41 690.108 L1316.97 690.108 L1317.53 690.108 L1318.09 690.108 L1318.65 690.108 L1319.2 690.108 L1319.76 690.108 L1320.32 690.108 L1320.88 690.108 L1321.44 690.108 L1322 690.108 L1322.56 690.108 L1323.12 690.108 L1323.68 690.108 L1324.24 690.108 L1324.8 690.108 L1325.36 690.108 L1325.92 690.108 L1326.47 690.108 L1327.03 690.108 L1327.59 690.108 L1328.15 690.108 L1328.71 690.108 L1329.27 690.108 L1329.83 690.108 L1330.39 690.108 L1330.95 690.108 L1331.51 690.108 L1332.07 690.108 L1332.63 690.108 L1333.19 690.108 L1333.75 690.108 L1334.3 690.108 L1334.86 690.108 L1335.42 690.108 L1335.98 690.108 L1336.54 690.108 L1337.1 690.108 L1337.66 690.108 L1338.22 690.108 L1338.78 690.108 L1339.34 690.108 L1339.9 690.108 L1340.46 690.108 L1341.02 690.108 L1341.57 690.108 L1342.13 690.108 L1342.69 690.108 L1343.25 690.108 L1343.81 690.108 L1344.37 690.108 L1344.93 690.108 L1345.49 690.108 L1346.05 690.108 L1346.61 690.108 L1347.17 690.108 L1347.73 690.108 L1348.29 690.108 L1348.84 690.108 L1349.4 690.108 L1349.96 690.108 L1350.52 690.108 L1351.08 690.108 L1351.64 690.108 L1352.2 690.108 L1352.76 690.108 L1353.32 690.108 L1353.88 690.108 L1354.44 690.108 L1355 690.108 L1355.56 690.108 L1356.12 690.108 L1356.67 690.108 L1357.23 690.108 L1357.79 690.108 L1358.35 690.108 L1358.91 690.108 L1359.47 690.108 L1360.03 690.108 L1360.59 690.108 L1361.15 690.108 L1361.71 690.108 L1362.27 690.108 L1362.83 690.108 L1363.39 690.108 L1363.94 690.108 L1364.5 690.108 L1365.06 690.108 L1365.62 690.108 L1366.18 690.108 L1366.74 690.108 L1367.3 690.108 L1367.86 690.108 L1368.42 690.108 L1368.98 690.108 L1369.54 690.108 L1370.1 690.108 L1370.66 690.108 L1371.21 690.108 L1371.77 690.108 L1372.33 690.108 L1372.89 690.108 L1373.45 690.108 L1374.01 690.108 L1374.57 690.108 L1375.13 690.108 L1375.69 690.108 L1376.25 690.108 L1376.81 690.108 L1377.37 690.108 L1377.93 690.108 L1378.49 690.108 L1379.04 690.108 L1379.6 690.108 L1380.16 690.108 L1380.72 690.108 L1381.28 690.108 L1381.84 690.108 L1382.4 690.108 L1382.96 690.108 L1383.52 690.108 L1384.08 690.108 L1384.64 690.108 L1385.2 690.108 L1385.76 690.108 L1386.31 690.108 L1386.87 690.108 L1387.43 690.108 L1387.99 690.108 L1388.55 690.108 L1389.11 690.108 L1389.67 690.108 L1390.23 690.108 L1390.79 690.108 L1391.35 690.108 L1391.91 690.108 L1392.47 690.108 L1393.03 690.108 L1393.58 690.108 L1394.14 690.108 L1394.7 690.108 L1395.26 690.108 L1395.82 690.108 L1396.38 690.108 L1396.94 690.108 L1397.5 690.108 L1398.06 690.108 L1398.62 690.108 L1399.18 690.108 L1399.74 690.108 L1400.3 690.108 L1400.86 690.108 L1401.41 690.108 L1401.97 690.108 L1402.53 690.108 L1403.09 690.108 L1403.65 690.108 L1404.21 690.108 L1404.77 690.108 L1405.33 690.108 L1405.89 690.108 L1406.45 690.108 L1407.01 690.108 L1407.57 690.108 L1408.13 690.108 L1408.68 690.108 L1409.24 690.108 L1409.8 690.108 L1410.36 690.108 L1410.92 690.108 L1411.48 690.108 L1412.04 690.108 L1412.6 690.108 L1413.16 690.108 L1413.72 690.108 L1414.28 690.108 L1414.84 690.108 L1415.4 690.108 L1415.95 690.108 L1416.51 690.108 L1417.07 690.108 L1417.63 690.108 L1418.19 690.108 L1418.75 690.108 L1419.31 690.108 L1419.87 690.108 L1420.43 690.108 L1420.99 690.108 L1421.55 690.108 L1422.11 690.108 L1422.67 690.108 L1423.23 690.108 L1423.78 690.108 L1424.34 690.108 L1424.9 690.108 L1425.46 690.108 L1426.02 690.108 L1426.58 690.108 L1427.14 690.108 L1427.7 690.108 L1428.26 690.108 L1428.82 690.108 L1429.38 690.108 L1429.94 690.108 L1430.5 690.108 L1431.05 690.108 L1431.61 690.108 L1432.17 690.108 L1432.73 690.108 L1433.29 690.108 L1433.85 690.108 L1434.41 690.108 L1434.97 690.108 L1435.53 690.108 L1436.09 690.108 L1436.65 690.108 L1437.21 690.108 L1437.77 690.108 L1438.33 690.108 L1438.88 690.108 L1439.44 690.108 L1440 690.108 L1440.56 690.108 L1441.12 690.108 L1441.68 690.108 L1442.24 690.108 L1442.8 690.108 L1443.36 690.108 L1443.92 690.108 L1444.48 690.108 L1445.04 690.108 L1445.6 690.108 L1446.15 690.108 L1446.71 690.108 L1447.27 690.108 L1447.83 690.108 L1448.39 690.108 L1448.95 690.108 L1449.51 690.108 L1450.07 690.108 L1450.63 690.108 L1451.19 690.108 L1451.75 690.108 L1452.31 690.108 L1452.87 690.108 L1453.42 690.108 L1453.98 690.108 L1454.54 690.108 L1455.1 690.108 L1455.66 690.108 L1456.22 690.108 L1456.78 690.108 L1457.34 690.108 L1457.9 690.108 L1458.46 690.108 L1459.02 690.108 L1459.58 690.108 L1460.14 690.108 L1460.7 690.108 L1461.25 690.108 L1461.81 690.108 L1462.37 690.108 L1462.93 690.108 L1463.49 690.108 L1464.05 690.108 L1464.61 690.108 L1465.17 690.108 L1465.73 690.108 L1466.29 690.108 L1466.85 690.108 L1467.41 690.108 L1467.97 690.108 L1468.52 690.108 L1469.08 690.108 L1469.64 690.108 L1470.2 690.108 L1470.76 690.108 L1471.32 690.108 L1471.88 690.108 L1472.44 690.108 L1473 690.108 L1473.56 690.108 L1474.12 690.108 L1474.68 690.108 L1475.24 690.108 L1475.79 690.108 L1476.35 690.108 L1476.91 690.108 L1477.47 690.108 L1478.03 690.108 L1478.59 690.108 L1479.15 690.108 L1479.71 690.108 L1480.27 690.108 L1480.83 690.108 L1481.39 690.108 L1481.95 690.108 L1482.51 690.108 L1483.07 690.108 L1483.62 690.108 L1484.18 690.108 L1484.74 690.108 L1485.3 690.108 L1485.86 690.108 L1486.42 690.108 L1486.98 690.108 L1487.54 690.108 L1488.1 690.108 L1488.66 690.108 L1489.22 690.108 L1489.78 690.108 L1490.34 690.108 L1490.89 690.108 L1491.45 690.108 L1492.01 690.108 L1492.57 690.108 L1493.13 690.108 L1493.69 690.108 L1494.25 690.108 L1494.81 690.108 L1495.37 690.108 L1495.93 690.108 L1496.49 690.108 L1497.05 690.108 L1497.61 690.108 L1498.16 690.108 L1498.72 690.108 L1499.28 690.108 L1499.84 690.108 L1500.4 690.108 L1500.96 690.108 L1501.52 690.108 L1502.08 690.108 L1502.64 690.108 L1503.2 690.108 L1503.76 690.108 L1504.32 690.108 L1504.88 690.108 L1505.44 690.108 L1505.99 690.108 L1506.55 690.108 L1507.11 690.108 L1507.67 690.108 L1508.23 690.108 L1508.79 690.108 L1509.35 690.108 L1509.91 690.108 L1510.47 690.108 L1511.03 690.108 L1511.59 690.108 L1512.15 690.108 L1512.71 690.108 L1513.26 690.108 L1513.82 690.108 L1514.38 690.108 L1514.94 690.108 L1515.5 690.108 L1516.06 690.108 L1516.62 690.108 L1517.18 690.108 L1517.74 690.108 L1518.3 690.108 L1518.86 690.108 L1519.42 690.108 L1519.98 690.108 L1520.53 690.108 L1521.09 690.108 L1521.65 690.108 L1522.21 690.108 L1522.77 690.108 L1523.33 690.108 L1523.89 690.108 L1524.45 690.108 L1525.01 690.108 L1525.57 690.108 L1526.13 690.108 L1526.69 690.108 L1527.25 690.108 L1527.81 690.108 L1528.36 690.108 L1528.92 690.108 L1529.48 690.108 L1530.04 690.108 L1530.6 690.108 L1531.16 690.108 L1531.72 690.108 L1532.28 690.108 L1532.84 690.108 L1533.4 690.108 L1533.96 690.108 L1534.52 690.108 L1535.08 690.108 L1535.63 690.108 L1536.19 690.108 L1536.75 690.108 L1537.31 690.108 L1537.87 690.108 L1538.43 690.108 L1538.99 690.108 L1539.55 690.108 L1540.11 690.108 L1540.67 690.108 L1541.23 690.108 L1541.79 690.108 L1542.35 690.108 L1542.9 690.108 L1543.46 690.108 L1544.02 690.108 L1544.58 690.108 L1545.14 690.108 L1545.7 690.108 L1546.26 690.108 L1546.82 690.108 L1547.38 690.108 L1547.94 690.108 L1548.5 690.108 L1549.06 690.108 L1549.62 690.108 L1550.18 690.108 L1550.73 690.108 L1551.29 690.108 L1551.85 690.108 L1552.41 690.108 L1552.97 690.108 L1553.53 690.108 L1554.09 690.108 L1554.65 690.108 L1555.21 690.108 L1555.77 690.108 L1556.33 690.108 L1556.89 690.108 L1557.45 690.108 L1558 690.108 L1558.56 690.108 L1559.12 690.108 L1559.68 690.108 L1560.24 690.108 L1560.8 690.108 L1561.36 690.108 L1561.92 690.108 L1562.48 690.108 L1563.04 690.108 L1563.6 690.108 L1564.16 690.108 L1564.72 690.108 L1565.28 690.108 L1565.83 690.108 L1566.39 690.108 L1566.95 690.108 L1567.51 690.108 L1568.07 690.108 L1568.63 690.108 L1569.19 690.108 L1569.75 690.108 L1570.31 690.108 L1570.87 690.108 L1571.43 690.108 L1571.99 690.108 L1572.55 690.108 L1573.1 690.108 L1573.66 690.108 L1574.22 690.108 L1574.78 690.108 L1575.34 690.108 L1575.9 690.108 L1576.46 690.108 L1577.02 690.108 L1577.58 690.108 L1578.14 690.108 L1578.7 690.108 L1579.26 690.108 L1579.82 690.108 L1580.37 690.108 L1580.93 690.108 L1581.49 690.108 L1582.05 690.108 L1582.61 690.108 L1583.17 690.108 L1583.73 690.108 L1584.29 690.108 L1584.85 690.108 L1585.41 690.108 L1585.97 690.108 L1586.53 690.108 L1587.09 690.108 L1587.65 690.108 L1588.2 690.108 L1588.76 690.108 L1589.32 690.108 L1589.88 690.108 L1590.44 690.108 L1591 690.108 L1591.56 690.108 L1592.12 690.108 L1592.68 690.108 L1593.24 690.108 L1593.8 690.108 L1594.36 690.108 L1594.92 690.108 L1595.47 690.108 L1596.03 690.108 L1596.59 690.108 L1597.15 690.108 L1597.71 690.108 L1598.27 690.108 L1598.83 690.108 L1599.39 690.108 L1599.95 690.108 L1600.51 690.108 L1601.07 690.108 L1601.63 690.108 L1602.19 690.108 L1602.74 690.108 L1603.3 690.108 L1603.86 690.108 L1604.42 690.108 L1604.98 690.108 L1605.54 690.108 L1606.1 690.108 L1606.66 690.108 L1607.22 690.108 L1607.78 690.108 L1608.34 690.108 L1608.9 690.108 L1609.46 690.108 L1610.02 690.108 L1610.57 690.108 L1611.13 690.108 L1611.69 690.108 L1612.25 690.108 L1612.81 690.108 L1613.37 690.108 L1613.93 690.108 L1614.49 690.108 L1615.05 690.108 L1615.61 690.108 L1616.17 690.108 L1616.73 690.108 L1617.29 690.108 L1617.84 690.108 L1618.4 690.108 L1618.96 690.108 L1619.52 690.108 L1620.08 690.108 L1620.64 690.108 L1621.2 690.108 L1621.76 690.108 L1622.32 690.108 L1622.88 690.108 L1623.44 690.108 L1624 690.108 L1624.56 690.108 L1625.11 690.108 L1625.67 690.108 L1626.23 690.108 L1626.79 690.108 L1627.35 690.108 L1627.91 690.108 L1628.47 690.108 L1629.03 690.108 L1629.59 690.108 L1630.15 690.108 L1630.71 690.108 L1631.27 690.108 L1631.83 690.108 L1632.39 690.108 L1632.94 690.108 L1633.5 690.108 L1634.06 690.108 L1634.62 690.108 L1635.18 690.108 L1635.74 690.108 L1636.3 690.108 L1636.86 690.108 L1637.42 690.108 L1637.98 690.108 L1638.54 690.108 L1639.1 690.108 L1639.66 690.108 L1640.21 690.108 L1640.77 690.108 L1641.33 690.108 L1641.89 690.108 L1642.45 690.108 L1643.01 690.108 L1643.57 690.108 L1644.13 690.108 L1644.69 690.108 L1645.25 690.108 L1645.81 690.108 L1646.37 690.108 L1646.93 690.108 L1647.48 690.108 L1648.04 690.108 L1648.6 690.108 L1649.16 690.108 L1649.72 690.108 L1650.28 690.108 L1650.84 690.108 L1651.4 690.108 L1651.96 690.108 L1652.52 690.108 L1653.08 690.108 L1653.64 690.108 L1654.2 690.108 L1654.76 690.108 L1655.31 690.108 L1655.87 690.108 L1656.43 690.108 L1656.99 690.108 L1657.55 690.108 L1658.11 690.108 L1658.67 690.108 L1659.23 690.108 L1659.79 690.108 L1660.35 690.108 L1660.91 690.108 L1661.47 690.108 L1662.03 690.108 L1662.58 690.108 L1663.14 690.108 L1663.7 690.108 L1664.26 690.108 L1664.82 690.108 L1665.38 690.108 L1665.94 690.108 L1666.5 690.108 L1667.06 690.108 L1667.62 690.108 L1668.18 690.108 L1668.74 690.108 L1669.3 690.108 L1669.85 690.108 L1670.41 690.108 L1670.97 690.108 L1671.53 690.108 L1672.09 690.108 L1672.65 690.108 L1673.21 690.108 L1673.77 690.108 L1674.33 690.108 L1674.89 690.108 L1675.45 690.108 L1676.01 690.108 L1676.57 690.108 L1677.13 690.108 L1677.68 690.108 L1678.24 690.108 L1678.8 690.108 L1679.36 690.108 L1679.92 690.108 L1680.48 690.108 L1681.04 690.108 L1681.6 690.108 L1682.16 690.108 L1682.72 690.108 L1683.28 690.108 L1683.84 690.108 L1684.4 690.108 L1684.95 690.108 L1685.51 690.108 L1686.07 690.108 L1686.63 690.108 L1687.19 690.108 L1687.75 690.108 L1688.31 690.108 L1688.87 690.108 L1689.43 690.108 L1689.99 690.108 L1690.55 690.108 L1691.11 690.108 L1691.67 690.108 L1692.23 690.108 L1692.78 690.108 L1693.34 690.108 L1693.9 690.108 L1694.46 690.108 L1695.02 690.108 L1695.58 690.108 L1696.14 690.108 L1696.7 690.108 L1697.26 690.108 L1697.82 690.108 L1698.38 690.108 L1698.94 690.108 L1699.5 690.108 L1700.05 690.108 L1700.61 690.108 L1701.17 690.108 L1701.73 690.108 L1702.29 690.108 L1702.85 690.108 L1703.41 690.108 L1703.97 690.108 L1704.53 690.108 L1705.09 690.108 L1705.65 690.108 L1706.21 690.108 L1706.77 690.108 L1707.32 690.108 L1707.88 690.108 L1708.44 690.108 L1709 690.108 L1709.56 690.108 L1710.12 690.108 L1710.68 690.108 L1711.24 690.108 L1711.8 690.108 L1712.36 690.108 L1712.92 690.108 L1713.48 690.108 L1714.04 690.108 L1714.6 690.108 L1715.15 690.108 L1715.71 690.108 L1716.27 690.108 L1716.83 690.108 L1717.39 690.108 L1717.95 690.108 L1718.51 690.108 L1719.07 690.108 L1719.63 690.108 L1720.19 690.108 L1720.75 690.108 L1721.31 690.108 L1721.87 690.108 L1722.42 690.108 L1722.98 690.108 L1723.54 690.108 L1724.1 690.108 L1724.66 690.108 L1725.22 690.108 L1725.78 690.108 L1726.34 690.108 L1726.9 690.108 L1727.46 690.108 L1728.02 690.108 L1728.58 690.108 L1729.14 690.108 L1729.69 690.108 L1730.25 690.108 L1730.81 690.108 L1731.37 690.108 L1731.93 690.108 L1732.49 690.108 L1733.05 690.108 L1733.61 690.108 L1734.17 690.108 L1734.73 690.108 L1735.29 690.108 L1735.85 690.108 L1736.41 690.108 L1736.97 690.108 L1737.52 690.108 L1738.08 690.108 L1738.64 690.108 L1739.2 690.108 L1739.76 690.108 L1740.32 690.108 L1740.88 690.108 L1741.44 690.108 L1742 690.108 L1742.56 690.108 L1743.12 690.108 L1743.68 690.108 L1744.24 690.108 L1744.79 690.108 L1745.35 690.108 L1745.91 690.108 L1746.47 690.108 L1747.03 690.108 L1747.59 690.108 L1748.15 690.108 L1748.71 690.108 L1749.27 690.108 L1749.83 690.108 L1750.39 690.108 L1750.95 690.108 L1751.51 690.108 L1752.06 690.108 L1752.62 690.108 L1753.18 690.108 L1753.74 690.108 L1754.3 690.108 L1754.86 690.108 L1755.42 690.108 L1755.98 690.108 L1756.54 690.108 L1757.1 690.108 L1757.66 690.108 L1758.22 690.108 L1758.78 690.108 L1759.34 690.108 L1759.89 690.108 L1760.45 690.108 L1761.01 690.108 L1761.57 690.108 L1762.13 690.108 L1762.69 690.108 L1763.25 690.108 L1763.81 690.108 L1764.37 690.108 L1764.93 690.108 L1765.49 690.108 L1766.05 690.108 L1766.61 690.108 L1767.16 690.108 L1767.72 690.108 L1768.28 690.108 L1768.84 690.108 L1769.4 690.108 L1769.96 690.108 L1770.52 690.108 L1771.08 690.108 L1771.64 690.108 L1772.2 690.108 L1772.76 690.108 L1773.32 690.108 L1773.88 690.108 L1774.43 690.108 L1774.99 690.108 L1775.55 690.108 L1776.11 690.108 L1776.67 690.108 L1777.23 690.108 L1777.79 690.108 L1778.35 690.108 L1778.91 690.108 L1779.47 690.108 L1780.03 690.108 L1780.59 690.108 L1781.15 690.108 L1781.71 690.108 L1782.26 690.108 L1782.82 690.108 L1783.38 690.108 L1783.94 690.108 L1784.5 690.108 L1785.06 690.108 L1785.62 690.108 L1786.18 690.108 L1786.74 690.108 L1787.3 690.108 L1787.86 690.108 L1788.42 690.108 L1788.98 690.108 L1789.53 690.108 L1790.09 690.108 L1790.65 690.108 L1791.21 690.108 L1791.77 690.108 L1792.33 690.108 L1792.89 690.108 L1793.45 690.108 L1794.01 690.108 L1794.57 690.108 L1795.13 690.108 L1795.69 690.108 L1796.25 690.108 L1796.8 690.108 L1797.36 690.108 L1797.92 690.108 L1798.48 690.108 L1799.04 690.108 L1799.6 690.108 L1800.16 690.108 L1800.72 690.108 L1801.28 690.108 L1801.84 690.108 L1802.4 690.108 L1802.96 690.108 L1803.52 690.108 L1804.08 690.108 L1804.63 690.108 L1805.19 690.108 L1805.75 690.108 L1806.31 690.108 L1806.87 690.108 L1807.43 690.108 L1807.99 690.108 L1808.55 690.108 L1809.11 690.108 L1809.67 690.108 L1810.23 690.108 L1810.79 690.108 L1811.35 690.108 L1811.9 690.108 L1812.46 690.108 L1813.02 690.108 L1813.58 690.108 L1814.14 690.108 L1814.7 690.108 L1815.26 690.108 L1815.82 690.108 L1816.38 690.108 L1816.94 690.108 L1817.5 690.108 L1818.06 690.108 L1818.62 690.108 L1819.18 690.108 L1819.73 690.108 L1820.29 690.108 L1820.85 690.108 L1821.41 690.108 L1821.97 690.108 L1822.53 690.108 L1823.09 690.108 L1823.65 690.108 L1824.21 690.108 L1824.77 690.108 L1825.33 690.108 L1825.89 690.108 L1826.45 690.108 L1827 690.108 L1827.56 690.108 L1828.12 690.108 L1828.68 690.108 L1829.24 690.108 L1829.8 690.108 L1830.36 690.108 L1830.92 690.108 L1831.48 690.108 L1832.04 690.108 L1832.6 690.108 L1833.16 690.108 L1833.72 690.108 L1834.27 690.108 L1834.83 690.108 L1835.39 690.108 L1835.95 690.108 L1836.51 690.108 L1837.07 690.108 L1837.63 690.108 L1838.19 690.108 L1838.19 680.48 L1837.63 680.48 L1837.07 680.48 L1836.51 680.48 L1835.95 680.48 L1835.39 680.48 L1834.83 680.48 L1834.27 680.48 L1833.72 680.48 L1833.16 680.48 L1832.6 680.48 L1832.04 680.48 L1831.48 680.48 L1830.92 680.48 L1830.36 680.48 L1829.8 680.48 L1829.24 680.48 L1828.68 680.48 L1828.12 680.48 L1827.56 680.48 L1827 680.48 L1826.45 680.48 L1825.89 680.48 L1825.33 680.48 L1824.77 680.48 L1824.21 680.48 L1823.65 680.48 L1823.09 680.48 L1822.53 680.48 L1821.97 680.48 L1821.41 680.48 L1820.85 680.48 L1820.29 680.48 L1819.73 680.48 L1819.18 680.48 L1818.62 680.48 L1818.06 680.48 L1817.5 680.48 L1816.94 680.48 L1816.38 680.48 L1815.82 680.48 L1815.26 680.48 L1814.7 680.48 L1814.14 680.48 L1813.58 680.48 L1813.02 680.48 L1812.46 680.48 L1811.9 680.48 L1811.35 680.48 L1810.79 680.48 L1810.23 680.48 L1809.67 680.48 L1809.11 680.48 L1808.55 680.48 L1807.99 680.48 L1807.43 680.48 L1806.87 680.48 L1806.31 680.48 L1805.75 680.48 L1805.19 680.48 L1804.63 680.48 L1804.08 680.48 L1803.52 680.48 L1802.96 680.48 L1802.4 680.48 L1801.84 680.48 L1801.28 680.48 L1800.72 680.48 L1800.16 680.48 L1799.6 680.48 L1799.04 680.48 L1798.48 680.48 L1797.92 680.48 L1797.36 680.48 L1796.8 680.48 L1796.25 680.48 L1795.69 680.48 L1795.13 680.48 L1794.57 680.48 L1794.01 680.48 L1793.45 680.48 L1792.89 680.48 L1792.33 680.48 L1791.77 680.48 L1791.21 680.48 L1790.65 680.48 L1790.09 680.48 L1789.53 680.48 L1788.98 680.48 L1788.42 680.48 L1787.86 680.48 L1787.3 680.48 L1786.74 680.48 L1786.18 680.48 L1785.62 680.48 L1785.06 680.48 L1784.5 680.48 L1783.94 680.48 L1783.38 680.48 L1782.82 680.48 L1782.26 680.48 L1781.71 680.48 L1781.15 680.48 L1780.59 680.48 L1780.03 680.48 L1779.47 680.48 L1778.91 680.48 L1778.35 680.48 L1777.79 680.48 L1777.23 680.48 L1776.67 680.48 L1776.11 680.48 L1775.55 680.48 L1774.99 680.48 L1774.43 680.48 L1773.88 680.48 L1773.32 680.48 L1772.76 680.48 L1772.2 680.48 L1771.64 680.48 L1771.08 680.48 L1770.52 680.48 L1769.96 680.48 L1769.4 680.48 L1768.84 680.48 L1768.28 680.48 L1767.72 680.48 L1767.16 680.48 L1766.61 680.48 L1766.05 680.48 L1765.49 680.48 L1764.93 680.48 L1764.37 680.48 L1763.81 680.48 L1763.25 680.48 L1762.69 680.48 L1762.13 680.48 L1761.57 680.48 L1761.01 680.48 L1760.45 680.48 L1759.89 680.48 L1759.34 680.48 L1758.78 680.48 L1758.22 680.48 L1757.66 680.48 L1757.1 680.48 L1756.54 680.48 L1755.98 680.48 L1755.42 680.48 L1754.86 680.48 L1754.3 680.48 L1753.74 680.48 L1753.18 680.48 L1752.62 680.48 L1752.06 680.48 L1751.51 680.48 L1750.95 680.48 L1750.39 680.48 L1749.83 680.48 L1749.27 680.48 L1748.71 680.48 L1748.15 680.48 L1747.59 680.48 L1747.03 680.48 L1746.47 680.48 L1745.91 680.48 L1745.35 680.48 L1744.79 680.48 L1744.24 680.48 L1743.68 680.48 L1743.12 680.48 L1742.56 680.48 L1742 680.48 L1741.44 680.48 L1740.88 680.48 L1740.32 680.48 L1739.76 680.48 L1739.2 680.48 L1738.64 680.48 L1738.08 680.48 L1737.52 680.48 L1736.97 680.48 L1736.41 680.48 L1735.85 680.48 L1735.29 680.48 L1734.73 680.48 L1734.17 680.48 L1733.61 680.48 L1733.05 680.48 L1732.49 680.48 L1731.93 680.48 L1731.37 680.48 L1730.81 680.48 L1730.25 680.48 L1729.69 680.48 L1729.14 680.48 L1728.58 680.48 L1728.02 680.48 L1727.46 680.48 L1726.9 680.48 L1726.34 680.48 L1725.78 680.48 L1725.22 680.48 L1724.66 680.48 L1724.1 680.48 L1723.54 680.48 L1722.98 680.48 L1722.42 680.48 L1721.87 680.48 L1721.31 680.48 L1720.75 680.48 L1720.19 680.48 L1719.63 680.48 L1719.07 680.48 L1718.51 680.48 L1717.95 680.48 L1717.39 680.48 L1716.83 680.48 L1716.27 680.48 L1715.71 680.48 L1715.15 680.48 L1714.6 680.48 L1714.04 680.48 L1713.48 680.48 L1712.92 680.48 L1712.36 680.48 L1711.8 680.48 L1711.24 680.48 L1710.68 680.48 L1710.12 680.48 L1709.56 680.48 L1709 680.48 L1708.44 680.48 L1707.88 680.48 L1707.32 680.48 L1706.77 680.48 L1706.21 680.48 L1705.65 680.48 L1705.09 680.48 L1704.53 680.48 L1703.97 680.48 L1703.41 680.48 L1702.85 680.48 L1702.29 680.48 L1701.73 680.48 L1701.17 680.48 L1700.61 680.48 L1700.05 680.48 L1699.5 680.48 L1698.94 680.48 L1698.38 680.48 L1697.82 680.48 L1697.26 680.48 L1696.7 680.48 L1696.14 680.48 L1695.58 680.48 L1695.02 680.48 L1694.46 680.48 L1693.9 680.48 L1693.34 680.48 L1692.78 680.48 L1692.23 680.48 L1691.67 680.48 L1691.11 680.48 L1690.55 680.48 L1689.99 680.48 L1689.43 680.48 L1688.87 680.48 L1688.31 680.48 L1687.75 680.48 L1687.19 680.48 L1686.63 680.48 L1686.07 680.48 L1685.51 680.48 L1684.95 680.48 L1684.4 680.48 L1683.84 680.48 L1683.28 680.48 L1682.72 680.48 L1682.16 680.48 L1681.6 680.48 L1681.04 680.48 L1680.48 680.48 L1679.92 680.48 L1679.36 680.48 L1678.8 680.48 L1678.24 680.48 L1677.68 680.48 L1677.13 680.48 L1676.57 680.48 L1676.01 680.48 L1675.45 680.48 L1674.89 680.48 L1674.33 680.48 L1673.77 680.48 L1673.21 680.48 L1672.65 680.48 L1672.09 680.48 L1671.53 680.48 L1670.97 680.48 L1670.41 680.48 L1669.85 680.48 L1669.3 680.48 L1668.74 680.48 L1668.18 680.48 L1667.62 680.48 L1667.06 680.48 L1666.5 680.48 L1665.94 680.48 L1665.38 680.48 L1664.82 680.48 L1664.26 680.48 L1663.7 680.48 L1663.14 680.48 L1662.58 680.48 L1662.03 680.48 L1661.47 680.48 L1660.91 680.48 L1660.35 680.48 L1659.79 680.48 L1659.23 680.48 L1658.67 680.48 L1658.11 680.48 L1657.55 680.48 L1656.99 680.48 L1656.43 680.48 L1655.87 680.48 L1655.31 680.48 L1654.76 680.48 L1654.2 680.48 L1653.64 680.48 L1653.08 680.48 L1652.52 680.48 L1651.96 680.48 L1651.4 680.48 L1650.84 680.48 L1650.28 680.48 L1649.72 680.48 L1649.16 680.48 L1648.6 680.48 L1648.04 680.48 L1647.48 680.48 L1646.93 680.48 L1646.37 680.48 L1645.81 680.48 L1645.25 680.48 L1644.69 680.48 L1644.13 680.48 L1643.57 680.48 L1643.01 680.48 L1642.45 680.48 L1641.89 680.48 L1641.33 680.48 L1640.77 680.48 L1640.21 680.48 L1639.66 680.48 L1639.1 680.48 L1638.54 680.48 L1637.98 680.48 L1637.42 680.48 L1636.86 680.48 L1636.3 680.48 L1635.74 680.48 L1635.18 680.48 L1634.62 680.48 L1634.06 680.48 L1633.5 680.48 L1632.94 680.48 L1632.39 680.48 L1631.83 680.48 L1631.27 680.48 L1630.71 680.48 L1630.15 680.48 L1629.59 680.48 L1629.03 680.48 L1628.47 680.48 L1627.91 680.48 L1627.35 680.48 L1626.79 680.48 L1626.23 680.48 L1625.67 680.48 L1625.11 680.48 L1624.56 680.48 L1624 680.48 L1623.44 680.48 L1622.88 680.48 L1622.32 680.48 L1621.76 680.48 L1621.2 680.48 L1620.64 680.48 L1620.08 680.48 L1619.52 680.48 L1618.96 680.48 L1618.4 680.48 L1617.84 680.48 L1617.29 680.48 L1616.73 680.48 L1616.17 680.48 L1615.61 680.48 L1615.05 680.48 L1614.49 680.48 L1613.93 680.48 L1613.37 680.48 L1612.81 680.48 L1612.25 680.48 L1611.69 680.48 L1611.13 680.48 L1610.57 680.48 L1610.02 680.48 L1609.46 680.48 L1608.9 680.48 L1608.34 680.48 L1607.78 680.48 L1607.22 680.48 L1606.66 680.48 L1606.1 680.48 L1605.54 680.48 L1604.98 680.48 L1604.42 680.48 L1603.86 680.48 L1603.3 680.48 L1602.74 680.48 L1602.19 680.48 L1601.63 680.48 L1601.07 680.48 L1600.51 680.48 L1599.95 680.48 L1599.39 680.48 L1598.83 680.48 L1598.27 680.48 L1597.71 680.48 L1597.15 680.48 L1596.59 680.48 L1596.03 680.48 L1595.47 680.48 L1594.92 680.48 L1594.36 680.48 L1593.8 680.48 L1593.24 680.48 L1592.68 680.48 L1592.12 680.48 L1591.56 680.48 L1591 680.48 L1590.44 680.48 L1589.88 680.48 L1589.32 680.48 L1588.76 680.48 L1588.2 680.48 L1587.65 680.48 L1587.09 680.48 L1586.53 680.48 L1585.97 680.48 L1585.41 680.48 L1584.85 680.48 L1584.29 680.48 L1583.73 680.48 L1583.17 680.48 L1582.61 680.48 L1582.05 680.48 L1581.49 680.48 L1580.93 680.48 L1580.37 680.48 L1579.82 680.48 L1579.26 680.48 L1578.7 680.48 L1578.14 680.48 L1577.58 680.48 L1577.02 680.48 L1576.46 680.48 L1575.9 680.48 L1575.34 680.48 L1574.78 680.48 L1574.22 680.48 L1573.66 680.48 L1573.1 680.48 L1572.55 680.48 L1571.99 680.48 L1571.43 680.48 L1570.87 680.48 L1570.31 680.48 L1569.75 680.48 L1569.19 680.48 L1568.63 680.48 L1568.07 680.48 L1567.51 680.48 L1566.95 680.48 L1566.39 680.48 L1565.83 680.48 L1565.28 680.48 L1564.72 680.48 L1564.16 680.48 L1563.6 680.48 L1563.04 680.48 L1562.48 680.48 L1561.92 680.48 L1561.36 680.48 L1560.8 680.48 L1560.24 680.48 L1559.68 680.48 L1559.12 680.48 L1558.56 680.48 L1558 680.48 L1557.45 680.48 L1556.89 680.48 L1556.33 680.48 L1555.77 680.48 L1555.21 680.48 L1554.65 680.48 L1554.09 680.48 L1553.53 680.48 L1552.97 680.48 L1552.41 680.48 L1551.85 680.48 L1551.29 680.48 L1550.73 680.48 L1550.18 680.48 L1549.62 680.48 L1549.06 680.48 L1548.5 680.48 L1547.94 680.48 L1547.38 680.48 L1546.82 680.48 L1546.26 680.48 L1545.7 680.48 L1545.14 680.48 L1544.58 680.48 L1544.02 680.48 L1543.46 680.48 L1542.9 680.48 L1542.35 680.48 L1541.79 680.48 L1541.23 680.48 L1540.67 680.48 L1540.11 680.48 L1539.55 680.48 L1538.99 680.48 L1538.43 680.48 L1537.87 680.48 L1537.31 680.48 L1536.75 680.48 L1536.19 680.48 L1535.63 680.48 L1535.08 680.48 L1534.52 680.48 L1533.96 680.48 L1533.4 680.48 L1532.84 680.48 L1532.28 680.48 L1531.72 680.48 L1531.16 680.48 L1530.6 680.48 L1530.04 680.48 L1529.48 680.48 L1528.92 680.48 L1528.36 680.48 L1527.81 680.48 L1527.25 680.48 L1526.69 680.48 L1526.13 680.48 L1525.57 680.48 L1525.01 680.48 L1524.45 680.48 L1523.89 680.48 L1523.33 680.48 L1522.77 680.48 L1522.21 680.48 L1521.65 680.48 L1521.09 680.48 L1520.53 680.48 L1519.98 680.48 L1519.42 680.48 L1518.86 680.48 L1518.3 680.48 L1517.74 680.48 L1517.18 680.48 L1516.62 680.48 L1516.06 680.48 L1515.5 680.48 L1514.94 680.48 L1514.38 680.48 L1513.82 680.48 L1513.26 680.48 L1512.71 680.48 L1512.15 680.48 L1511.59 680.48 L1511.03 680.48 L1510.47 680.48 L1509.91 680.48 L1509.35 680.48 L1508.79 680.48 L1508.23 680.48 L1507.67 680.48 L1507.11 680.48 L1506.55 680.48 L1505.99 680.48 L1505.44 680.48 L1504.88 680.48 L1504.32 680.48 L1503.76 680.48 L1503.2 680.48 L1502.64 680.48 L1502.08 680.48 L1501.52 680.48 L1500.96 680.48 L1500.4 680.48 L1499.84 680.48 L1499.28 680.48 L1498.72 680.48 L1498.16 680.48 L1497.61 680.48 L1497.05 680.48 L1496.49 680.48 L1495.93 680.48 L1495.37 680.48 L1494.81 680.48 L1494.25 680.48 L1493.69 680.48 L1493.13 680.48 L1492.57 680.48 L1492.01 680.48 L1491.45 680.48 L1490.89 680.48 L1490.34 680.48 L1489.78 680.48 L1489.22 680.48 L1488.66 680.48 L1488.1 680.48 L1487.54 680.48 L1486.98 680.48 L1486.42 680.48 L1485.86 680.48 L1485.3 680.48 L1484.74 680.48 L1484.18 680.48 L1483.62 680.48 L1483.07 680.48 L1482.51 680.48 L1481.95 680.48 L1481.39 680.48 L1480.83 680.48 L1480.27 680.48 L1479.71 680.48 L1479.15 680.48 L1478.59 680.48 L1478.03 680.48 L1477.47 680.48 L1476.91 680.48 L1476.35 680.48 L1475.79 680.48 L1475.24 680.48 L1474.68 680.48 L1474.12 680.48 L1473.56 680.48 L1473 680.48 L1472.44 680.48 L1471.88 680.48 L1471.32 680.48 L1470.76 680.48 L1470.2 680.48 L1469.64 680.48 L1469.08 680.48 L1468.52 680.48 L1467.97 680.48 L1467.41 680.48 L1466.85 680.48 L1466.29 680.48 L1465.73 680.48 L1465.17 680.48 L1464.61 680.48 L1464.05 680.48 L1463.49 680.48 L1462.93 680.48 L1462.37 680.48 L1461.81 680.48 L1461.25 680.48 L1460.7 680.48 L1460.14 680.48 L1459.58 680.48 L1459.02 680.48 L1458.46 680.48 L1457.9 680.48 L1457.34 680.48 L1456.78 680.48 L1456.22 680.48 L1455.66 680.48 L1455.1 680.48 L1454.54 680.48 L1453.98 680.48 L1453.42 680.48 L1452.87 680.48 L1452.31 680.48 L1451.75 680.48 L1451.19 680.48 L1450.63 680.48 L1450.07 680.48 L1449.51 680.48 L1448.95 680.48 L1448.39 680.48 L1447.83 680.48 L1447.27 680.48 L1446.71 680.48 L1446.15 680.48 L1445.6 680.48 L1445.04 680.48 L1444.48 680.48 L1443.92 680.48 L1443.36 680.48 L1442.8 680.48 L1442.24 680.48 L1441.68 680.48 L1441.12 680.48 L1440.56 680.48 L1440 680.48 L1439.44 680.48 L1438.88 680.48 L1438.33 680.48 L1437.77 680.48 L1437.21 680.48 L1436.65 680.48 L1436.09 680.48 L1435.53 680.48 L1434.97 680.48 L1434.41 680.48 L1433.85 680.48 L1433.29 680.48 L1432.73 680.48 L1432.17 680.48 L1431.61 680.48 L1431.05 680.48 L1430.5 680.48 L1429.94 680.48 L1429.38 680.48 L1428.82 680.48 L1428.26 680.48 L1427.7 680.48 L1427.14 680.48 L1426.58 680.48 L1426.02 680.48 L1425.46 680.48 L1424.9 680.48 L1424.34 680.48 L1423.78 680.48 L1423.23 680.48 L1422.67 680.48 L1422.11 680.48 L1421.55 680.48 L1420.99 680.48 L1420.43 680.48 L1419.87 680.48 L1419.31 680.48 L1418.75 680.48 L1418.19 680.48 L1417.63 680.48 L1417.07 680.48 L1416.51 680.48 L1415.95 680.48 L1415.4 680.48 L1414.84 680.48 L1414.28 680.48 L1413.72 680.48 L1413.16 680.48 L1412.6 680.48 L1412.04 680.48 L1411.48 680.48 L1410.92 680.48 L1410.36 680.48 L1409.8 680.48 L1409.24 680.48 L1408.68 680.48 L1408.13 680.48 L1407.57 680.48 L1407.01 680.48 L1406.45 680.48 L1405.89 680.48 L1405.33 680.48 L1404.77 680.48 L1404.21 680.48 L1403.65 680.48 L1403.09 680.48 L1402.53 680.48 L1401.97 680.48 L1401.41 680.48 L1400.86 680.48 L1400.3 680.48 L1399.74 680.48 L1399.18 680.48 L1398.62 680.48 L1398.06 680.48 L1397.5 680.48 L1396.94 680.48 L1396.38 680.48 L1395.82 680.48 L1395.26 680.48 L1394.7 680.48 L1394.14 680.48 L1393.58 680.48 L1393.03 680.48 L1392.47 680.48 L1391.91 680.48 L1391.35 680.48 L1390.79 680.48 L1390.23 680.48 L1389.67 680.48 L1389.11 680.48 L1388.55 680.48 L1387.99 680.48 L1387.43 680.48 L1386.87 680.48 L1386.31 680.48 L1385.76 680.48 L1385.2 680.48 L1384.64 680.48 L1384.08 680.48 L1383.52 680.48 L1382.96 680.48 L1382.4 680.48 L1381.84 680.48 L1381.28 680.48 L1380.72 680.48 L1380.16 680.48 L1379.6 680.48 L1379.04 680.48 L1378.49 680.48 L1377.93 680.48 L1377.37 680.48 L1376.81 680.48 L1376.25 680.48 L1375.69 680.48 L1375.13 680.48 L1374.57 680.48 L1374.01 680.48 L1373.45 680.48 L1372.89 680.48 L1372.33 680.48 L1371.77 680.48 L1371.21 680.48 L1370.66 680.48 L1370.1 680.48 L1369.54 680.48 L1368.98 680.48 L1368.42 680.48 L1367.86 680.48 L1367.3 680.48 L1366.74 680.48 L1366.18 680.48 L1365.62 680.48 L1365.06 680.48 L1364.5 680.48 L1363.94 680.48 L1363.39 680.48 L1362.83 680.48 L1362.27 680.48 L1361.71 680.48 L1361.15 680.48 L1360.59 680.48 L1360.03 680.48 L1359.47 680.48 L1358.91 680.48 L1358.35 680.48 L1357.79 680.48 L1357.23 680.48 L1356.67 680.48 L1356.12 680.48 L1355.56 680.48 L1355 680.48 L1354.44 680.48 L1353.88 680.48 L1353.32 680.48 L1352.76 680.48 L1352.2 680.48 L1351.64 680.48 L1351.08 680.48 L1350.52 680.48 L1349.96 680.48 L1349.4 680.48 L1348.84 680.48 L1348.29 680.48 L1347.73 680.48 L1347.17 680.48 L1346.61 680.48 L1346.05 680.48 L1345.49 680.48 L1344.93 680.48 L1344.37 680.48 L1343.81 680.48 L1343.25 680.48 L1342.69 680.48 L1342.13 680.48 L1341.57 680.48 L1341.02 680.48 L1340.46 680.48 L1339.9 680.48 L1339.34 680.48 L1338.78 680.48 L1338.22 680.48 L1337.66 680.48 L1337.1 680.48 L1336.54 680.48 L1335.98 680.48 L1335.42 680.48 L1334.86 680.48 L1334.3 680.48 L1333.75 680.48 L1333.19 680.48 L1332.63 680.48 L1332.07 680.48 L1331.51 680.48 L1330.95 680.48 L1330.39 680.48 L1329.83 680.48 L1329.27 680.48 L1328.71 680.48 L1328.15 680.48 L1327.59 680.48 L1327.03 680.48 L1326.47 680.48 L1325.92 680.48 L1325.36 680.48 L1324.8 680.48 L1324.24 680.48 L1323.68 680.48 L1323.12 680.48 L1322.56 680.48 L1322 680.48 L1321.44 680.48 L1320.88 680.48 L1320.32 680.48 L1319.76 680.48 L1319.2 680.48 L1318.65 680.48 L1318.09 680.48 L1317.53 680.48 L1316.97 680.48 L1316.41 680.48 L1315.85 680.48 L1315.29 680.48 L1314.73 680.48 L1314.17 680.48 L1313.61 680.48 L1313.05 680.48 L1312.49 680.48 L1311.93 680.48 L1311.38 680.48 L1310.82 680.48 L1310.26 680.48 L1309.7 680.48 L1309.14 680.48 L1308.58 680.48 L1308.02 680.48 L1307.46 680.48 L1306.9 680.48 L1306.34 680.48 L1305.78 680.48 L1305.22 680.48 L1304.66 680.48 L1304.1 680.48 L1303.55 680.48 L1302.99 680.48 L1302.43 680.48 L1301.87 680.48 L1301.31 680.48 L1300.75 680.48 L1300.19 680.48 L1299.63 680.48 L1299.07 680.48 L1298.51 680.48 L1297.95 680.48 L1297.39 680.48 L1296.83 680.48 L1296.28 680.48 L1295.72 680.48 L1295.16 680.48 L1294.6 680.48 L1294.04 680.48 L1293.48 680.48 L1292.92 680.48 L1292.36 680.48 L1291.8 680.48 L1291.24 680.48 L1290.68 680.48 L1290.12 680.48 L1289.56 680.48 L1289 680.48 L1288.45 680.48 L1287.89 680.48 L1287.33 680.48 L1286.77 680.48 L1286.21 680.48 L1285.65 680.48 L1285.09 680.48 L1284.53 680.48 L1283.97 680.48 L1283.41 680.48 L1282.85 680.48 L1282.29 680.48 L1281.73 680.48 L1281.18 680.48 L1280.62 680.48 L1280.06 680.48 L1279.5 680.48 L1278.94 680.48 L1278.38 680.48 L1277.82 680.48 L1277.26 680.48 L1276.7 680.48 L1276.14 680.48 L1275.58 680.48 L1275.02 680.48 L1274.46 680.48 L1273.91 680.48 L1273.35 680.48 L1272.79 680.48 L1272.23 680.48 L1271.67 680.48 L1271.11 680.48 L1270.55 680.48 L1269.99 680.48 L1269.43 680.48 L1268.87 680.48 L1268.31 680.48 L1267.75 680.48 L1267.19 680.48 L1266.63 680.48 L1266.08 680.48 L1265.52 680.48 L1264.96 680.48 L1264.4 680.48 L1263.84 680.48 L1263.28 680.48 L1262.72 680.48 L1262.16 680.48 L1261.6 680.48 L1261.04 680.48 L1260.48 680.48 L1259.92 680.48 L1259.36 680.48 L1258.81 680.48 L1258.25 680.48 L1257.69 680.48 L1257.13 680.48 L1256.57 680.48 L1256.01 680.48 L1255.45 680.48 L1254.89 680.48 L1254.33 680.48 L1253.77 680.48 L1253.21 680.48 L1252.65 680.48 L1252.09 680.48 L1251.54 680.48 L1250.98 680.48 L1250.42 680.48 L1249.86 680.48 L1249.3 680.48 L1248.74 680.48 L1248.18 680.48 L1247.62 680.48 L1247.06 680.48 L1246.5 680.48 L1245.94 680.48 L1245.38 680.48 L1244.82 680.48 L1244.26 680.48 L1243.71 680.48 L1243.15 680.48 L1242.59 680.48 L1242.03 680.48 L1241.47 680.48 L1240.91 680.48 L1240.35 680.48 L1239.79 680.48 L1239.23 680.48 L1238.67 680.48 L1238.11 680.48 L1237.55 680.48 L1236.99 680.48 L1236.44 680.48 L1235.88 680.48 L1235.32 680.48 L1234.76 680.48 L1234.2 680.48 L1233.64 680.48 L1233.08 680.48 L1232.52 680.48 L1231.96 680.48 L1231.4 680.48 L1230.84 680.48 L1230.28 680.48 L1229.72 680.48 L1229.17 680.48 L1228.61 680.48 L1228.05 680.48 L1227.49 680.48 L1226.93 680.48 L1226.37 680.48 L1225.81 680.48 L1225.25 680.48 L1224.69 680.48 L1224.13 680.48 L1223.57 680.48 L1223.01 680.48 L1222.45 680.48 L1221.89 680.48 L1221.34 680.48 L1220.78 680.48 L1220.22 680.48 L1219.66 680.48 L1219.1 680.48 L1218.54 680.48 L1217.98 680.48 L1217.42 680.48 L1216.86 680.48 L1216.3 680.48 L1215.74 680.48 L1215.18 680.48 L1214.62 680.48 L1214.07 680.48 L1213.51 680.48 L1212.95 680.48 L1212.39 680.48 L1211.83 680.48 L1211.27 680.48 L1210.71 680.48 L1210.15 680.48 L1209.59 680.48 L1209.03 680.48 L1208.47 680.48 L1207.91 680.48 L1207.35 680.48 L1206.8 680.48 L1206.24 680.48 L1205.68 680.48 L1205.12 680.48 L1204.56 680.48 L1204 680.48 L1203.44 680.48 L1202.88 680.48 L1202.32 680.48 L1201.76 680.48 L1201.2 680.48 L1200.64 680.48 L1200.08 680.48 L1199.52 680.48 L1198.97 680.48 L1198.41 680.48 L1197.85 680.48 L1197.29 680.48 L1196.73 680.48 L1196.17 680.48 L1195.61 680.48 L1195.05 680.48 L1194.49 680.48 L1193.93 680.48 L1193.37 680.48 L1192.81 680.48 L1192.25 680.48 L1191.7 680.48 L1191.14 680.48 L1190.58 680.48 L1190.02 680.48 L1189.46 680.48 L1188.9 680.48 L1188.34 680.48 L1187.78 680.48 L1187.22 680.48 L1186.66 680.48 L1186.1 680.48 L1185.54 680.48 L1184.98 680.48 L1184.43 680.48 L1183.87 680.48 L1183.31 680.48 L1182.75 680.48 L1182.19 680.48 L1181.63 680.48 L1181.07 680.48 L1180.51 680.48 L1179.95 680.48 L1179.39 680.48 L1178.83 680.48 L1178.27 680.48 L1177.71 680.48 L1177.15 680.48 L1176.6 680.48 L1176.04 680.48 L1175.48 680.48 L1174.92 680.48 L1174.36 680.48 L1173.8 680.48 L1173.24 680.48 L1172.68 680.48 L1172.12 680.48 L1171.56 680.48 L1171 680.48 L1170.44 680.48 L1169.88 680.48 L1169.33 680.48 L1168.77 680.48 L1168.21 680.48 L1167.65 680.48 L1167.09 680.48 L1166.53 680.48 L1165.97 680.48 L1165.41 680.48 L1164.85 680.48 L1164.29 680.48 L1163.73 680.48 L1163.17 680.48 L1162.61 680.48 L1162.05 680.48 L1161.5 680.48 L1160.94 680.48 L1160.38 680.48 L1159.82 680.48 L1159.26 680.48 L1158.7 680.48 L1158.14 680.48 L1157.58 680.48 L1157.02 680.48 L1156.46 680.48 L1155.9 680.48 L1155.34 680.48 L1154.78 680.48 L1154.23 680.48 L1153.67 680.48 L1153.11 680.48 L1152.55 680.48 L1151.99 680.48 L1151.43 680.48 L1150.87 680.48 L1150.31 680.48 L1149.75 680.48 L1149.19 680.48 L1148.63 680.48 L1148.07 680.48 L1147.51 680.48 L1146.96 680.48 L1146.4 680.48 L1145.84 680.48 L1145.28 680.48 L1144.72 680.48 L1144.16 680.48 L1143.6 680.48 L1143.04 680.48 L1142.48 680.48 L1141.92 680.48 L1141.36 680.48 L1140.8 680.48 L1140.24 680.48 L1139.68 680.48 L1139.13 680.48 L1138.57 680.48 L1138.01 680.48 L1137.45 680.48 L1136.89 680.48 L1136.33 680.48 L1135.77 680.48 L1135.21 680.48 L1134.65 680.48 L1134.09 680.48 L1133.53 680.48 L1132.97 680.48 L1132.41 680.48 L1131.86 680.48 L1131.3 680.48 L1130.74 680.48 L1130.18 680.48 L1129.62 680.48 L1129.06 680.48 L1128.5 680.48 L1127.94 680.48 L1127.38 680.48 L1126.82 680.48 L1126.26 680.48 L1125.7 680.48 L1125.14 680.48 L1124.59 680.48 L1124.03 680.48 L1123.47 680.48 L1122.91 680.48 L1122.35 680.48 L1121.79 680.48 L1121.23 680.48 L1120.67 680.48 L1120.11 680.48 L1119.55 680.48 L1118.99 680.48 L1118.43 680.48 L1117.87 680.48 L1117.31 680.48 L1116.76 680.48 L1116.2 680.48 L1115.64 680.48 L1115.08 680.48 L1114.52 680.48 L1113.96 680.48 L1113.4 680.48 L1112.84 680.48 L1112.28 680.48 L1111.72 680.48 L1111.16 680.48 L1110.6 680.48 L1110.04 680.48 L1109.49 680.48 L1108.93 680.48 L1108.37 680.48 L1107.81 680.48 L1107.25 680.48 L1106.69 680.48 L1106.13 680.48 L1105.57 680.48 L1105.01 680.48 L1104.45 680.48 L1103.89 680.48 L1103.33 680.48 L1102.77 680.48 L1102.22 680.48 L1101.66 680.48 L1101.1 680.48 L1100.54 680.48 L1099.98 680.48 L1099.42 680.48 L1098.86 680.48 L1098.3 680.48 L1097.74 680.48 L1097.18 680.48 L1096.62 680.48 L1096.06 680.48 L1095.5 680.48 L1094.94 680.48 L1094.39 680.48 L1093.83 680.48 L1093.27 680.48 L1092.71 680.48 L1092.15 680.48 L1091.59 680.48 L1091.03 680.48 L1090.47 680.48 L1089.91 680.48 L1089.35 680.48 L1088.79 680.48 L1088.23 680.48 L1087.67 680.48 L1087.12 680.48 L1086.56 680.48 L1086 680.48 L1085.44 680.48 L1084.88 680.48 L1084.32 680.48 L1083.76 680.48 L1083.2 680.48 L1082.64 680.48 L1082.08 680.48 L1081.52 680.48 L1080.96 680.48 L1080.4 680.48 L1079.85 680.48 L1079.29 680.48 L1078.73 680.48 L1078.17 680.48 L1077.61 680.48 L1077.05 680.48 L1076.49 680.48 L1075.93 680.48 L1075.37 680.48 L1074.81 680.48 L1074.25 680.48 L1073.69 680.48 L1073.13 680.48 L1072.57 680.48 L1072.02 680.48 L1071.46 680.48 L1070.9 680.48 L1070.34 680.48 L1069.78 680.48 L1069.22 680.48 L1068.66 680.48 L1068.1 680.48 L1067.54 680.48 L1066.98 680.48 L1066.42 680.48 L1065.86 680.48 L1065.3 680.48 L1064.75 680.48 L1064.19 680.48 L1063.63 680.48 L1063.07 680.48 L1062.51 680.48 L1061.95 680.48 L1061.39 680.48 L1060.83 680.48 L1060.27 680.48 L1059.71 680.48 L1059.15 680.48 L1058.59 680.48 L1058.03 680.48 L1057.48 680.48 L1056.92 680.48 L1056.36 680.48 L1055.8 680.48 L1055.24 680.48 L1054.68 680.48 L1054.12 680.48 L1053.56 680.48 L1053 680.48 L1052.44 680.48 L1051.88 680.48 L1051.32 680.48 L1050.76 680.48 L1050.2 680.48 L1049.65 680.48 L1049.09 680.48 L1048.53 680.48 L1047.97 680.48 L1047.41 680.48 L1046.85 680.48 L1046.29 680.48 L1045.73 680.48 L1045.17 680.48 L1044.61 680.48 L1044.05 680.48 L1043.49 680.48 L1042.93 680.48 L1042.38 680.48 L1041.82 680.48 L1041.26 680.48 L1040.7 680.48 L1040.14 680.48 L1039.58 680.48 L1039.02 680.48 L1038.46 680.48 L1037.9 680.48 L1037.34 680.48 L1036.78 680.48 L1036.22 680.48 L1035.66 680.48 L1035.1 680.48 L1034.55 680.48 L1033.99 680.48 L1033.43 680.48 L1032.87 680.48 L1032.31 680.48 L1031.75 680.48 L1031.19 680.48 L1030.63 680.48 L1030.07 680.48 L1029.51 680.48 L1028.95 680.48 L1028.39 680.48 L1027.83 680.48 L1027.28 680.48 L1026.72 680.48 L1026.16 680.48 L1025.6 680.48 L1025.04 680.48 L1024.48 680.48 L1023.92 680.48 L1023.36 680.48 L1022.8 680.48 L1022.24 680.48 L1021.68 680.48 L1021.12 680.48 L1020.56 680.48 L1020.01 680.48 L1019.45 680.48 L1018.89 680.48 L1018.33 680.48 L1017.77 680.48 L1017.21 680.48 L1016.65 680.48 L1016.09 680.48 L1015.53 680.48 L1014.97 680.48 L1014.41 680.48 L1013.85 680.48 L1013.29 680.48 L1012.73 680.48 L1012.18 680.48 L1011.62 680.48 L1011.06 680.48 L1010.5 680.48 L1009.94 680.48 L1009.38 680.48 L1008.82 680.48 L1008.26 680.48 L1007.7 680.48 L1007.14 680.48 L1006.58 680.48 L1006.02 680.48 L1005.46 680.48 L1004.91 680.48 L1004.35 680.48 L1003.79 680.48 L1003.23 680.48 L1002.67 680.48 L1002.11 680.48 L1001.55 680.48 L1000.99 680.48 L1000.43 680.48 L999.872 680.48 L999.313 680.48 L998.754 680.48 L998.194 680.48 L997.635 680.48 L997.076 680.48 L996.517 680.48 L995.957 680.48 L995.398 680.48 L994.839 680.48 L994.28 680.48 L993.72 680.48 L993.161 680.48 L992.602 680.48 L992.043 680.48 L991.483 680.48 L990.924 680.48 L990.365 680.48 L989.806 680.48 L989.246 680.48 L988.687 680.48 L988.128 680.48 L987.569 680.48 L987.009 680.48 L986.45 680.48 L985.891 680.48 L985.332 680.48 L984.772 680.48 L984.213 680.48 L983.654 680.48 L983.095 680.48 L982.535 680.48 L981.976 680.48 L981.417 680.48 L980.858 680.48 L980.298 680.48 L979.739 680.48 L979.18 680.48 L978.621 680.48 L978.061 680.48 L977.502 680.48 L976.943 680.48 L976.384 680.48 L975.824 680.48 L975.265 680.48 L974.706 680.48 L974.147 680.48 L973.587 680.48 L973.028 680.48 L972.469 680.48 L971.91 680.48 L971.35 680.48 L970.791 680.48 L970.232 680.48 L969.673 680.48 L969.113 680.48 L968.554 680.48 L967.995 680.48 L967.436 680.48 L966.876 680.48 L966.317 680.48 L965.758 680.48 L965.199 680.48 L964.639 680.48 L964.08 680.48 L963.521 680.48 L962.962 680.48 L962.402 680.48 L961.843 680.48 L961.284 680.48 L960.725 680.48 L960.165 680.48 L959.606 680.48 L959.047 680.48 L958.488 680.48 L957.928 680.48 L957.369 680.48 L956.81 680.48 L956.251 680.48 L955.691 680.48 L955.132 680.48 L954.573 680.48 L954.014 680.48 L953.454 680.48 L952.895 680.48 L952.336 680.48 L951.777 680.48 L951.217 680.48 L950.658 680.48 L950.099 680.48 L949.54 680.48 L948.98 680.48 L948.421 680.48 L947.862 680.48 L947.303 680.48 L946.743 680.48 L946.184 680.48 L945.625 680.48 L945.066 680.48 L944.506 680.48 L943.947 680.48 L943.388 680.48 L942.829 680.48 L942.269 680.48 L941.71 680.48 L941.151 680.48 L940.592 680.48 L940.032 680.48 L939.473 680.48 L938.914 680.48 L938.355 680.48 L937.795 680.48 L937.236 680.48 L936.677 680.48 L936.118 680.48 L935.558 680.48 L934.999 680.48 L934.44 680.48 L933.881 680.48 L933.321 680.48 L932.762 680.48 L932.203 680.48 L931.644 680.48 L931.084 680.48 L930.525 680.48 L929.966 680.48 L929.406 680.48 L928.847 680.48 L928.288 680.48 L927.729 680.48 L927.169 680.48 L926.61 680.48 L926.051 680.48 L925.492 680.48 L924.932 680.48 L924.373 680.48 L923.814 680.48 L923.255 680.48 L922.695 680.48 L922.136 680.48 L921.577 680.48 L921.018 680.48 L920.458 680.48 L919.899 680.48 L919.34 680.48 L918.781 680.48 L918.221 680.48 L917.662 680.48 L917.103 680.48 L916.544 680.48 L915.984 680.48 L915.425 680.48 L914.866 680.48 L914.307 680.48 L913.747 680.48 L913.188 680.48 L912.629 680.48 L912.07 680.48 L911.51 680.48 L910.951 680.48 L910.392 680.48 L909.833 680.48 L909.273 680.48 L908.714 680.48 L908.155 680.48 L907.596 680.48 L907.036 680.48 L906.477 680.48 L905.918 680.48 L905.359 680.48 L904.799 680.48 L904.24 680.48 L903.681 680.48 L903.122 680.48 L902.562 680.48 L902.003 680.48 L901.444 680.48 L900.885 680.48 L900.325 680.48 L899.766 680.48 L899.207 680.48 L898.648 680.48 L898.088 680.48 L897.529 680.48 L896.97 680.48 L896.411 680.48 L895.851 680.48 L895.292 680.48 L894.733 680.48 L894.174 680.48 L893.614 680.48 L893.055 680.48 L892.496 680.48 L891.937 680.48 L891.377 680.48 L890.818 680.48 L890.259 680.48 L889.7 680.48 L889.14 680.48 L888.581 680.48 L888.022 680.48 L887.463 680.48 L886.903 680.48 L886.344 680.48 L885.785 680.48 L885.226 680.48 L884.666 680.48 L884.107 680.48 L883.548 680.48 L882.989 680.48 L882.429 680.48 L881.87 680.48 L881.311 680.48 L880.752 680.48 L880.192 680.48 L879.633 680.48 L879.074 680.48 L878.515 680.48 L877.955 680.48 L877.396 680.48 L876.837 680.48 L876.278 680.48 L875.718 680.48 L875.159 680.48 L874.6 680.48 L874.041 680.48 L873.481 680.48 L872.922 680.48 L872.363 680.48 L871.804 680.48 L871.244 680.48 L870.685 680.48 L870.126 680.48 L869.567 680.48 L869.007 680.48 L868.448 680.48 L867.889 680.48 L867.33 680.48 L866.77 680.48 L866.211 680.48 L865.652 680.48 L865.093 680.48 L864.533 680.48 L863.974 680.48 L863.415 680.48 L862.856 680.48 L862.296 680.48 L861.737 680.48 L861.178 680.48 L860.619 680.48 L860.059 680.48 L859.5 680.48 L858.941 680.48 L858.382 680.48 L857.822 680.48 L857.263 680.48 L856.704 680.48 L856.145 680.48 L855.585 680.48 L855.026 680.48 L854.467 680.48 L853.908 680.48 L853.348 680.48 L852.789 680.48 L852.23 680.48 L851.671 680.48 L851.111 680.48 L850.552 680.48 L849.993 680.48 L849.434 680.48 L848.874 680.48 L848.315 680.48 L847.756 680.48 L847.197 680.48 L846.637 680.48 L846.078 680.48 L845.519 680.48 L844.96 680.48 L844.4 680.48 L843.841 680.48 L843.282 680.48 L842.723 680.48 L842.163 680.48 L841.604 680.48 L841.045 680.48 L840.486 680.48 L839.926 680.48 L839.367 680.48 L838.808 680.48 L838.249 680.48 L837.689 680.48 L837.13 680.48 L836.571 680.48 L836.012 680.48 L835.452 680.48 L834.893 680.48 L834.334 680.48 L833.775 680.48 L833.215 680.48 L832.656 680.48 L832.097 680.48 L831.538 680.48 L830.978 680.48 L830.419 680.48 L829.86 680.48 L829.301 680.48 L828.741 680.48 L828.182 680.48 L827.623 680.48 L827.064 680.48 L826.504 680.48 L825.945 680.48 L825.386 680.48 L824.827 680.48 L824.267 680.48 L823.708 680.48 L823.149 680.48 L822.59 680.48 L822.03 680.48 L821.471 680.48 L820.912 680.48 L820.353 680.48 L819.793 680.48 L819.234 680.48 L818.675 680.48 L818.116 680.48 L817.556 680.48 L816.997 680.48 L816.438 680.48 L815.879 680.48 L815.319 680.48 L814.76 680.48 L814.201 680.48 L813.642 680.48 L813.082 680.48 L812.523 680.48 L811.964 680.48 L811.405 680.48 L810.845 680.48 L810.286 680.48 L809.727 680.48 L809.168 680.48 L808.608 680.48 L808.049 680.48 L807.49 680.48 L806.931 680.48 L806.371 680.48 L805.812 680.48 L805.253 680.48 L804.693 680.48 L804.134 680.48 L803.575 680.48 L803.016 680.48 L802.456 680.48 L801.897 680.48 L801.338 680.48 L800.779 680.48 L800.219 680.48 L799.66 680.48 L799.101 680.48 L798.542 680.48 L797.982 680.48 L797.423 680.48 L796.864 680.48 L796.305 680.48 L795.745 680.48 L795.186 680.48 L794.627 680.48 L794.068 680.48 L793.508 680.48 L792.949 680.48 L792.39 680.48 L791.831 680.48 L791.271 680.48 L790.712 680.48 L790.153 680.48 L789.594 680.48 L789.034 680.48 L788.475 680.48 L787.916 680.48 L787.357 680.48 L786.797 680.48 L786.238 680.48 L785.679 680.48 L785.12 680.48 L784.56 680.48 L784.001 680.48 L783.442 680.48 L782.883 680.48 L782.323 680.48 L781.764 680.48 L781.205 680.48 L780.646 680.48 L780.086 680.48 L779.527 680.48 L778.968 680.48 L778.409 680.48 L777.849 680.48 L777.29 680.48 L776.731 680.48 L776.172 680.48 L775.612 680.48 L775.053 680.48 L774.494 680.48 L773.935 680.48 L773.375 680.48 L772.816 680.48 L772.257 680.48 L771.698 680.48 L771.138 680.48 L770.579 680.48 L770.02 680.48 L769.461 680.48 L768.901 680.48 L768.342 680.48 L767.783 680.48 L767.224 680.48 L766.664 680.48 L766.105 680.48 L765.546 680.48 L764.987 680.48 L764.427 680.48 L763.868 680.48 L763.309 680.48 L762.75 680.48 L762.19 680.48 L761.631 680.48 L761.072 680.48 L760.513 680.48 L759.953 680.48 L759.394 680.48 L758.835 680.48 L758.276 680.48 L757.716 680.48 L757.157 680.48 L756.598 680.48 L756.039 680.48 L755.479 680.48 L754.92 680.48 L754.361 680.48 L753.802 680.48 L753.242 680.48 L752.683 680.48 L752.124 680.48 L751.565 680.48 L751.005 680.48 L750.446 680.48 L749.887 680.48 L749.328 680.48 L748.768 680.48 L748.209 680.48 L747.65 680.48 L747.091 680.48 L746.531 680.48 L745.972 680.48 L745.413 680.48 L744.854 680.48 L744.294 680.48 L743.735 680.48 L743.176 680.48 L742.617 680.48 L742.057 680.48 L741.498 680.48 L740.939 680.48 L740.38 680.48 L739.82 680.48 L739.261 680.48 L738.702 680.48 L738.143 680.48 L737.583 680.48 L737.024 680.48 L736.465 680.48 L735.906 680.48 L735.346 680.48 L734.787 680.48 L734.228 680.48 L733.669 680.48 L733.109 680.48 L732.55 680.48 L731.991 680.48 L731.432 680.48 L730.872 680.48 L730.313 680.48 L729.754 680.48 L729.195 680.48 L728.635 680.48 L728.076 680.48 L727.517 680.48 L726.958 680.48 L726.398 680.48 L725.839 680.48 L725.28 680.48 L724.721 680.48 L724.161 680.48 L723.602 680.48 L723.043 680.48 L722.484 680.48 L721.924 680.48 L721.365 680.48 L720.806 680.48 L720.247 680.48  Z\" fill=\"#e26f46\" fill-rule=\"evenodd\" fill-opacity=\"0.5\"/>\n<polyline clip-path=\"url(#clip783)\" style=\"stroke:#e26f46; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"720.247,685.294 720.806,685.294 721.365,685.294 721.924,685.294 722.484,685.294 723.043,685.294 723.602,685.294 724.161,685.294 724.721,685.294 725.28,685.294 725.839,685.294 726.398,685.294 726.958,685.294 727.517,685.294 728.076,685.294 728.635,685.294 729.195,685.294 729.754,685.294 730.313,685.294 730.872,685.294 731.432,685.294 731.991,685.294 732.55,685.294 733.109,685.294 733.669,685.294 734.228,685.294 734.787,685.294 735.346,685.294 735.906,685.294 736.465,685.294 737.024,685.294 737.583,685.294 738.143,685.294 738.702,685.294 739.261,685.294 739.82,685.294 740.38,685.294 740.939,685.294 741.498,685.294 742.057,685.294 742.617,685.294 743.176,685.294 743.735,685.294 744.294,685.294 744.854,685.294 745.413,685.294 745.972,685.294 746.531,685.294 747.091,685.294 747.65,685.294 748.209,685.294 748.768,685.294 749.328,685.294 749.887,685.294 750.446,685.294 751.005,685.294 751.565,685.294 752.124,685.294 752.683,685.294 753.242,685.294 753.802,685.294 754.361,685.294 754.92,685.294 755.479,685.294 756.039,685.294 756.598,685.294 757.157,685.294 757.716,685.294 758.276,685.294 758.835,685.294 759.394,685.294 759.953,685.294 760.513,685.294 761.072,685.294 761.631,685.294 762.19,685.294 762.75,685.294 763.309,685.294 763.868,685.294 764.427,685.294 764.987,685.294 765.546,685.294 766.105,685.294 766.664,685.294 767.224,685.294 767.783,685.294 768.342,685.294 768.901,685.294 769.461,685.294 770.02,685.294 770.579,685.294 771.138,685.294 771.698,685.294 772.257,685.294 772.816,685.294 773.375,685.294 773.935,685.294 774.494,685.294 775.053,685.294 775.612,685.294 776.172,685.294 776.731,685.294 777.29,685.294 777.849,685.294 778.409,685.294 778.968,685.294 779.527,685.294 780.086,685.294 780.646,685.294 781.205,685.294 781.764,685.294 782.323,685.294 782.883,685.294 783.442,685.294 784.001,685.294 784.56,685.294 785.12,685.294 785.679,685.294 786.238,685.294 786.797,685.294 787.357,685.294 787.916,685.294 788.475,685.294 789.034,685.294 789.594,685.294 790.153,685.294 790.712,685.294 791.271,685.294 791.831,685.294 792.39,685.294 792.949,685.294 793.508,685.294 794.068,685.294 794.627,685.294 795.186,685.294 795.745,685.294 796.305,685.294 796.864,685.294 797.423,685.294 797.982,685.294 798.542,685.294 799.101,685.294 799.66,685.294 800.219,685.294 800.779,685.294 801.338,685.294 801.897,685.294 802.456,685.294 803.016,685.294 803.575,685.294 804.134,685.294 804.693,685.294 805.253,685.294 805.812,685.294 806.371,685.294 806.931,685.294 807.49,685.294 808.049,685.294 808.608,685.294 809.168,685.294 809.727,685.294 810.286,685.294 810.845,685.294 811.405,685.294 811.964,685.294 812.523,685.294 813.082,685.294 813.642,685.294 814.201,685.294 814.76,685.294 815.319,685.294 815.879,685.294 816.438,685.294 816.997,685.294 817.556,685.294 818.116,685.294 818.675,685.294 819.234,685.294 819.793,685.294 820.353,685.294 820.912,685.294 821.471,685.294 822.03,685.294 822.59,685.294 823.149,685.294 823.708,685.294 824.267,685.294 824.827,685.294 825.386,685.294 825.945,685.294 826.504,685.294 827.064,685.294 827.623,685.294 828.182,685.294 828.741,685.294 829.301,685.294 829.86,685.294 830.419,685.294 830.978,685.294 831.538,685.294 832.097,685.294 832.656,685.294 833.215,685.294 833.775,685.294 834.334,685.294 834.893,685.294 835.452,685.294 836.012,685.294 836.571,685.294 837.13,685.294 837.689,685.294 838.249,685.294 838.808,685.294 839.367,685.294 839.926,685.294 840.486,685.294 841.045,685.294 841.604,685.294 842.163,685.294 842.723,685.294 843.282,685.294 843.841,685.294 844.4,685.294 844.96,685.294 845.519,685.294 846.078,685.294 846.637,685.294 847.197,685.294 847.756,685.294 848.315,685.294 848.874,685.294 849.434,685.294 849.993,685.294 850.552,685.294 851.111,685.294 851.671,685.294 852.23,685.294 852.789,685.294 853.348,685.294 853.908,685.294 854.467,685.294 855.026,685.294 855.585,685.294 856.145,685.294 856.704,685.294 857.263,685.294 857.822,685.294 858.382,685.294 858.941,685.294 859.5,685.294 860.059,685.294 860.619,685.294 861.178,685.294 861.737,685.294 862.296,685.294 862.856,685.294 863.415,685.294 863.974,685.294 864.533,685.294 865.093,685.294 865.652,685.294 866.211,685.294 866.77,685.294 867.33,685.294 867.889,685.294 868.448,685.294 869.007,685.294 869.567,685.294 870.126,685.294 870.685,685.294 871.244,685.294 871.804,685.294 872.363,685.294 872.922,685.294 873.481,685.294 874.041,685.294 874.6,685.294 875.159,685.294 875.718,685.294 876.278,685.294 876.837,685.294 877.396,685.294 877.955,685.294 878.515,685.294 879.074,685.294 879.633,685.294 880.192,685.294 880.752,685.294 881.311,685.294 881.87,685.294 882.429,685.294 882.989,685.294 883.548,685.294 884.107,685.294 884.666,685.294 885.226,685.294 885.785,685.294 886.344,685.294 886.903,685.294 887.463,685.294 888.022,685.294 888.581,685.294 889.14,685.294 889.7,685.294 890.259,685.294 890.818,685.294 891.377,685.294 891.937,685.294 892.496,685.294 893.055,685.294 893.614,685.294 894.174,685.294 894.733,685.294 895.292,685.294 895.851,685.294 896.411,685.294 896.97,685.294 897.529,685.294 898.088,685.294 898.648,685.294 899.207,685.294 899.766,685.294 900.325,685.294 900.885,685.294 901.444,685.294 902.003,685.294 902.562,685.294 903.122,685.294 903.681,685.294 904.24,685.294 904.799,685.294 905.359,685.294 905.918,685.294 906.477,685.294 907.036,685.294 907.596,685.294 908.155,685.294 908.714,685.294 909.273,685.294 909.833,685.294 910.392,685.294 910.951,685.294 911.51,685.294 912.07,685.294 912.629,685.294 913.188,685.294 913.747,685.294 914.307,685.294 914.866,685.294 915.425,685.294 915.984,685.294 916.544,685.294 917.103,685.294 917.662,685.294 918.221,685.294 918.781,685.294 919.34,685.294 919.899,685.294 920.458,685.294 921.018,685.294 921.577,685.294 922.136,685.294 922.695,685.294 923.255,685.294 923.814,685.294 924.373,685.294 924.932,685.294 925.492,685.294 926.051,685.294 926.61,685.294 927.169,685.294 927.729,685.294 928.288,685.294 928.847,685.294 929.406,685.294 929.966,685.294 930.525,685.294 931.084,685.294 931.644,685.294 932.203,685.294 932.762,685.294 933.321,685.294 933.881,685.294 934.44,685.294 934.999,685.294 935.558,685.294 936.118,685.294 936.677,685.294 937.236,685.294 937.795,685.294 938.355,685.294 938.914,685.294 939.473,685.294 940.032,685.294 940.592,685.294 941.151,685.294 941.71,685.294 942.269,685.294 942.829,685.294 943.388,685.294 943.947,685.294 944.506,685.294 945.066,685.294 945.625,685.294 946.184,685.294 946.743,685.294 947.303,685.294 947.862,685.294 948.421,685.294 948.98,685.294 949.54,685.294 950.099,685.294 950.658,685.294 951.217,685.294 951.777,685.294 952.336,685.294 952.895,685.294 953.454,685.294 954.014,685.294 954.573,685.294 955.132,685.294 955.691,685.294 956.251,685.294 956.81,685.294 957.369,685.294 957.928,685.294 958.488,685.294 959.047,685.294 959.606,685.294 960.165,685.294 960.725,685.294 961.284,685.294 961.843,685.294 962.402,685.294 962.962,685.294 963.521,685.294 964.08,685.294 964.639,685.294 965.199,685.294 965.758,685.294 966.317,685.294 966.876,685.294 967.436,685.294 967.995,685.294 968.554,685.294 969.113,685.294 969.673,685.294 970.232,685.294 970.791,685.294 971.35,685.294 971.91,685.294 972.469,685.294 973.028,685.294 973.587,685.294 974.147,685.294 974.706,685.294 975.265,685.294 975.824,685.294 976.384,685.294 976.943,685.294 977.502,685.294 978.061,685.294 978.621,685.294 979.18,685.294 979.739,685.294 980.298,685.294 980.858,685.294 981.417,685.294 981.976,685.294 982.535,685.294 983.095,685.294 983.654,685.294 984.213,685.294 984.772,685.294 985.332,685.294 985.891,685.294 986.45,685.294 987.009,685.294 987.569,685.294 988.128,685.294 988.687,685.294 989.246,685.294 989.806,685.294 990.365,685.294 990.924,685.294 991.483,685.294 992.043,685.294 992.602,685.294 993.161,685.294 993.72,685.294 994.28,685.294 994.839,685.294 995.398,685.294 995.957,685.294 996.517,685.294 997.076,685.294 997.635,685.294 998.194,685.294 998.754,685.294 999.313,685.294 999.872,685.294 1000.43,685.294 1000.99,685.294 1001.55,685.294 1002.11,685.294 1002.67,685.294 1003.23,685.294 1003.79,685.294 1004.35,685.294 1004.91,685.294 1005.46,685.294 1006.02,685.294 1006.58,685.294 1007.14,685.294 1007.7,685.294 1008.26,685.294 1008.82,685.294 1009.38,685.294 1009.94,685.294 1010.5,685.294 1011.06,685.294 1011.62,685.294 1012.18,685.294 1012.73,685.294 1013.29,685.294 1013.85,685.294 1014.41,685.294 1014.97,685.294 1015.53,685.294 1016.09,685.294 1016.65,685.294 1017.21,685.294 1017.77,685.294 1018.33,685.294 1018.89,685.294 1019.45,685.294 1020.01,685.294 1020.56,685.294 1021.12,685.294 1021.68,685.294 1022.24,685.294 1022.8,685.294 1023.36,685.294 1023.92,685.294 1024.48,685.294 1025.04,685.294 1025.6,685.294 1026.16,685.294 1026.72,685.294 1027.28,685.294 1027.83,685.294 1028.39,685.294 1028.95,685.294 1029.51,685.294 1030.07,685.294 1030.63,685.294 1031.19,685.294 1031.75,685.294 1032.31,685.294 1032.87,685.294 1033.43,685.294 1033.99,685.294 1034.55,685.294 1035.1,685.294 1035.66,685.294 1036.22,685.294 1036.78,685.294 1037.34,685.294 1037.9,685.294 1038.46,685.294 1039.02,685.294 1039.58,685.294 1040.14,685.294 1040.7,685.294 1041.26,685.294 1041.82,685.294 1042.38,685.294 1042.93,685.294 1043.49,685.294 1044.05,685.294 1044.61,685.294 1045.17,685.294 1045.73,685.294 1046.29,685.294 1046.85,685.294 1047.41,685.294 1047.97,685.294 1048.53,685.294 1049.09,685.294 1049.65,685.294 1050.2,685.294 1050.76,685.294 1051.32,685.294 1051.88,685.294 1052.44,685.294 1053,685.294 1053.56,685.294 1054.12,685.294 1054.68,685.294 1055.24,685.294 1055.8,685.294 1056.36,685.294 1056.92,685.294 1057.48,685.294 1058.03,685.294 1058.59,685.294 1059.15,685.294 1059.71,685.294 1060.27,685.294 1060.83,685.294 1061.39,685.294 1061.95,685.294 1062.51,685.294 1063.07,685.294 1063.63,685.294 1064.19,685.294 1064.75,685.294 1065.3,685.294 1065.86,685.294 1066.42,685.294 1066.98,685.294 1067.54,685.294 1068.1,685.294 1068.66,685.294 1069.22,685.294 1069.78,685.294 1070.34,685.294 1070.9,685.294 1071.46,685.294 1072.02,685.294 1072.57,685.294 1073.13,685.294 1073.69,685.294 1074.25,685.294 1074.81,685.294 1075.37,685.294 1075.93,685.294 1076.49,685.294 1077.05,685.294 1077.61,685.294 1078.17,685.294 1078.73,685.294 1079.29,685.294 1079.85,685.294 1080.4,685.294 1080.96,685.294 1081.52,685.294 1082.08,685.294 1082.64,685.294 1083.2,685.294 1083.76,685.294 1084.32,685.294 1084.88,685.294 1085.44,685.294 1086,685.294 1086.56,685.294 1087.12,685.294 1087.67,685.294 1088.23,685.294 1088.79,685.294 1089.35,685.294 1089.91,685.294 1090.47,685.294 1091.03,685.294 1091.59,685.294 1092.15,685.294 1092.71,685.294 1093.27,685.294 1093.83,685.294 1094.39,685.294 1094.94,685.294 1095.5,685.294 1096.06,685.294 1096.62,685.294 1097.18,685.294 1097.74,685.294 1098.3,685.294 1098.86,685.294 1099.42,685.294 1099.98,685.294 1100.54,685.294 1101.1,685.294 1101.66,685.294 1102.22,685.294 1102.77,685.294 1103.33,685.294 1103.89,685.294 1104.45,685.294 1105.01,685.294 1105.57,685.294 1106.13,685.294 1106.69,685.294 1107.25,685.294 1107.81,685.294 1108.37,685.294 1108.93,685.294 1109.49,685.294 1110.04,685.294 1110.6,685.294 1111.16,685.294 1111.72,685.294 1112.28,685.294 1112.84,685.294 1113.4,685.294 1113.96,685.294 1114.52,685.294 1115.08,685.294 1115.64,685.294 1116.2,685.294 1116.76,685.294 1117.31,685.294 1117.87,685.294 1118.43,685.294 1118.99,685.294 1119.55,685.294 1120.11,685.294 1120.67,685.294 1121.23,685.294 1121.79,685.294 1122.35,685.294 1122.91,685.294 1123.47,685.294 1124.03,685.294 1124.59,685.294 1125.14,685.294 1125.7,685.294 1126.26,685.294 1126.82,685.294 1127.38,685.294 1127.94,685.294 1128.5,685.294 1129.06,685.294 1129.62,685.294 1130.18,685.294 1130.74,685.294 1131.3,685.294 1131.86,685.294 1132.41,685.294 1132.97,685.294 1133.53,685.294 1134.09,685.294 1134.65,685.294 1135.21,685.294 1135.77,685.294 1136.33,685.294 1136.89,685.294 1137.45,685.294 1138.01,685.294 1138.57,685.294 1139.13,685.294 1139.68,685.294 1140.24,685.294 1140.8,685.294 1141.36,685.294 1141.92,685.294 1142.48,685.294 1143.04,685.294 1143.6,685.294 1144.16,685.294 1144.72,685.294 1145.28,685.294 1145.84,685.294 1146.4,685.294 1146.96,685.294 1147.51,685.294 1148.07,685.294 1148.63,685.294 1149.19,685.294 1149.75,685.294 1150.31,685.294 1150.87,685.294 1151.43,685.294 1151.99,685.294 1152.55,685.294 1153.11,685.294 1153.67,685.294 1154.23,685.294 1154.78,685.294 1155.34,685.294 1155.9,685.294 1156.46,685.294 1157.02,685.294 1157.58,685.294 1158.14,685.294 1158.7,685.294 1159.26,685.294 1159.82,685.294 1160.38,685.294 1160.94,685.294 1161.5,685.294 1162.05,685.294 1162.61,685.294 1163.17,685.294 1163.73,685.294 1164.29,685.294 1164.85,685.294 1165.41,685.294 1165.97,685.294 1166.53,685.294 1167.09,685.294 1167.65,685.294 1168.21,685.294 1168.77,685.294 1169.33,685.294 1169.88,685.294 1170.44,685.294 1171,685.294 1171.56,685.294 1172.12,685.294 1172.68,685.294 1173.24,685.294 1173.8,685.294 1174.36,685.294 1174.92,685.294 1175.48,685.294 1176.04,685.294 1176.6,685.294 1177.15,685.294 1177.71,685.294 1178.27,685.294 1178.83,685.294 1179.39,685.294 1179.95,685.294 1180.51,685.294 1181.07,685.294 1181.63,685.294 1182.19,685.294 1182.75,685.294 1183.31,685.294 1183.87,685.294 1184.43,685.294 1184.98,685.294 1185.54,685.294 1186.1,685.294 1186.66,685.294 1187.22,685.294 1187.78,685.294 1188.34,685.294 1188.9,685.294 1189.46,685.294 1190.02,685.294 1190.58,685.294 1191.14,685.294 1191.7,685.294 1192.25,685.294 1192.81,685.294 1193.37,685.294 1193.93,685.294 1194.49,685.294 1195.05,685.294 1195.61,685.294 1196.17,685.294 1196.73,685.294 1197.29,685.294 1197.85,685.294 1198.41,685.294 1198.97,685.294 1199.52,685.294 1200.08,685.294 1200.64,685.294 1201.2,685.294 1201.76,685.294 1202.32,685.294 1202.88,685.294 1203.44,685.294 1204,685.294 1204.56,685.294 1205.12,685.294 1205.68,685.294 1206.24,685.294 1206.8,685.294 1207.35,685.294 1207.91,685.294 1208.47,685.294 1209.03,685.294 1209.59,685.294 1210.15,685.294 1210.71,685.294 1211.27,685.294 1211.83,685.294 1212.39,685.294 1212.95,685.294 1213.51,685.294 1214.07,685.294 1214.62,685.294 1215.18,685.294 1215.74,685.294 1216.3,685.294 1216.86,685.294 1217.42,685.294 1217.98,685.294 1218.54,685.294 1219.1,685.294 1219.66,685.294 1220.22,685.294 1220.78,685.294 1221.34,685.294 1221.89,685.294 1222.45,685.294 1223.01,685.294 1223.57,685.294 1224.13,685.294 1224.69,685.294 1225.25,685.294 1225.81,685.294 1226.37,685.294 1226.93,685.294 1227.49,685.294 1228.05,685.294 1228.61,685.294 1229.17,685.294 1229.72,685.294 1230.28,685.294 1230.84,685.294 1231.4,685.294 1231.96,685.294 1232.52,685.294 1233.08,685.294 1233.64,685.294 1234.2,685.294 1234.76,685.294 1235.32,685.294 1235.88,685.294 1236.44,685.294 1236.99,685.294 1237.55,685.294 1238.11,685.294 1238.67,685.294 1239.23,685.294 1239.79,685.294 1240.35,685.294 1240.91,685.294 1241.47,685.294 1242.03,685.294 1242.59,685.294 1243.15,685.294 1243.71,685.294 1244.26,685.294 1244.82,685.294 1245.38,685.294 1245.94,685.294 1246.5,685.294 1247.06,685.294 1247.62,685.294 1248.18,685.294 1248.74,685.294 1249.3,685.294 1249.86,685.294 1250.42,685.294 1250.98,685.294 1251.54,685.294 1252.09,685.294 1252.65,685.294 1253.21,685.294 1253.77,685.294 1254.33,685.294 1254.89,685.294 1255.45,685.294 1256.01,685.294 1256.57,685.294 1257.13,685.294 1257.69,685.294 1258.25,685.294 1258.81,685.294 1259.36,685.294 1259.92,685.294 1260.48,685.294 1261.04,685.294 1261.6,685.294 1262.16,685.294 1262.72,685.294 1263.28,685.294 1263.84,685.294 1264.4,685.294 1264.96,685.294 1265.52,685.294 1266.08,685.294 1266.63,685.294 1267.19,685.294 1267.75,685.294 1268.31,685.294 1268.87,685.294 1269.43,685.294 1269.99,685.294 1270.55,685.294 1271.11,685.294 1271.67,685.294 1272.23,685.294 1272.79,685.294 1273.35,685.294 1273.91,685.294 1274.46,685.294 1275.02,685.294 1275.58,685.294 1276.14,685.294 1276.7,685.294 1277.26,685.294 1277.82,685.294 1278.38,685.294 1278.94,685.294 1279.5,685.294 1280.06,685.294 1280.62,685.294 1281.18,685.294 1281.73,685.294 1282.29,685.294 1282.85,685.294 1283.41,685.294 1283.97,685.294 1284.53,685.294 1285.09,685.294 1285.65,685.294 1286.21,685.294 1286.77,685.294 1287.33,685.294 1287.89,685.294 1288.45,685.294 1289,685.294 1289.56,685.294 1290.12,685.294 1290.68,685.294 1291.24,685.294 1291.8,685.294 1292.36,685.294 1292.92,685.294 1293.48,685.294 1294.04,685.294 1294.6,685.294 1295.16,685.294 1295.72,685.294 1296.28,685.294 1296.83,685.294 1297.39,685.294 1297.95,685.294 1298.51,685.294 1299.07,685.294 1299.63,685.294 1300.19,685.294 1300.75,685.294 1301.31,685.294 1301.87,685.294 1302.43,685.294 1302.99,685.294 1303.55,685.294 1304.1,685.294 1304.66,685.294 1305.22,685.294 1305.78,685.294 1306.34,685.294 1306.9,685.294 1307.46,685.294 1308.02,685.294 1308.58,685.294 1309.14,685.294 1309.7,685.294 1310.26,685.294 1310.82,685.294 1311.38,685.294 1311.93,685.294 1312.49,685.294 1313.05,685.294 1313.61,685.294 1314.17,685.294 1314.73,685.294 1315.29,685.294 1315.85,685.294 1316.41,685.294 1316.97,685.294 1317.53,685.294 1318.09,685.294 1318.65,685.294 1319.2,685.294 1319.76,685.294 1320.32,685.294 1320.88,685.294 1321.44,685.294 1322,685.294 1322.56,685.294 1323.12,685.294 1323.68,685.294 1324.24,685.294 1324.8,685.294 1325.36,685.294 1325.92,685.294 1326.47,685.294 1327.03,685.294 1327.59,685.294 1328.15,685.294 1328.71,685.294 1329.27,685.294 1329.83,685.294 1330.39,685.294 1330.95,685.294 1331.51,685.294 1332.07,685.294 1332.63,685.294 1333.19,685.294 1333.75,685.294 1334.3,685.294 1334.86,685.294 1335.42,685.294 1335.98,685.294 1336.54,685.294 1337.1,685.294 1337.66,685.294 1338.22,685.294 1338.78,685.294 1339.34,685.294 1339.9,685.294 1340.46,685.294 1341.02,685.294 1341.57,685.294 1342.13,685.294 1342.69,685.294 1343.25,685.294 1343.81,685.294 1344.37,685.294 1344.93,685.294 1345.49,685.294 1346.05,685.294 1346.61,685.294 1347.17,685.294 1347.73,685.294 1348.29,685.294 1348.84,685.294 1349.4,685.294 1349.96,685.294 1350.52,685.294 1351.08,685.294 1351.64,685.294 1352.2,685.294 1352.76,685.294 1353.32,685.294 1353.88,685.294 1354.44,685.294 1355,685.294 1355.56,685.294 1356.12,685.294 1356.67,685.294 1357.23,685.294 1357.79,685.294 1358.35,685.294 1358.91,685.294 1359.47,685.294 1360.03,685.294 1360.59,685.294 1361.15,685.294 1361.71,685.294 1362.27,685.294 1362.83,685.294 1363.39,685.294 1363.94,685.294 1364.5,685.294 1365.06,685.294 1365.62,685.294 1366.18,685.294 1366.74,685.294 1367.3,685.294 1367.86,685.294 1368.42,685.294 1368.98,685.294 1369.54,685.294 1370.1,685.294 1370.66,685.294 1371.21,685.294 1371.77,685.294 1372.33,685.294 1372.89,685.294 1373.45,685.294 1374.01,685.294 1374.57,685.294 1375.13,685.294 1375.69,685.294 1376.25,685.294 1376.81,685.294 1377.37,685.294 1377.93,685.294 1378.49,685.294 1379.04,685.294 1379.6,685.294 1380.16,685.294 1380.72,685.294 1381.28,685.294 1381.84,685.294 1382.4,685.294 1382.96,685.294 1383.52,685.294 1384.08,685.294 1384.64,685.294 1385.2,685.294 1385.76,685.294 1386.31,685.294 1386.87,685.294 1387.43,685.294 1387.99,685.294 1388.55,685.294 1389.11,685.294 1389.67,685.294 1390.23,685.294 1390.79,685.294 1391.35,685.294 1391.91,685.294 1392.47,685.294 1393.03,685.294 1393.58,685.294 1394.14,685.294 1394.7,685.294 1395.26,685.294 1395.82,685.294 1396.38,685.294 1396.94,685.294 1397.5,685.294 1398.06,685.294 1398.62,685.294 1399.18,685.294 1399.74,685.294 1400.3,685.294 1400.86,685.294 1401.41,685.294 1401.97,685.294 1402.53,685.294 1403.09,685.294 1403.65,685.294 1404.21,685.294 1404.77,685.294 1405.33,685.294 1405.89,685.294 1406.45,685.294 1407.01,685.294 1407.57,685.294 1408.13,685.294 1408.68,685.294 1409.24,685.294 1409.8,685.294 1410.36,685.294 1410.92,685.294 1411.48,685.294 1412.04,685.294 1412.6,685.294 1413.16,685.294 1413.72,685.294 1414.28,685.294 1414.84,685.294 1415.4,685.294 1415.95,685.294 1416.51,685.294 1417.07,685.294 1417.63,685.294 1418.19,685.294 1418.75,685.294 1419.31,685.294 1419.87,685.294 1420.43,685.294 1420.99,685.294 1421.55,685.294 1422.11,685.294 1422.67,685.294 1423.23,685.294 1423.78,685.294 1424.34,685.294 1424.9,685.294 1425.46,685.294 1426.02,685.294 1426.58,685.294 1427.14,685.294 1427.7,685.294 1428.26,685.294 1428.82,685.294 1429.38,685.294 1429.94,685.294 1430.5,685.294 1431.05,685.294 1431.61,685.294 1432.17,685.294 1432.73,685.294 1433.29,685.294 1433.85,685.294 1434.41,685.294 1434.97,685.294 1435.53,685.294 1436.09,685.294 1436.65,685.294 1437.21,685.294 1437.77,685.294 1438.33,685.294 1438.88,685.294 1439.44,685.294 1440,685.294 1440.56,685.294 1441.12,685.294 1441.68,685.294 1442.24,685.294 1442.8,685.294 1443.36,685.294 1443.92,685.294 1444.48,685.294 1445.04,685.294 1445.6,685.294 1446.15,685.294 1446.71,685.294 1447.27,685.294 1447.83,685.294 1448.39,685.294 1448.95,685.294 1449.51,685.294 1450.07,685.294 1450.63,685.294 1451.19,685.294 1451.75,685.294 1452.31,685.294 1452.87,685.294 1453.42,685.294 1453.98,685.294 1454.54,685.294 1455.1,685.294 1455.66,685.294 1456.22,685.294 1456.78,685.294 1457.34,685.294 1457.9,685.294 1458.46,685.294 1459.02,685.294 1459.58,685.294 1460.14,685.294 1460.7,685.294 1461.25,685.294 1461.81,685.294 1462.37,685.294 1462.93,685.294 1463.49,685.294 1464.05,685.294 1464.61,685.294 1465.17,685.294 1465.73,685.294 1466.29,685.294 1466.85,685.294 1467.41,685.294 1467.97,685.294 1468.52,685.294 1469.08,685.294 1469.64,685.294 1470.2,685.294 1470.76,685.294 1471.32,685.294 1471.88,685.294 1472.44,685.294 1473,685.294 1473.56,685.294 1474.12,685.294 1474.68,685.294 1475.24,685.294 1475.79,685.294 1476.35,685.294 1476.91,685.294 1477.47,685.294 1478.03,685.294 1478.59,685.294 1479.15,685.294 1479.71,685.294 1480.27,685.294 1480.83,685.294 1481.39,685.294 1481.95,685.294 1482.51,685.294 1483.07,685.294 1483.62,685.294 1484.18,685.294 1484.74,685.294 1485.3,685.294 1485.86,685.294 1486.42,685.294 1486.98,685.294 1487.54,685.294 1488.1,685.294 1488.66,685.294 1489.22,685.294 1489.78,685.294 1490.34,685.294 1490.89,685.294 1491.45,685.294 1492.01,685.294 1492.57,685.294 1493.13,685.294 1493.69,685.294 1494.25,685.294 1494.81,685.294 1495.37,685.294 1495.93,685.294 1496.49,685.294 1497.05,685.294 1497.61,685.294 1498.16,685.294 1498.72,685.294 1499.28,685.294 1499.84,685.294 1500.4,685.294 1500.96,685.294 1501.52,685.294 1502.08,685.294 1502.64,685.294 1503.2,685.294 1503.76,685.294 1504.32,685.294 1504.88,685.294 1505.44,685.294 1505.99,685.294 1506.55,685.294 1507.11,685.294 1507.67,685.294 1508.23,685.294 1508.79,685.294 1509.35,685.294 1509.91,685.294 1510.47,685.294 1511.03,685.294 1511.59,685.294 1512.15,685.294 1512.71,685.294 1513.26,685.294 1513.82,685.294 1514.38,685.294 1514.94,685.294 1515.5,685.294 1516.06,685.294 1516.62,685.294 1517.18,685.294 1517.74,685.294 1518.3,685.294 1518.86,685.294 1519.42,685.294 1519.98,685.294 1520.53,685.294 1521.09,685.294 1521.65,685.294 1522.21,685.294 1522.77,685.294 1523.33,685.294 1523.89,685.294 1524.45,685.294 1525.01,685.294 1525.57,685.294 1526.13,685.294 1526.69,685.294 1527.25,685.294 1527.81,685.294 1528.36,685.294 1528.92,685.294 1529.48,685.294 1530.04,685.294 1530.6,685.294 1531.16,685.294 1531.72,685.294 1532.28,685.294 1532.84,685.294 1533.4,685.294 1533.96,685.294 1534.52,685.294 1535.08,685.294 1535.63,685.294 1536.19,685.294 1536.75,685.294 1537.31,685.294 1537.87,685.294 1538.43,685.294 1538.99,685.294 1539.55,685.294 1540.11,685.294 1540.67,685.294 1541.23,685.294 1541.79,685.294 1542.35,685.294 1542.9,685.294 1543.46,685.294 1544.02,685.294 1544.58,685.294 1545.14,685.294 1545.7,685.294 1546.26,685.294 1546.82,685.294 1547.38,685.294 1547.94,685.294 1548.5,685.294 1549.06,685.294 1549.62,685.294 1550.18,685.294 1550.73,685.294 1551.29,685.294 1551.85,685.294 1552.41,685.294 1552.97,685.294 1553.53,685.294 1554.09,685.294 1554.65,685.294 1555.21,685.294 1555.77,685.294 1556.33,685.294 1556.89,685.294 1557.45,685.294 1558,685.294 1558.56,685.294 1559.12,685.294 1559.68,685.294 1560.24,685.294 1560.8,685.294 1561.36,685.294 1561.92,685.294 1562.48,685.294 1563.04,685.294 1563.6,685.294 1564.16,685.294 1564.72,685.294 1565.28,685.294 1565.83,685.294 1566.39,685.294 1566.95,685.294 1567.51,685.294 1568.07,685.294 1568.63,685.294 1569.19,685.294 1569.75,685.294 1570.31,685.294 1570.87,685.294 1571.43,685.294 1571.99,685.294 1572.55,685.294 1573.1,685.294 1573.66,685.294 1574.22,685.294 1574.78,685.294 1575.34,685.294 1575.9,685.294 1576.46,685.294 1577.02,685.294 1577.58,685.294 1578.14,685.294 1578.7,685.294 1579.26,685.294 1579.82,685.294 1580.37,685.294 1580.93,685.294 1581.49,685.294 1582.05,685.294 1582.61,685.294 1583.17,685.294 1583.73,685.294 1584.29,685.294 1584.85,685.294 1585.41,685.294 1585.97,685.294 1586.53,685.294 1587.09,685.294 1587.65,685.294 1588.2,685.294 1588.76,685.294 1589.32,685.294 1589.88,685.294 1590.44,685.294 1591,685.294 1591.56,685.294 1592.12,685.294 1592.68,685.294 1593.24,685.294 1593.8,685.294 1594.36,685.294 1594.92,685.294 1595.47,685.294 1596.03,685.294 1596.59,685.294 1597.15,685.294 1597.71,685.294 1598.27,685.294 1598.83,685.294 1599.39,685.294 1599.95,685.294 1600.51,685.294 1601.07,685.294 1601.63,685.294 1602.19,685.294 1602.74,685.294 1603.3,685.294 1603.86,685.294 1604.42,685.294 1604.98,685.294 1605.54,685.294 1606.1,685.294 1606.66,685.294 1607.22,685.294 1607.78,685.294 1608.34,685.294 1608.9,685.294 1609.46,685.294 1610.02,685.294 1610.57,685.294 1611.13,685.294 1611.69,685.294 1612.25,685.294 1612.81,685.294 1613.37,685.294 1613.93,685.294 1614.49,685.294 1615.05,685.294 1615.61,685.294 1616.17,685.294 1616.73,685.294 1617.29,685.294 1617.84,685.294 1618.4,685.294 1618.96,685.294 1619.52,685.294 1620.08,685.294 1620.64,685.294 1621.2,685.294 1621.76,685.294 1622.32,685.294 1622.88,685.294 1623.44,685.294 1624,685.294 1624.56,685.294 1625.11,685.294 1625.67,685.294 1626.23,685.294 1626.79,685.294 1627.35,685.294 1627.91,685.294 1628.47,685.294 1629.03,685.294 1629.59,685.294 1630.15,685.294 1630.71,685.294 1631.27,685.294 1631.83,685.294 1632.39,685.294 1632.94,685.294 1633.5,685.294 1634.06,685.294 1634.62,685.294 1635.18,685.294 1635.74,685.294 1636.3,685.294 1636.86,685.294 1637.42,685.294 1637.98,685.294 1638.54,685.294 1639.1,685.294 1639.66,685.294 1640.21,685.294 1640.77,685.294 1641.33,685.294 1641.89,685.294 1642.45,685.294 1643.01,685.294 1643.57,685.294 1644.13,685.294 1644.69,685.294 1645.25,685.294 1645.81,685.294 1646.37,685.294 1646.93,685.294 1647.48,685.294 1648.04,685.294 1648.6,685.294 1649.16,685.294 1649.72,685.294 1650.28,685.294 1650.84,685.294 1651.4,685.294 1651.96,685.294 1652.52,685.294 1653.08,685.294 1653.64,685.294 1654.2,685.294 1654.76,685.294 1655.31,685.294 1655.87,685.294 1656.43,685.294 1656.99,685.294 1657.55,685.294 1658.11,685.294 1658.67,685.294 1659.23,685.294 1659.79,685.294 1660.35,685.294 1660.91,685.294 1661.47,685.294 1662.03,685.294 1662.58,685.294 1663.14,685.294 1663.7,685.294 1664.26,685.294 1664.82,685.294 1665.38,685.294 1665.94,685.294 1666.5,685.294 1667.06,685.294 1667.62,685.294 1668.18,685.294 1668.74,685.294 1669.3,685.294 1669.85,685.294 1670.41,685.294 1670.97,685.294 1671.53,685.294 1672.09,685.294 1672.65,685.294 1673.21,685.294 1673.77,685.294 1674.33,685.294 1674.89,685.294 1675.45,685.294 1676.01,685.294 1676.57,685.294 1677.13,685.294 1677.68,685.294 1678.24,685.294 1678.8,685.294 1679.36,685.294 1679.92,685.294 1680.48,685.294 1681.04,685.294 1681.6,685.294 1682.16,685.294 1682.72,685.294 1683.28,685.294 1683.84,685.294 1684.4,685.294 1684.95,685.294 1685.51,685.294 1686.07,685.294 1686.63,685.294 1687.19,685.294 1687.75,685.294 1688.31,685.294 1688.87,685.294 1689.43,685.294 1689.99,685.294 1690.55,685.294 1691.11,685.294 1691.67,685.294 1692.23,685.294 1692.78,685.294 1693.34,685.294 1693.9,685.294 1694.46,685.294 1695.02,685.294 1695.58,685.294 1696.14,685.294 1696.7,685.294 1697.26,685.294 1697.82,685.294 1698.38,685.294 1698.94,685.294 1699.5,685.294 1700.05,685.294 1700.61,685.294 1701.17,685.294 1701.73,685.294 1702.29,685.294 1702.85,685.294 1703.41,685.294 1703.97,685.294 1704.53,685.294 1705.09,685.294 1705.65,685.294 1706.21,685.294 1706.77,685.294 1707.32,685.294 1707.88,685.294 1708.44,685.294 1709,685.294 1709.56,685.294 1710.12,685.294 1710.68,685.294 1711.24,685.294 1711.8,685.294 1712.36,685.294 1712.92,685.294 1713.48,685.294 1714.04,685.294 1714.6,685.294 1715.15,685.294 1715.71,685.294 1716.27,685.294 1716.83,685.294 1717.39,685.294 1717.95,685.294 1718.51,685.294 1719.07,685.294 1719.63,685.294 1720.19,685.294 1720.75,685.294 1721.31,685.294 1721.87,685.294 1722.42,685.294 1722.98,685.294 1723.54,685.294 1724.1,685.294 1724.66,685.294 1725.22,685.294 1725.78,685.294 1726.34,685.294 1726.9,685.294 1727.46,685.294 1728.02,685.294 1728.58,685.294 1729.14,685.294 1729.69,685.294 1730.25,685.294 1730.81,685.294 1731.37,685.294 1731.93,685.294 1732.49,685.294 1733.05,685.294 1733.61,685.294 1734.17,685.294 1734.73,685.294 1735.29,685.294 1735.85,685.294 1736.41,685.294 1736.97,685.294 1737.52,685.294 1738.08,685.294 1738.64,685.294 1739.2,685.294 1739.76,685.294 1740.32,685.294 1740.88,685.294 1741.44,685.294 1742,685.294 1742.56,685.294 1743.12,685.294 1743.68,685.294 1744.24,685.294 1744.79,685.294 1745.35,685.294 1745.91,685.294 1746.47,685.294 1747.03,685.294 1747.59,685.294 1748.15,685.294 1748.71,685.294 1749.27,685.294 1749.83,685.294 1750.39,685.294 1750.95,685.294 1751.51,685.294 1752.06,685.294 1752.62,685.294 1753.18,685.294 1753.74,685.294 1754.3,685.294 1754.86,685.294 1755.42,685.294 1755.98,685.294 1756.54,685.294 1757.1,685.294 1757.66,685.294 1758.22,685.294 1758.78,685.294 1759.34,685.294 1759.89,685.294 1760.45,685.294 1761.01,685.294 1761.57,685.294 1762.13,685.294 1762.69,685.294 1763.25,685.294 1763.81,685.294 1764.37,685.294 1764.93,685.294 1765.49,685.294 1766.05,685.294 1766.61,685.294 1767.16,685.294 1767.72,685.294 1768.28,685.294 1768.84,685.294 1769.4,685.294 1769.96,685.294 1770.52,685.294 1771.08,685.294 1771.64,685.294 1772.2,685.294 1772.76,685.294 1773.32,685.294 1773.88,685.294 1774.43,685.294 1774.99,685.294 1775.55,685.294 1776.11,685.294 1776.67,685.294 1777.23,685.294 1777.79,685.294 1778.35,685.294 1778.91,685.294 1779.47,685.294 1780.03,685.294 1780.59,685.294 1781.15,685.294 1781.71,685.294 1782.26,685.294 1782.82,685.294 1783.38,685.294 1783.94,685.294 1784.5,685.294 1785.06,685.294 1785.62,685.294 1786.18,685.294 1786.74,685.294 1787.3,685.294 1787.86,685.294 1788.42,685.294 1788.98,685.294 1789.53,685.294 1790.09,685.294 1790.65,685.294 1791.21,685.294 1791.77,685.294 1792.33,685.294 1792.89,685.294 1793.45,685.294 1794.01,685.294 1794.57,685.294 1795.13,685.294 1795.69,685.294 1796.25,685.294 1796.8,685.294 1797.36,685.294 1797.92,685.294 1798.48,685.294 1799.04,685.294 1799.6,685.294 1800.16,685.294 1800.72,685.294 1801.28,685.294 1801.84,685.294 1802.4,685.294 1802.96,685.294 1803.52,685.294 1804.08,685.294 1804.63,685.294 1805.19,685.294 1805.75,685.294 1806.31,685.294 1806.87,685.294 1807.43,685.294 1807.99,685.294 1808.55,685.294 1809.11,685.294 1809.67,685.294 1810.23,685.294 1810.79,685.294 1811.35,685.294 1811.9,685.294 1812.46,685.294 1813.02,685.294 1813.58,685.294 1814.14,685.294 1814.7,685.294 1815.26,685.294 1815.82,685.294 1816.38,685.294 1816.94,685.294 1817.5,685.294 1818.06,685.294 1818.62,685.294 1819.18,685.294 1819.73,685.294 1820.29,685.294 1820.85,685.294 1821.41,685.294 1821.97,685.294 1822.53,685.294 1823.09,685.294 1823.65,685.294 1824.21,685.294 1824.77,685.294 1825.33,685.294 1825.89,685.294 1826.45,685.294 1827,685.294 1827.56,685.294 1828.12,685.294 1828.68,685.294 1829.24,685.294 1829.8,685.294 1830.36,685.294 1830.92,685.294 1831.48,685.294 1832.04,685.294 1832.6,685.294 1833.16,685.294 1833.72,685.294 1834.27,685.294 1834.83,685.294 1835.39,685.294 1835.95,685.294 1836.51,685.294 1837.07,685.294 1837.63,685.294 1838.19,685.294 \"/>\n<path clip-path=\"url(#clip783)\" d=\"M720.247 683.956 L720.806 683.956 L721.365 683.956 L721.924 683.956 L722.484 683.956 L723.043 683.956 L723.602 683.956 L724.161 683.956 L724.721 683.956 L725.28 683.956 L725.839 683.956 L726.398 683.956 L726.958 683.956 L727.517 683.956 L728.076 683.956 L728.635 683.956 L729.195 683.956 L729.754 683.956 L730.313 683.956 L730.872 683.956 L731.432 683.956 L731.991 683.956 L732.55 683.956 L733.109 683.956 L733.669 683.956 L734.228 683.956 L734.787 683.956 L735.346 683.956 L735.906 683.956 L736.465 683.956 L737.024 683.956 L737.583 683.956 L738.143 683.956 L738.702 683.956 L739.261 683.956 L739.82 683.956 L740.38 683.956 L740.939 683.956 L741.498 683.956 L742.057 683.956 L742.617 683.956 L743.176 683.956 L743.735 683.956 L744.294 683.956 L744.854 683.956 L745.413 683.956 L745.972 683.956 L746.531 683.956 L747.091 683.956 L747.65 683.956 L748.209 683.956 L748.768 683.956 L749.328 683.956 L749.887 683.956 L750.446 683.956 L751.005 683.956 L751.565 683.956 L752.124 683.956 L752.683 683.956 L753.242 683.956 L753.802 683.956 L754.361 683.956 L754.92 683.956 L755.479 683.956 L756.039 683.956 L756.598 683.956 L757.157 683.956 L757.716 683.956 L758.276 683.956 L758.835 683.956 L759.394 683.956 L759.953 683.956 L760.513 683.956 L761.072 683.956 L761.631 683.956 L762.19 683.956 L762.75 683.956 L763.309 683.956 L763.868 683.956 L764.427 683.956 L764.987 683.956 L765.546 683.956 L766.105 683.956 L766.664 683.956 L767.224 683.956 L767.783 683.956 L768.342 683.956 L768.901 683.956 L769.461 683.956 L770.02 683.956 L770.579 683.956 L771.138 683.956 L771.698 683.956 L772.257 683.956 L772.816 683.956 L773.375 683.956 L773.935 683.956 L774.494 683.956 L775.053 683.956 L775.612 683.956 L776.172 683.956 L776.731 683.956 L777.29 683.956 L777.849 683.956 L778.409 683.956 L778.968 683.956 L779.527 683.956 L780.086 683.956 L780.646 683.956 L781.205 683.956 L781.764 683.956 L782.323 683.956 L782.883 683.956 L783.442 683.956 L784.001 683.956 L784.56 683.956 L785.12 683.956 L785.679 683.956 L786.238 683.956 L786.797 683.956 L787.357 683.956 L787.916 683.956 L788.475 683.956 L789.034 683.956 L789.594 683.956 L790.153 683.956 L790.712 683.956 L791.271 683.956 L791.831 683.956 L792.39 683.956 L792.949 683.956 L793.508 683.956 L794.068 683.956 L794.627 683.956 L795.186 683.956 L795.745 683.956 L796.305 683.956 L796.864 683.956 L797.423 683.956 L797.982 683.956 L798.542 683.956 L799.101 683.956 L799.66 683.956 L800.219 683.956 L800.779 683.956 L801.338 683.956 L801.897 683.956 L802.456 683.956 L803.016 683.956 L803.575 683.956 L804.134 683.956 L804.693 683.956 L805.253 683.956 L805.812 683.956 L806.371 683.956 L806.931 683.956 L807.49 683.956 L808.049 683.956 L808.608 683.956 L809.168 683.956 L809.727 683.956 L810.286 683.956 L810.845 683.956 L811.405 683.956 L811.964 683.956 L812.523 683.956 L813.082 683.956 L813.642 683.956 L814.201 683.956 L814.76 683.956 L815.319 683.956 L815.879 683.956 L816.438 683.956 L816.997 683.956 L817.556 683.956 L818.116 683.956 L818.675 683.956 L819.234 683.956 L819.793 683.956 L820.353 683.956 L820.912 683.956 L821.471 683.956 L822.03 683.956 L822.59 683.956 L823.149 683.956 L823.708 683.956 L824.267 683.956 L824.827 683.956 L825.386 683.956 L825.945 683.956 L826.504 683.956 L827.064 683.956 L827.623 683.956 L828.182 683.956 L828.741 683.956 L829.301 683.956 L829.86 683.956 L830.419 683.956 L830.978 683.956 L831.538 683.956 L832.097 683.956 L832.656 683.956 L833.215 683.956 L833.775 683.956 L834.334 683.956 L834.893 683.956 L835.452 683.956 L836.012 683.956 L836.571 683.956 L837.13 683.956 L837.689 683.956 L838.249 683.956 L838.808 683.956 L839.367 683.956 L839.926 683.956 L840.486 683.956 L841.045 683.956 L841.604 683.956 L842.163 683.956 L842.723 683.956 L843.282 683.956 L843.841 683.956 L844.4 683.956 L844.96 683.956 L845.519 683.956 L846.078 683.956 L846.637 683.956 L847.197 683.956 L847.756 683.956 L848.315 683.956 L848.874 683.956 L849.434 683.956 L849.993 683.956 L850.552 683.956 L851.111 683.956 L851.671 683.956 L852.23 683.956 L852.789 683.956 L853.348 683.956 L853.908 683.956 L854.467 683.956 L855.026 683.956 L855.585 683.956 L856.145 683.956 L856.704 683.956 L857.263 683.956 L857.822 683.956 L858.382 683.956 L858.941 683.956 L859.5 683.956 L860.059 683.956 L860.619 683.956 L861.178 683.956 L861.737 683.956 L862.296 683.956 L862.856 683.956 L863.415 683.956 L863.974 683.956 L864.533 683.956 L865.093 683.956 L865.652 683.956 L866.211 683.956 L866.77 683.956 L867.33 683.956 L867.889 683.956 L868.448 683.956 L869.007 683.956 L869.567 683.956 L870.126 683.956 L870.685 683.956 L871.244 683.956 L871.804 683.956 L872.363 683.956 L872.922 683.956 L873.481 683.956 L874.041 683.956 L874.6 683.956 L875.159 683.956 L875.718 683.956 L876.278 683.956 L876.837 683.956 L877.396 683.956 L877.955 683.956 L878.515 683.956 L879.074 683.956 L879.633 683.956 L880.192 683.956 L880.752 683.956 L881.311 683.956 L881.87 683.956 L882.429 683.956 L882.989 683.956 L883.548 683.956 L884.107 683.956 L884.666 683.956 L885.226 683.956 L885.785 683.956 L886.344 683.956 L886.903 683.956 L887.463 683.956 L888.022 683.956 L888.581 683.956 L889.14 683.956 L889.7 683.956 L890.259 683.956 L890.818 683.956 L891.377 683.956 L891.937 683.956 L892.496 683.956 L893.055 683.956 L893.614 683.956 L894.174 683.956 L894.733 683.956 L895.292 683.956 L895.851 683.956 L896.411 683.956 L896.97 683.956 L897.529 683.956 L898.088 683.956 L898.648 683.956 L899.207 683.956 L899.766 683.956 L900.325 683.956 L900.885 683.956 L901.444 683.956 L902.003 683.956 L902.562 683.956 L903.122 683.956 L903.681 683.956 L904.24 683.956 L904.799 683.956 L905.359 683.956 L905.918 683.956 L906.477 683.956 L907.036 683.956 L907.596 683.956 L908.155 683.956 L908.714 683.956 L909.273 683.956 L909.833 683.956 L910.392 683.956 L910.951 683.956 L911.51 683.956 L912.07 683.956 L912.629 683.956 L913.188 683.956 L913.747 683.956 L914.307 683.956 L914.866 683.956 L915.425 683.956 L915.984 683.956 L916.544 683.956 L917.103 683.956 L917.662 683.956 L918.221 683.956 L918.781 683.956 L919.34 683.956 L919.899 683.956 L920.458 683.956 L921.018 683.956 L921.577 683.956 L922.136 683.956 L922.695 683.956 L923.255 683.956 L923.814 683.956 L924.373 683.956 L924.932 683.956 L925.492 683.956 L926.051 683.956 L926.61 683.956 L927.169 683.956 L927.729 683.956 L928.288 683.956 L928.847 683.956 L929.406 683.956 L929.966 683.956 L930.525 683.956 L931.084 683.956 L931.644 683.956 L932.203 683.956 L932.762 683.956 L933.321 683.956 L933.881 683.956 L934.44 683.956 L934.999 683.956 L935.558 683.956 L936.118 683.956 L936.677 683.956 L937.236 683.956 L937.795 683.956 L938.355 683.956 L938.914 683.956 L939.473 683.956 L940.032 683.956 L940.592 683.956 L941.151 683.956 L941.71 683.956 L942.269 683.956 L942.829 683.956 L943.388 683.956 L943.947 683.956 L944.506 683.956 L945.066 683.956 L945.625 683.956 L946.184 683.956 L946.743 683.956 L947.303 683.956 L947.862 683.956 L948.421 683.956 L948.98 683.956 L949.54 683.956 L950.099 683.956 L950.658 683.956 L951.217 683.956 L951.777 683.956 L952.336 683.956 L952.895 683.956 L953.454 683.956 L954.014 683.956 L954.573 683.956 L955.132 683.956 L955.691 683.956 L956.251 683.956 L956.81 683.956 L957.369 683.956 L957.928 683.956 L958.488 683.956 L959.047 683.956 L959.606 683.956 L960.165 683.956 L960.725 683.956 L961.284 683.956 L961.843 683.956 L962.402 683.956 L962.962 683.956 L963.521 683.956 L964.08 683.956 L964.639 683.956 L965.199 683.956 L965.758 683.956 L966.317 683.956 L966.876 683.956 L967.436 683.956 L967.995 683.956 L968.554 683.956 L969.113 683.956 L969.673 683.956 L970.232 683.956 L970.791 683.956 L971.35 683.956 L971.91 683.956 L972.469 683.956 L973.028 683.956 L973.587 683.956 L974.147 683.956 L974.706 683.956 L975.265 683.956 L975.824 683.956 L976.384 683.956 L976.943 683.956 L977.502 683.956 L978.061 683.956 L978.621 683.956 L979.18 683.956 L979.739 683.956 L980.298 683.956 L980.858 683.956 L981.417 683.956 L981.976 683.956 L982.535 683.956 L983.095 683.956 L983.654 683.956 L984.213 683.956 L984.772 683.956 L985.332 683.956 L985.891 683.956 L986.45 683.956 L987.009 683.956 L987.569 683.956 L988.128 683.956 L988.687 683.956 L989.246 683.956 L989.806 683.956 L990.365 683.956 L990.924 683.956 L991.483 683.956 L992.043 683.956 L992.602 683.956 L993.161 683.956 L993.72 683.956 L994.28 683.956 L994.839 683.956 L995.398 683.956 L995.957 683.956 L996.517 683.956 L997.076 683.956 L997.635 683.956 L998.194 683.956 L998.754 683.956 L999.313 683.956 L999.872 683.956 L1000.43 683.956 L1000.99 683.956 L1001.55 683.956 L1002.11 683.956 L1002.67 683.956 L1003.23 683.956 L1003.79 683.956 L1004.35 683.956 L1004.91 683.956 L1005.46 683.956 L1006.02 683.956 L1006.58 683.956 L1007.14 683.956 L1007.7 683.956 L1008.26 683.956 L1008.82 683.956 L1009.38 683.956 L1009.94 683.956 L1010.5 683.956 L1011.06 683.956 L1011.62 683.956 L1012.18 683.956 L1012.73 683.956 L1013.29 683.956 L1013.85 683.956 L1014.41 683.956 L1014.97 683.956 L1015.53 683.956 L1016.09 683.956 L1016.65 683.956 L1017.21 683.956 L1017.77 683.956 L1018.33 683.956 L1018.89 683.956 L1019.45 683.956 L1020.01 683.956 L1020.56 683.956 L1021.12 683.956 L1021.68 683.956 L1022.24 683.956 L1022.8 683.956 L1023.36 683.956 L1023.92 683.956 L1024.48 683.956 L1025.04 683.956 L1025.6 683.956 L1026.16 683.956 L1026.72 683.956 L1027.28 683.956 L1027.83 683.956 L1028.39 683.956 L1028.95 683.956 L1029.51 683.956 L1030.07 683.956 L1030.63 683.956 L1031.19 683.956 L1031.75 683.956 L1032.31 683.956 L1032.87 683.956 L1033.43 683.956 L1033.99 683.956 L1034.55 683.956 L1035.1 683.956 L1035.66 683.956 L1036.22 683.956 L1036.78 683.956 L1037.34 683.956 L1037.9 683.956 L1038.46 683.956 L1039.02 683.956 L1039.58 683.956 L1040.14 683.956 L1040.7 683.956 L1041.26 683.956 L1041.82 683.956 L1042.38 683.956 L1042.93 683.956 L1043.49 683.956 L1044.05 683.956 L1044.61 683.956 L1045.17 683.956 L1045.73 683.956 L1046.29 683.956 L1046.85 683.956 L1047.41 683.956 L1047.97 683.956 L1048.53 683.956 L1049.09 683.956 L1049.65 683.956 L1050.2 683.956 L1050.76 683.956 L1051.32 683.956 L1051.88 683.956 L1052.44 683.956 L1053 683.956 L1053.56 683.956 L1054.12 683.956 L1054.68 683.956 L1055.24 683.956 L1055.8 683.956 L1056.36 683.956 L1056.92 683.956 L1057.48 683.956 L1058.03 683.956 L1058.59 683.956 L1059.15 683.956 L1059.71 683.956 L1060.27 683.956 L1060.83 683.956 L1061.39 683.956 L1061.95 683.956 L1062.51 683.956 L1063.07 683.956 L1063.63 683.956 L1064.19 683.956 L1064.75 683.956 L1065.3 683.956 L1065.86 683.956 L1066.42 683.956 L1066.98 683.956 L1067.54 683.956 L1068.1 683.956 L1068.66 683.956 L1069.22 683.956 L1069.78 683.956 L1070.34 683.956 L1070.9 683.956 L1071.46 683.956 L1072.02 683.956 L1072.57 683.956 L1073.13 683.956 L1073.69 683.956 L1074.25 683.956 L1074.81 683.956 L1075.37 683.956 L1075.93 683.956 L1076.49 683.956 L1077.05 683.956 L1077.61 683.956 L1078.17 683.956 L1078.73 683.956 L1079.29 683.956 L1079.85 683.956 L1080.4 683.956 L1080.96 683.956 L1081.52 683.956 L1082.08 683.956 L1082.64 683.956 L1083.2 683.956 L1083.76 683.956 L1084.32 683.956 L1084.88 683.956 L1085.44 683.956 L1086 683.956 L1086.56 683.956 L1087.12 683.956 L1087.67 683.956 L1088.23 683.956 L1088.79 683.956 L1089.35 683.956 L1089.91 683.956 L1090.47 683.956 L1091.03 683.956 L1091.59 683.956 L1092.15 683.956 L1092.71 683.956 L1093.27 683.956 L1093.83 683.956 L1094.39 683.956 L1094.94 683.956 L1095.5 683.956 L1096.06 683.956 L1096.62 683.956 L1097.18 683.956 L1097.74 683.956 L1098.3 683.956 L1098.86 683.956 L1099.42 683.956 L1099.98 683.956 L1100.54 683.956 L1101.1 683.956 L1101.66 683.956 L1102.22 683.956 L1102.77 683.956 L1103.33 683.956 L1103.89 683.956 L1104.45 683.956 L1105.01 683.956 L1105.57 683.956 L1106.13 683.956 L1106.69 683.956 L1107.25 683.956 L1107.81 683.956 L1108.37 683.956 L1108.93 683.956 L1109.49 683.956 L1110.04 683.956 L1110.6 683.956 L1111.16 683.956 L1111.72 683.956 L1112.28 683.956 L1112.84 683.956 L1113.4 683.956 L1113.96 683.956 L1114.52 683.956 L1115.08 683.956 L1115.64 683.956 L1116.2 683.956 L1116.76 683.956 L1117.31 683.956 L1117.87 683.956 L1118.43 683.956 L1118.99 683.956 L1119.55 683.956 L1120.11 683.956 L1120.67 683.956 L1121.23 683.956 L1121.79 683.956 L1122.35 683.956 L1122.91 683.956 L1123.47 683.956 L1124.03 683.956 L1124.59 683.956 L1125.14 683.956 L1125.7 683.956 L1126.26 683.956 L1126.82 683.956 L1127.38 683.956 L1127.94 683.956 L1128.5 683.956 L1129.06 683.956 L1129.62 683.956 L1130.18 683.956 L1130.74 683.956 L1131.3 683.956 L1131.86 683.956 L1132.41 683.956 L1132.97 683.956 L1133.53 683.956 L1134.09 683.956 L1134.65 683.956 L1135.21 683.956 L1135.77 683.956 L1136.33 683.956 L1136.89 683.956 L1137.45 683.956 L1138.01 683.956 L1138.57 683.956 L1139.13 683.956 L1139.68 683.956 L1140.24 683.956 L1140.8 683.956 L1141.36 683.956 L1141.92 683.956 L1142.48 683.956 L1143.04 683.956 L1143.6 683.956 L1144.16 683.956 L1144.72 683.956 L1145.28 683.956 L1145.84 683.956 L1146.4 683.956 L1146.96 683.956 L1147.51 683.956 L1148.07 683.956 L1148.63 683.956 L1149.19 683.956 L1149.75 683.956 L1150.31 683.956 L1150.87 683.956 L1151.43 683.956 L1151.99 683.956 L1152.55 683.956 L1153.11 683.956 L1153.67 683.956 L1154.23 683.956 L1154.78 683.956 L1155.34 683.956 L1155.9 683.956 L1156.46 683.956 L1157.02 683.956 L1157.58 683.956 L1158.14 683.956 L1158.7 683.956 L1159.26 683.956 L1159.82 683.956 L1160.38 683.956 L1160.94 683.956 L1161.5 683.956 L1162.05 683.956 L1162.61 683.956 L1163.17 683.956 L1163.73 683.956 L1164.29 683.956 L1164.85 683.956 L1165.41 683.956 L1165.97 683.956 L1166.53 683.956 L1167.09 683.956 L1167.65 683.956 L1168.21 683.956 L1168.77 683.956 L1169.33 683.956 L1169.88 683.956 L1170.44 683.956 L1171 683.956 L1171.56 683.956 L1172.12 683.956 L1172.68 683.956 L1173.24 683.956 L1173.8 683.956 L1174.36 683.956 L1174.92 683.956 L1175.48 683.956 L1176.04 683.956 L1176.6 683.956 L1177.15 683.956 L1177.71 683.956 L1178.27 683.956 L1178.83 683.956 L1179.39 683.956 L1179.95 683.956 L1180.51 683.956 L1181.07 683.956 L1181.63 683.956 L1182.19 683.956 L1182.75 683.956 L1183.31 683.956 L1183.87 683.956 L1184.43 683.956 L1184.98 683.956 L1185.54 683.956 L1186.1 683.956 L1186.66 683.956 L1187.22 683.956 L1187.78 683.956 L1188.34 683.956 L1188.9 683.956 L1189.46 683.956 L1190.02 683.956 L1190.58 683.956 L1191.14 683.956 L1191.7 683.956 L1192.25 683.956 L1192.81 683.956 L1193.37 683.956 L1193.93 683.956 L1194.49 683.956 L1195.05 683.956 L1195.61 683.956 L1196.17 683.956 L1196.73 683.956 L1197.29 683.956 L1197.85 683.956 L1198.41 683.956 L1198.97 683.956 L1199.52 683.956 L1200.08 683.956 L1200.64 683.956 L1201.2 683.956 L1201.76 683.956 L1202.32 683.956 L1202.88 683.956 L1203.44 683.956 L1204 683.956 L1204.56 683.956 L1205.12 683.956 L1205.68 683.956 L1206.24 683.956 L1206.8 683.956 L1207.35 683.956 L1207.91 683.956 L1208.47 683.956 L1209.03 683.956 L1209.59 683.956 L1210.15 683.956 L1210.71 683.956 L1211.27 683.956 L1211.83 683.956 L1212.39 683.956 L1212.95 683.956 L1213.51 683.956 L1214.07 683.956 L1214.62 683.956 L1215.18 683.956 L1215.74 683.956 L1216.3 683.956 L1216.86 683.956 L1217.42 683.956 L1217.98 683.956 L1218.54 683.956 L1219.1 683.956 L1219.66 683.956 L1220.22 683.956 L1220.78 683.956 L1221.34 683.956 L1221.89 683.956 L1222.45 683.956 L1223.01 683.956 L1223.57 683.956 L1224.13 683.956 L1224.69 683.956 L1225.25 683.956 L1225.81 683.956 L1226.37 683.956 L1226.93 683.956 L1227.49 683.956 L1228.05 683.956 L1228.61 683.956 L1229.17 683.956 L1229.72 683.956 L1230.28 683.956 L1230.84 683.956 L1231.4 683.956 L1231.96 683.956 L1232.52 683.956 L1233.08 683.956 L1233.64 683.956 L1234.2 683.956 L1234.76 683.956 L1235.32 683.956 L1235.88 683.956 L1236.44 683.956 L1236.99 683.956 L1237.55 683.956 L1238.11 683.956 L1238.67 683.956 L1239.23 683.956 L1239.79 683.956 L1240.35 683.956 L1240.91 683.956 L1241.47 683.956 L1242.03 683.956 L1242.59 683.956 L1243.15 683.956 L1243.71 683.956 L1244.26 683.956 L1244.82 683.956 L1245.38 683.956 L1245.94 683.956 L1246.5 683.956 L1247.06 683.956 L1247.62 683.956 L1248.18 683.956 L1248.74 683.956 L1249.3 683.956 L1249.86 683.956 L1250.42 683.956 L1250.98 683.956 L1251.54 683.956 L1252.09 683.956 L1252.65 683.956 L1253.21 683.956 L1253.77 683.956 L1254.33 683.956 L1254.89 683.956 L1255.45 683.956 L1256.01 683.956 L1256.57 683.956 L1257.13 683.956 L1257.69 683.956 L1258.25 683.956 L1258.81 683.956 L1259.36 683.956 L1259.92 683.956 L1260.48 683.956 L1261.04 683.956 L1261.6 683.956 L1262.16 683.956 L1262.72 683.956 L1263.28 683.956 L1263.84 683.956 L1264.4 683.956 L1264.96 683.956 L1265.52 683.956 L1266.08 683.956 L1266.63 683.956 L1267.19 683.956 L1267.75 683.956 L1268.31 683.956 L1268.87 683.956 L1269.43 683.956 L1269.99 683.956 L1270.55 683.956 L1271.11 683.956 L1271.67 683.956 L1272.23 683.956 L1272.79 683.956 L1273.35 683.956 L1273.91 683.956 L1274.46 683.956 L1275.02 683.956 L1275.58 683.956 L1276.14 683.956 L1276.7 683.956 L1277.26 683.956 L1277.82 683.956 L1278.38 683.956 L1278.94 683.956 L1279.5 683.956 L1280.06 683.956 L1280.62 683.956 L1281.18 683.956 L1281.73 683.956 L1282.29 683.956 L1282.85 683.956 L1283.41 683.956 L1283.97 683.956 L1284.53 683.956 L1285.09 683.956 L1285.65 683.956 L1286.21 683.956 L1286.77 683.956 L1287.33 683.956 L1287.89 683.956 L1288.45 683.956 L1289 683.956 L1289.56 683.956 L1290.12 683.956 L1290.68 683.956 L1291.24 683.956 L1291.8 683.956 L1292.36 683.956 L1292.92 683.956 L1293.48 683.956 L1294.04 683.956 L1294.6 683.956 L1295.16 683.956 L1295.72 683.956 L1296.28 683.956 L1296.83 683.956 L1297.39 683.956 L1297.95 683.956 L1298.51 683.956 L1299.07 683.956 L1299.63 683.956 L1300.19 683.956 L1300.75 683.956 L1301.31 683.956 L1301.87 683.956 L1302.43 683.956 L1302.99 683.956 L1303.55 683.956 L1304.1 683.956 L1304.66 683.956 L1305.22 683.956 L1305.78 683.956 L1306.34 683.956 L1306.9 683.956 L1307.46 683.956 L1308.02 683.956 L1308.58 683.956 L1309.14 683.956 L1309.7 683.956 L1310.26 683.956 L1310.82 683.956 L1311.38 683.956 L1311.93 683.956 L1312.49 683.956 L1313.05 683.956 L1313.61 683.956 L1314.17 683.956 L1314.73 683.956 L1315.29 683.956 L1315.85 683.956 L1316.41 683.956 L1316.97 683.956 L1317.53 683.956 L1318.09 683.956 L1318.65 683.956 L1319.2 683.956 L1319.76 683.956 L1320.32 683.956 L1320.88 683.956 L1321.44 683.956 L1322 683.956 L1322.56 683.956 L1323.12 683.956 L1323.68 683.956 L1324.24 683.956 L1324.8 683.956 L1325.36 683.956 L1325.92 683.956 L1326.47 683.956 L1327.03 683.956 L1327.59 683.956 L1328.15 683.956 L1328.71 683.956 L1329.27 683.956 L1329.83 683.956 L1330.39 683.956 L1330.95 683.956 L1331.51 683.956 L1332.07 683.956 L1332.63 683.956 L1333.19 683.956 L1333.75 683.956 L1334.3 683.956 L1334.86 683.956 L1335.42 683.956 L1335.98 683.956 L1336.54 683.956 L1337.1 683.956 L1337.66 683.956 L1338.22 683.956 L1338.78 683.956 L1339.34 683.956 L1339.9 683.956 L1340.46 683.956 L1341.02 683.956 L1341.57 683.956 L1342.13 683.956 L1342.69 683.956 L1343.25 683.956 L1343.81 683.956 L1344.37 683.956 L1344.93 683.956 L1345.49 683.956 L1346.05 683.956 L1346.61 683.956 L1347.17 683.956 L1347.73 683.956 L1348.29 683.956 L1348.84 683.956 L1349.4 683.956 L1349.96 683.956 L1350.52 683.956 L1351.08 683.956 L1351.64 683.956 L1352.2 683.956 L1352.76 683.956 L1353.32 683.956 L1353.88 683.956 L1354.44 683.956 L1355 683.956 L1355.56 683.956 L1356.12 683.956 L1356.67 683.956 L1357.23 683.956 L1357.79 683.956 L1358.35 683.956 L1358.91 683.956 L1359.47 683.956 L1360.03 683.956 L1360.59 683.956 L1361.15 683.956 L1361.71 683.956 L1362.27 683.956 L1362.83 683.956 L1363.39 683.956 L1363.94 683.956 L1364.5 683.956 L1365.06 683.956 L1365.62 683.956 L1366.18 683.956 L1366.74 683.956 L1367.3 683.956 L1367.86 683.956 L1368.42 683.956 L1368.98 683.956 L1369.54 683.956 L1370.1 683.956 L1370.66 683.956 L1371.21 683.956 L1371.77 683.956 L1372.33 683.956 L1372.89 683.956 L1373.45 683.956 L1374.01 683.956 L1374.57 683.956 L1375.13 683.956 L1375.69 683.956 L1376.25 683.956 L1376.81 683.956 L1377.37 683.956 L1377.93 683.956 L1378.49 683.956 L1379.04 683.956 L1379.6 683.956 L1380.16 683.956 L1380.72 683.956 L1381.28 683.956 L1381.84 683.956 L1382.4 683.956 L1382.96 683.956 L1383.52 683.956 L1384.08 683.956 L1384.64 683.956 L1385.2 683.956 L1385.76 683.956 L1386.31 683.956 L1386.87 683.956 L1387.43 683.956 L1387.99 683.956 L1388.55 683.956 L1389.11 683.956 L1389.67 683.956 L1390.23 683.956 L1390.79 683.956 L1391.35 683.956 L1391.91 683.956 L1392.47 683.956 L1393.03 683.956 L1393.58 683.956 L1394.14 683.956 L1394.7 683.956 L1395.26 683.956 L1395.82 683.956 L1396.38 683.956 L1396.94 683.956 L1397.5 683.956 L1398.06 683.956 L1398.62 683.956 L1399.18 683.956 L1399.74 683.956 L1400.3 683.956 L1400.86 683.956 L1401.41 683.956 L1401.97 683.956 L1402.53 683.956 L1403.09 683.956 L1403.65 683.956 L1404.21 683.956 L1404.77 683.956 L1405.33 683.956 L1405.89 683.956 L1406.45 683.956 L1407.01 683.956 L1407.57 683.956 L1408.13 683.956 L1408.68 683.956 L1409.24 683.956 L1409.8 683.956 L1410.36 683.956 L1410.92 683.956 L1411.48 683.956 L1412.04 683.956 L1412.6 683.956 L1413.16 683.956 L1413.72 683.956 L1414.28 683.956 L1414.84 683.956 L1415.4 683.956 L1415.95 683.956 L1416.51 683.956 L1417.07 683.956 L1417.63 683.956 L1418.19 683.956 L1418.75 683.956 L1419.31 683.956 L1419.87 683.956 L1420.43 683.956 L1420.99 683.956 L1421.55 683.956 L1422.11 683.956 L1422.67 683.956 L1423.23 683.956 L1423.78 683.956 L1424.34 683.956 L1424.9 683.956 L1425.46 683.956 L1426.02 683.956 L1426.58 683.956 L1427.14 683.956 L1427.7 683.956 L1428.26 683.956 L1428.82 683.956 L1429.38 683.956 L1429.94 683.956 L1430.5 683.956 L1431.05 683.956 L1431.61 683.956 L1432.17 683.956 L1432.73 683.956 L1433.29 683.956 L1433.85 683.956 L1434.41 683.956 L1434.97 683.956 L1435.53 683.956 L1436.09 683.956 L1436.65 683.956 L1437.21 683.956 L1437.77 683.956 L1438.33 683.956 L1438.88 683.956 L1439.44 683.956 L1440 683.956 L1440.56 683.956 L1441.12 683.956 L1441.68 683.956 L1442.24 683.956 L1442.8 683.956 L1443.36 683.956 L1443.92 683.956 L1444.48 683.956 L1445.04 683.956 L1445.6 683.956 L1446.15 683.956 L1446.71 683.956 L1447.27 683.956 L1447.83 683.956 L1448.39 683.956 L1448.95 683.956 L1449.51 683.956 L1450.07 683.956 L1450.63 683.956 L1451.19 683.956 L1451.75 683.956 L1452.31 683.956 L1452.87 683.956 L1453.42 683.956 L1453.98 683.956 L1454.54 683.956 L1455.1 683.956 L1455.66 683.956 L1456.22 683.956 L1456.78 683.956 L1457.34 683.956 L1457.9 683.956 L1458.46 683.956 L1459.02 683.956 L1459.58 683.956 L1460.14 683.956 L1460.7 683.956 L1461.25 683.956 L1461.81 683.956 L1462.37 683.956 L1462.93 683.956 L1463.49 683.956 L1464.05 683.956 L1464.61 683.956 L1465.17 683.956 L1465.73 683.956 L1466.29 683.956 L1466.85 683.956 L1467.41 683.956 L1467.97 683.956 L1468.52 683.956 L1469.08 683.956 L1469.64 683.956 L1470.2 683.956 L1470.76 683.956 L1471.32 683.956 L1471.88 683.956 L1472.44 683.956 L1473 683.956 L1473.56 683.956 L1474.12 683.956 L1474.68 683.956 L1475.24 683.956 L1475.79 683.956 L1476.35 683.956 L1476.91 683.956 L1477.47 683.956 L1478.03 683.956 L1478.59 683.956 L1479.15 683.956 L1479.71 683.956 L1480.27 683.956 L1480.83 683.956 L1481.39 683.956 L1481.95 683.956 L1482.51 683.956 L1483.07 683.956 L1483.62 683.956 L1484.18 683.956 L1484.74 683.956 L1485.3 683.956 L1485.86 683.956 L1486.42 683.956 L1486.98 683.956 L1487.54 683.956 L1488.1 683.956 L1488.66 683.956 L1489.22 683.956 L1489.78 683.956 L1490.34 683.956 L1490.89 683.956 L1491.45 683.956 L1492.01 683.956 L1492.57 683.956 L1493.13 683.956 L1493.69 683.956 L1494.25 683.956 L1494.81 683.956 L1495.37 683.956 L1495.93 683.956 L1496.49 683.956 L1497.05 683.956 L1497.61 683.956 L1498.16 683.956 L1498.72 683.956 L1499.28 683.956 L1499.84 683.956 L1500.4 683.956 L1500.96 683.956 L1501.52 683.956 L1502.08 683.956 L1502.64 683.956 L1503.2 683.956 L1503.76 683.956 L1504.32 683.956 L1504.88 683.956 L1505.44 683.956 L1505.99 683.956 L1506.55 683.956 L1507.11 683.956 L1507.67 683.956 L1508.23 683.956 L1508.79 683.956 L1509.35 683.956 L1509.91 683.956 L1510.47 683.956 L1511.03 683.956 L1511.59 683.956 L1512.15 683.956 L1512.71 683.956 L1513.26 683.956 L1513.82 683.956 L1514.38 683.956 L1514.94 683.956 L1515.5 683.956 L1516.06 683.956 L1516.62 683.956 L1517.18 683.956 L1517.74 683.956 L1518.3 683.956 L1518.86 683.956 L1519.42 683.956 L1519.98 683.956 L1520.53 683.956 L1521.09 683.956 L1521.65 683.956 L1522.21 683.956 L1522.77 683.956 L1523.33 683.956 L1523.89 683.956 L1524.45 683.956 L1525.01 683.956 L1525.57 683.956 L1526.13 683.956 L1526.69 683.956 L1527.25 683.956 L1527.81 683.956 L1528.36 683.956 L1528.92 683.956 L1529.48 683.956 L1530.04 683.956 L1530.6 683.956 L1531.16 683.956 L1531.72 683.956 L1532.28 683.956 L1532.84 683.956 L1533.4 683.956 L1533.96 683.956 L1534.52 683.956 L1535.08 683.956 L1535.63 683.956 L1536.19 683.956 L1536.75 683.956 L1537.31 683.956 L1537.87 683.956 L1538.43 683.956 L1538.99 683.956 L1539.55 683.956 L1540.11 683.956 L1540.67 683.956 L1541.23 683.956 L1541.79 683.956 L1542.35 683.956 L1542.9 683.956 L1543.46 683.956 L1544.02 683.956 L1544.58 683.956 L1545.14 683.956 L1545.7 683.956 L1546.26 683.956 L1546.82 683.956 L1547.38 683.956 L1547.94 683.956 L1548.5 683.956 L1549.06 683.956 L1549.62 683.956 L1550.18 683.956 L1550.73 683.956 L1551.29 683.956 L1551.85 683.956 L1552.41 683.956 L1552.97 683.956 L1553.53 683.956 L1554.09 683.956 L1554.65 683.956 L1555.21 683.956 L1555.77 683.956 L1556.33 683.956 L1556.89 683.956 L1557.45 683.956 L1558 683.956 L1558.56 683.956 L1559.12 683.956 L1559.68 683.956 L1560.24 683.956 L1560.8 683.956 L1561.36 683.956 L1561.92 683.956 L1562.48 683.956 L1563.04 683.956 L1563.6 683.956 L1564.16 683.956 L1564.72 683.956 L1565.28 683.956 L1565.83 683.956 L1566.39 683.956 L1566.95 683.956 L1567.51 683.956 L1568.07 683.956 L1568.63 683.956 L1569.19 683.956 L1569.75 683.956 L1570.31 683.956 L1570.87 683.956 L1571.43 683.956 L1571.99 683.956 L1572.55 683.956 L1573.1 683.956 L1573.66 683.956 L1574.22 683.956 L1574.78 683.956 L1575.34 683.956 L1575.9 683.956 L1576.46 683.956 L1577.02 683.956 L1577.58 683.956 L1578.14 683.956 L1578.7 683.956 L1579.26 683.956 L1579.82 683.956 L1580.37 683.956 L1580.93 683.956 L1581.49 683.956 L1582.05 683.956 L1582.61 683.956 L1583.17 683.956 L1583.73 683.956 L1584.29 683.956 L1584.85 683.956 L1585.41 683.956 L1585.97 683.956 L1586.53 683.956 L1587.09 683.956 L1587.65 683.956 L1588.2 683.956 L1588.76 683.956 L1589.32 683.956 L1589.88 683.956 L1590.44 683.956 L1591 683.956 L1591.56 683.956 L1592.12 683.956 L1592.68 683.956 L1593.24 683.956 L1593.8 683.956 L1594.36 683.956 L1594.92 683.956 L1595.47 683.956 L1596.03 683.956 L1596.59 683.956 L1597.15 683.956 L1597.71 683.956 L1598.27 683.956 L1598.83 683.956 L1599.39 683.956 L1599.95 683.956 L1600.51 683.956 L1601.07 683.956 L1601.63 683.956 L1602.19 683.956 L1602.74 683.956 L1603.3 683.956 L1603.86 683.956 L1604.42 683.956 L1604.98 683.956 L1605.54 683.956 L1606.1 683.956 L1606.66 683.956 L1607.22 683.956 L1607.78 683.956 L1608.34 683.956 L1608.9 683.956 L1609.46 683.956 L1610.02 683.956 L1610.57 683.956 L1611.13 683.956 L1611.69 683.956 L1612.25 683.956 L1612.81 683.956 L1613.37 683.956 L1613.93 683.956 L1614.49 683.956 L1615.05 683.956 L1615.61 683.956 L1616.17 683.956 L1616.73 683.956 L1617.29 683.956 L1617.84 683.956 L1618.4 683.956 L1618.96 683.956 L1619.52 683.956 L1620.08 683.956 L1620.64 683.956 L1621.2 683.956 L1621.76 683.956 L1622.32 683.956 L1622.88 683.956 L1623.44 683.956 L1624 683.956 L1624.56 683.956 L1625.11 683.956 L1625.67 683.956 L1626.23 683.956 L1626.79 683.956 L1627.35 683.956 L1627.91 683.956 L1628.47 683.956 L1629.03 683.956 L1629.59 683.956 L1630.15 683.956 L1630.71 683.956 L1631.27 683.956 L1631.83 683.956 L1632.39 683.956 L1632.94 683.956 L1633.5 683.956 L1634.06 683.956 L1634.62 683.956 L1635.18 683.956 L1635.74 683.956 L1636.3 683.956 L1636.86 683.956 L1637.42 683.956 L1637.98 683.956 L1638.54 683.956 L1639.1 683.956 L1639.66 683.956 L1640.21 683.956 L1640.77 683.956 L1641.33 683.956 L1641.89 683.956 L1642.45 683.956 L1643.01 683.956 L1643.57 683.956 L1644.13 683.956 L1644.69 683.956 L1645.25 683.956 L1645.81 683.956 L1646.37 683.956 L1646.93 683.956 L1647.48 683.956 L1648.04 683.956 L1648.6 683.956 L1649.16 683.956 L1649.72 683.956 L1650.28 683.956 L1650.84 683.956 L1651.4 683.956 L1651.96 683.956 L1652.52 683.956 L1653.08 683.956 L1653.64 683.956 L1654.2 683.956 L1654.76 683.956 L1655.31 683.956 L1655.87 683.956 L1656.43 683.956 L1656.99 683.956 L1657.55 683.956 L1658.11 683.956 L1658.67 683.956 L1659.23 683.956 L1659.79 683.956 L1660.35 683.956 L1660.91 683.956 L1661.47 683.956 L1662.03 683.956 L1662.58 683.956 L1663.14 683.956 L1663.7 683.956 L1664.26 683.956 L1664.82 683.956 L1665.38 683.956 L1665.94 683.956 L1666.5 683.956 L1667.06 683.956 L1667.62 683.956 L1668.18 683.956 L1668.74 683.956 L1669.3 683.956 L1669.85 683.956 L1670.41 683.956 L1670.97 683.956 L1671.53 683.956 L1672.09 683.956 L1672.65 683.956 L1673.21 683.956 L1673.77 683.956 L1674.33 683.956 L1674.89 683.956 L1675.45 683.956 L1676.01 683.956 L1676.57 683.956 L1677.13 683.956 L1677.68 683.956 L1678.24 683.956 L1678.8 683.956 L1679.36 683.956 L1679.92 683.956 L1680.48 683.956 L1681.04 683.956 L1681.6 683.956 L1682.16 683.956 L1682.72 683.956 L1683.28 683.956 L1683.84 683.956 L1684.4 683.956 L1684.95 683.956 L1685.51 683.956 L1686.07 683.956 L1686.63 683.956 L1687.19 683.956 L1687.75 683.956 L1688.31 683.956 L1688.87 683.956 L1689.43 683.956 L1689.99 683.956 L1690.55 683.956 L1691.11 683.956 L1691.67 683.956 L1692.23 683.956 L1692.78 683.956 L1693.34 683.956 L1693.9 683.956 L1694.46 683.956 L1695.02 683.956 L1695.58 683.956 L1696.14 683.956 L1696.7 683.956 L1697.26 683.956 L1697.82 683.956 L1698.38 683.956 L1698.94 683.956 L1699.5 683.956 L1700.05 683.956 L1700.61 683.956 L1701.17 683.956 L1701.73 683.956 L1702.29 683.956 L1702.85 683.956 L1703.41 683.956 L1703.97 683.956 L1704.53 683.956 L1705.09 683.956 L1705.65 683.956 L1706.21 683.956 L1706.77 683.956 L1707.32 683.956 L1707.88 683.956 L1708.44 683.956 L1709 683.956 L1709.56 683.956 L1710.12 683.956 L1710.68 683.956 L1711.24 683.956 L1711.8 683.956 L1712.36 683.956 L1712.92 683.956 L1713.48 683.956 L1714.04 683.956 L1714.6 683.956 L1715.15 683.956 L1715.71 683.956 L1716.27 683.956 L1716.83 683.956 L1717.39 683.956 L1717.95 683.956 L1718.51 683.956 L1719.07 683.956 L1719.63 683.956 L1720.19 683.956 L1720.75 683.956 L1721.31 683.956 L1721.87 683.956 L1722.42 683.956 L1722.98 683.956 L1723.54 683.956 L1724.1 683.956 L1724.66 683.956 L1725.22 683.956 L1725.78 683.956 L1726.34 683.956 L1726.9 683.956 L1727.46 683.956 L1728.02 683.956 L1728.58 683.956 L1729.14 683.956 L1729.69 683.956 L1730.25 683.956 L1730.81 683.956 L1731.37 683.956 L1731.93 683.956 L1732.49 683.956 L1733.05 683.956 L1733.61 683.956 L1734.17 683.956 L1734.73 683.956 L1735.29 683.956 L1735.85 683.956 L1736.41 683.956 L1736.97 683.956 L1737.52 683.956 L1738.08 683.956 L1738.64 683.956 L1739.2 683.956 L1739.76 683.956 L1740.32 683.956 L1740.88 683.956 L1741.44 683.956 L1742 683.956 L1742.56 683.956 L1743.12 683.956 L1743.68 683.956 L1744.24 683.956 L1744.79 683.956 L1745.35 683.956 L1745.91 683.956 L1746.47 683.956 L1747.03 683.956 L1747.59 683.956 L1748.15 683.956 L1748.71 683.956 L1749.27 683.956 L1749.83 683.956 L1750.39 683.956 L1750.95 683.956 L1751.51 683.956 L1752.06 683.956 L1752.62 683.956 L1753.18 683.956 L1753.74 683.956 L1754.3 683.956 L1754.86 683.956 L1755.42 683.956 L1755.98 683.956 L1756.54 683.956 L1757.1 683.956 L1757.66 683.956 L1758.22 683.956 L1758.78 683.956 L1759.34 683.956 L1759.89 683.956 L1760.45 683.956 L1761.01 683.956 L1761.57 683.956 L1762.13 683.956 L1762.69 683.956 L1763.25 683.956 L1763.81 683.956 L1764.37 683.956 L1764.93 683.956 L1765.49 683.956 L1766.05 683.956 L1766.61 683.956 L1767.16 683.956 L1767.72 683.956 L1768.28 683.956 L1768.84 683.956 L1769.4 683.956 L1769.96 683.956 L1770.52 683.956 L1771.08 683.956 L1771.64 683.956 L1772.2 683.956 L1772.76 683.956 L1773.32 683.956 L1773.88 683.956 L1774.43 683.956 L1774.99 683.956 L1775.55 683.956 L1776.11 683.956 L1776.67 683.956 L1777.23 683.956 L1777.79 683.956 L1778.35 683.956 L1778.91 683.956 L1779.47 683.956 L1780.03 683.956 L1780.59 683.956 L1781.15 683.956 L1781.71 683.956 L1782.26 683.956 L1782.82 683.956 L1783.38 683.956 L1783.94 683.956 L1784.5 683.956 L1785.06 683.956 L1785.62 683.956 L1786.18 683.956 L1786.74 683.956 L1787.3 683.956 L1787.86 683.956 L1788.42 683.956 L1788.98 683.956 L1789.53 683.956 L1790.09 683.956 L1790.65 683.956 L1791.21 683.956 L1791.77 683.956 L1792.33 683.956 L1792.89 683.956 L1793.45 683.956 L1794.01 683.956 L1794.57 683.956 L1795.13 683.956 L1795.69 683.956 L1796.25 683.956 L1796.8 683.956 L1797.36 683.956 L1797.92 683.956 L1798.48 683.956 L1799.04 683.956 L1799.6 683.956 L1800.16 683.956 L1800.72 683.956 L1801.28 683.956 L1801.84 683.956 L1802.4 683.956 L1802.96 683.956 L1803.52 683.956 L1804.08 683.956 L1804.63 683.956 L1805.19 683.956 L1805.75 683.956 L1806.31 683.956 L1806.87 683.956 L1807.43 683.956 L1807.99 683.956 L1808.55 683.956 L1809.11 683.956 L1809.67 683.956 L1810.23 683.956 L1810.79 683.956 L1811.35 683.956 L1811.9 683.956 L1812.46 683.956 L1813.02 683.956 L1813.58 683.956 L1814.14 683.956 L1814.7 683.956 L1815.26 683.956 L1815.82 683.956 L1816.38 683.956 L1816.94 683.956 L1817.5 683.956 L1818.06 683.956 L1818.62 683.956 L1819.18 683.956 L1819.73 683.956 L1820.29 683.956 L1820.85 683.956 L1821.41 683.956 L1821.97 683.956 L1822.53 683.956 L1823.09 683.956 L1823.65 683.956 L1824.21 683.956 L1824.77 683.956 L1825.33 683.956 L1825.89 683.956 L1826.45 683.956 L1827 683.956 L1827.56 683.956 L1828.12 683.956 L1828.68 683.956 L1829.24 683.956 L1829.8 683.956 L1830.36 683.956 L1830.92 683.956 L1831.48 683.956 L1832.04 683.956 L1832.6 683.956 L1833.16 683.956 L1833.72 683.956 L1834.27 683.956 L1834.83 683.956 L1835.39 683.956 L1835.95 683.956 L1836.51 683.956 L1837.07 683.956 L1837.63 683.956 L1838.19 683.956 L1838.19 682.74 L1837.63 682.74 L1837.07 682.74 L1836.51 682.74 L1835.95 682.74 L1835.39 682.74 L1834.83 682.74 L1834.27 682.74 L1833.72 682.74 L1833.16 682.74 L1832.6 682.74 L1832.04 682.74 L1831.48 682.74 L1830.92 682.74 L1830.36 682.74 L1829.8 682.74 L1829.24 682.74 L1828.68 682.74 L1828.12 682.74 L1827.56 682.74 L1827 682.74 L1826.45 682.74 L1825.89 682.74 L1825.33 682.74 L1824.77 682.74 L1824.21 682.74 L1823.65 682.74 L1823.09 682.74 L1822.53 682.74 L1821.97 682.74 L1821.41 682.74 L1820.85 682.74 L1820.29 682.74 L1819.73 682.74 L1819.18 682.74 L1818.62 682.74 L1818.06 682.74 L1817.5 682.74 L1816.94 682.74 L1816.38 682.74 L1815.82 682.74 L1815.26 682.74 L1814.7 682.74 L1814.14 682.74 L1813.58 682.74 L1813.02 682.74 L1812.46 682.74 L1811.9 682.74 L1811.35 682.74 L1810.79 682.74 L1810.23 682.74 L1809.67 682.74 L1809.11 682.74 L1808.55 682.74 L1807.99 682.74 L1807.43 682.74 L1806.87 682.74 L1806.31 682.74 L1805.75 682.74 L1805.19 682.74 L1804.63 682.74 L1804.08 682.74 L1803.52 682.74 L1802.96 682.74 L1802.4 682.74 L1801.84 682.74 L1801.28 682.74 L1800.72 682.74 L1800.16 682.74 L1799.6 682.74 L1799.04 682.74 L1798.48 682.74 L1797.92 682.74 L1797.36 682.74 L1796.8 682.74 L1796.25 682.74 L1795.69 682.74 L1795.13 682.74 L1794.57 682.74 L1794.01 682.74 L1793.45 682.74 L1792.89 682.74 L1792.33 682.74 L1791.77 682.74 L1791.21 682.74 L1790.65 682.74 L1790.09 682.74 L1789.53 682.74 L1788.98 682.74 L1788.42 682.74 L1787.86 682.74 L1787.3 682.74 L1786.74 682.74 L1786.18 682.74 L1785.62 682.74 L1785.06 682.74 L1784.5 682.74 L1783.94 682.74 L1783.38 682.74 L1782.82 682.74 L1782.26 682.74 L1781.71 682.74 L1781.15 682.74 L1780.59 682.74 L1780.03 682.74 L1779.47 682.74 L1778.91 682.74 L1778.35 682.74 L1777.79 682.74 L1777.23 682.74 L1776.67 682.74 L1776.11 682.74 L1775.55 682.74 L1774.99 682.74 L1774.43 682.74 L1773.88 682.74 L1773.32 682.74 L1772.76 682.74 L1772.2 682.74 L1771.64 682.74 L1771.08 682.74 L1770.52 682.74 L1769.96 682.74 L1769.4 682.74 L1768.84 682.74 L1768.28 682.74 L1767.72 682.74 L1767.16 682.74 L1766.61 682.74 L1766.05 682.74 L1765.49 682.74 L1764.93 682.74 L1764.37 682.74 L1763.81 682.74 L1763.25 682.74 L1762.69 682.74 L1762.13 682.74 L1761.57 682.74 L1761.01 682.74 L1760.45 682.74 L1759.89 682.74 L1759.34 682.74 L1758.78 682.74 L1758.22 682.74 L1757.66 682.74 L1757.1 682.74 L1756.54 682.74 L1755.98 682.74 L1755.42 682.74 L1754.86 682.74 L1754.3 682.74 L1753.74 682.74 L1753.18 682.74 L1752.62 682.74 L1752.06 682.74 L1751.51 682.74 L1750.95 682.74 L1750.39 682.74 L1749.83 682.74 L1749.27 682.74 L1748.71 682.74 L1748.15 682.74 L1747.59 682.74 L1747.03 682.74 L1746.47 682.74 L1745.91 682.74 L1745.35 682.74 L1744.79 682.74 L1744.24 682.74 L1743.68 682.74 L1743.12 682.74 L1742.56 682.74 L1742 682.74 L1741.44 682.74 L1740.88 682.74 L1740.32 682.74 L1739.76 682.74 L1739.2 682.74 L1738.64 682.74 L1738.08 682.74 L1737.52 682.74 L1736.97 682.74 L1736.41 682.74 L1735.85 682.74 L1735.29 682.74 L1734.73 682.74 L1734.17 682.74 L1733.61 682.74 L1733.05 682.74 L1732.49 682.74 L1731.93 682.74 L1731.37 682.74 L1730.81 682.74 L1730.25 682.74 L1729.69 682.74 L1729.14 682.74 L1728.58 682.74 L1728.02 682.74 L1727.46 682.74 L1726.9 682.74 L1726.34 682.74 L1725.78 682.74 L1725.22 682.74 L1724.66 682.74 L1724.1 682.74 L1723.54 682.74 L1722.98 682.74 L1722.42 682.74 L1721.87 682.74 L1721.31 682.74 L1720.75 682.74 L1720.19 682.74 L1719.63 682.74 L1719.07 682.74 L1718.51 682.74 L1717.95 682.74 L1717.39 682.74 L1716.83 682.74 L1716.27 682.74 L1715.71 682.74 L1715.15 682.74 L1714.6 682.74 L1714.04 682.74 L1713.48 682.74 L1712.92 682.74 L1712.36 682.74 L1711.8 682.74 L1711.24 682.74 L1710.68 682.74 L1710.12 682.74 L1709.56 682.74 L1709 682.74 L1708.44 682.74 L1707.88 682.74 L1707.32 682.74 L1706.77 682.74 L1706.21 682.74 L1705.65 682.74 L1705.09 682.74 L1704.53 682.74 L1703.97 682.74 L1703.41 682.74 L1702.85 682.74 L1702.29 682.74 L1701.73 682.74 L1701.17 682.74 L1700.61 682.74 L1700.05 682.74 L1699.5 682.74 L1698.94 682.74 L1698.38 682.74 L1697.82 682.74 L1697.26 682.74 L1696.7 682.74 L1696.14 682.74 L1695.58 682.74 L1695.02 682.74 L1694.46 682.74 L1693.9 682.74 L1693.34 682.74 L1692.78 682.74 L1692.23 682.74 L1691.67 682.74 L1691.11 682.74 L1690.55 682.74 L1689.99 682.74 L1689.43 682.74 L1688.87 682.74 L1688.31 682.74 L1687.75 682.74 L1687.19 682.74 L1686.63 682.74 L1686.07 682.74 L1685.51 682.74 L1684.95 682.74 L1684.4 682.74 L1683.84 682.74 L1683.28 682.74 L1682.72 682.74 L1682.16 682.74 L1681.6 682.74 L1681.04 682.74 L1680.48 682.74 L1679.92 682.74 L1679.36 682.74 L1678.8 682.74 L1678.24 682.74 L1677.68 682.74 L1677.13 682.74 L1676.57 682.74 L1676.01 682.74 L1675.45 682.74 L1674.89 682.74 L1674.33 682.74 L1673.77 682.74 L1673.21 682.74 L1672.65 682.74 L1672.09 682.74 L1671.53 682.74 L1670.97 682.74 L1670.41 682.74 L1669.85 682.74 L1669.3 682.74 L1668.74 682.74 L1668.18 682.74 L1667.62 682.74 L1667.06 682.74 L1666.5 682.74 L1665.94 682.74 L1665.38 682.74 L1664.82 682.74 L1664.26 682.74 L1663.7 682.74 L1663.14 682.74 L1662.58 682.74 L1662.03 682.74 L1661.47 682.74 L1660.91 682.74 L1660.35 682.74 L1659.79 682.74 L1659.23 682.74 L1658.67 682.74 L1658.11 682.74 L1657.55 682.74 L1656.99 682.74 L1656.43 682.74 L1655.87 682.74 L1655.31 682.74 L1654.76 682.74 L1654.2 682.74 L1653.64 682.74 L1653.08 682.74 L1652.52 682.74 L1651.96 682.74 L1651.4 682.74 L1650.84 682.74 L1650.28 682.74 L1649.72 682.74 L1649.16 682.74 L1648.6 682.74 L1648.04 682.74 L1647.48 682.74 L1646.93 682.74 L1646.37 682.74 L1645.81 682.74 L1645.25 682.74 L1644.69 682.74 L1644.13 682.74 L1643.57 682.74 L1643.01 682.74 L1642.45 682.74 L1641.89 682.74 L1641.33 682.74 L1640.77 682.74 L1640.21 682.74 L1639.66 682.74 L1639.1 682.74 L1638.54 682.74 L1637.98 682.74 L1637.42 682.74 L1636.86 682.74 L1636.3 682.74 L1635.74 682.74 L1635.18 682.74 L1634.62 682.74 L1634.06 682.74 L1633.5 682.74 L1632.94 682.74 L1632.39 682.74 L1631.83 682.74 L1631.27 682.74 L1630.71 682.74 L1630.15 682.74 L1629.59 682.74 L1629.03 682.74 L1628.47 682.74 L1627.91 682.74 L1627.35 682.74 L1626.79 682.74 L1626.23 682.74 L1625.67 682.74 L1625.11 682.74 L1624.56 682.74 L1624 682.74 L1623.44 682.74 L1622.88 682.74 L1622.32 682.74 L1621.76 682.74 L1621.2 682.74 L1620.64 682.74 L1620.08 682.74 L1619.52 682.74 L1618.96 682.74 L1618.4 682.74 L1617.84 682.74 L1617.29 682.74 L1616.73 682.74 L1616.17 682.74 L1615.61 682.74 L1615.05 682.74 L1614.49 682.74 L1613.93 682.74 L1613.37 682.74 L1612.81 682.74 L1612.25 682.74 L1611.69 682.74 L1611.13 682.74 L1610.57 682.74 L1610.02 682.74 L1609.46 682.74 L1608.9 682.74 L1608.34 682.74 L1607.78 682.74 L1607.22 682.74 L1606.66 682.74 L1606.1 682.74 L1605.54 682.74 L1604.98 682.74 L1604.42 682.74 L1603.86 682.74 L1603.3 682.74 L1602.74 682.74 L1602.19 682.74 L1601.63 682.74 L1601.07 682.74 L1600.51 682.74 L1599.95 682.74 L1599.39 682.74 L1598.83 682.74 L1598.27 682.74 L1597.71 682.74 L1597.15 682.74 L1596.59 682.74 L1596.03 682.74 L1595.47 682.74 L1594.92 682.74 L1594.36 682.74 L1593.8 682.74 L1593.24 682.74 L1592.68 682.74 L1592.12 682.74 L1591.56 682.74 L1591 682.74 L1590.44 682.74 L1589.88 682.74 L1589.32 682.74 L1588.76 682.74 L1588.2 682.74 L1587.65 682.74 L1587.09 682.74 L1586.53 682.74 L1585.97 682.74 L1585.41 682.74 L1584.85 682.74 L1584.29 682.74 L1583.73 682.74 L1583.17 682.74 L1582.61 682.74 L1582.05 682.74 L1581.49 682.74 L1580.93 682.74 L1580.37 682.74 L1579.82 682.74 L1579.26 682.74 L1578.7 682.74 L1578.14 682.74 L1577.58 682.74 L1577.02 682.74 L1576.46 682.74 L1575.9 682.74 L1575.34 682.74 L1574.78 682.74 L1574.22 682.74 L1573.66 682.74 L1573.1 682.74 L1572.55 682.74 L1571.99 682.74 L1571.43 682.74 L1570.87 682.74 L1570.31 682.74 L1569.75 682.74 L1569.19 682.74 L1568.63 682.74 L1568.07 682.74 L1567.51 682.74 L1566.95 682.74 L1566.39 682.74 L1565.83 682.74 L1565.28 682.74 L1564.72 682.74 L1564.16 682.74 L1563.6 682.74 L1563.04 682.74 L1562.48 682.74 L1561.92 682.74 L1561.36 682.74 L1560.8 682.74 L1560.24 682.74 L1559.68 682.74 L1559.12 682.74 L1558.56 682.74 L1558 682.74 L1557.45 682.74 L1556.89 682.74 L1556.33 682.74 L1555.77 682.74 L1555.21 682.74 L1554.65 682.74 L1554.09 682.74 L1553.53 682.74 L1552.97 682.74 L1552.41 682.74 L1551.85 682.74 L1551.29 682.74 L1550.73 682.74 L1550.18 682.74 L1549.62 682.74 L1549.06 682.74 L1548.5 682.74 L1547.94 682.74 L1547.38 682.74 L1546.82 682.74 L1546.26 682.74 L1545.7 682.74 L1545.14 682.74 L1544.58 682.74 L1544.02 682.74 L1543.46 682.74 L1542.9 682.74 L1542.35 682.74 L1541.79 682.74 L1541.23 682.74 L1540.67 682.74 L1540.11 682.74 L1539.55 682.74 L1538.99 682.74 L1538.43 682.74 L1537.87 682.74 L1537.31 682.74 L1536.75 682.74 L1536.19 682.74 L1535.63 682.74 L1535.08 682.74 L1534.52 682.74 L1533.96 682.74 L1533.4 682.74 L1532.84 682.74 L1532.28 682.74 L1531.72 682.74 L1531.16 682.74 L1530.6 682.74 L1530.04 682.74 L1529.48 682.74 L1528.92 682.74 L1528.36 682.74 L1527.81 682.74 L1527.25 682.74 L1526.69 682.74 L1526.13 682.74 L1525.57 682.74 L1525.01 682.74 L1524.45 682.74 L1523.89 682.74 L1523.33 682.74 L1522.77 682.74 L1522.21 682.74 L1521.65 682.74 L1521.09 682.74 L1520.53 682.74 L1519.98 682.74 L1519.42 682.74 L1518.86 682.74 L1518.3 682.74 L1517.74 682.74 L1517.18 682.74 L1516.62 682.74 L1516.06 682.74 L1515.5 682.74 L1514.94 682.74 L1514.38 682.74 L1513.82 682.74 L1513.26 682.74 L1512.71 682.74 L1512.15 682.74 L1511.59 682.74 L1511.03 682.74 L1510.47 682.74 L1509.91 682.74 L1509.35 682.74 L1508.79 682.74 L1508.23 682.74 L1507.67 682.74 L1507.11 682.74 L1506.55 682.74 L1505.99 682.74 L1505.44 682.74 L1504.88 682.74 L1504.32 682.74 L1503.76 682.74 L1503.2 682.74 L1502.64 682.74 L1502.08 682.74 L1501.52 682.74 L1500.96 682.74 L1500.4 682.74 L1499.84 682.74 L1499.28 682.74 L1498.72 682.74 L1498.16 682.74 L1497.61 682.74 L1497.05 682.74 L1496.49 682.74 L1495.93 682.74 L1495.37 682.74 L1494.81 682.74 L1494.25 682.74 L1493.69 682.74 L1493.13 682.74 L1492.57 682.74 L1492.01 682.74 L1491.45 682.74 L1490.89 682.74 L1490.34 682.74 L1489.78 682.74 L1489.22 682.74 L1488.66 682.74 L1488.1 682.74 L1487.54 682.74 L1486.98 682.74 L1486.42 682.74 L1485.86 682.74 L1485.3 682.74 L1484.74 682.74 L1484.18 682.74 L1483.62 682.74 L1483.07 682.74 L1482.51 682.74 L1481.95 682.74 L1481.39 682.74 L1480.83 682.74 L1480.27 682.74 L1479.71 682.74 L1479.15 682.74 L1478.59 682.74 L1478.03 682.74 L1477.47 682.74 L1476.91 682.74 L1476.35 682.74 L1475.79 682.74 L1475.24 682.74 L1474.68 682.74 L1474.12 682.74 L1473.56 682.74 L1473 682.74 L1472.44 682.74 L1471.88 682.74 L1471.32 682.74 L1470.76 682.74 L1470.2 682.74 L1469.64 682.74 L1469.08 682.74 L1468.52 682.74 L1467.97 682.74 L1467.41 682.74 L1466.85 682.74 L1466.29 682.74 L1465.73 682.74 L1465.17 682.74 L1464.61 682.74 L1464.05 682.74 L1463.49 682.74 L1462.93 682.74 L1462.37 682.74 L1461.81 682.74 L1461.25 682.74 L1460.7 682.74 L1460.14 682.74 L1459.58 682.74 L1459.02 682.74 L1458.46 682.74 L1457.9 682.74 L1457.34 682.74 L1456.78 682.74 L1456.22 682.74 L1455.66 682.74 L1455.1 682.74 L1454.54 682.74 L1453.98 682.74 L1453.42 682.74 L1452.87 682.74 L1452.31 682.74 L1451.75 682.74 L1451.19 682.74 L1450.63 682.74 L1450.07 682.74 L1449.51 682.74 L1448.95 682.74 L1448.39 682.74 L1447.83 682.74 L1447.27 682.74 L1446.71 682.74 L1446.15 682.74 L1445.6 682.74 L1445.04 682.74 L1444.48 682.74 L1443.92 682.74 L1443.36 682.74 L1442.8 682.74 L1442.24 682.74 L1441.68 682.74 L1441.12 682.74 L1440.56 682.74 L1440 682.74 L1439.44 682.74 L1438.88 682.74 L1438.33 682.74 L1437.77 682.74 L1437.21 682.74 L1436.65 682.74 L1436.09 682.74 L1435.53 682.74 L1434.97 682.74 L1434.41 682.74 L1433.85 682.74 L1433.29 682.74 L1432.73 682.74 L1432.17 682.74 L1431.61 682.74 L1431.05 682.74 L1430.5 682.74 L1429.94 682.74 L1429.38 682.74 L1428.82 682.74 L1428.26 682.74 L1427.7 682.74 L1427.14 682.74 L1426.58 682.74 L1426.02 682.74 L1425.46 682.74 L1424.9 682.74 L1424.34 682.74 L1423.78 682.74 L1423.23 682.74 L1422.67 682.74 L1422.11 682.74 L1421.55 682.74 L1420.99 682.74 L1420.43 682.74 L1419.87 682.74 L1419.31 682.74 L1418.75 682.74 L1418.19 682.74 L1417.63 682.74 L1417.07 682.74 L1416.51 682.74 L1415.95 682.74 L1415.4 682.74 L1414.84 682.74 L1414.28 682.74 L1413.72 682.74 L1413.16 682.74 L1412.6 682.74 L1412.04 682.74 L1411.48 682.74 L1410.92 682.74 L1410.36 682.74 L1409.8 682.74 L1409.24 682.74 L1408.68 682.74 L1408.13 682.74 L1407.57 682.74 L1407.01 682.74 L1406.45 682.74 L1405.89 682.74 L1405.33 682.74 L1404.77 682.74 L1404.21 682.74 L1403.65 682.74 L1403.09 682.74 L1402.53 682.74 L1401.97 682.74 L1401.41 682.74 L1400.86 682.74 L1400.3 682.74 L1399.74 682.74 L1399.18 682.74 L1398.62 682.74 L1398.06 682.74 L1397.5 682.74 L1396.94 682.74 L1396.38 682.74 L1395.82 682.74 L1395.26 682.74 L1394.7 682.74 L1394.14 682.74 L1393.58 682.74 L1393.03 682.74 L1392.47 682.74 L1391.91 682.74 L1391.35 682.74 L1390.79 682.74 L1390.23 682.74 L1389.67 682.74 L1389.11 682.74 L1388.55 682.74 L1387.99 682.74 L1387.43 682.74 L1386.87 682.74 L1386.31 682.74 L1385.76 682.74 L1385.2 682.74 L1384.64 682.74 L1384.08 682.74 L1383.52 682.74 L1382.96 682.74 L1382.4 682.74 L1381.84 682.74 L1381.28 682.74 L1380.72 682.74 L1380.16 682.74 L1379.6 682.74 L1379.04 682.74 L1378.49 682.74 L1377.93 682.74 L1377.37 682.74 L1376.81 682.74 L1376.25 682.74 L1375.69 682.74 L1375.13 682.74 L1374.57 682.74 L1374.01 682.74 L1373.45 682.74 L1372.89 682.74 L1372.33 682.74 L1371.77 682.74 L1371.21 682.74 L1370.66 682.74 L1370.1 682.74 L1369.54 682.74 L1368.98 682.74 L1368.42 682.74 L1367.86 682.74 L1367.3 682.74 L1366.74 682.74 L1366.18 682.74 L1365.62 682.74 L1365.06 682.74 L1364.5 682.74 L1363.94 682.74 L1363.39 682.74 L1362.83 682.74 L1362.27 682.74 L1361.71 682.74 L1361.15 682.74 L1360.59 682.74 L1360.03 682.74 L1359.47 682.74 L1358.91 682.74 L1358.35 682.74 L1357.79 682.74 L1357.23 682.74 L1356.67 682.74 L1356.12 682.74 L1355.56 682.74 L1355 682.74 L1354.44 682.74 L1353.88 682.74 L1353.32 682.74 L1352.76 682.74 L1352.2 682.74 L1351.64 682.74 L1351.08 682.74 L1350.52 682.74 L1349.96 682.74 L1349.4 682.74 L1348.84 682.74 L1348.29 682.74 L1347.73 682.74 L1347.17 682.74 L1346.61 682.74 L1346.05 682.74 L1345.49 682.74 L1344.93 682.74 L1344.37 682.74 L1343.81 682.74 L1343.25 682.74 L1342.69 682.74 L1342.13 682.74 L1341.57 682.74 L1341.02 682.74 L1340.46 682.74 L1339.9 682.74 L1339.34 682.74 L1338.78 682.74 L1338.22 682.74 L1337.66 682.74 L1337.1 682.74 L1336.54 682.74 L1335.98 682.74 L1335.42 682.74 L1334.86 682.74 L1334.3 682.74 L1333.75 682.74 L1333.19 682.74 L1332.63 682.74 L1332.07 682.74 L1331.51 682.74 L1330.95 682.74 L1330.39 682.74 L1329.83 682.74 L1329.27 682.74 L1328.71 682.74 L1328.15 682.74 L1327.59 682.74 L1327.03 682.74 L1326.47 682.74 L1325.92 682.74 L1325.36 682.74 L1324.8 682.74 L1324.24 682.74 L1323.68 682.74 L1323.12 682.74 L1322.56 682.74 L1322 682.74 L1321.44 682.74 L1320.88 682.74 L1320.32 682.74 L1319.76 682.74 L1319.2 682.74 L1318.65 682.74 L1318.09 682.74 L1317.53 682.74 L1316.97 682.74 L1316.41 682.74 L1315.85 682.74 L1315.29 682.74 L1314.73 682.74 L1314.17 682.74 L1313.61 682.74 L1313.05 682.74 L1312.49 682.74 L1311.93 682.74 L1311.38 682.74 L1310.82 682.74 L1310.26 682.74 L1309.7 682.74 L1309.14 682.74 L1308.58 682.74 L1308.02 682.74 L1307.46 682.74 L1306.9 682.74 L1306.34 682.74 L1305.78 682.74 L1305.22 682.74 L1304.66 682.74 L1304.1 682.74 L1303.55 682.74 L1302.99 682.74 L1302.43 682.74 L1301.87 682.74 L1301.31 682.74 L1300.75 682.74 L1300.19 682.74 L1299.63 682.74 L1299.07 682.74 L1298.51 682.74 L1297.95 682.74 L1297.39 682.74 L1296.83 682.74 L1296.28 682.74 L1295.72 682.74 L1295.16 682.74 L1294.6 682.74 L1294.04 682.74 L1293.48 682.74 L1292.92 682.74 L1292.36 682.74 L1291.8 682.74 L1291.24 682.74 L1290.68 682.74 L1290.12 682.74 L1289.56 682.74 L1289 682.74 L1288.45 682.74 L1287.89 682.74 L1287.33 682.74 L1286.77 682.74 L1286.21 682.74 L1285.65 682.74 L1285.09 682.74 L1284.53 682.74 L1283.97 682.74 L1283.41 682.74 L1282.85 682.74 L1282.29 682.74 L1281.73 682.74 L1281.18 682.74 L1280.62 682.74 L1280.06 682.74 L1279.5 682.74 L1278.94 682.74 L1278.38 682.74 L1277.82 682.74 L1277.26 682.74 L1276.7 682.74 L1276.14 682.74 L1275.58 682.74 L1275.02 682.74 L1274.46 682.74 L1273.91 682.74 L1273.35 682.74 L1272.79 682.74 L1272.23 682.74 L1271.67 682.74 L1271.11 682.74 L1270.55 682.74 L1269.99 682.74 L1269.43 682.74 L1268.87 682.74 L1268.31 682.74 L1267.75 682.74 L1267.19 682.74 L1266.63 682.74 L1266.08 682.74 L1265.52 682.74 L1264.96 682.74 L1264.4 682.74 L1263.84 682.74 L1263.28 682.74 L1262.72 682.74 L1262.16 682.74 L1261.6 682.74 L1261.04 682.74 L1260.48 682.74 L1259.92 682.74 L1259.36 682.74 L1258.81 682.74 L1258.25 682.74 L1257.69 682.74 L1257.13 682.74 L1256.57 682.74 L1256.01 682.74 L1255.45 682.74 L1254.89 682.74 L1254.33 682.74 L1253.77 682.74 L1253.21 682.74 L1252.65 682.74 L1252.09 682.74 L1251.54 682.74 L1250.98 682.74 L1250.42 682.74 L1249.86 682.74 L1249.3 682.74 L1248.74 682.74 L1248.18 682.74 L1247.62 682.74 L1247.06 682.74 L1246.5 682.74 L1245.94 682.74 L1245.38 682.74 L1244.82 682.74 L1244.26 682.74 L1243.71 682.74 L1243.15 682.74 L1242.59 682.74 L1242.03 682.74 L1241.47 682.74 L1240.91 682.74 L1240.35 682.74 L1239.79 682.74 L1239.23 682.74 L1238.67 682.74 L1238.11 682.74 L1237.55 682.74 L1236.99 682.74 L1236.44 682.74 L1235.88 682.74 L1235.32 682.74 L1234.76 682.74 L1234.2 682.74 L1233.64 682.74 L1233.08 682.74 L1232.52 682.74 L1231.96 682.74 L1231.4 682.74 L1230.84 682.74 L1230.28 682.74 L1229.72 682.74 L1229.17 682.74 L1228.61 682.74 L1228.05 682.74 L1227.49 682.74 L1226.93 682.74 L1226.37 682.74 L1225.81 682.74 L1225.25 682.74 L1224.69 682.74 L1224.13 682.74 L1223.57 682.74 L1223.01 682.74 L1222.45 682.74 L1221.89 682.74 L1221.34 682.74 L1220.78 682.74 L1220.22 682.74 L1219.66 682.74 L1219.1 682.74 L1218.54 682.74 L1217.98 682.74 L1217.42 682.74 L1216.86 682.74 L1216.3 682.74 L1215.74 682.74 L1215.18 682.74 L1214.62 682.74 L1214.07 682.74 L1213.51 682.74 L1212.95 682.74 L1212.39 682.74 L1211.83 682.74 L1211.27 682.74 L1210.71 682.74 L1210.15 682.74 L1209.59 682.74 L1209.03 682.74 L1208.47 682.74 L1207.91 682.74 L1207.35 682.74 L1206.8 682.74 L1206.24 682.74 L1205.68 682.74 L1205.12 682.74 L1204.56 682.74 L1204 682.74 L1203.44 682.74 L1202.88 682.74 L1202.32 682.74 L1201.76 682.74 L1201.2 682.74 L1200.64 682.74 L1200.08 682.74 L1199.52 682.74 L1198.97 682.74 L1198.41 682.74 L1197.85 682.74 L1197.29 682.74 L1196.73 682.74 L1196.17 682.74 L1195.61 682.74 L1195.05 682.74 L1194.49 682.74 L1193.93 682.74 L1193.37 682.74 L1192.81 682.74 L1192.25 682.74 L1191.7 682.74 L1191.14 682.74 L1190.58 682.74 L1190.02 682.74 L1189.46 682.74 L1188.9 682.74 L1188.34 682.74 L1187.78 682.74 L1187.22 682.74 L1186.66 682.74 L1186.1 682.74 L1185.54 682.74 L1184.98 682.74 L1184.43 682.74 L1183.87 682.74 L1183.31 682.74 L1182.75 682.74 L1182.19 682.74 L1181.63 682.74 L1181.07 682.74 L1180.51 682.74 L1179.95 682.74 L1179.39 682.74 L1178.83 682.74 L1178.27 682.74 L1177.71 682.74 L1177.15 682.74 L1176.6 682.74 L1176.04 682.74 L1175.48 682.74 L1174.92 682.74 L1174.36 682.74 L1173.8 682.74 L1173.24 682.74 L1172.68 682.74 L1172.12 682.74 L1171.56 682.74 L1171 682.74 L1170.44 682.74 L1169.88 682.74 L1169.33 682.74 L1168.77 682.74 L1168.21 682.74 L1167.65 682.74 L1167.09 682.74 L1166.53 682.74 L1165.97 682.74 L1165.41 682.74 L1164.85 682.74 L1164.29 682.74 L1163.73 682.74 L1163.17 682.74 L1162.61 682.74 L1162.05 682.74 L1161.5 682.74 L1160.94 682.74 L1160.38 682.74 L1159.82 682.74 L1159.26 682.74 L1158.7 682.74 L1158.14 682.74 L1157.58 682.74 L1157.02 682.74 L1156.46 682.74 L1155.9 682.74 L1155.34 682.74 L1154.78 682.74 L1154.23 682.74 L1153.67 682.74 L1153.11 682.74 L1152.55 682.74 L1151.99 682.74 L1151.43 682.74 L1150.87 682.74 L1150.31 682.74 L1149.75 682.74 L1149.19 682.74 L1148.63 682.74 L1148.07 682.74 L1147.51 682.74 L1146.96 682.74 L1146.4 682.74 L1145.84 682.74 L1145.28 682.74 L1144.72 682.74 L1144.16 682.74 L1143.6 682.74 L1143.04 682.74 L1142.48 682.74 L1141.92 682.74 L1141.36 682.74 L1140.8 682.74 L1140.24 682.74 L1139.68 682.74 L1139.13 682.74 L1138.57 682.74 L1138.01 682.74 L1137.45 682.74 L1136.89 682.74 L1136.33 682.74 L1135.77 682.74 L1135.21 682.74 L1134.65 682.74 L1134.09 682.74 L1133.53 682.74 L1132.97 682.74 L1132.41 682.74 L1131.86 682.74 L1131.3 682.74 L1130.74 682.74 L1130.18 682.74 L1129.62 682.74 L1129.06 682.74 L1128.5 682.74 L1127.94 682.74 L1127.38 682.74 L1126.82 682.74 L1126.26 682.74 L1125.7 682.74 L1125.14 682.74 L1124.59 682.74 L1124.03 682.74 L1123.47 682.74 L1122.91 682.74 L1122.35 682.74 L1121.79 682.74 L1121.23 682.74 L1120.67 682.74 L1120.11 682.74 L1119.55 682.74 L1118.99 682.74 L1118.43 682.74 L1117.87 682.74 L1117.31 682.74 L1116.76 682.74 L1116.2 682.74 L1115.64 682.74 L1115.08 682.74 L1114.52 682.74 L1113.96 682.74 L1113.4 682.74 L1112.84 682.74 L1112.28 682.74 L1111.72 682.74 L1111.16 682.74 L1110.6 682.74 L1110.04 682.74 L1109.49 682.74 L1108.93 682.74 L1108.37 682.74 L1107.81 682.74 L1107.25 682.74 L1106.69 682.74 L1106.13 682.74 L1105.57 682.74 L1105.01 682.74 L1104.45 682.74 L1103.89 682.74 L1103.33 682.74 L1102.77 682.74 L1102.22 682.74 L1101.66 682.74 L1101.1 682.74 L1100.54 682.74 L1099.98 682.74 L1099.42 682.74 L1098.86 682.74 L1098.3 682.74 L1097.74 682.74 L1097.18 682.74 L1096.62 682.74 L1096.06 682.74 L1095.5 682.74 L1094.94 682.74 L1094.39 682.74 L1093.83 682.74 L1093.27 682.74 L1092.71 682.74 L1092.15 682.74 L1091.59 682.74 L1091.03 682.74 L1090.47 682.74 L1089.91 682.74 L1089.35 682.74 L1088.79 682.74 L1088.23 682.74 L1087.67 682.74 L1087.12 682.74 L1086.56 682.74 L1086 682.74 L1085.44 682.74 L1084.88 682.74 L1084.32 682.74 L1083.76 682.74 L1083.2 682.74 L1082.64 682.74 L1082.08 682.74 L1081.52 682.74 L1080.96 682.74 L1080.4 682.74 L1079.85 682.74 L1079.29 682.74 L1078.73 682.74 L1078.17 682.74 L1077.61 682.74 L1077.05 682.74 L1076.49 682.74 L1075.93 682.74 L1075.37 682.74 L1074.81 682.74 L1074.25 682.74 L1073.69 682.74 L1073.13 682.74 L1072.57 682.74 L1072.02 682.74 L1071.46 682.74 L1070.9 682.74 L1070.34 682.74 L1069.78 682.74 L1069.22 682.74 L1068.66 682.74 L1068.1 682.74 L1067.54 682.74 L1066.98 682.74 L1066.42 682.74 L1065.86 682.74 L1065.3 682.74 L1064.75 682.74 L1064.19 682.74 L1063.63 682.74 L1063.07 682.74 L1062.51 682.74 L1061.95 682.74 L1061.39 682.74 L1060.83 682.74 L1060.27 682.74 L1059.71 682.74 L1059.15 682.74 L1058.59 682.74 L1058.03 682.74 L1057.48 682.74 L1056.92 682.74 L1056.36 682.74 L1055.8 682.74 L1055.24 682.74 L1054.68 682.74 L1054.12 682.74 L1053.56 682.74 L1053 682.74 L1052.44 682.74 L1051.88 682.74 L1051.32 682.74 L1050.76 682.74 L1050.2 682.74 L1049.65 682.74 L1049.09 682.74 L1048.53 682.74 L1047.97 682.74 L1047.41 682.74 L1046.85 682.74 L1046.29 682.74 L1045.73 682.74 L1045.17 682.74 L1044.61 682.74 L1044.05 682.74 L1043.49 682.74 L1042.93 682.74 L1042.38 682.74 L1041.82 682.74 L1041.26 682.74 L1040.7 682.74 L1040.14 682.74 L1039.58 682.74 L1039.02 682.74 L1038.46 682.74 L1037.9 682.74 L1037.34 682.74 L1036.78 682.74 L1036.22 682.74 L1035.66 682.74 L1035.1 682.74 L1034.55 682.74 L1033.99 682.74 L1033.43 682.74 L1032.87 682.74 L1032.31 682.74 L1031.75 682.74 L1031.19 682.74 L1030.63 682.74 L1030.07 682.74 L1029.51 682.74 L1028.95 682.74 L1028.39 682.74 L1027.83 682.74 L1027.28 682.74 L1026.72 682.74 L1026.16 682.74 L1025.6 682.74 L1025.04 682.74 L1024.48 682.74 L1023.92 682.74 L1023.36 682.74 L1022.8 682.74 L1022.24 682.74 L1021.68 682.74 L1021.12 682.74 L1020.56 682.74 L1020.01 682.74 L1019.45 682.74 L1018.89 682.74 L1018.33 682.74 L1017.77 682.74 L1017.21 682.74 L1016.65 682.74 L1016.09 682.74 L1015.53 682.74 L1014.97 682.74 L1014.41 682.74 L1013.85 682.74 L1013.29 682.74 L1012.73 682.74 L1012.18 682.74 L1011.62 682.74 L1011.06 682.74 L1010.5 682.74 L1009.94 682.74 L1009.38 682.74 L1008.82 682.74 L1008.26 682.74 L1007.7 682.74 L1007.14 682.74 L1006.58 682.74 L1006.02 682.74 L1005.46 682.74 L1004.91 682.74 L1004.35 682.74 L1003.79 682.74 L1003.23 682.74 L1002.67 682.74 L1002.11 682.74 L1001.55 682.74 L1000.99 682.74 L1000.43 682.74 L999.872 682.74 L999.313 682.74 L998.754 682.74 L998.194 682.74 L997.635 682.74 L997.076 682.74 L996.517 682.74 L995.957 682.74 L995.398 682.74 L994.839 682.74 L994.28 682.74 L993.72 682.74 L993.161 682.74 L992.602 682.74 L992.043 682.74 L991.483 682.74 L990.924 682.74 L990.365 682.74 L989.806 682.74 L989.246 682.74 L988.687 682.74 L988.128 682.74 L987.569 682.74 L987.009 682.74 L986.45 682.74 L985.891 682.74 L985.332 682.74 L984.772 682.74 L984.213 682.74 L983.654 682.74 L983.095 682.74 L982.535 682.74 L981.976 682.74 L981.417 682.74 L980.858 682.74 L980.298 682.74 L979.739 682.74 L979.18 682.74 L978.621 682.74 L978.061 682.74 L977.502 682.74 L976.943 682.74 L976.384 682.74 L975.824 682.74 L975.265 682.74 L974.706 682.74 L974.147 682.74 L973.587 682.74 L973.028 682.74 L972.469 682.74 L971.91 682.74 L971.35 682.74 L970.791 682.74 L970.232 682.74 L969.673 682.74 L969.113 682.74 L968.554 682.74 L967.995 682.74 L967.436 682.74 L966.876 682.74 L966.317 682.74 L965.758 682.74 L965.199 682.74 L964.639 682.74 L964.08 682.74 L963.521 682.74 L962.962 682.74 L962.402 682.74 L961.843 682.74 L961.284 682.74 L960.725 682.74 L960.165 682.74 L959.606 682.74 L959.047 682.74 L958.488 682.74 L957.928 682.74 L957.369 682.74 L956.81 682.74 L956.251 682.74 L955.691 682.74 L955.132 682.74 L954.573 682.74 L954.014 682.74 L953.454 682.74 L952.895 682.74 L952.336 682.74 L951.777 682.74 L951.217 682.74 L950.658 682.74 L950.099 682.74 L949.54 682.74 L948.98 682.74 L948.421 682.74 L947.862 682.74 L947.303 682.74 L946.743 682.74 L946.184 682.74 L945.625 682.74 L945.066 682.74 L944.506 682.74 L943.947 682.74 L943.388 682.74 L942.829 682.74 L942.269 682.74 L941.71 682.74 L941.151 682.74 L940.592 682.74 L940.032 682.74 L939.473 682.74 L938.914 682.74 L938.355 682.74 L937.795 682.74 L937.236 682.74 L936.677 682.74 L936.118 682.74 L935.558 682.74 L934.999 682.74 L934.44 682.74 L933.881 682.74 L933.321 682.74 L932.762 682.74 L932.203 682.74 L931.644 682.74 L931.084 682.74 L930.525 682.74 L929.966 682.74 L929.406 682.74 L928.847 682.74 L928.288 682.74 L927.729 682.74 L927.169 682.74 L926.61 682.74 L926.051 682.74 L925.492 682.74 L924.932 682.74 L924.373 682.74 L923.814 682.74 L923.255 682.74 L922.695 682.74 L922.136 682.74 L921.577 682.74 L921.018 682.74 L920.458 682.74 L919.899 682.74 L919.34 682.74 L918.781 682.74 L918.221 682.74 L917.662 682.74 L917.103 682.74 L916.544 682.74 L915.984 682.74 L915.425 682.74 L914.866 682.74 L914.307 682.74 L913.747 682.74 L913.188 682.74 L912.629 682.74 L912.07 682.74 L911.51 682.74 L910.951 682.74 L910.392 682.74 L909.833 682.74 L909.273 682.74 L908.714 682.74 L908.155 682.74 L907.596 682.74 L907.036 682.74 L906.477 682.74 L905.918 682.74 L905.359 682.74 L904.799 682.74 L904.24 682.74 L903.681 682.74 L903.122 682.74 L902.562 682.74 L902.003 682.74 L901.444 682.74 L900.885 682.74 L900.325 682.74 L899.766 682.74 L899.207 682.74 L898.648 682.74 L898.088 682.74 L897.529 682.74 L896.97 682.74 L896.411 682.74 L895.851 682.74 L895.292 682.74 L894.733 682.74 L894.174 682.74 L893.614 682.74 L893.055 682.74 L892.496 682.74 L891.937 682.74 L891.377 682.74 L890.818 682.74 L890.259 682.74 L889.7 682.74 L889.14 682.74 L888.581 682.74 L888.022 682.74 L887.463 682.74 L886.903 682.74 L886.344 682.74 L885.785 682.74 L885.226 682.74 L884.666 682.74 L884.107 682.74 L883.548 682.74 L882.989 682.74 L882.429 682.74 L881.87 682.74 L881.311 682.74 L880.752 682.74 L880.192 682.74 L879.633 682.74 L879.074 682.74 L878.515 682.74 L877.955 682.74 L877.396 682.74 L876.837 682.74 L876.278 682.74 L875.718 682.74 L875.159 682.74 L874.6 682.74 L874.041 682.74 L873.481 682.74 L872.922 682.74 L872.363 682.74 L871.804 682.74 L871.244 682.74 L870.685 682.74 L870.126 682.74 L869.567 682.74 L869.007 682.74 L868.448 682.74 L867.889 682.74 L867.33 682.74 L866.77 682.74 L866.211 682.74 L865.652 682.74 L865.093 682.74 L864.533 682.74 L863.974 682.74 L863.415 682.74 L862.856 682.74 L862.296 682.74 L861.737 682.74 L861.178 682.74 L860.619 682.74 L860.059 682.74 L859.5 682.74 L858.941 682.74 L858.382 682.74 L857.822 682.74 L857.263 682.74 L856.704 682.74 L856.145 682.74 L855.585 682.74 L855.026 682.74 L854.467 682.74 L853.908 682.74 L853.348 682.74 L852.789 682.74 L852.23 682.74 L851.671 682.74 L851.111 682.74 L850.552 682.74 L849.993 682.74 L849.434 682.74 L848.874 682.74 L848.315 682.74 L847.756 682.74 L847.197 682.74 L846.637 682.74 L846.078 682.74 L845.519 682.74 L844.96 682.74 L844.4 682.74 L843.841 682.74 L843.282 682.74 L842.723 682.74 L842.163 682.74 L841.604 682.74 L841.045 682.74 L840.486 682.74 L839.926 682.74 L839.367 682.74 L838.808 682.74 L838.249 682.74 L837.689 682.74 L837.13 682.74 L836.571 682.74 L836.012 682.74 L835.452 682.74 L834.893 682.74 L834.334 682.74 L833.775 682.74 L833.215 682.74 L832.656 682.74 L832.097 682.74 L831.538 682.74 L830.978 682.74 L830.419 682.74 L829.86 682.74 L829.301 682.74 L828.741 682.74 L828.182 682.74 L827.623 682.74 L827.064 682.74 L826.504 682.74 L825.945 682.74 L825.386 682.74 L824.827 682.74 L824.267 682.74 L823.708 682.74 L823.149 682.74 L822.59 682.74 L822.03 682.74 L821.471 682.74 L820.912 682.74 L820.353 682.74 L819.793 682.74 L819.234 682.74 L818.675 682.74 L818.116 682.74 L817.556 682.74 L816.997 682.74 L816.438 682.74 L815.879 682.74 L815.319 682.74 L814.76 682.74 L814.201 682.74 L813.642 682.74 L813.082 682.74 L812.523 682.74 L811.964 682.74 L811.405 682.74 L810.845 682.74 L810.286 682.74 L809.727 682.74 L809.168 682.74 L808.608 682.74 L808.049 682.74 L807.49 682.74 L806.931 682.74 L806.371 682.74 L805.812 682.74 L805.253 682.74 L804.693 682.74 L804.134 682.74 L803.575 682.74 L803.016 682.74 L802.456 682.74 L801.897 682.74 L801.338 682.74 L800.779 682.74 L800.219 682.74 L799.66 682.74 L799.101 682.74 L798.542 682.74 L797.982 682.74 L797.423 682.74 L796.864 682.74 L796.305 682.74 L795.745 682.74 L795.186 682.74 L794.627 682.74 L794.068 682.74 L793.508 682.74 L792.949 682.74 L792.39 682.74 L791.831 682.74 L791.271 682.74 L790.712 682.74 L790.153 682.74 L789.594 682.74 L789.034 682.74 L788.475 682.74 L787.916 682.74 L787.357 682.74 L786.797 682.74 L786.238 682.74 L785.679 682.74 L785.12 682.74 L784.56 682.74 L784.001 682.74 L783.442 682.74 L782.883 682.74 L782.323 682.74 L781.764 682.74 L781.205 682.74 L780.646 682.74 L780.086 682.74 L779.527 682.74 L778.968 682.74 L778.409 682.74 L777.849 682.74 L777.29 682.74 L776.731 682.74 L776.172 682.74 L775.612 682.74 L775.053 682.74 L774.494 682.74 L773.935 682.74 L773.375 682.74 L772.816 682.74 L772.257 682.74 L771.698 682.74 L771.138 682.74 L770.579 682.74 L770.02 682.74 L769.461 682.74 L768.901 682.74 L768.342 682.74 L767.783 682.74 L767.224 682.74 L766.664 682.74 L766.105 682.74 L765.546 682.74 L764.987 682.74 L764.427 682.74 L763.868 682.74 L763.309 682.74 L762.75 682.74 L762.19 682.74 L761.631 682.74 L761.072 682.74 L760.513 682.74 L759.953 682.74 L759.394 682.74 L758.835 682.74 L758.276 682.74 L757.716 682.74 L757.157 682.74 L756.598 682.74 L756.039 682.74 L755.479 682.74 L754.92 682.74 L754.361 682.74 L753.802 682.74 L753.242 682.74 L752.683 682.74 L752.124 682.74 L751.565 682.74 L751.005 682.74 L750.446 682.74 L749.887 682.74 L749.328 682.74 L748.768 682.74 L748.209 682.74 L747.65 682.74 L747.091 682.74 L746.531 682.74 L745.972 682.74 L745.413 682.74 L744.854 682.74 L744.294 682.74 L743.735 682.74 L743.176 682.74 L742.617 682.74 L742.057 682.74 L741.498 682.74 L740.939 682.74 L740.38 682.74 L739.82 682.74 L739.261 682.74 L738.702 682.74 L738.143 682.74 L737.583 682.74 L737.024 682.74 L736.465 682.74 L735.906 682.74 L735.346 682.74 L734.787 682.74 L734.228 682.74 L733.669 682.74 L733.109 682.74 L732.55 682.74 L731.991 682.74 L731.432 682.74 L730.872 682.74 L730.313 682.74 L729.754 682.74 L729.195 682.74 L728.635 682.74 L728.076 682.74 L727.517 682.74 L726.958 682.74 L726.398 682.74 L725.839 682.74 L725.28 682.74 L724.721 682.74 L724.161 682.74 L723.602 682.74 L723.043 682.74 L722.484 682.74 L721.924 682.74 L721.365 682.74 L720.806 682.74 L720.247 682.74  Z\" fill=\"#3da44d\" fill-rule=\"evenodd\" fill-opacity=\"0.5\"/>\n<polyline clip-path=\"url(#clip783)\" style=\"stroke:#3da44d; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"720.247,683.386 720.806,683.386 721.365,683.386 721.924,683.386 722.484,683.386 723.043,683.386 723.602,683.386 724.161,683.386 724.721,683.386 725.28,683.386 725.839,683.386 726.398,683.386 726.958,683.386 727.517,683.386 728.076,683.386 728.635,683.386 729.195,683.386 729.754,683.386 730.313,683.386 730.872,683.386 731.432,683.386 731.991,683.386 732.55,683.386 733.109,683.386 733.669,683.386 734.228,683.386 734.787,683.386 735.346,683.386 735.906,683.386 736.465,683.386 737.024,683.386 737.583,683.386 738.143,683.386 738.702,683.386 739.261,683.386 739.82,683.386 740.38,683.386 740.939,683.386 741.498,683.386 742.057,683.386 742.617,683.386 743.176,683.386 743.735,683.386 744.294,683.386 744.854,683.386 745.413,683.386 745.972,683.386 746.531,683.386 747.091,683.386 747.65,683.386 748.209,683.386 748.768,683.386 749.328,683.386 749.887,683.386 750.446,683.386 751.005,683.386 751.565,683.386 752.124,683.386 752.683,683.386 753.242,683.386 753.802,683.386 754.361,683.386 754.92,683.386 755.479,683.386 756.039,683.386 756.598,683.386 757.157,683.386 757.716,683.386 758.276,683.386 758.835,683.386 759.394,683.386 759.953,683.386 760.513,683.386 761.072,683.386 761.631,683.386 762.19,683.386 762.75,683.386 763.309,683.386 763.868,683.386 764.427,683.386 764.987,683.386 765.546,683.386 766.105,683.386 766.664,683.386 767.224,683.386 767.783,683.386 768.342,683.386 768.901,683.386 769.461,683.386 770.02,683.386 770.579,683.386 771.138,683.386 771.698,683.386 772.257,683.386 772.816,683.386 773.375,683.386 773.935,683.386 774.494,683.386 775.053,683.386 775.612,683.386 776.172,683.386 776.731,683.386 777.29,683.386 777.849,683.386 778.409,683.386 778.968,683.386 779.527,683.386 780.086,683.386 780.646,683.386 781.205,683.386 781.764,683.386 782.323,683.386 782.883,683.386 783.442,683.386 784.001,683.386 784.56,683.386 785.12,683.386 785.679,683.386 786.238,683.386 786.797,683.386 787.357,683.386 787.916,683.386 788.475,683.386 789.034,683.386 789.594,683.386 790.153,683.386 790.712,683.386 791.271,683.386 791.831,683.386 792.39,683.386 792.949,683.386 793.508,683.386 794.068,683.386 794.627,683.386 795.186,683.386 795.745,683.386 796.305,683.386 796.864,683.386 797.423,683.386 797.982,683.386 798.542,683.386 799.101,683.386 799.66,683.386 800.219,683.386 800.779,683.386 801.338,683.386 801.897,683.386 802.456,683.386 803.016,683.386 803.575,683.386 804.134,683.386 804.693,683.386 805.253,683.386 805.812,683.386 806.371,683.386 806.931,683.386 807.49,683.386 808.049,683.386 808.608,683.386 809.168,683.386 809.727,683.386 810.286,683.386 810.845,683.386 811.405,683.386 811.964,683.386 812.523,683.386 813.082,683.386 813.642,683.386 814.201,683.386 814.76,683.386 815.319,683.386 815.879,683.386 816.438,683.386 816.997,683.386 817.556,683.386 818.116,683.386 818.675,683.386 819.234,683.386 819.793,683.386 820.353,683.386 820.912,683.386 821.471,683.386 822.03,683.386 822.59,683.386 823.149,683.386 823.708,683.386 824.267,683.386 824.827,683.386 825.386,683.386 825.945,683.386 826.504,683.386 827.064,683.386 827.623,683.386 828.182,683.386 828.741,683.386 829.301,683.386 829.86,683.386 830.419,683.386 830.978,683.386 831.538,683.386 832.097,683.386 832.656,683.386 833.215,683.386 833.775,683.386 834.334,683.386 834.893,683.386 835.452,683.386 836.012,683.386 836.571,683.386 837.13,683.386 837.689,683.386 838.249,683.386 838.808,683.386 839.367,683.386 839.926,683.386 840.486,683.386 841.045,683.386 841.604,683.386 842.163,683.386 842.723,683.386 843.282,683.386 843.841,683.386 844.4,683.386 844.96,683.386 845.519,683.386 846.078,683.386 846.637,683.386 847.197,683.386 847.756,683.386 848.315,683.386 848.874,683.386 849.434,683.386 849.993,683.386 850.552,683.386 851.111,683.386 851.671,683.386 852.23,683.386 852.789,683.386 853.348,683.386 853.908,683.386 854.467,683.386 855.026,683.386 855.585,683.386 856.145,683.386 856.704,683.386 857.263,683.386 857.822,683.386 858.382,683.386 858.941,683.386 859.5,683.386 860.059,683.386 860.619,683.386 861.178,683.386 861.737,683.386 862.296,683.386 862.856,683.386 863.415,683.386 863.974,683.386 864.533,683.386 865.093,683.386 865.652,683.386 866.211,683.386 866.77,683.386 867.33,683.386 867.889,683.386 868.448,683.386 869.007,683.386 869.567,683.386 870.126,683.386 870.685,683.386 871.244,683.386 871.804,683.386 872.363,683.386 872.922,683.386 873.481,683.386 874.041,683.386 874.6,683.386 875.159,683.386 875.718,683.386 876.278,683.386 876.837,683.386 877.396,683.386 877.955,683.386 878.515,683.386 879.074,683.386 879.633,683.386 880.192,683.386 880.752,683.386 881.311,683.386 881.87,683.386 882.429,683.386 882.989,683.386 883.548,683.386 884.107,683.386 884.666,683.386 885.226,683.386 885.785,683.386 886.344,683.386 886.903,683.386 887.463,683.386 888.022,683.386 888.581,683.386 889.14,683.386 889.7,683.386 890.259,683.386 890.818,683.386 891.377,683.386 891.937,683.386 892.496,683.386 893.055,683.386 893.614,683.386 894.174,683.386 894.733,683.386 895.292,683.386 895.851,683.386 896.411,683.386 896.97,683.386 897.529,683.386 898.088,683.386 898.648,683.386 899.207,683.386 899.766,683.386 900.325,683.386 900.885,683.386 901.444,683.386 902.003,683.386 902.562,683.386 903.122,683.386 903.681,683.386 904.24,683.386 904.799,683.386 905.359,683.386 905.918,683.386 906.477,683.386 907.036,683.386 907.596,683.386 908.155,683.386 908.714,683.386 909.273,683.386 909.833,683.386 910.392,683.386 910.951,683.386 911.51,683.386 912.07,683.386 912.629,683.386 913.188,683.386 913.747,683.386 914.307,683.386 914.866,683.386 915.425,683.386 915.984,683.386 916.544,683.386 917.103,683.386 917.662,683.386 918.221,683.386 918.781,683.386 919.34,683.386 919.899,683.386 920.458,683.386 921.018,683.386 921.577,683.386 922.136,683.386 922.695,683.386 923.255,683.386 923.814,683.386 924.373,683.386 924.932,683.386 925.492,683.386 926.051,683.386 926.61,683.386 927.169,683.386 927.729,683.386 928.288,683.386 928.847,683.386 929.406,683.386 929.966,683.386 930.525,683.386 931.084,683.386 931.644,683.386 932.203,683.386 932.762,683.386 933.321,683.386 933.881,683.386 934.44,683.386 934.999,683.386 935.558,683.386 936.118,683.386 936.677,683.386 937.236,683.386 937.795,683.386 938.355,683.386 938.914,683.386 939.473,683.386 940.032,683.386 940.592,683.386 941.151,683.386 941.71,683.386 942.269,683.386 942.829,683.386 943.388,683.386 943.947,683.386 944.506,683.386 945.066,683.386 945.625,683.386 946.184,683.386 946.743,683.386 947.303,683.386 947.862,683.386 948.421,683.386 948.98,683.386 949.54,683.386 950.099,683.386 950.658,683.386 951.217,683.386 951.777,683.386 952.336,683.386 952.895,683.386 953.454,683.386 954.014,683.386 954.573,683.386 955.132,683.386 955.691,683.386 956.251,683.386 956.81,683.386 957.369,683.386 957.928,683.386 958.488,683.386 959.047,683.386 959.606,683.386 960.165,683.386 960.725,683.386 961.284,683.386 961.843,683.386 962.402,683.386 962.962,683.386 963.521,683.386 964.08,683.386 964.639,683.386 965.199,683.386 965.758,683.386 966.317,683.386 966.876,683.386 967.436,683.386 967.995,683.386 968.554,683.386 969.113,683.386 969.673,683.386 970.232,683.386 970.791,683.386 971.35,683.386 971.91,683.386 972.469,683.386 973.028,683.386 973.587,683.386 974.147,683.386 974.706,683.386 975.265,683.386 975.824,683.386 976.384,683.386 976.943,683.386 977.502,683.386 978.061,683.386 978.621,683.386 979.18,683.386 979.739,683.386 980.298,683.386 980.858,683.386 981.417,683.386 981.976,683.386 982.535,683.386 983.095,683.386 983.654,683.386 984.213,683.386 984.772,683.386 985.332,683.386 985.891,683.386 986.45,683.386 987.009,683.386 987.569,683.386 988.128,683.386 988.687,683.386 989.246,683.386 989.806,683.386 990.365,683.386 990.924,683.386 991.483,683.386 992.043,683.386 992.602,683.386 993.161,683.386 993.72,683.386 994.28,683.386 994.839,683.386 995.398,683.386 995.957,683.386 996.517,683.386 997.076,683.386 997.635,683.386 998.194,683.386 998.754,683.386 999.313,683.386 999.872,683.386 1000.43,683.386 1000.99,683.386 1001.55,683.386 1002.11,683.386 1002.67,683.386 1003.23,683.386 1003.79,683.386 1004.35,683.386 1004.91,683.386 1005.46,683.386 1006.02,683.386 1006.58,683.386 1007.14,683.386 1007.7,683.386 1008.26,683.386 1008.82,683.386 1009.38,683.386 1009.94,683.386 1010.5,683.386 1011.06,683.386 1011.62,683.386 1012.18,683.386 1012.73,683.386 1013.29,683.386 1013.85,683.386 1014.41,683.386 1014.97,683.386 1015.53,683.386 1016.09,683.386 1016.65,683.386 1017.21,683.386 1017.77,683.386 1018.33,683.386 1018.89,683.386 1019.45,683.386 1020.01,683.386 1020.56,683.386 1021.12,683.386 1021.68,683.386 1022.24,683.386 1022.8,683.386 1023.36,683.386 1023.92,683.386 1024.48,683.386 1025.04,683.386 1025.6,683.386 1026.16,683.386 1026.72,683.386 1027.28,683.386 1027.83,683.386 1028.39,683.386 1028.95,683.386 1029.51,683.386 1030.07,683.386 1030.63,683.386 1031.19,683.386 1031.75,683.386 1032.31,683.386 1032.87,683.386 1033.43,683.386 1033.99,683.386 1034.55,683.386 1035.1,683.386 1035.66,683.386 1036.22,683.386 1036.78,683.386 1037.34,683.386 1037.9,683.386 1038.46,683.386 1039.02,683.386 1039.58,683.386 1040.14,683.386 1040.7,683.386 1041.26,683.386 1041.82,683.386 1042.38,683.386 1042.93,683.386 1043.49,683.386 1044.05,683.386 1044.61,683.386 1045.17,683.386 1045.73,683.386 1046.29,683.386 1046.85,683.386 1047.41,683.386 1047.97,683.386 1048.53,683.386 1049.09,683.386 1049.65,683.386 1050.2,683.386 1050.76,683.386 1051.32,683.386 1051.88,683.386 1052.44,683.386 1053,683.386 1053.56,683.386 1054.12,683.386 1054.68,683.386 1055.24,683.386 1055.8,683.386 1056.36,683.386 1056.92,683.386 1057.48,683.386 1058.03,683.386 1058.59,683.386 1059.15,683.386 1059.71,683.386 1060.27,683.386 1060.83,683.386 1061.39,683.386 1061.95,683.386 1062.51,683.386 1063.07,683.386 1063.63,683.386 1064.19,683.386 1064.75,683.386 1065.3,683.386 1065.86,683.386 1066.42,683.386 1066.98,683.386 1067.54,683.386 1068.1,683.386 1068.66,683.386 1069.22,683.386 1069.78,683.386 1070.34,683.386 1070.9,683.386 1071.46,683.386 1072.02,683.386 1072.57,683.386 1073.13,683.386 1073.69,683.386 1074.25,683.386 1074.81,683.386 1075.37,683.386 1075.93,683.386 1076.49,683.386 1077.05,683.386 1077.61,683.386 1078.17,683.386 1078.73,683.386 1079.29,683.386 1079.85,683.386 1080.4,683.386 1080.96,683.386 1081.52,683.386 1082.08,683.386 1082.64,683.386 1083.2,683.386 1083.76,683.386 1084.32,683.386 1084.88,683.386 1085.44,683.386 1086,683.386 1086.56,683.386 1087.12,683.386 1087.67,683.386 1088.23,683.386 1088.79,683.386 1089.35,683.386 1089.91,683.386 1090.47,683.386 1091.03,683.386 1091.59,683.386 1092.15,683.386 1092.71,683.386 1093.27,683.386 1093.83,683.386 1094.39,683.386 1094.94,683.386 1095.5,683.386 1096.06,683.386 1096.62,683.386 1097.18,683.386 1097.74,683.386 1098.3,683.386 1098.86,683.386 1099.42,683.386 1099.98,683.386 1100.54,683.386 1101.1,683.386 1101.66,683.386 1102.22,683.386 1102.77,683.386 1103.33,683.386 1103.89,683.386 1104.45,683.386 1105.01,683.386 1105.57,683.386 1106.13,683.386 1106.69,683.386 1107.25,683.386 1107.81,683.386 1108.37,683.386 1108.93,683.386 1109.49,683.386 1110.04,683.386 1110.6,683.386 1111.16,683.386 1111.72,683.386 1112.28,683.386 1112.84,683.386 1113.4,683.386 1113.96,683.386 1114.52,683.386 1115.08,683.386 1115.64,683.386 1116.2,683.386 1116.76,683.386 1117.31,683.386 1117.87,683.386 1118.43,683.386 1118.99,683.386 1119.55,683.386 1120.11,683.386 1120.67,683.386 1121.23,683.386 1121.79,683.386 1122.35,683.386 1122.91,683.386 1123.47,683.386 1124.03,683.386 1124.59,683.386 1125.14,683.386 1125.7,683.386 1126.26,683.386 1126.82,683.386 1127.38,683.386 1127.94,683.386 1128.5,683.386 1129.06,683.386 1129.62,683.386 1130.18,683.386 1130.74,683.386 1131.3,683.386 1131.86,683.386 1132.41,683.386 1132.97,683.386 1133.53,683.386 1134.09,683.386 1134.65,683.386 1135.21,683.386 1135.77,683.386 1136.33,683.386 1136.89,683.386 1137.45,683.386 1138.01,683.386 1138.57,683.386 1139.13,683.386 1139.68,683.386 1140.24,683.386 1140.8,683.386 1141.36,683.386 1141.92,683.386 1142.48,683.386 1143.04,683.386 1143.6,683.386 1144.16,683.386 1144.72,683.386 1145.28,683.386 1145.84,683.386 1146.4,683.386 1146.96,683.386 1147.51,683.386 1148.07,683.386 1148.63,683.386 1149.19,683.386 1149.75,683.386 1150.31,683.386 1150.87,683.386 1151.43,683.386 1151.99,683.386 1152.55,683.386 1153.11,683.386 1153.67,683.386 1154.23,683.386 1154.78,683.386 1155.34,683.386 1155.9,683.386 1156.46,683.386 1157.02,683.386 1157.58,683.386 1158.14,683.386 1158.7,683.386 1159.26,683.386 1159.82,683.386 1160.38,683.386 1160.94,683.386 1161.5,683.386 1162.05,683.386 1162.61,683.386 1163.17,683.386 1163.73,683.386 1164.29,683.386 1164.85,683.386 1165.41,683.386 1165.97,683.386 1166.53,683.386 1167.09,683.386 1167.65,683.386 1168.21,683.386 1168.77,683.386 1169.33,683.386 1169.88,683.386 1170.44,683.386 1171,683.386 1171.56,683.386 1172.12,683.386 1172.68,683.386 1173.24,683.386 1173.8,683.386 1174.36,683.386 1174.92,683.386 1175.48,683.386 1176.04,683.386 1176.6,683.386 1177.15,683.386 1177.71,683.386 1178.27,683.386 1178.83,683.386 1179.39,683.386 1179.95,683.386 1180.51,683.386 1181.07,683.386 1181.63,683.386 1182.19,683.386 1182.75,683.386 1183.31,683.386 1183.87,683.386 1184.43,683.386 1184.98,683.386 1185.54,683.386 1186.1,683.386 1186.66,683.386 1187.22,683.386 1187.78,683.386 1188.34,683.386 1188.9,683.386 1189.46,683.386 1190.02,683.386 1190.58,683.386 1191.14,683.386 1191.7,683.386 1192.25,683.386 1192.81,683.386 1193.37,683.386 1193.93,683.386 1194.49,683.386 1195.05,683.386 1195.61,683.386 1196.17,683.386 1196.73,683.386 1197.29,683.386 1197.85,683.386 1198.41,683.386 1198.97,683.386 1199.52,683.386 1200.08,683.386 1200.64,683.386 1201.2,683.386 1201.76,683.386 1202.32,683.386 1202.88,683.386 1203.44,683.386 1204,683.386 1204.56,683.386 1205.12,683.386 1205.68,683.386 1206.24,683.386 1206.8,683.386 1207.35,683.386 1207.91,683.386 1208.47,683.386 1209.03,683.386 1209.59,683.386 1210.15,683.386 1210.71,683.386 1211.27,683.386 1211.83,683.386 1212.39,683.386 1212.95,683.386 1213.51,683.386 1214.07,683.386 1214.62,683.386 1215.18,683.386 1215.74,683.386 1216.3,683.386 1216.86,683.386 1217.42,683.386 1217.98,683.386 1218.54,683.386 1219.1,683.386 1219.66,683.386 1220.22,683.386 1220.78,683.386 1221.34,683.386 1221.89,683.386 1222.45,683.386 1223.01,683.386 1223.57,683.386 1224.13,683.386 1224.69,683.386 1225.25,683.386 1225.81,683.386 1226.37,683.386 1226.93,683.386 1227.49,683.386 1228.05,683.386 1228.61,683.386 1229.17,683.386 1229.72,683.386 1230.28,683.386 1230.84,683.386 1231.4,683.386 1231.96,683.386 1232.52,683.386 1233.08,683.386 1233.64,683.386 1234.2,683.386 1234.76,683.386 1235.32,683.386 1235.88,683.386 1236.44,683.386 1236.99,683.386 1237.55,683.386 1238.11,683.386 1238.67,683.386 1239.23,683.386 1239.79,683.386 1240.35,683.386 1240.91,683.386 1241.47,683.386 1242.03,683.386 1242.59,683.386 1243.15,683.386 1243.71,683.386 1244.26,683.386 1244.82,683.386 1245.38,683.386 1245.94,683.386 1246.5,683.386 1247.06,683.386 1247.62,683.386 1248.18,683.386 1248.74,683.386 1249.3,683.386 1249.86,683.386 1250.42,683.386 1250.98,683.386 1251.54,683.386 1252.09,683.386 1252.65,683.386 1253.21,683.386 1253.77,683.386 1254.33,683.386 1254.89,683.386 1255.45,683.386 1256.01,683.386 1256.57,683.386 1257.13,683.386 1257.69,683.386 1258.25,683.386 1258.81,683.386 1259.36,683.386 1259.92,683.386 1260.48,683.386 1261.04,683.386 1261.6,683.386 1262.16,683.386 1262.72,683.386 1263.28,683.386 1263.84,683.386 1264.4,683.386 1264.96,683.386 1265.52,683.386 1266.08,683.386 1266.63,683.386 1267.19,683.386 1267.75,683.386 1268.31,683.386 1268.87,683.386 1269.43,683.386 1269.99,683.386 1270.55,683.386 1271.11,683.386 1271.67,683.386 1272.23,683.386 1272.79,683.386 1273.35,683.386 1273.91,683.386 1274.46,683.386 1275.02,683.386 1275.58,683.386 1276.14,683.386 1276.7,683.386 1277.26,683.386 1277.82,683.386 1278.38,683.386 1278.94,683.386 1279.5,683.386 1280.06,683.386 1280.62,683.386 1281.18,683.386 1281.73,683.386 1282.29,683.386 1282.85,683.386 1283.41,683.386 1283.97,683.386 1284.53,683.386 1285.09,683.386 1285.65,683.386 1286.21,683.386 1286.77,683.386 1287.33,683.386 1287.89,683.386 1288.45,683.386 1289,683.386 1289.56,683.386 1290.12,683.386 1290.68,683.386 1291.24,683.386 1291.8,683.386 1292.36,683.386 1292.92,683.386 1293.48,683.386 1294.04,683.386 1294.6,683.386 1295.16,683.386 1295.72,683.386 1296.28,683.386 1296.83,683.386 1297.39,683.386 1297.95,683.386 1298.51,683.386 1299.07,683.386 1299.63,683.386 1300.19,683.386 1300.75,683.386 1301.31,683.386 1301.87,683.386 1302.43,683.386 1302.99,683.386 1303.55,683.386 1304.1,683.386 1304.66,683.386 1305.22,683.386 1305.78,683.386 1306.34,683.386 1306.9,683.386 1307.46,683.386 1308.02,683.386 1308.58,683.386 1309.14,683.386 1309.7,683.386 1310.26,683.386 1310.82,683.386 1311.38,683.386 1311.93,683.386 1312.49,683.386 1313.05,683.386 1313.61,683.386 1314.17,683.386 1314.73,683.386 1315.29,683.386 1315.85,683.386 1316.41,683.386 1316.97,683.386 1317.53,683.386 1318.09,683.386 1318.65,683.386 1319.2,683.386 1319.76,683.386 1320.32,683.386 1320.88,683.386 1321.44,683.386 1322,683.386 1322.56,683.386 1323.12,683.386 1323.68,683.386 1324.24,683.386 1324.8,683.386 1325.36,683.386 1325.92,683.386 1326.47,683.386 1327.03,683.386 1327.59,683.386 1328.15,683.386 1328.71,683.386 1329.27,683.386 1329.83,683.386 1330.39,683.386 1330.95,683.386 1331.51,683.386 1332.07,683.386 1332.63,683.386 1333.19,683.386 1333.75,683.386 1334.3,683.386 1334.86,683.386 1335.42,683.386 1335.98,683.386 1336.54,683.386 1337.1,683.386 1337.66,683.386 1338.22,683.386 1338.78,683.386 1339.34,683.386 1339.9,683.386 1340.46,683.386 1341.02,683.386 1341.57,683.386 1342.13,683.386 1342.69,683.386 1343.25,683.386 1343.81,683.386 1344.37,683.386 1344.93,683.386 1345.49,683.386 1346.05,683.386 1346.61,683.386 1347.17,683.386 1347.73,683.386 1348.29,683.386 1348.84,683.386 1349.4,683.386 1349.96,683.386 1350.52,683.386 1351.08,683.386 1351.64,683.386 1352.2,683.386 1352.76,683.386 1353.32,683.386 1353.88,683.386 1354.44,683.386 1355,683.386 1355.56,683.386 1356.12,683.386 1356.67,683.386 1357.23,683.386 1357.79,683.386 1358.35,683.386 1358.91,683.386 1359.47,683.386 1360.03,683.386 1360.59,683.386 1361.15,683.386 1361.71,683.386 1362.27,683.386 1362.83,683.386 1363.39,683.386 1363.94,683.386 1364.5,683.386 1365.06,683.386 1365.62,683.386 1366.18,683.386 1366.74,683.386 1367.3,683.386 1367.86,683.386 1368.42,683.386 1368.98,683.386 1369.54,683.386 1370.1,683.386 1370.66,683.386 1371.21,683.386 1371.77,683.386 1372.33,683.386 1372.89,683.386 1373.45,683.386 1374.01,683.386 1374.57,683.386 1375.13,683.386 1375.69,683.386 1376.25,683.386 1376.81,683.386 1377.37,683.386 1377.93,683.386 1378.49,683.386 1379.04,683.386 1379.6,683.386 1380.16,683.386 1380.72,683.386 1381.28,683.386 1381.84,683.386 1382.4,683.386 1382.96,683.386 1383.52,683.386 1384.08,683.386 1384.64,683.386 1385.2,683.386 1385.76,683.386 1386.31,683.386 1386.87,683.386 1387.43,683.386 1387.99,683.386 1388.55,683.386 1389.11,683.386 1389.67,683.386 1390.23,683.386 1390.79,683.386 1391.35,683.386 1391.91,683.386 1392.47,683.386 1393.03,683.386 1393.58,683.386 1394.14,683.386 1394.7,683.386 1395.26,683.386 1395.82,683.386 1396.38,683.386 1396.94,683.386 1397.5,683.386 1398.06,683.386 1398.62,683.386 1399.18,683.386 1399.74,683.386 1400.3,683.386 1400.86,683.386 1401.41,683.386 1401.97,683.386 1402.53,683.386 1403.09,683.386 1403.65,683.386 1404.21,683.386 1404.77,683.386 1405.33,683.386 1405.89,683.386 1406.45,683.386 1407.01,683.386 1407.57,683.386 1408.13,683.386 1408.68,683.386 1409.24,683.386 1409.8,683.386 1410.36,683.386 1410.92,683.386 1411.48,683.386 1412.04,683.386 1412.6,683.386 1413.16,683.386 1413.72,683.386 1414.28,683.386 1414.84,683.386 1415.4,683.386 1415.95,683.386 1416.51,683.386 1417.07,683.386 1417.63,683.386 1418.19,683.386 1418.75,683.386 1419.31,683.386 1419.87,683.386 1420.43,683.386 1420.99,683.386 1421.55,683.386 1422.11,683.386 1422.67,683.386 1423.23,683.386 1423.78,683.386 1424.34,683.386 1424.9,683.386 1425.46,683.386 1426.02,683.386 1426.58,683.386 1427.14,683.386 1427.7,683.386 1428.26,683.386 1428.82,683.386 1429.38,683.386 1429.94,683.386 1430.5,683.386 1431.05,683.386 1431.61,683.386 1432.17,683.386 1432.73,683.386 1433.29,683.386 1433.85,683.386 1434.41,683.386 1434.97,683.386 1435.53,683.386 1436.09,683.386 1436.65,683.386 1437.21,683.386 1437.77,683.386 1438.33,683.386 1438.88,683.386 1439.44,683.386 1440,683.386 1440.56,683.386 1441.12,683.386 1441.68,683.386 1442.24,683.386 1442.8,683.386 1443.36,683.386 1443.92,683.386 1444.48,683.386 1445.04,683.386 1445.6,683.386 1446.15,683.386 1446.71,683.386 1447.27,683.386 1447.83,683.386 1448.39,683.386 1448.95,683.386 1449.51,683.386 1450.07,683.386 1450.63,683.386 1451.19,683.386 1451.75,683.386 1452.31,683.386 1452.87,683.386 1453.42,683.386 1453.98,683.386 1454.54,683.386 1455.1,683.386 1455.66,683.386 1456.22,683.386 1456.78,683.386 1457.34,683.386 1457.9,683.386 1458.46,683.386 1459.02,683.386 1459.58,683.386 1460.14,683.386 1460.7,683.386 1461.25,683.386 1461.81,683.386 1462.37,683.386 1462.93,683.386 1463.49,683.386 1464.05,683.386 1464.61,683.386 1465.17,683.386 1465.73,683.386 1466.29,683.386 1466.85,683.386 1467.41,683.386 1467.97,683.386 1468.52,683.386 1469.08,683.386 1469.64,683.386 1470.2,683.386 1470.76,683.386 1471.32,683.386 1471.88,683.386 1472.44,683.386 1473,683.386 1473.56,683.386 1474.12,683.386 1474.68,683.386 1475.24,683.386 1475.79,683.386 1476.35,683.386 1476.91,683.386 1477.47,683.386 1478.03,683.386 1478.59,683.386 1479.15,683.386 1479.71,683.386 1480.27,683.386 1480.83,683.386 1481.39,683.386 1481.95,683.386 1482.51,683.386 1483.07,683.386 1483.62,683.386 1484.18,683.386 1484.74,683.386 1485.3,683.386 1485.86,683.386 1486.42,683.386 1486.98,683.386 1487.54,683.386 1488.1,683.386 1488.66,683.386 1489.22,683.386 1489.78,683.386 1490.34,683.386 1490.89,683.386 1491.45,683.386 1492.01,683.386 1492.57,683.386 1493.13,683.386 1493.69,683.386 1494.25,683.386 1494.81,683.386 1495.37,683.386 1495.93,683.386 1496.49,683.386 1497.05,683.386 1497.61,683.386 1498.16,683.386 1498.72,683.386 1499.28,683.386 1499.84,683.386 1500.4,683.386 1500.96,683.386 1501.52,683.386 1502.08,683.386 1502.64,683.386 1503.2,683.386 1503.76,683.386 1504.32,683.386 1504.88,683.386 1505.44,683.386 1505.99,683.386 1506.55,683.386 1507.11,683.386 1507.67,683.386 1508.23,683.386 1508.79,683.386 1509.35,683.386 1509.91,683.386 1510.47,683.386 1511.03,683.386 1511.59,683.386 1512.15,683.386 1512.71,683.386 1513.26,683.386 1513.82,683.386 1514.38,683.386 1514.94,683.386 1515.5,683.386 1516.06,683.386 1516.62,683.386 1517.18,683.386 1517.74,683.386 1518.3,683.386 1518.86,683.386 1519.42,683.386 1519.98,683.386 1520.53,683.386 1521.09,683.386 1521.65,683.386 1522.21,683.386 1522.77,683.386 1523.33,683.386 1523.89,683.386 1524.45,683.386 1525.01,683.386 1525.57,683.386 1526.13,683.386 1526.69,683.386 1527.25,683.386 1527.81,683.386 1528.36,683.386 1528.92,683.386 1529.48,683.386 1530.04,683.386 1530.6,683.386 1531.16,683.386 1531.72,683.386 1532.28,683.386 1532.84,683.386 1533.4,683.386 1533.96,683.386 1534.52,683.386 1535.08,683.386 1535.63,683.386 1536.19,683.386 1536.75,683.386 1537.31,683.386 1537.87,683.386 1538.43,683.386 1538.99,683.386 1539.55,683.386 1540.11,683.386 1540.67,683.386 1541.23,683.386 1541.79,683.386 1542.35,683.386 1542.9,683.386 1543.46,683.386 1544.02,683.386 1544.58,683.386 1545.14,683.386 1545.7,683.386 1546.26,683.386 1546.82,683.386 1547.38,683.386 1547.94,683.386 1548.5,683.386 1549.06,683.386 1549.62,683.386 1550.18,683.386 1550.73,683.386 1551.29,683.386 1551.85,683.386 1552.41,683.386 1552.97,683.386 1553.53,683.386 1554.09,683.386 1554.65,683.386 1555.21,683.386 1555.77,683.386 1556.33,683.386 1556.89,683.386 1557.45,683.386 1558,683.386 1558.56,683.386 1559.12,683.386 1559.68,683.386 1560.24,683.386 1560.8,683.386 1561.36,683.386 1561.92,683.386 1562.48,683.386 1563.04,683.386 1563.6,683.386 1564.16,683.386 1564.72,683.386 1565.28,683.386 1565.83,683.386 1566.39,683.386 1566.95,683.386 1567.51,683.386 1568.07,683.386 1568.63,683.386 1569.19,683.386 1569.75,683.386 1570.31,683.386 1570.87,683.386 1571.43,683.386 1571.99,683.386 1572.55,683.386 1573.1,683.386 1573.66,683.386 1574.22,683.386 1574.78,683.386 1575.34,683.386 1575.9,683.386 1576.46,683.386 1577.02,683.386 1577.58,683.386 1578.14,683.386 1578.7,683.386 1579.26,683.386 1579.82,683.386 1580.37,683.386 1580.93,683.386 1581.49,683.386 1582.05,683.386 1582.61,683.386 1583.17,683.386 1583.73,683.386 1584.29,683.386 1584.85,683.386 1585.41,683.386 1585.97,683.386 1586.53,683.386 1587.09,683.386 1587.65,683.386 1588.2,683.386 1588.76,683.386 1589.32,683.386 1589.88,683.386 1590.44,683.386 1591,683.386 1591.56,683.386 1592.12,683.386 1592.68,683.386 1593.24,683.386 1593.8,683.386 1594.36,683.386 1594.92,683.386 1595.47,683.386 1596.03,683.386 1596.59,683.386 1597.15,683.386 1597.71,683.386 1598.27,683.386 1598.83,683.386 1599.39,683.386 1599.95,683.386 1600.51,683.386 1601.07,683.386 1601.63,683.386 1602.19,683.386 1602.74,683.386 1603.3,683.386 1603.86,683.386 1604.42,683.386 1604.98,683.386 1605.54,683.386 1606.1,683.386 1606.66,683.386 1607.22,683.386 1607.78,683.386 1608.34,683.386 1608.9,683.386 1609.46,683.386 1610.02,683.386 1610.57,683.386 1611.13,683.386 1611.69,683.386 1612.25,683.386 1612.81,683.386 1613.37,683.386 1613.93,683.386 1614.49,683.386 1615.05,683.386 1615.61,683.386 1616.17,683.386 1616.73,683.386 1617.29,683.386 1617.84,683.386 1618.4,683.386 1618.96,683.386 1619.52,683.386 1620.08,683.386 1620.64,683.386 1621.2,683.386 1621.76,683.386 1622.32,683.386 1622.88,683.386 1623.44,683.386 1624,683.386 1624.56,683.386 1625.11,683.386 1625.67,683.386 1626.23,683.386 1626.79,683.386 1627.35,683.386 1627.91,683.386 1628.47,683.386 1629.03,683.386 1629.59,683.386 1630.15,683.386 1630.71,683.386 1631.27,683.386 1631.83,683.386 1632.39,683.386 1632.94,683.386 1633.5,683.386 1634.06,683.386 1634.62,683.386 1635.18,683.386 1635.74,683.386 1636.3,683.386 1636.86,683.386 1637.42,683.386 1637.98,683.386 1638.54,683.386 1639.1,683.386 1639.66,683.386 1640.21,683.386 1640.77,683.386 1641.33,683.386 1641.89,683.386 1642.45,683.386 1643.01,683.386 1643.57,683.386 1644.13,683.386 1644.69,683.386 1645.25,683.386 1645.81,683.386 1646.37,683.386 1646.93,683.386 1647.48,683.386 1648.04,683.386 1648.6,683.386 1649.16,683.386 1649.72,683.386 1650.28,683.386 1650.84,683.386 1651.4,683.386 1651.96,683.386 1652.52,683.386 1653.08,683.386 1653.64,683.386 1654.2,683.386 1654.76,683.386 1655.31,683.386 1655.87,683.386 1656.43,683.386 1656.99,683.386 1657.55,683.386 1658.11,683.386 1658.67,683.386 1659.23,683.386 1659.79,683.386 1660.35,683.386 1660.91,683.386 1661.47,683.386 1662.03,683.386 1662.58,683.386 1663.14,683.386 1663.7,683.386 1664.26,683.386 1664.82,683.386 1665.38,683.386 1665.94,683.386 1666.5,683.386 1667.06,683.386 1667.62,683.386 1668.18,683.386 1668.74,683.386 1669.3,683.386 1669.85,683.386 1670.41,683.386 1670.97,683.386 1671.53,683.386 1672.09,683.386 1672.65,683.386 1673.21,683.386 1673.77,683.386 1674.33,683.386 1674.89,683.386 1675.45,683.386 1676.01,683.386 1676.57,683.386 1677.13,683.386 1677.68,683.386 1678.24,683.386 1678.8,683.386 1679.36,683.386 1679.92,683.386 1680.48,683.386 1681.04,683.386 1681.6,683.386 1682.16,683.386 1682.72,683.386 1683.28,683.386 1683.84,683.386 1684.4,683.386 1684.95,683.386 1685.51,683.386 1686.07,683.386 1686.63,683.386 1687.19,683.386 1687.75,683.386 1688.31,683.386 1688.87,683.386 1689.43,683.386 1689.99,683.386 1690.55,683.386 1691.11,683.386 1691.67,683.386 1692.23,683.386 1692.78,683.386 1693.34,683.386 1693.9,683.386 1694.46,683.386 1695.02,683.386 1695.58,683.386 1696.14,683.386 1696.7,683.386 1697.26,683.386 1697.82,683.386 1698.38,683.386 1698.94,683.386 1699.5,683.386 1700.05,683.386 1700.61,683.386 1701.17,683.386 1701.73,683.386 1702.29,683.386 1702.85,683.386 1703.41,683.386 1703.97,683.386 1704.53,683.386 1705.09,683.386 1705.65,683.386 1706.21,683.386 1706.77,683.386 1707.32,683.386 1707.88,683.386 1708.44,683.386 1709,683.386 1709.56,683.386 1710.12,683.386 1710.68,683.386 1711.24,683.386 1711.8,683.386 1712.36,683.386 1712.92,683.386 1713.48,683.386 1714.04,683.386 1714.6,683.386 1715.15,683.386 1715.71,683.386 1716.27,683.386 1716.83,683.386 1717.39,683.386 1717.95,683.386 1718.51,683.386 1719.07,683.386 1719.63,683.386 1720.19,683.386 1720.75,683.386 1721.31,683.386 1721.87,683.386 1722.42,683.386 1722.98,683.386 1723.54,683.386 1724.1,683.386 1724.66,683.386 1725.22,683.386 1725.78,683.386 1726.34,683.386 1726.9,683.386 1727.46,683.386 1728.02,683.386 1728.58,683.386 1729.14,683.386 1729.69,683.386 1730.25,683.386 1730.81,683.386 1731.37,683.386 1731.93,683.386 1732.49,683.386 1733.05,683.386 1733.61,683.386 1734.17,683.386 1734.73,683.386 1735.29,683.386 1735.85,683.386 1736.41,683.386 1736.97,683.386 1737.52,683.386 1738.08,683.386 1738.64,683.386 1739.2,683.386 1739.76,683.386 1740.32,683.386 1740.88,683.386 1741.44,683.386 1742,683.386 1742.56,683.386 1743.12,683.386 1743.68,683.386 1744.24,683.386 1744.79,683.386 1745.35,683.386 1745.91,683.386 1746.47,683.386 1747.03,683.386 1747.59,683.386 1748.15,683.386 1748.71,683.386 1749.27,683.386 1749.83,683.386 1750.39,683.386 1750.95,683.386 1751.51,683.386 1752.06,683.386 1752.62,683.386 1753.18,683.386 1753.74,683.386 1754.3,683.386 1754.86,683.386 1755.42,683.386 1755.98,683.386 1756.54,683.386 1757.1,683.386 1757.66,683.386 1758.22,683.386 1758.78,683.386 1759.34,683.386 1759.89,683.386 1760.45,683.386 1761.01,683.386 1761.57,683.386 1762.13,683.386 1762.69,683.386 1763.25,683.386 1763.81,683.386 1764.37,683.386 1764.93,683.386 1765.49,683.386 1766.05,683.386 1766.61,683.386 1767.16,683.386 1767.72,683.386 1768.28,683.386 1768.84,683.386 1769.4,683.386 1769.96,683.386 1770.52,683.386 1771.08,683.386 1771.64,683.386 1772.2,683.386 1772.76,683.386 1773.32,683.386 1773.88,683.386 1774.43,683.386 1774.99,683.386 1775.55,683.386 1776.11,683.386 1776.67,683.386 1777.23,683.386 1777.79,683.386 1778.35,683.386 1778.91,683.386 1779.47,683.386 1780.03,683.386 1780.59,683.386 1781.15,683.386 1781.71,683.386 1782.26,683.386 1782.82,683.386 1783.38,683.386 1783.94,683.386 1784.5,683.386 1785.06,683.386 1785.62,683.386 1786.18,683.386 1786.74,683.386 1787.3,683.386 1787.86,683.386 1788.42,683.386 1788.98,683.386 1789.53,683.386 1790.09,683.386 1790.65,683.386 1791.21,683.386 1791.77,683.386 1792.33,683.386 1792.89,683.386 1793.45,683.386 1794.01,683.386 1794.57,683.386 1795.13,683.386 1795.69,683.386 1796.25,683.386 1796.8,683.386 1797.36,683.386 1797.92,683.386 1798.48,683.386 1799.04,683.386 1799.6,683.386 1800.16,683.386 1800.72,683.386 1801.28,683.386 1801.84,683.386 1802.4,683.386 1802.96,683.386 1803.52,683.386 1804.08,683.386 1804.63,683.386 1805.19,683.386 1805.75,683.386 1806.31,683.386 1806.87,683.386 1807.43,683.386 1807.99,683.386 1808.55,683.386 1809.11,683.386 1809.67,683.386 1810.23,683.386 1810.79,683.386 1811.35,683.386 1811.9,683.386 1812.46,683.386 1813.02,683.386 1813.58,683.386 1814.14,683.386 1814.7,683.386 1815.26,683.386 1815.82,683.386 1816.38,683.386 1816.94,683.386 1817.5,683.386 1818.06,683.386 1818.62,683.386 1819.18,683.386 1819.73,683.386 1820.29,683.386 1820.85,683.386 1821.41,683.386 1821.97,683.386 1822.53,683.386 1823.09,683.386 1823.65,683.386 1824.21,683.386 1824.77,683.386 1825.33,683.386 1825.89,683.386 1826.45,683.386 1827,683.386 1827.56,683.386 1828.12,683.386 1828.68,683.386 1829.24,683.386 1829.8,683.386 1830.36,683.386 1830.92,683.386 1831.48,683.386 1832.04,683.386 1832.6,683.386 1833.16,683.386 1833.72,683.386 1834.27,683.386 1834.83,683.386 1835.39,683.386 1835.95,683.386 1836.51,683.386 1837.07,683.386 1837.63,683.386 1838.19,683.386 \"/>\n</svg>\n","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"In this case the projected energy and the shift are close to each other and the error bars are hard to see.","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"The problem was just a toy example, as the dimension of the Hamiltonian is rather small:","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"dimension(H)","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"462","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"In this case, it's easy (and more efficient) to calculate the exact ground state energy using standard linear algebra. Read more about Rimu's capabilities for exact diagonalization in the example \"Exact diagonalization\".","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"edp = ExactDiagonalizationProblem(H)\nexact_energy = solve(edp).values[1]","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"-4.021502406906472","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"We finish by comparing our FCIQMC results with the exact computation.","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"println(\n    \"\"\"\n    Energy from $steps_measure steps with $target_walkers walkers:\n    Shift: $(se.mean) ± $(se.err)\n    Projected Energy: $(v.val) ± ($(v.val_l), $(v.val_u))\n    Exact Energy: $exact_energy\n    \"\"\"\n)\n\n","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"Energy from 2000 steps with 1000 walkers:\nShift: -4.023689256885814 ± 0.02423440543217328\nProjected Energy: -4.014083856020202 ± (0.002872099829682284, 0.0032541462053634618)\nExact Energy: -4.021502406906472\n\n","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"This page was generated using Literate.jl.","category":"page"},{"location":"statstools.html#Module-StatsTools","page":"StatsTools","title":"Module StatsTools","text":"","category":"section"},{"location":"statstools.html","page":"StatsTools","title":"StatsTools","text":"The  module StatsTools contains helper function for analysis and post processing of Monte Carlo data.","category":"page"},{"location":"statstools.html#Blocking-analysis","page":"StatsTools","title":"Blocking analysis","text":"","category":"section"},{"location":"statstools.html","page":"StatsTools","title":"StatsTools","text":"After equilibration, FCIQMC produces information about observables through correlated time series. In order to estimate the statistical errors the time series need to be decorrelated. The main workhorse for achieving this is the blocking_analysis, which is based on the paper by Flyvberg and Peterson JCP (1989), and automated with the M test of Jonsson PRE (2018).","category":"page"},{"location":"statstools.html","page":"StatsTools","title":"StatsTools","text":"Analysing the stochastic errors of observables obtained from the ratio of sample means is done with ratio_of_means, where error propagation of correlated uncertainties is done with the help of the package MonteCarloMeasurements.","category":"page"},{"location":"statstools.html","page":"StatsTools","title":"StatsTools","text":"Many convenience functions are implemented for directly analysing data obtained from solve as a DataFrame. See, e.g., shift_estimator and projected_energy. Asymptotically unbiased estimators are implemented as mixed_estimator, growth_estimator and rayleigh_replica_estimator.","category":"page"},{"location":"statstools.html#Exported","page":"StatsTools","title":"Exported","text":"","category":"section"},{"location":"statstools.html","page":"StatsTools","title":"StatsTools","text":"Modules = [StatsTools]\nPages = [\"StatsTools.jl\", \"blocking.jl\", \"ratio_of_means.jl\", \"convenience.jl\",\n  \"variances.jl\", \"growth_witness.jl\", \"reweighting.jl\", \"fidelity.jl\", \"variational_energy_estimator.jl\"\n]\nPrivate = false","category":"page"},{"location":"statstools.html#Rimu.StatsTools","page":"StatsTools","title":"Rimu.StatsTools","text":"Tools for the statistical analysis of Monte Carlo data.\n\nExports:\n\nblocking_analysis\nblocking_analysis_data\nratio_of_means\ngrowth_witness\nsmoothen\nshift_estimator\nprojected_energy\nvariational_energy_estimator\ngrowth_estimator\ngrowth_estimator_analysis\nmixed_estimator\nmixed_estimator_analysis\nrayleigh_replica_estimator\nrayleigh_replica_estimator_analysis\nval_and_errs\nval\nmean_and_se\n\n\n\n\n\n","category":"module"},{"location":"statstools.html#Rimu.StatsTools.blocking_analysis-Tuple{AbstractVector}","page":"StatsTools","title":"Rimu.StatsTools.blocking_analysis","text":"blocking_analysis(v::AbstractVector; α = 0.01, corrected = true, skip=0, warn=true)\n-> BlockingResult(mean, err, err_err, p_cov, k, blocks)\n\nCompute the sample mean mean and estimate the standard deviation of the mean (standard error) err of a correlated time series. It uses the blocking algorithm from Flyvberg and Peterson JCP (1989) and the M test of Jonsson PRE (2018) at significance level 1-α.\n\nUse skip to skip the first skip elements in v. corrected controls whether bias correction for variances is used. If decorrelating the time series fails according to the M test, NaN is returned as the standard error and -1 for k. The keyword argument warn controls whether a warning message is logged.\n\nThe summary result is returned as a BlockingResult. k - 1 is the number of blocking transformations required to pass the hypothesis test for an uncorrelated time series and err_err the estimated standard error or err.\n\nThe detailed results from each reblocking step can be obtained with blocking_analysis_data.\n\nSee BlockingResult, shift_estimator, ratio_of_means, blocking_analysis_data.\n\n\n\n\n\n","category":"method"},{"location":"statstools.html#Rimu.StatsTools.blocking_analysis_data-Tuple{AbstractVector}","page":"StatsTools","title":"Rimu.StatsTools.blocking_analysis_data","text":"blocking_analysis_data(v::AbstractVector; kwargs...) ->\n(; br::BlockingResult, df::DataFrame)\n\nPerform a blocking_analysis and return the summary result br as well as a DataFrame df with information about the standard error in each blocking step.\n\nFor a description of the keyword arguments see blocking_analysis.\n\nExample\n\njulia> data = smoothen(rand(10_000), 2^6); # generate correlated data\n\njulia> br, df = blocking_analysis_data(data)\n(br = BlockingResult{Float64}\n  mean = 0.5088 ± 0.0029\n  with uncertainty of ± 0.00023454488294744232\n  from 78 blocks after 7 transformations (k = 8).\n, df = 13×6 DataFrame\n Row │ blocks  mean      std_err      std_err_err  p_cov       mj\n     │ Int64   Float64   Float64      Float64      Float64     Float64\n─────┼──────────────────────────────────────────────────────────────────────\n   1 │  10000  0.508806  0.000375044  2.6521e-6    1.40658e-7  9715.08\n   2 │   5000  0.508806  0.000528547  5.28599e-6   2.79361e-7  4778.14\n   3 │   2500  0.508806  0.000743386  1.05152e-5   5.52622e-7  2298.64\n   4 │   1250  0.508806  0.00104064   2.08212e-5   1.08293e-6  1056.24\n   5 │    625  0.508806  0.00144177   4.08121e-5   2.07871e-6   427.949\n   6 │    312  0.508736  0.00194209   7.78707e-5   3.77171e-6   128.711\n   7 │    156  0.508736  0.00247921   0.00014081   6.14647e-6    17.3075\n   8 │     78  0.508736  0.00291063   0.000234545  8.47174e-6     0.731386\n   9 │     39  0.508736  0.00284613   0.000326474  8.10046e-6     0.901054\n  10 │     19  0.508241  0.0026998    0.000449967  7.28892e-6     2.85915\n  11 │      9  0.507939  0.00359907   0.000899766  1.29533e-5     1.08644\n  12 │      4  0.509327  0.00440559   0.00179857   1.94092e-5     0.0370381\n  13 │      2  0.509327  0.00432708   0.00305971   1.87237e-5     0.125)\n\njulia> using StatsPlots; unicodeplots();\n\njulia> plot([br.k,br.k],[0.0,maximum(df.std_err.+df.std_err_err)], label=\"m test\");\n\njulia> @df df plot!(\n           1:length(:std_err), :std_err;\n           err=:std_err_err, xlabel=\"k\", label=\"std err\",\n           title=\"std err vs blocking steps\"\n       )\n               ⠀⠀⠀⠀⠀⠀⠀⠀⠀std err vs blocking steps⠀⠀⠀⠀⠀⠀⠀⠀\n               ┌────────────────────────────────────────┐\n    0.00423501 │⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⡀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⢠⠀⠀⠀⠀│ m test\n               │⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⡇⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⢀⠀⠀⢸⠀⠀⠀⠀│ std err\n               │⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⡇⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⢸⠀⠀⢸⠀⠀⠀⠀│\n               │⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⡇⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⢸⠀⠀⢸⠀⠀⠀⠀│\n               │⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⡇⠀⠀⠀⠀⠀⠀⠀⠀⡇⠀⡠⢺⠒⠒⢺⠀⠀⠀⠀│\n               │⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⡇⠀⠀⡀⠀⠀⡆⣀⠤⡗⠉⠀⢸⠀⠀⢸⡆⠀⠀⠀│\n               │⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⢀⡧⠤⠔⡗⠊⠉⡏⠀⠀⡇⠀⠀⢸⠀⠀⢸⢣⠀⠀⠀│\n               │⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⢀⠔⠁⡇⠀⠀⠁⠀⠀⠁⠀⠀⠁⠀⠀⠀⠀⠀⢸⠸⡀⠀⠀│\n               │⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⢀⠴⠁⠀⠀⡇⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠸⠀⡇⠀⠀│\n               │⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⢀⠔⠁⠀⠀⠀⠀⡇⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⢸⠀⠀│\n               │⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⢀⠔⠊⠀⠀⠀⠀⠀⠀⡇⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠈⣦⠀│\n               │⠀⠀⠀⠀⠀⠀⠀⠀⡠⠔⠒⠁⠀⠀⠀⠀⠀⠀⠀⠀⡇⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⢹⠀│\n               │⠀⠀⠀⢀⣀⠤⠒⠉⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⡇⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⢸⠀│\n               │⠀⠒⠉⠁⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⡇⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⢸⠀│\n   -0.00012335 │⠤⠤⠤⠤⠤⠤⠤⠤⠤⠤⠤⠤⠤⠤⠤⠤⠤⠤⠤⠤⠧⠤⠤⠤⠤⠤⠤⠤⠤⠤⠤⠤⠤⠤⠤⠤⠤⠤⠤⠤│\n               └────────────────────────────────────────┘\n               ⠀0.64⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀k⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀13.36⠀\n\nA vertical line at k==8 indicates the blocking step identified by hypothesis testing to decorrelate the time series data. The decorrelation length can thus be estimated at 2^k-1 = 2^7 = 128. Note that the data was correlated with a sliding window of 2^6 steps.\n\nSee blocking_analysis, BlockingResult.\n\n\n\n\n\n","category":"method"},{"location":"statstools.html#Rimu.StatsTools.mean_and_se-Tuple{Rimu.StatsTools.BlockingResult}","page":"StatsTools","title":"Rimu.StatsTools.mean_and_se","text":"mean_and_se(v::AbstractVector; α = 0.01, corrected::Bool=true, skip=0) -> mean, err\nmean_and_se(r::BlockingResult) -> mean, err\n\nReturn the mean and standard error (as a tuple) of a time series obtained from blocking_analysis. See also BlockingResult.\n\n\n\n\n\n","category":"method"},{"location":"statstools.html#Statistics.cov-Tuple{Rimu.StatsTools.BlockingResult{<:Complex}}","page":"StatsTools","title":"Statistics.cov","text":"cov(r::BlockingResult{<:Complex})\n\nReturn the covariance matrix of the multivariate normal distribution approximating the uncertainty of the blocking result r of a complex time series. See (https://en.wikipedia.org/wiki/Complexnormaldistribution).\n\n\n\n\n\n","category":"method"},{"location":"statstools.html#Rimu.StatsTools.ratio_of_means-Tuple{Any, Any}","page":"StatsTools","title":"Rimu.StatsTools.ratio_of_means","text":"ratio_of_means(num, denom; α=0.01, corrected=true, mc_samples=nothing, skip=0, warn=true)\n-> r::RatioBlockingResult\n\nEstimate the ratio of mean(num)/mean(denom) assuming that num and denom are possibly correlated time series, skipping the first skip elements. A blocking analysis with m-test is used to uncorrelate the time series, see blocking_analysis. The remaining standard error and correlation of the means is propagated using MonteCarloMeasurements. The results are reported as a RatioBlockingResult.\n\nRobust estimates for the ratio are obtained from pmedian(r) and confidence intervals from pquantile(), e.g. pquantile(r, [0.025, 0.975]) for the 95% confidence interval.\n\nEstimates from linear uncertainty propagation are returned as r.f and r.σ_f using x_by_y_linear. The standard error estimate r.σ_f should only be trusted when the coefficient of variation std(denom)/mean(denom) is small: abs(r.δ_y) < 0.1. Under this condition can the ratio be approximated as a normal distribution. See wikipedia and Díaz-Francés, Rubio (2013)\n\nThe keyword mc_samples controls the number of samples used for error propagation by MonteCarloMeasurements. Use nothing for the default and Val(1000) to set the number to 1000 samples in a type-consistent way.\n\nThe keyword warn controls whether warning messages are logged when blocking fails or noisy denominators are encountered.\n\nNote: to compute statistics on the RatioBlockingResult, use functions pmedian, pquantile, pmiddle, piterate, pextrema, pminimum, pmaximum, pmean, and pcov.\n\n\n\n\n\n","category":"method"},{"location":"statstools.html#Rimu.StatsTools.errs-Tuple","page":"StatsTools","title":"Rimu.StatsTools.errs","text":"errs(x; n=1, p=nothing, name=:err) -> (; err_l, err_u)\n\nReturn the lower and upper error bar for the uncertain value x.\n\nSee val_and_errs.\n\n\n\n\n\n","category":"method"},{"location":"statstools.html#Rimu.StatsTools.to_measurement-Tuple{MonteCarloMeasurements.Particles}","page":"StatsTools","title":"Rimu.StatsTools.to_measurement","text":"to_measurement(p::MonteCarloMeasurements.Particles) -> ::Measurements.measurement\n\nConvert an uncertain number from MonteCarloMeasurements  to Measurements format  using the median as the central point. The new ± boundaries will include  the 68% quantile around the median.\n\n\n\n\n\n","category":"method"},{"location":"statstools.html#Rimu.StatsTools.val-Tuple{Any}","page":"StatsTools","title":"Rimu.StatsTools.val","text":"val(x)\n\nReturn the best estimate value for an uncertain x. Defaults to the median for uncertain x represented by a (sampled) distribution. Supports  MonteCarloMeasurements and Measurements.\n\nSee errs, BlockingResult, RatioBlockingResult.\n\n\n\n\n\n","category":"method"},{"location":"statstools.html#Rimu.StatsTools.val_and_errs-Tuple{Any}","page":"StatsTools","title":"Rimu.StatsTools.val_and_errs","text":"val_and_errs(x; n=1, p=nothing, name=:val) -> (;val, val_l, val_u)\n\nReturn the median and the lower and upper error bar for the uncertain value x as a NamedTuple. This is useful for plotting scripts. The interval [val - val_l, val + val_u] represents the confidence interval at level n*σ, or at probability p. Setting p overrides n. Supports  MonteCarloMeasurements and Measurements. The  names in the NamedTuple can be changed with name.\n\nExample:\n\njulia> results = [blocking_analysis(i:0.1:2i+20) for i in 1:3]; # mock results\n\njulia> v = val_and_errs.(results, name=\"res\"); # Vector of NamedTuple's with standard errors\n\njulia> DataFrame(v)\n3×3 DataFrame\n Row │ res      res_l    res_u\n     │ Float64  Float64  Float64\n─────┼───────────────────────────\n   1 │    11.5  1.7282   1.7282\n   2 │    13.0  1.7282   1.7282\n   3 │    14.5  1.78885  1.78885\n\nSee NamedTuple, val, errs, BlockingResult, RatioBlockingResult.\n\n\n\n\n\n","category":"method"},{"location":"statstools.html#Rimu.StatsTools.growth_witness","page":"StatsTools","title":"Rimu.StatsTools.growth_witness","text":"growth_witness(df::DataFrame, [b];\n    shift=:shift,\n    norm=:norm,\n    time_step=determine_constant_time_step(df),\n    skip=0\n)\ngrowth_witness(sim::PMCSimulation, [b]; kwargs...)\n\nCalculate the growth witness directly from the result (DataFrame or PMCSimulation) of solveing a ProjectorMonteCarloProblem. The keyword arguments shift and norm can be used to change the names of the relevant columns.\n\n\n\n\n\n","category":"function"},{"location":"statstools.html#Rimu.StatsTools.growth_witness-Tuple{AbstractArray, AbstractArray, Any}","page":"StatsTools","title":"Rimu.StatsTools.growth_witness","text":"growth_witness(shift::AbstractArray, norm::AbstractArray, dt, [b]; skip=0)\n\nCompute the growth witness\n\nG^(n) = S^(n) - fracvertmathbfc^(n+1)vert -\n          vertmathbfc^(n)vertvertmathbfc^(n)vert dtau\n\nwhere S is the shift and vertmathbfc^(n)vert == norm[n, 1]. Setting b ≥ 1 a sliding average over b time steps is computed using smoothen(). The first skip time steps are skipped. mean(growth_witness) is approximately the same as growth_estimator with h=0.\n\nSee also growth_estimator.\n\n\n\n\n\n","category":"method"},{"location":"statstools.html#Rimu.StatsTools.smoothen-Tuple{AbstractVector, Integer}","page":"StatsTools","title":"Rimu.StatsTools.smoothen","text":"smoothen(noisy::AbstractVector, b)\n\nSmoothen the array noisy by averaging over a sliding window of length b and wrapping noisy periodically. The mean(noisy) is preserved.\n\n\n\n\n\n","category":"method"},{"location":"statstools.html#Rimu.StatsTools.growth_estimator-NTuple{4, Any}","page":"StatsTools","title":"Rimu.StatsTools.growth_estimator","text":"growth_estimator(\n    shift, wn, h, time_step;\n    skip = 0,\n    E_r = mean(shift[skip+1:end]),\n    weights = w_exp,\n    change_type = identity,\n    kwargs...\n)\ngrowth_estimator(\n    df::DataFrame, h;\n    shift_name=:shift,\n    norm_name=:norm,\n    time_step=determine_constant_time_step(df),\n    kwargs...\n)\ngrowth_estimator(sim::PMCSimulation; kwargs...)\n-> r::RatioBlockingResult\n\nCompute the growth estimator with reference energy E_r by the reweighting technique described in Umrigar et al. (1993), see Eq. (20). shift and wn are equal length vectors containing the shift and walker number time series, respectively.  Reweighting is done over h time steps and length(shift) - skip time steps are used for the blocking analysis done with ratio_of_means. weights is a function that calulates the weights. See w_exp and w_lin.\n\nE_gr = E_r - frac1dτln\n    fracsum_n w_h+1^(n+1) N_mathrmw^(n+1)\n        sum_m w_h^(m) N_mathrmw^(m) \n\nwhere dτ is the time_step\n\nWhen h is greater than the autocorrelation time scale of the shift, then E_gr (returned as r.ratio) is an unbiased but approximate estimator for the ground state energy E_0 with an error mathcalO(dτ^2) and potentially increased confidence intervals compared to the (biased) shift estimator.  Error propagation is done with MonteCarloMeasurements. Propagation through the logarithm can be modified by setting change_type to to_measurement in order to avoid NaN results from negative outliers.\n\nIf success==true the blocking analysis was successful in k-1 steps, using blocks uncorrelated data points.\n\nThe second method calculates the growth estimator directly from a PMCSimulation or DataFrame returned by solve. The keyword arguments shift_name and norm_name can be used to change the names of the relevant columns.\n\nSee also mixed_estimator and RatioBlockingResult.\n\n\n\n\n\n","category":"method"},{"location":"statstools.html#Rimu.StatsTools.growth_estimator_analysis-Tuple{Any}","page":"StatsTools","title":"Rimu.StatsTools.growth_estimator_analysis","text":"growth_estimator_analysis(df::DataFrame; kwargs...)\ngrowth_estimator_analysis(sim::PMCSimulation; kwargs...)\n-> (; df_ge, correlation_estimate, se, se_l, se_u)\n\nCompute the growth_estimator on a DataFrame df or PMCSimulation sim. repeatedly over a range of reweighting depths.\n\nReturns a NamedTuple with the fields\n\ndf_ge: DataFrame with reweighting depth and growth_estiamator data. See example below.\ncorrelation_estimate: estimated correlation time from blocking analysis\nse, se_l, se_u: shift_estimator and error\n\nKeyword arguments\n\nh_range: The default is about h_values values from 0 to twice the estimated correlation time\nh_values = 100: minimum number of reweighting depths\nskip = 0: initial time steps to exclude from averaging\nthreading = Threads.nthreads() > 1: if false a progress meter is displayed\nshift_name = :shift name of column in df with shift data\nnorm_name = :norm name of column in df with walkernumber data\nwarn = true whether to log warning messages when blocking fails or denominators are small\n\nExample\n\nsim = solve(...)\ndf_ge, correlation_estimate, se, se_l, se_u = growth_estimator_analysis(sim; skip=5_000)\n\nusing StatsPlots\n@df df_ge plot(_ -> se, :h, ribbon = (se_l, se_u), label = \"⟨S⟩\") # constant line and ribbon for shift estimator\n@df df_ge plot!(:h, :val, ribbon = (:val_l, :val_u), label=\"E_gr\") # growth estimator as a function of reweighting depth\nxlabel!(\"h\")\n\nSee also: growth_estimator, mixed_estimator_analysis.\n\n\n\n\n\n","category":"method"},{"location":"statstools.html#Rimu.StatsTools.mixed_estimator-Tuple{AbstractVector, AbstractVector, AbstractVector, Any, Any}","page":"StatsTools","title":"Rimu.StatsTools.mixed_estimator","text":"mixed_estimator(\n    hproj, vproj, shift, h, time_step;\n    skip = 0,\n    E_r = mean(shift[skip+1:end]),\n    weights = w_exp,\n    kwargs...\n)\nmixed_estimator(\n    df::DataFrame, h;\n    hproj_name=:hproj,\n    vproj_name=:vproj,\n    shift_name=:shift,\n    time_step=determine_constant_time_step(df),\n    kwargs...\n)\nmixed_estimator(sim::PMCSimulation, h; kwargs...)\n-> r::RatioBlockingResult\n\nCompute the mixed estimator by the reweighting technique described in Umrigar et al. (1993), Eq. (19)\n\nE_mathrmmix = fracsum_n w_h^(n)  (Hmathbfv)mathbfc^(n)\n        sum_m w_h^(m)  mathbfvmathbfc^(m) \n\nwhere the time series hproj == (Hmathbfv)mathbfc^(n) and vproj == mathbfvmathbfc^(m) have the same length as shift (See ProjectedEnergy on how to set these up).  Reweighting is done over h time steps and length(shift) - skip time steps are used for the blocking analysis done with ratio_of_means. weights is a function that calulates the weights. See w_exp and w_lin.  Additional keyword arguments are passed on to ratio_of_means.\n\nWhen h is greater than the autocorrelation time scale of the shift, then r.ratio is an unbiased but approximate estimator for the ground state energy E_0 with an error mathcalO(dτ^2), where dτ is the time_step, and potentially increased confidence intervals compared to the unweighted ratio.  Error propagation is done with MonteCarloMeasurements. Results are returned as RatioBlockingResult.\n\nThe second method calculates the mixed energy estimator directly from a DataFrame or PMCSimulation returned by solve. The keyword arguments hproj_name, vproj_name, and shift_name can be used to change the names of the relevant columns.\n\nSee also growth_estimator.\n\n\n\n\n\n","category":"method"},{"location":"statstools.html#Rimu.StatsTools.mixed_estimator_analysis-Tuple{DataFrame}","page":"StatsTools","title":"Rimu.StatsTools.mixed_estimator_analysis","text":"mixed_estimator_analysis(df::DataFrame; kwargs...)\nmixed_estimator_analysis(sim::PMCSimulation; kwargs...)\n-> (; df_me, correlation_estimate, se, se_l, se_u)\n\nCompute the mixed_estimator on a DataFrame df or PMCSimulation sim returned from solve repeatedly over a range of reweighting depths.\n\nReturns a NamedTuple with the fields\n\ndf_me: DataFrame with reweighting depth and mixed_estiamator data. See example below.\ncorrelation_estimate: estimated correlation time from blocking analysis\nse, se_l, se_u: shift_estimator and error\n\nKeyword arguments\n\nh_range: The default is about h_values values from 0 to twice the estimated correlation time\nh_values = 100: minimum number of reweighting depths\nskip = 0: initial time steps to exclude from averaging\nthreading = Threads.nthreads() > 1: if false a progress meter is displayed\nshift_name = :shift name of column in df with shift data\nhproj_name = :hproj name of column in df with operator overlap data\nvproj_name = :vproj name of column in df with projector overlap data\nwarn = true whether to log warning messages when blocking fails or denominators are small\n\nExample\n\nsim = solve(...)\ndf_me, correlation_estimate, se, se_l, se_u = mixed_estimator_analysis(sim; skip=5_000)\n\nusing StatsPlots\n@df df_me plot(_ -> se, :h, ribbon = (se_l, se_u), label = \"⟨S⟩\") # constant line and ribbon for shift estimator\n@df df_me plot!(:h, :val, ribbon = (:val_l, :val_u), label=\"E_mix\") # mixed estimator as a function of reweighting depth\nxlabel!(\"h\")\n\nSee also: mixed_estimator, growth_estimator_analysis.\n\n\n\n\n\n","category":"method"},{"location":"statstools.html#Rimu.StatsTools.projected_energy-Tuple{Any}","page":"StatsTools","title":"Rimu.StatsTools.projected_energy","text":"projected_energy(df::DataFrame; skip=0, hproj=:hproj, vproj=:vproj, kwargs...)\nprojected_energy(sim::PMCSimulation; kwargs...)\n-> r::RatioBlockingResult\n\nCompute the projected energy estimator\n\nE_mathrmp = fracsum_n  mathbfvHmathbfc^(n)\n        sum_m mathbfvmathbfc^(m) \n\nwhere the time series df.hproj == mathbfvHmathbfc^(n) and df.vproj == mathbfvmathbfc^(m) are taken from df, skipping the first skip entries (use post_step_strategy =ProjectedEnergy(...) to set these up in ProjectorMonteCarloProblem). projected_energy is equivalent to mixed_estimator with h=0.\n\nThe keyword arguments hproj and vproj can be used to change the names of the relevant columns. Other kwargs are passed on to ratio_of_means. Returns a RatioBlockingResult.\n\nSee NamedTuple, val_and_errs, val, errs for processing results.\n\n\n\n\n\n","category":"method"},{"location":"statstools.html#Rimu.StatsTools.rayleigh_replica_estimator-Tuple{Vector, Vector, Vector, Any, Any}","page":"StatsTools","title":"Rimu.StatsTools.rayleigh_replica_estimator","text":"rayleigh_replica_estimator(\n    op_ol, vec_ol, shift, h, time_step;\n    skip = 0,\n    E_r = mean(shift[skip+1:end]),\n    weights = w_exp,\n    kwargs...\n)\nrayleigh_replica_estimator(\n    df::DataFrame;\n    shift_name=\"shift\",\n    op_name=\"Op1\",\n    vec_name=\"dot\",\n    h=0,\n    skip=0,\n    Anorm=1,\n    kwargs...\n)\nrayleigh_replica_estimator(sim::PMCSimulation; kwargs...)\n-> r::RatioBlockingResult\n\nCompute the estimator of a Rayleigh quotient of operator hatA with reweighting,\n\nA_mathrmest(h) = fracsum_ab sum_n w_ha^(n) w_hb^(n)\n    mathbfc_a^(n) cdot hatA cdot mathbfc_b^(n)\n    sum_ab sum_n w_ha^(n) w_hb^(n) mathbfc_a^(n) cdot mathbfc_b^(n)\n\nusing data from multiple replicas.\n\nArgument op_ol holds data for the operator overlap mathbfc_a^(n) hatA mathbfc_b^(n) and vec_ol holds data for the vector overlap mathbfc_a^(n) mathbfc_b^(n). They are of type Vector{Vector}, with each element Vector holding the data for a pair of replicas. Argument shift is of type Vector{Vector}, with each element Vector holding the shift data for each individual replica.\n\nThe second method computes the Rayleigh quotient directly from a DataFrame or PMCSimulation returned by solve. The keyword arguments shift_name, op_name and vec_name can be used to change the names of the relevant columns, see AllOverlaps for default formatting. The operator overlap data can be scaled by a prefactor Anorm. A specific reweighting depth can be set with keyword argument h. The default is h = 0 which calculates the Rayleigh quotient without reweighting.\n\nThe reweighting is an extension of the mixed estimator using the reweighting technique described in Umrigar et al. (1993). Reweighting is done over h time steps and length(shift) - skip time steps are used for the blocking analysis done with ratio_of_means. weights is a function that calulates the weights. See w_exp and w_lin. Additional keyword arguments are passed on to ratio_of_means.\n\nError propagation is done with MonteCarloMeasurements. Results are returned as RatioBlockingResult.\n\nSee also mixed_estimator, growth_estimator.\n\n\n\n\n\n","category":"method"},{"location":"statstools.html#Rimu.StatsTools.rayleigh_replica_estimator_analysis-Tuple{Any}","page":"StatsTools","title":"Rimu.StatsTools.rayleigh_replica_estimator_analysis","text":"rayleigh_replica_estimator_analysis(df::DataFrame; kwargs...)\nrayleigh_replica_estimator_analysis(sim::PMCSimulation; kwargs...)\n-> (; df_rre, df_se)\n\nCompute the rayleigh_replica_estimator on a DataFrame df or PMCSimulation sim returned from solve repeatedly over a range of reweighting depths.\n\nReturns a NamedTuple with the fields\n\ndf_rre: DataFrame with reweighting depth and rayleigh_replica_estimator data. See example below.\ndf_se: DataFrame with shift_estimator output, one row per replica\n\nKeyword arguments\n\nh_range: The default is about h_values values from 0 to twice the estimated correlation time\nh_values = 100: minimum number of reweighting depths\nskip = 0: initial time steps to exclude from averaging\nthreading = Threads.nthreads() > 1: if false a progress meter is displayed\nshift_name = \"shift\": shift data corresponding to column in df with names <shift>_1, ...\nop_name = \"Op1\": name of operator overlap corresponding to column in df with names c1_<op_ol>_c2, ...\nvec_name = \"dot\": name of vector-vector overlap corresponding to column in df with names c1_<vec_ol>_c2, ...\nAnorm = 1: a scalar prefactor to scale the operator overlap data\nwarn = true: whether to log warning messages when blocking fails or denominators are small\n\nExample\n\nsim = solve(...)\ndf_rre, df_se = rayleigh_replica_estimator_analysis(sim; skip=5_000)\n\nusing StatsPlots\n@df df_rre plot(_ -> se, :h, ribbon = (se_l, se_u), label = \"⟨S⟩\") # constant line and ribbon for shift estimator\n@df df_rre plot!(:h, :val, ribbon = (:val_l, :val_u), label=\"E_mix\") # Rayleigh quotient estimator as a function of reweighting depth\nxlabel!(\"h\")\n\nSee also: rayleigh_replica_estimator, mixed_estimator_analysis, AllOverlaps.\n\n\n\n\n\n","category":"method"},{"location":"statstools.html#Rimu.StatsTools.shift_estimator-Tuple{Any}","page":"StatsTools","title":"Rimu.StatsTools.shift_estimator","text":"shift_estimator(df::DataFrame; shift=:shift, kwargs...)\nshift_estimator(sim::PMCSimulation; kwargs...)\n-> r::BlockingResult\n\nReturn the shift estimator from the data in df.shift. The keyword argument shift can be used to change the name of the relevant column. Other keyword arguments are passed on to blocking_analysis. Returns a BlockingResult.\n\nSee also growth_estimator, projected_energy.\n\n\n\n\n\n","category":"method"},{"location":"statstools.html#Rimu.StatsTools.w_exp-Tuple{Union{SubArray{<:Any, 1, <:Vector, <:Any, true}, Vector}, Any, Any}","page":"StatsTools","title":"Rimu.StatsTools.w_exp","text":"w_exp(shift, h, time_step; E_r = mean(shift), skip = 0)\n\nCompute the weights for reweighting over h time steps with reference energy E_r from the exponential formula\n\nw_h^(n) = prod_j=1^h exp-dτ(S^(q+n-j)-E_r) \n\nwhere q = skip and dτ is the time_step.\n\nSee also w_lin, growth_estimator, mixed_estimator.\n\n\n\n\n\n","category":"method"},{"location":"statstools.html#Rimu.StatsTools.w_lin-Tuple{Union{SubArray{<:Any, 1, <:Vector, <:Any, true}, Vector}, Any, Any}","page":"StatsTools","title":"Rimu.StatsTools.w_lin","text":"w_lin(shift, h, time_step; E_r = mean(shift), skip = 0)\n\nCompute the weights for reweighting over h time steps with reference energy E_r from the linearised formula\n\nw_h^(n) = prod_j=1^h 1-dτ(S^(q+n-j)-E_r) \n\nwhere q = skip and dτ is the time_step.\n\nSee also w_exp, growth_estimator, mixed_estimator.\n\n\n\n\n\n","category":"method"},{"location":"statstools.html#Rimu.StatsTools.replica_fidelity-Tuple{Any}","page":"StatsTools","title":"Rimu.StatsTools.replica_fidelity","text":"replica_fidelity(df::DataFrame; p_field = :hproj, skip = 0)\nreplica_fidelity(sim::PMCSimulation; kwargs...)\n\nCompute the fidelity of the average coefficient vector and the projector defined in p_field from the PMCSimulation or DataFrame returned by solve, using replicas _1 and _2. Calls ratio_of_means to perform a blocking analysis on a ratio of the means of separate time series and returns a RatioBlockingResult. The first skip steps in the time series are skipped.\n\nThe fidelity of states |ψ⟩ and |ϕ⟩ is defined as\n\nF(ψϕ) = fracψϕ^2ψψϕϕ \n\nSpecifically, replica_fidelity computes\n\nF(mathbfvmathbfc) =\n    frac(mathbfc_1mathbfv)(mathbfvmathbfc_1)\n    mathbfc_1mathbfc_1 \n\nwhere v is the projector specified by p_field, which is assumed to be normalised to unity with the two-norm (i.e. v⋅v == 1), and mathbfc_1 and mathbfc_2 are two replica coefficient vectors.\n\n\n\n\n\n","category":"method"},{"location":"statstools.html#Rimu.StatsTools.variational_energy_estimator-Tuple{Any, Any}","page":"StatsTools","title":"Rimu.StatsTools.variational_energy_estimator","text":"variational_energy_estimator(shifts, overlaps; kwargs...)\nvariational_energy_estimator(df::DataFrame; max_replicas=:all, kwargs...)\nvariational_energy_estimator(sim::PMCSimulation; kwargs...)\n-> r::RatioBlockingResult\n\nCompute the variational energy estimator from the replica time series of the shifts and coefficient vector overlaps by blocking analysis. The keyword argument max_replicas can be used to constrain the number of replicas processed to be smaller than all available in df. Other keyword arguments are passed on to ratio_of_means(). Returns a RatioBlockingResult.\n\nAn estimator for the variational energy\n\nfracmathbfc^ mathbfHmathbfcmathbfc^mathbfc\n\nis calculated from\n\nE_v  =  fracsum_ab^R overline(S_a+S_b) mathbfc_a^ mathbfc_b\n               2sum_ab^R overlinemathbfc_a^ mathbfc_b \n\nwhere the sum goes over distinct pairs out of the R replicas. See arXiv:2103.07800.\n\nThe DataFrame and PMCSimulation versions can extract the relevant information from the result of solve. Set up the ProjectorMonteCarloProblem with the keyword argument replica_strategy = AllOverlaps(R) and R ≥ 2. If passing shifts and overlaps, the data has to be arranged in the correct order (as provided in the DataFrame version).\n\nSee AllOverlaps.\n\n\n\n\n\n","category":"method"},{"location":"statstools.html#Additional-docstrings","page":"StatsTools","title":"Additional docstrings","text":"","category":"section"},{"location":"statstools.html","page":"StatsTools","title":"StatsTools","text":"Modules = [StatsTools]\nPages = [\"StatsTools.jl\", \"blocking.jl\", \"ratio_of_means.jl\", \"convenience.jl\",\n  \"variances.jl\", \"growth_witness.jl\", \"reweighting.jl\"\n]\nPublic = false","category":"page"},{"location":"statstools.html#MonteCarloMeasurements.Particles-Tuple{Rimu.StatsTools.BlockingResult{<:Real}}","page":"StatsTools","title":"MonteCarloMeasurements.Particles","text":"MonteCarloMeasurements.Particles(r::BlockingResult; mc_samples = 2000)\nMonteCarloMeasurements.±(r::BlockingResult)\n\nConvert a BlockingResult into a Particles object for nonlinear error propagation with MonteCarloMeasurements.\n\n\n\n\n\n","category":"method"},{"location":"statstools.html#Rimu.StatsTools.BlockingResult","page":"StatsTools","title":"Rimu.StatsTools.BlockingResult","text":"BlockingResult(mean, err, err_err, p_cov, k, blocks)\n\nResult of blocking_analysis.\n\nFields:\n\nmean: sample mean\nerr: standard error (estimated standard deviation of the mean)\nerr_err: estimated uncertainty of err\np_cov: estimated pseudo covariance of mean, relevant for complex time series\nk::Int: k-1 blocking steps were used to uncorrelate time series\nblocks::Int: number of uncorrelated values after blocking\n\nHas methods for NamedTuple, val_and_errs, val, errs, mean_and_se, Measurements.:±, MonteCarloMeasurements.Particles, and Statistics.cov for Complex data.\n\nExample:\n\njulia> blocking_analysis(smoothen(randn(2^10), 2^5))\nBlockingResult{Float64}\n  mean = -0.026 ± 0.029\n  with uncertainty of ± 0.003638545517264226\n  from 32 blocks after 5 transformations (k = 6).\n\n\n\n\n\n","category":"type"},{"location":"statstools.html#Measurements.measurement-Tuple{Rimu.StatsTools.BlockingResult{<:Real}}","page":"StatsTools","title":"Measurements.measurement","text":"measurement(r::BlockingResult)\nMeasurements.±(r::BlockingResult)\n\nConvert a BlockingResult into a Measurement for linear error propagation with Measurements.\n\nLimitation: Does not account for covariance in complex BlockingResult. Consider using MonteCarloMeasurements.Particles(r)!\n\n\n\n\n\n","category":"method"},{"location":"statstools.html#Rimu.StatsTools.blocker-Union{Tuple{AbstractVector{T}}, Tuple{T}} where T","page":"StatsTools","title":"Rimu.StatsTools.blocker","text":"blocker(v::Vector) -> new_v::Vector\n\nReblock the data by successively taking the mean of two adjacent data points to form a new vector with a half of the length(v). The last data point will be discarded if length(v) is odd.\n\n\n\n\n\n","category":"method"},{"location":"statstools.html#Rimu.StatsTools.blocks_with_m-Tuple{Any}","page":"StatsTools","title":"Rimu.StatsTools.blocks_with_m","text":"blocks_with_m(v; corrected = true) -> (;blocks, mean, std_err, std_err_err, p_cov, mj)\n\nPerform the blocking algorithm from Flyvberg and Peterson JCP (1989). Returns named tuple with the results from all blocking steps. See mtest().\n\n\n\n\n\n","category":"method"},{"location":"statstools.html#Rimu.StatsTools.mtest-Tuple{AbstractVector}","page":"StatsTools","title":"Rimu.StatsTools.mtest","text":"mtest(mj::AbstractVector; α = 0.01) -> k\nmtest(table::NamedTuple; α = 0.01) -> k\n\nHypothesis test for decorrelation of a time series after blocking transformations with significance level 1-α after Jonson PRE (2018). mj or table.mj is expected to be a vector with relevant M_j values from a blocking analysis as obtained from blocks_with_m(). Returns the row number k where the M-test is passed. If the M-test has failed mtest() returns the value -1.\n\n\n\n\n\n","category":"method"},{"location":"statstools.html#Rimu.StatsTools.RatioBlockingResult","page":"StatsTools","title":"Rimu.StatsTools.RatioBlockingResult","text":"RatioBlockingResult(ratio, f, σ_f, δ_y, k, success)\n\nResult of ratio_of_means().\n\nFields:\n\nratio::P: ratio with uncertainties propagated by MonteCarloMeasurements\nf::T: ratio of means\nσ_f::T: std from linear propagation\nδ_y::T: coefficient of variation for denominator (≤ 0.1 for normal approx)\nk::Int: k-1 blocking steps were used to uncorrelate time series\nblocks::Int: number of data values after blocking\nsuccess::Bool: false if any of the blocking steps failed\n\nHas methods for NamedTuple, val_and_errs, val, errs.\n\nNote: to compute statistics on the RatioBlockingResult, use functions pmedian, pquantile, pmiddle, piterate, pextrema, pminimum, pmaximum, pmean, and pcov.\n\n\n\n\n\n","category":"type"},{"location":"statstools.html#Rimu.StatsTools.particles-Tuple{Any, Any, Any}","page":"StatsTools","title":"Rimu.StatsTools.particles","text":"particles(samples, μ, σ)\nparticles(samples, μ::AbstractVector, Σ::AbstractMatrix)\n\nReturn Particles object from MonteCarloMeasurements with single- or multivariate normal distribution. Zero variance parameters are supported.\n\n\n\n\n\n","category":"method"},{"location":"statstools.html#Rimu.StatsTools.particles-Tuple{Any, Distributions.Distribution}","page":"StatsTools","title":"Rimu.StatsTools.particles","text":"particles(samples, d)\nparticles(::Nothing, d)\nparticles(::Val{T}, d) where T\n\nReturn Particles object from  MonteCarloMeasurements using  a type-stable constructor if possible. Pass nothing for the default number of particles or Val(1_000) for using 1000 particles in a type-stable manner. If d is a Particles object it is passed through without re-sampling.\n\n\n\n\n\n","category":"method"},{"location":"statstools.html#Rimu.StatsTools.ratio_estimators-Tuple{AbstractVector{<:Real}, AbstractVector{<:Real}}","page":"StatsTools","title":"Rimu.StatsTools.ratio_estimators","text":"ratio_estimators(x, y, [k]; corrected=true, mc_samples=10_000) -> (; r, f, σ_f, δ_y, n)\n\nEstimators for the ratio of means mean(x)/mean(y). If k is given, k-1 blocking steps are performed to remove internal correlations in the time series x and y. Otherwise these are assumed to be free of internal correlations. Correlations between x and y may be present and are taken into account.\n\nReturn values:\n\nr::Particles is the Monte Carlo sampled ratio estimator, see Particles\nf = mean(x)/mean(y)\nσ_f standard deviation of f from linear error propagation (normal approximation)\nδ_y = std(y)/mean(y) coefficient of variation; < 0.1 for normal approximation to work\nn: number of uncorrelated data used for uncertainty estimation\n\n\n\n\n\n","category":"method"},{"location":"statstools.html#Rimu.StatsTools.x_by_y_linear-NTuple{5, Any}","page":"StatsTools","title":"Rimu.StatsTools.x_by_y_linear","text":"x_by_y_linear(μ_x,μ_y,σ_x,σ_y,ρ) -> f, σ_f\n\nLinear error propagation for ratio f = x/y assuming x and y are correlated normal random variables and assuming the ratio can be approximated as a normal distribution. See wikipedia and Díaz-Francés, Rubio (2013).\n\nσ_f = sqrtfracσ_xμ_y^2 + fracμ_x σ_yμ_y^2^2 - frac2 ρ μ_xμ_y^3\n\n\n\n\n\n","category":"method"},{"location":"statstools.html#Core.NamedTuple-Tuple{Rimu.StatsTools.BlockingResult}","page":"StatsTools","title":"Core.NamedTuple","text":"NamedTuple(x::BlockingResult; n=1, p=nothing, name=:val)\nNamedTuple(x::RatioBlockingResult; n=1, p=nothing, name=:val)\n\nReturn a named tuple with value and error bars (see val_and_errs) as well as additional numerical fields relevant for x.\n\nExample:\n\njulia> results = [blocking_analysis(i:0.1:2i+20) for i in 1:3]; # mock results\n\njulia> df = NamedTuple.(results, name=:res)|>DataFrame\n3×7 DataFrame\n Row │ res      res_l    res_u    res_err_err  res_p_cov  res_k  res_blocks\n     │ Float64  Float64  Float64  Float64      Float64    Int64  Int64\n─────┼──────────────────────────────────────────────────────────────────────\n   1 │    11.5  1.7282   1.7282      0.352767    2.98667      5          13\n   2 │    13.0  1.7282   1.7282      0.352767    2.98667      5          13\n   3 │    14.5  1.78885  1.78885     0.350823    3.2          5          14\n\njulia> rbs = ratio_of_means(1 .+sin.(1:0.1:11),2 .+sin.(2:0.1:12)); # more mock results\n\njulia> [NamedTuple(rbs),]|>DataFrame\n1×9 DataFrame\n Row │ val       val_l      val_u      val_f     val_σ_f    val_δ_y    val_k  val_blocks  val_success\n     │ Float64   Float64    Float64    Float64   Float64    Float64    Int64  Int64       Bool\n─────┼────────────────────────────────────────────────────────────────────────────────────────────────\n   1 │ 0.581549  0.0925669  0.0812292  0.560532  0.0875548  0.0875548      4          12         true\n\n\nSee val_and_errs, val, errs, BlockingResult, RatioBlockingResult.\n\n\n\n\n\n","category":"method"},{"location":"statstools.html#Rimu.StatsTools.autocovariance-Tuple{AbstractVector, Int64}","page":"StatsTools","title":"Rimu.StatsTools.autocovariance","text":"autocovariance(v::Vector,h::Int; corrected::Bool=true)\n\nhatgamma(h) =frac1nsum_t=1^n-h(v_t+h-barv)(v_t-barv)^* Calculate the autocovariance of dataset v with a delay h. If corrected is true (the default) then the sum is scaled with n-h, whereas the sum is scaled with n if corrected is false where n = length(v).\n\n\n\n\n\n","category":"method"},{"location":"statstools.html#Rimu.StatsTools.pseudo_cov-Tuple{Any, Any}","page":"StatsTools","title":"Rimu.StatsTools.pseudo_cov","text":"pseudo_cov(x, y; xmean = mean(x), ymean = mean(y), corrected = true)\n\nCompute the pseudo covariance between collections x and y returning a scalar:\n\nfrac1nsum_i=1^n (x_i - barx)(y_i - bary)\n\nOptionally, precomputed means can be passed as keyword arguments. pseudo_cov(x,y) is functionally equivalent to Statistics.cov(x, conj(y); corrected = false) but it is found to be significantly faster and avoids allocations.\n\n\n\n\n\n","category":"method"},{"location":"statstools.html#Rimu.StatsTools.determine_constant_time_step-Tuple{Any}","page":"StatsTools","title":"Rimu.StatsTools.determine_constant_time_step","text":"determine_constant_time_step(df) -> time_step\n\nGiven a DataFrame df, determine the time step that was used to compute it. Throw an error if time step is not constant.\n\n\n\n\n\n","category":"method"},{"location":"statstools.html#Index","page":"StatsTools","title":"Index","text":"","category":"section"},{"location":"statstools.html","page":"StatsTools","title":"StatsTools","text":"Pages   = [\"statstools.md\"]","category":"page"},{"location":"interfaces.html#Module-Interfaces","page":"Interfaces","title":"Module Interfaces","text":"","category":"section"},{"location":"interfaces.html","page":"Interfaces","title":"Interfaces","text":"Interfaces","category":"page"},{"location":"interfaces.html#Rimu.Interfaces","page":"Interfaces","title":"Rimu.Interfaces","text":"module Interfaces\n\nThis module contains interfaces that can be used to extend and modify the algorithms and behaviours of Rimu.\n\nInterfaces\n\nFollow the links for the definitions of the interfaces!\n\nAbstractHamiltonian for defining Hamiltonians\nAbstractOperator for defining observable operators\nAbstractDVec for defining data structures for Rimu as in DictVectors\nStochasticStyle for controlling the stochastic algorithms used by ProjectorMonteCarloProblem as implemented in StochasticStyles\n\nAdditional exports\n\nInterface functions forAbstractHamiltonians:\n\ndiagonal_element\nnum_offdiagonals\nget_offdiagonal\noffdiagonals.\nrandom_offdiagonal\nstarting_address\nLOStructure\nallows_address_type\n\nworking with  AbstractDVecs and StochasticStyle\n\ndeposit!\ndefault_style\nCompressionStrategy\nThe interface from VectorInterface.jl.\n\nFunctions Rimu.jl uses to do FCIQMC:\n\napply_column!\napply_operator!\nstep_stats\n\n\n\n\n\n","category":"module"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"EditURL = \"../../../scripts/HO-example.jl\"","category":"page"},{"location":"generated/HO-example.html#Example-5:-Degenerate-perturbation-theory-in-a-harmonic-oscillator-basis","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Example 5: Degenerate perturbation theory in a harmonic oscillator basis","text":"","category":"section"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"Rimu can also handle non-lattice systems. This example looks at weakly-interacting bosonic particles in a harmonic oscillator external potential using a basis of (Cartesian product) single-particle eigenstates of the harmonic oscillator potential. Blocks of degenerate non-interacting states are coupled by a contact interaction in first order degenerate perturbation theory. This example shows how to generate these blocks and find the energy and angular momentum eigenstates.","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"A runnable script for this example is located here. Run it with julia HO-example.jl.","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"First, load all needed packages.","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"using Rimu\nusing DataFrames\nusing LinearAlgebra","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"Define the system size for N=2 particles in a 2D harmonic oscillator allowing M=4 levels in each dimension, including the groundstate.","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"N = 2\nM = 4;","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"Use a tuple S to define the range of harmonic oscillator states in a Cartesian basis, in this isotropic case n_xn_y=01ldotsM-1.","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"S = (M, M);","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"In Rimu the N-particle states are still stored as Fock states.","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"P = prod(S)\naddr = BoseFS(P, M => N)","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"BoseFS{2,16}(0, 0, 0, 2, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0)","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"Here, the numbering of the modes folds in the two spatial dimensions.  Use the utility function fock_to_cart to convert a Fock address to human-readable Cartesian quantum numbers for inspection.","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"fock_to_cart(addr, S)","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"2-element StaticArraysCore.SVector{2, Tuple{Int64, Int64}} with indices SOneTo(2):\n (3, 0)\n (3, 0)","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"The output shows that all N particles are in single-particle state n_x=M-1 n_y=0.","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"The harmonic oscillator Hamiltonian HOCartesianContactInteractions handles contact interactions with first-order perturbation theory, so the matrix representation will block according to the non-interacting energy of the basis states. The first task is to find all blocks of basis states with the same energy. The strength of the interaction is not relevant at this point, just that it is non-zero. Use an arbitrary N-particle starting address to build the Hamiltonian.","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"H = HOCartesianContactInteractions(BoseFS(P, 1 => N); S);","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"Then, use the utility function get_all_blocks to find all blocks. The blocks are found by looping over all possible states with N particles in Cartesian states defined by S. Note that this will only work for total energy up to the maximum accessible by a single particle. The N-particle groundstate energy for a 2D harmonic oscillator is E_0 = N hbar omega and the maximum single-particle energy is E = (E_0 + M - 1) hbar omega.","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"block_df = get_all_blocks(H; max_energy = N + M - 1)","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"<div><div style = \"float: left;\"><span>7×6 DataFrame</span></div><div style = \"clear: both;\"></div></div><div class = \"data-frame\" style = \"overflow-x: scroll;\"><table class = \"data-frame\" style = \"margin-bottom: 6px;\"><thead><tr class = \"header\"><th class = \"rowNumber\" style = \"font-weight: bold; text-align: right;\">Row</th><th style = \"text-align: left;\">block_id</th><th style = \"text-align: left;\">block_E0</th><th style = \"text-align: left;\">block_size</th><th style = \"text-align: left;\">addr</th><th style = \"text-align: left;\">indices</th><th style = \"text-align: left;\">t_basis</th></tr><tr class = \"subheader headerLastRow\"><th class = \"rowNumber\" style = \"font-weight: bold; text-align: right;\"></th><th title = \"Int64\" style = \"text-align: left;\">Int64</th><th title = \"Float64\" style = \"text-align: left;\">Float64</th><th title = \"Int64\" style = \"text-align: left;\">Int64</th><th title = \"BoseFS{2, 16, BitString{17, 1, UInt32}}\" style = \"text-align: left;\">BoseFS…</th><th title = \"Tuple{Int64, Int64}\" style = \"text-align: left;\">Tuple…</th><th title = \"Float64\" style = \"text-align: left;\">Float64</th></tr></thead><tbody><tr><td class = \"rowNumber\" style = \"font-weight: bold; text-align: right;\">1</td><td style = \"text-align: right;\">1</td><td style = \"text-align: right;\">2.0</td><td style = \"text-align: right;\">1</td><td style = \"text-align: left;\">fs&quot;|2 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0⟩&quot;</td><td style = \"text-align: left;\">(1, 1)</td><td style = \"text-align: right;\">0.517306</td></tr><tr><td class = \"rowNumber\" style = \"font-weight: bold; text-align: right;\">2</td><td style = \"text-align: right;\">2</td><td style = \"text-align: right;\">3.0</td><td style = \"text-align: right;\">1</td><td style = \"text-align: left;\">fs&quot;|1 1 0 0 0 0 0 0 0 0 0 0 0 0 0 0⟩&quot;</td><td style = \"text-align: left;\">(2, 1)</td><td style = \"text-align: right;\">1.4718e-5</td></tr><tr><td class = \"rowNumber\" style = \"font-weight: bold; text-align: right;\">3</td><td style = \"text-align: right;\">3</td><td style = \"text-align: right;\">4.0</td><td style = \"text-align: right;\">4</td><td style = \"text-align: left;\">fs&quot;|0 2 0 0 0 0 0 0 0 0 0 0 0 0 0 0⟩&quot;</td><td style = \"text-align: left;\">(2, 2)</td><td style = \"text-align: right;\">1.2474e-5</td></tr><tr><td class = \"rowNumber\" style = \"font-weight: bold; text-align: right;\">4</td><td style = \"text-align: right;\">4</td><td style = \"text-align: right;\">5.0</td><td style = \"text-align: right;\">5</td><td style = \"text-align: left;\">fs&quot;|0 1 1 0 0 0 0 0 0 0 0 0 0 0 0 0⟩&quot;</td><td style = \"text-align: left;\">(3, 2)</td><td style = \"text-align: right;\">1.034e-5</td></tr><tr><td class = \"rowNumber\" style = \"font-weight: bold; text-align: right;\">5</td><td style = \"text-align: right;\">5</td><td style = \"text-align: right;\">3.0</td><td style = \"text-align: right;\">1</td><td style = \"text-align: left;\">fs&quot;|1 0 0 0 1 0 0 0 0 0 0 0 0 0 0 0⟩&quot;</td><td style = \"text-align: left;\">(5, 1)</td><td style = \"text-align: right;\">1.222e-6</td></tr><tr><td class = \"rowNumber\" style = \"font-weight: bold; text-align: right;\">6</td><td style = \"text-align: right;\">6</td><td style = \"text-align: right;\">4.0</td><td style = \"text-align: right;\">2</td><td style = \"text-align: left;\">fs&quot;|0 1 0 0 1 0 0 0 0 0 0 0 0 0 0 0⟩&quot;</td><td style = \"text-align: left;\">(5, 2)</td><td style = \"text-align: right;\">2.916e-6</td></tr><tr><td class = \"rowNumber\" style = \"font-weight: bold; text-align: right;\">7</td><td style = \"text-align: right;\">7</td><td style = \"text-align: right;\">5.0</td><td style = \"text-align: right;\">5</td><td style = \"text-align: left;\">fs&quot;|0 0 1 0 1 0 0 0 0 0 0 0 0 0 0 0⟩&quot;</td><td style = \"text-align: left;\">(5, 3)</td><td style = \"text-align: right;\">9.808e-6</td></tr></tbody></table></div>","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"This outputs a list of blocks in H indexed by the noninteracting energy of all states in the block, and a single address that can be used to rebuild the block for further analysis.","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"addr1 = block_df[7,:addr]\nE = block_df[7,:block_E0]","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"5.0","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"First, notice that all basis states have the same energy, defined by the block.","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"basis1 = build_basis(H, addr1)\nmap(b -> Hamiltonians.noninteracting_energy(H, b), basis1)","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"5-element Vector{Float64}:\n 5.0\n 5.0\n 5.0\n 5.0\n 5.0","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"There are two blocks at each energy level (except the groundstate), which are different due to parity conservation, which is the only other symmetry in the Cartesian harmonic oscillator. The basis of this other block is different,","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"addr2 = block_df[4,:addr]\nbasis2 = build_basis(H, addr2);\nbasis1 ≠ basis2","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"true","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"but its basis elements have the same energy.","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"map(b -> Hamiltonians.noninteracting_energy(H, b), basis2)","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"5-element Vector{Float64}:\n 5.0\n 5.0\n 5.0\n 5.0\n 5.0","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"However, since this system is an isotropic harmonic oscillator, it is possible to build simultaneous eigenstates of the angular momentum operator L_z, implemented with AxialAngularMomentumHO.","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"Lz = AxialAngularMomentumHO(S)","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"AxialAngularMomentumHO((4, 4); z_dim = 3, addr = BoseFS{0,16}(0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0))","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"L_z does not conserve parity, so both blocks are required. First combine the bases of each block and convert to DVecs.","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"dvs = map(b -> DVec(b => 1.0), vcat(basis1, basis2));","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"and then compute overlaps for the matrix elements of L_z.","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"Lz_mat = [dot(v, Lz, w) for v in dvs, w in dvs]","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"10×10 Matrix{ComplexF64}:\n 0.0+0.0im      0.0+0.0im      0.0+0.0im      0.0+0.0im      0.0+0.0im      0.0+1.0im      0.0+0.0im      0.0-1.41421im  0.0+0.0im      0.0+0.0im\n 0.0+0.0im      0.0+0.0im      0.0+0.0im      0.0+0.0im      0.0+0.0im      0.0+1.41421im  0.0+0.0im      0.0-1.0im      0.0-1.41421im  0.0+0.0im\n 0.0+0.0im      0.0+0.0im      0.0+0.0im      0.0+0.0im      0.0+0.0im      0.0+0.0im      0.0+1.73205im  0.0+0.0im      0.0+0.0im      0.0-2.0im\n 0.0+0.0im      0.0+0.0im      0.0+0.0im      0.0+0.0im      0.0+0.0im      0.0+0.0im      0.0+0.0im      0.0+1.41421im  0.0+1.0im      0.0+0.0im\n 0.0+0.0im      0.0+0.0im      0.0+0.0im      0.0+0.0im      0.0+0.0im      0.0+0.0im      0.0+0.0im      0.0+0.0im      0.0+0.0im      0.0+1.73205im\n 0.0-1.0im      0.0-1.41421im  0.0+0.0im      0.0+0.0im      0.0+0.0im      0.0+0.0im      0.0+0.0im      0.0+0.0im      0.0+0.0im      0.0+0.0im\n 0.0+0.0im      0.0+0.0im      0.0-1.73205im  0.0+0.0im      0.0+0.0im      0.0+0.0im      0.0+0.0im      0.0+0.0im      0.0+0.0im      0.0+0.0im\n 0.0+1.41421im  0.0+1.0im      0.0+0.0im      0.0-1.41421im  0.0+0.0im      0.0+0.0im      0.0+0.0im      0.0+0.0im      0.0+0.0im      0.0+0.0im\n 0.0+0.0im      0.0+1.41421im  0.0+0.0im      0.0-1.0im      0.0+0.0im      0.0+0.0im      0.0+0.0im      0.0+0.0im      0.0+0.0im      0.0+0.0im\n 0.0+0.0im      0.0+0.0im      0.0+2.0im      0.0+0.0im      0.0-1.73205im  0.0+0.0im      0.0+0.0im      0.0+0.0im      0.0+0.0im      0.0+0.0im","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"By diagonalising this matrix the eigenstate have energy E and well-defined angular momentum.","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"Diagonalise this matrix to obtain the eigenstates of L_z. The eigenvectors provide the linear combinations of basis states with well-defined angular momentum, within the subspace of energy E.","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"Lz_vals, Lz_vecs = eigen(Lz_mat)","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"Eigen{ComplexF64, Float64, Matrix{ComplexF64}, Vector{Float64}}\nvalues:\n10-element Vector{Float64}:\n -2.9999999999999956\n -2.999999999999991\n -0.9999999999999991\n -0.9999999999999982\n -0.9999999999999973\n  1.0000000000000002\n  1.0000000000000027\n  1.0000000000000027\n  3.0\n  3.0000000000000004\nvectors:\n10×10 Matrix{ComplexF64}:\n       0.0+0.0im       -5.55112e-17-0.353553im         0.534676-0.217841im      2.77556e-17-0.204124im             0.0+0.0im           0.534676+0.217841im      2.77556e-17+0.204124im             0.0+0.0im       -5.55112e-17+0.353553im           0.0+0.0im\n       0.0+0.0im        5.55112e-17-0.5im             -0.378073+0.154037im              0.0-0.288675im             0.0+0.0im          -0.378073-0.154037im     -5.55112e-17+0.288675im             0.0+0.0im                0.0+0.5im                0.0+0.0im\n       0.0+0.612372im           0.0+0.0im          -5.55112e-17+0.0im           -1.2326e-32+2.77556e-17im          0.0+0.353553im           0.0+0.0im                   0.0+2.77556e-17im          0.0+0.353553im           0.0+0.0im                0.0+0.612372im\n       0.0+0.0im                0.0+0.353553im      5.55112e-17+6.93889e-17im           0.0-0.612372im             0.0+0.0im        5.55112e-17-1.38778e-16im           0.0+0.612372im             0.0+0.0im                0.0-0.353553im           0.0+0.0im\n       0.0-0.353553im    1.2326e-32+1.11022e-16im   5.55112e-17-2.77556e-17im  -2.46519e-32-2.77556e-17im          0.0+0.612372im  -1.11022e-16-2.77556e-17im   4.93038e-32-2.77556e-17im          0.0+0.612372im   -1.2326e-32+8.32667e-17im        0.0-0.353553im\n       0.0+0.0im           0.353553+0.0im                   0.0+0.0im              0.612372+0.0im                  0.0+0.0im                0.0+0.0im              0.612372+0.0im                  0.0+0.0im           0.353553+0.0im                0.0+0.0im\n -0.353553+0.0im                0.0+0.0im                   0.0+0.0im                   0.0+0.0im            -0.612372+0.0im                0.0+0.0im                   0.0+0.0im             0.612372+0.0im                0.0+0.0im           0.353553+0.0im\n       0.0+0.0im               -0.5+7.02973e-17im     -0.154037-0.378073im         0.288675-1.95105e-16im          0.0+0.0im          -0.154037+0.378073im         0.288675+2.29062e-16im          0.0+0.0im               -0.5-7.48398e-17im        0.0+0.0im\n       0.0+0.0im          -0.353553+8.84171e-17im      0.217841+0.534676im         0.204124-1.1389e-16im   8.32667e-17+0.0im           0.217841-0.534676im         0.204124+2.4427e-16im   8.32667e-17+0.0im          -0.353553-8.31718e-17im        0.0+0.0im\n  0.612372+0.0im                0.0+0.0im                   0.0+0.0im                   0.0+0.0im            -0.353553-0.0im                0.0+0.0im                   0.0+0.0im             0.353553+0.0im                0.0+0.0im          -0.612372-0.0im","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"Finally, consider the effect of interactions by looking at how states in a single block are perturbed. Only the energy shift due to the interaction is relevant so now rebuild the Hamiltonian without the non-interacting energy.","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"Hint = HOCartesianContactInteractions(addr1; S, interaction_only = true)\nΔE = eigvals(Matrix(Hint, addr1))","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"5-element Vector{Float64}:\n -1.6810327175633306e-17\n  3.469966302164114e-17\n  0.15915494309189535\n  0.1591549430918954\n  0.1591549430918954","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"Two eigenstates in this block are unaffected by the interaction and three have a non-zero energy shift.","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"The default strength of the interaction is g = 1.0. Other interactions strengths can be obtained by using keyword argument g in HOCartesianContactInteractions or by rescaling ΔE since the interactions are handled with first-order perturbation theory.","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"Rimu also contains HOCartesianEnergyConservedPerDim which is a similar Hamiltonian but with the stricter condition that the contact interaction only connects states that have the same total energy in each dimension, rather than conserving the overall total energy. Both Hamiltonians can handle anisotropic systems by passing a tuple S whose elements are not all the same. This will alter which states are connected by the interaction, but assumes that the harmonic trapping frequencies in each dimension are commensurate.","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"This page was generated using Literate.jl.","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"EditURL = \"../../../scripts/exact-example.jl\"","category":"page"},{"location":"generated/exact-example.html#Example-4:-Exact-diagonalization","page":"Exact diagonalization","title":"Example 4: Exact diagonalization","text":"","category":"section"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"When working with smaller systems or when multiple eigenvalues of a system are required, one can use an exact diagonalization method. There are a few ways to go about this, each with its pros and cons. The purpose of this tutorial is to show off the methods as well as provide a few tips regarding them.","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"A runnable script for this example is located here. Run it with julia exact-example.jl.","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"We start by loading Rimu.","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"using Rimu","category":"page"},{"location":"generated/exact-example.html#Introduction","page":"Exact diagonalization","title":"Introduction","text":"","category":"section"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"We will look at a bosonic system of 4 particles in 5 sites, formulated in momentum space. Let's start by building the Hamiltonian. To create a Fock state where all particles have zero momentum, we put all the particles in the mode at the centre of the address.","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"M = 5\nN = 4\nadd = BoseFS(M, cld(M, 2) => N)\nham = HubbardMom1D(add)","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"HubbardMom1D(fs\"|0 0 4 0 0⟩\"; u=1.0, t=1.0)","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"Before performing exact diagonalization, it is a good idea to check the dimension of the Hamiltonian.","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"dimension(ham)","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"70","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"Keep in mind that this is an estimate of the number of Fock states the Hamiltonian can act on, not the actual matrix size - the matrix size can sometimes be smaller. It can still be used as a guide to decide whether a Hamiltonian is amenable to exact diagonalization and to determine which algorithm would be best suited to diagonalising it.","category":"page"},{"location":"generated/exact-example.html#The-BasisSetRepresentation","page":"Exact diagonalization","title":"The BasisSetRepresentation","text":"","category":"section"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"As we'll see later, there are two ways to construct the matrices from Hamiltonians directly, but they both use BasisSetRepresentation under the hood. The BasisSetRepresentation, when called with a Hamiltonian and optionally a starting address, constructs the sparse matrix of the system, as well as its basis. The starting address defaults to the one that was used to initialize the Hamiltonian. BasisSetRepresentation only returns the part of the matrix that is accessible from this starting address through non-zero offdiagonal elements.","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"bsr = BasisSetRepresentation(ham);","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"To access the matrix or basis, access the sparse_matrix and basis fields, respectively.","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"bsr.sparse_matrix","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"14×14 SparseArrays.SparseMatrixCSC{Float64, Int64} with 104 stored entries:\n -6.8       0.69282   0.69282    ⋅         ⋅         ⋅         ⋅          ⋅         ⋅         ⋅         ⋅         ⋅         ⋅         ⋅ \n  0.69282  -3.03607   0.4       0.8       0.4       0.8       0.4        0.565685  0.282843   ⋅         ⋅         ⋅         ⋅         ⋅ \n  0.69282   0.4       1.43607   0.4       0.8       0.4       0.8         ⋅        0.282843  0.565685   ⋅         ⋅         ⋅         ⋅ \n   ⋅        0.8       0.4       0.581966  0.4        ⋅        0.4        0.282843  0.565685   ⋅        0.69282   0.69282    ⋅         ⋅ \n   ⋅        0.4       0.8       0.4       2.81803   0.4        ⋅          ⋅        0.565685  0.282843  0.69282    ⋅        0.69282    ⋅ \n   ⋅        0.8       0.4        ⋅        0.4       0.581966  0.4        0.282843  0.565685   ⋅         ⋅         ⋅        0.69282   0.69282\n   ⋅        0.4       0.8       0.4        ⋅        0.4       2.81803     ⋅        0.565685  0.282843   ⋅        0.69282    ⋅        0.69282\n   ⋅        0.565685   ⋅        0.282843   ⋅        0.282843   ⋅        -0.472136  0.8        ⋅        0.489898   ⋅         ⋅        0.489898\n   ⋅        0.282843  0.282843  0.565685  0.565685  0.565685  0.565685   0.8       4.4       0.8       0.489898  0.489898  0.489898  0.489898\n   ⋅         ⋅        0.565685   ⋅        0.282843   ⋅        0.282843    ⋅        0.8       8.47214    ⋅        0.489898  0.489898   ⋅ \n   ⋅         ⋅         ⋅        0.69282   0.69282    ⋅         ⋅         0.489898  0.489898   ⋅        1.56393    ⋅         ⋅         ⋅ \n   ⋅         ⋅         ⋅        0.69282    ⋅         ⋅        0.69282     ⋅        0.489898  0.489898   ⋅        6.03607    ⋅         ⋅ \n   ⋅         ⋅         ⋅         ⋅        0.69282   0.69282    ⋅          ⋅        0.489898  0.489898   ⋅         ⋅        6.03607    ⋅ \n   ⋅         ⋅         ⋅         ⋅         ⋅        0.69282   0.69282    0.489898  0.489898   ⋅         ⋅         ⋅         ⋅        1.56393","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"bsr.basis","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"14-element Vector{BoseFS{4, 5, BitString{8, 1, UInt8}}}:\n fs\"|0 0 4 0 0⟩\"\n fs\"|0 1 2 1 0⟩\"\n fs\"|1 0 2 0 1⟩\"\n fs\"|1 0 1 2 0⟩\"\n fs\"|0 0 1 1 2⟩\"\n fs\"|0 2 1 0 1⟩\"\n fs\"|2 1 1 0 0⟩\"\n fs\"|0 2 0 2 0⟩\"\n fs\"|1 1 0 1 1⟩\"\n fs\"|2 0 0 0 2⟩\"\n fs\"|0 0 0 3 1⟩\"\n fs\"|3 0 0 1 0⟩\"\n fs\"|0 1 0 0 3⟩\"\n fs\"|1 3 0 0 0⟩\"","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"When the basis is not needed, we can use Matrix or sparse directly.","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"Matrix(ham)","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"14×14 Matrix{Float64}:\n -6.8       0.69282   0.69282   0.0       0.0       0.0       0.0        0.0       0.0       0.0       0.0       0.0       0.0       0.0\n  0.69282  -3.03607   0.4       0.8       0.4       0.8       0.4        0.565685  0.282843  0.0       0.0       0.0       0.0       0.0\n  0.69282   0.4       1.43607   0.4       0.8       0.4       0.8        0.0       0.282843  0.565685  0.0       0.0       0.0       0.0\n  0.0       0.8       0.4       0.581966  0.4       0.0       0.4        0.282843  0.565685  0.0       0.69282   0.69282   0.0       0.0\n  0.0       0.4       0.8       0.4       2.81803   0.4       0.0        0.0       0.565685  0.282843  0.69282   0.0       0.69282   0.0\n  0.0       0.8       0.4       0.0       0.4       0.581966  0.4        0.282843  0.565685  0.0       0.0       0.0       0.69282   0.69282\n  0.0       0.4       0.8       0.4       0.0       0.4       2.81803    0.0       0.565685  0.282843  0.0       0.69282   0.0       0.69282\n  0.0       0.565685  0.0       0.282843  0.0       0.282843  0.0       -0.472136  0.8       0.0       0.489898  0.0       0.0       0.489898\n  0.0       0.282843  0.282843  0.565685  0.565685  0.565685  0.565685   0.8       4.4       0.8       0.489898  0.489898  0.489898  0.489898\n  0.0       0.0       0.565685  0.0       0.282843  0.0       0.282843   0.0       0.8       8.47214   0.0       0.489898  0.489898  0.0\n  0.0       0.0       0.0       0.69282   0.69282   0.0       0.0        0.489898  0.489898  0.0       1.56393   0.0       0.0       0.0\n  0.0       0.0       0.0       0.69282   0.0       0.0       0.69282    0.0       0.489898  0.489898  0.0       6.03607   0.0       0.0\n  0.0       0.0       0.0       0.0       0.69282   0.69282   0.0        0.0       0.489898  0.489898  0.0       0.0       6.03607   0.0\n  0.0       0.0       0.0       0.0       0.0       0.69282   0.69282    0.489898  0.489898  0.0       0.0       0.0       0.0       1.56393","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"sparse(ham)","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"14×14 SparseArrays.SparseMatrixCSC{Float64, Int64} with 104 stored entries:\n -6.8       0.69282   0.69282    ⋅         ⋅         ⋅         ⋅          ⋅         ⋅         ⋅         ⋅         ⋅         ⋅         ⋅ \n  0.69282  -3.03607   0.4       0.8       0.4       0.8       0.4        0.565685  0.282843   ⋅         ⋅         ⋅         ⋅         ⋅ \n  0.69282   0.4       1.43607   0.4       0.8       0.4       0.8         ⋅        0.282843  0.565685   ⋅         ⋅         ⋅         ⋅ \n   ⋅        0.8       0.4       0.581966  0.4        ⋅        0.4        0.282843  0.565685   ⋅        0.69282   0.69282    ⋅         ⋅ \n   ⋅        0.4       0.8       0.4       2.81803   0.4        ⋅          ⋅        0.565685  0.282843  0.69282    ⋅        0.69282    ⋅ \n   ⋅        0.8       0.4        ⋅        0.4       0.581966  0.4        0.282843  0.565685   ⋅         ⋅         ⋅        0.69282   0.69282\n   ⋅        0.4       0.8       0.4        ⋅        0.4       2.81803     ⋅        0.565685  0.282843   ⋅        0.69282    ⋅        0.69282\n   ⋅        0.565685   ⋅        0.282843   ⋅        0.282843   ⋅        -0.472136  0.8        ⋅        0.489898   ⋅         ⋅        0.489898\n   ⋅        0.282843  0.282843  0.565685  0.565685  0.565685  0.565685   0.8       4.4       0.8       0.489898  0.489898  0.489898  0.489898\n   ⋅         ⋅        0.565685   ⋅        0.282843   ⋅        0.282843    ⋅        0.8       8.47214    ⋅        0.489898  0.489898   ⋅ \n   ⋅         ⋅         ⋅        0.69282   0.69282    ⋅         ⋅         0.489898  0.489898   ⋅        1.56393    ⋅         ⋅         ⋅ \n   ⋅         ⋅         ⋅        0.69282    ⋅         ⋅        0.69282     ⋅        0.489898  0.489898   ⋅        6.03607    ⋅         ⋅ \n   ⋅         ⋅         ⋅         ⋅        0.69282   0.69282    ⋅          ⋅        0.489898  0.489898   ⋅         ⋅        6.03607    ⋅ \n   ⋅         ⋅         ⋅         ⋅         ⋅        0.69282   0.69282    0.489898  0.489898   ⋅         ⋅         ⋅         ⋅        1.56393","category":"page"},{"location":"generated/exact-example.html#Computing-eigenvalues","page":"Exact diagonalization","title":"Computing eigenvalues","text":"","category":"section"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"Now that we have a way of constructing matrices from Hamiltonians, we can use standard Julia functionality to diagonalise them.","category":"page"},{"location":"generated/exact-example.html#The-built-in-method","page":"Exact diagonalization","title":"The built-in method","text":"","category":"section"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"Let's begin by looking at the eigen, eigvecs, and eigvals functions from the LinearAlgebra standard library. They operate on dense matrices and return the full spectra, hence they are only useful for small systems, or when all eigenvalues are required.","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"using LinearAlgebra\n\nmat = Matrix(ham)\neig = eigen(mat);","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"The values can be accessed like so:","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"eig.values","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"14-element Vector{Float64}:\n -6.9798639983216155\n -3.363124291613371\n -0.7590191922770746\n  0.1358418221962303\n  0.1578999869460933\n  0.8767114411781396\n  1.530592997097333\n  1.5835732611867464\n  3.072870330325867\n  3.125672653951849\n  4.862107221562182\n  6.26069485038059\n  6.402671211183119\n  9.093371706203957","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"The vectors are stored as columns in eig.vectors:","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"eig.vectors","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"14×14 Matrix{Float64}:\n -0.980348     0.175378     0.0135766   -2.81719e-15  -0.0221221  -0.0697193   1.3739e-15    0.0314466   -2.35922e-16  -0.0360987   -0.0161557  -5.55112e-17   0.00625248  -0.0058099\n  0.177701     0.932229     0.105473     3.01009e-14   0.225254   -0.132826    9.71445e-17  -0.00292026  -2.09555e-15  -0.0861158   -0.0907789  -4.996e-16     0.0591715   -0.0264275\n  0.0768085   -0.0622307    0.0129069   -6.06251e-14  -0.447424   -0.63969     2.05322e-14   0.383444    -6.54338e-15  -0.431051    -0.181167   -6.10623e-16   0.0599783   -0.106852\n -0.0214153   -0.175119    -0.20169      0.616673      0.522017   -0.296818   -0.31234      -0.122119    -0.123629     -0.106455    -0.126661    0.0829132     0.148347    -0.0574235\n -0.0119687   -0.0373038    0.0678797    0.0693699     0.0495446   0.416847    0.33773       0.0584554   -0.601232     -0.467179    -0.215841   -0.140166      0.190543    -0.114342\n -0.0214153   -0.175119    -0.20169     -0.616673      0.522017   -0.296818    0.31234      -0.122119     0.123629     -0.106455    -0.126661   -0.0829132     0.148347    -0.0574235\n -0.0119687   -0.0373038    0.0678797   -0.0693699     0.0495446   0.416847   -0.33773       0.0584554    0.601232     -0.467179    -0.215841    0.140166      0.190543    -0.114342\n -0.0138439   -0.165902     0.922758     1.00753e-14   0.1111     -0.172508   -1.30521e-14  -0.207974     2.66454e-15   0.0848902   -0.149153   -8.32667e-16   0.0712921   -0.0301968\n -0.00234782   0.00840544  -0.098969    -9.6867e-15   -0.0847116   0.082999    1.51129e-14   0.274424     3.60822e-15   0.575786    -0.61385    -2.72005e-15   0.353775    -0.259338\n -0.00237613   0.00294196   0.00143189   5.56152e-15   0.0427486   0.0110863  -3.72619e-15  -0.0663108    9.50628e-16   0.00167015   0.0832916   2.91434e-15  -0.448519    -0.8863\n  0.00363555   0.0455298   -0.133824    -0.332825     -0.290831   -0.057199   -0.527627     -0.588225    -0.332816     -0.0472302   -0.18528    -0.00844536    0.0915588   -0.0346434\n  0.00195478   0.0150664    0.0206752   -0.0642658    -0.0638689  -0.0250518   0.0999631    -0.012992    -0.111668      0.0393523    0.423534    0.688046      0.513839    -0.222499\n  0.00195478   0.0150664    0.0206752    0.0642658    -0.0638689  -0.0250518  -0.0999631    -0.012992     0.111668      0.0393523    0.423534   -0.688046      0.513839    -0.222499\n  0.00363555   0.0455298   -0.133824     0.332825     -0.290831   -0.057199    0.527627     -0.588225     0.332816     -0.0472302   -0.18528     0.00844536    0.0915588   -0.0346434","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"If you need the full spectrum, but would like to use less memory, consider using the in-place eigen!.","category":"page"},{"location":"generated/exact-example.html#Iterative-sparse-solvers","page":"Exact diagonalization","title":"Iterative sparse solvers","text":"","category":"section"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"For larger Hamiltonians, it is better to use an iterative solver. There are several options. We will look at eigs from Arpack.jl and eigsolve from KrylovKit.jl.","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"Let's start with Arpack's eigs. It is important to set the nev and which keyword arguments. nev sets the number of eigenpairs to find. which should in most cases be set to :SR, which will find the eigenvalues with the smallest real part.","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"using Arpack\n\nnum_eigvals = 3\n\nsparse_matrix = sparse(ham)\nvals_ar, vecs_ar = eigs(sparse_matrix; which=:SR, nev=num_eigvals)\nvals_ar","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"3-element Vector{Float64}:\n -6.979863998321619\n -3.3631242916133606\n -0.7590191922770747","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"Using KrylovKit's eigsolve is similar, but the nev and which are given as positional arguments. Note that KrylovKit may sometimes return more than nev eigenpairs if it happens to find them.","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"using KrylovKit\n\nvals_kk, vecs_kk = eigsolve(sparse_matrix, num_eigvals, :SR)\nvals_kk","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"14-element Vector{Float64}:\n -6.979863998321608\n -3.3631242916133797\n -0.7590191922770853\n  0.1358418221962303\n  0.15789998694607732\n  0.8767114411781343\n  1.5305929970973358\n  1.5835732611867357\n  3.072870330325853\n  3.125672653951848\n  4.862107221562173\n  6.260694850380595\n  6.402671211183112\n  9.093371706203957","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"Both solvers use variants of the Lanczos algorithm for Hermitian matrices and the Arnoldi algorithm for non-Hermitian ones. These may in some cases miss degenerate eigenpairs.","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"If diagonalization takes too long, you can reduce the tolerance by setting the tol keyword argument to eigs or eigsolve. Using drastically lower tolerances than the default can still produce good results in practice. This, however, should be checked on a case-by-case basis.","category":"page"},{"location":"generated/exact-example.html#The-matrix-free-method","page":"Exact diagonalization","title":"The matrix-free method","text":"","category":"section"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"KrylovKit's eigsolve function is implemented in a way that does not require the linear operator and vector to be Julia arrays. Rimu leverages this functionality, which allows diagonalising Hamiltonians without ever needing to construct the matrix - all matrix elements are generated on the fly.","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"While this method is by far the slowest of the ones discussed, it also uses drastically less memory. This allows us to diagonalise much larger Hamiltonians.","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"To use this method, you first need a starting vector. It's best to use PDVec here as it leverages threading during the diagonalization.","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"dvec = PDVec(add => 1.0)","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"1-element PDVec: style = IsDeterministic{Float64}()\n  fs\"|0 0 4 0 0⟩\" => 1.0","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"Then, pass that vector and the Hamiltonian to eigsolve.","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"vals_mf, vecs_mf = eigsolve(ham, dvec, num_eigvals, :SR; issymmetric=true)\nvals_mf","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"10-element Vector{Float64}:\n -6.979863998321612\n -3.3631242916133406\n -0.7590191922770728\n  0.1578999869460862\n  0.8767114411781503\n  1.5835732611867401\n  3.125672653951839\n  4.862107221562172\n  6.402671211183112\n  9.093371706203953","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"Keep in mind that if an eigenvector is orthogonal to dvec, KrylovKit will miss it. Consider the following example:","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"eigsolve(ham, vecs_mf[2], num_eigvals, :SR, issymmetric=true)[1]","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"1-element Vector{Float64}:\n -3.3631242916133606","category":"page"},{"location":"generated/exact-example.html#Reducing-matrix-size-with-symmetries","page":"Exact diagonalization","title":"Reducing matrix size with symmetries","text":"","category":"section"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"As these matrices tend to get large quickly, memory is usually the bottleneck.  There are currently two methods implemented to reduce the matrix size, ParitySymmetry and TimeReversalSymmetry. These symmetries work by performing a unitary transformation on the Hamiltonian which causes it to become block-diagonal. When building a matrix from a block-diagonal Hamiltonian, only the block that contains the starting address is constructed.","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"You should only use these where the relevant symmetries actually apply - no checks are performed to make sure they do. There is also currently no way of using both at the same time. Please consult the documentation for a more in-depth description of these options.","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"The Hamiltonian presented in this example is compatible with ParitySymmetry. Let's see how the matrix size is reduced when applying it.","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"size(sparse(ham))","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"(14, 14)","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"size(sparse(ParitySymmetry(ham)))","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"(10, 10)","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"In this small example, the size reduction is modest, but for larger systems, you can expect to reduce the dimension of the matrix by about half.","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"all_eigs = eigvals(Matrix(ham))\neven_eigs = eigvals(Matrix(ParitySymmetry(ham)))","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"10-element Vector{Float64}:\n -6.979863998321621\n -3.3631242916133637\n -0.759019192277076\n  0.1578999869460802\n  0.8767114411781437\n  1.5835732611867417\n  3.125672653951844\n  4.862107221562179\n  6.402671211183117\n  9.093371706203957","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"The eigenvalues of the transformed Hamiltonian are a subset of the full spectrum. To get the other half, we can pass the even=false keyword argument to ParitySymmetry. When doing that, we need to make sure the starting address of the Hamiltonian is not symmetric under reversal:","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"add_odd = BoseFS(M, cld(M, 2) => N - 3, cld(M, 2) - 1 => 2, cld(M, 2) + 2 => 1)","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"BoseFS{4,5}(0, 2, 1, 0, 1)","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"odd_eigs = eigvals(Matrix(ParitySymmetry(HubbardMom1D(add_odd); even=false)))","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"4-element Vector{Float64}:\n 0.135841822196218\n 1.530592997097328\n 3.0728703303258613\n 6.260694850380591","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"Now, let's check that combining the two sets of eigenvalues indeed recovers the whole spectrum.","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"sort([even_eigs; odd_eigs]) ≈ all_eigs","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"true","category":"page"},{"location":"generated/exact-example.html#Computing-observables","page":"Exact diagonalization","title":"Computing observables","text":"","category":"section"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"Since building a matrix from an operator only builds the part that is reachable from the starting address, we need to use a different approach when computing observables.","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"To demonstrate this, we will use the DensityMatrixDiagonal operator, which in this case will give the momentum density.","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"The idea here is to construct a PDVec from the computed eigenvector and use it directly with the operator.","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"dvec = PDVec(zip(bsr.basis, eigvecs(Matrix(ham))[:, 1]))","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"14-element PDVec: style = IsDeterministic{Float64}()\n  fs\"|1 0 1 2 0⟩\" => -0.0214153\n  fs\"|2 0 0 0 2⟩\" => -0.00237613\n  fs\"|0 0 4 0 0⟩\" => -0.980348\n  fs\"|0 0 0 3 1⟩\" => 0.00363555\n  fs\"|2 1 1 0 0⟩\" => -0.0119687\n  fs\"|1 0 2 0 1⟩\" => 0.0768085\n  fs\"|1 3 0 0 0⟩\" => 0.00363555\n  fs\"|0 1 2 1 0⟩\" => 0.177701\n  fs\"|0 0 1 1 2⟩\" => -0.0119687\n  fs\"|3 0 0 1 0⟩\" => 0.00195478\n  fs\"|0 2 0 2 0⟩\" => -0.0138439\n  fs\"|1 1 0 1 1⟩\" => -0.00234782\n  fs\"|0 1 0 0 3⟩\" => 0.00195478\n  fs\"|0 2 1 0 1⟩\" => -0.0214153","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"The eigenvectors these methods produce are normalized, hence we can use the three-argument dot to compute the values of observables. Here we are computing the single particle momentum density distribution, which is just the diagonal of the single-particle density matrix in momentum space.","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"[dot(dvec, DensityMatrixDiagonal(i), dvec) for i in 1:M]","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"5-element Vector{Float64}:\n 0.0066861389450877905\n 0.033070399772041625\n 3.9204869225657406\n 0.03307039977204162\n 0.006686138945087839","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"This page was generated using Literate.jl.","category":"page"},{"location":"rimuio.html#Module-RimuIO","page":"I/O","title":"Module RimuIO","text":"","category":"section"},{"location":"rimuio.html","page":"I/O","title":"I/O","text":"Modules = [RimuIO]","category":"page"},{"location":"rimuio.html#Rimu.RimuIO","page":"I/O","title":"Rimu.RimuIO","text":"Module to provide file input and output functionality for Rimu. Provides convenience functions:\n\nRimuIO.save_df(filename, df::DataFrame) Save dataframe in Arrow format.\nRimuIO.load_df(filename) Load Arrow file into dataframe.\n\n\n\n\n\n","category":"module"},{"location":"rimuio.html#Rimu.RimuIO.load_df-Tuple{Any}","page":"I/O","title":"Rimu.RimuIO.load_df","text":"RimuIO.load_df(filename; propagate_metadata = true, add_filename = true) -> DataFrame\n\nLoad Arrow file into DataFrame. Optionally propagate metadata to DataFrame and add the file name as metadata.\n\nSee also RimuIO.save_df.\n\n\n\n\n\n","category":"method"},{"location":"rimuio.html#Rimu.RimuIO.save_df-Tuple{Any, DataFrame}","page":"I/O","title":"Rimu.RimuIO.save_df","text":"RimuIO.save_df(filename, df::DataFrame; kwargs...)\n\nSave dataframe in Arrow format.\n\nKeyword arguments are passed on to Arrow.write. Compression is enabled by default for large DataFrames (over 10,000 rows).\n\nTable-level metadata of the DataFrame is saved as Arrow metadata (with String value) unless overwritten with the keyword argument metadata.\n\nSee also RimuIO.load_df.\n\n\n\n\n\n","category":"method"},{"location":"rimuio.html#Index","page":"I/O","title":"Index","text":"","category":"section"},{"location":"rimuio.html","page":"I/O","title":"I/O","text":"Pages   = [\"rimuio.md\"]","category":"page"},{"location":"hamiltonians.html#Module-Hamiltonians","page":"Hamiltonians","title":"Module Hamiltonians","text":"","category":"section"},{"location":"hamiltonians.html","page":"Hamiltonians","title":"Hamiltonians","text":"This module contains definitions of Hamiltonians, in particular specific physical models of interest. These are organised by means of an interface around the abstract type AbstractHamiltonian, in the spirit of the AbstractArray interface as discussed in the Julia Documentation.","category":"page"},{"location":"hamiltonians.html","page":"Hamiltonians","title":"Hamiltonians","text":"The Hamiltonians can be used for projector quantum Monte Carlo with ProjectorMonteCarloProblem or for exact diagonalization with ExactDiagonalizationProblem, see Exact Diagonalization.","category":"page"},{"location":"hamiltonians.html","page":"Hamiltonians","title":"Hamiltonians","text":"Hamiltonians","category":"page"},{"location":"hamiltonians.html#Rimu.Hamiltonians","page":"Hamiltonians","title":"Rimu.Hamiltonians","text":"The module Rimu.Hamiltonians defines types and functions for working with Hamiltonians.\n\nExported concrete Hamiltonian types\n\nReal space Hubbard models\n\nHubbardReal1D\nBoseHubbardReal1D2C\nHubbardReal1DEP\nHubbardRealSpace\nExtendedHubbardReal1D\n\nMomentum space Hubbard models\n\nHubbardMom1D\nBoseHubbardMom1D2C\nHubbardMom1DEP\n\nHarmonic oscillator models\n\nHOCartesianContactInteractions\nHOCartesianEnergyConservedPerDim\nHOCartesianCentralImpurity\n\nOther\n\nFroehlichPolaron\nMatrixHamiltonian\nTranscorrelated1D\n\nWrappers\n\nGutzwillerSampling\nGuidingVectorSampling\nParitySymmetry\nTimeReversalSymmetry\nStoquastic\n\nObservables\n\nParticleNumberOperator\nG2RealCorrelator\nG2RealSpace\nG2MomCorrelator\nDensityMatrixDiagonal\nSingleParticleExcitation\nTwoParticleExcitation\nMomentum\nAxialAngularMomentumHO\n\nInterface for working with Hamiltonians\n\nAbstractHamiltonian: defined in the module Interfaces\n\n\n\n\n\n","category":"module"},{"location":"hamiltonians.html#Model-Hamiltonians","page":"Hamiltonians","title":"Model Hamiltonians","text":"","category":"section"},{"location":"hamiltonians.html","page":"Hamiltonians","title":"Hamiltonians","text":"Here is a list of fully implemented model Hamiltonians. There are several variants of the Hubbard model in real and momentum space, as well as some other models.","category":"page"},{"location":"hamiltonians.html#Real-space-Hubbard-models","page":"Hamiltonians","title":"Real space Hubbard models","text":"","category":"section"},{"location":"hamiltonians.html","page":"Hamiltonians","title":"Hamiltonians","text":"HubbardReal1D\nBoseHubbardReal1D2C\nHubbardReal1DEP\nHubbardRealSpace\nExtendedHubbardReal1D","category":"page"},{"location":"hamiltonians.html#Rimu.Hamiltonians.HubbardReal1D","page":"Hamiltonians","title":"Rimu.Hamiltonians.HubbardReal1D","text":"HubbardReal1D(address; u=1.0, t=1.0)\n\nImplements a one-dimensional Bose Hubbard chain in real space.\n\nhatH = -t sum_langle ijrangle a_i^ a_j + fracu2sum_i n_i (n_i-1)\n\nArguments\n\naddress: the starting address, defines number of particles and sites.\nu: the interaction parameter.\nt: the hopping strength.\n\nSee also\n\nHubbardMom1D\nExtendedHubbardReal1D\n\n\n\n\n\n","category":"type"},{"location":"hamiltonians.html#Rimu.Hamiltonians.BoseHubbardReal1D2C","page":"Hamiltonians","title":"Rimu.Hamiltonians.BoseHubbardReal1D2C","text":"BoseHubbardReal1D2C(address::BoseFS2C; ua=1.0, ub=1.0, ta=1.0, tb=1.0, v=1.0)\n\nImplements a two-component one-dimensional Bose Hubbard chain in real space.\n\nhatH = hatH_a + hatH_b + Vsum_i n_a_in_b_i\n\nArguments\n\naddress: the starting address, defines number of particles and sites.\nua: the on-site interaction parameter parameter for Hamiltonian a.\nub: the on-site interaction parameter parameter for Hamiltonian b.\nta: the hopping strength for Hamiltonian a.\ntb: the hopping strength for Hamiltonian b.\nv: the inter-species interaction parameter V.\n\nSee also\n\nHubbardReal1D\nBoseHubbardMom1D2C\n\n\n\n\n\n","category":"type"},{"location":"hamiltonians.html#Rimu.Hamiltonians.HubbardReal1DEP","page":"Hamiltonians","title":"Rimu.Hamiltonians.HubbardReal1DEP","text":"HubbardReal1DEP(address; u=1.0, t=1.0, v_ho=1.0)\n\nImplements a one-dimensional Bose Hubbard chain in real space with external potential.\n\nhatH = -t sum_langle ijrangle a_i^ a_j + sum_i ϵ_i n_i\n+ fracu2sum_i n_i (n_i-1)\n\nArguments\n\naddress: the starting address, defines number of particles and sites.\nu: the interaction parameter.\nt: the hopping strength.\nv_ho: strength of the external harmonic oscillator potential ϵ_i = v_ho i^2.\n\nThe first index is i=0 and the maximum of the potential occurs in the centre of the lattice.\n\nSee also\n\nHubbardReal1D\nHubbardMom1D\nExtendedHubbardReal1D\n\n\n\n\n\n","category":"type"},{"location":"hamiltonians.html#Rimu.Hamiltonians.HubbardRealSpace","page":"Hamiltonians","title":"Rimu.Hamiltonians.HubbardRealSpace","text":"HubbardRealSpace(address; geometry=PeriodicBoundaries(M,), t=ones(C), u=ones(C, C), v=zeros(C, D))\n\nHubbard model in real space. Supports single or multi-component Fock state addresses (with C components) and various (rectangular) lattice geometries in D dimensions.\n\n  hatH = -sum_langle ijrangleσ t_σ a^_iσ a_jσ +\n  frac12sum_iσ u_σσ n_iσ (n_iσ - 1) +\n  sum_iστu_στ n_iσ n_iτ\n\nIf v is nonzero then this calculates hatH + hatV by adding the harmonic trapping potential\n\n    hatV = sum_iσd v_σd x_di^2 n_iσ\n\nwhere x_di is the distance of site i from the centre of the trap along dimension d.\n\nAddress types\n\nBoseFS: Single-component Bose-Hubbard model.\nFermiFS: Single-component Fermi-Hubbard model.\nCompositeFS: For multi-component models.\n\nNote that a single component of fermions cannot interact with itself. A warning is produced if addressis incompatible with the interaction parameters u.\n\nGeometries\n\nImplemented CubicGrids for keyword geometry\n\nPeriodicBoundaries\nHardwallBoundaries\nLadderBoundaries\n\nDefault is geometry=PeriodicBoundaries(M,), i.e. a one-dimensional lattice with the number of sites M inferred from the number of modes in address.\n\nOther parameters\n\nt: the hopping strengths. Must be a vector of length C. The i-th element of the vector corresponds to the hopping strength of the i-th component.\nu: the on-site interaction parameters. Must be a symmetric matrix. u[i, j] corresponds to the interaction between the i-th and j-th component. u[i, i] corresponds to the interaction of a component with itself. Note that u[i,i] must be zero for fermionic components.\nv: the trap potential strengths. Must be a matrix of size C × D. v[i,j] is the strength of the trap for component i in the jth dimension.\n\n\n\n\n\n","category":"type"},{"location":"hamiltonians.html#Rimu.Hamiltonians.ExtendedHubbardReal1D","page":"Hamiltonians","title":"Rimu.Hamiltonians.ExtendedHubbardReal1D","text":"ExtendedHubbardReal1D(address; u=1.0, v=1.0, t=1.0, boundary_condition=:periodic)\n\nImplements the extended Hubbard model on a one-dimensional chain in real space. This Hamiltonian can be either real or complex, depending on the choice of boundary_condition.\n\nhatH = -t sum_langle ijrangle a_i^ a_j + fracu2sum_i n_i (n_i-1) +\nv sum_langle ijrangle n_i n_j\n\nArguments\n\naddress: the starting address.\nu: on-site interaction parameter\nv: the next-neighbor interaction\nt: the hopping strength\nboundary_condition The following values are supported:\n:periodic: usual period boundary condition realising a ring geometry.\n:hard_wall: hopping over the boundary is not allowed.\n:twisted: like :periodic but hopping over the boundary incurs an additional factor of -1.\nθ <: Number: like :periodic and :twisted but hopping over the boundary incurs a factor exp(iθ) for a hop to the right and exp(iθ) for a hop to the left. With this choice the Hamiltonian will have a complex eltype whereas otherwise the eltype is determined by the type of the parameters t, u, and v.\n\nSee also HubbardRealSpace.\n\n\n\n\n\n","category":"type"},{"location":"hamiltonians.html#Momentum-space-Hubbard-models","page":"Hamiltonians","title":"Momentum space Hubbard models","text":"","category":"section"},{"location":"hamiltonians.html","page":"Hamiltonians","title":"Hamiltonians","text":"HubbardMom1D\nBoseHubbardMom1D2C\nHubbardMom1DEP\nExtendedHubbardMom1D","category":"page"},{"location":"hamiltonians.html#Rimu.Hamiltonians.HubbardMom1D","page":"Hamiltonians","title":"Rimu.Hamiltonians.HubbardMom1D","text":"HubbardMom1D(address; u=1.0, t=1.0, dispersion=hubbard_dispersion)\n\nImplements a one-dimensional Bose Hubbard chain in momentum space.\n\nhatH =  sum_k ϵ_k n_k + fracuMsum_kpqr a^_r a^_q a_p a_k δ_r+qp+k\n\nArguments\n\naddress: the starting address, defines number of particles and sites.\nu: the interaction parameter.\nt: the hopping strength.\ndispersion: defines ϵ_k =dispersion(t, k)\nhubbard_dispersion: ϵ_k = -2(Re(t) cos(k) + Im(t) sin(k))\ncontinuum_dispersion: ϵ_k = Re(t) k^2 - 2 Im(t) k\n\nSee also\n\nHubbardReal1D\nExtendedHubbardReal1D\n\n\n\n\n\n","category":"type"},{"location":"hamiltonians.html#Rimu.Hamiltonians.BoseHubbardMom1D2C","page":"Hamiltonians","title":"Rimu.Hamiltonians.BoseHubbardMom1D2C","text":"BoseHubbardMom1D2C(address::BoseFS2C; ua=1.0, ub=1.0, ta=1.0, tb=1.0, v=1.0, kwargs...)\n\nImplements a one-dimensional Bose Hubbard chain in momentum space with a two-component Bose gas.\n\nhatH = hatH_a + hatH_b + fracVMsum_kpqr b^_r a^_q b_p a_k δ_r+qp+k\n\nArguments\n\naddress: the starting address.\nua: the u parameter for Hamiltonian a.\nub: the u parameter for Hamiltonian b.\nta: the t parameter for Hamiltonian a.\ntb: the t parameter for Hamiltonian b.\nv: the inter-species interaction parameter V.\n\nFurther keyword arguments are passed on to the constructor of HubbardMom1D.\n\nSee also\n\nBoseFS2C\nBoseHubbardReal1D2C\n\n\n\n\n\n","category":"type"},{"location":"hamiltonians.html#Rimu.Hamiltonians.HubbardMom1DEP","page":"Hamiltonians","title":"Rimu.Hamiltonians.HubbardMom1DEP","text":"HubbardMom1DEP(address; u=1.0, t=1.0, v_ho=1.0, dispersion=hubbard_dispersion)\n\nImplements a one-dimensional Bose Hubbard chain in momentum space with harmonic external potential.\n\nH = sum_k ϵ_k n_k + fracuMsum_kpqr a^_r a^_q a_p a_k δ_r+qp+k\n            + V_mathrmho \n\nwhere\n\nbeginaligned\nV_mathrmho  = frac1M sum_pq  mathrmDFTV_ext_p-q \n                    a^_p a_q \nV_mathrmext(x) = v_mathrmho x^2 \nendaligned\n\nis an external harmonic potential in momentum space, mathrmDFT_k is a discrete Fourier transform performed by fft()[k%M + 1], and M == num_modes(address).\n\nArguments\n\naddress: the starting address, defines number of particles and sites.\nu: the interaction parameter.\nt: the hopping strength.\ndispersion: defines ϵ_k =dispersion(t, k)\nhubbard_dispersion: ϵ_k = -2Re(t) cos(k) + Im(t) sin(k)\ncontinuum_dispersion: ϵ_k = Re(t) k^2 - 2 Im(t) k\nv_ho: strength of the external harmonic oscillator potential v_mathrmho.\n\nSee also HubbardMom1D, HubbardReal1DEP, Transcorrelated1D, Hamiltonians.\n\n\n\n\n\n","category":"type"},{"location":"hamiltonians.html#Rimu.Hamiltonians.ExtendedHubbardMom1D","page":"Hamiltonians","title":"Rimu.Hamiltonians.ExtendedHubbardMom1D","text":"ExtendedHubbardMom1D(\n    address; \n    u=1.0, t=1.0, v=1.0, dispersion=hubbard_dispersion, boundary_condition = 0.0\n)\n\nImplements a one-dimensional extended Hubbard chain, also known as the t - V model,  in momentum space.\n\nhatH =  sum_k ϵ_k n_k + frac12M sum_kpqr (u + 2v cos(q-p)) a^_r a^_q a_p a_k δ_r+qp+k\n\nArguments\n\naddress: the starting address, defines number of particles and sites.\nu: the interaction parameter.\nt: the hopping strength.\nboundary_condition: θ <: Number: hopping over the boundary incurs a   factor exp(iθ) for a hop to the right and exp(iθ) for a hop to the left.\ndispersion: defines ϵ_k =dispersion(t, k + θ)\nhubbard_dispersion: ϵ_k = -2 (Re(t) cos(k + θ) + Im(t) sin(k + θ))\ncontinuum_dispersion: ϵ_k = Re(t) (k + θ)^2 - 2 Im(t) (k + θ)\n\nSee also\n\nHubbardMom1D\nHubbardReal1D\nExtendedHubbardReal1D\n\n\n\n\n\n","category":"type"},{"location":"hamiltonians.html#Harmonic-oscillator-models","page":"Hamiltonians","title":"Harmonic oscillator models","text":"","category":"section"},{"location":"hamiltonians.html","page":"Hamiltonians","title":"Hamiltonians","text":"HOCartesianContactInteractions\nHOCartesianEnergyConservedPerDim\nHOCartesianCentralImpurity","category":"page"},{"location":"hamiltonians.html#Rimu.Hamiltonians.HOCartesianContactInteractions","page":"Hamiltonians","title":"Rimu.Hamiltonians.HOCartesianContactInteractions","text":"HOCartesianContactInteractions(addr; S, η, g = 1.0, interaction_only = false, block_by_level = true)\n\nImplements a bosonic harmonic oscillator in Cartesian basis with contact interactions\n\nhatH = sum_i epsilon_mathbfi n_mathbfi + fracg2sum_mathbfijkl\n    V_mathbfijkl a^_mathbfi a^_mathbfj a_mathbfk a_mathbfl\n\nFor a D-dimensional harmonic oscillator indices mathbfi mathbfj ldots are D-tuples. The energy scale is defined by the first dimension i.e. hbar omega_x so that single particle energies are\n\n    fracepsilon_mathbfihbar omega_x = (i_x + 12) + eta_y (i_y+12) + ldots\n\nThe factors eta_y ldots allow for anisotropic trapping geometries and are assumed to be greater than 1 so that omega_x is the smallest trapping frequency.\n\nBy default the offdiagonal elements due to the interactions are consistent with first-order degenerate perturbation theory\n\n    V_mathbfijkl = delta_epsilon_mathbfi + epsilon_mathbfj\n        ^epsilon_mathbfk + epsilon_mathbfl\n        prod_d in x yldots mathcalI(i_dj_dk_dl_d)\n\nwhere the delta function indicates that the total noninteracting energy is conserved meaning all states with the same noninteracting energy are connected by this interaction and the Hamiltonian blocks according to noninteracting energy levels. Setting block_by_level = false will disable this restriction and allow coupling between basis states of any noninteracting energy level, leading to many more offdiagonals and fewer but larger blocks (the blocks are still distinguished by parity of basis states). Alternatively, see HOCartesianEnergyConservedPerDim for a model with the stronger restriction that conserves energy separately per spatial dimension. The integral mathcalI(abcd) is of four one dimensional harmonic oscillator basis functions, implemented in four_oscillator_integral_general.\n\nArguments\n\naddr: the starting address, defines number of particles and total number of modes.\nS: Tuple of the number of levels in each dimension, including the groundstate. The   allowed couplings between states is defined by the aspect ratio of S .- 1. Defaults   to a 1D spectrum with number of levels matching modes of addr. Will be sorted to make   the first dimension the largest.\nη: Define a custom aspect ratio for the trapping potential strengths, instead of deriving   from S .- 1. This will only affect the single particle energy scale and not the   interactions. The values are always scaled relative to the first dimension, which sets   the energy scale of the system, hbaromega_x.\ng: the (isotropic) bare interaction parameter. The value of g is assumed   to be in trap units.\ninteraction_only: if set to true then the noninteracting single-particle terms are   ignored. Useful if only energy shifts due to interactions are required.\nblock_by_level: if set to false will allow the interactions to couple all states without   comparing their noninteracting energy.\n\nwarning: Warning\nnum_offdiagonals is a bad estimate for this Hamiltonian. Take care when building a matrix or using QMC methods. Use get_all_blocks first then pass option col_hint = block_size to BasisSetRep to safely build the matrix.\n\n\n\n\n\n","category":"type"},{"location":"hamiltonians.html#Rimu.Hamiltonians.HOCartesianEnergyConservedPerDim","page":"Hamiltonians","title":"Rimu.Hamiltonians.HOCartesianEnergyConservedPerDim","text":"HOCartesianEnergyConservedPerDim(addr; S, η, g = 1.0, interaction_only = false)\n\nImplements a bosonic harmonic oscillator in Cartesian basis with contact interactions\n\nhatH = sum_i ϵ_i n_i + fracg2sum_ijkl V_ijkl a^_i a^_j a_k a_l\n\nwith the additional restriction that the interactions only couple states with the same energy in each dimension separately. See HOCartesianContactInteractions for a model that conserves total energy.\n\nFor a D-dimensional harmonic oscillator indices mathbfi mathbfj ldots are D-tuples. The energy scale is defined by the first dimension i.e. hbar omega_x so that single particle energies are\n\n    fracepsilon_mathbfihbar omega_x = (i_x + 12) + eta_y (i_y+12) + ldots\n\nThe factors eta_y ldots allow for anisotropic trapping geometries and are assumed to be greater than 1 so that omega_x is the smallest trapping frequency.\n\nMatrix elements V_mathbfijkl are for a contact interaction calculated in this basis using first-order degenerate perturbation theory.\n\n    V_mathbfijkl = prod_d in x yldots mathcalI(i_dj_dk_dl_d)\n        delta_i_d + j_d^k_d + l_d\n\nwhere the delta-function indicates that the noninteracting energy is conserved along each dimension. The integral mathcalI(abcd) is of four one dimensional harmonic oscillator basis functions, see four_oscillator_integral_general, with the additional restriction that energy is conserved in each dimension.\n\nArguments\n\naddr: the starting address, defines number of particles and total number of modes.\nS: Tuple of the number of levels in each dimension, including the groundstate. Defaults   to a 1D spectrum with number of levels matching modes of addr. Will be sorted to   make the first dimension the largest.\nη: Define a custom aspect ratio for the trapping potential strengths, instead of deriving   from S .- 1. The values are always scaled relative to the first dimension, which sets   the energy scale of the system, hbaromega_x.\ng: the (isotropic) interparticle interaction parameter. The value of g is assumed   to be in trap units.\ninteraction_only: if set to true then the noninteracting single-particle terms are   ignored. Useful if only energy shifts due to interactions are required.\n\n\n\n\n\n","category":"type"},{"location":"hamiltonians.html#Rimu.Hamiltonians.HOCartesianCentralImpurity","page":"Hamiltonians","title":"Rimu.Hamiltonians.HOCartesianCentralImpurity","text":"HOCartesianCentralImpurity(addr; kwargs...)\n\nHamiltonian of non-interacting particles in an arbitrary harmonic trap with a delta-function potential at the centre, with strength g,\n\nhatH_mathrmrel = sum_mathbfi ϵ_mathbfi n_mathbfi\n    + gsum_mathbfij V_mathbfij a^_mathbfi a_mathbfj\n\nFor a D-dimensional harmonic oscillator indices mathbfi mathbfj ldots are D-tuples. The energy scale is defined by the first dimension i.e. hbar omega_x so that single particle energies are\n\n    fracepsilon_mathbfihbar omega_x = (i_x + 12) + eta_y (i_y+12) + ldots\n\nThe factors eta_y ldots allow for anisotropic trapping geometries and are assumed to be greater than 1 so that omega_x is the smallest trapping frequency.\n\nMatrix elements V_mathbfij are for a delta function potential calculated in this basis\n\n    V_mathbfij = prod_d in x yldots psi_i_d(0) psi_j_d(0)\n\nOnly even parity states feel this impurity, so all i_d are even. Note that the matrix representation of this Hamiltonian for a single particle is completely dense in the even-parity subspace.\n\nArguments\n\naddr: the starting address, defines number of particles and total number of modes.\nmax_nx = num_modes(addr) - 1: the maximum harmonic oscillator index number in the x-dimension.   Must be even. Index number for the harmonic oscillator groundstate is 0.\nηs = (): a tuple of aspect ratios for the remaining dimensions (η_y, ...). Should be empty   for a 1D trap or contain values greater than 1.0. The maximum index   in other dimensions will be the largest even number less than M/η_y.\nS = nothing: Instead of max_nx, manually set the number of levels in each dimension,   including the groundstate. Must be a Tuple of Ints.\ng = 1.0: the strength of the delta impurity in (x-dimension) trap units.\nimpurity_only=false: if set to true then the trap energy terms are ignored. Useful if   only energy shifts due to the impurity are required.\n\nwarning: Warning\nDue to use of `SpecialFunctions` with large arguments the matrix representation of\nthis Hamiltonian may not be strictly symmetric, but is approximately symmetric within\nmachine precision.\n\nSee also HOCartesianContactInteractions andHOCartesianEnergyConservedPerDim.\n\n\n\n\n\n","category":"type"},{"location":"hamiltonians.html#Other","page":"Hamiltonians","title":"Other","text":"","category":"section"},{"location":"hamiltonians.html","page":"Hamiltonians","title":"Hamiltonians","text":"MatrixHamiltonian\nTranscorrelated1D\nFroehlichPolaron","category":"page"},{"location":"hamiltonians.html#Rimu.Hamiltonians.MatrixHamiltonian","page":"Hamiltonians","title":"Rimu.Hamiltonians.MatrixHamiltonian","text":"MatrixHamiltonian(\n    mat::AbstractMatrix{T};\n    starting_address::Int = starting_address(mat)\n) <: AbstractHamiltonian{T}\n\nWrap an abstract matrix mat as an AbstractHamiltonian object. Works with stochastic methods of ProjectorMonteCarloProblem() and DVec. Optionally, a valid index can be provided as the starting_address.\n\nSpecialised methods are implemented for sparse matrices of type AbstractSparseMatrixCSC. One based indexing is required for the matrix mat.\n\n\n\n\n\n","category":"type"},{"location":"hamiltonians.html#Rimu.Hamiltonians.Transcorrelated1D","page":"Hamiltonians","title":"Rimu.Hamiltonians.Transcorrelated1D","text":"Transcorrelated1D(address; t=1.0, v=1.0, v_ho=0.0, cutoff=1, three_body_term=true)\n\nImplements a transcorrelated Hamiltonian for contact interactions in one dimensional momentum space from Jeszenski et al. (2018). Currently limited to two component fermionic addresses.\n\nbeginaligned\n\ntildeH = t sum_kσk^2 n_kσ \n    quad + sum_pqkσσ T_pqk a^_p-kσ a^_q+kσ a_qσ a_pσ \n    quad + sum_pqskkσσ Q_kka^_p-kσ a^_q+kσ a^_s+k-kσ\n                                       a_sσ a_qσ a_pσ \n    quad + V_mathrmho\nendaligned\n\nwhere\n\nbeginaligned\ntildeu(k) = begincases -frac2k^2 mathrmif  k  k_c\n0  mathrmotherwise\nendcases\n\n\nT_pqk = fracvM + frac2vMleftk^2tildeu(k)\n          - (p - q)ktildeu(k)right + frac2v^2tW(k)\nW(k) = frac1M^2sum_q (k - q)q tildeu(q)tildeu(k - q) \nQ_kl = -fracv^2t M^2k tildeu(k)ltildeu(l)\nendaligned\n\nArguments\n\naddress: The starting address, defines number of particles and sites.\nv: The interaction parameter.\nt: The kinetic energy prefactor.\nv_ho: Strength of the external harmonic oscillator potential V_mathrmho. See HubbardMom1DEP.\ncutoff controls k_c in equations above. Note: skipping generating off-diagonal elements below the cutoff is not implemented - zero-valued elements are returned instead.\nthree_body_term: If set to false, generating three body excitations is skipped. Note: when disabling three body terms, cutoff should be set to a higher value for best results.\n\nSee also\n\nHubbardMom1D\nHubbardMom1DEP\n\n\n\n\n\n","category":"type"},{"location":"hamiltonians.html#Rimu.Hamiltonians.FroehlichPolaron","page":"Hamiltonians","title":"Rimu.Hamiltonians.FroehlichPolaron","text":"FroehlichPolaron(address::OccupationNumberFS{M}; kwargs...) <: AbstractHamiltonian\n\nThe Froehlich polaron Hamiltonian for a 1D lattice with M momentum modes is given by\n\nH = (p_f - p)^2m + ωN - v Σₖ(aₖ^ + aₖ)\n\nwhere p is the total momentum, p_f = Σ_k k aₖ^ aₖ is the momentum operator for the bosons, and k part of the momentum lattice with separation 2πl. N is the number operator for the bosons.\n\nKeyword Arguments\n\np=0.0: the total momentum p.\nv=1.0: the coupling strength v.\nmass=1.0: the particle mass m.\nomega=1.0: the oscillation frequency of the phonons ω.\nl=1.0: the box size in real space l. Provides scale parameter of the momentum   lattice.\nmomentum_cutoff=nothing: the maximum boson momentum allowed for an address.\nmode_cutoff: the maximum number of bosons in each momentum mode. Defaults to the maximum   value supported by the address type OccupationNumberFS.\n\nExamples\n\njulia> fs = OccupationNumberFS(0,0,0)\nOccupationNumberFS{3, UInt8}(0, 0, 0)\n\njulia> ham = FroehlichPolaron(fs; v=0.5)\nFroehlichPolaron(fs\"|0 0 0⟩{8}\"; v=0.5, mass=1.0, omega=1.0, l=1.0, p=0.0, mode_cutoff=255)\n\njulia> dimension(ham)\n16777216\n\njulia> dimension(FroehlichPolaron(fs; v=0.5, mode_cutoff=5))\n216\n\nSee also OccupationNumberFS, dimension, AbstractHamiltonian.\n\n\n\n\n\n","category":"type"},{"location":"hamiltonians.html#Convenience-functions","page":"Hamiltonians","title":"Convenience functions","text":"","category":"section"},{"location":"hamiltonians.html","page":"Hamiltonians","title":"Hamiltonians","text":"rayleigh_quotient\nmomentum\nhubbard_dispersion\ncontinuum_dispersion\nshift_lattice\nshift_lattice_inv","category":"page"},{"location":"hamiltonians.html#Rimu.Hamiltonians.rayleigh_quotient","page":"Hamiltonians","title":"Rimu.Hamiltonians.rayleigh_quotient","text":"rayleigh_quotient(H, v)\n\nReturn the Rayleigh quotient of the linear operator H and the vector v:\n\nfrac v  H  v  vv \n\n\n\n\n\n","category":"function"},{"location":"hamiltonians.html#Rimu.Hamiltonians.momentum","page":"Hamiltonians","title":"Rimu.Hamiltonians.momentum","text":"momentum(ham::AbstractHamiltonian)\n\nMomentum as a linear operator in Fock space. Pass a Hamiltonian ham in order to convey information about the Fock basis. Returns an AbstractHamiltonian that represents the momentum operator.\n\nNote: momentum is currently only defined on HubbardMom1D.\n\nExample\n\njulia> add = BoseFS((1, 0, 2, 1, 2, 1, 1, 3));\n\n\njulia> ham = HubbardMom1D(add; u = 2.0, t = 1.0);\n\n\njulia> mom = momentum(ham);\n\n\njulia> diagonal_element(mom, add) # calculate the momentum of a single configuration\n-1.5707963267948966\n\njulia> v = DVec(add => 10; capacity=1000);\n\n\njulia> rayleigh_quotient(mom, v) # momentum expectation value for state vector `v`\n-1.5707963267948966\n\nPart of the AbstractHamiltonian interface.\n\n\n\n\n\n","category":"function"},{"location":"hamiltonians.html#Rimu.Hamiltonians.hubbard_dispersion","page":"Hamiltonians","title":"Rimu.Hamiltonians.hubbard_dispersion","text":"hubbard_dispersion(t, k)\n\nDispersion relation for HubbardMom1D. Returns -2(Re(t) cos(k) + Im(t) sin(k)).\n\nSee also continuum_dispersion.\n\n\n\n\n\n","category":"function"},{"location":"hamiltonians.html#Rimu.Hamiltonians.continuum_dispersion","page":"Hamiltonians","title":"Rimu.Hamiltonians.continuum_dispersion","text":"continuum_dispersion(t, k)\n\nDispersion relation for HubbardMom1D. Returns Re(t) k^2 - 2 Im(t) k.\n\nSee also hubbard_dispersion.\n\n\n\n\n\n","category":"function"},{"location":"hamiltonians.html#Rimu.Hamiltonians.shift_lattice","page":"Hamiltonians","title":"Rimu.Hamiltonians.shift_lattice","text":"shift_lattice(is)\n\nCircular shift contiguous indices is in interval [M÷2, M÷2) such that set starts with 0, where M=length(is).\n\nInverse operation: shift_lattice_inv. Used in HubbardReal1DEP and HubbardMom1DEP\n\n\n\n\n\n","category":"function"},{"location":"hamiltonians.html#Rimu.Hamiltonians.shift_lattice_inv","page":"Hamiltonians","title":"Rimu.Hamiltonians.shift_lattice_inv","text":"shift_lattice_inv(js)\n\nCircular shift indices starting with 0 into a contiguous set in interval [M÷2, M÷2), where M=length(js).\n\nInverse operation of shift_lattice. Used in HubbardReal1DEP and HubbardMom1DEP\n\n\n\n\n\n","category":"function"},{"location":"hamiltonians.html#Hamiltonian-wrappers","page":"Hamiltonians","title":"Hamiltonian wrappers","text":"","category":"section"},{"location":"hamiltonians.html","page":"Hamiltonians","title":"Hamiltonians","text":"The following Hamiltonians are constructed from an existing Hamiltonian instance and change its behaviour:","category":"page"},{"location":"hamiltonians.html","page":"Hamiltonians","title":"Hamiltonians","text":"GutzwillerSampling\nGuidingVectorSampling\nParitySymmetry\nTimeReversalSymmetry\nStoquastic","category":"page"},{"location":"hamiltonians.html#Rimu.Hamiltonians.GutzwillerSampling","page":"Hamiltonians","title":"Rimu.Hamiltonians.GutzwillerSampling","text":"GutzwillerSampling(::AbstractHamiltonian; g)\n\nWrapper over any AbstractHamiltonian that implements Gutzwiller sampling. In this importance sampling scheme the Hamiltonian is modified as follows\n\ntildeH_ij = H_ij e^-g(H_ii - H_jj) \n\nThis way off-diagonal spawns to higher-energy configurations are discouraged and spawns to lower-energy configurations encouraged for positive g.\n\nConstructor\n\nGutzwillerSampling(::AbstractHamiltonian, g)\nGutzwillerSampling(::AbstractHamiltonian; g)\n\nAfter construction, we can access the underlying Hamiltonian with G.hamiltonian and the g parameter with G.g.\n\nExample\n\njulia> H = HubbardMom1D(BoseFS(1,1,1); u=6.0, t=1.0)\nHubbardMom1D(fs\"|1 1 1⟩\"; u=6.0, t=1.0)\n\njulia> G = GutzwillerSampling(H, g=0.3)\nGutzwillerSampling(HubbardMom1D(fs\"|1 1 1⟩\"; u=6.0, t=1.0); g=0.3)\n\njulia> get_offdiagonal(H, BoseFS(2, 1, 0), 1)\n(BoseFS{3,3}(1, 0, 2), 2.0)\n\njulia> get_offdiagonal(G, BoseFS(2, 1, 0), 1)\n(BoseFS{3,3}(1, 0, 2), 0.8131393194811987)\n\nObservables\n\nTo calculate observables, pass the transformed Hamiltonian G to AllOverlaps with keyword argument transform=G.\n\n\n\n\n\n","category":"type"},{"location":"hamiltonians.html#Rimu.Hamiltonians.GuidingVectorSampling","page":"Hamiltonians","title":"Rimu.Hamiltonians.GuidingVectorSampling","text":"GuidingVectorSampling\n\nWrapper over any AbstractHamiltonian that implements guided vector a.k.a. guided wave function sampling. In this importance sampling scheme the Hamiltonian is modified as follows.\n\ntildeH_ij = v_i H_ij v_j^-1\n\nand where v is the guiding vector. v_i and v_j are also thresholded to avoid dividing by zero (see below).\n\nConstructors\n\nGuidingVectorSampling(::AbstractHamiltonian, vector, eps)\nGuidingVectorSampling(::AbstractHamiltonian; vector, eps)\n\neps is a thresholding parameter used to avoid dividing by zero; all values below eps are set to eps. It is recommended that eps is in the same value range as the guiding vector. The default value is set to eps=norm(v, Inf) * 1e-2\n\nAfter construction, we can access the underlying hamiltonian with G.hamiltonian, the eps parameter with G.eps, and the guiding vector with G.vector.\n\nExample\n\njulia> H = HubbardReal1D(BoseFS(1,1,1); u=6.0, t=1.0);\n\njulia> v = DVec(starting_address(H) => 10; capacity=1);\n\njulia> G = GuidingVectorSampling(H, v, 0.1);\n\njulia> get_offdiagonal(H, starting_address(H), 4)\n(BoseFS{3,3}(2, 0, 1), -1.4142135623730951)\n\njulia> get_offdiagonal(G, starting_address(G), 4)\n(BoseFS{3,3}(2, 0, 1), -0.014142135623730952)\n\nObservables\n\nTo calculate observables, pass the transformed Hamiltonian G to AllOverlaps with keyword argument transform=G.\n\n\n\n\n\n","category":"type"},{"location":"hamiltonians.html#Rimu.Hamiltonians.ParitySymmetry","page":"Hamiltonians","title":"Rimu.Hamiltonians.ParitySymmetry","text":"ParitySymmetry(ham::AbstractHamiltonian{T}; even=true) <: AbstractHamiltonian{T}\n\nImpose even or odd parity on all states and the Hamiltonian ham as controlled by the keyword argument even. Parity symmetry of the Hamiltonian is assumed. For some Hamiltonians, ParitySymmetry reduces the size of the Hilbert space by half.\n\nParitySymmetry performs a unitary transformation, leaving the eigenvalues unchanged and preserving the LOStructure. This is achieved by changing the basis set to states with defined parity. Effectively, a non-even address α is replaced by frac12(α  α) for even and odd parity, respectively, where ᾱ == reverse(α).\n\nNotes\n\nThis modifier currently only works on starting_addresss with an odd number of modes.\nFor odd parity, the starting_address of the underlying Hamiltonian cannot be symmetric.\nIf parity is not a symmetry of the Hamiltonian ham then the result is undefined.\nParitySymmetry works by modifying the offdiagonals iterator.\n\njulia> ham = HubbardReal1D(BoseFS(0,2,1))\nHubbardReal1D(fs\"|0 2 1⟩\"; u=1.0, t=1.0)\n\njulia> size(Matrix(ham))\n(10, 10)\n\njulia> size(Matrix(ParitySymmetry(ham)))\n(6, 6)\n\njulia> size(Matrix(ParitySymmetry(ham; odd=true)))\n(4, 4)\n\njulia> eigvals(Matrix(ham))[1] ≈ eigvals(Matrix(ParitySymmetry(ham)))[1]\ntrue\n\nSee also TimeReversalSymmetry.\n\n\n\n\n\n","category":"type"},{"location":"hamiltonians.html#Rimu.Hamiltonians.TimeReversalSymmetry","page":"Hamiltonians","title":"Rimu.Hamiltonians.TimeReversalSymmetry","text":"TimeReversalSymmetry(ham::AbstractHamiltonian{T}; even=true) <: AbstractHamiltonian{T}\n\nImpose even or odd time reversal on all states and the Hamiltonian ham as controlled by the keyword argument even. If time reversal is a symmetry of the Hamiltonian it will block (reducing Hilbert space dimension) preserving the eigenvalues and LOStructure.\n\nNotes\n\nThis modifier only works two component starting_addresses.\nFor odd time reversal symmetry, the starting_address of the underlying Hamiltonian must not be symmetric.\nIf time reversal is not a symmetry of the Hamiltonian ham then the result is undefined.\nTimeReversalSymmetry works by modifying the offdiagonals iterator.\n\njulia> ham = HubbardMom1D(FermiFS2C((1,0,1),(0,1,1)));\n\njulia> size(Matrix(ham))\n(3, 3)\n\njulia> size(Matrix(TimeReversalSymmetry(ham)))\n(2, 2)\n\njulia> size(Matrix(TimeReversalSymmetry(ham, even=false)))\n(1, 1)\n\njulia> eigvals(Matrix(TimeReversalSymmetry(ham)))[1] ≈ eigvals(Matrix(ham))[1]\ntrue\n\nSee also ParitySymmetry.\n\n\n\n\n\n","category":"type"},{"location":"hamiltonians.html#Rimu.Hamiltonians.Stoquastic","page":"Hamiltonians","title":"Rimu.Hamiltonians.Stoquastic","text":"Stoquastic(ham <: AbstractHamiltonian) <: AbstractHamiltonian\n\nA wrapper for an AbstractHamiltonian that replaces all off-diagonal matrix elements v by -abs(v), thus making the new Hamiltonian stoquastic.\n\nA stoquastic Hamiltonian does not have a Monte Carlo sign problem. For a hermitian ham the smallest eigenvalue of Stoquastic(ham) is ≤ the smallest eigenvalue of ham.\n\n\n\n\n\n","category":"type"},{"location":"hamiltonians.html#Observables","page":"Hamiltonians","title":"Observables","text":"","category":"section"},{"location":"hamiltonians.html","page":"Hamiltonians","title":"Hamiltonians","text":"Rimu.jl offers two other supertypes for operators that are less  restrictive than AbstractHamiltonian.  AbstractObservable and AbstractOperators both can represent a physical observable. Their expectation values can be sampled during a ProjectorMonteCarloProblem simulation by  passing them into a suitable ReplicaStrategy, e.g.  AllOverlaps. Some observables are also AbstractHamiltonians. The full type hierarchy is","category":"page"},{"location":"hamiltonians.html","page":"Hamiltonians","title":"Hamiltonians","text":"AbstractHamiltonian{T} <: AbstractOperator{T} <: AbstractObservable{T}","category":"page"},{"location":"hamiltonians.html","page":"Hamiltonians","title":"Hamiltonians","text":"AbstractObservable\nAbstractOperator\nParticleNumberOperator\nG2RealCorrelator\nG2RealSpace\nG2MomCorrelator\nSuperfluidCorrelator\nStringCorrelator\nDensityMatrixDiagonal\nSingleParticleExcitation\nTwoParticleExcitation\nMomentum\nAxialAngularMomentumHO","category":"page"},{"location":"hamiltonians.html#Rimu.Interfaces.AbstractObservable","page":"Hamiltonians","title":"Rimu.Interfaces.AbstractObservable","text":"AbstractObservable{T}\n\nMost permissive supertype for operators in the type hierarchy:\n\nAbstractHamiltonian{T} <: AbstractOperator{T} <: AbstractObservable{T}\n\nAbstractObservable provides an interface for operators that can appear in a three-way dot product dot(x, op, y) with two vectors of type AbstractDVec. The result is a value of type T, which is also returned by the eltype function. This may be a vector type associated with a scalar type returned by the scalartype function.\n\nThe AbstractObservable type is useful for defining observables that can be calculated in the context of a ProjectorMonteCarloProblem using AllOverlaps.\n\nInterface\n\nBasic interface methods to implement:\n\nInterfaces.dot_from_right(x, op, y)\nallows_address_type(op, type)\n\nOptional additional methods to implement:\n\nVectorInterface.scalartype(op): defaults to eltype(eltype(op))\nLOStructure(::Type{typeof(op)}): defaults to AdjointUnknown\n\nSee also AbstractOperator, AbstractHamiltonian, Interfaces.\n\n\n\n\n\n","category":"type"},{"location":"hamiltonians.html#Rimu.Interfaces.AbstractOperator","page":"Hamiltonians","title":"Rimu.Interfaces.AbstractOperator","text":"AbstractOperator{T} <: AbstractObservable{T}\n\nSupertype that provides an interface for linear operators over a linear space with elements of type T (returned by eltype) and general (custom type) indices called 'addresses'.\n\nAbstractOperator instances operate on vectors of type AbstractDVec from the module DictVectors and work well with addresses of type AbstractFockAddress from the module BitStringAddresses.\n\nThe defining feature of an AbstractOperator is that it can be applied to a vector with mul!(y, op, x) and that three-way dot products can be calculated with dot(x, op, y).\n\nThe AbstractOperator type is useful for defining operators that are not necessarily Hamiltonians, but that can be used in the context of a ProjectorMonteCarloProblem as observable operators in a ReplicaStrategy, e.g. for defining correlation functions. In contrast to AbstractHamiltonians, AbstractOperators do not need to have a starting_address. Moreover, the eltype of an AbstractOperator can be a vector value whereas AbstractHamiltonians requre a scalar eltype.\n\nAbstractHamiltonian{T} <: AbstractOperator{T} <: AbstractObservable{T}\n\nThe AbstractOperator type is part of the AbstractObservable hierarchy. It is more restrictive than AbstractObservable in that it requires the interface for the generation of diagonal and off-diagonal elements.\n\nFor concrete implementations see Hamiltonians. In order to implement a Hamiltonian for use in ProjectorMonteCarloProblem or ExactDiagonalizationProblem use the type AbstractHamiltonian instead.\n\nInterface\n\nBasic interface methods to implement:\n\nallows_address_type(op, type)\ndiagonal_element(op, address)\nnum_offdiagonals(op, address) and\nget_offdiagonal(op, address, chosen) or offdiagonals\n\nOptional additional methods to implement:\n\nVectorInterface.scalartype(op): defaults to eltype(eltype(op))\nLOStructure(::Type{typeof(op)}): defaults to AdjointUnknown\ndimension(op, addr): defaults to dimension of address space\n\nIn order to calculate observables efficiently, it may make sense to implement custom methods for Interfaces.dot_from_right(x, op, y) and LinearAlgebra.mul!(y, op, x).\n\nSee also AbstractHamiltonian, Interfaces.\n\n\n\n\n\n","category":"type"},{"location":"hamiltonians.html#Rimu.Hamiltonians.ParticleNumberOperator","page":"Hamiltonians","title":"Rimu.Hamiltonians.ParticleNumberOperator","text":"ParticleNumberOperator() <: AbstractOperator{Float64}\n\nThe number operator in Fock space. This operator is diagonal in the Fock basis and returns the number of particles in the Fock state. It works with any address type that is a subtype of AbstractFockAddress.\n\njulia> p = ExactDiagonalizationProblem(FroehlichPolaron(fs\"|0 0⟩{}\"; mode_cutoff=5, v=3));\n\njulia> gs = solve(p).vectors[1]; # normalised ground state vector\n\njulia> dot(gs, ParticleNumberOperator(), gs) # particle number expectation value\n2.8823297252925917\n\nSee also AbstractHamiltonian.\n\n\n\n\n\n","category":"type"},{"location":"hamiltonians.html#Rimu.Hamiltonians.G2RealCorrelator","page":"Hamiltonians","title":"Rimu.Hamiltonians.G2RealCorrelator","text":"G2RealCorrelator(d::Int) <: AbstractOperator{Float64}\n\nTwo-body operator for density-density correlation between sites separated by d with 0 ≤ d < M.\n\n    hatG^(2)(d) = frac1M sum_i^M hatn_i (hatn_i+d - delta_0d)\n\nAssumes a one-dimensional lattice with periodic boundary conditions where\n\n    hatG^(2)(-M2 leq d  0) = hatG^(2)(d)\n\n    hatG^(2)(M2  d  M) = hatG^(2)(M - d)\n\nand normalisation\n\n    sum_d=0^M-1 langle hatG^(2)(d) rangle = fracN (N-1)M\n\nFor multicomponent basis, calculates correlations between all particles equally, equivalent to stacking all components into a single Fock state.\n\nArguments\n\nd::Integer: distance between sites.\n\nSee also\n\nHubbardReal1D\nG2RealSpace\nG2MomCorrelator\nAbstractOperator\nAllOverlaps\n\n\n\n\n\n","category":"type"},{"location":"hamiltonians.html#Rimu.Hamiltonians.G2RealSpace","page":"Hamiltonians","title":"Rimu.Hamiltonians.G2RealSpace","text":"G2RealSpace(geometry::CubicGrid, σ=1, τ=1; sum_components=false) <: AbstractOperator{SArray}\n\nTwo-body operator for density-density correlation for all Displacements d in the specified geometry.\n\n    hatG^(2)_στ(d) = frac1M _i n_σi (n_τi+d - δ_0dδ_στ)\n\nFor multicomponent addresses, σ and τ control the components involved. Alternatively, sum_components can be set to true, which treats all particles as belonging to the same component.\n\nExamples\n\njulia> geom = CubicGrid(2, 2);\n\njulia> g2 = G2RealSpace(geom)\nG2RealSpace(CubicGrid((2, 2), (true, true)), 1,1)\n\njulia> diagonal_element(g2, BoseFS(2,0,1,1))\n2×2 StaticArraysCore.SMatrix{2, 2, Float64, 4} with indices SOneTo(2)×SOneTo(2):\n 0.5  1.0\n 0.5  1.0\n\njulia> g2_cross = G2RealSpace(geom, 1, 2)\nG2RealSpace(CubicGrid((2, 2), (true, true)), 1,2)\n\njulia> g2_sum = G2RealSpace(geom, sum_components=true)\nG2RealSpace(CubicGrid((2, 2), (true, true)); sum_components=true)\n\njulia> diagonal_element(g2, fs\"|⇅⋅↓↑⟩\")\n2×2 StaticArraysCore.SMatrix{2, 2, Float64, 4} with indices SOneTo(2)×SOneTo(2):\n 0.0  0.0\n 0.0  0.5\n\njulia> diagonal_element(g2_cross, fs\"|⇅⋅↓↑⟩\")\n2×2 StaticArraysCore.SMatrix{2, 2, Float64, 4} with indices SOneTo(2)×SOneTo(2):\n 0.25  0.25\n 0.25  0.25\n\njulia> diagonal_element(g2_sum, fs\"|⇅⋅↓↑⟩\")\n2×2 StaticArraysCore.SMatrix{2, 2, Float64, 4} with indices SOneTo(2)×SOneTo(2):\n 0.5  1.0\n 0.5  1.0\n\nSee also\n\nCubicGrid\nHubbardRealSpace\nG2RealCorrelator\nG2MomCorrelator\nAbstractOperator\nAllOverlaps\n\n\n\n\n\n","category":"type"},{"location":"hamiltonians.html#Rimu.Hamiltonians.G2MomCorrelator","page":"Hamiltonians","title":"Rimu.Hamiltonians.G2MomCorrelator","text":"G2MomCorrelator(d::Int,c=:cross) <: AbstractOperator{ComplexF64}\n\nTwo-body correlation operator representing the density-density correlation at distance d of a two component system in a momentum-space Fock-state basis. It returns a Complex value.\n\nCorrelation across two components:\n\nhatG^(2)(d) = frac1Msum_spqr=1^M e^-id(p-q)2πM a^_s b^_p  b_q a_r δ_s+pq+r\n\nCorrelation within a single component:\n\nhatG^(2)(d) = frac1Msum_spqr=1^M e^-id(p-q)2πM a^_s a^_p  a_q a_r δ_s+pq+r\n\nThe diagonal element, where (p-q)=0, is\n\nfrac1Msum_kp=1^M a^_k b^_p  b_p a_k \n\nArguments\n\nd::Integer: the distance between two particles.\nc: possible instructions: :cross: default instruction, computing correlation between particles across two components; :first: computing correlation between particles within the first component; :second: computing correlation between particles within the second component. These are the only defined instructions, using anything else will produce errors.\n\nTo use on a one-component system\n\nFor a system with only one component, e.g. with BoseFS, the second argument c is irrelevant and can be any of the above instructions, one could simply skip this argument and let it be the default value.\n\nSee also\n\nBoseHubbardMom1D2C\nBoseFS2C\nG2RealCorrelator\nG2RealSpace\nAbstractOperator\nAllOverlaps\n\n\n\n\n\n","category":"type"},{"location":"hamiltonians.html#Rimu.Hamiltonians.SuperfluidCorrelator","page":"Hamiltonians","title":"Rimu.Hamiltonians.SuperfluidCorrelator","text":"SuperfluidCorrelator(d::Int) <: AbstractOperator{Float64}\n\nOperator for extracting superfluid correlation between sites separated by a distance d with 0 ≤ d < M:\n\n    hatC_textSF(d) = frac1M sum_i^M a_i^dagger a_i + d\n\nAssumes a one-dimensional lattice with M sites and periodic boundary conditions. M is also the number of modes in the Fock state address.\n\nUsage\n\nSuperfluid correlations can be extracted from a Monte Carlo calculation by wrapping SuperfluidCorrelator with AllOverlaps and passing into ProjectorMonteCarloProblem with the replica keyword argument. For an example with a similar use of G2RealCorrelator see G2 Correlator Example.\n\nSee also HubbardReal1D, G2RealCorrelator, AbstractOperator, and AllOverlaps.\n\n\n\n\n\n","category":"type"},{"location":"hamiltonians.html#Rimu.Hamiltonians.StringCorrelator","page":"Hamiltonians","title":"Rimu.Hamiltonians.StringCorrelator","text":"StringCorrelator(d::Int; address=nothing, type=nothing) <: AbstractOperator{T}\n\nOperator for extracting string correlation between lattice sites on a one-dimensional Hubbard lattice separated by a distance d with 0 ≤ d < M\n\n    C_textstring(d) = frac1M sum_j^M δ n_j\n                                         (e^i π sum_j  k  j + d δ n_k) δ n_j+d\n\nHere, δ n_j = n_j - n is the boson number deviation from the mean filling number and n = NM is the mean filling number of lattice sites with N particles and M lattice sites (or modes).\n\nAssumes a one-dimensional lattice with periodic boundary conditions. For usage see SuperfluidCorrelator and AllOverlaps.\n\nThe default element type T is ComplexF64. This can be overridden with the type keyword argument. If an address is provided, then T is calculated from the address type. It is set to ComplexF64 for non-integer filling numbers, and to Float64 for integer filling numbers or if d==0.\n\nSee also HubbardReal1D, G2RealCorrelator, SuperfluidCorrelator, AbstractOperator, and AllOverlaps.\n\n\n\n\n\n","category":"type"},{"location":"hamiltonians.html#Rimu.Hamiltonians.DensityMatrixDiagonal","page":"Hamiltonians","title":"Rimu.Hamiltonians.DensityMatrixDiagonal","text":"DensityMatrixDiagonal(mode; component=0) <: AbstractHamiltonian\n\nRepresent a diagonal element of the single-particle density:\n\nhatn_iσ = hat a^_iσ hat a_iσ\n\nwhere i is the mode and σ is the component. If component is zero, the sum over all components is computed.\n\nSee also\n\nsingle_particle_density\nSingleParticleDensity\nSingleParticleExcitation\n\n\n\n\n\n","category":"type"},{"location":"hamiltonians.html#Rimu.Hamiltonians.SingleParticleExcitation","page":"Hamiltonians","title":"Rimu.Hamiltonians.SingleParticleExcitation","text":"SingleParticleExcitation(i, j) <: AbstractHamiltonian\n\nRepresent the ij element of the single-particle reduced density matrix:\n\nρ^(1)_ij = a^_i a_j\n\nwhere i <: Int and j <: Int specify the mode numbers.\n\nSee also\n\nsingle_particle_density\nSingleParticleDensity\nTwoParticleExcitation\n\n\n\n\n\n","category":"type"},{"location":"hamiltonians.html#Rimu.Hamiltonians.TwoParticleExcitation","page":"Hamiltonians","title":"Rimu.Hamiltonians.TwoParticleExcitation","text":"TwoParticleExcitation(i, j, k, l) <: AbstractHamiltonian\n\nRepresent the ij kl element of the two-particle reduced density matrix:\n\nρ^(2)_ij kl =  a^_i a^_j a_l a_k\n\nwhere i, j, k, and l (all <: Int) specify the mode numbers.\n\nSee also\n\nsingle_particle_density\nSingleParticleDensity\nSingleParticleExcitation\n\n\n\n\n\n","category":"type"},{"location":"hamiltonians.html#Rimu.Hamiltonians.Momentum","page":"Hamiltonians","title":"Rimu.Hamiltonians.Momentum","text":"Momentum(component=0; fold=true) <: AbstractHamiltonian\n\nThe momentum operator P.\n\nThe component argument controls which component of the address is taken into consideration. A value of 0 sums the contributions of all components. If fold is true, the momentum is folded into the Brillouin zone.\n\njulia> address = BoseFS((1, 0, 2, 1, 2, 1, 1, 3))\nBoseFS{11,8}(1, 0, 2, 1, 2, 1, 1, 3)\n\njulia> v = DVec(address => 10);\n\njulia> rayleigh_quotient(Momentum(), DVec(address => 1))\n-2.0\n\njulia> rayleigh_quotient(Momentum(fold=false), DVec(address => 1))\n14.0\n\n\n\n\n\n","category":"type"},{"location":"hamiltonians.html#Rimu.Hamiltonians.AxialAngularMomentumHO","page":"Hamiltonians","title":"Rimu.Hamiltonians.AxialAngularMomentumHO","text":"AxialAngularMomentumHO(S; z_dim = 3, addr = BoseFS(prod(S))) <: AbstractHamiltonian\n\nAngular momentum operator for application to Cartesian harmonic oscillator basis, see HOCartesianContactInteractions or HOCartesianEnergyConservedPerDim. Represents the projection of angular momentum onto z-axis:\n\nhatL_z = i hbar sum_j=1^N left( b_x b_y^dag - b_y b_x^dag right)\n\nwhere b_x^dag and b_x are raising and lowering (ladder) operators for  a harmonic oscillator in the x dimension, and simlarly for y.\n\nThis is implemented for an N particle Fock space with creation and annihilation operators as\n\nfrac1hbar hatL_z = i sum_n_x=1^M_x sum_n_y=1^M_y\n    left( a_n_x-1n_y+1^dag - a_n_x+1n_y-1^dag right) a_n_x n_y\n\nin units of hbar.\n\nArgument S is a tuple defining the range of Cartesian modes in each dimension and their mapping to Fock space modes in a SingleComponentFockAddress. If S indicates a 3D system the z dimension can be changed by setting z_dim; S should be be isotropic in the remaining x-y plane, i.e. must have S[x_dim] == S[y_dim]. The starting address addr only needs to satisfy num_modes(addr) == prod(S).\n\nExample\n\nCalculate the overlap of two Fock addresses interpreted as harmonic oscillator states in a 2D Cartesian basis\n\njulia> S = (2,2)\n(2, 2)\n\njulia> Lz = AxialAngularMomentumHO(S)\nAxialAngularMomentumHO((2, 2); z_dim = 3, addr = BoseFS{0,4}(0, 0, 0, 0))\n\njulia> v = DVec(BoseFS(prod(S), 2 => 1) => 1.0)\nDVec{BoseFS{1, 4, BitString{4, 1, UInt8}},Float64} with 1 entry, style = IsDeterministic{Float64}()\n  fs\"|0 1 0 0⟩\" => 1.0\n\njulia> w = DVec(BoseFS(prod(S), 3 => 1) => 1.0)\nDVec{BoseFS{1, 4, BitString{4, 1, UInt8}},Float64} with 1 entry, style = IsDeterministic{Float64}()\n  fs\"|0 0 1 0⟩\" => 1.0\n\njulia> dot(w, Lz, v)\n0.0 + 1.0im\n\n\n\n\n\n","category":"type"},{"location":"hamiltonians.html#Hamiltonians-interface","page":"Hamiltonians","title":"Hamiltonians interface","text":"","category":"section"},{"location":"hamiltonians.html","page":"Hamiltonians","title":"Hamiltonians","text":"Behind the implementation of a particular model is a more abstract interface for defining Hamiltonians. If you want to define a new model you should make use of this interface. The most general form of a model Hamiltonian should subtype to AbstractHamiltonian and implement the relevant methods.","category":"page"},{"location":"hamiltonians.html","page":"Hamiltonians","title":"Hamiltonians","text":"AbstractHamiltonian\noffdiagonals\ndiagonal_element\nstarting_address","category":"page"},{"location":"hamiltonians.html#Rimu.Interfaces.AbstractHamiltonian","page":"Hamiltonians","title":"Rimu.Interfaces.AbstractHamiltonian","text":"AbstractHamiltonian{T} <: AbstractOperator{T}\n\nSupertype that provides an interface for linear operators over a linear space with scalar type T that are suitable for FCIQMC (with ProjectorMonteCarloProblem). Indexing is done with addresses (typically not integers) from an address space that may be large (and will not need to be completely generated).\n\nAbstractHamiltonian instances operate on vectors of type AbstractDVec from the module DictVectors and work well with addresses of type AbstractFockAddress from the module BitStringAddresses. The type works well with the external package KrylovKit.jl.\n\nFor available implementations see Hamiltonians.\n\nInterface\n\nBasic interface methods to implement:\n\nstarting_address(::AbstractHamiltonian)\ndiagonal_element(::AbstractHamiltonian, address)\nnum_offdiagonals(::AbstractHamiltonian, address)\nget_offdiagonal(::AbstractHamiltonian, address, chosen::Integer) (optional, see   below)\n\nOptional additional methods to implement:\n\nLOStructure(::Type{typeof(lo)}): defaults to AdjointUnknown\ndimension(::AbstractHamiltonian, addr): defaults to dimension of address space\nallows_address_type(h::AbstractHamiltonian, type): defaults to type :< typeof(starting_address(h))\nmomentum(::AbstractHamiltonian): no default\n\nProvides the following functions and methods:\n\noffdiagonals: iterator over reachable off-diagonal matrix elements\nrandom_offdiagonal: function to generate random off-diagonal matrix element\n*(H, v): deterministic matrix-vector multiply (allocating)\nH(v): equivalent to H * v.\nmul!(w, H, v): mutating matrix-vector multiply.\ndot(x, H, v): compute x⋅(H*v) minimizing allocations.\nH[address1, address2]: indexing with getindex() - mostly for testing purposes (slow!)\nBasisSetRepresentation: construct a basis set repesentation\nsparse, Matrix: construct a (sparse) matrix representation\n\nAlternatively to the above, offdiagonals can be implemented instead of get_offdiagonal. Sometimes this can be done efficiently. In this case num_offdiagonals should provide an upper bound on the number of elements obtained when iterating offdiagonals.\n\nSee also Hamiltonians, Interfaces, AbstractOperator, AbstractObservable.\n\n\n\n\n\n","category":"type"},{"location":"hamiltonians.html#Rimu.Interfaces.offdiagonals","page":"Hamiltonians","title":"Rimu.Interfaces.offdiagonals","text":"offdiagonals(h::AbstractHamiltonian, address)\n\nReturn an iterator over nonzero off-diagonal matrix elements of h in the same column as address. Will iterate over pairs (newaddress, matrixelement).\n\nExample\n\njulia> address = BoseFS(3,2,1);\n\n\njulia> H = HubbardReal1D(address);\n\n\njulia> h = offdiagonals(H, address)\n6-element Rimu.Hamiltonians.Offdiagonals{BoseFS{6, 3, BitString{8, 1, UInt8}}, Float64, HubbardReal1D{Float64, BoseFS{6, 3, BitString{8, 1, UInt8}}, 1.0, 1.0}}:\n (fs\"|2 3 1⟩\", -3.0)\n (fs\"|2 2 2⟩\", -2.449489742783178)\n (fs\"|3 1 2⟩\", -2.0)\n (fs\"|4 1 1⟩\", -2.8284271247461903)\n (fs\"|4 2 0⟩\", -2.0)\n (fs\"|3 3 0⟩\", -1.7320508075688772)\n\nPart of the AbstractHamiltonian interface.\n\nExtemded help\n\noffdiagonals return and iterator of type <:AbstractOffdiagonals. It defaults to returning Offdiagonals(h, a)\n\nSee also Offdiagonals, AbstractOffdiagonals.\n\n\n\n\n\n","category":"function"},{"location":"hamiltonians.html#Rimu.Interfaces.diagonal_element","page":"Hamiltonians","title":"Rimu.Interfaces.diagonal_element","text":"diagonal_element(ham, address)\n\nCompute the diagonal matrix element of the linear operator ham at address address.\n\nExample\n\njulia> address = BoseFS((3, 2, 1));\n\n\njulia> H = HubbardMom1D(address);\n\n\njulia> diagonal_element(H, address)\n8.666666666666664\n\nPart of the AbstractHamiltonian interface.\n\n\n\n\n\n","category":"function"},{"location":"hamiltonians.html#Rimu.Interfaces.starting_address","page":"Hamiltonians","title":"Rimu.Interfaces.starting_address","text":"starting_address(h)\n\nReturn the starting address for Hamiltonian h. When called on an AbstractMatrix, starting_address returns the index of the lowest diagonal element.\n\nExample\n\njulia> address = BoseFS((3, 2, 1));\n\n\njulia> H = HubbardMom1D(address);\n\n\njulia> address == starting_address(H)\ntrue\n\nPart of the AbstractHamiltonian interface.\n\n\n\n\n\n","category":"function"},{"location":"hamiltonians.html","page":"Hamiltonians","title":"Hamiltonians","text":"The following functions may be implemented instead of offdiagonals.","category":"page"},{"location":"hamiltonians.html","page":"Hamiltonians","title":"Hamiltonians","text":"num_offdiagonals\nget_offdiagonal","category":"page"},{"location":"hamiltonians.html#Rimu.Interfaces.num_offdiagonals","page":"Hamiltonians","title":"Rimu.Interfaces.num_offdiagonals","text":"num_offdiagonals(ham, address)\n\nCompute the number of number of reachable configurations from address address.\n\nExample\n\njulia> address = BoseFS((3, 2, 1));\n\n\njulia> H = HubbardMom1D(address);\n\n\njulia> num_offdiagonals(H, address)\n10\n\nPart of the AbstractHamiltonian interface.\n\n\n\n\n\n","category":"function"},{"location":"hamiltonians.html#Rimu.Interfaces.get_offdiagonal","page":"Hamiltonians","title":"Rimu.Interfaces.get_offdiagonal","text":"newadd, me = get_offdiagonal(ham, address, chosen)\n\nCompute value me and new address newadd of a single (off-diagonal) matrix element in a Hamiltonian ham. The off-diagonal element is in the same column as address address and is indexed by integer index chosen.\n\nExample\n\njulia> addr = BoseFS(3, 2, 1);\n\njulia> H = HubbardMom1D(addr);\n\njulia> get_offdiagonal(H, addr, 3)\n(BoseFS{6,3}(2, 1, 3), 1.0)\n\nPart of the AbstractHamiltonian interface.\n\n\n\n\n\n","category":"function"},{"location":"hamiltonians.html","page":"Hamiltonians","title":"Hamiltonians","text":"The following functions come with default implementations, but may be customized.","category":"page"},{"location":"hamiltonians.html","page":"Hamiltonians","title":"Hamiltonians","text":"random_offdiagonal\nHamiltonians.LOStructure\ndimension\nhas_adjoint\nallows_address_type\nBase.eltype\nVectorInterface.scalartype\nmul!","category":"page"},{"location":"hamiltonians.html#Rimu.Interfaces.random_offdiagonal","page":"Hamiltonians","title":"Rimu.Interfaces.random_offdiagonal","text":"random_offdiagonal(offdiagonals::AbstractOffdiagonals)\nrandom_offdiagonal(ham::AbstractHamiltonian, address)\n-> newaddress, probability, matrixelement\n\nGenerate a single random excitation, i.e. choose from one of the accessible off-diagonal elements in the column corresponding to address in the Hamiltonian matrix represented by ham. Alternatively, pass as argument an iterator over the accessible matrix elements.\n\nPart of the AbstractHamiltonian interface.\n\n\n\n\n\n","category":"function"},{"location":"hamiltonians.html#Rimu.Interfaces.LOStructure","page":"Hamiltonians","title":"Rimu.Interfaces.LOStructure","text":"LOStructure(op::AbstractHamiltonian)\nLOStructure(typeof(op))\n\nReturn information about the structure of the linear operator op. LOStructure is used as a trait to speficy symmetries or other properties of the linear operator op that may simplify or speed up calculations. Implemented instances are:\n\nIsDiagonal(): The operator is diagonal.\nIsHermitian(): The operator is complex and Hermitian or real and symmetric.\nAdjointKnown(): The operator is not Hermitian, but its   adjoint is implemented.\nAdjointUnknown(): adjoint for this operator is not   implemented.\n\nPart of the AbstractHamiltonian interface.\n\nIn order to define this trait for a new linear operator type, define a method for LOStructure(::Type{<:MyNewLOType}) = ….\n\n\n\n\n\n","category":"type"},{"location":"hamiltonians.html#Rimu.Hamiltonians.dimension","page":"Hamiltonians","title":"Rimu.Hamiltonians.dimension","text":"dimension(h::AbstractHamiltonian, addr=starting_address(h))\ndimension(h::AbstractOperator, addr)\ndimension(addr::AbstractFockAddress)\ndimension(::Type{<:AbstractFockAddress})\n\nReturn the estimated dimension of Hilbert space. May return a BigInt number.\n\nWhen called on an address or address type, the dimension of the linear space spanned by the address type is returned. When called on an AbstractHamiltonian, an upper bound on the dimension of the matrix representing the Hamiltonian is returned.\n\nExamples\n\njulia> dimension(OccupationNumberFS(1,2,3))\n16777216\n\njulia> dimension(HubbardReal1D(OccupationNumberFS(1,2,3)))\n28\n\njulia> dimension(BoseFS{200,100})\n1386083821086188248261127842108801860093488668581216236221011219101585442774669540\n\njulia> Float64(ans)\n1.3860838210861882e81\n\nPart of the AbstractHamiltonian interface. See also BasisSetRepresentation.\n\nExtended Help\n\nThe default fallback for dimension called on an AbstractHamiltonian is to return the dimension of the address space, which provides an upper bound. For new Hamiltonians a tighter bound can be provided by defining a custom method.\n\nWhen extending AbstractHamiltonian, define a method for the two-argument form dimension(h::MyNewHamiltonian, addr). For number-conserving Hamiltonians, the function Hamiltonians.number_conserving_dimension may be useful.\n\nWhen extending AbstractFockAddress, define a method for dimension(::Type{MyNewFockAddress}).\n\n\n\n\n\n","category":"function"},{"location":"hamiltonians.html#Rimu.Interfaces.has_adjoint","page":"Hamiltonians","title":"Rimu.Interfaces.has_adjoint","text":"has_adjoint(op)\n\nReturn true if adjoint is defined on op.\n\nPart of the AbstractHamiltonian interface.\n\nSee also LOStructure.\n\n\n\n\n\n","category":"function"},{"location":"hamiltonians.html#Rimu.Interfaces.allows_address_type","page":"Hamiltonians","title":"Rimu.Interfaces.allows_address_type","text":"allows_address_type(operator, addr_or_type)\n\nReturns true if addr_or_type is a valid address for operator. Otherwise, returns false.\n\nPart of the AbstractHamiltonian interface.\n\nExtended help\n\nDefaults to addr_or_type <: typeof(starting_address(operator)). Overload this function if the operator can be used with addresses of different types.\n\n\n\n\n\n","category":"function"},{"location":"hamiltonians.html#Base.eltype","page":"Hamiltonians","title":"Base.eltype","text":"eltype(op::AbstractObservable)\n\nReturn the type of the elements of the operator. This can be a vector value. For the underlying scalar type use scalartype.\n\nPart of the AbstractObservable interface.\n\nnote: Note\nNew types do not have to implement this method explicitly. An implementation is provided based on the AbstractObservable's type parameter.\n\n\n\n\n\n","category":"function"},{"location":"hamiltonians.html#VectorInterface.scalartype","page":"Hamiltonians","title":"VectorInterface.scalartype","text":"scalartype(op::AbstractObservable)\n\nReturn the type of the underlying scalar field of the operator. This may be different from the element type of the operator returned by eltype, which can be a vector value.\n\nPart of the AbstractObservable interface.\n\nnote: Note\nNew types do not have to implement this method explicitly. An implementation is provided based on the AbstractObservable's type parameter.\n\n\n\n\n\n","category":"function"},{"location":"hamiltonians.html#LinearAlgebra.mul!","page":"Hamiltonians","title":"LinearAlgebra.mul!","text":"LinearAlgebra.mul!(w::AbstractDVec, op::AbstractOperator, v::AbstractDVec)\n\nIn place multiplication of op with v and storing the result in w. The result is returned. Note that w needs to have a valtype that can hold a product of instances of eltype(op) and valtype(v). Moreover, the StochasticStyle of w needs to be <:IsDeterministic.\n\nPart of the AbstractOperator interface.\n\nThe default implementation relies of diagonal_element and offdiagonals to access the elements of the operator. The function can be overloaded for custom operators.\n\n\n\n\n\n","category":"function"},{"location":"hamiltonians.html","page":"Hamiltonians","title":"Hamiltonians","text":"This interface relies on unexported functionality, including","category":"page"},{"location":"hamiltonians.html","page":"Hamiltonians","title":"Hamiltonians","text":"Hamiltonians.adjoint\nHamiltonians.dot\nHamiltonians.AbstractOffdiagonals\nHamiltonians.Offdiagonals\nHamiltonians.check_address_type\nHamiltonians.number_conserving_dimension\nHamiltonians.number_conserving_bose_dimension\nHamiltonians.number_conserving_fermi_dimension","category":"page"},{"location":"hamiltonians.html#Base.adjoint","page":"Hamiltonians","title":"Base.adjoint","text":"adjoint(::LOStructure, op::AbstractOperator)\n\nRepresent the adjoint of an AbstractOperator. Extend this method to define custom adjoints.\n\n\n\n\n\n","category":"function"},{"location":"hamiltonians.html#LinearAlgebra.dot","page":"Hamiltonians","title":"LinearAlgebra.dot","text":"dot(w, op::AbstractObservable, v)\n\nEvaluate w⋅op(v) minimizing memory allocations.\n\n\n\n\n\n","category":"function"},{"location":"hamiltonians.html#Rimu.Hamiltonians.AbstractOffdiagonals","page":"Hamiltonians","title":"Rimu.Hamiltonians.AbstractOffdiagonals","text":"AbstractOffdiagonals{A,T}<:AbstractVector{Tuple{A,T}}\n\nIterator over new address and matrix elements for reachable off-diagonal matrix elements of a linear operator.\n\nSee Offdiagonals for a default implementation.\n\nMethods to define\n\noffdiagonals(h, a)::AbstractOffdiagonals: This function is used to construct the correct type of offdiagonals for a given combination of Hamiltonian h and Fock address a.\nBase.getindex(::AbstractOffdiagonals, i): should be equivalent to get_offdiagonal(h, a, i).\nBase.size(::AbstractOffdiagonals): should be equivalent to num_offdiagonals(h, a).\n\nSee also offdiagonals, AbstractHamiltonian, AbstractOperator.\n\n\n\n\n\n","category":"type"},{"location":"hamiltonians.html#Rimu.Hamiltonians.Offdiagonals","page":"Hamiltonians","title":"Rimu.Hamiltonians.Offdiagonals","text":"Offdiagonals(h, address) <: AbstractOffdiagonals\n\nIterator over new address and matrix element for reachable off-diagonal matrix elements of linear operator h from address address.  Represents an abstract vector containing the non-zero off-diagonal matrix elements of the column of h indexed by address. To construct this iterator use offdiagonals.\n\nThis is the default implementation of AbstractOffdiagonals defined in terms of num_offdiagonals and get_offdiagonal.\n\nSee also offdiagonals, AbstractHamiltonian, AbstractOperator.\n\n\n\n\n\n","category":"type"},{"location":"hamiltonians.html#Rimu.Hamiltonians.check_address_type","page":"Hamiltonians","title":"Rimu.Hamiltonians.check_address_type","text":"check_address_type(h::AbstractOperator, addr_or_type)\n\nThrow an ArgumentError if addr_or_type is not compatible with h, otherwise return true. Acceptable arguments are either an address or an address type, or a tuple or array thereof.\n\nSee also allows_address_type.\n\n\n\n\n\n","category":"function"},{"location":"hamiltonians.html#Rimu.Hamiltonians.number_conserving_dimension","page":"Hamiltonians","title":"Rimu.Hamiltonians.number_conserving_dimension","text":"number_conserving_dimension(address <: AbstractFockAddress)\n\nReturn the dimension of the Fock space spanned by the address type assuming particle number conservation.\n\nSee also number_conserving_bose_dimension, number_conserving_fermi_dimension, dimension.\n\n\n\n\n\n","category":"function"},{"location":"hamiltonians.html#Rimu.Hamiltonians.number_conserving_bose_dimension","page":"Hamiltonians","title":"Rimu.Hamiltonians.number_conserving_bose_dimension","text":"number_conserving_bose_dimension(n, m)\n\nReturn the dimension of the number-conserving Fock space for n bosons in m modes: binomial(n + m - 1, n).\n\nSee also number_conserving_fermi_dimension, number_conserving_dimension.\n\n\n\n\n\n","category":"function"},{"location":"hamiltonians.html#Rimu.Hamiltonians.number_conserving_fermi_dimension","page":"Hamiltonians","title":"Rimu.Hamiltonians.number_conserving_fermi_dimension","text":"number_conserving_fermi_dimension(n, m)\n\nReturn the dimension of the number-conserving Fock space for n fermions in m modes: binomial(m, n).\n\nSee also number_conserving_bose_dimension, number_conserving_dimension.\n\n\n\n\n\n","category":"function"},{"location":"hamiltonians.html#Geometry","page":"Hamiltonians","title":"Geometry","text":"","category":"section"},{"location":"hamiltonians.html","page":"Hamiltonians","title":"Hamiltonians","text":"Lattices in higher dimensions are defined here for HubbardRealSpace and G2RealSpace.","category":"page"},{"location":"hamiltonians.html","page":"Hamiltonians","title":"Hamiltonians","text":"CubicGrid\nHamiltonians.Directions\nHamiltonians.Displacements\nHamiltonians.neighbor_site\nPeriodicBoundaries\nHardwallBoundaries\nLadderBoundaries","category":"page"},{"location":"hamiltonians.html#Rimu.Hamiltonians.CubicGrid","page":"Hamiltonians","title":"Rimu.Hamiltonians.CubicGrid","text":"CubicGrid(dims::NTuple{D,Int}, fold::NTuple{D,Bool})\n\nRepresents a D-dimensional grid. Used to define a cubic lattice and boundary conditions for some AbstractHamiltonians. The type instance can be used to convert between cartesian vector indices (tuples or SVectors) and linear indices (integers). When indexed with vectors, it folds them back into the grid if the out-of-bounds dimension is periodic and 0 otherwise (see example below).\n\ndims controls the size of the grid in each dimension.\nfold controls whether the boundaries in each dimension are periodic (or folded in the case of momentum space).\n\njulia> geo = CubicGrid((2,3), (true,false))\nCubicGrid{2}((2, 3), (true, false))\n\njulia> geo[1]\n(1, 1)\n\njulia> geo[2]\n(2, 1)\n\njulia> geo[3]\n(1, 2)\n\njulia> geo[(1,2)]\n3\n\njulia> geo[(3,2)] # 3 is folded back into 1\n3\n\njulia> geo[(3,3)]\n5\n\njulia> geo[(3,4)] # returns 0 if out of bounds\n0\n\nSee also PeriodicBoundaries, HardwallBoundaries and LadderBoundaries for special-case constructors.\n\n\n\n\n\n","category":"type"},{"location":"hamiltonians.html#Rimu.Hamiltonians.Directions","page":"Hamiltonians","title":"Rimu.Hamiltonians.Directions","text":"Directions(D) <: AbstractVector{SVector{D,Int}}\nDirections(geometry::CubicGrid) <: AbstractVector{SVector{D,Int}}\n\nIterate over axis-aligned direction vectors in D dimensions.\n\njulia> Directions(3)\n6-element Directions{3}:\n [1, 0, 0]\n [0, 1, 0]\n [0, 0, 1]\n [-1, 0, 0]\n [0, -1, 0]\n [0, 0, -1]\n\n\nSee also CubicGrid.\n\n\n\n\n\n","category":"type"},{"location":"hamiltonians.html#Rimu.Hamiltonians.Displacements","page":"Hamiltonians","title":"Rimu.Hamiltonians.Displacements","text":"Displacements(geometry::CubicGrid) <: AbstractVector{SVector{D,Int}}\n\nReturn all valid offset vectors in a CubicGrid. If center=true the (0,0) displacement is placed at the centre of the array.\n\njulia> geometry = CubicGrid((3,4));\n\njulia> reshape(Displacements(geometry), (3,4))\n3×4 reshape(::Displacements{2, CubicGrid{2, (3, 4), (true, true)}}, 3, 4) with eltype StaticArraysCore.SVector{2, Int64}:\n [0, 0]  [0, 1]  [0, 2]  [0, 3]\n [1, 0]  [1, 1]  [1, 2]  [1, 3]\n [2, 0]  [2, 1]  [2, 2]  [2, 3]\n\njulia> reshape(Displacements(geometry; center=true), (3,4))\n3×4 reshape(::Displacements{2, CubicGrid{2, (3, 4), (true, true)}}, 3, 4) with eltype StaticArraysCore.SVector{2, Int64}:\n [-1, -1]  [-1, 0]  [-1, 1]  [-1, 2]\n [0, -1]   [0, 0]   [0, 1]   [0, 2]\n [1, -1]   [1, 0]   [1, 1]   [1, 2]\n\n\n\n\n\n\n","category":"type"},{"location":"hamiltonians.html#Rimu.Hamiltonians.neighbor_site","page":"Hamiltonians","title":"Rimu.Hamiltonians.neighbor_site","text":"neighbor_site(geom::CubicGrid, site, i)\n\nFind the i-th neighbor of site in the geometry. If the move is illegal, return 0.\n\n\n\n\n\n","category":"function"},{"location":"hamiltonians.html#Rimu.Hamiltonians.PeriodicBoundaries","page":"Hamiltonians","title":"Rimu.Hamiltonians.PeriodicBoundaries","text":"PeriodicBoundaries(dims...) -> CubicGrid\nPeriodicBoundaries(dims) -> CubicGrid\n\nReturn CubicGrid with all dimensions periodic. Equivalent to CubicGrid(dims).\n\n\n\n\n\n","category":"function"},{"location":"hamiltonians.html#Rimu.Hamiltonians.HardwallBoundaries","page":"Hamiltonians","title":"Rimu.Hamiltonians.HardwallBoundaries","text":"HardwallBoundaries(dims...) -> CubicGrid\nHardwallBoundaries(dims) -> CubicGrid\n\nReturn CubicGrid with all dimensions non-periodic. Equivalent to CubicGrid(dims, (false, false, ...)).\n\n\n\n\n\n","category":"function"},{"location":"hamiltonians.html#Rimu.Hamiltonians.LadderBoundaries","page":"Hamiltonians","title":"Rimu.Hamiltonians.LadderBoundaries","text":"LadderBoundaries(dims...) -> CubicGrid\nLadderBoundaries(dims) -> CubicGrid\n\nReturn CubicGrid where the first dimension is dimensions non-periodic and the rest are periodic. Equivalent to CubicGrid(dims, (true, false, ...)).\n\n\n\n\n\n","category":"function"},{"location":"hamiltonians.html#Harmonic-Oscillator","page":"Hamiltonians","title":"Harmonic Oscillator","text":"","category":"section"},{"location":"hamiltonians.html","page":"Hamiltonians","title":"Hamiltonians","text":"Useful utilities for harmonic oscillator in Cartesian basis, see HOCartesianContactInteractions and HOCartesianEnergyConservedPerDim.","category":"page"},{"location":"hamiltonians.html","page":"Hamiltonians","title":"Hamiltonians","text":"get_all_blocks\nfock_to_cart","category":"page"},{"location":"hamiltonians.html#Rimu.Hamiltonians.get_all_blocks","page":"Hamiltonians","title":"Rimu.Hamiltonians.get_all_blocks","text":"get_all_blocks(h::Union{HOCartesianContactInteractions,HOCartesianEnergyConservedPerDim}; \n    target_energy = nothing, \n    max_energy = nothing, \n    max_blocks = nothing, \n    method = :vertices,\n    kwargs...) -> df\n\nFind all distinct blocks of h. Returns a DataFrame with columns \n\nblock_id: index of block in order found\nblock_E0: noninteracting energy of all elements in the block\nblock_size: number of elements in the block\naddr: first address that generates the block with e.g. BasisSetRep\nindices: tuple of mode indices that allow recreation of the generating address    addr; in this case use e.g. BoseFS(M; indices .=> 1) This is useful when    the DataFrame is loaded from file since Arrow.jl converts custom   types to NamedTuples.\nt_basis: time to generate the basis for each block\n\nKeyword arguments:\n\ntarget_energy: only blocks with this noninteracting energy are found\nmax_energy: only blocks with noninteracting energy less than this are found\nmax_blocks: exit after finding this many blocks\nmethod: Choose between :vertices and :comb for method of enumerating    tuples of quantum numbers\nsave_to_file=nothing: if set then the DataFrame recording blocks is saved    after each new block is found\nadditional kwargs: passed to isapprox for comparing block energies.    Useful for anisotropic traps\n\nNote: If h was constructed with option block_by_level = false then the block seeds  addr are determined by parity. In this case the blocks are not generated; t_basis  will be zero, and block_size will be an estimate. Pass the seed addresses to  BasisSetRep with an appropriate filter to generate the blocks.\n\n\n\n\n\n","category":"function"},{"location":"hamiltonians.html#Rimu.Hamiltonians.fock_to_cart","page":"Hamiltonians","title":"Rimu.Hamiltonians.fock_to_cart","text":"fock_to_cart(addr, S; zero_index = true)\n\nConvert a Fock state address addr to Cartesian harmonic oscillator basis  indices n_xn_yldots. These indices are bounded by S which is a  tuple of the maximum number of states in each dimension. By default the  groundstate in each dimension is indexed by 0, but this can be changed  by setting zero_index = false.\n\n\n\n\n\n","category":"function"},{"location":"hamiltonians.html","page":"Hamiltonians","title":"Hamiltonians","text":"Underlying integrals for the interaction matrix elements are implemented in the following unexported functions","category":"page"},{"location":"hamiltonians.html","page":"Hamiltonians","title":"Hamiltonians","text":"Hamiltonians.four_oscillator_integral_general\nHamiltonians.ho_delta_potential\nHamiltonians.log_abs_oscillator_zero","category":"page"},{"location":"hamiltonians.html#Rimu.Hamiltonians.four_oscillator_integral_general","page":"Hamiltonians","title":"Rimu.Hamiltonians.four_oscillator_integral_general","text":"four_oscillator_integral_general(i, j, k, l; max_level = typemax(Int))\n\nIntegral of four one-dimensional harmonic oscillator functions,\n\n    mathcalI(ijkl) = int_-infty^infty dx \n    phi_i(x) phi_j(x) phi_k(x) phi_l(x)\n\nIndices i,j,k,l start at 0 for the groundstate.\n\nThis integral has a closed form in terms of the hypergeometric _3F_2 function, and is non-zero unless i+j+k+l is odd. See e.g. Titchmarsh (1948). This is a generalisation of the closed form in Papenbrock (2002), which is is the special case where i+j == k+l, but is numerically unstable for large arguments. Used in HOCartesianContactInteractions and HOCartesianEnergyConservedPerDim.\n\n\n\n\n\n","category":"function"},{"location":"hamiltonians.html#Rimu.Hamiltonians.ho_delta_potential","page":"Hamiltonians","title":"Rimu.Hamiltonians.ho_delta_potential","text":"ho_delta_potential(S, i, j; [vals])\n\nReturns the matrix element of a delta potential at the centre of a trap, i.e. the  product of two harmonic oscillator functions evaluated at the origin,\n\n    v_ij = phi_mathbfn_i(0) phi_mathbfn_j(0)\n\nwhich is only non-zero for even-parity states. The ith single particle state corresponds to a D-tuple of harmonic oscillator indices mathbfn_i. S defines the bounds of Cartesian harmonic oscillator indices for each dimension. The optional keyword argument vals allows passing pre-computed values of phi_i(0) to speed-up the calculation. The values can be calculated with log_abs_oscillator_zero.\n\nSee also HOCartesianCentralImpurity.\n\n\n\n\n\n","category":"function"},{"location":"hamiltonians.html#Rimu.Hamiltonians.log_abs_oscillator_zero","page":"Hamiltonians","title":"Rimu.Hamiltonians.log_abs_oscillator_zero","text":"log_abs_oscillator_zero(n)\n\nCompute the logarithm of the absolute value of the n^mathrmth 1D harmonic oscillator function evaluated at the origin. The overall sign is determined when the matrix element is evaluated in ho_delta_potential.\n\n\n\n\n\n","category":"function"},{"location":"hamiltonians.html#Index","page":"Hamiltonians","title":"Index","text":"","category":"section"},{"location":"hamiltonians.html","page":"Hamiltonians","title":"Hamiltonians","text":"Pages   = [\"hamiltonians.md\"]","category":"page"},{"location":"RMPI.html#Module-RMPI","page":"RMPI","title":"Module RMPI","text":"","category":"section"},{"location":"RMPI.html","page":"RMPI","title":"RMPI","text":"Rimu.RMPI","category":"page"},{"location":"RMPI.html#Rimu.RMPI","page":"RMPI","title":"Rimu.RMPI","text":"Module for providing MPI functionality for Rimu. This module is unexported. To use it, run\n\nusing Rimu.RMPI\n\n\n\n\n\n","category":"module"},{"location":"RMPI.html#MPIData","page":"RMPI","title":"MPIData","text":"","category":"section"},{"location":"RMPI.html","page":"RMPI","title":"RMPI","text":"Rimu.RMPI.MPIData","category":"page"},{"location":"RMPI.html#Rimu.RMPI.MPIData","page":"RMPI","title":"Rimu.RMPI.MPIData","text":"MPIData(data; kwargs...)\n\nWrapper used for signaling that this data is part of a distributed data structure and communication should happen with MPI. MPIData can generally be used where an AbstractDVec would be used otherwise. Unlike AbstractDVecs, MPIData does not support indexing, or iteration over keys, values, and pairs.\n\nKeyword arguments:\n\nsetup = mpi_point_to_point - controls the communication stratgy\nmpi_one_sided uses one-sided communication with remote memory access (RMA), sets MPIOneSided strategy.\nmpi_point_to_point uses MPIPointToPoint strategy.\nmpi_all_to_all uses MPIAllToAll strategy.\nmpi_no_exchange sets MPINoWalkerExchange strategy. Experimental. Use with caution!\ncomm = mpi_comm()\nroot = mpi_root\nThe rest of the keyword arguments are passed to setup.\n\n\n\n\n\n","category":"type"},{"location":"RMPI.html#Setup-functions","page":"RMPI","title":"Setup functions","text":"","category":"section"},{"location":"RMPI.html","page":"RMPI","title":"RMPI","text":"The following distribute strategies are available. The functions are unexported.","category":"page"},{"location":"RMPI.html","page":"RMPI","title":"RMPI","text":"Rimu.RMPI.mpi_point_to_point\nRimu.RMPI.mpi_one_sided\nRimu.RMPI.mpi_all_to_all\nRimu.RMPI.mpi_no_exchange","category":"page"},{"location":"RMPI.html#Rimu.RMPI.mpi_point_to_point","page":"RMPI","title":"Rimu.RMPI.mpi_point_to_point","text":"mpi_point_to_point(data, comm = mpi_comm(), root = mpi_root)\n\nDeclare data as mpi-distributed and set communication strategy to point-to-point.\n\nSets up the MPIData structure with MPIPointToPoint strategy.\n\n\n\n\n\n","category":"function"},{"location":"RMPI.html#Rimu.RMPI.mpi_one_sided","page":"RMPI","title":"Rimu.RMPI.mpi_one_sided","text":"mpi_one_sided(data, comm = mpi_comm(), root = mpi_root; capacity)\n\nDeclare data as mpi-distributed and set communication strategy to one-sided with remote memory access (RMA). capacity sets the capacity of the RMA windows.\n\nSets up the MPIData structure with MPIOneSided strategy.\n\n\n\n\n\n","category":"function"},{"location":"RMPI.html#Rimu.RMPI.mpi_all_to_all","page":"RMPI","title":"Rimu.RMPI.mpi_all_to_all","text":"mpi_all_to_all(data, comm = mpi_comm(), root = mpi_root)\n\nDeclare data as mpi-distributed and set communication strategy to all-to-all.\n\nSets up the MPIData structure with MPIAllToAll strategy.\n\n\n\n\n\n","category":"function"},{"location":"RMPI.html#Rimu.RMPI.mpi_no_exchange","page":"RMPI","title":"Rimu.RMPI.mpi_no_exchange","text":"mpi_no_exchange(data, comm = mpi_comm(), root = mpi_root)\n\nDeclare data as mpi-distributed and set communication strategy to MPINoWalkerExchange. Sets up the MPIData structure with MPINoWalkerExchange strategy.\n\n\n\n\n\n","category":"function"},{"location":"RMPI.html#Strategies","page":"RMPI","title":"Strategies","text":"","category":"section"},{"location":"RMPI.html","page":"RMPI","title":"RMPI","text":"Rimu.RMPI.MPIPointToPoint\nRimu.RMPI.MPIOneSided\nRimu.RMPI.MPIAllToAll\nRimu.RMPI.MPINoWalkerExchange","category":"page"},{"location":"RMPI.html#Rimu.RMPI.MPIPointToPoint","page":"RMPI","title":"Rimu.RMPI.MPIPointToPoint","text":"MPIPointToPoint{N,A}\n\nPoint-to-point communication strategy. Uses circular communication using MPI.Send and MPI.Recv!.\n\nConstructor\n\nMPIPointToPoint(::Type{P}, np, id, comm): Construct an instance with pair type P on np processes with current rank id.\n\n\n\n\n\n","category":"type"},{"location":"RMPI.html#Rimu.RMPI.MPIOneSided","page":"RMPI","title":"Rimu.RMPI.MPIOneSided","text":"MPIOneSided(nprocs, myrank, comm, ::Type{T}, capacity)\n\nCommunication buffer for use with MPI one-sided communication (remote memory access). Up to capacity elements of type T can be exchanged between MPI ranks via put. It is important that isbitstype(T) == true. Objects of type MPIOneSided have to be freed manually with a (blocking) call to free().\n\n\n\n\n\n","category":"type"},{"location":"RMPI.html#Rimu.RMPI.MPIAllToAll","page":"RMPI","title":"Rimu.RMPI.MPIAllToAll","text":" MPIAllToAll\n\nAll-to-all communication strategy. The communication works in two steps: first MPI.Alltoall! is used to communicate the number of walkers each rank wants to send to other ranks, then MPI.Alltoallv! is used to send the walkers around.\n\nConstructor\n\nMPIAllToAll(Type{P}, np, id, comm): Construct an instance with pair type P on np processes with current rank id.\n\n\n\n\n\n","category":"type"},{"location":"RMPI.html#Rimu.RMPI.MPINoWalkerExchange","page":"RMPI","title":"Rimu.RMPI.MPINoWalkerExchange","text":"MPINoWalkerExchange(nprocs, my_rank, comm)\n\nStrategy for not exchanging walkers between ranks. Consequently there will be no cross-rank annihilations.\n\n\n\n\n\n","category":"type"},{"location":"RMPI.html#MPI-convenience-functions","page":"RMPI","title":"MPI convenience functions","text":"","category":"section"},{"location":"RMPI.html","page":"RMPI","title":"RMPI","text":"Modules = [Rimu.RMPI]\nPages = [\"helpers.jl\"]\nPrivate = true\nPublic = true","category":"page"},{"location":"RMPI.html#Rimu.RMPI.mpi_root","page":"RMPI","title":"Rimu.RMPI.mpi_root","text":"Default MPI root for RMPI.\n\n\n\n\n\n","category":"constant"},{"location":"RMPI.html#Rimu.DictVectors.mpi_comm-Tuple{}","page":"RMPI","title":"Rimu.DictVectors.mpi_comm","text":"Default MPI communicator for RMPI.\n\n\n\n\n\n","category":"method"},{"location":"RMPI.html#Rimu.DictVectors.mpi_rank","page":"RMPI","title":"Rimu.DictVectors.mpi_rank","text":"mpi_rank(comm = mpi_comm())\n\nReturn the current MPI rank.\n\n\n\n\n\n","category":"function"},{"location":"RMPI.html#Rimu.DictVectors.mpi_size","page":"RMPI","title":"Rimu.DictVectors.mpi_size","text":"mpi_size(comm = mpi_comm())\n\nSize of MPI communicator.\n\n\n\n\n\n","category":"function"},{"location":"RMPI.html#Rimu.RMPI.is_mpi_root","page":"RMPI","title":"Rimu.RMPI.is_mpi_root","text":"is_mpi_root(root = mpi_root)\n\nReturns true if called from the root rank\n\n\n\n\n\n","category":"function"},{"location":"RMPI.html#Rimu.RMPI.mpi_allprintln-Tuple","page":"RMPI","title":"Rimu.RMPI.mpi_allprintln","text":"mpi_allprintln(args...)\n\nPrint a message to stdout from each rank separately, in order. MPI synchronizing.\n\n\n\n\n\n","category":"method"},{"location":"RMPI.html#Rimu.RMPI.mpi_barrier","page":"RMPI","title":"Rimu.RMPI.mpi_barrier","text":"mpi_barrier(comm = mpi_comm())\n\nThe MPI barrier with optional argument. MPI syncronizing.\n\n\n\n\n\n","category":"function"},{"location":"RMPI.html#Rimu.RMPI.mpi_combine_walkers!-Tuple{Rimu.RMPI.MPIData, AbstractDVec}","page":"RMPI","title":"Rimu.RMPI.mpi_combine_walkers!","text":"mpi_combine_walkers!(target, source, [strategy])\n\nDistribute the entries of source to the target data structure such that all entries in the target are on the process with the correct mpi rank as controlled by targetrank(). MPI syncronizing.\n\nNote: the storage of the source is communicated rather than the source itself.\n\n\n\n\n\n","category":"method"},{"location":"RMPI.html#Rimu.RMPI.mpi_seed!","page":"RMPI","title":"Rimu.RMPI.mpi_seed!","text":"mpi_seed!(seed = rand(Random.RandomDevice(), UInt))\n\nRe-seed the random number generators in an MPI-safe way. If seed is provided, the random numbers from rand will follow a deterministic sequence.\n\nIndependence of the random number generators on different MPI ranks is achieved by adding hash(mpi_rank()) to seed.\n\n\n\n\n\n","category":"function"},{"location":"RMPI.html#Rimu.RMPI.next_mpiID","page":"RMPI","title":"Rimu.RMPI.next_mpiID","text":"next_mpiID()\n\nProduce a new ID number for MPI distributed objects. Uses an internal counter.\n\n\n\n\n\n","category":"function"},{"location":"RMPI.html#Rimu.RMPI.targetrank-Tuple{Union{Integer, AbstractFockAddress}, Any}","page":"RMPI","title":"Rimu.RMPI.targetrank","text":"targetrank(key, np)\n\nCompute the rank where the key belongs.\n\n\n\n\n\n","category":"method"},{"location":"RMPI.html#Rimu.RMPI.@mpi_root-Tuple","page":"RMPI","title":"Rimu.RMPI.@mpi_root","text":"@mpi_root expr\n\nEvaluate expression only on the root rank. Extra care needs to be taken as expr must not contain any code that involves syncronising MPI operations, i.e. actions that would require syncronous action of all MPI ranks.\n\nExample:\n\nwn = walkernumber(dv)   # an MPI syncronising function call that gathers\n                        # information from all MPI ranks\n@mpi_root @info \"The current walker number is\" wn # print info message on root only\n\n\n\n\n\n","category":"macro"},{"location":"RMPI.html#Index","page":"RMPI","title":"Index","text":"","category":"section"},{"location":"RMPI.html","page":"RMPI","title":"RMPI","text":"Pages   = [\"RMPI.md\"]","category":"page"},{"location":"testing.html#Code-testing","page":"Code testing","title":"Code testing","text":"","category":"section"},{"location":"testing.html","page":"Code testing","title":"Code testing","text":"The script runtest.jl in the test/ folder contains tests of the code. To run the test simply run the script from the Julia REPL or run","category":"page"},{"location":"testing.html","page":"Code testing","title":"Code testing","text":"Rimu$ julia test/runtest.jl","category":"page"},{"location":"testing.html","page":"Code testing","title":"Code testing","text":"from the command line.","category":"page"},{"location":"testing.html","page":"Code testing","title":"Code testing","text":"More tests should be added over time to test core functionality of the code. To add new tests, directly edit the file runtest.jl.","category":"page"},{"location":"testing.html#Automated-testing-with-GitHub-Actions","page":"Code testing","title":"Automated testing with GitHub Actions","text":"","category":"section"},{"location":"testing.html","page":"Code testing","title":"Code testing","text":"GitHub Actions are set up to run the test script automatically on the GitHub cloud server every time a new commit to the master branch is pushed to the server. The setup for this to happen is configured in the file actions.yml in the Rimu/.github/workflows folder.","category":"page"},{"location":"exactdiagonalization.html#Exact-Diagonalization","page":"Exact Diagonalization","title":"Exact Diagonalization","text":"","category":"section"},{"location":"exactdiagonalization.html","page":"Exact Diagonalization","title":"Exact Diagonalization","text":"The main functionality of Rimu for exact diagonalization is contained in the module ExactDiagonalization.","category":"page"},{"location":"exactdiagonalization.html","page":"Exact Diagonalization","title":"Exact Diagonalization","text":"ExactDiagonalization","category":"page"},{"location":"exactdiagonalization.html#Rimu.ExactDiagonalization","page":"Exact Diagonalization","title":"Rimu.ExactDiagonalization","text":"The module Rimu.ExactDiagonalization provides a framework for exact diagonalization of quantum many-body systems defined by an AbstractHamiltonian type.\n\nThe main usage is through defining an ExactDiagonalizationProblem and solving it with the solve function. The module provides a unified interface for accessing different solver algorithms, which make use of solvers provided by external packages.\n\nExports\n\nExactDiagonalizationProblem\nBasisSetRepresentation\nbuild_basis\nKrylovKitSolver\nLinearAlgebraSolver\nArpackSolver\nLOBPCGSolver\n\n\n\n\n\n","category":"module"},{"location":"exactdiagonalization.html#ExactDiagonalizationProblem","page":"Exact Diagonalization","title":"ExactDiagonalizationProblem","text":"","category":"section"},{"location":"exactdiagonalization.html","page":"Exact Diagonalization","title":"Exact Diagonalization","text":"ExactDiagonalizationProblem\nsolve(::ExactDiagonalizationProblem)\ninit(::ExactDiagonalizationProblem)","category":"page"},{"location":"exactdiagonalization.html#Rimu.ExactDiagonalization.ExactDiagonalizationProblem","page":"Exact Diagonalization","title":"Rimu.ExactDiagonalization.ExactDiagonalizationProblem","text":"ExactDiagonalizationProblem(hamiltonian::AbstractHamiltonian, [v0]; kwargs...)\n\nDefines an exact diagonalization problem with an AbstractHamiltonian hamiltonian. Optionally, a starting vector of type AbstractDVec, or a single address or a collection of addresses can be passed as v0.\n\nExactDiagonalizationProblems can be solved with solve.\n\nKeyword arguments\n\nalgorithm=LinearAlgebraSolver(): The algorithm to use for solving the problem. The   algorithm can also be specified as the second positional argument in the init   function.\nOptional keyword arguments will be passed on to the init and solve functions.\n\nAlgorithms\n\nLinearAlgebraSolver(): An algorithm for solving the problem using the   dense-matrix eigensolver from the LinearAlgebra standard library (eventually using   LAPACK). Only suitable for small matrices.\nKrylovKitSolver(matrix_free=true): An algorithm for finding a few eigenvalues   and vectors. With matrix_free=true the problem is solved without instatiating a   matrix. This is suitable for large dimensions. With matrix_free=false the problem is   solved after instantiating a sparse matrix. This is faster if sufficient memory is   available. Requires using KrylovKit.\nArpackSolver(): An algorithm for solving the problem after instantiating a   sparse matrix and using the Arpack Fortran library. Requires using Arpack.\nLOBPCGSolver(): An algorithm for solving the problem after instantiating a   sparse matrix using the LOBPCG method. Requires using IterativeSolvers.\n\nKeyword arguments for matrix-based algorithms (also accepted by init)\n\nSee BasisSetRepresentation for more information.\n\nsizelim: The maximum size of the basis set representation. The default is 10^6 for   sparse matrices and 10^5 for dense matrices.\ncutoff: A cutoff value for the basis set representation.\nfilter: A filter function for the basis set representation.\nnnzs = 0: The number of non-zero elements in the basis set representation. Setting a   non-zero value can speed up the computation.\ncol_hint = 0: A hint for the number of columns in the basis set representation.\nsort = false: Whether to sort the basis set representation.\n\nKeyword arguments for iterative algorithms (also accepted by solve)\n\nverbose = false: Whether to print additional information.\nabstol = nothing: The absolute tolerance for the solver. If nothing, the solver   chooses a default value.\nhowmany = 1: The minimum number of eigenvalues to compute.\nwhich = :SR: Whether to compute the largest or smallest eigenvalues.\nmaxiters = nothing: The maximum number of iterations for the solver. If nothing, the   solver chooses a default value.\n\nSolving an ExactDiagonalizationProblem\n\nThe solve function can be called directly on an ExactDiagonalizationProblem to solve it. Alternatively, the init function can be used to initialize a solver, which can then be solved with solve. The solve function returns a result type with the eigenvalues, eigenvectors, and convergence information.\n\nResult type\n\nThe result type for the solve function is determined by the algorithm used. It has the following fields:\n\nvalues::Vector: The eigenvalues.\nvectors::Vector{<:AbstractDVec}: The eigenvectors.\nsuccess::Bool: A boolean flag indicating whether the solver was successful.\ninfo: Convergence information.\nalgorithm: The algorithm used for the computation.\nproblem: The ExactDiagonalizationProblem that was solved.\nAdditional fields may be present depending on the algorithm used.\n\nIterating the result type will yield the eigenvalues, eigenvectors, and a boolean flag success in that order.\n\nExamples\n\njulia> p = ExactDiagonalizationProblem(HubbardReal1D(BoseFS(1,1,1)))\nExactDiagonalizationProblem(\n  HubbardReal1D(fs\"|1 1 1⟩\"; u=1.0, t=1.0),\n  nothing;\n  NamedTuple()...\n)\n\njulia> result = solve(p) # convert to dense matrix and solve with LinearAlgebra.eigen\nEDResult for algorithm LinearAlgebraSolver() with 10 eigenvalue(s),\n  values = [-5.09593, -1.51882, -1.51882, 1.55611, 1.6093, 1.6093, 4.0, 4.53982, 4.90952, 4.90952],\n  and vectors of length 10.\n  Convergence info: \"Dense matrix eigensolver solution from `LinearAlgebra.eigen`\", with howmany = 10 eigenvalues requested.\n  success = true.\n\njulia> using KrylovKit # an external package has to be installed and loaded\n\njulia> s = init(p; algorithm = KrylovKitSolver(true)) # solve without building a matrix\nKrylovKitDirectEDSolver\n with algorithm KrylovKitSolver(matrix_free = true,) for hamiltonian = HubbardReal1D(fs\"|1 1 1⟩\"; u=1.0, t=1.0),\n  v0 = 1-element PDVec: style = IsDeterministic{Float64}()\n  fs\"|1 1 1⟩\" => 1.0,\n  kwargs = NamedTuple()\n)\n\njulia> values, vectors, success = solve(s);\n\njulia> result.values[1] ≈ values[1]\ntrue\n\nSee also solve(::ExactDiagonalizationProblem), init(::ExactDiagonalizationProblem), KrylovKitSolver, ArpackSolver, LinearAlgebraSolver.\n\nnote: Note\nUsing the KrylovKitSolver() algorithms requires the KrylovKit.jl package. The package can be loaded with using KrylovKit. Using the ArpackSolver() algorithm requires the Arpack.jl package. The package can be loaded with using Arpack. Using the LOBPCGSolver() algorithm requires the IterativeSolvers.jl package. The package can be loaded with using IterativeSolvers.\n\n\n\n\n\n","category":"type"},{"location":"exactdiagonalization.html#CommonSolve.solve-Tuple{ExactDiagonalizationProblem}","page":"Exact Diagonalization","title":"CommonSolve.solve","text":"solve(p::ExactDiagonalizationProblem, [algorithm]; kwargs...)\n\nSolve an ExactDiagonalizationProblem p directly. Optionally specify an algorithm. Returns a result type with the eigenvalues, eigenvectors, and convergence information.\n\nFor a description of the keyword arguments, see the documentation for ExactDiagonalizationProblem.\n\nSee also solve(::ProjectorMonteCarloProblem).\n\n\n\n\n\n","category":"method"},{"location":"exactdiagonalization.html#CommonSolve.init-Tuple{ExactDiagonalizationProblem}","page":"Exact Diagonalization","title":"CommonSolve.init","text":"init(p::ExactDiagonalizationProblem, [algorithm]; kwargs...)\n\nInitialize a solver for an ExactDiagonalizationProblem p with an optional algorithm. Returns a solver instance that can be solved with solve.\n\nFor a description of the keyword arguments, see the documentation for ExactDiagonalizationProblem.\n\n\n\n\n\n","category":"method"},{"location":"exactdiagonalization.html#Solver-algorithms","page":"Exact Diagonalization","title":"Solver algorithms","text":"","category":"section"},{"location":"exactdiagonalization.html","page":"Exact Diagonalization","title":"Exact Diagonalization","text":"KrylovKitSolver\nLinearAlgebraSolver\nArpackSolver\nLOBPCGSolver","category":"page"},{"location":"exactdiagonalization.html#Rimu.ExactDiagonalization.KrylovKitSolver","page":"Exact Diagonalization","title":"Rimu.ExactDiagonalization.KrylovKitSolver","text":"KrylovKitSolver(matrix_free::Bool; kwargs...)\nKrylovKitSolver(; matrix_free = false, kwargs...)\n\nAlgorithm for solving a large ExactDiagonalizationProblem to find a few eigenvalues and vectors using the KrylovKit.jl package. The Lanczos method is used for hermitian matrices, and the Arnoldi method is used for non-hermitian matrices.\n\nArguments\n\nmatrix_free = false: Whether to use a matrix-free algorithm. If false, a sparse matrix   will be instantiated. This is typically faster and recommended for small matrices,   but requires more memory. If true, the matrix is not instantiated, which is useful for   large matrices that would not fit into memory. The calculation will parallelise using   threading and MPI if available by making use of PDVec.\nkwargs: Additional keyword arguments are passed on to the function   KrylovKit.eigsolve().\n\nSee also ExactDiagonalizationProblem, solve.\n\nnote: Note\nRequires the KrylovKit.jl package to be loaded with using KrylovKit.\n\n\n\n\n\n","category":"type"},{"location":"exactdiagonalization.html#Rimu.ExactDiagonalization.LinearAlgebraSolver","page":"Exact Diagonalization","title":"Rimu.ExactDiagonalization.LinearAlgebraSolver","text":"LinearAlgebraSolver(; kwargs...)\n\nAlgorithm for solving an ExactDiagonalizationProblem using the dense-matrix eigensolver from the LinearAlgebra standard library. This is only suitable for small matrices.\n\nThe kwargs are passed on to function LinearAlgebra.eigen.\n\nKeyword arguments\n\npermute = true: Whether to permute the matrix before diagonalization.\nscale = true: Whether to scale the matrix before diagonalization.\nsortby: The sorting order for the eigenvalues.\n\nSee also ExactDiagonalizationProblem, solve.\n\n\n\n\n\n","category":"type"},{"location":"exactdiagonalization.html#Rimu.ExactDiagonalization.ArpackSolver","page":"Exact Diagonalization","title":"Rimu.ExactDiagonalization.ArpackSolver","text":"ArpackSolver(; kwargs...)\n\nAlgorithm for solving an ExactDiagonalizationProblem after instantiating a sparse matrix. It uses the Lanzcos method for hermitian problems, and the Arnoldi method for non-hermitian problems, using the Arpack Fortran library. This is faster than KrylovKitSolver(; matrix_free=true), but it requires more memory and will only be useful if the matrix fits into memory.\n\nThe kwargs are passed on to the function Arpack.eigs().\n\nSee also ExactDiagonalizationProblem, solve.\n\nnote: Note\nRequires the Arpack.jl package to be loaded with using Arpack.\n\n\n\n\n\n","category":"type"},{"location":"exactdiagonalization.html#Rimu.ExactDiagonalization.LOBPCGSolver","page":"Exact Diagonalization","title":"Rimu.ExactDiagonalization.LOBPCGSolver","text":"LOBPCGSolver(; kwargs...)\n\nThe Locally Optimal Block Preconditioned Conjugate Gradient Method (LOBPCG). Algorithm for solving an ExactDiagonalizationProblem after instantiating a sparse matrix.\n\nLOBPCG is not suitable for non-hermitian eigenvalue problems.\n\nThe kwargs are passed on to the function IterativeSolvers.lobpcg().\n\nSee also ExactDiagonalizationProblem, solve.\n\nnote: Note\nRequires the IterativeSolvers.jl package to be loaded with using IterativeSolvers.\n\n\n\n\n\n","category":"type"},{"location":"exactdiagonalization.html#Converting-a-Hamiltonian-in-to-a-matrix","page":"Exact Diagonalization","title":"Converting a Hamiltonian in to a matrix","text":"","category":"section"},{"location":"exactdiagonalization.html","page":"Exact Diagonalization","title":"Exact Diagonalization","text":"BasisSetRepresentation\nbuild_basis\nMatrix\nsparse","category":"page"},{"location":"exactdiagonalization.html#Rimu.ExactDiagonalization.BasisSetRepresentation","page":"Exact Diagonalization","title":"Rimu.ExactDiagonalization.BasisSetRepresentation","text":"BasisSetRepresentation(\n    hamiltonian::AbstractHamiltonian, addr=starting_address(hamiltonian);\n    sizelim=10^6, nnzs, cutoff, filter, sort=false, kwargs...\n)\nBasisSetRepresentation(hamiltonian::AbstractHamiltonian, addresses::AbstractVector; kwargs...)\n\nEagerly construct the basis set representation of the operator hamiltonian with all addresses reachable from addr. Instead of a single address, a vector of addresses can be passed.\n\nAn ArgumentError is thrown if dimension(hamiltonian) > sizelim in order to prevent memory overflow. Set sizelim = Inf in order to disable this behaviour.\n\nProviding the number nnzs of expected calculated matrix elements and col_hint for the estimated number of nonzero off-diagonal matrix elements in each matrix column may improve performance.\n\nProviding an energy cutoff will skip the columns and rows with diagonal elements greater than cutoff. Alternatively, an arbitrary filter function can be used instead. Addresses passed as arguments are not filtered. To generate the matrix truncated to the subspace spanned by the addresses, use filter = Returns(false).\n\nSetting sort to true will sort the matrix rows and columns. This is useful when the order of the columns matters, e.g. when comparing matrices. Any additional keyword arguments are passed on to Base.sortperm.\n\nFields\n\nsparse_matrix: sparse matrix representing hamiltonian in the basis basis\nbasis: vector of addresses\nhamiltonian: the Hamiltonian hamiltonian\n\nExample\n\njulia> hamiltonian = HubbardReal1D(BoseFS(1,0,0));\n\njulia> bsr = BasisSetRepresentation(hamiltonian)\nBasisSetRepresentation(HubbardReal1D(fs\"|1 0 0⟩\"; u=1.0, t=1.0)) with dimension 3 and 9 stored entries:3×3 SparseArrays.SparseMatrixCSC{Float64, Int64} with 9 stored entries:\n  0.0  -1.0  -1.0\n -1.0   0.0  -1.0\n -1.0  -1.0   0.0\n\njulia> BasisSetRepresentation(hamiltonian, bsr.basis[1:2]; filter = Returns(false)) # passing addresses and truncating\nBasisSetRepresentation(HubbardReal1D(fs\"|1 0 0⟩\"; u=1.0, t=1.0)) with dimension 2 and 4 stored entries:2×2 SparseArrays.SparseMatrixCSC{Float64, Int64} with 4 stored entries:\n  0.0  -1.0\n -1.0   0.0\n\njulia> using LinearAlgebra; round.(eigvals(Matrix(bsr)); digits = 4) # eigenvalues\n3-element Vector{Float64}:\n -2.0\n  1.0\n  1.0\n\njulia> ev = eigvecs(Matrix(bsr))[:,1]; ev = ev .* sign(ev[1]) # ground state eigenvector\n3-element Vector{Float64}:\n 0.5773502691896257\n 0.5773502691896255\n 0.5773502691896257\n\njulia> dv = DVec(zip(bsr.basis, ev)) # ground state as DVec\nDVec{BoseFS{1, 3, BitString{3, 1, UInt8}},Float64} with 3 entries, style = IsDeterministic{Float64}()\n  fs\"|0 0 1⟩\" => 0.57735\n  fs\"|0 1 0⟩\" => 0.57735\n  fs\"|1 0 0⟩\" => 0.57735\n\nHas methods for dimension, sparse, Matrix, starting_address.\n\nPart of the AbstractHamiltonian interface. See also build_basis.\n\n\n\n\n\n","category":"type"},{"location":"exactdiagonalization.html#Rimu.ExactDiagonalization.build_basis","page":"Exact Diagonalization","title":"Rimu.ExactDiagonalization.build_basis","text":"build_basis(\n    ham, address=starting_address(ham);\n    cutoff, filter, sizelim, sort=false, kwargs...\n) -> basis\nbuild_basis(ham, addresses::AbstractVector; kwargs...)\n\nGet all basis element of a linear operator ham that are reachable (via non-zero matrix elements) from the address address, returned as a vector. Instead of a single address, a vector of addresses can be passed. Does not return the matrix, for that purpose use BasisSetRepresentation.\n\nProviding an energy cutoff will skip addresses with diagonal elements greater than cutoff. Alternatively, an arbitrary filter function can be used instead. Addresses passed as arguments are not filtered. A maximum basis size sizelim can be set which will throw an error if the expected dimension of ham is larger than sizelim. This may be useful when memory may be a concern. These options are disabled by default.\n\nSetting sort to true will sort the basis. Any additional keyword arguments are passed on to Base.sort!.\n\n\n\n\n\n","category":"function"},{"location":"exactdiagonalization.html#Base.Matrix","page":"Exact Diagonalization","title":"Base.Matrix","text":"Matrix(\n    hamiltonian::AbstractHamiltonian, addr=starting_address(hamiltonian);\n    sizelim=10^4, kwargs...\n)\nMatrix(bsr::BasisSetRepresentation)\n\nReturn a dense matrix representation of hamiltonian or bsr. kwargs are passed to BasisSetRepresentation.\n\nSee BasisSetRepresentation.\n\n\n\n\n\n","category":"type"},{"location":"exactdiagonalization.html#SparseArrays.sparse","page":"Exact Diagonalization","title":"SparseArrays.sparse","text":"sparse(hamiltonian::AbstractHamiltonian, addr=starting_address(hamiltonian); kwargs...)\nsparse(bsr::BasisSetRepresentation)\n\nReturn a sparse matrix representation of hamiltonian or bsr. kwargs are passed to BasisSetRepresentation.\n\nSee BasisSetRepresentation.\n\n\n\n\n\n","category":"function"},{"location":"exactdiagonalization.html#Deprecated","page":"Exact Diagonalization","title":"Deprecated","text":"","category":"section"},{"location":"exactdiagonalization.html","page":"Exact Diagonalization","title":"Exact Diagonalization","text":"BasisSetRep","category":"page"},{"location":"exactdiagonalization.html#Rimu.ExactDiagonalization.BasisSetRep","page":"Exact Diagonalization","title":"Rimu.ExactDiagonalization.BasisSetRep","text":"BasisSetRep(args...; kwargs...)\n\nBasisSetRep is deprecated. Use BasisSetRepresentation instead.\n\n\n\n\n\n","category":"function"},{"location":"randomnumbers.html#Random-numbers-in-Rimu","page":"Random numbers","title":"Random numbers in Rimu","text":"","category":"section"},{"location":"randomnumbers.html","page":"Random numbers","title":"Random numbers","text":"Rimu uses Julia's built-in random number generator, which currently defaults to Xoshiro256++.","category":"page"},{"location":"randomnumbers.html#Reproducibility","page":"Random numbers","title":"Reproducibility","text":"","category":"section"},{"location":"randomnumbers.html","page":"Random numbers","title":"Random numbers","text":"If you want FCIQMC runs to be reproducible, make sure to seed the RNG with Random.seed!.","category":"page"},{"location":"randomnumbers.html","page":"Random numbers","title":"Random numbers","text":"MPI-distributed runs can also be made reproducible by seeding the RNG with Rimu.RMPI.mpi_seed!.","category":"page"},{"location":"documentation.html#Documentation-generation","page":"Documentation generation","title":"Documentation generation","text":"","category":"section"},{"location":"documentation.html","page":"Documentation generation","title":"Documentation generation","text":"We are using Documenter.jl to generate the documentation web site based on markdown files stored in docs/src. Please help keeping the documentation up-to-date by editing the markdown files! For instructions on how to write appropriate documentation please refer to the relevant chapter in the Julia documentation and the Documenter.jl documentation.","category":"page"},{"location":"documentation.html#Generating-the-documentation-web-site","page":"Documentation generation","title":"Generating the documentation web site","text":"","category":"section"},{"location":"documentation.html","page":"Documentation generation","title":"Documentation generation","text":"The documentation pages can be generated by running the build script by typing","category":"page"},{"location":"documentation.html","page":"Documentation generation","title":"Documentation generation","text":"Rimu$ julia --project=docs docs/make.jl","category":"page"},{"location":"documentation.html","page":"Documentation generation","title":"Documentation generation","text":"on the shell prompt from the Rimu/ folder. A complete image of the static documentation web site will be generated in the folder docs/build/. It can be viewed locally by pointing a web browser to file docs/build/index.html, or by deploying it to the GitHub pages web server.","category":"page"},{"location":"documentation.html#Automatic-documentation-generation-and-deployment","page":"Documentation generation","title":"Automatic documentation generation and deployment","text":"","category":"section"},{"location":"documentation.html","page":"Documentation generation","title":"Documentation generation","text":"Our documentation is hosted on GitHub pages. The documentation web site can be built and deployed automatically with GitHub Actions. This needs to be set up with an appropriate script in the file .github/workflows/docs.yml, where triggers for this to happen can be defined. In the current set up, a new documentation web site is generated and deployed whenever someone pushes to the develop branch on the GitHub server. The updated documentation can then be accessed here.","category":"page"},{"location":"documentation.html","page":"Documentation generation","title":"Documentation generation","text":"Previews for pull-requests can be accessed by replacing 101 in the following link with the PR number: https://joachimbrand.github.io/Rimu.jl/previews/PR101/","category":"page"},{"location":"documentation.html#Example-scripts","page":"Documentation generation","title":"Example scripts","text":"","category":"section"},{"location":"documentation.html","page":"Documentation generation","title":"Documentation generation","text":"Examples should be added to the scripts folder, in the form of .jl files suitable for  parsing by Literate. The process of generating  documentation is automated in the docs/make.jl file and assumes that the following line is  at (or near) the top of the script:","category":"page"},{"location":"documentation.html","page":"Documentation generation","title":"Documentation generation","text":"# # Example N: Title","category":"page"},{"location":"documentation.html","page":"Documentation generation","title":"Documentation generation","text":"where the number N and Title will be extracted automatically.","category":"page"},{"location":"documentation.html","page":"Documentation generation","title":"Documentation generation","text":"Tests for the results and output of specific scripts should be added at the end of each example. The code to run the test should be hidden from the final generated document by appending \"#hide\" to each line of testing code. For example, ","category":"page"},{"location":"documentation.html","page":"Documentation generation","title":"Documentation generation","text":"using Test                          #hide\n@test isfile(\"result.out\")          #hide\n@test result == expected_result     #hide","category":"page"},{"location":"addresses.html#Module-BitStringAddresses","page":"BitString addresses","title":"Module BitStringAddresses","text":"","category":"section"},{"location":"addresses.html","page":"BitString addresses","title":"BitString addresses","text":"This module contains the implementations of BitString and various Fock addresses. The addresses serve as a basis for a Hamiltonian.","category":"page"},{"location":"addresses.html","page":"BitString addresses","title":"BitString addresses","text":"While there are not restrictions on the type of address a Hamiltonian uses, Rimu provides implementations for Bosonic, Fermionic, and mixed Fock States.","category":"page"},{"location":"addresses.html","page":"BitString addresses","title":"BitString addresses","text":"When implementing a new address type, care must be taken to make them space-efficient and stack-allocated - avoid using (heap-allocated) arrays to represent your addresses at all costs!","category":"page"},{"location":"addresses.html#Fock-addresses","page":"BitString addresses","title":"Fock addresses","text":"","category":"section"},{"location":"addresses.html","page":"BitString addresses","title":"BitString addresses","text":"Rimu provides a variety of address implementations that should make it straightforward to implement efficient Hamiltonians. Examples are:","category":"page"},{"location":"addresses.html","page":"BitString addresses","title":"BitString addresses","text":"BoseFS Single-component bosonic Fock state with fixed particle and mode number.\nFermiFS Single-component fermionic Fock state with fixed particle and mode number.\nCompositeFS Multi-component Fock state composed of the above types.\nOccupationNumberFS Single-component bosonic Fock state with a fixed number of modes. The number of particles is not part of the type and can be changed by operators.","category":"page"},{"location":"addresses.html#Fock-address-API","page":"BitString addresses","title":"Fock address API","text":"","category":"section"},{"location":"addresses.html","page":"BitString addresses","title":"BitString addresses","text":"Modules = [BitStringAddresses]\nPages = [\"fockaddress.jl\",\"bosefs.jl\",\"fermifs.jl\",\"multicomponent.jl\",\"occupationnumberfs.jl\"]\nPrivate = false","category":"page"},{"location":"addresses.html#Rimu.BitStringAddresses.AbstractFockAddress","page":"BitString addresses","title":"Rimu.BitStringAddresses.AbstractFockAddress","text":"AbstractFockAddress{N,M}\n\nAbstract type representing a Fock state with N particles and M modes.\n\nSee also SingleComponentFockAddress, CompositeFS, BoseFS, FermiFS.\n\n\n\n\n\n","category":"type"},{"location":"addresses.html#Rimu.BitStringAddresses.BoseFSIndex","page":"BitString addresses","title":"Rimu.BitStringAddresses.BoseFSIndex","text":"BoseFSIndex\n\nStruct used for indexing and performing excitations on a BoseFS.\n\nFields:\n\noccnum: the occupation number.\nmode: the index of the mode.\noffset: the position of the mode in the address. This is the bit offset of the mode when\n\nthe address is represented by a bitstring, and the position in the list when it is  represented by SortedParticleList.\n\n\n\n\n\n","category":"type"},{"location":"addresses.html#Rimu.BitStringAddresses.FermiFSIndex","page":"BitString addresses","title":"Rimu.BitStringAddresses.FermiFSIndex","text":"FermiFSIndex\n\nStruct used for indexing and performing excitations on a FermiFS.\n\nFields:\n\noccnum: the occupation number.\nmode: the index of the mode.\noffset: the position of the mode in the address. This is mode - 1 when the address is represented by a bitstring, and the position in the list when using SortedParticleList.\n\n\n\n\n\n","category":"type"},{"location":"addresses.html#Rimu.BitStringAddresses.OccupiedModeMap","page":"BitString addresses","title":"Rimu.BitStringAddresses.OccupiedModeMap","text":"OccupiedModeMap(addr) <: AbstractVector\n\nGet a map of occupied modes in address as an AbstractVector of indices compatible with excitation - BoseFSIndex or FermiFSIndex.\n\nOccupiedModeMap(addr)[i] contains the index for the i-th occupied mode. This is useful because repeatedly looking for occupied modes with find_occupied_mode can be time-consuming. OccupiedModeMap(addr) is an eager version of the iterator returned by occupied_modes. It is similar to onr but contains more information.\n\nExample\n\njulia> b = BoseFS(10, 0, 0, 0, 2, 0, 1)\nBoseFS{13,7}(10, 0, 0, 0, 2, 0, 1)\n\njulia> mb = OccupiedModeMap(b)\n3-element OccupiedModeMap{7, BoseFSIndex}:\n BoseFSIndex(occnum=10, mode=1, offset=0)\n BoseFSIndex(occnum=2, mode=5, offset=14)\n BoseFSIndex(occnum=1, mode=7, offset=18)\n\njulia> f = FermiFS(1,1,1,1,0,0,1,0,0)\nFermiFS{5,9}(1, 1, 1, 1, 0, 0, 1, 0, 0)\n\njulia> mf = OccupiedModeMap(f)\n5-element OccupiedModeMap{5, FermiFSIndex}:\n FermiFSIndex(occnum=1, mode=1, offset=0)\n FermiFSIndex(occnum=1, mode=2, offset=1)\n FermiFSIndex(occnum=1, mode=3, offset=2)\n FermiFSIndex(occnum=1, mode=4, offset=3)\n FermiFSIndex(occnum=1, mode=7, offset=6)\n\njulia> mf == collect(occupied_modes(f))\ntrue\n\njulia> dot(mf, mb)\n11\n\njulia> dot(mf, 1:20)\n17\n\nSee also dot, SingleComponentFockAddress.\n\n\n\n\n\n","category":"type"},{"location":"addresses.html#Rimu.BitStringAddresses.OccupiedPairsMap","page":"BitString addresses","title":"Rimu.BitStringAddresses.OccupiedPairsMap","text":"OccupiedPairsMap(addr::SingleComponentFockAddress) <: AbstractVector\n\nGet a map of all distinct pairs of indices in addr. Pairs involving multiply-occupied modes are counted once, (including self-pairing). This is useful for cases where identifying pairs of particles for eg. interactions is not well-defined or efficient to do on the fly. This is an eager iterator whose elements are a tuple of particle indices that can be given to excitation\n\nExample\n\njulia> addr = BoseFS(10, 0, 0, 0, 2, 0, 1)\nBoseFS{13,7}(10, 0, 0, 0, 2, 0, 1)\n\njulia> pairs = OccupiedPairsMap(addr)\n5-element OccupiedPairsMap{78, Tuple{BoseFSIndex, BoseFSIndex}}:\n (BoseFSIndex(occnum=10, mode=1, offset=0), BoseFSIndex(occnum=10, mode=1, offset=0))\n (BoseFSIndex(occnum=2, mode=5, offset=14), BoseFSIndex(occnum=2, mode=5, offset=14))\n (BoseFSIndex(occnum=2, mode=5, offset=14), BoseFSIndex(occnum=10, mode=1, offset=0))\n (BoseFSIndex(occnum=1, mode=7, offset=18), BoseFSIndex(occnum=10, mode=1, offset=0))\n (BoseFSIndex(occnum=1, mode=7, offset=18), BoseFSIndex(occnum=2, mode=5, offset=14))\n\njulia> excitation(addr, pairs[2], pairs[4])\n(BoseFS{13,7}(9, 0, 0, 0, 4, 0, 0), 10.954451150103322)\n\nSee also OccupiedModeMap.\n\n\n\n\n\n","category":"type"},{"location":"addresses.html#Rimu.BitStringAddresses.SingleComponentFockAddress","page":"BitString addresses","title":"Rimu.BitStringAddresses.SingleComponentFockAddress","text":"SingleComponentFockAddress{N,M} <: AbstractFockAddress{N,M}\n\nA type representing a single component Fock state with N particles and M modes.\n\nImplemented subtypes: BoseFS, FermiFS.\n\nSupported functionality\n\nfind_mode\nfind_occupied_mode\nnum_occupied_modes\noccupied_modes: Lazy iterator.\nOccupiedModeMap: AbstractVector with eager construction.\nexcitation: Create a new address.\nBoseFSIndex and FermiFSIndex for indexing.\n\nSee also CompositeFS, AbstractFockAddress.\n\n\n\n\n\n","category":"type"},{"location":"addresses.html#Rimu.BitStringAddresses.excitation","page":"BitString addresses","title":"Rimu.BitStringAddresses.excitation","text":"excitation(addr::SingleComponentFockAddress, creations::NTuple, destructions::NTuple)\n\nGenerate an excitation on address addr by applying creations and destructions, which are tuples of the appropriate address indices (i.e. BoseFSIndex for bosons, or FermiFSIndex for fermions).\n\na^_c_1 a^_c_2 ldots a_d_1 a_d_2 ldots mathrmaddrrangle to\nαmathrmnaddrrangle\n\nReturns the new address naddr and the factor α. The value of α is given by the square root of the product of mode occupations before destruction and after creation. If the excitation is illegal, returns an arbitrary address and the value 0.0.\n\nExample\n\njulia> f = FermiFS(1,1,0,0,1,1,1,1)\nFermiFS{6,8}(1, 1, 0, 0, 1, 1, 1, 1)\n\njulia> i, j, k, l = find_mode(f, (3,4,2,5))\n(FermiFSIndex(occnum=0, mode=3, offset=2), FermiFSIndex(occnum=0, mode=4, offset=3), FermiFSIndex(occnum=1, mode=2, offset=1), FermiFSIndex(occnum=1, mode=5, offset=4))\n\njulia> excitation(f, (i,j), (k,l))\n(FermiFS{6,8}(1, 0, 1, 1, 0, 1, 1, 1), -1.0)\n\nSee SingleComponentFockAddress.\n\n\n\n\n\n","category":"function"},{"location":"addresses.html#Rimu.BitStringAddresses.find_mode","page":"BitString addresses","title":"Rimu.BitStringAddresses.find_mode","text":"find_mode(::SingleComponentFockAddress, i)\n\nFind the i-th mode in address. Returns BoseFSIndex for BoseFS, and FermiFSIndex for FermiFS. Can work on a tuple of modes. Does not check bounds.\n\njulia> find_mode(BoseFS(1, 0, 2), 2)\nBoseFSIndex(occnum=0, mode=2, offset=2)\n\njulia> find_mode(FermiFS(1, 1, 1, 0), (2,3))\n(FermiFSIndex(occnum=1, mode=2, offset=1), FermiFSIndex(occnum=1, mode=3, offset=2))\n\nSee SingleComponentFockAddress.\n\n\n\n\n\n","category":"function"},{"location":"addresses.html#Rimu.BitStringAddresses.find_occupied_mode","page":"BitString addresses","title":"Rimu.BitStringAddresses.find_occupied_mode","text":"find_occupied_mode(::SingleComponentFockAddress, k)\nfind_occupied_mode(::BoseFS, k, [n])\n\nFind the k-th occupied mode in address (with at least n particles). Returns BoseFSIndex for BoseFS, and FermiFSIndex for FermiFS. When unsuccessful it returns a zero index.\n\nExample\n\njulia> find_occupied_mode(FermiFS(1, 1, 1, 0), 2)\nFermiFSIndex(occnum=1, mode=2, offset=1)\n\njulia> find_occupied_mode(BoseFS(1, 0, 2), 1)\nBoseFSIndex(occnum=1, mode=1, offset=0)\n\njulia> find_occupied_mode(BoseFS(1, 0, 2), 1, 2)\nBoseFSIndex(occnum=2, mode=3, offset=3)\n\nSee also occupied_modes, OccupiedModeMap, SingleComponentFockAddress.\n\n\n\n\n\n","category":"function"},{"location":"addresses.html#Rimu.BitStringAddresses.num_components-Tuple{AbstractFockAddress}","page":"BitString addresses","title":"Rimu.BitStringAddresses.num_components","text":"num_components(::Type{<:AbstractFockAddress})\nnum_components(::AbstractFockAddress)\n\nNumber of components in address.\n\n\n\n\n\n","category":"method"},{"location":"addresses.html#Rimu.BitStringAddresses.num_modes-Tuple{AbstractFockAddress}","page":"BitString addresses","title":"Rimu.BitStringAddresses.num_modes","text":"num_modes(::Type{<:AbstractFockAddress})\nnum_modes(::AbstractFockAddress)\n\nNumber of modes represented by address.\n\n\n\n\n\n","category":"method"},{"location":"addresses.html#Rimu.BitStringAddresses.num_occupied_modes","page":"BitString addresses","title":"Rimu.BitStringAddresses.num_occupied_modes","text":"num_occupied_modes(::SingleComponentFockAddress)\n\nGet the number of occupied modes in address. Equivalent to length(occupied_modes(address)), or the number of non-zeros in its ONR representation.\n\nExample\n\njulia> num_occupied_modes(BoseFS((1, 0, 2)))\n2\njulia> num_occupied_modes(FermiFS((1, 1, 1, 0)))\n3\n\nSee SingleComponentFockAddress.\n\n\n\n\n\n","category":"function"},{"location":"addresses.html#Rimu.BitStringAddresses.num_particles-Tuple{AbstractFockAddress}","page":"BitString addresses","title":"Rimu.BitStringAddresses.num_particles","text":"num_particles(::Type{<:AbstractFockAddress})\nnum_particles(::AbstractFockAddress)\n\nNumber of particles represented by address.\n\n\n\n\n\n","category":"method"},{"location":"addresses.html#Rimu.BitStringAddresses.occupied_modes","page":"BitString addresses","title":"Rimu.BitStringAddresses.occupied_modes","text":"occupied_modes(::SingleComponentFockAddress)\n\nReturn a lazy iterator over all occupied modes in an address. Iterates over BoseFSIndexs for BoseFS, and over FermiFSIndexs for FermiFS. See OccupiedModeMap for an eager version.\n\nExample\n\njulia> b = BoseFS((1,5,0,4));\n\njulia> foreach(println, occupied_modes(b))\nBoseFSIndex(occnum=1, mode=1, offset=0)\nBoseFSIndex(occnum=5, mode=2, offset=2)\nBoseFSIndex(occnum=4, mode=4, offset=9)\n\njulia> f = FermiFS((1,1,0,1,0,0,1));\n\njulia> foreach(println, occupied_modes(f))\nFermiFSIndex(occnum=1, mode=1, offset=0)\nFermiFSIndex(occnum=1, mode=2, offset=1)\nFermiFSIndex(occnum=1, mode=4, offset=3)\nFermiFSIndex(occnum=1, mode=7, offset=6)\n\nSee also find_occupied_mode, SingleComponentFockAddress.\n\n\n\n\n\n","category":"function"},{"location":"addresses.html#Rimu.BitStringAddresses.onr","page":"BitString addresses","title":"Rimu.BitStringAddresses.onr","text":"occupation_number_representation(fs::SingleComponentFockAddress)\nonr(fs::SingleComponentFockAddress)\n\nCompute and return the occupation number representation of the Fock state fs as an SVector{M}, where M is the number of modes.\n\n\n\n\n\n","category":"function"},{"location":"addresses.html#Rimu.BitStringAddresses.@fs_str-Tuple{Any}","page":"BitString addresses","title":"Rimu.BitStringAddresses.@fs_str","text":"fs\"$(string)\"\n\nParse the compact representation of a Fock state. Useful for copying the printout from a vector to the REPL.\n\nExample\n\njulia> DVec(BoseFS{3,4}(0, 1, 2, 0) => 1)\nDVec{BoseFS{3, 4, BitString{6, 1, UInt8}},Int64} with 1 entry, style = IsStochasticInteger{Int64}()\n  fs\"|0 1 2 0⟩\" => 1\n\njulia> fs\"|0 1 2 0⟩\" => 1 # Copied from above printout\nBoseFS{3,4}(0, 1, 2, 0) => 1\n\njulia> fs\"|1 2 3⟩⊗|0 1 0⟩\" # composite bosonic Fock state\nCompositeFS(\n  BoseFS{6,3}(1, 2, 3),\n  BoseFS{1,3}(0, 1, 0),\n)\n\njulia> fs\"|↑↓↑⟩\" # construct a fermionic Fock state\nCompositeFS(\n  FermiFS{2,3}(1, 0, 1),\n  FermiFS{1,3}(0, 1, 0),\n)\n\njulia> s = fs\"|0 1 2 0⟩{}\" # constructing OccupationNumberFS with default UInt8 container\nOccupationNumberFS{4, UInt8}(0, 1, 2, 0)\n\njulia> [s] # prints out with the signifcant number of bits specified in braces\n1-element Vector{OccupationNumberFS{4, UInt8}}:\n fs\"|0 1 2 0⟩{8}\"\n\nSee also FermiFS, BoseFS, CompositeFS, FermiFS2C, OccupationNumberFS.\n\n\n\n\n\n","category":"macro"},{"location":"addresses.html#Rimu.BitStringAddresses.BoseFS","page":"BitString addresses","title":"Rimu.BitStringAddresses.BoseFS","text":"BoseFS{N,M,S} <: SingleComponentFockAddress\n\nAddress type that represents a Fock state of N spinless bosons in M modes by wrapping a BitString, or a SortedParticleList. Which is wrapped is chosen automatically based on the properties of the address.\n\nConstructors\n\nBoseFS{[N,M]}(val::Integer...): Create BoseFS{N,M} from occupation numbers. This is type-stable if the number of modes M and the number of particles N are provided. Otherwise, M and N are inferred from the arguments.\nBoseFS{[N,M]}(onr): Create BoseFS{N,M} from occupation number representation, see onr. This is efficient if N and M are provided, and onr is a statically-sized collection, such as a Tuple or SVector.\nBoseFS{[N,M]}([M, ]pairs...): Provide the number of modes M and mode => occupation_number pairs. If M is provided as a type parameter, it should not be provided as the first argument.  Useful for creating sparse addresses. pairs can be multiple arguments or an iterator of pairs.\nBoseFS{N,M,S}(bs::S): Unsafe constructor. Does not check whether the number of particles in bs is equal to N.\n@fs_str: Addresses are sometimes printed in a compact manner. This representation can also be used as a constructor. See the last example below.\n\nExamples\n\njulia> BoseFS{6,5}(0, 1, 2, 3, 0)\nBoseFS{6,5}(0, 1, 2, 3, 0)\n\njulia> BoseFS([abs(i - 3) ≤ 1 ? i - 1 : 0 for i in 1:5])\nBoseFS{6,5}(0, 1, 2, 3, 0)\n\njulia> BoseFS(5, 2 => 1, 3 => 2, 4 => 3)\nBoseFS{6,5}(0, 1, 2, 3, 0)\n\njulia> BoseFS{6,5}(i => i - 1 for i in 2:4)\nBoseFS{6,5}(0, 1, 2, 3, 0)\n\njulia> fs\"|0 1 2 3 0⟩\"\nBoseFS{6,5}(0, 1, 2, 3, 0)\n\njulia> fs\"|b 5: 2 3 3 4 4 4⟩\"\nBoseFS{6,5}(0, 1, 2, 3, 0)\n\nSee also: SingleComponentFockAddress, OccupationNumberFS, FermiFS, CompositeFS, FermiFS2C.\n\n\n\n\n\n","category":"type"},{"location":"addresses.html#Rimu.BitStringAddresses.bose_hubbard_interaction-Union{Tuple{BoseFS{<:Any, <:Any, A}}, Tuple{A}} where A<:BitString","page":"BitString addresses","title":"Rimu.BitStringAddresses.bose_hubbard_interaction","text":"bose_hubbard_interaction(address)\n\nReturn Σ_i n_i (n_i-1) for computing the Bose-Hubbard on-site interaction (without the U prefactor.)\n\nExample\n\njulia> Hamiltonians.bose_hubbard_interaction(BoseFS{4,4}((2,1,1,0)))\n2\njulia> Hamiltonians.bose_hubbard_interaction(BoseFS{4,4}((3,0,1,0)))\n6\n\n\n\n\n\n","category":"method"},{"location":"addresses.html#Rimu.BitStringAddresses.hopnextneighbour-Union{Tuple{A}, Tuple{M}, Tuple{N}, Tuple{BoseFS{N, M, A}, Any}} where {N, M, A<:BitString}","page":"BitString addresses","title":"Rimu.BitStringAddresses.hopnextneighbour","text":"new_address, value = hopnextneighbour(add, chosen, boundary_condition)\n\nCompute the new address of a hopping event for the Hubbard model. Returns the new address and the square root of product of occupation numbers of the involved modes multiplied by a term consistent with boundary condition as the value.  The following boundary conditions are supported:\n\n:periodic: hopping over the boundary gives does not change the value.\n:twisted: hopping over the boundary flips the sign of the value.\n:hard_wall: hopping over the boundary gives a value of zero.\nθ <: Number: hopping over the boundary gives a value multiplied by exp(iθ) or exp(iθ) depending on the direction of hopping.\n\nThe off-diagonals are indexed as follows:\n\n(chosen + 1) ÷ 2 selects the hopping site.\nEven chosen indicates a hop to the left.\nOdd chosen indicates a hop to the right.\n\nExample\n\njulia> using Rimu.Hamiltonians: hopnextneighbour\n\njulia> hopnextneighbour(BoseFS(1, 0, 1), 3)\n(BoseFS{2,3}(2, 0, 0), 1.4142135623730951)\n\njulia> hopnextneighbour(BoseFS(1, 0, 1), 4)\n(BoseFS{2,3}(1, 1, 0), 1.0)\n\njulia> hopnextneighbour(BoseFS(1, 0, 1), 3, :twisted)\n(BoseFS{2,3}(2, 0, 0), -1.4142135623730951)\n\njulia> hopnextneighbour(BoseFS(1, 0, 1), 3, :hard_wall)\n(BoseFS{2,3}(2, 0, 0), 0.0)\n\njulia> hopnextneighbour(BoseFS(1, 0, 1), 3, π/4)\n(BoseFS{2,3}(2, 0, 0), 1.0000000000000002 + 1.0im)\n\n\n\n\n\n","category":"method"},{"location":"addresses.html#Rimu.BitStringAddresses.near_uniform-Union{Tuple{Type{<:BoseFS{N, M}}}, Tuple{M}, Tuple{N}} where {N, M}","page":"BitString addresses","title":"Rimu.BitStringAddresses.near_uniform","text":"near_uniform(BoseFS{N,M}) -> BoseFS{N,M}\n\nCreate bosonic Fock state with near uniform occupation number of M modes with a total of N particles.\n\nExamples\n\njulia> near_uniform(BoseFS{7,5})\nBoseFS{7,5}(2, 2, 1, 1, 1)\n\njulia> near_uniform(FermiFS{3,5})\nFermiFS{3,5}(1, 1, 1, 0, 0)\n\n\n\n\n\n","category":"method"},{"location":"addresses.html#Rimu.BitStringAddresses.FermiFS","page":"BitString addresses","title":"Rimu.BitStringAddresses.FermiFS","text":"FermiFS{N,M,S} <: SingleComponentFockAddress\n\nAddress type that represents a Fock state of N fermions of the same spin in M modes by wrapping a BitString, or a SortedParticleList. Which is wrapped is chosen automatically based on the properties of the address.\n\nConstructors\n\nFermiFS{[N,M]}(val::Integer...): Create FermiFS{N,M} from occupation numbers. This is type-stable if the number of modes M and the number of particles N are provided. Otherwise, M and N are inferred from the arguments.\nFermiFS{[N,M]}(onr): Create FermiFS{N,M}  from occupation number representation, see onr. This is efficient if N and M are provided, and onr is a statically-sized collection, such as a Tuple{M} or SVector{M}.\nFermiFS{[N,M]}([M, ]pairs...): Provide the number of modes M and pairs of the form mode => 1. If M is provided as a type parameter, it should not be provided as the first argument.  Useful for creating sparse addresses. pairs can be multiple arguments or an iterator of pairs.\nFermiFS{N,M,S}(bs::S): Unsafe constructor. Does not check whether the number of particles in bs is equal to N, or whether each mode only contains one particle.\n@fs_str: Addresses are sometimes printed in a compact manner. This representation can also be used as a constructor. See the last example below.\n\nExamples\n\njulia> FermiFS{3,5}(0, 1, 1, 1, 0)\nFermiFS{3,5}(0, 1, 1, 1, 0)\n\njulia> FermiFS([abs(i - 3) ≤ 1 for i in 1:5])\nFermiFS{3,5}(0, 1, 1, 1, 0)\n\njulia> FermiFS(5, 2 => 1, 3 => 1, 4 => 1)\nFermiFS{3,5}(0, 1, 1, 1, 0)\n\njulia> FermiFS{3,5}(i => 1 for i in 2:4)\nFermiFS{3,5}(0, 1, 1, 1, 0)\n\njulia> fs\"|⋅↑↑↑⋅⟩\"\nFermiFS{3,5}(0, 1, 1, 1, 0)\n\njulia> fs\"|f 5: 2 3 4⟩\"\nFermiFS{3,5}(0, 1, 1, 1, 0)\n\nSee also: SingleComponentFockAddress, BoseFS, CompositeFS, FermiFS2C, BitString, OccupationNumberFS.\n\n\n\n\n\n","category":"type"},{"location":"addresses.html#Rimu.BitStringAddresses.BoseFS2C","page":"BitString addresses","title":"Rimu.BitStringAddresses.BoseFS2C","text":"BoseFS2C{NA,NB,M,AA,AB} <: AbstractFockAddress\nBoseFS2C(onr_a, onr_b)\n\nAddress type that constructed with two BoseFS{N,M,S}. It represents a Fock state with two components, e.g. two different species of bosons with particle number NA from species S and particle number NB from species B. The number of modes M is expected to be the same for both components.\n\n\n\n\n\n","category":"type"},{"location":"addresses.html#Rimu.BitStringAddresses.CompositeFS","page":"BitString addresses","title":"Rimu.BitStringAddresses.CompositeFS","text":"CompositeFS(addresses::SingleComponentFockAddress...) <: AbstractFockAddress\n\nUsed to encode addresses for multi-component models. All component addresses are expected have the same number of modes.\n\nSee also: BoseFS, FermiFS, SingleComponentFockAddress, num_modes, FermiFS2C, AbstractFockAddress.\n\n\n\n\n\n","category":"type"},{"location":"addresses.html#Rimu.BitStringAddresses.FermiFS2C","page":"BitString addresses","title":"Rimu.BitStringAddresses.FermiFS2C","text":"FermiFS2C <: AbstractFockAddress\nFermiFS2C(onr_a, onr_b)\n\nFock state address with two fermionic (spin) components. Alias for CompositeFS with two FermiFS components. Construct by specifying either two compatible FermiFSs, two onrs, or the number of modes followed by mode => occupation_number pairs, where occupation_number=1 will put a particle in the first component and occupation_number=-1 will put a particle in the second component. See examples below.\n\nExamples\n\njulia> FermiFS2C(FermiFS(1,0,0), FermiFS(0,1,1))\nCompositeFS(\n  FermiFS{1,3}(1, 0, 0),\n  FermiFS{2,3}(0, 1, 1),\n)\n\njulia> FermiFS2C((1,0,0), (0,1,1))\nCompositeFS(\n  FermiFS{1,3}(1, 0, 0),\n  FermiFS{2,3}(0, 1, 1),\n)\n\njulia> FermiFS2C(3, 1 => 1, 2 => -1, 3 => -1)\nCompositeFS(\n  FermiFS{1,3}(1, 0, 0),\n  FermiFS{2,3}(0, 1, 1),\n)\n\njulia> fs\"|↑↓↓⟩\"\nCompositeFS(\n  FermiFS{1,3}(1, 0, 0),\n  FermiFS{2,3}(0, 1, 1),\n)\n\n\n\n\n\n","category":"type"},{"location":"addresses.html#Rimu.BitStringAddresses.time_reverse-Union{Tuple{CompositeFS{2, N, M, T}}, Tuple{T}, Tuple{M}, Tuple{N}} where {N, M, T<:(Tuple{T, T} where T)}","page":"BitString addresses","title":"Rimu.BitStringAddresses.time_reverse","text":"time_reverse(addr)\n\nApply the time-reversal operation on a two-component Fock address that flips all the spins.\n\nRequires each component address to have the same type.\n\n\n\n\n\n","category":"method"},{"location":"addresses.html#Rimu.BitStringAddresses.OccupationNumberFS","page":"BitString addresses","title":"Rimu.BitStringAddresses.OccupationNumberFS","text":"OccupationNumberFS{M,T} <: SingleComponentFockAddress\n\nAddress type that stores the occupation numbers of a single component bosonic Fock state with M modes. The occupation numbers must fit into the type T <: Unsigned. The number of particles is runtime data, and can be retrieved with num_particles(address).\n\nConstructors\n\nOccupationNumberFS(val::Integer...): Construct from occupation numbers. Must be < 256 to fit into UInt8.\nOccupationNumberFS{[M,T]}(onr): Construct from collection onr with M occupation numbers with type T. If unspecified, the type T of the occupation numbers is inferred from the type of the arguments.\nOccupationNumberFS(fs::BoseFS): Construct from BoseFS.\nWith shortform macro @fs_str. Specify the number of significant bits in braces. See example below.\n\nExamples\n\njulia> ofs = OccupationNumberFS(1,2,3)\nOccupationNumberFS{3, UInt8}(1, 2, 3)\n\njulia> ofs == fs\"|1 2 3⟩{8}\"\ntrue\n\njulia> num_particles(ofs)\n6\n\n\n\n\n\n","category":"type"},{"location":"addresses.html#Rimu.BitStringAddresses.excitation-Union{Tuple{T}, Tuple{OccupationNumberFS{<:Any, T}, NTuple{var\"#s61\", Int64} where var\"#s61\", NTuple{var\"#s5\", Int64} where var\"#s5\"}} where T","page":"BitString addresses","title":"Rimu.BitStringAddresses.excitation","text":"excitation(addr::OccupationNumberFS, c::NTuple, d::NTuple)\n→ (nadd, α)\n\nGenerate an excitation on an OccupationNumberFS by applying the creation and destruction operators specified by the tuples of mode numbers c and d to the Fock state addr. The modes are indexed by integers (starting at 1), or by indices of type BoseFSIndex. The value of α is given by the square root of the product of mode occupations before destruction and after creation.\n\nThe number of particles may change by this type of excitation.\n\nExample\n\njulia> s = fs\"|1 2 3⟩{8}\"\nOccupationNumberFS{3, UInt8}(1, 2, 3)\n\njulia> num_particles(s)\n6\n\njulia> es, α = excitation(s, (1,1), (3,))\n(OccupationNumberFS{3, UInt8}(3, 2, 2), 4.242640687119285)\n\njulia> num_particles(es)\n7\n\n\n\n\n\n","category":"method"},{"location":"addresses.html#Internal-representations","page":"BitString addresses","title":"Internal representations","text":"","category":"section"},{"location":"addresses.html","page":"BitString addresses","title":"BitString addresses","text":"The atomic addresses, BoseFS and FermiFS, are implemented as either bitstrings or sorted lists of particles. Using these approaches over an occupation number representation makes the addresses much more space-efficient.","category":"page"},{"location":"addresses.html","page":"BitString addresses","title":"BitString addresses","text":"Therewhile OccupationNumberFS internally uses the occupation number representation,  which allows it to handle excitation operations that change the particle number. This is fast but requires more storage space.","category":"page"},{"location":"addresses.html#Internal-APIs","page":"BitString addresses","title":"Internal APIs","text":"","category":"section"},{"location":"addresses.html","page":"BitString addresses","title":"BitString addresses","text":"Modules = [BitStringAddresses]\nPages = [\"bitstring.jl\", \"sortedparticlelist.jl\"]\nPrivate = false","category":"page"},{"location":"addresses.html#Rimu.BitStringAddresses.BitString","page":"BitString addresses","title":"Rimu.BitStringAddresses.BitString","text":"BitString{B,N,T<:Unsigned}\n\nType for storing bitstrings of static size. Holds B bits in N chunks, where each chunk is of type T.\n\nN is chosen automatically to accommodate B bits as efficiently as possible.\n\nConstructors\n\nBitString{B,N,T}(::SVector{N,T}): unsafe constructor. Does not check for ghost bits.\nBitString{B,N,T}(i::T): as above, but sets i as the rightmost chunk.\nBitString{B}(::Integer): Convert integer to BitString. Integer is truncated to the correct number of bits.\n\n\n\n\n\n","category":"type"},{"location":"addresses.html#Rimu.BitStringAddresses.SortedParticleList","page":"BitString addresses","title":"Rimu.BitStringAddresses.SortedParticleList","text":"SortedParticleList{N,M,T<:Unsigned}\n\nType for storing sparse fock states. Stores the mode number of each particle as an entry with only its mode stored. The entries are always kept sorted.\n\nIterating over SortedParticleLists yields occupied modes as a tuple of occupation number, mode number, and position in list.\n\nConstructors\n\nSortedParticleList{N,M,T}(::SVector{N,T}): unsafe constructor. Does not sort input.\nSortedParticleList(arr::AbstractVector): convert ONR to SortedParticleList\n\n\n\n\n\n","category":"type"},{"location":"addresses.html#Index","page":"BitString addresses","title":"Index","text":"","category":"section"},{"location":"addresses.html","page":"BitString addresses","title":"BitString addresses","text":"Pages   = [\"addresses.md\"]","category":"page"},{"location":"API.html#API","page":"API","title":"API","text":"","category":"section"},{"location":"API.html#Rimu","page":"API","title":"Rimu","text":"","category":"section"},{"location":"API.html","page":"API","title":"API","text":"Modules = [Rimu]","category":"page"},{"location":"API.html#Rimu.Rimu","page":"API","title":"Rimu.Rimu","text":"Rimu\n\nRandom integrators for many-body quantum systems\n\nWelcome to Rimu version 0.13.1-dev. Read the documentation online.\n\n\n\n\n\n","category":"module"},{"location":"API.html#Rimu.PACKAGE_VERSION","page":"API","title":"Rimu.PACKAGE_VERSION","text":"Rimu.PACKAGE_VERSION\n\nConstant that contains the current VersionNumber of Rimu.\n\n\n\n\n\n","category":"constant"},{"location":"API.html#DataFrames.DataFrame-Tuple{Rimu.Report}","page":"API","title":"DataFrames.DataFrame","text":"DataFrame(report::Report)\n\nConvert the Report to a DataFrame. Metadata is added as metadata to the DataFrame.\n\n\n\n\n\n","category":"method"},{"location":"API.html#Rimu.AllOverlaps","page":"API","title":"Rimu.AllOverlaps","text":"AllOverlaps(n_replicas=2; operator=nothing, transform=nothing, vecnorm=true)\n    <: ReplicaStrategy{n_replicas}\n\nRun n_replicas replicas and report overlaps between all pairs of replica vectors. If operator is not nothing, the overlap dot(c1, operator, c2) is reported as well. If operator is a tuple of operators, the overlaps are computed for all operators.\n\nColumn names in the report are of the form c{i}_dot_c{j} for vector-vector overlaps, and c{i}_Op{k}_c{j} for operator overlaps.\n\nSee ProjectorMonteCarloProblem, ReplicaStrategy and AbstractOperator (for an interface for implementing operators).\n\nTransformed Hamiltonians\n\nIf a transformed Hamiltonian G has been passed to ProjectorMonteCarloProblem then overlaps can be calculated by passing the same transformed Hamiltonian to AllOverlaps by setting transform=G. A warning is given if these two Hamiltonians do not match.\n\nImplemented transformations are:\n\nGutzwillerSampling\nGuidingVectorSampling\n\nIn the case of a transformed Hamiltonian the overlaps are defined as follows. For a similarity transformation G of the Hamiltonian (see e.g. GutzwillerSampling.)\n\n    hatG = f hatH f^-1\n\nThe expectation value of an operator hatA is\n\n    langle hatA rangle = langle psi  hatA  psi rangle\n        = fraclangle phi  f^-1 hatA f^-1  phi ranglelangle phi  f^-2  phi rangle\n\nwhere\n\n     phi rangle = f  psi rangle\n\nis the (right) eigenvector of hatG and  psi rangle is an eigenvector of hatH.\n\nFor a K-tuple of input operators (hatA_1  hatA_K), overlaps of langle phi  f^-1 hatA f^-1  phi rangle are reported as c{i}_Op{k}_c{j}. The correct vector-vector overlap langle phi  f^-2  phi rangle is reported last as c{i}_Op{K+1}_c{j}. This is in addition to the bare vector-vector overlap langle phi  f^-2  phi rangle that is reported as c{i}_dot_c{j}.\n\nIn either case the c{i}_dot_c{j} overlap can be omitted with the flag vecnorm=false.\n\n\n\n\n\n","category":"type"},{"location":"API.html#Rimu.ConstantTimeStep","page":"API","title":"Rimu.ConstantTimeStep","text":"ConstantTimeStep <: TimeStepStrategy\n\nKeep time_step constant.\n\n\n\n\n\n","category":"type"},{"location":"API.html#Rimu.DefaultShiftParameters","page":"API","title":"Rimu.DefaultShiftParameters","text":"DefaultShiftParameters\n\nDefault mutable struct for storing the shift parameters.\n\nSee ShiftStrategy, initialise_shift_parameters.\n\n\n\n\n\n","category":"type"},{"location":"API.html#Rimu.DontUpdate","page":"API","title":"Rimu.DontUpdate","text":"DontUpdate(; target_walkers = 1_000) <: ShiftStrategy\n\nDon't update the shift.  Return when target_walkers is reached.\n\nSee ShiftStrategy, ProjectorMonteCarloProblem.\n\n\n\n\n\n","category":"type"},{"location":"API.html#Rimu.DoubleLogProjected","page":"API","title":"Rimu.DoubleLogProjected","text":"DoubleLogProjected(; target, projector, ζ = 0.08, ξ = ζ^2/4) <: ShiftStrategy\n\nStrategy for updating the shift according to the log formula with damping parameter ζ and ξ after projecting onto projector.\n\nS^n+1 = S^n -fracζdτlnleft(fracPΨ^(n+1)PΨ^(n)right)-fracξdτlnleft(fracPΨ^(n+1)texttargetright)\n\nNote that adjusting the keyword maxlength in ProjectorMonteCarloProblem is advised as the default may not be appropriate.\n\nSee ShiftStrategy, ProjectorMonteCarloProblem.\n\n\n\n\n\n","category":"type"},{"location":"API.html#Rimu.DoubleLogSumUpdate","page":"API","title":"Rimu.DoubleLogSumUpdate","text":"DoubleLogSumUpdate(; target_walkers = 1000, ζ = 0.08, ξ = ζ^2/4, α = 1/2) <: ShiftStrategy\n\nStrategy for updating the shift according to the log formula with damping parameters ζ and ξ.\n\nS^n+1 = S^n -fracζdτlnleft(fracN_mathrmw^n+1N_mathrmw^nright)\n- fracξdτlnleft(fracN_mathrmw^n+1N_mathrmw^texttargetright)\n\nwhere N_mathrmw = (1-α)*walkernumber() + α*UniformProjector()⋅ψ computed with walkernumber() and UniformProjector(). When ξ = ζ^2/4 this corresponds to critical damping with a damping time scale T = 2/ζ.\n\nSee ShiftStrategy, ProjectorMonteCarloProblem.\n\n\n\n\n\n","category":"type"},{"location":"API.html#Rimu.DoubleLogUpdate","page":"API","title":"Rimu.DoubleLogUpdate","text":"DoubleLogUpdate(; target_walkers = 1_000, ζ = 0.08, ξ = ζ^2/4) <: ShiftStrategy\n\nStrategy for updating the shift according to the log formula with damping parameter ζ and ξ.\n\nS^n+1 = S^n -fracζdτlnleft(fracΨ_1^n+1Ψ_1^nright)-fracξdτlnleft(fracΨ_1^n+1Ψ_1^texttargetright)\n\nWhen ξ = ζ^2/4 this corresponds to critical damping with a damping time scale T = 2/ζ.\n\nSee ShiftStrategy, ProjectorMonteCarloProblem.\n\n\n\n\n\n","category":"type"},{"location":"API.html#Rimu.DoubleLogUpdateAfterTargetWalkers","page":"API","title":"Rimu.DoubleLogUpdateAfterTargetWalkers","text":"DoubleLogUpdateAfterTargetWalkers(target_walkers = 1_000, ζ = 0.08, ξ = ζ^2/4) <: ShiftStrategy\n\nStrategy for updating the shift: After target_walkers is reached, update the shift according to the log formula with damping parameter ζ and ξ.\n\nSee DoubleLogUpdate, ShiftStrategy, ProjectorMonteCarloProblem.\n\n\n\n\n\n","category":"type"},{"location":"API.html#Rimu.FCIQMC","page":"API","title":"Rimu.FCIQMC","text":"FCIQMC(; kwargs...) <: PMCAlgorithm\n\nAlgorithm for the full configuration interaction quantum Monte Carlo (FCIQMC) method. The default algorithm for ProjectorMonteCarloProblem.\n\nKeyword arguments and defaults:\n\nshift_strategy = DoubleLogUpdate(; targetwalkers = 1_000, ζ = 0.08,   ξ = ζ^2/4): How to update the shift.\ntime_step_strategy = ConstantTimeStep(): Adjust time step or not.\n\nSee also ProjectorMonteCarloProblem, ShiftStrategy, TimeStepStrategy, DoubleLogUpdate, ConstantTimeStep.\n\n\n\n\n\n","category":"type"},{"location":"API.html#Rimu.FciqmcRunStrategy","page":"API","title":"Rimu.FciqmcRunStrategy","text":" FciqmcRunStrategy{T}\n\nAbstract type representing the strategy for running and terminating lomc!(). The type parameter T is relevant for reporting the shift and the norm.\n\nImplemented strategies:\n\nRunTillLastStep\n\nwarning: Warning\nThe use of this strategy is deprecated. Pass the relevant arguments directly to ProjectorMonteCarloProblem or to lomc!() instead.\n\n\n\n\n\n","category":"type"},{"location":"API.html#Rimu.FirstOrderTransitionOperator","page":"API","title":"Rimu.FirstOrderTransitionOperator","text":"FirstOrderTransitionOperator(hamiltonian, shift, time_step) <: AbstractHamiltonian\nFirstOrderTransitionOperator(sp::DefaultShiftParameters, hamiltonian)\n\nFirst order transition operator\n\n𝐓 = 1 + dτ(S - 𝐇)\n\nwhere 𝐇 is the hamiltonian, dτ the time_step and S is the shift.\n\n𝐓 represents the first order expansion of the exponential evolution operator of the imaginary-time Schrödinger equation (Euler step) and repeated application will project out the ground state eigenvector of the hamiltonian.  It is the transition operator used in FCIQMC.\n\n\n\n\n\n","category":"type"},{"location":"API.html#Rimu.GramSchmidt","page":"API","title":"Rimu.GramSchmidt","text":"GramSchmidt{S} <: SpectralStrategy{S}\n\nUse the Gram-Schmidt procedure to orthogonalize the excited states. A total of S spectral states are used in the simulation.\n\n\n\n\n\n","category":"type"},{"location":"API.html#Rimu.LogUpdate","page":"API","title":"Rimu.LogUpdate","text":"LogUpdate(ζ = 0.08) <: ShiftStrategy\n\nStrategy for updating the shift according to the log formula with damping parameter ζ.\n\nS^n+1 = S^n -fracζdτlnleft(fracΨ_1^n+1Ψ_1^nright)\n\nSee ShiftStrategy, ProjectorMonteCarloProblem.\n\n\n\n\n\n","category":"type"},{"location":"API.html#Rimu.LogUpdateAfterTargetWalkers","page":"API","title":"Rimu.LogUpdateAfterTargetWalkers","text":"LogUpdateAfterTargetWalkers(target_walkers = 1_000, ζ = 0.08) <: ShiftStrategy\n\nStrategy for updating the shift: After target_walkers is reached, update the shift according to the log formula with damping parameter ζ.\n\nSee LogUpdate, ShiftStrategy, ProjectorMonteCarloProblem.\n\n\n\n\n\n","category":"type"},{"location":"API.html#Rimu.MultiScalar","page":"API","title":"Rimu.MultiScalar","text":"MultiScalar\n\nWrapper over a tuple that supports +, *, min, and max. Used with MPI communication because SVectors are treated as arrays by MPI.Allreduce and Tuples do not support scalar operations.\n\nExample\n\nSuppose you want to compute the sum of a vector dv and also get the number of positive elements it has in a single pass. You can use MultiScalar:\n\njulia> dv = DVec(:a => 1, :b => -2, :c => 1);\n\njulia> s, p = mapreduce(+, values(dv)) do v\n    Rimu.MultiScalar(v, Int(sign(v) == 1))\nend;\n\njulia> s, p\n(0, 2)\n\nThis will work with MPIData.\n\nNote that only MultiScalars with the same types can be operated on. This is a feature, as it forces type stability.\n\n\n\n\n\n","category":"type"},{"location":"API.html#Rimu.NoStats","page":"API","title":"Rimu.NoStats","text":"NoStats(N=1) <: ReplicaStrategy{N}\n\nThe default ReplicaStrategy. N replicas are run, but no statistics are collected.\n\nSee also ProjectorMonteCarloProblem.\n\n\n\n\n\n","category":"type"},{"location":"API.html#Rimu.PMCAlgorithm","page":"API","title":"Rimu.PMCAlgorithm","text":"PMCAlgorithm\n\nAbstract type for projector Monte Carlo algorithms.\n\nSee ProjectorMonteCarloProblem, FCIQMC.\n\n\n\n\n\n","category":"type"},{"location":"API.html#Rimu.PMCSimulation","page":"API","title":"Rimu.PMCSimulation","text":"PMCSimulation\n\nHolds the state and the results of a projector quantum Monte Carlo (PMC) simulation. Is returned by init(::ProjectorMonteCarloProblem) and solved with solve!(::PMCSimulation).\n\nObtain the results of a simulation sm as a DataFrame with DataFrame(sm).\n\nSee also state_vectors, ProjectorMonteCarloProblem, init, solve!.\n\n\n\n\n\n","category":"type"},{"location":"API.html#Rimu.PostStepStrategy","page":"API","title":"Rimu.PostStepStrategy","text":"PostStepStrategy\n\nSubtypes of PostStepStrategy can be used to perform arbitrary computation on a single state after an FCIQMC step is finished and report the results.\n\nImplemented strategies:\n\nProjectedEnergy\nProjector\nSignCoherence\nWalkerLoneliness\nTimer\n\nNote: A tuple of multiple strategies can be passed to ProjectorMonteCarloProblem. In that case, all reported column names must be distinct.\n\nInterface:\n\nA subtype of this type must implement post_step_action(::PostStepStrategy, ::SingleState, step::Int).\n\n\n\n\n\n","category":"type"},{"location":"API.html#Rimu.ProjectedEnergy","page":"API","title":"Rimu.ProjectedEnergy","text":"ProjectedEnergy(hamiltonian, projector; hproj=:hproj, vproj=:vproj) <: PostStepStrategy\n\nAfter every step, compute hproj = dot(projector, hamiltonian, dv) and vproj = dot(projector, dv), where dv is the instantaneous coefficient vector.  projector can be an AbstractDVec, or an AbstractProjector.\n\nReports to columns hproj and vproj, which can be used to compute projective energy, e.g. with projected_energy. The keyword arguments hproj and vproj can be used to change the names of these columns. This can be used to make the names unique when computing projected energies with different projectors in the same run.\n\nSee also projected_energy, ratio_of_means, mixed_estimator, and PostStepStrategy.\n\n\n\n\n\n","category":"type"},{"location":"API.html#Rimu.Projector","page":"API","title":"Rimu.Projector","text":"Projector(name=projector) <: PostStepStrategy\n\nAfter each step, compute dot(projector, dv) and report it in the DataFrame under name. projector can be an AbstractDVec, or an AbstractProjector.\n\n\n\n\n\n","category":"type"},{"location":"API.html#Rimu.ProjectorMonteCarloProblem","page":"API","title":"Rimu.ProjectorMonteCarloProblem","text":"ProjectorMonteCarloProblem(hamiltonian::AbstractHamiltonian; kwargs...)\n\nDefines a problem to be solved by projector quantum Monte Carlo (QMC) methods, such as the the FCIQMC algorithm.\n\nCommon keyword arguments and defaults:\n\ntime_step = 0.01: Initial time step size.\nlast_step = 100: Controls the number of steps.\ntarget_walkers = 1_000: Target for the 1-norm of the coefficient vector.\nstart_at = starting_address(hamiltonian): Define the initial state vector(s).   An r  s matrix of state vectors can be passed where r is the   number of replicas and s the number of spectral states. See also   default_starting_vector.\nstyle = IsDynamicSemistochastic(): The StochasticStyle of the simulation.\ninitiator = false: Whether to use initiators. Can be true, false, or a valid   InitiatorRule.\nthreading: Default is to use multithreading and/or MPI if available. Set to true to force PDVec for the starting vector, false for serial computation; may be overridden by start_at.\nreporting_strategy = ReportDFAndInfo(): How and when to report results, see ReportingStrategy.\npost_step_strategy = (): Extract observables (e.g. ProjectedEnergy), see PostStepStrategy.\nn_replicas = 1: Number of synchronised independent simulations.\nreplica_strategy = NoStats(n_replicas): Which results to report from replica simulations, see ReplicaStrategy.\n\nExample\n\njulia> hamiltonian = HubbardReal1D(BoseFS(1,2,3));\n\njulia> problem = ProjectorMonteCarloProblem(hamiltonian; target_walkers = 500, last_step = 100);\n\njulia> simulation = solve(problem);\n\njulia> simulation.success[]\ntrue\n\njulia> size(DataFrame(simulation))\n(100, 9)\n\nFurther keyword arguments:\n\nstarting_step = 1: Starting step of the simulation.\nwalltime = Inf: Maximum time allowed for the simulation.\nsimulation_plan = SimulationPlan(; starting_step, last_step, walltime): Defines the   duration of the simulation. Takes precedence over last_step and walltime.\nζ = 0.08: Damping parameter for the shift update.\nξ = ζ^2/4: Forcing parameter for the shift update.\nshift_strategy = DoubleLogUpdate(; target_walkers, ζ, ξ): How to update the shift,   see ShiftStrategy.\ntime_step_strategy = ConstantTimeStep(): Adjust time step or not, see   TimeStepStrategy.\nalgorithm = FCIQMC(; shift_strategy, time_step_strategy): The algorithm to use.   Currenlty only FCIQMC is implemented.\nshift: Initial shift value or collection of shift values. Determined by default from the   Hamiltonian and the starting vectors.\ninitial_shift_parameters: Initial shift parameters or collection of initial shift   parameters. Overrides shift if provided.\nmaxlength = 2 * target_walkers + 100: Maximum length of the vectors.\ndisplay_name = \"PMCSimulation\": Name displayed in progress bar (via ProgressLogging).\nmetadata: User-supplied metadata to be added to the report. Must be an iterable of pairs or a NamedTuple, e.g. metadata = (\"key1\" => \"value1\", \"key2\" => \"value2\"). All metadata is converted to strings.\nrandom_seed = true: Provide and store a seed for the random number generator. If set to   true, a random seed is generated. If set to number, this number is used as the seed.   The seed is used by solve such that solveing the problem twice will yield identical   results. If set to false, no seed is used and results are not reproducible.\n\nSee also init, solve.\n\n\n\n\n\n","category":"type"},{"location":"API.html#Rimu.ReplicaState","page":"API","title":"Rimu.ReplicaState","text":"ReplicaState <: AbstractMatrix{SingleState}\n\nHolds information about multiple replicas of SpectralStates.\n\nIndexing the ReplicaState state[i, j] returns a SingleState from the ith replica and jth spectral state.\n\nSee also ReplicaStrategy, SpectralState, SingleState, PMCSimulation.\n\n\n\n\n\n","category":"type"},{"location":"API.html#Rimu.ReplicaStrategy","page":"API","title":"Rimu.ReplicaStrategy","text":"ReplicaStrategy{N}\n\nSupertype for strategies that can be passed to ProjectorMonteCarloProblem and control how many replicas are used, and what information is computed and returned. The number of replicas is N.\n\nConcrete implementations\n\nNoStats: run (possibly one) replica(s), but don't report any additional info.\nAllOverlaps: report overlaps between all pairs of replica vectors.\n\nInterface\n\nA subtype of ReplicaStrategy{N} must implement the following function:\n\nRimu.replica_stats - return a tuple of Strings or Symbols of names for replica statistics and a tuple of the values. These will be reported to the DataFrame returned by ProjectorMonteCarloProblem.\n\n\n\n\n\n","category":"type"},{"location":"API.html#Rimu.Report","page":"API","title":"Rimu.Report","text":"Report()\nReport(df::DataFrame)\n\nInternal structure that holds the temporary reported values as well as metadata. It can be converted to a DataFrame with DataFrame(report::Report).\n\nSee report!, report_metadata!, get_metadata.\n\n\n\n\n\n","category":"type"},{"location":"API.html#Rimu.ReportDFAndInfo","page":"API","title":"Rimu.ReportDFAndInfo","text":"ReportDFAndInfo(; reporting_interval=1, info_interval=100, io=stdout, writeinfo=false) <: ReportingStrategy\n\nThe default ReportingStrategy. Report every reporting_intervalth step to a DataFrame and write info message to io every info_intervalth reported step (unless writeinfo == false). The flag writeinfo is useful for controlling info messages in MPI codes, e.g. by setting writeinfo =is_mpi_root().\n\n\n\n\n\n","category":"type"},{"location":"API.html#Rimu.ReportToFile","page":"API","title":"Rimu.ReportToFile","text":"ReportToFile(; kwargs...) <: ReportingStrategy\n\nReportingStrategy that writes the report directly to a file in the Arrow format. Useful when dealing with long jobs or large numbers of replicas, when the report can incur a significant memory cost.\n\nThe arrow file can be read back in with load_df(filename) or using Arrow; Arrow.Table(filename).\n\nKeyword arguments\n\nfilename = \"out.arrow\": the file to report to. If the file already exists, a new file is created.\nreporting_interval = 1: interval between simulation steps that are reported.\nchunk_size = 1000: the size of each chunk that is written to the file. A DataFrame of this size is collected in memory and written to disk. When saving, an info message is also printed to io.\nsave_if =is_mpi_root(): if this value is true, save the report, otherwise ignore it.\nreturn_df = false: if this value is true, read the file and return the data frame at the end of computation. Otherwise, an empty DataFrame is returned.\nio = stdout: The IO to print messages to. Set to devnull if you don't want to see messages printed out.\ncompress = :zstd: compression algorithm to use. Can be :zstd, :lz4 or nothing.\n\nSee also load_df and save_df.\n\n\n\n\n\n","category":"type"},{"location":"API.html#Rimu.ReportingStrategy","page":"API","title":"Rimu.ReportingStrategy","text":"ReportingStrategy\n\nAbstract type for strategies for reporting data in a DataFrame with report!().\n\nImplemented strategies:\n\nReportDFAndInfo\nReportToFile\n\nInterface:\n\nA ReportingStrategy can define any of the following:\n\nrefine_reporting_strategy\nreport!\nreport_after_step!\nfinalize_report!\nreporting_interval\n\n\n\n\n\n","category":"type"},{"location":"API.html#Rimu.RunTillLastStep","page":"API","title":"Rimu.RunTillLastStep","text":"RunTillLastStep(step::Int = 0 # number of current/starting timestep\n             laststep::Int = 100 # number of final timestep\n             shiftMode::Bool = false # whether to adjust shift\n             shift = 0.0 # starting/current value of shift\n             dτ::Float64 = 0.01 # current value of time step\n) <: FciqmcRunStrategy\n\nParameters for running lomc!() for a fixed number of time steps. For alternative strategies, see FciqmcRunStrategy.\n\nwarning: Warning\nThe use of this strategy is deprecated. Pass the relevant arguments directly to ProjectorMonteCarloProblem or to lomc!() instead.\n\n\n\n\n\n","category":"type"},{"location":"API.html#Rimu.ShiftStrategy","page":"API","title":"Rimu.ShiftStrategy","text":"ShiftStrategy\n\nAbstract type for defining the strategy for controlling the norm, potentially by updating the shift. Passed as a parameter to ProjectorMonteCarloProblem or to FCIQMC.\n\nImplemented strategies:\n\nDontUpdate\nDoubleLogUpdate - default in ProjectorMonteCarloProblem()\nLogUpdate\nLogUpdateAfterTargetWalkers - FCIQMC standard\nDoubleLogUpdateAfterTargetWalkers\n\nExtended help\n\nInternally To implement a custom strategy, define a new subtype of Rimu.ShiftStrategy and implement methods for:\n\nRimu.update_shift_parameters! - to update the shift_parameters\nRimu.initialise_shift_parameters - (optional) to initialise and construct a   custom implementation of the shift_parameters. The default implementation is   Rimu.DefaultShiftParameters.\n\n\n\n\n\n","category":"type"},{"location":"API.html#Rimu.SignCoherence","page":"API","title":"Rimu.SignCoherence","text":"SignCoherence(reference[; name=:coherence]) <: PostStepStrategy\n\nAfter each step, compute the proportion of configurations that have the same sign as they do in the reference_dvec. Reports to a column named name, which defaults to coherence.\n\n\n\n\n\n","category":"type"},{"location":"API.html#Rimu.SimulationPlan","page":"API","title":"Rimu.SimulationPlan","text":"SimulationPlan(; starting_step = 1, last_step = 100, walltime = Inf)\n\nDefines the duration of the simulation. The simulation ends when the last_step is reached or the walltime is exceeded.\n\nSee ProjectorMonteCarloProblem, PMCSimulation.\n\n\n\n\n\n","category":"type"},{"location":"API.html#Rimu.SingleParticleDensity","page":"API","title":"Rimu.SingleParticleDensity","text":"SingleParticleDensity(; save_every=1, component) <: PostStepStrategy\n\nPostStepStrategy  to  compute the diagonal single_particle_density. It records a Tuple with the same eltype as the vector.\n\nComputing the density at every time step can be expensive. This cost can be reduced by setting the save_every argument to a higher value. If the value is set, a vector of zeros is recorded when the saving is skipped.\n\nIf the address type has multiple components, the component argument can be used to compute the density on a per-component basis.\n\nThe density is not normalized, and must be divided by the vector norm(⋅,2) squared.\n\nSee also\n\nsingle_particle_density\nDensityMatrixDiagonal\n\n\n\n\n\n","category":"type"},{"location":"API.html#Rimu.SingleState","page":"API","title":"Rimu.SingleState","text":"SingleState(hamiltonian, algorithm, v, wm, pnorm, params, id)\n\nStruct that holds a single state vector and all information needed for an independent run of the algorithm. Can be advanced a step forward with advance!.\n\nSee also SpectralState, SpectralStrategy, ReplicaState, ReplicaStrategy, replica_stats, PMCSimulation.\n\n\n\n\n\n","category":"type"},{"location":"API.html#Rimu.SpectralState","page":"API","title":"Rimu.SpectralState","text":"SpectralState <: AbstractVector{SingleState}\n\nHolds one or several SingleStates representing the ground state and excited states of a single replica.\n\nIndexing the SpectralState state[i] returns the ith SingleState.\n\nSee also SpectralStrategy, ReplicaState, SingleState, PMCSimulation.\n\n\n\n\n\n","category":"type"},{"location":"API.html#Rimu.SpectralStrategy","page":"API","title":"Rimu.SpectralStrategy","text":"SpectralStrategy{S}\n\nAbstract type for spectral strategies. The spectral strategy is used to control the number of spectral states used in the simulation.\n\n\n\n\n\n","category":"type"},{"location":"API.html#Rimu.StateVectors","page":"API","title":"Rimu.StateVectors","text":"StateVectors <: AbstractMatrix{V}\n\nRepresents a matrix of configuration vectors from the state. Construct this object with state_vectors.\n\n\n\n\n\n","category":"type"},{"location":"API.html#Rimu.TimeStepStrategy","page":"API","title":"Rimu.TimeStepStrategy","text":"TimeStepStrategy\n\nAbstract type for strategies for updating the time step with update_time_step(). Implemented strategies:\n\nConstantTimeStep\n\n\n\n\n\n","category":"type"},{"location":"API.html#Rimu.Timer","page":"API","title":"Rimu.Timer","text":"Timer <: PostStepStrategy\n\nRecord current time after every step. See Base.Libc.time for information on what time is recorded.\n\n\n\n\n\n","category":"type"},{"location":"API.html#Rimu.WalkerLoneliness","page":"API","title":"Rimu.WalkerLoneliness","text":"WalkerLoneliness(threshold=1) <: PostStepStrategy\n\nAfter each step, compute the proportion of configurations that are occupied by at most threshold walkers. Reports to a column named loneliness.\n\n\n\n\n\n","category":"type"},{"location":"API.html#CommonSolve.init-Tuple{ProjectorMonteCarloProblem}","page":"API","title":"CommonSolve.init","text":"init(problem::ProjectorMonteCarloProblem; copy_vectors=true)::PMCSimulation\n\nInitialise a Rimu.PMCSimulation.\n\nSee also ProjectorMonteCarloProblem, solve!, solve, step!, Rimu.PMCSimulation.\n\n\n\n\n\n","category":"method"},{"location":"API.html#CommonSolve.solve","page":"API","title":"CommonSolve.solve","text":"solve(::ProjectorMonteCarloProblem)::PMCSimulation\n\nInitialize and solve a ProjectorMonteCarloProblem until the last step is completed or the walltime limit is reached.\n\nSee also init, solve!, step!, Rimu.PMCSimulation, and solve(::ExactDiagonalizationProblem).\n\n\n\n\n\n","category":"function"},{"location":"API.html#CommonSolve.solve!-Tuple{Rimu.PMCSimulation}","page":"API","title":"CommonSolve.solve!","text":"solve!(sm::PMCSimulation; kwargs...)::PMCSimulation\n\nSolve a Rimu.PMCSimulation until the last step is completed or the walltime limit is reached.\n\nTo continue a previously completed simulation, set a new last_step or walltime using the keyword arguments. Optionally, changes can be made to the replica_strategy, the post_step_strategy, or the reporting_strategy.\n\nOptional keyword arguments:\n\nlast_step = nothing: Set the last step to a new value and continue the simulation.\nwalltime = nothing: Set the allowed walltime to a new value and continue the simulation.\nreset_time = false: Reset the elapsed_time counter and continue the simulation.\nempty_report = false: Empty the report before continuing the simulation.\nreplica_strategy = nothing: Change the replica strategy. Requires the number of replicas   to match the number of replicas in the simulation sm. Implies empty_report = true.\npost_step_strategy = nothing: Change the post-step strategy. Implies   empty_report = true.\nreporting_strategy = nothing: Change the reporting strategy. Implies   empty_report = true.\nmetadata = nothing: Add metadata to the report.\n\nSee also ProjectorMonteCarloProblem, init, solve, step!, Rimu.PMCSimulation.\n\n\n\n\n\n","category":"method"},{"location":"API.html#CommonSolve.step!-Tuple{Rimu.PMCSimulation}","page":"API","title":"CommonSolve.step!","text":"step!(sm::PMCSimulation)::PMCSimulation\n\nAdvance the simulation by one step.\n\nCalling solve! will advance the simulation until the last step or the walltime is exceeded. When completing the simulation without calling solve!, the simulation report needs to be finalised by calling Rimu.finalize_report!.\n\nSee also ProjectorMonteCarloProblem, init, solve!, solve, Rimu.PMCSimulation.\n\n\n\n\n\n","category":"method"},{"location":"API.html#Rimu._n_walkers-Tuple{Any, Any}","page":"API","title":"Rimu._n_walkers","text":"_n_walkers(v, shift_strategy)\n\nReturns an estimate of the expected number of walkers as an integer.\n\n\n\n\n\n","category":"method"},{"location":"API.html#Rimu.advance!-Tuple{FCIQMC, Any, Rimu.ReplicaState, Rimu.SingleState}","page":"API","title":"Rimu.advance!","text":"advance!(algorithm::PMCAlgorithm, report::Report, state::ReplicaState, s_state::SingleState)\n\nAdvance the s_state by one step according to the algorithm. The state is used only to access the various strategies involved. Steps, stats, and computed quantities are written to the report.\n\nReturns true if the step was successful and calculation should proceed, false when it should terminate.\n\nSee also solve!, step!.\n\n\n\n\n\n","category":"method"},{"location":"API.html#Rimu.all_overlaps-Union{Tuple{B}, Tuple{N}, Tuple{Union{Tuple, Vector}, NTuple{N, AbstractDVec}, Any, Val{B}}} where {N, B}","page":"API","title":"Rimu.all_overlaps","text":"all_overlaps(operators, vectors, working_memories, vecnorm=true)\n\nGet all overlaps between vectors and operators. This function is overloaded for MPIData. The flag vecnorm can disable the vector-vector overlap c{i}_dot_c{j}.\n\n\n\n\n\n","category":"method"},{"location":"API.html#Rimu.check_transform-Tuple{AllOverlaps, AbstractHamiltonian}","page":"API","title":"Rimu.check_transform","text":"check_transform(r::AllOverlaps, ham)\n\nCheck that the transformation provided to r::AllOverlaps matches the given Hamiltonian ham. Used as a sanity check before starting main ProjectorMonteCarloProblem loop.\n\n\n\n\n\n","category":"method"},{"location":"API.html#Rimu.clean_and_warn_if_others_present-Union{Tuple{names}, Tuple{NamedTuple{names}, Any}} where names","page":"API","title":"Rimu.clean_and_warn_if_others_present","text":"clean_and_warn_if_others_present(nt::NamedTuple{names}, keys) where {names}\n\nRemove keys from a NamedTuple that are not in keys and issue a warning if they are present.\n\n\n\n\n\n","category":"method"},{"location":"API.html#Rimu.default_logger-Tuple","page":"API","title":"Rimu.default_logger","text":"default_logger(args...)\n\nReset the global_logger to Logging.ConsoleLogger. Undoes the effect of smart_logger. Arguments are passed on to Logging.ConsoleLogger.\n\n\n\n\n\n","category":"method"},{"location":"API.html#Rimu.default_starting_vector-Tuple{AbstractHamiltonian}","page":"API","title":"Rimu.default_starting_vector","text":"default_starting_vector(hamiltonian::AbstractHamiltonian; kwargs...)\ndefault_starting_vector(\n    address=starting_address(hamiltonian);\n    style=IsDynamicSemistochastic(),\n    initiator=NonInitiator(),\n    threading=nothing,\n    population=10\n)\n\nReturn a default starting vector for ProjectorMonteCarloProblem. The default choice for the starting vector is\n\nv = PDVec(address => population; style, initiator)\n\nif threading is available, or otherwise\n\nv = DVec(address => population; style)\n\nif initiator == NonInitiator(), and\n\nv = InitiatorDVec(address => population; style, initiator)\n\nif not. See PDVec, DVec, InitiatorDVec, StochasticStyle, and InitiatorRule.\n\n\n\n\n\n","category":"method"},{"location":"API.html#Rimu.delete_and_warn_if_present-Union{Tuple{names}, Tuple{NamedTuple{names}, Any}} where names","page":"API","title":"Rimu.delete_and_warn_if_present","text":"delete_and_warn_if_present(nt::NamedTuple, keys)\n\nDelete keys from a NamedTuple and issue a warning if they are present. This is useful for removing unused keyword arguments.\n\n\n\n\n\n","category":"method"},{"location":"API.html#Rimu.finalize_report!-Tuple{ReportingStrategy, Any}","page":"API","title":"Rimu.finalize_report!","text":"finalize_report!(::ReportingStrategy, report)\n\nFinalize the report. This function is called after all steps in solve! have finished.\n\n\n\n\n\n","category":"method"},{"location":"API.html#Rimu.get_metadata-Tuple{Rimu.Report, Any}","page":"API","title":"Rimu.get_metadata","text":"get_metadata(report::Report, key)\n\nGet metadata key from report. key is converted to a String.\n\nSee also report_metadata!, Report, report!.\n\n\n\n\n\n","category":"method"},{"location":"API.html#Rimu.initialise_shift_parameters","page":"API","title":"Rimu.initialise_shift_parameters","text":"initialise_shift_parameters(s::ShiftStrategy, shift, norm, time_step, counter=0, shift_mode=false)\n\nInitiatlise a struct to store the shift parameters.\n\nSee ShiftStrategy, update_shift_parameters!, DefaultShiftParameters.\n\n\n\n\n\n","category":"function"},{"location":"API.html#Rimu.lomc!-Tuple{Any, Any}","page":"API","title":"Rimu.lomc!","text":"lomc!(ham::AbstractHamiltonian, [v]; kwargs...) -> df, state\nlomc!(state::ReplicaState, [df]; kwargs...) -> df, state\n\nLinear operator Monte Carlo: Perform a projector quantum Monte Carlo simulation for determining the lowest eigenvalue of ham. The details of the simulation are controlled by the optional keyword arguments and by the type of the optional starting vector v. Alternatively, a ReplicaState can be passed in to continue a previous simulation.\n\nCommon keyword arguments and defaults:\n\nlaststep = 100 - controls the number of steps.\ndτ = 0.01 - time step.\ntargetwalkers = 1000 - target for the 1-norm of the coefficient vector.\naddress = starting_address(ham) - set starting address for default v and shift.\nstyle = IsStochasticInteger() - set StochasticStyle for default v; unused if v is specified.\ninitiator = NonInitiator() - set InitiatorRule for default v; unused if v is specified.\nthreading - default is to use multithreading and MPI if multiple threads are available. Set to true to force PDVec for the starting vector, false for serial computation; unused if v is specified.\nshift = diagonal_element(ham, address) - initial value of shift.\npost_step_strategy::NTuple{N,<:PostStepStrategy} = () - extract observables (e.g. ProjectedEnergy), see PostStepStrategy. (Deprecated: post_step is accepted as an alias for post_step_strategy.)\nreplica_strategy::ReplicaStrategy = NoStats(1) - run several synchronised simulations, see ReplicaStrategy. (Deprecated: replica is accepted as an alias for replica_strategy.)\nreporting_strategy::ReportingStrategy = ReportDFAndInfo() - how and when to report results, see ReportingStrategy. (Deprecated: r_strat is accepted as an alias for reporting_strategy.)\nname = \"lomc!\" - name displayed in progress bar (via ProgressLogging)\nmetadata - user-supplied metadata to be added to the report df. Must be an iterable of pairs or a NamedTuple, e.g. metadata = (\"key1\" => \"value1\", \"key2\" => \"value2\"). All metadata is converted to strings.\n\nSome metadata is automatically added to the report df including Rimu.PACKAGE_VERSION and data from state.\n\nReturn values\n\nlomc! returns a named tuple with the following fields:\n\ndf: a DataFrame with all statistics being reported.\nstate: a ReplicaState that can be used for continuations.\n\nExample\n\njulia> address = BoseFS(1,2,3);\n\njulia> hamiltonian = HubbardReal1D(address);\n\njulia> df1, state = lomc!(hamiltonian; targetwalkers=500, laststep=100);\n\njulia> df2, _ = lomc!(state, df1; laststep=200, metadata=(;info=\"cont\")); # Continuation run\n\njulia> size(df1)\n(100, 9)\n\njulia> size(df2)\n(200, 9)\n\njulia> using DataFrames; metadata(df2, \"info\") # retrieve custom metadata\n\"cont\"\n\njulia> metadata(df2, \"hamiltonian\") # some metadata is automatically added\n\"HubbardReal1D(fs\\\"|1 2 3⟩\\\"; u=1.0, t=1.0)\"\n\nFurther keyword arguments and defaults:\n\nτ_strat::TimeStepStrategy = ConstantTimeStep() - adjust time step or not, see TimeStepStrategy\ns_strat::ShiftStrategy = DoubleLogUpdate(; target_walkers=targetwalkers, ζ = 0.08, ξ = ζ^2/4) - how to update the shift, see ShiftStrategy.\nmaxlength = 2 * s_strat.target_walkers + 100 - upper limit on the length of v; when reached, lomc! will abort\nwm - working memory for re-use in subsequent calculations; is mutated.\ndf = DataFrame() - when called with AbstractHamiltonian argument, a DataFrame can be passed for merging with the report df.\n\nThe default choice for the starting vector is v = default_starting_vector(; address, style, threading, initiator). See default_starting_vector, PDVec, DVec, StochasticStyle, and InitiatorRule.\n\nwarning: Warning\nThe use of this lomc! is deprecated. Use ProjectorMonteCarloProblem and solve instead.\n\n\n\n\n\n","category":"method"},{"location":"API.html#Rimu.num_replicas-Union{Tuple{ReplicaStrategy{N}}, Tuple{N}} where N","page":"API","title":"Rimu.num_replicas","text":"num_replicas(state_or_strategy)\n\nReturn the number of replicas used in the simulation.\n\n\n\n\n\n","category":"method"},{"location":"API.html#Rimu.num_spectral_states-Union{Tuple{Rimu.SpectralStrategy{S}}, Tuple{S}} where S","page":"API","title":"Rimu.num_spectral_states","text":"num_spectral_states(state_or_strategy)\n\nReturn the number of spectral states used in the simulation.\n\n\n\n\n\n","category":"method"},{"location":"API.html#Rimu.post_step_action","page":"API","title":"Rimu.post_step_action","text":"post_step_action(::PostStepStrategy, ::SingleState, step) -> kvpairs\n\nCompute statistics after FCIQMC step. Should return a tuple of :key => value pairs. This function is only called every reporting_interval steps, as defined by the ReportingStrategy.\n\nSee also PostStepStrategy, ReportingStrategy.\n\n\n\n\n\n","category":"function"},{"location":"API.html#Rimu.refine_reporting_strategy-Tuple{ReportingStrategy}","page":"API","title":"Rimu.refine_reporting_strategy","text":"refine_reporting_strategy(reporting_strategy::ReportingStrategy) -> reporting_strategy\n\nInitialize the reporting strategy. This can be used to set up filenames or other attributes that need to be unique for a run of FCIQMC.\n\n\n\n\n\n","category":"method"},{"location":"API.html#Rimu.replace_keys-Tuple{NamedTuple, Any}","page":"API","title":"Rimu.replace_keys","text":"replace_keys(nt::NamedTuple, (:old1 => :new1, :old2 => :new2, ...))\n\nReplace keys in a NamedTuple with new keys. This is useful for renaming fields in a NamedTuple. Ignores keys that are not present in the NamedTuple.\n\n\n\n\n\n","category":"method"},{"location":"API.html#Rimu.replica_stats","page":"API","title":"Rimu.replica_stats","text":"replica_stats(RS::ReplicaStrategy{N}, spectral_states::NTuple{N,SingleState}) -> (names, values)\n\nReturn the names and values of statistics related to N replica states consistent with the ReplicaStrategy RS. names should be a tuple of Symbols or Strings and values should be a tuple of the same length. This function will be called every reporting_interval steps from ProjectorMonteCarloProblem, or once per time step if reporting_interval is not defined.\n\nPart of the ReplicaStrategy interface. See also SingleState.\n\n\n\n\n\n","category":"function"},{"location":"API.html#Rimu.report!-Tuple{ReportingStrategy, Any, Vararg{Any}}","page":"API","title":"Rimu.report!","text":" report!(::ReportingStrategy, step, report::Report, keys, values, id=\"\")\n report!(::ReportingStrategy, step, report::Report, nt, id=\"\")\n\nReport keys and values to report, which will be converted to a DataFrame before ProjectorMonteCarloProblem exits. Alternatively, a nt::NamedTuple can be passed in place of keys and values. If id is specified, it is appended to all keys. This is used to differentiate between values reported by different replicas.\n\nTo overload this function for a new ReportingStrategy, overload report!(::ReportingStrategy, step, args...) and apply the report by calling report!(args...).\n\n\n\n\n\n","category":"method"},{"location":"API.html#Rimu.report!-Tuple{Rimu.Report, DataFrame}","page":"API","title":"Rimu.report!","text":"report!(report::Report, df::DataFrame)\n\nConvert the DataFrame df to a Report. This function does not copy the data.\n\n\n\n\n\n","category":"method"},{"location":"API.html#Rimu.report!-Tuple{Rimu.Report, Union{AbstractString, Symbol}, Any}","page":"API","title":"Rimu.report!","text":"report!(report, keys, values, id=\"\")\nreport!(report, pairs, id=\"\")\n\nWrite keys, values pairs to report that will be converted to a DataFrame later. Alternatively, a named tuple or a collection of pairs can be passed instead of keys and values.\n\nThe value of id is appended to the name of the column, e.g. report!(report, :key, value, :_1) will report value to a column named :key_1.\n\n\n\n\n\n","category":"method"},{"location":"API.html#Rimu.report_after_step!-Tuple{ReportingStrategy, Any, Any, Vararg{Any}}","page":"API","title":"Rimu.report_after_step!","text":"report_after_step!(::ReportingStrategy, step, report, state) -> report\n\nThis function is called at the very end of a step, after reporting_interval steps. It may modify the report.\n\n\n\n\n\n","category":"method"},{"location":"API.html#Rimu.report_metadata!-Tuple{Rimu.Report, Any, Any}","page":"API","title":"Rimu.report_metadata!","text":"report_metadata!(report::Report, key, value)\nreport_metadata!(report::Report, kvpairs)\n\nSet metadata key to value in report. key and value are converted to Strings. Alternatively, an iterable of key-value pairs or a NamedTuple can be passed.\n\nSee also get_metadata, report!, Report.\n\n\n\n\n\n","category":"method"},{"location":"API.html#Rimu.reporting_interval-Tuple{ReportingStrategy}","page":"API","title":"Rimu.reporting_interval","text":"reporting_interval(::ReportingStrategy)\n\nGet the interval between steps for which non-essential statistics are reported. Defaults to 1 if chosen ReportingStrategy does not specify an interval.\n\n\n\n\n\n","category":"method"},{"location":"API.html#Rimu.set_up_initial_shift_parameters-Union{Tuple{R}, Tuple{S}, Tuple{FCIQMC, Any, StaticArraysCore.SMatrix{S, R}, Any, Any}} where {S, R}","page":"API","title":"Rimu.set_up_initial_shift_parameters","text":"set_up_initial_shift_parameters(\n    algorithm::FCIQMC, hamiltonian, starting_vectors, shift, time_step, initial_shift_parameters\n)\n\nSet up the initial shift parameters for the FCIQMC algorithm.\n\n\n\n\n\n","category":"method"},{"location":"API.html#Rimu.single_particle_density-Tuple{Any}","page":"API","title":"Rimu.single_particle_density","text":"single_particle_density(dvec; component)\nsingle_particle_density(add; component)\n\nCompute the diagonal single particle density of vector dvec or address add. If the component argument is given, only that component of the addresses is taken into account. The result is always normalized so that sum(result) ≈ num_particles(address).\n\nExamples\n\njulia> v = DVec(fs\"|⋅↑⇅↓⋅⟩\" => 1.0, fs\"|↓↓⋅↑↑⟩\" => 0.5)\nDVec{FermiFS2C{2, 2, 5, 4, FermiFS{2, 5, BitString{5, 1, UInt8}}, FermiFS{2, 5, BitString{5, 1, UInt8}}},Float64} with 2 entries, style = IsDeterministic{Float64}()\n  fs\"|↓↓⋅↑↑⟩\" => 0.5\n  fs\"|⋅↑⇅↓⋅⟩\" => 1.0\n\njulia> single_particle_density(v)\n(0.2, 1.0, 1.6, 1.0, 0.2)\n\njulia> single_particle_density(v; component=1)\n(0.0, 1.6, 1.6, 0.4, 0.4)\n\nSee also\n\nSingleParticleDensity\n\n\n\n\n\n","category":"method"},{"location":"API.html#Rimu.smart_logger-Tuple","page":"API","title":"Rimu.smart_logger","text":"smart_logger(args...)\n\nEnable terminal progress bar during interactive use (i.e. unless running on CI or HPC). Arguments are passed on to the logger. This is run once during Rimu startup. Undo with default_logger or by setting Base.global_logger().\n\n\n\n\n\n","category":"method"},{"location":"API.html#Rimu.state_vectors-Tuple{R} where R<:Rimu.ReplicaState","page":"API","title":"Rimu.state_vectors","text":"state_vectors(state::ReplicaState)\nstate_vectors(sim::PMCSimulation)\n\nReturn an AbstractMatrix of configuration vectors from the state. The vectors can be accessed by indexing the resulting collection, where the row index corresponds to the replica index and the column index corresponds to the spectral state index.\n\nSee also SingleState, ReplicaState, SpectralState, PMCSimulation.\n\n\n\n\n\n","category":"method"},{"location":"API.html#Rimu.update_shift_parameters!","page":"API","title":"Rimu.update_shift_parameters!","text":"update_shift_parameters!(\n    s <: ShiftStrategy,\n    shift_parameters,\n    tnorm,\n    v_new,\n    v_old,\n    step,\n    report\n) -> shift_stats, proceed\n\nUpdate the shift_parameters according to strategy s. See ShiftStrategy. Returns a named tuple of the shift statistics and a boolean proceed indicating whether the simulation should proceed.\n\nSee initialise_shift_parameters, ShiftStrategy.\n\n\n\n\n\n","category":"function"},{"location":"API.html#Rimu.update_time_step-Tuple{ConstantTimeStep, Any, Vararg{Any}}","page":"API","title":"Rimu.update_time_step","text":"update_time_step(s<:TimeStepStrategy, time_step, tnorm) -> new_time_step\n\nUpdate the time step according to the strategy s.\n\n\n\n\n\n","category":"method"},{"location":"API.html#Reexported-Submodules","page":"API","title":"Reexported Submodules","text":"","category":"section"},{"location":"API.html#ExactDiagonalization","page":"API","title":"ExactDiagonalization","text":"","category":"section"},{"location":"API.html","page":"API","title":"API","text":"See Exact Diagonalization","category":"page"},{"location":"API.html#Interfaces","page":"API","title":"Interfaces","text":"","category":"section"},{"location":"API.html","page":"API","title":"API","text":"See Module Interfaces","category":"page"},{"location":"API.html#StochasticStyles","page":"API","title":"StochasticStyles","text":"","category":"section"},{"location":"API.html","page":"API","title":"API","text":"See Module StochasticStyles","category":"page"},{"location":"API.html#Hamiltonians","page":"API","title":"Hamiltonians","text":"","category":"section"},{"location":"API.html","page":"API","title":"API","text":"See Module Hamiltonians","category":"page"},{"location":"API.html#BitStringAddresses","page":"API","title":"BitStringAddresses","text":"","category":"section"},{"location":"API.html","page":"API","title":"API","text":"See Module BitStringAddresses","category":"page"},{"location":"API.html#DictVectors","page":"API","title":"DictVectors","text":"","category":"section"},{"location":"API.html","page":"API","title":"API","text":"See Module DictVectors","category":"page"},{"location":"API.html#StatsTools","page":"API","title":"StatsTools","text":"","category":"section"},{"location":"API.html","page":"API","title":"API","text":"See Module StatsTools","category":"page"},{"location":"API.html#RMPI","page":"API","title":"RMPI","text":"","category":"section"},{"location":"API.html","page":"API","title":"API","text":"See Module RMPI","category":"page"},{"location":"API.html#Index","page":"API","title":"Index","text":"","category":"section"},{"location":"API.html","page":"API","title":"API","text":"","category":"page"},{"location":"stochasticstyles.html#Module-StochasticStyles","page":"Stochastic styles","title":"Module StochasticStyles","text":"","category":"section"},{"location":"stochasticstyles.html","page":"Stochastic styles","title":"Stochastic styles","text":"StochasticStyles","category":"page"},{"location":"stochasticstyles.html#Rimu.StochasticStyles","page":"Stochastic styles","title":"Rimu.StochasticStyles","text":"This module provides concrete implementations of StochasticStyles, which specify the algorithm used by ProjectorMonteCarloProblem when performing stochastic matrix-vector multiplication.\n\nImplemented stochastic styles:\n\nStochasticStyle: abstract type for stochastic styles\nIsStochasticInteger\nIsDeterministic\nIsStochasticWithThreshold\nIsDynamicSemistochastic\nStyleUnknown\n\nThe offdiagonal spawning is defined in spawning.jl and is controlled by setting a SpawningStrategy.\n\nThe vector compression strategies are defined in compression.jl and are controlled by setting a CompressionStrategy.\n\n\n\n\n\n","category":"module"},{"location":"stochasticstyles.html#Available-StochasticStyles","page":"Stochastic styles","title":"Available StochasticStyles","text":"","category":"section"},{"location":"stochasticstyles.html","page":"Stochastic styles","title":"Stochastic styles","text":"StyleUnknown","category":"page"},{"location":"stochasticstyles.html#Rimu.Interfaces.StyleUnknown","page":"Stochastic styles","title":"Rimu.Interfaces.StyleUnknown","text":"StyleUnknown{T}() <: StochasticStyle\n\nTrait for value types not (currently) compatible with FCIQMC. This style makes it possible to construct dict vectors with unsupported valtypes.\n\nSee also StochasticStyle.\n\n\n\n\n\n","category":"type"},{"location":"stochasticstyles.html","page":"Stochastic styles","title":"Stochastic styles","text":"Modules = [StochasticStyles]\nPages = [\"styles.jl\"]","category":"page"},{"location":"stochasticstyles.html#Rimu.StochasticStyles.IsDeterministic","page":"Stochastic styles","title":"Rimu.StochasticStyles.IsDeterministic","text":"IsDeterministic{T=Float64}(compression=NoCompression()) <: StochasticStyle{T}\n\nPropagate with deterministic vector matrix multiplications. Stochastic compression of the resultant vector (after annihilations) can be triggered by setting the optional compression argument to a relevant CompressionStrategy.\n\nSee also StochasticStyle.\n\n\n\n\n\n","category":"type"},{"location":"stochasticstyles.html#Rimu.StochasticStyles.IsDynamicSemistochastic","page":"Stochastic styles","title":"Rimu.StochasticStyles.IsDynamicSemistochastic","text":"IsDynamicSemistochastic{T=Float64}(; kwargs...) <: StochasticStyle{T}\n\nQMC propagation with floating-point walker numbers and reduced noise. All possible spawns (offdiagonal elements in vector-matrix multiplication) are performed deterministically when number of walkers in a configuration is high, as controlled by the rel_spawning_threshold and abs_spawning_threshold keywords. Stochastic selection of spawns is controlled by the spawning keyword.\n\nBy default, a stochastic vector compression is applied after annihilations are completed. This behaviour can be changed to on-the-fly projection (as in IsStochasticInteger or IsStochasticWithThreshold) by setting late_compression=false, or modifying spawning and compression. See parameters below for a more detailed explanation.\n\nParameters:\n\nthreshold = 1.0: Values below this number are stochastically projected to this value or zero. See also ThresholdCompression.\nlate_compression = true: If this is set to true, stochastic vector compression is performed after all the spawns are performed. If it is set to false, values are stochastically projected as they are being spawned. late_compression=true is equivalent to setting compression=ThresholdCompression(threshold) and spawning=WithReplacement().  late_compression=false is equivalent to compression=NoCompression() and spawning=WithReplacement(threshold).\nrel_spawning_threshold = 1.0: If the walker number on a configuration times this threshold is greater than the number of offdiagonals, spawning is done deterministically. Should be set to 1 or more for best performance.\nabs_spawning_threshold = Inf: If the walker number on a configuration is greater than this value, spawning is done deterministically. Can be set to e.g.  abs_spawning_threshold = 0.1 * target_walkers.\nspawning = WithReplacement(): SpawningStrategy to use for the non-exact spawns.\ncompression = ThresholdCompression(threshold): CompressionStrategy used to compress the vector after a step. Overrides threshold.\n\nSee also StochasticStyle.\n\n\n\n\n\n","category":"type"},{"location":"stochasticstyles.html#Rimu.StochasticStyles.IsStochastic2Pop","page":"Stochastic styles","title":"Rimu.StochasticStyles.IsStochastic2Pop","text":"IsStochastic2Pop{T=Complex{Int}}() <: StochasticStyle{T}\n\nStochastic propagation with complex walker numbers representing two populations of integer walkers.\n\nWhen using this style, make sure to set a complex number as target walkers in the ShiftStrategy!\n\nThis style is experimental.\n\nSee also StochasticStyle.\n\n\n\n\n\n","category":"type"},{"location":"stochasticstyles.html#Rimu.StochasticStyles.IsStochasticInteger","page":"Stochastic styles","title":"Rimu.StochasticStyles.IsStochasticInteger","text":"IsStochasticInteger{T=Int}() <: StochasticStyle{T}\n\nFCIQMC algorithm with integer walkers as in Booth et al. (2009). During the vector matrix product each individual diagonal and spawning step is rounded stochastically to a nearby integer value.\n\nSee also StochasticStyle.\n\n\n\n\n\n","category":"type"},{"location":"stochasticstyles.html#Rimu.StochasticStyles.IsStochasticWithThreshold","page":"Stochastic styles","title":"Rimu.StochasticStyles.IsStochasticWithThreshold","text":"IsStochasticWithThreshold{T=Float64}(threshold=1.0) <: StochasticStyle{T}\n\nStochastic propagation with floating point walker numbers. During the vector matrix product each individual diagonal and spawning result is rounded stochastically if smaller than threshold (before annihilations). For a more customizable stochastic style, see IsDynamicSemistochastic.\n\nSee also StochasticStyle.\n\n\n\n\n\n","category":"type"},{"location":"stochasticstyles.html#The-StochasticStyle-interface","page":"Stochastic styles","title":"The StochasticStyle interface","text":"","category":"section"},{"location":"stochasticstyles.html","page":"Stochastic styles","title":"Stochastic styles","text":"StochasticStyle\nstep_stats\napply_column!\ndefault_style","category":"page"},{"location":"stochasticstyles.html#Rimu.Interfaces.StochasticStyle","page":"Stochastic styles","title":"Rimu.Interfaces.StochasticStyle","text":"StochasticStyle(v)\n\nAbstract type. When called as a function it returns the native style of the generalised vector v that determines how simulations are to proceed.\n\nUsage\n\nConcrete StochasticStyles can be used for the style keyword argument of ProjectorMonteCarloProblem, DVec and PDVec. The following styles are available:\n\nIsStochasticInteger\nIsDeterministic\nIsStochasticWithThreshold\nIsDynamicSemistochastic\nStyleUnknown\n\nExtended Help\n\nInterface\n\nWhen defining a new StochasticStyle, subtype it as MyStyle<:StochasticStyle{T} where T is the concrete value type the style is designed to work with.\n\nFor it to work with ProjectorMonteCarloProblem, a StochasticStyle must define the following:\n\napply_column!(::StochasticStyle, w, H, address, value)\nstep_stats(::StochasticStyle)\n\nand optionally\n\nCompressionStrategy(::StochasticStyle) for vector compression after annihilations,\n\nSee also StochasticStyles, Interfaces.\n\n\n\n\n\n","category":"type"},{"location":"stochasticstyles.html#Rimu.Interfaces.step_stats","page":"Stochastic styles","title":"Rimu.Interfaces.step_stats","text":"step_stats(::StochasticStyle)\nstep_stats(::CompressionStrategy)\n\nReturn a tuple of stat names (Symbol or String) and a tuple of zeros of the same length. These will be reported as columns in the DataFrame returned by ProjectorMonteCarloProblem.\n\n\n\n\n\n","category":"function"},{"location":"stochasticstyles.html#Rimu.Interfaces.apply_column!","page":"Stochastic styles","title":"Rimu.Interfaces.apply_column!","text":"apply_column!(v, op, addr, num, boost=1) -> stats::Tuple\n\nApply the product of column addr of the operator op and the scalar num to the vector v according to the StochasticStyle of v. By expectation value this should be equivalent to\n\nv .+= op[:, add] .* num\n\nThis is used to perform the spawning step in FCIQMC and to implement operator-vector multiplications. Mutates v and reports spawning statistics.\n\nThe boost argument multiplicatively increases the number of spawns to be performed without affecting the expectation value of the procedure.\n\n\n\n\n\n","category":"function"},{"location":"stochasticstyles.html#Rimu.Interfaces.default_style","page":"Stochastic styles","title":"Rimu.Interfaces.default_style","text":"default_style(::Type)\n\nPick a StochasticStyle based on the value type. Returns StyleUnknown if no known default style is set.\n\n\n\n\n\n","category":"function"},{"location":"stochasticstyles.html#Compression-strategies","page":"Stochastic styles","title":"Compression strategies","text":"","category":"section"},{"location":"stochasticstyles.html","page":"Stochastic styles","title":"Stochastic styles","text":"CompressionStrategy\nNoCompression\nStochasticStyles.ThresholdCompression\ncompress!","category":"page"},{"location":"stochasticstyles.html#Rimu.Interfaces.CompressionStrategy","page":"Stochastic styles","title":"Rimu.Interfaces.CompressionStrategy","text":"CompressionStrategy\n\nThe CompressionStrategy controls how a vector is compressed after a step.\n\nDefault implementation:\n\nNoCompression: no vector compression\n\nUsage\n\nA subtype of CompressionStrategy can be passed as a keyword argument to the constructors for some StochasticStyles. Calling CompressionStrategy(s::StochasticStyle) returns a relevant subtype. The default is NoCompression.\n\nInterface\n\nWhen defining a new CompressionStrategy, subtype it as MyCompressionStrategy <: CompressionStrategy and define these methods:\n\ncompress!(s::CompressionStrategy, v)\ncompress!(s::CompressionStrategy, w, v)\nstep_stats(s::CompressionStrategy)\n\n\n\n\n\n","category":"type"},{"location":"stochasticstyles.html#Rimu.Interfaces.NoCompression","page":"Stochastic styles","title":"Rimu.Interfaces.NoCompression","text":"NoCompression <: CompressionStrategy end\n\nDefault CompressionStrategy. Leaves the vector intact.\n\n\n\n\n\n","category":"type"},{"location":"stochasticstyles.html#Rimu.StochasticStyles.ThresholdCompression","page":"Stochastic styles","title":"Rimu.StochasticStyles.ThresholdCompression","text":"ThresholdCompression(threshold=1) <: CompressionStrategy\n\nCompressionStrategy that compresses a vector by threshold projection. Every entry in the vector with a value below the threshold is either set to zero, or increased to the threshold. The probabilty of setting it to zero is equal to abs(value) / threshold.\n\n\n\n\n\n","category":"type"},{"location":"stochasticstyles.html#Rimu.Interfaces.compress!","page":"Stochastic styles","title":"Rimu.Interfaces.compress!","text":"compress!([::CompressionStrategy,] v) -> ::NTuple{N,::Symbol}, ::NTuple{N}\ncompress!([::CompressionStrategy,] w, v) -> ::NTuple{N,::Symbol}, ::NTuple{N}\n\nCompress the vector v. The one-argument version compresses the vector in-place. The two-argument vector stores the result in w. The CompressionStrategy associated with the StochasticStyle of v is used to determine the type of compression.\n\nReturns two tuples, containing the names and values of statistics that are to be reported.\n\n\n\n\n\n","category":"function"},{"location":"stochasticstyles.html#Spawning-strategies-and-convenience-functions","page":"Stochastic styles","title":"Spawning strategies and convenience functions","text":"","category":"section"},{"location":"stochasticstyles.html","page":"Stochastic styles","title":"Stochastic styles","text":"The following functions and types are unexported, but are useful when defining new styles.","category":"page"},{"location":"stochasticstyles.html","page":"Stochastic styles","title":"Stochastic styles","text":"Modules = [StochasticStyles]\nPages = [\"spawning.jl\"]\nOrder = [:function,:method,:type]","category":"page"},{"location":"stochasticstyles.html#Rimu.StochasticStyles.diagonal_step!","page":"Stochastic styles","title":"Rimu.StochasticStyles.diagonal_step!","text":"diagonal_step!(w, op, add, val, threshold=0) -> (clones, deaths, zombies)\n\nPerform diagonal step on a walker add => val. Optional argument threshold sets the projection threshold. If eltype(w) is an Integer, the val is rounded to the nearest integer stochastically.\n\n\n\n\n\n","category":"function"},{"location":"stochasticstyles.html#Rimu.StochasticStyles.projected_deposit!","page":"Stochastic styles","title":"Rimu.StochasticStyles.projected_deposit!","text":"projected_deposit!(w, add, val, parent, threshold=0)\n\nLike deposit!, but performs threshold projection before spawning. If eltype(w) is an Integer, values are stochastically rounded.\n\nReturns the value deposited.\n\n\n\n\n\n","category":"function"},{"location":"stochasticstyles.html#Rimu.StochasticStyles.spawn!","page":"Stochastic styles","title":"Rimu.StochasticStyles.spawn!","text":"spawn!(s::SpawningStrategy, w, op::AbstractHamiltonian, add, val, boost)\nspawn!(s::SpawningStrategy, w, offdiags::AbstractOffdiagonals, add, val, boost)\n\nPerform stochastic spawns to w from address add with val walkers. val * boost controls the number of spawns performed.\n\nThis function should be overloaded in the second form, with offdiags as an argument.\n\nSee SpawningStrategy.\n\n\n\n\n\n","category":"function"},{"location":"stochasticstyles.html#Rimu.StochasticStyles.Bernoulli","page":"Stochastic styles","title":"Rimu.StochasticStyles.Bernoulli","text":"Bernoulli(threshold=0.0) <: SpawningStrategy\n\nPerform Bernoulli sampling. A spawn is attempted on each offdiagonal element with a probability that results in an expected number of spawns equal to the number of walkers on the spawning configuration. This is significantly less efficient than WithReplacement.\n\nIf the number of spawn attempts is greater than the number of offdiagonals, this functions like Exact, but is less efficient. For best performance, this strategy is to be used as a substrategy of DynamicSemistochastic.\n\nParameters\n\nthreshold sets the projection threshold.\n\nspawn! with this strategy returns the number of spawn attempts and the number of spawns.\n\n\n\n\n\n","category":"type"},{"location":"stochasticstyles.html#Rimu.StochasticStyles.DynamicSemistochastic","page":"Stochastic styles","title":"Rimu.StochasticStyles.DynamicSemistochastic","text":"DynamicSemistochastic(; strat, rel_threshold, abs_threshold) <: SpawningStrategy\n\nSpawningStrategy that behaves like strat when the number of walkers is low, but performs exact steps when it is high. What \"high\" means is controlled by the two thresholds described below.\n\nParameters\n\nstrat = WithReplacement(): a SpawningStrategy to use when the multiplication is not performed exactly. If the strat has a threshold different from zero, all spawns will be projected to that threshold.\nrel_threshold = 1.0: When deciding on whether to perform an exact spawn, this value is multiplied to the number of walkers. Should be set to 1 or more for best performance. This threshold is affected by the boost argument to spawn!.\nabs_threshold = Inf: When deciding on whether to perform an exact spawn, min(abs_threshold, num_offdiagonals) is used. This threshold is not affected by the boost argument to spawn!.\n\nSee e.g. WithoutReplacement for a description of the strat.threshold parameter.\n\nspawn! with this strategy returns the numbers of exact and inexact spawns, the number of spawn attempts and the number of spawns.\n\n\n\n\n\n","category":"type"},{"location":"stochasticstyles.html#Rimu.StochasticStyles.Exact","page":"Stochastic styles","title":"Rimu.StochasticStyles.Exact","text":"Exact(threshold=0.0) <: SpawningStrategy\n\nPerform an exact spawning step.\n\nParameters\n\nthreshold sets the projection threshold. If set to zero, no projection is performed.\n\nspawn! with this strategy returns the number of spawn attempts and the number of spawns.\n\n\n\n\n\n","category":"type"},{"location":"stochasticstyles.html#Rimu.StochasticStyles.SingleSpawn","page":"Stochastic styles","title":"Rimu.StochasticStyles.SingleSpawn","text":"SingleSpawn(threshold=0.0) <: SpawningStrategy\n\nPerform a single spawn. Useful as a building block for other stochastic styles.\n\nParameters\n\nthreshold sets the projection threshold. If set to zero, no projection is performed.\n\nspawn! with this strategy returns the number of spawn attempts (always 1) and the number of spawns.\n\n\n\n\n\n","category":"type"},{"location":"stochasticstyles.html#Rimu.StochasticStyles.SpawningStrategy","page":"Stochastic styles","title":"Rimu.StochasticStyles.SpawningStrategy","text":"SpawningStrategy\n\nA SpawningStrategy is used to control how spawns (multiplies with off-diagonal part of the column vector) are performed and can be passed to some of the StochasticStyles as keyword arguments.\n\nThe following concrete implementations are provided:\n\nExact: Perform exact spawns. Used by IsDeterministic.\nWithReplacement: The default stochastic spawning strategy. Spawns are chosen with replacement.\nDynamicSemistochastic: Behave like Exact when the number of spawns performed is high, and like a different substrategy otherwise. Used by IsDynamicSemistochastic.\nSingleSpawn: Perform a single spawn only. Used as a building block for other strategies.\nWithoutReplacement: Similar to WithReplacement, but ensures each spawn is only performed once. Only to be used as a substrategy of DynamicSemistochastic.\nBernoulli: Each spawn is attempted with a fixed probability. Only to be used as a substrategy of DynamicSemistochastic.\n\nInterface\n\nIn order to implement a new SpawningStrategy, define a method for spawn!.\n\n\n\n\n\n","category":"type"},{"location":"stochasticstyles.html#Rimu.StochasticStyles.WithReplacement","page":"Stochastic styles","title":"Rimu.StochasticStyles.WithReplacement","text":"WithReplacement(threshold=0.0) <: SpawningStrategy\n\nSpawningStrategy where spawn targets are sampled with replacement. This is the default spawning strategy for most of the StochasticStyles.\n\nParameters\n\nthreshold sets the projection threshold. If set to zero, no projection is performed.\n\nspawn! with this strategy returns the number of spawn attempts and the number of spawns.\n\n\n\n\n\n","category":"type"},{"location":"stochasticstyles.html#Rimu.StochasticStyles.WithoutReplacement","page":"Stochastic styles","title":"Rimu.StochasticStyles.WithoutReplacement","text":"WithoutReplacement(threshold=0.0) <: SpawningStrategy\n\nSpawningStrategy where spawn targets are sampled without replacement. This strategy needs to allocate a temporary array during spawning, which makes it significantly less efficient than WithReplacement.\n\nIf the number of spawn attempts is greater than the number of offdiagonals, this functions like Exact, but is less efficient. For best performance, this strategy is to be used as a substrategy of DynamicSemistochastic.\n\nParameters\n\nthreshold sets the projection threshold. If set to zero, no projection is performed.\n\nspawn! with this strategy returns the number of spawn attempts and the number of spawns.\n\n\n\n\n\n","category":"type"},{"location":"stochasticstyles.html#Index","page":"Stochastic styles","title":"Index","text":"","category":"section"},{"location":"stochasticstyles.html","page":"Stochastic styles","title":"Stochastic styles","text":"Pages   = [\"stochasticstyles.md\"]","category":"page"},{"location":"generated/BHM-example-mpi.html","page":"Rimu with MPI","title":"Rimu with MPI","text":"EditURL = \"../../../scripts/BHM-example-mpi.jl\"","category":"page"},{"location":"generated/BHM-example-mpi.html#Example-2:-Rimu-with-MPI","page":"Rimu with MPI","title":"Example 2: Rimu with MPI","text":"","category":"section"},{"location":"generated/BHM-example-mpi.html","page":"Rimu with MPI","title":"Rimu with MPI","text":"In this example, we will demonstrate using Rimu with MPI. MPI is a standard for parallel and distributed computing, and it is widely used in high-performance computing. Rimu provides support for MPI to enable parallel computations on multiple nodes.","category":"page"},{"location":"generated/BHM-example-mpi.html","page":"Rimu with MPI","title":"Rimu with MPI","text":"A runnable script for this example is located here. Run it with 2 MPI ranks with mpirun -n 2 julia BHM-example-mpi.jl.","category":"page"},{"location":"generated/BHM-example-mpi.html","page":"Rimu with MPI","title":"Rimu with MPI","text":"We start by importing Rimu and Rimu.RMPI, which contains MPI-related functionality.","category":"page"},{"location":"generated/BHM-example-mpi.html","page":"Rimu with MPI","title":"Rimu with MPI","text":"using Rimu\nusing Rimu.RMPI","category":"page"},{"location":"generated/BHM-example-mpi.html","page":"Rimu with MPI","title":"Rimu with MPI","text":"Note that it is not necessary to initialise the MPI library, as this is already done automatically when Rimu is loaded.","category":"page"},{"location":"generated/BHM-example-mpi.html","page":"Rimu with MPI","title":"Rimu with MPI","text":"We will compute the ground state of a Bose-Hubbard model in momentum space with 10 particles in 10 sites.","category":"page"},{"location":"generated/BHM-example-mpi.html","page":"Rimu with MPI","title":"Rimu with MPI","text":"First, we define the Hamiltonian. We want to start from an address with zero momentum, which is located at mode 5 in the momentum grid. We put all 10 particles, all in the zero momentum mode.","category":"page"},{"location":"generated/BHM-example-mpi.html","page":"Rimu with MPI","title":"Rimu with MPI","text":"address = BoseFS(10, 5 => 10)","category":"page"},{"location":"generated/BHM-example-mpi.html","page":"Rimu with MPI","title":"Rimu with MPI","text":"BoseFS{10,10}(0, 0, 0, 0, 10, 0, 0, 0, 0, 0)","category":"page"},{"location":"generated/BHM-example-mpi.html","page":"Rimu with MPI","title":"Rimu with MPI","text":"We will set the interaction strength u to 6.0. The hopping strength t defaults to 1.0.","category":"page"},{"location":"generated/BHM-example-mpi.html","page":"Rimu with MPI","title":"Rimu with MPI","text":"H = HubbardMom1D(address; u=6.0)","category":"page"},{"location":"generated/BHM-example-mpi.html","page":"Rimu with MPI","title":"Rimu with MPI","text":"HubbardMom1D(fs\"|0 0 0 0 10 0 0 0 0 0⟩\"; u=6.0, t=1.0)","category":"page"},{"location":"generated/BHM-example-mpi.html","page":"Rimu with MPI","title":"Rimu with MPI","text":"We set a reporting strategy. We will use ReportToFile, which writes the reports directly to a file. This is useful for MPI calculations, as they will typically run non-interactively. The reports will be written to disk and can be inspected later. This has the additional benefit of reducing memory use in long-running jobs, as we don't need to keep the results in memory. It also allows us to inspect the results before the computation finishes and recover some data if it fails.","category":"page"},{"location":"generated/BHM-example-mpi.html","page":"Rimu with MPI","title":"Rimu with MPI","text":"The default settings will ensure that only the root MPI rank will write to the file, which is reasonable, and that data is saved in chunks of 1000 time steps. We choose to suppress progress messages with setting io=devnull.","category":"page"},{"location":"generated/BHM-example-mpi.html","page":"Rimu with MPI","title":"Rimu with MPI","text":"reporting_strategy = ReportToFile(\n    filename=\"result.arrow\",\n    io=devnull\n)","category":"page"},{"location":"generated/BHM-example-mpi.html","page":"Rimu with MPI","title":"Rimu with MPI","text":"ReportToFile{Symbol}(\"result.arrow\", 1, 1000, true, false, Base.DevNull(), :zstd, nothing)","category":"page"},{"location":"generated/BHM-example-mpi.html","page":"Rimu with MPI","title":"Rimu with MPI","text":"For running parallel computations with MPI, it is important that a compatible state vector is used. Here we explicitly set up an MPI-enabled state vector, PDVec, which is automatically MPI-distributed over the available number of MPI ranks. In addition, threading will be used with all threads available to Julia.","category":"page"},{"location":"generated/BHM-example-mpi.html","page":"Rimu with MPI","title":"Rimu with MPI","text":"initial_vector = PDVec(address => 1.0; style=IsDynamicSemistochastic())","category":"page"},{"location":"generated/BHM-example-mpi.html","page":"Rimu with MPI","title":"Rimu with MPI","text":"1-element PDVec: style = IsDynamicSemistochastic{Float64,ThresholdCompression,DynamicSemistochastic}()\n  fs\"|0 0 0 0 10 0 0 0 0 0⟩\" => 1.0","category":"page"},{"location":"generated/BHM-example-mpi.html","page":"Rimu with MPI","title":"Rimu with MPI","text":"Now, we can set other parameters as usual. We will perform the computation with 10000 walkers and for 10000 time steps. We will also compute the projected energy by passing a ProjectedEnergy object as a post_step_strategy.","category":"page"},{"location":"generated/BHM-example-mpi.html","page":"Rimu with MPI","title":"Rimu with MPI","text":"problem = ProjectorMonteCarloProblem(H;\n    start_at=initial_vector,\n    reporting_strategy,\n    post_step_strategy=ProjectedEnergy(H, initial_vector),\n    target_walkers=10_000,\n    time_step=1e-4,\n    last_step=10_000\n);","category":"page"},{"location":"generated/BHM-example-mpi.html","page":"Rimu with MPI","title":"Rimu with MPI","text":"The @mpi_root macro performs an action on the root rank only, which is useful for printing.","category":"page"},{"location":"generated/BHM-example-mpi.html","page":"Rimu with MPI","title":"Rimu with MPI","text":"@mpi_root println(\"Running FCIQMC with \", mpi_size(), \" rank(s).\")","category":"page"},{"location":"generated/BHM-example-mpi.html","page":"Rimu with MPI","title":"Rimu with MPI","text":"Running FCIQMC with 1 rank(s).\n","category":"page"},{"location":"generated/BHM-example-mpi.html","page":"Rimu with MPI","title":"Rimu with MPI","text":"Finally, we can run the computation.","category":"page"},{"location":"generated/BHM-example-mpi.html","page":"Rimu with MPI","title":"Rimu with MPI","text":"simulation = solve(problem);\n\n@mpi_root println(\"Simulation success = \", simulation.success)","category":"page"},{"location":"generated/BHM-example-mpi.html","page":"Rimu with MPI","title":"Rimu with MPI","text":"Simulation success = true\n","category":"page"},{"location":"generated/BHM-example-mpi.html","page":"Rimu with MPI","title":"Rimu with MPI","text":"Once the calculation is done, the results are available in the arrow file on disk.","category":"page"},{"location":"generated/BHM-example-mpi.html","page":"Rimu with MPI","title":"Rimu with MPI","text":"In a typical workflow, the simulation results would be loaded from disk and analysed in the REPL or with a separate script. The arrow file can be loaded into a DataFrame with metadata using the load_df function.","category":"page"},{"location":"generated/BHM-example-mpi.html","page":"Rimu with MPI","title":"Rimu with MPI","text":"","category":"page"},{"location":"generated/BHM-example-mpi.html","page":"Rimu with MPI","title":"Rimu with MPI","text":"This page was generated using Literate.jl.","category":"page"},{"location":"index.html#Rimu.jl-Package-Guide","page":"Guide","title":"Rimu.jl Package Guide","text":"","category":"section"},{"location":"index.html","page":"Guide","title":"Guide","text":"Random Integrators for many-body quantum systems","category":"page"},{"location":"index.html","page":"Guide","title":"Guide","text":"The grand aim is to develop a toolbox for many-body quantum systems that can be represented by a Hamiltonian in second quantisation language. Currently supported features include:","category":"page"},{"location":"index.html#Interacting-with-quantum-many-body-models","page":"Guide","title":"Interacting with quantum many-body models","text":"","category":"section"},{"location":"index.html","page":"Guide","title":"Guide","text":"Full configuration interaction quantum Monte Carlo (FCIQMC), a flavour of projector quantum Monte Carlo for stochastically solving the time-independent Schrödinger equation. See References.\nMatrix-free exact diagonalisation of quantum Hamiltonians (with external package KrylovKit.jl).\nSparse matrix representation of quantum Hamiltonians for exact diagonalisation with sparse linear algebra package of your choice (fastest for small systems).","category":"page"},{"location":"index.html#Representing-quantum-many-body-models","page":"Guide","title":"Representing quantum many-body models","text":"","category":"section"},{"location":"index.html","page":"Guide","title":"Guide","text":"A composable and efficient type system for representing single- and multi-component Fock states of bosons, fermions, and mixtures thereof, to be used as a basis for representing Hamiltonians.\nAn interface for defining many-body Hamiltonians.\nPre-defined models include:\nHubbard model in real space for bosons and fermions and mixtures in 1, 2, and 3 spatial dimensions.\nHubbard and related lattice models in momentum space for bosons and fermions in one spatial dimension.\nTranscorrelated Hamiltonian for contact interactions in one dimension for fermions, as described in Jeszenski et al. arXiv:1806.11268.","category":"page"},{"location":"index.html#Statistical-analysis-of-Monte-Carlo-data","page":"Guide","title":"Statistical analysis of Monte Carlo data","text":"","category":"section"},{"location":"index.html","page":"Guide","title":"Guide","text":"Blocking analysis following Flyvberg & Peterson JCP (1989), and automated with hypothesis testing by Jonsson","category":"page"},{"location":"index.html","page":"Guide","title":"Guide","text":"PRE (2018).","category":"page"},{"location":"index.html","page":"Guide","title":"Guide","text":"Unbiased estimators for the ground state energy by re-reweighting following Nightingale & Blöte PRB (1986) and Umrigar et al. JCP (1993).","category":"page"},{"location":"index.html","page":"Guide","title":"Guide","text":"The code supports parallelisation with MPI (harnessing MPI.jl) as well as native Julia threading (experimental). In the future, we may add tools to solve the time-dependent Schrödinger equation and Master equations for open system time evolution.","category":"page"},{"location":"index.html","page":"Guide","title":"Guide","text":"Concept: Joachim Brand and Elke Pahl.","category":"page"},{"location":"index.html","page":"Guide","title":"Guide","text":"Contributors: Joachim Brand, Elke Pahl, Mingrui Yang, Matija Čufar, Chris Bradly.","category":"page"},{"location":"index.html","page":"Guide","title":"Guide","text":"Discussions, help, and additional contributions are acknowledged by Ali Alavi, Didier Adrien, Chris Scott (NeSI), Alexander Pletzer (NeSI).","category":"page"},{"location":"index.html#Installation","page":"Guide","title":"Installation","text":"","category":"section"},{"location":"index.html#Installing-Rimu-for-usage","page":"Guide","title":"Installing Rimu for usage","text":"","category":"section"},{"location":"index.html","page":"Guide","title":"Guide","text":"Rimu is a registered package and can be installed with the package manager. Hit the ] key at the Julia REPL to get into Pkg mode and type","category":"page"},{"location":"index.html","page":"Guide","title":"Guide","text":"pkg> add Rimu","category":"page"},{"location":"index.html","page":"Guide","title":"Guide","text":"Alternatively, use","category":"page"},{"location":"index.html","page":"Guide","title":"Guide","text":"julia> using Pkg; Pkg.add(name=\"Rimu\")","category":"page"},{"location":"index.html","page":"Guide","title":"Guide","text":"in order to install Rimu from a script.","category":"page"},{"location":"index.html#Installing-Rimu-for-development","page":"Guide","title":"Installing Rimu for development","text":"","category":"section"},{"location":"index.html","page":"Guide","title":"Guide","text":"In order to be able to edit the source code, push changes, change and make new git branches, etc., clone the git repository with git clone to a convenient location, e.g. ~/mygitpackagefolder/. Then hit the ] key at the Julia REPL to get into Pkg mode and type","category":"page"},{"location":"index.html","page":"Guide","title":"Guide","text":"pkg> develop ~/mygitpackagefolder/rimu.jl","category":"page"},{"location":"index.html","page":"Guide","title":"Guide","text":"where the file path has to be adjusted to the location of the cloned git repository.","category":"page"},{"location":"index.html#Usage","page":"Guide","title":"Usage","text":"","category":"section"},{"location":"index.html","page":"Guide","title":"Guide","text":"The package is now installed and can be imported with","category":"page"},{"location":"index.html","page":"Guide","title":"Guide","text":"julia> using Rimu","category":"page"},{"location":"index.html","page":"Guide","title":"Guide","text":"When planning to edit the code of the package it is advisable to use the Revise package by issuing","category":"page"},{"location":"index.html","page":"Guide","title":"Guide","text":"julia> using Revise","category":"page"},{"location":"index.html","page":"Guide","title":"Guide","text":"before using Rimu. This will track any changes made to the source code of Rimu and the changed package will be available after saving the source code (hopefully, and most of the time, without restarting the Julia REPL).","category":"page"},{"location":"index.html","page":"Guide","title":"Guide","text":"Rimu offers a number of tools for representing Hamiltonians (see Hamiltonians) and state vectors / wave functions (see DictVectors) as well as algorithms to find the ground state, e.g. ProjectorMonteCarloProblem, ExactDiagonalizationProblem.","category":"page"},{"location":"index.html#Scripts","page":"Guide","title":"Scripts","text":"","category":"section"},{"location":"index.html","page":"Guide","title":"Guide","text":"Rimu is written as a Julia package to be imported with using Rimu as described above. It supplies useful functions and types. Performing actual calculations and analysing the results is done with scripts. The folder scripts/ contains a collections of scripts that are either examples for use of the Rimu package or useful scripts for data analysis. In particular:","category":"page"},{"location":"index.html","page":"Guide","title":"Guide","text":"scripts/BHM-example.jl is an example script that runs fciqmc on the 1D Bose-Hubbard model. A data frame with results is written to the file fciqmcdata.arrow.\nscripts/BHM-example-mpi.jl demonstrates basic usage of Rimu with MPI.","category":"page"},{"location":"index.html#MPI","page":"Guide","title":"MPI","text":"","category":"section"},{"location":"index.html","page":"Guide","title":"Guide","text":"The Rimu package can run in parallel on different processes or node and distribute work by making use of MPI, or \"message passing interface\". For example, running","category":"page"},{"location":"index.html","page":"Guide","title":"Guide","text":"> julia scripts/BHM-example.jl","category":"page"},{"location":"index.html","page":"Guide","title":"Guide","text":"will run on one processor with the main computation (i.e. after package loading and compilation) completing in 2.69 seconds.","category":"page"},{"location":"index.html","page":"Guide","title":"Guide","text":"Running","category":"page"},{"location":"index.html","page":"Guide","title":"Guide","text":"> mpirun -np 4 julia scripts/BHM-example-mpi.jl","category":"page"},{"location":"index.html","page":"Guide","title":"Guide","text":"on the same hardware makes use of 4 cores and the main part completes in 1.04 seconds, a speedup factor of 2.6. This seems reasonable, given that extra work needs to be done for communicating between different processes.","category":"page"},{"location":"index.html","page":"Guide","title":"Guide","text":"Using MPI parallelism with Rimu is easy. Enabling MPI enabled automatically if PDVec is used to store a vector. In that case, data will be stored in a distributed fashion among the MPI ranks and only communicated between ranks when necessary. Additional MPI-related functionality is provided by the module RMPI.","category":"page"},{"location":"index.html#Compatibility","page":"Guide","title":"Compatibility","text":"","category":"section"},{"location":"index.html","page":"Guide","title":"Guide","text":"We recommend using Rimu with the latest Julia release version. Rimu requires at least julia v1.9.","category":"page"},{"location":"index.html#References","page":"Guide","title":"References","text":"","category":"section"},{"location":"index.html","page":"Guide","title":"Guide","text":"The code implements the FCIQMC algorithm originally described in","category":"page"},{"location":"index.html","page":"Guide","title":"Guide","text":"\"Fermion Monte Carlo without fixed nodes: A game of life, death, and annihilation in Slater determinant space\", G. H. Booth, A. J. W. Thom, A. Alavi, J. Chem. Phys. 131, 054106 (2009).\n\"Communications: Survival of the fittest: accelerating convergence in full configuration-interaction quantum Monte Carlo.\", D. Cleland,  G. H. Booth, A. Alavi, J. Chem. Phys. 132, 041103 (2010).","category":"page"},{"location":"index.html","page":"Guide","title":"Guide","text":"Scientific papers describing additional features implemented in Rimu:","category":"page"},{"location":"index.html","page":"Guide","title":"Guide","text":"\"Improved walker population control for full configuration interaction quantum Monte Carlo\", M. Yang, E. Pahl, J. Brand, J. Chem. Phys. 153, 170143 (2020); arXiv:2008.01927.\n\"Stochastic differential equation approach to understanding the population control bias in full configuration interaction quantum Monte Carlo\", J. Brand, M. Yang, E. Pahl, arXiv:2103.07800 (2021).","category":"page"},{"location":"index.html","page":"Guide","title":"Guide","text":"Papers discussing results obtained with Rimu:","category":"page"},{"location":"index.html","page":"Guide","title":"Guide","text":"\"Polaron-Depleton Transition in the Yrast Excitations of a One-Dimensional Bose Gas with a Mobile Impurity\", M. Yang, M. Čufar, E. Pahl, J. Brand, Condens. Matter 7, 15 (2022).\n\"Magnetic impurity in a one-dimensional few-fermion system\", L. Rammelmüller, D. Huber, M. Čufar, J. Brand, A. Volosniev, arXiv:2204.01606 (2022).","category":"page"},{"location":"dictvectors.html#Module-DictVectors","page":"Dict vectors","title":"Module DictVectors","text":"","category":"section"},{"location":"dictvectors.html","page":"Dict vectors","title":"Dict vectors","text":"DictVectors\nAbstractDVec","category":"page"},{"location":"dictvectors.html#Rimu.DictVectors","page":"Dict vectors","title":"Rimu.DictVectors","text":"Module that provides concrete implementations of the AbstractDVec interface.\n\nDVec: basic AbstractDVec\nPDVec: parallel AbstractDVec with MPI and initiator support\nInitiatorDVec: allows storing information about initiator status\n\nSee Interfaces.\n\n\n\n\n\n","category":"module"},{"location":"dictvectors.html#Rimu.Interfaces.AbstractDVec","page":"Dict vectors","title":"Rimu.Interfaces.AbstractDVec","text":"AbstractDVec{K,V}\n\nAbstract data type for vector-like data structures with sparse storage. While conceptually AbstractDVecs represent elements of a vector space over a scalar type V, they are indexed by an arbitrary type K (could be non-integers) similar to dictionaries. They support the interface from VectorInterface.jl and are designed to work well for quantum Monte Carlo with ProjectorMonteCarloProblem and for matrix-free linear algebra with KrylovKit.\n\nConcrete implementations are available as PDVec, DVec, and InitiatorDVec.\n\nAbstractDVecs have a StochasticStyle which selects the spawning algorithm in FCIQMC. Looking up an element that is not stored in the AbstractDVec should return a zero, and setting a value to zero should remove it from the vector. To iterate over an AbstractDVec, use keys, pairs, or values. When possible, use reduction functions such as sum or mapreduce.\n\nInterface\n\nThe interface is similar to the AbstractDict interface, but with the changed behaviour as noted above.  Implement what would be needed for the AbstractDict interface (pairs, keys, values, setindex!, getindex, delete!, length, empty, empty!) and, in addition:\n\nStochasticStyle\nstorage returns an AbstractDict storing the raw data with possibly different valtype than V.\ndeposit!\n\nA default implementation for the VectorInterface.jl interface is provided through the above functions.\n\nSee also DictVectors, Interfaces.\n\n\n\n\n\n","category":"type"},{"location":"dictvectors.html#Concrete-implementations","page":"Dict vectors","title":"Concrete implementations","text":"","category":"section"},{"location":"dictvectors.html","page":"Dict vectors","title":"Dict vectors","text":"DVec\nInitiatorDVec\nPDVec","category":"page"},{"location":"dictvectors.html#Rimu.DictVectors.DVec","page":"Dict vectors","title":"Rimu.DictVectors.DVec","text":"DVec{K,V,D<:AbstractDict{K,V},S}\n\nDictionary-based vector-like data structure for use with FCIQMC and KrylovKit. While mostly behaving like a Dict, it supports various linear algebra operations such as norm and dot. It has a StochasticStyle that is used to select an appropriate spawning strategy in the FCIQMC algorithm.\n\nSee also: AbstractDVec, InitiatorDVec, PDVec.\n\nConstructors\n\nDVec(dict::AbstractDict[; style, capacity]): create a DVec with dict for storage. Note that the data may or may not be copied.\nDVec(args...[; style, capacity]): args... are passed to the Dict constructor. The Dict is used for storage.\nDVec{K,V}([; style, capacity]): create an empty DVec{K,V}.\nDVec(dv::AbstractDVec[; style, capacity]): create a DVec with the same contents as  adv. The style is inherited from dv by default.\n\nThe default style is selected based on the DVec's valtype (see default_style). If a style is given and the valtype does not match the style's eltype, the values are converted to an appropriate type.\n\nThe capacity argument is optional and sets the initial size of the DVec via Base.sizehint!.\n\nExamples\n\njulia> dv = DVec(:a => 1)\nDVec{Symbol,Int64} with 1 entry, style = IsStochasticInteger{Int64}()\n  :a => 1\n\njulia> dv = DVec(:a => 2, :b => 3; style=IsDeterministic())\nDVec{Symbol,Float64} with 2 entries, style = IsDeterministic{Float64}()\n  :a => 2.0\n  :b => 3.0\n\n\n\n\n\n","category":"type"},{"location":"dictvectors.html#Rimu.DictVectors.InitiatorDVec","page":"Dict vectors","title":"Rimu.DictVectors.InitiatorDVec","text":"InitiatorDVec{K,V} <: AbstractDVec{K,V}\n\nDictionary-based vector-like data structure for use with ProjectorMonteCarloProblem and KrylovKit.jl. See AbstractDVec. Functionally identical to DVec, but contains InitiatorValues internally in order to facilitate initiator methods. Initiator methods for controlling the Monte Carlo sign problem were first introduced in J. Chem. Phys. 132, 041103 (2010). How the initiators are handled is controlled by specifying an InitiatorRule with the initiator keyword argument (see below).\n\nSee also: AbstractDVec, DVec, PDVec.\n\nConstructors\n\nInitiatorDVec(dict::AbstractDict[; style, initiator, capacity]): create an InitiatorDVec with dict for storage.  Note that the data may or may not be copied.\nInitiatorDVec(args...[; style, initiator, capacity]): args... are passed to the Dict constructor. The Dict is used for storage.\nInitiatorDVec{K,V}([; style, initiator, capacity]): create an empty InitiatorDVec{K,V}.\nInitiatorDVec(dv::AbstractDVec[; style, initiator, capacity]): create an InitiatorDVec  with the same contents as dv. The style is inherited from dv by default.\n\nKeyword  arguments\n\nstyle: A valid StochasticStyle.  The default is selected based on the InitiatorDVec's valtype (see default_style). If a style is given and the valtype does not match the style's eltype, the values are converted to an appropriate type.\ninitiator = Initiator(1): A valid InitiatorRule. See Initiator.\ncapacity: Indicative size as Int. Optional. Sets the initial size of the InitiatorDVec via Base.sizehint!.\n\n\n\n\n\n","category":"type"},{"location":"dictvectors.html#Rimu.DictVectors.PDVec","page":"Dict vectors","title":"Rimu.DictVectors.PDVec","text":"PDVec{K,V}(; kwargs...)\nPDVec(iter; kwargs...)\nPDVec(pairs...; kwargs...)\n\nDictionary-based vector-like data structure for use with FCIQMC and KrylovKit.jl. While mostly behaving like a Dict, it supports various linear algebra operations such as norm and dot, and the interface defined in VectorInterface.\n\nThe P in PDVec stands for parallel. PDVecs perform mapreduce, foreach, and various linear algebra operations in a threaded manner. If MPI is available, these operations are automatically distributed as well. As such it is not recommended to iterate over pairs, keys, or values directly unless explicitly performing them on the localpart of the vector.\n\nSee also: AbstractDVec, DVec, InitiatorDVec.\n\nKeyword arguments\n\nstyle =default_style(V): A StochasticStyle that is used to select the spawning strategy in the FCIQMC algorithm.\ninitiator =NonInitiator(): An InitiatorRule, used in FCIQMC to remove the sign problem.\ncommunicator: A Communicator that controls how operations are performed when using MPI. The defaults are NotDistributed when not using MPI and AllToAll when using MPI.\n\nExtended Help\n\nSegmentation\n\nThe vector is split into Threads.nthreads() subdictionaries called segments. Which dictionary a key-value pair is mapped to is determined by the hash of the key. The purpose of this segmentation is to allow parallel processing - functions such as mapreduce, add! or dot (full list below) process each subdictionary on a separate thread.\n\nSee also PDWorkingMemory.\n\nExample\n\njulia> add = FermiFS2C((1,1,0,0), (0,0,1,1));\n\njulia> op = HubbardMom1D(add; t=4/π^2, u=4);\n\njulia> pv = PDVec(add => 1.0)\n1-element PDVec: style = IsDeterministic{Float64}()\n  fs\"|↑↑↓↓⟩\" => 1.0\n\njulia> pv = op * pv\n7-element PDVec: style = IsDeterministic{Float64}()\n  fs\"|↑↓↑↓⟩\" => 1.0\n  fs\"|↑↑↓↓⟩\" => 4.0\n  fs\"|↓↑↓↑⟩\" => 1.0\n  fs\"|↓↑↑↓⟩\" => -1.0\n  fs\"|⇅⋅⋅⇅⟩\" => 1.0\n  fs\"|↑↓↓↑⟩\" => -1.0\n  fs\"|⋅⇅⇅⋅⟩\" => 1.0\n\njulia> scale!(pv, -1); pv\n7-element PDVec: style = IsDeterministic{Float64}()\n  fs\"|↑↓↑↓⟩\" => -1.0\n  fs\"|↑↑↓↓⟩\" => -4.0\n  fs\"|↓↑↓↑⟩\" => -1.0\n  fs\"|↓↑↑↓⟩\" => 1.0\n  fs\"|⇅⋅⋅⇅⟩\" => -1.0\n  fs\"|↑↓↓↑⟩\" => 1.0\n  fs\"|⋅⇅⇅⋅⟩\" => -1.0\n\njulia> dest = similar(pv)\n0-element PDVec: style = IsDeterministic{Float64}()\n\njulia> map!(x -> x + 2, dest, values(pv))\n7-element PDVec: style = IsDeterministic{Float64}()\n  fs\"|↑↓↑↓⟩\" => 1.0\n  fs\"|↑↑↓↓⟩\" => -2.0\n  fs\"|↓↑↓↑⟩\" => 1.0\n  fs\"|↓↑↑↓⟩\" => 3.0\n  fs\"|⇅⋅⋅⇅⟩\" => 1.0\n  fs\"|↑↓↓↑⟩\" => 3.0\n  fs\"|⋅⇅⇅⋅⟩\" => 1.0\n\njulia> sum(values(pv))\n-6.0\n\njulia> dot(dest, pv)\n10.0\n\njulia> dot(dest, op, pv)\n44.0\n\nMPI\n\nWhen MPI is active, all parallel reductions are automatically reduced across MPI ranks with a call to MPI.Allreduce!.\n\nIn a distributed setting, PDVec does not support iteration without first making it explicit the iteration is only to be performed on the local segments of the vector. This is done with localpart. In general, even when not using MPI, it is best practice to use localpart when explicit iteration is required.\n\nUse with KrylovKit\n\nPDVec is compatible with eigsolve from KrylovKit.jl. When used, the diagonalisation is performed in a threaded and distributed manner. Using multiple MPI ranks with this method does not distribute the memory load effectively, but does result in significant speedups.\n\nExample\n\njulia> using KrylovKit\n\njulia> add = BoseFS((0,0,5,0,0));\n\njulia> op = HubbardMom1D(add; u=6.0);\n\njulia> pv = PDVec(add => 1.0);\n\njulia> results = eigsolve(op, pv, 4, :SR);\n\njulia> results[1][1:4]\n4-element Vector{Float64}:\n -3.4311156892322234\n  1.1821748602612363\n  3.7377753753082823\n  6.996390417443125\n\nParallel functionality\n\nThe following functions are threaded and MPI-compatible:\n\nFrom Base: mapreduce and derivatives (sum, prod, reduce...), all, any,map! (on values only), +, -, *\nFrom LinearAlgebra: rmul!, lmul!, mul!, axpy!, axpby!, dot, norm, normalize, normalize!\nThe full interface defined in VectorInterface.jl\n\n\n\n\n\n","category":"type"},{"location":"dictvectors.html#Interface-functions","page":"Dict vectors","title":"Interface functions","text":"","category":"section"},{"location":"dictvectors.html","page":"Dict vectors","title":"Dict vectors","text":"deposit!\nstorage\nfreeze\nlocalpart\napply_operator!\nsort_into_targets!\nworking_memory","category":"page"},{"location":"dictvectors.html#Rimu.Interfaces.deposit!","page":"Dict vectors","title":"Rimu.Interfaces.deposit!","text":"deposit!(w::InitiatorDVec, add, val, p_add=>p_val)\n\nAdd val into w at address add as an AbstractInitiatorValue.\n\n\n\n\n\ndeposit!(w::AbstractDVec, add, val, parent::Pair)\n\nAdd val into w at address add, taking into account initiator rules if applicable. parent contains the address => value pair from which the pair add => val was created. InitiatorDVec can intercept this and add its own functionality.\n\n\n\n\n\n","category":"function"},{"location":"dictvectors.html#Rimu.Interfaces.storage","page":"Dict vectors","title":"Rimu.Interfaces.storage","text":"storage(dvec) -> AbstractDict\n\nReturn the raw storage associated with dvec as an AbstractDict. Used in MPI communication.\n\n\n\n\n\n","category":"function"},{"location":"dictvectors.html#OrderedCollections.freeze","page":"Dict vectors","title":"OrderedCollections.freeze","text":"freeze(dv)\n\nCreate a \"frozen\" version of dv which can no longer be modified or used in the conventional manner, but supports faster dot products.\n\nIf dv is an MPIData, synchronize its contents among the ranks first.\n\n\n\n\n\n","category":"function"},{"location":"dictvectors.html#Rimu.Interfaces.localpart","page":"Dict vectors","title":"Rimu.Interfaces.localpart","text":"localpart(dv) -> AbstractDVec\n\nGet the part of dv that is located on this MPI rank. Returns dv itself for vectors that can't be MPI distributed (DVecs and InitiatorDVecs).\n\n\n\n\n\n","category":"function"},{"location":"dictvectors.html#Rimu.Interfaces.apply_operator!","page":"Dict vectors","title":"Rimu.Interfaces.apply_operator!","text":"apply_operator!(working_memory, target, source, operator, boost=1, compress=Val(true)) ->\n    stat_names, stats, working_memory, target\n\nPerform a single matrix(/operator)-vector multiplication:\n\nv^(n + 1) = hatT v^(n) \n\nwhere hatT is the operator, v^(n+1) is the target and v^(n) is the source. The working_memory can be used as temporary storage.\n\nThe boost argument is passed to apply_column! and increases the number of spawns performed. For the operator to be applied without compressing the vector after, set compress to Val(false).\n\nWhether the operation is performed in a stochastic, semistochastic, or determistic way is controlled by the trait StochasticStyle(target). See StochasticStyle.\n\nReturns the step stats generated by the StochasticStyle, the working memory and the target vector. target and working_memory may be mutated and/or swapped.\n\n\n\n\n\n","category":"function"},{"location":"dictvectors.html#Rimu.Interfaces.sort_into_targets!","page":"Dict vectors","title":"Rimu.Interfaces.sort_into_targets!","text":"sort_into_targets!(target, source, stats) -> target, source, agg_stats\n\nAggregate coefficients from source to target and from stats to agg_stats according to thread- or MPI-level parallelism.\n\nReturns the new target and source, as the sorting process may involve swapping them.\n\n\n\n\n\n","category":"function"},{"location":"dictvectors.html#Rimu.Interfaces.working_memory","page":"Dict vectors","title":"Rimu.Interfaces.working_memory","text":"working_memory(dv::AbstractDVec)\n\nCreate a working memory instance compatible with dv. The working memory must be compatible with sort_into_targets! and apply_operator!.\n\n\n\n\n\n","category":"function"},{"location":"dictvectors.html#Supported-operations","page":"Dict vectors","title":"Supported operations","text":"","category":"section"},{"location":"dictvectors.html","page":"Dict vectors","title":"Dict vectors","text":"AbstractDVecs generally support most operations that are defined on Vectors and Dicts. This includes the interface from VectorInterface.jl, and many functions from the LinearAlgebra standard library.","category":"page"},{"location":"dictvectors.html","page":"Dict vectors","title":"Dict vectors","text":"A significant difference between AbstractDVecs, Vectors, and Dicts, is that iteration on them is disabled by default. Iteration must be explicitly performed on keys, values, or pairs, however, it is highly recommended you use mapreduce, reduce, or similar functions when performing reductions, as that will make the operations compatible with MPI.","category":"page"},{"location":"dictvectors.html","page":"Dict vectors","title":"Dict vectors","text":"In addition, Rimu defines the following function.","category":"page"},{"location":"dictvectors.html","page":"Dict vectors","title":"Dict vectors","text":"walkernumber\nwalkernumber_and_length\ndot_from_right","category":"page"},{"location":"dictvectors.html#Rimu.DictVectors.walkernumber","page":"Dict vectors","title":"Rimu.DictVectors.walkernumber","text":"walkernumber(md::MPIData)\n\nCompute the walkernumber of the distributed data on every MPI rank with MPI.Allreduce. MPI syncronizing.\n\n\n\n\n\nwalkernumber(v)\n\nCompute the number of walkers in v. It is used for updating the shift. Overload this function for modifying population control.\n\nIn most cases walkernumber(v) is identical to norm(v, 1). For AbstractDVecs with complex coefficients it reports the one norm separately for the real and the imaginary part as a ComplexF64. See Norm1ProjectorPPop.\n\n\n\n\n\n","category":"function"},{"location":"dictvectors.html#Rimu.DictVectors.walkernumber_and_length","page":"Dict vectors","title":"Rimu.DictVectors.walkernumber_and_length","text":"walkernumber_and_length(v)\n\nCompute walkernumber and length at the same time. When MPI is used, this is more efficient than calling them separately.\n\n\n\n\n\n","category":"function"},{"location":"dictvectors.html#Rimu.Interfaces.dot_from_right","page":"Dict vectors","title":"Rimu.Interfaces.dot_from_right","text":"dot_from_right(w, op::AbstractObservable, v)\n\nInternal function evaluates the 3-argument dot() function in order from right to left.\n\n\n\n\n\n","category":"function"},{"location":"dictvectors.html#Projectors","page":"Dict vectors","title":"Projectors","text":"","category":"section"},{"location":"dictvectors.html","page":"Dict vectors","title":"Dict vectors","text":"AbstractProjector\nNormProjector\nNorm2Projector\nUniformProjector\nNorm1ProjectorPPop\nRimu.DictVectors.FrozenDVec\nRimu.DictVectors.FrozenPDVec","category":"page"},{"location":"dictvectors.html#Rimu.DictVectors.AbstractProjector","page":"Dict vectors","title":"Rimu.DictVectors.AbstractProjector","text":"Abstract supertype for projectors to be used in in lieu of DVecs or Vectors in dot products. Implemented subtypes:\n\nUniformProjector\nNormProjector\nNorm2Projector\nNorm1ProjectorPPop\n\nSee also PostStepStrategy for use of projectors in ProjectorMonteCarloProblem.\n\nInterface\n\nDefine a method for LinearAlgebra.dot(projector, v).\n\n\n\n\n\n","category":"type"},{"location":"dictvectors.html#Rimu.DictVectors.NormProjector","page":"Dict vectors","title":"Rimu.DictVectors.NormProjector","text":"NormProjector() <: AbstractProjector\n\nResults in computing the one-norm when used in dot(). E.g.\n\ndot(NormProjector(),x)\n-> norm(x,1)\n\nNormProjector() thus represents the vector sign.(x).\n\nSee also PostStepStrategy, and AbstractProjector for use of projectors in ProjectorMonteCarloProblem.\n\n\n\n\n\n","category":"type"},{"location":"dictvectors.html#Rimu.DictVectors.Norm2Projector","page":"Dict vectors","title":"Rimu.DictVectors.Norm2Projector","text":"Norm2Projector() <: AbstractProjector\n\nResults in computing the two-norm when used in dot(). E.g.\n\ndot(NormProjector(),x)\n-> norm(x,2) # with type Float64\n\nSee also PostStepStrategy, and AbstractProjector for use of projectors in ProjectorMonteCarloProblem.\n\n\n\n\n\n","category":"type"},{"location":"dictvectors.html#Rimu.DictVectors.UniformProjector","page":"Dict vectors","title":"Rimu.DictVectors.UniformProjector","text":"UniformProjector() <: AbstractProjector\n\nRepresents a vector with all elements 1. To be used with dot(). Minimizes memory allocations.\n\nUniformProjector()⋅v == sum(v)\ndot(UniformProjector(), LO, v) == sum(LO*v)\n\nSee also PostStepStrategy, and AbstractProjector for use of projectors in ProjectorMonteCarloProblem.\n\n\n\n\n\n","category":"type"},{"location":"dictvectors.html#Rimu.DictVectors.Norm1ProjectorPPop","page":"Dict vectors","title":"Rimu.DictVectors.Norm1ProjectorPPop","text":"Norm1ProjectorPPop() <: AbstractProjector\n\nResults in computing the one-norm per population when used in dot(). E.g.\n\ndot(Norm1ProjectorPPop(),x)\n-> norm(real.(x),1) + im*norm(imag.(x),1)\n\nSee also PostStepStrategy, and AbstractProjector for use of projectors in ProjectorMonteCarloProblem.\n\n\n\n\n\n","category":"type"},{"location":"dictvectors.html#Rimu.DictVectors.FrozenDVec","page":"Dict vectors","title":"Rimu.DictVectors.FrozenDVec","text":"FrozenDVec\n\nA frozen DVec(s) can't be modified or used in the conventional manner, but support faster dot products. See: freeze.\n\n\n\n\n\n","category":"type"},{"location":"dictvectors.html#Rimu.DictVectors.FrozenPDVec","page":"Dict vectors","title":"Rimu.DictVectors.FrozenPDVec","text":"FrozenPDVec\n\nParallel version of FrozenDVec. See: freeze, PDVec.\n\n\n\n\n\n","category":"type"},{"location":"dictvectors.html#Initiator-rules","page":"Dict vectors","title":"Initiator rules","text":"","category":"section"},{"location":"dictvectors.html","page":"Dict vectors","title":"Dict vectors","text":"Rimu.DictVectors.InitiatorRule\nRimu.DictVectors.AbstractInitiatorValue\nRimu.DictVectors.InitiatorValue\nRimu.DictVectors.initiator_valtype\nRimu.DictVectors.to_initiator_value\nRimu.DictVectors.from_initiator_value\nRimu.DictVectors.Initiator\nRimu.DictVectors.SimpleInitiator\nRimu.DictVectors.CoherentInitiator\nRimu.DictVectors.NonInitiator\nRimu.DictVectors.NonInitiatorValue","category":"page"},{"location":"dictvectors.html#Rimu.DictVectors.InitiatorRule","page":"Dict vectors","title":"Rimu.DictVectors.InitiatorRule","text":"InitiatorRule{V}\n\nAbstract type for defining initiator rules for InitiatorDVec. Concrete implementations:\n\nInitiator\nSimpleInitiator\nCoherentInitiator\nNonInitiator\n\nExtended Help\n\nInitiatorRules define how to store and retrieve data from associated AbstractInitiatorValues. When defining a new InitiatorRule, also define the following:\n\ninitiator_valtype\nfrom_initiator_value\nto_initiator_value\n\n\n\n\n\n","category":"type"},{"location":"dictvectors.html#Rimu.DictVectors.AbstractInitiatorValue","page":"Dict vectors","title":"Rimu.DictVectors.AbstractInitiatorValue","text":"abstract type AbstractInitiatorValue{V}\n\nA value equipped with additional information that enables a variation of the initiator approximation. To be used with PDVec, InitiatorDVec and InitiatorRules.\n\nMust define:\n\nBase.zero, Base.:+, Base.:-, Base.:*\nfrom_initiator_value and to_initiator_value\n\n\n\n\n\n","category":"type"},{"location":"dictvectors.html#Rimu.DictVectors.InitiatorValue","page":"Dict vectors","title":"Rimu.DictVectors.InitiatorValue","text":"InitiatorValue{V}(; safe::V, unsafe::V, initiator::V) where V\n\nComposite \"walker\" with three fields. For use with InitiatorDVecs.\n\n\n\n\n\n","category":"type"},{"location":"dictvectors.html#Rimu.DictVectors.initiator_valtype","page":"Dict vectors","title":"Rimu.DictVectors.initiator_valtype","text":"initiator_valtype(rule::InitiatorRule, T)\n\nReturn the AbstractInitiatorValue{T} that is employed by the rule.\n\n\n\n\n\n","category":"function"},{"location":"dictvectors.html#Rimu.DictVectors.to_initiator_value","page":"Dict vectors","title":"Rimu.DictVectors.to_initiator_value","text":"to_initiator_value(::InitiatorRule, k::K, v::V, parent)\n\nConvert v to an AbstractInitiatorValue, taking the initiator rule and the parent that spawned it into account.\n\n\n\n\n\n","category":"function"},{"location":"dictvectors.html#Rimu.DictVectors.from_initiator_value","page":"Dict vectors","title":"Rimu.DictVectors.from_initiator_value","text":"from_initiator_value(i::InitiatorRule, v::AbstractInitiatorValue)\n\nConvert the AbstractInitiatorValue v into a scalar value according to the InitiatorRule i.\n\n\n\n\n\n","category":"function"},{"location":"dictvectors.html#Rimu.DictVectors.Initiator","page":"Dict vectors","title":"Rimu.DictVectors.Initiator","text":"Initiator(threshold = 1.0) <: InitiatorRule\n\nInitiator rule to be passed to PDVec or InitiatorDVec. An initiator is a configuration add with a coefficient with magnitude abs(v[add]) > threshold. The threshold can be passed as a keyword argument. Rules:\n\nInitiators can spawn anywhere.\nNon-initiators can spawn to initiators.\n\nSee InitiatorRule.\n\n\n\n\n\n","category":"type"},{"location":"dictvectors.html#Rimu.DictVectors.SimpleInitiator","page":"Dict vectors","title":"Rimu.DictVectors.SimpleInitiator","text":"SimpleInitiator(threshold = 1.0) <: InitiatorRule\n\nInitiator rule to be passed to PDVec or InitiatorDVec. An initiator is a configuration add with a coefficient with magnitude abs(v[add]) > threshold. The threshold can be passed as a keyword argument. Rules:\n\nInitiators can spawn anywhere.\nNon-initiators cannot spawn.\n\nSee InitiatorRule.\n\n\n\n\n\n","category":"type"},{"location":"dictvectors.html#Rimu.DictVectors.CoherentInitiator","page":"Dict vectors","title":"Rimu.DictVectors.CoherentInitiator","text":"CoherentInitiator(threshold = 1.0) <: InitiatorRule\n\nInitiator rule to be passed to PDVec or InitiatorDVec. An initiator is a configuration add with a coefficient with magnitude abs(v[add]) > threshold. The threshold can be passed as a keyword argument. Rules:\n\nInitiators can spawn anywhere.\nNon-initiators can spawn to initiators.\nMultiple non-initiators can spawn to a single non-initiator if their contributions add up to a value greater than the initiator threshold.\n\nSee InitiatorRule.\n\n\n\n\n\n","category":"type"},{"location":"dictvectors.html#Rimu.DictVectors.NonInitiator","page":"Dict vectors","title":"Rimu.DictVectors.NonInitiator","text":"NonInitiator() <: InitiatorRule\n\nInitiator rule that disables the approximation. This is the default setting for PDVec.\n\nSee InitiatorRule.\n\n\n\n\n\n","category":"type"},{"location":"dictvectors.html#Rimu.DictVectors.NonInitiatorValue","page":"Dict vectors","title":"Rimu.DictVectors.NonInitiatorValue","text":"NonInitiatorValue{V}\n\nValue that does not contain any additional information - used with NonInitiator, the default initiator rule for PDVec.\n\n\n\n\n\n","category":"type"},{"location":"dictvectors.html#PDVec-internals","page":"Dict vectors","title":"PDVec internals","text":"","category":"section"},{"location":"dictvectors.html#Working-memory","page":"Dict vectors","title":"Working memory","text":"","category":"section"},{"location":"dictvectors.html","page":"Dict vectors","title":"Dict vectors","text":"Modules = [DictVectors]\nPages = [\"pdworkingmemory.jl\"]","category":"page"},{"location":"dictvectors.html#Rimu.DictVectors.FirstColumnIterator","page":"Dict vectors","title":"Rimu.DictVectors.FirstColumnIterator","text":"FirstColumnIterator{W,D} <: AbstractVector{D}\n\nIterates segments in the first column of a working memory that belong to a specified rank.\n\nSee PDWorkingMemory, remote_segments and local_segments.\n\n\n\n\n\n","category":"type"},{"location":"dictvectors.html#Rimu.DictVectors.PDWorkingMemory","page":"Dict vectors","title":"Rimu.DictVectors.PDWorkingMemory","text":"PDWorkingMemory(t::PDVec)\n\nThe working memory that handles threading and MPI distribution for operations that involve operators, such as FCIQMC propagation, operator-vector multiplication and three-way dot products with PDVecs.\n\nThe working memory is structured as a two-dimensional array of segments, which themselves are Dicts (see PDVec). The number of rows in this array is equal to the number of segments across all MPI ranks (covering the entire address space), while the number of columns corresponds to the number of segments in the current MPI rank (i.e. column corresponds to the part of the address space that is local to the current rank).\n\nThe purpose of this organisation is to allow spawning in parallel without using locks or atomic operations. The spawning is performed by applying the following sequence of operations:\n\nperform_spawns!: each segment in the PDVec is multiplied by the operator independently, with the results being stored in a column of the working memory.\ncollect_local!: the rows of the working memory are summed to the first column.\nsynchronize_remote!: the segments corresponding to other MPI ranks are distributed and transferred to the first column.\nmove_and_compress!: the results are stochastically compressed and moved to the result PDVec\n\nWhen used with three-argument dot products, a full copy of the left-hand side vector is materialized in the first column of the working memory on all ranks.\n\n\n\n\n\n","category":"type"},{"location":"dictvectors.html#Rimu.DictVectors.PDWorkingMemoryColumn","page":"Dict vectors","title":"Rimu.DictVectors.PDWorkingMemoryColumn","text":"PDWorkingMemoryColumn\n\nA column in PDWorkingMemory. Supports getindex, deposit! and StochasticStyle and acts as a target for spawning. Can be used as a target in a three-way dot-product.\n\n\n\n\n\n","category":"type"},{"location":"dictvectors.html#Rimu.DictVectors.collect_local!-Tuple{PDWorkingMemory}","page":"Dict vectors","title":"Rimu.DictVectors.collect_local!","text":"collect_local!(w::PDWorkingMemory)\n\nSum each row in w and store the result in the first column. This step must be performed before using local_segments or remote_segments to move the values elsewhere.\n\nSee PDWorkingMemory.\n\n\n\n\n\n","category":"method"},{"location":"dictvectors.html#Rimu.DictVectors.first_column-Union{Tuple{PDWorkingMemory{K, V, W, S}}, Tuple{S}, Tuple{W}, Tuple{V}, Tuple{K}} where {K, V, W, S}","page":"Dict vectors","title":"Rimu.DictVectors.first_column","text":"first_column(::PDWorkingMemory)\n\nReturn the first column of the working memory. This is where the vectors are collected with collect_local!, synchronize_remote!, copy_to_local!.\n\nSee PDWorkingMemory.\n\n\n\n\n\n","category":"method"},{"location":"dictvectors.html#Rimu.DictVectors.local_segments-Tuple{PDWorkingMemory}","page":"Dict vectors","title":"Rimu.DictVectors.local_segments","text":"local_segments(w::PDWorkingMemory)\n\nReturns iterator over the segments in the first column of w on the current rank. Iterates Dicts.\n\nSee PDWorkingMemory.\n\n\n\n\n\n","category":"method"},{"location":"dictvectors.html#Rimu.DictVectors.move_and_compress!-Tuple{PDVec, PDWorkingMemory}","page":"Dict vectors","title":"Rimu.DictVectors.move_and_compress!","text":"move_and_compress!(dst::PDVec, src::PDWorkingMemory)\nmove_and_compress!(::CompressionStrategy, dst::PDVec, src::PDWorkingMemory)\n\nMove the values in src to dst, compressing the according to the CompressionStrategy on the way. This step can only be performed after collect_local! and synchronize_remote!.\n\nSee PDWorkingMemory.\n\n\n\n\n\n","category":"method"},{"location":"dictvectors.html#Rimu.DictVectors.num_columns-Tuple{PDWorkingMemory}","page":"Dict vectors","title":"Rimu.DictVectors.num_columns","text":"num_columns(w::PDWorkingMemory) -> Int\n\nNumber of columns in the working memory. The number of rows is equal to the number of segments in the local MPI rank.\n\nSee PDWorkingMemory.\n\n\n\n\n\n","category":"method"},{"location":"dictvectors.html#Rimu.DictVectors.num_rows-Tuple{PDWorkingMemory}","page":"Dict vectors","title":"Rimu.DictVectors.num_rows","text":"num_rows(w::PDWorkingMemory) -> Int\n\nNumber of rows in the working memory. The number of rows is equal to the number of segments accross all MPI ranks.\n\nSee PDWorkingMemory.\n\n\n\n\n\n","category":"method"},{"location":"dictvectors.html#Rimu.DictVectors.perform_spawns!-Tuple{PDWorkingMemory, PDVec, Any, Any}","page":"Dict vectors","title":"Rimu.DictVectors.perform_spawns!","text":"perform_spawns!(w::PDWorkingMemory, v::PDVec, ham, boost)\n\nPerform spawns from v through ham to w. boost increases the number of spawns without affecting the expectation value of the process.\n\nSee PDVec and PDWorkingMemory.\n\n\n\n\n\n","category":"method"},{"location":"dictvectors.html#Rimu.DictVectors.remote_segments-Tuple{PDWorkingMemory, Any}","page":"Dict vectors","title":"Rimu.DictVectors.remote_segments","text":"remote_segments(w::PDWorkingMemory, rank_id)\n\nReturns iterator over the segments in the first column of w that belong to rank rank_id. Iterates Dicts.\n\nSee PDWorkingMemory.\n\n\n\n\n\n","category":"method"},{"location":"dictvectors.html#Rimu.DictVectors.synchronize_remote!-Tuple{PDWorkingMemory}","page":"Dict vectors","title":"Rimu.DictVectors.synchronize_remote!","text":"synchronize_remote!([::Communicator,] w::PDWorkingMemory) -> names, values\n\nSynchronize non-local segments across MPI and add the results to the first column. Controlled by the Communicator. This can only be perfomed after collect_local!.\n\nShould return a Tuple of names and a Tuple of values to report.\n\nSee PDWorkingMemory.\n\n\n\n\n\n","category":"method"},{"location":"dictvectors.html#Communicators","page":"Dict vectors","title":"Communicators","text":"","category":"section"},{"location":"dictvectors.html","page":"Dict vectors","title":"Dict vectors","text":"Modules = [DictVectors]\nPages = [\"communicators.jl\"]","category":"page"},{"location":"dictvectors.html#Rimu.DictVectors.AllToAll","page":"Dict vectors","title":"Rimu.DictVectors.AllToAll","text":"AllToAll{K,V}(; mpi_comm, n_segments, report) <: Communicator\n\nCommunicator that uses collective communication using MPI.Alltoall[v]!.\n\nKeyword arguments\n\nmpi_comm=MPI.COMM_WORLD: the MPI communicator to use.\nn_segments=Threads.nthreads(): the number of segments per rank to use. Should match the PDVec the communicator is used with.\nreport=false: if set to true, report MPI communication times during a projector Monte Carlo run.\n\nSee also: Communicator.\n\n\n\n\n\n","category":"type"},{"location":"dictvectors.html#Rimu.DictVectors.Communicator","page":"Dict vectors","title":"Rimu.DictVectors.Communicator","text":"abstract type Communicator\n\nCommunicators are used to handle MPI communication when using PDVecs. Currently, three implementations are provided, NotDistributed, AllToAll and PointToPoint. The communicator is picked automatically according to the number of MPI ranks available.\n\nWhen implementing a communicator, use local_segments and remote_segments.\n\nInterface\n\nsynchronize_remote!\nmpi_rank\nmpi_size\nmpi_comm\n\nOptional interface\n\nis_distributed: defaults to returning true.\nmerge_remote_reductions: defaults to using MPI.Allreduce.\ntotal_num_segments: defaults to n * mpi_size.\ntarget_segment: defaults to selecting using fastrange  to pick the segment.\n\nSee also: PDVec, PDWorkingMemory.\n\n\n\n\n\n","category":"type"},{"location":"dictvectors.html#Rimu.DictVectors.LocalPart","page":"Dict vectors","title":"Rimu.DictVectors.LocalPart","text":"LocalPart <: Communicator\n\nWhen localpart is used, the vector's Communicator is replaced with this. This allows iteration and local reductions.\n\n\n\n\n\n","category":"type"},{"location":"dictvectors.html#Rimu.DictVectors.NestedSegmentedBuffer","page":"Dict vectors","title":"Rimu.DictVectors.NestedSegmentedBuffer","text":"NestedSegmentedBuffer{T}(nrows) <: AbstractMatrix{AbstractVector{T}}\n\nMatrix of vectors stored in a single buffer with collective MPI communication support. The number of rows in the matrix is fixed to nrows.\n\nUsed in the AllToAll communication strategy, where each column corresponds to an MPI rank and each row corresponds to a segment in the PDVec.\n\nSupported operations\n\nappend_collections!: add a column to the matrix.\nappend_empty_column!: add an empty column to the matrix.\nmpi_exchange_alltoall!: each rank sends the i-th column of the matrix to the (i-1)-st rank.\nmpi_exchange_allgather!: each rank sends the 1-st column of the matrix to all ranks.\n\nSee also: SegmentedBuffer.\n\n\n\n\n\n","category":"type"},{"location":"dictvectors.html#Rimu.DictVectors.NotDistributed","page":"Dict vectors","title":"Rimu.DictVectors.NotDistributed","text":"NotDistributed <: Communicator\n\nThis Communicator is used when MPI is not available.\n\n\n\n\n\n","category":"type"},{"location":"dictvectors.html#Rimu.DictVectors.PointToPoint","page":"Dict vectors","title":"Rimu.DictVectors.PointToPoint","text":"PointToPoint{K,V}(; mpi_comm, report) <: Communicator\n\nMPI Communicator that uses circular communication using MPI.Isend and MPI.Recv!.\n\nKeyword arguments\n\nmpi_comm=MPI.COMM_WORLD: the MPI communicator to use.\nreport=false: if set to true, report MPI communication times during a projector Monte Carlo run.\n\n\n\n\n\n","category":"type"},{"location":"dictvectors.html#Rimu.DictVectors.SegmentedBuffer","page":"Dict vectors","title":"Rimu.DictVectors.SegmentedBuffer","text":"SegmentedBuffer{T}() <: AbstractVector{AbstractVector{T}}\n\nBehaves like a vector of vectors, but is stored in a single buffer. It can be sent/received over MPI keeping its structure intact. Used in the PointToPoint communication strategy.\n\nSupported operations\n\nreplace_collections!: insert data into the buffers\nmpi_send: send the contents of a buffer to a given rank\nmpi_recv_any!: receive a message sent by mpi_send from any rank, storing the contents in this buffer\n\nSee also: NestedSegmentedBuffer.\n\n\n\n\n\n","category":"type"},{"location":"dictvectors.html#Rimu.DictVectors.append_collections!-Tuple{Rimu.DictVectors.NestedSegmentedBuffer, Any}","page":"Dict vectors","title":"Rimu.DictVectors.append_collections!","text":"append_collections!(buf::NestedSegmentedBuffer, iters)\n\nAdd a column to buf. The length of iters should match buf.nrows.\n\nSee also: NestedSegmentedBuffer, append_empty_column!.\n\n\n\n\n\n","category":"method"},{"location":"dictvectors.html#Rimu.DictVectors.append_empty_column!-Tuple{Rimu.DictVectors.NestedSegmentedBuffer}","page":"Dict vectors","title":"Rimu.DictVectors.append_empty_column!","text":"append_empty_column!(buf::NestedSegmentedBuffer)\n\nLike append_collections!, but adds an empty column.\n\nSee also: NestedSegmentedBuffer, append_collections!.\n\n\n\n\n\n","category":"method"},{"location":"dictvectors.html#Rimu.DictVectors.copy_to_local!","page":"Dict vectors","title":"Rimu.DictVectors.copy_to_local!","text":"copy_to_local!([::Communicator,] w::PDWorkingMemory, t::PDVec) -> PDVec\n\nCopy pairs in t from all ranks and return them as a (possibly) new PDVec, possibly using the PDWorkingMemory as temporary storage.\n\nSee also: PDVec, PDWorkingMemory, Communicator.\n\n\n\n\n\n","category":"function"},{"location":"dictvectors.html#Rimu.DictVectors.is_distributed-Tuple{Rimu.DictVectors.Communicator}","page":"Dict vectors","title":"Rimu.DictVectors.is_distributed","text":"is_distributed(::Communicator)\n\nReturn true if Communicator operates over MPI.\n\n\n\n\n\n","category":"method"},{"location":"dictvectors.html#Rimu.DictVectors.merge_remote_reductions-Tuple{Rimu.DictVectors.Communicator, Any, Any}","page":"Dict vectors","title":"Rimu.DictVectors.merge_remote_reductions","text":"merge_remote_reductions(c::Communicator, op, x)\n\nMerge the results of reductions over MPI. By default, it uses MPI.Allreduce.\n\nSee also: Communicator.\n\n\n\n\n\n","category":"method"},{"location":"dictvectors.html#Rimu.DictVectors.mpi_comm","page":"Dict vectors","title":"Rimu.DictVectors.mpi_comm","text":"mpi_comm(::Communicator) -> MPI.Comm\n\nReturn the MPI.Comm that the Communicator operates on.\n\n\n\n\n\n","category":"function"},{"location":"dictvectors.html#Rimu.DictVectors.mpi_exchange_allgather!-Tuple{Rimu.DictVectors.NestedSegmentedBuffer, Rimu.DictVectors.NestedSegmentedBuffer, Any}","page":"Dict vectors","title":"Rimu.DictVectors.mpi_exchange_allgather!","text":"mpi_exchange_allgather!(src::NestedSegmentedBuffer, dst::NestedSegmentedBuffer, comm)\n\nThe first and only column in src will be sent to all ranks. The data from all ranks will be gethered in dst. After this operation, dst will contain the same data on all ranks.\n\nSee also NestedSegmentedBuffer, mpi_exchange_alltoall!.\n\n\n\n\n\n","category":"method"},{"location":"dictvectors.html#Rimu.DictVectors.mpi_exchange_alltoall!-Tuple{Rimu.DictVectors.NestedSegmentedBuffer, Rimu.DictVectors.NestedSegmentedBuffer, Any}","page":"Dict vectors","title":"Rimu.DictVectors.mpi_exchange_alltoall!","text":"mpi_exchange_alltoall!(src::NestedSegmentedBuffer, dst::NestedSegmentedBuffer, comm)\n\nThe n-th column from src will be sent to rank n-1. The data sent from rank r will be stored in the (r+1)-st column of dst.\n\nSee also: NestedSegmentedBuffer, mpi_exchange_allgather!.\n\n\n\n\n\n","category":"method"},{"location":"dictvectors.html#Rimu.DictVectors.mpi_rank","page":"Dict vectors","title":"Rimu.DictVectors.mpi_rank","text":"mpi_rank(::Communicator) -> Int\n\nReturn the MPI rank of the Communicator.\n\n\n\n\n\n","category":"function"},{"location":"dictvectors.html#Rimu.DictVectors.mpi_recv_any!-Tuple{Rimu.DictVectors.SegmentedBuffer, Any}","page":"Dict vectors","title":"Rimu.DictVectors.mpi_recv_any!","text":"mpi_recv_any!(buf::SegmentedBuffer, comm::MPI_Comm) -> Int\n\nFind a source that is ready to send a buffer and receive from it. Return the rank ID of the sender.\n\n\n\n\n\n","category":"method"},{"location":"dictvectors.html#Rimu.DictVectors.mpi_send-Tuple{Rimu.DictVectors.SegmentedBuffer, Any, Any}","page":"Dict vectors","title":"Rimu.DictVectors.mpi_send","text":"mpi_send(buf::SegmentedBuffer, dest, comm::MPI.Comm)\n\nSend the buffer to rank with id dest.\n\n\n\n\n\n","category":"method"},{"location":"dictvectors.html#Rimu.DictVectors.mpi_size","page":"Dict vectors","title":"Rimu.DictVectors.mpi_size","text":"mpi_size(::Communicator) -> Int\n\nReturn the total number of MPI ranks in the Communicator.\n\n\n\n\n\n","category":"function"},{"location":"dictvectors.html#Rimu.DictVectors.replace_collections!-Tuple{Rimu.DictVectors.SegmentedBuffer, Any}","page":"Dict vectors","title":"Rimu.DictVectors.replace_collections!","text":"replace_collections!(buf::SegmentedBuffer, iters)\n\nInsert collections in iters into a SegmentedBuffer.\n\njulia> using Rimu.DictVectors: SegmentedBuffer\n\njulia> buf = SegmentedBuffer{Int}()\n0-element SegmentedBuffer{Int64}\n\njulia> Rimu.DictVectors.replace_collections!(buf, [[1,2,3], [4,5]])\n2-element SegmentedBuffer{Int64}:\n [1, 2, 3]\n [4, 5]\n\njulia> Rimu.DictVectors.replace_collections!(buf, [[1], [2,3], [4]])\n3-element SegmentedBuffer{Int64}:\n [1]\n [2, 3]\n [4]\n\n\n\n\n\n","category":"method"},{"location":"dictvectors.html#Rimu.DictVectors.target_segment-Tuple{Rimu.DictVectors.Communicator, Any, Any}","page":"Dict vectors","title":"Rimu.DictVectors.target_segment","text":"target_segment(c::Communicator, k, num_segments) -> target, is_local\n\nThis function is used to determine where in the PDVec a key should be stored. If the key is local (stored on the same MPI rank), return its segment index and true. If the key is non-local, return any value and false.\n\nSee also: PDVec, Communicator.\n\n\n\n\n\n","category":"method"},{"location":"dictvectors.html#Rimu.DictVectors.total_num_segments-Tuple{Rimu.DictVectors.Communicator, Any}","page":"Dict vectors","title":"Rimu.DictVectors.total_num_segments","text":"total_num_segments(c::Communicator, n) -> Int\n\nReturn the total number of segments, including the remote ones, where n is number of local segments.\n\nSee also: PDVec, Communicator.\n\n\n\n\n\n","category":"method"},{"location":"dictvectors.html#Index","page":"Dict vectors","title":"Index","text":"","category":"section"},{"location":"dictvectors.html","page":"Dict vectors","title":"Dict vectors","text":"Pages   = [\"dictvectors.md\"]","category":"page"}]
}
