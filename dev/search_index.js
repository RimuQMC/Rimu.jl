var documenterSearchIndex = {"docs":
[{"location":"mpi.html#Working-with-MPI","page":"Using MPI","title":"Working with MPI","text":"","category":"section"},{"location":"mpi.html","page":"Using MPI","title":"Using MPI","text":"If you are using PDVecs to store your vectors, working with MPI should be fairly straightforward. Generally, PDVec will work with MPI automatically, as long as MPI is set up correctly and a few common pitfalls are avoided.","category":"page"},{"location":"mpi.html","page":"Using MPI","title":"Using MPI","text":"Rimu includes an unexported module RMPI, which must be imported to access additional MPI-related functionality.","category":"page"},{"location":"mpi.html#Configuring-MPI","page":"Using MPI","title":"Configuring MPI","text":"","category":"section"},{"location":"mpi.html","page":"Using MPI","title":"Using MPI","text":"When running on a cluster, ensure that MPI.jl is using the system binary. See the MPI.jl documentation for more information.","category":"page"},{"location":"mpi.html","page":"Using MPI","title":"Using MPI","text":"It is always a good idea to start your script with a quick test that ensures the MPI is set up correctly. One way to do this is to open with","category":"page"},{"location":"mpi.html","page":"Using MPI","title":"Using MPI","text":"using Rimu.RMPI\nmpi_allprintln(\"hello\")","category":"page"},{"location":"mpi.html","page":"Using MPI","title":"Using MPI","text":"which should print something like","category":"page"},{"location":"mpi.html","page":"Using MPI","title":"Using MPI","text":"[ rank 0: hello\n[ rank 1: hello\n[ rank 2: hello\n[ rank 3: hello","category":"page"},{"location":"mpi.html","page":"Using MPI","title":"Using MPI","text":"If it prints rank 0 several times, the code will run, but ranks will not communicate.","category":"page"},{"location":"mpi.html#Using-Slurm","page":"Using MPI","title":"Using Slurm","text":"","category":"section"},{"location":"mpi.html","page":"Using MPI","title":"Using MPI","text":"When using PDVec, the recommended setup is to use threads to parallelise the computation within a node, and to only use MPI for inter-node communication. In a slurm script, this is done as follows:","category":"page"},{"location":"mpi.html","page":"Using MPI","title":"Using MPI","text":"...\n#SBATCH --ntasks-per-node=1\n#SBATCH --nodes=4            # replace 4 with the desired number of nodes\n#SBATCH --cpus-per-task=28   # replace 28 with the number of cores available in a node\n#SBATCH --hint=nomultithread # don't use hyperthreading\n...\n\nsrun julia --project -tauto script.jl","category":"page"},{"location":"mpi.html","page":"Using MPI","title":"Using MPI","text":"On some clusters, additional settings must be used with srun, for example the CTCP cluster requires the following.","category":"page"},{"location":"mpi.html","page":"Using MPI","title":"Using MPI","text":"srun mpi=pmi2 julia --project -tauto script.jl","category":"page"},{"location":"mpi.html#Common-pitfalls-with-reducing-functions","page":"Using MPI","title":"Common pitfalls with reducing functions","text":"","category":"section"},{"location":"mpi.html#Using-@mpi_root","page":"Using MPI","title":"Using @mpi_root","text":"","category":"section"},{"location":"mpi.html","page":"Using MPI","title":"Using MPI","text":"Take care to not use reducing functions (such as length, sum, norm, ...) inside @mpi_root blocks. Doing so will only initiate the distributed reduction on one rank only, which will cause the code to go out of sync and freeze. As an example, to report the current length of a vector, calculate the length before the @mpi_root block:","category":"page"},{"location":"mpi.html","page":"Using MPI","title":"Using MPI","text":"len = length(pdvec)\n@mpi_root println(\"vector length is $len\")","category":"page"},{"location":"mpi.html#Threaded-operations-and-reductions","page":"Using MPI","title":"Threaded operations and reductions","text":"","category":"section"},{"location":"mpi.html","page":"Using MPI","title":"Using MPI","text":"When using functions that take anonymous functions, such as map(!), sum, or mapreduce, it is important that the anonymous functions passed to them do not perform any MPI-reducing operations (length, norm, sum, etc.). These anonymous functions are executed on multiple threads and initiating MPI communication from multiple threads may cause issues.","category":"page"},{"location":"mpi.html","page":"Using MPI","title":"Using MPI","text":"As an example, suppose we want to scale a vector by its length by using map!. The correct way to write this code is as","category":"page"},{"location":"mpi.html","page":"Using MPI","title":"Using MPI","text":"len = length(pdvec)\nmap!(values(pdvec)) do x\n\tx / len\nend","category":"page"},{"location":"mpi.html","page":"Using MPI","title":"Using MPI","text":"Similar to the previous example, len is calculated first and not within the body of map!. In this specific case, an even better option is to use the scale! function from VectorInterface.jl:","category":"page"},{"location":"mpi.html","page":"Using MPI","title":"Using MPI","text":"scale!(pdvec, 1 / length(pdvec))","category":"page"},{"location":"projectormontecarlo.html#Projector-Monte-Carlo-/-FCIQMC","page":"Projector Monte Carlo","title":"Projector Monte Carlo / FCIQMC","text":"","category":"section"},{"location":"projectormontecarlo.html","page":"Projector Monte Carlo","title":"Projector Monte Carlo","text":"The purpose of Projector Monte Carlo is to stochastically sample the ground state, i.e. the  eigenvector corresponding to the lowest eigenvalue of a quantum Hamiltonian, or more generally,  a very large matrix. Rimu implements a flavor of Projector Monte Carlo called  Full Configuration Interaction Quantum Monte Carlo (FCIQMC).","category":"page"},{"location":"projectormontecarlo.html#ProjectorMonteCarloProblem","page":"Projector Monte Carlo","title":"ProjectorMonteCarloProblem","text":"","category":"section"},{"location":"projectormontecarlo.html","page":"Projector Monte Carlo","title":"Projector Monte Carlo","text":"To run a projector Monte Carlo simulation you set up a problem with ProjectorMonteCarloProblem and solve it with solve. Alternatively you can initialize a PMCSimulation struct, step!  through time steps, and solve! it to completion. ","category":"page"},{"location":"projectormontecarlo.html","page":"Projector Monte Carlo","title":"Projector Monte Carlo","text":"ProjectorMonteCarloProblem\ninit\nsolve\nsolve!\nstep!","category":"page"},{"location":"projectormontecarlo.html#Rimu.ProjectorMonteCarloProblem-projectormontecarlo","page":"Projector Monte Carlo","title":"Rimu.ProjectorMonteCarloProblem","text":"ProjectorMonteCarloProblem(hamiltonian::AbstractHamiltonian; kwargs...)\n\nDefines a problem to be solved by projector quantum Monte Carlo (QMC) methods, such as the the FCIQMC algorithm.\n\nCommon keyword arguments and defaults:\n\ntime_step = 0.01: Initial time step size.\nlast_step = 100: Controls the number of steps.\ntarget_walkers = 1_000: Target for the 1-norm of the coefficient vector.\nstart_at = starting_address(hamiltonian): Define the initial state vector(s).   An r  s matrix of state vectors can be passed where r is the   number of replicas and s the number of spectral states. See also   default_starting_vector.\nstyle = IsDynamicSemistochastic(): The StochasticStyle of the simulation.\ninitiator = false: Whether to use initiators. Can be true, false, or a valid   InitiatorRule.\nthreading: Default is to use multithreading and/or MPI if available. Set to true to force PDVec for the starting vector, false for serial computation; may be overridden by start_at.\nreporting_strategy = ReportDFAndInfo(): How and when to report results, see ReportingStrategy.\npost_step_strategy = (): Extract observables (e.g. ProjectedEnergy), see PostStepStrategy.\nn_replicas = 1: Number of synchronised independent simulations.\nreplica_strategy = NoStats(n_replicas): Which results to report from replica simulations, see ReplicaStrategy.\n\nExample\n\njulia> hamiltonian = HubbardReal1D(BoseFS(1,2,3));\n\njulia> problem = ProjectorMonteCarloProblem(hamiltonian; target_walkers = 500, last_step = 100);\n\njulia> simulation = solve(problem);\n\njulia> simulation.success[]\ntrue\n\njulia> size(DataFrame(simulation))\n(100, 9)\n\nFurther keyword arguments:\n\nstarting_step = 1: Starting step of the simulation.\nwalltime = Inf: Maximum time allowed for the simulation.\nsimulation_plan = SimulationPlan(; starting_step, last_step, walltime): Defines the   duration of the simulation. Takes precedence over last_step and walltime.\nζ = 0.08: Damping parameter for the shift update.\nξ = ζ^2/4: Forcing parameter for the shift update.\nshift_strategy = DoubleLogUpdate(; target_walkers, ζ, ξ): How to update the shift,   see ShiftStrategy.\ntime_step_strategy = ConstantTimeStep(): Adjust time step or not, see   TimeStepStrategy.\nalgorithm = FCIQMC(; shift_strategy, time_step_strategy): The algorithm to use.   Currenlty only FCIQMC is implemented.\nshift: Initial shift value or collection of shift values. Determined by default from the   Hamiltonian and the starting vectors.\ninitial_shift_parameters: Initial shift parameters or collection of initial shift   parameters. Overrides shift if provided.\nmaxlength = 2 * target_walkers + 100: Maximum length of the vectors.\ndisplay_name = \"PMCSimulation\": Name displayed in progress bar (via ProgressLogging).\nmetadata: User-supplied metadata to be added to the report. Must be an iterable of pairs or a NamedTuple, e.g. metadata = (\"key1\" => \"value1\", \"key2\" => \"value2\"). All metadata is converted to strings.\nrandom_seed = true: Provide and store a seed for the random number generator. If set to   true, a random seed is generated. If set to number, this number is used as the seed.   The seed is used by solve such that solveing the problem twice will yield identical   results. If set to false, no seed is used and results are not reproducible.\n\nSee also init, solve.\n\n\n\n\n\n","category":"type"},{"location":"projectormontecarlo.html#CommonSolve.init-projectormontecarlo","page":"Projector Monte Carlo","title":"CommonSolve.init","text":"init(p::ExactDiagonalizationProblem, [algorithm]; kwargs...)\n\nInitialize a solver for an ExactDiagonalizationProblem p with an optional algorithm. Returns a solver instance that can be solved with solve.\n\nFor a description of the keyword arguments, see the documentation for ExactDiagonalizationProblem.\n\n\n\n\n\ninit(problem::ProjectorMonteCarloProblem; copy_vectors=true)::PMCSimulation\n\nInitialise a Rimu.PMCSimulation.\n\nSee also ProjectorMonteCarloProblem, solve!, solve, step!, Rimu.PMCSimulation.\n\n\n\n\n\n","category":"function"},{"location":"projectormontecarlo.html#CommonSolve.solve-projectormontecarlo","page":"Projector Monte Carlo","title":"CommonSolve.solve","text":"solve(::ProjectorMonteCarloProblem)::PMCSimulation\n\nInitialize and solve a ProjectorMonteCarloProblem until the last step is completed or the walltime limit is reached.\n\nSee also init, solve!, step!, Rimu.PMCSimulation, and solve(::ExactDiagonalizationProblem).\n\n\n\n\n\n","category":"function"},{"location":"projectormontecarlo.html#CommonSolve.solve!-projectormontecarlo","page":"Projector Monte Carlo","title":"CommonSolve.solve!","text":"solve!(sm::PMCSimulation; kwargs...)::PMCSimulation\n\nSolve a Rimu.PMCSimulation until the last step is completed or the walltime limit is reached.\n\nTo continue a previously completed simulation, set a new last_step or walltime using the keyword arguments. Optionally, changes can be made to the replica_strategy, the post_step_strategy, or the reporting_strategy.\n\nOptional keyword arguments:\n\nlast_step = nothing: Set the last step to a new value and continue the simulation.\nwalltime = nothing: Set the allowed walltime to a new value and continue the simulation.\nreset_time = false: Reset the elapsed_time counter and continue the simulation.\nempty_report = false: Empty the report before continuing the simulation.\nreplica_strategy = nothing: Change the replica strategy. Requires the number of replicas   to match the number of replicas in the simulation sm. Implies empty_report = true.\npost_step_strategy = nothing: Change the post-step strategy. Implies   empty_report = true.\nreporting_strategy = nothing: Change the reporting strategy. Implies   empty_report = true.\nmetadata = nothing: Add metadata to the report.\n\nSee also ProjectorMonteCarloProblem, init, solve, step!, Rimu.PMCSimulation.\n\n\n\n\n\n","category":"function"},{"location":"projectormontecarlo.html#CommonSolve.step!-projectormontecarlo","page":"Projector Monte Carlo","title":"CommonSolve.step!","text":"step!(sm::PMCSimulation)::PMCSimulation\n\nAdvance the simulation by one step.\n\nCalling solve! will advance the simulation until the last step or the walltime is exceeded. When completing the simulation without calling solve!, the simulation report needs to be finalised by calling Rimu.finalize_report!.\n\nSee also ProjectorMonteCarloProblem, init, solve!, solve, Rimu.PMCSimulation.\n\n\n\n\n\n","category":"function"},{"location":"projectormontecarlo.html","page":"Projector Monte Carlo","title":"Projector Monte Carlo","text":"After solve or solve! have been called the returned PMCSimulation contains the results of  the projector Monte Carlo calculation.","category":"page"},{"location":"projectormontecarlo.html#PMCSimulation-and-report-as-a-DataFrame","page":"Projector Monte Carlo","title":"PMCSimulation and report as a DataFrame","text":"","category":"section"},{"location":"projectormontecarlo.html","page":"Projector Monte Carlo","title":"Projector Monte Carlo","text":"Rimu.PMCSimulation","category":"page"},{"location":"projectormontecarlo.html#Rimu.PMCSimulation-projectormontecarlo","page":"Projector Monte Carlo","title":"Rimu.PMCSimulation","text":"PMCSimulation\n\nHolds the state and the results of a projector quantum Monte Carlo (PMC) simulation. Is returned by init(::ProjectorMonteCarloProblem) and solved with solve!(::PMCSimulation).\n\nObtain the results of a simulation sm as a DataFrame with DataFrame(sm).\n\nSee also state_vectors, ProjectorMonteCarloProblem, init, solve!.\n\n\n\n\n\n","category":"type"},{"location":"projectormontecarlo.html","page":"Projector Monte Carlo","title":"Projector Monte Carlo","text":"The DataFrame returned from DataFrame(::PMCSimulation) contains the time series data from  the projector Monte Carlo simulation that is of primary interest for analysis. Depending on the  reporting_strategy and other options passed as keyword arguments to  ProjectorMonteCarloProblem it can have different numbers of rows and columns. The rows  correspond to the reported time steps (Monte Carlo steps). There is at least one column with the name :step. Further columns are usually present with additional data reported from the simulation.","category":"page"},{"location":"projectormontecarlo.html","page":"Projector Monte Carlo","title":"Projector Monte Carlo","text":"For the default option algorithm = FCIQMC(; shift_strategy, time_step_strategy) with a single replica (n_replicas = 1) and single spectral state, the fields :shift, :norm, :len will  be present as well as others depending on the style argument and the post_step_strategy.","category":"page"},{"location":"projectormontecarlo.html","page":"Projector Monte Carlo","title":"Projector Monte Carlo","text":"If multiple replicas or spectral states are requested, then the relevant field names in the  DataFrame will have a suffix identifying the respective replica simulation, e.g. the shifts will be reported as shift_1, shift_2, ... ","category":"page"},{"location":"projectormontecarlo.html","page":"Projector Monte Carlo","title":"Projector Monte Carlo","text":"Many tools for analysing the time series data obtained from a  ProjectorMonteCarloProblem are contained in the Module StatsTools.","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"EditURL = \"../../../scripts/G2-example.jl\"","category":"page"},{"location":"generated/G2-example.html#Example-3:-Calculating-observables","page":"Calculating observables","title":"Example 3: Calculating observables","text":"","category":"section"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"This is an example calculation of the two-body correlation function G_2.","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"A runnable script for this example is located here. Run it with julia G2-example.jl.","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"First, we load the reqired packages. Rimu for FCIQMC calculation, and DataFrames for maniplating the output.","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"using Rimu\nusing Random\nusing DataFrames","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"We use the same Hamiltonian as the first example, a Bose-Hubbard model with 6 particles in 6 sites, with strong interactions (we expect a Mott insulating state).","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"m = n = 6\ninitial_address = near_uniform(BoseFS{n,m})\nH = HubbardReal1D(initial_address; u = 6.0, t = 1.0)","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"HubbardReal1D(fs\"|1 1 1 1 1 1⟩\"; u=6.0, t=1.0)","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"Now, we define the operators for the observables we wish to calculate.","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"dvals = 0:m-1\nG2list = ((G2RealCorrelator(d) for d in dvals)...,)","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"(G2RealCorrelator(0), G2RealCorrelator(1), G2RealCorrelator(2), G2RealCorrelator(3), G2RealCorrelator(4), G2RealCorrelator(5))","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"This is a tuple of G2RealCorrelators, subtypes of AbstractHamiltonian. It calculates the density-density correlation function on a lattice","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"    hatG^(2)(d) = frac1M sum_i^M hatn_i (hatn_i+d - delta_0d)","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"with normalisation","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"    sum_d=0^M-1 langle hatG^(2)(d) rangle = fracN (N-1)M","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"Observables that are defined by expectation values are calculated using the \"replica trick\". Thereby several independent copies or \"replicas\" of the state vector are propagated simultaneously. The reason is to have two (or more) stochastically independent copies of the state vector available such that we can calculate bias-free overlaps. We enable this by defining a ReplicaStrategy. Each replica has its own state and FCIQMC is effectively performed independently on each one.  For calculating observables, we use AllOverlaps for the ReplicaStrategy. At each timestep, after the FCIQMC step is performed on, this strategy calculates the overlaps of every operator with the wavefunctions from each pair of replicas.","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"To obtain an unbiased result, at least two replicas should be used. One can also use more than two to improve the statistics. This is particularly helpful when the walker number is low.","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"n_replicas = 3\nreplica_strategy = AllOverlaps(n_replicas; operator=G2list)","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"AllOverlaps{3, 6, Tuple{G2RealCorrelator{0}, G2RealCorrelator{1}, G2RealCorrelator{2}, G2RealCorrelator{3}, G2RealCorrelator{4}, G2RealCorrelator{5}}, true}((G2RealCorrelator(0), G2RealCorrelator(1), G2RealCorrelator(2), G2RealCorrelator(3), G2RealCorrelator(4), G2RealCorrelator(5)))","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"Other FCIQMC parameters and strategies can be set in the same way as before.","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"steps_equilibrate = 1_000\nsteps_measure = 5_000\ntarget_walkers = 100;\ntime_step = 0.001\n","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"Now, we run FCIQMC. Note that passing an initial vector is optional - if we only pass the style, a vector with the appropriate style is created automatically.","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"problem = ProjectorMonteCarloProblem(H;\n    style=IsDynamicSemistochastic(),\n    time_step,\n    last_step = steps_equilibrate + steps_measure,\n    target_walkers,\n    replica_strategy,\n)\nresult = solve(problem)\ndf = DataFrame(result);","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"The output DataFrame has FCIQMC statistics for each replica (e.g. shift, norm),","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"println(filter(startswith(\"shift_\"), names(df)))","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"[\"shift_1\", \"shift_2\", \"shift_3\"]\n","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"as well as vector-vector overlaps (e.g. c1_dot_c2),","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"println(filter(contains(\"dot\"), names(df)))","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"[\"c1_dot_c2\", \"c1_dot_c3\", \"c2_dot_c3\"]\n","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"and operator overlaps (e.g. c1_Op1_c2) between the replicas.","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"println(filter(contains(\"Op\"), names(df)))","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"[\"c1_Op1_c2\", \"c1_Op2_c2\", \"c1_Op3_c2\", \"c1_Op4_c2\", \"c1_Op5_c2\", \"c1_Op6_c2\", \"c1_Op1_c3\", \"c1_Op2_c3\", \"c1_Op3_c3\", \"c1_Op4_c3\", \"c1_Op5_c3\", \"c1_Op6_c3\", \"c2_Op1_c3\", \"c2_Op2_c3\", \"c2_Op3_c3\", \"c2_Op4_c3\", \"c2_Op5_c3\", \"c2_Op6_c3\"]\n","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"The vector-vector and operator overlaps go into calculating the Rayleigh quotient for an observable","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"    langle hatG^(2)(d) rangle = fracsum_ab mathbfc_a^dagger cdot hatG^(2)(d) cdot mathbfc_bsum_ab mathbfc_a^dagger cdot mathbfc_b ","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"The sum over all replica pairs (a,b), especially in the denominator, helps to avoid errors from poor sampling if the number of walkers is too low.","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"We use the function rayleigh_replica_estimator to calculate the Rayleigh quotient using all replicas in df, returning a RatioBlockingResult. Using the keyword skip will ignore the initial equilibration steps.","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"Now, we can calculate the correlation function for each value of d.","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"println(\"Two-body correlator from $n_replicas replicas:\")\nfor d in dvals\n    r = rayleigh_replica_estimator(df; op_name = \"Op$(d+1)\", skip=steps_equilibrate)\n    println(\"   G2($d) = $(r.f) ± $(r.σ_f)\")\nend","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"Two-body correlator from 3 replicas:\n   G2(0) = 0.21119792169107454 ± 0.0016667754101968382\n   G2(1) = 0.9180168535927166 ± 0.0007214221071056532\n   G2(2) = 0.9819899282480671 ± 0.0006534506096488533\n   G2(3) = 0.9887885146273578 ± 0.0007270628739431278\n   G2(4) = 0.9819899282480671 ± 0.0006534506096488533\n   G2(5) = 0.9180168535927166 ± 0.0007214221071056532\n","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"As expected, the onsite correlation at d=0 is low since this is a Mott insulating state with unit filling fraction, and is close to 10 for all other values of the displacement d.","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"Since we ran multiple independent replicas, we also have multiple estimates of the shift energy.","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"println(\"Shift energy from $n_replicas replicas:\")\nfor i in 1:n_replicas\n    se = shift_estimator(df; shift=\"shift_$i\", skip=steps_equilibrate)\n    println(\"   Replica $i: $(se.mean) ± $(se.err)\")\nend\n","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"Shift energy from 3 replicas:\n   Replica 1: -4.044192106366147 ± 0.1422614717417757\n   Replica 2: -4.037169288818054 ± 0.12933599555266384\n   Replica 3: -4.019882361665802 ± 0.14841517137457744\n","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"This page was generated using Literate.jl.","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"EditURL = \"../../../scripts/BHM-example.jl\"","category":"page"},{"location":"generated/BHM-example.html#Example-1:-1D-Bose-Hubbard-Model","page":"1D Bose-Hubbard Model","title":"Example 1: 1D Bose-Hubbard Model","text":"","category":"section"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"This is an example calculation finding the ground state of a 1D Bose-Hubbard chain with 6 particles in 6 lattice sites.","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"A runnable script for this example is located here. Run it with julia BHM-example.jl.","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"First, we load Rimu and Plots.","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"using Rimu\nusing Plots","category":"page"},{"location":"generated/BHM-example.html#Setting-up-the-model","page":"1D Bose-Hubbard Model","title":"Setting up the model","text":"","category":"section"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"We start by defining the physical problem. First, we generate an initial configuration which will be used as a starting point of our computation. In this example, we use a bosonic Fock state with 6 particles evenly distributed in 6 lattice sites.","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"initial_address = near_uniform(BoseFS{6,6})","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"BoseFS{6,6}(1, 1, 1, 1, 1, 1)","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"The Hamiltonian is constructed by initializing a struct with an initial address and model parameters. Here, we use the Bose Hubbard model in one-dimensional real space.","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"H = HubbardReal1D(initial_address; u = 6.0, t = 1.0)","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"HubbardReal1D(fs\"|1 1 1 1 1 1⟩\"; u=6.0, t=1.0)","category":"page"},{"location":"generated/BHM-example.html#Parameters-of-the-calculation","page":"1D Bose-Hubbard Model","title":"Parameters of the calculation","text":"","category":"section"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"Now, let's setup the Monte Carlo calculation. We need to decide the number of walkers to use in this Monte Carlo run, which is equivalent to the average one-norm of the coefficient vector. Higher values will result in better statistics, but require more memory and computing power.","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"target_walkers = 1_000;","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"FCIQMC takes a certain number of steps to equllibrate, after which the observables will fluctuate around a mean value. In this example, we will devote 1000 steps to equilibration and take an additional 2000 steps for measurement.","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"steps_equilibrate = 1_000;\nsteps_measure = 2_000;\nlast_step = steps_equilibrate + steps_measure","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"3000","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"Next, we pick a time step size. FCIQMC does not have a time step error, but the time step needs to be small enough, or the computation might diverge. If the time step is too small, however, the computation might take a long time to equilibrate. The appropriate time step size is problem-dependent and is best determined through experimentation.","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"time_step = 0.001;","category":"page"},{"location":"generated/BHM-example.html#Defining-an-observable","page":"1D Bose-Hubbard Model","title":"Defining an observable","text":"","category":"section"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"Now, let's set up an observable to measure. Here we will measure the projected energy. In additon to the shift, the projected energy is a second estimator for the energy. It usually produces better statistics than the shift.","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"We first need to define a projector. Here, we use the function default_starting_vector to generate a vector with only a single occupied configuration. We will use the same vector as the starting vector for the FCIQMC calculation.","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"initial_vector = default_starting_vector(initial_address; style=IsDynamicSemistochastic())","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"DVec{BoseFS{6, 6, BitString{11, 1, UInt16}},Float64} with 1 entry, style = IsDynamicSemistochastic{Float64,ThresholdCompression,DynamicSemistochastic}()\n  fs\"|1 1 1 1 1 1⟩\" => 10.0","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"The choice of the style argument already determines the FCIQMC algorithm to use. IsDynamicSemistochastic is usually the best choice as it reduces noise and improves the sign problem.","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"Observables that can be calculated by projection of the fluctuating quantum state onto a constant vector are passed into the ProjectorMonteCarloProblem with the post_step_strategy keyword argument.","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"post_step_strategy = ProjectedEnergy(H, initial_vector)","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"ProjectedEnergy{HubbardReal1D{Float64, BoseFS{6, 6, BitString{11, 1, UInt16}}, 6.0, 1.0}, Rimu.DictVectors.FrozenDVec{BoseFS{6, 6, BitString{11, 1, UInt16}}, Float64}, Rimu.DictVectors.FrozenDVec{BoseFS{6, 6, BitString{11, 1, UInt16}}, Float64}}(:vproj, :hproj, HubbardReal1D(fs\"|1 1 1 1 1 1⟩\"; u=6.0, t=1.0), Rimu.FrozenDVec([fs\"|1 1 1 1 1 1⟩\"=>10.0]), Rimu.FrozenDVec([fs\"|1 1 1 1 2 0⟩\"=>-14.1421, fs\"|0 2 1 1 1 1⟩\"=>-14.1421, fs\"|1 1 1 1 0 2⟩\"=>-14.1421, fs\"|1 2 0 1 1 1⟩\"=>-14.1421, fs\"|2 0 1 1 1 1⟩\"=>-14.1421, fs\"|1 1 1 2 0 1⟩\"=>-14.1421, fs\"|1 1 2 0 1 1⟩\"=>-14.1421, fs\"|1 1 0 2 1 1⟩\"=>-14.1421, fs\"|1 1 1 0 2 1⟩\"=>-14.1421, fs\"|1 0 2 1 1 1⟩\"=>-14.1421, fs\"|2 1 1 1 1 0⟩\"=>-14.1421, fs\"|0 1 1 1 1 2⟩\"=>-14.1421]))","category":"page"},{"location":"generated/BHM-example.html#Running-the-calculation","page":"1D Bose-Hubbard Model","title":"Running the calculation","text":"","category":"section"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"This is a two-step process: First we define a ProjectorMonteCarloProblem with all the parameters needed for the simulation","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"problem = ProjectorMonteCarloProblem(\n    H;\n    start_at = initial_vector,\n    last_step,\n    time_step,\n    target_walkers,\n    post_step_strategy\n);","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"To run the simulation we simply call solve on the problem","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"simulation = solve(problem);","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"The simulation object contains the results of the simulation as well as state vectors and strategies. We can extract the time series data for further analysis:","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"df = DataFrame(simulation);","category":"page"},{"location":"generated/BHM-example.html#Analysing-the-results","page":"1D Bose-Hubbard Model","title":"Analysing the results","text":"","category":"section"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"We can plot the norm of the coefficient vector as a function of the number of steps.","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"hline(\n    [target_walkers];\n    label=\"target_walkers\", xlabel=\"step\", ylabel=\"norm\",\n    color=2, linestyle=:dash, margin = 1Plots.cm\n)\nplot!(df.step, df.norm, label=\"norm\", color=1)","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"<?xml version=\"1.0\" encoding=\"utf-8\"?>\n<svg xmlns=\"http://www.w3.org/2000/svg\" xmlns:xlink=\"http://www.w3.org/1999/xlink\" width=\"600\" height=\"400\" viewBox=\"0 0 2400 1600\">\n<defs>\n  <clipPath id=\"clip410\">\n    <rect x=\"0\" y=\"0\" width=\"2400\" height=\"1600\"/>\n  </clipPath>\n</defs>\n<path clip-path=\"url(#clip410)\" d=\"M0 1600 L2400 1600 L2400 0 L0 0  Z\" fill=\"#ffffff\" fill-rule=\"evenodd\" fill-opacity=\"1\"/>\n<defs>\n  <clipPath id=\"clip411\">\n    <rect x=\"480\" y=\"0\" width=\"1681\" height=\"1600\"/>\n  </clipPath>\n</defs>\n<path clip-path=\"url(#clip410)\" d=\"M404.284 1281.45 L2211.02 1281.45 L2211.02 188.976 L404.284 188.976  Z\" fill=\"#ffffff\" fill-rule=\"evenodd\" fill-opacity=\"1\"/>\n<defs>\n  <clipPath id=\"clip412\">\n    <rect x=\"404\" y=\"188\" width=\"1808\" height=\"1093\"/>\n  </clipPath>\n</defs>\n<polyline clip-path=\"url(#clip412)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:2; stroke-opacity:0.1; fill:none\" points=\"454.849,1281.45 454.849,188.976 \"/>\n<polyline clip-path=\"url(#clip412)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:2; stroke-opacity:0.1; fill:none\" points=\"1023.2,1281.45 1023.2,188.976 \"/>\n<polyline clip-path=\"url(#clip412)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:2; stroke-opacity:0.1; fill:none\" points=\"1591.54,1281.45 1591.54,188.976 \"/>\n<polyline clip-path=\"url(#clip412)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:2; stroke-opacity:0.1; fill:none\" points=\"2159.89,1281.45 2159.89,188.976 \"/>\n<polyline clip-path=\"url(#clip412)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:2; stroke-opacity:0.1; fill:none\" points=\"404.284,1260.83 2211.02,1260.83 \"/>\n<polyline clip-path=\"url(#clip412)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:2; stroke-opacity:0.1; fill:none\" points=\"404.284,1003.23 2211.02,1003.23 \"/>\n<polyline clip-path=\"url(#clip412)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:2; stroke-opacity:0.1; fill:none\" points=\"404.284,745.628 2211.02,745.628 \"/>\n<polyline clip-path=\"url(#clip412)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:2; stroke-opacity:0.1; fill:none\" points=\"404.284,488.025 2211.02,488.025 \"/>\n<polyline clip-path=\"url(#clip412)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:2; stroke-opacity:0.1; fill:none\" points=\"404.284,230.423 2211.02,230.423 \"/>\n<polyline clip-path=\"url(#clip410)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"404.284,1281.45 2211.02,1281.45 \"/>\n<polyline clip-path=\"url(#clip410)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"454.849,1281.45 454.849,1262.55 \"/>\n<polyline clip-path=\"url(#clip410)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"1023.2,1281.45 1023.2,1262.55 \"/>\n<polyline clip-path=\"url(#clip410)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"1591.54,1281.45 1591.54,1262.55 \"/>\n<polyline clip-path=\"url(#clip410)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"2159.89,1281.45 2159.89,1262.55 \"/>\n<path clip-path=\"url(#clip410)\" d=\"M454.849 1312.37 Q451.238 1312.37 449.41 1315.93 Q447.604 1319.47 447.604 1326.6 Q447.604 1333.71 449.41 1337.27 Q451.238 1340.82 454.849 1340.82 Q458.484 1340.82 460.289 1337.27 Q462.118 1333.71 462.118 1326.6 Q462.118 1319.47 460.289 1315.93 Q458.484 1312.37 454.849 1312.37 M454.849 1308.66 Q460.659 1308.66 463.715 1313.27 Q466.794 1317.85 466.794 1326.6 Q466.794 1335.33 463.715 1339.94 Q460.659 1344.52 454.849 1344.52 Q449.039 1344.52 445.96 1339.94 Q442.905 1335.33 442.905 1326.6 Q442.905 1317.85 445.96 1313.27 Q449.039 1308.66 454.849 1308.66 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip410)\" d=\"M967.722 1339.91 L975.361 1339.91 L975.361 1313.55 L967.05 1315.21 L967.05 1310.95 L975.314 1309.29 L979.99 1309.29 L979.99 1339.91 L987.629 1339.91 L987.629 1343.85 L967.722 1343.85 L967.722 1339.91 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip410)\" d=\"M1007.07 1312.37 Q1003.46 1312.37 1001.63 1315.93 Q999.828 1319.47 999.828 1326.6 Q999.828 1333.71 1001.63 1337.27 Q1003.46 1340.82 1007.07 1340.82 Q1010.71 1340.82 1012.51 1337.27 Q1014.34 1333.71 1014.34 1326.6 Q1014.34 1319.47 1012.51 1315.93 Q1010.71 1312.37 1007.07 1312.37 M1007.07 1308.66 Q1012.88 1308.66 1015.94 1313.27 Q1019.02 1317.85 1019.02 1326.6 Q1019.02 1335.33 1015.94 1339.94 Q1012.88 1344.52 1007.07 1344.52 Q1001.26 1344.52 998.185 1339.94 Q995.129 1335.33 995.129 1326.6 Q995.129 1317.85 998.185 1313.27 Q1001.26 1308.66 1007.07 1308.66 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip410)\" d=\"M1037.24 1312.37 Q1033.62 1312.37 1031.8 1315.93 Q1029.99 1319.47 1029.99 1326.6 Q1029.99 1333.71 1031.8 1337.27 Q1033.62 1340.82 1037.24 1340.82 Q1040.87 1340.82 1042.68 1337.27 Q1044.5 1333.71 1044.5 1326.6 Q1044.5 1319.47 1042.68 1315.93 Q1040.87 1312.37 1037.24 1312.37 M1037.24 1308.66 Q1043.05 1308.66 1046.1 1313.27 Q1049.18 1317.85 1049.18 1326.6 Q1049.18 1335.33 1046.1 1339.94 Q1043.05 1344.52 1037.24 1344.52 Q1031.43 1344.52 1028.35 1339.94 Q1025.29 1335.33 1025.29 1326.6 Q1025.29 1317.85 1028.35 1313.27 Q1031.43 1308.66 1037.24 1308.66 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip410)\" d=\"M1067.4 1312.37 Q1063.79 1312.37 1061.96 1315.93 Q1060.15 1319.47 1060.15 1326.6 Q1060.15 1333.71 1061.96 1337.27 Q1063.79 1340.82 1067.4 1340.82 Q1071.03 1340.82 1072.84 1337.27 Q1074.67 1333.71 1074.67 1326.6 Q1074.67 1319.47 1072.84 1315.93 Q1071.03 1312.37 1067.4 1312.37 M1067.4 1308.66 Q1073.21 1308.66 1076.26 1313.27 Q1079.34 1317.85 1079.34 1326.6 Q1079.34 1335.33 1076.26 1339.94 Q1073.21 1344.52 1067.4 1344.52 Q1061.59 1344.52 1058.51 1339.94 Q1055.45 1335.33 1055.45 1326.6 Q1055.45 1317.85 1058.51 1313.27 Q1061.59 1308.66 1067.4 1308.66 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip410)\" d=\"M1540.15 1339.91 L1556.47 1339.91 L1556.47 1343.85 L1534.53 1343.85 L1534.53 1339.91 Q1537.19 1337.16 1541.77 1332.53 Q1546.38 1327.88 1547.56 1326.53 Q1549.81 1324.01 1550.69 1322.27 Q1551.59 1320.51 1551.59 1318.82 Q1551.59 1316.07 1549.64 1314.33 Q1547.72 1312.6 1544.62 1312.6 Q1542.42 1312.6 1539.97 1313.36 Q1537.54 1314.13 1534.76 1315.68 L1534.76 1310.95 Q1537.58 1309.82 1540.04 1309.24 Q1542.49 1308.66 1544.53 1308.66 Q1549.9 1308.66 1553.09 1311.35 Q1556.29 1314.03 1556.29 1318.52 Q1556.29 1320.65 1555.48 1322.57 Q1554.69 1324.47 1552.58 1327.07 Q1552.01 1327.74 1548.9 1330.95 Q1545.8 1334.15 1540.15 1339.91 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip410)\" d=\"M1576.29 1312.37 Q1572.68 1312.37 1570.85 1315.93 Q1569.04 1319.47 1569.04 1326.6 Q1569.04 1333.71 1570.85 1337.27 Q1572.68 1340.82 1576.29 1340.82 Q1579.92 1340.82 1581.73 1337.27 Q1583.56 1333.71 1583.56 1326.6 Q1583.56 1319.47 1581.73 1315.93 Q1579.92 1312.37 1576.29 1312.37 M1576.29 1308.66 Q1582.1 1308.66 1585.15 1313.27 Q1588.23 1317.85 1588.23 1326.6 Q1588.23 1335.33 1585.15 1339.94 Q1582.1 1344.52 1576.29 1344.52 Q1570.48 1344.52 1567.4 1339.94 Q1564.34 1335.33 1564.34 1326.6 Q1564.34 1317.85 1567.4 1313.27 Q1570.48 1308.66 1576.29 1308.66 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip410)\" d=\"M1606.45 1312.37 Q1602.84 1312.37 1601.01 1315.93 Q1599.2 1319.47 1599.2 1326.6 Q1599.2 1333.71 1601.01 1337.27 Q1602.84 1340.82 1606.45 1340.82 Q1610.08 1340.82 1611.89 1337.27 Q1613.72 1333.71 1613.72 1326.6 Q1613.72 1319.47 1611.89 1315.93 Q1610.08 1312.37 1606.45 1312.37 M1606.45 1308.66 Q1612.26 1308.66 1615.32 1313.27 Q1618.39 1317.85 1618.39 1326.6 Q1618.39 1335.33 1615.32 1339.94 Q1612.26 1344.52 1606.45 1344.52 Q1600.64 1344.52 1597.56 1339.94 Q1594.51 1335.33 1594.51 1326.6 Q1594.51 1317.85 1597.56 1313.27 Q1600.64 1308.66 1606.45 1308.66 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip410)\" d=\"M1636.61 1312.37 Q1633 1312.37 1631.17 1315.93 Q1629.37 1319.47 1629.37 1326.6 Q1629.37 1333.71 1631.17 1337.27 Q1633 1340.82 1636.61 1340.82 Q1640.25 1340.82 1642.05 1337.27 Q1643.88 1333.71 1643.88 1326.6 Q1643.88 1319.47 1642.05 1315.93 Q1640.25 1312.37 1636.61 1312.37 M1636.61 1308.66 Q1642.42 1308.66 1645.48 1313.27 Q1648.56 1317.85 1648.56 1326.6 Q1648.56 1335.33 1645.48 1339.94 Q1642.42 1344.52 1636.61 1344.52 Q1630.8 1344.52 1627.72 1339.94 Q1624.67 1335.33 1624.67 1326.6 Q1624.67 1317.85 1627.72 1313.27 Q1630.8 1308.66 1636.61 1308.66 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip410)\" d=\"M2118.57 1325.21 Q2121.93 1325.93 2123.8 1328.2 Q2125.7 1330.47 2125.7 1333.8 Q2125.7 1338.92 2122.18 1341.72 Q2118.66 1344.52 2112.18 1344.52 Q2110.01 1344.52 2107.69 1344.08 Q2105.4 1343.66 2102.95 1342.81 L2102.95 1338.29 Q2104.89 1339.43 2107.2 1340 Q2109.52 1340.58 2112.04 1340.58 Q2116.44 1340.58 2118.73 1338.85 Q2121.05 1337.11 2121.05 1333.8 Q2121.05 1330.75 2118.89 1329.03 Q2116.76 1327.3 2112.95 1327.3 L2108.92 1327.3 L2108.92 1323.45 L2113.13 1323.45 Q2116.58 1323.45 2118.41 1322.09 Q2120.24 1320.7 2120.24 1318.11 Q2120.24 1315.44 2118.34 1314.03 Q2116.46 1312.6 2112.95 1312.6 Q2111.02 1312.6 2108.82 1313.01 Q2106.63 1313.43 2103.99 1314.31 L2103.99 1310.14 Q2106.65 1309.4 2108.96 1309.03 Q2111.3 1308.66 2113.36 1308.66 Q2118.69 1308.66 2121.79 1311.09 Q2124.89 1313.5 2124.89 1317.62 Q2124.89 1320.49 2123.25 1322.48 Q2121.6 1324.45 2118.57 1325.21 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip410)\" d=\"M2144.57 1312.37 Q2140.95 1312.37 2139.13 1315.93 Q2137.32 1319.47 2137.32 1326.6 Q2137.32 1333.71 2139.13 1337.27 Q2140.95 1340.82 2144.57 1340.82 Q2148.2 1340.82 2150.01 1337.27 Q2151.83 1333.71 2151.83 1326.6 Q2151.83 1319.47 2150.01 1315.93 Q2148.2 1312.37 2144.57 1312.37 M2144.57 1308.66 Q2150.38 1308.66 2153.43 1313.27 Q2156.51 1317.85 2156.51 1326.6 Q2156.51 1335.33 2153.43 1339.94 Q2150.38 1344.52 2144.57 1344.52 Q2138.76 1344.52 2135.68 1339.94 Q2132.62 1335.33 2132.62 1326.6 Q2132.62 1317.85 2135.68 1313.27 Q2138.76 1308.66 2144.57 1308.66 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip410)\" d=\"M2174.73 1312.37 Q2171.12 1312.37 2169.29 1315.93 Q2167.48 1319.47 2167.48 1326.6 Q2167.48 1333.71 2169.29 1337.27 Q2171.12 1340.82 2174.73 1340.82 Q2178.36 1340.82 2180.17 1337.27 Q2182 1333.71 2182 1326.6 Q2182 1319.47 2180.17 1315.93 Q2178.36 1312.37 2174.73 1312.37 M2174.73 1308.66 Q2180.54 1308.66 2183.59 1313.27 Q2186.67 1317.85 2186.67 1326.6 Q2186.67 1335.33 2183.59 1339.94 Q2180.54 1344.52 2174.73 1344.52 Q2168.92 1344.52 2165.84 1339.94 Q2162.78 1335.33 2162.78 1326.6 Q2162.78 1317.85 2165.84 1313.27 Q2168.92 1308.66 2174.73 1308.66 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip410)\" d=\"M2204.89 1312.37 Q2201.28 1312.37 2199.45 1315.93 Q2197.64 1319.47 2197.64 1326.6 Q2197.64 1333.71 2199.45 1337.27 Q2201.28 1340.82 2204.89 1340.82 Q2208.52 1340.82 2210.33 1337.27 Q2212.16 1333.71 2212.16 1326.6 Q2212.16 1319.47 2210.33 1315.93 Q2208.52 1312.37 2204.89 1312.37 M2204.89 1308.66 Q2210.7 1308.66 2213.75 1313.27 Q2216.83 1317.85 2216.83 1326.6 Q2216.83 1335.33 2213.75 1339.94 Q2210.7 1344.52 2204.89 1344.52 Q2199.08 1344.52 2196 1339.94 Q2192.94 1335.33 2192.94 1326.6 Q2192.94 1317.85 2196 1313.27 Q2199.08 1308.66 2204.89 1308.66 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip410)\" d=\"M1266.04 1391.71 L1266.04 1397.25 Q1263.56 1395.98 1260.88 1395.34 Q1258.21 1394.71 1255.34 1394.71 Q1250.98 1394.71 1248.79 1396.04 Q1246.62 1397.38 1246.62 1400.05 Q1246.62 1402.09 1248.18 1403.27 Q1249.74 1404.41 1254.45 1405.46 L1256.46 1405.91 Q1262.7 1407.25 1265.31 1409.7 Q1267.95 1412.12 1267.95 1416.48 Q1267.95 1421.44 1264 1424.34 Q1260.09 1427.23 1253.21 1427.23 Q1250.35 1427.23 1247.23 1426.66 Q1244.14 1426.12 1240.7 1425.01 L1240.7 1418.96 Q1243.95 1420.65 1247.1 1421.51 Q1250.25 1422.33 1253.34 1422.33 Q1257.48 1422.33 1259.7 1420.93 Q1261.93 1419.5 1261.93 1416.92 Q1261.93 1414.54 1260.31 1413.26 Q1258.72 1411.99 1253.27 1410.81 L1251.24 1410.33 Q1245.79 1409.19 1243.38 1406.83 Q1240.96 1404.45 1240.96 1400.31 Q1240.96 1395.28 1244.52 1392.54 Q1248.09 1389.8 1254.64 1389.8 Q1257.89 1389.8 1260.75 1390.28 Q1263.62 1390.76 1266.04 1391.71 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip410)\" d=\"M1283.07 1380.54 L1283.07 1390.66 L1295.13 1390.66 L1295.13 1395.22 L1283.07 1395.22 L1283.07 1414.57 Q1283.07 1418.93 1284.24 1420.17 Q1285.45 1421.41 1289.11 1421.41 L1295.13 1421.41 L1295.13 1426.31 L1289.11 1426.31 Q1282.33 1426.31 1279.76 1423.8 Q1277.18 1421.25 1277.18 1414.57 L1277.18 1395.22 L1272.88 1395.22 L1272.88 1390.66 L1277.18 1390.66 L1277.18 1380.54 L1283.07 1380.54 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip410)\" d=\"M1333.32 1407.02 L1333.32 1409.89 L1306.4 1409.89 Q1306.78 1415.94 1310.02 1419.12 Q1313.3 1422.27 1319.13 1422.27 Q1322.5 1422.27 1325.65 1421.44 Q1328.84 1420.61 1331.95 1418.96 L1331.95 1424.5 Q1328.8 1425.83 1325.49 1426.53 Q1322.18 1427.23 1318.78 1427.23 Q1310.25 1427.23 1305.25 1422.27 Q1300.29 1417.3 1300.29 1408.84 Q1300.29 1400.08 1305 1394.96 Q1309.74 1389.8 1317.76 1389.8 Q1324.95 1389.8 1329.12 1394.45 Q1333.32 1399.07 1333.32 1407.02 M1327.47 1405.3 Q1327.4 1400.5 1324.76 1397.63 Q1322.15 1394.77 1317.82 1394.77 Q1312.92 1394.77 1309.96 1397.54 Q1307.03 1400.31 1306.59 1405.34 L1327.47 1405.3 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip410)\" d=\"M1348.6 1420.96 L1348.6 1439.87 L1342.71 1439.87 L1342.71 1390.66 L1348.6 1390.66 L1348.6 1396.07 Q1350.45 1392.89 1353.25 1391.36 Q1356.08 1389.8 1360 1389.8 Q1366.49 1389.8 1370.53 1394.96 Q1374.6 1400.12 1374.6 1408.52 Q1374.6 1416.92 1370.53 1422.08 Q1366.49 1427.23 1360 1427.23 Q1356.08 1427.23 1353.25 1425.71 Q1350.45 1424.15 1348.6 1420.96 M1368.53 1408.52 Q1368.53 1402.06 1365.85 1398.4 Q1363.21 1394.71 1358.56 1394.71 Q1353.92 1394.71 1351.24 1398.4 Q1348.6 1402.06 1348.6 1408.52 Q1348.6 1414.98 1351.24 1418.67 Q1353.92 1422.33 1358.56 1422.33 Q1363.21 1422.33 1365.85 1418.67 Q1368.53 1414.98 1368.53 1408.52 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><polyline clip-path=\"url(#clip410)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"404.284,1281.45 404.284,188.976 \"/>\n<polyline clip-path=\"url(#clip410)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"404.284,1260.83 423.181,1260.83 \"/>\n<polyline clip-path=\"url(#clip410)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"404.284,1003.23 423.181,1003.23 \"/>\n<polyline clip-path=\"url(#clip410)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"404.284,745.628 423.181,745.628 \"/>\n<polyline clip-path=\"url(#clip410)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"404.284,488.025 423.181,488.025 \"/>\n<polyline clip-path=\"url(#clip410)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"404.284,230.423 423.181,230.423 \"/>\n<path clip-path=\"url(#clip410)\" d=\"M356.339 1246.63 Q352.728 1246.63 350.899 1250.2 Q349.094 1253.74 349.094 1260.87 Q349.094 1267.97 350.899 1271.54 Q352.728 1275.08 356.339 1275.08 Q359.973 1275.08 361.779 1271.54 Q363.608 1267.97 363.608 1260.87 Q363.608 1253.74 361.779 1250.2 Q359.973 1246.63 356.339 1246.63 M356.339 1242.93 Q362.149 1242.93 365.205 1247.53 Q368.284 1252.12 368.284 1260.87 Q368.284 1269.59 365.205 1274.2 Q362.149 1278.78 356.339 1278.78 Q350.529 1278.78 347.45 1274.2 Q344.395 1269.59 344.395 1260.87 Q344.395 1252.12 347.45 1247.53 Q350.529 1242.93 356.339 1242.93 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip410)\" d=\"M290.043 1016.58 L306.363 1016.58 L306.363 1020.51 L284.418 1020.51 L284.418 1016.58 Q287.08 1013.82 291.664 1009.19 Q296.27 1004.54 297.451 1003.2 Q299.696 1000.67 300.576 998.936 Q301.478 997.177 301.478 995.487 Q301.478 992.733 299.534 990.997 Q297.613 989.26 294.511 989.26 Q292.312 989.26 289.858 990.024 Q287.427 990.788 284.65 992.339 L284.65 987.617 Q287.474 986.483 289.927 985.904 Q292.381 985.325 294.418 985.325 Q299.789 985.325 302.983 988.01 Q306.177 990.696 306.177 995.186 Q306.177 997.316 305.367 999.237 Q304.58 1001.14 302.474 1003.73 Q301.895 1004.4 298.793 1007.62 Q295.691 1010.81 290.043 1016.58 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip410)\" d=\"M316.224 985.95 L334.58 985.95 L334.58 989.885 L320.506 989.885 L320.506 998.358 Q321.524 998.01 322.543 997.848 Q323.562 997.663 324.58 997.663 Q330.367 997.663 333.747 1000.83 Q337.126 1004.01 337.126 1009.42 Q337.126 1015 333.654 1018.1 Q330.182 1021.18 323.862 1021.18 Q321.687 1021.18 319.418 1020.81 Q317.173 1020.44 314.765 1019.7 L314.765 1015 Q316.849 1016.14 319.071 1016.69 Q321.293 1017.25 323.77 1017.25 Q327.774 1017.25 330.112 1015.14 Q332.45 1013.03 332.45 1009.42 Q332.45 1005.81 330.112 1003.7 Q327.774 1001.6 323.77 1001.6 Q321.895 1001.6 320.02 1002.01 Q318.168 1002.43 316.224 1003.31 L316.224 985.95 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip410)\" d=\"M356.339 989.029 Q352.728 989.029 350.899 992.594 Q349.094 996.135 349.094 1003.26 Q349.094 1010.37 350.899 1013.94 Q352.728 1017.48 356.339 1017.48 Q359.973 1017.48 361.779 1013.94 Q363.608 1010.37 363.608 1003.26 Q363.608 996.135 361.779 992.594 Q359.973 989.029 356.339 989.029 M356.339 985.325 Q362.149 985.325 365.205 989.932 Q368.284 994.515 368.284 1003.26 Q368.284 1011.99 365.205 1016.6 Q362.149 1021.18 356.339 1021.18 Q350.529 1021.18 347.45 1016.6 Q344.395 1011.99 344.395 1003.26 Q344.395 994.515 347.45 989.932 Q350.529 985.325 356.339 985.325 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip410)\" d=\"M286.062 728.348 L304.418 728.348 L304.418 732.283 L290.344 732.283 L290.344 740.755 Q291.363 740.408 292.381 740.246 Q293.4 740.061 294.418 740.061 Q300.205 740.061 303.585 743.232 Q306.964 746.403 306.964 751.82 Q306.964 757.399 303.492 760.5 Q300.02 763.579 293.701 763.579 Q291.525 763.579 289.256 763.209 Q287.011 762.838 284.603 762.098 L284.603 757.399 Q286.687 758.533 288.909 759.088 Q291.131 759.644 293.608 759.644 Q297.613 759.644 299.951 757.538 Q302.288 755.431 302.288 751.82 Q302.288 748.209 299.951 746.102 Q297.613 743.996 293.608 743.996 Q291.733 743.996 289.858 744.413 Q288.006 744.829 286.062 745.709 L286.062 728.348 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip410)\" d=\"M326.177 731.427 Q322.566 731.427 320.737 734.991 Q318.932 738.533 318.932 745.663 Q318.932 752.769 320.737 756.334 Q322.566 759.875 326.177 759.875 Q329.811 759.875 331.617 756.334 Q333.446 752.769 333.446 745.663 Q333.446 738.533 331.617 734.991 Q329.811 731.427 326.177 731.427 M326.177 727.723 Q331.987 727.723 335.043 732.329 Q338.122 736.913 338.122 745.663 Q338.122 754.389 335.043 758.996 Q331.987 763.579 326.177 763.579 Q320.367 763.579 317.288 758.996 Q314.233 754.389 314.233 745.663 Q314.233 736.913 317.288 732.329 Q320.367 727.723 326.177 727.723 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip410)\" d=\"M356.339 731.427 Q352.728 731.427 350.899 734.991 Q349.094 738.533 349.094 745.663 Q349.094 752.769 350.899 756.334 Q352.728 759.875 356.339 759.875 Q359.973 759.875 361.779 756.334 Q363.608 752.769 363.608 745.663 Q363.608 738.533 361.779 734.991 Q359.973 731.427 356.339 731.427 M356.339 727.723 Q362.149 727.723 365.205 732.329 Q368.284 736.913 368.284 745.663 Q368.284 754.389 365.205 758.996 Q362.149 763.579 356.339 763.579 Q350.529 763.579 347.45 758.996 Q344.395 754.389 344.395 745.663 Q344.395 736.913 347.45 732.329 Q350.529 727.723 356.339 727.723 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip410)\" d=\"M284.835 470.745 L307.057 470.745 L307.057 472.736 L294.511 505.305 L289.627 505.305 L301.432 474.681 L284.835 474.681 L284.835 470.745 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip410)\" d=\"M316.224 470.745 L334.58 470.745 L334.58 474.681 L320.506 474.681 L320.506 483.153 Q321.524 482.806 322.543 482.644 Q323.562 482.458 324.58 482.458 Q330.367 482.458 333.747 485.63 Q337.126 488.801 337.126 494.218 Q337.126 499.796 333.654 502.898 Q330.182 505.977 323.862 505.977 Q321.687 505.977 319.418 505.606 Q317.173 505.236 314.765 504.495 L314.765 499.796 Q316.849 500.93 319.071 501.486 Q321.293 502.042 323.77 502.042 Q327.774 502.042 330.112 499.935 Q332.45 497.829 332.45 494.218 Q332.45 490.606 330.112 488.5 Q327.774 486.394 323.77 486.394 Q321.895 486.394 320.02 486.81 Q318.168 487.227 316.224 488.106 L316.224 470.745 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip410)\" d=\"M356.339 473.824 Q352.728 473.824 350.899 477.389 Q349.094 480.931 349.094 488.06 Q349.094 495.167 350.899 498.731 Q352.728 502.273 356.339 502.273 Q359.973 502.273 361.779 498.731 Q363.608 495.167 363.608 488.06 Q363.608 480.931 361.779 477.389 Q359.973 473.824 356.339 473.824 M356.339 470.12 Q362.149 470.12 365.205 474.727 Q368.284 479.31 368.284 488.06 Q368.284 496.787 365.205 501.393 Q362.149 505.977 356.339 505.977 Q350.529 505.977 347.45 501.393 Q344.395 496.787 344.395 488.06 Q344.395 479.31 347.45 474.727 Q350.529 470.12 356.339 470.12 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip410)\" d=\"M256.664 243.768 L264.303 243.768 L264.303 217.402 L255.992 219.069 L255.992 214.81 L264.256 213.143 L268.932 213.143 L268.932 243.768 L276.571 243.768 L276.571 247.703 L256.664 247.703 L256.664 243.768 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip410)\" d=\"M296.015 216.222 Q292.404 216.222 290.576 219.787 Q288.77 223.328 288.77 230.458 Q288.77 237.564 290.576 241.129 Q292.404 244.671 296.015 244.671 Q299.65 244.671 301.455 241.129 Q303.284 237.564 303.284 230.458 Q303.284 223.328 301.455 219.787 Q299.65 216.222 296.015 216.222 M296.015 212.518 Q301.826 212.518 304.881 217.125 Q307.96 221.708 307.96 230.458 Q307.96 239.185 304.881 243.791 Q301.826 248.374 296.015 248.374 Q290.205 248.374 287.127 243.791 Q284.071 239.185 284.071 230.458 Q284.071 221.708 287.127 217.125 Q290.205 212.518 296.015 212.518 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip410)\" d=\"M326.177 216.222 Q322.566 216.222 320.737 219.787 Q318.932 223.328 318.932 230.458 Q318.932 237.564 320.737 241.129 Q322.566 244.671 326.177 244.671 Q329.811 244.671 331.617 241.129 Q333.446 237.564 333.446 230.458 Q333.446 223.328 331.617 219.787 Q329.811 216.222 326.177 216.222 M326.177 212.518 Q331.987 212.518 335.043 217.125 Q338.122 221.708 338.122 230.458 Q338.122 239.185 335.043 243.791 Q331.987 248.374 326.177 248.374 Q320.367 248.374 317.288 243.791 Q314.233 239.185 314.233 230.458 Q314.233 221.708 317.288 217.125 Q320.367 212.518 326.177 212.518 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip410)\" d=\"M356.339 216.222 Q352.728 216.222 350.899 219.787 Q349.094 223.328 349.094 230.458 Q349.094 237.564 350.899 241.129 Q352.728 244.671 356.339 244.671 Q359.973 244.671 361.779 241.129 Q363.608 237.564 363.608 230.458 Q363.608 223.328 361.779 219.787 Q359.973 216.222 356.339 216.222 M356.339 212.518 Q362.149 212.518 365.205 217.125 Q368.284 221.708 368.284 230.458 Q368.284 239.185 365.205 243.791 Q362.149 248.374 356.339 248.374 Q350.529 248.374 347.45 243.791 Q344.395 239.185 344.395 230.458 Q344.395 221.708 347.45 217.125 Q350.529 212.518 356.339 212.518 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip410)\" d=\"M184.22 784.801 L205.736 784.801 L205.736 790.657 L184.411 790.657 Q179.351 790.657 176.836 792.631 Q174.322 794.604 174.322 798.551 Q174.322 803.293 177.345 806.03 Q180.369 808.768 185.589 808.768 L205.736 808.768 L205.736 814.656 L170.088 814.656 L170.088 808.768 L175.627 808.768 Q172.412 806.667 170.821 803.834 Q169.229 800.97 169.229 797.246 Q169.229 791.103 173.049 787.952 Q176.836 784.801 184.22 784.801 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip410)\" d=\"M174.194 759.306 Q174.194 764.017 177.886 766.754 Q181.547 769.491 187.944 769.491 Q194.342 769.491 198.034 766.786 Q201.694 764.049 201.694 759.306 Q201.694 754.627 198.002 751.89 Q194.31 749.153 187.944 749.153 Q181.61 749.153 177.918 751.89 Q174.194 754.627 174.194 759.306 M169.229 759.306 Q169.229 751.667 174.194 747.307 Q179.16 742.946 187.944 742.946 Q196.697 742.946 201.694 747.307 Q206.659 751.667 206.659 759.306 Q206.659 766.977 201.694 771.337 Q196.697 775.666 187.944 775.666 Q179.16 775.666 174.194 771.337 Q169.229 766.977 169.229 759.306 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip410)\" d=\"M175.563 712.582 Q174.99 713.569 174.735 714.746 Q174.449 715.892 174.449 717.293 Q174.449 722.258 177.696 724.931 Q180.91 727.573 186.958 727.573 L205.736 727.573 L205.736 733.461 L170.088 733.461 L170.088 727.573 L175.627 727.573 Q172.38 725.727 170.821 722.767 Q169.229 719.807 169.229 715.574 Q169.229 714.969 169.325 714.237 Q169.388 713.505 169.547 712.614 L175.563 712.582 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip410)\" d=\"M176.932 679.83 Q172.985 677.634 171.107 674.579 Q169.229 671.523 169.229 667.385 Q169.229 661.815 173.144 658.792 Q177.027 655.768 184.22 655.768 L205.736 655.768 L205.736 661.656 L184.411 661.656 Q179.287 661.656 176.804 663.47 Q174.322 665.285 174.322 669.009 Q174.322 673.56 177.345 676.202 Q180.369 678.844 185.589 678.844 L205.736 678.844 L205.736 684.732 L184.411 684.732 Q179.255 684.732 176.804 686.546 Q174.322 688.36 174.322 692.148 Q174.322 696.636 177.377 699.278 Q180.401 701.919 185.589 701.919 L205.736 701.919 L205.736 707.808 L170.088 707.808 L170.088 701.919 L175.627 701.919 Q172.348 699.914 170.789 697.113 Q169.229 694.312 169.229 690.461 Q169.229 686.578 171.202 683.873 Q173.176 681.135 176.932 679.83 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><polyline clip-path=\"url(#clip412)\" style=\"stroke:#e26f46; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" stroke-dasharray=\"16, 10\" points=\"-1402.46,230.423 4017.76,230.423 \"/>\n<polyline clip-path=\"url(#clip412)\" style=\"stroke:#009af9; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"455.418,1250.53 455.986,1250.45 456.554,1250.31 457.123,1250.09 457.691,1249.81 458.259,1249.47 458.828,1249.06 459.396,1248.58 459.964,1247.01 460.533,1246.43 461.101,1245.77 461.669,1245.03 462.238,1244.19 462.806,1243.29 463.375,1242.29 463.943,1241.2 464.511,1240.02 465.08,1237.7 465.648,1236.3 466.216,1233.75 466.785,1232.11 467.353,1229.3 467.921,1227.39 468.49,1225.34 469.058,1222.09 469.626,1219.71 470.195,1217.19 470.763,1214.51 471.331,1209.59 471.9,1206.54 472.468,1203.33 473.036,1199.95 473.605,1195.29 474.173,1191.47 474.741,1186.41 475.31,1181.12 475.878,1174.51 476.446,1168.73 477.015,1163.77 477.583,1156.51 478.152,1151.09 478.72,1145.44 479.288,1139.52 479.857,1133.46 480.425,1127.24 480.993,1120.77 481.562,1111.99 482.13,1104.98 482.698,1097.82 483.267,1090.32 483.835,1082.64 484.403,1073.84 484.972,1065.9 485.54,1057.73 486.108,1048.32 486.677,1038.85 487.245,1028.15 487.813,1019.24 488.382,1006.31 488.95,997.444 489.518,987.439 490.087,977.269 490.655,968.117 491.224,954.605 491.792,945.221 492.36,934.772 492.929,925.29 493.497,914.76 494.065,904.18 494.634,893.661 495.202,881.939 495.77,870.394 496.339,857.696 496.907,846.212 497.475,834.741 498.044,825.3 498.612,815.865 499.18,805.378 499.749,795.962 500.317,784.498 500.885,775.196 501.454,764.006 502.022,752.649 502.59,741.443 503.159,731.488 503.727,721.506 504.295,711.653 504.864,701.904 505.432,691.005 506.001,680.381 506.569,670.879 507.137,659.555 507.706,650.392 508.274,638.342 508.842,626.545 509.411,619.003 509.979,609.473 510.547,598.932 511.116,590.704 511.684,583.568 512.252,572.414 512.821,563.575 513.389,556.991 513.957,550.47 514.526,541.941 515.094,533.601 515.662,527.648 516.231,519.798 516.799,512.895 517.367,507.284 517.936,501.702 518.504,496.27 519.072,489.831 519.641,485.576 520.209,480.173 520.778,474.878 521.346,467.836 521.914,462.833 522.483,458.132 523.051,452.37 523.619,444.662 524.188,440.11 524.756,434.832 525.324,429.538 525.893,423.648 526.461,416.713 527.029,411.029 527.598,407.526 528.166,402.115 528.734,399.718 529.303,394.495 529.871,390.635 530.439,385.45 531.008,382.361 531.576,378.418 532.144,372.572 532.713,370.043 533.281,366.406 533.85,363.979 534.418,359.37 534.986,356.245 535.555,353.2 536.123,352.224 536.691,348.018 537.26,346.015 537.828,343.006 538.396,339.963 538.965,337.128 539.533,335.384 540.101,332.624 540.67,330.152 541.238,327.525 541.806,325.89 542.375,324.536 542.943,323.05 543.511,321.561 544.08,318.813 544.648,317.368 545.216,315.006 545.785,312.679 546.353,306.207 546.921,302.157 547.49,301.239 548.058,300.39 548.627,297.543 549.195,295.918 549.763,293.2 550.332,292.606 550.9,291.046 551.468,290.766 552.037,290.244 552.605,290.785 553.173,288.285 553.742,286.91 554.31,285.229 554.878,283.884 555.447,282.648 556.015,280.077 556.583,279.735 557.152,278.428 557.72,277.04 558.288,279.055 558.857,277.671 559.425,277.139 559.993,273.889 560.562,273.825 561.13,273.437 561.698,272.926 562.267,272.779 562.835,274.617 563.404,274.202 563.972,272.605 564.54,268.179 565.109,269.152 565.677,265.853 566.245,265.885 566.814,263.977 567.382,262.997 567.95,262.992 568.519,263.002 569.087,265.135 569.655,269.246 570.224,268.654 570.792,268.357 571.36,265.831 571.929,263.445 572.497,262.096 573.065,262.069 573.634,261.927 574.202,260.529 574.77,258.478 575.339,257.426 575.907,257.476 576.476,256.558 577.044,256.642 577.612,254.548 578.181,253.829 578.749,253.893 579.317,253.043 579.886,252.327 580.454,252.454 581.022,249.64 581.591,248.822 582.159,250.222 582.727,249.653 583.296,246.911 583.864,246.238 584.432,243.661 585.001,246.323 585.569,246.707 586.137,245.974 586.706,246.459 587.274,246.132 587.842,247.445 588.411,247.826 588.979,248.071 589.547,247.284 590.116,245.502 590.684,245.725 591.253,244.176 591.821,243.754 592.389,243.205 592.958,244.056 593.526,244.601 594.094,245.017 594.663,246.51 595.231,247.964 595.799,247.217 596.368,247.35 596.936,247.487 597.504,247.512 598.073,248.84 598.641,249.079 599.209,246.302 599.778,248.555 600.346,248.657 600.914,250.53 601.483,249.163 602.051,246.153 602.619,247.273 603.188,250.196 603.756,248.775 604.325,247.729 604.893,246.418 605.461,245.297 606.03,242.124 606.598,242.326 607.166,241.634 607.735,243.225 608.303,243.336 608.871,245.735 609.44,245.62 610.008,244.553 610.576,243.583 611.145,243.659 611.713,242.683 612.281,242.903 612.85,242.009 613.418,242.325 613.986,241.424 614.555,240.497 615.123,238.629 615.691,239.141 616.26,241.362 616.828,239.404 617.396,239.868 617.965,239.077 618.533,238.306 619.102,237.742 619.67,238.219 620.238,240.612 620.807,240.839 621.375,239.97 621.943,240.373 622.512,241.502 623.08,241.721 623.648,239.606 624.217,238.595 624.785,237.756 625.353,237.09 625.922,237.598 626.49,238.819 627.058,241.135 627.627,239.193 628.195,242.475 628.763,242.461 629.332,239.506 629.9,239.634 630.468,236.678 631.037,236.857 631.605,237.159 632.173,238.525 632.742,238.424 633.31,237.72 633.879,240.031 634.447,240.931 635.015,243.01 635.584,241.726 636.152,240.598 636.72,241.767 637.289,242.822 637.857,241.571 638.425,239.373 638.994,240.369 639.562,240.386 640.13,238.218 640.699,237.438 641.267,237.372 641.835,238.296 642.404,238.308 642.972,238.264 643.54,238.351 644.109,238.325 644.677,237.426 645.245,233.563 645.814,234.704 646.382,235.063 646.951,233.465 647.519,233.917 648.087,233.231 648.656,233.963 649.224,231.19 649.792,229.626 650.361,230.015 650.929,229.514 651.497,231.322 652.066,232.974 652.634,234.452 653.202,235.675 653.771,234.608 654.339,232.676 654.907,232.934 655.476,235.569 656.044,235.894 656.612,234.105 657.181,233.369 657.749,233.925 658.317,234.47 658.886,237.888 659.454,236.843 660.022,238.243 660.591,238.182 661.159,236.251 661.728,235.627 662.296,233.922 662.864,236.39 663.433,236.695 664.001,236.919 664.569,238.219 665.138,238.098 665.706,238.193 666.274,237.281 666.843,236.455 667.411,237.721 667.979,235.659 668.548,235.854 669.116,236.053 669.684,237.435 670.253,238.514 670.821,238.578 671.389,239.553 671.958,239.409 672.526,239.341 673.094,237.229 673.663,235.361 674.231,238.635 674.799,238.306 675.368,241.286 675.936,242.865 676.505,242.84 677.073,241.497 677.641,239.174 678.21,240.23 678.778,238.828 679.346,237.815 679.915,234.736 680.483,233.701 681.051,231.927 681.62,232.313 682.188,233.512 682.756,235.622 683.325,235.535 683.893,240.864 684.461,240.26 685.03,238.782 685.598,238.608 686.166,237.248 686.735,236.034 687.303,236.928 687.871,236.811 688.44,237.681 689.008,239.587 689.577,240.395 690.145,241.04 690.713,240.45 691.282,238.876 691.85,239.436 692.418,242.407 692.987,241.707 693.555,243.131 694.123,243.303 694.692,242.641 695.26,239.927 695.828,239.395 696.397,239.961 696.965,239.414 697.533,238.895 698.102,238.448 698.67,237.206 699.238,237.807 699.807,238.181 700.375,238.906 700.943,239.288 701.512,238.844 702.08,240.66 702.648,241.13 703.217,240.61 703.785,240.078 704.354,239.476 704.922,239.847 705.49,238.826 706.059,237.246 706.627,237.747 707.195,238.461 707.764,237.839 708.332,238.229 708.9,236.649 709.469,238.185 710.037,235.652 710.605,231.321 711.174,233.262 711.742,231.068 712.31,229.935 712.879,227.858 713.447,227.131 714.015,227.208 714.584,224.533 715.152,225.003 715.72,226.619 716.289,225.834 716.857,227.162 717.425,227.309 717.994,226.49 718.562,225.75 719.131,225.3 719.699,224.741 720.267,227.361 720.836,226.598 721.404,227.014 721.972,228.494 722.541,228.881 723.109,229.136 723.677,229.372 724.246,229.598 724.814,229.578 725.382,230.777 725.951,229.888 726.519,231.116 727.087,230.165 727.656,232.599 728.224,232.639 728.792,232.66 729.361,231.743 729.929,230.852 730.497,230.996 731.066,232.108 731.634,233.173 732.203,232.257 732.771,232.109 733.339,232.481 733.908,229.336 734.476,229.643 735.044,229.803 735.613,229.861 736.181,232.207 736.749,232.062 737.318,233.01 737.886,234.091 738.454,234.028 739.023,234.869 739.591,233.618 740.159,233.489 740.728,232.321 741.296,234.355 741.864,233.177 742.433,231.996 743.001,232.971 743.569,234.925 744.138,234.99 744.706,233.702 745.274,232.536 745.843,231.608 746.411,233.567 746.98,233.584 747.548,233.663 748.116,233.624 748.685,233.459 749.253,233.245 749.821,233.037 750.39,231.853 750.958,231.704 751.526,231.462 752.095,231.457 752.663,230.373 753.231,231.429 753.8,231.522 754.368,231.474 754.936,231.52 755.505,229.766 756.073,228.701 756.641,228.816 757.21,225.084 757.778,223.584 758.346,225.171 758.915,225.607 759.483,224.899 760.052,226.459 760.62,224.791 761.188,226.475 761.757,224.808 762.325,226.552 762.893,224.82 763.462,222.208 764.03,223.944 764.598,225.638 765.167,227.194 765.735,227.861 766.303,229.287 766.872,232.369 767.44,231.372 768.008,231.568 768.577,231.547 769.145,231.874 769.713,231.145 770.282,231.239 770.85,231.518 771.418,231.67 771.987,231.747 772.555,230.801 773.123,231.051 773.692,231.26 774.26,229.137 774.829,229.492 775.397,229.696 775.965,231.14 776.534,231.294 777.102,230.559 777.67,231.994 778.239,232.074 778.807,230.196 779.375,231.399 779.944,230.433 780.512,230.602 781.08,231.92 781.649,232.045 782.217,231.029 782.785,228.977 783.354,228.196 783.922,228.622 784.49,228.009 785.059,231.593 785.627,232.648 786.195,232.788 786.764,232.832 787.332,233.95 787.9,234.964 788.469,234.806 789.037,236.772 789.606,236.623 790.174,237.231 790.742,233.931 791.311,234.708 791.879,234.598 792.447,233.365 793.016,236.479 793.584,236.044 794.152,235.809 794.721,234.699 795.289,234.546 795.857,234.456 796.426,234.211 796.994,234.086 797.562,232.781 798.131,232.803 798.699,232.003 799.267,231.852 799.836,230.827 800.404,231.998 800.972,234.124 801.541,232.974 802.109,233.794 802.678,231.733 803.246,231.615 803.814,231.551 804.383,234.467 804.951,235.405 805.519,235.045 806.088,234.628 806.656,235.369 807.224,232.907 807.793,232.868 808.361,231.746 808.929,231.834 809.498,231.965 810.066,233.915 810.634,232.696 811.203,231.595 811.771,229.554 812.339,229.491 812.908,229.832 813.476,229.887 814.044,231.002 814.613,230.04 815.181,231.099 815.749,230.96 816.318,230.846 816.886,228.737 817.455,227.677 818.023,227.088 818.591,226.344 819.16,225.87 819.728,227.322 820.296,227.65 820.865,226.858 821.433,229.326 822.001,226.156 822.57,223.509 823.138,224.087 823.706,225.688 824.275,225.977 824.843,228.361 825.411,229.83 825.98,227.962 826.548,229.563 827.116,229.77 827.685,227.921 828.253,228.147 828.821,228.487 829.39,228.787 829.958,229.203 830.526,229.479 831.095,228.791 831.663,231.189 832.232,228.246 832.8,229.643 833.368,230.728 833.937,230.017 834.505,230.048 835.073,232.277 835.642,231.255 836.21,230.392 836.778,230.419 837.347,230.745 837.915,231.04 838.483,231.178 839.052,230.474 839.62,231.714 840.188,231.805 840.757,231.948 841.325,231.967 841.893,231.176 842.462,231.347 843.03,230.575 843.598,231.652 844.167,230.657 844.735,233.831 845.304,233.746 845.872,236.001 846.44,233.71 847.009,235.764 847.577,234.589 848.145,234.552 848.714,234.499 849.282,234.335 849.85,234.214 850.419,235.155 850.987,233.969 851.555,232.918 852.124,232.662 852.692,232.897 853.26,231.991 853.829,233.012 854.397,232.039 854.965,232.123 855.534,233.261 856.102,233.137 856.67,231.971 857.239,232.097 857.807,231.209 858.375,232.457 858.944,229.327 859.512,228.519 860.081,227.565 860.649,229.015 861.217,228.236 861.786,228.463 862.354,230.027 862.922,229.155 863.491,230.362 864.059,228.727 864.627,226.951 865.196,225.088 865.764,225.57 866.332,227.215 866.901,229.588 867.469,229.562 868.037,229.725 868.606,230.926 869.174,233.184 869.742,232.197 870.311,230.137 870.879,233.587 871.447,233.505 872.016,232.402 872.584,235.477 873.152,232.076 873.721,233.242 874.289,234.217 874.858,237.353 875.426,238.092 875.994,237.611 876.563,236.052 877.131,236.904 877.699,238.859 878.268,238.249 878.836,236.552 879.404,236.175 879.973,235.567 880.541,235.175 881.109,233.892 881.678,232.557 882.246,229.411 882.814,228.447 883.383,226.763 883.951,228.199 884.519,229.616 885.088,231.667 885.656,232.798 886.224,231.551 886.793,233.492 887.361,233.391 887.93,233.034 888.498,234.897 889.066,234.775 889.635,238.531 890.203,237.88 890.771,236.206 891.34,234.652 891.908,233.336 892.476,234.042 893.045,234.918 893.613,234.457 894.181,234.075 894.75,233.771 895.318,232.586 895.886,231.397 896.455,231.372 897.023,229.217 897.591,228.237 898.16,226.249 898.728,223.569 899.296,223.018 899.865,222.47 900.433,221.053 901.001,220.826 901.57,225.509 902.138,225.943 902.707,224.369 903.275,225.043 903.843,224.36 904.412,224.767 904.98,225.391 905.548,224.835 906.117,225.266 906.685,226.75 907.253,228.124 907.822,225.463 908.39,225.766 908.958,228.026 909.527,228.113 910.095,226.214 910.663,224.868 911.232,227.46 911.8,227.883 912.368,228.432 912.937,231.732 913.505,232.846 914.073,234.843 914.642,233.354 915.21,233.3 915.779,234.144 916.347,235.001 916.915,236.965 917.484,236.699 918.052,235.489 918.62,237.182 919.189,237.922 919.757,236.448 920.325,235.546 920.894,235.167 921.462,232.879 922.03,233.692 922.599,234.825 923.167,235.545 923.735,236.202 924.304,235.932 924.872,235.816 925.44,235.641 926.009,237.195 926.577,235.639 927.145,237.137 927.714,238.628 928.282,238.23 928.85,238.609 929.419,237.829 929.987,236.141 930.556,236.62 931.124,234.081 931.692,233.766 932.261,233.248 932.829,233.011 933.397,232.836 933.966,230.704 934.534,230.71 935.102,228.707 935.671,227.639 936.239,228.758 936.807,228.887 937.376,231.034 937.944,230.957 938.512,229.895 939.081,228.717 939.649,228.892 940.217,228.009 940.786,227.147 941.354,226.381 941.922,226.632 942.491,227.076 943.059,227.227 943.627,226.517 944.196,227.811 944.764,228.176 945.333,228.266 945.901,227.49 946.469,225.515 947.038,222.782 947.606,223.303 948.174,223.817 948.743,225.421 949.311,225.731 949.879,226.219 950.448,227.637 951.016,225.865 951.584,226.261 952.153,226.666 952.721,226.943 953.289,228.224 953.858,230.545 954.426,230.745 954.994,229.674 955.563,229.656 956.131,230.753 956.699,228.534 957.268,228.708 957.836,227.882 958.405,228.294 958.973,230.927 959.541,229.97 960.11,228.927 960.678,229.024 961.246,228.287 961.815,227.617 962.383,228.666 962.951,229.92 963.52,229.953 964.088,230.882 964.656,229.964 965.225,231.942 965.793,229.804 966.361,229.928 966.93,232.201 967.498,233.19 968.066,231.955 968.635,229.879 969.203,229.971 969.771,230.041 970.34,230.238 970.908,232.531 971.476,231.354 972.045,231.258 972.613,231.28 973.182,232.15 973.75,232.074 974.318,230.79 974.887,229.853 975.455,228.659 976.023,227.782 976.592,230.864 977.16,228.929 977.728,230.101 978.297,229.086 978.865,231.394 979.433,230.272 980.002,230.303 980.57,232.428 981.138,231.219 981.707,233.226 982.275,233.213 982.843,235.463 983.412,235.226 983.98,233.839 984.548,234.565 985.117,233.447 985.685,234.17 986.253,234.295 986.822,234.085 987.39,230.533 987.959,229.513 988.527,229.613 989.095,229.797 989.664,228.078 990.232,226.414 990.8,224.771 991.369,226.376 991.937,228.655 992.505,230.047 993.074,227.988 993.642,230.305 994.21,229.356 994.779,231.731 995.347,233.883 995.915,234.616 996.484,234.572 997.052,232.494 997.62,231.276 998.189,231.426 998.757,231.35 999.325,231.18 999.894,231.103 1000.46,230.183 1001.03,231.051 1001.6,231.019 1002.17,231.209 1002.74,231.03 1003.3,228.14 1003.87,226.294 1004.44,226.735 1005.01,225.898 1005.58,227.075 1006.15,228.469 1006.71,227.585 1007.28,228.172 1007.85,230.452 1008.42,229.787 1008.99,233.144 1009.56,234.046 1010.12,233.753 1010.69,233.528 1011.26,232.336 1011.83,232.232 1012.4,231.295 1012.97,231.24 1013.53,230.495 1014.1,230.645 1014.67,231.543 1015.24,231.481 1015.81,229.338 1016.38,226.572 1016.94,222.9 1017.51,223.426 1018.08,226.221 1018.65,226.633 1019.22,227.031 1019.79,226.496 1020.35,226.837 1020.92,230.263 1021.49,230.461 1022.06,231.645 1022.63,231.939 1023.2,233.88 1023.76,232.769 1024.33,232.739 1024.9,231.49 1025.47,230.556 1026.04,232.809 1026.61,230.725 1027.17,231.701 1027.74,229.858 1028.31,231.012 1028.88,234.272 1029.45,232.237 1030.02,232.098 1030.58,233.069 1031.15,232.847 1031.72,232.528 1032.29,232.729 1032.86,232.835 1033.43,233.613 1033.99,235.58 1034.56,235.429 1035.13,234.954 1035.7,235.758 1036.27,235.528 1036.84,234.098 1037.4,234.862 1037.97,234.597 1038.54,234.365 1039.11,234.433 1039.68,235.259 1040.25,233.884 1040.81,234.795 1041.38,233.437 1041.95,234.435 1042.52,233.161 1043.09,233.87 1043.66,234.436 1044.22,234.001 1044.79,236.734 1045.36,237.275 1045.93,235.613 1046.5,236.208 1047.07,235.778 1047.63,234.18 1048.2,234.854 1048.77,233.276 1049.34,234.237 1049.91,233.811 1050.48,233.362 1051.05,230.962 1051.61,232.858 1052.18,232.544 1052.75,233.044 1053.32,233.666 1053.89,235.319 1054.46,233.866 1055.02,236.422 1055.59,236.791 1056.16,232.914 1056.73,233.862 1057.3,232.319 1057.87,233.255 1058.43,232.823 1059,232.643 1059.57,233.388 1060.14,233.007 1060.71,233.753 1061.28,233.13 1061.84,231.859 1062.41,231.529 1062.98,233.38 1063.55,232.975 1064.12,231.735 1064.69,230.478 1065.25,227.104 1065.82,228.313 1066.39,228.39 1066.96,227.372 1067.53,227.519 1068.1,229.415 1068.66,230.311 1069.23,228.309 1069.8,228.315 1070.37,229.333 1070.94,229.512 1071.51,230.525 1072.07,231.498 1072.64,231.248 1073.21,230.043 1073.78,228.016 1074.35,227.25 1074.92,227.241 1075.48,227.385 1076.05,228.478 1076.62,229.483 1077.19,229.462 1077.76,229.391 1078.33,230.351 1078.89,231.48 1079.46,230.3 1080.03,230.246 1080.6,229.974 1081.17,230.079 1081.74,227.929 1082.3,228.024 1082.87,229.158 1083.44,230.126 1084.01,232.333 1084.58,235.249 1085.15,234.59 1085.71,235.117 1086.28,234.467 1086.85,235.102 1087.42,234.669 1087.99,235.15 1088.56,233.379 1089.12,232.984 1089.69,230.643 1090.26,230.417 1090.83,230.283 1091.4,228.013 1091.97,227.19 1092.53,226.398 1093.1,225.498 1093.67,224.73 1094.24,225.201 1094.81,227.392 1095.38,225.47 1095.94,225.822 1096.51,226.229 1097.08,226.639 1097.65,224.798 1098.22,224.168 1098.79,224.183 1099.35,224.533 1099.92,223.913 1100.49,223.159 1101.06,222.67 1101.63,226.278 1102.2,227.448 1102.76,226.583 1103.33,225.641 1103.9,226.098 1104.47,226.334 1105.04,224.741 1105.61,225.487 1106.17,224.832 1106.74,226.427 1107.31,223.66 1107.88,226.176 1108.45,225.48 1109.02,225.822 1109.58,224.976 1110.15,224.289 1110.72,223.792 1111.29,224.483 1111.86,224.035 1112.43,223.645 1112.99,223.179 1113.56,223.759 1114.13,225.423 1114.7,225 1115.27,227.66 1115.84,228.002 1116.4,229.349 1116.97,232.513 1117.54,232.448 1118.11,231.409 1118.68,230.624 1119.25,231.723 1119.81,231.704 1120.38,230.866 1120.95,231.974 1121.52,232.864 1122.09,232.958 1122.66,229.865 1123.23,230.968 1123.79,232.231 1124.36,235.369 1124.93,236.229 1125.5,237.141 1126.07,237.693 1126.64,237.143 1127.2,236.802 1127.77,235.249 1128.34,232.806 1128.91,231.676 1129.48,232.63 1130.05,234.614 1130.61,235.195 1131.18,234.655 1131.75,235.49 1132.32,236.193 1132.89,234.788 1133.46,234.523 1134.02,234.309 1134.59,235.155 1135.16,234.653 1135.73,234.564 1136.3,234.243 1136.87,233.998 1137.43,234.635 1138,235.199 1138.57,233.512 1139.14,231.306 1139.71,232.279 1140.28,230.269 1140.84,231.052 1141.41,229.102 1141.98,228.226 1142.55,227.348 1143.12,227.464 1143.69,228.841 1144.25,228.85 1144.82,228.851 1145.39,227.66 1145.96,229.789 1146.53,229.963 1147.1,228.929 1147.66,232.238 1148.23,232.331 1148.8,230.998 1149.37,232.029 1149.94,229.757 1150.51,229.839 1151.07,230.965 1151.64,230.826 1152.21,230.583 1152.78,229.568 1153.35,228.741 1153.92,229.705 1154.48,232.001 1155.05,231.965 1155.62,231.723 1156.19,231.769 1156.76,231.462 1157.33,231.627 1157.89,230.404 1158.46,227.354 1159.03,228.459 1159.6,228.575 1160.17,228.807 1160.74,229.073 1161.3,230.254 1161.87,229.362 1162.44,229.337 1163.01,226.244 1163.58,226.537 1164.15,226.741 1164.71,227.861 1165.28,226.935 1165.85,227.151 1166.42,226.538 1166.99,227.745 1167.56,226.875 1168.12,224.072 1168.69,222.704 1169.26,223.376 1169.83,225.763 1170.4,226.112 1170.97,226.363 1171.53,225.491 1172.1,228.008 1172.67,228.291 1173.24,231.776 1173.81,235.049 1174.38,233.829 1174.94,232.592 1175.51,231.393 1176.08,229.332 1176.65,229.55 1177.22,230.564 1177.79,232.977 1178.35,233.898 1178.92,233.604 1179.49,234.397 1180.06,234.297 1180.63,235.265 1181.2,231.992 1181.76,235.135 1182.33,234.531 1182.9,235.467 1183.47,234.094 1184.04,231.77 1184.61,230.917 1185.17,232.003 1185.74,232.109 1186.31,233.166 1186.88,234.02 1187.45,234.82 1188.02,234.605 1188.58,234.391 1189.15,234.116 1189.72,230.858 1190.29,230.685 1190.86,229.684 1191.43,229.651 1192,227.709 1192.56,225.726 1193.13,224.018 1193.7,225.54 1194.27,227.088 1194.84,226.495 1195.41,227.711 1195.97,226.946 1196.54,228.195 1197.11,229.514 1197.68,227.444 1198.25,225.862 1198.82,228.334 1199.38,226.586 1199.95,225.63 1200.52,223.9 1201.09,227.553 1201.66,229.851 1202.23,229.893 1202.79,231.165 1203.36,230.106 1203.93,232.459 1204.5,232.559 1205.07,234.747 1205.64,234.666 1206.2,233.34 1206.77,232.136 1207.34,230.251 1207.91,232.506 1208.48,229.248 1209.05,230.287 1209.61,231.328 1210.18,231.181 1210.75,232.27 1211.32,234.271 1211.89,231.884 1212.46,231.634 1213.02,230.452 1213.59,229.191 1214.16,229.274 1214.73,229.5 1215.3,231.77 1215.87,230.713 1216.43,231.87 1217,230.858 1217.57,231.06 1218.14,233.032 1218.71,233.757 1219.28,236.626 1219.84,237.369 1220.41,236.837 1220.98,235.499 1221.55,235.078 1222.12,235.605 1222.69,234.071 1223.25,233.768 1223.82,233.468 1224.39,233.171 1224.96,232.839 1225.53,230.495 1226.1,228.549 1226.66,229.644 1227.23,229.563 1227.8,228.587 1228.37,227.719 1228.94,226.969 1229.51,226.031 1230.07,226.696 1230.64,226.144 1231.21,226.37 1231.78,226.676 1232.35,227.012 1232.92,227.311 1233.48,227.7 1234.05,227.871 1234.62,230.932 1235.19,229.095 1235.76,230.259 1236.33,232.388 1236.89,231.192 1237.46,230.034 1238.03,230.951 1238.6,228.984 1239.17,230.127 1239.74,231.072 1240.3,233.277 1240.87,234.021 1241.44,231.865 1242.01,230.907 1242.58,230.923 1243.15,229.874 1243.71,229.983 1244.28,229.276 1244.85,229.468 1245.42,227.666 1245.99,229.113 1246.56,227.181 1247.12,225.254 1247.69,227.749 1248.26,226.748 1248.83,228.082 1249.4,229.335 1249.97,228.323 1250.53,227.855 1251.1,229.05 1251.67,230.165 1252.24,228.952 1252.81,228.962 1253.38,229.108 1253.94,229.035 1254.51,229.18 1255.08,230.239 1255.65,230.391 1256.22,232.508 1256.79,234.401 1257.35,234.988 1257.92,234.425 1258.49,234.513 1259.06,233.416 1259.63,233.16 1260.2,233.128 1260.76,231.867 1261.33,231.869 1261.9,231.772 1262.47,231.962 1263.04,228.615 1263.61,231.015 1264.18,230.942 1264.74,233.948 1265.31,232.679 1265.88,233.403 1266.45,235.546 1267.02,235.146 1267.59,235.956 1268.15,237.426 1268.72,236.8 1269.29,238.41 1269.86,235.829 1270.43,237.506 1271,235.964 1271.56,235.648 1272.13,235.301 1272.7,235.841 1273.27,236.314 1273.84,235.722 1274.41,234.31 1274.97,234.024 1275.54,234.797 1276.11,234.2 1276.68,235.985 1277.25,235.525 1277.82,238.038 1278.38,236.287 1278.95,234.508 1279.52,231.86 1280.09,229.647 1280.66,227.763 1281.23,229.63 1281.79,228.751 1282.36,226.683 1282.93,224.787 1283.5,224.185 1284.07,223.394 1284.64,224.964 1285.2,226.248 1285.77,225.527 1286.34,222.697 1286.91,222.234 1287.48,223.751 1288.05,227.006 1288.61,225.001 1289.18,227.367 1289.75,230.528 1290.32,230.557 1290.89,233.577 1291.46,233.351 1292.02,232.25 1292.59,231.899 1293.16,232.758 1293.73,232.616 1294.3,233.644 1294.87,232.336 1295.43,231.237 1296,232.241 1296.57,232.127 1297.14,232.959 1297.71,232.768 1298.28,234.667 1298.84,234.456 1299.41,237.271 1299.98,235.294 1300.55,234.667 1301.12,235.312 1301.69,232.945 1302.25,230.5 1302.82,232.389 1303.39,233.193 1303.96,232.873 1304.53,231.303 1305.1,232.063 1305.66,231.894 1306.23,229.57 1306.8,229.455 1307.37,229.438 1307.94,229.58 1308.51,229.565 1309.07,229.45 1309.64,228.678 1310.21,228.634 1310.78,227.804 1311.35,228.977 1311.92,229.249 1312.48,229.259 1313.05,230.316 1313.62,228.121 1314.19,231.189 1314.76,228.973 1315.33,230.089 1315.89,230.073 1316.46,227.877 1317.03,227.961 1317.6,227.775 1318.17,227.701 1318.74,227.752 1319.3,225.765 1319.87,227.187 1320.44,226.401 1321.01,226.658 1321.58,230.845 1322.15,230.678 1322.71,231.844 1323.28,230.545 1323.85,231.552 1324.42,230.552 1324.99,230.434 1325.56,229.277 1326.12,228.221 1326.69,228.258 1327.26,227.065 1327.83,226.33 1328.4,225.729 1328.97,225.843 1329.53,226.132 1330.1,225.432 1330.67,224.616 1331.24,223.886 1331.81,225.295 1332.38,227.896 1332.94,228.09 1333.51,227.219 1334.08,227.363 1334.65,227.661 1335.22,230.064 1335.79,230.281 1336.36,231.264 1336.92,228.025 1337.49,227.155 1338.06,228.171 1338.63,227.256 1339.2,227.687 1339.77,228.795 1340.33,228.932 1340.9,229.048 1341.47,228.067 1342.04,228.408 1342.61,227.64 1343.18,228.099 1343.74,228.515 1344.31,227.792 1344.88,228.052 1345.45,226.42 1346.02,226.789 1346.59,226.106 1347.15,227.505 1347.72,229.884 1348.29,230.222 1348.86,232.184 1349.43,230.919 1350,231.011 1350.56,229.077 1351.13,229.353 1351.7,229.558 1352.27,231.741 1352.84,231.751 1353.41,230.762 1353.97,230.873 1354.54,231.899 1355.11,233.93 1355.68,233.899 1356.25,235.779 1356.82,235.625 1357.38,235.186 1357.95,234.783 1358.52,234.621 1359.09,233.423 1359.66,234.475 1360.23,231.953 1360.79,231.873 1361.36,232.018 1361.93,232.973 1362.5,235.919 1363.07,233.479 1363.64,231.137 1364.2,231.005 1364.77,229.937 1365.34,227.966 1365.91,227.264 1366.48,228.564 1367.05,229.872 1367.61,227.781 1368.18,228.116 1368.75,228.326 1369.32,226.416 1369.89,224.682 1370.46,224.912 1371.02,228.376 1371.59,229.634 1372.16,228.879 1372.73,230.09 1373.3,231.15 1373.87,232.228 1374.43,232.015 1375,231.935 1375.57,235.1 1376.14,232.892 1376.71,231.748 1377.28,232.683 1377.84,231.634 1378.41,232.659 1378.98,231.395 1379.55,231.191 1380.12,229.25 1380.69,228.288 1381.25,231.452 1381.82,231.441 1382.39,232.63 1382.96,230.63 1383.53,231.537 1384.1,230.516 1384.66,229.359 1385.23,227.48 1385.8,226.789 1386.37,228.109 1386.94,226.103 1387.51,226.467 1388.07,229.822 1388.64,230.901 1389.21,229.86 1389.78,230.141 1390.35,231.116 1390.92,227.927 1391.48,228.881 1392.05,228.069 1392.62,225.917 1393.19,225.182 1393.76,226.512 1394.33,228.068 1394.89,229.309 1395.46,230.669 1396.03,233.743 1396.6,235.503 1397.17,235.34 1397.74,234.066 1398.3,231.768 1398.87,231.74 1399.44,232.482 1400.01,232.427 1400.58,233.227 1401.15,230.944 1401.71,230.936 1402.28,231.835 1402.85,230.651 1403.42,232.699 1403.99,232.537 1404.56,232.316 1405.13,234.19 1405.69,232.717 1406.26,232.599 1406.83,231.475 1407.4,234.576 1407.97,233.459 1408.54,231.209 1409.1,231.043 1409.67,231.939 1410.24,229.929 1410.81,228.898 1411.38,227.03 1411.95,226.141 1412.51,227.445 1413.08,225.536 1413.65,225.918 1414.22,225.509 1414.79,224.935 1415.36,225.428 1415.92,225.907 1416.49,226.459 1417.06,229.96 1417.63,230.904 1418.2,230.043 1418.77,226.899 1419.33,227.081 1419.9,228.472 1420.47,229.886 1421.04,230.144 1421.61,231.242 1422.18,231.167 1422.74,232.416 1423.31,232.452 1423.88,233.312 1424.45,233.183 1425.02,233.949 1425.59,232.464 1426.15,234.531 1426.72,236.493 1427.29,236.039 1427.86,234.678 1428.43,233.35 1429,232.232 1429.56,227.933 1430.13,228.008 1430.7,228.302 1431.27,224.395 1431.84,224.84 1432.41,225.089 1432.97,226.589 1433.54,228.124 1434.11,227.455 1434.68,227.827 1435.25,229.157 1435.82,231.138 1436.38,230.016 1436.95,230.08 1437.52,229.041 1438.09,230.314 1438.66,233.758 1439.23,234.597 1439.79,232.273 1440.36,230.178 1440.93,229.079 1441.5,227.192 1442.07,226.669 1442.64,227.33 1443.2,227.626 1443.77,229.104 1444.34,227.082 1444.91,225.998 1445.48,227.279 1446.05,228.864 1446.61,228.96 1447.18,229.232 1447.75,231.515 1448.32,233.644 1448.89,234.366 1449.46,234.255 1450.02,234.061 1450.59,233.95 1451.16,230.623 1451.73,231.611 1452.3,230.465 1452.87,229.697 1453.43,227.964 1454,228.394 1454.57,226.397 1455.14,225.808 1455.71,226.288 1456.28,226.589 1456.84,227.128 1457.41,226.477 1457.98,227.756 1458.55,230.07 1459.12,229.268 1459.69,230.575 1460.25,231.648 1460.82,232.719 1461.39,233.674 1461.96,232.573 1462.53,234.567 1463.1,234.263 1463.66,234.033 1464.23,232.804 1464.8,232.751 1465.37,232.491 1465.94,231.332 1466.51,228.031 1467.07,227.378 1467.64,226.466 1468.21,225.971 1468.78,225.289 1469.35,227.54 1469.92,229.843 1470.48,232.989 1471.05,231.78 1471.62,230.698 1472.19,230.69 1472.76,232.598 1473.33,232.457 1473.89,230.455 1474.46,230.513 1475.03,231.819 1475.6,231.85 1476.17,231.822 1476.74,231.019 1477.31,230.083 1477.87,230.087 1478.44,231.134 1479.01,231.171 1479.58,230.395 1480.15,232.613 1480.72,231.333 1481.28,232.267 1481.85,230.22 1482.42,232.413 1482.99,232.322 1483.56,233.278 1484.13,231.133 1484.69,229.991 1485.26,230.858 1485.83,233.905 1486.4,232.899 1486.97,233.768 1487.54,233.56 1488.1,233.528 1488.67,230.312 1489.24,231.193 1489.81,232.207 1490.38,232.164 1490.95,231.184 1491.51,230.197 1492.08,232.238 1492.65,232.147 1493.22,234.021 1493.79,233.976 1494.36,233.57 1494.92,234.606 1495.49,234.206 1496.06,232.784 1496.63,233.742 1497.2,233.513 1497.77,233.449 1498.33,233.23 1498.9,232.764 1499.47,232.569 1500.04,233.424 1500.61,235.147 1501.18,234.788 1501.74,233.387 1502.31,234.333 1502.88,233.919 1503.45,234.718 1504.02,234.291 1504.59,234.94 1505.15,233.764 1505.72,233.125 1506.29,232.684 1506.86,232.39 1507.43,233.287 1508,231.889 1508.56,231.506 1509.13,231.331 1509.7,232.206 1510.27,232.092 1510.84,230.758 1511.41,230.768 1511.97,232.719 1512.54,232.619 1513.11,231.41 1513.68,229.088 1514.25,229.344 1514.82,228.404 1515.38,228.295 1515.95,230.428 1516.52,229.302 1517.09,228.375 1517.66,229.419 1518.23,231.644 1518.79,230.47 1519.36,230.444 1519.93,228.155 1520.5,230.072 1521.07,232.039 1521.64,232.701 1522.2,231.41 1522.77,229.016 1523.34,229.143 1523.91,231.073 1524.48,230.146 1525.05,231.137 1525.61,231.869 1526.18,232.676 1526.75,232.395 1527.32,236.077 1527.89,233.586 1528.46,234.247 1529.02,235.925 1529.59,233.176 1530.16,231.701 1530.73,233.477 1531.3,233.98 1531.87,232.595 1532.43,233.285 1533,232.855 1533.57,232.711 1534.14,231.615 1534.71,231.373 1535.28,231.239 1535.84,230.036 1536.41,229.822 1536.98,233.785 1537.55,230.416 1538.12,231.391 1538.69,232.421 1539.25,229.995 1539.82,230.952 1540.39,230.59 1540.96,230.585 1541.53,230.466 1542.1,229.201 1542.66,229.346 1543.23,230.179 1543.8,230.27 1544.37,230.212 1544.94,232.113 1545.51,229.718 1546.08,227.477 1546.64,227.538 1547.21,225.493 1547.78,226.763 1548.35,224.797 1548.92,219.895 1549.49,222.788 1550.05,221.237 1550.62,222.762 1551.19,223.149 1551.76,225.839 1552.33,228.123 1552.9,223.037 1553.46,224.552 1554.03,223.954 1554.6,225.493 1555.17,223.115 1555.74,224.818 1556.31,224.242 1556.87,224.784 1557.44,222.937 1558.01,221.352 1558.58,224.078 1559.15,226.711 1559.72,226.23 1560.28,225.589 1560.85,225.905 1561.42,226.425 1561.99,227.834 1562.56,229.187 1563.13,228.361 1563.69,230.514 1564.26,231.525 1564.83,229.341 1565.4,229.649 1565.97,227.669 1566.54,228.855 1567.1,230.064 1567.67,229.238 1568.24,229.442 1568.81,229.637 1569.38,229.672 1569.95,229.631 1570.51,230.038 1571.08,229.17 1571.65,230.332 1572.22,232.448 1572.79,233.226 1573.36,231.032 1573.92,231.045 1574.49,230.807 1575.06,229.812 1575.63,231.773 1576.2,232.856 1576.77,233.684 1577.33,232.622 1577.9,232.838 1578.47,233.782 1579.04,234.648 1579.61,234.307 1580.18,233.992 1580.74,234.814 1581.31,233.431 1581.88,233.33 1582.45,232.886 1583.02,232.82 1583.59,232.607 1584.15,232.362 1584.72,232.134 1585.29,231.73 1585.86,232.624 1586.43,232.653 1587,232.513 1587.56,233.482 1588.13,234.412 1588.7,235.348 1589.27,235.055 1589.84,234.759 1590.41,233.331 1590.97,233.213 1591.54,233.936 1592.11,234.571 1592.68,233.323 1593.25,234.26 1593.82,236.038 1594.38,235.568 1594.95,236.098 1595.52,234.42 1596.09,232.893 1596.66,232.447 1597.23,233.23 1597.79,232.896 1598.36,235.608 1598.93,232.41 1599.5,231.31 1600.07,231.322 1600.64,231.184 1601.2,231.17 1601.77,230.941 1602.34,230.881 1602.91,231.73 1603.48,230.402 1604.05,231.303 1604.61,230.196 1605.18,230.992 1605.75,231.827 1606.32,228.672 1606.89,231.735 1607.46,229.512 1608.02,229.624 1608.59,228.505 1609.16,229.551 1609.73,228.467 1610.3,228.461 1610.87,228.616 1611.43,228.705 1612,229.68 1612.57,231.675 1613.14,231.431 1613.71,232.191 1614.28,229.944 1614.84,228.776 1615.41,227.692 1615.98,226.537 1616.55,224.634 1617.12,228.148 1617.69,229.346 1618.26,229.459 1618.82,231.294 1619.39,230.072 1619.96,229.259 1620.53,229.416 1621.1,228.361 1621.67,226.386 1622.23,228.547 1622.8,228.875 1623.37,228.004 1623.94,228.006 1624.51,227.835 1625.08,229.089 1625.64,231.21 1626.21,232.005 1626.78,234.982 1627.35,232.341 1627.92,229.955 1628.49,227.957 1629.05,228.259 1629.62,231.307 1630.19,232.212 1630.76,230.003 1631.33,228.944 1631.9,228.038 1632.46,229.22 1633.03,229.118 1633.6,229.136 1634.17,230.187 1634.74,230.08 1635.31,228.07 1635.87,227.016 1636.44,228.265 1637.01,229.333 1637.58,229.567 1638.15,230.799 1638.72,229.643 1639.28,228.743 1639.85,229.867 1640.42,232.218 1640.99,232.125 1641.56,232.944 1642.13,233.721 1642.69,226.424 1643.26,225.623 1643.83,226.941 1644.4,226.207 1644.97,226.789 1645.54,226.701 1646.1,226.959 1646.67,229.444 1647.24,229.799 1647.81,230.767 1648.38,229.606 1648.95,231.635 1649.51,234.531 1650.08,234.275 1650.65,234.087 1651.22,233.951 1651.79,234.696 1652.36,232.151 1652.92,232.863 1653.49,231.696 1654.06,233.752 1654.63,232.47 1655.2,232.52 1655.77,231.246 1656.33,230.252 1656.9,232.381 1657.47,231.067 1658.04,230.045 1658.61,231.164 1659.18,229.032 1659.74,229.245 1660.31,228.287 1660.88,227.647 1661.45,227.834 1662.02,227.952 1662.59,228.016 1663.15,226.123 1663.72,228.408 1664.29,228.612 1664.86,226.422 1665.43,226.948 1666,230.206 1666.56,230.017 1667.13,230.252 1667.7,229.441 1668.27,228.526 1668.84,230.705 1669.41,231.649 1669.97,232.235 1670.54,232.945 1671.11,234.804 1671.68,233.472 1672.25,232.189 1672.82,233.227 1673.38,233.012 1673.95,232.754 1674.52,230.329 1675.09,229.299 1675.66,230.357 1676.23,232.413 1676.79,230.105 1677.36,229.072 1677.93,227.25 1678.5,228.592 1679.07,229.552 1679.64,229.41 1680.2,229.416 1680.77,228.514 1681.34,228.552 1681.91,228.776 1682.48,229.028 1683.05,229.097 1683.61,229.258 1684.18,230.333 1684.75,230.179 1685.32,229.309 1685.89,228.507 1686.46,226.488 1687.02,229.075 1687.59,229.055 1688.16,227.021 1688.73,227.331 1689.3,226.573 1689.87,225.816 1690.44,224.03 1691,223.445 1691.57,225.078 1692.14,223.385 1692.71,226.127 1693.28,225.415 1693.85,225.805 1694.41,225.024 1694.98,224.406 1695.55,223.957 1696.12,226.622 1696.69,227.208 1697.26,227.658 1697.82,229.08 1698.39,227.19 1698.96,228.525 1699.53,227.58 1700.1,228.765 1700.67,230.116 1701.23,230.191 1701.8,229.396 1702.37,228.617 1702.94,227.899 1703.51,229.03 1704.08,229.03 1704.64,232.529 1705.21,232.592 1705.78,232.509 1706.35,233.59 1706.92,235.601 1707.49,234.211 1708.05,233.96 1708.62,237.067 1709.19,237.662 1709.76,237.242 1710.33,237.773 1710.9,237.284 1711.46,236.886 1712.03,237.276 1712.6,235.8 1713.17,236.595 1713.74,238.298 1714.31,236.791 1714.87,236.494 1715.44,239.224 1716.01,240.753 1716.58,240.904 1717.15,240.232 1717.72,240.456 1718.28,240.866 1718.85,240.148 1719.42,239.353 1719.99,240.765 1720.56,239.932 1721.13,238.981 1721.69,239.312 1722.26,238.669 1722.83,240.02 1723.4,239.366 1723.97,238.694 1724.54,237.06 1725.1,236.531 1725.67,236.096 1726.24,235.631 1726.81,236.03 1727.38,236.395 1727.95,234.822 1728.51,234.381 1729.08,232.658 1729.65,233.198 1730.22,230.963 1730.79,230.632 1731.36,229.208 1731.92,230.226 1732.49,227.948 1733.06,227.852 1733.63,226.808 1734.2,227.897 1734.77,225.714 1735.33,226.709 1735.9,227.901 1736.47,227.619 1737.04,228.418 1737.61,228.349 1738.18,229.132 1738.74,227.022 1739.31,228.991 1739.88,228.791 1740.45,229.688 1741.02,227.38 1741.59,227.357 1742.15,228.46 1742.72,227.38 1743.29,227.55 1743.86,229.707 1744.43,231.58 1745,231.221 1745.56,230.074 1746.13,230.914 1746.7,229.705 1747.27,228.652 1747.84,227.757 1748.41,227.51 1748.97,227.326 1749.54,228.569 1750.11,228.501 1750.68,228.473 1751.25,228.414 1751.82,229.325 1752.38,227.079 1752.95,221.039 1753.52,222.614 1754.09,222.866 1754.66,224.411 1755.23,223.823 1755.79,223.935 1756.36,223.114 1756.93,222.362 1757.5,225.184 1758.07,224.655 1758.64,227.113 1759.21,225.153 1759.77,225.385 1760.34,224.701 1760.91,225.397 1761.48,224.902 1762.05,224.229 1762.62,223.561 1763.18,224.143 1763.75,222.42 1764.32,223.209 1764.89,223.845 1765.46,227.377 1766.03,227.836 1766.59,227.127 1767.16,228.446 1767.73,231.858 1768.3,230.486 1768.87,228.375 1769.44,229.702 1770,229.65 1770.57,229.7 1771.14,229.791 1771.71,231.966 1772.28,236.162 1772.85,236.741 1773.41,235.095 1773.98,233.559 1774.55,232.124 1775.12,233.099 1775.69,229.962 1776.26,231.065 1776.82,229.888 1777.39,228.876 1777.96,229.053 1778.53,229.261 1779.1,229.488 1779.67,224.597 1780.23,224.895 1780.8,220.991 1781.37,222.697 1781.94,225.424 1782.51,224.858 1783.08,225.151 1783.64,224.566 1784.21,223.162 1784.78,220.631 1785.35,222.507 1785.92,223.276 1786.49,225.021 1787.05,225.579 1787.62,227.167 1788.19,227.528 1788.76,227.857 1789.33,230.186 1789.9,230.394 1790.46,232.439 1791.03,228.3 1791.6,227.73 1792.17,228.219 1792.74,226.431 1793.31,227.802 1793.87,228.272 1794.44,230.477 1795.01,231.607 1795.58,232.741 1796.15,233.74 1796.72,233.714 1797.28,234.735 1797.85,233.66 1798.42,234.64 1798.99,234.579 1799.56,234.356 1800.13,233.175 1800.69,233.128 1801.26,233.134 1801.83,232.173 1802.4,233.258 1802.97,234.12 1803.54,232.831 1804.1,233.966 1804.67,234.915 1805.24,233.413 1805.81,234.429 1806.38,235.359 1806.95,236.201 1807.51,236.004 1808.08,235.558 1808.65,234.337 1809.22,231.812 1809.79,231.957 1810.36,233.847 1810.92,235.565 1811.49,235.38 1812.06,236.02 1812.63,235.514 1813.2,234.006 1813.77,236.832 1814.33,237.354 1814.9,236.502 1815.47,239.132 1816.04,237.44 1816.61,235.869 1817.18,235.416 1817.74,235.075 1818.31,234.76 1818.88,234.311 1819.45,234.939 1820.02,238.47 1820.59,237.898 1821.15,238.163 1821.72,236.212 1822.29,234.58 1822.86,233.31 1823.43,232.814 1824,231.133 1824.56,229.105 1825.13,228.958 1825.7,226.884 1826.27,227.141 1826.84,227.149 1827.41,227.193 1827.97,226.092 1828.54,226.129 1829.11,227.17 1829.68,226.392 1830.25,226.721 1830.82,227.84 1831.39,228.924 1831.95,229.008 1832.52,227.019 1833.09,226.4 1833.66,226.548 1834.23,228.96 1834.8,227.994 1835.36,228.183 1835.93,229.251 1836.5,227.352 1837.07,229.656 1837.64,230.859 1838.21,229.682 1838.77,228.667 1839.34,228.839 1839.91,228.035 1840.48,229.28 1841.05,229.202 1841.62,228.268 1842.18,229.324 1842.75,230.527 1843.32,228.524 1843.89,229.487 1844.46,231.565 1845.03,230.555 1845.59,229.397 1846.16,229.677 1846.73,230.747 1847.3,231.764 1847.87,229.78 1848.44,228.645 1849,228.971 1849.57,226.712 1850.14,227.811 1850.71,228.007 1851.28,231.156 1851.85,231.369 1852.41,231.185 1852.98,232.296 1853.55,232.119 1854.12,232.917 1854.69,231.601 1855.26,232.515 1855.82,233.429 1856.39,234.353 1856.96,233.943 1857.53,233.748 1858.1,232.539 1858.67,231.234 1859.23,228.179 1859.8,227.425 1860.37,226.493 1860.94,226.835 1861.51,227.242 1862.08,228.476 1862.64,229.68 1863.21,230.765 1863.78,229.925 1864.35,230 1864.92,230.097 1865.49,229.334 1866.05,231.383 1866.62,231.231 1867.19,230.132 1867.76,229.955 1868.33,229.239 1868.9,230.409 1869.46,230.239 1870.03,231.363 1870.6,231.552 1871.17,233.358 1871.74,232.076 1872.31,231.033 1872.87,228.596 1873.44,227.512 1874.01,229.924 1874.58,228.888 1875.15,227.176 1875.72,228.443 1876.28,230.649 1876.85,229.689 1877.42,228.892 1877.99,230.059 1878.56,229.221 1879.13,228.326 1879.69,229.556 1880.26,228.635 1880.83,229.993 1881.4,231.233 1881.97,231.118 1882.54,229.909 1883.1,230.992 1883.67,231.998 1884.24,231.945 1884.81,233.895 1885.38,233.776 1885.95,232.493 1886.51,231.229 1887.08,232.368 1887.65,231.98 1888.22,230.744 1888.79,229.674 1889.36,227.601 1889.92,227.925 1890.49,228.089 1891.06,227.335 1891.63,227.489 1892.2,227.675 1892.77,225.495 1893.33,224.844 1893.9,226.338 1894.47,227.414 1895.04,225.572 1895.61,225.021 1896.18,227.448 1896.74,227.8 1897.31,227.264 1897.88,226.467 1898.45,226.919 1899.02,227.155 1899.59,229.593 1900.16,228.951 1900.72,230.063 1901.29,231.347 1901.86,232.406 1902.43,230.279 1903,231.348 1903.57,230.188 1904.13,229.077 1904.7,229.332 1905.27,229.399 1905.84,230.367 1906.41,228.227 1906.98,229.445 1907.54,228.559 1908.11,229.891 1908.68,230.939 1909.25,230.858 1909.82,229.987 1910.39,229.29 1910.95,229.465 1911.52,227.72 1912.09,227.971 1912.66,228.347 1913.23,228.473 1913.8,227.656 1914.36,223.105 1914.93,222.621 1915.5,223.424 1916.07,224.183 1916.64,226.873 1917.21,226.263 1917.77,228.867 1918.34,232.325 1918.91,231.42 1919.48,231.526 1920.05,231.562 1920.62,231.535 1921.18,230.54 1921.75,230.444 1922.32,228.558 1922.89,229.057 1923.46,227.376 1924.03,226.697 1924.59,229.144 1925.16,229.398 1925.73,229.632 1926.3,228.858 1926.87,230.213 1927.44,230.298 1928,229.248 1928.57,227.322 1929.14,231.841 1929.71,230.776 1930.28,229.817 1930.85,230.163 1931.41,230.032 1931.98,228.975 1932.55,227.249 1933.12,227.796 1933.69,228.123 1934.26,229.635 1934.82,230.817 1935.39,233.213 1935.96,234.421 1936.53,233.317 1937.1,234.434 1937.67,235.302 1938.23,234.32 1938.8,233.292 1939.37,234.382 1939.94,235.162 1940.51,232.992 1941.08,232.213 1941.64,231.138 1942.21,228.874 1942.78,226.937 1943.35,228.362 1943.92,230.957 1944.49,229.953 1945.05,230.931 1945.62,233.059 1946.19,232.978 1946.76,233.753 1947.33,233.537 1947.9,233.608 1948.46,234.573 1949.03,232.06 1949.6,232.017 1950.17,232.042 1950.74,235.217 1951.31,233.946 1951.87,234.884 1952.44,235.636 1953.01,237.356 1953.58,236.846 1954.15,233.228 1954.72,234.156 1955.28,233.12 1955.85,234.049 1956.42,233.686 1956.99,232.338 1957.56,232.211 1958.13,232.988 1958.69,231.741 1959.26,231.657 1959.83,231.682 1960.4,231.791 1960.97,232.582 1961.54,233.453 1962.1,234.277 1962.67,236.15 1963.24,232.609 1963.81,232.578 1964.38,232.509 1964.95,231.198 1965.51,230.285 1966.08,231.412 1966.65,231.265 1967.22,229.063 1967.79,229.169 1968.36,229.17 1968.92,229.307 1969.49,229.269 1970.06,228.276 1970.63,227.404 1971.2,226.689 1971.77,227.132 1972.34,225.247 1972.9,227.905 1973.47,230.091 1974.04,231.011 1974.61,231.013 1975.18,231.822 1975.75,232.925 1976.31,233.994 1976.88,234.667 1977.45,231.321 1978.02,231.165 1978.59,230.901 1979.16,230.887 1979.72,233.849 1980.29,230.497 1980.86,230.583 1981.43,230.578 1982,230.6 1982.57,230.572 1983.13,231.707 1983.7,227.585 1984.27,228.568 1984.84,230.734 1985.41,229.774 1985.98,229.834 1986.54,227.608 1987.11,226.889 1987.68,227.266 1988.25,226.634 1988.82,228.868 1989.39,227.955 1989.95,228.098 1990.52,228.421 1991.09,229.451 1991.66,229.476 1992.23,229.66 1992.8,226.743 1993.36,226.11 1993.93,225.503 1994.5,225.902 1995.07,226.179 1995.64,226.635 1996.21,226.728 1996.77,226.987 1997.34,226.194 1997.91,225.568 1998.48,226 1999.05,227.601 1999.62,228.057 2000.18,229.371 2000.75,230.501 2001.32,232.626 2001.89,232.522 2002.46,233.216 2003.03,232.951 2003.59,232.745 2004.16,234.849 2004.73,233.51 2005.3,233.487 2005.87,234.494 2006.44,233.156 2007,231.898 2007.57,230.713 2008.14,229.873 2008.71,229.888 2009.28,230.053 2009.85,231.266 2010.41,232.122 2010.98,232.002 2011.55,230.957 2012.12,230.979 2012.69,230.923 2013.26,230.964 2013.82,231.147 2014.39,233.119 2014.96,232.026 2015.53,233.036 2016.1,229.744 2016.67,230.815 2017.23,232.797 2017.8,231.663 2018.37,230.253 2018.94,235.527 2019.51,236.386 2020.08,237.081 2020.64,236.725 2021.21,235.939 2021.78,235.523 2022.35,235.23 2022.92,231.639 2023.49,230.685 2024.05,231.671 2024.62,231.53 2025.19,231.34 2025.76,230.222 2026.33,231.151 2026.9,231.165 2027.46,233.27 2028.03,230.052 2028.6,228.209 2029.17,232.504 2029.74,231.167 2030.31,229.155 2030.87,229.265 2031.44,231.399 2032.01,232.219 2032.58,231.182 2033.15,229.895 2033.72,229.862 2034.28,229.879 2034.85,228.613 2035.42,229.74 2035.99,230.983 2036.56,229.958 2037.13,230.096 2037.69,230.139 2038.26,230.046 2038.83,229.985 2039.4,229.005 2039.97,230.247 2040.54,231.218 2041.11,230.054 2041.67,230.095 2042.24,231.047 2042.81,231.064 2043.38,231.11 2043.95,230.99 2044.52,232.977 2045.08,233.814 2045.65,234.547 2046.22,235.217 2046.79,235.886 2047.36,232.513 2047.93,231.39 2048.49,232.364 2049.06,228.331 2049.63,224.101 2050.2,224.696 2050.77,224.399 2051.34,221.819 2051.9,222.428 2052.47,221.761 2053.04,221.214 2053.61,220.859 2054.18,220.778 2054.75,222.428 2055.31,222.308 2055.88,222.928 2056.45,222.459 2057.02,224.015 2057.59,225.638 2058.16,226.82 2058.72,228.049 2059.29,229.205 2059.86,229.381 2060.43,229.573 2061,229.681 2061.57,227.92 2062.13,228.225 2062.7,228.347 2063.27,227.561 2063.84,226.65 2064.41,227.916 2064.98,227.227 2065.54,225.484 2066.11,230.025 2066.68,230.336 2067.25,233.585 2067.82,235.633 2068.39,235.392 2068.95,237.177 2069.52,237.683 2070.09,236.407 2070.66,236.284 2071.23,237.13 2071.8,236.564 2072.36,233.192 2072.93,234.12 2073.5,232.758 2074.07,232.545 2074.64,233.491 2075.21,237.372 2075.77,235.101 2076.34,234.921 2076.91,234.615 2077.48,234.305 2078.05,233.064 2078.62,233.819 2079.18,233.534 2079.75,235.495 2080.32,235.109 2080.89,232.436 2081.46,232.121 2082.03,234.049 2082.59,231.658 2083.16,232.526 2083.73,232.106 2084.3,230.977 2084.87,232.837 2085.44,230.296 2086,231.361 2086.57,232.457 2087.14,234.406 2087.71,237.138 2088.28,236.694 2088.85,237.288 2089.41,237.756 2089.98,235.919 2090.55,236.498 2091.12,235.081 2091.69,236.686 2092.26,233.166 2092.82,232.92 2093.39,234.747 2093.96,234.354 2094.53,236.072 2095.1,234.508 2095.67,234.244 2096.23,233.785 2096.8,233.485 2097.37,234.132 2097.94,234.843 2098.51,235.496 2099.08,238.842 2099.64,237.186 2100.21,235.513 2100.78,235.027 2101.35,236.352 2101.92,236.649 2102.49,235.983 2103.05,233.138 2103.62,233.695 2104.19,233.236 2104.76,230.84 2105.33,229.559 2105.9,227.459 2106.46,228.514 2107.03,231.497 2107.6,231.247 2108.17,233.164 2108.74,233.931 2109.31,233.668 2109.87,233.068 2110.44,233.536 2111.01,232.987 2111.58,231.557 2112.15,231.148 2112.72,230.675 2113.29,229.265 2113.85,228.004 2114.42,229.163 2114.99,226.949 2115.56,227.025 2116.13,227.146 2116.7,225.933 2117.26,223.958 2117.83,225.11 2118.4,227.379 2118.97,228.355 2119.54,229.473 2120.11,229.211 2120.67,229.141 2121.24,228.022 2121.81,229.005 2122.38,230.038 2122.95,230.727 2123.52,230.468 2124.08,230.233 2124.65,231.011 2125.22,230.935 2125.79,228.863 2126.36,228.908 2126.93,230.041 2127.49,230.015 2128.06,229.843 2128.63,227.816 2129.2,226.875 2129.77,228.151 2130.34,228.071 2130.9,229.929 2131.47,229.775 2132.04,229.712 2132.61,229.545 2133.18,228.516 2133.75,229.837 2134.31,229.51 2134.88,230.451 2135.45,230.316 2136.02,226.883 2136.59,226.886 2137.16,226.088 2137.72,224.444 2138.29,224.576 2138.86,224.825 2139.43,222.329 2140,224.917 2140.57,225.188 2141.13,225.475 2141.7,225.502 2142.27,226.716 2142.84,223.816 2143.41,225.163 2143.98,227.664 2144.54,228.032 2145.11,226.171 2145.68,224.638 2146.25,224.956 2146.82,225.434 2147.39,223.568 2147.95,224.958 2148.52,225.327 2149.09,227.918 2149.66,228.126 2150.23,227.321 2150.8,228.679 2151.36,229.92 2151.93,228.974 2152.5,229.229 2153.07,228.185 2153.64,227.377 2154.21,228.72 2154.77,226.895 2155.34,226.076 2155.91,226.496 2156.48,225.73 2157.05,225.112 2157.62,225.58 2158.18,226.565 2158.75,228.166 2159.32,229.4 2159.89,228.699 \"/>\n<path clip-path=\"url(#clip410)\" d=\"M1625.75 1245.03 L2150.8 1245.03 L2150.8 1089.51 L1625.75 1089.51  Z\" fill=\"#ffffff\" fill-rule=\"evenodd\" fill-opacity=\"1\"/>\n<polyline clip-path=\"url(#clip410)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"1625.75,1245.03 2150.8,1245.03 2150.8,1089.51 1625.75,1089.51 1625.75,1245.03 \"/>\n<polyline clip-path=\"url(#clip410)\" style=\"stroke:#e26f46; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" stroke-dasharray=\"16, 10\" points=\"1645.83,1141.35 1766.28,1141.35 \"/>\n<path clip-path=\"url(#clip410)\" d=\"M1793.76 1125.34 L1793.76 1132.71 L1802.53 1132.71 L1802.53 1136.02 L1793.76 1136.02 L1793.76 1150.09 Q1793.76 1153.26 1794.61 1154.16 Q1795.49 1155.07 1798.16 1155.07 L1802.53 1155.07 L1802.53 1158.63 L1798.16 1158.63 Q1793.23 1158.63 1791.35 1156.8 Q1789.48 1154.95 1789.48 1150.09 L1789.48 1136.02 L1786.35 1136.02 L1786.35 1132.71 L1789.48 1132.71 L1789.48 1125.34 L1793.76 1125.34 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip410)\" d=\"M1819.92 1145.6 Q1814.75 1145.6 1812.76 1146.78 Q1810.77 1147.96 1810.77 1150.81 Q1810.77 1153.08 1812.25 1154.42 Q1813.76 1155.74 1816.33 1155.74 Q1819.87 1155.74 1822 1153.24 Q1824.15 1150.72 1824.15 1146.55 L1824.15 1145.6 L1819.92 1145.6 M1828.41 1143.84 L1828.41 1158.63 L1824.15 1158.63 L1824.15 1154.7 Q1822.69 1157.06 1820.52 1158.19 Q1818.34 1159.3 1815.19 1159.3 Q1811.21 1159.3 1808.85 1157.08 Q1806.51 1154.84 1806.51 1151.09 Q1806.51 1146.71 1809.43 1144.49 Q1812.37 1142.27 1818.18 1142.27 L1824.15 1142.27 L1824.15 1141.85 Q1824.15 1138.91 1822.21 1137.31 Q1820.29 1135.69 1816.79 1135.69 Q1814.57 1135.69 1812.46 1136.22 Q1810.36 1136.76 1808.41 1137.82 L1808.41 1133.89 Q1810.75 1132.98 1812.95 1132.54 Q1815.15 1132.08 1817.23 1132.08 Q1822.86 1132.08 1825.63 1135 Q1828.41 1137.91 1828.41 1143.84 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip410)\" d=\"M1852.21 1136.69 Q1851.49 1136.27 1850.63 1136.09 Q1849.8 1135.88 1848.78 1135.88 Q1845.17 1135.88 1843.23 1138.24 Q1841.3 1140.58 1841.3 1144.97 L1841.3 1158.63 L1837.02 1158.63 L1837.02 1132.71 L1841.3 1132.71 L1841.3 1136.73 Q1842.65 1134.37 1844.8 1133.24 Q1846.95 1132.08 1850.03 1132.08 Q1850.47 1132.08 1851 1132.15 Q1851.54 1132.2 1852.18 1132.31 L1852.21 1136.69 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip410)\" d=\"M1872.9 1145.37 Q1872.9 1140.74 1870.98 1138.19 Q1869.08 1135.65 1865.63 1135.65 Q1862.21 1135.65 1860.29 1138.19 Q1858.39 1140.74 1858.39 1145.37 Q1858.39 1149.97 1860.29 1152.52 Q1862.21 1155.07 1865.63 1155.07 Q1869.08 1155.07 1870.98 1152.52 Q1872.9 1149.97 1872.9 1145.37 M1877.16 1155.41 Q1877.16 1162.03 1874.22 1165.25 Q1871.28 1168.49 1865.22 1168.49 Q1862.97 1168.49 1860.98 1168.15 Q1858.99 1167.82 1857.11 1167.13 L1857.11 1162.98 Q1858.99 1164 1860.82 1164.49 Q1862.65 1164.97 1864.54 1164.97 Q1868.73 1164.97 1870.82 1162.78 Q1872.9 1160.6 1872.9 1156.18 L1872.9 1154.07 Q1871.58 1156.36 1869.52 1157.5 Q1867.46 1158.63 1864.59 1158.63 Q1859.82 1158.63 1856.91 1155 Q1853.99 1151.36 1853.99 1145.37 Q1853.99 1139.35 1856.91 1135.72 Q1859.82 1132.08 1864.59 1132.08 Q1867.46 1132.08 1869.52 1133.22 Q1871.58 1134.35 1872.9 1136.64 L1872.9 1132.71 L1877.16 1132.71 L1877.16 1155.41 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip410)\" d=\"M1908.11 1144.6 L1908.11 1146.69 L1888.53 1146.69 Q1888.8 1151.09 1891.17 1153.4 Q1893.55 1155.69 1897.79 1155.69 Q1900.24 1155.69 1902.53 1155.09 Q1904.85 1154.49 1907.11 1153.28 L1907.11 1157.31 Q1904.82 1158.28 1902.42 1158.79 Q1900.01 1159.3 1897.53 1159.3 Q1891.33 1159.3 1887.69 1155.69 Q1884.08 1152.08 1884.08 1145.92 Q1884.08 1139.56 1887.51 1135.83 Q1890.96 1132.08 1896.79 1132.08 Q1902.02 1132.08 1905.05 1135.46 Q1908.11 1138.82 1908.11 1144.6 M1903.85 1143.35 Q1903.8 1139.86 1901.88 1137.78 Q1899.98 1135.69 1896.84 1135.69 Q1893.27 1135.69 1891.12 1137.71 Q1888.99 1139.72 1888.67 1143.38 L1903.85 1143.35 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip410)\" d=\"M1919.31 1125.34 L1919.31 1132.71 L1928.09 1132.71 L1928.09 1136.02 L1919.31 1136.02 L1919.31 1150.09 Q1919.31 1153.26 1920.17 1154.16 Q1921.05 1155.07 1923.71 1155.07 L1928.09 1155.07 L1928.09 1158.63 L1923.71 1158.63 Q1918.78 1158.63 1916.91 1156.8 Q1915.03 1154.95 1915.03 1150.09 L1915.03 1136.02 L1911.91 1136.02 L1911.91 1132.71 L1915.03 1132.71 L1915.03 1125.34 L1919.31 1125.34 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip410)\" d=\"M1953.39 1166.5 L1953.39 1169.81 L1928.76 1169.81 L1928.76 1166.5 L1953.39 1166.5 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip410)\" d=\"M1954.91 1132.71 L1959.17 1132.71 L1964.5 1152.94 L1969.8 1132.71 L1974.82 1132.71 L1980.15 1152.94 L1985.45 1132.71 L1989.71 1132.71 L1982.92 1158.63 L1977.9 1158.63 L1972.32 1137.38 L1966.72 1158.63 L1961.7 1158.63 L1954.91 1132.71 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip410)\" d=\"M2007.95 1145.6 Q2002.78 1145.6 2000.79 1146.78 Q1998.8 1147.96 1998.8 1150.81 Q1998.8 1153.08 2000.28 1154.42 Q2001.79 1155.74 2004.36 1155.74 Q2007.9 1155.74 2010.03 1153.24 Q2012.18 1150.72 2012.18 1146.55 L2012.18 1145.6 L2007.95 1145.6 M2016.44 1143.84 L2016.44 1158.63 L2012.18 1158.63 L2012.18 1154.7 Q2010.72 1157.06 2008.55 1158.19 Q2006.37 1159.3 2003.22 1159.3 Q1999.24 1159.3 1996.88 1157.08 Q1994.54 1154.84 1994.54 1151.09 Q1994.54 1146.71 1997.46 1144.49 Q2000.4 1142.27 2006.21 1142.27 L2012.18 1142.27 L2012.18 1141.85 Q2012.18 1138.91 2010.24 1137.31 Q2008.32 1135.69 2004.82 1135.69 Q2002.6 1135.69 2000.49 1136.22 Q1998.39 1136.76 1996.44 1137.82 L1996.44 1133.89 Q1998.78 1132.98 2000.98 1132.54 Q2003.18 1132.08 2005.26 1132.08 Q2010.89 1132.08 2013.66 1135 Q2016.44 1137.91 2016.44 1143.84 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip410)\" d=\"M2025.22 1122.61 L2029.47 1122.61 L2029.47 1158.63 L2025.22 1158.63 L2025.22 1122.61 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip410)\" d=\"M2038.22 1122.61 L2042.51 1122.61 L2042.51 1143.89 L2055.22 1132.71 L2060.65 1132.71 L2046.91 1144.84 L2061.23 1158.63 L2055.68 1158.63 L2042.51 1145.97 L2042.51 1158.63 L2038.22 1158.63 L2038.22 1122.61 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip410)\" d=\"M2086.33 1144.6 L2086.33 1146.69 L2066.74 1146.69 Q2067.02 1151.09 2069.38 1153.4 Q2071.77 1155.69 2076 1155.69 Q2078.46 1155.69 2080.75 1155.09 Q2083.06 1154.49 2085.33 1153.28 L2085.33 1157.31 Q2083.04 1158.28 2080.63 1158.79 Q2078.22 1159.3 2075.75 1159.3 Q2069.54 1159.3 2065.91 1155.69 Q2062.3 1152.08 2062.3 1145.92 Q2062.3 1139.56 2065.72 1135.83 Q2069.17 1132.08 2075.01 1132.08 Q2080.24 1132.08 2083.27 1135.46 Q2086.33 1138.82 2086.33 1144.6 M2082.07 1143.35 Q2082.02 1139.86 2080.1 1137.78 Q2078.2 1135.69 2075.05 1135.69 Q2071.49 1135.69 2069.34 1137.71 Q2067.21 1139.72 2066.88 1143.38 L2082.07 1143.35 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip410)\" d=\"M2108.34 1136.69 Q2107.62 1136.27 2106.77 1136.09 Q2105.93 1135.88 2104.91 1135.88 Q2101.3 1135.88 2099.36 1138.24 Q2097.44 1140.58 2097.44 1144.97 L2097.44 1158.63 L2093.15 1158.63 L2093.15 1132.71 L2097.44 1132.71 L2097.44 1136.73 Q2098.78 1134.37 2100.93 1133.24 Q2103.09 1132.08 2106.16 1132.08 Q2106.6 1132.08 2107.14 1132.15 Q2107.67 1132.2 2108.32 1132.31 L2108.34 1136.69 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip410)\" d=\"M2129.34 1133.47 L2129.34 1137.5 Q2127.53 1136.57 2125.59 1136.11 Q2123.64 1135.65 2121.56 1135.65 Q2118.39 1135.65 2116.79 1136.62 Q2115.21 1137.59 2115.21 1139.53 Q2115.21 1141.02 2116.35 1141.87 Q2117.48 1142.71 2120.91 1143.47 L2122.37 1143.79 Q2126.9 1144.77 2128.8 1146.55 Q2130.72 1148.31 2130.72 1151.48 Q2130.72 1155.09 2127.85 1157.2 Q2125.01 1159.3 2120.01 1159.3 Q2117.92 1159.3 2115.65 1158.89 Q2113.41 1158.49 2110.91 1157.68 L2110.91 1153.28 Q2113.27 1154.51 2115.56 1155.14 Q2117.85 1155.74 2120.1 1155.74 Q2123.11 1155.74 2124.73 1154.72 Q2126.35 1153.68 2126.35 1151.8 Q2126.35 1150.07 2125.17 1149.14 Q2124.01 1148.22 2120.05 1147.36 L2118.57 1147.01 Q2114.61 1146.18 2112.85 1144.47 Q2111.09 1142.73 2111.09 1139.72 Q2111.09 1136.06 2113.69 1134.07 Q2116.28 1132.08 2121.05 1132.08 Q2123.41 1132.08 2125.49 1132.43 Q2127.58 1132.78 2129.34 1133.47 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><polyline clip-path=\"url(#clip410)\" style=\"stroke:#009af9; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"1645.83,1193.19 1766.28,1193.19 \"/>\n<path clip-path=\"url(#clip410)\" d=\"M1808.06 1194.82 L1808.06 1210.47 L1803.8 1210.47 L1803.8 1194.96 Q1803.8 1191.28 1802.37 1189.45 Q1800.93 1187.62 1798.06 1187.62 Q1794.61 1187.62 1792.62 1189.82 Q1790.63 1192.02 1790.63 1195.82 L1790.63 1210.47 L1786.35 1210.47 L1786.35 1184.55 L1790.63 1184.55 L1790.63 1188.57 Q1792.16 1186.24 1794.22 1185.08 Q1796.3 1183.92 1799.01 1183.92 Q1803.48 1183.92 1805.77 1186.7 Q1808.06 1189.45 1808.06 1194.82 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip410)\" d=\"M1826.61 1187.53 Q1823.18 1187.53 1821.19 1190.22 Q1819.2 1192.88 1819.2 1197.53 Q1819.2 1202.18 1821.17 1204.87 Q1823.16 1207.53 1826.61 1207.53 Q1830.01 1207.53 1832 1204.85 Q1833.99 1202.16 1833.99 1197.53 Q1833.99 1192.93 1832 1190.24 Q1830.01 1187.53 1826.61 1187.53 M1826.61 1183.92 Q1832.16 1183.92 1835.33 1187.53 Q1838.5 1191.14 1838.5 1197.53 Q1838.5 1203.9 1835.33 1207.53 Q1832.16 1211.14 1826.61 1211.14 Q1821.03 1211.14 1817.86 1207.53 Q1814.71 1203.9 1814.71 1197.53 Q1814.71 1191.14 1817.86 1187.53 Q1821.03 1183.92 1826.61 1183.92 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip410)\" d=\"M1860.59 1188.53 Q1859.87 1188.11 1859.01 1187.93 Q1858.18 1187.72 1857.16 1187.72 Q1853.55 1187.72 1851.61 1190.08 Q1849.68 1192.42 1849.68 1196.81 L1849.68 1210.47 L1845.4 1210.47 L1845.4 1184.55 L1849.68 1184.55 L1849.68 1188.57 Q1851.03 1186.21 1853.18 1185.08 Q1855.33 1183.92 1858.41 1183.92 Q1858.85 1183.92 1859.38 1183.99 Q1859.92 1184.04 1860.56 1184.15 L1860.59 1188.53 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip410)\" d=\"M1884.41 1189.52 Q1886 1186.65 1888.23 1185.29 Q1890.45 1183.92 1893.46 1183.92 Q1897.51 1183.92 1899.71 1186.77 Q1901.91 1189.59 1901.91 1194.82 L1901.91 1210.47 L1897.62 1210.47 L1897.62 1194.96 Q1897.62 1191.24 1896.3 1189.43 Q1894.98 1187.62 1892.28 1187.62 Q1888.97 1187.62 1887.04 1189.82 Q1885.12 1192.02 1885.12 1195.82 L1885.12 1210.47 L1880.84 1210.47 L1880.84 1194.96 Q1880.84 1191.21 1879.52 1189.43 Q1878.2 1187.62 1875.45 1187.62 Q1872.18 1187.62 1870.26 1189.85 Q1868.34 1192.05 1868.34 1195.82 L1868.34 1210.47 L1864.06 1210.47 L1864.06 1184.55 L1868.34 1184.55 L1868.34 1188.57 Q1869.8 1186.19 1871.84 1185.06 Q1873.87 1183.92 1876.67 1183.92 Q1879.5 1183.92 1881.47 1185.36 Q1883.46 1186.79 1884.41 1189.52 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /></svg>\n","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"After an initial equilibriation period, the norm fluctuates around the target number of walkers.","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"Now, let's look at using the shift to estimate the ground state energy of H. The mean of the shift is a useful estimator of the energy. Calculating the error bars is a bit more involved as autocorrelations have to be removed from the time series. This can be done with the function shift_estimator, which performs a blocking analysis on the shift column of the dataframe.","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"se = shift_estimator(df; skip=steps_equilibrate)","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"BlockingResult{Float64}\n  mean = -4.021 ± 0.026\n  with uncertainty of ± 0.002357164771859439\n  from 62 blocks after 5 transformations (k = 6).\n","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"Here, se contains the calculated mean and standard errors of the shift, as well as some additional information related to the blocking analysis.","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"Computing the error of the projected energy is a bit more complicated, as it's a ratio of fluctuating variables contained in the hproj and vproj columns in the dataframe. Thankfully, the complications are handled by the function projected_energy.","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"pe = projected_energy(df; skip=steps_equilibrate)","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"RatioBlockingResult{Float64,MonteCarloMeasurements.Particles{Float64, 2000}}\n  ratio = -4.01308 ± (0.00300713, 0.00294623) (MC)\n  95% confidence interval: [-4.01905, -4.00729]) (MC)\n  linear error propagation: -4.01375 ± 0.00302017\n  |δ_y| = |0.00264482| (≤ 0.1 for normal approx)\n  Blocking successful with 15 blocks after 7 transformations (k = 8).\n","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"The result is a ratio distribution. We extract its median and the edges of the 95% confidence interval.","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"v = val_and_errs(pe; p=0.95)","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"(val = -4.0130765888974835, val_l = 0.005977276915417384, val_u = 0.005787654850003321)","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"Let's visualise these estimators together with the time series of the shift.","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"plot(df.step, df.shift, ylabel=\"energy\", xlabel=\"step\", label=\"shift\", margin = 1Plots.cm)\n\nplot!(x->se.mean, df.step[steps_equilibrate+1:end], ribbon=se.err, label=\"shift mean\")\nplot!(\n    x -> v.val, df.step[steps_equilibrate+1:end], ribbon=(v.val_l,v.val_u),\n    label=\"projected energy\",\n)\nlens!([steps_equilibrate, last_step], [-5.1, -2.9]; inset=(1, bbox(0.2, 0.25, 0.6, 0.4)))","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"<?xml version=\"1.0\" encoding=\"utf-8\"?>\n<svg xmlns=\"http://www.w3.org/2000/svg\" xmlns:xlink=\"http://www.w3.org/1999/xlink\" width=\"600\" height=\"400\" viewBox=\"0 0 2400 1600\">\n<defs>\n  <clipPath id=\"clip440\">\n    <rect x=\"0\" y=\"0\" width=\"2400\" height=\"1600\"/>\n  </clipPath>\n</defs>\n<path clip-path=\"url(#clip440)\" d=\"M0 1600 L2400 1600 L2400 0 L0 0  Z\" fill=\"#ffffff\" fill-rule=\"evenodd\" fill-opacity=\"1\"/>\n<defs>\n  <clipPath id=\"clip441\">\n    <rect x=\"480\" y=\"0\" width=\"1681\" height=\"1600\"/>\n  </clipPath>\n</defs>\n<path clip-path=\"url(#clip440)\" d=\"M346.853 1281.45 L2211.02 1281.45 L2211.02 188.976 L346.853 188.976  Z\" fill=\"#ffffff\" fill-rule=\"evenodd\" fill-opacity=\"1\"/>\n<defs>\n  <clipPath id=\"clip442\">\n    <rect x=\"346\" y=\"188\" width=\"1865\" height=\"1093\"/>\n  </clipPath>\n</defs>\n<polyline clip-path=\"url(#clip442)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:2; stroke-opacity:0.1; fill:none\" points=\"399.026,1281.45 399.026,188.976 \"/>\n<polyline clip-path=\"url(#clip442)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:2; stroke-opacity:0.1; fill:none\" points=\"985.439,1281.45 985.439,188.976 \"/>\n<polyline clip-path=\"url(#clip442)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:2; stroke-opacity:0.1; fill:none\" points=\"1571.85,1281.45 1571.85,188.976 \"/>\n<polyline clip-path=\"url(#clip442)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:2; stroke-opacity:0.1; fill:none\" points=\"2158.26,1281.45 2158.26,188.976 \"/>\n<polyline clip-path=\"url(#clip442)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:2; stroke-opacity:0.1; fill:none\" points=\"346.853,1148.08 2211.02,1148.08 \"/>\n<polyline clip-path=\"url(#clip442)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:2; stroke-opacity:0.1; fill:none\" points=\"346.853,996.26 2211.02,996.26 \"/>\n<polyline clip-path=\"url(#clip442)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:2; stroke-opacity:0.1; fill:none\" points=\"346.853,844.437 2211.02,844.437 \"/>\n<polyline clip-path=\"url(#clip442)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:2; stroke-opacity:0.1; fill:none\" points=\"346.853,692.614 2211.02,692.614 \"/>\n<polyline clip-path=\"url(#clip442)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:2; stroke-opacity:0.1; fill:none\" points=\"346.853,540.792 2211.02,540.792 \"/>\n<polyline clip-path=\"url(#clip442)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:2; stroke-opacity:0.1; fill:none\" points=\"346.853,388.969 2211.02,388.969 \"/>\n<polyline clip-path=\"url(#clip442)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:2; stroke-opacity:0.1; fill:none\" points=\"346.853,237.146 2211.02,237.146 \"/>\n<polyline clip-path=\"url(#clip440)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"346.853,1281.45 2211.02,1281.45 \"/>\n<polyline clip-path=\"url(#clip440)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"399.026,1281.45 399.026,1262.55 \"/>\n<polyline clip-path=\"url(#clip440)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"985.439,1281.45 985.439,1262.55 \"/>\n<polyline clip-path=\"url(#clip440)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"1571.85,1281.45 1571.85,1262.55 \"/>\n<polyline clip-path=\"url(#clip440)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"2158.26,1281.45 2158.26,1262.55 \"/>\n<path clip-path=\"url(#clip440)\" d=\"M399.026 1312.37 Q395.415 1312.37 393.587 1315.93 Q391.781 1319.47 391.781 1326.6 Q391.781 1333.71 393.587 1337.27 Q395.415 1340.82 399.026 1340.82 Q402.661 1340.82 404.466 1337.27 Q406.295 1333.71 406.295 1326.6 Q406.295 1319.47 404.466 1315.93 Q402.661 1312.37 399.026 1312.37 M399.026 1308.66 Q404.837 1308.66 407.892 1313.27 Q410.971 1317.85 410.971 1326.6 Q410.971 1335.33 407.892 1339.94 Q404.837 1344.52 399.026 1344.52 Q393.216 1344.52 390.138 1339.94 Q387.082 1335.33 387.082 1326.6 Q387.082 1317.85 390.138 1313.27 Q393.216 1308.66 399.026 1308.66 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip440)\" d=\"M929.965 1339.91 L937.604 1339.91 L937.604 1313.55 L929.293 1315.21 L929.293 1310.95 L937.557 1309.29 L942.233 1309.29 L942.233 1339.91 L949.872 1339.91 L949.872 1343.85 L929.965 1343.85 L929.965 1339.91 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip440)\" d=\"M969.316 1312.37 Q965.705 1312.37 963.877 1315.93 Q962.071 1319.47 962.071 1326.6 Q962.071 1333.71 963.877 1337.27 Q965.705 1340.82 969.316 1340.82 Q972.951 1340.82 974.756 1337.27 Q976.585 1333.71 976.585 1326.6 Q976.585 1319.47 974.756 1315.93 Q972.951 1312.37 969.316 1312.37 M969.316 1308.66 Q975.127 1308.66 978.182 1313.27 Q981.261 1317.85 981.261 1326.6 Q981.261 1335.33 978.182 1339.94 Q975.127 1344.52 969.316 1344.52 Q963.506 1344.52 960.428 1339.94 Q957.372 1335.33 957.372 1326.6 Q957.372 1317.85 960.428 1313.27 Q963.506 1308.66 969.316 1308.66 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip440)\" d=\"M999.478 1312.37 Q995.867 1312.37 994.038 1315.93 Q992.233 1319.47 992.233 1326.6 Q992.233 1333.71 994.038 1337.27 Q995.867 1340.82 999.478 1340.82 Q1003.11 1340.82 1004.92 1337.27 Q1006.75 1333.71 1006.75 1326.6 Q1006.75 1319.47 1004.92 1315.93 Q1003.11 1312.37 999.478 1312.37 M999.478 1308.66 Q1005.29 1308.66 1008.34 1313.27 Q1011.42 1317.85 1011.42 1326.6 Q1011.42 1335.33 1008.34 1339.94 Q1005.29 1344.52 999.478 1344.52 Q993.668 1344.52 990.589 1339.94 Q987.534 1335.33 987.534 1326.6 Q987.534 1317.85 990.589 1313.27 Q993.668 1308.66 999.478 1308.66 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip440)\" d=\"M1029.64 1312.37 Q1026.03 1312.37 1024.2 1315.93 Q1022.39 1319.47 1022.39 1326.6 Q1022.39 1333.71 1024.2 1337.27 Q1026.03 1340.82 1029.64 1340.82 Q1033.27 1340.82 1035.08 1337.27 Q1036.91 1333.71 1036.91 1326.6 Q1036.91 1319.47 1035.08 1315.93 Q1033.27 1312.37 1029.64 1312.37 M1029.64 1308.66 Q1035.45 1308.66 1038.51 1313.27 Q1041.58 1317.85 1041.58 1326.6 Q1041.58 1335.33 1038.51 1339.94 Q1035.45 1344.52 1029.64 1344.52 Q1023.83 1344.52 1020.75 1339.94 Q1017.7 1335.33 1017.7 1326.6 Q1017.7 1317.85 1020.75 1313.27 Q1023.83 1308.66 1029.64 1308.66 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip440)\" d=\"M1520.46 1339.91 L1536.78 1339.91 L1536.78 1343.85 L1514.84 1343.85 L1514.84 1339.91 Q1517.5 1337.16 1522.08 1332.53 Q1526.69 1327.88 1527.87 1326.53 Q1530.12 1324.01 1531 1322.27 Q1531.9 1320.51 1531.9 1318.82 Q1531.9 1316.07 1529.95 1314.33 Q1528.03 1312.6 1524.93 1312.6 Q1522.73 1312.6 1520.28 1313.36 Q1517.85 1314.13 1515.07 1315.68 L1515.07 1310.95 Q1517.89 1309.82 1520.35 1309.24 Q1522.8 1308.66 1524.84 1308.66 Q1530.21 1308.66 1533.4 1311.35 Q1536.6 1314.03 1536.6 1318.52 Q1536.6 1320.65 1535.79 1322.57 Q1535 1324.47 1532.89 1327.07 Q1532.31 1327.74 1529.21 1330.95 Q1526.11 1334.15 1520.46 1339.91 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip440)\" d=\"M1556.6 1312.37 Q1552.99 1312.37 1551.16 1315.93 Q1549.35 1319.47 1549.35 1326.6 Q1549.35 1333.71 1551.16 1337.27 Q1552.99 1340.82 1556.6 1340.82 Q1560.23 1340.82 1562.04 1337.27 Q1563.87 1333.71 1563.87 1326.6 Q1563.87 1319.47 1562.04 1315.93 Q1560.23 1312.37 1556.6 1312.37 M1556.6 1308.66 Q1562.41 1308.66 1565.46 1313.27 Q1568.54 1317.85 1568.54 1326.6 Q1568.54 1335.33 1565.46 1339.94 Q1562.41 1344.52 1556.6 1344.52 Q1550.79 1344.52 1547.71 1339.94 Q1544.65 1335.33 1544.65 1326.6 Q1544.65 1317.85 1547.71 1313.27 Q1550.79 1308.66 1556.6 1308.66 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip440)\" d=\"M1586.76 1312.37 Q1583.15 1312.37 1581.32 1315.93 Q1579.51 1319.47 1579.51 1326.6 Q1579.51 1333.71 1581.32 1337.27 Q1583.15 1340.82 1586.76 1340.82 Q1590.39 1340.82 1592.2 1337.27 Q1594.03 1333.71 1594.03 1326.6 Q1594.03 1319.47 1592.2 1315.93 Q1590.39 1312.37 1586.76 1312.37 M1586.76 1308.66 Q1592.57 1308.66 1595.62 1313.27 Q1598.7 1317.85 1598.7 1326.6 Q1598.7 1335.33 1595.62 1339.94 Q1592.57 1344.52 1586.76 1344.52 Q1580.95 1344.52 1577.87 1339.94 Q1574.81 1335.33 1574.81 1326.6 Q1574.81 1317.85 1577.87 1313.27 Q1580.95 1308.66 1586.76 1308.66 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip440)\" d=\"M1616.92 1312.37 Q1613.31 1312.37 1611.48 1315.93 Q1609.68 1319.47 1609.68 1326.6 Q1609.68 1333.71 1611.48 1337.27 Q1613.31 1340.82 1616.92 1340.82 Q1620.55 1340.82 1622.36 1337.27 Q1624.19 1333.71 1624.19 1326.6 Q1624.19 1319.47 1622.36 1315.93 Q1620.55 1312.37 1616.92 1312.37 M1616.92 1308.66 Q1622.73 1308.66 1625.79 1313.27 Q1628.87 1317.85 1628.87 1326.6 Q1628.87 1335.33 1625.79 1339.94 Q1622.73 1344.52 1616.92 1344.52 Q1611.11 1344.52 1608.03 1339.94 Q1604.98 1335.33 1604.98 1326.6 Q1604.98 1317.85 1608.03 1313.27 Q1611.11 1308.66 1616.92 1308.66 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip440)\" d=\"M2116.94 1325.21 Q2120.3 1325.93 2122.18 1328.2 Q2124.07 1330.47 2124.07 1333.8 Q2124.07 1338.92 2120.56 1341.72 Q2117.04 1344.52 2110.56 1344.52 Q2108.38 1344.52 2106.07 1344.08 Q2103.77 1343.66 2101.32 1342.81 L2101.32 1338.29 Q2103.26 1339.43 2105.58 1340 Q2107.89 1340.58 2110.42 1340.58 Q2114.82 1340.58 2117.11 1338.85 Q2119.42 1337.11 2119.42 1333.8 Q2119.42 1330.75 2117.27 1329.03 Q2115.14 1327.3 2111.32 1327.3 L2107.29 1327.3 L2107.29 1323.45 L2111.51 1323.45 Q2114.95 1323.45 2116.78 1322.09 Q2118.61 1320.7 2118.61 1318.11 Q2118.61 1315.44 2116.71 1314.03 Q2114.84 1312.6 2111.32 1312.6 Q2109.4 1312.6 2107.2 1313.01 Q2105 1313.43 2102.36 1314.31 L2102.36 1310.14 Q2105.02 1309.4 2107.34 1309.03 Q2109.68 1308.66 2111.74 1308.66 Q2117.06 1308.66 2120.16 1311.09 Q2123.26 1313.5 2123.26 1317.62 Q2123.26 1320.49 2121.62 1322.48 Q2119.98 1324.45 2116.94 1325.21 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip440)\" d=\"M2142.94 1312.37 Q2139.33 1312.37 2137.5 1315.93 Q2135.69 1319.47 2135.69 1326.6 Q2135.69 1333.71 2137.5 1337.27 Q2139.33 1340.82 2142.94 1340.82 Q2146.57 1340.82 2148.38 1337.27 Q2150.21 1333.71 2150.21 1326.6 Q2150.21 1319.47 2148.38 1315.93 Q2146.57 1312.37 2142.94 1312.37 M2142.94 1308.66 Q2148.75 1308.66 2151.81 1313.27 Q2154.88 1317.85 2154.88 1326.6 Q2154.88 1335.33 2151.81 1339.94 Q2148.75 1344.52 2142.94 1344.52 Q2137.13 1344.52 2134.05 1339.94 Q2131 1335.33 2131 1326.6 Q2131 1317.85 2134.05 1313.27 Q2137.13 1308.66 2142.94 1308.66 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip440)\" d=\"M2173.1 1312.37 Q2169.49 1312.37 2167.66 1315.93 Q2165.86 1319.47 2165.86 1326.6 Q2165.86 1333.71 2167.66 1337.27 Q2169.49 1340.82 2173.1 1340.82 Q2176.74 1340.82 2178.54 1337.27 Q2180.37 1333.71 2180.37 1326.6 Q2180.37 1319.47 2178.54 1315.93 Q2176.74 1312.37 2173.1 1312.37 M2173.1 1308.66 Q2178.91 1308.66 2181.97 1313.27 Q2185.05 1317.85 2185.05 1326.6 Q2185.05 1335.33 2181.97 1339.94 Q2178.91 1344.52 2173.1 1344.52 Q2167.29 1344.52 2164.21 1339.94 Q2161.16 1335.33 2161.16 1326.6 Q2161.16 1317.85 2164.21 1313.27 Q2167.29 1308.66 2173.1 1308.66 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip440)\" d=\"M2203.26 1312.37 Q2199.65 1312.37 2197.82 1315.93 Q2196.02 1319.47 2196.02 1326.6 Q2196.02 1333.71 2197.82 1337.27 Q2199.65 1340.82 2203.26 1340.82 Q2206.9 1340.82 2208.7 1337.27 Q2210.53 1333.71 2210.53 1326.6 Q2210.53 1319.47 2208.7 1315.93 Q2206.9 1312.37 2203.26 1312.37 M2203.26 1308.66 Q2209.07 1308.66 2212.13 1313.27 Q2215.21 1317.85 2215.21 1326.6 Q2215.21 1335.33 2212.13 1339.94 Q2209.07 1344.52 2203.26 1344.52 Q2197.45 1344.52 2194.38 1339.94 Q2191.32 1335.33 2191.32 1326.6 Q2191.32 1317.85 2194.38 1313.27 Q2197.45 1308.66 2203.26 1308.66 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip440)\" d=\"M1237.32 1391.71 L1237.32 1397.25 Q1234.84 1395.98 1232.17 1395.34 Q1229.49 1394.71 1226.63 1394.71 Q1222.27 1394.71 1220.07 1396.04 Q1217.91 1397.38 1217.91 1400.05 Q1217.91 1402.09 1219.47 1403.27 Q1221.03 1404.41 1225.74 1405.46 L1227.74 1405.91 Q1233.98 1407.25 1236.59 1409.7 Q1239.23 1412.12 1239.23 1416.48 Q1239.23 1421.44 1235.29 1424.34 Q1231.37 1427.23 1224.5 1427.23 Q1221.63 1427.23 1218.51 1426.66 Q1215.42 1426.12 1211.99 1425.01 L1211.99 1418.96 Q1215.23 1420.65 1218.38 1421.51 Q1221.54 1422.33 1224.62 1422.33 Q1228.76 1422.33 1230.99 1420.93 Q1233.22 1419.5 1233.22 1416.92 Q1233.22 1414.54 1231.59 1413.26 Q1230 1411.99 1224.56 1410.81 L1222.52 1410.33 Q1217.08 1409.19 1214.66 1406.83 Q1212.24 1404.45 1212.24 1400.31 Q1212.24 1395.28 1215.81 1392.54 Q1219.37 1389.8 1225.93 1389.8 Q1229.17 1389.8 1232.04 1390.28 Q1234.9 1390.76 1237.32 1391.71 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip440)\" d=\"M1254.35 1380.54 L1254.35 1390.66 L1266.41 1390.66 L1266.41 1395.22 L1254.35 1395.22 L1254.35 1414.57 Q1254.35 1418.93 1255.53 1420.17 Q1256.74 1421.41 1260.4 1421.41 L1266.41 1421.41 L1266.41 1426.31 L1260.4 1426.31 Q1253.62 1426.31 1251.04 1423.8 Q1248.46 1421.25 1248.46 1414.57 L1248.46 1395.22 L1244.17 1395.22 L1244.17 1390.66 L1248.46 1390.66 L1248.46 1380.54 L1254.35 1380.54 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip440)\" d=\"M1304.61 1407.02 L1304.61 1409.89 L1277.68 1409.89 Q1278.06 1415.94 1281.31 1419.12 Q1284.59 1422.27 1290.41 1422.27 Q1293.79 1422.27 1296.94 1421.44 Q1300.12 1420.61 1303.24 1418.96 L1303.24 1424.5 Q1300.09 1425.83 1296.78 1426.53 Q1293.47 1427.23 1290.06 1427.23 Q1281.53 1427.23 1276.54 1422.27 Q1271.57 1417.3 1271.57 1408.84 Q1271.57 1400.08 1276.28 1394.96 Q1281.02 1389.8 1289.04 1389.8 Q1296.24 1389.8 1300.41 1394.45 Q1304.61 1399.07 1304.61 1407.02 M1298.75 1405.3 Q1298.69 1400.5 1296.05 1397.63 Q1293.44 1394.77 1289.11 1394.77 Q1284.21 1394.77 1281.25 1397.54 Q1278.32 1400.31 1277.87 1405.34 L1298.75 1405.3 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip440)\" d=\"M1319.89 1420.96 L1319.89 1439.87 L1314 1439.87 L1314 1390.66 L1319.89 1390.66 L1319.89 1396.07 Q1321.73 1392.89 1324.53 1391.36 Q1327.37 1389.8 1331.28 1389.8 Q1337.77 1389.8 1341.82 1394.96 Q1345.89 1400.12 1345.89 1408.52 Q1345.89 1416.92 1341.82 1422.08 Q1337.77 1427.23 1331.28 1427.23 Q1327.37 1427.23 1324.53 1425.71 Q1321.73 1424.15 1319.89 1420.96 M1339.81 1408.52 Q1339.81 1402.06 1337.14 1398.4 Q1334.5 1394.71 1329.85 1394.71 Q1325.2 1394.71 1322.53 1398.4 Q1319.89 1402.06 1319.89 1408.52 Q1319.89 1414.98 1322.53 1418.67 Q1325.2 1422.33 1329.85 1422.33 Q1334.5 1422.33 1337.14 1418.67 Q1339.81 1414.98 1339.81 1408.52 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><polyline clip-path=\"url(#clip440)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"346.853,1281.45 346.853,188.976 \"/>\n<polyline clip-path=\"url(#clip440)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"346.853,1148.08 365.751,1148.08 \"/>\n<polyline clip-path=\"url(#clip440)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"346.853,996.26 365.751,996.26 \"/>\n<polyline clip-path=\"url(#clip440)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"346.853,844.437 365.751,844.437 \"/>\n<polyline clip-path=\"url(#clip440)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"346.853,692.614 365.751,692.614 \"/>\n<polyline clip-path=\"url(#clip440)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"346.853,540.792 365.751,540.792 \"/>\n<polyline clip-path=\"url(#clip440)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"346.853,388.969 365.751,388.969 \"/>\n<polyline clip-path=\"url(#clip440)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"346.853,237.146 365.751,237.146 \"/>\n<path clip-path=\"url(#clip440)\" d=\"M298.909 1133.88 Q295.298 1133.88 293.469 1137.45 Q291.664 1140.99 291.664 1148.12 Q291.664 1155.22 293.469 1158.79 Q295.298 1162.33 298.909 1162.33 Q302.543 1162.33 304.349 1158.79 Q306.177 1155.22 306.177 1148.12 Q306.177 1140.99 304.349 1137.45 Q302.543 1133.88 298.909 1133.88 M298.909 1130.18 Q304.719 1130.18 307.775 1134.78 Q310.853 1139.37 310.853 1148.12 Q310.853 1156.84 307.775 1161.45 Q304.719 1166.03 298.909 1166.03 Q293.099 1166.03 290.02 1161.45 Q286.964 1156.84 286.964 1148.12 Q286.964 1139.37 290.02 1134.78 Q293.099 1130.18 298.909 1130.18 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip440)\" d=\"M259.557 1009.6 L267.196 1009.6 L267.196 983.239 L258.886 984.906 L258.886 980.647 L267.15 978.98 L271.826 978.98 L271.826 1009.6 L279.465 1009.6 L279.465 1013.54 L259.557 1013.54 L259.557 1009.6 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip440)\" d=\"M298.909 982.059 Q295.298 982.059 293.469 985.623 Q291.664 989.165 291.664 996.295 Q291.664 1003.4 293.469 1006.97 Q295.298 1010.51 298.909 1010.51 Q302.543 1010.51 304.349 1006.97 Q306.177 1003.4 306.177 996.295 Q306.177 989.165 304.349 985.623 Q302.543 982.059 298.909 982.059 M298.909 978.355 Q304.719 978.355 307.775 982.961 Q310.853 987.545 310.853 996.295 Q310.853 1005.02 307.775 1009.63 Q304.719 1014.21 298.909 1014.21 Q293.099 1014.21 290.02 1009.63 Q286.964 1005.02 286.964 996.295 Q286.964 987.545 290.02 982.961 Q293.099 978.355 298.909 978.355 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip440)\" d=\"M262.775 857.782 L279.094 857.782 L279.094 861.717 L257.15 861.717 L257.15 857.782 Q259.812 855.027 264.395 850.398 Q269.002 845.745 270.182 844.402 Q272.428 841.879 273.307 840.143 Q274.21 838.384 274.21 836.694 Q274.21 833.94 272.266 832.203 Q270.344 830.467 267.242 830.467 Q265.043 830.467 262.59 831.231 Q260.159 831.995 257.381 833.546 L257.381 828.824 Q260.205 827.69 262.659 827.111 Q265.113 826.532 267.15 826.532 Q272.52 826.532 275.715 829.217 Q278.909 831.903 278.909 836.393 Q278.909 838.523 278.099 840.444 Q277.312 842.342 275.205 844.935 Q274.627 845.606 271.525 848.824 Q268.423 852.018 262.775 857.782 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip440)\" d=\"M298.909 830.236 Q295.298 830.236 293.469 833.801 Q291.664 837.342 291.664 844.472 Q291.664 851.578 293.469 855.143 Q295.298 858.685 298.909 858.685 Q302.543 858.685 304.349 855.143 Q306.177 851.578 306.177 844.472 Q306.177 837.342 304.349 833.801 Q302.543 830.236 298.909 830.236 M298.909 826.532 Q304.719 826.532 307.775 831.139 Q310.853 835.722 310.853 844.472 Q310.853 853.199 307.775 857.805 Q304.719 862.389 298.909 862.389 Q293.099 862.389 290.02 857.805 Q286.964 853.199 286.964 844.472 Q286.964 835.722 290.02 831.139 Q293.099 826.532 298.909 826.532 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip440)\" d=\"M272.914 691.26 Q276.27 691.978 278.145 694.246 Q280.043 696.515 280.043 699.848 Q280.043 704.964 276.525 707.765 Q273.006 710.566 266.525 710.566 Q264.349 710.566 262.034 710.126 Q259.742 709.709 257.289 708.853 L257.289 704.339 Q259.233 705.473 261.548 706.052 Q263.863 706.631 266.386 706.631 Q270.784 706.631 273.076 704.895 Q275.39 703.158 275.39 699.848 Q275.39 696.793 273.238 695.08 Q271.108 693.344 267.289 693.344 L263.261 693.344 L263.261 689.501 L267.474 689.501 Q270.923 689.501 272.752 688.135 Q274.58 686.746 274.58 684.154 Q274.58 681.492 272.682 680.08 Q270.807 678.645 267.289 678.645 Q265.367 678.645 263.168 679.061 Q260.969 679.478 258.33 680.358 L258.33 676.191 Q260.992 675.45 263.307 675.08 Q265.645 674.709 267.705 674.709 Q273.029 674.709 276.131 677.14 Q279.233 679.547 279.233 683.668 Q279.233 686.538 277.59 688.529 Q275.946 690.496 272.914 691.26 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip440)\" d=\"M298.909 678.413 Q295.298 678.413 293.469 681.978 Q291.664 685.52 291.664 692.649 Q291.664 699.756 293.469 703.32 Q295.298 706.862 298.909 706.862 Q302.543 706.862 304.349 703.32 Q306.177 699.756 306.177 692.649 Q306.177 685.52 304.349 681.978 Q302.543 678.413 298.909 678.413 M298.909 674.709 Q304.719 674.709 307.775 679.316 Q310.853 683.899 310.853 692.649 Q310.853 701.376 307.775 705.982 Q304.719 710.566 298.909 710.566 Q293.099 710.566 290.02 705.982 Q286.964 701.376 286.964 692.649 Q286.964 683.899 290.02 679.316 Q293.099 674.709 298.909 674.709 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip440)\" d=\"M271.594 527.586 L259.789 546.035 L271.594 546.035 L271.594 527.586 M270.367 523.512 L276.247 523.512 L276.247 546.035 L281.177 546.035 L281.177 549.924 L276.247 549.924 L276.247 558.072 L271.594 558.072 L271.594 549.924 L255.992 549.924 L255.992 545.41 L270.367 523.512 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip440)\" d=\"M298.909 526.59 Q295.298 526.59 293.469 530.155 Q291.664 533.697 291.664 540.826 Q291.664 547.933 293.469 551.498 Q295.298 555.039 298.909 555.039 Q302.543 555.039 304.349 551.498 Q306.177 547.933 306.177 540.826 Q306.177 533.697 304.349 530.155 Q302.543 526.59 298.909 526.59 M298.909 522.887 Q304.719 522.887 307.775 527.493 Q310.853 532.077 310.853 540.826 Q310.853 549.553 307.775 554.16 Q304.719 558.743 298.909 558.743 Q293.099 558.743 290.02 554.16 Q286.964 549.553 286.964 540.826 Q286.964 532.077 290.02 527.493 Q293.099 522.887 298.909 522.887 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip440)\" d=\"M258.793 371.689 L277.15 371.689 L277.15 375.624 L263.076 375.624 L263.076 384.096 Q264.094 383.749 265.113 383.587 Q266.131 383.402 267.15 383.402 Q272.937 383.402 276.316 386.573 Q279.696 389.744 279.696 395.161 Q279.696 400.74 276.224 403.842 Q272.752 406.92 266.432 406.92 Q264.256 406.92 261.988 406.55 Q259.742 406.18 257.335 405.439 L257.335 400.74 Q259.418 401.874 261.641 402.43 Q263.863 402.985 266.34 402.985 Q270.344 402.985 272.682 400.879 Q275.02 398.772 275.02 395.161 Q275.02 391.55 272.682 389.444 Q270.344 387.337 266.34 387.337 Q264.465 387.337 262.59 387.754 Q260.738 388.17 258.793 389.05 L258.793 371.689 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip440)\" d=\"M298.909 374.768 Q295.298 374.768 293.469 378.332 Q291.664 381.874 291.664 389.004 Q291.664 396.11 293.469 399.675 Q295.298 403.217 298.909 403.217 Q302.543 403.217 304.349 399.675 Q306.177 396.11 306.177 389.004 Q306.177 381.874 304.349 378.332 Q302.543 374.768 298.909 374.768 M298.909 371.064 Q304.719 371.064 307.775 375.67 Q310.853 380.254 310.853 389.004 Q310.853 397.731 307.775 402.337 Q304.719 406.92 298.909 406.92 Q293.099 406.92 290.02 402.337 Q286.964 397.731 286.964 389.004 Q286.964 380.254 290.02 375.67 Q293.099 371.064 298.909 371.064 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip440)\" d=\"M269.326 235.283 Q266.178 235.283 264.326 237.436 Q262.497 239.588 262.497 243.338 Q262.497 247.065 264.326 249.241 Q266.178 251.394 269.326 251.394 Q272.474 251.394 274.303 249.241 Q276.154 247.065 276.154 243.338 Q276.154 239.588 274.303 237.436 Q272.474 235.283 269.326 235.283 M278.608 220.63 L278.608 224.889 Q276.849 224.056 275.043 223.616 Q273.261 223.176 271.502 223.176 Q266.872 223.176 264.418 226.301 Q261.988 229.426 261.641 235.746 Q263.006 233.732 265.066 232.667 Q267.127 231.579 269.603 231.579 Q274.812 231.579 277.821 234.75 Q280.853 237.899 280.853 243.338 Q280.853 248.662 277.705 251.88 Q274.557 255.098 269.326 255.098 Q263.33 255.098 260.159 250.514 Q256.988 245.908 256.988 237.181 Q256.988 228.987 260.877 224.126 Q264.766 219.241 271.316 219.241 Q273.076 219.241 274.858 219.589 Q276.664 219.936 278.608 220.63 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip440)\" d=\"M298.909 222.945 Q295.298 222.945 293.469 226.51 Q291.664 230.051 291.664 237.181 Q291.664 244.287 293.469 247.852 Q295.298 251.394 298.909 251.394 Q302.543 251.394 304.349 247.852 Q306.177 244.287 306.177 237.181 Q306.177 230.051 304.349 226.51 Q302.543 222.945 298.909 222.945 M298.909 219.241 Q304.719 219.241 307.775 223.848 Q310.853 228.431 310.853 237.181 Q310.853 245.908 307.775 250.514 Q304.719 255.098 298.909 255.098 Q293.099 255.098 290.02 250.514 Q286.964 245.908 286.964 237.181 Q286.964 228.431 290.02 223.848 Q293.099 219.241 298.909 219.241 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip440)\" d=\"M186.448 812.969 L189.313 812.969 L189.313 839.896 Q195.36 839.514 198.543 836.268 Q201.694 832.989 201.694 827.165 Q201.694 823.791 200.867 820.64 Q200.039 817.457 198.384 814.338 L203.922 814.338 Q205.259 817.489 205.959 820.799 Q206.659 824.109 206.659 827.515 Q206.659 836.045 201.694 841.042 Q196.729 846.007 188.263 846.007 Q179.51 846.007 174.385 841.296 Q169.229 836.554 169.229 828.533 Q169.229 821.34 173.876 817.17 Q178.491 812.969 186.448 812.969 M184.73 818.826 Q179.924 818.889 177.059 821.531 Q174.194 824.141 174.194 828.47 Q174.194 833.371 176.963 836.331 Q179.733 839.259 184.761 839.705 L184.73 818.826 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip440)\" d=\"M184.22 773.724 L205.736 773.724 L205.736 779.581 L184.411 779.581 Q179.351 779.581 176.836 781.554 Q174.322 783.528 174.322 787.474 Q174.322 792.217 177.345 794.954 Q180.369 797.691 185.589 797.691 L205.736 797.691 L205.736 803.58 L170.088 803.58 L170.088 797.691 L175.627 797.691 Q172.412 795.591 170.821 792.758 Q169.229 789.893 169.229 786.169 Q169.229 780.027 173.049 776.876 Q176.836 773.724 184.22 773.724 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip440)\" d=\"M186.448 731.552 L189.313 731.552 L189.313 758.479 Q195.36 758.097 198.543 754.85 Q201.694 751.572 201.694 745.747 Q201.694 742.373 200.867 739.222 Q200.039 736.04 198.384 732.92 L203.922 732.92 Q205.259 736.071 205.959 739.382 Q206.659 742.692 206.659 746.097 Q206.659 754.627 201.694 759.624 Q196.729 764.59 188.263 764.59 Q179.51 764.59 174.385 759.879 Q169.229 755.137 169.229 747.116 Q169.229 739.923 173.876 735.753 Q178.491 731.552 186.448 731.552 M184.73 737.408 Q179.924 737.472 177.059 740.114 Q174.194 742.724 174.194 747.052 Q174.194 751.954 176.963 754.914 Q179.733 757.842 184.761 758.288 L184.73 737.408 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip440)\" d=\"M175.563 701.283 Q174.99 702.269 174.735 703.447 Q174.449 704.593 174.449 705.993 Q174.449 710.959 177.696 713.632 Q180.91 716.274 186.958 716.274 L205.736 716.274 L205.736 722.162 L170.088 722.162 L170.088 716.274 L175.627 716.274 Q172.38 714.428 170.821 711.468 Q169.229 708.508 169.229 704.275 Q169.229 703.67 169.325 702.938 Q169.388 702.206 169.547 701.315 L175.563 701.283 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip440)\" d=\"M187.499 672.828 Q181.133 672.828 177.632 675.47 Q174.131 678.08 174.131 682.822 Q174.131 687.533 177.632 690.175 Q181.133 692.785 187.499 692.785 Q193.833 692.785 197.334 690.175 Q200.835 687.533 200.835 682.822 Q200.835 678.08 197.334 675.47 Q193.833 672.828 187.499 672.828 M201.312 666.972 Q210.415 666.972 214.839 671.014 Q219.295 675.056 219.295 683.395 Q219.295 686.482 218.818 689.22 Q218.372 691.957 217.418 694.535 L211.72 694.535 Q213.121 691.957 213.789 689.443 Q214.457 686.928 214.457 684.318 Q214.457 678.557 211.434 675.693 Q208.442 672.828 202.363 672.828 L199.466 672.828 Q202.617 674.642 204.177 677.475 Q205.736 680.308 205.736 684.254 Q205.736 690.811 200.739 694.822 Q195.742 698.832 187.499 698.832 Q179.223 698.832 174.226 694.822 Q169.229 690.811 169.229 684.254 Q169.229 680.308 170.789 677.475 Q172.348 674.642 175.499 672.828 L170.088 672.828 L170.088 666.972 L201.312 666.972 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip440)\" d=\"M209.047 640.076 Q215.412 642.559 217.354 644.914 Q219.295 647.27 219.295 651.216 L219.295 655.895 L214.394 655.895 L214.394 652.458 Q214.394 650.039 213.248 648.702 Q212.102 647.365 207.837 645.742 L205.164 644.692 L170.088 659.11 L170.088 652.903 L197.97 641.763 L170.088 630.623 L170.088 624.417 L209.047 640.076 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><polyline clip-path=\"url(#clip442)\" style=\"stroke:#009af9; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"399.613,1036.22 400.199,933.443 400.786,839.146 401.372,752.755 401.958,673.742 402.545,601.622 403.131,535.943 403.718,476.285 404.304,518.244 404.891,464.892 405.477,416.71 406.063,373.365 406.65,335.821 407.236,301.156 407.823,270.449 408.409,243.443 408.995,219.895 409.582,256.026 410.168,236.585 410.755,268.113 411.341,252.585 411.927,281.442 412.514,269.551 413.1,259.967 413.687,286.547 414.273,280.762 414.86,276.22 415.446,273.425 416.032,323.101 416.619,321.686 417.205,321.409 417.792,322.123 418.378,344.789 418.964,348.073 419.551,369.661 420.137,390.869 420.724,427.449 421.31,447.518 421.896,453.769 422.483,485.755 423.069,492.933 423.656,500.731 424.242,509.541 424.829,517.895 425.415,526.237 426.001,535.124 426.588,562.015 427.174,572.052 427.761,581.767 428.347,592.757 428.933,603.592 429.52,620.714 430.106,630.742 430.693,641.168 431.279,657.85 431.865,673.515 432.452,694.52 433.038,704.934 433.625,734.319 434.211,742.749 434.798,755.803 435.384,768.817 435.97,776.827 436.557,802.165 437.143,810.085 437.73,821.694 438.316,829.254 438.902,840.28 439.489,851.084 440.075,861.322 440.662,875.191 441.248,888.072 441.835,904.15 442.421,916.15 443.007,927.845 443.594,933.545 444.18,939.178 444.767,947.64 445.353,953.159 445.939,964.005 446.526,969.222 447.112,979.169 447.699,989.451 448.285,999.301 448.871,1006.18 449.458,1013.14 450.044,1019.85 450.631,1026.36 451.217,1035.43 451.804,1043.92 452.39,1050.1 452.976,1060.11 453.563,1065.76 454.149,1077.26 454.736,1088.27 455.322,1091.13 455.908,1097.89 456.495,1106.64 457.081,1111.19 457.668,1113.86 458.254,1123.91 458.84,1129.91 459.427,1132.07 460.013,1134.24 460.6,1139.99 461.186,1145.53 461.773,1147.17 462.359,1152.09 462.945,1155.57 463.532,1157.05 464.118,1158.59 464.705,1160 465.291,1163.14 465.877,1162.92 466.464,1164.61 467.05,1166.24 467.637,1170.71 468.223,1172.14 468.809,1173.21 469.396,1176.01 469.982,1181.87 470.569,1183.1 471.155,1185.51 471.742,1188.06 472.328,1191.59 472.914,1196.76 473.501,1200.23 474.087,1200.65 474.674,1203.9 475.26,1202.92 475.846,1206.05 476.433,1207.35 477.019,1210.6 477.606,1211.01 478.192,1212.68 478.778,1217.09 479.365,1217.01 479.951,1218.52 480.538,1218.44 481.124,1221.42 481.711,1222.46 482.297,1223.46 482.883,1221.71 483.47,1224.37 484.056,1224.14 484.643,1225.32 485.229,1226.61 485.815,1227.69 486.402,1227.37 486.988,1228.45 487.575,1229.21 488.161,1230.23 488.748,1229.99 489.334,1229.42 489.92,1229.06 490.507,1228.74 491.093,1230.11 491.68,1229.83 492.266,1230.79 492.852,1231.75 493.439,1238.16 494.025,1241.54 494.612,1240.98 495.198,1240.34 495.784,1242.3 496.371,1242.75 496.957,1244.64 497.544,1243.88 498.13,1244.36 498.717,1243.24 499.303,1242.44 499.889,1240.3 500.476,1242.02 501.062,1242.37 501.649,1243.14 502.235,1243.52 502.821,1243.79 503.408,1245.78 503.994,1245.01 504.581,1245.47 505.167,1246.06 505.753,1242.39 506.34,1242.96 506.926,1242.49 507.513,1245.45 508.099,1244.49 508.686,1243.93 509.272,1243.53 509.858,1242.69 510.445,1239.37 511.031,1238.82 511.618,1239.77 512.204,1244.29 512.79,1242.17 513.377,1245.35 513.963,1244.47 514.55,1245.99 515.136,1246.4 515.722,1245.63 516.309,1244.84 516.895,1241.4 517.482,1235.45 518.068,1235.25 518.655,1234.7 519.241,1236.94 519.827,1239.06 520.414,1239.94 521,1239.22 521.587,1238.64 522.173,1239.62 522.759,1241.43 523.346,1242.06 523.932,1241.35 524.519,1241.84 525.105,1241.11 525.691,1243.07 526.278,1243.38 526.864,1242.74 527.451,1243.23 528.037,1243.57 528.624,1242.89 529.21,1245.82 529.796,1246.36 530.383,1244.21 530.969,1244.43 531.556,1247.33 532.142,1247.76 532.728,1250.53 533.315,1246.97 533.901,1246.12 534.488,1246.63 535.074,1245.67 535.661,1245.69 536.247,1243.71 536.833,1242.84 537.42,1242.12 538.006,1242.67 538.593,1244.44 539.179,1243.81 539.765,1245.34 540.352,1245.53 540.938,1245.88 541.525,1244.54 542.111,1243.55 542.697,1242.71 543.284,1240.54 543.87,1238.38 544.457,1238.87 545.043,1238.31 545.63,1237.74 546.216,1237.31 546.802,1235.28 547.389,1234.55 547.975,1237.5 548.562,1234.37 549.148,1233.81 549.734,1231.08 550.321,1232.28 550.907,1235.51 551.494,1233.77 552.08,1229.79 552.666,1231.06 553.253,1231.91 553.839,1233.1 554.426,1234.08 555.012,1237.6 555.599,1237.07 556.185,1237.63 556.771,1235.43 557.358,1234.99 557.944,1231.76 558.531,1231.54 559.117,1232.48 559.703,1233.32 560.29,1232.92 560.876,1233.79 561.463,1233.24 562.049,1234.03 562.635,1233.37 563.222,1234.18 563.808,1235.05 564.395,1237.07 564.981,1236.26 565.568,1233.36 566.154,1235.48 566.74,1234.7 567.327,1235.43 567.913,1236.16 568.5,1236.66 569.086,1235.91 569.672,1232.82 570.259,1232.31 570.845,1233.11 571.432,1232.4 572.018,1230.79 572.605,1230.26 573.191,1232.56 573.777,1233.57 574.364,1234.39 574.95,1235.03 575.537,1234.26 576.123,1232.61 576.709,1229.6 577.296,1231.7 577.882,1227.51 578.469,1227.24 579.055,1230.54 579.641,1230.17 580.228,1233.53 580.814,1233.17 581.401,1232.65 581.987,1230.84 582.574,1230.77 583.16,1231.43 583.746,1228.46 584.333,1227.14 584.919,1224.36 585.506,1225.62 586.092,1226.73 586.678,1225.07 587.265,1223.51 587.851,1224.74 588.438,1227.15 589.024,1225.72 589.61,1225.47 590.197,1227.86 590.783,1228.62 591.37,1228.54 591.956,1227.25 592.543,1227.05 593.129,1226.92 593.715,1226.63 594.302,1226.47 594.888,1227.37 595.475,1231.88 596.061,1230.42 596.647,1229.89 597.234,1231.71 597.82,1231.09 598.407,1231.84 598.993,1230.89 599.579,1234.14 600.166,1236.01 600.752,1235.56 601.339,1236.17 601.925,1234.02 602.512,1232.01 603.098,1230.16 603.684,1228.59 604.271,1229.76 604.857,1231.99 605.444,1231.62 606.03,1228.38 606.616,1227.87 607.203,1229.9 607.789,1230.7 608.376,1229.96 608.962,1229.22 609.548,1224.99 610.135,1226.08 610.721,1224.23 611.308,1224.12 611.894,1226.28 612.481,1226.89 613.067,1228.83 613.653,1225.77 614.24,1225.25 614.826,1224.84 615.413,1223.11 615.999,1223.07 616.585,1222.77 617.172,1223.69 617.758,1224.53 618.345,1222.86 618.931,1225.18 619.518,1224.82 620.104,1224.45 620.69,1222.65 621.277,1221.17 621.863,1220.9 622.45,1219.53 623.036,1219.49 623.622,1219.36 624.209,1221.7 624.795,1223.8 625.382,1219.72 625.968,1219.93 626.554,1216.13 627.141,1213.95 627.727,1213.68 628.314,1215.02 628.9,1217.58 629.487,1216.09 630.073,1217.56 630.659,1218.59 631.246,1222.14 631.832,1223.28 632.419,1225.34 633.005,1224.84 633.591,1223.35 634.178,1220.73 634.764,1220.72 635.351,1214.14 635.937,1214.63 636.523,1216.18 637.11,1216.2 637.696,1217.65 638.283,1218.96 638.869,1217.75 639.456,1217.73 640.042,1216.53 640.628,1214.05 641.215,1212.85 641.801,1211.83 642.388,1212.29 642.974,1213.97 643.56,1213.09 644.147,1209.27 644.733,1209.83 645.32,1207.83 645.906,1207.32 646.492,1207.82 647.079,1210.83 647.665,1211.25 648.252,1210.35 648.838,1210.79 649.425,1211.21 650.011,1211.55 650.597,1212.86 651.184,1211.97 651.77,1211.35 652.357,1210.28 652.943,1209.62 653.529,1209.95 654.116,1207.54 654.702,1206.73 655.289,1207.11 655.875,1207.51 656.462,1208.02 657.048,1207.35 657.634,1208.37 658.221,1210.08 658.807,1209.31 659.394,1208.28 659.98,1208.84 660.566,1208.19 661.153,1209.92 661.739,1207.91 662.326,1210.79 662.912,1215.89 663.498,1213.53 664.085,1216.11 664.671,1217.46 665.258,1219.96 665.844,1220.89 666.431,1220.88 667.017,1224.16 667.603,1223.73 668.19,1221.92 668.776,1222.95 669.363,1221.47 669.949,1221.37 670.535,1222.43 671.122,1223.4 671.708,1224.05 672.295,1224.84 672.881,1221.84 673.467,1222.83 674.054,1222.42 674.64,1220.72 675.227,1220.3 675.813,1220.03 676.4,1219.78 676.986,1219.53 677.572,1219.58 678.159,1218.16 678.745,1219.22 679.332,1217.75 679.918,1218.88 680.504,1215.96 681.091,1215.86 681.677,1215.78 682.264,1216.83 682.85,1217.87 683.436,1217.69 684.023,1216.34 684.609,1215.01 685.196,1216.05 685.782,1216.19 686.369,1215.7 686.955,1219.43 687.541,1219.09 688.128,1218.92 688.714,1218.86 689.301,1216.05 689.887,1216.19 690.473,1215.01 691.06,1213.64 691.646,1213.63 692.233,1212.53 692.819,1213.93 693.405,1214.01 693.992,1215.35 694.578,1212.85 695.165,1214.18 695.751,1215.54 696.338,1214.33 696.924,1211.91 697.51,1211.72 698.097,1213.17 698.683,1214.5 699.27,1215.57 699.856,1213.18 700.442,1213.08 701.029,1212.91 701.615,1212.88 702.202,1213.01 702.788,1213.19 703.375,1213.38 703.961,1214.74 704.547,1214.89 705.134,1215.15 705.72,1215.13 706.307,1216.41 706.893,1215.14 707.479,1215.01 708.066,1215.04 708.652,1214.96 709.239,1217.04 709.825,1218.34 710.411,1218.24 710.998,1222.75 711.584,1224.67 712.171,1222.93 712.757,1222.53 713.344,1223.49 713.93,1221.76 714.516,1223.84 715.103,1221.96 715.689,1224.05 716.276,1222.09 716.862,1224.26 717.448,1227.51 718.035,1225.63 718.621,1223.76 719.208,1222.01 719.794,1221.28 720.38,1219.63 720.967,1215.95 721.553,1217.11 722.14,1216.85 722.726,1216.85 723.313,1216.43 723.899,1217.27 724.485,1217.14 725.072,1216.78 725.658,1216.57 726.245,1216.45 726.831,1217.56 727.417,1217.25 728.004,1216.98 728.59,1219.52 729.177,1219.12 729.763,1218.9 730.349,1217.18 730.936,1216.98 731.522,1217.84 732.109,1216.11 732.695,1215.98 733.282,1218.2 733.868,1216.75 734.454,1217.89 735.041,1217.69 735.627,1216.1 736.214,1215.91 736.8,1217.1 737.386,1219.55 737.973,1220.52 738.559,1220.06 739.146,1220.84 739.732,1216.59 740.318,1215.29 740.905,1215.07 741.491,1214.96 742.078,1213.56 742.664,1212.25 743.251,1212.33 743.837,1209.85 744.423,1209.88 745.01,1209 745.596,1212.83 746.183,1211.81 746.769,1211.84 747.355,1213.23 747.942,1209.4 748.528,1209.78 749.115,1209.93 749.701,1211.15 750.288,1211.23 750.874,1211.24 751.46,1211.44 752.047,1211.5 752.633,1212.99 753.22,1212.91 753.806,1213.82 754.392,1213.96 754.979,1215.16 755.565,1213.74 756.152,1211.14 756.738,1212.44 757.324,1211.39 757.911,1213.8 758.497,1213.91 759.084,1213.96 759.67,1210.42 760.257,1209.19 760.843,1209.5 761.429,1209.9 762.016,1208.9 762.602,1211.76 763.189,1211.75 763.775,1213.04 764.361,1212.9 764.948,1212.71 765.534,1210.33 766.121,1211.71 766.707,1212.98 767.293,1215.41 767.88,1215.51 768.466,1215.12 769.053,1215.07 769.639,1213.74 770.226,1214.88 770.812,1213.62 771.398,1213.77 771.985,1213.89 772.571,1216.42 773.158,1217.73 773.744,1218.5 774.33,1219.47 774.917,1220.13 775.503,1218.5 776.09,1218.18 776.676,1219.2 777.262,1216.32 777.849,1220.15 778.435,1223.41 779.022,1222.88 779.608,1221.12 780.195,1220.88 780.781,1218.13 781.367,1216.42 781.954,1218.67 782.54,1216.81 783.127,1216.58 783.713,1218.82 784.299,1218.6 784.886,1218.25 785.472,1217.93 786.059,1217.47 786.645,1217.17 787.232,1218.02 787.818,1215.18 788.404,1218.69 788.991,1217.07 789.577,1215.78 790.164,1216.63 790.75,1216.6 791.336,1213.93 791.923,1215.12 792.509,1216.13 793.096,1216.1 793.682,1215.71 794.268,1215.35 794.855,1215.17 795.441,1216 796.028,1214.5 796.614,1214.36 797.201,1214.16 797.787,1214.1 798.373,1215.01 798.96,1214.79 799.546,1215.7 800.133,1214.4 800.719,1215.57 801.305,1211.74 801.892,1211.76 802.478,1208.96 803.065,1211.59 803.651,1209.04 804.237,1210.33 804.824,1210.28 805.41,1210.24 805.997,1210.34 806.583,1210.4 807.17,1209.17 807.756,1210.49 808.342,1211.67 808.929,1211.93 809.515,1211.59 810.102,1212.62 810.688,1211.35 811.274,1212.47 811.861,1212.33 812.447,1210.92 813.034,1211 813.62,1212.34 814.206,1212.15 814.793,1213.18 815.379,1211.66 815.966,1215.38 816.552,1216.37 817.139,1217.56 817.725,1215.89 818.311,1216.86 818.898,1216.64 819.484,1214.8 820.071,1215.86 820.657,1214.44 821.243,1216.4 821.83,1218.58 822.416,1220.89 823.003,1220.44 823.589,1218.58 824.175,1215.81 824.762,1215.86 825.348,1215.68 825.935,1214.26 826.521,1211.53 827.108,1212.65 827.694,1215.09 828.28,1210.94 828.867,1210.96 829.453,1212.22 830.04,1208.46 830.626,1212.45 831.212,1211 831.799,1209.76 832.385,1205.88 832.972,1204.82 833.558,1205.22 834.145,1206.94 834.731,1205.77 835.317,1203.25 835.904,1203.79 836.49,1205.66 837.077,1205.97 837.663,1206.57 838.249,1206.92 838.836,1208.36 839.422,1209.89 840.009,1213.62 840.595,1214.8 841.181,1216.87 841.768,1215.23 842.354,1213.59 842.941,1211.14 843.527,1209.75 844.114,1211.19 844.7,1208.83 845.286,1208.88 845.873,1209.24 846.459,1206.93 847.046,1206.97 847.632,1202.32 848.218,1202.92 848.805,1204.77 849.391,1206.51 849.978,1208 850.564,1207.08 851.15,1205.93 851.737,1206.38 852.323,1206.75 852.91,1207.03 853.496,1208.38 854.083,1209.76 854.669,1209.77 855.255,1212.34 855.842,1213.54 856.428,1215.98 857.015,1219.28 857.601,1220.1 858.187,1220.93 858.774,1222.8 859.36,1223.29 859.947,1217.93 860.533,1217.52 861.119,1219.51 861.706,1218.85 862.292,1219.79 862.879,1219.45 863.465,1218.83 864.052,1219.62 864.638,1219.23 865.224,1217.58 865.811,1216.02 866.397,1219.26 866.984,1219.01 867.57,1216.41 868.156,1216.37 868.743,1218.7 869.329,1220.41 869.916,1217.43 870.502,1217 871.089,1216.4 871.675,1212.48 872.261,1211.1 872.848,1208.64 873.434,1210.33 874.021,1210.33 874.607,1209.24 875.193,1208.12 875.78,1205.64 876.366,1205.8 876.953,1207.12 877.539,1204.95 878.125,1203.9 878.712,1205.5 879.298,1206.45 879.885,1206.79 880.471,1209.43 881.058,1208.4 881.644,1206.95 882.23,1205.98 882.817,1205.06 883.403,1205.25 883.99,1205.26 884.576,1205.35 885.162,1203.34 885.749,1205.07 886.335,1203.13 886.922,1201.17 887.508,1201.45 888.094,1200.81 888.681,1201.56 889.267,1203.43 889.854,1202.71 890.44,1205.64 891.027,1205.93 891.613,1206.47 892.199,1206.69 892.786,1206.84 893.372,1209.35 893.959,1209.34 894.545,1211.74 895.131,1213.06 895.718,1211.78 896.304,1211.67 896.891,1209.12 897.477,1209.2 898.063,1210.47 898.65,1211.89 899.236,1211.72 899.823,1212.82 900.409,1213.91 900.996,1214.91 901.582,1214.7 902.168,1214.26 902.755,1214.15 903.341,1215.08 903.928,1213.62 904.514,1213.25 905.1,1213.19 905.687,1214.17 906.273,1216.61 906.86,1219.99 907.446,1219.54 908.032,1219.1 908.619,1217.34 909.205,1217.08 909.792,1216.61 910.378,1215.01 910.965,1217.2 911.551,1216.83 912.137,1216.44 912.724,1216.2 913.31,1214.75 913.897,1212.01 914.483,1211.77 915.069,1213.05 915.656,1213.09 916.242,1211.78 916.829,1214.44 917.415,1214.28 918.002,1215.31 918.588,1214.88 919.174,1211.76 919.761,1212.9 920.347,1214.16 920.934,1214.08 921.52,1215 922.106,1215.85 922.693,1214.66 923.279,1213.2 923.866,1213.17 924.452,1212.06 925.038,1213.16 925.625,1210.79 926.211,1213.32 926.798,1213.19 927.384,1210.47 927.971,1209.23 928.557,1210.66 929.143,1213.12 929.73,1213.02 930.316,1212.95 930.903,1212.72 931.489,1209.96 932.075,1211.33 932.662,1211.42 933.248,1211.38 933.835,1210.31 934.421,1210.36 935.007,1211.87 935.594,1212.99 936.18,1214.43 936.767,1215.53 937.353,1211.89 937.94,1214.2 938.526,1212.83 939.112,1214.06 939.699,1211.31 940.285,1212.64 940.872,1212.61 941.458,1210.05 942.044,1211.46 942.631,1209.02 943.217,1208.97 943.804,1206.19 944.39,1206.36 944.976,1207.92 945.563,1206.96 946.149,1208.21 946.736,1207.27 947.322,1207.03 947.909,1207.19 948.495,1211.39 949.081,1212.61 949.668,1212.51 950.254,1212.31 950.841,1214.39 951.427,1216.44 952.013,1218.5 952.6,1216.71 953.186,1214.07 953.773,1212.44 954.359,1214.92 954.945,1212.2 955.532,1213.34 956.118,1210.51 956.705,1207.89 957.291,1206.92 957.878,1206.87 958.464,1209.28 959.05,1210.7 959.637,1210.5 960.223,1210.57 960.81,1210.75 961.396,1210.82 961.982,1211.91 962.569,1210.88 963.155,1210.9 963.742,1210.66 964.328,1210.85 964.915,1214.31 965.501,1216.58 966.087,1216.15 966.674,1217.24 967.26,1215.93 967.847,1214.34 968.433,1215.45 969.019,1214.81 969.606,1212.12 970.192,1212.92 970.779,1208.9 971.365,1207.75 971.951,1208.01 972.538,1208.21 973.124,1209.57 973.711,1209.65 974.297,1210.73 974.884,1210.78 975.47,1211.66 976.056,1211.48 976.643,1210.39 977.229,1210.44 977.816,1212.99 978.402,1216.33 978.988,1220.81 979.575,1220.36 980.161,1217.18 980.748,1216.79 981.334,1216.4 981.92,1217.12 982.507,1216.81 983.093,1212.78 983.68,1212.55 984.266,1211.12 984.853,1210.74 985.439,1208.36 986.025,1209.62 986.612,1209.6 987.198,1211.05 987.785,1212.15 988.371,1209.43 988.957,1211.89 989.544,1210.7 990.13,1212.89 990.717,1211.52 991.303,1207.58 991.889,1209.94 992.476,1210.06 993.062,1208.85 993.649,1209.06 994.235,1209.39 994.822,1209.09 995.408,1208.91 995.994,1207.92 996.581,1205.47 997.167,1205.53 997.754,1205.98 998.34,1204.9 998.926,1205.06 999.513,1206.66 1000.1,1205.65 1000.69,1205.87 1001.27,1206.05 1001.86,1205.87 1002.44,1204.78 1003.03,1206.33 1003.62,1205.15 1004.2,1206.68 1004.79,1205.41 1005.38,1206.85 1005.96,1205.93 1006.55,1205.17 1007.14,1205.59 1007.72,1202.21 1008.31,1201.41 1008.9,1203.25 1009.48,1202.41 1010.07,1202.79 1010.65,1204.6 1011.24,1203.7 1011.83,1205.49 1012.41,1204.27 1013,1204.69 1013.59,1205.15 1014.17,1207.97 1014.76,1205.68 1015.35,1206 1015.93,1205.35 1016.52,1204.53 1017.11,1202.46 1017.69,1204.1 1018.28,1200.93 1018.86,1200.34 1019.45,1204.88 1020.04,1203.67 1020.62,1205.45 1021.21,1204.28 1021.8,1204.73 1022.38,1204.89 1022.97,1203.94 1023.56,1204.33 1024.14,1203.37 1024.73,1204.04 1025.32,1205.51 1025.9,1205.88 1026.49,1203.62 1027.07,1204.04 1027.66,1205.47 1028.25,1206.95 1028.83,1211 1029.42,1209.63 1030.01,1209.59 1030.59,1210.86 1031.18,1210.75 1031.77,1208.55 1032.35,1207.49 1032.94,1209.9 1033.52,1209.94 1034.11,1208.77 1034.7,1208.58 1035.28,1207.38 1035.87,1206.21 1036.46,1206.49 1037.04,1207.92 1037.63,1210.36 1038.22,1211.33 1038.8,1211.42 1039.39,1211.32 1039.98,1210.08 1040.56,1208.92 1041.15,1208.97 1041.73,1209.08 1042.32,1207.95 1042.91,1206.59 1043.49,1207.99 1044.08,1208.05 1044.67,1208.38 1045.25,1208.27 1045.84,1210.86 1046.43,1210.8 1047.01,1209.5 1047.6,1208.37 1048.19,1205.72 1048.77,1202.15 1049.36,1202.84 1049.94,1202.1 1050.53,1202.78 1051.12,1201.91 1051.7,1202.33 1052.29,1201.64 1052.88,1203.67 1053.46,1204.08 1054.05,1206.83 1054.64,1207.1 1055.22,1207.26 1055.81,1209.99 1056.39,1211.03 1056.98,1212.06 1057.57,1213.23 1058.15,1214.27 1058.74,1213.84 1059.33,1211.34 1059.91,1213.71 1060.5,1213.4 1061.09,1213.03 1061.67,1212.63 1062.26,1214.93 1062.85,1215.81 1063.43,1215.94 1064.02,1215.67 1064.6,1216.55 1065.19,1217.6 1065.78,1218.36 1066.36,1214.22 1066.95,1212.92 1067.54,1214.03 1068.12,1215.24 1068.71,1214.81 1069.3,1214.63 1069.88,1216.63 1070.47,1215.87 1071.06,1216.77 1071.64,1215 1072.23,1218.4 1072.81,1215.55 1073.4,1216.48 1073.99,1216.19 1074.57,1217.31 1075.16,1218.26 1075.75,1219 1076.33,1218.33 1076.92,1219 1077.51,1219.62 1078.09,1220.33 1078.68,1219.81 1079.26,1217.98 1079.85,1218.6 1080.44,1215.54 1081.02,1215.2 1081.61,1213.64 1082.2,1209.86 1082.78,1209.89 1083.37,1211.09 1083.96,1212.01 1084.54,1210.69 1085.13,1210.68 1085.72,1211.66 1086.3,1210.31 1086.89,1209.2 1087.47,1209.03 1088.06,1212.69 1088.65,1211.38 1089.23,1209.85 1089.82,1206.02 1090.41,1204.86 1090.99,1203.62 1091.58,1202.8 1092.17,1203.29 1092.75,1203.54 1093.34,1205.27 1093.93,1208.1 1094.51,1209.41 1095.1,1208.23 1095.68,1205.79 1096.27,1204.98 1096.86,1205.52 1097.44,1204.42 1098.03,1203.45 1098.62,1205.01 1099.2,1205.22 1099.79,1205.39 1100.38,1204.27 1100.96,1204.77 1101.55,1204.77 1102.14,1205.06 1102.72,1205.27 1103.31,1204.42 1103.89,1203.64 1104.48,1205.56 1105.07,1208.14 1105.65,1206.95 1106.24,1209.33 1106.83,1208.39 1107.41,1210.72 1108,1211.8 1108.59,1212.9 1109.17,1212.84 1109.76,1211.26 1110.34,1211.28 1110.93,1211.32 1111.52,1212.78 1112.1,1210.29 1112.69,1210.1 1113.28,1211.35 1113.86,1207.41 1114.45,1207.25 1115.04,1208.81 1115.62,1207.56 1116.21,1210.25 1116.8,1210.17 1117.38,1208.83 1117.97,1208.99 1118.55,1209.27 1119.14,1210.48 1119.73,1211.5 1120.31,1210.38 1120.9,1207.63 1121.49,1207.64 1122.07,1207.89 1122.66,1207.81 1123.25,1208.15 1123.83,1207.92 1124.42,1209.37 1125.01,1213.03 1125.59,1211.78 1126.18,1211.68 1126.76,1211.45 1127.35,1211.17 1127.94,1209.78 1128.52,1210.86 1129.11,1210.91 1129.7,1214.64 1130.28,1214.39 1130.87,1214.24 1131.46,1212.98 1132.04,1214.15 1132.63,1213.98 1133.21,1214.79 1133.8,1213.43 1134.39,1214.54 1134.97,1217.98 1135.56,1219.76 1136.15,1219.14 1136.73,1216.45 1137.32,1216.14 1137.91,1215.94 1138.49,1217.08 1139.08,1214.18 1139.67,1213.9 1140.25,1209.76 1140.84,1205.78 1141.42,1207.15 1142.01,1208.56 1142.6,1209.95 1143.18,1212.41 1143.77,1212.17 1144.36,1210.97 1144.94,1208.06 1145.53,1206.89 1146.12,1207.17 1146.7,1206.13 1147.29,1206.16 1147.88,1204.9 1148.46,1208.73 1149.05,1204.9 1149.63,1205.52 1150.22,1204.3 1150.81,1205.83 1151.39,1208.55 1151.98,1209.54 1152.57,1208.22 1153.15,1208.06 1153.74,1206.75 1154.33,1205.65 1154.91,1204.6 1155.5,1204.76 1156.09,1204.92 1156.67,1205.16 1157.26,1208.99 1157.84,1209.19 1158.43,1210.39 1159.02,1210.44 1159.6,1212.79 1160.19,1215.23 1160.78,1217.39 1161.36,1215.72 1161.95,1213.98 1162.54,1214.77 1163.12,1213.4 1163.71,1214.38 1164.29,1212.97 1164.88,1211.44 1165.47,1213.94 1166.05,1215.91 1166.64,1213.05 1167.23,1215.2 1167.81,1216.43 1168.4,1218.61 1168.99,1214.39 1169.57,1211.7 1170.16,1211.67 1170.75,1210.15 1171.33,1211.4 1171.92,1208.58 1172.5,1208.41 1173.09,1205.72 1173.68,1205.72 1174.26,1207.22 1174.85,1208.6 1175.44,1210.83 1176.02,1208.12 1176.61,1211.99 1177.2,1210.77 1177.78,1209.52 1178.37,1209.67 1178.96,1208.35 1179.54,1205.89 1180.13,1208.68 1180.71,1208.94 1181.3,1210.34 1181.89,1211.85 1182.47,1211.78 1183.06,1211.54 1183.65,1208.83 1184.23,1210.07 1184.82,1208.67 1185.41,1209.85 1185.99,1209.6 1186.58,1207.21 1187.16,1206.27 1187.75,1202.73 1188.34,1201.68 1188.92,1202.16 1189.51,1203.63 1190.1,1204.02 1190.68,1203.27 1191.27,1205 1191.86,1205.28 1192.44,1205.56 1193.03,1205.85 1193.62,1206.18 1194.2,1208.95 1194.79,1211.28 1195.37,1210.01 1195.96,1210.13 1196.55,1211.32 1197.13,1212.41 1197.72,1213.37 1198.31,1214.57 1198.89,1213.88 1199.48,1214.63 1200.07,1214.46 1200.65,1214.19 1201.24,1213.87 1201.83,1213.6 1202.41,1213.2 1203,1213.06 1203.58,1209.45 1204.17,1211.64 1204.76,1210.27 1205.34,1207.72 1205.93,1209.11 1206.52,1210.48 1207.1,1209.39 1207.69,1211.74 1208.28,1210.4 1208.86,1209.27 1209.45,1206.6 1210.03,1205.64 1210.62,1208.15 1211.21,1209.27 1211.79,1209.24 1212.38,1210.49 1212.97,1210.37 1213.55,1211.23 1214.14,1211.03 1214.73,1213.21 1215.31,1211.54 1215.9,1213.89 1216.49,1216.27 1217.07,1213.41 1217.66,1214.67 1218.24,1213.16 1218.83,1211.71 1219.42,1212.95 1220,1213.56 1220.59,1212.19 1221.18,1210.88 1221.76,1212.34 1222.35,1212.36 1222.94,1212.22 1223.52,1212.34 1224.11,1212.2 1224.7,1210.96 1225.28,1210.78 1225.87,1208.23 1226.45,1205.9 1227.04,1205.1 1227.63,1205.67 1228.21,1205.47 1228.8,1206.69 1229.39,1206.93 1229.97,1206.91 1230.56,1208.36 1231.15,1208.33 1231.73,1208.41 1232.32,1208.15 1232.91,1212.14 1233.49,1209.29 1234.08,1209.37 1234.66,1205.73 1235.25,1207.18 1235.84,1206.26 1236.42,1203.6 1237.01,1203.96 1237.6,1202.87 1238.18,1200.96 1238.77,1201.55 1239.36,1199.45 1239.94,1202.39 1240.53,1200.23 1241.11,1201.93 1241.7,1202.18 1242.29,1202.48 1242.87,1201.71 1243.46,1201.01 1244.05,1201.58 1244.63,1203.16 1245.22,1203.42 1245.81,1202.4 1246.39,1203.02 1246.98,1200.77 1247.57,1201.2 1248.15,1198.04 1248.74,1199.97 1249.32,1201.98 1249.91,1205.08 1250.5,1207.71 1251.08,1209.99 1251.67,1207.81 1252.26,1208.88 1252.84,1211.4 1253.43,1213.76 1254.02,1214.61 1254.6,1215.7 1255.19,1213.99 1255.78,1212.59 1256.36,1213.55 1256.95,1217.04 1257.53,1217.78 1258.12,1216.16 1258.71,1212.42 1259.29,1214.9 1259.88,1212.2 1260.47,1208.47 1261.05,1208.44 1261.64,1204.8 1262.23,1204.99 1262.81,1206.25 1263.4,1206.63 1263.98,1205.56 1264.57,1205.68 1265.16,1204.39 1265.74,1205.89 1266.33,1207.17 1266.92,1205.94 1267.5,1206.03 1268.09,1204.99 1268.68,1205.16 1269.26,1202.81 1269.85,1202.97 1270.44,1199.47 1271.02,1201.7 1271.61,1202.34 1272.19,1201.46 1272.78,1204.2 1273.37,1207.09 1273.95,1204.81 1274.54,1203.8 1275.13,1204.12 1275.71,1205.95 1276.3,1205.01 1276.89,1205.18 1277.47,1207.94 1278.06,1208.1 1278.65,1208.14 1279.23,1207.99 1279.82,1208.03 1280.4,1208.19 1280.99,1209.14 1281.58,1209.23 1282.16,1210.27 1282.75,1208.92 1283.34,1208.63 1283.92,1208.65 1284.51,1207.4 1285.1,1210.04 1285.68,1206.41 1286.27,1209.06 1286.86,1207.75 1287.44,1207.78 1288.03,1210.42 1288.61,1210.38 1289.2,1210.66 1289.79,1210.81 1290.37,1210.82 1290.96,1213.26 1291.55,1211.67 1292.13,1212.68 1292.72,1212.47 1293.31,1207.53 1293.89,1207.72 1294.48,1206.32 1295.06,1207.84 1295.65,1206.63 1296.24,1207.81 1296.82,1207.95 1297.41,1209.34 1298,1210.63 1298.58,1210.64 1299.17,1212.12 1299.76,1213.08 1300.34,1213.89 1300.93,1213.87 1301.52,1213.63 1302.1,1214.57 1302.69,1215.66 1303.27,1216.67 1303.86,1215.14 1304.45,1212.15 1305.03,1211.97 1305.62,1213.07 1306.21,1212.97 1306.79,1212.69 1307.38,1209.87 1307.97,1209.62 1308.55,1208.44 1309.14,1212.31 1309.73,1213.41 1310.31,1212.27 1310.9,1213.42 1311.48,1212.98 1312.07,1211.71 1312.66,1211.59 1313.24,1211.48 1313.83,1212.69 1314.42,1212.34 1315,1213.31 1315.59,1212.82 1316.18,1212.38 1316.76,1213.29 1317.35,1213.04 1317.93,1215.05 1318.52,1214.7 1319.11,1215.61 1319.69,1214.03 1320.28,1211.25 1320.87,1210.85 1321.45,1208.5 1322.04,1209.98 1322.63,1209.85 1323.21,1212.16 1323.8,1211.87 1324.39,1211.64 1324.97,1209.04 1325.56,1209 1326.14,1210.15 1326.73,1210.01 1327.32,1208.77 1327.9,1206.28 1328.49,1206.24 1329.08,1203.89 1329.66,1203.95 1330.25,1204.35 1330.84,1204.73 1331.42,1204.82 1332.01,1206.17 1332.6,1204.83 1333.18,1207.77 1333.77,1207.83 1334.35,1207.62 1334.94,1206.44 1335.53,1202.82 1336.11,1205.64 1336.7,1208.38 1337.29,1208.53 1337.87,1209.8 1338.46,1212.17 1339.05,1213.07 1339.63,1211.59 1340.22,1210.06 1340.8,1212.59 1341.39,1212.25 1341.98,1212.05 1342.56,1214.39 1343.15,1216.56 1343.74,1216.42 1344.32,1212.4 1344.91,1210.93 1345.5,1211.86 1346.08,1210.44 1346.67,1209.17 1347.26,1207.86 1347.84,1208.07 1348.43,1208.13 1349.01,1204.28 1349.6,1206.83 1350.19,1208.15 1350.77,1207 1351.36,1208.21 1351.95,1206.94 1352.53,1208.41 1353.12,1208.64 1353.71,1210.95 1354.29,1212.13 1354.88,1208.38 1355.47,1208.37 1356.05,1206.91 1356.64,1209.27 1357.22,1208.17 1357.81,1209.37 1358.4,1210.76 1358.98,1213.04 1359.57,1213.94 1360.16,1212.44 1360.74,1214.9 1361.33,1214.57 1361.92,1210.64 1362.5,1209.35 1363.09,1210.59 1363.68,1210.27 1364.26,1209.1 1364.85,1212.92 1365.43,1211.83 1366.02,1212.84 1366.61,1215.48 1367.19,1216.46 1367.78,1214.99 1368.37,1213.22 1368.95,1211.79 1369.54,1210.18 1370.13,1206.47 1370.71,1204.27 1371.3,1204.34 1371.88,1205.77 1372.47,1208.45 1373.06,1208.45 1373.64,1207.53 1374.23,1207.54 1374.82,1206.53 1375.4,1209.22 1375.99,1209.21 1376.58,1208.12 1377.16,1209.51 1377.75,1207.04 1378.34,1207.18 1378.92,1207.4 1379.51,1205.09 1380.09,1206.78 1380.68,1206.87 1381.27,1208.17 1381.85,1204.41 1382.44,1205.66 1383.03,1208.3 1383.61,1208.48 1384.2,1207.38 1384.79,1209.77 1385.37,1211.02 1385.96,1213.29 1386.55,1214.44 1387.13,1212.98 1387.72,1215.33 1388.3,1214.99 1388.89,1215.59 1389.48,1216.39 1390.06,1215.93 1390.65,1215.47 1391.24,1214.92 1391.82,1210.81 1392.41,1209.69 1393,1210.71 1393.58,1214.49 1394.17,1214.36 1394.75,1212.77 1395.34,1211.12 1395.93,1210.82 1396.51,1209.5 1397.1,1209.57 1397.69,1208.05 1398.27,1207.96 1398.86,1206.88 1399.45,1206.97 1400.03,1205.98 1400.62,1207.68 1401.21,1205.14 1401.79,1202.68 1402.38,1203.08 1402.96,1204.59 1403.55,1206.09 1404.14,1207.37 1404.72,1212.5 1405.31,1212.47 1405.9,1212.17 1406.48,1216.9 1407.07,1216.51 1407.66,1216.34 1408.24,1214.67 1408.83,1212.92 1409.42,1213.78 1410,1213.4 1410.59,1211.87 1411.17,1209.52 1411.76,1210.85 1412.35,1210.78 1412.93,1212.04 1413.52,1210.54 1414.11,1206.4 1414.69,1205.3 1415.28,1208.01 1415.87,1210.49 1416.45,1211.81 1417.04,1214.11 1417.63,1214.81 1418.21,1214.11 1418.8,1213.82 1419.38,1212.12 1419.97,1214.57 1420.56,1215.95 1421.14,1214.52 1421.73,1212.69 1422.32,1212.61 1422.9,1212.32 1423.49,1209.61 1424.08,1207.01 1424.66,1206.07 1425.25,1206.11 1425.83,1206.25 1426.42,1206.3 1427.01,1210.22 1427.59,1209.03 1428.18,1210.38 1428.77,1211.3 1429.35,1213.4 1429.94,1212.94 1430.53,1215.38 1431.11,1216.18 1431.7,1215.72 1432.29,1215.45 1432.87,1214.9 1433.46,1215.76 1434.04,1214.32 1434.63,1211.6 1435.22,1212.57 1435.8,1211.03 1436.39,1209.74 1436.98,1208.42 1437.56,1207.21 1438.15,1208.46 1438.74,1206.01 1439.32,1206.28 1439.91,1206.46 1440.5,1207.86 1441.08,1207.87 1441.67,1208.12 1442.25,1209.47 1442.84,1213.42 1443.43,1214.25 1444.01,1215.42 1444.6,1216.11 1445.19,1217.03 1445.77,1214.45 1446.36,1211.75 1446.95,1207.98 1447.53,1209.38 1448.12,1210.65 1448.7,1210.65 1449.29,1208.35 1449.88,1208.47 1450.46,1210.83 1451.05,1210.76 1451.64,1209.18 1452.22,1209.11 1452.81,1209.11 1453.4,1210.05 1453.98,1211.16 1454.57,1211.16 1455.16,1209.91 1455.74,1209.85 1456.33,1210.77 1456.91,1208.1 1457.5,1209.59 1458.09,1208.44 1458.67,1210.86 1459.26,1208.22 1459.85,1208.29 1460.43,1207.09 1461.02,1209.61 1461.61,1210.96 1462.19,1209.93 1462.78,1206.25 1463.37,1207.38 1463.95,1206.28 1464.54,1206.45 1465.12,1206.41 1465.71,1210.21 1466.3,1209.15 1466.88,1207.92 1467.47,1207.93 1468.06,1209.06 1468.64,1210.23 1469.23,1207.78 1469.82,1207.85 1470.4,1205.55 1470.99,1205.52 1471.57,1205.92 1472.16,1204.6 1472.75,1204.98 1473.33,1206.61 1473.92,1205.4 1474.51,1205.6 1475.09,1205.6 1475.68,1205.79 1476.27,1206.29 1476.85,1206.47 1477.44,1205.39 1478.03,1203.24 1478.61,1203.56 1479.2,1205.15 1479.78,1203.94 1480.37,1204.34 1480.96,1203.29 1481.54,1203.71 1482.13,1202.83 1482.72,1204.15 1483.3,1204.84 1483.89,1205.31 1484.48,1205.61 1485.06,1204.48 1485.65,1206.1 1486.24,1206.52 1486.82,1206.71 1487.41,1205.63 1487.99,1205.73 1488.58,1207.29 1489.17,1207.28 1489.75,1204.92 1490.34,1204.98 1490.93,1206.39 1491.51,1209.16 1492.1,1208.88 1492.69,1210.03 1493.27,1210.21 1493.86,1207.7 1494.45,1209.05 1495.03,1210.19 1495.62,1208.99 1496.2,1206.34 1496.79,1207.72 1497.38,1207.75 1497.96,1210.5 1498.55,1208.25 1499.14,1205.89 1499.72,1205.06 1500.31,1206.56 1500.9,1209.41 1501.48,1209.29 1502.07,1207 1502.65,1208.1 1503.24,1206.92 1503.83,1206.02 1504.41,1205.01 1505,1205.3 1505.59,1200.81 1506.17,1203.68 1506.76,1202.81 1507.35,1200.69 1507.93,1203.88 1508.52,1205.59 1509.11,1203.42 1509.69,1202.74 1510.28,1204.33 1510.86,1203.45 1511.45,1203.9 1512.04,1204.01 1512.62,1205.28 1513.21,1205.54 1513.8,1205.68 1514.38,1207.11 1514.97,1207.38 1515.56,1202.62 1516.14,1206.6 1516.73,1205.43 1517.32,1204.16 1517.9,1207.03 1518.49,1205.89 1519.07,1206.32 1519.66,1206.32 1520.25,1206.46 1520.83,1207.98 1521.42,1207.83 1522.01,1206.86 1522.59,1206.75 1523.18,1206.83 1523.77,1204.54 1524.35,1207.38 1524.94,1210.09 1525.52,1210.09 1526.11,1212.6 1526.7,1211.2 1527.28,1213.64 1527.87,1219.62 1528.46,1216.42 1529.04,1218.45 1529.63,1216.84 1530.22,1216.56 1530.8,1213.52 1531.39,1210.89 1531.98,1217.03 1532.56,1215.39 1533.15,1216.24 1533.73,1214.56 1534.32,1217.51 1534.91,1215.65 1535.49,1216.47 1536.08,1215.97 1536.67,1218.31 1537.25,1220.37 1537.84,1217.33 1538.43,1214.33 1539.01,1215 1539.6,1215.86 1540.19,1215.6 1540.77,1215.08 1541.36,1213.49 1541.94,1211.92 1542.53,1212.94 1543.12,1210.41 1543.7,1209.19 1544.29,1211.79 1544.88,1211.44 1545.46,1213.84 1546.05,1212.48 1546.64,1211.07 1547.22,1212.07 1547.81,1211.85 1548.4,1211.64 1548.98,1211.61 1549.57,1211.68 1550.15,1211.21 1550.74,1212.26 1551.33,1210.9 1551.91,1208.35 1552.5,1207.37 1553.09,1209.94 1553.67,1209.91 1554.26,1210.18 1554.85,1211.37 1555.43,1209.03 1556.02,1207.69 1556.6,1206.64 1557.19,1207.84 1557.78,1207.53 1558.36,1206.33 1558.95,1205.21 1559.54,1205.52 1560.12,1205.81 1560.71,1204.73 1561.3,1206.3 1561.88,1206.35 1562.47,1206.81 1563.06,1206.83 1563.64,1207.03 1564.23,1207.28 1564.81,1207.51 1565.4,1207.95 1565.99,1206.85 1566.57,1206.76 1567.16,1206.87 1567.75,1205.66 1568.33,1204.46 1568.92,1203.24 1569.51,1203.48 1570.09,1203.72 1570.68,1205.35 1571.27,1205.42 1571.85,1204.48 1572.44,1203.63 1573.02,1205.04 1573.61,1203.84 1574.2,1201.6 1574.78,1202.04 1575.37,1201.27 1575.96,1203.17 1576.54,1204.92 1577.13,1205.4 1577.72,1204.4 1578.3,1204.74 1578.89,1201.41 1579.47,1205.14 1580.06,1206.42 1580.65,1206.39 1581.23,1206.53 1581.82,1206.53 1582.41,1206.79 1582.99,1206.85 1583.58,1205.82 1584.17,1207.38 1584.75,1206.3 1585.34,1207.61 1585.93,1206.66 1586.51,1205.64 1587.1,1209.4 1587.68,1205.76 1588.27,1208.4 1588.86,1208.29 1589.44,1209.65 1590.03,1208.44 1590.62,1209.76 1591.2,1209.81 1591.79,1209.67 1592.38,1209.61 1592.96,1208.48 1593.55,1206.1 1594.14,1206.36 1594.72,1205.42 1595.31,1208.09 1595.89,1209.5 1596.48,1210.84 1597.07,1212.29 1597.65,1214.66 1598.24,1210.58 1598.83,1209.2 1599.41,1209.09 1600,1206.91 1600.59,1208.35 1601.17,1209.34 1601.76,1209.18 1602.34,1210.47 1602.93,1212.89 1603.52,1210.39 1604.1,1210.04 1604.69,1211.12 1605.28,1211.18 1605.86,1211.44 1606.45,1209.99 1607.04,1207.48 1607.62,1206.5 1608.21,1202.87 1608.8,1205.95 1609.38,1208.78 1609.97,1211.19 1610.55,1210.88 1611.14,1207.27 1611.73,1206.16 1612.31,1208.78 1612.9,1210.06 1613.49,1211.18 1614.07,1209.82 1614.66,1209.97 1615.25,1209.98 1615.83,1208.75 1616.42,1208.88 1617.01,1211.3 1617.59,1212.62 1618.18,1211.2 1618.76,1209.97 1619.35,1209.72 1619.94,1208.25 1620.52,1209.64 1621.11,1210.73 1621.7,1209.42 1622.28,1206.61 1622.87,1206.68 1623.46,1205.65 1624.04,1204.66 1624.63,1213.35 1625.22,1214.4 1625.8,1212.94 1626.39,1213.9 1626.97,1213.3 1627.56,1213.49 1628.15,1213.27 1628.73,1210.37 1629.32,1209.97 1629.91,1208.82 1630.49,1210.2 1631.08,1207.78 1631.67,1204.26 1632.25,1204.48 1632.84,1204.61 1633.42,1204.69 1634.01,1203.71 1634.6,1206.67 1635.18,1205.78 1635.77,1207.12 1636.36,1204.62 1636.94,1206.08 1637.53,1205.97 1638.12,1207.46 1638.7,1208.64 1639.29,1206.08 1639.88,1207.61 1640.46,1208.83 1641.05,1207.49 1641.63,1210.03 1642.22,1209.81 1642.81,1210.99 1643.39,1211.81 1643.98,1211.65 1644.57,1211.57 1645.15,1211.55 1645.74,1213.88 1646.33,1211.24 1646.91,1211.04 1647.5,1213.71 1648.09,1213.17 1648.67,1209.34 1649.26,1209.58 1649.84,1209.3 1650.43,1210.28 1651.02,1211.4 1651.6,1208.83 1652.19,1207.69 1652.78,1206.95 1653.36,1206.05 1653.95,1203.75 1654.54,1205.26 1655.12,1206.73 1655.71,1205.44 1656.29,1205.63 1656.88,1205.88 1657.47,1208.75 1658.05,1209.98 1658.64,1208.74 1659.23,1206.27 1659.81,1209 1660.4,1210.25 1660.99,1212.46 1661.57,1210.93 1662.16,1209.82 1662.75,1210.01 1663.33,1210.03 1663.92,1211.13 1664.5,1211.13 1665.09,1210.91 1665.68,1210.64 1666.26,1210.59 1666.85,1210.43 1667.44,1209.17 1668.02,1209.36 1668.61,1210.41 1669.2,1211.4 1669.78,1213.86 1670.37,1210.85 1670.96,1210.91 1671.54,1213.38 1672.13,1213.09 1672.71,1214.07 1673.3,1215.07 1673.89,1217.31 1674.47,1218.16 1675.06,1216.37 1675.65,1218.52 1676.23,1215.41 1676.82,1216.36 1677.41,1216.01 1677.99,1217.05 1678.58,1217.92 1679.17,1218.6 1679.75,1215.56 1680.34,1214.95 1680.92,1214.49 1681.51,1212.84 1682.1,1215.14 1682.68,1213.62 1683.27,1214.8 1683.86,1213.44 1684.44,1211.86 1685.03,1211.78 1685.62,1212.74 1686.2,1213.7 1686.79,1214.6 1687.37,1213.3 1687.96,1213.33 1688.55,1209.16 1689.13,1209.03 1689.72,1209.08 1690.31,1207.73 1690.89,1205.23 1691.48,1206.78 1692.07,1207 1692.65,1203.16 1693.24,1202.28 1693.83,1202.62 1694.41,1201.82 1695,1202.23 1695.58,1202.55 1696.17,1201.93 1696.76,1203.55 1697.34,1202.46 1697.93,1200.26 1698.52,1201.89 1699.1,1202.1 1699.69,1198.65 1700.28,1196.59 1700.86,1196.16 1701.45,1196.73 1702.04,1196.22 1702.62,1195.49 1703.21,1196.11 1703.79,1196.85 1704.38,1194.92 1704.97,1195.69 1705.55,1196.62 1706.14,1196.01 1706.73,1196.58 1707.31,1194.75 1707.9,1195.31 1708.49,1195.92 1709.07,1197.7 1709.66,1198.18 1710.24,1198.56 1710.83,1198.99 1711.42,1198.39 1712,1197.81 1712.59,1199.57 1713.18,1200 1713.76,1201.99 1714.35,1201.28 1714.94,1203.91 1715.52,1204.29 1716.11,1206 1716.7,1204.8 1717.28,1207.55 1717.87,1207.72 1718.45,1209.03 1719.04,1207.81 1719.63,1210.48 1720.21,1209.4 1720.8,1208.06 1721.39,1208.46 1721.97,1207.57 1722.56,1207.7 1723.15,1206.81 1723.73,1209.37 1724.32,1207.09 1724.91,1207.36 1725.49,1206.32 1726.08,1209.11 1726.66,1209.21 1727.25,1207.96 1727.84,1209.3 1728.42,1209.17 1729.01,1206.65 1729.6,1204.41 1730.18,1204.82 1730.77,1206.18 1731.36,1205.17 1731.94,1206.62 1732.53,1207.9 1733.11,1209.01 1733.7,1209.37 1734.29,1209.66 1734.87,1208.24 1735.46,1208.37 1736.05,1208.45 1736.63,1208.56 1737.22,1207.52 1737.81,1210.24 1738.39,1217.53 1738.98,1215.88 1739.57,1215.76 1740.15,1214.09 1740.74,1214.93 1741.32,1214.96 1741.91,1216.09 1742.5,1217.16 1743.08,1213.98 1743.67,1214.73 1744.26,1211.93 1744.84,1214.35 1745.43,1214.2 1746.02,1215.13 1746.6,1214.43 1747.19,1215.15 1747.78,1216.08 1748.36,1217.02 1748.95,1216.49 1749.53,1218.69 1750.12,1217.94 1750.71,1217.35 1751.29,1213.28 1751.88,1212.8 1752.47,1213.71 1753.05,1212.21 1753.64,1208.15 1754.23,1209.77 1754.81,1212.3 1755.4,1210.76 1755.99,1210.84 1756.57,1210.8 1757.16,1210.7 1757.74,1208.1 1758.33,1203 1758.92,1202.17 1759.5,1204.01 1760.09,1205.75 1760.68,1207.41 1761.26,1206.19 1761.85,1209.9 1762.44,1208.59 1763.02,1209.99 1763.61,1211.22 1764.19,1211.04 1764.78,1210.82 1765.37,1210.58 1765.95,1216.46 1766.54,1216.24 1767.13,1221.03 1767.71,1219.22 1768.3,1216.14 1768.89,1216.94 1769.47,1216.72 1770.06,1217.54 1770.65,1219.35 1771.23,1222.54 1771.82,1220.54 1772.4,1219.8 1772.99,1217.89 1773.58,1217.35 1774.16,1215.56 1774.75,1215.2 1775.34,1214.88 1775.92,1212.14 1776.51,1211.9 1777.1,1209.44 1777.68,1214.36 1778.27,1215.1 1778.86,1214.57 1779.44,1216.77 1780.03,1215.22 1780.61,1214.72 1781.2,1212.12 1781.79,1210.76 1782.37,1209.37 1782.96,1208.11 1783.55,1208.06 1784.13,1206.75 1784.72,1207.95 1785.31,1206.69 1785.89,1206.66 1786.48,1206.83 1787.06,1208.16 1787.65,1208.16 1788.24,1208.08 1788.82,1209.18 1789.41,1207.83 1790,1206.72 1790.58,1208.19 1791.17,1206.77 1791.76,1205.54 1792.34,1207.24 1792.93,1205.95 1793.52,1204.73 1794.1,1203.59 1794.69,1203.7 1795.27,1204.1 1795.86,1205.46 1796.45,1208.41 1797.03,1208.2 1797.62,1205.89 1798.21,1203.73 1798.79,1203.83 1799.38,1202.94 1799.97,1203.42 1800.55,1205.12 1801.14,1201.62 1801.73,1200.84 1802.31,1201.71 1802.9,1198.38 1803.48,1200.22 1804.07,1201.96 1804.66,1202.37 1805.24,1202.67 1805.83,1202.94 1806.42,1203.38 1807,1202.53 1807.59,1198.15 1808.18,1198.65 1808.76,1198.16 1809.35,1200.33 1809.94,1202.17 1810.52,1203.6 1811.11,1204.13 1811.69,1206.1 1812.28,1208.52 1812.87,1208.73 1813.45,1211.25 1814.04,1211.03 1814.63,1211.09 1815.21,1211.12 1815.8,1212.51 1816.39,1212.57 1816.97,1211.42 1817.56,1212.43 1818.14,1212.13 1818.73,1210.88 1819.32,1209.64 1819.9,1209.57 1820.49,1211.99 1821.08,1212.81 1821.66,1212.73 1822.25,1209.93 1822.84,1211.12 1823.42,1210.95 1824.01,1209.73 1824.6,1212.03 1825.18,1209.34 1825.77,1207.91 1826.35,1209.32 1826.94,1210.55 1827.53,1210.39 1828.11,1211.39 1828.7,1209.95 1829.29,1210.07 1829.87,1211.22 1830.46,1210 1831.05,1208.58 1831.63,1210.99 1832.22,1209.88 1832.81,1207.4 1833.39,1208.59 1833.98,1209.98 1834.56,1209.66 1835.15,1208.4 1835.74,1207.16 1836.32,1209.52 1836.91,1210.9 1837.5,1210.55 1838.08,1213.29 1838.67,1212.06 1839.26,1211.89 1839.84,1208.16 1840.43,1207.89 1841.01,1208.09 1841.6,1206.73 1842.19,1206.9 1842.77,1205.9 1843.36,1207.43 1843.95,1206.3 1844.53,1205.15 1845.12,1203.96 1845.71,1204.36 1846.29,1204.51 1846.88,1205.89 1847.47,1207.41 1848.05,1211.07 1848.64,1212.02 1849.22,1213.21 1849.81,1212.89 1850.4,1212.49 1850.98,1211.08 1851.57,1209.68 1852.16,1208.4 1852.74,1209.4 1853.33,1209.32 1853.92,1209.21 1854.5,1210.14 1855.09,1207.7 1855.68,1207.86 1856.26,1209.16 1856.85,1209.38 1857.43,1210.25 1858.02,1208.88 1858.61,1209.08 1859.19,1207.73 1859.78,1207.49 1860.37,1205.28 1860.95,1206.76 1861.54,1207.97 1862.13,1210.89 1862.71,1212.23 1863.3,1209.41 1863.88,1210.66 1864.47,1212.75 1865.06,1211.31 1865.64,1208.7 1866.23,1209.85 1866.82,1210.83 1867.4,1209.46 1867.99,1210.48 1868.58,1211.58 1869.16,1210.15 1869.75,1211.28 1870.34,1209.69 1870.92,1208.21 1871.51,1208.33 1872.09,1209.77 1872.68,1208.48 1873.27,1207.25 1873.85,1207.28 1874.44,1204.89 1875.03,1204.95 1875.61,1206.42 1876.2,1207.89 1876.79,1206.5 1877.37,1206.92 1877.96,1208.38 1878.55,1209.65 1879.13,1212.16 1879.72,1211.84 1880.3,1211.7 1880.89,1212.66 1881.48,1212.55 1882.06,1212.39 1882.65,1215.07 1883.24,1215.96 1883.82,1214.31 1884.41,1213.11 1885,1215.39 1885.58,1216.16 1886.17,1213.38 1886.76,1213.03 1887.34,1213.74 1887.93,1214.77 1888.51,1214.32 1889.1,1214.12 1889.69,1211.27 1890.27,1212.06 1890.86,1210.76 1891.45,1209.22 1892.03,1207.93 1892.62,1210.44 1893.21,1209.16 1893.79,1210.53 1894.38,1211.87 1894.96,1211.6 1895.55,1211.54 1896.14,1210.4 1896.72,1212.97 1897.31,1211.56 1897.9,1212.65 1898.48,1211.09 1899.07,1209.85 1899.66,1209.93 1900.24,1210.97 1900.83,1211.82 1901.42,1211.63 1902,1213.75 1902.59,1213.51 1903.17,1213.12 1903.76,1213.02 1904.35,1214.04 1904.93,1219.55 1905.52,1220.3 1906.11,1219.53 1906.69,1218.79 1907.28,1215.71 1907.87,1216.53 1908.45,1213.5 1909.04,1209.38 1909.63,1210.43 1910.21,1210.27 1910.8,1210.21 1911.38,1210.21 1911.97,1211.38 1912.56,1211.49 1913.14,1213.76 1913.73,1213.21 1914.32,1215.25 1914.9,1216.14 1915.49,1213.29 1916.08,1213.02 1916.66,1212.76 1917.25,1213.71 1917.83,1212.12 1918.42,1212.02 1919.01,1213.28 1919.59,1215.62 1920.18,1210.27 1920.77,1211.52 1921.35,1212.66 1921.94,1212.26 1922.53,1212.42 1923.11,1213.7 1923.7,1215.81 1924.29,1215.23 1924.87,1214.89 1925.46,1213.13 1926.04,1211.73 1926.63,1208.84 1927.22,1207.31 1927.8,1208.55 1928.39,1207.13 1928.98,1205.99 1929.56,1207.06 1930.15,1208.21 1930.74,1206.83 1931.32,1205.79 1931.91,1208.3 1932.5,1209.18 1933.08,1210.43 1933.67,1213.13 1934.25,1215.49 1934.84,1213.87 1935.43,1210.8 1936.01,1211.99 1936.6,1210.83 1937.19,1208.25 1937.77,1208.29 1938.36,1207.29 1938.95,1207.48 1939.53,1207.32 1940.12,1206.08 1940.71,1209.01 1941.29,1209.02 1941.88,1208.95 1942.46,1205.09 1943.05,1206.51 1943.64,1205.29 1944.22,1204.28 1944.81,1202.07 1945.4,1202.53 1945.98,1206.75 1946.57,1205.56 1947.16,1206.72 1947.74,1205.54 1948.33,1205.89 1948.91,1207.44 1949.5,1207.54 1950.09,1206.57 1950.67,1208.01 1951.26,1208.08 1951.85,1208.02 1952.43,1207.86 1953.02,1206.87 1953.61,1205.77 1954.19,1204.71 1954.78,1202.35 1955.37,1206.49 1955.95,1206.48 1956.54,1206.51 1957.12,1208.04 1957.71,1209.12 1958.3,1207.77 1958.88,1207.92 1959.47,1210.55 1960.06,1210.45 1960.64,1210.48 1961.23,1210.34 1961.82,1210.42 1962.4,1211.64 1962.99,1212.73 1963.58,1213.66 1964.16,1213.22 1964.75,1215.55 1965.33,1212.49 1965.92,1209.92 1966.51,1208.83 1967.09,1208.81 1967.68,1207.82 1968.27,1206.46 1968.85,1205.11 1969.44,1204.22 1970.03,1208.15 1970.61,1208.32 1971.2,1208.62 1971.78,1208.62 1972.37,1205.04 1972.96,1209 1973.54,1208.89 1974.13,1208.9 1974.72,1208.86 1975.3,1208.89 1975.89,1207.53 1976.48,1212.45 1977.06,1211.33 1977.65,1208.78 1978.24,1209.92 1978.82,1209.87 1979.41,1212.55 1979.99,1213.48 1980.58,1213.11 1981.17,1213.94 1981.75,1211.35 1982.34,1212.49 1982.93,1212.37 1983.51,1212.04 1984.1,1210.85 1984.69,1210.84 1985.27,1210.64 1985.86,1214.16 1986.45,1215.01 1987.03,1215.83 1987.62,1215.47 1988.2,1215.25 1988.79,1214.8 1989.38,1214.78 1989.96,1214.56 1990.55,1215.59 1991.14,1216.44 1991.72,1216.03 1992.31,1214.22 1992.9,1213.74 1993.48,1212.22 1994.07,1210.88 1994.65,1208.32 1995.24,1208.4 1995.83,1207.51 1996.41,1207.76 1997,1207.95 1997.59,1205.36 1998.17,1206.87 1998.76,1206.83 1999.35,1205.54 1999.93,1207.06 2000.52,1208.51 2001.11,1209.9 2001.69,1210.9 2002.28,1210.9 2002.86,1210.71 2003.45,1209.26 2004.04,1208.21 2004.62,1208.32 2005.21,1209.54 2005.8,1209.5 2006.38,1209.55 2006.97,1209.49 2007.56,1209.26 2008.14,1206.86 2008.73,1208.12 2009.32,1206.86 2009.9,1210.76 2010.49,1209.49 2011.07,1207.1 2011.66,1208.41 2012.25,1210.07 2012.83,1203.72 2013.42,1202.56 2014.01,1201.58 2014.59,1201.85 2015.18,1202.66 2015.77,1203.03 2016.35,1203.26 2016.94,1207.48 2017.53,1208.6 2018.11,1207.4 2018.7,1207.54 2019.28,1207.75 2019.87,1209.07 2020.46,1207.96 2021.04,1207.92 2021.63,1205.37 2022.22,1209.18 2022.8,1211.4 2023.39,1206.29 2023.98,1207.85 2024.56,1210.25 2025.15,1210.15 2025.73,1207.61 2026.32,1206.6 2026.91,1207.8 2027.49,1209.33 2028.08,1209.39 2028.67,1209.38 2029.25,1210.91 2029.84,1209.6 2030.43,1208.12 2031.01,1209.34 2031.6,1209.19 2032.19,1209.14 2032.77,1209.26 2033.36,1209.34 2033.94,1210.53 2034.53,1209.07 2035.12,1207.91 2035.7,1209.29 2036.29,1209.25 2036.88,1208.11 2037.46,1208.08 2038.05,1208.01 2038.64,1208.14 2039.22,1205.73 2039.81,1204.66 2040.4,1203.7 2040.98,1202.79 2041.57,1201.87 2042.15,1205.81 2042.74,1207.11 2043.33,1205.92 2043.91,1210.72 2044.5,1215.83 2045.09,1215.27 2045.67,1215.76 2046.26,1218.98 2046.85,1218.46 2047.43,1219.44 2048.02,1220.3 2048.6,1220.93 2049.19,1221.26 2049.78,1219.52 2050.36,1219.85 2050.95,1219.3 2051.54,1220.03 2052.12,1218.36 2052.71,1216.57 2053.3,1215.27 2053.88,1213.88 2054.47,1212.55 2055.06,1212.37 2055.64,1212.16 2056.23,1212.05 2056.81,1214.18 2057.4,1213.87 2057.99,1213.78 2058.57,1214.77 2059.16,1215.93 2059.75,1214.5 2060.33,1215.39 2060.92,1217.55 2061.51,1212.22 2062.09,1211.86 2062.68,1207.95 2063.27,1205.4 2063.85,1205.57 2064.44,1203.29 2065.02,1202.52 2065.61,1203.89 2066.2,1203.9 2066.78,1202.74 2067.37,1203.26 2067.96,1207.19 2068.54,1206 2069.13,1207.56 2069.72,1207.76 2070.3,1206.57 2070.89,1201.81 2071.48,1204.39 2072.06,1204.5 2072.65,1204.76 2073.23,1205.04 2073.82,1206.44 2074.41,1205.47 2074.99,1205.73 2075.58,1203.29 2076.17,1203.64 2076.75,1206.75 2077.34,1207.08 2077.93,1204.72 2078.51,1207.51 2079.1,1206.44 2079.68,1206.9 2080.27,1208.22 2080.86,1205.96 2081.44,1208.96 2082.03,1207.69 2082.62,1206.35 2083.2,1203.95 2083.79,1200.55 2084.38,1200.93 2084.96,1200.06 2085.55,1199.33 2086.14,1201.38 2086.72,1200.55 2087.31,1202.12 2087.89,1200.07 2088.48,1204.17 2089.07,1204.41 2089.65,1202.14 2090.24,1202.51 2090.83,1200.35 2091.41,1202.1 2092,1202.33 2092.59,1202.79 2093.17,1203.07 2093.76,1202.22 2094.35,1201.27 2094.93,1200.38 2095.52,1196.21 2096.1,1198.02 2096.69,1199.88 2097.28,1200.35 2097.86,1198.64 2098.45,1198.14 2099.04,1198.8 2099.62,1202.1 2100.21,1201.36 2100.8,1201.84 2101.38,1204.66 2101.97,1206.19 2102.55,1208.73 2103.14,1207.53 2103.73,1203.99 2104.31,1204.27 2104.9,1201.94 2105.49,1200.95 2106.07,1201.18 2106.66,1201.83 2107.25,1201.2 2107.83,1201.79 2108.42,1203.45 2109.01,1203.92 2109.59,1204.47 2110.18,1206.16 2110.76,1207.7 2111.35,1206.37 2111.94,1209.05 2112.52,1209.04 2113.11,1208.98 2113.7,1210.51 2114.28,1212.98 2114.87,1211.75 2115.46,1209.16 2116.04,1208.06 2116.63,1206.77 2117.22,1207.1 2117.8,1207.22 2118.39,1208.59 2118.97,1207.47 2119.56,1206.26 2120.15,1205.44 2120.73,1205.74 2121.32,1206.03 2121.91,1205.09 2122.49,1205.17 2123.08,1207.65 2123.67,1207.63 2124.25,1206.31 2124.84,1206.35 2125.42,1206.56 2126.01,1209.01 2126.6,1210.2 2127.18,1208.75 2127.77,1208.9 2128.36,1206.73 2128.94,1206.92 2129.53,1207.01 2130.12,1207.23 2130.7,1208.49 2131.29,1206.95 2131.88,1207.35 2132.46,1206.25 2133.05,1206.41 2133.63,1210.53 2134.22,1210.61 2134.81,1211.65 2135.39,1213.72 2135.98,1213.7 2136.57,1213.54 2137.15,1216.65 2137.74,1213.75 2138.33,1213.56 2138.91,1213.34 2139.5,1213.42 2140.09,1212.08 2140.67,1215.64 2141.26,1214.18 2141.84,1211.31 2142.43,1210.94 2143.02,1213.22 2143.6,1215.16 2144.19,1214.91 2144.78,1214.47 2145.36,1216.82 2145.95,1215.32 2146.54,1215 2147.12,1212.02 2147.71,1211.83 2148.3,1212.85 2148.88,1211.29 2149.47,1209.84 2150.05,1210.99 2150.64,1210.72 2151.23,1212 2151.81,1213.02 2152.4,1211.48 2152.99,1213.71 2153.57,1214.78 2154.16,1214.38 2154.75,1215.38 2155.33,1216.24 2155.92,1215.8 2156.5,1214.73 2157.09,1212.91 2157.68,1211.48 2158.26,1212.34 \"/>\n<path clip-path=\"url(#clip442)\" d=\"M986.025 1209.53 L986.612 1209.53 L987.198 1209.53 L987.785 1209.53 L988.371 1209.53 L988.957 1209.53 L989.544 1209.53 L990.13 1209.53 L990.717 1209.53 L991.303 1209.53 L991.889 1209.53 L992.476 1209.53 L993.062 1209.53 L993.649 1209.53 L994.235 1209.53 L994.822 1209.53 L995.408 1209.53 L995.994 1209.53 L996.581 1209.53 L997.167 1209.53 L997.754 1209.53 L998.34 1209.53 L998.926 1209.53 L999.513 1209.53 L1000.1 1209.53 L1000.69 1209.53 L1001.27 1209.53 L1001.86 1209.53 L1002.44 1209.53 L1003.03 1209.53 L1003.62 1209.53 L1004.2 1209.53 L1004.79 1209.53 L1005.38 1209.53 L1005.96 1209.53 L1006.55 1209.53 L1007.14 1209.53 L1007.72 1209.53 L1008.31 1209.53 L1008.9 1209.53 L1009.48 1209.53 L1010.07 1209.53 L1010.65 1209.53 L1011.24 1209.53 L1011.83 1209.53 L1012.41 1209.53 L1013 1209.53 L1013.59 1209.53 L1014.17 1209.53 L1014.76 1209.53 L1015.35 1209.53 L1015.93 1209.53 L1016.52 1209.53 L1017.11 1209.53 L1017.69 1209.53 L1018.28 1209.53 L1018.86 1209.53 L1019.45 1209.53 L1020.04 1209.53 L1020.62 1209.53 L1021.21 1209.53 L1021.8 1209.53 L1022.38 1209.53 L1022.97 1209.53 L1023.56 1209.53 L1024.14 1209.53 L1024.73 1209.53 L1025.32 1209.53 L1025.9 1209.53 L1026.49 1209.53 L1027.07 1209.53 L1027.66 1209.53 L1028.25 1209.53 L1028.83 1209.53 L1029.42 1209.53 L1030.01 1209.53 L1030.59 1209.53 L1031.18 1209.53 L1031.77 1209.53 L1032.35 1209.53 L1032.94 1209.53 L1033.52 1209.53 L1034.11 1209.53 L1034.7 1209.53 L1035.28 1209.53 L1035.87 1209.53 L1036.46 1209.53 L1037.04 1209.53 L1037.63 1209.53 L1038.22 1209.53 L1038.8 1209.53 L1039.39 1209.53 L1039.98 1209.53 L1040.56 1209.53 L1041.15 1209.53 L1041.73 1209.53 L1042.32 1209.53 L1042.91 1209.53 L1043.49 1209.53 L1044.08 1209.53 L1044.67 1209.53 L1045.25 1209.53 L1045.84 1209.53 L1046.43 1209.53 L1047.01 1209.53 L1047.6 1209.53 L1048.19 1209.53 L1048.77 1209.53 L1049.36 1209.53 L1049.94 1209.53 L1050.53 1209.53 L1051.12 1209.53 L1051.7 1209.53 L1052.29 1209.53 L1052.88 1209.53 L1053.46 1209.53 L1054.05 1209.53 L1054.64 1209.53 L1055.22 1209.53 L1055.81 1209.53 L1056.39 1209.53 L1056.98 1209.53 L1057.57 1209.53 L1058.15 1209.53 L1058.74 1209.53 L1059.33 1209.53 L1059.91 1209.53 L1060.5 1209.53 L1061.09 1209.53 L1061.67 1209.53 L1062.26 1209.53 L1062.85 1209.53 L1063.43 1209.53 L1064.02 1209.53 L1064.6 1209.53 L1065.19 1209.53 L1065.78 1209.53 L1066.36 1209.53 L1066.95 1209.53 L1067.54 1209.53 L1068.12 1209.53 L1068.71 1209.53 L1069.3 1209.53 L1069.88 1209.53 L1070.47 1209.53 L1071.06 1209.53 L1071.64 1209.53 L1072.23 1209.53 L1072.81 1209.53 L1073.4 1209.53 L1073.99 1209.53 L1074.57 1209.53 L1075.16 1209.53 L1075.75 1209.53 L1076.33 1209.53 L1076.92 1209.53 L1077.51 1209.53 L1078.09 1209.53 L1078.68 1209.53 L1079.26 1209.53 L1079.85 1209.53 L1080.44 1209.53 L1081.02 1209.53 L1081.61 1209.53 L1082.2 1209.53 L1082.78 1209.53 L1083.37 1209.53 L1083.96 1209.53 L1084.54 1209.53 L1085.13 1209.53 L1085.72 1209.53 L1086.3 1209.53 L1086.89 1209.53 L1087.47 1209.53 L1088.06 1209.53 L1088.65 1209.53 L1089.23 1209.53 L1089.82 1209.53 L1090.41 1209.53 L1090.99 1209.53 L1091.58 1209.53 L1092.17 1209.53 L1092.75 1209.53 L1093.34 1209.53 L1093.93 1209.53 L1094.51 1209.53 L1095.1 1209.53 L1095.68 1209.53 L1096.27 1209.53 L1096.86 1209.53 L1097.44 1209.53 L1098.03 1209.53 L1098.62 1209.53 L1099.2 1209.53 L1099.79 1209.53 L1100.38 1209.53 L1100.96 1209.53 L1101.55 1209.53 L1102.14 1209.53 L1102.72 1209.53 L1103.31 1209.53 L1103.89 1209.53 L1104.48 1209.53 L1105.07 1209.53 L1105.65 1209.53 L1106.24 1209.53 L1106.83 1209.53 L1107.41 1209.53 L1108 1209.53 L1108.59 1209.53 L1109.17 1209.53 L1109.76 1209.53 L1110.34 1209.53 L1110.93 1209.53 L1111.52 1209.53 L1112.1 1209.53 L1112.69 1209.53 L1113.28 1209.53 L1113.86 1209.53 L1114.45 1209.53 L1115.04 1209.53 L1115.62 1209.53 L1116.21 1209.53 L1116.8 1209.53 L1117.38 1209.53 L1117.97 1209.53 L1118.55 1209.53 L1119.14 1209.53 L1119.73 1209.53 L1120.31 1209.53 L1120.9 1209.53 L1121.49 1209.53 L1122.07 1209.53 L1122.66 1209.53 L1123.25 1209.53 L1123.83 1209.53 L1124.42 1209.53 L1125.01 1209.53 L1125.59 1209.53 L1126.18 1209.53 L1126.76 1209.53 L1127.35 1209.53 L1127.94 1209.53 L1128.52 1209.53 L1129.11 1209.53 L1129.7 1209.53 L1130.28 1209.53 L1130.87 1209.53 L1131.46 1209.53 L1132.04 1209.53 L1132.63 1209.53 L1133.21 1209.53 L1133.8 1209.53 L1134.39 1209.53 L1134.97 1209.53 L1135.56 1209.53 L1136.15 1209.53 L1136.73 1209.53 L1137.32 1209.53 L1137.91 1209.53 L1138.49 1209.53 L1139.08 1209.53 L1139.67 1209.53 L1140.25 1209.53 L1140.84 1209.53 L1141.42 1209.53 L1142.01 1209.53 L1142.6 1209.53 L1143.18 1209.53 L1143.77 1209.53 L1144.36 1209.53 L1144.94 1209.53 L1145.53 1209.53 L1146.12 1209.53 L1146.7 1209.53 L1147.29 1209.53 L1147.88 1209.53 L1148.46 1209.53 L1149.05 1209.53 L1149.63 1209.53 L1150.22 1209.53 L1150.81 1209.53 L1151.39 1209.53 L1151.98 1209.53 L1152.57 1209.53 L1153.15 1209.53 L1153.74 1209.53 L1154.33 1209.53 L1154.91 1209.53 L1155.5 1209.53 L1156.09 1209.53 L1156.67 1209.53 L1157.26 1209.53 L1157.84 1209.53 L1158.43 1209.53 L1159.02 1209.53 L1159.6 1209.53 L1160.19 1209.53 L1160.78 1209.53 L1161.36 1209.53 L1161.95 1209.53 L1162.54 1209.53 L1163.12 1209.53 L1163.71 1209.53 L1164.29 1209.53 L1164.88 1209.53 L1165.47 1209.53 L1166.05 1209.53 L1166.64 1209.53 L1167.23 1209.53 L1167.81 1209.53 L1168.4 1209.53 L1168.99 1209.53 L1169.57 1209.53 L1170.16 1209.53 L1170.75 1209.53 L1171.33 1209.53 L1171.92 1209.53 L1172.5 1209.53 L1173.09 1209.53 L1173.68 1209.53 L1174.26 1209.53 L1174.85 1209.53 L1175.44 1209.53 L1176.02 1209.53 L1176.61 1209.53 L1177.2 1209.53 L1177.78 1209.53 L1178.37 1209.53 L1178.96 1209.53 L1179.54 1209.53 L1180.13 1209.53 L1180.71 1209.53 L1181.3 1209.53 L1181.89 1209.53 L1182.47 1209.53 L1183.06 1209.53 L1183.65 1209.53 L1184.23 1209.53 L1184.82 1209.53 L1185.41 1209.53 L1185.99 1209.53 L1186.58 1209.53 L1187.16 1209.53 L1187.75 1209.53 L1188.34 1209.53 L1188.92 1209.53 L1189.51 1209.53 L1190.1 1209.53 L1190.68 1209.53 L1191.27 1209.53 L1191.86 1209.53 L1192.44 1209.53 L1193.03 1209.53 L1193.62 1209.53 L1194.2 1209.53 L1194.79 1209.53 L1195.37 1209.53 L1195.96 1209.53 L1196.55 1209.53 L1197.13 1209.53 L1197.72 1209.53 L1198.31 1209.53 L1198.89 1209.53 L1199.48 1209.53 L1200.07 1209.53 L1200.65 1209.53 L1201.24 1209.53 L1201.83 1209.53 L1202.41 1209.53 L1203 1209.53 L1203.58 1209.53 L1204.17 1209.53 L1204.76 1209.53 L1205.34 1209.53 L1205.93 1209.53 L1206.52 1209.53 L1207.1 1209.53 L1207.69 1209.53 L1208.28 1209.53 L1208.86 1209.53 L1209.45 1209.53 L1210.03 1209.53 L1210.62 1209.53 L1211.21 1209.53 L1211.79 1209.53 L1212.38 1209.53 L1212.97 1209.53 L1213.55 1209.53 L1214.14 1209.53 L1214.73 1209.53 L1215.31 1209.53 L1215.9 1209.53 L1216.49 1209.53 L1217.07 1209.53 L1217.66 1209.53 L1218.24 1209.53 L1218.83 1209.53 L1219.42 1209.53 L1220 1209.53 L1220.59 1209.53 L1221.18 1209.53 L1221.76 1209.53 L1222.35 1209.53 L1222.94 1209.53 L1223.52 1209.53 L1224.11 1209.53 L1224.7 1209.53 L1225.28 1209.53 L1225.87 1209.53 L1226.45 1209.53 L1227.04 1209.53 L1227.63 1209.53 L1228.21 1209.53 L1228.8 1209.53 L1229.39 1209.53 L1229.97 1209.53 L1230.56 1209.53 L1231.15 1209.53 L1231.73 1209.53 L1232.32 1209.53 L1232.91 1209.53 L1233.49 1209.53 L1234.08 1209.53 L1234.66 1209.53 L1235.25 1209.53 L1235.84 1209.53 L1236.42 1209.53 L1237.01 1209.53 L1237.6 1209.53 L1238.18 1209.53 L1238.77 1209.53 L1239.36 1209.53 L1239.94 1209.53 L1240.53 1209.53 L1241.11 1209.53 L1241.7 1209.53 L1242.29 1209.53 L1242.87 1209.53 L1243.46 1209.53 L1244.05 1209.53 L1244.63 1209.53 L1245.22 1209.53 L1245.81 1209.53 L1246.39 1209.53 L1246.98 1209.53 L1247.57 1209.53 L1248.15 1209.53 L1248.74 1209.53 L1249.32 1209.53 L1249.91 1209.53 L1250.5 1209.53 L1251.08 1209.53 L1251.67 1209.53 L1252.26 1209.53 L1252.84 1209.53 L1253.43 1209.53 L1254.02 1209.53 L1254.6 1209.53 L1255.19 1209.53 L1255.78 1209.53 L1256.36 1209.53 L1256.95 1209.53 L1257.53 1209.53 L1258.12 1209.53 L1258.71 1209.53 L1259.29 1209.53 L1259.88 1209.53 L1260.47 1209.53 L1261.05 1209.53 L1261.64 1209.53 L1262.23 1209.53 L1262.81 1209.53 L1263.4 1209.53 L1263.98 1209.53 L1264.57 1209.53 L1265.16 1209.53 L1265.74 1209.53 L1266.33 1209.53 L1266.92 1209.53 L1267.5 1209.53 L1268.09 1209.53 L1268.68 1209.53 L1269.26 1209.53 L1269.85 1209.53 L1270.44 1209.53 L1271.02 1209.53 L1271.61 1209.53 L1272.19 1209.53 L1272.78 1209.53 L1273.37 1209.53 L1273.95 1209.53 L1274.54 1209.53 L1275.13 1209.53 L1275.71 1209.53 L1276.3 1209.53 L1276.89 1209.53 L1277.47 1209.53 L1278.06 1209.53 L1278.65 1209.53 L1279.23 1209.53 L1279.82 1209.53 L1280.4 1209.53 L1280.99 1209.53 L1281.58 1209.53 L1282.16 1209.53 L1282.75 1209.53 L1283.34 1209.53 L1283.92 1209.53 L1284.51 1209.53 L1285.1 1209.53 L1285.68 1209.53 L1286.27 1209.53 L1286.86 1209.53 L1287.44 1209.53 L1288.03 1209.53 L1288.61 1209.53 L1289.2 1209.53 L1289.79 1209.53 L1290.37 1209.53 L1290.96 1209.53 L1291.55 1209.53 L1292.13 1209.53 L1292.72 1209.53 L1293.31 1209.53 L1293.89 1209.53 L1294.48 1209.53 L1295.06 1209.53 L1295.65 1209.53 L1296.24 1209.53 L1296.82 1209.53 L1297.41 1209.53 L1298 1209.53 L1298.58 1209.53 L1299.17 1209.53 L1299.76 1209.53 L1300.34 1209.53 L1300.93 1209.53 L1301.52 1209.53 L1302.1 1209.53 L1302.69 1209.53 L1303.27 1209.53 L1303.86 1209.53 L1304.45 1209.53 L1305.03 1209.53 L1305.62 1209.53 L1306.21 1209.53 L1306.79 1209.53 L1307.38 1209.53 L1307.97 1209.53 L1308.55 1209.53 L1309.14 1209.53 L1309.73 1209.53 L1310.31 1209.53 L1310.9 1209.53 L1311.48 1209.53 L1312.07 1209.53 L1312.66 1209.53 L1313.24 1209.53 L1313.83 1209.53 L1314.42 1209.53 L1315 1209.53 L1315.59 1209.53 L1316.18 1209.53 L1316.76 1209.53 L1317.35 1209.53 L1317.93 1209.53 L1318.52 1209.53 L1319.11 1209.53 L1319.69 1209.53 L1320.28 1209.53 L1320.87 1209.53 L1321.45 1209.53 L1322.04 1209.53 L1322.63 1209.53 L1323.21 1209.53 L1323.8 1209.53 L1324.39 1209.53 L1324.97 1209.53 L1325.56 1209.53 L1326.14 1209.53 L1326.73 1209.53 L1327.32 1209.53 L1327.9 1209.53 L1328.49 1209.53 L1329.08 1209.53 L1329.66 1209.53 L1330.25 1209.53 L1330.84 1209.53 L1331.42 1209.53 L1332.01 1209.53 L1332.6 1209.53 L1333.18 1209.53 L1333.77 1209.53 L1334.35 1209.53 L1334.94 1209.53 L1335.53 1209.53 L1336.11 1209.53 L1336.7 1209.53 L1337.29 1209.53 L1337.87 1209.53 L1338.46 1209.53 L1339.05 1209.53 L1339.63 1209.53 L1340.22 1209.53 L1340.8 1209.53 L1341.39 1209.53 L1341.98 1209.53 L1342.56 1209.53 L1343.15 1209.53 L1343.74 1209.53 L1344.32 1209.53 L1344.91 1209.53 L1345.5 1209.53 L1346.08 1209.53 L1346.67 1209.53 L1347.26 1209.53 L1347.84 1209.53 L1348.43 1209.53 L1349.01 1209.53 L1349.6 1209.53 L1350.19 1209.53 L1350.77 1209.53 L1351.36 1209.53 L1351.95 1209.53 L1352.53 1209.53 L1353.12 1209.53 L1353.71 1209.53 L1354.29 1209.53 L1354.88 1209.53 L1355.47 1209.53 L1356.05 1209.53 L1356.64 1209.53 L1357.22 1209.53 L1357.81 1209.53 L1358.4 1209.53 L1358.98 1209.53 L1359.57 1209.53 L1360.16 1209.53 L1360.74 1209.53 L1361.33 1209.53 L1361.92 1209.53 L1362.5 1209.53 L1363.09 1209.53 L1363.68 1209.53 L1364.26 1209.53 L1364.85 1209.53 L1365.43 1209.53 L1366.02 1209.53 L1366.61 1209.53 L1367.19 1209.53 L1367.78 1209.53 L1368.37 1209.53 L1368.95 1209.53 L1369.54 1209.53 L1370.13 1209.53 L1370.71 1209.53 L1371.3 1209.53 L1371.88 1209.53 L1372.47 1209.53 L1373.06 1209.53 L1373.64 1209.53 L1374.23 1209.53 L1374.82 1209.53 L1375.4 1209.53 L1375.99 1209.53 L1376.58 1209.53 L1377.16 1209.53 L1377.75 1209.53 L1378.34 1209.53 L1378.92 1209.53 L1379.51 1209.53 L1380.09 1209.53 L1380.68 1209.53 L1381.27 1209.53 L1381.85 1209.53 L1382.44 1209.53 L1383.03 1209.53 L1383.61 1209.53 L1384.2 1209.53 L1384.79 1209.53 L1385.37 1209.53 L1385.96 1209.53 L1386.55 1209.53 L1387.13 1209.53 L1387.72 1209.53 L1388.3 1209.53 L1388.89 1209.53 L1389.48 1209.53 L1390.06 1209.53 L1390.65 1209.53 L1391.24 1209.53 L1391.82 1209.53 L1392.41 1209.53 L1393 1209.53 L1393.58 1209.53 L1394.17 1209.53 L1394.75 1209.53 L1395.34 1209.53 L1395.93 1209.53 L1396.51 1209.53 L1397.1 1209.53 L1397.69 1209.53 L1398.27 1209.53 L1398.86 1209.53 L1399.45 1209.53 L1400.03 1209.53 L1400.62 1209.53 L1401.21 1209.53 L1401.79 1209.53 L1402.38 1209.53 L1402.96 1209.53 L1403.55 1209.53 L1404.14 1209.53 L1404.72 1209.53 L1405.31 1209.53 L1405.9 1209.53 L1406.48 1209.53 L1407.07 1209.53 L1407.66 1209.53 L1408.24 1209.53 L1408.83 1209.53 L1409.42 1209.53 L1410 1209.53 L1410.59 1209.53 L1411.17 1209.53 L1411.76 1209.53 L1412.35 1209.53 L1412.93 1209.53 L1413.52 1209.53 L1414.11 1209.53 L1414.69 1209.53 L1415.28 1209.53 L1415.87 1209.53 L1416.45 1209.53 L1417.04 1209.53 L1417.63 1209.53 L1418.21 1209.53 L1418.8 1209.53 L1419.38 1209.53 L1419.97 1209.53 L1420.56 1209.53 L1421.14 1209.53 L1421.73 1209.53 L1422.32 1209.53 L1422.9 1209.53 L1423.49 1209.53 L1424.08 1209.53 L1424.66 1209.53 L1425.25 1209.53 L1425.83 1209.53 L1426.42 1209.53 L1427.01 1209.53 L1427.59 1209.53 L1428.18 1209.53 L1428.77 1209.53 L1429.35 1209.53 L1429.94 1209.53 L1430.53 1209.53 L1431.11 1209.53 L1431.7 1209.53 L1432.29 1209.53 L1432.87 1209.53 L1433.46 1209.53 L1434.04 1209.53 L1434.63 1209.53 L1435.22 1209.53 L1435.8 1209.53 L1436.39 1209.53 L1436.98 1209.53 L1437.56 1209.53 L1438.15 1209.53 L1438.74 1209.53 L1439.32 1209.53 L1439.91 1209.53 L1440.5 1209.53 L1441.08 1209.53 L1441.67 1209.53 L1442.25 1209.53 L1442.84 1209.53 L1443.43 1209.53 L1444.01 1209.53 L1444.6 1209.53 L1445.19 1209.53 L1445.77 1209.53 L1446.36 1209.53 L1446.95 1209.53 L1447.53 1209.53 L1448.12 1209.53 L1448.7 1209.53 L1449.29 1209.53 L1449.88 1209.53 L1450.46 1209.53 L1451.05 1209.53 L1451.64 1209.53 L1452.22 1209.53 L1452.81 1209.53 L1453.4 1209.53 L1453.98 1209.53 L1454.57 1209.53 L1455.16 1209.53 L1455.74 1209.53 L1456.33 1209.53 L1456.91 1209.53 L1457.5 1209.53 L1458.09 1209.53 L1458.67 1209.53 L1459.26 1209.53 L1459.85 1209.53 L1460.43 1209.53 L1461.02 1209.53 L1461.61 1209.53 L1462.19 1209.53 L1462.78 1209.53 L1463.37 1209.53 L1463.95 1209.53 L1464.54 1209.53 L1465.12 1209.53 L1465.71 1209.53 L1466.3 1209.53 L1466.88 1209.53 L1467.47 1209.53 L1468.06 1209.53 L1468.64 1209.53 L1469.23 1209.53 L1469.82 1209.53 L1470.4 1209.53 L1470.99 1209.53 L1471.57 1209.53 L1472.16 1209.53 L1472.75 1209.53 L1473.33 1209.53 L1473.92 1209.53 L1474.51 1209.53 L1475.09 1209.53 L1475.68 1209.53 L1476.27 1209.53 L1476.85 1209.53 L1477.44 1209.53 L1478.03 1209.53 L1478.61 1209.53 L1479.2 1209.53 L1479.78 1209.53 L1480.37 1209.53 L1480.96 1209.53 L1481.54 1209.53 L1482.13 1209.53 L1482.72 1209.53 L1483.3 1209.53 L1483.89 1209.53 L1484.48 1209.53 L1485.06 1209.53 L1485.65 1209.53 L1486.24 1209.53 L1486.82 1209.53 L1487.41 1209.53 L1487.99 1209.53 L1488.58 1209.53 L1489.17 1209.53 L1489.75 1209.53 L1490.34 1209.53 L1490.93 1209.53 L1491.51 1209.53 L1492.1 1209.53 L1492.69 1209.53 L1493.27 1209.53 L1493.86 1209.53 L1494.45 1209.53 L1495.03 1209.53 L1495.62 1209.53 L1496.2 1209.53 L1496.79 1209.53 L1497.38 1209.53 L1497.96 1209.53 L1498.55 1209.53 L1499.14 1209.53 L1499.72 1209.53 L1500.31 1209.53 L1500.9 1209.53 L1501.48 1209.53 L1502.07 1209.53 L1502.65 1209.53 L1503.24 1209.53 L1503.83 1209.53 L1504.41 1209.53 L1505 1209.53 L1505.59 1209.53 L1506.17 1209.53 L1506.76 1209.53 L1507.35 1209.53 L1507.93 1209.53 L1508.52 1209.53 L1509.11 1209.53 L1509.69 1209.53 L1510.28 1209.53 L1510.86 1209.53 L1511.45 1209.53 L1512.04 1209.53 L1512.62 1209.53 L1513.21 1209.53 L1513.8 1209.53 L1514.38 1209.53 L1514.97 1209.53 L1515.56 1209.53 L1516.14 1209.53 L1516.73 1209.53 L1517.32 1209.53 L1517.9 1209.53 L1518.49 1209.53 L1519.07 1209.53 L1519.66 1209.53 L1520.25 1209.53 L1520.83 1209.53 L1521.42 1209.53 L1522.01 1209.53 L1522.59 1209.53 L1523.18 1209.53 L1523.77 1209.53 L1524.35 1209.53 L1524.94 1209.53 L1525.52 1209.53 L1526.11 1209.53 L1526.7 1209.53 L1527.28 1209.53 L1527.87 1209.53 L1528.46 1209.53 L1529.04 1209.53 L1529.63 1209.53 L1530.22 1209.53 L1530.8 1209.53 L1531.39 1209.53 L1531.98 1209.53 L1532.56 1209.53 L1533.15 1209.53 L1533.73 1209.53 L1534.32 1209.53 L1534.91 1209.53 L1535.49 1209.53 L1536.08 1209.53 L1536.67 1209.53 L1537.25 1209.53 L1537.84 1209.53 L1538.43 1209.53 L1539.01 1209.53 L1539.6 1209.53 L1540.19 1209.53 L1540.77 1209.53 L1541.36 1209.53 L1541.94 1209.53 L1542.53 1209.53 L1543.12 1209.53 L1543.7 1209.53 L1544.29 1209.53 L1544.88 1209.53 L1545.46 1209.53 L1546.05 1209.53 L1546.64 1209.53 L1547.22 1209.53 L1547.81 1209.53 L1548.4 1209.53 L1548.98 1209.53 L1549.57 1209.53 L1550.15 1209.53 L1550.74 1209.53 L1551.33 1209.53 L1551.91 1209.53 L1552.5 1209.53 L1553.09 1209.53 L1553.67 1209.53 L1554.26 1209.53 L1554.85 1209.53 L1555.43 1209.53 L1556.02 1209.53 L1556.6 1209.53 L1557.19 1209.53 L1557.78 1209.53 L1558.36 1209.53 L1558.95 1209.53 L1559.54 1209.53 L1560.12 1209.53 L1560.71 1209.53 L1561.3 1209.53 L1561.88 1209.53 L1562.47 1209.53 L1563.06 1209.53 L1563.64 1209.53 L1564.23 1209.53 L1564.81 1209.53 L1565.4 1209.53 L1565.99 1209.53 L1566.57 1209.53 L1567.16 1209.53 L1567.75 1209.53 L1568.33 1209.53 L1568.92 1209.53 L1569.51 1209.53 L1570.09 1209.53 L1570.68 1209.53 L1571.27 1209.53 L1571.85 1209.53 L1572.44 1209.53 L1573.02 1209.53 L1573.61 1209.53 L1574.2 1209.53 L1574.78 1209.53 L1575.37 1209.53 L1575.96 1209.53 L1576.54 1209.53 L1577.13 1209.53 L1577.72 1209.53 L1578.3 1209.53 L1578.89 1209.53 L1579.47 1209.53 L1580.06 1209.53 L1580.65 1209.53 L1581.23 1209.53 L1581.82 1209.53 L1582.41 1209.53 L1582.99 1209.53 L1583.58 1209.53 L1584.17 1209.53 L1584.75 1209.53 L1585.34 1209.53 L1585.93 1209.53 L1586.51 1209.53 L1587.1 1209.53 L1587.68 1209.53 L1588.27 1209.53 L1588.86 1209.53 L1589.44 1209.53 L1590.03 1209.53 L1590.62 1209.53 L1591.2 1209.53 L1591.79 1209.53 L1592.38 1209.53 L1592.96 1209.53 L1593.55 1209.53 L1594.14 1209.53 L1594.72 1209.53 L1595.31 1209.53 L1595.89 1209.53 L1596.48 1209.53 L1597.07 1209.53 L1597.65 1209.53 L1598.24 1209.53 L1598.83 1209.53 L1599.41 1209.53 L1600 1209.53 L1600.59 1209.53 L1601.17 1209.53 L1601.76 1209.53 L1602.34 1209.53 L1602.93 1209.53 L1603.52 1209.53 L1604.1 1209.53 L1604.69 1209.53 L1605.28 1209.53 L1605.86 1209.53 L1606.45 1209.53 L1607.04 1209.53 L1607.62 1209.53 L1608.21 1209.53 L1608.8 1209.53 L1609.38 1209.53 L1609.97 1209.53 L1610.55 1209.53 L1611.14 1209.53 L1611.73 1209.53 L1612.31 1209.53 L1612.9 1209.53 L1613.49 1209.53 L1614.07 1209.53 L1614.66 1209.53 L1615.25 1209.53 L1615.83 1209.53 L1616.42 1209.53 L1617.01 1209.53 L1617.59 1209.53 L1618.18 1209.53 L1618.76 1209.53 L1619.35 1209.53 L1619.94 1209.53 L1620.52 1209.53 L1621.11 1209.53 L1621.7 1209.53 L1622.28 1209.53 L1622.87 1209.53 L1623.46 1209.53 L1624.04 1209.53 L1624.63 1209.53 L1625.22 1209.53 L1625.8 1209.53 L1626.39 1209.53 L1626.97 1209.53 L1627.56 1209.53 L1628.15 1209.53 L1628.73 1209.53 L1629.32 1209.53 L1629.91 1209.53 L1630.49 1209.53 L1631.08 1209.53 L1631.67 1209.53 L1632.25 1209.53 L1632.84 1209.53 L1633.42 1209.53 L1634.01 1209.53 L1634.6 1209.53 L1635.18 1209.53 L1635.77 1209.53 L1636.36 1209.53 L1636.94 1209.53 L1637.53 1209.53 L1638.12 1209.53 L1638.7 1209.53 L1639.29 1209.53 L1639.88 1209.53 L1640.46 1209.53 L1641.05 1209.53 L1641.63 1209.53 L1642.22 1209.53 L1642.81 1209.53 L1643.39 1209.53 L1643.98 1209.53 L1644.57 1209.53 L1645.15 1209.53 L1645.74 1209.53 L1646.33 1209.53 L1646.91 1209.53 L1647.5 1209.53 L1648.09 1209.53 L1648.67 1209.53 L1649.26 1209.53 L1649.84 1209.53 L1650.43 1209.53 L1651.02 1209.53 L1651.6 1209.53 L1652.19 1209.53 L1652.78 1209.53 L1653.36 1209.53 L1653.95 1209.53 L1654.54 1209.53 L1655.12 1209.53 L1655.71 1209.53 L1656.29 1209.53 L1656.88 1209.53 L1657.47 1209.53 L1658.05 1209.53 L1658.64 1209.53 L1659.23 1209.53 L1659.81 1209.53 L1660.4 1209.53 L1660.99 1209.53 L1661.57 1209.53 L1662.16 1209.53 L1662.75 1209.53 L1663.33 1209.53 L1663.92 1209.53 L1664.5 1209.53 L1665.09 1209.53 L1665.68 1209.53 L1666.26 1209.53 L1666.85 1209.53 L1667.44 1209.53 L1668.02 1209.53 L1668.61 1209.53 L1669.2 1209.53 L1669.78 1209.53 L1670.37 1209.53 L1670.96 1209.53 L1671.54 1209.53 L1672.13 1209.53 L1672.71 1209.53 L1673.3 1209.53 L1673.89 1209.53 L1674.47 1209.53 L1675.06 1209.53 L1675.65 1209.53 L1676.23 1209.53 L1676.82 1209.53 L1677.41 1209.53 L1677.99 1209.53 L1678.58 1209.53 L1679.17 1209.53 L1679.75 1209.53 L1680.34 1209.53 L1680.92 1209.53 L1681.51 1209.53 L1682.1 1209.53 L1682.68 1209.53 L1683.27 1209.53 L1683.86 1209.53 L1684.44 1209.53 L1685.03 1209.53 L1685.62 1209.53 L1686.2 1209.53 L1686.79 1209.53 L1687.37 1209.53 L1687.96 1209.53 L1688.55 1209.53 L1689.13 1209.53 L1689.72 1209.53 L1690.31 1209.53 L1690.89 1209.53 L1691.48 1209.53 L1692.07 1209.53 L1692.65 1209.53 L1693.24 1209.53 L1693.83 1209.53 L1694.41 1209.53 L1695 1209.53 L1695.58 1209.53 L1696.17 1209.53 L1696.76 1209.53 L1697.34 1209.53 L1697.93 1209.53 L1698.52 1209.53 L1699.1 1209.53 L1699.69 1209.53 L1700.28 1209.53 L1700.86 1209.53 L1701.45 1209.53 L1702.04 1209.53 L1702.62 1209.53 L1703.21 1209.53 L1703.79 1209.53 L1704.38 1209.53 L1704.97 1209.53 L1705.55 1209.53 L1706.14 1209.53 L1706.73 1209.53 L1707.31 1209.53 L1707.9 1209.53 L1708.49 1209.53 L1709.07 1209.53 L1709.66 1209.53 L1710.24 1209.53 L1710.83 1209.53 L1711.42 1209.53 L1712 1209.53 L1712.59 1209.53 L1713.18 1209.53 L1713.76 1209.53 L1714.35 1209.53 L1714.94 1209.53 L1715.52 1209.53 L1716.11 1209.53 L1716.7 1209.53 L1717.28 1209.53 L1717.87 1209.53 L1718.45 1209.53 L1719.04 1209.53 L1719.63 1209.53 L1720.21 1209.53 L1720.8 1209.53 L1721.39 1209.53 L1721.97 1209.53 L1722.56 1209.53 L1723.15 1209.53 L1723.73 1209.53 L1724.32 1209.53 L1724.91 1209.53 L1725.49 1209.53 L1726.08 1209.53 L1726.66 1209.53 L1727.25 1209.53 L1727.84 1209.53 L1728.42 1209.53 L1729.01 1209.53 L1729.6 1209.53 L1730.18 1209.53 L1730.77 1209.53 L1731.36 1209.53 L1731.94 1209.53 L1732.53 1209.53 L1733.11 1209.53 L1733.7 1209.53 L1734.29 1209.53 L1734.87 1209.53 L1735.46 1209.53 L1736.05 1209.53 L1736.63 1209.53 L1737.22 1209.53 L1737.81 1209.53 L1738.39 1209.53 L1738.98 1209.53 L1739.57 1209.53 L1740.15 1209.53 L1740.74 1209.53 L1741.32 1209.53 L1741.91 1209.53 L1742.5 1209.53 L1743.08 1209.53 L1743.67 1209.53 L1744.26 1209.53 L1744.84 1209.53 L1745.43 1209.53 L1746.02 1209.53 L1746.6 1209.53 L1747.19 1209.53 L1747.78 1209.53 L1748.36 1209.53 L1748.95 1209.53 L1749.53 1209.53 L1750.12 1209.53 L1750.71 1209.53 L1751.29 1209.53 L1751.88 1209.53 L1752.47 1209.53 L1753.05 1209.53 L1753.64 1209.53 L1754.23 1209.53 L1754.81 1209.53 L1755.4 1209.53 L1755.99 1209.53 L1756.57 1209.53 L1757.16 1209.53 L1757.74 1209.53 L1758.33 1209.53 L1758.92 1209.53 L1759.5 1209.53 L1760.09 1209.53 L1760.68 1209.53 L1761.26 1209.53 L1761.85 1209.53 L1762.44 1209.53 L1763.02 1209.53 L1763.61 1209.53 L1764.19 1209.53 L1764.78 1209.53 L1765.37 1209.53 L1765.95 1209.53 L1766.54 1209.53 L1767.13 1209.53 L1767.71 1209.53 L1768.3 1209.53 L1768.89 1209.53 L1769.47 1209.53 L1770.06 1209.53 L1770.65 1209.53 L1771.23 1209.53 L1771.82 1209.53 L1772.4 1209.53 L1772.99 1209.53 L1773.58 1209.53 L1774.16 1209.53 L1774.75 1209.53 L1775.34 1209.53 L1775.92 1209.53 L1776.51 1209.53 L1777.1 1209.53 L1777.68 1209.53 L1778.27 1209.53 L1778.86 1209.53 L1779.44 1209.53 L1780.03 1209.53 L1780.61 1209.53 L1781.2 1209.53 L1781.79 1209.53 L1782.37 1209.53 L1782.96 1209.53 L1783.55 1209.53 L1784.13 1209.53 L1784.72 1209.53 L1785.31 1209.53 L1785.89 1209.53 L1786.48 1209.53 L1787.06 1209.53 L1787.65 1209.53 L1788.24 1209.53 L1788.82 1209.53 L1789.41 1209.53 L1790 1209.53 L1790.58 1209.53 L1791.17 1209.53 L1791.76 1209.53 L1792.34 1209.53 L1792.93 1209.53 L1793.52 1209.53 L1794.1 1209.53 L1794.69 1209.53 L1795.27 1209.53 L1795.86 1209.53 L1796.45 1209.53 L1797.03 1209.53 L1797.62 1209.53 L1798.21 1209.53 L1798.79 1209.53 L1799.38 1209.53 L1799.97 1209.53 L1800.55 1209.53 L1801.14 1209.53 L1801.73 1209.53 L1802.31 1209.53 L1802.9 1209.53 L1803.48 1209.53 L1804.07 1209.53 L1804.66 1209.53 L1805.24 1209.53 L1805.83 1209.53 L1806.42 1209.53 L1807 1209.53 L1807.59 1209.53 L1808.18 1209.53 L1808.76 1209.53 L1809.35 1209.53 L1809.94 1209.53 L1810.52 1209.53 L1811.11 1209.53 L1811.69 1209.53 L1812.28 1209.53 L1812.87 1209.53 L1813.45 1209.53 L1814.04 1209.53 L1814.63 1209.53 L1815.21 1209.53 L1815.8 1209.53 L1816.39 1209.53 L1816.97 1209.53 L1817.56 1209.53 L1818.14 1209.53 L1818.73 1209.53 L1819.32 1209.53 L1819.9 1209.53 L1820.49 1209.53 L1821.08 1209.53 L1821.66 1209.53 L1822.25 1209.53 L1822.84 1209.53 L1823.42 1209.53 L1824.01 1209.53 L1824.6 1209.53 L1825.18 1209.53 L1825.77 1209.53 L1826.35 1209.53 L1826.94 1209.53 L1827.53 1209.53 L1828.11 1209.53 L1828.7 1209.53 L1829.29 1209.53 L1829.87 1209.53 L1830.46 1209.53 L1831.05 1209.53 L1831.63 1209.53 L1832.22 1209.53 L1832.81 1209.53 L1833.39 1209.53 L1833.98 1209.53 L1834.56 1209.53 L1835.15 1209.53 L1835.74 1209.53 L1836.32 1209.53 L1836.91 1209.53 L1837.5 1209.53 L1838.08 1209.53 L1838.67 1209.53 L1839.26 1209.53 L1839.84 1209.53 L1840.43 1209.53 L1841.01 1209.53 L1841.6 1209.53 L1842.19 1209.53 L1842.77 1209.53 L1843.36 1209.53 L1843.95 1209.53 L1844.53 1209.53 L1845.12 1209.53 L1845.71 1209.53 L1846.29 1209.53 L1846.88 1209.53 L1847.47 1209.53 L1848.05 1209.53 L1848.64 1209.53 L1849.22 1209.53 L1849.81 1209.53 L1850.4 1209.53 L1850.98 1209.53 L1851.57 1209.53 L1852.16 1209.53 L1852.74 1209.53 L1853.33 1209.53 L1853.92 1209.53 L1854.5 1209.53 L1855.09 1209.53 L1855.68 1209.53 L1856.26 1209.53 L1856.85 1209.53 L1857.43 1209.53 L1858.02 1209.53 L1858.61 1209.53 L1859.19 1209.53 L1859.78 1209.53 L1860.37 1209.53 L1860.95 1209.53 L1861.54 1209.53 L1862.13 1209.53 L1862.71 1209.53 L1863.3 1209.53 L1863.88 1209.53 L1864.47 1209.53 L1865.06 1209.53 L1865.64 1209.53 L1866.23 1209.53 L1866.82 1209.53 L1867.4 1209.53 L1867.99 1209.53 L1868.58 1209.53 L1869.16 1209.53 L1869.75 1209.53 L1870.34 1209.53 L1870.92 1209.53 L1871.51 1209.53 L1872.09 1209.53 L1872.68 1209.53 L1873.27 1209.53 L1873.85 1209.53 L1874.44 1209.53 L1875.03 1209.53 L1875.61 1209.53 L1876.2 1209.53 L1876.79 1209.53 L1877.37 1209.53 L1877.96 1209.53 L1878.55 1209.53 L1879.13 1209.53 L1879.72 1209.53 L1880.3 1209.53 L1880.89 1209.53 L1881.48 1209.53 L1882.06 1209.53 L1882.65 1209.53 L1883.24 1209.53 L1883.82 1209.53 L1884.41 1209.53 L1885 1209.53 L1885.58 1209.53 L1886.17 1209.53 L1886.76 1209.53 L1887.34 1209.53 L1887.93 1209.53 L1888.51 1209.53 L1889.1 1209.53 L1889.69 1209.53 L1890.27 1209.53 L1890.86 1209.53 L1891.45 1209.53 L1892.03 1209.53 L1892.62 1209.53 L1893.21 1209.53 L1893.79 1209.53 L1894.38 1209.53 L1894.96 1209.53 L1895.55 1209.53 L1896.14 1209.53 L1896.72 1209.53 L1897.31 1209.53 L1897.9 1209.53 L1898.48 1209.53 L1899.07 1209.53 L1899.66 1209.53 L1900.24 1209.53 L1900.83 1209.53 L1901.42 1209.53 L1902 1209.53 L1902.59 1209.53 L1903.17 1209.53 L1903.76 1209.53 L1904.35 1209.53 L1904.93 1209.53 L1905.52 1209.53 L1906.11 1209.53 L1906.69 1209.53 L1907.28 1209.53 L1907.87 1209.53 L1908.45 1209.53 L1909.04 1209.53 L1909.63 1209.53 L1910.21 1209.53 L1910.8 1209.53 L1911.38 1209.53 L1911.97 1209.53 L1912.56 1209.53 L1913.14 1209.53 L1913.73 1209.53 L1914.32 1209.53 L1914.9 1209.53 L1915.49 1209.53 L1916.08 1209.53 L1916.66 1209.53 L1917.25 1209.53 L1917.83 1209.53 L1918.42 1209.53 L1919.01 1209.53 L1919.59 1209.53 L1920.18 1209.53 L1920.77 1209.53 L1921.35 1209.53 L1921.94 1209.53 L1922.53 1209.53 L1923.11 1209.53 L1923.7 1209.53 L1924.29 1209.53 L1924.87 1209.53 L1925.46 1209.53 L1926.04 1209.53 L1926.63 1209.53 L1927.22 1209.53 L1927.8 1209.53 L1928.39 1209.53 L1928.98 1209.53 L1929.56 1209.53 L1930.15 1209.53 L1930.74 1209.53 L1931.32 1209.53 L1931.91 1209.53 L1932.5 1209.53 L1933.08 1209.53 L1933.67 1209.53 L1934.25 1209.53 L1934.84 1209.53 L1935.43 1209.53 L1936.01 1209.53 L1936.6 1209.53 L1937.19 1209.53 L1937.77 1209.53 L1938.36 1209.53 L1938.95 1209.53 L1939.53 1209.53 L1940.12 1209.53 L1940.71 1209.53 L1941.29 1209.53 L1941.88 1209.53 L1942.46 1209.53 L1943.05 1209.53 L1943.64 1209.53 L1944.22 1209.53 L1944.81 1209.53 L1945.4 1209.53 L1945.98 1209.53 L1946.57 1209.53 L1947.16 1209.53 L1947.74 1209.53 L1948.33 1209.53 L1948.91 1209.53 L1949.5 1209.53 L1950.09 1209.53 L1950.67 1209.53 L1951.26 1209.53 L1951.85 1209.53 L1952.43 1209.53 L1953.02 1209.53 L1953.61 1209.53 L1954.19 1209.53 L1954.78 1209.53 L1955.37 1209.53 L1955.95 1209.53 L1956.54 1209.53 L1957.12 1209.53 L1957.71 1209.53 L1958.3 1209.53 L1958.88 1209.53 L1959.47 1209.53 L1960.06 1209.53 L1960.64 1209.53 L1961.23 1209.53 L1961.82 1209.53 L1962.4 1209.53 L1962.99 1209.53 L1963.58 1209.53 L1964.16 1209.53 L1964.75 1209.53 L1965.33 1209.53 L1965.92 1209.53 L1966.51 1209.53 L1967.09 1209.53 L1967.68 1209.53 L1968.27 1209.53 L1968.85 1209.53 L1969.44 1209.53 L1970.03 1209.53 L1970.61 1209.53 L1971.2 1209.53 L1971.78 1209.53 L1972.37 1209.53 L1972.96 1209.53 L1973.54 1209.53 L1974.13 1209.53 L1974.72 1209.53 L1975.3 1209.53 L1975.89 1209.53 L1976.48 1209.53 L1977.06 1209.53 L1977.65 1209.53 L1978.24 1209.53 L1978.82 1209.53 L1979.41 1209.53 L1979.99 1209.53 L1980.58 1209.53 L1981.17 1209.53 L1981.75 1209.53 L1982.34 1209.53 L1982.93 1209.53 L1983.51 1209.53 L1984.1 1209.53 L1984.69 1209.53 L1985.27 1209.53 L1985.86 1209.53 L1986.45 1209.53 L1987.03 1209.53 L1987.62 1209.53 L1988.2 1209.53 L1988.79 1209.53 L1989.38 1209.53 L1989.96 1209.53 L1990.55 1209.53 L1991.14 1209.53 L1991.72 1209.53 L1992.31 1209.53 L1992.9 1209.53 L1993.48 1209.53 L1994.07 1209.53 L1994.65 1209.53 L1995.24 1209.53 L1995.83 1209.53 L1996.41 1209.53 L1997 1209.53 L1997.59 1209.53 L1998.17 1209.53 L1998.76 1209.53 L1999.35 1209.53 L1999.93 1209.53 L2000.52 1209.53 L2001.11 1209.53 L2001.69 1209.53 L2002.28 1209.53 L2002.86 1209.53 L2003.45 1209.53 L2004.04 1209.53 L2004.62 1209.53 L2005.21 1209.53 L2005.8 1209.53 L2006.38 1209.53 L2006.97 1209.53 L2007.56 1209.53 L2008.14 1209.53 L2008.73 1209.53 L2009.32 1209.53 L2009.9 1209.53 L2010.49 1209.53 L2011.07 1209.53 L2011.66 1209.53 L2012.25 1209.53 L2012.83 1209.53 L2013.42 1209.53 L2014.01 1209.53 L2014.59 1209.53 L2015.18 1209.53 L2015.77 1209.53 L2016.35 1209.53 L2016.94 1209.53 L2017.53 1209.53 L2018.11 1209.53 L2018.7 1209.53 L2019.28 1209.53 L2019.87 1209.53 L2020.46 1209.53 L2021.04 1209.53 L2021.63 1209.53 L2022.22 1209.53 L2022.8 1209.53 L2023.39 1209.53 L2023.98 1209.53 L2024.56 1209.53 L2025.15 1209.53 L2025.73 1209.53 L2026.32 1209.53 L2026.91 1209.53 L2027.49 1209.53 L2028.08 1209.53 L2028.67 1209.53 L2029.25 1209.53 L2029.84 1209.53 L2030.43 1209.53 L2031.01 1209.53 L2031.6 1209.53 L2032.19 1209.53 L2032.77 1209.53 L2033.36 1209.53 L2033.94 1209.53 L2034.53 1209.53 L2035.12 1209.53 L2035.7 1209.53 L2036.29 1209.53 L2036.88 1209.53 L2037.46 1209.53 L2038.05 1209.53 L2038.64 1209.53 L2039.22 1209.53 L2039.81 1209.53 L2040.4 1209.53 L2040.98 1209.53 L2041.57 1209.53 L2042.15 1209.53 L2042.74 1209.53 L2043.33 1209.53 L2043.91 1209.53 L2044.5 1209.53 L2045.09 1209.53 L2045.67 1209.53 L2046.26 1209.53 L2046.85 1209.53 L2047.43 1209.53 L2048.02 1209.53 L2048.6 1209.53 L2049.19 1209.53 L2049.78 1209.53 L2050.36 1209.53 L2050.95 1209.53 L2051.54 1209.53 L2052.12 1209.53 L2052.71 1209.53 L2053.3 1209.53 L2053.88 1209.53 L2054.47 1209.53 L2055.06 1209.53 L2055.64 1209.53 L2056.23 1209.53 L2056.81 1209.53 L2057.4 1209.53 L2057.99 1209.53 L2058.57 1209.53 L2059.16 1209.53 L2059.75 1209.53 L2060.33 1209.53 L2060.92 1209.53 L2061.51 1209.53 L2062.09 1209.53 L2062.68 1209.53 L2063.27 1209.53 L2063.85 1209.53 L2064.44 1209.53 L2065.02 1209.53 L2065.61 1209.53 L2066.2 1209.53 L2066.78 1209.53 L2067.37 1209.53 L2067.96 1209.53 L2068.54 1209.53 L2069.13 1209.53 L2069.72 1209.53 L2070.3 1209.53 L2070.89 1209.53 L2071.48 1209.53 L2072.06 1209.53 L2072.65 1209.53 L2073.23 1209.53 L2073.82 1209.53 L2074.41 1209.53 L2074.99 1209.53 L2075.58 1209.53 L2076.17 1209.53 L2076.75 1209.53 L2077.34 1209.53 L2077.93 1209.53 L2078.51 1209.53 L2079.1 1209.53 L2079.68 1209.53 L2080.27 1209.53 L2080.86 1209.53 L2081.44 1209.53 L2082.03 1209.53 L2082.62 1209.53 L2083.2 1209.53 L2083.79 1209.53 L2084.38 1209.53 L2084.96 1209.53 L2085.55 1209.53 L2086.14 1209.53 L2086.72 1209.53 L2087.31 1209.53 L2087.89 1209.53 L2088.48 1209.53 L2089.07 1209.53 L2089.65 1209.53 L2090.24 1209.53 L2090.83 1209.53 L2091.41 1209.53 L2092 1209.53 L2092.59 1209.53 L2093.17 1209.53 L2093.76 1209.53 L2094.35 1209.53 L2094.93 1209.53 L2095.52 1209.53 L2096.1 1209.53 L2096.69 1209.53 L2097.28 1209.53 L2097.86 1209.53 L2098.45 1209.53 L2099.04 1209.53 L2099.62 1209.53 L2100.21 1209.53 L2100.8 1209.53 L2101.38 1209.53 L2101.97 1209.53 L2102.55 1209.53 L2103.14 1209.53 L2103.73 1209.53 L2104.31 1209.53 L2104.9 1209.53 L2105.49 1209.53 L2106.07 1209.53 L2106.66 1209.53 L2107.25 1209.53 L2107.83 1209.53 L2108.42 1209.53 L2109.01 1209.53 L2109.59 1209.53 L2110.18 1209.53 L2110.76 1209.53 L2111.35 1209.53 L2111.94 1209.53 L2112.52 1209.53 L2113.11 1209.53 L2113.7 1209.53 L2114.28 1209.53 L2114.87 1209.53 L2115.46 1209.53 L2116.04 1209.53 L2116.63 1209.53 L2117.22 1209.53 L2117.8 1209.53 L2118.39 1209.53 L2118.97 1209.53 L2119.56 1209.53 L2120.15 1209.53 L2120.73 1209.53 L2121.32 1209.53 L2121.91 1209.53 L2122.49 1209.53 L2123.08 1209.53 L2123.67 1209.53 L2124.25 1209.53 L2124.84 1209.53 L2125.42 1209.53 L2126.01 1209.53 L2126.6 1209.53 L2127.18 1209.53 L2127.77 1209.53 L2128.36 1209.53 L2128.94 1209.53 L2129.53 1209.53 L2130.12 1209.53 L2130.7 1209.53 L2131.29 1209.53 L2131.88 1209.53 L2132.46 1209.53 L2133.05 1209.53 L2133.63 1209.53 L2134.22 1209.53 L2134.81 1209.53 L2135.39 1209.53 L2135.98 1209.53 L2136.57 1209.53 L2137.15 1209.53 L2137.74 1209.53 L2138.33 1209.53 L2138.91 1209.53 L2139.5 1209.53 L2140.09 1209.53 L2140.67 1209.53 L2141.26 1209.53 L2141.84 1209.53 L2142.43 1209.53 L2143.02 1209.53 L2143.6 1209.53 L2144.19 1209.53 L2144.78 1209.53 L2145.36 1209.53 L2145.95 1209.53 L2146.54 1209.53 L2147.12 1209.53 L2147.71 1209.53 L2148.3 1209.53 L2148.88 1209.53 L2149.47 1209.53 L2150.05 1209.53 L2150.64 1209.53 L2151.23 1209.53 L2151.81 1209.53 L2152.4 1209.53 L2152.99 1209.53 L2153.57 1209.53 L2154.16 1209.53 L2154.75 1209.53 L2155.33 1209.53 L2155.92 1209.53 L2156.5 1209.53 L2157.09 1209.53 L2157.68 1209.53 L2158.26 1209.53 L2158.26 1208.74 L2157.68 1208.74 L2157.09 1208.74 L2156.5 1208.74 L2155.92 1208.74 L2155.33 1208.74 L2154.75 1208.74 L2154.16 1208.74 L2153.57 1208.74 L2152.99 1208.74 L2152.4 1208.74 L2151.81 1208.74 L2151.23 1208.74 L2150.64 1208.74 L2150.05 1208.74 L2149.47 1208.74 L2148.88 1208.74 L2148.3 1208.74 L2147.71 1208.74 L2147.12 1208.74 L2146.54 1208.74 L2145.95 1208.74 L2145.36 1208.74 L2144.78 1208.74 L2144.19 1208.74 L2143.6 1208.74 L2143.02 1208.74 L2142.43 1208.74 L2141.84 1208.74 L2141.26 1208.74 L2140.67 1208.74 L2140.09 1208.74 L2139.5 1208.74 L2138.91 1208.74 L2138.33 1208.74 L2137.74 1208.74 L2137.15 1208.74 L2136.57 1208.74 L2135.98 1208.74 L2135.39 1208.74 L2134.81 1208.74 L2134.22 1208.74 L2133.63 1208.74 L2133.05 1208.74 L2132.46 1208.74 L2131.88 1208.74 L2131.29 1208.74 L2130.7 1208.74 L2130.12 1208.74 L2129.53 1208.74 L2128.94 1208.74 L2128.36 1208.74 L2127.77 1208.74 L2127.18 1208.74 L2126.6 1208.74 L2126.01 1208.74 L2125.42 1208.74 L2124.84 1208.74 L2124.25 1208.74 L2123.67 1208.74 L2123.08 1208.74 L2122.49 1208.74 L2121.91 1208.74 L2121.32 1208.74 L2120.73 1208.74 L2120.15 1208.74 L2119.56 1208.74 L2118.97 1208.74 L2118.39 1208.74 L2117.8 1208.74 L2117.22 1208.74 L2116.63 1208.74 L2116.04 1208.74 L2115.46 1208.74 L2114.87 1208.74 L2114.28 1208.74 L2113.7 1208.74 L2113.11 1208.74 L2112.52 1208.74 L2111.94 1208.74 L2111.35 1208.74 L2110.76 1208.74 L2110.18 1208.74 L2109.59 1208.74 L2109.01 1208.74 L2108.42 1208.74 L2107.83 1208.74 L2107.25 1208.74 L2106.66 1208.74 L2106.07 1208.74 L2105.49 1208.74 L2104.9 1208.74 L2104.31 1208.74 L2103.73 1208.74 L2103.14 1208.74 L2102.55 1208.74 L2101.97 1208.74 L2101.38 1208.74 L2100.8 1208.74 L2100.21 1208.74 L2099.62 1208.74 L2099.04 1208.74 L2098.45 1208.74 L2097.86 1208.74 L2097.28 1208.74 L2096.69 1208.74 L2096.1 1208.74 L2095.52 1208.74 L2094.93 1208.74 L2094.35 1208.74 L2093.76 1208.74 L2093.17 1208.74 L2092.59 1208.74 L2092 1208.74 L2091.41 1208.74 L2090.83 1208.74 L2090.24 1208.74 L2089.65 1208.74 L2089.07 1208.74 L2088.48 1208.74 L2087.89 1208.74 L2087.31 1208.74 L2086.72 1208.74 L2086.14 1208.74 L2085.55 1208.74 L2084.96 1208.74 L2084.38 1208.74 L2083.79 1208.74 L2083.2 1208.74 L2082.62 1208.74 L2082.03 1208.74 L2081.44 1208.74 L2080.86 1208.74 L2080.27 1208.74 L2079.68 1208.74 L2079.1 1208.74 L2078.51 1208.74 L2077.93 1208.74 L2077.34 1208.74 L2076.75 1208.74 L2076.17 1208.74 L2075.58 1208.74 L2074.99 1208.74 L2074.41 1208.74 L2073.82 1208.74 L2073.23 1208.74 L2072.65 1208.74 L2072.06 1208.74 L2071.48 1208.74 L2070.89 1208.74 L2070.3 1208.74 L2069.72 1208.74 L2069.13 1208.74 L2068.54 1208.74 L2067.96 1208.74 L2067.37 1208.74 L2066.78 1208.74 L2066.2 1208.74 L2065.61 1208.74 L2065.02 1208.74 L2064.44 1208.74 L2063.85 1208.74 L2063.27 1208.74 L2062.68 1208.74 L2062.09 1208.74 L2061.51 1208.74 L2060.92 1208.74 L2060.33 1208.74 L2059.75 1208.74 L2059.16 1208.74 L2058.57 1208.74 L2057.99 1208.74 L2057.4 1208.74 L2056.81 1208.74 L2056.23 1208.74 L2055.64 1208.74 L2055.06 1208.74 L2054.47 1208.74 L2053.88 1208.74 L2053.3 1208.74 L2052.71 1208.74 L2052.12 1208.74 L2051.54 1208.74 L2050.95 1208.74 L2050.36 1208.74 L2049.78 1208.74 L2049.19 1208.74 L2048.6 1208.74 L2048.02 1208.74 L2047.43 1208.74 L2046.85 1208.74 L2046.26 1208.74 L2045.67 1208.74 L2045.09 1208.74 L2044.5 1208.74 L2043.91 1208.74 L2043.33 1208.74 L2042.74 1208.74 L2042.15 1208.74 L2041.57 1208.74 L2040.98 1208.74 L2040.4 1208.74 L2039.81 1208.74 L2039.22 1208.74 L2038.64 1208.74 L2038.05 1208.74 L2037.46 1208.74 L2036.88 1208.74 L2036.29 1208.74 L2035.7 1208.74 L2035.12 1208.74 L2034.53 1208.74 L2033.94 1208.74 L2033.36 1208.74 L2032.77 1208.74 L2032.19 1208.74 L2031.6 1208.74 L2031.01 1208.74 L2030.43 1208.74 L2029.84 1208.74 L2029.25 1208.74 L2028.67 1208.74 L2028.08 1208.74 L2027.49 1208.74 L2026.91 1208.74 L2026.32 1208.74 L2025.73 1208.74 L2025.15 1208.74 L2024.56 1208.74 L2023.98 1208.74 L2023.39 1208.74 L2022.8 1208.74 L2022.22 1208.74 L2021.63 1208.74 L2021.04 1208.74 L2020.46 1208.74 L2019.87 1208.74 L2019.28 1208.74 L2018.7 1208.74 L2018.11 1208.74 L2017.53 1208.74 L2016.94 1208.74 L2016.35 1208.74 L2015.77 1208.74 L2015.18 1208.74 L2014.59 1208.74 L2014.01 1208.74 L2013.42 1208.74 L2012.83 1208.74 L2012.25 1208.74 L2011.66 1208.74 L2011.07 1208.74 L2010.49 1208.74 L2009.9 1208.74 L2009.32 1208.74 L2008.73 1208.74 L2008.14 1208.74 L2007.56 1208.74 L2006.97 1208.74 L2006.38 1208.74 L2005.8 1208.74 L2005.21 1208.74 L2004.62 1208.74 L2004.04 1208.74 L2003.45 1208.74 L2002.86 1208.74 L2002.28 1208.74 L2001.69 1208.74 L2001.11 1208.74 L2000.52 1208.74 L1999.93 1208.74 L1999.35 1208.74 L1998.76 1208.74 L1998.17 1208.74 L1997.59 1208.74 L1997 1208.74 L1996.41 1208.74 L1995.83 1208.74 L1995.24 1208.74 L1994.65 1208.74 L1994.07 1208.74 L1993.48 1208.74 L1992.9 1208.74 L1992.31 1208.74 L1991.72 1208.74 L1991.14 1208.74 L1990.55 1208.74 L1989.96 1208.74 L1989.38 1208.74 L1988.79 1208.74 L1988.2 1208.74 L1987.62 1208.74 L1987.03 1208.74 L1986.45 1208.74 L1985.86 1208.74 L1985.27 1208.74 L1984.69 1208.74 L1984.1 1208.74 L1983.51 1208.74 L1982.93 1208.74 L1982.34 1208.74 L1981.75 1208.74 L1981.17 1208.74 L1980.58 1208.74 L1979.99 1208.74 L1979.41 1208.74 L1978.82 1208.74 L1978.24 1208.74 L1977.65 1208.74 L1977.06 1208.74 L1976.48 1208.74 L1975.89 1208.74 L1975.3 1208.74 L1974.72 1208.74 L1974.13 1208.74 L1973.54 1208.74 L1972.96 1208.74 L1972.37 1208.74 L1971.78 1208.74 L1971.2 1208.74 L1970.61 1208.74 L1970.03 1208.74 L1969.44 1208.74 L1968.85 1208.74 L1968.27 1208.74 L1967.68 1208.74 L1967.09 1208.74 L1966.51 1208.74 L1965.92 1208.74 L1965.33 1208.74 L1964.75 1208.74 L1964.16 1208.74 L1963.58 1208.74 L1962.99 1208.74 L1962.4 1208.74 L1961.82 1208.74 L1961.23 1208.74 L1960.64 1208.74 L1960.06 1208.74 L1959.47 1208.74 L1958.88 1208.74 L1958.3 1208.74 L1957.71 1208.74 L1957.12 1208.74 L1956.54 1208.74 L1955.95 1208.74 L1955.37 1208.74 L1954.78 1208.74 L1954.19 1208.74 L1953.61 1208.74 L1953.02 1208.74 L1952.43 1208.74 L1951.85 1208.74 L1951.26 1208.74 L1950.67 1208.74 L1950.09 1208.74 L1949.5 1208.74 L1948.91 1208.74 L1948.33 1208.74 L1947.74 1208.74 L1947.16 1208.74 L1946.57 1208.74 L1945.98 1208.74 L1945.4 1208.74 L1944.81 1208.74 L1944.22 1208.74 L1943.64 1208.74 L1943.05 1208.74 L1942.46 1208.74 L1941.88 1208.74 L1941.29 1208.74 L1940.71 1208.74 L1940.12 1208.74 L1939.53 1208.74 L1938.95 1208.74 L1938.36 1208.74 L1937.77 1208.74 L1937.19 1208.74 L1936.6 1208.74 L1936.01 1208.74 L1935.43 1208.74 L1934.84 1208.74 L1934.25 1208.74 L1933.67 1208.74 L1933.08 1208.74 L1932.5 1208.74 L1931.91 1208.74 L1931.32 1208.74 L1930.74 1208.74 L1930.15 1208.74 L1929.56 1208.74 L1928.98 1208.74 L1928.39 1208.74 L1927.8 1208.74 L1927.22 1208.74 L1926.63 1208.74 L1926.04 1208.74 L1925.46 1208.74 L1924.87 1208.74 L1924.29 1208.74 L1923.7 1208.74 L1923.11 1208.74 L1922.53 1208.74 L1921.94 1208.74 L1921.35 1208.74 L1920.77 1208.74 L1920.18 1208.74 L1919.59 1208.74 L1919.01 1208.74 L1918.42 1208.74 L1917.83 1208.74 L1917.25 1208.74 L1916.66 1208.74 L1916.08 1208.74 L1915.49 1208.74 L1914.9 1208.74 L1914.32 1208.74 L1913.73 1208.74 L1913.14 1208.74 L1912.56 1208.74 L1911.97 1208.74 L1911.38 1208.74 L1910.8 1208.74 L1910.21 1208.74 L1909.63 1208.74 L1909.04 1208.74 L1908.45 1208.74 L1907.87 1208.74 L1907.28 1208.74 L1906.69 1208.74 L1906.11 1208.74 L1905.52 1208.74 L1904.93 1208.74 L1904.35 1208.74 L1903.76 1208.74 L1903.17 1208.74 L1902.59 1208.74 L1902 1208.74 L1901.42 1208.74 L1900.83 1208.74 L1900.24 1208.74 L1899.66 1208.74 L1899.07 1208.74 L1898.48 1208.74 L1897.9 1208.74 L1897.31 1208.74 L1896.72 1208.74 L1896.14 1208.74 L1895.55 1208.74 L1894.96 1208.74 L1894.38 1208.74 L1893.79 1208.74 L1893.21 1208.74 L1892.62 1208.74 L1892.03 1208.74 L1891.45 1208.74 L1890.86 1208.74 L1890.27 1208.74 L1889.69 1208.74 L1889.1 1208.74 L1888.51 1208.74 L1887.93 1208.74 L1887.34 1208.74 L1886.76 1208.74 L1886.17 1208.74 L1885.58 1208.74 L1885 1208.74 L1884.41 1208.74 L1883.82 1208.74 L1883.24 1208.74 L1882.65 1208.74 L1882.06 1208.74 L1881.48 1208.74 L1880.89 1208.74 L1880.3 1208.74 L1879.72 1208.74 L1879.13 1208.74 L1878.55 1208.74 L1877.96 1208.74 L1877.37 1208.74 L1876.79 1208.74 L1876.2 1208.74 L1875.61 1208.74 L1875.03 1208.74 L1874.44 1208.74 L1873.85 1208.74 L1873.27 1208.74 L1872.68 1208.74 L1872.09 1208.74 L1871.51 1208.74 L1870.92 1208.74 L1870.34 1208.74 L1869.75 1208.74 L1869.16 1208.74 L1868.58 1208.74 L1867.99 1208.74 L1867.4 1208.74 L1866.82 1208.74 L1866.23 1208.74 L1865.64 1208.74 L1865.06 1208.74 L1864.47 1208.74 L1863.88 1208.74 L1863.3 1208.74 L1862.71 1208.74 L1862.13 1208.74 L1861.54 1208.74 L1860.95 1208.74 L1860.37 1208.74 L1859.78 1208.74 L1859.19 1208.74 L1858.61 1208.74 L1858.02 1208.74 L1857.43 1208.74 L1856.85 1208.74 L1856.26 1208.74 L1855.68 1208.74 L1855.09 1208.74 L1854.5 1208.74 L1853.92 1208.74 L1853.33 1208.74 L1852.74 1208.74 L1852.16 1208.74 L1851.57 1208.74 L1850.98 1208.74 L1850.4 1208.74 L1849.81 1208.74 L1849.22 1208.74 L1848.64 1208.74 L1848.05 1208.74 L1847.47 1208.74 L1846.88 1208.74 L1846.29 1208.74 L1845.71 1208.74 L1845.12 1208.74 L1844.53 1208.74 L1843.95 1208.74 L1843.36 1208.74 L1842.77 1208.74 L1842.19 1208.74 L1841.6 1208.74 L1841.01 1208.74 L1840.43 1208.74 L1839.84 1208.74 L1839.26 1208.74 L1838.67 1208.74 L1838.08 1208.74 L1837.5 1208.74 L1836.91 1208.74 L1836.32 1208.74 L1835.74 1208.74 L1835.15 1208.74 L1834.56 1208.74 L1833.98 1208.74 L1833.39 1208.74 L1832.81 1208.74 L1832.22 1208.74 L1831.63 1208.74 L1831.05 1208.74 L1830.46 1208.74 L1829.87 1208.74 L1829.29 1208.74 L1828.7 1208.74 L1828.11 1208.74 L1827.53 1208.74 L1826.94 1208.74 L1826.35 1208.74 L1825.77 1208.74 L1825.18 1208.74 L1824.6 1208.74 L1824.01 1208.74 L1823.42 1208.74 L1822.84 1208.74 L1822.25 1208.74 L1821.66 1208.74 L1821.08 1208.74 L1820.49 1208.74 L1819.9 1208.74 L1819.32 1208.74 L1818.73 1208.74 L1818.14 1208.74 L1817.56 1208.74 L1816.97 1208.74 L1816.39 1208.74 L1815.8 1208.74 L1815.21 1208.74 L1814.63 1208.74 L1814.04 1208.74 L1813.45 1208.74 L1812.87 1208.74 L1812.28 1208.74 L1811.69 1208.74 L1811.11 1208.74 L1810.52 1208.74 L1809.94 1208.74 L1809.35 1208.74 L1808.76 1208.74 L1808.18 1208.74 L1807.59 1208.74 L1807 1208.74 L1806.42 1208.74 L1805.83 1208.74 L1805.24 1208.74 L1804.66 1208.74 L1804.07 1208.74 L1803.48 1208.74 L1802.9 1208.74 L1802.31 1208.74 L1801.73 1208.74 L1801.14 1208.74 L1800.55 1208.74 L1799.97 1208.74 L1799.38 1208.74 L1798.79 1208.74 L1798.21 1208.74 L1797.62 1208.74 L1797.03 1208.74 L1796.45 1208.74 L1795.86 1208.74 L1795.27 1208.74 L1794.69 1208.74 L1794.1 1208.74 L1793.52 1208.74 L1792.93 1208.74 L1792.34 1208.74 L1791.76 1208.74 L1791.17 1208.74 L1790.58 1208.74 L1790 1208.74 L1789.41 1208.74 L1788.82 1208.74 L1788.24 1208.74 L1787.65 1208.74 L1787.06 1208.74 L1786.48 1208.74 L1785.89 1208.74 L1785.31 1208.74 L1784.72 1208.74 L1784.13 1208.74 L1783.55 1208.74 L1782.96 1208.74 L1782.37 1208.74 L1781.79 1208.74 L1781.2 1208.74 L1780.61 1208.74 L1780.03 1208.74 L1779.44 1208.74 L1778.86 1208.74 L1778.27 1208.74 L1777.68 1208.74 L1777.1 1208.74 L1776.51 1208.74 L1775.92 1208.74 L1775.34 1208.74 L1774.75 1208.74 L1774.16 1208.74 L1773.58 1208.74 L1772.99 1208.74 L1772.4 1208.74 L1771.82 1208.74 L1771.23 1208.74 L1770.65 1208.74 L1770.06 1208.74 L1769.47 1208.74 L1768.89 1208.74 L1768.3 1208.74 L1767.71 1208.74 L1767.13 1208.74 L1766.54 1208.74 L1765.95 1208.74 L1765.37 1208.74 L1764.78 1208.74 L1764.19 1208.74 L1763.61 1208.74 L1763.02 1208.74 L1762.44 1208.74 L1761.85 1208.74 L1761.26 1208.74 L1760.68 1208.74 L1760.09 1208.74 L1759.5 1208.74 L1758.92 1208.74 L1758.33 1208.74 L1757.74 1208.74 L1757.16 1208.74 L1756.57 1208.74 L1755.99 1208.74 L1755.4 1208.74 L1754.81 1208.74 L1754.23 1208.74 L1753.64 1208.74 L1753.05 1208.74 L1752.47 1208.74 L1751.88 1208.74 L1751.29 1208.74 L1750.71 1208.74 L1750.12 1208.74 L1749.53 1208.74 L1748.95 1208.74 L1748.36 1208.74 L1747.78 1208.74 L1747.19 1208.74 L1746.6 1208.74 L1746.02 1208.74 L1745.43 1208.74 L1744.84 1208.74 L1744.26 1208.74 L1743.67 1208.74 L1743.08 1208.74 L1742.5 1208.74 L1741.91 1208.74 L1741.32 1208.74 L1740.74 1208.74 L1740.15 1208.74 L1739.57 1208.74 L1738.98 1208.74 L1738.39 1208.74 L1737.81 1208.74 L1737.22 1208.74 L1736.63 1208.74 L1736.05 1208.74 L1735.46 1208.74 L1734.87 1208.74 L1734.29 1208.74 L1733.7 1208.74 L1733.11 1208.74 L1732.53 1208.74 L1731.94 1208.74 L1731.36 1208.74 L1730.77 1208.74 L1730.18 1208.74 L1729.6 1208.74 L1729.01 1208.74 L1728.42 1208.74 L1727.84 1208.74 L1727.25 1208.74 L1726.66 1208.74 L1726.08 1208.74 L1725.49 1208.74 L1724.91 1208.74 L1724.32 1208.74 L1723.73 1208.74 L1723.15 1208.74 L1722.56 1208.74 L1721.97 1208.74 L1721.39 1208.74 L1720.8 1208.74 L1720.21 1208.74 L1719.63 1208.74 L1719.04 1208.74 L1718.45 1208.74 L1717.87 1208.74 L1717.28 1208.74 L1716.7 1208.74 L1716.11 1208.74 L1715.52 1208.74 L1714.94 1208.74 L1714.35 1208.74 L1713.76 1208.74 L1713.18 1208.74 L1712.59 1208.74 L1712 1208.74 L1711.42 1208.74 L1710.83 1208.74 L1710.24 1208.74 L1709.66 1208.74 L1709.07 1208.74 L1708.49 1208.74 L1707.9 1208.74 L1707.31 1208.74 L1706.73 1208.74 L1706.14 1208.74 L1705.55 1208.74 L1704.97 1208.74 L1704.38 1208.74 L1703.79 1208.74 L1703.21 1208.74 L1702.62 1208.74 L1702.04 1208.74 L1701.45 1208.74 L1700.86 1208.74 L1700.28 1208.74 L1699.69 1208.74 L1699.1 1208.74 L1698.52 1208.74 L1697.93 1208.74 L1697.34 1208.74 L1696.76 1208.74 L1696.17 1208.74 L1695.58 1208.74 L1695 1208.74 L1694.41 1208.74 L1693.83 1208.74 L1693.24 1208.74 L1692.65 1208.74 L1692.07 1208.74 L1691.48 1208.74 L1690.89 1208.74 L1690.31 1208.74 L1689.72 1208.74 L1689.13 1208.74 L1688.55 1208.74 L1687.96 1208.74 L1687.37 1208.74 L1686.79 1208.74 L1686.2 1208.74 L1685.62 1208.74 L1685.03 1208.74 L1684.44 1208.74 L1683.86 1208.74 L1683.27 1208.74 L1682.68 1208.74 L1682.1 1208.74 L1681.51 1208.74 L1680.92 1208.74 L1680.34 1208.74 L1679.75 1208.74 L1679.17 1208.74 L1678.58 1208.74 L1677.99 1208.74 L1677.41 1208.74 L1676.82 1208.74 L1676.23 1208.74 L1675.65 1208.74 L1675.06 1208.74 L1674.47 1208.74 L1673.89 1208.74 L1673.3 1208.74 L1672.71 1208.74 L1672.13 1208.74 L1671.54 1208.74 L1670.96 1208.74 L1670.37 1208.74 L1669.78 1208.74 L1669.2 1208.74 L1668.61 1208.74 L1668.02 1208.74 L1667.44 1208.74 L1666.85 1208.74 L1666.26 1208.74 L1665.68 1208.74 L1665.09 1208.74 L1664.5 1208.74 L1663.92 1208.74 L1663.33 1208.74 L1662.75 1208.74 L1662.16 1208.74 L1661.57 1208.74 L1660.99 1208.74 L1660.4 1208.74 L1659.81 1208.74 L1659.23 1208.74 L1658.64 1208.74 L1658.05 1208.74 L1657.47 1208.74 L1656.88 1208.74 L1656.29 1208.74 L1655.71 1208.74 L1655.12 1208.74 L1654.54 1208.74 L1653.95 1208.74 L1653.36 1208.74 L1652.78 1208.74 L1652.19 1208.74 L1651.6 1208.74 L1651.02 1208.74 L1650.43 1208.74 L1649.84 1208.74 L1649.26 1208.74 L1648.67 1208.74 L1648.09 1208.74 L1647.5 1208.74 L1646.91 1208.74 L1646.33 1208.74 L1645.74 1208.74 L1645.15 1208.74 L1644.57 1208.74 L1643.98 1208.74 L1643.39 1208.74 L1642.81 1208.74 L1642.22 1208.74 L1641.63 1208.74 L1641.05 1208.74 L1640.46 1208.74 L1639.88 1208.74 L1639.29 1208.74 L1638.7 1208.74 L1638.12 1208.74 L1637.53 1208.74 L1636.94 1208.74 L1636.36 1208.74 L1635.77 1208.74 L1635.18 1208.74 L1634.6 1208.74 L1634.01 1208.74 L1633.42 1208.74 L1632.84 1208.74 L1632.25 1208.74 L1631.67 1208.74 L1631.08 1208.74 L1630.49 1208.74 L1629.91 1208.74 L1629.32 1208.74 L1628.73 1208.74 L1628.15 1208.74 L1627.56 1208.74 L1626.97 1208.74 L1626.39 1208.74 L1625.8 1208.74 L1625.22 1208.74 L1624.63 1208.74 L1624.04 1208.74 L1623.46 1208.74 L1622.87 1208.74 L1622.28 1208.74 L1621.7 1208.74 L1621.11 1208.74 L1620.52 1208.74 L1619.94 1208.74 L1619.35 1208.74 L1618.76 1208.74 L1618.18 1208.74 L1617.59 1208.74 L1617.01 1208.74 L1616.42 1208.74 L1615.83 1208.74 L1615.25 1208.74 L1614.66 1208.74 L1614.07 1208.74 L1613.49 1208.74 L1612.9 1208.74 L1612.31 1208.74 L1611.73 1208.74 L1611.14 1208.74 L1610.55 1208.74 L1609.97 1208.74 L1609.38 1208.74 L1608.8 1208.74 L1608.21 1208.74 L1607.62 1208.74 L1607.04 1208.74 L1606.45 1208.74 L1605.86 1208.74 L1605.28 1208.74 L1604.69 1208.74 L1604.1 1208.74 L1603.52 1208.74 L1602.93 1208.74 L1602.34 1208.74 L1601.76 1208.74 L1601.17 1208.74 L1600.59 1208.74 L1600 1208.74 L1599.41 1208.74 L1598.83 1208.74 L1598.24 1208.74 L1597.65 1208.74 L1597.07 1208.74 L1596.48 1208.74 L1595.89 1208.74 L1595.31 1208.74 L1594.72 1208.74 L1594.14 1208.74 L1593.55 1208.74 L1592.96 1208.74 L1592.38 1208.74 L1591.79 1208.74 L1591.2 1208.74 L1590.62 1208.74 L1590.03 1208.74 L1589.44 1208.74 L1588.86 1208.74 L1588.27 1208.74 L1587.68 1208.74 L1587.1 1208.74 L1586.51 1208.74 L1585.93 1208.74 L1585.34 1208.74 L1584.75 1208.74 L1584.17 1208.74 L1583.58 1208.74 L1582.99 1208.74 L1582.41 1208.74 L1581.82 1208.74 L1581.23 1208.74 L1580.65 1208.74 L1580.06 1208.74 L1579.47 1208.74 L1578.89 1208.74 L1578.3 1208.74 L1577.72 1208.74 L1577.13 1208.74 L1576.54 1208.74 L1575.96 1208.74 L1575.37 1208.74 L1574.78 1208.74 L1574.2 1208.74 L1573.61 1208.74 L1573.02 1208.74 L1572.44 1208.74 L1571.85 1208.74 L1571.27 1208.74 L1570.68 1208.74 L1570.09 1208.74 L1569.51 1208.74 L1568.92 1208.74 L1568.33 1208.74 L1567.75 1208.74 L1567.16 1208.74 L1566.57 1208.74 L1565.99 1208.74 L1565.4 1208.74 L1564.81 1208.74 L1564.23 1208.74 L1563.64 1208.74 L1563.06 1208.74 L1562.47 1208.74 L1561.88 1208.74 L1561.3 1208.74 L1560.71 1208.74 L1560.12 1208.74 L1559.54 1208.74 L1558.95 1208.74 L1558.36 1208.74 L1557.78 1208.74 L1557.19 1208.74 L1556.6 1208.74 L1556.02 1208.74 L1555.43 1208.74 L1554.85 1208.74 L1554.26 1208.74 L1553.67 1208.74 L1553.09 1208.74 L1552.5 1208.74 L1551.91 1208.74 L1551.33 1208.74 L1550.74 1208.74 L1550.15 1208.74 L1549.57 1208.74 L1548.98 1208.74 L1548.4 1208.74 L1547.81 1208.74 L1547.22 1208.74 L1546.64 1208.74 L1546.05 1208.74 L1545.46 1208.74 L1544.88 1208.74 L1544.29 1208.74 L1543.7 1208.74 L1543.12 1208.74 L1542.53 1208.74 L1541.94 1208.74 L1541.36 1208.74 L1540.77 1208.74 L1540.19 1208.74 L1539.6 1208.74 L1539.01 1208.74 L1538.43 1208.74 L1537.84 1208.74 L1537.25 1208.74 L1536.67 1208.74 L1536.08 1208.74 L1535.49 1208.74 L1534.91 1208.74 L1534.32 1208.74 L1533.73 1208.74 L1533.15 1208.74 L1532.56 1208.74 L1531.98 1208.74 L1531.39 1208.74 L1530.8 1208.74 L1530.22 1208.74 L1529.63 1208.74 L1529.04 1208.74 L1528.46 1208.74 L1527.87 1208.74 L1527.28 1208.74 L1526.7 1208.74 L1526.11 1208.74 L1525.52 1208.74 L1524.94 1208.74 L1524.35 1208.74 L1523.77 1208.74 L1523.18 1208.74 L1522.59 1208.74 L1522.01 1208.74 L1521.42 1208.74 L1520.83 1208.74 L1520.25 1208.74 L1519.66 1208.74 L1519.07 1208.74 L1518.49 1208.74 L1517.9 1208.74 L1517.32 1208.74 L1516.73 1208.74 L1516.14 1208.74 L1515.56 1208.74 L1514.97 1208.74 L1514.38 1208.74 L1513.8 1208.74 L1513.21 1208.74 L1512.62 1208.74 L1512.04 1208.74 L1511.45 1208.74 L1510.86 1208.74 L1510.28 1208.74 L1509.69 1208.74 L1509.11 1208.74 L1508.52 1208.74 L1507.93 1208.74 L1507.35 1208.74 L1506.76 1208.74 L1506.17 1208.74 L1505.59 1208.74 L1505 1208.74 L1504.41 1208.74 L1503.83 1208.74 L1503.24 1208.74 L1502.65 1208.74 L1502.07 1208.74 L1501.48 1208.74 L1500.9 1208.74 L1500.31 1208.74 L1499.72 1208.74 L1499.14 1208.74 L1498.55 1208.74 L1497.96 1208.74 L1497.38 1208.74 L1496.79 1208.74 L1496.2 1208.74 L1495.62 1208.74 L1495.03 1208.74 L1494.45 1208.74 L1493.86 1208.74 L1493.27 1208.74 L1492.69 1208.74 L1492.1 1208.74 L1491.51 1208.74 L1490.93 1208.74 L1490.34 1208.74 L1489.75 1208.74 L1489.17 1208.74 L1488.58 1208.74 L1487.99 1208.74 L1487.41 1208.74 L1486.82 1208.74 L1486.24 1208.74 L1485.65 1208.74 L1485.06 1208.74 L1484.48 1208.74 L1483.89 1208.74 L1483.3 1208.74 L1482.72 1208.74 L1482.13 1208.74 L1481.54 1208.74 L1480.96 1208.74 L1480.37 1208.74 L1479.78 1208.74 L1479.2 1208.74 L1478.61 1208.74 L1478.03 1208.74 L1477.44 1208.74 L1476.85 1208.74 L1476.27 1208.74 L1475.68 1208.74 L1475.09 1208.74 L1474.51 1208.74 L1473.92 1208.74 L1473.33 1208.74 L1472.75 1208.74 L1472.16 1208.74 L1471.57 1208.74 L1470.99 1208.74 L1470.4 1208.74 L1469.82 1208.74 L1469.23 1208.74 L1468.64 1208.74 L1468.06 1208.74 L1467.47 1208.74 L1466.88 1208.74 L1466.3 1208.74 L1465.71 1208.74 L1465.12 1208.74 L1464.54 1208.74 L1463.95 1208.74 L1463.37 1208.74 L1462.78 1208.74 L1462.19 1208.74 L1461.61 1208.74 L1461.02 1208.74 L1460.43 1208.74 L1459.85 1208.74 L1459.26 1208.74 L1458.67 1208.74 L1458.09 1208.74 L1457.5 1208.74 L1456.91 1208.74 L1456.33 1208.74 L1455.74 1208.74 L1455.16 1208.74 L1454.57 1208.74 L1453.98 1208.74 L1453.4 1208.74 L1452.81 1208.74 L1452.22 1208.74 L1451.64 1208.74 L1451.05 1208.74 L1450.46 1208.74 L1449.88 1208.74 L1449.29 1208.74 L1448.7 1208.74 L1448.12 1208.74 L1447.53 1208.74 L1446.95 1208.74 L1446.36 1208.74 L1445.77 1208.74 L1445.19 1208.74 L1444.6 1208.74 L1444.01 1208.74 L1443.43 1208.74 L1442.84 1208.74 L1442.25 1208.74 L1441.67 1208.74 L1441.08 1208.74 L1440.5 1208.74 L1439.91 1208.74 L1439.32 1208.74 L1438.74 1208.74 L1438.15 1208.74 L1437.56 1208.74 L1436.98 1208.74 L1436.39 1208.74 L1435.8 1208.74 L1435.22 1208.74 L1434.63 1208.74 L1434.04 1208.74 L1433.46 1208.74 L1432.87 1208.74 L1432.29 1208.74 L1431.7 1208.74 L1431.11 1208.74 L1430.53 1208.74 L1429.94 1208.74 L1429.35 1208.74 L1428.77 1208.74 L1428.18 1208.74 L1427.59 1208.74 L1427.01 1208.74 L1426.42 1208.74 L1425.83 1208.74 L1425.25 1208.74 L1424.66 1208.74 L1424.08 1208.74 L1423.49 1208.74 L1422.9 1208.74 L1422.32 1208.74 L1421.73 1208.74 L1421.14 1208.74 L1420.56 1208.74 L1419.97 1208.74 L1419.38 1208.74 L1418.8 1208.74 L1418.21 1208.74 L1417.63 1208.74 L1417.04 1208.74 L1416.45 1208.74 L1415.87 1208.74 L1415.28 1208.74 L1414.69 1208.74 L1414.11 1208.74 L1413.52 1208.74 L1412.93 1208.74 L1412.35 1208.74 L1411.76 1208.74 L1411.17 1208.74 L1410.59 1208.74 L1410 1208.74 L1409.42 1208.74 L1408.83 1208.74 L1408.24 1208.74 L1407.66 1208.74 L1407.07 1208.74 L1406.48 1208.74 L1405.9 1208.74 L1405.31 1208.74 L1404.72 1208.74 L1404.14 1208.74 L1403.55 1208.74 L1402.96 1208.74 L1402.38 1208.74 L1401.79 1208.74 L1401.21 1208.74 L1400.62 1208.74 L1400.03 1208.74 L1399.45 1208.74 L1398.86 1208.74 L1398.27 1208.74 L1397.69 1208.74 L1397.1 1208.74 L1396.51 1208.74 L1395.93 1208.74 L1395.34 1208.74 L1394.75 1208.74 L1394.17 1208.74 L1393.58 1208.74 L1393 1208.74 L1392.41 1208.74 L1391.82 1208.74 L1391.24 1208.74 L1390.65 1208.74 L1390.06 1208.74 L1389.48 1208.74 L1388.89 1208.74 L1388.3 1208.74 L1387.72 1208.74 L1387.13 1208.74 L1386.55 1208.74 L1385.96 1208.74 L1385.37 1208.74 L1384.79 1208.74 L1384.2 1208.74 L1383.61 1208.74 L1383.03 1208.74 L1382.44 1208.74 L1381.85 1208.74 L1381.27 1208.74 L1380.68 1208.74 L1380.09 1208.74 L1379.51 1208.74 L1378.92 1208.74 L1378.34 1208.74 L1377.75 1208.74 L1377.16 1208.74 L1376.58 1208.74 L1375.99 1208.74 L1375.4 1208.74 L1374.82 1208.74 L1374.23 1208.74 L1373.64 1208.74 L1373.06 1208.74 L1372.47 1208.74 L1371.88 1208.74 L1371.3 1208.74 L1370.71 1208.74 L1370.13 1208.74 L1369.54 1208.74 L1368.95 1208.74 L1368.37 1208.74 L1367.78 1208.74 L1367.19 1208.74 L1366.61 1208.74 L1366.02 1208.74 L1365.43 1208.74 L1364.85 1208.74 L1364.26 1208.74 L1363.68 1208.74 L1363.09 1208.74 L1362.5 1208.74 L1361.92 1208.74 L1361.33 1208.74 L1360.74 1208.74 L1360.16 1208.74 L1359.57 1208.74 L1358.98 1208.74 L1358.4 1208.74 L1357.81 1208.74 L1357.22 1208.74 L1356.64 1208.74 L1356.05 1208.74 L1355.47 1208.74 L1354.88 1208.74 L1354.29 1208.74 L1353.71 1208.74 L1353.12 1208.74 L1352.53 1208.74 L1351.95 1208.74 L1351.36 1208.74 L1350.77 1208.74 L1350.19 1208.74 L1349.6 1208.74 L1349.01 1208.74 L1348.43 1208.74 L1347.84 1208.74 L1347.26 1208.74 L1346.67 1208.74 L1346.08 1208.74 L1345.5 1208.74 L1344.91 1208.74 L1344.32 1208.74 L1343.74 1208.74 L1343.15 1208.74 L1342.56 1208.74 L1341.98 1208.74 L1341.39 1208.74 L1340.8 1208.74 L1340.22 1208.74 L1339.63 1208.74 L1339.05 1208.74 L1338.46 1208.74 L1337.87 1208.74 L1337.29 1208.74 L1336.7 1208.74 L1336.11 1208.74 L1335.53 1208.74 L1334.94 1208.74 L1334.35 1208.74 L1333.77 1208.74 L1333.18 1208.74 L1332.6 1208.74 L1332.01 1208.74 L1331.42 1208.74 L1330.84 1208.74 L1330.25 1208.74 L1329.66 1208.74 L1329.08 1208.74 L1328.49 1208.74 L1327.9 1208.74 L1327.32 1208.74 L1326.73 1208.74 L1326.14 1208.74 L1325.56 1208.74 L1324.97 1208.74 L1324.39 1208.74 L1323.8 1208.74 L1323.21 1208.74 L1322.63 1208.74 L1322.04 1208.74 L1321.45 1208.74 L1320.87 1208.74 L1320.28 1208.74 L1319.69 1208.74 L1319.11 1208.74 L1318.52 1208.74 L1317.93 1208.74 L1317.35 1208.74 L1316.76 1208.74 L1316.18 1208.74 L1315.59 1208.74 L1315 1208.74 L1314.42 1208.74 L1313.83 1208.74 L1313.24 1208.74 L1312.66 1208.74 L1312.07 1208.74 L1311.48 1208.74 L1310.9 1208.74 L1310.31 1208.74 L1309.73 1208.74 L1309.14 1208.74 L1308.55 1208.74 L1307.97 1208.74 L1307.38 1208.74 L1306.79 1208.74 L1306.21 1208.74 L1305.62 1208.74 L1305.03 1208.74 L1304.45 1208.74 L1303.86 1208.74 L1303.27 1208.74 L1302.69 1208.74 L1302.1 1208.74 L1301.52 1208.74 L1300.93 1208.74 L1300.34 1208.74 L1299.76 1208.74 L1299.17 1208.74 L1298.58 1208.74 L1298 1208.74 L1297.41 1208.74 L1296.82 1208.74 L1296.24 1208.74 L1295.65 1208.74 L1295.06 1208.74 L1294.48 1208.74 L1293.89 1208.74 L1293.31 1208.74 L1292.72 1208.74 L1292.13 1208.74 L1291.55 1208.74 L1290.96 1208.74 L1290.37 1208.74 L1289.79 1208.74 L1289.2 1208.74 L1288.61 1208.74 L1288.03 1208.74 L1287.44 1208.74 L1286.86 1208.74 L1286.27 1208.74 L1285.68 1208.74 L1285.1 1208.74 L1284.51 1208.74 L1283.92 1208.74 L1283.34 1208.74 L1282.75 1208.74 L1282.16 1208.74 L1281.58 1208.74 L1280.99 1208.74 L1280.4 1208.74 L1279.82 1208.74 L1279.23 1208.74 L1278.65 1208.74 L1278.06 1208.74 L1277.47 1208.74 L1276.89 1208.74 L1276.3 1208.74 L1275.71 1208.74 L1275.13 1208.74 L1274.54 1208.74 L1273.95 1208.74 L1273.37 1208.74 L1272.78 1208.74 L1272.19 1208.74 L1271.61 1208.74 L1271.02 1208.74 L1270.44 1208.74 L1269.85 1208.74 L1269.26 1208.74 L1268.68 1208.74 L1268.09 1208.74 L1267.5 1208.74 L1266.92 1208.74 L1266.33 1208.74 L1265.74 1208.74 L1265.16 1208.74 L1264.57 1208.74 L1263.98 1208.74 L1263.4 1208.74 L1262.81 1208.74 L1262.23 1208.74 L1261.64 1208.74 L1261.05 1208.74 L1260.47 1208.74 L1259.88 1208.74 L1259.29 1208.74 L1258.71 1208.74 L1258.12 1208.74 L1257.53 1208.74 L1256.95 1208.74 L1256.36 1208.74 L1255.78 1208.74 L1255.19 1208.74 L1254.6 1208.74 L1254.02 1208.74 L1253.43 1208.74 L1252.84 1208.74 L1252.26 1208.74 L1251.67 1208.74 L1251.08 1208.74 L1250.5 1208.74 L1249.91 1208.74 L1249.32 1208.74 L1248.74 1208.74 L1248.15 1208.74 L1247.57 1208.74 L1246.98 1208.74 L1246.39 1208.74 L1245.81 1208.74 L1245.22 1208.74 L1244.63 1208.74 L1244.05 1208.74 L1243.46 1208.74 L1242.87 1208.74 L1242.29 1208.74 L1241.7 1208.74 L1241.11 1208.74 L1240.53 1208.74 L1239.94 1208.74 L1239.36 1208.74 L1238.77 1208.74 L1238.18 1208.74 L1237.6 1208.74 L1237.01 1208.74 L1236.42 1208.74 L1235.84 1208.74 L1235.25 1208.74 L1234.66 1208.74 L1234.08 1208.74 L1233.49 1208.74 L1232.91 1208.74 L1232.32 1208.74 L1231.73 1208.74 L1231.15 1208.74 L1230.56 1208.74 L1229.97 1208.74 L1229.39 1208.74 L1228.8 1208.74 L1228.21 1208.74 L1227.63 1208.74 L1227.04 1208.74 L1226.45 1208.74 L1225.87 1208.74 L1225.28 1208.74 L1224.7 1208.74 L1224.11 1208.74 L1223.52 1208.74 L1222.94 1208.74 L1222.35 1208.74 L1221.76 1208.74 L1221.18 1208.74 L1220.59 1208.74 L1220 1208.74 L1219.42 1208.74 L1218.83 1208.74 L1218.24 1208.74 L1217.66 1208.74 L1217.07 1208.74 L1216.49 1208.74 L1215.9 1208.74 L1215.31 1208.74 L1214.73 1208.74 L1214.14 1208.74 L1213.55 1208.74 L1212.97 1208.74 L1212.38 1208.74 L1211.79 1208.74 L1211.21 1208.74 L1210.62 1208.74 L1210.03 1208.74 L1209.45 1208.74 L1208.86 1208.74 L1208.28 1208.74 L1207.69 1208.74 L1207.1 1208.74 L1206.52 1208.74 L1205.93 1208.74 L1205.34 1208.74 L1204.76 1208.74 L1204.17 1208.74 L1203.58 1208.74 L1203 1208.74 L1202.41 1208.74 L1201.83 1208.74 L1201.24 1208.74 L1200.65 1208.74 L1200.07 1208.74 L1199.48 1208.74 L1198.89 1208.74 L1198.31 1208.74 L1197.72 1208.74 L1197.13 1208.74 L1196.55 1208.74 L1195.96 1208.74 L1195.37 1208.74 L1194.79 1208.74 L1194.2 1208.74 L1193.62 1208.74 L1193.03 1208.74 L1192.44 1208.74 L1191.86 1208.74 L1191.27 1208.74 L1190.68 1208.74 L1190.1 1208.74 L1189.51 1208.74 L1188.92 1208.74 L1188.34 1208.74 L1187.75 1208.74 L1187.16 1208.74 L1186.58 1208.74 L1185.99 1208.74 L1185.41 1208.74 L1184.82 1208.74 L1184.23 1208.74 L1183.65 1208.74 L1183.06 1208.74 L1182.47 1208.74 L1181.89 1208.74 L1181.3 1208.74 L1180.71 1208.74 L1180.13 1208.74 L1179.54 1208.74 L1178.96 1208.74 L1178.37 1208.74 L1177.78 1208.74 L1177.2 1208.74 L1176.61 1208.74 L1176.02 1208.74 L1175.44 1208.74 L1174.85 1208.74 L1174.26 1208.74 L1173.68 1208.74 L1173.09 1208.74 L1172.5 1208.74 L1171.92 1208.74 L1171.33 1208.74 L1170.75 1208.74 L1170.16 1208.74 L1169.57 1208.74 L1168.99 1208.74 L1168.4 1208.74 L1167.81 1208.74 L1167.23 1208.74 L1166.64 1208.74 L1166.05 1208.74 L1165.47 1208.74 L1164.88 1208.74 L1164.29 1208.74 L1163.71 1208.74 L1163.12 1208.74 L1162.54 1208.74 L1161.95 1208.74 L1161.36 1208.74 L1160.78 1208.74 L1160.19 1208.74 L1159.6 1208.74 L1159.02 1208.74 L1158.43 1208.74 L1157.84 1208.74 L1157.26 1208.74 L1156.67 1208.74 L1156.09 1208.74 L1155.5 1208.74 L1154.91 1208.74 L1154.33 1208.74 L1153.74 1208.74 L1153.15 1208.74 L1152.57 1208.74 L1151.98 1208.74 L1151.39 1208.74 L1150.81 1208.74 L1150.22 1208.74 L1149.63 1208.74 L1149.05 1208.74 L1148.46 1208.74 L1147.88 1208.74 L1147.29 1208.74 L1146.7 1208.74 L1146.12 1208.74 L1145.53 1208.74 L1144.94 1208.74 L1144.36 1208.74 L1143.77 1208.74 L1143.18 1208.74 L1142.6 1208.74 L1142.01 1208.74 L1141.42 1208.74 L1140.84 1208.74 L1140.25 1208.74 L1139.67 1208.74 L1139.08 1208.74 L1138.49 1208.74 L1137.91 1208.74 L1137.32 1208.74 L1136.73 1208.74 L1136.15 1208.74 L1135.56 1208.74 L1134.97 1208.74 L1134.39 1208.74 L1133.8 1208.74 L1133.21 1208.74 L1132.63 1208.74 L1132.04 1208.74 L1131.46 1208.74 L1130.87 1208.74 L1130.28 1208.74 L1129.7 1208.74 L1129.11 1208.74 L1128.52 1208.74 L1127.94 1208.74 L1127.35 1208.74 L1126.76 1208.74 L1126.18 1208.74 L1125.59 1208.74 L1125.01 1208.74 L1124.42 1208.74 L1123.83 1208.74 L1123.25 1208.74 L1122.66 1208.74 L1122.07 1208.74 L1121.49 1208.74 L1120.9 1208.74 L1120.31 1208.74 L1119.73 1208.74 L1119.14 1208.74 L1118.55 1208.74 L1117.97 1208.74 L1117.38 1208.74 L1116.8 1208.74 L1116.21 1208.74 L1115.62 1208.74 L1115.04 1208.74 L1114.45 1208.74 L1113.86 1208.74 L1113.28 1208.74 L1112.69 1208.74 L1112.1 1208.74 L1111.52 1208.74 L1110.93 1208.74 L1110.34 1208.74 L1109.76 1208.74 L1109.17 1208.74 L1108.59 1208.74 L1108 1208.74 L1107.41 1208.74 L1106.83 1208.74 L1106.24 1208.74 L1105.65 1208.74 L1105.07 1208.74 L1104.48 1208.74 L1103.89 1208.74 L1103.31 1208.74 L1102.72 1208.74 L1102.14 1208.74 L1101.55 1208.74 L1100.96 1208.74 L1100.38 1208.74 L1099.79 1208.74 L1099.2 1208.74 L1098.62 1208.74 L1098.03 1208.74 L1097.44 1208.74 L1096.86 1208.74 L1096.27 1208.74 L1095.68 1208.74 L1095.1 1208.74 L1094.51 1208.74 L1093.93 1208.74 L1093.34 1208.74 L1092.75 1208.74 L1092.17 1208.74 L1091.58 1208.74 L1090.99 1208.74 L1090.41 1208.74 L1089.82 1208.74 L1089.23 1208.74 L1088.65 1208.74 L1088.06 1208.74 L1087.47 1208.74 L1086.89 1208.74 L1086.3 1208.74 L1085.72 1208.74 L1085.13 1208.74 L1084.54 1208.74 L1083.96 1208.74 L1083.37 1208.74 L1082.78 1208.74 L1082.2 1208.74 L1081.61 1208.74 L1081.02 1208.74 L1080.44 1208.74 L1079.85 1208.74 L1079.26 1208.74 L1078.68 1208.74 L1078.09 1208.74 L1077.51 1208.74 L1076.92 1208.74 L1076.33 1208.74 L1075.75 1208.74 L1075.16 1208.74 L1074.57 1208.74 L1073.99 1208.74 L1073.4 1208.74 L1072.81 1208.74 L1072.23 1208.74 L1071.64 1208.74 L1071.06 1208.74 L1070.47 1208.74 L1069.88 1208.74 L1069.3 1208.74 L1068.71 1208.74 L1068.12 1208.74 L1067.54 1208.74 L1066.95 1208.74 L1066.36 1208.74 L1065.78 1208.74 L1065.19 1208.74 L1064.6 1208.74 L1064.02 1208.74 L1063.43 1208.74 L1062.85 1208.74 L1062.26 1208.74 L1061.67 1208.74 L1061.09 1208.74 L1060.5 1208.74 L1059.91 1208.74 L1059.33 1208.74 L1058.74 1208.74 L1058.15 1208.74 L1057.57 1208.74 L1056.98 1208.74 L1056.39 1208.74 L1055.81 1208.74 L1055.22 1208.74 L1054.64 1208.74 L1054.05 1208.74 L1053.46 1208.74 L1052.88 1208.74 L1052.29 1208.74 L1051.7 1208.74 L1051.12 1208.74 L1050.53 1208.74 L1049.94 1208.74 L1049.36 1208.74 L1048.77 1208.74 L1048.19 1208.74 L1047.6 1208.74 L1047.01 1208.74 L1046.43 1208.74 L1045.84 1208.74 L1045.25 1208.74 L1044.67 1208.74 L1044.08 1208.74 L1043.49 1208.74 L1042.91 1208.74 L1042.32 1208.74 L1041.73 1208.74 L1041.15 1208.74 L1040.56 1208.74 L1039.98 1208.74 L1039.39 1208.74 L1038.8 1208.74 L1038.22 1208.74 L1037.63 1208.74 L1037.04 1208.74 L1036.46 1208.74 L1035.87 1208.74 L1035.28 1208.74 L1034.7 1208.74 L1034.11 1208.74 L1033.52 1208.74 L1032.94 1208.74 L1032.35 1208.74 L1031.77 1208.74 L1031.18 1208.74 L1030.59 1208.74 L1030.01 1208.74 L1029.42 1208.74 L1028.83 1208.74 L1028.25 1208.74 L1027.66 1208.74 L1027.07 1208.74 L1026.49 1208.74 L1025.9 1208.74 L1025.32 1208.74 L1024.73 1208.74 L1024.14 1208.74 L1023.56 1208.74 L1022.97 1208.74 L1022.38 1208.74 L1021.8 1208.74 L1021.21 1208.74 L1020.62 1208.74 L1020.04 1208.74 L1019.45 1208.74 L1018.86 1208.74 L1018.28 1208.74 L1017.69 1208.74 L1017.11 1208.74 L1016.52 1208.74 L1015.93 1208.74 L1015.35 1208.74 L1014.76 1208.74 L1014.17 1208.74 L1013.59 1208.74 L1013 1208.74 L1012.41 1208.74 L1011.83 1208.74 L1011.24 1208.74 L1010.65 1208.74 L1010.07 1208.74 L1009.48 1208.74 L1008.9 1208.74 L1008.31 1208.74 L1007.72 1208.74 L1007.14 1208.74 L1006.55 1208.74 L1005.96 1208.74 L1005.38 1208.74 L1004.79 1208.74 L1004.2 1208.74 L1003.62 1208.74 L1003.03 1208.74 L1002.44 1208.74 L1001.86 1208.74 L1001.27 1208.74 L1000.69 1208.74 L1000.1 1208.74 L999.513 1208.74 L998.926 1208.74 L998.34 1208.74 L997.754 1208.74 L997.167 1208.74 L996.581 1208.74 L995.994 1208.74 L995.408 1208.74 L994.822 1208.74 L994.235 1208.74 L993.649 1208.74 L993.062 1208.74 L992.476 1208.74 L991.889 1208.74 L991.303 1208.74 L990.717 1208.74 L990.13 1208.74 L989.544 1208.74 L988.957 1208.74 L988.371 1208.74 L987.785 1208.74 L987.198 1208.74 L986.612 1208.74 L986.025 1208.74  Z\" fill=\"#e26f46\" fill-rule=\"evenodd\" fill-opacity=\"0.5\"/>\n<polyline clip-path=\"url(#clip442)\" style=\"stroke:#e26f46; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"986.025,1209.14 986.612,1209.14 987.198,1209.14 987.785,1209.14 988.371,1209.14 988.957,1209.14 989.544,1209.14 990.13,1209.14 990.717,1209.14 991.303,1209.14 991.889,1209.14 992.476,1209.14 993.062,1209.14 993.649,1209.14 994.235,1209.14 994.822,1209.14 995.408,1209.14 995.994,1209.14 996.581,1209.14 997.167,1209.14 997.754,1209.14 998.34,1209.14 998.926,1209.14 999.513,1209.14 1000.1,1209.14 1000.69,1209.14 1001.27,1209.14 1001.86,1209.14 1002.44,1209.14 1003.03,1209.14 1003.62,1209.14 1004.2,1209.14 1004.79,1209.14 1005.38,1209.14 1005.96,1209.14 1006.55,1209.14 1007.14,1209.14 1007.72,1209.14 1008.31,1209.14 1008.9,1209.14 1009.48,1209.14 1010.07,1209.14 1010.65,1209.14 1011.24,1209.14 1011.83,1209.14 1012.41,1209.14 1013,1209.14 1013.59,1209.14 1014.17,1209.14 1014.76,1209.14 1015.35,1209.14 1015.93,1209.14 1016.52,1209.14 1017.11,1209.14 1017.69,1209.14 1018.28,1209.14 1018.86,1209.14 1019.45,1209.14 1020.04,1209.14 1020.62,1209.14 1021.21,1209.14 1021.8,1209.14 1022.38,1209.14 1022.97,1209.14 1023.56,1209.14 1024.14,1209.14 1024.73,1209.14 1025.32,1209.14 1025.9,1209.14 1026.49,1209.14 1027.07,1209.14 1027.66,1209.14 1028.25,1209.14 1028.83,1209.14 1029.42,1209.14 1030.01,1209.14 1030.59,1209.14 1031.18,1209.14 1031.77,1209.14 1032.35,1209.14 1032.94,1209.14 1033.52,1209.14 1034.11,1209.14 1034.7,1209.14 1035.28,1209.14 1035.87,1209.14 1036.46,1209.14 1037.04,1209.14 1037.63,1209.14 1038.22,1209.14 1038.8,1209.14 1039.39,1209.14 1039.98,1209.14 1040.56,1209.14 1041.15,1209.14 1041.73,1209.14 1042.32,1209.14 1042.91,1209.14 1043.49,1209.14 1044.08,1209.14 1044.67,1209.14 1045.25,1209.14 1045.84,1209.14 1046.43,1209.14 1047.01,1209.14 1047.6,1209.14 1048.19,1209.14 1048.77,1209.14 1049.36,1209.14 1049.94,1209.14 1050.53,1209.14 1051.12,1209.14 1051.7,1209.14 1052.29,1209.14 1052.88,1209.14 1053.46,1209.14 1054.05,1209.14 1054.64,1209.14 1055.22,1209.14 1055.81,1209.14 1056.39,1209.14 1056.98,1209.14 1057.57,1209.14 1058.15,1209.14 1058.74,1209.14 1059.33,1209.14 1059.91,1209.14 1060.5,1209.14 1061.09,1209.14 1061.67,1209.14 1062.26,1209.14 1062.85,1209.14 1063.43,1209.14 1064.02,1209.14 1064.6,1209.14 1065.19,1209.14 1065.78,1209.14 1066.36,1209.14 1066.95,1209.14 1067.54,1209.14 1068.12,1209.14 1068.71,1209.14 1069.3,1209.14 1069.88,1209.14 1070.47,1209.14 1071.06,1209.14 1071.64,1209.14 1072.23,1209.14 1072.81,1209.14 1073.4,1209.14 1073.99,1209.14 1074.57,1209.14 1075.16,1209.14 1075.75,1209.14 1076.33,1209.14 1076.92,1209.14 1077.51,1209.14 1078.09,1209.14 1078.68,1209.14 1079.26,1209.14 1079.85,1209.14 1080.44,1209.14 1081.02,1209.14 1081.61,1209.14 1082.2,1209.14 1082.78,1209.14 1083.37,1209.14 1083.96,1209.14 1084.54,1209.14 1085.13,1209.14 1085.72,1209.14 1086.3,1209.14 1086.89,1209.14 1087.47,1209.14 1088.06,1209.14 1088.65,1209.14 1089.23,1209.14 1089.82,1209.14 1090.41,1209.14 1090.99,1209.14 1091.58,1209.14 1092.17,1209.14 1092.75,1209.14 1093.34,1209.14 1093.93,1209.14 1094.51,1209.14 1095.1,1209.14 1095.68,1209.14 1096.27,1209.14 1096.86,1209.14 1097.44,1209.14 1098.03,1209.14 1098.62,1209.14 1099.2,1209.14 1099.79,1209.14 1100.38,1209.14 1100.96,1209.14 1101.55,1209.14 1102.14,1209.14 1102.72,1209.14 1103.31,1209.14 1103.89,1209.14 1104.48,1209.14 1105.07,1209.14 1105.65,1209.14 1106.24,1209.14 1106.83,1209.14 1107.41,1209.14 1108,1209.14 1108.59,1209.14 1109.17,1209.14 1109.76,1209.14 1110.34,1209.14 1110.93,1209.14 1111.52,1209.14 1112.1,1209.14 1112.69,1209.14 1113.28,1209.14 1113.86,1209.14 1114.45,1209.14 1115.04,1209.14 1115.62,1209.14 1116.21,1209.14 1116.8,1209.14 1117.38,1209.14 1117.97,1209.14 1118.55,1209.14 1119.14,1209.14 1119.73,1209.14 1120.31,1209.14 1120.9,1209.14 1121.49,1209.14 1122.07,1209.14 1122.66,1209.14 1123.25,1209.14 1123.83,1209.14 1124.42,1209.14 1125.01,1209.14 1125.59,1209.14 1126.18,1209.14 1126.76,1209.14 1127.35,1209.14 1127.94,1209.14 1128.52,1209.14 1129.11,1209.14 1129.7,1209.14 1130.28,1209.14 1130.87,1209.14 1131.46,1209.14 1132.04,1209.14 1132.63,1209.14 1133.21,1209.14 1133.8,1209.14 1134.39,1209.14 1134.97,1209.14 1135.56,1209.14 1136.15,1209.14 1136.73,1209.14 1137.32,1209.14 1137.91,1209.14 1138.49,1209.14 1139.08,1209.14 1139.67,1209.14 1140.25,1209.14 1140.84,1209.14 1141.42,1209.14 1142.01,1209.14 1142.6,1209.14 1143.18,1209.14 1143.77,1209.14 1144.36,1209.14 1144.94,1209.14 1145.53,1209.14 1146.12,1209.14 1146.7,1209.14 1147.29,1209.14 1147.88,1209.14 1148.46,1209.14 1149.05,1209.14 1149.63,1209.14 1150.22,1209.14 1150.81,1209.14 1151.39,1209.14 1151.98,1209.14 1152.57,1209.14 1153.15,1209.14 1153.74,1209.14 1154.33,1209.14 1154.91,1209.14 1155.5,1209.14 1156.09,1209.14 1156.67,1209.14 1157.26,1209.14 1157.84,1209.14 1158.43,1209.14 1159.02,1209.14 1159.6,1209.14 1160.19,1209.14 1160.78,1209.14 1161.36,1209.14 1161.95,1209.14 1162.54,1209.14 1163.12,1209.14 1163.71,1209.14 1164.29,1209.14 1164.88,1209.14 1165.47,1209.14 1166.05,1209.14 1166.64,1209.14 1167.23,1209.14 1167.81,1209.14 1168.4,1209.14 1168.99,1209.14 1169.57,1209.14 1170.16,1209.14 1170.75,1209.14 1171.33,1209.14 1171.92,1209.14 1172.5,1209.14 1173.09,1209.14 1173.68,1209.14 1174.26,1209.14 1174.85,1209.14 1175.44,1209.14 1176.02,1209.14 1176.61,1209.14 1177.2,1209.14 1177.78,1209.14 1178.37,1209.14 1178.96,1209.14 1179.54,1209.14 1180.13,1209.14 1180.71,1209.14 1181.3,1209.14 1181.89,1209.14 1182.47,1209.14 1183.06,1209.14 1183.65,1209.14 1184.23,1209.14 1184.82,1209.14 1185.41,1209.14 1185.99,1209.14 1186.58,1209.14 1187.16,1209.14 1187.75,1209.14 1188.34,1209.14 1188.92,1209.14 1189.51,1209.14 1190.1,1209.14 1190.68,1209.14 1191.27,1209.14 1191.86,1209.14 1192.44,1209.14 1193.03,1209.14 1193.62,1209.14 1194.2,1209.14 1194.79,1209.14 1195.37,1209.14 1195.96,1209.14 1196.55,1209.14 1197.13,1209.14 1197.72,1209.14 1198.31,1209.14 1198.89,1209.14 1199.48,1209.14 1200.07,1209.14 1200.65,1209.14 1201.24,1209.14 1201.83,1209.14 1202.41,1209.14 1203,1209.14 1203.58,1209.14 1204.17,1209.14 1204.76,1209.14 1205.34,1209.14 1205.93,1209.14 1206.52,1209.14 1207.1,1209.14 1207.69,1209.14 1208.28,1209.14 1208.86,1209.14 1209.45,1209.14 1210.03,1209.14 1210.62,1209.14 1211.21,1209.14 1211.79,1209.14 1212.38,1209.14 1212.97,1209.14 1213.55,1209.14 1214.14,1209.14 1214.73,1209.14 1215.31,1209.14 1215.9,1209.14 1216.49,1209.14 1217.07,1209.14 1217.66,1209.14 1218.24,1209.14 1218.83,1209.14 1219.42,1209.14 1220,1209.14 1220.59,1209.14 1221.18,1209.14 1221.76,1209.14 1222.35,1209.14 1222.94,1209.14 1223.52,1209.14 1224.11,1209.14 1224.7,1209.14 1225.28,1209.14 1225.87,1209.14 1226.45,1209.14 1227.04,1209.14 1227.63,1209.14 1228.21,1209.14 1228.8,1209.14 1229.39,1209.14 1229.97,1209.14 1230.56,1209.14 1231.15,1209.14 1231.73,1209.14 1232.32,1209.14 1232.91,1209.14 1233.49,1209.14 1234.08,1209.14 1234.66,1209.14 1235.25,1209.14 1235.84,1209.14 1236.42,1209.14 1237.01,1209.14 1237.6,1209.14 1238.18,1209.14 1238.77,1209.14 1239.36,1209.14 1239.94,1209.14 1240.53,1209.14 1241.11,1209.14 1241.7,1209.14 1242.29,1209.14 1242.87,1209.14 1243.46,1209.14 1244.05,1209.14 1244.63,1209.14 1245.22,1209.14 1245.81,1209.14 1246.39,1209.14 1246.98,1209.14 1247.57,1209.14 1248.15,1209.14 1248.74,1209.14 1249.32,1209.14 1249.91,1209.14 1250.5,1209.14 1251.08,1209.14 1251.67,1209.14 1252.26,1209.14 1252.84,1209.14 1253.43,1209.14 1254.02,1209.14 1254.6,1209.14 1255.19,1209.14 1255.78,1209.14 1256.36,1209.14 1256.95,1209.14 1257.53,1209.14 1258.12,1209.14 1258.71,1209.14 1259.29,1209.14 1259.88,1209.14 1260.47,1209.14 1261.05,1209.14 1261.64,1209.14 1262.23,1209.14 1262.81,1209.14 1263.4,1209.14 1263.98,1209.14 1264.57,1209.14 1265.16,1209.14 1265.74,1209.14 1266.33,1209.14 1266.92,1209.14 1267.5,1209.14 1268.09,1209.14 1268.68,1209.14 1269.26,1209.14 1269.85,1209.14 1270.44,1209.14 1271.02,1209.14 1271.61,1209.14 1272.19,1209.14 1272.78,1209.14 1273.37,1209.14 1273.95,1209.14 1274.54,1209.14 1275.13,1209.14 1275.71,1209.14 1276.3,1209.14 1276.89,1209.14 1277.47,1209.14 1278.06,1209.14 1278.65,1209.14 1279.23,1209.14 1279.82,1209.14 1280.4,1209.14 1280.99,1209.14 1281.58,1209.14 1282.16,1209.14 1282.75,1209.14 1283.34,1209.14 1283.92,1209.14 1284.51,1209.14 1285.1,1209.14 1285.68,1209.14 1286.27,1209.14 1286.86,1209.14 1287.44,1209.14 1288.03,1209.14 1288.61,1209.14 1289.2,1209.14 1289.79,1209.14 1290.37,1209.14 1290.96,1209.14 1291.55,1209.14 1292.13,1209.14 1292.72,1209.14 1293.31,1209.14 1293.89,1209.14 1294.48,1209.14 1295.06,1209.14 1295.65,1209.14 1296.24,1209.14 1296.82,1209.14 1297.41,1209.14 1298,1209.14 1298.58,1209.14 1299.17,1209.14 1299.76,1209.14 1300.34,1209.14 1300.93,1209.14 1301.52,1209.14 1302.1,1209.14 1302.69,1209.14 1303.27,1209.14 1303.86,1209.14 1304.45,1209.14 1305.03,1209.14 1305.62,1209.14 1306.21,1209.14 1306.79,1209.14 1307.38,1209.14 1307.97,1209.14 1308.55,1209.14 1309.14,1209.14 1309.73,1209.14 1310.31,1209.14 1310.9,1209.14 1311.48,1209.14 1312.07,1209.14 1312.66,1209.14 1313.24,1209.14 1313.83,1209.14 1314.42,1209.14 1315,1209.14 1315.59,1209.14 1316.18,1209.14 1316.76,1209.14 1317.35,1209.14 1317.93,1209.14 1318.52,1209.14 1319.11,1209.14 1319.69,1209.14 1320.28,1209.14 1320.87,1209.14 1321.45,1209.14 1322.04,1209.14 1322.63,1209.14 1323.21,1209.14 1323.8,1209.14 1324.39,1209.14 1324.97,1209.14 1325.56,1209.14 1326.14,1209.14 1326.73,1209.14 1327.32,1209.14 1327.9,1209.14 1328.49,1209.14 1329.08,1209.14 1329.66,1209.14 1330.25,1209.14 1330.84,1209.14 1331.42,1209.14 1332.01,1209.14 1332.6,1209.14 1333.18,1209.14 1333.77,1209.14 1334.35,1209.14 1334.94,1209.14 1335.53,1209.14 1336.11,1209.14 1336.7,1209.14 1337.29,1209.14 1337.87,1209.14 1338.46,1209.14 1339.05,1209.14 1339.63,1209.14 1340.22,1209.14 1340.8,1209.14 1341.39,1209.14 1341.98,1209.14 1342.56,1209.14 1343.15,1209.14 1343.74,1209.14 1344.32,1209.14 1344.91,1209.14 1345.5,1209.14 1346.08,1209.14 1346.67,1209.14 1347.26,1209.14 1347.84,1209.14 1348.43,1209.14 1349.01,1209.14 1349.6,1209.14 1350.19,1209.14 1350.77,1209.14 1351.36,1209.14 1351.95,1209.14 1352.53,1209.14 1353.12,1209.14 1353.71,1209.14 1354.29,1209.14 1354.88,1209.14 1355.47,1209.14 1356.05,1209.14 1356.64,1209.14 1357.22,1209.14 1357.81,1209.14 1358.4,1209.14 1358.98,1209.14 1359.57,1209.14 1360.16,1209.14 1360.74,1209.14 1361.33,1209.14 1361.92,1209.14 1362.5,1209.14 1363.09,1209.14 1363.68,1209.14 1364.26,1209.14 1364.85,1209.14 1365.43,1209.14 1366.02,1209.14 1366.61,1209.14 1367.19,1209.14 1367.78,1209.14 1368.37,1209.14 1368.95,1209.14 1369.54,1209.14 1370.13,1209.14 1370.71,1209.14 1371.3,1209.14 1371.88,1209.14 1372.47,1209.14 1373.06,1209.14 1373.64,1209.14 1374.23,1209.14 1374.82,1209.14 1375.4,1209.14 1375.99,1209.14 1376.58,1209.14 1377.16,1209.14 1377.75,1209.14 1378.34,1209.14 1378.92,1209.14 1379.51,1209.14 1380.09,1209.14 1380.68,1209.14 1381.27,1209.14 1381.85,1209.14 1382.44,1209.14 1383.03,1209.14 1383.61,1209.14 1384.2,1209.14 1384.79,1209.14 1385.37,1209.14 1385.96,1209.14 1386.55,1209.14 1387.13,1209.14 1387.72,1209.14 1388.3,1209.14 1388.89,1209.14 1389.48,1209.14 1390.06,1209.14 1390.65,1209.14 1391.24,1209.14 1391.82,1209.14 1392.41,1209.14 1393,1209.14 1393.58,1209.14 1394.17,1209.14 1394.75,1209.14 1395.34,1209.14 1395.93,1209.14 1396.51,1209.14 1397.1,1209.14 1397.69,1209.14 1398.27,1209.14 1398.86,1209.14 1399.45,1209.14 1400.03,1209.14 1400.62,1209.14 1401.21,1209.14 1401.79,1209.14 1402.38,1209.14 1402.96,1209.14 1403.55,1209.14 1404.14,1209.14 1404.72,1209.14 1405.31,1209.14 1405.9,1209.14 1406.48,1209.14 1407.07,1209.14 1407.66,1209.14 1408.24,1209.14 1408.83,1209.14 1409.42,1209.14 1410,1209.14 1410.59,1209.14 1411.17,1209.14 1411.76,1209.14 1412.35,1209.14 1412.93,1209.14 1413.52,1209.14 1414.11,1209.14 1414.69,1209.14 1415.28,1209.14 1415.87,1209.14 1416.45,1209.14 1417.04,1209.14 1417.63,1209.14 1418.21,1209.14 1418.8,1209.14 1419.38,1209.14 1419.97,1209.14 1420.56,1209.14 1421.14,1209.14 1421.73,1209.14 1422.32,1209.14 1422.9,1209.14 1423.49,1209.14 1424.08,1209.14 1424.66,1209.14 1425.25,1209.14 1425.83,1209.14 1426.42,1209.14 1427.01,1209.14 1427.59,1209.14 1428.18,1209.14 1428.77,1209.14 1429.35,1209.14 1429.94,1209.14 1430.53,1209.14 1431.11,1209.14 1431.7,1209.14 1432.29,1209.14 1432.87,1209.14 1433.46,1209.14 1434.04,1209.14 1434.63,1209.14 1435.22,1209.14 1435.8,1209.14 1436.39,1209.14 1436.98,1209.14 1437.56,1209.14 1438.15,1209.14 1438.74,1209.14 1439.32,1209.14 1439.91,1209.14 1440.5,1209.14 1441.08,1209.14 1441.67,1209.14 1442.25,1209.14 1442.84,1209.14 1443.43,1209.14 1444.01,1209.14 1444.6,1209.14 1445.19,1209.14 1445.77,1209.14 1446.36,1209.14 1446.95,1209.14 1447.53,1209.14 1448.12,1209.14 1448.7,1209.14 1449.29,1209.14 1449.88,1209.14 1450.46,1209.14 1451.05,1209.14 1451.64,1209.14 1452.22,1209.14 1452.81,1209.14 1453.4,1209.14 1453.98,1209.14 1454.57,1209.14 1455.16,1209.14 1455.74,1209.14 1456.33,1209.14 1456.91,1209.14 1457.5,1209.14 1458.09,1209.14 1458.67,1209.14 1459.26,1209.14 1459.85,1209.14 1460.43,1209.14 1461.02,1209.14 1461.61,1209.14 1462.19,1209.14 1462.78,1209.14 1463.37,1209.14 1463.95,1209.14 1464.54,1209.14 1465.12,1209.14 1465.71,1209.14 1466.3,1209.14 1466.88,1209.14 1467.47,1209.14 1468.06,1209.14 1468.64,1209.14 1469.23,1209.14 1469.82,1209.14 1470.4,1209.14 1470.99,1209.14 1471.57,1209.14 1472.16,1209.14 1472.75,1209.14 1473.33,1209.14 1473.92,1209.14 1474.51,1209.14 1475.09,1209.14 1475.68,1209.14 1476.27,1209.14 1476.85,1209.14 1477.44,1209.14 1478.03,1209.14 1478.61,1209.14 1479.2,1209.14 1479.78,1209.14 1480.37,1209.14 1480.96,1209.14 1481.54,1209.14 1482.13,1209.14 1482.72,1209.14 1483.3,1209.14 1483.89,1209.14 1484.48,1209.14 1485.06,1209.14 1485.65,1209.14 1486.24,1209.14 1486.82,1209.14 1487.41,1209.14 1487.99,1209.14 1488.58,1209.14 1489.17,1209.14 1489.75,1209.14 1490.34,1209.14 1490.93,1209.14 1491.51,1209.14 1492.1,1209.14 1492.69,1209.14 1493.27,1209.14 1493.86,1209.14 1494.45,1209.14 1495.03,1209.14 1495.62,1209.14 1496.2,1209.14 1496.79,1209.14 1497.38,1209.14 1497.96,1209.14 1498.55,1209.14 1499.14,1209.14 1499.72,1209.14 1500.31,1209.14 1500.9,1209.14 1501.48,1209.14 1502.07,1209.14 1502.65,1209.14 1503.24,1209.14 1503.83,1209.14 1504.41,1209.14 1505,1209.14 1505.59,1209.14 1506.17,1209.14 1506.76,1209.14 1507.35,1209.14 1507.93,1209.14 1508.52,1209.14 1509.11,1209.14 1509.69,1209.14 1510.28,1209.14 1510.86,1209.14 1511.45,1209.14 1512.04,1209.14 1512.62,1209.14 1513.21,1209.14 1513.8,1209.14 1514.38,1209.14 1514.97,1209.14 1515.56,1209.14 1516.14,1209.14 1516.73,1209.14 1517.32,1209.14 1517.9,1209.14 1518.49,1209.14 1519.07,1209.14 1519.66,1209.14 1520.25,1209.14 1520.83,1209.14 1521.42,1209.14 1522.01,1209.14 1522.59,1209.14 1523.18,1209.14 1523.77,1209.14 1524.35,1209.14 1524.94,1209.14 1525.52,1209.14 1526.11,1209.14 1526.7,1209.14 1527.28,1209.14 1527.87,1209.14 1528.46,1209.14 1529.04,1209.14 1529.63,1209.14 1530.22,1209.14 1530.8,1209.14 1531.39,1209.14 1531.98,1209.14 1532.56,1209.14 1533.15,1209.14 1533.73,1209.14 1534.32,1209.14 1534.91,1209.14 1535.49,1209.14 1536.08,1209.14 1536.67,1209.14 1537.25,1209.14 1537.84,1209.14 1538.43,1209.14 1539.01,1209.14 1539.6,1209.14 1540.19,1209.14 1540.77,1209.14 1541.36,1209.14 1541.94,1209.14 1542.53,1209.14 1543.12,1209.14 1543.7,1209.14 1544.29,1209.14 1544.88,1209.14 1545.46,1209.14 1546.05,1209.14 1546.64,1209.14 1547.22,1209.14 1547.81,1209.14 1548.4,1209.14 1548.98,1209.14 1549.57,1209.14 1550.15,1209.14 1550.74,1209.14 1551.33,1209.14 1551.91,1209.14 1552.5,1209.14 1553.09,1209.14 1553.67,1209.14 1554.26,1209.14 1554.85,1209.14 1555.43,1209.14 1556.02,1209.14 1556.6,1209.14 1557.19,1209.14 1557.78,1209.14 1558.36,1209.14 1558.95,1209.14 1559.54,1209.14 1560.12,1209.14 1560.71,1209.14 1561.3,1209.14 1561.88,1209.14 1562.47,1209.14 1563.06,1209.14 1563.64,1209.14 1564.23,1209.14 1564.81,1209.14 1565.4,1209.14 1565.99,1209.14 1566.57,1209.14 1567.16,1209.14 1567.75,1209.14 1568.33,1209.14 1568.92,1209.14 1569.51,1209.14 1570.09,1209.14 1570.68,1209.14 1571.27,1209.14 1571.85,1209.14 1572.44,1209.14 1573.02,1209.14 1573.61,1209.14 1574.2,1209.14 1574.78,1209.14 1575.37,1209.14 1575.96,1209.14 1576.54,1209.14 1577.13,1209.14 1577.72,1209.14 1578.3,1209.14 1578.89,1209.14 1579.47,1209.14 1580.06,1209.14 1580.65,1209.14 1581.23,1209.14 1581.82,1209.14 1582.41,1209.14 1582.99,1209.14 1583.58,1209.14 1584.17,1209.14 1584.75,1209.14 1585.34,1209.14 1585.93,1209.14 1586.51,1209.14 1587.1,1209.14 1587.68,1209.14 1588.27,1209.14 1588.86,1209.14 1589.44,1209.14 1590.03,1209.14 1590.62,1209.14 1591.2,1209.14 1591.79,1209.14 1592.38,1209.14 1592.96,1209.14 1593.55,1209.14 1594.14,1209.14 1594.72,1209.14 1595.31,1209.14 1595.89,1209.14 1596.48,1209.14 1597.07,1209.14 1597.65,1209.14 1598.24,1209.14 1598.83,1209.14 1599.41,1209.14 1600,1209.14 1600.59,1209.14 1601.17,1209.14 1601.76,1209.14 1602.34,1209.14 1602.93,1209.14 1603.52,1209.14 1604.1,1209.14 1604.69,1209.14 1605.28,1209.14 1605.86,1209.14 1606.45,1209.14 1607.04,1209.14 1607.62,1209.14 1608.21,1209.14 1608.8,1209.14 1609.38,1209.14 1609.97,1209.14 1610.55,1209.14 1611.14,1209.14 1611.73,1209.14 1612.31,1209.14 1612.9,1209.14 1613.49,1209.14 1614.07,1209.14 1614.66,1209.14 1615.25,1209.14 1615.83,1209.14 1616.42,1209.14 1617.01,1209.14 1617.59,1209.14 1618.18,1209.14 1618.76,1209.14 1619.35,1209.14 1619.94,1209.14 1620.52,1209.14 1621.11,1209.14 1621.7,1209.14 1622.28,1209.14 1622.87,1209.14 1623.46,1209.14 1624.04,1209.14 1624.63,1209.14 1625.22,1209.14 1625.8,1209.14 1626.39,1209.14 1626.97,1209.14 1627.56,1209.14 1628.15,1209.14 1628.73,1209.14 1629.32,1209.14 1629.91,1209.14 1630.49,1209.14 1631.08,1209.14 1631.67,1209.14 1632.25,1209.14 1632.84,1209.14 1633.42,1209.14 1634.01,1209.14 1634.6,1209.14 1635.18,1209.14 1635.77,1209.14 1636.36,1209.14 1636.94,1209.14 1637.53,1209.14 1638.12,1209.14 1638.7,1209.14 1639.29,1209.14 1639.88,1209.14 1640.46,1209.14 1641.05,1209.14 1641.63,1209.14 1642.22,1209.14 1642.81,1209.14 1643.39,1209.14 1643.98,1209.14 1644.57,1209.14 1645.15,1209.14 1645.74,1209.14 1646.33,1209.14 1646.91,1209.14 1647.5,1209.14 1648.09,1209.14 1648.67,1209.14 1649.26,1209.14 1649.84,1209.14 1650.43,1209.14 1651.02,1209.14 1651.6,1209.14 1652.19,1209.14 1652.78,1209.14 1653.36,1209.14 1653.95,1209.14 1654.54,1209.14 1655.12,1209.14 1655.71,1209.14 1656.29,1209.14 1656.88,1209.14 1657.47,1209.14 1658.05,1209.14 1658.64,1209.14 1659.23,1209.14 1659.81,1209.14 1660.4,1209.14 1660.99,1209.14 1661.57,1209.14 1662.16,1209.14 1662.75,1209.14 1663.33,1209.14 1663.92,1209.14 1664.5,1209.14 1665.09,1209.14 1665.68,1209.14 1666.26,1209.14 1666.85,1209.14 1667.44,1209.14 1668.02,1209.14 1668.61,1209.14 1669.2,1209.14 1669.78,1209.14 1670.37,1209.14 1670.96,1209.14 1671.54,1209.14 1672.13,1209.14 1672.71,1209.14 1673.3,1209.14 1673.89,1209.14 1674.47,1209.14 1675.06,1209.14 1675.65,1209.14 1676.23,1209.14 1676.82,1209.14 1677.41,1209.14 1677.99,1209.14 1678.58,1209.14 1679.17,1209.14 1679.75,1209.14 1680.34,1209.14 1680.92,1209.14 1681.51,1209.14 1682.1,1209.14 1682.68,1209.14 1683.27,1209.14 1683.86,1209.14 1684.44,1209.14 1685.03,1209.14 1685.62,1209.14 1686.2,1209.14 1686.79,1209.14 1687.37,1209.14 1687.96,1209.14 1688.55,1209.14 1689.13,1209.14 1689.72,1209.14 1690.31,1209.14 1690.89,1209.14 1691.48,1209.14 1692.07,1209.14 1692.65,1209.14 1693.24,1209.14 1693.83,1209.14 1694.41,1209.14 1695,1209.14 1695.58,1209.14 1696.17,1209.14 1696.76,1209.14 1697.34,1209.14 1697.93,1209.14 1698.52,1209.14 1699.1,1209.14 1699.69,1209.14 1700.28,1209.14 1700.86,1209.14 1701.45,1209.14 1702.04,1209.14 1702.62,1209.14 1703.21,1209.14 1703.79,1209.14 1704.38,1209.14 1704.97,1209.14 1705.55,1209.14 1706.14,1209.14 1706.73,1209.14 1707.31,1209.14 1707.9,1209.14 1708.49,1209.14 1709.07,1209.14 1709.66,1209.14 1710.24,1209.14 1710.83,1209.14 1711.42,1209.14 1712,1209.14 1712.59,1209.14 1713.18,1209.14 1713.76,1209.14 1714.35,1209.14 1714.94,1209.14 1715.52,1209.14 1716.11,1209.14 1716.7,1209.14 1717.28,1209.14 1717.87,1209.14 1718.45,1209.14 1719.04,1209.14 1719.63,1209.14 1720.21,1209.14 1720.8,1209.14 1721.39,1209.14 1721.97,1209.14 1722.56,1209.14 1723.15,1209.14 1723.73,1209.14 1724.32,1209.14 1724.91,1209.14 1725.49,1209.14 1726.08,1209.14 1726.66,1209.14 1727.25,1209.14 1727.84,1209.14 1728.42,1209.14 1729.01,1209.14 1729.6,1209.14 1730.18,1209.14 1730.77,1209.14 1731.36,1209.14 1731.94,1209.14 1732.53,1209.14 1733.11,1209.14 1733.7,1209.14 1734.29,1209.14 1734.87,1209.14 1735.46,1209.14 1736.05,1209.14 1736.63,1209.14 1737.22,1209.14 1737.81,1209.14 1738.39,1209.14 1738.98,1209.14 1739.57,1209.14 1740.15,1209.14 1740.74,1209.14 1741.32,1209.14 1741.91,1209.14 1742.5,1209.14 1743.08,1209.14 1743.67,1209.14 1744.26,1209.14 1744.84,1209.14 1745.43,1209.14 1746.02,1209.14 1746.6,1209.14 1747.19,1209.14 1747.78,1209.14 1748.36,1209.14 1748.95,1209.14 1749.53,1209.14 1750.12,1209.14 1750.71,1209.14 1751.29,1209.14 1751.88,1209.14 1752.47,1209.14 1753.05,1209.14 1753.64,1209.14 1754.23,1209.14 1754.81,1209.14 1755.4,1209.14 1755.99,1209.14 1756.57,1209.14 1757.16,1209.14 1757.74,1209.14 1758.33,1209.14 1758.92,1209.14 1759.5,1209.14 1760.09,1209.14 1760.68,1209.14 1761.26,1209.14 1761.85,1209.14 1762.44,1209.14 1763.02,1209.14 1763.61,1209.14 1764.19,1209.14 1764.78,1209.14 1765.37,1209.14 1765.95,1209.14 1766.54,1209.14 1767.13,1209.14 1767.71,1209.14 1768.3,1209.14 1768.89,1209.14 1769.47,1209.14 1770.06,1209.14 1770.65,1209.14 1771.23,1209.14 1771.82,1209.14 1772.4,1209.14 1772.99,1209.14 1773.58,1209.14 1774.16,1209.14 1774.75,1209.14 1775.34,1209.14 1775.92,1209.14 1776.51,1209.14 1777.1,1209.14 1777.68,1209.14 1778.27,1209.14 1778.86,1209.14 1779.44,1209.14 1780.03,1209.14 1780.61,1209.14 1781.2,1209.14 1781.79,1209.14 1782.37,1209.14 1782.96,1209.14 1783.55,1209.14 1784.13,1209.14 1784.72,1209.14 1785.31,1209.14 1785.89,1209.14 1786.48,1209.14 1787.06,1209.14 1787.65,1209.14 1788.24,1209.14 1788.82,1209.14 1789.41,1209.14 1790,1209.14 1790.58,1209.14 1791.17,1209.14 1791.76,1209.14 1792.34,1209.14 1792.93,1209.14 1793.52,1209.14 1794.1,1209.14 1794.69,1209.14 1795.27,1209.14 1795.86,1209.14 1796.45,1209.14 1797.03,1209.14 1797.62,1209.14 1798.21,1209.14 1798.79,1209.14 1799.38,1209.14 1799.97,1209.14 1800.55,1209.14 1801.14,1209.14 1801.73,1209.14 1802.31,1209.14 1802.9,1209.14 1803.48,1209.14 1804.07,1209.14 1804.66,1209.14 1805.24,1209.14 1805.83,1209.14 1806.42,1209.14 1807,1209.14 1807.59,1209.14 1808.18,1209.14 1808.76,1209.14 1809.35,1209.14 1809.94,1209.14 1810.52,1209.14 1811.11,1209.14 1811.69,1209.14 1812.28,1209.14 1812.87,1209.14 1813.45,1209.14 1814.04,1209.14 1814.63,1209.14 1815.21,1209.14 1815.8,1209.14 1816.39,1209.14 1816.97,1209.14 1817.56,1209.14 1818.14,1209.14 1818.73,1209.14 1819.32,1209.14 1819.9,1209.14 1820.49,1209.14 1821.08,1209.14 1821.66,1209.14 1822.25,1209.14 1822.84,1209.14 1823.42,1209.14 1824.01,1209.14 1824.6,1209.14 1825.18,1209.14 1825.77,1209.14 1826.35,1209.14 1826.94,1209.14 1827.53,1209.14 1828.11,1209.14 1828.7,1209.14 1829.29,1209.14 1829.87,1209.14 1830.46,1209.14 1831.05,1209.14 1831.63,1209.14 1832.22,1209.14 1832.81,1209.14 1833.39,1209.14 1833.98,1209.14 1834.56,1209.14 1835.15,1209.14 1835.74,1209.14 1836.32,1209.14 1836.91,1209.14 1837.5,1209.14 1838.08,1209.14 1838.67,1209.14 1839.26,1209.14 1839.84,1209.14 1840.43,1209.14 1841.01,1209.14 1841.6,1209.14 1842.19,1209.14 1842.77,1209.14 1843.36,1209.14 1843.95,1209.14 1844.53,1209.14 1845.12,1209.14 1845.71,1209.14 1846.29,1209.14 1846.88,1209.14 1847.47,1209.14 1848.05,1209.14 1848.64,1209.14 1849.22,1209.14 1849.81,1209.14 1850.4,1209.14 1850.98,1209.14 1851.57,1209.14 1852.16,1209.14 1852.74,1209.14 1853.33,1209.14 1853.92,1209.14 1854.5,1209.14 1855.09,1209.14 1855.68,1209.14 1856.26,1209.14 1856.85,1209.14 1857.43,1209.14 1858.02,1209.14 1858.61,1209.14 1859.19,1209.14 1859.78,1209.14 1860.37,1209.14 1860.95,1209.14 1861.54,1209.14 1862.13,1209.14 1862.71,1209.14 1863.3,1209.14 1863.88,1209.14 1864.47,1209.14 1865.06,1209.14 1865.64,1209.14 1866.23,1209.14 1866.82,1209.14 1867.4,1209.14 1867.99,1209.14 1868.58,1209.14 1869.16,1209.14 1869.75,1209.14 1870.34,1209.14 1870.92,1209.14 1871.51,1209.14 1872.09,1209.14 1872.68,1209.14 1873.27,1209.14 1873.85,1209.14 1874.44,1209.14 1875.03,1209.14 1875.61,1209.14 1876.2,1209.14 1876.79,1209.14 1877.37,1209.14 1877.96,1209.14 1878.55,1209.14 1879.13,1209.14 1879.72,1209.14 1880.3,1209.14 1880.89,1209.14 1881.48,1209.14 1882.06,1209.14 1882.65,1209.14 1883.24,1209.14 1883.82,1209.14 1884.41,1209.14 1885,1209.14 1885.58,1209.14 1886.17,1209.14 1886.76,1209.14 1887.34,1209.14 1887.93,1209.14 1888.51,1209.14 1889.1,1209.14 1889.69,1209.14 1890.27,1209.14 1890.86,1209.14 1891.45,1209.14 1892.03,1209.14 1892.62,1209.14 1893.21,1209.14 1893.79,1209.14 1894.38,1209.14 1894.96,1209.14 1895.55,1209.14 1896.14,1209.14 1896.72,1209.14 1897.31,1209.14 1897.9,1209.14 1898.48,1209.14 1899.07,1209.14 1899.66,1209.14 1900.24,1209.14 1900.83,1209.14 1901.42,1209.14 1902,1209.14 1902.59,1209.14 1903.17,1209.14 1903.76,1209.14 1904.35,1209.14 1904.93,1209.14 1905.52,1209.14 1906.11,1209.14 1906.69,1209.14 1907.28,1209.14 1907.87,1209.14 1908.45,1209.14 1909.04,1209.14 1909.63,1209.14 1910.21,1209.14 1910.8,1209.14 1911.38,1209.14 1911.97,1209.14 1912.56,1209.14 1913.14,1209.14 1913.73,1209.14 1914.32,1209.14 1914.9,1209.14 1915.49,1209.14 1916.08,1209.14 1916.66,1209.14 1917.25,1209.14 1917.83,1209.14 1918.42,1209.14 1919.01,1209.14 1919.59,1209.14 1920.18,1209.14 1920.77,1209.14 1921.35,1209.14 1921.94,1209.14 1922.53,1209.14 1923.11,1209.14 1923.7,1209.14 1924.29,1209.14 1924.87,1209.14 1925.46,1209.14 1926.04,1209.14 1926.63,1209.14 1927.22,1209.14 1927.8,1209.14 1928.39,1209.14 1928.98,1209.14 1929.56,1209.14 1930.15,1209.14 1930.74,1209.14 1931.32,1209.14 1931.91,1209.14 1932.5,1209.14 1933.08,1209.14 1933.67,1209.14 1934.25,1209.14 1934.84,1209.14 1935.43,1209.14 1936.01,1209.14 1936.6,1209.14 1937.19,1209.14 1937.77,1209.14 1938.36,1209.14 1938.95,1209.14 1939.53,1209.14 1940.12,1209.14 1940.71,1209.14 1941.29,1209.14 1941.88,1209.14 1942.46,1209.14 1943.05,1209.14 1943.64,1209.14 1944.22,1209.14 1944.81,1209.14 1945.4,1209.14 1945.98,1209.14 1946.57,1209.14 1947.16,1209.14 1947.74,1209.14 1948.33,1209.14 1948.91,1209.14 1949.5,1209.14 1950.09,1209.14 1950.67,1209.14 1951.26,1209.14 1951.85,1209.14 1952.43,1209.14 1953.02,1209.14 1953.61,1209.14 1954.19,1209.14 1954.78,1209.14 1955.37,1209.14 1955.95,1209.14 1956.54,1209.14 1957.12,1209.14 1957.71,1209.14 1958.3,1209.14 1958.88,1209.14 1959.47,1209.14 1960.06,1209.14 1960.64,1209.14 1961.23,1209.14 1961.82,1209.14 1962.4,1209.14 1962.99,1209.14 1963.58,1209.14 1964.16,1209.14 1964.75,1209.14 1965.33,1209.14 1965.92,1209.14 1966.51,1209.14 1967.09,1209.14 1967.68,1209.14 1968.27,1209.14 1968.85,1209.14 1969.44,1209.14 1970.03,1209.14 1970.61,1209.14 1971.2,1209.14 1971.78,1209.14 1972.37,1209.14 1972.96,1209.14 1973.54,1209.14 1974.13,1209.14 1974.72,1209.14 1975.3,1209.14 1975.89,1209.14 1976.48,1209.14 1977.06,1209.14 1977.65,1209.14 1978.24,1209.14 1978.82,1209.14 1979.41,1209.14 1979.99,1209.14 1980.58,1209.14 1981.17,1209.14 1981.75,1209.14 1982.34,1209.14 1982.93,1209.14 1983.51,1209.14 1984.1,1209.14 1984.69,1209.14 1985.27,1209.14 1985.86,1209.14 1986.45,1209.14 1987.03,1209.14 1987.62,1209.14 1988.2,1209.14 1988.79,1209.14 1989.38,1209.14 1989.96,1209.14 1990.55,1209.14 1991.14,1209.14 1991.72,1209.14 1992.31,1209.14 1992.9,1209.14 1993.48,1209.14 1994.07,1209.14 1994.65,1209.14 1995.24,1209.14 1995.83,1209.14 1996.41,1209.14 1997,1209.14 1997.59,1209.14 1998.17,1209.14 1998.76,1209.14 1999.35,1209.14 1999.93,1209.14 2000.52,1209.14 2001.11,1209.14 2001.69,1209.14 2002.28,1209.14 2002.86,1209.14 2003.45,1209.14 2004.04,1209.14 2004.62,1209.14 2005.21,1209.14 2005.8,1209.14 2006.38,1209.14 2006.97,1209.14 2007.56,1209.14 2008.14,1209.14 2008.73,1209.14 2009.32,1209.14 2009.9,1209.14 2010.49,1209.14 2011.07,1209.14 2011.66,1209.14 2012.25,1209.14 2012.83,1209.14 2013.42,1209.14 2014.01,1209.14 2014.59,1209.14 2015.18,1209.14 2015.77,1209.14 2016.35,1209.14 2016.94,1209.14 2017.53,1209.14 2018.11,1209.14 2018.7,1209.14 2019.28,1209.14 2019.87,1209.14 2020.46,1209.14 2021.04,1209.14 2021.63,1209.14 2022.22,1209.14 2022.8,1209.14 2023.39,1209.14 2023.98,1209.14 2024.56,1209.14 2025.15,1209.14 2025.73,1209.14 2026.32,1209.14 2026.91,1209.14 2027.49,1209.14 2028.08,1209.14 2028.67,1209.14 2029.25,1209.14 2029.84,1209.14 2030.43,1209.14 2031.01,1209.14 2031.6,1209.14 2032.19,1209.14 2032.77,1209.14 2033.36,1209.14 2033.94,1209.14 2034.53,1209.14 2035.12,1209.14 2035.7,1209.14 2036.29,1209.14 2036.88,1209.14 2037.46,1209.14 2038.05,1209.14 2038.64,1209.14 2039.22,1209.14 2039.81,1209.14 2040.4,1209.14 2040.98,1209.14 2041.57,1209.14 2042.15,1209.14 2042.74,1209.14 2043.33,1209.14 2043.91,1209.14 2044.5,1209.14 2045.09,1209.14 2045.67,1209.14 2046.26,1209.14 2046.85,1209.14 2047.43,1209.14 2048.02,1209.14 2048.6,1209.14 2049.19,1209.14 2049.78,1209.14 2050.36,1209.14 2050.95,1209.14 2051.54,1209.14 2052.12,1209.14 2052.71,1209.14 2053.3,1209.14 2053.88,1209.14 2054.47,1209.14 2055.06,1209.14 2055.64,1209.14 2056.23,1209.14 2056.81,1209.14 2057.4,1209.14 2057.99,1209.14 2058.57,1209.14 2059.16,1209.14 2059.75,1209.14 2060.33,1209.14 2060.92,1209.14 2061.51,1209.14 2062.09,1209.14 2062.68,1209.14 2063.27,1209.14 2063.85,1209.14 2064.44,1209.14 2065.02,1209.14 2065.61,1209.14 2066.2,1209.14 2066.78,1209.14 2067.37,1209.14 2067.96,1209.14 2068.54,1209.14 2069.13,1209.14 2069.72,1209.14 2070.3,1209.14 2070.89,1209.14 2071.48,1209.14 2072.06,1209.14 2072.65,1209.14 2073.23,1209.14 2073.82,1209.14 2074.41,1209.14 2074.99,1209.14 2075.58,1209.14 2076.17,1209.14 2076.75,1209.14 2077.34,1209.14 2077.93,1209.14 2078.51,1209.14 2079.1,1209.14 2079.68,1209.14 2080.27,1209.14 2080.86,1209.14 2081.44,1209.14 2082.03,1209.14 2082.62,1209.14 2083.2,1209.14 2083.79,1209.14 2084.38,1209.14 2084.96,1209.14 2085.55,1209.14 2086.14,1209.14 2086.72,1209.14 2087.31,1209.14 2087.89,1209.14 2088.48,1209.14 2089.07,1209.14 2089.65,1209.14 2090.24,1209.14 2090.83,1209.14 2091.41,1209.14 2092,1209.14 2092.59,1209.14 2093.17,1209.14 2093.76,1209.14 2094.35,1209.14 2094.93,1209.14 2095.52,1209.14 2096.1,1209.14 2096.69,1209.14 2097.28,1209.14 2097.86,1209.14 2098.45,1209.14 2099.04,1209.14 2099.62,1209.14 2100.21,1209.14 2100.8,1209.14 2101.38,1209.14 2101.97,1209.14 2102.55,1209.14 2103.14,1209.14 2103.73,1209.14 2104.31,1209.14 2104.9,1209.14 2105.49,1209.14 2106.07,1209.14 2106.66,1209.14 2107.25,1209.14 2107.83,1209.14 2108.42,1209.14 2109.01,1209.14 2109.59,1209.14 2110.18,1209.14 2110.76,1209.14 2111.35,1209.14 2111.94,1209.14 2112.52,1209.14 2113.11,1209.14 2113.7,1209.14 2114.28,1209.14 2114.87,1209.14 2115.46,1209.14 2116.04,1209.14 2116.63,1209.14 2117.22,1209.14 2117.8,1209.14 2118.39,1209.14 2118.97,1209.14 2119.56,1209.14 2120.15,1209.14 2120.73,1209.14 2121.32,1209.14 2121.91,1209.14 2122.49,1209.14 2123.08,1209.14 2123.67,1209.14 2124.25,1209.14 2124.84,1209.14 2125.42,1209.14 2126.01,1209.14 2126.6,1209.14 2127.18,1209.14 2127.77,1209.14 2128.36,1209.14 2128.94,1209.14 2129.53,1209.14 2130.12,1209.14 2130.7,1209.14 2131.29,1209.14 2131.88,1209.14 2132.46,1209.14 2133.05,1209.14 2133.63,1209.14 2134.22,1209.14 2134.81,1209.14 2135.39,1209.14 2135.98,1209.14 2136.57,1209.14 2137.15,1209.14 2137.74,1209.14 2138.33,1209.14 2138.91,1209.14 2139.5,1209.14 2140.09,1209.14 2140.67,1209.14 2141.26,1209.14 2141.84,1209.14 2142.43,1209.14 2143.02,1209.14 2143.6,1209.14 2144.19,1209.14 2144.78,1209.14 2145.36,1209.14 2145.95,1209.14 2146.54,1209.14 2147.12,1209.14 2147.71,1209.14 2148.3,1209.14 2148.88,1209.14 2149.47,1209.14 2150.05,1209.14 2150.64,1209.14 2151.23,1209.14 2151.81,1209.14 2152.4,1209.14 2152.99,1209.14 2153.57,1209.14 2154.16,1209.14 2154.75,1209.14 2155.33,1209.14 2155.92,1209.14 2156.5,1209.14 2157.09,1209.14 2157.68,1209.14 2158.26,1209.14 \"/>\n<path clip-path=\"url(#clip442)\" d=\"M986.025 1209.1 L986.612 1209.1 L987.198 1209.1 L987.785 1209.1 L988.371 1209.1 L988.957 1209.1 L989.544 1209.1 L990.13 1209.1 L990.717 1209.1 L991.303 1209.1 L991.889 1209.1 L992.476 1209.1 L993.062 1209.1 L993.649 1209.1 L994.235 1209.1 L994.822 1209.1 L995.408 1209.1 L995.994 1209.1 L996.581 1209.1 L997.167 1209.1 L997.754 1209.1 L998.34 1209.1 L998.926 1209.1 L999.513 1209.1 L1000.1 1209.1 L1000.69 1209.1 L1001.27 1209.1 L1001.86 1209.1 L1002.44 1209.1 L1003.03 1209.1 L1003.62 1209.1 L1004.2 1209.1 L1004.79 1209.1 L1005.38 1209.1 L1005.96 1209.1 L1006.55 1209.1 L1007.14 1209.1 L1007.72 1209.1 L1008.31 1209.1 L1008.9 1209.1 L1009.48 1209.1 L1010.07 1209.1 L1010.65 1209.1 L1011.24 1209.1 L1011.83 1209.1 L1012.41 1209.1 L1013 1209.1 L1013.59 1209.1 L1014.17 1209.1 L1014.76 1209.1 L1015.35 1209.1 L1015.93 1209.1 L1016.52 1209.1 L1017.11 1209.1 L1017.69 1209.1 L1018.28 1209.1 L1018.86 1209.1 L1019.45 1209.1 L1020.04 1209.1 L1020.62 1209.1 L1021.21 1209.1 L1021.8 1209.1 L1022.38 1209.1 L1022.97 1209.1 L1023.56 1209.1 L1024.14 1209.1 L1024.73 1209.1 L1025.32 1209.1 L1025.9 1209.1 L1026.49 1209.1 L1027.07 1209.1 L1027.66 1209.1 L1028.25 1209.1 L1028.83 1209.1 L1029.42 1209.1 L1030.01 1209.1 L1030.59 1209.1 L1031.18 1209.1 L1031.77 1209.1 L1032.35 1209.1 L1032.94 1209.1 L1033.52 1209.1 L1034.11 1209.1 L1034.7 1209.1 L1035.28 1209.1 L1035.87 1209.1 L1036.46 1209.1 L1037.04 1209.1 L1037.63 1209.1 L1038.22 1209.1 L1038.8 1209.1 L1039.39 1209.1 L1039.98 1209.1 L1040.56 1209.1 L1041.15 1209.1 L1041.73 1209.1 L1042.32 1209.1 L1042.91 1209.1 L1043.49 1209.1 L1044.08 1209.1 L1044.67 1209.1 L1045.25 1209.1 L1045.84 1209.1 L1046.43 1209.1 L1047.01 1209.1 L1047.6 1209.1 L1048.19 1209.1 L1048.77 1209.1 L1049.36 1209.1 L1049.94 1209.1 L1050.53 1209.1 L1051.12 1209.1 L1051.7 1209.1 L1052.29 1209.1 L1052.88 1209.1 L1053.46 1209.1 L1054.05 1209.1 L1054.64 1209.1 L1055.22 1209.1 L1055.81 1209.1 L1056.39 1209.1 L1056.98 1209.1 L1057.57 1209.1 L1058.15 1209.1 L1058.74 1209.1 L1059.33 1209.1 L1059.91 1209.1 L1060.5 1209.1 L1061.09 1209.1 L1061.67 1209.1 L1062.26 1209.1 L1062.85 1209.1 L1063.43 1209.1 L1064.02 1209.1 L1064.6 1209.1 L1065.19 1209.1 L1065.78 1209.1 L1066.36 1209.1 L1066.95 1209.1 L1067.54 1209.1 L1068.12 1209.1 L1068.71 1209.1 L1069.3 1209.1 L1069.88 1209.1 L1070.47 1209.1 L1071.06 1209.1 L1071.64 1209.1 L1072.23 1209.1 L1072.81 1209.1 L1073.4 1209.1 L1073.99 1209.1 L1074.57 1209.1 L1075.16 1209.1 L1075.75 1209.1 L1076.33 1209.1 L1076.92 1209.1 L1077.51 1209.1 L1078.09 1209.1 L1078.68 1209.1 L1079.26 1209.1 L1079.85 1209.1 L1080.44 1209.1 L1081.02 1209.1 L1081.61 1209.1 L1082.2 1209.1 L1082.78 1209.1 L1083.37 1209.1 L1083.96 1209.1 L1084.54 1209.1 L1085.13 1209.1 L1085.72 1209.1 L1086.3 1209.1 L1086.89 1209.1 L1087.47 1209.1 L1088.06 1209.1 L1088.65 1209.1 L1089.23 1209.1 L1089.82 1209.1 L1090.41 1209.1 L1090.99 1209.1 L1091.58 1209.1 L1092.17 1209.1 L1092.75 1209.1 L1093.34 1209.1 L1093.93 1209.1 L1094.51 1209.1 L1095.1 1209.1 L1095.68 1209.1 L1096.27 1209.1 L1096.86 1209.1 L1097.44 1209.1 L1098.03 1209.1 L1098.62 1209.1 L1099.2 1209.1 L1099.79 1209.1 L1100.38 1209.1 L1100.96 1209.1 L1101.55 1209.1 L1102.14 1209.1 L1102.72 1209.1 L1103.31 1209.1 L1103.89 1209.1 L1104.48 1209.1 L1105.07 1209.1 L1105.65 1209.1 L1106.24 1209.1 L1106.83 1209.1 L1107.41 1209.1 L1108 1209.1 L1108.59 1209.1 L1109.17 1209.1 L1109.76 1209.1 L1110.34 1209.1 L1110.93 1209.1 L1111.52 1209.1 L1112.1 1209.1 L1112.69 1209.1 L1113.28 1209.1 L1113.86 1209.1 L1114.45 1209.1 L1115.04 1209.1 L1115.62 1209.1 L1116.21 1209.1 L1116.8 1209.1 L1117.38 1209.1 L1117.97 1209.1 L1118.55 1209.1 L1119.14 1209.1 L1119.73 1209.1 L1120.31 1209.1 L1120.9 1209.1 L1121.49 1209.1 L1122.07 1209.1 L1122.66 1209.1 L1123.25 1209.1 L1123.83 1209.1 L1124.42 1209.1 L1125.01 1209.1 L1125.59 1209.1 L1126.18 1209.1 L1126.76 1209.1 L1127.35 1209.1 L1127.94 1209.1 L1128.52 1209.1 L1129.11 1209.1 L1129.7 1209.1 L1130.28 1209.1 L1130.87 1209.1 L1131.46 1209.1 L1132.04 1209.1 L1132.63 1209.1 L1133.21 1209.1 L1133.8 1209.1 L1134.39 1209.1 L1134.97 1209.1 L1135.56 1209.1 L1136.15 1209.1 L1136.73 1209.1 L1137.32 1209.1 L1137.91 1209.1 L1138.49 1209.1 L1139.08 1209.1 L1139.67 1209.1 L1140.25 1209.1 L1140.84 1209.1 L1141.42 1209.1 L1142.01 1209.1 L1142.6 1209.1 L1143.18 1209.1 L1143.77 1209.1 L1144.36 1209.1 L1144.94 1209.1 L1145.53 1209.1 L1146.12 1209.1 L1146.7 1209.1 L1147.29 1209.1 L1147.88 1209.1 L1148.46 1209.1 L1149.05 1209.1 L1149.63 1209.1 L1150.22 1209.1 L1150.81 1209.1 L1151.39 1209.1 L1151.98 1209.1 L1152.57 1209.1 L1153.15 1209.1 L1153.74 1209.1 L1154.33 1209.1 L1154.91 1209.1 L1155.5 1209.1 L1156.09 1209.1 L1156.67 1209.1 L1157.26 1209.1 L1157.84 1209.1 L1158.43 1209.1 L1159.02 1209.1 L1159.6 1209.1 L1160.19 1209.1 L1160.78 1209.1 L1161.36 1209.1 L1161.95 1209.1 L1162.54 1209.1 L1163.12 1209.1 L1163.71 1209.1 L1164.29 1209.1 L1164.88 1209.1 L1165.47 1209.1 L1166.05 1209.1 L1166.64 1209.1 L1167.23 1209.1 L1167.81 1209.1 L1168.4 1209.1 L1168.99 1209.1 L1169.57 1209.1 L1170.16 1209.1 L1170.75 1209.1 L1171.33 1209.1 L1171.92 1209.1 L1172.5 1209.1 L1173.09 1209.1 L1173.68 1209.1 L1174.26 1209.1 L1174.85 1209.1 L1175.44 1209.1 L1176.02 1209.1 L1176.61 1209.1 L1177.2 1209.1 L1177.78 1209.1 L1178.37 1209.1 L1178.96 1209.1 L1179.54 1209.1 L1180.13 1209.1 L1180.71 1209.1 L1181.3 1209.1 L1181.89 1209.1 L1182.47 1209.1 L1183.06 1209.1 L1183.65 1209.1 L1184.23 1209.1 L1184.82 1209.1 L1185.41 1209.1 L1185.99 1209.1 L1186.58 1209.1 L1187.16 1209.1 L1187.75 1209.1 L1188.34 1209.1 L1188.92 1209.1 L1189.51 1209.1 L1190.1 1209.1 L1190.68 1209.1 L1191.27 1209.1 L1191.86 1209.1 L1192.44 1209.1 L1193.03 1209.1 L1193.62 1209.1 L1194.2 1209.1 L1194.79 1209.1 L1195.37 1209.1 L1195.96 1209.1 L1196.55 1209.1 L1197.13 1209.1 L1197.72 1209.1 L1198.31 1209.1 L1198.89 1209.1 L1199.48 1209.1 L1200.07 1209.1 L1200.65 1209.1 L1201.24 1209.1 L1201.83 1209.1 L1202.41 1209.1 L1203 1209.1 L1203.58 1209.1 L1204.17 1209.1 L1204.76 1209.1 L1205.34 1209.1 L1205.93 1209.1 L1206.52 1209.1 L1207.1 1209.1 L1207.69 1209.1 L1208.28 1209.1 L1208.86 1209.1 L1209.45 1209.1 L1210.03 1209.1 L1210.62 1209.1 L1211.21 1209.1 L1211.79 1209.1 L1212.38 1209.1 L1212.97 1209.1 L1213.55 1209.1 L1214.14 1209.1 L1214.73 1209.1 L1215.31 1209.1 L1215.9 1209.1 L1216.49 1209.1 L1217.07 1209.1 L1217.66 1209.1 L1218.24 1209.1 L1218.83 1209.1 L1219.42 1209.1 L1220 1209.1 L1220.59 1209.1 L1221.18 1209.1 L1221.76 1209.1 L1222.35 1209.1 L1222.94 1209.1 L1223.52 1209.1 L1224.11 1209.1 L1224.7 1209.1 L1225.28 1209.1 L1225.87 1209.1 L1226.45 1209.1 L1227.04 1209.1 L1227.63 1209.1 L1228.21 1209.1 L1228.8 1209.1 L1229.39 1209.1 L1229.97 1209.1 L1230.56 1209.1 L1231.15 1209.1 L1231.73 1209.1 L1232.32 1209.1 L1232.91 1209.1 L1233.49 1209.1 L1234.08 1209.1 L1234.66 1209.1 L1235.25 1209.1 L1235.84 1209.1 L1236.42 1209.1 L1237.01 1209.1 L1237.6 1209.1 L1238.18 1209.1 L1238.77 1209.1 L1239.36 1209.1 L1239.94 1209.1 L1240.53 1209.1 L1241.11 1209.1 L1241.7 1209.1 L1242.29 1209.1 L1242.87 1209.1 L1243.46 1209.1 L1244.05 1209.1 L1244.63 1209.1 L1245.22 1209.1 L1245.81 1209.1 L1246.39 1209.1 L1246.98 1209.1 L1247.57 1209.1 L1248.15 1209.1 L1248.74 1209.1 L1249.32 1209.1 L1249.91 1209.1 L1250.5 1209.1 L1251.08 1209.1 L1251.67 1209.1 L1252.26 1209.1 L1252.84 1209.1 L1253.43 1209.1 L1254.02 1209.1 L1254.6 1209.1 L1255.19 1209.1 L1255.78 1209.1 L1256.36 1209.1 L1256.95 1209.1 L1257.53 1209.1 L1258.12 1209.1 L1258.71 1209.1 L1259.29 1209.1 L1259.88 1209.1 L1260.47 1209.1 L1261.05 1209.1 L1261.64 1209.1 L1262.23 1209.1 L1262.81 1209.1 L1263.4 1209.1 L1263.98 1209.1 L1264.57 1209.1 L1265.16 1209.1 L1265.74 1209.1 L1266.33 1209.1 L1266.92 1209.1 L1267.5 1209.1 L1268.09 1209.1 L1268.68 1209.1 L1269.26 1209.1 L1269.85 1209.1 L1270.44 1209.1 L1271.02 1209.1 L1271.61 1209.1 L1272.19 1209.1 L1272.78 1209.1 L1273.37 1209.1 L1273.95 1209.1 L1274.54 1209.1 L1275.13 1209.1 L1275.71 1209.1 L1276.3 1209.1 L1276.89 1209.1 L1277.47 1209.1 L1278.06 1209.1 L1278.65 1209.1 L1279.23 1209.1 L1279.82 1209.1 L1280.4 1209.1 L1280.99 1209.1 L1281.58 1209.1 L1282.16 1209.1 L1282.75 1209.1 L1283.34 1209.1 L1283.92 1209.1 L1284.51 1209.1 L1285.1 1209.1 L1285.68 1209.1 L1286.27 1209.1 L1286.86 1209.1 L1287.44 1209.1 L1288.03 1209.1 L1288.61 1209.1 L1289.2 1209.1 L1289.79 1209.1 L1290.37 1209.1 L1290.96 1209.1 L1291.55 1209.1 L1292.13 1209.1 L1292.72 1209.1 L1293.31 1209.1 L1293.89 1209.1 L1294.48 1209.1 L1295.06 1209.1 L1295.65 1209.1 L1296.24 1209.1 L1296.82 1209.1 L1297.41 1209.1 L1298 1209.1 L1298.58 1209.1 L1299.17 1209.1 L1299.76 1209.1 L1300.34 1209.1 L1300.93 1209.1 L1301.52 1209.1 L1302.1 1209.1 L1302.69 1209.1 L1303.27 1209.1 L1303.86 1209.1 L1304.45 1209.1 L1305.03 1209.1 L1305.62 1209.1 L1306.21 1209.1 L1306.79 1209.1 L1307.38 1209.1 L1307.97 1209.1 L1308.55 1209.1 L1309.14 1209.1 L1309.73 1209.1 L1310.31 1209.1 L1310.9 1209.1 L1311.48 1209.1 L1312.07 1209.1 L1312.66 1209.1 L1313.24 1209.1 L1313.83 1209.1 L1314.42 1209.1 L1315 1209.1 L1315.59 1209.1 L1316.18 1209.1 L1316.76 1209.1 L1317.35 1209.1 L1317.93 1209.1 L1318.52 1209.1 L1319.11 1209.1 L1319.69 1209.1 L1320.28 1209.1 L1320.87 1209.1 L1321.45 1209.1 L1322.04 1209.1 L1322.63 1209.1 L1323.21 1209.1 L1323.8 1209.1 L1324.39 1209.1 L1324.97 1209.1 L1325.56 1209.1 L1326.14 1209.1 L1326.73 1209.1 L1327.32 1209.1 L1327.9 1209.1 L1328.49 1209.1 L1329.08 1209.1 L1329.66 1209.1 L1330.25 1209.1 L1330.84 1209.1 L1331.42 1209.1 L1332.01 1209.1 L1332.6 1209.1 L1333.18 1209.1 L1333.77 1209.1 L1334.35 1209.1 L1334.94 1209.1 L1335.53 1209.1 L1336.11 1209.1 L1336.7 1209.1 L1337.29 1209.1 L1337.87 1209.1 L1338.46 1209.1 L1339.05 1209.1 L1339.63 1209.1 L1340.22 1209.1 L1340.8 1209.1 L1341.39 1209.1 L1341.98 1209.1 L1342.56 1209.1 L1343.15 1209.1 L1343.74 1209.1 L1344.32 1209.1 L1344.91 1209.1 L1345.5 1209.1 L1346.08 1209.1 L1346.67 1209.1 L1347.26 1209.1 L1347.84 1209.1 L1348.43 1209.1 L1349.01 1209.1 L1349.6 1209.1 L1350.19 1209.1 L1350.77 1209.1 L1351.36 1209.1 L1351.95 1209.1 L1352.53 1209.1 L1353.12 1209.1 L1353.71 1209.1 L1354.29 1209.1 L1354.88 1209.1 L1355.47 1209.1 L1356.05 1209.1 L1356.64 1209.1 L1357.22 1209.1 L1357.81 1209.1 L1358.4 1209.1 L1358.98 1209.1 L1359.57 1209.1 L1360.16 1209.1 L1360.74 1209.1 L1361.33 1209.1 L1361.92 1209.1 L1362.5 1209.1 L1363.09 1209.1 L1363.68 1209.1 L1364.26 1209.1 L1364.85 1209.1 L1365.43 1209.1 L1366.02 1209.1 L1366.61 1209.1 L1367.19 1209.1 L1367.78 1209.1 L1368.37 1209.1 L1368.95 1209.1 L1369.54 1209.1 L1370.13 1209.1 L1370.71 1209.1 L1371.3 1209.1 L1371.88 1209.1 L1372.47 1209.1 L1373.06 1209.1 L1373.64 1209.1 L1374.23 1209.1 L1374.82 1209.1 L1375.4 1209.1 L1375.99 1209.1 L1376.58 1209.1 L1377.16 1209.1 L1377.75 1209.1 L1378.34 1209.1 L1378.92 1209.1 L1379.51 1209.1 L1380.09 1209.1 L1380.68 1209.1 L1381.27 1209.1 L1381.85 1209.1 L1382.44 1209.1 L1383.03 1209.1 L1383.61 1209.1 L1384.2 1209.1 L1384.79 1209.1 L1385.37 1209.1 L1385.96 1209.1 L1386.55 1209.1 L1387.13 1209.1 L1387.72 1209.1 L1388.3 1209.1 L1388.89 1209.1 L1389.48 1209.1 L1390.06 1209.1 L1390.65 1209.1 L1391.24 1209.1 L1391.82 1209.1 L1392.41 1209.1 L1393 1209.1 L1393.58 1209.1 L1394.17 1209.1 L1394.75 1209.1 L1395.34 1209.1 L1395.93 1209.1 L1396.51 1209.1 L1397.1 1209.1 L1397.69 1209.1 L1398.27 1209.1 L1398.86 1209.1 L1399.45 1209.1 L1400.03 1209.1 L1400.62 1209.1 L1401.21 1209.1 L1401.79 1209.1 L1402.38 1209.1 L1402.96 1209.1 L1403.55 1209.1 L1404.14 1209.1 L1404.72 1209.1 L1405.31 1209.1 L1405.9 1209.1 L1406.48 1209.1 L1407.07 1209.1 L1407.66 1209.1 L1408.24 1209.1 L1408.83 1209.1 L1409.42 1209.1 L1410 1209.1 L1410.59 1209.1 L1411.17 1209.1 L1411.76 1209.1 L1412.35 1209.1 L1412.93 1209.1 L1413.52 1209.1 L1414.11 1209.1 L1414.69 1209.1 L1415.28 1209.1 L1415.87 1209.1 L1416.45 1209.1 L1417.04 1209.1 L1417.63 1209.1 L1418.21 1209.1 L1418.8 1209.1 L1419.38 1209.1 L1419.97 1209.1 L1420.56 1209.1 L1421.14 1209.1 L1421.73 1209.1 L1422.32 1209.1 L1422.9 1209.1 L1423.49 1209.1 L1424.08 1209.1 L1424.66 1209.1 L1425.25 1209.1 L1425.83 1209.1 L1426.42 1209.1 L1427.01 1209.1 L1427.59 1209.1 L1428.18 1209.1 L1428.77 1209.1 L1429.35 1209.1 L1429.94 1209.1 L1430.53 1209.1 L1431.11 1209.1 L1431.7 1209.1 L1432.29 1209.1 L1432.87 1209.1 L1433.46 1209.1 L1434.04 1209.1 L1434.63 1209.1 L1435.22 1209.1 L1435.8 1209.1 L1436.39 1209.1 L1436.98 1209.1 L1437.56 1209.1 L1438.15 1209.1 L1438.74 1209.1 L1439.32 1209.1 L1439.91 1209.1 L1440.5 1209.1 L1441.08 1209.1 L1441.67 1209.1 L1442.25 1209.1 L1442.84 1209.1 L1443.43 1209.1 L1444.01 1209.1 L1444.6 1209.1 L1445.19 1209.1 L1445.77 1209.1 L1446.36 1209.1 L1446.95 1209.1 L1447.53 1209.1 L1448.12 1209.1 L1448.7 1209.1 L1449.29 1209.1 L1449.88 1209.1 L1450.46 1209.1 L1451.05 1209.1 L1451.64 1209.1 L1452.22 1209.1 L1452.81 1209.1 L1453.4 1209.1 L1453.98 1209.1 L1454.57 1209.1 L1455.16 1209.1 L1455.74 1209.1 L1456.33 1209.1 L1456.91 1209.1 L1457.5 1209.1 L1458.09 1209.1 L1458.67 1209.1 L1459.26 1209.1 L1459.85 1209.1 L1460.43 1209.1 L1461.02 1209.1 L1461.61 1209.1 L1462.19 1209.1 L1462.78 1209.1 L1463.37 1209.1 L1463.95 1209.1 L1464.54 1209.1 L1465.12 1209.1 L1465.71 1209.1 L1466.3 1209.1 L1466.88 1209.1 L1467.47 1209.1 L1468.06 1209.1 L1468.64 1209.1 L1469.23 1209.1 L1469.82 1209.1 L1470.4 1209.1 L1470.99 1209.1 L1471.57 1209.1 L1472.16 1209.1 L1472.75 1209.1 L1473.33 1209.1 L1473.92 1209.1 L1474.51 1209.1 L1475.09 1209.1 L1475.68 1209.1 L1476.27 1209.1 L1476.85 1209.1 L1477.44 1209.1 L1478.03 1209.1 L1478.61 1209.1 L1479.2 1209.1 L1479.78 1209.1 L1480.37 1209.1 L1480.96 1209.1 L1481.54 1209.1 L1482.13 1209.1 L1482.72 1209.1 L1483.3 1209.1 L1483.89 1209.1 L1484.48 1209.1 L1485.06 1209.1 L1485.65 1209.1 L1486.24 1209.1 L1486.82 1209.1 L1487.41 1209.1 L1487.99 1209.1 L1488.58 1209.1 L1489.17 1209.1 L1489.75 1209.1 L1490.34 1209.1 L1490.93 1209.1 L1491.51 1209.1 L1492.1 1209.1 L1492.69 1209.1 L1493.27 1209.1 L1493.86 1209.1 L1494.45 1209.1 L1495.03 1209.1 L1495.62 1209.1 L1496.2 1209.1 L1496.79 1209.1 L1497.38 1209.1 L1497.96 1209.1 L1498.55 1209.1 L1499.14 1209.1 L1499.72 1209.1 L1500.31 1209.1 L1500.9 1209.1 L1501.48 1209.1 L1502.07 1209.1 L1502.65 1209.1 L1503.24 1209.1 L1503.83 1209.1 L1504.41 1209.1 L1505 1209.1 L1505.59 1209.1 L1506.17 1209.1 L1506.76 1209.1 L1507.35 1209.1 L1507.93 1209.1 L1508.52 1209.1 L1509.11 1209.1 L1509.69 1209.1 L1510.28 1209.1 L1510.86 1209.1 L1511.45 1209.1 L1512.04 1209.1 L1512.62 1209.1 L1513.21 1209.1 L1513.8 1209.1 L1514.38 1209.1 L1514.97 1209.1 L1515.56 1209.1 L1516.14 1209.1 L1516.73 1209.1 L1517.32 1209.1 L1517.9 1209.1 L1518.49 1209.1 L1519.07 1209.1 L1519.66 1209.1 L1520.25 1209.1 L1520.83 1209.1 L1521.42 1209.1 L1522.01 1209.1 L1522.59 1209.1 L1523.18 1209.1 L1523.77 1209.1 L1524.35 1209.1 L1524.94 1209.1 L1525.52 1209.1 L1526.11 1209.1 L1526.7 1209.1 L1527.28 1209.1 L1527.87 1209.1 L1528.46 1209.1 L1529.04 1209.1 L1529.63 1209.1 L1530.22 1209.1 L1530.8 1209.1 L1531.39 1209.1 L1531.98 1209.1 L1532.56 1209.1 L1533.15 1209.1 L1533.73 1209.1 L1534.32 1209.1 L1534.91 1209.1 L1535.49 1209.1 L1536.08 1209.1 L1536.67 1209.1 L1537.25 1209.1 L1537.84 1209.1 L1538.43 1209.1 L1539.01 1209.1 L1539.6 1209.1 L1540.19 1209.1 L1540.77 1209.1 L1541.36 1209.1 L1541.94 1209.1 L1542.53 1209.1 L1543.12 1209.1 L1543.7 1209.1 L1544.29 1209.1 L1544.88 1209.1 L1545.46 1209.1 L1546.05 1209.1 L1546.64 1209.1 L1547.22 1209.1 L1547.81 1209.1 L1548.4 1209.1 L1548.98 1209.1 L1549.57 1209.1 L1550.15 1209.1 L1550.74 1209.1 L1551.33 1209.1 L1551.91 1209.1 L1552.5 1209.1 L1553.09 1209.1 L1553.67 1209.1 L1554.26 1209.1 L1554.85 1209.1 L1555.43 1209.1 L1556.02 1209.1 L1556.6 1209.1 L1557.19 1209.1 L1557.78 1209.1 L1558.36 1209.1 L1558.95 1209.1 L1559.54 1209.1 L1560.12 1209.1 L1560.71 1209.1 L1561.3 1209.1 L1561.88 1209.1 L1562.47 1209.1 L1563.06 1209.1 L1563.64 1209.1 L1564.23 1209.1 L1564.81 1209.1 L1565.4 1209.1 L1565.99 1209.1 L1566.57 1209.1 L1567.16 1209.1 L1567.75 1209.1 L1568.33 1209.1 L1568.92 1209.1 L1569.51 1209.1 L1570.09 1209.1 L1570.68 1209.1 L1571.27 1209.1 L1571.85 1209.1 L1572.44 1209.1 L1573.02 1209.1 L1573.61 1209.1 L1574.2 1209.1 L1574.78 1209.1 L1575.37 1209.1 L1575.96 1209.1 L1576.54 1209.1 L1577.13 1209.1 L1577.72 1209.1 L1578.3 1209.1 L1578.89 1209.1 L1579.47 1209.1 L1580.06 1209.1 L1580.65 1209.1 L1581.23 1209.1 L1581.82 1209.1 L1582.41 1209.1 L1582.99 1209.1 L1583.58 1209.1 L1584.17 1209.1 L1584.75 1209.1 L1585.34 1209.1 L1585.93 1209.1 L1586.51 1209.1 L1587.1 1209.1 L1587.68 1209.1 L1588.27 1209.1 L1588.86 1209.1 L1589.44 1209.1 L1590.03 1209.1 L1590.62 1209.1 L1591.2 1209.1 L1591.79 1209.1 L1592.38 1209.1 L1592.96 1209.1 L1593.55 1209.1 L1594.14 1209.1 L1594.72 1209.1 L1595.31 1209.1 L1595.89 1209.1 L1596.48 1209.1 L1597.07 1209.1 L1597.65 1209.1 L1598.24 1209.1 L1598.83 1209.1 L1599.41 1209.1 L1600 1209.1 L1600.59 1209.1 L1601.17 1209.1 L1601.76 1209.1 L1602.34 1209.1 L1602.93 1209.1 L1603.52 1209.1 L1604.1 1209.1 L1604.69 1209.1 L1605.28 1209.1 L1605.86 1209.1 L1606.45 1209.1 L1607.04 1209.1 L1607.62 1209.1 L1608.21 1209.1 L1608.8 1209.1 L1609.38 1209.1 L1609.97 1209.1 L1610.55 1209.1 L1611.14 1209.1 L1611.73 1209.1 L1612.31 1209.1 L1612.9 1209.1 L1613.49 1209.1 L1614.07 1209.1 L1614.66 1209.1 L1615.25 1209.1 L1615.83 1209.1 L1616.42 1209.1 L1617.01 1209.1 L1617.59 1209.1 L1618.18 1209.1 L1618.76 1209.1 L1619.35 1209.1 L1619.94 1209.1 L1620.52 1209.1 L1621.11 1209.1 L1621.7 1209.1 L1622.28 1209.1 L1622.87 1209.1 L1623.46 1209.1 L1624.04 1209.1 L1624.63 1209.1 L1625.22 1209.1 L1625.8 1209.1 L1626.39 1209.1 L1626.97 1209.1 L1627.56 1209.1 L1628.15 1209.1 L1628.73 1209.1 L1629.32 1209.1 L1629.91 1209.1 L1630.49 1209.1 L1631.08 1209.1 L1631.67 1209.1 L1632.25 1209.1 L1632.84 1209.1 L1633.42 1209.1 L1634.01 1209.1 L1634.6 1209.1 L1635.18 1209.1 L1635.77 1209.1 L1636.36 1209.1 L1636.94 1209.1 L1637.53 1209.1 L1638.12 1209.1 L1638.7 1209.1 L1639.29 1209.1 L1639.88 1209.1 L1640.46 1209.1 L1641.05 1209.1 L1641.63 1209.1 L1642.22 1209.1 L1642.81 1209.1 L1643.39 1209.1 L1643.98 1209.1 L1644.57 1209.1 L1645.15 1209.1 L1645.74 1209.1 L1646.33 1209.1 L1646.91 1209.1 L1647.5 1209.1 L1648.09 1209.1 L1648.67 1209.1 L1649.26 1209.1 L1649.84 1209.1 L1650.43 1209.1 L1651.02 1209.1 L1651.6 1209.1 L1652.19 1209.1 L1652.78 1209.1 L1653.36 1209.1 L1653.95 1209.1 L1654.54 1209.1 L1655.12 1209.1 L1655.71 1209.1 L1656.29 1209.1 L1656.88 1209.1 L1657.47 1209.1 L1658.05 1209.1 L1658.64 1209.1 L1659.23 1209.1 L1659.81 1209.1 L1660.4 1209.1 L1660.99 1209.1 L1661.57 1209.1 L1662.16 1209.1 L1662.75 1209.1 L1663.33 1209.1 L1663.92 1209.1 L1664.5 1209.1 L1665.09 1209.1 L1665.68 1209.1 L1666.26 1209.1 L1666.85 1209.1 L1667.44 1209.1 L1668.02 1209.1 L1668.61 1209.1 L1669.2 1209.1 L1669.78 1209.1 L1670.37 1209.1 L1670.96 1209.1 L1671.54 1209.1 L1672.13 1209.1 L1672.71 1209.1 L1673.3 1209.1 L1673.89 1209.1 L1674.47 1209.1 L1675.06 1209.1 L1675.65 1209.1 L1676.23 1209.1 L1676.82 1209.1 L1677.41 1209.1 L1677.99 1209.1 L1678.58 1209.1 L1679.17 1209.1 L1679.75 1209.1 L1680.34 1209.1 L1680.92 1209.1 L1681.51 1209.1 L1682.1 1209.1 L1682.68 1209.1 L1683.27 1209.1 L1683.86 1209.1 L1684.44 1209.1 L1685.03 1209.1 L1685.62 1209.1 L1686.2 1209.1 L1686.79 1209.1 L1687.37 1209.1 L1687.96 1209.1 L1688.55 1209.1 L1689.13 1209.1 L1689.72 1209.1 L1690.31 1209.1 L1690.89 1209.1 L1691.48 1209.1 L1692.07 1209.1 L1692.65 1209.1 L1693.24 1209.1 L1693.83 1209.1 L1694.41 1209.1 L1695 1209.1 L1695.58 1209.1 L1696.17 1209.1 L1696.76 1209.1 L1697.34 1209.1 L1697.93 1209.1 L1698.52 1209.1 L1699.1 1209.1 L1699.69 1209.1 L1700.28 1209.1 L1700.86 1209.1 L1701.45 1209.1 L1702.04 1209.1 L1702.62 1209.1 L1703.21 1209.1 L1703.79 1209.1 L1704.38 1209.1 L1704.97 1209.1 L1705.55 1209.1 L1706.14 1209.1 L1706.73 1209.1 L1707.31 1209.1 L1707.9 1209.1 L1708.49 1209.1 L1709.07 1209.1 L1709.66 1209.1 L1710.24 1209.1 L1710.83 1209.1 L1711.42 1209.1 L1712 1209.1 L1712.59 1209.1 L1713.18 1209.1 L1713.76 1209.1 L1714.35 1209.1 L1714.94 1209.1 L1715.52 1209.1 L1716.11 1209.1 L1716.7 1209.1 L1717.28 1209.1 L1717.87 1209.1 L1718.45 1209.1 L1719.04 1209.1 L1719.63 1209.1 L1720.21 1209.1 L1720.8 1209.1 L1721.39 1209.1 L1721.97 1209.1 L1722.56 1209.1 L1723.15 1209.1 L1723.73 1209.1 L1724.32 1209.1 L1724.91 1209.1 L1725.49 1209.1 L1726.08 1209.1 L1726.66 1209.1 L1727.25 1209.1 L1727.84 1209.1 L1728.42 1209.1 L1729.01 1209.1 L1729.6 1209.1 L1730.18 1209.1 L1730.77 1209.1 L1731.36 1209.1 L1731.94 1209.1 L1732.53 1209.1 L1733.11 1209.1 L1733.7 1209.1 L1734.29 1209.1 L1734.87 1209.1 L1735.46 1209.1 L1736.05 1209.1 L1736.63 1209.1 L1737.22 1209.1 L1737.81 1209.1 L1738.39 1209.1 L1738.98 1209.1 L1739.57 1209.1 L1740.15 1209.1 L1740.74 1209.1 L1741.32 1209.1 L1741.91 1209.1 L1742.5 1209.1 L1743.08 1209.1 L1743.67 1209.1 L1744.26 1209.1 L1744.84 1209.1 L1745.43 1209.1 L1746.02 1209.1 L1746.6 1209.1 L1747.19 1209.1 L1747.78 1209.1 L1748.36 1209.1 L1748.95 1209.1 L1749.53 1209.1 L1750.12 1209.1 L1750.71 1209.1 L1751.29 1209.1 L1751.88 1209.1 L1752.47 1209.1 L1753.05 1209.1 L1753.64 1209.1 L1754.23 1209.1 L1754.81 1209.1 L1755.4 1209.1 L1755.99 1209.1 L1756.57 1209.1 L1757.16 1209.1 L1757.74 1209.1 L1758.33 1209.1 L1758.92 1209.1 L1759.5 1209.1 L1760.09 1209.1 L1760.68 1209.1 L1761.26 1209.1 L1761.85 1209.1 L1762.44 1209.1 L1763.02 1209.1 L1763.61 1209.1 L1764.19 1209.1 L1764.78 1209.1 L1765.37 1209.1 L1765.95 1209.1 L1766.54 1209.1 L1767.13 1209.1 L1767.71 1209.1 L1768.3 1209.1 L1768.89 1209.1 L1769.47 1209.1 L1770.06 1209.1 L1770.65 1209.1 L1771.23 1209.1 L1771.82 1209.1 L1772.4 1209.1 L1772.99 1209.1 L1773.58 1209.1 L1774.16 1209.1 L1774.75 1209.1 L1775.34 1209.1 L1775.92 1209.1 L1776.51 1209.1 L1777.1 1209.1 L1777.68 1209.1 L1778.27 1209.1 L1778.86 1209.1 L1779.44 1209.1 L1780.03 1209.1 L1780.61 1209.1 L1781.2 1209.1 L1781.79 1209.1 L1782.37 1209.1 L1782.96 1209.1 L1783.55 1209.1 L1784.13 1209.1 L1784.72 1209.1 L1785.31 1209.1 L1785.89 1209.1 L1786.48 1209.1 L1787.06 1209.1 L1787.65 1209.1 L1788.24 1209.1 L1788.82 1209.1 L1789.41 1209.1 L1790 1209.1 L1790.58 1209.1 L1791.17 1209.1 L1791.76 1209.1 L1792.34 1209.1 L1792.93 1209.1 L1793.52 1209.1 L1794.1 1209.1 L1794.69 1209.1 L1795.27 1209.1 L1795.86 1209.1 L1796.45 1209.1 L1797.03 1209.1 L1797.62 1209.1 L1798.21 1209.1 L1798.79 1209.1 L1799.38 1209.1 L1799.97 1209.1 L1800.55 1209.1 L1801.14 1209.1 L1801.73 1209.1 L1802.31 1209.1 L1802.9 1209.1 L1803.48 1209.1 L1804.07 1209.1 L1804.66 1209.1 L1805.24 1209.1 L1805.83 1209.1 L1806.42 1209.1 L1807 1209.1 L1807.59 1209.1 L1808.18 1209.1 L1808.76 1209.1 L1809.35 1209.1 L1809.94 1209.1 L1810.52 1209.1 L1811.11 1209.1 L1811.69 1209.1 L1812.28 1209.1 L1812.87 1209.1 L1813.45 1209.1 L1814.04 1209.1 L1814.63 1209.1 L1815.21 1209.1 L1815.8 1209.1 L1816.39 1209.1 L1816.97 1209.1 L1817.56 1209.1 L1818.14 1209.1 L1818.73 1209.1 L1819.32 1209.1 L1819.9 1209.1 L1820.49 1209.1 L1821.08 1209.1 L1821.66 1209.1 L1822.25 1209.1 L1822.84 1209.1 L1823.42 1209.1 L1824.01 1209.1 L1824.6 1209.1 L1825.18 1209.1 L1825.77 1209.1 L1826.35 1209.1 L1826.94 1209.1 L1827.53 1209.1 L1828.11 1209.1 L1828.7 1209.1 L1829.29 1209.1 L1829.87 1209.1 L1830.46 1209.1 L1831.05 1209.1 L1831.63 1209.1 L1832.22 1209.1 L1832.81 1209.1 L1833.39 1209.1 L1833.98 1209.1 L1834.56 1209.1 L1835.15 1209.1 L1835.74 1209.1 L1836.32 1209.1 L1836.91 1209.1 L1837.5 1209.1 L1838.08 1209.1 L1838.67 1209.1 L1839.26 1209.1 L1839.84 1209.1 L1840.43 1209.1 L1841.01 1209.1 L1841.6 1209.1 L1842.19 1209.1 L1842.77 1209.1 L1843.36 1209.1 L1843.95 1209.1 L1844.53 1209.1 L1845.12 1209.1 L1845.71 1209.1 L1846.29 1209.1 L1846.88 1209.1 L1847.47 1209.1 L1848.05 1209.1 L1848.64 1209.1 L1849.22 1209.1 L1849.81 1209.1 L1850.4 1209.1 L1850.98 1209.1 L1851.57 1209.1 L1852.16 1209.1 L1852.74 1209.1 L1853.33 1209.1 L1853.92 1209.1 L1854.5 1209.1 L1855.09 1209.1 L1855.68 1209.1 L1856.26 1209.1 L1856.85 1209.1 L1857.43 1209.1 L1858.02 1209.1 L1858.61 1209.1 L1859.19 1209.1 L1859.78 1209.1 L1860.37 1209.1 L1860.95 1209.1 L1861.54 1209.1 L1862.13 1209.1 L1862.71 1209.1 L1863.3 1209.1 L1863.88 1209.1 L1864.47 1209.1 L1865.06 1209.1 L1865.64 1209.1 L1866.23 1209.1 L1866.82 1209.1 L1867.4 1209.1 L1867.99 1209.1 L1868.58 1209.1 L1869.16 1209.1 L1869.75 1209.1 L1870.34 1209.1 L1870.92 1209.1 L1871.51 1209.1 L1872.09 1209.1 L1872.68 1209.1 L1873.27 1209.1 L1873.85 1209.1 L1874.44 1209.1 L1875.03 1209.1 L1875.61 1209.1 L1876.2 1209.1 L1876.79 1209.1 L1877.37 1209.1 L1877.96 1209.1 L1878.55 1209.1 L1879.13 1209.1 L1879.72 1209.1 L1880.3 1209.1 L1880.89 1209.1 L1881.48 1209.1 L1882.06 1209.1 L1882.65 1209.1 L1883.24 1209.1 L1883.82 1209.1 L1884.41 1209.1 L1885 1209.1 L1885.58 1209.1 L1886.17 1209.1 L1886.76 1209.1 L1887.34 1209.1 L1887.93 1209.1 L1888.51 1209.1 L1889.1 1209.1 L1889.69 1209.1 L1890.27 1209.1 L1890.86 1209.1 L1891.45 1209.1 L1892.03 1209.1 L1892.62 1209.1 L1893.21 1209.1 L1893.79 1209.1 L1894.38 1209.1 L1894.96 1209.1 L1895.55 1209.1 L1896.14 1209.1 L1896.72 1209.1 L1897.31 1209.1 L1897.9 1209.1 L1898.48 1209.1 L1899.07 1209.1 L1899.66 1209.1 L1900.24 1209.1 L1900.83 1209.1 L1901.42 1209.1 L1902 1209.1 L1902.59 1209.1 L1903.17 1209.1 L1903.76 1209.1 L1904.35 1209.1 L1904.93 1209.1 L1905.52 1209.1 L1906.11 1209.1 L1906.69 1209.1 L1907.28 1209.1 L1907.87 1209.1 L1908.45 1209.1 L1909.04 1209.1 L1909.63 1209.1 L1910.21 1209.1 L1910.8 1209.1 L1911.38 1209.1 L1911.97 1209.1 L1912.56 1209.1 L1913.14 1209.1 L1913.73 1209.1 L1914.32 1209.1 L1914.9 1209.1 L1915.49 1209.1 L1916.08 1209.1 L1916.66 1209.1 L1917.25 1209.1 L1917.83 1209.1 L1918.42 1209.1 L1919.01 1209.1 L1919.59 1209.1 L1920.18 1209.1 L1920.77 1209.1 L1921.35 1209.1 L1921.94 1209.1 L1922.53 1209.1 L1923.11 1209.1 L1923.7 1209.1 L1924.29 1209.1 L1924.87 1209.1 L1925.46 1209.1 L1926.04 1209.1 L1926.63 1209.1 L1927.22 1209.1 L1927.8 1209.1 L1928.39 1209.1 L1928.98 1209.1 L1929.56 1209.1 L1930.15 1209.1 L1930.74 1209.1 L1931.32 1209.1 L1931.91 1209.1 L1932.5 1209.1 L1933.08 1209.1 L1933.67 1209.1 L1934.25 1209.1 L1934.84 1209.1 L1935.43 1209.1 L1936.01 1209.1 L1936.6 1209.1 L1937.19 1209.1 L1937.77 1209.1 L1938.36 1209.1 L1938.95 1209.1 L1939.53 1209.1 L1940.12 1209.1 L1940.71 1209.1 L1941.29 1209.1 L1941.88 1209.1 L1942.46 1209.1 L1943.05 1209.1 L1943.64 1209.1 L1944.22 1209.1 L1944.81 1209.1 L1945.4 1209.1 L1945.98 1209.1 L1946.57 1209.1 L1947.16 1209.1 L1947.74 1209.1 L1948.33 1209.1 L1948.91 1209.1 L1949.5 1209.1 L1950.09 1209.1 L1950.67 1209.1 L1951.26 1209.1 L1951.85 1209.1 L1952.43 1209.1 L1953.02 1209.1 L1953.61 1209.1 L1954.19 1209.1 L1954.78 1209.1 L1955.37 1209.1 L1955.95 1209.1 L1956.54 1209.1 L1957.12 1209.1 L1957.71 1209.1 L1958.3 1209.1 L1958.88 1209.1 L1959.47 1209.1 L1960.06 1209.1 L1960.64 1209.1 L1961.23 1209.1 L1961.82 1209.1 L1962.4 1209.1 L1962.99 1209.1 L1963.58 1209.1 L1964.16 1209.1 L1964.75 1209.1 L1965.33 1209.1 L1965.92 1209.1 L1966.51 1209.1 L1967.09 1209.1 L1967.68 1209.1 L1968.27 1209.1 L1968.85 1209.1 L1969.44 1209.1 L1970.03 1209.1 L1970.61 1209.1 L1971.2 1209.1 L1971.78 1209.1 L1972.37 1209.1 L1972.96 1209.1 L1973.54 1209.1 L1974.13 1209.1 L1974.72 1209.1 L1975.3 1209.1 L1975.89 1209.1 L1976.48 1209.1 L1977.06 1209.1 L1977.65 1209.1 L1978.24 1209.1 L1978.82 1209.1 L1979.41 1209.1 L1979.99 1209.1 L1980.58 1209.1 L1981.17 1209.1 L1981.75 1209.1 L1982.34 1209.1 L1982.93 1209.1 L1983.51 1209.1 L1984.1 1209.1 L1984.69 1209.1 L1985.27 1209.1 L1985.86 1209.1 L1986.45 1209.1 L1987.03 1209.1 L1987.62 1209.1 L1988.2 1209.1 L1988.79 1209.1 L1989.38 1209.1 L1989.96 1209.1 L1990.55 1209.1 L1991.14 1209.1 L1991.72 1209.1 L1992.31 1209.1 L1992.9 1209.1 L1993.48 1209.1 L1994.07 1209.1 L1994.65 1209.1 L1995.24 1209.1 L1995.83 1209.1 L1996.41 1209.1 L1997 1209.1 L1997.59 1209.1 L1998.17 1209.1 L1998.76 1209.1 L1999.35 1209.1 L1999.93 1209.1 L2000.52 1209.1 L2001.11 1209.1 L2001.69 1209.1 L2002.28 1209.1 L2002.86 1209.1 L2003.45 1209.1 L2004.04 1209.1 L2004.62 1209.1 L2005.21 1209.1 L2005.8 1209.1 L2006.38 1209.1 L2006.97 1209.1 L2007.56 1209.1 L2008.14 1209.1 L2008.73 1209.1 L2009.32 1209.1 L2009.9 1209.1 L2010.49 1209.1 L2011.07 1209.1 L2011.66 1209.1 L2012.25 1209.1 L2012.83 1209.1 L2013.42 1209.1 L2014.01 1209.1 L2014.59 1209.1 L2015.18 1209.1 L2015.77 1209.1 L2016.35 1209.1 L2016.94 1209.1 L2017.53 1209.1 L2018.11 1209.1 L2018.7 1209.1 L2019.28 1209.1 L2019.87 1209.1 L2020.46 1209.1 L2021.04 1209.1 L2021.63 1209.1 L2022.22 1209.1 L2022.8 1209.1 L2023.39 1209.1 L2023.98 1209.1 L2024.56 1209.1 L2025.15 1209.1 L2025.73 1209.1 L2026.32 1209.1 L2026.91 1209.1 L2027.49 1209.1 L2028.08 1209.1 L2028.67 1209.1 L2029.25 1209.1 L2029.84 1209.1 L2030.43 1209.1 L2031.01 1209.1 L2031.6 1209.1 L2032.19 1209.1 L2032.77 1209.1 L2033.36 1209.1 L2033.94 1209.1 L2034.53 1209.1 L2035.12 1209.1 L2035.7 1209.1 L2036.29 1209.1 L2036.88 1209.1 L2037.46 1209.1 L2038.05 1209.1 L2038.64 1209.1 L2039.22 1209.1 L2039.81 1209.1 L2040.4 1209.1 L2040.98 1209.1 L2041.57 1209.1 L2042.15 1209.1 L2042.74 1209.1 L2043.33 1209.1 L2043.91 1209.1 L2044.5 1209.1 L2045.09 1209.1 L2045.67 1209.1 L2046.26 1209.1 L2046.85 1209.1 L2047.43 1209.1 L2048.02 1209.1 L2048.6 1209.1 L2049.19 1209.1 L2049.78 1209.1 L2050.36 1209.1 L2050.95 1209.1 L2051.54 1209.1 L2052.12 1209.1 L2052.71 1209.1 L2053.3 1209.1 L2053.88 1209.1 L2054.47 1209.1 L2055.06 1209.1 L2055.64 1209.1 L2056.23 1209.1 L2056.81 1209.1 L2057.4 1209.1 L2057.99 1209.1 L2058.57 1209.1 L2059.16 1209.1 L2059.75 1209.1 L2060.33 1209.1 L2060.92 1209.1 L2061.51 1209.1 L2062.09 1209.1 L2062.68 1209.1 L2063.27 1209.1 L2063.85 1209.1 L2064.44 1209.1 L2065.02 1209.1 L2065.61 1209.1 L2066.2 1209.1 L2066.78 1209.1 L2067.37 1209.1 L2067.96 1209.1 L2068.54 1209.1 L2069.13 1209.1 L2069.72 1209.1 L2070.3 1209.1 L2070.89 1209.1 L2071.48 1209.1 L2072.06 1209.1 L2072.65 1209.1 L2073.23 1209.1 L2073.82 1209.1 L2074.41 1209.1 L2074.99 1209.1 L2075.58 1209.1 L2076.17 1209.1 L2076.75 1209.1 L2077.34 1209.1 L2077.93 1209.1 L2078.51 1209.1 L2079.1 1209.1 L2079.68 1209.1 L2080.27 1209.1 L2080.86 1209.1 L2081.44 1209.1 L2082.03 1209.1 L2082.62 1209.1 L2083.2 1209.1 L2083.79 1209.1 L2084.38 1209.1 L2084.96 1209.1 L2085.55 1209.1 L2086.14 1209.1 L2086.72 1209.1 L2087.31 1209.1 L2087.89 1209.1 L2088.48 1209.1 L2089.07 1209.1 L2089.65 1209.1 L2090.24 1209.1 L2090.83 1209.1 L2091.41 1209.1 L2092 1209.1 L2092.59 1209.1 L2093.17 1209.1 L2093.76 1209.1 L2094.35 1209.1 L2094.93 1209.1 L2095.52 1209.1 L2096.1 1209.1 L2096.69 1209.1 L2097.28 1209.1 L2097.86 1209.1 L2098.45 1209.1 L2099.04 1209.1 L2099.62 1209.1 L2100.21 1209.1 L2100.8 1209.1 L2101.38 1209.1 L2101.97 1209.1 L2102.55 1209.1 L2103.14 1209.1 L2103.73 1209.1 L2104.31 1209.1 L2104.9 1209.1 L2105.49 1209.1 L2106.07 1209.1 L2106.66 1209.1 L2107.25 1209.1 L2107.83 1209.1 L2108.42 1209.1 L2109.01 1209.1 L2109.59 1209.1 L2110.18 1209.1 L2110.76 1209.1 L2111.35 1209.1 L2111.94 1209.1 L2112.52 1209.1 L2113.11 1209.1 L2113.7 1209.1 L2114.28 1209.1 L2114.87 1209.1 L2115.46 1209.1 L2116.04 1209.1 L2116.63 1209.1 L2117.22 1209.1 L2117.8 1209.1 L2118.39 1209.1 L2118.97 1209.1 L2119.56 1209.1 L2120.15 1209.1 L2120.73 1209.1 L2121.32 1209.1 L2121.91 1209.1 L2122.49 1209.1 L2123.08 1209.1 L2123.67 1209.1 L2124.25 1209.1 L2124.84 1209.1 L2125.42 1209.1 L2126.01 1209.1 L2126.6 1209.1 L2127.18 1209.1 L2127.77 1209.1 L2128.36 1209.1 L2128.94 1209.1 L2129.53 1209.1 L2130.12 1209.1 L2130.7 1209.1 L2131.29 1209.1 L2131.88 1209.1 L2132.46 1209.1 L2133.05 1209.1 L2133.63 1209.1 L2134.22 1209.1 L2134.81 1209.1 L2135.39 1209.1 L2135.98 1209.1 L2136.57 1209.1 L2137.15 1209.1 L2137.74 1209.1 L2138.33 1209.1 L2138.91 1209.1 L2139.5 1209.1 L2140.09 1209.1 L2140.67 1209.1 L2141.26 1209.1 L2141.84 1209.1 L2142.43 1209.1 L2143.02 1209.1 L2143.6 1209.1 L2144.19 1209.1 L2144.78 1209.1 L2145.36 1209.1 L2145.95 1209.1 L2146.54 1209.1 L2147.12 1209.1 L2147.71 1209.1 L2148.3 1209.1 L2148.88 1209.1 L2149.47 1209.1 L2150.05 1209.1 L2150.64 1209.1 L2151.23 1209.1 L2151.81 1209.1 L2152.4 1209.1 L2152.99 1209.1 L2153.57 1209.1 L2154.16 1209.1 L2154.75 1209.1 L2155.33 1209.1 L2155.92 1209.1 L2156.5 1209.1 L2157.09 1209.1 L2157.68 1209.1 L2158.26 1209.1 L2158.26 1208.92 L2157.68 1208.92 L2157.09 1208.92 L2156.5 1208.92 L2155.92 1208.92 L2155.33 1208.92 L2154.75 1208.92 L2154.16 1208.92 L2153.57 1208.92 L2152.99 1208.92 L2152.4 1208.92 L2151.81 1208.92 L2151.23 1208.92 L2150.64 1208.92 L2150.05 1208.92 L2149.47 1208.92 L2148.88 1208.92 L2148.3 1208.92 L2147.71 1208.92 L2147.12 1208.92 L2146.54 1208.92 L2145.95 1208.92 L2145.36 1208.92 L2144.78 1208.92 L2144.19 1208.92 L2143.6 1208.92 L2143.02 1208.92 L2142.43 1208.92 L2141.84 1208.92 L2141.26 1208.92 L2140.67 1208.92 L2140.09 1208.92 L2139.5 1208.92 L2138.91 1208.92 L2138.33 1208.92 L2137.74 1208.92 L2137.15 1208.92 L2136.57 1208.92 L2135.98 1208.92 L2135.39 1208.92 L2134.81 1208.92 L2134.22 1208.92 L2133.63 1208.92 L2133.05 1208.92 L2132.46 1208.92 L2131.88 1208.92 L2131.29 1208.92 L2130.7 1208.92 L2130.12 1208.92 L2129.53 1208.92 L2128.94 1208.92 L2128.36 1208.92 L2127.77 1208.92 L2127.18 1208.92 L2126.6 1208.92 L2126.01 1208.92 L2125.42 1208.92 L2124.84 1208.92 L2124.25 1208.92 L2123.67 1208.92 L2123.08 1208.92 L2122.49 1208.92 L2121.91 1208.92 L2121.32 1208.92 L2120.73 1208.92 L2120.15 1208.92 L2119.56 1208.92 L2118.97 1208.92 L2118.39 1208.92 L2117.8 1208.92 L2117.22 1208.92 L2116.63 1208.92 L2116.04 1208.92 L2115.46 1208.92 L2114.87 1208.92 L2114.28 1208.92 L2113.7 1208.92 L2113.11 1208.92 L2112.52 1208.92 L2111.94 1208.92 L2111.35 1208.92 L2110.76 1208.92 L2110.18 1208.92 L2109.59 1208.92 L2109.01 1208.92 L2108.42 1208.92 L2107.83 1208.92 L2107.25 1208.92 L2106.66 1208.92 L2106.07 1208.92 L2105.49 1208.92 L2104.9 1208.92 L2104.31 1208.92 L2103.73 1208.92 L2103.14 1208.92 L2102.55 1208.92 L2101.97 1208.92 L2101.38 1208.92 L2100.8 1208.92 L2100.21 1208.92 L2099.62 1208.92 L2099.04 1208.92 L2098.45 1208.92 L2097.86 1208.92 L2097.28 1208.92 L2096.69 1208.92 L2096.1 1208.92 L2095.52 1208.92 L2094.93 1208.92 L2094.35 1208.92 L2093.76 1208.92 L2093.17 1208.92 L2092.59 1208.92 L2092 1208.92 L2091.41 1208.92 L2090.83 1208.92 L2090.24 1208.92 L2089.65 1208.92 L2089.07 1208.92 L2088.48 1208.92 L2087.89 1208.92 L2087.31 1208.92 L2086.72 1208.92 L2086.14 1208.92 L2085.55 1208.92 L2084.96 1208.92 L2084.38 1208.92 L2083.79 1208.92 L2083.2 1208.92 L2082.62 1208.92 L2082.03 1208.92 L2081.44 1208.92 L2080.86 1208.92 L2080.27 1208.92 L2079.68 1208.92 L2079.1 1208.92 L2078.51 1208.92 L2077.93 1208.92 L2077.34 1208.92 L2076.75 1208.92 L2076.17 1208.92 L2075.58 1208.92 L2074.99 1208.92 L2074.41 1208.92 L2073.82 1208.92 L2073.23 1208.92 L2072.65 1208.92 L2072.06 1208.92 L2071.48 1208.92 L2070.89 1208.92 L2070.3 1208.92 L2069.72 1208.92 L2069.13 1208.92 L2068.54 1208.92 L2067.96 1208.92 L2067.37 1208.92 L2066.78 1208.92 L2066.2 1208.92 L2065.61 1208.92 L2065.02 1208.92 L2064.44 1208.92 L2063.85 1208.92 L2063.27 1208.92 L2062.68 1208.92 L2062.09 1208.92 L2061.51 1208.92 L2060.92 1208.92 L2060.33 1208.92 L2059.75 1208.92 L2059.16 1208.92 L2058.57 1208.92 L2057.99 1208.92 L2057.4 1208.92 L2056.81 1208.92 L2056.23 1208.92 L2055.64 1208.92 L2055.06 1208.92 L2054.47 1208.92 L2053.88 1208.92 L2053.3 1208.92 L2052.71 1208.92 L2052.12 1208.92 L2051.54 1208.92 L2050.95 1208.92 L2050.36 1208.92 L2049.78 1208.92 L2049.19 1208.92 L2048.6 1208.92 L2048.02 1208.92 L2047.43 1208.92 L2046.85 1208.92 L2046.26 1208.92 L2045.67 1208.92 L2045.09 1208.92 L2044.5 1208.92 L2043.91 1208.92 L2043.33 1208.92 L2042.74 1208.92 L2042.15 1208.92 L2041.57 1208.92 L2040.98 1208.92 L2040.4 1208.92 L2039.81 1208.92 L2039.22 1208.92 L2038.64 1208.92 L2038.05 1208.92 L2037.46 1208.92 L2036.88 1208.92 L2036.29 1208.92 L2035.7 1208.92 L2035.12 1208.92 L2034.53 1208.92 L2033.94 1208.92 L2033.36 1208.92 L2032.77 1208.92 L2032.19 1208.92 L2031.6 1208.92 L2031.01 1208.92 L2030.43 1208.92 L2029.84 1208.92 L2029.25 1208.92 L2028.67 1208.92 L2028.08 1208.92 L2027.49 1208.92 L2026.91 1208.92 L2026.32 1208.92 L2025.73 1208.92 L2025.15 1208.92 L2024.56 1208.92 L2023.98 1208.92 L2023.39 1208.92 L2022.8 1208.92 L2022.22 1208.92 L2021.63 1208.92 L2021.04 1208.92 L2020.46 1208.92 L2019.87 1208.92 L2019.28 1208.92 L2018.7 1208.92 L2018.11 1208.92 L2017.53 1208.92 L2016.94 1208.92 L2016.35 1208.92 L2015.77 1208.92 L2015.18 1208.92 L2014.59 1208.92 L2014.01 1208.92 L2013.42 1208.92 L2012.83 1208.92 L2012.25 1208.92 L2011.66 1208.92 L2011.07 1208.92 L2010.49 1208.92 L2009.9 1208.92 L2009.32 1208.92 L2008.73 1208.92 L2008.14 1208.92 L2007.56 1208.92 L2006.97 1208.92 L2006.38 1208.92 L2005.8 1208.92 L2005.21 1208.92 L2004.62 1208.92 L2004.04 1208.92 L2003.45 1208.92 L2002.86 1208.92 L2002.28 1208.92 L2001.69 1208.92 L2001.11 1208.92 L2000.52 1208.92 L1999.93 1208.92 L1999.35 1208.92 L1998.76 1208.92 L1998.17 1208.92 L1997.59 1208.92 L1997 1208.92 L1996.41 1208.92 L1995.83 1208.92 L1995.24 1208.92 L1994.65 1208.92 L1994.07 1208.92 L1993.48 1208.92 L1992.9 1208.92 L1992.31 1208.92 L1991.72 1208.92 L1991.14 1208.92 L1990.55 1208.92 L1989.96 1208.92 L1989.38 1208.92 L1988.79 1208.92 L1988.2 1208.92 L1987.62 1208.92 L1987.03 1208.92 L1986.45 1208.92 L1985.86 1208.92 L1985.27 1208.92 L1984.69 1208.92 L1984.1 1208.92 L1983.51 1208.92 L1982.93 1208.92 L1982.34 1208.92 L1981.75 1208.92 L1981.17 1208.92 L1980.58 1208.92 L1979.99 1208.92 L1979.41 1208.92 L1978.82 1208.92 L1978.24 1208.92 L1977.65 1208.92 L1977.06 1208.92 L1976.48 1208.92 L1975.89 1208.92 L1975.3 1208.92 L1974.72 1208.92 L1974.13 1208.92 L1973.54 1208.92 L1972.96 1208.92 L1972.37 1208.92 L1971.78 1208.92 L1971.2 1208.92 L1970.61 1208.92 L1970.03 1208.92 L1969.44 1208.92 L1968.85 1208.92 L1968.27 1208.92 L1967.68 1208.92 L1967.09 1208.92 L1966.51 1208.92 L1965.92 1208.92 L1965.33 1208.92 L1964.75 1208.92 L1964.16 1208.92 L1963.58 1208.92 L1962.99 1208.92 L1962.4 1208.92 L1961.82 1208.92 L1961.23 1208.92 L1960.64 1208.92 L1960.06 1208.92 L1959.47 1208.92 L1958.88 1208.92 L1958.3 1208.92 L1957.71 1208.92 L1957.12 1208.92 L1956.54 1208.92 L1955.95 1208.92 L1955.37 1208.92 L1954.78 1208.92 L1954.19 1208.92 L1953.61 1208.92 L1953.02 1208.92 L1952.43 1208.92 L1951.85 1208.92 L1951.26 1208.92 L1950.67 1208.92 L1950.09 1208.92 L1949.5 1208.92 L1948.91 1208.92 L1948.33 1208.92 L1947.74 1208.92 L1947.16 1208.92 L1946.57 1208.92 L1945.98 1208.92 L1945.4 1208.92 L1944.81 1208.92 L1944.22 1208.92 L1943.64 1208.92 L1943.05 1208.92 L1942.46 1208.92 L1941.88 1208.92 L1941.29 1208.92 L1940.71 1208.92 L1940.12 1208.92 L1939.53 1208.92 L1938.95 1208.92 L1938.36 1208.92 L1937.77 1208.92 L1937.19 1208.92 L1936.6 1208.92 L1936.01 1208.92 L1935.43 1208.92 L1934.84 1208.92 L1934.25 1208.92 L1933.67 1208.92 L1933.08 1208.92 L1932.5 1208.92 L1931.91 1208.92 L1931.32 1208.92 L1930.74 1208.92 L1930.15 1208.92 L1929.56 1208.92 L1928.98 1208.92 L1928.39 1208.92 L1927.8 1208.92 L1927.22 1208.92 L1926.63 1208.92 L1926.04 1208.92 L1925.46 1208.92 L1924.87 1208.92 L1924.29 1208.92 L1923.7 1208.92 L1923.11 1208.92 L1922.53 1208.92 L1921.94 1208.92 L1921.35 1208.92 L1920.77 1208.92 L1920.18 1208.92 L1919.59 1208.92 L1919.01 1208.92 L1918.42 1208.92 L1917.83 1208.92 L1917.25 1208.92 L1916.66 1208.92 L1916.08 1208.92 L1915.49 1208.92 L1914.9 1208.92 L1914.32 1208.92 L1913.73 1208.92 L1913.14 1208.92 L1912.56 1208.92 L1911.97 1208.92 L1911.38 1208.92 L1910.8 1208.92 L1910.21 1208.92 L1909.63 1208.92 L1909.04 1208.92 L1908.45 1208.92 L1907.87 1208.92 L1907.28 1208.92 L1906.69 1208.92 L1906.11 1208.92 L1905.52 1208.92 L1904.93 1208.92 L1904.35 1208.92 L1903.76 1208.92 L1903.17 1208.92 L1902.59 1208.92 L1902 1208.92 L1901.42 1208.92 L1900.83 1208.92 L1900.24 1208.92 L1899.66 1208.92 L1899.07 1208.92 L1898.48 1208.92 L1897.9 1208.92 L1897.31 1208.92 L1896.72 1208.92 L1896.14 1208.92 L1895.55 1208.92 L1894.96 1208.92 L1894.38 1208.92 L1893.79 1208.92 L1893.21 1208.92 L1892.62 1208.92 L1892.03 1208.92 L1891.45 1208.92 L1890.86 1208.92 L1890.27 1208.92 L1889.69 1208.92 L1889.1 1208.92 L1888.51 1208.92 L1887.93 1208.92 L1887.34 1208.92 L1886.76 1208.92 L1886.17 1208.92 L1885.58 1208.92 L1885 1208.92 L1884.41 1208.92 L1883.82 1208.92 L1883.24 1208.92 L1882.65 1208.92 L1882.06 1208.92 L1881.48 1208.92 L1880.89 1208.92 L1880.3 1208.92 L1879.72 1208.92 L1879.13 1208.92 L1878.55 1208.92 L1877.96 1208.92 L1877.37 1208.92 L1876.79 1208.92 L1876.2 1208.92 L1875.61 1208.92 L1875.03 1208.92 L1874.44 1208.92 L1873.85 1208.92 L1873.27 1208.92 L1872.68 1208.92 L1872.09 1208.92 L1871.51 1208.92 L1870.92 1208.92 L1870.34 1208.92 L1869.75 1208.92 L1869.16 1208.92 L1868.58 1208.92 L1867.99 1208.92 L1867.4 1208.92 L1866.82 1208.92 L1866.23 1208.92 L1865.64 1208.92 L1865.06 1208.92 L1864.47 1208.92 L1863.88 1208.92 L1863.3 1208.92 L1862.71 1208.92 L1862.13 1208.92 L1861.54 1208.92 L1860.95 1208.92 L1860.37 1208.92 L1859.78 1208.92 L1859.19 1208.92 L1858.61 1208.92 L1858.02 1208.92 L1857.43 1208.92 L1856.85 1208.92 L1856.26 1208.92 L1855.68 1208.92 L1855.09 1208.92 L1854.5 1208.92 L1853.92 1208.92 L1853.33 1208.92 L1852.74 1208.92 L1852.16 1208.92 L1851.57 1208.92 L1850.98 1208.92 L1850.4 1208.92 L1849.81 1208.92 L1849.22 1208.92 L1848.64 1208.92 L1848.05 1208.92 L1847.47 1208.92 L1846.88 1208.92 L1846.29 1208.92 L1845.71 1208.92 L1845.12 1208.92 L1844.53 1208.92 L1843.95 1208.92 L1843.36 1208.92 L1842.77 1208.92 L1842.19 1208.92 L1841.6 1208.92 L1841.01 1208.92 L1840.43 1208.92 L1839.84 1208.92 L1839.26 1208.92 L1838.67 1208.92 L1838.08 1208.92 L1837.5 1208.92 L1836.91 1208.92 L1836.32 1208.92 L1835.74 1208.92 L1835.15 1208.92 L1834.56 1208.92 L1833.98 1208.92 L1833.39 1208.92 L1832.81 1208.92 L1832.22 1208.92 L1831.63 1208.92 L1831.05 1208.92 L1830.46 1208.92 L1829.87 1208.92 L1829.29 1208.92 L1828.7 1208.92 L1828.11 1208.92 L1827.53 1208.92 L1826.94 1208.92 L1826.35 1208.92 L1825.77 1208.92 L1825.18 1208.92 L1824.6 1208.92 L1824.01 1208.92 L1823.42 1208.92 L1822.84 1208.92 L1822.25 1208.92 L1821.66 1208.92 L1821.08 1208.92 L1820.49 1208.92 L1819.9 1208.92 L1819.32 1208.92 L1818.73 1208.92 L1818.14 1208.92 L1817.56 1208.92 L1816.97 1208.92 L1816.39 1208.92 L1815.8 1208.92 L1815.21 1208.92 L1814.63 1208.92 L1814.04 1208.92 L1813.45 1208.92 L1812.87 1208.92 L1812.28 1208.92 L1811.69 1208.92 L1811.11 1208.92 L1810.52 1208.92 L1809.94 1208.92 L1809.35 1208.92 L1808.76 1208.92 L1808.18 1208.92 L1807.59 1208.92 L1807 1208.92 L1806.42 1208.92 L1805.83 1208.92 L1805.24 1208.92 L1804.66 1208.92 L1804.07 1208.92 L1803.48 1208.92 L1802.9 1208.92 L1802.31 1208.92 L1801.73 1208.92 L1801.14 1208.92 L1800.55 1208.92 L1799.97 1208.92 L1799.38 1208.92 L1798.79 1208.92 L1798.21 1208.92 L1797.62 1208.92 L1797.03 1208.92 L1796.45 1208.92 L1795.86 1208.92 L1795.27 1208.92 L1794.69 1208.92 L1794.1 1208.92 L1793.52 1208.92 L1792.93 1208.92 L1792.34 1208.92 L1791.76 1208.92 L1791.17 1208.92 L1790.58 1208.92 L1790 1208.92 L1789.41 1208.92 L1788.82 1208.92 L1788.24 1208.92 L1787.65 1208.92 L1787.06 1208.92 L1786.48 1208.92 L1785.89 1208.92 L1785.31 1208.92 L1784.72 1208.92 L1784.13 1208.92 L1783.55 1208.92 L1782.96 1208.92 L1782.37 1208.92 L1781.79 1208.92 L1781.2 1208.92 L1780.61 1208.92 L1780.03 1208.92 L1779.44 1208.92 L1778.86 1208.92 L1778.27 1208.92 L1777.68 1208.92 L1777.1 1208.92 L1776.51 1208.92 L1775.92 1208.92 L1775.34 1208.92 L1774.75 1208.92 L1774.16 1208.92 L1773.58 1208.92 L1772.99 1208.92 L1772.4 1208.92 L1771.82 1208.92 L1771.23 1208.92 L1770.65 1208.92 L1770.06 1208.92 L1769.47 1208.92 L1768.89 1208.92 L1768.3 1208.92 L1767.71 1208.92 L1767.13 1208.92 L1766.54 1208.92 L1765.95 1208.92 L1765.37 1208.92 L1764.78 1208.92 L1764.19 1208.92 L1763.61 1208.92 L1763.02 1208.92 L1762.44 1208.92 L1761.85 1208.92 L1761.26 1208.92 L1760.68 1208.92 L1760.09 1208.92 L1759.5 1208.92 L1758.92 1208.92 L1758.33 1208.92 L1757.74 1208.92 L1757.16 1208.92 L1756.57 1208.92 L1755.99 1208.92 L1755.4 1208.92 L1754.81 1208.92 L1754.23 1208.92 L1753.64 1208.92 L1753.05 1208.92 L1752.47 1208.92 L1751.88 1208.92 L1751.29 1208.92 L1750.71 1208.92 L1750.12 1208.92 L1749.53 1208.92 L1748.95 1208.92 L1748.36 1208.92 L1747.78 1208.92 L1747.19 1208.92 L1746.6 1208.92 L1746.02 1208.92 L1745.43 1208.92 L1744.84 1208.92 L1744.26 1208.92 L1743.67 1208.92 L1743.08 1208.92 L1742.5 1208.92 L1741.91 1208.92 L1741.32 1208.92 L1740.74 1208.92 L1740.15 1208.92 L1739.57 1208.92 L1738.98 1208.92 L1738.39 1208.92 L1737.81 1208.92 L1737.22 1208.92 L1736.63 1208.92 L1736.05 1208.92 L1735.46 1208.92 L1734.87 1208.92 L1734.29 1208.92 L1733.7 1208.92 L1733.11 1208.92 L1732.53 1208.92 L1731.94 1208.92 L1731.36 1208.92 L1730.77 1208.92 L1730.18 1208.92 L1729.6 1208.92 L1729.01 1208.92 L1728.42 1208.92 L1727.84 1208.92 L1727.25 1208.92 L1726.66 1208.92 L1726.08 1208.92 L1725.49 1208.92 L1724.91 1208.92 L1724.32 1208.92 L1723.73 1208.92 L1723.15 1208.92 L1722.56 1208.92 L1721.97 1208.92 L1721.39 1208.92 L1720.8 1208.92 L1720.21 1208.92 L1719.63 1208.92 L1719.04 1208.92 L1718.45 1208.92 L1717.87 1208.92 L1717.28 1208.92 L1716.7 1208.92 L1716.11 1208.92 L1715.52 1208.92 L1714.94 1208.92 L1714.35 1208.92 L1713.76 1208.92 L1713.18 1208.92 L1712.59 1208.92 L1712 1208.92 L1711.42 1208.92 L1710.83 1208.92 L1710.24 1208.92 L1709.66 1208.92 L1709.07 1208.92 L1708.49 1208.92 L1707.9 1208.92 L1707.31 1208.92 L1706.73 1208.92 L1706.14 1208.92 L1705.55 1208.92 L1704.97 1208.92 L1704.38 1208.92 L1703.79 1208.92 L1703.21 1208.92 L1702.62 1208.92 L1702.04 1208.92 L1701.45 1208.92 L1700.86 1208.92 L1700.28 1208.92 L1699.69 1208.92 L1699.1 1208.92 L1698.52 1208.92 L1697.93 1208.92 L1697.34 1208.92 L1696.76 1208.92 L1696.17 1208.92 L1695.58 1208.92 L1695 1208.92 L1694.41 1208.92 L1693.83 1208.92 L1693.24 1208.92 L1692.65 1208.92 L1692.07 1208.92 L1691.48 1208.92 L1690.89 1208.92 L1690.31 1208.92 L1689.72 1208.92 L1689.13 1208.92 L1688.55 1208.92 L1687.96 1208.92 L1687.37 1208.92 L1686.79 1208.92 L1686.2 1208.92 L1685.62 1208.92 L1685.03 1208.92 L1684.44 1208.92 L1683.86 1208.92 L1683.27 1208.92 L1682.68 1208.92 L1682.1 1208.92 L1681.51 1208.92 L1680.92 1208.92 L1680.34 1208.92 L1679.75 1208.92 L1679.17 1208.92 L1678.58 1208.92 L1677.99 1208.92 L1677.41 1208.92 L1676.82 1208.92 L1676.23 1208.92 L1675.65 1208.92 L1675.06 1208.92 L1674.47 1208.92 L1673.89 1208.92 L1673.3 1208.92 L1672.71 1208.92 L1672.13 1208.92 L1671.54 1208.92 L1670.96 1208.92 L1670.37 1208.92 L1669.78 1208.92 L1669.2 1208.92 L1668.61 1208.92 L1668.02 1208.92 L1667.44 1208.92 L1666.85 1208.92 L1666.26 1208.92 L1665.68 1208.92 L1665.09 1208.92 L1664.5 1208.92 L1663.92 1208.92 L1663.33 1208.92 L1662.75 1208.92 L1662.16 1208.92 L1661.57 1208.92 L1660.99 1208.92 L1660.4 1208.92 L1659.81 1208.92 L1659.23 1208.92 L1658.64 1208.92 L1658.05 1208.92 L1657.47 1208.92 L1656.88 1208.92 L1656.29 1208.92 L1655.71 1208.92 L1655.12 1208.92 L1654.54 1208.92 L1653.95 1208.92 L1653.36 1208.92 L1652.78 1208.92 L1652.19 1208.92 L1651.6 1208.92 L1651.02 1208.92 L1650.43 1208.92 L1649.84 1208.92 L1649.26 1208.92 L1648.67 1208.92 L1648.09 1208.92 L1647.5 1208.92 L1646.91 1208.92 L1646.33 1208.92 L1645.74 1208.92 L1645.15 1208.92 L1644.57 1208.92 L1643.98 1208.92 L1643.39 1208.92 L1642.81 1208.92 L1642.22 1208.92 L1641.63 1208.92 L1641.05 1208.92 L1640.46 1208.92 L1639.88 1208.92 L1639.29 1208.92 L1638.7 1208.92 L1638.12 1208.92 L1637.53 1208.92 L1636.94 1208.92 L1636.36 1208.92 L1635.77 1208.92 L1635.18 1208.92 L1634.6 1208.92 L1634.01 1208.92 L1633.42 1208.92 L1632.84 1208.92 L1632.25 1208.92 L1631.67 1208.92 L1631.08 1208.92 L1630.49 1208.92 L1629.91 1208.92 L1629.32 1208.92 L1628.73 1208.92 L1628.15 1208.92 L1627.56 1208.92 L1626.97 1208.92 L1626.39 1208.92 L1625.8 1208.92 L1625.22 1208.92 L1624.63 1208.92 L1624.04 1208.92 L1623.46 1208.92 L1622.87 1208.92 L1622.28 1208.92 L1621.7 1208.92 L1621.11 1208.92 L1620.52 1208.92 L1619.94 1208.92 L1619.35 1208.92 L1618.76 1208.92 L1618.18 1208.92 L1617.59 1208.92 L1617.01 1208.92 L1616.42 1208.92 L1615.83 1208.92 L1615.25 1208.92 L1614.66 1208.92 L1614.07 1208.92 L1613.49 1208.92 L1612.9 1208.92 L1612.31 1208.92 L1611.73 1208.92 L1611.14 1208.92 L1610.55 1208.92 L1609.97 1208.92 L1609.38 1208.92 L1608.8 1208.92 L1608.21 1208.92 L1607.62 1208.92 L1607.04 1208.92 L1606.45 1208.92 L1605.86 1208.92 L1605.28 1208.92 L1604.69 1208.92 L1604.1 1208.92 L1603.52 1208.92 L1602.93 1208.92 L1602.34 1208.92 L1601.76 1208.92 L1601.17 1208.92 L1600.59 1208.92 L1600 1208.92 L1599.41 1208.92 L1598.83 1208.92 L1598.24 1208.92 L1597.65 1208.92 L1597.07 1208.92 L1596.48 1208.92 L1595.89 1208.92 L1595.31 1208.92 L1594.72 1208.92 L1594.14 1208.92 L1593.55 1208.92 L1592.96 1208.92 L1592.38 1208.92 L1591.79 1208.92 L1591.2 1208.92 L1590.62 1208.92 L1590.03 1208.92 L1589.44 1208.92 L1588.86 1208.92 L1588.27 1208.92 L1587.68 1208.92 L1587.1 1208.92 L1586.51 1208.92 L1585.93 1208.92 L1585.34 1208.92 L1584.75 1208.92 L1584.17 1208.92 L1583.58 1208.92 L1582.99 1208.92 L1582.41 1208.92 L1581.82 1208.92 L1581.23 1208.92 L1580.65 1208.92 L1580.06 1208.92 L1579.47 1208.92 L1578.89 1208.92 L1578.3 1208.92 L1577.72 1208.92 L1577.13 1208.92 L1576.54 1208.92 L1575.96 1208.92 L1575.37 1208.92 L1574.78 1208.92 L1574.2 1208.92 L1573.61 1208.92 L1573.02 1208.92 L1572.44 1208.92 L1571.85 1208.92 L1571.27 1208.92 L1570.68 1208.92 L1570.09 1208.92 L1569.51 1208.92 L1568.92 1208.92 L1568.33 1208.92 L1567.75 1208.92 L1567.16 1208.92 L1566.57 1208.92 L1565.99 1208.92 L1565.4 1208.92 L1564.81 1208.92 L1564.23 1208.92 L1563.64 1208.92 L1563.06 1208.92 L1562.47 1208.92 L1561.88 1208.92 L1561.3 1208.92 L1560.71 1208.92 L1560.12 1208.92 L1559.54 1208.92 L1558.95 1208.92 L1558.36 1208.92 L1557.78 1208.92 L1557.19 1208.92 L1556.6 1208.92 L1556.02 1208.92 L1555.43 1208.92 L1554.85 1208.92 L1554.26 1208.92 L1553.67 1208.92 L1553.09 1208.92 L1552.5 1208.92 L1551.91 1208.92 L1551.33 1208.92 L1550.74 1208.92 L1550.15 1208.92 L1549.57 1208.92 L1548.98 1208.92 L1548.4 1208.92 L1547.81 1208.92 L1547.22 1208.92 L1546.64 1208.92 L1546.05 1208.92 L1545.46 1208.92 L1544.88 1208.92 L1544.29 1208.92 L1543.7 1208.92 L1543.12 1208.92 L1542.53 1208.92 L1541.94 1208.92 L1541.36 1208.92 L1540.77 1208.92 L1540.19 1208.92 L1539.6 1208.92 L1539.01 1208.92 L1538.43 1208.92 L1537.84 1208.92 L1537.25 1208.92 L1536.67 1208.92 L1536.08 1208.92 L1535.49 1208.92 L1534.91 1208.92 L1534.32 1208.92 L1533.73 1208.92 L1533.15 1208.92 L1532.56 1208.92 L1531.98 1208.92 L1531.39 1208.92 L1530.8 1208.92 L1530.22 1208.92 L1529.63 1208.92 L1529.04 1208.92 L1528.46 1208.92 L1527.87 1208.92 L1527.28 1208.92 L1526.7 1208.92 L1526.11 1208.92 L1525.52 1208.92 L1524.94 1208.92 L1524.35 1208.92 L1523.77 1208.92 L1523.18 1208.92 L1522.59 1208.92 L1522.01 1208.92 L1521.42 1208.92 L1520.83 1208.92 L1520.25 1208.92 L1519.66 1208.92 L1519.07 1208.92 L1518.49 1208.92 L1517.9 1208.92 L1517.32 1208.92 L1516.73 1208.92 L1516.14 1208.92 L1515.56 1208.92 L1514.97 1208.92 L1514.38 1208.92 L1513.8 1208.92 L1513.21 1208.92 L1512.62 1208.92 L1512.04 1208.92 L1511.45 1208.92 L1510.86 1208.92 L1510.28 1208.92 L1509.69 1208.92 L1509.11 1208.92 L1508.52 1208.92 L1507.93 1208.92 L1507.35 1208.92 L1506.76 1208.92 L1506.17 1208.92 L1505.59 1208.92 L1505 1208.92 L1504.41 1208.92 L1503.83 1208.92 L1503.24 1208.92 L1502.65 1208.92 L1502.07 1208.92 L1501.48 1208.92 L1500.9 1208.92 L1500.31 1208.92 L1499.72 1208.92 L1499.14 1208.92 L1498.55 1208.92 L1497.96 1208.92 L1497.38 1208.92 L1496.79 1208.92 L1496.2 1208.92 L1495.62 1208.92 L1495.03 1208.92 L1494.45 1208.92 L1493.86 1208.92 L1493.27 1208.92 L1492.69 1208.92 L1492.1 1208.92 L1491.51 1208.92 L1490.93 1208.92 L1490.34 1208.92 L1489.75 1208.92 L1489.17 1208.92 L1488.58 1208.92 L1487.99 1208.92 L1487.41 1208.92 L1486.82 1208.92 L1486.24 1208.92 L1485.65 1208.92 L1485.06 1208.92 L1484.48 1208.92 L1483.89 1208.92 L1483.3 1208.92 L1482.72 1208.92 L1482.13 1208.92 L1481.54 1208.92 L1480.96 1208.92 L1480.37 1208.92 L1479.78 1208.92 L1479.2 1208.92 L1478.61 1208.92 L1478.03 1208.92 L1477.44 1208.92 L1476.85 1208.92 L1476.27 1208.92 L1475.68 1208.92 L1475.09 1208.92 L1474.51 1208.92 L1473.92 1208.92 L1473.33 1208.92 L1472.75 1208.92 L1472.16 1208.92 L1471.57 1208.92 L1470.99 1208.92 L1470.4 1208.92 L1469.82 1208.92 L1469.23 1208.92 L1468.64 1208.92 L1468.06 1208.92 L1467.47 1208.92 L1466.88 1208.92 L1466.3 1208.92 L1465.71 1208.92 L1465.12 1208.92 L1464.54 1208.92 L1463.95 1208.92 L1463.37 1208.92 L1462.78 1208.92 L1462.19 1208.92 L1461.61 1208.92 L1461.02 1208.92 L1460.43 1208.92 L1459.85 1208.92 L1459.26 1208.92 L1458.67 1208.92 L1458.09 1208.92 L1457.5 1208.92 L1456.91 1208.92 L1456.33 1208.92 L1455.74 1208.92 L1455.16 1208.92 L1454.57 1208.92 L1453.98 1208.92 L1453.4 1208.92 L1452.81 1208.92 L1452.22 1208.92 L1451.64 1208.92 L1451.05 1208.92 L1450.46 1208.92 L1449.88 1208.92 L1449.29 1208.92 L1448.7 1208.92 L1448.12 1208.92 L1447.53 1208.92 L1446.95 1208.92 L1446.36 1208.92 L1445.77 1208.92 L1445.19 1208.92 L1444.6 1208.92 L1444.01 1208.92 L1443.43 1208.92 L1442.84 1208.92 L1442.25 1208.92 L1441.67 1208.92 L1441.08 1208.92 L1440.5 1208.92 L1439.91 1208.92 L1439.32 1208.92 L1438.74 1208.92 L1438.15 1208.92 L1437.56 1208.92 L1436.98 1208.92 L1436.39 1208.92 L1435.8 1208.92 L1435.22 1208.92 L1434.63 1208.92 L1434.04 1208.92 L1433.46 1208.92 L1432.87 1208.92 L1432.29 1208.92 L1431.7 1208.92 L1431.11 1208.92 L1430.53 1208.92 L1429.94 1208.92 L1429.35 1208.92 L1428.77 1208.92 L1428.18 1208.92 L1427.59 1208.92 L1427.01 1208.92 L1426.42 1208.92 L1425.83 1208.92 L1425.25 1208.92 L1424.66 1208.92 L1424.08 1208.92 L1423.49 1208.92 L1422.9 1208.92 L1422.32 1208.92 L1421.73 1208.92 L1421.14 1208.92 L1420.56 1208.92 L1419.97 1208.92 L1419.38 1208.92 L1418.8 1208.92 L1418.21 1208.92 L1417.63 1208.92 L1417.04 1208.92 L1416.45 1208.92 L1415.87 1208.92 L1415.28 1208.92 L1414.69 1208.92 L1414.11 1208.92 L1413.52 1208.92 L1412.93 1208.92 L1412.35 1208.92 L1411.76 1208.92 L1411.17 1208.92 L1410.59 1208.92 L1410 1208.92 L1409.42 1208.92 L1408.83 1208.92 L1408.24 1208.92 L1407.66 1208.92 L1407.07 1208.92 L1406.48 1208.92 L1405.9 1208.92 L1405.31 1208.92 L1404.72 1208.92 L1404.14 1208.92 L1403.55 1208.92 L1402.96 1208.92 L1402.38 1208.92 L1401.79 1208.92 L1401.21 1208.92 L1400.62 1208.92 L1400.03 1208.92 L1399.45 1208.92 L1398.86 1208.92 L1398.27 1208.92 L1397.69 1208.92 L1397.1 1208.92 L1396.51 1208.92 L1395.93 1208.92 L1395.34 1208.92 L1394.75 1208.92 L1394.17 1208.92 L1393.58 1208.92 L1393 1208.92 L1392.41 1208.92 L1391.82 1208.92 L1391.24 1208.92 L1390.65 1208.92 L1390.06 1208.92 L1389.48 1208.92 L1388.89 1208.92 L1388.3 1208.92 L1387.72 1208.92 L1387.13 1208.92 L1386.55 1208.92 L1385.96 1208.92 L1385.37 1208.92 L1384.79 1208.92 L1384.2 1208.92 L1383.61 1208.92 L1383.03 1208.92 L1382.44 1208.92 L1381.85 1208.92 L1381.27 1208.92 L1380.68 1208.92 L1380.09 1208.92 L1379.51 1208.92 L1378.92 1208.92 L1378.34 1208.92 L1377.75 1208.92 L1377.16 1208.92 L1376.58 1208.92 L1375.99 1208.92 L1375.4 1208.92 L1374.82 1208.92 L1374.23 1208.92 L1373.64 1208.92 L1373.06 1208.92 L1372.47 1208.92 L1371.88 1208.92 L1371.3 1208.92 L1370.71 1208.92 L1370.13 1208.92 L1369.54 1208.92 L1368.95 1208.92 L1368.37 1208.92 L1367.78 1208.92 L1367.19 1208.92 L1366.61 1208.92 L1366.02 1208.92 L1365.43 1208.92 L1364.85 1208.92 L1364.26 1208.92 L1363.68 1208.92 L1363.09 1208.92 L1362.5 1208.92 L1361.92 1208.92 L1361.33 1208.92 L1360.74 1208.92 L1360.16 1208.92 L1359.57 1208.92 L1358.98 1208.92 L1358.4 1208.92 L1357.81 1208.92 L1357.22 1208.92 L1356.64 1208.92 L1356.05 1208.92 L1355.47 1208.92 L1354.88 1208.92 L1354.29 1208.92 L1353.71 1208.92 L1353.12 1208.92 L1352.53 1208.92 L1351.95 1208.92 L1351.36 1208.92 L1350.77 1208.92 L1350.19 1208.92 L1349.6 1208.92 L1349.01 1208.92 L1348.43 1208.92 L1347.84 1208.92 L1347.26 1208.92 L1346.67 1208.92 L1346.08 1208.92 L1345.5 1208.92 L1344.91 1208.92 L1344.32 1208.92 L1343.74 1208.92 L1343.15 1208.92 L1342.56 1208.92 L1341.98 1208.92 L1341.39 1208.92 L1340.8 1208.92 L1340.22 1208.92 L1339.63 1208.92 L1339.05 1208.92 L1338.46 1208.92 L1337.87 1208.92 L1337.29 1208.92 L1336.7 1208.92 L1336.11 1208.92 L1335.53 1208.92 L1334.94 1208.92 L1334.35 1208.92 L1333.77 1208.92 L1333.18 1208.92 L1332.6 1208.92 L1332.01 1208.92 L1331.42 1208.92 L1330.84 1208.92 L1330.25 1208.92 L1329.66 1208.92 L1329.08 1208.92 L1328.49 1208.92 L1327.9 1208.92 L1327.32 1208.92 L1326.73 1208.92 L1326.14 1208.92 L1325.56 1208.92 L1324.97 1208.92 L1324.39 1208.92 L1323.8 1208.92 L1323.21 1208.92 L1322.63 1208.92 L1322.04 1208.92 L1321.45 1208.92 L1320.87 1208.92 L1320.28 1208.92 L1319.69 1208.92 L1319.11 1208.92 L1318.52 1208.92 L1317.93 1208.92 L1317.35 1208.92 L1316.76 1208.92 L1316.18 1208.92 L1315.59 1208.92 L1315 1208.92 L1314.42 1208.92 L1313.83 1208.92 L1313.24 1208.92 L1312.66 1208.92 L1312.07 1208.92 L1311.48 1208.92 L1310.9 1208.92 L1310.31 1208.92 L1309.73 1208.92 L1309.14 1208.92 L1308.55 1208.92 L1307.97 1208.92 L1307.38 1208.92 L1306.79 1208.92 L1306.21 1208.92 L1305.62 1208.92 L1305.03 1208.92 L1304.45 1208.92 L1303.86 1208.92 L1303.27 1208.92 L1302.69 1208.92 L1302.1 1208.92 L1301.52 1208.92 L1300.93 1208.92 L1300.34 1208.92 L1299.76 1208.92 L1299.17 1208.92 L1298.58 1208.92 L1298 1208.92 L1297.41 1208.92 L1296.82 1208.92 L1296.24 1208.92 L1295.65 1208.92 L1295.06 1208.92 L1294.48 1208.92 L1293.89 1208.92 L1293.31 1208.92 L1292.72 1208.92 L1292.13 1208.92 L1291.55 1208.92 L1290.96 1208.92 L1290.37 1208.92 L1289.79 1208.92 L1289.2 1208.92 L1288.61 1208.92 L1288.03 1208.92 L1287.44 1208.92 L1286.86 1208.92 L1286.27 1208.92 L1285.68 1208.92 L1285.1 1208.92 L1284.51 1208.92 L1283.92 1208.92 L1283.34 1208.92 L1282.75 1208.92 L1282.16 1208.92 L1281.58 1208.92 L1280.99 1208.92 L1280.4 1208.92 L1279.82 1208.92 L1279.23 1208.92 L1278.65 1208.92 L1278.06 1208.92 L1277.47 1208.92 L1276.89 1208.92 L1276.3 1208.92 L1275.71 1208.92 L1275.13 1208.92 L1274.54 1208.92 L1273.95 1208.92 L1273.37 1208.92 L1272.78 1208.92 L1272.19 1208.92 L1271.61 1208.92 L1271.02 1208.92 L1270.44 1208.92 L1269.85 1208.92 L1269.26 1208.92 L1268.68 1208.92 L1268.09 1208.92 L1267.5 1208.92 L1266.92 1208.92 L1266.33 1208.92 L1265.74 1208.92 L1265.16 1208.92 L1264.57 1208.92 L1263.98 1208.92 L1263.4 1208.92 L1262.81 1208.92 L1262.23 1208.92 L1261.64 1208.92 L1261.05 1208.92 L1260.47 1208.92 L1259.88 1208.92 L1259.29 1208.92 L1258.71 1208.92 L1258.12 1208.92 L1257.53 1208.92 L1256.95 1208.92 L1256.36 1208.92 L1255.78 1208.92 L1255.19 1208.92 L1254.6 1208.92 L1254.02 1208.92 L1253.43 1208.92 L1252.84 1208.92 L1252.26 1208.92 L1251.67 1208.92 L1251.08 1208.92 L1250.5 1208.92 L1249.91 1208.92 L1249.32 1208.92 L1248.74 1208.92 L1248.15 1208.92 L1247.57 1208.92 L1246.98 1208.92 L1246.39 1208.92 L1245.81 1208.92 L1245.22 1208.92 L1244.63 1208.92 L1244.05 1208.92 L1243.46 1208.92 L1242.87 1208.92 L1242.29 1208.92 L1241.7 1208.92 L1241.11 1208.92 L1240.53 1208.92 L1239.94 1208.92 L1239.36 1208.92 L1238.77 1208.92 L1238.18 1208.92 L1237.6 1208.92 L1237.01 1208.92 L1236.42 1208.92 L1235.84 1208.92 L1235.25 1208.92 L1234.66 1208.92 L1234.08 1208.92 L1233.49 1208.92 L1232.91 1208.92 L1232.32 1208.92 L1231.73 1208.92 L1231.15 1208.92 L1230.56 1208.92 L1229.97 1208.92 L1229.39 1208.92 L1228.8 1208.92 L1228.21 1208.92 L1227.63 1208.92 L1227.04 1208.92 L1226.45 1208.92 L1225.87 1208.92 L1225.28 1208.92 L1224.7 1208.92 L1224.11 1208.92 L1223.52 1208.92 L1222.94 1208.92 L1222.35 1208.92 L1221.76 1208.92 L1221.18 1208.92 L1220.59 1208.92 L1220 1208.92 L1219.42 1208.92 L1218.83 1208.92 L1218.24 1208.92 L1217.66 1208.92 L1217.07 1208.92 L1216.49 1208.92 L1215.9 1208.92 L1215.31 1208.92 L1214.73 1208.92 L1214.14 1208.92 L1213.55 1208.92 L1212.97 1208.92 L1212.38 1208.92 L1211.79 1208.92 L1211.21 1208.92 L1210.62 1208.92 L1210.03 1208.92 L1209.45 1208.92 L1208.86 1208.92 L1208.28 1208.92 L1207.69 1208.92 L1207.1 1208.92 L1206.52 1208.92 L1205.93 1208.92 L1205.34 1208.92 L1204.76 1208.92 L1204.17 1208.92 L1203.58 1208.92 L1203 1208.92 L1202.41 1208.92 L1201.83 1208.92 L1201.24 1208.92 L1200.65 1208.92 L1200.07 1208.92 L1199.48 1208.92 L1198.89 1208.92 L1198.31 1208.92 L1197.72 1208.92 L1197.13 1208.92 L1196.55 1208.92 L1195.96 1208.92 L1195.37 1208.92 L1194.79 1208.92 L1194.2 1208.92 L1193.62 1208.92 L1193.03 1208.92 L1192.44 1208.92 L1191.86 1208.92 L1191.27 1208.92 L1190.68 1208.92 L1190.1 1208.92 L1189.51 1208.92 L1188.92 1208.92 L1188.34 1208.92 L1187.75 1208.92 L1187.16 1208.92 L1186.58 1208.92 L1185.99 1208.92 L1185.41 1208.92 L1184.82 1208.92 L1184.23 1208.92 L1183.65 1208.92 L1183.06 1208.92 L1182.47 1208.92 L1181.89 1208.92 L1181.3 1208.92 L1180.71 1208.92 L1180.13 1208.92 L1179.54 1208.92 L1178.96 1208.92 L1178.37 1208.92 L1177.78 1208.92 L1177.2 1208.92 L1176.61 1208.92 L1176.02 1208.92 L1175.44 1208.92 L1174.85 1208.92 L1174.26 1208.92 L1173.68 1208.92 L1173.09 1208.92 L1172.5 1208.92 L1171.92 1208.92 L1171.33 1208.92 L1170.75 1208.92 L1170.16 1208.92 L1169.57 1208.92 L1168.99 1208.92 L1168.4 1208.92 L1167.81 1208.92 L1167.23 1208.92 L1166.64 1208.92 L1166.05 1208.92 L1165.47 1208.92 L1164.88 1208.92 L1164.29 1208.92 L1163.71 1208.92 L1163.12 1208.92 L1162.54 1208.92 L1161.95 1208.92 L1161.36 1208.92 L1160.78 1208.92 L1160.19 1208.92 L1159.6 1208.92 L1159.02 1208.92 L1158.43 1208.92 L1157.84 1208.92 L1157.26 1208.92 L1156.67 1208.92 L1156.09 1208.92 L1155.5 1208.92 L1154.91 1208.92 L1154.33 1208.92 L1153.74 1208.92 L1153.15 1208.92 L1152.57 1208.92 L1151.98 1208.92 L1151.39 1208.92 L1150.81 1208.92 L1150.22 1208.92 L1149.63 1208.92 L1149.05 1208.92 L1148.46 1208.92 L1147.88 1208.92 L1147.29 1208.92 L1146.7 1208.92 L1146.12 1208.92 L1145.53 1208.92 L1144.94 1208.92 L1144.36 1208.92 L1143.77 1208.92 L1143.18 1208.92 L1142.6 1208.92 L1142.01 1208.92 L1141.42 1208.92 L1140.84 1208.92 L1140.25 1208.92 L1139.67 1208.92 L1139.08 1208.92 L1138.49 1208.92 L1137.91 1208.92 L1137.32 1208.92 L1136.73 1208.92 L1136.15 1208.92 L1135.56 1208.92 L1134.97 1208.92 L1134.39 1208.92 L1133.8 1208.92 L1133.21 1208.92 L1132.63 1208.92 L1132.04 1208.92 L1131.46 1208.92 L1130.87 1208.92 L1130.28 1208.92 L1129.7 1208.92 L1129.11 1208.92 L1128.52 1208.92 L1127.94 1208.92 L1127.35 1208.92 L1126.76 1208.92 L1126.18 1208.92 L1125.59 1208.92 L1125.01 1208.92 L1124.42 1208.92 L1123.83 1208.92 L1123.25 1208.92 L1122.66 1208.92 L1122.07 1208.92 L1121.49 1208.92 L1120.9 1208.92 L1120.31 1208.92 L1119.73 1208.92 L1119.14 1208.92 L1118.55 1208.92 L1117.97 1208.92 L1117.38 1208.92 L1116.8 1208.92 L1116.21 1208.92 L1115.62 1208.92 L1115.04 1208.92 L1114.45 1208.92 L1113.86 1208.92 L1113.28 1208.92 L1112.69 1208.92 L1112.1 1208.92 L1111.52 1208.92 L1110.93 1208.92 L1110.34 1208.92 L1109.76 1208.92 L1109.17 1208.92 L1108.59 1208.92 L1108 1208.92 L1107.41 1208.92 L1106.83 1208.92 L1106.24 1208.92 L1105.65 1208.92 L1105.07 1208.92 L1104.48 1208.92 L1103.89 1208.92 L1103.31 1208.92 L1102.72 1208.92 L1102.14 1208.92 L1101.55 1208.92 L1100.96 1208.92 L1100.38 1208.92 L1099.79 1208.92 L1099.2 1208.92 L1098.62 1208.92 L1098.03 1208.92 L1097.44 1208.92 L1096.86 1208.92 L1096.27 1208.92 L1095.68 1208.92 L1095.1 1208.92 L1094.51 1208.92 L1093.93 1208.92 L1093.34 1208.92 L1092.75 1208.92 L1092.17 1208.92 L1091.58 1208.92 L1090.99 1208.92 L1090.41 1208.92 L1089.82 1208.92 L1089.23 1208.92 L1088.65 1208.92 L1088.06 1208.92 L1087.47 1208.92 L1086.89 1208.92 L1086.3 1208.92 L1085.72 1208.92 L1085.13 1208.92 L1084.54 1208.92 L1083.96 1208.92 L1083.37 1208.92 L1082.78 1208.92 L1082.2 1208.92 L1081.61 1208.92 L1081.02 1208.92 L1080.44 1208.92 L1079.85 1208.92 L1079.26 1208.92 L1078.68 1208.92 L1078.09 1208.92 L1077.51 1208.92 L1076.92 1208.92 L1076.33 1208.92 L1075.75 1208.92 L1075.16 1208.92 L1074.57 1208.92 L1073.99 1208.92 L1073.4 1208.92 L1072.81 1208.92 L1072.23 1208.92 L1071.64 1208.92 L1071.06 1208.92 L1070.47 1208.92 L1069.88 1208.92 L1069.3 1208.92 L1068.71 1208.92 L1068.12 1208.92 L1067.54 1208.92 L1066.95 1208.92 L1066.36 1208.92 L1065.78 1208.92 L1065.19 1208.92 L1064.6 1208.92 L1064.02 1208.92 L1063.43 1208.92 L1062.85 1208.92 L1062.26 1208.92 L1061.67 1208.92 L1061.09 1208.92 L1060.5 1208.92 L1059.91 1208.92 L1059.33 1208.92 L1058.74 1208.92 L1058.15 1208.92 L1057.57 1208.92 L1056.98 1208.92 L1056.39 1208.92 L1055.81 1208.92 L1055.22 1208.92 L1054.64 1208.92 L1054.05 1208.92 L1053.46 1208.92 L1052.88 1208.92 L1052.29 1208.92 L1051.7 1208.92 L1051.12 1208.92 L1050.53 1208.92 L1049.94 1208.92 L1049.36 1208.92 L1048.77 1208.92 L1048.19 1208.92 L1047.6 1208.92 L1047.01 1208.92 L1046.43 1208.92 L1045.84 1208.92 L1045.25 1208.92 L1044.67 1208.92 L1044.08 1208.92 L1043.49 1208.92 L1042.91 1208.92 L1042.32 1208.92 L1041.73 1208.92 L1041.15 1208.92 L1040.56 1208.92 L1039.98 1208.92 L1039.39 1208.92 L1038.8 1208.92 L1038.22 1208.92 L1037.63 1208.92 L1037.04 1208.92 L1036.46 1208.92 L1035.87 1208.92 L1035.28 1208.92 L1034.7 1208.92 L1034.11 1208.92 L1033.52 1208.92 L1032.94 1208.92 L1032.35 1208.92 L1031.77 1208.92 L1031.18 1208.92 L1030.59 1208.92 L1030.01 1208.92 L1029.42 1208.92 L1028.83 1208.92 L1028.25 1208.92 L1027.66 1208.92 L1027.07 1208.92 L1026.49 1208.92 L1025.9 1208.92 L1025.32 1208.92 L1024.73 1208.92 L1024.14 1208.92 L1023.56 1208.92 L1022.97 1208.92 L1022.38 1208.92 L1021.8 1208.92 L1021.21 1208.92 L1020.62 1208.92 L1020.04 1208.92 L1019.45 1208.92 L1018.86 1208.92 L1018.28 1208.92 L1017.69 1208.92 L1017.11 1208.92 L1016.52 1208.92 L1015.93 1208.92 L1015.35 1208.92 L1014.76 1208.92 L1014.17 1208.92 L1013.59 1208.92 L1013 1208.92 L1012.41 1208.92 L1011.83 1208.92 L1011.24 1208.92 L1010.65 1208.92 L1010.07 1208.92 L1009.48 1208.92 L1008.9 1208.92 L1008.31 1208.92 L1007.72 1208.92 L1007.14 1208.92 L1006.55 1208.92 L1005.96 1208.92 L1005.38 1208.92 L1004.79 1208.92 L1004.2 1208.92 L1003.62 1208.92 L1003.03 1208.92 L1002.44 1208.92 L1001.86 1208.92 L1001.27 1208.92 L1000.69 1208.92 L1000.1 1208.92 L999.513 1208.92 L998.926 1208.92 L998.34 1208.92 L997.754 1208.92 L997.167 1208.92 L996.581 1208.92 L995.994 1208.92 L995.408 1208.92 L994.822 1208.92 L994.235 1208.92 L993.649 1208.92 L993.062 1208.92 L992.476 1208.92 L991.889 1208.92 L991.303 1208.92 L990.717 1208.92 L990.13 1208.92 L989.544 1208.92 L988.957 1208.92 L988.371 1208.92 L987.785 1208.92 L987.198 1208.92 L986.612 1208.92 L986.025 1208.92  Z\" fill=\"#3da44d\" fill-rule=\"evenodd\" fill-opacity=\"0.5\"/>\n<polyline clip-path=\"url(#clip442)\" style=\"stroke:#3da44d; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"986.025,1209.01 986.612,1209.01 987.198,1209.01 987.785,1209.01 988.371,1209.01 988.957,1209.01 989.544,1209.01 990.13,1209.01 990.717,1209.01 991.303,1209.01 991.889,1209.01 992.476,1209.01 993.062,1209.01 993.649,1209.01 994.235,1209.01 994.822,1209.01 995.408,1209.01 995.994,1209.01 996.581,1209.01 997.167,1209.01 997.754,1209.01 998.34,1209.01 998.926,1209.01 999.513,1209.01 1000.1,1209.01 1000.69,1209.01 1001.27,1209.01 1001.86,1209.01 1002.44,1209.01 1003.03,1209.01 1003.62,1209.01 1004.2,1209.01 1004.79,1209.01 1005.38,1209.01 1005.96,1209.01 1006.55,1209.01 1007.14,1209.01 1007.72,1209.01 1008.31,1209.01 1008.9,1209.01 1009.48,1209.01 1010.07,1209.01 1010.65,1209.01 1011.24,1209.01 1011.83,1209.01 1012.41,1209.01 1013,1209.01 1013.59,1209.01 1014.17,1209.01 1014.76,1209.01 1015.35,1209.01 1015.93,1209.01 1016.52,1209.01 1017.11,1209.01 1017.69,1209.01 1018.28,1209.01 1018.86,1209.01 1019.45,1209.01 1020.04,1209.01 1020.62,1209.01 1021.21,1209.01 1021.8,1209.01 1022.38,1209.01 1022.97,1209.01 1023.56,1209.01 1024.14,1209.01 1024.73,1209.01 1025.32,1209.01 1025.9,1209.01 1026.49,1209.01 1027.07,1209.01 1027.66,1209.01 1028.25,1209.01 1028.83,1209.01 1029.42,1209.01 1030.01,1209.01 1030.59,1209.01 1031.18,1209.01 1031.77,1209.01 1032.35,1209.01 1032.94,1209.01 1033.52,1209.01 1034.11,1209.01 1034.7,1209.01 1035.28,1209.01 1035.87,1209.01 1036.46,1209.01 1037.04,1209.01 1037.63,1209.01 1038.22,1209.01 1038.8,1209.01 1039.39,1209.01 1039.98,1209.01 1040.56,1209.01 1041.15,1209.01 1041.73,1209.01 1042.32,1209.01 1042.91,1209.01 1043.49,1209.01 1044.08,1209.01 1044.67,1209.01 1045.25,1209.01 1045.84,1209.01 1046.43,1209.01 1047.01,1209.01 1047.6,1209.01 1048.19,1209.01 1048.77,1209.01 1049.36,1209.01 1049.94,1209.01 1050.53,1209.01 1051.12,1209.01 1051.7,1209.01 1052.29,1209.01 1052.88,1209.01 1053.46,1209.01 1054.05,1209.01 1054.64,1209.01 1055.22,1209.01 1055.81,1209.01 1056.39,1209.01 1056.98,1209.01 1057.57,1209.01 1058.15,1209.01 1058.74,1209.01 1059.33,1209.01 1059.91,1209.01 1060.5,1209.01 1061.09,1209.01 1061.67,1209.01 1062.26,1209.01 1062.85,1209.01 1063.43,1209.01 1064.02,1209.01 1064.6,1209.01 1065.19,1209.01 1065.78,1209.01 1066.36,1209.01 1066.95,1209.01 1067.54,1209.01 1068.12,1209.01 1068.71,1209.01 1069.3,1209.01 1069.88,1209.01 1070.47,1209.01 1071.06,1209.01 1071.64,1209.01 1072.23,1209.01 1072.81,1209.01 1073.4,1209.01 1073.99,1209.01 1074.57,1209.01 1075.16,1209.01 1075.75,1209.01 1076.33,1209.01 1076.92,1209.01 1077.51,1209.01 1078.09,1209.01 1078.68,1209.01 1079.26,1209.01 1079.85,1209.01 1080.44,1209.01 1081.02,1209.01 1081.61,1209.01 1082.2,1209.01 1082.78,1209.01 1083.37,1209.01 1083.96,1209.01 1084.54,1209.01 1085.13,1209.01 1085.72,1209.01 1086.3,1209.01 1086.89,1209.01 1087.47,1209.01 1088.06,1209.01 1088.65,1209.01 1089.23,1209.01 1089.82,1209.01 1090.41,1209.01 1090.99,1209.01 1091.58,1209.01 1092.17,1209.01 1092.75,1209.01 1093.34,1209.01 1093.93,1209.01 1094.51,1209.01 1095.1,1209.01 1095.68,1209.01 1096.27,1209.01 1096.86,1209.01 1097.44,1209.01 1098.03,1209.01 1098.62,1209.01 1099.2,1209.01 1099.79,1209.01 1100.38,1209.01 1100.96,1209.01 1101.55,1209.01 1102.14,1209.01 1102.72,1209.01 1103.31,1209.01 1103.89,1209.01 1104.48,1209.01 1105.07,1209.01 1105.65,1209.01 1106.24,1209.01 1106.83,1209.01 1107.41,1209.01 1108,1209.01 1108.59,1209.01 1109.17,1209.01 1109.76,1209.01 1110.34,1209.01 1110.93,1209.01 1111.52,1209.01 1112.1,1209.01 1112.69,1209.01 1113.28,1209.01 1113.86,1209.01 1114.45,1209.01 1115.04,1209.01 1115.62,1209.01 1116.21,1209.01 1116.8,1209.01 1117.38,1209.01 1117.97,1209.01 1118.55,1209.01 1119.14,1209.01 1119.73,1209.01 1120.31,1209.01 1120.9,1209.01 1121.49,1209.01 1122.07,1209.01 1122.66,1209.01 1123.25,1209.01 1123.83,1209.01 1124.42,1209.01 1125.01,1209.01 1125.59,1209.01 1126.18,1209.01 1126.76,1209.01 1127.35,1209.01 1127.94,1209.01 1128.52,1209.01 1129.11,1209.01 1129.7,1209.01 1130.28,1209.01 1130.87,1209.01 1131.46,1209.01 1132.04,1209.01 1132.63,1209.01 1133.21,1209.01 1133.8,1209.01 1134.39,1209.01 1134.97,1209.01 1135.56,1209.01 1136.15,1209.01 1136.73,1209.01 1137.32,1209.01 1137.91,1209.01 1138.49,1209.01 1139.08,1209.01 1139.67,1209.01 1140.25,1209.01 1140.84,1209.01 1141.42,1209.01 1142.01,1209.01 1142.6,1209.01 1143.18,1209.01 1143.77,1209.01 1144.36,1209.01 1144.94,1209.01 1145.53,1209.01 1146.12,1209.01 1146.7,1209.01 1147.29,1209.01 1147.88,1209.01 1148.46,1209.01 1149.05,1209.01 1149.63,1209.01 1150.22,1209.01 1150.81,1209.01 1151.39,1209.01 1151.98,1209.01 1152.57,1209.01 1153.15,1209.01 1153.74,1209.01 1154.33,1209.01 1154.91,1209.01 1155.5,1209.01 1156.09,1209.01 1156.67,1209.01 1157.26,1209.01 1157.84,1209.01 1158.43,1209.01 1159.02,1209.01 1159.6,1209.01 1160.19,1209.01 1160.78,1209.01 1161.36,1209.01 1161.95,1209.01 1162.54,1209.01 1163.12,1209.01 1163.71,1209.01 1164.29,1209.01 1164.88,1209.01 1165.47,1209.01 1166.05,1209.01 1166.64,1209.01 1167.23,1209.01 1167.81,1209.01 1168.4,1209.01 1168.99,1209.01 1169.57,1209.01 1170.16,1209.01 1170.75,1209.01 1171.33,1209.01 1171.92,1209.01 1172.5,1209.01 1173.09,1209.01 1173.68,1209.01 1174.26,1209.01 1174.85,1209.01 1175.44,1209.01 1176.02,1209.01 1176.61,1209.01 1177.2,1209.01 1177.78,1209.01 1178.37,1209.01 1178.96,1209.01 1179.54,1209.01 1180.13,1209.01 1180.71,1209.01 1181.3,1209.01 1181.89,1209.01 1182.47,1209.01 1183.06,1209.01 1183.65,1209.01 1184.23,1209.01 1184.82,1209.01 1185.41,1209.01 1185.99,1209.01 1186.58,1209.01 1187.16,1209.01 1187.75,1209.01 1188.34,1209.01 1188.92,1209.01 1189.51,1209.01 1190.1,1209.01 1190.68,1209.01 1191.27,1209.01 1191.86,1209.01 1192.44,1209.01 1193.03,1209.01 1193.62,1209.01 1194.2,1209.01 1194.79,1209.01 1195.37,1209.01 1195.96,1209.01 1196.55,1209.01 1197.13,1209.01 1197.72,1209.01 1198.31,1209.01 1198.89,1209.01 1199.48,1209.01 1200.07,1209.01 1200.65,1209.01 1201.24,1209.01 1201.83,1209.01 1202.41,1209.01 1203,1209.01 1203.58,1209.01 1204.17,1209.01 1204.76,1209.01 1205.34,1209.01 1205.93,1209.01 1206.52,1209.01 1207.1,1209.01 1207.69,1209.01 1208.28,1209.01 1208.86,1209.01 1209.45,1209.01 1210.03,1209.01 1210.62,1209.01 1211.21,1209.01 1211.79,1209.01 1212.38,1209.01 1212.97,1209.01 1213.55,1209.01 1214.14,1209.01 1214.73,1209.01 1215.31,1209.01 1215.9,1209.01 1216.49,1209.01 1217.07,1209.01 1217.66,1209.01 1218.24,1209.01 1218.83,1209.01 1219.42,1209.01 1220,1209.01 1220.59,1209.01 1221.18,1209.01 1221.76,1209.01 1222.35,1209.01 1222.94,1209.01 1223.52,1209.01 1224.11,1209.01 1224.7,1209.01 1225.28,1209.01 1225.87,1209.01 1226.45,1209.01 1227.04,1209.01 1227.63,1209.01 1228.21,1209.01 1228.8,1209.01 1229.39,1209.01 1229.97,1209.01 1230.56,1209.01 1231.15,1209.01 1231.73,1209.01 1232.32,1209.01 1232.91,1209.01 1233.49,1209.01 1234.08,1209.01 1234.66,1209.01 1235.25,1209.01 1235.84,1209.01 1236.42,1209.01 1237.01,1209.01 1237.6,1209.01 1238.18,1209.01 1238.77,1209.01 1239.36,1209.01 1239.94,1209.01 1240.53,1209.01 1241.11,1209.01 1241.7,1209.01 1242.29,1209.01 1242.87,1209.01 1243.46,1209.01 1244.05,1209.01 1244.63,1209.01 1245.22,1209.01 1245.81,1209.01 1246.39,1209.01 1246.98,1209.01 1247.57,1209.01 1248.15,1209.01 1248.74,1209.01 1249.32,1209.01 1249.91,1209.01 1250.5,1209.01 1251.08,1209.01 1251.67,1209.01 1252.26,1209.01 1252.84,1209.01 1253.43,1209.01 1254.02,1209.01 1254.6,1209.01 1255.19,1209.01 1255.78,1209.01 1256.36,1209.01 1256.95,1209.01 1257.53,1209.01 1258.12,1209.01 1258.71,1209.01 1259.29,1209.01 1259.88,1209.01 1260.47,1209.01 1261.05,1209.01 1261.64,1209.01 1262.23,1209.01 1262.81,1209.01 1263.4,1209.01 1263.98,1209.01 1264.57,1209.01 1265.16,1209.01 1265.74,1209.01 1266.33,1209.01 1266.92,1209.01 1267.5,1209.01 1268.09,1209.01 1268.68,1209.01 1269.26,1209.01 1269.85,1209.01 1270.44,1209.01 1271.02,1209.01 1271.61,1209.01 1272.19,1209.01 1272.78,1209.01 1273.37,1209.01 1273.95,1209.01 1274.54,1209.01 1275.13,1209.01 1275.71,1209.01 1276.3,1209.01 1276.89,1209.01 1277.47,1209.01 1278.06,1209.01 1278.65,1209.01 1279.23,1209.01 1279.82,1209.01 1280.4,1209.01 1280.99,1209.01 1281.58,1209.01 1282.16,1209.01 1282.75,1209.01 1283.34,1209.01 1283.92,1209.01 1284.51,1209.01 1285.1,1209.01 1285.68,1209.01 1286.27,1209.01 1286.86,1209.01 1287.44,1209.01 1288.03,1209.01 1288.61,1209.01 1289.2,1209.01 1289.79,1209.01 1290.37,1209.01 1290.96,1209.01 1291.55,1209.01 1292.13,1209.01 1292.72,1209.01 1293.31,1209.01 1293.89,1209.01 1294.48,1209.01 1295.06,1209.01 1295.65,1209.01 1296.24,1209.01 1296.82,1209.01 1297.41,1209.01 1298,1209.01 1298.58,1209.01 1299.17,1209.01 1299.76,1209.01 1300.34,1209.01 1300.93,1209.01 1301.52,1209.01 1302.1,1209.01 1302.69,1209.01 1303.27,1209.01 1303.86,1209.01 1304.45,1209.01 1305.03,1209.01 1305.62,1209.01 1306.21,1209.01 1306.79,1209.01 1307.38,1209.01 1307.97,1209.01 1308.55,1209.01 1309.14,1209.01 1309.73,1209.01 1310.31,1209.01 1310.9,1209.01 1311.48,1209.01 1312.07,1209.01 1312.66,1209.01 1313.24,1209.01 1313.83,1209.01 1314.42,1209.01 1315,1209.01 1315.59,1209.01 1316.18,1209.01 1316.76,1209.01 1317.35,1209.01 1317.93,1209.01 1318.52,1209.01 1319.11,1209.01 1319.69,1209.01 1320.28,1209.01 1320.87,1209.01 1321.45,1209.01 1322.04,1209.01 1322.63,1209.01 1323.21,1209.01 1323.8,1209.01 1324.39,1209.01 1324.97,1209.01 1325.56,1209.01 1326.14,1209.01 1326.73,1209.01 1327.32,1209.01 1327.9,1209.01 1328.49,1209.01 1329.08,1209.01 1329.66,1209.01 1330.25,1209.01 1330.84,1209.01 1331.42,1209.01 1332.01,1209.01 1332.6,1209.01 1333.18,1209.01 1333.77,1209.01 1334.35,1209.01 1334.94,1209.01 1335.53,1209.01 1336.11,1209.01 1336.7,1209.01 1337.29,1209.01 1337.87,1209.01 1338.46,1209.01 1339.05,1209.01 1339.63,1209.01 1340.22,1209.01 1340.8,1209.01 1341.39,1209.01 1341.98,1209.01 1342.56,1209.01 1343.15,1209.01 1343.74,1209.01 1344.32,1209.01 1344.91,1209.01 1345.5,1209.01 1346.08,1209.01 1346.67,1209.01 1347.26,1209.01 1347.84,1209.01 1348.43,1209.01 1349.01,1209.01 1349.6,1209.01 1350.19,1209.01 1350.77,1209.01 1351.36,1209.01 1351.95,1209.01 1352.53,1209.01 1353.12,1209.01 1353.71,1209.01 1354.29,1209.01 1354.88,1209.01 1355.47,1209.01 1356.05,1209.01 1356.64,1209.01 1357.22,1209.01 1357.81,1209.01 1358.4,1209.01 1358.98,1209.01 1359.57,1209.01 1360.16,1209.01 1360.74,1209.01 1361.33,1209.01 1361.92,1209.01 1362.5,1209.01 1363.09,1209.01 1363.68,1209.01 1364.26,1209.01 1364.85,1209.01 1365.43,1209.01 1366.02,1209.01 1366.61,1209.01 1367.19,1209.01 1367.78,1209.01 1368.37,1209.01 1368.95,1209.01 1369.54,1209.01 1370.13,1209.01 1370.71,1209.01 1371.3,1209.01 1371.88,1209.01 1372.47,1209.01 1373.06,1209.01 1373.64,1209.01 1374.23,1209.01 1374.82,1209.01 1375.4,1209.01 1375.99,1209.01 1376.58,1209.01 1377.16,1209.01 1377.75,1209.01 1378.34,1209.01 1378.92,1209.01 1379.51,1209.01 1380.09,1209.01 1380.68,1209.01 1381.27,1209.01 1381.85,1209.01 1382.44,1209.01 1383.03,1209.01 1383.61,1209.01 1384.2,1209.01 1384.79,1209.01 1385.37,1209.01 1385.96,1209.01 1386.55,1209.01 1387.13,1209.01 1387.72,1209.01 1388.3,1209.01 1388.89,1209.01 1389.48,1209.01 1390.06,1209.01 1390.65,1209.01 1391.24,1209.01 1391.82,1209.01 1392.41,1209.01 1393,1209.01 1393.58,1209.01 1394.17,1209.01 1394.75,1209.01 1395.34,1209.01 1395.93,1209.01 1396.51,1209.01 1397.1,1209.01 1397.69,1209.01 1398.27,1209.01 1398.86,1209.01 1399.45,1209.01 1400.03,1209.01 1400.62,1209.01 1401.21,1209.01 1401.79,1209.01 1402.38,1209.01 1402.96,1209.01 1403.55,1209.01 1404.14,1209.01 1404.72,1209.01 1405.31,1209.01 1405.9,1209.01 1406.48,1209.01 1407.07,1209.01 1407.66,1209.01 1408.24,1209.01 1408.83,1209.01 1409.42,1209.01 1410,1209.01 1410.59,1209.01 1411.17,1209.01 1411.76,1209.01 1412.35,1209.01 1412.93,1209.01 1413.52,1209.01 1414.11,1209.01 1414.69,1209.01 1415.28,1209.01 1415.87,1209.01 1416.45,1209.01 1417.04,1209.01 1417.63,1209.01 1418.21,1209.01 1418.8,1209.01 1419.38,1209.01 1419.97,1209.01 1420.56,1209.01 1421.14,1209.01 1421.73,1209.01 1422.32,1209.01 1422.9,1209.01 1423.49,1209.01 1424.08,1209.01 1424.66,1209.01 1425.25,1209.01 1425.83,1209.01 1426.42,1209.01 1427.01,1209.01 1427.59,1209.01 1428.18,1209.01 1428.77,1209.01 1429.35,1209.01 1429.94,1209.01 1430.53,1209.01 1431.11,1209.01 1431.7,1209.01 1432.29,1209.01 1432.87,1209.01 1433.46,1209.01 1434.04,1209.01 1434.63,1209.01 1435.22,1209.01 1435.8,1209.01 1436.39,1209.01 1436.98,1209.01 1437.56,1209.01 1438.15,1209.01 1438.74,1209.01 1439.32,1209.01 1439.91,1209.01 1440.5,1209.01 1441.08,1209.01 1441.67,1209.01 1442.25,1209.01 1442.84,1209.01 1443.43,1209.01 1444.01,1209.01 1444.6,1209.01 1445.19,1209.01 1445.77,1209.01 1446.36,1209.01 1446.95,1209.01 1447.53,1209.01 1448.12,1209.01 1448.7,1209.01 1449.29,1209.01 1449.88,1209.01 1450.46,1209.01 1451.05,1209.01 1451.64,1209.01 1452.22,1209.01 1452.81,1209.01 1453.4,1209.01 1453.98,1209.01 1454.57,1209.01 1455.16,1209.01 1455.74,1209.01 1456.33,1209.01 1456.91,1209.01 1457.5,1209.01 1458.09,1209.01 1458.67,1209.01 1459.26,1209.01 1459.85,1209.01 1460.43,1209.01 1461.02,1209.01 1461.61,1209.01 1462.19,1209.01 1462.78,1209.01 1463.37,1209.01 1463.95,1209.01 1464.54,1209.01 1465.12,1209.01 1465.71,1209.01 1466.3,1209.01 1466.88,1209.01 1467.47,1209.01 1468.06,1209.01 1468.64,1209.01 1469.23,1209.01 1469.82,1209.01 1470.4,1209.01 1470.99,1209.01 1471.57,1209.01 1472.16,1209.01 1472.75,1209.01 1473.33,1209.01 1473.92,1209.01 1474.51,1209.01 1475.09,1209.01 1475.68,1209.01 1476.27,1209.01 1476.85,1209.01 1477.44,1209.01 1478.03,1209.01 1478.61,1209.01 1479.2,1209.01 1479.78,1209.01 1480.37,1209.01 1480.96,1209.01 1481.54,1209.01 1482.13,1209.01 1482.72,1209.01 1483.3,1209.01 1483.89,1209.01 1484.48,1209.01 1485.06,1209.01 1485.65,1209.01 1486.24,1209.01 1486.82,1209.01 1487.41,1209.01 1487.99,1209.01 1488.58,1209.01 1489.17,1209.01 1489.75,1209.01 1490.34,1209.01 1490.93,1209.01 1491.51,1209.01 1492.1,1209.01 1492.69,1209.01 1493.27,1209.01 1493.86,1209.01 1494.45,1209.01 1495.03,1209.01 1495.62,1209.01 1496.2,1209.01 1496.79,1209.01 1497.38,1209.01 1497.96,1209.01 1498.55,1209.01 1499.14,1209.01 1499.72,1209.01 1500.31,1209.01 1500.9,1209.01 1501.48,1209.01 1502.07,1209.01 1502.65,1209.01 1503.24,1209.01 1503.83,1209.01 1504.41,1209.01 1505,1209.01 1505.59,1209.01 1506.17,1209.01 1506.76,1209.01 1507.35,1209.01 1507.93,1209.01 1508.52,1209.01 1509.11,1209.01 1509.69,1209.01 1510.28,1209.01 1510.86,1209.01 1511.45,1209.01 1512.04,1209.01 1512.62,1209.01 1513.21,1209.01 1513.8,1209.01 1514.38,1209.01 1514.97,1209.01 1515.56,1209.01 1516.14,1209.01 1516.73,1209.01 1517.32,1209.01 1517.9,1209.01 1518.49,1209.01 1519.07,1209.01 1519.66,1209.01 1520.25,1209.01 1520.83,1209.01 1521.42,1209.01 1522.01,1209.01 1522.59,1209.01 1523.18,1209.01 1523.77,1209.01 1524.35,1209.01 1524.94,1209.01 1525.52,1209.01 1526.11,1209.01 1526.7,1209.01 1527.28,1209.01 1527.87,1209.01 1528.46,1209.01 1529.04,1209.01 1529.63,1209.01 1530.22,1209.01 1530.8,1209.01 1531.39,1209.01 1531.98,1209.01 1532.56,1209.01 1533.15,1209.01 1533.73,1209.01 1534.32,1209.01 1534.91,1209.01 1535.49,1209.01 1536.08,1209.01 1536.67,1209.01 1537.25,1209.01 1537.84,1209.01 1538.43,1209.01 1539.01,1209.01 1539.6,1209.01 1540.19,1209.01 1540.77,1209.01 1541.36,1209.01 1541.94,1209.01 1542.53,1209.01 1543.12,1209.01 1543.7,1209.01 1544.29,1209.01 1544.88,1209.01 1545.46,1209.01 1546.05,1209.01 1546.64,1209.01 1547.22,1209.01 1547.81,1209.01 1548.4,1209.01 1548.98,1209.01 1549.57,1209.01 1550.15,1209.01 1550.74,1209.01 1551.33,1209.01 1551.91,1209.01 1552.5,1209.01 1553.09,1209.01 1553.67,1209.01 1554.26,1209.01 1554.85,1209.01 1555.43,1209.01 1556.02,1209.01 1556.6,1209.01 1557.19,1209.01 1557.78,1209.01 1558.36,1209.01 1558.95,1209.01 1559.54,1209.01 1560.12,1209.01 1560.71,1209.01 1561.3,1209.01 1561.88,1209.01 1562.47,1209.01 1563.06,1209.01 1563.64,1209.01 1564.23,1209.01 1564.81,1209.01 1565.4,1209.01 1565.99,1209.01 1566.57,1209.01 1567.16,1209.01 1567.75,1209.01 1568.33,1209.01 1568.92,1209.01 1569.51,1209.01 1570.09,1209.01 1570.68,1209.01 1571.27,1209.01 1571.85,1209.01 1572.44,1209.01 1573.02,1209.01 1573.61,1209.01 1574.2,1209.01 1574.78,1209.01 1575.37,1209.01 1575.96,1209.01 1576.54,1209.01 1577.13,1209.01 1577.72,1209.01 1578.3,1209.01 1578.89,1209.01 1579.47,1209.01 1580.06,1209.01 1580.65,1209.01 1581.23,1209.01 1581.82,1209.01 1582.41,1209.01 1582.99,1209.01 1583.58,1209.01 1584.17,1209.01 1584.75,1209.01 1585.34,1209.01 1585.93,1209.01 1586.51,1209.01 1587.1,1209.01 1587.68,1209.01 1588.27,1209.01 1588.86,1209.01 1589.44,1209.01 1590.03,1209.01 1590.62,1209.01 1591.2,1209.01 1591.79,1209.01 1592.38,1209.01 1592.96,1209.01 1593.55,1209.01 1594.14,1209.01 1594.72,1209.01 1595.31,1209.01 1595.89,1209.01 1596.48,1209.01 1597.07,1209.01 1597.65,1209.01 1598.24,1209.01 1598.83,1209.01 1599.41,1209.01 1600,1209.01 1600.59,1209.01 1601.17,1209.01 1601.76,1209.01 1602.34,1209.01 1602.93,1209.01 1603.52,1209.01 1604.1,1209.01 1604.69,1209.01 1605.28,1209.01 1605.86,1209.01 1606.45,1209.01 1607.04,1209.01 1607.62,1209.01 1608.21,1209.01 1608.8,1209.01 1609.38,1209.01 1609.97,1209.01 1610.55,1209.01 1611.14,1209.01 1611.73,1209.01 1612.31,1209.01 1612.9,1209.01 1613.49,1209.01 1614.07,1209.01 1614.66,1209.01 1615.25,1209.01 1615.83,1209.01 1616.42,1209.01 1617.01,1209.01 1617.59,1209.01 1618.18,1209.01 1618.76,1209.01 1619.35,1209.01 1619.94,1209.01 1620.52,1209.01 1621.11,1209.01 1621.7,1209.01 1622.28,1209.01 1622.87,1209.01 1623.46,1209.01 1624.04,1209.01 1624.63,1209.01 1625.22,1209.01 1625.8,1209.01 1626.39,1209.01 1626.97,1209.01 1627.56,1209.01 1628.15,1209.01 1628.73,1209.01 1629.32,1209.01 1629.91,1209.01 1630.49,1209.01 1631.08,1209.01 1631.67,1209.01 1632.25,1209.01 1632.84,1209.01 1633.42,1209.01 1634.01,1209.01 1634.6,1209.01 1635.18,1209.01 1635.77,1209.01 1636.36,1209.01 1636.94,1209.01 1637.53,1209.01 1638.12,1209.01 1638.7,1209.01 1639.29,1209.01 1639.88,1209.01 1640.46,1209.01 1641.05,1209.01 1641.63,1209.01 1642.22,1209.01 1642.81,1209.01 1643.39,1209.01 1643.98,1209.01 1644.57,1209.01 1645.15,1209.01 1645.74,1209.01 1646.33,1209.01 1646.91,1209.01 1647.5,1209.01 1648.09,1209.01 1648.67,1209.01 1649.26,1209.01 1649.84,1209.01 1650.43,1209.01 1651.02,1209.01 1651.6,1209.01 1652.19,1209.01 1652.78,1209.01 1653.36,1209.01 1653.95,1209.01 1654.54,1209.01 1655.12,1209.01 1655.71,1209.01 1656.29,1209.01 1656.88,1209.01 1657.47,1209.01 1658.05,1209.01 1658.64,1209.01 1659.23,1209.01 1659.81,1209.01 1660.4,1209.01 1660.99,1209.01 1661.57,1209.01 1662.16,1209.01 1662.75,1209.01 1663.33,1209.01 1663.92,1209.01 1664.5,1209.01 1665.09,1209.01 1665.68,1209.01 1666.26,1209.01 1666.85,1209.01 1667.44,1209.01 1668.02,1209.01 1668.61,1209.01 1669.2,1209.01 1669.78,1209.01 1670.37,1209.01 1670.96,1209.01 1671.54,1209.01 1672.13,1209.01 1672.71,1209.01 1673.3,1209.01 1673.89,1209.01 1674.47,1209.01 1675.06,1209.01 1675.65,1209.01 1676.23,1209.01 1676.82,1209.01 1677.41,1209.01 1677.99,1209.01 1678.58,1209.01 1679.17,1209.01 1679.75,1209.01 1680.34,1209.01 1680.92,1209.01 1681.51,1209.01 1682.1,1209.01 1682.68,1209.01 1683.27,1209.01 1683.86,1209.01 1684.44,1209.01 1685.03,1209.01 1685.62,1209.01 1686.2,1209.01 1686.79,1209.01 1687.37,1209.01 1687.96,1209.01 1688.55,1209.01 1689.13,1209.01 1689.72,1209.01 1690.31,1209.01 1690.89,1209.01 1691.48,1209.01 1692.07,1209.01 1692.65,1209.01 1693.24,1209.01 1693.83,1209.01 1694.41,1209.01 1695,1209.01 1695.58,1209.01 1696.17,1209.01 1696.76,1209.01 1697.34,1209.01 1697.93,1209.01 1698.52,1209.01 1699.1,1209.01 1699.69,1209.01 1700.28,1209.01 1700.86,1209.01 1701.45,1209.01 1702.04,1209.01 1702.62,1209.01 1703.21,1209.01 1703.79,1209.01 1704.38,1209.01 1704.97,1209.01 1705.55,1209.01 1706.14,1209.01 1706.73,1209.01 1707.31,1209.01 1707.9,1209.01 1708.49,1209.01 1709.07,1209.01 1709.66,1209.01 1710.24,1209.01 1710.83,1209.01 1711.42,1209.01 1712,1209.01 1712.59,1209.01 1713.18,1209.01 1713.76,1209.01 1714.35,1209.01 1714.94,1209.01 1715.52,1209.01 1716.11,1209.01 1716.7,1209.01 1717.28,1209.01 1717.87,1209.01 1718.45,1209.01 1719.04,1209.01 1719.63,1209.01 1720.21,1209.01 1720.8,1209.01 1721.39,1209.01 1721.97,1209.01 1722.56,1209.01 1723.15,1209.01 1723.73,1209.01 1724.32,1209.01 1724.91,1209.01 1725.49,1209.01 1726.08,1209.01 1726.66,1209.01 1727.25,1209.01 1727.84,1209.01 1728.42,1209.01 1729.01,1209.01 1729.6,1209.01 1730.18,1209.01 1730.77,1209.01 1731.36,1209.01 1731.94,1209.01 1732.53,1209.01 1733.11,1209.01 1733.7,1209.01 1734.29,1209.01 1734.87,1209.01 1735.46,1209.01 1736.05,1209.01 1736.63,1209.01 1737.22,1209.01 1737.81,1209.01 1738.39,1209.01 1738.98,1209.01 1739.57,1209.01 1740.15,1209.01 1740.74,1209.01 1741.32,1209.01 1741.91,1209.01 1742.5,1209.01 1743.08,1209.01 1743.67,1209.01 1744.26,1209.01 1744.84,1209.01 1745.43,1209.01 1746.02,1209.01 1746.6,1209.01 1747.19,1209.01 1747.78,1209.01 1748.36,1209.01 1748.95,1209.01 1749.53,1209.01 1750.12,1209.01 1750.71,1209.01 1751.29,1209.01 1751.88,1209.01 1752.47,1209.01 1753.05,1209.01 1753.64,1209.01 1754.23,1209.01 1754.81,1209.01 1755.4,1209.01 1755.99,1209.01 1756.57,1209.01 1757.16,1209.01 1757.74,1209.01 1758.33,1209.01 1758.92,1209.01 1759.5,1209.01 1760.09,1209.01 1760.68,1209.01 1761.26,1209.01 1761.85,1209.01 1762.44,1209.01 1763.02,1209.01 1763.61,1209.01 1764.19,1209.01 1764.78,1209.01 1765.37,1209.01 1765.95,1209.01 1766.54,1209.01 1767.13,1209.01 1767.71,1209.01 1768.3,1209.01 1768.89,1209.01 1769.47,1209.01 1770.06,1209.01 1770.65,1209.01 1771.23,1209.01 1771.82,1209.01 1772.4,1209.01 1772.99,1209.01 1773.58,1209.01 1774.16,1209.01 1774.75,1209.01 1775.34,1209.01 1775.92,1209.01 1776.51,1209.01 1777.1,1209.01 1777.68,1209.01 1778.27,1209.01 1778.86,1209.01 1779.44,1209.01 1780.03,1209.01 1780.61,1209.01 1781.2,1209.01 1781.79,1209.01 1782.37,1209.01 1782.96,1209.01 1783.55,1209.01 1784.13,1209.01 1784.72,1209.01 1785.31,1209.01 1785.89,1209.01 1786.48,1209.01 1787.06,1209.01 1787.65,1209.01 1788.24,1209.01 1788.82,1209.01 1789.41,1209.01 1790,1209.01 1790.58,1209.01 1791.17,1209.01 1791.76,1209.01 1792.34,1209.01 1792.93,1209.01 1793.52,1209.01 1794.1,1209.01 1794.69,1209.01 1795.27,1209.01 1795.86,1209.01 1796.45,1209.01 1797.03,1209.01 1797.62,1209.01 1798.21,1209.01 1798.79,1209.01 1799.38,1209.01 1799.97,1209.01 1800.55,1209.01 1801.14,1209.01 1801.73,1209.01 1802.31,1209.01 1802.9,1209.01 1803.48,1209.01 1804.07,1209.01 1804.66,1209.01 1805.24,1209.01 1805.83,1209.01 1806.42,1209.01 1807,1209.01 1807.59,1209.01 1808.18,1209.01 1808.76,1209.01 1809.35,1209.01 1809.94,1209.01 1810.52,1209.01 1811.11,1209.01 1811.69,1209.01 1812.28,1209.01 1812.87,1209.01 1813.45,1209.01 1814.04,1209.01 1814.63,1209.01 1815.21,1209.01 1815.8,1209.01 1816.39,1209.01 1816.97,1209.01 1817.56,1209.01 1818.14,1209.01 1818.73,1209.01 1819.32,1209.01 1819.9,1209.01 1820.49,1209.01 1821.08,1209.01 1821.66,1209.01 1822.25,1209.01 1822.84,1209.01 1823.42,1209.01 1824.01,1209.01 1824.6,1209.01 1825.18,1209.01 1825.77,1209.01 1826.35,1209.01 1826.94,1209.01 1827.53,1209.01 1828.11,1209.01 1828.7,1209.01 1829.29,1209.01 1829.87,1209.01 1830.46,1209.01 1831.05,1209.01 1831.63,1209.01 1832.22,1209.01 1832.81,1209.01 1833.39,1209.01 1833.98,1209.01 1834.56,1209.01 1835.15,1209.01 1835.74,1209.01 1836.32,1209.01 1836.91,1209.01 1837.5,1209.01 1838.08,1209.01 1838.67,1209.01 1839.26,1209.01 1839.84,1209.01 1840.43,1209.01 1841.01,1209.01 1841.6,1209.01 1842.19,1209.01 1842.77,1209.01 1843.36,1209.01 1843.95,1209.01 1844.53,1209.01 1845.12,1209.01 1845.71,1209.01 1846.29,1209.01 1846.88,1209.01 1847.47,1209.01 1848.05,1209.01 1848.64,1209.01 1849.22,1209.01 1849.81,1209.01 1850.4,1209.01 1850.98,1209.01 1851.57,1209.01 1852.16,1209.01 1852.74,1209.01 1853.33,1209.01 1853.92,1209.01 1854.5,1209.01 1855.09,1209.01 1855.68,1209.01 1856.26,1209.01 1856.85,1209.01 1857.43,1209.01 1858.02,1209.01 1858.61,1209.01 1859.19,1209.01 1859.78,1209.01 1860.37,1209.01 1860.95,1209.01 1861.54,1209.01 1862.13,1209.01 1862.71,1209.01 1863.3,1209.01 1863.88,1209.01 1864.47,1209.01 1865.06,1209.01 1865.64,1209.01 1866.23,1209.01 1866.82,1209.01 1867.4,1209.01 1867.99,1209.01 1868.58,1209.01 1869.16,1209.01 1869.75,1209.01 1870.34,1209.01 1870.92,1209.01 1871.51,1209.01 1872.09,1209.01 1872.68,1209.01 1873.27,1209.01 1873.85,1209.01 1874.44,1209.01 1875.03,1209.01 1875.61,1209.01 1876.2,1209.01 1876.79,1209.01 1877.37,1209.01 1877.96,1209.01 1878.55,1209.01 1879.13,1209.01 1879.72,1209.01 1880.3,1209.01 1880.89,1209.01 1881.48,1209.01 1882.06,1209.01 1882.65,1209.01 1883.24,1209.01 1883.82,1209.01 1884.41,1209.01 1885,1209.01 1885.58,1209.01 1886.17,1209.01 1886.76,1209.01 1887.34,1209.01 1887.93,1209.01 1888.51,1209.01 1889.1,1209.01 1889.69,1209.01 1890.27,1209.01 1890.86,1209.01 1891.45,1209.01 1892.03,1209.01 1892.62,1209.01 1893.21,1209.01 1893.79,1209.01 1894.38,1209.01 1894.96,1209.01 1895.55,1209.01 1896.14,1209.01 1896.72,1209.01 1897.31,1209.01 1897.9,1209.01 1898.48,1209.01 1899.07,1209.01 1899.66,1209.01 1900.24,1209.01 1900.83,1209.01 1901.42,1209.01 1902,1209.01 1902.59,1209.01 1903.17,1209.01 1903.76,1209.01 1904.35,1209.01 1904.93,1209.01 1905.52,1209.01 1906.11,1209.01 1906.69,1209.01 1907.28,1209.01 1907.87,1209.01 1908.45,1209.01 1909.04,1209.01 1909.63,1209.01 1910.21,1209.01 1910.8,1209.01 1911.38,1209.01 1911.97,1209.01 1912.56,1209.01 1913.14,1209.01 1913.73,1209.01 1914.32,1209.01 1914.9,1209.01 1915.49,1209.01 1916.08,1209.01 1916.66,1209.01 1917.25,1209.01 1917.83,1209.01 1918.42,1209.01 1919.01,1209.01 1919.59,1209.01 1920.18,1209.01 1920.77,1209.01 1921.35,1209.01 1921.94,1209.01 1922.53,1209.01 1923.11,1209.01 1923.7,1209.01 1924.29,1209.01 1924.87,1209.01 1925.46,1209.01 1926.04,1209.01 1926.63,1209.01 1927.22,1209.01 1927.8,1209.01 1928.39,1209.01 1928.98,1209.01 1929.56,1209.01 1930.15,1209.01 1930.74,1209.01 1931.32,1209.01 1931.91,1209.01 1932.5,1209.01 1933.08,1209.01 1933.67,1209.01 1934.25,1209.01 1934.84,1209.01 1935.43,1209.01 1936.01,1209.01 1936.6,1209.01 1937.19,1209.01 1937.77,1209.01 1938.36,1209.01 1938.95,1209.01 1939.53,1209.01 1940.12,1209.01 1940.71,1209.01 1941.29,1209.01 1941.88,1209.01 1942.46,1209.01 1943.05,1209.01 1943.64,1209.01 1944.22,1209.01 1944.81,1209.01 1945.4,1209.01 1945.98,1209.01 1946.57,1209.01 1947.16,1209.01 1947.74,1209.01 1948.33,1209.01 1948.91,1209.01 1949.5,1209.01 1950.09,1209.01 1950.67,1209.01 1951.26,1209.01 1951.85,1209.01 1952.43,1209.01 1953.02,1209.01 1953.61,1209.01 1954.19,1209.01 1954.78,1209.01 1955.37,1209.01 1955.95,1209.01 1956.54,1209.01 1957.12,1209.01 1957.71,1209.01 1958.3,1209.01 1958.88,1209.01 1959.47,1209.01 1960.06,1209.01 1960.64,1209.01 1961.23,1209.01 1961.82,1209.01 1962.4,1209.01 1962.99,1209.01 1963.58,1209.01 1964.16,1209.01 1964.75,1209.01 1965.33,1209.01 1965.92,1209.01 1966.51,1209.01 1967.09,1209.01 1967.68,1209.01 1968.27,1209.01 1968.85,1209.01 1969.44,1209.01 1970.03,1209.01 1970.61,1209.01 1971.2,1209.01 1971.78,1209.01 1972.37,1209.01 1972.96,1209.01 1973.54,1209.01 1974.13,1209.01 1974.72,1209.01 1975.3,1209.01 1975.89,1209.01 1976.48,1209.01 1977.06,1209.01 1977.65,1209.01 1978.24,1209.01 1978.82,1209.01 1979.41,1209.01 1979.99,1209.01 1980.58,1209.01 1981.17,1209.01 1981.75,1209.01 1982.34,1209.01 1982.93,1209.01 1983.51,1209.01 1984.1,1209.01 1984.69,1209.01 1985.27,1209.01 1985.86,1209.01 1986.45,1209.01 1987.03,1209.01 1987.62,1209.01 1988.2,1209.01 1988.79,1209.01 1989.38,1209.01 1989.96,1209.01 1990.55,1209.01 1991.14,1209.01 1991.72,1209.01 1992.31,1209.01 1992.9,1209.01 1993.48,1209.01 1994.07,1209.01 1994.65,1209.01 1995.24,1209.01 1995.83,1209.01 1996.41,1209.01 1997,1209.01 1997.59,1209.01 1998.17,1209.01 1998.76,1209.01 1999.35,1209.01 1999.93,1209.01 2000.52,1209.01 2001.11,1209.01 2001.69,1209.01 2002.28,1209.01 2002.86,1209.01 2003.45,1209.01 2004.04,1209.01 2004.62,1209.01 2005.21,1209.01 2005.8,1209.01 2006.38,1209.01 2006.97,1209.01 2007.56,1209.01 2008.14,1209.01 2008.73,1209.01 2009.32,1209.01 2009.9,1209.01 2010.49,1209.01 2011.07,1209.01 2011.66,1209.01 2012.25,1209.01 2012.83,1209.01 2013.42,1209.01 2014.01,1209.01 2014.59,1209.01 2015.18,1209.01 2015.77,1209.01 2016.35,1209.01 2016.94,1209.01 2017.53,1209.01 2018.11,1209.01 2018.7,1209.01 2019.28,1209.01 2019.87,1209.01 2020.46,1209.01 2021.04,1209.01 2021.63,1209.01 2022.22,1209.01 2022.8,1209.01 2023.39,1209.01 2023.98,1209.01 2024.56,1209.01 2025.15,1209.01 2025.73,1209.01 2026.32,1209.01 2026.91,1209.01 2027.49,1209.01 2028.08,1209.01 2028.67,1209.01 2029.25,1209.01 2029.84,1209.01 2030.43,1209.01 2031.01,1209.01 2031.6,1209.01 2032.19,1209.01 2032.77,1209.01 2033.36,1209.01 2033.94,1209.01 2034.53,1209.01 2035.12,1209.01 2035.7,1209.01 2036.29,1209.01 2036.88,1209.01 2037.46,1209.01 2038.05,1209.01 2038.64,1209.01 2039.22,1209.01 2039.81,1209.01 2040.4,1209.01 2040.98,1209.01 2041.57,1209.01 2042.15,1209.01 2042.74,1209.01 2043.33,1209.01 2043.91,1209.01 2044.5,1209.01 2045.09,1209.01 2045.67,1209.01 2046.26,1209.01 2046.85,1209.01 2047.43,1209.01 2048.02,1209.01 2048.6,1209.01 2049.19,1209.01 2049.78,1209.01 2050.36,1209.01 2050.95,1209.01 2051.54,1209.01 2052.12,1209.01 2052.71,1209.01 2053.3,1209.01 2053.88,1209.01 2054.47,1209.01 2055.06,1209.01 2055.64,1209.01 2056.23,1209.01 2056.81,1209.01 2057.4,1209.01 2057.99,1209.01 2058.57,1209.01 2059.16,1209.01 2059.75,1209.01 2060.33,1209.01 2060.92,1209.01 2061.51,1209.01 2062.09,1209.01 2062.68,1209.01 2063.27,1209.01 2063.85,1209.01 2064.44,1209.01 2065.02,1209.01 2065.61,1209.01 2066.2,1209.01 2066.78,1209.01 2067.37,1209.01 2067.96,1209.01 2068.54,1209.01 2069.13,1209.01 2069.72,1209.01 2070.3,1209.01 2070.89,1209.01 2071.48,1209.01 2072.06,1209.01 2072.65,1209.01 2073.23,1209.01 2073.82,1209.01 2074.41,1209.01 2074.99,1209.01 2075.58,1209.01 2076.17,1209.01 2076.75,1209.01 2077.34,1209.01 2077.93,1209.01 2078.51,1209.01 2079.1,1209.01 2079.68,1209.01 2080.27,1209.01 2080.86,1209.01 2081.44,1209.01 2082.03,1209.01 2082.62,1209.01 2083.2,1209.01 2083.79,1209.01 2084.38,1209.01 2084.96,1209.01 2085.55,1209.01 2086.14,1209.01 2086.72,1209.01 2087.31,1209.01 2087.89,1209.01 2088.48,1209.01 2089.07,1209.01 2089.65,1209.01 2090.24,1209.01 2090.83,1209.01 2091.41,1209.01 2092,1209.01 2092.59,1209.01 2093.17,1209.01 2093.76,1209.01 2094.35,1209.01 2094.93,1209.01 2095.52,1209.01 2096.1,1209.01 2096.69,1209.01 2097.28,1209.01 2097.86,1209.01 2098.45,1209.01 2099.04,1209.01 2099.62,1209.01 2100.21,1209.01 2100.8,1209.01 2101.38,1209.01 2101.97,1209.01 2102.55,1209.01 2103.14,1209.01 2103.73,1209.01 2104.31,1209.01 2104.9,1209.01 2105.49,1209.01 2106.07,1209.01 2106.66,1209.01 2107.25,1209.01 2107.83,1209.01 2108.42,1209.01 2109.01,1209.01 2109.59,1209.01 2110.18,1209.01 2110.76,1209.01 2111.35,1209.01 2111.94,1209.01 2112.52,1209.01 2113.11,1209.01 2113.7,1209.01 2114.28,1209.01 2114.87,1209.01 2115.46,1209.01 2116.04,1209.01 2116.63,1209.01 2117.22,1209.01 2117.8,1209.01 2118.39,1209.01 2118.97,1209.01 2119.56,1209.01 2120.15,1209.01 2120.73,1209.01 2121.32,1209.01 2121.91,1209.01 2122.49,1209.01 2123.08,1209.01 2123.67,1209.01 2124.25,1209.01 2124.84,1209.01 2125.42,1209.01 2126.01,1209.01 2126.6,1209.01 2127.18,1209.01 2127.77,1209.01 2128.36,1209.01 2128.94,1209.01 2129.53,1209.01 2130.12,1209.01 2130.7,1209.01 2131.29,1209.01 2131.88,1209.01 2132.46,1209.01 2133.05,1209.01 2133.63,1209.01 2134.22,1209.01 2134.81,1209.01 2135.39,1209.01 2135.98,1209.01 2136.57,1209.01 2137.15,1209.01 2137.74,1209.01 2138.33,1209.01 2138.91,1209.01 2139.5,1209.01 2140.09,1209.01 2140.67,1209.01 2141.26,1209.01 2141.84,1209.01 2142.43,1209.01 2143.02,1209.01 2143.6,1209.01 2144.19,1209.01 2144.78,1209.01 2145.36,1209.01 2145.95,1209.01 2146.54,1209.01 2147.12,1209.01 2147.71,1209.01 2148.3,1209.01 2148.88,1209.01 2149.47,1209.01 2150.05,1209.01 2150.64,1209.01 2151.23,1209.01 2151.81,1209.01 2152.4,1209.01 2152.99,1209.01 2153.57,1209.01 2154.16,1209.01 2154.75,1209.01 2155.33,1209.01 2155.92,1209.01 2156.5,1209.01 2157.09,1209.01 2157.68,1209.01 2158.26,1209.01 \"/>\n<polyline clip-path=\"url(#clip442)\" style=\"stroke:#d3d3d3; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"1562.59,1192.11 1400.1,899.083 \"/>\n<polyline clip-path=\"url(#clip442)\" style=\"stroke:#d3d3d3; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"985.439,1225.51 985.439,1192.11 2158.26,1192.11 2158.26,1225.51 985.439,1225.51 \"/>\n<path clip-path=\"url(#clip440)\" d=\"M1564.14 432.752 L2148.88 432.752 L2148.88 225.392 L1564.14 225.392  Z\" fill=\"#ffffff\" fill-rule=\"evenodd\" fill-opacity=\"1\"/>\n<polyline clip-path=\"url(#clip440)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"1564.14,432.752 2148.88,432.752 2148.88,225.392 1564.14,225.392 1564.14,432.752 \"/>\n<polyline clip-path=\"url(#clip440)\" style=\"stroke:#009af9; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"1584.85,277.232 1709.13,277.232 \"/>\n<path clip-path=\"url(#clip440)\" d=\"M1748.27 269.35 L1748.27 273.378 Q1746.46 272.452 1744.52 271.989 Q1742.57 271.526 1740.49 271.526 Q1737.32 271.526 1735.72 272.498 Q1734.15 273.471 1734.15 275.415 Q1734.15 276.896 1735.28 277.753 Q1736.41 278.586 1739.84 279.35 L1741.3 279.674 Q1745.84 280.646 1747.73 282.429 Q1749.66 284.188 1749.66 287.359 Q1749.66 290.97 1746.78 293.077 Q1743.94 295.183 1738.94 295.183 Q1736.85 295.183 1734.59 294.767 Q1732.34 294.373 1729.84 293.563 L1729.84 289.165 Q1732.2 290.392 1734.49 291.017 Q1736.78 291.619 1739.03 291.619 Q1742.04 291.619 1743.66 290.6 Q1745.28 289.558 1745.28 287.683 Q1745.28 285.947 1744.1 285.021 Q1742.94 284.095 1738.98 283.239 L1737.5 282.892 Q1733.54 282.058 1731.78 280.345 Q1730.03 278.609 1730.03 275.6 Q1730.03 271.943 1732.62 269.952 Q1735.21 267.961 1739.98 267.961 Q1742.34 267.961 1744.42 268.309 Q1746.51 268.656 1748.27 269.35 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip440)\" d=\"M1777.99 278.864 L1777.99 294.512 L1773.73 294.512 L1773.73 279.003 Q1773.73 275.322 1772.29 273.494 Q1770.86 271.665 1767.99 271.665 Q1764.54 271.665 1762.55 273.864 Q1760.56 276.063 1760.56 279.859 L1760.56 294.512 L1756.28 294.512 L1756.28 258.494 L1760.56 258.494 L1760.56 272.614 Q1762.09 270.276 1764.15 269.119 Q1766.23 267.961 1768.94 267.961 Q1773.4 267.961 1775.7 270.739 Q1777.99 273.494 1777.99 278.864 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip440)\" d=\"M1786.48 268.586 L1790.74 268.586 L1790.74 294.512 L1786.48 294.512 L1786.48 268.586 M1786.48 258.494 L1790.74 258.494 L1790.74 263.887 L1786.48 263.887 L1786.48 258.494 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip440)\" d=\"M1812.78 258.494 L1812.78 262.035 L1808.71 262.035 Q1806.41 262.035 1805.51 262.961 Q1804.63 263.887 1804.63 266.295 L1804.63 268.586 L1811.65 268.586 L1811.65 271.896 L1804.63 271.896 L1804.63 294.512 L1800.35 294.512 L1800.35 271.896 L1796.28 271.896 L1796.28 268.586 L1800.35 268.586 L1800.35 266.781 Q1800.35 262.452 1802.36 260.484 Q1804.38 258.494 1808.75 258.494 L1812.78 258.494 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip440)\" d=\"M1819.72 261.225 L1819.72 268.586 L1828.5 268.586 L1828.5 271.896 L1819.72 271.896 L1819.72 285.97 Q1819.72 289.142 1820.58 290.045 Q1821.46 290.947 1824.12 290.947 L1828.5 290.947 L1828.5 294.512 L1824.12 294.512 Q1819.19 294.512 1817.32 292.683 Q1815.44 290.832 1815.44 285.97 L1815.44 271.896 L1812.32 271.896 L1812.32 268.586 L1815.44 268.586 L1815.44 261.225 L1819.72 261.225 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><polyline clip-path=\"url(#clip440)\" style=\"stroke:#e26f46; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"1584.85,329.072 1709.13,329.072 \"/>\n<path clip-path=\"url(#clip440)\" d=\"M1748.27 321.19 L1748.27 325.218 Q1746.46 324.292 1744.52 323.829 Q1742.57 323.366 1740.49 323.366 Q1737.32 323.366 1735.72 324.338 Q1734.15 325.311 1734.15 327.255 Q1734.15 328.736 1735.28 329.593 Q1736.41 330.426 1739.84 331.19 L1741.3 331.514 Q1745.84 332.486 1747.73 334.269 Q1749.66 336.028 1749.66 339.199 Q1749.66 342.81 1746.78 344.917 Q1743.94 347.023 1738.94 347.023 Q1736.85 347.023 1734.59 346.607 Q1732.34 346.213 1729.84 345.403 L1729.84 341.005 Q1732.2 342.232 1734.49 342.857 Q1736.78 343.459 1739.03 343.459 Q1742.04 343.459 1743.66 342.44 Q1745.28 341.398 1745.28 339.523 Q1745.28 337.787 1744.1 336.861 Q1742.94 335.935 1738.98 335.079 L1737.5 334.732 Q1733.54 333.898 1731.78 332.185 Q1730.03 330.449 1730.03 327.44 Q1730.03 323.783 1732.62 321.792 Q1735.21 319.801 1739.98 319.801 Q1742.34 319.801 1744.42 320.149 Q1746.51 320.496 1748.27 321.19 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip440)\" d=\"M1777.99 330.704 L1777.99 346.352 L1773.73 346.352 L1773.73 330.843 Q1773.73 327.162 1772.29 325.334 Q1770.86 323.505 1767.99 323.505 Q1764.54 323.505 1762.55 325.704 Q1760.56 327.903 1760.56 331.699 L1760.56 346.352 L1756.28 346.352 L1756.28 310.334 L1760.56 310.334 L1760.56 324.454 Q1762.09 322.116 1764.15 320.959 Q1766.23 319.801 1768.94 319.801 Q1773.4 319.801 1775.7 322.579 Q1777.99 325.334 1777.99 330.704 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip440)\" d=\"M1786.48 320.426 L1790.74 320.426 L1790.74 346.352 L1786.48 346.352 L1786.48 320.426 M1786.48 310.334 L1790.74 310.334 L1790.74 315.727 L1786.48 315.727 L1786.48 310.334 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip440)\" d=\"M1812.78 310.334 L1812.78 313.875 L1808.71 313.875 Q1806.41 313.875 1805.51 314.801 Q1804.63 315.727 1804.63 318.135 L1804.63 320.426 L1811.65 320.426 L1811.65 323.736 L1804.63 323.736 L1804.63 346.352 L1800.35 346.352 L1800.35 323.736 L1796.28 323.736 L1796.28 320.426 L1800.35 320.426 L1800.35 318.621 Q1800.35 314.292 1802.36 312.324 Q1804.38 310.334 1808.75 310.334 L1812.78 310.334 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip440)\" d=\"M1819.72 313.065 L1819.72 320.426 L1828.5 320.426 L1828.5 323.736 L1819.72 323.736 L1819.72 337.81 Q1819.72 340.982 1820.58 341.885 Q1821.46 342.787 1824.12 342.787 L1828.5 342.787 L1828.5 346.352 L1824.12 346.352 Q1819.19 346.352 1817.32 344.523 Q1815.44 342.672 1815.44 337.81 L1815.44 323.736 L1812.32 323.736 L1812.32 320.426 L1815.44 320.426 L1815.44 313.065 L1819.72 313.065 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip440)\" d=\"M1869.35 325.403 Q1870.95 322.533 1873.17 321.167 Q1875.4 319.801 1878.4 319.801 Q1882.46 319.801 1884.65 322.649 Q1886.85 325.473 1886.85 330.704 L1886.85 346.352 L1882.57 346.352 L1882.57 330.843 Q1882.57 327.116 1881.25 325.311 Q1879.93 323.505 1877.22 323.505 Q1873.91 323.505 1871.99 325.704 Q1870.07 327.903 1870.07 331.699 L1870.07 346.352 L1865.79 346.352 L1865.79 330.843 Q1865.79 327.093 1864.47 325.311 Q1863.15 323.505 1860.4 323.505 Q1857.13 323.505 1855.21 325.727 Q1853.29 327.926 1853.29 331.699 L1853.29 346.352 L1849.01 346.352 L1849.01 320.426 L1853.29 320.426 L1853.29 324.454 Q1854.75 322.07 1856.78 320.936 Q1858.82 319.801 1861.62 319.801 Q1864.45 319.801 1866.41 321.236 Q1868.4 322.672 1869.35 325.403 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip440)\" d=\"M1917.52 332.324 L1917.52 334.408 L1897.94 334.408 Q1898.22 338.806 1900.58 341.121 Q1902.96 343.412 1907.2 343.412 Q1909.65 343.412 1911.95 342.81 Q1914.26 342.209 1916.53 341.005 L1916.53 345.033 Q1914.24 346.005 1911.83 346.514 Q1909.42 347.023 1906.95 347.023 Q1900.74 347.023 1897.11 343.412 Q1893.5 339.801 1893.5 333.644 Q1893.5 327.278 1896.92 323.551 Q1900.37 319.801 1906.21 319.801 Q1911.44 319.801 1914.47 323.181 Q1917.52 326.537 1917.52 332.324 M1913.27 331.074 Q1913.22 327.579 1911.3 325.496 Q1909.4 323.412 1906.25 323.412 Q1902.69 323.412 1900.53 325.426 Q1898.4 327.44 1898.08 331.098 L1913.27 331.074 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip440)\" d=\"M1936.3 333.32 Q1931.14 333.32 1929.14 334.5 Q1927.15 335.681 1927.15 338.528 Q1927.15 340.797 1928.64 342.139 Q1930.14 343.459 1932.71 343.459 Q1936.25 343.459 1938.38 340.959 Q1940.53 338.435 1940.53 334.269 L1940.53 333.32 L1936.3 333.32 M1944.79 331.56 L1944.79 346.352 L1940.53 346.352 L1940.53 342.417 Q1939.08 344.778 1936.9 345.912 Q1934.72 347.023 1931.58 347.023 Q1927.59 347.023 1925.23 344.801 Q1922.89 342.556 1922.89 338.806 Q1922.89 334.431 1925.81 332.209 Q1928.75 329.986 1934.56 329.986 L1940.53 329.986 L1940.53 329.57 Q1940.53 326.63 1938.59 325.033 Q1936.67 323.412 1933.17 323.412 Q1930.95 323.412 1928.84 323.945 Q1926.74 324.477 1924.79 325.542 L1924.79 321.607 Q1927.13 320.704 1929.33 320.264 Q1931.53 319.801 1933.61 319.801 Q1939.24 319.801 1942.02 322.718 Q1944.79 325.635 1944.79 331.56 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip440)\" d=\"M1975.12 330.704 L1975.12 346.352 L1970.86 346.352 L1970.86 330.843 Q1970.86 327.162 1969.42 325.334 Q1967.99 323.505 1965.12 323.505 Q1961.67 323.505 1959.68 325.704 Q1957.69 327.903 1957.69 331.699 L1957.69 346.352 L1953.4 346.352 L1953.4 320.426 L1957.69 320.426 L1957.69 324.454 Q1959.21 322.116 1961.27 320.959 Q1963.36 319.801 1966.07 319.801 Q1970.53 319.801 1972.83 322.579 Q1975.12 325.334 1975.12 330.704 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><polyline clip-path=\"url(#clip440)\" style=\"stroke:#3da44d; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"1584.85,380.912 1709.13,380.912 \"/>\n<path clip-path=\"url(#clip440)\" d=\"M1734.12 394.303 L1734.12 408.053 L1729.84 408.053 L1729.84 372.266 L1734.12 372.266 L1734.12 376.201 Q1735.47 373.887 1737.5 372.776 Q1739.56 371.641 1742.41 371.641 Q1747.13 371.641 1750.07 375.391 Q1753.03 379.141 1753.03 385.252 Q1753.03 391.363 1750.07 395.113 Q1747.13 398.863 1742.41 398.863 Q1739.56 398.863 1737.5 397.752 Q1735.47 396.618 1734.12 394.303 M1748.61 385.252 Q1748.61 380.553 1746.67 377.891 Q1744.75 375.206 1741.37 375.206 Q1737.99 375.206 1736.04 377.891 Q1734.12 380.553 1734.12 385.252 Q1734.12 389.951 1736.04 392.637 Q1737.99 395.299 1741.37 395.299 Q1744.75 395.299 1746.67 392.637 Q1748.61 389.951 1748.61 385.252 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip440)\" d=\"M1775.12 376.248 Q1774.4 375.831 1773.54 375.646 Q1772.71 375.438 1771.69 375.438 Q1768.08 375.438 1766.14 377.799 Q1764.22 380.137 1764.22 384.535 L1764.22 398.192 L1759.93 398.192 L1759.93 372.266 L1764.22 372.266 L1764.22 376.294 Q1765.56 373.933 1767.71 372.799 Q1769.86 371.641 1772.94 371.641 Q1773.38 371.641 1773.91 371.711 Q1774.45 371.757 1775.09 371.873 L1775.12 376.248 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip440)\" d=\"M1788.59 375.252 Q1785.16 375.252 1783.17 377.938 Q1781.18 380.6 1781.18 385.252 Q1781.18 389.905 1783.15 392.59 Q1785.14 395.252 1788.59 395.252 Q1791.99 395.252 1793.98 392.567 Q1795.97 389.882 1795.97 385.252 Q1795.97 380.646 1793.98 377.961 Q1791.99 375.252 1788.59 375.252 M1788.59 371.641 Q1794.15 371.641 1797.32 375.252 Q1800.49 378.863 1800.49 385.252 Q1800.49 391.618 1797.32 395.252 Q1794.15 398.863 1788.59 398.863 Q1783.01 398.863 1779.84 395.252 Q1776.69 391.618 1776.69 385.252 Q1776.69 378.863 1779.84 375.252 Q1783.01 371.641 1788.59 371.641 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip440)\" d=\"M1807.55 372.266 L1811.81 372.266 L1811.81 398.655 Q1811.81 403.609 1809.91 405.831 Q1808.03 408.053 1803.84 408.053 L1802.22 408.053 L1802.22 404.442 L1803.36 404.442 Q1805.79 404.442 1806.67 403.308 Q1807.55 402.197 1807.55 398.655 L1807.55 372.266 M1807.55 362.174 L1811.81 362.174 L1811.81 367.567 L1807.55 367.567 L1807.55 362.174 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip440)\" d=\"M1842.9 384.164 L1842.9 386.248 L1823.31 386.248 Q1823.59 390.646 1825.95 392.961 Q1828.34 395.252 1832.57 395.252 Q1835.03 395.252 1837.32 394.65 Q1839.63 394.049 1841.9 392.845 L1841.9 396.873 Q1839.61 397.845 1837.2 398.354 Q1834.79 398.863 1832.32 398.863 Q1826.11 398.863 1822.48 395.252 Q1818.87 391.641 1818.87 385.484 Q1818.87 379.118 1822.29 375.391 Q1825.74 371.641 1831.58 371.641 Q1836.81 371.641 1839.84 375.021 Q1842.9 378.377 1842.9 384.164 M1838.64 382.914 Q1838.59 379.419 1836.67 377.336 Q1834.77 375.252 1831.62 375.252 Q1828.06 375.252 1825.9 377.266 Q1823.78 379.28 1823.45 382.938 L1838.64 382.914 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip440)\" d=\"M1868.54 373.262 L1868.54 377.243 Q1866.74 376.248 1864.91 375.762 Q1863.1 375.252 1861.25 375.252 Q1857.11 375.252 1854.82 377.891 Q1852.52 380.507 1852.52 385.252 Q1852.52 389.998 1854.82 392.637 Q1857.11 395.252 1861.25 395.252 Q1863.1 395.252 1864.91 394.766 Q1866.74 394.257 1868.54 393.262 L1868.54 397.197 Q1866.76 398.03 1864.84 398.447 Q1862.94 398.863 1860.79 398.863 Q1854.93 398.863 1851.48 395.183 Q1848.03 391.502 1848.03 385.252 Q1848.03 378.91 1851.51 375.276 Q1855 371.641 1861.07 371.641 Q1863.03 371.641 1864.91 372.058 Q1866.78 372.451 1868.54 373.262 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip440)\" d=\"M1880.16 364.905 L1880.16 372.266 L1888.94 372.266 L1888.94 375.576 L1880.16 375.576 L1880.16 389.65 Q1880.16 392.822 1881.02 393.725 Q1881.9 394.627 1884.56 394.627 L1888.94 394.627 L1888.94 398.192 L1884.56 398.192 Q1879.63 398.192 1877.76 396.363 Q1875.88 394.512 1875.88 389.65 L1875.88 375.576 L1872.76 375.576 L1872.76 372.266 L1875.88 372.266 L1875.88 364.905 L1880.16 364.905 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip440)\" d=\"M1916.71 384.164 L1916.71 386.248 L1897.13 386.248 Q1897.41 390.646 1899.77 392.961 Q1902.15 395.252 1906.39 395.252 Q1908.84 395.252 1911.14 394.65 Q1913.45 394.049 1915.72 392.845 L1915.72 396.873 Q1913.43 397.845 1911.02 398.354 Q1908.61 398.863 1906.14 398.863 Q1899.93 398.863 1896.3 395.252 Q1892.69 391.641 1892.69 385.484 Q1892.69 379.118 1896.11 375.391 Q1899.56 371.641 1905.4 371.641 Q1910.63 371.641 1913.66 375.021 Q1916.71 378.377 1916.71 384.164 M1912.46 382.914 Q1912.41 379.419 1910.49 377.336 Q1908.59 375.252 1905.44 375.252 Q1901.88 375.252 1899.72 377.266 Q1897.59 379.28 1897.27 382.938 L1912.46 382.914 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip440)\" d=\"M1940.77 376.201 L1940.77 362.174 L1945.02 362.174 L1945.02 398.192 L1940.77 398.192 L1940.77 394.303 Q1939.42 396.618 1937.36 397.752 Q1935.33 398.863 1932.46 398.863 Q1927.76 398.863 1924.79 395.113 Q1921.85 391.363 1921.85 385.252 Q1921.85 379.141 1924.79 375.391 Q1927.76 371.641 1932.46 371.641 Q1935.33 371.641 1937.36 372.776 Q1939.42 373.887 1940.77 376.201 M1926.25 385.252 Q1926.25 389.951 1928.17 392.637 Q1930.12 395.299 1933.5 395.299 Q1936.88 395.299 1938.82 392.637 Q1940.77 389.951 1940.77 385.252 Q1940.77 380.553 1938.82 377.891 Q1936.88 375.206 1933.5 375.206 Q1930.12 375.206 1928.17 377.891 Q1926.25 380.553 1926.25 385.252 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip440)\" d=\"M1991.04 384.164 L1991.04 386.248 L1971.46 386.248 Q1971.74 390.646 1974.1 392.961 Q1976.48 395.252 1980.72 395.252 Q1983.17 395.252 1985.46 394.65 Q1987.78 394.049 1990.05 392.845 L1990.05 396.873 Q1987.76 397.845 1985.35 398.354 Q1982.94 398.863 1980.46 398.863 Q1974.26 398.863 1970.63 395.252 Q1967.02 391.641 1967.02 385.484 Q1967.02 379.118 1970.44 375.391 Q1973.89 371.641 1979.72 371.641 Q1984.95 371.641 1987.99 375.021 Q1991.04 378.377 1991.04 384.164 M1986.78 382.914 Q1986.74 379.419 1984.82 377.336 Q1982.92 375.252 1979.77 375.252 Q1976.2 375.252 1974.05 377.266 Q1971.92 379.28 1971.6 382.938 L1986.78 382.914 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip440)\" d=\"M2019.58 382.544 L2019.58 398.192 L2015.32 398.192 L2015.32 382.683 Q2015.32 379.002 2013.89 377.174 Q2012.45 375.345 2009.58 375.345 Q2006.14 375.345 2004.14 377.544 Q2002.15 379.743 2002.15 383.539 L2002.15 398.192 L1997.87 398.192 L1997.87 372.266 L2002.15 372.266 L2002.15 376.294 Q2003.68 373.956 2005.74 372.799 Q2007.83 371.641 2010.53 371.641 Q2015 371.641 2017.29 374.419 Q2019.58 377.174 2019.58 382.544 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip440)\" d=\"M2050.26 384.164 L2050.26 386.248 L2030.67 386.248 Q2030.95 390.646 2033.31 392.961 Q2035.7 395.252 2039.93 395.252 Q2042.39 395.252 2044.68 394.65 Q2046.99 394.049 2049.26 392.845 L2049.26 396.873 Q2046.97 397.845 2044.56 398.354 Q2042.15 398.863 2039.68 398.863 Q2033.47 398.863 2029.84 395.252 Q2026.23 391.641 2026.23 385.484 Q2026.23 379.118 2029.65 375.391 Q2033.1 371.641 2038.94 371.641 Q2044.17 371.641 2047.2 375.021 Q2050.26 378.377 2050.26 384.164 M2046 382.914 Q2045.95 379.419 2044.03 377.336 Q2042.13 375.252 2038.98 375.252 Q2035.42 375.252 2033.26 377.266 Q2031.14 379.28 2030.81 382.938 L2046 382.914 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip440)\" d=\"M2072.27 376.248 Q2071.55 375.831 2070.7 375.646 Q2069.86 375.438 2068.84 375.438 Q2065.23 375.438 2063.29 377.799 Q2061.37 380.137 2061.37 384.535 L2061.37 398.192 L2057.08 398.192 L2057.08 372.266 L2061.37 372.266 L2061.37 376.294 Q2062.71 373.933 2064.86 372.799 Q2067.01 371.641 2070.09 371.641 Q2070.53 371.641 2071.07 371.711 Q2071.6 371.757 2072.25 371.873 L2072.27 376.248 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip440)\" d=\"M2092.96 384.928 Q2092.96 380.299 2091.04 377.752 Q2089.14 375.206 2085.69 375.206 Q2082.27 375.206 2080.35 377.752 Q2078.45 380.299 2078.45 384.928 Q2078.45 389.535 2080.35 392.081 Q2082.27 394.627 2085.69 394.627 Q2089.14 394.627 2091.04 392.081 Q2092.96 389.535 2092.96 384.928 M2097.22 394.975 Q2097.22 401.595 2094.28 404.812 Q2091.34 408.053 2085.28 408.053 Q2083.03 408.053 2081.04 407.706 Q2079.05 407.382 2077.18 406.687 L2077.18 402.544 Q2079.05 403.562 2080.88 404.049 Q2082.71 404.535 2084.61 404.535 Q2088.8 404.535 2090.88 402.336 Q2092.96 400.16 2092.96 395.738 L2092.96 393.632 Q2091.64 395.924 2089.58 397.058 Q2087.52 398.192 2084.65 398.192 Q2079.88 398.192 2076.97 394.558 Q2074.05 390.924 2074.05 384.928 Q2074.05 378.91 2076.97 375.276 Q2079.88 371.641 2084.65 371.641 Q2087.52 371.641 2089.58 372.776 Q2091.64 373.91 2092.96 376.201 L2092.96 372.266 L2097.22 372.266 L2097.22 394.975 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip440)\" d=\"M2116.78 400.599 Q2114.98 405.229 2113.26 406.641 Q2111.55 408.053 2108.68 408.053 L2105.28 408.053 L2105.28 404.488 L2107.78 404.488 Q2109.54 404.488 2110.51 403.655 Q2111.48 402.822 2112.66 399.72 L2113.43 397.775 L2102.94 372.266 L2107.45 372.266 L2115.56 392.544 L2123.66 372.266 L2128.17 372.266 L2116.78 400.599 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip440)\" d=\"M719.687 899.083 L1838.19 899.083 L1838.19 462.094 L719.687 462.094  Z\" fill=\"#ffffff\" fill-rule=\"evenodd\" fill-opacity=\"1\"/>\n<defs>\n  <clipPath id=\"clip443\">\n    <rect x=\"719\" y=\"462\" width=\"1120\" height=\"438\"/>\n  </clipPath>\n</defs>\n<polyline clip-path=\"url(#clip443)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:2; stroke-opacity:0.1; fill:none\" points=\"719.687,899.083 719.687,462.094 \"/>\n<polyline clip-path=\"url(#clip443)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:2; stroke-opacity:0.1; fill:none\" points=\"999.313,899.083 999.313,462.094 \"/>\n<polyline clip-path=\"url(#clip443)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:2; stroke-opacity:0.1; fill:none\" points=\"1278.94,899.083 1278.94,462.094 \"/>\n<polyline clip-path=\"url(#clip443)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:2; stroke-opacity:0.1; fill:none\" points=\"1558.56,899.083 1558.56,462.094 \"/>\n<polyline clip-path=\"url(#clip443)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:2; stroke-opacity:0.1; fill:none\" points=\"1838.19,899.083 1838.19,462.094 \"/>\n<polyline clip-path=\"url(#clip443)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:2; stroke-opacity:0.1; fill:none\" points=\"719.687,879.22 1838.19,879.22 \"/>\n<polyline clip-path=\"url(#clip443)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:2; stroke-opacity:0.1; fill:none\" points=\"719.687,779.904 1838.19,779.904 \"/>\n<polyline clip-path=\"url(#clip443)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:2; stroke-opacity:0.1; fill:none\" points=\"719.687,680.588 1838.19,680.588 \"/>\n<polyline clip-path=\"url(#clip443)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:2; stroke-opacity:0.1; fill:none\" points=\"719.687,581.273 1838.19,581.273 \"/>\n<polyline clip-path=\"url(#clip443)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:2; stroke-opacity:0.1; fill:none\" points=\"719.687,481.957 1838.19,481.957 \"/>\n<polyline clip-path=\"url(#clip440)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"719.687,899.083 1838.19,899.083 \"/>\n<polyline clip-path=\"url(#clip440)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"719.687,899.083 719.687,880.185 \"/>\n<polyline clip-path=\"url(#clip440)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"999.313,899.083 999.313,880.185 \"/>\n<polyline clip-path=\"url(#clip440)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"1278.94,899.083 1278.94,880.185 \"/>\n<polyline clip-path=\"url(#clip440)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"1558.56,899.083 1558.56,880.185 \"/>\n<polyline clip-path=\"url(#clip440)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"1838.19,899.083 1838.19,880.185 \"/>\n<path clip-path=\"url(#clip440)\" d=\"M664.213 957.547 L671.852 957.547 L671.852 931.182 L663.542 932.849 L663.542 928.589 L671.806 926.923 L676.482 926.923 L676.482 957.547 L684.12 957.547 L684.12 961.483 L664.213 961.483 L664.213 957.547 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip440)\" d=\"M703.565 930.001 Q699.954 930.001 698.125 933.566 Q696.319 937.108 696.319 944.237 Q696.319 951.344 698.125 954.909 Q699.954 958.45 703.565 958.45 Q707.199 958.45 709.005 954.909 Q710.833 951.344 710.833 944.237 Q710.833 937.108 709.005 933.566 Q707.199 930.001 703.565 930.001 M703.565 926.298 Q709.375 926.298 712.43 930.904 Q715.509 935.487 715.509 944.237 Q715.509 952.964 712.43 957.571 Q709.375 962.154 703.565 962.154 Q697.755 962.154 694.676 957.571 Q691.62 952.964 691.62 944.237 Q691.62 935.487 694.676 930.904 Q697.755 926.298 703.565 926.298 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip440)\" d=\"M733.727 930.001 Q730.116 930.001 728.287 933.566 Q726.481 937.108 726.481 944.237 Q726.481 951.344 728.287 954.909 Q730.116 958.45 733.727 958.45 Q737.361 958.45 739.166 954.909 Q740.995 951.344 740.995 944.237 Q740.995 937.108 739.166 933.566 Q737.361 930.001 733.727 930.001 M733.727 926.298 Q739.537 926.298 742.592 930.904 Q745.671 935.487 745.671 944.237 Q745.671 952.964 742.592 957.571 Q739.537 962.154 733.727 962.154 Q727.916 962.154 724.838 957.571 Q721.782 952.964 721.782 944.237 Q721.782 935.487 724.838 930.904 Q727.916 926.298 733.727 926.298 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip440)\" d=\"M763.888 930.001 Q760.277 930.001 758.449 933.566 Q756.643 937.108 756.643 944.237 Q756.643 951.344 758.449 954.909 Q760.277 958.45 763.888 958.45 Q767.523 958.45 769.328 954.909 Q771.157 951.344 771.157 944.237 Q771.157 937.108 769.328 933.566 Q767.523 930.001 763.888 930.001 M763.888 926.298 Q769.699 926.298 772.754 930.904 Q775.833 935.487 775.833 944.237 Q775.833 952.964 772.754 957.571 Q769.699 962.154 763.888 962.154 Q758.078 962.154 755 957.571 Q751.944 952.964 751.944 944.237 Q751.944 935.487 755 930.904 Q758.078 926.298 763.888 926.298 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip440)\" d=\"M943.839 957.547 L951.477 957.547 L951.477 931.182 L943.167 932.849 L943.167 928.589 L951.431 926.923 L956.107 926.923 L956.107 957.547 L963.746 957.547 L963.746 961.483 L943.839 961.483 L943.839 957.547 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip440)\" d=\"M973.237 926.923 L991.593 926.923 L991.593 930.858 L977.519 930.858 L977.519 939.33 Q978.538 938.983 979.556 938.821 Q980.575 938.636 981.593 938.636 Q987.38 938.636 990.76 941.807 Q994.139 944.978 994.139 950.395 Q994.139 955.973 990.667 959.075 Q987.195 962.154 980.875 962.154 Q978.7 962.154 976.431 961.784 Q974.186 961.413 971.778 960.672 L971.778 955.973 Q973.862 957.108 976.084 957.663 Q978.306 958.219 980.783 958.219 Q984.788 958.219 987.125 956.112 Q989.463 954.006 989.463 950.395 Q989.463 946.784 987.125 944.677 Q984.788 942.571 980.783 942.571 Q978.908 942.571 977.033 942.987 Q975.181 943.404 973.237 944.284 L973.237 926.923 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip440)\" d=\"M1013.35 930.001 Q1009.74 930.001 1007.91 933.566 Q1006.11 937.108 1006.11 944.237 Q1006.11 951.344 1007.91 954.909 Q1009.74 958.45 1013.35 958.45 Q1016.99 958.45 1018.79 954.909 Q1020.62 951.344 1020.62 944.237 Q1020.62 937.108 1018.79 933.566 Q1016.99 930.001 1013.35 930.001 M1013.35 926.298 Q1019.16 926.298 1022.22 930.904 Q1025.3 935.487 1025.3 944.237 Q1025.3 952.964 1022.22 957.571 Q1019.16 962.154 1013.35 962.154 Q1007.54 962.154 1004.46 957.571 Q1001.41 952.964 1001.41 944.237 Q1001.41 935.487 1004.46 930.904 Q1007.54 926.298 1013.35 926.298 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip440)\" d=\"M1043.51 930.001 Q1039.9 930.001 1038.07 933.566 Q1036.27 937.108 1036.27 944.237 Q1036.27 951.344 1038.07 954.909 Q1039.9 958.45 1043.51 958.45 Q1047.15 958.45 1048.95 954.909 Q1050.78 951.344 1050.78 944.237 Q1050.78 937.108 1048.95 933.566 Q1047.15 930.001 1043.51 930.001 M1043.51 926.298 Q1049.32 926.298 1052.38 930.904 Q1055.46 935.487 1055.46 944.237 Q1055.46 952.964 1052.38 957.571 Q1049.32 962.154 1043.51 962.154 Q1037.7 962.154 1034.63 957.571 Q1031.57 952.964 1031.57 944.237 Q1031.57 935.487 1034.63 930.904 Q1037.7 926.298 1043.51 926.298 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip440)\" d=\"M1227.55 957.547 L1243.87 957.547 L1243.87 961.483 L1221.92 961.483 L1221.92 957.547 Q1224.59 954.793 1229.17 950.163 Q1233.78 945.511 1234.96 944.168 Q1237.2 941.645 1238.08 939.909 Q1238.98 938.149 1238.98 936.46 Q1238.98 933.705 1237.04 931.969 Q1235.12 930.233 1232.02 930.233 Q1229.82 930.233 1227.36 930.997 Q1224.93 931.761 1222.16 933.312 L1222.16 928.589 Q1224.98 927.455 1227.43 926.876 Q1229.89 926.298 1231.92 926.298 Q1237.3 926.298 1240.49 928.983 Q1243.68 931.668 1243.68 936.159 Q1243.68 938.288 1242.87 940.21 Q1242.09 942.108 1239.98 944.7 Q1239.4 945.372 1236.3 948.589 Q1233.2 951.784 1227.55 957.547 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip440)\" d=\"M1263.68 930.001 Q1260.07 930.001 1258.24 933.566 Q1256.44 937.108 1256.44 944.237 Q1256.44 951.344 1258.24 954.909 Q1260.07 958.45 1263.68 958.45 Q1267.32 958.45 1269.12 954.909 Q1270.95 951.344 1270.95 944.237 Q1270.95 937.108 1269.12 933.566 Q1267.32 930.001 1263.68 930.001 M1263.68 926.298 Q1269.49 926.298 1272.55 930.904 Q1275.63 935.487 1275.63 944.237 Q1275.63 952.964 1272.55 957.571 Q1269.49 962.154 1263.68 962.154 Q1257.87 962.154 1254.8 957.571 Q1251.74 952.964 1251.74 944.237 Q1251.74 935.487 1254.8 930.904 Q1257.87 926.298 1263.68 926.298 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip440)\" d=\"M1293.85 930.001 Q1290.23 930.001 1288.41 933.566 Q1286.6 937.108 1286.6 944.237 Q1286.6 951.344 1288.41 954.909 Q1290.23 958.45 1293.85 958.45 Q1297.48 958.45 1299.29 954.909 Q1301.11 951.344 1301.11 944.237 Q1301.11 937.108 1299.29 933.566 Q1297.48 930.001 1293.85 930.001 M1293.85 926.298 Q1299.66 926.298 1302.71 930.904 Q1305.79 935.487 1305.79 944.237 Q1305.79 952.964 1302.71 957.571 Q1299.66 962.154 1293.85 962.154 Q1288.04 962.154 1284.96 957.571 Q1281.9 952.964 1281.9 944.237 Q1281.9 935.487 1284.96 930.904 Q1288.04 926.298 1293.85 926.298 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip440)\" d=\"M1324.01 930.001 Q1320.4 930.001 1318.57 933.566 Q1316.76 937.108 1316.76 944.237 Q1316.76 951.344 1318.57 954.909 Q1320.4 958.45 1324.01 958.45 Q1327.64 958.45 1329.45 954.909 Q1331.28 951.344 1331.28 944.237 Q1331.28 937.108 1329.45 933.566 Q1327.64 930.001 1324.01 930.001 M1324.01 926.298 Q1329.82 926.298 1332.87 930.904 Q1335.95 935.487 1335.95 944.237 Q1335.95 952.964 1332.87 957.571 Q1329.82 962.154 1324.01 962.154 Q1318.2 962.154 1315.12 957.571 Q1312.06 952.964 1312.06 944.237 Q1312.06 935.487 1315.12 930.904 Q1318.2 926.298 1324.01 926.298 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip440)\" d=\"M1507.18 957.547 L1523.49 957.547 L1523.49 961.483 L1501.55 961.483 L1501.55 957.547 Q1504.21 954.793 1508.8 950.163 Q1513.4 945.511 1514.58 944.168 Q1516.83 941.645 1517.71 939.909 Q1518.61 938.149 1518.61 936.46 Q1518.61 933.705 1516.67 931.969 Q1514.74 930.233 1511.64 930.233 Q1509.44 930.233 1506.99 930.997 Q1504.56 931.761 1501.78 933.312 L1501.78 928.589 Q1504.61 927.455 1507.06 926.876 Q1509.51 926.298 1511.55 926.298 Q1516.92 926.298 1520.12 928.983 Q1523.31 931.668 1523.31 936.159 Q1523.31 938.288 1522.5 940.21 Q1521.71 942.108 1519.61 944.7 Q1519.03 945.372 1515.93 948.589 Q1512.82 951.784 1507.18 957.547 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip440)\" d=\"M1533.36 926.923 L1551.71 926.923 L1551.71 930.858 L1537.64 930.858 L1537.64 939.33 Q1538.66 938.983 1539.68 938.821 Q1540.69 938.636 1541.71 938.636 Q1547.5 938.636 1550.88 941.807 Q1554.26 944.978 1554.26 950.395 Q1554.26 955.973 1550.79 959.075 Q1547.31 962.154 1540.99 962.154 Q1538.82 962.154 1536.55 961.784 Q1534.3 961.413 1531.9 960.672 L1531.9 955.973 Q1533.98 957.108 1536.2 957.663 Q1538.43 958.219 1540.9 958.219 Q1544.91 958.219 1547.24 956.112 Q1549.58 954.006 1549.58 950.395 Q1549.58 946.784 1547.24 944.677 Q1544.91 942.571 1540.9 942.571 Q1539.03 942.571 1537.15 942.987 Q1535.3 943.404 1533.36 944.284 L1533.36 926.923 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip440)\" d=\"M1573.47 930.001 Q1569.86 930.001 1568.03 933.566 Q1566.23 937.108 1566.23 944.237 Q1566.23 951.344 1568.03 954.909 Q1569.86 958.45 1573.47 958.45 Q1577.11 958.45 1578.91 954.909 Q1580.74 951.344 1580.74 944.237 Q1580.74 937.108 1578.91 933.566 Q1577.11 930.001 1573.47 930.001 M1573.47 926.298 Q1579.28 926.298 1582.34 930.904 Q1585.42 935.487 1585.42 944.237 Q1585.42 952.964 1582.34 957.571 Q1579.28 962.154 1573.47 962.154 Q1567.66 962.154 1564.58 957.571 Q1561.53 952.964 1561.53 944.237 Q1561.53 935.487 1564.58 930.904 Q1567.66 926.298 1573.47 926.298 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip440)\" d=\"M1603.63 930.001 Q1600.02 930.001 1598.19 933.566 Q1596.39 937.108 1596.39 944.237 Q1596.39 951.344 1598.19 954.909 Q1600.02 958.45 1603.63 958.45 Q1607.27 958.45 1609.07 954.909 Q1610.9 951.344 1610.9 944.237 Q1610.9 937.108 1609.07 933.566 Q1607.27 930.001 1603.63 930.001 M1603.63 926.298 Q1609.44 926.298 1612.5 930.904 Q1615.58 935.487 1615.58 944.237 Q1615.58 952.964 1612.5 957.571 Q1609.44 962.154 1603.63 962.154 Q1597.82 962.154 1594.74 957.571 Q1591.69 952.964 1591.69 944.237 Q1591.69 935.487 1594.74 930.904 Q1597.82 926.298 1603.63 926.298 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip440)\" d=\"M1796.87 942.848 Q1800.23 943.566 1802.1 945.835 Q1804 948.103 1804 951.436 Q1804 956.552 1800.48 959.353 Q1796.96 962.154 1790.48 962.154 Q1788.31 962.154 1785.99 961.714 Q1783.7 961.297 1781.25 960.441 L1781.25 955.927 Q1783.19 957.061 1785.5 957.64 Q1787.82 958.219 1790.34 958.219 Q1794.74 958.219 1797.03 956.483 Q1799.35 954.747 1799.35 951.436 Q1799.35 948.381 1797.19 946.668 Q1795.06 944.932 1791.25 944.932 L1787.22 944.932 L1787.22 941.089 L1791.43 941.089 Q1794.88 941.089 1796.71 939.724 Q1798.54 938.335 1798.54 935.742 Q1798.54 933.08 1796.64 931.668 Q1794.76 930.233 1791.25 930.233 Q1789.32 930.233 1787.13 930.649 Q1784.93 931.066 1782.29 931.946 L1782.29 927.779 Q1784.95 927.038 1787.26 926.668 Q1789.6 926.298 1791.66 926.298 Q1796.99 926.298 1800.09 928.728 Q1803.19 931.136 1803.19 935.256 Q1803.19 938.126 1801.55 940.117 Q1799.9 942.085 1796.87 942.848 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip440)\" d=\"M1822.87 930.001 Q1819.25 930.001 1817.43 933.566 Q1815.62 937.108 1815.62 944.237 Q1815.62 951.344 1817.43 954.909 Q1819.25 958.45 1822.87 958.45 Q1826.5 958.45 1828.31 954.909 Q1830.13 951.344 1830.13 944.237 Q1830.13 937.108 1828.31 933.566 Q1826.5 930.001 1822.87 930.001 M1822.87 926.298 Q1828.68 926.298 1831.73 930.904 Q1834.81 935.487 1834.81 944.237 Q1834.81 952.964 1831.73 957.571 Q1828.68 962.154 1822.87 962.154 Q1817.06 962.154 1813.98 957.571 Q1810.92 952.964 1810.92 944.237 Q1810.92 935.487 1813.98 930.904 Q1817.06 926.298 1822.87 926.298 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip440)\" d=\"M1853.03 930.001 Q1849.42 930.001 1847.59 933.566 Q1845.78 937.108 1845.78 944.237 Q1845.78 951.344 1847.59 954.909 Q1849.42 958.45 1853.03 958.45 Q1856.66 958.45 1858.47 954.909 Q1860.3 951.344 1860.3 944.237 Q1860.3 937.108 1858.47 933.566 Q1856.66 930.001 1853.03 930.001 M1853.03 926.298 Q1858.84 926.298 1861.89 930.904 Q1864.97 935.487 1864.97 944.237 Q1864.97 952.964 1861.89 957.571 Q1858.84 962.154 1853.03 962.154 Q1847.22 962.154 1844.14 957.571 Q1841.08 952.964 1841.08 944.237 Q1841.08 935.487 1844.14 930.904 Q1847.22 926.298 1853.03 926.298 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip440)\" d=\"M1883.19 930.001 Q1879.58 930.001 1877.75 933.566 Q1875.94 937.108 1875.94 944.237 Q1875.94 951.344 1877.75 954.909 Q1879.58 958.45 1883.19 958.45 Q1886.82 958.45 1888.63 954.909 Q1890.46 951.344 1890.46 944.237 Q1890.46 937.108 1888.63 933.566 Q1886.82 930.001 1883.19 930.001 M1883.19 926.298 Q1889 926.298 1892.06 930.904 Q1895.13 935.487 1895.13 944.237 Q1895.13 952.964 1892.06 957.571 Q1889 962.154 1883.19 962.154 Q1877.38 962.154 1874.3 957.571 Q1871.24 952.964 1871.24 944.237 Q1871.24 935.487 1874.3 930.904 Q1877.38 926.298 1883.19 926.298 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><polyline clip-path=\"url(#clip440)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"719.687,899.083 719.687,462.094 \"/>\n<polyline clip-path=\"url(#clip440)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"719.687,879.22 738.585,879.22 \"/>\n<polyline clip-path=\"url(#clip440)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"719.687,779.904 738.585,779.904 \"/>\n<polyline clip-path=\"url(#clip440)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"719.687,680.588 738.585,680.588 \"/>\n<polyline clip-path=\"url(#clip440)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"719.687,581.273 738.585,581.273 \"/>\n<polyline clip-path=\"url(#clip440)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"719.687,481.957 738.585,481.957 \"/>\n<path clip-path=\"url(#clip440)\" d=\"M576.743 879.671 L606.419 879.671 L606.419 883.606 L576.743 883.606 L576.743 879.671 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip440)\" d=\"M616.558 861.94 L634.914 861.94 L634.914 865.875 L620.84 865.875 L620.84 874.347 Q621.859 874 622.877 873.838 Q623.896 873.652 624.914 873.652 Q630.702 873.652 634.081 876.824 Q637.461 879.995 637.461 885.412 Q637.461 890.99 633.989 894.092 Q630.516 897.171 624.197 897.171 Q622.021 897.171 619.752 896.8 Q617.507 896.43 615.1 895.689 L615.1 890.99 Q617.183 892.125 619.405 892.68 Q621.627 893.236 624.104 893.236 Q628.109 893.236 630.447 891.129 Q632.785 889.023 632.785 885.412 Q632.785 881.801 630.447 879.694 Q628.109 877.588 624.104 877.588 Q622.229 877.588 620.354 878.004 Q618.502 878.421 616.558 879.301 L616.558 861.94 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip440)\" d=\"M646.674 890.62 L651.558 890.62 L651.558 896.5 L646.674 896.5 L646.674 890.62 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip440)\" d=\"M671.743 865.018 Q668.132 865.018 666.303 868.583 Q664.498 872.125 664.498 879.254 Q664.498 886.361 666.303 889.925 Q668.132 893.467 671.743 893.467 Q675.377 893.467 677.183 889.925 Q679.011 886.361 679.011 879.254 Q679.011 872.125 677.183 868.583 Q675.377 865.018 671.743 865.018 M671.743 861.315 Q677.553 861.315 680.609 865.921 Q683.687 870.504 683.687 879.254 Q683.687 887.981 680.609 892.588 Q677.553 897.171 671.743 897.171 Q665.933 897.171 662.854 892.588 Q659.799 887.981 659.799 879.254 Q659.799 870.504 662.854 865.921 Q665.933 861.315 671.743 861.315 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip440)\" d=\"M577.739 780.355 L607.415 780.355 L607.415 784.291 L577.739 784.291 L577.739 780.355 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip440)\" d=\"M630.354 766.698 L618.549 785.147 L630.354 785.147 L630.354 766.698 M629.127 762.624 L635.007 762.624 L635.007 785.147 L639.938 785.147 L639.938 789.036 L635.007 789.036 L635.007 797.184 L630.354 797.184 L630.354 789.036 L614.753 789.036 L614.753 784.522 L629.127 762.624 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip440)\" d=\"M647.669 791.304 L652.553 791.304 L652.553 797.184 L647.669 797.184 L647.669 791.304 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip440)\" d=\"M662.785 762.624 L681.141 762.624 L681.141 766.559 L667.067 766.559 L667.067 775.031 Q668.086 774.684 669.104 774.522 Q670.123 774.337 671.141 774.337 Q676.928 774.337 680.308 777.508 Q683.687 780.679 683.687 786.096 Q683.687 791.675 680.215 794.777 Q676.743 797.855 670.424 797.855 Q668.248 797.855 665.979 797.485 Q663.734 797.115 661.326 796.374 L661.326 791.675 Q663.41 792.809 665.632 793.365 Q667.854 793.92 670.331 793.92 Q674.336 793.92 676.673 791.814 Q679.011 789.707 679.011 786.096 Q679.011 782.485 676.673 780.379 Q674.336 778.272 670.331 778.272 Q668.456 778.272 666.581 778.689 Q664.729 779.105 662.785 779.985 L662.785 762.624 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip440)\" d=\"M576.743 681.04 L606.419 681.04 L606.419 684.975 L576.743 684.975 L576.743 681.04 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip440)\" d=\"M629.359 667.382 L617.553 685.831 L629.359 685.831 L629.359 667.382 M628.132 663.308 L634.012 663.308 L634.012 685.831 L638.942 685.831 L638.942 689.72 L634.012 689.72 L634.012 697.868 L629.359 697.868 L629.359 689.72 L613.757 689.72 L613.757 685.206 L628.132 663.308 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip440)\" d=\"M646.674 691.989 L651.558 691.989 L651.558 697.868 L646.674 697.868 L646.674 691.989 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip440)\" d=\"M671.743 666.387 Q668.132 666.387 666.303 669.952 Q664.498 673.494 664.498 680.623 Q664.498 687.73 666.303 691.294 Q668.132 694.836 671.743 694.836 Q675.377 694.836 677.183 691.294 Q679.011 687.73 679.011 680.623 Q679.011 673.494 677.183 669.952 Q675.377 666.387 671.743 666.387 M671.743 662.683 Q677.553 662.683 680.609 667.29 Q683.687 671.873 683.687 680.623 Q683.687 689.35 680.609 693.956 Q677.553 698.54 671.743 698.54 Q665.933 698.54 662.854 693.956 Q659.799 689.35 659.799 680.623 Q659.799 671.873 662.854 667.29 Q665.933 662.683 671.743 662.683 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip440)\" d=\"M577.739 581.724 L607.415 581.724 L607.415 585.659 L577.739 585.659 L577.739 581.724 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip440)\" d=\"M631.674 579.919 Q635.03 580.636 636.905 582.905 Q638.803 585.173 638.803 588.507 Q638.803 593.622 635.285 596.423 Q631.766 599.224 625.285 599.224 Q623.109 599.224 620.794 598.784 Q618.502 598.368 616.049 597.511 L616.049 592.997 Q617.993 594.132 620.308 594.71 Q622.623 595.289 625.146 595.289 Q629.544 595.289 631.836 593.553 Q634.151 591.817 634.151 588.507 Q634.151 585.451 631.998 583.738 Q629.868 582.002 626.049 582.002 L622.021 582.002 L622.021 578.159 L626.234 578.159 Q629.683 578.159 631.512 576.794 Q633.34 575.405 633.34 572.812 Q633.34 570.15 631.442 568.738 Q629.567 567.303 626.049 567.303 Q624.127 567.303 621.928 567.72 Q619.729 568.136 617.09 569.016 L617.09 564.849 Q619.752 564.109 622.067 563.738 Q624.405 563.368 626.465 563.368 Q631.789 563.368 634.891 565.798 Q637.993 568.206 637.993 572.326 Q637.993 575.196 636.35 577.187 Q634.706 579.155 631.674 579.919 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip440)\" d=\"M647.669 592.673 L652.553 592.673 L652.553 598.553 L647.669 598.553 L647.669 592.673 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip440)\" d=\"M662.785 563.993 L681.141 563.993 L681.141 567.928 L667.067 567.928 L667.067 576.4 Q668.086 576.053 669.104 575.891 Q670.123 575.706 671.141 575.706 Q676.928 575.706 680.308 578.877 Q683.687 582.048 683.687 587.465 Q683.687 593.044 680.215 596.145 Q676.743 599.224 670.424 599.224 Q668.248 599.224 665.979 598.854 Q663.734 598.483 661.326 597.743 L661.326 593.044 Q663.41 594.178 665.632 594.733 Q667.854 595.289 670.331 595.289 Q674.336 595.289 676.673 593.183 Q679.011 591.076 679.011 587.465 Q679.011 583.854 676.673 581.747 Q674.336 579.641 670.331 579.641 Q668.456 579.641 666.581 580.058 Q664.729 580.474 662.785 581.354 L662.785 563.993 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip440)\" d=\"M576.743 482.409 L606.419 482.409 L606.419 486.344 L576.743 486.344 L576.743 482.409 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip440)\" d=\"M630.678 480.603 Q634.035 481.321 635.91 483.589 Q637.808 485.858 637.808 489.191 Q637.808 494.307 634.289 497.108 Q630.771 499.909 624.29 499.909 Q622.114 499.909 619.799 499.469 Q617.507 499.052 615.053 498.196 L615.053 493.682 Q616.998 494.816 619.313 495.395 Q621.627 495.973 624.151 495.973 Q628.549 495.973 630.84 494.237 Q633.155 492.501 633.155 489.191 Q633.155 486.136 631.002 484.423 Q628.873 482.686 625.053 482.686 L621.026 482.686 L621.026 478.844 L625.239 478.844 Q628.688 478.844 630.516 477.478 Q632.345 476.089 632.345 473.497 Q632.345 470.835 630.447 469.423 Q628.572 467.987 625.053 467.987 Q623.132 467.987 620.933 468.404 Q618.734 468.821 616.095 469.7 L616.095 465.534 Q618.757 464.793 621.072 464.423 Q623.41 464.052 625.47 464.052 Q630.794 464.052 633.896 466.483 Q636.998 468.89 636.998 473.011 Q636.998 475.881 635.354 477.872 Q633.711 479.839 630.678 480.603 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip440)\" d=\"M646.674 493.358 L651.558 493.358 L651.558 499.237 L646.674 499.237 L646.674 493.358 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip440)\" d=\"M671.743 467.756 Q668.132 467.756 666.303 471.321 Q664.498 474.862 664.498 481.992 Q664.498 489.098 666.303 492.663 Q668.132 496.205 671.743 496.205 Q675.377 496.205 677.183 492.663 Q679.011 489.098 679.011 481.992 Q679.011 474.862 677.183 471.321 Q675.377 467.756 671.743 467.756 M671.743 464.052 Q677.553 464.052 680.609 468.659 Q683.687 473.242 683.687 481.992 Q683.687 490.719 680.609 495.325 Q677.553 499.909 671.743 499.909 Q665.933 499.909 662.854 495.325 Q659.799 490.719 659.799 481.992 Q659.799 473.242 662.854 468.659 Q665.933 464.052 671.743 464.052 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><polyline clip-path=\"url(#clip443)\" style=\"stroke:#009af9; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"160.995,-1577.5 161.555,-2922.08 162.114,-4155.78 162.673,-5286.05 163.232,-6319.78 163.792,-7263.33 164.351,-8122.62 164.91,-8903.13 165.469,-8354.17 166.029,-9052.18 166.588,-9682.55 167.147,-10249.6 167.706,-10740.8 168.266,-11194.4 168.825,-11596.1 169.384,-11949.4 169.943,-12257.5 170.503,-11784.8 171.062,-12039.1 171.621,-11626.7 172.18,-11829.8 172.74,-11452.3 173.299,-11607.8 173.858,-11733.2 174.417,-11385.5 174.977,-11461.2 175.536,-11520.6 176.095,-11557.2 176.655,-10907.2 177.214,-10925.8 177.773,-10929.4 178.332,-10920 178.892,-10623.5 179.451,-10580.5 180.01,-10298.1 180.569,-10020.6 181.129,-9542.05 181.688,-9279.48 182.247,-9197.71 182.806,-8779.23 183.366,-8685.32 183.925,-8583.3 184.484,-8468.03 185.043,-8358.74 185.603,-8249.6 186.162,-8133.33 186.721,-7781.51 187.28,-7650.2 187.84,-7523.1 188.399,-7379.31 188.958,-7237.56 189.517,-7013.55 190.077,-6882.36 190.636,-6745.95 191.195,-6527.7 191.754,-6322.75 192.314,-6047.94 192.873,-5911.7 193.432,-5527.24 193.991,-5416.96 194.551,-5246.17 195.11,-5075.9 195.669,-4971.1 196.228,-4639.61 196.788,-4536 197.347,-4384.11 197.906,-4285.2 198.465,-4140.94 199.025,-3999.59 199.584,-3865.65 200.143,-3684.21 200.702,-3515.68 201.262,-3305.33 201.821,-3148.33 202.38,-2995.33 202.939,-2920.75 203.499,-2847.05 204.058,-2736.35 204.617,-2664.14 205.176,-2522.24 205.736,-2453.99 206.295,-2323.85 206.854,-2189.33 207.413,-2060.46 207.973,-1970.47 208.532,-1879.35 209.091,-1791.65 209.65,-1706.44 210.21,-1587.83 210.769,-1476.69 211.328,-1395.9 211.887,-1264.95 212.447,-1191 213.006,-1040.56 213.565,-896.438 214.124,-859.062 214.684,-770.609 215.243,-656.179 215.802,-596.581 216.361,-561.652 216.921,-430.238 217.48,-351.639 218.039,-323.434 218.598,-295.083 219.158,-219.858 219.717,-147.309 220.276,-125.906 220.835,-61.4616 221.395,-15.9385 221.954,3.38733 222.513,23.5444 223.072,42.0145 223.632,83.1139 224.191,80.1414 224.75,102.288 225.309,123.644 225.869,182.148 226.428,200.853 226.987,214.829 227.546,251.394 228.106,328.099 228.665,344.157 229.224,375.753 229.783,409.035 230.343,455.23 230.902,522.943 231.461,568.337 232.02,573.771 232.58,616.296 233.139,603.548 233.698,644.51 234.257,661.442 234.817,704.037 235.376,709.299 235.935,731.199 236.494,788.948 237.054,787.844 237.613,807.615 238.172,806.565 238.731,845.514 239.291,859.117 239.85,872.204 240.409,849.295 240.968,884.185 241.528,881.186 242.087,896.601 242.646,913.485 243.205,927.588 243.765,923.405 244.324,937.542 244.883,947.45 245.442,960.774 246.002,957.704 246.561,950.249 247.12,945.517 247.679,941.293 248.239,959.217 248.798,955.553 249.357,968.071 249.916,980.672 250.476,1064.5 251.035,1108.83 251.594,1101.42 252.153,1093.12 252.713,1118.75 253.272,1124.66 253.831,1149.38 254.39,1139.35 254.95,1145.66 255.509,1131.06 256.068,1120.61 256.627,1092.57 257.187,1115.1 257.746,1119.64 258.305,1129.66 258.864,1134.62 259.424,1138.18 259.983,1164.2 260.542,1154.15 261.101,1160.14 261.661,1167.87 262.22,1119.92 262.779,1127.4 263.338,1121.24 263.898,1159.96 264.457,1147.31 265.016,1140 265.575,1134.83 266.135,1123.87 266.694,1080.34 267.253,1073.23 267.812,1085.66 268.372,1144.8 268.931,1117.03 269.49,1158.68 270.049,1147.05 270.609,1166.97 271.168,1172.38 271.727,1162.25 272.286,1151.89 272.846,1106.98 273.405,1029.04 273.964,1026.51 274.523,1019.34 275.083,1048.62 275.642,1076.33 276.201,1087.87 276.76,1078.4 277.32,1070.8 277.879,1083.6 278.438,1107.36 278.997,1115.59 279.557,1106.35 280.116,1112.71 280.675,1103.2 281.234,1128.77 281.794,1132.82 282.353,1124.48 282.912,1130.83 283.471,1135.28 284.031,1126.42 284.59,1164.72 285.149,1171.85 285.708,1143.68 286.268,1146.64 286.827,1184.54 287.386,1190.16 287.945,1226.37 288.505,1179.79 289.064,1168.71 289.623,1175.36 290.182,1162.78 290.742,1163.02 291.301,1137.14 291.86,1125.76 292.419,1116.43 292.979,1123.52 293.538,1146.75 294.097,1138.5 294.656,1158.47 295.216,1160.92 295.775,1165.53 296.334,1148.01 296.893,1135.07 297.453,1124.04 298.012,1095.66 298.571,1067.42 299.13,1073.91 299.69,1066.56 300.249,1059.1 300.808,1053.4 301.368,1026.83 301.927,1017.26 302.486,1055.88 303.045,1014.91 303.605,1007.64 304.164,971.942 304.723,987.591 305.282,1029.92 305.842,1007.13 306.401,955.071 306.96,971.686 307.519,982.726 308.079,998.304 308.638,1011.23 309.197,1057.18 309.756,1050.33 310.316,1057.64 310.875,1028.84 311.434,1023.1 311.993,980.843 312.553,977.923 313.112,990.214 313.671,1001.29 314.23,995.993 314.79,1007.44 315.349,1000.13 315.908,1010.48 316.467,1001.86 317.027,1012.5 317.586,1023.82 318.145,1050.35 318.704,1039.69 319.264,1001.71 319.823,1029.43 320.382,1019.28 320.941,1028.9 321.501,1038.45 322.06,1044.94 322.619,1035.12 323.178,994.733 323.738,987.96 324.297,998.539 324.856,989.185 325.415,968.157 325.975,961.237 326.534,991.333 327.093,1004.53 327.652,1015.29 328.212,1023.58 328.771,1013.48 329.33,991.898 329.889,952.519 330.449,980.039 331.008,925.179 331.567,921.661 332.126,964.889 332.686,960.031 333.245,1004.03 333.804,999.262 334.363,992.493 334.923,968.769 335.482,967.867 336.041,976.54 336.6,937.63 337.16,920.353 337.719,884.03 338.278,900.545 338.837,914.972 339.397,893.233 339.956,872.937 340.515,888.99 341.074,920.445 341.634,901.857 342.193,898.506 342.752,929.818 343.311,939.775 343.871,938.647 344.43,921.856 344.989,919.217 345.548,917.476 346.108,913.674 346.667,911.623 347.226,923.428 347.785,982.334 348.345,963.345 348.904,956.348 349.463,980.141 350.022,972.077 350.582,981.813 351.141,969.407 351.7,1012.02 352.259,1036.38 352.819,1030.52 353.378,1038.52 353.937,1010.35 354.496,984.043 355.056,959.93 355.615,939.366 356.174,954.604 356.733,983.796 357.293,979.034 357.852,936.654 358.411,929.927 358.97,956.501 359.53,966.983 360.089,957.293 360.648,947.611 361.207,892.293 361.767,906.521 362.326,882.365 362.885,880.905 363.444,909.081 364.004,917.155 364.563,942.483 365.122,902.391 365.681,895.717 366.241,890.235 366.8,867.627 367.359,867.13 367.918,863.262 368.478,875.306 369.037,886.25 369.596,864.34 370.155,894.713 370.715,890.013 371.274,885.193 371.833,861.58 372.392,842.31 372.952,838.779 373.511,820.797 374.07,820.248 374.629,818.551 375.189,849.258 375.748,876.705 376.307,823.353 376.866,826.025 377.426,776.269 377.985,747.779 378.544,744.319 379.103,761.844 379.663,795.292 380.222,775.833 380.781,795.038 381.34,808.5 381.9,854.909 382.459,869.93 383.018,896.887 383.577,890.331 384.137,870.844 384.696,836.573 385.255,836.335 385.814,750.285 386.374,756.647 386.933,777.051 387.492,777.235 388.051,796.238 388.611,813.348 389.17,797.466 389.729,797.294 390.288,781.548 390.848,749.076 391.407,733.41 391.966,720.065 392.525,726.148 393.085,748.03 393.644,736.522 394.203,686.525 394.762,693.938 395.322,667.784 395.881,661.097 396.44,667.63 396.999,706.988 397.559,712.498 398.118,700.728 398.677,706.459 399.236,711.908 399.796,716.371 400.355,733.558 400.914,721.938 401.473,713.736 402.033,699.834 402.592,691.154 403.151,695.441 403.71,664.006 404.27,653.376 404.829,658.31 405.388,663.61 405.947,670.171 406.507,661.473 407.066,674.75 407.625,697.191 408.184,687.146 408.744,673.568 409.303,680.937 409.862,672.463 410.421,695.067 410.981,668.814 411.54,706.505 412.099,773.215 412.658,742.351 413.218,776.05 413.777,793.676 414.336,826.447 414.895,838.629 415.455,838.439 416.014,881.334 416.573,875.79 417.132,852.138 417.692,865.61 418.251,846.219 418.81,844.919 419.369,858.721 419.929,871.511 420.488,880.006 421.047,890.32 421.606,851.027 422.166,863.943 422.725,858.598 423.284,836.417 423.843,830.948 424.403,827.403 424.962,824.092 425.521,820.878 426.08,821.439 426.64,802.847 427.199,816.715 427.758,797.56 428.318,812.319 428.877,774.07 429.436,772.776 429.995,771.749 430.555,785.515 431.114,799.13 431.673,796.734 432.232,779.046 432.792,761.743 433.351,775.331 433.91,777.094 434.469,770.719 435.029,819.567 435.588,815.088 436.147,812.814 436.706,812.079 437.266,775.341 437.825,777.072 438.384,761.627 438.943,743.761 439.503,743.628 440.062,729.236 440.621,747.606 441.18,748.653 441.74,766.131 442.299,733.464 442.858,750.839 443.417,768.598 443.977,752.747 444.536,721.121 445.095,718.701 445.654,737.619 446.214,755.003 446.773,768.961 447.332,737.719 447.891,736.486 448.451,734.266 449.01,733.87 449.569,735.488 450.128,737.92 450.688,740.33 451.247,758.183 451.806,760.088 452.365,763.503 452.925,763.272 453.484,780.007 454.043,763.408 454.602,761.633 455.162,762.042 455.721,760.995 456.28,788.254 456.839,805.194 457.399,803.912 457.958,862.912 458.517,888.02 459.076,865.308 459.636,860.1 460.195,872.66 460.754,849.929 461.313,877.269 461.873,852.636 462.432,879.947 462.991,854.364 463.55,882.678 464.11,925.223 464.669,900.633 465.228,876.124 465.787,853.202 466.347,843.742 466.906,822.142 467.465,773.983 468.024,789.097 468.584,785.714 469.143,785.69 469.702,780.196 470.261,791.221 470.821,789.523 471.38,784.878 471.939,782.149 472.498,780.556 473.058,795.038 473.617,790.982 474.176,787.494 474.735,820.634 475.295,815.441 475.854,812.524 476.413,790.041 476.972,787.39 477.532,798.685 478.091,776.058 478.65,774.312 479.209,803.361 479.769,784.507 480.328,799.407 480.887,796.739 481.446,775.936 482.006,773.515 482.565,789.002 483.124,821.081 483.683,833.801 484.243,827.785 484.802,837.963 485.361,782.377 485.92,765.385 486.48,762.501 487.039,761.077 487.598,742.685 488.157,725.582 488.717,726.672 489.276,694.234 489.835,694.628 490.394,683.095 490.954,733.146 491.513,719.794 492.072,720.215 492.631,738.382 493.191,688.281 493.75,693.282 494.309,695.263 494.868,711.137 495.428,712.242 495.987,712.379 496.546,715.003 497.105,715.804 497.665,735.26 498.224,734.188 498.783,746.057 499.342,747.957 499.902,763.654 500.461,745.094 501.02,711.066 501.579,728.072 502.139,714.35 502.698,745.797 503.257,747.261 503.816,747.902 504.376,701.568 504.935,685.49 505.494,689.638 506.053,694.798 506.613,681.799 507.172,719.136 507.731,718.981 508.29,735.912 508.85,734.109 509.409,731.619 509.968,700.393 510.527,718.543 511.087,735.186 511.646,766.928 512.205,768.188 512.764,763.125 513.324,762.441 513.883,745.065 514.442,760.018 515.001,743.469 515.561,745.46 516.12,747.076 516.679,780.107 517.238,797.262 517.798,807.344 518.357,820.031 518.916,828.716 519.475,807.362 520.035,803.176 520.594,816.449 521.153,778.815 521.712,828.877 522.272,871.616 522.831,864.7 523.39,841.603 523.949,838.526 524.509,802.521 525.068,780.072 525.627,809.594 526.186,785.218 526.746,782.224 527.305,811.47 527.864,808.688 528.423,804.048 528.983,799.943 529.542,793.902 530.101,789.951 530.66,801.056 531.22,763.839 531.779,809.871 532.338,788.602 532.897,771.776 533.457,782.866 534.016,782.502 534.575,747.525 535.134,763.064 535.694,776.381 536.253,775.958 536.812,770.834 537.371,766.099 537.931,763.74 538.49,774.578 539.049,755.045 539.608,753.216 540.168,750.534 540.727,749.76 541.286,761.742 541.845,758.813 542.405,770.684 542.964,753.68 543.523,768.96 544.082,718.877 544.642,719.167 545.201,682.516 545.76,716.992 546.319,683.526 546.879,700.435 547.438,699.736 547.997,699.301 548.556,700.629 549.116,701.328 549.675,685.303 550.234,702.567 550.793,718.043 551.353,721.32 551.912,716.927 552.471,730.44 553.031,713.861 553.59,728.389 554.149,726.573 554.708,708.11 555.268,709.189 555.827,726.723 556.386,724.262 556.945,737.736 557.505,717.832 558.064,766.459 558.623,779.497 559.182,795.048 559.742,773.176 560.301,785.838 560.86,782.949 561.419,758.973 561.979,772.798 562.538,754.216 563.097,779.929 563.656,808.33 564.216,838.579 564.775,832.668 565.334,808.388 565.893,772.13 566.453,772.785 567.012,770.487 567.571,751.817 568.13,716.094 568.69,730.801 569.249,762.672 569.808,708.422 570.367,708.731 570.927,725.181 571.486,676.026 572.045,728.146 572.604,709.254 573.164,692.99 573.723,642.225 574.282,628.385 574.841,633.628 575.401,656.084 575.96,640.853 576.519,607.871 577.078,614.936 577.638,639.382 578.197,643.457 578.756,651.284 579.315,655.894 579.875,674.683 580.434,694.677 580.993,743.523 581.552,758.984 582.112,786.005 582.671,764.617 583.23,743.041 583.789,711.027 584.349,692.813 584.908,711.727 585.467,680.792 586.026,681.426 586.586,686.151 587.145,655.931 587.704,656.485 588.263,595.692 588.823,603.494 589.382,627.691 589.941,650.472 590.5,669.941 591.06,657.897 591.619,642.943 592.178,648.828 592.737,653.621 593.297,657.282 593.856,674.951 594.415,693.005 594.974,693.1 595.534,726.698 596.093,742.467 596.652,774.31 597.211,817.532 597.771,828.246 598.33,839.072 598.889,863.626 599.448,870.04 600.008,799.833 600.567,794.554 601.126,820.571 601.685,811.88 602.245,824.223 602.804,819.723 603.363,811.703 603.922,821.947 604.482,816.923 605.041,795.256 605.6,774.843 606.159,817.258 606.719,814.047 607.278,780.051 607.837,779.416 608.396,809.918 608.956,832.272 609.515,793.38 610.074,787.667 610.633,779.824 611.193,728.541 611.752,710.583 612.311,678.33 612.87,700.46 613.43,700.414 613.989,686.207 614.548,671.514 615.107,639.042 615.667,641.232 616.226,658.42 616.785,630.065 617.344,616.267 617.904,637.277 618.463,649.684 619.022,654.086 619.581,688.729 620.141,675.155 620.7,656.253 621.259,643.522 621.818,631.537 622.378,634.028 622.937,634.163 623.496,635.263 624.055,609.049 624.615,631.575 625.174,606.264 625.733,580.56 626.292,584.338 626.852,575.901 627.411,585.738 627.97,610.17 628.529,600.815 629.089,639.029 629.648,642.877 630.207,650.012 630.766,652.885 631.326,654.842 631.885,687.674 632.444,687.492 633.003,718.893 633.563,736.184 634.122,719.472 634.681,717.962 635.24,684.68 635.8,685.695 636.359,702.234 636.918,720.921 637.477,718.686 638.037,733.031 638.596,747.29 639.155,760.312 639.714,757.612 640.274,751.83 640.833,750.486 641.392,762.61 641.951,743.515 642.511,738.596 643.07,737.87 643.629,750.71 644.188,782.564 644.748,826.812 645.307,821.008 645.866,815.165 646.425,792.107 646.985,788.8 647.544,782.606 648.103,761.669 648.662,790.29 649.222,785.5 649.781,780.426 650.34,777.249 650.899,758.224 651.459,722.431 652.018,719.244 652.577,735.982 653.136,736.506 653.696,719.481 654.255,754.268 654.814,752.108 655.373,765.609 655.933,759.93 656.492,719.192 657.051,734.1 657.61,750.621 658.17,749.561 658.729,761.571 659.288,772.734 659.847,757.143 660.407,737.975 660.966,737.612 661.525,723.137 662.084,737.445 662.644,706.45 663.203,739.633 663.762,737.872 664.321,702.252 664.881,686.114 665.44,704.72 665.999,736.922 666.558,735.635 667.118,734.675 667.677,731.694 668.236,695.648 668.795,713.542 669.355,714.768 669.914,714.171 670.473,700.192 671.032,700.87 671.592,720.563 672.151,735.19 672.71,754.128 673.269,768.434 673.829,720.818 674.388,751.116 674.947,733.159 675.506,749.206 676.066,713.324 676.625,730.671 677.184,730.233 677.743,696.815 678.303,715.235 678.862,683.368 679.421,682.713 679.981,646.323 680.54,648.513 681.099,668.929 681.658,656.405 682.218,672.773 682.777,660.432 683.336,657.302 683.895,659.414 684.455,714.264 685.014,730.271 685.573,728.973 686.132,726.34 686.692,753.526 687.251,780.345 687.81,807.308 688.369,783.905 688.929,749.415 689.488,728.076 690.047,760.537 690.606,724.898 691.166,739.847 691.725,702.819 692.284,668.472 692.843,655.842 693.403,655.231 693.962,686.733 694.521,705.294 695.08,702.661 695.64,703.55 696.199,705.934 696.758,706.91 697.317,721.187 697.877,707.603 698.436,707.907 698.995,704.735 699.554,707.318 700.114,752.553 700.673,782.192 701.232,776.551 701.791,790.806 702.351,773.76 702.91,752.914 703.469,767.393 704.028,759.058 704.588,723.914 705.147,734.368 705.706,681.713 706.265,666.64 706.825,670.134 707.384,672.664 707.943,690.493 708.502,691.542 709.062,705.75 709.621,706.338 710.18,717.816 710.739,715.435 711.299,701.237 711.858,701.866 712.417,735.237 712.976,778.978 713.536,837.609 714.095,831.714 714.654,790.126 715.213,784.96 715.773,779.9 716.332,789.33 716.891,785.193 717.45,732.498 718.01,729.439 718.569,710.791 719.128,705.788 719.687,674.706 720.247,691.166 720.806,690.912 721.365,709.876 721.924,724.245 722.484,688.724 723.043,720.811 723.602,705.353 724.161,733.955 724.721,715.977 725.28,664.41 725.839,695.32 726.398,696.95 726.958,681.133 727.517,683.811 728.076,688.094 728.635,684.277 729.195,681.896 729.754,668.876 730.313,636.82 730.872,637.612 731.432,643.566 731.991,629.467 732.55,631.445 733.109,652.463 733.669,639.269 734.228,642.08 734.787,644.445 735.346,642.162 735.906,627.872 736.465,648.094 737.024,632.638 737.583,652.729 738.143,636.047 738.702,654.914 739.261,642.881 739.82,632.881 740.38,638.498 740.939,594.192 741.498,583.686 742.057,607.861 742.617,596.845 743.176,601.857 743.735,625.451 744.294,613.65 744.854,637.181 745.413,621.137 745.972,626.682 746.531,632.718 747.091,669.626 747.65,639.59 748.209,643.788 748.768,635.251 749.328,624.632 749.887,597.533 750.446,618.965 751.005,577.502 751.565,569.811 752.124,629.085 752.683,613.36 753.242,636.633 753.802,621.292 754.361,627.234 754.92,629.33 755.479,616.89 756.039,621.986 756.598,609.416 757.157,618.224 757.716,637.422 758.276,642.171 758.835,612.657 759.394,618.132 759.953,636.882 760.513,656.263 761.072,709.239 761.631,691.294 762.19,690.742 762.75,707.33 763.309,705.977 763.868,677.103 764.427,663.322 764.987,694.817 765.546,695.377 766.105,680.036 766.664,677.558 767.224,661.914 767.783,646.561 768.342,650.174 768.901,668.873 769.461,700.834 770.02,713.595 770.579,714.712 771.138,713.426 771.698,697.209 772.257,682.022 772.816,682.65 773.375,684.06 773.935,669.276 774.494,651.541 775.053,669.782 775.612,670.664 776.172,674.996 776.731,673.487 777.29,707.363 777.849,706.65 778.409,689.585 778.968,674.758 779.527,640.105 780.086,593.484 780.646,602.415 781.205,592.798 781.764,601.609 782.323,590.336 782.883,595.732 783.442,586.822 784.001,613.317 784.56,618.639 785.12,654.719 785.679,658.208 786.238,660.311 786.797,696.019 787.357,709.668 787.916,723.084 788.475,738.417 789.034,751.954 789.594,746.334 790.153,713.609 790.712,744.662 791.271,740.681 791.831,735.723 792.39,730.582 792.949,760.575 793.508,772.154 794.068,773.845 794.627,770.291 795.186,781.796 795.745,795.579 796.305,805.456 796.864,751.401 797.423,734.34 797.982,748.815 798.542,764.752 799.101,759.076 799.66,756.71 800.219,782.908 800.779,772.981 801.338,784.742 801.897,761.497 802.456,806.025 803.016,768.739 803.575,780.94 804.134,777.101 804.693,791.763 805.253,804.193 805.812,813.838 806.371,805.085 806.931,813.91 807.49,821.966 808.049,831.337 808.608,824.494 809.168,800.52 809.727,808.681 810.286,768.669 810.845,764.161 811.405,743.756 811.964,694.285 812.523,694.668 813.082,710.416 813.642,722.457 814.201,705.098 814.76,704.989 815.319,717.79 815.879,700.216 816.438,685.709 816.997,683.476 817.556,731.38 818.116,714.216 818.675,694.147 819.234,644.078 819.793,628.941 820.353,612.718 820.912,601.899 821.471,608.357 822.03,611.678 822.59,634.255 823.149,671.331 823.708,688.397 824.267,672.976 824.827,640.994 825.386,630.522 825.945,637.58 826.504,623.084 827.064,610.398 827.623,630.814 828.182,633.65 828.741,635.775 829.301,621.203 829.86,627.664 830.419,627.766 830.978,631.553 831.538,634.243 832.097,623.085 832.656,612.874 833.215,638.024 833.775,671.846 834.334,656.247 834.893,687.312 835.452,675.05 836.012,705.513 836.571,719.674 837.13,734.128 837.689,733.253 838.249,712.558 838.808,712.91 839.367,713.378 839.926,732.557 840.486,699.963 841.045,697.423 841.604,713.815 842.163,662.219 842.723,660.198 843.282,680.607 843.841,664.189 844.4,699.442 844.96,698.364 845.519,680.839 846.078,682.856 846.637,686.556 847.197,702.46 847.756,715.718 848.315,701.095 848.874,665.175 849.434,665.266 849.993,668.592 850.552,667.47 851.111,671.898 851.671,668.966 852.23,687.849 852.789,735.759 853.348,719.36 853.908,718.152 854.467,715.083 855.026,711.39 855.585,693.254 856.145,707.326 856.704,708.038 857.263,756.9 857.822,753.61 858.382,751.596 858.941,735.165 859.5,750.485 860.059,748.177 860.619,758.785 861.178,741.052 861.737,755.531 862.296,800.504 862.856,823.825 863.415,815.701 863.974,780.529 864.533,776.501 865.093,773.89 865.652,788.795 866.211,750.862 866.77,747.173 867.33,693.035 867.889,640.983 868.448,658.819 869.007,677.273 869.567,695.495 870.126,727.612 870.685,724.514 871.244,708.842 871.804,670.797 872.363,655.479 872.922,659.044 873.481,645.535 874.041,645.891 874.6,629.404 875.159,679.546 875.718,629.472 876.278,637.569 876.837,621.499 877.396,641.637 877.955,677.138 878.515,690.157 879.074,672.91 879.633,670.749 880.192,653.57 880.752,639.239 881.311,625.493 881.87,627.537 882.429,629.632 882.989,632.747 883.548,682.95 884.107,685.545 884.666,701.207 885.226,701.941 885.785,732.679 886.344,764.6 886.903,792.77 887.463,770.922 888.022,748.17 888.581,758.493 889.14,740.643 889.7,753.475 890.259,734.957 890.818,714.916 891.377,747.694 891.937,773.407 892.496,736.061 893.055,764.115 893.614,780.265 894.174,808.806 894.733,753.618 895.292,718.412 895.851,717.928 896.411,698.088 896.97,714.507 897.529,677.57 898.088,675.364 898.648,640.177 899.207,640.125 899.766,659.746 900.325,677.819 900.885,706.96 901.444,671.52 902.003,722.14 902.562,706.165 903.122,689.826 903.681,691.868 904.24,674.486 904.799,642.349 905.359,678.8 905.918,682.287 906.477,700.523 907.036,720.335 907.596,719.416 908.155,716.223 908.714,680.778 909.273,697.016 909.833,678.7 910.392,694.196 910.951,690.883 911.51,659.612 912.07,647.366 912.629,601.009 913.188,587.32 913.747,593.589 914.307,612.772 914.866,617.863 915.425,608.088 915.984,630.722 916.544,634.377 917.103,638.083 917.662,641.815 918.221,646.205 918.781,682.37 919.34,712.943 919.899,696.316 920.458,697.827 921.018,713.429 921.577,727.614 922.136,740.215 922.695,755.969 923.255,746.911 923.814,756.7 924.373,754.483 924.932,750.938 925.492,746.816 926.051,743.177 926.61,738.032 927.169,736.195 927.729,688.875 928.288,717.605 928.847,699.723 929.406,666.247 929.966,684.474 930.525,702.465 931.084,688.148 931.644,718.924 932.203,701.407 932.762,686.626 933.321,651.674 933.881,639.056 934.44,671.951 934.999,686.589 935.558,686.177 936.118,702.526 936.677,700.989 937.236,712.237 937.795,709.561 938.355,738.164 938.914,716.286 939.473,747.012 940.032,778.2 940.592,740.694 941.151,757.224 941.71,737.424 942.269,718.468 942.829,734.702 943.388,742.69 943.947,724.725 944.506,707.616 945.066,726.76 945.625,727.066 946.184,725.209 946.743,726.762 947.303,724.915 947.862,708.652 948.421,706.317 948.98,672.993 949.54,642.486 950.099,631.989 950.658,639.463 951.217,636.845 951.777,652.887 952.336,656.009 952.895,655.667 953.454,674.707 954.014,674.232 954.573,675.31 955.132,671.896 955.691,724.076 956.251,686.903 956.81,687.863 957.369,640.323 957.928,659.251 958.488,647.144 959.047,612.371 959.606,617.115 960.165,602.846 960.725,577.868 961.284,585.625 961.843,558.149 962.402,596.529 962.962,568.32 963.521,590.536 964.08,593.824 964.639,597.696 965.199,587.647 965.758,578.483 966.317,586.031 966.876,606.703 967.436,610.016 967.995,596.695 968.554,604.767 969.113,575.391 969.673,580.944 970.232,539.601 970.791,564.958 971.35,591.264 971.91,631.775 972.469,666.152 973.028,695.972 973.587,667.473 974.147,681.533 974.706,714.49 975.265,745.33 975.824,756.487 976.384,770.765 976.943,748.376 977.502,729.954 978.061,742.524 978.621,788.273 979.18,797.885 979.739,776.71 980.298,727.803 980.858,760.257 981.417,724.864 981.976,676.149 982.535,675.671 983.095,628.039 983.654,630.641 984.213,647.095 984.772,652.048 985.332,638.058 985.891,639.586 986.45,622.694 987.009,642.326 987.569,659.047 988.128,642.972 988.687,644.204 989.246,630.567 989.806,632.794 990.365,602.105 990.924,604.136 991.483,558.374 992.043,587.528 992.602,595.919 993.161,584.424 993.72,620.271 994.28,658.009 994.839,628.243 995.398,614.955 995.957,619.146 996.517,643.127 997.076,630.881 997.635,633.041 998.194,669.16 998.754,671.222 999.313,671.797 999.872,669.868 1000.43,670.36 1000.99,672.431 1001.55,684.865 1002.11,686.086 1002.67,699.661 1003.23,682.063 1003.79,678.233 1004.35,678.435 1004.91,662.178 1005.46,696.693 1006.02,649.179 1006.58,683.788 1007.14,666.709 1007.7,667.051 1008.26,701.659 1008.82,701.126 1009.38,704.805 1009.94,706.781 1010.5,706.823 1011.06,738.791 1011.62,717.935 1012.18,731.255 1012.73,728.459 1013.29,663.861 1013.85,666.367 1014.41,647.923 1014.97,667.936 1015.53,652.054 1016.09,667.447 1016.65,669.256 1017.21,687.44 1017.77,704.382 1018.33,704.483 1018.89,723.858 1019.45,736.422 1020.01,747.086 1020.56,746.756 1021.12,743.631 1021.68,755.912 1022.24,770.217 1022.8,783.423 1023.36,763.389 1023.92,724.212 1024.48,721.942 1025.04,736.331 1025.6,735.046 1026.16,731.318 1026.72,694.436 1027.28,691.122 1027.83,675.703 1028.39,726.348 1028.95,740.736 1029.51,725.815 1030.07,740.854 1030.63,735.067 1031.19,718.531 1031.75,716.876 1032.31,715.509 1032.87,731.342 1033.43,726.712 1033.99,739.382 1034.55,733.041 1035.1,727.219 1035.66,739.16 1036.22,735.89 1036.78,762.216 1037.34,757.671 1037.9,769.483 1038.46,748.891 1039.02,712.427 1039.58,707.277 1040.14,676.445 1040.7,695.836 1041.26,694.224 1041.82,724.453 1042.38,720.539 1042.93,717.637 1043.49,683.567 1044.05,683.004 1044.61,698.157 1045.17,696.309 1045.73,680.013 1046.29,647.529 1046.85,646.935 1047.41,616.172 1047.97,616.95 1048.53,622.278 1049.09,627.17 1049.65,628.38 1050.2,645.999 1050.76,628.472 1051.32,666.995 1051.88,667.786 1052.44,665.041 1053,649.505 1053.56,602.197 1054.12,639.031 1054.68,674.992 1055.24,676.853 1055.8,693.477 1056.36,724.579 1056.92,736.359 1057.48,716.923 1058.03,696.947 1058.59,729.956 1059.15,725.515 1059.71,722.935 1060.27,753.532 1060.83,781.916 1061.39,780.082 1061.95,727.491 1062.51,708.353 1063.07,720.462 1063.63,701.914 1064.19,685.328 1064.75,668.125 1065.3,670.937 1065.86,671.693 1066.42,621.296 1066.98,654.702 1067.54,671.975 1068.1,656.834 1068.66,672.664 1069.22,656.142 1069.78,675.366 1070.34,678.277 1070.9,708.552 1071.46,724.034 1072.02,674.946 1072.57,674.797 1073.13,655.759 1073.69,686.561 1074.25,672.23 1074.81,687.952 1075.37,706.122 1075.93,735.943 1076.49,747.687 1077.05,728.1 1077.61,760.267 1078.17,755.897 1078.73,704.454 1079.29,687.672 1079.85,703.901 1080.4,699.657 1080.96,684.404 1081.52,734.298 1082.08,720.092 1082.64,733.317 1083.2,767.781 1083.76,780.673 1084.32,761.46 1084.88,738.267 1085.44,719.504 1086,698.455 1086.56,649.939 1087.12,621.125 1087.67,622.135 1088.23,640.735 1088.79,675.842 1089.35,675.874 1089.91,663.762 1090.47,664.006 1091.03,650.767 1091.59,685.871 1092.15,685.832 1092.71,671.531 1093.27,689.73 1093.83,657.407 1094.39,659.259 1094.94,662.093 1095.5,631.947 1096.06,654.022 1096.62,655.171 1097.18,672.198 1097.74,622.985 1098.3,639.331 1098.86,673.84 1099.42,676.221 1099.98,661.918 1100.54,693.084 1101.1,709.435 1101.66,739.214 1102.22,754.204 1102.77,735.082 1103.33,765.91 1103.89,761.43 1104.45,769.22 1105.01,779.71 1105.57,773.694 1106.13,767.718 1106.69,760.465 1107.25,706.74 1107.81,692.032 1108.37,705.429 1108.93,754.91 1109.49,753.136 1110.04,732.345 1110.6,710.732 1111.16,706.841 1111.72,689.643 1112.28,690.573 1112.84,670.666 1113.4,669.488 1113.96,655.297 1114.52,656.442 1115.08,643.508 1115.64,665.845 1116.2,632.602 1116.76,600.319 1117.31,605.611 1117.87,625.398 1118.43,645.038 1118.99,661.766 1119.55,728.805 1120.11,728.391 1120.67,724.521 1121.23,786.398 1121.79,781.289 1122.35,779.106 1122.91,757.261 1123.47,734.357 1124.03,745.565 1124.59,740.652 1125.14,720.573 1125.7,689.803 1126.26,707.23 1126.82,706.354 1127.38,722.788 1127.94,703.2 1128.5,648.98 1129.06,634.697 1129.62,670.079 1130.18,702.481 1130.74,719.831 1131.3,749.871 1131.86,759.065 1132.41,749.85 1132.97,746.166 1133.53,723.822 1134.09,755.956 1134.65,773.983 1135.21,755.264 1135.77,731.36 1136.33,730.335 1136.89,726.514 1137.45,690.967 1138.01,657.061 1138.57,644.67 1139.13,645.212 1139.68,647.087 1140.24,647.717 1140.8,699.053 1141.36,683.449 1141.92,701.112 1142.48,713.173 1143.04,740.622 1143.6,734.62 1144.16,766.573 1144.72,777.035 1145.28,770.942 1145.84,767.502 1146.4,760.228 1146.96,771.444 1147.51,752.611 1148.07,717.078 1148.63,729.801 1149.19,709.608 1149.75,692.67 1150.31,675.413 1150.87,659.643 1151.43,676.011 1151.99,643.875 1152.55,647.406 1153.11,649.85 1153.67,668.118 1154.23,668.222 1154.78,671.59 1155.34,689.212 1155.9,740.828 1156.46,751.798 1157.02,767.031 1157.58,776.012 1158.14,788.059 1158.7,754.365 1159.26,719.095 1159.82,669.738 1160.38,688.004 1160.94,704.606 1161.5,704.659 1162.05,674.523 1162.61,676.077 1163.17,706.975 1163.73,706.04 1164.29,685.453 1164.85,684.533 1165.41,684.546 1165.97,696.75 1166.53,711.287 1167.09,711.337 1167.65,694.964 1168.21,694.163 1168.77,706.148 1169.33,671.221 1169.88,690.717 1170.44,675.731 1171,707.383 1171.56,672.91 1172.12,673.732 1172.68,658.075 1173.24,690.994 1173.8,708.745 1174.36,695.238 1174.92,647.086 1175.48,661.881 1176.04,647.4 1176.6,649.646 1177.15,649.195 1177.71,698.895 1178.27,685.057 1178.83,668.861 1179.39,668.99 1179.95,683.879 1180.51,699.181 1181.07,667.118 1181.63,667.996 1182.19,637.903 1182.75,637.499 1183.31,642.813 1183.87,625.486 1184.43,630.513 1184.98,651.779 1185.54,635.939 1186.1,638.516 1186.66,638.581 1187.22,641.092 1187.78,647.574 1188.34,649.923 1188.9,635.782 1189.46,607.646 1190.02,611.857 1190.58,632.627 1191.14,616.791 1191.7,622.112 1192.25,608.409 1192.81,613.832 1193.37,602.384 1193.93,619.556 1194.49,628.605 1195.05,634.725 1195.61,638.668 1196.17,623.916 1196.73,645.058 1197.29,650.652 1197.85,653.073 1198.41,639.008 1198.97,640.249 1199.52,660.738 1200.08,660.486 1200.64,629.642 1201.2,630.504 1201.76,648.873 1202.32,685.101 1202.88,681.478 1203.44,696.582 1204,698.92 1204.56,666.057 1205.12,683.749 1205.68,698.665 1206.24,682.885 1206.8,648.197 1207.35,666.293 1207.91,666.696 1208.47,702.654 1209.03,673.244 1209.59,642.389 1210.15,631.454 1210.71,651.093 1211.27,688.442 1211.83,686.876 1212.39,656.927 1212.95,671.296 1213.51,655.796 1214.07,644.051 1214.62,630.892 1215.18,634.614 1215.74,575.875 1216.3,613.48 1216.86,602.064 1217.42,574.377 1217.98,616.093 1218.54,638.483 1219.1,610.094 1219.66,601.21 1220.22,621.957 1220.78,610.405 1221.34,616.302 1221.89,617.824 1222.45,634.387 1223.01,637.835 1223.57,639.644 1224.13,658.333 1224.69,661.816 1225.25,599.574 1225.81,651.608 1226.37,636.282 1226.93,619.745 1227.49,657.318 1228.05,642.396 1228.61,647.926 1229.17,647.956 1229.72,649.782 1230.28,669.651 1230.84,667.747 1231.4,654.999 1231.96,653.638 1232.52,654.601 1233.08,624.743 1233.64,661.907 1234.2,697.319 1234.76,697.261 1235.32,730.197 1235.88,711.827 1236.44,743.739 1236.99,821.968 1237.55,780.088 1238.11,806.645 1238.67,785.667 1239.23,781.975 1239.79,742.139 1240.35,707.748 1240.91,788.085 1241.47,766.671 1242.03,777.829 1242.59,755.749 1243.15,794.448 1243.71,770.067 1244.26,780.807 1244.82,774.226 1245.38,804.833 1245.94,831.864 1246.5,792.095 1247.06,752.829 1247.62,761.506 1248.18,772.831 1248.74,769.366 1249.3,762.615 1249.86,741.763 1250.42,721.315 1250.98,734.658 1251.54,701.47 1252.09,685.529 1252.65,719.536 1253.21,715.031 1253.77,746.356 1254.33,728.591 1254.89,710.073 1255.45,723.178 1256.01,720.329 1256.57,717.568 1257.13,717.263 1257.69,718.131 1258.25,711.98 1258.81,725.745 1259.36,707.863 1259.92,674.571 1260.48,661.678 1261.04,695.39 1261.6,694.995 1262.16,698.545 1262.72,714.073 1263.28,683.417 1263.84,665.934 1264.4,652.115 1264.96,667.858 1265.52,663.78 1266.08,648.135 1266.63,633.425 1267.19,637.498 1267.75,641.285 1268.31,627.204 1268.87,647.679 1269.43,648.342 1269.99,654.44 1270.55,654.719 1271.11,657.331 1271.67,660.52 1272.23,663.515 1272.79,669.363 1273.35,654.862 1273.91,653.728 1274.46,655.249 1275.02,639.32 1275.58,623.7 1276.14,607.682 1276.7,610.787 1277.26,614.028 1277.82,635.234 1278.38,636.199 1278.94,623.93 1279.5,612.814 1280.06,631.232 1280.62,615.554 1281.18,586.272 1281.73,591.96 1282.29,581.984 1282.85,606.748 1283.41,629.612 1283.97,635.889 1284.53,622.911 1285.09,627.312 1285.65,583.729 1286.21,632.602 1286.77,649.321 1287.33,648.858 1287.89,650.753 1288.45,650.742 1289,654.107 1289.56,654.899 1290.12,641.388 1290.68,661.881 1291.24,647.709 1291.8,664.861 1292.36,652.411 1292.92,639.085 1293.48,688.266 1294.04,640.644 1294.6,675.208 1295.16,673.735 1295.72,691.557 1296.28,675.718 1296.83,693.021 1297.39,693.706 1297.95,691.879 1298.51,691.044 1299.07,676.259 1299.63,645.092 1300.19,648.543 1300.75,636.261 1301.31,671.081 1301.87,689.595 1302.43,707.113 1302.99,726.06 1303.55,757.06 1304.1,703.78 1304.66,685.656 1305.22,684.216 1305.78,655.654 1306.34,674.607 1306.9,687.499 1307.46,685.387 1308.02,702.271 1308.58,733.884 1309.14,701.22 1309.7,696.651 1310.26,710.8 1310.82,711.513 1311.38,714.942 1311.93,696.062 1312.49,663.115 1313.05,650.348 1313.61,602.893 1314.17,643.161 1314.73,680.13 1315.29,711.653 1315.85,707.667 1316.41,660.423 1316.97,645.894 1317.53,680.12 1318.09,696.887 1318.65,711.57 1319.2,693.74 1319.76,695.72 1320.32,695.842 1320.88,679.715 1321.44,681.464 1322,713.157 1322.56,730.408 1323.12,711.861 1323.68,695.755 1324.24,692.408 1324.8,673.302 1325.36,691.373 1325.92,705.741 1326.47,688.607 1327.03,651.78 1327.59,652.691 1328.15,639.253 1328.71,626.208 1329.27,739.939 1329.83,753.716 1330.39,734.544 1330.95,747.124 1331.51,739.3 1332.07,741.799 1332.63,738.895 1333.19,700.955 1333.75,695.68 1334.3,680.644 1334.86,698.799 1335.42,667.122 1335.98,621.088 1336.54,623.863 1337.1,625.64 1337.66,626.656 1338.22,613.792 1338.78,652.623 1339.34,640.867 1339.9,658.512 1340.46,625.706 1341.02,644.889 1341.57,643.468 1342.13,662.885 1342.69,678.282 1343.25,644.818 1343.81,664.897 1344.37,680.788 1344.93,663.292 1345.49,696.587 1346.05,693.666 1346.61,709.077 1347.17,719.78 1347.73,717.709 1348.29,716.656 1348.84,716.409 1349.4,746.832 1349.96,712.326 1350.52,709.733 1351.08,744.64 1351.64,737.632 1352.2,687.54 1352.76,690.588 1353.32,687.021 1353.88,699.823 1354.44,714.489 1355,680.827 1355.56,665.884 1356.12,656.28 1356.67,644.517 1357.23,614.411 1357.79,634.071 1358.35,653.361 1358.91,636.454 1359.47,638.975 1360.03,642.247 1360.59,679.717 1361.15,695.93 1361.71,679.649 1362.27,647.299 1362.83,683.022 1363.39,699.353 1363.94,728.366 1364.5,708.289 1365.06,693.77 1365.62,696.267 1366.18,696.491 1366.74,710.959 1367.3,710.955 1367.86,708.023 1368.42,704.562 1368.98,703.907 1369.54,701.797 1370.1,685.257 1370.66,687.696 1371.21,701.447 1371.77,714.386 1372.33,746.654 1372.89,707.27 1373.45,708.003 1374.01,740.348 1374.57,736.529 1375.13,749.37 1375.69,762.405 1376.25,791.77 1376.81,802.889 1377.37,779.488 1377.93,807.616 1378.49,766.883 1379.04,779.354 1379.6,774.78 1380.16,788.427 1380.72,799.764 1381.28,808.637 1381.84,768.911 1382.4,760.892 1382.96,754.823 1383.52,733.351 1384.08,763.431 1384.64,743.479 1385.2,758.892 1385.76,741.161 1386.31,720.444 1386.87,719.366 1387.43,731.939 1387.99,744.479 1388.55,756.318 1389.11,739.338 1389.67,739.761 1390.23,685.131 1390.79,683.499 1391.35,684.137 1391.91,666.446 1392.47,633.696 1393.03,654.064 1393.58,656.853 1394.14,606.639 1394.7,595.164 1395.26,599.574 1395.82,589.053 1396.38,594.528 1396.94,598.707 1397.5,590.533 1398.06,611.76 1398.62,597.532 1399.18,568.651 1399.74,590.071 1400.3,592.813 1400.86,547.668 1401.41,520.672 1401.97,515.068 1402.53,522.503 1403.09,515.904 1403.65,506.274 1404.21,514.45 1404.77,524.053 1405.33,498.861 1405.89,508.892 1406.45,521.025 1407.01,513.128 1407.57,520.576 1408.13,496.579 1408.68,503.992 1409.24,511.884 1409.8,535.21 1410.36,541.529 1410.92,546.529 1411.48,552.12 1412.04,544.199 1412.6,536.688 1413.16,559.717 1413.72,565.325 1414.28,591.275 1414.84,582.074 1415.4,616.424 1415.95,621.478 1416.51,643.795 1417.07,628.164 1417.63,664.017 1418.19,666.292 1418.75,683.453 1419.31,667.485 1419.87,702.479 1420.43,688.348 1420.99,670.799 1421.55,676.002 1422.11,664.317 1422.67,666.025 1423.23,654.36 1423.78,687.871 1424.34,658.021 1424.9,661.612 1425.46,648.01 1426.02,684.473 1426.58,685.782 1427.14,669.418 1427.7,686.962 1428.26,685.238 1428.82,652.254 1429.38,623.008 1429.94,628.298 1430.5,646.095 1431.05,632.992 1431.61,651.85 1432.17,668.627 1432.73,683.223 1433.29,687.909 1433.85,691.701 1434.41,673.149 1434.97,674.786 1435.53,675.812 1436.09,677.334 1436.65,663.657 1437.21,699.239 1437.77,794.699 1438.33,773.016 1438.88,771.475 1439.44,749.65 1440,760.696 1440.56,760.976 1441.12,775.792 1441.68,789.787 1442.24,748.161 1442.8,758.052 1443.36,721.321 1443.92,753.044 1444.48,751.034 1445.04,763.293 1445.6,754.154 1446.15,763.448 1446.71,775.682 1447.27,788.019 1447.83,781.042 1448.39,809.887 1448.95,800.021 1449.51,792.299 1450.07,739.025 1450.63,732.755 1451.19,744.682 1451.75,725 1452.31,671.947 1452.87,693.114 1453.42,726.267 1453.98,706.046 1454.54,707.094 1455.1,706.541 1455.66,705.336 1456.22,671.305 1456.78,604.584 1457.34,593.649 1457.9,617.724 1458.46,640.527 1459.02,662.191 1459.58,646.297 1460.14,694.873 1460.7,677.658 1461.25,695.971 1461.81,712.047 1462.37,709.736 1462.93,706.896 1463.49,703.684 1464.05,780.655 1464.61,777.782 1465.17,840.451 1465.73,816.745 1466.29,776.475 1466.85,786.873 1467.41,784.006 1467.97,794.777 1468.52,818.519 1469.08,860.243 1469.64,833.987 1470.2,824.405 1470.76,799.332 1471.32,792.25 1471.88,768.862 1472.44,764.207 1473,759.935 1473.56,724.133 1474.12,720.934 1474.68,688.75 1475.24,753.225 1475.79,762.831 1476.35,755.989 1476.91,784.702 1477.47,764.446 1478.03,757.864 1478.59,723.877 1479.15,706.075 1479.71,687.843 1480.27,671.367 1480.83,670.756 1481.39,653.619 1481.95,669.259 1482.51,652.788 1483.07,652.454 1483.62,654.686 1484.18,672.115 1484.74,671.997 1485.3,671.066 1485.86,685.392 1486.42,667.739 1486.98,653.267 1487.54,672.456 1488.1,653.811 1488.66,637.728 1489.22,660.046 1489.78,643.088 1490.34,627.161 1490.89,612.32 1491.45,613.654 1492.01,618.97 1492.57,636.68 1493.13,675.283 1493.69,672.576 1494.25,642.302 1494.81,614.1 1495.37,615.442 1495.93,603.793 1496.49,610.065 1497.05,632.305 1497.61,586.528 1498.16,576.288 1498.72,587.625 1499.28,544.076 1499.84,568.196 1500.4,590.884 1500.96,596.366 1501.52,600.209 1502.08,603.743 1502.64,609.5 1503.2,598.384 1503.76,541.097 1504.32,547.675 1504.88,541.169 1505.44,569.655 1505.99,593.669 1506.55,612.43 1507.11,619.356 1507.67,645.106 1508.23,676.764 1508.79,679.482 1509.35,712.486 1509.91,709.55 1510.47,710.427 1511.03,710.749 1511.59,728.989 1512.15,729.745 1512.71,714.751 1513.26,727.947 1513.82,724.043 1514.38,707.634 1514.94,691.403 1515.5,690.546 1516.06,722.205 1516.62,732.952 1517.18,731.872 1517.74,695.219 1518.3,710.836 1518.86,708.612 1519.42,692.541 1519.98,722.714 1520.53,687.479 1521.09,668.791 1521.65,687.175 1522.21,703.343 1522.77,701.183 1523.33,714.3 1523.89,695.485 1524.45,697.066 1525.01,712.103 1525.57,696.185 1526.13,677.617 1526.69,709.056 1527.25,694.524 1527.81,662.122 1528.36,677.666 1528.92,695.832 1529.48,691.743 1530.04,675.15 1530.6,659.036 1531.16,689.843 1531.72,707.872 1532.28,703.296 1532.84,739.185 1533.4,723.092 1533.96,720.831 1534.52,672.073 1535.08,668.503 1535.63,671.103 1536.19,653.377 1536.75,655.578 1537.31,642.487 1537.87,662.454 1538.43,647.685 1538.99,632.63 1539.55,617.11 1540.11,622.367 1540.67,624.362 1541.23,642.409 1541.79,662.311 1542.35,710.075 1542.9,722.606 1543.46,738.14 1544.02,733.98 1544.58,728.71 1545.14,710.322 1545.7,692.006 1546.26,675.176 1546.82,688.279 1547.38,687.259 1547.94,685.864 1548.5,697.959 1549.06,666.057 1549.62,668.164 1550.18,685.199 1550.73,688.074 1551.29,699.467 1551.85,681.444 1552.41,684.13 1552.97,666.487 1553.53,663.232 1554.09,634.421 1554.65,653.715 1555.21,669.629 1555.77,707.759 1556.33,725.331 1556.89,688.355 1557.45,704.791 1558,732.118 1558.56,713.248 1559.12,679.186 1559.68,694.217 1560.24,706.965 1560.8,689.101 1561.36,702.369 1561.92,716.807 1562.48,698.128 1563.04,712.873 1563.6,692.081 1564.16,672.701 1564.72,674.267 1565.28,693.075 1565.83,676.185 1566.39,660.177 1566.95,660.524 1567.51,629.306 1568.07,630.105 1568.63,649.306 1569.19,668.581 1569.75,650.388 1570.31,655.902 1570.87,674.886 1571.43,691.613 1571.99,724.39 1572.55,720.183 1573.1,718.371 1573.66,730.932 1574.22,729.454 1574.78,727.44 1575.34,762.454 1575.9,774.164 1576.46,752.483 1577.02,736.872 1577.58,766.669 1578.14,776.783 1578.7,740.418 1579.26,735.823 1579.82,745.03 1580.37,758.506 1580.93,752.636 1581.49,750.012 1582.05,712.745 1582.61,723.097 1583.17,706.069 1583.73,685.972 1584.29,669.005 1584.85,701.877 1585.41,685.104 1585.97,703.079 1586.53,720.612 1587.09,717.014 1587.65,716.306 1588.2,701.397 1588.76,735.044 1589.32,716.593 1589.88,730.804 1590.44,710.456 1591,694.141 1591.56,695.252 1592.12,708.814 1592.68,719.904 1593.24,717.508 1593.8,745.195 1594.36,742.088 1594.92,736.945 1595.47,735.606 1596.03,749.027 1596.59,821.117 1597.15,830.933 1597.71,820.792 1598.27,811.076 1598.83,770.887 1599.39,781.526 1599.95,741.973 1600.51,688.039 1601.07,701.715 1601.63,699.729 1602.19,698.831 1602.74,698.9 1603.3,714.225 1603.86,715.688 1604.42,745.333 1604.98,738.068 1605.54,764.872 1606.1,776.461 1606.66,739.211 1607.22,735.615 1607.78,732.238 1608.34,744.644 1608.9,723.834 1609.46,722.573 1610.02,739.108 1610.57,769.699 1611.13,699.634 1611.69,715.958 1612.25,730.93 1612.81,725.683 1613.37,727.83 1613.93,744.56 1614.49,772.096 1615.05,764.496 1615.61,760.161 1616.17,737.124 1616.73,718.788 1617.29,680.917 1617.84,660.983 1618.4,677.174 1618.96,658.649 1619.52,643.7 1620.08,657.705 1620.64,672.716 1621.2,654.633 1621.76,641.096 1622.32,673.875 1622.88,685.366 1623.44,701.742 1624,737.125 1624.56,767.996 1625.11,746.709 1625.67,706.562 1626.23,722.188 1626.79,706.956 1627.35,673.262 1627.91,673.729 1628.47,660.711 1629.03,663.101 1629.59,661.019 1630.15,644.796 1630.71,683.153 1631.27,683.324 1631.83,682.439 1632.39,631.84 1632.94,650.433 1633.5,634.538 1634.06,621.269 1634.62,592.435 1635.18,598.365 1635.74,653.551 1636.3,638.039 1636.86,653.24 1637.42,637.75 1637.98,642.357 1638.54,662.607 1639.1,664.011 1639.66,651.219 1640.21,670.08 1640.77,670.985 1641.33,670.221 1641.89,668.116 1642.45,655.227 1643.01,640.824 1643.57,626.874 1644.13,596.089 1644.69,650.238 1645.25,650.047 1645.81,650.462 1646.37,670.482 1646.93,684.596 1647.48,666.912 1648.04,668.912 1648.6,703.288 1649.16,702.045 1649.72,702.418 1650.28,700.641 1650.84,701.583 1651.4,717.534 1651.96,731.875 1652.52,744.026 1653.08,738.224 1653.64,768.774 1654.2,728.713 1654.76,695.15 1655.31,680.773 1655.87,680.559 1656.43,667.64 1656.99,649.826 1657.55,632.186 1658.11,620.462 1658.67,671.916 1659.23,674.097 1659.79,678.019 1660.35,678.095 1660.91,631.272 1661.47,683.022 1662.03,681.646 1662.58,681.685 1663.14,681.283 1663.7,681.677 1664.26,663.765 1664.82,728.159 1665.38,713.595 1665.94,680.129 1666.5,695.129 1667.06,694.384 1667.62,729.519 1668.18,741.671 1668.74,736.848 1669.3,747.724 1669.85,713.842 1670.41,728.65 1670.97,727.166 1671.53,722.808 1672.09,707.253 1672.65,707.162 1673.21,704.568 1673.77,750.581 1674.33,761.628 1674.89,772.461 1675.45,767.734 1676.01,764.79 1676.57,758.944 1677.13,758.659 1677.68,755.73 1678.24,769.223 1678.8,780.329 1679.36,775.06 1679.92,751.319 1680.48,745.039 1681.04,725.121 1681.6,707.688 1682.16,674.202 1682.72,675.162 1683.28,663.563 1683.84,666.89 1684.4,669.347 1684.95,635.426 1685.51,655.205 1686.07,654.605 1686.63,637.769 1687.19,657.629 1687.75,676.616 1688.31,694.808 1688.87,707.931 1689.43,707.868 1689.99,705.434 1690.55,686.468 1691.11,672.731 1691.67,674.091 1692.23,690.065 1692.78,689.556 1693.34,690.265 1693.9,689.462 1694.46,686.412 1695.02,655.113 1695.58,671.52 1696.14,655.093 1696.7,706.123 1697.26,689.49 1697.82,658.154 1698.38,675.288 1698.94,697.097 1699.5,613.993 1700.05,598.821 1700.61,585.977 1701.17,589.548 1701.73,600.041 1702.29,604.913 1702.85,607.962 1703.41,663.131 1703.97,677.774 1704.53,662.175 1705.09,664.014 1705.65,666.653 1706.21,683.962 1706.77,669.411 1707.32,668.97 1707.88,635.564 1708.44,685.369 1709,714.437 1709.56,647.559 1710.12,667.988 1710.68,699.394 1711.24,698.061 1711.8,664.84 1712.36,651.633 1712.92,667.405 1713.48,687.422 1714.04,688.108 1714.6,688.014 1715.15,708.064 1715.71,690.921 1716.27,671.571 1716.83,687.534 1717.39,685.497 1717.95,684.934 1718.51,686.473 1719.07,687.549 1719.63,703.083 1720.19,684.012 1720.75,668.787 1721.31,686.846 1721.87,686.31 1722.42,671.438 1722.98,670.985 1723.54,670.066 1724.1,671.74 1724.66,640.262 1725.22,626.261 1725.78,613.649 1726.34,601.793 1726.9,589.734 1727.46,641.297 1728.02,658.333 1728.58,642.691 1729.14,705.53 1729.69,772.439 1730.25,765.077 1730.81,771.486 1731.37,813.64 1731.93,806.782 1732.49,819.637 1733.05,830.827 1733.61,839.19 1734.17,843.387 1734.73,820.626 1735.29,824.952 1735.85,817.758 1736.41,827.394 1736.97,805.529 1737.52,782.109 1738.08,765.063 1738.64,746.893 1739.2,729.474 1739.76,727.085 1740.32,724.394 1740.88,722.952 1741.44,750.847 1742,746.827 1742.56,745.588 1743.12,758.561 1743.68,773.729 1744.24,755.036 1744.79,766.621 1745.35,794.909 1745.91,725.178 1746.47,720.408 1747.03,669.259 1747.59,635.942 1748.15,638.128 1748.71,608.363 1749.27,598.263 1749.83,616.213 1750.39,616.312 1750.95,601.109 1751.51,607.979 1752.06,659.353 1752.62,643.858 1753.18,664.205 1753.74,666.838 1754.3,651.274 1754.86,588.981 1755.42,622.749 1755.98,624.155 1756.54,627.583 1757.1,631.198 1757.66,649.569 1758.22,636.849 1758.78,640.298 1759.34,608.368 1759.89,612.897 1760.45,653.628 1761.01,657.973 1761.57,627.038 1762.13,663.617 1762.69,649.574 1763.25,655.541 1763.81,672.796 1764.37,643.328 1764.93,682.592 1765.49,665.867 1766.05,648.319 1766.61,616.943 1767.16,572.515 1767.72,577.465 1768.28,566.114 1768.84,556.586 1769.4,583.384 1769.96,572.538 1770.52,593.051 1771.08,566.244 1771.64,619.905 1772.2,622.943 1772.76,593.333 1773.32,598.203 1773.88,569.838 1774.43,592.819 1774.99,595.724 1775.55,601.791 1776.11,605.482 1776.67,594.327 1777.23,581.955 1777.79,570.268 1778.35,515.726 1778.91,539.356 1779.47,563.725 1780.03,569.839 1780.59,547.462 1781.15,540.933 1781.71,549.539 1782.26,592.753 1782.82,583.125 1783.38,589.351 1783.94,626.237 1784.5,646.25 1785.06,679.489 1785.62,663.856 1786.18,617.529 1786.74,621.135 1787.3,590.685 1787.86,577.736 1788.42,580.794 1788.98,589.255 1789.53,581.065 1790.09,588.755 1790.65,610.497 1791.21,616.584 1791.77,623.815 1792.33,645.904 1792.89,666.056 1793.45,648.604 1794.01,683.74 1794.57,683.627 1795.13,682.776 1795.69,702.793 1796.25,735.075 1796.8,719.047 1797.36,685.133 1797.92,670.747 1798.48,653.828 1799.04,658.235 1799.6,659.713 1800.16,677.681 1800.72,662.986 1801.28,647.185 1801.84,636.473 1802.4,640.451 1802.96,644.132 1803.52,631.95 1804.08,632.965 1804.63,665.381 1805.19,665.149 1805.75,647.824 1806.31,648.349 1806.87,651.177 1807.43,683.191 1807.99,698.752 1808.55,679.834 1809.11,681.784 1809.67,653.317 1810.23,655.899 1810.79,657.077 1811.35,659.934 1811.9,676.369 1812.46,656.19 1813.02,661.522 1813.58,647.01 1814.14,649.113 1814.7,703.051 1815.26,704.096 1815.82,717.699 1816.38,744.753 1816.94,744.54 1817.5,742.43 1818.06,783.154 1818.62,745.21 1819.18,742.654 1819.73,739.783 1820.29,740.885 1820.85,723.368 1821.41,769.909 1821.97,750.866 1822.53,713.299 1823.09,708.381 1823.65,738.289 1824.21,763.594 1824.77,760.397 1825.33,754.602 1825.89,785.318 1826.45,765.694 1827,761.595 1827.56,722.565 1828.12,720.065 1828.68,733.409 1829.24,713.052 1829.8,694.083 1830.36,709.112 1830.92,705.546 1831.48,722.315 1832.04,735.684 1832.6,715.545 1833.16,744.707 1833.72,758.62 1834.27,753.379 1834.83,766.584 1835.39,777.712 1835.95,772.014 1836.51,758.069 1837.07,734.159 1837.63,715.466 1838.19,726.789 \"/>\n<path clip-path=\"url(#clip443)\" d=\"M720.247 690.014 L720.806 690.014 L721.365 690.014 L721.924 690.014 L722.484 690.014 L723.043 690.014 L723.602 690.014 L724.161 690.014 L724.721 690.014 L725.28 690.014 L725.839 690.014 L726.398 690.014 L726.958 690.014 L727.517 690.014 L728.076 690.014 L728.635 690.014 L729.195 690.014 L729.754 690.014 L730.313 690.014 L730.872 690.014 L731.432 690.014 L731.991 690.014 L732.55 690.014 L733.109 690.014 L733.669 690.014 L734.228 690.014 L734.787 690.014 L735.346 690.014 L735.906 690.014 L736.465 690.014 L737.024 690.014 L737.583 690.014 L738.143 690.014 L738.702 690.014 L739.261 690.014 L739.82 690.014 L740.38 690.014 L740.939 690.014 L741.498 690.014 L742.057 690.014 L742.617 690.014 L743.176 690.014 L743.735 690.014 L744.294 690.014 L744.854 690.014 L745.413 690.014 L745.972 690.014 L746.531 690.014 L747.091 690.014 L747.65 690.014 L748.209 690.014 L748.768 690.014 L749.328 690.014 L749.887 690.014 L750.446 690.014 L751.005 690.014 L751.565 690.014 L752.124 690.014 L752.683 690.014 L753.242 690.014 L753.802 690.014 L754.361 690.014 L754.92 690.014 L755.479 690.014 L756.039 690.014 L756.598 690.014 L757.157 690.014 L757.716 690.014 L758.276 690.014 L758.835 690.014 L759.394 690.014 L759.953 690.014 L760.513 690.014 L761.072 690.014 L761.631 690.014 L762.19 690.014 L762.75 690.014 L763.309 690.014 L763.868 690.014 L764.427 690.014 L764.987 690.014 L765.546 690.014 L766.105 690.014 L766.664 690.014 L767.224 690.014 L767.783 690.014 L768.342 690.014 L768.901 690.014 L769.461 690.014 L770.02 690.014 L770.579 690.014 L771.138 690.014 L771.698 690.014 L772.257 690.014 L772.816 690.014 L773.375 690.014 L773.935 690.014 L774.494 690.014 L775.053 690.014 L775.612 690.014 L776.172 690.014 L776.731 690.014 L777.29 690.014 L777.849 690.014 L778.409 690.014 L778.968 690.014 L779.527 690.014 L780.086 690.014 L780.646 690.014 L781.205 690.014 L781.764 690.014 L782.323 690.014 L782.883 690.014 L783.442 690.014 L784.001 690.014 L784.56 690.014 L785.12 690.014 L785.679 690.014 L786.238 690.014 L786.797 690.014 L787.357 690.014 L787.916 690.014 L788.475 690.014 L789.034 690.014 L789.594 690.014 L790.153 690.014 L790.712 690.014 L791.271 690.014 L791.831 690.014 L792.39 690.014 L792.949 690.014 L793.508 690.014 L794.068 690.014 L794.627 690.014 L795.186 690.014 L795.745 690.014 L796.305 690.014 L796.864 690.014 L797.423 690.014 L797.982 690.014 L798.542 690.014 L799.101 690.014 L799.66 690.014 L800.219 690.014 L800.779 690.014 L801.338 690.014 L801.897 690.014 L802.456 690.014 L803.016 690.014 L803.575 690.014 L804.134 690.014 L804.693 690.014 L805.253 690.014 L805.812 690.014 L806.371 690.014 L806.931 690.014 L807.49 690.014 L808.049 690.014 L808.608 690.014 L809.168 690.014 L809.727 690.014 L810.286 690.014 L810.845 690.014 L811.405 690.014 L811.964 690.014 L812.523 690.014 L813.082 690.014 L813.642 690.014 L814.201 690.014 L814.76 690.014 L815.319 690.014 L815.879 690.014 L816.438 690.014 L816.997 690.014 L817.556 690.014 L818.116 690.014 L818.675 690.014 L819.234 690.014 L819.793 690.014 L820.353 690.014 L820.912 690.014 L821.471 690.014 L822.03 690.014 L822.59 690.014 L823.149 690.014 L823.708 690.014 L824.267 690.014 L824.827 690.014 L825.386 690.014 L825.945 690.014 L826.504 690.014 L827.064 690.014 L827.623 690.014 L828.182 690.014 L828.741 690.014 L829.301 690.014 L829.86 690.014 L830.419 690.014 L830.978 690.014 L831.538 690.014 L832.097 690.014 L832.656 690.014 L833.215 690.014 L833.775 690.014 L834.334 690.014 L834.893 690.014 L835.452 690.014 L836.012 690.014 L836.571 690.014 L837.13 690.014 L837.689 690.014 L838.249 690.014 L838.808 690.014 L839.367 690.014 L839.926 690.014 L840.486 690.014 L841.045 690.014 L841.604 690.014 L842.163 690.014 L842.723 690.014 L843.282 690.014 L843.841 690.014 L844.4 690.014 L844.96 690.014 L845.519 690.014 L846.078 690.014 L846.637 690.014 L847.197 690.014 L847.756 690.014 L848.315 690.014 L848.874 690.014 L849.434 690.014 L849.993 690.014 L850.552 690.014 L851.111 690.014 L851.671 690.014 L852.23 690.014 L852.789 690.014 L853.348 690.014 L853.908 690.014 L854.467 690.014 L855.026 690.014 L855.585 690.014 L856.145 690.014 L856.704 690.014 L857.263 690.014 L857.822 690.014 L858.382 690.014 L858.941 690.014 L859.5 690.014 L860.059 690.014 L860.619 690.014 L861.178 690.014 L861.737 690.014 L862.296 690.014 L862.856 690.014 L863.415 690.014 L863.974 690.014 L864.533 690.014 L865.093 690.014 L865.652 690.014 L866.211 690.014 L866.77 690.014 L867.33 690.014 L867.889 690.014 L868.448 690.014 L869.007 690.014 L869.567 690.014 L870.126 690.014 L870.685 690.014 L871.244 690.014 L871.804 690.014 L872.363 690.014 L872.922 690.014 L873.481 690.014 L874.041 690.014 L874.6 690.014 L875.159 690.014 L875.718 690.014 L876.278 690.014 L876.837 690.014 L877.396 690.014 L877.955 690.014 L878.515 690.014 L879.074 690.014 L879.633 690.014 L880.192 690.014 L880.752 690.014 L881.311 690.014 L881.87 690.014 L882.429 690.014 L882.989 690.014 L883.548 690.014 L884.107 690.014 L884.666 690.014 L885.226 690.014 L885.785 690.014 L886.344 690.014 L886.903 690.014 L887.463 690.014 L888.022 690.014 L888.581 690.014 L889.14 690.014 L889.7 690.014 L890.259 690.014 L890.818 690.014 L891.377 690.014 L891.937 690.014 L892.496 690.014 L893.055 690.014 L893.614 690.014 L894.174 690.014 L894.733 690.014 L895.292 690.014 L895.851 690.014 L896.411 690.014 L896.97 690.014 L897.529 690.014 L898.088 690.014 L898.648 690.014 L899.207 690.014 L899.766 690.014 L900.325 690.014 L900.885 690.014 L901.444 690.014 L902.003 690.014 L902.562 690.014 L903.122 690.014 L903.681 690.014 L904.24 690.014 L904.799 690.014 L905.359 690.014 L905.918 690.014 L906.477 690.014 L907.036 690.014 L907.596 690.014 L908.155 690.014 L908.714 690.014 L909.273 690.014 L909.833 690.014 L910.392 690.014 L910.951 690.014 L911.51 690.014 L912.07 690.014 L912.629 690.014 L913.188 690.014 L913.747 690.014 L914.307 690.014 L914.866 690.014 L915.425 690.014 L915.984 690.014 L916.544 690.014 L917.103 690.014 L917.662 690.014 L918.221 690.014 L918.781 690.014 L919.34 690.014 L919.899 690.014 L920.458 690.014 L921.018 690.014 L921.577 690.014 L922.136 690.014 L922.695 690.014 L923.255 690.014 L923.814 690.014 L924.373 690.014 L924.932 690.014 L925.492 690.014 L926.051 690.014 L926.61 690.014 L927.169 690.014 L927.729 690.014 L928.288 690.014 L928.847 690.014 L929.406 690.014 L929.966 690.014 L930.525 690.014 L931.084 690.014 L931.644 690.014 L932.203 690.014 L932.762 690.014 L933.321 690.014 L933.881 690.014 L934.44 690.014 L934.999 690.014 L935.558 690.014 L936.118 690.014 L936.677 690.014 L937.236 690.014 L937.795 690.014 L938.355 690.014 L938.914 690.014 L939.473 690.014 L940.032 690.014 L940.592 690.014 L941.151 690.014 L941.71 690.014 L942.269 690.014 L942.829 690.014 L943.388 690.014 L943.947 690.014 L944.506 690.014 L945.066 690.014 L945.625 690.014 L946.184 690.014 L946.743 690.014 L947.303 690.014 L947.862 690.014 L948.421 690.014 L948.98 690.014 L949.54 690.014 L950.099 690.014 L950.658 690.014 L951.217 690.014 L951.777 690.014 L952.336 690.014 L952.895 690.014 L953.454 690.014 L954.014 690.014 L954.573 690.014 L955.132 690.014 L955.691 690.014 L956.251 690.014 L956.81 690.014 L957.369 690.014 L957.928 690.014 L958.488 690.014 L959.047 690.014 L959.606 690.014 L960.165 690.014 L960.725 690.014 L961.284 690.014 L961.843 690.014 L962.402 690.014 L962.962 690.014 L963.521 690.014 L964.08 690.014 L964.639 690.014 L965.199 690.014 L965.758 690.014 L966.317 690.014 L966.876 690.014 L967.436 690.014 L967.995 690.014 L968.554 690.014 L969.113 690.014 L969.673 690.014 L970.232 690.014 L970.791 690.014 L971.35 690.014 L971.91 690.014 L972.469 690.014 L973.028 690.014 L973.587 690.014 L974.147 690.014 L974.706 690.014 L975.265 690.014 L975.824 690.014 L976.384 690.014 L976.943 690.014 L977.502 690.014 L978.061 690.014 L978.621 690.014 L979.18 690.014 L979.739 690.014 L980.298 690.014 L980.858 690.014 L981.417 690.014 L981.976 690.014 L982.535 690.014 L983.095 690.014 L983.654 690.014 L984.213 690.014 L984.772 690.014 L985.332 690.014 L985.891 690.014 L986.45 690.014 L987.009 690.014 L987.569 690.014 L988.128 690.014 L988.687 690.014 L989.246 690.014 L989.806 690.014 L990.365 690.014 L990.924 690.014 L991.483 690.014 L992.043 690.014 L992.602 690.014 L993.161 690.014 L993.72 690.014 L994.28 690.014 L994.839 690.014 L995.398 690.014 L995.957 690.014 L996.517 690.014 L997.076 690.014 L997.635 690.014 L998.194 690.014 L998.754 690.014 L999.313 690.014 L999.872 690.014 L1000.43 690.014 L1000.99 690.014 L1001.55 690.014 L1002.11 690.014 L1002.67 690.014 L1003.23 690.014 L1003.79 690.014 L1004.35 690.014 L1004.91 690.014 L1005.46 690.014 L1006.02 690.014 L1006.58 690.014 L1007.14 690.014 L1007.7 690.014 L1008.26 690.014 L1008.82 690.014 L1009.38 690.014 L1009.94 690.014 L1010.5 690.014 L1011.06 690.014 L1011.62 690.014 L1012.18 690.014 L1012.73 690.014 L1013.29 690.014 L1013.85 690.014 L1014.41 690.014 L1014.97 690.014 L1015.53 690.014 L1016.09 690.014 L1016.65 690.014 L1017.21 690.014 L1017.77 690.014 L1018.33 690.014 L1018.89 690.014 L1019.45 690.014 L1020.01 690.014 L1020.56 690.014 L1021.12 690.014 L1021.68 690.014 L1022.24 690.014 L1022.8 690.014 L1023.36 690.014 L1023.92 690.014 L1024.48 690.014 L1025.04 690.014 L1025.6 690.014 L1026.16 690.014 L1026.72 690.014 L1027.28 690.014 L1027.83 690.014 L1028.39 690.014 L1028.95 690.014 L1029.51 690.014 L1030.07 690.014 L1030.63 690.014 L1031.19 690.014 L1031.75 690.014 L1032.31 690.014 L1032.87 690.014 L1033.43 690.014 L1033.99 690.014 L1034.55 690.014 L1035.1 690.014 L1035.66 690.014 L1036.22 690.014 L1036.78 690.014 L1037.34 690.014 L1037.9 690.014 L1038.46 690.014 L1039.02 690.014 L1039.58 690.014 L1040.14 690.014 L1040.7 690.014 L1041.26 690.014 L1041.82 690.014 L1042.38 690.014 L1042.93 690.014 L1043.49 690.014 L1044.05 690.014 L1044.61 690.014 L1045.17 690.014 L1045.73 690.014 L1046.29 690.014 L1046.85 690.014 L1047.41 690.014 L1047.97 690.014 L1048.53 690.014 L1049.09 690.014 L1049.65 690.014 L1050.2 690.014 L1050.76 690.014 L1051.32 690.014 L1051.88 690.014 L1052.44 690.014 L1053 690.014 L1053.56 690.014 L1054.12 690.014 L1054.68 690.014 L1055.24 690.014 L1055.8 690.014 L1056.36 690.014 L1056.92 690.014 L1057.48 690.014 L1058.03 690.014 L1058.59 690.014 L1059.15 690.014 L1059.71 690.014 L1060.27 690.014 L1060.83 690.014 L1061.39 690.014 L1061.95 690.014 L1062.51 690.014 L1063.07 690.014 L1063.63 690.014 L1064.19 690.014 L1064.75 690.014 L1065.3 690.014 L1065.86 690.014 L1066.42 690.014 L1066.98 690.014 L1067.54 690.014 L1068.1 690.014 L1068.66 690.014 L1069.22 690.014 L1069.78 690.014 L1070.34 690.014 L1070.9 690.014 L1071.46 690.014 L1072.02 690.014 L1072.57 690.014 L1073.13 690.014 L1073.69 690.014 L1074.25 690.014 L1074.81 690.014 L1075.37 690.014 L1075.93 690.014 L1076.49 690.014 L1077.05 690.014 L1077.61 690.014 L1078.17 690.014 L1078.73 690.014 L1079.29 690.014 L1079.85 690.014 L1080.4 690.014 L1080.96 690.014 L1081.52 690.014 L1082.08 690.014 L1082.64 690.014 L1083.2 690.014 L1083.76 690.014 L1084.32 690.014 L1084.88 690.014 L1085.44 690.014 L1086 690.014 L1086.56 690.014 L1087.12 690.014 L1087.67 690.014 L1088.23 690.014 L1088.79 690.014 L1089.35 690.014 L1089.91 690.014 L1090.47 690.014 L1091.03 690.014 L1091.59 690.014 L1092.15 690.014 L1092.71 690.014 L1093.27 690.014 L1093.83 690.014 L1094.39 690.014 L1094.94 690.014 L1095.5 690.014 L1096.06 690.014 L1096.62 690.014 L1097.18 690.014 L1097.74 690.014 L1098.3 690.014 L1098.86 690.014 L1099.42 690.014 L1099.98 690.014 L1100.54 690.014 L1101.1 690.014 L1101.66 690.014 L1102.22 690.014 L1102.77 690.014 L1103.33 690.014 L1103.89 690.014 L1104.45 690.014 L1105.01 690.014 L1105.57 690.014 L1106.13 690.014 L1106.69 690.014 L1107.25 690.014 L1107.81 690.014 L1108.37 690.014 L1108.93 690.014 L1109.49 690.014 L1110.04 690.014 L1110.6 690.014 L1111.16 690.014 L1111.72 690.014 L1112.28 690.014 L1112.84 690.014 L1113.4 690.014 L1113.96 690.014 L1114.52 690.014 L1115.08 690.014 L1115.64 690.014 L1116.2 690.014 L1116.76 690.014 L1117.31 690.014 L1117.87 690.014 L1118.43 690.014 L1118.99 690.014 L1119.55 690.014 L1120.11 690.014 L1120.67 690.014 L1121.23 690.014 L1121.79 690.014 L1122.35 690.014 L1122.91 690.014 L1123.47 690.014 L1124.03 690.014 L1124.59 690.014 L1125.14 690.014 L1125.7 690.014 L1126.26 690.014 L1126.82 690.014 L1127.38 690.014 L1127.94 690.014 L1128.5 690.014 L1129.06 690.014 L1129.62 690.014 L1130.18 690.014 L1130.74 690.014 L1131.3 690.014 L1131.86 690.014 L1132.41 690.014 L1132.97 690.014 L1133.53 690.014 L1134.09 690.014 L1134.65 690.014 L1135.21 690.014 L1135.77 690.014 L1136.33 690.014 L1136.89 690.014 L1137.45 690.014 L1138.01 690.014 L1138.57 690.014 L1139.13 690.014 L1139.68 690.014 L1140.24 690.014 L1140.8 690.014 L1141.36 690.014 L1141.92 690.014 L1142.48 690.014 L1143.04 690.014 L1143.6 690.014 L1144.16 690.014 L1144.72 690.014 L1145.28 690.014 L1145.84 690.014 L1146.4 690.014 L1146.96 690.014 L1147.51 690.014 L1148.07 690.014 L1148.63 690.014 L1149.19 690.014 L1149.75 690.014 L1150.31 690.014 L1150.87 690.014 L1151.43 690.014 L1151.99 690.014 L1152.55 690.014 L1153.11 690.014 L1153.67 690.014 L1154.23 690.014 L1154.78 690.014 L1155.34 690.014 L1155.9 690.014 L1156.46 690.014 L1157.02 690.014 L1157.58 690.014 L1158.14 690.014 L1158.7 690.014 L1159.26 690.014 L1159.82 690.014 L1160.38 690.014 L1160.94 690.014 L1161.5 690.014 L1162.05 690.014 L1162.61 690.014 L1163.17 690.014 L1163.73 690.014 L1164.29 690.014 L1164.85 690.014 L1165.41 690.014 L1165.97 690.014 L1166.53 690.014 L1167.09 690.014 L1167.65 690.014 L1168.21 690.014 L1168.77 690.014 L1169.33 690.014 L1169.88 690.014 L1170.44 690.014 L1171 690.014 L1171.56 690.014 L1172.12 690.014 L1172.68 690.014 L1173.24 690.014 L1173.8 690.014 L1174.36 690.014 L1174.92 690.014 L1175.48 690.014 L1176.04 690.014 L1176.6 690.014 L1177.15 690.014 L1177.71 690.014 L1178.27 690.014 L1178.83 690.014 L1179.39 690.014 L1179.95 690.014 L1180.51 690.014 L1181.07 690.014 L1181.63 690.014 L1182.19 690.014 L1182.75 690.014 L1183.31 690.014 L1183.87 690.014 L1184.43 690.014 L1184.98 690.014 L1185.54 690.014 L1186.1 690.014 L1186.66 690.014 L1187.22 690.014 L1187.78 690.014 L1188.34 690.014 L1188.9 690.014 L1189.46 690.014 L1190.02 690.014 L1190.58 690.014 L1191.14 690.014 L1191.7 690.014 L1192.25 690.014 L1192.81 690.014 L1193.37 690.014 L1193.93 690.014 L1194.49 690.014 L1195.05 690.014 L1195.61 690.014 L1196.17 690.014 L1196.73 690.014 L1197.29 690.014 L1197.85 690.014 L1198.41 690.014 L1198.97 690.014 L1199.52 690.014 L1200.08 690.014 L1200.64 690.014 L1201.2 690.014 L1201.76 690.014 L1202.32 690.014 L1202.88 690.014 L1203.44 690.014 L1204 690.014 L1204.56 690.014 L1205.12 690.014 L1205.68 690.014 L1206.24 690.014 L1206.8 690.014 L1207.35 690.014 L1207.91 690.014 L1208.47 690.014 L1209.03 690.014 L1209.59 690.014 L1210.15 690.014 L1210.71 690.014 L1211.27 690.014 L1211.83 690.014 L1212.39 690.014 L1212.95 690.014 L1213.51 690.014 L1214.07 690.014 L1214.62 690.014 L1215.18 690.014 L1215.74 690.014 L1216.3 690.014 L1216.86 690.014 L1217.42 690.014 L1217.98 690.014 L1218.54 690.014 L1219.1 690.014 L1219.66 690.014 L1220.22 690.014 L1220.78 690.014 L1221.34 690.014 L1221.89 690.014 L1222.45 690.014 L1223.01 690.014 L1223.57 690.014 L1224.13 690.014 L1224.69 690.014 L1225.25 690.014 L1225.81 690.014 L1226.37 690.014 L1226.93 690.014 L1227.49 690.014 L1228.05 690.014 L1228.61 690.014 L1229.17 690.014 L1229.72 690.014 L1230.28 690.014 L1230.84 690.014 L1231.4 690.014 L1231.96 690.014 L1232.52 690.014 L1233.08 690.014 L1233.64 690.014 L1234.2 690.014 L1234.76 690.014 L1235.32 690.014 L1235.88 690.014 L1236.44 690.014 L1236.99 690.014 L1237.55 690.014 L1238.11 690.014 L1238.67 690.014 L1239.23 690.014 L1239.79 690.014 L1240.35 690.014 L1240.91 690.014 L1241.47 690.014 L1242.03 690.014 L1242.59 690.014 L1243.15 690.014 L1243.71 690.014 L1244.26 690.014 L1244.82 690.014 L1245.38 690.014 L1245.94 690.014 L1246.5 690.014 L1247.06 690.014 L1247.62 690.014 L1248.18 690.014 L1248.74 690.014 L1249.3 690.014 L1249.86 690.014 L1250.42 690.014 L1250.98 690.014 L1251.54 690.014 L1252.09 690.014 L1252.65 690.014 L1253.21 690.014 L1253.77 690.014 L1254.33 690.014 L1254.89 690.014 L1255.45 690.014 L1256.01 690.014 L1256.57 690.014 L1257.13 690.014 L1257.69 690.014 L1258.25 690.014 L1258.81 690.014 L1259.36 690.014 L1259.92 690.014 L1260.48 690.014 L1261.04 690.014 L1261.6 690.014 L1262.16 690.014 L1262.72 690.014 L1263.28 690.014 L1263.84 690.014 L1264.4 690.014 L1264.96 690.014 L1265.52 690.014 L1266.08 690.014 L1266.63 690.014 L1267.19 690.014 L1267.75 690.014 L1268.31 690.014 L1268.87 690.014 L1269.43 690.014 L1269.99 690.014 L1270.55 690.014 L1271.11 690.014 L1271.67 690.014 L1272.23 690.014 L1272.79 690.014 L1273.35 690.014 L1273.91 690.014 L1274.46 690.014 L1275.02 690.014 L1275.58 690.014 L1276.14 690.014 L1276.7 690.014 L1277.26 690.014 L1277.82 690.014 L1278.38 690.014 L1278.94 690.014 L1279.5 690.014 L1280.06 690.014 L1280.62 690.014 L1281.18 690.014 L1281.73 690.014 L1282.29 690.014 L1282.85 690.014 L1283.41 690.014 L1283.97 690.014 L1284.53 690.014 L1285.09 690.014 L1285.65 690.014 L1286.21 690.014 L1286.77 690.014 L1287.33 690.014 L1287.89 690.014 L1288.45 690.014 L1289 690.014 L1289.56 690.014 L1290.12 690.014 L1290.68 690.014 L1291.24 690.014 L1291.8 690.014 L1292.36 690.014 L1292.92 690.014 L1293.48 690.014 L1294.04 690.014 L1294.6 690.014 L1295.16 690.014 L1295.72 690.014 L1296.28 690.014 L1296.83 690.014 L1297.39 690.014 L1297.95 690.014 L1298.51 690.014 L1299.07 690.014 L1299.63 690.014 L1300.19 690.014 L1300.75 690.014 L1301.31 690.014 L1301.87 690.014 L1302.43 690.014 L1302.99 690.014 L1303.55 690.014 L1304.1 690.014 L1304.66 690.014 L1305.22 690.014 L1305.78 690.014 L1306.34 690.014 L1306.9 690.014 L1307.46 690.014 L1308.02 690.014 L1308.58 690.014 L1309.14 690.014 L1309.7 690.014 L1310.26 690.014 L1310.82 690.014 L1311.38 690.014 L1311.93 690.014 L1312.49 690.014 L1313.05 690.014 L1313.61 690.014 L1314.17 690.014 L1314.73 690.014 L1315.29 690.014 L1315.85 690.014 L1316.41 690.014 L1316.97 690.014 L1317.53 690.014 L1318.09 690.014 L1318.65 690.014 L1319.2 690.014 L1319.76 690.014 L1320.32 690.014 L1320.88 690.014 L1321.44 690.014 L1322 690.014 L1322.56 690.014 L1323.12 690.014 L1323.68 690.014 L1324.24 690.014 L1324.8 690.014 L1325.36 690.014 L1325.92 690.014 L1326.47 690.014 L1327.03 690.014 L1327.59 690.014 L1328.15 690.014 L1328.71 690.014 L1329.27 690.014 L1329.83 690.014 L1330.39 690.014 L1330.95 690.014 L1331.51 690.014 L1332.07 690.014 L1332.63 690.014 L1333.19 690.014 L1333.75 690.014 L1334.3 690.014 L1334.86 690.014 L1335.42 690.014 L1335.98 690.014 L1336.54 690.014 L1337.1 690.014 L1337.66 690.014 L1338.22 690.014 L1338.78 690.014 L1339.34 690.014 L1339.9 690.014 L1340.46 690.014 L1341.02 690.014 L1341.57 690.014 L1342.13 690.014 L1342.69 690.014 L1343.25 690.014 L1343.81 690.014 L1344.37 690.014 L1344.93 690.014 L1345.49 690.014 L1346.05 690.014 L1346.61 690.014 L1347.17 690.014 L1347.73 690.014 L1348.29 690.014 L1348.84 690.014 L1349.4 690.014 L1349.96 690.014 L1350.52 690.014 L1351.08 690.014 L1351.64 690.014 L1352.2 690.014 L1352.76 690.014 L1353.32 690.014 L1353.88 690.014 L1354.44 690.014 L1355 690.014 L1355.56 690.014 L1356.12 690.014 L1356.67 690.014 L1357.23 690.014 L1357.79 690.014 L1358.35 690.014 L1358.91 690.014 L1359.47 690.014 L1360.03 690.014 L1360.59 690.014 L1361.15 690.014 L1361.71 690.014 L1362.27 690.014 L1362.83 690.014 L1363.39 690.014 L1363.94 690.014 L1364.5 690.014 L1365.06 690.014 L1365.62 690.014 L1366.18 690.014 L1366.74 690.014 L1367.3 690.014 L1367.86 690.014 L1368.42 690.014 L1368.98 690.014 L1369.54 690.014 L1370.1 690.014 L1370.66 690.014 L1371.21 690.014 L1371.77 690.014 L1372.33 690.014 L1372.89 690.014 L1373.45 690.014 L1374.01 690.014 L1374.57 690.014 L1375.13 690.014 L1375.69 690.014 L1376.25 690.014 L1376.81 690.014 L1377.37 690.014 L1377.93 690.014 L1378.49 690.014 L1379.04 690.014 L1379.6 690.014 L1380.16 690.014 L1380.72 690.014 L1381.28 690.014 L1381.84 690.014 L1382.4 690.014 L1382.96 690.014 L1383.52 690.014 L1384.08 690.014 L1384.64 690.014 L1385.2 690.014 L1385.76 690.014 L1386.31 690.014 L1386.87 690.014 L1387.43 690.014 L1387.99 690.014 L1388.55 690.014 L1389.11 690.014 L1389.67 690.014 L1390.23 690.014 L1390.79 690.014 L1391.35 690.014 L1391.91 690.014 L1392.47 690.014 L1393.03 690.014 L1393.58 690.014 L1394.14 690.014 L1394.7 690.014 L1395.26 690.014 L1395.82 690.014 L1396.38 690.014 L1396.94 690.014 L1397.5 690.014 L1398.06 690.014 L1398.62 690.014 L1399.18 690.014 L1399.74 690.014 L1400.3 690.014 L1400.86 690.014 L1401.41 690.014 L1401.97 690.014 L1402.53 690.014 L1403.09 690.014 L1403.65 690.014 L1404.21 690.014 L1404.77 690.014 L1405.33 690.014 L1405.89 690.014 L1406.45 690.014 L1407.01 690.014 L1407.57 690.014 L1408.13 690.014 L1408.68 690.014 L1409.24 690.014 L1409.8 690.014 L1410.36 690.014 L1410.92 690.014 L1411.48 690.014 L1412.04 690.014 L1412.6 690.014 L1413.16 690.014 L1413.72 690.014 L1414.28 690.014 L1414.84 690.014 L1415.4 690.014 L1415.95 690.014 L1416.51 690.014 L1417.07 690.014 L1417.63 690.014 L1418.19 690.014 L1418.75 690.014 L1419.31 690.014 L1419.87 690.014 L1420.43 690.014 L1420.99 690.014 L1421.55 690.014 L1422.11 690.014 L1422.67 690.014 L1423.23 690.014 L1423.78 690.014 L1424.34 690.014 L1424.9 690.014 L1425.46 690.014 L1426.02 690.014 L1426.58 690.014 L1427.14 690.014 L1427.7 690.014 L1428.26 690.014 L1428.82 690.014 L1429.38 690.014 L1429.94 690.014 L1430.5 690.014 L1431.05 690.014 L1431.61 690.014 L1432.17 690.014 L1432.73 690.014 L1433.29 690.014 L1433.85 690.014 L1434.41 690.014 L1434.97 690.014 L1435.53 690.014 L1436.09 690.014 L1436.65 690.014 L1437.21 690.014 L1437.77 690.014 L1438.33 690.014 L1438.88 690.014 L1439.44 690.014 L1440 690.014 L1440.56 690.014 L1441.12 690.014 L1441.68 690.014 L1442.24 690.014 L1442.8 690.014 L1443.36 690.014 L1443.92 690.014 L1444.48 690.014 L1445.04 690.014 L1445.6 690.014 L1446.15 690.014 L1446.71 690.014 L1447.27 690.014 L1447.83 690.014 L1448.39 690.014 L1448.95 690.014 L1449.51 690.014 L1450.07 690.014 L1450.63 690.014 L1451.19 690.014 L1451.75 690.014 L1452.31 690.014 L1452.87 690.014 L1453.42 690.014 L1453.98 690.014 L1454.54 690.014 L1455.1 690.014 L1455.66 690.014 L1456.22 690.014 L1456.78 690.014 L1457.34 690.014 L1457.9 690.014 L1458.46 690.014 L1459.02 690.014 L1459.58 690.014 L1460.14 690.014 L1460.7 690.014 L1461.25 690.014 L1461.81 690.014 L1462.37 690.014 L1462.93 690.014 L1463.49 690.014 L1464.05 690.014 L1464.61 690.014 L1465.17 690.014 L1465.73 690.014 L1466.29 690.014 L1466.85 690.014 L1467.41 690.014 L1467.97 690.014 L1468.52 690.014 L1469.08 690.014 L1469.64 690.014 L1470.2 690.014 L1470.76 690.014 L1471.32 690.014 L1471.88 690.014 L1472.44 690.014 L1473 690.014 L1473.56 690.014 L1474.12 690.014 L1474.68 690.014 L1475.24 690.014 L1475.79 690.014 L1476.35 690.014 L1476.91 690.014 L1477.47 690.014 L1478.03 690.014 L1478.59 690.014 L1479.15 690.014 L1479.71 690.014 L1480.27 690.014 L1480.83 690.014 L1481.39 690.014 L1481.95 690.014 L1482.51 690.014 L1483.07 690.014 L1483.62 690.014 L1484.18 690.014 L1484.74 690.014 L1485.3 690.014 L1485.86 690.014 L1486.42 690.014 L1486.98 690.014 L1487.54 690.014 L1488.1 690.014 L1488.66 690.014 L1489.22 690.014 L1489.78 690.014 L1490.34 690.014 L1490.89 690.014 L1491.45 690.014 L1492.01 690.014 L1492.57 690.014 L1493.13 690.014 L1493.69 690.014 L1494.25 690.014 L1494.81 690.014 L1495.37 690.014 L1495.93 690.014 L1496.49 690.014 L1497.05 690.014 L1497.61 690.014 L1498.16 690.014 L1498.72 690.014 L1499.28 690.014 L1499.84 690.014 L1500.4 690.014 L1500.96 690.014 L1501.52 690.014 L1502.08 690.014 L1502.64 690.014 L1503.2 690.014 L1503.76 690.014 L1504.32 690.014 L1504.88 690.014 L1505.44 690.014 L1505.99 690.014 L1506.55 690.014 L1507.11 690.014 L1507.67 690.014 L1508.23 690.014 L1508.79 690.014 L1509.35 690.014 L1509.91 690.014 L1510.47 690.014 L1511.03 690.014 L1511.59 690.014 L1512.15 690.014 L1512.71 690.014 L1513.26 690.014 L1513.82 690.014 L1514.38 690.014 L1514.94 690.014 L1515.5 690.014 L1516.06 690.014 L1516.62 690.014 L1517.18 690.014 L1517.74 690.014 L1518.3 690.014 L1518.86 690.014 L1519.42 690.014 L1519.98 690.014 L1520.53 690.014 L1521.09 690.014 L1521.65 690.014 L1522.21 690.014 L1522.77 690.014 L1523.33 690.014 L1523.89 690.014 L1524.45 690.014 L1525.01 690.014 L1525.57 690.014 L1526.13 690.014 L1526.69 690.014 L1527.25 690.014 L1527.81 690.014 L1528.36 690.014 L1528.92 690.014 L1529.48 690.014 L1530.04 690.014 L1530.6 690.014 L1531.16 690.014 L1531.72 690.014 L1532.28 690.014 L1532.84 690.014 L1533.4 690.014 L1533.96 690.014 L1534.52 690.014 L1535.08 690.014 L1535.63 690.014 L1536.19 690.014 L1536.75 690.014 L1537.31 690.014 L1537.87 690.014 L1538.43 690.014 L1538.99 690.014 L1539.55 690.014 L1540.11 690.014 L1540.67 690.014 L1541.23 690.014 L1541.79 690.014 L1542.35 690.014 L1542.9 690.014 L1543.46 690.014 L1544.02 690.014 L1544.58 690.014 L1545.14 690.014 L1545.7 690.014 L1546.26 690.014 L1546.82 690.014 L1547.38 690.014 L1547.94 690.014 L1548.5 690.014 L1549.06 690.014 L1549.62 690.014 L1550.18 690.014 L1550.73 690.014 L1551.29 690.014 L1551.85 690.014 L1552.41 690.014 L1552.97 690.014 L1553.53 690.014 L1554.09 690.014 L1554.65 690.014 L1555.21 690.014 L1555.77 690.014 L1556.33 690.014 L1556.89 690.014 L1557.45 690.014 L1558 690.014 L1558.56 690.014 L1559.12 690.014 L1559.68 690.014 L1560.24 690.014 L1560.8 690.014 L1561.36 690.014 L1561.92 690.014 L1562.48 690.014 L1563.04 690.014 L1563.6 690.014 L1564.16 690.014 L1564.72 690.014 L1565.28 690.014 L1565.83 690.014 L1566.39 690.014 L1566.95 690.014 L1567.51 690.014 L1568.07 690.014 L1568.63 690.014 L1569.19 690.014 L1569.75 690.014 L1570.31 690.014 L1570.87 690.014 L1571.43 690.014 L1571.99 690.014 L1572.55 690.014 L1573.1 690.014 L1573.66 690.014 L1574.22 690.014 L1574.78 690.014 L1575.34 690.014 L1575.9 690.014 L1576.46 690.014 L1577.02 690.014 L1577.58 690.014 L1578.14 690.014 L1578.7 690.014 L1579.26 690.014 L1579.82 690.014 L1580.37 690.014 L1580.93 690.014 L1581.49 690.014 L1582.05 690.014 L1582.61 690.014 L1583.17 690.014 L1583.73 690.014 L1584.29 690.014 L1584.85 690.014 L1585.41 690.014 L1585.97 690.014 L1586.53 690.014 L1587.09 690.014 L1587.65 690.014 L1588.2 690.014 L1588.76 690.014 L1589.32 690.014 L1589.88 690.014 L1590.44 690.014 L1591 690.014 L1591.56 690.014 L1592.12 690.014 L1592.68 690.014 L1593.24 690.014 L1593.8 690.014 L1594.36 690.014 L1594.92 690.014 L1595.47 690.014 L1596.03 690.014 L1596.59 690.014 L1597.15 690.014 L1597.71 690.014 L1598.27 690.014 L1598.83 690.014 L1599.39 690.014 L1599.95 690.014 L1600.51 690.014 L1601.07 690.014 L1601.63 690.014 L1602.19 690.014 L1602.74 690.014 L1603.3 690.014 L1603.86 690.014 L1604.42 690.014 L1604.98 690.014 L1605.54 690.014 L1606.1 690.014 L1606.66 690.014 L1607.22 690.014 L1607.78 690.014 L1608.34 690.014 L1608.9 690.014 L1609.46 690.014 L1610.02 690.014 L1610.57 690.014 L1611.13 690.014 L1611.69 690.014 L1612.25 690.014 L1612.81 690.014 L1613.37 690.014 L1613.93 690.014 L1614.49 690.014 L1615.05 690.014 L1615.61 690.014 L1616.17 690.014 L1616.73 690.014 L1617.29 690.014 L1617.84 690.014 L1618.4 690.014 L1618.96 690.014 L1619.52 690.014 L1620.08 690.014 L1620.64 690.014 L1621.2 690.014 L1621.76 690.014 L1622.32 690.014 L1622.88 690.014 L1623.44 690.014 L1624 690.014 L1624.56 690.014 L1625.11 690.014 L1625.67 690.014 L1626.23 690.014 L1626.79 690.014 L1627.35 690.014 L1627.91 690.014 L1628.47 690.014 L1629.03 690.014 L1629.59 690.014 L1630.15 690.014 L1630.71 690.014 L1631.27 690.014 L1631.83 690.014 L1632.39 690.014 L1632.94 690.014 L1633.5 690.014 L1634.06 690.014 L1634.62 690.014 L1635.18 690.014 L1635.74 690.014 L1636.3 690.014 L1636.86 690.014 L1637.42 690.014 L1637.98 690.014 L1638.54 690.014 L1639.1 690.014 L1639.66 690.014 L1640.21 690.014 L1640.77 690.014 L1641.33 690.014 L1641.89 690.014 L1642.45 690.014 L1643.01 690.014 L1643.57 690.014 L1644.13 690.014 L1644.69 690.014 L1645.25 690.014 L1645.81 690.014 L1646.37 690.014 L1646.93 690.014 L1647.48 690.014 L1648.04 690.014 L1648.6 690.014 L1649.16 690.014 L1649.72 690.014 L1650.28 690.014 L1650.84 690.014 L1651.4 690.014 L1651.96 690.014 L1652.52 690.014 L1653.08 690.014 L1653.64 690.014 L1654.2 690.014 L1654.76 690.014 L1655.31 690.014 L1655.87 690.014 L1656.43 690.014 L1656.99 690.014 L1657.55 690.014 L1658.11 690.014 L1658.67 690.014 L1659.23 690.014 L1659.79 690.014 L1660.35 690.014 L1660.91 690.014 L1661.47 690.014 L1662.03 690.014 L1662.58 690.014 L1663.14 690.014 L1663.7 690.014 L1664.26 690.014 L1664.82 690.014 L1665.38 690.014 L1665.94 690.014 L1666.5 690.014 L1667.06 690.014 L1667.62 690.014 L1668.18 690.014 L1668.74 690.014 L1669.3 690.014 L1669.85 690.014 L1670.41 690.014 L1670.97 690.014 L1671.53 690.014 L1672.09 690.014 L1672.65 690.014 L1673.21 690.014 L1673.77 690.014 L1674.33 690.014 L1674.89 690.014 L1675.45 690.014 L1676.01 690.014 L1676.57 690.014 L1677.13 690.014 L1677.68 690.014 L1678.24 690.014 L1678.8 690.014 L1679.36 690.014 L1679.92 690.014 L1680.48 690.014 L1681.04 690.014 L1681.6 690.014 L1682.16 690.014 L1682.72 690.014 L1683.28 690.014 L1683.84 690.014 L1684.4 690.014 L1684.95 690.014 L1685.51 690.014 L1686.07 690.014 L1686.63 690.014 L1687.19 690.014 L1687.75 690.014 L1688.31 690.014 L1688.87 690.014 L1689.43 690.014 L1689.99 690.014 L1690.55 690.014 L1691.11 690.014 L1691.67 690.014 L1692.23 690.014 L1692.78 690.014 L1693.34 690.014 L1693.9 690.014 L1694.46 690.014 L1695.02 690.014 L1695.58 690.014 L1696.14 690.014 L1696.7 690.014 L1697.26 690.014 L1697.82 690.014 L1698.38 690.014 L1698.94 690.014 L1699.5 690.014 L1700.05 690.014 L1700.61 690.014 L1701.17 690.014 L1701.73 690.014 L1702.29 690.014 L1702.85 690.014 L1703.41 690.014 L1703.97 690.014 L1704.53 690.014 L1705.09 690.014 L1705.65 690.014 L1706.21 690.014 L1706.77 690.014 L1707.32 690.014 L1707.88 690.014 L1708.44 690.014 L1709 690.014 L1709.56 690.014 L1710.12 690.014 L1710.68 690.014 L1711.24 690.014 L1711.8 690.014 L1712.36 690.014 L1712.92 690.014 L1713.48 690.014 L1714.04 690.014 L1714.6 690.014 L1715.15 690.014 L1715.71 690.014 L1716.27 690.014 L1716.83 690.014 L1717.39 690.014 L1717.95 690.014 L1718.51 690.014 L1719.07 690.014 L1719.63 690.014 L1720.19 690.014 L1720.75 690.014 L1721.31 690.014 L1721.87 690.014 L1722.42 690.014 L1722.98 690.014 L1723.54 690.014 L1724.1 690.014 L1724.66 690.014 L1725.22 690.014 L1725.78 690.014 L1726.34 690.014 L1726.9 690.014 L1727.46 690.014 L1728.02 690.014 L1728.58 690.014 L1729.14 690.014 L1729.69 690.014 L1730.25 690.014 L1730.81 690.014 L1731.37 690.014 L1731.93 690.014 L1732.49 690.014 L1733.05 690.014 L1733.61 690.014 L1734.17 690.014 L1734.73 690.014 L1735.29 690.014 L1735.85 690.014 L1736.41 690.014 L1736.97 690.014 L1737.52 690.014 L1738.08 690.014 L1738.64 690.014 L1739.2 690.014 L1739.76 690.014 L1740.32 690.014 L1740.88 690.014 L1741.44 690.014 L1742 690.014 L1742.56 690.014 L1743.12 690.014 L1743.68 690.014 L1744.24 690.014 L1744.79 690.014 L1745.35 690.014 L1745.91 690.014 L1746.47 690.014 L1747.03 690.014 L1747.59 690.014 L1748.15 690.014 L1748.71 690.014 L1749.27 690.014 L1749.83 690.014 L1750.39 690.014 L1750.95 690.014 L1751.51 690.014 L1752.06 690.014 L1752.62 690.014 L1753.18 690.014 L1753.74 690.014 L1754.3 690.014 L1754.86 690.014 L1755.42 690.014 L1755.98 690.014 L1756.54 690.014 L1757.1 690.014 L1757.66 690.014 L1758.22 690.014 L1758.78 690.014 L1759.34 690.014 L1759.89 690.014 L1760.45 690.014 L1761.01 690.014 L1761.57 690.014 L1762.13 690.014 L1762.69 690.014 L1763.25 690.014 L1763.81 690.014 L1764.37 690.014 L1764.93 690.014 L1765.49 690.014 L1766.05 690.014 L1766.61 690.014 L1767.16 690.014 L1767.72 690.014 L1768.28 690.014 L1768.84 690.014 L1769.4 690.014 L1769.96 690.014 L1770.52 690.014 L1771.08 690.014 L1771.64 690.014 L1772.2 690.014 L1772.76 690.014 L1773.32 690.014 L1773.88 690.014 L1774.43 690.014 L1774.99 690.014 L1775.55 690.014 L1776.11 690.014 L1776.67 690.014 L1777.23 690.014 L1777.79 690.014 L1778.35 690.014 L1778.91 690.014 L1779.47 690.014 L1780.03 690.014 L1780.59 690.014 L1781.15 690.014 L1781.71 690.014 L1782.26 690.014 L1782.82 690.014 L1783.38 690.014 L1783.94 690.014 L1784.5 690.014 L1785.06 690.014 L1785.62 690.014 L1786.18 690.014 L1786.74 690.014 L1787.3 690.014 L1787.86 690.014 L1788.42 690.014 L1788.98 690.014 L1789.53 690.014 L1790.09 690.014 L1790.65 690.014 L1791.21 690.014 L1791.77 690.014 L1792.33 690.014 L1792.89 690.014 L1793.45 690.014 L1794.01 690.014 L1794.57 690.014 L1795.13 690.014 L1795.69 690.014 L1796.25 690.014 L1796.8 690.014 L1797.36 690.014 L1797.92 690.014 L1798.48 690.014 L1799.04 690.014 L1799.6 690.014 L1800.16 690.014 L1800.72 690.014 L1801.28 690.014 L1801.84 690.014 L1802.4 690.014 L1802.96 690.014 L1803.52 690.014 L1804.08 690.014 L1804.63 690.014 L1805.19 690.014 L1805.75 690.014 L1806.31 690.014 L1806.87 690.014 L1807.43 690.014 L1807.99 690.014 L1808.55 690.014 L1809.11 690.014 L1809.67 690.014 L1810.23 690.014 L1810.79 690.014 L1811.35 690.014 L1811.9 690.014 L1812.46 690.014 L1813.02 690.014 L1813.58 690.014 L1814.14 690.014 L1814.7 690.014 L1815.26 690.014 L1815.82 690.014 L1816.38 690.014 L1816.94 690.014 L1817.5 690.014 L1818.06 690.014 L1818.62 690.014 L1819.18 690.014 L1819.73 690.014 L1820.29 690.014 L1820.85 690.014 L1821.41 690.014 L1821.97 690.014 L1822.53 690.014 L1823.09 690.014 L1823.65 690.014 L1824.21 690.014 L1824.77 690.014 L1825.33 690.014 L1825.89 690.014 L1826.45 690.014 L1827 690.014 L1827.56 690.014 L1828.12 690.014 L1828.68 690.014 L1829.24 690.014 L1829.8 690.014 L1830.36 690.014 L1830.92 690.014 L1831.48 690.014 L1832.04 690.014 L1832.6 690.014 L1833.16 690.014 L1833.72 690.014 L1834.27 690.014 L1834.83 690.014 L1835.39 690.014 L1835.95 690.014 L1836.51 690.014 L1837.07 690.014 L1837.63 690.014 L1838.19 690.014 L1838.19 679.671 L1837.63 679.671 L1837.07 679.671 L1836.51 679.671 L1835.95 679.671 L1835.39 679.671 L1834.83 679.671 L1834.27 679.671 L1833.72 679.671 L1833.16 679.671 L1832.6 679.671 L1832.04 679.671 L1831.48 679.671 L1830.92 679.671 L1830.36 679.671 L1829.8 679.671 L1829.24 679.671 L1828.68 679.671 L1828.12 679.671 L1827.56 679.671 L1827 679.671 L1826.45 679.671 L1825.89 679.671 L1825.33 679.671 L1824.77 679.671 L1824.21 679.671 L1823.65 679.671 L1823.09 679.671 L1822.53 679.671 L1821.97 679.671 L1821.41 679.671 L1820.85 679.671 L1820.29 679.671 L1819.73 679.671 L1819.18 679.671 L1818.62 679.671 L1818.06 679.671 L1817.5 679.671 L1816.94 679.671 L1816.38 679.671 L1815.82 679.671 L1815.26 679.671 L1814.7 679.671 L1814.14 679.671 L1813.58 679.671 L1813.02 679.671 L1812.46 679.671 L1811.9 679.671 L1811.35 679.671 L1810.79 679.671 L1810.23 679.671 L1809.67 679.671 L1809.11 679.671 L1808.55 679.671 L1807.99 679.671 L1807.43 679.671 L1806.87 679.671 L1806.31 679.671 L1805.75 679.671 L1805.19 679.671 L1804.63 679.671 L1804.08 679.671 L1803.52 679.671 L1802.96 679.671 L1802.4 679.671 L1801.84 679.671 L1801.28 679.671 L1800.72 679.671 L1800.16 679.671 L1799.6 679.671 L1799.04 679.671 L1798.48 679.671 L1797.92 679.671 L1797.36 679.671 L1796.8 679.671 L1796.25 679.671 L1795.69 679.671 L1795.13 679.671 L1794.57 679.671 L1794.01 679.671 L1793.45 679.671 L1792.89 679.671 L1792.33 679.671 L1791.77 679.671 L1791.21 679.671 L1790.65 679.671 L1790.09 679.671 L1789.53 679.671 L1788.98 679.671 L1788.42 679.671 L1787.86 679.671 L1787.3 679.671 L1786.74 679.671 L1786.18 679.671 L1785.62 679.671 L1785.06 679.671 L1784.5 679.671 L1783.94 679.671 L1783.38 679.671 L1782.82 679.671 L1782.26 679.671 L1781.71 679.671 L1781.15 679.671 L1780.59 679.671 L1780.03 679.671 L1779.47 679.671 L1778.91 679.671 L1778.35 679.671 L1777.79 679.671 L1777.23 679.671 L1776.67 679.671 L1776.11 679.671 L1775.55 679.671 L1774.99 679.671 L1774.43 679.671 L1773.88 679.671 L1773.32 679.671 L1772.76 679.671 L1772.2 679.671 L1771.64 679.671 L1771.08 679.671 L1770.52 679.671 L1769.96 679.671 L1769.4 679.671 L1768.84 679.671 L1768.28 679.671 L1767.72 679.671 L1767.16 679.671 L1766.61 679.671 L1766.05 679.671 L1765.49 679.671 L1764.93 679.671 L1764.37 679.671 L1763.81 679.671 L1763.25 679.671 L1762.69 679.671 L1762.13 679.671 L1761.57 679.671 L1761.01 679.671 L1760.45 679.671 L1759.89 679.671 L1759.34 679.671 L1758.78 679.671 L1758.22 679.671 L1757.66 679.671 L1757.1 679.671 L1756.54 679.671 L1755.98 679.671 L1755.42 679.671 L1754.86 679.671 L1754.3 679.671 L1753.74 679.671 L1753.18 679.671 L1752.62 679.671 L1752.06 679.671 L1751.51 679.671 L1750.95 679.671 L1750.39 679.671 L1749.83 679.671 L1749.27 679.671 L1748.71 679.671 L1748.15 679.671 L1747.59 679.671 L1747.03 679.671 L1746.47 679.671 L1745.91 679.671 L1745.35 679.671 L1744.79 679.671 L1744.24 679.671 L1743.68 679.671 L1743.12 679.671 L1742.56 679.671 L1742 679.671 L1741.44 679.671 L1740.88 679.671 L1740.32 679.671 L1739.76 679.671 L1739.2 679.671 L1738.64 679.671 L1738.08 679.671 L1737.52 679.671 L1736.97 679.671 L1736.41 679.671 L1735.85 679.671 L1735.29 679.671 L1734.73 679.671 L1734.17 679.671 L1733.61 679.671 L1733.05 679.671 L1732.49 679.671 L1731.93 679.671 L1731.37 679.671 L1730.81 679.671 L1730.25 679.671 L1729.69 679.671 L1729.14 679.671 L1728.58 679.671 L1728.02 679.671 L1727.46 679.671 L1726.9 679.671 L1726.34 679.671 L1725.78 679.671 L1725.22 679.671 L1724.66 679.671 L1724.1 679.671 L1723.54 679.671 L1722.98 679.671 L1722.42 679.671 L1721.87 679.671 L1721.31 679.671 L1720.75 679.671 L1720.19 679.671 L1719.63 679.671 L1719.07 679.671 L1718.51 679.671 L1717.95 679.671 L1717.39 679.671 L1716.83 679.671 L1716.27 679.671 L1715.71 679.671 L1715.15 679.671 L1714.6 679.671 L1714.04 679.671 L1713.48 679.671 L1712.92 679.671 L1712.36 679.671 L1711.8 679.671 L1711.24 679.671 L1710.68 679.671 L1710.12 679.671 L1709.56 679.671 L1709 679.671 L1708.44 679.671 L1707.88 679.671 L1707.32 679.671 L1706.77 679.671 L1706.21 679.671 L1705.65 679.671 L1705.09 679.671 L1704.53 679.671 L1703.97 679.671 L1703.41 679.671 L1702.85 679.671 L1702.29 679.671 L1701.73 679.671 L1701.17 679.671 L1700.61 679.671 L1700.05 679.671 L1699.5 679.671 L1698.94 679.671 L1698.38 679.671 L1697.82 679.671 L1697.26 679.671 L1696.7 679.671 L1696.14 679.671 L1695.58 679.671 L1695.02 679.671 L1694.46 679.671 L1693.9 679.671 L1693.34 679.671 L1692.78 679.671 L1692.23 679.671 L1691.67 679.671 L1691.11 679.671 L1690.55 679.671 L1689.99 679.671 L1689.43 679.671 L1688.87 679.671 L1688.31 679.671 L1687.75 679.671 L1687.19 679.671 L1686.63 679.671 L1686.07 679.671 L1685.51 679.671 L1684.95 679.671 L1684.4 679.671 L1683.84 679.671 L1683.28 679.671 L1682.72 679.671 L1682.16 679.671 L1681.6 679.671 L1681.04 679.671 L1680.48 679.671 L1679.92 679.671 L1679.36 679.671 L1678.8 679.671 L1678.24 679.671 L1677.68 679.671 L1677.13 679.671 L1676.57 679.671 L1676.01 679.671 L1675.45 679.671 L1674.89 679.671 L1674.33 679.671 L1673.77 679.671 L1673.21 679.671 L1672.65 679.671 L1672.09 679.671 L1671.53 679.671 L1670.97 679.671 L1670.41 679.671 L1669.85 679.671 L1669.3 679.671 L1668.74 679.671 L1668.18 679.671 L1667.62 679.671 L1667.06 679.671 L1666.5 679.671 L1665.94 679.671 L1665.38 679.671 L1664.82 679.671 L1664.26 679.671 L1663.7 679.671 L1663.14 679.671 L1662.58 679.671 L1662.03 679.671 L1661.47 679.671 L1660.91 679.671 L1660.35 679.671 L1659.79 679.671 L1659.23 679.671 L1658.67 679.671 L1658.11 679.671 L1657.55 679.671 L1656.99 679.671 L1656.43 679.671 L1655.87 679.671 L1655.31 679.671 L1654.76 679.671 L1654.2 679.671 L1653.64 679.671 L1653.08 679.671 L1652.52 679.671 L1651.96 679.671 L1651.4 679.671 L1650.84 679.671 L1650.28 679.671 L1649.72 679.671 L1649.16 679.671 L1648.6 679.671 L1648.04 679.671 L1647.48 679.671 L1646.93 679.671 L1646.37 679.671 L1645.81 679.671 L1645.25 679.671 L1644.69 679.671 L1644.13 679.671 L1643.57 679.671 L1643.01 679.671 L1642.45 679.671 L1641.89 679.671 L1641.33 679.671 L1640.77 679.671 L1640.21 679.671 L1639.66 679.671 L1639.1 679.671 L1638.54 679.671 L1637.98 679.671 L1637.42 679.671 L1636.86 679.671 L1636.3 679.671 L1635.74 679.671 L1635.18 679.671 L1634.62 679.671 L1634.06 679.671 L1633.5 679.671 L1632.94 679.671 L1632.39 679.671 L1631.83 679.671 L1631.27 679.671 L1630.71 679.671 L1630.15 679.671 L1629.59 679.671 L1629.03 679.671 L1628.47 679.671 L1627.91 679.671 L1627.35 679.671 L1626.79 679.671 L1626.23 679.671 L1625.67 679.671 L1625.11 679.671 L1624.56 679.671 L1624 679.671 L1623.44 679.671 L1622.88 679.671 L1622.32 679.671 L1621.76 679.671 L1621.2 679.671 L1620.64 679.671 L1620.08 679.671 L1619.52 679.671 L1618.96 679.671 L1618.4 679.671 L1617.84 679.671 L1617.29 679.671 L1616.73 679.671 L1616.17 679.671 L1615.61 679.671 L1615.05 679.671 L1614.49 679.671 L1613.93 679.671 L1613.37 679.671 L1612.81 679.671 L1612.25 679.671 L1611.69 679.671 L1611.13 679.671 L1610.57 679.671 L1610.02 679.671 L1609.46 679.671 L1608.9 679.671 L1608.34 679.671 L1607.78 679.671 L1607.22 679.671 L1606.66 679.671 L1606.1 679.671 L1605.54 679.671 L1604.98 679.671 L1604.42 679.671 L1603.86 679.671 L1603.3 679.671 L1602.74 679.671 L1602.19 679.671 L1601.63 679.671 L1601.07 679.671 L1600.51 679.671 L1599.95 679.671 L1599.39 679.671 L1598.83 679.671 L1598.27 679.671 L1597.71 679.671 L1597.15 679.671 L1596.59 679.671 L1596.03 679.671 L1595.47 679.671 L1594.92 679.671 L1594.36 679.671 L1593.8 679.671 L1593.24 679.671 L1592.68 679.671 L1592.12 679.671 L1591.56 679.671 L1591 679.671 L1590.44 679.671 L1589.88 679.671 L1589.32 679.671 L1588.76 679.671 L1588.2 679.671 L1587.65 679.671 L1587.09 679.671 L1586.53 679.671 L1585.97 679.671 L1585.41 679.671 L1584.85 679.671 L1584.29 679.671 L1583.73 679.671 L1583.17 679.671 L1582.61 679.671 L1582.05 679.671 L1581.49 679.671 L1580.93 679.671 L1580.37 679.671 L1579.82 679.671 L1579.26 679.671 L1578.7 679.671 L1578.14 679.671 L1577.58 679.671 L1577.02 679.671 L1576.46 679.671 L1575.9 679.671 L1575.34 679.671 L1574.78 679.671 L1574.22 679.671 L1573.66 679.671 L1573.1 679.671 L1572.55 679.671 L1571.99 679.671 L1571.43 679.671 L1570.87 679.671 L1570.31 679.671 L1569.75 679.671 L1569.19 679.671 L1568.63 679.671 L1568.07 679.671 L1567.51 679.671 L1566.95 679.671 L1566.39 679.671 L1565.83 679.671 L1565.28 679.671 L1564.72 679.671 L1564.16 679.671 L1563.6 679.671 L1563.04 679.671 L1562.48 679.671 L1561.92 679.671 L1561.36 679.671 L1560.8 679.671 L1560.24 679.671 L1559.68 679.671 L1559.12 679.671 L1558.56 679.671 L1558 679.671 L1557.45 679.671 L1556.89 679.671 L1556.33 679.671 L1555.77 679.671 L1555.21 679.671 L1554.65 679.671 L1554.09 679.671 L1553.53 679.671 L1552.97 679.671 L1552.41 679.671 L1551.85 679.671 L1551.29 679.671 L1550.73 679.671 L1550.18 679.671 L1549.62 679.671 L1549.06 679.671 L1548.5 679.671 L1547.94 679.671 L1547.38 679.671 L1546.82 679.671 L1546.26 679.671 L1545.7 679.671 L1545.14 679.671 L1544.58 679.671 L1544.02 679.671 L1543.46 679.671 L1542.9 679.671 L1542.35 679.671 L1541.79 679.671 L1541.23 679.671 L1540.67 679.671 L1540.11 679.671 L1539.55 679.671 L1538.99 679.671 L1538.43 679.671 L1537.87 679.671 L1537.31 679.671 L1536.75 679.671 L1536.19 679.671 L1535.63 679.671 L1535.08 679.671 L1534.52 679.671 L1533.96 679.671 L1533.4 679.671 L1532.84 679.671 L1532.28 679.671 L1531.72 679.671 L1531.16 679.671 L1530.6 679.671 L1530.04 679.671 L1529.48 679.671 L1528.92 679.671 L1528.36 679.671 L1527.81 679.671 L1527.25 679.671 L1526.69 679.671 L1526.13 679.671 L1525.57 679.671 L1525.01 679.671 L1524.45 679.671 L1523.89 679.671 L1523.33 679.671 L1522.77 679.671 L1522.21 679.671 L1521.65 679.671 L1521.09 679.671 L1520.53 679.671 L1519.98 679.671 L1519.42 679.671 L1518.86 679.671 L1518.3 679.671 L1517.74 679.671 L1517.18 679.671 L1516.62 679.671 L1516.06 679.671 L1515.5 679.671 L1514.94 679.671 L1514.38 679.671 L1513.82 679.671 L1513.26 679.671 L1512.71 679.671 L1512.15 679.671 L1511.59 679.671 L1511.03 679.671 L1510.47 679.671 L1509.91 679.671 L1509.35 679.671 L1508.79 679.671 L1508.23 679.671 L1507.67 679.671 L1507.11 679.671 L1506.55 679.671 L1505.99 679.671 L1505.44 679.671 L1504.88 679.671 L1504.32 679.671 L1503.76 679.671 L1503.2 679.671 L1502.64 679.671 L1502.08 679.671 L1501.52 679.671 L1500.96 679.671 L1500.4 679.671 L1499.84 679.671 L1499.28 679.671 L1498.72 679.671 L1498.16 679.671 L1497.61 679.671 L1497.05 679.671 L1496.49 679.671 L1495.93 679.671 L1495.37 679.671 L1494.81 679.671 L1494.25 679.671 L1493.69 679.671 L1493.13 679.671 L1492.57 679.671 L1492.01 679.671 L1491.45 679.671 L1490.89 679.671 L1490.34 679.671 L1489.78 679.671 L1489.22 679.671 L1488.66 679.671 L1488.1 679.671 L1487.54 679.671 L1486.98 679.671 L1486.42 679.671 L1485.86 679.671 L1485.3 679.671 L1484.74 679.671 L1484.18 679.671 L1483.62 679.671 L1483.07 679.671 L1482.51 679.671 L1481.95 679.671 L1481.39 679.671 L1480.83 679.671 L1480.27 679.671 L1479.71 679.671 L1479.15 679.671 L1478.59 679.671 L1478.03 679.671 L1477.47 679.671 L1476.91 679.671 L1476.35 679.671 L1475.79 679.671 L1475.24 679.671 L1474.68 679.671 L1474.12 679.671 L1473.56 679.671 L1473 679.671 L1472.44 679.671 L1471.88 679.671 L1471.32 679.671 L1470.76 679.671 L1470.2 679.671 L1469.64 679.671 L1469.08 679.671 L1468.52 679.671 L1467.97 679.671 L1467.41 679.671 L1466.85 679.671 L1466.29 679.671 L1465.73 679.671 L1465.17 679.671 L1464.61 679.671 L1464.05 679.671 L1463.49 679.671 L1462.93 679.671 L1462.37 679.671 L1461.81 679.671 L1461.25 679.671 L1460.7 679.671 L1460.14 679.671 L1459.58 679.671 L1459.02 679.671 L1458.46 679.671 L1457.9 679.671 L1457.34 679.671 L1456.78 679.671 L1456.22 679.671 L1455.66 679.671 L1455.1 679.671 L1454.54 679.671 L1453.98 679.671 L1453.42 679.671 L1452.87 679.671 L1452.31 679.671 L1451.75 679.671 L1451.19 679.671 L1450.63 679.671 L1450.07 679.671 L1449.51 679.671 L1448.95 679.671 L1448.39 679.671 L1447.83 679.671 L1447.27 679.671 L1446.71 679.671 L1446.15 679.671 L1445.6 679.671 L1445.04 679.671 L1444.48 679.671 L1443.92 679.671 L1443.36 679.671 L1442.8 679.671 L1442.24 679.671 L1441.68 679.671 L1441.12 679.671 L1440.56 679.671 L1440 679.671 L1439.44 679.671 L1438.88 679.671 L1438.33 679.671 L1437.77 679.671 L1437.21 679.671 L1436.65 679.671 L1436.09 679.671 L1435.53 679.671 L1434.97 679.671 L1434.41 679.671 L1433.85 679.671 L1433.29 679.671 L1432.73 679.671 L1432.17 679.671 L1431.61 679.671 L1431.05 679.671 L1430.5 679.671 L1429.94 679.671 L1429.38 679.671 L1428.82 679.671 L1428.26 679.671 L1427.7 679.671 L1427.14 679.671 L1426.58 679.671 L1426.02 679.671 L1425.46 679.671 L1424.9 679.671 L1424.34 679.671 L1423.78 679.671 L1423.23 679.671 L1422.67 679.671 L1422.11 679.671 L1421.55 679.671 L1420.99 679.671 L1420.43 679.671 L1419.87 679.671 L1419.31 679.671 L1418.75 679.671 L1418.19 679.671 L1417.63 679.671 L1417.07 679.671 L1416.51 679.671 L1415.95 679.671 L1415.4 679.671 L1414.84 679.671 L1414.28 679.671 L1413.72 679.671 L1413.16 679.671 L1412.6 679.671 L1412.04 679.671 L1411.48 679.671 L1410.92 679.671 L1410.36 679.671 L1409.8 679.671 L1409.24 679.671 L1408.68 679.671 L1408.13 679.671 L1407.57 679.671 L1407.01 679.671 L1406.45 679.671 L1405.89 679.671 L1405.33 679.671 L1404.77 679.671 L1404.21 679.671 L1403.65 679.671 L1403.09 679.671 L1402.53 679.671 L1401.97 679.671 L1401.41 679.671 L1400.86 679.671 L1400.3 679.671 L1399.74 679.671 L1399.18 679.671 L1398.62 679.671 L1398.06 679.671 L1397.5 679.671 L1396.94 679.671 L1396.38 679.671 L1395.82 679.671 L1395.26 679.671 L1394.7 679.671 L1394.14 679.671 L1393.58 679.671 L1393.03 679.671 L1392.47 679.671 L1391.91 679.671 L1391.35 679.671 L1390.79 679.671 L1390.23 679.671 L1389.67 679.671 L1389.11 679.671 L1388.55 679.671 L1387.99 679.671 L1387.43 679.671 L1386.87 679.671 L1386.31 679.671 L1385.76 679.671 L1385.2 679.671 L1384.64 679.671 L1384.08 679.671 L1383.52 679.671 L1382.96 679.671 L1382.4 679.671 L1381.84 679.671 L1381.28 679.671 L1380.72 679.671 L1380.16 679.671 L1379.6 679.671 L1379.04 679.671 L1378.49 679.671 L1377.93 679.671 L1377.37 679.671 L1376.81 679.671 L1376.25 679.671 L1375.69 679.671 L1375.13 679.671 L1374.57 679.671 L1374.01 679.671 L1373.45 679.671 L1372.89 679.671 L1372.33 679.671 L1371.77 679.671 L1371.21 679.671 L1370.66 679.671 L1370.1 679.671 L1369.54 679.671 L1368.98 679.671 L1368.42 679.671 L1367.86 679.671 L1367.3 679.671 L1366.74 679.671 L1366.18 679.671 L1365.62 679.671 L1365.06 679.671 L1364.5 679.671 L1363.94 679.671 L1363.39 679.671 L1362.83 679.671 L1362.27 679.671 L1361.71 679.671 L1361.15 679.671 L1360.59 679.671 L1360.03 679.671 L1359.47 679.671 L1358.91 679.671 L1358.35 679.671 L1357.79 679.671 L1357.23 679.671 L1356.67 679.671 L1356.12 679.671 L1355.56 679.671 L1355 679.671 L1354.44 679.671 L1353.88 679.671 L1353.32 679.671 L1352.76 679.671 L1352.2 679.671 L1351.64 679.671 L1351.08 679.671 L1350.52 679.671 L1349.96 679.671 L1349.4 679.671 L1348.84 679.671 L1348.29 679.671 L1347.73 679.671 L1347.17 679.671 L1346.61 679.671 L1346.05 679.671 L1345.49 679.671 L1344.93 679.671 L1344.37 679.671 L1343.81 679.671 L1343.25 679.671 L1342.69 679.671 L1342.13 679.671 L1341.57 679.671 L1341.02 679.671 L1340.46 679.671 L1339.9 679.671 L1339.34 679.671 L1338.78 679.671 L1338.22 679.671 L1337.66 679.671 L1337.1 679.671 L1336.54 679.671 L1335.98 679.671 L1335.42 679.671 L1334.86 679.671 L1334.3 679.671 L1333.75 679.671 L1333.19 679.671 L1332.63 679.671 L1332.07 679.671 L1331.51 679.671 L1330.95 679.671 L1330.39 679.671 L1329.83 679.671 L1329.27 679.671 L1328.71 679.671 L1328.15 679.671 L1327.59 679.671 L1327.03 679.671 L1326.47 679.671 L1325.92 679.671 L1325.36 679.671 L1324.8 679.671 L1324.24 679.671 L1323.68 679.671 L1323.12 679.671 L1322.56 679.671 L1322 679.671 L1321.44 679.671 L1320.88 679.671 L1320.32 679.671 L1319.76 679.671 L1319.2 679.671 L1318.65 679.671 L1318.09 679.671 L1317.53 679.671 L1316.97 679.671 L1316.41 679.671 L1315.85 679.671 L1315.29 679.671 L1314.73 679.671 L1314.17 679.671 L1313.61 679.671 L1313.05 679.671 L1312.49 679.671 L1311.93 679.671 L1311.38 679.671 L1310.82 679.671 L1310.26 679.671 L1309.7 679.671 L1309.14 679.671 L1308.58 679.671 L1308.02 679.671 L1307.46 679.671 L1306.9 679.671 L1306.34 679.671 L1305.78 679.671 L1305.22 679.671 L1304.66 679.671 L1304.1 679.671 L1303.55 679.671 L1302.99 679.671 L1302.43 679.671 L1301.87 679.671 L1301.31 679.671 L1300.75 679.671 L1300.19 679.671 L1299.63 679.671 L1299.07 679.671 L1298.51 679.671 L1297.95 679.671 L1297.39 679.671 L1296.83 679.671 L1296.28 679.671 L1295.72 679.671 L1295.16 679.671 L1294.6 679.671 L1294.04 679.671 L1293.48 679.671 L1292.92 679.671 L1292.36 679.671 L1291.8 679.671 L1291.24 679.671 L1290.68 679.671 L1290.12 679.671 L1289.56 679.671 L1289 679.671 L1288.45 679.671 L1287.89 679.671 L1287.33 679.671 L1286.77 679.671 L1286.21 679.671 L1285.65 679.671 L1285.09 679.671 L1284.53 679.671 L1283.97 679.671 L1283.41 679.671 L1282.85 679.671 L1282.29 679.671 L1281.73 679.671 L1281.18 679.671 L1280.62 679.671 L1280.06 679.671 L1279.5 679.671 L1278.94 679.671 L1278.38 679.671 L1277.82 679.671 L1277.26 679.671 L1276.7 679.671 L1276.14 679.671 L1275.58 679.671 L1275.02 679.671 L1274.46 679.671 L1273.91 679.671 L1273.35 679.671 L1272.79 679.671 L1272.23 679.671 L1271.67 679.671 L1271.11 679.671 L1270.55 679.671 L1269.99 679.671 L1269.43 679.671 L1268.87 679.671 L1268.31 679.671 L1267.75 679.671 L1267.19 679.671 L1266.63 679.671 L1266.08 679.671 L1265.52 679.671 L1264.96 679.671 L1264.4 679.671 L1263.84 679.671 L1263.28 679.671 L1262.72 679.671 L1262.16 679.671 L1261.6 679.671 L1261.04 679.671 L1260.48 679.671 L1259.92 679.671 L1259.36 679.671 L1258.81 679.671 L1258.25 679.671 L1257.69 679.671 L1257.13 679.671 L1256.57 679.671 L1256.01 679.671 L1255.45 679.671 L1254.89 679.671 L1254.33 679.671 L1253.77 679.671 L1253.21 679.671 L1252.65 679.671 L1252.09 679.671 L1251.54 679.671 L1250.98 679.671 L1250.42 679.671 L1249.86 679.671 L1249.3 679.671 L1248.74 679.671 L1248.18 679.671 L1247.62 679.671 L1247.06 679.671 L1246.5 679.671 L1245.94 679.671 L1245.38 679.671 L1244.82 679.671 L1244.26 679.671 L1243.71 679.671 L1243.15 679.671 L1242.59 679.671 L1242.03 679.671 L1241.47 679.671 L1240.91 679.671 L1240.35 679.671 L1239.79 679.671 L1239.23 679.671 L1238.67 679.671 L1238.11 679.671 L1237.55 679.671 L1236.99 679.671 L1236.44 679.671 L1235.88 679.671 L1235.32 679.671 L1234.76 679.671 L1234.2 679.671 L1233.64 679.671 L1233.08 679.671 L1232.52 679.671 L1231.96 679.671 L1231.4 679.671 L1230.84 679.671 L1230.28 679.671 L1229.72 679.671 L1229.17 679.671 L1228.61 679.671 L1228.05 679.671 L1227.49 679.671 L1226.93 679.671 L1226.37 679.671 L1225.81 679.671 L1225.25 679.671 L1224.69 679.671 L1224.13 679.671 L1223.57 679.671 L1223.01 679.671 L1222.45 679.671 L1221.89 679.671 L1221.34 679.671 L1220.78 679.671 L1220.22 679.671 L1219.66 679.671 L1219.1 679.671 L1218.54 679.671 L1217.98 679.671 L1217.42 679.671 L1216.86 679.671 L1216.3 679.671 L1215.74 679.671 L1215.18 679.671 L1214.62 679.671 L1214.07 679.671 L1213.51 679.671 L1212.95 679.671 L1212.39 679.671 L1211.83 679.671 L1211.27 679.671 L1210.71 679.671 L1210.15 679.671 L1209.59 679.671 L1209.03 679.671 L1208.47 679.671 L1207.91 679.671 L1207.35 679.671 L1206.8 679.671 L1206.24 679.671 L1205.68 679.671 L1205.12 679.671 L1204.56 679.671 L1204 679.671 L1203.44 679.671 L1202.88 679.671 L1202.32 679.671 L1201.76 679.671 L1201.2 679.671 L1200.64 679.671 L1200.08 679.671 L1199.52 679.671 L1198.97 679.671 L1198.41 679.671 L1197.85 679.671 L1197.29 679.671 L1196.73 679.671 L1196.17 679.671 L1195.61 679.671 L1195.05 679.671 L1194.49 679.671 L1193.93 679.671 L1193.37 679.671 L1192.81 679.671 L1192.25 679.671 L1191.7 679.671 L1191.14 679.671 L1190.58 679.671 L1190.02 679.671 L1189.46 679.671 L1188.9 679.671 L1188.34 679.671 L1187.78 679.671 L1187.22 679.671 L1186.66 679.671 L1186.1 679.671 L1185.54 679.671 L1184.98 679.671 L1184.43 679.671 L1183.87 679.671 L1183.31 679.671 L1182.75 679.671 L1182.19 679.671 L1181.63 679.671 L1181.07 679.671 L1180.51 679.671 L1179.95 679.671 L1179.39 679.671 L1178.83 679.671 L1178.27 679.671 L1177.71 679.671 L1177.15 679.671 L1176.6 679.671 L1176.04 679.671 L1175.48 679.671 L1174.92 679.671 L1174.36 679.671 L1173.8 679.671 L1173.24 679.671 L1172.68 679.671 L1172.12 679.671 L1171.56 679.671 L1171 679.671 L1170.44 679.671 L1169.88 679.671 L1169.33 679.671 L1168.77 679.671 L1168.21 679.671 L1167.65 679.671 L1167.09 679.671 L1166.53 679.671 L1165.97 679.671 L1165.41 679.671 L1164.85 679.671 L1164.29 679.671 L1163.73 679.671 L1163.17 679.671 L1162.61 679.671 L1162.05 679.671 L1161.5 679.671 L1160.94 679.671 L1160.38 679.671 L1159.82 679.671 L1159.26 679.671 L1158.7 679.671 L1158.14 679.671 L1157.58 679.671 L1157.02 679.671 L1156.46 679.671 L1155.9 679.671 L1155.34 679.671 L1154.78 679.671 L1154.23 679.671 L1153.67 679.671 L1153.11 679.671 L1152.55 679.671 L1151.99 679.671 L1151.43 679.671 L1150.87 679.671 L1150.31 679.671 L1149.75 679.671 L1149.19 679.671 L1148.63 679.671 L1148.07 679.671 L1147.51 679.671 L1146.96 679.671 L1146.4 679.671 L1145.84 679.671 L1145.28 679.671 L1144.72 679.671 L1144.16 679.671 L1143.6 679.671 L1143.04 679.671 L1142.48 679.671 L1141.92 679.671 L1141.36 679.671 L1140.8 679.671 L1140.24 679.671 L1139.68 679.671 L1139.13 679.671 L1138.57 679.671 L1138.01 679.671 L1137.45 679.671 L1136.89 679.671 L1136.33 679.671 L1135.77 679.671 L1135.21 679.671 L1134.65 679.671 L1134.09 679.671 L1133.53 679.671 L1132.97 679.671 L1132.41 679.671 L1131.86 679.671 L1131.3 679.671 L1130.74 679.671 L1130.18 679.671 L1129.62 679.671 L1129.06 679.671 L1128.5 679.671 L1127.94 679.671 L1127.38 679.671 L1126.82 679.671 L1126.26 679.671 L1125.7 679.671 L1125.14 679.671 L1124.59 679.671 L1124.03 679.671 L1123.47 679.671 L1122.91 679.671 L1122.35 679.671 L1121.79 679.671 L1121.23 679.671 L1120.67 679.671 L1120.11 679.671 L1119.55 679.671 L1118.99 679.671 L1118.43 679.671 L1117.87 679.671 L1117.31 679.671 L1116.76 679.671 L1116.2 679.671 L1115.64 679.671 L1115.08 679.671 L1114.52 679.671 L1113.96 679.671 L1113.4 679.671 L1112.84 679.671 L1112.28 679.671 L1111.72 679.671 L1111.16 679.671 L1110.6 679.671 L1110.04 679.671 L1109.49 679.671 L1108.93 679.671 L1108.37 679.671 L1107.81 679.671 L1107.25 679.671 L1106.69 679.671 L1106.13 679.671 L1105.57 679.671 L1105.01 679.671 L1104.45 679.671 L1103.89 679.671 L1103.33 679.671 L1102.77 679.671 L1102.22 679.671 L1101.66 679.671 L1101.1 679.671 L1100.54 679.671 L1099.98 679.671 L1099.42 679.671 L1098.86 679.671 L1098.3 679.671 L1097.74 679.671 L1097.18 679.671 L1096.62 679.671 L1096.06 679.671 L1095.5 679.671 L1094.94 679.671 L1094.39 679.671 L1093.83 679.671 L1093.27 679.671 L1092.71 679.671 L1092.15 679.671 L1091.59 679.671 L1091.03 679.671 L1090.47 679.671 L1089.91 679.671 L1089.35 679.671 L1088.79 679.671 L1088.23 679.671 L1087.67 679.671 L1087.12 679.671 L1086.56 679.671 L1086 679.671 L1085.44 679.671 L1084.88 679.671 L1084.32 679.671 L1083.76 679.671 L1083.2 679.671 L1082.64 679.671 L1082.08 679.671 L1081.52 679.671 L1080.96 679.671 L1080.4 679.671 L1079.85 679.671 L1079.29 679.671 L1078.73 679.671 L1078.17 679.671 L1077.61 679.671 L1077.05 679.671 L1076.49 679.671 L1075.93 679.671 L1075.37 679.671 L1074.81 679.671 L1074.25 679.671 L1073.69 679.671 L1073.13 679.671 L1072.57 679.671 L1072.02 679.671 L1071.46 679.671 L1070.9 679.671 L1070.34 679.671 L1069.78 679.671 L1069.22 679.671 L1068.66 679.671 L1068.1 679.671 L1067.54 679.671 L1066.98 679.671 L1066.42 679.671 L1065.86 679.671 L1065.3 679.671 L1064.75 679.671 L1064.19 679.671 L1063.63 679.671 L1063.07 679.671 L1062.51 679.671 L1061.95 679.671 L1061.39 679.671 L1060.83 679.671 L1060.27 679.671 L1059.71 679.671 L1059.15 679.671 L1058.59 679.671 L1058.03 679.671 L1057.48 679.671 L1056.92 679.671 L1056.36 679.671 L1055.8 679.671 L1055.24 679.671 L1054.68 679.671 L1054.12 679.671 L1053.56 679.671 L1053 679.671 L1052.44 679.671 L1051.88 679.671 L1051.32 679.671 L1050.76 679.671 L1050.2 679.671 L1049.65 679.671 L1049.09 679.671 L1048.53 679.671 L1047.97 679.671 L1047.41 679.671 L1046.85 679.671 L1046.29 679.671 L1045.73 679.671 L1045.17 679.671 L1044.61 679.671 L1044.05 679.671 L1043.49 679.671 L1042.93 679.671 L1042.38 679.671 L1041.82 679.671 L1041.26 679.671 L1040.7 679.671 L1040.14 679.671 L1039.58 679.671 L1039.02 679.671 L1038.46 679.671 L1037.9 679.671 L1037.34 679.671 L1036.78 679.671 L1036.22 679.671 L1035.66 679.671 L1035.1 679.671 L1034.55 679.671 L1033.99 679.671 L1033.43 679.671 L1032.87 679.671 L1032.31 679.671 L1031.75 679.671 L1031.19 679.671 L1030.63 679.671 L1030.07 679.671 L1029.51 679.671 L1028.95 679.671 L1028.39 679.671 L1027.83 679.671 L1027.28 679.671 L1026.72 679.671 L1026.16 679.671 L1025.6 679.671 L1025.04 679.671 L1024.48 679.671 L1023.92 679.671 L1023.36 679.671 L1022.8 679.671 L1022.24 679.671 L1021.68 679.671 L1021.12 679.671 L1020.56 679.671 L1020.01 679.671 L1019.45 679.671 L1018.89 679.671 L1018.33 679.671 L1017.77 679.671 L1017.21 679.671 L1016.65 679.671 L1016.09 679.671 L1015.53 679.671 L1014.97 679.671 L1014.41 679.671 L1013.85 679.671 L1013.29 679.671 L1012.73 679.671 L1012.18 679.671 L1011.62 679.671 L1011.06 679.671 L1010.5 679.671 L1009.94 679.671 L1009.38 679.671 L1008.82 679.671 L1008.26 679.671 L1007.7 679.671 L1007.14 679.671 L1006.58 679.671 L1006.02 679.671 L1005.46 679.671 L1004.91 679.671 L1004.35 679.671 L1003.79 679.671 L1003.23 679.671 L1002.67 679.671 L1002.11 679.671 L1001.55 679.671 L1000.99 679.671 L1000.43 679.671 L999.872 679.671 L999.313 679.671 L998.754 679.671 L998.194 679.671 L997.635 679.671 L997.076 679.671 L996.517 679.671 L995.957 679.671 L995.398 679.671 L994.839 679.671 L994.28 679.671 L993.72 679.671 L993.161 679.671 L992.602 679.671 L992.043 679.671 L991.483 679.671 L990.924 679.671 L990.365 679.671 L989.806 679.671 L989.246 679.671 L988.687 679.671 L988.128 679.671 L987.569 679.671 L987.009 679.671 L986.45 679.671 L985.891 679.671 L985.332 679.671 L984.772 679.671 L984.213 679.671 L983.654 679.671 L983.095 679.671 L982.535 679.671 L981.976 679.671 L981.417 679.671 L980.858 679.671 L980.298 679.671 L979.739 679.671 L979.18 679.671 L978.621 679.671 L978.061 679.671 L977.502 679.671 L976.943 679.671 L976.384 679.671 L975.824 679.671 L975.265 679.671 L974.706 679.671 L974.147 679.671 L973.587 679.671 L973.028 679.671 L972.469 679.671 L971.91 679.671 L971.35 679.671 L970.791 679.671 L970.232 679.671 L969.673 679.671 L969.113 679.671 L968.554 679.671 L967.995 679.671 L967.436 679.671 L966.876 679.671 L966.317 679.671 L965.758 679.671 L965.199 679.671 L964.639 679.671 L964.08 679.671 L963.521 679.671 L962.962 679.671 L962.402 679.671 L961.843 679.671 L961.284 679.671 L960.725 679.671 L960.165 679.671 L959.606 679.671 L959.047 679.671 L958.488 679.671 L957.928 679.671 L957.369 679.671 L956.81 679.671 L956.251 679.671 L955.691 679.671 L955.132 679.671 L954.573 679.671 L954.014 679.671 L953.454 679.671 L952.895 679.671 L952.336 679.671 L951.777 679.671 L951.217 679.671 L950.658 679.671 L950.099 679.671 L949.54 679.671 L948.98 679.671 L948.421 679.671 L947.862 679.671 L947.303 679.671 L946.743 679.671 L946.184 679.671 L945.625 679.671 L945.066 679.671 L944.506 679.671 L943.947 679.671 L943.388 679.671 L942.829 679.671 L942.269 679.671 L941.71 679.671 L941.151 679.671 L940.592 679.671 L940.032 679.671 L939.473 679.671 L938.914 679.671 L938.355 679.671 L937.795 679.671 L937.236 679.671 L936.677 679.671 L936.118 679.671 L935.558 679.671 L934.999 679.671 L934.44 679.671 L933.881 679.671 L933.321 679.671 L932.762 679.671 L932.203 679.671 L931.644 679.671 L931.084 679.671 L930.525 679.671 L929.966 679.671 L929.406 679.671 L928.847 679.671 L928.288 679.671 L927.729 679.671 L927.169 679.671 L926.61 679.671 L926.051 679.671 L925.492 679.671 L924.932 679.671 L924.373 679.671 L923.814 679.671 L923.255 679.671 L922.695 679.671 L922.136 679.671 L921.577 679.671 L921.018 679.671 L920.458 679.671 L919.899 679.671 L919.34 679.671 L918.781 679.671 L918.221 679.671 L917.662 679.671 L917.103 679.671 L916.544 679.671 L915.984 679.671 L915.425 679.671 L914.866 679.671 L914.307 679.671 L913.747 679.671 L913.188 679.671 L912.629 679.671 L912.07 679.671 L911.51 679.671 L910.951 679.671 L910.392 679.671 L909.833 679.671 L909.273 679.671 L908.714 679.671 L908.155 679.671 L907.596 679.671 L907.036 679.671 L906.477 679.671 L905.918 679.671 L905.359 679.671 L904.799 679.671 L904.24 679.671 L903.681 679.671 L903.122 679.671 L902.562 679.671 L902.003 679.671 L901.444 679.671 L900.885 679.671 L900.325 679.671 L899.766 679.671 L899.207 679.671 L898.648 679.671 L898.088 679.671 L897.529 679.671 L896.97 679.671 L896.411 679.671 L895.851 679.671 L895.292 679.671 L894.733 679.671 L894.174 679.671 L893.614 679.671 L893.055 679.671 L892.496 679.671 L891.937 679.671 L891.377 679.671 L890.818 679.671 L890.259 679.671 L889.7 679.671 L889.14 679.671 L888.581 679.671 L888.022 679.671 L887.463 679.671 L886.903 679.671 L886.344 679.671 L885.785 679.671 L885.226 679.671 L884.666 679.671 L884.107 679.671 L883.548 679.671 L882.989 679.671 L882.429 679.671 L881.87 679.671 L881.311 679.671 L880.752 679.671 L880.192 679.671 L879.633 679.671 L879.074 679.671 L878.515 679.671 L877.955 679.671 L877.396 679.671 L876.837 679.671 L876.278 679.671 L875.718 679.671 L875.159 679.671 L874.6 679.671 L874.041 679.671 L873.481 679.671 L872.922 679.671 L872.363 679.671 L871.804 679.671 L871.244 679.671 L870.685 679.671 L870.126 679.671 L869.567 679.671 L869.007 679.671 L868.448 679.671 L867.889 679.671 L867.33 679.671 L866.77 679.671 L866.211 679.671 L865.652 679.671 L865.093 679.671 L864.533 679.671 L863.974 679.671 L863.415 679.671 L862.856 679.671 L862.296 679.671 L861.737 679.671 L861.178 679.671 L860.619 679.671 L860.059 679.671 L859.5 679.671 L858.941 679.671 L858.382 679.671 L857.822 679.671 L857.263 679.671 L856.704 679.671 L856.145 679.671 L855.585 679.671 L855.026 679.671 L854.467 679.671 L853.908 679.671 L853.348 679.671 L852.789 679.671 L852.23 679.671 L851.671 679.671 L851.111 679.671 L850.552 679.671 L849.993 679.671 L849.434 679.671 L848.874 679.671 L848.315 679.671 L847.756 679.671 L847.197 679.671 L846.637 679.671 L846.078 679.671 L845.519 679.671 L844.96 679.671 L844.4 679.671 L843.841 679.671 L843.282 679.671 L842.723 679.671 L842.163 679.671 L841.604 679.671 L841.045 679.671 L840.486 679.671 L839.926 679.671 L839.367 679.671 L838.808 679.671 L838.249 679.671 L837.689 679.671 L837.13 679.671 L836.571 679.671 L836.012 679.671 L835.452 679.671 L834.893 679.671 L834.334 679.671 L833.775 679.671 L833.215 679.671 L832.656 679.671 L832.097 679.671 L831.538 679.671 L830.978 679.671 L830.419 679.671 L829.86 679.671 L829.301 679.671 L828.741 679.671 L828.182 679.671 L827.623 679.671 L827.064 679.671 L826.504 679.671 L825.945 679.671 L825.386 679.671 L824.827 679.671 L824.267 679.671 L823.708 679.671 L823.149 679.671 L822.59 679.671 L822.03 679.671 L821.471 679.671 L820.912 679.671 L820.353 679.671 L819.793 679.671 L819.234 679.671 L818.675 679.671 L818.116 679.671 L817.556 679.671 L816.997 679.671 L816.438 679.671 L815.879 679.671 L815.319 679.671 L814.76 679.671 L814.201 679.671 L813.642 679.671 L813.082 679.671 L812.523 679.671 L811.964 679.671 L811.405 679.671 L810.845 679.671 L810.286 679.671 L809.727 679.671 L809.168 679.671 L808.608 679.671 L808.049 679.671 L807.49 679.671 L806.931 679.671 L806.371 679.671 L805.812 679.671 L805.253 679.671 L804.693 679.671 L804.134 679.671 L803.575 679.671 L803.016 679.671 L802.456 679.671 L801.897 679.671 L801.338 679.671 L800.779 679.671 L800.219 679.671 L799.66 679.671 L799.101 679.671 L798.542 679.671 L797.982 679.671 L797.423 679.671 L796.864 679.671 L796.305 679.671 L795.745 679.671 L795.186 679.671 L794.627 679.671 L794.068 679.671 L793.508 679.671 L792.949 679.671 L792.39 679.671 L791.831 679.671 L791.271 679.671 L790.712 679.671 L790.153 679.671 L789.594 679.671 L789.034 679.671 L788.475 679.671 L787.916 679.671 L787.357 679.671 L786.797 679.671 L786.238 679.671 L785.679 679.671 L785.12 679.671 L784.56 679.671 L784.001 679.671 L783.442 679.671 L782.883 679.671 L782.323 679.671 L781.764 679.671 L781.205 679.671 L780.646 679.671 L780.086 679.671 L779.527 679.671 L778.968 679.671 L778.409 679.671 L777.849 679.671 L777.29 679.671 L776.731 679.671 L776.172 679.671 L775.612 679.671 L775.053 679.671 L774.494 679.671 L773.935 679.671 L773.375 679.671 L772.816 679.671 L772.257 679.671 L771.698 679.671 L771.138 679.671 L770.579 679.671 L770.02 679.671 L769.461 679.671 L768.901 679.671 L768.342 679.671 L767.783 679.671 L767.224 679.671 L766.664 679.671 L766.105 679.671 L765.546 679.671 L764.987 679.671 L764.427 679.671 L763.868 679.671 L763.309 679.671 L762.75 679.671 L762.19 679.671 L761.631 679.671 L761.072 679.671 L760.513 679.671 L759.953 679.671 L759.394 679.671 L758.835 679.671 L758.276 679.671 L757.716 679.671 L757.157 679.671 L756.598 679.671 L756.039 679.671 L755.479 679.671 L754.92 679.671 L754.361 679.671 L753.802 679.671 L753.242 679.671 L752.683 679.671 L752.124 679.671 L751.565 679.671 L751.005 679.671 L750.446 679.671 L749.887 679.671 L749.328 679.671 L748.768 679.671 L748.209 679.671 L747.65 679.671 L747.091 679.671 L746.531 679.671 L745.972 679.671 L745.413 679.671 L744.854 679.671 L744.294 679.671 L743.735 679.671 L743.176 679.671 L742.617 679.671 L742.057 679.671 L741.498 679.671 L740.939 679.671 L740.38 679.671 L739.82 679.671 L739.261 679.671 L738.702 679.671 L738.143 679.671 L737.583 679.671 L737.024 679.671 L736.465 679.671 L735.906 679.671 L735.346 679.671 L734.787 679.671 L734.228 679.671 L733.669 679.671 L733.109 679.671 L732.55 679.671 L731.991 679.671 L731.432 679.671 L730.872 679.671 L730.313 679.671 L729.754 679.671 L729.195 679.671 L728.635 679.671 L728.076 679.671 L727.517 679.671 L726.958 679.671 L726.398 679.671 L725.839 679.671 L725.28 679.671 L724.721 679.671 L724.161 679.671 L723.602 679.671 L723.043 679.671 L722.484 679.671 L721.924 679.671 L721.365 679.671 L720.806 679.671 L720.247 679.671  Z\" fill=\"#e26f46\" fill-rule=\"evenodd\" fill-opacity=\"0.5\"/>\n<polyline clip-path=\"url(#clip443)\" style=\"stroke:#e26f46; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"720.247,684.842 720.806,684.842 721.365,684.842 721.924,684.842 722.484,684.842 723.043,684.842 723.602,684.842 724.161,684.842 724.721,684.842 725.28,684.842 725.839,684.842 726.398,684.842 726.958,684.842 727.517,684.842 728.076,684.842 728.635,684.842 729.195,684.842 729.754,684.842 730.313,684.842 730.872,684.842 731.432,684.842 731.991,684.842 732.55,684.842 733.109,684.842 733.669,684.842 734.228,684.842 734.787,684.842 735.346,684.842 735.906,684.842 736.465,684.842 737.024,684.842 737.583,684.842 738.143,684.842 738.702,684.842 739.261,684.842 739.82,684.842 740.38,684.842 740.939,684.842 741.498,684.842 742.057,684.842 742.617,684.842 743.176,684.842 743.735,684.842 744.294,684.842 744.854,684.842 745.413,684.842 745.972,684.842 746.531,684.842 747.091,684.842 747.65,684.842 748.209,684.842 748.768,684.842 749.328,684.842 749.887,684.842 750.446,684.842 751.005,684.842 751.565,684.842 752.124,684.842 752.683,684.842 753.242,684.842 753.802,684.842 754.361,684.842 754.92,684.842 755.479,684.842 756.039,684.842 756.598,684.842 757.157,684.842 757.716,684.842 758.276,684.842 758.835,684.842 759.394,684.842 759.953,684.842 760.513,684.842 761.072,684.842 761.631,684.842 762.19,684.842 762.75,684.842 763.309,684.842 763.868,684.842 764.427,684.842 764.987,684.842 765.546,684.842 766.105,684.842 766.664,684.842 767.224,684.842 767.783,684.842 768.342,684.842 768.901,684.842 769.461,684.842 770.02,684.842 770.579,684.842 771.138,684.842 771.698,684.842 772.257,684.842 772.816,684.842 773.375,684.842 773.935,684.842 774.494,684.842 775.053,684.842 775.612,684.842 776.172,684.842 776.731,684.842 777.29,684.842 777.849,684.842 778.409,684.842 778.968,684.842 779.527,684.842 780.086,684.842 780.646,684.842 781.205,684.842 781.764,684.842 782.323,684.842 782.883,684.842 783.442,684.842 784.001,684.842 784.56,684.842 785.12,684.842 785.679,684.842 786.238,684.842 786.797,684.842 787.357,684.842 787.916,684.842 788.475,684.842 789.034,684.842 789.594,684.842 790.153,684.842 790.712,684.842 791.271,684.842 791.831,684.842 792.39,684.842 792.949,684.842 793.508,684.842 794.068,684.842 794.627,684.842 795.186,684.842 795.745,684.842 796.305,684.842 796.864,684.842 797.423,684.842 797.982,684.842 798.542,684.842 799.101,684.842 799.66,684.842 800.219,684.842 800.779,684.842 801.338,684.842 801.897,684.842 802.456,684.842 803.016,684.842 803.575,684.842 804.134,684.842 804.693,684.842 805.253,684.842 805.812,684.842 806.371,684.842 806.931,684.842 807.49,684.842 808.049,684.842 808.608,684.842 809.168,684.842 809.727,684.842 810.286,684.842 810.845,684.842 811.405,684.842 811.964,684.842 812.523,684.842 813.082,684.842 813.642,684.842 814.201,684.842 814.76,684.842 815.319,684.842 815.879,684.842 816.438,684.842 816.997,684.842 817.556,684.842 818.116,684.842 818.675,684.842 819.234,684.842 819.793,684.842 820.353,684.842 820.912,684.842 821.471,684.842 822.03,684.842 822.59,684.842 823.149,684.842 823.708,684.842 824.267,684.842 824.827,684.842 825.386,684.842 825.945,684.842 826.504,684.842 827.064,684.842 827.623,684.842 828.182,684.842 828.741,684.842 829.301,684.842 829.86,684.842 830.419,684.842 830.978,684.842 831.538,684.842 832.097,684.842 832.656,684.842 833.215,684.842 833.775,684.842 834.334,684.842 834.893,684.842 835.452,684.842 836.012,684.842 836.571,684.842 837.13,684.842 837.689,684.842 838.249,684.842 838.808,684.842 839.367,684.842 839.926,684.842 840.486,684.842 841.045,684.842 841.604,684.842 842.163,684.842 842.723,684.842 843.282,684.842 843.841,684.842 844.4,684.842 844.96,684.842 845.519,684.842 846.078,684.842 846.637,684.842 847.197,684.842 847.756,684.842 848.315,684.842 848.874,684.842 849.434,684.842 849.993,684.842 850.552,684.842 851.111,684.842 851.671,684.842 852.23,684.842 852.789,684.842 853.348,684.842 853.908,684.842 854.467,684.842 855.026,684.842 855.585,684.842 856.145,684.842 856.704,684.842 857.263,684.842 857.822,684.842 858.382,684.842 858.941,684.842 859.5,684.842 860.059,684.842 860.619,684.842 861.178,684.842 861.737,684.842 862.296,684.842 862.856,684.842 863.415,684.842 863.974,684.842 864.533,684.842 865.093,684.842 865.652,684.842 866.211,684.842 866.77,684.842 867.33,684.842 867.889,684.842 868.448,684.842 869.007,684.842 869.567,684.842 870.126,684.842 870.685,684.842 871.244,684.842 871.804,684.842 872.363,684.842 872.922,684.842 873.481,684.842 874.041,684.842 874.6,684.842 875.159,684.842 875.718,684.842 876.278,684.842 876.837,684.842 877.396,684.842 877.955,684.842 878.515,684.842 879.074,684.842 879.633,684.842 880.192,684.842 880.752,684.842 881.311,684.842 881.87,684.842 882.429,684.842 882.989,684.842 883.548,684.842 884.107,684.842 884.666,684.842 885.226,684.842 885.785,684.842 886.344,684.842 886.903,684.842 887.463,684.842 888.022,684.842 888.581,684.842 889.14,684.842 889.7,684.842 890.259,684.842 890.818,684.842 891.377,684.842 891.937,684.842 892.496,684.842 893.055,684.842 893.614,684.842 894.174,684.842 894.733,684.842 895.292,684.842 895.851,684.842 896.411,684.842 896.97,684.842 897.529,684.842 898.088,684.842 898.648,684.842 899.207,684.842 899.766,684.842 900.325,684.842 900.885,684.842 901.444,684.842 902.003,684.842 902.562,684.842 903.122,684.842 903.681,684.842 904.24,684.842 904.799,684.842 905.359,684.842 905.918,684.842 906.477,684.842 907.036,684.842 907.596,684.842 908.155,684.842 908.714,684.842 909.273,684.842 909.833,684.842 910.392,684.842 910.951,684.842 911.51,684.842 912.07,684.842 912.629,684.842 913.188,684.842 913.747,684.842 914.307,684.842 914.866,684.842 915.425,684.842 915.984,684.842 916.544,684.842 917.103,684.842 917.662,684.842 918.221,684.842 918.781,684.842 919.34,684.842 919.899,684.842 920.458,684.842 921.018,684.842 921.577,684.842 922.136,684.842 922.695,684.842 923.255,684.842 923.814,684.842 924.373,684.842 924.932,684.842 925.492,684.842 926.051,684.842 926.61,684.842 927.169,684.842 927.729,684.842 928.288,684.842 928.847,684.842 929.406,684.842 929.966,684.842 930.525,684.842 931.084,684.842 931.644,684.842 932.203,684.842 932.762,684.842 933.321,684.842 933.881,684.842 934.44,684.842 934.999,684.842 935.558,684.842 936.118,684.842 936.677,684.842 937.236,684.842 937.795,684.842 938.355,684.842 938.914,684.842 939.473,684.842 940.032,684.842 940.592,684.842 941.151,684.842 941.71,684.842 942.269,684.842 942.829,684.842 943.388,684.842 943.947,684.842 944.506,684.842 945.066,684.842 945.625,684.842 946.184,684.842 946.743,684.842 947.303,684.842 947.862,684.842 948.421,684.842 948.98,684.842 949.54,684.842 950.099,684.842 950.658,684.842 951.217,684.842 951.777,684.842 952.336,684.842 952.895,684.842 953.454,684.842 954.014,684.842 954.573,684.842 955.132,684.842 955.691,684.842 956.251,684.842 956.81,684.842 957.369,684.842 957.928,684.842 958.488,684.842 959.047,684.842 959.606,684.842 960.165,684.842 960.725,684.842 961.284,684.842 961.843,684.842 962.402,684.842 962.962,684.842 963.521,684.842 964.08,684.842 964.639,684.842 965.199,684.842 965.758,684.842 966.317,684.842 966.876,684.842 967.436,684.842 967.995,684.842 968.554,684.842 969.113,684.842 969.673,684.842 970.232,684.842 970.791,684.842 971.35,684.842 971.91,684.842 972.469,684.842 973.028,684.842 973.587,684.842 974.147,684.842 974.706,684.842 975.265,684.842 975.824,684.842 976.384,684.842 976.943,684.842 977.502,684.842 978.061,684.842 978.621,684.842 979.18,684.842 979.739,684.842 980.298,684.842 980.858,684.842 981.417,684.842 981.976,684.842 982.535,684.842 983.095,684.842 983.654,684.842 984.213,684.842 984.772,684.842 985.332,684.842 985.891,684.842 986.45,684.842 987.009,684.842 987.569,684.842 988.128,684.842 988.687,684.842 989.246,684.842 989.806,684.842 990.365,684.842 990.924,684.842 991.483,684.842 992.043,684.842 992.602,684.842 993.161,684.842 993.72,684.842 994.28,684.842 994.839,684.842 995.398,684.842 995.957,684.842 996.517,684.842 997.076,684.842 997.635,684.842 998.194,684.842 998.754,684.842 999.313,684.842 999.872,684.842 1000.43,684.842 1000.99,684.842 1001.55,684.842 1002.11,684.842 1002.67,684.842 1003.23,684.842 1003.79,684.842 1004.35,684.842 1004.91,684.842 1005.46,684.842 1006.02,684.842 1006.58,684.842 1007.14,684.842 1007.7,684.842 1008.26,684.842 1008.82,684.842 1009.38,684.842 1009.94,684.842 1010.5,684.842 1011.06,684.842 1011.62,684.842 1012.18,684.842 1012.73,684.842 1013.29,684.842 1013.85,684.842 1014.41,684.842 1014.97,684.842 1015.53,684.842 1016.09,684.842 1016.65,684.842 1017.21,684.842 1017.77,684.842 1018.33,684.842 1018.89,684.842 1019.45,684.842 1020.01,684.842 1020.56,684.842 1021.12,684.842 1021.68,684.842 1022.24,684.842 1022.8,684.842 1023.36,684.842 1023.92,684.842 1024.48,684.842 1025.04,684.842 1025.6,684.842 1026.16,684.842 1026.72,684.842 1027.28,684.842 1027.83,684.842 1028.39,684.842 1028.95,684.842 1029.51,684.842 1030.07,684.842 1030.63,684.842 1031.19,684.842 1031.75,684.842 1032.31,684.842 1032.87,684.842 1033.43,684.842 1033.99,684.842 1034.55,684.842 1035.1,684.842 1035.66,684.842 1036.22,684.842 1036.78,684.842 1037.34,684.842 1037.9,684.842 1038.46,684.842 1039.02,684.842 1039.58,684.842 1040.14,684.842 1040.7,684.842 1041.26,684.842 1041.82,684.842 1042.38,684.842 1042.93,684.842 1043.49,684.842 1044.05,684.842 1044.61,684.842 1045.17,684.842 1045.73,684.842 1046.29,684.842 1046.85,684.842 1047.41,684.842 1047.97,684.842 1048.53,684.842 1049.09,684.842 1049.65,684.842 1050.2,684.842 1050.76,684.842 1051.32,684.842 1051.88,684.842 1052.44,684.842 1053,684.842 1053.56,684.842 1054.12,684.842 1054.68,684.842 1055.24,684.842 1055.8,684.842 1056.36,684.842 1056.92,684.842 1057.48,684.842 1058.03,684.842 1058.59,684.842 1059.15,684.842 1059.71,684.842 1060.27,684.842 1060.83,684.842 1061.39,684.842 1061.95,684.842 1062.51,684.842 1063.07,684.842 1063.63,684.842 1064.19,684.842 1064.75,684.842 1065.3,684.842 1065.86,684.842 1066.42,684.842 1066.98,684.842 1067.54,684.842 1068.1,684.842 1068.66,684.842 1069.22,684.842 1069.78,684.842 1070.34,684.842 1070.9,684.842 1071.46,684.842 1072.02,684.842 1072.57,684.842 1073.13,684.842 1073.69,684.842 1074.25,684.842 1074.81,684.842 1075.37,684.842 1075.93,684.842 1076.49,684.842 1077.05,684.842 1077.61,684.842 1078.17,684.842 1078.73,684.842 1079.29,684.842 1079.85,684.842 1080.4,684.842 1080.96,684.842 1081.52,684.842 1082.08,684.842 1082.64,684.842 1083.2,684.842 1083.76,684.842 1084.32,684.842 1084.88,684.842 1085.44,684.842 1086,684.842 1086.56,684.842 1087.12,684.842 1087.67,684.842 1088.23,684.842 1088.79,684.842 1089.35,684.842 1089.91,684.842 1090.47,684.842 1091.03,684.842 1091.59,684.842 1092.15,684.842 1092.71,684.842 1093.27,684.842 1093.83,684.842 1094.39,684.842 1094.94,684.842 1095.5,684.842 1096.06,684.842 1096.62,684.842 1097.18,684.842 1097.74,684.842 1098.3,684.842 1098.86,684.842 1099.42,684.842 1099.98,684.842 1100.54,684.842 1101.1,684.842 1101.66,684.842 1102.22,684.842 1102.77,684.842 1103.33,684.842 1103.89,684.842 1104.45,684.842 1105.01,684.842 1105.57,684.842 1106.13,684.842 1106.69,684.842 1107.25,684.842 1107.81,684.842 1108.37,684.842 1108.93,684.842 1109.49,684.842 1110.04,684.842 1110.6,684.842 1111.16,684.842 1111.72,684.842 1112.28,684.842 1112.84,684.842 1113.4,684.842 1113.96,684.842 1114.52,684.842 1115.08,684.842 1115.64,684.842 1116.2,684.842 1116.76,684.842 1117.31,684.842 1117.87,684.842 1118.43,684.842 1118.99,684.842 1119.55,684.842 1120.11,684.842 1120.67,684.842 1121.23,684.842 1121.79,684.842 1122.35,684.842 1122.91,684.842 1123.47,684.842 1124.03,684.842 1124.59,684.842 1125.14,684.842 1125.7,684.842 1126.26,684.842 1126.82,684.842 1127.38,684.842 1127.94,684.842 1128.5,684.842 1129.06,684.842 1129.62,684.842 1130.18,684.842 1130.74,684.842 1131.3,684.842 1131.86,684.842 1132.41,684.842 1132.97,684.842 1133.53,684.842 1134.09,684.842 1134.65,684.842 1135.21,684.842 1135.77,684.842 1136.33,684.842 1136.89,684.842 1137.45,684.842 1138.01,684.842 1138.57,684.842 1139.13,684.842 1139.68,684.842 1140.24,684.842 1140.8,684.842 1141.36,684.842 1141.92,684.842 1142.48,684.842 1143.04,684.842 1143.6,684.842 1144.16,684.842 1144.72,684.842 1145.28,684.842 1145.84,684.842 1146.4,684.842 1146.96,684.842 1147.51,684.842 1148.07,684.842 1148.63,684.842 1149.19,684.842 1149.75,684.842 1150.31,684.842 1150.87,684.842 1151.43,684.842 1151.99,684.842 1152.55,684.842 1153.11,684.842 1153.67,684.842 1154.23,684.842 1154.78,684.842 1155.34,684.842 1155.9,684.842 1156.46,684.842 1157.02,684.842 1157.58,684.842 1158.14,684.842 1158.7,684.842 1159.26,684.842 1159.82,684.842 1160.38,684.842 1160.94,684.842 1161.5,684.842 1162.05,684.842 1162.61,684.842 1163.17,684.842 1163.73,684.842 1164.29,684.842 1164.85,684.842 1165.41,684.842 1165.97,684.842 1166.53,684.842 1167.09,684.842 1167.65,684.842 1168.21,684.842 1168.77,684.842 1169.33,684.842 1169.88,684.842 1170.44,684.842 1171,684.842 1171.56,684.842 1172.12,684.842 1172.68,684.842 1173.24,684.842 1173.8,684.842 1174.36,684.842 1174.92,684.842 1175.48,684.842 1176.04,684.842 1176.6,684.842 1177.15,684.842 1177.71,684.842 1178.27,684.842 1178.83,684.842 1179.39,684.842 1179.95,684.842 1180.51,684.842 1181.07,684.842 1181.63,684.842 1182.19,684.842 1182.75,684.842 1183.31,684.842 1183.87,684.842 1184.43,684.842 1184.98,684.842 1185.54,684.842 1186.1,684.842 1186.66,684.842 1187.22,684.842 1187.78,684.842 1188.34,684.842 1188.9,684.842 1189.46,684.842 1190.02,684.842 1190.58,684.842 1191.14,684.842 1191.7,684.842 1192.25,684.842 1192.81,684.842 1193.37,684.842 1193.93,684.842 1194.49,684.842 1195.05,684.842 1195.61,684.842 1196.17,684.842 1196.73,684.842 1197.29,684.842 1197.85,684.842 1198.41,684.842 1198.97,684.842 1199.52,684.842 1200.08,684.842 1200.64,684.842 1201.2,684.842 1201.76,684.842 1202.32,684.842 1202.88,684.842 1203.44,684.842 1204,684.842 1204.56,684.842 1205.12,684.842 1205.68,684.842 1206.24,684.842 1206.8,684.842 1207.35,684.842 1207.91,684.842 1208.47,684.842 1209.03,684.842 1209.59,684.842 1210.15,684.842 1210.71,684.842 1211.27,684.842 1211.83,684.842 1212.39,684.842 1212.95,684.842 1213.51,684.842 1214.07,684.842 1214.62,684.842 1215.18,684.842 1215.74,684.842 1216.3,684.842 1216.86,684.842 1217.42,684.842 1217.98,684.842 1218.54,684.842 1219.1,684.842 1219.66,684.842 1220.22,684.842 1220.78,684.842 1221.34,684.842 1221.89,684.842 1222.45,684.842 1223.01,684.842 1223.57,684.842 1224.13,684.842 1224.69,684.842 1225.25,684.842 1225.81,684.842 1226.37,684.842 1226.93,684.842 1227.49,684.842 1228.05,684.842 1228.61,684.842 1229.17,684.842 1229.72,684.842 1230.28,684.842 1230.84,684.842 1231.4,684.842 1231.96,684.842 1232.52,684.842 1233.08,684.842 1233.64,684.842 1234.2,684.842 1234.76,684.842 1235.32,684.842 1235.88,684.842 1236.44,684.842 1236.99,684.842 1237.55,684.842 1238.11,684.842 1238.67,684.842 1239.23,684.842 1239.79,684.842 1240.35,684.842 1240.91,684.842 1241.47,684.842 1242.03,684.842 1242.59,684.842 1243.15,684.842 1243.71,684.842 1244.26,684.842 1244.82,684.842 1245.38,684.842 1245.94,684.842 1246.5,684.842 1247.06,684.842 1247.62,684.842 1248.18,684.842 1248.74,684.842 1249.3,684.842 1249.86,684.842 1250.42,684.842 1250.98,684.842 1251.54,684.842 1252.09,684.842 1252.65,684.842 1253.21,684.842 1253.77,684.842 1254.33,684.842 1254.89,684.842 1255.45,684.842 1256.01,684.842 1256.57,684.842 1257.13,684.842 1257.69,684.842 1258.25,684.842 1258.81,684.842 1259.36,684.842 1259.92,684.842 1260.48,684.842 1261.04,684.842 1261.6,684.842 1262.16,684.842 1262.72,684.842 1263.28,684.842 1263.84,684.842 1264.4,684.842 1264.96,684.842 1265.52,684.842 1266.08,684.842 1266.63,684.842 1267.19,684.842 1267.75,684.842 1268.31,684.842 1268.87,684.842 1269.43,684.842 1269.99,684.842 1270.55,684.842 1271.11,684.842 1271.67,684.842 1272.23,684.842 1272.79,684.842 1273.35,684.842 1273.91,684.842 1274.46,684.842 1275.02,684.842 1275.58,684.842 1276.14,684.842 1276.7,684.842 1277.26,684.842 1277.82,684.842 1278.38,684.842 1278.94,684.842 1279.5,684.842 1280.06,684.842 1280.62,684.842 1281.18,684.842 1281.73,684.842 1282.29,684.842 1282.85,684.842 1283.41,684.842 1283.97,684.842 1284.53,684.842 1285.09,684.842 1285.65,684.842 1286.21,684.842 1286.77,684.842 1287.33,684.842 1287.89,684.842 1288.45,684.842 1289,684.842 1289.56,684.842 1290.12,684.842 1290.68,684.842 1291.24,684.842 1291.8,684.842 1292.36,684.842 1292.92,684.842 1293.48,684.842 1294.04,684.842 1294.6,684.842 1295.16,684.842 1295.72,684.842 1296.28,684.842 1296.83,684.842 1297.39,684.842 1297.95,684.842 1298.51,684.842 1299.07,684.842 1299.63,684.842 1300.19,684.842 1300.75,684.842 1301.31,684.842 1301.87,684.842 1302.43,684.842 1302.99,684.842 1303.55,684.842 1304.1,684.842 1304.66,684.842 1305.22,684.842 1305.78,684.842 1306.34,684.842 1306.9,684.842 1307.46,684.842 1308.02,684.842 1308.58,684.842 1309.14,684.842 1309.7,684.842 1310.26,684.842 1310.82,684.842 1311.38,684.842 1311.93,684.842 1312.49,684.842 1313.05,684.842 1313.61,684.842 1314.17,684.842 1314.73,684.842 1315.29,684.842 1315.85,684.842 1316.41,684.842 1316.97,684.842 1317.53,684.842 1318.09,684.842 1318.65,684.842 1319.2,684.842 1319.76,684.842 1320.32,684.842 1320.88,684.842 1321.44,684.842 1322,684.842 1322.56,684.842 1323.12,684.842 1323.68,684.842 1324.24,684.842 1324.8,684.842 1325.36,684.842 1325.92,684.842 1326.47,684.842 1327.03,684.842 1327.59,684.842 1328.15,684.842 1328.71,684.842 1329.27,684.842 1329.83,684.842 1330.39,684.842 1330.95,684.842 1331.51,684.842 1332.07,684.842 1332.63,684.842 1333.19,684.842 1333.75,684.842 1334.3,684.842 1334.86,684.842 1335.42,684.842 1335.98,684.842 1336.54,684.842 1337.1,684.842 1337.66,684.842 1338.22,684.842 1338.78,684.842 1339.34,684.842 1339.9,684.842 1340.46,684.842 1341.02,684.842 1341.57,684.842 1342.13,684.842 1342.69,684.842 1343.25,684.842 1343.81,684.842 1344.37,684.842 1344.93,684.842 1345.49,684.842 1346.05,684.842 1346.61,684.842 1347.17,684.842 1347.73,684.842 1348.29,684.842 1348.84,684.842 1349.4,684.842 1349.96,684.842 1350.52,684.842 1351.08,684.842 1351.64,684.842 1352.2,684.842 1352.76,684.842 1353.32,684.842 1353.88,684.842 1354.44,684.842 1355,684.842 1355.56,684.842 1356.12,684.842 1356.67,684.842 1357.23,684.842 1357.79,684.842 1358.35,684.842 1358.91,684.842 1359.47,684.842 1360.03,684.842 1360.59,684.842 1361.15,684.842 1361.71,684.842 1362.27,684.842 1362.83,684.842 1363.39,684.842 1363.94,684.842 1364.5,684.842 1365.06,684.842 1365.62,684.842 1366.18,684.842 1366.74,684.842 1367.3,684.842 1367.86,684.842 1368.42,684.842 1368.98,684.842 1369.54,684.842 1370.1,684.842 1370.66,684.842 1371.21,684.842 1371.77,684.842 1372.33,684.842 1372.89,684.842 1373.45,684.842 1374.01,684.842 1374.57,684.842 1375.13,684.842 1375.69,684.842 1376.25,684.842 1376.81,684.842 1377.37,684.842 1377.93,684.842 1378.49,684.842 1379.04,684.842 1379.6,684.842 1380.16,684.842 1380.72,684.842 1381.28,684.842 1381.84,684.842 1382.4,684.842 1382.96,684.842 1383.52,684.842 1384.08,684.842 1384.64,684.842 1385.2,684.842 1385.76,684.842 1386.31,684.842 1386.87,684.842 1387.43,684.842 1387.99,684.842 1388.55,684.842 1389.11,684.842 1389.67,684.842 1390.23,684.842 1390.79,684.842 1391.35,684.842 1391.91,684.842 1392.47,684.842 1393.03,684.842 1393.58,684.842 1394.14,684.842 1394.7,684.842 1395.26,684.842 1395.82,684.842 1396.38,684.842 1396.94,684.842 1397.5,684.842 1398.06,684.842 1398.62,684.842 1399.18,684.842 1399.74,684.842 1400.3,684.842 1400.86,684.842 1401.41,684.842 1401.97,684.842 1402.53,684.842 1403.09,684.842 1403.65,684.842 1404.21,684.842 1404.77,684.842 1405.33,684.842 1405.89,684.842 1406.45,684.842 1407.01,684.842 1407.57,684.842 1408.13,684.842 1408.68,684.842 1409.24,684.842 1409.8,684.842 1410.36,684.842 1410.92,684.842 1411.48,684.842 1412.04,684.842 1412.6,684.842 1413.16,684.842 1413.72,684.842 1414.28,684.842 1414.84,684.842 1415.4,684.842 1415.95,684.842 1416.51,684.842 1417.07,684.842 1417.63,684.842 1418.19,684.842 1418.75,684.842 1419.31,684.842 1419.87,684.842 1420.43,684.842 1420.99,684.842 1421.55,684.842 1422.11,684.842 1422.67,684.842 1423.23,684.842 1423.78,684.842 1424.34,684.842 1424.9,684.842 1425.46,684.842 1426.02,684.842 1426.58,684.842 1427.14,684.842 1427.7,684.842 1428.26,684.842 1428.82,684.842 1429.38,684.842 1429.94,684.842 1430.5,684.842 1431.05,684.842 1431.61,684.842 1432.17,684.842 1432.73,684.842 1433.29,684.842 1433.85,684.842 1434.41,684.842 1434.97,684.842 1435.53,684.842 1436.09,684.842 1436.65,684.842 1437.21,684.842 1437.77,684.842 1438.33,684.842 1438.88,684.842 1439.44,684.842 1440,684.842 1440.56,684.842 1441.12,684.842 1441.68,684.842 1442.24,684.842 1442.8,684.842 1443.36,684.842 1443.92,684.842 1444.48,684.842 1445.04,684.842 1445.6,684.842 1446.15,684.842 1446.71,684.842 1447.27,684.842 1447.83,684.842 1448.39,684.842 1448.95,684.842 1449.51,684.842 1450.07,684.842 1450.63,684.842 1451.19,684.842 1451.75,684.842 1452.31,684.842 1452.87,684.842 1453.42,684.842 1453.98,684.842 1454.54,684.842 1455.1,684.842 1455.66,684.842 1456.22,684.842 1456.78,684.842 1457.34,684.842 1457.9,684.842 1458.46,684.842 1459.02,684.842 1459.58,684.842 1460.14,684.842 1460.7,684.842 1461.25,684.842 1461.81,684.842 1462.37,684.842 1462.93,684.842 1463.49,684.842 1464.05,684.842 1464.61,684.842 1465.17,684.842 1465.73,684.842 1466.29,684.842 1466.85,684.842 1467.41,684.842 1467.97,684.842 1468.52,684.842 1469.08,684.842 1469.64,684.842 1470.2,684.842 1470.76,684.842 1471.32,684.842 1471.88,684.842 1472.44,684.842 1473,684.842 1473.56,684.842 1474.12,684.842 1474.68,684.842 1475.24,684.842 1475.79,684.842 1476.35,684.842 1476.91,684.842 1477.47,684.842 1478.03,684.842 1478.59,684.842 1479.15,684.842 1479.71,684.842 1480.27,684.842 1480.83,684.842 1481.39,684.842 1481.95,684.842 1482.51,684.842 1483.07,684.842 1483.62,684.842 1484.18,684.842 1484.74,684.842 1485.3,684.842 1485.86,684.842 1486.42,684.842 1486.98,684.842 1487.54,684.842 1488.1,684.842 1488.66,684.842 1489.22,684.842 1489.78,684.842 1490.34,684.842 1490.89,684.842 1491.45,684.842 1492.01,684.842 1492.57,684.842 1493.13,684.842 1493.69,684.842 1494.25,684.842 1494.81,684.842 1495.37,684.842 1495.93,684.842 1496.49,684.842 1497.05,684.842 1497.61,684.842 1498.16,684.842 1498.72,684.842 1499.28,684.842 1499.84,684.842 1500.4,684.842 1500.96,684.842 1501.52,684.842 1502.08,684.842 1502.64,684.842 1503.2,684.842 1503.76,684.842 1504.32,684.842 1504.88,684.842 1505.44,684.842 1505.99,684.842 1506.55,684.842 1507.11,684.842 1507.67,684.842 1508.23,684.842 1508.79,684.842 1509.35,684.842 1509.91,684.842 1510.47,684.842 1511.03,684.842 1511.59,684.842 1512.15,684.842 1512.71,684.842 1513.26,684.842 1513.82,684.842 1514.38,684.842 1514.94,684.842 1515.5,684.842 1516.06,684.842 1516.62,684.842 1517.18,684.842 1517.74,684.842 1518.3,684.842 1518.86,684.842 1519.42,684.842 1519.98,684.842 1520.53,684.842 1521.09,684.842 1521.65,684.842 1522.21,684.842 1522.77,684.842 1523.33,684.842 1523.89,684.842 1524.45,684.842 1525.01,684.842 1525.57,684.842 1526.13,684.842 1526.69,684.842 1527.25,684.842 1527.81,684.842 1528.36,684.842 1528.92,684.842 1529.48,684.842 1530.04,684.842 1530.6,684.842 1531.16,684.842 1531.72,684.842 1532.28,684.842 1532.84,684.842 1533.4,684.842 1533.96,684.842 1534.52,684.842 1535.08,684.842 1535.63,684.842 1536.19,684.842 1536.75,684.842 1537.31,684.842 1537.87,684.842 1538.43,684.842 1538.99,684.842 1539.55,684.842 1540.11,684.842 1540.67,684.842 1541.23,684.842 1541.79,684.842 1542.35,684.842 1542.9,684.842 1543.46,684.842 1544.02,684.842 1544.58,684.842 1545.14,684.842 1545.7,684.842 1546.26,684.842 1546.82,684.842 1547.38,684.842 1547.94,684.842 1548.5,684.842 1549.06,684.842 1549.62,684.842 1550.18,684.842 1550.73,684.842 1551.29,684.842 1551.85,684.842 1552.41,684.842 1552.97,684.842 1553.53,684.842 1554.09,684.842 1554.65,684.842 1555.21,684.842 1555.77,684.842 1556.33,684.842 1556.89,684.842 1557.45,684.842 1558,684.842 1558.56,684.842 1559.12,684.842 1559.68,684.842 1560.24,684.842 1560.8,684.842 1561.36,684.842 1561.92,684.842 1562.48,684.842 1563.04,684.842 1563.6,684.842 1564.16,684.842 1564.72,684.842 1565.28,684.842 1565.83,684.842 1566.39,684.842 1566.95,684.842 1567.51,684.842 1568.07,684.842 1568.63,684.842 1569.19,684.842 1569.75,684.842 1570.31,684.842 1570.87,684.842 1571.43,684.842 1571.99,684.842 1572.55,684.842 1573.1,684.842 1573.66,684.842 1574.22,684.842 1574.78,684.842 1575.34,684.842 1575.9,684.842 1576.46,684.842 1577.02,684.842 1577.58,684.842 1578.14,684.842 1578.7,684.842 1579.26,684.842 1579.82,684.842 1580.37,684.842 1580.93,684.842 1581.49,684.842 1582.05,684.842 1582.61,684.842 1583.17,684.842 1583.73,684.842 1584.29,684.842 1584.85,684.842 1585.41,684.842 1585.97,684.842 1586.53,684.842 1587.09,684.842 1587.65,684.842 1588.2,684.842 1588.76,684.842 1589.32,684.842 1589.88,684.842 1590.44,684.842 1591,684.842 1591.56,684.842 1592.12,684.842 1592.68,684.842 1593.24,684.842 1593.8,684.842 1594.36,684.842 1594.92,684.842 1595.47,684.842 1596.03,684.842 1596.59,684.842 1597.15,684.842 1597.71,684.842 1598.27,684.842 1598.83,684.842 1599.39,684.842 1599.95,684.842 1600.51,684.842 1601.07,684.842 1601.63,684.842 1602.19,684.842 1602.74,684.842 1603.3,684.842 1603.86,684.842 1604.42,684.842 1604.98,684.842 1605.54,684.842 1606.1,684.842 1606.66,684.842 1607.22,684.842 1607.78,684.842 1608.34,684.842 1608.9,684.842 1609.46,684.842 1610.02,684.842 1610.57,684.842 1611.13,684.842 1611.69,684.842 1612.25,684.842 1612.81,684.842 1613.37,684.842 1613.93,684.842 1614.49,684.842 1615.05,684.842 1615.61,684.842 1616.17,684.842 1616.73,684.842 1617.29,684.842 1617.84,684.842 1618.4,684.842 1618.96,684.842 1619.52,684.842 1620.08,684.842 1620.64,684.842 1621.2,684.842 1621.76,684.842 1622.32,684.842 1622.88,684.842 1623.44,684.842 1624,684.842 1624.56,684.842 1625.11,684.842 1625.67,684.842 1626.23,684.842 1626.79,684.842 1627.35,684.842 1627.91,684.842 1628.47,684.842 1629.03,684.842 1629.59,684.842 1630.15,684.842 1630.71,684.842 1631.27,684.842 1631.83,684.842 1632.39,684.842 1632.94,684.842 1633.5,684.842 1634.06,684.842 1634.62,684.842 1635.18,684.842 1635.74,684.842 1636.3,684.842 1636.86,684.842 1637.42,684.842 1637.98,684.842 1638.54,684.842 1639.1,684.842 1639.66,684.842 1640.21,684.842 1640.77,684.842 1641.33,684.842 1641.89,684.842 1642.45,684.842 1643.01,684.842 1643.57,684.842 1644.13,684.842 1644.69,684.842 1645.25,684.842 1645.81,684.842 1646.37,684.842 1646.93,684.842 1647.48,684.842 1648.04,684.842 1648.6,684.842 1649.16,684.842 1649.72,684.842 1650.28,684.842 1650.84,684.842 1651.4,684.842 1651.96,684.842 1652.52,684.842 1653.08,684.842 1653.64,684.842 1654.2,684.842 1654.76,684.842 1655.31,684.842 1655.87,684.842 1656.43,684.842 1656.99,684.842 1657.55,684.842 1658.11,684.842 1658.67,684.842 1659.23,684.842 1659.79,684.842 1660.35,684.842 1660.91,684.842 1661.47,684.842 1662.03,684.842 1662.58,684.842 1663.14,684.842 1663.7,684.842 1664.26,684.842 1664.82,684.842 1665.38,684.842 1665.94,684.842 1666.5,684.842 1667.06,684.842 1667.62,684.842 1668.18,684.842 1668.74,684.842 1669.3,684.842 1669.85,684.842 1670.41,684.842 1670.97,684.842 1671.53,684.842 1672.09,684.842 1672.65,684.842 1673.21,684.842 1673.77,684.842 1674.33,684.842 1674.89,684.842 1675.45,684.842 1676.01,684.842 1676.57,684.842 1677.13,684.842 1677.68,684.842 1678.24,684.842 1678.8,684.842 1679.36,684.842 1679.92,684.842 1680.48,684.842 1681.04,684.842 1681.6,684.842 1682.16,684.842 1682.72,684.842 1683.28,684.842 1683.84,684.842 1684.4,684.842 1684.95,684.842 1685.51,684.842 1686.07,684.842 1686.63,684.842 1687.19,684.842 1687.75,684.842 1688.31,684.842 1688.87,684.842 1689.43,684.842 1689.99,684.842 1690.55,684.842 1691.11,684.842 1691.67,684.842 1692.23,684.842 1692.78,684.842 1693.34,684.842 1693.9,684.842 1694.46,684.842 1695.02,684.842 1695.58,684.842 1696.14,684.842 1696.7,684.842 1697.26,684.842 1697.82,684.842 1698.38,684.842 1698.94,684.842 1699.5,684.842 1700.05,684.842 1700.61,684.842 1701.17,684.842 1701.73,684.842 1702.29,684.842 1702.85,684.842 1703.41,684.842 1703.97,684.842 1704.53,684.842 1705.09,684.842 1705.65,684.842 1706.21,684.842 1706.77,684.842 1707.32,684.842 1707.88,684.842 1708.44,684.842 1709,684.842 1709.56,684.842 1710.12,684.842 1710.68,684.842 1711.24,684.842 1711.8,684.842 1712.36,684.842 1712.92,684.842 1713.48,684.842 1714.04,684.842 1714.6,684.842 1715.15,684.842 1715.71,684.842 1716.27,684.842 1716.83,684.842 1717.39,684.842 1717.95,684.842 1718.51,684.842 1719.07,684.842 1719.63,684.842 1720.19,684.842 1720.75,684.842 1721.31,684.842 1721.87,684.842 1722.42,684.842 1722.98,684.842 1723.54,684.842 1724.1,684.842 1724.66,684.842 1725.22,684.842 1725.78,684.842 1726.34,684.842 1726.9,684.842 1727.46,684.842 1728.02,684.842 1728.58,684.842 1729.14,684.842 1729.69,684.842 1730.25,684.842 1730.81,684.842 1731.37,684.842 1731.93,684.842 1732.49,684.842 1733.05,684.842 1733.61,684.842 1734.17,684.842 1734.73,684.842 1735.29,684.842 1735.85,684.842 1736.41,684.842 1736.97,684.842 1737.52,684.842 1738.08,684.842 1738.64,684.842 1739.2,684.842 1739.76,684.842 1740.32,684.842 1740.88,684.842 1741.44,684.842 1742,684.842 1742.56,684.842 1743.12,684.842 1743.68,684.842 1744.24,684.842 1744.79,684.842 1745.35,684.842 1745.91,684.842 1746.47,684.842 1747.03,684.842 1747.59,684.842 1748.15,684.842 1748.71,684.842 1749.27,684.842 1749.83,684.842 1750.39,684.842 1750.95,684.842 1751.51,684.842 1752.06,684.842 1752.62,684.842 1753.18,684.842 1753.74,684.842 1754.3,684.842 1754.86,684.842 1755.42,684.842 1755.98,684.842 1756.54,684.842 1757.1,684.842 1757.66,684.842 1758.22,684.842 1758.78,684.842 1759.34,684.842 1759.89,684.842 1760.45,684.842 1761.01,684.842 1761.57,684.842 1762.13,684.842 1762.69,684.842 1763.25,684.842 1763.81,684.842 1764.37,684.842 1764.93,684.842 1765.49,684.842 1766.05,684.842 1766.61,684.842 1767.16,684.842 1767.72,684.842 1768.28,684.842 1768.84,684.842 1769.4,684.842 1769.96,684.842 1770.52,684.842 1771.08,684.842 1771.64,684.842 1772.2,684.842 1772.76,684.842 1773.32,684.842 1773.88,684.842 1774.43,684.842 1774.99,684.842 1775.55,684.842 1776.11,684.842 1776.67,684.842 1777.23,684.842 1777.79,684.842 1778.35,684.842 1778.91,684.842 1779.47,684.842 1780.03,684.842 1780.59,684.842 1781.15,684.842 1781.71,684.842 1782.26,684.842 1782.82,684.842 1783.38,684.842 1783.94,684.842 1784.5,684.842 1785.06,684.842 1785.62,684.842 1786.18,684.842 1786.74,684.842 1787.3,684.842 1787.86,684.842 1788.42,684.842 1788.98,684.842 1789.53,684.842 1790.09,684.842 1790.65,684.842 1791.21,684.842 1791.77,684.842 1792.33,684.842 1792.89,684.842 1793.45,684.842 1794.01,684.842 1794.57,684.842 1795.13,684.842 1795.69,684.842 1796.25,684.842 1796.8,684.842 1797.36,684.842 1797.92,684.842 1798.48,684.842 1799.04,684.842 1799.6,684.842 1800.16,684.842 1800.72,684.842 1801.28,684.842 1801.84,684.842 1802.4,684.842 1802.96,684.842 1803.52,684.842 1804.08,684.842 1804.63,684.842 1805.19,684.842 1805.75,684.842 1806.31,684.842 1806.87,684.842 1807.43,684.842 1807.99,684.842 1808.55,684.842 1809.11,684.842 1809.67,684.842 1810.23,684.842 1810.79,684.842 1811.35,684.842 1811.9,684.842 1812.46,684.842 1813.02,684.842 1813.58,684.842 1814.14,684.842 1814.7,684.842 1815.26,684.842 1815.82,684.842 1816.38,684.842 1816.94,684.842 1817.5,684.842 1818.06,684.842 1818.62,684.842 1819.18,684.842 1819.73,684.842 1820.29,684.842 1820.85,684.842 1821.41,684.842 1821.97,684.842 1822.53,684.842 1823.09,684.842 1823.65,684.842 1824.21,684.842 1824.77,684.842 1825.33,684.842 1825.89,684.842 1826.45,684.842 1827,684.842 1827.56,684.842 1828.12,684.842 1828.68,684.842 1829.24,684.842 1829.8,684.842 1830.36,684.842 1830.92,684.842 1831.48,684.842 1832.04,684.842 1832.6,684.842 1833.16,684.842 1833.72,684.842 1834.27,684.842 1834.83,684.842 1835.39,684.842 1835.95,684.842 1836.51,684.842 1837.07,684.842 1837.63,684.842 1838.19,684.842 \"/>\n<path clip-path=\"url(#clip443)\" d=\"M720.247 684.373 L720.806 684.373 L721.365 684.373 L721.924 684.373 L722.484 684.373 L723.043 684.373 L723.602 684.373 L724.161 684.373 L724.721 684.373 L725.28 684.373 L725.839 684.373 L726.398 684.373 L726.958 684.373 L727.517 684.373 L728.076 684.373 L728.635 684.373 L729.195 684.373 L729.754 684.373 L730.313 684.373 L730.872 684.373 L731.432 684.373 L731.991 684.373 L732.55 684.373 L733.109 684.373 L733.669 684.373 L734.228 684.373 L734.787 684.373 L735.346 684.373 L735.906 684.373 L736.465 684.373 L737.024 684.373 L737.583 684.373 L738.143 684.373 L738.702 684.373 L739.261 684.373 L739.82 684.373 L740.38 684.373 L740.939 684.373 L741.498 684.373 L742.057 684.373 L742.617 684.373 L743.176 684.373 L743.735 684.373 L744.294 684.373 L744.854 684.373 L745.413 684.373 L745.972 684.373 L746.531 684.373 L747.091 684.373 L747.65 684.373 L748.209 684.373 L748.768 684.373 L749.328 684.373 L749.887 684.373 L750.446 684.373 L751.005 684.373 L751.565 684.373 L752.124 684.373 L752.683 684.373 L753.242 684.373 L753.802 684.373 L754.361 684.373 L754.92 684.373 L755.479 684.373 L756.039 684.373 L756.598 684.373 L757.157 684.373 L757.716 684.373 L758.276 684.373 L758.835 684.373 L759.394 684.373 L759.953 684.373 L760.513 684.373 L761.072 684.373 L761.631 684.373 L762.19 684.373 L762.75 684.373 L763.309 684.373 L763.868 684.373 L764.427 684.373 L764.987 684.373 L765.546 684.373 L766.105 684.373 L766.664 684.373 L767.224 684.373 L767.783 684.373 L768.342 684.373 L768.901 684.373 L769.461 684.373 L770.02 684.373 L770.579 684.373 L771.138 684.373 L771.698 684.373 L772.257 684.373 L772.816 684.373 L773.375 684.373 L773.935 684.373 L774.494 684.373 L775.053 684.373 L775.612 684.373 L776.172 684.373 L776.731 684.373 L777.29 684.373 L777.849 684.373 L778.409 684.373 L778.968 684.373 L779.527 684.373 L780.086 684.373 L780.646 684.373 L781.205 684.373 L781.764 684.373 L782.323 684.373 L782.883 684.373 L783.442 684.373 L784.001 684.373 L784.56 684.373 L785.12 684.373 L785.679 684.373 L786.238 684.373 L786.797 684.373 L787.357 684.373 L787.916 684.373 L788.475 684.373 L789.034 684.373 L789.594 684.373 L790.153 684.373 L790.712 684.373 L791.271 684.373 L791.831 684.373 L792.39 684.373 L792.949 684.373 L793.508 684.373 L794.068 684.373 L794.627 684.373 L795.186 684.373 L795.745 684.373 L796.305 684.373 L796.864 684.373 L797.423 684.373 L797.982 684.373 L798.542 684.373 L799.101 684.373 L799.66 684.373 L800.219 684.373 L800.779 684.373 L801.338 684.373 L801.897 684.373 L802.456 684.373 L803.016 684.373 L803.575 684.373 L804.134 684.373 L804.693 684.373 L805.253 684.373 L805.812 684.373 L806.371 684.373 L806.931 684.373 L807.49 684.373 L808.049 684.373 L808.608 684.373 L809.168 684.373 L809.727 684.373 L810.286 684.373 L810.845 684.373 L811.405 684.373 L811.964 684.373 L812.523 684.373 L813.082 684.373 L813.642 684.373 L814.201 684.373 L814.76 684.373 L815.319 684.373 L815.879 684.373 L816.438 684.373 L816.997 684.373 L817.556 684.373 L818.116 684.373 L818.675 684.373 L819.234 684.373 L819.793 684.373 L820.353 684.373 L820.912 684.373 L821.471 684.373 L822.03 684.373 L822.59 684.373 L823.149 684.373 L823.708 684.373 L824.267 684.373 L824.827 684.373 L825.386 684.373 L825.945 684.373 L826.504 684.373 L827.064 684.373 L827.623 684.373 L828.182 684.373 L828.741 684.373 L829.301 684.373 L829.86 684.373 L830.419 684.373 L830.978 684.373 L831.538 684.373 L832.097 684.373 L832.656 684.373 L833.215 684.373 L833.775 684.373 L834.334 684.373 L834.893 684.373 L835.452 684.373 L836.012 684.373 L836.571 684.373 L837.13 684.373 L837.689 684.373 L838.249 684.373 L838.808 684.373 L839.367 684.373 L839.926 684.373 L840.486 684.373 L841.045 684.373 L841.604 684.373 L842.163 684.373 L842.723 684.373 L843.282 684.373 L843.841 684.373 L844.4 684.373 L844.96 684.373 L845.519 684.373 L846.078 684.373 L846.637 684.373 L847.197 684.373 L847.756 684.373 L848.315 684.373 L848.874 684.373 L849.434 684.373 L849.993 684.373 L850.552 684.373 L851.111 684.373 L851.671 684.373 L852.23 684.373 L852.789 684.373 L853.348 684.373 L853.908 684.373 L854.467 684.373 L855.026 684.373 L855.585 684.373 L856.145 684.373 L856.704 684.373 L857.263 684.373 L857.822 684.373 L858.382 684.373 L858.941 684.373 L859.5 684.373 L860.059 684.373 L860.619 684.373 L861.178 684.373 L861.737 684.373 L862.296 684.373 L862.856 684.373 L863.415 684.373 L863.974 684.373 L864.533 684.373 L865.093 684.373 L865.652 684.373 L866.211 684.373 L866.77 684.373 L867.33 684.373 L867.889 684.373 L868.448 684.373 L869.007 684.373 L869.567 684.373 L870.126 684.373 L870.685 684.373 L871.244 684.373 L871.804 684.373 L872.363 684.373 L872.922 684.373 L873.481 684.373 L874.041 684.373 L874.6 684.373 L875.159 684.373 L875.718 684.373 L876.278 684.373 L876.837 684.373 L877.396 684.373 L877.955 684.373 L878.515 684.373 L879.074 684.373 L879.633 684.373 L880.192 684.373 L880.752 684.373 L881.311 684.373 L881.87 684.373 L882.429 684.373 L882.989 684.373 L883.548 684.373 L884.107 684.373 L884.666 684.373 L885.226 684.373 L885.785 684.373 L886.344 684.373 L886.903 684.373 L887.463 684.373 L888.022 684.373 L888.581 684.373 L889.14 684.373 L889.7 684.373 L890.259 684.373 L890.818 684.373 L891.377 684.373 L891.937 684.373 L892.496 684.373 L893.055 684.373 L893.614 684.373 L894.174 684.373 L894.733 684.373 L895.292 684.373 L895.851 684.373 L896.411 684.373 L896.97 684.373 L897.529 684.373 L898.088 684.373 L898.648 684.373 L899.207 684.373 L899.766 684.373 L900.325 684.373 L900.885 684.373 L901.444 684.373 L902.003 684.373 L902.562 684.373 L903.122 684.373 L903.681 684.373 L904.24 684.373 L904.799 684.373 L905.359 684.373 L905.918 684.373 L906.477 684.373 L907.036 684.373 L907.596 684.373 L908.155 684.373 L908.714 684.373 L909.273 684.373 L909.833 684.373 L910.392 684.373 L910.951 684.373 L911.51 684.373 L912.07 684.373 L912.629 684.373 L913.188 684.373 L913.747 684.373 L914.307 684.373 L914.866 684.373 L915.425 684.373 L915.984 684.373 L916.544 684.373 L917.103 684.373 L917.662 684.373 L918.221 684.373 L918.781 684.373 L919.34 684.373 L919.899 684.373 L920.458 684.373 L921.018 684.373 L921.577 684.373 L922.136 684.373 L922.695 684.373 L923.255 684.373 L923.814 684.373 L924.373 684.373 L924.932 684.373 L925.492 684.373 L926.051 684.373 L926.61 684.373 L927.169 684.373 L927.729 684.373 L928.288 684.373 L928.847 684.373 L929.406 684.373 L929.966 684.373 L930.525 684.373 L931.084 684.373 L931.644 684.373 L932.203 684.373 L932.762 684.373 L933.321 684.373 L933.881 684.373 L934.44 684.373 L934.999 684.373 L935.558 684.373 L936.118 684.373 L936.677 684.373 L937.236 684.373 L937.795 684.373 L938.355 684.373 L938.914 684.373 L939.473 684.373 L940.032 684.373 L940.592 684.373 L941.151 684.373 L941.71 684.373 L942.269 684.373 L942.829 684.373 L943.388 684.373 L943.947 684.373 L944.506 684.373 L945.066 684.373 L945.625 684.373 L946.184 684.373 L946.743 684.373 L947.303 684.373 L947.862 684.373 L948.421 684.373 L948.98 684.373 L949.54 684.373 L950.099 684.373 L950.658 684.373 L951.217 684.373 L951.777 684.373 L952.336 684.373 L952.895 684.373 L953.454 684.373 L954.014 684.373 L954.573 684.373 L955.132 684.373 L955.691 684.373 L956.251 684.373 L956.81 684.373 L957.369 684.373 L957.928 684.373 L958.488 684.373 L959.047 684.373 L959.606 684.373 L960.165 684.373 L960.725 684.373 L961.284 684.373 L961.843 684.373 L962.402 684.373 L962.962 684.373 L963.521 684.373 L964.08 684.373 L964.639 684.373 L965.199 684.373 L965.758 684.373 L966.317 684.373 L966.876 684.373 L967.436 684.373 L967.995 684.373 L968.554 684.373 L969.113 684.373 L969.673 684.373 L970.232 684.373 L970.791 684.373 L971.35 684.373 L971.91 684.373 L972.469 684.373 L973.028 684.373 L973.587 684.373 L974.147 684.373 L974.706 684.373 L975.265 684.373 L975.824 684.373 L976.384 684.373 L976.943 684.373 L977.502 684.373 L978.061 684.373 L978.621 684.373 L979.18 684.373 L979.739 684.373 L980.298 684.373 L980.858 684.373 L981.417 684.373 L981.976 684.373 L982.535 684.373 L983.095 684.373 L983.654 684.373 L984.213 684.373 L984.772 684.373 L985.332 684.373 L985.891 684.373 L986.45 684.373 L987.009 684.373 L987.569 684.373 L988.128 684.373 L988.687 684.373 L989.246 684.373 L989.806 684.373 L990.365 684.373 L990.924 684.373 L991.483 684.373 L992.043 684.373 L992.602 684.373 L993.161 684.373 L993.72 684.373 L994.28 684.373 L994.839 684.373 L995.398 684.373 L995.957 684.373 L996.517 684.373 L997.076 684.373 L997.635 684.373 L998.194 684.373 L998.754 684.373 L999.313 684.373 L999.872 684.373 L1000.43 684.373 L1000.99 684.373 L1001.55 684.373 L1002.11 684.373 L1002.67 684.373 L1003.23 684.373 L1003.79 684.373 L1004.35 684.373 L1004.91 684.373 L1005.46 684.373 L1006.02 684.373 L1006.58 684.373 L1007.14 684.373 L1007.7 684.373 L1008.26 684.373 L1008.82 684.373 L1009.38 684.373 L1009.94 684.373 L1010.5 684.373 L1011.06 684.373 L1011.62 684.373 L1012.18 684.373 L1012.73 684.373 L1013.29 684.373 L1013.85 684.373 L1014.41 684.373 L1014.97 684.373 L1015.53 684.373 L1016.09 684.373 L1016.65 684.373 L1017.21 684.373 L1017.77 684.373 L1018.33 684.373 L1018.89 684.373 L1019.45 684.373 L1020.01 684.373 L1020.56 684.373 L1021.12 684.373 L1021.68 684.373 L1022.24 684.373 L1022.8 684.373 L1023.36 684.373 L1023.92 684.373 L1024.48 684.373 L1025.04 684.373 L1025.6 684.373 L1026.16 684.373 L1026.72 684.373 L1027.28 684.373 L1027.83 684.373 L1028.39 684.373 L1028.95 684.373 L1029.51 684.373 L1030.07 684.373 L1030.63 684.373 L1031.19 684.373 L1031.75 684.373 L1032.31 684.373 L1032.87 684.373 L1033.43 684.373 L1033.99 684.373 L1034.55 684.373 L1035.1 684.373 L1035.66 684.373 L1036.22 684.373 L1036.78 684.373 L1037.34 684.373 L1037.9 684.373 L1038.46 684.373 L1039.02 684.373 L1039.58 684.373 L1040.14 684.373 L1040.7 684.373 L1041.26 684.373 L1041.82 684.373 L1042.38 684.373 L1042.93 684.373 L1043.49 684.373 L1044.05 684.373 L1044.61 684.373 L1045.17 684.373 L1045.73 684.373 L1046.29 684.373 L1046.85 684.373 L1047.41 684.373 L1047.97 684.373 L1048.53 684.373 L1049.09 684.373 L1049.65 684.373 L1050.2 684.373 L1050.76 684.373 L1051.32 684.373 L1051.88 684.373 L1052.44 684.373 L1053 684.373 L1053.56 684.373 L1054.12 684.373 L1054.68 684.373 L1055.24 684.373 L1055.8 684.373 L1056.36 684.373 L1056.92 684.373 L1057.48 684.373 L1058.03 684.373 L1058.59 684.373 L1059.15 684.373 L1059.71 684.373 L1060.27 684.373 L1060.83 684.373 L1061.39 684.373 L1061.95 684.373 L1062.51 684.373 L1063.07 684.373 L1063.63 684.373 L1064.19 684.373 L1064.75 684.373 L1065.3 684.373 L1065.86 684.373 L1066.42 684.373 L1066.98 684.373 L1067.54 684.373 L1068.1 684.373 L1068.66 684.373 L1069.22 684.373 L1069.78 684.373 L1070.34 684.373 L1070.9 684.373 L1071.46 684.373 L1072.02 684.373 L1072.57 684.373 L1073.13 684.373 L1073.69 684.373 L1074.25 684.373 L1074.81 684.373 L1075.37 684.373 L1075.93 684.373 L1076.49 684.373 L1077.05 684.373 L1077.61 684.373 L1078.17 684.373 L1078.73 684.373 L1079.29 684.373 L1079.85 684.373 L1080.4 684.373 L1080.96 684.373 L1081.52 684.373 L1082.08 684.373 L1082.64 684.373 L1083.2 684.373 L1083.76 684.373 L1084.32 684.373 L1084.88 684.373 L1085.44 684.373 L1086 684.373 L1086.56 684.373 L1087.12 684.373 L1087.67 684.373 L1088.23 684.373 L1088.79 684.373 L1089.35 684.373 L1089.91 684.373 L1090.47 684.373 L1091.03 684.373 L1091.59 684.373 L1092.15 684.373 L1092.71 684.373 L1093.27 684.373 L1093.83 684.373 L1094.39 684.373 L1094.94 684.373 L1095.5 684.373 L1096.06 684.373 L1096.62 684.373 L1097.18 684.373 L1097.74 684.373 L1098.3 684.373 L1098.86 684.373 L1099.42 684.373 L1099.98 684.373 L1100.54 684.373 L1101.1 684.373 L1101.66 684.373 L1102.22 684.373 L1102.77 684.373 L1103.33 684.373 L1103.89 684.373 L1104.45 684.373 L1105.01 684.373 L1105.57 684.373 L1106.13 684.373 L1106.69 684.373 L1107.25 684.373 L1107.81 684.373 L1108.37 684.373 L1108.93 684.373 L1109.49 684.373 L1110.04 684.373 L1110.6 684.373 L1111.16 684.373 L1111.72 684.373 L1112.28 684.373 L1112.84 684.373 L1113.4 684.373 L1113.96 684.373 L1114.52 684.373 L1115.08 684.373 L1115.64 684.373 L1116.2 684.373 L1116.76 684.373 L1117.31 684.373 L1117.87 684.373 L1118.43 684.373 L1118.99 684.373 L1119.55 684.373 L1120.11 684.373 L1120.67 684.373 L1121.23 684.373 L1121.79 684.373 L1122.35 684.373 L1122.91 684.373 L1123.47 684.373 L1124.03 684.373 L1124.59 684.373 L1125.14 684.373 L1125.7 684.373 L1126.26 684.373 L1126.82 684.373 L1127.38 684.373 L1127.94 684.373 L1128.5 684.373 L1129.06 684.373 L1129.62 684.373 L1130.18 684.373 L1130.74 684.373 L1131.3 684.373 L1131.86 684.373 L1132.41 684.373 L1132.97 684.373 L1133.53 684.373 L1134.09 684.373 L1134.65 684.373 L1135.21 684.373 L1135.77 684.373 L1136.33 684.373 L1136.89 684.373 L1137.45 684.373 L1138.01 684.373 L1138.57 684.373 L1139.13 684.373 L1139.68 684.373 L1140.24 684.373 L1140.8 684.373 L1141.36 684.373 L1141.92 684.373 L1142.48 684.373 L1143.04 684.373 L1143.6 684.373 L1144.16 684.373 L1144.72 684.373 L1145.28 684.373 L1145.84 684.373 L1146.4 684.373 L1146.96 684.373 L1147.51 684.373 L1148.07 684.373 L1148.63 684.373 L1149.19 684.373 L1149.75 684.373 L1150.31 684.373 L1150.87 684.373 L1151.43 684.373 L1151.99 684.373 L1152.55 684.373 L1153.11 684.373 L1153.67 684.373 L1154.23 684.373 L1154.78 684.373 L1155.34 684.373 L1155.9 684.373 L1156.46 684.373 L1157.02 684.373 L1157.58 684.373 L1158.14 684.373 L1158.7 684.373 L1159.26 684.373 L1159.82 684.373 L1160.38 684.373 L1160.94 684.373 L1161.5 684.373 L1162.05 684.373 L1162.61 684.373 L1163.17 684.373 L1163.73 684.373 L1164.29 684.373 L1164.85 684.373 L1165.41 684.373 L1165.97 684.373 L1166.53 684.373 L1167.09 684.373 L1167.65 684.373 L1168.21 684.373 L1168.77 684.373 L1169.33 684.373 L1169.88 684.373 L1170.44 684.373 L1171 684.373 L1171.56 684.373 L1172.12 684.373 L1172.68 684.373 L1173.24 684.373 L1173.8 684.373 L1174.36 684.373 L1174.92 684.373 L1175.48 684.373 L1176.04 684.373 L1176.6 684.373 L1177.15 684.373 L1177.71 684.373 L1178.27 684.373 L1178.83 684.373 L1179.39 684.373 L1179.95 684.373 L1180.51 684.373 L1181.07 684.373 L1181.63 684.373 L1182.19 684.373 L1182.75 684.373 L1183.31 684.373 L1183.87 684.373 L1184.43 684.373 L1184.98 684.373 L1185.54 684.373 L1186.1 684.373 L1186.66 684.373 L1187.22 684.373 L1187.78 684.373 L1188.34 684.373 L1188.9 684.373 L1189.46 684.373 L1190.02 684.373 L1190.58 684.373 L1191.14 684.373 L1191.7 684.373 L1192.25 684.373 L1192.81 684.373 L1193.37 684.373 L1193.93 684.373 L1194.49 684.373 L1195.05 684.373 L1195.61 684.373 L1196.17 684.373 L1196.73 684.373 L1197.29 684.373 L1197.85 684.373 L1198.41 684.373 L1198.97 684.373 L1199.52 684.373 L1200.08 684.373 L1200.64 684.373 L1201.2 684.373 L1201.76 684.373 L1202.32 684.373 L1202.88 684.373 L1203.44 684.373 L1204 684.373 L1204.56 684.373 L1205.12 684.373 L1205.68 684.373 L1206.24 684.373 L1206.8 684.373 L1207.35 684.373 L1207.91 684.373 L1208.47 684.373 L1209.03 684.373 L1209.59 684.373 L1210.15 684.373 L1210.71 684.373 L1211.27 684.373 L1211.83 684.373 L1212.39 684.373 L1212.95 684.373 L1213.51 684.373 L1214.07 684.373 L1214.62 684.373 L1215.18 684.373 L1215.74 684.373 L1216.3 684.373 L1216.86 684.373 L1217.42 684.373 L1217.98 684.373 L1218.54 684.373 L1219.1 684.373 L1219.66 684.373 L1220.22 684.373 L1220.78 684.373 L1221.34 684.373 L1221.89 684.373 L1222.45 684.373 L1223.01 684.373 L1223.57 684.373 L1224.13 684.373 L1224.69 684.373 L1225.25 684.373 L1225.81 684.373 L1226.37 684.373 L1226.93 684.373 L1227.49 684.373 L1228.05 684.373 L1228.61 684.373 L1229.17 684.373 L1229.72 684.373 L1230.28 684.373 L1230.84 684.373 L1231.4 684.373 L1231.96 684.373 L1232.52 684.373 L1233.08 684.373 L1233.64 684.373 L1234.2 684.373 L1234.76 684.373 L1235.32 684.373 L1235.88 684.373 L1236.44 684.373 L1236.99 684.373 L1237.55 684.373 L1238.11 684.373 L1238.67 684.373 L1239.23 684.373 L1239.79 684.373 L1240.35 684.373 L1240.91 684.373 L1241.47 684.373 L1242.03 684.373 L1242.59 684.373 L1243.15 684.373 L1243.71 684.373 L1244.26 684.373 L1244.82 684.373 L1245.38 684.373 L1245.94 684.373 L1246.5 684.373 L1247.06 684.373 L1247.62 684.373 L1248.18 684.373 L1248.74 684.373 L1249.3 684.373 L1249.86 684.373 L1250.42 684.373 L1250.98 684.373 L1251.54 684.373 L1252.09 684.373 L1252.65 684.373 L1253.21 684.373 L1253.77 684.373 L1254.33 684.373 L1254.89 684.373 L1255.45 684.373 L1256.01 684.373 L1256.57 684.373 L1257.13 684.373 L1257.69 684.373 L1258.25 684.373 L1258.81 684.373 L1259.36 684.373 L1259.92 684.373 L1260.48 684.373 L1261.04 684.373 L1261.6 684.373 L1262.16 684.373 L1262.72 684.373 L1263.28 684.373 L1263.84 684.373 L1264.4 684.373 L1264.96 684.373 L1265.52 684.373 L1266.08 684.373 L1266.63 684.373 L1267.19 684.373 L1267.75 684.373 L1268.31 684.373 L1268.87 684.373 L1269.43 684.373 L1269.99 684.373 L1270.55 684.373 L1271.11 684.373 L1271.67 684.373 L1272.23 684.373 L1272.79 684.373 L1273.35 684.373 L1273.91 684.373 L1274.46 684.373 L1275.02 684.373 L1275.58 684.373 L1276.14 684.373 L1276.7 684.373 L1277.26 684.373 L1277.82 684.373 L1278.38 684.373 L1278.94 684.373 L1279.5 684.373 L1280.06 684.373 L1280.62 684.373 L1281.18 684.373 L1281.73 684.373 L1282.29 684.373 L1282.85 684.373 L1283.41 684.373 L1283.97 684.373 L1284.53 684.373 L1285.09 684.373 L1285.65 684.373 L1286.21 684.373 L1286.77 684.373 L1287.33 684.373 L1287.89 684.373 L1288.45 684.373 L1289 684.373 L1289.56 684.373 L1290.12 684.373 L1290.68 684.373 L1291.24 684.373 L1291.8 684.373 L1292.36 684.373 L1292.92 684.373 L1293.48 684.373 L1294.04 684.373 L1294.6 684.373 L1295.16 684.373 L1295.72 684.373 L1296.28 684.373 L1296.83 684.373 L1297.39 684.373 L1297.95 684.373 L1298.51 684.373 L1299.07 684.373 L1299.63 684.373 L1300.19 684.373 L1300.75 684.373 L1301.31 684.373 L1301.87 684.373 L1302.43 684.373 L1302.99 684.373 L1303.55 684.373 L1304.1 684.373 L1304.66 684.373 L1305.22 684.373 L1305.78 684.373 L1306.34 684.373 L1306.9 684.373 L1307.46 684.373 L1308.02 684.373 L1308.58 684.373 L1309.14 684.373 L1309.7 684.373 L1310.26 684.373 L1310.82 684.373 L1311.38 684.373 L1311.93 684.373 L1312.49 684.373 L1313.05 684.373 L1313.61 684.373 L1314.17 684.373 L1314.73 684.373 L1315.29 684.373 L1315.85 684.373 L1316.41 684.373 L1316.97 684.373 L1317.53 684.373 L1318.09 684.373 L1318.65 684.373 L1319.2 684.373 L1319.76 684.373 L1320.32 684.373 L1320.88 684.373 L1321.44 684.373 L1322 684.373 L1322.56 684.373 L1323.12 684.373 L1323.68 684.373 L1324.24 684.373 L1324.8 684.373 L1325.36 684.373 L1325.92 684.373 L1326.47 684.373 L1327.03 684.373 L1327.59 684.373 L1328.15 684.373 L1328.71 684.373 L1329.27 684.373 L1329.83 684.373 L1330.39 684.373 L1330.95 684.373 L1331.51 684.373 L1332.07 684.373 L1332.63 684.373 L1333.19 684.373 L1333.75 684.373 L1334.3 684.373 L1334.86 684.373 L1335.42 684.373 L1335.98 684.373 L1336.54 684.373 L1337.1 684.373 L1337.66 684.373 L1338.22 684.373 L1338.78 684.373 L1339.34 684.373 L1339.9 684.373 L1340.46 684.373 L1341.02 684.373 L1341.57 684.373 L1342.13 684.373 L1342.69 684.373 L1343.25 684.373 L1343.81 684.373 L1344.37 684.373 L1344.93 684.373 L1345.49 684.373 L1346.05 684.373 L1346.61 684.373 L1347.17 684.373 L1347.73 684.373 L1348.29 684.373 L1348.84 684.373 L1349.4 684.373 L1349.96 684.373 L1350.52 684.373 L1351.08 684.373 L1351.64 684.373 L1352.2 684.373 L1352.76 684.373 L1353.32 684.373 L1353.88 684.373 L1354.44 684.373 L1355 684.373 L1355.56 684.373 L1356.12 684.373 L1356.67 684.373 L1357.23 684.373 L1357.79 684.373 L1358.35 684.373 L1358.91 684.373 L1359.47 684.373 L1360.03 684.373 L1360.59 684.373 L1361.15 684.373 L1361.71 684.373 L1362.27 684.373 L1362.83 684.373 L1363.39 684.373 L1363.94 684.373 L1364.5 684.373 L1365.06 684.373 L1365.62 684.373 L1366.18 684.373 L1366.74 684.373 L1367.3 684.373 L1367.86 684.373 L1368.42 684.373 L1368.98 684.373 L1369.54 684.373 L1370.1 684.373 L1370.66 684.373 L1371.21 684.373 L1371.77 684.373 L1372.33 684.373 L1372.89 684.373 L1373.45 684.373 L1374.01 684.373 L1374.57 684.373 L1375.13 684.373 L1375.69 684.373 L1376.25 684.373 L1376.81 684.373 L1377.37 684.373 L1377.93 684.373 L1378.49 684.373 L1379.04 684.373 L1379.6 684.373 L1380.16 684.373 L1380.72 684.373 L1381.28 684.373 L1381.84 684.373 L1382.4 684.373 L1382.96 684.373 L1383.52 684.373 L1384.08 684.373 L1384.64 684.373 L1385.2 684.373 L1385.76 684.373 L1386.31 684.373 L1386.87 684.373 L1387.43 684.373 L1387.99 684.373 L1388.55 684.373 L1389.11 684.373 L1389.67 684.373 L1390.23 684.373 L1390.79 684.373 L1391.35 684.373 L1391.91 684.373 L1392.47 684.373 L1393.03 684.373 L1393.58 684.373 L1394.14 684.373 L1394.7 684.373 L1395.26 684.373 L1395.82 684.373 L1396.38 684.373 L1396.94 684.373 L1397.5 684.373 L1398.06 684.373 L1398.62 684.373 L1399.18 684.373 L1399.74 684.373 L1400.3 684.373 L1400.86 684.373 L1401.41 684.373 L1401.97 684.373 L1402.53 684.373 L1403.09 684.373 L1403.65 684.373 L1404.21 684.373 L1404.77 684.373 L1405.33 684.373 L1405.89 684.373 L1406.45 684.373 L1407.01 684.373 L1407.57 684.373 L1408.13 684.373 L1408.68 684.373 L1409.24 684.373 L1409.8 684.373 L1410.36 684.373 L1410.92 684.373 L1411.48 684.373 L1412.04 684.373 L1412.6 684.373 L1413.16 684.373 L1413.72 684.373 L1414.28 684.373 L1414.84 684.373 L1415.4 684.373 L1415.95 684.373 L1416.51 684.373 L1417.07 684.373 L1417.63 684.373 L1418.19 684.373 L1418.75 684.373 L1419.31 684.373 L1419.87 684.373 L1420.43 684.373 L1420.99 684.373 L1421.55 684.373 L1422.11 684.373 L1422.67 684.373 L1423.23 684.373 L1423.78 684.373 L1424.34 684.373 L1424.9 684.373 L1425.46 684.373 L1426.02 684.373 L1426.58 684.373 L1427.14 684.373 L1427.7 684.373 L1428.26 684.373 L1428.82 684.373 L1429.38 684.373 L1429.94 684.373 L1430.5 684.373 L1431.05 684.373 L1431.61 684.373 L1432.17 684.373 L1432.73 684.373 L1433.29 684.373 L1433.85 684.373 L1434.41 684.373 L1434.97 684.373 L1435.53 684.373 L1436.09 684.373 L1436.65 684.373 L1437.21 684.373 L1437.77 684.373 L1438.33 684.373 L1438.88 684.373 L1439.44 684.373 L1440 684.373 L1440.56 684.373 L1441.12 684.373 L1441.68 684.373 L1442.24 684.373 L1442.8 684.373 L1443.36 684.373 L1443.92 684.373 L1444.48 684.373 L1445.04 684.373 L1445.6 684.373 L1446.15 684.373 L1446.71 684.373 L1447.27 684.373 L1447.83 684.373 L1448.39 684.373 L1448.95 684.373 L1449.51 684.373 L1450.07 684.373 L1450.63 684.373 L1451.19 684.373 L1451.75 684.373 L1452.31 684.373 L1452.87 684.373 L1453.42 684.373 L1453.98 684.373 L1454.54 684.373 L1455.1 684.373 L1455.66 684.373 L1456.22 684.373 L1456.78 684.373 L1457.34 684.373 L1457.9 684.373 L1458.46 684.373 L1459.02 684.373 L1459.58 684.373 L1460.14 684.373 L1460.7 684.373 L1461.25 684.373 L1461.81 684.373 L1462.37 684.373 L1462.93 684.373 L1463.49 684.373 L1464.05 684.373 L1464.61 684.373 L1465.17 684.373 L1465.73 684.373 L1466.29 684.373 L1466.85 684.373 L1467.41 684.373 L1467.97 684.373 L1468.52 684.373 L1469.08 684.373 L1469.64 684.373 L1470.2 684.373 L1470.76 684.373 L1471.32 684.373 L1471.88 684.373 L1472.44 684.373 L1473 684.373 L1473.56 684.373 L1474.12 684.373 L1474.68 684.373 L1475.24 684.373 L1475.79 684.373 L1476.35 684.373 L1476.91 684.373 L1477.47 684.373 L1478.03 684.373 L1478.59 684.373 L1479.15 684.373 L1479.71 684.373 L1480.27 684.373 L1480.83 684.373 L1481.39 684.373 L1481.95 684.373 L1482.51 684.373 L1483.07 684.373 L1483.62 684.373 L1484.18 684.373 L1484.74 684.373 L1485.3 684.373 L1485.86 684.373 L1486.42 684.373 L1486.98 684.373 L1487.54 684.373 L1488.1 684.373 L1488.66 684.373 L1489.22 684.373 L1489.78 684.373 L1490.34 684.373 L1490.89 684.373 L1491.45 684.373 L1492.01 684.373 L1492.57 684.373 L1493.13 684.373 L1493.69 684.373 L1494.25 684.373 L1494.81 684.373 L1495.37 684.373 L1495.93 684.373 L1496.49 684.373 L1497.05 684.373 L1497.61 684.373 L1498.16 684.373 L1498.72 684.373 L1499.28 684.373 L1499.84 684.373 L1500.4 684.373 L1500.96 684.373 L1501.52 684.373 L1502.08 684.373 L1502.64 684.373 L1503.2 684.373 L1503.76 684.373 L1504.32 684.373 L1504.88 684.373 L1505.44 684.373 L1505.99 684.373 L1506.55 684.373 L1507.11 684.373 L1507.67 684.373 L1508.23 684.373 L1508.79 684.373 L1509.35 684.373 L1509.91 684.373 L1510.47 684.373 L1511.03 684.373 L1511.59 684.373 L1512.15 684.373 L1512.71 684.373 L1513.26 684.373 L1513.82 684.373 L1514.38 684.373 L1514.94 684.373 L1515.5 684.373 L1516.06 684.373 L1516.62 684.373 L1517.18 684.373 L1517.74 684.373 L1518.3 684.373 L1518.86 684.373 L1519.42 684.373 L1519.98 684.373 L1520.53 684.373 L1521.09 684.373 L1521.65 684.373 L1522.21 684.373 L1522.77 684.373 L1523.33 684.373 L1523.89 684.373 L1524.45 684.373 L1525.01 684.373 L1525.57 684.373 L1526.13 684.373 L1526.69 684.373 L1527.25 684.373 L1527.81 684.373 L1528.36 684.373 L1528.92 684.373 L1529.48 684.373 L1530.04 684.373 L1530.6 684.373 L1531.16 684.373 L1531.72 684.373 L1532.28 684.373 L1532.84 684.373 L1533.4 684.373 L1533.96 684.373 L1534.52 684.373 L1535.08 684.373 L1535.63 684.373 L1536.19 684.373 L1536.75 684.373 L1537.31 684.373 L1537.87 684.373 L1538.43 684.373 L1538.99 684.373 L1539.55 684.373 L1540.11 684.373 L1540.67 684.373 L1541.23 684.373 L1541.79 684.373 L1542.35 684.373 L1542.9 684.373 L1543.46 684.373 L1544.02 684.373 L1544.58 684.373 L1545.14 684.373 L1545.7 684.373 L1546.26 684.373 L1546.82 684.373 L1547.38 684.373 L1547.94 684.373 L1548.5 684.373 L1549.06 684.373 L1549.62 684.373 L1550.18 684.373 L1550.73 684.373 L1551.29 684.373 L1551.85 684.373 L1552.41 684.373 L1552.97 684.373 L1553.53 684.373 L1554.09 684.373 L1554.65 684.373 L1555.21 684.373 L1555.77 684.373 L1556.33 684.373 L1556.89 684.373 L1557.45 684.373 L1558 684.373 L1558.56 684.373 L1559.12 684.373 L1559.68 684.373 L1560.24 684.373 L1560.8 684.373 L1561.36 684.373 L1561.92 684.373 L1562.48 684.373 L1563.04 684.373 L1563.6 684.373 L1564.16 684.373 L1564.72 684.373 L1565.28 684.373 L1565.83 684.373 L1566.39 684.373 L1566.95 684.373 L1567.51 684.373 L1568.07 684.373 L1568.63 684.373 L1569.19 684.373 L1569.75 684.373 L1570.31 684.373 L1570.87 684.373 L1571.43 684.373 L1571.99 684.373 L1572.55 684.373 L1573.1 684.373 L1573.66 684.373 L1574.22 684.373 L1574.78 684.373 L1575.34 684.373 L1575.9 684.373 L1576.46 684.373 L1577.02 684.373 L1577.58 684.373 L1578.14 684.373 L1578.7 684.373 L1579.26 684.373 L1579.82 684.373 L1580.37 684.373 L1580.93 684.373 L1581.49 684.373 L1582.05 684.373 L1582.61 684.373 L1583.17 684.373 L1583.73 684.373 L1584.29 684.373 L1584.85 684.373 L1585.41 684.373 L1585.97 684.373 L1586.53 684.373 L1587.09 684.373 L1587.65 684.373 L1588.2 684.373 L1588.76 684.373 L1589.32 684.373 L1589.88 684.373 L1590.44 684.373 L1591 684.373 L1591.56 684.373 L1592.12 684.373 L1592.68 684.373 L1593.24 684.373 L1593.8 684.373 L1594.36 684.373 L1594.92 684.373 L1595.47 684.373 L1596.03 684.373 L1596.59 684.373 L1597.15 684.373 L1597.71 684.373 L1598.27 684.373 L1598.83 684.373 L1599.39 684.373 L1599.95 684.373 L1600.51 684.373 L1601.07 684.373 L1601.63 684.373 L1602.19 684.373 L1602.74 684.373 L1603.3 684.373 L1603.86 684.373 L1604.42 684.373 L1604.98 684.373 L1605.54 684.373 L1606.1 684.373 L1606.66 684.373 L1607.22 684.373 L1607.78 684.373 L1608.34 684.373 L1608.9 684.373 L1609.46 684.373 L1610.02 684.373 L1610.57 684.373 L1611.13 684.373 L1611.69 684.373 L1612.25 684.373 L1612.81 684.373 L1613.37 684.373 L1613.93 684.373 L1614.49 684.373 L1615.05 684.373 L1615.61 684.373 L1616.17 684.373 L1616.73 684.373 L1617.29 684.373 L1617.84 684.373 L1618.4 684.373 L1618.96 684.373 L1619.52 684.373 L1620.08 684.373 L1620.64 684.373 L1621.2 684.373 L1621.76 684.373 L1622.32 684.373 L1622.88 684.373 L1623.44 684.373 L1624 684.373 L1624.56 684.373 L1625.11 684.373 L1625.67 684.373 L1626.23 684.373 L1626.79 684.373 L1627.35 684.373 L1627.91 684.373 L1628.47 684.373 L1629.03 684.373 L1629.59 684.373 L1630.15 684.373 L1630.71 684.373 L1631.27 684.373 L1631.83 684.373 L1632.39 684.373 L1632.94 684.373 L1633.5 684.373 L1634.06 684.373 L1634.62 684.373 L1635.18 684.373 L1635.74 684.373 L1636.3 684.373 L1636.86 684.373 L1637.42 684.373 L1637.98 684.373 L1638.54 684.373 L1639.1 684.373 L1639.66 684.373 L1640.21 684.373 L1640.77 684.373 L1641.33 684.373 L1641.89 684.373 L1642.45 684.373 L1643.01 684.373 L1643.57 684.373 L1644.13 684.373 L1644.69 684.373 L1645.25 684.373 L1645.81 684.373 L1646.37 684.373 L1646.93 684.373 L1647.48 684.373 L1648.04 684.373 L1648.6 684.373 L1649.16 684.373 L1649.72 684.373 L1650.28 684.373 L1650.84 684.373 L1651.4 684.373 L1651.96 684.373 L1652.52 684.373 L1653.08 684.373 L1653.64 684.373 L1654.2 684.373 L1654.76 684.373 L1655.31 684.373 L1655.87 684.373 L1656.43 684.373 L1656.99 684.373 L1657.55 684.373 L1658.11 684.373 L1658.67 684.373 L1659.23 684.373 L1659.79 684.373 L1660.35 684.373 L1660.91 684.373 L1661.47 684.373 L1662.03 684.373 L1662.58 684.373 L1663.14 684.373 L1663.7 684.373 L1664.26 684.373 L1664.82 684.373 L1665.38 684.373 L1665.94 684.373 L1666.5 684.373 L1667.06 684.373 L1667.62 684.373 L1668.18 684.373 L1668.74 684.373 L1669.3 684.373 L1669.85 684.373 L1670.41 684.373 L1670.97 684.373 L1671.53 684.373 L1672.09 684.373 L1672.65 684.373 L1673.21 684.373 L1673.77 684.373 L1674.33 684.373 L1674.89 684.373 L1675.45 684.373 L1676.01 684.373 L1676.57 684.373 L1677.13 684.373 L1677.68 684.373 L1678.24 684.373 L1678.8 684.373 L1679.36 684.373 L1679.92 684.373 L1680.48 684.373 L1681.04 684.373 L1681.6 684.373 L1682.16 684.373 L1682.72 684.373 L1683.28 684.373 L1683.84 684.373 L1684.4 684.373 L1684.95 684.373 L1685.51 684.373 L1686.07 684.373 L1686.63 684.373 L1687.19 684.373 L1687.75 684.373 L1688.31 684.373 L1688.87 684.373 L1689.43 684.373 L1689.99 684.373 L1690.55 684.373 L1691.11 684.373 L1691.67 684.373 L1692.23 684.373 L1692.78 684.373 L1693.34 684.373 L1693.9 684.373 L1694.46 684.373 L1695.02 684.373 L1695.58 684.373 L1696.14 684.373 L1696.7 684.373 L1697.26 684.373 L1697.82 684.373 L1698.38 684.373 L1698.94 684.373 L1699.5 684.373 L1700.05 684.373 L1700.61 684.373 L1701.17 684.373 L1701.73 684.373 L1702.29 684.373 L1702.85 684.373 L1703.41 684.373 L1703.97 684.373 L1704.53 684.373 L1705.09 684.373 L1705.65 684.373 L1706.21 684.373 L1706.77 684.373 L1707.32 684.373 L1707.88 684.373 L1708.44 684.373 L1709 684.373 L1709.56 684.373 L1710.12 684.373 L1710.68 684.373 L1711.24 684.373 L1711.8 684.373 L1712.36 684.373 L1712.92 684.373 L1713.48 684.373 L1714.04 684.373 L1714.6 684.373 L1715.15 684.373 L1715.71 684.373 L1716.27 684.373 L1716.83 684.373 L1717.39 684.373 L1717.95 684.373 L1718.51 684.373 L1719.07 684.373 L1719.63 684.373 L1720.19 684.373 L1720.75 684.373 L1721.31 684.373 L1721.87 684.373 L1722.42 684.373 L1722.98 684.373 L1723.54 684.373 L1724.1 684.373 L1724.66 684.373 L1725.22 684.373 L1725.78 684.373 L1726.34 684.373 L1726.9 684.373 L1727.46 684.373 L1728.02 684.373 L1728.58 684.373 L1729.14 684.373 L1729.69 684.373 L1730.25 684.373 L1730.81 684.373 L1731.37 684.373 L1731.93 684.373 L1732.49 684.373 L1733.05 684.373 L1733.61 684.373 L1734.17 684.373 L1734.73 684.373 L1735.29 684.373 L1735.85 684.373 L1736.41 684.373 L1736.97 684.373 L1737.52 684.373 L1738.08 684.373 L1738.64 684.373 L1739.2 684.373 L1739.76 684.373 L1740.32 684.373 L1740.88 684.373 L1741.44 684.373 L1742 684.373 L1742.56 684.373 L1743.12 684.373 L1743.68 684.373 L1744.24 684.373 L1744.79 684.373 L1745.35 684.373 L1745.91 684.373 L1746.47 684.373 L1747.03 684.373 L1747.59 684.373 L1748.15 684.373 L1748.71 684.373 L1749.27 684.373 L1749.83 684.373 L1750.39 684.373 L1750.95 684.373 L1751.51 684.373 L1752.06 684.373 L1752.62 684.373 L1753.18 684.373 L1753.74 684.373 L1754.3 684.373 L1754.86 684.373 L1755.42 684.373 L1755.98 684.373 L1756.54 684.373 L1757.1 684.373 L1757.66 684.373 L1758.22 684.373 L1758.78 684.373 L1759.34 684.373 L1759.89 684.373 L1760.45 684.373 L1761.01 684.373 L1761.57 684.373 L1762.13 684.373 L1762.69 684.373 L1763.25 684.373 L1763.81 684.373 L1764.37 684.373 L1764.93 684.373 L1765.49 684.373 L1766.05 684.373 L1766.61 684.373 L1767.16 684.373 L1767.72 684.373 L1768.28 684.373 L1768.84 684.373 L1769.4 684.373 L1769.96 684.373 L1770.52 684.373 L1771.08 684.373 L1771.64 684.373 L1772.2 684.373 L1772.76 684.373 L1773.32 684.373 L1773.88 684.373 L1774.43 684.373 L1774.99 684.373 L1775.55 684.373 L1776.11 684.373 L1776.67 684.373 L1777.23 684.373 L1777.79 684.373 L1778.35 684.373 L1778.91 684.373 L1779.47 684.373 L1780.03 684.373 L1780.59 684.373 L1781.15 684.373 L1781.71 684.373 L1782.26 684.373 L1782.82 684.373 L1783.38 684.373 L1783.94 684.373 L1784.5 684.373 L1785.06 684.373 L1785.62 684.373 L1786.18 684.373 L1786.74 684.373 L1787.3 684.373 L1787.86 684.373 L1788.42 684.373 L1788.98 684.373 L1789.53 684.373 L1790.09 684.373 L1790.65 684.373 L1791.21 684.373 L1791.77 684.373 L1792.33 684.373 L1792.89 684.373 L1793.45 684.373 L1794.01 684.373 L1794.57 684.373 L1795.13 684.373 L1795.69 684.373 L1796.25 684.373 L1796.8 684.373 L1797.36 684.373 L1797.92 684.373 L1798.48 684.373 L1799.04 684.373 L1799.6 684.373 L1800.16 684.373 L1800.72 684.373 L1801.28 684.373 L1801.84 684.373 L1802.4 684.373 L1802.96 684.373 L1803.52 684.373 L1804.08 684.373 L1804.63 684.373 L1805.19 684.373 L1805.75 684.373 L1806.31 684.373 L1806.87 684.373 L1807.43 684.373 L1807.99 684.373 L1808.55 684.373 L1809.11 684.373 L1809.67 684.373 L1810.23 684.373 L1810.79 684.373 L1811.35 684.373 L1811.9 684.373 L1812.46 684.373 L1813.02 684.373 L1813.58 684.373 L1814.14 684.373 L1814.7 684.373 L1815.26 684.373 L1815.82 684.373 L1816.38 684.373 L1816.94 684.373 L1817.5 684.373 L1818.06 684.373 L1818.62 684.373 L1819.18 684.373 L1819.73 684.373 L1820.29 684.373 L1820.85 684.373 L1821.41 684.373 L1821.97 684.373 L1822.53 684.373 L1823.09 684.373 L1823.65 684.373 L1824.21 684.373 L1824.77 684.373 L1825.33 684.373 L1825.89 684.373 L1826.45 684.373 L1827 684.373 L1827.56 684.373 L1828.12 684.373 L1828.68 684.373 L1829.24 684.373 L1829.8 684.373 L1830.36 684.373 L1830.92 684.373 L1831.48 684.373 L1832.04 684.373 L1832.6 684.373 L1833.16 684.373 L1833.72 684.373 L1834.27 684.373 L1834.83 684.373 L1835.39 684.373 L1835.95 684.373 L1836.51 684.373 L1837.07 684.373 L1837.63 684.373 L1838.19 684.373 L1838.19 682.036 L1837.63 682.036 L1837.07 682.036 L1836.51 682.036 L1835.95 682.036 L1835.39 682.036 L1834.83 682.036 L1834.27 682.036 L1833.72 682.036 L1833.16 682.036 L1832.6 682.036 L1832.04 682.036 L1831.48 682.036 L1830.92 682.036 L1830.36 682.036 L1829.8 682.036 L1829.24 682.036 L1828.68 682.036 L1828.12 682.036 L1827.56 682.036 L1827 682.036 L1826.45 682.036 L1825.89 682.036 L1825.33 682.036 L1824.77 682.036 L1824.21 682.036 L1823.65 682.036 L1823.09 682.036 L1822.53 682.036 L1821.97 682.036 L1821.41 682.036 L1820.85 682.036 L1820.29 682.036 L1819.73 682.036 L1819.18 682.036 L1818.62 682.036 L1818.06 682.036 L1817.5 682.036 L1816.94 682.036 L1816.38 682.036 L1815.82 682.036 L1815.26 682.036 L1814.7 682.036 L1814.14 682.036 L1813.58 682.036 L1813.02 682.036 L1812.46 682.036 L1811.9 682.036 L1811.35 682.036 L1810.79 682.036 L1810.23 682.036 L1809.67 682.036 L1809.11 682.036 L1808.55 682.036 L1807.99 682.036 L1807.43 682.036 L1806.87 682.036 L1806.31 682.036 L1805.75 682.036 L1805.19 682.036 L1804.63 682.036 L1804.08 682.036 L1803.52 682.036 L1802.96 682.036 L1802.4 682.036 L1801.84 682.036 L1801.28 682.036 L1800.72 682.036 L1800.16 682.036 L1799.6 682.036 L1799.04 682.036 L1798.48 682.036 L1797.92 682.036 L1797.36 682.036 L1796.8 682.036 L1796.25 682.036 L1795.69 682.036 L1795.13 682.036 L1794.57 682.036 L1794.01 682.036 L1793.45 682.036 L1792.89 682.036 L1792.33 682.036 L1791.77 682.036 L1791.21 682.036 L1790.65 682.036 L1790.09 682.036 L1789.53 682.036 L1788.98 682.036 L1788.42 682.036 L1787.86 682.036 L1787.3 682.036 L1786.74 682.036 L1786.18 682.036 L1785.62 682.036 L1785.06 682.036 L1784.5 682.036 L1783.94 682.036 L1783.38 682.036 L1782.82 682.036 L1782.26 682.036 L1781.71 682.036 L1781.15 682.036 L1780.59 682.036 L1780.03 682.036 L1779.47 682.036 L1778.91 682.036 L1778.35 682.036 L1777.79 682.036 L1777.23 682.036 L1776.67 682.036 L1776.11 682.036 L1775.55 682.036 L1774.99 682.036 L1774.43 682.036 L1773.88 682.036 L1773.32 682.036 L1772.76 682.036 L1772.2 682.036 L1771.64 682.036 L1771.08 682.036 L1770.52 682.036 L1769.96 682.036 L1769.4 682.036 L1768.84 682.036 L1768.28 682.036 L1767.72 682.036 L1767.16 682.036 L1766.61 682.036 L1766.05 682.036 L1765.49 682.036 L1764.93 682.036 L1764.37 682.036 L1763.81 682.036 L1763.25 682.036 L1762.69 682.036 L1762.13 682.036 L1761.57 682.036 L1761.01 682.036 L1760.45 682.036 L1759.89 682.036 L1759.34 682.036 L1758.78 682.036 L1758.22 682.036 L1757.66 682.036 L1757.1 682.036 L1756.54 682.036 L1755.98 682.036 L1755.42 682.036 L1754.86 682.036 L1754.3 682.036 L1753.74 682.036 L1753.18 682.036 L1752.62 682.036 L1752.06 682.036 L1751.51 682.036 L1750.95 682.036 L1750.39 682.036 L1749.83 682.036 L1749.27 682.036 L1748.71 682.036 L1748.15 682.036 L1747.59 682.036 L1747.03 682.036 L1746.47 682.036 L1745.91 682.036 L1745.35 682.036 L1744.79 682.036 L1744.24 682.036 L1743.68 682.036 L1743.12 682.036 L1742.56 682.036 L1742 682.036 L1741.44 682.036 L1740.88 682.036 L1740.32 682.036 L1739.76 682.036 L1739.2 682.036 L1738.64 682.036 L1738.08 682.036 L1737.52 682.036 L1736.97 682.036 L1736.41 682.036 L1735.85 682.036 L1735.29 682.036 L1734.73 682.036 L1734.17 682.036 L1733.61 682.036 L1733.05 682.036 L1732.49 682.036 L1731.93 682.036 L1731.37 682.036 L1730.81 682.036 L1730.25 682.036 L1729.69 682.036 L1729.14 682.036 L1728.58 682.036 L1728.02 682.036 L1727.46 682.036 L1726.9 682.036 L1726.34 682.036 L1725.78 682.036 L1725.22 682.036 L1724.66 682.036 L1724.1 682.036 L1723.54 682.036 L1722.98 682.036 L1722.42 682.036 L1721.87 682.036 L1721.31 682.036 L1720.75 682.036 L1720.19 682.036 L1719.63 682.036 L1719.07 682.036 L1718.51 682.036 L1717.95 682.036 L1717.39 682.036 L1716.83 682.036 L1716.27 682.036 L1715.71 682.036 L1715.15 682.036 L1714.6 682.036 L1714.04 682.036 L1713.48 682.036 L1712.92 682.036 L1712.36 682.036 L1711.8 682.036 L1711.24 682.036 L1710.68 682.036 L1710.12 682.036 L1709.56 682.036 L1709 682.036 L1708.44 682.036 L1707.88 682.036 L1707.32 682.036 L1706.77 682.036 L1706.21 682.036 L1705.65 682.036 L1705.09 682.036 L1704.53 682.036 L1703.97 682.036 L1703.41 682.036 L1702.85 682.036 L1702.29 682.036 L1701.73 682.036 L1701.17 682.036 L1700.61 682.036 L1700.05 682.036 L1699.5 682.036 L1698.94 682.036 L1698.38 682.036 L1697.82 682.036 L1697.26 682.036 L1696.7 682.036 L1696.14 682.036 L1695.58 682.036 L1695.02 682.036 L1694.46 682.036 L1693.9 682.036 L1693.34 682.036 L1692.78 682.036 L1692.23 682.036 L1691.67 682.036 L1691.11 682.036 L1690.55 682.036 L1689.99 682.036 L1689.43 682.036 L1688.87 682.036 L1688.31 682.036 L1687.75 682.036 L1687.19 682.036 L1686.63 682.036 L1686.07 682.036 L1685.51 682.036 L1684.95 682.036 L1684.4 682.036 L1683.84 682.036 L1683.28 682.036 L1682.72 682.036 L1682.16 682.036 L1681.6 682.036 L1681.04 682.036 L1680.48 682.036 L1679.92 682.036 L1679.36 682.036 L1678.8 682.036 L1678.24 682.036 L1677.68 682.036 L1677.13 682.036 L1676.57 682.036 L1676.01 682.036 L1675.45 682.036 L1674.89 682.036 L1674.33 682.036 L1673.77 682.036 L1673.21 682.036 L1672.65 682.036 L1672.09 682.036 L1671.53 682.036 L1670.97 682.036 L1670.41 682.036 L1669.85 682.036 L1669.3 682.036 L1668.74 682.036 L1668.18 682.036 L1667.62 682.036 L1667.06 682.036 L1666.5 682.036 L1665.94 682.036 L1665.38 682.036 L1664.82 682.036 L1664.26 682.036 L1663.7 682.036 L1663.14 682.036 L1662.58 682.036 L1662.03 682.036 L1661.47 682.036 L1660.91 682.036 L1660.35 682.036 L1659.79 682.036 L1659.23 682.036 L1658.67 682.036 L1658.11 682.036 L1657.55 682.036 L1656.99 682.036 L1656.43 682.036 L1655.87 682.036 L1655.31 682.036 L1654.76 682.036 L1654.2 682.036 L1653.64 682.036 L1653.08 682.036 L1652.52 682.036 L1651.96 682.036 L1651.4 682.036 L1650.84 682.036 L1650.28 682.036 L1649.72 682.036 L1649.16 682.036 L1648.6 682.036 L1648.04 682.036 L1647.48 682.036 L1646.93 682.036 L1646.37 682.036 L1645.81 682.036 L1645.25 682.036 L1644.69 682.036 L1644.13 682.036 L1643.57 682.036 L1643.01 682.036 L1642.45 682.036 L1641.89 682.036 L1641.33 682.036 L1640.77 682.036 L1640.21 682.036 L1639.66 682.036 L1639.1 682.036 L1638.54 682.036 L1637.98 682.036 L1637.42 682.036 L1636.86 682.036 L1636.3 682.036 L1635.74 682.036 L1635.18 682.036 L1634.62 682.036 L1634.06 682.036 L1633.5 682.036 L1632.94 682.036 L1632.39 682.036 L1631.83 682.036 L1631.27 682.036 L1630.71 682.036 L1630.15 682.036 L1629.59 682.036 L1629.03 682.036 L1628.47 682.036 L1627.91 682.036 L1627.35 682.036 L1626.79 682.036 L1626.23 682.036 L1625.67 682.036 L1625.11 682.036 L1624.56 682.036 L1624 682.036 L1623.44 682.036 L1622.88 682.036 L1622.32 682.036 L1621.76 682.036 L1621.2 682.036 L1620.64 682.036 L1620.08 682.036 L1619.52 682.036 L1618.96 682.036 L1618.4 682.036 L1617.84 682.036 L1617.29 682.036 L1616.73 682.036 L1616.17 682.036 L1615.61 682.036 L1615.05 682.036 L1614.49 682.036 L1613.93 682.036 L1613.37 682.036 L1612.81 682.036 L1612.25 682.036 L1611.69 682.036 L1611.13 682.036 L1610.57 682.036 L1610.02 682.036 L1609.46 682.036 L1608.9 682.036 L1608.34 682.036 L1607.78 682.036 L1607.22 682.036 L1606.66 682.036 L1606.1 682.036 L1605.54 682.036 L1604.98 682.036 L1604.42 682.036 L1603.86 682.036 L1603.3 682.036 L1602.74 682.036 L1602.19 682.036 L1601.63 682.036 L1601.07 682.036 L1600.51 682.036 L1599.95 682.036 L1599.39 682.036 L1598.83 682.036 L1598.27 682.036 L1597.71 682.036 L1597.15 682.036 L1596.59 682.036 L1596.03 682.036 L1595.47 682.036 L1594.92 682.036 L1594.36 682.036 L1593.8 682.036 L1593.24 682.036 L1592.68 682.036 L1592.12 682.036 L1591.56 682.036 L1591 682.036 L1590.44 682.036 L1589.88 682.036 L1589.32 682.036 L1588.76 682.036 L1588.2 682.036 L1587.65 682.036 L1587.09 682.036 L1586.53 682.036 L1585.97 682.036 L1585.41 682.036 L1584.85 682.036 L1584.29 682.036 L1583.73 682.036 L1583.17 682.036 L1582.61 682.036 L1582.05 682.036 L1581.49 682.036 L1580.93 682.036 L1580.37 682.036 L1579.82 682.036 L1579.26 682.036 L1578.7 682.036 L1578.14 682.036 L1577.58 682.036 L1577.02 682.036 L1576.46 682.036 L1575.9 682.036 L1575.34 682.036 L1574.78 682.036 L1574.22 682.036 L1573.66 682.036 L1573.1 682.036 L1572.55 682.036 L1571.99 682.036 L1571.43 682.036 L1570.87 682.036 L1570.31 682.036 L1569.75 682.036 L1569.19 682.036 L1568.63 682.036 L1568.07 682.036 L1567.51 682.036 L1566.95 682.036 L1566.39 682.036 L1565.83 682.036 L1565.28 682.036 L1564.72 682.036 L1564.16 682.036 L1563.6 682.036 L1563.04 682.036 L1562.48 682.036 L1561.92 682.036 L1561.36 682.036 L1560.8 682.036 L1560.24 682.036 L1559.68 682.036 L1559.12 682.036 L1558.56 682.036 L1558 682.036 L1557.45 682.036 L1556.89 682.036 L1556.33 682.036 L1555.77 682.036 L1555.21 682.036 L1554.65 682.036 L1554.09 682.036 L1553.53 682.036 L1552.97 682.036 L1552.41 682.036 L1551.85 682.036 L1551.29 682.036 L1550.73 682.036 L1550.18 682.036 L1549.62 682.036 L1549.06 682.036 L1548.5 682.036 L1547.94 682.036 L1547.38 682.036 L1546.82 682.036 L1546.26 682.036 L1545.7 682.036 L1545.14 682.036 L1544.58 682.036 L1544.02 682.036 L1543.46 682.036 L1542.9 682.036 L1542.35 682.036 L1541.79 682.036 L1541.23 682.036 L1540.67 682.036 L1540.11 682.036 L1539.55 682.036 L1538.99 682.036 L1538.43 682.036 L1537.87 682.036 L1537.31 682.036 L1536.75 682.036 L1536.19 682.036 L1535.63 682.036 L1535.08 682.036 L1534.52 682.036 L1533.96 682.036 L1533.4 682.036 L1532.84 682.036 L1532.28 682.036 L1531.72 682.036 L1531.16 682.036 L1530.6 682.036 L1530.04 682.036 L1529.48 682.036 L1528.92 682.036 L1528.36 682.036 L1527.81 682.036 L1527.25 682.036 L1526.69 682.036 L1526.13 682.036 L1525.57 682.036 L1525.01 682.036 L1524.45 682.036 L1523.89 682.036 L1523.33 682.036 L1522.77 682.036 L1522.21 682.036 L1521.65 682.036 L1521.09 682.036 L1520.53 682.036 L1519.98 682.036 L1519.42 682.036 L1518.86 682.036 L1518.3 682.036 L1517.74 682.036 L1517.18 682.036 L1516.62 682.036 L1516.06 682.036 L1515.5 682.036 L1514.94 682.036 L1514.38 682.036 L1513.82 682.036 L1513.26 682.036 L1512.71 682.036 L1512.15 682.036 L1511.59 682.036 L1511.03 682.036 L1510.47 682.036 L1509.91 682.036 L1509.35 682.036 L1508.79 682.036 L1508.23 682.036 L1507.67 682.036 L1507.11 682.036 L1506.55 682.036 L1505.99 682.036 L1505.44 682.036 L1504.88 682.036 L1504.32 682.036 L1503.76 682.036 L1503.2 682.036 L1502.64 682.036 L1502.08 682.036 L1501.52 682.036 L1500.96 682.036 L1500.4 682.036 L1499.84 682.036 L1499.28 682.036 L1498.72 682.036 L1498.16 682.036 L1497.61 682.036 L1497.05 682.036 L1496.49 682.036 L1495.93 682.036 L1495.37 682.036 L1494.81 682.036 L1494.25 682.036 L1493.69 682.036 L1493.13 682.036 L1492.57 682.036 L1492.01 682.036 L1491.45 682.036 L1490.89 682.036 L1490.34 682.036 L1489.78 682.036 L1489.22 682.036 L1488.66 682.036 L1488.1 682.036 L1487.54 682.036 L1486.98 682.036 L1486.42 682.036 L1485.86 682.036 L1485.3 682.036 L1484.74 682.036 L1484.18 682.036 L1483.62 682.036 L1483.07 682.036 L1482.51 682.036 L1481.95 682.036 L1481.39 682.036 L1480.83 682.036 L1480.27 682.036 L1479.71 682.036 L1479.15 682.036 L1478.59 682.036 L1478.03 682.036 L1477.47 682.036 L1476.91 682.036 L1476.35 682.036 L1475.79 682.036 L1475.24 682.036 L1474.68 682.036 L1474.12 682.036 L1473.56 682.036 L1473 682.036 L1472.44 682.036 L1471.88 682.036 L1471.32 682.036 L1470.76 682.036 L1470.2 682.036 L1469.64 682.036 L1469.08 682.036 L1468.52 682.036 L1467.97 682.036 L1467.41 682.036 L1466.85 682.036 L1466.29 682.036 L1465.73 682.036 L1465.17 682.036 L1464.61 682.036 L1464.05 682.036 L1463.49 682.036 L1462.93 682.036 L1462.37 682.036 L1461.81 682.036 L1461.25 682.036 L1460.7 682.036 L1460.14 682.036 L1459.58 682.036 L1459.02 682.036 L1458.46 682.036 L1457.9 682.036 L1457.34 682.036 L1456.78 682.036 L1456.22 682.036 L1455.66 682.036 L1455.1 682.036 L1454.54 682.036 L1453.98 682.036 L1453.42 682.036 L1452.87 682.036 L1452.31 682.036 L1451.75 682.036 L1451.19 682.036 L1450.63 682.036 L1450.07 682.036 L1449.51 682.036 L1448.95 682.036 L1448.39 682.036 L1447.83 682.036 L1447.27 682.036 L1446.71 682.036 L1446.15 682.036 L1445.6 682.036 L1445.04 682.036 L1444.48 682.036 L1443.92 682.036 L1443.36 682.036 L1442.8 682.036 L1442.24 682.036 L1441.68 682.036 L1441.12 682.036 L1440.56 682.036 L1440 682.036 L1439.44 682.036 L1438.88 682.036 L1438.33 682.036 L1437.77 682.036 L1437.21 682.036 L1436.65 682.036 L1436.09 682.036 L1435.53 682.036 L1434.97 682.036 L1434.41 682.036 L1433.85 682.036 L1433.29 682.036 L1432.73 682.036 L1432.17 682.036 L1431.61 682.036 L1431.05 682.036 L1430.5 682.036 L1429.94 682.036 L1429.38 682.036 L1428.82 682.036 L1428.26 682.036 L1427.7 682.036 L1427.14 682.036 L1426.58 682.036 L1426.02 682.036 L1425.46 682.036 L1424.9 682.036 L1424.34 682.036 L1423.78 682.036 L1423.23 682.036 L1422.67 682.036 L1422.11 682.036 L1421.55 682.036 L1420.99 682.036 L1420.43 682.036 L1419.87 682.036 L1419.31 682.036 L1418.75 682.036 L1418.19 682.036 L1417.63 682.036 L1417.07 682.036 L1416.51 682.036 L1415.95 682.036 L1415.4 682.036 L1414.84 682.036 L1414.28 682.036 L1413.72 682.036 L1413.16 682.036 L1412.6 682.036 L1412.04 682.036 L1411.48 682.036 L1410.92 682.036 L1410.36 682.036 L1409.8 682.036 L1409.24 682.036 L1408.68 682.036 L1408.13 682.036 L1407.57 682.036 L1407.01 682.036 L1406.45 682.036 L1405.89 682.036 L1405.33 682.036 L1404.77 682.036 L1404.21 682.036 L1403.65 682.036 L1403.09 682.036 L1402.53 682.036 L1401.97 682.036 L1401.41 682.036 L1400.86 682.036 L1400.3 682.036 L1399.74 682.036 L1399.18 682.036 L1398.62 682.036 L1398.06 682.036 L1397.5 682.036 L1396.94 682.036 L1396.38 682.036 L1395.82 682.036 L1395.26 682.036 L1394.7 682.036 L1394.14 682.036 L1393.58 682.036 L1393.03 682.036 L1392.47 682.036 L1391.91 682.036 L1391.35 682.036 L1390.79 682.036 L1390.23 682.036 L1389.67 682.036 L1389.11 682.036 L1388.55 682.036 L1387.99 682.036 L1387.43 682.036 L1386.87 682.036 L1386.31 682.036 L1385.76 682.036 L1385.2 682.036 L1384.64 682.036 L1384.08 682.036 L1383.52 682.036 L1382.96 682.036 L1382.4 682.036 L1381.84 682.036 L1381.28 682.036 L1380.72 682.036 L1380.16 682.036 L1379.6 682.036 L1379.04 682.036 L1378.49 682.036 L1377.93 682.036 L1377.37 682.036 L1376.81 682.036 L1376.25 682.036 L1375.69 682.036 L1375.13 682.036 L1374.57 682.036 L1374.01 682.036 L1373.45 682.036 L1372.89 682.036 L1372.33 682.036 L1371.77 682.036 L1371.21 682.036 L1370.66 682.036 L1370.1 682.036 L1369.54 682.036 L1368.98 682.036 L1368.42 682.036 L1367.86 682.036 L1367.3 682.036 L1366.74 682.036 L1366.18 682.036 L1365.62 682.036 L1365.06 682.036 L1364.5 682.036 L1363.94 682.036 L1363.39 682.036 L1362.83 682.036 L1362.27 682.036 L1361.71 682.036 L1361.15 682.036 L1360.59 682.036 L1360.03 682.036 L1359.47 682.036 L1358.91 682.036 L1358.35 682.036 L1357.79 682.036 L1357.23 682.036 L1356.67 682.036 L1356.12 682.036 L1355.56 682.036 L1355 682.036 L1354.44 682.036 L1353.88 682.036 L1353.32 682.036 L1352.76 682.036 L1352.2 682.036 L1351.64 682.036 L1351.08 682.036 L1350.52 682.036 L1349.96 682.036 L1349.4 682.036 L1348.84 682.036 L1348.29 682.036 L1347.73 682.036 L1347.17 682.036 L1346.61 682.036 L1346.05 682.036 L1345.49 682.036 L1344.93 682.036 L1344.37 682.036 L1343.81 682.036 L1343.25 682.036 L1342.69 682.036 L1342.13 682.036 L1341.57 682.036 L1341.02 682.036 L1340.46 682.036 L1339.9 682.036 L1339.34 682.036 L1338.78 682.036 L1338.22 682.036 L1337.66 682.036 L1337.1 682.036 L1336.54 682.036 L1335.98 682.036 L1335.42 682.036 L1334.86 682.036 L1334.3 682.036 L1333.75 682.036 L1333.19 682.036 L1332.63 682.036 L1332.07 682.036 L1331.51 682.036 L1330.95 682.036 L1330.39 682.036 L1329.83 682.036 L1329.27 682.036 L1328.71 682.036 L1328.15 682.036 L1327.59 682.036 L1327.03 682.036 L1326.47 682.036 L1325.92 682.036 L1325.36 682.036 L1324.8 682.036 L1324.24 682.036 L1323.68 682.036 L1323.12 682.036 L1322.56 682.036 L1322 682.036 L1321.44 682.036 L1320.88 682.036 L1320.32 682.036 L1319.76 682.036 L1319.2 682.036 L1318.65 682.036 L1318.09 682.036 L1317.53 682.036 L1316.97 682.036 L1316.41 682.036 L1315.85 682.036 L1315.29 682.036 L1314.73 682.036 L1314.17 682.036 L1313.61 682.036 L1313.05 682.036 L1312.49 682.036 L1311.93 682.036 L1311.38 682.036 L1310.82 682.036 L1310.26 682.036 L1309.7 682.036 L1309.14 682.036 L1308.58 682.036 L1308.02 682.036 L1307.46 682.036 L1306.9 682.036 L1306.34 682.036 L1305.78 682.036 L1305.22 682.036 L1304.66 682.036 L1304.1 682.036 L1303.55 682.036 L1302.99 682.036 L1302.43 682.036 L1301.87 682.036 L1301.31 682.036 L1300.75 682.036 L1300.19 682.036 L1299.63 682.036 L1299.07 682.036 L1298.51 682.036 L1297.95 682.036 L1297.39 682.036 L1296.83 682.036 L1296.28 682.036 L1295.72 682.036 L1295.16 682.036 L1294.6 682.036 L1294.04 682.036 L1293.48 682.036 L1292.92 682.036 L1292.36 682.036 L1291.8 682.036 L1291.24 682.036 L1290.68 682.036 L1290.12 682.036 L1289.56 682.036 L1289 682.036 L1288.45 682.036 L1287.89 682.036 L1287.33 682.036 L1286.77 682.036 L1286.21 682.036 L1285.65 682.036 L1285.09 682.036 L1284.53 682.036 L1283.97 682.036 L1283.41 682.036 L1282.85 682.036 L1282.29 682.036 L1281.73 682.036 L1281.18 682.036 L1280.62 682.036 L1280.06 682.036 L1279.5 682.036 L1278.94 682.036 L1278.38 682.036 L1277.82 682.036 L1277.26 682.036 L1276.7 682.036 L1276.14 682.036 L1275.58 682.036 L1275.02 682.036 L1274.46 682.036 L1273.91 682.036 L1273.35 682.036 L1272.79 682.036 L1272.23 682.036 L1271.67 682.036 L1271.11 682.036 L1270.55 682.036 L1269.99 682.036 L1269.43 682.036 L1268.87 682.036 L1268.31 682.036 L1267.75 682.036 L1267.19 682.036 L1266.63 682.036 L1266.08 682.036 L1265.52 682.036 L1264.96 682.036 L1264.4 682.036 L1263.84 682.036 L1263.28 682.036 L1262.72 682.036 L1262.16 682.036 L1261.6 682.036 L1261.04 682.036 L1260.48 682.036 L1259.92 682.036 L1259.36 682.036 L1258.81 682.036 L1258.25 682.036 L1257.69 682.036 L1257.13 682.036 L1256.57 682.036 L1256.01 682.036 L1255.45 682.036 L1254.89 682.036 L1254.33 682.036 L1253.77 682.036 L1253.21 682.036 L1252.65 682.036 L1252.09 682.036 L1251.54 682.036 L1250.98 682.036 L1250.42 682.036 L1249.86 682.036 L1249.3 682.036 L1248.74 682.036 L1248.18 682.036 L1247.62 682.036 L1247.06 682.036 L1246.5 682.036 L1245.94 682.036 L1245.38 682.036 L1244.82 682.036 L1244.26 682.036 L1243.71 682.036 L1243.15 682.036 L1242.59 682.036 L1242.03 682.036 L1241.47 682.036 L1240.91 682.036 L1240.35 682.036 L1239.79 682.036 L1239.23 682.036 L1238.67 682.036 L1238.11 682.036 L1237.55 682.036 L1236.99 682.036 L1236.44 682.036 L1235.88 682.036 L1235.32 682.036 L1234.76 682.036 L1234.2 682.036 L1233.64 682.036 L1233.08 682.036 L1232.52 682.036 L1231.96 682.036 L1231.4 682.036 L1230.84 682.036 L1230.28 682.036 L1229.72 682.036 L1229.17 682.036 L1228.61 682.036 L1228.05 682.036 L1227.49 682.036 L1226.93 682.036 L1226.37 682.036 L1225.81 682.036 L1225.25 682.036 L1224.69 682.036 L1224.13 682.036 L1223.57 682.036 L1223.01 682.036 L1222.45 682.036 L1221.89 682.036 L1221.34 682.036 L1220.78 682.036 L1220.22 682.036 L1219.66 682.036 L1219.1 682.036 L1218.54 682.036 L1217.98 682.036 L1217.42 682.036 L1216.86 682.036 L1216.3 682.036 L1215.74 682.036 L1215.18 682.036 L1214.62 682.036 L1214.07 682.036 L1213.51 682.036 L1212.95 682.036 L1212.39 682.036 L1211.83 682.036 L1211.27 682.036 L1210.71 682.036 L1210.15 682.036 L1209.59 682.036 L1209.03 682.036 L1208.47 682.036 L1207.91 682.036 L1207.35 682.036 L1206.8 682.036 L1206.24 682.036 L1205.68 682.036 L1205.12 682.036 L1204.56 682.036 L1204 682.036 L1203.44 682.036 L1202.88 682.036 L1202.32 682.036 L1201.76 682.036 L1201.2 682.036 L1200.64 682.036 L1200.08 682.036 L1199.52 682.036 L1198.97 682.036 L1198.41 682.036 L1197.85 682.036 L1197.29 682.036 L1196.73 682.036 L1196.17 682.036 L1195.61 682.036 L1195.05 682.036 L1194.49 682.036 L1193.93 682.036 L1193.37 682.036 L1192.81 682.036 L1192.25 682.036 L1191.7 682.036 L1191.14 682.036 L1190.58 682.036 L1190.02 682.036 L1189.46 682.036 L1188.9 682.036 L1188.34 682.036 L1187.78 682.036 L1187.22 682.036 L1186.66 682.036 L1186.1 682.036 L1185.54 682.036 L1184.98 682.036 L1184.43 682.036 L1183.87 682.036 L1183.31 682.036 L1182.75 682.036 L1182.19 682.036 L1181.63 682.036 L1181.07 682.036 L1180.51 682.036 L1179.95 682.036 L1179.39 682.036 L1178.83 682.036 L1178.27 682.036 L1177.71 682.036 L1177.15 682.036 L1176.6 682.036 L1176.04 682.036 L1175.48 682.036 L1174.92 682.036 L1174.36 682.036 L1173.8 682.036 L1173.24 682.036 L1172.68 682.036 L1172.12 682.036 L1171.56 682.036 L1171 682.036 L1170.44 682.036 L1169.88 682.036 L1169.33 682.036 L1168.77 682.036 L1168.21 682.036 L1167.65 682.036 L1167.09 682.036 L1166.53 682.036 L1165.97 682.036 L1165.41 682.036 L1164.85 682.036 L1164.29 682.036 L1163.73 682.036 L1163.17 682.036 L1162.61 682.036 L1162.05 682.036 L1161.5 682.036 L1160.94 682.036 L1160.38 682.036 L1159.82 682.036 L1159.26 682.036 L1158.7 682.036 L1158.14 682.036 L1157.58 682.036 L1157.02 682.036 L1156.46 682.036 L1155.9 682.036 L1155.34 682.036 L1154.78 682.036 L1154.23 682.036 L1153.67 682.036 L1153.11 682.036 L1152.55 682.036 L1151.99 682.036 L1151.43 682.036 L1150.87 682.036 L1150.31 682.036 L1149.75 682.036 L1149.19 682.036 L1148.63 682.036 L1148.07 682.036 L1147.51 682.036 L1146.96 682.036 L1146.4 682.036 L1145.84 682.036 L1145.28 682.036 L1144.72 682.036 L1144.16 682.036 L1143.6 682.036 L1143.04 682.036 L1142.48 682.036 L1141.92 682.036 L1141.36 682.036 L1140.8 682.036 L1140.24 682.036 L1139.68 682.036 L1139.13 682.036 L1138.57 682.036 L1138.01 682.036 L1137.45 682.036 L1136.89 682.036 L1136.33 682.036 L1135.77 682.036 L1135.21 682.036 L1134.65 682.036 L1134.09 682.036 L1133.53 682.036 L1132.97 682.036 L1132.41 682.036 L1131.86 682.036 L1131.3 682.036 L1130.74 682.036 L1130.18 682.036 L1129.62 682.036 L1129.06 682.036 L1128.5 682.036 L1127.94 682.036 L1127.38 682.036 L1126.82 682.036 L1126.26 682.036 L1125.7 682.036 L1125.14 682.036 L1124.59 682.036 L1124.03 682.036 L1123.47 682.036 L1122.91 682.036 L1122.35 682.036 L1121.79 682.036 L1121.23 682.036 L1120.67 682.036 L1120.11 682.036 L1119.55 682.036 L1118.99 682.036 L1118.43 682.036 L1117.87 682.036 L1117.31 682.036 L1116.76 682.036 L1116.2 682.036 L1115.64 682.036 L1115.08 682.036 L1114.52 682.036 L1113.96 682.036 L1113.4 682.036 L1112.84 682.036 L1112.28 682.036 L1111.72 682.036 L1111.16 682.036 L1110.6 682.036 L1110.04 682.036 L1109.49 682.036 L1108.93 682.036 L1108.37 682.036 L1107.81 682.036 L1107.25 682.036 L1106.69 682.036 L1106.13 682.036 L1105.57 682.036 L1105.01 682.036 L1104.45 682.036 L1103.89 682.036 L1103.33 682.036 L1102.77 682.036 L1102.22 682.036 L1101.66 682.036 L1101.1 682.036 L1100.54 682.036 L1099.98 682.036 L1099.42 682.036 L1098.86 682.036 L1098.3 682.036 L1097.74 682.036 L1097.18 682.036 L1096.62 682.036 L1096.06 682.036 L1095.5 682.036 L1094.94 682.036 L1094.39 682.036 L1093.83 682.036 L1093.27 682.036 L1092.71 682.036 L1092.15 682.036 L1091.59 682.036 L1091.03 682.036 L1090.47 682.036 L1089.91 682.036 L1089.35 682.036 L1088.79 682.036 L1088.23 682.036 L1087.67 682.036 L1087.12 682.036 L1086.56 682.036 L1086 682.036 L1085.44 682.036 L1084.88 682.036 L1084.32 682.036 L1083.76 682.036 L1083.2 682.036 L1082.64 682.036 L1082.08 682.036 L1081.52 682.036 L1080.96 682.036 L1080.4 682.036 L1079.85 682.036 L1079.29 682.036 L1078.73 682.036 L1078.17 682.036 L1077.61 682.036 L1077.05 682.036 L1076.49 682.036 L1075.93 682.036 L1075.37 682.036 L1074.81 682.036 L1074.25 682.036 L1073.69 682.036 L1073.13 682.036 L1072.57 682.036 L1072.02 682.036 L1071.46 682.036 L1070.9 682.036 L1070.34 682.036 L1069.78 682.036 L1069.22 682.036 L1068.66 682.036 L1068.1 682.036 L1067.54 682.036 L1066.98 682.036 L1066.42 682.036 L1065.86 682.036 L1065.3 682.036 L1064.75 682.036 L1064.19 682.036 L1063.63 682.036 L1063.07 682.036 L1062.51 682.036 L1061.95 682.036 L1061.39 682.036 L1060.83 682.036 L1060.27 682.036 L1059.71 682.036 L1059.15 682.036 L1058.59 682.036 L1058.03 682.036 L1057.48 682.036 L1056.92 682.036 L1056.36 682.036 L1055.8 682.036 L1055.24 682.036 L1054.68 682.036 L1054.12 682.036 L1053.56 682.036 L1053 682.036 L1052.44 682.036 L1051.88 682.036 L1051.32 682.036 L1050.76 682.036 L1050.2 682.036 L1049.65 682.036 L1049.09 682.036 L1048.53 682.036 L1047.97 682.036 L1047.41 682.036 L1046.85 682.036 L1046.29 682.036 L1045.73 682.036 L1045.17 682.036 L1044.61 682.036 L1044.05 682.036 L1043.49 682.036 L1042.93 682.036 L1042.38 682.036 L1041.82 682.036 L1041.26 682.036 L1040.7 682.036 L1040.14 682.036 L1039.58 682.036 L1039.02 682.036 L1038.46 682.036 L1037.9 682.036 L1037.34 682.036 L1036.78 682.036 L1036.22 682.036 L1035.66 682.036 L1035.1 682.036 L1034.55 682.036 L1033.99 682.036 L1033.43 682.036 L1032.87 682.036 L1032.31 682.036 L1031.75 682.036 L1031.19 682.036 L1030.63 682.036 L1030.07 682.036 L1029.51 682.036 L1028.95 682.036 L1028.39 682.036 L1027.83 682.036 L1027.28 682.036 L1026.72 682.036 L1026.16 682.036 L1025.6 682.036 L1025.04 682.036 L1024.48 682.036 L1023.92 682.036 L1023.36 682.036 L1022.8 682.036 L1022.24 682.036 L1021.68 682.036 L1021.12 682.036 L1020.56 682.036 L1020.01 682.036 L1019.45 682.036 L1018.89 682.036 L1018.33 682.036 L1017.77 682.036 L1017.21 682.036 L1016.65 682.036 L1016.09 682.036 L1015.53 682.036 L1014.97 682.036 L1014.41 682.036 L1013.85 682.036 L1013.29 682.036 L1012.73 682.036 L1012.18 682.036 L1011.62 682.036 L1011.06 682.036 L1010.5 682.036 L1009.94 682.036 L1009.38 682.036 L1008.82 682.036 L1008.26 682.036 L1007.7 682.036 L1007.14 682.036 L1006.58 682.036 L1006.02 682.036 L1005.46 682.036 L1004.91 682.036 L1004.35 682.036 L1003.79 682.036 L1003.23 682.036 L1002.67 682.036 L1002.11 682.036 L1001.55 682.036 L1000.99 682.036 L1000.43 682.036 L999.872 682.036 L999.313 682.036 L998.754 682.036 L998.194 682.036 L997.635 682.036 L997.076 682.036 L996.517 682.036 L995.957 682.036 L995.398 682.036 L994.839 682.036 L994.28 682.036 L993.72 682.036 L993.161 682.036 L992.602 682.036 L992.043 682.036 L991.483 682.036 L990.924 682.036 L990.365 682.036 L989.806 682.036 L989.246 682.036 L988.687 682.036 L988.128 682.036 L987.569 682.036 L987.009 682.036 L986.45 682.036 L985.891 682.036 L985.332 682.036 L984.772 682.036 L984.213 682.036 L983.654 682.036 L983.095 682.036 L982.535 682.036 L981.976 682.036 L981.417 682.036 L980.858 682.036 L980.298 682.036 L979.739 682.036 L979.18 682.036 L978.621 682.036 L978.061 682.036 L977.502 682.036 L976.943 682.036 L976.384 682.036 L975.824 682.036 L975.265 682.036 L974.706 682.036 L974.147 682.036 L973.587 682.036 L973.028 682.036 L972.469 682.036 L971.91 682.036 L971.35 682.036 L970.791 682.036 L970.232 682.036 L969.673 682.036 L969.113 682.036 L968.554 682.036 L967.995 682.036 L967.436 682.036 L966.876 682.036 L966.317 682.036 L965.758 682.036 L965.199 682.036 L964.639 682.036 L964.08 682.036 L963.521 682.036 L962.962 682.036 L962.402 682.036 L961.843 682.036 L961.284 682.036 L960.725 682.036 L960.165 682.036 L959.606 682.036 L959.047 682.036 L958.488 682.036 L957.928 682.036 L957.369 682.036 L956.81 682.036 L956.251 682.036 L955.691 682.036 L955.132 682.036 L954.573 682.036 L954.014 682.036 L953.454 682.036 L952.895 682.036 L952.336 682.036 L951.777 682.036 L951.217 682.036 L950.658 682.036 L950.099 682.036 L949.54 682.036 L948.98 682.036 L948.421 682.036 L947.862 682.036 L947.303 682.036 L946.743 682.036 L946.184 682.036 L945.625 682.036 L945.066 682.036 L944.506 682.036 L943.947 682.036 L943.388 682.036 L942.829 682.036 L942.269 682.036 L941.71 682.036 L941.151 682.036 L940.592 682.036 L940.032 682.036 L939.473 682.036 L938.914 682.036 L938.355 682.036 L937.795 682.036 L937.236 682.036 L936.677 682.036 L936.118 682.036 L935.558 682.036 L934.999 682.036 L934.44 682.036 L933.881 682.036 L933.321 682.036 L932.762 682.036 L932.203 682.036 L931.644 682.036 L931.084 682.036 L930.525 682.036 L929.966 682.036 L929.406 682.036 L928.847 682.036 L928.288 682.036 L927.729 682.036 L927.169 682.036 L926.61 682.036 L926.051 682.036 L925.492 682.036 L924.932 682.036 L924.373 682.036 L923.814 682.036 L923.255 682.036 L922.695 682.036 L922.136 682.036 L921.577 682.036 L921.018 682.036 L920.458 682.036 L919.899 682.036 L919.34 682.036 L918.781 682.036 L918.221 682.036 L917.662 682.036 L917.103 682.036 L916.544 682.036 L915.984 682.036 L915.425 682.036 L914.866 682.036 L914.307 682.036 L913.747 682.036 L913.188 682.036 L912.629 682.036 L912.07 682.036 L911.51 682.036 L910.951 682.036 L910.392 682.036 L909.833 682.036 L909.273 682.036 L908.714 682.036 L908.155 682.036 L907.596 682.036 L907.036 682.036 L906.477 682.036 L905.918 682.036 L905.359 682.036 L904.799 682.036 L904.24 682.036 L903.681 682.036 L903.122 682.036 L902.562 682.036 L902.003 682.036 L901.444 682.036 L900.885 682.036 L900.325 682.036 L899.766 682.036 L899.207 682.036 L898.648 682.036 L898.088 682.036 L897.529 682.036 L896.97 682.036 L896.411 682.036 L895.851 682.036 L895.292 682.036 L894.733 682.036 L894.174 682.036 L893.614 682.036 L893.055 682.036 L892.496 682.036 L891.937 682.036 L891.377 682.036 L890.818 682.036 L890.259 682.036 L889.7 682.036 L889.14 682.036 L888.581 682.036 L888.022 682.036 L887.463 682.036 L886.903 682.036 L886.344 682.036 L885.785 682.036 L885.226 682.036 L884.666 682.036 L884.107 682.036 L883.548 682.036 L882.989 682.036 L882.429 682.036 L881.87 682.036 L881.311 682.036 L880.752 682.036 L880.192 682.036 L879.633 682.036 L879.074 682.036 L878.515 682.036 L877.955 682.036 L877.396 682.036 L876.837 682.036 L876.278 682.036 L875.718 682.036 L875.159 682.036 L874.6 682.036 L874.041 682.036 L873.481 682.036 L872.922 682.036 L872.363 682.036 L871.804 682.036 L871.244 682.036 L870.685 682.036 L870.126 682.036 L869.567 682.036 L869.007 682.036 L868.448 682.036 L867.889 682.036 L867.33 682.036 L866.77 682.036 L866.211 682.036 L865.652 682.036 L865.093 682.036 L864.533 682.036 L863.974 682.036 L863.415 682.036 L862.856 682.036 L862.296 682.036 L861.737 682.036 L861.178 682.036 L860.619 682.036 L860.059 682.036 L859.5 682.036 L858.941 682.036 L858.382 682.036 L857.822 682.036 L857.263 682.036 L856.704 682.036 L856.145 682.036 L855.585 682.036 L855.026 682.036 L854.467 682.036 L853.908 682.036 L853.348 682.036 L852.789 682.036 L852.23 682.036 L851.671 682.036 L851.111 682.036 L850.552 682.036 L849.993 682.036 L849.434 682.036 L848.874 682.036 L848.315 682.036 L847.756 682.036 L847.197 682.036 L846.637 682.036 L846.078 682.036 L845.519 682.036 L844.96 682.036 L844.4 682.036 L843.841 682.036 L843.282 682.036 L842.723 682.036 L842.163 682.036 L841.604 682.036 L841.045 682.036 L840.486 682.036 L839.926 682.036 L839.367 682.036 L838.808 682.036 L838.249 682.036 L837.689 682.036 L837.13 682.036 L836.571 682.036 L836.012 682.036 L835.452 682.036 L834.893 682.036 L834.334 682.036 L833.775 682.036 L833.215 682.036 L832.656 682.036 L832.097 682.036 L831.538 682.036 L830.978 682.036 L830.419 682.036 L829.86 682.036 L829.301 682.036 L828.741 682.036 L828.182 682.036 L827.623 682.036 L827.064 682.036 L826.504 682.036 L825.945 682.036 L825.386 682.036 L824.827 682.036 L824.267 682.036 L823.708 682.036 L823.149 682.036 L822.59 682.036 L822.03 682.036 L821.471 682.036 L820.912 682.036 L820.353 682.036 L819.793 682.036 L819.234 682.036 L818.675 682.036 L818.116 682.036 L817.556 682.036 L816.997 682.036 L816.438 682.036 L815.879 682.036 L815.319 682.036 L814.76 682.036 L814.201 682.036 L813.642 682.036 L813.082 682.036 L812.523 682.036 L811.964 682.036 L811.405 682.036 L810.845 682.036 L810.286 682.036 L809.727 682.036 L809.168 682.036 L808.608 682.036 L808.049 682.036 L807.49 682.036 L806.931 682.036 L806.371 682.036 L805.812 682.036 L805.253 682.036 L804.693 682.036 L804.134 682.036 L803.575 682.036 L803.016 682.036 L802.456 682.036 L801.897 682.036 L801.338 682.036 L800.779 682.036 L800.219 682.036 L799.66 682.036 L799.101 682.036 L798.542 682.036 L797.982 682.036 L797.423 682.036 L796.864 682.036 L796.305 682.036 L795.745 682.036 L795.186 682.036 L794.627 682.036 L794.068 682.036 L793.508 682.036 L792.949 682.036 L792.39 682.036 L791.831 682.036 L791.271 682.036 L790.712 682.036 L790.153 682.036 L789.594 682.036 L789.034 682.036 L788.475 682.036 L787.916 682.036 L787.357 682.036 L786.797 682.036 L786.238 682.036 L785.679 682.036 L785.12 682.036 L784.56 682.036 L784.001 682.036 L783.442 682.036 L782.883 682.036 L782.323 682.036 L781.764 682.036 L781.205 682.036 L780.646 682.036 L780.086 682.036 L779.527 682.036 L778.968 682.036 L778.409 682.036 L777.849 682.036 L777.29 682.036 L776.731 682.036 L776.172 682.036 L775.612 682.036 L775.053 682.036 L774.494 682.036 L773.935 682.036 L773.375 682.036 L772.816 682.036 L772.257 682.036 L771.698 682.036 L771.138 682.036 L770.579 682.036 L770.02 682.036 L769.461 682.036 L768.901 682.036 L768.342 682.036 L767.783 682.036 L767.224 682.036 L766.664 682.036 L766.105 682.036 L765.546 682.036 L764.987 682.036 L764.427 682.036 L763.868 682.036 L763.309 682.036 L762.75 682.036 L762.19 682.036 L761.631 682.036 L761.072 682.036 L760.513 682.036 L759.953 682.036 L759.394 682.036 L758.835 682.036 L758.276 682.036 L757.716 682.036 L757.157 682.036 L756.598 682.036 L756.039 682.036 L755.479 682.036 L754.92 682.036 L754.361 682.036 L753.802 682.036 L753.242 682.036 L752.683 682.036 L752.124 682.036 L751.565 682.036 L751.005 682.036 L750.446 682.036 L749.887 682.036 L749.328 682.036 L748.768 682.036 L748.209 682.036 L747.65 682.036 L747.091 682.036 L746.531 682.036 L745.972 682.036 L745.413 682.036 L744.854 682.036 L744.294 682.036 L743.735 682.036 L743.176 682.036 L742.617 682.036 L742.057 682.036 L741.498 682.036 L740.939 682.036 L740.38 682.036 L739.82 682.036 L739.261 682.036 L738.702 682.036 L738.143 682.036 L737.583 682.036 L737.024 682.036 L736.465 682.036 L735.906 682.036 L735.346 682.036 L734.787 682.036 L734.228 682.036 L733.669 682.036 L733.109 682.036 L732.55 682.036 L731.991 682.036 L731.432 682.036 L730.872 682.036 L730.313 682.036 L729.754 682.036 L729.195 682.036 L728.635 682.036 L728.076 682.036 L727.517 682.036 L726.958 682.036 L726.398 682.036 L725.839 682.036 L725.28 682.036 L724.721 682.036 L724.161 682.036 L723.602 682.036 L723.043 682.036 L722.484 682.036 L721.924 682.036 L721.365 682.036 L720.806 682.036 L720.247 682.036  Z\" fill=\"#3da44d\" fill-rule=\"evenodd\" fill-opacity=\"0.5\"/>\n<polyline clip-path=\"url(#clip443)\" style=\"stroke:#3da44d; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"720.247,683.186 720.806,683.186 721.365,683.186 721.924,683.186 722.484,683.186 723.043,683.186 723.602,683.186 724.161,683.186 724.721,683.186 725.28,683.186 725.839,683.186 726.398,683.186 726.958,683.186 727.517,683.186 728.076,683.186 728.635,683.186 729.195,683.186 729.754,683.186 730.313,683.186 730.872,683.186 731.432,683.186 731.991,683.186 732.55,683.186 733.109,683.186 733.669,683.186 734.228,683.186 734.787,683.186 735.346,683.186 735.906,683.186 736.465,683.186 737.024,683.186 737.583,683.186 738.143,683.186 738.702,683.186 739.261,683.186 739.82,683.186 740.38,683.186 740.939,683.186 741.498,683.186 742.057,683.186 742.617,683.186 743.176,683.186 743.735,683.186 744.294,683.186 744.854,683.186 745.413,683.186 745.972,683.186 746.531,683.186 747.091,683.186 747.65,683.186 748.209,683.186 748.768,683.186 749.328,683.186 749.887,683.186 750.446,683.186 751.005,683.186 751.565,683.186 752.124,683.186 752.683,683.186 753.242,683.186 753.802,683.186 754.361,683.186 754.92,683.186 755.479,683.186 756.039,683.186 756.598,683.186 757.157,683.186 757.716,683.186 758.276,683.186 758.835,683.186 759.394,683.186 759.953,683.186 760.513,683.186 761.072,683.186 761.631,683.186 762.19,683.186 762.75,683.186 763.309,683.186 763.868,683.186 764.427,683.186 764.987,683.186 765.546,683.186 766.105,683.186 766.664,683.186 767.224,683.186 767.783,683.186 768.342,683.186 768.901,683.186 769.461,683.186 770.02,683.186 770.579,683.186 771.138,683.186 771.698,683.186 772.257,683.186 772.816,683.186 773.375,683.186 773.935,683.186 774.494,683.186 775.053,683.186 775.612,683.186 776.172,683.186 776.731,683.186 777.29,683.186 777.849,683.186 778.409,683.186 778.968,683.186 779.527,683.186 780.086,683.186 780.646,683.186 781.205,683.186 781.764,683.186 782.323,683.186 782.883,683.186 783.442,683.186 784.001,683.186 784.56,683.186 785.12,683.186 785.679,683.186 786.238,683.186 786.797,683.186 787.357,683.186 787.916,683.186 788.475,683.186 789.034,683.186 789.594,683.186 790.153,683.186 790.712,683.186 791.271,683.186 791.831,683.186 792.39,683.186 792.949,683.186 793.508,683.186 794.068,683.186 794.627,683.186 795.186,683.186 795.745,683.186 796.305,683.186 796.864,683.186 797.423,683.186 797.982,683.186 798.542,683.186 799.101,683.186 799.66,683.186 800.219,683.186 800.779,683.186 801.338,683.186 801.897,683.186 802.456,683.186 803.016,683.186 803.575,683.186 804.134,683.186 804.693,683.186 805.253,683.186 805.812,683.186 806.371,683.186 806.931,683.186 807.49,683.186 808.049,683.186 808.608,683.186 809.168,683.186 809.727,683.186 810.286,683.186 810.845,683.186 811.405,683.186 811.964,683.186 812.523,683.186 813.082,683.186 813.642,683.186 814.201,683.186 814.76,683.186 815.319,683.186 815.879,683.186 816.438,683.186 816.997,683.186 817.556,683.186 818.116,683.186 818.675,683.186 819.234,683.186 819.793,683.186 820.353,683.186 820.912,683.186 821.471,683.186 822.03,683.186 822.59,683.186 823.149,683.186 823.708,683.186 824.267,683.186 824.827,683.186 825.386,683.186 825.945,683.186 826.504,683.186 827.064,683.186 827.623,683.186 828.182,683.186 828.741,683.186 829.301,683.186 829.86,683.186 830.419,683.186 830.978,683.186 831.538,683.186 832.097,683.186 832.656,683.186 833.215,683.186 833.775,683.186 834.334,683.186 834.893,683.186 835.452,683.186 836.012,683.186 836.571,683.186 837.13,683.186 837.689,683.186 838.249,683.186 838.808,683.186 839.367,683.186 839.926,683.186 840.486,683.186 841.045,683.186 841.604,683.186 842.163,683.186 842.723,683.186 843.282,683.186 843.841,683.186 844.4,683.186 844.96,683.186 845.519,683.186 846.078,683.186 846.637,683.186 847.197,683.186 847.756,683.186 848.315,683.186 848.874,683.186 849.434,683.186 849.993,683.186 850.552,683.186 851.111,683.186 851.671,683.186 852.23,683.186 852.789,683.186 853.348,683.186 853.908,683.186 854.467,683.186 855.026,683.186 855.585,683.186 856.145,683.186 856.704,683.186 857.263,683.186 857.822,683.186 858.382,683.186 858.941,683.186 859.5,683.186 860.059,683.186 860.619,683.186 861.178,683.186 861.737,683.186 862.296,683.186 862.856,683.186 863.415,683.186 863.974,683.186 864.533,683.186 865.093,683.186 865.652,683.186 866.211,683.186 866.77,683.186 867.33,683.186 867.889,683.186 868.448,683.186 869.007,683.186 869.567,683.186 870.126,683.186 870.685,683.186 871.244,683.186 871.804,683.186 872.363,683.186 872.922,683.186 873.481,683.186 874.041,683.186 874.6,683.186 875.159,683.186 875.718,683.186 876.278,683.186 876.837,683.186 877.396,683.186 877.955,683.186 878.515,683.186 879.074,683.186 879.633,683.186 880.192,683.186 880.752,683.186 881.311,683.186 881.87,683.186 882.429,683.186 882.989,683.186 883.548,683.186 884.107,683.186 884.666,683.186 885.226,683.186 885.785,683.186 886.344,683.186 886.903,683.186 887.463,683.186 888.022,683.186 888.581,683.186 889.14,683.186 889.7,683.186 890.259,683.186 890.818,683.186 891.377,683.186 891.937,683.186 892.496,683.186 893.055,683.186 893.614,683.186 894.174,683.186 894.733,683.186 895.292,683.186 895.851,683.186 896.411,683.186 896.97,683.186 897.529,683.186 898.088,683.186 898.648,683.186 899.207,683.186 899.766,683.186 900.325,683.186 900.885,683.186 901.444,683.186 902.003,683.186 902.562,683.186 903.122,683.186 903.681,683.186 904.24,683.186 904.799,683.186 905.359,683.186 905.918,683.186 906.477,683.186 907.036,683.186 907.596,683.186 908.155,683.186 908.714,683.186 909.273,683.186 909.833,683.186 910.392,683.186 910.951,683.186 911.51,683.186 912.07,683.186 912.629,683.186 913.188,683.186 913.747,683.186 914.307,683.186 914.866,683.186 915.425,683.186 915.984,683.186 916.544,683.186 917.103,683.186 917.662,683.186 918.221,683.186 918.781,683.186 919.34,683.186 919.899,683.186 920.458,683.186 921.018,683.186 921.577,683.186 922.136,683.186 922.695,683.186 923.255,683.186 923.814,683.186 924.373,683.186 924.932,683.186 925.492,683.186 926.051,683.186 926.61,683.186 927.169,683.186 927.729,683.186 928.288,683.186 928.847,683.186 929.406,683.186 929.966,683.186 930.525,683.186 931.084,683.186 931.644,683.186 932.203,683.186 932.762,683.186 933.321,683.186 933.881,683.186 934.44,683.186 934.999,683.186 935.558,683.186 936.118,683.186 936.677,683.186 937.236,683.186 937.795,683.186 938.355,683.186 938.914,683.186 939.473,683.186 940.032,683.186 940.592,683.186 941.151,683.186 941.71,683.186 942.269,683.186 942.829,683.186 943.388,683.186 943.947,683.186 944.506,683.186 945.066,683.186 945.625,683.186 946.184,683.186 946.743,683.186 947.303,683.186 947.862,683.186 948.421,683.186 948.98,683.186 949.54,683.186 950.099,683.186 950.658,683.186 951.217,683.186 951.777,683.186 952.336,683.186 952.895,683.186 953.454,683.186 954.014,683.186 954.573,683.186 955.132,683.186 955.691,683.186 956.251,683.186 956.81,683.186 957.369,683.186 957.928,683.186 958.488,683.186 959.047,683.186 959.606,683.186 960.165,683.186 960.725,683.186 961.284,683.186 961.843,683.186 962.402,683.186 962.962,683.186 963.521,683.186 964.08,683.186 964.639,683.186 965.199,683.186 965.758,683.186 966.317,683.186 966.876,683.186 967.436,683.186 967.995,683.186 968.554,683.186 969.113,683.186 969.673,683.186 970.232,683.186 970.791,683.186 971.35,683.186 971.91,683.186 972.469,683.186 973.028,683.186 973.587,683.186 974.147,683.186 974.706,683.186 975.265,683.186 975.824,683.186 976.384,683.186 976.943,683.186 977.502,683.186 978.061,683.186 978.621,683.186 979.18,683.186 979.739,683.186 980.298,683.186 980.858,683.186 981.417,683.186 981.976,683.186 982.535,683.186 983.095,683.186 983.654,683.186 984.213,683.186 984.772,683.186 985.332,683.186 985.891,683.186 986.45,683.186 987.009,683.186 987.569,683.186 988.128,683.186 988.687,683.186 989.246,683.186 989.806,683.186 990.365,683.186 990.924,683.186 991.483,683.186 992.043,683.186 992.602,683.186 993.161,683.186 993.72,683.186 994.28,683.186 994.839,683.186 995.398,683.186 995.957,683.186 996.517,683.186 997.076,683.186 997.635,683.186 998.194,683.186 998.754,683.186 999.313,683.186 999.872,683.186 1000.43,683.186 1000.99,683.186 1001.55,683.186 1002.11,683.186 1002.67,683.186 1003.23,683.186 1003.79,683.186 1004.35,683.186 1004.91,683.186 1005.46,683.186 1006.02,683.186 1006.58,683.186 1007.14,683.186 1007.7,683.186 1008.26,683.186 1008.82,683.186 1009.38,683.186 1009.94,683.186 1010.5,683.186 1011.06,683.186 1011.62,683.186 1012.18,683.186 1012.73,683.186 1013.29,683.186 1013.85,683.186 1014.41,683.186 1014.97,683.186 1015.53,683.186 1016.09,683.186 1016.65,683.186 1017.21,683.186 1017.77,683.186 1018.33,683.186 1018.89,683.186 1019.45,683.186 1020.01,683.186 1020.56,683.186 1021.12,683.186 1021.68,683.186 1022.24,683.186 1022.8,683.186 1023.36,683.186 1023.92,683.186 1024.48,683.186 1025.04,683.186 1025.6,683.186 1026.16,683.186 1026.72,683.186 1027.28,683.186 1027.83,683.186 1028.39,683.186 1028.95,683.186 1029.51,683.186 1030.07,683.186 1030.63,683.186 1031.19,683.186 1031.75,683.186 1032.31,683.186 1032.87,683.186 1033.43,683.186 1033.99,683.186 1034.55,683.186 1035.1,683.186 1035.66,683.186 1036.22,683.186 1036.78,683.186 1037.34,683.186 1037.9,683.186 1038.46,683.186 1039.02,683.186 1039.58,683.186 1040.14,683.186 1040.7,683.186 1041.26,683.186 1041.82,683.186 1042.38,683.186 1042.93,683.186 1043.49,683.186 1044.05,683.186 1044.61,683.186 1045.17,683.186 1045.73,683.186 1046.29,683.186 1046.85,683.186 1047.41,683.186 1047.97,683.186 1048.53,683.186 1049.09,683.186 1049.65,683.186 1050.2,683.186 1050.76,683.186 1051.32,683.186 1051.88,683.186 1052.44,683.186 1053,683.186 1053.56,683.186 1054.12,683.186 1054.68,683.186 1055.24,683.186 1055.8,683.186 1056.36,683.186 1056.92,683.186 1057.48,683.186 1058.03,683.186 1058.59,683.186 1059.15,683.186 1059.71,683.186 1060.27,683.186 1060.83,683.186 1061.39,683.186 1061.95,683.186 1062.51,683.186 1063.07,683.186 1063.63,683.186 1064.19,683.186 1064.75,683.186 1065.3,683.186 1065.86,683.186 1066.42,683.186 1066.98,683.186 1067.54,683.186 1068.1,683.186 1068.66,683.186 1069.22,683.186 1069.78,683.186 1070.34,683.186 1070.9,683.186 1071.46,683.186 1072.02,683.186 1072.57,683.186 1073.13,683.186 1073.69,683.186 1074.25,683.186 1074.81,683.186 1075.37,683.186 1075.93,683.186 1076.49,683.186 1077.05,683.186 1077.61,683.186 1078.17,683.186 1078.73,683.186 1079.29,683.186 1079.85,683.186 1080.4,683.186 1080.96,683.186 1081.52,683.186 1082.08,683.186 1082.64,683.186 1083.2,683.186 1083.76,683.186 1084.32,683.186 1084.88,683.186 1085.44,683.186 1086,683.186 1086.56,683.186 1087.12,683.186 1087.67,683.186 1088.23,683.186 1088.79,683.186 1089.35,683.186 1089.91,683.186 1090.47,683.186 1091.03,683.186 1091.59,683.186 1092.15,683.186 1092.71,683.186 1093.27,683.186 1093.83,683.186 1094.39,683.186 1094.94,683.186 1095.5,683.186 1096.06,683.186 1096.62,683.186 1097.18,683.186 1097.74,683.186 1098.3,683.186 1098.86,683.186 1099.42,683.186 1099.98,683.186 1100.54,683.186 1101.1,683.186 1101.66,683.186 1102.22,683.186 1102.77,683.186 1103.33,683.186 1103.89,683.186 1104.45,683.186 1105.01,683.186 1105.57,683.186 1106.13,683.186 1106.69,683.186 1107.25,683.186 1107.81,683.186 1108.37,683.186 1108.93,683.186 1109.49,683.186 1110.04,683.186 1110.6,683.186 1111.16,683.186 1111.72,683.186 1112.28,683.186 1112.84,683.186 1113.4,683.186 1113.96,683.186 1114.52,683.186 1115.08,683.186 1115.64,683.186 1116.2,683.186 1116.76,683.186 1117.31,683.186 1117.87,683.186 1118.43,683.186 1118.99,683.186 1119.55,683.186 1120.11,683.186 1120.67,683.186 1121.23,683.186 1121.79,683.186 1122.35,683.186 1122.91,683.186 1123.47,683.186 1124.03,683.186 1124.59,683.186 1125.14,683.186 1125.7,683.186 1126.26,683.186 1126.82,683.186 1127.38,683.186 1127.94,683.186 1128.5,683.186 1129.06,683.186 1129.62,683.186 1130.18,683.186 1130.74,683.186 1131.3,683.186 1131.86,683.186 1132.41,683.186 1132.97,683.186 1133.53,683.186 1134.09,683.186 1134.65,683.186 1135.21,683.186 1135.77,683.186 1136.33,683.186 1136.89,683.186 1137.45,683.186 1138.01,683.186 1138.57,683.186 1139.13,683.186 1139.68,683.186 1140.24,683.186 1140.8,683.186 1141.36,683.186 1141.92,683.186 1142.48,683.186 1143.04,683.186 1143.6,683.186 1144.16,683.186 1144.72,683.186 1145.28,683.186 1145.84,683.186 1146.4,683.186 1146.96,683.186 1147.51,683.186 1148.07,683.186 1148.63,683.186 1149.19,683.186 1149.75,683.186 1150.31,683.186 1150.87,683.186 1151.43,683.186 1151.99,683.186 1152.55,683.186 1153.11,683.186 1153.67,683.186 1154.23,683.186 1154.78,683.186 1155.34,683.186 1155.9,683.186 1156.46,683.186 1157.02,683.186 1157.58,683.186 1158.14,683.186 1158.7,683.186 1159.26,683.186 1159.82,683.186 1160.38,683.186 1160.94,683.186 1161.5,683.186 1162.05,683.186 1162.61,683.186 1163.17,683.186 1163.73,683.186 1164.29,683.186 1164.85,683.186 1165.41,683.186 1165.97,683.186 1166.53,683.186 1167.09,683.186 1167.65,683.186 1168.21,683.186 1168.77,683.186 1169.33,683.186 1169.88,683.186 1170.44,683.186 1171,683.186 1171.56,683.186 1172.12,683.186 1172.68,683.186 1173.24,683.186 1173.8,683.186 1174.36,683.186 1174.92,683.186 1175.48,683.186 1176.04,683.186 1176.6,683.186 1177.15,683.186 1177.71,683.186 1178.27,683.186 1178.83,683.186 1179.39,683.186 1179.95,683.186 1180.51,683.186 1181.07,683.186 1181.63,683.186 1182.19,683.186 1182.75,683.186 1183.31,683.186 1183.87,683.186 1184.43,683.186 1184.98,683.186 1185.54,683.186 1186.1,683.186 1186.66,683.186 1187.22,683.186 1187.78,683.186 1188.34,683.186 1188.9,683.186 1189.46,683.186 1190.02,683.186 1190.58,683.186 1191.14,683.186 1191.7,683.186 1192.25,683.186 1192.81,683.186 1193.37,683.186 1193.93,683.186 1194.49,683.186 1195.05,683.186 1195.61,683.186 1196.17,683.186 1196.73,683.186 1197.29,683.186 1197.85,683.186 1198.41,683.186 1198.97,683.186 1199.52,683.186 1200.08,683.186 1200.64,683.186 1201.2,683.186 1201.76,683.186 1202.32,683.186 1202.88,683.186 1203.44,683.186 1204,683.186 1204.56,683.186 1205.12,683.186 1205.68,683.186 1206.24,683.186 1206.8,683.186 1207.35,683.186 1207.91,683.186 1208.47,683.186 1209.03,683.186 1209.59,683.186 1210.15,683.186 1210.71,683.186 1211.27,683.186 1211.83,683.186 1212.39,683.186 1212.95,683.186 1213.51,683.186 1214.07,683.186 1214.62,683.186 1215.18,683.186 1215.74,683.186 1216.3,683.186 1216.86,683.186 1217.42,683.186 1217.98,683.186 1218.54,683.186 1219.1,683.186 1219.66,683.186 1220.22,683.186 1220.78,683.186 1221.34,683.186 1221.89,683.186 1222.45,683.186 1223.01,683.186 1223.57,683.186 1224.13,683.186 1224.69,683.186 1225.25,683.186 1225.81,683.186 1226.37,683.186 1226.93,683.186 1227.49,683.186 1228.05,683.186 1228.61,683.186 1229.17,683.186 1229.72,683.186 1230.28,683.186 1230.84,683.186 1231.4,683.186 1231.96,683.186 1232.52,683.186 1233.08,683.186 1233.64,683.186 1234.2,683.186 1234.76,683.186 1235.32,683.186 1235.88,683.186 1236.44,683.186 1236.99,683.186 1237.55,683.186 1238.11,683.186 1238.67,683.186 1239.23,683.186 1239.79,683.186 1240.35,683.186 1240.91,683.186 1241.47,683.186 1242.03,683.186 1242.59,683.186 1243.15,683.186 1243.71,683.186 1244.26,683.186 1244.82,683.186 1245.38,683.186 1245.94,683.186 1246.5,683.186 1247.06,683.186 1247.62,683.186 1248.18,683.186 1248.74,683.186 1249.3,683.186 1249.86,683.186 1250.42,683.186 1250.98,683.186 1251.54,683.186 1252.09,683.186 1252.65,683.186 1253.21,683.186 1253.77,683.186 1254.33,683.186 1254.89,683.186 1255.45,683.186 1256.01,683.186 1256.57,683.186 1257.13,683.186 1257.69,683.186 1258.25,683.186 1258.81,683.186 1259.36,683.186 1259.92,683.186 1260.48,683.186 1261.04,683.186 1261.6,683.186 1262.16,683.186 1262.72,683.186 1263.28,683.186 1263.84,683.186 1264.4,683.186 1264.96,683.186 1265.52,683.186 1266.08,683.186 1266.63,683.186 1267.19,683.186 1267.75,683.186 1268.31,683.186 1268.87,683.186 1269.43,683.186 1269.99,683.186 1270.55,683.186 1271.11,683.186 1271.67,683.186 1272.23,683.186 1272.79,683.186 1273.35,683.186 1273.91,683.186 1274.46,683.186 1275.02,683.186 1275.58,683.186 1276.14,683.186 1276.7,683.186 1277.26,683.186 1277.82,683.186 1278.38,683.186 1278.94,683.186 1279.5,683.186 1280.06,683.186 1280.62,683.186 1281.18,683.186 1281.73,683.186 1282.29,683.186 1282.85,683.186 1283.41,683.186 1283.97,683.186 1284.53,683.186 1285.09,683.186 1285.65,683.186 1286.21,683.186 1286.77,683.186 1287.33,683.186 1287.89,683.186 1288.45,683.186 1289,683.186 1289.56,683.186 1290.12,683.186 1290.68,683.186 1291.24,683.186 1291.8,683.186 1292.36,683.186 1292.92,683.186 1293.48,683.186 1294.04,683.186 1294.6,683.186 1295.16,683.186 1295.72,683.186 1296.28,683.186 1296.83,683.186 1297.39,683.186 1297.95,683.186 1298.51,683.186 1299.07,683.186 1299.63,683.186 1300.19,683.186 1300.75,683.186 1301.31,683.186 1301.87,683.186 1302.43,683.186 1302.99,683.186 1303.55,683.186 1304.1,683.186 1304.66,683.186 1305.22,683.186 1305.78,683.186 1306.34,683.186 1306.9,683.186 1307.46,683.186 1308.02,683.186 1308.58,683.186 1309.14,683.186 1309.7,683.186 1310.26,683.186 1310.82,683.186 1311.38,683.186 1311.93,683.186 1312.49,683.186 1313.05,683.186 1313.61,683.186 1314.17,683.186 1314.73,683.186 1315.29,683.186 1315.85,683.186 1316.41,683.186 1316.97,683.186 1317.53,683.186 1318.09,683.186 1318.65,683.186 1319.2,683.186 1319.76,683.186 1320.32,683.186 1320.88,683.186 1321.44,683.186 1322,683.186 1322.56,683.186 1323.12,683.186 1323.68,683.186 1324.24,683.186 1324.8,683.186 1325.36,683.186 1325.92,683.186 1326.47,683.186 1327.03,683.186 1327.59,683.186 1328.15,683.186 1328.71,683.186 1329.27,683.186 1329.83,683.186 1330.39,683.186 1330.95,683.186 1331.51,683.186 1332.07,683.186 1332.63,683.186 1333.19,683.186 1333.75,683.186 1334.3,683.186 1334.86,683.186 1335.42,683.186 1335.98,683.186 1336.54,683.186 1337.1,683.186 1337.66,683.186 1338.22,683.186 1338.78,683.186 1339.34,683.186 1339.9,683.186 1340.46,683.186 1341.02,683.186 1341.57,683.186 1342.13,683.186 1342.69,683.186 1343.25,683.186 1343.81,683.186 1344.37,683.186 1344.93,683.186 1345.49,683.186 1346.05,683.186 1346.61,683.186 1347.17,683.186 1347.73,683.186 1348.29,683.186 1348.84,683.186 1349.4,683.186 1349.96,683.186 1350.52,683.186 1351.08,683.186 1351.64,683.186 1352.2,683.186 1352.76,683.186 1353.32,683.186 1353.88,683.186 1354.44,683.186 1355,683.186 1355.56,683.186 1356.12,683.186 1356.67,683.186 1357.23,683.186 1357.79,683.186 1358.35,683.186 1358.91,683.186 1359.47,683.186 1360.03,683.186 1360.59,683.186 1361.15,683.186 1361.71,683.186 1362.27,683.186 1362.83,683.186 1363.39,683.186 1363.94,683.186 1364.5,683.186 1365.06,683.186 1365.62,683.186 1366.18,683.186 1366.74,683.186 1367.3,683.186 1367.86,683.186 1368.42,683.186 1368.98,683.186 1369.54,683.186 1370.1,683.186 1370.66,683.186 1371.21,683.186 1371.77,683.186 1372.33,683.186 1372.89,683.186 1373.45,683.186 1374.01,683.186 1374.57,683.186 1375.13,683.186 1375.69,683.186 1376.25,683.186 1376.81,683.186 1377.37,683.186 1377.93,683.186 1378.49,683.186 1379.04,683.186 1379.6,683.186 1380.16,683.186 1380.72,683.186 1381.28,683.186 1381.84,683.186 1382.4,683.186 1382.96,683.186 1383.52,683.186 1384.08,683.186 1384.64,683.186 1385.2,683.186 1385.76,683.186 1386.31,683.186 1386.87,683.186 1387.43,683.186 1387.99,683.186 1388.55,683.186 1389.11,683.186 1389.67,683.186 1390.23,683.186 1390.79,683.186 1391.35,683.186 1391.91,683.186 1392.47,683.186 1393.03,683.186 1393.58,683.186 1394.14,683.186 1394.7,683.186 1395.26,683.186 1395.82,683.186 1396.38,683.186 1396.94,683.186 1397.5,683.186 1398.06,683.186 1398.62,683.186 1399.18,683.186 1399.74,683.186 1400.3,683.186 1400.86,683.186 1401.41,683.186 1401.97,683.186 1402.53,683.186 1403.09,683.186 1403.65,683.186 1404.21,683.186 1404.77,683.186 1405.33,683.186 1405.89,683.186 1406.45,683.186 1407.01,683.186 1407.57,683.186 1408.13,683.186 1408.68,683.186 1409.24,683.186 1409.8,683.186 1410.36,683.186 1410.92,683.186 1411.48,683.186 1412.04,683.186 1412.6,683.186 1413.16,683.186 1413.72,683.186 1414.28,683.186 1414.84,683.186 1415.4,683.186 1415.95,683.186 1416.51,683.186 1417.07,683.186 1417.63,683.186 1418.19,683.186 1418.75,683.186 1419.31,683.186 1419.87,683.186 1420.43,683.186 1420.99,683.186 1421.55,683.186 1422.11,683.186 1422.67,683.186 1423.23,683.186 1423.78,683.186 1424.34,683.186 1424.9,683.186 1425.46,683.186 1426.02,683.186 1426.58,683.186 1427.14,683.186 1427.7,683.186 1428.26,683.186 1428.82,683.186 1429.38,683.186 1429.94,683.186 1430.5,683.186 1431.05,683.186 1431.61,683.186 1432.17,683.186 1432.73,683.186 1433.29,683.186 1433.85,683.186 1434.41,683.186 1434.97,683.186 1435.53,683.186 1436.09,683.186 1436.65,683.186 1437.21,683.186 1437.77,683.186 1438.33,683.186 1438.88,683.186 1439.44,683.186 1440,683.186 1440.56,683.186 1441.12,683.186 1441.68,683.186 1442.24,683.186 1442.8,683.186 1443.36,683.186 1443.92,683.186 1444.48,683.186 1445.04,683.186 1445.6,683.186 1446.15,683.186 1446.71,683.186 1447.27,683.186 1447.83,683.186 1448.39,683.186 1448.95,683.186 1449.51,683.186 1450.07,683.186 1450.63,683.186 1451.19,683.186 1451.75,683.186 1452.31,683.186 1452.87,683.186 1453.42,683.186 1453.98,683.186 1454.54,683.186 1455.1,683.186 1455.66,683.186 1456.22,683.186 1456.78,683.186 1457.34,683.186 1457.9,683.186 1458.46,683.186 1459.02,683.186 1459.58,683.186 1460.14,683.186 1460.7,683.186 1461.25,683.186 1461.81,683.186 1462.37,683.186 1462.93,683.186 1463.49,683.186 1464.05,683.186 1464.61,683.186 1465.17,683.186 1465.73,683.186 1466.29,683.186 1466.85,683.186 1467.41,683.186 1467.97,683.186 1468.52,683.186 1469.08,683.186 1469.64,683.186 1470.2,683.186 1470.76,683.186 1471.32,683.186 1471.88,683.186 1472.44,683.186 1473,683.186 1473.56,683.186 1474.12,683.186 1474.68,683.186 1475.24,683.186 1475.79,683.186 1476.35,683.186 1476.91,683.186 1477.47,683.186 1478.03,683.186 1478.59,683.186 1479.15,683.186 1479.71,683.186 1480.27,683.186 1480.83,683.186 1481.39,683.186 1481.95,683.186 1482.51,683.186 1483.07,683.186 1483.62,683.186 1484.18,683.186 1484.74,683.186 1485.3,683.186 1485.86,683.186 1486.42,683.186 1486.98,683.186 1487.54,683.186 1488.1,683.186 1488.66,683.186 1489.22,683.186 1489.78,683.186 1490.34,683.186 1490.89,683.186 1491.45,683.186 1492.01,683.186 1492.57,683.186 1493.13,683.186 1493.69,683.186 1494.25,683.186 1494.81,683.186 1495.37,683.186 1495.93,683.186 1496.49,683.186 1497.05,683.186 1497.61,683.186 1498.16,683.186 1498.72,683.186 1499.28,683.186 1499.84,683.186 1500.4,683.186 1500.96,683.186 1501.52,683.186 1502.08,683.186 1502.64,683.186 1503.2,683.186 1503.76,683.186 1504.32,683.186 1504.88,683.186 1505.44,683.186 1505.99,683.186 1506.55,683.186 1507.11,683.186 1507.67,683.186 1508.23,683.186 1508.79,683.186 1509.35,683.186 1509.91,683.186 1510.47,683.186 1511.03,683.186 1511.59,683.186 1512.15,683.186 1512.71,683.186 1513.26,683.186 1513.82,683.186 1514.38,683.186 1514.94,683.186 1515.5,683.186 1516.06,683.186 1516.62,683.186 1517.18,683.186 1517.74,683.186 1518.3,683.186 1518.86,683.186 1519.42,683.186 1519.98,683.186 1520.53,683.186 1521.09,683.186 1521.65,683.186 1522.21,683.186 1522.77,683.186 1523.33,683.186 1523.89,683.186 1524.45,683.186 1525.01,683.186 1525.57,683.186 1526.13,683.186 1526.69,683.186 1527.25,683.186 1527.81,683.186 1528.36,683.186 1528.92,683.186 1529.48,683.186 1530.04,683.186 1530.6,683.186 1531.16,683.186 1531.72,683.186 1532.28,683.186 1532.84,683.186 1533.4,683.186 1533.96,683.186 1534.52,683.186 1535.08,683.186 1535.63,683.186 1536.19,683.186 1536.75,683.186 1537.31,683.186 1537.87,683.186 1538.43,683.186 1538.99,683.186 1539.55,683.186 1540.11,683.186 1540.67,683.186 1541.23,683.186 1541.79,683.186 1542.35,683.186 1542.9,683.186 1543.46,683.186 1544.02,683.186 1544.58,683.186 1545.14,683.186 1545.7,683.186 1546.26,683.186 1546.82,683.186 1547.38,683.186 1547.94,683.186 1548.5,683.186 1549.06,683.186 1549.62,683.186 1550.18,683.186 1550.73,683.186 1551.29,683.186 1551.85,683.186 1552.41,683.186 1552.97,683.186 1553.53,683.186 1554.09,683.186 1554.65,683.186 1555.21,683.186 1555.77,683.186 1556.33,683.186 1556.89,683.186 1557.45,683.186 1558,683.186 1558.56,683.186 1559.12,683.186 1559.68,683.186 1560.24,683.186 1560.8,683.186 1561.36,683.186 1561.92,683.186 1562.48,683.186 1563.04,683.186 1563.6,683.186 1564.16,683.186 1564.72,683.186 1565.28,683.186 1565.83,683.186 1566.39,683.186 1566.95,683.186 1567.51,683.186 1568.07,683.186 1568.63,683.186 1569.19,683.186 1569.75,683.186 1570.31,683.186 1570.87,683.186 1571.43,683.186 1571.99,683.186 1572.55,683.186 1573.1,683.186 1573.66,683.186 1574.22,683.186 1574.78,683.186 1575.34,683.186 1575.9,683.186 1576.46,683.186 1577.02,683.186 1577.58,683.186 1578.14,683.186 1578.7,683.186 1579.26,683.186 1579.82,683.186 1580.37,683.186 1580.93,683.186 1581.49,683.186 1582.05,683.186 1582.61,683.186 1583.17,683.186 1583.73,683.186 1584.29,683.186 1584.85,683.186 1585.41,683.186 1585.97,683.186 1586.53,683.186 1587.09,683.186 1587.65,683.186 1588.2,683.186 1588.76,683.186 1589.32,683.186 1589.88,683.186 1590.44,683.186 1591,683.186 1591.56,683.186 1592.12,683.186 1592.68,683.186 1593.24,683.186 1593.8,683.186 1594.36,683.186 1594.92,683.186 1595.47,683.186 1596.03,683.186 1596.59,683.186 1597.15,683.186 1597.71,683.186 1598.27,683.186 1598.83,683.186 1599.39,683.186 1599.95,683.186 1600.51,683.186 1601.07,683.186 1601.63,683.186 1602.19,683.186 1602.74,683.186 1603.3,683.186 1603.86,683.186 1604.42,683.186 1604.98,683.186 1605.54,683.186 1606.1,683.186 1606.66,683.186 1607.22,683.186 1607.78,683.186 1608.34,683.186 1608.9,683.186 1609.46,683.186 1610.02,683.186 1610.57,683.186 1611.13,683.186 1611.69,683.186 1612.25,683.186 1612.81,683.186 1613.37,683.186 1613.93,683.186 1614.49,683.186 1615.05,683.186 1615.61,683.186 1616.17,683.186 1616.73,683.186 1617.29,683.186 1617.84,683.186 1618.4,683.186 1618.96,683.186 1619.52,683.186 1620.08,683.186 1620.64,683.186 1621.2,683.186 1621.76,683.186 1622.32,683.186 1622.88,683.186 1623.44,683.186 1624,683.186 1624.56,683.186 1625.11,683.186 1625.67,683.186 1626.23,683.186 1626.79,683.186 1627.35,683.186 1627.91,683.186 1628.47,683.186 1629.03,683.186 1629.59,683.186 1630.15,683.186 1630.71,683.186 1631.27,683.186 1631.83,683.186 1632.39,683.186 1632.94,683.186 1633.5,683.186 1634.06,683.186 1634.62,683.186 1635.18,683.186 1635.74,683.186 1636.3,683.186 1636.86,683.186 1637.42,683.186 1637.98,683.186 1638.54,683.186 1639.1,683.186 1639.66,683.186 1640.21,683.186 1640.77,683.186 1641.33,683.186 1641.89,683.186 1642.45,683.186 1643.01,683.186 1643.57,683.186 1644.13,683.186 1644.69,683.186 1645.25,683.186 1645.81,683.186 1646.37,683.186 1646.93,683.186 1647.48,683.186 1648.04,683.186 1648.6,683.186 1649.16,683.186 1649.72,683.186 1650.28,683.186 1650.84,683.186 1651.4,683.186 1651.96,683.186 1652.52,683.186 1653.08,683.186 1653.64,683.186 1654.2,683.186 1654.76,683.186 1655.31,683.186 1655.87,683.186 1656.43,683.186 1656.99,683.186 1657.55,683.186 1658.11,683.186 1658.67,683.186 1659.23,683.186 1659.79,683.186 1660.35,683.186 1660.91,683.186 1661.47,683.186 1662.03,683.186 1662.58,683.186 1663.14,683.186 1663.7,683.186 1664.26,683.186 1664.82,683.186 1665.38,683.186 1665.94,683.186 1666.5,683.186 1667.06,683.186 1667.62,683.186 1668.18,683.186 1668.74,683.186 1669.3,683.186 1669.85,683.186 1670.41,683.186 1670.97,683.186 1671.53,683.186 1672.09,683.186 1672.65,683.186 1673.21,683.186 1673.77,683.186 1674.33,683.186 1674.89,683.186 1675.45,683.186 1676.01,683.186 1676.57,683.186 1677.13,683.186 1677.68,683.186 1678.24,683.186 1678.8,683.186 1679.36,683.186 1679.92,683.186 1680.48,683.186 1681.04,683.186 1681.6,683.186 1682.16,683.186 1682.72,683.186 1683.28,683.186 1683.84,683.186 1684.4,683.186 1684.95,683.186 1685.51,683.186 1686.07,683.186 1686.63,683.186 1687.19,683.186 1687.75,683.186 1688.31,683.186 1688.87,683.186 1689.43,683.186 1689.99,683.186 1690.55,683.186 1691.11,683.186 1691.67,683.186 1692.23,683.186 1692.78,683.186 1693.34,683.186 1693.9,683.186 1694.46,683.186 1695.02,683.186 1695.58,683.186 1696.14,683.186 1696.7,683.186 1697.26,683.186 1697.82,683.186 1698.38,683.186 1698.94,683.186 1699.5,683.186 1700.05,683.186 1700.61,683.186 1701.17,683.186 1701.73,683.186 1702.29,683.186 1702.85,683.186 1703.41,683.186 1703.97,683.186 1704.53,683.186 1705.09,683.186 1705.65,683.186 1706.21,683.186 1706.77,683.186 1707.32,683.186 1707.88,683.186 1708.44,683.186 1709,683.186 1709.56,683.186 1710.12,683.186 1710.68,683.186 1711.24,683.186 1711.8,683.186 1712.36,683.186 1712.92,683.186 1713.48,683.186 1714.04,683.186 1714.6,683.186 1715.15,683.186 1715.71,683.186 1716.27,683.186 1716.83,683.186 1717.39,683.186 1717.95,683.186 1718.51,683.186 1719.07,683.186 1719.63,683.186 1720.19,683.186 1720.75,683.186 1721.31,683.186 1721.87,683.186 1722.42,683.186 1722.98,683.186 1723.54,683.186 1724.1,683.186 1724.66,683.186 1725.22,683.186 1725.78,683.186 1726.34,683.186 1726.9,683.186 1727.46,683.186 1728.02,683.186 1728.58,683.186 1729.14,683.186 1729.69,683.186 1730.25,683.186 1730.81,683.186 1731.37,683.186 1731.93,683.186 1732.49,683.186 1733.05,683.186 1733.61,683.186 1734.17,683.186 1734.73,683.186 1735.29,683.186 1735.85,683.186 1736.41,683.186 1736.97,683.186 1737.52,683.186 1738.08,683.186 1738.64,683.186 1739.2,683.186 1739.76,683.186 1740.32,683.186 1740.88,683.186 1741.44,683.186 1742,683.186 1742.56,683.186 1743.12,683.186 1743.68,683.186 1744.24,683.186 1744.79,683.186 1745.35,683.186 1745.91,683.186 1746.47,683.186 1747.03,683.186 1747.59,683.186 1748.15,683.186 1748.71,683.186 1749.27,683.186 1749.83,683.186 1750.39,683.186 1750.95,683.186 1751.51,683.186 1752.06,683.186 1752.62,683.186 1753.18,683.186 1753.74,683.186 1754.3,683.186 1754.86,683.186 1755.42,683.186 1755.98,683.186 1756.54,683.186 1757.1,683.186 1757.66,683.186 1758.22,683.186 1758.78,683.186 1759.34,683.186 1759.89,683.186 1760.45,683.186 1761.01,683.186 1761.57,683.186 1762.13,683.186 1762.69,683.186 1763.25,683.186 1763.81,683.186 1764.37,683.186 1764.93,683.186 1765.49,683.186 1766.05,683.186 1766.61,683.186 1767.16,683.186 1767.72,683.186 1768.28,683.186 1768.84,683.186 1769.4,683.186 1769.96,683.186 1770.52,683.186 1771.08,683.186 1771.64,683.186 1772.2,683.186 1772.76,683.186 1773.32,683.186 1773.88,683.186 1774.43,683.186 1774.99,683.186 1775.55,683.186 1776.11,683.186 1776.67,683.186 1777.23,683.186 1777.79,683.186 1778.35,683.186 1778.91,683.186 1779.47,683.186 1780.03,683.186 1780.59,683.186 1781.15,683.186 1781.71,683.186 1782.26,683.186 1782.82,683.186 1783.38,683.186 1783.94,683.186 1784.5,683.186 1785.06,683.186 1785.62,683.186 1786.18,683.186 1786.74,683.186 1787.3,683.186 1787.86,683.186 1788.42,683.186 1788.98,683.186 1789.53,683.186 1790.09,683.186 1790.65,683.186 1791.21,683.186 1791.77,683.186 1792.33,683.186 1792.89,683.186 1793.45,683.186 1794.01,683.186 1794.57,683.186 1795.13,683.186 1795.69,683.186 1796.25,683.186 1796.8,683.186 1797.36,683.186 1797.92,683.186 1798.48,683.186 1799.04,683.186 1799.6,683.186 1800.16,683.186 1800.72,683.186 1801.28,683.186 1801.84,683.186 1802.4,683.186 1802.96,683.186 1803.52,683.186 1804.08,683.186 1804.63,683.186 1805.19,683.186 1805.75,683.186 1806.31,683.186 1806.87,683.186 1807.43,683.186 1807.99,683.186 1808.55,683.186 1809.11,683.186 1809.67,683.186 1810.23,683.186 1810.79,683.186 1811.35,683.186 1811.9,683.186 1812.46,683.186 1813.02,683.186 1813.58,683.186 1814.14,683.186 1814.7,683.186 1815.26,683.186 1815.82,683.186 1816.38,683.186 1816.94,683.186 1817.5,683.186 1818.06,683.186 1818.62,683.186 1819.18,683.186 1819.73,683.186 1820.29,683.186 1820.85,683.186 1821.41,683.186 1821.97,683.186 1822.53,683.186 1823.09,683.186 1823.65,683.186 1824.21,683.186 1824.77,683.186 1825.33,683.186 1825.89,683.186 1826.45,683.186 1827,683.186 1827.56,683.186 1828.12,683.186 1828.68,683.186 1829.24,683.186 1829.8,683.186 1830.36,683.186 1830.92,683.186 1831.48,683.186 1832.04,683.186 1832.6,683.186 1833.16,683.186 1833.72,683.186 1834.27,683.186 1834.83,683.186 1835.39,683.186 1835.95,683.186 1836.51,683.186 1837.07,683.186 1837.63,683.186 1838.19,683.186 \"/>\n</svg>\n","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"In this case the projected energy and the shift are close to each other and the error bars are hard to see.","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"The problem was just a toy example, as the dimension of the Hamiltonian is rather small:","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"dimension(H)","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"462","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"In this case, it's easy (and more efficient) to calculate the exact ground state energy using standard linear algebra. Read more about Rimu's capabilities for exact diagonalization in the example \"Exact diagonalization\".","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"edp = ExactDiagonalizationProblem(H)\nexact_energy = solve(edp).values[1]","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"-4.021502406906472","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"We finish by comparing our FCIQMC results with the exact computation.","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"println(\n    \"\"\"\n    Energy from $steps_measure steps with $target_walkers walkers:\n    Shift: $(se.mean) ± $(se.err)\n    Projected Energy: $(v.val) ± ($(v.val_l), $(v.val_u))\n    Exact Energy: $exact_energy\n    \"\"\"\n)\n\n","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"Energy from 2000 steps with 1000 walkers:\nShift: -4.021415839050431 ± 0.02603573588218335\nProjected Energy: -4.0130765888974835 ± (0.005977276915417384, 0.005787654850003321)\nExact Energy: -4.021502406906472\n\n","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"This page was generated using Literate.jl.","category":"page"},{"location":"statstools.html#Module-StatsTools","page":"StatsTools","title":"Module StatsTools","text":"","category":"section"},{"location":"statstools.html","page":"StatsTools","title":"StatsTools","text":"The  module StatsTools contains helper function for analysis and post processing of Monte Carlo data.","category":"page"},{"location":"statstools.html#Blocking-analysis","page":"StatsTools","title":"Blocking analysis","text":"","category":"section"},{"location":"statstools.html","page":"StatsTools","title":"StatsTools","text":"After equilibration, FCIQMC produces information about observables through correlated time series. In order to estimate the statistical errors the time series need to be decorrelated. The main workhorse for achieving this is the blocking_analysis, which is based on the paper by Flyvberg and Peterson JCP (1989), and automated with the M test of Jonsson PRE (2018).","category":"page"},{"location":"statstools.html","page":"StatsTools","title":"StatsTools","text":"Analysing the stochastic errors of observables obtained from the ratio of sample means is done with ratio_of_means, where error propagation of correlated uncertainties is done with the help of the package MonteCarloMeasurements.","category":"page"},{"location":"statstools.html","page":"StatsTools","title":"StatsTools","text":"Many convenience functions are implemented for directly analysing data obtained from solve as a DataFrame. See, e.g., shift_estimator and projected_energy. Asymptotically unbiased estimators are implemented as mixed_estimator, growth_estimator and rayleigh_replica_estimator.","category":"page"},{"location":"statstools.html#Exported","page":"StatsTools","title":"Exported","text":"","category":"section"},{"location":"statstools.html","page":"StatsTools","title":"StatsTools","text":"Modules = [StatsTools]\nPages = [\"StatsTools.jl\", \"blocking.jl\", \"ratio_of_means.jl\", \"convenience.jl\",\n  \"variances.jl\", \"growth_witness.jl\", \"reweighting.jl\", \"fidelity.jl\", \"variational_energy_estimator.jl\"\n]\nPrivate = false","category":"page"},{"location":"statstools.html#Rimu.StatsTools","page":"StatsTools","title":"Rimu.StatsTools","text":"Tools for the statistical analysis of Monte Carlo data.\n\nExports:\n\nblocking_analysis\nblocking_analysis_data\nratio_of_means\ngrowth_witness\nsmoothen\nshift_estimator\nprojected_energy\nvariational_energy_estimator\ngrowth_estimator\ngrowth_estimator_analysis\nmixed_estimator\nmixed_estimator_analysis\nrayleigh_replica_estimator\nrayleigh_replica_estimator_analysis\nval_and_errs\nval\nmean_and_se\n\n\n\n\n\n","category":"module"},{"location":"statstools.html#Rimu.StatsTools.blocking_analysis-Tuple{AbstractVector}","page":"StatsTools","title":"Rimu.StatsTools.blocking_analysis","text":"blocking_analysis(v::AbstractVector; α = 0.01, corrected = true, skip=0, warn=true)\n-> BlockingResult(mean, err, err_err, p_cov, k, blocks)\n\nCompute the sample mean mean and estimate the standard deviation of the mean (standard error) err of a correlated time series. It uses the blocking algorithm from Flyvberg and Peterson JCP (1989) and the M test of Jonsson PRE (2018) at significance level 1-α.\n\nUse skip to skip the first skip elements in v. corrected controls whether bias correction for variances is used. If decorrelating the time series fails according to the M test, NaN is returned as the standard error and -1 for k. The keyword argument warn controls whether a warning message is logged.\n\nThe summary result is returned as a BlockingResult. k - 1 is the number of blocking transformations required to pass the hypothesis test for an uncorrelated time series and err_err the estimated standard error or err.\n\nThe detailed results from each reblocking step can be obtained with blocking_analysis_data.\n\nSee BlockingResult, shift_estimator, ratio_of_means, blocking_analysis_data.\n\n\n\n\n\n","category":"method"},{"location":"statstools.html#Rimu.StatsTools.blocking_analysis_data-Tuple{AbstractVector}","page":"StatsTools","title":"Rimu.StatsTools.blocking_analysis_data","text":"blocking_analysis_data(v::AbstractVector; kwargs...) ->\n(; br::BlockingResult, df::DataFrame)\n\nPerform a blocking_analysis and return the summary result br as well as a DataFrame df with information about the standard error in each blocking step.\n\nFor a description of the keyword arguments see blocking_analysis.\n\nExample\n\njulia> data = smoothen(rand(10_000), 2^6); # generate correlated data\n\njulia> br, df = blocking_analysis_data(data)\n(br = BlockingResult{Float64}\n  mean = 0.5088 ± 0.0029\n  with uncertainty of ± 0.00023454488294744232\n  from 78 blocks after 7 transformations (k = 8).\n, df = 13×6 DataFrame\n Row │ blocks  mean      std_err      std_err_err  p_cov       mj\n     │ Int64   Float64   Float64      Float64      Float64     Float64\n─────┼──────────────────────────────────────────────────────────────────────\n   1 │  10000  0.508806  0.000375044  2.6521e-6    1.40658e-7  9715.08\n   2 │   5000  0.508806  0.000528547  5.28599e-6   2.79361e-7  4778.14\n   3 │   2500  0.508806  0.000743386  1.05152e-5   5.52622e-7  2298.64\n   4 │   1250  0.508806  0.00104064   2.08212e-5   1.08293e-6  1056.24\n   5 │    625  0.508806  0.00144177   4.08121e-5   2.07871e-6   427.949\n   6 │    312  0.508736  0.00194209   7.78707e-5   3.77171e-6   128.711\n   7 │    156  0.508736  0.00247921   0.00014081   6.14647e-6    17.3075\n   8 │     78  0.508736  0.00291063   0.000234545  8.47174e-6     0.731386\n   9 │     39  0.508736  0.00284613   0.000326474  8.10046e-6     0.901054\n  10 │     19  0.508241  0.0026998    0.000449967  7.28892e-6     2.85915\n  11 │      9  0.507939  0.00359907   0.000899766  1.29533e-5     1.08644\n  12 │      4  0.509327  0.00440559   0.00179857   1.94092e-5     0.0370381\n  13 │      2  0.509327  0.00432708   0.00305971   1.87237e-5     0.125)\n\njulia> using StatsPlots; unicodeplots();\n\njulia> plot([br.k,br.k],[0.0,maximum(df.std_err.+df.std_err_err)], label=\"m test\");\n\njulia> @df df plot!(\n           1:length(:std_err), :std_err;\n           err=:std_err_err, xlabel=\"k\", label=\"std err\",\n           title=\"std err vs blocking steps\"\n       )\n               ⠀⠀⠀⠀⠀⠀⠀⠀⠀std err vs blocking steps⠀⠀⠀⠀⠀⠀⠀⠀\n               ┌────────────────────────────────────────┐\n    0.00423501 │⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⡀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⢠⠀⠀⠀⠀│ m test\n               │⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⡇⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⢀⠀⠀⢸⠀⠀⠀⠀│ std err\n               │⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⡇⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⢸⠀⠀⢸⠀⠀⠀⠀│\n               │⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⡇⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⢸⠀⠀⢸⠀⠀⠀⠀│\n               │⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⡇⠀⠀⠀⠀⠀⠀⠀⠀⡇⠀⡠⢺⠒⠒⢺⠀⠀⠀⠀│\n               │⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⡇⠀⠀⡀⠀⠀⡆⣀⠤⡗⠉⠀⢸⠀⠀⢸⡆⠀⠀⠀│\n               │⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⢀⡧⠤⠔⡗⠊⠉⡏⠀⠀⡇⠀⠀⢸⠀⠀⢸⢣⠀⠀⠀│\n               │⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⢀⠔⠁⡇⠀⠀⠁⠀⠀⠁⠀⠀⠁⠀⠀⠀⠀⠀⢸⠸⡀⠀⠀│\n               │⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⢀⠴⠁⠀⠀⡇⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠸⠀⡇⠀⠀│\n               │⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⢀⠔⠁⠀⠀⠀⠀⡇⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⢸⠀⠀│\n               │⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⢀⠔⠊⠀⠀⠀⠀⠀⠀⡇⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠈⣦⠀│\n               │⠀⠀⠀⠀⠀⠀⠀⠀⡠⠔⠒⠁⠀⠀⠀⠀⠀⠀⠀⠀⡇⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⢹⠀│\n               │⠀⠀⠀⢀⣀⠤⠒⠉⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⡇⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⢸⠀│\n               │⠀⠒⠉⠁⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⡇⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⢸⠀│\n   -0.00012335 │⠤⠤⠤⠤⠤⠤⠤⠤⠤⠤⠤⠤⠤⠤⠤⠤⠤⠤⠤⠤⠧⠤⠤⠤⠤⠤⠤⠤⠤⠤⠤⠤⠤⠤⠤⠤⠤⠤⠤⠤│\n               └────────────────────────────────────────┘\n               ⠀0.64⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀k⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀13.36⠀\n\nA vertical line at k==8 indicates the blocking step identified by hypothesis testing to decorrelate the time series data. The decorrelation length can thus be estimated at 2^k-1 = 2^7 = 128. Note that the data was correlated with a sliding window of 2^6 steps.\n\nSee blocking_analysis, BlockingResult.\n\n\n\n\n\n","category":"method"},{"location":"statstools.html#Rimu.StatsTools.mean_and_se-Tuple{Rimu.StatsTools.BlockingResult}","page":"StatsTools","title":"Rimu.StatsTools.mean_and_se","text":"mean_and_se(v::AbstractVector; α = 0.01, corrected::Bool=true, skip=0) -> mean, err\nmean_and_se(r::BlockingResult) -> mean, err\n\nReturn the mean and standard error (as a tuple) of a time series obtained from blocking_analysis. See also BlockingResult.\n\n\n\n\n\n","category":"method"},{"location":"statstools.html#Statistics.cov-Tuple{Rimu.StatsTools.BlockingResult{<:Complex}}","page":"StatsTools","title":"Statistics.cov","text":"cov(r::BlockingResult{<:Complex})\n\nReturn the covariance matrix of the multivariate normal distribution approximating the uncertainty of the blocking result r of a complex time series. See (https://en.wikipedia.org/wiki/Complexnormaldistribution).\n\n\n\n\n\n","category":"method"},{"location":"statstools.html#Rimu.StatsTools.ratio_of_means-Tuple{Any, Any}","page":"StatsTools","title":"Rimu.StatsTools.ratio_of_means","text":"ratio_of_means(num, denom; α=0.01, corrected=true, mc_samples=nothing, skip=0, warn=true)\n-> r::RatioBlockingResult\n\nEstimate the ratio of mean(num)/mean(denom) assuming that num and denom are possibly correlated time series, skipping the first skip elements. A blocking analysis with m-test is used to uncorrelate the time series, see blocking_analysis. The remaining standard error and correlation of the means is propagated using MonteCarloMeasurements. The results are reported as a RatioBlockingResult.\n\nRobust estimates for the ratio are obtained from pmedian(r) and confidence intervals from pquantile(), e.g. pquantile(r, [0.025, 0.975]) for the 95% confidence interval.\n\nEstimates from linear uncertainty propagation are returned as r.f and r.σ_f using x_by_y_linear. The standard error estimate r.σ_f should only be trusted when the coefficient of variation std(denom)/mean(denom) is small: abs(r.δ_y) < 0.1. Under this condition can the ratio be approximated as a normal distribution. See wikipedia and Díaz-Francés, Rubio (2013)\n\nThe keyword mc_samples controls the number of samples used for error propagation by MonteCarloMeasurements. Use nothing for the default and Val(1000) to set the number to 1000 samples in a type-consistent way.\n\nThe keyword warn controls whether warning messages are logged when blocking fails or noisy denominators are encountered.\n\nNote: to compute statistics on the RatioBlockingResult, use functions pmedian, pquantile, pmiddle, piterate, pextrema, pminimum, pmaximum, pmean, and pcov.\n\n\n\n\n\n","category":"method"},{"location":"statstools.html#Rimu.StatsTools.errs-Tuple","page":"StatsTools","title":"Rimu.StatsTools.errs","text":"errs(x; n=1, p=nothing, name=:err) -> (; err_l, err_u)\n\nReturn the lower and upper error bar for the uncertain value x.\n\nSee val_and_errs.\n\n\n\n\n\n","category":"method"},{"location":"statstools.html#Rimu.StatsTools.to_measurement-Tuple{MonteCarloMeasurements.Particles}","page":"StatsTools","title":"Rimu.StatsTools.to_measurement","text":"to_measurement(p::MonteCarloMeasurements.Particles) -> ::Measurements.measurement\n\nConvert an uncertain number from MonteCarloMeasurements  to Measurements format  using the median as the central point. The new ± boundaries will include  the 68% quantile around the median.\n\n\n\n\n\n","category":"method"},{"location":"statstools.html#Rimu.StatsTools.val-Tuple{Any}","page":"StatsTools","title":"Rimu.StatsTools.val","text":"val(x)\n\nReturn the best estimate value for an uncertain x. Defaults to the median for uncertain x represented by a (sampled) distribution. Supports  MonteCarloMeasurements and Measurements.\n\nSee errs, BlockingResult, RatioBlockingResult.\n\n\n\n\n\n","category":"method"},{"location":"statstools.html#Rimu.StatsTools.val_and_errs-Tuple{Any}","page":"StatsTools","title":"Rimu.StatsTools.val_and_errs","text":"val_and_errs(x; n=1, p=nothing, name=:val) -> (;val, val_l, val_u)\n\nReturn the median and the lower and upper error bar for the uncertain value x as a NamedTuple. This is useful for plotting scripts. The interval [val - val_l, val + val_u] represents the confidence interval at level n*σ, or at probability p. Setting p overrides n. Supports  MonteCarloMeasurements and Measurements. The  names in the NamedTuple can be changed with name.\n\nExample:\n\njulia> results = [blocking_analysis(i:0.1:2i+20) for i in 1:3]; # mock results\n\njulia> v = val_and_errs.(results, name=\"res\"); # Vector of NamedTuple's with standard errors\n\njulia> DataFrame(v)\n3×3 DataFrame\n Row │ res      res_l    res_u\n     │ Float64  Float64  Float64\n─────┼───────────────────────────\n   1 │    11.5  1.7282   1.7282\n   2 │    13.0  1.7282   1.7282\n   3 │    14.5  1.78885  1.78885\n\nSee NamedTuple, val, errs, BlockingResult, RatioBlockingResult.\n\n\n\n\n\n","category":"method"},{"location":"statstools.html#Rimu.StatsTools.growth_witness","page":"StatsTools","title":"Rimu.StatsTools.growth_witness","text":"growth_witness(df::DataFrame, [b];\n    shift=:shift,\n    norm=:norm,\n    time_step=determine_constant_time_step(df),\n    skip=0\n)\ngrowth_witness(sim::PMCSimulation, [b]; kwargs...)\n\nCalculate the growth witness directly from the result (DataFrame or PMCSimulation) of solveing a ProjectorMonteCarloProblem. The keyword arguments shift and norm can be used to change the names of the relevant columns.\n\n\n\n\n\n","category":"function"},{"location":"statstools.html#Rimu.StatsTools.growth_witness-Tuple{AbstractArray, AbstractArray, Any}","page":"StatsTools","title":"Rimu.StatsTools.growth_witness","text":"growth_witness(shift::AbstractArray, norm::AbstractArray, dt, [b]; skip=0)\n\nCompute the growth witness\n\nG^(n) = S^(n) - fracvertmathbfc^(n+1)vert -\n          vertmathbfc^(n)vertvertmathbfc^(n)vert dtau\n\nwhere S is the shift and vertmathbfc^(n)vert == norm[n, 1]. Setting b ≥ 1 a sliding average over b time steps is computed using smoothen(). The first skip time steps are skipped. mean(growth_witness) is approximately the same as growth_estimator with h=0.\n\nSee also growth_estimator.\n\n\n\n\n\n","category":"method"},{"location":"statstools.html#Rimu.StatsTools.smoothen-Tuple{AbstractVector, Integer}","page":"StatsTools","title":"Rimu.StatsTools.smoothen","text":"smoothen(noisy::AbstractVector, b)\n\nSmoothen the array noisy by averaging over a sliding window of length b and wrapping noisy periodically. The mean(noisy) is preserved.\n\n\n\n\n\n","category":"method"},{"location":"statstools.html#Rimu.StatsTools.growth_estimator-NTuple{4, Any}","page":"StatsTools","title":"Rimu.StatsTools.growth_estimator","text":"growth_estimator(\n    shift, wn, h, time_step;\n    skip = 0,\n    E_r = mean(shift[skip+1:end]),\n    weights = w_exp,\n    change_type = identity,\n    kwargs...\n)\ngrowth_estimator(\n    df::DataFrame, h;\n    shift_name=:shift,\n    norm_name=:norm,\n    time_step=determine_constant_time_step(df),\n    kwargs...\n)\ngrowth_estimator(sim::PMCSimulation; kwargs...)\n-> r::RatioBlockingResult\n\nCompute the growth estimator with reference energy E_r by the reweighting technique described in Umrigar et al. (1993), see Eq. (20). shift and wn are equal length vectors containing the shift and walker number time series, respectively.  Reweighting is done over h time steps and length(shift) - skip time steps are used for the blocking analysis done with ratio_of_means. weights is a function that calulates the weights. See w_exp and w_lin.\n\nE_gr = E_r - frac1dτln\n    fracsum_n w_h+1^(n+1) N_mathrmw^(n+1)\n        sum_m w_h^(m) N_mathrmw^(m) \n\nwhere dτ is the time_step\n\nWhen h is greater than the autocorrelation time scale of the shift, then E_gr (returned as r.ratio) is an unbiased but approximate estimator for the ground state energy E_0 with an error mathcalO(dτ^2) and potentially increased confidence intervals compared to the (biased) shift estimator.  Error propagation is done with MonteCarloMeasurements. Propagation through the logarithm can be modified by setting change_type to to_measurement in order to avoid NaN results from negative outliers.\n\nIf success==true the blocking analysis was successful in k-1 steps, using blocks uncorrelated data points.\n\nThe second method calculates the growth estimator directly from a PMCSimulation or DataFrame returned by solve. The keyword arguments shift_name and norm_name can be used to change the names of the relevant columns.\n\nSee also mixed_estimator and RatioBlockingResult.\n\n\n\n\n\n","category":"method"},{"location":"statstools.html#Rimu.StatsTools.growth_estimator_analysis-Tuple{Any}","page":"StatsTools","title":"Rimu.StatsTools.growth_estimator_analysis","text":"growth_estimator_analysis(df::DataFrame; kwargs...)\ngrowth_estimator_analysis(sim::PMCSimulation; kwargs...)\n-> (; df_ge, correlation_estimate, se, se_l, se_u)\n\nCompute the growth_estimator on a DataFrame df or PMCSimulation sim. repeatedly over a range of reweighting depths.\n\nReturns a NamedTuple with the fields\n\ndf_ge: DataFrame with reweighting depth and growth_estiamator data. See example below.\ncorrelation_estimate: estimated correlation time from blocking analysis\nse, se_l, se_u: shift_estimator and error\n\nKeyword arguments\n\nh_range: The default is about h_values values from 0 to twice the estimated correlation time\nh_values = 100: minimum number of reweighting depths\nskip = 0: initial time steps to exclude from averaging\nthreading = Threads.nthreads() > 1: if false a progress meter is displayed\nshift_name = :shift name of column in df with shift data\nnorm_name = :norm name of column in df with walkernumber data\nwarn = true whether to log warning messages when blocking fails or denominators are small\n\nExample\n\nsim = solve(...)\ndf_ge, correlation_estimate, se, se_l, se_u = growth_estimator_analysis(sim; skip=5_000)\n\nusing StatsPlots\n@df df_ge plot(_ -> se, :h, ribbon = (se_l, se_u), label = \"⟨S⟩\") # constant line and ribbon for shift estimator\n@df df_ge plot!(:h, :val, ribbon = (:val_l, :val_u), label=\"E_gr\") # growth estimator as a function of reweighting depth\nxlabel!(\"h\")\n\nSee also: growth_estimator, mixed_estimator_analysis.\n\n\n\n\n\n","category":"method"},{"location":"statstools.html#Rimu.StatsTools.mixed_estimator-Tuple{AbstractVector, AbstractVector, AbstractVector, Any, Any}","page":"StatsTools","title":"Rimu.StatsTools.mixed_estimator","text":"mixed_estimator(\n    hproj, vproj, shift, h, time_step;\n    skip = 0,\n    E_r = mean(shift[skip+1:end]),\n    weights = w_exp,\n    kwargs...\n)\nmixed_estimator(\n    df::DataFrame, h;\n    hproj_name=:hproj,\n    vproj_name=:vproj,\n    shift_name=:shift,\n    time_step=determine_constant_time_step(df),\n    kwargs...\n)\nmixed_estimator(sim::PMCSimulation, h; kwargs...)\n-> r::RatioBlockingResult\n\nCompute the mixed estimator by the reweighting technique described in Umrigar et al. (1993), Eq. (19)\n\nE_mathrmmix = fracsum_n w_h^(n)  (Hmathbfv)mathbfc^(n)\n        sum_m w_h^(m)  mathbfvmathbfc^(m) \n\nwhere the time series hproj == (Hmathbfv)mathbfc^(n) and vproj == mathbfvmathbfc^(m) have the same length as shift (See ProjectedEnergy on how to set these up).  Reweighting is done over h time steps and length(shift) - skip time steps are used for the blocking analysis done with ratio_of_means. weights is a function that calulates the weights. See w_exp and w_lin.  Additional keyword arguments are passed on to ratio_of_means.\n\nWhen h is greater than the autocorrelation time scale of the shift, then r.ratio is an unbiased but approximate estimator for the ground state energy E_0 with an error mathcalO(dτ^2), where dτ is the time_step, and potentially increased confidence intervals compared to the unweighted ratio.  Error propagation is done with MonteCarloMeasurements. Results are returned as RatioBlockingResult.\n\nThe second method calculates the mixed energy estimator directly from a DataFrame or PMCSimulation returned by solve. The keyword arguments hproj_name, vproj_name, and shift_name can be used to change the names of the relevant columns.\n\nSee also growth_estimator.\n\n\n\n\n\n","category":"method"},{"location":"statstools.html#Rimu.StatsTools.mixed_estimator_analysis-Tuple{DataFrame}","page":"StatsTools","title":"Rimu.StatsTools.mixed_estimator_analysis","text":"mixed_estimator_analysis(df::DataFrame; kwargs...)\nmixed_estimator_analysis(sim::PMCSimulation; kwargs...)\n-> (; df_me, correlation_estimate, se, se_l, se_u)\n\nCompute the mixed_estimator on a DataFrame df or PMCSimulation sim returned from solve repeatedly over a range of reweighting depths.\n\nReturns a NamedTuple with the fields\n\ndf_me: DataFrame with reweighting depth and mixed_estiamator data. See example below.\ncorrelation_estimate: estimated correlation time from blocking analysis\nse, se_l, se_u: shift_estimator and error\n\nKeyword arguments\n\nh_range: The default is about h_values values from 0 to twice the estimated correlation time\nh_values = 100: minimum number of reweighting depths\nskip = 0: initial time steps to exclude from averaging\nthreading = Threads.nthreads() > 1: if false a progress meter is displayed\nshift_name = :shift name of column in df with shift data\nhproj_name = :hproj name of column in df with operator overlap data\nvproj_name = :vproj name of column in df with projector overlap data\nwarn = true whether to log warning messages when blocking fails or denominators are small\n\nExample\n\nsim = solve(...)\ndf_me, correlation_estimate, se, se_l, se_u = mixed_estimator_analysis(sim; skip=5_000)\n\nusing StatsPlots\n@df df_me plot(_ -> se, :h, ribbon = (se_l, se_u), label = \"⟨S⟩\") # constant line and ribbon for shift estimator\n@df df_me plot!(:h, :val, ribbon = (:val_l, :val_u), label=\"E_mix\") # mixed estimator as a function of reweighting depth\nxlabel!(\"h\")\n\nSee also: mixed_estimator, growth_estimator_analysis.\n\n\n\n\n\n","category":"method"},{"location":"statstools.html#Rimu.StatsTools.projected_energy-Tuple{Any}","page":"StatsTools","title":"Rimu.StatsTools.projected_energy","text":"projected_energy(df::DataFrame; skip=0, hproj=:hproj, vproj=:vproj, kwargs...)\nprojected_energy(sim::PMCSimulation; kwargs...)\n-> r::RatioBlockingResult\n\nCompute the projected energy estimator\n\nE_mathrmp = fracsum_n  mathbfvHmathbfc^(n)\n        sum_m mathbfvmathbfc^(m) \n\nwhere the time series df.hproj == mathbfvHmathbfc^(n) and df.vproj == mathbfvmathbfc^(m) are taken from df, skipping the first skip entries (use post_step_strategy =ProjectedEnergy(...) to set these up in ProjectorMonteCarloProblem). projected_energy is equivalent to mixed_estimator with h=0.\n\nThe keyword arguments hproj and vproj can be used to change the names of the relevant columns. Other kwargs are passed on to ratio_of_means. Returns a RatioBlockingResult.\n\nSee NamedTuple, val_and_errs, val, errs for processing results.\n\n\n\n\n\n","category":"method"},{"location":"statstools.html#Rimu.StatsTools.rayleigh_replica_estimator-Tuple{Vector, Vector, Vector, Any, Any}","page":"StatsTools","title":"Rimu.StatsTools.rayleigh_replica_estimator","text":"rayleigh_replica_estimator(\n    op_ol, vec_ol, shift, h, time_step;\n    skip = 0,\n    E_r = mean(shift[skip+1:end]),\n    weights = w_exp,\n    kwargs...\n)\nrayleigh_replica_estimator(\n    df::DataFrame;\n    shift_name=\"shift\",\n    op_name=\"Op1\",\n    vec_name=\"dot\",\n    h=0,\n    skip=0,\n    Anorm=1,\n    kwargs...\n)\nrayleigh_replica_estimator(sim::PMCSimulation; kwargs...)\n-> r::RatioBlockingResult\n\nCompute the estimator of a Rayleigh quotient of operator hatA with reweighting,\n\nA_mathrmest(h) = fracsum_ab sum_n w_ha^(n) w_hb^(n)\n    mathbfc_a^(n) cdot hatA cdot mathbfc_b^(n)\n    sum_ab sum_n w_ha^(n) w_hb^(n) mathbfc_a^(n) cdot mathbfc_b^(n)\n\nusing data from multiple replicas.\n\nArgument op_ol holds data for the operator overlap mathbfc_a^(n) hatA mathbfc_b^(n) and vec_ol holds data for the vector overlap mathbfc_a^(n) mathbfc_b^(n). They are of type Vector{Vector}, with each element Vector holding the data for a pair of replicas. Argument shift is of type Vector{Vector}, with each element Vector holding the shift data for each individual replica.\n\nThe second method computes the Rayleigh quotient directly from a DataFrame or PMCSimulation returned by solve. The keyword arguments shift_name, op_name and vec_name can be used to change the names of the relevant columns, see AllOverlaps for default formatting. The operator overlap data can be scaled by a prefactor Anorm. A specific reweighting depth can be set with keyword argument h. The default is h = 0 which calculates the Rayleigh quotient without reweighting.\n\nThe reweighting is an extension of the mixed estimator using the reweighting technique described in Umrigar et al. (1993). Reweighting is done over h time steps and length(shift) - skip time steps are used for the blocking analysis done with ratio_of_means. weights is a function that calulates the weights. See w_exp and w_lin. Additional keyword arguments are passed on to ratio_of_means.\n\nError propagation is done with MonteCarloMeasurements. Results are returned as RatioBlockingResult.\n\nSee also mixed_estimator, growth_estimator.\n\n\n\n\n\n","category":"method"},{"location":"statstools.html#Rimu.StatsTools.rayleigh_replica_estimator_analysis-Tuple{Any}","page":"StatsTools","title":"Rimu.StatsTools.rayleigh_replica_estimator_analysis","text":"rayleigh_replica_estimator_analysis(df::DataFrame; kwargs...)\nrayleigh_replica_estimator_analysis(sim::PMCSimulation; kwargs...)\n-> (; df_rre, df_se)\n\nCompute the rayleigh_replica_estimator on a DataFrame df or PMCSimulation sim returned from solve repeatedly over a range of reweighting depths.\n\nReturns a NamedTuple with the fields\n\ndf_rre: DataFrame with reweighting depth and rayleigh_replica_estimator data. See example below.\ndf_se: DataFrame with shift_estimator output, one row per replica\n\nKeyword arguments\n\nh_range: The default is about h_values values from 0 to twice the estimated correlation time\nh_values = 100: minimum number of reweighting depths\nskip = 0: initial time steps to exclude from averaging\nthreading = Threads.nthreads() > 1: if false a progress meter is displayed\nshift_name = \"shift\": shift data corresponding to column in df with names <shift>_1, ...\nop_name = \"Op1\": name of operator overlap corresponding to column in df with names c1_<op_ol>_c2, ...\nvec_name = \"dot\": name of vector-vector overlap corresponding to column in df with names c1_<vec_ol>_c2, ...\nAnorm = 1: a scalar prefactor to scale the operator overlap data\nwarn = true: whether to log warning messages when blocking fails or denominators are small\n\nExample\n\nsim = solve(...)\ndf_rre, df_se = rayleigh_replica_estimator_analysis(sim; skip=5_000)\n\nusing StatsPlots\n@df df_rre plot(_ -> se, :h, ribbon = (se_l, se_u), label = \"⟨S⟩\") # constant line and ribbon for shift estimator\n@df df_rre plot!(:h, :val, ribbon = (:val_l, :val_u), label=\"E_mix\") # Rayleigh quotient estimator as a function of reweighting depth\nxlabel!(\"h\")\n\nSee also: rayleigh_replica_estimator, mixed_estimator_analysis, AllOverlaps.\n\n\n\n\n\n","category":"method"},{"location":"statstools.html#Rimu.StatsTools.shift_estimator-Tuple{Any}","page":"StatsTools","title":"Rimu.StatsTools.shift_estimator","text":"shift_estimator(df::DataFrame; shift=:shift, kwargs...)\nshift_estimator(sim::PMCSimulation; kwargs...)\n-> r::BlockingResult\n\nReturn the shift estimator from the data in df.shift. The keyword argument shift can be used to change the name of the relevant column. Other keyword arguments are passed on to blocking_analysis. Returns a BlockingResult.\n\nSee also growth_estimator, projected_energy.\n\n\n\n\n\n","category":"method"},{"location":"statstools.html#Rimu.StatsTools.w_exp-Tuple{Union{SubArray{<:Any, 1, <:Vector, <:Any, true}, Vector}, Any, Any}","page":"StatsTools","title":"Rimu.StatsTools.w_exp","text":"w_exp(shift, h, time_step; E_r = mean(shift), skip = 0)\n\nCompute the weights for reweighting over h time steps with reference energy E_r from the exponential formula\n\nw_h^(n) = prod_j=1^h exp-dτ(S^(q+n-j)-E_r) \n\nwhere q = skip and dτ is the time_step.\n\nSee also w_lin, growth_estimator, mixed_estimator.\n\n\n\n\n\n","category":"method"},{"location":"statstools.html#Rimu.StatsTools.w_lin-Tuple{Union{SubArray{<:Any, 1, <:Vector, <:Any, true}, Vector}, Any, Any}","page":"StatsTools","title":"Rimu.StatsTools.w_lin","text":"w_lin(shift, h, time_step; E_r = mean(shift), skip = 0)\n\nCompute the weights for reweighting over h time steps with reference energy E_r from the linearised formula\n\nw_h^(n) = prod_j=1^h 1-dτ(S^(q+n-j)-E_r) \n\nwhere q = skip and dτ is the time_step.\n\nSee also w_exp, growth_estimator, mixed_estimator.\n\n\n\n\n\n","category":"method"},{"location":"statstools.html#Rimu.StatsTools.replica_fidelity-Tuple{Any}","page":"StatsTools","title":"Rimu.StatsTools.replica_fidelity","text":"replica_fidelity(df::DataFrame; p_field = :hproj, skip = 0)\nreplica_fidelity(sim::PMCSimulation; kwargs...)\n\nCompute the fidelity of the average coefficient vector and the projector defined in p_field from the PMCSimulation or DataFrame returned by solve, using replicas _1 and _2. Calls ratio_of_means to perform a blocking analysis on a ratio of the means of separate time series and returns a RatioBlockingResult. The first skip steps in the time series are skipped.\n\nThe fidelity of states |ψ⟩ and |ϕ⟩ is defined as\n\nF(ψϕ) = fracψϕ^2ψψϕϕ \n\nSpecifically, replica_fidelity computes\n\nF(mathbfvmathbfc) =\n    frac(mathbfc_1mathbfv)(mathbfvmathbfc_1)\n    mathbfc_1mathbfc_1 \n\nwhere v is the projector specified by p_field, which is assumed to be normalised to unity with the two-norm (i.e. v⋅v == 1), and mathbfc_1 and mathbfc_2 are two replica coefficient vectors.\n\n\n\n\n\n","category":"method"},{"location":"statstools.html#Rimu.StatsTools.variational_energy_estimator-Tuple{Any, Any}","page":"StatsTools","title":"Rimu.StatsTools.variational_energy_estimator","text":"variational_energy_estimator(shifts, overlaps; kwargs...)\nvariational_energy_estimator(df::DataFrame; max_replicas=:all, kwargs...)\nvariational_energy_estimator(sim::PMCSimulation; kwargs...)\n-> r::RatioBlockingResult\n\nCompute the variational energy estimator from the replica time series of the shifts and coefficient vector overlaps by blocking analysis. The keyword argument max_replicas can be used to constrain the number of replicas processed to be smaller than all available in df. Other keyword arguments are passed on to ratio_of_means(). Returns a RatioBlockingResult.\n\nAn estimator for the variational energy\n\nfracmathbfc^ mathbfHmathbfcmathbfc^mathbfc\n\nis calculated from\n\nE_v  =  fracsum_ab^R overline(S_a+S_b) mathbfc_a^ mathbfc_b\n               2sum_ab^R overlinemathbfc_a^ mathbfc_b \n\nwhere the sum goes over distinct pairs out of the R replicas. See arXiv:2103.07800.\n\nThe DataFrame and PMCSimulation versions can extract the relevant information from the result of solve. Set up the ProjectorMonteCarloProblem with the keyword argument replica_strategy = AllOverlaps(R) and R ≥ 2. If passing shifts and overlaps, the data has to be arranged in the correct order (as provided in the DataFrame version).\n\nSee AllOverlaps.\n\n\n\n\n\n","category":"method"},{"location":"statstools.html#Additional-docstrings","page":"StatsTools","title":"Additional docstrings","text":"","category":"section"},{"location":"statstools.html","page":"StatsTools","title":"StatsTools","text":"Modules = [StatsTools]\nPages = [\"StatsTools.jl\", \"blocking.jl\", \"ratio_of_means.jl\", \"convenience.jl\",\n  \"variances.jl\", \"growth_witness.jl\", \"reweighting.jl\"\n]\nPublic = false","category":"page"},{"location":"statstools.html#MonteCarloMeasurements.Particles-Tuple{Rimu.StatsTools.BlockingResult{<:Real}}","page":"StatsTools","title":"MonteCarloMeasurements.Particles","text":"MonteCarloMeasurements.Particles(r::BlockingResult; mc_samples = 2000)\nMonteCarloMeasurements.±(r::BlockingResult)\n\nConvert a BlockingResult into a Particles object for nonlinear error propagation with MonteCarloMeasurements.\n\n\n\n\n\n","category":"method"},{"location":"statstools.html#Rimu.StatsTools.BlockingResult","page":"StatsTools","title":"Rimu.StatsTools.BlockingResult","text":"BlockingResult(mean, err, err_err, p_cov, k, blocks)\n\nResult of blocking_analysis.\n\nFields:\n\nmean: sample mean\nerr: standard error (estimated standard deviation of the mean)\nerr_err: estimated uncertainty of err\np_cov: estimated pseudo covariance of mean, relevant for complex time series\nk::Int: k-1 blocking steps were used to uncorrelate time series\nblocks::Int: number of uncorrelated values after blocking\n\nHas methods for NamedTuple, val_and_errs, val, errs, mean_and_se, Measurements.:±, MonteCarloMeasurements.Particles, and Statistics.cov for Complex data.\n\nExample:\n\njulia> blocking_analysis(smoothen(randn(2^10), 2^5))\nBlockingResult{Float64}\n  mean = -0.026 ± 0.029\n  with uncertainty of ± 0.003638545517264226\n  from 32 blocks after 5 transformations (k = 6).\n\n\n\n\n\n","category":"type"},{"location":"statstools.html#Measurements.measurement-Tuple{Rimu.StatsTools.BlockingResult{<:Real}}","page":"StatsTools","title":"Measurements.measurement","text":"measurement(r::BlockingResult)\nMeasurements.±(r::BlockingResult)\n\nConvert a BlockingResult into a Measurement for linear error propagation with Measurements.\n\nLimitation: Does not account for covariance in complex BlockingResult. Consider using MonteCarloMeasurements.Particles(r)!\n\n\n\n\n\n","category":"method"},{"location":"statstools.html#Rimu.StatsTools.blocker-Union{Tuple{AbstractVector{T}}, Tuple{T}} where T","page":"StatsTools","title":"Rimu.StatsTools.blocker","text":"blocker(v::Vector) -> new_v::Vector\n\nReblock the data by successively taking the mean of two adjacent data points to form a new vector with a half of the length(v). The last data point will be discarded if length(v) is odd.\n\n\n\n\n\n","category":"method"},{"location":"statstools.html#Rimu.StatsTools.blocks_with_m-Tuple{Any}","page":"StatsTools","title":"Rimu.StatsTools.blocks_with_m","text":"blocks_with_m(v; corrected = true) -> (;blocks, mean, std_err, std_err_err, p_cov, mj)\n\nPerform the blocking algorithm from Flyvberg and Peterson JCP (1989). Returns named tuple with the results from all blocking steps. See mtest().\n\n\n\n\n\n","category":"method"},{"location":"statstools.html#Rimu.StatsTools.mtest-Tuple{AbstractVector}","page":"StatsTools","title":"Rimu.StatsTools.mtest","text":"mtest(mj::AbstractVector; α = 0.01) -> k\nmtest(table::NamedTuple; α = 0.01) -> k\n\nHypothesis test for decorrelation of a time series after blocking transformations with significance level 1-α after Jonson PRE (2018). mj or table.mj is expected to be a vector with relevant M_j values from a blocking analysis as obtained from blocks_with_m(). Returns the row number k where the M-test is passed. If the M-test has failed mtest() returns the value -1.\n\n\n\n\n\n","category":"method"},{"location":"statstools.html#Rimu.StatsTools.RatioBlockingResult","page":"StatsTools","title":"Rimu.StatsTools.RatioBlockingResult","text":"RatioBlockingResult(ratio, f, σ_f, δ_y, k, success)\n\nResult of ratio_of_means().\n\nFields:\n\nratio::P: ratio with uncertainties propagated by MonteCarloMeasurements\nf::T: ratio of means\nσ_f::T: std from linear propagation\nδ_y::T: coefficient of variation for denominator (≤ 0.1 for normal approx)\nk::Int: k-1 blocking steps were used to uncorrelate time series\nblocks::Int: number of data values after blocking\nsuccess::Bool: false if any of the blocking steps failed\n\nHas methods for NamedTuple, val_and_errs, val, errs.\n\nNote: to compute statistics on the RatioBlockingResult, use functions pmedian, pquantile, pmiddle, piterate, pextrema, pminimum, pmaximum, pmean, and pcov.\n\n\n\n\n\n","category":"type"},{"location":"statstools.html#Rimu.StatsTools.particles-Tuple{Any, Any, Any}","page":"StatsTools","title":"Rimu.StatsTools.particles","text":"particles(samples, μ, σ)\nparticles(samples, μ::AbstractVector, Σ::AbstractMatrix)\n\nReturn Particles object from MonteCarloMeasurements with single- or multivariate normal distribution. Zero variance parameters are supported.\n\n\n\n\n\n","category":"method"},{"location":"statstools.html#Rimu.StatsTools.particles-Tuple{Any, Distributions.Distribution}","page":"StatsTools","title":"Rimu.StatsTools.particles","text":"particles(samples, d)\nparticles(::Nothing, d)\nparticles(::Val{T}, d) where T\n\nReturn Particles object from  MonteCarloMeasurements using  a type-stable constructor if possible. Pass nothing for the default number of particles or Val(1_000) for using 1000 particles in a type-stable manner. If d is a Particles object it is passed through without re-sampling.\n\n\n\n\n\n","category":"method"},{"location":"statstools.html#Rimu.StatsTools.ratio_estimators-Tuple{AbstractVector{<:Real}, AbstractVector{<:Real}}","page":"StatsTools","title":"Rimu.StatsTools.ratio_estimators","text":"ratio_estimators(x, y, [k]; corrected=true, mc_samples=10_000) -> (; r, f, σ_f, δ_y, n)\n\nEstimators for the ratio of means mean(x)/mean(y). If k is given, k-1 blocking steps are performed to remove internal correlations in the time series x and y. Otherwise these are assumed to be free of internal correlations. Correlations between x and y may be present and are taken into account.\n\nReturn values:\n\nr::Particles is the Monte Carlo sampled ratio estimator, see Particles\nf = mean(x)/mean(y)\nσ_f standard deviation of f from linear error propagation (normal approximation)\nδ_y = std(y)/mean(y) coefficient of variation; < 0.1 for normal approximation to work\nn: number of uncorrelated data used for uncertainty estimation\n\n\n\n\n\n","category":"method"},{"location":"statstools.html#Rimu.StatsTools.x_by_y_linear-NTuple{5, Any}","page":"StatsTools","title":"Rimu.StatsTools.x_by_y_linear","text":"x_by_y_linear(μ_x,μ_y,σ_x,σ_y,ρ) -> f, σ_f\n\nLinear error propagation for ratio f = x/y assuming x and y are correlated normal random variables and assuming the ratio can be approximated as a normal distribution. See wikipedia and Díaz-Francés, Rubio (2013).\n\nσ_f = sqrtfracσ_xμ_y^2 + fracμ_x σ_yμ_y^2^2 - frac2 ρ μ_xμ_y^3\n\n\n\n\n\n","category":"method"},{"location":"statstools.html#Core.NamedTuple-Tuple{Rimu.StatsTools.BlockingResult}","page":"StatsTools","title":"Core.NamedTuple","text":"NamedTuple(x::BlockingResult; n=1, p=nothing, name=:val)\nNamedTuple(x::RatioBlockingResult; n=1, p=nothing, name=:val)\n\nReturn a named tuple with value and error bars (see val_and_errs) as well as additional numerical fields relevant for x.\n\nExample:\n\njulia> results = [blocking_analysis(i:0.1:2i+20) for i in 1:3]; # mock results\n\njulia> df = NamedTuple.(results, name=:res)|>DataFrame\n3×7 DataFrame\n Row │ res      res_l    res_u    res_err_err  res_p_cov  res_k  res_blocks\n     │ Float64  Float64  Float64  Float64      Float64    Int64  Int64\n─────┼──────────────────────────────────────────────────────────────────────\n   1 │    11.5  1.7282   1.7282      0.352767    2.98667      5          13\n   2 │    13.0  1.7282   1.7282      0.352767    2.98667      5          13\n   3 │    14.5  1.78885  1.78885     0.350823    3.2          5          14\n\njulia> rbs = ratio_of_means(1 .+sin.(1:0.1:11),2 .+sin.(2:0.1:12)); # more mock results\n\njulia> [NamedTuple(rbs),]|>DataFrame\n1×9 DataFrame\n Row │ val       val_l      val_u      val_f     val_σ_f    val_δ_y    val_k  val_blocks  val_success\n     │ Float64   Float64    Float64    Float64   Float64    Float64    Int64  Int64       Bool\n─────┼────────────────────────────────────────────────────────────────────────────────────────────────\n   1 │ 0.581549  0.0925669  0.0812292  0.560532  0.0875548  0.0875548      4          12         true\n\n\nSee val_and_errs, val, errs, BlockingResult, RatioBlockingResult.\n\n\n\n\n\n","category":"method"},{"location":"statstools.html#Rimu.StatsTools.autocovariance-Tuple{AbstractVector, Int64}","page":"StatsTools","title":"Rimu.StatsTools.autocovariance","text":"autocovariance(v::Vector,h::Int; corrected::Bool=true)\n\nhatgamma(h) =frac1nsum_t=1^n-h(v_t+h-barv)(v_t-barv)^* Calculate the autocovariance of dataset v with a delay h. If corrected is true (the default) then the sum is scaled with n-h, whereas the sum is scaled with n if corrected is false where n = length(v).\n\n\n\n\n\n","category":"method"},{"location":"statstools.html#Rimu.StatsTools.pseudo_cov-Tuple{Any, Any}","page":"StatsTools","title":"Rimu.StatsTools.pseudo_cov","text":"pseudo_cov(x, y; xmean = mean(x), ymean = mean(y), corrected = true)\n\nCompute the pseudo covariance between collections x and y returning a scalar:\n\nfrac1nsum_i=1^n (x_i - barx)(y_i - bary)\n\nOptionally, precomputed means can be passed as keyword arguments. pseudo_cov(x,y) is functionally equivalent to Statistics.cov(x, conj(y); corrected = false) but it is found to be significantly faster and avoids allocations.\n\n\n\n\n\n","category":"method"},{"location":"statstools.html#Rimu.StatsTools.determine_constant_time_step-Tuple{Any}","page":"StatsTools","title":"Rimu.StatsTools.determine_constant_time_step","text":"determine_constant_time_step(df) -> time_step\n\nGiven a DataFrame df, determine the time step that was used to compute it. Throw an error if time step is not constant.\n\n\n\n\n\n","category":"method"},{"location":"statstools.html#Index","page":"StatsTools","title":"Index","text":"","category":"section"},{"location":"statstools.html","page":"StatsTools","title":"StatsTools","text":"Pages   = [\"statstools.md\"]","category":"page"},{"location":"interfaces.html#Module-Interfaces","page":"Interfaces","title":"Module Interfaces","text":"","category":"section"},{"location":"interfaces.html","page":"Interfaces","title":"Interfaces","text":"Interfaces","category":"page"},{"location":"interfaces.html#Rimu.Interfaces","page":"Interfaces","title":"Rimu.Interfaces","text":"module Interfaces\n\nThis module contains interfaces that can be used to extend and modify the algorithms and behaviours of Rimu.\n\nInterfaces\n\nFollow the links for the definitions of the interfaces!\n\nAbstractHamiltonian for defining Hamiltonians\nAbstractOperator for defining observable operators\nAbstractDVec for defining data structures for Rimu as in DictVectors\nStochasticStyle for controlling the stochastic algorithms used by ProjectorMonteCarloProblem as implemented in StochasticStyles\n\nAdditional exports\n\nInterface functions forAbstractHamiltonians:\n\ndiagonal_element\nnum_offdiagonals\nget_offdiagonal\noffdiagonals.\nrandom_offdiagonal\nstarting_address\nLOStructure\nallows_address_type\n\nworking with  AbstractDVecs and StochasticStyle\n\ndeposit!\ndefault_style\nCompressionStrategy\nThe interface from VectorInterface.jl.\n\nFunctions Rimu.jl uses to do FCIQMC:\n\napply_column!\napply_operator!\nstep_stats\n\n\n\n\n\n","category":"module"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"EditURL = \"../../../scripts/HO-example.jl\"","category":"page"},{"location":"generated/HO-example.html#Example-5:-Degenerate-perturbation-theory-in-a-harmonic-oscillator-basis","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Example 5: Degenerate perturbation theory in a harmonic oscillator basis","text":"","category":"section"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"Rimu can also handle non-lattice systems. This example looks at weakly-interacting bosonic particles in a harmonic oscillator external potential using a basis of (Cartesian product) single-particle eigenstates of the harmonic oscillator potential. Blocks of degenerate non-interacting states are coupled by a contact interaction in first order degenerate perturbation theory. This example shows how to generate these blocks and find the energy and angular momentum eigenstates.","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"A runnable script for this example is located here. Run it with julia HO-example.jl.","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"First, load all needed packages.","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"using Rimu\nusing DataFrames\nusing LinearAlgebra","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"Define the system size for N=2 particles in a 2D harmonic oscillator allowing M=4 levels in each dimension, including the groundstate.","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"N = 2\nM = 4;","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"Use a tuple S to define the range of harmonic oscillator states in a Cartesian basis, in this isotropic case n_xn_y=01ldotsM-1.","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"S = (M, M);","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"In Rimu the N-particle states are still stored as Fock states.","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"P = prod(S)\naddr = BoseFS(P, M => N)","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"BoseFS{2,16}(0, 0, 0, 2, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0)","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"Here, the numbering of the modes folds in the two spatial dimensions.  Use the utility function fock_to_cart to convert a Fock address to human-readable Cartesian quantum numbers for inspection.","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"fock_to_cart(addr, S)","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"2-element StaticArraysCore.SVector{2, Tuple{Int64, Int64}} with indices SOneTo(2):\n (3, 0)\n (3, 0)","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"The output shows that all N particles are in single-particle state n_x=M-1 n_y=0.","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"The harmonic oscillator Hamiltonian HOCartesianContactInteractions handles contact interactions with first-order perturbation theory, so the matrix representation will block according to the non-interacting energy of the basis states. The first task is to find all blocks of basis states with the same energy. The strength of the interaction is not relevant at this point, just that it is non-zero. Use an arbitrary N-particle starting address to build the Hamiltonian.","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"H = HOCartesianContactInteractions(BoseFS(P, 1 => N); S);","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"Then, use the utility function get_all_blocks to find all blocks. The blocks are found by looping over all possible states with N particles in Cartesian states defined by S. Note that this will only work for total energy up to the maximum accessible by a single particle. The N-particle groundstate energy for a 2D harmonic oscillator is E_0 = N hbar omega and the maximum single-particle energy is E = (E_0 + M - 1) hbar omega.","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"block_df = get_all_blocks(H; max_energy = N + M - 1)","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"<div><div style = \"float: left;\"><span>7×6 DataFrame</span></div><div style = \"clear: both;\"></div></div><div class = \"data-frame\" style = \"overflow-x: scroll;\"><table class = \"data-frame\" style = \"margin-bottom: 6px;\"><thead><tr class = \"header\"><th class = \"rowNumber\" style = \"font-weight: bold; text-align: right;\">Row</th><th style = \"text-align: left;\">block_id</th><th style = \"text-align: left;\">block_E0</th><th style = \"text-align: left;\">block_size</th><th style = \"text-align: left;\">addr</th><th style = \"text-align: left;\">indices</th><th style = \"text-align: left;\">t_basis</th></tr><tr class = \"subheader headerLastRow\"><th class = \"rowNumber\" style = \"font-weight: bold; text-align: right;\"></th><th title = \"Int64\" style = \"text-align: left;\">Int64</th><th title = \"Float64\" style = \"text-align: left;\">Float64</th><th title = \"Int64\" style = \"text-align: left;\">Int64</th><th title = \"BoseFS{2, 16, BitString{17, 1, UInt32}}\" style = \"text-align: left;\">BoseFS…</th><th title = \"Tuple{Int64, Int64}\" style = \"text-align: left;\">Tuple…</th><th title = \"Float64\" style = \"text-align: left;\">Float64</th></tr></thead><tbody><tr><td class = \"rowNumber\" style = \"font-weight: bold; text-align: right;\">1</td><td style = \"text-align: right;\">1</td><td style = \"text-align: right;\">2.0</td><td style = \"text-align: right;\">1</td><td style = \"text-align: left;\">fs&quot;|2 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0⟩&quot;</td><td style = \"text-align: left;\">(1, 1)</td><td style = \"text-align: right;\">0.477914</td></tr><tr><td class = \"rowNumber\" style = \"font-weight: bold; text-align: right;\">2</td><td style = \"text-align: right;\">2</td><td style = \"text-align: right;\">3.0</td><td style = \"text-align: right;\">1</td><td style = \"text-align: left;\">fs&quot;|1 1 0 0 0 0 0 0 0 0 0 0 0 0 0 0⟩&quot;</td><td style = \"text-align: left;\">(2, 1)</td><td style = \"text-align: right;\">1.5209e-5</td></tr><tr><td class = \"rowNumber\" style = \"font-weight: bold; text-align: right;\">3</td><td style = \"text-align: right;\">3</td><td style = \"text-align: right;\">4.0</td><td style = \"text-align: right;\">4</td><td style = \"text-align: left;\">fs&quot;|0 2 0 0 0 0 0 0 0 0 0 0 0 0 0 0⟩&quot;</td><td style = \"text-align: left;\">(2, 2)</td><td style = \"text-align: right;\">1.3575e-5</td></tr><tr><td class = \"rowNumber\" style = \"font-weight: bold; text-align: right;\">4</td><td style = \"text-align: right;\">4</td><td style = \"text-align: right;\">5.0</td><td style = \"text-align: right;\">5</td><td style = \"text-align: left;\">fs&quot;|0 1 1 0 0 0 0 0 0 0 0 0 0 0 0 0⟩&quot;</td><td style = \"text-align: left;\">(3, 2)</td><td style = \"text-align: right;\">9.046e-6</td></tr><tr><td class = \"rowNumber\" style = \"font-weight: bold; text-align: right;\">5</td><td style = \"text-align: right;\">5</td><td style = \"text-align: right;\">3.0</td><td style = \"text-align: right;\">1</td><td style = \"text-align: left;\">fs&quot;|1 0 0 0 1 0 0 0 0 0 0 0 0 0 0 0⟩&quot;</td><td style = \"text-align: left;\">(5, 1)</td><td style = \"text-align: right;\">1.403e-6</td></tr><tr><td class = \"rowNumber\" style = \"font-weight: bold; text-align: right;\">6</td><td style = \"text-align: right;\">6</td><td style = \"text-align: right;\">4.0</td><td style = \"text-align: right;\">2</td><td style = \"text-align: left;\">fs&quot;|0 1 0 0 1 0 0 0 0 0 0 0 0 0 0 0⟩&quot;</td><td style = \"text-align: left;\">(5, 2)</td><td style = \"text-align: right;\">2.825e-6</td></tr><tr><td class = \"rowNumber\" style = \"font-weight: bold; text-align: right;\">7</td><td style = \"text-align: right;\">7</td><td style = \"text-align: right;\">5.0</td><td style = \"text-align: right;\">5</td><td style = \"text-align: left;\">fs&quot;|0 0 1 0 1 0 0 0 0 0 0 0 0 0 0 0⟩&quot;</td><td style = \"text-align: left;\">(5, 3)</td><td style = \"text-align: right;\">8.376e-6</td></tr></tbody></table></div>","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"This outputs a list of blocks in H indexed by the noninteracting energy of all states in the block, and a single address that can be used to rebuild the block for further analysis.","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"addr1 = block_df[7,:addr]\nE = block_df[7,:block_E0]","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"5.0","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"First, notice that all basis states have the same energy, defined by the block.","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"basis1 = build_basis(H, addr1)\nmap(b -> Hamiltonians.noninteracting_energy(H, b), basis1)","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"5-element Vector{Float64}:\n 5.0\n 5.0\n 5.0\n 5.0\n 5.0","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"There are two blocks at each energy level (except the groundstate), which are different due to parity conservation, which is the only other symmetry in the Cartesian harmonic oscillator. The basis of this other block is different,","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"addr2 = block_df[4,:addr]\nbasis2 = build_basis(H, addr2);\nbasis1 ≠ basis2","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"true","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"but its basis elements have the same energy.","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"map(b -> Hamiltonians.noninteracting_energy(H, b), basis2)","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"5-element Vector{Float64}:\n 5.0\n 5.0\n 5.0\n 5.0\n 5.0","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"However, since this system is an isotropic harmonic oscillator, it is possible to build simultaneous eigenstates of the angular momentum operator L_z, implemented with AxialAngularMomentumHO.","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"Lz = AxialAngularMomentumHO(S)","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"AxialAngularMomentumHO((4, 4); z_dim = 3, addr = BoseFS{0,16}(0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0))","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"L_z does not conserve parity, so both blocks are required. First combine the bases of each block and convert to DVecs.","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"dvs = map(b -> DVec(b => 1.0), vcat(basis1, basis2));","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"and then compute overlaps for the matrix elements of L_z.","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"Lz_mat = [dot(v, Lz, w) for v in dvs, w in dvs]","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"10×10 Matrix{ComplexF64}:\n 0.0+0.0im      0.0+0.0im      0.0+0.0im      0.0+0.0im      0.0+0.0im      0.0+1.0im      0.0+0.0im      0.0-1.41421im  0.0+0.0im      0.0+0.0im\n 0.0+0.0im      0.0+0.0im      0.0+0.0im      0.0+0.0im      0.0+0.0im      0.0+1.41421im  0.0+0.0im      0.0-1.0im      0.0-1.41421im  0.0+0.0im\n 0.0+0.0im      0.0+0.0im      0.0+0.0im      0.0+0.0im      0.0+0.0im      0.0+0.0im      0.0+1.73205im  0.0+0.0im      0.0+0.0im      0.0-2.0im\n 0.0+0.0im      0.0+0.0im      0.0+0.0im      0.0+0.0im      0.0+0.0im      0.0+0.0im      0.0+0.0im      0.0+1.41421im  0.0+1.0im      0.0+0.0im\n 0.0+0.0im      0.0+0.0im      0.0+0.0im      0.0+0.0im      0.0+0.0im      0.0+0.0im      0.0+0.0im      0.0+0.0im      0.0+0.0im      0.0+1.73205im\n 0.0-1.0im      0.0-1.41421im  0.0+0.0im      0.0+0.0im      0.0+0.0im      0.0+0.0im      0.0+0.0im      0.0+0.0im      0.0+0.0im      0.0+0.0im\n 0.0+0.0im      0.0+0.0im      0.0-1.73205im  0.0+0.0im      0.0+0.0im      0.0+0.0im      0.0+0.0im      0.0+0.0im      0.0+0.0im      0.0+0.0im\n 0.0+1.41421im  0.0+1.0im      0.0+0.0im      0.0-1.41421im  0.0+0.0im      0.0+0.0im      0.0+0.0im      0.0+0.0im      0.0+0.0im      0.0+0.0im\n 0.0+0.0im      0.0+1.41421im  0.0+0.0im      0.0-1.0im      0.0+0.0im      0.0+0.0im      0.0+0.0im      0.0+0.0im      0.0+0.0im      0.0+0.0im\n 0.0+0.0im      0.0+0.0im      0.0+2.0im      0.0+0.0im      0.0-1.73205im  0.0+0.0im      0.0+0.0im      0.0+0.0im      0.0+0.0im      0.0+0.0im","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"By diagonalising this matrix the eigenstate have energy E and well-defined angular momentum.","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"Diagonalise this matrix to obtain the eigenstates of L_z. The eigenvectors provide the linear combinations of basis states with well-defined angular momentum, within the subspace of energy E.","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"Lz_vals, Lz_vecs = eigen(Lz_mat)","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"Eigen{ComplexF64, Float64, Matrix{ComplexF64}, Vector{Float64}}\nvalues:\n10-element Vector{Float64}:\n -2.9999999999999956\n -2.999999999999991\n -0.9999999999999991\n -0.9999999999999982\n -0.9999999999999973\n  1.0000000000000002\n  1.0000000000000027\n  1.0000000000000027\n  3.0\n  3.0000000000000004\nvectors:\n10×10 Matrix{ComplexF64}:\n       0.0+0.0im       -5.55112e-17-0.353553im         0.534676-0.217841im      2.77556e-17-0.204124im             0.0+0.0im           0.534676+0.217841im      2.77556e-17+0.204124im             0.0+0.0im       -5.55112e-17+0.353553im           0.0+0.0im\n       0.0+0.0im        5.55112e-17-0.5im             -0.378073+0.154037im              0.0-0.288675im             0.0+0.0im          -0.378073-0.154037im     -5.55112e-17+0.288675im             0.0+0.0im                0.0+0.5im                0.0+0.0im\n       0.0+0.612372im           0.0+0.0im          -5.55112e-17+0.0im           -1.2326e-32+2.77556e-17im          0.0+0.353553im           0.0+0.0im                   0.0+2.77556e-17im          0.0+0.353553im           0.0+0.0im                0.0+0.612372im\n       0.0+0.0im                0.0+0.353553im      5.55112e-17+6.93889e-17im           0.0-0.612372im             0.0+0.0im        5.55112e-17-1.38778e-16im           0.0+0.612372im             0.0+0.0im                0.0-0.353553im           0.0+0.0im\n       0.0-0.353553im    1.2326e-32+1.11022e-16im   5.55112e-17-2.77556e-17im  -2.46519e-32-2.77556e-17im          0.0+0.612372im  -1.11022e-16-2.77556e-17im   4.93038e-32-2.77556e-17im          0.0+0.612372im   -1.2326e-32+8.32667e-17im        0.0-0.353553im\n       0.0+0.0im           0.353553+0.0im                   0.0+0.0im              0.612372+0.0im                  0.0+0.0im                0.0+0.0im              0.612372+0.0im                  0.0+0.0im           0.353553+0.0im                0.0+0.0im\n -0.353553+0.0im                0.0+0.0im                   0.0+0.0im                   0.0+0.0im            -0.612372+0.0im                0.0+0.0im                   0.0+0.0im             0.612372+0.0im                0.0+0.0im           0.353553+0.0im\n       0.0+0.0im               -0.5+7.02973e-17im     -0.154037-0.378073im         0.288675-1.95105e-16im          0.0+0.0im          -0.154037+0.378073im         0.288675+2.29062e-16im          0.0+0.0im               -0.5-7.48398e-17im        0.0+0.0im\n       0.0+0.0im          -0.353553+8.84171e-17im      0.217841+0.534676im         0.204124-1.1389e-16im   8.32667e-17+0.0im           0.217841-0.534676im         0.204124+2.4427e-16im   8.32667e-17+0.0im          -0.353553-8.31718e-17im        0.0+0.0im\n  0.612372+0.0im                0.0+0.0im                   0.0+0.0im                   0.0+0.0im            -0.353553-0.0im                0.0+0.0im                   0.0+0.0im             0.353553+0.0im                0.0+0.0im          -0.612372-0.0im","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"Finally, consider the effect of interactions by looking at how states in a single block are perturbed. Only the energy shift due to the interaction is relevant so now rebuild the Hamiltonian without the non-interacting energy.","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"Hint = HOCartesianContactInteractions(addr1; S, interaction_only = true)\nΔE = eigvals(Matrix(Hint, addr1))","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"5-element Vector{Float64}:\n -1.6810327175633306e-17\n  3.469966302164114e-17\n  0.15915494309189535\n  0.1591549430918954\n  0.1591549430918954","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"Two eigenstates in this block are unaffected by the interaction and three have a non-zero energy shift.","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"The default strength of the interaction is g = 1.0. Other interactions strengths can be obtained by using keyword argument g in HOCartesianContactInteractions or by rescaling ΔE since the interactions are handled with first-order perturbation theory.","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"Rimu also contains HOCartesianEnergyConservedPerDim which is a similar Hamiltonian but with the stricter condition that the contact interaction only connects states that have the same total energy in each dimension, rather than conserving the overall total energy. Both Hamiltonians can handle anisotropic systems by passing a tuple S whose elements are not all the same. This will alter which states are connected by the interaction, but assumes that the harmonic trapping frequencies in each dimension are commensurate.","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"This page was generated using Literate.jl.","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"EditURL = \"../../../scripts/exact-example.jl\"","category":"page"},{"location":"generated/exact-example.html#Example-4:-Exact-diagonalization","page":"Exact diagonalization","title":"Example 4: Exact diagonalization","text":"","category":"section"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"When working with smaller systems or when multiple eigenvalues of a system are required, one can use an exact diagonalization method. There are a few ways to go about this, each with its pros and cons. The purpose of this tutorial is to show off the methods as well as provide a few tips regarding them.","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"A runnable script for this example is located here. Run it with julia exact-example.jl.","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"We start by loading Rimu.","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"using Rimu","category":"page"},{"location":"generated/exact-example.html#Introduction","page":"Exact diagonalization","title":"Introduction","text":"","category":"section"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"We will look at a bosonic system of 4 particles in 5 sites, formulated in momentum space. Let's start by building the Hamiltonian. To create a Fock state where all particles have zero momentum, we put all the particles in the mode at the centre of the address.","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"M = 5\nN = 4\nadd = BoseFS(M, cld(M, 2) => N)\nham = HubbardMom1D(add)","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"HubbardMom1D(fs\"|0 0 4 0 0⟩\"; u=1.0, t=1.0)","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"Before performing exact diagonalization, it is a good idea to check the dimension of the Hamiltonian.","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"dimension(ham)","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"70","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"Keep in mind that this is an estimate of the number of Fock states the Hamiltonian can act on, not the actual matrix size - the matrix size can sometimes be smaller. It can still be used as a guide to decide whether a Hamiltonian is amenable to exact diagonalization and to determine which algorithm would be best suited to diagonalising it.","category":"page"},{"location":"generated/exact-example.html#The-BasisSetRepresentation","page":"Exact diagonalization","title":"The BasisSetRepresentation","text":"","category":"section"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"As we'll see later, there are two ways to construct the matrices from Hamiltonians directly, but they both use BasisSetRepresentation under the hood. The BasisSetRepresentation, when called with a Hamiltonian and optionally a starting address, constructs the sparse matrix of the system, as well as its basis. The starting address defaults to the one that was used to initialize the Hamiltonian. BasisSetRepresentation only returns the part of the matrix that is accessible from this starting address through non-zero offdiagonal elements.","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"bsr = BasisSetRepresentation(ham);","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"To access the matrix or basis, access the sparse_matrix and basis fields, respectively.","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"bsr.sparse_matrix","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"14×14 SparseArrays.SparseMatrixCSC{Float64, Int64} with 104 stored entries:\n -6.8       0.69282   0.69282    ⋅         ⋅         ⋅         ⋅          ⋅         ⋅         ⋅         ⋅         ⋅         ⋅         ⋅ \n  0.69282  -3.03607   0.4       0.8       0.4       0.8       0.4        0.565685  0.282843   ⋅         ⋅         ⋅         ⋅         ⋅ \n  0.69282   0.4       1.43607   0.4       0.8       0.4       0.8         ⋅        0.282843  0.565685   ⋅         ⋅         ⋅         ⋅ \n   ⋅        0.8       0.4       0.581966  0.4        ⋅        0.4        0.282843  0.565685   ⋅        0.69282   0.69282    ⋅         ⋅ \n   ⋅        0.4       0.8       0.4       2.81803   0.4        ⋅          ⋅        0.565685  0.282843  0.69282    ⋅        0.69282    ⋅ \n   ⋅        0.8       0.4        ⋅        0.4       0.581966  0.4        0.282843  0.565685   ⋅         ⋅         ⋅        0.69282   0.69282\n   ⋅        0.4       0.8       0.4        ⋅        0.4       2.81803     ⋅        0.565685  0.282843   ⋅        0.69282    ⋅        0.69282\n   ⋅        0.565685   ⋅        0.282843   ⋅        0.282843   ⋅        -0.472136  0.8        ⋅        0.489898   ⋅         ⋅        0.489898\n   ⋅        0.282843  0.282843  0.565685  0.565685  0.565685  0.565685   0.8       4.4       0.8       0.489898  0.489898  0.489898  0.489898\n   ⋅         ⋅        0.565685   ⋅        0.282843   ⋅        0.282843    ⋅        0.8       8.47214    ⋅        0.489898  0.489898   ⋅ \n   ⋅         ⋅         ⋅        0.69282   0.69282    ⋅         ⋅         0.489898  0.489898   ⋅        1.56393    ⋅         ⋅         ⋅ \n   ⋅         ⋅         ⋅        0.69282    ⋅         ⋅        0.69282     ⋅        0.489898  0.489898   ⋅        6.03607    ⋅         ⋅ \n   ⋅         ⋅         ⋅         ⋅        0.69282   0.69282    ⋅          ⋅        0.489898  0.489898   ⋅         ⋅        6.03607    ⋅ \n   ⋅         ⋅         ⋅         ⋅         ⋅        0.69282   0.69282    0.489898  0.489898   ⋅         ⋅         ⋅         ⋅        1.56393","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"bsr.basis","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"14-element Vector{BoseFS{4, 5, BitString{8, 1, UInt8}}}:\n fs\"|0 0 4 0 0⟩\"\n fs\"|0 1 2 1 0⟩\"\n fs\"|1 0 2 0 1⟩\"\n fs\"|1 0 1 2 0⟩\"\n fs\"|0 0 1 1 2⟩\"\n fs\"|0 2 1 0 1⟩\"\n fs\"|2 1 1 0 0⟩\"\n fs\"|0 2 0 2 0⟩\"\n fs\"|1 1 0 1 1⟩\"\n fs\"|2 0 0 0 2⟩\"\n fs\"|0 0 0 3 1⟩\"\n fs\"|3 0 0 1 0⟩\"\n fs\"|0 1 0 0 3⟩\"\n fs\"|1 3 0 0 0⟩\"","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"When the basis is not needed, we can use Matrix or sparse directly.","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"Matrix(ham)","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"14×14 Matrix{Float64}:\n -6.8       0.69282   0.69282   0.0       0.0       0.0       0.0        0.0       0.0       0.0       0.0       0.0       0.0       0.0\n  0.69282  -3.03607   0.4       0.8       0.4       0.8       0.4        0.565685  0.282843  0.0       0.0       0.0       0.0       0.0\n  0.69282   0.4       1.43607   0.4       0.8       0.4       0.8        0.0       0.282843  0.565685  0.0       0.0       0.0       0.0\n  0.0       0.8       0.4       0.581966  0.4       0.0       0.4        0.282843  0.565685  0.0       0.69282   0.69282   0.0       0.0\n  0.0       0.4       0.8       0.4       2.81803   0.4       0.0        0.0       0.565685  0.282843  0.69282   0.0       0.69282   0.0\n  0.0       0.8       0.4       0.0       0.4       0.581966  0.4        0.282843  0.565685  0.0       0.0       0.0       0.69282   0.69282\n  0.0       0.4       0.8       0.4       0.0       0.4       2.81803    0.0       0.565685  0.282843  0.0       0.69282   0.0       0.69282\n  0.0       0.565685  0.0       0.282843  0.0       0.282843  0.0       -0.472136  0.8       0.0       0.489898  0.0       0.0       0.489898\n  0.0       0.282843  0.282843  0.565685  0.565685  0.565685  0.565685   0.8       4.4       0.8       0.489898  0.489898  0.489898  0.489898\n  0.0       0.0       0.565685  0.0       0.282843  0.0       0.282843   0.0       0.8       8.47214   0.0       0.489898  0.489898  0.0\n  0.0       0.0       0.0       0.69282   0.69282   0.0       0.0        0.489898  0.489898  0.0       1.56393   0.0       0.0       0.0\n  0.0       0.0       0.0       0.69282   0.0       0.0       0.69282    0.0       0.489898  0.489898  0.0       6.03607   0.0       0.0\n  0.0       0.0       0.0       0.0       0.69282   0.69282   0.0        0.0       0.489898  0.489898  0.0       0.0       6.03607   0.0\n  0.0       0.0       0.0       0.0       0.0       0.69282   0.69282    0.489898  0.489898  0.0       0.0       0.0       0.0       1.56393","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"sparse(ham)","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"14×14 SparseArrays.SparseMatrixCSC{Float64, Int64} with 104 stored entries:\n -6.8       0.69282   0.69282    ⋅         ⋅         ⋅         ⋅          ⋅         ⋅         ⋅         ⋅         ⋅         ⋅         ⋅ \n  0.69282  -3.03607   0.4       0.8       0.4       0.8       0.4        0.565685  0.282843   ⋅         ⋅         ⋅         ⋅         ⋅ \n  0.69282   0.4       1.43607   0.4       0.8       0.4       0.8         ⋅        0.282843  0.565685   ⋅         ⋅         ⋅         ⋅ \n   ⋅        0.8       0.4       0.581966  0.4        ⋅        0.4        0.282843  0.565685   ⋅        0.69282   0.69282    ⋅         ⋅ \n   ⋅        0.4       0.8       0.4       2.81803   0.4        ⋅          ⋅        0.565685  0.282843  0.69282    ⋅        0.69282    ⋅ \n   ⋅        0.8       0.4        ⋅        0.4       0.581966  0.4        0.282843  0.565685   ⋅         ⋅         ⋅        0.69282   0.69282\n   ⋅        0.4       0.8       0.4        ⋅        0.4       2.81803     ⋅        0.565685  0.282843   ⋅        0.69282    ⋅        0.69282\n   ⋅        0.565685   ⋅        0.282843   ⋅        0.282843   ⋅        -0.472136  0.8        ⋅        0.489898   ⋅         ⋅        0.489898\n   ⋅        0.282843  0.282843  0.565685  0.565685  0.565685  0.565685   0.8       4.4       0.8       0.489898  0.489898  0.489898  0.489898\n   ⋅         ⋅        0.565685   ⋅        0.282843   ⋅        0.282843    ⋅        0.8       8.47214    ⋅        0.489898  0.489898   ⋅ \n   ⋅         ⋅         ⋅        0.69282   0.69282    ⋅         ⋅         0.489898  0.489898   ⋅        1.56393    ⋅         ⋅         ⋅ \n   ⋅         ⋅         ⋅        0.69282    ⋅         ⋅        0.69282     ⋅        0.489898  0.489898   ⋅        6.03607    ⋅         ⋅ \n   ⋅         ⋅         ⋅         ⋅        0.69282   0.69282    ⋅          ⋅        0.489898  0.489898   ⋅         ⋅        6.03607    ⋅ \n   ⋅         ⋅         ⋅         ⋅         ⋅        0.69282   0.69282    0.489898  0.489898   ⋅         ⋅         ⋅         ⋅        1.56393","category":"page"},{"location":"generated/exact-example.html#Computing-eigenvalues","page":"Exact diagonalization","title":"Computing eigenvalues","text":"","category":"section"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"Now that we have a way of constructing matrices from Hamiltonians, we can use standard Julia functionality to diagonalise them.","category":"page"},{"location":"generated/exact-example.html#The-built-in-method","page":"Exact diagonalization","title":"The built-in method","text":"","category":"section"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"Let's begin by looking at the eigen, eigvecs, and eigvals functions from the LinearAlgebra standard library. They operate on dense matrices and return the full spectra, hence they are only useful for small systems, or when all eigenvalues are required.","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"using LinearAlgebra\n\nmat = Matrix(ham)\neig = eigen(mat);","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"The values can be accessed like so:","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"eig.values","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"14-element Vector{Float64}:\n -6.9798639983216155\n -3.363124291613371\n -0.7590191922770746\n  0.1358418221962303\n  0.1578999869460933\n  0.8767114411781396\n  1.530592997097333\n  1.5835732611867464\n  3.072870330325867\n  3.125672653951849\n  4.862107221562182\n  6.26069485038059\n  6.402671211183119\n  9.093371706203957","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"The vectors are stored as columns in eig.vectors:","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"eig.vectors","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"14×14 Matrix{Float64}:\n -0.980348     0.175378     0.0135766   -2.81719e-15  -0.0221221  -0.0697193   1.3739e-15    0.0314466   -2.35922e-16  -0.0360987   -0.0161557  -5.55112e-17   0.00625248  -0.0058099\n  0.177701     0.932229     0.105473     3.01009e-14   0.225254   -0.132826    9.71445e-17  -0.00292026  -2.09555e-15  -0.0861158   -0.0907789  -4.996e-16     0.0591715   -0.0264275\n  0.0768085   -0.0622307    0.0129069   -6.06251e-14  -0.447424   -0.63969     2.05322e-14   0.383444    -6.54338e-15  -0.431051    -0.181167   -6.10623e-16   0.0599783   -0.106852\n -0.0214153   -0.175119    -0.20169      0.616673      0.522017   -0.296818   -0.31234      -0.122119    -0.123629     -0.106455    -0.126661    0.0829132     0.148347    -0.0574235\n -0.0119687   -0.0373038    0.0678797    0.0693699     0.0495446   0.416847    0.33773       0.0584554   -0.601232     -0.467179    -0.215841   -0.140166      0.190543    -0.114342\n -0.0214153   -0.175119    -0.20169     -0.616673      0.522017   -0.296818    0.31234      -0.122119     0.123629     -0.106455    -0.126661   -0.0829132     0.148347    -0.0574235\n -0.0119687   -0.0373038    0.0678797   -0.0693699     0.0495446   0.416847   -0.33773       0.0584554    0.601232     -0.467179    -0.215841    0.140166      0.190543    -0.114342\n -0.0138439   -0.165902     0.922758     1.00753e-14   0.1111     -0.172508   -1.30521e-14  -0.207974     2.66454e-15   0.0848902   -0.149153   -8.32667e-16   0.0712921   -0.0301968\n -0.00234782   0.00840544  -0.098969    -9.6867e-15   -0.0847116   0.082999    1.51129e-14   0.274424     3.60822e-15   0.575786    -0.61385    -2.72005e-15   0.353775    -0.259338\n -0.00237613   0.00294196   0.00143189   5.56152e-15   0.0427486   0.0110863  -3.72619e-15  -0.0663108    9.50628e-16   0.00167015   0.0832916   2.91434e-15  -0.448519    -0.8863\n  0.00363555   0.0455298   -0.133824    -0.332825     -0.290831   -0.057199   -0.527627     -0.588225    -0.332816     -0.0472302   -0.18528    -0.00844536    0.0915588   -0.0346434\n  0.00195478   0.0150664    0.0206752   -0.0642658    -0.0638689  -0.0250518   0.0999631    -0.012992    -0.111668      0.0393523    0.423534    0.688046      0.513839    -0.222499\n  0.00195478   0.0150664    0.0206752    0.0642658    -0.0638689  -0.0250518  -0.0999631    -0.012992     0.111668      0.0393523    0.423534   -0.688046      0.513839    -0.222499\n  0.00363555   0.0455298   -0.133824     0.332825     -0.290831   -0.057199    0.527627     -0.588225     0.332816     -0.0472302   -0.18528     0.00844536    0.0915588   -0.0346434","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"If you need the full spectrum, but would like to use less memory, consider using the in-place eigen!.","category":"page"},{"location":"generated/exact-example.html#Iterative-sparse-solvers","page":"Exact diagonalization","title":"Iterative sparse solvers","text":"","category":"section"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"For larger Hamiltonians, it is better to use an iterative solver. There are several options. We will look at eigs from Arpack.jl and eigsolve from KrylovKit.jl.","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"Let's start with Arpack's eigs. It is important to set the nev and which keyword arguments. nev sets the number of eigenpairs to find. which should in most cases be set to :SR, which will find the eigenvalues with the smallest real part.","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"using Arpack\n\nnum_eigvals = 3\n\nsparse_matrix = sparse(ham)\nvals_ar, vecs_ar = eigs(sparse_matrix; which=:SR, nev=num_eigvals)\nvals_ar","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"3-element Vector{Float64}:\n -6.979863998321619\n -3.3631242916133606\n -0.7590191922770747","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"Using KrylovKit's eigsolve is similar, but the nev and which are given as positional arguments. Note that KrylovKit may sometimes return more than nev eigenpairs if it happens to find them.","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"using KrylovKit\n\nvals_kk, vecs_kk = eigsolve(sparse_matrix, num_eigvals, :SR)\nvals_kk","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"14-element Vector{Float64}:\n -6.97986399832163\n -3.3631242916133797\n -0.7590191922770781\n  0.13584182219622853\n  0.15789998694607732\n  0.8767114411781343\n  1.5305929970973304\n  1.5835732611867561\n  3.072870330325861\n  3.1256726539518382\n  4.862107221562173\n  6.26069485038059\n  6.402671211183113\n  9.093371706203955","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"Both solvers use variants of the Lanczos algorithm for Hermitian matrices and the Arnoldi algorithm for non-Hermitian ones. These may in some cases miss degenerate eigenpairs.","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"If diagonalization takes too long, you can reduce the tolerance by setting the tol keyword argument to eigs or eigsolve. Using drastically lower tolerances than the default can still produce good results in practice. This, however, should be checked on a case-by-case basis.","category":"page"},{"location":"generated/exact-example.html#The-matrix-free-method","page":"Exact diagonalization","title":"The matrix-free method","text":"","category":"section"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"KrylovKit's eigsolve function is implemented in a way that does not require the linear operator and vector to be Julia arrays. Rimu leverages this functionality, which allows diagonalising Hamiltonians without ever needing to construct the matrix - all matrix elements are generated on the fly.","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"While this method is by far the slowest of the ones discussed, it also uses drastically less memory. This allows us to diagonalise much larger Hamiltonians.","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"To use this method, you first need a starting vector. It's best to use PDVec here as it leverages threading during the diagonalization.","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"dvec = PDVec(add => 1.0)","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"1-element PDVec: style = IsDeterministic{Float64}()\n  fs\"|0 0 4 0 0⟩\" => 1.0","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"Then, pass that vector and the Hamiltonian to eigsolve.","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"vals_mf, vecs_mf = eigsolve(ham, dvec, num_eigvals, :SR; issymmetric=true)\nvals_mf","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"10-element Vector{Float64}:\n -6.979863998321612\n -3.3631242916133406\n -0.7590191922770728\n  0.1578999869460862\n  0.8767114411781503\n  1.5835732611867401\n  3.125672653951839\n  4.862107221562172\n  6.402671211183112\n  9.093371706203953","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"Keep in mind that if an eigenvector is orthogonal to dvec, KrylovKit will miss it. Consider the following example:","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"eigsolve(ham, vecs_mf[2], num_eigvals, :SR, issymmetric=true)[1]","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"1-element Vector{Float64}:\n -3.3631242916133606","category":"page"},{"location":"generated/exact-example.html#Reducing-matrix-size-with-symmetries","page":"Exact diagonalization","title":"Reducing matrix size with symmetries","text":"","category":"section"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"As these matrices tend to get large quickly, memory is usually the bottleneck.  There are currently two methods implemented to reduce the matrix size, ParitySymmetry and TimeReversalSymmetry. These symmetries work by performing a unitary transformation on the Hamiltonian which causes it to become block-diagonal. When building a matrix from a block-diagonal Hamiltonian, only the block that contains the starting address is constructed.","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"You should only use these where the relevant symmetries actually apply - no checks are performed to make sure they do. There is also currently no way of using both at the same time. Please consult the documentation for a more in-depth description of these options.","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"The Hamiltonian presented in this example is compatible with ParitySymmetry. Let's see how the matrix size is reduced when applying it.","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"size(sparse(ham))","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"(14, 14)","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"size(sparse(ParitySymmetry(ham)))","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"(10, 10)","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"In this small example, the size reduction is modest, but for larger systems, you can expect to reduce the dimension of the matrix by about half.","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"all_eigs = eigvals(Matrix(ham))\neven_eigs = eigvals(Matrix(ParitySymmetry(ham)))","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"10-element Vector{Float64}:\n -6.979863998321621\n -3.3631242916133637\n -0.759019192277076\n  0.1578999869460802\n  0.8767114411781437\n  1.5835732611867417\n  3.125672653951844\n  4.862107221562179\n  6.402671211183117\n  9.093371706203957","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"The eigenvalues of the transformed Hamiltonian are a subset of the full spectrum. To get the other half, we can pass the even=false keyword argument to ParitySymmetry. When doing that, we need to make sure the starting address of the Hamiltonian is not symmetric under reversal:","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"add_odd = BoseFS(M, cld(M, 2) => N - 3, cld(M, 2) - 1 => 2, cld(M, 2) + 2 => 1)","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"BoseFS{4,5}(0, 2, 1, 0, 1)","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"odd_eigs = eigvals(Matrix(ParitySymmetry(HubbardMom1D(add_odd); even=false)))","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"4-element Vector{Float64}:\n 0.135841822196218\n 1.530592997097328\n 3.0728703303258613\n 6.260694850380591","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"Now, let's check that combining the two sets of eigenvalues indeed recovers the whole spectrum.","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"sort([even_eigs; odd_eigs]) ≈ all_eigs","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"true","category":"page"},{"location":"generated/exact-example.html#Computing-observables","page":"Exact diagonalization","title":"Computing observables","text":"","category":"section"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"Since building a matrix from an operator only builds the part that is reachable from the starting address, we need to use a different approach when computing observables.","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"To demonstrate this, we will use the DensityMatrixDiagonal operator, which in this case will give the momentum density.","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"The idea here is to construct a PDVec from the computed eigenvector and use it directly with the operator.","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"dvec = PDVec(zip(bsr.basis, eigvecs(Matrix(ham))[:, 1]))","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"14-element PDVec: style = IsDeterministic{Float64}()\n  fs\"|1 0 1 2 0⟩\" => -0.0214153\n  fs\"|2 0 0 0 2⟩\" => -0.00237613\n  fs\"|0 0 4 0 0⟩\" => -0.980348\n  fs\"|0 0 0 3 1⟩\" => 0.00363555\n  fs\"|2 1 1 0 0⟩\" => -0.0119687\n  fs\"|1 0 2 0 1⟩\" => 0.0768085\n  fs\"|1 3 0 0 0⟩\" => 0.00363555\n  fs\"|0 1 2 1 0⟩\" => 0.177701\n  fs\"|0 0 1 1 2⟩\" => -0.0119687\n  fs\"|3 0 0 1 0⟩\" => 0.00195478\n  fs\"|0 2 0 2 0⟩\" => -0.0138439\n  fs\"|1 1 0 1 1⟩\" => -0.00234782\n  fs\"|0 1 0 0 3⟩\" => 0.00195478\n  fs\"|0 2 1 0 1⟩\" => -0.0214153","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"The eigenvectors these methods produce are normalized, hence we can use the three-argument dot to compute the values of observables. Here we are computing the single particle momentum density distribution, which is just the diagonal of the single-particle density matrix in momentum space.","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"[dot(dvec, DensityMatrixDiagonal(i), dvec) for i in 1:M]","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"5-element Vector{Float64}:\n 0.0066861389450877905\n 0.033070399772041625\n 3.9204869225657406\n 0.03307039977204162\n 0.006686138945087839","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"This page was generated using Literate.jl.","category":"page"},{"location":"rimuio.html#Module-RimuIO","page":"I/O","title":"Module RimuIO","text":"","category":"section"},{"location":"rimuio.html","page":"I/O","title":"I/O","text":"Modules = [RimuIO]","category":"page"},{"location":"rimuio.html#Rimu.RimuIO","page":"I/O","title":"Rimu.RimuIO","text":"Module to provide file input and output functionality for Rimu. Provides convenience functions:\n\nRimuIO.save_df(filename, df::DataFrame) Save dataframe in Arrow format.\nRimuIO.load_df(filename) Load Arrow file into dataframe.\n\n\n\n\n\n","category":"module"},{"location":"rimuio.html#Rimu.RimuIO.load_df-Tuple{Any}","page":"I/O","title":"Rimu.RimuIO.load_df","text":"RimuIO.load_df(filename; propagate_metadata = true, add_filename = true) -> DataFrame\n\nLoad Arrow file into DataFrame. Optionally propagate metadata to DataFrame and add the file name as metadata.\n\nSee also RimuIO.save_df.\n\n\n\n\n\n","category":"method"},{"location":"rimuio.html#Rimu.RimuIO.save_df-Tuple{Any, DataFrame}","page":"I/O","title":"Rimu.RimuIO.save_df","text":"RimuIO.save_df(filename, df::DataFrame; kwargs...)\n\nSave dataframe in Arrow format.\n\nKeyword arguments are passed on to Arrow.write. Compression is enabled by default for large DataFrames (over 10,000 rows).\n\nTable-level metadata of the DataFrame is saved as Arrow metadata (with String value) unless overwritten with the keyword argument metadata.\n\nSee also RimuIO.load_df.\n\n\n\n\n\n","category":"method"},{"location":"rimuio.html#Index","page":"I/O","title":"Index","text":"","category":"section"},{"location":"rimuio.html","page":"I/O","title":"I/O","text":"Pages   = [\"rimuio.md\"]","category":"page"},{"location":"hamiltonians.html#Module-Hamiltonians","page":"Hamiltonians","title":"Module Hamiltonians","text":"","category":"section"},{"location":"hamiltonians.html","page":"Hamiltonians","title":"Hamiltonians","text":"This module contains definitions of Hamiltonians, in particular specific physical models of interest. These are organised by means of an interface around the abstract type AbstractHamiltonian, in the spirit of the AbstractArray interface as discussed in the Julia Documentation.","category":"page"},{"location":"hamiltonians.html","page":"Hamiltonians","title":"Hamiltonians","text":"The Hamiltonians can be used for projector quantum Monte Carlo with ProjectorMonteCarloProblem or for exact diagonalization with ExactDiagonalizationProblem, see Exact Diagonalization.","category":"page"},{"location":"hamiltonians.html","page":"Hamiltonians","title":"Hamiltonians","text":"Hamiltonians","category":"page"},{"location":"hamiltonians.html#Rimu.Hamiltonians","page":"Hamiltonians","title":"Rimu.Hamiltonians","text":"The module Rimu.Hamiltonians defines types and functions for working with Hamiltonians.\n\nExported concrete Hamiltonian types\n\nReal space Hubbard models\n\nHubbardReal1D\nBoseHubbardReal1D2C\nHubbardReal1DEP\nHubbardRealSpace\nExtendedHubbardReal1D\n\nMomentum space Hubbard models\n\nHubbardMom1D\nBoseHubbardMom1D2C\nHubbardMom1DEP\n\nHarmonic oscillator models\n\nHOCartesianContactInteractions\nHOCartesianEnergyConservedPerDim\nHOCartesianCentralImpurity\n\nOther\n\nFroehlichPolaron\nMatrixHamiltonian\nTranscorrelated1D\n\nWrappers\n\nGutzwillerSampling\nGuidingVectorSampling\nParitySymmetry\nTimeReversalSymmetry\nStoquastic\n\nObservables\n\nParticleNumberOperator\nG2RealCorrelator\nG2RealSpace\nG2MomCorrelator\nDensityMatrixDiagonal\nSingleParticleExcitation\nTwoParticleExcitation\nMomentum\nAxialAngularMomentumHO\n\nInterface for working with Hamiltonians\n\nAbstractHamiltonian: defined in the module Interfaces\n\n\n\n\n\n","category":"module"},{"location":"hamiltonians.html#Model-Hamiltonians","page":"Hamiltonians","title":"Model Hamiltonians","text":"","category":"section"},{"location":"hamiltonians.html","page":"Hamiltonians","title":"Hamiltonians","text":"Here is a list of fully implemented model Hamiltonians. There are several variants of the Hubbard model in real and momentum space, as well as some other models.","category":"page"},{"location":"hamiltonians.html#Real-space-Hubbard-models","page":"Hamiltonians","title":"Real space Hubbard models","text":"","category":"section"},{"location":"hamiltonians.html","page":"Hamiltonians","title":"Hamiltonians","text":"HubbardReal1D\nBoseHubbardReal1D2C\nHubbardReal1DEP\nHubbardRealSpace\nExtendedHubbardReal1D","category":"page"},{"location":"hamiltonians.html#Rimu.Hamiltonians.HubbardReal1D","page":"Hamiltonians","title":"Rimu.Hamiltonians.HubbardReal1D","text":"HubbardReal1D(address; u=1.0, t=1.0)\n\nImplements a one-dimensional Bose Hubbard chain in real space.\n\nhatH = -t sum_langle ijrangle a_i^ a_j + fracu2sum_i n_i (n_i-1)\n\nArguments\n\naddress: the starting address, defines number of particles and sites.\nu: the interaction parameter.\nt: the hopping strength.\n\nSee also\n\nHubbardMom1D\nExtendedHubbardReal1D\n\n\n\n\n\n","category":"type"},{"location":"hamiltonians.html#Rimu.Hamiltonians.BoseHubbardReal1D2C","page":"Hamiltonians","title":"Rimu.Hamiltonians.BoseHubbardReal1D2C","text":"BoseHubbardReal1D2C(address::BoseFS2C; ua=1.0, ub=1.0, ta=1.0, tb=1.0, v=1.0)\n\nImplements a two-component one-dimensional Bose Hubbard chain in real space.\n\nhatH = hatH_a + hatH_b + Vsum_i n_a_in_b_i\n\nArguments\n\naddress: the starting address, defines number of particles and sites.\nua: the on-site interaction parameter parameter for Hamiltonian a.\nub: the on-site interaction parameter parameter for Hamiltonian b.\nta: the hopping strength for Hamiltonian a.\ntb: the hopping strength for Hamiltonian b.\nv: the inter-species interaction parameter V.\n\nSee also\n\nHubbardReal1D\nBoseHubbardMom1D2C\n\n\n\n\n\n","category":"type"},{"location":"hamiltonians.html#Rimu.Hamiltonians.HubbardReal1DEP","page":"Hamiltonians","title":"Rimu.Hamiltonians.HubbardReal1DEP","text":"HubbardReal1DEP(address; u=1.0, t=1.0, v_ho=1.0)\n\nImplements a one-dimensional Bose Hubbard chain in real space with external potential.\n\nhatH = -t sum_langle ijrangle a_i^ a_j + sum_i ϵ_i n_i\n+ fracu2sum_i n_i (n_i-1)\n\nArguments\n\naddress: the starting address, defines number of particles and sites.\nu: the interaction parameter.\nt: the hopping strength.\nv_ho: strength of the external harmonic oscillator potential ϵ_i = v_ho i^2.\n\nThe first index is i=0 and the maximum of the potential occurs in the centre of the lattice.\n\nSee also\n\nHubbardReal1D\nHubbardMom1D\nExtendedHubbardReal1D\n\n\n\n\n\n","category":"type"},{"location":"hamiltonians.html#Rimu.Hamiltonians.HubbardRealSpace","page":"Hamiltonians","title":"Rimu.Hamiltonians.HubbardRealSpace","text":"HubbardRealSpace(address; geometry=PeriodicBoundaries(M,), t=ones(C), u=ones(C, C), v=zeros(C, D))\n\nHubbard model in real space. Supports single or multi-component Fock state addresses (with C components) and various (rectangular) lattice geometries in D dimensions.\n\n  hatH = -sum_langle ijrangleσ t_σ a^_iσ a_jσ +\n  frac12sum_iσ u_σσ n_iσ (n_iσ - 1) +\n  sum_iστu_στ n_iσ n_iτ\n\nIf v is nonzero then this calculates hatH + hatV by adding the harmonic trapping potential\n\n    hatV = sum_iσd v_σd x_di^2 n_iσ\n\nwhere x_di is the distance of site i from the centre of the trap along dimension d.\n\nAddress types\n\nBoseFS: Single-component Bose-Hubbard model.\nFermiFS: Single-component Fermi-Hubbard model.\nCompositeFS: For multi-component models.\n\nNote that a single component of fermions cannot interact with itself. A warning is produced if addressis incompatible with the interaction parameters u.\n\nGeometries\n\nImplemented CubicGrids for keyword geometry\n\nPeriodicBoundaries\nHardwallBoundaries\nLadderBoundaries\n\nDefault is geometry=PeriodicBoundaries(M,), i.e. a one-dimensional lattice with the number of sites M inferred from the number of modes in address.\n\nOther parameters\n\nt: the hopping strengths. Must be a vector of length C. The i-th element of the vector corresponds to the hopping strength of the i-th component.\nu: the on-site interaction parameters. Must be a symmetric matrix. u[i, j] corresponds to the interaction between the i-th and j-th component. u[i, i] corresponds to the interaction of a component with itself. Note that u[i,i] must be zero for fermionic components.\nv: the trap potential strengths. Must be a matrix of size C × D. v[i,j] is the strength of the trap for component i in the jth dimension.\n\n\n\n\n\n","category":"type"},{"location":"hamiltonians.html#Rimu.Hamiltonians.ExtendedHubbardReal1D","page":"Hamiltonians","title":"Rimu.Hamiltonians.ExtendedHubbardReal1D","text":"ExtendedHubbardReal1D(address; u=1.0, v=1.0, t=1.0, boundary_condition=:periodic)\n\nImplements the extended Hubbard model on a one-dimensional chain in real space. This Hamiltonian can be either real or complex, depending on the choice of boundary_condition.\n\nhatH = -t sum_langle ijrangle a_i^ a_j + fracu2sum_i n_i (n_i-1) +\nv sum_langle ijrangle n_i n_j\n\nArguments\n\naddress: the starting address.\nu: on-site interaction parameter\nv: the next-neighbor interaction\nt: the hopping strength\nboundary_condition The following values are supported:\n:periodic: usual period boundary condition realising a ring geometry.\n:hard_wall: hopping over the boundary is not allowed.\n:twisted: like :periodic but hopping over the boundary incurs an additional factor of -1.\nθ <: Number: like :periodic and :twisted but hopping over the boundary incurs a factor exp(iθ) for a hop to the right and exp(iθ) for a hop to the left. With this choice the Hamiltonian will have a complex eltype whereas otherwise the eltype is determined by the type of the parameters t, u, and v.\n\nSee also HubbardRealSpace.\n\n\n\n\n\n","category":"type"},{"location":"hamiltonians.html#Momentum-space-Hubbard-models","page":"Hamiltonians","title":"Momentum space Hubbard models","text":"","category":"section"},{"location":"hamiltonians.html","page":"Hamiltonians","title":"Hamiltonians","text":"HubbardMom1D\nBoseHubbardMom1D2C\nHubbardMom1DEP","category":"page"},{"location":"hamiltonians.html#Rimu.Hamiltonians.HubbardMom1D","page":"Hamiltonians","title":"Rimu.Hamiltonians.HubbardMom1D","text":"HubbardMom1D(address; u=1.0, t=1.0, dispersion=hubbard_dispersion)\n\nImplements a one-dimensional Bose Hubbard chain in momentum space.\n\nhatH =  sum_k ϵ_k n_k + fracuMsum_kpqr a^_r a^_q a_p a_k δ_r+qp+k\n\nArguments\n\naddress: the starting address, defines number of particles and sites.\nu: the interaction parameter.\nt: the hopping strength.\ndispersion: defines ϵ_k =dispersion(t, k)\nhubbard_dispersion: ϵ_k = -2(Re(t) cos(k) + Im(t) sin(k))\ncontinuum_dispersion: ϵ_k = Re(t) k^2 - 2 Im(t) k\n\nSee also\n\nHubbardReal1D\nExtendedHubbardReal1D\n\n\n\n\n\n","category":"type"},{"location":"hamiltonians.html#Rimu.Hamiltonians.BoseHubbardMom1D2C","page":"Hamiltonians","title":"Rimu.Hamiltonians.BoseHubbardMom1D2C","text":"BoseHubbardMom1D2C(address::BoseFS2C; ua=1.0, ub=1.0, ta=1.0, tb=1.0, v=1.0, kwargs...)\n\nImplements a one-dimensional Bose Hubbard chain in momentum space with a two-component Bose gas.\n\nhatH = hatH_a + hatH_b + fracVMsum_kpqr b^_r a^_q b_p a_k δ_r+qp+k\n\nArguments\n\naddress: the starting address.\nua: the u parameter for Hamiltonian a.\nub: the u parameter for Hamiltonian b.\nta: the t parameter for Hamiltonian a.\ntb: the t parameter for Hamiltonian b.\nv: the inter-species interaction parameter V.\n\nFurther keyword arguments are passed on to the constructor of HubbardMom1D.\n\nSee also\n\nBoseFS2C\nBoseHubbardReal1D2C\n\n\n\n\n\n","category":"type"},{"location":"hamiltonians.html#Rimu.Hamiltonians.HubbardMom1DEP","page":"Hamiltonians","title":"Rimu.Hamiltonians.HubbardMom1DEP","text":"HubbardMom1DEP(address; u=1.0, t=1.0, v_ho=1.0, dispersion=hubbard_dispersion)\n\nImplements a one-dimensional Bose Hubbard chain in momentum space with harmonic external potential.\n\nH = sum_k ϵ_k n_k + fracuMsum_kpqr a^_r a^_q a_p a_k δ_r+qp+k\n            + V_mathrmho \n\nwhere\n\nbeginaligned\nV_mathrmho  = frac1M sum_pq  mathrmDFTV_ext_p-q \n                    a^_p a_q \nV_mathrmext(x) = v_mathrmho x^2 \nendaligned\n\nis an external harmonic potential in momentum space, mathrmDFT_k is a discrete Fourier transform performed by fft()[k%M + 1], and M == num_modes(address).\n\nArguments\n\naddress: the starting address, defines number of particles and sites.\nu: the interaction parameter.\nt: the hopping strength.\ndispersion: defines ϵ_k =t*dispersion(k)\nhubbard_dispersion: ϵ_k = -2( Re(t) cos(k) + Im(t) sin(k))\ncontinuum_dispersion: ϵ_k = Re(t) k^2 - 2 Im(t) k\nv_ho: strength of the external harmonic oscillator potential v_mathrmho.\n\nSee also HubbardMom1D, HubbardReal1DEP, Transcorrelated1D, Hamiltonians.\n\n\n\n\n\n","category":"type"},{"location":"hamiltonians.html#Harmonic-oscillator-models","page":"Hamiltonians","title":"Harmonic oscillator models","text":"","category":"section"},{"location":"hamiltonians.html","page":"Hamiltonians","title":"Hamiltonians","text":"HOCartesianContactInteractions\nHOCartesianEnergyConservedPerDim\nHOCartesianCentralImpurity","category":"page"},{"location":"hamiltonians.html#Rimu.Hamiltonians.HOCartesianContactInteractions","page":"Hamiltonians","title":"Rimu.Hamiltonians.HOCartesianContactInteractions","text":"HOCartesianContactInteractions(addr; S, η, g = 1.0, interaction_only = false, block_by_level = true)\n\nImplements a bosonic harmonic oscillator in Cartesian basis with contact interactions\n\nhatH = sum_i epsilon_mathbfi n_mathbfi + fracg2sum_mathbfijkl\n    V_mathbfijkl a^_mathbfi a^_mathbfj a_mathbfk a_mathbfl\n\nFor a D-dimensional harmonic oscillator indices mathbfi mathbfj ldots are D-tuples. The energy scale is defined by the first dimension i.e. hbar omega_x so that single particle energies are\n\n    fracepsilon_mathbfihbar omega_x = (i_x + 12) + eta_y (i_y+12) + ldots\n\nThe factors eta_y ldots allow for anisotropic trapping geometries and are assumed to be greater than 1 so that omega_x is the smallest trapping frequency.\n\nBy default the offdiagonal elements due to the interactions are consistent with first-order degenerate perturbation theory\n\n    V_mathbfijkl = delta_epsilon_mathbfi + epsilon_mathbfj\n        ^epsilon_mathbfk + epsilon_mathbfl\n        prod_d in x yldots mathcalI(i_dj_dk_dl_d)\n\nwhere the delta function indicates that the total noninteracting energy is conserved meaning all states with the same noninteracting energy are connected by this interaction and the Hamiltonian blocks according to noninteracting energy levels. Setting block_by_level = false will disable this restriction and allow coupling between basis states of any noninteracting energy level, leading to many more offdiagonals and fewer but larger blocks (the blocks are still distinguished by parity of basis states). Alternatively, see HOCartesianEnergyConservedPerDim for a model with the stronger restriction that conserves energy separately per spatial dimension. The integral mathcalI(abcd) is of four one dimensional harmonic oscillator basis functions, implemented in four_oscillator_integral_general.\n\nArguments\n\naddr: the starting address, defines number of particles and total number of modes.\nS: Tuple of the number of levels in each dimension, including the groundstate. The   allowed couplings between states is defined by the aspect ratio of S .- 1. Defaults   to a 1D spectrum with number of levels matching modes of addr. Will be sorted to make   the first dimension the largest.\nη: Define a custom aspect ratio for the trapping potential strengths, instead of deriving   from S .- 1. This will only affect the single particle energy scale and not the   interactions. The values are always scaled relative to the first dimension, which sets   the energy scale of the system, hbaromega_x.\ng: the (isotropic) bare interaction parameter. The value of g is assumed   to be in trap units.\ninteraction_only: if set to true then the noninteracting single-particle terms are   ignored. Useful if only energy shifts due to interactions are required.\nblock_by_level: if set to false will allow the interactions to couple all states without   comparing their noninteracting energy.\n\nwarning: Warning\nnum_offdiagonals is a bad estimate for this Hamiltonian. Take care when building a matrix or using QMC methods. Use get_all_blocks first then pass option col_hint = block_size to BasisSetRep to safely build the matrix.\n\n\n\n\n\n","category":"type"},{"location":"hamiltonians.html#Rimu.Hamiltonians.HOCartesianEnergyConservedPerDim","page":"Hamiltonians","title":"Rimu.Hamiltonians.HOCartesianEnergyConservedPerDim","text":"HOCartesianEnergyConservedPerDim(addr; S, η, g = 1.0, interaction_only = false)\n\nImplements a bosonic harmonic oscillator in Cartesian basis with contact interactions\n\nhatH = sum_i ϵ_i n_i + fracg2sum_ijkl V_ijkl a^_i a^_j a_k a_l\n\nwith the additional restriction that the interactions only couple states with the same energy in each dimension separately. See HOCartesianContactInteractions for a model that conserves total energy.\n\nFor a D-dimensional harmonic oscillator indices mathbfi mathbfj ldots are D-tuples. The energy scale is defined by the first dimension i.e. hbar omega_x so that single particle energies are\n\n    fracepsilon_mathbfihbar omega_x = (i_x + 12) + eta_y (i_y+12) + ldots\n\nThe factors eta_y ldots allow for anisotropic trapping geometries and are assumed to be greater than 1 so that omega_x is the smallest trapping frequency.\n\nMatrix elements V_mathbfijkl are for a contact interaction calculated in this basis using first-order degenerate perturbation theory.\n\n    V_mathbfijkl = prod_d in x yldots mathcalI(i_dj_dk_dl_d)\n        delta_i_d + j_d^k_d + l_d\n\nwhere the delta-function indicates that the noninteracting energy is conserved along each dimension. The integral mathcalI(abcd) is of four one dimensional harmonic oscillator basis functions, see four_oscillator_integral_general, with the additional restriction that energy is conserved in each dimension.\n\nArguments\n\naddr: the starting address, defines number of particles and total number of modes.\nS: Tuple of the number of levels in each dimension, including the groundstate. Defaults   to a 1D spectrum with number of levels matching modes of addr. Will be sorted to   make the first dimension the largest.\nη: Define a custom aspect ratio for the trapping potential strengths, instead of deriving   from S .- 1. The values are always scaled relative to the first dimension, which sets   the energy scale of the system, hbaromega_x.\ng: the (isotropic) interparticle interaction parameter. The value of g is assumed   to be in trap units.\ninteraction_only: if set to true then the noninteracting single-particle terms are   ignored. Useful if only energy shifts due to interactions are required.\n\n\n\n\n\n","category":"type"},{"location":"hamiltonians.html#Rimu.Hamiltonians.HOCartesianCentralImpurity","page":"Hamiltonians","title":"Rimu.Hamiltonians.HOCartesianCentralImpurity","text":"HOCartesianCentralImpurity(addr; kwargs...)\n\nHamiltonian of non-interacting particles in an arbitrary harmonic trap with a delta-function potential at the centre, with strength g,\n\nhatH_mathrmrel = sum_mathbfi ϵ_mathbfi n_mathbfi\n    + gsum_mathbfij V_mathbfij a^_mathbfi a_mathbfj\n\nFor a D-dimensional harmonic oscillator indices mathbfi mathbfj ldots are D-tuples. The energy scale is defined by the first dimension i.e. hbar omega_x so that single particle energies are\n\n    fracepsilon_mathbfihbar omega_x = (i_x + 12) + eta_y (i_y+12) + ldots\n\nThe factors eta_y ldots allow for anisotropic trapping geometries and are assumed to be greater than 1 so that omega_x is the smallest trapping frequency.\n\nMatrix elements V_mathbfij are for a delta function potential calculated in this basis\n\n    V_mathbfij = prod_d in x yldots psi_i_d(0) psi_j_d(0)\n\nOnly even parity states feel this impurity, so all i_d are even. Note that the matrix representation of this Hamiltonian for a single particle is completely dense in the even-parity subspace.\n\nArguments\n\naddr: the starting address, defines number of particles and total number of modes.\nmax_nx = num_modes(addr) - 1: the maximum harmonic oscillator index number in the x-dimension.   Must be even. Index number for the harmonic oscillator groundstate is 0.\nηs = (): a tuple of aspect ratios for the remaining dimensions (η_y, ...). Should be empty   for a 1D trap or contain values greater than 1.0. The maximum index   in other dimensions will be the largest even number less than M/η_y.\nS = nothing: Instead of max_nx, manually set the number of levels in each dimension,   including the groundstate. Must be a Tuple of Ints.\ng = 1.0: the strength of the delta impurity in (x-dimension) trap units.\nimpurity_only=false: if set to true then the trap energy terms are ignored. Useful if   only energy shifts due to the impurity are required.\n\nwarning: Warning\nDue to use of `SpecialFunctions` with large arguments the matrix representation of\nthis Hamiltonian may not be strictly symmetric, but is approximately symmetric within\nmachine precision.\n\nSee also HOCartesianContactInteractions andHOCartesianEnergyConservedPerDim.\n\n\n\n\n\n","category":"type"},{"location":"hamiltonians.html#Other","page":"Hamiltonians","title":"Other","text":"","category":"section"},{"location":"hamiltonians.html","page":"Hamiltonians","title":"Hamiltonians","text":"MatrixHamiltonian\nTranscorrelated1D\nFroehlichPolaron","category":"page"},{"location":"hamiltonians.html#Rimu.Hamiltonians.MatrixHamiltonian","page":"Hamiltonians","title":"Rimu.Hamiltonians.MatrixHamiltonian","text":"MatrixHamiltonian(\n    mat::AbstractMatrix{T};\n    starting_address::Int = starting_address(mat)\n) <: AbstractHamiltonian{T}\n\nWrap an abstract matrix mat as an AbstractHamiltonian object. Works with stochastic methods of ProjectorMonteCarloProblem() and DVec. Optionally, a valid index can be provided as the starting_address.\n\nSpecialised methods are implemented for sparse matrices of type AbstractSparseMatrixCSC. One based indexing is required for the matrix mat.\n\n\n\n\n\n","category":"type"},{"location":"hamiltonians.html#Rimu.Hamiltonians.Transcorrelated1D","page":"Hamiltonians","title":"Rimu.Hamiltonians.Transcorrelated1D","text":"Transcorrelated1D(address; t=1.0, v=1.0, v_ho=0.0, cutoff=1, three_body_term=true)\n\nImplements a transcorrelated Hamiltonian for contact interactions in one dimensional momentum space from Jeszenski et al. (2018). Currently limited to two component fermionic addresses.\n\nbeginaligned\n\ntildeH = t sum_kσk^2 n_kσ \n    quad + sum_pqkσσ T_pqk a^_p-kσ a^_q+kσ a_qσ a_pσ \n    quad + sum_pqskkσσ Q_kka^_p-kσ a^_q+kσ a^_s+k-kσ\n                                       a_sσ a_qσ a_pσ \n    quad + V_mathrmho\nendaligned\n\nwhere\n\nbeginaligned\ntildeu(k) = begincases -frac2k^2 mathrmif  k  k_c\n0  mathrmotherwise\nendcases\n\n\nT_pqk = fracvM + frac2vMleftk^2tildeu(k)\n          - (p - q)ktildeu(k)right + frac2v^2tW(k)\nW(k) = frac1M^2sum_q (k - q)q tildeu(q)tildeu(k - q) \nQ_kl = -fracv^2t M^2k tildeu(k)ltildeu(l)\nendaligned\n\nArguments\n\naddress: The starting address, defines number of particles and sites.\nv: The interaction parameter.\nt: The kinetic energy prefactor.\nv_ho: Strength of the external harmonic oscillator potential V_mathrmho. See HubbardMom1DEP.\ncutoff controls k_c in equations above. Note: skipping generating off-diagonal elements below the cutoff is not implemented - zero-valued elements are returned instead.\nthree_body_term: If set to false, generating three body excitations is skipped. Note: when disabling three body terms, cutoff should be set to a higher value for best results.\n\nSee also\n\nHubbardMom1D\nHubbardMom1DEP\n\n\n\n\n\n","category":"type"},{"location":"hamiltonians.html#Rimu.Hamiltonians.FroehlichPolaron","page":"Hamiltonians","title":"Rimu.Hamiltonians.FroehlichPolaron","text":"FroehlichPolaron(address::OccupationNumberFS{M}; kwargs...) <: AbstractHamiltonian\n\nThe Froehlich polaron Hamiltonian for a 1D lattice with M momentum modes is given by\n\nH = (p_f - p)^2m + ωN - v Σₖ(aₖ^ + aₖ)\n\nwhere p is the total momentum, p_f = Σ_k k aₖ^ aₖ is the momentum operator for the bosons, and k part of the momentum lattice with separation 2πl. N is the number operator for the bosons.\n\nKeyword Arguments\n\np=0.0: the total momentum p.\nv=1.0: the coupling strength v.\nmass=1.0: the particle mass m.\nomega=1.0: the oscillation frequency of the phonons ω.\nl=1.0: the box size in real space l. Provides scale parameter of the momentum   lattice.\nmomentum_cutoff=nothing: the maximum boson momentum allowed for an address.\nmode_cutoff: the maximum number of bosons in each momentum mode. Defaults to the maximum   value supported by the address type OccupationNumberFS.\n\nExamples\n\njulia> fs = OccupationNumberFS(0,0,0)\nOccupationNumberFS{3, UInt8}(0, 0, 0)\n\njulia> ham = FroehlichPolaron(fs; v=0.5)\nFroehlichPolaron(fs\"|0 0 0⟩{8}\"; v=0.5, mass=1.0, omega=1.0, l=1.0, p=0.0, mode_cutoff=255)\n\njulia> dimension(ham)\n16777216\n\njulia> dimension(FroehlichPolaron(fs; v=0.5, mode_cutoff=5))\n216\n\nSee also OccupationNumberFS, dimension, AbstractHamiltonian.\n\n\n\n\n\n","category":"type"},{"location":"hamiltonians.html#Convenience-functions","page":"Hamiltonians","title":"Convenience functions","text":"","category":"section"},{"location":"hamiltonians.html","page":"Hamiltonians","title":"Hamiltonians","text":"rayleigh_quotient\nmomentum\nhubbard_dispersion\ncontinuum_dispersion\nshift_lattice\nshift_lattice_inv","category":"page"},{"location":"hamiltonians.html#Rimu.Hamiltonians.rayleigh_quotient","page":"Hamiltonians","title":"Rimu.Hamiltonians.rayleigh_quotient","text":"rayleigh_quotient(H, v)\n\nReturn the Rayleigh quotient of the linear operator H and the vector v:\n\nfrac v  H  v  vv \n\n\n\n\n\n","category":"function"},{"location":"hamiltonians.html#Rimu.Hamiltonians.momentum","page":"Hamiltonians","title":"Rimu.Hamiltonians.momentum","text":"momentum(ham::AbstractHamiltonian)\n\nMomentum as a linear operator in Fock space. Pass a Hamiltonian ham in order to convey information about the Fock basis. Returns an AbstractHamiltonian that represents the momentum operator.\n\nNote: momentum is currently only defined on HubbardMom1D.\n\nExample\n\njulia> add = BoseFS((1, 0, 2, 1, 2, 1, 1, 3));\n\n\njulia> ham = HubbardMom1D(add; u = 2.0, t = 1.0);\n\n\njulia> mom = momentum(ham);\n\n\njulia> diagonal_element(mom, add) # calculate the momentum of a single configuration\n-1.5707963267948966\n\njulia> v = DVec(add => 10; capacity=1000);\n\n\njulia> rayleigh_quotient(mom, v) # momentum expectation value for state vector `v`\n-1.5707963267948966\n\nPart of the AbstractHamiltonian interface.\n\n\n\n\n\n","category":"function"},{"location":"hamiltonians.html#Rimu.Hamiltonians.hubbard_dispersion","page":"Hamiltonians","title":"Rimu.Hamiltonians.hubbard_dispersion","text":"hubbard_dispersion(t, k)\n\nDispersion relation for HubbardMom1D. Returns -2(Re(t) cos(k) + Im(t) sin(k)).\n\nSee also continuum_dispersion.\n\n\n\n\n\n","category":"function"},{"location":"hamiltonians.html#Rimu.Hamiltonians.continuum_dispersion","page":"Hamiltonians","title":"Rimu.Hamiltonians.continuum_dispersion","text":"continuum_dispersion(t, k)\n\nDispersion relation for HubbardMom1D. Returns Re(t) k^2 - 2 Im(t) k.\n\nSee also hubbard_dispersion.\n\n\n\n\n\n","category":"function"},{"location":"hamiltonians.html#Rimu.Hamiltonians.shift_lattice","page":"Hamiltonians","title":"Rimu.Hamiltonians.shift_lattice","text":"shift_lattice(is)\n\nCircular shift contiguous indices is in interval [M÷2, M÷2) such that set starts with 0, where M=length(is).\n\nInverse operation: shift_lattice_inv. Used in HubbardReal1DEP and HubbardMom1DEP\n\n\n\n\n\n","category":"function"},{"location":"hamiltonians.html#Rimu.Hamiltonians.shift_lattice_inv","page":"Hamiltonians","title":"Rimu.Hamiltonians.shift_lattice_inv","text":"shift_lattice_inv(js)\n\nCircular shift indices starting with 0 into a contiguous set in interval [M÷2, M÷2), where M=length(js).\n\nInverse operation of shift_lattice. Used in HubbardReal1DEP and HubbardMom1DEP\n\n\n\n\n\n","category":"function"},{"location":"hamiltonians.html#Hamiltonian-wrappers","page":"Hamiltonians","title":"Hamiltonian wrappers","text":"","category":"section"},{"location":"hamiltonians.html","page":"Hamiltonians","title":"Hamiltonians","text":"The following Hamiltonians are constructed from an existing Hamiltonian instance and change its behaviour:","category":"page"},{"location":"hamiltonians.html","page":"Hamiltonians","title":"Hamiltonians","text":"GutzwillerSampling\nGuidingVectorSampling\nParitySymmetry\nTimeReversalSymmetry\nStoquastic","category":"page"},{"location":"hamiltonians.html#Rimu.Hamiltonians.GutzwillerSampling","page":"Hamiltonians","title":"Rimu.Hamiltonians.GutzwillerSampling","text":"GutzwillerSampling(::AbstractHamiltonian; g)\n\nWrapper over any AbstractHamiltonian that implements Gutzwiller sampling. In this importance sampling scheme the Hamiltonian is modified as follows\n\ntildeH_ij = H_ij e^-g(H_ii - H_jj) \n\nThis way off-diagonal spawns to higher-energy configurations are discouraged and spawns to lower-energy configurations encouraged for positive g.\n\nConstructor\n\nGutzwillerSampling(::AbstractHamiltonian, g)\nGutzwillerSampling(::AbstractHamiltonian; g)\n\nAfter construction, we can access the underlying Hamiltonian with G.hamiltonian and the g parameter with G.g.\n\nExample\n\njulia> H = HubbardMom1D(BoseFS(1,1,1); u=6.0, t=1.0)\nHubbardMom1D(fs\"|1 1 1⟩\"; u=6.0, t=1.0)\n\njulia> G = GutzwillerSampling(H, g=0.3)\nGutzwillerSampling(HubbardMom1D(fs\"|1 1 1⟩\"; u=6.0, t=1.0); g=0.3)\n\njulia> get_offdiagonal(H, BoseFS(2, 1, 0), 1)\n(BoseFS{3,3}(1, 0, 2), 2.0)\n\njulia> get_offdiagonal(G, BoseFS(2, 1, 0), 1)\n(BoseFS{3,3}(1, 0, 2), 0.8131393194811987)\n\nObservables\n\nTo calculate observables, pass the transformed Hamiltonian G to AllOverlaps with keyword argument transform=G.\n\n\n\n\n\n","category":"type"},{"location":"hamiltonians.html#Rimu.Hamiltonians.GuidingVectorSampling","page":"Hamiltonians","title":"Rimu.Hamiltonians.GuidingVectorSampling","text":"GuidingVectorSampling\n\nWrapper over any AbstractHamiltonian that implements guided vector a.k.a. guided wave function sampling. In this importance sampling scheme the Hamiltonian is modified as follows.\n\ntildeH_ij = v_i H_ij v_j^-1\n\nand where v is the guiding vector. v_i and v_j are also thresholded to avoid dividing by zero (see below).\n\nConstructors\n\nGuidingVectorSampling(::AbstractHamiltonian, vector, eps)\nGuidingVectorSampling(::AbstractHamiltonian; vector, eps)\n\neps is a thresholding parameter used to avoid dividing by zero; all values below eps are set to eps. It is recommended that eps is in the same value range as the guiding vector. The default value is set to eps=norm(v, Inf) * 1e-2\n\nAfter construction, we can access the underlying hamiltonian with G.hamiltonian, the eps parameter with G.eps, and the guiding vector with G.vector.\n\nExample\n\njulia> H = HubbardReal1D(BoseFS(1,1,1); u=6.0, t=1.0);\n\njulia> v = DVec(starting_address(H) => 10; capacity=1);\n\njulia> G = GuidingVectorSampling(H, v, 0.1);\n\njulia> get_offdiagonal(H, starting_address(H), 4)\n(BoseFS{3,3}(2, 0, 1), -1.4142135623730951)\n\njulia> get_offdiagonal(G, starting_address(G), 4)\n(BoseFS{3,3}(2, 0, 1), -0.014142135623730952)\n\nObservables\n\nTo calculate observables, pass the transformed Hamiltonian G to AllOverlaps with keyword argument transform=G.\n\n\n\n\n\n","category":"type"},{"location":"hamiltonians.html#Rimu.Hamiltonians.ParitySymmetry","page":"Hamiltonians","title":"Rimu.Hamiltonians.ParitySymmetry","text":"ParitySymmetry(ham::AbstractHamiltonian{T}; even=true) <: AbstractHamiltonian{T}\n\nImpose even or odd parity on all states and the Hamiltonian ham as controlled by the keyword argument even. Parity symmetry of the Hamiltonian is assumed. For some Hamiltonians, ParitySymmetry reduces the size of the Hilbert space by half.\n\nParitySymmetry performs a unitary transformation, leaving the eigenvalues unchanged and preserving the LOStructure. This is achieved by changing the basis set to states with defined parity. Effectively, a non-even address α is replaced by frac12(α  α) for even and odd parity, respectively, where ᾱ == reverse(α).\n\nNotes\n\nThis modifier currently only works on starting_addresss with an odd number of modes.\nFor odd parity, the starting_address of the underlying Hamiltonian cannot be symmetric.\nIf parity is not a symmetry of the Hamiltonian ham then the result is undefined.\nParitySymmetry works by modifying the offdiagonals iterator.\n\njulia> ham = HubbardReal1D(BoseFS(0,2,1))\nHubbardReal1D(fs\"|0 2 1⟩\"; u=1.0, t=1.0)\n\njulia> size(Matrix(ham))\n(10, 10)\n\njulia> size(Matrix(ParitySymmetry(ham)))\n(6, 6)\n\njulia> size(Matrix(ParitySymmetry(ham; odd=true)))\n(4, 4)\n\njulia> eigvals(Matrix(ham))[1] ≈ eigvals(Matrix(ParitySymmetry(ham)))[1]\ntrue\n\nSee also TimeReversalSymmetry.\n\n\n\n\n\n","category":"type"},{"location":"hamiltonians.html#Rimu.Hamiltonians.TimeReversalSymmetry","page":"Hamiltonians","title":"Rimu.Hamiltonians.TimeReversalSymmetry","text":"TimeReversalSymmetry(ham::AbstractHamiltonian{T}; even=true) <: AbstractHamiltonian{T}\n\nImpose even or odd time reversal on all states and the Hamiltonian ham as controlled by the keyword argument even. If time reversal is a symmetry of the Hamiltonian it will block (reducing Hilbert space dimension) preserving the eigenvalues and LOStructure.\n\nNotes\n\nThis modifier only works two component starting_addresses.\nFor odd time reversal symmetry, the starting_address of the underlying Hamiltonian must not be symmetric.\nIf time reversal is not a symmetry of the Hamiltonian ham then the result is undefined.\nTimeReversalSymmetry works by modifying the offdiagonals iterator.\n\njulia> ham = HubbardMom1D(FermiFS2C((1,0,1),(0,1,1)));\n\njulia> size(Matrix(ham))\n(3, 3)\n\njulia> size(Matrix(TimeReversalSymmetry(ham)))\n(2, 2)\n\njulia> size(Matrix(TimeReversalSymmetry(ham, even=false)))\n(1, 1)\n\njulia> eigvals(Matrix(TimeReversalSymmetry(ham)))[1] ≈ eigvals(Matrix(ham))[1]\ntrue\n\nSee also ParitySymmetry.\n\n\n\n\n\n","category":"type"},{"location":"hamiltonians.html#Rimu.Hamiltonians.Stoquastic","page":"Hamiltonians","title":"Rimu.Hamiltonians.Stoquastic","text":"Stoquastic(ham <: AbstractHamiltonian) <: AbstractHamiltonian\n\nA wrapper for an AbstractHamiltonian that replaces all off-diagonal matrix elements v by -abs(v), thus making the new Hamiltonian stoquastic.\n\nA stoquastic Hamiltonian does not have a Monte Carlo sign problem. For a hermitian ham the smallest eigenvalue of Stoquastic(ham) is ≤ the smallest eigenvalue of ham.\n\n\n\n\n\n","category":"type"},{"location":"hamiltonians.html#Observables","page":"Hamiltonians","title":"Observables","text":"","category":"section"},{"location":"hamiltonians.html","page":"Hamiltonians","title":"Hamiltonians","text":"Observables are AbstractOperators that represent a physical observable. Their expectation values can be sampled during a ProjectorMonteCarloProblem simulation by passing them into a suitable ReplicaStrategy, e.g.  AllOverlaps.  AbstractOperator is a supertype of  AbstractHamiltonian and has less stringent  requirements. Some observables are also AbstractHamiltonians.","category":"page"},{"location":"hamiltonians.html","page":"Hamiltonians","title":"Hamiltonians","text":"AbstractOperator\nParticleNumberOperator\nG2RealCorrelator\nG2RealSpace\nG2MomCorrelator\nSuperfluidCorrelator\nStringCorrelator\nDensityMatrixDiagonal\nSingleParticleExcitation\nTwoParticleExcitation\nMomentum\nAxialAngularMomentumHO","category":"page"},{"location":"hamiltonians.html#Rimu.Interfaces.AbstractOperator","page":"Hamiltonians","title":"Rimu.Interfaces.AbstractOperator","text":"AbstractOperator{T}\n\nSupertype that provides an interface for linear operators over a linear space with elements of type T (returned by eltype) and general (custom type) indices called 'addresses'.\n\nAbstractOperator instances operate on vectors of type AbstractDVec from the module DictVectors and work well with addresses of type AbstractFockAddress from the module BitStringAddresses.\n\nThe defining feature of an AbstractOperator is that it can be applied to a vector with mul!(y, op, x) and that three-way dot products can be calculated with dot(x, op, y).\n\nThe AbstractOperator type is useful for defining operators that are not necessarily Hamiltonians, but that can be used in the context of a ProjectorMonteCarloProblem as observable operators in a ReplicaStrategy, e.g. for defining correlation functions. In contrast to AbstractHamiltonians, AbstractOperators do not need to have a starting_address. Moreover, the eltype of an AbstractOperator can be a vector value.\n\nFor concrete implementations see Hamiltonians. In order to implement a Hamiltonian for use in ProjectorMonteCarloProblem or ExactDiagonalizationProblem use the type AbstractHamiltonian instead, which is a subtype of AbstractOperator.\n\nInterface\n\nBasic interface methods to implement:\n\nallows_address_type(op, type)\ndiagonal_element(op, address)\nnum_offdiagonals(op, address) and\nget_offdiagonal(op, address, chosen) or offdiagonals\n\nOptional additional methods to implement:\n\nVectorInterface.scalartype(op): defaults to eltype(eltype(op))\nLOStructure(::Type{typeof(op)}): defaults to AdjointUnknown\ndimension(op, addr): defaults to dimension of address space\n\nIn order to calculate observables efficiently, it may make sense to implement custom methods for Interfaces.dot_from_right(x, op, y) and LinearAlgebra.mul!(y, op, x).\n\nSee also AbstractHamiltonian, Interfaces.\n\n\n\n\n\n","category":"type"},{"location":"hamiltonians.html#Rimu.Hamiltonians.ParticleNumberOperator","page":"Hamiltonians","title":"Rimu.Hamiltonians.ParticleNumberOperator","text":"ParticleNumberOperator() <: AbstractOperator{Float64}\n\nThe number operator in Fock space. This operator is diagonal in the Fock basis and returns the number of particles in the Fock state. It works with any address type that is a subtype of AbstractFockAddress.\n\njulia> p = ExactDiagonalizationProblem(FroehlichPolaron(fs\"|0 0⟩{}\"; mode_cutoff=5, v=3));\n\njulia> gs = solve(p).vectors[1]; # normalised ground state vector\n\njulia> dot(gs, ParticleNumberOperator(), gs) # particle number expectation value\n2.8823297252925917\n\nSee also AbstractHamiltonian.\n\n\n\n\n\n","category":"type"},{"location":"hamiltonians.html#Rimu.Hamiltonians.G2RealCorrelator","page":"Hamiltonians","title":"Rimu.Hamiltonians.G2RealCorrelator","text":"G2RealCorrelator(d::Int) <: AbstractOperator{Float64}\n\nTwo-body operator for density-density correlation between sites separated by d with 0 ≤ d < M.\n\n    hatG^(2)(d) = frac1M sum_i^M hatn_i (hatn_i+d - delta_0d)\n\nAssumes a one-dimensional lattice with periodic boundary conditions where\n\n    hatG^(2)(-M2 leq d  0) = hatG^(2)(d)\n\n    hatG^(2)(M2  d  M) = hatG^(2)(M - d)\n\nand normalisation\n\n    sum_d=0^M-1 langle hatG^(2)(d) rangle = fracN (N-1)M\n\nFor multicomponent basis, calculates correlations between all particles equally, equivalent to stacking all components into a single Fock state.\n\nArguments\n\nd::Integer: distance between sites.\n\nSee also\n\nHubbardReal1D\nG2RealSpace\nG2MomCorrelator\nAbstractOperator\nAllOverlaps\n\n\n\n\n\n","category":"type"},{"location":"hamiltonians.html#Rimu.Hamiltonians.G2RealSpace","page":"Hamiltonians","title":"Rimu.Hamiltonians.G2RealSpace","text":"G2RealSpace(geometry::CubicGrid, σ=1, τ=1; sum_components=false) <: AbstractOperator{SArray}\n\nTwo-body operator for density-density correlation for all Displacements d in the specified geometry.\n\n    hatG^(2)_στ(d) = frac1M _i n_σi (n_τi+d - δ_0dδ_στ)\n\nFor multicomponent addresses, σ and τ control the components involved. Alternatively, sum_components can be set to true, which treats all particles as belonging to the same component.\n\nExamples\n\njulia> geom = CubicGrid(2, 2);\n\njulia> g2 = G2RealSpace(geom)\nG2RealSpace(CubicGrid((2, 2), (true, true)), 1,1)\n\njulia> diagonal_element(g2, BoseFS(2,0,1,1))\n2×2 StaticArraysCore.SMatrix{2, 2, Float64, 4} with indices SOneTo(2)×SOneTo(2):\n 0.5  1.0\n 0.5  1.0\n\njulia> g2_cross = G2RealSpace(geom, 1, 2)\nG2RealSpace(CubicGrid((2, 2), (true, true)), 1,2)\n\njulia> g2_sum = G2RealSpace(geom, sum_components=true)\nG2RealSpace(CubicGrid((2, 2), (true, true)); sum_components=true)\n\njulia> diagonal_element(g2, fs\"|⇅⋅↓↑⟩\")\n2×2 StaticArraysCore.SMatrix{2, 2, Float64, 4} with indices SOneTo(2)×SOneTo(2):\n 0.0  0.0\n 0.0  0.5\n\njulia> diagonal_element(g2_cross, fs\"|⇅⋅↓↑⟩\")\n2×2 StaticArraysCore.SMatrix{2, 2, Float64, 4} with indices SOneTo(2)×SOneTo(2):\n 0.25  0.25\n 0.25  0.25\n\njulia> diagonal_element(g2_sum, fs\"|⇅⋅↓↑⟩\")\n2×2 StaticArraysCore.SMatrix{2, 2, Float64, 4} with indices SOneTo(2)×SOneTo(2):\n 0.5  1.0\n 0.5  1.0\n\nSee also\n\nCubicGrid\nHubbardRealSpace\nG2RealCorrelator\nG2MomCorrelator\nAbstractOperator\nAllOverlaps\n\n\n\n\n\n","category":"type"},{"location":"hamiltonians.html#Rimu.Hamiltonians.G2MomCorrelator","page":"Hamiltonians","title":"Rimu.Hamiltonians.G2MomCorrelator","text":"G2MomCorrelator(d::Int,c=:cross) <: AbstractOperator{ComplexF64}\n\nTwo-body correlation operator representing the density-density correlation at distance d of a two component system in a momentum-space Fock-state basis. It returns a Complex value.\n\nCorrelation across two components:\n\nhatG^(2)(d) = frac1Msum_spqr=1^M e^-id(p-q)2πM a^_s b^_p  b_q a_r δ_s+pq+r\n\nCorrelation within a single component:\n\nhatG^(2)(d) = frac1Msum_spqr=1^M e^-id(p-q)2πM a^_s a^_p  a_q a_r δ_s+pq+r\n\nThe diagonal element, where (p-q)=0, is\n\nfrac1Msum_kp=1^M a^_k b^_p  b_p a_k \n\nArguments\n\nd::Integer: the distance between two particles.\nc: possible instructions: :cross: default instruction, computing correlation between particles across two components; :first: computing correlation between particles within the first component; :second: computing correlation between particles within the second component. These are the only defined instructions, using anything else will produce errors.\n\nTo use on a one-component system\n\nFor a system with only one component, e.g. with BoseFS, the second argument c is irrelevant and can be any of the above instructions, one could simply skip this argument and let it be the default value.\n\nSee also\n\nBoseHubbardMom1D2C\nBoseFS2C\nG2RealCorrelator\nG2RealSpace\nAbstractOperator\nAllOverlaps\n\n\n\n\n\n","category":"type"},{"location":"hamiltonians.html#Rimu.Hamiltonians.SuperfluidCorrelator","page":"Hamiltonians","title":"Rimu.Hamiltonians.SuperfluidCorrelator","text":"SuperfluidCorrelator(d::Int) <: AbstractOperator{Float64}\n\nOperator for extracting superfluid correlation between sites separated by a distance d with 0 ≤ d < M:\n\n    hatC_textSF(d) = frac1M sum_i^M a_i^dagger a_i + d\n\nAssumes a one-dimensional lattice with M sites and periodic boundary conditions. M is also the number of modes in the Fock state address.\n\nUsage\n\nSuperfluid correlations can be extracted from a Monte Carlo calculation by wrapping SuperfluidCorrelator with AllOverlaps and passing into ProjectorMonteCarloProblem with the replica keyword argument. For an example with a similar use of G2RealCorrelator see G2 Correlator Example.\n\nSee also HubbardReal1D, G2RealCorrelator, AbstractOperator, and AllOverlaps.\n\n\n\n\n\n","category":"type"},{"location":"hamiltonians.html#Rimu.Hamiltonians.StringCorrelator","page":"Hamiltonians","title":"Rimu.Hamiltonians.StringCorrelator","text":"StringCorrelator(d::Int; address=nothing, type=nothing) <: AbstractOperator{T}\n\nOperator for extracting string correlation between lattice sites on a one-dimensional Hubbard lattice separated by a distance d with 0 ≤ d < M\n\n    C_textstring(d) = frac1M sum_j^M δ n_j\n                                         (e^i π sum_j  k  j + d δ n_k) δ n_j+d\n\nHere, δ n_j = n_j - n is the boson number deviation from the mean filling number and n = NM is the mean filling number of lattice sites with N particles and M lattice sites (or modes).\n\nAssumes a one-dimensional lattice with periodic boundary conditions. For usage see SuperfluidCorrelator and AllOverlaps.\n\nThe default element type T is ComplexF64. This can be overridden with the type keyword argument. If an address is provided, then T is calculated from the address type. It is set to ComplexF64 for non-integer filling numbers, and to Float64 for integer filling numbers or if d==0.\n\nSee also HubbardReal1D, G2RealCorrelator, SuperfluidCorrelator, AbstractOperator, and AllOverlaps.\n\n\n\n\n\n","category":"type"},{"location":"hamiltonians.html#Rimu.Hamiltonians.DensityMatrixDiagonal","page":"Hamiltonians","title":"Rimu.Hamiltonians.DensityMatrixDiagonal","text":"DensityMatrixDiagonal(mode; component=0) <: AbstractHamiltonian\n\nRepresent a diagonal element of the single-particle density:\n\nhatn_iσ = hat a^_iσ hat a_iσ\n\nwhere i is the mode and σ is the component. If component is zero, the sum over all components is computed.\n\nSee also\n\nsingle_particle_density\nSingleParticleDensity\nSingleParticleExcitation\n\n\n\n\n\n","category":"type"},{"location":"hamiltonians.html#Rimu.Hamiltonians.SingleParticleExcitation","page":"Hamiltonians","title":"Rimu.Hamiltonians.SingleParticleExcitation","text":"SingleParticleExcitation(i, j) <: AbstractHamiltonian\n\nRepresent the ij element of the single-particle reduced density matrix:\n\nρ^(1)_ij = a^_i a_j\n\nwhere i <: Int and j <: Int specify the mode numbers.\n\nSee also\n\nsingle_particle_density\nSingleParticleDensity\nTwoParticleExcitation\n\n\n\n\n\n","category":"type"},{"location":"hamiltonians.html#Rimu.Hamiltonians.TwoParticleExcitation","page":"Hamiltonians","title":"Rimu.Hamiltonians.TwoParticleExcitation","text":"TwoParticleExcitation(i, j, k, l) <: AbstractHamiltonian\n\nRepresent the ij kl element of the two-particle reduced density matrix:\n\nρ^(2)_ij kl =  a^_i a^_j a_l a_k\n\nwhere i, j, k, and l (all <: Int) specify the mode numbers.\n\nSee also\n\nsingle_particle_density\nSingleParticleDensity\nSingleParticleExcitation\n\n\n\n\n\n","category":"type"},{"location":"hamiltonians.html#Rimu.Hamiltonians.Momentum","page":"Hamiltonians","title":"Rimu.Hamiltonians.Momentum","text":"Momentum(component=0; fold=true) <: AbstractHamiltonian\n\nThe momentum operator P.\n\nThe component argument controls which component of the address is taken into consideration. A value of 0 sums the contributions of all components. If fold is true, the momentum is folded into the Brillouin zone.\n\njulia> address = BoseFS((1, 0, 2, 1, 2, 1, 1, 3))\nBoseFS{11,8}(1, 0, 2, 1, 2, 1, 1, 3)\n\njulia> v = DVec(address => 10);\n\njulia> rayleigh_quotient(Momentum(), DVec(address => 1))\n-2.0\n\njulia> rayleigh_quotient(Momentum(fold=false), DVec(address => 1))\n14.0\n\n\n\n\n\n","category":"type"},{"location":"hamiltonians.html#Rimu.Hamiltonians.AxialAngularMomentumHO","page":"Hamiltonians","title":"Rimu.Hamiltonians.AxialAngularMomentumHO","text":"AxialAngularMomentumHO(S; z_dim = 3, addr = BoseFS(prod(S))) <: AbstractHamiltonian\n\nAngular momentum operator for application to Cartesian harmonic oscillator basis, see HOCartesianContactInteractions or HOCartesianEnergyConservedPerDim. Represents the projection of angular momentum onto z-axis:\n\nhatL_z = i hbar sum_j=1^N left( b_x b_y^dag - b_y b_x^dag right)\n\nwhere b_x^dag and b_x are raising and lowering (ladder) operators for  a harmonic oscillator in the x dimension, and simlarly for y.\n\nThis is implemented for an N particle Fock space with creation and annihilation operators as\n\nfrac1hbar hatL_z = i sum_n_x=1^M_x sum_n_y=1^M_y\n    left( a_n_x-1n_y+1^dag - a_n_x+1n_y-1^dag right) a_n_x n_y\n\nin units of hbar.\n\nArgument S is a tuple defining the range of Cartesian modes in each dimension and their mapping to Fock space modes in a SingleComponentFockAddress. If S indicates a 3D system the z dimension can be changed by setting z_dim; S should be be isotropic in the remaining x-y plane, i.e. must have S[x_dim] == S[y_dim]. The starting address addr only needs to satisfy num_modes(addr) == prod(S).\n\nExample\n\nCalculate the overlap of two Fock addresses interpreted as harmonic oscillator states in a 2D Cartesian basis\n\njulia> S = (2,2)\n(2, 2)\n\njulia> Lz = AxialAngularMomentumHO(S)\nAxialAngularMomentumHO((2, 2); z_dim = 3, addr = BoseFS{0,4}(0, 0, 0, 0))\n\njulia> v = DVec(BoseFS(prod(S), 2 => 1) => 1.0)\nDVec{BoseFS{1, 4, BitString{4, 1, UInt8}},Float64} with 1 entry, style = IsDeterministic{Float64}()\n  fs\"|0 1 0 0⟩\" => 1.0\n\njulia> w = DVec(BoseFS(prod(S), 3 => 1) => 1.0)\nDVec{BoseFS{1, 4, BitString{4, 1, UInt8}},Float64} with 1 entry, style = IsDeterministic{Float64}()\n  fs\"|0 0 1 0⟩\" => 1.0\n\njulia> dot(w, Lz, v)\n0.0 + 1.0im\n\n\n\n\n\n","category":"type"},{"location":"hamiltonians.html#Hamiltonians-interface","page":"Hamiltonians","title":"Hamiltonians interface","text":"","category":"section"},{"location":"hamiltonians.html","page":"Hamiltonians","title":"Hamiltonians","text":"Behind the implementation of a particular model is a more abstract interface for defining Hamiltonians. If you want to define a new model you should make use of this interface. The most general form of a model Hamiltonian should subtype to AbstractHamiltonian and implement the relevant methods.","category":"page"},{"location":"hamiltonians.html","page":"Hamiltonians","title":"Hamiltonians","text":"AbstractHamiltonian\noffdiagonals\ndiagonal_element\nstarting_address","category":"page"},{"location":"hamiltonians.html#Rimu.Interfaces.AbstractHamiltonian","page":"Hamiltonians","title":"Rimu.Interfaces.AbstractHamiltonian","text":"AbstractHamiltonian{T} <: AbstractOperator{T}\n\nSupertype that provides an interface for linear operators over a linear space with scalar type T that are suitable for FCIQMC (with ProjectorMonteCarloProblem). Indexing is done with addresses (typically not integers) from an address space that may be large (and will not need to be completely generated).\n\nAbstractHamiltonian instances operate on vectors of type AbstractDVec from the module DictVectors and work well with addresses of type AbstractFockAddress from the module BitStringAddresses. The type works well with the external package KrylovKit.jl.\n\nFor available implementations see Hamiltonians.\n\nInterface\n\nBasic interface methods to implement:\n\nstarting_address(::AbstractHamiltonian)\ndiagonal_element(::AbstractHamiltonian, address)\nnum_offdiagonals(::AbstractHamiltonian, address)\nget_offdiagonal(::AbstractHamiltonian, address, chosen::Integer) (optional, see   below)\n\nOptional additional methods to implement:\n\nLOStructure(::Type{typeof(lo)}): defaults to AdjointUnknown\ndimension(::AbstractHamiltonian, addr): defaults to dimension of address space\nallows_address_type(h::AbstractHamiltonian, type): defaults to type :< typeof(starting_address(h))\nmomentum(::AbstractHamiltonian): no default\n\nProvides the following functions and methods:\n\noffdiagonals: iterator over reachable off-diagonal matrix elements\nrandom_offdiagonal: function to generate random off-diagonal matrix element\n*(H, v): deterministic matrix-vector multiply (allocating)\nH(v): equivalent to H * v.\nmul!(w, H, v): mutating matrix-vector multiply.\ndot(x, H, v): compute x⋅(H*v) minimizing allocations.\nH[address1, address2]: indexing with getindex() - mostly for testing purposes (slow!)\nBasisSetRepresentation: construct a basis set repesentation\nsparse, Matrix: construct a (sparse) matrix representation\n\nAlternatively to the above, offdiagonals can be implemented instead of get_offdiagonal. Sometimes this can be done efficiently. In this case num_offdiagonals should provide an upper bound on the number of elements obtained when iterating offdiagonals.\n\nSee also Hamiltonians, Interfaces, AbstractOperator.\n\n\n\n\n\n","category":"type"},{"location":"hamiltonians.html#Rimu.Interfaces.offdiagonals","page":"Hamiltonians","title":"Rimu.Interfaces.offdiagonals","text":"offdiagonals(h::AbstractHamiltonian, address)\n\nReturn an iterator over nonzero off-diagonal matrix elements of h in the same column as address. Will iterate over pairs (newaddress, matrixelement).\n\nExample\n\njulia> address = BoseFS(3,2,1);\n\n\njulia> H = HubbardReal1D(address);\n\n\njulia> h = offdiagonals(H, address)\n6-element Rimu.Hamiltonians.Offdiagonals{BoseFS{6, 3, BitString{8, 1, UInt8}}, Float64, HubbardReal1D{Float64, BoseFS{6, 3, BitString{8, 1, UInt8}}, 1.0, 1.0}}:\n (fs\"|2 3 1⟩\", -3.0)\n (fs\"|2 2 2⟩\", -2.449489742783178)\n (fs\"|3 1 2⟩\", -2.0)\n (fs\"|4 1 1⟩\", -2.8284271247461903)\n (fs\"|4 2 0⟩\", -2.0)\n (fs\"|3 3 0⟩\", -1.7320508075688772)\n\nPart of the AbstractHamiltonian interface.\n\nExtemded help\n\noffdiagonals return and iterator of type <:AbstractOffdiagonals. It defaults to returning Offdiagonals(h, a)\n\nSee also Offdiagonals, AbstractOffdiagonals.\n\n\n\n\n\n","category":"function"},{"location":"hamiltonians.html#Rimu.Interfaces.diagonal_element","page":"Hamiltonians","title":"Rimu.Interfaces.diagonal_element","text":"diagonal_element(ham, address)\n\nCompute the diagonal matrix element of the linear operator ham at address address.\n\nExample\n\njulia> address = BoseFS((3, 2, 1));\n\n\njulia> H = HubbardMom1D(address);\n\n\njulia> diagonal_element(H, address)\n8.666666666666664\n\nPart of the AbstractHamiltonian interface.\n\n\n\n\n\n","category":"function"},{"location":"hamiltonians.html#Rimu.Interfaces.starting_address","page":"Hamiltonians","title":"Rimu.Interfaces.starting_address","text":"starting_address(h)\n\nReturn the starting address for Hamiltonian h. When called on an AbstractMatrix, starting_address returns the index of the lowest diagonal element.\n\nExample\n\njulia> address = BoseFS((3, 2, 1));\n\n\njulia> H = HubbardMom1D(address);\n\n\njulia> address == starting_address(H)\ntrue\n\nPart of the AbstractHamiltonian interface.\n\n\n\n\n\n","category":"function"},{"location":"hamiltonians.html","page":"Hamiltonians","title":"Hamiltonians","text":"The following functions may be implemented instead of offdiagonals.","category":"page"},{"location":"hamiltonians.html","page":"Hamiltonians","title":"Hamiltonians","text":"num_offdiagonals\nget_offdiagonal","category":"page"},{"location":"hamiltonians.html#Rimu.Interfaces.num_offdiagonals","page":"Hamiltonians","title":"Rimu.Interfaces.num_offdiagonals","text":"num_offdiagonals(ham, address)\n\nCompute the number of number of reachable configurations from address address.\n\nExample\n\njulia> address = BoseFS((3, 2, 1));\n\n\njulia> H = HubbardMom1D(address);\n\n\njulia> num_offdiagonals(H, address)\n10\n\nPart of the AbstractHamiltonian interface.\n\n\n\n\n\n","category":"function"},{"location":"hamiltonians.html#Rimu.Interfaces.get_offdiagonal","page":"Hamiltonians","title":"Rimu.Interfaces.get_offdiagonal","text":"newadd, me = get_offdiagonal(ham, address, chosen)\n\nCompute value me and new address newadd of a single (off-diagonal) matrix element in a Hamiltonian ham. The off-diagonal element is in the same column as address address and is indexed by integer index chosen.\n\nExample\n\njulia> addr = BoseFS(3, 2, 1);\n\njulia> H = HubbardMom1D(addr);\n\njulia> get_offdiagonal(H, addr, 3)\n(BoseFS{6,3}(2, 1, 3), 1.0)\n\nPart of the AbstractHamiltonian interface.\n\n\n\n\n\n","category":"function"},{"location":"hamiltonians.html","page":"Hamiltonians","title":"Hamiltonians","text":"The following functions come with default implementations, but may be customized.","category":"page"},{"location":"hamiltonians.html","page":"Hamiltonians","title":"Hamiltonians","text":"random_offdiagonal\nHamiltonians.LOStructure\ndimension\nhas_adjoint\nallows_address_type\nBase.eltype\nVectorInterface.scalartype\nmul!","category":"page"},{"location":"hamiltonians.html#Rimu.Interfaces.random_offdiagonal","page":"Hamiltonians","title":"Rimu.Interfaces.random_offdiagonal","text":"random_offdiagonal(offdiagonals::AbstractOffdiagonals)\nrandom_offdiagonal(ham::AbstractHamiltonian, address)\n-> newaddress, probability, matrixelement\n\nGenerate a single random excitation, i.e. choose from one of the accessible off-diagonal elements in the column corresponding to address in the Hamiltonian matrix represented by ham. Alternatively, pass as argument an iterator over the accessible matrix elements.\n\nPart of the AbstractHamiltonian interface.\n\n\n\n\n\n","category":"function"},{"location":"hamiltonians.html#Rimu.Interfaces.LOStructure","page":"Hamiltonians","title":"Rimu.Interfaces.LOStructure","text":"LOStructure(op::AbstractHamiltonian)\nLOStructure(typeof(op))\n\nReturn information about the structure of the linear operator op. LOStructure is used as a trait to speficy symmetries or other properties of the linear operator op that may simplify or speed up calculations. Implemented instances are:\n\nIsDiagonal(): The operator is diagonal.\nIsHermitian(): The operator is complex and Hermitian or real and symmetric.\nAdjointKnown(): The operator is not Hermitian, but its   adjoint is implemented.\nAdjointUnknown(): adjoint for this operator is not   implemented.\n\nPart of the AbstractHamiltonian interface.\n\nIn order to define this trait for a new linear operator type, define a method for LOStructure(::Type{<:MyNewLOType}) = ….\n\n\n\n\n\n","category":"type"},{"location":"hamiltonians.html#Rimu.Hamiltonians.dimension","page":"Hamiltonians","title":"Rimu.Hamiltonians.dimension","text":"dimension(h::AbstractHamiltonian, addr=starting_address(h))\ndimension(h::AbstractOperator, addr)\ndimension(addr::AbstractFockAddress)\ndimension(::Type{<:AbstractFockAddress})\n\nReturn the estimated dimension of Hilbert space. May return a BigInt number.\n\nWhen called on an address or address type, the dimension of the linear space spanned by the address type is returned. When called on an AbstractHamiltonian, an upper bound on the dimension of the matrix representing the Hamiltonian is returned.\n\nExamples\n\njulia> dimension(OccupationNumberFS(1,2,3))\n16777216\n\njulia> dimension(HubbardReal1D(OccupationNumberFS(1,2,3)))\n28\n\njulia> dimension(BoseFS{200,100})\n1386083821086188248261127842108801860093488668581216236221011219101585442774669540\n\njulia> Float64(ans)\n1.3860838210861882e81\n\nPart of the AbstractHamiltonian interface. See also BasisSetRepresentation.\n\nExtended Help\n\nThe default fallback for dimension called on an AbstractHamiltonian is to return the dimension of the address space, which provides an upper bound. For new Hamiltonians a tighter bound can be provided by defining a custom method.\n\nWhen extending AbstractHamiltonian, define a method for the two-argument form dimension(h::MyNewHamiltonian, addr). For number-conserving Hamiltonians, the function Hamiltonians.number_conserving_dimension may be useful.\n\nWhen extending AbstractFockAddress, define a method for dimension(::Type{MyNewFockAddress}).\n\n\n\n\n\n","category":"function"},{"location":"hamiltonians.html#Rimu.Interfaces.has_adjoint","page":"Hamiltonians","title":"Rimu.Interfaces.has_adjoint","text":"has_adjoint(op)\n\nReturn true if adjoint is defined on op.\n\nPart of the AbstractHamiltonian interface.\n\nSee also LOStructure.\n\n\n\n\n\n","category":"function"},{"location":"hamiltonians.html#Rimu.Interfaces.allows_address_type","page":"Hamiltonians","title":"Rimu.Interfaces.allows_address_type","text":"allows_address_type(operator, addr_or_type)\n\nReturns true if addr_or_type is a valid address for operator. Otherwise, returns false.\n\nPart of the AbstractHamiltonian interface.\n\nExtended help\n\nDefaults to addr_or_type <: typeof(starting_address(operator)). Overload this function if the operator can be used with addresses of different types.\n\n\n\n\n\n","category":"function"},{"location":"hamiltonians.html#Base.eltype","page":"Hamiltonians","title":"Base.eltype","text":"eltype(op::AbstractOperator)\n\nReturn the type of the elements of the operator. This can be a vector value. For the underlying scalar type use scalartype.\n\nPart of the AbstractOperator interface.\n\nnote: Note\nNew types should only implement the method with the argument in the type domain.\n\n\n\n\n\n","category":"function"},{"location":"hamiltonians.html#VectorInterface.scalartype","page":"Hamiltonians","title":"VectorInterface.scalartype","text":"scalartype(op::AbstractOperator)\n\nReturn the type of the underlying scalar field of the operator. This may be different from the element type of the operator returned by eltype, which can be a vector value.\n\nPart of the AbstractOperator interface.\n\nnote: Note\nNew types should only implement the method with the argument in the type domain.\n\n\n\n\n\n","category":"function"},{"location":"hamiltonians.html#LinearAlgebra.mul!","page":"Hamiltonians","title":"LinearAlgebra.mul!","text":"LinearAlgebra.mul!(w::AbstractDVec, op::AbstractOperator, v::AbstractDVec)\n\nIn place multiplication of op with v and storing the result in w. The result is returned. Note that w needs to have a valtype that can hold a product of instances of eltype(op) and valtype(v). Moreover, the StochasticStyle of w needs to be <:IsDeterministic.\n\nPart of the AbstractOperator interface.\n\nThe default implementation relies of diagonal_element and offdiagonals to access the elements of the operator. The function can be overloaded for custom operators.\n\n\n\n\n\n","category":"function"},{"location":"hamiltonians.html","page":"Hamiltonians","title":"Hamiltonians","text":"This interface relies on unexported functionality, including","category":"page"},{"location":"hamiltonians.html","page":"Hamiltonians","title":"Hamiltonians","text":"Hamiltonians.adjoint\nHamiltonians.dot\nHamiltonians.AbstractOffdiagonals\nHamiltonians.Offdiagonals\nHamiltonians.check_address_type\nHamiltonians.number_conserving_dimension\nHamiltonians.number_conserving_bose_dimension\nHamiltonians.number_conserving_fermi_dimension","category":"page"},{"location":"hamiltonians.html#Base.adjoint","page":"Hamiltonians","title":"Base.adjoint","text":"adjoint(::LOStructure, op::AbstractOperator)\n\nRepresent the adjoint of an AbstractOperator. Extend this method to define custom adjoints.\n\n\n\n\n\n","category":"function"},{"location":"hamiltonians.html#LinearAlgebra.dot","page":"Hamiltonians","title":"LinearAlgebra.dot","text":"dot(w, op::AbstractOperator, v)\n\nEvaluate w⋅op(v) minimizing memory allocations.\n\n\n\n\n\n","category":"function"},{"location":"hamiltonians.html#Rimu.Hamiltonians.AbstractOffdiagonals","page":"Hamiltonians","title":"Rimu.Hamiltonians.AbstractOffdiagonals","text":"AbstractOffdiagonals{A,T}<:AbstractVector{Tuple{A,T}}\n\nIterator over new address and matrix elements for reachable off-diagonal matrix elements of a linear operator.\n\nSee Offdiagonals for a default implementation.\n\nMethods to define\n\noffdiagonals(h, a)::AbstractOffdiagonals: This function is used to construct the correct type of offdiagonals for a given combination of Hamiltonian h and Fock address a.\nBase.getindex(::AbstractOffdiagonals, i): should be equivalent to get_offdiagonal(h, a, i).\nBase.size(::AbstractOffdiagonals): should be equivalent to num_offdiagonals(h, a).\n\nSee also offdiagonals, AbstractHamiltonian, AbstractOperator.\n\n\n\n\n\n","category":"type"},{"location":"hamiltonians.html#Rimu.Hamiltonians.Offdiagonals","page":"Hamiltonians","title":"Rimu.Hamiltonians.Offdiagonals","text":"Offdiagonals(h, address) <: AbstractOffdiagonals\n\nIterator over new address and matrix element for reachable off-diagonal matrix elements of linear operator h from address address.  Represents an abstract vector containing the non-zero off-diagonal matrix elements of the column of h indexed by address. To construct this iterator use offdiagonals.\n\nThis is the default implementation of AbstractOffdiagonals defined in terms of num_offdiagonals and get_offdiagonal.\n\nSee also offdiagonals, AbstractHamiltonian, AbstractOperator.\n\n\n\n\n\n","category":"type"},{"location":"hamiltonians.html#Rimu.Hamiltonians.check_address_type","page":"Hamiltonians","title":"Rimu.Hamiltonians.check_address_type","text":"check_address_type(h::AbstractOperator, addr_or_type)\n\nThrow an ArgumentError if addr_or_type is not compatible with h, otherwise return true. Acceptable arguments are either an address or an address type, or a tuple or array thereof.\n\nSee also allows_address_type.\n\n\n\n\n\n","category":"function"},{"location":"hamiltonians.html#Rimu.Hamiltonians.number_conserving_dimension","page":"Hamiltonians","title":"Rimu.Hamiltonians.number_conserving_dimension","text":"number_conserving_dimension(address <: AbstractFockAddress)\n\nReturn the dimension of the Fock space spanned by the address type assuming particle number conservation.\n\nSee also number_conserving_bose_dimension, number_conserving_fermi_dimension, dimension.\n\n\n\n\n\n","category":"function"},{"location":"hamiltonians.html#Rimu.Hamiltonians.number_conserving_bose_dimension","page":"Hamiltonians","title":"Rimu.Hamiltonians.number_conserving_bose_dimension","text":"number_conserving_bose_dimension(n, m)\n\nReturn the dimension of the number-conserving Fock space for n bosons in m modes: binomial(n + m - 1, n).\n\nSee also number_conserving_fermi_dimension, number_conserving_dimension.\n\n\n\n\n\n","category":"function"},{"location":"hamiltonians.html#Rimu.Hamiltonians.number_conserving_fermi_dimension","page":"Hamiltonians","title":"Rimu.Hamiltonians.number_conserving_fermi_dimension","text":"number_conserving_fermi_dimension(n, m)\n\nReturn the dimension of the number-conserving Fock space for n fermions in m modes: binomial(m, n).\n\nSee also number_conserving_bose_dimension, number_conserving_dimension.\n\n\n\n\n\n","category":"function"},{"location":"hamiltonians.html#Geometry","page":"Hamiltonians","title":"Geometry","text":"","category":"section"},{"location":"hamiltonians.html","page":"Hamiltonians","title":"Hamiltonians","text":"Lattices in higher dimensions are defined here for HubbardRealSpace and G2RealSpace.","category":"page"},{"location":"hamiltonians.html","page":"Hamiltonians","title":"Hamiltonians","text":"CubicGrid\nHamiltonians.Directions\nHamiltonians.Displacements\nHamiltonians.neighbor_site\nPeriodicBoundaries\nHardwallBoundaries\nLadderBoundaries","category":"page"},{"location":"hamiltonians.html#Rimu.Hamiltonians.CubicGrid","page":"Hamiltonians","title":"Rimu.Hamiltonians.CubicGrid","text":"CubicGrid(dims::NTuple{D,Int}, fold::NTuple{D,Bool})\n\nRepresents a D-dimensional grid. Used to define a cubic lattice and boundary conditions for some AbstractHamiltonians. The type instance can be used to convert between cartesian vector indices (tuples or SVectors) and linear indices (integers). When indexed with vectors, it folds them back into the grid if the out-of-bounds dimension is periodic and 0 otherwise (see example below).\n\ndims controls the size of the grid in each dimension.\nfold controls whether the boundaries in each dimension are periodic (or folded in the case of momentum space).\n\njulia> geo = CubicGrid((2,3), (true,false))\nCubicGrid{2}((2, 3), (true, false))\n\njulia> geo[1]\n(1, 1)\n\njulia> geo[2]\n(2, 1)\n\njulia> geo[3]\n(1, 2)\n\njulia> geo[(1,2)]\n3\n\njulia> geo[(3,2)] # 3 is folded back into 1\n3\n\njulia> geo[(3,3)]\n5\n\njulia> geo[(3,4)] # returns 0 if out of bounds\n0\n\nSee also PeriodicBoundaries, HardwallBoundaries and LadderBoundaries for special-case constructors.\n\n\n\n\n\n","category":"type"},{"location":"hamiltonians.html#Rimu.Hamiltonians.Directions","page":"Hamiltonians","title":"Rimu.Hamiltonians.Directions","text":"Directions(D) <: AbstractVector{SVector{D,Int}}\nDirections(geometry::CubicGrid) <: AbstractVector{SVector{D,Int}}\n\nIterate over axis-aligned direction vectors in D dimensions.\n\njulia> Directions(3)\n6-element Directions{3}:\n [1, 0, 0]\n [0, 1, 0]\n [0, 0, 1]\n [-1, 0, 0]\n [0, -1, 0]\n [0, 0, -1]\n\n\nSee also CubicGrid.\n\n\n\n\n\n","category":"type"},{"location":"hamiltonians.html#Rimu.Hamiltonians.Displacements","page":"Hamiltonians","title":"Rimu.Hamiltonians.Displacements","text":"Displacements(geometry::CubicGrid) <: AbstractVector{SVector{D,Int}}\n\nReturn all valid offset vectors in a CubicGrid. If center=true the (0,0) displacement is placed at the centre of the array.\n\njulia> geometry = CubicGrid((3,4));\n\njulia> reshape(Displacements(geometry), (3,4))\n3×4 reshape(::Displacements{2, CubicGrid{2, (3, 4), (true, true)}}, 3, 4) with eltype StaticArraysCore.SVector{2, Int64}:\n [0, 0]  [0, 1]  [0, 2]  [0, 3]\n [1, 0]  [1, 1]  [1, 2]  [1, 3]\n [2, 0]  [2, 1]  [2, 2]  [2, 3]\n\njulia> reshape(Displacements(geometry; center=true), (3,4))\n3×4 reshape(::Displacements{2, CubicGrid{2, (3, 4), (true, true)}}, 3, 4) with eltype StaticArraysCore.SVector{2, Int64}:\n [-1, -1]  [-1, 0]  [-1, 1]  [-1, 2]\n [0, -1]   [0, 0]   [0, 1]   [0, 2]\n [1, -1]   [1, 0]   [1, 1]   [1, 2]\n\n\n\n\n\n\n","category":"type"},{"location":"hamiltonians.html#Rimu.Hamiltonians.neighbor_site","page":"Hamiltonians","title":"Rimu.Hamiltonians.neighbor_site","text":"neighbor_site(geom::CubicGrid, site, i)\n\nFind the i-th neighbor of site in the geometry. If the move is illegal, return 0.\n\n\n\n\n\n","category":"function"},{"location":"hamiltonians.html#Rimu.Hamiltonians.PeriodicBoundaries","page":"Hamiltonians","title":"Rimu.Hamiltonians.PeriodicBoundaries","text":"PeriodicBoundaries(dims...) -> CubicGrid\nPeriodicBoundaries(dims) -> CubicGrid\n\nReturn CubicGrid with all dimensions periodic. Equivalent to CubicGrid(dims).\n\n\n\n\n\n","category":"function"},{"location":"hamiltonians.html#Rimu.Hamiltonians.HardwallBoundaries","page":"Hamiltonians","title":"Rimu.Hamiltonians.HardwallBoundaries","text":"HardwallBoundaries(dims...) -> CubicGrid\nHardwallBoundaries(dims) -> CubicGrid\n\nReturn CubicGrid with all dimensions non-periodic. Equivalent to CubicGrid(dims, (false, false, ...)).\n\n\n\n\n\n","category":"function"},{"location":"hamiltonians.html#Rimu.Hamiltonians.LadderBoundaries","page":"Hamiltonians","title":"Rimu.Hamiltonians.LadderBoundaries","text":"LadderBoundaries(dims...) -> CubicGrid\nLadderBoundaries(dims) -> CubicGrid\n\nReturn CubicGrid where the first dimension is dimensions non-periodic and the rest are periodic. Equivalent to CubicGrid(dims, (true, false, ...)).\n\n\n\n\n\n","category":"function"},{"location":"hamiltonians.html#Harmonic-Oscillator","page":"Hamiltonians","title":"Harmonic Oscillator","text":"","category":"section"},{"location":"hamiltonians.html","page":"Hamiltonians","title":"Hamiltonians","text":"Useful utilities for harmonic oscillator in Cartesian basis, see HOCartesianContactInteractions and HOCartesianEnergyConservedPerDim.","category":"page"},{"location":"hamiltonians.html","page":"Hamiltonians","title":"Hamiltonians","text":"get_all_blocks\nfock_to_cart","category":"page"},{"location":"hamiltonians.html#Rimu.Hamiltonians.get_all_blocks","page":"Hamiltonians","title":"Rimu.Hamiltonians.get_all_blocks","text":"get_all_blocks(h::Union{HOCartesianContactInteractions,HOCartesianEnergyConservedPerDim}; \n    target_energy = nothing, \n    max_energy = nothing, \n    max_blocks = nothing, \n    method = :vertices,\n    kwargs...) -> df\n\nFind all distinct blocks of h. Returns a DataFrame with columns \n\nblock_id: index of block in order found\nblock_E0: noninteracting energy of all elements in the block\nblock_size: number of elements in the block\naddr: first address that generates the block with e.g. BasisSetRep\nindices: tuple of mode indices that allow recreation of the generating address    addr; in this case use e.g. BoseFS(M; indices .=> 1) This is useful when    the DataFrame is loaded from file since Arrow.jl converts custom   types to NamedTuples.\nt_basis: time to generate the basis for each block\n\nKeyword arguments:\n\ntarget_energy: only blocks with this noninteracting energy are found\nmax_energy: only blocks with noninteracting energy less than this are found\nmax_blocks: exit after finding this many blocks\nmethod: Choose between :vertices and :comb for method of enumerating    tuples of quantum numbers\nsave_to_file=nothing: if set then the DataFrame recording blocks is saved    after each new block is found\nadditional kwargs: passed to isapprox for comparing block energies.    Useful for anisotropic traps\n\nNote: If h was constructed with option block_by_level = false then the block seeds  addr are determined by parity. In this case the blocks are not generated; t_basis  will be zero, and block_size will be an estimate. Pass the seed addresses to  BasisSetRep with an appropriate filter to generate the blocks.\n\n\n\n\n\n","category":"function"},{"location":"hamiltonians.html#Rimu.Hamiltonians.fock_to_cart","page":"Hamiltonians","title":"Rimu.Hamiltonians.fock_to_cart","text":"fock_to_cart(addr, S; zero_index = true)\n\nConvert a Fock state address addr to Cartesian harmonic oscillator basis  indices n_xn_yldots. These indices are bounded by S which is a  tuple of the maximum number of states in each dimension. By default the  groundstate in each dimension is indexed by 0, but this can be changed  by setting zero_index = false.\n\n\n\n\n\n","category":"function"},{"location":"hamiltonians.html","page":"Hamiltonians","title":"Hamiltonians","text":"Underlying integrals for the interaction matrix elements are implemented in the following unexported functions","category":"page"},{"location":"hamiltonians.html","page":"Hamiltonians","title":"Hamiltonians","text":"Hamiltonians.four_oscillator_integral_general\nHamiltonians.ho_delta_potential\nHamiltonians.log_abs_oscillator_zero","category":"page"},{"location":"hamiltonians.html#Rimu.Hamiltonians.four_oscillator_integral_general","page":"Hamiltonians","title":"Rimu.Hamiltonians.four_oscillator_integral_general","text":"four_oscillator_integral_general(i, j, k, l; max_level = typemax(Int))\n\nIntegral of four one-dimensional harmonic oscillator functions,\n\n    mathcalI(ijkl) = int_-infty^infty dx \n    phi_i(x) phi_j(x) phi_k(x) phi_l(x)\n\nIndices i,j,k,l start at 0 for the groundstate.\n\nThis integral has a closed form in terms of the hypergeometric _3F_2 function, and is non-zero unless i+j+k+l is odd. See e.g. Titchmarsh (1948). This is a generalisation of the closed form in Papenbrock (2002), which is is the special case where i+j == k+l, but is numerically unstable for large arguments. Used in HOCartesianContactInteractions and HOCartesianEnergyConservedPerDim.\n\n\n\n\n\n","category":"function"},{"location":"hamiltonians.html#Rimu.Hamiltonians.ho_delta_potential","page":"Hamiltonians","title":"Rimu.Hamiltonians.ho_delta_potential","text":"ho_delta_potential(S, i, j; [vals])\n\nReturns the matrix element of a delta potential at the centre of a trap, i.e. the  product of two harmonic oscillator functions evaluated at the origin,\n\n    v_ij = phi_mathbfn_i(0) phi_mathbfn_j(0)\n\nwhich is only non-zero for even-parity states. The ith single particle state corresponds to a D-tuple of harmonic oscillator indices mathbfn_i. S defines the bounds of Cartesian harmonic oscillator indices for each dimension. The optional keyword argument vals allows passing pre-computed values of phi_i(0) to speed-up the calculation. The values can be calculated with log_abs_oscillator_zero.\n\nSee also HOCartesianCentralImpurity.\n\n\n\n\n\n","category":"function"},{"location":"hamiltonians.html#Rimu.Hamiltonians.log_abs_oscillator_zero","page":"Hamiltonians","title":"Rimu.Hamiltonians.log_abs_oscillator_zero","text":"log_abs_oscillator_zero(n)\n\nCompute the logarithm of the absolute value of the n^mathrmth 1D harmonic oscillator function evaluated at the origin. The overall sign is determined when the matrix element is evaluated in ho_delta_potential.\n\n\n\n\n\n","category":"function"},{"location":"hamiltonians.html#Index","page":"Hamiltonians","title":"Index","text":"","category":"section"},{"location":"hamiltonians.html","page":"Hamiltonians","title":"Hamiltonians","text":"Pages   = [\"hamiltonians.md\"]","category":"page"},{"location":"RMPI.html#Module-RMPI","page":"RMPI","title":"Module RMPI","text":"","category":"section"},{"location":"RMPI.html","page":"RMPI","title":"RMPI","text":"Rimu.RMPI","category":"page"},{"location":"RMPI.html#Rimu.RMPI","page":"RMPI","title":"Rimu.RMPI","text":"Module for providing MPI functionality for Rimu. This module is unexported. To use it, run\n\nusing Rimu.RMPI\n\n\n\n\n\n","category":"module"},{"location":"RMPI.html#MPIData","page":"RMPI","title":"MPIData","text":"","category":"section"},{"location":"RMPI.html","page":"RMPI","title":"RMPI","text":"Rimu.RMPI.MPIData","category":"page"},{"location":"RMPI.html#Rimu.RMPI.MPIData","page":"RMPI","title":"Rimu.RMPI.MPIData","text":"MPIData(data; kwargs...)\n\nWrapper used for signaling that this data is part of a distributed data structure and communication should happen with MPI. MPIData can generally be used where an AbstractDVec would be used otherwise. Unlike AbstractDVecs, MPIData does not support indexing, or iteration over keys, values, and pairs.\n\nKeyword arguments:\n\nsetup = mpi_point_to_point - controls the communication stratgy\nmpi_one_sided uses one-sided communication with remote memory access (RMA), sets MPIOneSided strategy.\nmpi_point_to_point uses MPIPointToPoint strategy.\nmpi_all_to_all uses MPIAllToAll strategy.\nmpi_no_exchange sets MPINoWalkerExchange strategy. Experimental. Use with caution!\ncomm = mpi_comm()\nroot = mpi_root\nThe rest of the keyword arguments are passed to setup.\n\n\n\n\n\n","category":"type"},{"location":"RMPI.html#Setup-functions","page":"RMPI","title":"Setup functions","text":"","category":"section"},{"location":"RMPI.html","page":"RMPI","title":"RMPI","text":"The following distribute strategies are available. The functions are unexported.","category":"page"},{"location":"RMPI.html","page":"RMPI","title":"RMPI","text":"Rimu.RMPI.mpi_point_to_point\nRimu.RMPI.mpi_one_sided\nRimu.RMPI.mpi_all_to_all\nRimu.RMPI.mpi_no_exchange","category":"page"},{"location":"RMPI.html#Rimu.RMPI.mpi_point_to_point","page":"RMPI","title":"Rimu.RMPI.mpi_point_to_point","text":"mpi_point_to_point(data, comm = mpi_comm(), root = mpi_root)\n\nDeclare data as mpi-distributed and set communication strategy to point-to-point.\n\nSets up the MPIData structure with MPIPointToPoint strategy.\n\n\n\n\n\n","category":"function"},{"location":"RMPI.html#Rimu.RMPI.mpi_one_sided","page":"RMPI","title":"Rimu.RMPI.mpi_one_sided","text":"mpi_one_sided(data, comm = mpi_comm(), root = mpi_root; capacity)\n\nDeclare data as mpi-distributed and set communication strategy to one-sided with remote memory access (RMA). capacity sets the capacity of the RMA windows.\n\nSets up the MPIData structure with MPIOneSided strategy.\n\n\n\n\n\n","category":"function"},{"location":"RMPI.html#Rimu.RMPI.mpi_all_to_all","page":"RMPI","title":"Rimu.RMPI.mpi_all_to_all","text":"mpi_all_to_all(data, comm = mpi_comm(), root = mpi_root)\n\nDeclare data as mpi-distributed and set communication strategy to all-to-all.\n\nSets up the MPIData structure with MPIAllToAll strategy.\n\n\n\n\n\n","category":"function"},{"location":"RMPI.html#Rimu.RMPI.mpi_no_exchange","page":"RMPI","title":"Rimu.RMPI.mpi_no_exchange","text":"mpi_no_exchange(data, comm = mpi_comm(), root = mpi_root)\n\nDeclare data as mpi-distributed and set communication strategy to MPINoWalkerExchange. Sets up the MPIData structure with MPINoWalkerExchange strategy.\n\n\n\n\n\n","category":"function"},{"location":"RMPI.html#Strategies","page":"RMPI","title":"Strategies","text":"","category":"section"},{"location":"RMPI.html","page":"RMPI","title":"RMPI","text":"Rimu.RMPI.MPIPointToPoint\nRimu.RMPI.MPIOneSided\nRimu.RMPI.MPIAllToAll\nRimu.RMPI.MPINoWalkerExchange","category":"page"},{"location":"RMPI.html#Rimu.RMPI.MPIPointToPoint","page":"RMPI","title":"Rimu.RMPI.MPIPointToPoint","text":"MPIPointToPoint{N,A}\n\nPoint-to-point communication strategy. Uses circular communication using MPI.Send and MPI.Recv!.\n\nConstructor\n\nMPIPointToPoint(::Type{P}, np, id, comm): Construct an instance with pair type P on np processes with current rank id.\n\n\n\n\n\n","category":"type"},{"location":"RMPI.html#Rimu.RMPI.MPIOneSided","page":"RMPI","title":"Rimu.RMPI.MPIOneSided","text":"MPIOneSided(nprocs, myrank, comm, ::Type{T}, capacity)\n\nCommunication buffer for use with MPI one-sided communication (remote memory access). Up to capacity elements of type T can be exchanged between MPI ranks via put. It is important that isbitstype(T) == true. Objects of type MPIOneSided have to be freed manually with a (blocking) call to free().\n\n\n\n\n\n","category":"type"},{"location":"RMPI.html#Rimu.RMPI.MPIAllToAll","page":"RMPI","title":"Rimu.RMPI.MPIAllToAll","text":" MPIAllToAll\n\nAll-to-all communication strategy. The communication works in two steps: first MPI.Alltoall! is used to communicate the number of walkers each rank wants to send to other ranks, then MPI.Alltoallv! is used to send the walkers around.\n\nConstructor\n\nMPIAllToAll(Type{P}, np, id, comm): Construct an instance with pair type P on np processes with current rank id.\n\n\n\n\n\n","category":"type"},{"location":"RMPI.html#Rimu.RMPI.MPINoWalkerExchange","page":"RMPI","title":"Rimu.RMPI.MPINoWalkerExchange","text":"MPINoWalkerExchange(nprocs, my_rank, comm)\n\nStrategy for not exchanging walkers between ranks. Consequently there will be no cross-rank annihilations.\n\n\n\n\n\n","category":"type"},{"location":"RMPI.html#MPI-convenience-functions","page":"RMPI","title":"MPI convenience functions","text":"","category":"section"},{"location":"RMPI.html","page":"RMPI","title":"RMPI","text":"Modules = [Rimu.RMPI]\nPages = [\"helpers.jl\"]\nPrivate = true\nPublic = true","category":"page"},{"location":"RMPI.html#Rimu.RMPI.mpi_root","page":"RMPI","title":"Rimu.RMPI.mpi_root","text":"Default MPI root for RMPI.\n\n\n\n\n\n","category":"constant"},{"location":"RMPI.html#Rimu.DictVectors.mpi_comm-Tuple{}","page":"RMPI","title":"Rimu.DictVectors.mpi_comm","text":"Default MPI communicator for RMPI.\n\n\n\n\n\n","category":"method"},{"location":"RMPI.html#Rimu.DictVectors.mpi_rank","page":"RMPI","title":"Rimu.DictVectors.mpi_rank","text":"mpi_rank(comm = mpi_comm())\n\nReturn the current MPI rank.\n\n\n\n\n\n","category":"function"},{"location":"RMPI.html#Rimu.DictVectors.mpi_size","page":"RMPI","title":"Rimu.DictVectors.mpi_size","text":"mpi_size(comm = mpi_comm())\n\nSize of MPI communicator.\n\n\n\n\n\n","category":"function"},{"location":"RMPI.html#Rimu.RMPI.is_mpi_root","page":"RMPI","title":"Rimu.RMPI.is_mpi_root","text":"is_mpi_root(root = mpi_root)\n\nReturns true if called from the root rank\n\n\n\n\n\n","category":"function"},{"location":"RMPI.html#Rimu.RMPI.mpi_allprintln-Tuple","page":"RMPI","title":"Rimu.RMPI.mpi_allprintln","text":"mpi_allprintln(args...)\n\nPrint a message to stdout from each rank separately, in order. MPI synchronizing.\n\n\n\n\n\n","category":"method"},{"location":"RMPI.html#Rimu.RMPI.mpi_barrier","page":"RMPI","title":"Rimu.RMPI.mpi_barrier","text":"mpi_barrier(comm = mpi_comm())\n\nThe MPI barrier with optional argument. MPI syncronizing.\n\n\n\n\n\n","category":"function"},{"location":"RMPI.html#Rimu.RMPI.mpi_combine_walkers!-Tuple{Rimu.RMPI.MPIData, AbstractDVec}","page":"RMPI","title":"Rimu.RMPI.mpi_combine_walkers!","text":"mpi_combine_walkers!(target, source, [strategy])\n\nDistribute the entries of source to the target data structure such that all entries in the target are on the process with the correct mpi rank as controlled by targetrank(). MPI syncronizing.\n\nNote: the storage of the source is communicated rather than the source itself.\n\n\n\n\n\n","category":"method"},{"location":"RMPI.html#Rimu.RMPI.mpi_seed!","page":"RMPI","title":"Rimu.RMPI.mpi_seed!","text":"mpi_seed!(seed = rand(Random.RandomDevice(), UInt))\n\nRe-seed the random number generators in an MPI-safe way. If seed is provided, the random numbers from rand will follow a deterministic sequence.\n\nIndependence of the random number generators on different MPI ranks is achieved by adding hash(mpi_rank()) to seed.\n\n\n\n\n\n","category":"function"},{"location":"RMPI.html#Rimu.RMPI.next_mpiID","page":"RMPI","title":"Rimu.RMPI.next_mpiID","text":"next_mpiID()\n\nProduce a new ID number for MPI distributed objects. Uses an internal counter.\n\n\n\n\n\n","category":"function"},{"location":"RMPI.html#Rimu.RMPI.targetrank-Tuple{Union{Integer, AbstractFockAddress}, Any}","page":"RMPI","title":"Rimu.RMPI.targetrank","text":"targetrank(key, np)\n\nCompute the rank where the key belongs.\n\n\n\n\n\n","category":"method"},{"location":"RMPI.html#Rimu.RMPI.@mpi_root-Tuple","page":"RMPI","title":"Rimu.RMPI.@mpi_root","text":"@mpi_root expr\n\nEvaluate expression only on the root rank. Extra care needs to be taken as expr must not contain any code that involves syncronising MPI operations, i.e. actions that would require syncronous action of all MPI ranks.\n\nExample:\n\nwn = walkernumber(dv)   # an MPI syncronising function call that gathers\n                        # information from all MPI ranks\n@mpi_root @info \"The current walker number is\" wn # print info message on root only\n\n\n\n\n\n","category":"macro"},{"location":"RMPI.html#Index","page":"RMPI","title":"Index","text":"","category":"section"},{"location":"RMPI.html","page":"RMPI","title":"RMPI","text":"Pages   = [\"RMPI.md\"]","category":"page"},{"location":"testing.html#Code-testing","page":"Code testing","title":"Code testing","text":"","category":"section"},{"location":"testing.html","page":"Code testing","title":"Code testing","text":"The script runtest.jl in the test/ folder contains tests of the code. To run the test simply run the script from the Julia REPL or run","category":"page"},{"location":"testing.html","page":"Code testing","title":"Code testing","text":"Rimu$ julia test/runtest.jl","category":"page"},{"location":"testing.html","page":"Code testing","title":"Code testing","text":"from the command line.","category":"page"},{"location":"testing.html","page":"Code testing","title":"Code testing","text":"More tests should be added over time to test core functionality of the code. To add new tests, directly edit the file runtest.jl.","category":"page"},{"location":"testing.html#Automated-testing-with-GitHub-Actions","page":"Code testing","title":"Automated testing with GitHub Actions","text":"","category":"section"},{"location":"testing.html","page":"Code testing","title":"Code testing","text":"GitHub Actions are set up to run the test script automatically on the GitHub cloud server every time a new commit to the master branch is pushed to the server. The setup for this to happen is configured in the file actions.yml in the Rimu/.github/workflows folder.","category":"page"},{"location":"exactdiagonalization.html#Exact-Diagonalization","page":"Exact Diagonalization","title":"Exact Diagonalization","text":"","category":"section"},{"location":"exactdiagonalization.html","page":"Exact Diagonalization","title":"Exact Diagonalization","text":"The main functionality of Rimu for exact diagonalization is contained in the module ExactDiagonalization.","category":"page"},{"location":"exactdiagonalization.html","page":"Exact Diagonalization","title":"Exact Diagonalization","text":"ExactDiagonalization","category":"page"},{"location":"exactdiagonalization.html#Rimu.ExactDiagonalization","page":"Exact Diagonalization","title":"Rimu.ExactDiagonalization","text":"The module Rimu.ExactDiagonalization provides a framework for exact diagonalization of quantum many-body systems defined by an AbstractHamiltonian type.\n\nThe main usage is through defining an ExactDiagonalizationProblem and solving it with the solve function. The module provides a unified interface for accessing different solver algorithms, which make use of solvers provided by external packages.\n\nExports\n\nExactDiagonalizationProblem\nBasisSetRepresentation\nbuild_basis\nKrylovKitSolver\nLinearAlgebraSolver\nArpackSolver\nLOBPCGSolver\n\n\n\n\n\n","category":"module"},{"location":"exactdiagonalization.html#ExactDiagonalizationProblem","page":"Exact Diagonalization","title":"ExactDiagonalizationProblem","text":"","category":"section"},{"location":"exactdiagonalization.html","page":"Exact Diagonalization","title":"Exact Diagonalization","text":"ExactDiagonalizationProblem\nsolve(::ExactDiagonalizationProblem)\ninit(::ExactDiagonalizationProblem)","category":"page"},{"location":"exactdiagonalization.html#Rimu.ExactDiagonalization.ExactDiagonalizationProblem","page":"Exact Diagonalization","title":"Rimu.ExactDiagonalization.ExactDiagonalizationProblem","text":"ExactDiagonalizationProblem(hamiltonian::AbstractHamiltonian, [v0]; kwargs...)\n\nDefines an exact diagonalization problem with an AbstractHamiltonian hamiltonian. Optionally, a starting vector of type AbstractDVec, or a single address or a collection of addresses can be passed as v0.\n\nExactDiagonalizationProblems can be solved with solve.\n\nKeyword arguments\n\nalgorithm=LinearAlgebraSolver(): The algorithm to use for solving the problem. The   algorithm can also be specified as the second positional argument in the init   function.\nOptional keyword arguments will be passed on to the init and solve functions.\n\nAlgorithms\n\nLinearAlgebraSolver(): An algorithm for solving the problem using the   dense-matrix eigensolver from the LinearAlgebra standard library (eventually using   LAPACK). Only suitable for small matrices.\nKrylovKitSolver(matrix_free=true): An algorithm for finding a few eigenvalues   and vectors. With matrix_free=true the problem is solved without instatiating a   matrix. This is suitable for large dimensions. With matrix_free=false the problem is   solved after instantiating a sparse matrix. This is faster if sufficient memory is   available. Requires using KrylovKit.\nArpackSolver(): An algorithm for solving the problem after instantiating a   sparse matrix and using the Arpack Fortran library. Requires using Arpack.\nLOBPCGSolver(): An algorithm for solving the problem after instantiating a   sparse matrix using the LOBPCG method. Requires using IterativeSolvers.\n\nKeyword arguments for matrix-based algorithms (also accepted by init)\n\nSee BasisSetRepresentation for more information.\n\nsizelim: The maximum size of the basis set representation. The default is 10^6 for   sparse matrices and 10^5 for dense matrices.\ncutoff: A cutoff value for the basis set representation.\nfilter: A filter function for the basis set representation.\nnnzs = 0: The number of non-zero elements in the basis set representation. Setting a   non-zero value can speed up the computation.\ncol_hint = 0: A hint for the number of columns in the basis set representation.\nsort = false: Whether to sort the basis set representation.\n\nKeyword arguments for iterative algorithms (also accepted by solve)\n\nverbose = false: Whether to print additional information.\nabstol = nothing: The absolute tolerance for the solver. If nothing, the solver   chooses a default value.\nhowmany = 1: The minimum number of eigenvalues to compute.\nwhich = :SR: Whether to compute the largest or smallest eigenvalues.\nmaxiters = nothing: The maximum number of iterations for the solver. If nothing, the   solver chooses a default value.\n\nSolving an ExactDiagonalizationProblem\n\nThe solve function can be called directly on an ExactDiagonalizationProblem to solve it. Alternatively, the init function can be used to initialize a solver, which can then be solved with solve. The solve function returns a result type with the eigenvalues, eigenvectors, and convergence information.\n\nResult type\n\nThe result type for the solve function is determined by the algorithm used. It has the following fields:\n\nvalues::Vector: The eigenvalues.\nvectors::Vector{<:AbstractDVec}: The eigenvectors.\nsuccess::Bool: A boolean flag indicating whether the solver was successful.\ninfo: Convergence information.\nalgorithm: The algorithm used for the computation.\nproblem: The ExactDiagonalizationProblem that was solved.\nAdditional fields may be present depending on the algorithm used.\n\nIterating the result type will yield the eigenvalues, eigenvectors, and a boolean flag success in that order.\n\nExamples\n\njulia> p = ExactDiagonalizationProblem(HubbardReal1D(BoseFS(1,1,1)))\nExactDiagonalizationProblem(\n  HubbardReal1D(fs\"|1 1 1⟩\"; u=1.0, t=1.0),\n  nothing;\n  NamedTuple()...\n)\n\njulia> result = solve(p) # convert to dense matrix and solve with LinearAlgebra.eigen\nEDResult for algorithm LinearAlgebraSolver() with 10 eigenvalue(s),\n  values = [-5.09593, -1.51882, -1.51882, 1.55611, 1.6093, 1.6093, 4.0, 4.53982, 4.90952, 4.90952],\n  and vectors of length 10.\n  Convergence info: \"Dense matrix eigensolver solution from `LinearAlgebra.eigen`\", with howmany = 10 eigenvalues requested.\n  success = true.\n\njulia> using KrylovKit # an external package has to be installed and loaded\n\njulia> s = init(p; algorithm = KrylovKitSolver(true)) # solve without building a matrix\nKrylovKitDirectEDSolver\n with algorithm KrylovKitSolver(matrix_free = true,) for hamiltonian = HubbardReal1D(fs\"|1 1 1⟩\"; u=1.0, t=1.0),\n  v0 = 1-element PDVec: style = IsDeterministic{Float64}()\n  fs\"|1 1 1⟩\" => 1.0,\n  kwargs = NamedTuple()\n)\n\njulia> values, vectors, success = solve(s);\n\njulia> result.values[1] ≈ values[1]\ntrue\n\nSee also solve(::ExactDiagonalizationProblem), init(::ExactDiagonalizationProblem), KrylovKitSolver, ArpackSolver, LinearAlgebraSolver.\n\nnote: Note\nUsing the KrylovKitSolver() algorithms requires the KrylovKit.jl package. The package can be loaded with using KrylovKit. Using the ArpackSolver() algorithm requires the Arpack.jl package. The package can be loaded with using Arpack. Using the LOBPCGSolver() algorithm requires the IterativeSolvers.jl package. The package can be loaded with using IterativeSolvers.\n\n\n\n\n\n","category":"type"},{"location":"exactdiagonalization.html#CommonSolve.solve-Tuple{ExactDiagonalizationProblem}","page":"Exact Diagonalization","title":"CommonSolve.solve","text":"solve(p::ExactDiagonalizationProblem, [algorithm]; kwargs...)\n\nSolve an ExactDiagonalizationProblem p directly. Optionally specify an algorithm. Returns a result type with the eigenvalues, eigenvectors, and convergence information.\n\nFor a description of the keyword arguments, see the documentation for ExactDiagonalizationProblem.\n\nSee also solve(::ProjectorMonteCarloProblem).\n\n\n\n\n\n","category":"method"},{"location":"exactdiagonalization.html#CommonSolve.init-Tuple{ExactDiagonalizationProblem}","page":"Exact Diagonalization","title":"CommonSolve.init","text":"init(p::ExactDiagonalizationProblem, [algorithm]; kwargs...)\n\nInitialize a solver for an ExactDiagonalizationProblem p with an optional algorithm. Returns a solver instance that can be solved with solve.\n\nFor a description of the keyword arguments, see the documentation for ExactDiagonalizationProblem.\n\n\n\n\n\n","category":"method"},{"location":"exactdiagonalization.html#Solver-algorithms","page":"Exact Diagonalization","title":"Solver algorithms","text":"","category":"section"},{"location":"exactdiagonalization.html","page":"Exact Diagonalization","title":"Exact Diagonalization","text":"KrylovKitSolver\nLinearAlgebraSolver\nArpackSolver\nLOBPCGSolver","category":"page"},{"location":"exactdiagonalization.html#Rimu.ExactDiagonalization.KrylovKitSolver","page":"Exact Diagonalization","title":"Rimu.ExactDiagonalization.KrylovKitSolver","text":"KrylovKitSolver(matrix_free::Bool; kwargs...)\nKrylovKitSolver(; matrix_free = false, kwargs...)\n\nAlgorithm for solving a large ExactDiagonalizationProblem to find a few eigenvalues and vectors using the KrylovKit.jl package. The Lanczos method is used for hermitian matrices, and the Arnoldi method is used for non-hermitian matrices.\n\nArguments\n\nmatrix_free = false: Whether to use a matrix-free algorithm. If false, a sparse matrix   will be instantiated. This is typically faster and recommended for small matrices,   but requires more memory. If true, the matrix is not instantiated, which is useful for   large matrices that would not fit into memory. The calculation will parallelise using   threading and MPI if available by making use of PDVec.\nkwargs: Additional keyword arguments are passed on to the function   KrylovKit.eigsolve().\n\nSee also ExactDiagonalizationProblem, solve.\n\nnote: Note\nRequires the KrylovKit.jl package to be loaded with using KrylovKit.\n\n\n\n\n\n","category":"type"},{"location":"exactdiagonalization.html#Rimu.ExactDiagonalization.LinearAlgebraSolver","page":"Exact Diagonalization","title":"Rimu.ExactDiagonalization.LinearAlgebraSolver","text":"LinearAlgebraSolver(; kwargs...)\n\nAlgorithm for solving an ExactDiagonalizationProblem using the dense-matrix eigensolver from the LinearAlgebra standard library. This is only suitable for small matrices.\n\nThe kwargs are passed on to function LinearAlgebra.eigen.\n\nKeyword arguments\n\npermute = true: Whether to permute the matrix before diagonalization.\nscale = true: Whether to scale the matrix before diagonalization.\nsortby: The sorting order for the eigenvalues.\n\nSee also ExactDiagonalizationProblem, solve.\n\n\n\n\n\n","category":"type"},{"location":"exactdiagonalization.html#Rimu.ExactDiagonalization.ArpackSolver","page":"Exact Diagonalization","title":"Rimu.ExactDiagonalization.ArpackSolver","text":"ArpackSolver(; kwargs...)\n\nAlgorithm for solving an ExactDiagonalizationProblem after instantiating a sparse matrix. It uses the Lanzcos method for hermitian problems, and the Arnoldi method for non-hermitian problems, using the Arpack Fortran library. This is faster than KrylovKitSolver(; matrix_free=true), but it requires more memory and will only be useful if the matrix fits into memory.\n\nThe kwargs are passed on to the function Arpack.eigs().\n\nSee also ExactDiagonalizationProblem, solve.\n\nnote: Note\nRequires the Arpack.jl package to be loaded with using Arpack.\n\n\n\n\n\n","category":"type"},{"location":"exactdiagonalization.html#Rimu.ExactDiagonalization.LOBPCGSolver","page":"Exact Diagonalization","title":"Rimu.ExactDiagonalization.LOBPCGSolver","text":"LOBPCGSolver(; kwargs...)\n\nThe Locally Optimal Block Preconditioned Conjugate Gradient Method (LOBPCG). Algorithm for solving an ExactDiagonalizationProblem after instantiating a sparse matrix.\n\nLOBPCG is not suitable for non-hermitian eigenvalue problems.\n\nThe kwargs are passed on to the function IterativeSolvers.lobpcg().\n\nSee also ExactDiagonalizationProblem, solve.\n\nnote: Note\nRequires the IterativeSolvers.jl package to be loaded with using IterativeSolvers.\n\n\n\n\n\n","category":"type"},{"location":"exactdiagonalization.html#Converting-a-Hamiltonian-in-to-a-matrix","page":"Exact Diagonalization","title":"Converting a Hamiltonian in to a matrix","text":"","category":"section"},{"location":"exactdiagonalization.html","page":"Exact Diagonalization","title":"Exact Diagonalization","text":"BasisSetRepresentation\nbuild_basis\nMatrix\nsparse","category":"page"},{"location":"exactdiagonalization.html#Rimu.ExactDiagonalization.BasisSetRepresentation","page":"Exact Diagonalization","title":"Rimu.ExactDiagonalization.BasisSetRepresentation","text":"BasisSetRepresentation(\n    hamiltonian::AbstractHamiltonian, addr=starting_address(hamiltonian);\n    sizelim=10^6, nnzs, cutoff, filter, sort=false, kwargs...\n)\nBasisSetRepresentation(hamiltonian::AbstractHamiltonian, addresses::AbstractVector; kwargs...)\n\nEagerly construct the basis set representation of the operator hamiltonian with all addresses reachable from addr. Instead of a single address, a vector of addresses can be passed.\n\nAn ArgumentError is thrown if dimension(hamiltonian) > sizelim in order to prevent memory overflow. Set sizelim = Inf in order to disable this behaviour.\n\nProviding the number nnzs of expected calculated matrix elements and col_hint for the estimated number of nonzero off-diagonal matrix elements in each matrix column may improve performance.\n\nProviding an energy cutoff will skip the columns and rows with diagonal elements greater than cutoff. Alternatively, an arbitrary filter function can be used instead. Addresses passed as arguments are not filtered. To generate the matrix truncated to the subspace spanned by the addresses, use filter = Returns(false).\n\nSetting sort to true will sort the matrix rows and columns. This is useful when the order of the columns matters, e.g. when comparing matrices. Any additional keyword arguments are passed on to Base.sortperm.\n\nFields\n\nsparse_matrix: sparse matrix representing hamiltonian in the basis basis\nbasis: vector of addresses\nhamiltonian: the Hamiltonian hamiltonian\n\nExample\n\njulia> hamiltonian = HubbardReal1D(BoseFS(1,0,0));\n\njulia> bsr = BasisSetRepresentation(hamiltonian)\nBasisSetRepresentation(HubbardReal1D(fs\"|1 0 0⟩\"; u=1.0, t=1.0)) with dimension 3 and 9 stored entries:3×3 SparseArrays.SparseMatrixCSC{Float64, Int64} with 9 stored entries:\n  0.0  -1.0  -1.0\n -1.0   0.0  -1.0\n -1.0  -1.0   0.0\n\njulia> BasisSetRepresentation(hamiltonian, bsr.basis[1:2]; filter = Returns(false)) # passing addresses and truncating\nBasisSetRepresentation(HubbardReal1D(fs\"|1 0 0⟩\"; u=1.0, t=1.0)) with dimension 2 and 4 stored entries:2×2 SparseArrays.SparseMatrixCSC{Float64, Int64} with 4 stored entries:\n  0.0  -1.0\n -1.0   0.0\n\njulia> using LinearAlgebra; round.(eigvals(Matrix(bsr)); digits = 4) # eigenvalues\n3-element Vector{Float64}:\n -2.0\n  1.0\n  1.0\n\njulia> ev = eigvecs(Matrix(bsr))[:,1]; ev = ev .* sign(ev[1]) # ground state eigenvector\n3-element Vector{Float64}:\n 0.5773502691896257\n 0.5773502691896255\n 0.5773502691896257\n\njulia> dv = DVec(zip(bsr.basis, ev)) # ground state as DVec\nDVec{BoseFS{1, 3, BitString{3, 1, UInt8}},Float64} with 3 entries, style = IsDeterministic{Float64}()\n  fs\"|0 0 1⟩\" => 0.57735\n  fs\"|0 1 0⟩\" => 0.57735\n  fs\"|1 0 0⟩\" => 0.57735\n\nHas methods for dimension, sparse, Matrix, starting_address.\n\nPart of the AbstractHamiltonian interface. See also build_basis.\n\n\n\n\n\n","category":"type"},{"location":"exactdiagonalization.html#Rimu.ExactDiagonalization.build_basis","page":"Exact Diagonalization","title":"Rimu.ExactDiagonalization.build_basis","text":"build_basis(\n    ham, address=starting_address(ham);\n    cutoff, filter, sizelim, sort=false, kwargs...\n) -> basis\nbuild_basis(ham, addresses::AbstractVector; kwargs...)\n\nGet all basis element of a linear operator ham that are reachable (via non-zero matrix elements) from the address address, returned as a vector. Instead of a single address, a vector of addresses can be passed. Does not return the matrix, for that purpose use BasisSetRepresentation.\n\nProviding an energy cutoff will skip addresses with diagonal elements greater than cutoff. Alternatively, an arbitrary filter function can be used instead. Addresses passed as arguments are not filtered. A maximum basis size sizelim can be set which will throw an error if the expected dimension of ham is larger than sizelim. This may be useful when memory may be a concern. These options are disabled by default.\n\nSetting sort to true will sort the basis. Any additional keyword arguments are passed on to Base.sort!.\n\n\n\n\n\n","category":"function"},{"location":"exactdiagonalization.html#Base.Matrix","page":"Exact Diagonalization","title":"Base.Matrix","text":"Matrix(\n    hamiltonian::AbstractHamiltonian, addr=starting_address(hamiltonian);\n    sizelim=10^4, kwargs...\n)\nMatrix(bsr::BasisSetRepresentation)\n\nReturn a dense matrix representation of hamiltonian or bsr. kwargs are passed to BasisSetRepresentation.\n\nSee BasisSetRepresentation.\n\n\n\n\n\n","category":"type"},{"location":"exactdiagonalization.html#SparseArrays.sparse","page":"Exact Diagonalization","title":"SparseArrays.sparse","text":"sparse(hamiltonian::AbstractHamiltonian, addr=starting_address(hamiltonian); kwargs...)\nsparse(bsr::BasisSetRepresentation)\n\nReturn a sparse matrix representation of hamiltonian or bsr. kwargs are passed to BasisSetRepresentation.\n\nSee BasisSetRepresentation.\n\n\n\n\n\n","category":"function"},{"location":"exactdiagonalization.html#Deprecated","page":"Exact Diagonalization","title":"Deprecated","text":"","category":"section"},{"location":"exactdiagonalization.html","page":"Exact Diagonalization","title":"Exact Diagonalization","text":"BasisSetRep","category":"page"},{"location":"exactdiagonalization.html#Rimu.ExactDiagonalization.BasisSetRep","page":"Exact Diagonalization","title":"Rimu.ExactDiagonalization.BasisSetRep","text":"BasisSetRep(args...; kwargs...)\n\nBasisSetRep is deprecated. Use BasisSetRepresentation instead.\n\n\n\n\n\n","category":"function"},{"location":"randomnumbers.html#Random-numbers-in-Rimu","page":"Random numbers","title":"Random numbers in Rimu","text":"","category":"section"},{"location":"randomnumbers.html","page":"Random numbers","title":"Random numbers","text":"Rimu uses Julia's built-in random number generator, which currently defaults to Xoshiro256++.","category":"page"},{"location":"randomnumbers.html#Reproducibility","page":"Random numbers","title":"Reproducibility","text":"","category":"section"},{"location":"randomnumbers.html","page":"Random numbers","title":"Random numbers","text":"If you want FCIQMC runs to be reproducible, make sure to seed the RNG with Random.seed!.","category":"page"},{"location":"randomnumbers.html","page":"Random numbers","title":"Random numbers","text":"MPI-distributed runs can also be made reproducible by seeding the RNG with Rimu.RMPI.mpi_seed!.","category":"page"},{"location":"documentation.html#Documentation-generation","page":"Documentation generation","title":"Documentation generation","text":"","category":"section"},{"location":"documentation.html","page":"Documentation generation","title":"Documentation generation","text":"We are using Documenter.jl to generate the documentation web site based on markdown files stored in docs/src. Please help keeping the documentation up-to-date by editing the markdown files! For instructions on how to write appropriate documentation please refer to the relevant chapter in the Julia documentation and the Documenter.jl documentation.","category":"page"},{"location":"documentation.html#Generating-the-documentation-web-site","page":"Documentation generation","title":"Generating the documentation web site","text":"","category":"section"},{"location":"documentation.html","page":"Documentation generation","title":"Documentation generation","text":"The documentation pages can be generated by running the build script by typing","category":"page"},{"location":"documentation.html","page":"Documentation generation","title":"Documentation generation","text":"Rimu$ julia --project=docs docs/make.jl","category":"page"},{"location":"documentation.html","page":"Documentation generation","title":"Documentation generation","text":"on the shell prompt from the Rimu/ folder. A complete image of the static documentation web site will be generated in the folder docs/build/. It can be viewed locally by pointing a web browser to file docs/build/index.html, or by deploying it to the GitHub pages web server.","category":"page"},{"location":"documentation.html#Automatic-documentation-generation-and-deployment","page":"Documentation generation","title":"Automatic documentation generation and deployment","text":"","category":"section"},{"location":"documentation.html","page":"Documentation generation","title":"Documentation generation","text":"Our documentation is hosted on GitHub pages. The documentation web site can be built and deployed automatically with GitHub Actions. This needs to be set up with an appropriate script in the file .github/workflows/docs.yml, where triggers for this to happen can be defined. In the current set up, a new documentation web site is generated and deployed whenever someone pushes to the develop branch on the GitHub server. The updated documentation can then be accessed here.","category":"page"},{"location":"documentation.html","page":"Documentation generation","title":"Documentation generation","text":"Previews for pull-requests can be accessed by replacing 101 in the following link with the PR number: https://joachimbrand.github.io/Rimu.jl/previews/PR101/","category":"page"},{"location":"documentation.html#Example-scripts","page":"Documentation generation","title":"Example scripts","text":"","category":"section"},{"location":"documentation.html","page":"Documentation generation","title":"Documentation generation","text":"Examples should be added to the scripts folder, in the form of .jl files suitable for  parsing by Literate. The process of generating  documentation is automated in the docs/make.jl file and assumes that the following line is  at (or near) the top of the script:","category":"page"},{"location":"documentation.html","page":"Documentation generation","title":"Documentation generation","text":"# # Example N: Title","category":"page"},{"location":"documentation.html","page":"Documentation generation","title":"Documentation generation","text":"where the number N and Title will be extracted automatically.","category":"page"},{"location":"documentation.html","page":"Documentation generation","title":"Documentation generation","text":"Tests for the results and output of specific scripts should be added at the end of each example. The code to run the test should be hidden from the final generated document by appending \"#hide\" to each line of testing code. For example, ","category":"page"},{"location":"documentation.html","page":"Documentation generation","title":"Documentation generation","text":"using Test                          #hide\n@test isfile(\"result.out\")          #hide\n@test result == expected_result     #hide","category":"page"},{"location":"addresses.html#Module-BitStringAddresses","page":"BitString addresses","title":"Module BitStringAddresses","text":"","category":"section"},{"location":"addresses.html","page":"BitString addresses","title":"BitString addresses","text":"This module contains the implementations of BitString and various Fock addresses. The addresses serve as a basis for a Hamiltonian.","category":"page"},{"location":"addresses.html","page":"BitString addresses","title":"BitString addresses","text":"While there are not restrictions on the type of address a Hamiltonian uses, Rimu provides implementations for Bosonic, Fermionic, and mixed Fock States.","category":"page"},{"location":"addresses.html","page":"BitString addresses","title":"BitString addresses","text":"When implementing a new address type, care must be taken to make them space-efficient and stack-allocated - avoid using (heap-allocated) arrays to represent your addresses at all costs!","category":"page"},{"location":"addresses.html#Fock-addresses","page":"BitString addresses","title":"Fock addresses","text":"","category":"section"},{"location":"addresses.html","page":"BitString addresses","title":"BitString addresses","text":"Rimu provides a variety of address implementations that should make it straightforward to implement efficient Hamiltonians. Examples are:","category":"page"},{"location":"addresses.html","page":"BitString addresses","title":"BitString addresses","text":"BoseFS Single-component bosonic Fock state with fixed particle and mode number.\nFermiFS Single-component fermionic Fock state with fixed particle and mode number.\nCompositeFS Multi-component Fock state composed of the above types.\nOccupationNumberFS Single-component bosonic Fock state with a fixed number of modes. The number of particles is not part of the type and can be changed by operators.","category":"page"},{"location":"addresses.html#Fock-address-API","page":"BitString addresses","title":"Fock address API","text":"","category":"section"},{"location":"addresses.html","page":"BitString addresses","title":"BitString addresses","text":"Modules = [BitStringAddresses]\nPages = [\"fockaddress.jl\",\"bosefs.jl\",\"fermifs.jl\",\"multicomponent.jl\",\"occupationnumberfs.jl\"]\nPrivate = false","category":"page"},{"location":"addresses.html#Rimu.BitStringAddresses.AbstractFockAddress","page":"BitString addresses","title":"Rimu.BitStringAddresses.AbstractFockAddress","text":"AbstractFockAddress{N,M}\n\nAbstract type representing a Fock state with N particles and M modes.\n\nSee also SingleComponentFockAddress, CompositeFS, BoseFS, FermiFS.\n\n\n\n\n\n","category":"type"},{"location":"addresses.html#Rimu.BitStringAddresses.BoseFSIndex","page":"BitString addresses","title":"Rimu.BitStringAddresses.BoseFSIndex","text":"BoseFSIndex\n\nStruct used for indexing and performing excitations on a BoseFS.\n\nFields:\n\noccnum: the occupation number.\nmode: the index of the mode.\noffset: the position of the mode in the address. This is the bit offset of the mode when\n\nthe address is represented by a bitstring, and the position in the list when it is  represented by SortedParticleList.\n\n\n\n\n\n","category":"type"},{"location":"addresses.html#Rimu.BitStringAddresses.FermiFSIndex","page":"BitString addresses","title":"Rimu.BitStringAddresses.FermiFSIndex","text":"FermiFSIndex\n\nStruct used for indexing and performing excitations on a FermiFS.\n\nFields:\n\noccnum: the occupation number.\nmode: the index of the mode.\noffset: the position of the mode in the address. This is mode - 1 when the address is represented by a bitstring, and the position in the list when using SortedParticleList.\n\n\n\n\n\n","category":"type"},{"location":"addresses.html#Rimu.BitStringAddresses.OccupiedModeMap","page":"BitString addresses","title":"Rimu.BitStringAddresses.OccupiedModeMap","text":"OccupiedModeMap(addr) <: AbstractVector\n\nGet a map of occupied modes in address as an AbstractVector of indices compatible with excitation - BoseFSIndex or FermiFSIndex.\n\nOccupiedModeMap(addr)[i] contains the index for the i-th occupied mode. This is useful because repeatedly looking for occupied modes with find_occupied_mode can be time-consuming. OccupiedModeMap(addr) is an eager version of the iterator returned by occupied_modes. It is similar to onr but contains more information.\n\nExample\n\njulia> b = BoseFS(10, 0, 0, 0, 2, 0, 1)\nBoseFS{13,7}(10, 0, 0, 0, 2, 0, 1)\n\njulia> mb = OccupiedModeMap(b)\n3-element OccupiedModeMap{7, BoseFSIndex}:\n BoseFSIndex(occnum=10, mode=1, offset=0)\n BoseFSIndex(occnum=2, mode=5, offset=14)\n BoseFSIndex(occnum=1, mode=7, offset=18)\n\njulia> f = FermiFS(1,1,1,1,0,0,1,0,0)\nFermiFS{5,9}(1, 1, 1, 1, 0, 0, 1, 0, 0)\n\njulia> mf = OccupiedModeMap(f)\n5-element OccupiedModeMap{5, FermiFSIndex}:\n FermiFSIndex(occnum=1, mode=1, offset=0)\n FermiFSIndex(occnum=1, mode=2, offset=1)\n FermiFSIndex(occnum=1, mode=3, offset=2)\n FermiFSIndex(occnum=1, mode=4, offset=3)\n FermiFSIndex(occnum=1, mode=7, offset=6)\n\njulia> mf == collect(occupied_modes(f))\ntrue\n\njulia> dot(mf, mb)\n11\n\njulia> dot(mf, 1:20)\n17\n\nSee also dot, SingleComponentFockAddress.\n\n\n\n\n\n","category":"type"},{"location":"addresses.html#Rimu.BitStringAddresses.OccupiedPairsMap","page":"BitString addresses","title":"Rimu.BitStringAddresses.OccupiedPairsMap","text":"OccupiedPairsMap(addr::SingleComponentFockAddress) <: AbstractVector\n\nGet a map of all distinct pairs of indices in addr. Pairs involving multiply-occupied modes are counted once, (including self-pairing). This is useful for cases where identifying pairs of particles for eg. interactions is not well-defined or efficient to do on the fly. This is an eager iterator whose elements are a tuple of particle indices that can be given to excitation\n\nExample\n\njulia> addr = BoseFS(10, 0, 0, 0, 2, 0, 1)\nBoseFS{13,7}(10, 0, 0, 0, 2, 0, 1)\n\njulia> pairs = OccupiedPairsMap(addr)\n5-element OccupiedPairsMap{78, Tuple{BoseFSIndex, BoseFSIndex}}:\n (BoseFSIndex(occnum=10, mode=1, offset=0), BoseFSIndex(occnum=10, mode=1, offset=0))\n (BoseFSIndex(occnum=2, mode=5, offset=14), BoseFSIndex(occnum=2, mode=5, offset=14))\n (BoseFSIndex(occnum=2, mode=5, offset=14), BoseFSIndex(occnum=10, mode=1, offset=0))\n (BoseFSIndex(occnum=1, mode=7, offset=18), BoseFSIndex(occnum=10, mode=1, offset=0))\n (BoseFSIndex(occnum=1, mode=7, offset=18), BoseFSIndex(occnum=2, mode=5, offset=14))\n\njulia> excitation(addr, pairs[2], pairs[4])\n(BoseFS{13,7}(9, 0, 0, 0, 4, 0, 0), 10.954451150103322)\n\nSee also OccupiedModeMap.\n\n\n\n\n\n","category":"type"},{"location":"addresses.html#Rimu.BitStringAddresses.SingleComponentFockAddress","page":"BitString addresses","title":"Rimu.BitStringAddresses.SingleComponentFockAddress","text":"SingleComponentFockAddress{N,M} <: AbstractFockAddress{N,M}\n\nA type representing a single component Fock state with N particles and M modes.\n\nImplemented subtypes: BoseFS, FermiFS.\n\nSupported functionality\n\nfind_mode\nfind_occupied_mode\nnum_occupied_modes\noccupied_modes: Lazy iterator.\nOccupiedModeMap: AbstractVector with eager construction.\nexcitation: Create a new address.\nBoseFSIndex and FermiFSIndex for indexing.\n\nSee also CompositeFS, AbstractFockAddress.\n\n\n\n\n\n","category":"type"},{"location":"addresses.html#Rimu.BitStringAddresses.excitation","page":"BitString addresses","title":"Rimu.BitStringAddresses.excitation","text":"excitation(addr::SingleComponentFockAddress, creations::NTuple, destructions::NTuple)\n\nGenerate an excitation on address addr by applying creations and destructions, which are tuples of the appropriate address indices (i.e. BoseFSIndex for bosons, or FermiFSIndex for fermions).\n\na^_c_1 a^_c_2 ldots a_d_1 a_d_2 ldots mathrmaddrrangle to\nαmathrmnaddrrangle\n\nReturns the new address naddr and the factor α. The value of α is given by the square root of the product of mode occupations before destruction and after creation. If the excitation is illegal, returns an arbitrary address and the value 0.0.\n\nExample\n\njulia> f = FermiFS(1,1,0,0,1,1,1,1)\nFermiFS{6,8}(1, 1, 0, 0, 1, 1, 1, 1)\n\njulia> i, j, k, l = find_mode(f, (3,4,2,5))\n(FermiFSIndex(occnum=0, mode=3, offset=2), FermiFSIndex(occnum=0, mode=4, offset=3), FermiFSIndex(occnum=1, mode=2, offset=1), FermiFSIndex(occnum=1, mode=5, offset=4))\n\njulia> excitation(f, (i,j), (k,l))\n(FermiFS{6,8}(1, 0, 1, 1, 0, 1, 1, 1), -1.0)\n\nSee SingleComponentFockAddress.\n\n\n\n\n\n","category":"function"},{"location":"addresses.html#Rimu.BitStringAddresses.find_mode","page":"BitString addresses","title":"Rimu.BitStringAddresses.find_mode","text":"find_mode(::SingleComponentFockAddress, i)\n\nFind the i-th mode in address. Returns BoseFSIndex for BoseFS, and FermiFSIndex for FermiFS. Can work on a tuple of modes. Does not check bounds.\n\njulia> find_mode(BoseFS(1, 0, 2), 2)\nBoseFSIndex(occnum=0, mode=2, offset=2)\n\njulia> find_mode(FermiFS(1, 1, 1, 0), (2,3))\n(FermiFSIndex(occnum=1, mode=2, offset=1), FermiFSIndex(occnum=1, mode=3, offset=2))\n\nSee SingleComponentFockAddress.\n\n\n\n\n\n","category":"function"},{"location":"addresses.html#Rimu.BitStringAddresses.find_occupied_mode","page":"BitString addresses","title":"Rimu.BitStringAddresses.find_occupied_mode","text":"find_occupied_mode(::SingleComponentFockAddress, k)\nfind_occupied_mode(::BoseFS, k, [n])\n\nFind the k-th occupied mode in address (with at least n particles). Returns BoseFSIndex for BoseFS, and FermiFSIndex for FermiFS. When unsuccessful it returns a zero index.\n\nExample\n\njulia> find_occupied_mode(FermiFS(1, 1, 1, 0), 2)\nFermiFSIndex(occnum=1, mode=2, offset=1)\n\njulia> find_occupied_mode(BoseFS(1, 0, 2), 1)\nBoseFSIndex(occnum=1, mode=1, offset=0)\n\njulia> find_occupied_mode(BoseFS(1, 0, 2), 1, 2)\nBoseFSIndex(occnum=2, mode=3, offset=3)\n\nSee also occupied_modes, OccupiedModeMap, SingleComponentFockAddress.\n\n\n\n\n\n","category":"function"},{"location":"addresses.html#Rimu.BitStringAddresses.num_components-Tuple{AbstractFockAddress}","page":"BitString addresses","title":"Rimu.BitStringAddresses.num_components","text":"num_components(::Type{<:AbstractFockAddress})\nnum_components(::AbstractFockAddress)\n\nNumber of components in address.\n\n\n\n\n\n","category":"method"},{"location":"addresses.html#Rimu.BitStringAddresses.num_modes-Tuple{AbstractFockAddress}","page":"BitString addresses","title":"Rimu.BitStringAddresses.num_modes","text":"num_modes(::Type{<:AbstractFockAddress})\nnum_modes(::AbstractFockAddress)\n\nNumber of modes represented by address.\n\n\n\n\n\n","category":"method"},{"location":"addresses.html#Rimu.BitStringAddresses.num_occupied_modes","page":"BitString addresses","title":"Rimu.BitStringAddresses.num_occupied_modes","text":"num_occupied_modes(::SingleComponentFockAddress)\n\nGet the number of occupied modes in address. Equivalent to length(occupied_modes(address)), or the number of non-zeros in its ONR representation.\n\nExample\n\njulia> num_occupied_modes(BoseFS((1, 0, 2)))\n2\njulia> num_occupied_modes(FermiFS((1, 1, 1, 0)))\n3\n\nSee SingleComponentFockAddress.\n\n\n\n\n\n","category":"function"},{"location":"addresses.html#Rimu.BitStringAddresses.num_particles-Tuple{AbstractFockAddress}","page":"BitString addresses","title":"Rimu.BitStringAddresses.num_particles","text":"num_particles(::Type{<:AbstractFockAddress})\nnum_particles(::AbstractFockAddress)\n\nNumber of particles represented by address.\n\n\n\n\n\n","category":"method"},{"location":"addresses.html#Rimu.BitStringAddresses.occupied_modes","page":"BitString addresses","title":"Rimu.BitStringAddresses.occupied_modes","text":"occupied_modes(::SingleComponentFockAddress)\n\nReturn a lazy iterator over all occupied modes in an address. Iterates over BoseFSIndexs for BoseFS, and over FermiFSIndexs for FermiFS. See OccupiedModeMap for an eager version.\n\nExample\n\njulia> b = BoseFS((1,5,0,4));\n\njulia> foreach(println, occupied_modes(b))\nBoseFSIndex(occnum=1, mode=1, offset=0)\nBoseFSIndex(occnum=5, mode=2, offset=2)\nBoseFSIndex(occnum=4, mode=4, offset=9)\n\njulia> f = FermiFS((1,1,0,1,0,0,1));\n\njulia> foreach(println, occupied_modes(f))\nFermiFSIndex(occnum=1, mode=1, offset=0)\nFermiFSIndex(occnum=1, mode=2, offset=1)\nFermiFSIndex(occnum=1, mode=4, offset=3)\nFermiFSIndex(occnum=1, mode=7, offset=6)\n\nSee also find_occupied_mode, SingleComponentFockAddress.\n\n\n\n\n\n","category":"function"},{"location":"addresses.html#Rimu.BitStringAddresses.onr","page":"BitString addresses","title":"Rimu.BitStringAddresses.onr","text":"occupation_number_representation(fs::SingleComponentFockAddress)\nonr(fs::SingleComponentFockAddress)\n\nCompute and return the occupation number representation of the Fock state fs as an SVector{M}, where M is the number of modes.\n\n\n\n\n\n","category":"function"},{"location":"addresses.html#Rimu.BitStringAddresses.@fs_str-Tuple{Any}","page":"BitString addresses","title":"Rimu.BitStringAddresses.@fs_str","text":"fs\"$(string)\"\n\nParse the compact representation of a Fock state. Useful for copying the printout from a vector to the REPL.\n\nExample\n\njulia> DVec(BoseFS{3,4}(0, 1, 2, 0) => 1)\nDVec{BoseFS{3, 4, BitString{6, 1, UInt8}},Int64} with 1 entry, style = IsStochasticInteger{Int64}()\n  fs\"|0 1 2 0⟩\" => 1\n\njulia> fs\"|0 1 2 0⟩\" => 1 # Copied from above printout\nBoseFS{3,4}(0, 1, 2, 0) => 1\n\njulia> fs\"|1 2 3⟩⊗|0 1 0⟩\" # composite bosonic Fock state\nCompositeFS(\n  BoseFS{6,3}(1, 2, 3),\n  BoseFS{1,3}(0, 1, 0),\n)\n\njulia> fs\"|↑↓↑⟩\" # construct a fermionic Fock state\nCompositeFS(\n  FermiFS{2,3}(1, 0, 1),\n  FermiFS{1,3}(0, 1, 0),\n)\n\njulia> s = fs\"|0 1 2 0⟩{}\" # constructing OccupationNumberFS with default UInt8 container\nOccupationNumberFS{4, UInt8}(0, 1, 2, 0)\n\njulia> [s] # prints out with the signifcant number of bits specified in braces\n1-element Vector{OccupationNumberFS{4, UInt8}}:\n fs\"|0 1 2 0⟩{8}\"\n\nSee also FermiFS, BoseFS, CompositeFS, FermiFS2C, OccupationNumberFS.\n\n\n\n\n\n","category":"macro"},{"location":"addresses.html#Rimu.BitStringAddresses.BoseFS","page":"BitString addresses","title":"Rimu.BitStringAddresses.BoseFS","text":"BoseFS{N,M,S} <: SingleComponentFockAddress\n\nAddress type that represents a Fock state of N spinless bosons in M modes by wrapping a BitString, or a SortedParticleList. Which is wrapped is chosen automatically based on the properties of the address.\n\nConstructors\n\nBoseFS{[N,M]}(val::Integer...): Create BoseFS{N,M} from occupation numbers. This is type-stable if the number of modes M and the number of particles N are provided. Otherwise, M and N are inferred from the arguments.\nBoseFS{[N,M]}(onr): Create BoseFS{N,M} from occupation number representation, see onr. This is efficient if N and M are provided, and onr is a statically-sized collection, such as a Tuple or SVector.\nBoseFS{[N,M]}([M, ]pairs...): Provide the number of modes M and mode => occupation_number pairs. If M is provided as a type parameter, it should not be provided as the first argument.  Useful for creating sparse addresses. pairs can be multiple arguments or an iterator of pairs.\nBoseFS{N,M,S}(bs::S): Unsafe constructor. Does not check whether the number of particles in bs is equal to N.\n@fs_str: Addresses are sometimes printed in a compact manner. This representation can also be used as a constructor. See the last example below.\n\nExamples\n\njulia> BoseFS{6,5}(0, 1, 2, 3, 0)\nBoseFS{6,5}(0, 1, 2, 3, 0)\n\njulia> BoseFS([abs(i - 3) ≤ 1 ? i - 1 : 0 for i in 1:5])\nBoseFS{6,5}(0, 1, 2, 3, 0)\n\njulia> BoseFS(5, 2 => 1, 3 => 2, 4 => 3)\nBoseFS{6,5}(0, 1, 2, 3, 0)\n\njulia> BoseFS{6,5}(i => i - 1 for i in 2:4)\nBoseFS{6,5}(0, 1, 2, 3, 0)\n\njulia> fs\"|0 1 2 3 0⟩\"\nBoseFS{6,5}(0, 1, 2, 3, 0)\n\njulia> fs\"|b 5: 2 3 3 4 4 4⟩\"\nBoseFS{6,5}(0, 1, 2, 3, 0)\n\nSee also: SingleComponentFockAddress, OccupationNumberFS, FermiFS, CompositeFS, FermiFS2C.\n\n\n\n\n\n","category":"type"},{"location":"addresses.html#Rimu.BitStringAddresses.bose_hubbard_interaction-Union{Tuple{BoseFS{<:Any, <:Any, A}}, Tuple{A}} where A<:BitString","page":"BitString addresses","title":"Rimu.BitStringAddresses.bose_hubbard_interaction","text":"bose_hubbard_interaction(address)\n\nReturn Σ_i n_i (n_i-1) for computing the Bose-Hubbard on-site interaction (without the U prefactor.)\n\nExample\n\njulia> Hamiltonians.bose_hubbard_interaction(BoseFS{4,4}((2,1,1,0)))\n2\njulia> Hamiltonians.bose_hubbard_interaction(BoseFS{4,4}((3,0,1,0)))\n6\n\n\n\n\n\n","category":"method"},{"location":"addresses.html#Rimu.BitStringAddresses.hopnextneighbour-Union{Tuple{A}, Tuple{M}, Tuple{N}, Tuple{BoseFS{N, M, A}, Any}} where {N, M, A<:BitString}","page":"BitString addresses","title":"Rimu.BitStringAddresses.hopnextneighbour","text":"new_address, value = hopnextneighbour(add, chosen, boundary_condition)\n\nCompute the new address of a hopping event for the Hubbard model. Returns the new address and the square root of product of occupation numbers of the involved modes multiplied by a term consistent with boundary condition as the value.  The following boundary conditions are supported:\n\n:periodic: hopping over the boundary gives does not change the value.\n:twisted: hopping over the boundary flips the sign of the value.\n:hard_wall: hopping over the boundary gives a value of zero.\nθ <: Number: hopping over the boundary gives a value multiplied by exp(iθ) or exp(iθ) depending on the direction of hopping.\n\nThe off-diagonals are indexed as follows:\n\n(chosen + 1) ÷ 2 selects the hopping site.\nEven chosen indicates a hop to the left.\nOdd chosen indicates a hop to the right.\n\nExample\n\njulia> using Rimu.Hamiltonians: hopnextneighbour\n\njulia> hopnextneighbour(BoseFS(1, 0, 1), 3)\n(BoseFS{2,3}(2, 0, 0), 1.4142135623730951)\n\njulia> hopnextneighbour(BoseFS(1, 0, 1), 4)\n(BoseFS{2,3}(1, 1, 0), 1.0)\n\njulia> hopnextneighbour(BoseFS(1, 0, 1), 3, :twisted)\n(BoseFS{2,3}(2, 0, 0), -1.4142135623730951)\n\njulia> hopnextneighbour(BoseFS(1, 0, 1), 3, :hard_wall)\n(BoseFS{2,3}(2, 0, 0), 0.0)\n\njulia> hopnextneighbour(BoseFS(1, 0, 1), 3, π/4)\n(BoseFS{2,3}(2, 0, 0), 1.0000000000000002 + 1.0im)\n\n\n\n\n\n","category":"method"},{"location":"addresses.html#Rimu.BitStringAddresses.near_uniform-Union{Tuple{Type{<:BoseFS{N, M}}}, Tuple{M}, Tuple{N}} where {N, M}","page":"BitString addresses","title":"Rimu.BitStringAddresses.near_uniform","text":"near_uniform(BoseFS{N,M}) -> BoseFS{N,M}\n\nCreate bosonic Fock state with near uniform occupation number of M modes with a total of N particles.\n\nExamples\n\njulia> near_uniform(BoseFS{7,5})\nBoseFS{7,5}(2, 2, 1, 1, 1)\n\njulia> near_uniform(FermiFS{3,5})\nFermiFS{3,5}(1, 1, 1, 0, 0)\n\n\n\n\n\n","category":"method"},{"location":"addresses.html#Rimu.BitStringAddresses.FermiFS","page":"BitString addresses","title":"Rimu.BitStringAddresses.FermiFS","text":"FermiFS{N,M,S} <: SingleComponentFockAddress\n\nAddress type that represents a Fock state of N fermions of the same spin in M modes by wrapping a BitString, or a SortedParticleList. Which is wrapped is chosen automatically based on the properties of the address.\n\nConstructors\n\nFermiFS{[N,M]}(val::Integer...): Create FermiFS{N,M} from occupation numbers. This is type-stable if the number of modes M and the number of particles N are provided. Otherwise, M and N are inferred from the arguments.\nFermiFS{[N,M]}(onr): Create FermiFS{N,M}  from occupation number representation, see onr. This is efficient if N and M are provided, and onr is a statically-sized collection, such as a Tuple{M} or SVector{M}.\nFermiFS{[N,M]}([M, ]pairs...): Provide the number of modes M and pairs of the form mode => 1. If M is provided as a type parameter, it should not be provided as the first argument.  Useful for creating sparse addresses. pairs can be multiple arguments or an iterator of pairs.\nFermiFS{N,M,S}(bs::S): Unsafe constructor. Does not check whether the number of particles in bs is equal to N, or whether each mode only contains one particle.\n@fs_str: Addresses are sometimes printed in a compact manner. This representation can also be used as a constructor. See the last example below.\n\nExamples\n\njulia> FermiFS{3,5}(0, 1, 1, 1, 0)\nFermiFS{3,5}(0, 1, 1, 1, 0)\n\njulia> FermiFS([abs(i - 3) ≤ 1 for i in 1:5])\nFermiFS{3,5}(0, 1, 1, 1, 0)\n\njulia> FermiFS(5, 2 => 1, 3 => 1, 4 => 1)\nFermiFS{3,5}(0, 1, 1, 1, 0)\n\njulia> FermiFS{3,5}(i => 1 for i in 2:4)\nFermiFS{3,5}(0, 1, 1, 1, 0)\n\njulia> fs\"|⋅↑↑↑⋅⟩\"\nFermiFS{3,5}(0, 1, 1, 1, 0)\n\njulia> fs\"|f 5: 2 3 4⟩\"\nFermiFS{3,5}(0, 1, 1, 1, 0)\n\nSee also: SingleComponentFockAddress, BoseFS, CompositeFS, FermiFS2C, BitString, OccupationNumberFS.\n\n\n\n\n\n","category":"type"},{"location":"addresses.html#Rimu.BitStringAddresses.BoseFS2C","page":"BitString addresses","title":"Rimu.BitStringAddresses.BoseFS2C","text":"BoseFS2C{NA,NB,M,AA,AB} <: AbstractFockAddress\nBoseFS2C(onr_a, onr_b)\n\nAddress type that constructed with two BoseFS{N,M,S}. It represents a Fock state with two components, e.g. two different species of bosons with particle number NA from species S and particle number NB from species B. The number of modes M is expected to be the same for both components.\n\n\n\n\n\n","category":"type"},{"location":"addresses.html#Rimu.BitStringAddresses.CompositeFS","page":"BitString addresses","title":"Rimu.BitStringAddresses.CompositeFS","text":"CompositeFS(addresses::SingleComponentFockAddress...) <: AbstractFockAddress\n\nUsed to encode addresses for multi-component models. All component addresses are expected have the same number of modes.\n\nSee also: BoseFS, FermiFS, SingleComponentFockAddress, num_modes, FermiFS2C, AbstractFockAddress.\n\n\n\n\n\n","category":"type"},{"location":"addresses.html#Rimu.BitStringAddresses.FermiFS2C","page":"BitString addresses","title":"Rimu.BitStringAddresses.FermiFS2C","text":"FermiFS2C <: AbstractFockAddress\nFermiFS2C(onr_a, onr_b)\n\nFock state address with two fermionic (spin) components. Alias for CompositeFS with two FermiFS components. Construct by specifying either two compatible FermiFSs, two onrs, or the number of modes followed by mode => occupation_number pairs, where occupation_number=1 will put a particle in the first component and occupation_number=-1 will put a particle in the second component. See examples below.\n\nExamples\n\njulia> FermiFS2C(FermiFS(1,0,0), FermiFS(0,1,1))\nCompositeFS(\n  FermiFS{1,3}(1, 0, 0),\n  FermiFS{2,3}(0, 1, 1),\n)\n\njulia> FermiFS2C((1,0,0), (0,1,1))\nCompositeFS(\n  FermiFS{1,3}(1, 0, 0),\n  FermiFS{2,3}(0, 1, 1),\n)\n\njulia> FermiFS2C(3, 1 => 1, 2 => -1, 3 => -1)\nCompositeFS(\n  FermiFS{1,3}(1, 0, 0),\n  FermiFS{2,3}(0, 1, 1),\n)\n\njulia> fs\"|↑↓↓⟩\"\nCompositeFS(\n  FermiFS{1,3}(1, 0, 0),\n  FermiFS{2,3}(0, 1, 1),\n)\n\n\n\n\n\n","category":"type"},{"location":"addresses.html#Rimu.BitStringAddresses.time_reverse-Union{Tuple{CompositeFS{2, N, M, T}}, Tuple{T}, Tuple{M}, Tuple{N}} where {N, M, T<:(Tuple{T, T} where T)}","page":"BitString addresses","title":"Rimu.BitStringAddresses.time_reverse","text":"time_reverse(addr)\n\nApply the time-reversal operation on a two-component Fock address that flips all the spins.\n\nRequires each component address to have the same type.\n\n\n\n\n\n","category":"method"},{"location":"addresses.html#Rimu.BitStringAddresses.OccupationNumberFS","page":"BitString addresses","title":"Rimu.BitStringAddresses.OccupationNumberFS","text":"OccupationNumberFS{M,T} <: SingleComponentFockAddress\n\nAddress type that stores the occupation numbers of a single component bosonic Fock state with M modes. The occupation numbers must fit into the type T <: Unsigned. The number of particles is runtime data, and can be retrieved with num_particles(address).\n\nConstructors\n\nOccupationNumberFS(val::Integer...): Construct from occupation numbers. Must be < 256 to fit into UInt8.\nOccupationNumberFS{[M,T]}(onr): Construct from collection onr with M occupation numbers with type T. If unspecified, the type T of the occupation numbers is inferred from the type of the arguments.\nOccupationNumberFS(fs::BoseFS): Construct from BoseFS.\nWith shortform macro @fs_str. Specify the number of significant bits in braces. See example below.\n\nExamples\n\njulia> ofs = OccupationNumberFS(1,2,3)\nOccupationNumberFS{3, UInt8}(1, 2, 3)\n\njulia> ofs == fs\"|1 2 3⟩{8}\"\ntrue\n\njulia> num_particles(ofs)\n6\n\n\n\n\n\n","category":"type"},{"location":"addresses.html#Rimu.BitStringAddresses.excitation-Union{Tuple{T}, Tuple{OccupationNumberFS{<:Any, T}, Tuple{Vararg{Int64, var\"#s61\"}} where var\"#s61\", Tuple{Vararg{Int64, var\"#s5\"}} where var\"#s5\"}} where T","page":"BitString addresses","title":"Rimu.BitStringAddresses.excitation","text":"excitation(addr::OccupationNumberFS, c::NTuple, d::NTuple)\n→ (nadd, α)\n\nGenerate an excitation on an OccupationNumberFS by applying the creation and destruction operators specified by the tuples of mode numbers c and d to the Fock state addr. The modes are indexed by integers (starting at 1), or by indices of type BoseFSIndex. The value of α is given by the square root of the product of mode occupations before destruction and after creation.\n\nThe number of particles may change by this type of excitation.\n\nExample\n\njulia> s = fs\"|1 2 3⟩{8}\"\nOccupationNumberFS{3, UInt8}(1, 2, 3)\n\njulia> num_particles(s)\n6\n\njulia> es, α = excitation(s, (1,1), (3,))\n(OccupationNumberFS{3, UInt8}(3, 2, 2), 4.242640687119285)\n\njulia> num_particles(es)\n7\n\n\n\n\n\n","category":"method"},{"location":"addresses.html#Internal-representations","page":"BitString addresses","title":"Internal representations","text":"","category":"section"},{"location":"addresses.html","page":"BitString addresses","title":"BitString addresses","text":"The atomic addresses, BoseFS and FermiFS, are implemented as either bitstrings or sorted lists of particles. Using these approaches over an occupation number representation makes the addresses much more space-efficient.","category":"page"},{"location":"addresses.html","page":"BitString addresses","title":"BitString addresses","text":"Therewhile OccupationNumberFS internally uses the occupation number representation,  which allows it to handle excitation operations that change the particle number. This is fast but requires more storage space.","category":"page"},{"location":"addresses.html#Internal-APIs","page":"BitString addresses","title":"Internal APIs","text":"","category":"section"},{"location":"addresses.html","page":"BitString addresses","title":"BitString addresses","text":"Modules = [BitStringAddresses]\nPages = [\"bitstring.jl\", \"sortedparticlelist.jl\"]\nPrivate = false","category":"page"},{"location":"addresses.html#Rimu.BitStringAddresses.BitString","page":"BitString addresses","title":"Rimu.BitStringAddresses.BitString","text":"BitString{B,N,T<:Unsigned}\n\nType for storing bitstrings of static size. Holds B bits in N chunks, where each chunk is of type T.\n\nN is chosen automatically to accommodate B bits as efficiently as possible.\n\nConstructors\n\nBitString{B,N,T}(::SVector{N,T}): unsafe constructor. Does not check for ghost bits.\nBitString{B,N,T}(i::T): as above, but sets i as the rightmost chunk.\nBitString{B}(::Integer): Convert integer to BitString. Integer is truncated to the correct number of bits.\n\n\n\n\n\n","category":"type"},{"location":"addresses.html#Rimu.BitStringAddresses.SortedParticleList","page":"BitString addresses","title":"Rimu.BitStringAddresses.SortedParticleList","text":"SortedParticleList{N,M,T<:Unsigned}\n\nType for storing sparse fock states. Stores the mode number of each particle as an entry with only its mode stored. The entries are always kept sorted.\n\nIterating over SortedParticleLists yields occupied modes as a tuple of occupation number, mode number, and position in list.\n\nConstructors\n\nSortedParticleList{N,M,T}(::SVector{N,T}): unsafe constructor. Does not sort input.\nSortedParticleList(arr::AbstractVector): convert ONR to SortedParticleList\n\n\n\n\n\n","category":"type"},{"location":"addresses.html#Index","page":"BitString addresses","title":"Index","text":"","category":"section"},{"location":"addresses.html","page":"BitString addresses","title":"BitString addresses","text":"Pages   = [\"addresses.md\"]","category":"page"},{"location":"API.html#API","page":"API","title":"API","text":"","category":"section"},{"location":"API.html#Rimu","page":"API","title":"Rimu","text":"","category":"section"},{"location":"API.html","page":"API","title":"API","text":"Modules = [Rimu]","category":"page"},{"location":"API.html#Rimu.Rimu","page":"API","title":"Rimu.Rimu","text":"Rimu\n\nRandom integrators for many-body quantum systems\n\nWelcome to Rimu version 0.13.0. Read the documentation online.\n\n\n\n\n\n","category":"module"},{"location":"API.html#Rimu.PACKAGE_VERSION","page":"API","title":"Rimu.PACKAGE_VERSION","text":"Rimu.PACKAGE_VERSION\n\nConstant that contains the current VersionNumber of Rimu.\n\n\n\n\n\n","category":"constant"},{"location":"API.html#DataFrames.DataFrame-Tuple{Rimu.Report}","page":"API","title":"DataFrames.DataFrame","text":"DataFrame(report::Report)\n\nConvert the Report to a DataFrame. Metadata is added as metadata to the DataFrame.\n\n\n\n\n\n","category":"method"},{"location":"API.html#Rimu.AllOverlaps","page":"API","title":"Rimu.AllOverlaps","text":"AllOverlaps(n_replicas=2; operator=nothing, transform=nothing, vecnorm=true)\n    <: ReplicaStrategy{n_replicas}\n\nRun n_replicas replicas and report overlaps between all pairs of replica vectors. If operator is not nothing, the overlap dot(c1, operator, c2) is reported as well. If operator is a tuple of operators, the overlaps are computed for all operators.\n\nColumn names in the report are of the form c{i}_dot_c{j} for vector-vector overlaps, and c{i}_Op{k}_c{j} for operator overlaps.\n\nSee ProjectorMonteCarloProblem, ReplicaStrategy and AbstractOperator (for an interface for implementing operators).\n\nTransformed Hamiltonians\n\nIf a transformed Hamiltonian G has been passed to ProjectorMonteCarloProblem then overlaps can be calculated by passing the same transformed Hamiltonian to AllOverlaps by setting transform=G. A warning is given if these two Hamiltonians do not match.\n\nImplemented transformations are:\n\nGutzwillerSampling\nGuidingVectorSampling\n\nIn the case of a transformed Hamiltonian the overlaps are defined as follows. For a similarity transformation G of the Hamiltonian (see e.g. GutzwillerSampling.)\n\n    hatG = f hatH f^-1\n\nThe expectation value of an operator hatA is\n\n    langle hatA rangle = langle psi  hatA  psi rangle\n        = fraclangle phi  f^-1 hatA f^-1  phi ranglelangle phi  f^-2  phi rangle\n\nwhere\n\n     phi rangle = f  psi rangle\n\nis the (right) eigenvector of hatG and  psi rangle is an eigenvector of hatH.\n\nFor a K-tuple of input operators (hatA_1  hatA_K), overlaps of langle phi  f^-1 hatA f^-1  phi rangle are reported as c{i}_Op{k}_c{j}. The correct vector-vector overlap langle phi  f^-2  phi rangle is reported last as c{i}_Op{K+1}_c{j}. This is in addition to the bare vector-vector overlap langle phi  f^-2  phi rangle that is reported as c{i}_dot_c{j}.\n\nIn either case the c{i}_dot_c{j} overlap can be omitted with the flag vecnorm=false.\n\n\n\n\n\n","category":"type"},{"location":"API.html#Rimu.ConstantTimeStep","page":"API","title":"Rimu.ConstantTimeStep","text":"ConstantTimeStep <: TimeStepStrategy\n\nKeep time_step constant.\n\n\n\n\n\n","category":"type"},{"location":"API.html#Rimu.DefaultShiftParameters","page":"API","title":"Rimu.DefaultShiftParameters","text":"DefaultShiftParameters\n\nDefault mutable struct for storing the shift parameters.\n\nSee ShiftStrategy, initialise_shift_parameters.\n\n\n\n\n\n","category":"type"},{"location":"API.html#Rimu.DontUpdate","page":"API","title":"Rimu.DontUpdate","text":"DontUpdate(; target_walkers = 1_000) <: ShiftStrategy\n\nDon't update the shift.  Return when target_walkers is reached.\n\nSee ShiftStrategy, ProjectorMonteCarloProblem.\n\n\n\n\n\n","category":"type"},{"location":"API.html#Rimu.DoubleLogProjected","page":"API","title":"Rimu.DoubleLogProjected","text":"DoubleLogProjected(; target, projector, ζ = 0.08, ξ = ζ^2/4) <: ShiftStrategy\n\nStrategy for updating the shift according to the log formula with damping parameter ζ and ξ after projecting onto projector.\n\nS^n+1 = S^n -fracζdτlnleft(fracPΨ^(n+1)PΨ^(n)right)-fracξdτlnleft(fracPΨ^(n+1)texttargetright)\n\nNote that adjusting the keyword maxlength in ProjectorMonteCarloProblem is advised as the default may not be appropriate.\n\nSee ShiftStrategy, ProjectorMonteCarloProblem.\n\n\n\n\n\n","category":"type"},{"location":"API.html#Rimu.DoubleLogSumUpdate","page":"API","title":"Rimu.DoubleLogSumUpdate","text":"DoubleLogSumUpdate(; target_walkers = 1000, ζ = 0.08, ξ = ζ^2/4, α = 1/2) <: ShiftStrategy\n\nStrategy for updating the shift according to the log formula with damping parameters ζ and ξ.\n\nS^n+1 = S^n -fracζdτlnleft(fracN_mathrmw^n+1N_mathrmw^nright)\n- fracξdτlnleft(fracN_mathrmw^n+1N_mathrmw^texttargetright)\n\nwhere N_mathrmw = (1-α)*walkernumber() + α*UniformProjector()⋅ψ computed with walkernumber() and UniformProjector(). When ξ = ζ^2/4 this corresponds to critical damping with a damping time scale T = 2/ζ.\n\nSee ShiftStrategy, ProjectorMonteCarloProblem.\n\n\n\n\n\n","category":"type"},{"location":"API.html#Rimu.DoubleLogUpdate","page":"API","title":"Rimu.DoubleLogUpdate","text":"DoubleLogUpdate(; target_walkers = 1_000, ζ = 0.08, ξ = ζ^2/4) <: ShiftStrategy\n\nStrategy for updating the shift according to the log formula with damping parameter ζ and ξ.\n\nS^n+1 = S^n -fracζdτlnleft(fracΨ_1^n+1Ψ_1^nright)-fracξdτlnleft(fracΨ_1^n+1Ψ_1^texttargetright)\n\nWhen ξ = ζ^2/4 this corresponds to critical damping with a damping time scale T = 2/ζ.\n\nSee ShiftStrategy, ProjectorMonteCarloProblem.\n\n\n\n\n\n","category":"type"},{"location":"API.html#Rimu.DoubleLogUpdateAfterTargetWalkers","page":"API","title":"Rimu.DoubleLogUpdateAfterTargetWalkers","text":"DoubleLogUpdateAfterTargetWalkers(target_walkers = 1_000, ζ = 0.08, ξ = ζ^2/4) <: ShiftStrategy\n\nStrategy for updating the shift: After target_walkers is reached, update the shift according to the log formula with damping parameter ζ and ξ.\n\nSee DoubleLogUpdate, ShiftStrategy, ProjectorMonteCarloProblem.\n\n\n\n\n\n","category":"type"},{"location":"API.html#Rimu.FCIQMC","page":"API","title":"Rimu.FCIQMC","text":"FCIQMC(; kwargs...) <: PMCAlgorithm\n\nAlgorithm for the full configuration interaction quantum Monte Carlo (FCIQMC) method. The default algorithm for ProjectorMonteCarloProblem.\n\nKeyword arguments and defaults:\n\nshift_strategy = DoubleLogUpdate(; targetwalkers = 1_000, ζ = 0.08,   ξ = ζ^2/4): How to update the shift.\ntime_step_strategy = ConstantTimeStep(): Adjust time step or not.\n\nSee also ProjectorMonteCarloProblem, ShiftStrategy, TimeStepStrategy, DoubleLogUpdate, ConstantTimeStep.\n\n\n\n\n\n","category":"type"},{"location":"API.html#Rimu.FciqmcRunStrategy","page":"API","title":"Rimu.FciqmcRunStrategy","text":" FciqmcRunStrategy{T}\n\nAbstract type representing the strategy for running and terminating lomc!(). The type parameter T is relevant for reporting the shift and the norm.\n\nImplemented strategies:\n\nRunTillLastStep\n\nwarning: Warning\nThe use of this strategy is deprecated. Pass the relevant arguments directly to ProjectorMonteCarloProblem or to lomc!() instead.\n\n\n\n\n\n","category":"type"},{"location":"API.html#Rimu.FirstOrderTransitionOperator","page":"API","title":"Rimu.FirstOrderTransitionOperator","text":"FirstOrderTransitionOperator(hamiltonian, shift, time_step) <: AbstractHamiltonian\nFirstOrderTransitionOperator(sp::DefaultShiftParameters, hamiltonian)\n\nFirst order transition operator\n\n𝐓 = 1 + dτ(S - 𝐇)\n\nwhere 𝐇 is the hamiltonian, dτ the time_step and S is the shift.\n\n𝐓 represents the first order expansion of the exponential evolution operator of the imaginary-time Schrödinger equation (Euler step) and repeated application will project out the ground state eigenvector of the hamiltonian.  It is the transition operator used in FCIQMC.\n\n\n\n\n\n","category":"type"},{"location":"API.html#Rimu.GramSchmidt","page":"API","title":"Rimu.GramSchmidt","text":"GramSchmidt{S} <: SpectralStrategy{S}\n\nUse the Gram-Schmidt procedure to orthogonalize the excited states. A total of S spectral states are used in the simulation.\n\n\n\n\n\n","category":"type"},{"location":"API.html#Rimu.LogUpdate","page":"API","title":"Rimu.LogUpdate","text":"LogUpdate(ζ = 0.08) <: ShiftStrategy\n\nStrategy for updating the shift according to the log formula with damping parameter ζ.\n\nS^n+1 = S^n -fracζdτlnleft(fracΨ_1^n+1Ψ_1^nright)\n\nSee ShiftStrategy, ProjectorMonteCarloProblem.\n\n\n\n\n\n","category":"type"},{"location":"API.html#Rimu.LogUpdateAfterTargetWalkers","page":"API","title":"Rimu.LogUpdateAfterTargetWalkers","text":"LogUpdateAfterTargetWalkers(target_walkers = 1_000, ζ = 0.08) <: ShiftStrategy\n\nStrategy for updating the shift: After target_walkers is reached, update the shift according to the log formula with damping parameter ζ.\n\nSee LogUpdate, ShiftStrategy, ProjectorMonteCarloProblem.\n\n\n\n\n\n","category":"type"},{"location":"API.html#Rimu.MultiScalar","page":"API","title":"Rimu.MultiScalar","text":"MultiScalar\n\nWrapper over a tuple that supports +, *, min, and max. Used with MPI communication because SVectors are treated as arrays by MPI.Allreduce and Tuples do not support scalar operations.\n\nExample\n\nSuppose you want to compute the sum of a vector dv and also get the number of positive elements it has in a single pass. You can use MultiScalar:\n\njulia> dv = DVec(:a => 1, :b => -2, :c => 1);\n\njulia> s, p = mapreduce(+, values(dv)) do v\n    Rimu.MultiScalar(v, Int(sign(v) == 1))\nend;\n\njulia> s, p\n(0, 2)\n\nThis will work with MPIData.\n\nNote that only MultiScalars with the same types can be operated on. This is a feature, as it forces type stability.\n\n\n\n\n\n","category":"type"},{"location":"API.html#Rimu.NoStats","page":"API","title":"Rimu.NoStats","text":"NoStats(N=1) <: ReplicaStrategy{N}\n\nThe default ReplicaStrategy. N replicas are run, but no statistics are collected.\n\nSee also ProjectorMonteCarloProblem.\n\n\n\n\n\n","category":"type"},{"location":"API.html#Rimu.PMCAlgorithm","page":"API","title":"Rimu.PMCAlgorithm","text":"PMCAlgorithm\n\nAbstract type for projector Monte Carlo algorithms.\n\nSee ProjectorMonteCarloProblem, FCIQMC.\n\n\n\n\n\n","category":"type"},{"location":"API.html#Rimu.PMCSimulation","page":"API","title":"Rimu.PMCSimulation","text":"PMCSimulation\n\nHolds the state and the results of a projector quantum Monte Carlo (PMC) simulation. Is returned by init(::ProjectorMonteCarloProblem) and solved with solve!(::PMCSimulation).\n\nObtain the results of a simulation sm as a DataFrame with DataFrame(sm).\n\nSee also state_vectors, ProjectorMonteCarloProblem, init, solve!.\n\n\n\n\n\n","category":"type"},{"location":"API.html#Rimu.PostStepStrategy","page":"API","title":"Rimu.PostStepStrategy","text":"PostStepStrategy\n\nSubtypes of PostStepStrategy can be used to perform arbitrary computation on a single state after an FCIQMC step is finished and report the results.\n\nImplemented strategies:\n\nProjectedEnergy\nProjector\nSignCoherence\nWalkerLoneliness\nTimer\n\nNote: A tuple of multiple strategies can be passed to ProjectorMonteCarloProblem. In that case, all reported column names must be distinct.\n\nInterface:\n\nA subtype of this type must implement post_step_action(::PostStepStrategy, ::SingleState, step::Int).\n\n\n\n\n\n","category":"type"},{"location":"API.html#Rimu.ProjectedEnergy","page":"API","title":"Rimu.ProjectedEnergy","text":"ProjectedEnergy(hamiltonian, projector; hproj=:hproj, vproj=:vproj) <: PostStepStrategy\n\nAfter every step, compute hproj = dot(projector, hamiltonian, dv) and vproj = dot(projector, dv), where dv is the instantaneous coefficient vector.  projector can be an AbstractDVec, or an AbstractProjector.\n\nReports to columns hproj and vproj, which can be used to compute projective energy, e.g. with projected_energy. The keyword arguments hproj and vproj can be used to change the names of these columns. This can be used to make the names unique when computing projected energies with different projectors in the same run.\n\nSee also projected_energy, ratio_of_means, mixed_estimator, and PostStepStrategy.\n\n\n\n\n\n","category":"type"},{"location":"API.html#Rimu.Projector","page":"API","title":"Rimu.Projector","text":"Projector(name=projector) <: PostStepStrategy\n\nAfter each step, compute dot(projector, dv) and report it in the DataFrame under name. projector can be an AbstractDVec, or an AbstractProjector.\n\n\n\n\n\n","category":"type"},{"location":"API.html#Rimu.ProjectorMonteCarloProblem","page":"API","title":"Rimu.ProjectorMonteCarloProblem","text":"ProjectorMonteCarloProblem(hamiltonian::AbstractHamiltonian; kwargs...)\n\nDefines a problem to be solved by projector quantum Monte Carlo (QMC) methods, such as the the FCIQMC algorithm.\n\nCommon keyword arguments and defaults:\n\ntime_step = 0.01: Initial time step size.\nlast_step = 100: Controls the number of steps.\ntarget_walkers = 1_000: Target for the 1-norm of the coefficient vector.\nstart_at = starting_address(hamiltonian): Define the initial state vector(s).   An r  s matrix of state vectors can be passed where r is the   number of replicas and s the number of spectral states. See also   default_starting_vector.\nstyle = IsDynamicSemistochastic(): The StochasticStyle of the simulation.\ninitiator = false: Whether to use initiators. Can be true, false, or a valid   InitiatorRule.\nthreading: Default is to use multithreading and/or MPI if available. Set to true to force PDVec for the starting vector, false for serial computation; may be overridden by start_at.\nreporting_strategy = ReportDFAndInfo(): How and when to report results, see ReportingStrategy.\npost_step_strategy = (): Extract observables (e.g. ProjectedEnergy), see PostStepStrategy.\nn_replicas = 1: Number of synchronised independent simulations.\nreplica_strategy = NoStats(n_replicas): Which results to report from replica simulations, see ReplicaStrategy.\n\nExample\n\njulia> hamiltonian = HubbardReal1D(BoseFS(1,2,3));\n\njulia> problem = ProjectorMonteCarloProblem(hamiltonian; target_walkers = 500, last_step = 100);\n\njulia> simulation = solve(problem);\n\njulia> simulation.success[]\ntrue\n\njulia> size(DataFrame(simulation))\n(100, 9)\n\nFurther keyword arguments:\n\nstarting_step = 1: Starting step of the simulation.\nwalltime = Inf: Maximum time allowed for the simulation.\nsimulation_plan = SimulationPlan(; starting_step, last_step, walltime): Defines the   duration of the simulation. Takes precedence over last_step and walltime.\nζ = 0.08: Damping parameter for the shift update.\nξ = ζ^2/4: Forcing parameter for the shift update.\nshift_strategy = DoubleLogUpdate(; target_walkers, ζ, ξ): How to update the shift,   see ShiftStrategy.\ntime_step_strategy = ConstantTimeStep(): Adjust time step or not, see   TimeStepStrategy.\nalgorithm = FCIQMC(; shift_strategy, time_step_strategy): The algorithm to use.   Currenlty only FCIQMC is implemented.\nshift: Initial shift value or collection of shift values. Determined by default from the   Hamiltonian and the starting vectors.\ninitial_shift_parameters: Initial shift parameters or collection of initial shift   parameters. Overrides shift if provided.\nmaxlength = 2 * target_walkers + 100: Maximum length of the vectors.\ndisplay_name = \"PMCSimulation\": Name displayed in progress bar (via ProgressLogging).\nmetadata: User-supplied metadata to be added to the report. Must be an iterable of pairs or a NamedTuple, e.g. metadata = (\"key1\" => \"value1\", \"key2\" => \"value2\"). All metadata is converted to strings.\nrandom_seed = true: Provide and store a seed for the random number generator. If set to   true, a random seed is generated. If set to number, this number is used as the seed.   The seed is used by solve such that solveing the problem twice will yield identical   results. If set to false, no seed is used and results are not reproducible.\n\nSee also init, solve.\n\n\n\n\n\n","category":"type"},{"location":"API.html#Rimu.ReplicaState","page":"API","title":"Rimu.ReplicaState","text":"ReplicaState <: AbstractMatrix{SingleState}\n\nHolds information about multiple replicas of SpectralStates.\n\nIndexing the ReplicaState state[i, j] returns a SingleState from the ith replica and jth spectral state.\n\nSee also ReplicaStrategy, SpectralState, SingleState, PMCSimulation.\n\n\n\n\n\n","category":"type"},{"location":"API.html#Rimu.ReplicaStrategy","page":"API","title":"Rimu.ReplicaStrategy","text":"ReplicaStrategy{N}\n\nSupertype for strategies that can be passed to ProjectorMonteCarloProblem and control how many replicas are used, and what information is computed and returned. The number of replicas is N.\n\nConcrete implementations\n\nNoStats: run (possibly one) replica(s), but don't report any additional info.\nAllOverlaps: report overlaps between all pairs of replica vectors.\n\nInterface\n\nA subtype of ReplicaStrategy{N} must implement the following function:\n\nRimu.replica_stats - return a tuple of Strings or Symbols of names for replica statistics and a tuple of the values. These will be reported to the DataFrame returned by ProjectorMonteCarloProblem.\n\n\n\n\n\n","category":"type"},{"location":"API.html#Rimu.Report","page":"API","title":"Rimu.Report","text":"Report()\nReport(df::DataFrame)\n\nInternal structure that holds the temporary reported values as well as metadata. It can be converted to a DataFrame with DataFrame(report::Report).\n\nSee report!, report_metadata!, get_metadata.\n\n\n\n\n\n","category":"type"},{"location":"API.html#Rimu.ReportDFAndInfo","page":"API","title":"Rimu.ReportDFAndInfo","text":"ReportDFAndInfo(; reporting_interval=1, info_interval=100, io=stdout, writeinfo=false) <: ReportingStrategy\n\nThe default ReportingStrategy. Report every reporting_intervalth step to a DataFrame and write info message to io every info_intervalth reported step (unless writeinfo == false). The flag writeinfo is useful for controlling info messages in MPI codes, e.g. by setting writeinfo =is_mpi_root().\n\n\n\n\n\n","category":"type"},{"location":"API.html#Rimu.ReportToFile","page":"API","title":"Rimu.ReportToFile","text":"ReportToFile(; kwargs...) <: ReportingStrategy\n\nReportingStrategy that writes the report directly to a file in the Arrow format. Useful when dealing with long jobs or large numbers of replicas, when the report can incur a significant memory cost.\n\nThe arrow file can be read back in with load_df(filename) or using Arrow; Arrow.Table(filename).\n\nKeyword arguments\n\nfilename = \"out.arrow\": the file to report to. If the file already exists, a new file is created.\nreporting_interval = 1: interval between simulation steps that are reported.\nchunk_size = 1000: the size of each chunk that is written to the file. A DataFrame of this size is collected in memory and written to disk. When saving, an info message is also printed to io.\nsave_if =is_mpi_root(): if this value is true, save the report, otherwise ignore it.\nreturn_df = false: if this value is true, read the file and return the data frame at the end of computation. Otherwise, an empty DataFrame is returned.\nio = stdout: The IO to print messages to. Set to devnull if you don't want to see messages printed out.\ncompress = :zstd: compression algorithm to use. Can be :zstd, :lz4 or nothing.\n\nSee also load_df and save_df.\n\n\n\n\n\n","category":"type"},{"location":"API.html#Rimu.ReportingStrategy","page":"API","title":"Rimu.ReportingStrategy","text":"ReportingStrategy\n\nAbstract type for strategies for reporting data in a DataFrame with report!().\n\nImplemented strategies:\n\nReportDFAndInfo\nReportToFile\n\nInterface:\n\nA ReportingStrategy can define any of the following:\n\nrefine_reporting_strategy\nreport!\nreport_after_step!\nfinalize_report!\nreporting_interval\n\n\n\n\n\n","category":"type"},{"location":"API.html#Rimu.RunTillLastStep","page":"API","title":"Rimu.RunTillLastStep","text":"RunTillLastStep(step::Int = 0 # number of current/starting timestep\n             laststep::Int = 100 # number of final timestep\n             shiftMode::Bool = false # whether to adjust shift\n             shift = 0.0 # starting/current value of shift\n             dτ::Float64 = 0.01 # current value of time step\n) <: FciqmcRunStrategy\n\nParameters for running lomc!() for a fixed number of time steps. For alternative strategies, see FciqmcRunStrategy.\n\nwarning: Warning\nThe use of this strategy is deprecated. Pass the relevant arguments directly to ProjectorMonteCarloProblem or to lomc!() instead.\n\n\n\n\n\n","category":"type"},{"location":"API.html#Rimu.ShiftStrategy","page":"API","title":"Rimu.ShiftStrategy","text":"ShiftStrategy\n\nAbstract type for defining the strategy for controlling the norm, potentially by updating the shift. Passed as a parameter to ProjectorMonteCarloProblem or to FCIQMC.\n\nImplemented strategies:\n\nDontUpdate\nDoubleLogUpdate - default in ProjectorMonteCarloProblem()\nLogUpdate\nLogUpdateAfterTargetWalkers - FCIQMC standard\nDoubleLogUpdateAfterTargetWalkers\n\nExtended help\n\nInternally To implement a custom strategy, define a new subtype of Rimu.ShiftStrategy and implement methods for:\n\nRimu.update_shift_parameters! - to update the shift_parameters\nRimu.initialise_shift_parameters - (optional) to initialise and construct a   custom implementation of the shift_parameters. The default implementation is   Rimu.DefaultShiftParameters.\n\n\n\n\n\n","category":"type"},{"location":"API.html#Rimu.SignCoherence","page":"API","title":"Rimu.SignCoherence","text":"SignCoherence(reference[; name=:coherence]) <: PostStepStrategy\n\nAfter each step, compute the proportion of configurations that have the same sign as they do in the reference_dvec. Reports to a column named name, which defaults to coherence.\n\n\n\n\n\n","category":"type"},{"location":"API.html#Rimu.SimulationPlan","page":"API","title":"Rimu.SimulationPlan","text":"SimulationPlan(; starting_step = 1, last_step = 100, walltime = Inf)\n\nDefines the duration of the simulation. The simulation ends when the last_step is reached or the walltime is exceeded.\n\nSee ProjectorMonteCarloProblem, PMCSimulation.\n\n\n\n\n\n","category":"type"},{"location":"API.html#Rimu.SingleParticleDensity","page":"API","title":"Rimu.SingleParticleDensity","text":"SingleParticleDensity(; save_every=1, component) <: PostStepStrategy\n\nPostStepStrategy  to  compute the diagonal single_particle_density. It records a Tuple with the same eltype as the vector.\n\nComputing the density at every time step can be expensive. This cost can be reduced by setting the save_every argument to a higher value. If the value is set, a vector of zeros is recorded when the saving is skipped.\n\nIf the address type has multiple components, the component argument can be used to compute the density on a per-component basis.\n\nThe density is not normalized, and must be divided by the vector norm(⋅,2) squared.\n\nSee also\n\nsingle_particle_density\nDensityMatrixDiagonal\n\n\n\n\n\n","category":"type"},{"location":"API.html#Rimu.SingleState","page":"API","title":"Rimu.SingleState","text":"SingleState(hamiltonian, algorithm, v, wm, pnorm, params, id)\n\nStruct that holds a single state vector and all information needed for an independent run of the algorithm. Can be advanced a step forward with advance!.\n\nSee also SpectralState, SpectralStrategy, ReplicaState, ReplicaStrategy, replica_stats, PMCSimulation.\n\n\n\n\n\n","category":"type"},{"location":"API.html#Rimu.SpectralState","page":"API","title":"Rimu.SpectralState","text":"SpectralState <: AbstractVector{SingleState}\n\nHolds one or several SingleStates representing the ground state and excited states of a single replica.\n\nIndexing the SpectralState state[i] returns the ith SingleState.\n\nSee also SpectralStrategy, ReplicaState, SingleState, PMCSimulation.\n\n\n\n\n\n","category":"type"},{"location":"API.html#Rimu.SpectralStrategy","page":"API","title":"Rimu.SpectralStrategy","text":"SpectralStrategy{S}\n\nAbstract type for spectral strategies. The spectral strategy is used to control the number of spectral states used in the simulation.\n\n\n\n\n\n","category":"type"},{"location":"API.html#Rimu.StateVectors","page":"API","title":"Rimu.StateVectors","text":"StateVectors <: AbstractMatrix{V}\n\nRepresents a matrix of configuration vectors from the state. Construct this object with state_vectors.\n\n\n\n\n\n","category":"type"},{"location":"API.html#Rimu.TimeStepStrategy","page":"API","title":"Rimu.TimeStepStrategy","text":"TimeStepStrategy\n\nAbstract type for strategies for updating the time step with update_time_step(). Implemented strategies:\n\nConstantTimeStep\n\n\n\n\n\n","category":"type"},{"location":"API.html#Rimu.Timer","page":"API","title":"Rimu.Timer","text":"Timer <: PostStepStrategy\n\nRecord current time after every step. See Base.Libc.time for information on what time is recorded.\n\n\n\n\n\n","category":"type"},{"location":"API.html#Rimu.WalkerLoneliness","page":"API","title":"Rimu.WalkerLoneliness","text":"WalkerLoneliness(threshold=1) <: PostStepStrategy\n\nAfter each step, compute the proportion of configurations that are occupied by at most threshold walkers. Reports to a column named loneliness.\n\n\n\n\n\n","category":"type"},{"location":"API.html#CommonSolve.init-Tuple{ProjectorMonteCarloProblem}","page":"API","title":"CommonSolve.init","text":"init(problem::ProjectorMonteCarloProblem; copy_vectors=true)::PMCSimulation\n\nInitialise a Rimu.PMCSimulation.\n\nSee also ProjectorMonteCarloProblem, solve!, solve, step!, Rimu.PMCSimulation.\n\n\n\n\n\n","category":"method"},{"location":"API.html#CommonSolve.solve","page":"API","title":"CommonSolve.solve","text":"solve(::ProjectorMonteCarloProblem)::PMCSimulation\n\nInitialize and solve a ProjectorMonteCarloProblem until the last step is completed or the walltime limit is reached.\n\nSee also init, solve!, step!, Rimu.PMCSimulation, and solve(::ExactDiagonalizationProblem).\n\n\n\n\n\n","category":"function"},{"location":"API.html#CommonSolve.solve!-Tuple{Rimu.PMCSimulation}","page":"API","title":"CommonSolve.solve!","text":"solve!(sm::PMCSimulation; kwargs...)::PMCSimulation\n\nSolve a Rimu.PMCSimulation until the last step is completed or the walltime limit is reached.\n\nTo continue a previously completed simulation, set a new last_step or walltime using the keyword arguments. Optionally, changes can be made to the replica_strategy, the post_step_strategy, or the reporting_strategy.\n\nOptional keyword arguments:\n\nlast_step = nothing: Set the last step to a new value and continue the simulation.\nwalltime = nothing: Set the allowed walltime to a new value and continue the simulation.\nreset_time = false: Reset the elapsed_time counter and continue the simulation.\nempty_report = false: Empty the report before continuing the simulation.\nreplica_strategy = nothing: Change the replica strategy. Requires the number of replicas   to match the number of replicas in the simulation sm. Implies empty_report = true.\npost_step_strategy = nothing: Change the post-step strategy. Implies   empty_report = true.\nreporting_strategy = nothing: Change the reporting strategy. Implies   empty_report = true.\nmetadata = nothing: Add metadata to the report.\n\nSee also ProjectorMonteCarloProblem, init, solve, step!, Rimu.PMCSimulation.\n\n\n\n\n\n","category":"method"},{"location":"API.html#CommonSolve.step!-Tuple{Rimu.PMCSimulation}","page":"API","title":"CommonSolve.step!","text":"step!(sm::PMCSimulation)::PMCSimulation\n\nAdvance the simulation by one step.\n\nCalling solve! will advance the simulation until the last step or the walltime is exceeded. When completing the simulation without calling solve!, the simulation report needs to be finalised by calling Rimu.finalize_report!.\n\nSee also ProjectorMonteCarloProblem, init, solve!, solve, Rimu.PMCSimulation.\n\n\n\n\n\n","category":"method"},{"location":"API.html#Rimu._n_walkers-Tuple{Any, Any}","page":"API","title":"Rimu._n_walkers","text":"_n_walkers(v, shift_strategy)\n\nReturns an estimate of the expected number of walkers as an integer.\n\n\n\n\n\n","category":"method"},{"location":"API.html#Rimu.advance!-Tuple{FCIQMC, Any, Rimu.ReplicaState, Rimu.SingleState}","page":"API","title":"Rimu.advance!","text":"advance!(algorithm::PMCAlgorithm, report::Report, state::ReplicaState, s_state::SingleState)\n\nAdvance the s_state by one step according to the algorithm. The state is used only to access the various strategies involved. Steps, stats, and computed quantities are written to the report.\n\nReturns true if the step was successful and calculation should proceed, false when it should terminate.\n\nSee also solve!, step!.\n\n\n\n\n\n","category":"method"},{"location":"API.html#Rimu.all_overlaps-Union{Tuple{B}, Tuple{N}, Tuple{Union{Tuple, Vector}, Tuple{Vararg{AbstractDVec, N}}, Any, Val{B}}} where {N, B}","page":"API","title":"Rimu.all_overlaps","text":"all_overlaps(operators, vectors, working_memories, vecnorm=true)\n\nGet all overlaps between vectors and operators. This function is overloaded for MPIData. The flag vecnorm can disable the vector-vector overlap c{i}_dot_c{j}.\n\n\n\n\n\n","category":"method"},{"location":"API.html#Rimu.check_transform-Tuple{AllOverlaps, AbstractHamiltonian}","page":"API","title":"Rimu.check_transform","text":"check_transform(r::AllOverlaps, ham)\n\nCheck that the transformation provided to r::AllOverlaps matches the given Hamiltonian ham. Used as a sanity check before starting main ProjectorMonteCarloProblem loop.\n\n\n\n\n\n","category":"method"},{"location":"API.html#Rimu.clean_and_warn_if_others_present-Union{Tuple{names}, Tuple{NamedTuple{names}, Any}} where names","page":"API","title":"Rimu.clean_and_warn_if_others_present","text":"clean_and_warn_if_others_present(nt::NamedTuple{names}, keys) where {names}\n\nRemove keys from a NamedTuple that are not in keys and issue a warning if they are present.\n\n\n\n\n\n","category":"method"},{"location":"API.html#Rimu.default_logger-Tuple","page":"API","title":"Rimu.default_logger","text":"default_logger(args...)\n\nReset the global_logger to Logging.ConsoleLogger. Undoes the effect of smart_logger. Arguments are passed on to Logging.ConsoleLogger.\n\n\n\n\n\n","category":"method"},{"location":"API.html#Rimu.default_starting_vector-Tuple{AbstractHamiltonian}","page":"API","title":"Rimu.default_starting_vector","text":"default_starting_vector(hamiltonian::AbstractHamiltonian; kwargs...)\ndefault_starting_vector(\n    address=starting_address(hamiltonian);\n    style=IsDynamicSemistochastic(),\n    initiator=NonInitiator(),\n    threading=nothing,\n    population=10\n)\n\nReturn a default starting vector for ProjectorMonteCarloProblem. The default choice for the starting vector is\n\nv = PDVec(address => population; style, initiator)\n\nif threading is available, or otherwise\n\nv = DVec(address => population; style)\n\nif initiator == NonInitiator(), and\n\nv = InitiatorDVec(address => population; style, initiator)\n\nif not. See PDVec, DVec, InitiatorDVec, StochasticStyle, and InitiatorRule.\n\n\n\n\n\n","category":"method"},{"location":"API.html#Rimu.delete_and_warn_if_present-Union{Tuple{names}, Tuple{NamedTuple{names}, Any}} where names","page":"API","title":"Rimu.delete_and_warn_if_present","text":"delete_and_warn_if_present(nt::NamedTuple, keys)\n\nDelete keys from a NamedTuple and issue a warning if they are present. This is useful for removing unused keyword arguments.\n\n\n\n\n\n","category":"method"},{"location":"API.html#Rimu.finalize_report!-Tuple{ReportingStrategy, Any}","page":"API","title":"Rimu.finalize_report!","text":"finalize_report!(::ReportingStrategy, report)\n\nFinalize the report. This function is called after all steps in solve! have finished.\n\n\n\n\n\n","category":"method"},{"location":"API.html#Rimu.get_metadata-Tuple{Rimu.Report, Any}","page":"API","title":"Rimu.get_metadata","text":"get_metadata(report::Report, key)\n\nGet metadata key from report. key is converted to a String.\n\nSee also report_metadata!, Report, report!.\n\n\n\n\n\n","category":"method"},{"location":"API.html#Rimu.initialise_shift_parameters","page":"API","title":"Rimu.initialise_shift_parameters","text":"initialise_shift_parameters(s::ShiftStrategy, shift, norm, time_step, counter=0, shift_mode=false)\n\nInitiatlise a struct to store the shift parameters.\n\nSee ShiftStrategy, update_shift_parameters!, DefaultShiftParameters.\n\n\n\n\n\n","category":"function"},{"location":"API.html#Rimu.lomc!-Tuple{Any, Any}","page":"API","title":"Rimu.lomc!","text":"lomc!(ham::AbstractHamiltonian, [v]; kwargs...) -> df, state\nlomc!(state::ReplicaState, [df]; kwargs...) -> df, state\n\nLinear operator Monte Carlo: Perform a projector quantum Monte Carlo simulation for determining the lowest eigenvalue of ham. The details of the simulation are controlled by the optional keyword arguments and by the type of the optional starting vector v. Alternatively, a ReplicaState can be passed in to continue a previous simulation.\n\nCommon keyword arguments and defaults:\n\nlaststep = 100 - controls the number of steps.\ndτ = 0.01 - time step.\ntargetwalkers = 1000 - target for the 1-norm of the coefficient vector.\naddress = starting_address(ham) - set starting address for default v and shift.\nstyle = IsStochasticInteger() - set StochasticStyle for default v; unused if v is specified.\ninitiator = NonInitiator() - set InitiatorRule for default v; unused if v is specified.\nthreading - default is to use multithreading and MPI if multiple threads are available. Set to true to force PDVec for the starting vector, false for serial computation; unused if v is specified.\nshift = diagonal_element(ham, address) - initial value of shift.\npost_step_strategy::NTuple{N,<:PostStepStrategy} = () - extract observables (e.g. ProjectedEnergy), see PostStepStrategy. (Deprecated: post_step is accepted as an alias for post_step_strategy.)\nreplica_strategy::ReplicaStrategy = NoStats(1) - run several synchronised simulations, see ReplicaStrategy. (Deprecated: replica is accepted as an alias for replica_strategy.)\nreporting_strategy::ReportingStrategy = ReportDFAndInfo() - how and when to report results, see ReportingStrategy. (Deprecated: r_strat is accepted as an alias for reporting_strategy.)\nname = \"lomc!\" - name displayed in progress bar (via ProgressLogging)\nmetadata - user-supplied metadata to be added to the report df. Must be an iterable of pairs or a NamedTuple, e.g. metadata = (\"key1\" => \"value1\", \"key2\" => \"value2\"). All metadata is converted to strings.\n\nSome metadata is automatically added to the report df including Rimu.PACKAGE_VERSION and data from state.\n\nReturn values\n\nlomc! returns a named tuple with the following fields:\n\ndf: a DataFrame with all statistics being reported.\nstate: a ReplicaState that can be used for continuations.\n\nExample\n\njulia> address = BoseFS(1,2,3);\n\njulia> hamiltonian = HubbardReal1D(address);\n\njulia> df1, state = lomc!(hamiltonian; targetwalkers=500, laststep=100);\n\njulia> df2, _ = lomc!(state, df1; laststep=200, metadata=(;info=\"cont\")); # Continuation run\n\njulia> size(df1)\n(100, 9)\n\njulia> size(df2)\n(200, 9)\n\njulia> using DataFrames; metadata(df2, \"info\") # retrieve custom metadata\n\"cont\"\n\njulia> metadata(df2, \"hamiltonian\") # some metadata is automatically added\n\"HubbardReal1D(fs\\\"|1 2 3⟩\\\"; u=1.0, t=1.0)\"\n\nFurther keyword arguments and defaults:\n\nτ_strat::TimeStepStrategy = ConstantTimeStep() - adjust time step or not, see TimeStepStrategy\ns_strat::ShiftStrategy = DoubleLogUpdate(; target_walkers=targetwalkers, ζ = 0.08, ξ = ζ^2/4) - how to update the shift, see ShiftStrategy.\nmaxlength = 2 * s_strat.target_walkers + 100 - upper limit on the length of v; when reached, lomc! will abort\nwm - working memory for re-use in subsequent calculations; is mutated.\ndf = DataFrame() - when called with AbstractHamiltonian argument, a DataFrame can be passed for merging with the report df.\n\nThe default choice for the starting vector is v = default_starting_vector(; address, style, threading, initiator). See default_starting_vector, PDVec, DVec, StochasticStyle, and InitiatorRule.\n\nwarning: Warning\nThe use of this lomc! is deprecated. Use ProjectorMonteCarloProblem and solve instead.\n\n\n\n\n\n","category":"method"},{"location":"API.html#Rimu.num_replicas-Union{Tuple{ReplicaStrategy{N}}, Tuple{N}} where N","page":"API","title":"Rimu.num_replicas","text":"num_replicas(state_or_strategy)\n\nReturn the number of replicas used in the simulation.\n\n\n\n\n\n","category":"method"},{"location":"API.html#Rimu.num_spectral_states-Union{Tuple{Rimu.SpectralStrategy{S}}, Tuple{S}} where S","page":"API","title":"Rimu.num_spectral_states","text":"num_spectral_states(state_or_strategy)\n\nReturn the number of spectral states used in the simulation.\n\n\n\n\n\n","category":"method"},{"location":"API.html#Rimu.post_step_action","page":"API","title":"Rimu.post_step_action","text":"post_step_action(::PostStepStrategy, ::SingleState, step) -> kvpairs\n\nCompute statistics after FCIQMC step. Should return a tuple of :key => value pairs. This function is only called every reporting_interval steps, as defined by the ReportingStrategy.\n\nSee also PostStepStrategy, ReportingStrategy.\n\n\n\n\n\n","category":"function"},{"location":"API.html#Rimu.refine_reporting_strategy-Tuple{ReportingStrategy}","page":"API","title":"Rimu.refine_reporting_strategy","text":"refine_reporting_strategy(reporting_strategy::ReportingStrategy) -> reporting_strategy\n\nInitialize the reporting strategy. This can be used to set up filenames or other attributes that need to be unique for a run of FCIQMC.\n\n\n\n\n\n","category":"method"},{"location":"API.html#Rimu.replace_keys-Tuple{NamedTuple, Any}","page":"API","title":"Rimu.replace_keys","text":"replace_keys(nt::NamedTuple, (:old1 => :new1, :old2 => :new2, ...))\n\nReplace keys in a NamedTuple with new keys. This is useful for renaming fields in a NamedTuple. Ignores keys that are not present in the NamedTuple.\n\n\n\n\n\n","category":"method"},{"location":"API.html#Rimu.replica_stats","page":"API","title":"Rimu.replica_stats","text":"replica_stats(RS::ReplicaStrategy{N}, spectral_states::NTuple{N,SingleState}) -> (names, values)\n\nReturn the names and values of statistics related to N replica states consistent with the ReplicaStrategy RS. names should be a tuple of Symbols or Strings and values should be a tuple of the same length. This function will be called every reporting_interval steps from ProjectorMonteCarloProblem, or once per time step if reporting_interval is not defined.\n\nPart of the ReplicaStrategy interface. See also SingleState.\n\n\n\n\n\n","category":"function"},{"location":"API.html#Rimu.report!-Tuple{ReportingStrategy, Any, Vararg{Any}}","page":"API","title":"Rimu.report!","text":" report!(::ReportingStrategy, step, report::Report, keys, values, id=\"\")\n report!(::ReportingStrategy, step, report::Report, nt, id=\"\")\n\nReport keys and values to report, which will be converted to a DataFrame before ProjectorMonteCarloProblem exits. Alternatively, a nt::NamedTuple can be passed in place of keys and values. If id is specified, it is appended to all keys. This is used to differentiate between values reported by different replicas.\n\nTo overload this function for a new ReportingStrategy, overload report!(::ReportingStrategy, step, args...) and apply the report by calling report!(args...).\n\n\n\n\n\n","category":"method"},{"location":"API.html#Rimu.report!-Tuple{Rimu.Report, DataFrame}","page":"API","title":"Rimu.report!","text":"report!(report::Report, df::DataFrame)\n\nConvert the DataFrame df to a Report. This function does not copy the data.\n\n\n\n\n\n","category":"method"},{"location":"API.html#Rimu.report!-Tuple{Rimu.Report, Union{AbstractString, Symbol}, Any}","page":"API","title":"Rimu.report!","text":"report!(report, keys, values, id=\"\")\nreport!(report, pairs, id=\"\")\n\nWrite keys, values pairs to report that will be converted to a DataFrame later. Alternatively, a named tuple or a collection of pairs can be passed instead of keys and values.\n\nThe value of id is appended to the name of the column, e.g. report!(report, :key, value, :_1) will report value to a column named :key_1.\n\n\n\n\n\n","category":"method"},{"location":"API.html#Rimu.report_after_step!-Tuple{ReportingStrategy, Any, Any, Vararg{Any}}","page":"API","title":"Rimu.report_after_step!","text":"report_after_step!(::ReportingStrategy, step, report, state) -> report\n\nThis function is called at the very end of a step, after reporting_interval steps. It may modify the report.\n\n\n\n\n\n","category":"method"},{"location":"API.html#Rimu.report_metadata!-Tuple{Rimu.Report, Any, Any}","page":"API","title":"Rimu.report_metadata!","text":"report_metadata!(report::Report, key, value)\nreport_metadata!(report::Report, kvpairs)\n\nSet metadata key to value in report. key and value are converted to Strings. Alternatively, an iterable of key-value pairs or a NamedTuple can be passed.\n\nSee also get_metadata, report!, Report.\n\n\n\n\n\n","category":"method"},{"location":"API.html#Rimu.reporting_interval-Tuple{ReportingStrategy}","page":"API","title":"Rimu.reporting_interval","text":"reporting_interval(::ReportingStrategy)\n\nGet the interval between steps for which non-essential statistics are reported. Defaults to 1 if chosen ReportingStrategy does not specify an interval.\n\n\n\n\n\n","category":"method"},{"location":"API.html#Rimu.set_up_initial_shift_parameters-Union{Tuple{R}, Tuple{S}, Tuple{FCIQMC, Any, StaticArraysCore.SMatrix{S, R}, Any, Any}} where {S, R}","page":"API","title":"Rimu.set_up_initial_shift_parameters","text":"set_up_initial_shift_parameters(\n    algorithm::FCIQMC, hamiltonian, starting_vectors, shift, time_step, initial_shift_parameters\n)\n\nSet up the initial shift parameters for the FCIQMC algorithm.\n\n\n\n\n\n","category":"method"},{"location":"API.html#Rimu.single_particle_density-Tuple{Any}","page":"API","title":"Rimu.single_particle_density","text":"single_particle_density(dvec; component)\nsingle_particle_density(add; component)\n\nCompute the diagonal single particle density of vector dvec or address add. If the component argument is given, only that component of the addresses is taken into account. The result is always normalized so that sum(result) ≈ num_particles(address).\n\nExamples\n\njulia> v = DVec(fs\"|⋅↑⇅↓⋅⟩\" => 1.0, fs\"|↓↓⋅↑↑⟩\" => 0.5)\nDVec{FermiFS2C{2, 2, 5, 4, FermiFS{2, 5, BitString{5, 1, UInt8}}, FermiFS{2, 5, BitString{5, 1, UInt8}}},Float64} with 2 entries, style = IsDeterministic{Float64}()\n  fs\"|↓↓⋅↑↑⟩\" => 0.5\n  fs\"|⋅↑⇅↓⋅⟩\" => 1.0\n\njulia> single_particle_density(v)\n(0.2, 1.0, 1.6, 1.0, 0.2)\n\njulia> single_particle_density(v; component=1)\n(0.0, 1.6, 1.6, 0.4, 0.4)\n\nSee also\n\nSingleParticleDensity\n\n\n\n\n\n","category":"method"},{"location":"API.html#Rimu.smart_logger-Tuple","page":"API","title":"Rimu.smart_logger","text":"smart_logger(args...)\n\nEnable terminal progress bar during interactive use (i.e. unless running on CI or HPC). Arguments are passed on to the logger. This is run once during Rimu startup. Undo with default_logger or by setting Base.global_logger().\n\n\n\n\n\n","category":"method"},{"location":"API.html#Rimu.state_vectors-Tuple{R} where R<:Rimu.ReplicaState","page":"API","title":"Rimu.state_vectors","text":"state_vectors(state::ReplicaState)\nstate_vectors(sim::PMCSimulation)\n\nReturn an AbstractMatrix of configuration vectors from the state. The vectors can be accessed by indexing the resulting collection, where the row index corresponds to the replica index and the column index corresponds to the spectral state index.\n\nSee also SingleState, ReplicaState, SpectralState, PMCSimulation.\n\n\n\n\n\n","category":"method"},{"location":"API.html#Rimu.update_shift_parameters!","page":"API","title":"Rimu.update_shift_parameters!","text":"update_shift_parameters!(\n    s <: ShiftStrategy,\n    shift_parameters,\n    tnorm,\n    v_new,\n    v_old,\n    step,\n    report\n) -> shift_stats, proceed\n\nUpdate the shift_parameters according to strategy s. See ShiftStrategy. Returns a named tuple of the shift statistics and a boolean proceed indicating whether the simulation should proceed.\n\nSee initialise_shift_parameters, ShiftStrategy.\n\n\n\n\n\n","category":"function"},{"location":"API.html#Rimu.update_time_step-Tuple{ConstantTimeStep, Any, Vararg{Any}}","page":"API","title":"Rimu.update_time_step","text":"update_time_step(s<:TimeStepStrategy, time_step, tnorm) -> new_time_step\n\nUpdate the time step according to the strategy s.\n\n\n\n\n\n","category":"method"},{"location":"API.html#Reexported-Submodules","page":"API","title":"Reexported Submodules","text":"","category":"section"},{"location":"API.html#ExactDiagonalization","page":"API","title":"ExactDiagonalization","text":"","category":"section"},{"location":"API.html","page":"API","title":"API","text":"See Exact Diagonalization","category":"page"},{"location":"API.html#Interfaces","page":"API","title":"Interfaces","text":"","category":"section"},{"location":"API.html","page":"API","title":"API","text":"See Module Interfaces","category":"page"},{"location":"API.html#StochasticStyles","page":"API","title":"StochasticStyles","text":"","category":"section"},{"location":"API.html","page":"API","title":"API","text":"See Module StochasticStyles","category":"page"},{"location":"API.html#Hamiltonians","page":"API","title":"Hamiltonians","text":"","category":"section"},{"location":"API.html","page":"API","title":"API","text":"See Module Hamiltonians","category":"page"},{"location":"API.html#BitStringAddresses","page":"API","title":"BitStringAddresses","text":"","category":"section"},{"location":"API.html","page":"API","title":"API","text":"See Module BitStringAddresses","category":"page"},{"location":"API.html#DictVectors","page":"API","title":"DictVectors","text":"","category":"section"},{"location":"API.html","page":"API","title":"API","text":"See Module DictVectors","category":"page"},{"location":"API.html#StatsTools","page":"API","title":"StatsTools","text":"","category":"section"},{"location":"API.html","page":"API","title":"API","text":"See Module StatsTools","category":"page"},{"location":"API.html#RMPI","page":"API","title":"RMPI","text":"","category":"section"},{"location":"API.html","page":"API","title":"API","text":"See Module RMPI","category":"page"},{"location":"API.html#Index","page":"API","title":"Index","text":"","category":"section"},{"location":"API.html","page":"API","title":"API","text":"","category":"page"},{"location":"stochasticstyles.html#Module-StochasticStyles","page":"Stochastic styles","title":"Module StochasticStyles","text":"","category":"section"},{"location":"stochasticstyles.html","page":"Stochastic styles","title":"Stochastic styles","text":"StochasticStyles","category":"page"},{"location":"stochasticstyles.html#Rimu.StochasticStyles","page":"Stochastic styles","title":"Rimu.StochasticStyles","text":"This module provides concrete implementations of StochasticStyles, which specify the algorithm used by ProjectorMonteCarloProblem when performing stochastic matrix-vector multiplication.\n\nImplemented stochastic styles:\n\nStochasticStyle: abstract type for stochastic styles\nIsStochasticInteger\nIsDeterministic\nIsStochasticWithThreshold\nIsDynamicSemistochastic\nStyleUnknown\n\nThe offdiagonal spawning is defined in spawning.jl and is controlled by setting a SpawningStrategy.\n\nThe vector compression strategies are defined in compression.jl and are controlled by setting a CompressionStrategy.\n\n\n\n\n\n","category":"module"},{"location":"stochasticstyles.html#Available-StochasticStyles","page":"Stochastic styles","title":"Available StochasticStyles","text":"","category":"section"},{"location":"stochasticstyles.html","page":"Stochastic styles","title":"Stochastic styles","text":"StyleUnknown","category":"page"},{"location":"stochasticstyles.html#Rimu.Interfaces.StyleUnknown","page":"Stochastic styles","title":"Rimu.Interfaces.StyleUnknown","text":"StyleUnknown{T}() <: StochasticStyle\n\nTrait for value types not (currently) compatible with FCIQMC. This style makes it possible to construct dict vectors with unsupported valtypes.\n\nSee also StochasticStyle.\n\n\n\n\n\n","category":"type"},{"location":"stochasticstyles.html","page":"Stochastic styles","title":"Stochastic styles","text":"Modules = [StochasticStyles]\nPages = [\"styles.jl\"]","category":"page"},{"location":"stochasticstyles.html#Rimu.StochasticStyles.IsDeterministic","page":"Stochastic styles","title":"Rimu.StochasticStyles.IsDeterministic","text":"IsDeterministic{T=Float64}(compression=NoCompression()) <: StochasticStyle{T}\n\nPropagate with deterministic vector matrix multiplications. Stochastic compression of the resultant vector (after annihilations) can be triggered by setting the optional compression argument to a relevant CompressionStrategy.\n\nSee also StochasticStyle.\n\n\n\n\n\n","category":"type"},{"location":"stochasticstyles.html#Rimu.StochasticStyles.IsDynamicSemistochastic","page":"Stochastic styles","title":"Rimu.StochasticStyles.IsDynamicSemistochastic","text":"IsDynamicSemistochastic{T=Float64}(; kwargs...) <: StochasticStyle{T}\n\nQMC propagation with floating-point walker numbers and reduced noise. All possible spawns (offdiagonal elements in vector-matrix multiplication) are performed deterministically when number of walkers in a configuration is high, as controlled by the rel_spawning_threshold and abs_spawning_threshold keywords. Stochastic selection of spawns is controlled by the spawning keyword.\n\nBy default, a stochastic vector compression is applied after annihilations are completed. This behaviour can be changed to on-the-fly projection (as in IsStochasticInteger or IsStochasticWithThreshold) by setting late_compression=false, or modifying spawning and compression. See parameters below for a more detailed explanation.\n\nParameters:\n\nthreshold = 1.0: Values below this number are stochastically projected to this value or zero. See also ThresholdCompression.\nlate_compression = true: If this is set to true, stochastic vector compression is performed after all the spawns are performed. If it is set to false, values are stochastically projected as they are being spawned. late_compression=true is equivalent to setting compression=ThresholdCompression(threshold) and spawning=WithReplacement().  late_compression=false is equivalent to compression=NoCompression() and spawning=WithReplacement(threshold).\nrel_spawning_threshold = 1.0: If the walker number on a configuration times this threshold is greater than the number of offdiagonals, spawning is done deterministically. Should be set to 1 or more for best performance.\nabs_spawning_threshold = Inf: If the walker number on a configuration is greater than this value, spawning is done deterministically. Can be set to e.g.  abs_spawning_threshold = 0.1 * target_walkers.\nspawning = WithReplacement(): SpawningStrategy to use for the non-exact spawns.\ncompression = ThresholdCompression(threshold): CompressionStrategy used to compress the vector after a step. Overrides threshold.\n\nSee also StochasticStyle.\n\n\n\n\n\n","category":"type"},{"location":"stochasticstyles.html#Rimu.StochasticStyles.IsStochastic2Pop","page":"Stochastic styles","title":"Rimu.StochasticStyles.IsStochastic2Pop","text":"IsStochastic2Pop{T=Complex{Int}}() <: StochasticStyle{T}\n\nStochastic propagation with complex walker numbers representing two populations of integer walkers.\n\nWhen using this style, make sure to set a complex number as target walkers in the ShiftStrategy!\n\nThis style is experimental.\n\nSee also StochasticStyle.\n\n\n\n\n\n","category":"type"},{"location":"stochasticstyles.html#Rimu.StochasticStyles.IsStochasticInteger","page":"Stochastic styles","title":"Rimu.StochasticStyles.IsStochasticInteger","text":"IsStochasticInteger{T=Int}() <: StochasticStyle{T}\n\nFCIQMC algorithm with integer walkers as in Booth et al. (2009). During the vector matrix product each individual diagonal and spawning step is rounded stochastically to a nearby integer value.\n\nSee also StochasticStyle.\n\n\n\n\n\n","category":"type"},{"location":"stochasticstyles.html#Rimu.StochasticStyles.IsStochasticWithThreshold","page":"Stochastic styles","title":"Rimu.StochasticStyles.IsStochasticWithThreshold","text":"IsStochasticWithThreshold{T=Float64}(threshold=1.0) <: StochasticStyle{T}\n\nStochastic propagation with floating point walker numbers. During the vector matrix product each individual diagonal and spawning result is rounded stochastically if smaller than threshold (before annihilations). For a more customizable stochastic style, see IsDynamicSemistochastic.\n\nSee also StochasticStyle.\n\n\n\n\n\n","category":"type"},{"location":"stochasticstyles.html#The-StochasticStyle-interface","page":"Stochastic styles","title":"The StochasticStyle interface","text":"","category":"section"},{"location":"stochasticstyles.html","page":"Stochastic styles","title":"Stochastic styles","text":"StochasticStyle\nstep_stats\napply_column!\ndefault_style","category":"page"},{"location":"stochasticstyles.html#Rimu.Interfaces.StochasticStyle","page":"Stochastic styles","title":"Rimu.Interfaces.StochasticStyle","text":"StochasticStyle(v)\n\nAbstract type. When called as a function it returns the native style of the generalised vector v that determines how simulations are to proceed.\n\nUsage\n\nConcrete StochasticStyles can be used for the style keyword argument of ProjectorMonteCarloProblem, DVec and PDVec. The following styles are available:\n\nIsStochasticInteger\nIsDeterministic\nIsStochasticWithThreshold\nIsDynamicSemistochastic\nStyleUnknown\n\nExtended Help\n\nInterface\n\nWhen defining a new StochasticStyle, subtype it as MyStyle<:StochasticStyle{T} where T is the concrete value type the style is designed to work with.\n\nFor it to work with ProjectorMonteCarloProblem, a StochasticStyle must define the following:\n\napply_column!(::StochasticStyle, w, H, address, value)\nstep_stats(::StochasticStyle)\n\nand optionally\n\nCompressionStrategy(::StochasticStyle) for vector compression after annihilations,\n\nSee also StochasticStyles, Interfaces.\n\n\n\n\n\n","category":"type"},{"location":"stochasticstyles.html#Rimu.Interfaces.step_stats","page":"Stochastic styles","title":"Rimu.Interfaces.step_stats","text":"step_stats(::StochasticStyle)\nstep_stats(::CompressionStrategy)\n\nReturn a tuple of stat names (Symbol or String) and a tuple of zeros of the same length. These will be reported as columns in the DataFrame returned by ProjectorMonteCarloProblem.\n\n\n\n\n\n","category":"function"},{"location":"stochasticstyles.html#Rimu.Interfaces.apply_column!","page":"Stochastic styles","title":"Rimu.Interfaces.apply_column!","text":"apply_column!(v, op, addr, num, boost=1) -> stats::Tuple\n\nApply the product of column addr of the operator op and the scalar num to the vector v according to the StochasticStyle of v. By expectation value this should be equivalent to\n\nv .+= op[:, add] .* num\n\nThis is used to perform the spawning step in FCIQMC and to implement operator-vector multiplications. Mutates v and reports spawning statistics.\n\nThe boost argument multiplicatively increases the number of spawns to be performed without affecting the expectation value of the procedure.\n\n\n\n\n\n","category":"function"},{"location":"stochasticstyles.html#Rimu.Interfaces.default_style","page":"Stochastic styles","title":"Rimu.Interfaces.default_style","text":"default_style(::Type)\n\nPick a StochasticStyle based on the value type. Returns StyleUnknown if no known default style is set.\n\n\n\n\n\n","category":"function"},{"location":"stochasticstyles.html#Compression-strategies","page":"Stochastic styles","title":"Compression strategies","text":"","category":"section"},{"location":"stochasticstyles.html","page":"Stochastic styles","title":"Stochastic styles","text":"CompressionStrategy\nNoCompression\nStochasticStyles.ThresholdCompression\ncompress!","category":"page"},{"location":"stochasticstyles.html#Rimu.Interfaces.CompressionStrategy","page":"Stochastic styles","title":"Rimu.Interfaces.CompressionStrategy","text":"CompressionStrategy\n\nThe CompressionStrategy controls how a vector is compressed after a step.\n\nDefault implementation:\n\nNoCompression: no vector compression\n\nUsage\n\nA subtype of CompressionStrategy can be passed as a keyword argument to the constructors for some StochasticStyles. Calling CompressionStrategy(s::StochasticStyle) returns a relevant subtype. The default is NoCompression.\n\nInterface\n\nWhen defining a new CompressionStrategy, subtype it as MyCompressionStrategy <: CompressionStrategy and define these methods:\n\ncompress!(s::CompressionStrategy, v)\ncompress!(s::CompressionStrategy, w, v)\nstep_stats(s::CompressionStrategy)\n\n\n\n\n\n","category":"type"},{"location":"stochasticstyles.html#Rimu.Interfaces.NoCompression","page":"Stochastic styles","title":"Rimu.Interfaces.NoCompression","text":"NoCompression <: CompressionStrategy end\n\nDefault CompressionStrategy. Leaves the vector intact.\n\n\n\n\n\n","category":"type"},{"location":"stochasticstyles.html#Rimu.StochasticStyles.ThresholdCompression","page":"Stochastic styles","title":"Rimu.StochasticStyles.ThresholdCompression","text":"ThresholdCompression(threshold=1) <: CompressionStrategy\n\nCompressionStrategy that compresses a vector by threshold projection. Every entry in the vector with a value below the threshold is either set to zero, or increased to the threshold. The probabilty of setting it to zero is equal to abs(value) / threshold.\n\n\n\n\n\n","category":"type"},{"location":"stochasticstyles.html#Rimu.Interfaces.compress!","page":"Stochastic styles","title":"Rimu.Interfaces.compress!","text":"compress!([::CompressionStrategy,] v) -> ::NTuple{N,::Symbol}, ::NTuple{N}\ncompress!([::CompressionStrategy,] w, v) -> ::NTuple{N,::Symbol}, ::NTuple{N}\n\nCompress the vector v. The one-argument version compresses the vector in-place. The two-argument vector stores the result in w. The CompressionStrategy associated with the StochasticStyle of v is used to determine the type of compression.\n\nReturns two tuples, containing the names and values of statistics that are to be reported.\n\n\n\n\n\n","category":"function"},{"location":"stochasticstyles.html#Spawning-strategies-and-convenience-functions","page":"Stochastic styles","title":"Spawning strategies and convenience functions","text":"","category":"section"},{"location":"stochasticstyles.html","page":"Stochastic styles","title":"Stochastic styles","text":"The following functions and types are unexported, but are useful when defining new styles.","category":"page"},{"location":"stochasticstyles.html","page":"Stochastic styles","title":"Stochastic styles","text":"Modules = [StochasticStyles]\nPages = [\"spawning.jl\"]\nOrder = [:function,:method,:type]","category":"page"},{"location":"stochasticstyles.html#Rimu.StochasticStyles.diagonal_step!","page":"Stochastic styles","title":"Rimu.StochasticStyles.diagonal_step!","text":"diagonal_step!(w, op, add, val, threshold=0) -> (clones, deaths, zombies)\n\nPerform diagonal step on a walker add => val. Optional argument threshold sets the projection threshold. If eltype(w) is an Integer, the val is rounded to the nearest integer stochastically.\n\n\n\n\n\n","category":"function"},{"location":"stochasticstyles.html#Rimu.StochasticStyles.projected_deposit!","page":"Stochastic styles","title":"Rimu.StochasticStyles.projected_deposit!","text":"projected_deposit!(w, add, val, parent, threshold=0)\n\nLike deposit!, but performs threshold projection before spawning. If eltype(w) is an Integer, values are stochastically rounded.\n\nReturns the value deposited.\n\n\n\n\n\n","category":"function"},{"location":"stochasticstyles.html#Rimu.StochasticStyles.spawn!","page":"Stochastic styles","title":"Rimu.StochasticStyles.spawn!","text":"spawn!(s::SpawningStrategy, w, op::AbstractHamiltonian, add, val, boost)\nspawn!(s::SpawningStrategy, w, offdiags::AbstractOffdiagonals, add, val, boost)\n\nPerform stochastic spawns to w from address add with val walkers. val * boost controls the number of spawns performed.\n\nThis function should be overloaded in the second form, with offdiags as an argument.\n\nSee SpawningStrategy.\n\n\n\n\n\n","category":"function"},{"location":"stochasticstyles.html#Rimu.StochasticStyles.Bernoulli","page":"Stochastic styles","title":"Rimu.StochasticStyles.Bernoulli","text":"Bernoulli(threshold=0.0) <: SpawningStrategy\n\nPerform Bernoulli sampling. A spawn is attempted on each offdiagonal element with a probability that results in an expected number of spawns equal to the number of walkers on the spawning configuration. This is significantly less efficient than WithReplacement.\n\nIf the number of spawn attempts is greater than the number of offdiagonals, this functions like Exact, but is less efficient. For best performance, this strategy is to be used as a substrategy of DynamicSemistochastic.\n\nParameters\n\nthreshold sets the projection threshold.\n\nspawn! with this strategy returns the number of spawn attempts and the number of spawns.\n\n\n\n\n\n","category":"type"},{"location":"stochasticstyles.html#Rimu.StochasticStyles.DynamicSemistochastic","page":"Stochastic styles","title":"Rimu.StochasticStyles.DynamicSemistochastic","text":"DynamicSemistochastic(; strat, rel_threshold, abs_threshold) <: SpawningStrategy\n\nSpawningStrategy that behaves like strat when the number of walkers is low, but performs exact steps when it is high. What \"high\" means is controlled by the two thresholds described below.\n\nParameters\n\nstrat = WithReplacement(): a SpawningStrategy to use when the multiplication is not performed exactly. If the strat has a threshold different from zero, all spawns will be projected to that threshold.\nrel_threshold = 1.0: When deciding on whether to perform an exact spawn, this value is multiplied to the number of walkers. Should be set to 1 or more for best performance. This threshold is affected by the boost argument to spawn!.\nabs_threshold = Inf: When deciding on whether to perform an exact spawn, min(abs_threshold, num_offdiagonals) is used. This threshold is not affected by the boost argument to spawn!.\n\nSee e.g. WithoutReplacement for a description of the strat.threshold parameter.\n\nspawn! with this strategy returns the numbers of exact and inexact spawns, the number of spawn attempts and the number of spawns.\n\n\n\n\n\n","category":"type"},{"location":"stochasticstyles.html#Rimu.StochasticStyles.Exact","page":"Stochastic styles","title":"Rimu.StochasticStyles.Exact","text":"Exact(threshold=0.0) <: SpawningStrategy\n\nPerform an exact spawning step.\n\nParameters\n\nthreshold sets the projection threshold. If set to zero, no projection is performed.\n\nspawn! with this strategy returns the number of spawn attempts and the number of spawns.\n\n\n\n\n\n","category":"type"},{"location":"stochasticstyles.html#Rimu.StochasticStyles.SingleSpawn","page":"Stochastic styles","title":"Rimu.StochasticStyles.SingleSpawn","text":"SingleSpawn(threshold=0.0) <: SpawningStrategy\n\nPerform a single spawn. Useful as a building block for other stochastic styles.\n\nParameters\n\nthreshold sets the projection threshold. If set to zero, no projection is performed.\n\nspawn! with this strategy returns the number of spawn attempts (always 1) and the number of spawns.\n\n\n\n\n\n","category":"type"},{"location":"stochasticstyles.html#Rimu.StochasticStyles.SpawningStrategy","page":"Stochastic styles","title":"Rimu.StochasticStyles.SpawningStrategy","text":"SpawningStrategy\n\nA SpawningStrategy is used to control how spawns (multiplies with off-diagonal part of the column vector) are performed and can be passed to some of the StochasticStyles as keyword arguments.\n\nThe following concrete implementations are provided:\n\nExact: Perform exact spawns. Used by IsDeterministic.\nWithReplacement: The default stochastic spawning strategy. Spawns are chosen with replacement.\nDynamicSemistochastic: Behave like Exact when the number of spawns performed is high, and like a different substrategy otherwise. Used by IsDynamicSemistochastic.\nSingleSpawn: Perform a single spawn only. Used as a building block for other strategies.\nWithoutReplacement: Similar to WithReplacement, but ensures each spawn is only performed once. Only to be used as a substrategy of DynamicSemistochastic.\nBernoulli: Each spawn is attempted with a fixed probability. Only to be used as a substrategy of DynamicSemistochastic.\n\nInterface\n\nIn order to implement a new SpawningStrategy, define a method for spawn!.\n\n\n\n\n\n","category":"type"},{"location":"stochasticstyles.html#Rimu.StochasticStyles.WithReplacement","page":"Stochastic styles","title":"Rimu.StochasticStyles.WithReplacement","text":"WithReplacement(threshold=0.0) <: SpawningStrategy\n\nSpawningStrategy where spawn targets are sampled with replacement. This is the default spawning strategy for most of the StochasticStyles.\n\nParameters\n\nthreshold sets the projection threshold. If set to zero, no projection is performed.\n\nspawn! with this strategy returns the number of spawn attempts and the number of spawns.\n\n\n\n\n\n","category":"type"},{"location":"stochasticstyles.html#Rimu.StochasticStyles.WithoutReplacement","page":"Stochastic styles","title":"Rimu.StochasticStyles.WithoutReplacement","text":"WithoutReplacement(threshold=0.0) <: SpawningStrategy\n\nSpawningStrategy where spawn targets are sampled without replacement. This strategy needs to allocate a temporary array during spawning, which makes it significantly less efficient than WithReplacement.\n\nIf the number of spawn attempts is greater than the number of offdiagonals, this functions like Exact, but is less efficient. For best performance, this strategy is to be used as a substrategy of DynamicSemistochastic.\n\nParameters\n\nthreshold sets the projection threshold. If set to zero, no projection is performed.\n\nspawn! with this strategy returns the number of spawn attempts and the number of spawns.\n\n\n\n\n\n","category":"type"},{"location":"stochasticstyles.html#Index","page":"Stochastic styles","title":"Index","text":"","category":"section"},{"location":"stochasticstyles.html","page":"Stochastic styles","title":"Stochastic styles","text":"Pages   = [\"stochasticstyles.md\"]","category":"page"},{"location":"generated/BHM-example-mpi.html","page":"Rimu with MPI","title":"Rimu with MPI","text":"EditURL = \"../../../scripts/BHM-example-mpi.jl\"","category":"page"},{"location":"generated/BHM-example-mpi.html#Example-2:-Rimu-with-MPI","page":"Rimu with MPI","title":"Example 2: Rimu with MPI","text":"","category":"section"},{"location":"generated/BHM-example-mpi.html","page":"Rimu with MPI","title":"Rimu with MPI","text":"In this example, we will demonstrate using Rimu with MPI. MPI is a standard for parallel and distributed computing, and it is widely used in high-performance computing. Rimu provides support for MPI to enable parallel computations on multiple nodes.","category":"page"},{"location":"generated/BHM-example-mpi.html","page":"Rimu with MPI","title":"Rimu with MPI","text":"A runnable script for this example is located here. Run it with 2 MPI ranks with mpirun -n 2 julia BHM-example-mpi.jl.","category":"page"},{"location":"generated/BHM-example-mpi.html","page":"Rimu with MPI","title":"Rimu with MPI","text":"We start by importing Rimu and Rimu.RMPI, which contains MPI-related functionality.","category":"page"},{"location":"generated/BHM-example-mpi.html","page":"Rimu with MPI","title":"Rimu with MPI","text":"using Rimu\nusing Rimu.RMPI","category":"page"},{"location":"generated/BHM-example-mpi.html","page":"Rimu with MPI","title":"Rimu with MPI","text":"Note that it is not necessary to initialise the MPI library, as this is already done automatically when Rimu is loaded.","category":"page"},{"location":"generated/BHM-example-mpi.html","page":"Rimu with MPI","title":"Rimu with MPI","text":"We will compute the ground state of a Bose-Hubbard model in momentum space with 10 particles in 10 sites.","category":"page"},{"location":"generated/BHM-example-mpi.html","page":"Rimu with MPI","title":"Rimu with MPI","text":"First, we define the Hamiltonian. We want to start from an address with zero momentum, which is located at mode 5 in the momentum grid. We put all 10 particles, all in the zero momentum mode.","category":"page"},{"location":"generated/BHM-example-mpi.html","page":"Rimu with MPI","title":"Rimu with MPI","text":"address = BoseFS(10, 5 => 10)","category":"page"},{"location":"generated/BHM-example-mpi.html","page":"Rimu with MPI","title":"Rimu with MPI","text":"BoseFS{10,10}(0, 0, 0, 0, 10, 0, 0, 0, 0, 0)","category":"page"},{"location":"generated/BHM-example-mpi.html","page":"Rimu with MPI","title":"Rimu with MPI","text":"We will set the interaction strength u to 6.0. The hopping strength t defaults to 1.0.","category":"page"},{"location":"generated/BHM-example-mpi.html","page":"Rimu with MPI","title":"Rimu with MPI","text":"H = HubbardMom1D(address; u=6.0)","category":"page"},{"location":"generated/BHM-example-mpi.html","page":"Rimu with MPI","title":"Rimu with MPI","text":"HubbardMom1D(fs\"|0 0 0 0 10 0 0 0 0 0⟩\"; u=6.0, t=1.0)","category":"page"},{"location":"generated/BHM-example-mpi.html","page":"Rimu with MPI","title":"Rimu with MPI","text":"We set a reporting strategy. We will use ReportToFile, which writes the reports directly to a file. This is useful for MPI calculations, as they will typically run non-interactively. The reports will be written to disk and can be inspected later. This has the additional benefit of reducing memory use in long-running jobs, as we don't need to keep the results in memory. It also allows us to inspect the results before the computation finishes and recover some data if it fails.","category":"page"},{"location":"generated/BHM-example-mpi.html","page":"Rimu with MPI","title":"Rimu with MPI","text":"The default settings will ensure that only the root MPI rank will write to the file, which is reasonable, and that data is saved in chunks of 1000 time steps. We choose to suppress progress messages with setting io=devnull.","category":"page"},{"location":"generated/BHM-example-mpi.html","page":"Rimu with MPI","title":"Rimu with MPI","text":"reporting_strategy = ReportToFile(\n    filename=\"result.arrow\",\n    io=devnull\n)","category":"page"},{"location":"generated/BHM-example-mpi.html","page":"Rimu with MPI","title":"Rimu with MPI","text":"ReportToFile{Symbol}(\"result.arrow\", 1, 1000, true, false, Base.DevNull(), :zstd, nothing)","category":"page"},{"location":"generated/BHM-example-mpi.html","page":"Rimu with MPI","title":"Rimu with MPI","text":"For running parallel computations with MPI, it is important that a compatible state vector is used. Here we explicitly set up an MPI-enabled state vector, PDVec, which is automatically MPI-distributed over the available number of MPI ranks. In addition, threading will be used with all threads available to Julia.","category":"page"},{"location":"generated/BHM-example-mpi.html","page":"Rimu with MPI","title":"Rimu with MPI","text":"initial_vector = PDVec(address => 1.0; style=IsDynamicSemistochastic())","category":"page"},{"location":"generated/BHM-example-mpi.html","page":"Rimu with MPI","title":"Rimu with MPI","text":"1-element PDVec: style = IsDynamicSemistochastic{Float64,ThresholdCompression,DynamicSemistochastic}()\n  fs\"|0 0 0 0 10 0 0 0 0 0⟩\" => 1.0","category":"page"},{"location":"generated/BHM-example-mpi.html","page":"Rimu with MPI","title":"Rimu with MPI","text":"Now, we can set other parameters as usual. We will perform the computation with 10000 walkers and for 10000 time steps. We will also compute the projected energy by passing a ProjectedEnergy object as a post_step_strategy.","category":"page"},{"location":"generated/BHM-example-mpi.html","page":"Rimu with MPI","title":"Rimu with MPI","text":"problem = ProjectorMonteCarloProblem(H;\n    start_at=initial_vector,\n    reporting_strategy,\n    post_step_strategy=ProjectedEnergy(H, initial_vector),\n    target_walkers=10_000,\n    time_step=1e-4,\n    last_step=10_000\n);","category":"page"},{"location":"generated/BHM-example-mpi.html","page":"Rimu with MPI","title":"Rimu with MPI","text":"The @mpi_root macro performs an action on the root rank only, which is useful for printing.","category":"page"},{"location":"generated/BHM-example-mpi.html","page":"Rimu with MPI","title":"Rimu with MPI","text":"@mpi_root println(\"Running FCIQMC with \", mpi_size(), \" rank(s).\")","category":"page"},{"location":"generated/BHM-example-mpi.html","page":"Rimu with MPI","title":"Rimu with MPI","text":"Running FCIQMC with 1 rank(s).\n","category":"page"},{"location":"generated/BHM-example-mpi.html","page":"Rimu with MPI","title":"Rimu with MPI","text":"Finally, we can run the computation.","category":"page"},{"location":"generated/BHM-example-mpi.html","page":"Rimu with MPI","title":"Rimu with MPI","text":"simulation = solve(problem);\n\n@mpi_root println(\"Simulation success = \", simulation.success)","category":"page"},{"location":"generated/BHM-example-mpi.html","page":"Rimu with MPI","title":"Rimu with MPI","text":"Simulation success = true\n","category":"page"},{"location":"generated/BHM-example-mpi.html","page":"Rimu with MPI","title":"Rimu with MPI","text":"Once the calculation is done, the results are available in the arrow file on disk.","category":"page"},{"location":"generated/BHM-example-mpi.html","page":"Rimu with MPI","title":"Rimu with MPI","text":"In a typical workflow, the simulation results would be loaded from disk and analysed in the REPL or with a separate script. The arrow file can be loaded into a DataFrame with metadata using the load_df function.","category":"page"},{"location":"generated/BHM-example-mpi.html","page":"Rimu with MPI","title":"Rimu with MPI","text":"","category":"page"},{"location":"generated/BHM-example-mpi.html","page":"Rimu with MPI","title":"Rimu with MPI","text":"This page was generated using Literate.jl.","category":"page"},{"location":"index.html#Rimu.jl-Package-Guide","page":"Guide","title":"Rimu.jl Package Guide","text":"","category":"section"},{"location":"index.html","page":"Guide","title":"Guide","text":"Random Integrators for many-body quantum systems","category":"page"},{"location":"index.html","page":"Guide","title":"Guide","text":"The grand aim is to develop a toolbox for many-body quantum systems that can be represented by a Hamiltonian in second quantisation language. Currently supported features include:","category":"page"},{"location":"index.html#Interacting-with-quantum-many-body-models","page":"Guide","title":"Interacting with quantum many-body models","text":"","category":"section"},{"location":"index.html","page":"Guide","title":"Guide","text":"Full configuration interaction quantum Monte Carlo (FCIQMC), a flavour of projector quantum Monte Carlo for stochastically solving the time-independent Schrödinger equation. See References.\nMatrix-free exact diagonalisation of quantum Hamiltonians (with external package KrylovKit.jl).\nSparse matrix representation of quantum Hamiltonians for exact diagonalisation with sparse linear algebra package of your choice (fastest for small systems).","category":"page"},{"location":"index.html#Representing-quantum-many-body-models","page":"Guide","title":"Representing quantum many-body models","text":"","category":"section"},{"location":"index.html","page":"Guide","title":"Guide","text":"A composable and efficient type system for representing single- and multi-component Fock states of bosons, fermions, and mixtures thereof, to be used as a basis for representing Hamiltonians.\nAn interface for defining many-body Hamiltonians.\nPre-defined models include:\nHubbard model in real space for bosons and fermions and mixtures in 1, 2, and 3 spatial dimensions.\nHubbard and related lattice models in momentum space for bosons and fermions in one spatial dimension.\nTranscorrelated Hamiltonian for contact interactions in one dimension for fermions, as described in Jeszenski et al. arXiv:1806.11268.","category":"page"},{"location":"index.html#Statistical-analysis-of-Monte-Carlo-data","page":"Guide","title":"Statistical analysis of Monte Carlo data","text":"","category":"section"},{"location":"index.html","page":"Guide","title":"Guide","text":"Blocking analysis following Flyvberg & Peterson JCP (1989), and automated with hypothesis testing by Jonsson","category":"page"},{"location":"index.html","page":"Guide","title":"Guide","text":"PRE (2018).","category":"page"},{"location":"index.html","page":"Guide","title":"Guide","text":"Unbiased estimators for the ground state energy by re-reweighting following Nightingale & Blöte PRB (1986) and Umrigar et al. JCP (1993).","category":"page"},{"location":"index.html","page":"Guide","title":"Guide","text":"The code supports parallelisation with MPI (harnessing MPI.jl) as well as native Julia threading (experimental). In the future, we may add tools to solve the time-dependent Schrödinger equation and Master equations for open system time evolution.","category":"page"},{"location":"index.html","page":"Guide","title":"Guide","text":"Concept: Joachim Brand and Elke Pahl.","category":"page"},{"location":"index.html","page":"Guide","title":"Guide","text":"Contributors: Joachim Brand, Elke Pahl, Mingrui Yang, Matija Čufar, Chris Bradly.","category":"page"},{"location":"index.html","page":"Guide","title":"Guide","text":"Discussions, help, and additional contributions are acknowledged by Ali Alavi, Didier Adrien, Chris Scott (NeSI), Alexander Pletzer (NeSI).","category":"page"},{"location":"index.html#Installation","page":"Guide","title":"Installation","text":"","category":"section"},{"location":"index.html#Installing-Rimu-for-usage","page":"Guide","title":"Installing Rimu for usage","text":"","category":"section"},{"location":"index.html","page":"Guide","title":"Guide","text":"Rimu is a registered package and can be installed with the package manager. Hit the ] key at the Julia REPL to get into Pkg mode and type","category":"page"},{"location":"index.html","page":"Guide","title":"Guide","text":"pkg> add Rimu","category":"page"},{"location":"index.html","page":"Guide","title":"Guide","text":"Alternatively, use","category":"page"},{"location":"index.html","page":"Guide","title":"Guide","text":"julia> using Pkg; Pkg.add(name=\"Rimu\")","category":"page"},{"location":"index.html","page":"Guide","title":"Guide","text":"in order to install Rimu from a script.","category":"page"},{"location":"index.html#Installing-Rimu-for-development","page":"Guide","title":"Installing Rimu for development","text":"","category":"section"},{"location":"index.html","page":"Guide","title":"Guide","text":"In order to be able to edit the source code, push changes, change and make new git branches, etc., clone the git repository with git clone to a convenient location, e.g. ~/mygitpackagefolder/. Then hit the ] key at the Julia REPL to get into Pkg mode and type","category":"page"},{"location":"index.html","page":"Guide","title":"Guide","text":"pkg> develop ~/mygitpackagefolder/rimu.jl","category":"page"},{"location":"index.html","page":"Guide","title":"Guide","text":"where the file path has to be adjusted to the location of the cloned git repository.","category":"page"},{"location":"index.html#Usage","page":"Guide","title":"Usage","text":"","category":"section"},{"location":"index.html","page":"Guide","title":"Guide","text":"The package is now installed and can be imported with","category":"page"},{"location":"index.html","page":"Guide","title":"Guide","text":"julia> using Rimu","category":"page"},{"location":"index.html","page":"Guide","title":"Guide","text":"When planning to edit the code of the package it is advisable to use the Revise package by issuing","category":"page"},{"location":"index.html","page":"Guide","title":"Guide","text":"julia> using Revise","category":"page"},{"location":"index.html","page":"Guide","title":"Guide","text":"before using Rimu. This will track any changes made to the source code of Rimu and the changed package will be available after saving the source code (hopefully, and most of the time, without restarting the Julia REPL).","category":"page"},{"location":"index.html","page":"Guide","title":"Guide","text":"Rimu offers a number of tools for representing Hamiltonians (see Hamiltonians) and state vectors / wave functions (see DictVectors) as well as algorithms to find the ground state, e.g. ProjectorMonteCarloProblem, ExactDiagonalizationProblem.","category":"page"},{"location":"index.html#Scripts","page":"Guide","title":"Scripts","text":"","category":"section"},{"location":"index.html","page":"Guide","title":"Guide","text":"Rimu is written as a Julia package to be imported with using Rimu as described above. It supplies useful functions and types. Performing actual calculations and analysing the results is done with scripts. The folder scripts/ contains a collections of scripts that are either examples for use of the Rimu package or useful scripts for data analysis. In particular:","category":"page"},{"location":"index.html","page":"Guide","title":"Guide","text":"scripts/BHM-example.jl is an example script that runs fciqmc on the 1D Bose-Hubbard model. A data frame with results is written to the file fciqmcdata.arrow.\nscripts/BHM-example-mpi.jl demonstrates basic usage of Rimu with MPI.","category":"page"},{"location":"index.html#MPI","page":"Guide","title":"MPI","text":"","category":"section"},{"location":"index.html","page":"Guide","title":"Guide","text":"The Rimu package can run in parallel on different processes or node and distribute work by making use of MPI, or \"message passing interface\". For example, running","category":"page"},{"location":"index.html","page":"Guide","title":"Guide","text":"> julia scripts/BHM-example.jl","category":"page"},{"location":"index.html","page":"Guide","title":"Guide","text":"will run on one processor with the main computation (i.e. after package loading and compilation) completing in 2.69 seconds.","category":"page"},{"location":"index.html","page":"Guide","title":"Guide","text":"Running","category":"page"},{"location":"index.html","page":"Guide","title":"Guide","text":"> mpirun -np 4 julia scripts/BHM-example-mpi.jl","category":"page"},{"location":"index.html","page":"Guide","title":"Guide","text":"on the same hardware makes use of 4 cores and the main part completes in 1.04 seconds, a speedup factor of 2.6. This seems reasonable, given that extra work needs to be done for communicating between different processes.","category":"page"},{"location":"index.html","page":"Guide","title":"Guide","text":"Using MPI parallelism with Rimu is easy. Enabling MPI enabled automatically if PDVec is used to store a vector. In that case, data will be stored in a distributed fashion among the MPI ranks and only communicated between ranks when necessary. Additional MPI-related functionality is provided by the module RMPI.","category":"page"},{"location":"index.html#Compatibility","page":"Guide","title":"Compatibility","text":"","category":"section"},{"location":"index.html","page":"Guide","title":"Guide","text":"We recommend using Rimu with the latest Julia release version. Rimu requires at least julia v1.9.","category":"page"},{"location":"index.html#References","page":"Guide","title":"References","text":"","category":"section"},{"location":"index.html","page":"Guide","title":"Guide","text":"The code implements the FCIQMC algorithm originally described in","category":"page"},{"location":"index.html","page":"Guide","title":"Guide","text":"\"Fermion Monte Carlo without fixed nodes: A game of life, death, and annihilation in Slater determinant space\", G. H. Booth, A. J. W. Thom, A. Alavi, J. Chem. Phys. 131, 054106 (2009).\n\"Communications: Survival of the fittest: accelerating convergence in full configuration-interaction quantum Monte Carlo.\", D. Cleland,  G. H. Booth, A. Alavi, J. Chem. Phys. 132, 041103 (2010).","category":"page"},{"location":"index.html","page":"Guide","title":"Guide","text":"Scientific papers describing additional features implemented in Rimu:","category":"page"},{"location":"index.html","page":"Guide","title":"Guide","text":"\"Improved walker population control for full configuration interaction quantum Monte Carlo\", M. Yang, E. Pahl, J. Brand, J. Chem. Phys. 153, 170143 (2020); arXiv:2008.01927.\n\"Stochastic differential equation approach to understanding the population control bias in full configuration interaction quantum Monte Carlo\", J. Brand, M. Yang, E. Pahl, arXiv:2103.07800 (2021).","category":"page"},{"location":"index.html","page":"Guide","title":"Guide","text":"Papers discussing results obtained with Rimu:","category":"page"},{"location":"index.html","page":"Guide","title":"Guide","text":"\"Polaron-Depleton Transition in the Yrast Excitations of a One-Dimensional Bose Gas with a Mobile Impurity\", M. Yang, M. Čufar, E. Pahl, J. Brand, Condens. Matter 7, 15 (2022).\n\"Magnetic impurity in a one-dimensional few-fermion system\", L. Rammelmüller, D. Huber, M. Čufar, J. Brand, A. Volosniev, arXiv:2204.01606 (2022).","category":"page"},{"location":"dictvectors.html#Module-DictVectors","page":"Dict vectors","title":"Module DictVectors","text":"","category":"section"},{"location":"dictvectors.html","page":"Dict vectors","title":"Dict vectors","text":"DictVectors\nAbstractDVec","category":"page"},{"location":"dictvectors.html#Rimu.DictVectors","page":"Dict vectors","title":"Rimu.DictVectors","text":"Module that provides concrete implementations of the AbstractDVec interface.\n\nDVec: basic AbstractDVec\nPDVec: parallel AbstractDVec with MPI and initiator support\nInitiatorDVec: allows storing information about initiator status\n\nSee Interfaces.\n\n\n\n\n\n","category":"module"},{"location":"dictvectors.html#Rimu.Interfaces.AbstractDVec","page":"Dict vectors","title":"Rimu.Interfaces.AbstractDVec","text":"AbstractDVec{K,V}\n\nAbstract data type for vector-like data structures with sparse storage. While conceptually AbstractDVecs represent elements of a vector space over a scalar type V, they are indexed by an arbitrary type K (could be non-integers) similar to dictionaries. They support the interface from VectorInterface.jl and are designed to work well for quantum Monte Carlo with ProjectorMonteCarloProblem and for matrix-free linear algebra with KrylovKit.\n\nConcrete implementations are available as PDVec, DVec, and InitiatorDVec.\n\nAbstractDVecs have a StochasticStyle which selects the spawning algorithm in FCIQMC. Looking up an element that is not stored in the AbstractDVec should return a zero, and setting a value to zero should remove it from the vector. To iterate over an AbstractDVec, use keys, pairs, or values. When possible, use reduction functions such as sum or mapreduce.\n\nInterface\n\nThe interface is similar to the AbstractDict interface, but with the changed behaviour as noted above.  Implement what would be needed for the AbstractDict interface (pairs, keys, values, setindex!, getindex, delete!, length, empty, empty!) and, in addition:\n\nStochasticStyle\nstorage returns an AbstractDict storing the raw data with possibly different valtype than V.\ndeposit!\n\nA default implementation for the VectorInterface.jl interface is provided through the above functions.\n\nSee also DictVectors, Interfaces.\n\n\n\n\n\n","category":"type"},{"location":"dictvectors.html#Concrete-implementations","page":"Dict vectors","title":"Concrete implementations","text":"","category":"section"},{"location":"dictvectors.html","page":"Dict vectors","title":"Dict vectors","text":"DVec\nInitiatorDVec\nPDVec","category":"page"},{"location":"dictvectors.html#Rimu.DictVectors.DVec","page":"Dict vectors","title":"Rimu.DictVectors.DVec","text":"DVec{K,V,D<:AbstractDict{K,V},S}\n\nDictionary-based vector-like data structure for use with FCIQMC and KrylovKit. While mostly behaving like a Dict, it supports various linear algebra operations such as norm and dot. It has a StochasticStyle that is used to select an appropriate spawning strategy in the FCIQMC algorithm.\n\nSee also: AbstractDVec, InitiatorDVec, PDVec.\n\nConstructors\n\nDVec(dict::AbstractDict[; style, capacity]): create a DVec with dict for storage. Note that the data may or may not be copied.\nDVec(args...[; style, capacity]): args... are passed to the Dict constructor. The Dict is used for storage.\nDVec{K,V}([; style, capacity]): create an empty DVec{K,V}.\nDVec(dv::AbstractDVec[; style, capacity]): create a DVec with the same contents as  adv. The style is inherited from dv by default.\n\nThe default style is selected based on the DVec's valtype (see default_style). If a style is given and the valtype does not match the style's eltype, the values are converted to an appropriate type.\n\nThe capacity argument is optional and sets the initial size of the DVec via Base.sizehint!.\n\nExamples\n\njulia> dv = DVec(:a => 1)\nDVec{Symbol,Int64} with 1 entry, style = IsStochasticInteger{Int64}()\n  :a => 1\n\njulia> dv = DVec(:a => 2, :b => 3; style=IsDeterministic())\nDVec{Symbol,Float64} with 2 entries, style = IsDeterministic{Float64}()\n  :a => 2.0\n  :b => 3.0\n\n\n\n\n\n","category":"type"},{"location":"dictvectors.html#Rimu.DictVectors.InitiatorDVec","page":"Dict vectors","title":"Rimu.DictVectors.InitiatorDVec","text":"InitiatorDVec{K,V} <: AbstractDVec{K,V}\n\nDictionary-based vector-like data structure for use with ProjectorMonteCarloProblem and KrylovKit.jl. See AbstractDVec. Functionally identical to DVec, but contains InitiatorValues internally in order to facilitate initiator methods. Initiator methods for controlling the Monte Carlo sign problem were first introduced in J. Chem. Phys. 132, 041103 (2010). How the initiators are handled is controlled by specifying an InitiatorRule with the initiator keyword argument (see below).\n\nSee also: AbstractDVec, DVec, PDVec.\n\nConstructors\n\nInitiatorDVec(dict::AbstractDict[; style, initiator, capacity]): create an InitiatorDVec with dict for storage.  Note that the data may or may not be copied.\nInitiatorDVec(args...[; style, initiator, capacity]): args... are passed to the Dict constructor. The Dict is used for storage.\nInitiatorDVec{K,V}([; style, initiator, capacity]): create an empty InitiatorDVec{K,V}.\nInitiatorDVec(dv::AbstractDVec[; style, initiator, capacity]): create an InitiatorDVec  with the same contents as dv. The style is inherited from dv by default.\n\nKeyword  arguments\n\nstyle: A valid StochasticStyle.  The default is selected based on the InitiatorDVec's valtype (see default_style). If a style is given and the valtype does not match the style's eltype, the values are converted to an appropriate type.\ninitiator = Initiator(1): A valid InitiatorRule. See Initiator.\ncapacity: Indicative size as Int. Optional. Sets the initial size of the InitiatorDVec via Base.sizehint!.\n\n\n\n\n\n","category":"type"},{"location":"dictvectors.html#Rimu.DictVectors.PDVec","page":"Dict vectors","title":"Rimu.DictVectors.PDVec","text":"PDVec{K,V}(; kwargs...)\nPDVec(iter; kwargs...)\nPDVec(pairs...; kwargs...)\n\nDictionary-based vector-like data structure for use with FCIQMC and KrylovKit.jl. While mostly behaving like a Dict, it supports various linear algebra operations such as norm and dot, and the interface defined in VectorInterface.\n\nThe P in PDVec stands for parallel. PDVecs perform mapreduce, foreach, and various linear algebra operations in a threaded manner. If MPI is available, these operations are automatically distributed as well. As such it is not recommended to iterate over pairs, keys, or values directly unless explicitly performing them on the localpart of the vector.\n\nSee also: AbstractDVec, DVec, InitiatorDVec.\n\nKeyword arguments\n\nstyle =default_style(V): A StochasticStyle that is used to select the spawning strategy in the FCIQMC algorithm.\ninitiator =NonInitiator(): An InitiatorRule, used in FCIQMC to remove the sign problem.\ncommunicator: A Communicator that controls how operations are performed when using MPI. The defaults are NotDistributed when not using MPI and AllToAll when using MPI.\n\nExtended Help\n\nSegmentation\n\nThe vector is split into Threads.nthreads() subdictionaries called segments. Which dictionary a key-value pair is mapped to is determined by the hash of the key. The purpose of this segmentation is to allow parallel processing - functions such as mapreduce, add! or dot (full list below) process each subdictionary on a separate thread.\n\nSee also PDWorkingMemory.\n\nExample\n\njulia> add = FermiFS2C((1,1,0,0), (0,0,1,1));\n\njulia> op = HubbardMom1D(add; t=4/π^2, u=4);\n\njulia> pv = PDVec(add => 1.0)\n1-element PDVec: style = IsDeterministic{Float64}()\n  fs\"|↑↑↓↓⟩\" => 1.0\n\njulia> pv = op * pv\n7-element PDVec: style = IsDeterministic{Float64}()\n  fs\"|↑↓↑↓⟩\" => 1.0\n  fs\"|↑↑↓↓⟩\" => 4.0\n  fs\"|↓↑↓↑⟩\" => 1.0\n  fs\"|↓↑↑↓⟩\" => -1.0\n  fs\"|⇅⋅⋅⇅⟩\" => 1.0\n  fs\"|↑↓↓↑⟩\" => -1.0\n  fs\"|⋅⇅⇅⋅⟩\" => 1.0\n\njulia> scale!(pv, -1); pv\n7-element PDVec: style = IsDeterministic{Float64}()\n  fs\"|↑↓↑↓⟩\" => -1.0\n  fs\"|↑↑↓↓⟩\" => -4.0\n  fs\"|↓↑↓↑⟩\" => -1.0\n  fs\"|↓↑↑↓⟩\" => 1.0\n  fs\"|⇅⋅⋅⇅⟩\" => -1.0\n  fs\"|↑↓↓↑⟩\" => 1.0\n  fs\"|⋅⇅⇅⋅⟩\" => -1.0\n\njulia> dest = similar(pv)\n0-element PDVec: style = IsDeterministic{Float64}()\n\njulia> map!(x -> x + 2, dest, values(pv))\n7-element PDVec: style = IsDeterministic{Float64}()\n  fs\"|↑↓↑↓⟩\" => 1.0\n  fs\"|↑↑↓↓⟩\" => -2.0\n  fs\"|↓↑↓↑⟩\" => 1.0\n  fs\"|↓↑↑↓⟩\" => 3.0\n  fs\"|⇅⋅⋅⇅⟩\" => 1.0\n  fs\"|↑↓↓↑⟩\" => 3.0\n  fs\"|⋅⇅⇅⋅⟩\" => 1.0\n\njulia> sum(values(pv))\n-6.0\n\njulia> dot(dest, pv)\n10.0\n\njulia> dot(dest, op, pv)\n44.0\n\nMPI\n\nWhen MPI is active, all parallel reductions are automatically reduced across MPI ranks with a call to MPI.Allreduce!.\n\nIn a distributed setting, PDVec does not support iteration without first making it explicit the iteration is only to be performed on the local segments of the vector. This is done with localpart. In general, even when not using MPI, it is best practice to use localpart when explicit iteration is required.\n\nUse with KrylovKit\n\nPDVec is compatible with eigsolve from KrylovKit.jl. When used, the diagonalisation is performed in a threaded and distributed manner. Using multiple MPI ranks with this method does not distribute the memory load effectively, but does result in significant speedups.\n\nExample\n\njulia> using KrylovKit\n\njulia> add = BoseFS((0,0,5,0,0));\n\njulia> op = HubbardMom1D(add; u=6.0);\n\njulia> pv = PDVec(add => 1.0);\n\njulia> results = eigsolve(op, pv, 4, :SR);\n\njulia> results[1][1:4]\n4-element Vector{Float64}:\n -3.4311156892322234\n  1.1821748602612363\n  3.7377753753082823\n  6.996390417443125\n\nParallel functionality\n\nThe following functions are threaded and MPI-compatible:\n\nFrom Base: mapreduce and derivatives (sum, prod, reduce...), all, any,map! (on values only), +, -, *\nFrom LinearAlgebra: rmul!, lmul!, mul!, axpy!, axpby!, dot, norm, normalize, normalize!\nThe full interface defined in VectorInterface.jl\n\n\n\n\n\n","category":"type"},{"location":"dictvectors.html#Interface-functions","page":"Dict vectors","title":"Interface functions","text":"","category":"section"},{"location":"dictvectors.html","page":"Dict vectors","title":"Dict vectors","text":"deposit!\nstorage\nfreeze\nlocalpart\napply_operator!\nsort_into_targets!\nworking_memory","category":"page"},{"location":"dictvectors.html#Rimu.Interfaces.deposit!","page":"Dict vectors","title":"Rimu.Interfaces.deposit!","text":"deposit!(w::InitiatorDVec, add, val, p_add=>p_val)\n\nAdd val into w at address add as an AbstractInitiatorValue.\n\n\n\n\n\ndeposit!(w::AbstractDVec, add, val, parent::Pair)\n\nAdd val into w at address add, taking into account initiator rules if applicable. parent contains the address => value pair from which the pair add => val was created. InitiatorDVec can intercept this and add its own functionality.\n\n\n\n\n\n","category":"function"},{"location":"dictvectors.html#Rimu.Interfaces.storage","page":"Dict vectors","title":"Rimu.Interfaces.storage","text":"storage(dvec) -> AbstractDict\n\nReturn the raw storage associated with dvec as an AbstractDict. Used in MPI communication.\n\n\n\n\n\n","category":"function"},{"location":"dictvectors.html#OrderedCollections.freeze","page":"Dict vectors","title":"OrderedCollections.freeze","text":"freeze(dv)\n\nCreate a \"frozen\" version of dv which can no longer be modified or used in the conventional manner, but supports faster dot products.\n\nIf dv is an MPIData, synchronize its contents among the ranks first.\n\n\n\n\n\n","category":"function"},{"location":"dictvectors.html#Rimu.Interfaces.localpart","page":"Dict vectors","title":"Rimu.Interfaces.localpart","text":"localpart(dv) -> AbstractDVec\n\nGet the part of dv that is located on this MPI rank. Returns dv itself for vectors that can't be MPI distributed (DVecs and InitiatorDVecs).\n\n\n\n\n\n","category":"function"},{"location":"dictvectors.html#Rimu.Interfaces.apply_operator!","page":"Dict vectors","title":"Rimu.Interfaces.apply_operator!","text":"apply_operator!(working_memory, target, source, operator, boost=1, compress=Val(true)) ->\n    stat_names, stats, working_memory, target\n\nPerform a single matrix(/operator)-vector multiplication:\n\nv^(n + 1) = hatT v^(n) \n\nwhere hatT is the operator, v^(n+1) is the target and v^(n) is the source. The working_memory can be used as temporary storage.\n\nThe boost argument is passed to apply_column! and increases the number of spawns performed. For the operator to be applied without compressing the vector after, set compress to Val(false).\n\nWhether the operation is performed in a stochastic, semistochastic, or determistic way is controlled by the trait StochasticStyle(target). See StochasticStyle.\n\nReturns the step stats generated by the StochasticStyle, the working memory and the target vector. target and working_memory may be mutated and/or swapped.\n\n\n\n\n\n","category":"function"},{"location":"dictvectors.html#Rimu.Interfaces.sort_into_targets!","page":"Dict vectors","title":"Rimu.Interfaces.sort_into_targets!","text":"sort_into_targets!(target, source, stats) -> target, source, agg_stats\n\nAggregate coefficients from source to target and from stats to agg_stats according to thread- or MPI-level parallelism.\n\nReturns the new target and source, as the sorting process may involve swapping them.\n\n\n\n\n\n","category":"function"},{"location":"dictvectors.html#Rimu.Interfaces.working_memory","page":"Dict vectors","title":"Rimu.Interfaces.working_memory","text":"working_memory(dv::AbstractDVec)\n\nCreate a working memory instance compatible with dv. The working memory must be compatible with sort_into_targets! and apply_operator!.\n\n\n\n\n\n","category":"function"},{"location":"dictvectors.html#Supported-operations","page":"Dict vectors","title":"Supported operations","text":"","category":"section"},{"location":"dictvectors.html","page":"Dict vectors","title":"Dict vectors","text":"AbstractDVecs generally support most operations that are defined on Vectors and Dicts. This includes the interface from VectorInterface.jl, and many functions from the LinearAlgebra standard library.","category":"page"},{"location":"dictvectors.html","page":"Dict vectors","title":"Dict vectors","text":"A significant difference between AbstractDVecs, Vectors, and Dicts, is that iteration on them is disabled by default. Iteration must be explicitly performed on keys, values, or pairs, however, it is highly recommended you use mapreduce, reduce, or similar functions when performing reductions, as that will make the operations compatible with MPI.","category":"page"},{"location":"dictvectors.html","page":"Dict vectors","title":"Dict vectors","text":"In addition, Rimu defines the following function.","category":"page"},{"location":"dictvectors.html","page":"Dict vectors","title":"Dict vectors","text":"walkernumber\nwalkernumber_and_length\ndot_from_right","category":"page"},{"location":"dictvectors.html#Rimu.DictVectors.walkernumber","page":"Dict vectors","title":"Rimu.DictVectors.walkernumber","text":"walkernumber(md::MPIData)\n\nCompute the walkernumber of the distributed data on every MPI rank with MPI.Allreduce. MPI syncronizing.\n\n\n\n\n\nwalkernumber(v)\n\nCompute the number of walkers in v. It is used for updating the shift. Overload this function for modifying population control.\n\nIn most cases walkernumber(v) is identical to norm(v, 1). For AbstractDVecs with complex coefficients it reports the one norm separately for the real and the imaginary part as a ComplexF64. See Norm1ProjectorPPop.\n\n\n\n\n\n","category":"function"},{"location":"dictvectors.html#Rimu.DictVectors.walkernumber_and_length","page":"Dict vectors","title":"Rimu.DictVectors.walkernumber_and_length","text":"walkernumber_and_length(v)\n\nCompute walkernumber and length at the same time. When MPI is used, this is more efficient than calling them separately.\n\n\n\n\n\n","category":"function"},{"location":"dictvectors.html#Rimu.Interfaces.dot_from_right","page":"Dict vectors","title":"Rimu.Interfaces.dot_from_right","text":"dot_from_right(w, op::AbstractOperator, v)\n\nInternal function evaluates the 3-argument dot() function in order from right to left.\n\n\n\n\n\n","category":"function"},{"location":"dictvectors.html#Projectors","page":"Dict vectors","title":"Projectors","text":"","category":"section"},{"location":"dictvectors.html","page":"Dict vectors","title":"Dict vectors","text":"AbstractProjector\nNormProjector\nNorm2Projector\nUniformProjector\nNorm1ProjectorPPop\nRimu.DictVectors.FrozenDVec\nRimu.DictVectors.FrozenPDVec","category":"page"},{"location":"dictvectors.html#Rimu.DictVectors.AbstractProjector","page":"Dict vectors","title":"Rimu.DictVectors.AbstractProjector","text":"Abstract supertype for projectors to be used in in lieu of DVecs or Vectors in dot products. Implemented subtypes:\n\nUniformProjector\nNormProjector\nNorm2Projector\nNorm1ProjectorPPop\n\nSee also PostStepStrategy for use of projectors in ProjectorMonteCarloProblem.\n\nInterface\n\nDefine a method for LinearAlgebra.dot(projector, v).\n\n\n\n\n\n","category":"type"},{"location":"dictvectors.html#Rimu.DictVectors.NormProjector","page":"Dict vectors","title":"Rimu.DictVectors.NormProjector","text":"NormProjector() <: AbstractProjector\n\nResults in computing the one-norm when used in dot(). E.g.\n\ndot(NormProjector(),x)\n-> norm(x,1)\n\nNormProjector() thus represents the vector sign.(x).\n\nSee also PostStepStrategy, and AbstractProjector for use of projectors in ProjectorMonteCarloProblem.\n\n\n\n\n\n","category":"type"},{"location":"dictvectors.html#Rimu.DictVectors.Norm2Projector","page":"Dict vectors","title":"Rimu.DictVectors.Norm2Projector","text":"Norm2Projector() <: AbstractProjector\n\nResults in computing the two-norm when used in dot(). E.g.\n\ndot(NormProjector(),x)\n-> norm(x,2) # with type Float64\n\nSee also PostStepStrategy, and AbstractProjector for use of projectors in ProjectorMonteCarloProblem.\n\n\n\n\n\n","category":"type"},{"location":"dictvectors.html#Rimu.DictVectors.UniformProjector","page":"Dict vectors","title":"Rimu.DictVectors.UniformProjector","text":"UniformProjector() <: AbstractProjector\n\nRepresents a vector with all elements 1. To be used with dot(). Minimizes memory allocations.\n\nUniformProjector()⋅v == sum(v)\ndot(UniformProjector(), LO, v) == sum(LO*v)\n\nSee also PostStepStrategy, and AbstractProjector for use of projectors in ProjectorMonteCarloProblem.\n\n\n\n\n\n","category":"type"},{"location":"dictvectors.html#Rimu.DictVectors.Norm1ProjectorPPop","page":"Dict vectors","title":"Rimu.DictVectors.Norm1ProjectorPPop","text":"Norm1ProjectorPPop() <: AbstractProjector\n\nResults in computing the one-norm per population when used in dot(). E.g.\n\ndot(Norm1ProjectorPPop(),x)\n-> norm(real.(x),1) + im*norm(imag.(x),1)\n\nSee also PostStepStrategy, and AbstractProjector for use of projectors in ProjectorMonteCarloProblem.\n\n\n\n\n\n","category":"type"},{"location":"dictvectors.html#Rimu.DictVectors.FrozenDVec","page":"Dict vectors","title":"Rimu.DictVectors.FrozenDVec","text":"FrozenDVec\n\nA frozen DVec(s) can't be modified or used in the conventional manner, but support faster dot products. See: freeze.\n\n\n\n\n\n","category":"type"},{"location":"dictvectors.html#Rimu.DictVectors.FrozenPDVec","page":"Dict vectors","title":"Rimu.DictVectors.FrozenPDVec","text":"FrozenPDVec\n\nParallel version of FrozenDVec. See: freeze, PDVec.\n\n\n\n\n\n","category":"type"},{"location":"dictvectors.html#Initiator-rules","page":"Dict vectors","title":"Initiator rules","text":"","category":"section"},{"location":"dictvectors.html","page":"Dict vectors","title":"Dict vectors","text":"Rimu.DictVectors.InitiatorRule\nRimu.DictVectors.AbstractInitiatorValue\nRimu.DictVectors.InitiatorValue\nRimu.DictVectors.initiator_valtype\nRimu.DictVectors.to_initiator_value\nRimu.DictVectors.from_initiator_value\nRimu.DictVectors.Initiator\nRimu.DictVectors.SimpleInitiator\nRimu.DictVectors.CoherentInitiator\nRimu.DictVectors.NonInitiator\nRimu.DictVectors.NonInitiatorValue","category":"page"},{"location":"dictvectors.html#Rimu.DictVectors.InitiatorRule","page":"Dict vectors","title":"Rimu.DictVectors.InitiatorRule","text":"InitiatorRule{V}\n\nAbstract type for defining initiator rules for InitiatorDVec. Concrete implementations:\n\nInitiator\nSimpleInitiator\nCoherentInitiator\nNonInitiator\n\nExtended Help\n\nInitiatorRules define how to store and retrieve data from associated AbstractInitiatorValues. When defining a new InitiatorRule, also define the following:\n\ninitiator_valtype\nfrom_initiator_value\nto_initiator_value\n\n\n\n\n\n","category":"type"},{"location":"dictvectors.html#Rimu.DictVectors.AbstractInitiatorValue","page":"Dict vectors","title":"Rimu.DictVectors.AbstractInitiatorValue","text":"abstract type AbstractInitiatorValue{V}\n\nA value equipped with additional information that enables a variation of the initiator approximation. To be used with PDVec, InitiatorDVec and InitiatorRules.\n\nMust define:\n\nBase.zero, Base.:+, Base.:-, Base.:*\nfrom_initiator_value and to_initiator_value\n\n\n\n\n\n","category":"type"},{"location":"dictvectors.html#Rimu.DictVectors.InitiatorValue","page":"Dict vectors","title":"Rimu.DictVectors.InitiatorValue","text":"InitiatorValue{V}(; safe::V, unsafe::V, initiator::V) where V\n\nComposite \"walker\" with three fields. For use with InitiatorDVecs.\n\n\n\n\n\n","category":"type"},{"location":"dictvectors.html#Rimu.DictVectors.initiator_valtype","page":"Dict vectors","title":"Rimu.DictVectors.initiator_valtype","text":"initiator_valtype(rule::InitiatorRule, T)\n\nReturn the AbstractInitiatorValue{T} that is employed by the rule.\n\n\n\n\n\n","category":"function"},{"location":"dictvectors.html#Rimu.DictVectors.to_initiator_value","page":"Dict vectors","title":"Rimu.DictVectors.to_initiator_value","text":"to_initiator_value(::InitiatorRule, k::K, v::V, parent)\n\nConvert v to an AbstractInitiatorValue, taking the initiator rule and the parent that spawned it into account.\n\n\n\n\n\n","category":"function"},{"location":"dictvectors.html#Rimu.DictVectors.from_initiator_value","page":"Dict vectors","title":"Rimu.DictVectors.from_initiator_value","text":"from_initiator_value(i::InitiatorRule, v::AbstractInitiatorValue)\n\nConvert the AbstractInitiatorValue v into a scalar value according to the InitiatorRule i.\n\n\n\n\n\n","category":"function"},{"location":"dictvectors.html#Rimu.DictVectors.Initiator","page":"Dict vectors","title":"Rimu.DictVectors.Initiator","text":"Initiator(threshold = 1.0) <: InitiatorRule\n\nInitiator rule to be passed to PDVec or InitiatorDVec. An initiator is a configuration add with a coefficient with magnitude abs(v[add]) > threshold. The threshold can be passed as a keyword argument. Rules:\n\nInitiators can spawn anywhere.\nNon-initiators can spawn to initiators.\n\nSee InitiatorRule.\n\n\n\n\n\n","category":"type"},{"location":"dictvectors.html#Rimu.DictVectors.SimpleInitiator","page":"Dict vectors","title":"Rimu.DictVectors.SimpleInitiator","text":"SimpleInitiator(threshold = 1.0) <: InitiatorRule\n\nInitiator rule to be passed to PDVec or InitiatorDVec. An initiator is a configuration add with a coefficient with magnitude abs(v[add]) > threshold. The threshold can be passed as a keyword argument. Rules:\n\nInitiators can spawn anywhere.\nNon-initiators cannot spawn.\n\nSee InitiatorRule.\n\n\n\n\n\n","category":"type"},{"location":"dictvectors.html#Rimu.DictVectors.CoherentInitiator","page":"Dict vectors","title":"Rimu.DictVectors.CoherentInitiator","text":"CoherentInitiator(threshold = 1.0) <: InitiatorRule\n\nInitiator rule to be passed to PDVec or InitiatorDVec. An initiator is a configuration add with a coefficient with magnitude abs(v[add]) > threshold. The threshold can be passed as a keyword argument. Rules:\n\nInitiators can spawn anywhere.\nNon-initiators can spawn to initiators.\nMultiple non-initiators can spawn to a single non-initiator if their contributions add up to a value greater than the initiator threshold.\n\nSee InitiatorRule.\n\n\n\n\n\n","category":"type"},{"location":"dictvectors.html#Rimu.DictVectors.NonInitiator","page":"Dict vectors","title":"Rimu.DictVectors.NonInitiator","text":"NonInitiator() <: InitiatorRule\n\nInitiator rule that disables the approximation. This is the default setting for PDVec.\n\nSee InitiatorRule.\n\n\n\n\n\n","category":"type"},{"location":"dictvectors.html#Rimu.DictVectors.NonInitiatorValue","page":"Dict vectors","title":"Rimu.DictVectors.NonInitiatorValue","text":"NonInitiatorValue{V}\n\nValue that does not contain any additional information - used with NonInitiator, the default initiator rule for PDVec.\n\n\n\n\n\n","category":"type"},{"location":"dictvectors.html#PDVec-internals","page":"Dict vectors","title":"PDVec internals","text":"","category":"section"},{"location":"dictvectors.html#Working-memory","page":"Dict vectors","title":"Working memory","text":"","category":"section"},{"location":"dictvectors.html","page":"Dict vectors","title":"Dict vectors","text":"Modules = [DictVectors]\nPages = [\"pdworkingmemory.jl\"]","category":"page"},{"location":"dictvectors.html#Rimu.DictVectors.FirstColumnIterator","page":"Dict vectors","title":"Rimu.DictVectors.FirstColumnIterator","text":"FirstColumnIterator{W,D} <: AbstractVector{D}\n\nIterates segments in the first column of a working memory that belong to a specified rank.\n\nSee PDWorkingMemory, remote_segments and local_segments.\n\n\n\n\n\n","category":"type"},{"location":"dictvectors.html#Rimu.DictVectors.PDWorkingMemory","page":"Dict vectors","title":"Rimu.DictVectors.PDWorkingMemory","text":"PDWorkingMemory(t::PDVec)\n\nThe working memory that handles threading and MPI distribution for operations that involve operators, such as FCIQMC propagation, operator-vector multiplication and three-way dot products with PDVecs.\n\nThe working memory is structured as a two-dimensional array of segments, which themselves are Dicts (see PDVec). The number of rows in this array is equal to the number of segments across all MPI ranks (covering the entire address space), while the number of columns corresponds to the number of segments in the current MPI rank (i.e. column corresponds to the part of the address space that is local to the current rank).\n\nThe purpose of this organisation is to allow spawning in parallel without using locks or atomic operations. The spawning is performed by applying the following sequence of operations:\n\nperform_spawns!: each segment in the PDVec is multiplied by the operator independently, with the results being stored in a column of the working memory.\ncollect_local!: the rows of the working memory are summed to the first column.\nsynchronize_remote!: the segments corresponding to other MPI ranks are distributed and transferred to the first column.\nmove_and_compress!: the results are stochastically compressed and moved to the result PDVec\n\nWhen used with three-argument dot products, a full copy of the left-hand side vector is materialized in the first column of the working memory on all ranks.\n\n\n\n\n\n","category":"type"},{"location":"dictvectors.html#Rimu.DictVectors.PDWorkingMemoryColumn","page":"Dict vectors","title":"Rimu.DictVectors.PDWorkingMemoryColumn","text":"PDWorkingMemoryColumn\n\nA column in PDWorkingMemory. Supports getindex, deposit! and StochasticStyle and acts as a target for spawning. Can be used as a target in a three-way dot-product.\n\n\n\n\n\n","category":"type"},{"location":"dictvectors.html#Rimu.DictVectors.collect_local!-Tuple{PDWorkingMemory}","page":"Dict vectors","title":"Rimu.DictVectors.collect_local!","text":"collect_local!(w::PDWorkingMemory)\n\nSum each row in w and store the result in the first column. This step must be performed before using local_segments or remote_segments to move the values elsewhere.\n\nSee PDWorkingMemory.\n\n\n\n\n\n","category":"method"},{"location":"dictvectors.html#Rimu.DictVectors.first_column-Union{Tuple{PDWorkingMemory{K, V, W, S}}, Tuple{S}, Tuple{W}, Tuple{V}, Tuple{K}} where {K, V, W, S}","page":"Dict vectors","title":"Rimu.DictVectors.first_column","text":"first_column(::PDWorkingMemory)\n\nReturn the first column of the working memory. This is where the vectors are collected with collect_local!, synchronize_remote!, copy_to_local!.\n\nSee PDWorkingMemory.\n\n\n\n\n\n","category":"method"},{"location":"dictvectors.html#Rimu.DictVectors.local_segments-Tuple{PDWorkingMemory}","page":"Dict vectors","title":"Rimu.DictVectors.local_segments","text":"local_segments(w::PDWorkingMemory)\n\nReturns iterator over the segments in the first column of w on the current rank. Iterates Dicts.\n\nSee PDWorkingMemory.\n\n\n\n\n\n","category":"method"},{"location":"dictvectors.html#Rimu.DictVectors.move_and_compress!-Tuple{PDVec, PDWorkingMemory}","page":"Dict vectors","title":"Rimu.DictVectors.move_and_compress!","text":"move_and_compress!(dst::PDVec, src::PDWorkingMemory)\nmove_and_compress!(::CompressionStrategy, dst::PDVec, src::PDWorkingMemory)\n\nMove the values in src to dst, compressing the according to the CompressionStrategy on the way. This step can only be performed after collect_local! and synchronize_remote!.\n\nSee PDWorkingMemory.\n\n\n\n\n\n","category":"method"},{"location":"dictvectors.html#Rimu.DictVectors.num_columns-Tuple{PDWorkingMemory}","page":"Dict vectors","title":"Rimu.DictVectors.num_columns","text":"num_columns(w::PDWorkingMemory) -> Int\n\nNumber of columns in the working memory. The number of rows is equal to the number of segments in the local MPI rank.\n\nSee PDWorkingMemory.\n\n\n\n\n\n","category":"method"},{"location":"dictvectors.html#Rimu.DictVectors.num_rows-Tuple{PDWorkingMemory}","page":"Dict vectors","title":"Rimu.DictVectors.num_rows","text":"num_rows(w::PDWorkingMemory) -> Int\n\nNumber of rows in the working memory. The number of rows is equal to the number of segments accross all MPI ranks.\n\nSee PDWorkingMemory.\n\n\n\n\n\n","category":"method"},{"location":"dictvectors.html#Rimu.DictVectors.perform_spawns!-Tuple{PDWorkingMemory, PDVec, Any, Any}","page":"Dict vectors","title":"Rimu.DictVectors.perform_spawns!","text":"perform_spawns!(w::PDWorkingMemory, v::PDVec, ham, boost)\n\nPerform spawns from v through ham to w. boost increases the number of spawns without affecting the expectation value of the process.\n\nSee PDVec and PDWorkingMemory.\n\n\n\n\n\n","category":"method"},{"location":"dictvectors.html#Rimu.DictVectors.remote_segments-Tuple{PDWorkingMemory, Any}","page":"Dict vectors","title":"Rimu.DictVectors.remote_segments","text":"remote_segments(w::PDWorkingMemory, rank_id)\n\nReturns iterator over the segments in the first column of w that belong to rank rank_id. Iterates Dicts.\n\nSee PDWorkingMemory.\n\n\n\n\n\n","category":"method"},{"location":"dictvectors.html#Rimu.DictVectors.synchronize_remote!-Tuple{PDWorkingMemory}","page":"Dict vectors","title":"Rimu.DictVectors.synchronize_remote!","text":"synchronize_remote!([::Communicator,] w::PDWorkingMemory) -> names, values\n\nSynchronize non-local segments across MPI and add the results to the first column. Controlled by the Communicator. This can only be perfomed after collect_local!.\n\nShould return a Tuple of names and a Tuple of values to report.\n\nSee PDWorkingMemory.\n\n\n\n\n\n","category":"method"},{"location":"dictvectors.html#Communicators","page":"Dict vectors","title":"Communicators","text":"","category":"section"},{"location":"dictvectors.html","page":"Dict vectors","title":"Dict vectors","text":"Modules = [DictVectors]\nPages = [\"communicators.jl\"]","category":"page"},{"location":"dictvectors.html#Rimu.DictVectors.AllToAll","page":"Dict vectors","title":"Rimu.DictVectors.AllToAll","text":"AllToAll{K,V}(; mpi_comm, n_segments, report) <: Communicator\n\nCommunicator that uses collective communication using MPI.Alltoall[v]!.\n\nKeyword arguments\n\nmpi_comm=MPI.COMM_WORLD: the MPI communicator to use.\nn_segments=Threads.nthreads(): the number of segments per rank to use. Should match the PDVec the communicator is used with.\nreport=false: if set to true, report MPI communication times during a projector Monte Carlo run.\n\nSee also: Communicator.\n\n\n\n\n\n","category":"type"},{"location":"dictvectors.html#Rimu.DictVectors.Communicator","page":"Dict vectors","title":"Rimu.DictVectors.Communicator","text":"abstract type Communicator\n\nCommunicators are used to handle MPI communication when using PDVecs. Currently, three implementations are provided, NotDistributed, AllToAll and PointToPoint. The communicator is picked automatically according to the number of MPI ranks available.\n\nWhen implementing a communicator, use local_segments and remote_segments.\n\nInterface\n\nsynchronize_remote!\nmpi_rank\nmpi_size\nmpi_comm\n\nOptional interface\n\nis_distributed: defaults to returning true.\nmerge_remote_reductions: defaults to using MPI.Allreduce.\ntotal_num_segments: defaults to n * mpi_size.\ntarget_segment: defaults to selecting using fastrange  to pick the segment.\n\nSee also: PDVec, PDWorkingMemory.\n\n\n\n\n\n","category":"type"},{"location":"dictvectors.html#Rimu.DictVectors.LocalPart","page":"Dict vectors","title":"Rimu.DictVectors.LocalPart","text":"LocalPart <: Communicator\n\nWhen localpart is used, the vector's Communicator is replaced with this. This allows iteration and local reductions.\n\n\n\n\n\n","category":"type"},{"location":"dictvectors.html#Rimu.DictVectors.NestedSegmentedBuffer","page":"Dict vectors","title":"Rimu.DictVectors.NestedSegmentedBuffer","text":"NestedSegmentedBuffer{T}(nrows) <: AbstractMatrix{AbstractVector{T}}\n\nMatrix of vectors stored in a single buffer with collective MPI communication support. The number of rows in the matrix is fixed to nrows.\n\nUsed in the AllToAll communication strategy, where each column corresponds to an MPI rank and each row corresponds to a segment in the PDVec.\n\nSupported operations\n\nappend_collections!: add a column to the matrix.\nappend_empty_column!: add an empty column to the matrix.\nmpi_exchange_alltoall!: each rank sends the i-th column of the matrix to the (i-1)-st rank.\nmpi_exchange_allgather!: each rank sends the 1-st column of the matrix to all ranks.\n\nSee also: SegmentedBuffer.\n\n\n\n\n\n","category":"type"},{"location":"dictvectors.html#Rimu.DictVectors.NotDistributed","page":"Dict vectors","title":"Rimu.DictVectors.NotDistributed","text":"NotDistributed <: Communicator\n\nThis Communicator is used when MPI is not available.\n\n\n\n\n\n","category":"type"},{"location":"dictvectors.html#Rimu.DictVectors.PointToPoint","page":"Dict vectors","title":"Rimu.DictVectors.PointToPoint","text":"PointToPoint{K,V}(; mpi_comm, report) <: Communicator\n\nMPI Communicator that uses circular communication using MPI.Isend and MPI.Recv!.\n\nKeyword arguments\n\nmpi_comm=MPI.COMM_WORLD: the MPI communicator to use.\nreport=false: if set to true, report MPI communication times during a projector Monte Carlo run.\n\n\n\n\n\n","category":"type"},{"location":"dictvectors.html#Rimu.DictVectors.SegmentedBuffer","page":"Dict vectors","title":"Rimu.DictVectors.SegmentedBuffer","text":"SegmentedBuffer{T}() <: AbstractVector{AbstractVector{T}}\n\nBehaves like a vector of vectors, but is stored in a single buffer. It can be sent/received over MPI keeping its structure intact. Used in the PointToPoint communication strategy.\n\nSupported operations\n\nreplace_collections!: insert data into the buffers\nmpi_send: send the contents of a buffer to a given rank\nmpi_recv_any!: receive a message sent by mpi_send from any rank, storing the contents in this buffer\n\nSee also: NestedSegmentedBuffer.\n\n\n\n\n\n","category":"type"},{"location":"dictvectors.html#Rimu.DictVectors.append_collections!-Tuple{Rimu.DictVectors.NestedSegmentedBuffer, Any}","page":"Dict vectors","title":"Rimu.DictVectors.append_collections!","text":"append_collections!(buf::NestedSegmentedBuffer, iters)\n\nAdd a column to buf. The length of iters should match buf.nrows.\n\nSee also: NestedSegmentedBuffer, append_empty_column!.\n\n\n\n\n\n","category":"method"},{"location":"dictvectors.html#Rimu.DictVectors.append_empty_column!-Tuple{Rimu.DictVectors.NestedSegmentedBuffer}","page":"Dict vectors","title":"Rimu.DictVectors.append_empty_column!","text":"append_empty_column!(buf::NestedSegmentedBuffer)\n\nLike append_collections!, but adds an empty column.\n\nSee also: NestedSegmentedBuffer, append_collections!.\n\n\n\n\n\n","category":"method"},{"location":"dictvectors.html#Rimu.DictVectors.copy_to_local!","page":"Dict vectors","title":"Rimu.DictVectors.copy_to_local!","text":"copy_to_local!([::Communicator,] w::PDWorkingMemory, t::PDVec) -> PDVec\n\nCopy pairs in t from all ranks and return them as a (possibly) new PDVec, possibly using the PDWorkingMemory as temporary storage.\n\nSee also: PDVec, PDWorkingMemory, Communicator.\n\n\n\n\n\n","category":"function"},{"location":"dictvectors.html#Rimu.DictVectors.is_distributed-Tuple{Rimu.DictVectors.Communicator}","page":"Dict vectors","title":"Rimu.DictVectors.is_distributed","text":"is_distributed(::Communicator)\n\nReturn true if Communicator operates over MPI.\n\n\n\n\n\n","category":"method"},{"location":"dictvectors.html#Rimu.DictVectors.merge_remote_reductions-Tuple{Rimu.DictVectors.Communicator, Any, Any}","page":"Dict vectors","title":"Rimu.DictVectors.merge_remote_reductions","text":"merge_remote_reductions(c::Communicator, op, x)\n\nMerge the results of reductions over MPI. By default, it uses MPI.Allreduce.\n\nSee also: Communicator.\n\n\n\n\n\n","category":"method"},{"location":"dictvectors.html#Rimu.DictVectors.mpi_comm","page":"Dict vectors","title":"Rimu.DictVectors.mpi_comm","text":"mpi_comm(::Communicator) -> MPI.Comm\n\nReturn the MPI.Comm that the Communicator operates on.\n\n\n\n\n\n","category":"function"},{"location":"dictvectors.html#Rimu.DictVectors.mpi_exchange_allgather!-Tuple{Rimu.DictVectors.NestedSegmentedBuffer, Rimu.DictVectors.NestedSegmentedBuffer, Any}","page":"Dict vectors","title":"Rimu.DictVectors.mpi_exchange_allgather!","text":"mpi_exchange_allgather!(src::NestedSegmentedBuffer, dst::NestedSegmentedBuffer, comm)\n\nThe first and only column in src will be sent to all ranks. The data from all ranks will be gethered in dst. After this operation, dst will contain the same data on all ranks.\n\nSee also NestedSegmentedBuffer, mpi_exchange_alltoall!.\n\n\n\n\n\n","category":"method"},{"location":"dictvectors.html#Rimu.DictVectors.mpi_exchange_alltoall!-Tuple{Rimu.DictVectors.NestedSegmentedBuffer, Rimu.DictVectors.NestedSegmentedBuffer, Any}","page":"Dict vectors","title":"Rimu.DictVectors.mpi_exchange_alltoall!","text":"mpi_exchange_alltoall!(src::NestedSegmentedBuffer, dst::NestedSegmentedBuffer, comm)\n\nThe n-th column from src will be sent to rank n-1. The data sent from rank r will be stored in the (r+1)-st column of dst.\n\nSee also: NestedSegmentedBuffer, mpi_exchange_allgather!.\n\n\n\n\n\n","category":"method"},{"location":"dictvectors.html#Rimu.DictVectors.mpi_rank","page":"Dict vectors","title":"Rimu.DictVectors.mpi_rank","text":"mpi_rank(::Communicator) -> Int\n\nReturn the MPI rank of the Communicator.\n\n\n\n\n\n","category":"function"},{"location":"dictvectors.html#Rimu.DictVectors.mpi_recv_any!-Tuple{Rimu.DictVectors.SegmentedBuffer, Any}","page":"Dict vectors","title":"Rimu.DictVectors.mpi_recv_any!","text":"mpi_recv_any!(buf::SegmentedBuffer, comm::MPI_Comm) -> Int\n\nFind a source that is ready to send a buffer and receive from it. Return the rank ID of the sender.\n\n\n\n\n\n","category":"method"},{"location":"dictvectors.html#Rimu.DictVectors.mpi_send-Tuple{Rimu.DictVectors.SegmentedBuffer, Any, Any}","page":"Dict vectors","title":"Rimu.DictVectors.mpi_send","text":"mpi_send(buf::SegmentedBuffer, dest, comm::MPI.Comm)\n\nSend the buffer to rank with id dest.\n\n\n\n\n\n","category":"method"},{"location":"dictvectors.html#Rimu.DictVectors.mpi_size","page":"Dict vectors","title":"Rimu.DictVectors.mpi_size","text":"mpi_size(::Communicator) -> Int\n\nReturn the total number of MPI ranks in the Communicator.\n\n\n\n\n\n","category":"function"},{"location":"dictvectors.html#Rimu.DictVectors.replace_collections!-Tuple{Rimu.DictVectors.SegmentedBuffer, Any}","page":"Dict vectors","title":"Rimu.DictVectors.replace_collections!","text":"replace_collections!(buf::SegmentedBuffer, iters)\n\nInsert collections in iters into a SegmentedBuffer.\n\njulia> using Rimu.DictVectors: SegmentedBuffer\n\njulia> buf = SegmentedBuffer{Int}()\n0-element SegmentedBuffer{Int64}\n\njulia> Rimu.DictVectors.replace_collections!(buf, [[1,2,3], [4,5]])\n2-element SegmentedBuffer{Int64}:\n [1, 2, 3]\n [4, 5]\n\njulia> Rimu.DictVectors.replace_collections!(buf, [[1], [2,3], [4]])\n3-element SegmentedBuffer{Int64}:\n [1]\n [2, 3]\n [4]\n\n\n\n\n\n","category":"method"},{"location":"dictvectors.html#Rimu.DictVectors.target_segment-Tuple{Rimu.DictVectors.Communicator, Any, Any}","page":"Dict vectors","title":"Rimu.DictVectors.target_segment","text":"target_segment(c::Communicator, k, num_segments) -> target, is_local\n\nThis function is used to determine where in the PDVec a key should be stored. If the key is local (stored on the same MPI rank), return its segment index and true. If the key is non-local, return any value and false.\n\nSee also: PDVec, Communicator.\n\n\n\n\n\n","category":"method"},{"location":"dictvectors.html#Rimu.DictVectors.total_num_segments-Tuple{Rimu.DictVectors.Communicator, Any}","page":"Dict vectors","title":"Rimu.DictVectors.total_num_segments","text":"total_num_segments(c::Communicator, n) -> Int\n\nReturn the total number of segments, including the remote ones, where n is number of local segments.\n\nSee also: PDVec, Communicator.\n\n\n\n\n\n","category":"method"},{"location":"dictvectors.html#Index","page":"Dict vectors","title":"Index","text":"","category":"section"},{"location":"dictvectors.html","page":"Dict vectors","title":"Dict vectors","text":"Pages   = [\"dictvectors.md\"]","category":"page"}]
}
