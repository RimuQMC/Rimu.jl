var documenterSearchIndex = {"docs":
[{"location":"mpi.html#Working-with-MPI","page":"Using MPI","title":"Working with MPI","text":"","category":"section"},{"location":"mpi.html","page":"Using MPI","title":"Using MPI","text":"If you are using PDVecs to store your vectors, working with MPI should be fairly straightforward. Generally, PDVec will work with MPI automatically, as long as MPI is set up correctly and a few common pitfalls are avoided.","category":"page"},{"location":"mpi.html","page":"Using MPI","title":"Using MPI","text":"Rimu includes an unexported module RMPI, which must be imported to access additional MPI-related functionality.","category":"page"},{"location":"mpi.html#Configuring-MPI","page":"Using MPI","title":"Configuring MPI","text":"","category":"section"},{"location":"mpi.html","page":"Using MPI","title":"Using MPI","text":"When running on a cluster, ensure that MPI.jl is using the system binary. See the MPI.jl documentation for more information.","category":"page"},{"location":"mpi.html","page":"Using MPI","title":"Using MPI","text":"It is always a good idea to start your script with a quick test that ensures the MPI is set up correctly. One way to do this is to open with","category":"page"},{"location":"mpi.html","page":"Using MPI","title":"Using MPI","text":"using Rimu.RMPI\nmpi_allprintln(\"hello\")","category":"page"},{"location":"mpi.html","page":"Using MPI","title":"Using MPI","text":"which should print something like","category":"page"},{"location":"mpi.html","page":"Using MPI","title":"Using MPI","text":"[ rank 0: hello\n[ rank 1: hello\n[ rank 2: hello\n[ rank 3: hello","category":"page"},{"location":"mpi.html","page":"Using MPI","title":"Using MPI","text":"If it prints rank 0 several times, the code will run, but ranks will not communicate.","category":"page"},{"location":"mpi.html#Using-Slurm","page":"Using MPI","title":"Using Slurm","text":"","category":"section"},{"location":"mpi.html","page":"Using MPI","title":"Using MPI","text":"When using PDVec, the recommended setup is to use threads to parallelise the computation within a node, and to only use MPI for inter-node communication. In a slurm script, this is done as follows:","category":"page"},{"location":"mpi.html","page":"Using MPI","title":"Using MPI","text":"...\n#SBATCH --ntasks-per-node=1\n#SBATCH --nodes=4            # replace 4 with the desired number of nodes\n#SBATCH --cpus-per-task=28   # replace 28 with the number of cores available in a node\n#SBATCH --hint=nomultithread # don't use hyperthreading\n...\n\nsrun julia --project -tauto script.jl","category":"page"},{"location":"mpi.html","page":"Using MPI","title":"Using MPI","text":"On some clusters, additional settings must be used with srun, for example the CTCP cluster requires the following.","category":"page"},{"location":"mpi.html","page":"Using MPI","title":"Using MPI","text":"srun mpi=pmi2 julia --project -tauto script.jl","category":"page"},{"location":"mpi.html#Common-pitfalls-with-reducing-functions","page":"Using MPI","title":"Common pitfalls with reducing functions","text":"","category":"section"},{"location":"mpi.html#Using-@mpi_root","page":"Using MPI","title":"Using @mpi_root","text":"","category":"section"},{"location":"mpi.html","page":"Using MPI","title":"Using MPI","text":"Take care to not use reducing functions (such as length, sum, norm, ...) inside @mpi_root blocks. Doing so will only initiate the distributed reduction on one rank only, which will cause the code to go out of sync and freeze. As an example, to report the current length of a vector, calculate the length before the @mpi_root block:","category":"page"},{"location":"mpi.html","page":"Using MPI","title":"Using MPI","text":"len = length(pdvec)\n@mpi_root println(\"vector length is $len\")","category":"page"},{"location":"mpi.html#Threaded-operations-and-reductions","page":"Using MPI","title":"Threaded operations and reductions","text":"","category":"section"},{"location":"mpi.html","page":"Using MPI","title":"Using MPI","text":"When using functions that take anonymous functions, such as map(!), sum, or mapreduce, it is important that the anonymous functions passed to them do not perform any MPI-reducing operations (length, norm, sum, etc.). These anonymous functions are executed on multiple threads and initiating MPI communication from multiple threads may cause issues.","category":"page"},{"location":"mpi.html","page":"Using MPI","title":"Using MPI","text":"As an example, suppose we want to scale a vector by its length by using map!. The correct way to write this code is as","category":"page"},{"location":"mpi.html","page":"Using MPI","title":"Using MPI","text":"len = length(pdvec)\nmap!(values(pdvec)) do x\n\tx / len\nend","category":"page"},{"location":"mpi.html","page":"Using MPI","title":"Using MPI","text":"Similar to the previous example, len is calculated first and not within the body of map!. In this specific case, an even better option is to use the scale! function from VectorInterface.jl:","category":"page"},{"location":"mpi.html","page":"Using MPI","title":"Using MPI","text":"scale!(pdvec, 1 / length(pdvec))","category":"page"},{"location":"projectormontecarlo.html#Projector-Monte-Carlo-/-FCIQMC","page":"Projector Monte Carlo","title":"Projector Monte Carlo / FCIQMC","text":"","category":"section"},{"location":"projectormontecarlo.html","page":"Projector Monte Carlo","title":"Projector Monte Carlo","text":"The purpose of Projector Monte Carlo is to stochastically sample the ground state, i.e. the  eigenvector corresponding to the lowest eigenvalue of a quantum Hamiltonian, or more generally,  a very large matrix. Rimu implements a flavor of Projector Monte Carlo called  Full Configuration Interaction Quantum Monte Carlo (FCIQMC).","category":"page"},{"location":"projectormontecarlo.html#ProjectorMonteCarloProblem","page":"Projector Monte Carlo","title":"ProjectorMonteCarloProblem","text":"","category":"section"},{"location":"projectormontecarlo.html","page":"Projector Monte Carlo","title":"Projector Monte Carlo","text":"To run a projector Monte Carlo simulation you set up a problem with ProjectorMonteCarloProblem and solve it with solve. Alternatively you can initialize a PMCSimulation struct, step!  through time steps, and solve! it to completion. ","category":"page"},{"location":"projectormontecarlo.html","page":"Projector Monte Carlo","title":"Projector Monte Carlo","text":"ProjectorMonteCarloProblem\ninit\nsolve\nsolve!\nstep!","category":"page"},{"location":"projectormontecarlo.html#Rimu.ProjectorMonteCarloProblem-projectormontecarlo","page":"Projector Monte Carlo","title":"Rimu.ProjectorMonteCarloProblem","text":"ProjectorMonteCarloProblem(hamiltonian::AbstractHamiltonian; kwargs...)\n\nDefines a problem to be solved by projector quantum Monte Carlo (QMC) methods, such as the the FCIQMC algorithm.\n\nCommon keyword arguments and defaults:\n\ntime_step = 0.01: Initial time step size.\nlast_step = 100: Controls the number of steps.\ntarget_walkers = 1_000: Target for the 1-norm of the coefficient vector.\nstart_at = starting_address(hamiltonian): Define the initial state vector(s).   An r  s matrix of state vectors can be passed where r is the   number of replicas and s the number of spectral states. See also   default_starting_vector.\nstyle = IsDynamicSemistochastic(): The StochasticStyle of the simulation.\ninitiator = false: Whether to use initiators. Can be true, false, or a valid   InitiatorRule.\nthreading: Default is to use multithreading and/or MPI if available. Set to true to force PDVec for the starting vector, false for serial computation; may be overridden by start_at.\nreporting_strategy = ReportDFAndInfo(): How and when to report results, see ReportingStrategy.\npost_step_strategy = (): Extract observables (e.g. ProjectedEnergy), see PostStepStrategy.\nn_replicas = 1: Number of synchronised independent simulations.\nreplica_strategy = NoStats(n_replicas): Which results to report from replica simulations, see ReplicaStrategy.\n\nExample\n\njulia> hamiltonian = HubbardReal1D(BoseFS(1,2,3));\n\njulia> problem = ProjectorMonteCarloProblem(hamiltonian; target_walkers = 500, last_step = 100);\n\njulia> simulation = solve(problem);\n\njulia> simulation.success[]\ntrue\n\njulia> size(DataFrame(simulation))\n(100, 9)\n\nFurther keyword arguments:\n\nstarting_step = 1: Starting step of the simulation.\nwalltime = Inf: Maximum time allowed for the simulation.\nsimulation_plan = SimulationPlan(; starting_step, last_step, walltime): Defines the   duration of the simulation. Takes precedence over last_step and walltime.\nζ = 0.08: Damping parameter for the shift update.\nξ = ζ^2/4: Forcing parameter for the shift update.\nshift_strategy = DoubleLogUpdate(; target_walkers, ζ, ξ): How to update the shift,   see ShiftStrategy.\ntime_step_strategy = ConstantTimeStep(): Adjust time step or not, see   TimeStepStrategy.\nalgorithm = FCIQMC(; shift_strategy, time_step_strategy): The algorithm to use.   Currenlty only FCIQMC is implemented.\nshift: Initial shift value or collection of shift values. Determined by default from the   Hamiltonian and the starting vectors.\ninitial_shift_parameters: Initial shift parameters or collection of initial shift   parameters. Overrides shift if provided.\nmaxlength = 2 * target_walkers + 100: Maximum length of the vectors.\ndisplay_name = \"PMCSimulation\": Name displayed in progress bar (via ProgressLogging).\nmetadata: User-supplied metadata to be added to the report. Must be an iterable of pairs or a NamedTuple, e.g. metadata = (\"key1\" => \"value1\", \"key2\" => \"value2\"). All metadata is converted to strings.\nrandom_seed = true: Provide and store a seed for the random number generator. If set to   true, a random seed is generated. If set to number, this number is used as the seed.   The seed is used by solve such that solveing the problem twice will yield identical   results. If set to false, no seed is used and results are not reproducible.\n\nSee also init, solve.\n\n\n\n\n\n","category":"type"},{"location":"projectormontecarlo.html#CommonSolve.init-projectormontecarlo","page":"Projector Monte Carlo","title":"CommonSolve.init","text":"init(p::ExactDiagonalizationProblem, [algorithm]; kwargs...)\n\nInitialize a solver for an ExactDiagonalizationProblem p with an optional algorithm. Returns a solver instance that can be solved with solve.\n\nFor a description of the keyword arguments, see the documentation for ExactDiagonalizationProblem.\n\n\n\n\n\ninit(problem::ProjectorMonteCarloProblem; copy_vectors=true)::PMCSimulation\n\nInitialise a Rimu.PMCSimulation.\n\nSee also ProjectorMonteCarloProblem, solve!, solve, step!, Rimu.PMCSimulation.\n\n\n\n\n\n","category":"function"},{"location":"projectormontecarlo.html#CommonSolve.solve-projectormontecarlo","page":"Projector Monte Carlo","title":"CommonSolve.solve","text":"solve(::ProjectorMonteCarloProblem)::PMCSimulation\n\nInitialize and solve a ProjectorMonteCarloProblem until the last step is completed or the walltime limit is reached.\n\nSee also init, solve!, step!, Rimu.PMCSimulation, and solve(::ExactDiagonalizationProblem).\n\n\n\n\n\n","category":"function"},{"location":"projectormontecarlo.html#CommonSolve.solve!-projectormontecarlo","page":"Projector Monte Carlo","title":"CommonSolve.solve!","text":"solve!(sm::PMCSimulation; kwargs...)::PMCSimulation\n\nSolve a Rimu.PMCSimulation until the last step is completed or the walltime limit is reached.\n\nTo continue a previously completed simulation, set a new last_step or walltime using the keyword arguments. Optionally, changes can be made to the replica_strategy, the post_step_strategy, or the reporting_strategy.\n\nOptional keyword arguments:\n\nlast_step = nothing: Set the last step to a new value and continue the simulation.\nwalltime = nothing: Set the allowed walltime to a new value and continue the simulation.\nreset_time = false: Reset the elapsed_time counter and continue the simulation.\nempty_report = false: Empty the report before continuing the simulation.\nreplica_strategy = nothing: Change the replica strategy. Requires the number of replicas   to match the number of replicas in the simulation sm. Implies empty_report = true.\npost_step_strategy = nothing: Change the post-step strategy. Implies   empty_report = true.\nreporting_strategy = nothing: Change the reporting strategy. Implies   empty_report = true.\nmetadata = nothing: Add metadata to the report.\n\nSee also ProjectorMonteCarloProblem, init, solve, step!, Rimu.PMCSimulation.\n\n\n\n\n\n","category":"function"},{"location":"projectormontecarlo.html#CommonSolve.step!-projectormontecarlo","page":"Projector Monte Carlo","title":"CommonSolve.step!","text":"step!(sm::PMCSimulation)::PMCSimulation\n\nAdvance the simulation by one step.\n\nCalling solve! will advance the simulation until the last step or the walltime is exceeded. When completing the simulation without calling solve!, the simulation report needs to be finalised by calling Rimu.finalize_report!.\n\nSee also ProjectorMonteCarloProblem, init, solve!, solve, Rimu.PMCSimulation.\n\n\n\n\n\n","category":"function"},{"location":"projectormontecarlo.html","page":"Projector Monte Carlo","title":"Projector Monte Carlo","text":"After solve or solve! have been called the returned PMCSimulation contains the results of  the projector Monte Carlo calculation.","category":"page"},{"location":"projectormontecarlo.html#PMCSimulation-and-report-as-a-DataFrame","page":"Projector Monte Carlo","title":"PMCSimulation and report as a DataFrame","text":"","category":"section"},{"location":"projectormontecarlo.html","page":"Projector Monte Carlo","title":"Projector Monte Carlo","text":"Rimu.PMCSimulation","category":"page"},{"location":"projectormontecarlo.html#Rimu.PMCSimulation-projectormontecarlo","page":"Projector Monte Carlo","title":"Rimu.PMCSimulation","text":"PMCSimulation\n\nHolds the state and the results of a projector quantum Monte Carlo (PMC) simulation. Is returned by init(::ProjectorMonteCarloProblem) and solved with solve!(::PMCSimulation).\n\nObtain the results of a simulation sm as a DataFrame with DataFrame(sm).\n\nSee also state_vectors, ProjectorMonteCarloProblem, init, solve!.\n\n\n\n\n\n","category":"type"},{"location":"projectormontecarlo.html","page":"Projector Monte Carlo","title":"Projector Monte Carlo","text":"The DataFrame returned from DataFrame(::PMCSimulation) contains the time series data from  the projector Monte Carlo simulation that is of primary interest for analysis. Depending on the  reporting_strategy and other options passed as keyword arguments to  ProjectorMonteCarloProblem it can have different numbers of rows and columns. The rows  correspond to the reported time steps (Monte Carlo steps). There is at least one column with the name :step. Further columns are usually present with additional data reported from the simulation.","category":"page"},{"location":"projectormontecarlo.html","page":"Projector Monte Carlo","title":"Projector Monte Carlo","text":"For the default option algorithm = FCIQMC(; shift_strategy, time_step_strategy) with a single replica (n_replicas = 1) and single spectral state, the fields :shift, :norm, :len will  be present as well as others depending on the style argument and the post_step_strategy.","category":"page"},{"location":"projectormontecarlo.html","page":"Projector Monte Carlo","title":"Projector Monte Carlo","text":"If multiple replicas or spectral states are requested, then the relevant field names in the  DataFrame will have a suffix identifying the respective replica simulation, e.g. the shifts will be reported as shift_1, shift_2, ... ","category":"page"},{"location":"projectormontecarlo.html","page":"Projector Monte Carlo","title":"Projector Monte Carlo","text":"Many tools for analysing the time series data obtained from a  ProjectorMonteCarloProblem are contained in the Module StatsTools.","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"EditURL = \"../../../scripts/G2-example.jl\"","category":"page"},{"location":"generated/G2-example.html#Example-3:-Calculating-observables","page":"Calculating observables","title":"Example 3: Calculating observables","text":"","category":"section"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"This is an example calculation of the two-body correlation function G_2.","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"A runnable script for this example is located here. Run it with julia G2-example.jl.","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"First, we load the reqired packages. Rimu for FCIQMC calculation, and DataFrames for maniplating the output.","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"using Rimu\nusing Random\nusing DataFrames","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"We use the same Hamiltonian as the first example, a Bose-Hubbard model with 6 particles in 6 sites, with strong interactions (we expect a Mott insulating state).","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"m = n = 6\ninitial_address = near_uniform(BoseFS{n,m})\nH = HubbardReal1D(initial_address; u = 6.0, t = 1.0)","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"HubbardReal1D(fs\"|1 1 1 1 1 1⟩\"; u=6.0, t=1.0)","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"Now, we define the operators for the observables we wish to calculate.","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"dvals = 0:m-1\nG2list = ((G2RealCorrelator(d) for d in dvals)...,)","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"(G2RealCorrelator(0), G2RealCorrelator(1), G2RealCorrelator(2), G2RealCorrelator(3), G2RealCorrelator(4), G2RealCorrelator(5))","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"This is a tuple of G2RealCorrelators, subtypes of AbstractHamiltonian. It calculates the density-density correlation function on a lattice","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"    hatG^(2)(d) = frac1M sum_i^M hatn_i (hatn_i+d - delta_0d)","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"with normalisation","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"    sum_d=0^M-1 langle hatG^(2)(d) rangle = fracN (N-1)M","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"Observables that are defined by expectation values are calculated using the \"replica trick\". Thereby several independent copies or \"replicas\" of the state vector are propagated simultaneously. The reason is to have two (or more) stochastically independent copies of the state vector available such that we can calculate bias-free overlaps. We enable this by defining a ReplicaStrategy. Each replica has its own state and FCIQMC is effectively performed independently on each one.  For calculating observables, we use AllOverlaps for the ReplicaStrategy. At each timestep, after the FCIQMC step is performed on, this strategy calculates the overlaps of every operator with the wavefunctions from each pair of replicas.","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"To obtain an unbiased result, at least two replicas should be used. One can also use more than two to improve the statistics. This is particularly helpful when the walker number is low.","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"num_replicas = 3\nreplica_strategy = AllOverlaps(num_replicas; operator = G2list)","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"AllOverlaps{3, 6, Tuple{G2RealCorrelator{0}, G2RealCorrelator{1}, G2RealCorrelator{2}, G2RealCorrelator{3}, G2RealCorrelator{4}, G2RealCorrelator{5}}, true}((G2RealCorrelator(0), G2RealCorrelator(1), G2RealCorrelator(2), G2RealCorrelator(3), G2RealCorrelator(4), G2RealCorrelator(5)))","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"Other FCIQMC parameters and strategies can be set in the same way as before.","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"steps_equilibrate = 1_000\nsteps_measure = 5_000\ntarget_walkers = 100;\ntime_step = 0.001\n","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"Now, we run FCIQMC. Note that passing an initial vector is optional - if we only pass the style, a vector with the appropriate style is created automatically.","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"problem = ProjectorMonteCarloProblem(H;\n    style=IsDynamicSemistochastic(),\n    time_step,\n    last_step = steps_equilibrate + steps_measure,\n    target_walkers,\n    replica_strategy,\n)\nresult = solve(problem)\ndf = DataFrame(result);","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"The output DataFrame has FCIQMC statistics for each replica (e.g. shift, norm),","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"println(filter(startswith(\"shift_\"), names(df)))","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"[\"shift_1\", \"shift_2\", \"shift_3\"]\n","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"as well as vector-vector overlaps (e.g. c1_dot_c2),","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"println(filter(contains(\"dot\"), names(df)))","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"[\"c1_dot_c2\", \"c1_dot_c3\", \"c2_dot_c3\"]\n","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"and operator overlaps (e.g. c1_Op1_c2) between the replicas.","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"println(filter(contains(\"Op\"), names(df)))","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"[\"c1_Op1_c2\", \"c1_Op2_c2\", \"c1_Op3_c2\", \"c1_Op4_c2\", \"c1_Op5_c2\", \"c1_Op6_c2\", \"c1_Op1_c3\", \"c1_Op2_c3\", \"c1_Op3_c3\", \"c1_Op4_c3\", \"c1_Op5_c3\", \"c1_Op6_c3\", \"c2_Op1_c3\", \"c2_Op2_c3\", \"c2_Op3_c3\", \"c2_Op4_c3\", \"c2_Op5_c3\", \"c2_Op6_c3\"]\n","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"The vector-vector and operator overlaps go into calculating the Rayleigh quotient for an observable","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"    langle hatG^(2)(d) rangle = fracsum_ab mathbfc_a^dagger cdot hatG^(2)(d) cdot mathbfc_bsum_ab mathbfc_a^dagger cdot mathbfc_b ","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"The sum over all replica pairs (a,b), especially in the denominator, helps to avoid errors from poor sampling if the number of walkers is too low.","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"We use the function rayleigh_replica_estimator to calculate the Rayleigh quotient using all replicas in df, returning a RatioBlockingResult. Using the keyword skip will ignore the initial equilibration steps.","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"Now, we can calculate the correlation function for each value of d.","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"println(\"Two-body correlator from $num_replicas replicas:\")\nfor d in dvals\n    r = rayleigh_replica_estimator(df; op_name = \"Op$(d+1)\", skip=steps_equilibrate)\n    println(\"   G2($d) = $(r.f) ± $(r.σ_f)\")\nend","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"Two-body correlator from 3 replicas:\n   G2(0) = 0.21842050619999112 ± 0.001693187338342412\n   G2(1) = 0.9150843163223079 ± 0.0007759221516235911\n   G2(2) = 0.9800910037562155 ± 0.000728895079753869\n   G2(3) = 0.9912288536429623 ± 0.0008012132325536769\n   G2(4) = 0.9800910037562155 ± 0.000728895079753869\n   G2(5) = 0.9150843163223079 ± 0.0007759221516235911\n","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"As expected, the onsite correlation at d=0 is low since this is a Mott insulating state with unit filling fraction, and is close to 10 for all other values of the displacement d.","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"Since we ran multiple independent replicas, we also have multiple estimates of the shift energy.","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"println(\"Shift energy from $num_replicas replicas:\")\nfor i in 1:num_replicas\n    se = shift_estimator(df; shift=\"shift_$i\", skip=steps_equilibrate)\n    println(\"   Replica $i: $(se.mean) ± $(se.err)\")\nend\n","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"Shift energy from 3 replicas:\n   Replica 1: -3.9160715868548346 ± 0.132602970497491\n   Replica 2: -4.029037177858336 ± 0.1314221541629065\n   Replica 3: -4.000696193026094 ± 0.13175478848164496\n","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"This page was generated using Literate.jl.","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"EditURL = \"../../../scripts/BHM-example.jl\"","category":"page"},{"location":"generated/BHM-example.html#Example-1:-1D-Bose-Hubbard-Model","page":"1D Bose-Hubbard Model","title":"Example 1: 1D Bose-Hubbard Model","text":"","category":"section"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"This is an example calculation finding the ground state of a 1D Bose-Hubbard chain with 6 particles in 6 lattice sites.","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"A runnable script for this example is located here. Run it with julia BHM-example.jl.","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"First, we load Rimu and Plots.","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"using Rimu\nusing Plots","category":"page"},{"location":"generated/BHM-example.html#Setting-up-the-model","page":"1D Bose-Hubbard Model","title":"Setting up the model","text":"","category":"section"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"We start by defining the physical problem. First, we generate an initial configuration which will be used as a starting point of our computation. In this example, we use a bosonic Fock state with 6 particles evenly distributed in 6 lattice sites.","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"initial_address = near_uniform(BoseFS{6,6})","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"BoseFS{6,6}(1, 1, 1, 1, 1, 1)","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"The Hamiltonian is constructed by initializing a struct with an initial address and model parameters. Here, we use the Bose Hubbard model in one-dimensional real space.","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"H = HubbardReal1D(initial_address; u = 6.0, t = 1.0)","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"HubbardReal1D(fs\"|1 1 1 1 1 1⟩\"; u=6.0, t=1.0)","category":"page"},{"location":"generated/BHM-example.html#Parameters-of-the-calculation","page":"1D Bose-Hubbard Model","title":"Parameters of the calculation","text":"","category":"section"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"Now, let's setup the Monte Carlo calculation. We need to decide the number of walkers to use in this Monte Carlo run, which is equivalent to the average one-norm of the coefficient vector. Higher values will result in better statistics, but require more memory and computing power.","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"target_walkers = 1_000;","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"FCIQMC takes a certain number of steps to equllibrate, after which the observables will fluctuate around a mean value. In this example, we will devote 1000 steps to equilibration and take an additional 2000 steps for measurement.","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"steps_equilibrate = 1_000;\nsteps_measure = 2_000;\nlast_step = steps_equilibrate + steps_measure","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"3000","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"Next, we pick a time step size. FCIQMC does not have a time step error, but the time step needs to be small enough, or the computation might diverge. If the time step is too small, however, the computation might take a long time to equilibrate. The appropriate time step size is problem-dependent and is best determined through experimentation.","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"time_step = 0.001;","category":"page"},{"location":"generated/BHM-example.html#Defining-an-observable","page":"1D Bose-Hubbard Model","title":"Defining an observable","text":"","category":"section"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"Now, let's set up an observable to measure. Here we will measure the projected energy. In additon to the shift, the projected energy is a second estimator for the energy. It usually produces better statistics than the shift.","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"We first need to define a projector. Here, we use the function default_starting_vector to generate a vector with only a single occupied configuration. We will use the same vector as the starting vector for the FCIQMC calculation.","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"initial_vector = default_starting_vector(initial_address; style=IsDynamicSemistochastic())","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"DVec{BoseFS{6, 6, BitString{11, 1, UInt16}},Float64} with 1 entry, style = IsDynamicSemistochastic{Float64,ThresholdCompression,DynamicSemistochastic}()\n  fs\"|1 1 1 1 1 1⟩\" => 10.0","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"The choice of the style argument already determines the FCIQMC algorithm to use. IsDynamicSemistochastic is usually the best choice as it reduces noise and improves the sign problem.","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"Observables that can be calculated by projection of the fluctuating quantum state onto a constant vector are passed into the ProjectorMonteCarloProblem with the post_step_strategy keyword argument.","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"post_step_strategy = ProjectedEnergy(H, initial_vector)","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"ProjectedEnergy{HubbardReal1D{Float64, BoseFS{6, 6, BitString{11, 1, UInt16}}, 6.0, 1.0}, Rimu.DictVectors.FrozenDVec{BoseFS{6, 6, BitString{11, 1, UInt16}}, Float64}, Rimu.DictVectors.FrozenDVec{BoseFS{6, 6, BitString{11, 1, UInt16}}, Float64}}(:vproj, :hproj, HubbardReal1D(fs\"|1 1 1 1 1 1⟩\"; u=6.0, t=1.0), Rimu.FrozenDVec([fs\"|1 1 1 1 1 1⟩\"=>10.0]), Rimu.FrozenDVec([fs\"|1 1 1 1 2 0⟩\"=>-14.1421, fs\"|0 2 1 1 1 1⟩\"=>-14.1421, fs\"|1 1 1 1 0 2⟩\"=>-14.1421, fs\"|1 2 0 1 1 1⟩\"=>-14.1421, fs\"|2 0 1 1 1 1⟩\"=>-14.1421, fs\"|1 1 1 2 0 1⟩\"=>-14.1421, fs\"|1 1 2 0 1 1⟩\"=>-14.1421, fs\"|1 1 0 2 1 1⟩\"=>-14.1421, fs\"|1 1 1 0 2 1⟩\"=>-14.1421, fs\"|1 0 2 1 1 1⟩\"=>-14.1421, fs\"|2 1 1 1 1 0⟩\"=>-14.1421, fs\"|0 1 1 1 1 2⟩\"=>-14.1421]))","category":"page"},{"location":"generated/BHM-example.html#Running-the-calculation","page":"1D Bose-Hubbard Model","title":"Running the calculation","text":"","category":"section"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"This is a two-step process: First we define a ProjectorMonteCarloProblem with all the parameters needed for the simulation","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"problem = ProjectorMonteCarloProblem(\n    H;\n    start_at = initial_vector,\n    last_step,\n    time_step,\n    target_walkers,\n    post_step_strategy\n);","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"To run the simulation we simply call solve on the problem","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"simulation = solve(problem);","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"The simulation object contains the results of the simulation as well as state vectors and strategies. We can extract the time series data for further analysis:","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"df = DataFrame(simulation);","category":"page"},{"location":"generated/BHM-example.html#Analysing-the-results","page":"1D Bose-Hubbard Model","title":"Analysing the results","text":"","category":"section"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"We can plot the norm of the coefficient vector as a function of the number of steps.","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"hline(\n    [target_walkers];\n    label=\"target_walkers\", xlabel=\"step\", ylabel=\"norm\",\n    color=2, linestyle=:dash, margin = 1Plots.cm\n)\nplot!(df.step, df.norm, label=\"norm\", color=1)","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"<?xml version=\"1.0\" encoding=\"utf-8\"?>\n<svg xmlns=\"http://www.w3.org/2000/svg\" xmlns:xlink=\"http://www.w3.org/1999/xlink\" width=\"600\" height=\"400\" viewBox=\"0 0 2400 1600\">\n<defs>\n  <clipPath id=\"clip120\">\n    <rect x=\"0\" y=\"0\" width=\"2400\" height=\"1600\"/>\n  </clipPath>\n</defs>\n<path clip-path=\"url(#clip120)\" d=\"M0 1600 L2400 1600 L2400 0 L0 0  Z\" fill=\"#ffffff\" fill-rule=\"evenodd\" fill-opacity=\"1\"/>\n<defs>\n  <clipPath id=\"clip121\">\n    <rect x=\"480\" y=\"0\" width=\"1681\" height=\"1600\"/>\n  </clipPath>\n</defs>\n<path clip-path=\"url(#clip120)\" d=\"M404.284 1281.45 L2211.02 1281.45 L2211.02 188.976 L404.284 188.976  Z\" fill=\"#ffffff\" fill-rule=\"evenodd\" fill-opacity=\"1\"/>\n<defs>\n  <clipPath id=\"clip122\">\n    <rect x=\"404\" y=\"188\" width=\"1808\" height=\"1093\"/>\n  </clipPath>\n</defs>\n<polyline clip-path=\"url(#clip122)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:2; stroke-opacity:0.1; fill:none\" points=\"454.849,1281.45 454.849,188.976 \"/>\n<polyline clip-path=\"url(#clip122)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:2; stroke-opacity:0.1; fill:none\" points=\"1023.2,1281.45 1023.2,188.976 \"/>\n<polyline clip-path=\"url(#clip122)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:2; stroke-opacity:0.1; fill:none\" points=\"1591.54,1281.45 1591.54,188.976 \"/>\n<polyline clip-path=\"url(#clip122)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:2; stroke-opacity:0.1; fill:none\" points=\"2159.89,1281.45 2159.89,188.976 \"/>\n<polyline clip-path=\"url(#clip120)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"404.284,1281.45 2211.02,1281.45 \"/>\n<polyline clip-path=\"url(#clip120)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"454.849,1281.45 454.849,1262.55 \"/>\n<polyline clip-path=\"url(#clip120)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"1023.2,1281.45 1023.2,1262.55 \"/>\n<polyline clip-path=\"url(#clip120)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"1591.54,1281.45 1591.54,1262.55 \"/>\n<polyline clip-path=\"url(#clip120)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"2159.89,1281.45 2159.89,1262.55 \"/>\n<path clip-path=\"url(#clip120)\" d=\"M454.849 1312.37 Q451.238 1312.37 449.41 1315.93 Q447.604 1319.47 447.604 1326.6 Q447.604 1333.71 449.41 1337.27 Q451.238 1340.82 454.849 1340.82 Q458.484 1340.82 460.289 1337.27 Q462.118 1333.71 462.118 1326.6 Q462.118 1319.47 460.289 1315.93 Q458.484 1312.37 454.849 1312.37 M454.849 1308.66 Q460.659 1308.66 463.715 1313.27 Q466.794 1317.85 466.794 1326.6 Q466.794 1335.33 463.715 1339.94 Q460.659 1344.52 454.849 1344.52 Q449.039 1344.52 445.96 1339.94 Q442.905 1335.33 442.905 1326.6 Q442.905 1317.85 445.96 1313.27 Q449.039 1308.66 454.849 1308.66 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip120)\" d=\"M967.722 1339.91 L975.361 1339.91 L975.361 1313.55 L967.05 1315.21 L967.05 1310.95 L975.314 1309.29 L979.99 1309.29 L979.99 1339.91 L987.629 1339.91 L987.629 1343.85 L967.722 1343.85 L967.722 1339.91 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip120)\" d=\"M1007.07 1312.37 Q1003.46 1312.37 1001.63 1315.93 Q999.828 1319.47 999.828 1326.6 Q999.828 1333.71 1001.63 1337.27 Q1003.46 1340.82 1007.07 1340.82 Q1010.71 1340.82 1012.51 1337.27 Q1014.34 1333.71 1014.34 1326.6 Q1014.34 1319.47 1012.51 1315.93 Q1010.71 1312.37 1007.07 1312.37 M1007.07 1308.66 Q1012.88 1308.66 1015.94 1313.27 Q1019.02 1317.85 1019.02 1326.6 Q1019.02 1335.33 1015.94 1339.94 Q1012.88 1344.52 1007.07 1344.52 Q1001.26 1344.52 998.185 1339.94 Q995.129 1335.33 995.129 1326.6 Q995.129 1317.85 998.185 1313.27 Q1001.26 1308.66 1007.07 1308.66 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip120)\" d=\"M1037.24 1312.37 Q1033.62 1312.37 1031.8 1315.93 Q1029.99 1319.47 1029.99 1326.6 Q1029.99 1333.71 1031.8 1337.27 Q1033.62 1340.82 1037.24 1340.82 Q1040.87 1340.82 1042.68 1337.27 Q1044.5 1333.71 1044.5 1326.6 Q1044.5 1319.47 1042.68 1315.93 Q1040.87 1312.37 1037.24 1312.37 M1037.24 1308.66 Q1043.05 1308.66 1046.1 1313.27 Q1049.18 1317.85 1049.18 1326.6 Q1049.18 1335.33 1046.1 1339.94 Q1043.05 1344.52 1037.24 1344.52 Q1031.43 1344.52 1028.35 1339.94 Q1025.29 1335.33 1025.29 1326.6 Q1025.29 1317.85 1028.35 1313.27 Q1031.43 1308.66 1037.24 1308.66 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip120)\" d=\"M1067.4 1312.37 Q1063.79 1312.37 1061.96 1315.93 Q1060.15 1319.47 1060.15 1326.6 Q1060.15 1333.71 1061.96 1337.27 Q1063.79 1340.82 1067.4 1340.82 Q1071.03 1340.82 1072.84 1337.27 Q1074.67 1333.71 1074.67 1326.6 Q1074.67 1319.47 1072.84 1315.93 Q1071.03 1312.37 1067.4 1312.37 M1067.4 1308.66 Q1073.21 1308.66 1076.26 1313.27 Q1079.34 1317.85 1079.34 1326.6 Q1079.34 1335.33 1076.26 1339.94 Q1073.21 1344.52 1067.4 1344.52 Q1061.59 1344.52 1058.51 1339.94 Q1055.45 1335.33 1055.45 1326.6 Q1055.45 1317.85 1058.51 1313.27 Q1061.59 1308.66 1067.4 1308.66 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip120)\" d=\"M1540.15 1339.91 L1556.47 1339.91 L1556.47 1343.85 L1534.53 1343.85 L1534.53 1339.91 Q1537.19 1337.16 1541.77 1332.53 Q1546.38 1327.88 1547.56 1326.53 Q1549.81 1324.01 1550.69 1322.27 Q1551.59 1320.51 1551.59 1318.82 Q1551.59 1316.07 1549.64 1314.33 Q1547.72 1312.6 1544.62 1312.6 Q1542.42 1312.6 1539.97 1313.36 Q1537.54 1314.13 1534.76 1315.68 L1534.76 1310.95 Q1537.58 1309.82 1540.04 1309.24 Q1542.49 1308.66 1544.53 1308.66 Q1549.9 1308.66 1553.09 1311.35 Q1556.29 1314.03 1556.29 1318.52 Q1556.29 1320.65 1555.48 1322.57 Q1554.69 1324.47 1552.58 1327.07 Q1552.01 1327.74 1548.9 1330.95 Q1545.8 1334.15 1540.15 1339.91 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip120)\" d=\"M1576.29 1312.37 Q1572.68 1312.37 1570.85 1315.93 Q1569.04 1319.47 1569.04 1326.6 Q1569.04 1333.71 1570.85 1337.27 Q1572.68 1340.82 1576.29 1340.82 Q1579.92 1340.82 1581.73 1337.27 Q1583.56 1333.71 1583.56 1326.6 Q1583.56 1319.47 1581.73 1315.93 Q1579.92 1312.37 1576.29 1312.37 M1576.29 1308.66 Q1582.1 1308.66 1585.15 1313.27 Q1588.23 1317.85 1588.23 1326.6 Q1588.23 1335.33 1585.15 1339.94 Q1582.1 1344.52 1576.29 1344.52 Q1570.48 1344.52 1567.4 1339.94 Q1564.34 1335.33 1564.34 1326.6 Q1564.34 1317.85 1567.4 1313.27 Q1570.48 1308.66 1576.29 1308.66 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip120)\" d=\"M1606.45 1312.37 Q1602.84 1312.37 1601.01 1315.93 Q1599.2 1319.47 1599.2 1326.6 Q1599.2 1333.71 1601.01 1337.27 Q1602.84 1340.82 1606.45 1340.82 Q1610.08 1340.82 1611.89 1337.27 Q1613.72 1333.71 1613.72 1326.6 Q1613.72 1319.47 1611.89 1315.93 Q1610.08 1312.37 1606.45 1312.37 M1606.45 1308.66 Q1612.26 1308.66 1615.32 1313.27 Q1618.39 1317.85 1618.39 1326.6 Q1618.39 1335.33 1615.32 1339.94 Q1612.26 1344.52 1606.45 1344.52 Q1600.64 1344.52 1597.56 1339.94 Q1594.51 1335.33 1594.51 1326.6 Q1594.51 1317.85 1597.56 1313.27 Q1600.64 1308.66 1606.45 1308.66 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip120)\" d=\"M1636.61 1312.37 Q1633 1312.37 1631.17 1315.93 Q1629.37 1319.47 1629.37 1326.6 Q1629.37 1333.71 1631.17 1337.27 Q1633 1340.82 1636.61 1340.82 Q1640.25 1340.82 1642.05 1337.27 Q1643.88 1333.71 1643.88 1326.6 Q1643.88 1319.47 1642.05 1315.93 Q1640.25 1312.37 1636.61 1312.37 M1636.61 1308.66 Q1642.42 1308.66 1645.48 1313.27 Q1648.56 1317.85 1648.56 1326.6 Q1648.56 1335.33 1645.48 1339.94 Q1642.42 1344.52 1636.61 1344.52 Q1630.8 1344.52 1627.72 1339.94 Q1624.67 1335.33 1624.67 1326.6 Q1624.67 1317.85 1627.72 1313.27 Q1630.8 1308.66 1636.61 1308.66 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip120)\" d=\"M2118.57 1325.21 Q2121.93 1325.93 2123.8 1328.2 Q2125.7 1330.47 2125.7 1333.8 Q2125.7 1338.92 2122.18 1341.72 Q2118.66 1344.52 2112.18 1344.52 Q2110.01 1344.52 2107.69 1344.08 Q2105.4 1343.66 2102.95 1342.81 L2102.95 1338.29 Q2104.89 1339.43 2107.2 1340 Q2109.52 1340.58 2112.04 1340.58 Q2116.44 1340.58 2118.73 1338.85 Q2121.05 1337.11 2121.05 1333.8 Q2121.05 1330.75 2118.89 1329.03 Q2116.76 1327.3 2112.95 1327.3 L2108.92 1327.3 L2108.92 1323.45 L2113.13 1323.45 Q2116.58 1323.45 2118.41 1322.09 Q2120.24 1320.7 2120.24 1318.11 Q2120.24 1315.44 2118.34 1314.03 Q2116.46 1312.6 2112.95 1312.6 Q2111.02 1312.6 2108.82 1313.01 Q2106.63 1313.43 2103.99 1314.31 L2103.99 1310.14 Q2106.65 1309.4 2108.96 1309.03 Q2111.3 1308.66 2113.36 1308.66 Q2118.69 1308.66 2121.79 1311.09 Q2124.89 1313.5 2124.89 1317.62 Q2124.89 1320.49 2123.25 1322.48 Q2121.6 1324.45 2118.57 1325.21 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip120)\" d=\"M2144.57 1312.37 Q2140.95 1312.37 2139.13 1315.93 Q2137.32 1319.47 2137.32 1326.6 Q2137.32 1333.71 2139.13 1337.27 Q2140.95 1340.82 2144.57 1340.82 Q2148.2 1340.82 2150.01 1337.27 Q2151.83 1333.71 2151.83 1326.6 Q2151.83 1319.47 2150.01 1315.93 Q2148.2 1312.37 2144.57 1312.37 M2144.57 1308.66 Q2150.38 1308.66 2153.43 1313.27 Q2156.51 1317.85 2156.51 1326.6 Q2156.51 1335.33 2153.43 1339.94 Q2150.38 1344.52 2144.57 1344.52 Q2138.76 1344.52 2135.68 1339.94 Q2132.62 1335.33 2132.62 1326.6 Q2132.62 1317.85 2135.68 1313.27 Q2138.76 1308.66 2144.57 1308.66 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip120)\" d=\"M2174.73 1312.37 Q2171.12 1312.37 2169.29 1315.93 Q2167.48 1319.47 2167.48 1326.6 Q2167.48 1333.71 2169.29 1337.27 Q2171.12 1340.82 2174.73 1340.82 Q2178.36 1340.82 2180.17 1337.27 Q2182 1333.71 2182 1326.6 Q2182 1319.47 2180.17 1315.93 Q2178.36 1312.37 2174.73 1312.37 M2174.73 1308.66 Q2180.54 1308.66 2183.59 1313.27 Q2186.67 1317.85 2186.67 1326.6 Q2186.67 1335.33 2183.59 1339.94 Q2180.54 1344.52 2174.73 1344.52 Q2168.92 1344.52 2165.84 1339.94 Q2162.78 1335.33 2162.78 1326.6 Q2162.78 1317.85 2165.84 1313.27 Q2168.92 1308.66 2174.73 1308.66 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip120)\" d=\"M2204.89 1312.37 Q2201.28 1312.37 2199.45 1315.93 Q2197.64 1319.47 2197.64 1326.6 Q2197.64 1333.71 2199.45 1337.27 Q2201.28 1340.82 2204.89 1340.82 Q2208.52 1340.82 2210.33 1337.27 Q2212.16 1333.71 2212.16 1326.6 Q2212.16 1319.47 2210.33 1315.93 Q2208.52 1312.37 2204.89 1312.37 M2204.89 1308.66 Q2210.7 1308.66 2213.75 1313.27 Q2216.83 1317.85 2216.83 1326.6 Q2216.83 1335.33 2213.75 1339.94 Q2210.7 1344.52 2204.89 1344.52 Q2199.08 1344.52 2196 1339.94 Q2192.94 1335.33 2192.94 1326.6 Q2192.94 1317.85 2196 1313.27 Q2199.08 1308.66 2204.89 1308.66 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip120)\" d=\"M1266.04 1391.71 L1266.04 1397.25 Q1263.56 1395.98 1260.88 1395.34 Q1258.21 1394.71 1255.34 1394.71 Q1250.98 1394.71 1248.79 1396.04 Q1246.62 1397.38 1246.62 1400.05 Q1246.62 1402.09 1248.18 1403.27 Q1249.74 1404.41 1254.45 1405.46 L1256.46 1405.91 Q1262.7 1407.25 1265.31 1409.7 Q1267.95 1412.12 1267.95 1416.48 Q1267.95 1421.44 1264 1424.34 Q1260.09 1427.23 1253.21 1427.23 Q1250.35 1427.23 1247.23 1426.66 Q1244.14 1426.12 1240.7 1425.01 L1240.7 1418.96 Q1243.95 1420.65 1247.1 1421.51 Q1250.25 1422.33 1253.34 1422.33 Q1257.48 1422.33 1259.7 1420.93 Q1261.93 1419.5 1261.93 1416.92 Q1261.93 1414.54 1260.31 1413.26 Q1258.72 1411.99 1253.27 1410.81 L1251.24 1410.33 Q1245.79 1409.19 1243.38 1406.83 Q1240.96 1404.45 1240.96 1400.31 Q1240.96 1395.28 1244.52 1392.54 Q1248.09 1389.8 1254.64 1389.8 Q1257.89 1389.8 1260.75 1390.28 Q1263.62 1390.76 1266.04 1391.71 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip120)\" d=\"M1283.07 1380.54 L1283.07 1390.66 L1295.13 1390.66 L1295.13 1395.22 L1283.07 1395.22 L1283.07 1414.57 Q1283.07 1418.93 1284.24 1420.17 Q1285.45 1421.41 1289.11 1421.41 L1295.13 1421.41 L1295.13 1426.31 L1289.11 1426.31 Q1282.33 1426.31 1279.76 1423.8 Q1277.18 1421.25 1277.18 1414.57 L1277.18 1395.22 L1272.88 1395.22 L1272.88 1390.66 L1277.18 1390.66 L1277.18 1380.54 L1283.07 1380.54 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip120)\" d=\"M1333.32 1407.02 L1333.32 1409.89 L1306.4 1409.89 Q1306.78 1415.94 1310.02 1419.12 Q1313.3 1422.27 1319.13 1422.27 Q1322.5 1422.27 1325.65 1421.44 Q1328.84 1420.61 1331.95 1418.96 L1331.95 1424.5 Q1328.8 1425.83 1325.49 1426.53 Q1322.18 1427.23 1318.78 1427.23 Q1310.25 1427.23 1305.25 1422.27 Q1300.29 1417.3 1300.29 1408.84 Q1300.29 1400.08 1305 1394.96 Q1309.74 1389.8 1317.76 1389.8 Q1324.95 1389.8 1329.12 1394.45 Q1333.32 1399.07 1333.32 1407.02 M1327.47 1405.3 Q1327.4 1400.5 1324.76 1397.63 Q1322.15 1394.77 1317.82 1394.77 Q1312.92 1394.77 1309.96 1397.54 Q1307.03 1400.31 1306.59 1405.34 L1327.47 1405.3 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip120)\" d=\"M1348.6 1420.96 L1348.6 1439.87 L1342.71 1439.87 L1342.71 1390.66 L1348.6 1390.66 L1348.6 1396.07 Q1350.45 1392.89 1353.25 1391.36 Q1356.08 1389.8 1360 1389.8 Q1366.49 1389.8 1370.53 1394.96 Q1374.6 1400.12 1374.6 1408.52 Q1374.6 1416.92 1370.53 1422.08 Q1366.49 1427.23 1360 1427.23 Q1356.08 1427.23 1353.25 1425.71 Q1350.45 1424.15 1348.6 1420.96 M1368.53 1408.52 Q1368.53 1402.06 1365.85 1398.4 Q1363.21 1394.71 1358.56 1394.71 Q1353.92 1394.71 1351.24 1398.4 Q1348.6 1402.06 1348.6 1408.52 Q1348.6 1414.98 1351.24 1418.67 Q1353.92 1422.33 1358.56 1422.33 Q1363.21 1422.33 1365.85 1418.67 Q1368.53 1414.98 1368.53 1408.52 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><polyline clip-path=\"url(#clip122)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:2; stroke-opacity:0.1; fill:none\" points=\"404.284,1260.81 2211.02,1260.81 \"/>\n<polyline clip-path=\"url(#clip122)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:2; stroke-opacity:0.1; fill:none\" points=\"404.284,1003.77 2211.02,1003.77 \"/>\n<polyline clip-path=\"url(#clip122)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:2; stroke-opacity:0.1; fill:none\" points=\"404.284,746.73 2211.02,746.73 \"/>\n<polyline clip-path=\"url(#clip122)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:2; stroke-opacity:0.1; fill:none\" points=\"404.284,489.69 2211.02,489.69 \"/>\n<polyline clip-path=\"url(#clip122)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:2; stroke-opacity:0.1; fill:none\" points=\"404.284,232.649 2211.02,232.649 \"/>\n<polyline clip-path=\"url(#clip120)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"404.284,1281.45 404.284,188.976 \"/>\n<polyline clip-path=\"url(#clip120)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"404.284,1260.81 423.181,1260.81 \"/>\n<polyline clip-path=\"url(#clip120)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"404.284,1003.77 423.181,1003.77 \"/>\n<polyline clip-path=\"url(#clip120)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"404.284,746.73 423.181,746.73 \"/>\n<polyline clip-path=\"url(#clip120)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"404.284,489.69 423.181,489.69 \"/>\n<polyline clip-path=\"url(#clip120)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"404.284,232.649 423.181,232.649 \"/>\n<path clip-path=\"url(#clip120)\" d=\"M356.339 1246.61 Q352.728 1246.61 350.899 1250.17 Q349.094 1253.72 349.094 1260.84 Q349.094 1267.95 350.899 1271.52 Q352.728 1275.06 356.339 1275.06 Q359.973 1275.06 361.779 1271.52 Q363.608 1267.95 363.608 1260.84 Q363.608 1253.72 361.779 1250.17 Q359.973 1246.61 356.339 1246.61 M356.339 1242.91 Q362.149 1242.91 365.205 1247.51 Q368.284 1252.09 368.284 1260.84 Q368.284 1269.57 365.205 1274.18 Q362.149 1278.76 356.339 1278.76 Q350.529 1278.76 347.45 1274.18 Q344.395 1269.57 344.395 1260.84 Q344.395 1252.09 347.45 1247.51 Q350.529 1242.91 356.339 1242.91 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip120)\" d=\"M290.043 1017.11 L306.363 1017.11 L306.363 1021.05 L284.418 1021.05 L284.418 1017.11 Q287.08 1014.36 291.664 1009.73 Q296.27 1005.08 297.451 1003.74 Q299.696 1001.21 300.576 999.476 Q301.478 997.717 301.478 996.027 Q301.478 993.272 299.534 991.536 Q297.613 989.8 294.511 989.8 Q292.312 989.8 289.858 990.564 Q287.427 991.328 284.65 992.879 L284.65 988.157 Q287.474 987.022 289.927 986.444 Q292.381 985.865 294.418 985.865 Q299.789 985.865 302.983 988.55 Q306.177 991.235 306.177 995.726 Q306.177 997.856 305.367 999.777 Q304.58 1001.68 302.474 1004.27 Q301.895 1004.94 298.793 1008.16 Q295.691 1011.35 290.043 1017.11 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip120)\" d=\"M316.224 986.49 L334.58 986.49 L334.58 990.425 L320.506 990.425 L320.506 998.897 Q321.524 998.55 322.543 998.388 Q323.562 998.203 324.58 998.203 Q330.367 998.203 333.747 1001.37 Q337.126 1004.55 337.126 1009.96 Q337.126 1015.54 333.654 1018.64 Q330.182 1021.72 323.862 1021.72 Q321.687 1021.72 319.418 1021.35 Q317.173 1020.98 314.765 1020.24 L314.765 1015.54 Q316.849 1016.67 319.071 1017.23 Q321.293 1017.79 323.77 1017.79 Q327.774 1017.79 330.112 1015.68 Q332.45 1013.57 332.45 1009.96 Q332.45 1006.35 330.112 1004.24 Q327.774 1002.14 323.77 1002.14 Q321.895 1002.14 320.02 1002.55 Q318.168 1002.97 316.224 1003.85 L316.224 986.49 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip120)\" d=\"M356.339 989.569 Q352.728 989.569 350.899 993.133 Q349.094 996.675 349.094 1003.8 Q349.094 1010.91 350.899 1014.48 Q352.728 1018.02 356.339 1018.02 Q359.973 1018.02 361.779 1014.48 Q363.608 1010.91 363.608 1003.8 Q363.608 996.675 361.779 993.133 Q359.973 989.569 356.339 989.569 M356.339 985.865 Q362.149 985.865 365.205 990.471 Q368.284 995.055 368.284 1003.8 Q368.284 1012.53 365.205 1017.14 Q362.149 1021.72 356.339 1021.72 Q350.529 1021.72 347.45 1017.14 Q344.395 1012.53 344.395 1003.8 Q344.395 995.055 347.45 990.471 Q350.529 985.865 356.339 985.865 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip120)\" d=\"M286.062 729.45 L304.418 729.45 L304.418 733.385 L290.344 733.385 L290.344 741.857 Q291.363 741.51 292.381 741.348 Q293.4 741.163 294.418 741.163 Q300.205 741.163 303.585 744.334 Q306.964 747.505 306.964 752.922 Q306.964 758.501 303.492 761.602 Q300.02 764.681 293.701 764.681 Q291.525 764.681 289.256 764.311 Q287.011 763.94 284.603 763.2 L284.603 758.501 Q286.687 759.635 288.909 760.19 Q291.131 760.746 293.608 760.746 Q297.613 760.746 299.951 758.639 Q302.288 756.533 302.288 752.922 Q302.288 749.311 299.951 747.204 Q297.613 745.098 293.608 745.098 Q291.733 745.098 289.858 745.514 Q288.006 745.931 286.062 746.811 L286.062 729.45 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip120)\" d=\"M326.177 732.528 Q322.566 732.528 320.737 736.093 Q318.932 739.635 318.932 746.764 Q318.932 753.871 320.737 757.436 Q322.566 760.977 326.177 760.977 Q329.811 760.977 331.617 757.436 Q333.446 753.871 333.446 746.764 Q333.446 739.635 331.617 736.093 Q329.811 732.528 326.177 732.528 M326.177 728.825 Q331.987 728.825 335.043 733.431 Q338.122 738.015 338.122 746.764 Q338.122 755.491 335.043 760.098 Q331.987 764.681 326.177 764.681 Q320.367 764.681 317.288 760.098 Q314.233 755.491 314.233 746.764 Q314.233 738.015 317.288 733.431 Q320.367 728.825 326.177 728.825 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip120)\" d=\"M356.339 732.528 Q352.728 732.528 350.899 736.093 Q349.094 739.635 349.094 746.764 Q349.094 753.871 350.899 757.436 Q352.728 760.977 356.339 760.977 Q359.973 760.977 361.779 757.436 Q363.608 753.871 363.608 746.764 Q363.608 739.635 361.779 736.093 Q359.973 732.528 356.339 732.528 M356.339 728.825 Q362.149 728.825 365.205 733.431 Q368.284 738.015 368.284 746.764 Q368.284 755.491 365.205 760.098 Q362.149 764.681 356.339 764.681 Q350.529 764.681 347.45 760.098 Q344.395 755.491 344.395 746.764 Q344.395 738.015 347.45 733.431 Q350.529 728.825 356.339 728.825 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip120)\" d=\"M284.835 472.41 L307.057 472.41 L307.057 474.4 L294.511 506.97 L289.627 506.97 L301.432 476.345 L284.835 476.345 L284.835 472.41 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip120)\" d=\"M316.224 472.41 L334.58 472.41 L334.58 476.345 L320.506 476.345 L320.506 484.817 Q321.524 484.47 322.543 484.308 Q323.562 484.122 324.58 484.122 Q330.367 484.122 333.747 487.294 Q337.126 490.465 337.126 495.882 Q337.126 501.46 333.654 504.562 Q330.182 507.641 323.862 507.641 Q321.687 507.641 319.418 507.27 Q317.173 506.9 314.765 506.159 L314.765 501.46 Q316.849 502.595 319.071 503.15 Q321.293 503.706 323.77 503.706 Q327.774 503.706 330.112 501.599 Q332.45 499.493 332.45 495.882 Q332.45 492.271 330.112 490.164 Q327.774 488.058 323.77 488.058 Q321.895 488.058 320.02 488.474 Q318.168 488.891 316.224 489.771 L316.224 472.41 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip120)\" d=\"M356.339 475.488 Q352.728 475.488 350.899 479.053 Q349.094 482.595 349.094 489.724 Q349.094 496.831 350.899 500.396 Q352.728 503.937 356.339 503.937 Q359.973 503.937 361.779 500.396 Q363.608 496.831 363.608 489.724 Q363.608 482.595 361.779 479.053 Q359.973 475.488 356.339 475.488 M356.339 471.785 Q362.149 471.785 365.205 476.391 Q368.284 480.974 368.284 489.724 Q368.284 498.451 365.205 503.058 Q362.149 507.641 356.339 507.641 Q350.529 507.641 347.45 503.058 Q344.395 498.451 344.395 489.724 Q344.395 480.974 347.45 476.391 Q350.529 471.785 356.339 471.785 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip120)\" d=\"M256.664 245.994 L264.303 245.994 L264.303 219.629 L255.992 221.295 L255.992 217.036 L264.256 215.369 L268.932 215.369 L268.932 245.994 L276.571 245.994 L276.571 249.929 L256.664 249.929 L256.664 245.994 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip120)\" d=\"M296.015 218.448 Q292.404 218.448 290.576 222.013 Q288.77 225.554 288.77 232.684 Q288.77 239.791 290.576 243.355 Q292.404 246.897 296.015 246.897 Q299.65 246.897 301.455 243.355 Q303.284 239.791 303.284 232.684 Q303.284 225.554 301.455 222.013 Q299.65 218.448 296.015 218.448 M296.015 214.744 Q301.826 214.744 304.881 219.351 Q307.96 223.934 307.96 232.684 Q307.96 241.411 304.881 246.017 Q301.826 250.601 296.015 250.601 Q290.205 250.601 287.127 246.017 Q284.071 241.411 284.071 232.684 Q284.071 223.934 287.127 219.351 Q290.205 214.744 296.015 214.744 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip120)\" d=\"M326.177 218.448 Q322.566 218.448 320.737 222.013 Q318.932 225.554 318.932 232.684 Q318.932 239.791 320.737 243.355 Q322.566 246.897 326.177 246.897 Q329.811 246.897 331.617 243.355 Q333.446 239.791 333.446 232.684 Q333.446 225.554 331.617 222.013 Q329.811 218.448 326.177 218.448 M326.177 214.744 Q331.987 214.744 335.043 219.351 Q338.122 223.934 338.122 232.684 Q338.122 241.411 335.043 246.017 Q331.987 250.601 326.177 250.601 Q320.367 250.601 317.288 246.017 Q314.233 241.411 314.233 232.684 Q314.233 223.934 317.288 219.351 Q320.367 214.744 326.177 214.744 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip120)\" d=\"M356.339 218.448 Q352.728 218.448 350.899 222.013 Q349.094 225.554 349.094 232.684 Q349.094 239.791 350.899 243.355 Q352.728 246.897 356.339 246.897 Q359.973 246.897 361.779 243.355 Q363.608 239.791 363.608 232.684 Q363.608 225.554 361.779 222.013 Q359.973 218.448 356.339 218.448 M356.339 214.744 Q362.149 214.744 365.205 219.351 Q368.284 223.934 368.284 232.684 Q368.284 241.411 365.205 246.017 Q362.149 250.601 356.339 250.601 Q350.529 250.601 347.45 246.017 Q344.395 241.411 344.395 232.684 Q344.395 223.934 347.45 219.351 Q350.529 214.744 356.339 214.744 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip120)\" d=\"M184.22 784.801 L205.736 784.801 L205.736 790.657 L184.411 790.657 Q179.351 790.657 176.836 792.631 Q174.322 794.604 174.322 798.551 Q174.322 803.293 177.345 806.03 Q180.369 808.768 185.589 808.768 L205.736 808.768 L205.736 814.656 L170.088 814.656 L170.088 808.768 L175.627 808.768 Q172.412 806.667 170.821 803.834 Q169.229 800.97 169.229 797.246 Q169.229 791.103 173.049 787.952 Q176.836 784.801 184.22 784.801 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip120)\" d=\"M174.194 759.306 Q174.194 764.017 177.886 766.754 Q181.547 769.491 187.944 769.491 Q194.342 769.491 198.034 766.786 Q201.694 764.049 201.694 759.306 Q201.694 754.627 198.002 751.89 Q194.31 749.153 187.944 749.153 Q181.61 749.153 177.918 751.89 Q174.194 754.627 174.194 759.306 M169.229 759.306 Q169.229 751.667 174.194 747.307 Q179.16 742.946 187.944 742.946 Q196.697 742.946 201.694 747.307 Q206.659 751.667 206.659 759.306 Q206.659 766.977 201.694 771.337 Q196.697 775.666 187.944 775.666 Q179.16 775.666 174.194 771.337 Q169.229 766.977 169.229 759.306 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip120)\" d=\"M175.563 712.582 Q174.99 713.569 174.735 714.746 Q174.449 715.892 174.449 717.293 Q174.449 722.258 177.696 724.931 Q180.91 727.573 186.958 727.573 L205.736 727.573 L205.736 733.461 L170.088 733.461 L170.088 727.573 L175.627 727.573 Q172.38 725.727 170.821 722.767 Q169.229 719.807 169.229 715.574 Q169.229 714.969 169.325 714.237 Q169.388 713.505 169.547 712.614 L175.563 712.582 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip120)\" d=\"M176.932 679.83 Q172.985 677.634 171.107 674.579 Q169.229 671.523 169.229 667.385 Q169.229 661.815 173.144 658.792 Q177.027 655.768 184.22 655.768 L205.736 655.768 L205.736 661.656 L184.411 661.656 Q179.287 661.656 176.804 663.47 Q174.322 665.285 174.322 669.009 Q174.322 673.56 177.345 676.202 Q180.369 678.844 185.589 678.844 L205.736 678.844 L205.736 684.732 L184.411 684.732 Q179.255 684.732 176.804 686.546 Q174.322 688.36 174.322 692.148 Q174.322 696.636 177.377 699.278 Q180.401 701.919 185.589 701.919 L205.736 701.919 L205.736 707.808 L170.088 707.808 L170.088 701.919 L175.627 701.919 Q172.348 699.914 170.789 697.113 Q169.229 694.312 169.229 690.461 Q169.229 686.578 171.202 683.873 Q173.176 681.135 176.932 679.83 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><polyline clip-path=\"url(#clip122)\" style=\"stroke:#e26f46; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" stroke-dasharray=\"16, 10\" points=\"-1402.46,232.649 4017.76,232.649 \"/>\n<polyline clip-path=\"url(#clip122)\" style=\"stroke:#009af9; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"455.418,1250.53 455.986,1250.45 456.554,1248.25 457.123,1248.19 457.691,1247 458.259,1246.81 458.828,1245.52 459.396,1245.21 459.964,1243.81 460.533,1243.38 461.101,1241.83 461.669,1241.28 462.238,1240.63 462.806,1239.9 463.375,1238.05 463.943,1236.13 464.511,1235.15 465.08,1234.08 465.648,1232.92 466.216,1231.63 466.785,1230.21 467.353,1228.67 467.921,1227.02 468.49,1225.19 469.058,1223.26 469.626,1221.17 470.195,1218.92 470.763,1216.52 471.331,1212.95 471.9,1209.19 472.468,1205.29 473.036,1202.29 473.605,1198.04 474.173,1191.6 474.741,1187.01 475.31,1182.29 475.878,1178.42 476.446,1174.29 477.015,1169.03 477.583,1162.48 478.152,1157.75 478.72,1152.81 479.288,1147.7 479.857,1141.35 480.425,1134.73 480.993,1128.85 481.562,1122.01 482.13,1115.95 482.698,1107.5 483.267,1100.93 483.835,1094.19 484.403,1087.31 484.972,1080.24 485.54,1071.96 486.108,1063.54 486.677,1054.62 487.245,1045.71 487.813,1035.67 488.382,1025.38 488.95,1015.06 489.518,1006.7 490.087,996.177 490.655,986.52 491.224,977.763 491.792,967.869 492.36,957.728 492.929,946.531 493.497,934.274 494.065,924.044 494.634,912.758 495.202,901.412 495.77,890.057 496.339,876.671 496.907,867.428 497.475,857.135 498.044,846.742 498.612,835.22 499.18,823.002 499.749,812.874 500.317,800.744 500.885,789.736 501.454,778.844 502.022,769.909 502.59,759.953 503.159,749.079 503.727,738.219 504.295,724.34 504.864,715.054 505.432,706.698 506.001,698.354 506.569,689.119 507.137,680.937 507.706,671.768 508.274,662.591 508.842,652.636 509.411,644.796 509.979,637.048 510.547,628.169 511.116,620.484 511.684,611.838 512.252,600.282 512.821,593.006 513.389,585.929 513.957,578.789 514.526,568.676 515.094,559.77 515.662,552.082 516.231,545.417 516.799,536.799 517.367,529.312 517.936,518.9 518.504,511.897 519.072,504.043 519.641,498.149 520.209,490.293 520.778,484.748 521.346,479.247 521.914,472.053 522.483,465.949 523.051,459.017 523.619,452.306 524.188,446.664 524.756,441.945 525.324,436.491 525.893,430.009 526.461,424.861 527.029,419.685 527.598,415.672 528.166,408.55 528.734,403.768 529.303,400.068 529.871,393.592 530.439,390.201 531.008,385.972 531.576,382.835 532.144,379.827 532.713,373.584 533.281,368.551 533.85,365.909 534.418,361.249 534.986,357.803 535.555,354.506 536.123,352.194 536.691,347.859 537.26,345.737 537.828,342.678 538.396,339.807 538.965,337.767 539.533,334.782 540.101,333.036 540.67,331.048 541.238,329.159 541.806,327.315 542.375,325.55 542.943,324.881 543.511,323.269 544.08,321.489 544.648,319.699 545.216,316.651 545.785,315.01 546.353,313.499 546.921,310.696 547.49,310.117 548.058,306.52 548.627,306.07 549.195,302.544 549.763,302.147 550.332,299.642 550.9,297.328 551.468,296.15 552.037,291.724 552.605,288.544 553.173,286.662 553.742,286.079 554.31,283.335 554.878,282.621 555.447,282.009 556.015,281.323 556.583,280.748 557.152,279.908 557.72,281.18 558.288,280.181 558.857,280.491 559.425,275.609 559.993,276.094 560.562,273.412 561.13,270.728 561.698,271.359 562.267,269.897 562.835,268.527 563.404,267.316 563.972,265.02 564.54,264.964 565.109,265.86 565.677,265.51 566.245,265.069 566.814,264.883 567.382,260.292 567.95,260.616 568.519,259.548 569.087,259.308 569.655,258.247 570.224,258.067 570.792,258.116 571.36,258.019 571.929,258.922 572.497,257.632 573.065,257.473 573.634,256.476 574.202,255.318 574.77,255.387 575.339,254.441 575.907,254.181 576.476,253.282 577.044,251.256 577.612,250.34 578.181,250.533 578.749,249.447 579.317,248.59 579.886,249.792 580.454,249.809 581.022,249.953 581.591,250.236 582.159,249.286 582.727,249.238 583.296,248.4 583.864,247.426 584.432,247.834 585.001,248.044 585.569,246.016 586.137,246.306 586.706,245.62 587.274,245.999 587.842,248.416 588.411,247.643 588.979,246.816 589.547,246.941 590.116,246.04 590.684,244.346 591.253,244.736 591.821,246.353 592.389,246.417 592.958,248.614 593.526,247.403 594.094,247.534 594.663,249.624 595.231,250.53 595.799,248.306 596.368,249.343 596.936,248.191 597.504,243.773 598.073,244.179 598.641,241.205 599.209,241.604 599.778,245.202 600.346,244.238 600.914,244.346 601.483,243.427 602.051,243.465 602.619,243.729 603.188,242.782 603.756,242.925 604.325,242.082 604.893,241.282 605.461,238.557 606.03,238.994 606.598,239.406 607.166,238.599 607.735,239.011 608.303,241.57 608.871,241.805 609.44,240.091 610.008,238.364 610.576,239.805 611.145,239.232 611.713,238.433 612.281,238.949 612.85,240.526 613.418,238.757 613.986,235.967 614.555,238.646 615.123,239.952 615.691,242.437 616.26,242.45 616.828,241.378 617.396,238.366 617.965,238.924 618.533,238.361 619.102,240.025 619.67,236.432 620.238,236.107 620.807,235.818 621.375,236.67 621.943,238.187 622.512,239.741 623.08,237.997 623.648,238.36 624.217,238.912 624.785,239.266 625.353,238.506 625.922,237.463 626.49,237.731 627.058,239.216 627.627,239.468 628.195,239.833 628.763,239.896 629.332,239.056 629.9,240.526 630.468,241.853 631.037,242.146 631.605,243.356 632.173,242.013 632.742,243.23 633.31,243.356 633.879,244.377 634.447,245.398 635.015,244.21 635.584,244.25 636.152,244.996 636.72,244.743 637.289,242.282 637.857,243.357 638.425,243.343 638.994,243.261 639.562,241.073 640.13,241.886 640.699,241.75 641.267,242.702 641.835,240.491 642.404,240.412 642.972,238.256 643.54,237.585 644.109,238.958 644.677,239.08 645.245,240.306 645.814,240.388 646.382,239.47 646.951,238.336 647.519,240.309 648.087,240.262 648.656,240.263 649.224,241.457 649.792,240.48 650.361,238.519 650.929,239.64 651.497,240.576 652.066,240.188 652.634,240.002 653.202,241.165 653.771,240.104 654.339,240.039 654.907,240.102 655.476,242.115 656.044,242.847 656.612,241.418 657.181,241.376 657.749,241.082 658.317,240.724 658.886,240.481 659.454,241.281 660.022,240.294 660.591,239.041 661.159,238.024 661.728,240.239 662.296,240.91 662.864,241.506 663.433,243.305 664.001,242.726 664.569,242.357 665.138,239.986 665.706,237.925 666.274,238.043 666.843,237.706 667.411,235.573 667.979,234.836 668.548,235.051 669.116,235.197 669.684,233.279 670.253,233.379 670.821,232.624 671.389,232.912 671.958,231.021 672.526,230.545 673.094,230.945 673.663,230.48 674.231,230.879 674.799,229.316 675.368,231.865 675.936,234.095 676.505,235.396 677.073,237.746 677.641,238.817 678.21,238.703 678.778,237.479 679.346,237.323 679.915,237.416 680.483,236.415 681.051,238.613 681.62,236.478 682.188,233.417 682.756,233.649 683.325,235.933 683.893,236.071 684.461,237.173 685.03,238.234 685.598,238.056 686.166,236.808 686.735,233.805 687.303,232.109 687.871,232.446 688.44,231.835 689.008,232.037 689.577,232.342 690.145,233.584 690.713,233.74 691.282,232.804 691.85,232.054 692.418,232.435 692.987,233.911 693.555,233.3 694.123,232.406 694.692,232.514 695.26,232.541 695.828,233.988 696.397,231.212 696.965,231.634 697.533,228.999 698.102,230.459 698.67,234.203 699.238,232.629 699.807,233.039 700.375,235.45 700.943,235.538 701.512,235.668 702.08,237.003 702.648,236.965 703.217,236.008 703.785,236.078 704.354,236.119 704.922,236.099 705.49,237.138 706.059,238.216 706.627,239.088 707.195,241.051 707.764,240.857 708.332,242.576 708.9,240.262 709.469,238.929 710.037,238.869 710.605,237.609 711.174,237.645 711.742,235.629 712.31,237.604 712.879,238.743 713.447,239.802 714.015,237.232 714.584,236.189 715.152,235.223 715.72,236.213 716.289,236.007 716.857,235.947 717.425,236.812 717.994,237.902 718.562,236.647 719.131,233.502 719.699,231.541 720.267,228.897 720.836,230.372 721.404,231.918 721.972,233.05 722.541,231.295 723.109,232.627 723.677,231.842 724.246,232.049 724.814,234.518 725.382,234.543 725.951,234.509 726.519,237.906 727.087,237.726 727.656,235.397 728.224,234.506 728.792,232.431 729.361,232.529 729.929,231.739 730.497,228.918 731.066,229.615 731.634,232.114 732.203,232.41 732.771,233.811 733.339,231.966 733.908,232.26 734.476,232.298 735.044,232.607 735.613,228.698 736.181,227.975 736.749,227.11 737.318,227.804 737.886,229.386 738.454,230.718 739.023,231.11 739.591,230.345 740.159,229.759 740.728,231.208 741.296,230.431 741.864,230.857 742.433,232.268 743.001,234.658 743.569,233.624 744.138,230.746 744.706,230.192 745.274,230.557 745.843,232.936 746.411,231.015 746.98,232.651 747.548,229.734 748.116,231.214 748.685,231.639 749.253,233.096 749.821,231.295 750.39,233.893 750.958,232.04 751.526,232.335 752.095,233.874 752.663,232.013 753.231,233.467 753.8,233.691 754.368,232.168 754.936,232.477 755.505,231.94 756.073,234.28 756.641,230.294 757.21,231.82 757.778,231.066 758.346,231.468 758.915,234.037 759.483,234.39 760.052,232.734 760.62,236.023 761.188,238.262 761.757,239.394 762.325,240.214 762.893,240.901 763.462,239.587 764.03,239.141 764.598,239.864 765.167,239.567 765.735,237.33 766.303,236.202 766.872,236.098 767.44,234.287 768.008,232.419 768.577,231.519 769.145,231.874 769.713,231.179 770.282,233.56 770.85,232.64 771.418,232.941 771.987,233.339 772.555,232.649 773.123,231.924 773.692,231.967 774.26,234.213 774.829,236.198 775.397,237.162 775.965,237.282 776.534,238.271 777.102,237.939 777.67,237.054 778.239,239.383 778.807,238.179 779.375,237.945 779.944,236.587 780.512,237.713 781.08,237.491 781.649,237.425 782.217,236.315 782.785,238.188 783.354,239.045 783.922,239.754 784.49,236.213 785.059,235.375 785.627,236.529 786.195,237.385 786.764,239.396 787.332,238.019 787.9,238.647 788.469,238.58 789.037,239.305 789.606,238.011 790.174,237.877 790.742,237.812 791.311,237.549 791.879,237.455 792.447,239.071 793.016,236.852 793.584,240.837 794.152,240.589 794.721,240.01 795.289,238.85 795.857,238.485 796.426,239.092 796.994,235.759 797.562,235.772 798.131,233.534 798.699,235.526 799.267,235.605 799.836,234.451 800.404,234.222 800.972,237.17 801.541,235.932 802.109,236.734 802.678,237.415 803.246,237.198 803.814,236.93 804.383,236.856 804.951,235.425 805.519,234.281 806.088,235.125 806.656,236.111 807.224,236.087 807.793,233.665 808.361,236.524 808.929,237.114 809.498,235.666 810.066,233.444 810.634,233.272 811.203,232.069 811.771,229.051 812.339,231.306 812.908,228.107 813.476,230.444 814.044,230.723 814.613,228.914 815.181,227.161 815.749,228.53 816.318,228.908 816.886,231.139 817.455,231.145 818.023,233.246 818.591,232.044 819.16,231.981 819.728,233.163 820.296,234.295 820.865,232.159 821.433,232.154 822.001,231.265 822.57,232.483 823.138,233.651 823.706,233.588 824.275,232.596 824.843,232.579 825.411,233.772 825.98,235.812 826.548,235.743 827.116,234.441 827.685,231.199 828.253,229.283 828.821,228.501 829.39,228.648 829.958,230.119 830.526,229.152 831.095,229.652 831.663,229.791 832.232,231.117 832.8,232.354 833.368,233.282 833.937,235.378 834.505,235.607 835.073,237.63 835.642,237.258 836.21,236.034 836.778,232.716 837.347,231.681 837.915,232.77 838.483,232.596 839.052,233.697 839.62,235.68 840.188,233.397 840.757,233.29 841.325,233.446 841.893,234.625 842.462,236.656 843.03,236.324 843.598,236.257 844.167,233.026 844.735,232.814 845.304,234.027 845.872,231.868 846.44,229.83 847.009,229.117 847.577,228.322 848.145,227.742 848.714,228.121 849.282,230.516 849.85,229.882 850.419,231.276 850.987,230.41 851.555,230.633 852.124,230.762 852.692,230.954 853.26,232.228 853.829,233.057 854.397,232.11 854.965,231.991 855.534,230.057 856.102,229.033 856.67,230.341 857.239,230.514 857.807,230.989 858.375,230.216 858.944,231.473 859.512,231.589 860.081,235.883 860.649,235.735 861.217,234.701 861.786,232.607 862.354,233.539 862.922,234.367 863.491,234.438 864.059,235.371 864.627,238.489 865.196,238.232 865.764,239.008 866.332,239.703 866.901,241.465 867.469,240.133 868.037,239.641 868.606,240.134 869.174,238.706 869.742,239.423 870.311,237.987 870.879,237.648 871.447,238.192 872.016,236.673 872.584,235.324 873.152,236.285 873.721,235.903 874.289,235.958 874.858,234.461 875.426,232.249 875.994,233.31 876.563,233.132 877.131,235.257 877.699,235.841 878.268,234.648 878.836,234.607 879.404,232.214 879.973,231.096 880.541,229.101 881.109,229.269 881.678,229.554 882.246,227.575 882.814,229.007 883.383,229.356 883.951,228.694 884.519,228.82 885.088,229.053 885.656,230.535 886.224,232.683 886.793,234.741 887.361,233.615 887.93,232.75 888.498,232.767 889.066,233.808 889.635,233.766 890.203,237.049 890.771,235.816 891.34,233.518 891.908,233.485 892.476,234.657 893.045,234.742 893.613,235.584 894.181,233.233 894.75,232.063 895.318,232.239 895.886,232.374 896.455,231.069 897.023,230.308 897.591,231.461 898.16,230.647 898.728,229.628 899.296,229.798 899.865,232.334 900.433,232.373 901.001,233.53 901.57,235.444 902.138,235.219 902.707,232.992 903.275,233.094 903.843,234.252 904.412,234.209 904.98,234.135 905.548,233.831 906.117,232.845 906.685,235.892 907.253,235.741 907.822,236.754 908.39,235.379 908.958,235.963 909.527,236.431 910.095,236.138 910.663,233.863 911.232,234.797 911.8,234.657 912.368,234.418 912.937,235.36 913.505,238.218 914.073,237.787 914.642,237.31 915.21,235.987 915.779,235.59 916.347,234.271 916.915,235.081 917.484,233.952 918.052,235.881 918.62,233.543 919.189,233.664 919.757,233.601 920.325,233.628 920.894,231.371 921.462,232.41 922.03,230.676 922.599,230.862 923.167,230.942 923.735,230.975 924.304,234.346 924.872,233.231 925.44,232.235 926.009,231.506 926.577,229.734 927.145,230.805 927.714,231.012 928.282,230.083 928.85,231.128 929.419,235.406 929.987,235.161 930.556,233.808 931.124,232.535 931.692,234.466 932.261,233.469 932.829,234.51 933.397,233.413 933.966,232.223 934.534,232.217 935.102,234.008 935.671,232.564 936.239,232.706 936.807,233.74 937.376,232.652 937.944,232.785 938.512,233.821 939.081,233.626 939.649,234.446 940.217,234.365 940.786,234.254 941.354,233.076 941.922,232.07 942.491,232.021 943.059,231.212 943.627,230.245 944.196,231.368 944.764,231.427 945.333,231.383 945.901,231.343 946.469,230.358 947.038,230.263 947.606,229.203 948.174,230.458 948.743,230.771 949.311,228.795 949.879,228.09 950.448,231.537 951.016,232.846 951.584,233.76 952.153,232.848 952.721,232.534 953.289,232.356 953.858,232.576 954.426,232.588 954.994,232.689 955.563,232.79 956.131,232.927 956.699,233.058 957.268,232.187 957.836,232.208 958.405,232.323 958.973,229.551 959.541,228.881 960.11,228.281 960.678,229.505 961.246,230.429 961.815,230.623 962.383,229.794 962.951,229.963 963.52,229.394 964.088,229.723 964.656,228.331 965.225,228.877 965.793,225.133 966.361,225.833 966.93,224.335 967.498,225.885 968.066,225.722 968.635,225.61 969.203,225.126 969.771,225.899 970.34,226.501 970.908,228.858 971.476,230.231 972.045,231.526 972.613,232.891 973.182,233.857 973.75,231.86 974.318,233.064 974.887,231.117 975.455,232.514 976.023,233.666 976.592,234.831 977.16,233.974 977.728,232.044 978.297,233.276 978.865,232.044 979.433,232.211 980.002,231.246 980.57,233.645 981.138,234.014 981.707,233.271 982.275,233.474 982.843,231.4 983.412,229.641 983.98,230.965 984.548,231.47 985.117,229.847 985.685,228.258 986.253,232.879 986.822,235.093 987.39,233.197 987.959,234.366 988.527,234.608 989.095,233.744 989.664,234.721 990.232,232.753 990.8,233.029 991.369,234.191 991.937,235.248 992.505,236.329 993.074,239.31 993.642,240.028 994.21,241.734 994.779,243.211 995.347,241.529 995.915,241.011 996.484,240.58 997.052,239.311 997.62,236.873 998.189,238.908 998.757,239.572 999.325,238.145 999.894,236.807 1000.46,238.375 1001.03,238.238 1001.6,236.795 1002.17,236.523 1002.74,236.391 1003.3,236.149 1003.87,235.805 1004.44,236.699 1005.01,235.569 1005.58,237.264 1006.15,235.772 1006.71,235.746 1007.28,234.315 1007.85,232.147 1008.42,234.112 1008.99,231.822 1009.56,232.835 1010.12,233.678 1010.69,232.437 1011.26,231.512 1011.83,232.635 1012.4,232.543 1012.97,233.39 1013.53,233.333 1014.1,232.241 1014.67,233.331 1015.24,232.089 1015.81,232.05 1016.38,232.034 1016.94,230.923 1017.51,230.943 1018.08,235.057 1018.65,235.844 1019.22,234.757 1019.79,235.546 1020.35,235.525 1020.92,232.968 1021.49,233.041 1022.06,234.129 1022.63,232.915 1023.2,232.02 1023.76,232.042 1024.33,230.758 1024.9,230.824 1025.47,231.863 1026.04,231.928 1026.61,232.874 1027.17,230.794 1027.74,231.997 1028.31,230.881 1028.88,231.992 1029.45,232.03 1030.02,230.757 1030.58,230.909 1031.15,230.078 1031.72,229.286 1032.29,229.519 1032.86,232.666 1033.43,231.657 1033.99,230.807 1034.56,231.96 1035.13,230.903 1035.7,230.834 1036.27,234.978 1036.84,233.783 1037.4,232.528 1037.97,228.521 1038.54,228.781 1039.11,229.984 1039.68,231.059 1040.25,231.327 1040.81,233.466 1041.38,232.494 1041.95,233.489 1042.52,233.201 1043.09,233.209 1043.66,234.141 1044.22,234.116 1044.79,236.042 1045.36,235.774 1045.93,235.645 1046.5,235.31 1047.07,236.323 1047.63,235.052 1048.2,232.921 1048.77,232.689 1049.34,233.626 1049.91,233.509 1050.48,232.427 1051.05,231.309 1051.61,235.464 1052.18,236.168 1052.75,235.931 1053.32,237.768 1053.89,236.402 1054.46,237.123 1055.02,236.598 1055.59,235.393 1056.16,237.2 1056.73,235.863 1057.3,234.476 1057.87,232.169 1058.43,232.21 1059,231.192 1059.57,230.138 1060.14,230.136 1060.71,230.304 1061.28,230.368 1061.84,228.526 1062.41,229.653 1062.98,230.98 1063.55,228.756 1064.12,228.005 1064.69,227.398 1065.25,228.758 1065.82,227.995 1066.39,228.477 1066.96,229.783 1067.53,224.891 1068.1,226.352 1068.66,227.892 1069.23,230.386 1069.8,231.557 1070.37,228.75 1070.94,228.959 1071.51,231.205 1072.07,229.416 1072.64,232.762 1073.21,233.762 1073.78,234.898 1074.35,234.866 1074.92,233.83 1075.48,234.905 1076.05,233.633 1076.62,231.488 1077.19,231.895 1077.76,232.758 1078.33,231.664 1078.89,231.74 1079.46,233.824 1080.03,231.912 1080.6,231.977 1081.17,233.308 1081.74,236.484 1082.3,237.386 1082.87,238.09 1083.44,237.734 1084.01,237.395 1084.58,237.102 1085.15,236.797 1085.71,235.393 1086.28,236.001 1086.85,234.837 1087.42,235.713 1087.99,235.437 1088.56,233.328 1089.12,233.314 1089.69,233.375 1090.26,233.047 1090.83,230.928 1091.4,229.872 1091.97,230.054 1092.53,230.271 1093.1,231.523 1093.67,231.734 1094.24,232.91 1094.81,231.879 1095.38,232.01 1095.94,232.046 1096.51,232.076 1097.08,231.076 1097.65,234.127 1098.22,232.917 1098.79,232.864 1099.35,232.891 1099.92,230.66 1100.49,229.626 1101.06,228.71 1101.63,229 1102.2,229.14 1102.76,231.461 1103.33,230.546 1103.9,229.574 1104.47,228.992 1105.04,231.206 1105.61,232.267 1106.17,232.338 1106.74,231.474 1107.31,230.446 1107.88,230.667 1108.45,230.765 1109.02,231.938 1109.58,233.312 1110.15,235.332 1110.72,237.219 1111.29,236.746 1111.86,237.556 1112.43,237.139 1112.99,237.723 1113.56,238.543 1114.13,236.878 1114.7,238.605 1115.27,237.005 1115.84,234.494 1116.4,234.423 1116.97,234.328 1117.54,233.997 1118.11,233.824 1118.68,234.796 1119.25,234.735 1119.81,233.596 1120.38,233.389 1120.95,231.177 1121.52,229.239 1122.09,230.624 1122.66,231.884 1123.23,232.031 1123.79,231.217 1124.36,229.109 1124.93,229.358 1125.5,227.617 1126.07,226.891 1126.64,225.974 1127.2,225.365 1127.77,226.047 1128.34,224.527 1128.91,223.112 1129.48,223.977 1130.05,225.631 1130.61,227.217 1131.18,226.944 1131.75,230.486 1132.32,231.692 1132.89,228.706 1133.46,229.092 1134.02,232.777 1134.59,233.977 1135.16,234.975 1135.73,234.14 1136.3,234.28 1136.87,234.342 1137.43,234.175 1138,233.052 1138.57,233.106 1139.14,231.167 1139.71,230.504 1140.28,230.792 1140.84,230.038 1141.41,230.222 1141.98,230.749 1142.55,231.011 1143.12,231.361 1143.69,229.838 1144.25,231.191 1144.82,231.269 1145.39,232.438 1145.96,232.656 1146.53,231.781 1147.1,233.12 1147.66,233.169 1148.23,231.965 1148.8,233.16 1149.37,234.077 1149.94,234.14 1150.51,233.015 1151.07,235.168 1151.64,234.979 1152.21,232.903 1152.78,232.873 1153.35,232.769 1153.92,233.858 1154.48,234.813 1155.05,234.835 1155.62,235.885 1156.19,234.564 1156.76,231.303 1157.33,231.485 1157.89,233.637 1158.46,233.65 1159.03,230.49 1159.6,231.798 1160.17,232.016 1160.74,233.213 1161.3,232.26 1161.87,234.353 1162.44,236.056 1163.01,235.778 1163.58,235.43 1164.15,235.294 1164.71,235.218 1165.28,236.165 1165.85,233.807 1166.42,234.729 1166.99,233.417 1167.56,232.248 1168.12,236.609 1168.69,236.114 1169.26,236.902 1169.83,235.823 1170.4,234.369 1170.97,234.299 1171.53,231.099 1172.1,230.441 1172.67,229.585 1173.24,229.953 1173.81,228.887 1174.38,232.263 1174.94,232.306 1175.51,233.33 1176.08,235.187 1176.65,232.973 1177.22,233.949 1177.79,233.036 1178.35,235.073 1178.92,237.966 1179.49,237.718 1180.06,237.362 1180.63,236.057 1181.2,236.855 1181.76,236.469 1182.33,238.198 1182.9,240.057 1183.47,239.39 1184.04,238.981 1184.61,236.409 1185.17,236.145 1185.74,235.075 1186.31,233.816 1186.88,232.722 1187.45,229.64 1188.02,230.001 1188.58,231.378 1189.15,232.381 1189.72,232.538 1190.29,233.442 1190.86,235.387 1191.43,235.182 1192,233.762 1192.56,234.696 1193.13,234.666 1193.7,233.322 1194.27,233.339 1194.84,233.135 1195.41,233.417 1195.97,234.488 1196.54,233.579 1197.11,230.451 1197.68,229.845 1198.25,232.062 1198.82,232.129 1199.38,232.234 1199.95,231.427 1200.52,230.689 1201.09,230.67 1201.66,230.873 1202.23,230.024 1202.79,231.351 1203.36,231.552 1203.93,228.646 1204.5,228.797 1205.07,226.112 1205.64,225.68 1206.2,225.1 1206.77,224.343 1207.34,226.064 1207.91,227.622 1208.48,227.094 1209.05,228.513 1209.61,229.793 1210.18,228.164 1210.75,227.437 1211.32,228.712 1211.89,229.378 1212.46,230.551 1213.02,229.811 1213.59,231.322 1214.16,231.63 1214.73,231.982 1215.3,231.086 1215.87,229.95 1216.43,230.375 1217,228.584 1217.57,232.093 1218.14,235.398 1218.71,235.404 1219.28,235.242 1219.84,235.197 1220.41,236.229 1220.98,237.119 1221.55,236.833 1222.12,239.774 1222.69,241.424 1223.25,241.903 1223.82,240.541 1224.39,242.216 1224.96,243.501 1225.53,242.837 1226.1,241.256 1226.66,239.685 1227.23,240.202 1227.8,237.4 1228.37,236.995 1228.94,233.504 1229.51,233.258 1230.07,234.183 1230.64,234.004 1231.21,232.888 1231.78,232.962 1232.35,235.006 1232.92,233.823 1233.48,233.58 1234.05,232.342 1234.62,234.434 1235.19,233.227 1235.76,234.091 1236.33,232.927 1236.89,230.603 1237.46,231.64 1238.03,231.769 1238.6,231.947 1239.17,231.954 1239.74,231.94 1240.3,231.88 1240.87,233.996 1241.44,233.72 1242.01,231.874 1242.58,230.091 1243.15,229.519 1243.71,228.657 1244.28,231.151 1244.85,230.264 1245.42,231.459 1245.99,229.593 1246.56,228.921 1247.12,230.33 1247.69,230.557 1248.26,234.12 1248.83,232.216 1249.4,231.256 1249.97,231.233 1250.53,230.522 1251.1,228.634 1251.67,229.864 1252.24,231.031 1252.81,230.044 1253.38,230.283 1253.94,230.292 1254.51,230.372 1255.08,228.716 1255.65,228.118 1256.22,228.562 1256.79,230.005 1257.35,230.258 1257.92,229.516 1258.49,229.715 1259.06,228.844 1259.63,227.967 1260.2,230.421 1260.76,229.598 1261.33,230.97 1261.9,231.155 1262.47,232.064 1263.04,230.174 1263.61,229.422 1264.18,228.508 1264.74,227.759 1265.31,227.063 1265.88,225.46 1266.45,226.918 1267.02,227.506 1267.59,230.375 1268.15,233.789 1268.72,235.872 1269.29,234.611 1269.86,234.489 1270.43,236.555 1271,235.425 1271.56,233.981 1272.13,234.849 1272.7,233.704 1273.27,234.606 1273.84,236.445 1274.41,237.995 1274.97,238.771 1275.54,236.301 1276.11,236.879 1276.68,235.417 1277.25,234.077 1277.82,237.113 1278.38,236.792 1278.95,236.522 1279.52,237.426 1280.09,238.171 1280.66,237.591 1281.23,238.437 1281.79,235.971 1282.36,235.662 1282.93,237.432 1283.5,238.265 1284.07,237.839 1284.64,237.558 1285.2,237.015 1285.77,236.912 1286.34,237.793 1286.91,236.408 1287.48,234.826 1288.05,236.776 1288.61,235.56 1289.18,234.245 1289.75,234.097 1290.32,232.712 1290.89,232.574 1291.46,231.392 1292.02,231.534 1292.59,231.478 1293.16,232.341 1293.73,233.465 1294.3,234.404 1294.87,236.163 1295.43,235.719 1296,235.587 1296.57,236.412 1297.14,235.115 1297.71,234.459 1298.28,234.438 1298.84,235.475 1299.41,235.188 1299.98,233.996 1300.55,234.846 1301.12,236.682 1301.69,237.311 1302.25,236.682 1302.82,236.161 1303.39,234.861 1303.96,233.471 1304.53,233.269 1305.1,234.161 1305.66,234.986 1306.23,231.552 1306.8,231.371 1307.37,231.279 1307.94,227.964 1308.51,228.336 1309.07,230.452 1309.64,228.539 1310.21,228.85 1310.78,228.181 1311.35,228.479 1311.92,229.656 1312.48,229.875 1313.05,232.053 1313.62,230.045 1314.19,229.364 1314.76,228.446 1315.33,231.978 1315.89,232.006 1316.46,235.123 1317.03,234.802 1317.6,234.645 1318.17,234.85 1318.74,235.63 1319.3,238.429 1319.87,237.964 1320.44,238.582 1321.01,237.932 1321.58,237.503 1322.15,234.088 1322.71,234.013 1323.28,234.961 1323.85,232.729 1324.42,230.405 1324.99,230.494 1325.56,231.455 1326.12,232.504 1326.69,231.341 1327.26,230.306 1327.83,230.343 1328.4,227.291 1328.97,227.577 1329.53,227.836 1330.1,228.025 1330.67,227.44 1331.24,225.708 1331.81,226.28 1332.38,226.614 1332.94,228.225 1333.51,231.543 1334.08,232.573 1334.65,232.689 1335.22,234.902 1335.79,235.651 1336.36,236.5 1336.92,237.324 1337.49,239.762 1338.06,240.315 1338.63,239.684 1339.2,238.163 1339.77,238.735 1340.33,236.075 1340.9,236.508 1341.47,236.11 1342.04,235.909 1342.61,235.457 1343.18,231.946 1343.74,232.829 1344.31,234.676 1344.88,234.441 1345.45,236.139 1346.02,236.828 1346.59,236.296 1347.15,236.838 1347.72,235.066 1348.29,234.795 1348.86,233.267 1349.43,234.017 1350,232.662 1350.56,232.683 1351.13,231.439 1351.7,230.309 1352.27,231.415 1352.84,233.415 1353.41,234.372 1353.97,233.431 1354.54,233.366 1355.11,231.155 1355.68,232.284 1356.25,233.26 1356.82,232.017 1357.38,232.959 1357.95,231.607 1358.52,231.452 1359.09,233.472 1359.66,232.037 1360.23,231.966 1360.79,231.988 1361.36,231.979 1361.93,229.711 1362.5,229.838 1363.07,229.731 1363.64,230.758 1364.2,231.754 1364.77,233.58 1365.34,232.398 1365.91,232.394 1366.48,232.232 1367.05,230.948 1367.61,230.88 1368.18,228.735 1368.75,228.951 1369.32,228.309 1369.89,228.604 1370.46,228.88 1371.02,226.024 1371.59,227.432 1372.16,225.617 1372.73,226.057 1373.3,224.332 1373.87,222.744 1374.43,222.33 1375,219.895 1375.57,222.528 1376.14,221.32 1376.71,222.897 1377.28,224.599 1377.84,226.327 1378.41,225.705 1378.98,225.249 1379.55,224.784 1380.12,226.488 1380.69,227.756 1381.25,229.112 1381.82,230.434 1382.39,229.474 1382.96,230.834 1383.53,231.152 1384.1,232.485 1384.66,235.753 1385.23,234.711 1385.8,237.831 1386.37,237.374 1386.94,235.859 1387.51,235.794 1388.07,235.628 1388.64,234.48 1389.21,235.244 1389.78,236.504 1390.35,236.196 1390.92,235.912 1391.48,236.568 1392.05,236.469 1392.62,236.1 1393.19,236.908 1393.76,236.703 1394.33,237.38 1394.89,236.127 1395.46,234.831 1396.03,233.827 1396.6,235.047 1397.17,233.803 1397.74,234.906 1398.3,234.632 1398.87,235.456 1399.44,234.169 1400.01,234.09 1400.58,236.957 1401.15,236.483 1401.71,234.397 1402.28,234.26 1402.85,234.213 1403.42,234.319 1403.99,236.298 1404.56,236.064 1405.13,234.827 1405.69,232.719 1406.26,232.617 1406.83,232.778 1407.4,231.722 1407.97,232.793 1408.54,229.614 1409.1,227.606 1409.67,227.952 1410.24,227.014 1410.81,230.261 1411.38,230.179 1411.95,231.392 1412.51,232.843 1413.08,232.966 1413.65,230.09 1414.22,232.33 1414.79,232.215 1415.36,233.193 1415.92,235.084 1416.49,232.813 1417.06,234.015 1417.63,232.024 1418.2,235.106 1418.77,235.099 1419.33,236.998 1419.9,235.697 1420.47,236.354 1421.04,238.124 1421.61,238.575 1422.18,237.121 1422.74,236.836 1423.31,237.638 1423.88,235.135 1424.45,234.901 1425.02,234.672 1425.59,233.509 1426.15,233.485 1426.72,232.412 1427.29,232.401 1427.86,233.253 1428.43,232.089 1429,232.011 1429.56,230.745 1430.13,229.805 1430.7,231.103 1431.27,231.172 1431.84,231.52 1432.41,231.429 1432.97,231.627 1433.54,230.623 1434.11,229.562 1434.68,229.622 1435.25,232.076 1435.82,234.255 1436.38,232.911 1436.95,234.841 1437.52,234.456 1438.09,234.287 1438.66,232.064 1439.23,232.061 1439.79,234.105 1440.36,234.888 1440.93,234.447 1441.5,234.338 1442.07,232.949 1442.64,231.97 1443.2,231.631 1443.77,233.618 1444.34,235.696 1444.91,235.364 1445.48,234.092 1446.05,232.892 1446.61,232.578 1447.18,233.704 1447.75,232.395 1448.32,232.389 1448.89,233.243 1449.46,232.105 1450.02,231.012 1450.59,231.984 1451.16,231.964 1451.73,230.967 1452.3,229.108 1452.87,224.135 1453.43,227.614 1454,227.87 1454.57,227.947 1455.14,227.29 1455.71,229.706 1456.28,228.911 1456.84,231.271 1457.41,230.405 1457.98,230.651 1458.55,230.752 1459.12,231.921 1459.69,231.994 1460.25,232.026 1460.82,232.219 1461.39,232.328 1461.96,232.406 1462.53,232.359 1463.1,230.513 1463.66,230.57 1464.23,229.81 1464.8,229.174 1465.37,226.302 1465.94,226.674 1466.51,229.209 1467.07,229.494 1467.64,229.856 1468.21,229.924 1468.78,231.321 1469.35,232.552 1469.92,231.428 1470.48,230.813 1471.05,230.801 1471.62,230.906 1472.19,233.153 1472.76,235.254 1473.33,233.96 1473.89,233.77 1474.46,234.835 1475.03,232.527 1475.6,232.727 1476.17,232.627 1476.74,232.749 1477.31,233.803 1477.87,235.083 1478.44,236.004 1479.01,236.845 1479.58,234.75 1480.15,237.789 1480.72,236.302 1481.28,236.053 1481.85,236.899 1482.42,235.775 1482.99,237.46 1483.56,237.117 1484.13,232.812 1484.69,235.048 1485.26,233.855 1485.83,234.79 1486.4,233.787 1486.97,236.779 1487.54,237.617 1488.1,236.23 1488.67,237.106 1489.24,235.083 1489.81,236.126 1490.38,234.703 1490.95,235.379 1491.51,233.973 1492.08,234.719 1492.65,234.407 1493.22,235.222 1493.79,236.001 1494.36,235.378 1494.92,237.013 1495.49,237.654 1496.06,237.307 1496.63,235.785 1497.2,234.349 1497.77,234.243 1498.33,234.007 1498.9,231.938 1499.47,230.832 1500.04,232.026 1500.61,230.203 1501.18,230.176 1501.74,230.323 1502.31,229.382 1502.88,228.451 1503.45,229.714 1504.02,227.683 1504.59,227.788 1505.15,229.027 1505.72,228.22 1506.29,228.47 1506.86,230.623 1507.43,229.621 1508,230.761 1508.56,232.828 1509.13,230.63 1509.7,229.675 1510.27,229.853 1510.84,229.033 1511.41,228.197 1511.97,229.615 1512.54,228.761 1513.11,230.096 1513.68,232.431 1514.25,229.608 1514.82,230.666 1515.38,230.737 1515.95,229.769 1516.52,229.837 1517.09,231.204 1517.66,229.461 1518.23,229.83 1518.79,229.127 1519.36,231.56 1519.93,232.65 1520.5,230.598 1521.07,230.865 1521.64,231.061 1522.2,231.118 1522.77,229.282 1523.34,229.526 1523.91,228.716 1524.48,229.007 1525.05,229.434 1525.61,230.939 1526.18,230.109 1526.75,232.429 1527.32,233.426 1527.89,232.534 1528.46,232.507 1529.02,233.69 1529.59,231.969 1530.16,233.209 1530.73,231.07 1531.3,228.31 1531.87,228.744 1532.43,228.066 1533,228.69 1533.57,228.108 1534.14,227.394 1534.71,226.818 1535.28,228.19 1535.84,229.6 1536.41,229.883 1536.98,230.224 1537.55,232.508 1538.12,233.537 1538.69,233.566 1539.25,234.501 1539.82,232.391 1540.39,234.486 1540.96,233.518 1541.53,232.652 1542.1,233.989 1542.66,231.909 1543.23,232.161 1543.8,236.494 1544.37,234.251 1544.94,233.116 1545.51,234.181 1546.08,233.98 1546.64,233.054 1547.21,235.21 1547.78,235.067 1548.35,235.993 1548.92,236.065 1549.49,236.894 1550.05,237.882 1550.62,236.686 1551.19,235.504 1551.76,235.531 1552.33,235.237 1552.9,233.983 1553.46,234.788 1554.03,234.683 1554.6,233.401 1555.17,232.328 1555.74,233.498 1556.31,233.325 1556.87,233.223 1557.44,231.132 1558.01,231.241 1558.58,231.363 1559.15,231.565 1559.72,231.667 1560.28,233.582 1560.85,235.531 1561.42,234.253 1561.99,232.865 1562.56,231.707 1563.13,232.527 1563.69,233.692 1564.26,233.689 1564.83,234.869 1565.4,232.724 1565.97,234.751 1566.54,232.638 1567.1,232.619 1567.67,233.535 1568.24,231.437 1568.81,232.451 1569.38,231.533 1569.95,232.552 1570.51,232.613 1571.08,232.622 1571.65,232.702 1572.22,230.633 1572.79,231.84 1573.36,235.17 1573.92,236.05 1574.49,232.695 1575.06,233.918 1575.63,234.952 1576.2,234.897 1576.77,234.657 1577.33,235.537 1577.9,235.432 1578.47,234.076 1579.04,234.066 1579.61,232.957 1580.18,233.25 1580.74,233.321 1581.31,232.176 1581.88,232.207 1582.45,231.216 1583.02,231.355 1583.59,230.414 1584.15,231.635 1584.72,232.623 1585.29,231.563 1585.86,232.576 1586.43,232.569 1587,230.612 1587.56,230.504 1588.13,227.625 1588.7,227.186 1589.27,225.786 1589.84,226.313 1590.41,225.931 1590.97,223.627 1591.54,225.426 1592.11,222.022 1592.68,224.981 1593.25,225.585 1593.82,227.352 1594.38,227.044 1594.95,230.663 1595.52,233.071 1596.09,233.006 1596.66,233.091 1597.23,234.073 1597.79,234.932 1598.36,235.791 1598.93,234.951 1599.5,238.037 1600.07,237.759 1600.64,237.548 1601.2,237.334 1601.77,240.253 1602.34,241.901 1602.91,242.479 1603.48,244.034 1604.05,242.443 1604.61,244.929 1605.18,243.134 1605.75,241.448 1606.32,240.84 1606.89,240.377 1607.46,241.946 1608.02,241.256 1608.59,240.622 1609.16,239.874 1609.73,238.252 1610.3,238.071 1610.87,236.419 1611.43,237.109 1612,237.904 1612.57,238.304 1613.14,237.848 1613.71,237.408 1614.28,235.957 1614.84,235.579 1615.41,234.267 1615.98,235.224 1616.55,235.16 1617.12,234.873 1617.69,232.535 1618.26,233.415 1618.82,233.14 1619.39,233.89 1619.96,234.502 1620.53,233.448 1621.1,232.347 1621.67,232.269 1622.23,232.092 1622.8,231.904 1623.37,230.789 1623.94,229.758 1624.51,228.751 1625.08,230.917 1625.64,231.854 1626.21,229.646 1626.78,231.837 1627.35,232.642 1627.92,233.466 1628.49,234.155 1629.05,233.825 1629.62,231.11 1630.19,229.952 1630.76,228.012 1631.33,228.469 1631.9,231.594 1632.46,231.65 1633.03,230.569 1633.6,230.634 1634.17,230.963 1634.74,233.143 1635.31,232.885 1635.87,233.832 1636.44,233.677 1637.01,233.494 1637.58,232.396 1638.15,233.399 1638.72,235.331 1639.28,234.042 1639.85,231.995 1640.42,230.805 1640.99,230.797 1641.56,227.688 1642.13,227.966 1642.69,227.299 1643.26,226.623 1643.83,228.048 1644.4,228.298 1644.97,231.801 1645.54,234.886 1646.1,234.763 1646.67,235.769 1647.24,234.247 1647.81,235.187 1648.38,234.991 1648.95,235.742 1649.51,235.356 1650.08,234.031 1650.65,232.953 1651.22,231.844 1651.79,232.999 1652.36,233.01 1652.92,230.767 1653.49,228.753 1654.06,228.899 1654.63,228.207 1655.2,230.531 1655.77,229.774 1656.33,229.856 1656.9,229.957 1657.47,233.108 1658.04,232.927 1658.61,232.882 1659.18,233.911 1659.74,233.878 1660.31,232.564 1660.88,233.701 1661.45,230.548 1662.02,231.786 1662.59,232.781 1663.15,231.646 1663.72,229.728 1664.29,230.058 1664.86,231.326 1665.43,232.36 1666,232.404 1666.56,232.476 1667.13,232.575 1667.7,231.686 1668.27,231.676 1668.84,230.852 1669.41,233.014 1669.97,233.972 1670.54,234.891 1671.11,235.741 1671.68,234.637 1672.25,233.402 1672.82,234.433 1673.38,234.319 1673.95,231.866 1674.52,230.981 1675.09,233.17 1675.66,232.01 1676.23,233.048 1676.79,233.028 1677.36,233.034 1677.93,233.233 1678.5,233.213 1679.07,231.883 1679.64,232.981 1680.2,232.97 1680.77,234.829 1681.34,234.548 1681.91,233.3 1682.48,233.126 1683.05,231.921 1683.61,235.103 1684.18,234.898 1684.75,235.917 1685.32,235.793 1685.89,235.527 1686.46,234.251 1687.02,233.997 1687.59,233.853 1688.16,233.71 1688.73,232.449 1689.3,232.54 1689.87,232.662 1690.44,234.627 1691,234.324 1691.57,237.256 1692.14,237.602 1692.71,237.386 1693.28,235.956 1693.85,234.565 1694.41,231.2 1694.98,230.364 1695.55,229.448 1696.12,227.8 1696.69,227.157 1697.26,226.386 1697.82,227.772 1698.39,228.119 1698.96,228.397 1699.53,227.573 1700.1,228.901 1700.67,229.34 1701.23,230.584 1701.8,228.711 1702.37,229.011 1702.94,228.328 1703.51,227.7 1704.08,228.937 1704.64,228.153 1705.21,229.65 1705.78,229.781 1706.35,223.843 1706.92,226.326 1707.49,228.625 1708.05,230.085 1708.62,229.224 1709.19,228.309 1709.76,229.654 1710.33,227.877 1710.9,226.049 1711.46,226.532 1712.03,225.053 1712.6,225.445 1713.17,225.905 1713.74,229.304 1714.31,226.706 1714.87,228.147 1715.44,229.331 1716.01,229.82 1716.58,227.989 1717.15,226.346 1717.72,226.997 1718.28,227.516 1718.85,229.275 1719.42,230.724 1719.99,232.091 1720.56,233.383 1721.13,234.353 1721.69,235.491 1722.26,235.531 1722.83,235.577 1723.4,235.368 1723.97,236.424 1724.54,236.401 1725.1,235.217 1725.67,235.359 1726.24,234.327 1726.81,236.295 1727.38,236.223 1727.95,234.966 1728.51,232.615 1729.08,232.761 1729.65,234.738 1730.22,230.463 1730.79,227.601 1731.36,229.139 1731.92,231.456 1732.49,231.746 1733.06,231.075 1733.63,232.315 1734.2,233.283 1734.77,236.355 1735.33,235.335 1735.9,237.318 1736.47,236.201 1737.04,235.926 1737.61,232.902 1738.18,231.158 1738.74,230.317 1739.31,231.443 1739.88,231.774 1740.45,233 1741.02,233.205 1741.59,234.334 1742.15,234.285 1742.72,232.168 1743.29,232.216 1743.86,232.48 1744.43,232.867 1745,234.014 1745.56,234.951 1746.13,235.838 1746.7,234.67 1747.27,234.742 1747.84,234.713 1748.41,237.682 1748.97,236.373 1749.54,235.162 1750.11,233.066 1750.68,232.033 1751.25,232.927 1751.82,235.247 1752.38,236.058 1752.95,235.811 1753.52,237.875 1754.09,238.728 1754.66,238.461 1755.23,236.258 1755.79,235.895 1756.36,237.676 1756.93,238.372 1757.5,239.17 1758.07,237.547 1758.64,237.194 1759.21,235.792 1759.77,235.412 1760.34,233.142 1760.91,233.138 1761.48,231.159 1762.05,233.287 1762.62,232.067 1763.18,233.99 1763.75,233.771 1764.32,232.69 1764.89,233.665 1765.46,232.722 1766.03,235.729 1766.59,232.619 1767.16,231.582 1767.73,229.616 1768.3,228.876 1768.87,226.051 1769.44,226.642 1770,229.099 1770.57,228.385 1771.14,230.605 1771.71,231.555 1772.28,232.459 1772.85,232.704 1773.41,232.692 1773.98,236.823 1774.55,237.718 1775.12,236.291 1775.69,237.072 1776.26,236.662 1776.82,235.478 1777.39,234.269 1777.96,232.28 1778.53,232.265 1779.1,231.355 1779.67,234.623 1780.23,233.243 1780.8,233.345 1781.37,231.203 1781.94,230.503 1782.51,228.57 1783.08,228.621 1783.64,229.116 1784.21,227.374 1784.78,229.574 1785.35,229.857 1785.92,231.194 1786.49,231.389 1787.05,235.393 1787.62,235.27 1788.19,237.442 1788.76,238.063 1789.33,238.583 1789.9,237.041 1790.46,237.619 1791.03,240.438 1791.6,236.715 1792.17,235.429 1792.74,234.207 1793.31,231.877 1793.87,231.845 1794.44,231.705 1795.01,231.834 1795.58,232.788 1796.15,232.669 1796.72,233.746 1797.28,233.581 1797.85,232.403 1798.42,231.275 1798.99,232.343 1799.56,232.281 1800.13,235.694 1800.69,235.572 1801.26,236.417 1801.83,235.183 1802.4,234.807 1802.97,234.522 1803.54,235.278 1804.1,234.012 1804.67,234.993 1805.24,234.699 1805.81,234.472 1806.38,235.259 1806.95,235.026 1807.51,235.992 1808.08,236.551 1808.65,235.292 1809.22,234.998 1809.79,236.737 1810.36,234.174 1810.92,232.871 1811.49,233.879 1812.06,236.996 1812.63,235.628 1813.2,232.198 1813.77,229.189 1814.33,227.218 1814.9,227.715 1815.47,226.812 1816.04,227.145 1816.61,227.35 1817.18,227.574 1817.74,226.664 1818.31,229.064 1818.88,229.299 1819.45,229.569 1820.02,229.652 1820.59,228.905 1821.15,231.334 1821.72,231.325 1822.29,229.338 1822.86,228.649 1823.43,228.034 1824,227.393 1824.56,227.722 1825.13,227.141 1825.7,228.876 1826.27,228.002 1826.84,226.31 1827.41,226.731 1827.97,225.993 1828.54,229.565 1829.11,229.707 1829.68,229.962 1830.25,232.187 1830.82,232.39 1831.39,233.353 1831.95,233.352 1832.52,237.355 1833.09,236.293 1833.66,237.024 1834.23,235.791 1834.8,235.468 1835.36,235.178 1835.93,234.846 1836.5,235.832 1837.07,237.54 1837.64,234.019 1838.21,234.081 1838.77,234.891 1839.34,234.755 1839.91,231.474 1840.48,232.717 1841.05,234.714 1841.62,234.437 1842.18,234.087 1842.75,233.778 1843.32,232.474 1843.89,231.532 1844.46,232.644 1845.03,232.738 1845.59,233.648 1846.16,232.544 1846.73,233.734 1847.3,232.686 1847.87,230.792 1848.44,231.173 1849,232.221 1849.57,232.466 1850.14,233.468 1850.71,233.272 1851.28,234.357 1851.85,234.342 1852.41,231.148 1852.98,232.353 1853.55,233.357 1854.12,235.362 1854.69,234.132 1855.26,236.262 1855.82,235.798 1856.39,236.581 1856.96,237.23 1857.53,239.015 1858.1,237.56 1858.67,237.08 1859.23,236.483 1859.8,236.072 1860.37,233.553 1860.94,235.299 1861.51,233.945 1862.08,234.933 1862.64,235.781 1863.21,234.586 1863.78,234.398 1864.35,233.005 1864.92,232.947 1865.49,231.815 1866.05,232.807 1866.62,233.586 1867.19,229.426 1867.76,229.43 1868.33,229.66 1868.9,228.628 1869.46,228.835 1870.03,229.831 1870.6,229.768 1871.17,230.016 1871.74,230.083 1872.31,233.346 1872.87,232.258 1873.44,232.189 1874.01,232.158 1874.58,233.18 1875.15,234.031 1875.72,233.917 1876.28,234.614 1876.85,234.306 1877.42,231.931 1877.99,231.042 1878.56,231.069 1879.13,229.216 1879.69,228.118 1880.26,230.745 1880.83,231.806 1881.4,227.615 1881.97,226.753 1882.54,227.177 1883.1,228.372 1883.67,229.754 1884.24,226.907 1884.81,226.244 1885.38,226.916 1885.95,227.281 1886.51,225.564 1887.08,227.211 1887.65,228.849 1888.22,230.141 1888.79,230.401 1889.36,229.591 1889.92,229.917 1890.49,231.367 1891.06,233.467 1891.63,233.446 1892.2,233.346 1892.77,233.313 1893.33,233.433 1893.9,232.448 1894.47,231.401 1895.04,231.612 1895.61,230.711 1896.18,231.027 1896.74,230.32 1897.31,232.601 1897.88,234.77 1898.45,232.922 1899.02,232.244 1899.59,234.242 1900.16,235.21 1900.72,235.032 1901.29,236.193 1901.86,234.655 1902.43,233.683 1903,233.621 1903.57,233.537 1904.13,233.456 1904.7,233.362 1905.27,232.367 1905.84,232.416 1906.41,233.523 1906.98,231.325 1907.54,231.369 1908.11,231.53 1908.68,234.973 1909.25,233.846 1909.82,235.721 1910.39,235.562 1910.95,234.573 1911.52,233.341 1912.09,233.303 1912.66,231.124 1913.23,232.075 1913.8,233.296 1914.36,233.213 1914.93,234.518 1915.5,235.385 1916.07,239.304 1916.64,241.814 1917.21,239.165 1917.77,239.817 1918.34,240.16 1918.91,239.619 1919.48,240.935 1920.05,239.123 1920.62,235.461 1921.18,234.399 1921.75,234.114 1922.32,233.875 1922.89,232.68 1923.46,232.454 1924.03,231.562 1924.59,231.283 1925.16,230.205 1925.73,230.418 1926.3,230.492 1926.87,231.862 1927.44,233.118 1928,232.16 1928.57,236.08 1929.14,235.936 1929.71,234.716 1930.28,233.567 1930.85,233.312 1931.41,231.237 1931.98,231.288 1932.55,234.404 1933.12,234.325 1933.69,232.291 1934.26,232.087 1934.82,232.07 1935.39,231.026 1935.96,233.063 1936.53,233.115 1937.1,230.009 1937.67,228.031 1938.23,230.45 1938.8,229.646 1939.37,229.803 1939.94,231.085 1940.51,230.999 1941.08,231.158 1941.64,231.523 1942.21,232.757 1942.78,231.774 1943.35,232.741 1943.92,232.796 1944.49,232.841 1945.05,231.847 1945.62,232.693 1946.19,230.525 1946.76,229.388 1947.33,229.555 1947.9,230.146 1948.46,231.183 1949.03,231.128 1949.6,232.002 1950.17,233.061 1950.74,232.935 1951.31,232.002 1951.87,231.083 1952.44,232.38 1953.01,233.566 1953.58,233.525 1954.15,232.479 1954.72,232.524 1955.28,234.48 1955.85,233.327 1956.42,236.139 1956.99,236.042 1957.56,239.98 1958.13,239.539 1958.69,239.98 1959.26,238.369 1959.83,236.816 1960.4,235.327 1960.97,234.97 1961.54,232.773 1962.1,232.406 1962.67,232.33 1963.24,230.405 1963.81,229.261 1964.38,229.471 1964.95,229.88 1965.51,229.869 1966.08,230.921 1966.65,228.959 1967.22,228.076 1967.79,231.474 1968.36,231.722 1968.92,233.945 1969.49,233.825 1970.06,234.643 1970.63,232.505 1971.2,233.425 1971.77,232.362 1972.34,230.243 1972.9,230.501 1973.47,231.708 1974.04,233.784 1974.61,233.687 1975.18,233.394 1975.75,234.447 1976.31,234.236 1976.88,233.076 1977.45,235.251 1978.02,234.083 1978.59,233.834 1979.16,233.631 1979.72,234.592 1980.29,233.31 1980.86,232.33 1981.43,230.361 1982,230.415 1982.57,231.661 1983.13,230.523 1983.7,233.983 1984.27,234.07 1984.84,234.797 1985.41,236.816 1985.98,235.503 1986.54,235.158 1987.11,232.996 1987.68,232.832 1988.25,233.872 1988.82,232.693 1989.39,233.684 1989.95,234.29 1990.52,236.235 1991.09,236.99 1991.66,237.705 1992.23,235.318 1992.8,234.257 1993.36,234.976 1993.93,235.766 1994.5,237.393 1995.07,236.068 1995.64,235.428 1996.21,235.048 1996.77,232.565 1997.34,230.344 1997.91,230.254 1998.48,232.178 1999.05,233.063 1999.62,234.001 2000.18,235.001 2000.75,234.852 2001.32,234.405 2001.89,234.21 2002.46,234.067 2003.03,234.114 2003.59,233.736 2004.16,234.474 2004.73,232.256 2005.3,232.322 2005.87,234.63 2006.44,233.632 2007,232.333 2007.57,231.291 2008.14,230.131 2008.71,230.327 2009.28,230.569 2009.85,230.746 2010.41,230.819 2010.98,229.793 2011.55,231.017 2012.12,231.083 2012.69,227.951 2013.26,227.218 2013.82,228.555 2014.39,231.105 2014.96,229.96 2015.53,230.27 2016.1,228.347 2016.67,230.658 2017.23,228.715 2017.8,228.937 2018.37,230.081 2018.94,228.99 2019.51,230.239 2020.08,230.429 2020.64,231.52 2021.21,227.402 2021.78,227.699 2022.35,227.933 2022.92,231.387 2023.49,234.311 2024.05,232.035 2024.62,232.277 2025.19,233.352 2025.76,231.947 2026.33,231.943 2026.9,232.964 2027.46,233.821 2028.03,236.798 2028.6,236.326 2029.17,231.932 2029.74,230.956 2030.31,231.099 2030.87,231.252 2031.44,231.291 2032.01,232.498 2032.58,233.346 2033.15,234.429 2033.72,232.297 2034.28,232.526 2034.85,232.805 2035.42,231.773 2035.99,231.667 2036.56,230.651 2037.13,230.791 2037.69,229.57 2038.26,228.754 2038.83,228.981 2039.4,229.144 2039.97,234.322 2040.54,233.977 2041.11,230.844 2041.67,230.188 2042.24,231.275 2042.81,231.397 2043.38,231.685 2043.95,231.838 2044.52,232.936 2045.08,231.949 2045.65,233.095 2046.22,233.12 2046.79,231.922 2047.36,233.885 2047.93,230.739 2048.49,228.97 2049.06,229.287 2049.63,228.642 2050.2,228.846 2050.77,224.822 2051.34,224.409 2051.9,224.991 2052.47,224.465 2053.04,227.149 2053.61,226.715 2054.18,225.072 2054.75,225.808 2055.31,225.225 2055.88,225.911 2056.45,226.354 2057.02,226.856 2057.59,229.298 2058.16,228.524 2058.72,227.792 2059.29,228.245 2059.86,229.661 2060.43,228.912 2061,231.237 2061.57,229.48 2062.13,231.728 2062.7,230.645 2063.27,233.011 2063.84,233.063 2064.41,235.131 2064.98,236.037 2065.54,235.93 2066.11,235.772 2066.68,235.679 2067.25,235.455 2067.82,234.155 2068.39,234.489 2068.95,232.237 2069.52,233.294 2070.09,233.493 2070.66,234.672 2071.23,235.659 2071.8,239.814 2072.36,239.487 2072.93,237.964 2073.5,237.788 2074.07,238.513 2074.64,238.154 2075.21,238.689 2075.77,238.283 2076.34,235.671 2076.91,234.479 2077.48,232.277 2078.05,232.529 2078.62,231.456 2079.18,232.66 2079.75,230.596 2080.32,231.447 2080.89,231.71 2081.46,231.898 2082.03,232.025 2082.59,232.063 2083.16,233.51 2083.73,233.408 2084.3,232.351 2084.87,232.326 2085.44,232.457 2086,232.845 2086.57,235.748 2087.14,235.455 2087.71,236.213 2088.28,235.957 2088.85,236.766 2089.41,236.523 2089.98,235.224 2090.55,234.907 2091.12,231.776 2091.69,230.015 2092.26,230.296 2092.82,229.481 2093.39,227.743 2093.96,227.183 2094.53,226.781 2095.1,226.369 2095.67,228.168 2096.23,228.357 2096.8,228.791 2097.37,230.289 2097.94,230.413 2098.51,230.414 2099.08,229.63 2099.64,229.731 2100.21,228.926 2100.78,231.166 2101.35,230.275 2101.92,231.692 2102.49,234.042 2103.05,233.772 2103.62,233.861 2104.19,235.788 2104.76,234.698 2105.33,235.575 2105.9,238.168 2106.46,238.937 2107.03,238.759 2107.6,238.405 2108.17,238.161 2108.74,236.781 2109.31,238.516 2109.87,234.965 2110.44,233.751 2111.01,233.781 2111.58,233.583 2112.15,233.815 2112.72,233.744 2113.29,232.56 2113.85,234.587 2114.42,234.46 2114.99,234.414 2115.56,234.266 2116.13,233.17 2116.7,233.384 2117.26,233.388 2117.83,234.168 2118.4,235.973 2118.97,236.993 2119.54,236.513 2120.11,237.241 2120.67,237.971 2121.24,235.575 2121.81,236.305 2122.38,234.949 2122.95,234.772 2123.52,236.796 2124.08,234.518 2124.65,233.262 2125.22,236.316 2125.79,235.076 2126.36,234.934 2126.93,235.638 2127.49,237.5 2128.06,235.917 2128.63,234.474 2129.2,235.354 2129.77,235.99 2130.34,235.753 2130.9,235.569 2131.47,237.296 2132.04,235.775 2132.61,235.588 2133.18,237.375 2133.75,235.861 2134.31,233.513 2134.88,232.279 2135.45,232.297 2136.02,233.38 2136.59,233.26 2137.16,232.221 2137.72,233.474 2138.29,233.455 2138.86,233.352 2139.43,233.224 2140,232.08 2140.57,232.223 2141.13,230.112 2141.7,230.309 2142.27,229.537 2142.84,229.644 2143.41,228.853 2143.98,230.258 2144.54,232.304 2145.11,231.247 2145.68,232.321 2146.25,234.423 2146.82,233.323 2147.39,232.343 2147.95,233.403 2148.52,234.316 2149.09,235.238 2149.66,232.706 2150.23,232.615 2150.8,233.824 2151.36,232.566 2151.93,230.703 2152.5,232.792 2153.07,231.738 2153.64,232.063 2154.21,232.999 2154.77,234.188 2155.34,232.985 2155.91,234.181 2156.48,234.995 2157.05,232.767 2157.62,230.636 2158.18,228.769 2158.75,229.249 2159.32,229.566 2159.89,229.798 \"/>\n<path clip-path=\"url(#clip120)\" d=\"M1625.75 1245.03 L2150.8 1245.03 L2150.8 1089.51 L1625.75 1089.51  Z\" fill=\"#ffffff\" fill-rule=\"evenodd\" fill-opacity=\"1\"/>\n<polyline clip-path=\"url(#clip120)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"1625.75,1245.03 2150.8,1245.03 2150.8,1089.51 1625.75,1089.51 1625.75,1245.03 \"/>\n<polyline clip-path=\"url(#clip120)\" style=\"stroke:#e26f46; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" stroke-dasharray=\"16, 10\" points=\"1645.83,1141.35 1766.28,1141.35 \"/>\n<path clip-path=\"url(#clip120)\" d=\"M1793.76 1125.34 L1793.76 1132.71 L1802.53 1132.71 L1802.53 1136.02 L1793.76 1136.02 L1793.76 1150.09 Q1793.76 1153.26 1794.61 1154.16 Q1795.49 1155.07 1798.16 1155.07 L1802.53 1155.07 L1802.53 1158.63 L1798.16 1158.63 Q1793.23 1158.63 1791.35 1156.8 Q1789.48 1154.95 1789.48 1150.09 L1789.48 1136.02 L1786.35 1136.02 L1786.35 1132.71 L1789.48 1132.71 L1789.48 1125.34 L1793.76 1125.34 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip120)\" d=\"M1819.92 1145.6 Q1814.75 1145.6 1812.76 1146.78 Q1810.77 1147.96 1810.77 1150.81 Q1810.77 1153.08 1812.25 1154.42 Q1813.76 1155.74 1816.33 1155.74 Q1819.87 1155.74 1822 1153.24 Q1824.15 1150.72 1824.15 1146.55 L1824.15 1145.6 L1819.92 1145.6 M1828.41 1143.84 L1828.41 1158.63 L1824.15 1158.63 L1824.15 1154.7 Q1822.69 1157.06 1820.52 1158.19 Q1818.34 1159.3 1815.19 1159.3 Q1811.21 1159.3 1808.85 1157.08 Q1806.51 1154.84 1806.51 1151.09 Q1806.51 1146.71 1809.43 1144.49 Q1812.37 1142.27 1818.18 1142.27 L1824.15 1142.27 L1824.15 1141.85 Q1824.15 1138.91 1822.21 1137.31 Q1820.29 1135.69 1816.79 1135.69 Q1814.57 1135.69 1812.46 1136.22 Q1810.36 1136.76 1808.41 1137.82 L1808.41 1133.89 Q1810.75 1132.98 1812.95 1132.54 Q1815.15 1132.08 1817.23 1132.08 Q1822.86 1132.08 1825.63 1135 Q1828.41 1137.91 1828.41 1143.84 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip120)\" d=\"M1852.21 1136.69 Q1851.49 1136.27 1850.63 1136.09 Q1849.8 1135.88 1848.78 1135.88 Q1845.17 1135.88 1843.23 1138.24 Q1841.3 1140.58 1841.3 1144.97 L1841.3 1158.63 L1837.02 1158.63 L1837.02 1132.71 L1841.3 1132.71 L1841.3 1136.73 Q1842.65 1134.37 1844.8 1133.24 Q1846.95 1132.08 1850.03 1132.08 Q1850.47 1132.08 1851 1132.15 Q1851.54 1132.2 1852.18 1132.31 L1852.21 1136.69 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip120)\" d=\"M1872.9 1145.37 Q1872.9 1140.74 1870.98 1138.19 Q1869.08 1135.65 1865.63 1135.65 Q1862.21 1135.65 1860.29 1138.19 Q1858.39 1140.74 1858.39 1145.37 Q1858.39 1149.97 1860.29 1152.52 Q1862.21 1155.07 1865.63 1155.07 Q1869.08 1155.07 1870.98 1152.52 Q1872.9 1149.97 1872.9 1145.37 M1877.16 1155.41 Q1877.16 1162.03 1874.22 1165.25 Q1871.28 1168.49 1865.22 1168.49 Q1862.97 1168.49 1860.98 1168.15 Q1858.99 1167.82 1857.11 1167.13 L1857.11 1162.98 Q1858.99 1164 1860.82 1164.49 Q1862.65 1164.97 1864.54 1164.97 Q1868.73 1164.97 1870.82 1162.78 Q1872.9 1160.6 1872.9 1156.18 L1872.9 1154.07 Q1871.58 1156.36 1869.52 1157.5 Q1867.46 1158.63 1864.59 1158.63 Q1859.82 1158.63 1856.91 1155 Q1853.99 1151.36 1853.99 1145.37 Q1853.99 1139.35 1856.91 1135.72 Q1859.82 1132.08 1864.59 1132.08 Q1867.46 1132.08 1869.52 1133.22 Q1871.58 1134.35 1872.9 1136.64 L1872.9 1132.71 L1877.16 1132.71 L1877.16 1155.41 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip120)\" d=\"M1908.11 1144.6 L1908.11 1146.69 L1888.53 1146.69 Q1888.8 1151.09 1891.17 1153.4 Q1893.55 1155.69 1897.79 1155.69 Q1900.24 1155.69 1902.53 1155.09 Q1904.85 1154.49 1907.11 1153.28 L1907.11 1157.31 Q1904.82 1158.28 1902.42 1158.79 Q1900.01 1159.3 1897.53 1159.3 Q1891.33 1159.3 1887.69 1155.69 Q1884.08 1152.08 1884.08 1145.92 Q1884.08 1139.56 1887.51 1135.83 Q1890.96 1132.08 1896.79 1132.08 Q1902.02 1132.08 1905.05 1135.46 Q1908.11 1138.82 1908.11 1144.6 M1903.85 1143.35 Q1903.8 1139.86 1901.88 1137.78 Q1899.98 1135.69 1896.84 1135.69 Q1893.27 1135.69 1891.12 1137.71 Q1888.99 1139.72 1888.67 1143.38 L1903.85 1143.35 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip120)\" d=\"M1919.31 1125.34 L1919.31 1132.71 L1928.09 1132.71 L1928.09 1136.02 L1919.31 1136.02 L1919.31 1150.09 Q1919.31 1153.26 1920.17 1154.16 Q1921.05 1155.07 1923.71 1155.07 L1928.09 1155.07 L1928.09 1158.63 L1923.71 1158.63 Q1918.78 1158.63 1916.91 1156.8 Q1915.03 1154.95 1915.03 1150.09 L1915.03 1136.02 L1911.91 1136.02 L1911.91 1132.71 L1915.03 1132.71 L1915.03 1125.34 L1919.31 1125.34 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip120)\" d=\"M1953.39 1166.5 L1953.39 1169.81 L1928.76 1169.81 L1928.76 1166.5 L1953.39 1166.5 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip120)\" d=\"M1954.91 1132.71 L1959.17 1132.71 L1964.5 1152.94 L1969.8 1132.71 L1974.82 1132.71 L1980.15 1152.94 L1985.45 1132.71 L1989.71 1132.71 L1982.92 1158.63 L1977.9 1158.63 L1972.32 1137.38 L1966.72 1158.63 L1961.7 1158.63 L1954.91 1132.71 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip120)\" d=\"M2007.95 1145.6 Q2002.78 1145.6 2000.79 1146.78 Q1998.8 1147.96 1998.8 1150.81 Q1998.8 1153.08 2000.28 1154.42 Q2001.79 1155.74 2004.36 1155.74 Q2007.9 1155.74 2010.03 1153.24 Q2012.18 1150.72 2012.18 1146.55 L2012.18 1145.6 L2007.95 1145.6 M2016.44 1143.84 L2016.44 1158.63 L2012.18 1158.63 L2012.18 1154.7 Q2010.72 1157.06 2008.55 1158.19 Q2006.37 1159.3 2003.22 1159.3 Q1999.24 1159.3 1996.88 1157.08 Q1994.54 1154.84 1994.54 1151.09 Q1994.54 1146.71 1997.46 1144.49 Q2000.4 1142.27 2006.21 1142.27 L2012.18 1142.27 L2012.18 1141.85 Q2012.18 1138.91 2010.24 1137.31 Q2008.32 1135.69 2004.82 1135.69 Q2002.6 1135.69 2000.49 1136.22 Q1998.39 1136.76 1996.44 1137.82 L1996.44 1133.89 Q1998.78 1132.98 2000.98 1132.54 Q2003.18 1132.08 2005.26 1132.08 Q2010.89 1132.08 2013.66 1135 Q2016.44 1137.91 2016.44 1143.84 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip120)\" d=\"M2025.22 1122.61 L2029.47 1122.61 L2029.47 1158.63 L2025.22 1158.63 L2025.22 1122.61 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip120)\" d=\"M2038.22 1122.61 L2042.51 1122.61 L2042.51 1143.89 L2055.22 1132.71 L2060.65 1132.71 L2046.91 1144.84 L2061.23 1158.63 L2055.68 1158.63 L2042.51 1145.97 L2042.51 1158.63 L2038.22 1158.63 L2038.22 1122.61 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip120)\" d=\"M2086.33 1144.6 L2086.33 1146.69 L2066.74 1146.69 Q2067.02 1151.09 2069.38 1153.4 Q2071.77 1155.69 2076 1155.69 Q2078.46 1155.69 2080.75 1155.09 Q2083.06 1154.49 2085.33 1153.28 L2085.33 1157.31 Q2083.04 1158.28 2080.63 1158.79 Q2078.22 1159.3 2075.75 1159.3 Q2069.54 1159.3 2065.91 1155.69 Q2062.3 1152.08 2062.3 1145.92 Q2062.3 1139.56 2065.72 1135.83 Q2069.17 1132.08 2075.01 1132.08 Q2080.24 1132.08 2083.27 1135.46 Q2086.33 1138.82 2086.33 1144.6 M2082.07 1143.35 Q2082.02 1139.86 2080.1 1137.78 Q2078.2 1135.69 2075.05 1135.69 Q2071.49 1135.69 2069.34 1137.71 Q2067.21 1139.72 2066.88 1143.38 L2082.07 1143.35 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip120)\" d=\"M2108.34 1136.69 Q2107.62 1136.27 2106.77 1136.09 Q2105.93 1135.88 2104.91 1135.88 Q2101.3 1135.88 2099.36 1138.24 Q2097.44 1140.58 2097.44 1144.97 L2097.44 1158.63 L2093.15 1158.63 L2093.15 1132.71 L2097.44 1132.71 L2097.44 1136.73 Q2098.78 1134.37 2100.93 1133.24 Q2103.09 1132.08 2106.16 1132.08 Q2106.6 1132.08 2107.14 1132.15 Q2107.67 1132.2 2108.32 1132.31 L2108.34 1136.69 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip120)\" d=\"M2129.34 1133.47 L2129.34 1137.5 Q2127.53 1136.57 2125.59 1136.11 Q2123.64 1135.65 2121.56 1135.65 Q2118.39 1135.65 2116.79 1136.62 Q2115.21 1137.59 2115.21 1139.53 Q2115.21 1141.02 2116.35 1141.87 Q2117.48 1142.71 2120.91 1143.47 L2122.37 1143.79 Q2126.9 1144.77 2128.8 1146.55 Q2130.72 1148.31 2130.72 1151.48 Q2130.72 1155.09 2127.85 1157.2 Q2125.01 1159.3 2120.01 1159.3 Q2117.92 1159.3 2115.65 1158.89 Q2113.41 1158.49 2110.91 1157.68 L2110.91 1153.28 Q2113.27 1154.51 2115.56 1155.14 Q2117.85 1155.74 2120.1 1155.74 Q2123.11 1155.74 2124.73 1154.72 Q2126.35 1153.68 2126.35 1151.8 Q2126.35 1150.07 2125.17 1149.14 Q2124.01 1148.22 2120.05 1147.36 L2118.57 1147.01 Q2114.61 1146.18 2112.85 1144.47 Q2111.09 1142.73 2111.09 1139.72 Q2111.09 1136.06 2113.69 1134.07 Q2116.28 1132.08 2121.05 1132.08 Q2123.41 1132.08 2125.49 1132.43 Q2127.58 1132.78 2129.34 1133.47 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><polyline clip-path=\"url(#clip120)\" style=\"stroke:#009af9; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"1645.83,1193.19 1766.28,1193.19 \"/>\n<path clip-path=\"url(#clip120)\" d=\"M1808.06 1194.82 L1808.06 1210.47 L1803.8 1210.47 L1803.8 1194.96 Q1803.8 1191.28 1802.37 1189.45 Q1800.93 1187.62 1798.06 1187.62 Q1794.61 1187.62 1792.62 1189.82 Q1790.63 1192.02 1790.63 1195.82 L1790.63 1210.47 L1786.35 1210.47 L1786.35 1184.55 L1790.63 1184.55 L1790.63 1188.57 Q1792.16 1186.24 1794.22 1185.08 Q1796.3 1183.92 1799.01 1183.92 Q1803.48 1183.92 1805.77 1186.7 Q1808.06 1189.45 1808.06 1194.82 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip120)\" d=\"M1826.61 1187.53 Q1823.18 1187.53 1821.19 1190.22 Q1819.2 1192.88 1819.2 1197.53 Q1819.2 1202.18 1821.17 1204.87 Q1823.16 1207.53 1826.61 1207.53 Q1830.01 1207.53 1832 1204.85 Q1833.99 1202.16 1833.99 1197.53 Q1833.99 1192.93 1832 1190.24 Q1830.01 1187.53 1826.61 1187.53 M1826.61 1183.92 Q1832.16 1183.92 1835.33 1187.53 Q1838.5 1191.14 1838.5 1197.53 Q1838.5 1203.9 1835.33 1207.53 Q1832.16 1211.14 1826.61 1211.14 Q1821.03 1211.14 1817.86 1207.53 Q1814.71 1203.9 1814.71 1197.53 Q1814.71 1191.14 1817.86 1187.53 Q1821.03 1183.92 1826.61 1183.92 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip120)\" d=\"M1860.59 1188.53 Q1859.87 1188.11 1859.01 1187.93 Q1858.18 1187.72 1857.16 1187.72 Q1853.55 1187.72 1851.61 1190.08 Q1849.68 1192.42 1849.68 1196.81 L1849.68 1210.47 L1845.4 1210.47 L1845.4 1184.55 L1849.68 1184.55 L1849.68 1188.57 Q1851.03 1186.21 1853.18 1185.08 Q1855.33 1183.92 1858.41 1183.92 Q1858.85 1183.92 1859.38 1183.99 Q1859.92 1184.04 1860.56 1184.15 L1860.59 1188.53 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip120)\" d=\"M1884.41 1189.52 Q1886 1186.65 1888.23 1185.29 Q1890.45 1183.92 1893.46 1183.92 Q1897.51 1183.92 1899.71 1186.77 Q1901.91 1189.59 1901.91 1194.82 L1901.91 1210.47 L1897.62 1210.47 L1897.62 1194.96 Q1897.62 1191.24 1896.3 1189.43 Q1894.98 1187.62 1892.28 1187.62 Q1888.97 1187.62 1887.04 1189.82 Q1885.12 1192.02 1885.12 1195.82 L1885.12 1210.47 L1880.84 1210.47 L1880.84 1194.96 Q1880.84 1191.21 1879.52 1189.43 Q1878.2 1187.62 1875.45 1187.62 Q1872.18 1187.62 1870.26 1189.85 Q1868.34 1192.05 1868.34 1195.82 L1868.34 1210.47 L1864.06 1210.47 L1864.06 1184.55 L1868.34 1184.55 L1868.34 1188.57 Q1869.8 1186.19 1871.84 1185.06 Q1873.87 1183.92 1876.67 1183.92 Q1879.5 1183.92 1881.47 1185.36 Q1883.46 1186.79 1884.41 1189.52 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /></svg>\n","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"After an initial equilibriation period, the norm fluctuates around the target number of walkers.","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"Now, let's look at using the shift to estimate the ground state energy of H. The mean of the shift is a useful estimator of the energy. Calculating the error bars is a bit more involved as autocorrelations have to be removed from the time series. This can be done with the function shift_estimator, which performs a blocking analysis on the shift column of the dataframe.","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"se = shift_estimator(df; skip=steps_equilibrate)","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"BlockingResult{Float64}\n  mean = -4.022 ± 0.019\n  with uncertainty of ± 0.001224823351641801\n  from 125 blocks after 4 transformations (k = 5).\n","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"Here, se contains the calculated mean and standard errors of the shift, as well as some additional information related to the blocking analysis.","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"Computing the error of the projected energy is a bit more complicated, as it's a ratio of fluctuating variables contained in the hproj and vproj columns in the dataframe. Thankfully, the complications are handled by the function projected_energy.","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"pe = projected_energy(df; skip=steps_equilibrate)","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"RatioBlockingResult{Float64,MonteCarloMeasurements.Particles{Float64, 2000}}\n  ratio = -4.01359 ± (0.00258135, 0.0023904) (MC)\n  95% confidence interval: [-4.01854, -4.00861]) (MC)\n  linear error propagation: -4.01349 ± 0.00251343\n  |δ_y| = |0.00142699| (≤ 0.1 for normal approx)\n  Blocking successful with 31 blocks after 6 transformations (k = 7).\n","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"The result is a ratio distribution. We extract its median and the edges of the 95% confidence interval.","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"v = val_and_errs(pe; p=0.95)","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"(val = -4.013592298099001, val_l = 0.004948930769668181, val_u = 0.004981827597569044)","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"Let's visualise these estimators together with the time series of the shift.","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"plot(df.step, df.shift, ylabel=\"energy\", xlabel=\"step\", label=\"shift\", margin = 1Plots.cm)\n\nplot!(x->se.mean, df.step[steps_equilibrate+1:end], ribbon=se.err, label=\"shift mean\")\nplot!(\n    x -> v.val, df.step[steps_equilibrate+1:end], ribbon=(v.val_l,v.val_u),\n    label=\"projected energy\",\n)\nlens!([steps_equilibrate, last_step], [-5.1, -2.9]; inset=(1, bbox(0.2, 0.25, 0.6, 0.4)))","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"<?xml version=\"1.0\" encoding=\"utf-8\"?>\n<svg xmlns=\"http://www.w3.org/2000/svg\" xmlns:xlink=\"http://www.w3.org/1999/xlink\" width=\"600\" height=\"400\" viewBox=\"0 0 2400 1600\">\n<defs>\n  <clipPath id=\"clip150\">\n    <rect x=\"0\" y=\"0\" width=\"2400\" height=\"1600\"/>\n  </clipPath>\n</defs>\n<path clip-path=\"url(#clip150)\" d=\"M0 1600 L2400 1600 L2400 0 L0 0  Z\" fill=\"#ffffff\" fill-rule=\"evenodd\" fill-opacity=\"1\"/>\n<defs>\n  <clipPath id=\"clip151\">\n    <rect x=\"480\" y=\"0\" width=\"1681\" height=\"1600\"/>\n  </clipPath>\n</defs>\n<path clip-path=\"url(#clip150)\" d=\"M346.853 1281.45 L2211.02 1281.45 L2211.02 188.976 L346.853 188.976  Z\" fill=\"#ffffff\" fill-rule=\"evenodd\" fill-opacity=\"1\"/>\n<defs>\n  <clipPath id=\"clip152\">\n    <rect x=\"346\" y=\"188\" width=\"1865\" height=\"1093\"/>\n  </clipPath>\n</defs>\n<polyline clip-path=\"url(#clip152)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:2; stroke-opacity:0.1; fill:none\" points=\"399.026,1281.45 399.026,188.976 \"/>\n<polyline clip-path=\"url(#clip152)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:2; stroke-opacity:0.1; fill:none\" points=\"985.439,1281.45 985.439,188.976 \"/>\n<polyline clip-path=\"url(#clip152)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:2; stroke-opacity:0.1; fill:none\" points=\"1571.85,1281.45 1571.85,188.976 \"/>\n<polyline clip-path=\"url(#clip152)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:2; stroke-opacity:0.1; fill:none\" points=\"2158.26,1281.45 2158.26,188.976 \"/>\n<polyline clip-path=\"url(#clip150)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"346.853,1281.45 2211.02,1281.45 \"/>\n<polyline clip-path=\"url(#clip150)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"399.026,1281.45 399.026,1262.55 \"/>\n<polyline clip-path=\"url(#clip150)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"985.439,1281.45 985.439,1262.55 \"/>\n<polyline clip-path=\"url(#clip150)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"1571.85,1281.45 1571.85,1262.55 \"/>\n<polyline clip-path=\"url(#clip150)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"2158.26,1281.45 2158.26,1262.55 \"/>\n<path clip-path=\"url(#clip150)\" d=\"M399.026 1312.37 Q395.415 1312.37 393.587 1315.93 Q391.781 1319.47 391.781 1326.6 Q391.781 1333.71 393.587 1337.27 Q395.415 1340.82 399.026 1340.82 Q402.661 1340.82 404.466 1337.27 Q406.295 1333.71 406.295 1326.6 Q406.295 1319.47 404.466 1315.93 Q402.661 1312.37 399.026 1312.37 M399.026 1308.66 Q404.837 1308.66 407.892 1313.27 Q410.971 1317.85 410.971 1326.6 Q410.971 1335.33 407.892 1339.94 Q404.837 1344.52 399.026 1344.52 Q393.216 1344.52 390.138 1339.94 Q387.082 1335.33 387.082 1326.6 Q387.082 1317.85 390.138 1313.27 Q393.216 1308.66 399.026 1308.66 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip150)\" d=\"M929.965 1339.91 L937.604 1339.91 L937.604 1313.55 L929.293 1315.21 L929.293 1310.95 L937.557 1309.29 L942.233 1309.29 L942.233 1339.91 L949.872 1339.91 L949.872 1343.85 L929.965 1343.85 L929.965 1339.91 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip150)\" d=\"M969.316 1312.37 Q965.705 1312.37 963.877 1315.93 Q962.071 1319.47 962.071 1326.6 Q962.071 1333.71 963.877 1337.27 Q965.705 1340.82 969.316 1340.82 Q972.951 1340.82 974.756 1337.27 Q976.585 1333.71 976.585 1326.6 Q976.585 1319.47 974.756 1315.93 Q972.951 1312.37 969.316 1312.37 M969.316 1308.66 Q975.127 1308.66 978.182 1313.27 Q981.261 1317.85 981.261 1326.6 Q981.261 1335.33 978.182 1339.94 Q975.127 1344.52 969.316 1344.52 Q963.506 1344.52 960.428 1339.94 Q957.372 1335.33 957.372 1326.6 Q957.372 1317.85 960.428 1313.27 Q963.506 1308.66 969.316 1308.66 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip150)\" d=\"M999.478 1312.37 Q995.867 1312.37 994.038 1315.93 Q992.233 1319.47 992.233 1326.6 Q992.233 1333.71 994.038 1337.27 Q995.867 1340.82 999.478 1340.82 Q1003.11 1340.82 1004.92 1337.27 Q1006.75 1333.71 1006.75 1326.6 Q1006.75 1319.47 1004.92 1315.93 Q1003.11 1312.37 999.478 1312.37 M999.478 1308.66 Q1005.29 1308.66 1008.34 1313.27 Q1011.42 1317.85 1011.42 1326.6 Q1011.42 1335.33 1008.34 1339.94 Q1005.29 1344.52 999.478 1344.52 Q993.668 1344.52 990.589 1339.94 Q987.534 1335.33 987.534 1326.6 Q987.534 1317.85 990.589 1313.27 Q993.668 1308.66 999.478 1308.66 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip150)\" d=\"M1029.64 1312.37 Q1026.03 1312.37 1024.2 1315.93 Q1022.39 1319.47 1022.39 1326.6 Q1022.39 1333.71 1024.2 1337.27 Q1026.03 1340.82 1029.64 1340.82 Q1033.27 1340.82 1035.08 1337.27 Q1036.91 1333.71 1036.91 1326.6 Q1036.91 1319.47 1035.08 1315.93 Q1033.27 1312.37 1029.64 1312.37 M1029.64 1308.66 Q1035.45 1308.66 1038.51 1313.27 Q1041.58 1317.85 1041.58 1326.6 Q1041.58 1335.33 1038.51 1339.94 Q1035.45 1344.52 1029.64 1344.52 Q1023.83 1344.52 1020.75 1339.94 Q1017.7 1335.33 1017.7 1326.6 Q1017.7 1317.85 1020.75 1313.27 Q1023.83 1308.66 1029.64 1308.66 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip150)\" d=\"M1520.46 1339.91 L1536.78 1339.91 L1536.78 1343.85 L1514.84 1343.85 L1514.84 1339.91 Q1517.5 1337.16 1522.08 1332.53 Q1526.69 1327.88 1527.87 1326.53 Q1530.12 1324.01 1531 1322.27 Q1531.9 1320.51 1531.9 1318.82 Q1531.9 1316.07 1529.95 1314.33 Q1528.03 1312.6 1524.93 1312.6 Q1522.73 1312.6 1520.28 1313.36 Q1517.85 1314.13 1515.07 1315.68 L1515.07 1310.95 Q1517.89 1309.82 1520.35 1309.24 Q1522.8 1308.66 1524.84 1308.66 Q1530.21 1308.66 1533.4 1311.35 Q1536.6 1314.03 1536.6 1318.52 Q1536.6 1320.65 1535.79 1322.57 Q1535 1324.47 1532.89 1327.07 Q1532.31 1327.74 1529.21 1330.95 Q1526.11 1334.15 1520.46 1339.91 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip150)\" d=\"M1556.6 1312.37 Q1552.99 1312.37 1551.16 1315.93 Q1549.35 1319.47 1549.35 1326.6 Q1549.35 1333.71 1551.16 1337.27 Q1552.99 1340.82 1556.6 1340.82 Q1560.23 1340.82 1562.04 1337.27 Q1563.87 1333.71 1563.87 1326.6 Q1563.87 1319.47 1562.04 1315.93 Q1560.23 1312.37 1556.6 1312.37 M1556.6 1308.66 Q1562.41 1308.66 1565.46 1313.27 Q1568.54 1317.85 1568.54 1326.6 Q1568.54 1335.33 1565.46 1339.94 Q1562.41 1344.52 1556.6 1344.52 Q1550.79 1344.52 1547.71 1339.94 Q1544.65 1335.33 1544.65 1326.6 Q1544.65 1317.85 1547.71 1313.27 Q1550.79 1308.66 1556.6 1308.66 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip150)\" d=\"M1586.76 1312.37 Q1583.15 1312.37 1581.32 1315.93 Q1579.51 1319.47 1579.51 1326.6 Q1579.51 1333.71 1581.32 1337.27 Q1583.15 1340.82 1586.76 1340.82 Q1590.39 1340.82 1592.2 1337.27 Q1594.03 1333.71 1594.03 1326.6 Q1594.03 1319.47 1592.2 1315.93 Q1590.39 1312.37 1586.76 1312.37 M1586.76 1308.66 Q1592.57 1308.66 1595.62 1313.27 Q1598.7 1317.85 1598.7 1326.6 Q1598.7 1335.33 1595.62 1339.94 Q1592.57 1344.52 1586.76 1344.52 Q1580.95 1344.52 1577.87 1339.94 Q1574.81 1335.33 1574.81 1326.6 Q1574.81 1317.85 1577.87 1313.27 Q1580.95 1308.66 1586.76 1308.66 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip150)\" d=\"M1616.92 1312.37 Q1613.31 1312.37 1611.48 1315.93 Q1609.68 1319.47 1609.68 1326.6 Q1609.68 1333.71 1611.48 1337.27 Q1613.31 1340.82 1616.92 1340.82 Q1620.55 1340.82 1622.36 1337.27 Q1624.19 1333.71 1624.19 1326.6 Q1624.19 1319.47 1622.36 1315.93 Q1620.55 1312.37 1616.92 1312.37 M1616.92 1308.66 Q1622.73 1308.66 1625.79 1313.27 Q1628.87 1317.85 1628.87 1326.6 Q1628.87 1335.33 1625.79 1339.94 Q1622.73 1344.52 1616.92 1344.52 Q1611.11 1344.52 1608.03 1339.94 Q1604.98 1335.33 1604.98 1326.6 Q1604.98 1317.85 1608.03 1313.27 Q1611.11 1308.66 1616.92 1308.66 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip150)\" d=\"M2116.94 1325.21 Q2120.3 1325.93 2122.18 1328.2 Q2124.07 1330.47 2124.07 1333.8 Q2124.07 1338.92 2120.56 1341.72 Q2117.04 1344.52 2110.56 1344.52 Q2108.38 1344.52 2106.07 1344.08 Q2103.77 1343.66 2101.32 1342.81 L2101.32 1338.29 Q2103.26 1339.43 2105.58 1340 Q2107.89 1340.58 2110.42 1340.58 Q2114.82 1340.58 2117.11 1338.85 Q2119.42 1337.11 2119.42 1333.8 Q2119.42 1330.75 2117.27 1329.03 Q2115.14 1327.3 2111.32 1327.3 L2107.29 1327.3 L2107.29 1323.45 L2111.51 1323.45 Q2114.95 1323.45 2116.78 1322.09 Q2118.61 1320.7 2118.61 1318.11 Q2118.61 1315.44 2116.71 1314.03 Q2114.84 1312.6 2111.32 1312.6 Q2109.4 1312.6 2107.2 1313.01 Q2105 1313.43 2102.36 1314.31 L2102.36 1310.14 Q2105.02 1309.4 2107.34 1309.03 Q2109.68 1308.66 2111.74 1308.66 Q2117.06 1308.66 2120.16 1311.09 Q2123.26 1313.5 2123.26 1317.62 Q2123.26 1320.49 2121.62 1322.48 Q2119.98 1324.45 2116.94 1325.21 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip150)\" d=\"M2142.94 1312.37 Q2139.33 1312.37 2137.5 1315.93 Q2135.69 1319.47 2135.69 1326.6 Q2135.69 1333.71 2137.5 1337.27 Q2139.33 1340.82 2142.94 1340.82 Q2146.57 1340.82 2148.38 1337.27 Q2150.21 1333.71 2150.21 1326.6 Q2150.21 1319.47 2148.38 1315.93 Q2146.57 1312.37 2142.94 1312.37 M2142.94 1308.66 Q2148.75 1308.66 2151.81 1313.27 Q2154.88 1317.85 2154.88 1326.6 Q2154.88 1335.33 2151.81 1339.94 Q2148.75 1344.52 2142.94 1344.52 Q2137.13 1344.52 2134.05 1339.94 Q2131 1335.33 2131 1326.6 Q2131 1317.85 2134.05 1313.27 Q2137.13 1308.66 2142.94 1308.66 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip150)\" d=\"M2173.1 1312.37 Q2169.49 1312.37 2167.66 1315.93 Q2165.86 1319.47 2165.86 1326.6 Q2165.86 1333.71 2167.66 1337.27 Q2169.49 1340.82 2173.1 1340.82 Q2176.74 1340.82 2178.54 1337.27 Q2180.37 1333.71 2180.37 1326.6 Q2180.37 1319.47 2178.54 1315.93 Q2176.74 1312.37 2173.1 1312.37 M2173.1 1308.66 Q2178.91 1308.66 2181.97 1313.27 Q2185.05 1317.85 2185.05 1326.6 Q2185.05 1335.33 2181.97 1339.94 Q2178.91 1344.52 2173.1 1344.52 Q2167.29 1344.52 2164.21 1339.94 Q2161.16 1335.33 2161.16 1326.6 Q2161.16 1317.85 2164.21 1313.27 Q2167.29 1308.66 2173.1 1308.66 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip150)\" d=\"M2203.26 1312.37 Q2199.65 1312.37 2197.82 1315.93 Q2196.02 1319.47 2196.02 1326.6 Q2196.02 1333.71 2197.82 1337.27 Q2199.65 1340.82 2203.26 1340.82 Q2206.9 1340.82 2208.7 1337.27 Q2210.53 1333.71 2210.53 1326.6 Q2210.53 1319.47 2208.7 1315.93 Q2206.9 1312.37 2203.26 1312.37 M2203.26 1308.66 Q2209.07 1308.66 2212.13 1313.27 Q2215.21 1317.85 2215.21 1326.6 Q2215.21 1335.33 2212.13 1339.94 Q2209.07 1344.52 2203.26 1344.52 Q2197.45 1344.52 2194.38 1339.94 Q2191.32 1335.33 2191.32 1326.6 Q2191.32 1317.85 2194.38 1313.27 Q2197.45 1308.66 2203.26 1308.66 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip150)\" d=\"M1237.32 1391.71 L1237.32 1397.25 Q1234.84 1395.98 1232.17 1395.34 Q1229.49 1394.71 1226.63 1394.71 Q1222.27 1394.71 1220.07 1396.04 Q1217.91 1397.38 1217.91 1400.05 Q1217.91 1402.09 1219.47 1403.27 Q1221.03 1404.41 1225.74 1405.46 L1227.74 1405.91 Q1233.98 1407.25 1236.59 1409.7 Q1239.23 1412.12 1239.23 1416.48 Q1239.23 1421.44 1235.29 1424.34 Q1231.37 1427.23 1224.5 1427.23 Q1221.63 1427.23 1218.51 1426.66 Q1215.42 1426.12 1211.99 1425.01 L1211.99 1418.96 Q1215.23 1420.65 1218.38 1421.51 Q1221.54 1422.33 1224.62 1422.33 Q1228.76 1422.33 1230.99 1420.93 Q1233.22 1419.5 1233.22 1416.92 Q1233.22 1414.54 1231.59 1413.26 Q1230 1411.99 1224.56 1410.81 L1222.52 1410.33 Q1217.08 1409.19 1214.66 1406.83 Q1212.24 1404.45 1212.24 1400.31 Q1212.24 1395.28 1215.81 1392.54 Q1219.37 1389.8 1225.93 1389.8 Q1229.17 1389.8 1232.04 1390.28 Q1234.9 1390.76 1237.32 1391.71 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip150)\" d=\"M1254.35 1380.54 L1254.35 1390.66 L1266.41 1390.66 L1266.41 1395.22 L1254.35 1395.22 L1254.35 1414.57 Q1254.35 1418.93 1255.53 1420.17 Q1256.74 1421.41 1260.4 1421.41 L1266.41 1421.41 L1266.41 1426.31 L1260.4 1426.31 Q1253.62 1426.31 1251.04 1423.8 Q1248.46 1421.25 1248.46 1414.57 L1248.46 1395.22 L1244.17 1395.22 L1244.17 1390.66 L1248.46 1390.66 L1248.46 1380.54 L1254.35 1380.54 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip150)\" d=\"M1304.61 1407.02 L1304.61 1409.89 L1277.68 1409.89 Q1278.06 1415.94 1281.31 1419.12 Q1284.59 1422.27 1290.41 1422.27 Q1293.79 1422.27 1296.94 1421.44 Q1300.12 1420.61 1303.24 1418.96 L1303.24 1424.5 Q1300.09 1425.83 1296.78 1426.53 Q1293.47 1427.23 1290.06 1427.23 Q1281.53 1427.23 1276.54 1422.27 Q1271.57 1417.3 1271.57 1408.84 Q1271.57 1400.08 1276.28 1394.96 Q1281.02 1389.8 1289.04 1389.8 Q1296.24 1389.8 1300.41 1394.45 Q1304.61 1399.07 1304.61 1407.02 M1298.75 1405.3 Q1298.69 1400.5 1296.05 1397.63 Q1293.44 1394.77 1289.11 1394.77 Q1284.21 1394.77 1281.25 1397.54 Q1278.32 1400.31 1277.87 1405.34 L1298.75 1405.3 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip150)\" d=\"M1319.89 1420.96 L1319.89 1439.87 L1314 1439.87 L1314 1390.66 L1319.89 1390.66 L1319.89 1396.07 Q1321.73 1392.89 1324.53 1391.36 Q1327.37 1389.8 1331.28 1389.8 Q1337.77 1389.8 1341.82 1394.96 Q1345.89 1400.12 1345.89 1408.52 Q1345.89 1416.92 1341.82 1422.08 Q1337.77 1427.23 1331.28 1427.23 Q1327.37 1427.23 1324.53 1425.71 Q1321.73 1424.15 1319.89 1420.96 M1339.81 1408.52 Q1339.81 1402.06 1337.14 1398.4 Q1334.5 1394.71 1329.85 1394.71 Q1325.2 1394.71 1322.53 1398.4 Q1319.89 1402.06 1319.89 1408.52 Q1319.89 1414.98 1322.53 1418.67 Q1325.2 1422.33 1329.85 1422.33 Q1334.5 1422.33 1337.14 1418.67 Q1339.81 1414.98 1339.81 1408.52 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><polyline clip-path=\"url(#clip152)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:2; stroke-opacity:0.1; fill:none\" points=\"346.853,1148.33 2211.02,1148.33 \"/>\n<polyline clip-path=\"url(#clip152)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:2; stroke-opacity:0.1; fill:none\" points=\"346.853,980.964 2211.02,980.964 \"/>\n<polyline clip-path=\"url(#clip152)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:2; stroke-opacity:0.1; fill:none\" points=\"346.853,813.594 2211.02,813.594 \"/>\n<polyline clip-path=\"url(#clip152)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:2; stroke-opacity:0.1; fill:none\" points=\"346.853,646.224 2211.02,646.224 \"/>\n<polyline clip-path=\"url(#clip152)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:2; stroke-opacity:0.1; fill:none\" points=\"346.853,478.855 2211.02,478.855 \"/>\n<polyline clip-path=\"url(#clip152)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:2; stroke-opacity:0.1; fill:none\" points=\"346.853,311.485 2211.02,311.485 \"/>\n<polyline clip-path=\"url(#clip150)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"346.853,1281.45 346.853,188.976 \"/>\n<polyline clip-path=\"url(#clip150)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"346.853,1148.33 365.751,1148.33 \"/>\n<polyline clip-path=\"url(#clip150)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"346.853,980.964 365.751,980.964 \"/>\n<polyline clip-path=\"url(#clip150)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"346.853,813.594 365.751,813.594 \"/>\n<polyline clip-path=\"url(#clip150)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"346.853,646.224 365.751,646.224 \"/>\n<polyline clip-path=\"url(#clip150)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"346.853,478.855 365.751,478.855 \"/>\n<polyline clip-path=\"url(#clip150)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"346.853,311.485 365.751,311.485 \"/>\n<path clip-path=\"url(#clip150)\" d=\"M298.909 1134.13 Q295.298 1134.13 293.469 1137.7 Q291.664 1141.24 291.664 1148.37 Q291.664 1155.47 293.469 1159.04 Q295.298 1162.58 298.909 1162.58 Q302.543 1162.58 304.349 1159.04 Q306.177 1155.47 306.177 1148.37 Q306.177 1141.24 304.349 1137.7 Q302.543 1134.13 298.909 1134.13 M298.909 1130.43 Q304.719 1130.43 307.775 1135.04 Q310.853 1139.62 310.853 1148.37 Q310.853 1157.1 307.775 1161.7 Q304.719 1166.29 298.909 1166.29 Q293.099 1166.29 290.02 1161.7 Q286.964 1157.1 286.964 1148.37 Q286.964 1139.62 290.02 1135.04 Q293.099 1130.43 298.909 1130.43 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip150)\" d=\"M259.557 994.309 L267.196 994.309 L267.196 967.943 L258.886 969.61 L258.886 965.351 L267.15 963.684 L271.826 963.684 L271.826 994.309 L279.465 994.309 L279.465 998.244 L259.557 998.244 L259.557 994.309 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip150)\" d=\"M298.909 966.763 Q295.298 966.763 293.469 970.328 Q291.664 973.869 291.664 980.999 Q291.664 988.105 293.469 991.67 Q295.298 995.212 298.909 995.212 Q302.543 995.212 304.349 991.67 Q306.177 988.105 306.177 980.999 Q306.177 973.869 304.349 970.328 Q302.543 966.763 298.909 966.763 M298.909 963.059 Q304.719 963.059 307.775 967.665 Q310.853 972.249 310.853 980.999 Q310.853 989.726 307.775 994.332 Q304.719 998.915 298.909 998.915 Q293.099 998.915 290.02 994.332 Q286.964 989.726 286.964 980.999 Q286.964 972.249 290.02 967.665 Q293.099 963.059 298.909 963.059 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip150)\" d=\"M262.775 826.939 L279.094 826.939 L279.094 830.874 L257.15 830.874 L257.15 826.939 Q259.812 824.184 264.395 819.555 Q269.002 814.902 270.182 813.56 Q272.428 811.036 273.307 809.3 Q274.21 807.541 274.21 805.851 Q274.21 803.097 272.266 801.361 Q270.344 799.624 267.242 799.624 Q265.043 799.624 262.59 800.388 Q260.159 801.152 257.381 802.703 L257.381 797.981 Q260.205 796.847 262.659 796.268 Q265.113 795.689 267.15 795.689 Q272.52 795.689 275.715 798.374 Q278.909 801.06 278.909 805.55 Q278.909 807.68 278.099 809.601 Q277.312 811.499 275.205 814.092 Q274.627 814.763 271.525 817.981 Q268.423 821.175 262.775 826.939 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip150)\" d=\"M298.909 799.393 Q295.298 799.393 293.469 802.958 Q291.664 806.499 291.664 813.629 Q291.664 820.735 293.469 824.3 Q295.298 827.842 298.909 827.842 Q302.543 827.842 304.349 824.3 Q306.177 820.735 306.177 813.629 Q306.177 806.499 304.349 802.958 Q302.543 799.393 298.909 799.393 M298.909 795.689 Q304.719 795.689 307.775 800.296 Q310.853 804.879 310.853 813.629 Q310.853 822.356 307.775 826.962 Q304.719 831.546 298.909 831.546 Q293.099 831.546 290.02 826.962 Q286.964 822.356 286.964 813.629 Q286.964 804.879 290.02 800.296 Q293.099 795.689 298.909 795.689 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip150)\" d=\"M272.914 644.87 Q276.27 645.588 278.145 647.856 Q280.043 650.125 280.043 653.458 Q280.043 658.574 276.525 661.375 Q273.006 664.176 266.525 664.176 Q264.349 664.176 262.034 663.736 Q259.742 663.319 257.289 662.463 L257.289 657.949 Q259.233 659.083 261.548 659.662 Q263.863 660.241 266.386 660.241 Q270.784 660.241 273.076 658.505 Q275.39 656.768 275.39 653.458 Q275.39 650.403 273.238 648.69 Q271.108 646.954 267.289 646.954 L263.261 646.954 L263.261 643.111 L267.474 643.111 Q270.923 643.111 272.752 641.745 Q274.58 640.356 274.58 637.764 Q274.58 635.102 272.682 633.69 Q270.807 632.255 267.289 632.255 Q265.367 632.255 263.168 632.671 Q260.969 633.088 258.33 633.968 L258.33 629.801 Q260.992 629.06 263.307 628.69 Q265.645 628.319 267.705 628.319 Q273.029 628.319 276.131 630.75 Q279.233 633.157 279.233 637.278 Q279.233 640.148 277.59 642.139 Q275.946 644.106 272.914 644.87 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip150)\" d=\"M298.909 632.023 Q295.298 632.023 293.469 635.588 Q291.664 639.13 291.664 646.259 Q291.664 653.366 293.469 656.93 Q295.298 660.472 298.909 660.472 Q302.543 660.472 304.349 656.93 Q306.177 653.366 306.177 646.259 Q306.177 639.13 304.349 635.588 Q302.543 632.023 298.909 632.023 M298.909 628.319 Q304.719 628.319 307.775 632.926 Q310.853 637.509 310.853 646.259 Q310.853 654.986 307.775 659.592 Q304.719 664.176 298.909 664.176 Q293.099 664.176 290.02 659.592 Q286.964 654.986 286.964 646.259 Q286.964 637.509 290.02 632.926 Q293.099 628.319 298.909 628.319 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip150)\" d=\"M271.594 465.649 L259.789 484.098 L271.594 484.098 L271.594 465.649 M270.367 461.575 L276.247 461.575 L276.247 484.098 L281.177 484.098 L281.177 487.987 L276.247 487.987 L276.247 496.135 L271.594 496.135 L271.594 487.987 L255.992 487.987 L255.992 483.473 L270.367 461.575 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip150)\" d=\"M298.909 464.653 Q295.298 464.653 293.469 468.218 Q291.664 471.76 291.664 478.889 Q291.664 485.996 293.469 489.561 Q295.298 493.102 298.909 493.102 Q302.543 493.102 304.349 489.561 Q306.177 485.996 306.177 478.889 Q306.177 471.76 304.349 468.218 Q302.543 464.653 298.909 464.653 M298.909 460.95 Q304.719 460.95 307.775 465.556 Q310.853 470.139 310.853 478.889 Q310.853 487.616 307.775 492.223 Q304.719 496.806 298.909 496.806 Q293.099 496.806 290.02 492.223 Q286.964 487.616 286.964 478.889 Q286.964 470.139 290.02 465.556 Q293.099 460.95 298.909 460.95 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip150)\" d=\"M258.793 294.205 L277.15 294.205 L277.15 298.14 L263.076 298.14 L263.076 306.612 Q264.094 306.265 265.113 306.103 Q266.131 305.918 267.15 305.918 Q272.937 305.918 276.316 309.089 Q279.696 312.26 279.696 317.677 Q279.696 323.256 276.224 326.358 Q272.752 329.436 266.432 329.436 Q264.256 329.436 261.988 329.066 Q259.742 328.696 257.335 327.955 L257.335 323.256 Q259.418 324.39 261.641 324.946 Q263.863 325.501 266.34 325.501 Q270.344 325.501 272.682 323.395 Q275.02 321.288 275.02 317.677 Q275.02 314.066 272.682 311.96 Q270.344 309.853 266.34 309.853 Q264.465 309.853 262.59 310.27 Q260.738 310.686 258.793 311.566 L258.793 294.205 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip150)\" d=\"M298.909 297.284 Q295.298 297.284 293.469 300.848 Q291.664 304.39 291.664 311.52 Q291.664 318.626 293.469 322.191 Q295.298 325.733 298.909 325.733 Q302.543 325.733 304.349 322.191 Q306.177 318.626 306.177 311.52 Q306.177 304.39 304.349 300.848 Q302.543 297.284 298.909 297.284 M298.909 293.58 Q304.719 293.58 307.775 298.186 Q310.853 302.77 310.853 311.52 Q310.853 320.246 307.775 324.853 Q304.719 329.436 298.909 329.436 Q293.099 329.436 290.02 324.853 Q286.964 320.246 286.964 311.52 Q286.964 302.77 290.02 298.186 Q293.099 293.58 298.909 293.58 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip150)\" d=\"M186.448 812.969 L189.313 812.969 L189.313 839.896 Q195.36 839.514 198.543 836.268 Q201.694 832.989 201.694 827.165 Q201.694 823.791 200.867 820.64 Q200.039 817.457 198.384 814.338 L203.922 814.338 Q205.259 817.489 205.959 820.799 Q206.659 824.109 206.659 827.515 Q206.659 836.045 201.694 841.042 Q196.729 846.007 188.263 846.007 Q179.51 846.007 174.385 841.296 Q169.229 836.554 169.229 828.533 Q169.229 821.34 173.876 817.17 Q178.491 812.969 186.448 812.969 M184.73 818.826 Q179.924 818.889 177.059 821.531 Q174.194 824.141 174.194 828.47 Q174.194 833.371 176.963 836.331 Q179.733 839.259 184.761 839.705 L184.73 818.826 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip150)\" d=\"M184.22 773.724 L205.736 773.724 L205.736 779.581 L184.411 779.581 Q179.351 779.581 176.836 781.554 Q174.322 783.528 174.322 787.474 Q174.322 792.217 177.345 794.954 Q180.369 797.691 185.589 797.691 L205.736 797.691 L205.736 803.58 L170.088 803.58 L170.088 797.691 L175.627 797.691 Q172.412 795.591 170.821 792.758 Q169.229 789.893 169.229 786.169 Q169.229 780.027 173.049 776.876 Q176.836 773.724 184.22 773.724 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip150)\" d=\"M186.448 731.552 L189.313 731.552 L189.313 758.479 Q195.36 758.097 198.543 754.85 Q201.694 751.572 201.694 745.747 Q201.694 742.373 200.867 739.222 Q200.039 736.04 198.384 732.92 L203.922 732.92 Q205.259 736.071 205.959 739.382 Q206.659 742.692 206.659 746.097 Q206.659 754.627 201.694 759.624 Q196.729 764.59 188.263 764.59 Q179.51 764.59 174.385 759.879 Q169.229 755.137 169.229 747.116 Q169.229 739.923 173.876 735.753 Q178.491 731.552 186.448 731.552 M184.73 737.408 Q179.924 737.472 177.059 740.114 Q174.194 742.724 174.194 747.052 Q174.194 751.954 176.963 754.914 Q179.733 757.842 184.761 758.288 L184.73 737.408 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip150)\" d=\"M175.563 701.283 Q174.99 702.269 174.735 703.447 Q174.449 704.593 174.449 705.993 Q174.449 710.959 177.696 713.632 Q180.91 716.274 186.958 716.274 L205.736 716.274 L205.736 722.162 L170.088 722.162 L170.088 716.274 L175.627 716.274 Q172.38 714.428 170.821 711.468 Q169.229 708.508 169.229 704.275 Q169.229 703.67 169.325 702.938 Q169.388 702.206 169.547 701.315 L175.563 701.283 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip150)\" d=\"M187.499 672.828 Q181.133 672.828 177.632 675.47 Q174.131 678.08 174.131 682.822 Q174.131 687.533 177.632 690.175 Q181.133 692.785 187.499 692.785 Q193.833 692.785 197.334 690.175 Q200.835 687.533 200.835 682.822 Q200.835 678.08 197.334 675.47 Q193.833 672.828 187.499 672.828 M201.312 666.972 Q210.415 666.972 214.839 671.014 Q219.295 675.056 219.295 683.395 Q219.295 686.482 218.818 689.22 Q218.372 691.957 217.418 694.535 L211.72 694.535 Q213.121 691.957 213.789 689.443 Q214.457 686.928 214.457 684.318 Q214.457 678.557 211.434 675.693 Q208.442 672.828 202.363 672.828 L199.466 672.828 Q202.617 674.642 204.177 677.475 Q205.736 680.308 205.736 684.254 Q205.736 690.811 200.739 694.822 Q195.742 698.832 187.499 698.832 Q179.223 698.832 174.226 694.822 Q169.229 690.811 169.229 684.254 Q169.229 680.308 170.789 677.475 Q172.348 674.642 175.499 672.828 L170.088 672.828 L170.088 666.972 L201.312 666.972 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip150)\" d=\"M209.047 640.076 Q215.412 642.559 217.354 644.914 Q219.295 647.27 219.295 651.216 L219.295 655.895 L214.394 655.895 L214.394 652.458 Q214.394 650.039 213.248 648.702 Q212.102 647.365 207.837 645.742 L205.164 644.692 L170.088 659.11 L170.088 652.903 L197.97 641.763 L170.088 630.623 L170.088 624.417 L209.047 640.076 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><polyline clip-path=\"url(#clip152)\" style=\"stroke:#009af9; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"399.613,1025.01 400.199,911.715 400.786,1051.94 401.372,940.542 401.958,945.812 402.545,848.753 403.131,853.841 403.718,768.762 404.304,774.536 404.891,698.612 405.477,705.552 406.063,637.455 406.65,576.266 407.236,519.461 407.823,531.184 408.409,539.876 408.995,493.011 409.582,449.851 410.168,409.949 410.755,375.503 411.341,344.849 411.927,317.984 412.514,293.301 413.1,273.763 413.687,255.893 414.273,241.338 414.86,229.392 415.446,219.895 416.032,241.611 416.619,262.572 417.205,282.033 417.792,275.738 418.378,294.713 418.964,353.294 419.551,368.671 420.137,382.843 420.724,379.672 421.31,378.906 421.896,393.223 422.483,422.653 423.069,423.939 423.656,426.234 424.242,429.105 424.829,444.536 425.415,460.544 426.001,466.599 426.588,480.704 427.174,485.443 427.761,510.329 428.347,516.69 428.933,523.24 429.52,529.822 430.106,536.689 430.693,551.338 431.279,565.554 431.865,581.751 432.452,596.481 433.038,616.864 433.625,637.248 434.211,656.377 434.798,663.708 435.384,681.711 435.97,694.321 436.557,701.854 437.143,714.235 437.73,727.094 438.316,743.929 438.902,764.437 439.489,775.856 440.075,790.986 440.662,805.788 441.248,820.124 441.835,841.249 442.421,847.359 443.007,856.906 443.594,866.588 444.18,879.716 444.767,894.75 445.353,903.121 445.939,917.364 446.526,928.123 447.112,938.438 447.699,943.237 448.285,950.862 448.871,960.937 449.458,970.932 450.044,988.607 450.631,994.626 451.217,998.416 451.804,1002.28 452.39,1008.36 452.976,1012.05 453.563,1018.14 454.149,1024.34 454.736,1032.38 455.322,1035.81 455.908,1039.16 456.495,1045.08 457.081,1048.57 457.668,1054.21 458.254,1065.99 458.84,1069.1 459.427,1071.94 460.013,1075.04 460.6,1084.15 461.186,1091.01 461.773,1095.66 462.359,1098.48 462.945,1105.12 463.532,1109.78 464.118,1119.96 464.705,1124.05 465.291,1129.82 465.877,1132.21 466.464,1138.2 467.05,1140.27 467.637,1142.38 468.223,1147.55 468.809,1150.98 469.396,1155.95 469.982,1160.68 470.569,1163.74 471.155,1165.38 471.742,1168.35 472.328,1173.13 472.914,1175.86 473.501,1178.75 474.087,1179.87 474.674,1186.08 475.26,1188.7 475.846,1189.71 476.433,1195.19 477.019,1195.96 477.606,1198.12 478.192,1198.69 478.778,1199.13 479.365,1204.64 479.951,1208.41 480.538,1208.65 481.124,1212.03 481.711,1213.67 482.297,1215.18 482.883,1215.28 483.47,1218.47 484.056,1218.46 484.643,1219.89 485.229,1221.13 485.815,1221.2 486.402,1222.72 486.988,1222.49 487.575,1222.66 488.161,1222.74 488.748,1222.8 489.334,1222.8 489.92,1221.24 490.507,1221.07 491.093,1221.19 491.68,1221.37 492.266,1223.42 492.852,1223.51 493.439,1223.45 494.025,1225.29 494.612,1224.01 495.198,1227.07 495.784,1225.72 496.371,1228.77 496.957,1227.45 497.544,1229.14 498.13,1230.62 498.717,1230.55 499.303,1235.09 499.889,1237.98 500.476,1239.13 501.062,1238.5 501.649,1240.91 502.235,1240.55 502.821,1240.07 503.408,1239.71 503.994,1239.21 504.581,1239.1 505.167,1236.07 505.753,1236.17 506.34,1234.47 506.926,1239.98 507.513,1238.16 508.099,1240.72 508.686,1243.34 509.272,1241.46 509.858,1242.45 510.445,1243.35 511.031,1244.06 511.618,1246.3 512.204,1245.52 512.79,1243.43 513.377,1243.03 513.963,1242.77 514.55,1242.17 515.136,1247.59 515.722,1246.42 516.309,1247.14 516.895,1246.76 517.482,1247.5 518.068,1247.07 518.655,1246.33 519.241,1245.8 519.827,1243.9 520.414,1244.96 521,1244.52 521.587,1245.22 522.173,1246.16 522.759,1245.47 523.346,1246.16 523.932,1245.94 524.519,1246.59 525.105,1248.79 525.691,1249.54 526.278,1248.82 526.864,1249.81 527.451,1250.53 528.037,1248.49 528.624,1248.01 529.21,1247.37 529.796,1246.53 530.383,1247.35 530.969,1246.98 531.556,1247.68 532.142,1248.58 532.728,1247.64 533.315,1246.96 533.901,1249.29 534.488,1248.55 535.074,1249.11 535.661,1248.26 536.247,1244.65 536.833,1245.28 537.42,1246 538.006,1245.46 538.593,1246.3 539.179,1248.23 539.765,1247.4 540.352,1244.91 540.938,1244.46 541.525,1241.14 542.111,1242.35 542.697,1241.79 543.284,1238.58 543.87,1236.91 544.457,1239.44 545.043,1237.63 545.63,1238.75 546.216,1244.29 546.802,1243.45 547.389,1247.14 547.975,1246.38 548.562,1241.31 549.148,1242.28 549.734,1241.83 550.321,1242.76 550.907,1242.43 551.494,1241.79 552.08,1242.77 552.666,1242.31 553.253,1243.17 553.839,1244 554.426,1247.42 555.012,1246.68 555.599,1245.96 556.185,1246.87 556.771,1246.16 557.358,1242.57 557.944,1242.02 558.531,1244.08 559.117,1246.19 559.703,1244.12 560.29,1244.7 560.876,1245.59 561.463,1244.75 562.049,1242.48 562.635,1244.64 563.222,1248.2 563.808,1244.54 564.395,1242.64 564.981,1239.12 565.568,1238.84 566.154,1240.02 566.74,1243.82 567.327,1242.93 567.913,1243.52 568.5,1241.14 569.086,1245.75 569.672,1246.08 570.259,1246.38 570.845,1245.16 571.432,1243.03 572.018,1240.81 572.605,1242.95 573.191,1242.33 573.777,1241.44 574.364,1240.81 574.95,1241.65 575.537,1242.89 576.123,1242.41 576.709,1240.29 577.296,1239.78 577.882,1239.12 578.469,1238.84 579.055,1239.78 579.641,1237.64 580.228,1235.66 580.814,1235.03 581.401,1233.15 581.987,1234.68 582.574,1232.8 583.16,1232.35 583.746,1230.7 584.333,1229.02 584.919,1230.28 585.506,1229.93 586.092,1228.62 586.678,1228.64 587.265,1231.62 587.851,1229.93 588.438,1229.67 589.024,1229.5 589.61,1232.15 590.197,1230.84 590.783,1230.78 591.37,1229.27 591.956,1231.97 592.543,1231.87 593.129,1234.55 593.715,1235.3 594.302,1233.34 594.888,1233.01 595.475,1231.2 596.061,1230.89 596.647,1231.92 597.234,1233.25 597.82,1230.47 598.407,1230.33 598.993,1230.13 599.579,1228.33 600.166,1229.41 600.752,1231.83 601.339,1230.18 601.925,1228.74 602.512,1229.05 603.098,1229.1 603.684,1227.36 604.271,1228.55 604.857,1228.45 605.444,1228.17 606.03,1225.28 606.616,1224.05 607.203,1225.7 607.789,1225.52 608.376,1225.69 608.962,1225.95 609.548,1226.06 610.135,1224.79 610.721,1225.88 611.308,1227.36 611.894,1228.55 612.481,1225.45 613.067,1224.35 613.653,1223.34 614.24,1220.69 614.826,1221.19 615.413,1221.42 615.999,1224.34 616.585,1226.91 617.172,1226.61 617.758,1226.92 618.345,1229.63 618.931,1230.54 619.518,1230.2 620.104,1229.94 620.69,1232.42 621.277,1232.27 621.863,1233.26 622.45,1232.88 623.036,1235.38 623.622,1236.05 624.209,1235.58 624.795,1236.24 625.382,1235.77 625.968,1237.88 626.554,1234.59 627.141,1231.65 627.727,1229.88 628.314,1226.67 628.9,1225.11 629.487,1225.1 630.073,1226.58 630.659,1226.66 631.246,1226.41 631.832,1227.62 632.419,1224.59 633.005,1227.29 633.591,1231.26 634.178,1230.93 634.764,1227.87 635.351,1227.6 635.937,1226.04 636.523,1224.5 637.11,1224.6 637.696,1226.12 638.283,1230.01 638.869,1232.23 639.456,1231.8 640.042,1232.62 640.628,1232.37 641.215,1231.98 641.801,1230.34 642.388,1230.11 642.974,1231.32 643.56,1232.31 644.147,1231.82 644.733,1229.87 645.32,1230.65 645.906,1231.82 646.492,1231.68 647.079,1231.65 647.665,1229.73 648.252,1233.38 648.838,1232.86 649.425,1236.38 650.011,1234.54 650.597,1229.62 651.184,1231.68 651.77,1231.13 652.357,1227.91 652.943,1227.72 653.529,1227.48 654.116,1225.62 654.702,1225.55 655.289,1226.72 655.875,1226.54 656.462,1226.39 657.048,1226.33 657.634,1224.85 658.221,1223.3 658.807,1221.99 659.394,1219.19 659.98,1219.23 660.566,1216.71 661.153,1219.55 661.739,1221.14 662.326,1221.05 662.912,1222.57 663.498,1222.4 664.085,1224.95 664.671,1222.24 665.258,1220.59 665.844,1219.02 666.431,1222.26 667.017,1223.54 667.603,1224.73 668.19,1223.34 668.776,1223.53 669.363,1223.52 669.949,1222.28 670.535,1220.71 671.122,1222.25 671.708,1226.33 672.295,1228.92 672.881,1232.45 673.467,1230.59 674.054,1228.6 674.64,1227.12 675.227,1229.44 675.813,1227.71 676.4,1228.75 676.986,1228.49 677.572,1225.23 678.159,1225.15 678.745,1225.14 679.332,1220.57 679.918,1220.67 680.504,1223.64 681.091,1224.76 681.677,1227.47 682.264,1227.34 682.85,1228.39 683.436,1232.16 684.023,1231.33 684.609,1228.1 685.196,1227.72 685.782,1225.86 686.369,1228.28 686.955,1227.91 687.541,1227.87 688.128,1227.47 688.714,1232.65 689.301,1233.71 689.887,1234.98 690.473,1234.2 691.06,1232.24 691.646,1230.56 692.233,1230.09 692.819,1231.14 693.405,1231.98 693.992,1230.13 694.578,1231.2 695.165,1230.69 695.751,1228.87 696.338,1225.7 696.924,1227.02 697.51,1230.82 698.097,1231.6 698.683,1231.18 699.27,1228.08 699.856,1230.62 700.442,1228.49 701.029,1232.36 701.615,1230.48 702.202,1229.95 702.788,1228.04 703.375,1230.42 703.961,1227 704.547,1229.43 705.134,1229.06 705.72,1227.02 706.307,1229.46 706.893,1227.55 707.479,1227.23 708.066,1229.22 708.652,1228.83 709.239,1229.54 709.825,1226.45 710.411,1231.7 710.998,1229.74 711.584,1230.76 712.171,1230.27 712.757,1226.89 713.344,1226.38 713.93,1228.54 714.516,1224.16 715.103,1221.09 715.689,1219.43 716.276,1218.15 716.862,1217.04 717.448,1218.58 718.035,1218.99 718.621,1217.86 719.208,1218.07 719.794,1220.87 720.38,1222.25 720.967,1222.3 721.553,1224.62 722.14,1227.06 722.726,1228.26 723.313,1227.82 723.899,1228.76 724.485,1225.64 725.072,1226.84 725.658,1226.44 726.245,1225.9 726.831,1226.8 727.417,1227.76 728.004,1227.73 728.59,1224.76 729.177,1222.08 729.763,1220.7 730.349,1220.42 730.936,1218.98 731.522,1219.27 732.109,1220.32 732.695,1217.09 733.282,1218.53 733.868,1218.69 734.454,1220.37 735.041,1218.76 735.627,1218.93 736.214,1218.89 736.8,1220.24 737.386,1217.65 737.973,1216.36 738.559,1215.24 739.146,1219.79 739.732,1220.81 740.318,1219.2 740.905,1217.96 741.491,1215.15 742.078,1216.81 742.664,1215.83 743.251,1215.77 743.837,1214.64 744.423,1216.2 745.01,1216.24 745.596,1216.19 746.183,1216.4 746.769,1216.4 747.355,1214.12 747.942,1216.91 748.528,1211.48 749.115,1211.59 749.701,1212.16 750.288,1213.52 750.874,1213.85 751.46,1212.88 752.047,1217.16 752.633,1217.06 753.22,1219.96 753.806,1217.29 754.392,1217.11 754.979,1218.57 755.565,1218.82 756.152,1214.85 756.738,1216.39 757.324,1215.23 757.911,1214.22 758.497,1214.38 759.084,1214.62 759.67,1214.61 760.257,1216.41 760.843,1217.86 761.429,1216.69 762.016,1215.31 762.602,1215.25 763.189,1218.39 763.775,1214.56 764.361,1213.67 764.948,1215.48 765.534,1218.36 766.121,1218.57 766.707,1220.15 767.293,1224.17 767.88,1221.27 768.466,1225.54 769.053,1222.57 769.639,1222.25 770.226,1224.7 770.812,1227.12 771.398,1225.45 771.985,1225.06 772.571,1222.2 773.158,1222.23 773.744,1219.48 774.33,1221.06 774.917,1221.16 775.503,1219.61 776.09,1218.09 776.676,1220.88 777.262,1220.9 777.849,1222.1 778.435,1220.52 779.022,1218.97 779.608,1219.02 780.195,1220.32 780.781,1220.34 781.367,1218.76 781.954,1216.01 782.54,1216.02 783.127,1217.68 783.713,1221.94 784.299,1224.51 784.886,1225.64 785.472,1225.55 786.059,1223.71 786.645,1225.05 787.232,1224.48 787.818,1224.37 788.404,1222.69 788.991,1221.09 789.577,1219.86 790.164,1217.06 790.75,1216.68 791.336,1213.91 791.923,1214.28 792.509,1215.79 793.096,1220.11 793.682,1221.49 794.268,1220.07 794.855,1220.29 795.441,1218.83 796.028,1216.17 796.614,1219.12 797.201,1219.25 797.787,1219.02 798.373,1217.43 798.96,1214.68 799.546,1215.01 800.133,1215.01 800.719,1219.21 801.305,1219.49 801.892,1217.87 802.478,1220.7 803.065,1223.42 803.651,1224.44 804.237,1225.59 804.824,1226.47 805.41,1226.09 805.997,1223.04 806.583,1223.93 807.17,1222.16 807.756,1223.34 808.342,1223.1 808.929,1222.99 809.515,1222.78 810.102,1221.13 810.688,1220.04 811.274,1221.29 811.861,1221.46 812.447,1224.05 813.034,1225.47 813.62,1223.83 814.206,1223.66 814.793,1223.09 815.379,1224.16 815.966,1222.55 816.552,1222.43 817.139,1216.75 817.725,1216.86 818.311,1218.16 818.898,1220.89 819.484,1219.65 820.071,1218.52 820.657,1218.39 821.243,1217.1 821.83,1212.87 822.416,1213.06 823.003,1211.88 823.589,1210.78 824.175,1208.24 824.762,1209.79 825.348,1210.25 825.935,1209.41 826.521,1211.12 827.108,1210.01 827.694,1211.75 828.28,1212.06 828.867,1211.2 829.453,1213.09 830.04,1214.78 830.626,1213.43 831.212,1213.84 831.799,1213.69 832.385,1215.59 832.972,1218.49 833.558,1217.09 834.145,1217.31 834.731,1214.47 835.317,1213.62 835.904,1215.13 836.49,1215.13 837.077,1218.26 837.663,1219.75 838.249,1222.44 838.836,1222.31 839.422,1222.02 840.009,1224.72 840.595,1222.95 841.181,1222.59 841.768,1223.55 842.354,1223.49 842.941,1223.28 843.527,1221.41 844.114,1218.61 844.7,1215.87 845.286,1217.32 845.873,1218.44 846.459,1218.42 847.046,1217.03 847.632,1217.06 848.218,1212.65 848.805,1214.18 849.391,1217.16 849.978,1217.18 850.564,1215.6 851.15,1215.43 851.737,1214.26 852.323,1217.31 852.91,1218.85 853.496,1218.63 854.083,1218.46 854.669,1220.2 855.255,1221.25 855.842,1219.78 856.428,1220.89 857.015,1222.3 857.601,1222.15 858.187,1218.86 858.774,1218.82 859.36,1217.29 859.947,1214.72 860.533,1214.94 861.119,1217.84 861.706,1217.69 862.292,1216.14 862.879,1216.16 863.465,1216.22 864.052,1216.58 864.638,1217.86 865.224,1213.8 865.811,1213.92 866.397,1212.49 866.984,1214.21 867.57,1213.36 868.156,1212.65 868.743,1212.95 869.329,1215.88 869.916,1214.61 870.502,1214.74 871.089,1215 871.675,1213.7 872.261,1209.82 872.848,1210.25 873.434,1210.75 874.021,1212.4 874.607,1212.84 875.193,1214.52 875.78,1213.4 876.366,1214.84 876.953,1212.24 877.539,1215.26 878.125,1215.08 878.712,1215.14 879.298,1215.08 879.885,1218.05 880.471,1216.7 881.058,1219.01 881.644,1218.81 882.23,1218.75 882.817,1218.75 883.403,1214.32 883.99,1215.76 884.576,1217.07 885.162,1218.04 885.749,1220.42 886.335,1219.08 886.922,1218.85 887.508,1220.13 888.094,1218.81 888.681,1213.16 889.267,1213.42 889.854,1215.15 890.44,1216.81 891.027,1214.25 891.613,1215.53 892.199,1214.12 892.786,1215.53 893.372,1217.09 893.959,1217.11 894.545,1214.74 895.131,1216.63 895.718,1216.44 896.304,1215.07 896.891,1216.48 897.477,1216.31 898.063,1214.93 898.65,1215.15 899.236,1214.04 899.823,1214.1 900.409,1214.2 900.996,1215.73 901.582,1217.05 902.168,1217.13 902.755,1218.22 903.341,1219.54 903.928,1218.12 904.514,1218.07 905.1,1218.16 905.687,1218.25 906.273,1219.59 906.86,1219.77 907.446,1221.24 908.032,1219.67 908.619,1219.31 909.205,1221.97 909.792,1223.01 910.378,1218.56 910.965,1216.85 911.551,1215.63 912.137,1216.81 912.724,1217.23 913.31,1217.47 913.897,1217.18 914.483,1217.17 915.069,1217.03 915.656,1216.9 916.242,1216.71 916.829,1216.53 917.415,1217.68 918.002,1217.66 918.588,1217.52 919.174,1221.21 919.761,1222.17 920.347,1223.06 920.934,1221.56 921.52,1220.42 922.106,1220.22 922.693,1221.37 923.279,1221.22 923.866,1222.04 924.452,1221.69 925.038,1223.61 925.625,1223 926.211,1228.04 926.798,1227.32 927.384,1229.47 927.971,1227.64 928.557,1228.03 929.143,1228.36 929.73,1229.18 930.316,1228.35 930.903,1227.73 931.489,1224.78 932.075,1223.06 932.662,1221.4 933.248,1219.62 933.835,1218.33 934.421,1220.95 935.007,1219.37 935.594,1221.95 936.18,1220.13 936.767,1218.61 937.353,1217.03 937.94,1218.11 938.526,1220.64 939.112,1219.02 939.699,1220.64 940.285,1220.44 940.872,1221.73 941.458,1218.58 942.044,1218.06 942.631,1219.02 943.217,1218.73 943.804,1221.46 944.39,1223.83 944.976,1222.15 945.563,1221.52 946.149,1223.71 946.736,1225.88 947.322,1219.87 947.909,1216.92 948.495,1219.38 949.081,1217.81 949.668,1217.44 950.254,1218.54 950.841,1217.21 951.427,1219.78 952.013,1219.41 952.6,1217.85 953.186,1216.4 953.773,1214.9 954.359,1210.82 954.945,1209.69 955.532,1207.21 956.118,1204.99 956.705,1206.97 957.291,1207.43 957.878,1207.79 958.464,1209.28 959.05,1212.36 959.637,1209.53 960.223,1208.48 960.81,1210.21 961.396,1211.85 961.982,1209.65 962.569,1209.68 963.155,1211.46 963.742,1211.72 964.328,1211.79 964.915,1212.02 965.501,1212.38 966.087,1211.11 966.674,1212.51 967.26,1210.18 967.847,1212.04 968.433,1212 969.019,1213.82 969.606,1216.66 970.192,1214.06 970.779,1217.07 971.365,1215.74 971.951,1214.62 972.538,1216.24 973.124,1217.47 973.711,1216.01 974.297,1216.13 974.884,1215.01 975.47,1215.07 976.056,1216.5 976.643,1215.06 977.229,1216.7 977.816,1216.76 978.402,1216.8 978.988,1218.29 979.575,1218.31 980.161,1212.88 980.748,1211.77 981.334,1213.14 981.92,1212.03 982.507,1211.99 983.093,1215.31 983.68,1215.21 984.266,1213.75 984.853,1215.33 985.439,1216.51 986.025,1216.49 986.612,1218.21 987.198,1218.18 987.785,1216.84 988.371,1216.78 988.957,1215.54 989.544,1218.3 990.13,1216.75 990.717,1218.25 991.303,1216.82 991.889,1216.79 992.476,1218.49 993.062,1218.34 993.649,1219.48 994.235,1220.6 994.822,1220.38 995.408,1216.29 995.994,1217.63 996.581,1218.78 997.167,1217.3 997.754,1218.72 998.34,1218.85 998.926,1213.4 999.513,1214.92 1000.1,1216.56 1000.69,1221.88 1001.27,1221.64 1001.86,1220.15 1002.44,1218.79 1003.03,1218.48 1003.62,1215.67 1004.2,1216.94 1004.79,1215.62 1005.38,1215.99 1005.96,1215.96 1006.55,1214.71 1007.14,1214.7 1007.72,1212.1 1008.31,1212.37 1008.9,1212.46 1009.48,1212.83 1010.07,1211.41 1010.65,1213 1011.24,1215.78 1011.83,1216.08 1012.41,1214.83 1013,1214.96 1013.59,1216.38 1014.17,1217.87 1014.76,1212.38 1015.35,1211.37 1015.93,1211.59 1016.52,1209.06 1017.11,1210.74 1017.69,1209.68 1018.28,1210.27 1018.86,1211.77 1019.45,1209.29 1020.04,1210.95 1020.62,1212.72 1021.21,1215.74 1021.8,1215.69 1022.38,1217.06 1022.97,1218.49 1023.56,1218.56 1024.14,1218.4 1024.73,1218.38 1025.32,1220.88 1025.9,1219.49 1026.49,1217.81 1027.07,1220.8 1027.66,1221.9 1028.25,1222.82 1028.83,1221.16 1029.42,1222.27 1030.01,1221.75 1030.59,1220.13 1031.18,1226.67 1031.77,1224.94 1032.35,1223.07 1032.94,1219.89 1033.52,1218.4 1034.11,1222.15 1034.7,1221.97 1035.28,1219.09 1035.87,1221.5 1036.46,1217.15 1037.04,1215.82 1037.63,1214.28 1038.22,1214.26 1038.8,1215.58 1039.39,1214.12 1039.98,1215.75 1040.56,1218.58 1041.15,1218.07 1041.73,1216.94 1042.32,1218.39 1042.91,1218.31 1043.49,1215.57 1044.08,1218.08 1044.67,1218.01 1045.25,1216.26 1045.84,1212.02 1046.43,1210.71 1047.01,1209.65 1047.6,1209.98 1048.19,1210.3 1048.77,1210.57 1049.36,1210.86 1049.94,1212.62 1050.53,1211.74 1051.12,1213.2 1051.7,1211.98 1052.29,1212.27 1052.88,1215 1053.46,1215 1054.05,1214.9 1054.64,1215.32 1055.22,1218.12 1055.81,1219.57 1056.39,1219.4 1056.98,1219.18 1057.57,1217.58 1058.15,1217.33 1058.74,1215.79 1059.33,1217.16 1059.91,1217 1060.5,1216.97 1061.09,1216.95 1061.67,1218.29 1062.26,1214.28 1062.85,1215.85 1063.43,1215.91 1064.02,1215.87 1064.6,1218.82 1065.19,1220.24 1065.78,1221.54 1066.36,1221.25 1066.95,1221.16 1067.54,1218.18 1068.12,1219.42 1068.71,1220.77 1069.3,1221.62 1069.88,1218.78 1070.47,1217.41 1071.06,1217.32 1071.64,1218.48 1072.23,1219.87 1072.81,1219.64 1073.4,1219.56 1073.99,1218.05 1074.57,1216.24 1075.16,1213.54 1075.75,1210.95 1076.33,1211.47 1076.92,1210.28 1077.51,1210.71 1078.09,1209.81 1078.68,1208.58 1079.26,1210.65 1079.85,1208.24 1080.44,1210.22 1081.02,1213.45 1081.61,1213.5 1082.2,1213.57 1082.78,1213.97 1083.37,1214.17 1083.96,1212.84 1084.54,1212.87 1085.13,1214.33 1085.72,1214.58 1086.3,1217.5 1086.89,1220.1 1087.47,1218.36 1088.06,1216.74 1088.65,1216.56 1089.23,1217.66 1089.82,1220.49 1090.41,1220.25 1090.99,1222.64 1091.58,1223.73 1092.17,1225.09 1092.75,1226.07 1093.34,1225.36 1093.93,1227.53 1094.51,1229.61 1095.1,1228.72 1095.68,1226.76 1096.27,1224.85 1096.86,1225.35 1097.44,1220.81 1098.03,1219.27 1098.62,1223.25 1099.2,1222.84 1099.79,1218.05 1100.38,1216.45 1100.96,1215.09 1101.55,1216.14 1102.14,1215.91 1102.72,1215.79 1103.31,1215.97 1103.89,1217.42 1104.48,1217.34 1105.07,1219.9 1105.65,1220.82 1106.24,1220.49 1106.83,1221.54 1107.41,1221.36 1108,1220.73 1108.59,1220.43 1109.17,1220.01 1109.76,1222.06 1110.34,1220.34 1110.93,1220.27 1111.52,1218.76 1112.1,1218.48 1112.69,1219.64 1113.28,1217.88 1113.86,1217.8 1114.45,1219.39 1115.04,1217.82 1115.62,1216.59 1116.21,1216.47 1116.8,1217.92 1117.38,1215.05 1117.97,1215.24 1118.55,1217.94 1119.14,1217.97 1119.73,1218.1 1120.31,1216.65 1120.9,1215.35 1121.49,1215.26 1122.07,1213.81 1122.66,1215.48 1123.25,1219.77 1123.83,1219.56 1124.42,1216.73 1125.01,1216.69 1125.59,1220.86 1126.18,1219.18 1126.76,1218.91 1127.35,1217.34 1127.94,1218.59 1128.52,1215.82 1129.11,1213.5 1129.7,1213.79 1130.28,1214.17 1130.87,1214.28 1131.46,1214.31 1132.04,1212.98 1132.63,1216.03 1133.21,1214.77 1133.8,1216.46 1134.39,1218 1134.97,1212.2 1135.56,1212.76 1136.15,1211.62 1136.73,1212.95 1137.32,1214.8 1137.91,1214.85 1138.49,1219.06 1139.08,1219.97 1139.67,1221.16 1140.25,1220.75 1140.84,1222.23 1141.42,1217.86 1142.01,1217.81 1142.6,1216.46 1143.18,1213.97 1143.77,1216.85 1144.36,1215.54 1144.94,1216.72 1145.53,1214 1146.12,1210.08 1146.7,1210.27 1147.29,1210.62 1147.88,1212.23 1148.46,1211.08 1149.05,1211.49 1149.63,1209.08 1150.22,1206.45 1150.81,1207.15 1151.39,1207.52 1151.98,1210.79 1152.57,1211.04 1153.15,1212.38 1153.74,1213.99 1154.33,1215.41 1154.91,1219.5 1155.5,1219.1 1156.09,1217.34 1156.67,1216.04 1157.26,1215.84 1157.84,1214.64 1158.43,1212.03 1159.02,1212.23 1159.6,1214.06 1160.19,1212.79 1160.78,1212.77 1161.36,1214.51 1161.95,1214.47 1162.54,1214.72 1163.12,1214.33 1163.71,1212.89 1164.29,1214.05 1164.88,1218.18 1165.47,1219.04 1166.05,1216.17 1166.64,1216.1 1167.23,1215.97 1167.81,1217.05 1168.4,1218.06 1168.99,1218.14 1169.57,1217.92 1170.16,1219.1 1170.75,1217.4 1171.33,1217.17 1171.92,1221.05 1172.5,1220.95 1173.09,1224.6 1173.68,1225.34 1174.26,1226.29 1174.85,1227.48 1175.44,1225.43 1176.02,1223.54 1176.61,1224.37 1177.2,1222.64 1177.78,1221.05 1178.37,1223.28 1178.96,1224.36 1179.54,1222.81 1180.13,1222.03 1180.71,1220.56 1181.3,1221.6 1181.89,1219.67 1182.47,1219.29 1183.06,1218.85 1183.65,1220.06 1184.23,1221.6 1184.82,1221.11 1185.41,1223.54 1185.99,1219 1186.58,1214.62 1187.16,1214.54 1187.75,1214.68 1188.34,1214.67 1188.92,1213.23 1189.51,1211.95 1190.1,1212.22 1190.68,1208.18 1191.27,1205.78 1191.86,1204.91 1192.44,1206.5 1193.03,1204.05 1193.62,1202.07 1194.2,1202.68 1194.79,1204.53 1195.37,1206.41 1195.96,1205.53 1196.55,1209.08 1197.13,1209.5 1197.72,1214.03 1198.31,1214.34 1198.89,1213.09 1199.48,1213.29 1200.07,1214.74 1200.65,1214.63 1201.24,1211.91 1201.83,1213.42 1202.41,1213.71 1203,1215.33 1203.58,1212.56 1204.17,1214.12 1204.76,1212.95 1205.34,1214.46 1205.93,1217.54 1206.52,1216.22 1207.1,1216.07 1207.69,1215.86 1208.28,1215.87 1208.86,1215.91 1209.45,1216 1210.03,1213.21 1210.62,1213.54 1211.21,1215.97 1211.79,1218.35 1212.38,1219.18 1212.97,1220.4 1213.55,1217.2 1214.14,1218.41 1214.73,1216.89 1215.31,1219.4 1215.9,1220.37 1216.49,1218.6 1217.07,1218.36 1217.66,1213.68 1218.24,1216.17 1218.83,1217.46 1219.42,1217.52 1220,1218.5 1220.59,1221.06 1221.18,1219.53 1221.76,1218.06 1222.35,1219.41 1222.94,1219.16 1223.52,1219.21 1224.11,1219.17 1224.7,1221.42 1225.28,1222.31 1225.87,1221.84 1226.45,1220.04 1227.04,1219.77 1227.63,1220.82 1228.21,1220.64 1228.8,1221.86 1229.39,1223.12 1229.97,1220 1230.56,1221.15 1231.15,1219.41 1231.73,1219.2 1232.32,1218.04 1232.91,1220.56 1233.49,1221.62 1234.08,1222.91 1234.66,1224.01 1235.25,1225.06 1235.84,1227.32 1236.42,1225.58 1237.01,1224.95 1237.6,1221.29 1238.18,1216.82 1238.77,1214.01 1239.36,1215.61 1239.94,1215.72 1240.53,1212.92 1241.11,1214.33 1241.7,1216.17 1242.29,1214.99 1242.87,1216.45 1243.46,1215.22 1244.05,1212.72 1244.63,1210.56 1245.22,1209.38 1245.81,1212.52 1246.39,1211.65 1246.98,1213.49 1247.57,1215.2 1248.15,1211.12 1248.74,1211.43 1249.32,1211.68 1249.91,1210.37 1250.5,1209.26 1251.08,1209.89 1251.67,1208.63 1252.26,1211.77 1252.84,1212.09 1253.43,1209.65 1254.02,1208.42 1254.6,1208.84 1255.19,1209.08 1255.78,1209.67 1256.36,1209.7 1256.95,1208.41 1257.53,1210.12 1258.12,1212.13 1258.71,1209.48 1259.29,1210.99 1259.88,1212.67 1260.47,1212.82 1261.05,1214.63 1261.64,1214.81 1262.23,1216.38 1262.81,1216.22 1263.4,1216.33 1263.98,1215.21 1264.57,1213.73 1265.16,1212.45 1265.74,1210.07 1266.33,1210.57 1266.92,1210.66 1267.5,1209.49 1268.09,1211.12 1268.68,1211.92 1269.26,1211.91 1269.85,1210.48 1270.44,1210.79 1271.02,1212.31 1271.61,1211.14 1272.19,1208.64 1272.78,1207.69 1273.37,1208.41 1273.95,1209 1274.54,1210.64 1275.13,1212.43 1275.71,1212.68 1276.3,1211.48 1276.89,1210.34 1277.47,1214.84 1278.06,1215.11 1278.65,1215.27 1279.23,1219.69 1279.82,1219.32 1280.4,1216.63 1280.99,1219.22 1281.58,1218.92 1282.16,1219.9 1282.75,1219.62 1283.34,1218.18 1283.92,1217.96 1284.51,1215.15 1285.1,1217.82 1285.68,1218.79 1286.27,1220.1 1286.86,1215.52 1287.44,1215.5 1288.03,1211.38 1288.61,1211.74 1289.2,1211.89 1289.79,1211.57 1290.37,1210.47 1290.96,1206.66 1291.55,1207.13 1292.13,1206.17 1292.72,1206.88 1293.31,1207.31 1293.89,1211.74 1294.48,1211.8 1295.06,1210.5 1295.65,1213.41 1296.24,1216.49 1296.82,1216.43 1297.41,1215.21 1298,1213.85 1298.58,1215.4 1299.17,1216.81 1299.76,1216.82 1300.34,1220.92 1300.93,1220.68 1301.52,1220.47 1302.1,1220.34 1302.69,1221.24 1303.27,1223.66 1303.86,1223.08 1304.45,1222.81 1305.03,1220.84 1305.62,1216.56 1306.21,1215.22 1306.79,1215.07 1307.38,1212.12 1307.97,1211.06 1308.55,1209.85 1309.14,1208.66 1309.73,1205.28 1310.31,1204.35 1310.9,1204.99 1311.48,1206.84 1312.07,1205.94 1312.66,1209.33 1313.24,1208.66 1313.83,1209.09 1314.42,1209.27 1315,1209.78 1315.59,1214.38 1316.18,1213.23 1316.76,1210.76 1317.35,1211.02 1317.93,1208.72 1318.52,1207.71 1319.11,1208.31 1319.69,1207.49 1320.28,1209.74 1320.87,1210.04 1321.45,1212.02 1322.04,1211 1322.63,1212.77 1323.21,1212.74 1323.8,1214.39 1324.39,1215.92 1324.97,1214.51 1325.56,1211.89 1326.14,1210.6 1326.73,1211.8 1327.32,1211.87 1327.9,1214.79 1328.49,1213.33 1329.08,1212.04 1329.66,1213.68 1330.25,1212.44 1330.84,1214.23 1331.42,1214.46 1332.01,1211.81 1332.6,1213.69 1333.18,1213.8 1333.77,1213.79 1334.35,1213.82 1334.94,1216.85 1335.53,1216.76 1336.11,1216.97 1336.7,1215.68 1337.29,1214.41 1337.87,1212.01 1338.46,1213.56 1339.05,1213.57 1339.63,1213.79 1340.22,1215.51 1340.8,1215.64 1341.39,1218.53 1341.98,1218.34 1342.56,1219.29 1343.15,1219.01 1343.74,1218.75 1344.32,1222.62 1344.91,1220.94 1345.5,1223.47 1346.08,1223.07 1346.67,1225.52 1347.26,1227.82 1347.84,1228.63 1348.43,1232.09 1349.01,1228.96 1349.6,1230.81 1350.19,1229.03 1350.77,1227.04 1351.36,1224.97 1351.95,1225.96 1352.53,1226.74 1353.12,1227.54 1353.71,1225.5 1354.29,1223.99 1354.88,1222.32 1355.47,1220.66 1356.05,1221.99 1356.64,1220.27 1357.22,1219.89 1357.81,1218.16 1358.4,1213.82 1358.98,1215.13 1359.57,1210.92 1360.16,1211.39 1360.74,1213.29 1361.33,1213.29 1361.92,1213.43 1362.5,1214.88 1363.09,1213.82 1363.68,1212.07 1364.26,1212.38 1364.85,1212.67 1365.43,1211.71 1366.02,1211.73 1366.61,1212.13 1367.19,1210.96 1367.78,1211.12 1368.37,1210.11 1368.95,1211.66 1369.54,1213.3 1370.13,1214.58 1370.71,1212.92 1371.3,1214.51 1371.88,1213.02 1372.47,1213.32 1373.06,1212.17 1373.64,1213.81 1374.23,1213.88 1374.82,1210.02 1375.4,1210.54 1375.99,1213.22 1376.58,1213.36 1377.16,1213.38 1377.75,1213.2 1378.34,1210.52 1378.92,1210.73 1379.51,1212.29 1380.09,1215.04 1380.68,1215.17 1381.27,1214.96 1381.85,1216.36 1382.44,1214.96 1383.03,1219.17 1383.61,1221.91 1384.2,1221.58 1384.79,1222.94 1385.37,1218.79 1385.96,1218.97 1386.55,1217.42 1387.13,1215.53 1387.72,1215.36 1388.3,1219.17 1388.89,1216.26 1389.48,1216.42 1390.06,1215.14 1390.65,1212.61 1391.24,1215.56 1391.82,1213.96 1392.41,1216.57 1393,1212.49 1393.58,1212.43 1394.17,1209.84 1394.75,1211.46 1395.34,1210.51 1395.93,1208.05 1396.51,1207.3 1397.1,1209.09 1397.69,1209.35 1398.27,1208.17 1398.86,1211.38 1399.45,1211.63 1400.03,1211.87 1400.62,1213.37 1401.21,1213.38 1401.79,1214.78 1402.38,1214.8 1402.96,1213.67 1403.55,1215.21 1404.14,1215.32 1404.72,1217.02 1405.31,1218.31 1405.9,1216.67 1406.48,1216.62 1407.07,1216.19 1407.66,1216.34 1408.24,1216.11 1408.83,1217.47 1409.42,1218.93 1410,1218.93 1410.59,1215.76 1411.17,1212.88 1411.76,1214.62 1412.35,1212.05 1412.93,1212.5 1413.52,1212.68 1414.11,1215.59 1414.69,1215.61 1415.28,1212.91 1415.87,1211.83 1416.45,1212.36 1417.04,1212.46 1417.63,1214.26 1418.21,1215.55 1418.8,1216.02 1419.38,1213.41 1419.97,1210.62 1420.56,1210.98 1421.14,1212.6 1421.73,1214.16 1422.32,1214.57 1422.9,1213.07 1423.49,1214.79 1424.08,1214.8 1424.66,1213.67 1425.25,1215.17 1425.83,1216.63 1426.42,1215.39 1427.01,1215.43 1427.59,1216.77 1428.18,1219.28 1428.77,1225.94 1429.35,1221.57 1429.94,1221.36 1430.53,1221.38 1431.11,1222.37 1431.7,1219.32 1432.29,1220.44 1432.87,1217.42 1433.46,1218.6 1434.04,1218.33 1434.63,1218.25 1435.22,1216.75 1435.8,1216.67 1436.39,1216.65 1436.98,1216.4 1437.56,1216.27 1438.15,1216.18 1438.74,1216.24 1439.32,1218.7 1439.91,1218.68 1440.5,1219.74 1441.08,1220.66 1441.67,1224.55 1442.25,1224.22 1442.84,1221.02 1443.43,1220.74 1444.01,1220.34 1444.6,1220.32 1445.19,1218.54 1445.77,1216.94 1446.36,1218.43 1446.95,1219.28 1447.53,1219.35 1448.12,1219.25 1448.7,1216.32 1449.29,1213.51 1449.88,1215.16 1450.46,1215.38 1451.05,1213.93 1451.64,1216.95 1452.22,1216.68 1452.81,1216.81 1453.4,1216.65 1453.98,1215.25 1454.57,1213.52 1455.16,1212.23 1455.74,1211.02 1456.33,1213.7 1456.91,1209.59 1457.5,1211.44 1458.09,1211.68 1458.67,1210.46 1459.26,1211.85 1459.85,1209.52 1460.43,1209.85 1461.02,1215.47 1461.61,1212.49 1462.19,1214.02 1462.78,1212.74 1463.37,1214.02 1463.95,1210.01 1464.54,1208.78 1465.12,1210.5 1465.71,1209.24 1466.3,1211.82 1466.88,1210.36 1467.47,1212.17 1468.06,1211.22 1468.64,1213.02 1469.23,1211.99 1469.82,1212.35 1470.4,1211.22 1470.99,1210.11 1471.57,1210.86 1472.16,1208.61 1472.75,1207.64 1473.33,1207.97 1473.92,1209.88 1474.51,1211.71 1475.09,1211.8 1475.68,1212.08 1476.27,1214.79 1476.85,1216.28 1477.44,1214.74 1478.03,1217.17 1478.61,1217.27 1479.2,1217.14 1479.78,1218.45 1480.37,1219.77 1480.96,1218.2 1481.54,1220.97 1482.13,1220.96 1482.72,1219.45 1483.3,1220.61 1483.89,1220.39 1484.48,1217.65 1485.06,1219.03 1485.65,1217.6 1486.24,1214.9 1486.82,1217.82 1487.41,1219.13 1487.99,1218.98 1488.58,1220.13 1489.17,1221.33 1489.75,1219.57 1490.34,1220.78 1490.93,1219.12 1491.51,1216.08 1492.1,1219.83 1492.69,1218.51 1493.27,1218.47 1493.86,1219.8 1494.45,1219.79 1495.03,1218.05 1495.62,1220.4 1496.2,1219.99 1496.79,1220.99 1497.38,1217.86 1497.96,1216.44 1498.55,1219.16 1499.14,1218.86 1499.72,1218.65 1500.31,1218.62 1500.9,1221.09 1501.48,1220.85 1502.07,1222.01 1502.65,1221.72 1503.24,1221.25 1503.83,1219.34 1504.41,1220.49 1505,1217.48 1505.59,1216.16 1506.17,1217.32 1506.76,1217.36 1507.35,1215.79 1507.93,1218.05 1508.52,1216.42 1509.11,1219.25 1509.69,1222.95 1510.28,1222.48 1510.86,1223.48 1511.45,1222.78 1512.04,1223.65 1512.62,1224.71 1513.21,1225.61 1513.8,1223.95 1514.38,1222.2 1514.97,1221.9 1515.56,1221.52 1516.14,1218.55 1516.73,1217.19 1517.32,1217.13 1517.9,1215.86 1518.49,1218.62 1519.07,1215.84 1519.66,1217.08 1520.25,1218.21 1520.83,1216.43 1521.42,1219.16 1522.01,1218.84 1522.59,1213.09 1523.18,1215.98 1523.77,1217.44 1524.35,1216.02 1524.94,1216.25 1525.52,1217.44 1526.11,1214.56 1526.7,1214.69 1527.28,1213.39 1527.87,1213.21 1528.46,1212.01 1529.04,1210.58 1529.63,1212.04 1530.22,1213.51 1530.8,1213.4 1531.39,1213.72 1531.98,1215.32 1532.56,1214.21 1533.15,1214.3 1533.73,1215.95 1534.32,1217.36 1534.91,1215.81 1535.49,1216.02 1536.08,1216.14 1536.67,1218.9 1537.25,1218.79 1537.84,1218.67 1538.43,1218.43 1539.01,1218.33 1539.6,1215.81 1540.19,1213.19 1540.77,1214.81 1541.36,1216.62 1541.94,1218.15 1542.53,1217.09 1543.12,1215.54 1543.7,1215.52 1544.29,1213.92 1544.88,1216.72 1545.46,1214.02 1546.05,1216.77 1546.64,1216.8 1547.22,1215.58 1547.81,1218.35 1548.4,1217.03 1548.98,1218.25 1549.57,1216.93 1550.15,1216.85 1550.74,1216.84 1551.33,1216.74 1551.91,1219.48 1552.5,1217.93 1553.09,1213.53 1553.67,1212.29 1554.26,1216.66 1554.85,1215.04 1555.43,1213.63 1556.02,1213.64 1556.6,1213.9 1557.19,1212.68 1557.78,1212.74 1558.36,1214.47 1558.95,1214.45 1559.54,1215.89 1560.12,1215.49 1560.71,1215.38 1561.3,1216.88 1561.88,1216.86 1562.47,1218.18 1563.06,1218.03 1563.64,1219.32 1564.23,1217.76 1564.81,1216.47 1565.4,1217.88 1565.99,1216.56 1566.57,1216.57 1567.16,1219.17 1567.75,1219.37 1568.33,1223.23 1568.92,1223.95 1569.51,1225.94 1570.09,1225.42 1570.68,1226.09 1571.27,1229.3 1571.85,1227.16 1572.44,1231.83 1573.02,1228.21 1573.61,1227.61 1574.2,1225.46 1574.78,1226.01 1575.37,1221.36 1575.96,1218.22 1576.54,1218.3 1577.13,1218.17 1577.72,1216.86 1578.3,1215.68 1578.89,1214.47 1579.47,1215.51 1580.06,1211.33 1580.65,1211.57 1581.23,1211.71 1581.82,1211.87 1582.41,1207.85 1582.99,1205.44 1583.58,1204.42 1584.17,1202.08 1584.75,1203.92 1585.34,1200.32 1585.93,1202.41 1586.51,1204.4 1587.1,1204.98 1587.68,1205.39 1588.27,1203.09 1588.86,1203.77 1589.44,1204.39 1590.03,1205.18 1590.62,1207.16 1591.2,1207.26 1591.79,1209.32 1592.38,1208.3 1592.96,1207.12 1593.55,1206.45 1594.14,1206.91 1594.72,1207.37 1595.31,1209.18 1595.89,1209.59 1596.48,1211.26 1597.07,1209.95 1597.65,1209.97 1598.24,1210.28 1598.83,1213.33 1599.41,1212.17 1600,1212.51 1600.59,1211.5 1601.17,1210.66 1601.76,1212.01 1602.34,1213.45 1602.93,1213.56 1603.52,1213.81 1604.1,1214.07 1604.69,1215.57 1605.28,1216.99 1605.86,1218.39 1606.45,1215.63 1607.04,1214.43 1607.62,1217.38 1608.21,1214.55 1608.8,1213.5 1609.38,1212.41 1609.97,1211.47 1610.55,1211.87 1611.14,1215.44 1611.73,1217.02 1612.31,1219.66 1612.9,1219.17 1613.49,1215.14 1614.07,1215.1 1614.66,1216.55 1615.25,1216.52 1615.83,1216.14 1616.42,1213.29 1617.01,1213.62 1617.59,1212.35 1618.18,1212.53 1618.76,1212.75 1619.35,1214.18 1619.94,1212.86 1620.52,1210.27 1621.11,1211.91 1621.7,1214.6 1622.28,1216.19 1622.87,1216.25 1623.46,1220.41 1624.04,1220.18 1624.63,1221.18 1625.22,1222.21 1625.8,1220.49 1626.39,1220.27 1626.97,1215.75 1627.56,1211.67 1628.15,1211.77 1628.73,1210.38 1629.32,1212.32 1629.91,1211.03 1630.49,1211.22 1631.08,1210.16 1631.67,1210.6 1632.25,1212.29 1632.84,1213.69 1633.42,1215.15 1634.01,1213.64 1634.6,1213.62 1635.18,1216.58 1635.77,1219.3 1636.36,1219.21 1636.94,1220.22 1637.53,1217.26 1638.12,1218.32 1638.7,1218.28 1639.29,1218.22 1639.88,1214.11 1640.46,1214.34 1641.05,1214.39 1641.63,1213.02 1642.22,1213.03 1642.81,1214.74 1643.39,1213.24 1643.98,1217.39 1644.57,1215.81 1645.15,1214.51 1645.74,1216.01 1646.33,1218.58 1646.91,1218.22 1647.5,1216.6 1648.09,1215.27 1648.67,1215.22 1649.26,1215.13 1649.84,1215 1650.43,1216.18 1651.02,1216.22 1651.6,1217.34 1652.19,1214.52 1652.78,1213.23 1653.36,1211.98 1653.95,1210.78 1654.54,1212.17 1655.12,1213.77 1655.71,1212.38 1656.29,1212.48 1656.88,1215.7 1657.47,1216.89 1658.05,1214.03 1658.64,1215.56 1659.23,1214.19 1659.81,1214.21 1660.4,1214.19 1660.99,1213.92 1661.57,1213.93 1662.16,1215.68 1662.75,1214.24 1663.33,1214.25 1663.92,1211.77 1664.5,1212.08 1665.09,1213.69 1665.68,1213.91 1666.26,1215.5 1666.85,1211.29 1667.44,1211.5 1668.02,1210.08 1668.61,1210.16 1669.2,1210.43 1669.78,1212.06 1670.37,1212.35 1670.96,1212.51 1671.54,1212.67 1672.13,1214.32 1672.71,1214.2 1673.3,1214.04 1673.89,1211.43 1674.47,1211.78 1675.06,1207.83 1675.65,1207.25 1676.23,1207.4 1676.82,1209.19 1677.41,1210.95 1677.99,1215.38 1678.58,1216.52 1679.17,1217.79 1679.75,1220.06 1680.34,1221.03 1680.92,1222.2 1681.51,1220.53 1682.1,1220.19 1682.68,1219.94 1683.27,1221.14 1683.86,1219.52 1684.44,1219.04 1685.03,1217.47 1685.62,1220.01 1686.2,1219.71 1686.79,1220.71 1687.37,1221.66 1687.96,1220.15 1688.55,1221.28 1689.13,1219.42 1689.72,1219.32 1690.31,1227.24 1690.89,1224.19 1691.48,1221.32 1692.07,1219.49 1692.65,1220.7 1693.24,1222 1693.83,1220.33 1694.41,1222.76 1695,1225.3 1695.58,1224.83 1696.17,1226.94 1696.76,1226.62 1697.34,1226.2 1697.93,1221.89 1698.52,1225.41 1699.1,1223.66 1699.69,1222.21 1700.28,1221.65 1700.86,1224.14 1701.45,1226.44 1702.04,1225.74 1702.62,1225.2 1703.21,1223.01 1703.79,1221.17 1704.38,1219.41 1704.97,1217.71 1705.55,1216.4 1706.14,1214.84 1706.73,1214.71 1707.31,1214.58 1707.9,1214.78 1708.49,1213.3 1709.07,1213.23 1709.66,1214.71 1710.24,1214.46 1710.83,1215.76 1711.42,1213.09 1712,1213.1 1712.59,1214.68 1713.18,1217.74 1713.76,1217.55 1714.35,1214.92 1714.94,1220.54 1715.52,1224.39 1716.11,1222.48 1716.7,1219.5 1717.28,1219.15 1717.87,1220.06 1718.45,1218.46 1719.04,1217.18 1719.63,1213.08 1720.21,1214.34 1720.8,1211.62 1721.39,1212.99 1721.97,1213.27 1722.56,1217.21 1723.15,1219.51 1723.73,1220.67 1724.32,1219.24 1724.91,1218.83 1725.49,1217.22 1726.08,1216.94 1726.66,1215.42 1727.25,1215.45 1727.84,1218.22 1728.42,1218.17 1729.01,1217.83 1729.6,1217.32 1730.18,1215.79 1730.77,1214.5 1731.36,1213.26 1731.94,1214.73 1732.53,1214.59 1733.11,1214.57 1733.7,1210.56 1734.29,1212.17 1734.87,1213.69 1735.46,1216.41 1736.05,1217.77 1736.63,1216.6 1737.22,1213.51 1737.81,1212.36 1738.39,1212.6 1738.98,1209.77 1739.57,1208.49 1740.15,1208.69 1740.74,1211.48 1741.32,1211.87 1741.91,1209.41 1742.5,1208.35 1743.08,1207.13 1743.67,1209.13 1744.26,1209.47 1744.84,1211.22 1745.43,1211.65 1746.02,1214.59 1746.6,1214.59 1747.19,1217.2 1747.78,1214.41 1748.36,1216.02 1748.95,1213.48 1749.53,1213.73 1750.12,1215.14 1750.71,1213.85 1751.29,1215.07 1751.88,1211.07 1752.47,1215.13 1753.05,1216.5 1753.64,1219.14 1754.23,1220.2 1754.81,1224.03 1755.4,1223.42 1755.99,1220.33 1756.57,1221.36 1757.16,1218.53 1757.74,1217.33 1758.33,1216.16 1758.92,1215.84 1759.5,1215.85 1760.09,1210.35 1760.68,1209.05 1761.26,1210.82 1761.85,1209.68 1762.44,1210.11 1763.02,1211.59 1763.61,1213.12 1764.19,1215.72 1764.78,1215.75 1765.37,1216.97 1765.95,1212.66 1766.54,1214.45 1767.13,1214.3 1767.71,1217.12 1768.3,1218.09 1768.89,1220.7 1769.47,1220.74 1770.06,1220.19 1770.65,1222.59 1771.23,1219.81 1771.82,1219.52 1772.4,1217.82 1772.99,1217.6 1773.58,1212.31 1774.16,1212.4 1774.75,1209.44 1775.34,1208.48 1775.92,1207.65 1776.51,1209.55 1777.1,1208.67 1777.68,1204.77 1778.27,1209.54 1778.86,1211.15 1779.44,1212.7 1780.03,1215.76 1780.61,1215.82 1781.2,1216.02 1781.79,1215.88 1782.37,1214.63 1782.96,1214.79 1783.55,1213.35 1784.13,1213.55 1784.72,1215.09 1785.31,1216.59 1785.89,1215.21 1786.48,1215.3 1787.06,1210.77 1787.65,1210.85 1788.24,1209.65 1788.82,1211.2 1789.41,1211.63 1790,1211.95 1790.58,1210.9 1791.17,1212.51 1791.76,1211.17 1792.34,1211.5 1792.93,1211.75 1793.52,1210.66 1794.1,1210.9 1794.69,1209.55 1795.27,1208.72 1795.86,1210.29 1796.45,1210.62 1797.03,1208.24 1797.62,1211.55 1798.21,1213.24 1798.79,1211.89 1799.38,1207.71 1799.97,1209.42 1800.55,1213.9 1801.14,1217.9 1801.73,1220.6 1802.31,1220.09 1802.9,1221.41 1803.48,1221.12 1804.07,1220.99 1804.66,1220.83 1805.24,1222.17 1805.83,1219.15 1806.42,1218.93 1807,1218.66 1807.59,1218.63 1808.18,1219.7 1808.76,1216.58 1809.35,1216.62 1809.94,1219.29 1810.52,1220.29 1811.11,1221.21 1811.69,1222.17 1812.28,1221.88 1812.87,1222.77 1813.45,1220.62 1814.04,1221.87 1814.63,1224.23 1815.21,1223.84 1815.8,1224.97 1816.39,1220.42 1816.97,1220.31 1817.56,1220.05 1818.14,1217.17 1818.73,1216.91 1819.32,1215.64 1819.9,1215.62 1820.49,1210.27 1821.08,1211.56 1821.66,1210.49 1822.25,1212.02 1822.84,1212.37 1823.42,1212.68 1824.01,1213.06 1824.6,1211.69 1825.18,1209.33 1825.77,1213.89 1826.35,1213.78 1826.94,1212.66 1827.53,1212.78 1828.11,1217.09 1828.7,1215.47 1829.29,1212.81 1829.87,1213.13 1830.46,1213.55 1831.05,1213.92 1831.63,1215.62 1832.22,1216.88 1832.81,1215.43 1833.39,1215.31 1833.98,1214.09 1834.56,1215.53 1835.15,1213.96 1835.74,1215.32 1836.32,1217.83 1836.91,1217.38 1837.5,1216.02 1838.08,1215.71 1838.67,1214.38 1839.26,1214.62 1839.84,1213.16 1840.43,1213.14 1841.01,1217.34 1841.6,1215.78 1842.19,1214.45 1842.77,1211.76 1843.36,1213.33 1843.95,1210.46 1844.53,1210.98 1845.12,1209.85 1845.71,1208.89 1846.29,1206.38 1846.88,1208.16 1847.47,1208.67 1848.05,1209.35 1848.64,1209.8 1849.22,1213.06 1849.81,1210.72 1850.4,1212.45 1850.98,1211.1 1851.57,1209.91 1852.16,1211.42 1852.74,1211.62 1853.33,1213.43 1853.92,1213.5 1854.5,1214.99 1855.09,1213.7 1855.68,1212.66 1856.26,1218.15 1856.85,1218.23 1857.43,1218.01 1858.02,1219.45 1858.61,1219.28 1859.19,1218.07 1859.78,1218.22 1860.37,1217.97 1860.95,1217.95 1861.54,1213.68 1862.13,1215.11 1862.71,1215.21 1863.3,1215.27 1863.88,1213.92 1864.47,1212.78 1865.06,1212.89 1865.64,1211.93 1866.23,1212.29 1866.82,1215.4 1867.4,1216.6 1867.99,1216.61 1868.58,1219.11 1869.16,1220.65 1869.75,1217.29 1870.34,1215.93 1870.92,1221.5 1871.51,1222.77 1872.09,1222.36 1872.68,1220.93 1873.27,1219.21 1873.85,1223.05 1874.44,1224.07 1875.03,1223.35 1875.61,1223.02 1876.2,1225.43 1876.79,1223.44 1877.37,1221.41 1877.96,1219.8 1878.55,1219.52 1879.13,1220.65 1879.72,1220.3 1880.3,1218.45 1880.89,1215.69 1881.48,1215.7 1882.06,1215.81 1882.65,1215.84 1883.24,1215.66 1883.82,1216.95 1884.41,1218.34 1885,1218.1 1885.58,1219.32 1886.17,1218.95 1886.76,1219.93 1887.34,1216.96 1887.93,1214.08 1888.51,1216.48 1889.1,1217.38 1889.69,1214.73 1890.27,1213.4 1890.86,1213.57 1891.45,1211.96 1892.03,1213.92 1892.62,1215.16 1893.21,1215.21 1893.79,1215.3 1894.38,1215.39 1894.96,1215.49 1895.55,1216.79 1896.14,1216.74 1896.72,1215.27 1897.31,1218.17 1897.9,1218.14 1898.48,1217.96 1899.07,1213.42 1899.66,1214.85 1900.24,1212.33 1900.83,1212.46 1901.42,1213.7 1902,1215.29 1902.59,1215.32 1903.17,1218.2 1903.76,1216.98 1904.35,1215.37 1904.93,1215.46 1905.52,1213.71 1906.11,1212.51 1906.69,1207.21 1907.28,1203.67 1907.87,1206.98 1908.45,1205.94 1909.04,1205.29 1909.63,1205.82 1910.21,1203.87 1910.8,1206.08 1911.38,1210.8 1911.97,1212.14 1912.56,1212.47 1913.14,1212.75 1913.73,1214.31 1914.32,1214.61 1914.9,1215.8 1915.49,1216.2 1916.08,1217.66 1916.66,1217.44 1917.25,1217.4 1917.83,1215.64 1918.42,1213.99 1919.01,1215.25 1919.59,1210.05 1920.18,1210.15 1920.77,1211.69 1921.35,1213.17 1921.94,1213.48 1922.53,1216.22 1923.11,1216.19 1923.7,1212.09 1924.29,1212.15 1924.87,1214.81 1925.46,1215.09 1926.04,1215.12 1926.63,1216.52 1927.22,1213.86 1927.8,1213.78 1928.39,1217.89 1928.98,1220.58 1929.56,1217.5 1930.15,1218.62 1930.74,1218.49 1931.32,1216.86 1931.91,1217.02 1932.5,1216.85 1933.08,1216.4 1933.67,1214.79 1934.25,1216.1 1934.84,1214.84 1935.43,1214.76 1936.01,1214.7 1936.6,1216.01 1937.19,1214.91 1937.77,1217.79 1938.36,1219.35 1938.95,1219.21 1939.53,1218.51 1940.12,1217.2 1940.71,1217.31 1941.29,1216.19 1941.88,1214.8 1942.46,1214.96 1943.05,1216.19 1943.64,1217.43 1944.22,1215.74 1944.81,1214.17 1945.4,1214.21 1945.98,1215.57 1946.57,1215.52 1947.16,1212.92 1947.74,1214.41 1948.33,1210.65 1948.91,1210.68 1949.5,1205.34 1950.09,1205.74 1950.67,1204.97 1951.26,1206.93 1951.85,1208.85 1952.43,1210.73 1953.02,1211.13 1953.61,1213.99 1954.19,1214.48 1954.78,1214.58 1955.37,1217.15 1955.95,1218.72 1956.54,1218.53 1957.12,1218.07 1957.71,1218.16 1958.3,1216.84 1958.88,1219.48 1959.47,1220.75 1960.06,1216.36 1960.64,1216.06 1961.23,1213.14 1961.82,1213.26 1962.4,1212.14 1962.99,1214.93 1963.58,1213.71 1964.16,1215.11 1964.75,1217.92 1965.33,1217.65 1965.92,1216.1 1966.51,1213.37 1967.09,1213.47 1967.68,1213.83 1968.27,1212.41 1968.85,1212.64 1969.44,1214.14 1970.03,1211.24 1970.61,1212.73 1971.2,1213.02 1971.78,1213.26 1972.37,1211.96 1972.96,1213.61 1973.54,1214.89 1974.13,1217.51 1974.72,1217.5 1975.3,1215.91 1975.89,1217.44 1976.48,1212.9 1977.06,1212.75 1977.65,1211.75 1978.24,1209 1978.82,1210.64 1979.41,1211.03 1979.99,1213.84 1980.58,1214.05 1981.17,1212.66 1981.75,1214.2 1982.34,1212.88 1982.93,1212.05 1983.51,1209.41 1984.1,1208.31 1984.69,1207.25 1985.27,1210.3 1985.86,1211.64 1986.45,1210.64 1987.03,1209.53 1987.62,1207.28 1988.2,1208.92 1988.79,1209.68 1989.38,1210.12 1989.96,1213.36 1990.55,1216.3 1991.14,1216.48 1991.72,1213.99 1992.31,1212.83 1992.9,1211.57 1993.48,1210.21 1994.07,1210.34 1994.65,1210.88 1995.24,1211.1 1995.83,1211.25 1996.41,1211.15 1997,1211.61 1997.59,1210.6 1998.17,1213.5 1998.76,1213.42 1999.35,1210.36 1999.93,1211.64 2000.52,1213.34 2001.11,1214.73 2001.69,1216.3 2002.28,1216.11 2002.86,1215.85 2003.45,1215.67 2004.04,1215.62 2004.62,1217.03 2005.21,1215.48 2005.8,1215.44 2006.38,1219.62 2006.97,1220.72 2007.56,1219.09 2008.14,1215.82 2008.73,1217.38 2009.32,1217.03 2009.9,1219.64 2010.49,1216.69 2011.07,1219.32 2011.66,1219.13 2012.25,1217.71 2012.83,1219.22 2013.42,1217.66 2014.01,1217.47 2014.59,1216.08 2015.18,1221.57 2015.77,1221.31 2016.35,1221.13 2016.94,1216.68 2017.53,1212.83 2018.11,1215.81 2018.7,1215.5 2019.28,1214.08 2019.87,1215.93 2020.46,1215.95 2021.04,1214.62 2021.63,1213.47 2022.22,1209.47 2022.8,1210 2023.39,1215.75 2023.98,1217.06 2024.56,1216.91 2025.15,1216.75 2025.73,1216.74 2026.32,1215.17 2026.91,1214.05 2027.49,1212.59 2028.08,1215.37 2028.67,1215.08 2029.25,1214.71 2029.84,1216.08 2030.43,1216.24 2031.01,1217.62 2031.6,1217.48 2032.19,1219.15 2032.77,1220.31 2033.36,1220.11 2033.94,1219.99 2034.53,1213.21 2035.12,1213.62 2035.7,1217.75 2036.29,1218.67 2036.88,1217.29 2037.46,1217.16 2038.05,1216.81 2038.64,1216.63 2039.22,1215.2 2039.81,1216.5 2040.4,1215 2040.98,1214.95 2041.57,1216.53 2042.15,1213.94 2042.74,1218.09 2043.33,1220.48 2043.91,1220.16 2044.5,1221.1 2045.09,1220.93 2045.67,1226.35 2046.26,1227.09 2046.85,1226.54 2047.43,1227.43 2048.02,1224.1 2048.6,1224.82 2049.19,1227.14 2049.78,1226.37 2050.36,1227.31 2050.95,1226.6 2051.54,1226.19 2052.12,1225.69 2052.71,1222.61 2053.3,1223.73 2053.88,1224.8 2054.47,1224.33 2055.06,1222.57 2055.64,1223.64 2056.23,1220.65 2056.81,1223.02 2057.4,1220.12 2057.99,1221.58 2058.57,1218.49 2059.16,1218.42 2059.75,1215.65 2060.33,1214.38 2060.92,1214.44 2061.51,1214.56 2062.09,1214.6 2062.68,1214.82 2063.27,1216.48 2063.85,1216 2064.44,1218.94 2065.02,1217.55 2065.61,1217.27 2066.2,1215.68 2066.78,1214.31 2067.37,1208.69 2067.96,1208.94 2068.54,1210.79 2069.13,1210.89 2069.72,1209.79 2070.3,1210.11 2070.89,1209.25 2071.48,1209.64 2072.06,1212.97 2072.65,1214.48 2073.23,1217.36 2073.82,1217.04 2074.41,1218.47 2074.99,1216.9 2075.58,1219.64 2076.17,1218.56 2076.75,1218.24 2077.34,1218.02 2077.93,1217.87 2078.51,1217.83 2079.1,1215.93 2079.68,1216.04 2080.27,1217.43 2080.86,1217.47 2081.44,1217.3 2082.03,1216.79 2082.62,1212.92 2083.2,1213.23 2083.79,1212.15 2084.38,1212.4 2084.96,1211.23 2085.55,1211.45 2086.14,1213.08 2086.72,1213.44 2087.31,1217.54 2087.89,1219.9 2088.48,1219.59 2089.07,1220.73 2089.65,1223.12 2090.24,1223.98 2090.83,1224.66 2091.41,1225.35 2092,1223.14 2092.59,1223 2093.17,1222.54 2093.76,1220.66 2094.35,1220.56 2094.93,1220.61 2095.52,1221.71 2096.1,1221.65 2096.69,1222.8 2097.28,1219.92 2097.86,1221.14 2098.45,1219.33 2099.04,1216.23 2099.62,1216.55 2100.21,1216.4 2100.8,1213.81 2101.38,1215.18 2101.97,1213.96 2102.55,1210.42 2103.14,1209.25 2103.73,1209.32 2104.31,1209.64 2104.9,1209.81 2105.49,1211.51 2106.07,1209.09 2106.66,1213.67 2107.25,1215.22 2107.83,1215.16 2108.42,1215.39 2109.01,1215.06 2109.59,1215.12 2110.18,1216.67 2110.76,1213.97 2111.35,1214.09 2111.94,1214.1 2112.52,1214.26 2113.11,1215.67 2113.7,1215.37 2114.28,1215.35 2114.87,1214.29 2115.46,1211.85 2116.04,1210.4 2116.63,1210.93 2117.22,1209.86 2117.8,1208.76 2118.39,1211.82 2118.97,1210.77 2119.56,1212.48 2120.15,1212.66 2120.73,1209.91 2121.32,1212.83 2121.91,1214.45 2122.49,1210.37 2123.08,1211.93 2123.67,1212.06 2124.25,1211.06 2124.84,1208.5 2125.42,1210.48 2126.01,1212.32 2126.6,1211.1 2127.18,1210.18 2127.77,1210.41 2128.36,1210.57 2128.94,1208.19 2129.53,1210.1 2130.12,1210.27 2130.7,1207.81 2131.29,1209.71 2131.88,1212.75 2132.46,1214.36 2133.05,1214.35 2133.63,1212.92 2134.22,1213.06 2134.81,1214.42 2135.39,1212.77 2135.98,1212.78 2136.57,1212.89 2137.15,1213.04 2137.74,1214.55 2138.33,1214.37 2138.91,1217.18 2139.5,1216.99 2140.09,1218.07 2140.67,1218.01 2141.26,1219.14 2141.84,1217.38 2142.43,1214.72 2143.02,1216.13 2143.6,1214.75 2144.19,1211.96 2144.78,1213.38 2145.36,1214.66 2145.95,1213.26 2146.54,1212.03 2147.12,1210.76 2147.71,1214.06 2148.3,1214.18 2148.88,1212.57 2149.47,1214.21 2150.05,1216.69 2150.64,1213.96 2151.23,1215.36 2151.81,1214.95 2152.4,1213.73 2152.99,1212.13 2153.57,1213.69 2154.16,1212.09 2154.75,1210.97 2155.33,1213.87 2155.92,1216.7 2156.5,1219.22 2157.09,1218.69 2157.68,1218.36 2158.26,1218.13 \"/>\n<path clip-path=\"url(#clip152)\" d=\"M986.025 1215.98 L986.612 1215.98 L987.198 1215.98 L987.785 1215.98 L988.371 1215.98 L988.957 1215.98 L989.544 1215.98 L990.13 1215.98 L990.717 1215.98 L991.303 1215.98 L991.889 1215.98 L992.476 1215.98 L993.062 1215.98 L993.649 1215.98 L994.235 1215.98 L994.822 1215.98 L995.408 1215.98 L995.994 1215.98 L996.581 1215.98 L997.167 1215.98 L997.754 1215.98 L998.34 1215.98 L998.926 1215.98 L999.513 1215.98 L1000.1 1215.98 L1000.69 1215.98 L1001.27 1215.98 L1001.86 1215.98 L1002.44 1215.98 L1003.03 1215.98 L1003.62 1215.98 L1004.2 1215.98 L1004.79 1215.98 L1005.38 1215.98 L1005.96 1215.98 L1006.55 1215.98 L1007.14 1215.98 L1007.72 1215.98 L1008.31 1215.98 L1008.9 1215.98 L1009.48 1215.98 L1010.07 1215.98 L1010.65 1215.98 L1011.24 1215.98 L1011.83 1215.98 L1012.41 1215.98 L1013 1215.98 L1013.59 1215.98 L1014.17 1215.98 L1014.76 1215.98 L1015.35 1215.98 L1015.93 1215.98 L1016.52 1215.98 L1017.11 1215.98 L1017.69 1215.98 L1018.28 1215.98 L1018.86 1215.98 L1019.45 1215.98 L1020.04 1215.98 L1020.62 1215.98 L1021.21 1215.98 L1021.8 1215.98 L1022.38 1215.98 L1022.97 1215.98 L1023.56 1215.98 L1024.14 1215.98 L1024.73 1215.98 L1025.32 1215.98 L1025.9 1215.98 L1026.49 1215.98 L1027.07 1215.98 L1027.66 1215.98 L1028.25 1215.98 L1028.83 1215.98 L1029.42 1215.98 L1030.01 1215.98 L1030.59 1215.98 L1031.18 1215.98 L1031.77 1215.98 L1032.35 1215.98 L1032.94 1215.98 L1033.52 1215.98 L1034.11 1215.98 L1034.7 1215.98 L1035.28 1215.98 L1035.87 1215.98 L1036.46 1215.98 L1037.04 1215.98 L1037.63 1215.98 L1038.22 1215.98 L1038.8 1215.98 L1039.39 1215.98 L1039.98 1215.98 L1040.56 1215.98 L1041.15 1215.98 L1041.73 1215.98 L1042.32 1215.98 L1042.91 1215.98 L1043.49 1215.98 L1044.08 1215.98 L1044.67 1215.98 L1045.25 1215.98 L1045.84 1215.98 L1046.43 1215.98 L1047.01 1215.98 L1047.6 1215.98 L1048.19 1215.98 L1048.77 1215.98 L1049.36 1215.98 L1049.94 1215.98 L1050.53 1215.98 L1051.12 1215.98 L1051.7 1215.98 L1052.29 1215.98 L1052.88 1215.98 L1053.46 1215.98 L1054.05 1215.98 L1054.64 1215.98 L1055.22 1215.98 L1055.81 1215.98 L1056.39 1215.98 L1056.98 1215.98 L1057.57 1215.98 L1058.15 1215.98 L1058.74 1215.98 L1059.33 1215.98 L1059.91 1215.98 L1060.5 1215.98 L1061.09 1215.98 L1061.67 1215.98 L1062.26 1215.98 L1062.85 1215.98 L1063.43 1215.98 L1064.02 1215.98 L1064.6 1215.98 L1065.19 1215.98 L1065.78 1215.98 L1066.36 1215.98 L1066.95 1215.98 L1067.54 1215.98 L1068.12 1215.98 L1068.71 1215.98 L1069.3 1215.98 L1069.88 1215.98 L1070.47 1215.98 L1071.06 1215.98 L1071.64 1215.98 L1072.23 1215.98 L1072.81 1215.98 L1073.4 1215.98 L1073.99 1215.98 L1074.57 1215.98 L1075.16 1215.98 L1075.75 1215.98 L1076.33 1215.98 L1076.92 1215.98 L1077.51 1215.98 L1078.09 1215.98 L1078.68 1215.98 L1079.26 1215.98 L1079.85 1215.98 L1080.44 1215.98 L1081.02 1215.98 L1081.61 1215.98 L1082.2 1215.98 L1082.78 1215.98 L1083.37 1215.98 L1083.96 1215.98 L1084.54 1215.98 L1085.13 1215.98 L1085.72 1215.98 L1086.3 1215.98 L1086.89 1215.98 L1087.47 1215.98 L1088.06 1215.98 L1088.65 1215.98 L1089.23 1215.98 L1089.82 1215.98 L1090.41 1215.98 L1090.99 1215.98 L1091.58 1215.98 L1092.17 1215.98 L1092.75 1215.98 L1093.34 1215.98 L1093.93 1215.98 L1094.51 1215.98 L1095.1 1215.98 L1095.68 1215.98 L1096.27 1215.98 L1096.86 1215.98 L1097.44 1215.98 L1098.03 1215.98 L1098.62 1215.98 L1099.2 1215.98 L1099.79 1215.98 L1100.38 1215.98 L1100.96 1215.98 L1101.55 1215.98 L1102.14 1215.98 L1102.72 1215.98 L1103.31 1215.98 L1103.89 1215.98 L1104.48 1215.98 L1105.07 1215.98 L1105.65 1215.98 L1106.24 1215.98 L1106.83 1215.98 L1107.41 1215.98 L1108 1215.98 L1108.59 1215.98 L1109.17 1215.98 L1109.76 1215.98 L1110.34 1215.98 L1110.93 1215.98 L1111.52 1215.98 L1112.1 1215.98 L1112.69 1215.98 L1113.28 1215.98 L1113.86 1215.98 L1114.45 1215.98 L1115.04 1215.98 L1115.62 1215.98 L1116.21 1215.98 L1116.8 1215.98 L1117.38 1215.98 L1117.97 1215.98 L1118.55 1215.98 L1119.14 1215.98 L1119.73 1215.98 L1120.31 1215.98 L1120.9 1215.98 L1121.49 1215.98 L1122.07 1215.98 L1122.66 1215.98 L1123.25 1215.98 L1123.83 1215.98 L1124.42 1215.98 L1125.01 1215.98 L1125.59 1215.98 L1126.18 1215.98 L1126.76 1215.98 L1127.35 1215.98 L1127.94 1215.98 L1128.52 1215.98 L1129.11 1215.98 L1129.7 1215.98 L1130.28 1215.98 L1130.87 1215.98 L1131.46 1215.98 L1132.04 1215.98 L1132.63 1215.98 L1133.21 1215.98 L1133.8 1215.98 L1134.39 1215.98 L1134.97 1215.98 L1135.56 1215.98 L1136.15 1215.98 L1136.73 1215.98 L1137.32 1215.98 L1137.91 1215.98 L1138.49 1215.98 L1139.08 1215.98 L1139.67 1215.98 L1140.25 1215.98 L1140.84 1215.98 L1141.42 1215.98 L1142.01 1215.98 L1142.6 1215.98 L1143.18 1215.98 L1143.77 1215.98 L1144.36 1215.98 L1144.94 1215.98 L1145.53 1215.98 L1146.12 1215.98 L1146.7 1215.98 L1147.29 1215.98 L1147.88 1215.98 L1148.46 1215.98 L1149.05 1215.98 L1149.63 1215.98 L1150.22 1215.98 L1150.81 1215.98 L1151.39 1215.98 L1151.98 1215.98 L1152.57 1215.98 L1153.15 1215.98 L1153.74 1215.98 L1154.33 1215.98 L1154.91 1215.98 L1155.5 1215.98 L1156.09 1215.98 L1156.67 1215.98 L1157.26 1215.98 L1157.84 1215.98 L1158.43 1215.98 L1159.02 1215.98 L1159.6 1215.98 L1160.19 1215.98 L1160.78 1215.98 L1161.36 1215.98 L1161.95 1215.98 L1162.54 1215.98 L1163.12 1215.98 L1163.71 1215.98 L1164.29 1215.98 L1164.88 1215.98 L1165.47 1215.98 L1166.05 1215.98 L1166.64 1215.98 L1167.23 1215.98 L1167.81 1215.98 L1168.4 1215.98 L1168.99 1215.98 L1169.57 1215.98 L1170.16 1215.98 L1170.75 1215.98 L1171.33 1215.98 L1171.92 1215.98 L1172.5 1215.98 L1173.09 1215.98 L1173.68 1215.98 L1174.26 1215.98 L1174.85 1215.98 L1175.44 1215.98 L1176.02 1215.98 L1176.61 1215.98 L1177.2 1215.98 L1177.78 1215.98 L1178.37 1215.98 L1178.96 1215.98 L1179.54 1215.98 L1180.13 1215.98 L1180.71 1215.98 L1181.3 1215.98 L1181.89 1215.98 L1182.47 1215.98 L1183.06 1215.98 L1183.65 1215.98 L1184.23 1215.98 L1184.82 1215.98 L1185.41 1215.98 L1185.99 1215.98 L1186.58 1215.98 L1187.16 1215.98 L1187.75 1215.98 L1188.34 1215.98 L1188.92 1215.98 L1189.51 1215.98 L1190.1 1215.98 L1190.68 1215.98 L1191.27 1215.98 L1191.86 1215.98 L1192.44 1215.98 L1193.03 1215.98 L1193.62 1215.98 L1194.2 1215.98 L1194.79 1215.98 L1195.37 1215.98 L1195.96 1215.98 L1196.55 1215.98 L1197.13 1215.98 L1197.72 1215.98 L1198.31 1215.98 L1198.89 1215.98 L1199.48 1215.98 L1200.07 1215.98 L1200.65 1215.98 L1201.24 1215.98 L1201.83 1215.98 L1202.41 1215.98 L1203 1215.98 L1203.58 1215.98 L1204.17 1215.98 L1204.76 1215.98 L1205.34 1215.98 L1205.93 1215.98 L1206.52 1215.98 L1207.1 1215.98 L1207.69 1215.98 L1208.28 1215.98 L1208.86 1215.98 L1209.45 1215.98 L1210.03 1215.98 L1210.62 1215.98 L1211.21 1215.98 L1211.79 1215.98 L1212.38 1215.98 L1212.97 1215.98 L1213.55 1215.98 L1214.14 1215.98 L1214.73 1215.98 L1215.31 1215.98 L1215.9 1215.98 L1216.49 1215.98 L1217.07 1215.98 L1217.66 1215.98 L1218.24 1215.98 L1218.83 1215.98 L1219.42 1215.98 L1220 1215.98 L1220.59 1215.98 L1221.18 1215.98 L1221.76 1215.98 L1222.35 1215.98 L1222.94 1215.98 L1223.52 1215.98 L1224.11 1215.98 L1224.7 1215.98 L1225.28 1215.98 L1225.87 1215.98 L1226.45 1215.98 L1227.04 1215.98 L1227.63 1215.98 L1228.21 1215.98 L1228.8 1215.98 L1229.39 1215.98 L1229.97 1215.98 L1230.56 1215.98 L1231.15 1215.98 L1231.73 1215.98 L1232.32 1215.98 L1232.91 1215.98 L1233.49 1215.98 L1234.08 1215.98 L1234.66 1215.98 L1235.25 1215.98 L1235.84 1215.98 L1236.42 1215.98 L1237.01 1215.98 L1237.6 1215.98 L1238.18 1215.98 L1238.77 1215.98 L1239.36 1215.98 L1239.94 1215.98 L1240.53 1215.98 L1241.11 1215.98 L1241.7 1215.98 L1242.29 1215.98 L1242.87 1215.98 L1243.46 1215.98 L1244.05 1215.98 L1244.63 1215.98 L1245.22 1215.98 L1245.81 1215.98 L1246.39 1215.98 L1246.98 1215.98 L1247.57 1215.98 L1248.15 1215.98 L1248.74 1215.98 L1249.32 1215.98 L1249.91 1215.98 L1250.5 1215.98 L1251.08 1215.98 L1251.67 1215.98 L1252.26 1215.98 L1252.84 1215.98 L1253.43 1215.98 L1254.02 1215.98 L1254.6 1215.98 L1255.19 1215.98 L1255.78 1215.98 L1256.36 1215.98 L1256.95 1215.98 L1257.53 1215.98 L1258.12 1215.98 L1258.71 1215.98 L1259.29 1215.98 L1259.88 1215.98 L1260.47 1215.98 L1261.05 1215.98 L1261.64 1215.98 L1262.23 1215.98 L1262.81 1215.98 L1263.4 1215.98 L1263.98 1215.98 L1264.57 1215.98 L1265.16 1215.98 L1265.74 1215.98 L1266.33 1215.98 L1266.92 1215.98 L1267.5 1215.98 L1268.09 1215.98 L1268.68 1215.98 L1269.26 1215.98 L1269.85 1215.98 L1270.44 1215.98 L1271.02 1215.98 L1271.61 1215.98 L1272.19 1215.98 L1272.78 1215.98 L1273.37 1215.98 L1273.95 1215.98 L1274.54 1215.98 L1275.13 1215.98 L1275.71 1215.98 L1276.3 1215.98 L1276.89 1215.98 L1277.47 1215.98 L1278.06 1215.98 L1278.65 1215.98 L1279.23 1215.98 L1279.82 1215.98 L1280.4 1215.98 L1280.99 1215.98 L1281.58 1215.98 L1282.16 1215.98 L1282.75 1215.98 L1283.34 1215.98 L1283.92 1215.98 L1284.51 1215.98 L1285.1 1215.98 L1285.68 1215.98 L1286.27 1215.98 L1286.86 1215.98 L1287.44 1215.98 L1288.03 1215.98 L1288.61 1215.98 L1289.2 1215.98 L1289.79 1215.98 L1290.37 1215.98 L1290.96 1215.98 L1291.55 1215.98 L1292.13 1215.98 L1292.72 1215.98 L1293.31 1215.98 L1293.89 1215.98 L1294.48 1215.98 L1295.06 1215.98 L1295.65 1215.98 L1296.24 1215.98 L1296.82 1215.98 L1297.41 1215.98 L1298 1215.98 L1298.58 1215.98 L1299.17 1215.98 L1299.76 1215.98 L1300.34 1215.98 L1300.93 1215.98 L1301.52 1215.98 L1302.1 1215.98 L1302.69 1215.98 L1303.27 1215.98 L1303.86 1215.98 L1304.45 1215.98 L1305.03 1215.98 L1305.62 1215.98 L1306.21 1215.98 L1306.79 1215.98 L1307.38 1215.98 L1307.97 1215.98 L1308.55 1215.98 L1309.14 1215.98 L1309.73 1215.98 L1310.31 1215.98 L1310.9 1215.98 L1311.48 1215.98 L1312.07 1215.98 L1312.66 1215.98 L1313.24 1215.98 L1313.83 1215.98 L1314.42 1215.98 L1315 1215.98 L1315.59 1215.98 L1316.18 1215.98 L1316.76 1215.98 L1317.35 1215.98 L1317.93 1215.98 L1318.52 1215.98 L1319.11 1215.98 L1319.69 1215.98 L1320.28 1215.98 L1320.87 1215.98 L1321.45 1215.98 L1322.04 1215.98 L1322.63 1215.98 L1323.21 1215.98 L1323.8 1215.98 L1324.39 1215.98 L1324.97 1215.98 L1325.56 1215.98 L1326.14 1215.98 L1326.73 1215.98 L1327.32 1215.98 L1327.9 1215.98 L1328.49 1215.98 L1329.08 1215.98 L1329.66 1215.98 L1330.25 1215.98 L1330.84 1215.98 L1331.42 1215.98 L1332.01 1215.98 L1332.6 1215.98 L1333.18 1215.98 L1333.77 1215.98 L1334.35 1215.98 L1334.94 1215.98 L1335.53 1215.98 L1336.11 1215.98 L1336.7 1215.98 L1337.29 1215.98 L1337.87 1215.98 L1338.46 1215.98 L1339.05 1215.98 L1339.63 1215.98 L1340.22 1215.98 L1340.8 1215.98 L1341.39 1215.98 L1341.98 1215.98 L1342.56 1215.98 L1343.15 1215.98 L1343.74 1215.98 L1344.32 1215.98 L1344.91 1215.98 L1345.5 1215.98 L1346.08 1215.98 L1346.67 1215.98 L1347.26 1215.98 L1347.84 1215.98 L1348.43 1215.98 L1349.01 1215.98 L1349.6 1215.98 L1350.19 1215.98 L1350.77 1215.98 L1351.36 1215.98 L1351.95 1215.98 L1352.53 1215.98 L1353.12 1215.98 L1353.71 1215.98 L1354.29 1215.98 L1354.88 1215.98 L1355.47 1215.98 L1356.05 1215.98 L1356.64 1215.98 L1357.22 1215.98 L1357.81 1215.98 L1358.4 1215.98 L1358.98 1215.98 L1359.57 1215.98 L1360.16 1215.98 L1360.74 1215.98 L1361.33 1215.98 L1361.92 1215.98 L1362.5 1215.98 L1363.09 1215.98 L1363.68 1215.98 L1364.26 1215.98 L1364.85 1215.98 L1365.43 1215.98 L1366.02 1215.98 L1366.61 1215.98 L1367.19 1215.98 L1367.78 1215.98 L1368.37 1215.98 L1368.95 1215.98 L1369.54 1215.98 L1370.13 1215.98 L1370.71 1215.98 L1371.3 1215.98 L1371.88 1215.98 L1372.47 1215.98 L1373.06 1215.98 L1373.64 1215.98 L1374.23 1215.98 L1374.82 1215.98 L1375.4 1215.98 L1375.99 1215.98 L1376.58 1215.98 L1377.16 1215.98 L1377.75 1215.98 L1378.34 1215.98 L1378.92 1215.98 L1379.51 1215.98 L1380.09 1215.98 L1380.68 1215.98 L1381.27 1215.98 L1381.85 1215.98 L1382.44 1215.98 L1383.03 1215.98 L1383.61 1215.98 L1384.2 1215.98 L1384.79 1215.98 L1385.37 1215.98 L1385.96 1215.98 L1386.55 1215.98 L1387.13 1215.98 L1387.72 1215.98 L1388.3 1215.98 L1388.89 1215.98 L1389.48 1215.98 L1390.06 1215.98 L1390.65 1215.98 L1391.24 1215.98 L1391.82 1215.98 L1392.41 1215.98 L1393 1215.98 L1393.58 1215.98 L1394.17 1215.98 L1394.75 1215.98 L1395.34 1215.98 L1395.93 1215.98 L1396.51 1215.98 L1397.1 1215.98 L1397.69 1215.98 L1398.27 1215.98 L1398.86 1215.98 L1399.45 1215.98 L1400.03 1215.98 L1400.62 1215.98 L1401.21 1215.98 L1401.79 1215.98 L1402.38 1215.98 L1402.96 1215.98 L1403.55 1215.98 L1404.14 1215.98 L1404.72 1215.98 L1405.31 1215.98 L1405.9 1215.98 L1406.48 1215.98 L1407.07 1215.98 L1407.66 1215.98 L1408.24 1215.98 L1408.83 1215.98 L1409.42 1215.98 L1410 1215.98 L1410.59 1215.98 L1411.17 1215.98 L1411.76 1215.98 L1412.35 1215.98 L1412.93 1215.98 L1413.52 1215.98 L1414.11 1215.98 L1414.69 1215.98 L1415.28 1215.98 L1415.87 1215.98 L1416.45 1215.98 L1417.04 1215.98 L1417.63 1215.98 L1418.21 1215.98 L1418.8 1215.98 L1419.38 1215.98 L1419.97 1215.98 L1420.56 1215.98 L1421.14 1215.98 L1421.73 1215.98 L1422.32 1215.98 L1422.9 1215.98 L1423.49 1215.98 L1424.08 1215.98 L1424.66 1215.98 L1425.25 1215.98 L1425.83 1215.98 L1426.42 1215.98 L1427.01 1215.98 L1427.59 1215.98 L1428.18 1215.98 L1428.77 1215.98 L1429.35 1215.98 L1429.94 1215.98 L1430.53 1215.98 L1431.11 1215.98 L1431.7 1215.98 L1432.29 1215.98 L1432.87 1215.98 L1433.46 1215.98 L1434.04 1215.98 L1434.63 1215.98 L1435.22 1215.98 L1435.8 1215.98 L1436.39 1215.98 L1436.98 1215.98 L1437.56 1215.98 L1438.15 1215.98 L1438.74 1215.98 L1439.32 1215.98 L1439.91 1215.98 L1440.5 1215.98 L1441.08 1215.98 L1441.67 1215.98 L1442.25 1215.98 L1442.84 1215.98 L1443.43 1215.98 L1444.01 1215.98 L1444.6 1215.98 L1445.19 1215.98 L1445.77 1215.98 L1446.36 1215.98 L1446.95 1215.98 L1447.53 1215.98 L1448.12 1215.98 L1448.7 1215.98 L1449.29 1215.98 L1449.88 1215.98 L1450.46 1215.98 L1451.05 1215.98 L1451.64 1215.98 L1452.22 1215.98 L1452.81 1215.98 L1453.4 1215.98 L1453.98 1215.98 L1454.57 1215.98 L1455.16 1215.98 L1455.74 1215.98 L1456.33 1215.98 L1456.91 1215.98 L1457.5 1215.98 L1458.09 1215.98 L1458.67 1215.98 L1459.26 1215.98 L1459.85 1215.98 L1460.43 1215.98 L1461.02 1215.98 L1461.61 1215.98 L1462.19 1215.98 L1462.78 1215.98 L1463.37 1215.98 L1463.95 1215.98 L1464.54 1215.98 L1465.12 1215.98 L1465.71 1215.98 L1466.3 1215.98 L1466.88 1215.98 L1467.47 1215.98 L1468.06 1215.98 L1468.64 1215.98 L1469.23 1215.98 L1469.82 1215.98 L1470.4 1215.98 L1470.99 1215.98 L1471.57 1215.98 L1472.16 1215.98 L1472.75 1215.98 L1473.33 1215.98 L1473.92 1215.98 L1474.51 1215.98 L1475.09 1215.98 L1475.68 1215.98 L1476.27 1215.98 L1476.85 1215.98 L1477.44 1215.98 L1478.03 1215.98 L1478.61 1215.98 L1479.2 1215.98 L1479.78 1215.98 L1480.37 1215.98 L1480.96 1215.98 L1481.54 1215.98 L1482.13 1215.98 L1482.72 1215.98 L1483.3 1215.98 L1483.89 1215.98 L1484.48 1215.98 L1485.06 1215.98 L1485.65 1215.98 L1486.24 1215.98 L1486.82 1215.98 L1487.41 1215.98 L1487.99 1215.98 L1488.58 1215.98 L1489.17 1215.98 L1489.75 1215.98 L1490.34 1215.98 L1490.93 1215.98 L1491.51 1215.98 L1492.1 1215.98 L1492.69 1215.98 L1493.27 1215.98 L1493.86 1215.98 L1494.45 1215.98 L1495.03 1215.98 L1495.62 1215.98 L1496.2 1215.98 L1496.79 1215.98 L1497.38 1215.98 L1497.96 1215.98 L1498.55 1215.98 L1499.14 1215.98 L1499.72 1215.98 L1500.31 1215.98 L1500.9 1215.98 L1501.48 1215.98 L1502.07 1215.98 L1502.65 1215.98 L1503.24 1215.98 L1503.83 1215.98 L1504.41 1215.98 L1505 1215.98 L1505.59 1215.98 L1506.17 1215.98 L1506.76 1215.98 L1507.35 1215.98 L1507.93 1215.98 L1508.52 1215.98 L1509.11 1215.98 L1509.69 1215.98 L1510.28 1215.98 L1510.86 1215.98 L1511.45 1215.98 L1512.04 1215.98 L1512.62 1215.98 L1513.21 1215.98 L1513.8 1215.98 L1514.38 1215.98 L1514.97 1215.98 L1515.56 1215.98 L1516.14 1215.98 L1516.73 1215.98 L1517.32 1215.98 L1517.9 1215.98 L1518.49 1215.98 L1519.07 1215.98 L1519.66 1215.98 L1520.25 1215.98 L1520.83 1215.98 L1521.42 1215.98 L1522.01 1215.98 L1522.59 1215.98 L1523.18 1215.98 L1523.77 1215.98 L1524.35 1215.98 L1524.94 1215.98 L1525.52 1215.98 L1526.11 1215.98 L1526.7 1215.98 L1527.28 1215.98 L1527.87 1215.98 L1528.46 1215.98 L1529.04 1215.98 L1529.63 1215.98 L1530.22 1215.98 L1530.8 1215.98 L1531.39 1215.98 L1531.98 1215.98 L1532.56 1215.98 L1533.15 1215.98 L1533.73 1215.98 L1534.32 1215.98 L1534.91 1215.98 L1535.49 1215.98 L1536.08 1215.98 L1536.67 1215.98 L1537.25 1215.98 L1537.84 1215.98 L1538.43 1215.98 L1539.01 1215.98 L1539.6 1215.98 L1540.19 1215.98 L1540.77 1215.98 L1541.36 1215.98 L1541.94 1215.98 L1542.53 1215.98 L1543.12 1215.98 L1543.7 1215.98 L1544.29 1215.98 L1544.88 1215.98 L1545.46 1215.98 L1546.05 1215.98 L1546.64 1215.98 L1547.22 1215.98 L1547.81 1215.98 L1548.4 1215.98 L1548.98 1215.98 L1549.57 1215.98 L1550.15 1215.98 L1550.74 1215.98 L1551.33 1215.98 L1551.91 1215.98 L1552.5 1215.98 L1553.09 1215.98 L1553.67 1215.98 L1554.26 1215.98 L1554.85 1215.98 L1555.43 1215.98 L1556.02 1215.98 L1556.6 1215.98 L1557.19 1215.98 L1557.78 1215.98 L1558.36 1215.98 L1558.95 1215.98 L1559.54 1215.98 L1560.12 1215.98 L1560.71 1215.98 L1561.3 1215.98 L1561.88 1215.98 L1562.47 1215.98 L1563.06 1215.98 L1563.64 1215.98 L1564.23 1215.98 L1564.81 1215.98 L1565.4 1215.98 L1565.99 1215.98 L1566.57 1215.98 L1567.16 1215.98 L1567.75 1215.98 L1568.33 1215.98 L1568.92 1215.98 L1569.51 1215.98 L1570.09 1215.98 L1570.68 1215.98 L1571.27 1215.98 L1571.85 1215.98 L1572.44 1215.98 L1573.02 1215.98 L1573.61 1215.98 L1574.2 1215.98 L1574.78 1215.98 L1575.37 1215.98 L1575.96 1215.98 L1576.54 1215.98 L1577.13 1215.98 L1577.72 1215.98 L1578.3 1215.98 L1578.89 1215.98 L1579.47 1215.98 L1580.06 1215.98 L1580.65 1215.98 L1581.23 1215.98 L1581.82 1215.98 L1582.41 1215.98 L1582.99 1215.98 L1583.58 1215.98 L1584.17 1215.98 L1584.75 1215.98 L1585.34 1215.98 L1585.93 1215.98 L1586.51 1215.98 L1587.1 1215.98 L1587.68 1215.98 L1588.27 1215.98 L1588.86 1215.98 L1589.44 1215.98 L1590.03 1215.98 L1590.62 1215.98 L1591.2 1215.98 L1591.79 1215.98 L1592.38 1215.98 L1592.96 1215.98 L1593.55 1215.98 L1594.14 1215.98 L1594.72 1215.98 L1595.31 1215.98 L1595.89 1215.98 L1596.48 1215.98 L1597.07 1215.98 L1597.65 1215.98 L1598.24 1215.98 L1598.83 1215.98 L1599.41 1215.98 L1600 1215.98 L1600.59 1215.98 L1601.17 1215.98 L1601.76 1215.98 L1602.34 1215.98 L1602.93 1215.98 L1603.52 1215.98 L1604.1 1215.98 L1604.69 1215.98 L1605.28 1215.98 L1605.86 1215.98 L1606.45 1215.98 L1607.04 1215.98 L1607.62 1215.98 L1608.21 1215.98 L1608.8 1215.98 L1609.38 1215.98 L1609.97 1215.98 L1610.55 1215.98 L1611.14 1215.98 L1611.73 1215.98 L1612.31 1215.98 L1612.9 1215.98 L1613.49 1215.98 L1614.07 1215.98 L1614.66 1215.98 L1615.25 1215.98 L1615.83 1215.98 L1616.42 1215.98 L1617.01 1215.98 L1617.59 1215.98 L1618.18 1215.98 L1618.76 1215.98 L1619.35 1215.98 L1619.94 1215.98 L1620.52 1215.98 L1621.11 1215.98 L1621.7 1215.98 L1622.28 1215.98 L1622.87 1215.98 L1623.46 1215.98 L1624.04 1215.98 L1624.63 1215.98 L1625.22 1215.98 L1625.8 1215.98 L1626.39 1215.98 L1626.97 1215.98 L1627.56 1215.98 L1628.15 1215.98 L1628.73 1215.98 L1629.32 1215.98 L1629.91 1215.98 L1630.49 1215.98 L1631.08 1215.98 L1631.67 1215.98 L1632.25 1215.98 L1632.84 1215.98 L1633.42 1215.98 L1634.01 1215.98 L1634.6 1215.98 L1635.18 1215.98 L1635.77 1215.98 L1636.36 1215.98 L1636.94 1215.98 L1637.53 1215.98 L1638.12 1215.98 L1638.7 1215.98 L1639.29 1215.98 L1639.88 1215.98 L1640.46 1215.98 L1641.05 1215.98 L1641.63 1215.98 L1642.22 1215.98 L1642.81 1215.98 L1643.39 1215.98 L1643.98 1215.98 L1644.57 1215.98 L1645.15 1215.98 L1645.74 1215.98 L1646.33 1215.98 L1646.91 1215.98 L1647.5 1215.98 L1648.09 1215.98 L1648.67 1215.98 L1649.26 1215.98 L1649.84 1215.98 L1650.43 1215.98 L1651.02 1215.98 L1651.6 1215.98 L1652.19 1215.98 L1652.78 1215.98 L1653.36 1215.98 L1653.95 1215.98 L1654.54 1215.98 L1655.12 1215.98 L1655.71 1215.98 L1656.29 1215.98 L1656.88 1215.98 L1657.47 1215.98 L1658.05 1215.98 L1658.64 1215.98 L1659.23 1215.98 L1659.81 1215.98 L1660.4 1215.98 L1660.99 1215.98 L1661.57 1215.98 L1662.16 1215.98 L1662.75 1215.98 L1663.33 1215.98 L1663.92 1215.98 L1664.5 1215.98 L1665.09 1215.98 L1665.68 1215.98 L1666.26 1215.98 L1666.85 1215.98 L1667.44 1215.98 L1668.02 1215.98 L1668.61 1215.98 L1669.2 1215.98 L1669.78 1215.98 L1670.37 1215.98 L1670.96 1215.98 L1671.54 1215.98 L1672.13 1215.98 L1672.71 1215.98 L1673.3 1215.98 L1673.89 1215.98 L1674.47 1215.98 L1675.06 1215.98 L1675.65 1215.98 L1676.23 1215.98 L1676.82 1215.98 L1677.41 1215.98 L1677.99 1215.98 L1678.58 1215.98 L1679.17 1215.98 L1679.75 1215.98 L1680.34 1215.98 L1680.92 1215.98 L1681.51 1215.98 L1682.1 1215.98 L1682.68 1215.98 L1683.27 1215.98 L1683.86 1215.98 L1684.44 1215.98 L1685.03 1215.98 L1685.62 1215.98 L1686.2 1215.98 L1686.79 1215.98 L1687.37 1215.98 L1687.96 1215.98 L1688.55 1215.98 L1689.13 1215.98 L1689.72 1215.98 L1690.31 1215.98 L1690.89 1215.98 L1691.48 1215.98 L1692.07 1215.98 L1692.65 1215.98 L1693.24 1215.98 L1693.83 1215.98 L1694.41 1215.98 L1695 1215.98 L1695.58 1215.98 L1696.17 1215.98 L1696.76 1215.98 L1697.34 1215.98 L1697.93 1215.98 L1698.52 1215.98 L1699.1 1215.98 L1699.69 1215.98 L1700.28 1215.98 L1700.86 1215.98 L1701.45 1215.98 L1702.04 1215.98 L1702.62 1215.98 L1703.21 1215.98 L1703.79 1215.98 L1704.38 1215.98 L1704.97 1215.98 L1705.55 1215.98 L1706.14 1215.98 L1706.73 1215.98 L1707.31 1215.98 L1707.9 1215.98 L1708.49 1215.98 L1709.07 1215.98 L1709.66 1215.98 L1710.24 1215.98 L1710.83 1215.98 L1711.42 1215.98 L1712 1215.98 L1712.59 1215.98 L1713.18 1215.98 L1713.76 1215.98 L1714.35 1215.98 L1714.94 1215.98 L1715.52 1215.98 L1716.11 1215.98 L1716.7 1215.98 L1717.28 1215.98 L1717.87 1215.98 L1718.45 1215.98 L1719.04 1215.98 L1719.63 1215.98 L1720.21 1215.98 L1720.8 1215.98 L1721.39 1215.98 L1721.97 1215.98 L1722.56 1215.98 L1723.15 1215.98 L1723.73 1215.98 L1724.32 1215.98 L1724.91 1215.98 L1725.49 1215.98 L1726.08 1215.98 L1726.66 1215.98 L1727.25 1215.98 L1727.84 1215.98 L1728.42 1215.98 L1729.01 1215.98 L1729.6 1215.98 L1730.18 1215.98 L1730.77 1215.98 L1731.36 1215.98 L1731.94 1215.98 L1732.53 1215.98 L1733.11 1215.98 L1733.7 1215.98 L1734.29 1215.98 L1734.87 1215.98 L1735.46 1215.98 L1736.05 1215.98 L1736.63 1215.98 L1737.22 1215.98 L1737.81 1215.98 L1738.39 1215.98 L1738.98 1215.98 L1739.57 1215.98 L1740.15 1215.98 L1740.74 1215.98 L1741.32 1215.98 L1741.91 1215.98 L1742.5 1215.98 L1743.08 1215.98 L1743.67 1215.98 L1744.26 1215.98 L1744.84 1215.98 L1745.43 1215.98 L1746.02 1215.98 L1746.6 1215.98 L1747.19 1215.98 L1747.78 1215.98 L1748.36 1215.98 L1748.95 1215.98 L1749.53 1215.98 L1750.12 1215.98 L1750.71 1215.98 L1751.29 1215.98 L1751.88 1215.98 L1752.47 1215.98 L1753.05 1215.98 L1753.64 1215.98 L1754.23 1215.98 L1754.81 1215.98 L1755.4 1215.98 L1755.99 1215.98 L1756.57 1215.98 L1757.16 1215.98 L1757.74 1215.98 L1758.33 1215.98 L1758.92 1215.98 L1759.5 1215.98 L1760.09 1215.98 L1760.68 1215.98 L1761.26 1215.98 L1761.85 1215.98 L1762.44 1215.98 L1763.02 1215.98 L1763.61 1215.98 L1764.19 1215.98 L1764.78 1215.98 L1765.37 1215.98 L1765.95 1215.98 L1766.54 1215.98 L1767.13 1215.98 L1767.71 1215.98 L1768.3 1215.98 L1768.89 1215.98 L1769.47 1215.98 L1770.06 1215.98 L1770.65 1215.98 L1771.23 1215.98 L1771.82 1215.98 L1772.4 1215.98 L1772.99 1215.98 L1773.58 1215.98 L1774.16 1215.98 L1774.75 1215.98 L1775.34 1215.98 L1775.92 1215.98 L1776.51 1215.98 L1777.1 1215.98 L1777.68 1215.98 L1778.27 1215.98 L1778.86 1215.98 L1779.44 1215.98 L1780.03 1215.98 L1780.61 1215.98 L1781.2 1215.98 L1781.79 1215.98 L1782.37 1215.98 L1782.96 1215.98 L1783.55 1215.98 L1784.13 1215.98 L1784.72 1215.98 L1785.31 1215.98 L1785.89 1215.98 L1786.48 1215.98 L1787.06 1215.98 L1787.65 1215.98 L1788.24 1215.98 L1788.82 1215.98 L1789.41 1215.98 L1790 1215.98 L1790.58 1215.98 L1791.17 1215.98 L1791.76 1215.98 L1792.34 1215.98 L1792.93 1215.98 L1793.52 1215.98 L1794.1 1215.98 L1794.69 1215.98 L1795.27 1215.98 L1795.86 1215.98 L1796.45 1215.98 L1797.03 1215.98 L1797.62 1215.98 L1798.21 1215.98 L1798.79 1215.98 L1799.38 1215.98 L1799.97 1215.98 L1800.55 1215.98 L1801.14 1215.98 L1801.73 1215.98 L1802.31 1215.98 L1802.9 1215.98 L1803.48 1215.98 L1804.07 1215.98 L1804.66 1215.98 L1805.24 1215.98 L1805.83 1215.98 L1806.42 1215.98 L1807 1215.98 L1807.59 1215.98 L1808.18 1215.98 L1808.76 1215.98 L1809.35 1215.98 L1809.94 1215.98 L1810.52 1215.98 L1811.11 1215.98 L1811.69 1215.98 L1812.28 1215.98 L1812.87 1215.98 L1813.45 1215.98 L1814.04 1215.98 L1814.63 1215.98 L1815.21 1215.98 L1815.8 1215.98 L1816.39 1215.98 L1816.97 1215.98 L1817.56 1215.98 L1818.14 1215.98 L1818.73 1215.98 L1819.32 1215.98 L1819.9 1215.98 L1820.49 1215.98 L1821.08 1215.98 L1821.66 1215.98 L1822.25 1215.98 L1822.84 1215.98 L1823.42 1215.98 L1824.01 1215.98 L1824.6 1215.98 L1825.18 1215.98 L1825.77 1215.98 L1826.35 1215.98 L1826.94 1215.98 L1827.53 1215.98 L1828.11 1215.98 L1828.7 1215.98 L1829.29 1215.98 L1829.87 1215.98 L1830.46 1215.98 L1831.05 1215.98 L1831.63 1215.98 L1832.22 1215.98 L1832.81 1215.98 L1833.39 1215.98 L1833.98 1215.98 L1834.56 1215.98 L1835.15 1215.98 L1835.74 1215.98 L1836.32 1215.98 L1836.91 1215.98 L1837.5 1215.98 L1838.08 1215.98 L1838.67 1215.98 L1839.26 1215.98 L1839.84 1215.98 L1840.43 1215.98 L1841.01 1215.98 L1841.6 1215.98 L1842.19 1215.98 L1842.77 1215.98 L1843.36 1215.98 L1843.95 1215.98 L1844.53 1215.98 L1845.12 1215.98 L1845.71 1215.98 L1846.29 1215.98 L1846.88 1215.98 L1847.47 1215.98 L1848.05 1215.98 L1848.64 1215.98 L1849.22 1215.98 L1849.81 1215.98 L1850.4 1215.98 L1850.98 1215.98 L1851.57 1215.98 L1852.16 1215.98 L1852.74 1215.98 L1853.33 1215.98 L1853.92 1215.98 L1854.5 1215.98 L1855.09 1215.98 L1855.68 1215.98 L1856.26 1215.98 L1856.85 1215.98 L1857.43 1215.98 L1858.02 1215.98 L1858.61 1215.98 L1859.19 1215.98 L1859.78 1215.98 L1860.37 1215.98 L1860.95 1215.98 L1861.54 1215.98 L1862.13 1215.98 L1862.71 1215.98 L1863.3 1215.98 L1863.88 1215.98 L1864.47 1215.98 L1865.06 1215.98 L1865.64 1215.98 L1866.23 1215.98 L1866.82 1215.98 L1867.4 1215.98 L1867.99 1215.98 L1868.58 1215.98 L1869.16 1215.98 L1869.75 1215.98 L1870.34 1215.98 L1870.92 1215.98 L1871.51 1215.98 L1872.09 1215.98 L1872.68 1215.98 L1873.27 1215.98 L1873.85 1215.98 L1874.44 1215.98 L1875.03 1215.98 L1875.61 1215.98 L1876.2 1215.98 L1876.79 1215.98 L1877.37 1215.98 L1877.96 1215.98 L1878.55 1215.98 L1879.13 1215.98 L1879.72 1215.98 L1880.3 1215.98 L1880.89 1215.98 L1881.48 1215.98 L1882.06 1215.98 L1882.65 1215.98 L1883.24 1215.98 L1883.82 1215.98 L1884.41 1215.98 L1885 1215.98 L1885.58 1215.98 L1886.17 1215.98 L1886.76 1215.98 L1887.34 1215.98 L1887.93 1215.98 L1888.51 1215.98 L1889.1 1215.98 L1889.69 1215.98 L1890.27 1215.98 L1890.86 1215.98 L1891.45 1215.98 L1892.03 1215.98 L1892.62 1215.98 L1893.21 1215.98 L1893.79 1215.98 L1894.38 1215.98 L1894.96 1215.98 L1895.55 1215.98 L1896.14 1215.98 L1896.72 1215.98 L1897.31 1215.98 L1897.9 1215.98 L1898.48 1215.98 L1899.07 1215.98 L1899.66 1215.98 L1900.24 1215.98 L1900.83 1215.98 L1901.42 1215.98 L1902 1215.98 L1902.59 1215.98 L1903.17 1215.98 L1903.76 1215.98 L1904.35 1215.98 L1904.93 1215.98 L1905.52 1215.98 L1906.11 1215.98 L1906.69 1215.98 L1907.28 1215.98 L1907.87 1215.98 L1908.45 1215.98 L1909.04 1215.98 L1909.63 1215.98 L1910.21 1215.98 L1910.8 1215.98 L1911.38 1215.98 L1911.97 1215.98 L1912.56 1215.98 L1913.14 1215.98 L1913.73 1215.98 L1914.32 1215.98 L1914.9 1215.98 L1915.49 1215.98 L1916.08 1215.98 L1916.66 1215.98 L1917.25 1215.98 L1917.83 1215.98 L1918.42 1215.98 L1919.01 1215.98 L1919.59 1215.98 L1920.18 1215.98 L1920.77 1215.98 L1921.35 1215.98 L1921.94 1215.98 L1922.53 1215.98 L1923.11 1215.98 L1923.7 1215.98 L1924.29 1215.98 L1924.87 1215.98 L1925.46 1215.98 L1926.04 1215.98 L1926.63 1215.98 L1927.22 1215.98 L1927.8 1215.98 L1928.39 1215.98 L1928.98 1215.98 L1929.56 1215.98 L1930.15 1215.98 L1930.74 1215.98 L1931.32 1215.98 L1931.91 1215.98 L1932.5 1215.98 L1933.08 1215.98 L1933.67 1215.98 L1934.25 1215.98 L1934.84 1215.98 L1935.43 1215.98 L1936.01 1215.98 L1936.6 1215.98 L1937.19 1215.98 L1937.77 1215.98 L1938.36 1215.98 L1938.95 1215.98 L1939.53 1215.98 L1940.12 1215.98 L1940.71 1215.98 L1941.29 1215.98 L1941.88 1215.98 L1942.46 1215.98 L1943.05 1215.98 L1943.64 1215.98 L1944.22 1215.98 L1944.81 1215.98 L1945.4 1215.98 L1945.98 1215.98 L1946.57 1215.98 L1947.16 1215.98 L1947.74 1215.98 L1948.33 1215.98 L1948.91 1215.98 L1949.5 1215.98 L1950.09 1215.98 L1950.67 1215.98 L1951.26 1215.98 L1951.85 1215.98 L1952.43 1215.98 L1953.02 1215.98 L1953.61 1215.98 L1954.19 1215.98 L1954.78 1215.98 L1955.37 1215.98 L1955.95 1215.98 L1956.54 1215.98 L1957.12 1215.98 L1957.71 1215.98 L1958.3 1215.98 L1958.88 1215.98 L1959.47 1215.98 L1960.06 1215.98 L1960.64 1215.98 L1961.23 1215.98 L1961.82 1215.98 L1962.4 1215.98 L1962.99 1215.98 L1963.58 1215.98 L1964.16 1215.98 L1964.75 1215.98 L1965.33 1215.98 L1965.92 1215.98 L1966.51 1215.98 L1967.09 1215.98 L1967.68 1215.98 L1968.27 1215.98 L1968.85 1215.98 L1969.44 1215.98 L1970.03 1215.98 L1970.61 1215.98 L1971.2 1215.98 L1971.78 1215.98 L1972.37 1215.98 L1972.96 1215.98 L1973.54 1215.98 L1974.13 1215.98 L1974.72 1215.98 L1975.3 1215.98 L1975.89 1215.98 L1976.48 1215.98 L1977.06 1215.98 L1977.65 1215.98 L1978.24 1215.98 L1978.82 1215.98 L1979.41 1215.98 L1979.99 1215.98 L1980.58 1215.98 L1981.17 1215.98 L1981.75 1215.98 L1982.34 1215.98 L1982.93 1215.98 L1983.51 1215.98 L1984.1 1215.98 L1984.69 1215.98 L1985.27 1215.98 L1985.86 1215.98 L1986.45 1215.98 L1987.03 1215.98 L1987.62 1215.98 L1988.2 1215.98 L1988.79 1215.98 L1989.38 1215.98 L1989.96 1215.98 L1990.55 1215.98 L1991.14 1215.98 L1991.72 1215.98 L1992.31 1215.98 L1992.9 1215.98 L1993.48 1215.98 L1994.07 1215.98 L1994.65 1215.98 L1995.24 1215.98 L1995.83 1215.98 L1996.41 1215.98 L1997 1215.98 L1997.59 1215.98 L1998.17 1215.98 L1998.76 1215.98 L1999.35 1215.98 L1999.93 1215.98 L2000.52 1215.98 L2001.11 1215.98 L2001.69 1215.98 L2002.28 1215.98 L2002.86 1215.98 L2003.45 1215.98 L2004.04 1215.98 L2004.62 1215.98 L2005.21 1215.98 L2005.8 1215.98 L2006.38 1215.98 L2006.97 1215.98 L2007.56 1215.98 L2008.14 1215.98 L2008.73 1215.98 L2009.32 1215.98 L2009.9 1215.98 L2010.49 1215.98 L2011.07 1215.98 L2011.66 1215.98 L2012.25 1215.98 L2012.83 1215.98 L2013.42 1215.98 L2014.01 1215.98 L2014.59 1215.98 L2015.18 1215.98 L2015.77 1215.98 L2016.35 1215.98 L2016.94 1215.98 L2017.53 1215.98 L2018.11 1215.98 L2018.7 1215.98 L2019.28 1215.98 L2019.87 1215.98 L2020.46 1215.98 L2021.04 1215.98 L2021.63 1215.98 L2022.22 1215.98 L2022.8 1215.98 L2023.39 1215.98 L2023.98 1215.98 L2024.56 1215.98 L2025.15 1215.98 L2025.73 1215.98 L2026.32 1215.98 L2026.91 1215.98 L2027.49 1215.98 L2028.08 1215.98 L2028.67 1215.98 L2029.25 1215.98 L2029.84 1215.98 L2030.43 1215.98 L2031.01 1215.98 L2031.6 1215.98 L2032.19 1215.98 L2032.77 1215.98 L2033.36 1215.98 L2033.94 1215.98 L2034.53 1215.98 L2035.12 1215.98 L2035.7 1215.98 L2036.29 1215.98 L2036.88 1215.98 L2037.46 1215.98 L2038.05 1215.98 L2038.64 1215.98 L2039.22 1215.98 L2039.81 1215.98 L2040.4 1215.98 L2040.98 1215.98 L2041.57 1215.98 L2042.15 1215.98 L2042.74 1215.98 L2043.33 1215.98 L2043.91 1215.98 L2044.5 1215.98 L2045.09 1215.98 L2045.67 1215.98 L2046.26 1215.98 L2046.85 1215.98 L2047.43 1215.98 L2048.02 1215.98 L2048.6 1215.98 L2049.19 1215.98 L2049.78 1215.98 L2050.36 1215.98 L2050.95 1215.98 L2051.54 1215.98 L2052.12 1215.98 L2052.71 1215.98 L2053.3 1215.98 L2053.88 1215.98 L2054.47 1215.98 L2055.06 1215.98 L2055.64 1215.98 L2056.23 1215.98 L2056.81 1215.98 L2057.4 1215.98 L2057.99 1215.98 L2058.57 1215.98 L2059.16 1215.98 L2059.75 1215.98 L2060.33 1215.98 L2060.92 1215.98 L2061.51 1215.98 L2062.09 1215.98 L2062.68 1215.98 L2063.27 1215.98 L2063.85 1215.98 L2064.44 1215.98 L2065.02 1215.98 L2065.61 1215.98 L2066.2 1215.98 L2066.78 1215.98 L2067.37 1215.98 L2067.96 1215.98 L2068.54 1215.98 L2069.13 1215.98 L2069.72 1215.98 L2070.3 1215.98 L2070.89 1215.98 L2071.48 1215.98 L2072.06 1215.98 L2072.65 1215.98 L2073.23 1215.98 L2073.82 1215.98 L2074.41 1215.98 L2074.99 1215.98 L2075.58 1215.98 L2076.17 1215.98 L2076.75 1215.98 L2077.34 1215.98 L2077.93 1215.98 L2078.51 1215.98 L2079.1 1215.98 L2079.68 1215.98 L2080.27 1215.98 L2080.86 1215.98 L2081.44 1215.98 L2082.03 1215.98 L2082.62 1215.98 L2083.2 1215.98 L2083.79 1215.98 L2084.38 1215.98 L2084.96 1215.98 L2085.55 1215.98 L2086.14 1215.98 L2086.72 1215.98 L2087.31 1215.98 L2087.89 1215.98 L2088.48 1215.98 L2089.07 1215.98 L2089.65 1215.98 L2090.24 1215.98 L2090.83 1215.98 L2091.41 1215.98 L2092 1215.98 L2092.59 1215.98 L2093.17 1215.98 L2093.76 1215.98 L2094.35 1215.98 L2094.93 1215.98 L2095.52 1215.98 L2096.1 1215.98 L2096.69 1215.98 L2097.28 1215.98 L2097.86 1215.98 L2098.45 1215.98 L2099.04 1215.98 L2099.62 1215.98 L2100.21 1215.98 L2100.8 1215.98 L2101.38 1215.98 L2101.97 1215.98 L2102.55 1215.98 L2103.14 1215.98 L2103.73 1215.98 L2104.31 1215.98 L2104.9 1215.98 L2105.49 1215.98 L2106.07 1215.98 L2106.66 1215.98 L2107.25 1215.98 L2107.83 1215.98 L2108.42 1215.98 L2109.01 1215.98 L2109.59 1215.98 L2110.18 1215.98 L2110.76 1215.98 L2111.35 1215.98 L2111.94 1215.98 L2112.52 1215.98 L2113.11 1215.98 L2113.7 1215.98 L2114.28 1215.98 L2114.87 1215.98 L2115.46 1215.98 L2116.04 1215.98 L2116.63 1215.98 L2117.22 1215.98 L2117.8 1215.98 L2118.39 1215.98 L2118.97 1215.98 L2119.56 1215.98 L2120.15 1215.98 L2120.73 1215.98 L2121.32 1215.98 L2121.91 1215.98 L2122.49 1215.98 L2123.08 1215.98 L2123.67 1215.98 L2124.25 1215.98 L2124.84 1215.98 L2125.42 1215.98 L2126.01 1215.98 L2126.6 1215.98 L2127.18 1215.98 L2127.77 1215.98 L2128.36 1215.98 L2128.94 1215.98 L2129.53 1215.98 L2130.12 1215.98 L2130.7 1215.98 L2131.29 1215.98 L2131.88 1215.98 L2132.46 1215.98 L2133.05 1215.98 L2133.63 1215.98 L2134.22 1215.98 L2134.81 1215.98 L2135.39 1215.98 L2135.98 1215.98 L2136.57 1215.98 L2137.15 1215.98 L2137.74 1215.98 L2138.33 1215.98 L2138.91 1215.98 L2139.5 1215.98 L2140.09 1215.98 L2140.67 1215.98 L2141.26 1215.98 L2141.84 1215.98 L2142.43 1215.98 L2143.02 1215.98 L2143.6 1215.98 L2144.19 1215.98 L2144.78 1215.98 L2145.36 1215.98 L2145.95 1215.98 L2146.54 1215.98 L2147.12 1215.98 L2147.71 1215.98 L2148.3 1215.98 L2148.88 1215.98 L2149.47 1215.98 L2150.05 1215.98 L2150.64 1215.98 L2151.23 1215.98 L2151.81 1215.98 L2152.4 1215.98 L2152.99 1215.98 L2153.57 1215.98 L2154.16 1215.98 L2154.75 1215.98 L2155.33 1215.98 L2155.92 1215.98 L2156.5 1215.98 L2157.09 1215.98 L2157.68 1215.98 L2158.26 1215.98 L2158.26 1215.34 L2157.68 1215.34 L2157.09 1215.34 L2156.5 1215.34 L2155.92 1215.34 L2155.33 1215.34 L2154.75 1215.34 L2154.16 1215.34 L2153.57 1215.34 L2152.99 1215.34 L2152.4 1215.34 L2151.81 1215.34 L2151.23 1215.34 L2150.64 1215.34 L2150.05 1215.34 L2149.47 1215.34 L2148.88 1215.34 L2148.3 1215.34 L2147.71 1215.34 L2147.12 1215.34 L2146.54 1215.34 L2145.95 1215.34 L2145.36 1215.34 L2144.78 1215.34 L2144.19 1215.34 L2143.6 1215.34 L2143.02 1215.34 L2142.43 1215.34 L2141.84 1215.34 L2141.26 1215.34 L2140.67 1215.34 L2140.09 1215.34 L2139.5 1215.34 L2138.91 1215.34 L2138.33 1215.34 L2137.74 1215.34 L2137.15 1215.34 L2136.57 1215.34 L2135.98 1215.34 L2135.39 1215.34 L2134.81 1215.34 L2134.22 1215.34 L2133.63 1215.34 L2133.05 1215.34 L2132.46 1215.34 L2131.88 1215.34 L2131.29 1215.34 L2130.7 1215.34 L2130.12 1215.34 L2129.53 1215.34 L2128.94 1215.34 L2128.36 1215.34 L2127.77 1215.34 L2127.18 1215.34 L2126.6 1215.34 L2126.01 1215.34 L2125.42 1215.34 L2124.84 1215.34 L2124.25 1215.34 L2123.67 1215.34 L2123.08 1215.34 L2122.49 1215.34 L2121.91 1215.34 L2121.32 1215.34 L2120.73 1215.34 L2120.15 1215.34 L2119.56 1215.34 L2118.97 1215.34 L2118.39 1215.34 L2117.8 1215.34 L2117.22 1215.34 L2116.63 1215.34 L2116.04 1215.34 L2115.46 1215.34 L2114.87 1215.34 L2114.28 1215.34 L2113.7 1215.34 L2113.11 1215.34 L2112.52 1215.34 L2111.94 1215.34 L2111.35 1215.34 L2110.76 1215.34 L2110.18 1215.34 L2109.59 1215.34 L2109.01 1215.34 L2108.42 1215.34 L2107.83 1215.34 L2107.25 1215.34 L2106.66 1215.34 L2106.07 1215.34 L2105.49 1215.34 L2104.9 1215.34 L2104.31 1215.34 L2103.73 1215.34 L2103.14 1215.34 L2102.55 1215.34 L2101.97 1215.34 L2101.38 1215.34 L2100.8 1215.34 L2100.21 1215.34 L2099.62 1215.34 L2099.04 1215.34 L2098.45 1215.34 L2097.86 1215.34 L2097.28 1215.34 L2096.69 1215.34 L2096.1 1215.34 L2095.52 1215.34 L2094.93 1215.34 L2094.35 1215.34 L2093.76 1215.34 L2093.17 1215.34 L2092.59 1215.34 L2092 1215.34 L2091.41 1215.34 L2090.83 1215.34 L2090.24 1215.34 L2089.65 1215.34 L2089.07 1215.34 L2088.48 1215.34 L2087.89 1215.34 L2087.31 1215.34 L2086.72 1215.34 L2086.14 1215.34 L2085.55 1215.34 L2084.96 1215.34 L2084.38 1215.34 L2083.79 1215.34 L2083.2 1215.34 L2082.62 1215.34 L2082.03 1215.34 L2081.44 1215.34 L2080.86 1215.34 L2080.27 1215.34 L2079.68 1215.34 L2079.1 1215.34 L2078.51 1215.34 L2077.93 1215.34 L2077.34 1215.34 L2076.75 1215.34 L2076.17 1215.34 L2075.58 1215.34 L2074.99 1215.34 L2074.41 1215.34 L2073.82 1215.34 L2073.23 1215.34 L2072.65 1215.34 L2072.06 1215.34 L2071.48 1215.34 L2070.89 1215.34 L2070.3 1215.34 L2069.72 1215.34 L2069.13 1215.34 L2068.54 1215.34 L2067.96 1215.34 L2067.37 1215.34 L2066.78 1215.34 L2066.2 1215.34 L2065.61 1215.34 L2065.02 1215.34 L2064.44 1215.34 L2063.85 1215.34 L2063.27 1215.34 L2062.68 1215.34 L2062.09 1215.34 L2061.51 1215.34 L2060.92 1215.34 L2060.33 1215.34 L2059.75 1215.34 L2059.16 1215.34 L2058.57 1215.34 L2057.99 1215.34 L2057.4 1215.34 L2056.81 1215.34 L2056.23 1215.34 L2055.64 1215.34 L2055.06 1215.34 L2054.47 1215.34 L2053.88 1215.34 L2053.3 1215.34 L2052.71 1215.34 L2052.12 1215.34 L2051.54 1215.34 L2050.95 1215.34 L2050.36 1215.34 L2049.78 1215.34 L2049.19 1215.34 L2048.6 1215.34 L2048.02 1215.34 L2047.43 1215.34 L2046.85 1215.34 L2046.26 1215.34 L2045.67 1215.34 L2045.09 1215.34 L2044.5 1215.34 L2043.91 1215.34 L2043.33 1215.34 L2042.74 1215.34 L2042.15 1215.34 L2041.57 1215.34 L2040.98 1215.34 L2040.4 1215.34 L2039.81 1215.34 L2039.22 1215.34 L2038.64 1215.34 L2038.05 1215.34 L2037.46 1215.34 L2036.88 1215.34 L2036.29 1215.34 L2035.7 1215.34 L2035.12 1215.34 L2034.53 1215.34 L2033.94 1215.34 L2033.36 1215.34 L2032.77 1215.34 L2032.19 1215.34 L2031.6 1215.34 L2031.01 1215.34 L2030.43 1215.34 L2029.84 1215.34 L2029.25 1215.34 L2028.67 1215.34 L2028.08 1215.34 L2027.49 1215.34 L2026.91 1215.34 L2026.32 1215.34 L2025.73 1215.34 L2025.15 1215.34 L2024.56 1215.34 L2023.98 1215.34 L2023.39 1215.34 L2022.8 1215.34 L2022.22 1215.34 L2021.63 1215.34 L2021.04 1215.34 L2020.46 1215.34 L2019.87 1215.34 L2019.28 1215.34 L2018.7 1215.34 L2018.11 1215.34 L2017.53 1215.34 L2016.94 1215.34 L2016.35 1215.34 L2015.77 1215.34 L2015.18 1215.34 L2014.59 1215.34 L2014.01 1215.34 L2013.42 1215.34 L2012.83 1215.34 L2012.25 1215.34 L2011.66 1215.34 L2011.07 1215.34 L2010.49 1215.34 L2009.9 1215.34 L2009.32 1215.34 L2008.73 1215.34 L2008.14 1215.34 L2007.56 1215.34 L2006.97 1215.34 L2006.38 1215.34 L2005.8 1215.34 L2005.21 1215.34 L2004.62 1215.34 L2004.04 1215.34 L2003.45 1215.34 L2002.86 1215.34 L2002.28 1215.34 L2001.69 1215.34 L2001.11 1215.34 L2000.52 1215.34 L1999.93 1215.34 L1999.35 1215.34 L1998.76 1215.34 L1998.17 1215.34 L1997.59 1215.34 L1997 1215.34 L1996.41 1215.34 L1995.83 1215.34 L1995.24 1215.34 L1994.65 1215.34 L1994.07 1215.34 L1993.48 1215.34 L1992.9 1215.34 L1992.31 1215.34 L1991.72 1215.34 L1991.14 1215.34 L1990.55 1215.34 L1989.96 1215.34 L1989.38 1215.34 L1988.79 1215.34 L1988.2 1215.34 L1987.62 1215.34 L1987.03 1215.34 L1986.45 1215.34 L1985.86 1215.34 L1985.27 1215.34 L1984.69 1215.34 L1984.1 1215.34 L1983.51 1215.34 L1982.93 1215.34 L1982.34 1215.34 L1981.75 1215.34 L1981.17 1215.34 L1980.58 1215.34 L1979.99 1215.34 L1979.41 1215.34 L1978.82 1215.34 L1978.24 1215.34 L1977.65 1215.34 L1977.06 1215.34 L1976.48 1215.34 L1975.89 1215.34 L1975.3 1215.34 L1974.72 1215.34 L1974.13 1215.34 L1973.54 1215.34 L1972.96 1215.34 L1972.37 1215.34 L1971.78 1215.34 L1971.2 1215.34 L1970.61 1215.34 L1970.03 1215.34 L1969.44 1215.34 L1968.85 1215.34 L1968.27 1215.34 L1967.68 1215.34 L1967.09 1215.34 L1966.51 1215.34 L1965.92 1215.34 L1965.33 1215.34 L1964.75 1215.34 L1964.16 1215.34 L1963.58 1215.34 L1962.99 1215.34 L1962.4 1215.34 L1961.82 1215.34 L1961.23 1215.34 L1960.64 1215.34 L1960.06 1215.34 L1959.47 1215.34 L1958.88 1215.34 L1958.3 1215.34 L1957.71 1215.34 L1957.12 1215.34 L1956.54 1215.34 L1955.95 1215.34 L1955.37 1215.34 L1954.78 1215.34 L1954.19 1215.34 L1953.61 1215.34 L1953.02 1215.34 L1952.43 1215.34 L1951.85 1215.34 L1951.26 1215.34 L1950.67 1215.34 L1950.09 1215.34 L1949.5 1215.34 L1948.91 1215.34 L1948.33 1215.34 L1947.74 1215.34 L1947.16 1215.34 L1946.57 1215.34 L1945.98 1215.34 L1945.4 1215.34 L1944.81 1215.34 L1944.22 1215.34 L1943.64 1215.34 L1943.05 1215.34 L1942.46 1215.34 L1941.88 1215.34 L1941.29 1215.34 L1940.71 1215.34 L1940.12 1215.34 L1939.53 1215.34 L1938.95 1215.34 L1938.36 1215.34 L1937.77 1215.34 L1937.19 1215.34 L1936.6 1215.34 L1936.01 1215.34 L1935.43 1215.34 L1934.84 1215.34 L1934.25 1215.34 L1933.67 1215.34 L1933.08 1215.34 L1932.5 1215.34 L1931.91 1215.34 L1931.32 1215.34 L1930.74 1215.34 L1930.15 1215.34 L1929.56 1215.34 L1928.98 1215.34 L1928.39 1215.34 L1927.8 1215.34 L1927.22 1215.34 L1926.63 1215.34 L1926.04 1215.34 L1925.46 1215.34 L1924.87 1215.34 L1924.29 1215.34 L1923.7 1215.34 L1923.11 1215.34 L1922.53 1215.34 L1921.94 1215.34 L1921.35 1215.34 L1920.77 1215.34 L1920.18 1215.34 L1919.59 1215.34 L1919.01 1215.34 L1918.42 1215.34 L1917.83 1215.34 L1917.25 1215.34 L1916.66 1215.34 L1916.08 1215.34 L1915.49 1215.34 L1914.9 1215.34 L1914.32 1215.34 L1913.73 1215.34 L1913.14 1215.34 L1912.56 1215.34 L1911.97 1215.34 L1911.38 1215.34 L1910.8 1215.34 L1910.21 1215.34 L1909.63 1215.34 L1909.04 1215.34 L1908.45 1215.34 L1907.87 1215.34 L1907.28 1215.34 L1906.69 1215.34 L1906.11 1215.34 L1905.52 1215.34 L1904.93 1215.34 L1904.35 1215.34 L1903.76 1215.34 L1903.17 1215.34 L1902.59 1215.34 L1902 1215.34 L1901.42 1215.34 L1900.83 1215.34 L1900.24 1215.34 L1899.66 1215.34 L1899.07 1215.34 L1898.48 1215.34 L1897.9 1215.34 L1897.31 1215.34 L1896.72 1215.34 L1896.14 1215.34 L1895.55 1215.34 L1894.96 1215.34 L1894.38 1215.34 L1893.79 1215.34 L1893.21 1215.34 L1892.62 1215.34 L1892.03 1215.34 L1891.45 1215.34 L1890.86 1215.34 L1890.27 1215.34 L1889.69 1215.34 L1889.1 1215.34 L1888.51 1215.34 L1887.93 1215.34 L1887.34 1215.34 L1886.76 1215.34 L1886.17 1215.34 L1885.58 1215.34 L1885 1215.34 L1884.41 1215.34 L1883.82 1215.34 L1883.24 1215.34 L1882.65 1215.34 L1882.06 1215.34 L1881.48 1215.34 L1880.89 1215.34 L1880.3 1215.34 L1879.72 1215.34 L1879.13 1215.34 L1878.55 1215.34 L1877.96 1215.34 L1877.37 1215.34 L1876.79 1215.34 L1876.2 1215.34 L1875.61 1215.34 L1875.03 1215.34 L1874.44 1215.34 L1873.85 1215.34 L1873.27 1215.34 L1872.68 1215.34 L1872.09 1215.34 L1871.51 1215.34 L1870.92 1215.34 L1870.34 1215.34 L1869.75 1215.34 L1869.16 1215.34 L1868.58 1215.34 L1867.99 1215.34 L1867.4 1215.34 L1866.82 1215.34 L1866.23 1215.34 L1865.64 1215.34 L1865.06 1215.34 L1864.47 1215.34 L1863.88 1215.34 L1863.3 1215.34 L1862.71 1215.34 L1862.13 1215.34 L1861.54 1215.34 L1860.95 1215.34 L1860.37 1215.34 L1859.78 1215.34 L1859.19 1215.34 L1858.61 1215.34 L1858.02 1215.34 L1857.43 1215.34 L1856.85 1215.34 L1856.26 1215.34 L1855.68 1215.34 L1855.09 1215.34 L1854.5 1215.34 L1853.92 1215.34 L1853.33 1215.34 L1852.74 1215.34 L1852.16 1215.34 L1851.57 1215.34 L1850.98 1215.34 L1850.4 1215.34 L1849.81 1215.34 L1849.22 1215.34 L1848.64 1215.34 L1848.05 1215.34 L1847.47 1215.34 L1846.88 1215.34 L1846.29 1215.34 L1845.71 1215.34 L1845.12 1215.34 L1844.53 1215.34 L1843.95 1215.34 L1843.36 1215.34 L1842.77 1215.34 L1842.19 1215.34 L1841.6 1215.34 L1841.01 1215.34 L1840.43 1215.34 L1839.84 1215.34 L1839.26 1215.34 L1838.67 1215.34 L1838.08 1215.34 L1837.5 1215.34 L1836.91 1215.34 L1836.32 1215.34 L1835.74 1215.34 L1835.15 1215.34 L1834.56 1215.34 L1833.98 1215.34 L1833.39 1215.34 L1832.81 1215.34 L1832.22 1215.34 L1831.63 1215.34 L1831.05 1215.34 L1830.46 1215.34 L1829.87 1215.34 L1829.29 1215.34 L1828.7 1215.34 L1828.11 1215.34 L1827.53 1215.34 L1826.94 1215.34 L1826.35 1215.34 L1825.77 1215.34 L1825.18 1215.34 L1824.6 1215.34 L1824.01 1215.34 L1823.42 1215.34 L1822.84 1215.34 L1822.25 1215.34 L1821.66 1215.34 L1821.08 1215.34 L1820.49 1215.34 L1819.9 1215.34 L1819.32 1215.34 L1818.73 1215.34 L1818.14 1215.34 L1817.56 1215.34 L1816.97 1215.34 L1816.39 1215.34 L1815.8 1215.34 L1815.21 1215.34 L1814.63 1215.34 L1814.04 1215.34 L1813.45 1215.34 L1812.87 1215.34 L1812.28 1215.34 L1811.69 1215.34 L1811.11 1215.34 L1810.52 1215.34 L1809.94 1215.34 L1809.35 1215.34 L1808.76 1215.34 L1808.18 1215.34 L1807.59 1215.34 L1807 1215.34 L1806.42 1215.34 L1805.83 1215.34 L1805.24 1215.34 L1804.66 1215.34 L1804.07 1215.34 L1803.48 1215.34 L1802.9 1215.34 L1802.31 1215.34 L1801.73 1215.34 L1801.14 1215.34 L1800.55 1215.34 L1799.97 1215.34 L1799.38 1215.34 L1798.79 1215.34 L1798.21 1215.34 L1797.62 1215.34 L1797.03 1215.34 L1796.45 1215.34 L1795.86 1215.34 L1795.27 1215.34 L1794.69 1215.34 L1794.1 1215.34 L1793.52 1215.34 L1792.93 1215.34 L1792.34 1215.34 L1791.76 1215.34 L1791.17 1215.34 L1790.58 1215.34 L1790 1215.34 L1789.41 1215.34 L1788.82 1215.34 L1788.24 1215.34 L1787.65 1215.34 L1787.06 1215.34 L1786.48 1215.34 L1785.89 1215.34 L1785.31 1215.34 L1784.72 1215.34 L1784.13 1215.34 L1783.55 1215.34 L1782.96 1215.34 L1782.37 1215.34 L1781.79 1215.34 L1781.2 1215.34 L1780.61 1215.34 L1780.03 1215.34 L1779.44 1215.34 L1778.86 1215.34 L1778.27 1215.34 L1777.68 1215.34 L1777.1 1215.34 L1776.51 1215.34 L1775.92 1215.34 L1775.34 1215.34 L1774.75 1215.34 L1774.16 1215.34 L1773.58 1215.34 L1772.99 1215.34 L1772.4 1215.34 L1771.82 1215.34 L1771.23 1215.34 L1770.65 1215.34 L1770.06 1215.34 L1769.47 1215.34 L1768.89 1215.34 L1768.3 1215.34 L1767.71 1215.34 L1767.13 1215.34 L1766.54 1215.34 L1765.95 1215.34 L1765.37 1215.34 L1764.78 1215.34 L1764.19 1215.34 L1763.61 1215.34 L1763.02 1215.34 L1762.44 1215.34 L1761.85 1215.34 L1761.26 1215.34 L1760.68 1215.34 L1760.09 1215.34 L1759.5 1215.34 L1758.92 1215.34 L1758.33 1215.34 L1757.74 1215.34 L1757.16 1215.34 L1756.57 1215.34 L1755.99 1215.34 L1755.4 1215.34 L1754.81 1215.34 L1754.23 1215.34 L1753.64 1215.34 L1753.05 1215.34 L1752.47 1215.34 L1751.88 1215.34 L1751.29 1215.34 L1750.71 1215.34 L1750.12 1215.34 L1749.53 1215.34 L1748.95 1215.34 L1748.36 1215.34 L1747.78 1215.34 L1747.19 1215.34 L1746.6 1215.34 L1746.02 1215.34 L1745.43 1215.34 L1744.84 1215.34 L1744.26 1215.34 L1743.67 1215.34 L1743.08 1215.34 L1742.5 1215.34 L1741.91 1215.34 L1741.32 1215.34 L1740.74 1215.34 L1740.15 1215.34 L1739.57 1215.34 L1738.98 1215.34 L1738.39 1215.34 L1737.81 1215.34 L1737.22 1215.34 L1736.63 1215.34 L1736.05 1215.34 L1735.46 1215.34 L1734.87 1215.34 L1734.29 1215.34 L1733.7 1215.34 L1733.11 1215.34 L1732.53 1215.34 L1731.94 1215.34 L1731.36 1215.34 L1730.77 1215.34 L1730.18 1215.34 L1729.6 1215.34 L1729.01 1215.34 L1728.42 1215.34 L1727.84 1215.34 L1727.25 1215.34 L1726.66 1215.34 L1726.08 1215.34 L1725.49 1215.34 L1724.91 1215.34 L1724.32 1215.34 L1723.73 1215.34 L1723.15 1215.34 L1722.56 1215.34 L1721.97 1215.34 L1721.39 1215.34 L1720.8 1215.34 L1720.21 1215.34 L1719.63 1215.34 L1719.04 1215.34 L1718.45 1215.34 L1717.87 1215.34 L1717.28 1215.34 L1716.7 1215.34 L1716.11 1215.34 L1715.52 1215.34 L1714.94 1215.34 L1714.35 1215.34 L1713.76 1215.34 L1713.18 1215.34 L1712.59 1215.34 L1712 1215.34 L1711.42 1215.34 L1710.83 1215.34 L1710.24 1215.34 L1709.66 1215.34 L1709.07 1215.34 L1708.49 1215.34 L1707.9 1215.34 L1707.31 1215.34 L1706.73 1215.34 L1706.14 1215.34 L1705.55 1215.34 L1704.97 1215.34 L1704.38 1215.34 L1703.79 1215.34 L1703.21 1215.34 L1702.62 1215.34 L1702.04 1215.34 L1701.45 1215.34 L1700.86 1215.34 L1700.28 1215.34 L1699.69 1215.34 L1699.1 1215.34 L1698.52 1215.34 L1697.93 1215.34 L1697.34 1215.34 L1696.76 1215.34 L1696.17 1215.34 L1695.58 1215.34 L1695 1215.34 L1694.41 1215.34 L1693.83 1215.34 L1693.24 1215.34 L1692.65 1215.34 L1692.07 1215.34 L1691.48 1215.34 L1690.89 1215.34 L1690.31 1215.34 L1689.72 1215.34 L1689.13 1215.34 L1688.55 1215.34 L1687.96 1215.34 L1687.37 1215.34 L1686.79 1215.34 L1686.2 1215.34 L1685.62 1215.34 L1685.03 1215.34 L1684.44 1215.34 L1683.86 1215.34 L1683.27 1215.34 L1682.68 1215.34 L1682.1 1215.34 L1681.51 1215.34 L1680.92 1215.34 L1680.34 1215.34 L1679.75 1215.34 L1679.17 1215.34 L1678.58 1215.34 L1677.99 1215.34 L1677.41 1215.34 L1676.82 1215.34 L1676.23 1215.34 L1675.65 1215.34 L1675.06 1215.34 L1674.47 1215.34 L1673.89 1215.34 L1673.3 1215.34 L1672.71 1215.34 L1672.13 1215.34 L1671.54 1215.34 L1670.96 1215.34 L1670.37 1215.34 L1669.78 1215.34 L1669.2 1215.34 L1668.61 1215.34 L1668.02 1215.34 L1667.44 1215.34 L1666.85 1215.34 L1666.26 1215.34 L1665.68 1215.34 L1665.09 1215.34 L1664.5 1215.34 L1663.92 1215.34 L1663.33 1215.34 L1662.75 1215.34 L1662.16 1215.34 L1661.57 1215.34 L1660.99 1215.34 L1660.4 1215.34 L1659.81 1215.34 L1659.23 1215.34 L1658.64 1215.34 L1658.05 1215.34 L1657.47 1215.34 L1656.88 1215.34 L1656.29 1215.34 L1655.71 1215.34 L1655.12 1215.34 L1654.54 1215.34 L1653.95 1215.34 L1653.36 1215.34 L1652.78 1215.34 L1652.19 1215.34 L1651.6 1215.34 L1651.02 1215.34 L1650.43 1215.34 L1649.84 1215.34 L1649.26 1215.34 L1648.67 1215.34 L1648.09 1215.34 L1647.5 1215.34 L1646.91 1215.34 L1646.33 1215.34 L1645.74 1215.34 L1645.15 1215.34 L1644.57 1215.34 L1643.98 1215.34 L1643.39 1215.34 L1642.81 1215.34 L1642.22 1215.34 L1641.63 1215.34 L1641.05 1215.34 L1640.46 1215.34 L1639.88 1215.34 L1639.29 1215.34 L1638.7 1215.34 L1638.12 1215.34 L1637.53 1215.34 L1636.94 1215.34 L1636.36 1215.34 L1635.77 1215.34 L1635.18 1215.34 L1634.6 1215.34 L1634.01 1215.34 L1633.42 1215.34 L1632.84 1215.34 L1632.25 1215.34 L1631.67 1215.34 L1631.08 1215.34 L1630.49 1215.34 L1629.91 1215.34 L1629.32 1215.34 L1628.73 1215.34 L1628.15 1215.34 L1627.56 1215.34 L1626.97 1215.34 L1626.39 1215.34 L1625.8 1215.34 L1625.22 1215.34 L1624.63 1215.34 L1624.04 1215.34 L1623.46 1215.34 L1622.87 1215.34 L1622.28 1215.34 L1621.7 1215.34 L1621.11 1215.34 L1620.52 1215.34 L1619.94 1215.34 L1619.35 1215.34 L1618.76 1215.34 L1618.18 1215.34 L1617.59 1215.34 L1617.01 1215.34 L1616.42 1215.34 L1615.83 1215.34 L1615.25 1215.34 L1614.66 1215.34 L1614.07 1215.34 L1613.49 1215.34 L1612.9 1215.34 L1612.31 1215.34 L1611.73 1215.34 L1611.14 1215.34 L1610.55 1215.34 L1609.97 1215.34 L1609.38 1215.34 L1608.8 1215.34 L1608.21 1215.34 L1607.62 1215.34 L1607.04 1215.34 L1606.45 1215.34 L1605.86 1215.34 L1605.28 1215.34 L1604.69 1215.34 L1604.1 1215.34 L1603.52 1215.34 L1602.93 1215.34 L1602.34 1215.34 L1601.76 1215.34 L1601.17 1215.34 L1600.59 1215.34 L1600 1215.34 L1599.41 1215.34 L1598.83 1215.34 L1598.24 1215.34 L1597.65 1215.34 L1597.07 1215.34 L1596.48 1215.34 L1595.89 1215.34 L1595.31 1215.34 L1594.72 1215.34 L1594.14 1215.34 L1593.55 1215.34 L1592.96 1215.34 L1592.38 1215.34 L1591.79 1215.34 L1591.2 1215.34 L1590.62 1215.34 L1590.03 1215.34 L1589.44 1215.34 L1588.86 1215.34 L1588.27 1215.34 L1587.68 1215.34 L1587.1 1215.34 L1586.51 1215.34 L1585.93 1215.34 L1585.34 1215.34 L1584.75 1215.34 L1584.17 1215.34 L1583.58 1215.34 L1582.99 1215.34 L1582.41 1215.34 L1581.82 1215.34 L1581.23 1215.34 L1580.65 1215.34 L1580.06 1215.34 L1579.47 1215.34 L1578.89 1215.34 L1578.3 1215.34 L1577.72 1215.34 L1577.13 1215.34 L1576.54 1215.34 L1575.96 1215.34 L1575.37 1215.34 L1574.78 1215.34 L1574.2 1215.34 L1573.61 1215.34 L1573.02 1215.34 L1572.44 1215.34 L1571.85 1215.34 L1571.27 1215.34 L1570.68 1215.34 L1570.09 1215.34 L1569.51 1215.34 L1568.92 1215.34 L1568.33 1215.34 L1567.75 1215.34 L1567.16 1215.34 L1566.57 1215.34 L1565.99 1215.34 L1565.4 1215.34 L1564.81 1215.34 L1564.23 1215.34 L1563.64 1215.34 L1563.06 1215.34 L1562.47 1215.34 L1561.88 1215.34 L1561.3 1215.34 L1560.71 1215.34 L1560.12 1215.34 L1559.54 1215.34 L1558.95 1215.34 L1558.36 1215.34 L1557.78 1215.34 L1557.19 1215.34 L1556.6 1215.34 L1556.02 1215.34 L1555.43 1215.34 L1554.85 1215.34 L1554.26 1215.34 L1553.67 1215.34 L1553.09 1215.34 L1552.5 1215.34 L1551.91 1215.34 L1551.33 1215.34 L1550.74 1215.34 L1550.15 1215.34 L1549.57 1215.34 L1548.98 1215.34 L1548.4 1215.34 L1547.81 1215.34 L1547.22 1215.34 L1546.64 1215.34 L1546.05 1215.34 L1545.46 1215.34 L1544.88 1215.34 L1544.29 1215.34 L1543.7 1215.34 L1543.12 1215.34 L1542.53 1215.34 L1541.94 1215.34 L1541.36 1215.34 L1540.77 1215.34 L1540.19 1215.34 L1539.6 1215.34 L1539.01 1215.34 L1538.43 1215.34 L1537.84 1215.34 L1537.25 1215.34 L1536.67 1215.34 L1536.08 1215.34 L1535.49 1215.34 L1534.91 1215.34 L1534.32 1215.34 L1533.73 1215.34 L1533.15 1215.34 L1532.56 1215.34 L1531.98 1215.34 L1531.39 1215.34 L1530.8 1215.34 L1530.22 1215.34 L1529.63 1215.34 L1529.04 1215.34 L1528.46 1215.34 L1527.87 1215.34 L1527.28 1215.34 L1526.7 1215.34 L1526.11 1215.34 L1525.52 1215.34 L1524.94 1215.34 L1524.35 1215.34 L1523.77 1215.34 L1523.18 1215.34 L1522.59 1215.34 L1522.01 1215.34 L1521.42 1215.34 L1520.83 1215.34 L1520.25 1215.34 L1519.66 1215.34 L1519.07 1215.34 L1518.49 1215.34 L1517.9 1215.34 L1517.32 1215.34 L1516.73 1215.34 L1516.14 1215.34 L1515.56 1215.34 L1514.97 1215.34 L1514.38 1215.34 L1513.8 1215.34 L1513.21 1215.34 L1512.62 1215.34 L1512.04 1215.34 L1511.45 1215.34 L1510.86 1215.34 L1510.28 1215.34 L1509.69 1215.34 L1509.11 1215.34 L1508.52 1215.34 L1507.93 1215.34 L1507.35 1215.34 L1506.76 1215.34 L1506.17 1215.34 L1505.59 1215.34 L1505 1215.34 L1504.41 1215.34 L1503.83 1215.34 L1503.24 1215.34 L1502.65 1215.34 L1502.07 1215.34 L1501.48 1215.34 L1500.9 1215.34 L1500.31 1215.34 L1499.72 1215.34 L1499.14 1215.34 L1498.55 1215.34 L1497.96 1215.34 L1497.38 1215.34 L1496.79 1215.34 L1496.2 1215.34 L1495.62 1215.34 L1495.03 1215.34 L1494.45 1215.34 L1493.86 1215.34 L1493.27 1215.34 L1492.69 1215.34 L1492.1 1215.34 L1491.51 1215.34 L1490.93 1215.34 L1490.34 1215.34 L1489.75 1215.34 L1489.17 1215.34 L1488.58 1215.34 L1487.99 1215.34 L1487.41 1215.34 L1486.82 1215.34 L1486.24 1215.34 L1485.65 1215.34 L1485.06 1215.34 L1484.48 1215.34 L1483.89 1215.34 L1483.3 1215.34 L1482.72 1215.34 L1482.13 1215.34 L1481.54 1215.34 L1480.96 1215.34 L1480.37 1215.34 L1479.78 1215.34 L1479.2 1215.34 L1478.61 1215.34 L1478.03 1215.34 L1477.44 1215.34 L1476.85 1215.34 L1476.27 1215.34 L1475.68 1215.34 L1475.09 1215.34 L1474.51 1215.34 L1473.92 1215.34 L1473.33 1215.34 L1472.75 1215.34 L1472.16 1215.34 L1471.57 1215.34 L1470.99 1215.34 L1470.4 1215.34 L1469.82 1215.34 L1469.23 1215.34 L1468.64 1215.34 L1468.06 1215.34 L1467.47 1215.34 L1466.88 1215.34 L1466.3 1215.34 L1465.71 1215.34 L1465.12 1215.34 L1464.54 1215.34 L1463.95 1215.34 L1463.37 1215.34 L1462.78 1215.34 L1462.19 1215.34 L1461.61 1215.34 L1461.02 1215.34 L1460.43 1215.34 L1459.85 1215.34 L1459.26 1215.34 L1458.67 1215.34 L1458.09 1215.34 L1457.5 1215.34 L1456.91 1215.34 L1456.33 1215.34 L1455.74 1215.34 L1455.16 1215.34 L1454.57 1215.34 L1453.98 1215.34 L1453.4 1215.34 L1452.81 1215.34 L1452.22 1215.34 L1451.64 1215.34 L1451.05 1215.34 L1450.46 1215.34 L1449.88 1215.34 L1449.29 1215.34 L1448.7 1215.34 L1448.12 1215.34 L1447.53 1215.34 L1446.95 1215.34 L1446.36 1215.34 L1445.77 1215.34 L1445.19 1215.34 L1444.6 1215.34 L1444.01 1215.34 L1443.43 1215.34 L1442.84 1215.34 L1442.25 1215.34 L1441.67 1215.34 L1441.08 1215.34 L1440.5 1215.34 L1439.91 1215.34 L1439.32 1215.34 L1438.74 1215.34 L1438.15 1215.34 L1437.56 1215.34 L1436.98 1215.34 L1436.39 1215.34 L1435.8 1215.34 L1435.22 1215.34 L1434.63 1215.34 L1434.04 1215.34 L1433.46 1215.34 L1432.87 1215.34 L1432.29 1215.34 L1431.7 1215.34 L1431.11 1215.34 L1430.53 1215.34 L1429.94 1215.34 L1429.35 1215.34 L1428.77 1215.34 L1428.18 1215.34 L1427.59 1215.34 L1427.01 1215.34 L1426.42 1215.34 L1425.83 1215.34 L1425.25 1215.34 L1424.66 1215.34 L1424.08 1215.34 L1423.49 1215.34 L1422.9 1215.34 L1422.32 1215.34 L1421.73 1215.34 L1421.14 1215.34 L1420.56 1215.34 L1419.97 1215.34 L1419.38 1215.34 L1418.8 1215.34 L1418.21 1215.34 L1417.63 1215.34 L1417.04 1215.34 L1416.45 1215.34 L1415.87 1215.34 L1415.28 1215.34 L1414.69 1215.34 L1414.11 1215.34 L1413.52 1215.34 L1412.93 1215.34 L1412.35 1215.34 L1411.76 1215.34 L1411.17 1215.34 L1410.59 1215.34 L1410 1215.34 L1409.42 1215.34 L1408.83 1215.34 L1408.24 1215.34 L1407.66 1215.34 L1407.07 1215.34 L1406.48 1215.34 L1405.9 1215.34 L1405.31 1215.34 L1404.72 1215.34 L1404.14 1215.34 L1403.55 1215.34 L1402.96 1215.34 L1402.38 1215.34 L1401.79 1215.34 L1401.21 1215.34 L1400.62 1215.34 L1400.03 1215.34 L1399.45 1215.34 L1398.86 1215.34 L1398.27 1215.34 L1397.69 1215.34 L1397.1 1215.34 L1396.51 1215.34 L1395.93 1215.34 L1395.34 1215.34 L1394.75 1215.34 L1394.17 1215.34 L1393.58 1215.34 L1393 1215.34 L1392.41 1215.34 L1391.82 1215.34 L1391.24 1215.34 L1390.65 1215.34 L1390.06 1215.34 L1389.48 1215.34 L1388.89 1215.34 L1388.3 1215.34 L1387.72 1215.34 L1387.13 1215.34 L1386.55 1215.34 L1385.96 1215.34 L1385.37 1215.34 L1384.79 1215.34 L1384.2 1215.34 L1383.61 1215.34 L1383.03 1215.34 L1382.44 1215.34 L1381.85 1215.34 L1381.27 1215.34 L1380.68 1215.34 L1380.09 1215.34 L1379.51 1215.34 L1378.92 1215.34 L1378.34 1215.34 L1377.75 1215.34 L1377.16 1215.34 L1376.58 1215.34 L1375.99 1215.34 L1375.4 1215.34 L1374.82 1215.34 L1374.23 1215.34 L1373.64 1215.34 L1373.06 1215.34 L1372.47 1215.34 L1371.88 1215.34 L1371.3 1215.34 L1370.71 1215.34 L1370.13 1215.34 L1369.54 1215.34 L1368.95 1215.34 L1368.37 1215.34 L1367.78 1215.34 L1367.19 1215.34 L1366.61 1215.34 L1366.02 1215.34 L1365.43 1215.34 L1364.85 1215.34 L1364.26 1215.34 L1363.68 1215.34 L1363.09 1215.34 L1362.5 1215.34 L1361.92 1215.34 L1361.33 1215.34 L1360.74 1215.34 L1360.16 1215.34 L1359.57 1215.34 L1358.98 1215.34 L1358.4 1215.34 L1357.81 1215.34 L1357.22 1215.34 L1356.64 1215.34 L1356.05 1215.34 L1355.47 1215.34 L1354.88 1215.34 L1354.29 1215.34 L1353.71 1215.34 L1353.12 1215.34 L1352.53 1215.34 L1351.95 1215.34 L1351.36 1215.34 L1350.77 1215.34 L1350.19 1215.34 L1349.6 1215.34 L1349.01 1215.34 L1348.43 1215.34 L1347.84 1215.34 L1347.26 1215.34 L1346.67 1215.34 L1346.08 1215.34 L1345.5 1215.34 L1344.91 1215.34 L1344.32 1215.34 L1343.74 1215.34 L1343.15 1215.34 L1342.56 1215.34 L1341.98 1215.34 L1341.39 1215.34 L1340.8 1215.34 L1340.22 1215.34 L1339.63 1215.34 L1339.05 1215.34 L1338.46 1215.34 L1337.87 1215.34 L1337.29 1215.34 L1336.7 1215.34 L1336.11 1215.34 L1335.53 1215.34 L1334.94 1215.34 L1334.35 1215.34 L1333.77 1215.34 L1333.18 1215.34 L1332.6 1215.34 L1332.01 1215.34 L1331.42 1215.34 L1330.84 1215.34 L1330.25 1215.34 L1329.66 1215.34 L1329.08 1215.34 L1328.49 1215.34 L1327.9 1215.34 L1327.32 1215.34 L1326.73 1215.34 L1326.14 1215.34 L1325.56 1215.34 L1324.97 1215.34 L1324.39 1215.34 L1323.8 1215.34 L1323.21 1215.34 L1322.63 1215.34 L1322.04 1215.34 L1321.45 1215.34 L1320.87 1215.34 L1320.28 1215.34 L1319.69 1215.34 L1319.11 1215.34 L1318.52 1215.34 L1317.93 1215.34 L1317.35 1215.34 L1316.76 1215.34 L1316.18 1215.34 L1315.59 1215.34 L1315 1215.34 L1314.42 1215.34 L1313.83 1215.34 L1313.24 1215.34 L1312.66 1215.34 L1312.07 1215.34 L1311.48 1215.34 L1310.9 1215.34 L1310.31 1215.34 L1309.73 1215.34 L1309.14 1215.34 L1308.55 1215.34 L1307.97 1215.34 L1307.38 1215.34 L1306.79 1215.34 L1306.21 1215.34 L1305.62 1215.34 L1305.03 1215.34 L1304.45 1215.34 L1303.86 1215.34 L1303.27 1215.34 L1302.69 1215.34 L1302.1 1215.34 L1301.52 1215.34 L1300.93 1215.34 L1300.34 1215.34 L1299.76 1215.34 L1299.17 1215.34 L1298.58 1215.34 L1298 1215.34 L1297.41 1215.34 L1296.82 1215.34 L1296.24 1215.34 L1295.65 1215.34 L1295.06 1215.34 L1294.48 1215.34 L1293.89 1215.34 L1293.31 1215.34 L1292.72 1215.34 L1292.13 1215.34 L1291.55 1215.34 L1290.96 1215.34 L1290.37 1215.34 L1289.79 1215.34 L1289.2 1215.34 L1288.61 1215.34 L1288.03 1215.34 L1287.44 1215.34 L1286.86 1215.34 L1286.27 1215.34 L1285.68 1215.34 L1285.1 1215.34 L1284.51 1215.34 L1283.92 1215.34 L1283.34 1215.34 L1282.75 1215.34 L1282.16 1215.34 L1281.58 1215.34 L1280.99 1215.34 L1280.4 1215.34 L1279.82 1215.34 L1279.23 1215.34 L1278.65 1215.34 L1278.06 1215.34 L1277.47 1215.34 L1276.89 1215.34 L1276.3 1215.34 L1275.71 1215.34 L1275.13 1215.34 L1274.54 1215.34 L1273.95 1215.34 L1273.37 1215.34 L1272.78 1215.34 L1272.19 1215.34 L1271.61 1215.34 L1271.02 1215.34 L1270.44 1215.34 L1269.85 1215.34 L1269.26 1215.34 L1268.68 1215.34 L1268.09 1215.34 L1267.5 1215.34 L1266.92 1215.34 L1266.33 1215.34 L1265.74 1215.34 L1265.16 1215.34 L1264.57 1215.34 L1263.98 1215.34 L1263.4 1215.34 L1262.81 1215.34 L1262.23 1215.34 L1261.64 1215.34 L1261.05 1215.34 L1260.47 1215.34 L1259.88 1215.34 L1259.29 1215.34 L1258.71 1215.34 L1258.12 1215.34 L1257.53 1215.34 L1256.95 1215.34 L1256.36 1215.34 L1255.78 1215.34 L1255.19 1215.34 L1254.6 1215.34 L1254.02 1215.34 L1253.43 1215.34 L1252.84 1215.34 L1252.26 1215.34 L1251.67 1215.34 L1251.08 1215.34 L1250.5 1215.34 L1249.91 1215.34 L1249.32 1215.34 L1248.74 1215.34 L1248.15 1215.34 L1247.57 1215.34 L1246.98 1215.34 L1246.39 1215.34 L1245.81 1215.34 L1245.22 1215.34 L1244.63 1215.34 L1244.05 1215.34 L1243.46 1215.34 L1242.87 1215.34 L1242.29 1215.34 L1241.7 1215.34 L1241.11 1215.34 L1240.53 1215.34 L1239.94 1215.34 L1239.36 1215.34 L1238.77 1215.34 L1238.18 1215.34 L1237.6 1215.34 L1237.01 1215.34 L1236.42 1215.34 L1235.84 1215.34 L1235.25 1215.34 L1234.66 1215.34 L1234.08 1215.34 L1233.49 1215.34 L1232.91 1215.34 L1232.32 1215.34 L1231.73 1215.34 L1231.15 1215.34 L1230.56 1215.34 L1229.97 1215.34 L1229.39 1215.34 L1228.8 1215.34 L1228.21 1215.34 L1227.63 1215.34 L1227.04 1215.34 L1226.45 1215.34 L1225.87 1215.34 L1225.28 1215.34 L1224.7 1215.34 L1224.11 1215.34 L1223.52 1215.34 L1222.94 1215.34 L1222.35 1215.34 L1221.76 1215.34 L1221.18 1215.34 L1220.59 1215.34 L1220 1215.34 L1219.42 1215.34 L1218.83 1215.34 L1218.24 1215.34 L1217.66 1215.34 L1217.07 1215.34 L1216.49 1215.34 L1215.9 1215.34 L1215.31 1215.34 L1214.73 1215.34 L1214.14 1215.34 L1213.55 1215.34 L1212.97 1215.34 L1212.38 1215.34 L1211.79 1215.34 L1211.21 1215.34 L1210.62 1215.34 L1210.03 1215.34 L1209.45 1215.34 L1208.86 1215.34 L1208.28 1215.34 L1207.69 1215.34 L1207.1 1215.34 L1206.52 1215.34 L1205.93 1215.34 L1205.34 1215.34 L1204.76 1215.34 L1204.17 1215.34 L1203.58 1215.34 L1203 1215.34 L1202.41 1215.34 L1201.83 1215.34 L1201.24 1215.34 L1200.65 1215.34 L1200.07 1215.34 L1199.48 1215.34 L1198.89 1215.34 L1198.31 1215.34 L1197.72 1215.34 L1197.13 1215.34 L1196.55 1215.34 L1195.96 1215.34 L1195.37 1215.34 L1194.79 1215.34 L1194.2 1215.34 L1193.62 1215.34 L1193.03 1215.34 L1192.44 1215.34 L1191.86 1215.34 L1191.27 1215.34 L1190.68 1215.34 L1190.1 1215.34 L1189.51 1215.34 L1188.92 1215.34 L1188.34 1215.34 L1187.75 1215.34 L1187.16 1215.34 L1186.58 1215.34 L1185.99 1215.34 L1185.41 1215.34 L1184.82 1215.34 L1184.23 1215.34 L1183.65 1215.34 L1183.06 1215.34 L1182.47 1215.34 L1181.89 1215.34 L1181.3 1215.34 L1180.71 1215.34 L1180.13 1215.34 L1179.54 1215.34 L1178.96 1215.34 L1178.37 1215.34 L1177.78 1215.34 L1177.2 1215.34 L1176.61 1215.34 L1176.02 1215.34 L1175.44 1215.34 L1174.85 1215.34 L1174.26 1215.34 L1173.68 1215.34 L1173.09 1215.34 L1172.5 1215.34 L1171.92 1215.34 L1171.33 1215.34 L1170.75 1215.34 L1170.16 1215.34 L1169.57 1215.34 L1168.99 1215.34 L1168.4 1215.34 L1167.81 1215.34 L1167.23 1215.34 L1166.64 1215.34 L1166.05 1215.34 L1165.47 1215.34 L1164.88 1215.34 L1164.29 1215.34 L1163.71 1215.34 L1163.12 1215.34 L1162.54 1215.34 L1161.95 1215.34 L1161.36 1215.34 L1160.78 1215.34 L1160.19 1215.34 L1159.6 1215.34 L1159.02 1215.34 L1158.43 1215.34 L1157.84 1215.34 L1157.26 1215.34 L1156.67 1215.34 L1156.09 1215.34 L1155.5 1215.34 L1154.91 1215.34 L1154.33 1215.34 L1153.74 1215.34 L1153.15 1215.34 L1152.57 1215.34 L1151.98 1215.34 L1151.39 1215.34 L1150.81 1215.34 L1150.22 1215.34 L1149.63 1215.34 L1149.05 1215.34 L1148.46 1215.34 L1147.88 1215.34 L1147.29 1215.34 L1146.7 1215.34 L1146.12 1215.34 L1145.53 1215.34 L1144.94 1215.34 L1144.36 1215.34 L1143.77 1215.34 L1143.18 1215.34 L1142.6 1215.34 L1142.01 1215.34 L1141.42 1215.34 L1140.84 1215.34 L1140.25 1215.34 L1139.67 1215.34 L1139.08 1215.34 L1138.49 1215.34 L1137.91 1215.34 L1137.32 1215.34 L1136.73 1215.34 L1136.15 1215.34 L1135.56 1215.34 L1134.97 1215.34 L1134.39 1215.34 L1133.8 1215.34 L1133.21 1215.34 L1132.63 1215.34 L1132.04 1215.34 L1131.46 1215.34 L1130.87 1215.34 L1130.28 1215.34 L1129.7 1215.34 L1129.11 1215.34 L1128.52 1215.34 L1127.94 1215.34 L1127.35 1215.34 L1126.76 1215.34 L1126.18 1215.34 L1125.59 1215.34 L1125.01 1215.34 L1124.42 1215.34 L1123.83 1215.34 L1123.25 1215.34 L1122.66 1215.34 L1122.07 1215.34 L1121.49 1215.34 L1120.9 1215.34 L1120.31 1215.34 L1119.73 1215.34 L1119.14 1215.34 L1118.55 1215.34 L1117.97 1215.34 L1117.38 1215.34 L1116.8 1215.34 L1116.21 1215.34 L1115.62 1215.34 L1115.04 1215.34 L1114.45 1215.34 L1113.86 1215.34 L1113.28 1215.34 L1112.69 1215.34 L1112.1 1215.34 L1111.52 1215.34 L1110.93 1215.34 L1110.34 1215.34 L1109.76 1215.34 L1109.17 1215.34 L1108.59 1215.34 L1108 1215.34 L1107.41 1215.34 L1106.83 1215.34 L1106.24 1215.34 L1105.65 1215.34 L1105.07 1215.34 L1104.48 1215.34 L1103.89 1215.34 L1103.31 1215.34 L1102.72 1215.34 L1102.14 1215.34 L1101.55 1215.34 L1100.96 1215.34 L1100.38 1215.34 L1099.79 1215.34 L1099.2 1215.34 L1098.62 1215.34 L1098.03 1215.34 L1097.44 1215.34 L1096.86 1215.34 L1096.27 1215.34 L1095.68 1215.34 L1095.1 1215.34 L1094.51 1215.34 L1093.93 1215.34 L1093.34 1215.34 L1092.75 1215.34 L1092.17 1215.34 L1091.58 1215.34 L1090.99 1215.34 L1090.41 1215.34 L1089.82 1215.34 L1089.23 1215.34 L1088.65 1215.34 L1088.06 1215.34 L1087.47 1215.34 L1086.89 1215.34 L1086.3 1215.34 L1085.72 1215.34 L1085.13 1215.34 L1084.54 1215.34 L1083.96 1215.34 L1083.37 1215.34 L1082.78 1215.34 L1082.2 1215.34 L1081.61 1215.34 L1081.02 1215.34 L1080.44 1215.34 L1079.85 1215.34 L1079.26 1215.34 L1078.68 1215.34 L1078.09 1215.34 L1077.51 1215.34 L1076.92 1215.34 L1076.33 1215.34 L1075.75 1215.34 L1075.16 1215.34 L1074.57 1215.34 L1073.99 1215.34 L1073.4 1215.34 L1072.81 1215.34 L1072.23 1215.34 L1071.64 1215.34 L1071.06 1215.34 L1070.47 1215.34 L1069.88 1215.34 L1069.3 1215.34 L1068.71 1215.34 L1068.12 1215.34 L1067.54 1215.34 L1066.95 1215.34 L1066.36 1215.34 L1065.78 1215.34 L1065.19 1215.34 L1064.6 1215.34 L1064.02 1215.34 L1063.43 1215.34 L1062.85 1215.34 L1062.26 1215.34 L1061.67 1215.34 L1061.09 1215.34 L1060.5 1215.34 L1059.91 1215.34 L1059.33 1215.34 L1058.74 1215.34 L1058.15 1215.34 L1057.57 1215.34 L1056.98 1215.34 L1056.39 1215.34 L1055.81 1215.34 L1055.22 1215.34 L1054.64 1215.34 L1054.05 1215.34 L1053.46 1215.34 L1052.88 1215.34 L1052.29 1215.34 L1051.7 1215.34 L1051.12 1215.34 L1050.53 1215.34 L1049.94 1215.34 L1049.36 1215.34 L1048.77 1215.34 L1048.19 1215.34 L1047.6 1215.34 L1047.01 1215.34 L1046.43 1215.34 L1045.84 1215.34 L1045.25 1215.34 L1044.67 1215.34 L1044.08 1215.34 L1043.49 1215.34 L1042.91 1215.34 L1042.32 1215.34 L1041.73 1215.34 L1041.15 1215.34 L1040.56 1215.34 L1039.98 1215.34 L1039.39 1215.34 L1038.8 1215.34 L1038.22 1215.34 L1037.63 1215.34 L1037.04 1215.34 L1036.46 1215.34 L1035.87 1215.34 L1035.28 1215.34 L1034.7 1215.34 L1034.11 1215.34 L1033.52 1215.34 L1032.94 1215.34 L1032.35 1215.34 L1031.77 1215.34 L1031.18 1215.34 L1030.59 1215.34 L1030.01 1215.34 L1029.42 1215.34 L1028.83 1215.34 L1028.25 1215.34 L1027.66 1215.34 L1027.07 1215.34 L1026.49 1215.34 L1025.9 1215.34 L1025.32 1215.34 L1024.73 1215.34 L1024.14 1215.34 L1023.56 1215.34 L1022.97 1215.34 L1022.38 1215.34 L1021.8 1215.34 L1021.21 1215.34 L1020.62 1215.34 L1020.04 1215.34 L1019.45 1215.34 L1018.86 1215.34 L1018.28 1215.34 L1017.69 1215.34 L1017.11 1215.34 L1016.52 1215.34 L1015.93 1215.34 L1015.35 1215.34 L1014.76 1215.34 L1014.17 1215.34 L1013.59 1215.34 L1013 1215.34 L1012.41 1215.34 L1011.83 1215.34 L1011.24 1215.34 L1010.65 1215.34 L1010.07 1215.34 L1009.48 1215.34 L1008.9 1215.34 L1008.31 1215.34 L1007.72 1215.34 L1007.14 1215.34 L1006.55 1215.34 L1005.96 1215.34 L1005.38 1215.34 L1004.79 1215.34 L1004.2 1215.34 L1003.62 1215.34 L1003.03 1215.34 L1002.44 1215.34 L1001.86 1215.34 L1001.27 1215.34 L1000.69 1215.34 L1000.1 1215.34 L999.513 1215.34 L998.926 1215.34 L998.34 1215.34 L997.754 1215.34 L997.167 1215.34 L996.581 1215.34 L995.994 1215.34 L995.408 1215.34 L994.822 1215.34 L994.235 1215.34 L993.649 1215.34 L993.062 1215.34 L992.476 1215.34 L991.889 1215.34 L991.303 1215.34 L990.717 1215.34 L990.13 1215.34 L989.544 1215.34 L988.957 1215.34 L988.371 1215.34 L987.785 1215.34 L987.198 1215.34 L986.612 1215.34 L986.025 1215.34  Z\" fill=\"#e26f46\" fill-rule=\"evenodd\" fill-opacity=\"0.5\"/>\n<polyline clip-path=\"url(#clip152)\" style=\"stroke:#e26f46; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"986.025,1215.66 986.612,1215.66 987.198,1215.66 987.785,1215.66 988.371,1215.66 988.957,1215.66 989.544,1215.66 990.13,1215.66 990.717,1215.66 991.303,1215.66 991.889,1215.66 992.476,1215.66 993.062,1215.66 993.649,1215.66 994.235,1215.66 994.822,1215.66 995.408,1215.66 995.994,1215.66 996.581,1215.66 997.167,1215.66 997.754,1215.66 998.34,1215.66 998.926,1215.66 999.513,1215.66 1000.1,1215.66 1000.69,1215.66 1001.27,1215.66 1001.86,1215.66 1002.44,1215.66 1003.03,1215.66 1003.62,1215.66 1004.2,1215.66 1004.79,1215.66 1005.38,1215.66 1005.96,1215.66 1006.55,1215.66 1007.14,1215.66 1007.72,1215.66 1008.31,1215.66 1008.9,1215.66 1009.48,1215.66 1010.07,1215.66 1010.65,1215.66 1011.24,1215.66 1011.83,1215.66 1012.41,1215.66 1013,1215.66 1013.59,1215.66 1014.17,1215.66 1014.76,1215.66 1015.35,1215.66 1015.93,1215.66 1016.52,1215.66 1017.11,1215.66 1017.69,1215.66 1018.28,1215.66 1018.86,1215.66 1019.45,1215.66 1020.04,1215.66 1020.62,1215.66 1021.21,1215.66 1021.8,1215.66 1022.38,1215.66 1022.97,1215.66 1023.56,1215.66 1024.14,1215.66 1024.73,1215.66 1025.32,1215.66 1025.9,1215.66 1026.49,1215.66 1027.07,1215.66 1027.66,1215.66 1028.25,1215.66 1028.83,1215.66 1029.42,1215.66 1030.01,1215.66 1030.59,1215.66 1031.18,1215.66 1031.77,1215.66 1032.35,1215.66 1032.94,1215.66 1033.52,1215.66 1034.11,1215.66 1034.7,1215.66 1035.28,1215.66 1035.87,1215.66 1036.46,1215.66 1037.04,1215.66 1037.63,1215.66 1038.22,1215.66 1038.8,1215.66 1039.39,1215.66 1039.98,1215.66 1040.56,1215.66 1041.15,1215.66 1041.73,1215.66 1042.32,1215.66 1042.91,1215.66 1043.49,1215.66 1044.08,1215.66 1044.67,1215.66 1045.25,1215.66 1045.84,1215.66 1046.43,1215.66 1047.01,1215.66 1047.6,1215.66 1048.19,1215.66 1048.77,1215.66 1049.36,1215.66 1049.94,1215.66 1050.53,1215.66 1051.12,1215.66 1051.7,1215.66 1052.29,1215.66 1052.88,1215.66 1053.46,1215.66 1054.05,1215.66 1054.64,1215.66 1055.22,1215.66 1055.81,1215.66 1056.39,1215.66 1056.98,1215.66 1057.57,1215.66 1058.15,1215.66 1058.74,1215.66 1059.33,1215.66 1059.91,1215.66 1060.5,1215.66 1061.09,1215.66 1061.67,1215.66 1062.26,1215.66 1062.85,1215.66 1063.43,1215.66 1064.02,1215.66 1064.6,1215.66 1065.19,1215.66 1065.78,1215.66 1066.36,1215.66 1066.95,1215.66 1067.54,1215.66 1068.12,1215.66 1068.71,1215.66 1069.3,1215.66 1069.88,1215.66 1070.47,1215.66 1071.06,1215.66 1071.64,1215.66 1072.23,1215.66 1072.81,1215.66 1073.4,1215.66 1073.99,1215.66 1074.57,1215.66 1075.16,1215.66 1075.75,1215.66 1076.33,1215.66 1076.92,1215.66 1077.51,1215.66 1078.09,1215.66 1078.68,1215.66 1079.26,1215.66 1079.85,1215.66 1080.44,1215.66 1081.02,1215.66 1081.61,1215.66 1082.2,1215.66 1082.78,1215.66 1083.37,1215.66 1083.96,1215.66 1084.54,1215.66 1085.13,1215.66 1085.72,1215.66 1086.3,1215.66 1086.89,1215.66 1087.47,1215.66 1088.06,1215.66 1088.65,1215.66 1089.23,1215.66 1089.82,1215.66 1090.41,1215.66 1090.99,1215.66 1091.58,1215.66 1092.17,1215.66 1092.75,1215.66 1093.34,1215.66 1093.93,1215.66 1094.51,1215.66 1095.1,1215.66 1095.68,1215.66 1096.27,1215.66 1096.86,1215.66 1097.44,1215.66 1098.03,1215.66 1098.62,1215.66 1099.2,1215.66 1099.79,1215.66 1100.38,1215.66 1100.96,1215.66 1101.55,1215.66 1102.14,1215.66 1102.72,1215.66 1103.31,1215.66 1103.89,1215.66 1104.48,1215.66 1105.07,1215.66 1105.65,1215.66 1106.24,1215.66 1106.83,1215.66 1107.41,1215.66 1108,1215.66 1108.59,1215.66 1109.17,1215.66 1109.76,1215.66 1110.34,1215.66 1110.93,1215.66 1111.52,1215.66 1112.1,1215.66 1112.69,1215.66 1113.28,1215.66 1113.86,1215.66 1114.45,1215.66 1115.04,1215.66 1115.62,1215.66 1116.21,1215.66 1116.8,1215.66 1117.38,1215.66 1117.97,1215.66 1118.55,1215.66 1119.14,1215.66 1119.73,1215.66 1120.31,1215.66 1120.9,1215.66 1121.49,1215.66 1122.07,1215.66 1122.66,1215.66 1123.25,1215.66 1123.83,1215.66 1124.42,1215.66 1125.01,1215.66 1125.59,1215.66 1126.18,1215.66 1126.76,1215.66 1127.35,1215.66 1127.94,1215.66 1128.52,1215.66 1129.11,1215.66 1129.7,1215.66 1130.28,1215.66 1130.87,1215.66 1131.46,1215.66 1132.04,1215.66 1132.63,1215.66 1133.21,1215.66 1133.8,1215.66 1134.39,1215.66 1134.97,1215.66 1135.56,1215.66 1136.15,1215.66 1136.73,1215.66 1137.32,1215.66 1137.91,1215.66 1138.49,1215.66 1139.08,1215.66 1139.67,1215.66 1140.25,1215.66 1140.84,1215.66 1141.42,1215.66 1142.01,1215.66 1142.6,1215.66 1143.18,1215.66 1143.77,1215.66 1144.36,1215.66 1144.94,1215.66 1145.53,1215.66 1146.12,1215.66 1146.7,1215.66 1147.29,1215.66 1147.88,1215.66 1148.46,1215.66 1149.05,1215.66 1149.63,1215.66 1150.22,1215.66 1150.81,1215.66 1151.39,1215.66 1151.98,1215.66 1152.57,1215.66 1153.15,1215.66 1153.74,1215.66 1154.33,1215.66 1154.91,1215.66 1155.5,1215.66 1156.09,1215.66 1156.67,1215.66 1157.26,1215.66 1157.84,1215.66 1158.43,1215.66 1159.02,1215.66 1159.6,1215.66 1160.19,1215.66 1160.78,1215.66 1161.36,1215.66 1161.95,1215.66 1162.54,1215.66 1163.12,1215.66 1163.71,1215.66 1164.29,1215.66 1164.88,1215.66 1165.47,1215.66 1166.05,1215.66 1166.64,1215.66 1167.23,1215.66 1167.81,1215.66 1168.4,1215.66 1168.99,1215.66 1169.57,1215.66 1170.16,1215.66 1170.75,1215.66 1171.33,1215.66 1171.92,1215.66 1172.5,1215.66 1173.09,1215.66 1173.68,1215.66 1174.26,1215.66 1174.85,1215.66 1175.44,1215.66 1176.02,1215.66 1176.61,1215.66 1177.2,1215.66 1177.78,1215.66 1178.37,1215.66 1178.96,1215.66 1179.54,1215.66 1180.13,1215.66 1180.71,1215.66 1181.3,1215.66 1181.89,1215.66 1182.47,1215.66 1183.06,1215.66 1183.65,1215.66 1184.23,1215.66 1184.82,1215.66 1185.41,1215.66 1185.99,1215.66 1186.58,1215.66 1187.16,1215.66 1187.75,1215.66 1188.34,1215.66 1188.92,1215.66 1189.51,1215.66 1190.1,1215.66 1190.68,1215.66 1191.27,1215.66 1191.86,1215.66 1192.44,1215.66 1193.03,1215.66 1193.62,1215.66 1194.2,1215.66 1194.79,1215.66 1195.37,1215.66 1195.96,1215.66 1196.55,1215.66 1197.13,1215.66 1197.72,1215.66 1198.31,1215.66 1198.89,1215.66 1199.48,1215.66 1200.07,1215.66 1200.65,1215.66 1201.24,1215.66 1201.83,1215.66 1202.41,1215.66 1203,1215.66 1203.58,1215.66 1204.17,1215.66 1204.76,1215.66 1205.34,1215.66 1205.93,1215.66 1206.52,1215.66 1207.1,1215.66 1207.69,1215.66 1208.28,1215.66 1208.86,1215.66 1209.45,1215.66 1210.03,1215.66 1210.62,1215.66 1211.21,1215.66 1211.79,1215.66 1212.38,1215.66 1212.97,1215.66 1213.55,1215.66 1214.14,1215.66 1214.73,1215.66 1215.31,1215.66 1215.9,1215.66 1216.49,1215.66 1217.07,1215.66 1217.66,1215.66 1218.24,1215.66 1218.83,1215.66 1219.42,1215.66 1220,1215.66 1220.59,1215.66 1221.18,1215.66 1221.76,1215.66 1222.35,1215.66 1222.94,1215.66 1223.52,1215.66 1224.11,1215.66 1224.7,1215.66 1225.28,1215.66 1225.87,1215.66 1226.45,1215.66 1227.04,1215.66 1227.63,1215.66 1228.21,1215.66 1228.8,1215.66 1229.39,1215.66 1229.97,1215.66 1230.56,1215.66 1231.15,1215.66 1231.73,1215.66 1232.32,1215.66 1232.91,1215.66 1233.49,1215.66 1234.08,1215.66 1234.66,1215.66 1235.25,1215.66 1235.84,1215.66 1236.42,1215.66 1237.01,1215.66 1237.6,1215.66 1238.18,1215.66 1238.77,1215.66 1239.36,1215.66 1239.94,1215.66 1240.53,1215.66 1241.11,1215.66 1241.7,1215.66 1242.29,1215.66 1242.87,1215.66 1243.46,1215.66 1244.05,1215.66 1244.63,1215.66 1245.22,1215.66 1245.81,1215.66 1246.39,1215.66 1246.98,1215.66 1247.57,1215.66 1248.15,1215.66 1248.74,1215.66 1249.32,1215.66 1249.91,1215.66 1250.5,1215.66 1251.08,1215.66 1251.67,1215.66 1252.26,1215.66 1252.84,1215.66 1253.43,1215.66 1254.02,1215.66 1254.6,1215.66 1255.19,1215.66 1255.78,1215.66 1256.36,1215.66 1256.95,1215.66 1257.53,1215.66 1258.12,1215.66 1258.71,1215.66 1259.29,1215.66 1259.88,1215.66 1260.47,1215.66 1261.05,1215.66 1261.64,1215.66 1262.23,1215.66 1262.81,1215.66 1263.4,1215.66 1263.98,1215.66 1264.57,1215.66 1265.16,1215.66 1265.74,1215.66 1266.33,1215.66 1266.92,1215.66 1267.5,1215.66 1268.09,1215.66 1268.68,1215.66 1269.26,1215.66 1269.85,1215.66 1270.44,1215.66 1271.02,1215.66 1271.61,1215.66 1272.19,1215.66 1272.78,1215.66 1273.37,1215.66 1273.95,1215.66 1274.54,1215.66 1275.13,1215.66 1275.71,1215.66 1276.3,1215.66 1276.89,1215.66 1277.47,1215.66 1278.06,1215.66 1278.65,1215.66 1279.23,1215.66 1279.82,1215.66 1280.4,1215.66 1280.99,1215.66 1281.58,1215.66 1282.16,1215.66 1282.75,1215.66 1283.34,1215.66 1283.92,1215.66 1284.51,1215.66 1285.1,1215.66 1285.68,1215.66 1286.27,1215.66 1286.86,1215.66 1287.44,1215.66 1288.03,1215.66 1288.61,1215.66 1289.2,1215.66 1289.79,1215.66 1290.37,1215.66 1290.96,1215.66 1291.55,1215.66 1292.13,1215.66 1292.72,1215.66 1293.31,1215.66 1293.89,1215.66 1294.48,1215.66 1295.06,1215.66 1295.65,1215.66 1296.24,1215.66 1296.82,1215.66 1297.41,1215.66 1298,1215.66 1298.58,1215.66 1299.17,1215.66 1299.76,1215.66 1300.34,1215.66 1300.93,1215.66 1301.52,1215.66 1302.1,1215.66 1302.69,1215.66 1303.27,1215.66 1303.86,1215.66 1304.45,1215.66 1305.03,1215.66 1305.62,1215.66 1306.21,1215.66 1306.79,1215.66 1307.38,1215.66 1307.97,1215.66 1308.55,1215.66 1309.14,1215.66 1309.73,1215.66 1310.31,1215.66 1310.9,1215.66 1311.48,1215.66 1312.07,1215.66 1312.66,1215.66 1313.24,1215.66 1313.83,1215.66 1314.42,1215.66 1315,1215.66 1315.59,1215.66 1316.18,1215.66 1316.76,1215.66 1317.35,1215.66 1317.93,1215.66 1318.52,1215.66 1319.11,1215.66 1319.69,1215.66 1320.28,1215.66 1320.87,1215.66 1321.45,1215.66 1322.04,1215.66 1322.63,1215.66 1323.21,1215.66 1323.8,1215.66 1324.39,1215.66 1324.97,1215.66 1325.56,1215.66 1326.14,1215.66 1326.73,1215.66 1327.32,1215.66 1327.9,1215.66 1328.49,1215.66 1329.08,1215.66 1329.66,1215.66 1330.25,1215.66 1330.84,1215.66 1331.42,1215.66 1332.01,1215.66 1332.6,1215.66 1333.18,1215.66 1333.77,1215.66 1334.35,1215.66 1334.94,1215.66 1335.53,1215.66 1336.11,1215.66 1336.7,1215.66 1337.29,1215.66 1337.87,1215.66 1338.46,1215.66 1339.05,1215.66 1339.63,1215.66 1340.22,1215.66 1340.8,1215.66 1341.39,1215.66 1341.98,1215.66 1342.56,1215.66 1343.15,1215.66 1343.74,1215.66 1344.32,1215.66 1344.91,1215.66 1345.5,1215.66 1346.08,1215.66 1346.67,1215.66 1347.26,1215.66 1347.84,1215.66 1348.43,1215.66 1349.01,1215.66 1349.6,1215.66 1350.19,1215.66 1350.77,1215.66 1351.36,1215.66 1351.95,1215.66 1352.53,1215.66 1353.12,1215.66 1353.71,1215.66 1354.29,1215.66 1354.88,1215.66 1355.47,1215.66 1356.05,1215.66 1356.64,1215.66 1357.22,1215.66 1357.81,1215.66 1358.4,1215.66 1358.98,1215.66 1359.57,1215.66 1360.16,1215.66 1360.74,1215.66 1361.33,1215.66 1361.92,1215.66 1362.5,1215.66 1363.09,1215.66 1363.68,1215.66 1364.26,1215.66 1364.85,1215.66 1365.43,1215.66 1366.02,1215.66 1366.61,1215.66 1367.19,1215.66 1367.78,1215.66 1368.37,1215.66 1368.95,1215.66 1369.54,1215.66 1370.13,1215.66 1370.71,1215.66 1371.3,1215.66 1371.88,1215.66 1372.47,1215.66 1373.06,1215.66 1373.64,1215.66 1374.23,1215.66 1374.82,1215.66 1375.4,1215.66 1375.99,1215.66 1376.58,1215.66 1377.16,1215.66 1377.75,1215.66 1378.34,1215.66 1378.92,1215.66 1379.51,1215.66 1380.09,1215.66 1380.68,1215.66 1381.27,1215.66 1381.85,1215.66 1382.44,1215.66 1383.03,1215.66 1383.61,1215.66 1384.2,1215.66 1384.79,1215.66 1385.37,1215.66 1385.96,1215.66 1386.55,1215.66 1387.13,1215.66 1387.72,1215.66 1388.3,1215.66 1388.89,1215.66 1389.48,1215.66 1390.06,1215.66 1390.65,1215.66 1391.24,1215.66 1391.82,1215.66 1392.41,1215.66 1393,1215.66 1393.58,1215.66 1394.17,1215.66 1394.75,1215.66 1395.34,1215.66 1395.93,1215.66 1396.51,1215.66 1397.1,1215.66 1397.69,1215.66 1398.27,1215.66 1398.86,1215.66 1399.45,1215.66 1400.03,1215.66 1400.62,1215.66 1401.21,1215.66 1401.79,1215.66 1402.38,1215.66 1402.96,1215.66 1403.55,1215.66 1404.14,1215.66 1404.72,1215.66 1405.31,1215.66 1405.9,1215.66 1406.48,1215.66 1407.07,1215.66 1407.66,1215.66 1408.24,1215.66 1408.83,1215.66 1409.42,1215.66 1410,1215.66 1410.59,1215.66 1411.17,1215.66 1411.76,1215.66 1412.35,1215.66 1412.93,1215.66 1413.52,1215.66 1414.11,1215.66 1414.69,1215.66 1415.28,1215.66 1415.87,1215.66 1416.45,1215.66 1417.04,1215.66 1417.63,1215.66 1418.21,1215.66 1418.8,1215.66 1419.38,1215.66 1419.97,1215.66 1420.56,1215.66 1421.14,1215.66 1421.73,1215.66 1422.32,1215.66 1422.9,1215.66 1423.49,1215.66 1424.08,1215.66 1424.66,1215.66 1425.25,1215.66 1425.83,1215.66 1426.42,1215.66 1427.01,1215.66 1427.59,1215.66 1428.18,1215.66 1428.77,1215.66 1429.35,1215.66 1429.94,1215.66 1430.53,1215.66 1431.11,1215.66 1431.7,1215.66 1432.29,1215.66 1432.87,1215.66 1433.46,1215.66 1434.04,1215.66 1434.63,1215.66 1435.22,1215.66 1435.8,1215.66 1436.39,1215.66 1436.98,1215.66 1437.56,1215.66 1438.15,1215.66 1438.74,1215.66 1439.32,1215.66 1439.91,1215.66 1440.5,1215.66 1441.08,1215.66 1441.67,1215.66 1442.25,1215.66 1442.84,1215.66 1443.43,1215.66 1444.01,1215.66 1444.6,1215.66 1445.19,1215.66 1445.77,1215.66 1446.36,1215.66 1446.95,1215.66 1447.53,1215.66 1448.12,1215.66 1448.7,1215.66 1449.29,1215.66 1449.88,1215.66 1450.46,1215.66 1451.05,1215.66 1451.64,1215.66 1452.22,1215.66 1452.81,1215.66 1453.4,1215.66 1453.98,1215.66 1454.57,1215.66 1455.16,1215.66 1455.74,1215.66 1456.33,1215.66 1456.91,1215.66 1457.5,1215.66 1458.09,1215.66 1458.67,1215.66 1459.26,1215.66 1459.85,1215.66 1460.43,1215.66 1461.02,1215.66 1461.61,1215.66 1462.19,1215.66 1462.78,1215.66 1463.37,1215.66 1463.95,1215.66 1464.54,1215.66 1465.12,1215.66 1465.71,1215.66 1466.3,1215.66 1466.88,1215.66 1467.47,1215.66 1468.06,1215.66 1468.64,1215.66 1469.23,1215.66 1469.82,1215.66 1470.4,1215.66 1470.99,1215.66 1471.57,1215.66 1472.16,1215.66 1472.75,1215.66 1473.33,1215.66 1473.92,1215.66 1474.51,1215.66 1475.09,1215.66 1475.68,1215.66 1476.27,1215.66 1476.85,1215.66 1477.44,1215.66 1478.03,1215.66 1478.61,1215.66 1479.2,1215.66 1479.78,1215.66 1480.37,1215.66 1480.96,1215.66 1481.54,1215.66 1482.13,1215.66 1482.72,1215.66 1483.3,1215.66 1483.89,1215.66 1484.48,1215.66 1485.06,1215.66 1485.65,1215.66 1486.24,1215.66 1486.82,1215.66 1487.41,1215.66 1487.99,1215.66 1488.58,1215.66 1489.17,1215.66 1489.75,1215.66 1490.34,1215.66 1490.93,1215.66 1491.51,1215.66 1492.1,1215.66 1492.69,1215.66 1493.27,1215.66 1493.86,1215.66 1494.45,1215.66 1495.03,1215.66 1495.62,1215.66 1496.2,1215.66 1496.79,1215.66 1497.38,1215.66 1497.96,1215.66 1498.55,1215.66 1499.14,1215.66 1499.72,1215.66 1500.31,1215.66 1500.9,1215.66 1501.48,1215.66 1502.07,1215.66 1502.65,1215.66 1503.24,1215.66 1503.83,1215.66 1504.41,1215.66 1505,1215.66 1505.59,1215.66 1506.17,1215.66 1506.76,1215.66 1507.35,1215.66 1507.93,1215.66 1508.52,1215.66 1509.11,1215.66 1509.69,1215.66 1510.28,1215.66 1510.86,1215.66 1511.45,1215.66 1512.04,1215.66 1512.62,1215.66 1513.21,1215.66 1513.8,1215.66 1514.38,1215.66 1514.97,1215.66 1515.56,1215.66 1516.14,1215.66 1516.73,1215.66 1517.32,1215.66 1517.9,1215.66 1518.49,1215.66 1519.07,1215.66 1519.66,1215.66 1520.25,1215.66 1520.83,1215.66 1521.42,1215.66 1522.01,1215.66 1522.59,1215.66 1523.18,1215.66 1523.77,1215.66 1524.35,1215.66 1524.94,1215.66 1525.52,1215.66 1526.11,1215.66 1526.7,1215.66 1527.28,1215.66 1527.87,1215.66 1528.46,1215.66 1529.04,1215.66 1529.63,1215.66 1530.22,1215.66 1530.8,1215.66 1531.39,1215.66 1531.98,1215.66 1532.56,1215.66 1533.15,1215.66 1533.73,1215.66 1534.32,1215.66 1534.91,1215.66 1535.49,1215.66 1536.08,1215.66 1536.67,1215.66 1537.25,1215.66 1537.84,1215.66 1538.43,1215.66 1539.01,1215.66 1539.6,1215.66 1540.19,1215.66 1540.77,1215.66 1541.36,1215.66 1541.94,1215.66 1542.53,1215.66 1543.12,1215.66 1543.7,1215.66 1544.29,1215.66 1544.88,1215.66 1545.46,1215.66 1546.05,1215.66 1546.64,1215.66 1547.22,1215.66 1547.81,1215.66 1548.4,1215.66 1548.98,1215.66 1549.57,1215.66 1550.15,1215.66 1550.74,1215.66 1551.33,1215.66 1551.91,1215.66 1552.5,1215.66 1553.09,1215.66 1553.67,1215.66 1554.26,1215.66 1554.85,1215.66 1555.43,1215.66 1556.02,1215.66 1556.6,1215.66 1557.19,1215.66 1557.78,1215.66 1558.36,1215.66 1558.95,1215.66 1559.54,1215.66 1560.12,1215.66 1560.71,1215.66 1561.3,1215.66 1561.88,1215.66 1562.47,1215.66 1563.06,1215.66 1563.64,1215.66 1564.23,1215.66 1564.81,1215.66 1565.4,1215.66 1565.99,1215.66 1566.57,1215.66 1567.16,1215.66 1567.75,1215.66 1568.33,1215.66 1568.92,1215.66 1569.51,1215.66 1570.09,1215.66 1570.68,1215.66 1571.27,1215.66 1571.85,1215.66 1572.44,1215.66 1573.02,1215.66 1573.61,1215.66 1574.2,1215.66 1574.78,1215.66 1575.37,1215.66 1575.96,1215.66 1576.54,1215.66 1577.13,1215.66 1577.72,1215.66 1578.3,1215.66 1578.89,1215.66 1579.47,1215.66 1580.06,1215.66 1580.65,1215.66 1581.23,1215.66 1581.82,1215.66 1582.41,1215.66 1582.99,1215.66 1583.58,1215.66 1584.17,1215.66 1584.75,1215.66 1585.34,1215.66 1585.93,1215.66 1586.51,1215.66 1587.1,1215.66 1587.68,1215.66 1588.27,1215.66 1588.86,1215.66 1589.44,1215.66 1590.03,1215.66 1590.62,1215.66 1591.2,1215.66 1591.79,1215.66 1592.38,1215.66 1592.96,1215.66 1593.55,1215.66 1594.14,1215.66 1594.72,1215.66 1595.31,1215.66 1595.89,1215.66 1596.48,1215.66 1597.07,1215.66 1597.65,1215.66 1598.24,1215.66 1598.83,1215.66 1599.41,1215.66 1600,1215.66 1600.59,1215.66 1601.17,1215.66 1601.76,1215.66 1602.34,1215.66 1602.93,1215.66 1603.52,1215.66 1604.1,1215.66 1604.69,1215.66 1605.28,1215.66 1605.86,1215.66 1606.45,1215.66 1607.04,1215.66 1607.62,1215.66 1608.21,1215.66 1608.8,1215.66 1609.38,1215.66 1609.97,1215.66 1610.55,1215.66 1611.14,1215.66 1611.73,1215.66 1612.31,1215.66 1612.9,1215.66 1613.49,1215.66 1614.07,1215.66 1614.66,1215.66 1615.25,1215.66 1615.83,1215.66 1616.42,1215.66 1617.01,1215.66 1617.59,1215.66 1618.18,1215.66 1618.76,1215.66 1619.35,1215.66 1619.94,1215.66 1620.52,1215.66 1621.11,1215.66 1621.7,1215.66 1622.28,1215.66 1622.87,1215.66 1623.46,1215.66 1624.04,1215.66 1624.63,1215.66 1625.22,1215.66 1625.8,1215.66 1626.39,1215.66 1626.97,1215.66 1627.56,1215.66 1628.15,1215.66 1628.73,1215.66 1629.32,1215.66 1629.91,1215.66 1630.49,1215.66 1631.08,1215.66 1631.67,1215.66 1632.25,1215.66 1632.84,1215.66 1633.42,1215.66 1634.01,1215.66 1634.6,1215.66 1635.18,1215.66 1635.77,1215.66 1636.36,1215.66 1636.94,1215.66 1637.53,1215.66 1638.12,1215.66 1638.7,1215.66 1639.29,1215.66 1639.88,1215.66 1640.46,1215.66 1641.05,1215.66 1641.63,1215.66 1642.22,1215.66 1642.81,1215.66 1643.39,1215.66 1643.98,1215.66 1644.57,1215.66 1645.15,1215.66 1645.74,1215.66 1646.33,1215.66 1646.91,1215.66 1647.5,1215.66 1648.09,1215.66 1648.67,1215.66 1649.26,1215.66 1649.84,1215.66 1650.43,1215.66 1651.02,1215.66 1651.6,1215.66 1652.19,1215.66 1652.78,1215.66 1653.36,1215.66 1653.95,1215.66 1654.54,1215.66 1655.12,1215.66 1655.71,1215.66 1656.29,1215.66 1656.88,1215.66 1657.47,1215.66 1658.05,1215.66 1658.64,1215.66 1659.23,1215.66 1659.81,1215.66 1660.4,1215.66 1660.99,1215.66 1661.57,1215.66 1662.16,1215.66 1662.75,1215.66 1663.33,1215.66 1663.92,1215.66 1664.5,1215.66 1665.09,1215.66 1665.68,1215.66 1666.26,1215.66 1666.85,1215.66 1667.44,1215.66 1668.02,1215.66 1668.61,1215.66 1669.2,1215.66 1669.78,1215.66 1670.37,1215.66 1670.96,1215.66 1671.54,1215.66 1672.13,1215.66 1672.71,1215.66 1673.3,1215.66 1673.89,1215.66 1674.47,1215.66 1675.06,1215.66 1675.65,1215.66 1676.23,1215.66 1676.82,1215.66 1677.41,1215.66 1677.99,1215.66 1678.58,1215.66 1679.17,1215.66 1679.75,1215.66 1680.34,1215.66 1680.92,1215.66 1681.51,1215.66 1682.1,1215.66 1682.68,1215.66 1683.27,1215.66 1683.86,1215.66 1684.44,1215.66 1685.03,1215.66 1685.62,1215.66 1686.2,1215.66 1686.79,1215.66 1687.37,1215.66 1687.96,1215.66 1688.55,1215.66 1689.13,1215.66 1689.72,1215.66 1690.31,1215.66 1690.89,1215.66 1691.48,1215.66 1692.07,1215.66 1692.65,1215.66 1693.24,1215.66 1693.83,1215.66 1694.41,1215.66 1695,1215.66 1695.58,1215.66 1696.17,1215.66 1696.76,1215.66 1697.34,1215.66 1697.93,1215.66 1698.52,1215.66 1699.1,1215.66 1699.69,1215.66 1700.28,1215.66 1700.86,1215.66 1701.45,1215.66 1702.04,1215.66 1702.62,1215.66 1703.21,1215.66 1703.79,1215.66 1704.38,1215.66 1704.97,1215.66 1705.55,1215.66 1706.14,1215.66 1706.73,1215.66 1707.31,1215.66 1707.9,1215.66 1708.49,1215.66 1709.07,1215.66 1709.66,1215.66 1710.24,1215.66 1710.83,1215.66 1711.42,1215.66 1712,1215.66 1712.59,1215.66 1713.18,1215.66 1713.76,1215.66 1714.35,1215.66 1714.94,1215.66 1715.52,1215.66 1716.11,1215.66 1716.7,1215.66 1717.28,1215.66 1717.87,1215.66 1718.45,1215.66 1719.04,1215.66 1719.63,1215.66 1720.21,1215.66 1720.8,1215.66 1721.39,1215.66 1721.97,1215.66 1722.56,1215.66 1723.15,1215.66 1723.73,1215.66 1724.32,1215.66 1724.91,1215.66 1725.49,1215.66 1726.08,1215.66 1726.66,1215.66 1727.25,1215.66 1727.84,1215.66 1728.42,1215.66 1729.01,1215.66 1729.6,1215.66 1730.18,1215.66 1730.77,1215.66 1731.36,1215.66 1731.94,1215.66 1732.53,1215.66 1733.11,1215.66 1733.7,1215.66 1734.29,1215.66 1734.87,1215.66 1735.46,1215.66 1736.05,1215.66 1736.63,1215.66 1737.22,1215.66 1737.81,1215.66 1738.39,1215.66 1738.98,1215.66 1739.57,1215.66 1740.15,1215.66 1740.74,1215.66 1741.32,1215.66 1741.91,1215.66 1742.5,1215.66 1743.08,1215.66 1743.67,1215.66 1744.26,1215.66 1744.84,1215.66 1745.43,1215.66 1746.02,1215.66 1746.6,1215.66 1747.19,1215.66 1747.78,1215.66 1748.36,1215.66 1748.95,1215.66 1749.53,1215.66 1750.12,1215.66 1750.71,1215.66 1751.29,1215.66 1751.88,1215.66 1752.47,1215.66 1753.05,1215.66 1753.64,1215.66 1754.23,1215.66 1754.81,1215.66 1755.4,1215.66 1755.99,1215.66 1756.57,1215.66 1757.16,1215.66 1757.74,1215.66 1758.33,1215.66 1758.92,1215.66 1759.5,1215.66 1760.09,1215.66 1760.68,1215.66 1761.26,1215.66 1761.85,1215.66 1762.44,1215.66 1763.02,1215.66 1763.61,1215.66 1764.19,1215.66 1764.78,1215.66 1765.37,1215.66 1765.95,1215.66 1766.54,1215.66 1767.13,1215.66 1767.71,1215.66 1768.3,1215.66 1768.89,1215.66 1769.47,1215.66 1770.06,1215.66 1770.65,1215.66 1771.23,1215.66 1771.82,1215.66 1772.4,1215.66 1772.99,1215.66 1773.58,1215.66 1774.16,1215.66 1774.75,1215.66 1775.34,1215.66 1775.92,1215.66 1776.51,1215.66 1777.1,1215.66 1777.68,1215.66 1778.27,1215.66 1778.86,1215.66 1779.44,1215.66 1780.03,1215.66 1780.61,1215.66 1781.2,1215.66 1781.79,1215.66 1782.37,1215.66 1782.96,1215.66 1783.55,1215.66 1784.13,1215.66 1784.72,1215.66 1785.31,1215.66 1785.89,1215.66 1786.48,1215.66 1787.06,1215.66 1787.65,1215.66 1788.24,1215.66 1788.82,1215.66 1789.41,1215.66 1790,1215.66 1790.58,1215.66 1791.17,1215.66 1791.76,1215.66 1792.34,1215.66 1792.93,1215.66 1793.52,1215.66 1794.1,1215.66 1794.69,1215.66 1795.27,1215.66 1795.86,1215.66 1796.45,1215.66 1797.03,1215.66 1797.62,1215.66 1798.21,1215.66 1798.79,1215.66 1799.38,1215.66 1799.97,1215.66 1800.55,1215.66 1801.14,1215.66 1801.73,1215.66 1802.31,1215.66 1802.9,1215.66 1803.48,1215.66 1804.07,1215.66 1804.66,1215.66 1805.24,1215.66 1805.83,1215.66 1806.42,1215.66 1807,1215.66 1807.59,1215.66 1808.18,1215.66 1808.76,1215.66 1809.35,1215.66 1809.94,1215.66 1810.52,1215.66 1811.11,1215.66 1811.69,1215.66 1812.28,1215.66 1812.87,1215.66 1813.45,1215.66 1814.04,1215.66 1814.63,1215.66 1815.21,1215.66 1815.8,1215.66 1816.39,1215.66 1816.97,1215.66 1817.56,1215.66 1818.14,1215.66 1818.73,1215.66 1819.32,1215.66 1819.9,1215.66 1820.49,1215.66 1821.08,1215.66 1821.66,1215.66 1822.25,1215.66 1822.84,1215.66 1823.42,1215.66 1824.01,1215.66 1824.6,1215.66 1825.18,1215.66 1825.77,1215.66 1826.35,1215.66 1826.94,1215.66 1827.53,1215.66 1828.11,1215.66 1828.7,1215.66 1829.29,1215.66 1829.87,1215.66 1830.46,1215.66 1831.05,1215.66 1831.63,1215.66 1832.22,1215.66 1832.81,1215.66 1833.39,1215.66 1833.98,1215.66 1834.56,1215.66 1835.15,1215.66 1835.74,1215.66 1836.32,1215.66 1836.91,1215.66 1837.5,1215.66 1838.08,1215.66 1838.67,1215.66 1839.26,1215.66 1839.84,1215.66 1840.43,1215.66 1841.01,1215.66 1841.6,1215.66 1842.19,1215.66 1842.77,1215.66 1843.36,1215.66 1843.95,1215.66 1844.53,1215.66 1845.12,1215.66 1845.71,1215.66 1846.29,1215.66 1846.88,1215.66 1847.47,1215.66 1848.05,1215.66 1848.64,1215.66 1849.22,1215.66 1849.81,1215.66 1850.4,1215.66 1850.98,1215.66 1851.57,1215.66 1852.16,1215.66 1852.74,1215.66 1853.33,1215.66 1853.92,1215.66 1854.5,1215.66 1855.09,1215.66 1855.68,1215.66 1856.26,1215.66 1856.85,1215.66 1857.43,1215.66 1858.02,1215.66 1858.61,1215.66 1859.19,1215.66 1859.78,1215.66 1860.37,1215.66 1860.95,1215.66 1861.54,1215.66 1862.13,1215.66 1862.71,1215.66 1863.3,1215.66 1863.88,1215.66 1864.47,1215.66 1865.06,1215.66 1865.64,1215.66 1866.23,1215.66 1866.82,1215.66 1867.4,1215.66 1867.99,1215.66 1868.58,1215.66 1869.16,1215.66 1869.75,1215.66 1870.34,1215.66 1870.92,1215.66 1871.51,1215.66 1872.09,1215.66 1872.68,1215.66 1873.27,1215.66 1873.85,1215.66 1874.44,1215.66 1875.03,1215.66 1875.61,1215.66 1876.2,1215.66 1876.79,1215.66 1877.37,1215.66 1877.96,1215.66 1878.55,1215.66 1879.13,1215.66 1879.72,1215.66 1880.3,1215.66 1880.89,1215.66 1881.48,1215.66 1882.06,1215.66 1882.65,1215.66 1883.24,1215.66 1883.82,1215.66 1884.41,1215.66 1885,1215.66 1885.58,1215.66 1886.17,1215.66 1886.76,1215.66 1887.34,1215.66 1887.93,1215.66 1888.51,1215.66 1889.1,1215.66 1889.69,1215.66 1890.27,1215.66 1890.86,1215.66 1891.45,1215.66 1892.03,1215.66 1892.62,1215.66 1893.21,1215.66 1893.79,1215.66 1894.38,1215.66 1894.96,1215.66 1895.55,1215.66 1896.14,1215.66 1896.72,1215.66 1897.31,1215.66 1897.9,1215.66 1898.48,1215.66 1899.07,1215.66 1899.66,1215.66 1900.24,1215.66 1900.83,1215.66 1901.42,1215.66 1902,1215.66 1902.59,1215.66 1903.17,1215.66 1903.76,1215.66 1904.35,1215.66 1904.93,1215.66 1905.52,1215.66 1906.11,1215.66 1906.69,1215.66 1907.28,1215.66 1907.87,1215.66 1908.45,1215.66 1909.04,1215.66 1909.63,1215.66 1910.21,1215.66 1910.8,1215.66 1911.38,1215.66 1911.97,1215.66 1912.56,1215.66 1913.14,1215.66 1913.73,1215.66 1914.32,1215.66 1914.9,1215.66 1915.49,1215.66 1916.08,1215.66 1916.66,1215.66 1917.25,1215.66 1917.83,1215.66 1918.42,1215.66 1919.01,1215.66 1919.59,1215.66 1920.18,1215.66 1920.77,1215.66 1921.35,1215.66 1921.94,1215.66 1922.53,1215.66 1923.11,1215.66 1923.7,1215.66 1924.29,1215.66 1924.87,1215.66 1925.46,1215.66 1926.04,1215.66 1926.63,1215.66 1927.22,1215.66 1927.8,1215.66 1928.39,1215.66 1928.98,1215.66 1929.56,1215.66 1930.15,1215.66 1930.74,1215.66 1931.32,1215.66 1931.91,1215.66 1932.5,1215.66 1933.08,1215.66 1933.67,1215.66 1934.25,1215.66 1934.84,1215.66 1935.43,1215.66 1936.01,1215.66 1936.6,1215.66 1937.19,1215.66 1937.77,1215.66 1938.36,1215.66 1938.95,1215.66 1939.53,1215.66 1940.12,1215.66 1940.71,1215.66 1941.29,1215.66 1941.88,1215.66 1942.46,1215.66 1943.05,1215.66 1943.64,1215.66 1944.22,1215.66 1944.81,1215.66 1945.4,1215.66 1945.98,1215.66 1946.57,1215.66 1947.16,1215.66 1947.74,1215.66 1948.33,1215.66 1948.91,1215.66 1949.5,1215.66 1950.09,1215.66 1950.67,1215.66 1951.26,1215.66 1951.85,1215.66 1952.43,1215.66 1953.02,1215.66 1953.61,1215.66 1954.19,1215.66 1954.78,1215.66 1955.37,1215.66 1955.95,1215.66 1956.54,1215.66 1957.12,1215.66 1957.71,1215.66 1958.3,1215.66 1958.88,1215.66 1959.47,1215.66 1960.06,1215.66 1960.64,1215.66 1961.23,1215.66 1961.82,1215.66 1962.4,1215.66 1962.99,1215.66 1963.58,1215.66 1964.16,1215.66 1964.75,1215.66 1965.33,1215.66 1965.92,1215.66 1966.51,1215.66 1967.09,1215.66 1967.68,1215.66 1968.27,1215.66 1968.85,1215.66 1969.44,1215.66 1970.03,1215.66 1970.61,1215.66 1971.2,1215.66 1971.78,1215.66 1972.37,1215.66 1972.96,1215.66 1973.54,1215.66 1974.13,1215.66 1974.72,1215.66 1975.3,1215.66 1975.89,1215.66 1976.48,1215.66 1977.06,1215.66 1977.65,1215.66 1978.24,1215.66 1978.82,1215.66 1979.41,1215.66 1979.99,1215.66 1980.58,1215.66 1981.17,1215.66 1981.75,1215.66 1982.34,1215.66 1982.93,1215.66 1983.51,1215.66 1984.1,1215.66 1984.69,1215.66 1985.27,1215.66 1985.86,1215.66 1986.45,1215.66 1987.03,1215.66 1987.62,1215.66 1988.2,1215.66 1988.79,1215.66 1989.38,1215.66 1989.96,1215.66 1990.55,1215.66 1991.14,1215.66 1991.72,1215.66 1992.31,1215.66 1992.9,1215.66 1993.48,1215.66 1994.07,1215.66 1994.65,1215.66 1995.24,1215.66 1995.83,1215.66 1996.41,1215.66 1997,1215.66 1997.59,1215.66 1998.17,1215.66 1998.76,1215.66 1999.35,1215.66 1999.93,1215.66 2000.52,1215.66 2001.11,1215.66 2001.69,1215.66 2002.28,1215.66 2002.86,1215.66 2003.45,1215.66 2004.04,1215.66 2004.62,1215.66 2005.21,1215.66 2005.8,1215.66 2006.38,1215.66 2006.97,1215.66 2007.56,1215.66 2008.14,1215.66 2008.73,1215.66 2009.32,1215.66 2009.9,1215.66 2010.49,1215.66 2011.07,1215.66 2011.66,1215.66 2012.25,1215.66 2012.83,1215.66 2013.42,1215.66 2014.01,1215.66 2014.59,1215.66 2015.18,1215.66 2015.77,1215.66 2016.35,1215.66 2016.94,1215.66 2017.53,1215.66 2018.11,1215.66 2018.7,1215.66 2019.28,1215.66 2019.87,1215.66 2020.46,1215.66 2021.04,1215.66 2021.63,1215.66 2022.22,1215.66 2022.8,1215.66 2023.39,1215.66 2023.98,1215.66 2024.56,1215.66 2025.15,1215.66 2025.73,1215.66 2026.32,1215.66 2026.91,1215.66 2027.49,1215.66 2028.08,1215.66 2028.67,1215.66 2029.25,1215.66 2029.84,1215.66 2030.43,1215.66 2031.01,1215.66 2031.6,1215.66 2032.19,1215.66 2032.77,1215.66 2033.36,1215.66 2033.94,1215.66 2034.53,1215.66 2035.12,1215.66 2035.7,1215.66 2036.29,1215.66 2036.88,1215.66 2037.46,1215.66 2038.05,1215.66 2038.64,1215.66 2039.22,1215.66 2039.81,1215.66 2040.4,1215.66 2040.98,1215.66 2041.57,1215.66 2042.15,1215.66 2042.74,1215.66 2043.33,1215.66 2043.91,1215.66 2044.5,1215.66 2045.09,1215.66 2045.67,1215.66 2046.26,1215.66 2046.85,1215.66 2047.43,1215.66 2048.02,1215.66 2048.6,1215.66 2049.19,1215.66 2049.78,1215.66 2050.36,1215.66 2050.95,1215.66 2051.54,1215.66 2052.12,1215.66 2052.71,1215.66 2053.3,1215.66 2053.88,1215.66 2054.47,1215.66 2055.06,1215.66 2055.64,1215.66 2056.23,1215.66 2056.81,1215.66 2057.4,1215.66 2057.99,1215.66 2058.57,1215.66 2059.16,1215.66 2059.75,1215.66 2060.33,1215.66 2060.92,1215.66 2061.51,1215.66 2062.09,1215.66 2062.68,1215.66 2063.27,1215.66 2063.85,1215.66 2064.44,1215.66 2065.02,1215.66 2065.61,1215.66 2066.2,1215.66 2066.78,1215.66 2067.37,1215.66 2067.96,1215.66 2068.54,1215.66 2069.13,1215.66 2069.72,1215.66 2070.3,1215.66 2070.89,1215.66 2071.48,1215.66 2072.06,1215.66 2072.65,1215.66 2073.23,1215.66 2073.82,1215.66 2074.41,1215.66 2074.99,1215.66 2075.58,1215.66 2076.17,1215.66 2076.75,1215.66 2077.34,1215.66 2077.93,1215.66 2078.51,1215.66 2079.1,1215.66 2079.68,1215.66 2080.27,1215.66 2080.86,1215.66 2081.44,1215.66 2082.03,1215.66 2082.62,1215.66 2083.2,1215.66 2083.79,1215.66 2084.38,1215.66 2084.96,1215.66 2085.55,1215.66 2086.14,1215.66 2086.72,1215.66 2087.31,1215.66 2087.89,1215.66 2088.48,1215.66 2089.07,1215.66 2089.65,1215.66 2090.24,1215.66 2090.83,1215.66 2091.41,1215.66 2092,1215.66 2092.59,1215.66 2093.17,1215.66 2093.76,1215.66 2094.35,1215.66 2094.93,1215.66 2095.52,1215.66 2096.1,1215.66 2096.69,1215.66 2097.28,1215.66 2097.86,1215.66 2098.45,1215.66 2099.04,1215.66 2099.62,1215.66 2100.21,1215.66 2100.8,1215.66 2101.38,1215.66 2101.97,1215.66 2102.55,1215.66 2103.14,1215.66 2103.73,1215.66 2104.31,1215.66 2104.9,1215.66 2105.49,1215.66 2106.07,1215.66 2106.66,1215.66 2107.25,1215.66 2107.83,1215.66 2108.42,1215.66 2109.01,1215.66 2109.59,1215.66 2110.18,1215.66 2110.76,1215.66 2111.35,1215.66 2111.94,1215.66 2112.52,1215.66 2113.11,1215.66 2113.7,1215.66 2114.28,1215.66 2114.87,1215.66 2115.46,1215.66 2116.04,1215.66 2116.63,1215.66 2117.22,1215.66 2117.8,1215.66 2118.39,1215.66 2118.97,1215.66 2119.56,1215.66 2120.15,1215.66 2120.73,1215.66 2121.32,1215.66 2121.91,1215.66 2122.49,1215.66 2123.08,1215.66 2123.67,1215.66 2124.25,1215.66 2124.84,1215.66 2125.42,1215.66 2126.01,1215.66 2126.6,1215.66 2127.18,1215.66 2127.77,1215.66 2128.36,1215.66 2128.94,1215.66 2129.53,1215.66 2130.12,1215.66 2130.7,1215.66 2131.29,1215.66 2131.88,1215.66 2132.46,1215.66 2133.05,1215.66 2133.63,1215.66 2134.22,1215.66 2134.81,1215.66 2135.39,1215.66 2135.98,1215.66 2136.57,1215.66 2137.15,1215.66 2137.74,1215.66 2138.33,1215.66 2138.91,1215.66 2139.5,1215.66 2140.09,1215.66 2140.67,1215.66 2141.26,1215.66 2141.84,1215.66 2142.43,1215.66 2143.02,1215.66 2143.6,1215.66 2144.19,1215.66 2144.78,1215.66 2145.36,1215.66 2145.95,1215.66 2146.54,1215.66 2147.12,1215.66 2147.71,1215.66 2148.3,1215.66 2148.88,1215.66 2149.47,1215.66 2150.05,1215.66 2150.64,1215.66 2151.23,1215.66 2151.81,1215.66 2152.4,1215.66 2152.99,1215.66 2153.57,1215.66 2154.16,1215.66 2154.75,1215.66 2155.33,1215.66 2155.92,1215.66 2156.5,1215.66 2157.09,1215.66 2157.68,1215.66 2158.26,1215.66 \"/>\n<path clip-path=\"url(#clip152)\" d=\"M986.025 1215.59 L986.612 1215.59 L987.198 1215.59 L987.785 1215.59 L988.371 1215.59 L988.957 1215.59 L989.544 1215.59 L990.13 1215.59 L990.717 1215.59 L991.303 1215.59 L991.889 1215.59 L992.476 1215.59 L993.062 1215.59 L993.649 1215.59 L994.235 1215.59 L994.822 1215.59 L995.408 1215.59 L995.994 1215.59 L996.581 1215.59 L997.167 1215.59 L997.754 1215.59 L998.34 1215.59 L998.926 1215.59 L999.513 1215.59 L1000.1 1215.59 L1000.69 1215.59 L1001.27 1215.59 L1001.86 1215.59 L1002.44 1215.59 L1003.03 1215.59 L1003.62 1215.59 L1004.2 1215.59 L1004.79 1215.59 L1005.38 1215.59 L1005.96 1215.59 L1006.55 1215.59 L1007.14 1215.59 L1007.72 1215.59 L1008.31 1215.59 L1008.9 1215.59 L1009.48 1215.59 L1010.07 1215.59 L1010.65 1215.59 L1011.24 1215.59 L1011.83 1215.59 L1012.41 1215.59 L1013 1215.59 L1013.59 1215.59 L1014.17 1215.59 L1014.76 1215.59 L1015.35 1215.59 L1015.93 1215.59 L1016.52 1215.59 L1017.11 1215.59 L1017.69 1215.59 L1018.28 1215.59 L1018.86 1215.59 L1019.45 1215.59 L1020.04 1215.59 L1020.62 1215.59 L1021.21 1215.59 L1021.8 1215.59 L1022.38 1215.59 L1022.97 1215.59 L1023.56 1215.59 L1024.14 1215.59 L1024.73 1215.59 L1025.32 1215.59 L1025.9 1215.59 L1026.49 1215.59 L1027.07 1215.59 L1027.66 1215.59 L1028.25 1215.59 L1028.83 1215.59 L1029.42 1215.59 L1030.01 1215.59 L1030.59 1215.59 L1031.18 1215.59 L1031.77 1215.59 L1032.35 1215.59 L1032.94 1215.59 L1033.52 1215.59 L1034.11 1215.59 L1034.7 1215.59 L1035.28 1215.59 L1035.87 1215.59 L1036.46 1215.59 L1037.04 1215.59 L1037.63 1215.59 L1038.22 1215.59 L1038.8 1215.59 L1039.39 1215.59 L1039.98 1215.59 L1040.56 1215.59 L1041.15 1215.59 L1041.73 1215.59 L1042.32 1215.59 L1042.91 1215.59 L1043.49 1215.59 L1044.08 1215.59 L1044.67 1215.59 L1045.25 1215.59 L1045.84 1215.59 L1046.43 1215.59 L1047.01 1215.59 L1047.6 1215.59 L1048.19 1215.59 L1048.77 1215.59 L1049.36 1215.59 L1049.94 1215.59 L1050.53 1215.59 L1051.12 1215.59 L1051.7 1215.59 L1052.29 1215.59 L1052.88 1215.59 L1053.46 1215.59 L1054.05 1215.59 L1054.64 1215.59 L1055.22 1215.59 L1055.81 1215.59 L1056.39 1215.59 L1056.98 1215.59 L1057.57 1215.59 L1058.15 1215.59 L1058.74 1215.59 L1059.33 1215.59 L1059.91 1215.59 L1060.5 1215.59 L1061.09 1215.59 L1061.67 1215.59 L1062.26 1215.59 L1062.85 1215.59 L1063.43 1215.59 L1064.02 1215.59 L1064.6 1215.59 L1065.19 1215.59 L1065.78 1215.59 L1066.36 1215.59 L1066.95 1215.59 L1067.54 1215.59 L1068.12 1215.59 L1068.71 1215.59 L1069.3 1215.59 L1069.88 1215.59 L1070.47 1215.59 L1071.06 1215.59 L1071.64 1215.59 L1072.23 1215.59 L1072.81 1215.59 L1073.4 1215.59 L1073.99 1215.59 L1074.57 1215.59 L1075.16 1215.59 L1075.75 1215.59 L1076.33 1215.59 L1076.92 1215.59 L1077.51 1215.59 L1078.09 1215.59 L1078.68 1215.59 L1079.26 1215.59 L1079.85 1215.59 L1080.44 1215.59 L1081.02 1215.59 L1081.61 1215.59 L1082.2 1215.59 L1082.78 1215.59 L1083.37 1215.59 L1083.96 1215.59 L1084.54 1215.59 L1085.13 1215.59 L1085.72 1215.59 L1086.3 1215.59 L1086.89 1215.59 L1087.47 1215.59 L1088.06 1215.59 L1088.65 1215.59 L1089.23 1215.59 L1089.82 1215.59 L1090.41 1215.59 L1090.99 1215.59 L1091.58 1215.59 L1092.17 1215.59 L1092.75 1215.59 L1093.34 1215.59 L1093.93 1215.59 L1094.51 1215.59 L1095.1 1215.59 L1095.68 1215.59 L1096.27 1215.59 L1096.86 1215.59 L1097.44 1215.59 L1098.03 1215.59 L1098.62 1215.59 L1099.2 1215.59 L1099.79 1215.59 L1100.38 1215.59 L1100.96 1215.59 L1101.55 1215.59 L1102.14 1215.59 L1102.72 1215.59 L1103.31 1215.59 L1103.89 1215.59 L1104.48 1215.59 L1105.07 1215.59 L1105.65 1215.59 L1106.24 1215.59 L1106.83 1215.59 L1107.41 1215.59 L1108 1215.59 L1108.59 1215.59 L1109.17 1215.59 L1109.76 1215.59 L1110.34 1215.59 L1110.93 1215.59 L1111.52 1215.59 L1112.1 1215.59 L1112.69 1215.59 L1113.28 1215.59 L1113.86 1215.59 L1114.45 1215.59 L1115.04 1215.59 L1115.62 1215.59 L1116.21 1215.59 L1116.8 1215.59 L1117.38 1215.59 L1117.97 1215.59 L1118.55 1215.59 L1119.14 1215.59 L1119.73 1215.59 L1120.31 1215.59 L1120.9 1215.59 L1121.49 1215.59 L1122.07 1215.59 L1122.66 1215.59 L1123.25 1215.59 L1123.83 1215.59 L1124.42 1215.59 L1125.01 1215.59 L1125.59 1215.59 L1126.18 1215.59 L1126.76 1215.59 L1127.35 1215.59 L1127.94 1215.59 L1128.52 1215.59 L1129.11 1215.59 L1129.7 1215.59 L1130.28 1215.59 L1130.87 1215.59 L1131.46 1215.59 L1132.04 1215.59 L1132.63 1215.59 L1133.21 1215.59 L1133.8 1215.59 L1134.39 1215.59 L1134.97 1215.59 L1135.56 1215.59 L1136.15 1215.59 L1136.73 1215.59 L1137.32 1215.59 L1137.91 1215.59 L1138.49 1215.59 L1139.08 1215.59 L1139.67 1215.59 L1140.25 1215.59 L1140.84 1215.59 L1141.42 1215.59 L1142.01 1215.59 L1142.6 1215.59 L1143.18 1215.59 L1143.77 1215.59 L1144.36 1215.59 L1144.94 1215.59 L1145.53 1215.59 L1146.12 1215.59 L1146.7 1215.59 L1147.29 1215.59 L1147.88 1215.59 L1148.46 1215.59 L1149.05 1215.59 L1149.63 1215.59 L1150.22 1215.59 L1150.81 1215.59 L1151.39 1215.59 L1151.98 1215.59 L1152.57 1215.59 L1153.15 1215.59 L1153.74 1215.59 L1154.33 1215.59 L1154.91 1215.59 L1155.5 1215.59 L1156.09 1215.59 L1156.67 1215.59 L1157.26 1215.59 L1157.84 1215.59 L1158.43 1215.59 L1159.02 1215.59 L1159.6 1215.59 L1160.19 1215.59 L1160.78 1215.59 L1161.36 1215.59 L1161.95 1215.59 L1162.54 1215.59 L1163.12 1215.59 L1163.71 1215.59 L1164.29 1215.59 L1164.88 1215.59 L1165.47 1215.59 L1166.05 1215.59 L1166.64 1215.59 L1167.23 1215.59 L1167.81 1215.59 L1168.4 1215.59 L1168.99 1215.59 L1169.57 1215.59 L1170.16 1215.59 L1170.75 1215.59 L1171.33 1215.59 L1171.92 1215.59 L1172.5 1215.59 L1173.09 1215.59 L1173.68 1215.59 L1174.26 1215.59 L1174.85 1215.59 L1175.44 1215.59 L1176.02 1215.59 L1176.61 1215.59 L1177.2 1215.59 L1177.78 1215.59 L1178.37 1215.59 L1178.96 1215.59 L1179.54 1215.59 L1180.13 1215.59 L1180.71 1215.59 L1181.3 1215.59 L1181.89 1215.59 L1182.47 1215.59 L1183.06 1215.59 L1183.65 1215.59 L1184.23 1215.59 L1184.82 1215.59 L1185.41 1215.59 L1185.99 1215.59 L1186.58 1215.59 L1187.16 1215.59 L1187.75 1215.59 L1188.34 1215.59 L1188.92 1215.59 L1189.51 1215.59 L1190.1 1215.59 L1190.68 1215.59 L1191.27 1215.59 L1191.86 1215.59 L1192.44 1215.59 L1193.03 1215.59 L1193.62 1215.59 L1194.2 1215.59 L1194.79 1215.59 L1195.37 1215.59 L1195.96 1215.59 L1196.55 1215.59 L1197.13 1215.59 L1197.72 1215.59 L1198.31 1215.59 L1198.89 1215.59 L1199.48 1215.59 L1200.07 1215.59 L1200.65 1215.59 L1201.24 1215.59 L1201.83 1215.59 L1202.41 1215.59 L1203 1215.59 L1203.58 1215.59 L1204.17 1215.59 L1204.76 1215.59 L1205.34 1215.59 L1205.93 1215.59 L1206.52 1215.59 L1207.1 1215.59 L1207.69 1215.59 L1208.28 1215.59 L1208.86 1215.59 L1209.45 1215.59 L1210.03 1215.59 L1210.62 1215.59 L1211.21 1215.59 L1211.79 1215.59 L1212.38 1215.59 L1212.97 1215.59 L1213.55 1215.59 L1214.14 1215.59 L1214.73 1215.59 L1215.31 1215.59 L1215.9 1215.59 L1216.49 1215.59 L1217.07 1215.59 L1217.66 1215.59 L1218.24 1215.59 L1218.83 1215.59 L1219.42 1215.59 L1220 1215.59 L1220.59 1215.59 L1221.18 1215.59 L1221.76 1215.59 L1222.35 1215.59 L1222.94 1215.59 L1223.52 1215.59 L1224.11 1215.59 L1224.7 1215.59 L1225.28 1215.59 L1225.87 1215.59 L1226.45 1215.59 L1227.04 1215.59 L1227.63 1215.59 L1228.21 1215.59 L1228.8 1215.59 L1229.39 1215.59 L1229.97 1215.59 L1230.56 1215.59 L1231.15 1215.59 L1231.73 1215.59 L1232.32 1215.59 L1232.91 1215.59 L1233.49 1215.59 L1234.08 1215.59 L1234.66 1215.59 L1235.25 1215.59 L1235.84 1215.59 L1236.42 1215.59 L1237.01 1215.59 L1237.6 1215.59 L1238.18 1215.59 L1238.77 1215.59 L1239.36 1215.59 L1239.94 1215.59 L1240.53 1215.59 L1241.11 1215.59 L1241.7 1215.59 L1242.29 1215.59 L1242.87 1215.59 L1243.46 1215.59 L1244.05 1215.59 L1244.63 1215.59 L1245.22 1215.59 L1245.81 1215.59 L1246.39 1215.59 L1246.98 1215.59 L1247.57 1215.59 L1248.15 1215.59 L1248.74 1215.59 L1249.32 1215.59 L1249.91 1215.59 L1250.5 1215.59 L1251.08 1215.59 L1251.67 1215.59 L1252.26 1215.59 L1252.84 1215.59 L1253.43 1215.59 L1254.02 1215.59 L1254.6 1215.59 L1255.19 1215.59 L1255.78 1215.59 L1256.36 1215.59 L1256.95 1215.59 L1257.53 1215.59 L1258.12 1215.59 L1258.71 1215.59 L1259.29 1215.59 L1259.88 1215.59 L1260.47 1215.59 L1261.05 1215.59 L1261.64 1215.59 L1262.23 1215.59 L1262.81 1215.59 L1263.4 1215.59 L1263.98 1215.59 L1264.57 1215.59 L1265.16 1215.59 L1265.74 1215.59 L1266.33 1215.59 L1266.92 1215.59 L1267.5 1215.59 L1268.09 1215.59 L1268.68 1215.59 L1269.26 1215.59 L1269.85 1215.59 L1270.44 1215.59 L1271.02 1215.59 L1271.61 1215.59 L1272.19 1215.59 L1272.78 1215.59 L1273.37 1215.59 L1273.95 1215.59 L1274.54 1215.59 L1275.13 1215.59 L1275.71 1215.59 L1276.3 1215.59 L1276.89 1215.59 L1277.47 1215.59 L1278.06 1215.59 L1278.65 1215.59 L1279.23 1215.59 L1279.82 1215.59 L1280.4 1215.59 L1280.99 1215.59 L1281.58 1215.59 L1282.16 1215.59 L1282.75 1215.59 L1283.34 1215.59 L1283.92 1215.59 L1284.51 1215.59 L1285.1 1215.59 L1285.68 1215.59 L1286.27 1215.59 L1286.86 1215.59 L1287.44 1215.59 L1288.03 1215.59 L1288.61 1215.59 L1289.2 1215.59 L1289.79 1215.59 L1290.37 1215.59 L1290.96 1215.59 L1291.55 1215.59 L1292.13 1215.59 L1292.72 1215.59 L1293.31 1215.59 L1293.89 1215.59 L1294.48 1215.59 L1295.06 1215.59 L1295.65 1215.59 L1296.24 1215.59 L1296.82 1215.59 L1297.41 1215.59 L1298 1215.59 L1298.58 1215.59 L1299.17 1215.59 L1299.76 1215.59 L1300.34 1215.59 L1300.93 1215.59 L1301.52 1215.59 L1302.1 1215.59 L1302.69 1215.59 L1303.27 1215.59 L1303.86 1215.59 L1304.45 1215.59 L1305.03 1215.59 L1305.62 1215.59 L1306.21 1215.59 L1306.79 1215.59 L1307.38 1215.59 L1307.97 1215.59 L1308.55 1215.59 L1309.14 1215.59 L1309.73 1215.59 L1310.31 1215.59 L1310.9 1215.59 L1311.48 1215.59 L1312.07 1215.59 L1312.66 1215.59 L1313.24 1215.59 L1313.83 1215.59 L1314.42 1215.59 L1315 1215.59 L1315.59 1215.59 L1316.18 1215.59 L1316.76 1215.59 L1317.35 1215.59 L1317.93 1215.59 L1318.52 1215.59 L1319.11 1215.59 L1319.69 1215.59 L1320.28 1215.59 L1320.87 1215.59 L1321.45 1215.59 L1322.04 1215.59 L1322.63 1215.59 L1323.21 1215.59 L1323.8 1215.59 L1324.39 1215.59 L1324.97 1215.59 L1325.56 1215.59 L1326.14 1215.59 L1326.73 1215.59 L1327.32 1215.59 L1327.9 1215.59 L1328.49 1215.59 L1329.08 1215.59 L1329.66 1215.59 L1330.25 1215.59 L1330.84 1215.59 L1331.42 1215.59 L1332.01 1215.59 L1332.6 1215.59 L1333.18 1215.59 L1333.77 1215.59 L1334.35 1215.59 L1334.94 1215.59 L1335.53 1215.59 L1336.11 1215.59 L1336.7 1215.59 L1337.29 1215.59 L1337.87 1215.59 L1338.46 1215.59 L1339.05 1215.59 L1339.63 1215.59 L1340.22 1215.59 L1340.8 1215.59 L1341.39 1215.59 L1341.98 1215.59 L1342.56 1215.59 L1343.15 1215.59 L1343.74 1215.59 L1344.32 1215.59 L1344.91 1215.59 L1345.5 1215.59 L1346.08 1215.59 L1346.67 1215.59 L1347.26 1215.59 L1347.84 1215.59 L1348.43 1215.59 L1349.01 1215.59 L1349.6 1215.59 L1350.19 1215.59 L1350.77 1215.59 L1351.36 1215.59 L1351.95 1215.59 L1352.53 1215.59 L1353.12 1215.59 L1353.71 1215.59 L1354.29 1215.59 L1354.88 1215.59 L1355.47 1215.59 L1356.05 1215.59 L1356.64 1215.59 L1357.22 1215.59 L1357.81 1215.59 L1358.4 1215.59 L1358.98 1215.59 L1359.57 1215.59 L1360.16 1215.59 L1360.74 1215.59 L1361.33 1215.59 L1361.92 1215.59 L1362.5 1215.59 L1363.09 1215.59 L1363.68 1215.59 L1364.26 1215.59 L1364.85 1215.59 L1365.43 1215.59 L1366.02 1215.59 L1366.61 1215.59 L1367.19 1215.59 L1367.78 1215.59 L1368.37 1215.59 L1368.95 1215.59 L1369.54 1215.59 L1370.13 1215.59 L1370.71 1215.59 L1371.3 1215.59 L1371.88 1215.59 L1372.47 1215.59 L1373.06 1215.59 L1373.64 1215.59 L1374.23 1215.59 L1374.82 1215.59 L1375.4 1215.59 L1375.99 1215.59 L1376.58 1215.59 L1377.16 1215.59 L1377.75 1215.59 L1378.34 1215.59 L1378.92 1215.59 L1379.51 1215.59 L1380.09 1215.59 L1380.68 1215.59 L1381.27 1215.59 L1381.85 1215.59 L1382.44 1215.59 L1383.03 1215.59 L1383.61 1215.59 L1384.2 1215.59 L1384.79 1215.59 L1385.37 1215.59 L1385.96 1215.59 L1386.55 1215.59 L1387.13 1215.59 L1387.72 1215.59 L1388.3 1215.59 L1388.89 1215.59 L1389.48 1215.59 L1390.06 1215.59 L1390.65 1215.59 L1391.24 1215.59 L1391.82 1215.59 L1392.41 1215.59 L1393 1215.59 L1393.58 1215.59 L1394.17 1215.59 L1394.75 1215.59 L1395.34 1215.59 L1395.93 1215.59 L1396.51 1215.59 L1397.1 1215.59 L1397.69 1215.59 L1398.27 1215.59 L1398.86 1215.59 L1399.45 1215.59 L1400.03 1215.59 L1400.62 1215.59 L1401.21 1215.59 L1401.79 1215.59 L1402.38 1215.59 L1402.96 1215.59 L1403.55 1215.59 L1404.14 1215.59 L1404.72 1215.59 L1405.31 1215.59 L1405.9 1215.59 L1406.48 1215.59 L1407.07 1215.59 L1407.66 1215.59 L1408.24 1215.59 L1408.83 1215.59 L1409.42 1215.59 L1410 1215.59 L1410.59 1215.59 L1411.17 1215.59 L1411.76 1215.59 L1412.35 1215.59 L1412.93 1215.59 L1413.52 1215.59 L1414.11 1215.59 L1414.69 1215.59 L1415.28 1215.59 L1415.87 1215.59 L1416.45 1215.59 L1417.04 1215.59 L1417.63 1215.59 L1418.21 1215.59 L1418.8 1215.59 L1419.38 1215.59 L1419.97 1215.59 L1420.56 1215.59 L1421.14 1215.59 L1421.73 1215.59 L1422.32 1215.59 L1422.9 1215.59 L1423.49 1215.59 L1424.08 1215.59 L1424.66 1215.59 L1425.25 1215.59 L1425.83 1215.59 L1426.42 1215.59 L1427.01 1215.59 L1427.59 1215.59 L1428.18 1215.59 L1428.77 1215.59 L1429.35 1215.59 L1429.94 1215.59 L1430.53 1215.59 L1431.11 1215.59 L1431.7 1215.59 L1432.29 1215.59 L1432.87 1215.59 L1433.46 1215.59 L1434.04 1215.59 L1434.63 1215.59 L1435.22 1215.59 L1435.8 1215.59 L1436.39 1215.59 L1436.98 1215.59 L1437.56 1215.59 L1438.15 1215.59 L1438.74 1215.59 L1439.32 1215.59 L1439.91 1215.59 L1440.5 1215.59 L1441.08 1215.59 L1441.67 1215.59 L1442.25 1215.59 L1442.84 1215.59 L1443.43 1215.59 L1444.01 1215.59 L1444.6 1215.59 L1445.19 1215.59 L1445.77 1215.59 L1446.36 1215.59 L1446.95 1215.59 L1447.53 1215.59 L1448.12 1215.59 L1448.7 1215.59 L1449.29 1215.59 L1449.88 1215.59 L1450.46 1215.59 L1451.05 1215.59 L1451.64 1215.59 L1452.22 1215.59 L1452.81 1215.59 L1453.4 1215.59 L1453.98 1215.59 L1454.57 1215.59 L1455.16 1215.59 L1455.74 1215.59 L1456.33 1215.59 L1456.91 1215.59 L1457.5 1215.59 L1458.09 1215.59 L1458.67 1215.59 L1459.26 1215.59 L1459.85 1215.59 L1460.43 1215.59 L1461.02 1215.59 L1461.61 1215.59 L1462.19 1215.59 L1462.78 1215.59 L1463.37 1215.59 L1463.95 1215.59 L1464.54 1215.59 L1465.12 1215.59 L1465.71 1215.59 L1466.3 1215.59 L1466.88 1215.59 L1467.47 1215.59 L1468.06 1215.59 L1468.64 1215.59 L1469.23 1215.59 L1469.82 1215.59 L1470.4 1215.59 L1470.99 1215.59 L1471.57 1215.59 L1472.16 1215.59 L1472.75 1215.59 L1473.33 1215.59 L1473.92 1215.59 L1474.51 1215.59 L1475.09 1215.59 L1475.68 1215.59 L1476.27 1215.59 L1476.85 1215.59 L1477.44 1215.59 L1478.03 1215.59 L1478.61 1215.59 L1479.2 1215.59 L1479.78 1215.59 L1480.37 1215.59 L1480.96 1215.59 L1481.54 1215.59 L1482.13 1215.59 L1482.72 1215.59 L1483.3 1215.59 L1483.89 1215.59 L1484.48 1215.59 L1485.06 1215.59 L1485.65 1215.59 L1486.24 1215.59 L1486.82 1215.59 L1487.41 1215.59 L1487.99 1215.59 L1488.58 1215.59 L1489.17 1215.59 L1489.75 1215.59 L1490.34 1215.59 L1490.93 1215.59 L1491.51 1215.59 L1492.1 1215.59 L1492.69 1215.59 L1493.27 1215.59 L1493.86 1215.59 L1494.45 1215.59 L1495.03 1215.59 L1495.62 1215.59 L1496.2 1215.59 L1496.79 1215.59 L1497.38 1215.59 L1497.96 1215.59 L1498.55 1215.59 L1499.14 1215.59 L1499.72 1215.59 L1500.31 1215.59 L1500.9 1215.59 L1501.48 1215.59 L1502.07 1215.59 L1502.65 1215.59 L1503.24 1215.59 L1503.83 1215.59 L1504.41 1215.59 L1505 1215.59 L1505.59 1215.59 L1506.17 1215.59 L1506.76 1215.59 L1507.35 1215.59 L1507.93 1215.59 L1508.52 1215.59 L1509.11 1215.59 L1509.69 1215.59 L1510.28 1215.59 L1510.86 1215.59 L1511.45 1215.59 L1512.04 1215.59 L1512.62 1215.59 L1513.21 1215.59 L1513.8 1215.59 L1514.38 1215.59 L1514.97 1215.59 L1515.56 1215.59 L1516.14 1215.59 L1516.73 1215.59 L1517.32 1215.59 L1517.9 1215.59 L1518.49 1215.59 L1519.07 1215.59 L1519.66 1215.59 L1520.25 1215.59 L1520.83 1215.59 L1521.42 1215.59 L1522.01 1215.59 L1522.59 1215.59 L1523.18 1215.59 L1523.77 1215.59 L1524.35 1215.59 L1524.94 1215.59 L1525.52 1215.59 L1526.11 1215.59 L1526.7 1215.59 L1527.28 1215.59 L1527.87 1215.59 L1528.46 1215.59 L1529.04 1215.59 L1529.63 1215.59 L1530.22 1215.59 L1530.8 1215.59 L1531.39 1215.59 L1531.98 1215.59 L1532.56 1215.59 L1533.15 1215.59 L1533.73 1215.59 L1534.32 1215.59 L1534.91 1215.59 L1535.49 1215.59 L1536.08 1215.59 L1536.67 1215.59 L1537.25 1215.59 L1537.84 1215.59 L1538.43 1215.59 L1539.01 1215.59 L1539.6 1215.59 L1540.19 1215.59 L1540.77 1215.59 L1541.36 1215.59 L1541.94 1215.59 L1542.53 1215.59 L1543.12 1215.59 L1543.7 1215.59 L1544.29 1215.59 L1544.88 1215.59 L1545.46 1215.59 L1546.05 1215.59 L1546.64 1215.59 L1547.22 1215.59 L1547.81 1215.59 L1548.4 1215.59 L1548.98 1215.59 L1549.57 1215.59 L1550.15 1215.59 L1550.74 1215.59 L1551.33 1215.59 L1551.91 1215.59 L1552.5 1215.59 L1553.09 1215.59 L1553.67 1215.59 L1554.26 1215.59 L1554.85 1215.59 L1555.43 1215.59 L1556.02 1215.59 L1556.6 1215.59 L1557.19 1215.59 L1557.78 1215.59 L1558.36 1215.59 L1558.95 1215.59 L1559.54 1215.59 L1560.12 1215.59 L1560.71 1215.59 L1561.3 1215.59 L1561.88 1215.59 L1562.47 1215.59 L1563.06 1215.59 L1563.64 1215.59 L1564.23 1215.59 L1564.81 1215.59 L1565.4 1215.59 L1565.99 1215.59 L1566.57 1215.59 L1567.16 1215.59 L1567.75 1215.59 L1568.33 1215.59 L1568.92 1215.59 L1569.51 1215.59 L1570.09 1215.59 L1570.68 1215.59 L1571.27 1215.59 L1571.85 1215.59 L1572.44 1215.59 L1573.02 1215.59 L1573.61 1215.59 L1574.2 1215.59 L1574.78 1215.59 L1575.37 1215.59 L1575.96 1215.59 L1576.54 1215.59 L1577.13 1215.59 L1577.72 1215.59 L1578.3 1215.59 L1578.89 1215.59 L1579.47 1215.59 L1580.06 1215.59 L1580.65 1215.59 L1581.23 1215.59 L1581.82 1215.59 L1582.41 1215.59 L1582.99 1215.59 L1583.58 1215.59 L1584.17 1215.59 L1584.75 1215.59 L1585.34 1215.59 L1585.93 1215.59 L1586.51 1215.59 L1587.1 1215.59 L1587.68 1215.59 L1588.27 1215.59 L1588.86 1215.59 L1589.44 1215.59 L1590.03 1215.59 L1590.62 1215.59 L1591.2 1215.59 L1591.79 1215.59 L1592.38 1215.59 L1592.96 1215.59 L1593.55 1215.59 L1594.14 1215.59 L1594.72 1215.59 L1595.31 1215.59 L1595.89 1215.59 L1596.48 1215.59 L1597.07 1215.59 L1597.65 1215.59 L1598.24 1215.59 L1598.83 1215.59 L1599.41 1215.59 L1600 1215.59 L1600.59 1215.59 L1601.17 1215.59 L1601.76 1215.59 L1602.34 1215.59 L1602.93 1215.59 L1603.52 1215.59 L1604.1 1215.59 L1604.69 1215.59 L1605.28 1215.59 L1605.86 1215.59 L1606.45 1215.59 L1607.04 1215.59 L1607.62 1215.59 L1608.21 1215.59 L1608.8 1215.59 L1609.38 1215.59 L1609.97 1215.59 L1610.55 1215.59 L1611.14 1215.59 L1611.73 1215.59 L1612.31 1215.59 L1612.9 1215.59 L1613.49 1215.59 L1614.07 1215.59 L1614.66 1215.59 L1615.25 1215.59 L1615.83 1215.59 L1616.42 1215.59 L1617.01 1215.59 L1617.59 1215.59 L1618.18 1215.59 L1618.76 1215.59 L1619.35 1215.59 L1619.94 1215.59 L1620.52 1215.59 L1621.11 1215.59 L1621.7 1215.59 L1622.28 1215.59 L1622.87 1215.59 L1623.46 1215.59 L1624.04 1215.59 L1624.63 1215.59 L1625.22 1215.59 L1625.8 1215.59 L1626.39 1215.59 L1626.97 1215.59 L1627.56 1215.59 L1628.15 1215.59 L1628.73 1215.59 L1629.32 1215.59 L1629.91 1215.59 L1630.49 1215.59 L1631.08 1215.59 L1631.67 1215.59 L1632.25 1215.59 L1632.84 1215.59 L1633.42 1215.59 L1634.01 1215.59 L1634.6 1215.59 L1635.18 1215.59 L1635.77 1215.59 L1636.36 1215.59 L1636.94 1215.59 L1637.53 1215.59 L1638.12 1215.59 L1638.7 1215.59 L1639.29 1215.59 L1639.88 1215.59 L1640.46 1215.59 L1641.05 1215.59 L1641.63 1215.59 L1642.22 1215.59 L1642.81 1215.59 L1643.39 1215.59 L1643.98 1215.59 L1644.57 1215.59 L1645.15 1215.59 L1645.74 1215.59 L1646.33 1215.59 L1646.91 1215.59 L1647.5 1215.59 L1648.09 1215.59 L1648.67 1215.59 L1649.26 1215.59 L1649.84 1215.59 L1650.43 1215.59 L1651.02 1215.59 L1651.6 1215.59 L1652.19 1215.59 L1652.78 1215.59 L1653.36 1215.59 L1653.95 1215.59 L1654.54 1215.59 L1655.12 1215.59 L1655.71 1215.59 L1656.29 1215.59 L1656.88 1215.59 L1657.47 1215.59 L1658.05 1215.59 L1658.64 1215.59 L1659.23 1215.59 L1659.81 1215.59 L1660.4 1215.59 L1660.99 1215.59 L1661.57 1215.59 L1662.16 1215.59 L1662.75 1215.59 L1663.33 1215.59 L1663.92 1215.59 L1664.5 1215.59 L1665.09 1215.59 L1665.68 1215.59 L1666.26 1215.59 L1666.85 1215.59 L1667.44 1215.59 L1668.02 1215.59 L1668.61 1215.59 L1669.2 1215.59 L1669.78 1215.59 L1670.37 1215.59 L1670.96 1215.59 L1671.54 1215.59 L1672.13 1215.59 L1672.71 1215.59 L1673.3 1215.59 L1673.89 1215.59 L1674.47 1215.59 L1675.06 1215.59 L1675.65 1215.59 L1676.23 1215.59 L1676.82 1215.59 L1677.41 1215.59 L1677.99 1215.59 L1678.58 1215.59 L1679.17 1215.59 L1679.75 1215.59 L1680.34 1215.59 L1680.92 1215.59 L1681.51 1215.59 L1682.1 1215.59 L1682.68 1215.59 L1683.27 1215.59 L1683.86 1215.59 L1684.44 1215.59 L1685.03 1215.59 L1685.62 1215.59 L1686.2 1215.59 L1686.79 1215.59 L1687.37 1215.59 L1687.96 1215.59 L1688.55 1215.59 L1689.13 1215.59 L1689.72 1215.59 L1690.31 1215.59 L1690.89 1215.59 L1691.48 1215.59 L1692.07 1215.59 L1692.65 1215.59 L1693.24 1215.59 L1693.83 1215.59 L1694.41 1215.59 L1695 1215.59 L1695.58 1215.59 L1696.17 1215.59 L1696.76 1215.59 L1697.34 1215.59 L1697.93 1215.59 L1698.52 1215.59 L1699.1 1215.59 L1699.69 1215.59 L1700.28 1215.59 L1700.86 1215.59 L1701.45 1215.59 L1702.04 1215.59 L1702.62 1215.59 L1703.21 1215.59 L1703.79 1215.59 L1704.38 1215.59 L1704.97 1215.59 L1705.55 1215.59 L1706.14 1215.59 L1706.73 1215.59 L1707.31 1215.59 L1707.9 1215.59 L1708.49 1215.59 L1709.07 1215.59 L1709.66 1215.59 L1710.24 1215.59 L1710.83 1215.59 L1711.42 1215.59 L1712 1215.59 L1712.59 1215.59 L1713.18 1215.59 L1713.76 1215.59 L1714.35 1215.59 L1714.94 1215.59 L1715.52 1215.59 L1716.11 1215.59 L1716.7 1215.59 L1717.28 1215.59 L1717.87 1215.59 L1718.45 1215.59 L1719.04 1215.59 L1719.63 1215.59 L1720.21 1215.59 L1720.8 1215.59 L1721.39 1215.59 L1721.97 1215.59 L1722.56 1215.59 L1723.15 1215.59 L1723.73 1215.59 L1724.32 1215.59 L1724.91 1215.59 L1725.49 1215.59 L1726.08 1215.59 L1726.66 1215.59 L1727.25 1215.59 L1727.84 1215.59 L1728.42 1215.59 L1729.01 1215.59 L1729.6 1215.59 L1730.18 1215.59 L1730.77 1215.59 L1731.36 1215.59 L1731.94 1215.59 L1732.53 1215.59 L1733.11 1215.59 L1733.7 1215.59 L1734.29 1215.59 L1734.87 1215.59 L1735.46 1215.59 L1736.05 1215.59 L1736.63 1215.59 L1737.22 1215.59 L1737.81 1215.59 L1738.39 1215.59 L1738.98 1215.59 L1739.57 1215.59 L1740.15 1215.59 L1740.74 1215.59 L1741.32 1215.59 L1741.91 1215.59 L1742.5 1215.59 L1743.08 1215.59 L1743.67 1215.59 L1744.26 1215.59 L1744.84 1215.59 L1745.43 1215.59 L1746.02 1215.59 L1746.6 1215.59 L1747.19 1215.59 L1747.78 1215.59 L1748.36 1215.59 L1748.95 1215.59 L1749.53 1215.59 L1750.12 1215.59 L1750.71 1215.59 L1751.29 1215.59 L1751.88 1215.59 L1752.47 1215.59 L1753.05 1215.59 L1753.64 1215.59 L1754.23 1215.59 L1754.81 1215.59 L1755.4 1215.59 L1755.99 1215.59 L1756.57 1215.59 L1757.16 1215.59 L1757.74 1215.59 L1758.33 1215.59 L1758.92 1215.59 L1759.5 1215.59 L1760.09 1215.59 L1760.68 1215.59 L1761.26 1215.59 L1761.85 1215.59 L1762.44 1215.59 L1763.02 1215.59 L1763.61 1215.59 L1764.19 1215.59 L1764.78 1215.59 L1765.37 1215.59 L1765.95 1215.59 L1766.54 1215.59 L1767.13 1215.59 L1767.71 1215.59 L1768.3 1215.59 L1768.89 1215.59 L1769.47 1215.59 L1770.06 1215.59 L1770.65 1215.59 L1771.23 1215.59 L1771.82 1215.59 L1772.4 1215.59 L1772.99 1215.59 L1773.58 1215.59 L1774.16 1215.59 L1774.75 1215.59 L1775.34 1215.59 L1775.92 1215.59 L1776.51 1215.59 L1777.1 1215.59 L1777.68 1215.59 L1778.27 1215.59 L1778.86 1215.59 L1779.44 1215.59 L1780.03 1215.59 L1780.61 1215.59 L1781.2 1215.59 L1781.79 1215.59 L1782.37 1215.59 L1782.96 1215.59 L1783.55 1215.59 L1784.13 1215.59 L1784.72 1215.59 L1785.31 1215.59 L1785.89 1215.59 L1786.48 1215.59 L1787.06 1215.59 L1787.65 1215.59 L1788.24 1215.59 L1788.82 1215.59 L1789.41 1215.59 L1790 1215.59 L1790.58 1215.59 L1791.17 1215.59 L1791.76 1215.59 L1792.34 1215.59 L1792.93 1215.59 L1793.52 1215.59 L1794.1 1215.59 L1794.69 1215.59 L1795.27 1215.59 L1795.86 1215.59 L1796.45 1215.59 L1797.03 1215.59 L1797.62 1215.59 L1798.21 1215.59 L1798.79 1215.59 L1799.38 1215.59 L1799.97 1215.59 L1800.55 1215.59 L1801.14 1215.59 L1801.73 1215.59 L1802.31 1215.59 L1802.9 1215.59 L1803.48 1215.59 L1804.07 1215.59 L1804.66 1215.59 L1805.24 1215.59 L1805.83 1215.59 L1806.42 1215.59 L1807 1215.59 L1807.59 1215.59 L1808.18 1215.59 L1808.76 1215.59 L1809.35 1215.59 L1809.94 1215.59 L1810.52 1215.59 L1811.11 1215.59 L1811.69 1215.59 L1812.28 1215.59 L1812.87 1215.59 L1813.45 1215.59 L1814.04 1215.59 L1814.63 1215.59 L1815.21 1215.59 L1815.8 1215.59 L1816.39 1215.59 L1816.97 1215.59 L1817.56 1215.59 L1818.14 1215.59 L1818.73 1215.59 L1819.32 1215.59 L1819.9 1215.59 L1820.49 1215.59 L1821.08 1215.59 L1821.66 1215.59 L1822.25 1215.59 L1822.84 1215.59 L1823.42 1215.59 L1824.01 1215.59 L1824.6 1215.59 L1825.18 1215.59 L1825.77 1215.59 L1826.35 1215.59 L1826.94 1215.59 L1827.53 1215.59 L1828.11 1215.59 L1828.7 1215.59 L1829.29 1215.59 L1829.87 1215.59 L1830.46 1215.59 L1831.05 1215.59 L1831.63 1215.59 L1832.22 1215.59 L1832.81 1215.59 L1833.39 1215.59 L1833.98 1215.59 L1834.56 1215.59 L1835.15 1215.59 L1835.74 1215.59 L1836.32 1215.59 L1836.91 1215.59 L1837.5 1215.59 L1838.08 1215.59 L1838.67 1215.59 L1839.26 1215.59 L1839.84 1215.59 L1840.43 1215.59 L1841.01 1215.59 L1841.6 1215.59 L1842.19 1215.59 L1842.77 1215.59 L1843.36 1215.59 L1843.95 1215.59 L1844.53 1215.59 L1845.12 1215.59 L1845.71 1215.59 L1846.29 1215.59 L1846.88 1215.59 L1847.47 1215.59 L1848.05 1215.59 L1848.64 1215.59 L1849.22 1215.59 L1849.81 1215.59 L1850.4 1215.59 L1850.98 1215.59 L1851.57 1215.59 L1852.16 1215.59 L1852.74 1215.59 L1853.33 1215.59 L1853.92 1215.59 L1854.5 1215.59 L1855.09 1215.59 L1855.68 1215.59 L1856.26 1215.59 L1856.85 1215.59 L1857.43 1215.59 L1858.02 1215.59 L1858.61 1215.59 L1859.19 1215.59 L1859.78 1215.59 L1860.37 1215.59 L1860.95 1215.59 L1861.54 1215.59 L1862.13 1215.59 L1862.71 1215.59 L1863.3 1215.59 L1863.88 1215.59 L1864.47 1215.59 L1865.06 1215.59 L1865.64 1215.59 L1866.23 1215.59 L1866.82 1215.59 L1867.4 1215.59 L1867.99 1215.59 L1868.58 1215.59 L1869.16 1215.59 L1869.75 1215.59 L1870.34 1215.59 L1870.92 1215.59 L1871.51 1215.59 L1872.09 1215.59 L1872.68 1215.59 L1873.27 1215.59 L1873.85 1215.59 L1874.44 1215.59 L1875.03 1215.59 L1875.61 1215.59 L1876.2 1215.59 L1876.79 1215.59 L1877.37 1215.59 L1877.96 1215.59 L1878.55 1215.59 L1879.13 1215.59 L1879.72 1215.59 L1880.3 1215.59 L1880.89 1215.59 L1881.48 1215.59 L1882.06 1215.59 L1882.65 1215.59 L1883.24 1215.59 L1883.82 1215.59 L1884.41 1215.59 L1885 1215.59 L1885.58 1215.59 L1886.17 1215.59 L1886.76 1215.59 L1887.34 1215.59 L1887.93 1215.59 L1888.51 1215.59 L1889.1 1215.59 L1889.69 1215.59 L1890.27 1215.59 L1890.86 1215.59 L1891.45 1215.59 L1892.03 1215.59 L1892.62 1215.59 L1893.21 1215.59 L1893.79 1215.59 L1894.38 1215.59 L1894.96 1215.59 L1895.55 1215.59 L1896.14 1215.59 L1896.72 1215.59 L1897.31 1215.59 L1897.9 1215.59 L1898.48 1215.59 L1899.07 1215.59 L1899.66 1215.59 L1900.24 1215.59 L1900.83 1215.59 L1901.42 1215.59 L1902 1215.59 L1902.59 1215.59 L1903.17 1215.59 L1903.76 1215.59 L1904.35 1215.59 L1904.93 1215.59 L1905.52 1215.59 L1906.11 1215.59 L1906.69 1215.59 L1907.28 1215.59 L1907.87 1215.59 L1908.45 1215.59 L1909.04 1215.59 L1909.63 1215.59 L1910.21 1215.59 L1910.8 1215.59 L1911.38 1215.59 L1911.97 1215.59 L1912.56 1215.59 L1913.14 1215.59 L1913.73 1215.59 L1914.32 1215.59 L1914.9 1215.59 L1915.49 1215.59 L1916.08 1215.59 L1916.66 1215.59 L1917.25 1215.59 L1917.83 1215.59 L1918.42 1215.59 L1919.01 1215.59 L1919.59 1215.59 L1920.18 1215.59 L1920.77 1215.59 L1921.35 1215.59 L1921.94 1215.59 L1922.53 1215.59 L1923.11 1215.59 L1923.7 1215.59 L1924.29 1215.59 L1924.87 1215.59 L1925.46 1215.59 L1926.04 1215.59 L1926.63 1215.59 L1927.22 1215.59 L1927.8 1215.59 L1928.39 1215.59 L1928.98 1215.59 L1929.56 1215.59 L1930.15 1215.59 L1930.74 1215.59 L1931.32 1215.59 L1931.91 1215.59 L1932.5 1215.59 L1933.08 1215.59 L1933.67 1215.59 L1934.25 1215.59 L1934.84 1215.59 L1935.43 1215.59 L1936.01 1215.59 L1936.6 1215.59 L1937.19 1215.59 L1937.77 1215.59 L1938.36 1215.59 L1938.95 1215.59 L1939.53 1215.59 L1940.12 1215.59 L1940.71 1215.59 L1941.29 1215.59 L1941.88 1215.59 L1942.46 1215.59 L1943.05 1215.59 L1943.64 1215.59 L1944.22 1215.59 L1944.81 1215.59 L1945.4 1215.59 L1945.98 1215.59 L1946.57 1215.59 L1947.16 1215.59 L1947.74 1215.59 L1948.33 1215.59 L1948.91 1215.59 L1949.5 1215.59 L1950.09 1215.59 L1950.67 1215.59 L1951.26 1215.59 L1951.85 1215.59 L1952.43 1215.59 L1953.02 1215.59 L1953.61 1215.59 L1954.19 1215.59 L1954.78 1215.59 L1955.37 1215.59 L1955.95 1215.59 L1956.54 1215.59 L1957.12 1215.59 L1957.71 1215.59 L1958.3 1215.59 L1958.88 1215.59 L1959.47 1215.59 L1960.06 1215.59 L1960.64 1215.59 L1961.23 1215.59 L1961.82 1215.59 L1962.4 1215.59 L1962.99 1215.59 L1963.58 1215.59 L1964.16 1215.59 L1964.75 1215.59 L1965.33 1215.59 L1965.92 1215.59 L1966.51 1215.59 L1967.09 1215.59 L1967.68 1215.59 L1968.27 1215.59 L1968.85 1215.59 L1969.44 1215.59 L1970.03 1215.59 L1970.61 1215.59 L1971.2 1215.59 L1971.78 1215.59 L1972.37 1215.59 L1972.96 1215.59 L1973.54 1215.59 L1974.13 1215.59 L1974.72 1215.59 L1975.3 1215.59 L1975.89 1215.59 L1976.48 1215.59 L1977.06 1215.59 L1977.65 1215.59 L1978.24 1215.59 L1978.82 1215.59 L1979.41 1215.59 L1979.99 1215.59 L1980.58 1215.59 L1981.17 1215.59 L1981.75 1215.59 L1982.34 1215.59 L1982.93 1215.59 L1983.51 1215.59 L1984.1 1215.59 L1984.69 1215.59 L1985.27 1215.59 L1985.86 1215.59 L1986.45 1215.59 L1987.03 1215.59 L1987.62 1215.59 L1988.2 1215.59 L1988.79 1215.59 L1989.38 1215.59 L1989.96 1215.59 L1990.55 1215.59 L1991.14 1215.59 L1991.72 1215.59 L1992.31 1215.59 L1992.9 1215.59 L1993.48 1215.59 L1994.07 1215.59 L1994.65 1215.59 L1995.24 1215.59 L1995.83 1215.59 L1996.41 1215.59 L1997 1215.59 L1997.59 1215.59 L1998.17 1215.59 L1998.76 1215.59 L1999.35 1215.59 L1999.93 1215.59 L2000.52 1215.59 L2001.11 1215.59 L2001.69 1215.59 L2002.28 1215.59 L2002.86 1215.59 L2003.45 1215.59 L2004.04 1215.59 L2004.62 1215.59 L2005.21 1215.59 L2005.8 1215.59 L2006.38 1215.59 L2006.97 1215.59 L2007.56 1215.59 L2008.14 1215.59 L2008.73 1215.59 L2009.32 1215.59 L2009.9 1215.59 L2010.49 1215.59 L2011.07 1215.59 L2011.66 1215.59 L2012.25 1215.59 L2012.83 1215.59 L2013.42 1215.59 L2014.01 1215.59 L2014.59 1215.59 L2015.18 1215.59 L2015.77 1215.59 L2016.35 1215.59 L2016.94 1215.59 L2017.53 1215.59 L2018.11 1215.59 L2018.7 1215.59 L2019.28 1215.59 L2019.87 1215.59 L2020.46 1215.59 L2021.04 1215.59 L2021.63 1215.59 L2022.22 1215.59 L2022.8 1215.59 L2023.39 1215.59 L2023.98 1215.59 L2024.56 1215.59 L2025.15 1215.59 L2025.73 1215.59 L2026.32 1215.59 L2026.91 1215.59 L2027.49 1215.59 L2028.08 1215.59 L2028.67 1215.59 L2029.25 1215.59 L2029.84 1215.59 L2030.43 1215.59 L2031.01 1215.59 L2031.6 1215.59 L2032.19 1215.59 L2032.77 1215.59 L2033.36 1215.59 L2033.94 1215.59 L2034.53 1215.59 L2035.12 1215.59 L2035.7 1215.59 L2036.29 1215.59 L2036.88 1215.59 L2037.46 1215.59 L2038.05 1215.59 L2038.64 1215.59 L2039.22 1215.59 L2039.81 1215.59 L2040.4 1215.59 L2040.98 1215.59 L2041.57 1215.59 L2042.15 1215.59 L2042.74 1215.59 L2043.33 1215.59 L2043.91 1215.59 L2044.5 1215.59 L2045.09 1215.59 L2045.67 1215.59 L2046.26 1215.59 L2046.85 1215.59 L2047.43 1215.59 L2048.02 1215.59 L2048.6 1215.59 L2049.19 1215.59 L2049.78 1215.59 L2050.36 1215.59 L2050.95 1215.59 L2051.54 1215.59 L2052.12 1215.59 L2052.71 1215.59 L2053.3 1215.59 L2053.88 1215.59 L2054.47 1215.59 L2055.06 1215.59 L2055.64 1215.59 L2056.23 1215.59 L2056.81 1215.59 L2057.4 1215.59 L2057.99 1215.59 L2058.57 1215.59 L2059.16 1215.59 L2059.75 1215.59 L2060.33 1215.59 L2060.92 1215.59 L2061.51 1215.59 L2062.09 1215.59 L2062.68 1215.59 L2063.27 1215.59 L2063.85 1215.59 L2064.44 1215.59 L2065.02 1215.59 L2065.61 1215.59 L2066.2 1215.59 L2066.78 1215.59 L2067.37 1215.59 L2067.96 1215.59 L2068.54 1215.59 L2069.13 1215.59 L2069.72 1215.59 L2070.3 1215.59 L2070.89 1215.59 L2071.48 1215.59 L2072.06 1215.59 L2072.65 1215.59 L2073.23 1215.59 L2073.82 1215.59 L2074.41 1215.59 L2074.99 1215.59 L2075.58 1215.59 L2076.17 1215.59 L2076.75 1215.59 L2077.34 1215.59 L2077.93 1215.59 L2078.51 1215.59 L2079.1 1215.59 L2079.68 1215.59 L2080.27 1215.59 L2080.86 1215.59 L2081.44 1215.59 L2082.03 1215.59 L2082.62 1215.59 L2083.2 1215.59 L2083.79 1215.59 L2084.38 1215.59 L2084.96 1215.59 L2085.55 1215.59 L2086.14 1215.59 L2086.72 1215.59 L2087.31 1215.59 L2087.89 1215.59 L2088.48 1215.59 L2089.07 1215.59 L2089.65 1215.59 L2090.24 1215.59 L2090.83 1215.59 L2091.41 1215.59 L2092 1215.59 L2092.59 1215.59 L2093.17 1215.59 L2093.76 1215.59 L2094.35 1215.59 L2094.93 1215.59 L2095.52 1215.59 L2096.1 1215.59 L2096.69 1215.59 L2097.28 1215.59 L2097.86 1215.59 L2098.45 1215.59 L2099.04 1215.59 L2099.62 1215.59 L2100.21 1215.59 L2100.8 1215.59 L2101.38 1215.59 L2101.97 1215.59 L2102.55 1215.59 L2103.14 1215.59 L2103.73 1215.59 L2104.31 1215.59 L2104.9 1215.59 L2105.49 1215.59 L2106.07 1215.59 L2106.66 1215.59 L2107.25 1215.59 L2107.83 1215.59 L2108.42 1215.59 L2109.01 1215.59 L2109.59 1215.59 L2110.18 1215.59 L2110.76 1215.59 L2111.35 1215.59 L2111.94 1215.59 L2112.52 1215.59 L2113.11 1215.59 L2113.7 1215.59 L2114.28 1215.59 L2114.87 1215.59 L2115.46 1215.59 L2116.04 1215.59 L2116.63 1215.59 L2117.22 1215.59 L2117.8 1215.59 L2118.39 1215.59 L2118.97 1215.59 L2119.56 1215.59 L2120.15 1215.59 L2120.73 1215.59 L2121.32 1215.59 L2121.91 1215.59 L2122.49 1215.59 L2123.08 1215.59 L2123.67 1215.59 L2124.25 1215.59 L2124.84 1215.59 L2125.42 1215.59 L2126.01 1215.59 L2126.6 1215.59 L2127.18 1215.59 L2127.77 1215.59 L2128.36 1215.59 L2128.94 1215.59 L2129.53 1215.59 L2130.12 1215.59 L2130.7 1215.59 L2131.29 1215.59 L2131.88 1215.59 L2132.46 1215.59 L2133.05 1215.59 L2133.63 1215.59 L2134.22 1215.59 L2134.81 1215.59 L2135.39 1215.59 L2135.98 1215.59 L2136.57 1215.59 L2137.15 1215.59 L2137.74 1215.59 L2138.33 1215.59 L2138.91 1215.59 L2139.5 1215.59 L2140.09 1215.59 L2140.67 1215.59 L2141.26 1215.59 L2141.84 1215.59 L2142.43 1215.59 L2143.02 1215.59 L2143.6 1215.59 L2144.19 1215.59 L2144.78 1215.59 L2145.36 1215.59 L2145.95 1215.59 L2146.54 1215.59 L2147.12 1215.59 L2147.71 1215.59 L2148.3 1215.59 L2148.88 1215.59 L2149.47 1215.59 L2150.05 1215.59 L2150.64 1215.59 L2151.23 1215.59 L2151.81 1215.59 L2152.4 1215.59 L2152.99 1215.59 L2153.57 1215.59 L2154.16 1215.59 L2154.75 1215.59 L2155.33 1215.59 L2155.92 1215.59 L2156.5 1215.59 L2157.09 1215.59 L2157.68 1215.59 L2158.26 1215.59 L2158.26 1215.43 L2157.68 1215.43 L2157.09 1215.43 L2156.5 1215.43 L2155.92 1215.43 L2155.33 1215.43 L2154.75 1215.43 L2154.16 1215.43 L2153.57 1215.43 L2152.99 1215.43 L2152.4 1215.43 L2151.81 1215.43 L2151.23 1215.43 L2150.64 1215.43 L2150.05 1215.43 L2149.47 1215.43 L2148.88 1215.43 L2148.3 1215.43 L2147.71 1215.43 L2147.12 1215.43 L2146.54 1215.43 L2145.95 1215.43 L2145.36 1215.43 L2144.78 1215.43 L2144.19 1215.43 L2143.6 1215.43 L2143.02 1215.43 L2142.43 1215.43 L2141.84 1215.43 L2141.26 1215.43 L2140.67 1215.43 L2140.09 1215.43 L2139.5 1215.43 L2138.91 1215.43 L2138.33 1215.43 L2137.74 1215.43 L2137.15 1215.43 L2136.57 1215.43 L2135.98 1215.43 L2135.39 1215.43 L2134.81 1215.43 L2134.22 1215.43 L2133.63 1215.43 L2133.05 1215.43 L2132.46 1215.43 L2131.88 1215.43 L2131.29 1215.43 L2130.7 1215.43 L2130.12 1215.43 L2129.53 1215.43 L2128.94 1215.43 L2128.36 1215.43 L2127.77 1215.43 L2127.18 1215.43 L2126.6 1215.43 L2126.01 1215.43 L2125.42 1215.43 L2124.84 1215.43 L2124.25 1215.43 L2123.67 1215.43 L2123.08 1215.43 L2122.49 1215.43 L2121.91 1215.43 L2121.32 1215.43 L2120.73 1215.43 L2120.15 1215.43 L2119.56 1215.43 L2118.97 1215.43 L2118.39 1215.43 L2117.8 1215.43 L2117.22 1215.43 L2116.63 1215.43 L2116.04 1215.43 L2115.46 1215.43 L2114.87 1215.43 L2114.28 1215.43 L2113.7 1215.43 L2113.11 1215.43 L2112.52 1215.43 L2111.94 1215.43 L2111.35 1215.43 L2110.76 1215.43 L2110.18 1215.43 L2109.59 1215.43 L2109.01 1215.43 L2108.42 1215.43 L2107.83 1215.43 L2107.25 1215.43 L2106.66 1215.43 L2106.07 1215.43 L2105.49 1215.43 L2104.9 1215.43 L2104.31 1215.43 L2103.73 1215.43 L2103.14 1215.43 L2102.55 1215.43 L2101.97 1215.43 L2101.38 1215.43 L2100.8 1215.43 L2100.21 1215.43 L2099.62 1215.43 L2099.04 1215.43 L2098.45 1215.43 L2097.86 1215.43 L2097.28 1215.43 L2096.69 1215.43 L2096.1 1215.43 L2095.52 1215.43 L2094.93 1215.43 L2094.35 1215.43 L2093.76 1215.43 L2093.17 1215.43 L2092.59 1215.43 L2092 1215.43 L2091.41 1215.43 L2090.83 1215.43 L2090.24 1215.43 L2089.65 1215.43 L2089.07 1215.43 L2088.48 1215.43 L2087.89 1215.43 L2087.31 1215.43 L2086.72 1215.43 L2086.14 1215.43 L2085.55 1215.43 L2084.96 1215.43 L2084.38 1215.43 L2083.79 1215.43 L2083.2 1215.43 L2082.62 1215.43 L2082.03 1215.43 L2081.44 1215.43 L2080.86 1215.43 L2080.27 1215.43 L2079.68 1215.43 L2079.1 1215.43 L2078.51 1215.43 L2077.93 1215.43 L2077.34 1215.43 L2076.75 1215.43 L2076.17 1215.43 L2075.58 1215.43 L2074.99 1215.43 L2074.41 1215.43 L2073.82 1215.43 L2073.23 1215.43 L2072.65 1215.43 L2072.06 1215.43 L2071.48 1215.43 L2070.89 1215.43 L2070.3 1215.43 L2069.72 1215.43 L2069.13 1215.43 L2068.54 1215.43 L2067.96 1215.43 L2067.37 1215.43 L2066.78 1215.43 L2066.2 1215.43 L2065.61 1215.43 L2065.02 1215.43 L2064.44 1215.43 L2063.85 1215.43 L2063.27 1215.43 L2062.68 1215.43 L2062.09 1215.43 L2061.51 1215.43 L2060.92 1215.43 L2060.33 1215.43 L2059.75 1215.43 L2059.16 1215.43 L2058.57 1215.43 L2057.99 1215.43 L2057.4 1215.43 L2056.81 1215.43 L2056.23 1215.43 L2055.64 1215.43 L2055.06 1215.43 L2054.47 1215.43 L2053.88 1215.43 L2053.3 1215.43 L2052.71 1215.43 L2052.12 1215.43 L2051.54 1215.43 L2050.95 1215.43 L2050.36 1215.43 L2049.78 1215.43 L2049.19 1215.43 L2048.6 1215.43 L2048.02 1215.43 L2047.43 1215.43 L2046.85 1215.43 L2046.26 1215.43 L2045.67 1215.43 L2045.09 1215.43 L2044.5 1215.43 L2043.91 1215.43 L2043.33 1215.43 L2042.74 1215.43 L2042.15 1215.43 L2041.57 1215.43 L2040.98 1215.43 L2040.4 1215.43 L2039.81 1215.43 L2039.22 1215.43 L2038.64 1215.43 L2038.05 1215.43 L2037.46 1215.43 L2036.88 1215.43 L2036.29 1215.43 L2035.7 1215.43 L2035.12 1215.43 L2034.53 1215.43 L2033.94 1215.43 L2033.36 1215.43 L2032.77 1215.43 L2032.19 1215.43 L2031.6 1215.43 L2031.01 1215.43 L2030.43 1215.43 L2029.84 1215.43 L2029.25 1215.43 L2028.67 1215.43 L2028.08 1215.43 L2027.49 1215.43 L2026.91 1215.43 L2026.32 1215.43 L2025.73 1215.43 L2025.15 1215.43 L2024.56 1215.43 L2023.98 1215.43 L2023.39 1215.43 L2022.8 1215.43 L2022.22 1215.43 L2021.63 1215.43 L2021.04 1215.43 L2020.46 1215.43 L2019.87 1215.43 L2019.28 1215.43 L2018.7 1215.43 L2018.11 1215.43 L2017.53 1215.43 L2016.94 1215.43 L2016.35 1215.43 L2015.77 1215.43 L2015.18 1215.43 L2014.59 1215.43 L2014.01 1215.43 L2013.42 1215.43 L2012.83 1215.43 L2012.25 1215.43 L2011.66 1215.43 L2011.07 1215.43 L2010.49 1215.43 L2009.9 1215.43 L2009.32 1215.43 L2008.73 1215.43 L2008.14 1215.43 L2007.56 1215.43 L2006.97 1215.43 L2006.38 1215.43 L2005.8 1215.43 L2005.21 1215.43 L2004.62 1215.43 L2004.04 1215.43 L2003.45 1215.43 L2002.86 1215.43 L2002.28 1215.43 L2001.69 1215.43 L2001.11 1215.43 L2000.52 1215.43 L1999.93 1215.43 L1999.35 1215.43 L1998.76 1215.43 L1998.17 1215.43 L1997.59 1215.43 L1997 1215.43 L1996.41 1215.43 L1995.83 1215.43 L1995.24 1215.43 L1994.65 1215.43 L1994.07 1215.43 L1993.48 1215.43 L1992.9 1215.43 L1992.31 1215.43 L1991.72 1215.43 L1991.14 1215.43 L1990.55 1215.43 L1989.96 1215.43 L1989.38 1215.43 L1988.79 1215.43 L1988.2 1215.43 L1987.62 1215.43 L1987.03 1215.43 L1986.45 1215.43 L1985.86 1215.43 L1985.27 1215.43 L1984.69 1215.43 L1984.1 1215.43 L1983.51 1215.43 L1982.93 1215.43 L1982.34 1215.43 L1981.75 1215.43 L1981.17 1215.43 L1980.58 1215.43 L1979.99 1215.43 L1979.41 1215.43 L1978.82 1215.43 L1978.24 1215.43 L1977.65 1215.43 L1977.06 1215.43 L1976.48 1215.43 L1975.89 1215.43 L1975.3 1215.43 L1974.72 1215.43 L1974.13 1215.43 L1973.54 1215.43 L1972.96 1215.43 L1972.37 1215.43 L1971.78 1215.43 L1971.2 1215.43 L1970.61 1215.43 L1970.03 1215.43 L1969.44 1215.43 L1968.85 1215.43 L1968.27 1215.43 L1967.68 1215.43 L1967.09 1215.43 L1966.51 1215.43 L1965.92 1215.43 L1965.33 1215.43 L1964.75 1215.43 L1964.16 1215.43 L1963.58 1215.43 L1962.99 1215.43 L1962.4 1215.43 L1961.82 1215.43 L1961.23 1215.43 L1960.64 1215.43 L1960.06 1215.43 L1959.47 1215.43 L1958.88 1215.43 L1958.3 1215.43 L1957.71 1215.43 L1957.12 1215.43 L1956.54 1215.43 L1955.95 1215.43 L1955.37 1215.43 L1954.78 1215.43 L1954.19 1215.43 L1953.61 1215.43 L1953.02 1215.43 L1952.43 1215.43 L1951.85 1215.43 L1951.26 1215.43 L1950.67 1215.43 L1950.09 1215.43 L1949.5 1215.43 L1948.91 1215.43 L1948.33 1215.43 L1947.74 1215.43 L1947.16 1215.43 L1946.57 1215.43 L1945.98 1215.43 L1945.4 1215.43 L1944.81 1215.43 L1944.22 1215.43 L1943.64 1215.43 L1943.05 1215.43 L1942.46 1215.43 L1941.88 1215.43 L1941.29 1215.43 L1940.71 1215.43 L1940.12 1215.43 L1939.53 1215.43 L1938.95 1215.43 L1938.36 1215.43 L1937.77 1215.43 L1937.19 1215.43 L1936.6 1215.43 L1936.01 1215.43 L1935.43 1215.43 L1934.84 1215.43 L1934.25 1215.43 L1933.67 1215.43 L1933.08 1215.43 L1932.5 1215.43 L1931.91 1215.43 L1931.32 1215.43 L1930.74 1215.43 L1930.15 1215.43 L1929.56 1215.43 L1928.98 1215.43 L1928.39 1215.43 L1927.8 1215.43 L1927.22 1215.43 L1926.63 1215.43 L1926.04 1215.43 L1925.46 1215.43 L1924.87 1215.43 L1924.29 1215.43 L1923.7 1215.43 L1923.11 1215.43 L1922.53 1215.43 L1921.94 1215.43 L1921.35 1215.43 L1920.77 1215.43 L1920.18 1215.43 L1919.59 1215.43 L1919.01 1215.43 L1918.42 1215.43 L1917.83 1215.43 L1917.25 1215.43 L1916.66 1215.43 L1916.08 1215.43 L1915.49 1215.43 L1914.9 1215.43 L1914.32 1215.43 L1913.73 1215.43 L1913.14 1215.43 L1912.56 1215.43 L1911.97 1215.43 L1911.38 1215.43 L1910.8 1215.43 L1910.21 1215.43 L1909.63 1215.43 L1909.04 1215.43 L1908.45 1215.43 L1907.87 1215.43 L1907.28 1215.43 L1906.69 1215.43 L1906.11 1215.43 L1905.52 1215.43 L1904.93 1215.43 L1904.35 1215.43 L1903.76 1215.43 L1903.17 1215.43 L1902.59 1215.43 L1902 1215.43 L1901.42 1215.43 L1900.83 1215.43 L1900.24 1215.43 L1899.66 1215.43 L1899.07 1215.43 L1898.48 1215.43 L1897.9 1215.43 L1897.31 1215.43 L1896.72 1215.43 L1896.14 1215.43 L1895.55 1215.43 L1894.96 1215.43 L1894.38 1215.43 L1893.79 1215.43 L1893.21 1215.43 L1892.62 1215.43 L1892.03 1215.43 L1891.45 1215.43 L1890.86 1215.43 L1890.27 1215.43 L1889.69 1215.43 L1889.1 1215.43 L1888.51 1215.43 L1887.93 1215.43 L1887.34 1215.43 L1886.76 1215.43 L1886.17 1215.43 L1885.58 1215.43 L1885 1215.43 L1884.41 1215.43 L1883.82 1215.43 L1883.24 1215.43 L1882.65 1215.43 L1882.06 1215.43 L1881.48 1215.43 L1880.89 1215.43 L1880.3 1215.43 L1879.72 1215.43 L1879.13 1215.43 L1878.55 1215.43 L1877.96 1215.43 L1877.37 1215.43 L1876.79 1215.43 L1876.2 1215.43 L1875.61 1215.43 L1875.03 1215.43 L1874.44 1215.43 L1873.85 1215.43 L1873.27 1215.43 L1872.68 1215.43 L1872.09 1215.43 L1871.51 1215.43 L1870.92 1215.43 L1870.34 1215.43 L1869.75 1215.43 L1869.16 1215.43 L1868.58 1215.43 L1867.99 1215.43 L1867.4 1215.43 L1866.82 1215.43 L1866.23 1215.43 L1865.64 1215.43 L1865.06 1215.43 L1864.47 1215.43 L1863.88 1215.43 L1863.3 1215.43 L1862.71 1215.43 L1862.13 1215.43 L1861.54 1215.43 L1860.95 1215.43 L1860.37 1215.43 L1859.78 1215.43 L1859.19 1215.43 L1858.61 1215.43 L1858.02 1215.43 L1857.43 1215.43 L1856.85 1215.43 L1856.26 1215.43 L1855.68 1215.43 L1855.09 1215.43 L1854.5 1215.43 L1853.92 1215.43 L1853.33 1215.43 L1852.74 1215.43 L1852.16 1215.43 L1851.57 1215.43 L1850.98 1215.43 L1850.4 1215.43 L1849.81 1215.43 L1849.22 1215.43 L1848.64 1215.43 L1848.05 1215.43 L1847.47 1215.43 L1846.88 1215.43 L1846.29 1215.43 L1845.71 1215.43 L1845.12 1215.43 L1844.53 1215.43 L1843.95 1215.43 L1843.36 1215.43 L1842.77 1215.43 L1842.19 1215.43 L1841.6 1215.43 L1841.01 1215.43 L1840.43 1215.43 L1839.84 1215.43 L1839.26 1215.43 L1838.67 1215.43 L1838.08 1215.43 L1837.5 1215.43 L1836.91 1215.43 L1836.32 1215.43 L1835.74 1215.43 L1835.15 1215.43 L1834.56 1215.43 L1833.98 1215.43 L1833.39 1215.43 L1832.81 1215.43 L1832.22 1215.43 L1831.63 1215.43 L1831.05 1215.43 L1830.46 1215.43 L1829.87 1215.43 L1829.29 1215.43 L1828.7 1215.43 L1828.11 1215.43 L1827.53 1215.43 L1826.94 1215.43 L1826.35 1215.43 L1825.77 1215.43 L1825.18 1215.43 L1824.6 1215.43 L1824.01 1215.43 L1823.42 1215.43 L1822.84 1215.43 L1822.25 1215.43 L1821.66 1215.43 L1821.08 1215.43 L1820.49 1215.43 L1819.9 1215.43 L1819.32 1215.43 L1818.73 1215.43 L1818.14 1215.43 L1817.56 1215.43 L1816.97 1215.43 L1816.39 1215.43 L1815.8 1215.43 L1815.21 1215.43 L1814.63 1215.43 L1814.04 1215.43 L1813.45 1215.43 L1812.87 1215.43 L1812.28 1215.43 L1811.69 1215.43 L1811.11 1215.43 L1810.52 1215.43 L1809.94 1215.43 L1809.35 1215.43 L1808.76 1215.43 L1808.18 1215.43 L1807.59 1215.43 L1807 1215.43 L1806.42 1215.43 L1805.83 1215.43 L1805.24 1215.43 L1804.66 1215.43 L1804.07 1215.43 L1803.48 1215.43 L1802.9 1215.43 L1802.31 1215.43 L1801.73 1215.43 L1801.14 1215.43 L1800.55 1215.43 L1799.97 1215.43 L1799.38 1215.43 L1798.79 1215.43 L1798.21 1215.43 L1797.62 1215.43 L1797.03 1215.43 L1796.45 1215.43 L1795.86 1215.43 L1795.27 1215.43 L1794.69 1215.43 L1794.1 1215.43 L1793.52 1215.43 L1792.93 1215.43 L1792.34 1215.43 L1791.76 1215.43 L1791.17 1215.43 L1790.58 1215.43 L1790 1215.43 L1789.41 1215.43 L1788.82 1215.43 L1788.24 1215.43 L1787.65 1215.43 L1787.06 1215.43 L1786.48 1215.43 L1785.89 1215.43 L1785.31 1215.43 L1784.72 1215.43 L1784.13 1215.43 L1783.55 1215.43 L1782.96 1215.43 L1782.37 1215.43 L1781.79 1215.43 L1781.2 1215.43 L1780.61 1215.43 L1780.03 1215.43 L1779.44 1215.43 L1778.86 1215.43 L1778.27 1215.43 L1777.68 1215.43 L1777.1 1215.43 L1776.51 1215.43 L1775.92 1215.43 L1775.34 1215.43 L1774.75 1215.43 L1774.16 1215.43 L1773.58 1215.43 L1772.99 1215.43 L1772.4 1215.43 L1771.82 1215.43 L1771.23 1215.43 L1770.65 1215.43 L1770.06 1215.43 L1769.47 1215.43 L1768.89 1215.43 L1768.3 1215.43 L1767.71 1215.43 L1767.13 1215.43 L1766.54 1215.43 L1765.95 1215.43 L1765.37 1215.43 L1764.78 1215.43 L1764.19 1215.43 L1763.61 1215.43 L1763.02 1215.43 L1762.44 1215.43 L1761.85 1215.43 L1761.26 1215.43 L1760.68 1215.43 L1760.09 1215.43 L1759.5 1215.43 L1758.92 1215.43 L1758.33 1215.43 L1757.74 1215.43 L1757.16 1215.43 L1756.57 1215.43 L1755.99 1215.43 L1755.4 1215.43 L1754.81 1215.43 L1754.23 1215.43 L1753.64 1215.43 L1753.05 1215.43 L1752.47 1215.43 L1751.88 1215.43 L1751.29 1215.43 L1750.71 1215.43 L1750.12 1215.43 L1749.53 1215.43 L1748.95 1215.43 L1748.36 1215.43 L1747.78 1215.43 L1747.19 1215.43 L1746.6 1215.43 L1746.02 1215.43 L1745.43 1215.43 L1744.84 1215.43 L1744.26 1215.43 L1743.67 1215.43 L1743.08 1215.43 L1742.5 1215.43 L1741.91 1215.43 L1741.32 1215.43 L1740.74 1215.43 L1740.15 1215.43 L1739.57 1215.43 L1738.98 1215.43 L1738.39 1215.43 L1737.81 1215.43 L1737.22 1215.43 L1736.63 1215.43 L1736.05 1215.43 L1735.46 1215.43 L1734.87 1215.43 L1734.29 1215.43 L1733.7 1215.43 L1733.11 1215.43 L1732.53 1215.43 L1731.94 1215.43 L1731.36 1215.43 L1730.77 1215.43 L1730.18 1215.43 L1729.6 1215.43 L1729.01 1215.43 L1728.42 1215.43 L1727.84 1215.43 L1727.25 1215.43 L1726.66 1215.43 L1726.08 1215.43 L1725.49 1215.43 L1724.91 1215.43 L1724.32 1215.43 L1723.73 1215.43 L1723.15 1215.43 L1722.56 1215.43 L1721.97 1215.43 L1721.39 1215.43 L1720.8 1215.43 L1720.21 1215.43 L1719.63 1215.43 L1719.04 1215.43 L1718.45 1215.43 L1717.87 1215.43 L1717.28 1215.43 L1716.7 1215.43 L1716.11 1215.43 L1715.52 1215.43 L1714.94 1215.43 L1714.35 1215.43 L1713.76 1215.43 L1713.18 1215.43 L1712.59 1215.43 L1712 1215.43 L1711.42 1215.43 L1710.83 1215.43 L1710.24 1215.43 L1709.66 1215.43 L1709.07 1215.43 L1708.49 1215.43 L1707.9 1215.43 L1707.31 1215.43 L1706.73 1215.43 L1706.14 1215.43 L1705.55 1215.43 L1704.97 1215.43 L1704.38 1215.43 L1703.79 1215.43 L1703.21 1215.43 L1702.62 1215.43 L1702.04 1215.43 L1701.45 1215.43 L1700.86 1215.43 L1700.28 1215.43 L1699.69 1215.43 L1699.1 1215.43 L1698.52 1215.43 L1697.93 1215.43 L1697.34 1215.43 L1696.76 1215.43 L1696.17 1215.43 L1695.58 1215.43 L1695 1215.43 L1694.41 1215.43 L1693.83 1215.43 L1693.24 1215.43 L1692.65 1215.43 L1692.07 1215.43 L1691.48 1215.43 L1690.89 1215.43 L1690.31 1215.43 L1689.72 1215.43 L1689.13 1215.43 L1688.55 1215.43 L1687.96 1215.43 L1687.37 1215.43 L1686.79 1215.43 L1686.2 1215.43 L1685.62 1215.43 L1685.03 1215.43 L1684.44 1215.43 L1683.86 1215.43 L1683.27 1215.43 L1682.68 1215.43 L1682.1 1215.43 L1681.51 1215.43 L1680.92 1215.43 L1680.34 1215.43 L1679.75 1215.43 L1679.17 1215.43 L1678.58 1215.43 L1677.99 1215.43 L1677.41 1215.43 L1676.82 1215.43 L1676.23 1215.43 L1675.65 1215.43 L1675.06 1215.43 L1674.47 1215.43 L1673.89 1215.43 L1673.3 1215.43 L1672.71 1215.43 L1672.13 1215.43 L1671.54 1215.43 L1670.96 1215.43 L1670.37 1215.43 L1669.78 1215.43 L1669.2 1215.43 L1668.61 1215.43 L1668.02 1215.43 L1667.44 1215.43 L1666.85 1215.43 L1666.26 1215.43 L1665.68 1215.43 L1665.09 1215.43 L1664.5 1215.43 L1663.92 1215.43 L1663.33 1215.43 L1662.75 1215.43 L1662.16 1215.43 L1661.57 1215.43 L1660.99 1215.43 L1660.4 1215.43 L1659.81 1215.43 L1659.23 1215.43 L1658.64 1215.43 L1658.05 1215.43 L1657.47 1215.43 L1656.88 1215.43 L1656.29 1215.43 L1655.71 1215.43 L1655.12 1215.43 L1654.54 1215.43 L1653.95 1215.43 L1653.36 1215.43 L1652.78 1215.43 L1652.19 1215.43 L1651.6 1215.43 L1651.02 1215.43 L1650.43 1215.43 L1649.84 1215.43 L1649.26 1215.43 L1648.67 1215.43 L1648.09 1215.43 L1647.5 1215.43 L1646.91 1215.43 L1646.33 1215.43 L1645.74 1215.43 L1645.15 1215.43 L1644.57 1215.43 L1643.98 1215.43 L1643.39 1215.43 L1642.81 1215.43 L1642.22 1215.43 L1641.63 1215.43 L1641.05 1215.43 L1640.46 1215.43 L1639.88 1215.43 L1639.29 1215.43 L1638.7 1215.43 L1638.12 1215.43 L1637.53 1215.43 L1636.94 1215.43 L1636.36 1215.43 L1635.77 1215.43 L1635.18 1215.43 L1634.6 1215.43 L1634.01 1215.43 L1633.42 1215.43 L1632.84 1215.43 L1632.25 1215.43 L1631.67 1215.43 L1631.08 1215.43 L1630.49 1215.43 L1629.91 1215.43 L1629.32 1215.43 L1628.73 1215.43 L1628.15 1215.43 L1627.56 1215.43 L1626.97 1215.43 L1626.39 1215.43 L1625.8 1215.43 L1625.22 1215.43 L1624.63 1215.43 L1624.04 1215.43 L1623.46 1215.43 L1622.87 1215.43 L1622.28 1215.43 L1621.7 1215.43 L1621.11 1215.43 L1620.52 1215.43 L1619.94 1215.43 L1619.35 1215.43 L1618.76 1215.43 L1618.18 1215.43 L1617.59 1215.43 L1617.01 1215.43 L1616.42 1215.43 L1615.83 1215.43 L1615.25 1215.43 L1614.66 1215.43 L1614.07 1215.43 L1613.49 1215.43 L1612.9 1215.43 L1612.31 1215.43 L1611.73 1215.43 L1611.14 1215.43 L1610.55 1215.43 L1609.97 1215.43 L1609.38 1215.43 L1608.8 1215.43 L1608.21 1215.43 L1607.62 1215.43 L1607.04 1215.43 L1606.45 1215.43 L1605.86 1215.43 L1605.28 1215.43 L1604.69 1215.43 L1604.1 1215.43 L1603.52 1215.43 L1602.93 1215.43 L1602.34 1215.43 L1601.76 1215.43 L1601.17 1215.43 L1600.59 1215.43 L1600 1215.43 L1599.41 1215.43 L1598.83 1215.43 L1598.24 1215.43 L1597.65 1215.43 L1597.07 1215.43 L1596.48 1215.43 L1595.89 1215.43 L1595.31 1215.43 L1594.72 1215.43 L1594.14 1215.43 L1593.55 1215.43 L1592.96 1215.43 L1592.38 1215.43 L1591.79 1215.43 L1591.2 1215.43 L1590.62 1215.43 L1590.03 1215.43 L1589.44 1215.43 L1588.86 1215.43 L1588.27 1215.43 L1587.68 1215.43 L1587.1 1215.43 L1586.51 1215.43 L1585.93 1215.43 L1585.34 1215.43 L1584.75 1215.43 L1584.17 1215.43 L1583.58 1215.43 L1582.99 1215.43 L1582.41 1215.43 L1581.82 1215.43 L1581.23 1215.43 L1580.65 1215.43 L1580.06 1215.43 L1579.47 1215.43 L1578.89 1215.43 L1578.3 1215.43 L1577.72 1215.43 L1577.13 1215.43 L1576.54 1215.43 L1575.96 1215.43 L1575.37 1215.43 L1574.78 1215.43 L1574.2 1215.43 L1573.61 1215.43 L1573.02 1215.43 L1572.44 1215.43 L1571.85 1215.43 L1571.27 1215.43 L1570.68 1215.43 L1570.09 1215.43 L1569.51 1215.43 L1568.92 1215.43 L1568.33 1215.43 L1567.75 1215.43 L1567.16 1215.43 L1566.57 1215.43 L1565.99 1215.43 L1565.4 1215.43 L1564.81 1215.43 L1564.23 1215.43 L1563.64 1215.43 L1563.06 1215.43 L1562.47 1215.43 L1561.88 1215.43 L1561.3 1215.43 L1560.71 1215.43 L1560.12 1215.43 L1559.54 1215.43 L1558.95 1215.43 L1558.36 1215.43 L1557.78 1215.43 L1557.19 1215.43 L1556.6 1215.43 L1556.02 1215.43 L1555.43 1215.43 L1554.85 1215.43 L1554.26 1215.43 L1553.67 1215.43 L1553.09 1215.43 L1552.5 1215.43 L1551.91 1215.43 L1551.33 1215.43 L1550.74 1215.43 L1550.15 1215.43 L1549.57 1215.43 L1548.98 1215.43 L1548.4 1215.43 L1547.81 1215.43 L1547.22 1215.43 L1546.64 1215.43 L1546.05 1215.43 L1545.46 1215.43 L1544.88 1215.43 L1544.29 1215.43 L1543.7 1215.43 L1543.12 1215.43 L1542.53 1215.43 L1541.94 1215.43 L1541.36 1215.43 L1540.77 1215.43 L1540.19 1215.43 L1539.6 1215.43 L1539.01 1215.43 L1538.43 1215.43 L1537.84 1215.43 L1537.25 1215.43 L1536.67 1215.43 L1536.08 1215.43 L1535.49 1215.43 L1534.91 1215.43 L1534.32 1215.43 L1533.73 1215.43 L1533.15 1215.43 L1532.56 1215.43 L1531.98 1215.43 L1531.39 1215.43 L1530.8 1215.43 L1530.22 1215.43 L1529.63 1215.43 L1529.04 1215.43 L1528.46 1215.43 L1527.87 1215.43 L1527.28 1215.43 L1526.7 1215.43 L1526.11 1215.43 L1525.52 1215.43 L1524.94 1215.43 L1524.35 1215.43 L1523.77 1215.43 L1523.18 1215.43 L1522.59 1215.43 L1522.01 1215.43 L1521.42 1215.43 L1520.83 1215.43 L1520.25 1215.43 L1519.66 1215.43 L1519.07 1215.43 L1518.49 1215.43 L1517.9 1215.43 L1517.32 1215.43 L1516.73 1215.43 L1516.14 1215.43 L1515.56 1215.43 L1514.97 1215.43 L1514.38 1215.43 L1513.8 1215.43 L1513.21 1215.43 L1512.62 1215.43 L1512.04 1215.43 L1511.45 1215.43 L1510.86 1215.43 L1510.28 1215.43 L1509.69 1215.43 L1509.11 1215.43 L1508.52 1215.43 L1507.93 1215.43 L1507.35 1215.43 L1506.76 1215.43 L1506.17 1215.43 L1505.59 1215.43 L1505 1215.43 L1504.41 1215.43 L1503.83 1215.43 L1503.24 1215.43 L1502.65 1215.43 L1502.07 1215.43 L1501.48 1215.43 L1500.9 1215.43 L1500.31 1215.43 L1499.72 1215.43 L1499.14 1215.43 L1498.55 1215.43 L1497.96 1215.43 L1497.38 1215.43 L1496.79 1215.43 L1496.2 1215.43 L1495.62 1215.43 L1495.03 1215.43 L1494.45 1215.43 L1493.86 1215.43 L1493.27 1215.43 L1492.69 1215.43 L1492.1 1215.43 L1491.51 1215.43 L1490.93 1215.43 L1490.34 1215.43 L1489.75 1215.43 L1489.17 1215.43 L1488.58 1215.43 L1487.99 1215.43 L1487.41 1215.43 L1486.82 1215.43 L1486.24 1215.43 L1485.65 1215.43 L1485.06 1215.43 L1484.48 1215.43 L1483.89 1215.43 L1483.3 1215.43 L1482.72 1215.43 L1482.13 1215.43 L1481.54 1215.43 L1480.96 1215.43 L1480.37 1215.43 L1479.78 1215.43 L1479.2 1215.43 L1478.61 1215.43 L1478.03 1215.43 L1477.44 1215.43 L1476.85 1215.43 L1476.27 1215.43 L1475.68 1215.43 L1475.09 1215.43 L1474.51 1215.43 L1473.92 1215.43 L1473.33 1215.43 L1472.75 1215.43 L1472.16 1215.43 L1471.57 1215.43 L1470.99 1215.43 L1470.4 1215.43 L1469.82 1215.43 L1469.23 1215.43 L1468.64 1215.43 L1468.06 1215.43 L1467.47 1215.43 L1466.88 1215.43 L1466.3 1215.43 L1465.71 1215.43 L1465.12 1215.43 L1464.54 1215.43 L1463.95 1215.43 L1463.37 1215.43 L1462.78 1215.43 L1462.19 1215.43 L1461.61 1215.43 L1461.02 1215.43 L1460.43 1215.43 L1459.85 1215.43 L1459.26 1215.43 L1458.67 1215.43 L1458.09 1215.43 L1457.5 1215.43 L1456.91 1215.43 L1456.33 1215.43 L1455.74 1215.43 L1455.16 1215.43 L1454.57 1215.43 L1453.98 1215.43 L1453.4 1215.43 L1452.81 1215.43 L1452.22 1215.43 L1451.64 1215.43 L1451.05 1215.43 L1450.46 1215.43 L1449.88 1215.43 L1449.29 1215.43 L1448.7 1215.43 L1448.12 1215.43 L1447.53 1215.43 L1446.95 1215.43 L1446.36 1215.43 L1445.77 1215.43 L1445.19 1215.43 L1444.6 1215.43 L1444.01 1215.43 L1443.43 1215.43 L1442.84 1215.43 L1442.25 1215.43 L1441.67 1215.43 L1441.08 1215.43 L1440.5 1215.43 L1439.91 1215.43 L1439.32 1215.43 L1438.74 1215.43 L1438.15 1215.43 L1437.56 1215.43 L1436.98 1215.43 L1436.39 1215.43 L1435.8 1215.43 L1435.22 1215.43 L1434.63 1215.43 L1434.04 1215.43 L1433.46 1215.43 L1432.87 1215.43 L1432.29 1215.43 L1431.7 1215.43 L1431.11 1215.43 L1430.53 1215.43 L1429.94 1215.43 L1429.35 1215.43 L1428.77 1215.43 L1428.18 1215.43 L1427.59 1215.43 L1427.01 1215.43 L1426.42 1215.43 L1425.83 1215.43 L1425.25 1215.43 L1424.66 1215.43 L1424.08 1215.43 L1423.49 1215.43 L1422.9 1215.43 L1422.32 1215.43 L1421.73 1215.43 L1421.14 1215.43 L1420.56 1215.43 L1419.97 1215.43 L1419.38 1215.43 L1418.8 1215.43 L1418.21 1215.43 L1417.63 1215.43 L1417.04 1215.43 L1416.45 1215.43 L1415.87 1215.43 L1415.28 1215.43 L1414.69 1215.43 L1414.11 1215.43 L1413.52 1215.43 L1412.93 1215.43 L1412.35 1215.43 L1411.76 1215.43 L1411.17 1215.43 L1410.59 1215.43 L1410 1215.43 L1409.42 1215.43 L1408.83 1215.43 L1408.24 1215.43 L1407.66 1215.43 L1407.07 1215.43 L1406.48 1215.43 L1405.9 1215.43 L1405.31 1215.43 L1404.72 1215.43 L1404.14 1215.43 L1403.55 1215.43 L1402.96 1215.43 L1402.38 1215.43 L1401.79 1215.43 L1401.21 1215.43 L1400.62 1215.43 L1400.03 1215.43 L1399.45 1215.43 L1398.86 1215.43 L1398.27 1215.43 L1397.69 1215.43 L1397.1 1215.43 L1396.51 1215.43 L1395.93 1215.43 L1395.34 1215.43 L1394.75 1215.43 L1394.17 1215.43 L1393.58 1215.43 L1393 1215.43 L1392.41 1215.43 L1391.82 1215.43 L1391.24 1215.43 L1390.65 1215.43 L1390.06 1215.43 L1389.48 1215.43 L1388.89 1215.43 L1388.3 1215.43 L1387.72 1215.43 L1387.13 1215.43 L1386.55 1215.43 L1385.96 1215.43 L1385.37 1215.43 L1384.79 1215.43 L1384.2 1215.43 L1383.61 1215.43 L1383.03 1215.43 L1382.44 1215.43 L1381.85 1215.43 L1381.27 1215.43 L1380.68 1215.43 L1380.09 1215.43 L1379.51 1215.43 L1378.92 1215.43 L1378.34 1215.43 L1377.75 1215.43 L1377.16 1215.43 L1376.58 1215.43 L1375.99 1215.43 L1375.4 1215.43 L1374.82 1215.43 L1374.23 1215.43 L1373.64 1215.43 L1373.06 1215.43 L1372.47 1215.43 L1371.88 1215.43 L1371.3 1215.43 L1370.71 1215.43 L1370.13 1215.43 L1369.54 1215.43 L1368.95 1215.43 L1368.37 1215.43 L1367.78 1215.43 L1367.19 1215.43 L1366.61 1215.43 L1366.02 1215.43 L1365.43 1215.43 L1364.85 1215.43 L1364.26 1215.43 L1363.68 1215.43 L1363.09 1215.43 L1362.5 1215.43 L1361.92 1215.43 L1361.33 1215.43 L1360.74 1215.43 L1360.16 1215.43 L1359.57 1215.43 L1358.98 1215.43 L1358.4 1215.43 L1357.81 1215.43 L1357.22 1215.43 L1356.64 1215.43 L1356.05 1215.43 L1355.47 1215.43 L1354.88 1215.43 L1354.29 1215.43 L1353.71 1215.43 L1353.12 1215.43 L1352.53 1215.43 L1351.95 1215.43 L1351.36 1215.43 L1350.77 1215.43 L1350.19 1215.43 L1349.6 1215.43 L1349.01 1215.43 L1348.43 1215.43 L1347.84 1215.43 L1347.26 1215.43 L1346.67 1215.43 L1346.08 1215.43 L1345.5 1215.43 L1344.91 1215.43 L1344.32 1215.43 L1343.74 1215.43 L1343.15 1215.43 L1342.56 1215.43 L1341.98 1215.43 L1341.39 1215.43 L1340.8 1215.43 L1340.22 1215.43 L1339.63 1215.43 L1339.05 1215.43 L1338.46 1215.43 L1337.87 1215.43 L1337.29 1215.43 L1336.7 1215.43 L1336.11 1215.43 L1335.53 1215.43 L1334.94 1215.43 L1334.35 1215.43 L1333.77 1215.43 L1333.18 1215.43 L1332.6 1215.43 L1332.01 1215.43 L1331.42 1215.43 L1330.84 1215.43 L1330.25 1215.43 L1329.66 1215.43 L1329.08 1215.43 L1328.49 1215.43 L1327.9 1215.43 L1327.32 1215.43 L1326.73 1215.43 L1326.14 1215.43 L1325.56 1215.43 L1324.97 1215.43 L1324.39 1215.43 L1323.8 1215.43 L1323.21 1215.43 L1322.63 1215.43 L1322.04 1215.43 L1321.45 1215.43 L1320.87 1215.43 L1320.28 1215.43 L1319.69 1215.43 L1319.11 1215.43 L1318.52 1215.43 L1317.93 1215.43 L1317.35 1215.43 L1316.76 1215.43 L1316.18 1215.43 L1315.59 1215.43 L1315 1215.43 L1314.42 1215.43 L1313.83 1215.43 L1313.24 1215.43 L1312.66 1215.43 L1312.07 1215.43 L1311.48 1215.43 L1310.9 1215.43 L1310.31 1215.43 L1309.73 1215.43 L1309.14 1215.43 L1308.55 1215.43 L1307.97 1215.43 L1307.38 1215.43 L1306.79 1215.43 L1306.21 1215.43 L1305.62 1215.43 L1305.03 1215.43 L1304.45 1215.43 L1303.86 1215.43 L1303.27 1215.43 L1302.69 1215.43 L1302.1 1215.43 L1301.52 1215.43 L1300.93 1215.43 L1300.34 1215.43 L1299.76 1215.43 L1299.17 1215.43 L1298.58 1215.43 L1298 1215.43 L1297.41 1215.43 L1296.82 1215.43 L1296.24 1215.43 L1295.65 1215.43 L1295.06 1215.43 L1294.48 1215.43 L1293.89 1215.43 L1293.31 1215.43 L1292.72 1215.43 L1292.13 1215.43 L1291.55 1215.43 L1290.96 1215.43 L1290.37 1215.43 L1289.79 1215.43 L1289.2 1215.43 L1288.61 1215.43 L1288.03 1215.43 L1287.44 1215.43 L1286.86 1215.43 L1286.27 1215.43 L1285.68 1215.43 L1285.1 1215.43 L1284.51 1215.43 L1283.92 1215.43 L1283.34 1215.43 L1282.75 1215.43 L1282.16 1215.43 L1281.58 1215.43 L1280.99 1215.43 L1280.4 1215.43 L1279.82 1215.43 L1279.23 1215.43 L1278.65 1215.43 L1278.06 1215.43 L1277.47 1215.43 L1276.89 1215.43 L1276.3 1215.43 L1275.71 1215.43 L1275.13 1215.43 L1274.54 1215.43 L1273.95 1215.43 L1273.37 1215.43 L1272.78 1215.43 L1272.19 1215.43 L1271.61 1215.43 L1271.02 1215.43 L1270.44 1215.43 L1269.85 1215.43 L1269.26 1215.43 L1268.68 1215.43 L1268.09 1215.43 L1267.5 1215.43 L1266.92 1215.43 L1266.33 1215.43 L1265.74 1215.43 L1265.16 1215.43 L1264.57 1215.43 L1263.98 1215.43 L1263.4 1215.43 L1262.81 1215.43 L1262.23 1215.43 L1261.64 1215.43 L1261.05 1215.43 L1260.47 1215.43 L1259.88 1215.43 L1259.29 1215.43 L1258.71 1215.43 L1258.12 1215.43 L1257.53 1215.43 L1256.95 1215.43 L1256.36 1215.43 L1255.78 1215.43 L1255.19 1215.43 L1254.6 1215.43 L1254.02 1215.43 L1253.43 1215.43 L1252.84 1215.43 L1252.26 1215.43 L1251.67 1215.43 L1251.08 1215.43 L1250.5 1215.43 L1249.91 1215.43 L1249.32 1215.43 L1248.74 1215.43 L1248.15 1215.43 L1247.57 1215.43 L1246.98 1215.43 L1246.39 1215.43 L1245.81 1215.43 L1245.22 1215.43 L1244.63 1215.43 L1244.05 1215.43 L1243.46 1215.43 L1242.87 1215.43 L1242.29 1215.43 L1241.7 1215.43 L1241.11 1215.43 L1240.53 1215.43 L1239.94 1215.43 L1239.36 1215.43 L1238.77 1215.43 L1238.18 1215.43 L1237.6 1215.43 L1237.01 1215.43 L1236.42 1215.43 L1235.84 1215.43 L1235.25 1215.43 L1234.66 1215.43 L1234.08 1215.43 L1233.49 1215.43 L1232.91 1215.43 L1232.32 1215.43 L1231.73 1215.43 L1231.15 1215.43 L1230.56 1215.43 L1229.97 1215.43 L1229.39 1215.43 L1228.8 1215.43 L1228.21 1215.43 L1227.63 1215.43 L1227.04 1215.43 L1226.45 1215.43 L1225.87 1215.43 L1225.28 1215.43 L1224.7 1215.43 L1224.11 1215.43 L1223.52 1215.43 L1222.94 1215.43 L1222.35 1215.43 L1221.76 1215.43 L1221.18 1215.43 L1220.59 1215.43 L1220 1215.43 L1219.42 1215.43 L1218.83 1215.43 L1218.24 1215.43 L1217.66 1215.43 L1217.07 1215.43 L1216.49 1215.43 L1215.9 1215.43 L1215.31 1215.43 L1214.73 1215.43 L1214.14 1215.43 L1213.55 1215.43 L1212.97 1215.43 L1212.38 1215.43 L1211.79 1215.43 L1211.21 1215.43 L1210.62 1215.43 L1210.03 1215.43 L1209.45 1215.43 L1208.86 1215.43 L1208.28 1215.43 L1207.69 1215.43 L1207.1 1215.43 L1206.52 1215.43 L1205.93 1215.43 L1205.34 1215.43 L1204.76 1215.43 L1204.17 1215.43 L1203.58 1215.43 L1203 1215.43 L1202.41 1215.43 L1201.83 1215.43 L1201.24 1215.43 L1200.65 1215.43 L1200.07 1215.43 L1199.48 1215.43 L1198.89 1215.43 L1198.31 1215.43 L1197.72 1215.43 L1197.13 1215.43 L1196.55 1215.43 L1195.96 1215.43 L1195.37 1215.43 L1194.79 1215.43 L1194.2 1215.43 L1193.62 1215.43 L1193.03 1215.43 L1192.44 1215.43 L1191.86 1215.43 L1191.27 1215.43 L1190.68 1215.43 L1190.1 1215.43 L1189.51 1215.43 L1188.92 1215.43 L1188.34 1215.43 L1187.75 1215.43 L1187.16 1215.43 L1186.58 1215.43 L1185.99 1215.43 L1185.41 1215.43 L1184.82 1215.43 L1184.23 1215.43 L1183.65 1215.43 L1183.06 1215.43 L1182.47 1215.43 L1181.89 1215.43 L1181.3 1215.43 L1180.71 1215.43 L1180.13 1215.43 L1179.54 1215.43 L1178.96 1215.43 L1178.37 1215.43 L1177.78 1215.43 L1177.2 1215.43 L1176.61 1215.43 L1176.02 1215.43 L1175.44 1215.43 L1174.85 1215.43 L1174.26 1215.43 L1173.68 1215.43 L1173.09 1215.43 L1172.5 1215.43 L1171.92 1215.43 L1171.33 1215.43 L1170.75 1215.43 L1170.16 1215.43 L1169.57 1215.43 L1168.99 1215.43 L1168.4 1215.43 L1167.81 1215.43 L1167.23 1215.43 L1166.64 1215.43 L1166.05 1215.43 L1165.47 1215.43 L1164.88 1215.43 L1164.29 1215.43 L1163.71 1215.43 L1163.12 1215.43 L1162.54 1215.43 L1161.95 1215.43 L1161.36 1215.43 L1160.78 1215.43 L1160.19 1215.43 L1159.6 1215.43 L1159.02 1215.43 L1158.43 1215.43 L1157.84 1215.43 L1157.26 1215.43 L1156.67 1215.43 L1156.09 1215.43 L1155.5 1215.43 L1154.91 1215.43 L1154.33 1215.43 L1153.74 1215.43 L1153.15 1215.43 L1152.57 1215.43 L1151.98 1215.43 L1151.39 1215.43 L1150.81 1215.43 L1150.22 1215.43 L1149.63 1215.43 L1149.05 1215.43 L1148.46 1215.43 L1147.88 1215.43 L1147.29 1215.43 L1146.7 1215.43 L1146.12 1215.43 L1145.53 1215.43 L1144.94 1215.43 L1144.36 1215.43 L1143.77 1215.43 L1143.18 1215.43 L1142.6 1215.43 L1142.01 1215.43 L1141.42 1215.43 L1140.84 1215.43 L1140.25 1215.43 L1139.67 1215.43 L1139.08 1215.43 L1138.49 1215.43 L1137.91 1215.43 L1137.32 1215.43 L1136.73 1215.43 L1136.15 1215.43 L1135.56 1215.43 L1134.97 1215.43 L1134.39 1215.43 L1133.8 1215.43 L1133.21 1215.43 L1132.63 1215.43 L1132.04 1215.43 L1131.46 1215.43 L1130.87 1215.43 L1130.28 1215.43 L1129.7 1215.43 L1129.11 1215.43 L1128.52 1215.43 L1127.94 1215.43 L1127.35 1215.43 L1126.76 1215.43 L1126.18 1215.43 L1125.59 1215.43 L1125.01 1215.43 L1124.42 1215.43 L1123.83 1215.43 L1123.25 1215.43 L1122.66 1215.43 L1122.07 1215.43 L1121.49 1215.43 L1120.9 1215.43 L1120.31 1215.43 L1119.73 1215.43 L1119.14 1215.43 L1118.55 1215.43 L1117.97 1215.43 L1117.38 1215.43 L1116.8 1215.43 L1116.21 1215.43 L1115.62 1215.43 L1115.04 1215.43 L1114.45 1215.43 L1113.86 1215.43 L1113.28 1215.43 L1112.69 1215.43 L1112.1 1215.43 L1111.52 1215.43 L1110.93 1215.43 L1110.34 1215.43 L1109.76 1215.43 L1109.17 1215.43 L1108.59 1215.43 L1108 1215.43 L1107.41 1215.43 L1106.83 1215.43 L1106.24 1215.43 L1105.65 1215.43 L1105.07 1215.43 L1104.48 1215.43 L1103.89 1215.43 L1103.31 1215.43 L1102.72 1215.43 L1102.14 1215.43 L1101.55 1215.43 L1100.96 1215.43 L1100.38 1215.43 L1099.79 1215.43 L1099.2 1215.43 L1098.62 1215.43 L1098.03 1215.43 L1097.44 1215.43 L1096.86 1215.43 L1096.27 1215.43 L1095.68 1215.43 L1095.1 1215.43 L1094.51 1215.43 L1093.93 1215.43 L1093.34 1215.43 L1092.75 1215.43 L1092.17 1215.43 L1091.58 1215.43 L1090.99 1215.43 L1090.41 1215.43 L1089.82 1215.43 L1089.23 1215.43 L1088.65 1215.43 L1088.06 1215.43 L1087.47 1215.43 L1086.89 1215.43 L1086.3 1215.43 L1085.72 1215.43 L1085.13 1215.43 L1084.54 1215.43 L1083.96 1215.43 L1083.37 1215.43 L1082.78 1215.43 L1082.2 1215.43 L1081.61 1215.43 L1081.02 1215.43 L1080.44 1215.43 L1079.85 1215.43 L1079.26 1215.43 L1078.68 1215.43 L1078.09 1215.43 L1077.51 1215.43 L1076.92 1215.43 L1076.33 1215.43 L1075.75 1215.43 L1075.16 1215.43 L1074.57 1215.43 L1073.99 1215.43 L1073.4 1215.43 L1072.81 1215.43 L1072.23 1215.43 L1071.64 1215.43 L1071.06 1215.43 L1070.47 1215.43 L1069.88 1215.43 L1069.3 1215.43 L1068.71 1215.43 L1068.12 1215.43 L1067.54 1215.43 L1066.95 1215.43 L1066.36 1215.43 L1065.78 1215.43 L1065.19 1215.43 L1064.6 1215.43 L1064.02 1215.43 L1063.43 1215.43 L1062.85 1215.43 L1062.26 1215.43 L1061.67 1215.43 L1061.09 1215.43 L1060.5 1215.43 L1059.91 1215.43 L1059.33 1215.43 L1058.74 1215.43 L1058.15 1215.43 L1057.57 1215.43 L1056.98 1215.43 L1056.39 1215.43 L1055.81 1215.43 L1055.22 1215.43 L1054.64 1215.43 L1054.05 1215.43 L1053.46 1215.43 L1052.88 1215.43 L1052.29 1215.43 L1051.7 1215.43 L1051.12 1215.43 L1050.53 1215.43 L1049.94 1215.43 L1049.36 1215.43 L1048.77 1215.43 L1048.19 1215.43 L1047.6 1215.43 L1047.01 1215.43 L1046.43 1215.43 L1045.84 1215.43 L1045.25 1215.43 L1044.67 1215.43 L1044.08 1215.43 L1043.49 1215.43 L1042.91 1215.43 L1042.32 1215.43 L1041.73 1215.43 L1041.15 1215.43 L1040.56 1215.43 L1039.98 1215.43 L1039.39 1215.43 L1038.8 1215.43 L1038.22 1215.43 L1037.63 1215.43 L1037.04 1215.43 L1036.46 1215.43 L1035.87 1215.43 L1035.28 1215.43 L1034.7 1215.43 L1034.11 1215.43 L1033.52 1215.43 L1032.94 1215.43 L1032.35 1215.43 L1031.77 1215.43 L1031.18 1215.43 L1030.59 1215.43 L1030.01 1215.43 L1029.42 1215.43 L1028.83 1215.43 L1028.25 1215.43 L1027.66 1215.43 L1027.07 1215.43 L1026.49 1215.43 L1025.9 1215.43 L1025.32 1215.43 L1024.73 1215.43 L1024.14 1215.43 L1023.56 1215.43 L1022.97 1215.43 L1022.38 1215.43 L1021.8 1215.43 L1021.21 1215.43 L1020.62 1215.43 L1020.04 1215.43 L1019.45 1215.43 L1018.86 1215.43 L1018.28 1215.43 L1017.69 1215.43 L1017.11 1215.43 L1016.52 1215.43 L1015.93 1215.43 L1015.35 1215.43 L1014.76 1215.43 L1014.17 1215.43 L1013.59 1215.43 L1013 1215.43 L1012.41 1215.43 L1011.83 1215.43 L1011.24 1215.43 L1010.65 1215.43 L1010.07 1215.43 L1009.48 1215.43 L1008.9 1215.43 L1008.31 1215.43 L1007.72 1215.43 L1007.14 1215.43 L1006.55 1215.43 L1005.96 1215.43 L1005.38 1215.43 L1004.79 1215.43 L1004.2 1215.43 L1003.62 1215.43 L1003.03 1215.43 L1002.44 1215.43 L1001.86 1215.43 L1001.27 1215.43 L1000.69 1215.43 L1000.1 1215.43 L999.513 1215.43 L998.926 1215.43 L998.34 1215.43 L997.754 1215.43 L997.167 1215.43 L996.581 1215.43 L995.994 1215.43 L995.408 1215.43 L994.822 1215.43 L994.235 1215.43 L993.649 1215.43 L993.062 1215.43 L992.476 1215.43 L991.889 1215.43 L991.303 1215.43 L990.717 1215.43 L990.13 1215.43 L989.544 1215.43 L988.957 1215.43 L988.371 1215.43 L987.785 1215.43 L987.198 1215.43 L986.612 1215.43 L986.025 1215.43  Z\" fill=\"#3da44d\" fill-rule=\"evenodd\" fill-opacity=\"0.5\"/>\n<polyline clip-path=\"url(#clip152)\" style=\"stroke:#3da44d; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"986.025,1215.51 986.612,1215.51 987.198,1215.51 987.785,1215.51 988.371,1215.51 988.957,1215.51 989.544,1215.51 990.13,1215.51 990.717,1215.51 991.303,1215.51 991.889,1215.51 992.476,1215.51 993.062,1215.51 993.649,1215.51 994.235,1215.51 994.822,1215.51 995.408,1215.51 995.994,1215.51 996.581,1215.51 997.167,1215.51 997.754,1215.51 998.34,1215.51 998.926,1215.51 999.513,1215.51 1000.1,1215.51 1000.69,1215.51 1001.27,1215.51 1001.86,1215.51 1002.44,1215.51 1003.03,1215.51 1003.62,1215.51 1004.2,1215.51 1004.79,1215.51 1005.38,1215.51 1005.96,1215.51 1006.55,1215.51 1007.14,1215.51 1007.72,1215.51 1008.31,1215.51 1008.9,1215.51 1009.48,1215.51 1010.07,1215.51 1010.65,1215.51 1011.24,1215.51 1011.83,1215.51 1012.41,1215.51 1013,1215.51 1013.59,1215.51 1014.17,1215.51 1014.76,1215.51 1015.35,1215.51 1015.93,1215.51 1016.52,1215.51 1017.11,1215.51 1017.69,1215.51 1018.28,1215.51 1018.86,1215.51 1019.45,1215.51 1020.04,1215.51 1020.62,1215.51 1021.21,1215.51 1021.8,1215.51 1022.38,1215.51 1022.97,1215.51 1023.56,1215.51 1024.14,1215.51 1024.73,1215.51 1025.32,1215.51 1025.9,1215.51 1026.49,1215.51 1027.07,1215.51 1027.66,1215.51 1028.25,1215.51 1028.83,1215.51 1029.42,1215.51 1030.01,1215.51 1030.59,1215.51 1031.18,1215.51 1031.77,1215.51 1032.35,1215.51 1032.94,1215.51 1033.52,1215.51 1034.11,1215.51 1034.7,1215.51 1035.28,1215.51 1035.87,1215.51 1036.46,1215.51 1037.04,1215.51 1037.63,1215.51 1038.22,1215.51 1038.8,1215.51 1039.39,1215.51 1039.98,1215.51 1040.56,1215.51 1041.15,1215.51 1041.73,1215.51 1042.32,1215.51 1042.91,1215.51 1043.49,1215.51 1044.08,1215.51 1044.67,1215.51 1045.25,1215.51 1045.84,1215.51 1046.43,1215.51 1047.01,1215.51 1047.6,1215.51 1048.19,1215.51 1048.77,1215.51 1049.36,1215.51 1049.94,1215.51 1050.53,1215.51 1051.12,1215.51 1051.7,1215.51 1052.29,1215.51 1052.88,1215.51 1053.46,1215.51 1054.05,1215.51 1054.64,1215.51 1055.22,1215.51 1055.81,1215.51 1056.39,1215.51 1056.98,1215.51 1057.57,1215.51 1058.15,1215.51 1058.74,1215.51 1059.33,1215.51 1059.91,1215.51 1060.5,1215.51 1061.09,1215.51 1061.67,1215.51 1062.26,1215.51 1062.85,1215.51 1063.43,1215.51 1064.02,1215.51 1064.6,1215.51 1065.19,1215.51 1065.78,1215.51 1066.36,1215.51 1066.95,1215.51 1067.54,1215.51 1068.12,1215.51 1068.71,1215.51 1069.3,1215.51 1069.88,1215.51 1070.47,1215.51 1071.06,1215.51 1071.64,1215.51 1072.23,1215.51 1072.81,1215.51 1073.4,1215.51 1073.99,1215.51 1074.57,1215.51 1075.16,1215.51 1075.75,1215.51 1076.33,1215.51 1076.92,1215.51 1077.51,1215.51 1078.09,1215.51 1078.68,1215.51 1079.26,1215.51 1079.85,1215.51 1080.44,1215.51 1081.02,1215.51 1081.61,1215.51 1082.2,1215.51 1082.78,1215.51 1083.37,1215.51 1083.96,1215.51 1084.54,1215.51 1085.13,1215.51 1085.72,1215.51 1086.3,1215.51 1086.89,1215.51 1087.47,1215.51 1088.06,1215.51 1088.65,1215.51 1089.23,1215.51 1089.82,1215.51 1090.41,1215.51 1090.99,1215.51 1091.58,1215.51 1092.17,1215.51 1092.75,1215.51 1093.34,1215.51 1093.93,1215.51 1094.51,1215.51 1095.1,1215.51 1095.68,1215.51 1096.27,1215.51 1096.86,1215.51 1097.44,1215.51 1098.03,1215.51 1098.62,1215.51 1099.2,1215.51 1099.79,1215.51 1100.38,1215.51 1100.96,1215.51 1101.55,1215.51 1102.14,1215.51 1102.72,1215.51 1103.31,1215.51 1103.89,1215.51 1104.48,1215.51 1105.07,1215.51 1105.65,1215.51 1106.24,1215.51 1106.83,1215.51 1107.41,1215.51 1108,1215.51 1108.59,1215.51 1109.17,1215.51 1109.76,1215.51 1110.34,1215.51 1110.93,1215.51 1111.52,1215.51 1112.1,1215.51 1112.69,1215.51 1113.28,1215.51 1113.86,1215.51 1114.45,1215.51 1115.04,1215.51 1115.62,1215.51 1116.21,1215.51 1116.8,1215.51 1117.38,1215.51 1117.97,1215.51 1118.55,1215.51 1119.14,1215.51 1119.73,1215.51 1120.31,1215.51 1120.9,1215.51 1121.49,1215.51 1122.07,1215.51 1122.66,1215.51 1123.25,1215.51 1123.83,1215.51 1124.42,1215.51 1125.01,1215.51 1125.59,1215.51 1126.18,1215.51 1126.76,1215.51 1127.35,1215.51 1127.94,1215.51 1128.52,1215.51 1129.11,1215.51 1129.7,1215.51 1130.28,1215.51 1130.87,1215.51 1131.46,1215.51 1132.04,1215.51 1132.63,1215.51 1133.21,1215.51 1133.8,1215.51 1134.39,1215.51 1134.97,1215.51 1135.56,1215.51 1136.15,1215.51 1136.73,1215.51 1137.32,1215.51 1137.91,1215.51 1138.49,1215.51 1139.08,1215.51 1139.67,1215.51 1140.25,1215.51 1140.84,1215.51 1141.42,1215.51 1142.01,1215.51 1142.6,1215.51 1143.18,1215.51 1143.77,1215.51 1144.36,1215.51 1144.94,1215.51 1145.53,1215.51 1146.12,1215.51 1146.7,1215.51 1147.29,1215.51 1147.88,1215.51 1148.46,1215.51 1149.05,1215.51 1149.63,1215.51 1150.22,1215.51 1150.81,1215.51 1151.39,1215.51 1151.98,1215.51 1152.57,1215.51 1153.15,1215.51 1153.74,1215.51 1154.33,1215.51 1154.91,1215.51 1155.5,1215.51 1156.09,1215.51 1156.67,1215.51 1157.26,1215.51 1157.84,1215.51 1158.43,1215.51 1159.02,1215.51 1159.6,1215.51 1160.19,1215.51 1160.78,1215.51 1161.36,1215.51 1161.95,1215.51 1162.54,1215.51 1163.12,1215.51 1163.71,1215.51 1164.29,1215.51 1164.88,1215.51 1165.47,1215.51 1166.05,1215.51 1166.64,1215.51 1167.23,1215.51 1167.81,1215.51 1168.4,1215.51 1168.99,1215.51 1169.57,1215.51 1170.16,1215.51 1170.75,1215.51 1171.33,1215.51 1171.92,1215.51 1172.5,1215.51 1173.09,1215.51 1173.68,1215.51 1174.26,1215.51 1174.85,1215.51 1175.44,1215.51 1176.02,1215.51 1176.61,1215.51 1177.2,1215.51 1177.78,1215.51 1178.37,1215.51 1178.96,1215.51 1179.54,1215.51 1180.13,1215.51 1180.71,1215.51 1181.3,1215.51 1181.89,1215.51 1182.47,1215.51 1183.06,1215.51 1183.65,1215.51 1184.23,1215.51 1184.82,1215.51 1185.41,1215.51 1185.99,1215.51 1186.58,1215.51 1187.16,1215.51 1187.75,1215.51 1188.34,1215.51 1188.92,1215.51 1189.51,1215.51 1190.1,1215.51 1190.68,1215.51 1191.27,1215.51 1191.86,1215.51 1192.44,1215.51 1193.03,1215.51 1193.62,1215.51 1194.2,1215.51 1194.79,1215.51 1195.37,1215.51 1195.96,1215.51 1196.55,1215.51 1197.13,1215.51 1197.72,1215.51 1198.31,1215.51 1198.89,1215.51 1199.48,1215.51 1200.07,1215.51 1200.65,1215.51 1201.24,1215.51 1201.83,1215.51 1202.41,1215.51 1203,1215.51 1203.58,1215.51 1204.17,1215.51 1204.76,1215.51 1205.34,1215.51 1205.93,1215.51 1206.52,1215.51 1207.1,1215.51 1207.69,1215.51 1208.28,1215.51 1208.86,1215.51 1209.45,1215.51 1210.03,1215.51 1210.62,1215.51 1211.21,1215.51 1211.79,1215.51 1212.38,1215.51 1212.97,1215.51 1213.55,1215.51 1214.14,1215.51 1214.73,1215.51 1215.31,1215.51 1215.9,1215.51 1216.49,1215.51 1217.07,1215.51 1217.66,1215.51 1218.24,1215.51 1218.83,1215.51 1219.42,1215.51 1220,1215.51 1220.59,1215.51 1221.18,1215.51 1221.76,1215.51 1222.35,1215.51 1222.94,1215.51 1223.52,1215.51 1224.11,1215.51 1224.7,1215.51 1225.28,1215.51 1225.87,1215.51 1226.45,1215.51 1227.04,1215.51 1227.63,1215.51 1228.21,1215.51 1228.8,1215.51 1229.39,1215.51 1229.97,1215.51 1230.56,1215.51 1231.15,1215.51 1231.73,1215.51 1232.32,1215.51 1232.91,1215.51 1233.49,1215.51 1234.08,1215.51 1234.66,1215.51 1235.25,1215.51 1235.84,1215.51 1236.42,1215.51 1237.01,1215.51 1237.6,1215.51 1238.18,1215.51 1238.77,1215.51 1239.36,1215.51 1239.94,1215.51 1240.53,1215.51 1241.11,1215.51 1241.7,1215.51 1242.29,1215.51 1242.87,1215.51 1243.46,1215.51 1244.05,1215.51 1244.63,1215.51 1245.22,1215.51 1245.81,1215.51 1246.39,1215.51 1246.98,1215.51 1247.57,1215.51 1248.15,1215.51 1248.74,1215.51 1249.32,1215.51 1249.91,1215.51 1250.5,1215.51 1251.08,1215.51 1251.67,1215.51 1252.26,1215.51 1252.84,1215.51 1253.43,1215.51 1254.02,1215.51 1254.6,1215.51 1255.19,1215.51 1255.78,1215.51 1256.36,1215.51 1256.95,1215.51 1257.53,1215.51 1258.12,1215.51 1258.71,1215.51 1259.29,1215.51 1259.88,1215.51 1260.47,1215.51 1261.05,1215.51 1261.64,1215.51 1262.23,1215.51 1262.81,1215.51 1263.4,1215.51 1263.98,1215.51 1264.57,1215.51 1265.16,1215.51 1265.74,1215.51 1266.33,1215.51 1266.92,1215.51 1267.5,1215.51 1268.09,1215.51 1268.68,1215.51 1269.26,1215.51 1269.85,1215.51 1270.44,1215.51 1271.02,1215.51 1271.61,1215.51 1272.19,1215.51 1272.78,1215.51 1273.37,1215.51 1273.95,1215.51 1274.54,1215.51 1275.13,1215.51 1275.71,1215.51 1276.3,1215.51 1276.89,1215.51 1277.47,1215.51 1278.06,1215.51 1278.65,1215.51 1279.23,1215.51 1279.82,1215.51 1280.4,1215.51 1280.99,1215.51 1281.58,1215.51 1282.16,1215.51 1282.75,1215.51 1283.34,1215.51 1283.92,1215.51 1284.51,1215.51 1285.1,1215.51 1285.68,1215.51 1286.27,1215.51 1286.86,1215.51 1287.44,1215.51 1288.03,1215.51 1288.61,1215.51 1289.2,1215.51 1289.79,1215.51 1290.37,1215.51 1290.96,1215.51 1291.55,1215.51 1292.13,1215.51 1292.72,1215.51 1293.31,1215.51 1293.89,1215.51 1294.48,1215.51 1295.06,1215.51 1295.65,1215.51 1296.24,1215.51 1296.82,1215.51 1297.41,1215.51 1298,1215.51 1298.58,1215.51 1299.17,1215.51 1299.76,1215.51 1300.34,1215.51 1300.93,1215.51 1301.52,1215.51 1302.1,1215.51 1302.69,1215.51 1303.27,1215.51 1303.86,1215.51 1304.45,1215.51 1305.03,1215.51 1305.62,1215.51 1306.21,1215.51 1306.79,1215.51 1307.38,1215.51 1307.97,1215.51 1308.55,1215.51 1309.14,1215.51 1309.73,1215.51 1310.31,1215.51 1310.9,1215.51 1311.48,1215.51 1312.07,1215.51 1312.66,1215.51 1313.24,1215.51 1313.83,1215.51 1314.42,1215.51 1315,1215.51 1315.59,1215.51 1316.18,1215.51 1316.76,1215.51 1317.35,1215.51 1317.93,1215.51 1318.52,1215.51 1319.11,1215.51 1319.69,1215.51 1320.28,1215.51 1320.87,1215.51 1321.45,1215.51 1322.04,1215.51 1322.63,1215.51 1323.21,1215.51 1323.8,1215.51 1324.39,1215.51 1324.97,1215.51 1325.56,1215.51 1326.14,1215.51 1326.73,1215.51 1327.32,1215.51 1327.9,1215.51 1328.49,1215.51 1329.08,1215.51 1329.66,1215.51 1330.25,1215.51 1330.84,1215.51 1331.42,1215.51 1332.01,1215.51 1332.6,1215.51 1333.18,1215.51 1333.77,1215.51 1334.35,1215.51 1334.94,1215.51 1335.53,1215.51 1336.11,1215.51 1336.7,1215.51 1337.29,1215.51 1337.87,1215.51 1338.46,1215.51 1339.05,1215.51 1339.63,1215.51 1340.22,1215.51 1340.8,1215.51 1341.39,1215.51 1341.98,1215.51 1342.56,1215.51 1343.15,1215.51 1343.74,1215.51 1344.32,1215.51 1344.91,1215.51 1345.5,1215.51 1346.08,1215.51 1346.67,1215.51 1347.26,1215.51 1347.84,1215.51 1348.43,1215.51 1349.01,1215.51 1349.6,1215.51 1350.19,1215.51 1350.77,1215.51 1351.36,1215.51 1351.95,1215.51 1352.53,1215.51 1353.12,1215.51 1353.71,1215.51 1354.29,1215.51 1354.88,1215.51 1355.47,1215.51 1356.05,1215.51 1356.64,1215.51 1357.22,1215.51 1357.81,1215.51 1358.4,1215.51 1358.98,1215.51 1359.57,1215.51 1360.16,1215.51 1360.74,1215.51 1361.33,1215.51 1361.92,1215.51 1362.5,1215.51 1363.09,1215.51 1363.68,1215.51 1364.26,1215.51 1364.85,1215.51 1365.43,1215.51 1366.02,1215.51 1366.61,1215.51 1367.19,1215.51 1367.78,1215.51 1368.37,1215.51 1368.95,1215.51 1369.54,1215.51 1370.13,1215.51 1370.71,1215.51 1371.3,1215.51 1371.88,1215.51 1372.47,1215.51 1373.06,1215.51 1373.64,1215.51 1374.23,1215.51 1374.82,1215.51 1375.4,1215.51 1375.99,1215.51 1376.58,1215.51 1377.16,1215.51 1377.75,1215.51 1378.34,1215.51 1378.92,1215.51 1379.51,1215.51 1380.09,1215.51 1380.68,1215.51 1381.27,1215.51 1381.85,1215.51 1382.44,1215.51 1383.03,1215.51 1383.61,1215.51 1384.2,1215.51 1384.79,1215.51 1385.37,1215.51 1385.96,1215.51 1386.55,1215.51 1387.13,1215.51 1387.72,1215.51 1388.3,1215.51 1388.89,1215.51 1389.48,1215.51 1390.06,1215.51 1390.65,1215.51 1391.24,1215.51 1391.82,1215.51 1392.41,1215.51 1393,1215.51 1393.58,1215.51 1394.17,1215.51 1394.75,1215.51 1395.34,1215.51 1395.93,1215.51 1396.51,1215.51 1397.1,1215.51 1397.69,1215.51 1398.27,1215.51 1398.86,1215.51 1399.45,1215.51 1400.03,1215.51 1400.62,1215.51 1401.21,1215.51 1401.79,1215.51 1402.38,1215.51 1402.96,1215.51 1403.55,1215.51 1404.14,1215.51 1404.72,1215.51 1405.31,1215.51 1405.9,1215.51 1406.48,1215.51 1407.07,1215.51 1407.66,1215.51 1408.24,1215.51 1408.83,1215.51 1409.42,1215.51 1410,1215.51 1410.59,1215.51 1411.17,1215.51 1411.76,1215.51 1412.35,1215.51 1412.93,1215.51 1413.52,1215.51 1414.11,1215.51 1414.69,1215.51 1415.28,1215.51 1415.87,1215.51 1416.45,1215.51 1417.04,1215.51 1417.63,1215.51 1418.21,1215.51 1418.8,1215.51 1419.38,1215.51 1419.97,1215.51 1420.56,1215.51 1421.14,1215.51 1421.73,1215.51 1422.32,1215.51 1422.9,1215.51 1423.49,1215.51 1424.08,1215.51 1424.66,1215.51 1425.25,1215.51 1425.83,1215.51 1426.42,1215.51 1427.01,1215.51 1427.59,1215.51 1428.18,1215.51 1428.77,1215.51 1429.35,1215.51 1429.94,1215.51 1430.53,1215.51 1431.11,1215.51 1431.7,1215.51 1432.29,1215.51 1432.87,1215.51 1433.46,1215.51 1434.04,1215.51 1434.63,1215.51 1435.22,1215.51 1435.8,1215.51 1436.39,1215.51 1436.98,1215.51 1437.56,1215.51 1438.15,1215.51 1438.74,1215.51 1439.32,1215.51 1439.91,1215.51 1440.5,1215.51 1441.08,1215.51 1441.67,1215.51 1442.25,1215.51 1442.84,1215.51 1443.43,1215.51 1444.01,1215.51 1444.6,1215.51 1445.19,1215.51 1445.77,1215.51 1446.36,1215.51 1446.95,1215.51 1447.53,1215.51 1448.12,1215.51 1448.7,1215.51 1449.29,1215.51 1449.88,1215.51 1450.46,1215.51 1451.05,1215.51 1451.64,1215.51 1452.22,1215.51 1452.81,1215.51 1453.4,1215.51 1453.98,1215.51 1454.57,1215.51 1455.16,1215.51 1455.74,1215.51 1456.33,1215.51 1456.91,1215.51 1457.5,1215.51 1458.09,1215.51 1458.67,1215.51 1459.26,1215.51 1459.85,1215.51 1460.43,1215.51 1461.02,1215.51 1461.61,1215.51 1462.19,1215.51 1462.78,1215.51 1463.37,1215.51 1463.95,1215.51 1464.54,1215.51 1465.12,1215.51 1465.71,1215.51 1466.3,1215.51 1466.88,1215.51 1467.47,1215.51 1468.06,1215.51 1468.64,1215.51 1469.23,1215.51 1469.82,1215.51 1470.4,1215.51 1470.99,1215.51 1471.57,1215.51 1472.16,1215.51 1472.75,1215.51 1473.33,1215.51 1473.92,1215.51 1474.51,1215.51 1475.09,1215.51 1475.68,1215.51 1476.27,1215.51 1476.85,1215.51 1477.44,1215.51 1478.03,1215.51 1478.61,1215.51 1479.2,1215.51 1479.78,1215.51 1480.37,1215.51 1480.96,1215.51 1481.54,1215.51 1482.13,1215.51 1482.72,1215.51 1483.3,1215.51 1483.89,1215.51 1484.48,1215.51 1485.06,1215.51 1485.65,1215.51 1486.24,1215.51 1486.82,1215.51 1487.41,1215.51 1487.99,1215.51 1488.58,1215.51 1489.17,1215.51 1489.75,1215.51 1490.34,1215.51 1490.93,1215.51 1491.51,1215.51 1492.1,1215.51 1492.69,1215.51 1493.27,1215.51 1493.86,1215.51 1494.45,1215.51 1495.03,1215.51 1495.62,1215.51 1496.2,1215.51 1496.79,1215.51 1497.38,1215.51 1497.96,1215.51 1498.55,1215.51 1499.14,1215.51 1499.72,1215.51 1500.31,1215.51 1500.9,1215.51 1501.48,1215.51 1502.07,1215.51 1502.65,1215.51 1503.24,1215.51 1503.83,1215.51 1504.41,1215.51 1505,1215.51 1505.59,1215.51 1506.17,1215.51 1506.76,1215.51 1507.35,1215.51 1507.93,1215.51 1508.52,1215.51 1509.11,1215.51 1509.69,1215.51 1510.28,1215.51 1510.86,1215.51 1511.45,1215.51 1512.04,1215.51 1512.62,1215.51 1513.21,1215.51 1513.8,1215.51 1514.38,1215.51 1514.97,1215.51 1515.56,1215.51 1516.14,1215.51 1516.73,1215.51 1517.32,1215.51 1517.9,1215.51 1518.49,1215.51 1519.07,1215.51 1519.66,1215.51 1520.25,1215.51 1520.83,1215.51 1521.42,1215.51 1522.01,1215.51 1522.59,1215.51 1523.18,1215.51 1523.77,1215.51 1524.35,1215.51 1524.94,1215.51 1525.52,1215.51 1526.11,1215.51 1526.7,1215.51 1527.28,1215.51 1527.87,1215.51 1528.46,1215.51 1529.04,1215.51 1529.63,1215.51 1530.22,1215.51 1530.8,1215.51 1531.39,1215.51 1531.98,1215.51 1532.56,1215.51 1533.15,1215.51 1533.73,1215.51 1534.32,1215.51 1534.91,1215.51 1535.49,1215.51 1536.08,1215.51 1536.67,1215.51 1537.25,1215.51 1537.84,1215.51 1538.43,1215.51 1539.01,1215.51 1539.6,1215.51 1540.19,1215.51 1540.77,1215.51 1541.36,1215.51 1541.94,1215.51 1542.53,1215.51 1543.12,1215.51 1543.7,1215.51 1544.29,1215.51 1544.88,1215.51 1545.46,1215.51 1546.05,1215.51 1546.64,1215.51 1547.22,1215.51 1547.81,1215.51 1548.4,1215.51 1548.98,1215.51 1549.57,1215.51 1550.15,1215.51 1550.74,1215.51 1551.33,1215.51 1551.91,1215.51 1552.5,1215.51 1553.09,1215.51 1553.67,1215.51 1554.26,1215.51 1554.85,1215.51 1555.43,1215.51 1556.02,1215.51 1556.6,1215.51 1557.19,1215.51 1557.78,1215.51 1558.36,1215.51 1558.95,1215.51 1559.54,1215.51 1560.12,1215.51 1560.71,1215.51 1561.3,1215.51 1561.88,1215.51 1562.47,1215.51 1563.06,1215.51 1563.64,1215.51 1564.23,1215.51 1564.81,1215.51 1565.4,1215.51 1565.99,1215.51 1566.57,1215.51 1567.16,1215.51 1567.75,1215.51 1568.33,1215.51 1568.92,1215.51 1569.51,1215.51 1570.09,1215.51 1570.68,1215.51 1571.27,1215.51 1571.85,1215.51 1572.44,1215.51 1573.02,1215.51 1573.61,1215.51 1574.2,1215.51 1574.78,1215.51 1575.37,1215.51 1575.96,1215.51 1576.54,1215.51 1577.13,1215.51 1577.72,1215.51 1578.3,1215.51 1578.89,1215.51 1579.47,1215.51 1580.06,1215.51 1580.65,1215.51 1581.23,1215.51 1581.82,1215.51 1582.41,1215.51 1582.99,1215.51 1583.58,1215.51 1584.17,1215.51 1584.75,1215.51 1585.34,1215.51 1585.93,1215.51 1586.51,1215.51 1587.1,1215.51 1587.68,1215.51 1588.27,1215.51 1588.86,1215.51 1589.44,1215.51 1590.03,1215.51 1590.62,1215.51 1591.2,1215.51 1591.79,1215.51 1592.38,1215.51 1592.96,1215.51 1593.55,1215.51 1594.14,1215.51 1594.72,1215.51 1595.31,1215.51 1595.89,1215.51 1596.48,1215.51 1597.07,1215.51 1597.65,1215.51 1598.24,1215.51 1598.83,1215.51 1599.41,1215.51 1600,1215.51 1600.59,1215.51 1601.17,1215.51 1601.76,1215.51 1602.34,1215.51 1602.93,1215.51 1603.52,1215.51 1604.1,1215.51 1604.69,1215.51 1605.28,1215.51 1605.86,1215.51 1606.45,1215.51 1607.04,1215.51 1607.62,1215.51 1608.21,1215.51 1608.8,1215.51 1609.38,1215.51 1609.97,1215.51 1610.55,1215.51 1611.14,1215.51 1611.73,1215.51 1612.31,1215.51 1612.9,1215.51 1613.49,1215.51 1614.07,1215.51 1614.66,1215.51 1615.25,1215.51 1615.83,1215.51 1616.42,1215.51 1617.01,1215.51 1617.59,1215.51 1618.18,1215.51 1618.76,1215.51 1619.35,1215.51 1619.94,1215.51 1620.52,1215.51 1621.11,1215.51 1621.7,1215.51 1622.28,1215.51 1622.87,1215.51 1623.46,1215.51 1624.04,1215.51 1624.63,1215.51 1625.22,1215.51 1625.8,1215.51 1626.39,1215.51 1626.97,1215.51 1627.56,1215.51 1628.15,1215.51 1628.73,1215.51 1629.32,1215.51 1629.91,1215.51 1630.49,1215.51 1631.08,1215.51 1631.67,1215.51 1632.25,1215.51 1632.84,1215.51 1633.42,1215.51 1634.01,1215.51 1634.6,1215.51 1635.18,1215.51 1635.77,1215.51 1636.36,1215.51 1636.94,1215.51 1637.53,1215.51 1638.12,1215.51 1638.7,1215.51 1639.29,1215.51 1639.88,1215.51 1640.46,1215.51 1641.05,1215.51 1641.63,1215.51 1642.22,1215.51 1642.81,1215.51 1643.39,1215.51 1643.98,1215.51 1644.57,1215.51 1645.15,1215.51 1645.74,1215.51 1646.33,1215.51 1646.91,1215.51 1647.5,1215.51 1648.09,1215.51 1648.67,1215.51 1649.26,1215.51 1649.84,1215.51 1650.43,1215.51 1651.02,1215.51 1651.6,1215.51 1652.19,1215.51 1652.78,1215.51 1653.36,1215.51 1653.95,1215.51 1654.54,1215.51 1655.12,1215.51 1655.71,1215.51 1656.29,1215.51 1656.88,1215.51 1657.47,1215.51 1658.05,1215.51 1658.64,1215.51 1659.23,1215.51 1659.81,1215.51 1660.4,1215.51 1660.99,1215.51 1661.57,1215.51 1662.16,1215.51 1662.75,1215.51 1663.33,1215.51 1663.92,1215.51 1664.5,1215.51 1665.09,1215.51 1665.68,1215.51 1666.26,1215.51 1666.85,1215.51 1667.44,1215.51 1668.02,1215.51 1668.61,1215.51 1669.2,1215.51 1669.78,1215.51 1670.37,1215.51 1670.96,1215.51 1671.54,1215.51 1672.13,1215.51 1672.71,1215.51 1673.3,1215.51 1673.89,1215.51 1674.47,1215.51 1675.06,1215.51 1675.65,1215.51 1676.23,1215.51 1676.82,1215.51 1677.41,1215.51 1677.99,1215.51 1678.58,1215.51 1679.17,1215.51 1679.75,1215.51 1680.34,1215.51 1680.92,1215.51 1681.51,1215.51 1682.1,1215.51 1682.68,1215.51 1683.27,1215.51 1683.86,1215.51 1684.44,1215.51 1685.03,1215.51 1685.62,1215.51 1686.2,1215.51 1686.79,1215.51 1687.37,1215.51 1687.96,1215.51 1688.55,1215.51 1689.13,1215.51 1689.72,1215.51 1690.31,1215.51 1690.89,1215.51 1691.48,1215.51 1692.07,1215.51 1692.65,1215.51 1693.24,1215.51 1693.83,1215.51 1694.41,1215.51 1695,1215.51 1695.58,1215.51 1696.17,1215.51 1696.76,1215.51 1697.34,1215.51 1697.93,1215.51 1698.52,1215.51 1699.1,1215.51 1699.69,1215.51 1700.28,1215.51 1700.86,1215.51 1701.45,1215.51 1702.04,1215.51 1702.62,1215.51 1703.21,1215.51 1703.79,1215.51 1704.38,1215.51 1704.97,1215.51 1705.55,1215.51 1706.14,1215.51 1706.73,1215.51 1707.31,1215.51 1707.9,1215.51 1708.49,1215.51 1709.07,1215.51 1709.66,1215.51 1710.24,1215.51 1710.83,1215.51 1711.42,1215.51 1712,1215.51 1712.59,1215.51 1713.18,1215.51 1713.76,1215.51 1714.35,1215.51 1714.94,1215.51 1715.52,1215.51 1716.11,1215.51 1716.7,1215.51 1717.28,1215.51 1717.87,1215.51 1718.45,1215.51 1719.04,1215.51 1719.63,1215.51 1720.21,1215.51 1720.8,1215.51 1721.39,1215.51 1721.97,1215.51 1722.56,1215.51 1723.15,1215.51 1723.73,1215.51 1724.32,1215.51 1724.91,1215.51 1725.49,1215.51 1726.08,1215.51 1726.66,1215.51 1727.25,1215.51 1727.84,1215.51 1728.42,1215.51 1729.01,1215.51 1729.6,1215.51 1730.18,1215.51 1730.77,1215.51 1731.36,1215.51 1731.94,1215.51 1732.53,1215.51 1733.11,1215.51 1733.7,1215.51 1734.29,1215.51 1734.87,1215.51 1735.46,1215.51 1736.05,1215.51 1736.63,1215.51 1737.22,1215.51 1737.81,1215.51 1738.39,1215.51 1738.98,1215.51 1739.57,1215.51 1740.15,1215.51 1740.74,1215.51 1741.32,1215.51 1741.91,1215.51 1742.5,1215.51 1743.08,1215.51 1743.67,1215.51 1744.26,1215.51 1744.84,1215.51 1745.43,1215.51 1746.02,1215.51 1746.6,1215.51 1747.19,1215.51 1747.78,1215.51 1748.36,1215.51 1748.95,1215.51 1749.53,1215.51 1750.12,1215.51 1750.71,1215.51 1751.29,1215.51 1751.88,1215.51 1752.47,1215.51 1753.05,1215.51 1753.64,1215.51 1754.23,1215.51 1754.81,1215.51 1755.4,1215.51 1755.99,1215.51 1756.57,1215.51 1757.16,1215.51 1757.74,1215.51 1758.33,1215.51 1758.92,1215.51 1759.5,1215.51 1760.09,1215.51 1760.68,1215.51 1761.26,1215.51 1761.85,1215.51 1762.44,1215.51 1763.02,1215.51 1763.61,1215.51 1764.19,1215.51 1764.78,1215.51 1765.37,1215.51 1765.95,1215.51 1766.54,1215.51 1767.13,1215.51 1767.71,1215.51 1768.3,1215.51 1768.89,1215.51 1769.47,1215.51 1770.06,1215.51 1770.65,1215.51 1771.23,1215.51 1771.82,1215.51 1772.4,1215.51 1772.99,1215.51 1773.58,1215.51 1774.16,1215.51 1774.75,1215.51 1775.34,1215.51 1775.92,1215.51 1776.51,1215.51 1777.1,1215.51 1777.68,1215.51 1778.27,1215.51 1778.86,1215.51 1779.44,1215.51 1780.03,1215.51 1780.61,1215.51 1781.2,1215.51 1781.79,1215.51 1782.37,1215.51 1782.96,1215.51 1783.55,1215.51 1784.13,1215.51 1784.72,1215.51 1785.31,1215.51 1785.89,1215.51 1786.48,1215.51 1787.06,1215.51 1787.65,1215.51 1788.24,1215.51 1788.82,1215.51 1789.41,1215.51 1790,1215.51 1790.58,1215.51 1791.17,1215.51 1791.76,1215.51 1792.34,1215.51 1792.93,1215.51 1793.52,1215.51 1794.1,1215.51 1794.69,1215.51 1795.27,1215.51 1795.86,1215.51 1796.45,1215.51 1797.03,1215.51 1797.62,1215.51 1798.21,1215.51 1798.79,1215.51 1799.38,1215.51 1799.97,1215.51 1800.55,1215.51 1801.14,1215.51 1801.73,1215.51 1802.31,1215.51 1802.9,1215.51 1803.48,1215.51 1804.07,1215.51 1804.66,1215.51 1805.24,1215.51 1805.83,1215.51 1806.42,1215.51 1807,1215.51 1807.59,1215.51 1808.18,1215.51 1808.76,1215.51 1809.35,1215.51 1809.94,1215.51 1810.52,1215.51 1811.11,1215.51 1811.69,1215.51 1812.28,1215.51 1812.87,1215.51 1813.45,1215.51 1814.04,1215.51 1814.63,1215.51 1815.21,1215.51 1815.8,1215.51 1816.39,1215.51 1816.97,1215.51 1817.56,1215.51 1818.14,1215.51 1818.73,1215.51 1819.32,1215.51 1819.9,1215.51 1820.49,1215.51 1821.08,1215.51 1821.66,1215.51 1822.25,1215.51 1822.84,1215.51 1823.42,1215.51 1824.01,1215.51 1824.6,1215.51 1825.18,1215.51 1825.77,1215.51 1826.35,1215.51 1826.94,1215.51 1827.53,1215.51 1828.11,1215.51 1828.7,1215.51 1829.29,1215.51 1829.87,1215.51 1830.46,1215.51 1831.05,1215.51 1831.63,1215.51 1832.22,1215.51 1832.81,1215.51 1833.39,1215.51 1833.98,1215.51 1834.56,1215.51 1835.15,1215.51 1835.74,1215.51 1836.32,1215.51 1836.91,1215.51 1837.5,1215.51 1838.08,1215.51 1838.67,1215.51 1839.26,1215.51 1839.84,1215.51 1840.43,1215.51 1841.01,1215.51 1841.6,1215.51 1842.19,1215.51 1842.77,1215.51 1843.36,1215.51 1843.95,1215.51 1844.53,1215.51 1845.12,1215.51 1845.71,1215.51 1846.29,1215.51 1846.88,1215.51 1847.47,1215.51 1848.05,1215.51 1848.64,1215.51 1849.22,1215.51 1849.81,1215.51 1850.4,1215.51 1850.98,1215.51 1851.57,1215.51 1852.16,1215.51 1852.74,1215.51 1853.33,1215.51 1853.92,1215.51 1854.5,1215.51 1855.09,1215.51 1855.68,1215.51 1856.26,1215.51 1856.85,1215.51 1857.43,1215.51 1858.02,1215.51 1858.61,1215.51 1859.19,1215.51 1859.78,1215.51 1860.37,1215.51 1860.95,1215.51 1861.54,1215.51 1862.13,1215.51 1862.71,1215.51 1863.3,1215.51 1863.88,1215.51 1864.47,1215.51 1865.06,1215.51 1865.64,1215.51 1866.23,1215.51 1866.82,1215.51 1867.4,1215.51 1867.99,1215.51 1868.58,1215.51 1869.16,1215.51 1869.75,1215.51 1870.34,1215.51 1870.92,1215.51 1871.51,1215.51 1872.09,1215.51 1872.68,1215.51 1873.27,1215.51 1873.85,1215.51 1874.44,1215.51 1875.03,1215.51 1875.61,1215.51 1876.2,1215.51 1876.79,1215.51 1877.37,1215.51 1877.96,1215.51 1878.55,1215.51 1879.13,1215.51 1879.72,1215.51 1880.3,1215.51 1880.89,1215.51 1881.48,1215.51 1882.06,1215.51 1882.65,1215.51 1883.24,1215.51 1883.82,1215.51 1884.41,1215.51 1885,1215.51 1885.58,1215.51 1886.17,1215.51 1886.76,1215.51 1887.34,1215.51 1887.93,1215.51 1888.51,1215.51 1889.1,1215.51 1889.69,1215.51 1890.27,1215.51 1890.86,1215.51 1891.45,1215.51 1892.03,1215.51 1892.62,1215.51 1893.21,1215.51 1893.79,1215.51 1894.38,1215.51 1894.96,1215.51 1895.55,1215.51 1896.14,1215.51 1896.72,1215.51 1897.31,1215.51 1897.9,1215.51 1898.48,1215.51 1899.07,1215.51 1899.66,1215.51 1900.24,1215.51 1900.83,1215.51 1901.42,1215.51 1902,1215.51 1902.59,1215.51 1903.17,1215.51 1903.76,1215.51 1904.35,1215.51 1904.93,1215.51 1905.52,1215.51 1906.11,1215.51 1906.69,1215.51 1907.28,1215.51 1907.87,1215.51 1908.45,1215.51 1909.04,1215.51 1909.63,1215.51 1910.21,1215.51 1910.8,1215.51 1911.38,1215.51 1911.97,1215.51 1912.56,1215.51 1913.14,1215.51 1913.73,1215.51 1914.32,1215.51 1914.9,1215.51 1915.49,1215.51 1916.08,1215.51 1916.66,1215.51 1917.25,1215.51 1917.83,1215.51 1918.42,1215.51 1919.01,1215.51 1919.59,1215.51 1920.18,1215.51 1920.77,1215.51 1921.35,1215.51 1921.94,1215.51 1922.53,1215.51 1923.11,1215.51 1923.7,1215.51 1924.29,1215.51 1924.87,1215.51 1925.46,1215.51 1926.04,1215.51 1926.63,1215.51 1927.22,1215.51 1927.8,1215.51 1928.39,1215.51 1928.98,1215.51 1929.56,1215.51 1930.15,1215.51 1930.74,1215.51 1931.32,1215.51 1931.91,1215.51 1932.5,1215.51 1933.08,1215.51 1933.67,1215.51 1934.25,1215.51 1934.84,1215.51 1935.43,1215.51 1936.01,1215.51 1936.6,1215.51 1937.19,1215.51 1937.77,1215.51 1938.36,1215.51 1938.95,1215.51 1939.53,1215.51 1940.12,1215.51 1940.71,1215.51 1941.29,1215.51 1941.88,1215.51 1942.46,1215.51 1943.05,1215.51 1943.64,1215.51 1944.22,1215.51 1944.81,1215.51 1945.4,1215.51 1945.98,1215.51 1946.57,1215.51 1947.16,1215.51 1947.74,1215.51 1948.33,1215.51 1948.91,1215.51 1949.5,1215.51 1950.09,1215.51 1950.67,1215.51 1951.26,1215.51 1951.85,1215.51 1952.43,1215.51 1953.02,1215.51 1953.61,1215.51 1954.19,1215.51 1954.78,1215.51 1955.37,1215.51 1955.95,1215.51 1956.54,1215.51 1957.12,1215.51 1957.71,1215.51 1958.3,1215.51 1958.88,1215.51 1959.47,1215.51 1960.06,1215.51 1960.64,1215.51 1961.23,1215.51 1961.82,1215.51 1962.4,1215.51 1962.99,1215.51 1963.58,1215.51 1964.16,1215.51 1964.75,1215.51 1965.33,1215.51 1965.92,1215.51 1966.51,1215.51 1967.09,1215.51 1967.68,1215.51 1968.27,1215.51 1968.85,1215.51 1969.44,1215.51 1970.03,1215.51 1970.61,1215.51 1971.2,1215.51 1971.78,1215.51 1972.37,1215.51 1972.96,1215.51 1973.54,1215.51 1974.13,1215.51 1974.72,1215.51 1975.3,1215.51 1975.89,1215.51 1976.48,1215.51 1977.06,1215.51 1977.65,1215.51 1978.24,1215.51 1978.82,1215.51 1979.41,1215.51 1979.99,1215.51 1980.58,1215.51 1981.17,1215.51 1981.75,1215.51 1982.34,1215.51 1982.93,1215.51 1983.51,1215.51 1984.1,1215.51 1984.69,1215.51 1985.27,1215.51 1985.86,1215.51 1986.45,1215.51 1987.03,1215.51 1987.62,1215.51 1988.2,1215.51 1988.79,1215.51 1989.38,1215.51 1989.96,1215.51 1990.55,1215.51 1991.14,1215.51 1991.72,1215.51 1992.31,1215.51 1992.9,1215.51 1993.48,1215.51 1994.07,1215.51 1994.65,1215.51 1995.24,1215.51 1995.83,1215.51 1996.41,1215.51 1997,1215.51 1997.59,1215.51 1998.17,1215.51 1998.76,1215.51 1999.35,1215.51 1999.93,1215.51 2000.52,1215.51 2001.11,1215.51 2001.69,1215.51 2002.28,1215.51 2002.86,1215.51 2003.45,1215.51 2004.04,1215.51 2004.62,1215.51 2005.21,1215.51 2005.8,1215.51 2006.38,1215.51 2006.97,1215.51 2007.56,1215.51 2008.14,1215.51 2008.73,1215.51 2009.32,1215.51 2009.9,1215.51 2010.49,1215.51 2011.07,1215.51 2011.66,1215.51 2012.25,1215.51 2012.83,1215.51 2013.42,1215.51 2014.01,1215.51 2014.59,1215.51 2015.18,1215.51 2015.77,1215.51 2016.35,1215.51 2016.94,1215.51 2017.53,1215.51 2018.11,1215.51 2018.7,1215.51 2019.28,1215.51 2019.87,1215.51 2020.46,1215.51 2021.04,1215.51 2021.63,1215.51 2022.22,1215.51 2022.8,1215.51 2023.39,1215.51 2023.98,1215.51 2024.56,1215.51 2025.15,1215.51 2025.73,1215.51 2026.32,1215.51 2026.91,1215.51 2027.49,1215.51 2028.08,1215.51 2028.67,1215.51 2029.25,1215.51 2029.84,1215.51 2030.43,1215.51 2031.01,1215.51 2031.6,1215.51 2032.19,1215.51 2032.77,1215.51 2033.36,1215.51 2033.94,1215.51 2034.53,1215.51 2035.12,1215.51 2035.7,1215.51 2036.29,1215.51 2036.88,1215.51 2037.46,1215.51 2038.05,1215.51 2038.64,1215.51 2039.22,1215.51 2039.81,1215.51 2040.4,1215.51 2040.98,1215.51 2041.57,1215.51 2042.15,1215.51 2042.74,1215.51 2043.33,1215.51 2043.91,1215.51 2044.5,1215.51 2045.09,1215.51 2045.67,1215.51 2046.26,1215.51 2046.85,1215.51 2047.43,1215.51 2048.02,1215.51 2048.6,1215.51 2049.19,1215.51 2049.78,1215.51 2050.36,1215.51 2050.95,1215.51 2051.54,1215.51 2052.12,1215.51 2052.71,1215.51 2053.3,1215.51 2053.88,1215.51 2054.47,1215.51 2055.06,1215.51 2055.64,1215.51 2056.23,1215.51 2056.81,1215.51 2057.4,1215.51 2057.99,1215.51 2058.57,1215.51 2059.16,1215.51 2059.75,1215.51 2060.33,1215.51 2060.92,1215.51 2061.51,1215.51 2062.09,1215.51 2062.68,1215.51 2063.27,1215.51 2063.85,1215.51 2064.44,1215.51 2065.02,1215.51 2065.61,1215.51 2066.2,1215.51 2066.78,1215.51 2067.37,1215.51 2067.96,1215.51 2068.54,1215.51 2069.13,1215.51 2069.72,1215.51 2070.3,1215.51 2070.89,1215.51 2071.48,1215.51 2072.06,1215.51 2072.65,1215.51 2073.23,1215.51 2073.82,1215.51 2074.41,1215.51 2074.99,1215.51 2075.58,1215.51 2076.17,1215.51 2076.75,1215.51 2077.34,1215.51 2077.93,1215.51 2078.51,1215.51 2079.1,1215.51 2079.68,1215.51 2080.27,1215.51 2080.86,1215.51 2081.44,1215.51 2082.03,1215.51 2082.62,1215.51 2083.2,1215.51 2083.79,1215.51 2084.38,1215.51 2084.96,1215.51 2085.55,1215.51 2086.14,1215.51 2086.72,1215.51 2087.31,1215.51 2087.89,1215.51 2088.48,1215.51 2089.07,1215.51 2089.65,1215.51 2090.24,1215.51 2090.83,1215.51 2091.41,1215.51 2092,1215.51 2092.59,1215.51 2093.17,1215.51 2093.76,1215.51 2094.35,1215.51 2094.93,1215.51 2095.52,1215.51 2096.1,1215.51 2096.69,1215.51 2097.28,1215.51 2097.86,1215.51 2098.45,1215.51 2099.04,1215.51 2099.62,1215.51 2100.21,1215.51 2100.8,1215.51 2101.38,1215.51 2101.97,1215.51 2102.55,1215.51 2103.14,1215.51 2103.73,1215.51 2104.31,1215.51 2104.9,1215.51 2105.49,1215.51 2106.07,1215.51 2106.66,1215.51 2107.25,1215.51 2107.83,1215.51 2108.42,1215.51 2109.01,1215.51 2109.59,1215.51 2110.18,1215.51 2110.76,1215.51 2111.35,1215.51 2111.94,1215.51 2112.52,1215.51 2113.11,1215.51 2113.7,1215.51 2114.28,1215.51 2114.87,1215.51 2115.46,1215.51 2116.04,1215.51 2116.63,1215.51 2117.22,1215.51 2117.8,1215.51 2118.39,1215.51 2118.97,1215.51 2119.56,1215.51 2120.15,1215.51 2120.73,1215.51 2121.32,1215.51 2121.91,1215.51 2122.49,1215.51 2123.08,1215.51 2123.67,1215.51 2124.25,1215.51 2124.84,1215.51 2125.42,1215.51 2126.01,1215.51 2126.6,1215.51 2127.18,1215.51 2127.77,1215.51 2128.36,1215.51 2128.94,1215.51 2129.53,1215.51 2130.12,1215.51 2130.7,1215.51 2131.29,1215.51 2131.88,1215.51 2132.46,1215.51 2133.05,1215.51 2133.63,1215.51 2134.22,1215.51 2134.81,1215.51 2135.39,1215.51 2135.98,1215.51 2136.57,1215.51 2137.15,1215.51 2137.74,1215.51 2138.33,1215.51 2138.91,1215.51 2139.5,1215.51 2140.09,1215.51 2140.67,1215.51 2141.26,1215.51 2141.84,1215.51 2142.43,1215.51 2143.02,1215.51 2143.6,1215.51 2144.19,1215.51 2144.78,1215.51 2145.36,1215.51 2145.95,1215.51 2146.54,1215.51 2147.12,1215.51 2147.71,1215.51 2148.3,1215.51 2148.88,1215.51 2149.47,1215.51 2150.05,1215.51 2150.64,1215.51 2151.23,1215.51 2151.81,1215.51 2152.4,1215.51 2152.99,1215.51 2153.57,1215.51 2154.16,1215.51 2154.75,1215.51 2155.33,1215.51 2155.92,1215.51 2156.5,1215.51 2157.09,1215.51 2157.68,1215.51 2158.26,1215.51 \"/>\n<polyline clip-path=\"url(#clip152)\" style=\"stroke:#d3d3d3; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"1561.77,1196.87 1398.63,899.083 \"/>\n<polyline clip-path=\"url(#clip152)\" style=\"stroke:#d3d3d3; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"985.439,1233.69 985.439,1196.87 2158.26,1196.87 2158.26,1233.69 985.439,1233.69 \"/>\n<path clip-path=\"url(#clip150)\" d=\"M1564.14 432.752 L2148.88 432.752 L2148.88 225.392 L1564.14 225.392  Z\" fill=\"#ffffff\" fill-rule=\"evenodd\" fill-opacity=\"1\"/>\n<polyline clip-path=\"url(#clip150)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"1564.14,432.752 2148.88,432.752 2148.88,225.392 1564.14,225.392 1564.14,432.752 \"/>\n<polyline clip-path=\"url(#clip150)\" style=\"stroke:#009af9; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"1584.85,277.232 1709.13,277.232 \"/>\n<path clip-path=\"url(#clip150)\" d=\"M1748.27 269.35 L1748.27 273.378 Q1746.46 272.452 1744.52 271.989 Q1742.57 271.526 1740.49 271.526 Q1737.32 271.526 1735.72 272.498 Q1734.15 273.471 1734.15 275.415 Q1734.15 276.896 1735.28 277.753 Q1736.41 278.586 1739.84 279.35 L1741.3 279.674 Q1745.84 280.646 1747.73 282.429 Q1749.66 284.188 1749.66 287.359 Q1749.66 290.97 1746.78 293.077 Q1743.94 295.183 1738.94 295.183 Q1736.85 295.183 1734.59 294.767 Q1732.34 294.373 1729.84 293.563 L1729.84 289.165 Q1732.2 290.392 1734.49 291.017 Q1736.78 291.619 1739.03 291.619 Q1742.04 291.619 1743.66 290.6 Q1745.28 289.558 1745.28 287.683 Q1745.28 285.947 1744.1 285.021 Q1742.94 284.095 1738.98 283.239 L1737.5 282.892 Q1733.54 282.058 1731.78 280.345 Q1730.03 278.609 1730.03 275.6 Q1730.03 271.943 1732.62 269.952 Q1735.21 267.961 1739.98 267.961 Q1742.34 267.961 1744.42 268.309 Q1746.51 268.656 1748.27 269.35 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip150)\" d=\"M1777.99 278.864 L1777.99 294.512 L1773.73 294.512 L1773.73 279.003 Q1773.73 275.322 1772.29 273.494 Q1770.86 271.665 1767.99 271.665 Q1764.54 271.665 1762.55 273.864 Q1760.56 276.063 1760.56 279.859 L1760.56 294.512 L1756.28 294.512 L1756.28 258.494 L1760.56 258.494 L1760.56 272.614 Q1762.09 270.276 1764.15 269.119 Q1766.23 267.961 1768.94 267.961 Q1773.4 267.961 1775.7 270.739 Q1777.99 273.494 1777.99 278.864 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip150)\" d=\"M1786.48 268.586 L1790.74 268.586 L1790.74 294.512 L1786.48 294.512 L1786.48 268.586 M1786.48 258.494 L1790.74 258.494 L1790.74 263.887 L1786.48 263.887 L1786.48 258.494 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip150)\" d=\"M1812.78 258.494 L1812.78 262.035 L1808.71 262.035 Q1806.41 262.035 1805.51 262.961 Q1804.63 263.887 1804.63 266.295 L1804.63 268.586 L1811.65 268.586 L1811.65 271.896 L1804.63 271.896 L1804.63 294.512 L1800.35 294.512 L1800.35 271.896 L1796.28 271.896 L1796.28 268.586 L1800.35 268.586 L1800.35 266.781 Q1800.35 262.452 1802.36 260.484 Q1804.38 258.494 1808.75 258.494 L1812.78 258.494 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip150)\" d=\"M1819.72 261.225 L1819.72 268.586 L1828.5 268.586 L1828.5 271.896 L1819.72 271.896 L1819.72 285.97 Q1819.72 289.142 1820.58 290.045 Q1821.46 290.947 1824.12 290.947 L1828.5 290.947 L1828.5 294.512 L1824.12 294.512 Q1819.19 294.512 1817.32 292.683 Q1815.44 290.832 1815.44 285.97 L1815.44 271.896 L1812.32 271.896 L1812.32 268.586 L1815.44 268.586 L1815.44 261.225 L1819.72 261.225 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><polyline clip-path=\"url(#clip150)\" style=\"stroke:#e26f46; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"1584.85,329.072 1709.13,329.072 \"/>\n<path clip-path=\"url(#clip150)\" d=\"M1748.27 321.19 L1748.27 325.218 Q1746.46 324.292 1744.52 323.829 Q1742.57 323.366 1740.49 323.366 Q1737.32 323.366 1735.72 324.338 Q1734.15 325.311 1734.15 327.255 Q1734.15 328.736 1735.28 329.593 Q1736.41 330.426 1739.84 331.19 L1741.3 331.514 Q1745.84 332.486 1747.73 334.269 Q1749.66 336.028 1749.66 339.199 Q1749.66 342.81 1746.78 344.917 Q1743.94 347.023 1738.94 347.023 Q1736.85 347.023 1734.59 346.607 Q1732.34 346.213 1729.84 345.403 L1729.84 341.005 Q1732.2 342.232 1734.49 342.857 Q1736.78 343.459 1739.03 343.459 Q1742.04 343.459 1743.66 342.44 Q1745.28 341.398 1745.28 339.523 Q1745.28 337.787 1744.1 336.861 Q1742.94 335.935 1738.98 335.079 L1737.5 334.732 Q1733.54 333.898 1731.78 332.185 Q1730.03 330.449 1730.03 327.44 Q1730.03 323.783 1732.62 321.792 Q1735.21 319.801 1739.98 319.801 Q1742.34 319.801 1744.42 320.149 Q1746.51 320.496 1748.27 321.19 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip150)\" d=\"M1777.99 330.704 L1777.99 346.352 L1773.73 346.352 L1773.73 330.843 Q1773.73 327.162 1772.29 325.334 Q1770.86 323.505 1767.99 323.505 Q1764.54 323.505 1762.55 325.704 Q1760.56 327.903 1760.56 331.699 L1760.56 346.352 L1756.28 346.352 L1756.28 310.334 L1760.56 310.334 L1760.56 324.454 Q1762.09 322.116 1764.15 320.959 Q1766.23 319.801 1768.94 319.801 Q1773.4 319.801 1775.7 322.579 Q1777.99 325.334 1777.99 330.704 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip150)\" d=\"M1786.48 320.426 L1790.74 320.426 L1790.74 346.352 L1786.48 346.352 L1786.48 320.426 M1786.48 310.334 L1790.74 310.334 L1790.74 315.727 L1786.48 315.727 L1786.48 310.334 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip150)\" d=\"M1812.78 310.334 L1812.78 313.875 L1808.71 313.875 Q1806.41 313.875 1805.51 314.801 Q1804.63 315.727 1804.63 318.135 L1804.63 320.426 L1811.65 320.426 L1811.65 323.736 L1804.63 323.736 L1804.63 346.352 L1800.35 346.352 L1800.35 323.736 L1796.28 323.736 L1796.28 320.426 L1800.35 320.426 L1800.35 318.621 Q1800.35 314.292 1802.36 312.324 Q1804.38 310.334 1808.75 310.334 L1812.78 310.334 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip150)\" d=\"M1819.72 313.065 L1819.72 320.426 L1828.5 320.426 L1828.5 323.736 L1819.72 323.736 L1819.72 337.81 Q1819.72 340.982 1820.58 341.885 Q1821.46 342.787 1824.12 342.787 L1828.5 342.787 L1828.5 346.352 L1824.12 346.352 Q1819.19 346.352 1817.32 344.523 Q1815.44 342.672 1815.44 337.81 L1815.44 323.736 L1812.32 323.736 L1812.32 320.426 L1815.44 320.426 L1815.44 313.065 L1819.72 313.065 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip150)\" d=\"M1869.35 325.403 Q1870.95 322.533 1873.17 321.167 Q1875.4 319.801 1878.4 319.801 Q1882.46 319.801 1884.65 322.649 Q1886.85 325.473 1886.85 330.704 L1886.85 346.352 L1882.57 346.352 L1882.57 330.843 Q1882.57 327.116 1881.25 325.311 Q1879.93 323.505 1877.22 323.505 Q1873.91 323.505 1871.99 325.704 Q1870.07 327.903 1870.07 331.699 L1870.07 346.352 L1865.79 346.352 L1865.79 330.843 Q1865.79 327.093 1864.47 325.311 Q1863.15 323.505 1860.4 323.505 Q1857.13 323.505 1855.21 325.727 Q1853.29 327.926 1853.29 331.699 L1853.29 346.352 L1849.01 346.352 L1849.01 320.426 L1853.29 320.426 L1853.29 324.454 Q1854.75 322.07 1856.78 320.936 Q1858.82 319.801 1861.62 319.801 Q1864.45 319.801 1866.41 321.236 Q1868.4 322.672 1869.35 325.403 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip150)\" d=\"M1917.52 332.324 L1917.52 334.408 L1897.94 334.408 Q1898.22 338.806 1900.58 341.121 Q1902.96 343.412 1907.2 343.412 Q1909.65 343.412 1911.95 342.81 Q1914.26 342.209 1916.53 341.005 L1916.53 345.033 Q1914.24 346.005 1911.83 346.514 Q1909.42 347.023 1906.95 347.023 Q1900.74 347.023 1897.11 343.412 Q1893.5 339.801 1893.5 333.644 Q1893.5 327.278 1896.92 323.551 Q1900.37 319.801 1906.21 319.801 Q1911.44 319.801 1914.47 323.181 Q1917.52 326.537 1917.52 332.324 M1913.27 331.074 Q1913.22 327.579 1911.3 325.496 Q1909.4 323.412 1906.25 323.412 Q1902.69 323.412 1900.53 325.426 Q1898.4 327.44 1898.08 331.098 L1913.27 331.074 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip150)\" d=\"M1936.3 333.32 Q1931.14 333.32 1929.14 334.5 Q1927.15 335.681 1927.15 338.528 Q1927.15 340.797 1928.64 342.139 Q1930.14 343.459 1932.71 343.459 Q1936.25 343.459 1938.38 340.959 Q1940.53 338.435 1940.53 334.269 L1940.53 333.32 L1936.3 333.32 M1944.79 331.56 L1944.79 346.352 L1940.53 346.352 L1940.53 342.417 Q1939.08 344.778 1936.9 345.912 Q1934.72 347.023 1931.58 347.023 Q1927.59 347.023 1925.23 344.801 Q1922.89 342.556 1922.89 338.806 Q1922.89 334.431 1925.81 332.209 Q1928.75 329.986 1934.56 329.986 L1940.53 329.986 L1940.53 329.57 Q1940.53 326.63 1938.59 325.033 Q1936.67 323.412 1933.17 323.412 Q1930.95 323.412 1928.84 323.945 Q1926.74 324.477 1924.79 325.542 L1924.79 321.607 Q1927.13 320.704 1929.33 320.264 Q1931.53 319.801 1933.61 319.801 Q1939.24 319.801 1942.02 322.718 Q1944.79 325.635 1944.79 331.56 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip150)\" d=\"M1975.12 330.704 L1975.12 346.352 L1970.86 346.352 L1970.86 330.843 Q1970.86 327.162 1969.42 325.334 Q1967.99 323.505 1965.12 323.505 Q1961.67 323.505 1959.68 325.704 Q1957.69 327.903 1957.69 331.699 L1957.69 346.352 L1953.4 346.352 L1953.4 320.426 L1957.69 320.426 L1957.69 324.454 Q1959.21 322.116 1961.27 320.959 Q1963.36 319.801 1966.07 319.801 Q1970.53 319.801 1972.83 322.579 Q1975.12 325.334 1975.12 330.704 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><polyline clip-path=\"url(#clip150)\" style=\"stroke:#3da44d; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"1584.85,380.912 1709.13,380.912 \"/>\n<path clip-path=\"url(#clip150)\" d=\"M1734.12 394.303 L1734.12 408.053 L1729.84 408.053 L1729.84 372.266 L1734.12 372.266 L1734.12 376.201 Q1735.47 373.887 1737.5 372.776 Q1739.56 371.641 1742.41 371.641 Q1747.13 371.641 1750.07 375.391 Q1753.03 379.141 1753.03 385.252 Q1753.03 391.363 1750.07 395.113 Q1747.13 398.863 1742.41 398.863 Q1739.56 398.863 1737.5 397.752 Q1735.47 396.618 1734.12 394.303 M1748.61 385.252 Q1748.61 380.553 1746.67 377.891 Q1744.75 375.206 1741.37 375.206 Q1737.99 375.206 1736.04 377.891 Q1734.12 380.553 1734.12 385.252 Q1734.12 389.951 1736.04 392.637 Q1737.99 395.299 1741.37 395.299 Q1744.75 395.299 1746.67 392.637 Q1748.61 389.951 1748.61 385.252 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip150)\" d=\"M1775.12 376.248 Q1774.4 375.831 1773.54 375.646 Q1772.71 375.438 1771.69 375.438 Q1768.08 375.438 1766.14 377.799 Q1764.22 380.137 1764.22 384.535 L1764.22 398.192 L1759.93 398.192 L1759.93 372.266 L1764.22 372.266 L1764.22 376.294 Q1765.56 373.933 1767.71 372.799 Q1769.86 371.641 1772.94 371.641 Q1773.38 371.641 1773.91 371.711 Q1774.45 371.757 1775.09 371.873 L1775.12 376.248 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip150)\" d=\"M1788.59 375.252 Q1785.16 375.252 1783.17 377.938 Q1781.18 380.6 1781.18 385.252 Q1781.18 389.905 1783.15 392.59 Q1785.14 395.252 1788.59 395.252 Q1791.99 395.252 1793.98 392.567 Q1795.97 389.882 1795.97 385.252 Q1795.97 380.646 1793.98 377.961 Q1791.99 375.252 1788.59 375.252 M1788.59 371.641 Q1794.15 371.641 1797.32 375.252 Q1800.49 378.863 1800.49 385.252 Q1800.49 391.618 1797.32 395.252 Q1794.15 398.863 1788.59 398.863 Q1783.01 398.863 1779.84 395.252 Q1776.69 391.618 1776.69 385.252 Q1776.69 378.863 1779.84 375.252 Q1783.01 371.641 1788.59 371.641 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip150)\" d=\"M1807.55 372.266 L1811.81 372.266 L1811.81 398.655 Q1811.81 403.609 1809.91 405.831 Q1808.03 408.053 1803.84 408.053 L1802.22 408.053 L1802.22 404.442 L1803.36 404.442 Q1805.79 404.442 1806.67 403.308 Q1807.55 402.197 1807.55 398.655 L1807.55 372.266 M1807.55 362.174 L1811.81 362.174 L1811.81 367.567 L1807.55 367.567 L1807.55 362.174 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip150)\" d=\"M1842.9 384.164 L1842.9 386.248 L1823.31 386.248 Q1823.59 390.646 1825.95 392.961 Q1828.34 395.252 1832.57 395.252 Q1835.03 395.252 1837.32 394.65 Q1839.63 394.049 1841.9 392.845 L1841.9 396.873 Q1839.61 397.845 1837.2 398.354 Q1834.79 398.863 1832.32 398.863 Q1826.11 398.863 1822.48 395.252 Q1818.87 391.641 1818.87 385.484 Q1818.87 379.118 1822.29 375.391 Q1825.74 371.641 1831.58 371.641 Q1836.81 371.641 1839.84 375.021 Q1842.9 378.377 1842.9 384.164 M1838.64 382.914 Q1838.59 379.419 1836.67 377.336 Q1834.77 375.252 1831.62 375.252 Q1828.06 375.252 1825.9 377.266 Q1823.78 379.28 1823.45 382.938 L1838.64 382.914 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip150)\" d=\"M1868.54 373.262 L1868.54 377.243 Q1866.74 376.248 1864.91 375.762 Q1863.1 375.252 1861.25 375.252 Q1857.11 375.252 1854.82 377.891 Q1852.52 380.507 1852.52 385.252 Q1852.52 389.998 1854.82 392.637 Q1857.11 395.252 1861.25 395.252 Q1863.1 395.252 1864.91 394.766 Q1866.74 394.257 1868.54 393.262 L1868.54 397.197 Q1866.76 398.03 1864.84 398.447 Q1862.94 398.863 1860.79 398.863 Q1854.93 398.863 1851.48 395.183 Q1848.03 391.502 1848.03 385.252 Q1848.03 378.91 1851.51 375.276 Q1855 371.641 1861.07 371.641 Q1863.03 371.641 1864.91 372.058 Q1866.78 372.451 1868.54 373.262 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip150)\" d=\"M1880.16 364.905 L1880.16 372.266 L1888.94 372.266 L1888.94 375.576 L1880.16 375.576 L1880.16 389.65 Q1880.16 392.822 1881.02 393.725 Q1881.9 394.627 1884.56 394.627 L1888.94 394.627 L1888.94 398.192 L1884.56 398.192 Q1879.63 398.192 1877.76 396.363 Q1875.88 394.512 1875.88 389.65 L1875.88 375.576 L1872.76 375.576 L1872.76 372.266 L1875.88 372.266 L1875.88 364.905 L1880.16 364.905 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip150)\" d=\"M1916.71 384.164 L1916.71 386.248 L1897.13 386.248 Q1897.41 390.646 1899.77 392.961 Q1902.15 395.252 1906.39 395.252 Q1908.84 395.252 1911.14 394.65 Q1913.45 394.049 1915.72 392.845 L1915.72 396.873 Q1913.43 397.845 1911.02 398.354 Q1908.61 398.863 1906.14 398.863 Q1899.93 398.863 1896.3 395.252 Q1892.69 391.641 1892.69 385.484 Q1892.69 379.118 1896.11 375.391 Q1899.56 371.641 1905.4 371.641 Q1910.63 371.641 1913.66 375.021 Q1916.71 378.377 1916.71 384.164 M1912.46 382.914 Q1912.41 379.419 1910.49 377.336 Q1908.59 375.252 1905.44 375.252 Q1901.88 375.252 1899.72 377.266 Q1897.59 379.28 1897.27 382.938 L1912.46 382.914 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip150)\" d=\"M1940.77 376.201 L1940.77 362.174 L1945.02 362.174 L1945.02 398.192 L1940.77 398.192 L1940.77 394.303 Q1939.42 396.618 1937.36 397.752 Q1935.33 398.863 1932.46 398.863 Q1927.76 398.863 1924.79 395.113 Q1921.85 391.363 1921.85 385.252 Q1921.85 379.141 1924.79 375.391 Q1927.76 371.641 1932.46 371.641 Q1935.33 371.641 1937.36 372.776 Q1939.42 373.887 1940.77 376.201 M1926.25 385.252 Q1926.25 389.951 1928.17 392.637 Q1930.12 395.299 1933.5 395.299 Q1936.88 395.299 1938.82 392.637 Q1940.77 389.951 1940.77 385.252 Q1940.77 380.553 1938.82 377.891 Q1936.88 375.206 1933.5 375.206 Q1930.12 375.206 1928.17 377.891 Q1926.25 380.553 1926.25 385.252 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip150)\" d=\"M1991.04 384.164 L1991.04 386.248 L1971.46 386.248 Q1971.74 390.646 1974.1 392.961 Q1976.48 395.252 1980.72 395.252 Q1983.17 395.252 1985.46 394.65 Q1987.78 394.049 1990.05 392.845 L1990.05 396.873 Q1987.76 397.845 1985.35 398.354 Q1982.94 398.863 1980.46 398.863 Q1974.26 398.863 1970.63 395.252 Q1967.02 391.641 1967.02 385.484 Q1967.02 379.118 1970.44 375.391 Q1973.89 371.641 1979.72 371.641 Q1984.95 371.641 1987.99 375.021 Q1991.04 378.377 1991.04 384.164 M1986.78 382.914 Q1986.74 379.419 1984.82 377.336 Q1982.92 375.252 1979.77 375.252 Q1976.2 375.252 1974.05 377.266 Q1971.92 379.28 1971.6 382.938 L1986.78 382.914 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip150)\" d=\"M2019.58 382.544 L2019.58 398.192 L2015.32 398.192 L2015.32 382.683 Q2015.32 379.002 2013.89 377.174 Q2012.45 375.345 2009.58 375.345 Q2006.14 375.345 2004.14 377.544 Q2002.15 379.743 2002.15 383.539 L2002.15 398.192 L1997.87 398.192 L1997.87 372.266 L2002.15 372.266 L2002.15 376.294 Q2003.68 373.956 2005.74 372.799 Q2007.83 371.641 2010.53 371.641 Q2015 371.641 2017.29 374.419 Q2019.58 377.174 2019.58 382.544 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip150)\" d=\"M2050.26 384.164 L2050.26 386.248 L2030.67 386.248 Q2030.95 390.646 2033.31 392.961 Q2035.7 395.252 2039.93 395.252 Q2042.39 395.252 2044.68 394.65 Q2046.99 394.049 2049.26 392.845 L2049.26 396.873 Q2046.97 397.845 2044.56 398.354 Q2042.15 398.863 2039.68 398.863 Q2033.47 398.863 2029.84 395.252 Q2026.23 391.641 2026.23 385.484 Q2026.23 379.118 2029.65 375.391 Q2033.1 371.641 2038.94 371.641 Q2044.17 371.641 2047.2 375.021 Q2050.26 378.377 2050.26 384.164 M2046 382.914 Q2045.95 379.419 2044.03 377.336 Q2042.13 375.252 2038.98 375.252 Q2035.42 375.252 2033.26 377.266 Q2031.14 379.28 2030.81 382.938 L2046 382.914 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip150)\" d=\"M2072.27 376.248 Q2071.55 375.831 2070.7 375.646 Q2069.86 375.438 2068.84 375.438 Q2065.23 375.438 2063.29 377.799 Q2061.37 380.137 2061.37 384.535 L2061.37 398.192 L2057.08 398.192 L2057.08 372.266 L2061.37 372.266 L2061.37 376.294 Q2062.71 373.933 2064.86 372.799 Q2067.01 371.641 2070.09 371.641 Q2070.53 371.641 2071.07 371.711 Q2071.6 371.757 2072.25 371.873 L2072.27 376.248 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip150)\" d=\"M2092.96 384.928 Q2092.96 380.299 2091.04 377.752 Q2089.14 375.206 2085.69 375.206 Q2082.27 375.206 2080.35 377.752 Q2078.45 380.299 2078.45 384.928 Q2078.45 389.535 2080.35 392.081 Q2082.27 394.627 2085.69 394.627 Q2089.14 394.627 2091.04 392.081 Q2092.96 389.535 2092.96 384.928 M2097.22 394.975 Q2097.22 401.595 2094.28 404.812 Q2091.34 408.053 2085.28 408.053 Q2083.03 408.053 2081.04 407.706 Q2079.05 407.382 2077.18 406.687 L2077.18 402.544 Q2079.05 403.562 2080.88 404.049 Q2082.71 404.535 2084.61 404.535 Q2088.8 404.535 2090.88 402.336 Q2092.96 400.16 2092.96 395.738 L2092.96 393.632 Q2091.64 395.924 2089.58 397.058 Q2087.52 398.192 2084.65 398.192 Q2079.88 398.192 2076.97 394.558 Q2074.05 390.924 2074.05 384.928 Q2074.05 378.91 2076.97 375.276 Q2079.88 371.641 2084.65 371.641 Q2087.52 371.641 2089.58 372.776 Q2091.64 373.91 2092.96 376.201 L2092.96 372.266 L2097.22 372.266 L2097.22 394.975 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip150)\" d=\"M2116.78 400.599 Q2114.98 405.229 2113.26 406.641 Q2111.55 408.053 2108.68 408.053 L2105.28 408.053 L2105.28 404.488 L2107.78 404.488 Q2109.54 404.488 2110.51 403.655 Q2111.48 402.822 2112.66 399.72 L2113.43 397.775 L2102.94 372.266 L2107.45 372.266 L2115.56 392.544 L2123.66 372.266 L2128.17 372.266 L2116.78 400.599 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip150)\" d=\"M719.687 899.083 L1838.19 899.083 L1838.19 462.094 L719.687 462.094  Z\" fill=\"#ffffff\" fill-rule=\"evenodd\" fill-opacity=\"1\"/>\n<defs>\n  <clipPath id=\"clip153\">\n    <rect x=\"719\" y=\"462\" width=\"1120\" height=\"438\"/>\n  </clipPath>\n</defs>\n<polyline clip-path=\"url(#clip153)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:2; stroke-opacity:0.1; fill:none\" points=\"719.687,899.083 719.687,462.094 \"/>\n<polyline clip-path=\"url(#clip153)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:2; stroke-opacity:0.1; fill:none\" points=\"999.313,899.083 999.313,462.094 \"/>\n<polyline clip-path=\"url(#clip153)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:2; stroke-opacity:0.1; fill:none\" points=\"1278.94,899.083 1278.94,462.094 \"/>\n<polyline clip-path=\"url(#clip153)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:2; stroke-opacity:0.1; fill:none\" points=\"1558.56,899.083 1558.56,462.094 \"/>\n<polyline clip-path=\"url(#clip153)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:2; stroke-opacity:0.1; fill:none\" points=\"1838.19,899.083 1838.19,462.094 \"/>\n<polyline clip-path=\"url(#clip150)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"719.687,899.083 1838.19,899.083 \"/>\n<polyline clip-path=\"url(#clip150)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"719.687,899.083 719.687,880.185 \"/>\n<polyline clip-path=\"url(#clip150)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"999.313,899.083 999.313,880.185 \"/>\n<polyline clip-path=\"url(#clip150)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"1278.94,899.083 1278.94,880.185 \"/>\n<polyline clip-path=\"url(#clip150)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"1558.56,899.083 1558.56,880.185 \"/>\n<polyline clip-path=\"url(#clip150)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"1838.19,899.083 1838.19,880.185 \"/>\n<path clip-path=\"url(#clip150)\" d=\"M664.213 957.547 L671.852 957.547 L671.852 931.182 L663.542 932.849 L663.542 928.589 L671.806 926.923 L676.482 926.923 L676.482 957.547 L684.12 957.547 L684.12 961.483 L664.213 961.483 L664.213 957.547 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip150)\" d=\"M703.565 930.001 Q699.954 930.001 698.125 933.566 Q696.319 937.108 696.319 944.237 Q696.319 951.344 698.125 954.909 Q699.954 958.45 703.565 958.45 Q707.199 958.45 709.005 954.909 Q710.833 951.344 710.833 944.237 Q710.833 937.108 709.005 933.566 Q707.199 930.001 703.565 930.001 M703.565 926.298 Q709.375 926.298 712.43 930.904 Q715.509 935.487 715.509 944.237 Q715.509 952.964 712.43 957.571 Q709.375 962.154 703.565 962.154 Q697.755 962.154 694.676 957.571 Q691.62 952.964 691.62 944.237 Q691.62 935.487 694.676 930.904 Q697.755 926.298 703.565 926.298 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip150)\" d=\"M733.727 930.001 Q730.116 930.001 728.287 933.566 Q726.481 937.108 726.481 944.237 Q726.481 951.344 728.287 954.909 Q730.116 958.45 733.727 958.45 Q737.361 958.45 739.166 954.909 Q740.995 951.344 740.995 944.237 Q740.995 937.108 739.166 933.566 Q737.361 930.001 733.727 930.001 M733.727 926.298 Q739.537 926.298 742.592 930.904 Q745.671 935.487 745.671 944.237 Q745.671 952.964 742.592 957.571 Q739.537 962.154 733.727 962.154 Q727.916 962.154 724.838 957.571 Q721.782 952.964 721.782 944.237 Q721.782 935.487 724.838 930.904 Q727.916 926.298 733.727 926.298 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip150)\" d=\"M763.888 930.001 Q760.277 930.001 758.449 933.566 Q756.643 937.108 756.643 944.237 Q756.643 951.344 758.449 954.909 Q760.277 958.45 763.888 958.45 Q767.523 958.45 769.328 954.909 Q771.157 951.344 771.157 944.237 Q771.157 937.108 769.328 933.566 Q767.523 930.001 763.888 930.001 M763.888 926.298 Q769.699 926.298 772.754 930.904 Q775.833 935.487 775.833 944.237 Q775.833 952.964 772.754 957.571 Q769.699 962.154 763.888 962.154 Q758.078 962.154 755 957.571 Q751.944 952.964 751.944 944.237 Q751.944 935.487 755 930.904 Q758.078 926.298 763.888 926.298 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip150)\" d=\"M943.839 957.547 L951.477 957.547 L951.477 931.182 L943.167 932.849 L943.167 928.589 L951.431 926.923 L956.107 926.923 L956.107 957.547 L963.746 957.547 L963.746 961.483 L943.839 961.483 L943.839 957.547 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip150)\" d=\"M973.237 926.923 L991.593 926.923 L991.593 930.858 L977.519 930.858 L977.519 939.33 Q978.538 938.983 979.556 938.821 Q980.575 938.636 981.593 938.636 Q987.38 938.636 990.76 941.807 Q994.139 944.978 994.139 950.395 Q994.139 955.973 990.667 959.075 Q987.195 962.154 980.875 962.154 Q978.7 962.154 976.431 961.784 Q974.186 961.413 971.778 960.672 L971.778 955.973 Q973.862 957.108 976.084 957.663 Q978.306 958.219 980.783 958.219 Q984.788 958.219 987.125 956.112 Q989.463 954.006 989.463 950.395 Q989.463 946.784 987.125 944.677 Q984.788 942.571 980.783 942.571 Q978.908 942.571 977.033 942.987 Q975.181 943.404 973.237 944.284 L973.237 926.923 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip150)\" d=\"M1013.35 930.001 Q1009.74 930.001 1007.91 933.566 Q1006.11 937.108 1006.11 944.237 Q1006.11 951.344 1007.91 954.909 Q1009.74 958.45 1013.35 958.45 Q1016.99 958.45 1018.79 954.909 Q1020.62 951.344 1020.62 944.237 Q1020.62 937.108 1018.79 933.566 Q1016.99 930.001 1013.35 930.001 M1013.35 926.298 Q1019.16 926.298 1022.22 930.904 Q1025.3 935.487 1025.3 944.237 Q1025.3 952.964 1022.22 957.571 Q1019.16 962.154 1013.35 962.154 Q1007.54 962.154 1004.46 957.571 Q1001.41 952.964 1001.41 944.237 Q1001.41 935.487 1004.46 930.904 Q1007.54 926.298 1013.35 926.298 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip150)\" d=\"M1043.51 930.001 Q1039.9 930.001 1038.07 933.566 Q1036.27 937.108 1036.27 944.237 Q1036.27 951.344 1038.07 954.909 Q1039.9 958.45 1043.51 958.45 Q1047.15 958.45 1048.95 954.909 Q1050.78 951.344 1050.78 944.237 Q1050.78 937.108 1048.95 933.566 Q1047.15 930.001 1043.51 930.001 M1043.51 926.298 Q1049.32 926.298 1052.38 930.904 Q1055.46 935.487 1055.46 944.237 Q1055.46 952.964 1052.38 957.571 Q1049.32 962.154 1043.51 962.154 Q1037.7 962.154 1034.63 957.571 Q1031.57 952.964 1031.57 944.237 Q1031.57 935.487 1034.63 930.904 Q1037.7 926.298 1043.51 926.298 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip150)\" d=\"M1227.55 957.547 L1243.87 957.547 L1243.87 961.483 L1221.92 961.483 L1221.92 957.547 Q1224.59 954.793 1229.17 950.163 Q1233.78 945.511 1234.96 944.168 Q1237.2 941.645 1238.08 939.909 Q1238.98 938.149 1238.98 936.46 Q1238.98 933.705 1237.04 931.969 Q1235.12 930.233 1232.02 930.233 Q1229.82 930.233 1227.36 930.997 Q1224.93 931.761 1222.16 933.312 L1222.16 928.589 Q1224.98 927.455 1227.43 926.876 Q1229.89 926.298 1231.92 926.298 Q1237.3 926.298 1240.49 928.983 Q1243.68 931.668 1243.68 936.159 Q1243.68 938.288 1242.87 940.21 Q1242.09 942.108 1239.98 944.7 Q1239.4 945.372 1236.3 948.589 Q1233.2 951.784 1227.55 957.547 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip150)\" d=\"M1263.68 930.001 Q1260.07 930.001 1258.24 933.566 Q1256.44 937.108 1256.44 944.237 Q1256.44 951.344 1258.24 954.909 Q1260.07 958.45 1263.68 958.45 Q1267.32 958.45 1269.12 954.909 Q1270.95 951.344 1270.95 944.237 Q1270.95 937.108 1269.12 933.566 Q1267.32 930.001 1263.68 930.001 M1263.68 926.298 Q1269.49 926.298 1272.55 930.904 Q1275.63 935.487 1275.63 944.237 Q1275.63 952.964 1272.55 957.571 Q1269.49 962.154 1263.68 962.154 Q1257.87 962.154 1254.8 957.571 Q1251.74 952.964 1251.74 944.237 Q1251.74 935.487 1254.8 930.904 Q1257.87 926.298 1263.68 926.298 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip150)\" d=\"M1293.85 930.001 Q1290.23 930.001 1288.41 933.566 Q1286.6 937.108 1286.6 944.237 Q1286.6 951.344 1288.41 954.909 Q1290.23 958.45 1293.85 958.45 Q1297.48 958.45 1299.29 954.909 Q1301.11 951.344 1301.11 944.237 Q1301.11 937.108 1299.29 933.566 Q1297.48 930.001 1293.85 930.001 M1293.85 926.298 Q1299.66 926.298 1302.71 930.904 Q1305.79 935.487 1305.79 944.237 Q1305.79 952.964 1302.71 957.571 Q1299.66 962.154 1293.85 962.154 Q1288.04 962.154 1284.96 957.571 Q1281.9 952.964 1281.9 944.237 Q1281.9 935.487 1284.96 930.904 Q1288.04 926.298 1293.85 926.298 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip150)\" d=\"M1324.01 930.001 Q1320.4 930.001 1318.57 933.566 Q1316.76 937.108 1316.76 944.237 Q1316.76 951.344 1318.57 954.909 Q1320.4 958.45 1324.01 958.45 Q1327.64 958.45 1329.45 954.909 Q1331.28 951.344 1331.28 944.237 Q1331.28 937.108 1329.45 933.566 Q1327.64 930.001 1324.01 930.001 M1324.01 926.298 Q1329.82 926.298 1332.87 930.904 Q1335.95 935.487 1335.95 944.237 Q1335.95 952.964 1332.87 957.571 Q1329.82 962.154 1324.01 962.154 Q1318.2 962.154 1315.12 957.571 Q1312.06 952.964 1312.06 944.237 Q1312.06 935.487 1315.12 930.904 Q1318.2 926.298 1324.01 926.298 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip150)\" d=\"M1507.18 957.547 L1523.49 957.547 L1523.49 961.483 L1501.55 961.483 L1501.55 957.547 Q1504.21 954.793 1508.8 950.163 Q1513.4 945.511 1514.58 944.168 Q1516.83 941.645 1517.71 939.909 Q1518.61 938.149 1518.61 936.46 Q1518.61 933.705 1516.67 931.969 Q1514.74 930.233 1511.64 930.233 Q1509.44 930.233 1506.99 930.997 Q1504.56 931.761 1501.78 933.312 L1501.78 928.589 Q1504.61 927.455 1507.06 926.876 Q1509.51 926.298 1511.55 926.298 Q1516.92 926.298 1520.12 928.983 Q1523.31 931.668 1523.31 936.159 Q1523.31 938.288 1522.5 940.21 Q1521.71 942.108 1519.61 944.7 Q1519.03 945.372 1515.93 948.589 Q1512.82 951.784 1507.18 957.547 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip150)\" d=\"M1533.36 926.923 L1551.71 926.923 L1551.71 930.858 L1537.64 930.858 L1537.64 939.33 Q1538.66 938.983 1539.68 938.821 Q1540.69 938.636 1541.71 938.636 Q1547.5 938.636 1550.88 941.807 Q1554.26 944.978 1554.26 950.395 Q1554.26 955.973 1550.79 959.075 Q1547.31 962.154 1540.99 962.154 Q1538.82 962.154 1536.55 961.784 Q1534.3 961.413 1531.9 960.672 L1531.9 955.973 Q1533.98 957.108 1536.2 957.663 Q1538.43 958.219 1540.9 958.219 Q1544.91 958.219 1547.24 956.112 Q1549.58 954.006 1549.58 950.395 Q1549.58 946.784 1547.24 944.677 Q1544.91 942.571 1540.9 942.571 Q1539.03 942.571 1537.15 942.987 Q1535.3 943.404 1533.36 944.284 L1533.36 926.923 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip150)\" d=\"M1573.47 930.001 Q1569.86 930.001 1568.03 933.566 Q1566.23 937.108 1566.23 944.237 Q1566.23 951.344 1568.03 954.909 Q1569.86 958.45 1573.47 958.45 Q1577.11 958.45 1578.91 954.909 Q1580.74 951.344 1580.74 944.237 Q1580.74 937.108 1578.91 933.566 Q1577.11 930.001 1573.47 930.001 M1573.47 926.298 Q1579.28 926.298 1582.34 930.904 Q1585.42 935.487 1585.42 944.237 Q1585.42 952.964 1582.34 957.571 Q1579.28 962.154 1573.47 962.154 Q1567.66 962.154 1564.58 957.571 Q1561.53 952.964 1561.53 944.237 Q1561.53 935.487 1564.58 930.904 Q1567.66 926.298 1573.47 926.298 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip150)\" d=\"M1603.63 930.001 Q1600.02 930.001 1598.19 933.566 Q1596.39 937.108 1596.39 944.237 Q1596.39 951.344 1598.19 954.909 Q1600.02 958.45 1603.63 958.45 Q1607.27 958.45 1609.07 954.909 Q1610.9 951.344 1610.9 944.237 Q1610.9 937.108 1609.07 933.566 Q1607.27 930.001 1603.63 930.001 M1603.63 926.298 Q1609.44 926.298 1612.5 930.904 Q1615.58 935.487 1615.58 944.237 Q1615.58 952.964 1612.5 957.571 Q1609.44 962.154 1603.63 962.154 Q1597.82 962.154 1594.74 957.571 Q1591.69 952.964 1591.69 944.237 Q1591.69 935.487 1594.74 930.904 Q1597.82 926.298 1603.63 926.298 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip150)\" d=\"M1796.87 942.848 Q1800.23 943.566 1802.1 945.835 Q1804 948.103 1804 951.436 Q1804 956.552 1800.48 959.353 Q1796.96 962.154 1790.48 962.154 Q1788.31 962.154 1785.99 961.714 Q1783.7 961.297 1781.25 960.441 L1781.25 955.927 Q1783.19 957.061 1785.5 957.64 Q1787.82 958.219 1790.34 958.219 Q1794.74 958.219 1797.03 956.483 Q1799.35 954.747 1799.35 951.436 Q1799.35 948.381 1797.19 946.668 Q1795.06 944.932 1791.25 944.932 L1787.22 944.932 L1787.22 941.089 L1791.43 941.089 Q1794.88 941.089 1796.71 939.724 Q1798.54 938.335 1798.54 935.742 Q1798.54 933.08 1796.64 931.668 Q1794.76 930.233 1791.25 930.233 Q1789.32 930.233 1787.13 930.649 Q1784.93 931.066 1782.29 931.946 L1782.29 927.779 Q1784.95 927.038 1787.26 926.668 Q1789.6 926.298 1791.66 926.298 Q1796.99 926.298 1800.09 928.728 Q1803.19 931.136 1803.19 935.256 Q1803.19 938.126 1801.55 940.117 Q1799.9 942.085 1796.87 942.848 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip150)\" d=\"M1822.87 930.001 Q1819.25 930.001 1817.43 933.566 Q1815.62 937.108 1815.62 944.237 Q1815.62 951.344 1817.43 954.909 Q1819.25 958.45 1822.87 958.45 Q1826.5 958.45 1828.31 954.909 Q1830.13 951.344 1830.13 944.237 Q1830.13 937.108 1828.31 933.566 Q1826.5 930.001 1822.87 930.001 M1822.87 926.298 Q1828.68 926.298 1831.73 930.904 Q1834.81 935.487 1834.81 944.237 Q1834.81 952.964 1831.73 957.571 Q1828.68 962.154 1822.87 962.154 Q1817.06 962.154 1813.98 957.571 Q1810.92 952.964 1810.92 944.237 Q1810.92 935.487 1813.98 930.904 Q1817.06 926.298 1822.87 926.298 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip150)\" d=\"M1853.03 930.001 Q1849.42 930.001 1847.59 933.566 Q1845.78 937.108 1845.78 944.237 Q1845.78 951.344 1847.59 954.909 Q1849.42 958.45 1853.03 958.45 Q1856.66 958.45 1858.47 954.909 Q1860.3 951.344 1860.3 944.237 Q1860.3 937.108 1858.47 933.566 Q1856.66 930.001 1853.03 930.001 M1853.03 926.298 Q1858.84 926.298 1861.89 930.904 Q1864.97 935.487 1864.97 944.237 Q1864.97 952.964 1861.89 957.571 Q1858.84 962.154 1853.03 962.154 Q1847.22 962.154 1844.14 957.571 Q1841.08 952.964 1841.08 944.237 Q1841.08 935.487 1844.14 930.904 Q1847.22 926.298 1853.03 926.298 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip150)\" d=\"M1883.19 930.001 Q1879.58 930.001 1877.75 933.566 Q1875.94 937.108 1875.94 944.237 Q1875.94 951.344 1877.75 954.909 Q1879.58 958.45 1883.19 958.45 Q1886.82 958.45 1888.63 954.909 Q1890.46 951.344 1890.46 944.237 Q1890.46 937.108 1888.63 933.566 Q1886.82 930.001 1883.19 930.001 M1883.19 926.298 Q1889 926.298 1892.06 930.904 Q1895.13 935.487 1895.13 944.237 Q1895.13 952.964 1892.06 957.571 Q1889 962.154 1883.19 962.154 Q1877.38 962.154 1874.3 957.571 Q1871.24 952.964 1871.24 944.237 Q1871.24 935.487 1874.3 930.904 Q1877.38 926.298 1883.19 926.298 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><polyline clip-path=\"url(#clip153)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:2; stroke-opacity:0.1; fill:none\" points=\"719.687,879.22 1838.19,879.22 \"/>\n<polyline clip-path=\"url(#clip153)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:2; stroke-opacity:0.1; fill:none\" points=\"719.687,779.904 1838.19,779.904 \"/>\n<polyline clip-path=\"url(#clip153)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:2; stroke-opacity:0.1; fill:none\" points=\"719.687,680.588 1838.19,680.588 \"/>\n<polyline clip-path=\"url(#clip153)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:2; stroke-opacity:0.1; fill:none\" points=\"719.687,581.273 1838.19,581.273 \"/>\n<polyline clip-path=\"url(#clip153)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:2; stroke-opacity:0.1; fill:none\" points=\"719.687,481.957 1838.19,481.957 \"/>\n<polyline clip-path=\"url(#clip150)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"719.687,899.083 719.687,462.094 \"/>\n<polyline clip-path=\"url(#clip150)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"719.687,879.22 738.585,879.22 \"/>\n<polyline clip-path=\"url(#clip150)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"719.687,779.904 738.585,779.904 \"/>\n<polyline clip-path=\"url(#clip150)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"719.687,680.588 738.585,680.588 \"/>\n<polyline clip-path=\"url(#clip150)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"719.687,581.273 738.585,581.273 \"/>\n<polyline clip-path=\"url(#clip150)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"719.687,481.957 738.585,481.957 \"/>\n<path clip-path=\"url(#clip150)\" d=\"M576.743 879.671 L606.419 879.671 L606.419 883.606 L576.743 883.606 L576.743 879.671 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip150)\" d=\"M616.558 861.94 L634.914 861.94 L634.914 865.875 L620.84 865.875 L620.84 874.347 Q621.859 874 622.877 873.838 Q623.896 873.652 624.914 873.652 Q630.702 873.652 634.081 876.824 Q637.461 879.995 637.461 885.412 Q637.461 890.99 633.989 894.092 Q630.516 897.171 624.197 897.171 Q622.021 897.171 619.752 896.8 Q617.507 896.43 615.1 895.689 L615.1 890.99 Q617.183 892.125 619.405 892.68 Q621.627 893.236 624.104 893.236 Q628.109 893.236 630.447 891.129 Q632.785 889.023 632.785 885.412 Q632.785 881.801 630.447 879.694 Q628.109 877.588 624.104 877.588 Q622.229 877.588 620.354 878.004 Q618.502 878.421 616.558 879.301 L616.558 861.94 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip150)\" d=\"M646.674 890.62 L651.558 890.62 L651.558 896.5 L646.674 896.5 L646.674 890.62 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip150)\" d=\"M671.743 865.018 Q668.132 865.018 666.303 868.583 Q664.498 872.125 664.498 879.254 Q664.498 886.361 666.303 889.925 Q668.132 893.467 671.743 893.467 Q675.377 893.467 677.183 889.925 Q679.011 886.361 679.011 879.254 Q679.011 872.125 677.183 868.583 Q675.377 865.018 671.743 865.018 M671.743 861.315 Q677.553 861.315 680.609 865.921 Q683.687 870.504 683.687 879.254 Q683.687 887.981 680.609 892.588 Q677.553 897.171 671.743 897.171 Q665.933 897.171 662.854 892.588 Q659.799 887.981 659.799 879.254 Q659.799 870.504 662.854 865.921 Q665.933 861.315 671.743 861.315 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip150)\" d=\"M577.739 780.355 L607.415 780.355 L607.415 784.291 L577.739 784.291 L577.739 780.355 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip150)\" d=\"M630.354 766.698 L618.549 785.147 L630.354 785.147 L630.354 766.698 M629.127 762.624 L635.007 762.624 L635.007 785.147 L639.938 785.147 L639.938 789.036 L635.007 789.036 L635.007 797.184 L630.354 797.184 L630.354 789.036 L614.753 789.036 L614.753 784.522 L629.127 762.624 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip150)\" d=\"M647.669 791.304 L652.553 791.304 L652.553 797.184 L647.669 797.184 L647.669 791.304 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip150)\" d=\"M662.785 762.624 L681.141 762.624 L681.141 766.559 L667.067 766.559 L667.067 775.031 Q668.086 774.684 669.104 774.522 Q670.123 774.337 671.141 774.337 Q676.928 774.337 680.308 777.508 Q683.687 780.679 683.687 786.096 Q683.687 791.675 680.215 794.777 Q676.743 797.855 670.424 797.855 Q668.248 797.855 665.979 797.485 Q663.734 797.115 661.326 796.374 L661.326 791.675 Q663.41 792.809 665.632 793.365 Q667.854 793.92 670.331 793.92 Q674.336 793.92 676.673 791.814 Q679.011 789.707 679.011 786.096 Q679.011 782.485 676.673 780.379 Q674.336 778.272 670.331 778.272 Q668.456 778.272 666.581 778.689 Q664.729 779.105 662.785 779.985 L662.785 762.624 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip150)\" d=\"M576.743 681.04 L606.419 681.04 L606.419 684.975 L576.743 684.975 L576.743 681.04 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip150)\" d=\"M629.359 667.382 L617.553 685.831 L629.359 685.831 L629.359 667.382 M628.132 663.308 L634.012 663.308 L634.012 685.831 L638.942 685.831 L638.942 689.72 L634.012 689.72 L634.012 697.868 L629.359 697.868 L629.359 689.72 L613.757 689.72 L613.757 685.206 L628.132 663.308 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip150)\" d=\"M646.674 691.989 L651.558 691.989 L651.558 697.868 L646.674 697.868 L646.674 691.989 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip150)\" d=\"M671.743 666.387 Q668.132 666.387 666.303 669.952 Q664.498 673.494 664.498 680.623 Q664.498 687.73 666.303 691.294 Q668.132 694.836 671.743 694.836 Q675.377 694.836 677.183 691.294 Q679.011 687.73 679.011 680.623 Q679.011 673.494 677.183 669.952 Q675.377 666.387 671.743 666.387 M671.743 662.683 Q677.553 662.683 680.609 667.29 Q683.687 671.873 683.687 680.623 Q683.687 689.35 680.609 693.956 Q677.553 698.54 671.743 698.54 Q665.933 698.54 662.854 693.956 Q659.799 689.35 659.799 680.623 Q659.799 671.873 662.854 667.29 Q665.933 662.683 671.743 662.683 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip150)\" d=\"M577.739 581.724 L607.415 581.724 L607.415 585.659 L577.739 585.659 L577.739 581.724 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip150)\" d=\"M631.674 579.919 Q635.03 580.636 636.905 582.905 Q638.803 585.173 638.803 588.507 Q638.803 593.622 635.285 596.423 Q631.766 599.224 625.285 599.224 Q623.109 599.224 620.794 598.784 Q618.502 598.368 616.049 597.511 L616.049 592.997 Q617.993 594.132 620.308 594.71 Q622.623 595.289 625.146 595.289 Q629.544 595.289 631.836 593.553 Q634.151 591.817 634.151 588.507 Q634.151 585.451 631.998 583.738 Q629.868 582.002 626.049 582.002 L622.021 582.002 L622.021 578.159 L626.234 578.159 Q629.683 578.159 631.512 576.794 Q633.34 575.405 633.34 572.812 Q633.34 570.15 631.442 568.738 Q629.567 567.303 626.049 567.303 Q624.127 567.303 621.928 567.72 Q619.729 568.136 617.09 569.016 L617.09 564.849 Q619.752 564.109 622.067 563.738 Q624.405 563.368 626.465 563.368 Q631.789 563.368 634.891 565.798 Q637.993 568.206 637.993 572.326 Q637.993 575.196 636.35 577.187 Q634.706 579.155 631.674 579.919 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip150)\" d=\"M647.669 592.673 L652.553 592.673 L652.553 598.553 L647.669 598.553 L647.669 592.673 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip150)\" d=\"M662.785 563.993 L681.141 563.993 L681.141 567.928 L667.067 567.928 L667.067 576.4 Q668.086 576.053 669.104 575.891 Q670.123 575.706 671.141 575.706 Q676.928 575.706 680.308 578.877 Q683.687 582.048 683.687 587.465 Q683.687 593.044 680.215 596.145 Q676.743 599.224 670.424 599.224 Q668.248 599.224 665.979 598.854 Q663.734 598.483 661.326 597.743 L661.326 593.044 Q663.41 594.178 665.632 594.733 Q667.854 595.289 670.331 595.289 Q674.336 595.289 676.673 593.183 Q679.011 591.076 679.011 587.465 Q679.011 583.854 676.673 581.747 Q674.336 579.641 670.331 579.641 Q668.456 579.641 666.581 580.058 Q664.729 580.474 662.785 581.354 L662.785 563.993 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip150)\" d=\"M576.743 482.409 L606.419 482.409 L606.419 486.344 L576.743 486.344 L576.743 482.409 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip150)\" d=\"M630.678 480.603 Q634.035 481.321 635.91 483.589 Q637.808 485.858 637.808 489.191 Q637.808 494.307 634.289 497.108 Q630.771 499.909 624.29 499.909 Q622.114 499.909 619.799 499.469 Q617.507 499.052 615.053 498.196 L615.053 493.682 Q616.998 494.816 619.313 495.395 Q621.627 495.973 624.151 495.973 Q628.549 495.973 630.84 494.237 Q633.155 492.501 633.155 489.191 Q633.155 486.136 631.002 484.423 Q628.873 482.686 625.053 482.686 L621.026 482.686 L621.026 478.844 L625.239 478.844 Q628.688 478.844 630.516 477.478 Q632.345 476.089 632.345 473.497 Q632.345 470.835 630.447 469.423 Q628.572 467.987 625.053 467.987 Q623.132 467.987 620.933 468.404 Q618.734 468.821 616.095 469.7 L616.095 465.534 Q618.757 464.793 621.072 464.423 Q623.41 464.052 625.47 464.052 Q630.794 464.052 633.896 466.483 Q636.998 468.89 636.998 473.011 Q636.998 475.881 635.354 477.872 Q633.711 479.839 630.678 480.603 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip150)\" d=\"M646.674 493.358 L651.558 493.358 L651.558 499.237 L646.674 499.237 L646.674 493.358 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip150)\" d=\"M671.743 467.756 Q668.132 467.756 666.303 471.321 Q664.498 474.862 664.498 481.992 Q664.498 489.098 666.303 492.663 Q668.132 496.205 671.743 496.205 Q675.377 496.205 677.183 492.663 Q679.011 489.098 679.011 481.992 Q679.011 474.862 677.183 471.321 Q675.377 467.756 671.743 467.756 M671.743 464.052 Q677.553 464.052 680.609 468.659 Q683.687 473.242 683.687 481.992 Q683.687 490.719 680.609 495.325 Q677.553 499.909 671.743 499.909 Q665.933 499.909 662.854 495.325 Q659.799 490.719 659.799 481.992 Q659.799 473.242 662.854 468.659 Q665.933 464.052 671.743 464.052 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><polyline clip-path=\"url(#clip153)\" style=\"stroke:#009af9; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"160.995,-1577.5 161.555,-2922.08 162.114,-1257.9 162.673,-2579.97 163.232,-2517.42 163.792,-3669.3 164.351,-3608.92 164.91,-4618.62 165.469,-4550.09 166.029,-5451.15 166.588,-5368.78 167.147,-6176.94 167.706,-6903.12 168.266,-7577.27 168.825,-7438.15 169.384,-7335 169.943,-7891.18 170.503,-8403.4 171.062,-8876.94 171.621,-9285.74 172.18,-9649.53 172.74,-9968.37 173.299,-10261.3 173.858,-10493.2 174.417,-10705.2 174.977,-10878 175.536,-11019.8 176.095,-11132.5 176.655,-10874.7 177.214,-10626 177.773,-10395 178.332,-10469.7 178.892,-10244.5 179.451,-9549.31 180.01,-9366.82 180.569,-9198.62 181.129,-9236.26 181.688,-9245.35 182.247,-9075.44 182.806,-8726.17 183.366,-8710.91 183.925,-8683.68 184.484,-8649.6 185.043,-8466.46 185.603,-8276.49 186.162,-8204.64 186.721,-8037.23 187.28,-7981 187.84,-7685.65 188.399,-7610.16 188.958,-7532.42 189.517,-7454.32 190.077,-7372.81 190.636,-7198.96 191.195,-7030.26 191.754,-6838.03 192.314,-6663.21 192.873,-6421.31 193.432,-6179.4 193.991,-5952.38 194.551,-5865.38 195.11,-5651.72 195.669,-5502.07 196.228,-5412.67 196.788,-5265.74 197.347,-5113.13 197.906,-4913.34 198.465,-4669.94 199.025,-4534.42 199.584,-4354.87 200.143,-4179.2 200.702,-4009.07 201.262,-3758.36 201.821,-3685.85 202.38,-3572.55 202.939,-3457.64 203.499,-3301.84 204.058,-3123.42 204.617,-3024.07 205.176,-2855.04 205.736,-2727.35 206.295,-2604.93 206.854,-2547.99 207.413,-2457.49 207.973,-2337.93 208.532,-2219.31 209.091,-2009.54 209.65,-1938.11 210.21,-1893.13 210.769,-1847.32 211.328,-1775.08 211.887,-1731.29 212.447,-1659.02 213.006,-1585.47 213.565,-1490.08 214.124,-1449.34 214.684,-1409.56 215.243,-1339.29 215.802,-1297.93 216.361,-1231.04 216.921,-1091.19 217.48,-1054.25 218.039,-1020.55 218.598,-983.762 219.158,-875.638 219.717,-794.192 220.276,-739.099 220.835,-705.648 221.395,-626.812 221.954,-571.528 222.513,-450.639 223.072,-402.075 223.632,-333.69 224.191,-305.347 224.75,-234.169 225.309,-209.626 225.869,-184.543 226.428,-123.191 226.987,-82.4762 227.546,-23.5352 228.106,32.5358 228.665,68.8765 229.224,88.3665 229.783,123.637 230.343,180.368 230.902,212.751 231.461,247.028 232.02,260.355 232.58,334.082 233.139,365.139 233.698,377.101 234.257,442.113 234.817,451.254 235.376,476.936 235.935,483.636 236.494,488.885 237.054,554.241 237.613,599.079 238.172,601.935 238.731,642.008 239.291,661.515 239.85,679.33 240.409,680.541 240.968,718.4 241.528,718.263 242.087,735.313 242.646,749.941 243.205,750.824 243.765,768.893 244.324,766.172 244.883,768.201 245.442,769.137 246.002,769.856 246.561,769.772 247.12,751.274 247.679,749.287 248.239,750.707 248.798,752.842 249.357,777.147 249.916,778.207 250.476,777.548 251.035,799.404 251.594,784.189 252.153,820.504 252.713,804.442 253.272,840.643 253.831,824.986 254.39,845.05 254.95,862.608 255.509,861.761 256.068,915.698 256.627,949.986 257.187,963.573 257.746,956.108 258.305,984.713 258.864,980.483 259.424,974.784 259.983,970.514 260.542,964.613 261.101,963.27 261.661,927.282 262.22,928.434 262.779,908.27 263.338,973.648 263.898,952.096 264.457,982.458 265.016,1013.6 265.575,991.282 266.135,1003 266.694,1013.68 267.253,1022.17 267.812,1048.67 268.372,1039.42 268.931,1014.69 269.49,1009.95 270.049,1006.79 270.609,999.647 271.168,1064.08 271.727,1050.16 272.286,1058.69 272.846,1054.15 273.405,1062.96 273.964,1057.86 274.523,1049.11 275.083,1042.72 275.642,1020.17 276.201,1032.79 276.76,1027.55 277.32,1035.88 277.879,1047.1 278.438,1038.91 278.997,1047.05 279.557,1044.42 280.116,1052.17 280.675,1078.28 281.234,1087.17 281.794,1078.56 282.353,1090.41 282.912,1098.89 283.471,1074.67 284.031,1069.06 284.59,1061.4 285.149,1051.46 285.708,1061.21 286.268,1056.79 286.827,1065.05 287.386,1075.73 287.945,1064.6 288.505,1056.5 289.064,1084.13 289.623,1075.36 290.182,1082.05 290.742,1071.97 291.301,1029.17 291.86,1036.62 292.419,1045.18 292.979,1038.77 293.538,1048.73 294.097,1071.59 294.656,1061.74 295.216,1032.15 295.775,1026.88 296.334,987.455 296.893,1001.85 297.453,995.157 298.012,957.066 298.571,937.251 299.13,967.318 299.69,945.824 300.249,959.067 300.808,1024.8 301.368,1014.87 301.927,1058.63 302.486,1049.63 303.045,989.522 303.605,1001 304.164,995.673 304.723,1006.69 305.282,1002.74 305.842,995.162 306.401,1006.81 306.96,1001.38 307.519,1011.6 308.079,1021.41 308.638,1061.99 309.197,1053.23 309.756,1044.71 310.316,1055.43 310.875,1047.05 311.434,1004.43 311.993,997.92 312.553,1022.31 313.112,1047.41 313.671,1022.79 314.23,1029.66 314.79,1040.28 315.349,1030.31 315.908,1003.33 316.467,1028.96 317.027,1071.25 317.586,1027.8 318.145,1005.22 318.704,963.443 319.264,960.202 319.823,974.209 320.382,1019.32 320.941,1008.7 321.501,1015.68 322.06,987.518 322.619,1042.18 323.178,1046.14 323.738,1049.65 324.297,1035.18 324.856,1009.92 325.415,983.542 325.975,1009.01 326.534,1001.6 327.093,991.07 327.652,983.512 328.212,993.513 328.771,1008.24 329.33,1002.5 329.889,977.381 330.449,971.345 331.008,963.439 331.567,960.203 332.126,971.294 332.686,945.975 333.245,922.433 333.804,914.907 334.363,892.689 334.923,910.749 335.482,888.467 336.041,883.173 336.6,863.577 337.16,843.637 337.719,858.63 338.278,854.392 338.837,838.897 339.397,839.093 339.956,874.537 340.515,854.436 341.074,851.319 341.634,849.311 342.193,880.83 342.752,865.282 343.311,864.578 343.871,846.604 344.43,878.644 344.989,877.458 345.548,909.269 346.108,918.165 346.667,894.869 347.226,890.976 347.785,869.517 348.345,865.85 348.904,878.024 349.463,893.882 350.022,860.822 350.582,859.185 351.141,856.811 351.7,835.47 352.259,848.275 352.819,876.961 353.378,857.353 353.937,840.322 354.496,844.03 355.056,844.638 355.615,823.895 356.174,838.102 356.733,836.822 357.293,833.521 357.852,799.219 358.411,784.62 358.97,804.194 359.53,802.139 360.089,804.109 360.648,807.183 361.207,808.54 361.767,793.396 362.326,806.393 362.885,823.905 363.444,838.051 364.004,801.251 364.563,788.233 365.122,776.2 365.681,744.82 366.241,750.718 366.8,753.47 367.359,788.138 367.918,818.563 368.478,815.046 369.037,818.716 369.596,850.906 370.155,861.657 370.715,857.586 371.274,854.531 371.833,884.016 372.392,882.259 372.952,893.932 373.511,889.391 374.07,919.116 374.629,927.101 375.189,921.457 375.748,929.297 376.307,923.685 376.866,948.814 377.426,909.75 377.985,874.815 378.544,853.822 379.103,815.785 379.663,797.23 380.222,797.118 380.781,814.651 381.34,815.611 381.9,812.705 382.459,827.065 383.018,791.078 383.577,823.05 384.137,870.236 384.696,866.329 385.255,829.94 385.814,826.739 386.374,808.244 386.933,790.028 387.492,791.123 388.051,809.209 388.611,855.391 389.17,881.777 389.729,876.634 390.288,886.33 390.848,883.388 391.407,878.774 391.966,859.285 392.525,856.539 393.085,870.966 393.644,882.736 394.203,876.909 394.762,853.7 395.322,862.949 395.881,876.843 396.44,875.22 396.999,874.835 397.559,852.051 398.118,895.393 398.677,889.19 399.236,930.95 399.796,909.122 400.355,850.8 400.914,875.152 401.473,868.691 402.033,830.504 402.592,828.242 403.151,825.301 403.71,803.245 404.27,802.493 404.829,816.295 405.388,814.149 405.947,812.437 406.507,811.677 407.066,794.175 407.625,775.698 408.184,760.157 408.744,726.992 409.303,727.454 409.862,697.574 410.421,731.29 410.981,750.079 411.54,749.091 412.099,767.125 412.658,765.016 413.218,795.38 413.777,763.195 414.336,743.606 414.895,724.912 415.455,763.449 416.014,778.54 416.573,792.711 417.132,776.265 417.692,778.424 418.251,778.33 418.81,763.627 419.369,745.068 419.929,763.314 420.488,811.766 421.047,842.418 421.606,884.345 422.166,862.322 422.725,838.684 423.284,821.076 423.843,848.605 424.403,828.032 424.962,840.413 425.521,837.396 426.08,798.642 426.64,797.662 427.199,797.614 427.758,743.309 428.318,744.52 428.877,779.808 429.436,793.037 429.995,825.19 430.555,823.718 431.114,836.208 431.673,880.854 432.232,871.06 432.792,832.674 433.351,828.165 433.91,806.15 434.469,834.881 435.029,830.453 435.588,829.985 436.147,825.224 436.706,886.734 437.266,899.308 437.825,914.308 438.384,905.135 438.943,881.795 439.503,861.857 440.062,856.272 440.621,868.786 441.18,878.717 441.74,856.812 442.299,869.489 442.858,863.467 443.417,841.803 443.977,804.212 444.536,819.923 445.095,864.961 445.654,874.26 446.214,869.284 446.773,832.457 447.332,862.64 447.891,837.368 448.451,883.287 449.01,860.912 449.569,854.662 450.128,832.012 450.688,860.253 451.247,819.714 451.806,848.546 452.365,844.083 452.925,819.914 453.484,848.88 454.043,826.159 454.602,822.372 455.162,846.057 455.721,841.34 456.28,849.856 456.839,813.168 457.399,875.472 457.958,852.183 458.517,864.311 459.076,858.475 459.636,818.335 460.195,812.34 460.754,837.92 461.313,785.971 461.873,749.465 462.432,729.768 462.991,714.66 463.55,701.41 464.11,719.718 464.669,724.634 465.228,711.146 465.787,713.627 466.347,746.953 466.906,763.343 467.465,763.903 468.024,791.452 468.584,820.412 469.143,834.657 469.702,829.41 470.261,840.595 470.821,803.531 471.38,817.756 471.939,813.011 472.498,806.65 473.058,817.316 473.617,828.734 474.176,828.288 474.735,793.079 475.295,761.225 475.854,744.868 476.413,741.573 476.972,724.463 477.532,727.98 478.091,740.358 478.65,702.08 479.209,719.091 479.769,721.087 480.328,740.942 480.887,721.893 481.446,723.844 482.006,723.39 482.565,739.486 483.124,708.693 483.683,693.377 484.243,680.147 484.802,734.062 485.361,746.199 485.92,727.11 486.48,712.362 487.039,679.008 487.598,698.748 488.157,687.131 488.717,686.344 489.276,672.996 489.835,691.448 490.394,691.912 490.954,691.324 491.513,693.894 492.072,693.869 492.631,666.755 493.191,699.933 493.75,635.435 494.309,636.829 494.868,643.56 495.428,659.69 495.987,663.556 496.546,652.109 497.105,702.91 497.665,701.738 498.224,736.12 498.783,704.391 499.342,702.24 499.902,719.569 500.461,722.624 501.02,675.524 501.579,693.724 502.139,680.008 502.698,667.962 503.257,669.917 503.816,672.763 504.376,672.608 504.935,693.934 505.494,711.153 506.053,697.316 506.613,680.952 507.172,680.265 507.731,717.473 508.29,671.974 508.85,661.44 509.409,682.963 509.968,717.115 510.527,719.589 511.087,738.37 511.646,786.028 512.205,751.676 512.764,802.365 513.324,767.059 513.883,763.338 514.442,792.369 515.001,821.044 515.561,801.252 516.12,796.586 516.679,762.662 517.238,763.038 517.798,730.394 518.357,749.15 518.916,750.336 519.475,731.909 520.035,713.886 520.594,747.072 521.153,747.304 521.712,761.45 522.272,742.697 522.831,724.324 523.39,725.003 523.949,740.365 524.509,740.645 525.068,721.856 525.627,689.278 526.186,689.388 526.746,709.007 527.305,759.572 527.864,790.156 528.423,803.47 528.983,802.447 529.542,780.561 530.101,796.54 530.66,789.771 531.22,788.506 531.779,768.534 532.338,749.527 532.897,734.976 533.457,701.685 534.016,697.227 534.575,664.292 535.134,668.643 535.694,686.59 536.253,737.929 536.812,754.22 537.371,737.357 537.931,740.068 538.49,722.711 539.049,691.077 539.608,726.191 540.168,727.651 540.727,724.981 541.286,706.13 541.845,673.404 542.405,677.412 542.964,677.332 543.523,727.26 544.082,730.478 544.642,711.291 545.201,744.918 545.76,777.224 546.319,789.31 546.879,802.879 547.438,813.323 547.997,808.88 548.556,772.645 549.116,783.28 549.675,762.198 550.234,776.248 550.793,773.424 551.353,772.029 551.912,769.585 552.471,750.051 553.031,737.107 553.59,751.915 554.149,753.947 554.708,784.591 555.268,801.483 555.827,782.05 556.386,780.034 556.945,773.221 557.505,785.898 558.064,766.87 558.623,765.396 559.182,697.971 559.742,699.306 560.301,714.696 560.86,747.105 561.419,732.423 561.979,719.063 562.538,717.42 563.097,702.13 563.656,651.925 564.216,654.181 564.775,640.159 565.334,627.152 565.893,596.978 566.453,615.408 567.012,620.886 567.571,610.902 568.13,631.237 568.69,617.978 569.249,638.65 569.808,642.368 570.367,632.197 570.927,654.54 571.486,674.633 572.045,658.603 572.604,663.516 573.164,661.64 573.723,684.286 574.282,718.616 574.841,702.015 575.401,704.607 575.96,670.908 576.519,660.872 577.078,678.74 577.638,678.774 578.197,715.909 578.756,733.661 579.315,765.511 579.875,763.969 580.434,760.523 580.993,792.554 581.552,771.645 582.112,767.285 582.671,778.694 583.23,777.945 583.789,775.466 584.349,753.275 584.908,720.108 585.467,687.614 586.026,704.748 586.586,718.091 587.145,717.796 587.704,701.325 588.263,701.637 588.823,649.393 589.382,667.542 589.941,702.858 590.5,703.119 591.06,684.358 591.619,682.392 592.178,668.43 592.737,704.647 593.297,722.92 593.856,720.326 594.415,718.319 594.974,738.96 595.534,751.419 596.093,734.009 596.652,747.189 597.211,763.822 597.771,762.089 598.33,723.055 598.889,722.538 599.448,704.368 600.008,673.88 600.567,676.562 601.126,710.923 601.685,709.207 602.245,690.793 602.804,690.98 603.363,691.674 603.922,696.009 604.482,711.19 605.041,663.019 605.6,664.406 606.159,647.427 606.719,667.894 607.278,657.816 607.837,649.397 608.396,652.858 608.956,687.725 609.515,672.606 610.074,674.15 610.633,677.295 611.193,661.876 611.752,615.789 612.311,620.895 612.87,626.855 613.43,646.357 613.989,651.604 614.548,671.536 615.107,658.229 615.667,675.313 616.226,644.436 616.785,680.366 617.344,678.171 617.904,678.864 618.463,678.144 619.022,713.402 619.581,697.434 620.141,724.811 620.7,722.494 621.259,721.787 621.818,721.795 622.378,669.176 622.937,686.245 623.496,701.768 624.055,713.382 624.615,741.616 625.174,725.662 625.733,722.974 626.292,738.097 626.852,722.452 627.411,655.441 627.97,658.455 628.529,679.053 629.089,698.772 629.648,668.341 630.207,683.518 630.766,666.822 631.326,683.562 631.885,702.102 632.444,702.325 633.003,674.206 633.563,696.572 634.122,694.358 634.681,678.022 635.24,694.858 635.8,692.747 636.359,676.365 636.918,679.082 637.477,665.843 638.037,666.555 638.596,667.787 639.155,685.883 639.714,701.6 640.274,702.551 640.833,715.484 641.392,731.154 641.951,714.218 642.511,713.679 643.07,714.757 643.629,715.775 644.188,731.674 644.748,733.885 645.307,751.276 645.866,732.614 646.425,728.366 646.985,760.015 647.544,772.264 648.103,719.48 648.662,699.2 649.222,684.725 649.781,698.767 650.34,703.654 650.899,706.502 651.459,703.118 652.018,702.955 652.577,701.377 653.136,699.776 653.696,697.571 654.255,695.427 654.814,709.027 655.373,708.832 655.933,707.163 656.492,750.887 657.051,762.377 657.61,772.958 658.17,755.07 658.729,741.52 659.288,739.153 659.847,752.818 660.407,751.033 660.966,760.818 661.525,756.653 662.084,779.41 662.644,772.17 663.203,832.04 663.762,823.401 664.321,848.942 664.881,827.244 665.44,831.884 665.999,835.758 666.558,845.505 667.118,835.732 667.677,828.379 668.236,793.297 668.795,772.875 669.355,753.253 669.914,732.092 670.473,716.778 671.032,747.881 671.592,729.158 672.151,759.697 672.71,738.167 673.269,720.049 673.829,701.339 674.388,714.186 674.947,744.216 675.506,724.982 676.066,744.207 676.625,741.764 677.184,757.104 677.743,719.72 678.303,713.593 678.862,724.902 679.421,721.498 679.981,753.94 680.54,781.992 681.099,762.09 681.658,754.665 682.218,780.564 682.777,806.401 683.336,735.05 683.895,700.035 684.455,729.213 685.014,710.592 685.573,706.237 686.132,719.269 686.692,703.502 687.251,733.916 687.81,729.542 688.369,711.085 688.929,693.913 689.488,676.019 690.047,627.64 690.606,614.178 691.166,584.787 691.725,558.454 692.284,581.936 692.843,587.422 693.403,591.667 693.962,609.36 694.521,645.935 695.08,612.372 695.64,599.909 696.199,620.388 696.758,639.878 697.317,613.75 697.877,614.143 698.436,635.277 698.995,638.291 699.554,639.179 700.114,641.847 700.673,646.207 701.232,631.095 701.791,647.703 702.351,619.986 702.91,642.172 703.469,641.607 704.028,663.262 704.588,696.94 705.147,666.108 705.706,701.774 706.265,686.051 706.825,672.697 707.384,691.96 707.943,706.597 708.502,689.245 709.062,690.703 709.621,677.387 710.18,678.048 710.739,695.063 711.299,677.992 711.858,697.362 712.417,698.159 712.976,698.589 713.536,716.275 714.095,716.495 714.654,652.143 715.213,638.963 715.773,655.146 716.332,642.029 716.891,641.472 717.45,680.949 718.01,679.699 718.569,662.405 719.128,681.114 719.687,695.137 720.247,694.975 720.806,715.384 721.365,714.931 721.924,699.138 722.484,698.349 723.043,683.671 723.602,716.365 724.161,697.993 724.721,715.761 725.28,698.818 725.839,698.432 726.398,718.655 726.958,716.85 727.517,730.461 728.076,743.713 728.635,741.081 729.195,692.512 729.754,708.403 730.313,722.093 730.872,704.508 731.432,721.362 731.991,722.99 732.55,658.21 733.109,676.351 733.669,695.797 734.228,758.873 734.787,756.07 735.346,738.356 735.906,722.268 736.465,718.532 737.024,685.243 737.583,700.313 738.143,684.661 738.702,688.952 739.261,688.658 739.82,673.775 740.38,673.714 740.939,642.826 741.498,646.001 742.057,647.078 742.617,651.445 743.176,634.6 743.735,653.561 744.294,686.456 744.854,690.039 745.413,675.235 745.972,676.782 746.531,693.586 747.091,711.263 747.65,646.131 748.209,634.12 748.768,636.778 749.328,606.693 749.887,626.736 750.446,614.149 751.005,621.089 751.565,638.914 752.124,609.483 752.683,629.22 753.242,650.156 753.802,685.98 754.361,685.48 754.92,701.643 755.479,718.689 756.039,719.494 756.598,717.62 757.157,717.343 757.716,746.994 758.276,730.556 758.835,710.613 759.394,746.1 759.953,759.087 760.513,770.04 761.072,750.315 761.631,763.489 762.19,757.363 762.75,738.132 763.309,815.741 763.868,795.252 764.427,773.055 764.987,735.332 765.546,717.597 766.105,762.088 766.664,760.003 767.224,725.818 767.783,754.412 768.342,702.737 768.901,686.935 769.461,668.647 770.02,668.457 770.579,684.127 771.138,666.791 771.698,686.168 772.257,719.686 772.816,713.625 773.375,700.261 773.935,717.462 774.494,716.58 775.053,684.001 775.612,713.786 776.172,712.996 776.731,692.219 777.29,641.83 777.849,626.361 778.409,613.752 778.968,617.701 779.527,621.491 780.086,624.657 780.646,628.121 781.205,649.037 781.764,638.579 782.323,655.934 782.883,641.41 783.442,644.822 784.001,677.265 784.56,677.286 785.12,676.107 785.679,681.063 786.238,714.323 786.797,731.464 787.357,729.455 787.916,726.849 788.475,707.871 789.034,704.907 789.594,686.655 790.153,702.821 790.712,700.989 791.271,700.628 791.831,700.341 792.39,716.267 792.949,668.654 793.508,687.297 794.068,688.047 794.627,687.56 795.186,722.611 795.745,739.489 796.305,754.815 796.864,751.473 797.423,750.404 797.982,714.986 798.542,729.743 799.101,745.679 799.66,755.784 800.219,722.095 800.779,705.821 801.338,704.829 801.897,718.538 802.456,735.066 803.016,732.272 803.575,731.348 804.134,713.461 804.693,692.014 805.253,659.927 805.812,629.236 806.371,635.306 806.931,621.217 807.49,626.299 808.049,615.664 808.608,601.098 809.168,625.649 809.727,596.969 810.286,620.468 810.845,658.833 811.405,659.385 811.964,660.329 812.523,665.041 813.082,667.354 813.642,651.645 814.201,651.948 814.76,669.282 815.319,672.243 815.879,706.877 816.438,737.82 816.997,717.095 817.556,697.879 818.116,695.801 818.675,708.814 819.234,742.401 819.793,739.581 820.353,767.942 820.912,780.87 821.471,797.02 822.03,808.605 822.59,800.18 823.149,826.004 823.708,850.613 824.267,840.033 824.827,816.824 825.386,794.139 825.945,800.089 826.504,746.227 827.064,727.917 827.623,775.165 828.182,770.318 828.741,713.43 829.301,694.456 829.86,678.288 830.419,690.752 830.978,688.072 831.538,686.6 832.097,688.711 832.656,705.96 833.215,704.982 833.775,735.388 834.334,746.275 834.893,742.418 835.452,754.842 836.012,752.756 836.571,745.214 837.13,741.677 837.689,736.673 838.249,761.033 838.808,740.62 839.367,739.841 839.926,721.861 840.486,718.488 841.045,732.264 841.604,711.442 842.163,710.514 842.723,729.339 843.282,710.702 843.841,696.08 844.4,694.648 844.96,711.931 845.519,677.838 846.078,680.046 846.637,712.082 847.197,712.486 847.756,714.06 848.315,696.835 848.874,681.386 849.434,680.362 849.993,663.102 850.552,682.976 851.111,733.807 851.671,731.354 852.23,697.793 852.789,697.279 853.348,746.751 853.908,726.834 854.467,723.661 855.026,704.992 855.585,719.839 856.145,686.948 856.704,659.5 857.263,662.84 857.822,667.377 858.382,668.664 858.941,669.053 859.5,653.28 860.059,689.448 860.619,674.535 861.178,694.606 861.737,712.802 862.296,644.056 862.856,650.653 863.415,637.109 863.974,652.871 864.533,674.857 865.093,675.442 865.652,725.381 866.211,736.214 866.77,750.347 867.33,745.508 867.889,763.089 868.448,711.142 869.007,710.588 869.567,694.551 870.126,665.008 870.685,699.185 871.244,683.681 871.804,697.684 872.363,665.416 872.922,618.888 873.481,621.158 874.041,625.226 874.6,644.431 875.159,630.734 875.718,635.552 876.278,606.989 876.837,575.774 877.396,584.068 877.955,588.455 878.515,627.242 879.074,630.262 879.633,646.093 880.192,665.222 880.752,682.112 881.311,730.61 881.87,725.864 882.429,705.013 882.989,689.61 883.548,687.21 884.107,672.997 884.666,642.035 885.226,644.428 885.785,666.072 886.344,650.974 886.903,650.817 887.463,671.414 888.022,670.93 888.581,673.939 889.14,669.339 889.7,652.203 890.259,665.973 890.818,714.97 891.377,725.188 891.937,691.161 892.496,690.278 893.055,688.781 893.614,701.63 894.174,713.614 894.733,714.526 895.292,711.947 895.851,725.848 896.411,705.77 896.97,703.015 897.529,749.054 898.088,747.907 898.648,791.217 899.207,799.995 899.766,811.22 900.325,825.395 900.885,801.017 901.444,778.623 902.003,788.447 902.562,767.893 903.122,749.067 903.681,775.529 904.24,788.328 904.799,769.924 905.359,760.681 905.918,743.235 906.477,755.528 907.036,732.633 907.596,728.191 908.155,722.954 908.714,737.275 909.273,755.623 909.833,749.782 910.392,778.634 910.951,724.695 911.51,672.708 912.07,671.76 912.629,673.474 913.188,673.372 913.747,656.275 914.307,641.08 914.866,644.221 915.425,596.3 915.984,567.878 916.544,557.54 917.103,576.32 917.662,547.234 918.221,523.803 918.781,531.016 919.34,552.996 919.899,575.286 920.458,564.896 921.018,606.982 921.577,611.926 922.136,665.746 922.695,669.362 923.255,654.583 923.814,656.933 924.373,674.117 924.932,672.884 925.492,640.523 926.051,658.476 926.61,661.946 927.169,681.173 927.729,648.273 928.288,666.775 928.847,652.957 929.406,670.875 929.966,707.396 930.525,691.705 931.084,689.982 931.644,687.456 932.203,687.557 932.762,687.993 933.321,689.151 933.881,656.037 934.44,659.967 934.999,688.745 935.558,717.047 936.118,726.821 936.677,741.342 937.236,703.353 937.795,717.773 938.355,699.698 938.914,729.436 939.473,740.928 940.032,719.932 940.592,717.074 941.151,661.573 941.71,691.15 942.269,706.41 942.829,707.202 943.388,718.828 943.947,749.153 944.506,731.063 945.066,713.565 945.625,729.594 946.184,726.64 946.743,727.226 947.303,726.698 947.862,753.437 948.421,764.03 948.98,758.463 949.54,737.044 950.099,733.88 950.658,746.283 951.217,744.133 951.777,758.715 952.336,773.663 952.895,736.554 953.454,750.174 954.014,729.549 954.573,727.146 955.132,713.298 955.691,743.22 956.251,755.808 956.81,771.168 957.369,784.201 957.928,796.617 958.488,823.464 959.047,802.833 959.606,795.375 960.165,751.893 960.725,698.805 961.284,665.547 961.843,684.481 962.402,685.805 962.962,652.574 963.521,669.243 964.08,691.185 964.639,677.069 965.199,694.47 965.758,679.894 966.317,650.214 966.876,624.497 967.436,610.542 967.995,647.769 968.554,637.5 969.113,659.314 969.673,679.619 970.232,631.181 970.791,634.873 971.35,637.873 971.91,622.352 972.469,609.081 973.028,616.56 973.587,601.62 974.147,638.87 974.706,642.73 975.265,613.779 975.824,599.107 976.384,604.123 976.943,606.957 977.502,614.031 978.061,614.315 978.621,599.037 979.18,619.372 979.739,643.218 980.298,611.71 980.858,629.679 981.417,649.549 981.976,651.383 982.535,672.795 983.095,674.946 983.654,693.587 984.213,691.745 984.772,692.971 985.332,679.747 985.891,662.115 986.45,647.039 987.009,618.691 987.569,624.626 988.128,625.757 988.687,611.814 989.246,631.149 989.806,640.745 990.365,640.518 990.924,623.587 991.483,627.243 992.043,645.282 992.602,631.443 993.161,601.741 993.72,590.534 994.28,599.049 994.839,606.03 995.398,625.504 995.957,646.765 996.517,649.696 997.076,635.431 997.635,621.936 998.194,675.367 998.754,678.561 999.313,680.413 999.872,732.937 1000.43,728.542 1000.99,696.626 1001.55,727.369 1002.11,723.754 1002.67,735.431 1003.23,732.118 1003.79,714.927 1004.35,712.404 1004.91,678.975 1005.46,710.768 1006.02,722.275 1006.58,737.712 1007.14,683.454 1007.7,683.224 1008.26,634.239 1008.82,638.553 1009.38,640.361 1009.94,636.506 1010.5,623.492 1011.06,578.268 1011.62,583.838 1012.18,572.405 1012.73,580.856 1013.29,586.022 1013.85,638.521 1014.41,639.257 1014.97,623.864 1015.53,658.383 1016.09,694.957 1016.65,694.24 1017.21,679.777 1017.77,663.628 1018.33,681.994 1018.89,698.681 1019.45,698.822 1020.01,747.468 1020.56,744.637 1021.12,742.144 1021.68,740.652 1022.24,751.264 1022.8,780.008 1023.36,773.195 1023.92,769.919 1024.48,746.512 1025.04,695.712 1025.6,679.819 1026.16,678.018 1026.72,643.082 1027.28,630.539 1027.83,616.185 1028.39,601.948 1028.95,561.854 1029.51,550.86 1030.07,558.508 1030.63,580.442 1031.19,569.674 1031.75,609.913 1032.31,601.994 1032.87,607.095 1033.43,609.201 1033.99,615.344 1034.55,669.881 1035.1,656.183 1035.66,626.981 1036.22,630.057 1036.78,602.667 1037.34,590.682 1037.9,597.816 1038.46,588.107 1039.02,614.838 1039.58,618.363 1040.14,641.831 1040.7,629.796 1041.26,650.748 1041.82,650.421 1042.38,670.01 1042.93,688.159 1043.49,671.476 1044.05,640.335 1044.61,624.991 1045.17,639.324 1045.73,640.093 1046.29,674.721 1046.85,657.394 1047.41,642.119 1047.97,661.532 1048.53,646.884 1049.09,668.085 1049.65,670.854 1050.2,639.377 1050.76,661.754 1051.32,663.054 1051.88,662.928 1052.44,663.279 1053,699.164 1053.56,698.074 1054.12,700.624 1054.68,685.374 1055.24,670.285 1055.8,641.769 1056.36,660.118 1056.92,660.272 1057.48,662.899 1058.03,683.244 1058.59,684.84 1059.15,719.104 1059.71,716.931 1060.27,728.14 1060.83,724.851 1061.39,721.763 1061.95,767.729 1062.51,747.694 1063.07,777.757 1063.63,773.032 1064.19,802.063 1064.75,829.427 1065.3,838.945 1065.86,880.069 1066.42,842.939 1066.98,864.898 1067.54,843.783 1068.1,820.172 1068.66,795.597 1069.22,807.301 1069.78,816.571 1070.34,826.126 1070.9,801.877 1071.46,783.88 1072.02,764.109 1072.57,744.417 1073.13,760.193 1073.69,739.787 1074.25,735.336 1074.81,714.805 1075.37,663.262 1075.93,678.773 1076.49,628.775 1077.05,634.406 1077.61,656.924 1078.17,656.949 1078.73,658.601 1079.29,675.821 1079.85,663.186 1080.4,642.463 1080.96,646.133 1081.52,649.536 1082.08,638.142 1082.64,638.495 1083.2,643.152 1083.76,629.294 1084.32,631.221 1084.88,619.248 1085.44,637.618 1086,657.031 1086.56,672.211 1087.12,652.58 1087.67,671.481 1088.23,653.698 1088.79,657.336 1089.35,643.706 1089.91,663.164 1090.47,663.946 1091.03,618.176 1091.59,624.339 1092.15,656.134 1092.71,657.742 1093.27,657.993 1093.83,655.843 1094.39,624.033 1094.94,626.618 1095.5,645.102 1096.06,677.701 1096.62,679.295 1097.18,676.753 1097.74,693.36 1098.3,676.767 1098.86,726.778 1099.42,759.245 1099.98,755.37 1100.54,771.529 1101.1,722.269 1101.66,724.306 1102.22,705.985 1102.77,683.509 1103.33,681.499 1103.89,726.698 1104.45,692.224 1105.01,694.132 1105.57,678.858 1106.13,648.825 1106.69,683.925 1107.25,664.908 1107.81,695.888 1108.37,647.447 1108.93,646.792 1109.49,616.007 1110.04,635.239 1110.6,623.907 1111.16,594.727 1111.72,585.882 1112.28,607.08 1112.84,610.217 1113.4,596.211 1113.96,634.266 1114.52,637.201 1115.08,640.114 1115.64,657.853 1116.2,657.97 1116.76,674.625 1117.31,674.872 1117.87,661.513 1118.43,679.683 1118.99,681.082 1119.55,701.211 1120.11,716.584 1120.67,697.044 1121.23,696.443 1121.79,691.421 1122.35,693.199 1122.91,690.46 1123.47,706.572 1124.03,723.885 1124.59,723.895 1125.14,686.219 1125.7,652.029 1126.26,672.73 1126.82,642.187 1127.38,647.596 1127.94,649.703 1128.5,684.26 1129.06,684.486 1129.62,652.427 1130.18,639.613 1130.74,645.886 1131.3,647.06 1131.86,668.45 1132.41,683.782 1132.97,689.344 1133.53,658.331 1134.09,625.211 1134.65,629.506 1135.21,648.757 1135.77,667.257 1136.33,672.118 1136.89,654.385 1137.45,674.708 1138.01,674.874 1138.57,661.493 1139.13,679.244 1139.68,696.625 1140.24,681.839 1140.8,682.36 1141.36,698.257 1141.92,728.018 1142.48,807.053 1143.04,755.189 1143.6,752.715 1144.16,752.986 1144.72,764.74 1145.28,728.456 1145.84,741.858 1146.4,705.908 1146.96,719.96 1147.51,716.779 1148.07,715.811 1148.63,697.981 1149.19,697.057 1149.75,696.768 1150.31,693.917 1150.87,692.335 1151.43,691.191 1151.99,692.013 1152.55,721.168 1153.11,720.927 1153.67,733.531 1154.23,744.4 1154.78,790.531 1155.34,786.666 1155.9,748.718 1156.46,745.31 1157.02,740.587 1157.58,740.385 1158.14,719.248 1158.7,700.263 1159.26,717.994 1159.82,728.054 1160.38,728.817 1160.94,727.729 1161.5,692.86 1162.05,659.544 1162.61,679.167 1163.17,681.769 1163.73,664.597 1164.29,700.345 1164.85,697.24 1165.41,698.783 1165.97,696.868 1166.53,680.204 1167.09,659.648 1167.65,644.33 1168.21,629.978 1168.77,661.809 1169.33,613.078 1169.88,635.027 1170.44,637.844 1171,623.403 1171.56,639.86 1172.12,612.233 1172.68,616.17 1173.24,682.807 1173.8,647.464 1174.36,665.567 1174.92,650.429 1175.48,665.603 1176.04,617.966 1176.6,603.42 1177.15,623.836 1177.71,608.854 1178.27,639.481 1178.83,622.233 1179.39,643.653 1179.95,632.332 1180.51,653.703 1181.07,641.509 1181.63,645.802 1182.19,632.375 1182.75,619.268 1183.31,628.085 1183.87,601.367 1184.43,589.869 1184.98,593.811 1185.54,616.455 1186.1,638.176 1186.66,639.316 1187.22,642.55 1187.78,674.765 1188.34,692.402 1188.9,674.149 1189.46,703.04 1190.02,704.218 1190.58,702.671 1191.14,718.194 1191.7,733.812 1192.25,715.276 1192.81,748.075 1193.37,747.965 1193.93,730.008 1194.49,743.8 1195.05,741.244 1195.61,708.69 1196.17,725.072 1196.73,708.072 1197.29,676.095 1197.85,710.665 1198.41,726.304 1198.97,724.421 1199.52,738.178 1200.08,752.419 1200.64,731.522 1201.2,745.875 1201.76,726.093 1202.32,690.117 1202.88,734.624 1203.44,718.924 1204,718.419 1204.56,734.236 1205.12,734.05 1205.68,713.421 1206.24,741.273 1206.8,736.458 1207.35,748.387 1207.91,711.198 1208.47,694.361 1209.03,726.67 1209.59,723.112 1210.15,720.571 1210.71,720.172 1211.27,749.514 1211.83,746.728 1212.39,760.407 1212.95,757.051 1213.51,751.477 1214.07,728.791 1214.62,742.381 1215.18,706.644 1215.74,690.98 1216.3,704.819 1216.86,705.267 1217.42,686.656 1217.98,713.479 1218.54,694.14 1219.1,727.664 1219.66,771.544 1220.22,766.065 1220.78,777.918 1221.34,769.524 1221.89,779.89 1222.45,792.485 1223.01,803.149 1223.57,783.423 1224.13,762.642 1224.69,759.135 1225.25,754.634 1225.81,719.426 1226.37,703.232 1226.93,702.504 1227.49,687.462 1228.05,720.172 1228.61,687.198 1229.17,701.919 1229.72,715.307 1230.28,694.221 1230.84,726.594 1231.4,722.858 1231.96,654.594 1232.52,688.855 1233.08,706.262 1233.64,689.316 1234.2,692.025 1234.76,706.221 1235.32,672.058 1235.88,673.519 1236.44,658.131 1236.99,655.965 1237.55,641.784 1238.11,624.822 1238.67,642.144 1239.23,659.587 1239.79,658.283 1240.35,662.04 1240.91,681.036 1241.47,667.912 1242.03,668.911 1242.59,688.513 1243.15,705.211 1243.71,686.857 1244.26,689.328 1244.82,690.728 1245.38,723.487 1245.94,722.251 1246.5,720.757 1247.06,717.976 1247.62,716.71 1248.18,686.816 1248.74,655.754 1249.3,675.044 1249.86,696.46 1250.42,714.642 1250.98,702.009 1251.54,683.673 1252.09,683.393 1252.65,664.446 1253.21,697.615 1253.77,665.595 1254.33,698.293 1254.89,698.602 1255.45,684.151 1256.01,716.955 1256.57,701.346 1257.13,715.872 1257.69,700.166 1258.25,699.23 1258.81,699.11 1259.36,697.844 1259.92,730.419 1260.48,712.044 1261.04,659.755 1261.6,645.064 1262.16,696.977 1262.72,677.678 1263.28,660.965 1263.84,661.121 1264.4,664.213 1264.96,649.689 1265.52,650.455 1266.08,671.011 1266.63,670.718 1267.19,687.789 1267.75,683.061 1268.31,681.76 1268.87,699.603 1269.43,699.268 1269.99,715.005 1270.55,713.262 1271.11,728.48 1271.67,709.943 1272.23,694.693 1272.79,711.402 1273.35,695.776 1273.91,695.903 1274.46,726.752 1275.02,729.073 1275.58,774.97 1276.14,783.408 1276.7,807.024 1277.26,800.888 1277.82,808.824 1278.38,846.936 1278.94,821.572 1279.5,877.006 1280.06,834.036 1280.62,826.944 1281.18,801.438 1281.73,807.896 1282.29,752.774 1282.85,715.455 1283.41,716.361 1283.97,714.911 1284.53,699.279 1285.09,685.261 1285.65,670.982 1286.21,683.281 1286.77,633.739 1287.33,636.485 1287.89,638.235 1288.45,640.113 1289,592.367 1289.56,563.816 1290.12,551.742 1290.68,523.924 1291.24,545.727 1291.8,503.071 1292.36,527.856 1292.92,551.434 1293.48,558.374 1294.04,563.183 1294.6,535.85 1295.16,543.928 1295.72,551.339 1296.28,560.74 1296.83,584.228 1297.39,585.365 1297.95,609.844 1298.51,597.749 1299.07,583.782 1299.63,575.808 1300.19,581.288 1300.75,586.64 1301.31,608.142 1301.87,613.095 1302.43,632.911 1302.99,617.291 1303.55,617.506 1304.1,621.269 1304.66,657.476 1305.22,643.636 1305.78,647.738 1306.34,635.751 1306.9,625.704 1307.46,641.765 1308.02,658.88 1308.58,660.201 1309.14,663.103 1309.7,666.247 1310.26,684.031 1310.82,700.814 1311.38,717.529 1311.93,684.686 1312.49,670.467 1313.05,705.445 1313.61,671.904 1314.17,659.471 1314.73,646.471 1315.29,635.351 1315.85,640.1 1316.41,682.523 1316.97,701.213 1317.53,732.523 1318.09,726.78 1318.65,678.936 1319.2,678.375 1319.76,695.699 1320.32,695.326 1320.88,690.771 1321.44,656.946 1322,660.855 1322.56,645.848 1323.12,647.931 1323.68,650.501 1324.24,667.551 1324.8,651.817 1325.36,621.063 1325.92,640.601 1326.47,672.446 1327.03,691.387 1327.59,692.082 1328.15,741.5 1328.71,738.679 1329.27,750.58 1329.83,762.824 1330.39,742.344 1330.95,739.836 1331.51,686.088 1332.07,637.693 1332.63,638.934 1333.19,622.393 1333.75,645.474 1334.3,630.134 1334.86,632.439 1335.42,619.837 1335.98,624.992 1336.54,645.076 1337.1,661.655 1337.66,679.042 1338.22,661.087 1338.78,660.81 1339.34,696.028 1339.9,728.28 1340.46,727.181 1341.02,739.206 1341.57,704.055 1342.13,716.619 1342.69,716.219 1343.25,715.479 1343.81,666.7 1344.37,669.416 1344.93,670.032 1345.49,653.726 1346.05,653.867 1346.61,674.201 1347.17,656.302 1347.73,705.649 1348.29,686.816 1348.84,671.395 1349.4,689.247 1349.96,719.727 1350.52,715.442 1351.08,696.289 1351.64,680.422 1352.2,679.808 1352.76,678.761 1353.32,677.253 1353.88,691.28 1354.44,691.74 1355,705.012 1355.56,671.506 1356.12,656.279 1356.67,641.352 1357.23,627.217 1357.79,643.715 1358.35,662.592 1358.91,646.094 1359.47,647.338 1360.03,685.501 1360.59,699.689 1361.15,665.714 1361.71,683.842 1362.27,667.675 1362.83,667.866 1363.39,667.66 1363.94,664.403 1364.5,664.522 1365.06,685.323 1365.62,668.258 1366.18,668.318 1366.74,638.888 1367.3,642.645 1367.86,661.753 1368.42,664.302 1368.98,683.15 1369.54,633.172 1370.1,635.65 1370.66,618.85 1371.21,619.801 1371.77,623.025 1372.33,642.299 1372.89,645.803 1373.45,647.659 1374.01,649.545 1374.57,669.116 1375.13,667.741 1375.69,665.842 1376.25,634.836 1376.81,639.007 1377.37,592.131 1377.93,585.216 1378.49,587.101 1379.04,608.275 1379.6,629.228 1380.16,681.699 1380.72,695.306 1381.28,710.404 1381.84,737.268 1382.4,748.857 1382.96,762.641 1383.52,742.828 1384.08,738.898 1384.64,735.926 1385.2,750.165 1385.76,730.891 1386.31,725.15 1386.87,706.607 1387.43,736.695 1387.99,733.197 1388.55,745.034 1389.11,756.232 1389.67,738.336 1390.23,751.796 1390.79,729.666 1391.35,728.524 1391.91,822.494 1392.47,786.35 1393.03,752.244 1393.58,730.536 1394.14,744.86 1394.7,760.287 1395.26,740.503 1395.82,769.336 1396.38,799.456 1396.94,793.937 1397.5,818.97 1398.06,815.181 1398.62,810.199 1399.18,758.957 1399.74,800.764 1400.3,779.982 1400.86,762.782 1401.41,756.125 1401.97,785.755 1402.53,812.959 1403.09,804.698 1403.65,798.303 1404.21,772.268 1404.77,750.519 1405.33,729.593 1405.89,709.396 1406.45,693.856 1407.01,675.347 1407.57,673.835 1408.13,672.227 1408.68,674.613 1409.24,657.074 1409.8,656.268 1410.36,673.839 1410.92,670.793 1411.48,686.257 1412.04,654.633 1412.6,654.646 1413.16,673.409 1413.72,709.796 1414.28,707.511 1414.84,676.271 1415.4,743.013 1415.95,788.647 1416.51,766.054 1417.07,730.701 1417.63,726.499 1418.19,737.343 1418.75,718.303 1419.31,703.146 1419.87,654.427 1420.43,669.4 1420.99,637.19 1421.55,653.433 1422.11,656.683 1422.67,703.416 1423.23,730.812 1423.78,744.518 1424.34,727.512 1424.9,722.669 1425.46,703.622 1426.02,700.283 1426.58,682.286 1427.14,682.544 1427.7,715.427 1428.26,714.822 1428.82,710.797 1429.38,704.744 1429.94,686.581 1430.5,671.37 1431.05,656.631 1431.61,674.097 1432.17,672.337 1432.73,672.153 1433.29,624.55 1433.85,643.712 1434.41,661.709 1434.97,694.014 1435.53,710.175 1436.09,696.27 1436.65,659.554 1437.21,645.935 1437.77,648.778 1438.33,615.141 1438.88,599.999 1439.44,602.342 1440,635.434 1440.56,640.052 1441.12,610.866 1441.68,598.276 1442.24,583.848 1442.8,607.548 1443.36,611.617 1443.92,632.399 1444.48,637.43 1445.04,672.421 1445.6,672.327 1446.15,703.367 1446.71,670.295 1447.27,689.332 1447.83,659.184 1448.39,662.224 1448.95,678.928 1449.51,663.544 1450.07,678.094 1450.63,630.597 1451.19,678.742 1451.75,695.095 1452.31,726.356 1452.87,738.916 1453.42,784.391 1453.98,777.169 1454.54,740.467 1455.1,752.776 1455.66,719.197 1456.22,704.872 1456.78,690.968 1457.34,687.171 1457.9,687.346 1458.46,622.076 1459.02,606.597 1459.58,627.623 1460.14,614.141 1460.7,619.261 1461.25,636.743 1461.81,654.962 1462.37,685.847 1462.93,686.194 1463.49,700.651 1464.05,649.502 1464.61,670.682 1465.17,668.892 1465.73,702.433 1466.29,713.897 1466.85,744.935 1467.41,745.386 1467.97,738.864 1468.52,767.3 1469.08,734.376 1469.64,730.874 1470.2,710.706 1470.76,708.09 1471.32,645.315 1471.88,646.412 1472.44,611.235 1473,599.905 1473.56,589.991 1474.12,612.573 1474.68,602.071 1475.24,555.808 1475.79,612.415 1476.35,631.51 1476.91,649.941 1477.47,686.217 1478.03,686.951 1478.59,689.406 1479.15,687.67 1479.71,672.881 1480.27,674.711 1480.83,657.719 1481.39,659.992 1481.95,678.278 1482.51,696.119 1483.07,679.731 1483.62,680.793 1484.18,627.028 1484.74,628.016 1485.3,613.758 1485.86,632.103 1486.42,637.253 1486.98,641.096 1487.54,628.567 1488.1,647.746 1488.66,631.833 1489.22,635.762 1489.78,638.704 1490.34,625.708 1490.89,628.588 1491.45,612.575 1492.01,602.702 1492.57,621.397 1493.13,625.231 1493.69,597.006 1494.25,636.247 1494.81,656.338 1495.37,640.373 1495.93,590.711 1496.49,611.019 1497.05,664.221 1497.61,711.711 1498.16,743.715 1498.72,737.6 1499.28,753.273 1499.84,749.864 1500.4,748.346 1500.96,746.461 1501.52,762.299 1502.08,726.484 1502.64,723.887 1503.2,720.679 1503.76,720.326 1504.32,732.999 1504.88,695.955 1505.44,696.5 1505.99,728.162 1506.55,740.008 1507.11,750.891 1507.67,762.374 1508.23,758.84 1508.79,769.474 1509.35,743.934 1509.91,758.82 1510.47,786.793 1511.03,782.144 1511.59,795.528 1512.15,741.532 1512.71,740.254 1513.26,737.159 1513.82,702.96 1514.38,699.905 1514.94,684.8 1515.5,684.609 1516.06,621.118 1516.62,636.462 1517.18,623.764 1517.74,641.922 1518.3,646.055 1518.86,649.769 1519.42,654.234 1519.98,637.961 1520.53,609.953 1521.09,664.115 1521.65,662.71 1522.21,649.481 1522.77,650.929 1523.33,702.029 1523.89,682.809 1524.45,651.266 1525.01,655.01 1525.57,659.978 1526.13,664.406 1526.69,684.626 1527.25,699.525 1527.81,682.348 1528.36,680.867 1528.92,666.489 1529.48,683.592 1530.04,664.846 1530.6,681.045 1531.16,710.87 1531.72,705.437 1532.28,689.398 1532.84,685.666 1533.4,669.922 1533.96,672.757 1534.52,655.438 1535.08,655.147 1535.63,704.987 1536.19,686.474 1536.75,670.735 1537.31,638.843 1537.87,657.437 1538.43,623.321 1538.99,629.536 1539.55,616.174 1540.11,604.682 1540.67,574.979 1541.23,596.072 1541.79,602.143 1542.35,610.229 1542.9,615.545 1543.46,654.269 1544.02,626.426 1544.58,646.992 1545.14,630.98 1545.7,616.881 1546.26,634.784 1546.82,637.162 1547.38,658.598 1547.94,659.414 1548.5,677.161 1549.06,661.786 1549.62,649.44 1550.18,714.669 1550.73,715.593 1551.29,712.975 1551.85,730.108 1552.41,728.098 1552.97,713.631 1553.53,715.491 1554.09,712.479 1554.65,712.237 1555.21,661.635 1555.77,678.581 1556.33,679.779 1556.89,680.418 1557.45,664.449 1558,650.859 1558.56,652.237 1559.12,640.843 1559.68,645.096 1560.24,682.034 1560.8,696.256 1561.36,696.323 1561.92,725.965 1562.48,744.252 1563.04,704.369 1563.6,688.261 1564.16,754.406 1564.72,769.461 1565.28,764.638 1565.83,747.573 1566.39,727.177 1566.95,772.766 1567.51,784.934 1568.07,776.369 1568.63,772.413 1569.19,800.971 1569.75,777.36 1570.31,753.327 1570.87,734.193 1571.43,730.875 1571.99,744.306 1572.55,740.129 1573.1,718.16 1573.66,685.451 1574.22,685.534 1574.78,686.862 1575.34,687.172 1575.9,685.069 1576.46,700.353 1577.02,716.919 1577.58,713.983 1578.14,728.481 1578.7,724.101 1579.26,735.738 1579.82,700.538 1580.37,666.323 1580.93,694.835 1581.49,705.434 1582.05,674.05 1582.61,658.271 1583.17,660.279 1583.73,641.188 1584.29,664.408 1584.85,679.13 1585.41,679.789 1585.97,680.82 1586.53,681.815 1587.09,683.045 1587.65,698.519 1588.2,697.837 1588.76,680.446 1589.32,714.825 1589.88,714.544 1590.44,712.392 1591,658.44 1591.56,675.507 1592.12,645.531 1592.68,647.085 1593.24,661.811 1593.8,680.665 1594.36,681.046 1594.92,715.19 1595.47,700.686 1596.03,681.612 1596.59,682.713 1597.15,661.951 1597.71,647.673 1598.27,584.761 1598.83,542.813 1599.39,582.046 1599.95,569.689 1600.51,562.019 1601.07,568.275 1601.63,545.206 1602.19,571.411 1602.74,627.401 1603.3,643.301 1603.86,647.271 1604.42,650.583 1604.98,669.049 1605.54,672.603 1606.1,686.722 1606.66,691.443 1607.22,708.833 1607.78,706.246 1608.34,705.757 1608.9,684.857 1609.46,665.31 1610.02,680.27 1610.57,618.53 1611.13,619.746 1611.69,638.007 1612.25,655.521 1612.81,659.257 1613.37,691.745 1613.93,691.385 1614.49,642.673 1615.05,643.379 1615.61,674.936 1616.17,678.262 1616.73,678.708 1617.29,695.322 1617.84,663.739 1618.4,662.793 1618.96,711.551 1619.52,743.443 1620.08,706.858 1620.64,720.175 1621.2,718.634 1621.76,699.346 1622.32,701.185 1622.88,699.2 1623.44,693.918 1624,674.812 1624.56,690.268 1625.11,675.307 1625.67,674.41 1626.23,673.655 1626.79,689.258 1627.35,676.168 1627.91,710.309 1628.47,728.834 1629.03,727.212 1629.59,718.881 1630.15,703.337 1630.71,704.66 1631.27,691.365 1631.83,674.871 1632.39,676.732 1632.94,691.346 1633.5,706.028 1634.06,686.079 1634.62,667.452 1635.18,667.829 1635.74,684.054 1636.3,683.382 1636.86,652.567 1637.42,670.193 1637.98,625.575 1638.54,626.016 1639.1,562.565 1639.66,567.291 1640.21,558.165 1640.77,581.44 1641.33,604.276 1641.89,626.531 1642.45,631.347 1643.01,665.296 1643.57,671.049 1644.13,672.316 1644.69,702.721 1645.25,721.405 1645.81,719.149 1646.37,713.701 1646.93,714.736 1647.48,699.039 1648.04,730.425 1648.6,745.433 1649.16,693.422 1649.72,689.877 1650.28,655.114 1650.84,656.605 1651.4,643.335 1651.96,676.446 1652.52,661.978 1653.08,678.508 1653.64,711.954 1654.2,708.642 1654.76,690.305 1655.31,657.871 1655.87,659.048 1656.43,663.352 1656.99,646.5 1657.55,649.278 1658.11,667.082 1658.67,632.615 1659.23,650.252 1659.79,653.75 1660.35,656.58 1660.91,641.109 1661.47,660.746 1662.03,675.992 1662.58,707.093 1663.14,706.939 1663.7,688.025 1664.26,706.245 1664.82,652.376 1665.38,650.587 1665.94,638.672 1666.5,606.079 1667.06,625.556 1667.62,630.126 1668.18,663.473 1668.74,665.966 1669.3,649.491 1669.85,667.711 1670.41,652.08 1670.97,642.19 1671.53,610.946 1672.09,597.881 1672.65,585.22 1673.21,621.415 1673.77,637.349 1674.33,625.505 1674.89,612.294 1675.45,585.576 1676.01,605.075 1676.57,614.14 1677.13,619.286 1677.68,657.741 1678.24,692.729 1678.8,694.858 1679.36,665.313 1679.92,651.499 1680.48,636.58 1681.04,620.372 1681.6,621.99 1682.16,628.369 1682.72,630.906 1683.28,632.684 1683.84,631.508 1684.4,637.019 1684.95,625.035 1685.51,659.459 1686.07,658.531 1686.63,622.217 1687.19,637.362 1687.75,657.553 1688.31,674.051 1688.87,692.73 1689.43,690.42 1689.99,687.341 1690.55,685.196 1691.11,684.631 1691.67,701.336 1692.23,682.954 1692.78,682.424 1693.34,732.129 1693.9,745.089 1694.46,725.774 1695.02,686.958 1695.58,705.443 1696.14,701.394 1696.7,732.348 1697.26,697.354 1697.82,728.507 1698.38,726.238 1698.94,709.402 1699.5,727.348 1700.05,708.846 1700.61,706.595 1701.17,690.119 1701.73,755.176 1702.29,752.14 1702.85,749.985 1703.41,697.155 1703.97,651.437 1704.53,686.822 1705.09,683.207 1705.65,666.361 1706.21,688.294 1706.77,688.573 1707.32,672.709 1707.88,659.088 1708.44,611.667 1709,617.861 1709.56,686.09 1710.12,701.679 1710.68,699.953 1711.24,698.021 1711.8,697.837 1712.36,679.246 1712.92,665.915 1713.48,648.603 1714.04,681.693 1714.6,678.194 1715.15,673.824 1715.71,690.039 1716.27,691.983 1716.83,708.286 1717.39,706.691 1717.95,726.466 1718.51,740.241 1719.07,737.885 1719.63,736.455 1720.19,655.978 1720.75,660.901 1721.31,709.88 1721.87,720.745 1722.42,704.414 1722.98,702.914 1723.54,698.756 1724.1,696.645 1724.66,679.602 1725.22,695.068 1725.78,677.224 1726.34,676.685 1726.9,695.42 1727.46,664.689 1728.02,713.897 1728.58,742.287 1729.14,738.448 1729.69,749.61 1730.25,747.649 1730.81,811.9 1731.37,820.768 1731.93,814.199 1732.49,824.799 1733.05,785.273 1733.61,793.777 1734.17,821.345 1734.73,812.15 1735.29,823.392 1735.85,814.937 1736.41,810.066 1736.97,804.149 1737.52,767.603 1738.08,780.796 1738.64,793.552 1739.2,787.948 1739.76,767.055 1740.32,779.744 1740.88,744.338 1741.44,772.419 1742,738.022 1742.56,755.363 1743.12,718.705 1743.68,717.786 1744.24,685.005 1744.79,669.919 1745.35,670.56 1745.91,672.043 1746.47,672.543 1747.03,675.147 1747.59,694.817 1748.15,689.082 1748.71,724.036 1749.27,707.492 1749.83,704.149 1750.39,685.282 1750.95,669.058 1751.51,602.302 1752.06,605.272 1752.62,627.307 1753.18,628.445 1753.74,615.361 1754.3,619.235 1754.86,609.052 1755.42,613.615 1755.98,653.21 1756.54,671.109 1757.1,705.281 1757.66,701.427 1758.22,718.371 1758.78,699.77 1759.34,732.274 1759.89,719.507 1760.45,715.742 1761.01,713.076 1761.57,711.309 1762.13,710.889 1762.69,688.259 1763.25,689.605 1763.81,706.04 1764.37,706.523 1764.93,704.565 1765.49,698.504 1766.05,652.607 1766.61,656.279 1767.16,643.419 1767.72,646.363 1768.28,632.537 1768.84,635.12 1769.4,654.464 1769.96,658.675 1770.52,707.356 1771.08,735.341 1771.64,731.748 1772.2,745.279 1772.76,773.556 1773.32,783.843 1773.88,791.841 1774.43,800.095 1774.99,773.827 1775.55,772.242 1776.11,766.755 1776.67,744.39 1777.23,743.175 1777.79,743.856 1778.35,756.865 1778.91,756.214 1779.47,769.764 1780.03,735.691 1780.59,750.161 1781.15,728.603 1781.71,691.836 1782.26,695.671 1782.82,693.913 1783.38,663.102 1783.94,679.361 1784.5,664.864 1785.06,622.905 1785.62,609.012 1786.18,609.884 1786.74,613.596 1787.3,615.68 1787.86,635.825 1788.42,607.072 1788.98,661.457 1789.53,679.907 1790.09,679.096 1790.65,681.859 1791.21,677.91 1791.77,678.679 1792.33,697.016 1792.89,665.064 1793.45,666.465 1794.01,666.623 1794.57,668.427 1795.13,685.22 1795.69,681.674 1796.25,681.388 1796.8,668.847 1797.36,639.854 1797.92,622.694 1798.48,628.947 1799.04,616.227 1799.6,603.241 1800.16,639.506 1800.72,627.053 1801.28,647.371 1801.84,649.453 1802.4,616.787 1802.96,651.528 1803.52,670.773 1804.08,622.337 1804.63,640.811 1805.19,642.301 1805.75,630.462 1806.31,600.072 1806.87,623.617 1807.43,645.419 1807.99,630.953 1808.55,620.051 1809.11,622.765 1809.67,624.714 1810.23,596.481 1810.79,619.123 1811.35,621.105 1811.9,591.918 1812.46,614.414 1813.02,650.506 1813.58,669.705 1814.14,669.53 1814.7,652.569 1815.26,654.231 1815.82,670.415 1816.38,650.804 1816.94,650.844 1817.5,652.226 1818.06,654.023 1818.62,671.874 1819.18,669.798 1819.73,703.165 1820.29,700.851 1820.85,713.707 1821.41,712.992 1821.97,726.344 1822.53,705.433 1823.09,673.953 1823.65,690.715 1824.21,674.225 1824.77,641.167 1825.33,657.978 1825.89,673.225 1826.45,656.605 1827,641.965 1827.56,626.89 1828.12,666.045 1828.68,667.472 1829.24,648.404 1829.8,667.895 1830.36,697.261 1830.92,664.952 1831.48,681.52 1832.04,676.682 1832.6,662.115 1833.16,643.242 1833.72,661.737 1834.27,642.765 1834.83,629.435 1835.39,663.877 1835.95,697.406 1836.51,727.368 1837.07,721.038 1837.63,717.104 1838.19,714.401 \"/>\n<path clip-path=\"url(#clip153)\" d=\"M720.247 688.888 L720.806 688.888 L721.365 688.888 L721.924 688.888 L722.484 688.888 L723.043 688.888 L723.602 688.888 L724.161 688.888 L724.721 688.888 L725.28 688.888 L725.839 688.888 L726.398 688.888 L726.958 688.888 L727.517 688.888 L728.076 688.888 L728.635 688.888 L729.195 688.888 L729.754 688.888 L730.313 688.888 L730.872 688.888 L731.432 688.888 L731.991 688.888 L732.55 688.888 L733.109 688.888 L733.669 688.888 L734.228 688.888 L734.787 688.888 L735.346 688.888 L735.906 688.888 L736.465 688.888 L737.024 688.888 L737.583 688.888 L738.143 688.888 L738.702 688.888 L739.261 688.888 L739.82 688.888 L740.38 688.888 L740.939 688.888 L741.498 688.888 L742.057 688.888 L742.617 688.888 L743.176 688.888 L743.735 688.888 L744.294 688.888 L744.854 688.888 L745.413 688.888 L745.972 688.888 L746.531 688.888 L747.091 688.888 L747.65 688.888 L748.209 688.888 L748.768 688.888 L749.328 688.888 L749.887 688.888 L750.446 688.888 L751.005 688.888 L751.565 688.888 L752.124 688.888 L752.683 688.888 L753.242 688.888 L753.802 688.888 L754.361 688.888 L754.92 688.888 L755.479 688.888 L756.039 688.888 L756.598 688.888 L757.157 688.888 L757.716 688.888 L758.276 688.888 L758.835 688.888 L759.394 688.888 L759.953 688.888 L760.513 688.888 L761.072 688.888 L761.631 688.888 L762.19 688.888 L762.75 688.888 L763.309 688.888 L763.868 688.888 L764.427 688.888 L764.987 688.888 L765.546 688.888 L766.105 688.888 L766.664 688.888 L767.224 688.888 L767.783 688.888 L768.342 688.888 L768.901 688.888 L769.461 688.888 L770.02 688.888 L770.579 688.888 L771.138 688.888 L771.698 688.888 L772.257 688.888 L772.816 688.888 L773.375 688.888 L773.935 688.888 L774.494 688.888 L775.053 688.888 L775.612 688.888 L776.172 688.888 L776.731 688.888 L777.29 688.888 L777.849 688.888 L778.409 688.888 L778.968 688.888 L779.527 688.888 L780.086 688.888 L780.646 688.888 L781.205 688.888 L781.764 688.888 L782.323 688.888 L782.883 688.888 L783.442 688.888 L784.001 688.888 L784.56 688.888 L785.12 688.888 L785.679 688.888 L786.238 688.888 L786.797 688.888 L787.357 688.888 L787.916 688.888 L788.475 688.888 L789.034 688.888 L789.594 688.888 L790.153 688.888 L790.712 688.888 L791.271 688.888 L791.831 688.888 L792.39 688.888 L792.949 688.888 L793.508 688.888 L794.068 688.888 L794.627 688.888 L795.186 688.888 L795.745 688.888 L796.305 688.888 L796.864 688.888 L797.423 688.888 L797.982 688.888 L798.542 688.888 L799.101 688.888 L799.66 688.888 L800.219 688.888 L800.779 688.888 L801.338 688.888 L801.897 688.888 L802.456 688.888 L803.016 688.888 L803.575 688.888 L804.134 688.888 L804.693 688.888 L805.253 688.888 L805.812 688.888 L806.371 688.888 L806.931 688.888 L807.49 688.888 L808.049 688.888 L808.608 688.888 L809.168 688.888 L809.727 688.888 L810.286 688.888 L810.845 688.888 L811.405 688.888 L811.964 688.888 L812.523 688.888 L813.082 688.888 L813.642 688.888 L814.201 688.888 L814.76 688.888 L815.319 688.888 L815.879 688.888 L816.438 688.888 L816.997 688.888 L817.556 688.888 L818.116 688.888 L818.675 688.888 L819.234 688.888 L819.793 688.888 L820.353 688.888 L820.912 688.888 L821.471 688.888 L822.03 688.888 L822.59 688.888 L823.149 688.888 L823.708 688.888 L824.267 688.888 L824.827 688.888 L825.386 688.888 L825.945 688.888 L826.504 688.888 L827.064 688.888 L827.623 688.888 L828.182 688.888 L828.741 688.888 L829.301 688.888 L829.86 688.888 L830.419 688.888 L830.978 688.888 L831.538 688.888 L832.097 688.888 L832.656 688.888 L833.215 688.888 L833.775 688.888 L834.334 688.888 L834.893 688.888 L835.452 688.888 L836.012 688.888 L836.571 688.888 L837.13 688.888 L837.689 688.888 L838.249 688.888 L838.808 688.888 L839.367 688.888 L839.926 688.888 L840.486 688.888 L841.045 688.888 L841.604 688.888 L842.163 688.888 L842.723 688.888 L843.282 688.888 L843.841 688.888 L844.4 688.888 L844.96 688.888 L845.519 688.888 L846.078 688.888 L846.637 688.888 L847.197 688.888 L847.756 688.888 L848.315 688.888 L848.874 688.888 L849.434 688.888 L849.993 688.888 L850.552 688.888 L851.111 688.888 L851.671 688.888 L852.23 688.888 L852.789 688.888 L853.348 688.888 L853.908 688.888 L854.467 688.888 L855.026 688.888 L855.585 688.888 L856.145 688.888 L856.704 688.888 L857.263 688.888 L857.822 688.888 L858.382 688.888 L858.941 688.888 L859.5 688.888 L860.059 688.888 L860.619 688.888 L861.178 688.888 L861.737 688.888 L862.296 688.888 L862.856 688.888 L863.415 688.888 L863.974 688.888 L864.533 688.888 L865.093 688.888 L865.652 688.888 L866.211 688.888 L866.77 688.888 L867.33 688.888 L867.889 688.888 L868.448 688.888 L869.007 688.888 L869.567 688.888 L870.126 688.888 L870.685 688.888 L871.244 688.888 L871.804 688.888 L872.363 688.888 L872.922 688.888 L873.481 688.888 L874.041 688.888 L874.6 688.888 L875.159 688.888 L875.718 688.888 L876.278 688.888 L876.837 688.888 L877.396 688.888 L877.955 688.888 L878.515 688.888 L879.074 688.888 L879.633 688.888 L880.192 688.888 L880.752 688.888 L881.311 688.888 L881.87 688.888 L882.429 688.888 L882.989 688.888 L883.548 688.888 L884.107 688.888 L884.666 688.888 L885.226 688.888 L885.785 688.888 L886.344 688.888 L886.903 688.888 L887.463 688.888 L888.022 688.888 L888.581 688.888 L889.14 688.888 L889.7 688.888 L890.259 688.888 L890.818 688.888 L891.377 688.888 L891.937 688.888 L892.496 688.888 L893.055 688.888 L893.614 688.888 L894.174 688.888 L894.733 688.888 L895.292 688.888 L895.851 688.888 L896.411 688.888 L896.97 688.888 L897.529 688.888 L898.088 688.888 L898.648 688.888 L899.207 688.888 L899.766 688.888 L900.325 688.888 L900.885 688.888 L901.444 688.888 L902.003 688.888 L902.562 688.888 L903.122 688.888 L903.681 688.888 L904.24 688.888 L904.799 688.888 L905.359 688.888 L905.918 688.888 L906.477 688.888 L907.036 688.888 L907.596 688.888 L908.155 688.888 L908.714 688.888 L909.273 688.888 L909.833 688.888 L910.392 688.888 L910.951 688.888 L911.51 688.888 L912.07 688.888 L912.629 688.888 L913.188 688.888 L913.747 688.888 L914.307 688.888 L914.866 688.888 L915.425 688.888 L915.984 688.888 L916.544 688.888 L917.103 688.888 L917.662 688.888 L918.221 688.888 L918.781 688.888 L919.34 688.888 L919.899 688.888 L920.458 688.888 L921.018 688.888 L921.577 688.888 L922.136 688.888 L922.695 688.888 L923.255 688.888 L923.814 688.888 L924.373 688.888 L924.932 688.888 L925.492 688.888 L926.051 688.888 L926.61 688.888 L927.169 688.888 L927.729 688.888 L928.288 688.888 L928.847 688.888 L929.406 688.888 L929.966 688.888 L930.525 688.888 L931.084 688.888 L931.644 688.888 L932.203 688.888 L932.762 688.888 L933.321 688.888 L933.881 688.888 L934.44 688.888 L934.999 688.888 L935.558 688.888 L936.118 688.888 L936.677 688.888 L937.236 688.888 L937.795 688.888 L938.355 688.888 L938.914 688.888 L939.473 688.888 L940.032 688.888 L940.592 688.888 L941.151 688.888 L941.71 688.888 L942.269 688.888 L942.829 688.888 L943.388 688.888 L943.947 688.888 L944.506 688.888 L945.066 688.888 L945.625 688.888 L946.184 688.888 L946.743 688.888 L947.303 688.888 L947.862 688.888 L948.421 688.888 L948.98 688.888 L949.54 688.888 L950.099 688.888 L950.658 688.888 L951.217 688.888 L951.777 688.888 L952.336 688.888 L952.895 688.888 L953.454 688.888 L954.014 688.888 L954.573 688.888 L955.132 688.888 L955.691 688.888 L956.251 688.888 L956.81 688.888 L957.369 688.888 L957.928 688.888 L958.488 688.888 L959.047 688.888 L959.606 688.888 L960.165 688.888 L960.725 688.888 L961.284 688.888 L961.843 688.888 L962.402 688.888 L962.962 688.888 L963.521 688.888 L964.08 688.888 L964.639 688.888 L965.199 688.888 L965.758 688.888 L966.317 688.888 L966.876 688.888 L967.436 688.888 L967.995 688.888 L968.554 688.888 L969.113 688.888 L969.673 688.888 L970.232 688.888 L970.791 688.888 L971.35 688.888 L971.91 688.888 L972.469 688.888 L973.028 688.888 L973.587 688.888 L974.147 688.888 L974.706 688.888 L975.265 688.888 L975.824 688.888 L976.384 688.888 L976.943 688.888 L977.502 688.888 L978.061 688.888 L978.621 688.888 L979.18 688.888 L979.739 688.888 L980.298 688.888 L980.858 688.888 L981.417 688.888 L981.976 688.888 L982.535 688.888 L983.095 688.888 L983.654 688.888 L984.213 688.888 L984.772 688.888 L985.332 688.888 L985.891 688.888 L986.45 688.888 L987.009 688.888 L987.569 688.888 L988.128 688.888 L988.687 688.888 L989.246 688.888 L989.806 688.888 L990.365 688.888 L990.924 688.888 L991.483 688.888 L992.043 688.888 L992.602 688.888 L993.161 688.888 L993.72 688.888 L994.28 688.888 L994.839 688.888 L995.398 688.888 L995.957 688.888 L996.517 688.888 L997.076 688.888 L997.635 688.888 L998.194 688.888 L998.754 688.888 L999.313 688.888 L999.872 688.888 L1000.43 688.888 L1000.99 688.888 L1001.55 688.888 L1002.11 688.888 L1002.67 688.888 L1003.23 688.888 L1003.79 688.888 L1004.35 688.888 L1004.91 688.888 L1005.46 688.888 L1006.02 688.888 L1006.58 688.888 L1007.14 688.888 L1007.7 688.888 L1008.26 688.888 L1008.82 688.888 L1009.38 688.888 L1009.94 688.888 L1010.5 688.888 L1011.06 688.888 L1011.62 688.888 L1012.18 688.888 L1012.73 688.888 L1013.29 688.888 L1013.85 688.888 L1014.41 688.888 L1014.97 688.888 L1015.53 688.888 L1016.09 688.888 L1016.65 688.888 L1017.21 688.888 L1017.77 688.888 L1018.33 688.888 L1018.89 688.888 L1019.45 688.888 L1020.01 688.888 L1020.56 688.888 L1021.12 688.888 L1021.68 688.888 L1022.24 688.888 L1022.8 688.888 L1023.36 688.888 L1023.92 688.888 L1024.48 688.888 L1025.04 688.888 L1025.6 688.888 L1026.16 688.888 L1026.72 688.888 L1027.28 688.888 L1027.83 688.888 L1028.39 688.888 L1028.95 688.888 L1029.51 688.888 L1030.07 688.888 L1030.63 688.888 L1031.19 688.888 L1031.75 688.888 L1032.31 688.888 L1032.87 688.888 L1033.43 688.888 L1033.99 688.888 L1034.55 688.888 L1035.1 688.888 L1035.66 688.888 L1036.22 688.888 L1036.78 688.888 L1037.34 688.888 L1037.9 688.888 L1038.46 688.888 L1039.02 688.888 L1039.58 688.888 L1040.14 688.888 L1040.7 688.888 L1041.26 688.888 L1041.82 688.888 L1042.38 688.888 L1042.93 688.888 L1043.49 688.888 L1044.05 688.888 L1044.61 688.888 L1045.17 688.888 L1045.73 688.888 L1046.29 688.888 L1046.85 688.888 L1047.41 688.888 L1047.97 688.888 L1048.53 688.888 L1049.09 688.888 L1049.65 688.888 L1050.2 688.888 L1050.76 688.888 L1051.32 688.888 L1051.88 688.888 L1052.44 688.888 L1053 688.888 L1053.56 688.888 L1054.12 688.888 L1054.68 688.888 L1055.24 688.888 L1055.8 688.888 L1056.36 688.888 L1056.92 688.888 L1057.48 688.888 L1058.03 688.888 L1058.59 688.888 L1059.15 688.888 L1059.71 688.888 L1060.27 688.888 L1060.83 688.888 L1061.39 688.888 L1061.95 688.888 L1062.51 688.888 L1063.07 688.888 L1063.63 688.888 L1064.19 688.888 L1064.75 688.888 L1065.3 688.888 L1065.86 688.888 L1066.42 688.888 L1066.98 688.888 L1067.54 688.888 L1068.1 688.888 L1068.66 688.888 L1069.22 688.888 L1069.78 688.888 L1070.34 688.888 L1070.9 688.888 L1071.46 688.888 L1072.02 688.888 L1072.57 688.888 L1073.13 688.888 L1073.69 688.888 L1074.25 688.888 L1074.81 688.888 L1075.37 688.888 L1075.93 688.888 L1076.49 688.888 L1077.05 688.888 L1077.61 688.888 L1078.17 688.888 L1078.73 688.888 L1079.29 688.888 L1079.85 688.888 L1080.4 688.888 L1080.96 688.888 L1081.52 688.888 L1082.08 688.888 L1082.64 688.888 L1083.2 688.888 L1083.76 688.888 L1084.32 688.888 L1084.88 688.888 L1085.44 688.888 L1086 688.888 L1086.56 688.888 L1087.12 688.888 L1087.67 688.888 L1088.23 688.888 L1088.79 688.888 L1089.35 688.888 L1089.91 688.888 L1090.47 688.888 L1091.03 688.888 L1091.59 688.888 L1092.15 688.888 L1092.71 688.888 L1093.27 688.888 L1093.83 688.888 L1094.39 688.888 L1094.94 688.888 L1095.5 688.888 L1096.06 688.888 L1096.62 688.888 L1097.18 688.888 L1097.74 688.888 L1098.3 688.888 L1098.86 688.888 L1099.42 688.888 L1099.98 688.888 L1100.54 688.888 L1101.1 688.888 L1101.66 688.888 L1102.22 688.888 L1102.77 688.888 L1103.33 688.888 L1103.89 688.888 L1104.45 688.888 L1105.01 688.888 L1105.57 688.888 L1106.13 688.888 L1106.69 688.888 L1107.25 688.888 L1107.81 688.888 L1108.37 688.888 L1108.93 688.888 L1109.49 688.888 L1110.04 688.888 L1110.6 688.888 L1111.16 688.888 L1111.72 688.888 L1112.28 688.888 L1112.84 688.888 L1113.4 688.888 L1113.96 688.888 L1114.52 688.888 L1115.08 688.888 L1115.64 688.888 L1116.2 688.888 L1116.76 688.888 L1117.31 688.888 L1117.87 688.888 L1118.43 688.888 L1118.99 688.888 L1119.55 688.888 L1120.11 688.888 L1120.67 688.888 L1121.23 688.888 L1121.79 688.888 L1122.35 688.888 L1122.91 688.888 L1123.47 688.888 L1124.03 688.888 L1124.59 688.888 L1125.14 688.888 L1125.7 688.888 L1126.26 688.888 L1126.82 688.888 L1127.38 688.888 L1127.94 688.888 L1128.5 688.888 L1129.06 688.888 L1129.62 688.888 L1130.18 688.888 L1130.74 688.888 L1131.3 688.888 L1131.86 688.888 L1132.41 688.888 L1132.97 688.888 L1133.53 688.888 L1134.09 688.888 L1134.65 688.888 L1135.21 688.888 L1135.77 688.888 L1136.33 688.888 L1136.89 688.888 L1137.45 688.888 L1138.01 688.888 L1138.57 688.888 L1139.13 688.888 L1139.68 688.888 L1140.24 688.888 L1140.8 688.888 L1141.36 688.888 L1141.92 688.888 L1142.48 688.888 L1143.04 688.888 L1143.6 688.888 L1144.16 688.888 L1144.72 688.888 L1145.28 688.888 L1145.84 688.888 L1146.4 688.888 L1146.96 688.888 L1147.51 688.888 L1148.07 688.888 L1148.63 688.888 L1149.19 688.888 L1149.75 688.888 L1150.31 688.888 L1150.87 688.888 L1151.43 688.888 L1151.99 688.888 L1152.55 688.888 L1153.11 688.888 L1153.67 688.888 L1154.23 688.888 L1154.78 688.888 L1155.34 688.888 L1155.9 688.888 L1156.46 688.888 L1157.02 688.888 L1157.58 688.888 L1158.14 688.888 L1158.7 688.888 L1159.26 688.888 L1159.82 688.888 L1160.38 688.888 L1160.94 688.888 L1161.5 688.888 L1162.05 688.888 L1162.61 688.888 L1163.17 688.888 L1163.73 688.888 L1164.29 688.888 L1164.85 688.888 L1165.41 688.888 L1165.97 688.888 L1166.53 688.888 L1167.09 688.888 L1167.65 688.888 L1168.21 688.888 L1168.77 688.888 L1169.33 688.888 L1169.88 688.888 L1170.44 688.888 L1171 688.888 L1171.56 688.888 L1172.12 688.888 L1172.68 688.888 L1173.24 688.888 L1173.8 688.888 L1174.36 688.888 L1174.92 688.888 L1175.48 688.888 L1176.04 688.888 L1176.6 688.888 L1177.15 688.888 L1177.71 688.888 L1178.27 688.888 L1178.83 688.888 L1179.39 688.888 L1179.95 688.888 L1180.51 688.888 L1181.07 688.888 L1181.63 688.888 L1182.19 688.888 L1182.75 688.888 L1183.31 688.888 L1183.87 688.888 L1184.43 688.888 L1184.98 688.888 L1185.54 688.888 L1186.1 688.888 L1186.66 688.888 L1187.22 688.888 L1187.78 688.888 L1188.34 688.888 L1188.9 688.888 L1189.46 688.888 L1190.02 688.888 L1190.58 688.888 L1191.14 688.888 L1191.7 688.888 L1192.25 688.888 L1192.81 688.888 L1193.37 688.888 L1193.93 688.888 L1194.49 688.888 L1195.05 688.888 L1195.61 688.888 L1196.17 688.888 L1196.73 688.888 L1197.29 688.888 L1197.85 688.888 L1198.41 688.888 L1198.97 688.888 L1199.52 688.888 L1200.08 688.888 L1200.64 688.888 L1201.2 688.888 L1201.76 688.888 L1202.32 688.888 L1202.88 688.888 L1203.44 688.888 L1204 688.888 L1204.56 688.888 L1205.12 688.888 L1205.68 688.888 L1206.24 688.888 L1206.8 688.888 L1207.35 688.888 L1207.91 688.888 L1208.47 688.888 L1209.03 688.888 L1209.59 688.888 L1210.15 688.888 L1210.71 688.888 L1211.27 688.888 L1211.83 688.888 L1212.39 688.888 L1212.95 688.888 L1213.51 688.888 L1214.07 688.888 L1214.62 688.888 L1215.18 688.888 L1215.74 688.888 L1216.3 688.888 L1216.86 688.888 L1217.42 688.888 L1217.98 688.888 L1218.54 688.888 L1219.1 688.888 L1219.66 688.888 L1220.22 688.888 L1220.78 688.888 L1221.34 688.888 L1221.89 688.888 L1222.45 688.888 L1223.01 688.888 L1223.57 688.888 L1224.13 688.888 L1224.69 688.888 L1225.25 688.888 L1225.81 688.888 L1226.37 688.888 L1226.93 688.888 L1227.49 688.888 L1228.05 688.888 L1228.61 688.888 L1229.17 688.888 L1229.72 688.888 L1230.28 688.888 L1230.84 688.888 L1231.4 688.888 L1231.96 688.888 L1232.52 688.888 L1233.08 688.888 L1233.64 688.888 L1234.2 688.888 L1234.76 688.888 L1235.32 688.888 L1235.88 688.888 L1236.44 688.888 L1236.99 688.888 L1237.55 688.888 L1238.11 688.888 L1238.67 688.888 L1239.23 688.888 L1239.79 688.888 L1240.35 688.888 L1240.91 688.888 L1241.47 688.888 L1242.03 688.888 L1242.59 688.888 L1243.15 688.888 L1243.71 688.888 L1244.26 688.888 L1244.82 688.888 L1245.38 688.888 L1245.94 688.888 L1246.5 688.888 L1247.06 688.888 L1247.62 688.888 L1248.18 688.888 L1248.74 688.888 L1249.3 688.888 L1249.86 688.888 L1250.42 688.888 L1250.98 688.888 L1251.54 688.888 L1252.09 688.888 L1252.65 688.888 L1253.21 688.888 L1253.77 688.888 L1254.33 688.888 L1254.89 688.888 L1255.45 688.888 L1256.01 688.888 L1256.57 688.888 L1257.13 688.888 L1257.69 688.888 L1258.25 688.888 L1258.81 688.888 L1259.36 688.888 L1259.92 688.888 L1260.48 688.888 L1261.04 688.888 L1261.6 688.888 L1262.16 688.888 L1262.72 688.888 L1263.28 688.888 L1263.84 688.888 L1264.4 688.888 L1264.96 688.888 L1265.52 688.888 L1266.08 688.888 L1266.63 688.888 L1267.19 688.888 L1267.75 688.888 L1268.31 688.888 L1268.87 688.888 L1269.43 688.888 L1269.99 688.888 L1270.55 688.888 L1271.11 688.888 L1271.67 688.888 L1272.23 688.888 L1272.79 688.888 L1273.35 688.888 L1273.91 688.888 L1274.46 688.888 L1275.02 688.888 L1275.58 688.888 L1276.14 688.888 L1276.7 688.888 L1277.26 688.888 L1277.82 688.888 L1278.38 688.888 L1278.94 688.888 L1279.5 688.888 L1280.06 688.888 L1280.62 688.888 L1281.18 688.888 L1281.73 688.888 L1282.29 688.888 L1282.85 688.888 L1283.41 688.888 L1283.97 688.888 L1284.53 688.888 L1285.09 688.888 L1285.65 688.888 L1286.21 688.888 L1286.77 688.888 L1287.33 688.888 L1287.89 688.888 L1288.45 688.888 L1289 688.888 L1289.56 688.888 L1290.12 688.888 L1290.68 688.888 L1291.24 688.888 L1291.8 688.888 L1292.36 688.888 L1292.92 688.888 L1293.48 688.888 L1294.04 688.888 L1294.6 688.888 L1295.16 688.888 L1295.72 688.888 L1296.28 688.888 L1296.83 688.888 L1297.39 688.888 L1297.95 688.888 L1298.51 688.888 L1299.07 688.888 L1299.63 688.888 L1300.19 688.888 L1300.75 688.888 L1301.31 688.888 L1301.87 688.888 L1302.43 688.888 L1302.99 688.888 L1303.55 688.888 L1304.1 688.888 L1304.66 688.888 L1305.22 688.888 L1305.78 688.888 L1306.34 688.888 L1306.9 688.888 L1307.46 688.888 L1308.02 688.888 L1308.58 688.888 L1309.14 688.888 L1309.7 688.888 L1310.26 688.888 L1310.82 688.888 L1311.38 688.888 L1311.93 688.888 L1312.49 688.888 L1313.05 688.888 L1313.61 688.888 L1314.17 688.888 L1314.73 688.888 L1315.29 688.888 L1315.85 688.888 L1316.41 688.888 L1316.97 688.888 L1317.53 688.888 L1318.09 688.888 L1318.65 688.888 L1319.2 688.888 L1319.76 688.888 L1320.32 688.888 L1320.88 688.888 L1321.44 688.888 L1322 688.888 L1322.56 688.888 L1323.12 688.888 L1323.68 688.888 L1324.24 688.888 L1324.8 688.888 L1325.36 688.888 L1325.92 688.888 L1326.47 688.888 L1327.03 688.888 L1327.59 688.888 L1328.15 688.888 L1328.71 688.888 L1329.27 688.888 L1329.83 688.888 L1330.39 688.888 L1330.95 688.888 L1331.51 688.888 L1332.07 688.888 L1332.63 688.888 L1333.19 688.888 L1333.75 688.888 L1334.3 688.888 L1334.86 688.888 L1335.42 688.888 L1335.98 688.888 L1336.54 688.888 L1337.1 688.888 L1337.66 688.888 L1338.22 688.888 L1338.78 688.888 L1339.34 688.888 L1339.9 688.888 L1340.46 688.888 L1341.02 688.888 L1341.57 688.888 L1342.13 688.888 L1342.69 688.888 L1343.25 688.888 L1343.81 688.888 L1344.37 688.888 L1344.93 688.888 L1345.49 688.888 L1346.05 688.888 L1346.61 688.888 L1347.17 688.888 L1347.73 688.888 L1348.29 688.888 L1348.84 688.888 L1349.4 688.888 L1349.96 688.888 L1350.52 688.888 L1351.08 688.888 L1351.64 688.888 L1352.2 688.888 L1352.76 688.888 L1353.32 688.888 L1353.88 688.888 L1354.44 688.888 L1355 688.888 L1355.56 688.888 L1356.12 688.888 L1356.67 688.888 L1357.23 688.888 L1357.79 688.888 L1358.35 688.888 L1358.91 688.888 L1359.47 688.888 L1360.03 688.888 L1360.59 688.888 L1361.15 688.888 L1361.71 688.888 L1362.27 688.888 L1362.83 688.888 L1363.39 688.888 L1363.94 688.888 L1364.5 688.888 L1365.06 688.888 L1365.62 688.888 L1366.18 688.888 L1366.74 688.888 L1367.3 688.888 L1367.86 688.888 L1368.42 688.888 L1368.98 688.888 L1369.54 688.888 L1370.1 688.888 L1370.66 688.888 L1371.21 688.888 L1371.77 688.888 L1372.33 688.888 L1372.89 688.888 L1373.45 688.888 L1374.01 688.888 L1374.57 688.888 L1375.13 688.888 L1375.69 688.888 L1376.25 688.888 L1376.81 688.888 L1377.37 688.888 L1377.93 688.888 L1378.49 688.888 L1379.04 688.888 L1379.6 688.888 L1380.16 688.888 L1380.72 688.888 L1381.28 688.888 L1381.84 688.888 L1382.4 688.888 L1382.96 688.888 L1383.52 688.888 L1384.08 688.888 L1384.64 688.888 L1385.2 688.888 L1385.76 688.888 L1386.31 688.888 L1386.87 688.888 L1387.43 688.888 L1387.99 688.888 L1388.55 688.888 L1389.11 688.888 L1389.67 688.888 L1390.23 688.888 L1390.79 688.888 L1391.35 688.888 L1391.91 688.888 L1392.47 688.888 L1393.03 688.888 L1393.58 688.888 L1394.14 688.888 L1394.7 688.888 L1395.26 688.888 L1395.82 688.888 L1396.38 688.888 L1396.94 688.888 L1397.5 688.888 L1398.06 688.888 L1398.62 688.888 L1399.18 688.888 L1399.74 688.888 L1400.3 688.888 L1400.86 688.888 L1401.41 688.888 L1401.97 688.888 L1402.53 688.888 L1403.09 688.888 L1403.65 688.888 L1404.21 688.888 L1404.77 688.888 L1405.33 688.888 L1405.89 688.888 L1406.45 688.888 L1407.01 688.888 L1407.57 688.888 L1408.13 688.888 L1408.68 688.888 L1409.24 688.888 L1409.8 688.888 L1410.36 688.888 L1410.92 688.888 L1411.48 688.888 L1412.04 688.888 L1412.6 688.888 L1413.16 688.888 L1413.72 688.888 L1414.28 688.888 L1414.84 688.888 L1415.4 688.888 L1415.95 688.888 L1416.51 688.888 L1417.07 688.888 L1417.63 688.888 L1418.19 688.888 L1418.75 688.888 L1419.31 688.888 L1419.87 688.888 L1420.43 688.888 L1420.99 688.888 L1421.55 688.888 L1422.11 688.888 L1422.67 688.888 L1423.23 688.888 L1423.78 688.888 L1424.34 688.888 L1424.9 688.888 L1425.46 688.888 L1426.02 688.888 L1426.58 688.888 L1427.14 688.888 L1427.7 688.888 L1428.26 688.888 L1428.82 688.888 L1429.38 688.888 L1429.94 688.888 L1430.5 688.888 L1431.05 688.888 L1431.61 688.888 L1432.17 688.888 L1432.73 688.888 L1433.29 688.888 L1433.85 688.888 L1434.41 688.888 L1434.97 688.888 L1435.53 688.888 L1436.09 688.888 L1436.65 688.888 L1437.21 688.888 L1437.77 688.888 L1438.33 688.888 L1438.88 688.888 L1439.44 688.888 L1440 688.888 L1440.56 688.888 L1441.12 688.888 L1441.68 688.888 L1442.24 688.888 L1442.8 688.888 L1443.36 688.888 L1443.92 688.888 L1444.48 688.888 L1445.04 688.888 L1445.6 688.888 L1446.15 688.888 L1446.71 688.888 L1447.27 688.888 L1447.83 688.888 L1448.39 688.888 L1448.95 688.888 L1449.51 688.888 L1450.07 688.888 L1450.63 688.888 L1451.19 688.888 L1451.75 688.888 L1452.31 688.888 L1452.87 688.888 L1453.42 688.888 L1453.98 688.888 L1454.54 688.888 L1455.1 688.888 L1455.66 688.888 L1456.22 688.888 L1456.78 688.888 L1457.34 688.888 L1457.9 688.888 L1458.46 688.888 L1459.02 688.888 L1459.58 688.888 L1460.14 688.888 L1460.7 688.888 L1461.25 688.888 L1461.81 688.888 L1462.37 688.888 L1462.93 688.888 L1463.49 688.888 L1464.05 688.888 L1464.61 688.888 L1465.17 688.888 L1465.73 688.888 L1466.29 688.888 L1466.85 688.888 L1467.41 688.888 L1467.97 688.888 L1468.52 688.888 L1469.08 688.888 L1469.64 688.888 L1470.2 688.888 L1470.76 688.888 L1471.32 688.888 L1471.88 688.888 L1472.44 688.888 L1473 688.888 L1473.56 688.888 L1474.12 688.888 L1474.68 688.888 L1475.24 688.888 L1475.79 688.888 L1476.35 688.888 L1476.91 688.888 L1477.47 688.888 L1478.03 688.888 L1478.59 688.888 L1479.15 688.888 L1479.71 688.888 L1480.27 688.888 L1480.83 688.888 L1481.39 688.888 L1481.95 688.888 L1482.51 688.888 L1483.07 688.888 L1483.62 688.888 L1484.18 688.888 L1484.74 688.888 L1485.3 688.888 L1485.86 688.888 L1486.42 688.888 L1486.98 688.888 L1487.54 688.888 L1488.1 688.888 L1488.66 688.888 L1489.22 688.888 L1489.78 688.888 L1490.34 688.888 L1490.89 688.888 L1491.45 688.888 L1492.01 688.888 L1492.57 688.888 L1493.13 688.888 L1493.69 688.888 L1494.25 688.888 L1494.81 688.888 L1495.37 688.888 L1495.93 688.888 L1496.49 688.888 L1497.05 688.888 L1497.61 688.888 L1498.16 688.888 L1498.72 688.888 L1499.28 688.888 L1499.84 688.888 L1500.4 688.888 L1500.96 688.888 L1501.52 688.888 L1502.08 688.888 L1502.64 688.888 L1503.2 688.888 L1503.76 688.888 L1504.32 688.888 L1504.88 688.888 L1505.44 688.888 L1505.99 688.888 L1506.55 688.888 L1507.11 688.888 L1507.67 688.888 L1508.23 688.888 L1508.79 688.888 L1509.35 688.888 L1509.91 688.888 L1510.47 688.888 L1511.03 688.888 L1511.59 688.888 L1512.15 688.888 L1512.71 688.888 L1513.26 688.888 L1513.82 688.888 L1514.38 688.888 L1514.94 688.888 L1515.5 688.888 L1516.06 688.888 L1516.62 688.888 L1517.18 688.888 L1517.74 688.888 L1518.3 688.888 L1518.86 688.888 L1519.42 688.888 L1519.98 688.888 L1520.53 688.888 L1521.09 688.888 L1521.65 688.888 L1522.21 688.888 L1522.77 688.888 L1523.33 688.888 L1523.89 688.888 L1524.45 688.888 L1525.01 688.888 L1525.57 688.888 L1526.13 688.888 L1526.69 688.888 L1527.25 688.888 L1527.81 688.888 L1528.36 688.888 L1528.92 688.888 L1529.48 688.888 L1530.04 688.888 L1530.6 688.888 L1531.16 688.888 L1531.72 688.888 L1532.28 688.888 L1532.84 688.888 L1533.4 688.888 L1533.96 688.888 L1534.52 688.888 L1535.08 688.888 L1535.63 688.888 L1536.19 688.888 L1536.75 688.888 L1537.31 688.888 L1537.87 688.888 L1538.43 688.888 L1538.99 688.888 L1539.55 688.888 L1540.11 688.888 L1540.67 688.888 L1541.23 688.888 L1541.79 688.888 L1542.35 688.888 L1542.9 688.888 L1543.46 688.888 L1544.02 688.888 L1544.58 688.888 L1545.14 688.888 L1545.7 688.888 L1546.26 688.888 L1546.82 688.888 L1547.38 688.888 L1547.94 688.888 L1548.5 688.888 L1549.06 688.888 L1549.62 688.888 L1550.18 688.888 L1550.73 688.888 L1551.29 688.888 L1551.85 688.888 L1552.41 688.888 L1552.97 688.888 L1553.53 688.888 L1554.09 688.888 L1554.65 688.888 L1555.21 688.888 L1555.77 688.888 L1556.33 688.888 L1556.89 688.888 L1557.45 688.888 L1558 688.888 L1558.56 688.888 L1559.12 688.888 L1559.68 688.888 L1560.24 688.888 L1560.8 688.888 L1561.36 688.888 L1561.92 688.888 L1562.48 688.888 L1563.04 688.888 L1563.6 688.888 L1564.16 688.888 L1564.72 688.888 L1565.28 688.888 L1565.83 688.888 L1566.39 688.888 L1566.95 688.888 L1567.51 688.888 L1568.07 688.888 L1568.63 688.888 L1569.19 688.888 L1569.75 688.888 L1570.31 688.888 L1570.87 688.888 L1571.43 688.888 L1571.99 688.888 L1572.55 688.888 L1573.1 688.888 L1573.66 688.888 L1574.22 688.888 L1574.78 688.888 L1575.34 688.888 L1575.9 688.888 L1576.46 688.888 L1577.02 688.888 L1577.58 688.888 L1578.14 688.888 L1578.7 688.888 L1579.26 688.888 L1579.82 688.888 L1580.37 688.888 L1580.93 688.888 L1581.49 688.888 L1582.05 688.888 L1582.61 688.888 L1583.17 688.888 L1583.73 688.888 L1584.29 688.888 L1584.85 688.888 L1585.41 688.888 L1585.97 688.888 L1586.53 688.888 L1587.09 688.888 L1587.65 688.888 L1588.2 688.888 L1588.76 688.888 L1589.32 688.888 L1589.88 688.888 L1590.44 688.888 L1591 688.888 L1591.56 688.888 L1592.12 688.888 L1592.68 688.888 L1593.24 688.888 L1593.8 688.888 L1594.36 688.888 L1594.92 688.888 L1595.47 688.888 L1596.03 688.888 L1596.59 688.888 L1597.15 688.888 L1597.71 688.888 L1598.27 688.888 L1598.83 688.888 L1599.39 688.888 L1599.95 688.888 L1600.51 688.888 L1601.07 688.888 L1601.63 688.888 L1602.19 688.888 L1602.74 688.888 L1603.3 688.888 L1603.86 688.888 L1604.42 688.888 L1604.98 688.888 L1605.54 688.888 L1606.1 688.888 L1606.66 688.888 L1607.22 688.888 L1607.78 688.888 L1608.34 688.888 L1608.9 688.888 L1609.46 688.888 L1610.02 688.888 L1610.57 688.888 L1611.13 688.888 L1611.69 688.888 L1612.25 688.888 L1612.81 688.888 L1613.37 688.888 L1613.93 688.888 L1614.49 688.888 L1615.05 688.888 L1615.61 688.888 L1616.17 688.888 L1616.73 688.888 L1617.29 688.888 L1617.84 688.888 L1618.4 688.888 L1618.96 688.888 L1619.52 688.888 L1620.08 688.888 L1620.64 688.888 L1621.2 688.888 L1621.76 688.888 L1622.32 688.888 L1622.88 688.888 L1623.44 688.888 L1624 688.888 L1624.56 688.888 L1625.11 688.888 L1625.67 688.888 L1626.23 688.888 L1626.79 688.888 L1627.35 688.888 L1627.91 688.888 L1628.47 688.888 L1629.03 688.888 L1629.59 688.888 L1630.15 688.888 L1630.71 688.888 L1631.27 688.888 L1631.83 688.888 L1632.39 688.888 L1632.94 688.888 L1633.5 688.888 L1634.06 688.888 L1634.62 688.888 L1635.18 688.888 L1635.74 688.888 L1636.3 688.888 L1636.86 688.888 L1637.42 688.888 L1637.98 688.888 L1638.54 688.888 L1639.1 688.888 L1639.66 688.888 L1640.21 688.888 L1640.77 688.888 L1641.33 688.888 L1641.89 688.888 L1642.45 688.888 L1643.01 688.888 L1643.57 688.888 L1644.13 688.888 L1644.69 688.888 L1645.25 688.888 L1645.81 688.888 L1646.37 688.888 L1646.93 688.888 L1647.48 688.888 L1648.04 688.888 L1648.6 688.888 L1649.16 688.888 L1649.72 688.888 L1650.28 688.888 L1650.84 688.888 L1651.4 688.888 L1651.96 688.888 L1652.52 688.888 L1653.08 688.888 L1653.64 688.888 L1654.2 688.888 L1654.76 688.888 L1655.31 688.888 L1655.87 688.888 L1656.43 688.888 L1656.99 688.888 L1657.55 688.888 L1658.11 688.888 L1658.67 688.888 L1659.23 688.888 L1659.79 688.888 L1660.35 688.888 L1660.91 688.888 L1661.47 688.888 L1662.03 688.888 L1662.58 688.888 L1663.14 688.888 L1663.7 688.888 L1664.26 688.888 L1664.82 688.888 L1665.38 688.888 L1665.94 688.888 L1666.5 688.888 L1667.06 688.888 L1667.62 688.888 L1668.18 688.888 L1668.74 688.888 L1669.3 688.888 L1669.85 688.888 L1670.41 688.888 L1670.97 688.888 L1671.53 688.888 L1672.09 688.888 L1672.65 688.888 L1673.21 688.888 L1673.77 688.888 L1674.33 688.888 L1674.89 688.888 L1675.45 688.888 L1676.01 688.888 L1676.57 688.888 L1677.13 688.888 L1677.68 688.888 L1678.24 688.888 L1678.8 688.888 L1679.36 688.888 L1679.92 688.888 L1680.48 688.888 L1681.04 688.888 L1681.6 688.888 L1682.16 688.888 L1682.72 688.888 L1683.28 688.888 L1683.84 688.888 L1684.4 688.888 L1684.95 688.888 L1685.51 688.888 L1686.07 688.888 L1686.63 688.888 L1687.19 688.888 L1687.75 688.888 L1688.31 688.888 L1688.87 688.888 L1689.43 688.888 L1689.99 688.888 L1690.55 688.888 L1691.11 688.888 L1691.67 688.888 L1692.23 688.888 L1692.78 688.888 L1693.34 688.888 L1693.9 688.888 L1694.46 688.888 L1695.02 688.888 L1695.58 688.888 L1696.14 688.888 L1696.7 688.888 L1697.26 688.888 L1697.82 688.888 L1698.38 688.888 L1698.94 688.888 L1699.5 688.888 L1700.05 688.888 L1700.61 688.888 L1701.17 688.888 L1701.73 688.888 L1702.29 688.888 L1702.85 688.888 L1703.41 688.888 L1703.97 688.888 L1704.53 688.888 L1705.09 688.888 L1705.65 688.888 L1706.21 688.888 L1706.77 688.888 L1707.32 688.888 L1707.88 688.888 L1708.44 688.888 L1709 688.888 L1709.56 688.888 L1710.12 688.888 L1710.68 688.888 L1711.24 688.888 L1711.8 688.888 L1712.36 688.888 L1712.92 688.888 L1713.48 688.888 L1714.04 688.888 L1714.6 688.888 L1715.15 688.888 L1715.71 688.888 L1716.27 688.888 L1716.83 688.888 L1717.39 688.888 L1717.95 688.888 L1718.51 688.888 L1719.07 688.888 L1719.63 688.888 L1720.19 688.888 L1720.75 688.888 L1721.31 688.888 L1721.87 688.888 L1722.42 688.888 L1722.98 688.888 L1723.54 688.888 L1724.1 688.888 L1724.66 688.888 L1725.22 688.888 L1725.78 688.888 L1726.34 688.888 L1726.9 688.888 L1727.46 688.888 L1728.02 688.888 L1728.58 688.888 L1729.14 688.888 L1729.69 688.888 L1730.25 688.888 L1730.81 688.888 L1731.37 688.888 L1731.93 688.888 L1732.49 688.888 L1733.05 688.888 L1733.61 688.888 L1734.17 688.888 L1734.73 688.888 L1735.29 688.888 L1735.85 688.888 L1736.41 688.888 L1736.97 688.888 L1737.52 688.888 L1738.08 688.888 L1738.64 688.888 L1739.2 688.888 L1739.76 688.888 L1740.32 688.888 L1740.88 688.888 L1741.44 688.888 L1742 688.888 L1742.56 688.888 L1743.12 688.888 L1743.68 688.888 L1744.24 688.888 L1744.79 688.888 L1745.35 688.888 L1745.91 688.888 L1746.47 688.888 L1747.03 688.888 L1747.59 688.888 L1748.15 688.888 L1748.71 688.888 L1749.27 688.888 L1749.83 688.888 L1750.39 688.888 L1750.95 688.888 L1751.51 688.888 L1752.06 688.888 L1752.62 688.888 L1753.18 688.888 L1753.74 688.888 L1754.3 688.888 L1754.86 688.888 L1755.42 688.888 L1755.98 688.888 L1756.54 688.888 L1757.1 688.888 L1757.66 688.888 L1758.22 688.888 L1758.78 688.888 L1759.34 688.888 L1759.89 688.888 L1760.45 688.888 L1761.01 688.888 L1761.57 688.888 L1762.13 688.888 L1762.69 688.888 L1763.25 688.888 L1763.81 688.888 L1764.37 688.888 L1764.93 688.888 L1765.49 688.888 L1766.05 688.888 L1766.61 688.888 L1767.16 688.888 L1767.72 688.888 L1768.28 688.888 L1768.84 688.888 L1769.4 688.888 L1769.96 688.888 L1770.52 688.888 L1771.08 688.888 L1771.64 688.888 L1772.2 688.888 L1772.76 688.888 L1773.32 688.888 L1773.88 688.888 L1774.43 688.888 L1774.99 688.888 L1775.55 688.888 L1776.11 688.888 L1776.67 688.888 L1777.23 688.888 L1777.79 688.888 L1778.35 688.888 L1778.91 688.888 L1779.47 688.888 L1780.03 688.888 L1780.59 688.888 L1781.15 688.888 L1781.71 688.888 L1782.26 688.888 L1782.82 688.888 L1783.38 688.888 L1783.94 688.888 L1784.5 688.888 L1785.06 688.888 L1785.62 688.888 L1786.18 688.888 L1786.74 688.888 L1787.3 688.888 L1787.86 688.888 L1788.42 688.888 L1788.98 688.888 L1789.53 688.888 L1790.09 688.888 L1790.65 688.888 L1791.21 688.888 L1791.77 688.888 L1792.33 688.888 L1792.89 688.888 L1793.45 688.888 L1794.01 688.888 L1794.57 688.888 L1795.13 688.888 L1795.69 688.888 L1796.25 688.888 L1796.8 688.888 L1797.36 688.888 L1797.92 688.888 L1798.48 688.888 L1799.04 688.888 L1799.6 688.888 L1800.16 688.888 L1800.72 688.888 L1801.28 688.888 L1801.84 688.888 L1802.4 688.888 L1802.96 688.888 L1803.52 688.888 L1804.08 688.888 L1804.63 688.888 L1805.19 688.888 L1805.75 688.888 L1806.31 688.888 L1806.87 688.888 L1807.43 688.888 L1807.99 688.888 L1808.55 688.888 L1809.11 688.888 L1809.67 688.888 L1810.23 688.888 L1810.79 688.888 L1811.35 688.888 L1811.9 688.888 L1812.46 688.888 L1813.02 688.888 L1813.58 688.888 L1814.14 688.888 L1814.7 688.888 L1815.26 688.888 L1815.82 688.888 L1816.38 688.888 L1816.94 688.888 L1817.5 688.888 L1818.06 688.888 L1818.62 688.888 L1819.18 688.888 L1819.73 688.888 L1820.29 688.888 L1820.85 688.888 L1821.41 688.888 L1821.97 688.888 L1822.53 688.888 L1823.09 688.888 L1823.65 688.888 L1824.21 688.888 L1824.77 688.888 L1825.33 688.888 L1825.89 688.888 L1826.45 688.888 L1827 688.888 L1827.56 688.888 L1828.12 688.888 L1828.68 688.888 L1829.24 688.888 L1829.8 688.888 L1830.36 688.888 L1830.92 688.888 L1831.48 688.888 L1832.04 688.888 L1832.6 688.888 L1833.16 688.888 L1833.72 688.888 L1834.27 688.888 L1834.83 688.888 L1835.39 688.888 L1835.95 688.888 L1836.51 688.888 L1837.07 688.888 L1837.63 688.888 L1838.19 688.888 L1838.19 681.225 L1837.63 681.225 L1837.07 681.225 L1836.51 681.225 L1835.95 681.225 L1835.39 681.225 L1834.83 681.225 L1834.27 681.225 L1833.72 681.225 L1833.16 681.225 L1832.6 681.225 L1832.04 681.225 L1831.48 681.225 L1830.92 681.225 L1830.36 681.225 L1829.8 681.225 L1829.24 681.225 L1828.68 681.225 L1828.12 681.225 L1827.56 681.225 L1827 681.225 L1826.45 681.225 L1825.89 681.225 L1825.33 681.225 L1824.77 681.225 L1824.21 681.225 L1823.65 681.225 L1823.09 681.225 L1822.53 681.225 L1821.97 681.225 L1821.41 681.225 L1820.85 681.225 L1820.29 681.225 L1819.73 681.225 L1819.18 681.225 L1818.62 681.225 L1818.06 681.225 L1817.5 681.225 L1816.94 681.225 L1816.38 681.225 L1815.82 681.225 L1815.26 681.225 L1814.7 681.225 L1814.14 681.225 L1813.58 681.225 L1813.02 681.225 L1812.46 681.225 L1811.9 681.225 L1811.35 681.225 L1810.79 681.225 L1810.23 681.225 L1809.67 681.225 L1809.11 681.225 L1808.55 681.225 L1807.99 681.225 L1807.43 681.225 L1806.87 681.225 L1806.31 681.225 L1805.75 681.225 L1805.19 681.225 L1804.63 681.225 L1804.08 681.225 L1803.52 681.225 L1802.96 681.225 L1802.4 681.225 L1801.84 681.225 L1801.28 681.225 L1800.72 681.225 L1800.16 681.225 L1799.6 681.225 L1799.04 681.225 L1798.48 681.225 L1797.92 681.225 L1797.36 681.225 L1796.8 681.225 L1796.25 681.225 L1795.69 681.225 L1795.13 681.225 L1794.57 681.225 L1794.01 681.225 L1793.45 681.225 L1792.89 681.225 L1792.33 681.225 L1791.77 681.225 L1791.21 681.225 L1790.65 681.225 L1790.09 681.225 L1789.53 681.225 L1788.98 681.225 L1788.42 681.225 L1787.86 681.225 L1787.3 681.225 L1786.74 681.225 L1786.18 681.225 L1785.62 681.225 L1785.06 681.225 L1784.5 681.225 L1783.94 681.225 L1783.38 681.225 L1782.82 681.225 L1782.26 681.225 L1781.71 681.225 L1781.15 681.225 L1780.59 681.225 L1780.03 681.225 L1779.47 681.225 L1778.91 681.225 L1778.35 681.225 L1777.79 681.225 L1777.23 681.225 L1776.67 681.225 L1776.11 681.225 L1775.55 681.225 L1774.99 681.225 L1774.43 681.225 L1773.88 681.225 L1773.32 681.225 L1772.76 681.225 L1772.2 681.225 L1771.64 681.225 L1771.08 681.225 L1770.52 681.225 L1769.96 681.225 L1769.4 681.225 L1768.84 681.225 L1768.28 681.225 L1767.72 681.225 L1767.16 681.225 L1766.61 681.225 L1766.05 681.225 L1765.49 681.225 L1764.93 681.225 L1764.37 681.225 L1763.81 681.225 L1763.25 681.225 L1762.69 681.225 L1762.13 681.225 L1761.57 681.225 L1761.01 681.225 L1760.45 681.225 L1759.89 681.225 L1759.34 681.225 L1758.78 681.225 L1758.22 681.225 L1757.66 681.225 L1757.1 681.225 L1756.54 681.225 L1755.98 681.225 L1755.42 681.225 L1754.86 681.225 L1754.3 681.225 L1753.74 681.225 L1753.18 681.225 L1752.62 681.225 L1752.06 681.225 L1751.51 681.225 L1750.95 681.225 L1750.39 681.225 L1749.83 681.225 L1749.27 681.225 L1748.71 681.225 L1748.15 681.225 L1747.59 681.225 L1747.03 681.225 L1746.47 681.225 L1745.91 681.225 L1745.35 681.225 L1744.79 681.225 L1744.24 681.225 L1743.68 681.225 L1743.12 681.225 L1742.56 681.225 L1742 681.225 L1741.44 681.225 L1740.88 681.225 L1740.32 681.225 L1739.76 681.225 L1739.2 681.225 L1738.64 681.225 L1738.08 681.225 L1737.52 681.225 L1736.97 681.225 L1736.41 681.225 L1735.85 681.225 L1735.29 681.225 L1734.73 681.225 L1734.17 681.225 L1733.61 681.225 L1733.05 681.225 L1732.49 681.225 L1731.93 681.225 L1731.37 681.225 L1730.81 681.225 L1730.25 681.225 L1729.69 681.225 L1729.14 681.225 L1728.58 681.225 L1728.02 681.225 L1727.46 681.225 L1726.9 681.225 L1726.34 681.225 L1725.78 681.225 L1725.22 681.225 L1724.66 681.225 L1724.1 681.225 L1723.54 681.225 L1722.98 681.225 L1722.42 681.225 L1721.87 681.225 L1721.31 681.225 L1720.75 681.225 L1720.19 681.225 L1719.63 681.225 L1719.07 681.225 L1718.51 681.225 L1717.95 681.225 L1717.39 681.225 L1716.83 681.225 L1716.27 681.225 L1715.71 681.225 L1715.15 681.225 L1714.6 681.225 L1714.04 681.225 L1713.48 681.225 L1712.92 681.225 L1712.36 681.225 L1711.8 681.225 L1711.24 681.225 L1710.68 681.225 L1710.12 681.225 L1709.56 681.225 L1709 681.225 L1708.44 681.225 L1707.88 681.225 L1707.32 681.225 L1706.77 681.225 L1706.21 681.225 L1705.65 681.225 L1705.09 681.225 L1704.53 681.225 L1703.97 681.225 L1703.41 681.225 L1702.85 681.225 L1702.29 681.225 L1701.73 681.225 L1701.17 681.225 L1700.61 681.225 L1700.05 681.225 L1699.5 681.225 L1698.94 681.225 L1698.38 681.225 L1697.82 681.225 L1697.26 681.225 L1696.7 681.225 L1696.14 681.225 L1695.58 681.225 L1695.02 681.225 L1694.46 681.225 L1693.9 681.225 L1693.34 681.225 L1692.78 681.225 L1692.23 681.225 L1691.67 681.225 L1691.11 681.225 L1690.55 681.225 L1689.99 681.225 L1689.43 681.225 L1688.87 681.225 L1688.31 681.225 L1687.75 681.225 L1687.19 681.225 L1686.63 681.225 L1686.07 681.225 L1685.51 681.225 L1684.95 681.225 L1684.4 681.225 L1683.84 681.225 L1683.28 681.225 L1682.72 681.225 L1682.16 681.225 L1681.6 681.225 L1681.04 681.225 L1680.48 681.225 L1679.92 681.225 L1679.36 681.225 L1678.8 681.225 L1678.24 681.225 L1677.68 681.225 L1677.13 681.225 L1676.57 681.225 L1676.01 681.225 L1675.45 681.225 L1674.89 681.225 L1674.33 681.225 L1673.77 681.225 L1673.21 681.225 L1672.65 681.225 L1672.09 681.225 L1671.53 681.225 L1670.97 681.225 L1670.41 681.225 L1669.85 681.225 L1669.3 681.225 L1668.74 681.225 L1668.18 681.225 L1667.62 681.225 L1667.06 681.225 L1666.5 681.225 L1665.94 681.225 L1665.38 681.225 L1664.82 681.225 L1664.26 681.225 L1663.7 681.225 L1663.14 681.225 L1662.58 681.225 L1662.03 681.225 L1661.47 681.225 L1660.91 681.225 L1660.35 681.225 L1659.79 681.225 L1659.23 681.225 L1658.67 681.225 L1658.11 681.225 L1657.55 681.225 L1656.99 681.225 L1656.43 681.225 L1655.87 681.225 L1655.31 681.225 L1654.76 681.225 L1654.2 681.225 L1653.64 681.225 L1653.08 681.225 L1652.52 681.225 L1651.96 681.225 L1651.4 681.225 L1650.84 681.225 L1650.28 681.225 L1649.72 681.225 L1649.16 681.225 L1648.6 681.225 L1648.04 681.225 L1647.48 681.225 L1646.93 681.225 L1646.37 681.225 L1645.81 681.225 L1645.25 681.225 L1644.69 681.225 L1644.13 681.225 L1643.57 681.225 L1643.01 681.225 L1642.45 681.225 L1641.89 681.225 L1641.33 681.225 L1640.77 681.225 L1640.21 681.225 L1639.66 681.225 L1639.1 681.225 L1638.54 681.225 L1637.98 681.225 L1637.42 681.225 L1636.86 681.225 L1636.3 681.225 L1635.74 681.225 L1635.18 681.225 L1634.62 681.225 L1634.06 681.225 L1633.5 681.225 L1632.94 681.225 L1632.39 681.225 L1631.83 681.225 L1631.27 681.225 L1630.71 681.225 L1630.15 681.225 L1629.59 681.225 L1629.03 681.225 L1628.47 681.225 L1627.91 681.225 L1627.35 681.225 L1626.79 681.225 L1626.23 681.225 L1625.67 681.225 L1625.11 681.225 L1624.56 681.225 L1624 681.225 L1623.44 681.225 L1622.88 681.225 L1622.32 681.225 L1621.76 681.225 L1621.2 681.225 L1620.64 681.225 L1620.08 681.225 L1619.52 681.225 L1618.96 681.225 L1618.4 681.225 L1617.84 681.225 L1617.29 681.225 L1616.73 681.225 L1616.17 681.225 L1615.61 681.225 L1615.05 681.225 L1614.49 681.225 L1613.93 681.225 L1613.37 681.225 L1612.81 681.225 L1612.25 681.225 L1611.69 681.225 L1611.13 681.225 L1610.57 681.225 L1610.02 681.225 L1609.46 681.225 L1608.9 681.225 L1608.34 681.225 L1607.78 681.225 L1607.22 681.225 L1606.66 681.225 L1606.1 681.225 L1605.54 681.225 L1604.98 681.225 L1604.42 681.225 L1603.86 681.225 L1603.3 681.225 L1602.74 681.225 L1602.19 681.225 L1601.63 681.225 L1601.07 681.225 L1600.51 681.225 L1599.95 681.225 L1599.39 681.225 L1598.83 681.225 L1598.27 681.225 L1597.71 681.225 L1597.15 681.225 L1596.59 681.225 L1596.03 681.225 L1595.47 681.225 L1594.92 681.225 L1594.36 681.225 L1593.8 681.225 L1593.24 681.225 L1592.68 681.225 L1592.12 681.225 L1591.56 681.225 L1591 681.225 L1590.44 681.225 L1589.88 681.225 L1589.32 681.225 L1588.76 681.225 L1588.2 681.225 L1587.65 681.225 L1587.09 681.225 L1586.53 681.225 L1585.97 681.225 L1585.41 681.225 L1584.85 681.225 L1584.29 681.225 L1583.73 681.225 L1583.17 681.225 L1582.61 681.225 L1582.05 681.225 L1581.49 681.225 L1580.93 681.225 L1580.37 681.225 L1579.82 681.225 L1579.26 681.225 L1578.7 681.225 L1578.14 681.225 L1577.58 681.225 L1577.02 681.225 L1576.46 681.225 L1575.9 681.225 L1575.34 681.225 L1574.78 681.225 L1574.22 681.225 L1573.66 681.225 L1573.1 681.225 L1572.55 681.225 L1571.99 681.225 L1571.43 681.225 L1570.87 681.225 L1570.31 681.225 L1569.75 681.225 L1569.19 681.225 L1568.63 681.225 L1568.07 681.225 L1567.51 681.225 L1566.95 681.225 L1566.39 681.225 L1565.83 681.225 L1565.28 681.225 L1564.72 681.225 L1564.16 681.225 L1563.6 681.225 L1563.04 681.225 L1562.48 681.225 L1561.92 681.225 L1561.36 681.225 L1560.8 681.225 L1560.24 681.225 L1559.68 681.225 L1559.12 681.225 L1558.56 681.225 L1558 681.225 L1557.45 681.225 L1556.89 681.225 L1556.33 681.225 L1555.77 681.225 L1555.21 681.225 L1554.65 681.225 L1554.09 681.225 L1553.53 681.225 L1552.97 681.225 L1552.41 681.225 L1551.85 681.225 L1551.29 681.225 L1550.73 681.225 L1550.18 681.225 L1549.62 681.225 L1549.06 681.225 L1548.5 681.225 L1547.94 681.225 L1547.38 681.225 L1546.82 681.225 L1546.26 681.225 L1545.7 681.225 L1545.14 681.225 L1544.58 681.225 L1544.02 681.225 L1543.46 681.225 L1542.9 681.225 L1542.35 681.225 L1541.79 681.225 L1541.23 681.225 L1540.67 681.225 L1540.11 681.225 L1539.55 681.225 L1538.99 681.225 L1538.43 681.225 L1537.87 681.225 L1537.31 681.225 L1536.75 681.225 L1536.19 681.225 L1535.63 681.225 L1535.08 681.225 L1534.52 681.225 L1533.96 681.225 L1533.4 681.225 L1532.84 681.225 L1532.28 681.225 L1531.72 681.225 L1531.16 681.225 L1530.6 681.225 L1530.04 681.225 L1529.48 681.225 L1528.92 681.225 L1528.36 681.225 L1527.81 681.225 L1527.25 681.225 L1526.69 681.225 L1526.13 681.225 L1525.57 681.225 L1525.01 681.225 L1524.45 681.225 L1523.89 681.225 L1523.33 681.225 L1522.77 681.225 L1522.21 681.225 L1521.65 681.225 L1521.09 681.225 L1520.53 681.225 L1519.98 681.225 L1519.42 681.225 L1518.86 681.225 L1518.3 681.225 L1517.74 681.225 L1517.18 681.225 L1516.62 681.225 L1516.06 681.225 L1515.5 681.225 L1514.94 681.225 L1514.38 681.225 L1513.82 681.225 L1513.26 681.225 L1512.71 681.225 L1512.15 681.225 L1511.59 681.225 L1511.03 681.225 L1510.47 681.225 L1509.91 681.225 L1509.35 681.225 L1508.79 681.225 L1508.23 681.225 L1507.67 681.225 L1507.11 681.225 L1506.55 681.225 L1505.99 681.225 L1505.44 681.225 L1504.88 681.225 L1504.32 681.225 L1503.76 681.225 L1503.2 681.225 L1502.64 681.225 L1502.08 681.225 L1501.52 681.225 L1500.96 681.225 L1500.4 681.225 L1499.84 681.225 L1499.28 681.225 L1498.72 681.225 L1498.16 681.225 L1497.61 681.225 L1497.05 681.225 L1496.49 681.225 L1495.93 681.225 L1495.37 681.225 L1494.81 681.225 L1494.25 681.225 L1493.69 681.225 L1493.13 681.225 L1492.57 681.225 L1492.01 681.225 L1491.45 681.225 L1490.89 681.225 L1490.34 681.225 L1489.78 681.225 L1489.22 681.225 L1488.66 681.225 L1488.1 681.225 L1487.54 681.225 L1486.98 681.225 L1486.42 681.225 L1485.86 681.225 L1485.3 681.225 L1484.74 681.225 L1484.18 681.225 L1483.62 681.225 L1483.07 681.225 L1482.51 681.225 L1481.95 681.225 L1481.39 681.225 L1480.83 681.225 L1480.27 681.225 L1479.71 681.225 L1479.15 681.225 L1478.59 681.225 L1478.03 681.225 L1477.47 681.225 L1476.91 681.225 L1476.35 681.225 L1475.79 681.225 L1475.24 681.225 L1474.68 681.225 L1474.12 681.225 L1473.56 681.225 L1473 681.225 L1472.44 681.225 L1471.88 681.225 L1471.32 681.225 L1470.76 681.225 L1470.2 681.225 L1469.64 681.225 L1469.08 681.225 L1468.52 681.225 L1467.97 681.225 L1467.41 681.225 L1466.85 681.225 L1466.29 681.225 L1465.73 681.225 L1465.17 681.225 L1464.61 681.225 L1464.05 681.225 L1463.49 681.225 L1462.93 681.225 L1462.37 681.225 L1461.81 681.225 L1461.25 681.225 L1460.7 681.225 L1460.14 681.225 L1459.58 681.225 L1459.02 681.225 L1458.46 681.225 L1457.9 681.225 L1457.34 681.225 L1456.78 681.225 L1456.22 681.225 L1455.66 681.225 L1455.1 681.225 L1454.54 681.225 L1453.98 681.225 L1453.42 681.225 L1452.87 681.225 L1452.31 681.225 L1451.75 681.225 L1451.19 681.225 L1450.63 681.225 L1450.07 681.225 L1449.51 681.225 L1448.95 681.225 L1448.39 681.225 L1447.83 681.225 L1447.27 681.225 L1446.71 681.225 L1446.15 681.225 L1445.6 681.225 L1445.04 681.225 L1444.48 681.225 L1443.92 681.225 L1443.36 681.225 L1442.8 681.225 L1442.24 681.225 L1441.68 681.225 L1441.12 681.225 L1440.56 681.225 L1440 681.225 L1439.44 681.225 L1438.88 681.225 L1438.33 681.225 L1437.77 681.225 L1437.21 681.225 L1436.65 681.225 L1436.09 681.225 L1435.53 681.225 L1434.97 681.225 L1434.41 681.225 L1433.85 681.225 L1433.29 681.225 L1432.73 681.225 L1432.17 681.225 L1431.61 681.225 L1431.05 681.225 L1430.5 681.225 L1429.94 681.225 L1429.38 681.225 L1428.82 681.225 L1428.26 681.225 L1427.7 681.225 L1427.14 681.225 L1426.58 681.225 L1426.02 681.225 L1425.46 681.225 L1424.9 681.225 L1424.34 681.225 L1423.78 681.225 L1423.23 681.225 L1422.67 681.225 L1422.11 681.225 L1421.55 681.225 L1420.99 681.225 L1420.43 681.225 L1419.87 681.225 L1419.31 681.225 L1418.75 681.225 L1418.19 681.225 L1417.63 681.225 L1417.07 681.225 L1416.51 681.225 L1415.95 681.225 L1415.4 681.225 L1414.84 681.225 L1414.28 681.225 L1413.72 681.225 L1413.16 681.225 L1412.6 681.225 L1412.04 681.225 L1411.48 681.225 L1410.92 681.225 L1410.36 681.225 L1409.8 681.225 L1409.24 681.225 L1408.68 681.225 L1408.13 681.225 L1407.57 681.225 L1407.01 681.225 L1406.45 681.225 L1405.89 681.225 L1405.33 681.225 L1404.77 681.225 L1404.21 681.225 L1403.65 681.225 L1403.09 681.225 L1402.53 681.225 L1401.97 681.225 L1401.41 681.225 L1400.86 681.225 L1400.3 681.225 L1399.74 681.225 L1399.18 681.225 L1398.62 681.225 L1398.06 681.225 L1397.5 681.225 L1396.94 681.225 L1396.38 681.225 L1395.82 681.225 L1395.26 681.225 L1394.7 681.225 L1394.14 681.225 L1393.58 681.225 L1393.03 681.225 L1392.47 681.225 L1391.91 681.225 L1391.35 681.225 L1390.79 681.225 L1390.23 681.225 L1389.67 681.225 L1389.11 681.225 L1388.55 681.225 L1387.99 681.225 L1387.43 681.225 L1386.87 681.225 L1386.31 681.225 L1385.76 681.225 L1385.2 681.225 L1384.64 681.225 L1384.08 681.225 L1383.52 681.225 L1382.96 681.225 L1382.4 681.225 L1381.84 681.225 L1381.28 681.225 L1380.72 681.225 L1380.16 681.225 L1379.6 681.225 L1379.04 681.225 L1378.49 681.225 L1377.93 681.225 L1377.37 681.225 L1376.81 681.225 L1376.25 681.225 L1375.69 681.225 L1375.13 681.225 L1374.57 681.225 L1374.01 681.225 L1373.45 681.225 L1372.89 681.225 L1372.33 681.225 L1371.77 681.225 L1371.21 681.225 L1370.66 681.225 L1370.1 681.225 L1369.54 681.225 L1368.98 681.225 L1368.42 681.225 L1367.86 681.225 L1367.3 681.225 L1366.74 681.225 L1366.18 681.225 L1365.62 681.225 L1365.06 681.225 L1364.5 681.225 L1363.94 681.225 L1363.39 681.225 L1362.83 681.225 L1362.27 681.225 L1361.71 681.225 L1361.15 681.225 L1360.59 681.225 L1360.03 681.225 L1359.47 681.225 L1358.91 681.225 L1358.35 681.225 L1357.79 681.225 L1357.23 681.225 L1356.67 681.225 L1356.12 681.225 L1355.56 681.225 L1355 681.225 L1354.44 681.225 L1353.88 681.225 L1353.32 681.225 L1352.76 681.225 L1352.2 681.225 L1351.64 681.225 L1351.08 681.225 L1350.52 681.225 L1349.96 681.225 L1349.4 681.225 L1348.84 681.225 L1348.29 681.225 L1347.73 681.225 L1347.17 681.225 L1346.61 681.225 L1346.05 681.225 L1345.49 681.225 L1344.93 681.225 L1344.37 681.225 L1343.81 681.225 L1343.25 681.225 L1342.69 681.225 L1342.13 681.225 L1341.57 681.225 L1341.02 681.225 L1340.46 681.225 L1339.9 681.225 L1339.34 681.225 L1338.78 681.225 L1338.22 681.225 L1337.66 681.225 L1337.1 681.225 L1336.54 681.225 L1335.98 681.225 L1335.42 681.225 L1334.86 681.225 L1334.3 681.225 L1333.75 681.225 L1333.19 681.225 L1332.63 681.225 L1332.07 681.225 L1331.51 681.225 L1330.95 681.225 L1330.39 681.225 L1329.83 681.225 L1329.27 681.225 L1328.71 681.225 L1328.15 681.225 L1327.59 681.225 L1327.03 681.225 L1326.47 681.225 L1325.92 681.225 L1325.36 681.225 L1324.8 681.225 L1324.24 681.225 L1323.68 681.225 L1323.12 681.225 L1322.56 681.225 L1322 681.225 L1321.44 681.225 L1320.88 681.225 L1320.32 681.225 L1319.76 681.225 L1319.2 681.225 L1318.65 681.225 L1318.09 681.225 L1317.53 681.225 L1316.97 681.225 L1316.41 681.225 L1315.85 681.225 L1315.29 681.225 L1314.73 681.225 L1314.17 681.225 L1313.61 681.225 L1313.05 681.225 L1312.49 681.225 L1311.93 681.225 L1311.38 681.225 L1310.82 681.225 L1310.26 681.225 L1309.7 681.225 L1309.14 681.225 L1308.58 681.225 L1308.02 681.225 L1307.46 681.225 L1306.9 681.225 L1306.34 681.225 L1305.78 681.225 L1305.22 681.225 L1304.66 681.225 L1304.1 681.225 L1303.55 681.225 L1302.99 681.225 L1302.43 681.225 L1301.87 681.225 L1301.31 681.225 L1300.75 681.225 L1300.19 681.225 L1299.63 681.225 L1299.07 681.225 L1298.51 681.225 L1297.95 681.225 L1297.39 681.225 L1296.83 681.225 L1296.28 681.225 L1295.72 681.225 L1295.16 681.225 L1294.6 681.225 L1294.04 681.225 L1293.48 681.225 L1292.92 681.225 L1292.36 681.225 L1291.8 681.225 L1291.24 681.225 L1290.68 681.225 L1290.12 681.225 L1289.56 681.225 L1289 681.225 L1288.45 681.225 L1287.89 681.225 L1287.33 681.225 L1286.77 681.225 L1286.21 681.225 L1285.65 681.225 L1285.09 681.225 L1284.53 681.225 L1283.97 681.225 L1283.41 681.225 L1282.85 681.225 L1282.29 681.225 L1281.73 681.225 L1281.18 681.225 L1280.62 681.225 L1280.06 681.225 L1279.5 681.225 L1278.94 681.225 L1278.38 681.225 L1277.82 681.225 L1277.26 681.225 L1276.7 681.225 L1276.14 681.225 L1275.58 681.225 L1275.02 681.225 L1274.46 681.225 L1273.91 681.225 L1273.35 681.225 L1272.79 681.225 L1272.23 681.225 L1271.67 681.225 L1271.11 681.225 L1270.55 681.225 L1269.99 681.225 L1269.43 681.225 L1268.87 681.225 L1268.31 681.225 L1267.75 681.225 L1267.19 681.225 L1266.63 681.225 L1266.08 681.225 L1265.52 681.225 L1264.96 681.225 L1264.4 681.225 L1263.84 681.225 L1263.28 681.225 L1262.72 681.225 L1262.16 681.225 L1261.6 681.225 L1261.04 681.225 L1260.48 681.225 L1259.92 681.225 L1259.36 681.225 L1258.81 681.225 L1258.25 681.225 L1257.69 681.225 L1257.13 681.225 L1256.57 681.225 L1256.01 681.225 L1255.45 681.225 L1254.89 681.225 L1254.33 681.225 L1253.77 681.225 L1253.21 681.225 L1252.65 681.225 L1252.09 681.225 L1251.54 681.225 L1250.98 681.225 L1250.42 681.225 L1249.86 681.225 L1249.3 681.225 L1248.74 681.225 L1248.18 681.225 L1247.62 681.225 L1247.06 681.225 L1246.5 681.225 L1245.94 681.225 L1245.38 681.225 L1244.82 681.225 L1244.26 681.225 L1243.71 681.225 L1243.15 681.225 L1242.59 681.225 L1242.03 681.225 L1241.47 681.225 L1240.91 681.225 L1240.35 681.225 L1239.79 681.225 L1239.23 681.225 L1238.67 681.225 L1238.11 681.225 L1237.55 681.225 L1236.99 681.225 L1236.44 681.225 L1235.88 681.225 L1235.32 681.225 L1234.76 681.225 L1234.2 681.225 L1233.64 681.225 L1233.08 681.225 L1232.52 681.225 L1231.96 681.225 L1231.4 681.225 L1230.84 681.225 L1230.28 681.225 L1229.72 681.225 L1229.17 681.225 L1228.61 681.225 L1228.05 681.225 L1227.49 681.225 L1226.93 681.225 L1226.37 681.225 L1225.81 681.225 L1225.25 681.225 L1224.69 681.225 L1224.13 681.225 L1223.57 681.225 L1223.01 681.225 L1222.45 681.225 L1221.89 681.225 L1221.34 681.225 L1220.78 681.225 L1220.22 681.225 L1219.66 681.225 L1219.1 681.225 L1218.54 681.225 L1217.98 681.225 L1217.42 681.225 L1216.86 681.225 L1216.3 681.225 L1215.74 681.225 L1215.18 681.225 L1214.62 681.225 L1214.07 681.225 L1213.51 681.225 L1212.95 681.225 L1212.39 681.225 L1211.83 681.225 L1211.27 681.225 L1210.71 681.225 L1210.15 681.225 L1209.59 681.225 L1209.03 681.225 L1208.47 681.225 L1207.91 681.225 L1207.35 681.225 L1206.8 681.225 L1206.24 681.225 L1205.68 681.225 L1205.12 681.225 L1204.56 681.225 L1204 681.225 L1203.44 681.225 L1202.88 681.225 L1202.32 681.225 L1201.76 681.225 L1201.2 681.225 L1200.64 681.225 L1200.08 681.225 L1199.52 681.225 L1198.97 681.225 L1198.41 681.225 L1197.85 681.225 L1197.29 681.225 L1196.73 681.225 L1196.17 681.225 L1195.61 681.225 L1195.05 681.225 L1194.49 681.225 L1193.93 681.225 L1193.37 681.225 L1192.81 681.225 L1192.25 681.225 L1191.7 681.225 L1191.14 681.225 L1190.58 681.225 L1190.02 681.225 L1189.46 681.225 L1188.9 681.225 L1188.34 681.225 L1187.78 681.225 L1187.22 681.225 L1186.66 681.225 L1186.1 681.225 L1185.54 681.225 L1184.98 681.225 L1184.43 681.225 L1183.87 681.225 L1183.31 681.225 L1182.75 681.225 L1182.19 681.225 L1181.63 681.225 L1181.07 681.225 L1180.51 681.225 L1179.95 681.225 L1179.39 681.225 L1178.83 681.225 L1178.27 681.225 L1177.71 681.225 L1177.15 681.225 L1176.6 681.225 L1176.04 681.225 L1175.48 681.225 L1174.92 681.225 L1174.36 681.225 L1173.8 681.225 L1173.24 681.225 L1172.68 681.225 L1172.12 681.225 L1171.56 681.225 L1171 681.225 L1170.44 681.225 L1169.88 681.225 L1169.33 681.225 L1168.77 681.225 L1168.21 681.225 L1167.65 681.225 L1167.09 681.225 L1166.53 681.225 L1165.97 681.225 L1165.41 681.225 L1164.85 681.225 L1164.29 681.225 L1163.73 681.225 L1163.17 681.225 L1162.61 681.225 L1162.05 681.225 L1161.5 681.225 L1160.94 681.225 L1160.38 681.225 L1159.82 681.225 L1159.26 681.225 L1158.7 681.225 L1158.14 681.225 L1157.58 681.225 L1157.02 681.225 L1156.46 681.225 L1155.9 681.225 L1155.34 681.225 L1154.78 681.225 L1154.23 681.225 L1153.67 681.225 L1153.11 681.225 L1152.55 681.225 L1151.99 681.225 L1151.43 681.225 L1150.87 681.225 L1150.31 681.225 L1149.75 681.225 L1149.19 681.225 L1148.63 681.225 L1148.07 681.225 L1147.51 681.225 L1146.96 681.225 L1146.4 681.225 L1145.84 681.225 L1145.28 681.225 L1144.72 681.225 L1144.16 681.225 L1143.6 681.225 L1143.04 681.225 L1142.48 681.225 L1141.92 681.225 L1141.36 681.225 L1140.8 681.225 L1140.24 681.225 L1139.68 681.225 L1139.13 681.225 L1138.57 681.225 L1138.01 681.225 L1137.45 681.225 L1136.89 681.225 L1136.33 681.225 L1135.77 681.225 L1135.21 681.225 L1134.65 681.225 L1134.09 681.225 L1133.53 681.225 L1132.97 681.225 L1132.41 681.225 L1131.86 681.225 L1131.3 681.225 L1130.74 681.225 L1130.18 681.225 L1129.62 681.225 L1129.06 681.225 L1128.5 681.225 L1127.94 681.225 L1127.38 681.225 L1126.82 681.225 L1126.26 681.225 L1125.7 681.225 L1125.14 681.225 L1124.59 681.225 L1124.03 681.225 L1123.47 681.225 L1122.91 681.225 L1122.35 681.225 L1121.79 681.225 L1121.23 681.225 L1120.67 681.225 L1120.11 681.225 L1119.55 681.225 L1118.99 681.225 L1118.43 681.225 L1117.87 681.225 L1117.31 681.225 L1116.76 681.225 L1116.2 681.225 L1115.64 681.225 L1115.08 681.225 L1114.52 681.225 L1113.96 681.225 L1113.4 681.225 L1112.84 681.225 L1112.28 681.225 L1111.72 681.225 L1111.16 681.225 L1110.6 681.225 L1110.04 681.225 L1109.49 681.225 L1108.93 681.225 L1108.37 681.225 L1107.81 681.225 L1107.25 681.225 L1106.69 681.225 L1106.13 681.225 L1105.57 681.225 L1105.01 681.225 L1104.45 681.225 L1103.89 681.225 L1103.33 681.225 L1102.77 681.225 L1102.22 681.225 L1101.66 681.225 L1101.1 681.225 L1100.54 681.225 L1099.98 681.225 L1099.42 681.225 L1098.86 681.225 L1098.3 681.225 L1097.74 681.225 L1097.18 681.225 L1096.62 681.225 L1096.06 681.225 L1095.5 681.225 L1094.94 681.225 L1094.39 681.225 L1093.83 681.225 L1093.27 681.225 L1092.71 681.225 L1092.15 681.225 L1091.59 681.225 L1091.03 681.225 L1090.47 681.225 L1089.91 681.225 L1089.35 681.225 L1088.79 681.225 L1088.23 681.225 L1087.67 681.225 L1087.12 681.225 L1086.56 681.225 L1086 681.225 L1085.44 681.225 L1084.88 681.225 L1084.32 681.225 L1083.76 681.225 L1083.2 681.225 L1082.64 681.225 L1082.08 681.225 L1081.52 681.225 L1080.96 681.225 L1080.4 681.225 L1079.85 681.225 L1079.29 681.225 L1078.73 681.225 L1078.17 681.225 L1077.61 681.225 L1077.05 681.225 L1076.49 681.225 L1075.93 681.225 L1075.37 681.225 L1074.81 681.225 L1074.25 681.225 L1073.69 681.225 L1073.13 681.225 L1072.57 681.225 L1072.02 681.225 L1071.46 681.225 L1070.9 681.225 L1070.34 681.225 L1069.78 681.225 L1069.22 681.225 L1068.66 681.225 L1068.1 681.225 L1067.54 681.225 L1066.98 681.225 L1066.42 681.225 L1065.86 681.225 L1065.3 681.225 L1064.75 681.225 L1064.19 681.225 L1063.63 681.225 L1063.07 681.225 L1062.51 681.225 L1061.95 681.225 L1061.39 681.225 L1060.83 681.225 L1060.27 681.225 L1059.71 681.225 L1059.15 681.225 L1058.59 681.225 L1058.03 681.225 L1057.48 681.225 L1056.92 681.225 L1056.36 681.225 L1055.8 681.225 L1055.24 681.225 L1054.68 681.225 L1054.12 681.225 L1053.56 681.225 L1053 681.225 L1052.44 681.225 L1051.88 681.225 L1051.32 681.225 L1050.76 681.225 L1050.2 681.225 L1049.65 681.225 L1049.09 681.225 L1048.53 681.225 L1047.97 681.225 L1047.41 681.225 L1046.85 681.225 L1046.29 681.225 L1045.73 681.225 L1045.17 681.225 L1044.61 681.225 L1044.05 681.225 L1043.49 681.225 L1042.93 681.225 L1042.38 681.225 L1041.82 681.225 L1041.26 681.225 L1040.7 681.225 L1040.14 681.225 L1039.58 681.225 L1039.02 681.225 L1038.46 681.225 L1037.9 681.225 L1037.34 681.225 L1036.78 681.225 L1036.22 681.225 L1035.66 681.225 L1035.1 681.225 L1034.55 681.225 L1033.99 681.225 L1033.43 681.225 L1032.87 681.225 L1032.31 681.225 L1031.75 681.225 L1031.19 681.225 L1030.63 681.225 L1030.07 681.225 L1029.51 681.225 L1028.95 681.225 L1028.39 681.225 L1027.83 681.225 L1027.28 681.225 L1026.72 681.225 L1026.16 681.225 L1025.6 681.225 L1025.04 681.225 L1024.48 681.225 L1023.92 681.225 L1023.36 681.225 L1022.8 681.225 L1022.24 681.225 L1021.68 681.225 L1021.12 681.225 L1020.56 681.225 L1020.01 681.225 L1019.45 681.225 L1018.89 681.225 L1018.33 681.225 L1017.77 681.225 L1017.21 681.225 L1016.65 681.225 L1016.09 681.225 L1015.53 681.225 L1014.97 681.225 L1014.41 681.225 L1013.85 681.225 L1013.29 681.225 L1012.73 681.225 L1012.18 681.225 L1011.62 681.225 L1011.06 681.225 L1010.5 681.225 L1009.94 681.225 L1009.38 681.225 L1008.82 681.225 L1008.26 681.225 L1007.7 681.225 L1007.14 681.225 L1006.58 681.225 L1006.02 681.225 L1005.46 681.225 L1004.91 681.225 L1004.35 681.225 L1003.79 681.225 L1003.23 681.225 L1002.67 681.225 L1002.11 681.225 L1001.55 681.225 L1000.99 681.225 L1000.43 681.225 L999.872 681.225 L999.313 681.225 L998.754 681.225 L998.194 681.225 L997.635 681.225 L997.076 681.225 L996.517 681.225 L995.957 681.225 L995.398 681.225 L994.839 681.225 L994.28 681.225 L993.72 681.225 L993.161 681.225 L992.602 681.225 L992.043 681.225 L991.483 681.225 L990.924 681.225 L990.365 681.225 L989.806 681.225 L989.246 681.225 L988.687 681.225 L988.128 681.225 L987.569 681.225 L987.009 681.225 L986.45 681.225 L985.891 681.225 L985.332 681.225 L984.772 681.225 L984.213 681.225 L983.654 681.225 L983.095 681.225 L982.535 681.225 L981.976 681.225 L981.417 681.225 L980.858 681.225 L980.298 681.225 L979.739 681.225 L979.18 681.225 L978.621 681.225 L978.061 681.225 L977.502 681.225 L976.943 681.225 L976.384 681.225 L975.824 681.225 L975.265 681.225 L974.706 681.225 L974.147 681.225 L973.587 681.225 L973.028 681.225 L972.469 681.225 L971.91 681.225 L971.35 681.225 L970.791 681.225 L970.232 681.225 L969.673 681.225 L969.113 681.225 L968.554 681.225 L967.995 681.225 L967.436 681.225 L966.876 681.225 L966.317 681.225 L965.758 681.225 L965.199 681.225 L964.639 681.225 L964.08 681.225 L963.521 681.225 L962.962 681.225 L962.402 681.225 L961.843 681.225 L961.284 681.225 L960.725 681.225 L960.165 681.225 L959.606 681.225 L959.047 681.225 L958.488 681.225 L957.928 681.225 L957.369 681.225 L956.81 681.225 L956.251 681.225 L955.691 681.225 L955.132 681.225 L954.573 681.225 L954.014 681.225 L953.454 681.225 L952.895 681.225 L952.336 681.225 L951.777 681.225 L951.217 681.225 L950.658 681.225 L950.099 681.225 L949.54 681.225 L948.98 681.225 L948.421 681.225 L947.862 681.225 L947.303 681.225 L946.743 681.225 L946.184 681.225 L945.625 681.225 L945.066 681.225 L944.506 681.225 L943.947 681.225 L943.388 681.225 L942.829 681.225 L942.269 681.225 L941.71 681.225 L941.151 681.225 L940.592 681.225 L940.032 681.225 L939.473 681.225 L938.914 681.225 L938.355 681.225 L937.795 681.225 L937.236 681.225 L936.677 681.225 L936.118 681.225 L935.558 681.225 L934.999 681.225 L934.44 681.225 L933.881 681.225 L933.321 681.225 L932.762 681.225 L932.203 681.225 L931.644 681.225 L931.084 681.225 L930.525 681.225 L929.966 681.225 L929.406 681.225 L928.847 681.225 L928.288 681.225 L927.729 681.225 L927.169 681.225 L926.61 681.225 L926.051 681.225 L925.492 681.225 L924.932 681.225 L924.373 681.225 L923.814 681.225 L923.255 681.225 L922.695 681.225 L922.136 681.225 L921.577 681.225 L921.018 681.225 L920.458 681.225 L919.899 681.225 L919.34 681.225 L918.781 681.225 L918.221 681.225 L917.662 681.225 L917.103 681.225 L916.544 681.225 L915.984 681.225 L915.425 681.225 L914.866 681.225 L914.307 681.225 L913.747 681.225 L913.188 681.225 L912.629 681.225 L912.07 681.225 L911.51 681.225 L910.951 681.225 L910.392 681.225 L909.833 681.225 L909.273 681.225 L908.714 681.225 L908.155 681.225 L907.596 681.225 L907.036 681.225 L906.477 681.225 L905.918 681.225 L905.359 681.225 L904.799 681.225 L904.24 681.225 L903.681 681.225 L903.122 681.225 L902.562 681.225 L902.003 681.225 L901.444 681.225 L900.885 681.225 L900.325 681.225 L899.766 681.225 L899.207 681.225 L898.648 681.225 L898.088 681.225 L897.529 681.225 L896.97 681.225 L896.411 681.225 L895.851 681.225 L895.292 681.225 L894.733 681.225 L894.174 681.225 L893.614 681.225 L893.055 681.225 L892.496 681.225 L891.937 681.225 L891.377 681.225 L890.818 681.225 L890.259 681.225 L889.7 681.225 L889.14 681.225 L888.581 681.225 L888.022 681.225 L887.463 681.225 L886.903 681.225 L886.344 681.225 L885.785 681.225 L885.226 681.225 L884.666 681.225 L884.107 681.225 L883.548 681.225 L882.989 681.225 L882.429 681.225 L881.87 681.225 L881.311 681.225 L880.752 681.225 L880.192 681.225 L879.633 681.225 L879.074 681.225 L878.515 681.225 L877.955 681.225 L877.396 681.225 L876.837 681.225 L876.278 681.225 L875.718 681.225 L875.159 681.225 L874.6 681.225 L874.041 681.225 L873.481 681.225 L872.922 681.225 L872.363 681.225 L871.804 681.225 L871.244 681.225 L870.685 681.225 L870.126 681.225 L869.567 681.225 L869.007 681.225 L868.448 681.225 L867.889 681.225 L867.33 681.225 L866.77 681.225 L866.211 681.225 L865.652 681.225 L865.093 681.225 L864.533 681.225 L863.974 681.225 L863.415 681.225 L862.856 681.225 L862.296 681.225 L861.737 681.225 L861.178 681.225 L860.619 681.225 L860.059 681.225 L859.5 681.225 L858.941 681.225 L858.382 681.225 L857.822 681.225 L857.263 681.225 L856.704 681.225 L856.145 681.225 L855.585 681.225 L855.026 681.225 L854.467 681.225 L853.908 681.225 L853.348 681.225 L852.789 681.225 L852.23 681.225 L851.671 681.225 L851.111 681.225 L850.552 681.225 L849.993 681.225 L849.434 681.225 L848.874 681.225 L848.315 681.225 L847.756 681.225 L847.197 681.225 L846.637 681.225 L846.078 681.225 L845.519 681.225 L844.96 681.225 L844.4 681.225 L843.841 681.225 L843.282 681.225 L842.723 681.225 L842.163 681.225 L841.604 681.225 L841.045 681.225 L840.486 681.225 L839.926 681.225 L839.367 681.225 L838.808 681.225 L838.249 681.225 L837.689 681.225 L837.13 681.225 L836.571 681.225 L836.012 681.225 L835.452 681.225 L834.893 681.225 L834.334 681.225 L833.775 681.225 L833.215 681.225 L832.656 681.225 L832.097 681.225 L831.538 681.225 L830.978 681.225 L830.419 681.225 L829.86 681.225 L829.301 681.225 L828.741 681.225 L828.182 681.225 L827.623 681.225 L827.064 681.225 L826.504 681.225 L825.945 681.225 L825.386 681.225 L824.827 681.225 L824.267 681.225 L823.708 681.225 L823.149 681.225 L822.59 681.225 L822.03 681.225 L821.471 681.225 L820.912 681.225 L820.353 681.225 L819.793 681.225 L819.234 681.225 L818.675 681.225 L818.116 681.225 L817.556 681.225 L816.997 681.225 L816.438 681.225 L815.879 681.225 L815.319 681.225 L814.76 681.225 L814.201 681.225 L813.642 681.225 L813.082 681.225 L812.523 681.225 L811.964 681.225 L811.405 681.225 L810.845 681.225 L810.286 681.225 L809.727 681.225 L809.168 681.225 L808.608 681.225 L808.049 681.225 L807.49 681.225 L806.931 681.225 L806.371 681.225 L805.812 681.225 L805.253 681.225 L804.693 681.225 L804.134 681.225 L803.575 681.225 L803.016 681.225 L802.456 681.225 L801.897 681.225 L801.338 681.225 L800.779 681.225 L800.219 681.225 L799.66 681.225 L799.101 681.225 L798.542 681.225 L797.982 681.225 L797.423 681.225 L796.864 681.225 L796.305 681.225 L795.745 681.225 L795.186 681.225 L794.627 681.225 L794.068 681.225 L793.508 681.225 L792.949 681.225 L792.39 681.225 L791.831 681.225 L791.271 681.225 L790.712 681.225 L790.153 681.225 L789.594 681.225 L789.034 681.225 L788.475 681.225 L787.916 681.225 L787.357 681.225 L786.797 681.225 L786.238 681.225 L785.679 681.225 L785.12 681.225 L784.56 681.225 L784.001 681.225 L783.442 681.225 L782.883 681.225 L782.323 681.225 L781.764 681.225 L781.205 681.225 L780.646 681.225 L780.086 681.225 L779.527 681.225 L778.968 681.225 L778.409 681.225 L777.849 681.225 L777.29 681.225 L776.731 681.225 L776.172 681.225 L775.612 681.225 L775.053 681.225 L774.494 681.225 L773.935 681.225 L773.375 681.225 L772.816 681.225 L772.257 681.225 L771.698 681.225 L771.138 681.225 L770.579 681.225 L770.02 681.225 L769.461 681.225 L768.901 681.225 L768.342 681.225 L767.783 681.225 L767.224 681.225 L766.664 681.225 L766.105 681.225 L765.546 681.225 L764.987 681.225 L764.427 681.225 L763.868 681.225 L763.309 681.225 L762.75 681.225 L762.19 681.225 L761.631 681.225 L761.072 681.225 L760.513 681.225 L759.953 681.225 L759.394 681.225 L758.835 681.225 L758.276 681.225 L757.716 681.225 L757.157 681.225 L756.598 681.225 L756.039 681.225 L755.479 681.225 L754.92 681.225 L754.361 681.225 L753.802 681.225 L753.242 681.225 L752.683 681.225 L752.124 681.225 L751.565 681.225 L751.005 681.225 L750.446 681.225 L749.887 681.225 L749.328 681.225 L748.768 681.225 L748.209 681.225 L747.65 681.225 L747.091 681.225 L746.531 681.225 L745.972 681.225 L745.413 681.225 L744.854 681.225 L744.294 681.225 L743.735 681.225 L743.176 681.225 L742.617 681.225 L742.057 681.225 L741.498 681.225 L740.939 681.225 L740.38 681.225 L739.82 681.225 L739.261 681.225 L738.702 681.225 L738.143 681.225 L737.583 681.225 L737.024 681.225 L736.465 681.225 L735.906 681.225 L735.346 681.225 L734.787 681.225 L734.228 681.225 L733.669 681.225 L733.109 681.225 L732.55 681.225 L731.991 681.225 L731.432 681.225 L730.872 681.225 L730.313 681.225 L729.754 681.225 L729.195 681.225 L728.635 681.225 L728.076 681.225 L727.517 681.225 L726.958 681.225 L726.398 681.225 L725.839 681.225 L725.28 681.225 L724.721 681.225 L724.161 681.225 L723.602 681.225 L723.043 681.225 L722.484 681.225 L721.924 681.225 L721.365 681.225 L720.806 681.225 L720.247 681.225  Z\" fill=\"#e26f46\" fill-rule=\"evenodd\" fill-opacity=\"0.5\"/>\n<polyline clip-path=\"url(#clip153)\" style=\"stroke:#e26f46; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"720.247,685.056 720.806,685.056 721.365,685.056 721.924,685.056 722.484,685.056 723.043,685.056 723.602,685.056 724.161,685.056 724.721,685.056 725.28,685.056 725.839,685.056 726.398,685.056 726.958,685.056 727.517,685.056 728.076,685.056 728.635,685.056 729.195,685.056 729.754,685.056 730.313,685.056 730.872,685.056 731.432,685.056 731.991,685.056 732.55,685.056 733.109,685.056 733.669,685.056 734.228,685.056 734.787,685.056 735.346,685.056 735.906,685.056 736.465,685.056 737.024,685.056 737.583,685.056 738.143,685.056 738.702,685.056 739.261,685.056 739.82,685.056 740.38,685.056 740.939,685.056 741.498,685.056 742.057,685.056 742.617,685.056 743.176,685.056 743.735,685.056 744.294,685.056 744.854,685.056 745.413,685.056 745.972,685.056 746.531,685.056 747.091,685.056 747.65,685.056 748.209,685.056 748.768,685.056 749.328,685.056 749.887,685.056 750.446,685.056 751.005,685.056 751.565,685.056 752.124,685.056 752.683,685.056 753.242,685.056 753.802,685.056 754.361,685.056 754.92,685.056 755.479,685.056 756.039,685.056 756.598,685.056 757.157,685.056 757.716,685.056 758.276,685.056 758.835,685.056 759.394,685.056 759.953,685.056 760.513,685.056 761.072,685.056 761.631,685.056 762.19,685.056 762.75,685.056 763.309,685.056 763.868,685.056 764.427,685.056 764.987,685.056 765.546,685.056 766.105,685.056 766.664,685.056 767.224,685.056 767.783,685.056 768.342,685.056 768.901,685.056 769.461,685.056 770.02,685.056 770.579,685.056 771.138,685.056 771.698,685.056 772.257,685.056 772.816,685.056 773.375,685.056 773.935,685.056 774.494,685.056 775.053,685.056 775.612,685.056 776.172,685.056 776.731,685.056 777.29,685.056 777.849,685.056 778.409,685.056 778.968,685.056 779.527,685.056 780.086,685.056 780.646,685.056 781.205,685.056 781.764,685.056 782.323,685.056 782.883,685.056 783.442,685.056 784.001,685.056 784.56,685.056 785.12,685.056 785.679,685.056 786.238,685.056 786.797,685.056 787.357,685.056 787.916,685.056 788.475,685.056 789.034,685.056 789.594,685.056 790.153,685.056 790.712,685.056 791.271,685.056 791.831,685.056 792.39,685.056 792.949,685.056 793.508,685.056 794.068,685.056 794.627,685.056 795.186,685.056 795.745,685.056 796.305,685.056 796.864,685.056 797.423,685.056 797.982,685.056 798.542,685.056 799.101,685.056 799.66,685.056 800.219,685.056 800.779,685.056 801.338,685.056 801.897,685.056 802.456,685.056 803.016,685.056 803.575,685.056 804.134,685.056 804.693,685.056 805.253,685.056 805.812,685.056 806.371,685.056 806.931,685.056 807.49,685.056 808.049,685.056 808.608,685.056 809.168,685.056 809.727,685.056 810.286,685.056 810.845,685.056 811.405,685.056 811.964,685.056 812.523,685.056 813.082,685.056 813.642,685.056 814.201,685.056 814.76,685.056 815.319,685.056 815.879,685.056 816.438,685.056 816.997,685.056 817.556,685.056 818.116,685.056 818.675,685.056 819.234,685.056 819.793,685.056 820.353,685.056 820.912,685.056 821.471,685.056 822.03,685.056 822.59,685.056 823.149,685.056 823.708,685.056 824.267,685.056 824.827,685.056 825.386,685.056 825.945,685.056 826.504,685.056 827.064,685.056 827.623,685.056 828.182,685.056 828.741,685.056 829.301,685.056 829.86,685.056 830.419,685.056 830.978,685.056 831.538,685.056 832.097,685.056 832.656,685.056 833.215,685.056 833.775,685.056 834.334,685.056 834.893,685.056 835.452,685.056 836.012,685.056 836.571,685.056 837.13,685.056 837.689,685.056 838.249,685.056 838.808,685.056 839.367,685.056 839.926,685.056 840.486,685.056 841.045,685.056 841.604,685.056 842.163,685.056 842.723,685.056 843.282,685.056 843.841,685.056 844.4,685.056 844.96,685.056 845.519,685.056 846.078,685.056 846.637,685.056 847.197,685.056 847.756,685.056 848.315,685.056 848.874,685.056 849.434,685.056 849.993,685.056 850.552,685.056 851.111,685.056 851.671,685.056 852.23,685.056 852.789,685.056 853.348,685.056 853.908,685.056 854.467,685.056 855.026,685.056 855.585,685.056 856.145,685.056 856.704,685.056 857.263,685.056 857.822,685.056 858.382,685.056 858.941,685.056 859.5,685.056 860.059,685.056 860.619,685.056 861.178,685.056 861.737,685.056 862.296,685.056 862.856,685.056 863.415,685.056 863.974,685.056 864.533,685.056 865.093,685.056 865.652,685.056 866.211,685.056 866.77,685.056 867.33,685.056 867.889,685.056 868.448,685.056 869.007,685.056 869.567,685.056 870.126,685.056 870.685,685.056 871.244,685.056 871.804,685.056 872.363,685.056 872.922,685.056 873.481,685.056 874.041,685.056 874.6,685.056 875.159,685.056 875.718,685.056 876.278,685.056 876.837,685.056 877.396,685.056 877.955,685.056 878.515,685.056 879.074,685.056 879.633,685.056 880.192,685.056 880.752,685.056 881.311,685.056 881.87,685.056 882.429,685.056 882.989,685.056 883.548,685.056 884.107,685.056 884.666,685.056 885.226,685.056 885.785,685.056 886.344,685.056 886.903,685.056 887.463,685.056 888.022,685.056 888.581,685.056 889.14,685.056 889.7,685.056 890.259,685.056 890.818,685.056 891.377,685.056 891.937,685.056 892.496,685.056 893.055,685.056 893.614,685.056 894.174,685.056 894.733,685.056 895.292,685.056 895.851,685.056 896.411,685.056 896.97,685.056 897.529,685.056 898.088,685.056 898.648,685.056 899.207,685.056 899.766,685.056 900.325,685.056 900.885,685.056 901.444,685.056 902.003,685.056 902.562,685.056 903.122,685.056 903.681,685.056 904.24,685.056 904.799,685.056 905.359,685.056 905.918,685.056 906.477,685.056 907.036,685.056 907.596,685.056 908.155,685.056 908.714,685.056 909.273,685.056 909.833,685.056 910.392,685.056 910.951,685.056 911.51,685.056 912.07,685.056 912.629,685.056 913.188,685.056 913.747,685.056 914.307,685.056 914.866,685.056 915.425,685.056 915.984,685.056 916.544,685.056 917.103,685.056 917.662,685.056 918.221,685.056 918.781,685.056 919.34,685.056 919.899,685.056 920.458,685.056 921.018,685.056 921.577,685.056 922.136,685.056 922.695,685.056 923.255,685.056 923.814,685.056 924.373,685.056 924.932,685.056 925.492,685.056 926.051,685.056 926.61,685.056 927.169,685.056 927.729,685.056 928.288,685.056 928.847,685.056 929.406,685.056 929.966,685.056 930.525,685.056 931.084,685.056 931.644,685.056 932.203,685.056 932.762,685.056 933.321,685.056 933.881,685.056 934.44,685.056 934.999,685.056 935.558,685.056 936.118,685.056 936.677,685.056 937.236,685.056 937.795,685.056 938.355,685.056 938.914,685.056 939.473,685.056 940.032,685.056 940.592,685.056 941.151,685.056 941.71,685.056 942.269,685.056 942.829,685.056 943.388,685.056 943.947,685.056 944.506,685.056 945.066,685.056 945.625,685.056 946.184,685.056 946.743,685.056 947.303,685.056 947.862,685.056 948.421,685.056 948.98,685.056 949.54,685.056 950.099,685.056 950.658,685.056 951.217,685.056 951.777,685.056 952.336,685.056 952.895,685.056 953.454,685.056 954.014,685.056 954.573,685.056 955.132,685.056 955.691,685.056 956.251,685.056 956.81,685.056 957.369,685.056 957.928,685.056 958.488,685.056 959.047,685.056 959.606,685.056 960.165,685.056 960.725,685.056 961.284,685.056 961.843,685.056 962.402,685.056 962.962,685.056 963.521,685.056 964.08,685.056 964.639,685.056 965.199,685.056 965.758,685.056 966.317,685.056 966.876,685.056 967.436,685.056 967.995,685.056 968.554,685.056 969.113,685.056 969.673,685.056 970.232,685.056 970.791,685.056 971.35,685.056 971.91,685.056 972.469,685.056 973.028,685.056 973.587,685.056 974.147,685.056 974.706,685.056 975.265,685.056 975.824,685.056 976.384,685.056 976.943,685.056 977.502,685.056 978.061,685.056 978.621,685.056 979.18,685.056 979.739,685.056 980.298,685.056 980.858,685.056 981.417,685.056 981.976,685.056 982.535,685.056 983.095,685.056 983.654,685.056 984.213,685.056 984.772,685.056 985.332,685.056 985.891,685.056 986.45,685.056 987.009,685.056 987.569,685.056 988.128,685.056 988.687,685.056 989.246,685.056 989.806,685.056 990.365,685.056 990.924,685.056 991.483,685.056 992.043,685.056 992.602,685.056 993.161,685.056 993.72,685.056 994.28,685.056 994.839,685.056 995.398,685.056 995.957,685.056 996.517,685.056 997.076,685.056 997.635,685.056 998.194,685.056 998.754,685.056 999.313,685.056 999.872,685.056 1000.43,685.056 1000.99,685.056 1001.55,685.056 1002.11,685.056 1002.67,685.056 1003.23,685.056 1003.79,685.056 1004.35,685.056 1004.91,685.056 1005.46,685.056 1006.02,685.056 1006.58,685.056 1007.14,685.056 1007.7,685.056 1008.26,685.056 1008.82,685.056 1009.38,685.056 1009.94,685.056 1010.5,685.056 1011.06,685.056 1011.62,685.056 1012.18,685.056 1012.73,685.056 1013.29,685.056 1013.85,685.056 1014.41,685.056 1014.97,685.056 1015.53,685.056 1016.09,685.056 1016.65,685.056 1017.21,685.056 1017.77,685.056 1018.33,685.056 1018.89,685.056 1019.45,685.056 1020.01,685.056 1020.56,685.056 1021.12,685.056 1021.68,685.056 1022.24,685.056 1022.8,685.056 1023.36,685.056 1023.92,685.056 1024.48,685.056 1025.04,685.056 1025.6,685.056 1026.16,685.056 1026.72,685.056 1027.28,685.056 1027.83,685.056 1028.39,685.056 1028.95,685.056 1029.51,685.056 1030.07,685.056 1030.63,685.056 1031.19,685.056 1031.75,685.056 1032.31,685.056 1032.87,685.056 1033.43,685.056 1033.99,685.056 1034.55,685.056 1035.1,685.056 1035.66,685.056 1036.22,685.056 1036.78,685.056 1037.34,685.056 1037.9,685.056 1038.46,685.056 1039.02,685.056 1039.58,685.056 1040.14,685.056 1040.7,685.056 1041.26,685.056 1041.82,685.056 1042.38,685.056 1042.93,685.056 1043.49,685.056 1044.05,685.056 1044.61,685.056 1045.17,685.056 1045.73,685.056 1046.29,685.056 1046.85,685.056 1047.41,685.056 1047.97,685.056 1048.53,685.056 1049.09,685.056 1049.65,685.056 1050.2,685.056 1050.76,685.056 1051.32,685.056 1051.88,685.056 1052.44,685.056 1053,685.056 1053.56,685.056 1054.12,685.056 1054.68,685.056 1055.24,685.056 1055.8,685.056 1056.36,685.056 1056.92,685.056 1057.48,685.056 1058.03,685.056 1058.59,685.056 1059.15,685.056 1059.71,685.056 1060.27,685.056 1060.83,685.056 1061.39,685.056 1061.95,685.056 1062.51,685.056 1063.07,685.056 1063.63,685.056 1064.19,685.056 1064.75,685.056 1065.3,685.056 1065.86,685.056 1066.42,685.056 1066.98,685.056 1067.54,685.056 1068.1,685.056 1068.66,685.056 1069.22,685.056 1069.78,685.056 1070.34,685.056 1070.9,685.056 1071.46,685.056 1072.02,685.056 1072.57,685.056 1073.13,685.056 1073.69,685.056 1074.25,685.056 1074.81,685.056 1075.37,685.056 1075.93,685.056 1076.49,685.056 1077.05,685.056 1077.61,685.056 1078.17,685.056 1078.73,685.056 1079.29,685.056 1079.85,685.056 1080.4,685.056 1080.96,685.056 1081.52,685.056 1082.08,685.056 1082.64,685.056 1083.2,685.056 1083.76,685.056 1084.32,685.056 1084.88,685.056 1085.44,685.056 1086,685.056 1086.56,685.056 1087.12,685.056 1087.67,685.056 1088.23,685.056 1088.79,685.056 1089.35,685.056 1089.91,685.056 1090.47,685.056 1091.03,685.056 1091.59,685.056 1092.15,685.056 1092.71,685.056 1093.27,685.056 1093.83,685.056 1094.39,685.056 1094.94,685.056 1095.5,685.056 1096.06,685.056 1096.62,685.056 1097.18,685.056 1097.74,685.056 1098.3,685.056 1098.86,685.056 1099.42,685.056 1099.98,685.056 1100.54,685.056 1101.1,685.056 1101.66,685.056 1102.22,685.056 1102.77,685.056 1103.33,685.056 1103.89,685.056 1104.45,685.056 1105.01,685.056 1105.57,685.056 1106.13,685.056 1106.69,685.056 1107.25,685.056 1107.81,685.056 1108.37,685.056 1108.93,685.056 1109.49,685.056 1110.04,685.056 1110.6,685.056 1111.16,685.056 1111.72,685.056 1112.28,685.056 1112.84,685.056 1113.4,685.056 1113.96,685.056 1114.52,685.056 1115.08,685.056 1115.64,685.056 1116.2,685.056 1116.76,685.056 1117.31,685.056 1117.87,685.056 1118.43,685.056 1118.99,685.056 1119.55,685.056 1120.11,685.056 1120.67,685.056 1121.23,685.056 1121.79,685.056 1122.35,685.056 1122.91,685.056 1123.47,685.056 1124.03,685.056 1124.59,685.056 1125.14,685.056 1125.7,685.056 1126.26,685.056 1126.82,685.056 1127.38,685.056 1127.94,685.056 1128.5,685.056 1129.06,685.056 1129.62,685.056 1130.18,685.056 1130.74,685.056 1131.3,685.056 1131.86,685.056 1132.41,685.056 1132.97,685.056 1133.53,685.056 1134.09,685.056 1134.65,685.056 1135.21,685.056 1135.77,685.056 1136.33,685.056 1136.89,685.056 1137.45,685.056 1138.01,685.056 1138.57,685.056 1139.13,685.056 1139.68,685.056 1140.24,685.056 1140.8,685.056 1141.36,685.056 1141.92,685.056 1142.48,685.056 1143.04,685.056 1143.6,685.056 1144.16,685.056 1144.72,685.056 1145.28,685.056 1145.84,685.056 1146.4,685.056 1146.96,685.056 1147.51,685.056 1148.07,685.056 1148.63,685.056 1149.19,685.056 1149.75,685.056 1150.31,685.056 1150.87,685.056 1151.43,685.056 1151.99,685.056 1152.55,685.056 1153.11,685.056 1153.67,685.056 1154.23,685.056 1154.78,685.056 1155.34,685.056 1155.9,685.056 1156.46,685.056 1157.02,685.056 1157.58,685.056 1158.14,685.056 1158.7,685.056 1159.26,685.056 1159.82,685.056 1160.38,685.056 1160.94,685.056 1161.5,685.056 1162.05,685.056 1162.61,685.056 1163.17,685.056 1163.73,685.056 1164.29,685.056 1164.85,685.056 1165.41,685.056 1165.97,685.056 1166.53,685.056 1167.09,685.056 1167.65,685.056 1168.21,685.056 1168.77,685.056 1169.33,685.056 1169.88,685.056 1170.44,685.056 1171,685.056 1171.56,685.056 1172.12,685.056 1172.68,685.056 1173.24,685.056 1173.8,685.056 1174.36,685.056 1174.92,685.056 1175.48,685.056 1176.04,685.056 1176.6,685.056 1177.15,685.056 1177.71,685.056 1178.27,685.056 1178.83,685.056 1179.39,685.056 1179.95,685.056 1180.51,685.056 1181.07,685.056 1181.63,685.056 1182.19,685.056 1182.75,685.056 1183.31,685.056 1183.87,685.056 1184.43,685.056 1184.98,685.056 1185.54,685.056 1186.1,685.056 1186.66,685.056 1187.22,685.056 1187.78,685.056 1188.34,685.056 1188.9,685.056 1189.46,685.056 1190.02,685.056 1190.58,685.056 1191.14,685.056 1191.7,685.056 1192.25,685.056 1192.81,685.056 1193.37,685.056 1193.93,685.056 1194.49,685.056 1195.05,685.056 1195.61,685.056 1196.17,685.056 1196.73,685.056 1197.29,685.056 1197.85,685.056 1198.41,685.056 1198.97,685.056 1199.52,685.056 1200.08,685.056 1200.64,685.056 1201.2,685.056 1201.76,685.056 1202.32,685.056 1202.88,685.056 1203.44,685.056 1204,685.056 1204.56,685.056 1205.12,685.056 1205.68,685.056 1206.24,685.056 1206.8,685.056 1207.35,685.056 1207.91,685.056 1208.47,685.056 1209.03,685.056 1209.59,685.056 1210.15,685.056 1210.71,685.056 1211.27,685.056 1211.83,685.056 1212.39,685.056 1212.95,685.056 1213.51,685.056 1214.07,685.056 1214.62,685.056 1215.18,685.056 1215.74,685.056 1216.3,685.056 1216.86,685.056 1217.42,685.056 1217.98,685.056 1218.54,685.056 1219.1,685.056 1219.66,685.056 1220.22,685.056 1220.78,685.056 1221.34,685.056 1221.89,685.056 1222.45,685.056 1223.01,685.056 1223.57,685.056 1224.13,685.056 1224.69,685.056 1225.25,685.056 1225.81,685.056 1226.37,685.056 1226.93,685.056 1227.49,685.056 1228.05,685.056 1228.61,685.056 1229.17,685.056 1229.72,685.056 1230.28,685.056 1230.84,685.056 1231.4,685.056 1231.96,685.056 1232.52,685.056 1233.08,685.056 1233.64,685.056 1234.2,685.056 1234.76,685.056 1235.32,685.056 1235.88,685.056 1236.44,685.056 1236.99,685.056 1237.55,685.056 1238.11,685.056 1238.67,685.056 1239.23,685.056 1239.79,685.056 1240.35,685.056 1240.91,685.056 1241.47,685.056 1242.03,685.056 1242.59,685.056 1243.15,685.056 1243.71,685.056 1244.26,685.056 1244.82,685.056 1245.38,685.056 1245.94,685.056 1246.5,685.056 1247.06,685.056 1247.62,685.056 1248.18,685.056 1248.74,685.056 1249.3,685.056 1249.86,685.056 1250.42,685.056 1250.98,685.056 1251.54,685.056 1252.09,685.056 1252.65,685.056 1253.21,685.056 1253.77,685.056 1254.33,685.056 1254.89,685.056 1255.45,685.056 1256.01,685.056 1256.57,685.056 1257.13,685.056 1257.69,685.056 1258.25,685.056 1258.81,685.056 1259.36,685.056 1259.92,685.056 1260.48,685.056 1261.04,685.056 1261.6,685.056 1262.16,685.056 1262.72,685.056 1263.28,685.056 1263.84,685.056 1264.4,685.056 1264.96,685.056 1265.52,685.056 1266.08,685.056 1266.63,685.056 1267.19,685.056 1267.75,685.056 1268.31,685.056 1268.87,685.056 1269.43,685.056 1269.99,685.056 1270.55,685.056 1271.11,685.056 1271.67,685.056 1272.23,685.056 1272.79,685.056 1273.35,685.056 1273.91,685.056 1274.46,685.056 1275.02,685.056 1275.58,685.056 1276.14,685.056 1276.7,685.056 1277.26,685.056 1277.82,685.056 1278.38,685.056 1278.94,685.056 1279.5,685.056 1280.06,685.056 1280.62,685.056 1281.18,685.056 1281.73,685.056 1282.29,685.056 1282.85,685.056 1283.41,685.056 1283.97,685.056 1284.53,685.056 1285.09,685.056 1285.65,685.056 1286.21,685.056 1286.77,685.056 1287.33,685.056 1287.89,685.056 1288.45,685.056 1289,685.056 1289.56,685.056 1290.12,685.056 1290.68,685.056 1291.24,685.056 1291.8,685.056 1292.36,685.056 1292.92,685.056 1293.48,685.056 1294.04,685.056 1294.6,685.056 1295.16,685.056 1295.72,685.056 1296.28,685.056 1296.83,685.056 1297.39,685.056 1297.95,685.056 1298.51,685.056 1299.07,685.056 1299.63,685.056 1300.19,685.056 1300.75,685.056 1301.31,685.056 1301.87,685.056 1302.43,685.056 1302.99,685.056 1303.55,685.056 1304.1,685.056 1304.66,685.056 1305.22,685.056 1305.78,685.056 1306.34,685.056 1306.9,685.056 1307.46,685.056 1308.02,685.056 1308.58,685.056 1309.14,685.056 1309.7,685.056 1310.26,685.056 1310.82,685.056 1311.38,685.056 1311.93,685.056 1312.49,685.056 1313.05,685.056 1313.61,685.056 1314.17,685.056 1314.73,685.056 1315.29,685.056 1315.85,685.056 1316.41,685.056 1316.97,685.056 1317.53,685.056 1318.09,685.056 1318.65,685.056 1319.2,685.056 1319.76,685.056 1320.32,685.056 1320.88,685.056 1321.44,685.056 1322,685.056 1322.56,685.056 1323.12,685.056 1323.68,685.056 1324.24,685.056 1324.8,685.056 1325.36,685.056 1325.92,685.056 1326.47,685.056 1327.03,685.056 1327.59,685.056 1328.15,685.056 1328.71,685.056 1329.27,685.056 1329.83,685.056 1330.39,685.056 1330.95,685.056 1331.51,685.056 1332.07,685.056 1332.63,685.056 1333.19,685.056 1333.75,685.056 1334.3,685.056 1334.86,685.056 1335.42,685.056 1335.98,685.056 1336.54,685.056 1337.1,685.056 1337.66,685.056 1338.22,685.056 1338.78,685.056 1339.34,685.056 1339.9,685.056 1340.46,685.056 1341.02,685.056 1341.57,685.056 1342.13,685.056 1342.69,685.056 1343.25,685.056 1343.81,685.056 1344.37,685.056 1344.93,685.056 1345.49,685.056 1346.05,685.056 1346.61,685.056 1347.17,685.056 1347.73,685.056 1348.29,685.056 1348.84,685.056 1349.4,685.056 1349.96,685.056 1350.52,685.056 1351.08,685.056 1351.64,685.056 1352.2,685.056 1352.76,685.056 1353.32,685.056 1353.88,685.056 1354.44,685.056 1355,685.056 1355.56,685.056 1356.12,685.056 1356.67,685.056 1357.23,685.056 1357.79,685.056 1358.35,685.056 1358.91,685.056 1359.47,685.056 1360.03,685.056 1360.59,685.056 1361.15,685.056 1361.71,685.056 1362.27,685.056 1362.83,685.056 1363.39,685.056 1363.94,685.056 1364.5,685.056 1365.06,685.056 1365.62,685.056 1366.18,685.056 1366.74,685.056 1367.3,685.056 1367.86,685.056 1368.42,685.056 1368.98,685.056 1369.54,685.056 1370.1,685.056 1370.66,685.056 1371.21,685.056 1371.77,685.056 1372.33,685.056 1372.89,685.056 1373.45,685.056 1374.01,685.056 1374.57,685.056 1375.13,685.056 1375.69,685.056 1376.25,685.056 1376.81,685.056 1377.37,685.056 1377.93,685.056 1378.49,685.056 1379.04,685.056 1379.6,685.056 1380.16,685.056 1380.72,685.056 1381.28,685.056 1381.84,685.056 1382.4,685.056 1382.96,685.056 1383.52,685.056 1384.08,685.056 1384.64,685.056 1385.2,685.056 1385.76,685.056 1386.31,685.056 1386.87,685.056 1387.43,685.056 1387.99,685.056 1388.55,685.056 1389.11,685.056 1389.67,685.056 1390.23,685.056 1390.79,685.056 1391.35,685.056 1391.91,685.056 1392.47,685.056 1393.03,685.056 1393.58,685.056 1394.14,685.056 1394.7,685.056 1395.26,685.056 1395.82,685.056 1396.38,685.056 1396.94,685.056 1397.5,685.056 1398.06,685.056 1398.62,685.056 1399.18,685.056 1399.74,685.056 1400.3,685.056 1400.86,685.056 1401.41,685.056 1401.97,685.056 1402.53,685.056 1403.09,685.056 1403.65,685.056 1404.21,685.056 1404.77,685.056 1405.33,685.056 1405.89,685.056 1406.45,685.056 1407.01,685.056 1407.57,685.056 1408.13,685.056 1408.68,685.056 1409.24,685.056 1409.8,685.056 1410.36,685.056 1410.92,685.056 1411.48,685.056 1412.04,685.056 1412.6,685.056 1413.16,685.056 1413.72,685.056 1414.28,685.056 1414.84,685.056 1415.4,685.056 1415.95,685.056 1416.51,685.056 1417.07,685.056 1417.63,685.056 1418.19,685.056 1418.75,685.056 1419.31,685.056 1419.87,685.056 1420.43,685.056 1420.99,685.056 1421.55,685.056 1422.11,685.056 1422.67,685.056 1423.23,685.056 1423.78,685.056 1424.34,685.056 1424.9,685.056 1425.46,685.056 1426.02,685.056 1426.58,685.056 1427.14,685.056 1427.7,685.056 1428.26,685.056 1428.82,685.056 1429.38,685.056 1429.94,685.056 1430.5,685.056 1431.05,685.056 1431.61,685.056 1432.17,685.056 1432.73,685.056 1433.29,685.056 1433.85,685.056 1434.41,685.056 1434.97,685.056 1435.53,685.056 1436.09,685.056 1436.65,685.056 1437.21,685.056 1437.77,685.056 1438.33,685.056 1438.88,685.056 1439.44,685.056 1440,685.056 1440.56,685.056 1441.12,685.056 1441.68,685.056 1442.24,685.056 1442.8,685.056 1443.36,685.056 1443.92,685.056 1444.48,685.056 1445.04,685.056 1445.6,685.056 1446.15,685.056 1446.71,685.056 1447.27,685.056 1447.83,685.056 1448.39,685.056 1448.95,685.056 1449.51,685.056 1450.07,685.056 1450.63,685.056 1451.19,685.056 1451.75,685.056 1452.31,685.056 1452.87,685.056 1453.42,685.056 1453.98,685.056 1454.54,685.056 1455.1,685.056 1455.66,685.056 1456.22,685.056 1456.78,685.056 1457.34,685.056 1457.9,685.056 1458.46,685.056 1459.02,685.056 1459.58,685.056 1460.14,685.056 1460.7,685.056 1461.25,685.056 1461.81,685.056 1462.37,685.056 1462.93,685.056 1463.49,685.056 1464.05,685.056 1464.61,685.056 1465.17,685.056 1465.73,685.056 1466.29,685.056 1466.85,685.056 1467.41,685.056 1467.97,685.056 1468.52,685.056 1469.08,685.056 1469.64,685.056 1470.2,685.056 1470.76,685.056 1471.32,685.056 1471.88,685.056 1472.44,685.056 1473,685.056 1473.56,685.056 1474.12,685.056 1474.68,685.056 1475.24,685.056 1475.79,685.056 1476.35,685.056 1476.91,685.056 1477.47,685.056 1478.03,685.056 1478.59,685.056 1479.15,685.056 1479.71,685.056 1480.27,685.056 1480.83,685.056 1481.39,685.056 1481.95,685.056 1482.51,685.056 1483.07,685.056 1483.62,685.056 1484.18,685.056 1484.74,685.056 1485.3,685.056 1485.86,685.056 1486.42,685.056 1486.98,685.056 1487.54,685.056 1488.1,685.056 1488.66,685.056 1489.22,685.056 1489.78,685.056 1490.34,685.056 1490.89,685.056 1491.45,685.056 1492.01,685.056 1492.57,685.056 1493.13,685.056 1493.69,685.056 1494.25,685.056 1494.81,685.056 1495.37,685.056 1495.93,685.056 1496.49,685.056 1497.05,685.056 1497.61,685.056 1498.16,685.056 1498.72,685.056 1499.28,685.056 1499.84,685.056 1500.4,685.056 1500.96,685.056 1501.52,685.056 1502.08,685.056 1502.64,685.056 1503.2,685.056 1503.76,685.056 1504.32,685.056 1504.88,685.056 1505.44,685.056 1505.99,685.056 1506.55,685.056 1507.11,685.056 1507.67,685.056 1508.23,685.056 1508.79,685.056 1509.35,685.056 1509.91,685.056 1510.47,685.056 1511.03,685.056 1511.59,685.056 1512.15,685.056 1512.71,685.056 1513.26,685.056 1513.82,685.056 1514.38,685.056 1514.94,685.056 1515.5,685.056 1516.06,685.056 1516.62,685.056 1517.18,685.056 1517.74,685.056 1518.3,685.056 1518.86,685.056 1519.42,685.056 1519.98,685.056 1520.53,685.056 1521.09,685.056 1521.65,685.056 1522.21,685.056 1522.77,685.056 1523.33,685.056 1523.89,685.056 1524.45,685.056 1525.01,685.056 1525.57,685.056 1526.13,685.056 1526.69,685.056 1527.25,685.056 1527.81,685.056 1528.36,685.056 1528.92,685.056 1529.48,685.056 1530.04,685.056 1530.6,685.056 1531.16,685.056 1531.72,685.056 1532.28,685.056 1532.84,685.056 1533.4,685.056 1533.96,685.056 1534.52,685.056 1535.08,685.056 1535.63,685.056 1536.19,685.056 1536.75,685.056 1537.31,685.056 1537.87,685.056 1538.43,685.056 1538.99,685.056 1539.55,685.056 1540.11,685.056 1540.67,685.056 1541.23,685.056 1541.79,685.056 1542.35,685.056 1542.9,685.056 1543.46,685.056 1544.02,685.056 1544.58,685.056 1545.14,685.056 1545.7,685.056 1546.26,685.056 1546.82,685.056 1547.38,685.056 1547.94,685.056 1548.5,685.056 1549.06,685.056 1549.62,685.056 1550.18,685.056 1550.73,685.056 1551.29,685.056 1551.85,685.056 1552.41,685.056 1552.97,685.056 1553.53,685.056 1554.09,685.056 1554.65,685.056 1555.21,685.056 1555.77,685.056 1556.33,685.056 1556.89,685.056 1557.45,685.056 1558,685.056 1558.56,685.056 1559.12,685.056 1559.68,685.056 1560.24,685.056 1560.8,685.056 1561.36,685.056 1561.92,685.056 1562.48,685.056 1563.04,685.056 1563.6,685.056 1564.16,685.056 1564.72,685.056 1565.28,685.056 1565.83,685.056 1566.39,685.056 1566.95,685.056 1567.51,685.056 1568.07,685.056 1568.63,685.056 1569.19,685.056 1569.75,685.056 1570.31,685.056 1570.87,685.056 1571.43,685.056 1571.99,685.056 1572.55,685.056 1573.1,685.056 1573.66,685.056 1574.22,685.056 1574.78,685.056 1575.34,685.056 1575.9,685.056 1576.46,685.056 1577.02,685.056 1577.58,685.056 1578.14,685.056 1578.7,685.056 1579.26,685.056 1579.82,685.056 1580.37,685.056 1580.93,685.056 1581.49,685.056 1582.05,685.056 1582.61,685.056 1583.17,685.056 1583.73,685.056 1584.29,685.056 1584.85,685.056 1585.41,685.056 1585.97,685.056 1586.53,685.056 1587.09,685.056 1587.65,685.056 1588.2,685.056 1588.76,685.056 1589.32,685.056 1589.88,685.056 1590.44,685.056 1591,685.056 1591.56,685.056 1592.12,685.056 1592.68,685.056 1593.24,685.056 1593.8,685.056 1594.36,685.056 1594.92,685.056 1595.47,685.056 1596.03,685.056 1596.59,685.056 1597.15,685.056 1597.71,685.056 1598.27,685.056 1598.83,685.056 1599.39,685.056 1599.95,685.056 1600.51,685.056 1601.07,685.056 1601.63,685.056 1602.19,685.056 1602.74,685.056 1603.3,685.056 1603.86,685.056 1604.42,685.056 1604.98,685.056 1605.54,685.056 1606.1,685.056 1606.66,685.056 1607.22,685.056 1607.78,685.056 1608.34,685.056 1608.9,685.056 1609.46,685.056 1610.02,685.056 1610.57,685.056 1611.13,685.056 1611.69,685.056 1612.25,685.056 1612.81,685.056 1613.37,685.056 1613.93,685.056 1614.49,685.056 1615.05,685.056 1615.61,685.056 1616.17,685.056 1616.73,685.056 1617.29,685.056 1617.84,685.056 1618.4,685.056 1618.96,685.056 1619.52,685.056 1620.08,685.056 1620.64,685.056 1621.2,685.056 1621.76,685.056 1622.32,685.056 1622.88,685.056 1623.44,685.056 1624,685.056 1624.56,685.056 1625.11,685.056 1625.67,685.056 1626.23,685.056 1626.79,685.056 1627.35,685.056 1627.91,685.056 1628.47,685.056 1629.03,685.056 1629.59,685.056 1630.15,685.056 1630.71,685.056 1631.27,685.056 1631.83,685.056 1632.39,685.056 1632.94,685.056 1633.5,685.056 1634.06,685.056 1634.62,685.056 1635.18,685.056 1635.74,685.056 1636.3,685.056 1636.86,685.056 1637.42,685.056 1637.98,685.056 1638.54,685.056 1639.1,685.056 1639.66,685.056 1640.21,685.056 1640.77,685.056 1641.33,685.056 1641.89,685.056 1642.45,685.056 1643.01,685.056 1643.57,685.056 1644.13,685.056 1644.69,685.056 1645.25,685.056 1645.81,685.056 1646.37,685.056 1646.93,685.056 1647.48,685.056 1648.04,685.056 1648.6,685.056 1649.16,685.056 1649.72,685.056 1650.28,685.056 1650.84,685.056 1651.4,685.056 1651.96,685.056 1652.52,685.056 1653.08,685.056 1653.64,685.056 1654.2,685.056 1654.76,685.056 1655.31,685.056 1655.87,685.056 1656.43,685.056 1656.99,685.056 1657.55,685.056 1658.11,685.056 1658.67,685.056 1659.23,685.056 1659.79,685.056 1660.35,685.056 1660.91,685.056 1661.47,685.056 1662.03,685.056 1662.58,685.056 1663.14,685.056 1663.7,685.056 1664.26,685.056 1664.82,685.056 1665.38,685.056 1665.94,685.056 1666.5,685.056 1667.06,685.056 1667.62,685.056 1668.18,685.056 1668.74,685.056 1669.3,685.056 1669.85,685.056 1670.41,685.056 1670.97,685.056 1671.53,685.056 1672.09,685.056 1672.65,685.056 1673.21,685.056 1673.77,685.056 1674.33,685.056 1674.89,685.056 1675.45,685.056 1676.01,685.056 1676.57,685.056 1677.13,685.056 1677.68,685.056 1678.24,685.056 1678.8,685.056 1679.36,685.056 1679.92,685.056 1680.48,685.056 1681.04,685.056 1681.6,685.056 1682.16,685.056 1682.72,685.056 1683.28,685.056 1683.84,685.056 1684.4,685.056 1684.95,685.056 1685.51,685.056 1686.07,685.056 1686.63,685.056 1687.19,685.056 1687.75,685.056 1688.31,685.056 1688.87,685.056 1689.43,685.056 1689.99,685.056 1690.55,685.056 1691.11,685.056 1691.67,685.056 1692.23,685.056 1692.78,685.056 1693.34,685.056 1693.9,685.056 1694.46,685.056 1695.02,685.056 1695.58,685.056 1696.14,685.056 1696.7,685.056 1697.26,685.056 1697.82,685.056 1698.38,685.056 1698.94,685.056 1699.5,685.056 1700.05,685.056 1700.61,685.056 1701.17,685.056 1701.73,685.056 1702.29,685.056 1702.85,685.056 1703.41,685.056 1703.97,685.056 1704.53,685.056 1705.09,685.056 1705.65,685.056 1706.21,685.056 1706.77,685.056 1707.32,685.056 1707.88,685.056 1708.44,685.056 1709,685.056 1709.56,685.056 1710.12,685.056 1710.68,685.056 1711.24,685.056 1711.8,685.056 1712.36,685.056 1712.92,685.056 1713.48,685.056 1714.04,685.056 1714.6,685.056 1715.15,685.056 1715.71,685.056 1716.27,685.056 1716.83,685.056 1717.39,685.056 1717.95,685.056 1718.51,685.056 1719.07,685.056 1719.63,685.056 1720.19,685.056 1720.75,685.056 1721.31,685.056 1721.87,685.056 1722.42,685.056 1722.98,685.056 1723.54,685.056 1724.1,685.056 1724.66,685.056 1725.22,685.056 1725.78,685.056 1726.34,685.056 1726.9,685.056 1727.46,685.056 1728.02,685.056 1728.58,685.056 1729.14,685.056 1729.69,685.056 1730.25,685.056 1730.81,685.056 1731.37,685.056 1731.93,685.056 1732.49,685.056 1733.05,685.056 1733.61,685.056 1734.17,685.056 1734.73,685.056 1735.29,685.056 1735.85,685.056 1736.41,685.056 1736.97,685.056 1737.52,685.056 1738.08,685.056 1738.64,685.056 1739.2,685.056 1739.76,685.056 1740.32,685.056 1740.88,685.056 1741.44,685.056 1742,685.056 1742.56,685.056 1743.12,685.056 1743.68,685.056 1744.24,685.056 1744.79,685.056 1745.35,685.056 1745.91,685.056 1746.47,685.056 1747.03,685.056 1747.59,685.056 1748.15,685.056 1748.71,685.056 1749.27,685.056 1749.83,685.056 1750.39,685.056 1750.95,685.056 1751.51,685.056 1752.06,685.056 1752.62,685.056 1753.18,685.056 1753.74,685.056 1754.3,685.056 1754.86,685.056 1755.42,685.056 1755.98,685.056 1756.54,685.056 1757.1,685.056 1757.66,685.056 1758.22,685.056 1758.78,685.056 1759.34,685.056 1759.89,685.056 1760.45,685.056 1761.01,685.056 1761.57,685.056 1762.13,685.056 1762.69,685.056 1763.25,685.056 1763.81,685.056 1764.37,685.056 1764.93,685.056 1765.49,685.056 1766.05,685.056 1766.61,685.056 1767.16,685.056 1767.72,685.056 1768.28,685.056 1768.84,685.056 1769.4,685.056 1769.96,685.056 1770.52,685.056 1771.08,685.056 1771.64,685.056 1772.2,685.056 1772.76,685.056 1773.32,685.056 1773.88,685.056 1774.43,685.056 1774.99,685.056 1775.55,685.056 1776.11,685.056 1776.67,685.056 1777.23,685.056 1777.79,685.056 1778.35,685.056 1778.91,685.056 1779.47,685.056 1780.03,685.056 1780.59,685.056 1781.15,685.056 1781.71,685.056 1782.26,685.056 1782.82,685.056 1783.38,685.056 1783.94,685.056 1784.5,685.056 1785.06,685.056 1785.62,685.056 1786.18,685.056 1786.74,685.056 1787.3,685.056 1787.86,685.056 1788.42,685.056 1788.98,685.056 1789.53,685.056 1790.09,685.056 1790.65,685.056 1791.21,685.056 1791.77,685.056 1792.33,685.056 1792.89,685.056 1793.45,685.056 1794.01,685.056 1794.57,685.056 1795.13,685.056 1795.69,685.056 1796.25,685.056 1796.8,685.056 1797.36,685.056 1797.92,685.056 1798.48,685.056 1799.04,685.056 1799.6,685.056 1800.16,685.056 1800.72,685.056 1801.28,685.056 1801.84,685.056 1802.4,685.056 1802.96,685.056 1803.52,685.056 1804.08,685.056 1804.63,685.056 1805.19,685.056 1805.75,685.056 1806.31,685.056 1806.87,685.056 1807.43,685.056 1807.99,685.056 1808.55,685.056 1809.11,685.056 1809.67,685.056 1810.23,685.056 1810.79,685.056 1811.35,685.056 1811.9,685.056 1812.46,685.056 1813.02,685.056 1813.58,685.056 1814.14,685.056 1814.7,685.056 1815.26,685.056 1815.82,685.056 1816.38,685.056 1816.94,685.056 1817.5,685.056 1818.06,685.056 1818.62,685.056 1819.18,685.056 1819.73,685.056 1820.29,685.056 1820.85,685.056 1821.41,685.056 1821.97,685.056 1822.53,685.056 1823.09,685.056 1823.65,685.056 1824.21,685.056 1824.77,685.056 1825.33,685.056 1825.89,685.056 1826.45,685.056 1827,685.056 1827.56,685.056 1828.12,685.056 1828.68,685.056 1829.24,685.056 1829.8,685.056 1830.36,685.056 1830.92,685.056 1831.48,685.056 1832.04,685.056 1832.6,685.056 1833.16,685.056 1833.72,685.056 1834.27,685.056 1834.83,685.056 1835.39,685.056 1835.95,685.056 1836.51,685.056 1837.07,685.056 1837.63,685.056 1838.19,685.056 \"/>\n<path clip-path=\"url(#clip153)\" d=\"M720.247 684.271 L720.806 684.271 L721.365 684.271 L721.924 684.271 L722.484 684.271 L723.043 684.271 L723.602 684.271 L724.161 684.271 L724.721 684.271 L725.28 684.271 L725.839 684.271 L726.398 684.271 L726.958 684.271 L727.517 684.271 L728.076 684.271 L728.635 684.271 L729.195 684.271 L729.754 684.271 L730.313 684.271 L730.872 684.271 L731.432 684.271 L731.991 684.271 L732.55 684.271 L733.109 684.271 L733.669 684.271 L734.228 684.271 L734.787 684.271 L735.346 684.271 L735.906 684.271 L736.465 684.271 L737.024 684.271 L737.583 684.271 L738.143 684.271 L738.702 684.271 L739.261 684.271 L739.82 684.271 L740.38 684.271 L740.939 684.271 L741.498 684.271 L742.057 684.271 L742.617 684.271 L743.176 684.271 L743.735 684.271 L744.294 684.271 L744.854 684.271 L745.413 684.271 L745.972 684.271 L746.531 684.271 L747.091 684.271 L747.65 684.271 L748.209 684.271 L748.768 684.271 L749.328 684.271 L749.887 684.271 L750.446 684.271 L751.005 684.271 L751.565 684.271 L752.124 684.271 L752.683 684.271 L753.242 684.271 L753.802 684.271 L754.361 684.271 L754.92 684.271 L755.479 684.271 L756.039 684.271 L756.598 684.271 L757.157 684.271 L757.716 684.271 L758.276 684.271 L758.835 684.271 L759.394 684.271 L759.953 684.271 L760.513 684.271 L761.072 684.271 L761.631 684.271 L762.19 684.271 L762.75 684.271 L763.309 684.271 L763.868 684.271 L764.427 684.271 L764.987 684.271 L765.546 684.271 L766.105 684.271 L766.664 684.271 L767.224 684.271 L767.783 684.271 L768.342 684.271 L768.901 684.271 L769.461 684.271 L770.02 684.271 L770.579 684.271 L771.138 684.271 L771.698 684.271 L772.257 684.271 L772.816 684.271 L773.375 684.271 L773.935 684.271 L774.494 684.271 L775.053 684.271 L775.612 684.271 L776.172 684.271 L776.731 684.271 L777.29 684.271 L777.849 684.271 L778.409 684.271 L778.968 684.271 L779.527 684.271 L780.086 684.271 L780.646 684.271 L781.205 684.271 L781.764 684.271 L782.323 684.271 L782.883 684.271 L783.442 684.271 L784.001 684.271 L784.56 684.271 L785.12 684.271 L785.679 684.271 L786.238 684.271 L786.797 684.271 L787.357 684.271 L787.916 684.271 L788.475 684.271 L789.034 684.271 L789.594 684.271 L790.153 684.271 L790.712 684.271 L791.271 684.271 L791.831 684.271 L792.39 684.271 L792.949 684.271 L793.508 684.271 L794.068 684.271 L794.627 684.271 L795.186 684.271 L795.745 684.271 L796.305 684.271 L796.864 684.271 L797.423 684.271 L797.982 684.271 L798.542 684.271 L799.101 684.271 L799.66 684.271 L800.219 684.271 L800.779 684.271 L801.338 684.271 L801.897 684.271 L802.456 684.271 L803.016 684.271 L803.575 684.271 L804.134 684.271 L804.693 684.271 L805.253 684.271 L805.812 684.271 L806.371 684.271 L806.931 684.271 L807.49 684.271 L808.049 684.271 L808.608 684.271 L809.168 684.271 L809.727 684.271 L810.286 684.271 L810.845 684.271 L811.405 684.271 L811.964 684.271 L812.523 684.271 L813.082 684.271 L813.642 684.271 L814.201 684.271 L814.76 684.271 L815.319 684.271 L815.879 684.271 L816.438 684.271 L816.997 684.271 L817.556 684.271 L818.116 684.271 L818.675 684.271 L819.234 684.271 L819.793 684.271 L820.353 684.271 L820.912 684.271 L821.471 684.271 L822.03 684.271 L822.59 684.271 L823.149 684.271 L823.708 684.271 L824.267 684.271 L824.827 684.271 L825.386 684.271 L825.945 684.271 L826.504 684.271 L827.064 684.271 L827.623 684.271 L828.182 684.271 L828.741 684.271 L829.301 684.271 L829.86 684.271 L830.419 684.271 L830.978 684.271 L831.538 684.271 L832.097 684.271 L832.656 684.271 L833.215 684.271 L833.775 684.271 L834.334 684.271 L834.893 684.271 L835.452 684.271 L836.012 684.271 L836.571 684.271 L837.13 684.271 L837.689 684.271 L838.249 684.271 L838.808 684.271 L839.367 684.271 L839.926 684.271 L840.486 684.271 L841.045 684.271 L841.604 684.271 L842.163 684.271 L842.723 684.271 L843.282 684.271 L843.841 684.271 L844.4 684.271 L844.96 684.271 L845.519 684.271 L846.078 684.271 L846.637 684.271 L847.197 684.271 L847.756 684.271 L848.315 684.271 L848.874 684.271 L849.434 684.271 L849.993 684.271 L850.552 684.271 L851.111 684.271 L851.671 684.271 L852.23 684.271 L852.789 684.271 L853.348 684.271 L853.908 684.271 L854.467 684.271 L855.026 684.271 L855.585 684.271 L856.145 684.271 L856.704 684.271 L857.263 684.271 L857.822 684.271 L858.382 684.271 L858.941 684.271 L859.5 684.271 L860.059 684.271 L860.619 684.271 L861.178 684.271 L861.737 684.271 L862.296 684.271 L862.856 684.271 L863.415 684.271 L863.974 684.271 L864.533 684.271 L865.093 684.271 L865.652 684.271 L866.211 684.271 L866.77 684.271 L867.33 684.271 L867.889 684.271 L868.448 684.271 L869.007 684.271 L869.567 684.271 L870.126 684.271 L870.685 684.271 L871.244 684.271 L871.804 684.271 L872.363 684.271 L872.922 684.271 L873.481 684.271 L874.041 684.271 L874.6 684.271 L875.159 684.271 L875.718 684.271 L876.278 684.271 L876.837 684.271 L877.396 684.271 L877.955 684.271 L878.515 684.271 L879.074 684.271 L879.633 684.271 L880.192 684.271 L880.752 684.271 L881.311 684.271 L881.87 684.271 L882.429 684.271 L882.989 684.271 L883.548 684.271 L884.107 684.271 L884.666 684.271 L885.226 684.271 L885.785 684.271 L886.344 684.271 L886.903 684.271 L887.463 684.271 L888.022 684.271 L888.581 684.271 L889.14 684.271 L889.7 684.271 L890.259 684.271 L890.818 684.271 L891.377 684.271 L891.937 684.271 L892.496 684.271 L893.055 684.271 L893.614 684.271 L894.174 684.271 L894.733 684.271 L895.292 684.271 L895.851 684.271 L896.411 684.271 L896.97 684.271 L897.529 684.271 L898.088 684.271 L898.648 684.271 L899.207 684.271 L899.766 684.271 L900.325 684.271 L900.885 684.271 L901.444 684.271 L902.003 684.271 L902.562 684.271 L903.122 684.271 L903.681 684.271 L904.24 684.271 L904.799 684.271 L905.359 684.271 L905.918 684.271 L906.477 684.271 L907.036 684.271 L907.596 684.271 L908.155 684.271 L908.714 684.271 L909.273 684.271 L909.833 684.271 L910.392 684.271 L910.951 684.271 L911.51 684.271 L912.07 684.271 L912.629 684.271 L913.188 684.271 L913.747 684.271 L914.307 684.271 L914.866 684.271 L915.425 684.271 L915.984 684.271 L916.544 684.271 L917.103 684.271 L917.662 684.271 L918.221 684.271 L918.781 684.271 L919.34 684.271 L919.899 684.271 L920.458 684.271 L921.018 684.271 L921.577 684.271 L922.136 684.271 L922.695 684.271 L923.255 684.271 L923.814 684.271 L924.373 684.271 L924.932 684.271 L925.492 684.271 L926.051 684.271 L926.61 684.271 L927.169 684.271 L927.729 684.271 L928.288 684.271 L928.847 684.271 L929.406 684.271 L929.966 684.271 L930.525 684.271 L931.084 684.271 L931.644 684.271 L932.203 684.271 L932.762 684.271 L933.321 684.271 L933.881 684.271 L934.44 684.271 L934.999 684.271 L935.558 684.271 L936.118 684.271 L936.677 684.271 L937.236 684.271 L937.795 684.271 L938.355 684.271 L938.914 684.271 L939.473 684.271 L940.032 684.271 L940.592 684.271 L941.151 684.271 L941.71 684.271 L942.269 684.271 L942.829 684.271 L943.388 684.271 L943.947 684.271 L944.506 684.271 L945.066 684.271 L945.625 684.271 L946.184 684.271 L946.743 684.271 L947.303 684.271 L947.862 684.271 L948.421 684.271 L948.98 684.271 L949.54 684.271 L950.099 684.271 L950.658 684.271 L951.217 684.271 L951.777 684.271 L952.336 684.271 L952.895 684.271 L953.454 684.271 L954.014 684.271 L954.573 684.271 L955.132 684.271 L955.691 684.271 L956.251 684.271 L956.81 684.271 L957.369 684.271 L957.928 684.271 L958.488 684.271 L959.047 684.271 L959.606 684.271 L960.165 684.271 L960.725 684.271 L961.284 684.271 L961.843 684.271 L962.402 684.271 L962.962 684.271 L963.521 684.271 L964.08 684.271 L964.639 684.271 L965.199 684.271 L965.758 684.271 L966.317 684.271 L966.876 684.271 L967.436 684.271 L967.995 684.271 L968.554 684.271 L969.113 684.271 L969.673 684.271 L970.232 684.271 L970.791 684.271 L971.35 684.271 L971.91 684.271 L972.469 684.271 L973.028 684.271 L973.587 684.271 L974.147 684.271 L974.706 684.271 L975.265 684.271 L975.824 684.271 L976.384 684.271 L976.943 684.271 L977.502 684.271 L978.061 684.271 L978.621 684.271 L979.18 684.271 L979.739 684.271 L980.298 684.271 L980.858 684.271 L981.417 684.271 L981.976 684.271 L982.535 684.271 L983.095 684.271 L983.654 684.271 L984.213 684.271 L984.772 684.271 L985.332 684.271 L985.891 684.271 L986.45 684.271 L987.009 684.271 L987.569 684.271 L988.128 684.271 L988.687 684.271 L989.246 684.271 L989.806 684.271 L990.365 684.271 L990.924 684.271 L991.483 684.271 L992.043 684.271 L992.602 684.271 L993.161 684.271 L993.72 684.271 L994.28 684.271 L994.839 684.271 L995.398 684.271 L995.957 684.271 L996.517 684.271 L997.076 684.271 L997.635 684.271 L998.194 684.271 L998.754 684.271 L999.313 684.271 L999.872 684.271 L1000.43 684.271 L1000.99 684.271 L1001.55 684.271 L1002.11 684.271 L1002.67 684.271 L1003.23 684.271 L1003.79 684.271 L1004.35 684.271 L1004.91 684.271 L1005.46 684.271 L1006.02 684.271 L1006.58 684.271 L1007.14 684.271 L1007.7 684.271 L1008.26 684.271 L1008.82 684.271 L1009.38 684.271 L1009.94 684.271 L1010.5 684.271 L1011.06 684.271 L1011.62 684.271 L1012.18 684.271 L1012.73 684.271 L1013.29 684.271 L1013.85 684.271 L1014.41 684.271 L1014.97 684.271 L1015.53 684.271 L1016.09 684.271 L1016.65 684.271 L1017.21 684.271 L1017.77 684.271 L1018.33 684.271 L1018.89 684.271 L1019.45 684.271 L1020.01 684.271 L1020.56 684.271 L1021.12 684.271 L1021.68 684.271 L1022.24 684.271 L1022.8 684.271 L1023.36 684.271 L1023.92 684.271 L1024.48 684.271 L1025.04 684.271 L1025.6 684.271 L1026.16 684.271 L1026.72 684.271 L1027.28 684.271 L1027.83 684.271 L1028.39 684.271 L1028.95 684.271 L1029.51 684.271 L1030.07 684.271 L1030.63 684.271 L1031.19 684.271 L1031.75 684.271 L1032.31 684.271 L1032.87 684.271 L1033.43 684.271 L1033.99 684.271 L1034.55 684.271 L1035.1 684.271 L1035.66 684.271 L1036.22 684.271 L1036.78 684.271 L1037.34 684.271 L1037.9 684.271 L1038.46 684.271 L1039.02 684.271 L1039.58 684.271 L1040.14 684.271 L1040.7 684.271 L1041.26 684.271 L1041.82 684.271 L1042.38 684.271 L1042.93 684.271 L1043.49 684.271 L1044.05 684.271 L1044.61 684.271 L1045.17 684.271 L1045.73 684.271 L1046.29 684.271 L1046.85 684.271 L1047.41 684.271 L1047.97 684.271 L1048.53 684.271 L1049.09 684.271 L1049.65 684.271 L1050.2 684.271 L1050.76 684.271 L1051.32 684.271 L1051.88 684.271 L1052.44 684.271 L1053 684.271 L1053.56 684.271 L1054.12 684.271 L1054.68 684.271 L1055.24 684.271 L1055.8 684.271 L1056.36 684.271 L1056.92 684.271 L1057.48 684.271 L1058.03 684.271 L1058.59 684.271 L1059.15 684.271 L1059.71 684.271 L1060.27 684.271 L1060.83 684.271 L1061.39 684.271 L1061.95 684.271 L1062.51 684.271 L1063.07 684.271 L1063.63 684.271 L1064.19 684.271 L1064.75 684.271 L1065.3 684.271 L1065.86 684.271 L1066.42 684.271 L1066.98 684.271 L1067.54 684.271 L1068.1 684.271 L1068.66 684.271 L1069.22 684.271 L1069.78 684.271 L1070.34 684.271 L1070.9 684.271 L1071.46 684.271 L1072.02 684.271 L1072.57 684.271 L1073.13 684.271 L1073.69 684.271 L1074.25 684.271 L1074.81 684.271 L1075.37 684.271 L1075.93 684.271 L1076.49 684.271 L1077.05 684.271 L1077.61 684.271 L1078.17 684.271 L1078.73 684.271 L1079.29 684.271 L1079.85 684.271 L1080.4 684.271 L1080.96 684.271 L1081.52 684.271 L1082.08 684.271 L1082.64 684.271 L1083.2 684.271 L1083.76 684.271 L1084.32 684.271 L1084.88 684.271 L1085.44 684.271 L1086 684.271 L1086.56 684.271 L1087.12 684.271 L1087.67 684.271 L1088.23 684.271 L1088.79 684.271 L1089.35 684.271 L1089.91 684.271 L1090.47 684.271 L1091.03 684.271 L1091.59 684.271 L1092.15 684.271 L1092.71 684.271 L1093.27 684.271 L1093.83 684.271 L1094.39 684.271 L1094.94 684.271 L1095.5 684.271 L1096.06 684.271 L1096.62 684.271 L1097.18 684.271 L1097.74 684.271 L1098.3 684.271 L1098.86 684.271 L1099.42 684.271 L1099.98 684.271 L1100.54 684.271 L1101.1 684.271 L1101.66 684.271 L1102.22 684.271 L1102.77 684.271 L1103.33 684.271 L1103.89 684.271 L1104.45 684.271 L1105.01 684.271 L1105.57 684.271 L1106.13 684.271 L1106.69 684.271 L1107.25 684.271 L1107.81 684.271 L1108.37 684.271 L1108.93 684.271 L1109.49 684.271 L1110.04 684.271 L1110.6 684.271 L1111.16 684.271 L1111.72 684.271 L1112.28 684.271 L1112.84 684.271 L1113.4 684.271 L1113.96 684.271 L1114.52 684.271 L1115.08 684.271 L1115.64 684.271 L1116.2 684.271 L1116.76 684.271 L1117.31 684.271 L1117.87 684.271 L1118.43 684.271 L1118.99 684.271 L1119.55 684.271 L1120.11 684.271 L1120.67 684.271 L1121.23 684.271 L1121.79 684.271 L1122.35 684.271 L1122.91 684.271 L1123.47 684.271 L1124.03 684.271 L1124.59 684.271 L1125.14 684.271 L1125.7 684.271 L1126.26 684.271 L1126.82 684.271 L1127.38 684.271 L1127.94 684.271 L1128.5 684.271 L1129.06 684.271 L1129.62 684.271 L1130.18 684.271 L1130.74 684.271 L1131.3 684.271 L1131.86 684.271 L1132.41 684.271 L1132.97 684.271 L1133.53 684.271 L1134.09 684.271 L1134.65 684.271 L1135.21 684.271 L1135.77 684.271 L1136.33 684.271 L1136.89 684.271 L1137.45 684.271 L1138.01 684.271 L1138.57 684.271 L1139.13 684.271 L1139.68 684.271 L1140.24 684.271 L1140.8 684.271 L1141.36 684.271 L1141.92 684.271 L1142.48 684.271 L1143.04 684.271 L1143.6 684.271 L1144.16 684.271 L1144.72 684.271 L1145.28 684.271 L1145.84 684.271 L1146.4 684.271 L1146.96 684.271 L1147.51 684.271 L1148.07 684.271 L1148.63 684.271 L1149.19 684.271 L1149.75 684.271 L1150.31 684.271 L1150.87 684.271 L1151.43 684.271 L1151.99 684.271 L1152.55 684.271 L1153.11 684.271 L1153.67 684.271 L1154.23 684.271 L1154.78 684.271 L1155.34 684.271 L1155.9 684.271 L1156.46 684.271 L1157.02 684.271 L1157.58 684.271 L1158.14 684.271 L1158.7 684.271 L1159.26 684.271 L1159.82 684.271 L1160.38 684.271 L1160.94 684.271 L1161.5 684.271 L1162.05 684.271 L1162.61 684.271 L1163.17 684.271 L1163.73 684.271 L1164.29 684.271 L1164.85 684.271 L1165.41 684.271 L1165.97 684.271 L1166.53 684.271 L1167.09 684.271 L1167.65 684.271 L1168.21 684.271 L1168.77 684.271 L1169.33 684.271 L1169.88 684.271 L1170.44 684.271 L1171 684.271 L1171.56 684.271 L1172.12 684.271 L1172.68 684.271 L1173.24 684.271 L1173.8 684.271 L1174.36 684.271 L1174.92 684.271 L1175.48 684.271 L1176.04 684.271 L1176.6 684.271 L1177.15 684.271 L1177.71 684.271 L1178.27 684.271 L1178.83 684.271 L1179.39 684.271 L1179.95 684.271 L1180.51 684.271 L1181.07 684.271 L1181.63 684.271 L1182.19 684.271 L1182.75 684.271 L1183.31 684.271 L1183.87 684.271 L1184.43 684.271 L1184.98 684.271 L1185.54 684.271 L1186.1 684.271 L1186.66 684.271 L1187.22 684.271 L1187.78 684.271 L1188.34 684.271 L1188.9 684.271 L1189.46 684.271 L1190.02 684.271 L1190.58 684.271 L1191.14 684.271 L1191.7 684.271 L1192.25 684.271 L1192.81 684.271 L1193.37 684.271 L1193.93 684.271 L1194.49 684.271 L1195.05 684.271 L1195.61 684.271 L1196.17 684.271 L1196.73 684.271 L1197.29 684.271 L1197.85 684.271 L1198.41 684.271 L1198.97 684.271 L1199.52 684.271 L1200.08 684.271 L1200.64 684.271 L1201.2 684.271 L1201.76 684.271 L1202.32 684.271 L1202.88 684.271 L1203.44 684.271 L1204 684.271 L1204.56 684.271 L1205.12 684.271 L1205.68 684.271 L1206.24 684.271 L1206.8 684.271 L1207.35 684.271 L1207.91 684.271 L1208.47 684.271 L1209.03 684.271 L1209.59 684.271 L1210.15 684.271 L1210.71 684.271 L1211.27 684.271 L1211.83 684.271 L1212.39 684.271 L1212.95 684.271 L1213.51 684.271 L1214.07 684.271 L1214.62 684.271 L1215.18 684.271 L1215.74 684.271 L1216.3 684.271 L1216.86 684.271 L1217.42 684.271 L1217.98 684.271 L1218.54 684.271 L1219.1 684.271 L1219.66 684.271 L1220.22 684.271 L1220.78 684.271 L1221.34 684.271 L1221.89 684.271 L1222.45 684.271 L1223.01 684.271 L1223.57 684.271 L1224.13 684.271 L1224.69 684.271 L1225.25 684.271 L1225.81 684.271 L1226.37 684.271 L1226.93 684.271 L1227.49 684.271 L1228.05 684.271 L1228.61 684.271 L1229.17 684.271 L1229.72 684.271 L1230.28 684.271 L1230.84 684.271 L1231.4 684.271 L1231.96 684.271 L1232.52 684.271 L1233.08 684.271 L1233.64 684.271 L1234.2 684.271 L1234.76 684.271 L1235.32 684.271 L1235.88 684.271 L1236.44 684.271 L1236.99 684.271 L1237.55 684.271 L1238.11 684.271 L1238.67 684.271 L1239.23 684.271 L1239.79 684.271 L1240.35 684.271 L1240.91 684.271 L1241.47 684.271 L1242.03 684.271 L1242.59 684.271 L1243.15 684.271 L1243.71 684.271 L1244.26 684.271 L1244.82 684.271 L1245.38 684.271 L1245.94 684.271 L1246.5 684.271 L1247.06 684.271 L1247.62 684.271 L1248.18 684.271 L1248.74 684.271 L1249.3 684.271 L1249.86 684.271 L1250.42 684.271 L1250.98 684.271 L1251.54 684.271 L1252.09 684.271 L1252.65 684.271 L1253.21 684.271 L1253.77 684.271 L1254.33 684.271 L1254.89 684.271 L1255.45 684.271 L1256.01 684.271 L1256.57 684.271 L1257.13 684.271 L1257.69 684.271 L1258.25 684.271 L1258.81 684.271 L1259.36 684.271 L1259.92 684.271 L1260.48 684.271 L1261.04 684.271 L1261.6 684.271 L1262.16 684.271 L1262.72 684.271 L1263.28 684.271 L1263.84 684.271 L1264.4 684.271 L1264.96 684.271 L1265.52 684.271 L1266.08 684.271 L1266.63 684.271 L1267.19 684.271 L1267.75 684.271 L1268.31 684.271 L1268.87 684.271 L1269.43 684.271 L1269.99 684.271 L1270.55 684.271 L1271.11 684.271 L1271.67 684.271 L1272.23 684.271 L1272.79 684.271 L1273.35 684.271 L1273.91 684.271 L1274.46 684.271 L1275.02 684.271 L1275.58 684.271 L1276.14 684.271 L1276.7 684.271 L1277.26 684.271 L1277.82 684.271 L1278.38 684.271 L1278.94 684.271 L1279.5 684.271 L1280.06 684.271 L1280.62 684.271 L1281.18 684.271 L1281.73 684.271 L1282.29 684.271 L1282.85 684.271 L1283.41 684.271 L1283.97 684.271 L1284.53 684.271 L1285.09 684.271 L1285.65 684.271 L1286.21 684.271 L1286.77 684.271 L1287.33 684.271 L1287.89 684.271 L1288.45 684.271 L1289 684.271 L1289.56 684.271 L1290.12 684.271 L1290.68 684.271 L1291.24 684.271 L1291.8 684.271 L1292.36 684.271 L1292.92 684.271 L1293.48 684.271 L1294.04 684.271 L1294.6 684.271 L1295.16 684.271 L1295.72 684.271 L1296.28 684.271 L1296.83 684.271 L1297.39 684.271 L1297.95 684.271 L1298.51 684.271 L1299.07 684.271 L1299.63 684.271 L1300.19 684.271 L1300.75 684.271 L1301.31 684.271 L1301.87 684.271 L1302.43 684.271 L1302.99 684.271 L1303.55 684.271 L1304.1 684.271 L1304.66 684.271 L1305.22 684.271 L1305.78 684.271 L1306.34 684.271 L1306.9 684.271 L1307.46 684.271 L1308.02 684.271 L1308.58 684.271 L1309.14 684.271 L1309.7 684.271 L1310.26 684.271 L1310.82 684.271 L1311.38 684.271 L1311.93 684.271 L1312.49 684.271 L1313.05 684.271 L1313.61 684.271 L1314.17 684.271 L1314.73 684.271 L1315.29 684.271 L1315.85 684.271 L1316.41 684.271 L1316.97 684.271 L1317.53 684.271 L1318.09 684.271 L1318.65 684.271 L1319.2 684.271 L1319.76 684.271 L1320.32 684.271 L1320.88 684.271 L1321.44 684.271 L1322 684.271 L1322.56 684.271 L1323.12 684.271 L1323.68 684.271 L1324.24 684.271 L1324.8 684.271 L1325.36 684.271 L1325.92 684.271 L1326.47 684.271 L1327.03 684.271 L1327.59 684.271 L1328.15 684.271 L1328.71 684.271 L1329.27 684.271 L1329.83 684.271 L1330.39 684.271 L1330.95 684.271 L1331.51 684.271 L1332.07 684.271 L1332.63 684.271 L1333.19 684.271 L1333.75 684.271 L1334.3 684.271 L1334.86 684.271 L1335.42 684.271 L1335.98 684.271 L1336.54 684.271 L1337.1 684.271 L1337.66 684.271 L1338.22 684.271 L1338.78 684.271 L1339.34 684.271 L1339.9 684.271 L1340.46 684.271 L1341.02 684.271 L1341.57 684.271 L1342.13 684.271 L1342.69 684.271 L1343.25 684.271 L1343.81 684.271 L1344.37 684.271 L1344.93 684.271 L1345.49 684.271 L1346.05 684.271 L1346.61 684.271 L1347.17 684.271 L1347.73 684.271 L1348.29 684.271 L1348.84 684.271 L1349.4 684.271 L1349.96 684.271 L1350.52 684.271 L1351.08 684.271 L1351.64 684.271 L1352.2 684.271 L1352.76 684.271 L1353.32 684.271 L1353.88 684.271 L1354.44 684.271 L1355 684.271 L1355.56 684.271 L1356.12 684.271 L1356.67 684.271 L1357.23 684.271 L1357.79 684.271 L1358.35 684.271 L1358.91 684.271 L1359.47 684.271 L1360.03 684.271 L1360.59 684.271 L1361.15 684.271 L1361.71 684.271 L1362.27 684.271 L1362.83 684.271 L1363.39 684.271 L1363.94 684.271 L1364.5 684.271 L1365.06 684.271 L1365.62 684.271 L1366.18 684.271 L1366.74 684.271 L1367.3 684.271 L1367.86 684.271 L1368.42 684.271 L1368.98 684.271 L1369.54 684.271 L1370.1 684.271 L1370.66 684.271 L1371.21 684.271 L1371.77 684.271 L1372.33 684.271 L1372.89 684.271 L1373.45 684.271 L1374.01 684.271 L1374.57 684.271 L1375.13 684.271 L1375.69 684.271 L1376.25 684.271 L1376.81 684.271 L1377.37 684.271 L1377.93 684.271 L1378.49 684.271 L1379.04 684.271 L1379.6 684.271 L1380.16 684.271 L1380.72 684.271 L1381.28 684.271 L1381.84 684.271 L1382.4 684.271 L1382.96 684.271 L1383.52 684.271 L1384.08 684.271 L1384.64 684.271 L1385.2 684.271 L1385.76 684.271 L1386.31 684.271 L1386.87 684.271 L1387.43 684.271 L1387.99 684.271 L1388.55 684.271 L1389.11 684.271 L1389.67 684.271 L1390.23 684.271 L1390.79 684.271 L1391.35 684.271 L1391.91 684.271 L1392.47 684.271 L1393.03 684.271 L1393.58 684.271 L1394.14 684.271 L1394.7 684.271 L1395.26 684.271 L1395.82 684.271 L1396.38 684.271 L1396.94 684.271 L1397.5 684.271 L1398.06 684.271 L1398.62 684.271 L1399.18 684.271 L1399.74 684.271 L1400.3 684.271 L1400.86 684.271 L1401.41 684.271 L1401.97 684.271 L1402.53 684.271 L1403.09 684.271 L1403.65 684.271 L1404.21 684.271 L1404.77 684.271 L1405.33 684.271 L1405.89 684.271 L1406.45 684.271 L1407.01 684.271 L1407.57 684.271 L1408.13 684.271 L1408.68 684.271 L1409.24 684.271 L1409.8 684.271 L1410.36 684.271 L1410.92 684.271 L1411.48 684.271 L1412.04 684.271 L1412.6 684.271 L1413.16 684.271 L1413.72 684.271 L1414.28 684.271 L1414.84 684.271 L1415.4 684.271 L1415.95 684.271 L1416.51 684.271 L1417.07 684.271 L1417.63 684.271 L1418.19 684.271 L1418.75 684.271 L1419.31 684.271 L1419.87 684.271 L1420.43 684.271 L1420.99 684.271 L1421.55 684.271 L1422.11 684.271 L1422.67 684.271 L1423.23 684.271 L1423.78 684.271 L1424.34 684.271 L1424.9 684.271 L1425.46 684.271 L1426.02 684.271 L1426.58 684.271 L1427.14 684.271 L1427.7 684.271 L1428.26 684.271 L1428.82 684.271 L1429.38 684.271 L1429.94 684.271 L1430.5 684.271 L1431.05 684.271 L1431.61 684.271 L1432.17 684.271 L1432.73 684.271 L1433.29 684.271 L1433.85 684.271 L1434.41 684.271 L1434.97 684.271 L1435.53 684.271 L1436.09 684.271 L1436.65 684.271 L1437.21 684.271 L1437.77 684.271 L1438.33 684.271 L1438.88 684.271 L1439.44 684.271 L1440 684.271 L1440.56 684.271 L1441.12 684.271 L1441.68 684.271 L1442.24 684.271 L1442.8 684.271 L1443.36 684.271 L1443.92 684.271 L1444.48 684.271 L1445.04 684.271 L1445.6 684.271 L1446.15 684.271 L1446.71 684.271 L1447.27 684.271 L1447.83 684.271 L1448.39 684.271 L1448.95 684.271 L1449.51 684.271 L1450.07 684.271 L1450.63 684.271 L1451.19 684.271 L1451.75 684.271 L1452.31 684.271 L1452.87 684.271 L1453.42 684.271 L1453.98 684.271 L1454.54 684.271 L1455.1 684.271 L1455.66 684.271 L1456.22 684.271 L1456.78 684.271 L1457.34 684.271 L1457.9 684.271 L1458.46 684.271 L1459.02 684.271 L1459.58 684.271 L1460.14 684.271 L1460.7 684.271 L1461.25 684.271 L1461.81 684.271 L1462.37 684.271 L1462.93 684.271 L1463.49 684.271 L1464.05 684.271 L1464.61 684.271 L1465.17 684.271 L1465.73 684.271 L1466.29 684.271 L1466.85 684.271 L1467.41 684.271 L1467.97 684.271 L1468.52 684.271 L1469.08 684.271 L1469.64 684.271 L1470.2 684.271 L1470.76 684.271 L1471.32 684.271 L1471.88 684.271 L1472.44 684.271 L1473 684.271 L1473.56 684.271 L1474.12 684.271 L1474.68 684.271 L1475.24 684.271 L1475.79 684.271 L1476.35 684.271 L1476.91 684.271 L1477.47 684.271 L1478.03 684.271 L1478.59 684.271 L1479.15 684.271 L1479.71 684.271 L1480.27 684.271 L1480.83 684.271 L1481.39 684.271 L1481.95 684.271 L1482.51 684.271 L1483.07 684.271 L1483.62 684.271 L1484.18 684.271 L1484.74 684.271 L1485.3 684.271 L1485.86 684.271 L1486.42 684.271 L1486.98 684.271 L1487.54 684.271 L1488.1 684.271 L1488.66 684.271 L1489.22 684.271 L1489.78 684.271 L1490.34 684.271 L1490.89 684.271 L1491.45 684.271 L1492.01 684.271 L1492.57 684.271 L1493.13 684.271 L1493.69 684.271 L1494.25 684.271 L1494.81 684.271 L1495.37 684.271 L1495.93 684.271 L1496.49 684.271 L1497.05 684.271 L1497.61 684.271 L1498.16 684.271 L1498.72 684.271 L1499.28 684.271 L1499.84 684.271 L1500.4 684.271 L1500.96 684.271 L1501.52 684.271 L1502.08 684.271 L1502.64 684.271 L1503.2 684.271 L1503.76 684.271 L1504.32 684.271 L1504.88 684.271 L1505.44 684.271 L1505.99 684.271 L1506.55 684.271 L1507.11 684.271 L1507.67 684.271 L1508.23 684.271 L1508.79 684.271 L1509.35 684.271 L1509.91 684.271 L1510.47 684.271 L1511.03 684.271 L1511.59 684.271 L1512.15 684.271 L1512.71 684.271 L1513.26 684.271 L1513.82 684.271 L1514.38 684.271 L1514.94 684.271 L1515.5 684.271 L1516.06 684.271 L1516.62 684.271 L1517.18 684.271 L1517.74 684.271 L1518.3 684.271 L1518.86 684.271 L1519.42 684.271 L1519.98 684.271 L1520.53 684.271 L1521.09 684.271 L1521.65 684.271 L1522.21 684.271 L1522.77 684.271 L1523.33 684.271 L1523.89 684.271 L1524.45 684.271 L1525.01 684.271 L1525.57 684.271 L1526.13 684.271 L1526.69 684.271 L1527.25 684.271 L1527.81 684.271 L1528.36 684.271 L1528.92 684.271 L1529.48 684.271 L1530.04 684.271 L1530.6 684.271 L1531.16 684.271 L1531.72 684.271 L1532.28 684.271 L1532.84 684.271 L1533.4 684.271 L1533.96 684.271 L1534.52 684.271 L1535.08 684.271 L1535.63 684.271 L1536.19 684.271 L1536.75 684.271 L1537.31 684.271 L1537.87 684.271 L1538.43 684.271 L1538.99 684.271 L1539.55 684.271 L1540.11 684.271 L1540.67 684.271 L1541.23 684.271 L1541.79 684.271 L1542.35 684.271 L1542.9 684.271 L1543.46 684.271 L1544.02 684.271 L1544.58 684.271 L1545.14 684.271 L1545.7 684.271 L1546.26 684.271 L1546.82 684.271 L1547.38 684.271 L1547.94 684.271 L1548.5 684.271 L1549.06 684.271 L1549.62 684.271 L1550.18 684.271 L1550.73 684.271 L1551.29 684.271 L1551.85 684.271 L1552.41 684.271 L1552.97 684.271 L1553.53 684.271 L1554.09 684.271 L1554.65 684.271 L1555.21 684.271 L1555.77 684.271 L1556.33 684.271 L1556.89 684.271 L1557.45 684.271 L1558 684.271 L1558.56 684.271 L1559.12 684.271 L1559.68 684.271 L1560.24 684.271 L1560.8 684.271 L1561.36 684.271 L1561.92 684.271 L1562.48 684.271 L1563.04 684.271 L1563.6 684.271 L1564.16 684.271 L1564.72 684.271 L1565.28 684.271 L1565.83 684.271 L1566.39 684.271 L1566.95 684.271 L1567.51 684.271 L1568.07 684.271 L1568.63 684.271 L1569.19 684.271 L1569.75 684.271 L1570.31 684.271 L1570.87 684.271 L1571.43 684.271 L1571.99 684.271 L1572.55 684.271 L1573.1 684.271 L1573.66 684.271 L1574.22 684.271 L1574.78 684.271 L1575.34 684.271 L1575.9 684.271 L1576.46 684.271 L1577.02 684.271 L1577.58 684.271 L1578.14 684.271 L1578.7 684.271 L1579.26 684.271 L1579.82 684.271 L1580.37 684.271 L1580.93 684.271 L1581.49 684.271 L1582.05 684.271 L1582.61 684.271 L1583.17 684.271 L1583.73 684.271 L1584.29 684.271 L1584.85 684.271 L1585.41 684.271 L1585.97 684.271 L1586.53 684.271 L1587.09 684.271 L1587.65 684.271 L1588.2 684.271 L1588.76 684.271 L1589.32 684.271 L1589.88 684.271 L1590.44 684.271 L1591 684.271 L1591.56 684.271 L1592.12 684.271 L1592.68 684.271 L1593.24 684.271 L1593.8 684.271 L1594.36 684.271 L1594.92 684.271 L1595.47 684.271 L1596.03 684.271 L1596.59 684.271 L1597.15 684.271 L1597.71 684.271 L1598.27 684.271 L1598.83 684.271 L1599.39 684.271 L1599.95 684.271 L1600.51 684.271 L1601.07 684.271 L1601.63 684.271 L1602.19 684.271 L1602.74 684.271 L1603.3 684.271 L1603.86 684.271 L1604.42 684.271 L1604.98 684.271 L1605.54 684.271 L1606.1 684.271 L1606.66 684.271 L1607.22 684.271 L1607.78 684.271 L1608.34 684.271 L1608.9 684.271 L1609.46 684.271 L1610.02 684.271 L1610.57 684.271 L1611.13 684.271 L1611.69 684.271 L1612.25 684.271 L1612.81 684.271 L1613.37 684.271 L1613.93 684.271 L1614.49 684.271 L1615.05 684.271 L1615.61 684.271 L1616.17 684.271 L1616.73 684.271 L1617.29 684.271 L1617.84 684.271 L1618.4 684.271 L1618.96 684.271 L1619.52 684.271 L1620.08 684.271 L1620.64 684.271 L1621.2 684.271 L1621.76 684.271 L1622.32 684.271 L1622.88 684.271 L1623.44 684.271 L1624 684.271 L1624.56 684.271 L1625.11 684.271 L1625.67 684.271 L1626.23 684.271 L1626.79 684.271 L1627.35 684.271 L1627.91 684.271 L1628.47 684.271 L1629.03 684.271 L1629.59 684.271 L1630.15 684.271 L1630.71 684.271 L1631.27 684.271 L1631.83 684.271 L1632.39 684.271 L1632.94 684.271 L1633.5 684.271 L1634.06 684.271 L1634.62 684.271 L1635.18 684.271 L1635.74 684.271 L1636.3 684.271 L1636.86 684.271 L1637.42 684.271 L1637.98 684.271 L1638.54 684.271 L1639.1 684.271 L1639.66 684.271 L1640.21 684.271 L1640.77 684.271 L1641.33 684.271 L1641.89 684.271 L1642.45 684.271 L1643.01 684.271 L1643.57 684.271 L1644.13 684.271 L1644.69 684.271 L1645.25 684.271 L1645.81 684.271 L1646.37 684.271 L1646.93 684.271 L1647.48 684.271 L1648.04 684.271 L1648.6 684.271 L1649.16 684.271 L1649.72 684.271 L1650.28 684.271 L1650.84 684.271 L1651.4 684.271 L1651.96 684.271 L1652.52 684.271 L1653.08 684.271 L1653.64 684.271 L1654.2 684.271 L1654.76 684.271 L1655.31 684.271 L1655.87 684.271 L1656.43 684.271 L1656.99 684.271 L1657.55 684.271 L1658.11 684.271 L1658.67 684.271 L1659.23 684.271 L1659.79 684.271 L1660.35 684.271 L1660.91 684.271 L1661.47 684.271 L1662.03 684.271 L1662.58 684.271 L1663.14 684.271 L1663.7 684.271 L1664.26 684.271 L1664.82 684.271 L1665.38 684.271 L1665.94 684.271 L1666.5 684.271 L1667.06 684.271 L1667.62 684.271 L1668.18 684.271 L1668.74 684.271 L1669.3 684.271 L1669.85 684.271 L1670.41 684.271 L1670.97 684.271 L1671.53 684.271 L1672.09 684.271 L1672.65 684.271 L1673.21 684.271 L1673.77 684.271 L1674.33 684.271 L1674.89 684.271 L1675.45 684.271 L1676.01 684.271 L1676.57 684.271 L1677.13 684.271 L1677.68 684.271 L1678.24 684.271 L1678.8 684.271 L1679.36 684.271 L1679.92 684.271 L1680.48 684.271 L1681.04 684.271 L1681.6 684.271 L1682.16 684.271 L1682.72 684.271 L1683.28 684.271 L1683.84 684.271 L1684.4 684.271 L1684.95 684.271 L1685.51 684.271 L1686.07 684.271 L1686.63 684.271 L1687.19 684.271 L1687.75 684.271 L1688.31 684.271 L1688.87 684.271 L1689.43 684.271 L1689.99 684.271 L1690.55 684.271 L1691.11 684.271 L1691.67 684.271 L1692.23 684.271 L1692.78 684.271 L1693.34 684.271 L1693.9 684.271 L1694.46 684.271 L1695.02 684.271 L1695.58 684.271 L1696.14 684.271 L1696.7 684.271 L1697.26 684.271 L1697.82 684.271 L1698.38 684.271 L1698.94 684.271 L1699.5 684.271 L1700.05 684.271 L1700.61 684.271 L1701.17 684.271 L1701.73 684.271 L1702.29 684.271 L1702.85 684.271 L1703.41 684.271 L1703.97 684.271 L1704.53 684.271 L1705.09 684.271 L1705.65 684.271 L1706.21 684.271 L1706.77 684.271 L1707.32 684.271 L1707.88 684.271 L1708.44 684.271 L1709 684.271 L1709.56 684.271 L1710.12 684.271 L1710.68 684.271 L1711.24 684.271 L1711.8 684.271 L1712.36 684.271 L1712.92 684.271 L1713.48 684.271 L1714.04 684.271 L1714.6 684.271 L1715.15 684.271 L1715.71 684.271 L1716.27 684.271 L1716.83 684.271 L1717.39 684.271 L1717.95 684.271 L1718.51 684.271 L1719.07 684.271 L1719.63 684.271 L1720.19 684.271 L1720.75 684.271 L1721.31 684.271 L1721.87 684.271 L1722.42 684.271 L1722.98 684.271 L1723.54 684.271 L1724.1 684.271 L1724.66 684.271 L1725.22 684.271 L1725.78 684.271 L1726.34 684.271 L1726.9 684.271 L1727.46 684.271 L1728.02 684.271 L1728.58 684.271 L1729.14 684.271 L1729.69 684.271 L1730.25 684.271 L1730.81 684.271 L1731.37 684.271 L1731.93 684.271 L1732.49 684.271 L1733.05 684.271 L1733.61 684.271 L1734.17 684.271 L1734.73 684.271 L1735.29 684.271 L1735.85 684.271 L1736.41 684.271 L1736.97 684.271 L1737.52 684.271 L1738.08 684.271 L1738.64 684.271 L1739.2 684.271 L1739.76 684.271 L1740.32 684.271 L1740.88 684.271 L1741.44 684.271 L1742 684.271 L1742.56 684.271 L1743.12 684.271 L1743.68 684.271 L1744.24 684.271 L1744.79 684.271 L1745.35 684.271 L1745.91 684.271 L1746.47 684.271 L1747.03 684.271 L1747.59 684.271 L1748.15 684.271 L1748.71 684.271 L1749.27 684.271 L1749.83 684.271 L1750.39 684.271 L1750.95 684.271 L1751.51 684.271 L1752.06 684.271 L1752.62 684.271 L1753.18 684.271 L1753.74 684.271 L1754.3 684.271 L1754.86 684.271 L1755.42 684.271 L1755.98 684.271 L1756.54 684.271 L1757.1 684.271 L1757.66 684.271 L1758.22 684.271 L1758.78 684.271 L1759.34 684.271 L1759.89 684.271 L1760.45 684.271 L1761.01 684.271 L1761.57 684.271 L1762.13 684.271 L1762.69 684.271 L1763.25 684.271 L1763.81 684.271 L1764.37 684.271 L1764.93 684.271 L1765.49 684.271 L1766.05 684.271 L1766.61 684.271 L1767.16 684.271 L1767.72 684.271 L1768.28 684.271 L1768.84 684.271 L1769.4 684.271 L1769.96 684.271 L1770.52 684.271 L1771.08 684.271 L1771.64 684.271 L1772.2 684.271 L1772.76 684.271 L1773.32 684.271 L1773.88 684.271 L1774.43 684.271 L1774.99 684.271 L1775.55 684.271 L1776.11 684.271 L1776.67 684.271 L1777.23 684.271 L1777.79 684.271 L1778.35 684.271 L1778.91 684.271 L1779.47 684.271 L1780.03 684.271 L1780.59 684.271 L1781.15 684.271 L1781.71 684.271 L1782.26 684.271 L1782.82 684.271 L1783.38 684.271 L1783.94 684.271 L1784.5 684.271 L1785.06 684.271 L1785.62 684.271 L1786.18 684.271 L1786.74 684.271 L1787.3 684.271 L1787.86 684.271 L1788.42 684.271 L1788.98 684.271 L1789.53 684.271 L1790.09 684.271 L1790.65 684.271 L1791.21 684.271 L1791.77 684.271 L1792.33 684.271 L1792.89 684.271 L1793.45 684.271 L1794.01 684.271 L1794.57 684.271 L1795.13 684.271 L1795.69 684.271 L1796.25 684.271 L1796.8 684.271 L1797.36 684.271 L1797.92 684.271 L1798.48 684.271 L1799.04 684.271 L1799.6 684.271 L1800.16 684.271 L1800.72 684.271 L1801.28 684.271 L1801.84 684.271 L1802.4 684.271 L1802.96 684.271 L1803.52 684.271 L1804.08 684.271 L1804.63 684.271 L1805.19 684.271 L1805.75 684.271 L1806.31 684.271 L1806.87 684.271 L1807.43 684.271 L1807.99 684.271 L1808.55 684.271 L1809.11 684.271 L1809.67 684.271 L1810.23 684.271 L1810.79 684.271 L1811.35 684.271 L1811.9 684.271 L1812.46 684.271 L1813.02 684.271 L1813.58 684.271 L1814.14 684.271 L1814.7 684.271 L1815.26 684.271 L1815.82 684.271 L1816.38 684.271 L1816.94 684.271 L1817.5 684.271 L1818.06 684.271 L1818.62 684.271 L1819.18 684.271 L1819.73 684.271 L1820.29 684.271 L1820.85 684.271 L1821.41 684.271 L1821.97 684.271 L1822.53 684.271 L1823.09 684.271 L1823.65 684.271 L1824.21 684.271 L1824.77 684.271 L1825.33 684.271 L1825.89 684.271 L1826.45 684.271 L1827 684.271 L1827.56 684.271 L1828.12 684.271 L1828.68 684.271 L1829.24 684.271 L1829.8 684.271 L1830.36 684.271 L1830.92 684.271 L1831.48 684.271 L1832.04 684.271 L1832.6 684.271 L1833.16 684.271 L1833.72 684.271 L1834.27 684.271 L1834.83 684.271 L1835.39 684.271 L1835.95 684.271 L1836.51 684.271 L1837.07 684.271 L1837.63 684.271 L1838.19 684.271 L1838.19 682.299 L1837.63 682.299 L1837.07 682.299 L1836.51 682.299 L1835.95 682.299 L1835.39 682.299 L1834.83 682.299 L1834.27 682.299 L1833.72 682.299 L1833.16 682.299 L1832.6 682.299 L1832.04 682.299 L1831.48 682.299 L1830.92 682.299 L1830.36 682.299 L1829.8 682.299 L1829.24 682.299 L1828.68 682.299 L1828.12 682.299 L1827.56 682.299 L1827 682.299 L1826.45 682.299 L1825.89 682.299 L1825.33 682.299 L1824.77 682.299 L1824.21 682.299 L1823.65 682.299 L1823.09 682.299 L1822.53 682.299 L1821.97 682.299 L1821.41 682.299 L1820.85 682.299 L1820.29 682.299 L1819.73 682.299 L1819.18 682.299 L1818.62 682.299 L1818.06 682.299 L1817.5 682.299 L1816.94 682.299 L1816.38 682.299 L1815.82 682.299 L1815.26 682.299 L1814.7 682.299 L1814.14 682.299 L1813.58 682.299 L1813.02 682.299 L1812.46 682.299 L1811.9 682.299 L1811.35 682.299 L1810.79 682.299 L1810.23 682.299 L1809.67 682.299 L1809.11 682.299 L1808.55 682.299 L1807.99 682.299 L1807.43 682.299 L1806.87 682.299 L1806.31 682.299 L1805.75 682.299 L1805.19 682.299 L1804.63 682.299 L1804.08 682.299 L1803.52 682.299 L1802.96 682.299 L1802.4 682.299 L1801.84 682.299 L1801.28 682.299 L1800.72 682.299 L1800.16 682.299 L1799.6 682.299 L1799.04 682.299 L1798.48 682.299 L1797.92 682.299 L1797.36 682.299 L1796.8 682.299 L1796.25 682.299 L1795.69 682.299 L1795.13 682.299 L1794.57 682.299 L1794.01 682.299 L1793.45 682.299 L1792.89 682.299 L1792.33 682.299 L1791.77 682.299 L1791.21 682.299 L1790.65 682.299 L1790.09 682.299 L1789.53 682.299 L1788.98 682.299 L1788.42 682.299 L1787.86 682.299 L1787.3 682.299 L1786.74 682.299 L1786.18 682.299 L1785.62 682.299 L1785.06 682.299 L1784.5 682.299 L1783.94 682.299 L1783.38 682.299 L1782.82 682.299 L1782.26 682.299 L1781.71 682.299 L1781.15 682.299 L1780.59 682.299 L1780.03 682.299 L1779.47 682.299 L1778.91 682.299 L1778.35 682.299 L1777.79 682.299 L1777.23 682.299 L1776.67 682.299 L1776.11 682.299 L1775.55 682.299 L1774.99 682.299 L1774.43 682.299 L1773.88 682.299 L1773.32 682.299 L1772.76 682.299 L1772.2 682.299 L1771.64 682.299 L1771.08 682.299 L1770.52 682.299 L1769.96 682.299 L1769.4 682.299 L1768.84 682.299 L1768.28 682.299 L1767.72 682.299 L1767.16 682.299 L1766.61 682.299 L1766.05 682.299 L1765.49 682.299 L1764.93 682.299 L1764.37 682.299 L1763.81 682.299 L1763.25 682.299 L1762.69 682.299 L1762.13 682.299 L1761.57 682.299 L1761.01 682.299 L1760.45 682.299 L1759.89 682.299 L1759.34 682.299 L1758.78 682.299 L1758.22 682.299 L1757.66 682.299 L1757.1 682.299 L1756.54 682.299 L1755.98 682.299 L1755.42 682.299 L1754.86 682.299 L1754.3 682.299 L1753.74 682.299 L1753.18 682.299 L1752.62 682.299 L1752.06 682.299 L1751.51 682.299 L1750.95 682.299 L1750.39 682.299 L1749.83 682.299 L1749.27 682.299 L1748.71 682.299 L1748.15 682.299 L1747.59 682.299 L1747.03 682.299 L1746.47 682.299 L1745.91 682.299 L1745.35 682.299 L1744.79 682.299 L1744.24 682.299 L1743.68 682.299 L1743.12 682.299 L1742.56 682.299 L1742 682.299 L1741.44 682.299 L1740.88 682.299 L1740.32 682.299 L1739.76 682.299 L1739.2 682.299 L1738.64 682.299 L1738.08 682.299 L1737.52 682.299 L1736.97 682.299 L1736.41 682.299 L1735.85 682.299 L1735.29 682.299 L1734.73 682.299 L1734.17 682.299 L1733.61 682.299 L1733.05 682.299 L1732.49 682.299 L1731.93 682.299 L1731.37 682.299 L1730.81 682.299 L1730.25 682.299 L1729.69 682.299 L1729.14 682.299 L1728.58 682.299 L1728.02 682.299 L1727.46 682.299 L1726.9 682.299 L1726.34 682.299 L1725.78 682.299 L1725.22 682.299 L1724.66 682.299 L1724.1 682.299 L1723.54 682.299 L1722.98 682.299 L1722.42 682.299 L1721.87 682.299 L1721.31 682.299 L1720.75 682.299 L1720.19 682.299 L1719.63 682.299 L1719.07 682.299 L1718.51 682.299 L1717.95 682.299 L1717.39 682.299 L1716.83 682.299 L1716.27 682.299 L1715.71 682.299 L1715.15 682.299 L1714.6 682.299 L1714.04 682.299 L1713.48 682.299 L1712.92 682.299 L1712.36 682.299 L1711.8 682.299 L1711.24 682.299 L1710.68 682.299 L1710.12 682.299 L1709.56 682.299 L1709 682.299 L1708.44 682.299 L1707.88 682.299 L1707.32 682.299 L1706.77 682.299 L1706.21 682.299 L1705.65 682.299 L1705.09 682.299 L1704.53 682.299 L1703.97 682.299 L1703.41 682.299 L1702.85 682.299 L1702.29 682.299 L1701.73 682.299 L1701.17 682.299 L1700.61 682.299 L1700.05 682.299 L1699.5 682.299 L1698.94 682.299 L1698.38 682.299 L1697.82 682.299 L1697.26 682.299 L1696.7 682.299 L1696.14 682.299 L1695.58 682.299 L1695.02 682.299 L1694.46 682.299 L1693.9 682.299 L1693.34 682.299 L1692.78 682.299 L1692.23 682.299 L1691.67 682.299 L1691.11 682.299 L1690.55 682.299 L1689.99 682.299 L1689.43 682.299 L1688.87 682.299 L1688.31 682.299 L1687.75 682.299 L1687.19 682.299 L1686.63 682.299 L1686.07 682.299 L1685.51 682.299 L1684.95 682.299 L1684.4 682.299 L1683.84 682.299 L1683.28 682.299 L1682.72 682.299 L1682.16 682.299 L1681.6 682.299 L1681.04 682.299 L1680.48 682.299 L1679.92 682.299 L1679.36 682.299 L1678.8 682.299 L1678.24 682.299 L1677.68 682.299 L1677.13 682.299 L1676.57 682.299 L1676.01 682.299 L1675.45 682.299 L1674.89 682.299 L1674.33 682.299 L1673.77 682.299 L1673.21 682.299 L1672.65 682.299 L1672.09 682.299 L1671.53 682.299 L1670.97 682.299 L1670.41 682.299 L1669.85 682.299 L1669.3 682.299 L1668.74 682.299 L1668.18 682.299 L1667.62 682.299 L1667.06 682.299 L1666.5 682.299 L1665.94 682.299 L1665.38 682.299 L1664.82 682.299 L1664.26 682.299 L1663.7 682.299 L1663.14 682.299 L1662.58 682.299 L1662.03 682.299 L1661.47 682.299 L1660.91 682.299 L1660.35 682.299 L1659.79 682.299 L1659.23 682.299 L1658.67 682.299 L1658.11 682.299 L1657.55 682.299 L1656.99 682.299 L1656.43 682.299 L1655.87 682.299 L1655.31 682.299 L1654.76 682.299 L1654.2 682.299 L1653.64 682.299 L1653.08 682.299 L1652.52 682.299 L1651.96 682.299 L1651.4 682.299 L1650.84 682.299 L1650.28 682.299 L1649.72 682.299 L1649.16 682.299 L1648.6 682.299 L1648.04 682.299 L1647.48 682.299 L1646.93 682.299 L1646.37 682.299 L1645.81 682.299 L1645.25 682.299 L1644.69 682.299 L1644.13 682.299 L1643.57 682.299 L1643.01 682.299 L1642.45 682.299 L1641.89 682.299 L1641.33 682.299 L1640.77 682.299 L1640.21 682.299 L1639.66 682.299 L1639.1 682.299 L1638.54 682.299 L1637.98 682.299 L1637.42 682.299 L1636.86 682.299 L1636.3 682.299 L1635.74 682.299 L1635.18 682.299 L1634.62 682.299 L1634.06 682.299 L1633.5 682.299 L1632.94 682.299 L1632.39 682.299 L1631.83 682.299 L1631.27 682.299 L1630.71 682.299 L1630.15 682.299 L1629.59 682.299 L1629.03 682.299 L1628.47 682.299 L1627.91 682.299 L1627.35 682.299 L1626.79 682.299 L1626.23 682.299 L1625.67 682.299 L1625.11 682.299 L1624.56 682.299 L1624 682.299 L1623.44 682.299 L1622.88 682.299 L1622.32 682.299 L1621.76 682.299 L1621.2 682.299 L1620.64 682.299 L1620.08 682.299 L1619.52 682.299 L1618.96 682.299 L1618.4 682.299 L1617.84 682.299 L1617.29 682.299 L1616.73 682.299 L1616.17 682.299 L1615.61 682.299 L1615.05 682.299 L1614.49 682.299 L1613.93 682.299 L1613.37 682.299 L1612.81 682.299 L1612.25 682.299 L1611.69 682.299 L1611.13 682.299 L1610.57 682.299 L1610.02 682.299 L1609.46 682.299 L1608.9 682.299 L1608.34 682.299 L1607.78 682.299 L1607.22 682.299 L1606.66 682.299 L1606.1 682.299 L1605.54 682.299 L1604.98 682.299 L1604.42 682.299 L1603.86 682.299 L1603.3 682.299 L1602.74 682.299 L1602.19 682.299 L1601.63 682.299 L1601.07 682.299 L1600.51 682.299 L1599.95 682.299 L1599.39 682.299 L1598.83 682.299 L1598.27 682.299 L1597.71 682.299 L1597.15 682.299 L1596.59 682.299 L1596.03 682.299 L1595.47 682.299 L1594.92 682.299 L1594.36 682.299 L1593.8 682.299 L1593.24 682.299 L1592.68 682.299 L1592.12 682.299 L1591.56 682.299 L1591 682.299 L1590.44 682.299 L1589.88 682.299 L1589.32 682.299 L1588.76 682.299 L1588.2 682.299 L1587.65 682.299 L1587.09 682.299 L1586.53 682.299 L1585.97 682.299 L1585.41 682.299 L1584.85 682.299 L1584.29 682.299 L1583.73 682.299 L1583.17 682.299 L1582.61 682.299 L1582.05 682.299 L1581.49 682.299 L1580.93 682.299 L1580.37 682.299 L1579.82 682.299 L1579.26 682.299 L1578.7 682.299 L1578.14 682.299 L1577.58 682.299 L1577.02 682.299 L1576.46 682.299 L1575.9 682.299 L1575.34 682.299 L1574.78 682.299 L1574.22 682.299 L1573.66 682.299 L1573.1 682.299 L1572.55 682.299 L1571.99 682.299 L1571.43 682.299 L1570.87 682.299 L1570.31 682.299 L1569.75 682.299 L1569.19 682.299 L1568.63 682.299 L1568.07 682.299 L1567.51 682.299 L1566.95 682.299 L1566.39 682.299 L1565.83 682.299 L1565.28 682.299 L1564.72 682.299 L1564.16 682.299 L1563.6 682.299 L1563.04 682.299 L1562.48 682.299 L1561.92 682.299 L1561.36 682.299 L1560.8 682.299 L1560.24 682.299 L1559.68 682.299 L1559.12 682.299 L1558.56 682.299 L1558 682.299 L1557.45 682.299 L1556.89 682.299 L1556.33 682.299 L1555.77 682.299 L1555.21 682.299 L1554.65 682.299 L1554.09 682.299 L1553.53 682.299 L1552.97 682.299 L1552.41 682.299 L1551.85 682.299 L1551.29 682.299 L1550.73 682.299 L1550.18 682.299 L1549.62 682.299 L1549.06 682.299 L1548.5 682.299 L1547.94 682.299 L1547.38 682.299 L1546.82 682.299 L1546.26 682.299 L1545.7 682.299 L1545.14 682.299 L1544.58 682.299 L1544.02 682.299 L1543.46 682.299 L1542.9 682.299 L1542.35 682.299 L1541.79 682.299 L1541.23 682.299 L1540.67 682.299 L1540.11 682.299 L1539.55 682.299 L1538.99 682.299 L1538.43 682.299 L1537.87 682.299 L1537.31 682.299 L1536.75 682.299 L1536.19 682.299 L1535.63 682.299 L1535.08 682.299 L1534.52 682.299 L1533.96 682.299 L1533.4 682.299 L1532.84 682.299 L1532.28 682.299 L1531.72 682.299 L1531.16 682.299 L1530.6 682.299 L1530.04 682.299 L1529.48 682.299 L1528.92 682.299 L1528.36 682.299 L1527.81 682.299 L1527.25 682.299 L1526.69 682.299 L1526.13 682.299 L1525.57 682.299 L1525.01 682.299 L1524.45 682.299 L1523.89 682.299 L1523.33 682.299 L1522.77 682.299 L1522.21 682.299 L1521.65 682.299 L1521.09 682.299 L1520.53 682.299 L1519.98 682.299 L1519.42 682.299 L1518.86 682.299 L1518.3 682.299 L1517.74 682.299 L1517.18 682.299 L1516.62 682.299 L1516.06 682.299 L1515.5 682.299 L1514.94 682.299 L1514.38 682.299 L1513.82 682.299 L1513.26 682.299 L1512.71 682.299 L1512.15 682.299 L1511.59 682.299 L1511.03 682.299 L1510.47 682.299 L1509.91 682.299 L1509.35 682.299 L1508.79 682.299 L1508.23 682.299 L1507.67 682.299 L1507.11 682.299 L1506.55 682.299 L1505.99 682.299 L1505.44 682.299 L1504.88 682.299 L1504.32 682.299 L1503.76 682.299 L1503.2 682.299 L1502.64 682.299 L1502.08 682.299 L1501.52 682.299 L1500.96 682.299 L1500.4 682.299 L1499.84 682.299 L1499.28 682.299 L1498.72 682.299 L1498.16 682.299 L1497.61 682.299 L1497.05 682.299 L1496.49 682.299 L1495.93 682.299 L1495.37 682.299 L1494.81 682.299 L1494.25 682.299 L1493.69 682.299 L1493.13 682.299 L1492.57 682.299 L1492.01 682.299 L1491.45 682.299 L1490.89 682.299 L1490.34 682.299 L1489.78 682.299 L1489.22 682.299 L1488.66 682.299 L1488.1 682.299 L1487.54 682.299 L1486.98 682.299 L1486.42 682.299 L1485.86 682.299 L1485.3 682.299 L1484.74 682.299 L1484.18 682.299 L1483.62 682.299 L1483.07 682.299 L1482.51 682.299 L1481.95 682.299 L1481.39 682.299 L1480.83 682.299 L1480.27 682.299 L1479.71 682.299 L1479.15 682.299 L1478.59 682.299 L1478.03 682.299 L1477.47 682.299 L1476.91 682.299 L1476.35 682.299 L1475.79 682.299 L1475.24 682.299 L1474.68 682.299 L1474.12 682.299 L1473.56 682.299 L1473 682.299 L1472.44 682.299 L1471.88 682.299 L1471.32 682.299 L1470.76 682.299 L1470.2 682.299 L1469.64 682.299 L1469.08 682.299 L1468.52 682.299 L1467.97 682.299 L1467.41 682.299 L1466.85 682.299 L1466.29 682.299 L1465.73 682.299 L1465.17 682.299 L1464.61 682.299 L1464.05 682.299 L1463.49 682.299 L1462.93 682.299 L1462.37 682.299 L1461.81 682.299 L1461.25 682.299 L1460.7 682.299 L1460.14 682.299 L1459.58 682.299 L1459.02 682.299 L1458.46 682.299 L1457.9 682.299 L1457.34 682.299 L1456.78 682.299 L1456.22 682.299 L1455.66 682.299 L1455.1 682.299 L1454.54 682.299 L1453.98 682.299 L1453.42 682.299 L1452.87 682.299 L1452.31 682.299 L1451.75 682.299 L1451.19 682.299 L1450.63 682.299 L1450.07 682.299 L1449.51 682.299 L1448.95 682.299 L1448.39 682.299 L1447.83 682.299 L1447.27 682.299 L1446.71 682.299 L1446.15 682.299 L1445.6 682.299 L1445.04 682.299 L1444.48 682.299 L1443.92 682.299 L1443.36 682.299 L1442.8 682.299 L1442.24 682.299 L1441.68 682.299 L1441.12 682.299 L1440.56 682.299 L1440 682.299 L1439.44 682.299 L1438.88 682.299 L1438.33 682.299 L1437.77 682.299 L1437.21 682.299 L1436.65 682.299 L1436.09 682.299 L1435.53 682.299 L1434.97 682.299 L1434.41 682.299 L1433.85 682.299 L1433.29 682.299 L1432.73 682.299 L1432.17 682.299 L1431.61 682.299 L1431.05 682.299 L1430.5 682.299 L1429.94 682.299 L1429.38 682.299 L1428.82 682.299 L1428.26 682.299 L1427.7 682.299 L1427.14 682.299 L1426.58 682.299 L1426.02 682.299 L1425.46 682.299 L1424.9 682.299 L1424.34 682.299 L1423.78 682.299 L1423.23 682.299 L1422.67 682.299 L1422.11 682.299 L1421.55 682.299 L1420.99 682.299 L1420.43 682.299 L1419.87 682.299 L1419.31 682.299 L1418.75 682.299 L1418.19 682.299 L1417.63 682.299 L1417.07 682.299 L1416.51 682.299 L1415.95 682.299 L1415.4 682.299 L1414.84 682.299 L1414.28 682.299 L1413.72 682.299 L1413.16 682.299 L1412.6 682.299 L1412.04 682.299 L1411.48 682.299 L1410.92 682.299 L1410.36 682.299 L1409.8 682.299 L1409.24 682.299 L1408.68 682.299 L1408.13 682.299 L1407.57 682.299 L1407.01 682.299 L1406.45 682.299 L1405.89 682.299 L1405.33 682.299 L1404.77 682.299 L1404.21 682.299 L1403.65 682.299 L1403.09 682.299 L1402.53 682.299 L1401.97 682.299 L1401.41 682.299 L1400.86 682.299 L1400.3 682.299 L1399.74 682.299 L1399.18 682.299 L1398.62 682.299 L1398.06 682.299 L1397.5 682.299 L1396.94 682.299 L1396.38 682.299 L1395.82 682.299 L1395.26 682.299 L1394.7 682.299 L1394.14 682.299 L1393.58 682.299 L1393.03 682.299 L1392.47 682.299 L1391.91 682.299 L1391.35 682.299 L1390.79 682.299 L1390.23 682.299 L1389.67 682.299 L1389.11 682.299 L1388.55 682.299 L1387.99 682.299 L1387.43 682.299 L1386.87 682.299 L1386.31 682.299 L1385.76 682.299 L1385.2 682.299 L1384.64 682.299 L1384.08 682.299 L1383.52 682.299 L1382.96 682.299 L1382.4 682.299 L1381.84 682.299 L1381.28 682.299 L1380.72 682.299 L1380.16 682.299 L1379.6 682.299 L1379.04 682.299 L1378.49 682.299 L1377.93 682.299 L1377.37 682.299 L1376.81 682.299 L1376.25 682.299 L1375.69 682.299 L1375.13 682.299 L1374.57 682.299 L1374.01 682.299 L1373.45 682.299 L1372.89 682.299 L1372.33 682.299 L1371.77 682.299 L1371.21 682.299 L1370.66 682.299 L1370.1 682.299 L1369.54 682.299 L1368.98 682.299 L1368.42 682.299 L1367.86 682.299 L1367.3 682.299 L1366.74 682.299 L1366.18 682.299 L1365.62 682.299 L1365.06 682.299 L1364.5 682.299 L1363.94 682.299 L1363.39 682.299 L1362.83 682.299 L1362.27 682.299 L1361.71 682.299 L1361.15 682.299 L1360.59 682.299 L1360.03 682.299 L1359.47 682.299 L1358.91 682.299 L1358.35 682.299 L1357.79 682.299 L1357.23 682.299 L1356.67 682.299 L1356.12 682.299 L1355.56 682.299 L1355 682.299 L1354.44 682.299 L1353.88 682.299 L1353.32 682.299 L1352.76 682.299 L1352.2 682.299 L1351.64 682.299 L1351.08 682.299 L1350.52 682.299 L1349.96 682.299 L1349.4 682.299 L1348.84 682.299 L1348.29 682.299 L1347.73 682.299 L1347.17 682.299 L1346.61 682.299 L1346.05 682.299 L1345.49 682.299 L1344.93 682.299 L1344.37 682.299 L1343.81 682.299 L1343.25 682.299 L1342.69 682.299 L1342.13 682.299 L1341.57 682.299 L1341.02 682.299 L1340.46 682.299 L1339.9 682.299 L1339.34 682.299 L1338.78 682.299 L1338.22 682.299 L1337.66 682.299 L1337.1 682.299 L1336.54 682.299 L1335.98 682.299 L1335.42 682.299 L1334.86 682.299 L1334.3 682.299 L1333.75 682.299 L1333.19 682.299 L1332.63 682.299 L1332.07 682.299 L1331.51 682.299 L1330.95 682.299 L1330.39 682.299 L1329.83 682.299 L1329.27 682.299 L1328.71 682.299 L1328.15 682.299 L1327.59 682.299 L1327.03 682.299 L1326.47 682.299 L1325.92 682.299 L1325.36 682.299 L1324.8 682.299 L1324.24 682.299 L1323.68 682.299 L1323.12 682.299 L1322.56 682.299 L1322 682.299 L1321.44 682.299 L1320.88 682.299 L1320.32 682.299 L1319.76 682.299 L1319.2 682.299 L1318.65 682.299 L1318.09 682.299 L1317.53 682.299 L1316.97 682.299 L1316.41 682.299 L1315.85 682.299 L1315.29 682.299 L1314.73 682.299 L1314.17 682.299 L1313.61 682.299 L1313.05 682.299 L1312.49 682.299 L1311.93 682.299 L1311.38 682.299 L1310.82 682.299 L1310.26 682.299 L1309.7 682.299 L1309.14 682.299 L1308.58 682.299 L1308.02 682.299 L1307.46 682.299 L1306.9 682.299 L1306.34 682.299 L1305.78 682.299 L1305.22 682.299 L1304.66 682.299 L1304.1 682.299 L1303.55 682.299 L1302.99 682.299 L1302.43 682.299 L1301.87 682.299 L1301.31 682.299 L1300.75 682.299 L1300.19 682.299 L1299.63 682.299 L1299.07 682.299 L1298.51 682.299 L1297.95 682.299 L1297.39 682.299 L1296.83 682.299 L1296.28 682.299 L1295.72 682.299 L1295.16 682.299 L1294.6 682.299 L1294.04 682.299 L1293.48 682.299 L1292.92 682.299 L1292.36 682.299 L1291.8 682.299 L1291.24 682.299 L1290.68 682.299 L1290.12 682.299 L1289.56 682.299 L1289 682.299 L1288.45 682.299 L1287.89 682.299 L1287.33 682.299 L1286.77 682.299 L1286.21 682.299 L1285.65 682.299 L1285.09 682.299 L1284.53 682.299 L1283.97 682.299 L1283.41 682.299 L1282.85 682.299 L1282.29 682.299 L1281.73 682.299 L1281.18 682.299 L1280.62 682.299 L1280.06 682.299 L1279.5 682.299 L1278.94 682.299 L1278.38 682.299 L1277.82 682.299 L1277.26 682.299 L1276.7 682.299 L1276.14 682.299 L1275.58 682.299 L1275.02 682.299 L1274.46 682.299 L1273.91 682.299 L1273.35 682.299 L1272.79 682.299 L1272.23 682.299 L1271.67 682.299 L1271.11 682.299 L1270.55 682.299 L1269.99 682.299 L1269.43 682.299 L1268.87 682.299 L1268.31 682.299 L1267.75 682.299 L1267.19 682.299 L1266.63 682.299 L1266.08 682.299 L1265.52 682.299 L1264.96 682.299 L1264.4 682.299 L1263.84 682.299 L1263.28 682.299 L1262.72 682.299 L1262.16 682.299 L1261.6 682.299 L1261.04 682.299 L1260.48 682.299 L1259.92 682.299 L1259.36 682.299 L1258.81 682.299 L1258.25 682.299 L1257.69 682.299 L1257.13 682.299 L1256.57 682.299 L1256.01 682.299 L1255.45 682.299 L1254.89 682.299 L1254.33 682.299 L1253.77 682.299 L1253.21 682.299 L1252.65 682.299 L1252.09 682.299 L1251.54 682.299 L1250.98 682.299 L1250.42 682.299 L1249.86 682.299 L1249.3 682.299 L1248.74 682.299 L1248.18 682.299 L1247.62 682.299 L1247.06 682.299 L1246.5 682.299 L1245.94 682.299 L1245.38 682.299 L1244.82 682.299 L1244.26 682.299 L1243.71 682.299 L1243.15 682.299 L1242.59 682.299 L1242.03 682.299 L1241.47 682.299 L1240.91 682.299 L1240.35 682.299 L1239.79 682.299 L1239.23 682.299 L1238.67 682.299 L1238.11 682.299 L1237.55 682.299 L1236.99 682.299 L1236.44 682.299 L1235.88 682.299 L1235.32 682.299 L1234.76 682.299 L1234.2 682.299 L1233.64 682.299 L1233.08 682.299 L1232.52 682.299 L1231.96 682.299 L1231.4 682.299 L1230.84 682.299 L1230.28 682.299 L1229.72 682.299 L1229.17 682.299 L1228.61 682.299 L1228.05 682.299 L1227.49 682.299 L1226.93 682.299 L1226.37 682.299 L1225.81 682.299 L1225.25 682.299 L1224.69 682.299 L1224.13 682.299 L1223.57 682.299 L1223.01 682.299 L1222.45 682.299 L1221.89 682.299 L1221.34 682.299 L1220.78 682.299 L1220.22 682.299 L1219.66 682.299 L1219.1 682.299 L1218.54 682.299 L1217.98 682.299 L1217.42 682.299 L1216.86 682.299 L1216.3 682.299 L1215.74 682.299 L1215.18 682.299 L1214.62 682.299 L1214.07 682.299 L1213.51 682.299 L1212.95 682.299 L1212.39 682.299 L1211.83 682.299 L1211.27 682.299 L1210.71 682.299 L1210.15 682.299 L1209.59 682.299 L1209.03 682.299 L1208.47 682.299 L1207.91 682.299 L1207.35 682.299 L1206.8 682.299 L1206.24 682.299 L1205.68 682.299 L1205.12 682.299 L1204.56 682.299 L1204 682.299 L1203.44 682.299 L1202.88 682.299 L1202.32 682.299 L1201.76 682.299 L1201.2 682.299 L1200.64 682.299 L1200.08 682.299 L1199.52 682.299 L1198.97 682.299 L1198.41 682.299 L1197.85 682.299 L1197.29 682.299 L1196.73 682.299 L1196.17 682.299 L1195.61 682.299 L1195.05 682.299 L1194.49 682.299 L1193.93 682.299 L1193.37 682.299 L1192.81 682.299 L1192.25 682.299 L1191.7 682.299 L1191.14 682.299 L1190.58 682.299 L1190.02 682.299 L1189.46 682.299 L1188.9 682.299 L1188.34 682.299 L1187.78 682.299 L1187.22 682.299 L1186.66 682.299 L1186.1 682.299 L1185.54 682.299 L1184.98 682.299 L1184.43 682.299 L1183.87 682.299 L1183.31 682.299 L1182.75 682.299 L1182.19 682.299 L1181.63 682.299 L1181.07 682.299 L1180.51 682.299 L1179.95 682.299 L1179.39 682.299 L1178.83 682.299 L1178.27 682.299 L1177.71 682.299 L1177.15 682.299 L1176.6 682.299 L1176.04 682.299 L1175.48 682.299 L1174.92 682.299 L1174.36 682.299 L1173.8 682.299 L1173.24 682.299 L1172.68 682.299 L1172.12 682.299 L1171.56 682.299 L1171 682.299 L1170.44 682.299 L1169.88 682.299 L1169.33 682.299 L1168.77 682.299 L1168.21 682.299 L1167.65 682.299 L1167.09 682.299 L1166.53 682.299 L1165.97 682.299 L1165.41 682.299 L1164.85 682.299 L1164.29 682.299 L1163.73 682.299 L1163.17 682.299 L1162.61 682.299 L1162.05 682.299 L1161.5 682.299 L1160.94 682.299 L1160.38 682.299 L1159.82 682.299 L1159.26 682.299 L1158.7 682.299 L1158.14 682.299 L1157.58 682.299 L1157.02 682.299 L1156.46 682.299 L1155.9 682.299 L1155.34 682.299 L1154.78 682.299 L1154.23 682.299 L1153.67 682.299 L1153.11 682.299 L1152.55 682.299 L1151.99 682.299 L1151.43 682.299 L1150.87 682.299 L1150.31 682.299 L1149.75 682.299 L1149.19 682.299 L1148.63 682.299 L1148.07 682.299 L1147.51 682.299 L1146.96 682.299 L1146.4 682.299 L1145.84 682.299 L1145.28 682.299 L1144.72 682.299 L1144.16 682.299 L1143.6 682.299 L1143.04 682.299 L1142.48 682.299 L1141.92 682.299 L1141.36 682.299 L1140.8 682.299 L1140.24 682.299 L1139.68 682.299 L1139.13 682.299 L1138.57 682.299 L1138.01 682.299 L1137.45 682.299 L1136.89 682.299 L1136.33 682.299 L1135.77 682.299 L1135.21 682.299 L1134.65 682.299 L1134.09 682.299 L1133.53 682.299 L1132.97 682.299 L1132.41 682.299 L1131.86 682.299 L1131.3 682.299 L1130.74 682.299 L1130.18 682.299 L1129.62 682.299 L1129.06 682.299 L1128.5 682.299 L1127.94 682.299 L1127.38 682.299 L1126.82 682.299 L1126.26 682.299 L1125.7 682.299 L1125.14 682.299 L1124.59 682.299 L1124.03 682.299 L1123.47 682.299 L1122.91 682.299 L1122.35 682.299 L1121.79 682.299 L1121.23 682.299 L1120.67 682.299 L1120.11 682.299 L1119.55 682.299 L1118.99 682.299 L1118.43 682.299 L1117.87 682.299 L1117.31 682.299 L1116.76 682.299 L1116.2 682.299 L1115.64 682.299 L1115.08 682.299 L1114.52 682.299 L1113.96 682.299 L1113.4 682.299 L1112.84 682.299 L1112.28 682.299 L1111.72 682.299 L1111.16 682.299 L1110.6 682.299 L1110.04 682.299 L1109.49 682.299 L1108.93 682.299 L1108.37 682.299 L1107.81 682.299 L1107.25 682.299 L1106.69 682.299 L1106.13 682.299 L1105.57 682.299 L1105.01 682.299 L1104.45 682.299 L1103.89 682.299 L1103.33 682.299 L1102.77 682.299 L1102.22 682.299 L1101.66 682.299 L1101.1 682.299 L1100.54 682.299 L1099.98 682.299 L1099.42 682.299 L1098.86 682.299 L1098.3 682.299 L1097.74 682.299 L1097.18 682.299 L1096.62 682.299 L1096.06 682.299 L1095.5 682.299 L1094.94 682.299 L1094.39 682.299 L1093.83 682.299 L1093.27 682.299 L1092.71 682.299 L1092.15 682.299 L1091.59 682.299 L1091.03 682.299 L1090.47 682.299 L1089.91 682.299 L1089.35 682.299 L1088.79 682.299 L1088.23 682.299 L1087.67 682.299 L1087.12 682.299 L1086.56 682.299 L1086 682.299 L1085.44 682.299 L1084.88 682.299 L1084.32 682.299 L1083.76 682.299 L1083.2 682.299 L1082.64 682.299 L1082.08 682.299 L1081.52 682.299 L1080.96 682.299 L1080.4 682.299 L1079.85 682.299 L1079.29 682.299 L1078.73 682.299 L1078.17 682.299 L1077.61 682.299 L1077.05 682.299 L1076.49 682.299 L1075.93 682.299 L1075.37 682.299 L1074.81 682.299 L1074.25 682.299 L1073.69 682.299 L1073.13 682.299 L1072.57 682.299 L1072.02 682.299 L1071.46 682.299 L1070.9 682.299 L1070.34 682.299 L1069.78 682.299 L1069.22 682.299 L1068.66 682.299 L1068.1 682.299 L1067.54 682.299 L1066.98 682.299 L1066.42 682.299 L1065.86 682.299 L1065.3 682.299 L1064.75 682.299 L1064.19 682.299 L1063.63 682.299 L1063.07 682.299 L1062.51 682.299 L1061.95 682.299 L1061.39 682.299 L1060.83 682.299 L1060.27 682.299 L1059.71 682.299 L1059.15 682.299 L1058.59 682.299 L1058.03 682.299 L1057.48 682.299 L1056.92 682.299 L1056.36 682.299 L1055.8 682.299 L1055.24 682.299 L1054.68 682.299 L1054.12 682.299 L1053.56 682.299 L1053 682.299 L1052.44 682.299 L1051.88 682.299 L1051.32 682.299 L1050.76 682.299 L1050.2 682.299 L1049.65 682.299 L1049.09 682.299 L1048.53 682.299 L1047.97 682.299 L1047.41 682.299 L1046.85 682.299 L1046.29 682.299 L1045.73 682.299 L1045.17 682.299 L1044.61 682.299 L1044.05 682.299 L1043.49 682.299 L1042.93 682.299 L1042.38 682.299 L1041.82 682.299 L1041.26 682.299 L1040.7 682.299 L1040.14 682.299 L1039.58 682.299 L1039.02 682.299 L1038.46 682.299 L1037.9 682.299 L1037.34 682.299 L1036.78 682.299 L1036.22 682.299 L1035.66 682.299 L1035.1 682.299 L1034.55 682.299 L1033.99 682.299 L1033.43 682.299 L1032.87 682.299 L1032.31 682.299 L1031.75 682.299 L1031.19 682.299 L1030.63 682.299 L1030.07 682.299 L1029.51 682.299 L1028.95 682.299 L1028.39 682.299 L1027.83 682.299 L1027.28 682.299 L1026.72 682.299 L1026.16 682.299 L1025.6 682.299 L1025.04 682.299 L1024.48 682.299 L1023.92 682.299 L1023.36 682.299 L1022.8 682.299 L1022.24 682.299 L1021.68 682.299 L1021.12 682.299 L1020.56 682.299 L1020.01 682.299 L1019.45 682.299 L1018.89 682.299 L1018.33 682.299 L1017.77 682.299 L1017.21 682.299 L1016.65 682.299 L1016.09 682.299 L1015.53 682.299 L1014.97 682.299 L1014.41 682.299 L1013.85 682.299 L1013.29 682.299 L1012.73 682.299 L1012.18 682.299 L1011.62 682.299 L1011.06 682.299 L1010.5 682.299 L1009.94 682.299 L1009.38 682.299 L1008.82 682.299 L1008.26 682.299 L1007.7 682.299 L1007.14 682.299 L1006.58 682.299 L1006.02 682.299 L1005.46 682.299 L1004.91 682.299 L1004.35 682.299 L1003.79 682.299 L1003.23 682.299 L1002.67 682.299 L1002.11 682.299 L1001.55 682.299 L1000.99 682.299 L1000.43 682.299 L999.872 682.299 L999.313 682.299 L998.754 682.299 L998.194 682.299 L997.635 682.299 L997.076 682.299 L996.517 682.299 L995.957 682.299 L995.398 682.299 L994.839 682.299 L994.28 682.299 L993.72 682.299 L993.161 682.299 L992.602 682.299 L992.043 682.299 L991.483 682.299 L990.924 682.299 L990.365 682.299 L989.806 682.299 L989.246 682.299 L988.687 682.299 L988.128 682.299 L987.569 682.299 L987.009 682.299 L986.45 682.299 L985.891 682.299 L985.332 682.299 L984.772 682.299 L984.213 682.299 L983.654 682.299 L983.095 682.299 L982.535 682.299 L981.976 682.299 L981.417 682.299 L980.858 682.299 L980.298 682.299 L979.739 682.299 L979.18 682.299 L978.621 682.299 L978.061 682.299 L977.502 682.299 L976.943 682.299 L976.384 682.299 L975.824 682.299 L975.265 682.299 L974.706 682.299 L974.147 682.299 L973.587 682.299 L973.028 682.299 L972.469 682.299 L971.91 682.299 L971.35 682.299 L970.791 682.299 L970.232 682.299 L969.673 682.299 L969.113 682.299 L968.554 682.299 L967.995 682.299 L967.436 682.299 L966.876 682.299 L966.317 682.299 L965.758 682.299 L965.199 682.299 L964.639 682.299 L964.08 682.299 L963.521 682.299 L962.962 682.299 L962.402 682.299 L961.843 682.299 L961.284 682.299 L960.725 682.299 L960.165 682.299 L959.606 682.299 L959.047 682.299 L958.488 682.299 L957.928 682.299 L957.369 682.299 L956.81 682.299 L956.251 682.299 L955.691 682.299 L955.132 682.299 L954.573 682.299 L954.014 682.299 L953.454 682.299 L952.895 682.299 L952.336 682.299 L951.777 682.299 L951.217 682.299 L950.658 682.299 L950.099 682.299 L949.54 682.299 L948.98 682.299 L948.421 682.299 L947.862 682.299 L947.303 682.299 L946.743 682.299 L946.184 682.299 L945.625 682.299 L945.066 682.299 L944.506 682.299 L943.947 682.299 L943.388 682.299 L942.829 682.299 L942.269 682.299 L941.71 682.299 L941.151 682.299 L940.592 682.299 L940.032 682.299 L939.473 682.299 L938.914 682.299 L938.355 682.299 L937.795 682.299 L937.236 682.299 L936.677 682.299 L936.118 682.299 L935.558 682.299 L934.999 682.299 L934.44 682.299 L933.881 682.299 L933.321 682.299 L932.762 682.299 L932.203 682.299 L931.644 682.299 L931.084 682.299 L930.525 682.299 L929.966 682.299 L929.406 682.299 L928.847 682.299 L928.288 682.299 L927.729 682.299 L927.169 682.299 L926.61 682.299 L926.051 682.299 L925.492 682.299 L924.932 682.299 L924.373 682.299 L923.814 682.299 L923.255 682.299 L922.695 682.299 L922.136 682.299 L921.577 682.299 L921.018 682.299 L920.458 682.299 L919.899 682.299 L919.34 682.299 L918.781 682.299 L918.221 682.299 L917.662 682.299 L917.103 682.299 L916.544 682.299 L915.984 682.299 L915.425 682.299 L914.866 682.299 L914.307 682.299 L913.747 682.299 L913.188 682.299 L912.629 682.299 L912.07 682.299 L911.51 682.299 L910.951 682.299 L910.392 682.299 L909.833 682.299 L909.273 682.299 L908.714 682.299 L908.155 682.299 L907.596 682.299 L907.036 682.299 L906.477 682.299 L905.918 682.299 L905.359 682.299 L904.799 682.299 L904.24 682.299 L903.681 682.299 L903.122 682.299 L902.562 682.299 L902.003 682.299 L901.444 682.299 L900.885 682.299 L900.325 682.299 L899.766 682.299 L899.207 682.299 L898.648 682.299 L898.088 682.299 L897.529 682.299 L896.97 682.299 L896.411 682.299 L895.851 682.299 L895.292 682.299 L894.733 682.299 L894.174 682.299 L893.614 682.299 L893.055 682.299 L892.496 682.299 L891.937 682.299 L891.377 682.299 L890.818 682.299 L890.259 682.299 L889.7 682.299 L889.14 682.299 L888.581 682.299 L888.022 682.299 L887.463 682.299 L886.903 682.299 L886.344 682.299 L885.785 682.299 L885.226 682.299 L884.666 682.299 L884.107 682.299 L883.548 682.299 L882.989 682.299 L882.429 682.299 L881.87 682.299 L881.311 682.299 L880.752 682.299 L880.192 682.299 L879.633 682.299 L879.074 682.299 L878.515 682.299 L877.955 682.299 L877.396 682.299 L876.837 682.299 L876.278 682.299 L875.718 682.299 L875.159 682.299 L874.6 682.299 L874.041 682.299 L873.481 682.299 L872.922 682.299 L872.363 682.299 L871.804 682.299 L871.244 682.299 L870.685 682.299 L870.126 682.299 L869.567 682.299 L869.007 682.299 L868.448 682.299 L867.889 682.299 L867.33 682.299 L866.77 682.299 L866.211 682.299 L865.652 682.299 L865.093 682.299 L864.533 682.299 L863.974 682.299 L863.415 682.299 L862.856 682.299 L862.296 682.299 L861.737 682.299 L861.178 682.299 L860.619 682.299 L860.059 682.299 L859.5 682.299 L858.941 682.299 L858.382 682.299 L857.822 682.299 L857.263 682.299 L856.704 682.299 L856.145 682.299 L855.585 682.299 L855.026 682.299 L854.467 682.299 L853.908 682.299 L853.348 682.299 L852.789 682.299 L852.23 682.299 L851.671 682.299 L851.111 682.299 L850.552 682.299 L849.993 682.299 L849.434 682.299 L848.874 682.299 L848.315 682.299 L847.756 682.299 L847.197 682.299 L846.637 682.299 L846.078 682.299 L845.519 682.299 L844.96 682.299 L844.4 682.299 L843.841 682.299 L843.282 682.299 L842.723 682.299 L842.163 682.299 L841.604 682.299 L841.045 682.299 L840.486 682.299 L839.926 682.299 L839.367 682.299 L838.808 682.299 L838.249 682.299 L837.689 682.299 L837.13 682.299 L836.571 682.299 L836.012 682.299 L835.452 682.299 L834.893 682.299 L834.334 682.299 L833.775 682.299 L833.215 682.299 L832.656 682.299 L832.097 682.299 L831.538 682.299 L830.978 682.299 L830.419 682.299 L829.86 682.299 L829.301 682.299 L828.741 682.299 L828.182 682.299 L827.623 682.299 L827.064 682.299 L826.504 682.299 L825.945 682.299 L825.386 682.299 L824.827 682.299 L824.267 682.299 L823.708 682.299 L823.149 682.299 L822.59 682.299 L822.03 682.299 L821.471 682.299 L820.912 682.299 L820.353 682.299 L819.793 682.299 L819.234 682.299 L818.675 682.299 L818.116 682.299 L817.556 682.299 L816.997 682.299 L816.438 682.299 L815.879 682.299 L815.319 682.299 L814.76 682.299 L814.201 682.299 L813.642 682.299 L813.082 682.299 L812.523 682.299 L811.964 682.299 L811.405 682.299 L810.845 682.299 L810.286 682.299 L809.727 682.299 L809.168 682.299 L808.608 682.299 L808.049 682.299 L807.49 682.299 L806.931 682.299 L806.371 682.299 L805.812 682.299 L805.253 682.299 L804.693 682.299 L804.134 682.299 L803.575 682.299 L803.016 682.299 L802.456 682.299 L801.897 682.299 L801.338 682.299 L800.779 682.299 L800.219 682.299 L799.66 682.299 L799.101 682.299 L798.542 682.299 L797.982 682.299 L797.423 682.299 L796.864 682.299 L796.305 682.299 L795.745 682.299 L795.186 682.299 L794.627 682.299 L794.068 682.299 L793.508 682.299 L792.949 682.299 L792.39 682.299 L791.831 682.299 L791.271 682.299 L790.712 682.299 L790.153 682.299 L789.594 682.299 L789.034 682.299 L788.475 682.299 L787.916 682.299 L787.357 682.299 L786.797 682.299 L786.238 682.299 L785.679 682.299 L785.12 682.299 L784.56 682.299 L784.001 682.299 L783.442 682.299 L782.883 682.299 L782.323 682.299 L781.764 682.299 L781.205 682.299 L780.646 682.299 L780.086 682.299 L779.527 682.299 L778.968 682.299 L778.409 682.299 L777.849 682.299 L777.29 682.299 L776.731 682.299 L776.172 682.299 L775.612 682.299 L775.053 682.299 L774.494 682.299 L773.935 682.299 L773.375 682.299 L772.816 682.299 L772.257 682.299 L771.698 682.299 L771.138 682.299 L770.579 682.299 L770.02 682.299 L769.461 682.299 L768.901 682.299 L768.342 682.299 L767.783 682.299 L767.224 682.299 L766.664 682.299 L766.105 682.299 L765.546 682.299 L764.987 682.299 L764.427 682.299 L763.868 682.299 L763.309 682.299 L762.75 682.299 L762.19 682.299 L761.631 682.299 L761.072 682.299 L760.513 682.299 L759.953 682.299 L759.394 682.299 L758.835 682.299 L758.276 682.299 L757.716 682.299 L757.157 682.299 L756.598 682.299 L756.039 682.299 L755.479 682.299 L754.92 682.299 L754.361 682.299 L753.802 682.299 L753.242 682.299 L752.683 682.299 L752.124 682.299 L751.565 682.299 L751.005 682.299 L750.446 682.299 L749.887 682.299 L749.328 682.299 L748.768 682.299 L748.209 682.299 L747.65 682.299 L747.091 682.299 L746.531 682.299 L745.972 682.299 L745.413 682.299 L744.854 682.299 L744.294 682.299 L743.735 682.299 L743.176 682.299 L742.617 682.299 L742.057 682.299 L741.498 682.299 L740.939 682.299 L740.38 682.299 L739.82 682.299 L739.261 682.299 L738.702 682.299 L738.143 682.299 L737.583 682.299 L737.024 682.299 L736.465 682.299 L735.906 682.299 L735.346 682.299 L734.787 682.299 L734.228 682.299 L733.669 682.299 L733.109 682.299 L732.55 682.299 L731.991 682.299 L731.432 682.299 L730.872 682.299 L730.313 682.299 L729.754 682.299 L729.195 682.299 L728.635 682.299 L728.076 682.299 L727.517 682.299 L726.958 682.299 L726.398 682.299 L725.839 682.299 L725.28 682.299 L724.721 682.299 L724.161 682.299 L723.602 682.299 L723.043 682.299 L722.484 682.299 L721.924 682.299 L721.365 682.299 L720.806 682.299 L720.247 682.299  Z\" fill=\"#3da44d\" fill-rule=\"evenodd\" fill-opacity=\"0.5\"/>\n<polyline clip-path=\"url(#clip153)\" style=\"stroke:#3da44d; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"720.247,683.288 720.806,683.288 721.365,683.288 721.924,683.288 722.484,683.288 723.043,683.288 723.602,683.288 724.161,683.288 724.721,683.288 725.28,683.288 725.839,683.288 726.398,683.288 726.958,683.288 727.517,683.288 728.076,683.288 728.635,683.288 729.195,683.288 729.754,683.288 730.313,683.288 730.872,683.288 731.432,683.288 731.991,683.288 732.55,683.288 733.109,683.288 733.669,683.288 734.228,683.288 734.787,683.288 735.346,683.288 735.906,683.288 736.465,683.288 737.024,683.288 737.583,683.288 738.143,683.288 738.702,683.288 739.261,683.288 739.82,683.288 740.38,683.288 740.939,683.288 741.498,683.288 742.057,683.288 742.617,683.288 743.176,683.288 743.735,683.288 744.294,683.288 744.854,683.288 745.413,683.288 745.972,683.288 746.531,683.288 747.091,683.288 747.65,683.288 748.209,683.288 748.768,683.288 749.328,683.288 749.887,683.288 750.446,683.288 751.005,683.288 751.565,683.288 752.124,683.288 752.683,683.288 753.242,683.288 753.802,683.288 754.361,683.288 754.92,683.288 755.479,683.288 756.039,683.288 756.598,683.288 757.157,683.288 757.716,683.288 758.276,683.288 758.835,683.288 759.394,683.288 759.953,683.288 760.513,683.288 761.072,683.288 761.631,683.288 762.19,683.288 762.75,683.288 763.309,683.288 763.868,683.288 764.427,683.288 764.987,683.288 765.546,683.288 766.105,683.288 766.664,683.288 767.224,683.288 767.783,683.288 768.342,683.288 768.901,683.288 769.461,683.288 770.02,683.288 770.579,683.288 771.138,683.288 771.698,683.288 772.257,683.288 772.816,683.288 773.375,683.288 773.935,683.288 774.494,683.288 775.053,683.288 775.612,683.288 776.172,683.288 776.731,683.288 777.29,683.288 777.849,683.288 778.409,683.288 778.968,683.288 779.527,683.288 780.086,683.288 780.646,683.288 781.205,683.288 781.764,683.288 782.323,683.288 782.883,683.288 783.442,683.288 784.001,683.288 784.56,683.288 785.12,683.288 785.679,683.288 786.238,683.288 786.797,683.288 787.357,683.288 787.916,683.288 788.475,683.288 789.034,683.288 789.594,683.288 790.153,683.288 790.712,683.288 791.271,683.288 791.831,683.288 792.39,683.288 792.949,683.288 793.508,683.288 794.068,683.288 794.627,683.288 795.186,683.288 795.745,683.288 796.305,683.288 796.864,683.288 797.423,683.288 797.982,683.288 798.542,683.288 799.101,683.288 799.66,683.288 800.219,683.288 800.779,683.288 801.338,683.288 801.897,683.288 802.456,683.288 803.016,683.288 803.575,683.288 804.134,683.288 804.693,683.288 805.253,683.288 805.812,683.288 806.371,683.288 806.931,683.288 807.49,683.288 808.049,683.288 808.608,683.288 809.168,683.288 809.727,683.288 810.286,683.288 810.845,683.288 811.405,683.288 811.964,683.288 812.523,683.288 813.082,683.288 813.642,683.288 814.201,683.288 814.76,683.288 815.319,683.288 815.879,683.288 816.438,683.288 816.997,683.288 817.556,683.288 818.116,683.288 818.675,683.288 819.234,683.288 819.793,683.288 820.353,683.288 820.912,683.288 821.471,683.288 822.03,683.288 822.59,683.288 823.149,683.288 823.708,683.288 824.267,683.288 824.827,683.288 825.386,683.288 825.945,683.288 826.504,683.288 827.064,683.288 827.623,683.288 828.182,683.288 828.741,683.288 829.301,683.288 829.86,683.288 830.419,683.288 830.978,683.288 831.538,683.288 832.097,683.288 832.656,683.288 833.215,683.288 833.775,683.288 834.334,683.288 834.893,683.288 835.452,683.288 836.012,683.288 836.571,683.288 837.13,683.288 837.689,683.288 838.249,683.288 838.808,683.288 839.367,683.288 839.926,683.288 840.486,683.288 841.045,683.288 841.604,683.288 842.163,683.288 842.723,683.288 843.282,683.288 843.841,683.288 844.4,683.288 844.96,683.288 845.519,683.288 846.078,683.288 846.637,683.288 847.197,683.288 847.756,683.288 848.315,683.288 848.874,683.288 849.434,683.288 849.993,683.288 850.552,683.288 851.111,683.288 851.671,683.288 852.23,683.288 852.789,683.288 853.348,683.288 853.908,683.288 854.467,683.288 855.026,683.288 855.585,683.288 856.145,683.288 856.704,683.288 857.263,683.288 857.822,683.288 858.382,683.288 858.941,683.288 859.5,683.288 860.059,683.288 860.619,683.288 861.178,683.288 861.737,683.288 862.296,683.288 862.856,683.288 863.415,683.288 863.974,683.288 864.533,683.288 865.093,683.288 865.652,683.288 866.211,683.288 866.77,683.288 867.33,683.288 867.889,683.288 868.448,683.288 869.007,683.288 869.567,683.288 870.126,683.288 870.685,683.288 871.244,683.288 871.804,683.288 872.363,683.288 872.922,683.288 873.481,683.288 874.041,683.288 874.6,683.288 875.159,683.288 875.718,683.288 876.278,683.288 876.837,683.288 877.396,683.288 877.955,683.288 878.515,683.288 879.074,683.288 879.633,683.288 880.192,683.288 880.752,683.288 881.311,683.288 881.87,683.288 882.429,683.288 882.989,683.288 883.548,683.288 884.107,683.288 884.666,683.288 885.226,683.288 885.785,683.288 886.344,683.288 886.903,683.288 887.463,683.288 888.022,683.288 888.581,683.288 889.14,683.288 889.7,683.288 890.259,683.288 890.818,683.288 891.377,683.288 891.937,683.288 892.496,683.288 893.055,683.288 893.614,683.288 894.174,683.288 894.733,683.288 895.292,683.288 895.851,683.288 896.411,683.288 896.97,683.288 897.529,683.288 898.088,683.288 898.648,683.288 899.207,683.288 899.766,683.288 900.325,683.288 900.885,683.288 901.444,683.288 902.003,683.288 902.562,683.288 903.122,683.288 903.681,683.288 904.24,683.288 904.799,683.288 905.359,683.288 905.918,683.288 906.477,683.288 907.036,683.288 907.596,683.288 908.155,683.288 908.714,683.288 909.273,683.288 909.833,683.288 910.392,683.288 910.951,683.288 911.51,683.288 912.07,683.288 912.629,683.288 913.188,683.288 913.747,683.288 914.307,683.288 914.866,683.288 915.425,683.288 915.984,683.288 916.544,683.288 917.103,683.288 917.662,683.288 918.221,683.288 918.781,683.288 919.34,683.288 919.899,683.288 920.458,683.288 921.018,683.288 921.577,683.288 922.136,683.288 922.695,683.288 923.255,683.288 923.814,683.288 924.373,683.288 924.932,683.288 925.492,683.288 926.051,683.288 926.61,683.288 927.169,683.288 927.729,683.288 928.288,683.288 928.847,683.288 929.406,683.288 929.966,683.288 930.525,683.288 931.084,683.288 931.644,683.288 932.203,683.288 932.762,683.288 933.321,683.288 933.881,683.288 934.44,683.288 934.999,683.288 935.558,683.288 936.118,683.288 936.677,683.288 937.236,683.288 937.795,683.288 938.355,683.288 938.914,683.288 939.473,683.288 940.032,683.288 940.592,683.288 941.151,683.288 941.71,683.288 942.269,683.288 942.829,683.288 943.388,683.288 943.947,683.288 944.506,683.288 945.066,683.288 945.625,683.288 946.184,683.288 946.743,683.288 947.303,683.288 947.862,683.288 948.421,683.288 948.98,683.288 949.54,683.288 950.099,683.288 950.658,683.288 951.217,683.288 951.777,683.288 952.336,683.288 952.895,683.288 953.454,683.288 954.014,683.288 954.573,683.288 955.132,683.288 955.691,683.288 956.251,683.288 956.81,683.288 957.369,683.288 957.928,683.288 958.488,683.288 959.047,683.288 959.606,683.288 960.165,683.288 960.725,683.288 961.284,683.288 961.843,683.288 962.402,683.288 962.962,683.288 963.521,683.288 964.08,683.288 964.639,683.288 965.199,683.288 965.758,683.288 966.317,683.288 966.876,683.288 967.436,683.288 967.995,683.288 968.554,683.288 969.113,683.288 969.673,683.288 970.232,683.288 970.791,683.288 971.35,683.288 971.91,683.288 972.469,683.288 973.028,683.288 973.587,683.288 974.147,683.288 974.706,683.288 975.265,683.288 975.824,683.288 976.384,683.288 976.943,683.288 977.502,683.288 978.061,683.288 978.621,683.288 979.18,683.288 979.739,683.288 980.298,683.288 980.858,683.288 981.417,683.288 981.976,683.288 982.535,683.288 983.095,683.288 983.654,683.288 984.213,683.288 984.772,683.288 985.332,683.288 985.891,683.288 986.45,683.288 987.009,683.288 987.569,683.288 988.128,683.288 988.687,683.288 989.246,683.288 989.806,683.288 990.365,683.288 990.924,683.288 991.483,683.288 992.043,683.288 992.602,683.288 993.161,683.288 993.72,683.288 994.28,683.288 994.839,683.288 995.398,683.288 995.957,683.288 996.517,683.288 997.076,683.288 997.635,683.288 998.194,683.288 998.754,683.288 999.313,683.288 999.872,683.288 1000.43,683.288 1000.99,683.288 1001.55,683.288 1002.11,683.288 1002.67,683.288 1003.23,683.288 1003.79,683.288 1004.35,683.288 1004.91,683.288 1005.46,683.288 1006.02,683.288 1006.58,683.288 1007.14,683.288 1007.7,683.288 1008.26,683.288 1008.82,683.288 1009.38,683.288 1009.94,683.288 1010.5,683.288 1011.06,683.288 1011.62,683.288 1012.18,683.288 1012.73,683.288 1013.29,683.288 1013.85,683.288 1014.41,683.288 1014.97,683.288 1015.53,683.288 1016.09,683.288 1016.65,683.288 1017.21,683.288 1017.77,683.288 1018.33,683.288 1018.89,683.288 1019.45,683.288 1020.01,683.288 1020.56,683.288 1021.12,683.288 1021.68,683.288 1022.24,683.288 1022.8,683.288 1023.36,683.288 1023.92,683.288 1024.48,683.288 1025.04,683.288 1025.6,683.288 1026.16,683.288 1026.72,683.288 1027.28,683.288 1027.83,683.288 1028.39,683.288 1028.95,683.288 1029.51,683.288 1030.07,683.288 1030.63,683.288 1031.19,683.288 1031.75,683.288 1032.31,683.288 1032.87,683.288 1033.43,683.288 1033.99,683.288 1034.55,683.288 1035.1,683.288 1035.66,683.288 1036.22,683.288 1036.78,683.288 1037.34,683.288 1037.9,683.288 1038.46,683.288 1039.02,683.288 1039.58,683.288 1040.14,683.288 1040.7,683.288 1041.26,683.288 1041.82,683.288 1042.38,683.288 1042.93,683.288 1043.49,683.288 1044.05,683.288 1044.61,683.288 1045.17,683.288 1045.73,683.288 1046.29,683.288 1046.85,683.288 1047.41,683.288 1047.97,683.288 1048.53,683.288 1049.09,683.288 1049.65,683.288 1050.2,683.288 1050.76,683.288 1051.32,683.288 1051.88,683.288 1052.44,683.288 1053,683.288 1053.56,683.288 1054.12,683.288 1054.68,683.288 1055.24,683.288 1055.8,683.288 1056.36,683.288 1056.92,683.288 1057.48,683.288 1058.03,683.288 1058.59,683.288 1059.15,683.288 1059.71,683.288 1060.27,683.288 1060.83,683.288 1061.39,683.288 1061.95,683.288 1062.51,683.288 1063.07,683.288 1063.63,683.288 1064.19,683.288 1064.75,683.288 1065.3,683.288 1065.86,683.288 1066.42,683.288 1066.98,683.288 1067.54,683.288 1068.1,683.288 1068.66,683.288 1069.22,683.288 1069.78,683.288 1070.34,683.288 1070.9,683.288 1071.46,683.288 1072.02,683.288 1072.57,683.288 1073.13,683.288 1073.69,683.288 1074.25,683.288 1074.81,683.288 1075.37,683.288 1075.93,683.288 1076.49,683.288 1077.05,683.288 1077.61,683.288 1078.17,683.288 1078.73,683.288 1079.29,683.288 1079.85,683.288 1080.4,683.288 1080.96,683.288 1081.52,683.288 1082.08,683.288 1082.64,683.288 1083.2,683.288 1083.76,683.288 1084.32,683.288 1084.88,683.288 1085.44,683.288 1086,683.288 1086.56,683.288 1087.12,683.288 1087.67,683.288 1088.23,683.288 1088.79,683.288 1089.35,683.288 1089.91,683.288 1090.47,683.288 1091.03,683.288 1091.59,683.288 1092.15,683.288 1092.71,683.288 1093.27,683.288 1093.83,683.288 1094.39,683.288 1094.94,683.288 1095.5,683.288 1096.06,683.288 1096.62,683.288 1097.18,683.288 1097.74,683.288 1098.3,683.288 1098.86,683.288 1099.42,683.288 1099.98,683.288 1100.54,683.288 1101.1,683.288 1101.66,683.288 1102.22,683.288 1102.77,683.288 1103.33,683.288 1103.89,683.288 1104.45,683.288 1105.01,683.288 1105.57,683.288 1106.13,683.288 1106.69,683.288 1107.25,683.288 1107.81,683.288 1108.37,683.288 1108.93,683.288 1109.49,683.288 1110.04,683.288 1110.6,683.288 1111.16,683.288 1111.72,683.288 1112.28,683.288 1112.84,683.288 1113.4,683.288 1113.96,683.288 1114.52,683.288 1115.08,683.288 1115.64,683.288 1116.2,683.288 1116.76,683.288 1117.31,683.288 1117.87,683.288 1118.43,683.288 1118.99,683.288 1119.55,683.288 1120.11,683.288 1120.67,683.288 1121.23,683.288 1121.79,683.288 1122.35,683.288 1122.91,683.288 1123.47,683.288 1124.03,683.288 1124.59,683.288 1125.14,683.288 1125.7,683.288 1126.26,683.288 1126.82,683.288 1127.38,683.288 1127.94,683.288 1128.5,683.288 1129.06,683.288 1129.62,683.288 1130.18,683.288 1130.74,683.288 1131.3,683.288 1131.86,683.288 1132.41,683.288 1132.97,683.288 1133.53,683.288 1134.09,683.288 1134.65,683.288 1135.21,683.288 1135.77,683.288 1136.33,683.288 1136.89,683.288 1137.45,683.288 1138.01,683.288 1138.57,683.288 1139.13,683.288 1139.68,683.288 1140.24,683.288 1140.8,683.288 1141.36,683.288 1141.92,683.288 1142.48,683.288 1143.04,683.288 1143.6,683.288 1144.16,683.288 1144.72,683.288 1145.28,683.288 1145.84,683.288 1146.4,683.288 1146.96,683.288 1147.51,683.288 1148.07,683.288 1148.63,683.288 1149.19,683.288 1149.75,683.288 1150.31,683.288 1150.87,683.288 1151.43,683.288 1151.99,683.288 1152.55,683.288 1153.11,683.288 1153.67,683.288 1154.23,683.288 1154.78,683.288 1155.34,683.288 1155.9,683.288 1156.46,683.288 1157.02,683.288 1157.58,683.288 1158.14,683.288 1158.7,683.288 1159.26,683.288 1159.82,683.288 1160.38,683.288 1160.94,683.288 1161.5,683.288 1162.05,683.288 1162.61,683.288 1163.17,683.288 1163.73,683.288 1164.29,683.288 1164.85,683.288 1165.41,683.288 1165.97,683.288 1166.53,683.288 1167.09,683.288 1167.65,683.288 1168.21,683.288 1168.77,683.288 1169.33,683.288 1169.88,683.288 1170.44,683.288 1171,683.288 1171.56,683.288 1172.12,683.288 1172.68,683.288 1173.24,683.288 1173.8,683.288 1174.36,683.288 1174.92,683.288 1175.48,683.288 1176.04,683.288 1176.6,683.288 1177.15,683.288 1177.71,683.288 1178.27,683.288 1178.83,683.288 1179.39,683.288 1179.95,683.288 1180.51,683.288 1181.07,683.288 1181.63,683.288 1182.19,683.288 1182.75,683.288 1183.31,683.288 1183.87,683.288 1184.43,683.288 1184.98,683.288 1185.54,683.288 1186.1,683.288 1186.66,683.288 1187.22,683.288 1187.78,683.288 1188.34,683.288 1188.9,683.288 1189.46,683.288 1190.02,683.288 1190.58,683.288 1191.14,683.288 1191.7,683.288 1192.25,683.288 1192.81,683.288 1193.37,683.288 1193.93,683.288 1194.49,683.288 1195.05,683.288 1195.61,683.288 1196.17,683.288 1196.73,683.288 1197.29,683.288 1197.85,683.288 1198.41,683.288 1198.97,683.288 1199.52,683.288 1200.08,683.288 1200.64,683.288 1201.2,683.288 1201.76,683.288 1202.32,683.288 1202.88,683.288 1203.44,683.288 1204,683.288 1204.56,683.288 1205.12,683.288 1205.68,683.288 1206.24,683.288 1206.8,683.288 1207.35,683.288 1207.91,683.288 1208.47,683.288 1209.03,683.288 1209.59,683.288 1210.15,683.288 1210.71,683.288 1211.27,683.288 1211.83,683.288 1212.39,683.288 1212.95,683.288 1213.51,683.288 1214.07,683.288 1214.62,683.288 1215.18,683.288 1215.74,683.288 1216.3,683.288 1216.86,683.288 1217.42,683.288 1217.98,683.288 1218.54,683.288 1219.1,683.288 1219.66,683.288 1220.22,683.288 1220.78,683.288 1221.34,683.288 1221.89,683.288 1222.45,683.288 1223.01,683.288 1223.57,683.288 1224.13,683.288 1224.69,683.288 1225.25,683.288 1225.81,683.288 1226.37,683.288 1226.93,683.288 1227.49,683.288 1228.05,683.288 1228.61,683.288 1229.17,683.288 1229.72,683.288 1230.28,683.288 1230.84,683.288 1231.4,683.288 1231.96,683.288 1232.52,683.288 1233.08,683.288 1233.64,683.288 1234.2,683.288 1234.76,683.288 1235.32,683.288 1235.88,683.288 1236.44,683.288 1236.99,683.288 1237.55,683.288 1238.11,683.288 1238.67,683.288 1239.23,683.288 1239.79,683.288 1240.35,683.288 1240.91,683.288 1241.47,683.288 1242.03,683.288 1242.59,683.288 1243.15,683.288 1243.71,683.288 1244.26,683.288 1244.82,683.288 1245.38,683.288 1245.94,683.288 1246.5,683.288 1247.06,683.288 1247.62,683.288 1248.18,683.288 1248.74,683.288 1249.3,683.288 1249.86,683.288 1250.42,683.288 1250.98,683.288 1251.54,683.288 1252.09,683.288 1252.65,683.288 1253.21,683.288 1253.77,683.288 1254.33,683.288 1254.89,683.288 1255.45,683.288 1256.01,683.288 1256.57,683.288 1257.13,683.288 1257.69,683.288 1258.25,683.288 1258.81,683.288 1259.36,683.288 1259.92,683.288 1260.48,683.288 1261.04,683.288 1261.6,683.288 1262.16,683.288 1262.72,683.288 1263.28,683.288 1263.84,683.288 1264.4,683.288 1264.96,683.288 1265.52,683.288 1266.08,683.288 1266.63,683.288 1267.19,683.288 1267.75,683.288 1268.31,683.288 1268.87,683.288 1269.43,683.288 1269.99,683.288 1270.55,683.288 1271.11,683.288 1271.67,683.288 1272.23,683.288 1272.79,683.288 1273.35,683.288 1273.91,683.288 1274.46,683.288 1275.02,683.288 1275.58,683.288 1276.14,683.288 1276.7,683.288 1277.26,683.288 1277.82,683.288 1278.38,683.288 1278.94,683.288 1279.5,683.288 1280.06,683.288 1280.62,683.288 1281.18,683.288 1281.73,683.288 1282.29,683.288 1282.85,683.288 1283.41,683.288 1283.97,683.288 1284.53,683.288 1285.09,683.288 1285.65,683.288 1286.21,683.288 1286.77,683.288 1287.33,683.288 1287.89,683.288 1288.45,683.288 1289,683.288 1289.56,683.288 1290.12,683.288 1290.68,683.288 1291.24,683.288 1291.8,683.288 1292.36,683.288 1292.92,683.288 1293.48,683.288 1294.04,683.288 1294.6,683.288 1295.16,683.288 1295.72,683.288 1296.28,683.288 1296.83,683.288 1297.39,683.288 1297.95,683.288 1298.51,683.288 1299.07,683.288 1299.63,683.288 1300.19,683.288 1300.75,683.288 1301.31,683.288 1301.87,683.288 1302.43,683.288 1302.99,683.288 1303.55,683.288 1304.1,683.288 1304.66,683.288 1305.22,683.288 1305.78,683.288 1306.34,683.288 1306.9,683.288 1307.46,683.288 1308.02,683.288 1308.58,683.288 1309.14,683.288 1309.7,683.288 1310.26,683.288 1310.82,683.288 1311.38,683.288 1311.93,683.288 1312.49,683.288 1313.05,683.288 1313.61,683.288 1314.17,683.288 1314.73,683.288 1315.29,683.288 1315.85,683.288 1316.41,683.288 1316.97,683.288 1317.53,683.288 1318.09,683.288 1318.65,683.288 1319.2,683.288 1319.76,683.288 1320.32,683.288 1320.88,683.288 1321.44,683.288 1322,683.288 1322.56,683.288 1323.12,683.288 1323.68,683.288 1324.24,683.288 1324.8,683.288 1325.36,683.288 1325.92,683.288 1326.47,683.288 1327.03,683.288 1327.59,683.288 1328.15,683.288 1328.71,683.288 1329.27,683.288 1329.83,683.288 1330.39,683.288 1330.95,683.288 1331.51,683.288 1332.07,683.288 1332.63,683.288 1333.19,683.288 1333.75,683.288 1334.3,683.288 1334.86,683.288 1335.42,683.288 1335.98,683.288 1336.54,683.288 1337.1,683.288 1337.66,683.288 1338.22,683.288 1338.78,683.288 1339.34,683.288 1339.9,683.288 1340.46,683.288 1341.02,683.288 1341.57,683.288 1342.13,683.288 1342.69,683.288 1343.25,683.288 1343.81,683.288 1344.37,683.288 1344.93,683.288 1345.49,683.288 1346.05,683.288 1346.61,683.288 1347.17,683.288 1347.73,683.288 1348.29,683.288 1348.84,683.288 1349.4,683.288 1349.96,683.288 1350.52,683.288 1351.08,683.288 1351.64,683.288 1352.2,683.288 1352.76,683.288 1353.32,683.288 1353.88,683.288 1354.44,683.288 1355,683.288 1355.56,683.288 1356.12,683.288 1356.67,683.288 1357.23,683.288 1357.79,683.288 1358.35,683.288 1358.91,683.288 1359.47,683.288 1360.03,683.288 1360.59,683.288 1361.15,683.288 1361.71,683.288 1362.27,683.288 1362.83,683.288 1363.39,683.288 1363.94,683.288 1364.5,683.288 1365.06,683.288 1365.62,683.288 1366.18,683.288 1366.74,683.288 1367.3,683.288 1367.86,683.288 1368.42,683.288 1368.98,683.288 1369.54,683.288 1370.1,683.288 1370.66,683.288 1371.21,683.288 1371.77,683.288 1372.33,683.288 1372.89,683.288 1373.45,683.288 1374.01,683.288 1374.57,683.288 1375.13,683.288 1375.69,683.288 1376.25,683.288 1376.81,683.288 1377.37,683.288 1377.93,683.288 1378.49,683.288 1379.04,683.288 1379.6,683.288 1380.16,683.288 1380.72,683.288 1381.28,683.288 1381.84,683.288 1382.4,683.288 1382.96,683.288 1383.52,683.288 1384.08,683.288 1384.64,683.288 1385.2,683.288 1385.76,683.288 1386.31,683.288 1386.87,683.288 1387.43,683.288 1387.99,683.288 1388.55,683.288 1389.11,683.288 1389.67,683.288 1390.23,683.288 1390.79,683.288 1391.35,683.288 1391.91,683.288 1392.47,683.288 1393.03,683.288 1393.58,683.288 1394.14,683.288 1394.7,683.288 1395.26,683.288 1395.82,683.288 1396.38,683.288 1396.94,683.288 1397.5,683.288 1398.06,683.288 1398.62,683.288 1399.18,683.288 1399.74,683.288 1400.3,683.288 1400.86,683.288 1401.41,683.288 1401.97,683.288 1402.53,683.288 1403.09,683.288 1403.65,683.288 1404.21,683.288 1404.77,683.288 1405.33,683.288 1405.89,683.288 1406.45,683.288 1407.01,683.288 1407.57,683.288 1408.13,683.288 1408.68,683.288 1409.24,683.288 1409.8,683.288 1410.36,683.288 1410.92,683.288 1411.48,683.288 1412.04,683.288 1412.6,683.288 1413.16,683.288 1413.72,683.288 1414.28,683.288 1414.84,683.288 1415.4,683.288 1415.95,683.288 1416.51,683.288 1417.07,683.288 1417.63,683.288 1418.19,683.288 1418.75,683.288 1419.31,683.288 1419.87,683.288 1420.43,683.288 1420.99,683.288 1421.55,683.288 1422.11,683.288 1422.67,683.288 1423.23,683.288 1423.78,683.288 1424.34,683.288 1424.9,683.288 1425.46,683.288 1426.02,683.288 1426.58,683.288 1427.14,683.288 1427.7,683.288 1428.26,683.288 1428.82,683.288 1429.38,683.288 1429.94,683.288 1430.5,683.288 1431.05,683.288 1431.61,683.288 1432.17,683.288 1432.73,683.288 1433.29,683.288 1433.85,683.288 1434.41,683.288 1434.97,683.288 1435.53,683.288 1436.09,683.288 1436.65,683.288 1437.21,683.288 1437.77,683.288 1438.33,683.288 1438.88,683.288 1439.44,683.288 1440,683.288 1440.56,683.288 1441.12,683.288 1441.68,683.288 1442.24,683.288 1442.8,683.288 1443.36,683.288 1443.92,683.288 1444.48,683.288 1445.04,683.288 1445.6,683.288 1446.15,683.288 1446.71,683.288 1447.27,683.288 1447.83,683.288 1448.39,683.288 1448.95,683.288 1449.51,683.288 1450.07,683.288 1450.63,683.288 1451.19,683.288 1451.75,683.288 1452.31,683.288 1452.87,683.288 1453.42,683.288 1453.98,683.288 1454.54,683.288 1455.1,683.288 1455.66,683.288 1456.22,683.288 1456.78,683.288 1457.34,683.288 1457.9,683.288 1458.46,683.288 1459.02,683.288 1459.58,683.288 1460.14,683.288 1460.7,683.288 1461.25,683.288 1461.81,683.288 1462.37,683.288 1462.93,683.288 1463.49,683.288 1464.05,683.288 1464.61,683.288 1465.17,683.288 1465.73,683.288 1466.29,683.288 1466.85,683.288 1467.41,683.288 1467.97,683.288 1468.52,683.288 1469.08,683.288 1469.64,683.288 1470.2,683.288 1470.76,683.288 1471.32,683.288 1471.88,683.288 1472.44,683.288 1473,683.288 1473.56,683.288 1474.12,683.288 1474.68,683.288 1475.24,683.288 1475.79,683.288 1476.35,683.288 1476.91,683.288 1477.47,683.288 1478.03,683.288 1478.59,683.288 1479.15,683.288 1479.71,683.288 1480.27,683.288 1480.83,683.288 1481.39,683.288 1481.95,683.288 1482.51,683.288 1483.07,683.288 1483.62,683.288 1484.18,683.288 1484.74,683.288 1485.3,683.288 1485.86,683.288 1486.42,683.288 1486.98,683.288 1487.54,683.288 1488.1,683.288 1488.66,683.288 1489.22,683.288 1489.78,683.288 1490.34,683.288 1490.89,683.288 1491.45,683.288 1492.01,683.288 1492.57,683.288 1493.13,683.288 1493.69,683.288 1494.25,683.288 1494.81,683.288 1495.37,683.288 1495.93,683.288 1496.49,683.288 1497.05,683.288 1497.61,683.288 1498.16,683.288 1498.72,683.288 1499.28,683.288 1499.84,683.288 1500.4,683.288 1500.96,683.288 1501.52,683.288 1502.08,683.288 1502.64,683.288 1503.2,683.288 1503.76,683.288 1504.32,683.288 1504.88,683.288 1505.44,683.288 1505.99,683.288 1506.55,683.288 1507.11,683.288 1507.67,683.288 1508.23,683.288 1508.79,683.288 1509.35,683.288 1509.91,683.288 1510.47,683.288 1511.03,683.288 1511.59,683.288 1512.15,683.288 1512.71,683.288 1513.26,683.288 1513.82,683.288 1514.38,683.288 1514.94,683.288 1515.5,683.288 1516.06,683.288 1516.62,683.288 1517.18,683.288 1517.74,683.288 1518.3,683.288 1518.86,683.288 1519.42,683.288 1519.98,683.288 1520.53,683.288 1521.09,683.288 1521.65,683.288 1522.21,683.288 1522.77,683.288 1523.33,683.288 1523.89,683.288 1524.45,683.288 1525.01,683.288 1525.57,683.288 1526.13,683.288 1526.69,683.288 1527.25,683.288 1527.81,683.288 1528.36,683.288 1528.92,683.288 1529.48,683.288 1530.04,683.288 1530.6,683.288 1531.16,683.288 1531.72,683.288 1532.28,683.288 1532.84,683.288 1533.4,683.288 1533.96,683.288 1534.52,683.288 1535.08,683.288 1535.63,683.288 1536.19,683.288 1536.75,683.288 1537.31,683.288 1537.87,683.288 1538.43,683.288 1538.99,683.288 1539.55,683.288 1540.11,683.288 1540.67,683.288 1541.23,683.288 1541.79,683.288 1542.35,683.288 1542.9,683.288 1543.46,683.288 1544.02,683.288 1544.58,683.288 1545.14,683.288 1545.7,683.288 1546.26,683.288 1546.82,683.288 1547.38,683.288 1547.94,683.288 1548.5,683.288 1549.06,683.288 1549.62,683.288 1550.18,683.288 1550.73,683.288 1551.29,683.288 1551.85,683.288 1552.41,683.288 1552.97,683.288 1553.53,683.288 1554.09,683.288 1554.65,683.288 1555.21,683.288 1555.77,683.288 1556.33,683.288 1556.89,683.288 1557.45,683.288 1558,683.288 1558.56,683.288 1559.12,683.288 1559.68,683.288 1560.24,683.288 1560.8,683.288 1561.36,683.288 1561.92,683.288 1562.48,683.288 1563.04,683.288 1563.6,683.288 1564.16,683.288 1564.72,683.288 1565.28,683.288 1565.83,683.288 1566.39,683.288 1566.95,683.288 1567.51,683.288 1568.07,683.288 1568.63,683.288 1569.19,683.288 1569.75,683.288 1570.31,683.288 1570.87,683.288 1571.43,683.288 1571.99,683.288 1572.55,683.288 1573.1,683.288 1573.66,683.288 1574.22,683.288 1574.78,683.288 1575.34,683.288 1575.9,683.288 1576.46,683.288 1577.02,683.288 1577.58,683.288 1578.14,683.288 1578.7,683.288 1579.26,683.288 1579.82,683.288 1580.37,683.288 1580.93,683.288 1581.49,683.288 1582.05,683.288 1582.61,683.288 1583.17,683.288 1583.73,683.288 1584.29,683.288 1584.85,683.288 1585.41,683.288 1585.97,683.288 1586.53,683.288 1587.09,683.288 1587.65,683.288 1588.2,683.288 1588.76,683.288 1589.32,683.288 1589.88,683.288 1590.44,683.288 1591,683.288 1591.56,683.288 1592.12,683.288 1592.68,683.288 1593.24,683.288 1593.8,683.288 1594.36,683.288 1594.92,683.288 1595.47,683.288 1596.03,683.288 1596.59,683.288 1597.15,683.288 1597.71,683.288 1598.27,683.288 1598.83,683.288 1599.39,683.288 1599.95,683.288 1600.51,683.288 1601.07,683.288 1601.63,683.288 1602.19,683.288 1602.74,683.288 1603.3,683.288 1603.86,683.288 1604.42,683.288 1604.98,683.288 1605.54,683.288 1606.1,683.288 1606.66,683.288 1607.22,683.288 1607.78,683.288 1608.34,683.288 1608.9,683.288 1609.46,683.288 1610.02,683.288 1610.57,683.288 1611.13,683.288 1611.69,683.288 1612.25,683.288 1612.81,683.288 1613.37,683.288 1613.93,683.288 1614.49,683.288 1615.05,683.288 1615.61,683.288 1616.17,683.288 1616.73,683.288 1617.29,683.288 1617.84,683.288 1618.4,683.288 1618.96,683.288 1619.52,683.288 1620.08,683.288 1620.64,683.288 1621.2,683.288 1621.76,683.288 1622.32,683.288 1622.88,683.288 1623.44,683.288 1624,683.288 1624.56,683.288 1625.11,683.288 1625.67,683.288 1626.23,683.288 1626.79,683.288 1627.35,683.288 1627.91,683.288 1628.47,683.288 1629.03,683.288 1629.59,683.288 1630.15,683.288 1630.71,683.288 1631.27,683.288 1631.83,683.288 1632.39,683.288 1632.94,683.288 1633.5,683.288 1634.06,683.288 1634.62,683.288 1635.18,683.288 1635.74,683.288 1636.3,683.288 1636.86,683.288 1637.42,683.288 1637.98,683.288 1638.54,683.288 1639.1,683.288 1639.66,683.288 1640.21,683.288 1640.77,683.288 1641.33,683.288 1641.89,683.288 1642.45,683.288 1643.01,683.288 1643.57,683.288 1644.13,683.288 1644.69,683.288 1645.25,683.288 1645.81,683.288 1646.37,683.288 1646.93,683.288 1647.48,683.288 1648.04,683.288 1648.6,683.288 1649.16,683.288 1649.72,683.288 1650.28,683.288 1650.84,683.288 1651.4,683.288 1651.96,683.288 1652.52,683.288 1653.08,683.288 1653.64,683.288 1654.2,683.288 1654.76,683.288 1655.31,683.288 1655.87,683.288 1656.43,683.288 1656.99,683.288 1657.55,683.288 1658.11,683.288 1658.67,683.288 1659.23,683.288 1659.79,683.288 1660.35,683.288 1660.91,683.288 1661.47,683.288 1662.03,683.288 1662.58,683.288 1663.14,683.288 1663.7,683.288 1664.26,683.288 1664.82,683.288 1665.38,683.288 1665.94,683.288 1666.5,683.288 1667.06,683.288 1667.62,683.288 1668.18,683.288 1668.74,683.288 1669.3,683.288 1669.85,683.288 1670.41,683.288 1670.97,683.288 1671.53,683.288 1672.09,683.288 1672.65,683.288 1673.21,683.288 1673.77,683.288 1674.33,683.288 1674.89,683.288 1675.45,683.288 1676.01,683.288 1676.57,683.288 1677.13,683.288 1677.68,683.288 1678.24,683.288 1678.8,683.288 1679.36,683.288 1679.92,683.288 1680.48,683.288 1681.04,683.288 1681.6,683.288 1682.16,683.288 1682.72,683.288 1683.28,683.288 1683.84,683.288 1684.4,683.288 1684.95,683.288 1685.51,683.288 1686.07,683.288 1686.63,683.288 1687.19,683.288 1687.75,683.288 1688.31,683.288 1688.87,683.288 1689.43,683.288 1689.99,683.288 1690.55,683.288 1691.11,683.288 1691.67,683.288 1692.23,683.288 1692.78,683.288 1693.34,683.288 1693.9,683.288 1694.46,683.288 1695.02,683.288 1695.58,683.288 1696.14,683.288 1696.7,683.288 1697.26,683.288 1697.82,683.288 1698.38,683.288 1698.94,683.288 1699.5,683.288 1700.05,683.288 1700.61,683.288 1701.17,683.288 1701.73,683.288 1702.29,683.288 1702.85,683.288 1703.41,683.288 1703.97,683.288 1704.53,683.288 1705.09,683.288 1705.65,683.288 1706.21,683.288 1706.77,683.288 1707.32,683.288 1707.88,683.288 1708.44,683.288 1709,683.288 1709.56,683.288 1710.12,683.288 1710.68,683.288 1711.24,683.288 1711.8,683.288 1712.36,683.288 1712.92,683.288 1713.48,683.288 1714.04,683.288 1714.6,683.288 1715.15,683.288 1715.71,683.288 1716.27,683.288 1716.83,683.288 1717.39,683.288 1717.95,683.288 1718.51,683.288 1719.07,683.288 1719.63,683.288 1720.19,683.288 1720.75,683.288 1721.31,683.288 1721.87,683.288 1722.42,683.288 1722.98,683.288 1723.54,683.288 1724.1,683.288 1724.66,683.288 1725.22,683.288 1725.78,683.288 1726.34,683.288 1726.9,683.288 1727.46,683.288 1728.02,683.288 1728.58,683.288 1729.14,683.288 1729.69,683.288 1730.25,683.288 1730.81,683.288 1731.37,683.288 1731.93,683.288 1732.49,683.288 1733.05,683.288 1733.61,683.288 1734.17,683.288 1734.73,683.288 1735.29,683.288 1735.85,683.288 1736.41,683.288 1736.97,683.288 1737.52,683.288 1738.08,683.288 1738.64,683.288 1739.2,683.288 1739.76,683.288 1740.32,683.288 1740.88,683.288 1741.44,683.288 1742,683.288 1742.56,683.288 1743.12,683.288 1743.68,683.288 1744.24,683.288 1744.79,683.288 1745.35,683.288 1745.91,683.288 1746.47,683.288 1747.03,683.288 1747.59,683.288 1748.15,683.288 1748.71,683.288 1749.27,683.288 1749.83,683.288 1750.39,683.288 1750.95,683.288 1751.51,683.288 1752.06,683.288 1752.62,683.288 1753.18,683.288 1753.74,683.288 1754.3,683.288 1754.86,683.288 1755.42,683.288 1755.98,683.288 1756.54,683.288 1757.1,683.288 1757.66,683.288 1758.22,683.288 1758.78,683.288 1759.34,683.288 1759.89,683.288 1760.45,683.288 1761.01,683.288 1761.57,683.288 1762.13,683.288 1762.69,683.288 1763.25,683.288 1763.81,683.288 1764.37,683.288 1764.93,683.288 1765.49,683.288 1766.05,683.288 1766.61,683.288 1767.16,683.288 1767.72,683.288 1768.28,683.288 1768.84,683.288 1769.4,683.288 1769.96,683.288 1770.52,683.288 1771.08,683.288 1771.64,683.288 1772.2,683.288 1772.76,683.288 1773.32,683.288 1773.88,683.288 1774.43,683.288 1774.99,683.288 1775.55,683.288 1776.11,683.288 1776.67,683.288 1777.23,683.288 1777.79,683.288 1778.35,683.288 1778.91,683.288 1779.47,683.288 1780.03,683.288 1780.59,683.288 1781.15,683.288 1781.71,683.288 1782.26,683.288 1782.82,683.288 1783.38,683.288 1783.94,683.288 1784.5,683.288 1785.06,683.288 1785.62,683.288 1786.18,683.288 1786.74,683.288 1787.3,683.288 1787.86,683.288 1788.42,683.288 1788.98,683.288 1789.53,683.288 1790.09,683.288 1790.65,683.288 1791.21,683.288 1791.77,683.288 1792.33,683.288 1792.89,683.288 1793.45,683.288 1794.01,683.288 1794.57,683.288 1795.13,683.288 1795.69,683.288 1796.25,683.288 1796.8,683.288 1797.36,683.288 1797.92,683.288 1798.48,683.288 1799.04,683.288 1799.6,683.288 1800.16,683.288 1800.72,683.288 1801.28,683.288 1801.84,683.288 1802.4,683.288 1802.96,683.288 1803.52,683.288 1804.08,683.288 1804.63,683.288 1805.19,683.288 1805.75,683.288 1806.31,683.288 1806.87,683.288 1807.43,683.288 1807.99,683.288 1808.55,683.288 1809.11,683.288 1809.67,683.288 1810.23,683.288 1810.79,683.288 1811.35,683.288 1811.9,683.288 1812.46,683.288 1813.02,683.288 1813.58,683.288 1814.14,683.288 1814.7,683.288 1815.26,683.288 1815.82,683.288 1816.38,683.288 1816.94,683.288 1817.5,683.288 1818.06,683.288 1818.62,683.288 1819.18,683.288 1819.73,683.288 1820.29,683.288 1820.85,683.288 1821.41,683.288 1821.97,683.288 1822.53,683.288 1823.09,683.288 1823.65,683.288 1824.21,683.288 1824.77,683.288 1825.33,683.288 1825.89,683.288 1826.45,683.288 1827,683.288 1827.56,683.288 1828.12,683.288 1828.68,683.288 1829.24,683.288 1829.8,683.288 1830.36,683.288 1830.92,683.288 1831.48,683.288 1832.04,683.288 1832.6,683.288 1833.16,683.288 1833.72,683.288 1834.27,683.288 1834.83,683.288 1835.39,683.288 1835.95,683.288 1836.51,683.288 1837.07,683.288 1837.63,683.288 1838.19,683.288 \"/>\n</svg>\n","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"In this case the projected energy and the shift are close to each other and the error bars are hard to see.","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"The problem was just a toy example, as the dimension of the Hamiltonian is rather small:","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"dimension(H)","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"462","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"In this case, it's easy (and more efficient) to calculate the exact ground state energy using standard linear algebra. Read more about Rimu's capabilities for exact diagonalization in the example \"Exact diagonalization\".","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"edp = ExactDiagonalizationProblem(H)\nexact_energy = solve(edp).values[1]","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"-4.021502406906472","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"We finish by comparing our FCIQMC results with the exact computation.","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"println(\n    \"\"\"\n    Energy from $steps_measure steps with $target_walkers walkers:\n    Shift: $(se.mean) ± $(se.err)\n    Projected Energy: $(v.val) ± ($(v.val_l), $(v.val_u))\n    Exact Energy: $exact_energy\n    \"\"\"\n)\n\n","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"Energy from 2000 steps with 1000 walkers:\nShift: -4.022493038409599 ± 0.019288537430202157\nProjected Energy: -4.013592298099001 ± (0.004948930769668181, 0.004981827597569044)\nExact Energy: -4.021502406906472\n\n","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"This page was generated using Literate.jl.","category":"page"},{"location":"statstools.html#Module-StatsTools","page":"StatsTools","title":"Module StatsTools","text":"","category":"section"},{"location":"statstools.html","page":"StatsTools","title":"StatsTools","text":"The  module StatsTools contains helper function for analysis and post processing of Monte Carlo data.","category":"page"},{"location":"statstools.html#Blocking-analysis","page":"StatsTools","title":"Blocking analysis","text":"","category":"section"},{"location":"statstools.html","page":"StatsTools","title":"StatsTools","text":"After equilibration, FCIQMC produces information about observables through correlated time series. In order to estimate the statistical errors the time series need to be decorrelated. The main workhorse for achieving this is the blocking_analysis, which is based on the paper by Flyvberg and Peterson JCP (1989), and automated with the M test of Jonsson PRE (2018).","category":"page"},{"location":"statstools.html","page":"StatsTools","title":"StatsTools","text":"Analysing the stochastic errors of observables obtained from the ratio of sample means is done with ratio_of_means, where error propagation of correlated uncertainties is done with the help of the package MonteCarloMeasurements.","category":"page"},{"location":"statstools.html","page":"StatsTools","title":"StatsTools","text":"Many convenience functions are implemented for directly analysing data obtained from solve as a DataFrame. See, e.g., shift_estimator and projected_energy. Asymptotically unbiased estimators are implemented as mixed_estimator, growth_estimator and rayleigh_replica_estimator.","category":"page"},{"location":"statstools.html#Exported","page":"StatsTools","title":"Exported","text":"","category":"section"},{"location":"statstools.html","page":"StatsTools","title":"StatsTools","text":"Modules = [StatsTools]\nPages = [\"StatsTools.jl\", \"blocking.jl\", \"ratio_of_means.jl\", \"convenience.jl\",\n  \"variances.jl\", \"growth_witness.jl\", \"reweighting.jl\", \"fidelity.jl\", \"variational_energy_estimator.jl\"\n]\nPrivate = false","category":"page"},{"location":"statstools.html#Rimu.StatsTools","page":"StatsTools","title":"Rimu.StatsTools","text":"Tools for the statistical analysis of Monte Carlo data.\n\nExports:\n\nblocking_analysis\nblocking_analysis_data\nratio_of_means\ngrowth_witness\nsmoothen\nshift_estimator\nprojected_energy\nvariational_energy_estimator\ngrowth_estimator\ngrowth_estimator_analysis\nmixed_estimator\nmixed_estimator_analysis\nrayleigh_replica_estimator\nrayleigh_replica_estimator_analysis\nval_and_errs\nval\nmean_and_se\n\n\n\n\n\n","category":"module"},{"location":"statstools.html#Rimu.StatsTools.blocking_analysis-Tuple{AbstractVector}","page":"StatsTools","title":"Rimu.StatsTools.blocking_analysis","text":"blocking_analysis(v::AbstractVector; α = 0.01, corrected = true, skip=0, warn=true)\n-> BlockingResult(mean, err, err_err, p_cov, k, blocks)\n\nCompute the sample mean mean and estimate the standard deviation of the mean (standard error) err of a correlated time series. It uses the blocking algorithm from Flyvberg and Peterson JCP (1989) and the M test of Jonsson PRE (2018) at significance level 1-α.\n\nUse skip to skip the first skip elements in v. corrected controls whether bias correction for variances is used. If decorrelating the time series fails according to the M test, NaN is returned as the standard error and -1 for k. The keyword argument warn controls whether a warning message is logged.\n\nThe summary result is returned as a BlockingResult. k - 1 is the number of blocking transformations required to pass the hypothesis test for an uncorrelated time series and err_err the estimated standard error or err.\n\nThe detailed results from each reblocking step can be obtained with blocking_analysis_data.\n\nSee BlockingResult, shift_estimator, ratio_of_means, blocking_analysis_data.\n\n\n\n\n\n","category":"method"},{"location":"statstools.html#Rimu.StatsTools.blocking_analysis_data-Tuple{AbstractVector}","page":"StatsTools","title":"Rimu.StatsTools.blocking_analysis_data","text":"blocking_analysis_data(v::AbstractVector; kwargs...) ->\n(; br::BlockingResult, df::DataFrame)\n\nPerform a blocking_analysis and return the summary result br as well as a DataFrame df with information about the standard error in each blocking step.\n\nFor a description of the keyword arguments see blocking_analysis.\n\nExample\n\njulia> data = smoothen(rand(10_000), 2^6); # generate correlated data\n\njulia> br, df = blocking_analysis_data(data)\n(br = BlockingResult{Float64}\n  mean = 0.5088 ± 0.0029\n  with uncertainty of ± 0.00023454488294744232\n  from 78 blocks after 7 transformations (k = 8).\n, df = 13×6 DataFrame\n Row │ blocks  mean      std_err      std_err_err  p_cov       mj\n     │ Int64   Float64   Float64      Float64      Float64     Float64\n─────┼──────────────────────────────────────────────────────────────────────\n   1 │  10000  0.508806  0.000375044  2.6521e-6    1.40658e-7  9715.08\n   2 │   5000  0.508806  0.000528547  5.28599e-6   2.79361e-7  4778.14\n   3 │   2500  0.508806  0.000743386  1.05152e-5   5.52622e-7  2298.64\n   4 │   1250  0.508806  0.00104064   2.08212e-5   1.08293e-6  1056.24\n   5 │    625  0.508806  0.00144177   4.08121e-5   2.07871e-6   427.949\n   6 │    312  0.508736  0.00194209   7.78707e-5   3.77171e-6   128.711\n   7 │    156  0.508736  0.00247921   0.00014081   6.14647e-6    17.3075\n   8 │     78  0.508736  0.00291063   0.000234545  8.47174e-6     0.731386\n   9 │     39  0.508736  0.00284613   0.000326474  8.10046e-6     0.901054\n  10 │     19  0.508241  0.0026998    0.000449967  7.28892e-6     2.85915\n  11 │      9  0.507939  0.00359907   0.000899766  1.29533e-5     1.08644\n  12 │      4  0.509327  0.00440559   0.00179857   1.94092e-5     0.0370381\n  13 │      2  0.509327  0.00432708   0.00305971   1.87237e-5     0.125)\n\njulia> using StatsPlots; unicodeplots();\n\njulia> plot([br.k,br.k],[0.0,maximum(df.std_err.+df.std_err_err)], label=\"m test\");\n\njulia> @df df plot!(\n           1:length(:std_err), :std_err;\n           err=:std_err_err, xlabel=\"k\", label=\"std err\",\n           title=\"std err vs blocking steps\"\n       )\n               ⠀⠀⠀⠀⠀⠀⠀⠀⠀std err vs blocking steps⠀⠀⠀⠀⠀⠀⠀⠀\n               ┌────────────────────────────────────────┐\n    0.00423501 │⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⡀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⢠⠀⠀⠀⠀│ m test\n               │⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⡇⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⢀⠀⠀⢸⠀⠀⠀⠀│ std err\n               │⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⡇⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⢸⠀⠀⢸⠀⠀⠀⠀│\n               │⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⡇⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⢸⠀⠀⢸⠀⠀⠀⠀│\n               │⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⡇⠀⠀⠀⠀⠀⠀⠀⠀⡇⠀⡠⢺⠒⠒⢺⠀⠀⠀⠀│\n               │⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⡇⠀⠀⡀⠀⠀⡆⣀⠤⡗⠉⠀⢸⠀⠀⢸⡆⠀⠀⠀│\n               │⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⢀⡧⠤⠔⡗⠊⠉⡏⠀⠀⡇⠀⠀⢸⠀⠀⢸⢣⠀⠀⠀│\n               │⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⢀⠔⠁⡇⠀⠀⠁⠀⠀⠁⠀⠀⠁⠀⠀⠀⠀⠀⢸⠸⡀⠀⠀│\n               │⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⢀⠴⠁⠀⠀⡇⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠸⠀⡇⠀⠀│\n               │⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⢀⠔⠁⠀⠀⠀⠀⡇⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⢸⠀⠀│\n               │⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⢀⠔⠊⠀⠀⠀⠀⠀⠀⡇⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠈⣦⠀│\n               │⠀⠀⠀⠀⠀⠀⠀⠀⡠⠔⠒⠁⠀⠀⠀⠀⠀⠀⠀⠀⡇⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⢹⠀│\n               │⠀⠀⠀⢀⣀⠤⠒⠉⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⡇⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⢸⠀│\n               │⠀⠒⠉⠁⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⡇⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⢸⠀│\n   -0.00012335 │⠤⠤⠤⠤⠤⠤⠤⠤⠤⠤⠤⠤⠤⠤⠤⠤⠤⠤⠤⠤⠧⠤⠤⠤⠤⠤⠤⠤⠤⠤⠤⠤⠤⠤⠤⠤⠤⠤⠤⠤│\n               └────────────────────────────────────────┘\n               ⠀0.64⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀k⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀13.36⠀\n\nA vertical line at k==8 indicates the blocking step identified by hypothesis testing to decorrelate the time series data. The decorrelation length can thus be estimated at 2^k-1 = 2^7 = 128. Note that the data was correlated with a sliding window of 2^6 steps.\n\nSee blocking_analysis, BlockingResult.\n\n\n\n\n\n","category":"method"},{"location":"statstools.html#Rimu.StatsTools.mean_and_se-Tuple{Rimu.StatsTools.BlockingResult}","page":"StatsTools","title":"Rimu.StatsTools.mean_and_se","text":"mean_and_se(v::AbstractVector; α = 0.01, corrected::Bool=true, skip=0) -> mean, err\nmean_and_se(r::BlockingResult) -> mean, err\n\nReturn the mean and standard error (as a tuple) of a time series obtained from blocking_analysis. See also BlockingResult.\n\n\n\n\n\n","category":"method"},{"location":"statstools.html#Statistics.cov-Tuple{Rimu.StatsTools.BlockingResult{<:Complex}}","page":"StatsTools","title":"Statistics.cov","text":"cov(r::BlockingResult{<:Complex})\n\nReturn the covariance matrix of the multivariate normal distribution approximating the uncertainty of the blocking result r of a complex time series. See (https://en.wikipedia.org/wiki/Complexnormaldistribution).\n\n\n\n\n\n","category":"method"},{"location":"statstools.html#Rimu.StatsTools.ratio_of_means-Tuple{Any, Any}","page":"StatsTools","title":"Rimu.StatsTools.ratio_of_means","text":"ratio_of_means(num, denom; α=0.01, corrected=true, mc_samples=nothing, skip=0, warn=true)\n-> r::RatioBlockingResult\n\nEstimate the ratio of mean(num)/mean(denom) assuming that num and denom are possibly correlated time series, skipping the first skip elements. A blocking analysis with m-test is used to uncorrelate the time series, see blocking_analysis. The remaining standard error and correlation of the means is propagated using MonteCarloMeasurements. The results are reported as a RatioBlockingResult.\n\nRobust estimates for the ratio are obtained from pmedian(r) and confidence intervals from pquantile(), e.g. pquantile(r, [0.025, 0.975]) for the 95% confidence interval.\n\nEstimates from linear uncertainty propagation are returned as r.f and r.σ_f using x_by_y_linear. The standard error estimate r.σ_f should only be trusted when the coefficient of variation std(denom)/mean(denom) is small: abs(r.δ_y) < 0.1. Under this condition can the ratio be approximated as a normal distribution. See wikipedia and Díaz-Francés, Rubio (2013)\n\nThe keyword mc_samples controls the number of samples used for error propagation by MonteCarloMeasurements. Use nothing for the default and Val(1000) to set the number to 1000 samples in a type-consistent way.\n\nThe keyword warn controls whether warning messages are logged when blocking fails or noisy denominators are encountered.\n\nNote: to compute statistics on the RatioBlockingResult, use functions pmedian, pquantile, pmiddle, piterate, pextrema, pminimum, pmaximum, pmean, and pcov.\n\n\n\n\n\n","category":"method"},{"location":"statstools.html#Rimu.StatsTools.errs-Tuple","page":"StatsTools","title":"Rimu.StatsTools.errs","text":"errs(x; n=1, p=nothing, name=:err) -> (; err_l, err_u)\n\nReturn the lower and upper error bar for the uncertain value x.\n\nSee val_and_errs.\n\n\n\n\n\n","category":"method"},{"location":"statstools.html#Rimu.StatsTools.to_measurement-Tuple{MonteCarloMeasurements.Particles}","page":"StatsTools","title":"Rimu.StatsTools.to_measurement","text":"to_measurement(p::MonteCarloMeasurements.Particles) -> ::Measurements.measurement\n\nConvert an uncertain number from MonteCarloMeasurements  to Measurements format  using the median as the central point. The new ± boundaries will include  the 68% quantile around the median.\n\n\n\n\n\n","category":"method"},{"location":"statstools.html#Rimu.StatsTools.val-Tuple{Any}","page":"StatsTools","title":"Rimu.StatsTools.val","text":"val(x)\n\nReturn the best estimate value for an uncertain x. Defaults to the median for uncertain x represented by a (sampled) distribution. Supports  MonteCarloMeasurements and Measurements.\n\nSee errs, BlockingResult, RatioBlockingResult.\n\n\n\n\n\n","category":"method"},{"location":"statstools.html#Rimu.StatsTools.val_and_errs-Tuple{Any}","page":"StatsTools","title":"Rimu.StatsTools.val_and_errs","text":"val_and_errs(x; n=1, p=nothing, name=:val) -> (;val, val_l, val_u)\n\nReturn the median and the lower and upper error bar for the uncertain value x as a NamedTuple. This is useful for plotting scripts. The interval [val - val_l, val + val_u] represents the confidence interval at level n*σ, or at probability p. Setting p overrides n. Supports  MonteCarloMeasurements and Measurements. The  names in the NamedTuple can be changed with name.\n\nExample:\n\njulia> results = [blocking_analysis(i:0.1:2i+20) for i in 1:3]; # mock results\n\njulia> v = val_and_errs.(results, name=\"res\"); # Vector of NamedTuple's with standard errors\n\njulia> DataFrame(v)\n3×3 DataFrame\n Row │ res      res_l    res_u\n     │ Float64  Float64  Float64\n─────┼───────────────────────────\n   1 │    11.5  1.7282   1.7282\n   2 │    13.0  1.7282   1.7282\n   3 │    14.5  1.78885  1.78885\n\nSee NamedTuple, val, errs, BlockingResult, RatioBlockingResult.\n\n\n\n\n\n","category":"method"},{"location":"statstools.html#Rimu.StatsTools.growth_witness","page":"StatsTools","title":"Rimu.StatsTools.growth_witness","text":"growth_witness(df::DataFrame, [b];\n    shift=:shift,\n    norm=:norm,\n    time_step=determine_constant_time_step(df),\n    skip=0\n)\ngrowth_witness(sim::PMCSimulation, [b]; kwargs...)\n\nCalculate the growth witness directly from the result (DataFrame or PMCSimulation) of solveing a ProjectorMonteCarloProblem. The keyword arguments shift and norm can be used to change the names of the relevant columns.\n\n\n\n\n\n","category":"function"},{"location":"statstools.html#Rimu.StatsTools.growth_witness-Tuple{AbstractArray, AbstractArray, Any}","page":"StatsTools","title":"Rimu.StatsTools.growth_witness","text":"growth_witness(shift::AbstractArray, norm::AbstractArray, dt, [b]; skip=0)\n\nCompute the growth witness\n\nG^(n) = S^(n) - fracvertmathbfc^(n+1)vert -\n          vertmathbfc^(n)vertvertmathbfc^(n)vert dtau\n\nwhere S is the shift and vertmathbfc^(n)vert == norm[n, 1]. Setting b ≥ 1 a sliding average over b time steps is computed using smoothen(). The first skip time steps are skipped. mean(growth_witness) is approximately the same as growth_estimator with h=0.\n\nSee also growth_estimator.\n\n\n\n\n\n","category":"method"},{"location":"statstools.html#Rimu.StatsTools.smoothen-Tuple{AbstractVector, Integer}","page":"StatsTools","title":"Rimu.StatsTools.smoothen","text":"smoothen(noisy::AbstractVector, b)\n\nSmoothen the array noisy by averaging over a sliding window of length b and wrapping noisy periodically. The mean(noisy) is preserved.\n\n\n\n\n\n","category":"method"},{"location":"statstools.html#Rimu.StatsTools.growth_estimator-NTuple{4, Any}","page":"StatsTools","title":"Rimu.StatsTools.growth_estimator","text":"growth_estimator(\n    shift, wn, h, time_step;\n    skip = 0,\n    E_r = mean(shift[skip+1:end]),\n    weights = w_exp,\n    change_type = identity,\n    kwargs...\n)\ngrowth_estimator(\n    df::DataFrame, h;\n    shift_name=:shift,\n    norm_name=:norm,\n    time_step=determine_constant_time_step(df),\n    kwargs...\n)\ngrowth_estimator(sim::PMCSimulation; kwargs...)\n-> r::RatioBlockingResult\n\nCompute the growth estimator with reference energy E_r by the reweighting technique described in Umrigar et al. (1993), see Eq. (20). shift and wn are equal length vectors containing the shift and walker number time series, respectively.  Reweighting is done over h time steps and length(shift) - skip time steps are used for the blocking analysis done with ratio_of_means. weights is a function that calulates the weights. See w_exp and w_lin.\n\nE_gr = E_r - frac1dτln\n    fracsum_n w_h+1^(n+1) N_mathrmw^(n+1)\n        sum_m w_h^(m) N_mathrmw^(m) \n\nwhere dτ is the time_step\n\nWhen h is greater than the autocorrelation time scale of the shift, then E_gr (returned as r.ratio) is an unbiased but approximate estimator for the ground state energy E_0 with an error mathcalO(dτ^2) and potentially increased confidence intervals compared to the (biased) shift estimator.  Error propagation is done with MonteCarloMeasurements. Propagation through the logarithm can be modified by setting change_type to to_measurement in order to avoid NaN results from negative outliers.\n\nIf success==true the blocking analysis was successful in k-1 steps, using blocks uncorrelated data points.\n\nThe second method calculates the growth estimator directly from a PMCSimulation or DataFrame returned by solve. The keyword arguments shift_name and norm_name can be used to change the names of the relevant columns.\n\nSee also mixed_estimator and RatioBlockingResult.\n\n\n\n\n\n","category":"method"},{"location":"statstools.html#Rimu.StatsTools.growth_estimator_analysis-Tuple{Any}","page":"StatsTools","title":"Rimu.StatsTools.growth_estimator_analysis","text":"growth_estimator_analysis(df::DataFrame; kwargs...)\ngrowth_estimator_analysis(sim::PMCSimulation; kwargs...)\n-> (; df_ge, correlation_estimate, se, se_l, se_u)\n\nCompute the growth_estimator on a DataFrame df or PMCSimulation sim. repeatedly over a range of reweighting depths.\n\nReturns a NamedTuple with the fields\n\ndf_ge: DataFrame with reweighting depth and growth_estiamator data. See example below.\ncorrelation_estimate: estimated correlation time from blocking analysis\nse, se_l, se_u: shift_estimator and error\n\nKeyword arguments\n\nh_range: The default is about h_values values from 0 to twice the estimated correlation time\nh_values = 100: minimum number of reweighting depths\nskip = 0: initial time steps to exclude from averaging\nthreading = Threads.nthreads() > 1: if false a progress meter is displayed\nshift_name = :shift name of column in df with shift data\nnorm_name = :norm name of column in df with walkernumber data\nwarn = true whether to log warning messages when blocking fails or denominators are small\n\nExample\n\nsim = solve(...)\ndf_ge, correlation_estimate, se, se_l, se_u = growth_estimator_analysis(sim; skip=5_000)\n\nusing StatsPlots\n@df df_ge plot(_ -> se, :h, ribbon = (se_l, se_u), label = \"⟨S⟩\") # constant line and ribbon for shift estimator\n@df df_ge plot!(:h, :val, ribbon = (:val_l, :val_u), label=\"E_gr\") # growth estimator as a function of reweighting depth\nxlabel!(\"h\")\n\nSee also: growth_estimator, mixed_estimator_analysis.\n\n\n\n\n\n","category":"method"},{"location":"statstools.html#Rimu.StatsTools.mixed_estimator-Tuple{AbstractVector, AbstractVector, AbstractVector, Any, Any}","page":"StatsTools","title":"Rimu.StatsTools.mixed_estimator","text":"mixed_estimator(\n    hproj, vproj, shift, h, time_step;\n    skip = 0,\n    E_r = mean(shift[skip+1:end]),\n    weights = w_exp,\n    kwargs...\n)\nmixed_estimator(\n    df::DataFrame, h;\n    hproj_name=:hproj,\n    vproj_name=:vproj,\n    shift_name=:shift,\n    time_step=determine_constant_time_step(df),\n    kwargs...\n)\nmixed_estimator(sim::PMCSimulation, h; kwargs...)\n-> r::RatioBlockingResult\n\nCompute the mixed estimator by the reweighting technique described in Umrigar et al. (1993), Eq. (19)\n\nE_mathrmmix = fracsum_n w_h^(n)  (Hmathbfv)mathbfc^(n)\n        sum_m w_h^(m)  mathbfvmathbfc^(m) \n\nwhere the time series hproj == (Hmathbfv)mathbfc^(n) and vproj == mathbfvmathbfc^(m) have the same length as shift (See ProjectedEnergy on how to set these up).  Reweighting is done over h time steps and length(shift) - skip time steps are used for the blocking analysis done with ratio_of_means. weights is a function that calulates the weights. See w_exp and w_lin.  Additional keyword arguments are passed on to ratio_of_means.\n\nWhen h is greater than the autocorrelation time scale of the shift, then r.ratio is an unbiased but approximate estimator for the ground state energy E_0 with an error mathcalO(dτ^2), where dτ is the time_step, and potentially increased confidence intervals compared to the unweighted ratio.  Error propagation is done with MonteCarloMeasurements. Results are returned as RatioBlockingResult.\n\nThe second method calculates the mixed energy estimator directly from a DataFrame or PMCSimulation returned by solve. The keyword arguments hproj_name, vproj_name, and shift_name can be used to change the names of the relevant columns.\n\nSee also growth_estimator.\n\n\n\n\n\n","category":"method"},{"location":"statstools.html#Rimu.StatsTools.mixed_estimator_analysis-Tuple{DataFrame}","page":"StatsTools","title":"Rimu.StatsTools.mixed_estimator_analysis","text":"mixed_estimator_analysis(df::DataFrame; kwargs...)\nmixed_estimator_analysis(sim::PMCSimulation; kwargs...)\n-> (; df_me, correlation_estimate, se, se_l, se_u)\n\nCompute the mixed_estimator on a DataFrame df or PMCSimulation sim returned from solve repeatedly over a range of reweighting depths.\n\nReturns a NamedTuple with the fields\n\ndf_me: DataFrame with reweighting depth and mixed_estiamator data. See example below.\ncorrelation_estimate: estimated correlation time from blocking analysis\nse, se_l, se_u: shift_estimator and error\n\nKeyword arguments\n\nh_range: The default is about h_values values from 0 to twice the estimated correlation time\nh_values = 100: minimum number of reweighting depths\nskip = 0: initial time steps to exclude from averaging\nthreading = Threads.nthreads() > 1: if false a progress meter is displayed\nshift_name = :shift name of column in df with shift data\nhproj_name = :hproj name of column in df with operator overlap data\nvproj_name = :vproj name of column in df with projector overlap data\nwarn = true whether to log warning messages when blocking fails or denominators are small\n\nExample\n\nsim = solve(...)\ndf_me, correlation_estimate, se, se_l, se_u = mixed_estimator_analysis(sim; skip=5_000)\n\nusing StatsPlots\n@df df_me plot(_ -> se, :h, ribbon = (se_l, se_u), label = \"⟨S⟩\") # constant line and ribbon for shift estimator\n@df df_me plot!(:h, :val, ribbon = (:val_l, :val_u), label=\"E_mix\") # mixed estimator as a function of reweighting depth\nxlabel!(\"h\")\n\nSee also: mixed_estimator, growth_estimator_analysis.\n\n\n\n\n\n","category":"method"},{"location":"statstools.html#Rimu.StatsTools.projected_energy-Tuple{Any}","page":"StatsTools","title":"Rimu.StatsTools.projected_energy","text":"projected_energy(df::DataFrame; skip=0, hproj=:hproj, vproj=:vproj, kwargs...)\nprojected_energy(sim::PMCSimulation; kwargs...)\n-> r::RatioBlockingResult\n\nCompute the projected energy estimator\n\nE_mathrmp = fracsum_n  mathbfvHmathbfc^(n)\n        sum_m mathbfvmathbfc^(m) \n\nwhere the time series df.hproj == mathbfvHmathbfc^(n) and df.vproj == mathbfvmathbfc^(m) are taken from df, skipping the first skip entries (use post_step_strategy =ProjectedEnergy(...) to set these up in ProjectorMonteCarloProblem). projected_energy is equivalent to mixed_estimator with h=0.\n\nThe keyword arguments hproj and vproj can be used to change the names of the relevant columns. Other kwargs are passed on to ratio_of_means. Returns a RatioBlockingResult.\n\nSee NamedTuple, val_and_errs, val, errs for processing results.\n\n\n\n\n\n","category":"method"},{"location":"statstools.html#Rimu.StatsTools.rayleigh_replica_estimator-Tuple{Vector, Vector, Vector, Any, Any}","page":"StatsTools","title":"Rimu.StatsTools.rayleigh_replica_estimator","text":"rayleigh_replica_estimator(\n    op_ol, vec_ol, shift, h, time_step;\n    skip = 0,\n    E_r = mean(shift[skip+1:end]),\n    weights = w_exp,\n    kwargs...\n)\nrayleigh_replica_estimator(\n    df::DataFrame;\n    shift_name=\"shift\",\n    op_name=\"Op1\",\n    vec_name=\"dot\",\n    h=0,\n    skip=0,\n    Anorm=1,\n    kwargs...\n)\nrayleigh_replica_estimator(sim::PMCSimulation; kwargs...)\n-> r::RatioBlockingResult\n\nCompute the estimator of a Rayleigh quotient of operator hatA with reweighting,\n\nA_mathrmest(h) = fracsum_ab sum_n w_ha^(n) w_hb^(n)\n    mathbfc_a^(n) cdot hatA cdot mathbfc_b^(n)\n    sum_ab sum_n w_ha^(n) w_hb^(n) mathbfc_a^(n) cdot mathbfc_b^(n)\n\nusing data from multiple replicas.\n\nArgument op_ol holds data for the operator overlap mathbfc_a^(n) hatA mathbfc_b^(n) and vec_ol holds data for the vector overlap mathbfc_a^(n) mathbfc_b^(n). They are of type Vector{Vector}, with each element Vector holding the data for a pair of replicas. Argument shift is of type Vector{Vector}, with each element Vector holding the shift data for each individual replica.\n\nThe second method computes the Rayleigh quotient directly from a DataFrame or PMCSimulation returned by solve. The keyword arguments shift_name, op_name and vec_name can be used to change the names of the relevant columns, see AllOverlaps for default formatting. The operator overlap data can be scaled by a prefactor Anorm. A specific reweighting depth can be set with keyword argument h. The default is h = 0 which calculates the Rayleigh quotient without reweighting.\n\nThe reweighting is an extension of the mixed estimator using the reweighting technique described in Umrigar et al. (1993). Reweighting is done over h time steps and length(shift) - skip time steps are used for the blocking analysis done with ratio_of_means. weights is a function that calulates the weights. See w_exp and w_lin. Additional keyword arguments are passed on to ratio_of_means.\n\nError propagation is done with MonteCarloMeasurements. Results are returned as RatioBlockingResult.\n\nSee also mixed_estimator, growth_estimator.\n\n\n\n\n\n","category":"method"},{"location":"statstools.html#Rimu.StatsTools.rayleigh_replica_estimator_analysis-Tuple{Any}","page":"StatsTools","title":"Rimu.StatsTools.rayleigh_replica_estimator_analysis","text":"rayleigh_replica_estimator_analysis(df::DataFrame; kwargs...)\nrayleigh_replica_estimator_analysis(sim::PMCSimulation; kwargs...)\n-> (; df_rre, df_se)\n\nCompute the rayleigh_replica_estimator on a DataFrame df or PMCSimulation sim returned from solve repeatedly over a range of reweighting depths.\n\nReturns a NamedTuple with the fields\n\ndf_rre: DataFrame with reweighting depth and rayleigh_replica_estimator data. See example below.\ndf_se: DataFrame with shift_estimator output, one row per replica\n\nKeyword arguments\n\nh_range: The default is about h_values values from 0 to twice the estimated correlation time\nh_values = 100: minimum number of reweighting depths\nskip = 0: initial time steps to exclude from averaging\nthreading = Threads.nthreads() > 1: if false a progress meter is displayed\nshift_name = \"shift\": shift data corresponding to column in df with names <shift>_1, ...\nop_name = \"Op1\": name of operator overlap corresponding to column in df with names c1_<op_ol>_c2, ...\nvec_name = \"dot\": name of vector-vector overlap corresponding to column in df with names c1_<vec_ol>_c2, ...\nAnorm = 1: a scalar prefactor to scale the operator overlap data\nwarn = true: whether to log warning messages when blocking fails or denominators are small\n\nExample\n\nsim = solve(...)\ndf_rre, df_se = rayleigh_replica_estimator_analysis(sim; skip=5_000)\n\nusing StatsPlots\n@df df_rre plot(_ -> se, :h, ribbon = (se_l, se_u), label = \"⟨S⟩\") # constant line and ribbon for shift estimator\n@df df_rre plot!(:h, :val, ribbon = (:val_l, :val_u), label=\"E_mix\") # Rayleigh quotient estimator as a function of reweighting depth\nxlabel!(\"h\")\n\nSee also: rayleigh_replica_estimator, mixed_estimator_analysis, AllOverlaps.\n\n\n\n\n\n","category":"method"},{"location":"statstools.html#Rimu.StatsTools.shift_estimator-Tuple{Any}","page":"StatsTools","title":"Rimu.StatsTools.shift_estimator","text":"shift_estimator(df::DataFrame; shift=:shift, kwargs...)\nshift_estimator(sim::PMCSimulation; kwargs...)\n-> r::BlockingResult\n\nReturn the shift estimator from the data in df.shift. The keyword argument shift can be used to change the name of the relevant column. Other keyword arguments are passed on to blocking_analysis. Returns a BlockingResult.\n\nSee also growth_estimator, projected_energy.\n\n\n\n\n\n","category":"method"},{"location":"statstools.html#Rimu.StatsTools.w_exp-Tuple{Union{SubArray{<:Any, 1, <:Vector, <:Any, true}, Vector}, Any, Any}","page":"StatsTools","title":"Rimu.StatsTools.w_exp","text":"w_exp(shift, h, time_step; E_r = mean(shift), skip = 0)\n\nCompute the weights for reweighting over h time steps with reference energy E_r from the exponential formula\n\nw_h^(n) = prod_j=1^h exp-dτ(S^(q+n-j)-E_r) \n\nwhere q = skip and dτ is the time_step.\n\nSee also w_lin, growth_estimator, mixed_estimator.\n\n\n\n\n\n","category":"method"},{"location":"statstools.html#Rimu.StatsTools.w_lin-Tuple{Union{SubArray{<:Any, 1, <:Vector, <:Any, true}, Vector}, Any, Any}","page":"StatsTools","title":"Rimu.StatsTools.w_lin","text":"w_lin(shift, h, time_step; E_r = mean(shift), skip = 0)\n\nCompute the weights for reweighting over h time steps with reference energy E_r from the linearised formula\n\nw_h^(n) = prod_j=1^h 1-dτ(S^(q+n-j)-E_r) \n\nwhere q = skip and dτ is the time_step.\n\nSee also w_exp, growth_estimator, mixed_estimator.\n\n\n\n\n\n","category":"method"},{"location":"statstools.html#Rimu.StatsTools.replica_fidelity-Tuple{Any}","page":"StatsTools","title":"Rimu.StatsTools.replica_fidelity","text":"replica_fidelity(df::DataFrame; p_field = :hproj, skip = 0)\nreplica_fidelity(sim::PMCSimulation; kwargs...)\n\nCompute the fidelity of the average coefficient vector and the projector defined in p_field from the PMCSimulation or DataFrame returned by solve, using replicas _1 and _2. Calls ratio_of_means to perform a blocking analysis on a ratio of the means of separate time series and returns a RatioBlockingResult. The first skip steps in the time series are skipped.\n\nThe fidelity of states |ψ⟩ and |ϕ⟩ is defined as\n\nF(ψϕ) = fracψϕ^2ψψϕϕ \n\nSpecifically, replica_fidelity computes\n\nF(mathbfvmathbfc) =\n    frac(mathbfc_1mathbfv)(mathbfvmathbfc_1)\n    mathbfc_1mathbfc_1 \n\nwhere v is the projector specified by p_field, which is assumed to be normalised to unity with the two-norm (i.e. v⋅v == 1), and mathbfc_1 and mathbfc_2 are two replica coefficient vectors.\n\n\n\n\n\n","category":"method"},{"location":"statstools.html#Rimu.StatsTools.variational_energy_estimator-Tuple{Any, Any}","page":"StatsTools","title":"Rimu.StatsTools.variational_energy_estimator","text":"variational_energy_estimator(shifts, overlaps; kwargs...)\nvariational_energy_estimator(df::DataFrame; max_replicas=:all, kwargs...)\nvariational_energy_estimator(sim::PMCSimulation; kwargs...)\n-> r::RatioBlockingResult\n\nCompute the variational energy estimator from the replica time series of the shifts and coefficient vector overlaps by blocking analysis. The keyword argument max_replicas can be used to constrain the number of replicas processed to be smaller than all available in df. Other keyword arguments are passed on to ratio_of_means(). Returns a RatioBlockingResult.\n\nAn estimator for the variational energy\n\nfracmathbfc^ mathbfHmathbfcmathbfc^mathbfc\n\nis calculated from\n\nE_v  =  fracsum_ab^R overline(S_a+S_b) mathbfc_a^ mathbfc_b\n               2sum_ab^R overlinemathbfc_a^ mathbfc_b \n\nwhere the sum goes over distinct pairs out of the R replicas. See arXiv:2103.07800.\n\nThe DataFrame and PMCSimulation versions can extract the relevant information from the result of solve. Set up the ProjectorMonteCarloProblem with the keyword argument replica_strategy = AllOverlaps(R) and R ≥ 2. If passing shifts and overlaps, the data has to be arranged in the correct order (as provided in the DataFrame version).\n\nSee AllOverlaps.\n\n\n\n\n\n","category":"method"},{"location":"statstools.html#Additional-docstrings","page":"StatsTools","title":"Additional docstrings","text":"","category":"section"},{"location":"statstools.html","page":"StatsTools","title":"StatsTools","text":"Modules = [StatsTools]\nPages = [\"StatsTools.jl\", \"blocking.jl\", \"ratio_of_means.jl\", \"convenience.jl\",\n  \"variances.jl\", \"growth_witness.jl\", \"reweighting.jl\"\n]\nPublic = false","category":"page"},{"location":"statstools.html#MonteCarloMeasurements.Particles-Tuple{Rimu.StatsTools.BlockingResult{<:Real}}","page":"StatsTools","title":"MonteCarloMeasurements.Particles","text":"MonteCarloMeasurements.Particles(r::BlockingResult; mc_samples = 2000)\nMonteCarloMeasurements.±(r::BlockingResult)\n\nConvert a BlockingResult into a Particles object for nonlinear error propagation with MonteCarloMeasurements.\n\n\n\n\n\n","category":"method"},{"location":"statstools.html#Rimu.StatsTools.BlockingResult","page":"StatsTools","title":"Rimu.StatsTools.BlockingResult","text":"BlockingResult(mean, err, err_err, p_cov, k, blocks)\n\nResult of blocking_analysis.\n\nFields:\n\nmean: sample mean\nerr: standard error (estimated standard deviation of the mean)\nerr_err: estimated uncertainty of err\np_cov: estimated pseudo covariance of mean, relevant for complex time series\nk::Int: k-1 blocking steps were used to uncorrelate time series\nblocks::Int: number of uncorrelated values after blocking\n\nHas methods for NamedTuple, val_and_errs, val, errs, mean_and_se, Measurements.:±, MonteCarloMeasurements.Particles, and Statistics.cov for Complex data.\n\nExample:\n\njulia> blocking_analysis(smoothen(randn(2^10), 2^5))\nBlockingResult{Float64}\n  mean = -0.026 ± 0.029\n  with uncertainty of ± 0.003638545517264226\n  from 32 blocks after 5 transformations (k = 6).\n\n\n\n\n\n","category":"type"},{"location":"statstools.html#Measurements.measurement-Tuple{Rimu.StatsTools.BlockingResult{<:Real}}","page":"StatsTools","title":"Measurements.measurement","text":"measurement(r::BlockingResult)\nMeasurements.±(r::BlockingResult)\n\nConvert a BlockingResult into a Measurement for linear error propagation with Measurements.\n\nLimitation: Does not account for covariance in complex BlockingResult. Consider using MonteCarloMeasurements.Particles(r)!\n\n\n\n\n\n","category":"method"},{"location":"statstools.html#Rimu.StatsTools.blocker-Union{Tuple{AbstractVector{T}}, Tuple{T}} where T","page":"StatsTools","title":"Rimu.StatsTools.blocker","text":"blocker(v::Vector) -> new_v::Vector\n\nReblock the data by successively taking the mean of two adjacent data points to form a new vector with a half of the length(v). The last data point will be discarded if length(v) is odd.\n\n\n\n\n\n","category":"method"},{"location":"statstools.html#Rimu.StatsTools.blocks_with_m-Tuple{Any}","page":"StatsTools","title":"Rimu.StatsTools.blocks_with_m","text":"blocks_with_m(v; corrected = true) -> (;blocks, mean, std_err, std_err_err, p_cov, mj)\n\nPerform the blocking algorithm from Flyvberg and Peterson JCP (1989). Returns named tuple with the results from all blocking steps. See mtest().\n\n\n\n\n\n","category":"method"},{"location":"statstools.html#Rimu.StatsTools.mtest-Tuple{AbstractVector}","page":"StatsTools","title":"Rimu.StatsTools.mtest","text":"mtest(mj::AbstractVector; α = 0.01) -> k\nmtest(table::NamedTuple; α = 0.01) -> k\n\nHypothesis test for decorrelation of a time series after blocking transformations with significance level 1-α after Jonson PRE (2018). mj or table.mj is expected to be a vector with relevant M_j values from a blocking analysis as obtained from blocks_with_m(). Returns the row number k where the M-test is passed. If the M-test has failed mtest() returns the value -1.\n\n\n\n\n\n","category":"method"},{"location":"statstools.html#Rimu.StatsTools.RatioBlockingResult","page":"StatsTools","title":"Rimu.StatsTools.RatioBlockingResult","text":"RatioBlockingResult(ratio, f, σ_f, δ_y, k, success)\n\nResult of ratio_of_means().\n\nFields:\n\nratio::P: ratio with uncertainties propagated by MonteCarloMeasurements\nf::T: ratio of means\nσ_f::T: std from linear propagation\nδ_y::T: coefficient of variation for denominator (≤ 0.1 for normal approx)\nk::Int: k-1 blocking steps were used to uncorrelate time series\nblocks::Int: number of data values after blocking\nsuccess::Bool: false if any of the blocking steps failed\n\nHas methods for NamedTuple, val_and_errs, val, errs.\n\nNote: to compute statistics on the RatioBlockingResult, use functions pmedian, pquantile, pmiddle, piterate, pextrema, pminimum, pmaximum, pmean, and pcov.\n\n\n\n\n\n","category":"type"},{"location":"statstools.html#Rimu.StatsTools.particles-Tuple{Any, Any, Any}","page":"StatsTools","title":"Rimu.StatsTools.particles","text":"particles(samples, μ, σ)\nparticles(samples, μ::AbstractVector, Σ::AbstractMatrix)\n\nReturn Particles object from MonteCarloMeasurements with single- or multivariate normal distribution. Zero variance parameters are supported.\n\n\n\n\n\n","category":"method"},{"location":"statstools.html#Rimu.StatsTools.particles-Tuple{Any, Distributions.Distribution}","page":"StatsTools","title":"Rimu.StatsTools.particles","text":"particles(samples, d)\nparticles(::Nothing, d)\nparticles(::Val{T}, d) where T\n\nReturn Particles object from  MonteCarloMeasurements using  a type-stable constructor if possible. Pass nothing for the default number of particles or Val(1_000) for using 1000 particles in a type-stable manner. If d is a Particles object it is passed through without re-sampling.\n\n\n\n\n\n","category":"method"},{"location":"statstools.html#Rimu.StatsTools.ratio_estimators-Tuple{AbstractVector{<:Real}, AbstractVector{<:Real}}","page":"StatsTools","title":"Rimu.StatsTools.ratio_estimators","text":"ratio_estimators(x, y, [k]; corrected=true, mc_samples=10_000) -> (; r, f, σ_f, δ_y, n)\n\nEstimators for the ratio of means mean(x)/mean(y). If k is given, k-1 blocking steps are performed to remove internal correlations in the time series x and y. Otherwise these are assumed to be free of internal correlations. Correlations between x and y may be present and are taken into account.\n\nReturn values:\n\nr::Particles is the Monte Carlo sampled ratio estimator, see Particles\nf = mean(x)/mean(y)\nσ_f standard deviation of f from linear error propagation (normal approximation)\nδ_y = std(y)/mean(y) coefficient of variation; < 0.1 for normal approximation to work\nn: number of uncorrelated data used for uncertainty estimation\n\n\n\n\n\n","category":"method"},{"location":"statstools.html#Rimu.StatsTools.x_by_y_linear-NTuple{5, Any}","page":"StatsTools","title":"Rimu.StatsTools.x_by_y_linear","text":"x_by_y_linear(μ_x,μ_y,σ_x,σ_y,ρ) -> f, σ_f\n\nLinear error propagation for ratio f = x/y assuming x and y are correlated normal random variables and assuming the ratio can be approximated as a normal distribution. See wikipedia and Díaz-Francés, Rubio (2013).\n\nσ_f = sqrtfracσ_xμ_y^2 + fracμ_x σ_yμ_y^2^2 - frac2 ρ μ_xμ_y^3\n\n\n\n\n\n","category":"method"},{"location":"statstools.html#Core.NamedTuple-Tuple{Rimu.StatsTools.BlockingResult}","page":"StatsTools","title":"Core.NamedTuple","text":"NamedTuple(x::BlockingResult; n=1, p=nothing, name=:val)\nNamedTuple(x::RatioBlockingResult; n=1, p=nothing, name=:val)\n\nReturn a named tuple with value and error bars (see val_and_errs) as well as additional numerical fields relevant for x.\n\nExample:\n\njulia> results = [blocking_analysis(i:0.1:2i+20) for i in 1:3]; # mock results\n\njulia> df = NamedTuple.(results, name=:res)|>DataFrame\n3×7 DataFrame\n Row │ res      res_l    res_u    res_err_err  res_p_cov  res_k  res_blocks\n     │ Float64  Float64  Float64  Float64      Float64    Int64  Int64\n─────┼──────────────────────────────────────────────────────────────────────\n   1 │    11.5  1.7282   1.7282      0.352767    2.98667      5          13\n   2 │    13.0  1.7282   1.7282      0.352767    2.98667      5          13\n   3 │    14.5  1.78885  1.78885     0.350823    3.2          5          14\n\njulia> rbs = ratio_of_means(1 .+sin.(1:0.1:11),2 .+sin.(2:0.1:12)); # more mock results\n\njulia> [NamedTuple(rbs),]|>DataFrame\n1×9 DataFrame\n Row │ val       val_l      val_u      val_f     val_σ_f    val_δ_y    val_k  val_blocks  val_success\n     │ Float64   Float64    Float64    Float64   Float64    Float64    Int64  Int64       Bool\n─────┼────────────────────────────────────────────────────────────────────────────────────────────────\n   1 │ 0.581549  0.0925669  0.0812292  0.560532  0.0875548  0.0875548      4          12         true\n\n\nSee val_and_errs, val, errs, BlockingResult, RatioBlockingResult.\n\n\n\n\n\n","category":"method"},{"location":"statstools.html#Rimu.StatsTools.autocovariance-Tuple{AbstractVector, Int64}","page":"StatsTools","title":"Rimu.StatsTools.autocovariance","text":"autocovariance(v::Vector,h::Int; corrected::Bool=true)\n\nhatgamma(h) =frac1nsum_t=1^n-h(v_t+h-barv)(v_t-barv)^* Calculate the autocovariance of dataset v with a delay h. If corrected is true (the default) then the sum is scaled with n-h, whereas the sum is scaled with n if corrected is false where n = length(v).\n\n\n\n\n\n","category":"method"},{"location":"statstools.html#Rimu.StatsTools.pseudo_cov-Tuple{Any, Any}","page":"StatsTools","title":"Rimu.StatsTools.pseudo_cov","text":"pseudo_cov(x, y; xmean = mean(x), ymean = mean(y), corrected = true)\n\nCompute the pseudo covariance between collections x and y returning a scalar:\n\nfrac1nsum_i=1^n (x_i - barx)(y_i - bary)\n\nOptionally, precomputed means can be passed as keyword arguments. pseudo_cov(x,y) is functionally equivalent to Statistics.cov(x, conj(y); corrected = false) but it is found to be significantly faster and avoids allocations.\n\n\n\n\n\n","category":"method"},{"location":"statstools.html#Rimu.StatsTools.determine_constant_time_step-Tuple{Any}","page":"StatsTools","title":"Rimu.StatsTools.determine_constant_time_step","text":"determine_constant_time_step(df) -> time_step\n\nGiven a DataFrame df, determine the time step that was used to compute it. Throw an error if time step is not constant.\n\n\n\n\n\n","category":"method"},{"location":"statstools.html#Index","page":"StatsTools","title":"Index","text":"","category":"section"},{"location":"statstools.html","page":"StatsTools","title":"StatsTools","text":"Pages   = [\"statstools.md\"]","category":"page"},{"location":"interfaces.html#Module-Interfaces","page":"Interfaces","title":"Module Interfaces","text":"","category":"section"},{"location":"interfaces.html","page":"Interfaces","title":"Interfaces","text":"Interfaces","category":"page"},{"location":"interfaces.html#Rimu.Interfaces","page":"Interfaces","title":"Rimu.Interfaces","text":"module Interfaces\n\nThis module contains interfaces that can be used to extend and modify the algorithms and behaviours of Rimu.\n\nInterfaces\n\nFollow the links for the definitions of the interfaces!\n\nAbstractHamiltonian for defining Hamiltonians\nAbstractDVec for defining data structures for Rimu as in DictVectors\nStochasticStyle for controlling the stochastic algorithms used by ProjectorMonteCarloProblem as implemented in StochasticStyles\n\nAdditional exports\n\nInterface functions forAbstractHamiltonians:\n\ndiagonal_element\nnum_offdiagonals\nget_offdiagonal\noffdiagonals.\nrandom_offdiagonal\nstarting_address\nLOStructure\nallowed_address_type\n\nworking with  AbstractDVecs and StochasticStyle\n\ndeposit!\ndefault_style\nCompressionStrategy\nThe interface from VectorInterface.jl.\n\nFunctions Rimu.jl uses to do FCIQMC:\n\napply_column!\napply_operator!\nstep_stats\n\n\n\n\n\n","category":"module"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"EditURL = \"../../../scripts/HO-example.jl\"","category":"page"},{"location":"generated/HO-example.html#Example-5:-Degenerate-perturbation-theory-in-a-harmonic-oscillator-basis","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Example 5: Degenerate perturbation theory in a harmonic oscillator basis","text":"","category":"section"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"Rimu can also handle non-lattice systems. This example looks at weakly-interacting bosonic particles in a harmonic oscillator external potential using a basis of (Cartesian product) single-particle eigenstates of the harmonic oscillator potential. Blocks of degenerate non-interacting states are coupled by a contact interaction in first order degenerate perturbation theory. This example shows how to generate these blocks and find the energy and angular momentum eigenstates.","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"A runnable script for this example is located here. Run it with julia HO-example.jl.","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"First, load all needed packages.","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"using Rimu\nusing DataFrames\nusing LinearAlgebra","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"Define the system size for N=2 particles in a 2D harmonic oscillator allowing M=4 levels in each dimension, including the groundstate.","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"N = 2\nM = 4;","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"Use a tuple S to define the range of harmonic oscillator states in a Cartesian basis, in this isotropic case n_xn_y=01ldotsM-1.","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"S = (M, M);","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"In Rimu the N-particle states are still stored as Fock states.","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"P = prod(S)\naddr = BoseFS(P, M => N)","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"BoseFS{2,16}(0, 0, 0, 2, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0)","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"Here, the numbering of the modes folds in the two spatial dimensions.  Use the utility function fock_to_cart to convert a Fock address to human-readable Cartesian quantum numbers for inspection.","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"fock_to_cart(addr, S)","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"2-element StaticArraysCore.SVector{2, Tuple{Int64, Int64}} with indices SOneTo(2):\n (3, 0)\n (3, 0)","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"The output shows that all N particles are in single-particle state n_x=M-1 n_y=0.","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"The harmonic oscillator Hamiltonian HOCartesianContactInteractions handles contact interactions with first-order perturbation theory, so the matrix representation will block according to the non-interacting energy of the basis states. The first task is to find all blocks of basis states with the same energy. The strength of the interaction is not relevant at this point, just that it is non-zero. Use an arbitrary N-particle starting address to build the Hamiltonian.","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"H = HOCartesianContactInteractions(BoseFS(P, 1 => N); S);","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"Then, use the utility function get_all_blocks to find all blocks. The blocks are found by looping over all possible states with N particles in Cartesian states defined by S. Note that this will only work for total energy up to the maximum accessible by a single particle. The N-particle groundstate energy for a 2D harmonic oscillator is E_0 = N hbar omega and the maximum single-particle energy is E = (E_0 + M - 1) hbar omega.","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"block_df = get_all_blocks(H; max_energy = N + M - 1)","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"<div><div style = \"float: left;\"><span>7×6 DataFrame</span></div><div style = \"clear: both;\"></div></div><div class = \"data-frame\" style = \"overflow-x: scroll;\"><table class = \"data-frame\" style = \"margin-bottom: 6px;\"><thead><tr class = \"header\"><th class = \"rowNumber\" style = \"font-weight: bold; text-align: right;\">Row</th><th style = \"text-align: left;\">block_id</th><th style = \"text-align: left;\">block_E0</th><th style = \"text-align: left;\">block_size</th><th style = \"text-align: left;\">addr</th><th style = \"text-align: left;\">indices</th><th style = \"text-align: left;\">t_basis</th></tr><tr class = \"subheader headerLastRow\"><th class = \"rowNumber\" style = \"font-weight: bold; text-align: right;\"></th><th title = \"Int64\" style = \"text-align: left;\">Int64</th><th title = \"Float64\" style = \"text-align: left;\">Float64</th><th title = \"Int64\" style = \"text-align: left;\">Int64</th><th title = \"BoseFS{2, 16, BitString{17, 1, UInt32}}\" style = \"text-align: left;\">BoseFS…</th><th title = \"Tuple{Int64, Int64}\" style = \"text-align: left;\">Tuple…</th><th title = \"Float64\" style = \"text-align: left;\">Float64</th></tr></thead><tbody><tr><td class = \"rowNumber\" style = \"font-weight: bold; text-align: right;\">1</td><td style = \"text-align: right;\">1</td><td style = \"text-align: right;\">2.0</td><td style = \"text-align: right;\">1</td><td style = \"text-align: left;\">fs&quot;|2 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0⟩&quot;</td><td style = \"text-align: left;\">(1, 1)</td><td style = \"text-align: right;\">0.464628</td></tr><tr><td class = \"rowNumber\" style = \"font-weight: bold; text-align: right;\">2</td><td style = \"text-align: right;\">2</td><td style = \"text-align: right;\">3.0</td><td style = \"text-align: right;\">1</td><td style = \"text-align: left;\">fs&quot;|1 1 0 0 0 0 0 0 0 0 0 0 0 0 0 0⟩&quot;</td><td style = \"text-align: left;\">(2, 1)</td><td style = \"text-align: right;\">1.4197e-5</td></tr><tr><td class = \"rowNumber\" style = \"font-weight: bold; text-align: right;\">3</td><td style = \"text-align: right;\">3</td><td style = \"text-align: right;\">4.0</td><td style = \"text-align: right;\">4</td><td style = \"text-align: left;\">fs&quot;|0 2 0 0 0 0 0 0 0 0 0 0 0 0 0 0⟩&quot;</td><td style = \"text-align: left;\">(2, 2)</td><td style = \"text-align: right;\">8.836e-6</td></tr><tr><td class = \"rowNumber\" style = \"font-weight: bold; text-align: right;\">4</td><td style = \"text-align: right;\">4</td><td style = \"text-align: right;\">5.0</td><td style = \"text-align: right;\">5</td><td style = \"text-align: left;\">fs&quot;|0 1 1 0 0 0 0 0 0 0 0 0 0 0 0 0⟩&quot;</td><td style = \"text-align: left;\">(3, 2)</td><td style = \"text-align: right;\">8.797e-6</td></tr><tr><td class = \"rowNumber\" style = \"font-weight: bold; text-align: right;\">5</td><td style = \"text-align: right;\">5</td><td style = \"text-align: right;\">3.0</td><td style = \"text-align: right;\">1</td><td style = \"text-align: left;\">fs&quot;|1 0 0 0 1 0 0 0 0 0 0 0 0 0 0 0⟩&quot;</td><td style = \"text-align: left;\">(5, 1)</td><td style = \"text-align: right;\">1.302e-6</td></tr><tr><td class = \"rowNumber\" style = \"font-weight: bold; text-align: right;\">6</td><td style = \"text-align: right;\">6</td><td style = \"text-align: right;\">4.0</td><td style = \"text-align: right;\">2</td><td style = \"text-align: left;\">fs&quot;|0 1 0 0 1 0 0 0 0 0 0 0 0 0 0 0⟩&quot;</td><td style = \"text-align: left;\">(5, 2)</td><td style = \"text-align: right;\">2.665e-6</td></tr><tr><td class = \"rowNumber\" style = \"font-weight: bold; text-align: right;\">7</td><td style = \"text-align: right;\">7</td><td style = \"text-align: right;\">5.0</td><td style = \"text-align: right;\">5</td><td style = \"text-align: left;\">fs&quot;|0 0 1 0 1 0 0 0 0 0 0 0 0 0 0 0⟩&quot;</td><td style = \"text-align: left;\">(5, 3)</td><td style = \"text-align: right;\">7.865e-6</td></tr></tbody></table></div>","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"This outputs a list of blocks in H indexed by the noninteracting energy of all states in the block, and a single address that can be used to rebuild the block for further analysis.","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"addr1 = block_df[7,:addr]\nE = block_df[7,:block_E0]","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"5.0","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"First, notice that all basis states have the same energy, defined by the block.","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"basis1 = build_basis(H, addr1)\nmap(b -> Hamiltonians.noninteracting_energy(H, b), basis1)","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"5-element Vector{Float64}:\n 5.0\n 5.0\n 5.0\n 5.0\n 5.0","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"There are two blocks at each energy level (except the groundstate), which are different due to parity conservation, which is the only other symmetry in the Cartesian harmonic oscillator. The basis of this other block is different,","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"addr2 = block_df[4,:addr]\nbasis2 = build_basis(H, addr2);\nbasis1 ≠ basis2","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"true","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"but its basis elements have the same energy.","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"map(b -> Hamiltonians.noninteracting_energy(H, b), basis2)","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"5-element Vector{Float64}:\n 5.0\n 5.0\n 5.0\n 5.0\n 5.0","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"However, since this system is an isotropic harmonic oscillator, it is possible to build simultaneous eigenstates of the angular momentum operator L_z, implemented with AxialAngularMomentumHO.","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"Lz = AxialAngularMomentumHO(S)","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"AxialAngularMomentumHO((4, 4); z_dim = 3, addr = BoseFS{0,16}(0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0))","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"L_z does not conserve parity, so both blocks are required. First combine the bases of each block and convert to DVecs.","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"dvs = map(b -> DVec(b => 1.0), vcat(basis1, basis2));","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"and then compute overlaps for the matrix elements of L_z.","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"Lz_mat = [dot(v, Lz, w) for v in dvs, w in dvs]","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"10×10 Matrix{ComplexF64}:\n 0.0+0.0im      0.0+0.0im      0.0+0.0im      0.0+0.0im      0.0+0.0im      0.0+1.0im      0.0+0.0im      0.0-1.41421im  0.0+0.0im      0.0+0.0im\n 0.0+0.0im      0.0+0.0im      0.0+0.0im      0.0+0.0im      0.0+0.0im      0.0+1.41421im  0.0+0.0im      0.0-1.0im      0.0-1.41421im  0.0+0.0im\n 0.0+0.0im      0.0+0.0im      0.0+0.0im      0.0+0.0im      0.0+0.0im      0.0+0.0im      0.0+1.73205im  0.0+0.0im      0.0+0.0im      0.0-2.0im\n 0.0+0.0im      0.0+0.0im      0.0+0.0im      0.0+0.0im      0.0+0.0im      0.0+0.0im      0.0+0.0im      0.0+1.41421im  0.0+1.0im      0.0+0.0im\n 0.0+0.0im      0.0+0.0im      0.0+0.0im      0.0+0.0im      0.0+0.0im      0.0+0.0im      0.0+0.0im      0.0+0.0im      0.0+0.0im      0.0+1.73205im\n 0.0-1.0im      0.0-1.41421im  0.0+0.0im      0.0+0.0im      0.0+0.0im      0.0+0.0im      0.0+0.0im      0.0+0.0im      0.0+0.0im      0.0+0.0im\n 0.0+0.0im      0.0+0.0im      0.0-1.73205im  0.0+0.0im      0.0+0.0im      0.0+0.0im      0.0+0.0im      0.0+0.0im      0.0+0.0im      0.0+0.0im\n 0.0+1.41421im  0.0+1.0im      0.0+0.0im      0.0-1.41421im  0.0+0.0im      0.0+0.0im      0.0+0.0im      0.0+0.0im      0.0+0.0im      0.0+0.0im\n 0.0+0.0im      0.0+1.41421im  0.0+0.0im      0.0-1.0im      0.0+0.0im      0.0+0.0im      0.0+0.0im      0.0+0.0im      0.0+0.0im      0.0+0.0im\n 0.0+0.0im      0.0+0.0im      0.0+2.0im      0.0+0.0im      0.0-1.73205im  0.0+0.0im      0.0+0.0im      0.0+0.0im      0.0+0.0im      0.0+0.0im","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"By diagonalising this matrix the eigenstate have energy E and well-defined angular momentum.","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"Diagonalise this matrix to obtain the eigenstates of L_z. The eigenvectors provide the linear combinations of basis states with well-defined angular momentum, within the subspace of energy E.","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"Lz_vals, Lz_vecs = eigen(Lz_mat)","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"Eigen{ComplexF64, Float64, Matrix{ComplexF64}, Vector{Float64}}\nvalues:\n10-element Vector{Float64}:\n -2.9999999999999956\n -2.999999999999991\n -0.9999999999999991\n -0.9999999999999982\n -0.9999999999999973\n  1.0000000000000002\n  1.0000000000000027\n  1.0000000000000027\n  3.0\n  3.0000000000000004\nvectors:\n10×10 Matrix{ComplexF64}:\n       0.0+0.0im       -5.55112e-17-0.353553im         0.534676-0.217841im      2.77556e-17-0.204124im             0.0+0.0im           0.534676+0.217841im      2.77556e-17+0.204124im             0.0+0.0im       -5.55112e-17+0.353553im           0.0+0.0im\n       0.0+0.0im        5.55112e-17-0.5im             -0.378073+0.154037im              0.0-0.288675im             0.0+0.0im          -0.378073-0.154037im     -5.55112e-17+0.288675im             0.0+0.0im                0.0+0.5im                0.0+0.0im\n       0.0+0.612372im           0.0+0.0im          -5.55112e-17+0.0im           -1.2326e-32+2.77556e-17im          0.0+0.353553im           0.0+0.0im                   0.0+2.77556e-17im          0.0+0.353553im           0.0+0.0im                0.0+0.612372im\n       0.0+0.0im                0.0+0.353553im      5.55112e-17+6.93889e-17im           0.0-0.612372im             0.0+0.0im        5.55112e-17-1.38778e-16im           0.0+0.612372im             0.0+0.0im                0.0-0.353553im           0.0+0.0im\n       0.0-0.353553im    1.2326e-32+1.11022e-16im   5.55112e-17-2.77556e-17im  -2.46519e-32-2.77556e-17im          0.0+0.612372im  -1.11022e-16-2.77556e-17im   4.93038e-32-2.77556e-17im          0.0+0.612372im   -1.2326e-32+8.32667e-17im        0.0-0.353553im\n       0.0+0.0im           0.353553+0.0im                   0.0+0.0im              0.612372+0.0im                  0.0+0.0im                0.0+0.0im              0.612372+0.0im                  0.0+0.0im           0.353553+0.0im                0.0+0.0im\n -0.353553+0.0im                0.0+0.0im                   0.0+0.0im                   0.0+0.0im            -0.612372+0.0im                0.0+0.0im                   0.0+0.0im             0.612372+0.0im                0.0+0.0im           0.353553+0.0im\n       0.0+0.0im               -0.5+7.02973e-17im     -0.154037-0.378073im         0.288675-1.95105e-16im          0.0+0.0im          -0.154037+0.378073im         0.288675+2.29062e-16im          0.0+0.0im               -0.5-7.48398e-17im        0.0+0.0im\n       0.0+0.0im          -0.353553+8.84171e-17im      0.217841+0.534676im         0.204124-1.1389e-16im   8.32667e-17+0.0im           0.217841-0.534676im         0.204124+2.4427e-16im   8.32667e-17+0.0im          -0.353553-8.31718e-17im        0.0+0.0im\n  0.612372+0.0im                0.0+0.0im                   0.0+0.0im                   0.0+0.0im            -0.353553-0.0im                0.0+0.0im                   0.0+0.0im             0.353553+0.0im                0.0+0.0im          -0.612372-0.0im","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"Finally, consider the effect of interactions by looking at how states in a single block are perturbed. Only the energy shift due to the interaction is relevant so now rebuild the Hamiltonian without the non-interacting energy.","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"Hint = HOCartesianContactInteractions(addr1; S, interaction_only = true)\nΔE = eigvals(Matrix(Hint, addr1))","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"5-element Vector{Float64}:\n -1.6810327175633306e-17\n  3.469966302164114e-17\n  0.15915494309189535\n  0.1591549430918954\n  0.1591549430918954","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"Two eigenstates in this block are unaffected by the interaction and three have a non-zero energy shift.","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"The default strength of the interaction is g = 1.0. Other interactions strengths can be obtained by using keyword argument g in HOCartesianContactInteractions or by rescaling ΔE since the interactions are handled with first-order perturbation theory.","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"Rimu also contains HOCartesianEnergyConservedPerDim which is a similar Hamiltonian but with the stricter condition that the contact interaction only connects states that have the same total energy in each dimension, rather than conserving the overall total energy. Both Hamiltonians can handle anisotropic systems by passing a tuple S whose elements are not all the same. This will alter which states are connected by the interaction, but assumes that the harmonic trapping frequencies in each dimension are commensurate.","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"This page was generated using Literate.jl.","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"EditURL = \"../../../scripts/exact-example.jl\"","category":"page"},{"location":"generated/exact-example.html#Example-4:-Exact-diagonalization","page":"Exact diagonalization","title":"Example 4: Exact diagonalization","text":"","category":"section"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"When working with smaller systems or when multiple eigenvalues of a system are required, one can use an exact diagonalization method. There are a few ways to go about this, each with its pros and cons. The purpose of this tutorial is to show off the methods as well as provide a few tips regarding them.","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"A runnable script for this example is located here. Run it with julia exact-example.jl.","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"We start by loading Rimu.","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"using Rimu","category":"page"},{"location":"generated/exact-example.html#Introduction","page":"Exact diagonalization","title":"Introduction","text":"","category":"section"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"We will look at a bosonic system of 4 particles in 5 sites, formulated in momentum space. Let's start by building the Hamiltonian. To create a Fock state where all particles have zero momentum, we put all the particles in the mode at the centre of the address.","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"M = 5\nN = 4\nadd = BoseFS(M, cld(M, 2) => N)\nham = HubbardMom1D(add)","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"HubbardMom1D(fs\"|0 0 4 0 0⟩\"; u=1.0, t=1.0)","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"Before performing exact diagonalization, it is a good idea to check the dimension of the Hamiltonian.","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"dimension(ham)","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"70","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"Keep in mind that this is an estimate of the number of Fock states the Hamiltonian can act on, not the actual matrix size - the matrix size can sometimes be smaller. It can still be used as a guide to decide whether a Hamiltonian is amenable to exact diagonalization and to determine which algorithm would be best suited to diagonalising it.","category":"page"},{"location":"generated/exact-example.html#The-BasisSetRepresentation","page":"Exact diagonalization","title":"The BasisSetRepresentation","text":"","category":"section"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"As we'll see later, there are two ways to construct the matrices from Hamiltonians directly, but they both use BasisSetRepresentation under the hood. The BasisSetRepresentation, when called with a Hamiltonian and optionally a starting address, constructs the sparse matrix of the system, as well as its basis. The starting address defaults to the one that was used to initialize the Hamiltonian. BasisSetRepresentation only returns the part of the matrix that is accessible from this starting address through non-zero offdiagonal elements.","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"bsr = BasisSetRepresentation(ham);","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"To access the matrix or basis, access the sparse_matrix and basis fields, respectively.","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"bsr.sparse_matrix","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"14×14 SparseArrays.SparseMatrixCSC{Float64, Int64} with 104 stored entries:\n -6.8       0.69282   0.69282    ⋅         ⋅         ⋅         ⋅          ⋅         ⋅         ⋅         ⋅         ⋅         ⋅         ⋅ \n  0.69282  -3.03607   0.4       0.8       0.4       0.8       0.4        0.565685  0.282843   ⋅         ⋅         ⋅         ⋅         ⋅ \n  0.69282   0.4       1.43607   0.4       0.8       0.4       0.8         ⋅        0.282843  0.565685   ⋅         ⋅         ⋅         ⋅ \n   ⋅        0.8       0.4       0.581966  0.4        ⋅        0.4        0.282843  0.565685   ⋅        0.69282   0.69282    ⋅         ⋅ \n   ⋅        0.4       0.8       0.4       2.81803   0.4        ⋅          ⋅        0.565685  0.282843  0.69282    ⋅        0.69282    ⋅ \n   ⋅        0.8       0.4        ⋅        0.4       0.581966  0.4        0.282843  0.565685   ⋅         ⋅         ⋅        0.69282   0.69282\n   ⋅        0.4       0.8       0.4        ⋅        0.4       2.81803     ⋅        0.565685  0.282843   ⋅        0.69282    ⋅        0.69282\n   ⋅        0.565685   ⋅        0.282843   ⋅        0.282843   ⋅        -0.472136  0.8        ⋅        0.489898   ⋅         ⋅        0.489898\n   ⋅        0.282843  0.282843  0.565685  0.565685  0.565685  0.565685   0.8       4.4       0.8       0.489898  0.489898  0.489898  0.489898\n   ⋅         ⋅        0.565685   ⋅        0.282843   ⋅        0.282843    ⋅        0.8       8.47214    ⋅        0.489898  0.489898   ⋅ \n   ⋅         ⋅         ⋅        0.69282   0.69282    ⋅         ⋅         0.489898  0.489898   ⋅        1.56393    ⋅         ⋅         ⋅ \n   ⋅         ⋅         ⋅        0.69282    ⋅         ⋅        0.69282     ⋅        0.489898  0.489898   ⋅        6.03607    ⋅         ⋅ \n   ⋅         ⋅         ⋅         ⋅        0.69282   0.69282    ⋅          ⋅        0.489898  0.489898   ⋅         ⋅        6.03607    ⋅ \n   ⋅         ⋅         ⋅         ⋅         ⋅        0.69282   0.69282    0.489898  0.489898   ⋅         ⋅         ⋅         ⋅        1.56393","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"bsr.basis","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"14-element Vector{BoseFS{4, 5, BitString{8, 1, UInt8}}}:\n fs\"|0 0 4 0 0⟩\"\n fs\"|0 1 2 1 0⟩\"\n fs\"|1 0 2 0 1⟩\"\n fs\"|1 0 1 2 0⟩\"\n fs\"|0 0 1 1 2⟩\"\n fs\"|0 2 1 0 1⟩\"\n fs\"|2 1 1 0 0⟩\"\n fs\"|0 2 0 2 0⟩\"\n fs\"|1 1 0 1 1⟩\"\n fs\"|2 0 0 0 2⟩\"\n fs\"|0 0 0 3 1⟩\"\n fs\"|3 0 0 1 0⟩\"\n fs\"|0 1 0 0 3⟩\"\n fs\"|1 3 0 0 0⟩\"","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"When the basis is not needed, we can use Matrix or sparse directly.","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"Matrix(ham)","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"14×14 Matrix{Float64}:\n -6.8       0.69282   0.69282   0.0       0.0       0.0       0.0        0.0       0.0       0.0       0.0       0.0       0.0       0.0\n  0.69282  -3.03607   0.4       0.8       0.4       0.8       0.4        0.565685  0.282843  0.0       0.0       0.0       0.0       0.0\n  0.69282   0.4       1.43607   0.4       0.8       0.4       0.8        0.0       0.282843  0.565685  0.0       0.0       0.0       0.0\n  0.0       0.8       0.4       0.581966  0.4       0.0       0.4        0.282843  0.565685  0.0       0.69282   0.69282   0.0       0.0\n  0.0       0.4       0.8       0.4       2.81803   0.4       0.0        0.0       0.565685  0.282843  0.69282   0.0       0.69282   0.0\n  0.0       0.8       0.4       0.0       0.4       0.581966  0.4        0.282843  0.565685  0.0       0.0       0.0       0.69282   0.69282\n  0.0       0.4       0.8       0.4       0.0       0.4       2.81803    0.0       0.565685  0.282843  0.0       0.69282   0.0       0.69282\n  0.0       0.565685  0.0       0.282843  0.0       0.282843  0.0       -0.472136  0.8       0.0       0.489898  0.0       0.0       0.489898\n  0.0       0.282843  0.282843  0.565685  0.565685  0.565685  0.565685   0.8       4.4       0.8       0.489898  0.489898  0.489898  0.489898\n  0.0       0.0       0.565685  0.0       0.282843  0.0       0.282843   0.0       0.8       8.47214   0.0       0.489898  0.489898  0.0\n  0.0       0.0       0.0       0.69282   0.69282   0.0       0.0        0.489898  0.489898  0.0       1.56393   0.0       0.0       0.0\n  0.0       0.0       0.0       0.69282   0.0       0.0       0.69282    0.0       0.489898  0.489898  0.0       6.03607   0.0       0.0\n  0.0       0.0       0.0       0.0       0.69282   0.69282   0.0        0.0       0.489898  0.489898  0.0       0.0       6.03607   0.0\n  0.0       0.0       0.0       0.0       0.0       0.69282   0.69282    0.489898  0.489898  0.0       0.0       0.0       0.0       1.56393","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"sparse(ham)","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"14×14 SparseArrays.SparseMatrixCSC{Float64, Int64} with 104 stored entries:\n -6.8       0.69282   0.69282    ⋅         ⋅         ⋅         ⋅          ⋅         ⋅         ⋅         ⋅         ⋅         ⋅         ⋅ \n  0.69282  -3.03607   0.4       0.8       0.4       0.8       0.4        0.565685  0.282843   ⋅         ⋅         ⋅         ⋅         ⋅ \n  0.69282   0.4       1.43607   0.4       0.8       0.4       0.8         ⋅        0.282843  0.565685   ⋅         ⋅         ⋅         ⋅ \n   ⋅        0.8       0.4       0.581966  0.4        ⋅        0.4        0.282843  0.565685   ⋅        0.69282   0.69282    ⋅         ⋅ \n   ⋅        0.4       0.8       0.4       2.81803   0.4        ⋅          ⋅        0.565685  0.282843  0.69282    ⋅        0.69282    ⋅ \n   ⋅        0.8       0.4        ⋅        0.4       0.581966  0.4        0.282843  0.565685   ⋅         ⋅         ⋅        0.69282   0.69282\n   ⋅        0.4       0.8       0.4        ⋅        0.4       2.81803     ⋅        0.565685  0.282843   ⋅        0.69282    ⋅        0.69282\n   ⋅        0.565685   ⋅        0.282843   ⋅        0.282843   ⋅        -0.472136  0.8        ⋅        0.489898   ⋅         ⋅        0.489898\n   ⋅        0.282843  0.282843  0.565685  0.565685  0.565685  0.565685   0.8       4.4       0.8       0.489898  0.489898  0.489898  0.489898\n   ⋅         ⋅        0.565685   ⋅        0.282843   ⋅        0.282843    ⋅        0.8       8.47214    ⋅        0.489898  0.489898   ⋅ \n   ⋅         ⋅         ⋅        0.69282   0.69282    ⋅         ⋅         0.489898  0.489898   ⋅        1.56393    ⋅         ⋅         ⋅ \n   ⋅         ⋅         ⋅        0.69282    ⋅         ⋅        0.69282     ⋅        0.489898  0.489898   ⋅        6.03607    ⋅         ⋅ \n   ⋅         ⋅         ⋅         ⋅        0.69282   0.69282    ⋅          ⋅        0.489898  0.489898   ⋅         ⋅        6.03607    ⋅ \n   ⋅         ⋅         ⋅         ⋅         ⋅        0.69282   0.69282    0.489898  0.489898   ⋅         ⋅         ⋅         ⋅        1.56393","category":"page"},{"location":"generated/exact-example.html#Computing-eigenvalues","page":"Exact diagonalization","title":"Computing eigenvalues","text":"","category":"section"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"Now that we have a way of constructing matrices from Hamiltonians, we can use standard Julia functionality to diagonalise them.","category":"page"},{"location":"generated/exact-example.html#The-built-in-method","page":"Exact diagonalization","title":"The built-in method","text":"","category":"section"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"Let's begin by looking at the eigen, eigvecs, and eigvals functions from the LinearAlgebra standard library. They operate on dense matrices and return the full spectra, hence they are only useful for small systems, or when all eigenvalues are required.","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"using LinearAlgebra\n\nmat = Matrix(ham)\neig = eigen(mat);","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"The values can be accessed like so:","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"eig.values","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"14-element Vector{Float64}:\n -6.9798639983216155\n -3.363124291613371\n -0.7590191922770746\n  0.1358418221962303\n  0.1578999869460933\n  0.8767114411781396\n  1.530592997097333\n  1.5835732611867464\n  3.072870330325867\n  3.125672653951849\n  4.862107221562182\n  6.26069485038059\n  6.402671211183119\n  9.093371706203957","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"The vectors are stored as columns in eig.vectors:","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"eig.vectors","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"14×14 Matrix{Float64}:\n -0.980348     0.175378     0.0135766   -2.81719e-15  -0.0221221  -0.0697193   1.3739e-15    0.0314466   -2.35922e-16  -0.0360987   -0.0161557  -5.55112e-17   0.00625248  -0.0058099\n  0.177701     0.932229     0.105473     3.01009e-14   0.225254   -0.132826    9.71445e-17  -0.00292026  -2.09555e-15  -0.0861158   -0.0907789  -4.996e-16     0.0591715   -0.0264275\n  0.0768085   -0.0622307    0.0129069   -6.06251e-14  -0.447424   -0.63969     2.05322e-14   0.383444    -6.54338e-15  -0.431051    -0.181167   -6.10623e-16   0.0599783   -0.106852\n -0.0214153   -0.175119    -0.20169      0.616673      0.522017   -0.296818   -0.31234      -0.122119    -0.123629     -0.106455    -0.126661    0.0829132     0.148347    -0.0574235\n -0.0119687   -0.0373038    0.0678797    0.0693699     0.0495446   0.416847    0.33773       0.0584554   -0.601232     -0.467179    -0.215841   -0.140166      0.190543    -0.114342\n -0.0214153   -0.175119    -0.20169     -0.616673      0.522017   -0.296818    0.31234      -0.122119     0.123629     -0.106455    -0.126661   -0.0829132     0.148347    -0.0574235\n -0.0119687   -0.0373038    0.0678797   -0.0693699     0.0495446   0.416847   -0.33773       0.0584554    0.601232     -0.467179    -0.215841    0.140166      0.190543    -0.114342\n -0.0138439   -0.165902     0.922758     1.00753e-14   0.1111     -0.172508   -1.30521e-14  -0.207974     2.66454e-15   0.0848902   -0.149153   -8.32667e-16   0.0712921   -0.0301968\n -0.00234782   0.00840544  -0.098969    -9.6867e-15   -0.0847116   0.082999    1.51129e-14   0.274424     3.60822e-15   0.575786    -0.61385    -2.72005e-15   0.353775    -0.259338\n -0.00237613   0.00294196   0.00143189   5.56152e-15   0.0427486   0.0110863  -3.72619e-15  -0.0663108    9.50628e-16   0.00167015   0.0832916   2.91434e-15  -0.448519    -0.8863\n  0.00363555   0.0455298   -0.133824    -0.332825     -0.290831   -0.057199   -0.527627     -0.588225    -0.332816     -0.0472302   -0.18528    -0.00844536    0.0915588   -0.0346434\n  0.00195478   0.0150664    0.0206752   -0.0642658    -0.0638689  -0.0250518   0.0999631    -0.012992    -0.111668      0.0393523    0.423534    0.688046      0.513839    -0.222499\n  0.00195478   0.0150664    0.0206752    0.0642658    -0.0638689  -0.0250518  -0.0999631    -0.012992     0.111668      0.0393523    0.423534   -0.688046      0.513839    -0.222499\n  0.00363555   0.0455298   -0.133824     0.332825     -0.290831   -0.057199    0.527627     -0.588225     0.332816     -0.0472302   -0.18528     0.00844536    0.0915588   -0.0346434","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"If you need the full spectrum, but would like to use less memory, consider using the in-place eigen!.","category":"page"},{"location":"generated/exact-example.html#Iterative-sparse-solvers","page":"Exact diagonalization","title":"Iterative sparse solvers","text":"","category":"section"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"For larger Hamiltonians, it is better to use an iterative solver. There are several options. We will look at eigs from Arpack.jl and eigsolve from KrylovKit.jl.","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"Let's start with Arpack's eigs. It is important to set the nev and which keyword arguments. nev sets the number of eigenpairs to find. which should in most cases be set to :SR, which will find the eigenvalues with the smallest real part.","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"using Arpack\n\nnum_eigvals = 3\n\nsparse_matrix = sparse(ham)\nvals_ar, vecs_ar = eigs(sparse_matrix; which=:SR, nev=num_eigvals)\nvals_ar","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"3-element Vector{Float64}:\n -6.979863998321619\n -3.3631242916133606\n -0.7590191922770747","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"Using KrylovKit's eigsolve is similar, but the nev and which are given as positional arguments. Note that KrylovKit may sometimes return more than nev eigenpairs if it happens to find them.","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"using KrylovKit\n\nvals_kk, vecs_kk = eigsolve(sparse_matrix, num_eigvals, :SR)\nvals_kk","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"14-element Vector{Float64}:\n -6.97986399832163\n -3.363124291613353\n -0.7590191922770853\n  0.1358418221962161\n  0.15789998694608798\n  0.8767114411781449\n  1.5305929970973269\n  1.5835732611867401\n  3.07287033032586\n  3.125672653951833\n  4.862107221562178\n  6.2606948503806\n  6.40267121118311\n  9.093371706203957","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"Both solvers use variants of the Lanczos algorithm for Hermitian matrices and the Arnoldi algorithm for non-Hermitian ones. These may in some cases miss degenerate eigenpairs.","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"If diagonalization takes too long, you can reduce the tolerance by setting the tol keyword argument to eigs or eigsolve. Using drastically lower tolerances than the default can still produce good results in practice. This, however, should be checked on a case-by-case basis.","category":"page"},{"location":"generated/exact-example.html#The-matrix-free-method","page":"Exact diagonalization","title":"The matrix-free method","text":"","category":"section"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"KrylovKit's eigsolve function is implemented in a way that does not require the linear operator and vector to be Julia arrays. Rimu leverages this functionality, which allows diagonalising Hamiltonians without ever needing to construct the matrix - all matrix elements are generated on the fly.","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"While this method is by far the slowest of the ones discussed, it also uses drastically less memory. This allows us to diagonalise much larger Hamiltonians.","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"To use this method, you first need a starting vector. It's best to use PDVec here as it leverages threading during the diagonalization.","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"dvec = PDVec(add => 1.0)","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"1-element PDVec: style = IsDeterministic{Float64}()\n  fs\"|0 0 4 0 0⟩\" => 1.0","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"Then, pass that vector and the Hamiltonian to eigsolve.","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"vals_mf, vecs_mf = eigsolve(ham, dvec, num_eigvals, :SR; issymmetric=true)\nvals_mf","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"10-element Vector{Float64}:\n -6.979863998321612\n -3.3631242916133406\n -0.7590191922770728\n  0.1578999869460862\n  0.8767114411781503\n  1.5835732611867401\n  3.125672653951839\n  4.862107221562172\n  6.402671211183112\n  9.093371706203953","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"Keep in mind that if an eigenvector is orthogonal to dvec, KrylovKit will miss it. Consider the following example:","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"eigsolve(ham, vecs_mf[2], num_eigvals, :SR, issymmetric=true)[1]","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"1-element Vector{Float64}:\n -3.3631242916133606","category":"page"},{"location":"generated/exact-example.html#Reducing-matrix-size-with-symmetries","page":"Exact diagonalization","title":"Reducing matrix size with symmetries","text":"","category":"section"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"As these matrices tend to get large quickly, memory is usually the bottleneck.  There are currently two methods implemented to reduce the matrix size, ParitySymmetry and TimeReversalSymmetry. These symmetries work by performing a unitary transformation on the Hamiltonian which causes it to become block-diagonal. When building a matrix from a block-diagonal Hamiltonian, only the block that contains the starting address is constructed.","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"You should only use these where the relevant symmetries actually apply - no checks are performed to make sure they do. There is also currently no way of using both at the same time. Please consult the documentation for a more in-depth description of these options.","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"The Hamiltonian presented in this example is compatible with ParitySymmetry. Let's see how the matrix size is reduced when applying it.","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"size(sparse(ham))","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"(14, 14)","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"size(sparse(ParitySymmetry(ham)))","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"(10, 10)","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"In this small example, the size reduction is modest, but for larger systems, you can expect to reduce the dimension of the matrix by about half.","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"all_eigs = eigvals(Matrix(ham))\neven_eigs = eigvals(Matrix(ParitySymmetry(ham)))","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"10-element Vector{Float64}:\n -6.979863998321621\n -3.3631242916133637\n -0.759019192277076\n  0.1578999869460802\n  0.8767114411781437\n  1.5835732611867417\n  3.125672653951844\n  4.862107221562179\n  6.402671211183117\n  9.093371706203957","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"The eigenvalues of the transformed Hamiltonian are a subset of the full spectrum. To get the other half, we can pass the even=false keyword argument to ParitySymmetry. When doing that, we need to make sure the starting address of the Hamiltonian is not symmetric under reversal:","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"add_odd = BoseFS(M, cld(M, 2) => N - 3, cld(M, 2) - 1 => 2, cld(M, 2) + 2 => 1)","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"BoseFS{4,5}(0, 2, 1, 0, 1)","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"odd_eigs = eigvals(Matrix(ParitySymmetry(HubbardMom1D(add_odd); even=false)))","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"4-element Vector{Float64}:\n 0.135841822196218\n 1.530592997097328\n 3.0728703303258613\n 6.260694850380591","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"Now, let's check that combining the two sets of eigenvalues indeed recovers the whole spectrum.","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"sort([even_eigs; odd_eigs]) ≈ all_eigs","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"true","category":"page"},{"location":"generated/exact-example.html#Computing-observables","page":"Exact diagonalization","title":"Computing observables","text":"","category":"section"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"Since building a matrix from an operator only builds the part that is reachable from the starting address, we need to use a different approach when computing observables.","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"To demonstrate this, we will use the DensityMatrixDiagonal operator, which in this case will give the momentum density.","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"The idea here is to construct a PDVec from the computed eigenvector and use it directly with the operator.","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"dvec = PDVec(zip(bsr.basis, eigvecs(Matrix(ham))[:, 1]))","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"14-element PDVec: style = IsDeterministic{Float64}()\n  fs\"|1 0 1 2 0⟩\" => -0.0214153\n  fs\"|2 0 0 0 2⟩\" => -0.00237613\n  fs\"|0 0 4 0 0⟩\" => -0.980348\n  fs\"|0 0 0 3 1⟩\" => 0.00363555\n  fs\"|2 1 1 0 0⟩\" => -0.0119687\n  fs\"|1 0 2 0 1⟩\" => 0.0768085\n  fs\"|1 3 0 0 0⟩\" => 0.00363555\n  fs\"|0 1 2 1 0⟩\" => 0.177701\n  fs\"|0 0 1 1 2⟩\" => -0.0119687\n  fs\"|3 0 0 1 0⟩\" => 0.00195478\n  fs\"|0 2 0 2 0⟩\" => -0.0138439\n  fs\"|1 1 0 1 1⟩\" => -0.00234782\n  fs\"|0 1 0 0 3⟩\" => 0.00195478\n  fs\"|0 2 1 0 1⟩\" => -0.0214153","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"The eigenvectors these methods produce are normalized, hence we can use the three-argument dot to compute the values of observables. Here we are computing the single particle momentum density distribution, which is just the diagonal of the single-particle density matrix in momentum space.","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"[dot(dvec, DensityMatrixDiagonal(i), dvec) for i in 1:M]","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"5-element Vector{Float64}:\n 0.0066861389450877905\n 0.033070399772041625\n 3.9204869225657406\n 0.03307039977204162\n 0.006686138945087839","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"This page was generated using Literate.jl.","category":"page"},{"location":"rimuio.html#Module-RimuIO","page":"I/O","title":"Module RimuIO","text":"","category":"section"},{"location":"rimuio.html","page":"I/O","title":"I/O","text":"Modules = [RimuIO]","category":"page"},{"location":"rimuio.html#Rimu.RimuIO","page":"I/O","title":"Rimu.RimuIO","text":"Module to provide file input and output functionality for Rimu. Provides convenience functions:\n\nRimuIO.save_df(filename, df::DataFrame) Save dataframe in Arrow format.\nRimuIO.load_df(filename) Load Arrow file into dataframe.\n\n\n\n\n\n","category":"module"},{"location":"rimuio.html#Rimu.RimuIO.load_df-Tuple{Any}","page":"I/O","title":"Rimu.RimuIO.load_df","text":"RimuIO.load_df(filename; propagate_metadata = true, add_filename = true) -> DataFrame\n\nLoad Arrow file into DataFrame. Optionally propagate metadata to DataFrame and add the file name as metadata.\n\nSee also RimuIO.save_df.\n\n\n\n\n\n","category":"method"},{"location":"rimuio.html#Rimu.RimuIO.save_df-Tuple{Any, DataFrame}","page":"I/O","title":"Rimu.RimuIO.save_df","text":"RimuIO.save_df(filename, df::DataFrame; kwargs...)\n\nSave dataframe in Arrow format.\n\nKeyword arguments are passed on to Arrow.write. Compression is enabled by default for large DataFrames (over 10,000 rows).\n\nTable-level metadata of the DataFrame is saved as Arrow metadata (with String value) unless overwritten with the keyword argument metadata.\n\nSee also RimuIO.load_df.\n\n\n\n\n\n","category":"method"},{"location":"rimuio.html#Index","page":"I/O","title":"Index","text":"","category":"section"},{"location":"rimuio.html","page":"I/O","title":"I/O","text":"Pages   = [\"rimuio.md\"]","category":"page"},{"location":"hamiltonians.html#Module-Hamiltonians","page":"Hamiltonians","title":"Module Hamiltonians","text":"","category":"section"},{"location":"hamiltonians.html","page":"Hamiltonians","title":"Hamiltonians","text":"This module contains definitions of Hamiltonians, in particular specific physical models of interest. These are organised by means of an interface around the abstract type AbstractHamiltonian, in the spirit of the AbstractArray interface as discussed in the Julia Documentation.","category":"page"},{"location":"hamiltonians.html","page":"Hamiltonians","title":"Hamiltonians","text":"The Hamiltonians can be used for projector quantum Monte Carlo with ProjectorMonteCarloProblem or for exact diagonalization with ExactDiagonalizationProblem, see Exact Diagonalization.","category":"page"},{"location":"hamiltonians.html","page":"Hamiltonians","title":"Hamiltonians","text":"Hamiltonians","category":"page"},{"location":"hamiltonians.html#Rimu.Hamiltonians","page":"Hamiltonians","title":"Rimu.Hamiltonians","text":"The module Rimu.Hamiltonians defines types and functions for working with Hamiltonians.\n\nExported concrete Hamiltonian types\n\nReal space Hubbard models\n\nHubbardReal1D\nBoseHubbardReal1D2C\nHubbardReal1DEP\nHubbardRealSpace\nExtendedHubbardReal1D\n\nMomentum space Hubbard models\n\nHubbardMom1D\nBoseHubbardMom1D2C\nHubbardMom1DEP\n\nHarmonic oscillator models\n\nHOCartesianContactInteractions\nHOCartesianEnergyConservedPerDim\nHOCartesianCentralImpurity\n\nOther\n\nFroehlichPolaron\nMatrixHamiltonian\nTranscorrelated1D\n\nWrappers\n\nGutzwillerSampling\nGuidingVectorSampling\nParitySymmetry\nTimeReversalSymmetry\nStoquastic\n\nObservables\n\nParticleNumberOperator\nG2RealCorrelator\nG2RealSpace\nG2MomCorrelator\nDensityMatrixDiagonal\nMomentum\nAxialAngularMomentumHO\n\nInterface for working with Hamiltonians\n\nAbstractHamiltonian: defined in the module Interfaces\n\n\n\n\n\n","category":"module"},{"location":"hamiltonians.html#Model-Hamiltonians","page":"Hamiltonians","title":"Model Hamiltonians","text":"","category":"section"},{"location":"hamiltonians.html","page":"Hamiltonians","title":"Hamiltonians","text":"Here is a list of fully implemented model Hamiltonians. There are several variants of the Hubbard model in real and momentum space, as well as some other models.","category":"page"},{"location":"hamiltonians.html#Real-space-Hubbard-models","page":"Hamiltonians","title":"Real space Hubbard models","text":"","category":"section"},{"location":"hamiltonians.html","page":"Hamiltonians","title":"Hamiltonians","text":"HubbardReal1D\nBoseHubbardReal1D2C\nHubbardReal1DEP\nHubbardRealSpace\nExtendedHubbardReal1D","category":"page"},{"location":"hamiltonians.html#Rimu.Hamiltonians.HubbardReal1D","page":"Hamiltonians","title":"Rimu.Hamiltonians.HubbardReal1D","text":"HubbardReal1D(address; u=1.0, t=1.0)\n\nImplements a one-dimensional Bose Hubbard chain in real space.\n\nhatH = -t sum_langle ijrangle a_i^ a_j + fracu2sum_i n_i (n_i-1)\n\nArguments\n\naddress: the starting address, defines number of particles and sites.\nu: the interaction parameter.\nt: the hopping strength.\n\nSee also\n\nHubbardMom1D\nExtendedHubbardReal1D\n\n\n\n\n\n","category":"type"},{"location":"hamiltonians.html#Rimu.Hamiltonians.BoseHubbardReal1D2C","page":"Hamiltonians","title":"Rimu.Hamiltonians.BoseHubbardReal1D2C","text":"BoseHubbardReal1D2C(address::BoseFS2C; ua=1.0, ub=1.0, ta=1.0, tb=1.0, v=1.0)\n\nImplements a two-component one-dimensional Bose Hubbard chain in real space.\n\nhatH = hatH_a + hatH_b + Vsum_i n_a_in_b_i\n\nArguments\n\naddress: the starting address, defines number of particles and sites.\nua: the on-site interaction parameter parameter for Hamiltonian a.\nub: the on-site interaction parameter parameter for Hamiltonian b.\nta: the hopping strength for Hamiltonian a.\ntb: the hopping strength for Hamiltonian b.\nv: the inter-species interaction parameter V.\n\nSee also\n\nHubbardReal1D\nBoseHubbardMom1D2C\n\n\n\n\n\n","category":"type"},{"location":"hamiltonians.html#Rimu.Hamiltonians.HubbardReal1DEP","page":"Hamiltonians","title":"Rimu.Hamiltonians.HubbardReal1DEP","text":"HubbardReal1DEP(address; u=1.0, t=1.0, v_ho=1.0)\n\nImplements a one-dimensional Bose Hubbard chain in real space with external potential.\n\nhatH = -t sum_langle ijrangle a_i^ a_j + sum_i ϵ_i n_i\n+ fracu2sum_i n_i (n_i-1)\n\nArguments\n\naddress: the starting address, defines number of particles and sites.\nu: the interaction parameter.\nt: the hopping strength.\nv_ho: strength of the external harmonic oscillator potential ϵ_i = v_ho i^2.\n\nThe first index is i=0 and the maximum of the potential occurs in the centre of the lattice.\n\nSee also\n\nHubbardReal1D\nHubbardMom1D\nExtendedHubbardReal1D\n\n\n\n\n\n","category":"type"},{"location":"hamiltonians.html#Rimu.Hamiltonians.HubbardRealSpace","page":"Hamiltonians","title":"Rimu.Hamiltonians.HubbardRealSpace","text":"HubbardRealSpace(address; geometry=PeriodicBoundaries(M,), t=ones(C), u=ones(C, C), v=zeros(C, D))\n\nHubbard model in real space. Supports single or multi-component Fock state addresses (with C components) and various (rectangular) lattice geometries in D dimensions.\n\n  hatH = -sum_langle ijrangleσ t_σ a^_iσ a_jσ +\n  frac12sum_iσ u_σσ n_iσ (n_iσ - 1) +\n  sum_iστu_στ n_iσ n_iτ\n\nIf v is nonzero then this calculates hatH + hatV by adding the harmonic trapping potential\n\n    hatV = sum_iσd v_σd x_di^2 n_iσ\n\nwhere x_di is the distance of site i from the centre of the trap along dimension d.\n\nAddress types\n\nBoseFS: Single-component Bose-Hubbard model.\nFermiFS: Single-component Fermi-Hubbard model.\nCompositeFS: For multi-component models.\n\nNote that a single component of fermions cannot interact with itself. A warning is produced if addressis incompatible with the interaction parameters u.\n\nGeometries\n\nImplemented CubicGrids for keyword geometry\n\nPeriodicBoundaries\nHardwallBoundaries\nLadderBoundaries\n\nDefault is geometry=PeriodicBoundaries(M,), i.e. a one-dimensional lattice with the number of sites M inferred from the number of modes in address.\n\nOther parameters\n\nt: the hopping strengths. Must be a vector of length C. The i-th element of the vector corresponds to the hopping strength of the i-th component.\nu: the on-site interaction parameters. Must be a symmetric matrix. u[i, j] corresponds to the interaction between the i-th and j-th component. u[i, i] corresponds to the interaction of a component with itself. Note that u[i,i] must be zero for fermionic components.\nv: the trap potential strengths. Must be a matrix of size C × D. v[i,j] is the strength of the trap for component i in the jth dimension.\n\n\n\n\n\n","category":"type"},{"location":"hamiltonians.html#Rimu.Hamiltonians.ExtendedHubbardReal1D","page":"Hamiltonians","title":"Rimu.Hamiltonians.ExtendedHubbardReal1D","text":"ExtendedHubbardReal1D(address; u=1.0, v=1.0, t=1.0, boundary_condition=:periodic)\n\nImplements the extended Hubbard model on a one-dimensional chain in real space. This Hamiltonian can be either real or complex, depending on the choice of boundary_condition.\n\nhatH = -t sum_langle ijrangle a_i^ a_j + fracu2sum_i n_i (n_i-1) +\nv sum_langle ijrangle n_i n_j\n\nArguments\n\naddress: the starting address.\nu: on-site interaction parameter\nv: the next-neighbor interaction\nt: the hopping strength\nboundary_condition The following values are supported:\n:periodic: usual period boundary condition realising a ring geometry.\n:hard_wall: hopping over the boundary is not allowed.\n:twisted: like :periodic but hopping over the boundary incurs an additional factor of -1.\nθ <: Number: like :periodic and :twisted but hopping over the boundary incurs a factor exp(iθ) for a hop to the right and exp(iθ) for a hop to the left. With this choice the Hamiltonian will have a complex eltype whereas otherwise the eltype is determined by the type of the parameters t, u, and v.\n\nSee also HubbardRealSpace.\n\n\n\n\n\n","category":"type"},{"location":"hamiltonians.html#Momentum-space-Hubbard-models","page":"Hamiltonians","title":"Momentum space Hubbard models","text":"","category":"section"},{"location":"hamiltonians.html","page":"Hamiltonians","title":"Hamiltonians","text":"HubbardMom1D\nBoseHubbardMom1D2C\nHubbardMom1DEP","category":"page"},{"location":"hamiltonians.html#Rimu.Hamiltonians.HubbardMom1D","page":"Hamiltonians","title":"Rimu.Hamiltonians.HubbardMom1D","text":"HubbardMom1D(address; u=1.0, t=1.0, dispersion=hubbard_dispersion)\n\nImplements a one-dimensional Bose Hubbard chain in momentum space.\n\nhatH =  sum_k ϵ_k n_k + fracuMsum_kpqr a^_r a^_q a_p a_k δ_r+qp+k\n\nArguments\n\naddress: the starting address, defines number of particles and sites.\nu: the interaction parameter.\nt: the hopping strength.\ndispersion: defines ϵ_k =t*dispersion(k)\nhubbard_dispersion: ϵ_k = -2t cos(k)\ncontinuum_dispersion: ϵ_k = tk^2\n\nSee also\n\nHubbardReal1D\nExtendedHubbardReal1D\n\n\n\n\n\n","category":"type"},{"location":"hamiltonians.html#Rimu.Hamiltonians.BoseHubbardMom1D2C","page":"Hamiltonians","title":"Rimu.Hamiltonians.BoseHubbardMom1D2C","text":"BoseHubbardMom1D2C(address::BoseFS2C; ua=1.0, ub=1.0, ta=1.0, tb=1.0, v=1.0, kwargs...)\n\nImplements a one-dimensional Bose Hubbard chain in momentum space with a two-component Bose gas.\n\nhatH = hatH_a + hatH_b + fracVMsum_kpqr b^_r a^_q b_p a_k δ_r+qp+k\n\nArguments\n\naddress: the starting address.\nua: the u parameter for Hamiltonian a.\nub: the u parameter for Hamiltonian b.\nta: the t parameter for Hamiltonian a.\ntb: the t parameter for Hamiltonian b.\nv: the inter-species interaction parameter V.\n\nFurther keyword arguments are passed on to the constructor of HubbardMom1D.\n\nSee also\n\nBoseFS2C\nBoseHubbardReal1D2C\n\n\n\n\n\n","category":"type"},{"location":"hamiltonians.html#Rimu.Hamiltonians.HubbardMom1DEP","page":"Hamiltonians","title":"Rimu.Hamiltonians.HubbardMom1DEP","text":"HubbardMom1DEP(address; u=1.0, t=1.0, v_ho=1.0, dispersion=hubbard_dispersion)\n\nImplements a one-dimensional Bose Hubbard chain in momentum space with harmonic external potential.\n\nH = sum_k ϵ_k n_k + fracuMsum_kpqr a^_r a^_q a_p a_k δ_r+qp+k\n            + V_mathrmho \n\nwhere\n\nbeginaligned\nV_mathrmho  = frac1M sum_pq  mathrmDFTV_ext_p-q \n                    a^_p a_q \nV_mathrmext(x) = v_mathrmho x^2 \nendaligned\n\nis an external harmonic potential in momentum space, mathrmDFT_k is a discrete Fourier transform performed by fft()[k%M + 1], and M == num_modes(address).\n\nArguments\n\naddress: the starting address, defines number of particles and sites.\nu: the interaction parameter.\nt: the hopping strength.\ndispersion: defines ϵ_k =t*dispersion(k)\nhubbard_dispersion: ϵ_k = -2t cos(k)\ncontinuum_dispersion: ϵ_k = tk^2\nv_ho: strength of the external harmonic oscillator potential v_mathrmho.\n\nSee also HubbardMom1D, HubbardReal1DEP, Transcorrelated1D, Hamiltonians.\n\n\n\n\n\n","category":"type"},{"location":"hamiltonians.html#Harmonic-oscillator-models","page":"Hamiltonians","title":"Harmonic oscillator models","text":"","category":"section"},{"location":"hamiltonians.html","page":"Hamiltonians","title":"Hamiltonians","text":"HOCartesianContactInteractions\nHOCartesianEnergyConservedPerDim\nHOCartesianCentralImpurity","category":"page"},{"location":"hamiltonians.html#Rimu.Hamiltonians.HOCartesianContactInteractions","page":"Hamiltonians","title":"Rimu.Hamiltonians.HOCartesianContactInteractions","text":"HOCartesianContactInteractions(addr; S, η, g = 1.0, interaction_only = false, block_by_level = true)\n\nImplements a bosonic harmonic oscillator in Cartesian basis with contact interactions\n\nhatH = sum_i epsilon_mathbfi n_mathbfi + fracg2sum_mathbfijkl\n    V_mathbfijkl a^_mathbfi a^_mathbfj a_mathbfk a_mathbfl\n\nFor a D-dimensional harmonic oscillator indices mathbfi mathbfj ldots are D-tuples. The energy scale is defined by the first dimension i.e. hbar omega_x so that single particle energies are\n\n    fracepsilon_mathbfihbar omega_x = (i_x + 12) + eta_y (i_y+12) + ldots\n\nThe factors eta_y ldots allow for anisotropic trapping geometries and are assumed to be greater than 1 so that omega_x is the smallest trapping frequency.\n\nBy default the offdiagonal elements due to the interactions are consistent with first-order degenerate perturbation theory\n\n    V_mathbfijkl = delta_epsilon_mathbfi + epsilon_mathbfj\n        ^epsilon_mathbfk + epsilon_mathbfl\n        prod_d in x yldots mathcalI(i_dj_dk_dl_d)\n\nwhere the delta function indicates that the total noninteracting energy is conserved meaning all states with the same noninteracting energy are connected by this interaction and the Hamiltonian blocks according to noninteracting energy levels. Setting block_by_level = false will disable this restriction and allow coupling between basis states of any noninteracting energy level, leading to many more offdiagonals and fewer but larger blocks (the blocks are still distinguished by parity of basis states). Alternatively, see HOCartesianEnergyConservedPerDim for a model with the stronger restriction that conserves energy separately per spatial dimension. The integral mathcalI(abcd) is of four one dimensional harmonic oscillator basis functions, implemented in four_oscillator_integral_general.\n\nArguments\n\naddr: the starting address, defines number of particles and total number of modes.\nS: Tuple of the number of levels in each dimension, including the groundstate. The   allowed couplings between states is defined by the aspect ratio of S .- 1. Defaults   to a 1D spectrum with number of levels matching modes of addr. Will be sorted to make   the first dimension the largest.\nη: Define a custom aspect ratio for the trapping potential strengths, instead of deriving   from S .- 1. This will only affect the single particle energy scale and not the   interactions. The values are always scaled relative to the first dimension, which sets   the energy scale of the system, hbaromega_x.\ng: the (isotropic) bare interaction parameter. The value of g is assumed   to be in trap units.\ninteraction_only: if set to true then the noninteracting single-particle terms are   ignored. Useful if only energy shifts due to interactions are required.\nblock_by_level: if set to false will allow the interactions to couple all states without   comparing their noninteracting energy.\n\nwarning: Warning\nnum_offdiagonals is a bad estimate for this Hamiltonian. Take care when building a matrix or using QMC methods. Use get_all_blocks first then pass option col_hint = block_size to BasisSetRep to safely build the matrix.\n\n\n\n\n\n","category":"type"},{"location":"hamiltonians.html#Rimu.Hamiltonians.HOCartesianEnergyConservedPerDim","page":"Hamiltonians","title":"Rimu.Hamiltonians.HOCartesianEnergyConservedPerDim","text":"HOCartesianEnergyConservedPerDim(addr; S, η, g = 1.0, interaction_only = false)\n\nImplements a bosonic harmonic oscillator in Cartesian basis with contact interactions\n\nhatH = sum_i ϵ_i n_i + fracg2sum_ijkl V_ijkl a^_i a^_j a_k a_l\n\nwith the additional restriction that the interactions only couple states with the same energy in each dimension separately. See HOCartesianContactInteractions for a model that conserves total energy.\n\nFor a D-dimensional harmonic oscillator indices mathbfi mathbfj ldots are D-tuples. The energy scale is defined by the first dimension i.e. hbar omega_x so that single particle energies are\n\n    fracepsilon_mathbfihbar omega_x = (i_x + 12) + eta_y (i_y+12) + ldots\n\nThe factors eta_y ldots allow for anisotropic trapping geometries and are assumed to be greater than 1 so that omega_x is the smallest trapping frequency.\n\nMatrix elements V_mathbfijkl are for a contact interaction calculated in this basis using first-order degenerate perturbation theory.\n\n    V_mathbfijkl = prod_d in x yldots mathcalI(i_dj_dk_dl_d)\n        delta_i_d + j_d^k_d + l_d\n\nwhere the delta-function indicates that the noninteracting energy is conserved along each dimension. The integral mathcalI(abcd) is of four one dimensional harmonic oscillator basis functions, see four_oscillator_integral_general, with the additional restriction that energy is conserved in each dimension.\n\nArguments\n\naddr: the starting address, defines number of particles and total number of modes.\nS: Tuple of the number of levels in each dimension, including the groundstate. Defaults   to a 1D spectrum with number of levels matching modes of addr. Will be sorted to   make the first dimension the largest.\nη: Define a custom aspect ratio for the trapping potential strengths, instead of deriving   from S .- 1. The values are always scaled relative to the first dimension, which sets   the energy scale of the system, hbaromega_x.\ng: the (isotropic) interparticle interaction parameter. The value of g is assumed   to be in trap units.\ninteraction_only: if set to true then the noninteracting single-particle terms are   ignored. Useful if only energy shifts due to interactions are required.\n\n\n\n\n\n","category":"type"},{"location":"hamiltonians.html#Rimu.Hamiltonians.HOCartesianCentralImpurity","page":"Hamiltonians","title":"Rimu.Hamiltonians.HOCartesianCentralImpurity","text":"HOCartesianCentralImpurity(addr; kwargs...)\n\nHamiltonian of non-interacting particles in an arbitrary harmonic trap with a delta-function potential at the centre, with strength g,\n\nhatH_mathrmrel = sum_mathbfi ϵ_mathbfi n_mathbfi\n    + gsum_mathbfij V_mathbfij a^_mathbfi a_mathbfj\n\nFor a D-dimensional harmonic oscillator indices mathbfi mathbfj ldots are D-tuples. The energy scale is defined by the first dimension i.e. hbar omega_x so that single particle energies are\n\n    fracepsilon_mathbfihbar omega_x = (i_x + 12) + eta_y (i_y+12) + ldots\n\nThe factors eta_y ldots allow for anisotropic trapping geometries and are assumed to be greater than 1 so that omega_x is the smallest trapping frequency.\n\nMatrix elements V_mathbfij are for a delta function potential calculated in this basis\n\n    V_mathbfij = prod_d in x yldots psi_i_d(0) psi_j_d(0)\n\nOnly even parity states feel this impurity, so all i_d are even. Note that the matrix representation of this Hamiltonian for a single particle is completely dense in the even-parity subspace.\n\nArguments\n\naddr: the starting address, defines number of particles and total number of modes.\nmax_nx = num_modes(addr) - 1: the maximum harmonic oscillator index number in the x-dimension.   Must be even. Index number for the harmonic oscillator groundstate is 0.\nηs = (): a tuple of aspect ratios for the remaining dimensions (η_y, ...). Should be empty   for a 1D trap or contain values greater than 1.0. The maximum index   in other dimensions will be the largest even number less than M/η_y.\nS = nothing: Instead of max_nx, manually set the number of levels in each dimension,   including the groundstate. Must be a Tuple of Ints.\ng = 1.0: the strength of the delta impurity in (x-dimension) trap units.\nimpurity_only=false: if set to true then the trap energy terms are ignored. Useful if   only energy shifts due to the impurity are required.\n\nwarning: Warning\nDue to use of `SpecialFunctions` with large arguments the matrix representation of\nthis Hamiltonian may not be strictly symmetric, but is approximately symmetric within\nmachine precision.\n\nSee also HOCartesianContactInteractions andHOCartesianEnergyConservedPerDim.\n\n\n\n\n\n","category":"type"},{"location":"hamiltonians.html#Other","page":"Hamiltonians","title":"Other","text":"","category":"section"},{"location":"hamiltonians.html","page":"Hamiltonians","title":"Hamiltonians","text":"MatrixHamiltonian\nTranscorrelated1D\nFroehlichPolaron","category":"page"},{"location":"hamiltonians.html#Rimu.Hamiltonians.MatrixHamiltonian","page":"Hamiltonians","title":"Rimu.Hamiltonians.MatrixHamiltonian","text":"MatrixHamiltonian(\n    mat::AbstractMatrix{T};\n    starting_address::Int = starting_address(mat)\n) <: AbstractHamiltonian{T}\n\nWrap an abstract matrix mat as an AbstractHamiltonian object. Works with stochastic methods of ProjectorMonteCarloProblem() and DVec. Optionally, a valid index can be provided as the starting_address.\n\nSpecialised methods are implemented for sparse matrices of type AbstractSparseMatrixCSC. One based indexing is required for the matrix mat.\n\n\n\n\n\n","category":"type"},{"location":"hamiltonians.html#Rimu.Hamiltonians.Transcorrelated1D","page":"Hamiltonians","title":"Rimu.Hamiltonians.Transcorrelated1D","text":"Transcorrelated1D(address; t=1.0, v=1.0, v_ho=0.0, cutoff=1, three_body_term=true)\n\nImplements a transcorrelated Hamiltonian for contact interactions in one dimensional momentum space from Jeszenski et al. (2018). Currently limited to two component fermionic addresses.\n\nbeginaligned\n\ntildeH = t sum_kσk^2 n_kσ \n    quad + sum_pqkσσ T_pqk a^_p-kσ a^_q+kσ a_qσ a_pσ \n    quad + sum_pqskkσσ Q_kka^_p-kσ a^_q+kσ a^_s+k-kσ\n                                       a_sσ a_qσ a_pσ \n    quad + V_mathrmho\nendaligned\n\nwhere\n\nbeginaligned\ntildeu(k) = begincases -frac2k^2 mathrmif  k  k_c\n0  mathrmotherwise\nendcases\n\n\nT_pqk = fracvM + frac2vMleftk^2tildeu(k)\n          - (p - q)ktildeu(k)right + frac2v^2tW(k)\nW(k) = frac1M^2sum_q (k - q)q tildeu(q)tildeu(k - q) \nQ_kl = -fracv^2t M^2k tildeu(k)ltildeu(l)\nendaligned\n\nArguments\n\naddress: The starting address, defines number of particles and sites.\nv: The interaction parameter.\nt: The kinetic energy prefactor.\nv_ho: Strength of the external harmonic oscillator potential V_mathrmho. See HubbardMom1DEP.\ncutoff controls k_c in equations above. Note: skipping generating off-diagonal elements below the cutoff is not implemented - zero-valued elements are returned instead.\nthree_body_term: If set to false, generating three body excitations is skipped. Note: when disabling three body terms, cutoff should be set to a higher value for best results.\n\nSee also\n\nHubbardMom1D\nHubbardMom1DEP\n\n\n\n\n\n","category":"type"},{"location":"hamiltonians.html#Rimu.Hamiltonians.FroehlichPolaron","page":"Hamiltonians","title":"Rimu.Hamiltonians.FroehlichPolaron","text":"FroehlichPolaron(address::OccupationNumberFS{M}; kwargs...) <: AbstractHamiltonian\n\nThe Froehlich polaron Hamiltonian for a 1D lattice with M momentum modes is given by\n\nH = (p_f - p)^2m + ωN - v Σₖ(aₖ^ + aₖ)\n\nwhere p is the total momentum, p_f = Σ_k k aₖ^ aₖ is the momentum operator for the bosons, and k part of the momentum lattice with separation 2πl. N is the number operator for the bosons.\n\nKeyword Arguments\n\np=0.0: the total momentum p.\nv=1.0: the coupling strength v.\nmass=1.0: the particle mass m.\nomega=1.0: the oscillation frequency of the phonons ω.\nl=1.0: the box size in real space l. Provides scale parameter of the momentum   lattice.\nmomentum_cutoff=nothing: the maximum boson momentum allowed for an address.\nmode_cutoff: the maximum number of bosons in each momentum mode. Defaults to the maximum   value supported by the address type OccupationNumberFS.\n\nExamples\n\njulia> fs = OccupationNumberFS(0,0,0)\nOccupationNumberFS{3, UInt8}(0, 0, 0)\n\njulia> ham = FroehlichPolaron(fs; v=0.5)\nFroehlichPolaron(fs\"|0 0 0⟩{8}\"; v=0.5, mass=1.0, omega=1.0, l=1.0, p=0.0, mode_cutoff=255)\n\njulia> dimension(ham)\n16777216\n\njulia> dimension(FroehlichPolaron(fs; v=0.5, mode_cutoff=5))\n216\n\nSee also OccupationNumberFS, dimension, AbstractHamiltonian.\n\n\n\n\n\n","category":"type"},{"location":"hamiltonians.html#Convenience-functions","page":"Hamiltonians","title":"Convenience functions","text":"","category":"section"},{"location":"hamiltonians.html","page":"Hamiltonians","title":"Hamiltonians","text":"rayleigh_quotient\nmomentum\nhubbard_dispersion\ncontinuum_dispersion\nshift_lattice\nshift_lattice_inv","category":"page"},{"location":"hamiltonians.html#Rimu.Hamiltonians.rayleigh_quotient","page":"Hamiltonians","title":"Rimu.Hamiltonians.rayleigh_quotient","text":"rayleigh_quotient(H, v)\n\nReturn the Rayleigh quotient of the linear operator H and the vector v:\n\nfrac v  H  v  vv \n\n\n\n\n\n","category":"function"},{"location":"hamiltonians.html#Rimu.Hamiltonians.momentum","page":"Hamiltonians","title":"Rimu.Hamiltonians.momentum","text":"momentum(ham::AbstractHamiltonian)\n\nMomentum as a linear operator in Fock space. Pass a Hamiltonian ham in order to convey information about the Fock basis. Returns an AbstractHamiltonian that represents the momentum operator.\n\nNote: momentum is currently only defined on HubbardMom1D.\n\nExample\n\njulia> add = BoseFS((1, 0, 2, 1, 2, 1, 1, 3));\n\n\njulia> ham = HubbardMom1D(add; u = 2.0, t = 1.0);\n\n\njulia> mom = momentum(ham);\n\n\njulia> diagonal_element(mom, add) # calculate the momentum of a single configuration\n-1.5707963267948966\n\njulia> v = DVec(add => 10; capacity=1000);\n\n\njulia> rayleigh_quotient(mom, v) # momentum expectation value for state vector `v`\n-1.5707963267948966\n\nPart of the AbstractHamiltonian interface.\n\n\n\n\n\n","category":"function"},{"location":"hamiltonians.html#Rimu.Hamiltonians.hubbard_dispersion","page":"Hamiltonians","title":"Rimu.Hamiltonians.hubbard_dispersion","text":"hubbard_dispersion(k)\n\nDispersion relation for HubbardMom1D. Returns -2cos(k).\n\nSee also continuum_dispersion.\n\n\n\n\n\n","category":"function"},{"location":"hamiltonians.html#Rimu.Hamiltonians.continuum_dispersion","page":"Hamiltonians","title":"Rimu.Hamiltonians.continuum_dispersion","text":"continuum_dispersion(k)\n\nDispersion relation for HubbardMom1D. Returns k^2.\n\nSee also hubbard_dispersion.\n\n\n\n\n\n","category":"function"},{"location":"hamiltonians.html#Rimu.Hamiltonians.shift_lattice","page":"Hamiltonians","title":"Rimu.Hamiltonians.shift_lattice","text":"shift_lattice(is)\n\nCircular shift contiguous indices is in interval [M÷2, M÷2) such that set starts with 0, where M=length(is).\n\nInverse operation: shift_lattice_inv. Used in HubbardReal1DEP and HubbardMom1DEP\n\n\n\n\n\n","category":"function"},{"location":"hamiltonians.html#Rimu.Hamiltonians.shift_lattice_inv","page":"Hamiltonians","title":"Rimu.Hamiltonians.shift_lattice_inv","text":"shift_lattice_inv(js)\n\nCircular shift indices starting with 0 into a contiguous set in interval [M÷2, M÷2), where M=length(js).\n\nInverse operation of shift_lattice. Used in HubbardReal1DEP and HubbardMom1DEP\n\n\n\n\n\n","category":"function"},{"location":"hamiltonians.html#Hamiltonian-wrappers","page":"Hamiltonians","title":"Hamiltonian wrappers","text":"","category":"section"},{"location":"hamiltonians.html","page":"Hamiltonians","title":"Hamiltonians","text":"The following Hamiltonians are constructed from an existing Hamiltonian instance and change its behaviour:","category":"page"},{"location":"hamiltonians.html","page":"Hamiltonians","title":"Hamiltonians","text":"GutzwillerSampling\nGuidingVectorSampling\nParitySymmetry\nTimeReversalSymmetry\nStoquastic","category":"page"},{"location":"hamiltonians.html#Rimu.Hamiltonians.GutzwillerSampling","page":"Hamiltonians","title":"Rimu.Hamiltonians.GutzwillerSampling","text":"GutzwillerSampling(::AbstractHamiltonian; g)\n\nWrapper over any AbstractHamiltonian that implements Gutzwiller sampling. In this importance sampling scheme the Hamiltonian is modified as follows\n\ntildeH_ij = H_ij e^-g(H_ii - H_jj) \n\nThis way off-diagonal spawns to higher-energy configurations are discouraged and spawns to lower-energy configurations encouraged for positive g.\n\nConstructor\n\nGutzwillerSampling(::AbstractHamiltonian, g)\nGutzwillerSampling(::AbstractHamiltonian; g)\n\nAfter construction, we can access the underlying Hamiltonian with G.hamiltonian and the g parameter with G.g.\n\nExample\n\njulia> H = HubbardMom1D(BoseFS(1,1,1); u=6.0, t=1.0)\nHubbardMom1D(fs\"|1 1 1⟩\"; u=6.0, t=1.0)\n\njulia> G = GutzwillerSampling(H, g=0.3)\nGutzwillerSampling(HubbardMom1D(fs\"|1 1 1⟩\"; u=6.0, t=1.0); g=0.3)\n\njulia> get_offdiagonal(H, BoseFS(2, 1, 0), 1)\n(BoseFS{3,3}(1, 0, 2), 2.0)\n\njulia> get_offdiagonal(G, BoseFS(2, 1, 0), 1)\n(BoseFS{3,3}(1, 0, 2), 0.8131393194811987)\n\nObservables\n\nTo calculate observables, pass the transformed Hamiltonian G to AllOverlaps with keyword argument transform=G.\n\n\n\n\n\n","category":"type"},{"location":"hamiltonians.html#Rimu.Hamiltonians.GuidingVectorSampling","page":"Hamiltonians","title":"Rimu.Hamiltonians.GuidingVectorSampling","text":"GuidingVectorSampling\n\nWrapper over any AbstractHamiltonian that implements guided vector a.k.a. guided wave function sampling. In this importance sampling scheme the Hamiltonian is modified as follows.\n\ntildeH_ij = v_i H_ij v_j^-1\n\nand where v is the guiding vector. v_i and v_j are also thresholded to avoid dividing by zero (see below).\n\nConstructors\n\nGuidingVectorSampling(::AbstractHamiltonian, vector, eps)\nGuidingVectorSampling(::AbstractHamiltonian; vector, eps)\n\neps is a thresholding parameter used to avoid dividing by zero; all values below eps are set to eps. It is recommended that eps is in the same value range as the guiding vector. The default value is set to eps=norm(v, Inf) * 1e-2\n\nAfter construction, we can access the underlying hamiltonian with G.hamiltonian, the eps parameter with G.eps, and the guiding vector with G.vector.\n\nExample\n\njulia> H = HubbardReal1D(BoseFS(1,1,1); u=6.0, t=1.0);\n\njulia> v = DVec(starting_address(H) => 10; capacity=1);\n\njulia> G = GuidingVectorSampling(H, v, 0.1);\n\njulia> get_offdiagonal(H, starting_address(H), 4)\n(BoseFS{3,3}(2, 0, 1), -1.4142135623730951)\n\njulia> get_offdiagonal(G, starting_address(G), 4)\n(BoseFS{3,3}(2, 0, 1), -0.014142135623730952)\n\nObservables\n\nTo calculate observables, pass the transformed Hamiltonian G to AllOverlaps with keyword argument transform=G.\n\n\n\n\n\n","category":"type"},{"location":"hamiltonians.html#Rimu.Hamiltonians.ParitySymmetry","page":"Hamiltonians","title":"Rimu.Hamiltonians.ParitySymmetry","text":"ParitySymmetry(ham::AbstractHamiltonian{T}; even=true) <: AbstractHamiltonian{T}\n\nImpose even or odd parity on all states and the Hamiltonian ham as controlled by the keyword argument even. Parity symmetry of the Hamiltonian is assumed. For some Hamiltonians, ParitySymmetry reduces the size of the Hilbert space by half.\n\nParitySymmetry performs a unitary transformation, leaving the eigenvalues unchanged and preserving the LOStructure. This is achieved by changing the basis set to states with defined parity. Effectively, a non-even address α is replaced by frac12(α  α) for even and odd parity, respectively, where ᾱ == reverse(α).\n\nNotes\n\nThis modifier currently only works on starting_addresss with an odd number of modes.\nFor odd parity, the starting_address of the underlying Hamiltonian cannot be symmetric.\nIf parity is not a symmetry of the Hamiltonian ham then the result is undefined.\nParitySymmetry works by modifying the offdiagonals iterator.\n\njulia> ham = HubbardReal1D(BoseFS(0,2,1))\nHubbardReal1D(fs\"|0 2 1⟩\"; u=1.0, t=1.0)\n\njulia> size(Matrix(ham))\n(10, 10)\n\njulia> size(Matrix(ParitySymmetry(ham)))\n(6, 6)\n\njulia> size(Matrix(ParitySymmetry(ham; odd=true)))\n(4, 4)\n\njulia> eigvals(Matrix(ham))[1] ≈ eigvals(Matrix(ParitySymmetry(ham)))[1]\ntrue\n\nSee also TimeReversalSymmetry.\n\n\n\n\n\n","category":"type"},{"location":"hamiltonians.html#Rimu.Hamiltonians.TimeReversalSymmetry","page":"Hamiltonians","title":"Rimu.Hamiltonians.TimeReversalSymmetry","text":"TimeReversalSymmetry(ham::AbstractHamiltonian{T}; even=true) <: AbstractHamiltonian{T}\n\nImpose even or odd time reversal on all states and the Hamiltonian ham as controlled by the keyword argument even. If time reversal is a symmetry of the Hamiltonian it will block (reducing Hilbert space dimension) preserving the eigenvalues and LOStructure.\n\nNotes\n\nThis modifier only works two component starting_addresses.\nFor odd time reversal symmetry, the starting_address of the underlying Hamiltonian must not be symmetric.\nIf time reversal is not a symmetry of the Hamiltonian ham then the result is undefined.\nTimeReversalSymmetry works by modifying the offdiagonals iterator.\n\njulia> ham = HubbardMom1D(FermiFS2C((1,0,1),(0,1,1)));\n\njulia> size(Matrix(ham))\n(3, 3)\n\njulia> size(Matrix(TimeReversalSymmetry(ham)))\n(2, 2)\n\njulia> size(Matrix(TimeReversalSymmetry(ham, even=false)))\n(1, 1)\n\njulia> eigvals(Matrix(TimeReversalSymmetry(ham)))[1] ≈ eigvals(Matrix(ham))[1]\ntrue\n\nSee also ParitySymmetry.\n\n\n\n\n\n","category":"type"},{"location":"hamiltonians.html#Rimu.Hamiltonians.Stoquastic","page":"Hamiltonians","title":"Rimu.Hamiltonians.Stoquastic","text":"Stoquastic(ham <: AbstractHamiltonian) <: AbstractHamiltonian\n\nA wrapper for an AbstractHamiltonian that replaces all off-diagonal matrix elements v by -abs(v), thus making the new Hamiltonian stoquastic.\n\nA stoquastic Hamiltonian does not have a Monte Carlo sign problem. For a hermitian ham the smallest eigenvalue of Stoquastic(ham) is ≤ the smallest eigenvalue of ham.\n\n\n\n\n\n","category":"type"},{"location":"hamiltonians.html#Observables","page":"Hamiltonians","title":"Observables","text":"","category":"section"},{"location":"hamiltonians.html","page":"Hamiltonians","title":"Hamiltonians","text":"Observables are AbstractHamiltonians that represent a physical observable. Their ground state expectation values can be sampled by passing them into AllOverlaps.","category":"page"},{"location":"hamiltonians.html","page":"Hamiltonians","title":"Hamiltonians","text":"ParticleNumberOperator\nG2RealCorrelator\nG2RealSpace\nG2MomCorrelator\nSuperfluidCorrelator\nStringCorrelator\nDensityMatrixDiagonal\nMomentum\nAxialAngularMomentumHO","category":"page"},{"location":"hamiltonians.html#Rimu.Hamiltonians.ParticleNumberOperator","page":"Hamiltonians","title":"Rimu.Hamiltonians.ParticleNumberOperator","text":"ParticleNumberOperator([address]) <: AbstractHamiltonian\n\nThe number operator in Fock space. This operator is diagonal in the Fock basis and returns the number of particles in the Fock state. Passing an address is optional.\n\njulia> h = FroehlichPolaron(fs\"|0 0⟩{}\"; mode_cutoff=5, v=3); bsr = BasisSetRepresentation(h);\n\njulia> gs = DVec(zip(bsr.basis, eigen(Matrix(bsr)).vectors[:,1])); # ground state\n\njulia> dot(gs, ParticleNumberOperator(), gs) # particle number expectation value\n2.8823297252925917\n\nSee also AbstractHamiltonian.\n\n\n\n\n\n","category":"type"},{"location":"hamiltonians.html#Rimu.Hamiltonians.G2RealCorrelator","page":"Hamiltonians","title":"Rimu.Hamiltonians.G2RealCorrelator","text":"G2RealCorrelator(d::Int) <: AbstractHamiltonian{Float64}\n\nTwo-body operator for density-density correlation between sites separated by d with 0 ≤ d < M.\n\n    hatG^(2)(d) = frac1M sum_i^M hatn_i (hatn_i+d - delta_0d)\n\nAssumes a one-dimensional lattice with periodic boundary conditions where\n\n    hatG^(2)(-M2 leq d  0) = hatG^(2)(d)\n\n    hatG^(2)(M2  d  M) = hatG^(2)(M - d)\n\nand normalisation\n\n    sum_d=0^M-1 langle hatG^(2)(d) rangle = fracN (N-1)M\n\nFor multicomponent basis, calculates correlations between all particles equally, equivalent to stacking all components into a single Fock state.\n\nArguments\n\nd::Integer: distance between sites.\n\nSee also\n\nHubbardReal1D\nG2RealSpace\nG2MomCorrelator\nAbstractHamiltonian\nAllOverlaps\n\n\n\n\n\n","category":"type"},{"location":"hamiltonians.html#Rimu.Hamiltonians.G2RealSpace","page":"Hamiltonians","title":"Rimu.Hamiltonians.G2RealSpace","text":"G2RealSpace(geometry::CubicGrid, σ=1, τ=1; sum_components=false) <: AbstractHamiltonian{SArray}\n\nTwo-body operator for density-density correlation for all Displacements d in the specified geometry.\n\n    hatG^(2)_στ(d) = frac1M _i n_σi (n_τi+d - δ_0dδ_στ)\n\nFor multicomponent addresses, σ and τ control the components involved. Alternatively, sum_components can be set to true, which treats all particles as belonging to the same component.\n\nExamples\n\njulia> geom = CubicGrid(2, 2);\n\njulia> g2 = G2RealSpace(geom)\nG2RealSpace(CubicGrid((2, 2), (true, true)), 1,1)\n\njulia> diagonal_element(g2, BoseFS(2,0,1,1))\n2×2 StaticArraysCore.SMatrix{2, 2, Float64, 4} with indices SOneTo(2)×SOneTo(2):\n 0.5  1.0\n 0.5  1.0\n\njulia> g2_cross = G2RealSpace(geom, 1, 2)\nG2RealSpace(CubicGrid((2, 2), (true, true)), 1,2)\n\njulia> g2_sum = G2RealSpace(geom, sum_components=true)\nG2RealSpace(CubicGrid((2, 2), (true, true)); sum_components=true)\n\njulia> diagonal_element(g2, fs\"|⇅⋅↓↑⟩\")\n2×2 StaticArraysCore.SMatrix{2, 2, Float64, 4} with indices SOneTo(2)×SOneTo(2):\n 0.0  0.0\n 0.0  0.5\n\njulia> diagonal_element(g2_cross, fs\"|⇅⋅↓↑⟩\")\n2×2 StaticArraysCore.SMatrix{2, 2, Float64, 4} with indices SOneTo(2)×SOneTo(2):\n 0.25  0.25\n 0.25  0.25\n\njulia> diagonal_element(g2_sum, fs\"|⇅⋅↓↑⟩\")\n2×2 StaticArraysCore.SMatrix{2, 2, Float64, 4} with indices SOneTo(2)×SOneTo(2):\n 0.5  1.0\n 0.5  1.0\n\nSee also\n\nCubicGrid\nHubbardRealSpace\nG2RealCorrelator\nG2MomCorrelator\nAbstractHamiltonian\nAllOverlaps\n\n\n\n\n\n","category":"type"},{"location":"hamiltonians.html#Rimu.Hamiltonians.G2MomCorrelator","page":"Hamiltonians","title":"Rimu.Hamiltonians.G2MomCorrelator","text":"G2MomCorrelator(d::Int,c=:cross) <: AbstractHamiltonian{ComplexF64}\n\nTwo-body correlation operator representing the density-density correlation at distance d of a two component system in a momentum-space Fock-state basis. It returns a Complex value.\n\nCorrelation across two components:\n\nhatG^(2)(d) = frac1Msum_spqr=1^M e^-id(p-q)2πM a^_s b^_p  b_q a_r δ_s+pq+r\n\nCorrelation within a single component:\n\nhatG^(2)(d) = frac1Msum_spqr=1^M e^-id(p-q)2πM a^_s a^_p  a_q a_r δ_s+pq+r\n\nThe diagonal element, where (p-q)=0, is\n\nfrac1Msum_kp=1^M a^_k b^_p  b_p a_k \n\nArguments\n\nd::Integer: the distance between two particles.\nc: possible instructions: :cross: default instruction, computing correlation between particles across two components; :first: computing correlation between particles within the first component; :second: computing correlation between particles within the second component. These are the only defined instructions, using anything else will produce errors.\n\nTo use on a one-component system\n\nFor a system with only one component, e.g. with BoseFS, the second argument c is irrelevant and can be any of the above instructions, one could simply skip this argument and let it be the default value.\n\nSee also\n\nBoseHubbardMom1D2C\nBoseFS2C\nG2RealCorrelator\nG2RealSpace\nAbstractHamiltonian\nAllOverlaps\n\n\n\n\n\n","category":"type"},{"location":"hamiltonians.html#Rimu.Hamiltonians.SuperfluidCorrelator","page":"Hamiltonians","title":"Rimu.Hamiltonians.SuperfluidCorrelator","text":"SuperfluidCorrelator(d::Int) <: AbstractHamiltonian{Float64}\n\nOperator for extracting superfluid correlation between sites separated by a distance d with 0 ≤ d < M:\n\n    hatC_textSF(d) = frac1M sum_i^M a_i^dagger a_i + d\n\nAssumes a one-dimensional lattice with M sites and periodic boundary conditions. M is also the number of modes in the Fock state address.\n\nUsage\n\nSuperfluid correlations can be extracted from a Monte Carlo calculation by wrapping SuperfluidCorrelator with AllOverlaps and passing into ProjectorMonteCarloProblem with the replica keyword argument. For an example with a similar use of G2RealCorrelator see G2 Correlator Example.\n\nSee also HubbardReal1D, G2RealCorrelator, AbstractHamiltonian, and AllOverlaps.\n\n\n\n\n\n","category":"type"},{"location":"hamiltonians.html#Rimu.Hamiltonians.StringCorrelator","page":"Hamiltonians","title":"Rimu.Hamiltonians.StringCorrelator","text":"StringCorrelator(d::Int) <: AbstractHamiltonian{Float64}\n\nOperator for extracting string correlation between lattice sites on a one-dimensional Hubbard lattice separated by a distance d with 0 ≤ d < M\n\n    hatC_textstring(d) = frac1M sum_j^M delta n_j (e^i pi sum_j leq k  j + d delta n_k) delta n_j+d\n\nHere, delta hatn_j = hatn_j - barn is the boson number deviation from the mean filling number and barn = NM is the mean filling number of lattice sites with N particles and M lattice sites (or modes).\n\nAssumes a one-dimensional lattice with periodic boundary conditions. For usage see SuperfluidCorrelator and AllOverlaps.\n\nSee also HubbardReal1D, G2RealCorrelator, SuperfluidCorrelator, AbstractHamiltonian, and AllOverlaps.\n\n\n\n\n\n","category":"type"},{"location":"hamiltonians.html#Rimu.Hamiltonians.DensityMatrixDiagonal","page":"Hamiltonians","title":"Rimu.Hamiltonians.DensityMatrixDiagonal","text":"DensityMatrixDiagonal(mode; component=0) <: AbstractHamiltonian\n\nRepresent a diagonal element of the single-particle density:\n\nhatn_iσ = hat a^_iσ hat a_iσ\n\nwhere i is the mode and σ is the component. If component is zero, the sum over all components is computed.\n\nSee also\n\nsingle_particle_density\nSingleParticleDensity\n\n\n\n\n\n","category":"type"},{"location":"hamiltonians.html#Rimu.Hamiltonians.Momentum","page":"Hamiltonians","title":"Rimu.Hamiltonians.Momentum","text":"Momentum(component=0; fold=true) <: AbstractHamiltonian\n\nThe momentum operator hatp.\n\nThe component argument controls which component of the address is taken into consideration. A value of 0 sums the contributions of all components. If fold is true, the momentum is folded into the Brillouin zone.\n\njulia> add = BoseFS((1, 0, 2, 1, 2, 1, 1, 3))\nBoseFS{11,8}(1, 0, 2, 1, 2, 1, 1, 3)\n\njulia> v = DVec(add => 10);\n\njulia> rayleigh_quotient(Momentum(), DVec(add => 1))\n-2.0\n\njulia> rayleigh_quotient(Momentum(fold=false), DVec(add => 1))\n14.0\n\n\n\n\n\n","category":"type"},{"location":"hamiltonians.html#Rimu.Hamiltonians.AxialAngularMomentumHO","page":"Hamiltonians","title":"Rimu.Hamiltonians.AxialAngularMomentumHO","text":"AxialAngularMomentumHO(S; z_dim = 3, addr = BoseFS(prod(S))) <: AbstractHamiltonian\n\nAngular momentum operator for application to Cartesian harmonic oscillator basis, see HOCartesianContactInteractions or HOCartesianEnergyConservedPerDim. Represents the projection of angular momentum onto z-axis:\n\nhatL_z = i hbar sum_j=1^N left( b_x b_y^dag - b_y b_x^dag right)\n\nwhere b_x^dag and b_x are raising and lowering (ladder) operators for  a harmonic oscillator in the x dimension, and simlarly for y.\n\nThis is implemented for an N particle Fock space with creation and annihilation operators as\n\nfrac1hbar hatL_z = i sum_n_x=1^M_x sum_n_y=1^M_y\n    left( a_n_x-1n_y+1^dag - a_n_x+1n_y-1^dag right) a_n_x n_y\n\nin units of hbar.\n\nArgument S is a tuple defining the range of Cartesian modes in each dimension and their mapping to Fock space modes in a SingleComponentFockAddress. If S indicates a 3D system the z dimension can be changed by setting z_dim; S should be be isotropic in the remaining x-y plane, i.e. must have S[x_dim] == S[y_dim]. The starting address addr only needs to satisfy num_modes(addr) == prod(S).\n\nExample\n\nCalculate the overlap of two Fock addresses interpreted as harmonic oscillator states in a 2D Cartesian basis\n\njulia> S = (2,2)\n(2, 2)\n\njulia> Lz = AxialAngularMomentumHO(S)\nAxialAngularMomentumHO((2, 2); z_dim = 3, addr = BoseFS{0,4}(0, 0, 0, 0))\n\njulia> v = DVec(BoseFS(prod(S), 2 => 1) => 1.0)\nDVec{BoseFS{1, 4, BitString{4, 1, UInt8}},Float64} with 1 entry, style = IsDeterministic{Float64}()\n  fs\"|0 1 0 0⟩\" => 1.0\n\njulia> w = DVec(BoseFS(prod(S), 3 => 1) => 1.0)\nDVec{BoseFS{1, 4, BitString{4, 1, UInt8}},Float64} with 1 entry, style = IsDeterministic{Float64}()\n  fs\"|0 0 1 0⟩\" => 1.0\n\njulia> dot(w, Lz, v)\n0.0 + 1.0im\n\n\n\n\n\n","category":"type"},{"location":"hamiltonians.html#Hamiltonians-interface","page":"Hamiltonians","title":"Hamiltonians interface","text":"","category":"section"},{"location":"hamiltonians.html","page":"Hamiltonians","title":"Hamiltonians","text":"Behind the implementation of a particular model is a more abstract interface for defining Hamiltonians. If you want to define a new model you should make use of this interface. The most general form of a model Hamiltonian should subtype to AbstractHamiltonian and implement the relevant methods.","category":"page"},{"location":"hamiltonians.html","page":"Hamiltonians","title":"Hamiltonians","text":"AbstractHamiltonian\noffdiagonals\ndiagonal_element\nstarting_address","category":"page"},{"location":"hamiltonians.html#Rimu.Interfaces.AbstractHamiltonian","page":"Hamiltonians","title":"Rimu.Interfaces.AbstractHamiltonian","text":"AbstractHamiltonian{T}\n\nSupertype that provides an interface for linear operators over a linear space with scalar type T that are suitable for FCIQMC (with ProjectorMonteCarloProblem). Indexing is done with addresses (typically not integers) from an address space that may be large (and will not need to be completely generated).\n\nAbstractHamiltonian instances operate on vectors of type AbstractDVec from the module DictVectors and work well with addresses of type AbstractFockAddress from the module BitStringAddresses. The type works well with the external package KrylovKit.jl.\n\nFor available implementations see Hamiltonians.\n\nInterface\n\nBasic interface methods to implement:\n\nstarting_address(::AbstractHamiltonian)\ndiagonal_element(::AbstractHamiltonian, address)\nnum_offdiagonals(::AbstractHamiltonian, address)\nget_offdiagonal(::AbstractHamiltonian, address, chosen::Integer) (optional, see   below)\n\nOptional additional methods to implement:\n\nLOStructure(::Type{typeof(lo)}): defaults to AdjointUnknown\ndimension(::AbstractHamiltonian, addr): defaults to dimension of address space\nallowed_address_type(h::AbstractHamiltonian): defaults to typeof(starting_address(h))\nmomentum(::AbstractHamiltonian): no default\n\nProvides the following functions and methods:\n\noffdiagonals: iterator over reachable off-diagonal matrix elements\nrandom_offdiagonal: function to generate random off-diagonal matrix element\n*(H, v): deterministic matrix-vector multiply (allocating)\nH(v): equivalent to H * v.\nmul!(w, H, v): mutating matrix-vector multiply.\ndot(x, H, v): compute x⋅(H*v) minimizing allocations.\nH[address1, address2]: indexing with getindex() - mostly for testing purposes (slow!)\nBasisSetRepresentation: construct a basis set repesentation\nsparse, Matrix: construct a (sparse) matrix representation\n\nAlternatively to the above, offdiagonals can be implemented instead of get_offdiagonal. Sometimes this can be done efficiently. In this case num_offdiagonals should provide an upper bound on the number of elements obtained when iterating offdiagonals.\n\nSee also Hamiltonians, Interfaces.\n\n\n\n\n\n","category":"type"},{"location":"hamiltonians.html#Rimu.Interfaces.offdiagonals","page":"Hamiltonians","title":"Rimu.Interfaces.offdiagonals","text":"offdiagonals(h::AbstractHamiltonian, address)\n\nReturn an iterator over nonzero off-diagonal matrix elements of h in the same column as address. Will iterate over pairs (newaddress, matrixelement).\n\nExample\n\njulia> address = BoseFS(3,2,1);\n\n\njulia> H = HubbardReal1D(address);\n\n\njulia> h = offdiagonals(H, address)\n6-element Rimu.Hamiltonians.Offdiagonals{BoseFS{6, 3, BitString{8, 1, UInt8}}, Float64, HubbardReal1D{Float64, BoseFS{6, 3, BitString{8, 1, UInt8}}, 1.0, 1.0}}:\n (fs\"|2 3 1⟩\", -3.0)\n (fs\"|2 2 2⟩\", -2.449489742783178)\n (fs\"|3 1 2⟩\", -2.0)\n (fs\"|4 1 1⟩\", -2.8284271247461903)\n (fs\"|4 2 0⟩\", -2.0)\n (fs\"|3 3 0⟩\", -1.7320508075688772)\n\nPart of the AbstractHamiltonian interface.\n\nExtemded help\n\noffdiagonals return and iterator of type <:AbstractOffdiagonals. It defaults to returning Offdiagonals(h, a)\n\nSee also Offdiagonals, AbstractOffdiagonals.\n\n\n\n\n\n","category":"function"},{"location":"hamiltonians.html#Rimu.Interfaces.diagonal_element","page":"Hamiltonians","title":"Rimu.Interfaces.diagonal_element","text":"diagonal_element(ham, address)\n\nCompute the diagonal matrix element of the linear operator ham at address address.\n\nExample\n\njulia> address = BoseFS((3, 2, 1));\n\n\njulia> H = HubbardMom1D(address);\n\n\njulia> diagonal_element(H, address)\n8.666666666666664\n\nPart of the AbstractHamiltonian interface.\n\n\n\n\n\n","category":"function"},{"location":"hamiltonians.html#Rimu.Interfaces.starting_address","page":"Hamiltonians","title":"Rimu.Interfaces.starting_address","text":"starting_address(h)\n\nReturn the starting address for Hamiltonian h. When called on an AbstractMatrix, starting_address returns the index of the lowest diagonal element.\n\nExample\n\njulia> address = BoseFS((3, 2, 1));\n\n\njulia> H = HubbardMom1D(address);\n\n\njulia> address == starting_address(H)\ntrue\n\nPart of the AbstractHamiltonian interface.\n\n\n\n\n\n","category":"function"},{"location":"hamiltonians.html","page":"Hamiltonians","title":"Hamiltonians","text":"The following functions may be implemented instead of offdiagonals.","category":"page"},{"location":"hamiltonians.html","page":"Hamiltonians","title":"Hamiltonians","text":"num_offdiagonals\nget_offdiagonal","category":"page"},{"location":"hamiltonians.html#Rimu.Interfaces.num_offdiagonals","page":"Hamiltonians","title":"Rimu.Interfaces.num_offdiagonals","text":"num_offdiagonals(ham, address)\n\nCompute the number of number of reachable configurations from address address.\n\nExample\n\njulia> address = BoseFS((3, 2, 1));\n\n\njulia> H = HubbardMom1D(address);\n\n\njulia> num_offdiagonals(H, address)\n10\n\nPart of the AbstractHamiltonian interface.\n\n\n\n\n\n","category":"function"},{"location":"hamiltonians.html#Rimu.Interfaces.get_offdiagonal","page":"Hamiltonians","title":"Rimu.Interfaces.get_offdiagonal","text":"newadd, me = get_offdiagonal(ham, add, chosen)\n\nCompute value me and new address newadd of a single (off-diagonal) matrix element in a Hamiltonian ham. The off-diagonal element is in the same column as address add and is indexed by integer index chosen.\n\nExample\n\njulia> addr = BoseFS(3, 2, 1);\n\njulia> H = HubbardMom1D(addr);\n\njulia> get_offdiagonal(H, addr, 3)\n(BoseFS{6,3}(2, 1, 3), 1.0)\n\nPart of the AbstractHamiltonian interface.\n\n\n\n\n\n","category":"function"},{"location":"hamiltonians.html","page":"Hamiltonians","title":"Hamiltonians","text":"The following functions come with default implementations, but may be customized.","category":"page"},{"location":"hamiltonians.html","page":"Hamiltonians","title":"Hamiltonians","text":"random_offdiagonal\nHamiltonians.LOStructure\ndimension\nhas_adjoint\nallowed_address_type","category":"page"},{"location":"hamiltonians.html#Rimu.Interfaces.random_offdiagonal","page":"Hamiltonians","title":"Rimu.Interfaces.random_offdiagonal","text":"random_offdiagonal(offdiagonals::AbstractOffdiagonals)\nrandom_offdiagonal(ham::AbstractHamiltonian, add)\n\nGenerate a single random excitation, i.e. choose from one of the accessible off-diagonal elements in the column corresponding to address add of the Hamiltonian matrix represented by ham. Alternatively, pass as argument an iterator over the accessible matrix elements.\n\nPart of the AbstractHamiltonian interface.\n\n\n\n\n\n","category":"function"},{"location":"hamiltonians.html#Rimu.Interfaces.LOStructure","page":"Hamiltonians","title":"Rimu.Interfaces.LOStructure","text":"LOStructure(op::AbstractHamiltonian)\nLOStructure(typeof(op))\n\nReturn information about the structure of the linear operator op. LOStructure is used as a trait to speficy symmetries or other properties of the linear operator op that may simplify or speed up calculations. Implemented instances are:\n\nIsDiagonal(): The operator is diagonal.\nIsHermitian(): The operator is complex and Hermitian or real and symmetric.\nAdjointKnown(): The operator is not Hermitian, but its   adjoint is implemented.\nAdjointUnknown(): adjoint for this operator is not   implemented.\n\nPart of the AbstractHamiltonian interface.\n\nIn order to define this trait for a new linear operator type, define a method for LOStructure(::Type{<:MyNewLOType}) = ….\n\n\n\n\n\n","category":"type"},{"location":"hamiltonians.html#Rimu.Hamiltonians.dimension","page":"Hamiltonians","title":"Rimu.Hamiltonians.dimension","text":"dimension(h::AbstractHamiltonian, addr=starting_address(h))\ndimension(addr::AbstractFockAddress)\ndimension(::Type{<:AbstractFockAddress})\n\nReturn the estimated dimension of Hilbert space. May return a BigInt number.\n\nWhen called on an address or address type, the dimension of the linear space spanned by the address type is returned. When called on an AbstractHamiltonian, an upper bound on the dimension of the matrix representing the Hamiltonian is returned.\n\nExamples\n\njulia> dimension(OccupationNumberFS(1,2,3))\n16777216\n\njulia> dimension(HubbardReal1D(OccupationNumberFS(1,2,3)))\n28\n\njulia> dimension(BoseFS{200,100})\n1386083821086188248261127842108801860093488668581216236221011219101585442774669540\n\njulia> Float64(ans)\n1.3860838210861882e81\n\nPart of the AbstractHamiltonian interface. See also BasisSetRep.\n\nExtended Help\n\nThe default fallback for dimension called on an AbstractHamiltonian is to return the dimension of the address space, which provides an upper bound. For new Hamiltonians a tighter bound can be provided by defining a custom method.\n\nWhen extending AbstractHamiltonian, define a method for the two-argument form dimension(h::MyNewHamiltonian, addr). For number-conserving Hamiltonians, the function Hamiltonians.number_conserving_dimension may be useful.\n\nWhen extending AbstractFockAddress, define a method for dimension(::Type{MyNewFockAddress}).\n\n\n\n\n\n","category":"function"},{"location":"hamiltonians.html#Rimu.Interfaces.has_adjoint","page":"Hamiltonians","title":"Rimu.Interfaces.has_adjoint","text":"has_adjoint(op)\n\nReturn true if adjoint is defined on op.\n\nPart of the AbstractHamiltonian interface.\n\nSee also LOStructure.\n\n\n\n\n\n","category":"function"},{"location":"hamiltonians.html#Rimu.Interfaces.allowed_address_type","page":"Hamiltonians","title":"Rimu.Interfaces.allowed_address_type","text":"allowed_address_type(h::AbstractHamiltonian)\n\nReturn the type of addresses that can be used with Hamiltonian h.\n\nPart of the AbstractHamiltonian interface.\n\nDefaults to typeof(starting_address(h)). Overload this function if the Hamiltonian can be used with addresses of different types.\n\n\n\n\n\n","category":"function"},{"location":"hamiltonians.html","page":"Hamiltonians","title":"Hamiltonians","text":"This interface relies on unexported functionality, including","category":"page"},{"location":"hamiltonians.html","page":"Hamiltonians","title":"Hamiltonians","text":"Hamiltonians.adjoint\nHamiltonians.dot\nHamiltonians.AbstractOffdiagonals\nHamiltonians.Offdiagonals\nHamiltonians.check_address_type\nHamiltonians.number_conserving_dimension\nHamiltonians.number_conserving_bose_dimension\nHamiltonians.number_conserving_fermi_dimension","category":"page"},{"location":"hamiltonians.html#Base.adjoint","page":"Hamiltonians","title":"Base.adjoint","text":"adjoint(::LOStructure, op::AbstractHamiltonian)\n\nRepresent the adjoint of an AbstractHamiltonian. Extend this method to define custom adjoints.\n\n\n\n\n\n","category":"function"},{"location":"hamiltonians.html#LinearAlgebra.dot","page":"Hamiltonians","title":"LinearAlgebra.dot","text":"dot(map::OccupiedModeMap, vec::AbstractVector)\ndot(map1::OccupiedModeMap, map2::OccupiedModeMap)\n\nDot product extracting mode occupation numbers from an OccupiedModeMap similar to onr.\n\njulia> b = BoseFS(10, 0, 0, 0, 2, 0, 1)\nBoseFS{13,7}(10, 0, 0, 0, 2, 0, 1)\n\njulia> mb = OccupiedModeMap(b)\n3-element OccupiedModeMap{7, BoseFSIndex}:\n BoseFSIndex(occnum=10, mode=1, offset=0)\n BoseFSIndex(occnum=2, mode=5, offset=14)\n BoseFSIndex(occnum=1, mode=7, offset=18)\n\njulia> dot(mb, 1:7)\n27\n\njulia> mb⋅(1:7) == onr(b)⋅(1:7)\ntrue\n\nSee also SingleComponentFockAddress.\n\n\n\n\n\ndot(w, op::AbstractHamiltonian, v)\n\nEvaluate w⋅op(v) minimizing memory allocations.\n\n\n\n\n\ndot(y::PDVec, A::AbstractHamiltonian, x::PDVec[, w::PDWorkingMemory])\n\nPerform y ⋅ A ⋅ x. The working memory w is required to facilitate threaded/distributed operations with non-diagonal A. If needed and not passed a new instance will be allocated. A can be replaced with a tuple of operators.\n\nSee PDVec, PDWorkingMemory.\n\n\n\n\n\n","category":"function"},{"location":"hamiltonians.html#Rimu.Hamiltonians.AbstractOffdiagonals","page":"Hamiltonians","title":"Rimu.Hamiltonians.AbstractOffdiagonals","text":"AbstractOffdiagonals{A,T}<:AbstractVector{Tuple{A,T}}\n\nIterator over new address and matrix elements for reachable off-diagonal matrix elements of a linear operator.\n\nSee Offdiagonals for a default implementation.\n\nMethods to define\n\noffdiagonals(h, a)::AbstractOffdiagonals: This function is used to construct the correct type of offdiagonals for a given combination of Hamiltonian h and Fock address a.\nBase.getindex(::AbstractOffdiagonals, i): should be equivalent to get_offdiagonal(h, a, i).\nBase.size(::AbstractOffdiagonals): should be equivalent to num_offdiagonals(h, a).\n\nSee also offdiagonals, AbstractHamiltonian.\n\n\n\n\n\n","category":"type"},{"location":"hamiltonians.html#Rimu.Hamiltonians.Offdiagonals","page":"Hamiltonians","title":"Rimu.Hamiltonians.Offdiagonals","text":"Offdiagonals(h, address) <: AbstractOffdiagonals\n\nIterator over new address and matrix element for reachable off-diagonal matrix elements of linear operator h from address address.  Represents an abstract vector containing the non-zero off-diagonal matrix elements of the column of h indexed by address. To construct this iterator use offdiagonals.\n\nThis is the default implementation of AbstractOffdiagonals defined in terms of num_offdiagonals and get_offdiagonal.\n\nSee also offdiagonals, AbstractHamiltonian.\n\n\n\n\n\n","category":"type"},{"location":"hamiltonians.html#Rimu.Hamiltonians.check_address_type","page":"Hamiltonians","title":"Rimu.Hamiltonians.check_address_type","text":"check_address_type(h::AbstractHamiltonian, addr_or_type)\n\nThrow an ArgumentError if addr_or_type is not compatible with h. Acceptable arguments are either an address or an address type, or a tuple or array thereof.\n\nSee also allowed_address_type.\n\n\n\n\n\n","category":"function"},{"location":"hamiltonians.html#Rimu.Hamiltonians.number_conserving_dimension","page":"Hamiltonians","title":"Rimu.Hamiltonians.number_conserving_dimension","text":"number_conserving_dimension(address <: AbstractFockAddress)\n\nReturn the dimension of the Fock space spanned by the address type assuming particle number conservation.\n\nSee also number_conserving_bose_dimension, number_conserving_fermi_dimension, dimension.\n\n\n\n\n\n","category":"function"},{"location":"hamiltonians.html#Rimu.Hamiltonians.number_conserving_bose_dimension","page":"Hamiltonians","title":"Rimu.Hamiltonians.number_conserving_bose_dimension","text":"number_conserving_bose_dimension(n, m)\n\nReturn the dimension of the number-conserving Fock space for n bosons in m modes: binomial(n + m - 1, n).\n\nSee also number_conserving_fermi_dimension, number_conserving_dimension.\n\n\n\n\n\n","category":"function"},{"location":"hamiltonians.html#Rimu.Hamiltonians.number_conserving_fermi_dimension","page":"Hamiltonians","title":"Rimu.Hamiltonians.number_conserving_fermi_dimension","text":"number_conserving_fermi_dimension(n, m)\n\nReturn the dimension of the number-conserving Fock space for n fermions in m modes: binomial(m, n).\n\nSee also number_conserving_bose_dimension, number_conserving_dimension.\n\n\n\n\n\n","category":"function"},{"location":"hamiltonians.html#Geometry","page":"Hamiltonians","title":"Geometry","text":"","category":"section"},{"location":"hamiltonians.html","page":"Hamiltonians","title":"Hamiltonians","text":"Lattices in higher dimensions are defined here for HubbardRealSpace and G2RealSpace.","category":"page"},{"location":"hamiltonians.html","page":"Hamiltonians","title":"Hamiltonians","text":"CubicGrid\nHamiltonians.Directions\nHamiltonians.Displacements\nHamiltonians.neighbor_site\nPeriodicBoundaries\nHardwallBoundaries\nLadderBoundaries","category":"page"},{"location":"hamiltonians.html#Rimu.Hamiltonians.CubicGrid","page":"Hamiltonians","title":"Rimu.Hamiltonians.CubicGrid","text":"CubicGrid(dims::NTuple{D,Int}, fold::NTuple{D,Bool})\n\nRepresents a D-dimensional grid. Used to define a cubic lattice and boundary conditions for some AbstractHamiltonians. The type instance can be used to convert between cartesian vector indices (tuples or SVectors) and linear indices (integers). When indexed with vectors, it folds them back into the grid if the out-of-bounds dimension is periodic and 0 otherwise (see example below).\n\ndims controls the size of the grid in each dimension.\nfold controls whether the boundaries in each dimension are periodic (or folded in the case of momentum space).\n\njulia> geo = CubicGrid((2,3), (true,false))\nCubicGrid{2}((2, 3), (true, false))\n\njulia> geo[1]\n(1, 1)\n\njulia> geo[2]\n(2, 1)\n\njulia> geo[3]\n(1, 2)\n\njulia> geo[(1,2)]\n3\n\njulia> geo[(3,2)] # 3 is folded back into 1\n3\n\njulia> geo[(3,3)]\n5\n\njulia> geo[(3,4)] # returns 0 if out of bounds\n0\n\nSee also PeriodicBoundaries, HardwallBoundaries and LadderBoundaries for special-case constructors.\n\n\n\n\n\n","category":"type"},{"location":"hamiltonians.html#Rimu.Hamiltonians.Directions","page":"Hamiltonians","title":"Rimu.Hamiltonians.Directions","text":"Directions(D) <: AbstractVector{SVector{D,Int}}\nDirections(geometry::CubicGrid) <: AbstractVector{SVector{D,Int}}\n\nIterate over axis-aligned direction vectors in D dimensions.\n\njulia> Directions(3)\n6-element Directions{3}:\n [1, 0, 0]\n [0, 1, 0]\n [0, 0, 1]\n [-1, 0, 0]\n [0, -1, 0]\n [0, 0, -1]\n\n\nSee also CubicGrid.\n\n\n\n\n\n","category":"type"},{"location":"hamiltonians.html#Rimu.Hamiltonians.Displacements","page":"Hamiltonians","title":"Rimu.Hamiltonians.Displacements","text":"Displacements(geometry::CubicGrid) <: AbstractVector{SVector{D,Int}}\n\nReturn all valid offset vectors in a CubicGrid. If center=true the (0,0) displacement is placed at the centre of the array.\n\njulia> geometry = CubicGrid((3,4));\n\njulia> reshape(Displacements(geometry), (3,4))\n3×4 reshape(::Displacements{2}, 3, 4) with eltype StaticArraysCore.SVector{2, Int64}:\n [0, 0]  [0, 1]  [0, 2]  [0, 3]\n [1, 0]  [1, 1]  [1, 2]  [1, 3]\n [2, 0]  [2, 1]  [2, 2]  [2, 3]\n\njulia> reshape(Displacements(geometry; center=true), (3,4))\n3×4 reshape(::Displacements{2}, 3, 4) with eltype StaticArraysCore.SVector{2, Int64}:\n [-1, -1]  [-1, 0]  [-1, 1]  [-1, 2]\n [0, -1]   [0, 0]   [0, 1]   [0, 2]\n [1, -1]   [1, 0]   [1, 1]   [1, 2]\n\n\n\n\n\n\n","category":"type"},{"location":"hamiltonians.html#Rimu.Hamiltonians.neighbor_site","page":"Hamiltonians","title":"Rimu.Hamiltonians.neighbor_site","text":"neighbor_site(geom::CubicGrid, site, i)\n\nFind the i-th neighbor of site in the geometry. If the move is illegal, return 0.\n\n\n\n\n\n","category":"function"},{"location":"hamiltonians.html#Rimu.Hamiltonians.PeriodicBoundaries","page":"Hamiltonians","title":"Rimu.Hamiltonians.PeriodicBoundaries","text":"PeriodicBoundaries(dims...) -> CubicGrid\nPeriodicBoundaries(dims) -> CubicGrid\n\nReturn CubicGrid with all dimensions periodic. Equivalent to CubicGrid(dims).\n\n\n\n\n\n","category":"function"},{"location":"hamiltonians.html#Rimu.Hamiltonians.HardwallBoundaries","page":"Hamiltonians","title":"Rimu.Hamiltonians.HardwallBoundaries","text":"HardwallBoundaries(dims...) -> CubicGrid\nHardwallBoundaries(dims) -> CubicGrid\n\nReturn CubicGrid with all dimensions non-periodic. Equivalent to CubicGrid(dims, (false, false, ...)).\n\n\n\n\n\n","category":"function"},{"location":"hamiltonians.html#Rimu.Hamiltonians.LadderBoundaries","page":"Hamiltonians","title":"Rimu.Hamiltonians.LadderBoundaries","text":"LadderBoundaries(dims...) -> CubicGrid\nLadderBoundaries(dims) -> CubicGrid\n\nReturn CubicGrid where the first dimension is dimensions non-periodic and the rest are periodic. Equivalent to CubicGrid(dims, (true, false, ...)).\n\n\n\n\n\n","category":"function"},{"location":"hamiltonians.html#Harmonic-Oscillator","page":"Hamiltonians","title":"Harmonic Oscillator","text":"","category":"section"},{"location":"hamiltonians.html","page":"Hamiltonians","title":"Hamiltonians","text":"Useful utilities for harmonic oscillator in Cartesian basis, see HOCartesianContactInteractions and HOCartesianEnergyConservedPerDim.","category":"page"},{"location":"hamiltonians.html","page":"Hamiltonians","title":"Hamiltonians","text":"get_all_blocks\nfock_to_cart","category":"page"},{"location":"hamiltonians.html#Rimu.Hamiltonians.get_all_blocks","page":"Hamiltonians","title":"Rimu.Hamiltonians.get_all_blocks","text":"get_all_blocks(h::Union{HOCartesianContactInteractions,HOCartesianEnergyConservedPerDim}; \n    target_energy = nothing, \n    max_energy = nothing, \n    max_blocks = nothing, \n    method = :vertices,\n    kwargs...) -> df\n\nFind all distinct blocks of h. Returns a DataFrame with columns \n\nblock_id: index of block in order found\nblock_E0: noninteracting energy of all elements in the block\nblock_size: number of elements in the block\naddr: first address that generates the block with e.g. BasisSetRep\nindices: tuple of mode indices that allow recreation of the generating address    addr; in this case use e.g. BoseFS(M; indices .=> 1) This is useful when    the DataFrame is loaded from file since Arrow.jl converts custom   types to NamedTuples.\nt_basis: time to generate the basis for each block\n\nKeyword arguments:\n\ntarget_energy: only blocks with this noninteracting energy are found\nmax_energy: only blocks with noninteracting energy less than this are found\nmax_blocks: exit after finding this many blocks\nmethod: Choose between :vertices and :comb for method of enumerating    tuples of quantum numbers\nsave_to_file=nothing: if set then the DataFrame recording blocks is saved    after each new block is found\nadditional kwargs: passed to isapprox for comparing block energies.    Useful for anisotropic traps\n\nNote: If h was constructed with option block_by_level = false then the block seeds  addr are determined by parity. In this case the blocks are not generated; t_basis  will be zero, and block_size will be an estimate. Pass the seed addresses to  BasisSetRep with an appropriate filter to generate the blocks.\n\n\n\n\n\n","category":"function"},{"location":"hamiltonians.html#Rimu.Hamiltonians.fock_to_cart","page":"Hamiltonians","title":"Rimu.Hamiltonians.fock_to_cart","text":"fock_to_cart(addr, S; zero_index = true)\n\nConvert a Fock state address addr to Cartesian harmonic oscillator basis  indices n_xn_yldots. These indices are bounded by S which is a  tuple of the maximum number of states in each dimension. By default the  groundstate in each dimension is indexed by 0, but this can be changed  by setting zero_index = false.\n\n\n\n\n\n","category":"function"},{"location":"hamiltonians.html","page":"Hamiltonians","title":"Hamiltonians","text":"Underlying integrals for the interaction matrix elements are implemented in the following unexported functions","category":"page"},{"location":"hamiltonians.html","page":"Hamiltonians","title":"Hamiltonians","text":"Hamiltonians.four_oscillator_integral_general\nHamiltonians.ho_delta_potential\nHamiltonians.log_abs_oscillator_zero","category":"page"},{"location":"hamiltonians.html#Rimu.Hamiltonians.four_oscillator_integral_general","page":"Hamiltonians","title":"Rimu.Hamiltonians.four_oscillator_integral_general","text":"four_oscillator_integral_general(i, j, k, l; max_level = typemax(Int))\n\nIntegral of four one-dimensional harmonic oscillator functions,\n\n    mathcalI(ijkl) = int_-infty^infty dx \n    phi_i(x) phi_j(x) phi_k(x) phi_l(x)\n\nIndices i,j,k,l start at 0 for the groundstate.\n\nThis integral has a closed form in terms of the hypergeometric _3F_2 function, and is non-zero unless i+j+k+l is odd. See e.g. Titchmarsh (1948). This is a generalisation of the closed form in Papenbrock (2002), which is is the special case where i+j == k+l, but is numerically unstable for large arguments. Used in HOCartesianContactInteractions and HOCartesianEnergyConservedPerDim.\n\n\n\n\n\n","category":"function"},{"location":"hamiltonians.html#Rimu.Hamiltonians.ho_delta_potential","page":"Hamiltonians","title":"Rimu.Hamiltonians.ho_delta_potential","text":"ho_delta_potential(S, i, j; [vals])\n\nReturns the matrix element of a delta potential at the centre of a trap, i.e. the  product of two harmonic oscillator functions evaluated at the origin,\n\n    v_ij = phi_mathbfn_i(0) phi_mathbfn_j(0)\n\nwhich is only non-zero for even-parity states. The ith single particle state corresponds to a D-tuple of harmonic oscillator indices mathbfn_i. S defines the bounds of Cartesian harmonic oscillator indices for each dimension. The optional keyword argument vals allows passing pre-computed values of phi_i(0) to speed-up the calculation. The values can be calculated with log_abs_oscillator_zero.\n\nSee also HOCartesianCentralImpurity.\n\n\n\n\n\n","category":"function"},{"location":"hamiltonians.html#Rimu.Hamiltonians.log_abs_oscillator_zero","page":"Hamiltonians","title":"Rimu.Hamiltonians.log_abs_oscillator_zero","text":"log_abs_oscillator_zero(n)\n\nCompute the logarithm of the absolute value of the n^mathrmth 1D harmonic oscillator function evaluated at the origin. The overall sign is determined when the matrix element is evaluated in ho_delta_potential.\n\n\n\n\n\n","category":"function"},{"location":"hamiltonians.html#Index","page":"Hamiltonians","title":"Index","text":"","category":"section"},{"location":"hamiltonians.html","page":"Hamiltonians","title":"Hamiltonians","text":"Pages   = [\"hamiltonians.md\"]","category":"page"},{"location":"RMPI.html#Module-RMPI","page":"RMPI","title":"Module RMPI","text":"","category":"section"},{"location":"RMPI.html","page":"RMPI","title":"RMPI","text":"Rimu.RMPI","category":"page"},{"location":"RMPI.html#Rimu.RMPI","page":"RMPI","title":"Rimu.RMPI","text":"Module for providing MPI functionality for Rimu. This module is unexported. To use it, run\n\nusing Rimu.RMPI\n\n\n\n\n\n","category":"module"},{"location":"RMPI.html#MPIData","page":"RMPI","title":"MPIData","text":"","category":"section"},{"location":"RMPI.html","page":"RMPI","title":"RMPI","text":"Rimu.RMPI.MPIData","category":"page"},{"location":"RMPI.html#Rimu.RMPI.MPIData","page":"RMPI","title":"Rimu.RMPI.MPIData","text":"MPIData(data; kwargs...)\n\nWrapper used for signaling that this data is part of a distributed data structure and communication should happen with MPI. MPIData can generally be used where an AbstractDVec would be used otherwise. Unlike AbstractDVecs, MPIData does not support indexing, or iteration over keys, values, and pairs.\n\nKeyword arguments:\n\nsetup = mpi_point_to_point - controls the communication stratgy\nmpi_one_sided uses one-sided communication with remote memory access (RMA), sets MPIOneSided strategy.\nmpi_point_to_point uses MPIPointToPoint strategy.\nmpi_all_to_all uses MPIAllToAll strategy.\nmpi_no_exchange sets MPINoWalkerExchange strategy. Experimental. Use with caution!\ncomm = mpi_comm()\nroot = mpi_root\nThe rest of the keyword arguments are passed to setup.\n\n\n\n\n\n","category":"type"},{"location":"RMPI.html#Setup-functions","page":"RMPI","title":"Setup functions","text":"","category":"section"},{"location":"RMPI.html","page":"RMPI","title":"RMPI","text":"The following distribute strategies are available. The functions are unexported.","category":"page"},{"location":"RMPI.html","page":"RMPI","title":"RMPI","text":"Rimu.RMPI.mpi_point_to_point\nRimu.RMPI.mpi_one_sided\nRimu.RMPI.mpi_all_to_all\nRimu.RMPI.mpi_no_exchange","category":"page"},{"location":"RMPI.html#Rimu.RMPI.mpi_point_to_point","page":"RMPI","title":"Rimu.RMPI.mpi_point_to_point","text":"mpi_point_to_point(data, comm = mpi_comm(), root = mpi_root)\n\nDeclare data as mpi-distributed and set communication strategy to point-to-point.\n\nSets up the MPIData structure with MPIPointToPoint strategy.\n\n\n\n\n\n","category":"function"},{"location":"RMPI.html#Rimu.RMPI.mpi_one_sided","page":"RMPI","title":"Rimu.RMPI.mpi_one_sided","text":"mpi_one_sided(data, comm = mpi_comm(), root = mpi_root; capacity)\n\nDeclare data as mpi-distributed and set communication strategy to one-sided with remote memory access (RMA). capacity sets the capacity of the RMA windows.\n\nSets up the MPIData structure with MPIOneSided strategy.\n\n\n\n\n\n","category":"function"},{"location":"RMPI.html#Rimu.RMPI.mpi_all_to_all","page":"RMPI","title":"Rimu.RMPI.mpi_all_to_all","text":"mpi_all_to_all(data, comm = mpi_comm(), root = mpi_root)\n\nDeclare data as mpi-distributed and set communication strategy to all-to-all.\n\nSets up the MPIData structure with MPIAllToAll strategy.\n\n\n\n\n\n","category":"function"},{"location":"RMPI.html#Rimu.RMPI.mpi_no_exchange","page":"RMPI","title":"Rimu.RMPI.mpi_no_exchange","text":"mpi_no_exchange(data, comm = mpi_comm(), root = mpi_root)\n\nDeclare data as mpi-distributed and set communication strategy to MPINoWalkerExchange. Sets up the MPIData structure with MPINoWalkerExchange strategy.\n\n\n\n\n\n","category":"function"},{"location":"RMPI.html#Strategies","page":"RMPI","title":"Strategies","text":"","category":"section"},{"location":"RMPI.html","page":"RMPI","title":"RMPI","text":"Rimu.RMPI.MPIPointToPoint\nRimu.RMPI.MPIOneSided\nRimu.RMPI.MPIAllToAll\nRimu.RMPI.MPINoWalkerExchange","category":"page"},{"location":"RMPI.html#Rimu.RMPI.MPIPointToPoint","page":"RMPI","title":"Rimu.RMPI.MPIPointToPoint","text":"MPIPointToPoint{N,A}\n\nPoint-to-point communication strategy. Uses circular communication using MPI.Send and MPI.Recv!.\n\nConstructor\n\nMPIPointToPoint(::Type{P}, np, id, comm): Construct an instance with pair type P on np processes with current rank id.\n\n\n\n\n\n","category":"type"},{"location":"RMPI.html#Rimu.RMPI.MPIOneSided","page":"RMPI","title":"Rimu.RMPI.MPIOneSided","text":"MPIOneSided(nprocs, myrank, comm, ::Type{T}, capacity)\n\nCommunication buffer for use with MPI one-sided communication (remote memory access). Up to capacity elements of type T can be exchanged between MPI ranks via put. It is important that isbitstype(T) == true. Objects of type MPIOneSided have to be freed manually with a (blocking) call to free().\n\n\n\n\n\n","category":"type"},{"location":"RMPI.html#Rimu.RMPI.MPIAllToAll","page":"RMPI","title":"Rimu.RMPI.MPIAllToAll","text":" MPIAllToAll\n\nAll-to-all communication strategy. The communication works in two steps: first MPI.Alltoall! is used to communicate the number of walkers each rank wants to send to other ranks, then MPI.Alltoallv! is used to send the walkers around.\n\nConstructor\n\nMPIAllToAll(Type{P}, np, id, comm): Construct an instance with pair type P on np processes with current rank id.\n\n\n\n\n\n","category":"type"},{"location":"RMPI.html#Rimu.RMPI.MPINoWalkerExchange","page":"RMPI","title":"Rimu.RMPI.MPINoWalkerExchange","text":"MPINoWalkerExchange(nprocs, my_rank, comm)\n\nStrategy for not exchanging walkers between ranks. Consequently there will be no cross-rank annihilations.\n\n\n\n\n\n","category":"type"},{"location":"RMPI.html#MPI-convenience-functions","page":"RMPI","title":"MPI convenience functions","text":"","category":"section"},{"location":"RMPI.html","page":"RMPI","title":"RMPI","text":"Modules = [Rimu.RMPI]\nPages = [\"helpers.jl\"]\nPrivate = true\nPublic = true","category":"page"},{"location":"RMPI.html#Rimu.RMPI.mpi_root","page":"RMPI","title":"Rimu.RMPI.mpi_root","text":"Default MPI root for RMPI.\n\n\n\n\n\n","category":"constant"},{"location":"RMPI.html#Rimu.DictVectors.mpi_comm-Tuple{}","page":"RMPI","title":"Rimu.DictVectors.mpi_comm","text":"Default MPI communicator for RMPI.\n\n\n\n\n\n","category":"method"},{"location":"RMPI.html#Rimu.DictVectors.mpi_rank","page":"RMPI","title":"Rimu.DictVectors.mpi_rank","text":"mpi_rank(comm = mpi_comm())\n\nReturn the current MPI rank.\n\n\n\n\n\n","category":"function"},{"location":"RMPI.html#Rimu.DictVectors.mpi_size","page":"RMPI","title":"Rimu.DictVectors.mpi_size","text":"mpi_size(comm = mpi_comm())\n\nSize of MPI communicator.\n\n\n\n\n\n","category":"function"},{"location":"RMPI.html#Rimu.RMPI.is_mpi_root","page":"RMPI","title":"Rimu.RMPI.is_mpi_root","text":"is_mpi_root(root = mpi_root)\n\nReturns true if called from the root rank\n\n\n\n\n\n","category":"function"},{"location":"RMPI.html#Rimu.RMPI.mpi_allprintln-Tuple","page":"RMPI","title":"Rimu.RMPI.mpi_allprintln","text":"mpi_allprintln(args...)\n\nPrint a message to stdout from each rank separately, in order. MPI synchronizing.\n\n\n\n\n\n","category":"method"},{"location":"RMPI.html#Rimu.RMPI.mpi_barrier","page":"RMPI","title":"Rimu.RMPI.mpi_barrier","text":"mpi_barrier(comm = mpi_comm())\n\nThe MPI barrier with optional argument. MPI syncronizing.\n\n\n\n\n\n","category":"function"},{"location":"RMPI.html#Rimu.RMPI.mpi_combine_walkers!-Tuple{Rimu.RMPI.MPIData, AbstractDVec}","page":"RMPI","title":"Rimu.RMPI.mpi_combine_walkers!","text":"mpi_combine_walkers!(target, source, [strategy])\n\nDistribute the entries of source to the target data structure such that all entries in the target are on the process with the correct mpi rank as controlled by targetrank(). MPI syncronizing.\n\nNote: the storage of the source is communicated rather than the source itself.\n\n\n\n\n\n","category":"method"},{"location":"RMPI.html#Rimu.RMPI.mpi_seed!","page":"RMPI","title":"Rimu.RMPI.mpi_seed!","text":"mpi_seed!(seed = rand(Random.RandomDevice(), UInt))\n\nRe-seed the random number generators in an MPI-safe way. If seed is provided, the random numbers from rand will follow a deterministic sequence.\n\nIndependence of the random number generators on different MPI ranks is achieved by adding hash(mpi_rank()) to seed.\n\n\n\n\n\n","category":"function"},{"location":"RMPI.html#Rimu.RMPI.next_mpiID","page":"RMPI","title":"Rimu.RMPI.next_mpiID","text":"next_mpiID()\n\nProduce a new ID number for MPI distributed objects. Uses an internal counter.\n\n\n\n\n\n","category":"function"},{"location":"RMPI.html#Rimu.RMPI.targetrank-Tuple{Union{Integer, AbstractFockAddress}, Any}","page":"RMPI","title":"Rimu.RMPI.targetrank","text":"targetrank(key, np)\n\nCompute the rank where the key belongs.\n\n\n\n\n\n","category":"method"},{"location":"RMPI.html#Rimu.RMPI.@mpi_root-Tuple","page":"RMPI","title":"Rimu.RMPI.@mpi_root","text":"@mpi_root expr\n\nEvaluate expression only on the root rank. Extra care needs to be taken as expr must not contain any code that involves syncronising MPI operations, i.e. actions that would require syncronous action of all MPI ranks.\n\nExample:\n\nwn = walkernumber(dv)   # an MPI syncronising function call that gathers\n                        # information from all MPI ranks\n@mpi_root @info \"The current walker number is\" wn # print info message on root only\n\n\n\n\n\n","category":"macro"},{"location":"RMPI.html#Index","page":"RMPI","title":"Index","text":"","category":"section"},{"location":"RMPI.html","page":"RMPI","title":"RMPI","text":"Pages   = [\"RMPI.md\"]","category":"page"},{"location":"testing.html#Code-testing","page":"Code testing","title":"Code testing","text":"","category":"section"},{"location":"testing.html","page":"Code testing","title":"Code testing","text":"The script runtest.jl in the test/ folder contains tests of the code. To run the test simply run the script from the Julia REPL or run","category":"page"},{"location":"testing.html","page":"Code testing","title":"Code testing","text":"Rimu$ julia test/runtest.jl","category":"page"},{"location":"testing.html","page":"Code testing","title":"Code testing","text":"from the command line.","category":"page"},{"location":"testing.html","page":"Code testing","title":"Code testing","text":"More tests should be added over time to test core functionality of the code. To add new tests, directly edit the file runtest.jl.","category":"page"},{"location":"testing.html#Automated-testing-with-GitHub-Actions","page":"Code testing","title":"Automated testing with GitHub Actions","text":"","category":"section"},{"location":"testing.html","page":"Code testing","title":"Code testing","text":"GitHub Actions are set up to run the test script automatically on the GitHub cloud server every time a new commit to the master branch is pushed to the server. The setup for this to happen is configured in the file actions.yml in the Rimu/.github/workflows folder.","category":"page"},{"location":"exactdiagonalization.html#Exact-Diagonalization","page":"Exact Diagonalization","title":"Exact Diagonalization","text":"","category":"section"},{"location":"exactdiagonalization.html","page":"Exact Diagonalization","title":"Exact Diagonalization","text":"The main functionality of Rimu for exact diagonalization is contained in the module ExactDiagonalization.","category":"page"},{"location":"exactdiagonalization.html","page":"Exact Diagonalization","title":"Exact Diagonalization","text":"ExactDiagonalization","category":"page"},{"location":"exactdiagonalization.html#Rimu.ExactDiagonalization","page":"Exact Diagonalization","title":"Rimu.ExactDiagonalization","text":"The module Rimu.ExactDiagonalization provides a framework for exact diagonalization of quantum many-body systems defined by an AbstractHamiltonian type.\n\nThe main usage is through defining an ExactDiagonalizationProblem and solving it with the solve function. The module provides a unified interface for accessing different solver algorithms, which make use of solvers provided by external packages.\n\nExports\n\nExactDiagonalizationProblem\nBasisSetRepresentation\nbuild_basis\nKrylovKitSolver\nLinearAlgebraSolver\nArpackSolver\nLOBPCGSolver\n\n\n\n\n\n","category":"module"},{"location":"exactdiagonalization.html#ExactDiagonalizationProblem","page":"Exact Diagonalization","title":"ExactDiagonalizationProblem","text":"","category":"section"},{"location":"exactdiagonalization.html","page":"Exact Diagonalization","title":"Exact Diagonalization","text":"ExactDiagonalizationProblem\nsolve(::ExactDiagonalizationProblem)\ninit(::ExactDiagonalizationProblem)","category":"page"},{"location":"exactdiagonalization.html#Rimu.ExactDiagonalization.ExactDiagonalizationProblem","page":"Exact Diagonalization","title":"Rimu.ExactDiagonalization.ExactDiagonalizationProblem","text":"ExactDiagonalizationProblem(hamiltonian::AbstractHamiltonian, [v0]; kwargs...)\n\nDefines an exact diagonalization problem with an AbstractHamiltonian hamiltonian. Optionally, a starting vector of type AbstractDVec, or a single address or a collection of addresses can be passed as v0.\n\nExactDiagonalizationProblems can be solved with solve.\n\nKeyword arguments\n\nalgorithm=LinearAlgebraSolver(): The algorithm to use for solving the problem. The   algorithm can also be specified as the second positional argument in the init   function.\nOptional keyword arguments will be passed on to the init and solve functions.\n\nAlgorithms\n\nLinearAlgebraSolver(): An algorithm for solving the problem using the   dense-matrix eigensolver from the LinearAlgebra standard library (eventually using   LAPACK). Only suitable for small matrices.\nKrylovKitSolver(matrix_free=true): An algorithm for finding a few eigenvalues   and vectors. With matrix_free=true the problem is solved without instatiating a   matrix. This is suitable for large dimensions. With matrix_free=false the problem is   solved after instantiating a sparse matrix. This is faster if sufficient memory is   available. Requires using KrylovKit.\nArpackSolver(): An algorithm for solving the problem after instantiating a   sparse matrix and using the Arpack Fortran library. Requires using Arpack.\nLOBPCGSolver(): An algorithm for solving the problem after instantiating a   sparse matrix using the LOBPCG method. Requires using IterativeSolvers.\n\nKeyword arguments for matrix-based algorithms (also accepted by init)\n\nSee BasisSetRepresentation for more information.\n\nsizelim: The maximum size of the basis set representation. The default is 10^6 for   sparse matrices and 10^5 for dense matrices.\ncutoff: A cutoff value for the basis set representation.\nfilter: A filter function for the basis set representation.\nnnzs = 0: The number of non-zero elements in the basis set representation. Setting a   non-zero value can speed up the computation.\ncol_hint = 0: A hint for the number of columns in the basis set representation.\nsort = false: Whether to sort the basis set representation.\n\nKeyword arguments for iterative algorithms (also accepted by solve)\n\nverbose = false: Whether to print additional information.\nabstol = nothing: The absolute tolerance for the solver. If nothing, the solver   chooses a default value.\nhowmany = 1: The minimum number of eigenvalues to compute.\nwhich = :SR: Whether to compute the largest or smallest eigenvalues.\nmaxiters = nothing: The maximum number of iterations for the solver. If nothing, the   solver chooses a default value.\n\nSolving an ExactDiagonalizationProblem\n\nThe solve function can be called directly on an ExactDiagonalizationProblem to solve it. Alternatively, the init function can be used to initialize a solver, which can then be solved with solve. The solve function returns a result type with the eigenvalues, eigenvectors, and convergence information.\n\nResult type\n\nThe result type for the solve function is determined by the algorithm used. It has the following fields:\n\nvalues::Vector: The eigenvalues.\nvectors::Vector{<:AbstractDVec}: The eigenvectors.\nsuccess::Bool: A boolean flag indicating whether the solver was successful.\ninfo: Convergence information.\nalgorithm: The algorithm used for the computation.\nproblem: The ExactDiagonalizationProblem that was solved.\nAdditional fields may be present depending on the algorithm used.\n\nIterating the result type will yield the eigenvalues, eigenvectors, and a boolean flag success in that order.\n\nExamples\n\njulia> p = ExactDiagonalizationProblem(HubbardReal1D(BoseFS(1,1,1)))\nExactDiagonalizationProblem(\n  HubbardReal1D(fs\"|1 1 1⟩\"; u=1.0, t=1.0),\n  nothing;\n  NamedTuple()...\n)\n\njulia> result = solve(p) # convert to dense matrix and solve with LinearAlgebra.eigen\nEDResult for algorithm LinearAlgebraSolver() with 10 eigenvalue(s),\n  values = [-5.09593, -1.51882, -1.51882, 1.55611, 1.6093, 1.6093, 4.0, 4.53982, 4.90952, 4.90952],\n  and vectors of length 10.\n  Convergence info: \"Dense matrix eigensolver solution from `LinearAlgebra.eigen`\", with howmany = 10 eigenvalues requested.\n  success = true.\n\njulia> using KrylovKit # an external package has to be installed and loaded\n\njulia> s = init(p; algorithm = KrylovKitSolver(true)) # solve without building a matrix\nKrylovKitDirectEDSolver\n with algorithm KrylovKitSolver(matrix_free = true,) for hamiltonian = HubbardReal1D(fs\"|1 1 1⟩\"; u=1.0, t=1.0),\n  v0 = 1-element PDVec: style = IsDeterministic{Float64}()\n  fs\"|1 1 1⟩\" => 1.0,\n  kwargs = NamedTuple()\n)\n\njulia> values, vectors, success = solve(s);\n\njulia> result.values[1] ≈ values[1]\ntrue\n\nSee also solve(::ExactDiagonalizationProblem), init(::ExactDiagonalizationProblem), KrylovKitSolver, ArpackSolver, LinearAlgebraSolver.\n\nnote: Note\nUsing the KrylovKitSolver() algorithms requires the KrylovKit.jl package. The package can be loaded with using KrylovKit. Using the ArpackSolver() algorithm requires the Arpack.jl package. The package can be loaded with using Arpack. Using the LOBPCGSolver() algorithm requires the IterativeSolvers.jl package. The package can be loaded with using IterativeSolvers.\n\n\n\n\n\n","category":"type"},{"location":"exactdiagonalization.html#CommonSolve.solve-Tuple{ExactDiagonalizationProblem}","page":"Exact Diagonalization","title":"CommonSolve.solve","text":"solve(p::ExactDiagonalizationProblem, [algorithm]; kwargs...)\n\nSolve an ExactDiagonalizationProblem p directly. Optionally specify an algorithm. Returns a result type with the eigenvalues, eigenvectors, and convergence information.\n\nFor a description of the keyword arguments, see the documentation for ExactDiagonalizationProblem.\n\nSee also solve(::ProjectorMonteCarloProblem).\n\n\n\n\n\n","category":"method"},{"location":"exactdiagonalization.html#CommonSolve.init-Tuple{ExactDiagonalizationProblem}","page":"Exact Diagonalization","title":"CommonSolve.init","text":"init(p::ExactDiagonalizationProblem, [algorithm]; kwargs...)\n\nInitialize a solver for an ExactDiagonalizationProblem p with an optional algorithm. Returns a solver instance that can be solved with solve.\n\nFor a description of the keyword arguments, see the documentation for ExactDiagonalizationProblem.\n\n\n\n\n\n","category":"method"},{"location":"exactdiagonalization.html#Solver-algorithms","page":"Exact Diagonalization","title":"Solver algorithms","text":"","category":"section"},{"location":"exactdiagonalization.html","page":"Exact Diagonalization","title":"Exact Diagonalization","text":"KrylovKitSolver\nLinearAlgebraSolver\nArpackSolver\nLOBPCGSolver","category":"page"},{"location":"exactdiagonalization.html#Rimu.ExactDiagonalization.KrylovKitSolver","page":"Exact Diagonalization","title":"Rimu.ExactDiagonalization.KrylovKitSolver","text":"KrylovKitSolver(matrix_free::Bool; kwargs...)\nKrylovKitSolver(; matrix_free = false, kwargs...)\n\nAlgorithm for solving a large ExactDiagonalizationProblem to find a few eigenvalues and vectors using the KrylovKit.jl package. The Lanczos method is used for hermitian matrices, and the Arnoldi method is used for non-hermitian matrices.\n\nArguments\n\nmatrix_free = false: Whether to use a matrix-free algorithm. If false, a sparse matrix   will be instantiated. This is typically faster and recommended for small matrices,   but requires more memory. If true, the matrix is not instantiated, which is useful for   large matrices that would not fit into memory. The calculation will parallelise using   threading and MPI if available by making use of PDVec.\nkwargs: Additional keyword arguments are passed on to the function   KrylovKit.eigsolve().\n\nSee also ExactDiagonalizationProblem, solve.\n\nnote: Note\nRequires the KrylovKit.jl package to be loaded with using KrylovKit.\n\n\n\n\n\n","category":"type"},{"location":"exactdiagonalization.html#Rimu.ExactDiagonalization.LinearAlgebraSolver","page":"Exact Diagonalization","title":"Rimu.ExactDiagonalization.LinearAlgebraSolver","text":"LinearAlgebraSolver(; kwargs...)\n\nAlgorithm for solving an ExactDiagonalizationProblem using the dense-matrix eigensolver from the LinearAlgebra standard library. This is only suitable for small matrices.\n\nThe kwargs are passed on to function LinearAlgebra.eigen.\n\nKeyword arguments\n\npermute = true: Whether to permute the matrix before diagonalization.\nscale = true: Whether to scale the matrix before diagonalization.\nsortby: The sorting order for the eigenvalues.\n\nSee also ExactDiagonalizationProblem, solve.\n\n\n\n\n\n","category":"type"},{"location":"exactdiagonalization.html#Rimu.ExactDiagonalization.ArpackSolver","page":"Exact Diagonalization","title":"Rimu.ExactDiagonalization.ArpackSolver","text":"ArpackSolver(; kwargs...)\n\nAlgorithm for solving an ExactDiagonalizationProblem after instantiating a sparse matrix. It uses the Lanzcos method for hermitian problems, and the Arnoldi method for non-hermitian problems, using the Arpack Fortran library. This is faster than KrylovKitSolver(; matrix_free=true), but it requires more memory and will only be useful if the matrix fits into memory.\n\nThe kwargs are passed on to the function Arpack.eigs().\n\nSee also ExactDiagonalizationProblem, solve.\n\nnote: Note\nRequires the Arpack.jl package to be loaded with using Arpack.\n\n\n\n\n\n","category":"type"},{"location":"exactdiagonalization.html#Rimu.ExactDiagonalization.LOBPCGSolver","page":"Exact Diagonalization","title":"Rimu.ExactDiagonalization.LOBPCGSolver","text":"LOBPCGSolver(; kwargs...)\n\nThe Locally Optimal Block Preconditioned Conjugate Gradient Method (LOBPCG). Algorithm for solving an ExactDiagonalizationProblem after instantiating a sparse matrix.\n\nLOBPCG is not suitable for non-hermitian eigenvalue problems.\n\nThe kwargs are passed on to the function IterativeSolvers.lobpcg().\n\nSee also ExactDiagonalizationProblem, solve.\n\nnote: Note\nRequires the IterativeSolvers.jl package to be loaded with using IterativeSolvers.\n\n\n\n\n\n","category":"type"},{"location":"exactdiagonalization.html#Converting-a-Hamiltonian-in-to-a-matrix","page":"Exact Diagonalization","title":"Converting a Hamiltonian in to a matrix","text":"","category":"section"},{"location":"exactdiagonalization.html","page":"Exact Diagonalization","title":"Exact Diagonalization","text":"BasisSetRepresentation\nbuild_basis\nMatrix\nsparse","category":"page"},{"location":"exactdiagonalization.html#Rimu.ExactDiagonalization.BasisSetRepresentation","page":"Exact Diagonalization","title":"Rimu.ExactDiagonalization.BasisSetRepresentation","text":"BasisSetRepresentation(\n    hamiltonian::AbstractHamiltonian, addr=starting_address(hamiltonian);\n    sizelim=10^6, nnzs, cutoff, filter, sort=false, kwargs...\n)\nBasisSetRepresentation(hamiltonian::AbstractHamiltonian, addresses::AbstractVector; kwargs...)\n\nEagerly construct the basis set representation of the operator hamiltonian with all addresses reachable from addr. Instead of a single address, a vector of addresses can be passed.\n\nAn ArgumentError is thrown if dimension(hamiltonian) > sizelim in order to prevent memory overflow. Set sizelim = Inf in order to disable this behaviour.\n\nProviding the number nnzs of expected calculated matrix elements and col_hint for the estimated number of nonzero off-diagonal matrix elements in each matrix column may improve performance.\n\nProviding an energy cutoff will skip the columns and rows with diagonal elements greater than cutoff. Alternatively, an arbitrary filter function can be used instead. Addresses passed as arguments are not filtered. To generate the matrix truncated to the subspace spanned by the addresses, use filter = Returns(false).\n\nSetting sort to true will sort the matrix rows and columns. This is useful when the order of the columns matters, e.g. when comparing matrices. Any additional keyword arguments are passed on to Base.sortperm.\n\nFields\n\nsparse_matrix: sparse matrix representing hamiltonian in the basis basis\nbasis: vector of addresses\nhamiltonian: the Hamiltonian hamiltonian\n\nExample\n\njulia> hamiltonian = HubbardReal1D(BoseFS(1,0,0));\n\njulia> bsr = BasisSetRepresentation(hamiltonian)\nBasisSetRepresentation(HubbardReal1D(fs\"|1 0 0⟩\"; u=1.0, t=1.0)) with dimension 3 and 9 stored entries:3×3 SparseArrays.SparseMatrixCSC{Float64, Int64} with 9 stored entries:\n  0.0  -1.0  -1.0\n -1.0   0.0  -1.0\n -1.0  -1.0   0.0\n\njulia> BasisSetRepresentation(hamiltonian, bsr.basis[1:2]; filter = Returns(false)) # passing addresses and truncating\nBasisSetRepresentation(HubbardReal1D(fs\"|1 0 0⟩\"; u=1.0, t=1.0)) with dimension 2 and 4 stored entries:2×2 SparseArrays.SparseMatrixCSC{Float64, Int64} with 4 stored entries:\n  0.0  -1.0\n -1.0   0.0\n\njulia> using LinearAlgebra; round.(eigvals(Matrix(bsr)); digits = 4) # eigenvalues\n3-element Vector{Float64}:\n -2.0\n  1.0\n  1.0\n\njulia> ev = eigvecs(Matrix(bsr))[:,1]; ev = ev .* sign(ev[1]) # ground state eigenvector\n3-element Vector{Float64}:\n 0.5773502691896257\n 0.5773502691896255\n 0.5773502691896257\n\njulia> dv = DVec(zip(bsr.basis, ev)) # ground state as DVec\nDVec{BoseFS{1, 3, BitString{3, 1, UInt8}},Float64} with 3 entries, style = IsDeterministic{Float64}()\n  fs\"|0 0 1⟩\" => 0.57735\n  fs\"|0 1 0⟩\" => 0.57735\n  fs\"|1 0 0⟩\" => 0.57735\n\nHas methods for dimension, sparse, Matrix, starting_address.\n\nPart of the AbstractHamiltonian interface. See also build_basis.\n\n\n\n\n\n","category":"type"},{"location":"exactdiagonalization.html#Rimu.ExactDiagonalization.build_basis","page":"Exact Diagonalization","title":"Rimu.ExactDiagonalization.build_basis","text":"build_basis(\n    ham, address=starting_address(ham);\n    cutoff, filter, sizelim, sort=false, kwargs...\n) -> basis\nbuild_basis(ham, addresses::AbstractVector; kwargs...)\n\nGet all basis element of a linear operator ham that are reachable (via non-zero matrix elements) from the address address, returned as a vector. Instead of a single address, a vector of addresses can be passed. Does not return the matrix, for that purpose use BasisSetRepresentation.\n\nProviding an energy cutoff will skip addresses with diagonal elements greater than cutoff. Alternatively, an arbitrary filter function can be used instead. Addresses passed as arguments are not filtered. A maximum basis size sizelim can be set which will throw an error if the expected dimension of ham is larger than sizelim. This may be useful when memory may be a concern. These options are disabled by default.\n\nSetting sort to true will sort the basis. Any additional keyword arguments are passed on to Base.sort!.\n\n\n\n\n\n","category":"function"},{"location":"exactdiagonalization.html#Base.Matrix","page":"Exact Diagonalization","title":"Base.Matrix","text":"Matrix(\n    hamiltonian::AbstractHamiltonian, addr=starting_address(hamiltonian);\n    sizelim=10^4, kwargs...\n)\nMatrix(bsr::BasisSetRepresentation)\n\nReturn a dense matrix representation of hamiltonian or bsr. kwargs are passed to BasisSetRepresentation.\n\nSee BasisSetRepresentation.\n\n\n\n\n\n","category":"type"},{"location":"exactdiagonalization.html#SparseArrays.sparse","page":"Exact Diagonalization","title":"SparseArrays.sparse","text":"sparse(hamiltonian::AbstractHamiltonian, addr=starting_address(hamiltonian); kwargs...)\nsparse(bsr::BasisSetRepresentation)\n\nReturn a sparse matrix representation of hamiltonian or bsr. kwargs are passed to BasisSetRepresentation.\n\nSee BasisSetRepresentation.\n\n\n\n\n\n","category":"function"},{"location":"exactdiagonalization.html#Deprecated","page":"Exact Diagonalization","title":"Deprecated","text":"","category":"section"},{"location":"exactdiagonalization.html","page":"Exact Diagonalization","title":"Exact Diagonalization","text":"BasisSetRep","category":"page"},{"location":"exactdiagonalization.html#Rimu.ExactDiagonalization.BasisSetRep","page":"Exact Diagonalization","title":"Rimu.ExactDiagonalization.BasisSetRep","text":"BasisSetRep(args...; kwargs...)\n\nBasisSetRep is deprecated. Use BasisSetRepresentation instead.\n\n\n\n\n\n","category":"function"},{"location":"randomnumbers.html#Random-numbers-in-Rimu","page":"Random numbers","title":"Random numbers in Rimu","text":"","category":"section"},{"location":"randomnumbers.html","page":"Random numbers","title":"Random numbers","text":"Rimu uses Julia's built-in random number generator, which currently defaults to Xoshiro256++.","category":"page"},{"location":"randomnumbers.html#Reproducibility","page":"Random numbers","title":"Reproducibility","text":"","category":"section"},{"location":"randomnumbers.html","page":"Random numbers","title":"Random numbers","text":"If you want FCIQMC runs to be reproducible, make sure to seed the RNG with Random.seed!.","category":"page"},{"location":"randomnumbers.html","page":"Random numbers","title":"Random numbers","text":"MPI-distributed runs can also be made reproducible by seeding the RNG with Rimu.RMPI.mpi_seed!.","category":"page"},{"location":"documentation.html#Documentation-generation","page":"Documentation generation","title":"Documentation generation","text":"","category":"section"},{"location":"documentation.html","page":"Documentation generation","title":"Documentation generation","text":"We are using Documenter.jl to generate the documentation web site based on markdown files stored in docs/src. Please help keeping the documentation up-to-date by editing the markdown files! For instructions on how to write appropriate documentation please refer to the relevant chapter in the Julia documentation and the Documenter.jl documentation.","category":"page"},{"location":"documentation.html#Generating-the-documentation-web-site","page":"Documentation generation","title":"Generating the documentation web site","text":"","category":"section"},{"location":"documentation.html","page":"Documentation generation","title":"Documentation generation","text":"The documentation pages can be generated by running the build script by typing","category":"page"},{"location":"documentation.html","page":"Documentation generation","title":"Documentation generation","text":"Rimu$ julia --project=docs docs/make.jl","category":"page"},{"location":"documentation.html","page":"Documentation generation","title":"Documentation generation","text":"on the shell prompt from the Rimu/ folder. A complete image of the static documentation web site will be generated in the folder docs/build/. It can be viewed locally by pointing a web browser to file docs/build/index.html, or by deploying it to the GitHub pages web server.","category":"page"},{"location":"documentation.html#Automatic-documentation-generation-and-deployment","page":"Documentation generation","title":"Automatic documentation generation and deployment","text":"","category":"section"},{"location":"documentation.html","page":"Documentation generation","title":"Documentation generation","text":"Our documentation is hosted on GitHub pages. The documentation web site can be built and deployed automatically with GitHub Actions. This needs to be set up with an appropriate script in the file .github/workflows/docs.yml, where triggers for this to happen can be defined. In the current set up, a new documentation web site is generated and deployed whenever someone pushes to the develop branch on the GitHub server. The updated documentation can then be accessed here.","category":"page"},{"location":"documentation.html","page":"Documentation generation","title":"Documentation generation","text":"Previews for pull-requests can be accessed by replacing 101 in the following link with the PR number: https://joachimbrand.github.io/Rimu.jl/previews/PR101/","category":"page"},{"location":"documentation.html#Example-scripts","page":"Documentation generation","title":"Example scripts","text":"","category":"section"},{"location":"documentation.html","page":"Documentation generation","title":"Documentation generation","text":"Examples should be added to the scripts folder, in the form of .jl files suitable for  parsing by Literate. The process of generating  documentation is automated in the docs/make.jl file and assumes that the following line is  at (or near) the top of the script:","category":"page"},{"location":"documentation.html","page":"Documentation generation","title":"Documentation generation","text":"# # Example N: Title","category":"page"},{"location":"documentation.html","page":"Documentation generation","title":"Documentation generation","text":"where the number N and Title will be extracted automatically.","category":"page"},{"location":"documentation.html","page":"Documentation generation","title":"Documentation generation","text":"Tests for the results and output of specific scripts should be added at the end of each example. The code to run the test should be hidden from the final generated document by appending \"#hide\" to each line of testing code. For example, ","category":"page"},{"location":"documentation.html","page":"Documentation generation","title":"Documentation generation","text":"using Test                          #hide\n@test isfile(\"result.out\")          #hide\n@test result == expected_result     #hide","category":"page"},{"location":"addresses.html#Module-BitStringAddresses","page":"BitString addresses","title":"Module BitStringAddresses","text":"","category":"section"},{"location":"addresses.html","page":"BitString addresses","title":"BitString addresses","text":"This module contains the implementations of BitString and various Fock addresses. The addresses serve as a basis for a Hamiltonian.","category":"page"},{"location":"addresses.html","page":"BitString addresses","title":"BitString addresses","text":"While there are not restrictions on the type of address a Hamiltonian uses, Rimu provides implementations for Bosonic, Fermionic, and mixed Fock States.","category":"page"},{"location":"addresses.html","page":"BitString addresses","title":"BitString addresses","text":"When implementing a new address type, care must be taken to make them space-efficient and stack-allocated - avoid using (heap-allocated) arrays to represent your addresses at all costs!","category":"page"},{"location":"addresses.html#Fock-addresses","page":"BitString addresses","title":"Fock addresses","text":"","category":"section"},{"location":"addresses.html","page":"BitString addresses","title":"BitString addresses","text":"Rimu provides a variety of address implementations that should make it straightforward to implement efficient Hamiltonians. Examples are:","category":"page"},{"location":"addresses.html","page":"BitString addresses","title":"BitString addresses","text":"BoseFS Single-component bosonic Fock state with fixed particle and mode number.\nFermiFS Single-component fermionic Fock state with fixed particle and mode number.\nCompositeFS Multi-component Fock state composed of the above types.\nOccupationNumberFS Single-component bosonic Fock state with a fixed number of modes. The number of particles is not part of the type and can be changed by operators.","category":"page"},{"location":"addresses.html#Fock-address-API","page":"BitString addresses","title":"Fock address API","text":"","category":"section"},{"location":"addresses.html","page":"BitString addresses","title":"BitString addresses","text":"Modules = [BitStringAddresses]\nPages = [\"fockaddress.jl\",\"bosefs.jl\",\"fermifs.jl\",\"multicomponent.jl\",\"occupationnumberfs.jl\"]\nPrivate = false","category":"page"},{"location":"addresses.html#Rimu.BitStringAddresses.AbstractFockAddress","page":"BitString addresses","title":"Rimu.BitStringAddresses.AbstractFockAddress","text":"AbstractFockAddress{N,M}\n\nAbstract type representing a Fock state with N particles and M modes.\n\nSee also SingleComponentFockAddress, CompositeFS, BoseFS, FermiFS.\n\n\n\n\n\n","category":"type"},{"location":"addresses.html#Rimu.BitStringAddresses.BoseFSIndex","page":"BitString addresses","title":"Rimu.BitStringAddresses.BoseFSIndex","text":"BoseFSIndex\n\nStruct used for indexing and performing excitations on a BoseFS.\n\nFields:\n\noccnum: the occupation number.\nmode: the index of the mode.\noffset: the position of the mode in the address. This is the bit offset of the mode when\n\nthe address is represented by a bitstring, and the position in the list when it is  represented by SortedParticleList.\n\n\n\n\n\n","category":"type"},{"location":"addresses.html#Rimu.BitStringAddresses.FermiFSIndex","page":"BitString addresses","title":"Rimu.BitStringAddresses.FermiFSIndex","text":"FermiFSIndex\n\nStruct used for indexing and performing excitations on a FermiFS.\n\nFields:\n\noccnum: the occupation number.\nmode: the index of the mode.\noffset: the position of the mode in the address. This is mode - 1 when the address is represented by a bitstring, and the position in the list when using SortedParticleList.\n\n\n\n\n\n","category":"type"},{"location":"addresses.html#Rimu.BitStringAddresses.OccupiedModeMap","page":"BitString addresses","title":"Rimu.BitStringAddresses.OccupiedModeMap","text":"OccupiedModeMap(addr) <: AbstractVector\n\nGet a map of occupied modes in address as an AbstractVector of indices compatible with excitation - BoseFSIndex or FermiFSIndex.\n\nOccupiedModeMap(addr)[i] contains the index for the i-th occupied mode. This is useful because repeatedly looking for occupied modes with find_occupied_mode can be time-consuming. OccupiedModeMap(addr) is an eager version of the iterator returned by occupied_modes. It is similar to onr but contains more information.\n\nExample\n\njulia> b = BoseFS(10, 0, 0, 0, 2, 0, 1)\nBoseFS{13,7}(10, 0, 0, 0, 2, 0, 1)\n\njulia> mb = OccupiedModeMap(b)\n3-element OccupiedModeMap{7, BoseFSIndex}:\n BoseFSIndex(occnum=10, mode=1, offset=0)\n BoseFSIndex(occnum=2, mode=5, offset=14)\n BoseFSIndex(occnum=1, mode=7, offset=18)\n\njulia> f = FermiFS(1,1,1,1,0,0,1,0,0)\nFermiFS{5,9}(1, 1, 1, 1, 0, 0, 1, 0, 0)\n\njulia> mf = OccupiedModeMap(f)\n5-element OccupiedModeMap{5, FermiFSIndex}:\n FermiFSIndex(occnum=1, mode=1, offset=0)\n FermiFSIndex(occnum=1, mode=2, offset=1)\n FermiFSIndex(occnum=1, mode=3, offset=2)\n FermiFSIndex(occnum=1, mode=4, offset=3)\n FermiFSIndex(occnum=1, mode=7, offset=6)\n\njulia> mf == collect(occupied_modes(f))\ntrue\n\njulia> dot(mf, mb)\n11\n\njulia> dot(mf, 1:20)\n17\n\nSee also dot, SingleComponentFockAddress.\n\n\n\n\n\n","category":"type"},{"location":"addresses.html#Rimu.BitStringAddresses.OccupiedPairsMap","page":"BitString addresses","title":"Rimu.BitStringAddresses.OccupiedPairsMap","text":"OccupiedPairsMap(addr::SingleComponentFockAddress) <: AbstractVector\n\nGet a map of all distinct pairs of indices in addr. Pairs involving multiply-occupied modes are counted once, (including self-pairing). This is useful for cases where identifying pairs of particles for eg. interactions is not well-defined or efficient to do on the fly. This is an eager iterator whose elements are a tuple of particle indices that can be given to excitation\n\nExample\n\njulia> addr = BoseFS(10, 0, 0, 0, 2, 0, 1)\nBoseFS{13,7}(10, 0, 0, 0, 2, 0, 1)\n\njulia> pairs = OccupiedPairsMap(addr)\n5-element OccupiedPairsMap{78, Tuple{BoseFSIndex, BoseFSIndex}}:\n (BoseFSIndex(occnum=10, mode=1, offset=0), BoseFSIndex(occnum=10, mode=1, offset=0))\n (BoseFSIndex(occnum=2, mode=5, offset=14), BoseFSIndex(occnum=2, mode=5, offset=14))\n (BoseFSIndex(occnum=2, mode=5, offset=14), BoseFSIndex(occnum=10, mode=1, offset=0))\n (BoseFSIndex(occnum=1, mode=7, offset=18), BoseFSIndex(occnum=10, mode=1, offset=0))\n (BoseFSIndex(occnum=1, mode=7, offset=18), BoseFSIndex(occnum=2, mode=5, offset=14))\n\njulia> excitation(addr, pairs[2], pairs[4])\n(BoseFS{13,7}(9, 0, 0, 0, 4, 0, 0), 10.954451150103322)\n\nSee also OccupiedModeMap.\n\n\n\n\n\n","category":"type"},{"location":"addresses.html#Rimu.BitStringAddresses.SingleComponentFockAddress","page":"BitString addresses","title":"Rimu.BitStringAddresses.SingleComponentFockAddress","text":"SingleComponentFockAddress{N,M} <: AbstractFockAddress{N,M}\n\nA type representing a single component Fock state with N particles and M modes.\n\nImplemented subtypes: BoseFS, FermiFS.\n\nSupported functionality\n\nfind_mode\nfind_occupied_mode\nnum_occupied_modes\noccupied_modes: Lazy iterator.\nOccupiedModeMap: AbstractVector with eager construction.\nexcitation: Create a new address.\nBoseFSIndex and FermiFSIndex for indexing.\n\nSee also CompositeFS, AbstractFockAddress.\n\n\n\n\n\n","category":"type"},{"location":"addresses.html#Rimu.BitStringAddresses.excitation","page":"BitString addresses","title":"Rimu.BitStringAddresses.excitation","text":"excitation(addr::SingleComponentFockAddress, creations::NTuple, destructions::NTuple)\n\nGenerate an excitation on address addr by applying creations and destructions, which are tuples of the appropriate address indices (i.e. BoseFSIndex for bosons, or FermiFSIndex for fermions).\n\na^_c_1 a^_c_2 ldots a_d_1 a_d_2 ldots mathrmaddrrangle to\nαmathrmnaddrrangle\n\nReturns the new address naddr and the factor α. The value of α is given by the square root of the product of mode occupations before destruction and after creation. If the excitation is illegal, returns an arbitrary address and the value 0.0.\n\nExample\n\njulia> f = FermiFS(1,1,0,0,1,1,1,1)\nFermiFS{6,8}(1, 1, 0, 0, 1, 1, 1, 1)\n\njulia> i, j, k, l = find_mode(f, (3,4,2,5))\n(FermiFSIndex(occnum=0, mode=3, offset=2), FermiFSIndex(occnum=0, mode=4, offset=3), FermiFSIndex(occnum=1, mode=2, offset=1), FermiFSIndex(occnum=1, mode=5, offset=4))\n\njulia> excitation(f, (i,j), (k,l))\n(FermiFS{6,8}(1, 0, 1, 1, 0, 1, 1, 1), -1.0)\n\nSee SingleComponentFockAddress.\n\n\n\n\n\n","category":"function"},{"location":"addresses.html#Rimu.BitStringAddresses.find_mode","page":"BitString addresses","title":"Rimu.BitStringAddresses.find_mode","text":"find_mode(::SingleComponentFockAddress, i)\n\nFind the i-th mode in address. Returns BoseFSIndex for BoseFS, and FermiFSIndex for FermiFS. Can work on a tuple of modes. Does not check bounds.\n\njulia> find_mode(BoseFS(1, 0, 2), 2)\nBoseFSIndex(occnum=0, mode=2, offset=2)\n\njulia> find_mode(FermiFS(1, 1, 1, 0), (2,3))\n(FermiFSIndex(occnum=1, mode=2, offset=1), FermiFSIndex(occnum=1, mode=3, offset=2))\n\nSee SingleComponentFockAddress.\n\n\n\n\n\n","category":"function"},{"location":"addresses.html#Rimu.BitStringAddresses.find_occupied_mode","page":"BitString addresses","title":"Rimu.BitStringAddresses.find_occupied_mode","text":"find_occupied_mode(::SingleComponentFockAddress, k)\nfind_occupied_mode(::BoseFS, k, [n])\n\nFind the k-th occupied mode in address (with at least n particles). Returns BoseFSIndex for BoseFS, and FermiFSIndex for FermiFS. When unsuccessful it returns a zero index.\n\nExample\n\njulia> find_occupied_mode(FermiFS(1, 1, 1, 0), 2)\nFermiFSIndex(occnum=1, mode=2, offset=1)\n\njulia> find_occupied_mode(BoseFS(1, 0, 2), 1)\nBoseFSIndex(occnum=1, mode=1, offset=0)\n\njulia> find_occupied_mode(BoseFS(1, 0, 2), 1, 2)\nBoseFSIndex(occnum=2, mode=3, offset=3)\n\nSee also occupied_modes, OccupiedModeMap, SingleComponentFockAddress.\n\n\n\n\n\n","category":"function"},{"location":"addresses.html#Rimu.BitStringAddresses.num_components-Tuple{AbstractFockAddress}","page":"BitString addresses","title":"Rimu.BitStringAddresses.num_components","text":"num_components(::Type{<:AbstractFockAddress})\nnum_components(::AbstractFockAddress)\n\nNumber of components in address.\n\n\n\n\n\n","category":"method"},{"location":"addresses.html#Rimu.BitStringAddresses.num_modes-Tuple{AbstractFockAddress}","page":"BitString addresses","title":"Rimu.BitStringAddresses.num_modes","text":"num_modes(::Type{<:AbstractFockAddress})\nnum_modes(::AbstractFockAddress)\n\nNumber of modes represented by address.\n\n\n\n\n\n","category":"method"},{"location":"addresses.html#Rimu.BitStringAddresses.num_occupied_modes","page":"BitString addresses","title":"Rimu.BitStringAddresses.num_occupied_modes","text":"num_occupied_modes(::SingleComponentFockAddress)\n\nGet the number of occupied modes in address. Equivalent to length(occupied_modes(address)), or the number of non-zeros in its ONR representation.\n\nExample\n\njulia> num_occupied_modes(BoseFS((1, 0, 2)))\n2\njulia> num_occupied_modes(FermiFS((1, 1, 1, 0)))\n3\n\nSee SingleComponentFockAddress.\n\n\n\n\n\n","category":"function"},{"location":"addresses.html#Rimu.BitStringAddresses.num_particles-Tuple{AbstractFockAddress}","page":"BitString addresses","title":"Rimu.BitStringAddresses.num_particles","text":"num_particles(::Type{<:AbstractFockAddress})\nnum_particles(::AbstractFockAddress)\n\nNumber of particles represented by address.\n\n\n\n\n\n","category":"method"},{"location":"addresses.html#Rimu.BitStringAddresses.occupied_modes","page":"BitString addresses","title":"Rimu.BitStringAddresses.occupied_modes","text":"occupied_modes(::SingleComponentFockAddress)\n\nReturn a lazy iterator over all occupied modes in an address. Iterates over BoseFSIndexs for BoseFS, and over FermiFSIndexs for FermiFS. See OccupiedModeMap for an eager version.\n\nExample\n\njulia> b = BoseFS((1,5,0,4));\n\njulia> foreach(println, occupied_modes(b))\nBoseFSIndex(occnum=1, mode=1, offset=0)\nBoseFSIndex(occnum=5, mode=2, offset=2)\nBoseFSIndex(occnum=4, mode=4, offset=9)\n\njulia> f = FermiFS((1,1,0,1,0,0,1));\n\njulia> foreach(println, occupied_modes(f))\nFermiFSIndex(occnum=1, mode=1, offset=0)\nFermiFSIndex(occnum=1, mode=2, offset=1)\nFermiFSIndex(occnum=1, mode=4, offset=3)\nFermiFSIndex(occnum=1, mode=7, offset=6)\n\nSee also find_occupied_mode, SingleComponentFockAddress.\n\n\n\n\n\n","category":"function"},{"location":"addresses.html#Rimu.BitStringAddresses.onr","page":"BitString addresses","title":"Rimu.BitStringAddresses.onr","text":"occupation_number_representation(fs::SingleComponentFockAddress)\nonr(fs::SingleComponentFockAddress)\n\nCompute and return the occupation number representation of the Fock state fs as an SVector{M}, where M is the number of modes.\n\n\n\n\n\n","category":"function"},{"location":"addresses.html#Rimu.BitStringAddresses.@fs_str-Tuple{Any}","page":"BitString addresses","title":"Rimu.BitStringAddresses.@fs_str","text":"fs\"$(string)\"\n\nParse the compact representation of a Fock state. Useful for copying the printout from a vector to the REPL.\n\nExample\n\njulia> DVec(BoseFS{3,4}(0, 1, 2, 0) => 1)\nDVec{BoseFS{3, 4, BitString{6, 1, UInt8}},Int64} with 1 entry, style = IsStochasticInteger{Int64}()\n  fs\"|0 1 2 0⟩\" => 1\n\njulia> fs\"|0 1 2 0⟩\" => 1 # Copied from above printout\nBoseFS{3,4}(0, 1, 2, 0) => 1\n\njulia> fs\"|1 2 3⟩⊗|0 1 0⟩\" # composite bosonic Fock state\nCompositeFS(\n  BoseFS{6,3}(1, 2, 3),\n  BoseFS{1,3}(0, 1, 0),\n)\n\njulia> fs\"|↑↓↑⟩\" # construct a fermionic Fock state\nCompositeFS(\n  FermiFS{2,3}(1, 0, 1),\n  FermiFS{1,3}(0, 1, 0),\n)\n\njulia> s = fs\"|0 1 2 0⟩{}\" # constructing OccupationNumberFS with default UInt8 container\nOccupationNumberFS{4, UInt8}(0, 1, 2, 0)\n\njulia> [s] # prints out with the signifcant number of bits specified in braces\n1-element Vector{OccupationNumberFS{4, UInt8}}:\n fs\"|0 1 2 0⟩{8}\"\n\nSee also FermiFS, BoseFS, CompositeFS, FermiFS2C, OccupationNumberFS.\n\n\n\n\n\n","category":"macro"},{"location":"addresses.html#Rimu.BitStringAddresses.BoseFS","page":"BitString addresses","title":"Rimu.BitStringAddresses.BoseFS","text":"BoseFS{N,M,S} <: SingleComponentFockAddress\n\nAddress type that represents a Fock state of N spinless bosons in M modes by wrapping a BitString, or a SortedParticleList. Which is wrapped is chosen automatically based on the properties of the address.\n\nConstructors\n\nBoseFS{[N,M]}(val::Integer...): Create BoseFS{N,M} from occupation numbers. This is type-stable if the number of modes M and the number of particles N are provided. Otherwise, M and N are inferred from the arguments.\nBoseFS{[N,M]}(onr): Create BoseFS{N,M} from occupation number representation, see onr. This is efficient if N and M are provided, and onr is a statically-sized collection, such as a Tuple or SVector.\nBoseFS{[N,M]}([M, ]pairs...): Provide the number of modes M and mode => occupation_number pairs. If M is provided as a type parameter, it should not be provided as the first argument.  Useful for creating sparse addresses. pairs can be multiple arguments or an iterator of pairs.\nBoseFS{N,M,S}(bs::S): Unsafe constructor. Does not check whether the number of particles in bs is equal to N.\n@fs_str: Addresses are sometimes printed in a compact manner. This representation can also be used as a constructor. See the last example below.\n\nExamples\n\njulia> BoseFS{6,5}(0, 1, 2, 3, 0)\nBoseFS{6,5}(0, 1, 2, 3, 0)\n\njulia> BoseFS([abs(i - 3) ≤ 1 ? i - 1 : 0 for i in 1:5])\nBoseFS{6,5}(0, 1, 2, 3, 0)\n\njulia> BoseFS(5, 2 => 1, 3 => 2, 4 => 3)\nBoseFS{6,5}(0, 1, 2, 3, 0)\n\njulia> BoseFS{6,5}(i => i - 1 for i in 2:4)\nBoseFS{6,5}(0, 1, 2, 3, 0)\n\njulia> fs\"|0 1 2 3 0⟩\"\nBoseFS{6,5}(0, 1, 2, 3, 0)\n\njulia> fs\"|b 5: 2 3 3 4 4 4⟩\"\nBoseFS{6,5}(0, 1, 2, 3, 0)\n\nSee also: SingleComponentFockAddress, OccupationNumberFS, FermiFS, CompositeFS, FermiFS2C.\n\n\n\n\n\n","category":"type"},{"location":"addresses.html#Rimu.BitStringAddresses.bose_hubbard_interaction-Union{Tuple{BoseFS{<:Any, <:Any, A}}, Tuple{A}} where A<:BitString","page":"BitString addresses","title":"Rimu.BitStringAddresses.bose_hubbard_interaction","text":"bose_hubbard_interaction(address)\n\nReturn Σ_i n_i (n_i-1) for computing the Bose-Hubbard on-site interaction (without the U prefactor.)\n\nExample\n\njulia> Hamiltonians.bose_hubbard_interaction(BoseFS{4,4}((2,1,1,0)))\n2\njulia> Hamiltonians.bose_hubbard_interaction(BoseFS{4,4}((3,0,1,0)))\n6\n\n\n\n\n\n","category":"method"},{"location":"addresses.html#Rimu.BitStringAddresses.hopnextneighbour-Union{Tuple{A}, Tuple{M}, Tuple{N}, Tuple{BoseFS{N, M, A}, Any}} where {N, M, A<:BitString}","page":"BitString addresses","title":"Rimu.BitStringAddresses.hopnextneighbour","text":"new_address, value = hopnextneighbour(add, chosen, boundary_condition)\n\nCompute the new address of a hopping event for the Hubbard model. Returns the new address and the square root of product of occupation numbers of the involved modes multiplied by a term consistent with boundary condition as the value.  The following boundary conditions are supported:\n\n:periodic: hopping over the boundary gives does not change the value.\n:twisted: hopping over the boundary flips the sign of the value.\n:hard_wall: hopping over the boundary gives a value of zero.\nθ <: Number: hopping over the boundary gives a value multiplied by exp(iθ) or exp(iθ) depending on the direction of hopping.\n\nThe off-diagonals are indexed as follows:\n\n(chosen + 1) ÷ 2 selects the hopping site.\nEven chosen indicates a hop to the left.\nOdd chosen indicates a hop to the right.\n\nExample\n\njulia> using Rimu.Hamiltonians: hopnextneighbour\n\njulia> hopnextneighbour(BoseFS(1, 0, 1), 3)\n(BoseFS{2,3}(2, 0, 0), 1.4142135623730951)\n\njulia> hopnextneighbour(BoseFS(1, 0, 1), 4)\n(BoseFS{2,3}(1, 1, 0), 1.0)\n\njulia> hopnextneighbour(BoseFS(1, 0, 1), 3, :twisted)\n(BoseFS{2,3}(2, 0, 0), -1.4142135623730951)\n\njulia> hopnextneighbour(BoseFS(1, 0, 1), 3, :hard_wall)\n(BoseFS{2,3}(2, 0, 0), 0.0)\n\njulia> hopnextneighbour(BoseFS(1, 0, 1), 3, π/4)\n(BoseFS{2,3}(2, 0, 0), 1.0000000000000002 + 1.0im)\n\n\n\n\n\n","category":"method"},{"location":"addresses.html#Rimu.BitStringAddresses.near_uniform-Union{Tuple{Type{<:BoseFS{N, M}}}, Tuple{M}, Tuple{N}} where {N, M}","page":"BitString addresses","title":"Rimu.BitStringAddresses.near_uniform","text":"near_uniform(BoseFS{N,M}) -> BoseFS{N,M}\n\nCreate bosonic Fock state with near uniform occupation number of M modes with a total of N particles.\n\nExamples\n\njulia> near_uniform(BoseFS{7,5})\nBoseFS{7,5}(2, 2, 1, 1, 1)\n\njulia> near_uniform(FermiFS{3,5})\nFermiFS{3,5}(1, 1, 1, 0, 0)\n\n\n\n\n\n","category":"method"},{"location":"addresses.html#Rimu.BitStringAddresses.FermiFS","page":"BitString addresses","title":"Rimu.BitStringAddresses.FermiFS","text":"FermiFS{N,M,S} <: SingleComponentFockAddress\n\nAddress type that represents a Fock state of N fermions of the same spin in M modes by wrapping a BitString, or a SortedParticleList. Which is wrapped is chosen automatically based on the properties of the address.\n\nConstructors\n\nFermiFS{[N,M]}(val::Integer...): Create FermiFS{N,M} from occupation numbers. This is type-stable if the number of modes M and the number of particles N are provided. Otherwise, M and N are inferred from the arguments.\nFermiFS{[N,M]}(onr): Create FermiFS{N,M}  from occupation number representation, see onr. This is efficient if N and M are provided, and onr is a statically-sized collection, such as a Tuple{M} or SVector{M}.\nFermiFS{[N,M]}([M, ]pairs...): Provide the number of modes M and pairs of the form mode => 1. If M is provided as a type parameter, it should not be provided as the first argument.  Useful for creating sparse addresses. pairs can be multiple arguments or an iterator of pairs.\nFermiFS{N,M,S}(bs::S): Unsafe constructor. Does not check whether the number of particles in bs is equal to N, or whether each mode only contains one particle.\n@fs_str: Addresses are sometimes printed in a compact manner. This representation can also be used as a constructor. See the last example below.\n\nExamples\n\njulia> FermiFS{3,5}(0, 1, 1, 1, 0)\nFermiFS{3,5}(0, 1, 1, 1, 0)\n\njulia> FermiFS([abs(i - 3) ≤ 1 for i in 1:5])\nFermiFS{3,5}(0, 1, 1, 1, 0)\n\njulia> FermiFS(5, 2 => 1, 3 => 1, 4 => 1)\nFermiFS{3,5}(0, 1, 1, 1, 0)\n\njulia> FermiFS{3,5}(i => 1 for i in 2:4)\nFermiFS{3,5}(0, 1, 1, 1, 0)\n\njulia> fs\"|⋅↑↑↑⋅⟩\"\nFermiFS{3,5}(0, 1, 1, 1, 0)\n\njulia> fs\"|f 5: 2 3 4⟩\"\nFermiFS{3,5}(0, 1, 1, 1, 0)\n\nSee also: SingleComponentFockAddress, BoseFS, CompositeFS, FermiFS2C, BitString, OccupationNumberFS.\n\n\n\n\n\n","category":"type"},{"location":"addresses.html#Rimu.BitStringAddresses.BoseFS2C","page":"BitString addresses","title":"Rimu.BitStringAddresses.BoseFS2C","text":"BoseFS2C{NA,NB,M,AA,AB} <: AbstractFockAddress\nBoseFS2C(onr_a, onr_b)\n\nAddress type that constructed with two BoseFS{N,M,S}. It represents a Fock state with two components, e.g. two different species of bosons with particle number NA from species S and particle number NB from species B. The number of modes M is expected to be the same for both components.\n\n\n\n\n\n","category":"type"},{"location":"addresses.html#Rimu.BitStringAddresses.CompositeFS","page":"BitString addresses","title":"Rimu.BitStringAddresses.CompositeFS","text":"CompositeFS(addresses::SingleComponentFockAddress...) <: AbstractFockAddress\n\nUsed to encode addresses for multi-component models. All component addresses are expected have the same number of modes.\n\nSee also: BoseFS, FermiFS, SingleComponentFockAddress, num_modes, FermiFS2C, AbstractFockAddress.\n\n\n\n\n\n","category":"type"},{"location":"addresses.html#Rimu.BitStringAddresses.FermiFS2C","page":"BitString addresses","title":"Rimu.BitStringAddresses.FermiFS2C","text":"FermiFS2C <: AbstractFockAddress\nFermiFS2C(onr_a, onr_b)\n\nFock state address with two fermionic (spin) components. Alias for CompositeFS with two FermiFS components. Construct by specifying either two compatible FermiFSs, two onrs, or the number of modes followed by mode => occupation_number pairs, where occupation_number=1 will put a particle in the first component and occupation_number=-1 will put a particle in the second component. See examples below.\n\nExamples\n\njulia> FermiFS2C(FermiFS(1,0,0), FermiFS(0,1,1))\nCompositeFS(\n  FermiFS{1,3}(1, 0, 0),\n  FermiFS{2,3}(0, 1, 1),\n)\n\njulia> FermiFS2C((1,0,0), (0,1,1))\nCompositeFS(\n  FermiFS{1,3}(1, 0, 0),\n  FermiFS{2,3}(0, 1, 1),\n)\n\njulia> FermiFS2C(3, 1 => 1, 2 => -1, 3 => -1)\nCompositeFS(\n  FermiFS{1,3}(1, 0, 0),\n  FermiFS{2,3}(0, 1, 1),\n)\n\njulia> fs\"|↑↓↓⟩\"\nCompositeFS(\n  FermiFS{1,3}(1, 0, 0),\n  FermiFS{2,3}(0, 1, 1),\n)\n\n\n\n\n\n","category":"type"},{"location":"addresses.html#Rimu.BitStringAddresses.time_reverse-Union{Tuple{CompositeFS{2, N, M, T}}, Tuple{T}, Tuple{M}, Tuple{N}} where {N, M, T<:(Tuple{T, T} where T)}","page":"BitString addresses","title":"Rimu.BitStringAddresses.time_reverse","text":"time_reverse(addr)\n\nApply the time-reversal operation on a two-component Fock address that flips all the spins.\n\nRequires each component address to have the same type.\n\n\n\n\n\n","category":"method"},{"location":"addresses.html#Rimu.BitStringAddresses.OccupationNumberFS","page":"BitString addresses","title":"Rimu.BitStringAddresses.OccupationNumberFS","text":"OccupationNumberFS{M,T} <: SingleComponentFockAddress\n\nAddress type that stores the occupation numbers of a single component bosonic Fock state with M modes. The occupation numbers must fit into the type T <: Unsigned. The number of particles is runtime data, and can be retrieved with num_particles(address).\n\nConstructors\n\nOccupationNumberFS(val::Integer...): Construct from occupation numbers. Must be < 256 to fit into UInt8.\nOccupationNumberFS{[M,T]}(onr): Construct from collection onr with M occupation numbers with type T. If unspecified, the type T of the occupation numbers is inferred from the type of the arguments.\nOccupationNumberFS(fs::BoseFS): Construct from BoseFS.\nWith shortform macro @fs_str. Specify the number of significant bits in braces. See example below.\n\nExamples\n\njulia> ofs = OccupationNumberFS(1,2,3)\nOccupationNumberFS{3, UInt8}(1, 2, 3)\n\njulia> ofs == fs\"|1 2 3⟩{8}\"\ntrue\n\njulia> num_particles(ofs)\n6\n\n\n\n\n\n","category":"type"},{"location":"addresses.html#Rimu.BitStringAddresses.excitation-Union{Tuple{T}, Tuple{OccupationNumberFS{<:Any, T}, Tuple{Vararg{Int64, var\"#s61\"}} where var\"#s61\", Tuple{Vararg{Int64, var\"#s5\"}} where var\"#s5\"}} where T","page":"BitString addresses","title":"Rimu.BitStringAddresses.excitation","text":"excitation(addr::OccupationNumberFS, c::NTuple, d::NTuple)\n→ (nadd, α)\n\nGenerate an excitation on an OccupationNumberFS by applying the creation and destruction operators specified by the tuples of mode numbers c and d to the Fock state addr. The modes are indexed by integers (starting at 1), or by indices of type BoseFSIndex. The value of α is given by the square root of the product of mode occupations before destruction and after creation.\n\nThe number of particles may change by this type of excitation.\n\nExample\n\njulia> s = fs\"|1 2 3⟩{8}\"\nOccupationNumberFS{3, UInt8}(1, 2, 3)\n\njulia> num_particles(s)\n6\n\njulia> es, α = excitation(s, (1,1), (3,))\n(OccupationNumberFS{3, UInt8}(3, 2, 2), 4.242640687119285)\n\njulia> num_particles(es)\n7\n\n\n\n\n\n","category":"method"},{"location":"addresses.html#Internal-representations","page":"BitString addresses","title":"Internal representations","text":"","category":"section"},{"location":"addresses.html","page":"BitString addresses","title":"BitString addresses","text":"The atomic addresses, BoseFS and FermiFS, are implemented as either bitstrings or sorted lists of particles. Using these approaches over an occupation number representation makes the addresses much more space-efficient.","category":"page"},{"location":"addresses.html","page":"BitString addresses","title":"BitString addresses","text":"Therewhile OccupationNumberFS internally uses the occupation number representation,  which allows it to handle excitation operations that change the particle number. This is fast but requires more storage space.","category":"page"},{"location":"addresses.html#Internal-APIs","page":"BitString addresses","title":"Internal APIs","text":"","category":"section"},{"location":"addresses.html","page":"BitString addresses","title":"BitString addresses","text":"Modules = [BitStringAddresses]\nPages = [\"bitstring.jl\", \"sortedparticlelist.jl\"]\nPrivate = false","category":"page"},{"location":"addresses.html#Rimu.BitStringAddresses.BitString","page":"BitString addresses","title":"Rimu.BitStringAddresses.BitString","text":"BitString{B,N,T<:Unsigned}\n\nType for storing bitstrings of static size. Holds B bits in N chunks, where each chunk is of type T.\n\nN is chosen automatically to accommodate B bits as efficiently as possible.\n\nConstructors\n\nBitString{B,N,T}(::SVector{N,T}): unsafe constructor. Does not check for ghost bits.\nBitString{B,N,T}(i::T): as above, but sets i as the rightmost chunk.\nBitString{B}(::Integer): Convert integer to BitString. Integer is truncated to the correct number of bits.\n\n\n\n\n\n","category":"type"},{"location":"addresses.html#Rimu.BitStringAddresses.SortedParticleList","page":"BitString addresses","title":"Rimu.BitStringAddresses.SortedParticleList","text":"SortedParticleList{N,M,T<:Unsigned}\n\nType for storing sparse fock states. Stores the mode number of each particle as an entry with only its mode stored. The entries are always kept sorted.\n\nIterating over SortedParticleLists yields occupied modes as a tuple of occupation number, mode number, and position in list.\n\nConstructors\n\nSortedParticleList{N,M,T}(::SVector{N,T}): unsafe constructor. Does not sort input.\nSortedParticleList(arr::AbstractVector): convert ONR to SortedParticleList\n\n\n\n\n\n","category":"type"},{"location":"addresses.html#Index","page":"BitString addresses","title":"Index","text":"","category":"section"},{"location":"addresses.html","page":"BitString addresses","title":"BitString addresses","text":"Pages   = [\"addresses.md\"]","category":"page"},{"location":"API.html#API","page":"API","title":"API","text":"","category":"section"},{"location":"API.html#Rimu","page":"API","title":"Rimu","text":"","category":"section"},{"location":"API.html","page":"API","title":"API","text":"Modules = [Rimu]","category":"page"},{"location":"API.html#Rimu.Rimu","page":"API","title":"Rimu.Rimu","text":"Rimu\n\nRandom integrators for many-body quantum systems\n\nWelcome to Rimu version 0.12.1. Read the documentation online.\n\n\n\n\n\n","category":"module"},{"location":"API.html#Rimu.PACKAGE_VERSION","page":"API","title":"Rimu.PACKAGE_VERSION","text":"Rimu.PACKAGE_VERSION\n\nConstant that contains the current VersionNumber of Rimu.\n\n\n\n\n\n","category":"constant"},{"location":"API.html#DataFrames.DataFrame-Tuple{Rimu.Report}","page":"API","title":"DataFrames.DataFrame","text":"DataFrame(report::Report)\n\nConvert the Report to a DataFrame. Metadata is added as metadata to the DataFrame.\n\n\n\n\n\n","category":"method"},{"location":"API.html#Rimu.AllOverlaps","page":"API","title":"Rimu.AllOverlaps","text":"AllOverlaps(num_replicas=2; operator=nothing, transform=nothing, vecnorm=true) <: ReplicaStrategy{num_replicas}\n\nRun num_replicas replicas and report overlaps between all pairs of replica vectors. If operator is not nothing, the overlap dot(c1, operator, c2) is reported as well. If operator is a tuple of operators, the overlaps are computed for all operators.\n\nColumn names in the report are of the form c{i}_dot_c{j} for vector-vector overlaps, and c{i}_Op{k}_c{j} for operator overlaps.\n\nSee ProjectorMonteCarloProblem, ReplicaStrategy and AbstractHamiltonian (for an interface for implementing operators).\n\nTransformed Hamiltonians\n\nIf a transformed Hamiltonian G has been passed to ProjectorMonteCarloProblem then overlaps can be calculated by passing the same transformed Hamiltonian to AllOverlaps by setting transform=G. A warning is given if these two Hamiltonians do not match.\n\nImplemented transformations are:\n\nGutzwillerSampling\nGuidingVectorSampling\n\nIn the case of a transformed Hamiltonian the overlaps are defined as follows. For a similarity transformation G of the Hamiltonian (see e.g. GutzwillerSampling.)\n\n    hatG = f hatH f^-1\n\nThe expectation value of an operator hatA is\n\n    langle hatA rangle = langle psi  hatA  psi rangle\n        = fraclangle phi  f^-1 hatA f^-1  phi ranglelangle phi  f^-2  phi rangle\n\nwhere\n\n     phi rangle = f  psi rangle\n\nis the (right) eigenvector of hatG and  psi rangle is an eigenvector of hatH.\n\nFor a K-tuple of input operators (hatA_1  hatA_K), overlaps of langle phi  f^-1 hatA f^-1  phi rangle are reported as c{i}_Op{k}_c{j}. The correct vector-vector overlap langle phi  f^-2  phi rangle is reported last as c{i}_Op{K+1}_c{j}. This is in addition to the bare vector-vector overlap langle phi  f^-2  phi rangle that is reported as c{i}_dot_c{j}.\n\nIn either case the c{i}_dot_c{j} overlap can be omitted with the flag vecnorm=false.\n\n\n\n\n\n","category":"type"},{"location":"API.html#Rimu.ConstantTimeStep","page":"API","title":"Rimu.ConstantTimeStep","text":"ConstantTimeStep <: TimeStepStrategy\n\nKeep time_step constant.\n\n\n\n\n\n","category":"type"},{"location":"API.html#Rimu.DefaultShiftParameters","page":"API","title":"Rimu.DefaultShiftParameters","text":"DefaultShiftParameters\n\nDefault mutable struct for storing the shift parameters.\n\nSee ShiftStrategy, initialise_shift_parameters.\n\n\n\n\n\n","category":"type"},{"location":"API.html#Rimu.DontUpdate","page":"API","title":"Rimu.DontUpdate","text":"DontUpdate(; target_walkers = 1_000) <: ShiftStrategy\n\nDon't update the shift.  Return when target_walkers is reached.\n\nSee ShiftStrategy, ProjectorMonteCarloProblem.\n\n\n\n\n\n","category":"type"},{"location":"API.html#Rimu.DoubleLogProjected","page":"API","title":"Rimu.DoubleLogProjected","text":"DoubleLogProjected(; target, projector, ζ = 0.08, ξ = ζ^2/4) <: ShiftStrategy\n\nStrategy for updating the shift according to the log formula with damping parameter ζ and ξ after projecting onto projector.\n\nS^n+1 = S^n -fracζdτlnleft(fracPΨ^(n+1)PΨ^(n)right)-fracξdτlnleft(fracPΨ^(n+1)texttargetright)\n\nNote that adjusting the keyword maxlength in ProjectorMonteCarloProblem is advised as the default may not be appropriate.\n\nSee ShiftStrategy, ProjectorMonteCarloProblem.\n\n\n\n\n\n","category":"type"},{"location":"API.html#Rimu.DoubleLogSumUpdate","page":"API","title":"Rimu.DoubleLogSumUpdate","text":"DoubleLogSumUpdate(; target_walkers = 1000, ζ = 0.08, ξ = ζ^2/4, α = 1/2) <: ShiftStrategy\n\nStrategy for updating the shift according to the log formula with damping parameters ζ and ξ.\n\nS^n+1 = S^n -fracζdτlnleft(fracN_mathrmw^n+1N_mathrmw^nright)\n- fracξdτlnleft(fracN_mathrmw^n+1N_mathrmw^texttargetright)\n\nwhere N_mathrmw = (1-α)*walkernumber() + α*UniformProjector()⋅ψ computed with walkernumber() and UniformProjector(). When ξ = ζ^2/4 this corresponds to critical damping with a damping time scale T = 2/ζ.\n\nSee ShiftStrategy, ProjectorMonteCarloProblem.\n\n\n\n\n\n","category":"type"},{"location":"API.html#Rimu.DoubleLogUpdate","page":"API","title":"Rimu.DoubleLogUpdate","text":"DoubleLogUpdate(; target_walkers = 1_000, ζ = 0.08, ξ = ζ^2/4) <: ShiftStrategy\n\nStrategy for updating the shift according to the log formula with damping parameter ζ and ξ.\n\nS^n+1 = S^n -fracζdτlnleft(fracΨ_1^n+1Ψ_1^nright)-fracξdτlnleft(fracΨ_1^n+1Ψ_1^texttargetright)\n\nWhen ξ = ζ^2/4 this corresponds to critical damping with a damping time scale T = 2/ζ.\n\nSee ShiftStrategy, ProjectorMonteCarloProblem.\n\n\n\n\n\n","category":"type"},{"location":"API.html#Rimu.DoubleLogUpdateAfterTargetWalkers","page":"API","title":"Rimu.DoubleLogUpdateAfterTargetWalkers","text":"DoubleLogUpdateAfterTargetWalkers(target_walkers = 1_000, ζ = 0.08, ξ = ζ^2/4) <: ShiftStrategy\n\nStrategy for updating the shift: After target_walkers is reached, update the shift according to the log formula with damping parameter ζ and ξ.\n\nSee DoubleLogUpdate, ShiftStrategy, ProjectorMonteCarloProblem.\n\n\n\n\n\n","category":"type"},{"location":"API.html#Rimu.FCIQMC","page":"API","title":"Rimu.FCIQMC","text":"FCIQMC(; kwargs...) <: PMCAlgorithm\n\nAlgorithm for the full configuration interaction quantum Monte Carlo (FCIQMC) method. The default algorithm for ProjectorMonteCarloProblem.\n\nKeyword arguments and defaults:\n\nshift_strategy = DoubleLogUpdate(; targetwalkers = 1_000, ζ = 0.08,   ξ = ζ^2/4): How to update the shift.\ntime_step_strategy = ConstantTimeStep(): Adjust time step or not.\n\nSee also ProjectorMonteCarloProblem, ShiftStrategy, TimeStepStrategy, DoubleLogUpdate, ConstantTimeStep.\n\n\n\n\n\n","category":"type"},{"location":"API.html#Rimu.FciqmcRunStrategy","page":"API","title":"Rimu.FciqmcRunStrategy","text":" FciqmcRunStrategy{T}\n\nAbstract type representing the strategy for running and terminating lomc!(). The type parameter T is relevant for reporting the shift and the norm.\n\nImplemented strategies:\n\nRunTillLastStep\n\nwarning: Warning\nThe use of this strategy is deprecated. Pass the relevant arguments directly to ProjectorMonteCarloProblem or to lomc!() instead.\n\n\n\n\n\n","category":"type"},{"location":"API.html#Rimu.FirstOrderTransitionOperator","page":"API","title":"Rimu.FirstOrderTransitionOperator","text":"FirstOrderTransitionOperator(hamiltonian, shift, time_step) <: AbstractHamiltonian\nFirstOrderTransitionOperator(sp::DefaultShiftParameters, hamiltonian)\n\nFirst order transition operator\n\n𝐓 = 1 + dτ(S - 𝐇)\n\nwhere 𝐇 is the hamiltonian, dτ the time_step and S is the shift.\n\n𝐓 represents the first order expansion of the exponential evolution operator of the imaginary-time Schrödinger equation (Euler step) and repeated application will project out the ground state eigenvector of the hamiltonian.  It is the transition operator used in FCIQMC.\n\n\n\n\n\n","category":"type"},{"location":"API.html#Rimu.GramSchmidt","page":"API","title":"Rimu.GramSchmidt","text":"GramSchmidt{S} <: SpectralStrategy{S}\n\nUse the Gram-Schmidt procedure to orthogonalize the excited states. A total of S spectral states are used in the simulation.\n\n\n\n\n\n","category":"type"},{"location":"API.html#Rimu.LogUpdate","page":"API","title":"Rimu.LogUpdate","text":"LogUpdate(ζ = 0.08) <: ShiftStrategy\n\nStrategy for updating the shift according to the log formula with damping parameter ζ.\n\nS^n+1 = S^n -fracζdτlnleft(fracΨ_1^n+1Ψ_1^nright)\n\nSee ShiftStrategy, ProjectorMonteCarloProblem.\n\n\n\n\n\n","category":"type"},{"location":"API.html#Rimu.LogUpdateAfterTargetWalkers","page":"API","title":"Rimu.LogUpdateAfterTargetWalkers","text":"LogUpdateAfterTargetWalkers(target_walkers = 1_000, ζ = 0.08) <: ShiftStrategy\n\nStrategy for updating the shift: After target_walkers is reached, update the shift according to the log formula with damping parameter ζ.\n\nSee LogUpdate, ShiftStrategy, ProjectorMonteCarloProblem.\n\n\n\n\n\n","category":"type"},{"location":"API.html#Rimu.MultiScalar","page":"API","title":"Rimu.MultiScalar","text":"MultiScalar\n\nWrapper over a tuple that supports +, *, min, and max. Used with MPI communication because SVectors are treated as arrays by MPI.Allreduce and Tuples do not support scalar operations.\n\nExample\n\nSuppose you want to compute the sum of a vector dv and also get the number of positive elements it has in a single pass. You can use MultiScalar:\n\njulia> dv = DVec(:a => 1, :b => -2, :c => 1);\n\njulia> s, p = mapreduce(+, values(dv)) do v\n    Rimu.MultiScalar(v, Int(sign(v) == 1))\nend;\n\njulia> s, p\n(0, 2)\n\nThis will work with MPIData.\n\nNote that only MultiScalars with the same types can be operated on. This is a feature, as it forces type stability.\n\n\n\n\n\n","category":"type"},{"location":"API.html#Rimu.NoStats","page":"API","title":"Rimu.NoStats","text":"NoStats(N=1) <: ReplicaStrategy{N}\n\nThe default ReplicaStrategy. N replicas are run, but no statistics are collected.\n\nSee also ProjectorMonteCarloProblem.\n\n\n\n\n\n","category":"type"},{"location":"API.html#Rimu.PMCAlgorithm","page":"API","title":"Rimu.PMCAlgorithm","text":"PMCAlgorithm\n\nAbstract type for projector Monte Carlo algorithms.\n\nSee ProjectorMonteCarloProblem, FCIQMC.\n\n\n\n\n\n","category":"type"},{"location":"API.html#Rimu.PMCSimulation","page":"API","title":"Rimu.PMCSimulation","text":"PMCSimulation\n\nHolds the state and the results of a projector quantum Monte Carlo (PMC) simulation. Is returned by init(::ProjectorMonteCarloProblem) and solved with solve!(::PMCSimulation).\n\nObtain the results of a simulation sm as a DataFrame with DataFrame(sm).\n\nSee also state_vectors, ProjectorMonteCarloProblem, init, solve!.\n\n\n\n\n\n","category":"type"},{"location":"API.html#Rimu.PostStepStrategy","page":"API","title":"Rimu.PostStepStrategy","text":"PostStepStrategy\n\nSubtypes of PostStepStrategy can be used to perform arbitrary computation on a single state after an FCIQMC step is finished and report the results.\n\nImplemented strategies:\n\nProjectedEnergy\nProjector\nSignCoherence\nWalkerLoneliness\nTimer\n\nNote: A tuple of multiple strategies can be passed to ProjectorMonteCarloProblem. In that case, all reported column names must be distinct.\n\nInterface:\n\nA subtype of this type must implement post_step_action(::PostStepStrategy, ::SingleState, step::Int).\n\n\n\n\n\n","category":"type"},{"location":"API.html#Rimu.ProjectedEnergy","page":"API","title":"Rimu.ProjectedEnergy","text":"ProjectedEnergy(hamiltonian, projector; hproj=:hproj, vproj=:vproj) <: PostStepStrategy\n\nAfter every step, compute hproj = dot(projector, hamiltonian, dv) and vproj = dot(projector, dv), where dv is the instantaneous coefficient vector.  projector can be an AbstractDVec, or an AbstractProjector.\n\nReports to columns hproj and vproj, which can be used to compute projective energy, e.g. with projected_energy. The keyword arguments hproj and vproj can be used to change the names of these columns. This can be used to make the names unique when computing projected energies with different projectors in the same run.\n\nSee also projected_energy, ratio_of_means, mixed_estimator, and PostStepStrategy.\n\n\n\n\n\n","category":"type"},{"location":"API.html#Rimu.Projector","page":"API","title":"Rimu.Projector","text":"Projector(name=projector) <: PostStepStrategy\n\nAfter each step, compute dot(projector, dv) and report it in the DataFrame under name. projector can be an AbstractDVec, or an AbstractProjector.\n\n\n\n\n\n","category":"type"},{"location":"API.html#Rimu.ProjectorMonteCarloProblem","page":"API","title":"Rimu.ProjectorMonteCarloProblem","text":"ProjectorMonteCarloProblem(hamiltonian::AbstractHamiltonian; kwargs...)\n\nDefines a problem to be solved by projector quantum Monte Carlo (QMC) methods, such as the the FCIQMC algorithm.\n\nCommon keyword arguments and defaults:\n\ntime_step = 0.01: Initial time step size.\nlast_step = 100: Controls the number of steps.\ntarget_walkers = 1_000: Target for the 1-norm of the coefficient vector.\nstart_at = starting_address(hamiltonian): Define the initial state vector(s).   An r  s matrix of state vectors can be passed where r is the   number of replicas and s the number of spectral states. See also   default_starting_vector.\nstyle = IsDynamicSemistochastic(): The StochasticStyle of the simulation.\ninitiator = false: Whether to use initiators. Can be true, false, or a valid   InitiatorRule.\nthreading: Default is to use multithreading and/or MPI if available. Set to true to force PDVec for the starting vector, false for serial computation; may be overridden by start_at.\nreporting_strategy = ReportDFAndInfo(): How and when to report results, see ReportingStrategy.\npost_step_strategy = (): Extract observables (e.g. ProjectedEnergy), see PostStepStrategy.\nn_replicas = 1: Number of synchronised independent simulations.\nreplica_strategy = NoStats(n_replicas): Which results to report from replica simulations, see ReplicaStrategy.\n\nExample\n\njulia> hamiltonian = HubbardReal1D(BoseFS(1,2,3));\n\njulia> problem = ProjectorMonteCarloProblem(hamiltonian; target_walkers = 500, last_step = 100);\n\njulia> simulation = solve(problem);\n\njulia> simulation.success[]\ntrue\n\njulia> size(DataFrame(simulation))\n(100, 9)\n\nFurther keyword arguments:\n\nstarting_step = 1: Starting step of the simulation.\nwalltime = Inf: Maximum time allowed for the simulation.\nsimulation_plan = SimulationPlan(; starting_step, last_step, walltime): Defines the   duration of the simulation. Takes precedence over last_step and walltime.\nζ = 0.08: Damping parameter for the shift update.\nξ = ζ^2/4: Forcing parameter for the shift update.\nshift_strategy = DoubleLogUpdate(; target_walkers, ζ, ξ): How to update the shift,   see ShiftStrategy.\ntime_step_strategy = ConstantTimeStep(): Adjust time step or not, see   TimeStepStrategy.\nalgorithm = FCIQMC(; shift_strategy, time_step_strategy): The algorithm to use.   Currenlty only FCIQMC is implemented.\nshift: Initial shift value or collection of shift values. Determined by default from the   Hamiltonian and the starting vectors.\ninitial_shift_parameters: Initial shift parameters or collection of initial shift   parameters. Overrides shift if provided.\nmaxlength = 2 * target_walkers + 100: Maximum length of the vectors.\ndisplay_name = \"PMCSimulation\": Name displayed in progress bar (via ProgressLogging).\nmetadata: User-supplied metadata to be added to the report. Must be an iterable of pairs or a NamedTuple, e.g. metadata = (\"key1\" => \"value1\", \"key2\" => \"value2\"). All metadata is converted to strings.\nrandom_seed = true: Provide and store a seed for the random number generator. If set to   true, a random seed is generated. If set to number, this number is used as the seed.   The seed is used by solve such that solveing the problem twice will yield identical   results. If set to false, no seed is used and results are not reproducible.\n\nSee also init, solve.\n\n\n\n\n\n","category":"type"},{"location":"API.html#Rimu.ReplicaState","page":"API","title":"Rimu.ReplicaState","text":"ReplicaState <: AbstractMatrix{SingleState}\n\nHolds information about multiple replicas of SpectralStates.\n\nIndexing the ReplicaState state[i, j] returns a SingleState from the ith replica and jth spectral state.\n\nSee also ReplicaStrategy, SpectralState, SingleState, PMCSimulation.\n\n\n\n\n\n","category":"type"},{"location":"API.html#Rimu.ReplicaStrategy","page":"API","title":"Rimu.ReplicaStrategy","text":"ReplicaStrategy{N}\n\nSupertype for strategies that can be passed to ProjectorMonteCarloProblem and control how many replicas are used, and what information is computed and returned. The number of replicas is N.\n\nConcrete implementations\n\nNoStats: run (possibly one) replica(s), but don't report any additional info.\nAllOverlaps: report overlaps between all pairs of replica vectors.\n\nInterface\n\nA subtype of ReplicaStrategy{N} must implement the following function:\n\nRimu.replica_stats - return a tuple of Strings or Symbols of names for replica statistics and a tuple of the values. These will be reported to the DataFrame returned by ProjectorMonteCarloProblem.\n\n\n\n\n\n","category":"type"},{"location":"API.html#Rimu.Report","page":"API","title":"Rimu.Report","text":"Report()\nReport(df::DataFrame)\n\nInternal structure that holds the temporary reported values as well as metadata. It can be converted to a DataFrame with DataFrame(report::Report).\n\nSee report!, report_metadata!, get_metadata.\n\n\n\n\n\n","category":"type"},{"location":"API.html#Rimu.ReportDFAndInfo","page":"API","title":"Rimu.ReportDFAndInfo","text":"ReportDFAndInfo(; reporting_interval=1, info_interval=100, io=stdout, writeinfo=false) <: ReportingStrategy\n\nThe default ReportingStrategy. Report every reporting_intervalth step to a DataFrame and write info message to io every info_intervalth reported step (unless writeinfo == false). The flag writeinfo is useful for controlling info messages in MPI codes, e.g. by setting writeinfo =is_mpi_root().\n\n\n\n\n\n","category":"type"},{"location":"API.html#Rimu.ReportToFile","page":"API","title":"Rimu.ReportToFile","text":"ReportToFile(; kwargs...) <: ReportingStrategy\n\nReportingStrategy that writes the report directly to a file in the Arrow format. Useful when dealing with long jobs or large numbers of replicas, when the report can incur a significant memory cost.\n\nThe arrow file can be read back in with load_df(filename) or using Arrow; Arrow.Table(filename).\n\nKeyword arguments\n\nfilename = \"out.arrow\": the file to report to. If the file already exists, a new file is created.\nreporting_interval = 1: interval between simulation steps that are reported.\nchunk_size = 1000: the size of each chunk that is written to the file. A DataFrame of this size is collected in memory and written to disk. When saving, an info message is also printed to io.\nsave_if =is_mpi_root(): if this value is true, save the report, otherwise ignore it.\nreturn_df = false: if this value is true, read the file and return the data frame at the end of computation. Otherwise, an empty DataFrame is returned.\nio = stdout: The IO to print messages to. Set to devnull if you don't want to see messages printed out.\ncompress = :zstd: compression algorithm to use. Can be :zstd, :lz4 or nothing.\n\nSee also load_df and save_df.\n\n\n\n\n\n","category":"type"},{"location":"API.html#Rimu.ReportingStrategy","page":"API","title":"Rimu.ReportingStrategy","text":"ReportingStrategy\n\nAbstract type for strategies for reporting data in a DataFrame with report!().\n\nImplemented strategies:\n\nReportDFAndInfo\nReportToFile\n\nInterface:\n\nA ReportingStrategy can define any of the following:\n\nrefine_reporting_strategy\nreport!\nreport_after_step!\nfinalize_report!\nreporting_interval\n\n\n\n\n\n","category":"type"},{"location":"API.html#Rimu.RunTillLastStep","page":"API","title":"Rimu.RunTillLastStep","text":"RunTillLastStep(step::Int = 0 # number of current/starting timestep\n             laststep::Int = 100 # number of final timestep\n             shiftMode::Bool = false # whether to adjust shift\n             shift = 0.0 # starting/current value of shift\n             dτ::Float64 = 0.01 # current value of time step\n) <: FciqmcRunStrategy\n\nParameters for running lomc!() for a fixed number of time steps. For alternative strategies, see FciqmcRunStrategy.\n\nwarning: Warning\nThe use of this strategy is deprecated. Pass the relevant arguments directly to ProjectorMonteCarloProblem or to lomc!() instead.\n\n\n\n\n\n","category":"type"},{"location":"API.html#Rimu.ShiftStrategy","page":"API","title":"Rimu.ShiftStrategy","text":"ShiftStrategy\n\nAbstract type for defining the strategy for controlling the norm, potentially by updating the shift. Passed as a parameter to ProjectorMonteCarloProblem or to FCIQMC.\n\nImplemented strategies:\n\nDontUpdate\nDoubleLogUpdate - default in ProjectorMonteCarloProblem()\nLogUpdate\nLogUpdateAfterTargetWalkers - FCIQMC standard\nDoubleLogUpdateAfterTargetWalkers\n\nExtended help\n\nInternally To implement a custom strategy, define a new subtype of Rimu.ShiftStrategy and implement methods for:\n\nRimu.update_shift_parameters! - to update the shift_parameters\nRimu.initialise_shift_parameters - (optional) to initialise and construct a   custom implementation of the shift_parameters. The default implementation is   Rimu.DefaultShiftParameters.\n\n\n\n\n\n","category":"type"},{"location":"API.html#Rimu.SignCoherence","page":"API","title":"Rimu.SignCoherence","text":"SignCoherence(reference[; name=:coherence]) <: PostStepStrategy\n\nAfter each step, compute the proportion of configurations that have the same sign as they do in the reference_dvec. Reports to a column named name, which defaults to coherence.\n\n\n\n\n\n","category":"type"},{"location":"API.html#Rimu.SimulationPlan","page":"API","title":"Rimu.SimulationPlan","text":"SimulationPlan(; starting_step = 1, last_step = 100, walltime = Inf)\n\nDefines the duration of the simulation. The simulation ends when the last_step is reached or the walltime is exceeded.\n\nSee ProjectorMonteCarloProblem, PMCSimulation.\n\n\n\n\n\n","category":"type"},{"location":"API.html#Rimu.SingleParticleDensity","page":"API","title":"Rimu.SingleParticleDensity","text":"SingleParticleDensity(; save_every=1, component) <: PostStepStrategy\n\nPostStepStrategy  to  compute the diagonal single_particle_density. It records a Tuple with the same eltype as the vector.\n\nComputing the density at every time step can be expensive. This cost can be reduced by setting the save_every argument to a higher value. If the value is set, a vector of zeros is recorded when the saving is skipped.\n\nIf the address type has multiple components, the component argument can be used to compute the density on a per-component basis.\n\nThe density is not normalized, and must be divided by the vector norm(⋅,2) squared.\n\nSee also\n\nsingle_particle_density\nDensityMatrixDiagonal\n\n\n\n\n\n","category":"type"},{"location":"API.html#Rimu.SingleState","page":"API","title":"Rimu.SingleState","text":"SingleState(hamiltonian, algorithm, v, wm, pnorm, params, id)\n\nStruct that holds a single state vector and all information needed for an independent run of the algorithm. Can be advanced a step forward with advance!.\n\nSee also SpectralState, SpectralStrategy, ReplicaState, ReplicaStrategy, replica_stats, PMCSimulation.\n\n\n\n\n\n","category":"type"},{"location":"API.html#Rimu.SpectralState","page":"API","title":"Rimu.SpectralState","text":"SpectralState <: AbstractVector{SingleState}\n\nHolds one or several SingleStates representing the ground state and excited states of a single replica.\n\nIndexing the SpectralState state[i] returns the ith SingleState.\n\nSee also SpectralStrategy, ReplicaState, SingleState, PMCSimulation.\n\n\n\n\n\n","category":"type"},{"location":"API.html#Rimu.SpectralStrategy","page":"API","title":"Rimu.SpectralStrategy","text":"SpectralStrategy{S}\n\nAbstract type for spectral strategies. The spectral strategy is used to control the number of spectral states used in the simulation.\n\n\n\n\n\n","category":"type"},{"location":"API.html#Rimu.StateVectors","page":"API","title":"Rimu.StateVectors","text":"StateVectors <: AbstractMatrix{V}\n\nRepresents a matrix of configuration vectors from the state. Construct this object with state_vectors.\n\n\n\n\n\n","category":"type"},{"location":"API.html#Rimu.TimeStepStrategy","page":"API","title":"Rimu.TimeStepStrategy","text":"TimeStepStrategy\n\nAbstract type for strategies for updating the time step with update_time_step(). Implemented strategies:\n\nConstantTimeStep\n\n\n\n\n\n","category":"type"},{"location":"API.html#Rimu.Timer","page":"API","title":"Rimu.Timer","text":"Timer <: PostStepStrategy\n\nRecord current time after every step. See Base.Libc.time for information on what time is recorded.\n\n\n\n\n\n","category":"type"},{"location":"API.html#Rimu.WalkerLoneliness","page":"API","title":"Rimu.WalkerLoneliness","text":"WalkerLoneliness(threshold=1) <: PostStepStrategy\n\nAfter each step, compute the proportion of configurations that are occupied by at most threshold walkers. Reports to a column named loneliness.\n\n\n\n\n\n","category":"type"},{"location":"API.html#CommonSolve.init-Tuple{ProjectorMonteCarloProblem}","page":"API","title":"CommonSolve.init","text":"init(problem::ProjectorMonteCarloProblem; copy_vectors=true)::PMCSimulation\n\nInitialise a Rimu.PMCSimulation.\n\nSee also ProjectorMonteCarloProblem, solve!, solve, step!, Rimu.PMCSimulation.\n\n\n\n\n\n","category":"method"},{"location":"API.html#CommonSolve.solve","page":"API","title":"CommonSolve.solve","text":"solve(::ProjectorMonteCarloProblem)::PMCSimulation\n\nInitialize and solve a ProjectorMonteCarloProblem until the last step is completed or the walltime limit is reached.\n\nSee also init, solve!, step!, Rimu.PMCSimulation, and solve(::ExactDiagonalizationProblem).\n\n\n\n\n\n","category":"function"},{"location":"API.html#CommonSolve.solve!-Tuple{Rimu.PMCSimulation}","page":"API","title":"CommonSolve.solve!","text":"solve!(sm::PMCSimulation; kwargs...)::PMCSimulation\n\nSolve a Rimu.PMCSimulation until the last step is completed or the walltime limit is reached.\n\nTo continue a previously completed simulation, set a new last_step or walltime using the keyword arguments. Optionally, changes can be made to the replica_strategy, the post_step_strategy, or the reporting_strategy.\n\nOptional keyword arguments:\n\nlast_step = nothing: Set the last step to a new value and continue the simulation.\nwalltime = nothing: Set the allowed walltime to a new value and continue the simulation.\nreset_time = false: Reset the elapsed_time counter and continue the simulation.\nempty_report = false: Empty the report before continuing the simulation.\nreplica_strategy = nothing: Change the replica strategy. Requires the number of replicas   to match the number of replicas in the simulation sm. Implies empty_report = true.\npost_step_strategy = nothing: Change the post-step strategy. Implies   empty_report = true.\nreporting_strategy = nothing: Change the reporting strategy. Implies   empty_report = true.\nmetadata = nothing: Add metadata to the report.\n\nSee also ProjectorMonteCarloProblem, init, solve, step!, Rimu.PMCSimulation.\n\n\n\n\n\n","category":"method"},{"location":"API.html#CommonSolve.step!-Tuple{Rimu.PMCSimulation}","page":"API","title":"CommonSolve.step!","text":"step!(sm::PMCSimulation)::PMCSimulation\n\nAdvance the simulation by one step.\n\nCalling solve! will advance the simulation until the last step or the walltime is exceeded. When completing the simulation without calling solve!, the simulation report needs to be finalised by calling Rimu.finalize_report!.\n\nSee also ProjectorMonteCarloProblem, init, solve!, solve, Rimu.PMCSimulation.\n\n\n\n\n\n","category":"method"},{"location":"API.html#Rimu._n_walkers-Tuple{Any, Any}","page":"API","title":"Rimu._n_walkers","text":"_n_walkers(v, shift_strategy)\n\nReturns an estimate of the expected number of walkers as an integer.\n\n\n\n\n\n","category":"method"},{"location":"API.html#Rimu.advance!-Tuple{FCIQMC, Any, Rimu.ReplicaState, Rimu.SingleState}","page":"API","title":"Rimu.advance!","text":"advance!(algorithm::PMCAlgorithm, report::Report, state::ReplicaState, s_state::SingleState)\n\nAdvance the s_state by one step according to the algorithm. The state is used only to access the various strategies involved. Steps, stats, and computed quantities are written to the report.\n\nReturns true if the step was successful and calculation should proceed, false when it should terminate.\n\nSee also solve!, step!.\n\n\n\n\n\n","category":"method"},{"location":"API.html#Rimu.all_overlaps-Union{Tuple{B}, Tuple{N}, Tuple{Tuple, Tuple{Vararg{AbstractDVec, N}}, Any, Val{B}}} where {N, B}","page":"API","title":"Rimu.all_overlaps","text":"all_overlaps(operators, vectors, working_memories, vecnorm=true)\n\nGet all overlaps between vectors and operators. This function is overloaded for MPIData. The flag vecnorm can disable the vector-vector overlap c{i}_dot_c{j}.\n\n\n\n\n\n","category":"method"},{"location":"API.html#Rimu.check_transform-Tuple{AllOverlaps, AbstractHamiltonian}","page":"API","title":"Rimu.check_transform","text":"check_transform(r::AllOverlaps, ham)\n\nCheck that the transformation provided to r::AllOverlaps matches the given Hamiltonian ham. Used as a sanity check before starting main ProjectorMonteCarloProblem loop.\n\n\n\n\n\n","category":"method"},{"location":"API.html#Rimu.clean_and_warn_if_others_present-Union{Tuple{names}, Tuple{NamedTuple{names}, Any}} where names","page":"API","title":"Rimu.clean_and_warn_if_others_present","text":"clean_and_warn_if_others_present(nt::NamedTuple{names}, keys) where {names}\n\nRemove keys from a NamedTuple that are not in keys and issue a warning if they are present.\n\n\n\n\n\n","category":"method"},{"location":"API.html#Rimu.default_logger-Tuple","page":"API","title":"Rimu.default_logger","text":"default_logger(args...)\n\nReset the global_logger to Logging.ConsoleLogger. Undoes the effect of smart_logger. Arguments are passed on to Logging.ConsoleLogger.\n\n\n\n\n\n","category":"method"},{"location":"API.html#Rimu.default_starting_vector-Tuple{AbstractHamiltonian}","page":"API","title":"Rimu.default_starting_vector","text":"default_starting_vector(hamiltonian::AbstractHamiltonian; kwargs...)\ndefault_starting_vector(\n    address=starting_address(hamiltonian);\n    style=IsDynamicSemistochastic(),\n    initiator=NonInitiator(),\n    threading=nothing,\n    population=10\n)\n\nReturn a default starting vector for ProjectorMonteCarloProblem. The default choice for the starting vector is\n\nv = PDVec(address => population; style, initiator)\n\nif threading is available, or otherwise\n\nv = DVec(address => population; style)\n\nif initiator == NonInitiator(), and\n\nv = InitiatorDVec(address => population; style, initiator)\n\nif not. See PDVec, DVec, InitiatorDVec, StochasticStyle, and InitiatorRule.\n\n\n\n\n\n","category":"method"},{"location":"API.html#Rimu.delete_and_warn_if_present-Union{Tuple{names}, Tuple{NamedTuple{names}, Any}} where names","page":"API","title":"Rimu.delete_and_warn_if_present","text":"delete_and_warn_if_present(nt::NamedTuple, keys)\n\nDelete keys from a NamedTuple and issue a warning if they are present. This is useful for removing unused keyword arguments.\n\n\n\n\n\n","category":"method"},{"location":"API.html#Rimu.finalize_report!-Tuple{ReportingStrategy, Any}","page":"API","title":"Rimu.finalize_report!","text":"finalize_report!(::ReportingStrategy, report)\n\nFinalize the report. This function is called after all steps in solve! have finished.\n\n\n\n\n\n","category":"method"},{"location":"API.html#Rimu.get_metadata-Tuple{Rimu.Report, Any}","page":"API","title":"Rimu.get_metadata","text":"get_metadata(report::Report, key)\n\nGet metadata key from report. key is converted to a String.\n\nSee also report_metadata!, Report, report!.\n\n\n\n\n\n","category":"method"},{"location":"API.html#Rimu.initialise_shift_parameters","page":"API","title":"Rimu.initialise_shift_parameters","text":"initialise_shift_parameters(s::ShiftStrategy, shift, norm, time_step, counter=0, shift_mode=false)\n\nInitiatlise a struct to store the shift parameters.\n\nSee ShiftStrategy, update_shift_parameters!, DefaultShiftParameters.\n\n\n\n\n\n","category":"function"},{"location":"API.html#Rimu.lomc!-Tuple{Any, Any}","page":"API","title":"Rimu.lomc!","text":"lomc!(ham::AbstractHamiltonian, [v]; kwargs...) -> df, state\nlomc!(state::ReplicaState, [df]; kwargs...) -> df, state\n\nLinear operator Monte Carlo: Perform a projector quantum Monte Carlo simulation for determining the lowest eigenvalue of ham. The details of the simulation are controlled by the optional keyword arguments and by the type of the optional starting vector v. Alternatively, a ReplicaState can be passed in to continue a previous simulation.\n\nCommon keyword arguments and defaults:\n\nlaststep = 100 - controls the number of steps.\ndτ = 0.01 - time step.\ntargetwalkers = 1000 - target for the 1-norm of the coefficient vector.\naddress = starting_address(ham) - set starting address for default v and shift.\nstyle = IsStochasticInteger() - set StochasticStyle for default v; unused if v is specified.\ninitiator = NonInitiator() - set InitiatorRule for default v; unused if v is specified.\nthreading - default is to use multithreading and MPI if multiple threads are available. Set to true to force PDVec for the starting vector, false for serial computation; unused if v is specified.\nshift = diagonal_element(ham, address) - initial value of shift.\npost_step_strategy::NTuple{N,<:PostStepStrategy} = () - extract observables (e.g. ProjectedEnergy), see PostStepStrategy. (Deprecated: post_step is accepted as an alias for post_step_strategy.)\nreplica_strategy::ReplicaStrategy = NoStats(1) - run several synchronised simulations, see ReplicaStrategy. (Deprecated: replica is accepted as an alias for replica_strategy.)\nreporting_strategy::ReportingStrategy = ReportDFAndInfo() - how and when to report results, see ReportingStrategy. (Deprecated: r_strat is accepted as an alias for reporting_strategy.)\nname = \"lomc!\" - name displayed in progress bar (via ProgressLogging)\nmetadata - user-supplied metadata to be added to the report df. Must be an iterable of pairs or a NamedTuple, e.g. metadata = (\"key1\" => \"value1\", \"key2\" => \"value2\"). All metadata is converted to strings.\n\nSome metadata is automatically added to the report df including Rimu.PACKAGE_VERSION and data from state.\n\nReturn values\n\nlomc! returns a named tuple with the following fields:\n\ndf: a DataFrame with all statistics being reported.\nstate: a ReplicaState that can be used for continuations.\n\nExample\n\njulia> address = BoseFS(1,2,3);\n\njulia> hamiltonian = HubbardReal1D(address);\n\njulia> df1, state = lomc!(hamiltonian; targetwalkers=500, laststep=100);\n\njulia> df2, _ = lomc!(state, df1; laststep=200, metadata=(;info=\"cont\")); # Continuation run\n\njulia> size(df1)\n(100, 9)\n\njulia> size(df2)\n(200, 9)\n\njulia> using DataFrames; metadata(df2, \"info\") # retrieve custom metadata\n\"cont\"\n\njulia> metadata(df2, \"hamiltonian\") # some metadata is automatically added\n\"HubbardReal1D(fs\\\"|1 2 3⟩\\\"; u=1.0, t=1.0)\"\n\nFurther keyword arguments and defaults:\n\nτ_strat::TimeStepStrategy = ConstantTimeStep() - adjust time step or not, see TimeStepStrategy\ns_strat::ShiftStrategy = DoubleLogUpdate(; target_walkers=targetwalkers, ζ = 0.08, ξ = ζ^2/4) - how to update the shift, see ShiftStrategy.\nmaxlength = 2 * s_strat.target_walkers + 100 - upper limit on the length of v; when reached, lomc! will abort\nwm - working memory for re-use in subsequent calculations; is mutated.\ndf = DataFrame() - when called with AbstractHamiltonian argument, a DataFrame can be passed for merging with the report df.\n\nThe default choice for the starting vector is v = default_starting_vector(; address, style, threading, initiator). See default_starting_vector, PDVec, DVec, StochasticStyle, and InitiatorRule.\n\nwarning: Warning\nThe use of this lomc! is deprecated. Use ProjectorMonteCarloProblem and solve instead.\n\n\n\n\n\n","category":"method"},{"location":"API.html#Rimu.num_replicas-Union{Tuple{ReplicaStrategy{N}}, Tuple{N}} where N","page":"API","title":"Rimu.num_replicas","text":"num_replicas(state_or_strategy)\n\nReturn the number of replicas used in the simulation.\n\n\n\n\n\n","category":"method"},{"location":"API.html#Rimu.num_spectral_states-Union{Tuple{Rimu.SpectralStrategy{S}}, Tuple{S}} where S","page":"API","title":"Rimu.num_spectral_states","text":"num_spectral_states(state_or_strategy)\n\nReturn the number of spectral states used in the simulation.\n\n\n\n\n\n","category":"method"},{"location":"API.html#Rimu.post_step_action","page":"API","title":"Rimu.post_step_action","text":"post_step_action(::PostStepStrategy, ::SingleState, step) -> kvpairs\n\nCompute statistics after FCIQMC step. Should return a tuple of :key => value pairs. This function is only called every reporting_interval steps, as defined by the ReportingStrategy.\n\nSee also PostStepStrategy, ReportingStrategy.\n\n\n\n\n\n","category":"function"},{"location":"API.html#Rimu.refine_reporting_strategy-Tuple{ReportingStrategy}","page":"API","title":"Rimu.refine_reporting_strategy","text":"refine_reporting_strategy(reporting_strategy::ReportingStrategy) -> reporting_strategy\n\nInitialize the reporting strategy. This can be used to set up filenames or other attributes that need to be unique for a run of FCIQMC.\n\n\n\n\n\n","category":"method"},{"location":"API.html#Rimu.replace_keys-Tuple{NamedTuple, Any}","page":"API","title":"Rimu.replace_keys","text":"replace_keys(nt::NamedTuple, (:old1 => :new1, :old2 => :new2, ...))\n\nReplace keys in a NamedTuple with new keys. This is useful for renaming fields in a NamedTuple. Ignores keys that are not present in the NamedTuple.\n\n\n\n\n\n","category":"method"},{"location":"API.html#Rimu.replica_stats","page":"API","title":"Rimu.replica_stats","text":"replica_stats(RS::ReplicaStrategy{N}, spectral_states::NTuple{N,SingleState}) -> (names, values)\n\nReturn the names and values of statistics related to N replica states consistent with the ReplicaStrategy RS. names should be a tuple of Symbols or Strings and values should be a tuple of the same length. This function will be called every reporting_interval steps from ProjectorMonteCarloProblem, or once per time step if reporting_interval is not defined.\n\nPart of the ReplicaStrategy interface. See also SingleState.\n\n\n\n\n\n","category":"function"},{"location":"API.html#Rimu.report!-Tuple{ReportingStrategy, Any, Vararg{Any}}","page":"API","title":"Rimu.report!","text":" report!(::ReportingStrategy, step, report::Report, keys, values, id=\"\")\n report!(::ReportingStrategy, step, report::Report, nt, id=\"\")\n\nReport keys and values to report, which will be converted to a DataFrame before ProjectorMonteCarloProblem exits. Alternatively, a nt::NamedTuple can be passed in place of keys and values. If id is specified, it is appended to all keys. This is used to differentiate between values reported by different replicas.\n\nTo overload this function for a new ReportingStrategy, overload report!(::ReportingStrategy, step, args...) and apply the report by calling report!(args...).\n\n\n\n\n\n","category":"method"},{"location":"API.html#Rimu.report!-Tuple{Rimu.Report, DataFrame}","page":"API","title":"Rimu.report!","text":"report!(report::Report, df::DataFrame)\n\nConvert the DataFrame df to a Report. This function does not copy the data.\n\n\n\n\n\n","category":"method"},{"location":"API.html#Rimu.report!-Tuple{Rimu.Report, Union{AbstractString, Symbol}, Any}","page":"API","title":"Rimu.report!","text":"report!(report, keys, values, id=\"\")\nreport!(report, pairs, id=\"\")\n\nWrite keys, values pairs to report that will be converted to a DataFrame later. Alternatively, a named tuple or a collection of pairs can be passed instead of keys and values.\n\nThe value of id is appended to the name of the column, e.g. report!(report, :key, value, :_1) will report value to a column named :key_1.\n\n\n\n\n\n","category":"method"},{"location":"API.html#Rimu.report_after_step!-Tuple{ReportingStrategy, Any, Any, Vararg{Any}}","page":"API","title":"Rimu.report_after_step!","text":"report_after_step!(::ReportingStrategy, step, report, state) -> report\n\nThis function is called at the very end of a step, after reporting_interval steps. It may modify the report.\n\n\n\n\n\n","category":"method"},{"location":"API.html#Rimu.report_metadata!-Tuple{Rimu.Report, Any, Any}","page":"API","title":"Rimu.report_metadata!","text":"report_metadata!(report::Report, key, value)\nreport_metadata!(report::Report, kvpairs)\n\nSet metadata key to value in report. key and value are converted to Strings. Alternatively, an iterable of key-value pairs or a NamedTuple can be passed.\n\nSee also get_metadata, report!, Report.\n\n\n\n\n\n","category":"method"},{"location":"API.html#Rimu.reporting_interval-Tuple{ReportingStrategy}","page":"API","title":"Rimu.reporting_interval","text":"reporting_interval(::ReportingStrategy)\n\nGet the interval between steps for which non-essential statistics are reported. Defaults to 1 if chosen ReportingStrategy does not specify an interval.\n\n\n\n\n\n","category":"method"},{"location":"API.html#Rimu.set_up_initial_shift_parameters-Union{Tuple{R}, Tuple{S}, Tuple{FCIQMC, Any, StaticArraysCore.SMatrix{S, R}, Any, Any}} where {S, R}","page":"API","title":"Rimu.set_up_initial_shift_parameters","text":"set_up_initial_shift_parameters(\n    algorithm::FCIQMC, hamiltonian, starting_vectors, shift, time_step, initial_shift_parameters\n)\n\nSet up the initial shift parameters for the FCIQMC algorithm.\n\n\n\n\n\n","category":"method"},{"location":"API.html#Rimu.single_particle_density-Tuple{Any}","page":"API","title":"Rimu.single_particle_density","text":"single_particle_density(dvec; component)\nsingle_particle_density(add; component)\n\nCompute the diagonal single particle density of vector dvec or address add. If the component argument is given, only that component of the addresses is taken into account. The result is always normalized so that sum(result) ≈ num_particles(address).\n\nExamples\n\njulia> v = DVec(fs\"|⋅↑⇅↓⋅⟩\" => 1.0, fs\"|↓↓⋅↑↑⟩\" => 0.5)\nDVec{FermiFS2C{2, 2, 5, 4, FermiFS{2, 5, BitString{5, 1, UInt8}}, FermiFS{2, 5, BitString{5, 1, UInt8}}},Float64} with 2 entries, style = IsDeterministic{Float64}()\n  fs\"|↓↓⋅↑↑⟩\" => 0.5\n  fs\"|⋅↑⇅↓⋅⟩\" => 1.0\n\njulia> single_particle_density(v)\n(0.2, 1.0, 1.6, 1.0, 0.2)\n\njulia> single_particle_density(v; component=1)\n(0.0, 1.6, 1.6, 0.4, 0.4)\n\nSee also\n\nSingleParticleDensity\n\n\n\n\n\n","category":"method"},{"location":"API.html#Rimu.smart_logger-Tuple","page":"API","title":"Rimu.smart_logger","text":"smart_logger(args...)\n\nEnable terminal progress bar during interactive use (i.e. unless running on CI or HPC). Arguments are passed on to the logger. This is run once during Rimu startup. Undo with default_logger or by setting Base.global_logger().\n\n\n\n\n\n","category":"method"},{"location":"API.html#Rimu.state_vectors-Tuple{R} where R<:Rimu.ReplicaState","page":"API","title":"Rimu.state_vectors","text":"state_vectors(state::ReplicaState)\nstate_vectors(sim::PMCSimulation)\n\nReturn an AbstractMatrix of configuration vectors from the state. The vectors can be accessed by indexing the resulting collection, where the row index corresponds to the replica index and the column index corresponds to the spectral state index.\n\nSee also SingleState, ReplicaState, SpectralState, PMCSimulation.\n\n\n\n\n\n","category":"method"},{"location":"API.html#Rimu.update_shift_parameters!","page":"API","title":"Rimu.update_shift_parameters!","text":"update_shift_parameters!(\n    s <: ShiftStrategy,\n    shift_parameters,\n    tnorm,\n    v_new,\n    v_old,\n    step,\n    report\n) -> shift_stats, proceed\n\nUpdate the shift_parameters according to strategy s. See ShiftStrategy. Returns a named tuple of the shift statistics and a boolean proceed indicating whether the simulation should proceed.\n\nSee initialise_shift_parameters, ShiftStrategy.\n\n\n\n\n\n","category":"function"},{"location":"API.html#Rimu.update_time_step-Tuple{ConstantTimeStep, Any, Vararg{Any}}","page":"API","title":"Rimu.update_time_step","text":"update_time_step(s<:TimeStepStrategy, time_step, tnorm) -> new_time_step\n\nUpdate the time step according to the strategy s.\n\n\n\n\n\n","category":"method"},{"location":"API.html#Reexported-Submodules","page":"API","title":"Reexported Submodules","text":"","category":"section"},{"location":"API.html#ExactDiagonalization","page":"API","title":"ExactDiagonalization","text":"","category":"section"},{"location":"API.html","page":"API","title":"API","text":"See Exact Diagonalization","category":"page"},{"location":"API.html#Interfaces","page":"API","title":"Interfaces","text":"","category":"section"},{"location":"API.html","page":"API","title":"API","text":"See Module Interfaces","category":"page"},{"location":"API.html#StochasticStyles","page":"API","title":"StochasticStyles","text":"","category":"section"},{"location":"API.html","page":"API","title":"API","text":"See Module StochasticStyles","category":"page"},{"location":"API.html#Hamiltonians","page":"API","title":"Hamiltonians","text":"","category":"section"},{"location":"API.html","page":"API","title":"API","text":"See Module Hamiltonians","category":"page"},{"location":"API.html#BitStringAddresses","page":"API","title":"BitStringAddresses","text":"","category":"section"},{"location":"API.html","page":"API","title":"API","text":"See Module BitStringAddresses","category":"page"},{"location":"API.html#DictVectors","page":"API","title":"DictVectors","text":"","category":"section"},{"location":"API.html","page":"API","title":"API","text":"See Module DictVectors","category":"page"},{"location":"API.html#StatsTools","page":"API","title":"StatsTools","text":"","category":"section"},{"location":"API.html","page":"API","title":"API","text":"See Module StatsTools","category":"page"},{"location":"API.html#RMPI","page":"API","title":"RMPI","text":"","category":"section"},{"location":"API.html","page":"API","title":"API","text":"See Module RMPI","category":"page"},{"location":"API.html#Index","page":"API","title":"Index","text":"","category":"section"},{"location":"API.html","page":"API","title":"API","text":"","category":"page"},{"location":"stochasticstyles.html#Module-StochasticStyles","page":"Stochastic styles","title":"Module StochasticStyles","text":"","category":"section"},{"location":"stochasticstyles.html","page":"Stochastic styles","title":"Stochastic styles","text":"StochasticStyles","category":"page"},{"location":"stochasticstyles.html#Rimu.StochasticStyles","page":"Stochastic styles","title":"Rimu.StochasticStyles","text":"This module provides concrete implementations of StochasticStyles, which specify the algorithm used by ProjectorMonteCarloProblem when performing stochastic matrix-vector multiplication.\n\nImplemented stochastic styles:\n\nStochasticStyle: abstract type for stochastic styles\nIsStochasticInteger\nIsDeterministic\nIsStochasticWithThreshold\nIsDynamicSemistochastic\nStyleUnknown\n\nThe offdiagonal spawning is defined in spawning.jl and is controlled by setting a SpawningStrategy.\n\nThe vector compression strategies are defined in compression.jl and are controlled by setting a CompressionStrategy.\n\n\n\n\n\n","category":"module"},{"location":"stochasticstyles.html#Available-StochasticStyles","page":"Stochastic styles","title":"Available StochasticStyles","text":"","category":"section"},{"location":"stochasticstyles.html","page":"Stochastic styles","title":"Stochastic styles","text":"StyleUnknown","category":"page"},{"location":"stochasticstyles.html#Rimu.Interfaces.StyleUnknown","page":"Stochastic styles","title":"Rimu.Interfaces.StyleUnknown","text":"StyleUnknown{T}() <: StochasticStyle\n\nTrait for value types not (currently) compatible with FCIQMC. This style makes it possible to construct dict vectors with unsupported valtypes.\n\nSee also StochasticStyle.\n\n\n\n\n\n","category":"type"},{"location":"stochasticstyles.html","page":"Stochastic styles","title":"Stochastic styles","text":"Modules = [StochasticStyles]\nPages = [\"styles.jl\"]","category":"page"},{"location":"stochasticstyles.html#Rimu.StochasticStyles.IsDeterministic","page":"Stochastic styles","title":"Rimu.StochasticStyles.IsDeterministic","text":"IsDeterministic{T=Float64}(compression=NoCompression()) <: StochasticStyle{T}\n\nPropagate with deterministic vector matrix multiplications. Stochastic compression of the resultant vector (after annihilations) can be triggered by setting the optional compression argument to a relevant CompressionStrategy.\n\nSee also StochasticStyle.\n\n\n\n\n\n","category":"type"},{"location":"stochasticstyles.html#Rimu.StochasticStyles.IsDynamicSemistochastic","page":"Stochastic styles","title":"Rimu.StochasticStyles.IsDynamicSemistochastic","text":"IsDynamicSemistochastic{T=Float64}(; kwargs...) <: StochasticStyle{T}\n\nQMC propagation with floating-point walker numbers and reduced noise. All possible spawns (offdiagonal elements in vector-matrix multiplication) are performed deterministically when number of walkers in a configuration is high, as controlled by the rel_spawning_threshold and abs_spawning_threshold keywords. Stochastic selection of spawns is controlled by the spawning keyword.\n\nBy default, a stochastic vector compression is applied after annihilations are completed. This behaviour can be changed to on-the-fly projection (as in IsStochasticInteger or IsStochasticWithThreshold) by setting late_compression=false, or modifying spawning and compression. See parameters below for a more detailed explanation.\n\nParameters:\n\nthreshold = 1.0: Values below this number are stochastically projected to this value or zero. See also ThresholdCompression.\nlate_compression = true: If this is set to true, stochastic vector compression is performed after all the spawns are performed. If it is set to false, values are stochastically projected as they are being spawned. late_compression=true is equivalent to setting compression=ThresholdCompression(threshold) and spawning=WithReplacement().  late_compression=false is equivalent to compression=NoCompression() and spawning=WithReplacement(threshold).\nrel_spawning_threshold = 1.0: If the walker number on a configuration times this threshold is greater than the number of offdiagonals, spawning is done deterministically. Should be set to 1 or more for best performance.\nabs_spawning_threshold = Inf: If the walker number on a configuration is greater than this value, spawning is done deterministically. Can be set to e.g.  abs_spawning_threshold = 0.1 * target_walkers.\nspawning = WithReplacement(): SpawningStrategy to use for the non-exact spawns.\ncompression = ThresholdCompression(threshold): CompressionStrategy used to compress the vector after a step. Overrides threshold.\n\nSee also StochasticStyle.\n\n\n\n\n\n","category":"type"},{"location":"stochasticstyles.html#Rimu.StochasticStyles.IsStochastic2Pop","page":"Stochastic styles","title":"Rimu.StochasticStyles.IsStochastic2Pop","text":"IsStochastic2Pop{T=Complex{Int}}() <: StochasticStyle{T}\n\nStochastic propagation with complex walker numbers representing two populations of integer walkers.\n\nWhen using this style, make sure to set a complex number as target walkers in the ShiftStrategy!\n\nThis style is experimental.\n\nSee also StochasticStyle.\n\n\n\n\n\n","category":"type"},{"location":"stochasticstyles.html#Rimu.StochasticStyles.IsStochasticInteger","page":"Stochastic styles","title":"Rimu.StochasticStyles.IsStochasticInteger","text":"IsStochasticInteger{T=Int}() <: StochasticStyle{T}\n\nFCIQMC algorithm with integer walkers as in Booth et al. (2009). During the vector matrix product each individual diagonal and spawning step is rounded stochastically to a nearby integer value.\n\nSee also StochasticStyle.\n\n\n\n\n\n","category":"type"},{"location":"stochasticstyles.html#Rimu.StochasticStyles.IsStochasticWithThreshold","page":"Stochastic styles","title":"Rimu.StochasticStyles.IsStochasticWithThreshold","text":"IsStochasticWithThreshold{T=Float64}(threshold=1.0) <: StochasticStyle{T}\n\nStochastic propagation with floating point walker numbers. During the vector matrix product each individual diagonal and spawning result is rounded stochastically if smaller than threshold (before annihilations). For a more customizable stochastic style, see IsDynamicSemistochastic.\n\nSee also StochasticStyle.\n\n\n\n\n\n","category":"type"},{"location":"stochasticstyles.html#The-StochasticStyle-interface","page":"Stochastic styles","title":"The StochasticStyle interface","text":"","category":"section"},{"location":"stochasticstyles.html","page":"Stochastic styles","title":"Stochastic styles","text":"StochasticStyle\nstep_stats\napply_column!\ndefault_style","category":"page"},{"location":"stochasticstyles.html#Rimu.Interfaces.StochasticStyle","page":"Stochastic styles","title":"Rimu.Interfaces.StochasticStyle","text":"StochasticStyle(v)\n\nAbstract type. When called as a function it returns the native style of the generalised vector v that determines how simulations are to proceed.\n\nUsage\n\nConcrete StochasticStyles can be used for the style keyword argument of ProjectorMonteCarloProblem, DVec and PDVec. The following styles are available:\n\nIsStochasticInteger\nIsDeterministic\nIsStochasticWithThreshold\nIsDynamicSemistochastic\nStyleUnknown\n\nExtended Help\n\nInterface\n\nWhen defining a new StochasticStyle, subtype it as MyStyle<:StochasticStyle{T} where T is the concrete value type the style is designed to work with.\n\nFor it to work with ProjectorMonteCarloProblem, a StochasticStyle must define the following:\n\napply_column!(::StochasticStyle, w, H, address, value)\nstep_stats(::StochasticStyle)\n\nand optionally\n\nCompressionStrategy(::StochasticStyle) for vector compression after annihilations,\n\nSee also StochasticStyles, Interfaces.\n\n\n\n\n\n","category":"type"},{"location":"stochasticstyles.html#Rimu.Interfaces.step_stats","page":"Stochastic styles","title":"Rimu.Interfaces.step_stats","text":"step_stats(::StochasticStyle)\nstep_stats(::CompressionStrategy)\n\nReturn a tuple of stat names (Symbol or String) and a tuple of zeros of the same length. These will be reported as columns in the DataFrame returned by ProjectorMonteCarloProblem.\n\n\n\n\n\n","category":"function"},{"location":"stochasticstyles.html#Rimu.Interfaces.apply_column!","page":"Stochastic styles","title":"Rimu.Interfaces.apply_column!","text":"apply_column!(v, op, addr, num, boost=1) -> stats::Tuple\n\nApply the product of column addr of the operator op and the scalar num to the vector v according to the StochasticStyle of v. By expectation value this should be equivalent to\n\nv .+= op[:, add] .* num\n\nThis is used to perform the spawning step in FCIQMC and to implement operator-vector multiplications. Mutates v and reports spawning statistics.\n\nThe boost argument multiplicatively increases the number of spawns to be performed without affecting the expectation value of the procedure.\n\n\n\n\n\n","category":"function"},{"location":"stochasticstyles.html#Rimu.Interfaces.default_style","page":"Stochastic styles","title":"Rimu.Interfaces.default_style","text":"default_style(::Type)\n\nPick a StochasticStyle based on the value type. Returns StyleUnknown if no known default style is set.\n\n\n\n\n\n","category":"function"},{"location":"stochasticstyles.html#Compression-strategies","page":"Stochastic styles","title":"Compression strategies","text":"","category":"section"},{"location":"stochasticstyles.html","page":"Stochastic styles","title":"Stochastic styles","text":"CompressionStrategy\nNoCompression\nStochasticStyles.ThresholdCompression\ncompress!","category":"page"},{"location":"stochasticstyles.html#Rimu.Interfaces.CompressionStrategy","page":"Stochastic styles","title":"Rimu.Interfaces.CompressionStrategy","text":"CompressionStrategy\n\nThe CompressionStrategy controls how a vector is compressed after a step.\n\nDefault implementation:\n\nNoCompression: no vector compression\n\nUsage\n\nA subtype of CompressionStrategy can be passed as a keyword argument to the constructors for some StochasticStyles. Calling CompressionStrategy(s::StochasticStyle) returns a relevant subtype. The default is NoCompression.\n\nInterface\n\nWhen defining a new CompressionStrategy, subtype it as MyCompressionStrategy <: CompressionStrategy and define these methods:\n\ncompress!(s::CompressionStrategy, v)\ncompress!(s::CompressionStrategy, w, v)\nstep_stats(s::CompressionStrategy)\n\n\n\n\n\n","category":"type"},{"location":"stochasticstyles.html#Rimu.Interfaces.NoCompression","page":"Stochastic styles","title":"Rimu.Interfaces.NoCompression","text":"NoCompression <: CompressionStrategy end\n\nDefault CompressionStrategy. Leaves the vector intact.\n\n\n\n\n\n","category":"type"},{"location":"stochasticstyles.html#Rimu.StochasticStyles.ThresholdCompression","page":"Stochastic styles","title":"Rimu.StochasticStyles.ThresholdCompression","text":"ThresholdCompression(threshold=1) <: CompressionStrategy\n\nCompressionStrategy that compresses a vector by threshold projection. Every entry in the vector with a value below the threshold is either set to zero, or increased to the threshold. The probabilty of setting it to zero is equal to abs(value) / threshold.\n\n\n\n\n\n","category":"type"},{"location":"stochasticstyles.html#Rimu.Interfaces.compress!","page":"Stochastic styles","title":"Rimu.Interfaces.compress!","text":"compress!([::CompressionStrategy,] v) -> ::NTuple{N,::Symbol}, ::NTuple{N}\ncompress!([::CompressionStrategy,] w, v) -> ::NTuple{N,::Symbol}, ::NTuple{N}\n\nCompress the vector v. The one-argument version compresses the vector in-place. The two-argument vector stores the result in w. The CompressionStrategy associated with the StochasticStyle of v is used to determine the type of compression.\n\nReturns two tuples, containing the names and values of statistics that are to be reported.\n\n\n\n\n\n","category":"function"},{"location":"stochasticstyles.html#Spawning-strategies-and-convenience-functions","page":"Stochastic styles","title":"Spawning strategies and convenience functions","text":"","category":"section"},{"location":"stochasticstyles.html","page":"Stochastic styles","title":"Stochastic styles","text":"The following functions and types are unexported, but are useful when defining new styles.","category":"page"},{"location":"stochasticstyles.html","page":"Stochastic styles","title":"Stochastic styles","text":"Modules = [StochasticStyles]\nPages = [\"spawning.jl\"]\nOrder = [:function,:method,:type]","category":"page"},{"location":"stochasticstyles.html#Rimu.StochasticStyles.diagonal_step!","page":"Stochastic styles","title":"Rimu.StochasticStyles.diagonal_step!","text":"diagonal_step!(w, op, add, val, threshold=0) -> (clones, deaths, zombies)\n\nPerform diagonal step on a walker add => val. Optional argument threshold sets the projection threshold. If eltype(w) is an Integer, the val is rounded to the nearest integer stochastically.\n\n\n\n\n\n","category":"function"},{"location":"stochasticstyles.html#Rimu.StochasticStyles.projected_deposit!","page":"Stochastic styles","title":"Rimu.StochasticStyles.projected_deposit!","text":"projected_deposit!(w, add, val, parent, threshold=0)\n\nLike deposit!, but performs threshold projection before spawning. If eltype(w) is an Integer, values are stochastically rounded.\n\nReturns the value deposited.\n\n\n\n\n\n","category":"function"},{"location":"stochasticstyles.html#Rimu.StochasticStyles.spawn!","page":"Stochastic styles","title":"Rimu.StochasticStyles.spawn!","text":"spawn!(s::SpawningStrategy, w, op::AbstractHamiltonian, add, val, boost)\nspawn!(s::SpawningStrategy, w, offdiags::AbstractOffdiagonals, add, val, boost)\n\nPerform stochastic spawns to w from address add with val walkers. val * boost controls the number of spawns performed.\n\nThis function should be overloaded in the second form, with offdiags as an argument.\n\nSee SpawningStrategy.\n\n\n\n\n\n","category":"function"},{"location":"stochasticstyles.html#Rimu.StochasticStyles.Bernoulli","page":"Stochastic styles","title":"Rimu.StochasticStyles.Bernoulli","text":"Bernoulli(threshold=0.0) <: SpawningStrategy\n\nPerform Bernoulli sampling. A spawn is attempted on each offdiagonal element with a probability that results in an expected number of spawns equal to the number of walkers on the spawning configuration. This is significantly less efficient than WithReplacement.\n\nIf the number of spawn attempts is greater than the number of offdiagonals, this functions like Exact, but is less efficient. For best performance, this strategy is to be used as a substrategy of DynamicSemistochastic.\n\nParameters\n\nthreshold sets the projection threshold.\n\nspawn! with this strategy returns the number of spawn attempts and the number of spawns.\n\n\n\n\n\n","category":"type"},{"location":"stochasticstyles.html#Rimu.StochasticStyles.DynamicSemistochastic","page":"Stochastic styles","title":"Rimu.StochasticStyles.DynamicSemistochastic","text":"DynamicSemistochastic(; strat, rel_threshold, abs_threshold) <: SpawningStrategy\n\nSpawningStrategy that behaves like strat when the number of walkers is low, but performs exact steps when it is high. What \"high\" means is controlled by the two thresholds described below.\n\nParameters\n\nstrat = WithReplacement(): a SpawningStrategy to use when the multiplication is not performed exactly. If the strat has a threshold different from zero, all spawns will be projected to that threshold.\nrel_threshold = 1.0: When deciding on whether to perform an exact spawn, this value is multiplied to the number of walkers. Should be set to 1 or more for best performance. This threshold is affected by the boost argument to spawn!.\nabs_threshold = Inf: When deciding on whether to perform an exact spawn, min(abs_threshold, num_offdiagonals) is used. This threshold is not affected by the boost argument to spawn!.\n\nSee e.g. WithoutReplacement for a description of the strat.threshold parameter.\n\nspawn! with this strategy returns the numbers of exact and inexact spawns, the number of spawn attempts and the number of spawns.\n\n\n\n\n\n","category":"type"},{"location":"stochasticstyles.html#Rimu.StochasticStyles.Exact","page":"Stochastic styles","title":"Rimu.StochasticStyles.Exact","text":"Exact(threshold=0.0) <: SpawningStrategy\n\nPerform an exact spawning step.\n\nParameters\n\nthreshold sets the projection threshold. If set to zero, no projection is performed.\n\nspawn! with this strategy returns the number of spawn attempts and the number of spawns.\n\n\n\n\n\n","category":"type"},{"location":"stochasticstyles.html#Rimu.StochasticStyles.SingleSpawn","page":"Stochastic styles","title":"Rimu.StochasticStyles.SingleSpawn","text":"SingleSpawn(threshold=0.0) <: SpawningStrategy\n\nPerform a single spawn. Useful as a building block for other stochastic styles.\n\nParameters\n\nthreshold sets the projection threshold. If set to zero, no projection is performed.\n\nspawn! with this strategy returns the number of spawn attempts (always 1) and the number of spawns.\n\n\n\n\n\n","category":"type"},{"location":"stochasticstyles.html#Rimu.StochasticStyles.SpawningStrategy","page":"Stochastic styles","title":"Rimu.StochasticStyles.SpawningStrategy","text":"SpawningStrategy\n\nA SpawningStrategy is used to control how spawns (multiplies with off-diagonal part of the column vector) are performed and can be passed to some of the StochasticStyles as keyword arguments.\n\nThe following concrete implementations are provided:\n\nExact: Perform exact spawns. Used by IsDeterministic.\nWithReplacement: The default stochastic spawning strategy. Spawns are chosen with replacement.\nDynamicSemistochastic: Behave like Exact when the number of spawns performed is high, and like a different substrategy otherwise. Used by IsDynamicSemistochastic.\nSingleSpawn: Perform a single spawn only. Used as a building block for other strategies.\nWithoutReplacement: Similar to WithReplacement, but ensures each spawn is only performed once. Only to be used as a substrategy of DynamicSemistochastic.\nBernoulli: Each spawn is attempted with a fixed probability. Only to be used as a substrategy of DynamicSemistochastic.\n\nInterface\n\nIn order to implement a new SpawningStrategy, define a method for spawn!.\n\n\n\n\n\n","category":"type"},{"location":"stochasticstyles.html#Rimu.StochasticStyles.WithReplacement","page":"Stochastic styles","title":"Rimu.StochasticStyles.WithReplacement","text":"WithReplacement(threshold=0.0) <: SpawningStrategy\n\nSpawningStrategy where spawn targets are sampled with replacement. This is the default spawning strategy for most of the StochasticStyles.\n\nParameters\n\nthreshold sets the projection threshold. If set to zero, no projection is performed.\n\nspawn! with this strategy returns the number of spawn attempts and the number of spawns.\n\n\n\n\n\n","category":"type"},{"location":"stochasticstyles.html#Rimu.StochasticStyles.WithoutReplacement","page":"Stochastic styles","title":"Rimu.StochasticStyles.WithoutReplacement","text":"WithoutReplacement(threshold=0.0) <: SpawningStrategy\n\nSpawningStrategy where spawn targets are sampled without replacement. This strategy needs to allocate a temporary array during spawning, which makes it significantly less efficient than WithReplacement.\n\nIf the number of spawn attempts is greater than the number of offdiagonals, this functions like Exact, but is less efficient. For best performance, this strategy is to be used as a substrategy of DynamicSemistochastic.\n\nParameters\n\nthreshold sets the projection threshold. If set to zero, no projection is performed.\n\nspawn! with this strategy returns the number of spawn attempts and the number of spawns.\n\n\n\n\n\n","category":"type"},{"location":"stochasticstyles.html#Index","page":"Stochastic styles","title":"Index","text":"","category":"section"},{"location":"stochasticstyles.html","page":"Stochastic styles","title":"Stochastic styles","text":"Pages   = [\"stochasticstyles.md\"]","category":"page"},{"location":"generated/BHM-example-mpi.html","page":"Rimu with MPI","title":"Rimu with MPI","text":"EditURL = \"../../../scripts/BHM-example-mpi.jl\"","category":"page"},{"location":"generated/BHM-example-mpi.html#Example-2:-Rimu-with-MPI","page":"Rimu with MPI","title":"Example 2: Rimu with MPI","text":"","category":"section"},{"location":"generated/BHM-example-mpi.html","page":"Rimu with MPI","title":"Rimu with MPI","text":"In this example, we will demonstrate using Rimu with MPI. MPI is a standard for parallel and distributed computing, and it is widely used in high-performance computing. Rimu provides support for MPI to enable parallel computations on multiple nodes.","category":"page"},{"location":"generated/BHM-example-mpi.html","page":"Rimu with MPI","title":"Rimu with MPI","text":"A runnable script for this example is located here. Run it with 2 MPI ranks with mpirun -n 2 julia BHM-example-mpi.jl.","category":"page"},{"location":"generated/BHM-example-mpi.html","page":"Rimu with MPI","title":"Rimu with MPI","text":"We start by importing Rimu and Rimu.RMPI, which contains MPI-related functionality.","category":"page"},{"location":"generated/BHM-example-mpi.html","page":"Rimu with MPI","title":"Rimu with MPI","text":"using Rimu\nusing Rimu.RMPI","category":"page"},{"location":"generated/BHM-example-mpi.html","page":"Rimu with MPI","title":"Rimu with MPI","text":"Note that it is not necessary to initialise the MPI library, as this is already done automatically when Rimu is loaded.","category":"page"},{"location":"generated/BHM-example-mpi.html","page":"Rimu with MPI","title":"Rimu with MPI","text":"We will compute the ground state of a Bose-Hubbard model in momentum space with 10 particles in 10 sites.","category":"page"},{"location":"generated/BHM-example-mpi.html","page":"Rimu with MPI","title":"Rimu with MPI","text":"First, we define the Hamiltonian. We want to start from an address with zero momentum, which is located at mode 5 in the momentum grid. We put all 10 particles, all in the zero momentum mode.","category":"page"},{"location":"generated/BHM-example-mpi.html","page":"Rimu with MPI","title":"Rimu with MPI","text":"address = BoseFS(10, 5 => 10)","category":"page"},{"location":"generated/BHM-example-mpi.html","page":"Rimu with MPI","title":"Rimu with MPI","text":"BoseFS{10,10}(0, 0, 0, 0, 10, 0, 0, 0, 0, 0)","category":"page"},{"location":"generated/BHM-example-mpi.html","page":"Rimu with MPI","title":"Rimu with MPI","text":"We will set the interaction strength u to 6.0. The hopping strength t defaults to 1.0.","category":"page"},{"location":"generated/BHM-example-mpi.html","page":"Rimu with MPI","title":"Rimu with MPI","text":"H = HubbardMom1D(address; u=6.0)","category":"page"},{"location":"generated/BHM-example-mpi.html","page":"Rimu with MPI","title":"Rimu with MPI","text":"HubbardMom1D(fs\"|0 0 0 0 10 0 0 0 0 0⟩\"; u=6.0, t=1.0)","category":"page"},{"location":"generated/BHM-example-mpi.html","page":"Rimu with MPI","title":"Rimu with MPI","text":"We set a reporting strategy. We will use ReportToFile, which writes the reports directly to a file. This is useful for MPI calculations, as they will typically run non-interactively. The reports will be written to disk and can be inspected later. This has the additional benefit of reducing memory use in long-running jobs, as we don't need to keep the results in memory. It also allows us to inspect the results before the computation finishes and recover some data if it fails.","category":"page"},{"location":"generated/BHM-example-mpi.html","page":"Rimu with MPI","title":"Rimu with MPI","text":"The default settings will ensure that only the root MPI rank will write to the file, which is reasonable, and that data is saved in chunks of 1000 time steps. We choose to suppress progress messages with setting io=devnull.","category":"page"},{"location":"generated/BHM-example-mpi.html","page":"Rimu with MPI","title":"Rimu with MPI","text":"reporting_strategy = ReportToFile(\n    filename=\"result.arrow\",\n    io=devnull\n)","category":"page"},{"location":"generated/BHM-example-mpi.html","page":"Rimu with MPI","title":"Rimu with MPI","text":"ReportToFile{Symbol}(\"result.arrow\", 1, 1000, true, false, Base.DevNull(), :zstd, nothing)","category":"page"},{"location":"generated/BHM-example-mpi.html","page":"Rimu with MPI","title":"Rimu with MPI","text":"For running parallel computations with MPI, it is important that a compatible state vector is used. Here we explicitly set up an MPI-enabled state vector, PDVec, which is automatically MPI-distributed over the available number of MPI ranks. In addition, threading will be used with all threads available to Julia.","category":"page"},{"location":"generated/BHM-example-mpi.html","page":"Rimu with MPI","title":"Rimu with MPI","text":"initial_vector = PDVec(address => 1.0; style=IsDynamicSemistochastic())","category":"page"},{"location":"generated/BHM-example-mpi.html","page":"Rimu with MPI","title":"Rimu with MPI","text":"1-element PDVec: style = IsDynamicSemistochastic{Float64,ThresholdCompression,DynamicSemistochastic}()\n  fs\"|0 0 0 0 10 0 0 0 0 0⟩\" => 1.0","category":"page"},{"location":"generated/BHM-example-mpi.html","page":"Rimu with MPI","title":"Rimu with MPI","text":"Now, we can set other parameters as usual. We will perform the computation with 10000 walkers and for 10000 time steps. We will also compute the projected energy by passing a ProjectedEnergy object as a post_step_strategy.","category":"page"},{"location":"generated/BHM-example-mpi.html","page":"Rimu with MPI","title":"Rimu with MPI","text":"problem = ProjectorMonteCarloProblem(H;\n    start_at=initial_vector,\n    reporting_strategy,\n    post_step_strategy=ProjectedEnergy(H, initial_vector),\n    target_walkers=10_000,\n    time_step=1e-4,\n    last_step=10_000\n);","category":"page"},{"location":"generated/BHM-example-mpi.html","page":"Rimu with MPI","title":"Rimu with MPI","text":"The @mpi_root macro performs an action on the root rank only, which is useful for printing.","category":"page"},{"location":"generated/BHM-example-mpi.html","page":"Rimu with MPI","title":"Rimu with MPI","text":"@mpi_root println(\"Running FCIQMC with \", mpi_size(), \" rank(s).\")","category":"page"},{"location":"generated/BHM-example-mpi.html","page":"Rimu with MPI","title":"Rimu with MPI","text":"Running FCIQMC with 1 rank(s).\n","category":"page"},{"location":"generated/BHM-example-mpi.html","page":"Rimu with MPI","title":"Rimu with MPI","text":"Finally, we can run the computation.","category":"page"},{"location":"generated/BHM-example-mpi.html","page":"Rimu with MPI","title":"Rimu with MPI","text":"simulation = solve(problem);\n\n@mpi_root println(\"Simulation success = \", simulation.success)","category":"page"},{"location":"generated/BHM-example-mpi.html","page":"Rimu with MPI","title":"Rimu with MPI","text":"Simulation success = true\n","category":"page"},{"location":"generated/BHM-example-mpi.html","page":"Rimu with MPI","title":"Rimu with MPI","text":"Once the calculation is done, the results are available in the arrow file on disk.","category":"page"},{"location":"generated/BHM-example-mpi.html","page":"Rimu with MPI","title":"Rimu with MPI","text":"In a typical workflow, the simulation results would be loaded from disk and analysed in the REPL or with a separate script. The arrow file can be loaded into a DataFrame with metadata using the load_df function.","category":"page"},{"location":"generated/BHM-example-mpi.html","page":"Rimu with MPI","title":"Rimu with MPI","text":"","category":"page"},{"location":"generated/BHM-example-mpi.html","page":"Rimu with MPI","title":"Rimu with MPI","text":"This page was generated using Literate.jl.","category":"page"},{"location":"index.html#Rimu.jl-Package-Guide","page":"Guide","title":"Rimu.jl Package Guide","text":"","category":"section"},{"location":"index.html","page":"Guide","title":"Guide","text":"Random Integrators for many-body quantum systems","category":"page"},{"location":"index.html","page":"Guide","title":"Guide","text":"The grand aim is to develop a toolbox for many-body quantum systems that can be represented by a Hamiltonian in second quantisation language. Currently supported features include:","category":"page"},{"location":"index.html#Interacting-with-quantum-many-body-models","page":"Guide","title":"Interacting with quantum many-body models","text":"","category":"section"},{"location":"index.html","page":"Guide","title":"Guide","text":"Full configuration interaction quantum Monte Carlo (FCIQMC), a flavour of projector quantum Monte Carlo for stochastically solving the time-independent Schrödinger equation. See References.\nMatrix-free exact diagonalisation of quantum Hamiltonians (with external package KrylovKit.jl).\nSparse matrix representation of quantum Hamiltonians for exact diagonalisation with sparse linear algebra package of your choice (fastest for small systems).","category":"page"},{"location":"index.html#Representing-quantum-many-body-models","page":"Guide","title":"Representing quantum many-body models","text":"","category":"section"},{"location":"index.html","page":"Guide","title":"Guide","text":"A composable and efficient type system for representing single- and multi-component Fock states of bosons, fermions, and mixtures thereof, to be used as a basis for representing Hamiltonians.\nAn interface for defining many-body Hamiltonians.\nPre-defined models include:\nHubbard model in real space for bosons and fermions and mixtures in 1, 2, and 3 spatial dimensions.\nHubbard and related lattice models in momentum space for bosons and fermions in one spatial dimension.\nTranscorrelated Hamiltonian for contact interactions in one dimension for fermions, as described in Jeszenski et al. arXiv:1806.11268.","category":"page"},{"location":"index.html#Statistical-analysis-of-Monte-Carlo-data","page":"Guide","title":"Statistical analysis of Monte Carlo data","text":"","category":"section"},{"location":"index.html","page":"Guide","title":"Guide","text":"Blocking analysis following Flyvberg & Peterson JCP (1989), and automated with hypothesis testing by Jonsson","category":"page"},{"location":"index.html","page":"Guide","title":"Guide","text":"PRE (2018).","category":"page"},{"location":"index.html","page":"Guide","title":"Guide","text":"Unbiased estimators for the ground state energy by re-reweighting following Nightingale & Blöte PRB (1986) and Umrigar et al. JCP (1993).","category":"page"},{"location":"index.html","page":"Guide","title":"Guide","text":"The code supports parallelisation with MPI (harnessing MPI.jl) as well as native Julia threading (experimental). In the future, we may add tools to solve the time-dependent Schrödinger equation and Master equations for open system time evolution.","category":"page"},{"location":"index.html","page":"Guide","title":"Guide","text":"Concept: Joachim Brand and Elke Pahl.","category":"page"},{"location":"index.html","page":"Guide","title":"Guide","text":"Contributors: Joachim Brand, Elke Pahl, Mingrui Yang, Matija Čufar, Chris Bradly.","category":"page"},{"location":"index.html","page":"Guide","title":"Guide","text":"Discussions, help, and additional contributions are acknowledged by Ali Alavi, Didier Adrien, Chris Scott (NeSI), Alexander Pletzer (NeSI).","category":"page"},{"location":"index.html#Installation","page":"Guide","title":"Installation","text":"","category":"section"},{"location":"index.html#Installing-Rimu-for-usage","page":"Guide","title":"Installing Rimu for usage","text":"","category":"section"},{"location":"index.html","page":"Guide","title":"Guide","text":"Rimu is a registered package and can be installed with the package manager. Hit the ] key at the Julia REPL to get into Pkg mode and type","category":"page"},{"location":"index.html","page":"Guide","title":"Guide","text":"pkg> add Rimu","category":"page"},{"location":"index.html","page":"Guide","title":"Guide","text":"Alternatively, use","category":"page"},{"location":"index.html","page":"Guide","title":"Guide","text":"julia> using Pkg; Pkg.add(name=\"Rimu\")","category":"page"},{"location":"index.html","page":"Guide","title":"Guide","text":"in order to install Rimu from a script.","category":"page"},{"location":"index.html#Installing-Rimu-for-development","page":"Guide","title":"Installing Rimu for development","text":"","category":"section"},{"location":"index.html","page":"Guide","title":"Guide","text":"In order to be able to edit the source code, push changes, change and make new git branches, etc., clone the git repository with git clone to a convenient location, e.g. ~/mygitpackagefolder/. Then hit the ] key at the Julia REPL to get into Pkg mode and type","category":"page"},{"location":"index.html","page":"Guide","title":"Guide","text":"pkg> develop ~/mygitpackagefolder/rimu.jl","category":"page"},{"location":"index.html","page":"Guide","title":"Guide","text":"where the file path has to be adjusted to the location of the cloned git repository.","category":"page"},{"location":"index.html#Usage","page":"Guide","title":"Usage","text":"","category":"section"},{"location":"index.html","page":"Guide","title":"Guide","text":"The package is now installed and can be imported with","category":"page"},{"location":"index.html","page":"Guide","title":"Guide","text":"julia> using Rimu","category":"page"},{"location":"index.html","page":"Guide","title":"Guide","text":"When planning to edit the code of the package it is advisable to use the Revise package by issuing","category":"page"},{"location":"index.html","page":"Guide","title":"Guide","text":"julia> using Revise","category":"page"},{"location":"index.html","page":"Guide","title":"Guide","text":"before using Rimu. This will track any changes made to the source code of Rimu and the changed package will be available after saving the source code (hopefully, and most of the time, without restarting the Julia REPL).","category":"page"},{"location":"index.html","page":"Guide","title":"Guide","text":"Rimu offers a number of tools for representing Hamiltonians (see Hamiltonians) and state vectors / wave functions (see DictVectors) as well as algorithms to find the ground state, e.g. ProjectorMonteCarloProblem, ExactDiagonalizationProblem.","category":"page"},{"location":"index.html#Scripts","page":"Guide","title":"Scripts","text":"","category":"section"},{"location":"index.html","page":"Guide","title":"Guide","text":"Rimu is written as a Julia package to be imported with using Rimu as described above. It supplies useful functions and types. Performing actual calculations and analysing the results is done with scripts. The folder scripts/ contains a collections of scripts that are either examples for use of the Rimu package or useful scripts for data analysis. In particular:","category":"page"},{"location":"index.html","page":"Guide","title":"Guide","text":"scripts/BHM-example.jl is an example script that runs fciqmc on the 1D Bose-Hubbard model. A data frame with results is written to the file fciqmcdata.arrow.\nscripts/BHM-example-mpi.jl demonstrates basic usage of Rimu with MPI.","category":"page"},{"location":"index.html#MPI","page":"Guide","title":"MPI","text":"","category":"section"},{"location":"index.html","page":"Guide","title":"Guide","text":"The Rimu package can run in parallel on different processes or node and distribute work by making use of MPI, or \"message passing interface\". For example, running","category":"page"},{"location":"index.html","page":"Guide","title":"Guide","text":"> julia scripts/BHM-example.jl","category":"page"},{"location":"index.html","page":"Guide","title":"Guide","text":"will run on one processor with the main computation (i.e. after package loading and compilation) completing in 2.69 seconds.","category":"page"},{"location":"index.html","page":"Guide","title":"Guide","text":"Running","category":"page"},{"location":"index.html","page":"Guide","title":"Guide","text":"> mpirun -np 4 julia scripts/BHM-example-mpi.jl","category":"page"},{"location":"index.html","page":"Guide","title":"Guide","text":"on the same hardware makes use of 4 cores and the main part completes in 1.04 seconds, a speedup factor of 2.6. This seems reasonable, given that extra work needs to be done for communicating between different processes.","category":"page"},{"location":"index.html","page":"Guide","title":"Guide","text":"Using MPI parallelism with Rimu is easy. Enabling MPI enabled automatically if PDVec is used to store a vector. In that case, data will be stored in a distributed fashion among the MPI ranks and only communicated between ranks when necessary. Additional MPI-related functionality is provided by the module RMPI.","category":"page"},{"location":"index.html#Compatibility","page":"Guide","title":"Compatibility","text":"","category":"section"},{"location":"index.html","page":"Guide","title":"Guide","text":"We recommend using Rimu with the latest Julia release version. Rimu requires at least julia v1.9.","category":"page"},{"location":"index.html#References","page":"Guide","title":"References","text":"","category":"section"},{"location":"index.html","page":"Guide","title":"Guide","text":"The code implements the FCIQMC algorithm originally described in","category":"page"},{"location":"index.html","page":"Guide","title":"Guide","text":"\"Fermion Monte Carlo without fixed nodes: A game of life, death, and annihilation in Slater determinant space\", G. H. Booth, A. J. W. Thom, A. Alavi, J. Chem. Phys. 131, 054106 (2009).\n\"Communications: Survival of the fittest: accelerating convergence in full configuration-interaction quantum Monte Carlo.\", D. Cleland,  G. H. Booth, A. Alavi, J. Chem. Phys. 132, 041103 (2010).","category":"page"},{"location":"index.html","page":"Guide","title":"Guide","text":"Scientific papers describing additional features implemented in Rimu:","category":"page"},{"location":"index.html","page":"Guide","title":"Guide","text":"\"Improved walker population control for full configuration interaction quantum Monte Carlo\", M. Yang, E. Pahl, J. Brand, J. Chem. Phys. 153, 170143 (2020); arXiv:2008.01927.\n\"Stochastic differential equation approach to understanding the population control bias in full configuration interaction quantum Monte Carlo\", J. Brand, M. Yang, E. Pahl, arXiv:2103.07800 (2021).","category":"page"},{"location":"index.html","page":"Guide","title":"Guide","text":"Papers discussing results obtained with Rimu:","category":"page"},{"location":"index.html","page":"Guide","title":"Guide","text":"\"Polaron-Depleton Transition in the Yrast Excitations of a One-Dimensional Bose Gas with a Mobile Impurity\", M. Yang, M. Čufar, E. Pahl, J. Brand, Condens. Matter 7, 15 (2022).\n\"Magnetic impurity in a one-dimensional few-fermion system\", L. Rammelmüller, D. Huber, M. Čufar, J. Brand, A. Volosniev, arXiv:2204.01606 (2022).","category":"page"},{"location":"dictvectors.html#Module-DictVectors","page":"Dict vectors","title":"Module DictVectors","text":"","category":"section"},{"location":"dictvectors.html","page":"Dict vectors","title":"Dict vectors","text":"DictVectors\nAbstractDVec","category":"page"},{"location":"dictvectors.html#Rimu.DictVectors","page":"Dict vectors","title":"Rimu.DictVectors","text":"Module that provides concrete implementations of the AbstractDVec interface.\n\nDVec: basic AbstractDVec\nPDVec: parallel AbstractDVec with MPI and initiator support\nInitiatorDVec: allows storing information about initiator status\n\nSee Interfaces.\n\n\n\n\n\n","category":"module"},{"location":"dictvectors.html#Rimu.Interfaces.AbstractDVec","page":"Dict vectors","title":"Rimu.Interfaces.AbstractDVec","text":"AbstractDVec{K,V}\n\nAbstract data type for vector-like data structures with sparse storage. While conceptually AbstractDVecs represent elements of a vector space over a scalar type V, they are indexed by an arbitrary type K (could be non-integers) similar to dictionaries. They support the interface from VectorInterface.jl and are designed to work well for quantum Monte Carlo with ProjectorMonteCarloProblem and for matrix-free linear algebra with KrylovKit.\n\nConcrete implementations are available as PDVec, DVec, and InitiatorDVec.\n\nAbstractDVecs have a StochasticStyle which selects the spawning algorithm in FCIQMC. Looking up an element that is not stored in the AbstractDVec should return a zero, and setting a value to zero should remove it from the vector. To iterate over an AbstractDVec, use keys, pairs, or values. When possible, use reduction functions such as sum or mapreduce.\n\nInterface\n\nThe interface is similar to the AbstractDict interface, but with the changed behaviour as noted above.  Implement what would be needed for the AbstractDict interface (pairs, keys, values, setindex!, getindex, delete!, length, empty, empty!) and, in addition:\n\nStochasticStyle\nstorage returns an AbstractDict storing the raw data with possibly different valtype than V.\ndeposit!\n\nA default implementation for the VectorInterface.jl interface is provided through the above functions.\n\nSee also DictVectors, Interfaces.\n\n\n\n\n\n","category":"type"},{"location":"dictvectors.html#Concrete-implementations","page":"Dict vectors","title":"Concrete implementations","text":"","category":"section"},{"location":"dictvectors.html","page":"Dict vectors","title":"Dict vectors","text":"DVec\nInitiatorDVec\nPDVec","category":"page"},{"location":"dictvectors.html#Rimu.DictVectors.DVec","page":"Dict vectors","title":"Rimu.DictVectors.DVec","text":"DVec{K,V,D<:AbstractDict{K,V},S}\n\nDictionary-based vector-like data structure for use with FCIQMC and KrylovKit. While mostly behaving like a Dict, it supports various linear algebra operations such as norm and dot. It has a StochasticStyle that is used to select an appropriate spawning strategy in the FCIQMC algorithm.\n\nSee also: AbstractDVec, InitiatorDVec, PDVec.\n\nConstructors\n\nDVec(dict::AbstractDict[; style, capacity]): create a DVec with dict for storage. Note that the data may or may not be copied.\nDVec(args...[; style, capacity]): args... are passed to the Dict constructor. The Dict is used for storage.\nDVec{K,V}([; style, capacity]): create an empty DVec{K,V}.\nDVec(dv::AbstractDVec[; style, capacity]): create a DVec with the same contents as  adv. The style is inherited from dv by default.\n\nThe default style is selected based on the DVec's valtype (see default_style). If a style is given and the valtype does not match the style's eltype, the values are converted to an appropriate type.\n\nThe capacity argument is optional and sets the initial size of the DVec via Base.sizehint!.\n\nExamples\n\njulia> dv = DVec(:a => 1)\nDVec{Symbol,Int64} with 1 entry, style = IsStochasticInteger{Int64}()\n  :a => 1\n\njulia> dv = DVec(:a => 2, :b => 3; style=IsDeterministic())\nDVec{Symbol,Float64} with 2 entries, style = IsDeterministic{Float64}()\n  :a => 2.0\n  :b => 3.0\n\n\n\n\n\n","category":"type"},{"location":"dictvectors.html#Rimu.DictVectors.InitiatorDVec","page":"Dict vectors","title":"Rimu.DictVectors.InitiatorDVec","text":"InitiatorDVec{K,V} <: AbstractDVec{K,V}\n\nDictionary-based vector-like data structure for use with ProjectorMonteCarloProblem and KrylovKit.jl. See AbstractDVec. Functionally identical to DVec, but contains InitiatorValues internally in order to facilitate initiator methods. Initiator methods for controlling the Monte Carlo sign problem were first introduced in J. Chem. Phys. 132, 041103 (2010). How the initiators are handled is controlled by specifying an InitiatorRule with the initiator keyword argument (see below).\n\nSee also: AbstractDVec, DVec, PDVec.\n\nConstructors\n\nInitiatorDVec(dict::AbstractDict[; style, initiator, capacity]): create an InitiatorDVec with dict for storage.  Note that the data may or may not be copied.\nInitiatorDVec(args...[; style, initiator, capacity]): args... are passed to the Dict constructor. The Dict is used for storage.\nInitiatorDVec{K,V}([; style, initiator, capacity]): create an empty InitiatorDVec{K,V}.\nInitiatorDVec(dv::AbstractDVec[; style, initiator, capacity]): create an InitiatorDVec  with the same contents as dv. The style is inherited from dv by default.\n\nKeyword  arguments\n\nstyle: A valid StochasticStyle.  The default is selected based on the InitiatorDVec's valtype (see default_style). If a style is given and the valtype does not match the style's eltype, the values are converted to an appropriate type.\ninitiator = Initiator(1): A valid InitiatorRule. See Initiator.\ncapacity: Indicative size as Int. Optional. Sets the initial size of the InitiatorDVec via Base.sizehint!.\n\n\n\n\n\n","category":"type"},{"location":"dictvectors.html#Rimu.DictVectors.PDVec","page":"Dict vectors","title":"Rimu.DictVectors.PDVec","text":"PDVec{K,V}(; kwargs...)\nPDVec(iter; kwargs...)\nPDVec(pairs...; kwargs...)\n\nDictionary-based vector-like data structure for use with FCIQMC and KrylovKit.jl. While mostly behaving like a Dict, it supports various linear algebra operations such as norm and dot, and the interface defined in VectorInterface.\n\nThe P in PDVec stands for parallel. PDVecs perform mapreduce, foreach, and various linear algebra operations in a threaded manner. If MPI is available, these operations are automatically distributed as well. As such it is not recommended to iterate over pairs, keys, or values directly unless explicitly performing them on the localpart of the vector.\n\nSee also: AbstractDVec, DVec, InitiatorDVec.\n\nKeyword arguments\n\nstyle =default_style(V): A StochasticStyle that is used to select the spawning strategy in the FCIQMC algorithm.\ninitiator =NonInitiator(): An InitiatorRule, used in FCIQMC to remove the sign problem.\ncommunicator: A Communicator that controls how operations are performed when using MPI. The defaults are NotDistributed when not using MPI and AllToAll when using MPI.\n\nExtended Help\n\nSegmentation\n\nThe vector is split into Threads.nthreads() subdictionaries called segments. Which dictionary a key-value pair is mapped to is determined by the hash of the key. The purpose of this segmentation is to allow parallel processing - functions such as mapreduce, add! or dot (full list below) process each subdictionary on a separate thread.\n\nSee also PDWorkingMemory.\n\nExample\n\njulia> add = FermiFS2C((1,1,0,0), (0,0,1,1));\n\njulia> op = HubbardMom1D(add; t=4/π^2, u=4);\n\njulia> pv = PDVec(add => 1.0)\n1-element PDVec: style = IsDeterministic{Float64}()\n  fs\"|↑↑↓↓⟩\" => 1.0\n\njulia> pv = op * pv\n7-element PDVec: style = IsDeterministic{Float64}()\n  fs\"|↑↓↑↓⟩\" => 1.0\n  fs\"|↑↑↓↓⟩\" => 4.0\n  fs\"|↓↑↓↑⟩\" => 1.0\n  fs\"|↓↑↑↓⟩\" => -1.0\n  fs\"|⇅⋅⋅⇅⟩\" => 1.0\n  fs\"|↑↓↓↑⟩\" => -1.0\n  fs\"|⋅⇅⇅⋅⟩\" => 1.0\n\njulia> scale!(pv, -1); pv\n7-element PDVec: style = IsDeterministic{Float64}()\n  fs\"|↑↓↑↓⟩\" => -1.0\n  fs\"|↑↑↓↓⟩\" => -4.0\n  fs\"|↓↑↓↑⟩\" => -1.0\n  fs\"|↓↑↑↓⟩\" => 1.0\n  fs\"|⇅⋅⋅⇅⟩\" => -1.0\n  fs\"|↑↓↓↑⟩\" => 1.0\n  fs\"|⋅⇅⇅⋅⟩\" => -1.0\n\njulia> dest = similar(pv)\n0-element PDVec: style = IsDeterministic{Float64}()\n\njulia> map!(x -> x + 2, dest, values(pv))\n7-element PDVec: style = IsDeterministic{Float64}()\n  fs\"|↑↓↑↓⟩\" => 1.0\n  fs\"|↑↑↓↓⟩\" => -2.0\n  fs\"|↓↑↓↑⟩\" => 1.0\n  fs\"|↓↑↑↓⟩\" => 3.0\n  fs\"|⇅⋅⋅⇅⟩\" => 1.0\n  fs\"|↑↓↓↑⟩\" => 3.0\n  fs\"|⋅⇅⇅⋅⟩\" => 1.0\n\njulia> sum(values(pv))\n-6.0\n\njulia> dot(dest, pv)\n10.0\n\njulia> dot(dest, op, pv)\n44.0\n\nMPI\n\nWhen MPI is active, all parallel reductions are automatically reduced across MPI ranks with a call to MPI.Allreduce!.\n\nIn a distributed setting, PDVec does not support iteration without first making it explicit the iteration is only to be performed on the local segments of the vector. This is done with localpart. In general, even when not using MPI, it is best practice to use localpart when explicit iteration is required.\n\nUse with KrylovKit\n\nPDVec is compatible with eigsolve from KrylovKit.jl. When used, the diagonalisation is performed in a threaded and distributed manner. Using multiple MPI ranks with this method does not distribute the memory load effectively, but does result in significant speedups.\n\nExample\n\njulia> using KrylovKit\n\njulia> add = BoseFS((0,0,5,0,0));\n\njulia> op = HubbardMom1D(add; u=6.0);\n\njulia> pv = PDVec(add => 1.0);\n\njulia> results = eigsolve(op, pv, 4, :SR);\n\njulia> results[1][1:4]\n4-element Vector{Float64}:\n -3.4311156892322234\n  1.1821748602612363\n  3.7377753753082823\n  6.996390417443125\n\nParallel functionality\n\nThe following functions are threaded and MPI-compatible:\n\nFrom Base: mapreduce and derivatives (sum, prod, reduce...), all, any,map! (on values only), +, -, *\nFrom LinearAlgebra: rmul!, lmul!, mul!, axpy!, axpby!, dot, norm, normalize, normalize!\nThe full interface defined in VectorInterface.jl\n\n\n\n\n\n","category":"type"},{"location":"dictvectors.html#Interface-functions","page":"Dict vectors","title":"Interface functions","text":"","category":"section"},{"location":"dictvectors.html","page":"Dict vectors","title":"Dict vectors","text":"deposit!\nstorage\nfreeze\nlocalpart\napply_operator!\nsort_into_targets!\nworking_memory","category":"page"},{"location":"dictvectors.html#Rimu.Interfaces.deposit!","page":"Dict vectors","title":"Rimu.Interfaces.deposit!","text":"deposit!(w::InitiatorDVec, add, val, p_add=>p_val)\n\nAdd val into w at address add as an AbstractInitiatorValue.\n\n\n\n\n\ndeposit!(w::AbstractDVec, add, val, parent::Pair)\n\nAdd val into w at address add, taking into account initiator rules if applicable. parent contains the address => value pair from which the pair add => val was created. InitiatorDVec can intercept this and add its own functionality.\n\n\n\n\n\n","category":"function"},{"location":"dictvectors.html#Rimu.Interfaces.storage","page":"Dict vectors","title":"Rimu.Interfaces.storage","text":"storage(dvec) -> AbstractDict\n\nReturn the raw storage associated with dvec as an AbstractDict. Used in MPI communication.\n\n\n\n\n\n","category":"function"},{"location":"dictvectors.html#OrderedCollections.freeze","page":"Dict vectors","title":"OrderedCollections.freeze","text":"freeze(dv)\n\nCreate a \"frozen\" version of dv which can no longer be modified or used in the conventional manner, but supports faster dot products.\n\nIf dv is an MPIData, synchronize its contents among the ranks first.\n\n\n\n\n\n","category":"function"},{"location":"dictvectors.html#Rimu.Interfaces.localpart","page":"Dict vectors","title":"Rimu.Interfaces.localpart","text":"localpart(dv) -> AbstractDVec\n\nGet the part of dv that is located on this MPI rank. Returns dv itself for vectors that can't be MPI distributed (DVecs and InitiatorDVecs).\n\n\n\n\n\n","category":"function"},{"location":"dictvectors.html#Rimu.Interfaces.apply_operator!","page":"Dict vectors","title":"Rimu.Interfaces.apply_operator!","text":"apply_operator!(working_memory, target, source, operator, boost=1, compress=Val(true)) ->\n    stat_names, stats, working_memory, target\n\nPerform a single matrix(/operator)-vector multiplication:\n\nv^(n + 1) = hatT v^(n) \n\nwhere hatT is the operator, v^(n+1) is the target and v^(n) is the source. The working_memory can be used as temporary storage.\n\nThe boost argument is passed to apply_column! and increases the number of spawns performed. For the operator to be applied without compressing the vector after, set compress to Val(false).\n\nWhether the operation is performed in a stochastic, semistochastic, or determistic way is controlled by the trait StochasticStyle(target). See StochasticStyle.\n\nReturns the step stats generated by the StochasticStyle, the working memory and the target vector. target and working_memory may be mutated and/or swapped.\n\n\n\n\n\n","category":"function"},{"location":"dictvectors.html#Rimu.Interfaces.sort_into_targets!","page":"Dict vectors","title":"Rimu.Interfaces.sort_into_targets!","text":"sort_into_targets!(target, source, stats) -> target, source, agg_stats\n\nAggregate coefficients from source to target and from stats to agg_stats according to thread- or MPI-level parallelism.\n\nReturns the new target and source, as the sorting process may involve swapping them.\n\n\n\n\n\n","category":"function"},{"location":"dictvectors.html#Rimu.Interfaces.working_memory","page":"Dict vectors","title":"Rimu.Interfaces.working_memory","text":"working_memory(dv::AbstractDVec)\n\nCreate a working memory instance compatible with dv. The working memory must be compatible with sort_into_targets! and apply_operator!.\n\n\n\n\n\n","category":"function"},{"location":"dictvectors.html#Supported-operations","page":"Dict vectors","title":"Supported operations","text":"","category":"section"},{"location":"dictvectors.html","page":"Dict vectors","title":"Dict vectors","text":"AbstractDVecs generally support most operations that are defined on Vectors and Dicts. This includes the interface from VectorInterface.jl, and many functions from the LinearAlgebra standard library.","category":"page"},{"location":"dictvectors.html","page":"Dict vectors","title":"Dict vectors","text":"A significant difference between AbstractDVecs, Vectors, and Dicts, is that iteration on them is disabled by default. Iteration must be explicitly performed on keys, values, or pairs, however, it is highly recommended you use mapreduce, reduce, or similar functions when performing reductions, as that will make the operations compatible with MPI.","category":"page"},{"location":"dictvectors.html","page":"Dict vectors","title":"Dict vectors","text":"In addition, Rimu defines the following function.","category":"page"},{"location":"dictvectors.html","page":"Dict vectors","title":"Dict vectors","text":"walkernumber\nwalkernumber_and_length\ndot_from_right","category":"page"},{"location":"dictvectors.html#Rimu.DictVectors.walkernumber","page":"Dict vectors","title":"Rimu.DictVectors.walkernumber","text":"walkernumber(md::MPIData)\n\nCompute the walkernumber of the distributed data on every MPI rank with MPI.Allreduce. MPI syncronizing.\n\n\n\n\n\nwalkernumber(v)\n\nCompute the number of walkers in v. It is used for updating the shift. Overload this function for modifying population control.\n\nIn most cases walkernumber(v) is identical to norm(v, 1). For AbstractDVecs with complex coefficients it reports the one norm separately for the real and the imaginary part as a ComplexF64. See Norm1ProjectorPPop.\n\n\n\n\n\n","category":"function"},{"location":"dictvectors.html#Rimu.DictVectors.walkernumber_and_length","page":"Dict vectors","title":"Rimu.DictVectors.walkernumber_and_length","text":"walkernumber_and_length(v)\n\nCompute walkernumber and length at the same time. When MPI is used, this is more efficient than calling them separately.\n\n\n\n\n\n","category":"function"},{"location":"dictvectors.html#Rimu.DictVectors.dot_from_right","page":"Dict vectors","title":"Rimu.DictVectors.dot_from_right","text":"dot_from_right(w, op::AbstractHamiltonian, v)\n\nInternal function evaluates the 3-argument dot() function in order from right to left.\n\n\n\n\n\n","category":"function"},{"location":"dictvectors.html#Projectors","page":"Dict vectors","title":"Projectors","text":"","category":"section"},{"location":"dictvectors.html","page":"Dict vectors","title":"Dict vectors","text":"AbstractProjector\nNormProjector\nNorm2Projector\nUniformProjector\nNorm1ProjectorPPop\nRimu.DictVectors.FrozenDVec\nRimu.DictVectors.FrozenPDVec","category":"page"},{"location":"dictvectors.html#Rimu.DictVectors.AbstractProjector","page":"Dict vectors","title":"Rimu.DictVectors.AbstractProjector","text":"Abstract supertype for projectors to be used in in lieu of DVecs or Vectors in dot products. Implemented subtypes:\n\nUniformProjector\nNormProjector\nNorm2Projector\nNorm1ProjectorPPop\n\nSee also PostStepStrategy for use of projectors in ProjectorMonteCarloProblem.\n\nInterface\n\nDefine a method for LinearAlgebra.dot(projector, v).\n\n\n\n\n\n","category":"type"},{"location":"dictvectors.html#Rimu.DictVectors.NormProjector","page":"Dict vectors","title":"Rimu.DictVectors.NormProjector","text":"NormProjector() <: AbstractProjector\n\nResults in computing the one-norm when used in dot(). E.g.\n\ndot(NormProjector(),x)\n-> norm(x,1)\n\nNormProjector() thus represents the vector sign.(x).\n\nSee also PostStepStrategy, and AbstractProjector for use of projectors in ProjectorMonteCarloProblem.\n\n\n\n\n\n","category":"type"},{"location":"dictvectors.html#Rimu.DictVectors.Norm2Projector","page":"Dict vectors","title":"Rimu.DictVectors.Norm2Projector","text":"Norm2Projector() <: AbstractProjector\n\nResults in computing the two-norm when used in dot(). E.g.\n\ndot(NormProjector(),x)\n-> norm(x,2) # with type Float64\n\nSee also PostStepStrategy, and AbstractProjector for use of projectors in ProjectorMonteCarloProblem.\n\n\n\n\n\n","category":"type"},{"location":"dictvectors.html#Rimu.DictVectors.UniformProjector","page":"Dict vectors","title":"Rimu.DictVectors.UniformProjector","text":"UniformProjector() <: AbstractProjector\n\nRepresents a vector with all elements 1. To be used with dot(). Minimizes memory allocations.\n\nUniformProjector()⋅v == sum(v)\ndot(UniformProjector(), LO, v) == sum(LO*v)\n\nSee also PostStepStrategy, and AbstractProjector for use of projectors in ProjectorMonteCarloProblem.\n\n\n\n\n\n","category":"type"},{"location":"dictvectors.html#Rimu.DictVectors.Norm1ProjectorPPop","page":"Dict vectors","title":"Rimu.DictVectors.Norm1ProjectorPPop","text":"Norm1ProjectorPPop() <: AbstractProjector\n\nResults in computing the one-norm per population when used in dot(). E.g.\n\ndot(Norm1ProjectorPPop(),x)\n-> norm(real.(x),1) + im*norm(imag.(x),1)\n\nSee also PostStepStrategy, and AbstractProjector for use of projectors in ProjectorMonteCarloProblem.\n\n\n\n\n\n","category":"type"},{"location":"dictvectors.html#Rimu.DictVectors.FrozenDVec","page":"Dict vectors","title":"Rimu.DictVectors.FrozenDVec","text":"FrozenDVec\n\nA frozen DVec(s) can't be modified or used in the conventional manner, but support faster dot products. See: freeze.\n\n\n\n\n\n","category":"type"},{"location":"dictvectors.html#Rimu.DictVectors.FrozenPDVec","page":"Dict vectors","title":"Rimu.DictVectors.FrozenPDVec","text":"FrozenPDVec\n\nParallel version of FrozenDVec. See: freeze, PDVec.\n\n\n\n\n\n","category":"type"},{"location":"dictvectors.html#Initiator-rules","page":"Dict vectors","title":"Initiator rules","text":"","category":"section"},{"location":"dictvectors.html","page":"Dict vectors","title":"Dict vectors","text":"Rimu.DictVectors.InitiatorRule\nRimu.DictVectors.AbstractInitiatorValue\nRimu.DictVectors.InitiatorValue\nRimu.DictVectors.initiator_valtype\nRimu.DictVectors.to_initiator_value\nRimu.DictVectors.from_initiator_value\nRimu.DictVectors.Initiator\nRimu.DictVectors.SimpleInitiator\nRimu.DictVectors.CoherentInitiator\nRimu.DictVectors.NonInitiator\nRimu.DictVectors.NonInitiatorValue","category":"page"},{"location":"dictvectors.html#Rimu.DictVectors.InitiatorRule","page":"Dict vectors","title":"Rimu.DictVectors.InitiatorRule","text":"InitiatorRule{V}\n\nAbstract type for defining initiator rules for InitiatorDVec. Concrete implementations:\n\nInitiator\nSimpleInitiator\nCoherentInitiator\nNonInitiator\n\nExtended Help\n\nInitiatorRules define how to store and retrieve data from associated AbstractInitiatorValues. When defining a new InitiatorRule, also define the following:\n\ninitiator_valtype\nfrom_initiator_value\nto_initiator_value\n\n\n\n\n\n","category":"type"},{"location":"dictvectors.html#Rimu.DictVectors.AbstractInitiatorValue","page":"Dict vectors","title":"Rimu.DictVectors.AbstractInitiatorValue","text":"abstract type AbstractInitiatorValue{V}\n\nA value equipped with additional information that enables a variation of the initiator approximation. To be used with PDVec, InitiatorDVec and InitiatorRules.\n\nMust define:\n\nBase.zero, Base.:+, Base.:-, Base.:*\nfrom_initiator_value and to_initiator_value\n\n\n\n\n\n","category":"type"},{"location":"dictvectors.html#Rimu.DictVectors.InitiatorValue","page":"Dict vectors","title":"Rimu.DictVectors.InitiatorValue","text":"InitiatorValue{V}(; safe::V, unsafe::V, initiator::V) where V\n\nComposite \"walker\" with three fields. For use with InitiatorDVecs.\n\n\n\n\n\n","category":"type"},{"location":"dictvectors.html#Rimu.DictVectors.initiator_valtype","page":"Dict vectors","title":"Rimu.DictVectors.initiator_valtype","text":"initiator_valtype(rule::InitiatorRule, T)\n\nReturn the AbstractInitiatorValue{T} that is employed by the rule.\n\n\n\n\n\n","category":"function"},{"location":"dictvectors.html#Rimu.DictVectors.to_initiator_value","page":"Dict vectors","title":"Rimu.DictVectors.to_initiator_value","text":"to_initiator_value(::InitiatorRule, k::K, v::V, parent)\n\nConvert v to an AbstractInitiatorValue, taking the initiator rule and the parent that spawned it into account.\n\n\n\n\n\n","category":"function"},{"location":"dictvectors.html#Rimu.DictVectors.from_initiator_value","page":"Dict vectors","title":"Rimu.DictVectors.from_initiator_value","text":"from_initiator_value(i::InitiatorRule, v::AbstractInitiatorValue)\n\nConvert the AbstractInitiatorValue v into a scalar value according to the InitiatorRule i.\n\n\n\n\n\n","category":"function"},{"location":"dictvectors.html#Rimu.DictVectors.Initiator","page":"Dict vectors","title":"Rimu.DictVectors.Initiator","text":"Initiator(threshold = 1.0) <: InitiatorRule\n\nInitiator rule to be passed to PDVec or InitiatorDVec. An initiator is a configuration add with a coefficient with magnitude abs(v[add]) > threshold. The threshold can be passed as a keyword argument. Rules:\n\nInitiators can spawn anywhere.\nNon-initiators can spawn to initiators.\n\nSee InitiatorRule.\n\n\n\n\n\n","category":"type"},{"location":"dictvectors.html#Rimu.DictVectors.SimpleInitiator","page":"Dict vectors","title":"Rimu.DictVectors.SimpleInitiator","text":"SimpleInitiator(threshold = 1.0) <: InitiatorRule\n\nInitiator rule to be passed to PDVec or InitiatorDVec. An initiator is a configuration add with a coefficient with magnitude abs(v[add]) > threshold. The threshold can be passed as a keyword argument. Rules:\n\nInitiators can spawn anywhere.\nNon-initiators cannot spawn.\n\nSee InitiatorRule.\n\n\n\n\n\n","category":"type"},{"location":"dictvectors.html#Rimu.DictVectors.CoherentInitiator","page":"Dict vectors","title":"Rimu.DictVectors.CoherentInitiator","text":"CoherentInitiator(threshold = 1.0) <: InitiatorRule\n\nInitiator rule to be passed to PDVec or InitiatorDVec. An initiator is a configuration add with a coefficient with magnitude abs(v[add]) > threshold. The threshold can be passed as a keyword argument. Rules:\n\nInitiators can spawn anywhere.\nNon-initiators can spawn to initiators.\nMultiple non-initiators can spawn to a single non-initiator if their contributions add up to a value greater than the initiator threshold.\n\nSee InitiatorRule.\n\n\n\n\n\n","category":"type"},{"location":"dictvectors.html#Rimu.DictVectors.NonInitiator","page":"Dict vectors","title":"Rimu.DictVectors.NonInitiator","text":"NonInitiator() <: InitiatorRule\n\nInitiator rule that disables the approximation. This is the default setting for PDVec.\n\nSee InitiatorRule.\n\n\n\n\n\n","category":"type"},{"location":"dictvectors.html#Rimu.DictVectors.NonInitiatorValue","page":"Dict vectors","title":"Rimu.DictVectors.NonInitiatorValue","text":"NonInitiatorValue{V}\n\nValue that does not contain any additional information - used with NonInitiator, the default initiator rule for PDVec.\n\n\n\n\n\n","category":"type"},{"location":"dictvectors.html#PDVec-internals","page":"Dict vectors","title":"PDVec internals","text":"","category":"section"},{"location":"dictvectors.html#Working-memory","page":"Dict vectors","title":"Working memory","text":"","category":"section"},{"location":"dictvectors.html","page":"Dict vectors","title":"Dict vectors","text":"Modules = [DictVectors]\nPages = [\"pdworkingmemory.jl\"]","category":"page"},{"location":"dictvectors.html#Rimu.DictVectors.FirstColumnIterator","page":"Dict vectors","title":"Rimu.DictVectors.FirstColumnIterator","text":"FirstColumnIterator{W,D} <: AbstractVector{D}\n\nIterates segments in the first column of a working memory that belong to a specified rank.\n\nSee PDWorkingMemory, remote_segments and local_segments.\n\n\n\n\n\n","category":"type"},{"location":"dictvectors.html#Rimu.DictVectors.PDWorkingMemory","page":"Dict vectors","title":"Rimu.DictVectors.PDWorkingMemory","text":"PDWorkingMemory(t::PDVec)\n\nThe working memory that handles threading and MPI distribution for operations that involve operators, such as FCIQMC propagation, operator-vector multiplication and three-way dot products with PDVecs.\n\nThe working memory is structured as a two-dimensional array of segments, which themselves are Dicts (see PDVec). The number of rows in this array is equal to the number of segments across all MPI ranks (covering the entire address space), while the number of columns corresponds to the number of segments in the current MPI rank (i.e. column corresponds to the part of the address space that is local to the current rank).\n\nThe purpose of this organisation is to allow spawning in parallel without using locks or atomic operations. The spawning is performed by applying the following sequence of operations:\n\nperform_spawns!: each segment in the PDVec is multiplied by the operator independently, with the results being stored in a column of the working memory.\ncollect_local!: the rows of the working memory are summed to the first column.\nsynchronize_remote!: the segments corresponding to other MPI ranks are distributed and transferred to the first column.\nmove_and_compress!: the results are stochastically compressed and moved to the result PDVec\n\nWhen used with three-argument dot products, a full copy of the left-hand side vector is materialized in the first column of the working memory on all ranks.\n\n\n\n\n\n","category":"type"},{"location":"dictvectors.html#Rimu.DictVectors.PDWorkingMemoryColumn","page":"Dict vectors","title":"Rimu.DictVectors.PDWorkingMemoryColumn","text":"PDWorkingMemoryColumn\n\nA column in PDWorkingMemory. Supports getindex, deposit! and StochasticStyle and acts as a target for spawning. Can be used as a target in a three-way dot-product.\n\n\n\n\n\n","category":"type"},{"location":"dictvectors.html#Rimu.DictVectors.collect_local!-Tuple{PDWorkingMemory}","page":"Dict vectors","title":"Rimu.DictVectors.collect_local!","text":"collect_local!(w::PDWorkingMemory)\n\nSum each row in w and store the result in the first column. This step must be performed before using local_segments or remote_segments to move the values elsewhere.\n\nSee PDWorkingMemory.\n\n\n\n\n\n","category":"method"},{"location":"dictvectors.html#Rimu.DictVectors.first_column-Union{Tuple{PDWorkingMemory{K, V, W, S}}, Tuple{S}, Tuple{W}, Tuple{V}, Tuple{K}} where {K, V, W, S}","page":"Dict vectors","title":"Rimu.DictVectors.first_column","text":"first_column(::PDWorkingMemory)\n\nReturn the first column of the working memory. This is where the vectors are collected with collect_local!, synchronize_remote!, copy_to_local!.\n\nSee PDWorkingMemory.\n\n\n\n\n\n","category":"method"},{"location":"dictvectors.html#Rimu.DictVectors.local_segments-Tuple{PDWorkingMemory}","page":"Dict vectors","title":"Rimu.DictVectors.local_segments","text":"local_segments(w::PDWorkingMemory)\n\nReturns iterator over the segments in the first column of w on the current rank. Iterates Dicts.\n\nSee PDWorkingMemory.\n\n\n\n\n\n","category":"method"},{"location":"dictvectors.html#Rimu.DictVectors.move_and_compress!-Tuple{PDVec, PDWorkingMemory}","page":"Dict vectors","title":"Rimu.DictVectors.move_and_compress!","text":"move_and_compress!(dst::PDVec, src::PDWorkingMemory)\nmove_and_compress!(::CompressionStrategy, dst::PDVec, src::PDWorkingMemory)\n\nMove the values in src to dst, compressing the according to the CompressionStrategy on the way. This step can only be performed after collect_local! and synchronize_remote!.\n\nSee PDWorkingMemory.\n\n\n\n\n\n","category":"method"},{"location":"dictvectors.html#Rimu.DictVectors.num_columns-Tuple{PDWorkingMemory}","page":"Dict vectors","title":"Rimu.DictVectors.num_columns","text":"num_columns(w::PDWorkingMemory) -> Int\n\nNumber of columns in the working memory. The number of rows is equal to the number of segments in the local MPI rank.\n\nSee PDWorkingMemory.\n\n\n\n\n\n","category":"method"},{"location":"dictvectors.html#Rimu.DictVectors.num_rows-Tuple{PDWorkingMemory}","page":"Dict vectors","title":"Rimu.DictVectors.num_rows","text":"num_rows(w::PDWorkingMemory) -> Int\n\nNumber of rows in the working memory. The number of rows is equal to the number of segments accross all MPI ranks.\n\nSee PDWorkingMemory.\n\n\n\n\n\n","category":"method"},{"location":"dictvectors.html#Rimu.DictVectors.perform_spawns!-Tuple{PDWorkingMemory, PDVec, Any, Any}","page":"Dict vectors","title":"Rimu.DictVectors.perform_spawns!","text":"perform_spawns!(w::PDWorkingMemory, v::PDVec, ham, boost)\n\nPerform spawns from v through ham to w. boost increases the number of spawns without affecting the expectation value of the process.\n\nSee PDVec and PDWorkingMemory.\n\n\n\n\n\n","category":"method"},{"location":"dictvectors.html#Rimu.DictVectors.remote_segments-Tuple{PDWorkingMemory, Any}","page":"Dict vectors","title":"Rimu.DictVectors.remote_segments","text":"remote_segments(w::PDWorkingMemory, rank_id)\n\nReturns iterator over the segments in the first column of w that belong to rank rank_id. Iterates Dicts.\n\nSee PDWorkingMemory.\n\n\n\n\n\n","category":"method"},{"location":"dictvectors.html#Rimu.DictVectors.synchronize_remote!-Tuple{PDWorkingMemory}","page":"Dict vectors","title":"Rimu.DictVectors.synchronize_remote!","text":"synchronize_remote!([::Communicator,] w::PDWorkingMemory) -> names, values\n\nSynchronize non-local segments across MPI and add the results to the first column. Controlled by the Communicator. This can only be perfomed after collect_local!.\n\nShould return a Tuple of names and a Tuple of values to report.\n\nSee PDWorkingMemory.\n\n\n\n\n\n","category":"method"},{"location":"dictvectors.html#Communicators","page":"Dict vectors","title":"Communicators","text":"","category":"section"},{"location":"dictvectors.html","page":"Dict vectors","title":"Dict vectors","text":"Modules = [DictVectors]\nPages = [\"communicators.jl\"]","category":"page"},{"location":"dictvectors.html#Rimu.DictVectors.AllToAll","page":"Dict vectors","title":"Rimu.DictVectors.AllToAll","text":"AllToAll{K,V}(; mpi_comm, n_segments, report) <: Communicator\n\nCommunicator that uses collective communication using MPI.Alltoall[v]!.\n\nKeyword arguments\n\nmpi_comm=MPI.COMM_WORLD: the MPI communicator to use.\nn_segments=Threads.nthreads(): the number of segments per rank to use. Should match the PDVec the communicator is used with.\nreport=false: if set to true, report MPI communication times during a projector Monte Carlo run.\n\nSee also: Communicator.\n\n\n\n\n\n","category":"type"},{"location":"dictvectors.html#Rimu.DictVectors.Communicator","page":"Dict vectors","title":"Rimu.DictVectors.Communicator","text":"abstract type Communicator\n\nCommunicators are used to handle MPI communication when using PDVecs. Currently, three implementations are provided, NotDistributed, AllToAll and PointToPoint. The communicator is picked automatically according to the number of MPI ranks available.\n\nWhen implementing a communicator, use local_segments and remote_segments.\n\nInterface\n\nsynchronize_remote!\nmpi_rank\nmpi_size\nmpi_comm\n\nOptional interface\n\nis_distributed: defaults to returning true.\nmerge_remote_reductions: defaults to using MPI.Allreduce.\ntotal_num_segments: defaults to n * mpi_size.\ntarget_segment: defaults to selecting using fastrange  to pick the segment.\n\nSee also: PDVec, PDWorkingMemory.\n\n\n\n\n\n","category":"type"},{"location":"dictvectors.html#Rimu.DictVectors.LocalPart","page":"Dict vectors","title":"Rimu.DictVectors.LocalPart","text":"LocalPart <: Communicator\n\nWhen localpart is used, the vector's Communicator is replaced with this. This allows iteration and local reductions.\n\n\n\n\n\n","category":"type"},{"location":"dictvectors.html#Rimu.DictVectors.NestedSegmentedBuffer","page":"Dict vectors","title":"Rimu.DictVectors.NestedSegmentedBuffer","text":"NestedSegmentedBuffer{T}(nrows) <: AbstractMatrix{AbstractVector{T}}\n\nMatrix of vectors stored in a single buffer with collective MPI communication support. The number of rows in the matrix is fixed to nrows.\n\nUsed in the AllToAll communication strategy, where each column corresponds to an MPI rank and each row corresponds to a segment in the PDVec.\n\nSupported operations\n\nappend_collections!: add a column to the matrix.\nappend_empty_column!: add an empty column to the matrix.\nmpi_exchange_alltoall!: each rank sends the i-th column of the matrix to the (i-1)-st rank.\nmpi_exchange_allgather!: each rank sends the 1-st column of the matrix to all ranks.\n\nSee also: SegmentedBuffer.\n\n\n\n\n\n","category":"type"},{"location":"dictvectors.html#Rimu.DictVectors.NotDistributed","page":"Dict vectors","title":"Rimu.DictVectors.NotDistributed","text":"NotDistributed <: Communicator\n\nThis Communicator is used when MPI is not available.\n\n\n\n\n\n","category":"type"},{"location":"dictvectors.html#Rimu.DictVectors.PointToPoint","page":"Dict vectors","title":"Rimu.DictVectors.PointToPoint","text":"PointToPoint{K,V}(; mpi_comm, report) <: Communicator\n\nMPI Communicator that uses circular communication using MPI.Isend and MPI.Recv!.\n\nKeyword arguments\n\nmpi_comm=MPI.COMM_WORLD: the MPI communicator to use.\nreport=false: if set to true, report MPI communication times during a projector Monte Carlo run.\n\n\n\n\n\n","category":"type"},{"location":"dictvectors.html#Rimu.DictVectors.SegmentedBuffer","page":"Dict vectors","title":"Rimu.DictVectors.SegmentedBuffer","text":"SegmentedBuffer{T}() <: AbstractVector{AbstractVector{T}}\n\nBehaves like a vector of vectors, but is stored in a single buffer. It can be sent/received over MPI keeping its structure intact. Used in the PointToPoint communication strategy.\n\nSupported operations\n\nreplace_collections!: insert data into the buffers\nmpi_send: send the contents of a buffer to a given rank\nmpi_recv_any!: receive a message sent by mpi_send from any rank, storing the contents in this buffer\n\nSee also: NestedSegmentedBuffer.\n\n\n\n\n\n","category":"type"},{"location":"dictvectors.html#Rimu.DictVectors.append_collections!-Tuple{Rimu.DictVectors.NestedSegmentedBuffer, Any}","page":"Dict vectors","title":"Rimu.DictVectors.append_collections!","text":"append_collections!(buf::NestedSegmentedBuffer, iters)\n\nAdd a column to buf. The length of iters should match buf.nrows.\n\nSee also: NestedSegmentedBuffer, append_empty_column!.\n\n\n\n\n\n","category":"method"},{"location":"dictvectors.html#Rimu.DictVectors.append_empty_column!-Tuple{Rimu.DictVectors.NestedSegmentedBuffer}","page":"Dict vectors","title":"Rimu.DictVectors.append_empty_column!","text":"append_empty_column!(buf::NestedSegmentedBuffer)\n\nLike append_collections!, but adds an empty column.\n\nSee also: NestedSegmentedBuffer, append_collections!.\n\n\n\n\n\n","category":"method"},{"location":"dictvectors.html#Rimu.DictVectors.copy_to_local!","page":"Dict vectors","title":"Rimu.DictVectors.copy_to_local!","text":"copy_to_local!([::Communicator,] w::PDWorkingMemory, t::PDVec) -> PDVec\n\nCopy pairs in t from all ranks and return them as a (possibly) new PDVec, possibly using the PDWorkingMemory as temporary storage.\n\nSee also: PDVec, PDWorkingMemory, Communicator.\n\n\n\n\n\n","category":"function"},{"location":"dictvectors.html#Rimu.DictVectors.is_distributed-Tuple{Rimu.DictVectors.Communicator}","page":"Dict vectors","title":"Rimu.DictVectors.is_distributed","text":"is_distributed(::Communicator)\n\nReturn true if Communicator operates over MPI.\n\n\n\n\n\n","category":"method"},{"location":"dictvectors.html#Rimu.DictVectors.merge_remote_reductions-Tuple{Rimu.DictVectors.Communicator, Any, Any}","page":"Dict vectors","title":"Rimu.DictVectors.merge_remote_reductions","text":"merge_remote_reductions(c::Communicator, op, x)\n\nMerge the results of reductions over MPI. By default, it uses MPI.Allreduce.\n\nSee also: Communicator.\n\n\n\n\n\n","category":"method"},{"location":"dictvectors.html#Rimu.DictVectors.mpi_comm","page":"Dict vectors","title":"Rimu.DictVectors.mpi_comm","text":"mpi_comm(::Communicator) -> MPI.Comm\n\nReturn the MPI.Comm that the Communicator operates on.\n\n\n\n\n\n","category":"function"},{"location":"dictvectors.html#Rimu.DictVectors.mpi_exchange_allgather!-Tuple{Rimu.DictVectors.NestedSegmentedBuffer, Rimu.DictVectors.NestedSegmentedBuffer, Any}","page":"Dict vectors","title":"Rimu.DictVectors.mpi_exchange_allgather!","text":"mpi_exchange_allgather!(src::NestedSegmentedBuffer, dst::NestedSegmentedBuffer, comm)\n\nThe first and only column in src will be sent to all ranks. The data from all ranks will be gethered in dst. After this operation, dst will contain the same data on all ranks.\n\nSee also NestedSegmentedBuffer, mpi_exchange_alltoall!.\n\n\n\n\n\n","category":"method"},{"location":"dictvectors.html#Rimu.DictVectors.mpi_exchange_alltoall!-Tuple{Rimu.DictVectors.NestedSegmentedBuffer, Rimu.DictVectors.NestedSegmentedBuffer, Any}","page":"Dict vectors","title":"Rimu.DictVectors.mpi_exchange_alltoall!","text":"mpi_exchange_alltoall!(src::NestedSegmentedBuffer, dst::NestedSegmentedBuffer, comm)\n\nThe n-th column from src will be sent to rank n-1. The data sent from rank r will be stored in the (r+1)-st column of dst.\n\nSee also: NestedSegmentedBuffer, mpi_exchange_allgather!.\n\n\n\n\n\n","category":"method"},{"location":"dictvectors.html#Rimu.DictVectors.mpi_rank","page":"Dict vectors","title":"Rimu.DictVectors.mpi_rank","text":"mpi_rank(::Communicator) -> Int\n\nReturn the MPI rank of the Communicator.\n\n\n\n\n\n","category":"function"},{"location":"dictvectors.html#Rimu.DictVectors.mpi_recv_any!-Tuple{Rimu.DictVectors.SegmentedBuffer, Any}","page":"Dict vectors","title":"Rimu.DictVectors.mpi_recv_any!","text":"mpi_recv_any!(buf::SegmentedBuffer, comm::MPI_Comm) -> Int\n\nFind a source that is ready to send a buffer and receive from it. Return the rank ID of the sender.\n\n\n\n\n\n","category":"method"},{"location":"dictvectors.html#Rimu.DictVectors.mpi_send-Tuple{Rimu.DictVectors.SegmentedBuffer, Any, Any}","page":"Dict vectors","title":"Rimu.DictVectors.mpi_send","text":"mpi_send(buf::SegmentedBuffer, dest, comm::MPI.Comm)\n\nSend the buffer to rank with id dest.\n\n\n\n\n\n","category":"method"},{"location":"dictvectors.html#Rimu.DictVectors.mpi_size","page":"Dict vectors","title":"Rimu.DictVectors.mpi_size","text":"mpi_size(::Communicator) -> Int\n\nReturn the total number of MPI ranks in the Communicator.\n\n\n\n\n\n","category":"function"},{"location":"dictvectors.html#Rimu.DictVectors.replace_collections!-Tuple{Rimu.DictVectors.SegmentedBuffer, Any}","page":"Dict vectors","title":"Rimu.DictVectors.replace_collections!","text":"replace_collections!(buf::SegmentedBuffer, iters)\n\nInsert collections in iters into a SegmentedBuffer.\n\njulia> using Rimu.DictVectors: SegmentedBuffer\n\njulia> buf = SegmentedBuffer{Int}()\n0-element SegmentedBuffer{Int64}\n\njulia> Rimu.DictVectors.replace_collections!(buf, [[1,2,3], [4,5]])\n2-element SegmentedBuffer{Int64}:\n [1, 2, 3]\n [4, 5]\n\njulia> Rimu.DictVectors.replace_collections!(buf, [[1], [2,3], [4]])\n3-element SegmentedBuffer{Int64}:\n [1]\n [2, 3]\n [4]\n\n\n\n\n\n","category":"method"},{"location":"dictvectors.html#Rimu.DictVectors.target_segment-Tuple{Rimu.DictVectors.Communicator, Any, Any}","page":"Dict vectors","title":"Rimu.DictVectors.target_segment","text":"target_segment(c::Communicator, k, num_segments) -> target, is_local\n\nThis function is used to determine where in the PDVec a key should be stored. If the key is local (stored on the same MPI rank), return its segment index and true. If the key is non-local, return any value and false.\n\nSee also: PDVec, Communicator.\n\n\n\n\n\n","category":"method"},{"location":"dictvectors.html#Rimu.DictVectors.total_num_segments-Tuple{Rimu.DictVectors.Communicator, Any}","page":"Dict vectors","title":"Rimu.DictVectors.total_num_segments","text":"total_num_segments(c::Communicator, n) -> Int\n\nReturn the total number of segments, including the remote ones, where n is number of local segments.\n\nSee also: PDVec, Communicator.\n\n\n\n\n\n","category":"method"},{"location":"dictvectors.html#Index","page":"Dict vectors","title":"Index","text":"","category":"section"},{"location":"dictvectors.html","page":"Dict vectors","title":"Dict vectors","text":"Pages   = [\"dictvectors.md\"]","category":"page"}]
}
