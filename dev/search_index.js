var documenterSearchIndex = {"docs":
[{"location":"mpi.html#Working-with-MPI","page":"Using MPI","title":"Working with MPI","text":"","category":"section"},{"location":"mpi.html","page":"Using MPI","title":"Using MPI","text":"If you are using PDVecs to store your vectors, working with MPI should be fairly straightforward. Generally, PDVec will work with MPI automatically, as long as MPI is set up correctly and a few common pitfalls are avoided.","category":"page"},{"location":"mpi.html","page":"Using MPI","title":"Using MPI","text":"Rimu includes an unexported module RMPI, which must be imported to access additional MPI-related functionality.","category":"page"},{"location":"mpi.html#Configuring-MPI","page":"Using MPI","title":"Configuring MPI","text":"","category":"section"},{"location":"mpi.html","page":"Using MPI","title":"Using MPI","text":"When running on a cluster, ensure that MPI.jl is using the system binary. See the MPI.jl documentation for more information.","category":"page"},{"location":"mpi.html","page":"Using MPI","title":"Using MPI","text":"It is always a good idea to start your script with a quick test that ensures the MPI is set up correctly. One way to do this is to open with","category":"page"},{"location":"mpi.html","page":"Using MPI","title":"Using MPI","text":"using Rimu.RMPI\nmpi_allprintln(\"hello\")","category":"page"},{"location":"mpi.html","page":"Using MPI","title":"Using MPI","text":"which should print something like","category":"page"},{"location":"mpi.html","page":"Using MPI","title":"Using MPI","text":"[ rank 0: hello\n[ rank 1: hello\n[ rank 2: hello\n[ rank 3: hello","category":"page"},{"location":"mpi.html","page":"Using MPI","title":"Using MPI","text":"If it prints rank 0 several times, the code will run, but ranks will not communicate.","category":"page"},{"location":"mpi.html#Using-Slurm","page":"Using MPI","title":"Using Slurm","text":"","category":"section"},{"location":"mpi.html","page":"Using MPI","title":"Using MPI","text":"When using PDVec, the recommended setup is to use threads to parallelise the computation within a node, and to only use MPI for inter-node communication. In a slurm script, this is done as follows:","category":"page"},{"location":"mpi.html","page":"Using MPI","title":"Using MPI","text":"...\n#SBATCH --ntasks-per-node=1\n#SBATCH --nodes=4            # replace 4 with the desired number of nodes\n#SBATCH --cpus-per-task=28   # replace 28 with the number of cores available in a node\n#SBATCH --hint=nomultithread # don't use hyperthreading\n...\n\nsrun julia --project -tauto script.jl","category":"page"},{"location":"mpi.html","page":"Using MPI","title":"Using MPI","text":"On some clusters, additional settings must be used with srun, for example the CTCP cluster requires the following.","category":"page"},{"location":"mpi.html","page":"Using MPI","title":"Using MPI","text":"srun mpi=pmi2 julia --project -tauto script.jl","category":"page"},{"location":"mpi.html#Common-pitfalls-with-reducing-functions","page":"Using MPI","title":"Common pitfalls with reducing functions","text":"","category":"section"},{"location":"mpi.html#Using-@mpi_root","page":"Using MPI","title":"Using @mpi_root","text":"","category":"section"},{"location":"mpi.html","page":"Using MPI","title":"Using MPI","text":"Take care to not use reducing functions (such as length, sum, norm, ...) inside @mpi_root blocks. Doing so will only initiate the distributed reduction on one rank only, which will cause the code to go out of sync and freeze. As an example, to report the current length of a vector, calculate the length before the @mpi_root block:","category":"page"},{"location":"mpi.html","page":"Using MPI","title":"Using MPI","text":"len = length(pdvec)\n@mpi_root println(\"vector length is $len\")","category":"page"},{"location":"mpi.html#Threaded-operations-and-reductions","page":"Using MPI","title":"Threaded operations and reductions","text":"","category":"section"},{"location":"mpi.html","page":"Using MPI","title":"Using MPI","text":"When using functions that take anonymous functions, such as map(!), sum, or mapreduce, it is important that the anonymous functions passed to them do not perform any MPI-reducing operations (length, norm, sum, etc.). These anonymous functions are executed on multiple threads and initiating MPI communication from multiple threads may cause issues.","category":"page"},{"location":"mpi.html","page":"Using MPI","title":"Using MPI","text":"As an example, suppose we want to scale a vector by its length by using map!. The correct way to write this code is as","category":"page"},{"location":"mpi.html","page":"Using MPI","title":"Using MPI","text":"len = length(pdvec)\nmap!(values(pdvec)) do x\n\tx / len\nend","category":"page"},{"location":"mpi.html","page":"Using MPI","title":"Using MPI","text":"Similar to the previous example, len is calculated first and not within the body of map!. In this specific case, an even better option is to use the scale! function from VectorInterface.jl:","category":"page"},{"location":"mpi.html","page":"Using MPI","title":"Using MPI","text":"scale!(pdvec, 1 / length(pdvec))","category":"page"},{"location":"projectormontecarlo.html#Projector-Monte-Carlo-/-FCIQMC","page":"Projector Monte Carlo","title":"Projector Monte Carlo / FCIQMC","text":"","category":"section"},{"location":"projectormontecarlo.html","page":"Projector Monte Carlo","title":"Projector Monte Carlo","text":"The purpose of Projector Monte Carlo is to stochastically sample the ground state, i.e. the  eigenvector corresponding to the lowest eigenvalue of a quantum Hamiltonian, or more generally,  a very large matrix. Rimu implements a flavor of Projector Monte Carlo called  Full Configuration Interaction Quantum Monte Carlo (FCIQMC).","category":"page"},{"location":"projectormontecarlo.html#ProjectorMonteCarloProblem","page":"Projector Monte Carlo","title":"ProjectorMonteCarloProblem","text":"","category":"section"},{"location":"projectormontecarlo.html","page":"Projector Monte Carlo","title":"Projector Monte Carlo","text":"To run a projector Monte Carlo simulation you set up a problem with ProjectorMonteCarloProblem and solve it with solve. Alternatively you can initialize a PMCSimulation struct, step!  through time steps, and solve! it to completion. ","category":"page"},{"location":"projectormontecarlo.html","page":"Projector Monte Carlo","title":"Projector Monte Carlo","text":"ProjectorMonteCarloProblem\ninit\nsolve\nsolve!\nstep!","category":"page"},{"location":"projectormontecarlo.html#Rimu.ProjectorMonteCarloProblem-projectormontecarlo","page":"Projector Monte Carlo","title":"Rimu.ProjectorMonteCarloProblem","text":"ProjectorMonteCarloProblem(hamiltonian::AbstractHamiltonian; kwargs...)\n\nDefines a problem to be solved by projector quantum Monte Carlo (QMC) methods, such as the the FCIQMC algorithm.\n\nCommon keyword arguments and defaults:\n\ntime_step = 0.01: Initial time step size.\nlast_step = 100: Controls the number of steps.\ntarget_walkers = 1_000: Target for the 1-norm of the coefficient vector.\nstart_at = starting_address(hamiltonian): Define the initial state vector(s).   An r  s matrix of state vectors can be passed where r is the   number of replicas and s the number of spectral states. See also   default_starting_vector.\nstyle = IsDynamicSemistochastic(): The StochasticStyle of the simulation.\ninitiator = false: Whether to use initiators. Can be true, false, or a valid   InitiatorRule.\nthreading: Default is to use multithreading and/or MPI if available. Set to true to force PDVec for the starting vector, false for serial computation; may be overridden by start_at.\nreporting_strategy = ReportDFAndInfo(): How and when to report results, see ReportingStrategy.\npost_step_strategy = (): Extract observables (e.g. ProjectedEnergy), see PostStepStrategy.\nn_replicas = 1: Number of synchronised independent simulations.\nreplica_strategy = NoStats(n_replicas): Which results to report from replica simulations, see ReplicaStrategy.\n\nExample\n\njulia> hamiltonian = HubbardReal1D(BoseFS(1,2,3));\n\njulia> problem = ProjectorMonteCarloProblem(hamiltonian; target_walkers = 500, last_step = 100);\n\njulia> simulation = solve(problem);\n\njulia> simulation.success[]\ntrue\n\njulia> size(DataFrame(simulation))\n(100, 9)\n\nFurther keyword arguments:\n\nstarting_step = 1: Starting step of the simulation.\nwalltime = Inf: Maximum time allowed for the simulation.\nsimulation_plan = SimulationPlan(; starting_step, last_step, walltime): Defines the   duration of the simulation. Takes precedence over last_step and walltime.\nζ = 0.08: Damping parameter for the shift update.\nξ = ζ^2/4: Forcing parameter for the shift update.\nshift_strategy = DoubleLogUpdate(; target_walkers, ζ, ξ): How to update the shift,   see ShiftStrategy.\ntime_step_strategy = ConstantTimeStep(): Adjust time step or not, see   TimeStepStrategy.\nalgorithm = FCIQMC(; shift_strategy, time_step_strategy): The algorithm to use.   Currenlty only FCIQMC is implemented.\nshift: Initial shift value or collection of shift values. Determined by default from the   Hamiltonian and the starting vectors.\ninitial_shift_parameters: Initial shift parameters or collection of initial shift   parameters. Overrides shift if provided.\nmaxlength = 2 * target_walkers + 100: Maximum length of the vectors.\ndisplay_name = \"PMCSimulation\": Name displayed in progress bar (via ProgressLogging).\nmetadata: User-supplied metadata to be added to the report. Must be an iterable of pairs or a NamedTuple, e.g. metadata = (\"key1\" => \"value1\", \"key2\" => \"value2\"). All metadata is converted to strings.\nrandom_seed = true: Provide and store a seed for the random number generator. If set to   true, a random seed is generated. If set to number, this number is used as the seed.   The seed is used by solve such that solveing the problem twice will yield identical   results. If set to false, no seed is used and results are not reproducible.\n\nSee also init, solve.\n\n\n\n\n\n","category":"type"},{"location":"projectormontecarlo.html#CommonSolve.init-projectormontecarlo","page":"Projector Monte Carlo","title":"CommonSolve.init","text":"init(p::ExactDiagonalizationProblem, [algorithm]; kwargs...)\n\nInitialize a solver for an ExactDiagonalizationProblem p with an optional algorithm. Returns a solver instance that can be solved with solve.\n\nFor a description of the keyword arguments, see the documentation for ExactDiagonalizationProblem.\n\n\n\n\n\ninit(problem::ProjectorMonteCarloProblem; copy_vectors=true)::PMCSimulation\n\nInitialise a Rimu.PMCSimulation.\n\nSee also ProjectorMonteCarloProblem, solve!, solve, step!, Rimu.PMCSimulation.\n\n\n\n\n\n","category":"function"},{"location":"projectormontecarlo.html#CommonSolve.solve-projectormontecarlo","page":"Projector Monte Carlo","title":"CommonSolve.solve","text":"solve(::ProjectorMonteCarloProblem)::PMCSimulation\n\nInitialize and solve a ProjectorMonteCarloProblem until the last step is completed or the walltime limit is reached.\n\nSee also init, solve!, step!, Rimu.PMCSimulation, and solve(::ExactDiagonalizationProblem).\n\n\n\n\n\n","category":"function"},{"location":"projectormontecarlo.html#CommonSolve.solve!-projectormontecarlo","page":"Projector Monte Carlo","title":"CommonSolve.solve!","text":"solve!(sm::PMCSimulation; kwargs...)::PMCSimulation\n\nSolve a Rimu.PMCSimulation until the last step is completed or the walltime limit is reached.\n\nTo continue a previously completed simulation, set a new last_step or walltime using the keyword arguments. Optionally, changes can be made to the replica_strategy, the post_step_strategy, or the reporting_strategy.\n\nOptional keyword arguments:\n\nlast_step = nothing: Set the last step to a new value and continue the simulation.\nwalltime = nothing: Set the allowed walltime to a new value and continue the simulation.\nreset_time = false: Reset the elapsed_time counter and continue the simulation.\nempty_report = false: Empty the report before continuing the simulation.\nreplica_strategy = nothing: Change the replica strategy. Requires the number of replicas   to match the number of replicas in the simulation sm. Implies empty_report = true.\npost_step_strategy = nothing: Change the post-step strategy. Implies   empty_report = true.\nreporting_strategy = nothing: Change the reporting strategy. Implies   empty_report = true.\nmetadata = nothing: Add metadata to the report.\n\nSee also ProjectorMonteCarloProblem, init, solve, step!, Rimu.PMCSimulation.\n\n\n\n\n\n","category":"function"},{"location":"projectormontecarlo.html#CommonSolve.step!-projectormontecarlo","page":"Projector Monte Carlo","title":"CommonSolve.step!","text":"step!(sm::PMCSimulation)::PMCSimulation\n\nAdvance the simulation by one step.\n\nCalling solve! will advance the simulation until the last step or the walltime is exceeded. When completing the simulation without calling solve!, the simulation report needs to be finalised by calling Rimu.finalize_report!.\n\nSee also ProjectorMonteCarloProblem, init, solve!, solve, Rimu.PMCSimulation.\n\n\n\n\n\n","category":"function"},{"location":"projectormontecarlo.html","page":"Projector Monte Carlo","title":"Projector Monte Carlo","text":"After solve or solve! have been called the returned PMCSimulation contains the results of  the projector Monte Carlo calculation.","category":"page"},{"location":"projectormontecarlo.html#PMCSimulation-and-report-as-a-DataFrame","page":"Projector Monte Carlo","title":"PMCSimulation and report as a DataFrame","text":"","category":"section"},{"location":"projectormontecarlo.html","page":"Projector Monte Carlo","title":"Projector Monte Carlo","text":"Rimu.PMCSimulation","category":"page"},{"location":"projectormontecarlo.html#Rimu.PMCSimulation-projectormontecarlo","page":"Projector Monte Carlo","title":"Rimu.PMCSimulation","text":"PMCSimulation\n\nHolds the state and the results of a projector quantum Monte Carlo (PMC) simulation. Is returned by init(::ProjectorMonteCarloProblem) and solved with solve!(::PMCSimulation).\n\nObtain the results of a simulation sm as a DataFrame with DataFrame(sm).\n\nSee also state_vectors, ProjectorMonteCarloProblem, init, solve!.\n\n\n\n\n\n","category":"type"},{"location":"projectormontecarlo.html","page":"Projector Monte Carlo","title":"Projector Monte Carlo","text":"The DataFrame returned from DataFrame(::PMCSimulation) contains the time series data from  the projector Monte Carlo simulation that is of primary interest for analysis. Depending on the  reporting_strategy and other options passed as keyword arguments to  ProjectorMonteCarloProblem it can have different numbers of rows and columns. The rows  correspond to the reported time steps (Monte Carlo steps). There is at least one column with the name :step. Further columns are usually present with additional data reported from the simulation.","category":"page"},{"location":"projectormontecarlo.html","page":"Projector Monte Carlo","title":"Projector Monte Carlo","text":"For the default option algorithm = FCIQMC(; shift_strategy, time_step_strategy) with a single replica (n_replicas = 1) and single spectral state, the fields :shift, :norm, :len will  be present as well as others depending on the style argument and the post_step_strategy.","category":"page"},{"location":"projectormontecarlo.html","page":"Projector Monte Carlo","title":"Projector Monte Carlo","text":"If multiple replicas or spectral states are requested, then the relevant field names in the  DataFrame will have a suffix identifying the respective replica simulation, e.g. the shifts will be reported as shift_1, shift_2, ... ","category":"page"},{"location":"projectormontecarlo.html","page":"Projector Monte Carlo","title":"Projector Monte Carlo","text":"Many tools for analysing the time series data obtained from a  ProjectorMonteCarloProblem are contained in the Module StatsTools.","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"EditURL = \"../../../scripts/G2-example.jl\"","category":"page"},{"location":"generated/G2-example.html#Example-3:-Calculating-observables","page":"Calculating observables","title":"Example 3: Calculating observables","text":"","category":"section"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"This is an example calculation of the two-body correlation function G_2.","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"A runnable script for this example is located here. Run it with julia G2-example.jl.","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"First, we load the reqired packages. Rimu for FCIQMC calculation, and DataFrames for maniplating the output.","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"using Rimu\nusing Random\nusing DataFrames","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"We use the same Hamiltonian as the first example, a Bose-Hubbard model with 6 particles in 6 sites, with strong interactions (we expect a Mott insulating state).","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"m = n = 6\ninitial_address = near_uniform(BoseFS{n,m})\nH = HubbardReal1D(initial_address; u = 6.0, t = 1.0)","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"HubbardReal1D(fs\"|1 1 1 1 1 1⟩\"; u=6.0, t=1.0)","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"Now, we define the operators for the observables we wish to calculate.","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"dvals = 0:m-1\nG2list = ((G2RealCorrelator(d) for d in dvals)...,)","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"(G2RealCorrelator(0), G2RealCorrelator(1), G2RealCorrelator(2), G2RealCorrelator(3), G2RealCorrelator(4), G2RealCorrelator(5))","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"This is a tuple of G2RealCorrelators, subtypes of AbstractHamiltonian. It calculates the density-density correlation function on a lattice","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"    hatG^(2)(d) = frac1M sum_i^M hatn_i (hatn_i+d - delta_0d)","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"with normalisation","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"    sum_d=0^M-1 langle hatG^(2)(d) rangle = fracN (N-1)M","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"Observables that are defined by expectation values are calculated using the \"replica trick\". Thereby several independent copies or \"replicas\" of the state vector are propagated simultaneously. The reason is to have two (or more) stochastically independent copies of the state vector available such that we can calculate bias-free overlaps. We enable this by defining a ReplicaStrategy. Each replica has its own state and FCIQMC is effectively performed independently on each one.  For calculating observables, we use AllOverlaps for the ReplicaStrategy. At each timestep, after the FCIQMC step is performed on, this strategy calculates the overlaps of every operator with the wavefunctions from each pair of replicas.","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"To obtain an unbiased result, at least two replicas should be used. One can also use more than two to improve the statistics. This is particularly helpful when the walker number is low.","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"n_replicas = 3\nreplica_strategy = AllOverlaps(n_replicas; operator=G2list)","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"AllOverlaps{3, 6, Tuple{G2RealCorrelator{0}, G2RealCorrelator{1}, G2RealCorrelator{2}, G2RealCorrelator{3}, G2RealCorrelator{4}, G2RealCorrelator{5}}, true}((G2RealCorrelator(0), G2RealCorrelator(1), G2RealCorrelator(2), G2RealCorrelator(3), G2RealCorrelator(4), G2RealCorrelator(5)))","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"Other FCIQMC parameters and strategies can be set in the same way as before.","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"steps_equilibrate = 1_000\nsteps_measure = 5_000\ntarget_walkers = 100;\ntime_step = 0.001\n","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"Now, we run FCIQMC. Note that passing an initial vector is optional - if we only pass the style, a vector with the appropriate style is created automatically.","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"problem = ProjectorMonteCarloProblem(H;\n    style=IsDynamicSemistochastic(),\n    time_step,\n    last_step = steps_equilibrate + steps_measure,\n    target_walkers,\n    replica_strategy,\n)\nresult = solve(problem)\ndf = DataFrame(result);","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"The output DataFrame has FCIQMC statistics for each replica (e.g. shift, norm),","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"println(filter(startswith(\"shift_\"), names(df)))","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"[\"shift_1\", \"shift_2\", \"shift_3\"]\n","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"as well as vector-vector overlaps (e.g. c1_dot_c2),","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"println(filter(contains(\"dot\"), names(df)))","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"[\"c1_dot_c2\", \"c1_dot_c3\", \"c2_dot_c3\"]\n","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"and operator overlaps (e.g. c1_Op1_c2) between the replicas.","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"println(filter(contains(\"Op\"), names(df)))","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"[\"c1_Op1_c2\", \"c1_Op2_c2\", \"c1_Op3_c2\", \"c1_Op4_c2\", \"c1_Op5_c2\", \"c1_Op6_c2\", \"c1_Op1_c3\", \"c1_Op2_c3\", \"c1_Op3_c3\", \"c1_Op4_c3\", \"c1_Op5_c3\", \"c1_Op6_c3\", \"c2_Op1_c3\", \"c2_Op2_c3\", \"c2_Op3_c3\", \"c2_Op4_c3\", \"c2_Op5_c3\", \"c2_Op6_c3\"]\n","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"The vector-vector and operator overlaps go into calculating the Rayleigh quotient for an observable","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"    langle hatG^(2)(d) rangle = fracsum_ab mathbfc_a^dagger cdot hatG^(2)(d) cdot mathbfc_bsum_ab mathbfc_a^dagger cdot mathbfc_b ","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"The sum over all replica pairs (a,b), especially in the denominator, helps to avoid errors from poor sampling if the number of walkers is too low.","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"We use the function rayleigh_replica_estimator to calculate the Rayleigh quotient using all replicas in df, returning a RatioBlockingResult. Using the keyword skip will ignore the initial equilibration steps.","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"Now, we can calculate the correlation function for each value of d.","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"println(\"Two-body correlator from $n_replicas replicas:\")\nfor d in dvals\n    r = rayleigh_replica_estimator(df; op_name = \"Op$(d+1)\", skip=steps_equilibrate)\n    println(\"   G2($d) = $(r.f) ± $(r.σ_f)\")\nend","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"Two-body correlator from 3 replicas:\n   G2(0) = 0.21516963630054983 ± 0.0014152934472347548\n   G2(1) = 0.9162973229045266 ± 0.0008233931518655831\n   G2(2) = 0.9814689180491364 ± 0.0005644001851393611\n   G2(3) = 0.9892978817921246 ± 0.0008837874729104005\n   G2(4) = 0.9814689180491364 ± 0.0005644001851393611\n   G2(5) = 0.9162973229045266 ± 0.0008233931518655831\n","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"As expected, the onsite correlation at d=0 is low since this is a Mott insulating state with unit filling fraction, and is close to 10 for all other values of the displacement d.","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"Since we ran multiple independent replicas, we also have multiple estimates of the shift energy.","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"println(\"Shift energy from $n_replicas replicas:\")\nfor i in 1:n_replicas\n    se = shift_estimator(df; shift=\"shift_$i\", skip=steps_equilibrate)\n    println(\"   Replica $i: $(se.mean) ± $(se.err)\")\nend\n","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"Shift energy from 3 replicas:\n   Replica 1: -4.0142639693662625 ± 0.1186429311173135\n   Replica 2: -4.063311135288648 ± 0.13712151580630375\n   Replica 3: -3.964571776069638 ± 0.14720090382848103\n","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"This page was generated using Literate.jl.","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"EditURL = \"../../../scripts/BHM-example.jl\"","category":"page"},{"location":"generated/BHM-example.html#Example-1:-1D-Bose-Hubbard-Model","page":"1D Bose-Hubbard Model","title":"Example 1: 1D Bose-Hubbard Model","text":"","category":"section"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"This is an example calculation finding the ground state of a 1D Bose-Hubbard chain with 6 particles in 6 lattice sites.","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"A runnable script for this example is located here. Run it with julia BHM-example.jl.","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"First, we load Rimu and Plots.","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"using Rimu\nusing Plots","category":"page"},{"location":"generated/BHM-example.html#Setting-up-the-model","page":"1D Bose-Hubbard Model","title":"Setting up the model","text":"","category":"section"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"We start by defining the physical problem. First, we generate an initial configuration which will be used as a starting point of our computation. In this example, we use a bosonic Fock state with 6 particles evenly distributed in 6 lattice sites.","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"initial_address = near_uniform(BoseFS{6,6})","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"BoseFS{6,6}(1, 1, 1, 1, 1, 1)","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"The Hamiltonian is constructed by initializing a struct with an initial address and model parameters. Here, we use the Bose Hubbard model in one-dimensional real space.","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"H = HubbardReal1D(initial_address; u = 6.0, t = 1.0)","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"HubbardReal1D(fs\"|1 1 1 1 1 1⟩\"; u=6.0, t=1.0)","category":"page"},{"location":"generated/BHM-example.html#Parameters-of-the-calculation","page":"1D Bose-Hubbard Model","title":"Parameters of the calculation","text":"","category":"section"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"Now, let's setup the Monte Carlo calculation. We need to decide the number of walkers to use in this Monte Carlo run, which is equivalent to the average one-norm of the coefficient vector. Higher values will result in better statistics, but require more memory and computing power.","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"target_walkers = 1_000;","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"FCIQMC takes a certain number of steps to equllibrate, after which the observables will fluctuate around a mean value. In this example, we will devote 1000 steps to equilibration and take an additional 2000 steps for measurement.","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"steps_equilibrate = 1_000;\nsteps_measure = 2_000;\nlast_step = steps_equilibrate + steps_measure","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"3000","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"Next, we pick a time step size. FCIQMC does not have a time step error, but the time step needs to be small enough, or the computation might diverge. If the time step is too small, however, the computation might take a long time to equilibrate. The appropriate time step size is problem-dependent and is best determined through experimentation.","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"time_step = 0.001;","category":"page"},{"location":"generated/BHM-example.html#Defining-an-observable","page":"1D Bose-Hubbard Model","title":"Defining an observable","text":"","category":"section"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"Now, let's set up an observable to measure. Here we will measure the projected energy. In additon to the shift, the projected energy is a second estimator for the energy. It usually produces better statistics than the shift.","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"We first need to define a projector. Here, we use the function default_starting_vector to generate a vector with only a single occupied configuration. We will use the same vector as the starting vector for the FCIQMC calculation.","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"initial_vector = default_starting_vector(initial_address; style=IsDynamicSemistochastic())","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"DVec{BoseFS{6, 6, BitString{11, 1, UInt16}},Float64} with 1 entry, style = IsDynamicSemistochastic{Float64,ThresholdCompression,DynamicSemistochastic}()\n  fs\"|1 1 1 1 1 1⟩\" => 10.0","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"The choice of the style argument already determines the FCIQMC algorithm to use. IsDynamicSemistochastic is usually the best choice as it reduces noise and improves the sign problem.","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"Observables that can be calculated by projection of the fluctuating quantum state onto a constant vector are passed into the ProjectorMonteCarloProblem with the post_step_strategy keyword argument.","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"post_step_strategy = ProjectedEnergy(H, initial_vector)","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"ProjectedEnergy{HubbardReal1D{Float64, BoseFS{6, 6, BitString{11, 1, UInt16}}, 6.0, 1.0}, Rimu.DictVectors.FrozenDVec{BoseFS{6, 6, BitString{11, 1, UInt16}}, Float64}, Rimu.DictVectors.FrozenDVec{BoseFS{6, 6, BitString{11, 1, UInt16}}, Float64}}(:vproj, :hproj, HubbardReal1D(fs\"|1 1 1 1 1 1⟩\"; u=6.0, t=1.0), Rimu.FrozenDVec([fs\"|1 1 1 1 1 1⟩\"=>10.0]), Rimu.FrozenDVec([fs\"|1 1 1 1 2 0⟩\"=>-14.1421, fs\"|0 2 1 1 1 1⟩\"=>-14.1421, fs\"|1 1 1 1 0 2⟩\"=>-14.1421, fs\"|1 2 0 1 1 1⟩\"=>-14.1421, fs\"|2 0 1 1 1 1⟩\"=>-14.1421, fs\"|1 1 1 2 0 1⟩\"=>-14.1421, fs\"|1 1 2 0 1 1⟩\"=>-14.1421, fs\"|1 1 0 2 1 1⟩\"=>-14.1421, fs\"|1 1 1 0 2 1⟩\"=>-14.1421, fs\"|1 0 2 1 1 1⟩\"=>-14.1421, fs\"|2 1 1 1 1 0⟩\"=>-14.1421, fs\"|0 1 1 1 1 2⟩\"=>-14.1421]))","category":"page"},{"location":"generated/BHM-example.html#Running-the-calculation","page":"1D Bose-Hubbard Model","title":"Running the calculation","text":"","category":"section"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"This is a two-step process: First we define a ProjectorMonteCarloProblem with all the parameters needed for the simulation","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"problem = ProjectorMonteCarloProblem(\n    H;\n    start_at = initial_vector,\n    last_step,\n    time_step,\n    target_walkers,\n    post_step_strategy\n);","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"To run the simulation we simply call solve on the problem","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"simulation = solve(problem);","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"The simulation object contains the results of the simulation as well as state vectors and strategies. We can extract the time series data for further analysis:","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"df = DataFrame(simulation);","category":"page"},{"location":"generated/BHM-example.html#Analysing-the-results","page":"1D Bose-Hubbard Model","title":"Analysing the results","text":"","category":"section"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"We can plot the norm of the coefficient vector as a function of the number of steps.","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"hline(\n    [target_walkers];\n    label=\"target_walkers\", xlabel=\"step\", ylabel=\"norm\",\n    color=2, linestyle=:dash, margin = 1Plots.cm\n)\nplot!(df.step, df.norm, label=\"norm\", color=1)","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"<?xml version=\"1.0\" encoding=\"utf-8\"?>\n<svg xmlns=\"http://www.w3.org/2000/svg\" xmlns:xlink=\"http://www.w3.org/1999/xlink\" width=\"600\" height=\"400\" viewBox=\"0 0 2400 1600\">\n<defs>\n  <clipPath id=\"clip730\">\n    <rect x=\"0\" y=\"0\" width=\"2400\" height=\"1600\"/>\n  </clipPath>\n</defs>\n<path clip-path=\"url(#clip730)\" d=\"M0 1600 L2400 1600 L2400 0 L0 0  Z\" fill=\"#ffffff\" fill-rule=\"evenodd\" fill-opacity=\"1\"/>\n<defs>\n  <clipPath id=\"clip731\">\n    <rect x=\"480\" y=\"0\" width=\"1681\" height=\"1600\"/>\n  </clipPath>\n</defs>\n<path clip-path=\"url(#clip730)\" d=\"M404.284 1281.45 L2211.02 1281.45 L2211.02 188.976 L404.284 188.976  Z\" fill=\"#ffffff\" fill-rule=\"evenodd\" fill-opacity=\"1\"/>\n<defs>\n  <clipPath id=\"clip732\">\n    <rect x=\"404\" y=\"188\" width=\"1808\" height=\"1093\"/>\n  </clipPath>\n</defs>\n<polyline clip-path=\"url(#clip732)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:2; stroke-opacity:0.1; fill:none\" points=\"454.849,1281.45 454.849,188.976 \"/>\n<polyline clip-path=\"url(#clip732)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:2; stroke-opacity:0.1; fill:none\" points=\"1023.2,1281.45 1023.2,188.976 \"/>\n<polyline clip-path=\"url(#clip732)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:2; stroke-opacity:0.1; fill:none\" points=\"1591.54,1281.45 1591.54,188.976 \"/>\n<polyline clip-path=\"url(#clip732)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:2; stroke-opacity:0.1; fill:none\" points=\"2159.89,1281.45 2159.89,188.976 \"/>\n<polyline clip-path=\"url(#clip732)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:2; stroke-opacity:0.1; fill:none\" points=\"404.284,1261.88 2211.02,1261.88 \"/>\n<polyline clip-path=\"url(#clip732)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:2; stroke-opacity:0.1; fill:none\" points=\"404.284,1003.99 2211.02,1003.99 \"/>\n<polyline clip-path=\"url(#clip732)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:2; stroke-opacity:0.1; fill:none\" points=\"404.284,746.109 2211.02,746.109 \"/>\n<polyline clip-path=\"url(#clip732)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:2; stroke-opacity:0.1; fill:none\" points=\"404.284,488.226 2211.02,488.226 \"/>\n<polyline clip-path=\"url(#clip732)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:2; stroke-opacity:0.1; fill:none\" points=\"404.284,230.343 2211.02,230.343 \"/>\n<polyline clip-path=\"url(#clip730)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"404.284,1281.45 2211.02,1281.45 \"/>\n<polyline clip-path=\"url(#clip730)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"454.849,1281.45 454.849,1262.55 \"/>\n<polyline clip-path=\"url(#clip730)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"1023.2,1281.45 1023.2,1262.55 \"/>\n<polyline clip-path=\"url(#clip730)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"1591.54,1281.45 1591.54,1262.55 \"/>\n<polyline clip-path=\"url(#clip730)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"2159.89,1281.45 2159.89,1262.55 \"/>\n<path clip-path=\"url(#clip730)\" d=\"M454.849 1312.37 Q451.238 1312.37 449.41 1315.93 Q447.604 1319.47 447.604 1326.6 Q447.604 1333.71 449.41 1337.27 Q451.238 1340.82 454.849 1340.82 Q458.484 1340.82 460.289 1337.27 Q462.118 1333.71 462.118 1326.6 Q462.118 1319.47 460.289 1315.93 Q458.484 1312.37 454.849 1312.37 M454.849 1308.66 Q460.659 1308.66 463.715 1313.27 Q466.794 1317.85 466.794 1326.6 Q466.794 1335.33 463.715 1339.94 Q460.659 1344.52 454.849 1344.52 Q449.039 1344.52 445.96 1339.94 Q442.905 1335.33 442.905 1326.6 Q442.905 1317.85 445.96 1313.27 Q449.039 1308.66 454.849 1308.66 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip730)\" d=\"M967.722 1339.91 L975.361 1339.91 L975.361 1313.55 L967.05 1315.21 L967.05 1310.95 L975.314 1309.29 L979.99 1309.29 L979.99 1339.91 L987.629 1339.91 L987.629 1343.85 L967.722 1343.85 L967.722 1339.91 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip730)\" d=\"M1007.07 1312.37 Q1003.46 1312.37 1001.63 1315.93 Q999.828 1319.47 999.828 1326.6 Q999.828 1333.71 1001.63 1337.27 Q1003.46 1340.82 1007.07 1340.82 Q1010.71 1340.82 1012.51 1337.27 Q1014.34 1333.71 1014.34 1326.6 Q1014.34 1319.47 1012.51 1315.93 Q1010.71 1312.37 1007.07 1312.37 M1007.07 1308.66 Q1012.88 1308.66 1015.94 1313.27 Q1019.02 1317.85 1019.02 1326.6 Q1019.02 1335.33 1015.94 1339.94 Q1012.88 1344.52 1007.07 1344.52 Q1001.26 1344.52 998.185 1339.94 Q995.129 1335.33 995.129 1326.6 Q995.129 1317.85 998.185 1313.27 Q1001.26 1308.66 1007.07 1308.66 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip730)\" d=\"M1037.24 1312.37 Q1033.62 1312.37 1031.8 1315.93 Q1029.99 1319.47 1029.99 1326.6 Q1029.99 1333.71 1031.8 1337.27 Q1033.62 1340.82 1037.24 1340.82 Q1040.87 1340.82 1042.68 1337.27 Q1044.5 1333.71 1044.5 1326.6 Q1044.5 1319.47 1042.68 1315.93 Q1040.87 1312.37 1037.24 1312.37 M1037.24 1308.66 Q1043.05 1308.66 1046.1 1313.27 Q1049.18 1317.85 1049.18 1326.6 Q1049.18 1335.33 1046.1 1339.94 Q1043.05 1344.52 1037.24 1344.52 Q1031.43 1344.52 1028.35 1339.94 Q1025.29 1335.33 1025.29 1326.6 Q1025.29 1317.85 1028.35 1313.27 Q1031.43 1308.66 1037.24 1308.66 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip730)\" d=\"M1067.4 1312.37 Q1063.79 1312.37 1061.96 1315.93 Q1060.15 1319.47 1060.15 1326.6 Q1060.15 1333.71 1061.96 1337.27 Q1063.79 1340.82 1067.4 1340.82 Q1071.03 1340.82 1072.84 1337.27 Q1074.67 1333.71 1074.67 1326.6 Q1074.67 1319.47 1072.84 1315.93 Q1071.03 1312.37 1067.4 1312.37 M1067.4 1308.66 Q1073.21 1308.66 1076.26 1313.27 Q1079.34 1317.85 1079.34 1326.6 Q1079.34 1335.33 1076.26 1339.94 Q1073.21 1344.52 1067.4 1344.52 Q1061.59 1344.52 1058.51 1339.94 Q1055.45 1335.33 1055.45 1326.6 Q1055.45 1317.85 1058.51 1313.27 Q1061.59 1308.66 1067.4 1308.66 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip730)\" d=\"M1540.15 1339.91 L1556.47 1339.91 L1556.47 1343.85 L1534.53 1343.85 L1534.53 1339.91 Q1537.19 1337.16 1541.77 1332.53 Q1546.38 1327.88 1547.56 1326.53 Q1549.81 1324.01 1550.69 1322.27 Q1551.59 1320.51 1551.59 1318.82 Q1551.59 1316.07 1549.64 1314.33 Q1547.72 1312.6 1544.62 1312.6 Q1542.42 1312.6 1539.97 1313.36 Q1537.54 1314.13 1534.76 1315.68 L1534.76 1310.95 Q1537.58 1309.82 1540.04 1309.24 Q1542.49 1308.66 1544.53 1308.66 Q1549.9 1308.66 1553.09 1311.35 Q1556.29 1314.03 1556.29 1318.52 Q1556.29 1320.65 1555.48 1322.57 Q1554.69 1324.47 1552.58 1327.07 Q1552.01 1327.74 1548.9 1330.95 Q1545.8 1334.15 1540.15 1339.91 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip730)\" d=\"M1576.29 1312.37 Q1572.68 1312.37 1570.85 1315.93 Q1569.04 1319.47 1569.04 1326.6 Q1569.04 1333.71 1570.85 1337.27 Q1572.68 1340.82 1576.29 1340.82 Q1579.92 1340.82 1581.73 1337.27 Q1583.56 1333.71 1583.56 1326.6 Q1583.56 1319.47 1581.73 1315.93 Q1579.92 1312.37 1576.29 1312.37 M1576.29 1308.66 Q1582.1 1308.66 1585.15 1313.27 Q1588.23 1317.85 1588.23 1326.6 Q1588.23 1335.33 1585.15 1339.94 Q1582.1 1344.52 1576.29 1344.52 Q1570.48 1344.52 1567.4 1339.94 Q1564.34 1335.33 1564.34 1326.6 Q1564.34 1317.85 1567.4 1313.27 Q1570.48 1308.66 1576.29 1308.66 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip730)\" d=\"M1606.45 1312.37 Q1602.84 1312.37 1601.01 1315.93 Q1599.2 1319.47 1599.2 1326.6 Q1599.2 1333.71 1601.01 1337.27 Q1602.84 1340.82 1606.45 1340.82 Q1610.08 1340.82 1611.89 1337.27 Q1613.72 1333.71 1613.72 1326.6 Q1613.72 1319.47 1611.89 1315.93 Q1610.08 1312.37 1606.45 1312.37 M1606.45 1308.66 Q1612.26 1308.66 1615.32 1313.27 Q1618.39 1317.85 1618.39 1326.6 Q1618.39 1335.33 1615.32 1339.94 Q1612.26 1344.52 1606.45 1344.52 Q1600.64 1344.52 1597.56 1339.94 Q1594.51 1335.33 1594.51 1326.6 Q1594.51 1317.85 1597.56 1313.27 Q1600.64 1308.66 1606.45 1308.66 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip730)\" d=\"M1636.61 1312.37 Q1633 1312.37 1631.17 1315.93 Q1629.37 1319.47 1629.37 1326.6 Q1629.37 1333.71 1631.17 1337.27 Q1633 1340.82 1636.61 1340.82 Q1640.25 1340.82 1642.05 1337.27 Q1643.88 1333.71 1643.88 1326.6 Q1643.88 1319.47 1642.05 1315.93 Q1640.25 1312.37 1636.61 1312.37 M1636.61 1308.66 Q1642.42 1308.66 1645.48 1313.27 Q1648.56 1317.85 1648.56 1326.6 Q1648.56 1335.33 1645.48 1339.94 Q1642.42 1344.52 1636.61 1344.52 Q1630.8 1344.52 1627.72 1339.94 Q1624.67 1335.33 1624.67 1326.6 Q1624.67 1317.85 1627.72 1313.27 Q1630.8 1308.66 1636.61 1308.66 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip730)\" d=\"M2118.57 1325.21 Q2121.93 1325.93 2123.8 1328.2 Q2125.7 1330.47 2125.7 1333.8 Q2125.7 1338.92 2122.18 1341.72 Q2118.66 1344.52 2112.18 1344.52 Q2110.01 1344.52 2107.69 1344.08 Q2105.4 1343.66 2102.95 1342.81 L2102.95 1338.29 Q2104.89 1339.43 2107.2 1340 Q2109.52 1340.58 2112.04 1340.58 Q2116.44 1340.58 2118.73 1338.85 Q2121.05 1337.11 2121.05 1333.8 Q2121.05 1330.75 2118.89 1329.03 Q2116.76 1327.3 2112.95 1327.3 L2108.92 1327.3 L2108.92 1323.45 L2113.13 1323.45 Q2116.58 1323.45 2118.41 1322.09 Q2120.24 1320.7 2120.24 1318.11 Q2120.24 1315.44 2118.34 1314.03 Q2116.46 1312.6 2112.95 1312.6 Q2111.02 1312.6 2108.82 1313.01 Q2106.63 1313.43 2103.99 1314.31 L2103.99 1310.14 Q2106.65 1309.4 2108.96 1309.03 Q2111.3 1308.66 2113.36 1308.66 Q2118.69 1308.66 2121.79 1311.09 Q2124.89 1313.5 2124.89 1317.62 Q2124.89 1320.49 2123.25 1322.48 Q2121.6 1324.45 2118.57 1325.21 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip730)\" d=\"M2144.57 1312.37 Q2140.95 1312.37 2139.13 1315.93 Q2137.32 1319.47 2137.32 1326.6 Q2137.32 1333.71 2139.13 1337.27 Q2140.95 1340.82 2144.57 1340.82 Q2148.2 1340.82 2150.01 1337.27 Q2151.83 1333.71 2151.83 1326.6 Q2151.83 1319.47 2150.01 1315.93 Q2148.2 1312.37 2144.57 1312.37 M2144.57 1308.66 Q2150.38 1308.66 2153.43 1313.27 Q2156.51 1317.85 2156.51 1326.6 Q2156.51 1335.33 2153.43 1339.94 Q2150.38 1344.52 2144.57 1344.52 Q2138.76 1344.52 2135.68 1339.94 Q2132.62 1335.33 2132.62 1326.6 Q2132.62 1317.85 2135.68 1313.27 Q2138.76 1308.66 2144.57 1308.66 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip730)\" d=\"M2174.73 1312.37 Q2171.12 1312.37 2169.29 1315.93 Q2167.48 1319.47 2167.48 1326.6 Q2167.48 1333.71 2169.29 1337.27 Q2171.12 1340.82 2174.73 1340.82 Q2178.36 1340.82 2180.17 1337.27 Q2182 1333.71 2182 1326.6 Q2182 1319.47 2180.17 1315.93 Q2178.36 1312.37 2174.73 1312.37 M2174.73 1308.66 Q2180.54 1308.66 2183.59 1313.27 Q2186.67 1317.85 2186.67 1326.6 Q2186.67 1335.33 2183.59 1339.94 Q2180.54 1344.52 2174.73 1344.52 Q2168.92 1344.52 2165.84 1339.94 Q2162.78 1335.33 2162.78 1326.6 Q2162.78 1317.85 2165.84 1313.27 Q2168.92 1308.66 2174.73 1308.66 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip730)\" d=\"M2204.89 1312.37 Q2201.28 1312.37 2199.45 1315.93 Q2197.64 1319.47 2197.64 1326.6 Q2197.64 1333.71 2199.45 1337.27 Q2201.28 1340.82 2204.89 1340.82 Q2208.52 1340.82 2210.33 1337.27 Q2212.16 1333.71 2212.16 1326.6 Q2212.16 1319.47 2210.33 1315.93 Q2208.52 1312.37 2204.89 1312.37 M2204.89 1308.66 Q2210.7 1308.66 2213.75 1313.27 Q2216.83 1317.85 2216.83 1326.6 Q2216.83 1335.33 2213.75 1339.94 Q2210.7 1344.52 2204.89 1344.52 Q2199.08 1344.52 2196 1339.94 Q2192.94 1335.33 2192.94 1326.6 Q2192.94 1317.85 2196 1313.27 Q2199.08 1308.66 2204.89 1308.66 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip730)\" d=\"M1266.04 1391.71 L1266.04 1397.25 Q1263.56 1395.98 1260.88 1395.34 Q1258.21 1394.71 1255.34 1394.71 Q1250.98 1394.71 1248.79 1396.04 Q1246.62 1397.38 1246.62 1400.05 Q1246.62 1402.09 1248.18 1403.27 Q1249.74 1404.41 1254.45 1405.46 L1256.46 1405.91 Q1262.7 1407.25 1265.31 1409.7 Q1267.95 1412.12 1267.95 1416.48 Q1267.95 1421.44 1264 1424.34 Q1260.09 1427.23 1253.21 1427.23 Q1250.35 1427.23 1247.23 1426.66 Q1244.14 1426.12 1240.7 1425.01 L1240.7 1418.96 Q1243.95 1420.65 1247.1 1421.51 Q1250.25 1422.33 1253.34 1422.33 Q1257.48 1422.33 1259.7 1420.93 Q1261.93 1419.5 1261.93 1416.92 Q1261.93 1414.54 1260.31 1413.26 Q1258.72 1411.99 1253.27 1410.81 L1251.24 1410.33 Q1245.79 1409.19 1243.38 1406.83 Q1240.96 1404.45 1240.96 1400.31 Q1240.96 1395.28 1244.52 1392.54 Q1248.09 1389.8 1254.64 1389.8 Q1257.89 1389.8 1260.75 1390.28 Q1263.62 1390.76 1266.04 1391.71 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip730)\" d=\"M1283.07 1380.54 L1283.07 1390.66 L1295.13 1390.66 L1295.13 1395.22 L1283.07 1395.22 L1283.07 1414.57 Q1283.07 1418.93 1284.24 1420.17 Q1285.45 1421.41 1289.11 1421.41 L1295.13 1421.41 L1295.13 1426.31 L1289.11 1426.31 Q1282.33 1426.31 1279.76 1423.8 Q1277.18 1421.25 1277.18 1414.57 L1277.18 1395.22 L1272.88 1395.22 L1272.88 1390.66 L1277.18 1390.66 L1277.18 1380.54 L1283.07 1380.54 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip730)\" d=\"M1333.32 1407.02 L1333.32 1409.89 L1306.4 1409.89 Q1306.78 1415.94 1310.02 1419.12 Q1313.3 1422.27 1319.13 1422.27 Q1322.5 1422.27 1325.65 1421.44 Q1328.84 1420.61 1331.95 1418.96 L1331.95 1424.5 Q1328.8 1425.83 1325.49 1426.53 Q1322.18 1427.23 1318.78 1427.23 Q1310.25 1427.23 1305.25 1422.27 Q1300.29 1417.3 1300.29 1408.84 Q1300.29 1400.08 1305 1394.96 Q1309.74 1389.8 1317.76 1389.8 Q1324.95 1389.8 1329.12 1394.45 Q1333.32 1399.07 1333.32 1407.02 M1327.47 1405.3 Q1327.4 1400.5 1324.76 1397.63 Q1322.15 1394.77 1317.82 1394.77 Q1312.92 1394.77 1309.96 1397.54 Q1307.03 1400.31 1306.59 1405.34 L1327.47 1405.3 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip730)\" d=\"M1348.6 1420.96 L1348.6 1439.87 L1342.71 1439.87 L1342.71 1390.66 L1348.6 1390.66 L1348.6 1396.07 Q1350.45 1392.89 1353.25 1391.36 Q1356.08 1389.8 1360 1389.8 Q1366.49 1389.8 1370.53 1394.96 Q1374.6 1400.12 1374.6 1408.52 Q1374.6 1416.92 1370.53 1422.08 Q1366.49 1427.23 1360 1427.23 Q1356.08 1427.23 1353.25 1425.71 Q1350.45 1424.15 1348.6 1420.96 M1368.53 1408.52 Q1368.53 1402.06 1365.85 1398.4 Q1363.21 1394.71 1358.56 1394.71 Q1353.92 1394.71 1351.24 1398.4 Q1348.6 1402.06 1348.6 1408.52 Q1348.6 1414.98 1351.24 1418.67 Q1353.92 1422.33 1358.56 1422.33 Q1363.21 1422.33 1365.85 1418.67 Q1368.53 1414.98 1368.53 1408.52 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><polyline clip-path=\"url(#clip730)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"404.284,1281.45 404.284,188.976 \"/>\n<polyline clip-path=\"url(#clip730)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"404.284,1261.88 423.181,1261.88 \"/>\n<polyline clip-path=\"url(#clip730)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"404.284,1003.99 423.181,1003.99 \"/>\n<polyline clip-path=\"url(#clip730)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"404.284,746.109 423.181,746.109 \"/>\n<polyline clip-path=\"url(#clip730)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"404.284,488.226 423.181,488.226 \"/>\n<polyline clip-path=\"url(#clip730)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"404.284,230.343 423.181,230.343 \"/>\n<path clip-path=\"url(#clip730)\" d=\"M356.339 1247.67 Q352.728 1247.67 350.899 1251.24 Q349.094 1254.78 349.094 1261.91 Q349.094 1269.02 350.899 1272.58 Q352.728 1276.12 356.339 1276.12 Q359.973 1276.12 361.779 1272.58 Q363.608 1269.02 363.608 1261.91 Q363.608 1254.78 361.779 1251.24 Q359.973 1247.67 356.339 1247.67 M356.339 1243.97 Q362.149 1243.97 365.205 1248.58 Q368.284 1253.16 368.284 1261.91 Q368.284 1270.64 365.205 1275.24 Q362.149 1279.83 356.339 1279.83 Q350.529 1279.83 347.45 1275.24 Q344.395 1270.64 344.395 1261.91 Q344.395 1253.16 347.45 1248.58 Q350.529 1243.97 356.339 1243.97 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip730)\" d=\"M290.043 1017.34 L306.363 1017.34 L306.363 1021.27 L284.418 1021.27 L284.418 1017.34 Q287.08 1014.58 291.664 1009.95 Q296.27 1005.3 297.451 1003.96 Q299.696 1001.43 300.576 999.698 Q301.478 997.939 301.478 996.249 Q301.478 993.495 299.534 991.759 Q297.613 990.022 294.511 990.022 Q292.312 990.022 289.858 990.786 Q287.427 991.55 284.65 993.101 L284.65 988.379 Q287.474 987.245 289.927 986.666 Q292.381 986.087 294.418 986.087 Q299.789 986.087 302.983 988.772 Q306.177 991.458 306.177 995.948 Q306.177 998.078 305.367 999.999 Q304.58 1001.9 302.474 1004.49 Q301.895 1005.16 298.793 1008.38 Q295.691 1011.57 290.043 1017.34 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip730)\" d=\"M316.224 986.712 L334.58 986.712 L334.58 990.647 L320.506 990.647 L320.506 999.12 Q321.524 998.772 322.543 998.61 Q323.562 998.425 324.58 998.425 Q330.367 998.425 333.747 1001.6 Q337.126 1004.77 337.126 1010.18 Q337.126 1015.76 333.654 1018.86 Q330.182 1021.94 323.862 1021.94 Q321.687 1021.94 319.418 1021.57 Q317.173 1021.2 314.765 1020.46 L314.765 1015.76 Q316.849 1016.9 319.071 1017.45 Q321.293 1018.01 323.77 1018.01 Q327.774 1018.01 330.112 1015.9 Q332.45 1013.8 332.45 1010.18 Q332.45 1006.57 330.112 1004.47 Q327.774 1002.36 323.77 1002.36 Q321.895 1002.36 320.02 1002.78 Q318.168 1003.19 316.224 1004.07 L316.224 986.712 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip730)\" d=\"M356.339 989.791 Q352.728 989.791 350.899 993.356 Q349.094 996.897 349.094 1004.03 Q349.094 1011.13 350.899 1014.7 Q352.728 1018.24 356.339 1018.24 Q359.973 1018.24 361.779 1014.7 Q363.608 1011.13 363.608 1004.03 Q363.608 996.897 361.779 993.356 Q359.973 989.791 356.339 989.791 M356.339 986.087 Q362.149 986.087 365.205 990.694 Q368.284 995.277 368.284 1004.03 Q368.284 1012.75 365.205 1017.36 Q362.149 1021.94 356.339 1021.94 Q350.529 1021.94 347.45 1017.36 Q344.395 1012.75 344.395 1004.03 Q344.395 995.277 347.45 990.694 Q350.529 986.087 356.339 986.087 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip730)\" d=\"M286.062 728.829 L304.418 728.829 L304.418 732.764 L290.344 732.764 L290.344 741.236 Q291.363 740.889 292.381 740.727 Q293.4 740.542 294.418 740.542 Q300.205 740.542 303.585 743.713 Q306.964 746.885 306.964 752.301 Q306.964 757.88 303.492 760.982 Q300.02 764.06 293.701 764.06 Q291.525 764.06 289.256 763.69 Q287.011 763.32 284.603 762.579 L284.603 757.88 Q286.687 759.014 288.909 759.57 Q291.131 760.125 293.608 760.125 Q297.613 760.125 299.951 758.019 Q302.288 755.912 302.288 752.301 Q302.288 748.69 299.951 746.584 Q297.613 744.477 293.608 744.477 Q291.733 744.477 289.858 744.894 Q288.006 745.31 286.062 746.19 L286.062 728.829 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip730)\" d=\"M326.177 731.908 Q322.566 731.908 320.737 735.473 Q318.932 739.014 318.932 746.144 Q318.932 753.25 320.737 756.815 Q322.566 760.357 326.177 760.357 Q329.811 760.357 331.617 756.815 Q333.446 753.25 333.446 746.144 Q333.446 739.014 331.617 735.473 Q329.811 731.908 326.177 731.908 M326.177 728.204 Q331.987 728.204 335.043 732.811 Q338.122 737.394 338.122 746.144 Q338.122 754.871 335.043 759.477 Q331.987 764.06 326.177 764.06 Q320.367 764.06 317.288 759.477 Q314.233 754.871 314.233 746.144 Q314.233 737.394 317.288 732.811 Q320.367 728.204 326.177 728.204 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip730)\" d=\"M356.339 731.908 Q352.728 731.908 350.899 735.473 Q349.094 739.014 349.094 746.144 Q349.094 753.25 350.899 756.815 Q352.728 760.357 356.339 760.357 Q359.973 760.357 361.779 756.815 Q363.608 753.25 363.608 746.144 Q363.608 739.014 361.779 735.473 Q359.973 731.908 356.339 731.908 M356.339 728.204 Q362.149 728.204 365.205 732.811 Q368.284 737.394 368.284 746.144 Q368.284 754.871 365.205 759.477 Q362.149 764.06 356.339 764.06 Q350.529 764.06 347.45 759.477 Q344.395 754.871 344.395 746.144 Q344.395 737.394 347.45 732.811 Q350.529 728.204 356.339 728.204 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip730)\" d=\"M284.835 470.946 L307.057 470.946 L307.057 472.937 L294.511 505.506 L289.627 505.506 L301.432 474.881 L284.835 474.881 L284.835 470.946 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip730)\" d=\"M316.224 470.946 L334.58 470.946 L334.58 474.881 L320.506 474.881 L320.506 483.353 Q321.524 483.006 322.543 482.844 Q323.562 482.659 324.58 482.659 Q330.367 482.659 333.747 485.83 Q337.126 489.001 337.126 494.418 Q337.126 499.997 333.654 503.099 Q330.182 506.177 323.862 506.177 Q321.687 506.177 319.418 505.807 Q317.173 505.436 314.765 504.696 L314.765 499.997 Q316.849 501.131 319.071 501.686 Q321.293 502.242 323.77 502.242 Q327.774 502.242 330.112 500.136 Q332.45 498.029 332.45 494.418 Q332.45 490.807 330.112 488.7 Q327.774 486.594 323.77 486.594 Q321.895 486.594 320.02 487.011 Q318.168 487.427 316.224 488.307 L316.224 470.946 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip730)\" d=\"M356.339 474.025 Q352.728 474.025 350.899 477.589 Q349.094 481.131 349.094 488.261 Q349.094 495.367 350.899 498.932 Q352.728 502.474 356.339 502.474 Q359.973 502.474 361.779 498.932 Q363.608 495.367 363.608 488.261 Q363.608 481.131 361.779 477.589 Q359.973 474.025 356.339 474.025 M356.339 470.321 Q362.149 470.321 365.205 474.927 Q368.284 479.511 368.284 488.261 Q368.284 496.987 365.205 501.594 Q362.149 506.177 356.339 506.177 Q350.529 506.177 347.45 501.594 Q344.395 496.987 344.395 488.261 Q344.395 479.511 347.45 474.927 Q350.529 470.321 356.339 470.321 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip730)\" d=\"M256.664 243.688 L264.303 243.688 L264.303 217.322 L255.992 218.989 L255.992 214.729 L264.256 213.063 L268.932 213.063 L268.932 243.688 L276.571 243.688 L276.571 247.623 L256.664 247.623 L256.664 243.688 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip730)\" d=\"M296.015 216.141 Q292.404 216.141 290.576 219.706 Q288.77 223.248 288.77 230.377 Q288.77 237.484 290.576 241.049 Q292.404 244.59 296.015 244.59 Q299.65 244.59 301.455 241.049 Q303.284 237.484 303.284 230.377 Q303.284 223.248 301.455 219.706 Q299.65 216.141 296.015 216.141 M296.015 212.438 Q301.826 212.438 304.881 217.044 Q307.96 221.628 307.96 230.377 Q307.96 239.104 304.881 243.711 Q301.826 248.294 296.015 248.294 Q290.205 248.294 287.127 243.711 Q284.071 239.104 284.071 230.377 Q284.071 221.628 287.127 217.044 Q290.205 212.438 296.015 212.438 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip730)\" d=\"M326.177 216.141 Q322.566 216.141 320.737 219.706 Q318.932 223.248 318.932 230.377 Q318.932 237.484 320.737 241.049 Q322.566 244.59 326.177 244.59 Q329.811 244.59 331.617 241.049 Q333.446 237.484 333.446 230.377 Q333.446 223.248 331.617 219.706 Q329.811 216.141 326.177 216.141 M326.177 212.438 Q331.987 212.438 335.043 217.044 Q338.122 221.628 338.122 230.377 Q338.122 239.104 335.043 243.711 Q331.987 248.294 326.177 248.294 Q320.367 248.294 317.288 243.711 Q314.233 239.104 314.233 230.377 Q314.233 221.628 317.288 217.044 Q320.367 212.438 326.177 212.438 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip730)\" d=\"M356.339 216.141 Q352.728 216.141 350.899 219.706 Q349.094 223.248 349.094 230.377 Q349.094 237.484 350.899 241.049 Q352.728 244.59 356.339 244.59 Q359.973 244.59 361.779 241.049 Q363.608 237.484 363.608 230.377 Q363.608 223.248 361.779 219.706 Q359.973 216.141 356.339 216.141 M356.339 212.438 Q362.149 212.438 365.205 217.044 Q368.284 221.628 368.284 230.377 Q368.284 239.104 365.205 243.711 Q362.149 248.294 356.339 248.294 Q350.529 248.294 347.45 243.711 Q344.395 239.104 344.395 230.377 Q344.395 221.628 347.45 217.044 Q350.529 212.438 356.339 212.438 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip730)\" d=\"M184.22 784.801 L205.736 784.801 L205.736 790.657 L184.411 790.657 Q179.351 790.657 176.836 792.631 Q174.322 794.604 174.322 798.551 Q174.322 803.293 177.345 806.03 Q180.369 808.768 185.589 808.768 L205.736 808.768 L205.736 814.656 L170.088 814.656 L170.088 808.768 L175.627 808.768 Q172.412 806.667 170.821 803.834 Q169.229 800.97 169.229 797.246 Q169.229 791.103 173.049 787.952 Q176.836 784.801 184.22 784.801 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip730)\" d=\"M174.194 759.306 Q174.194 764.017 177.886 766.754 Q181.547 769.491 187.944 769.491 Q194.342 769.491 198.034 766.786 Q201.694 764.049 201.694 759.306 Q201.694 754.627 198.002 751.89 Q194.31 749.153 187.944 749.153 Q181.61 749.153 177.918 751.89 Q174.194 754.627 174.194 759.306 M169.229 759.306 Q169.229 751.667 174.194 747.307 Q179.16 742.946 187.944 742.946 Q196.697 742.946 201.694 747.307 Q206.659 751.667 206.659 759.306 Q206.659 766.977 201.694 771.337 Q196.697 775.666 187.944 775.666 Q179.16 775.666 174.194 771.337 Q169.229 766.977 169.229 759.306 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip730)\" d=\"M175.563 712.582 Q174.99 713.569 174.735 714.746 Q174.449 715.892 174.449 717.293 Q174.449 722.258 177.696 724.931 Q180.91 727.573 186.958 727.573 L205.736 727.573 L205.736 733.461 L170.088 733.461 L170.088 727.573 L175.627 727.573 Q172.38 725.727 170.821 722.767 Q169.229 719.807 169.229 715.574 Q169.229 714.969 169.325 714.237 Q169.388 713.505 169.547 712.614 L175.563 712.582 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip730)\" d=\"M176.932 679.83 Q172.985 677.634 171.107 674.579 Q169.229 671.523 169.229 667.385 Q169.229 661.815 173.144 658.792 Q177.027 655.768 184.22 655.768 L205.736 655.768 L205.736 661.656 L184.411 661.656 Q179.287 661.656 176.804 663.47 Q174.322 665.285 174.322 669.009 Q174.322 673.56 177.345 676.202 Q180.369 678.844 185.589 678.844 L205.736 678.844 L205.736 684.732 L184.411 684.732 Q179.255 684.732 176.804 686.546 Q174.322 688.36 174.322 692.148 Q174.322 696.636 177.377 699.278 Q180.401 701.919 185.589 701.919 L205.736 701.919 L205.736 707.808 L170.088 707.808 L170.088 701.919 L175.627 701.919 Q172.348 699.914 170.789 697.113 Q169.229 694.312 169.229 690.461 Q169.229 686.578 171.202 683.873 Q173.176 681.135 176.932 679.83 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><polyline clip-path=\"url(#clip732)\" style=\"stroke:#e26f46; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" stroke-dasharray=\"16, 10\" points=\"-1402.46,230.343 4017.76,230.343 \"/>\n<polyline clip-path=\"url(#clip732)\" style=\"stroke:#009af9; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"455.418,1250.53 455.986,1250.52 456.554,1250.43 457.123,1250.29 457.691,1250.05 458.259,1249.74 458.828,1249.37 459.396,1248.94 459.964,1248.41 460.533,1247.84 461.101,1247.18 461.669,1246.44 462.238,1245.62 462.806,1244.72 463.375,1243.71 463.943,1242.63 464.511,1240.42 465.08,1239.13 465.648,1237.74 466.216,1236.22 466.785,1234.6 467.353,1232.84 467.921,1229.92 468.49,1226.83 469.058,1224.64 469.626,1221.26 470.195,1216.69 470.763,1212.97 471.331,1207.98 471.9,1203.83 472.468,1200.59 473.036,1197.17 473.605,1193.54 474.173,1189.71 474.741,1185.74 475.31,1180.54 475.878,1176.15 476.446,1169.39 477.015,1164.58 477.583,1158.5 478.152,1150.13 478.72,1143.71 479.288,1138.12 479.857,1130.25 480.425,1124.37 480.993,1118.19 481.562,1110.88 482.13,1103.39 482.698,1095.58 483.267,1086.67 483.835,1077.63 484.403,1070.59 484.972,1061.21 485.54,1053.78 486.108,1045.19 486.677,1035.44 487.245,1027.41 487.813,1013.95 488.382,1004.85 488.95,996.652 489.518,988.295 490.087,979.807 490.655,970.126 491.224,960.329 491.792,950.614 492.36,940.64 492.929,930.613 493.497,919.508 494.065,908.392 494.634,898.256 495.202,888.123 495.77,878.958 496.339,868.558 496.907,858.242 497.475,847.87 498.044,838.496 498.612,828.112 499.18,815.722 499.749,804.497 500.317,795.292 500.885,783 501.454,772.869 502.022,763.928 502.59,752.899 503.159,743.954 503.727,730.904 504.295,721.038 504.864,712.454 505.432,700.792 506.001,691.297 506.569,679.85 507.137,669.478 507.706,659.405 508.274,651.462 508.842,643.628 509.411,633.705 509.979,624.179 510.547,616.746 511.116,606.203 511.684,598.98 512.252,589.888 512.821,582.896 513.389,576.033 513.957,565.883 514.526,558.018 515.094,552.445 515.662,544.745 516.231,536.192 516.799,529.768 517.367,521.41 517.936,514.385 518.504,505.345 519.072,497.608 519.641,492.152 520.209,485.478 520.778,479.183 521.346,474.946 521.914,468.733 522.483,464.642 523.051,455.515 523.619,448.773 524.188,444.239 524.756,437.008 525.324,430.693 525.893,425.68 526.461,419.681 527.029,413.918 527.598,412.434 528.166,407.807 528.734,404.452 529.303,400.873 529.871,397.289 530.439,392.924 531.008,388.701 531.576,382.397 532.144,377.32 532.713,371.372 533.281,366.863 533.85,364.357 534.418,360.047 534.986,359.949 535.555,357.594 536.123,356.234 536.691,351.843 537.26,349.527 537.828,348.066 538.396,345.756 538.965,342.429 539.533,339.047 540.101,336.947 540.67,334.82 541.238,333.743 541.806,331.755 542.375,330.747 542.943,328.59 543.511,324.535 544.08,323.665 544.648,319.619 545.216,312.535 545.785,311.154 546.353,308.909 546.921,306.429 547.49,305.41 548.058,303.248 548.627,300.743 549.195,298.706 549.763,297.844 550.332,295.555 550.9,294.379 551.468,292.31 552.037,290.126 552.605,291.272 553.173,288.071 553.742,287.172 554.31,287.228 554.878,285.193 555.447,280.403 556.015,278.591 556.583,279.317 557.152,277.771 557.72,277.168 558.288,276.438 558.857,276.953 559.425,276.468 559.993,278.005 560.562,276.199 561.13,276.266 561.698,274.467 562.267,272.907 562.835,272.168 563.404,270.399 563.972,270.086 564.54,268.595 565.109,269.284 565.677,265.637 566.245,267.129 566.814,266.779 567.382,266.288 567.95,263.675 568.519,261.113 569.087,259.787 569.655,260.518 570.224,258.278 570.792,259.259 571.36,257.995 571.929,257.807 572.497,257.75 573.065,257.658 573.634,256.294 574.202,254.865 574.77,254.703 575.339,254.046 575.907,254.031 576.476,254.172 577.044,253.015 577.612,252.883 578.181,251.999 578.749,252 579.317,251.157 579.886,248.968 580.454,249.064 581.022,249.411 581.591,247.564 582.159,246.901 582.727,245.1 583.296,245.522 583.864,244.787 584.432,245.15 585.001,245.498 585.569,244.89 586.137,245.103 586.706,245.264 587.274,244.521 587.842,243.839 588.411,244.274 588.979,244.606 589.547,247.189 590.116,248.522 590.684,248.627 591.253,247.607 591.821,246.722 592.389,246.8 592.958,246.974 593.526,247.004 594.094,247.008 594.663,245.975 595.231,246.965 595.799,248.969 596.368,245.642 596.936,243.551 597.504,242.586 598.073,242.858 598.641,243.008 599.209,241.162 599.778,242.496 600.346,243.672 600.914,242.642 601.483,243.784 602.051,242.809 602.619,241.893 603.188,240.995 603.756,240.332 604.325,240.571 604.893,240.907 605.461,241.071 606.03,242.324 606.598,242.185 607.166,243.35 607.735,240.389 608.303,239.587 608.871,238.881 609.44,239.256 610.008,237.728 610.576,236.069 611.145,233.492 611.713,237.325 612.281,238.797 612.85,238.078 613.418,237.434 613.986,237.881 614.555,239.413 615.123,239.62 615.691,240.892 616.26,240.112 616.828,240.182 617.396,238.271 617.965,238.754 618.533,236.945 619.102,236.42 619.67,236.712 620.238,237.125 620.807,237.611 621.375,235.832 621.943,234.173 622.512,234.652 623.08,234.294 623.648,235.98 624.217,235.478 624.785,237.046 625.353,236.257 625.922,236.796 626.49,238.361 627.058,237.644 627.627,237.016 628.195,237.37 628.763,239.623 629.332,239.786 629.9,239.886 630.468,239.878 631.037,238.138 631.605,236.34 632.173,236.607 632.742,236.763 633.31,235.91 633.879,234.178 634.447,232.574 635.015,231.21 635.584,232.953 636.152,234.579 636.72,237.051 637.289,236.201 637.857,236.606 638.425,236.823 638.994,236.521 639.562,238.945 640.13,240.128 640.699,241.224 641.267,243.152 641.835,243.075 642.404,242.981 642.972,242.811 643.54,242.837 644.109,241.461 644.677,241.386 645.245,242.356 645.814,243.11 646.382,241.677 646.951,241.499 647.519,242.135 648.087,240.848 648.656,240.833 649.224,239.658 649.792,239.664 650.361,239.484 650.929,239.525 651.497,240.572 652.066,239.294 652.634,238.077 653.202,237.987 653.771,236.723 654.339,234.715 654.907,234.895 655.476,234.07 656.044,233.323 656.612,233.802 657.181,233.898 657.749,235.252 658.317,235.299 658.886,234.403 659.454,234.742 660.022,234.88 660.591,234.995 661.159,234.954 661.728,236.351 662.296,237.245 662.864,237.275 663.433,239.465 664.001,237.247 664.569,236.21 665.138,234.154 665.706,233.226 666.274,233.308 666.843,231.573 667.411,229.675 667.979,230.034 668.548,231.587 669.116,231.063 669.684,230.483 670.253,231.03 670.821,231.406 671.389,232.836 671.958,231.074 672.526,232.561 673.094,234.105 673.663,234.254 674.231,234.442 674.799,233.544 675.368,232.909 675.936,235.222 676.505,237.388 677.073,236.317 677.641,238.584 678.21,238.491 678.778,239.399 679.346,238.139 679.915,238.16 680.483,239.263 681.051,239.283 681.62,238.835 682.188,239.556 682.756,238.223 683.325,240.081 683.893,237.647 684.461,237.246 685.03,237.175 685.598,234.082 686.166,235.316 686.735,234.33 687.303,232.205 687.871,232.533 688.44,232.847 689.008,230.876 689.577,231.912 690.145,231.144 690.713,231.246 691.282,234.684 691.85,234.654 692.418,235.81 692.987,233.761 693.555,234.796 694.123,232.68 694.692,233.719 695.26,233.758 695.828,232.585 696.397,231.858 696.965,231.077 697.533,231.363 698.102,231.715 698.67,230.903 699.238,235.101 699.807,230.839 700.375,231.092 700.943,232.584 701.512,231.796 702.08,232.98 702.648,231.053 703.217,232.398 703.785,232.63 704.354,233.786 704.922,232.945 705.49,233.043 706.059,233.071 706.627,232.946 707.195,233.005 707.764,232.999 708.332,233.4 708.9,235.65 709.469,235.481 710.037,235.325 710.605,235.106 711.174,232.954 711.742,232.059 712.31,232.177 712.879,231.394 713.447,230.513 714.015,227.731 714.584,228.417 715.152,228.802 715.72,230.18 716.289,231.352 716.857,230.338 717.425,232.541 717.994,235.654 718.562,233.515 719.131,233.409 719.699,232.251 720.267,232.342 720.836,232.447 721.404,232.383 721.972,233.425 722.541,233.489 723.109,232.616 723.677,234.748 724.246,234.538 724.814,234.37 725.382,233.36 725.951,233.39 726.519,234.55 727.087,235.634 727.656,236.638 728.224,236.693 728.792,237.656 729.361,238.534 729.929,237.209 730.497,237.006 731.066,237.721 731.634,238.14 732.203,237.963 732.771,237.44 733.339,237.274 733.908,235.988 734.476,236.786 735.044,235.35 735.613,235.145 736.181,233.813 736.749,233.864 737.318,231.675 737.886,231.911 738.454,234.17 739.023,236.379 739.591,236.942 740.159,237.583 740.728,235.098 741.296,233.876 741.864,233.651 742.433,233.483 743.001,235.775 743.569,235.362 744.138,235.134 744.706,234.956 745.274,233.601 745.843,230.664 746.411,230.93 746.98,229.95 747.548,230.212 748.116,227.316 748.685,223.602 749.253,225.176 749.821,225.723 750.39,224.273 750.958,223.875 751.526,226.56 752.095,225.845 752.663,226.457 753.231,224.76 753.8,224.323 754.368,225.98 754.936,226.46 755.505,226.98 756.073,227.374 756.641,227.869 757.21,230.254 757.778,229.268 758.346,225.518 758.915,226.954 759.483,225.206 760.052,223.567 760.62,222.034 761.188,223.928 761.757,222.631 762.325,223.411 762.893,224.269 763.462,221.832 764.03,222.794 764.598,225.854 765.167,225.444 765.735,228.285 766.303,228.776 766.872,229.348 767.44,229.893 768.008,229.135 768.577,227.517 769.145,228.944 769.713,228.227 770.282,229.83 770.85,231.27 771.418,233.405 771.987,233.351 772.555,233.586 773.123,235.757 773.692,237.838 774.26,238.648 774.829,240.573 775.397,242.168 775.965,242.614 776.534,242.109 777.102,240.421 777.67,239.945 778.239,237.364 778.807,238.309 779.375,235.845 779.944,233.628 780.512,231.515 781.08,231.574 781.649,232.832 782.217,233.085 782.785,233.337 783.354,233.671 783.922,232.632 784.49,231.597 785.059,231.606 785.627,233.704 786.195,229.242 786.764,230.742 787.332,231.86 787.9,230.968 788.469,232.121 789.037,233.06 789.606,231.816 790.174,233.038 790.742,232.078 791.311,231.187 791.879,230.096 792.447,230.266 793.016,232.513 793.584,233.694 794.152,232.621 794.721,234.694 795.289,237.502 795.857,237.115 796.426,238.799 796.994,236.167 797.562,234.913 798.131,236.786 798.699,237.241 799.267,234.901 799.836,235.744 800.404,234.442 800.972,233.454 801.541,234.282 802.109,233.038 802.678,231.792 803.246,229.946 803.814,229.934 804.383,229.907 804.951,232.197 805.519,231.19 806.088,230.289 806.656,230.132 807.224,231.286 807.793,232.381 808.361,234.241 808.929,235.207 809.498,234 810.066,232.68 810.634,232.425 811.203,233.259 811.771,230.76 812.339,230.763 812.908,231.897 813.476,230.865 814.044,229.019 814.613,228.225 815.181,226.496 815.749,223.8 816.318,225.424 816.886,225.893 817.455,226.25 818.023,228.72 818.591,228.73 819.16,229.071 819.728,228.401 820.296,228.616 820.865,228.068 821.433,227.342 822.001,226.649 822.57,227.141 823.138,227.679 823.706,227.887 824.275,226.332 824.843,227.751 825.411,227.075 825.98,228.653 826.548,229.071 827.116,231.241 827.685,229.371 828.253,231.699 828.821,231.951 829.39,234.148 829.958,232.873 830.526,231.658 831.095,230.633 831.663,231.967 832.232,232.058 832.8,231.021 833.368,230.882 833.937,231.949 834.505,231.045 835.073,232.175 835.642,227.894 836.21,230.194 836.778,230.462 837.347,230.786 837.915,231.912 838.483,233.95 839.052,232.788 839.62,233.665 840.188,233.8 840.757,231.931 841.325,231.094 841.893,230.12 842.462,231.311 843.03,229.345 843.598,230.606 844.167,233.621 844.735,234.434 845.304,232.24 845.872,232.21 846.44,231.98 847.009,234.916 847.577,232.781 848.145,231.766 848.714,231.771 849.282,232.76 849.85,231.494 850.419,232.364 850.987,231.247 851.555,231.32 852.124,232.305 852.692,233.51 853.26,232.314 853.829,232.382 854.397,231.443 854.965,231.511 855.534,230.466 856.102,231.513 856.67,231.437 857.239,236.43 857.807,236.036 858.375,234.577 858.944,233.342 859.512,233.152 860.081,231.971 860.649,233.089 861.217,233.914 861.786,230.675 862.354,229.8 862.922,230.901 863.491,230.848 864.059,229.932 864.627,229.061 865.196,229.225 865.764,228.559 866.332,227.684 866.901,229.821 867.469,230.255 868.037,232.694 868.606,232.59 869.174,233.49 869.742,233.016 870.311,232.863 870.879,232.777 871.447,231.595 872.016,232.599 872.584,232.605 873.152,229.423 873.721,228.618 874.289,231.905 874.858,233.928 875.426,235.933 875.994,236.438 876.563,236.038 877.131,234.636 877.699,234.25 878.268,232.862 878.836,232.721 879.404,231.67 879.973,234.632 880.541,232.106 881.109,230.75 881.678,230.794 882.246,229.123 882.814,228.111 883.383,227.138 883.951,226.189 884.519,225.221 885.088,225.581 885.656,225.191 886.224,224.418 886.793,224.868 887.361,224.321 887.93,225.649 888.498,226.004 889.066,228.64 889.635,227.628 890.203,227.029 890.771,229.273 891.34,228.298 891.908,227.731 892.476,229.926 893.045,228.781 893.613,227.724 894.181,228.208 894.75,227.468 895.318,227.687 895.886,226.94 896.455,229.465 897.023,229.744 897.591,227.677 898.16,226.923 898.728,230.586 899.296,230.749 899.865,229.93 900.433,232.366 901.001,233.473 901.57,232.59 902.138,235.821 902.707,236.856 903.275,236.729 903.843,235.322 904.412,236.219 904.98,235.876 905.548,235.511 906.117,236.259 906.685,236.122 907.253,234.832 907.822,234.903 908.39,233.506 908.958,232.446 909.527,234.422 910.095,235.377 910.663,234.004 911.232,234.98 911.8,234.743 912.368,234.556 912.937,231.142 913.505,231.169 914.073,230.249 914.642,230.375 915.21,230.361 915.779,231.496 916.347,230.356 916.915,231.706 917.484,232.814 918.052,233.664 918.62,232.55 919.189,231.575 919.757,231.368 920.325,232.412 920.894,232.473 921.462,232.459 922.03,232.28 922.599,231.202 923.167,231.19 923.735,231.973 924.304,232.979 924.872,231.87 925.44,230.707 926.009,229.677 926.577,229.772 927.145,230.778 927.714,231.005 928.282,231.893 928.85,229.941 929.419,228.865 929.987,229.161 930.556,229.269 931.124,230.418 931.692,231.794 932.261,231.726 932.829,230.775 933.397,231.692 933.966,232.542 934.534,231.364 935.102,231.063 935.671,233.161 936.239,233.03 936.807,232.945 937.376,232.73 937.944,232.847 938.512,232.596 939.081,232.572 939.649,232.348 940.217,232.09 940.786,231.141 941.354,229.083 941.922,228.179 942.491,229.65 943.059,229.786 943.627,226.403 944.196,229.922 944.764,233.103 945.333,230.843 945.901,231.924 946.469,232.868 947.038,235.689 947.606,235.217 948.174,233.671 948.743,234.476 949.311,235.244 949.879,234.995 950.448,234.736 951.016,236.387 951.584,234.796 952.153,234.35 952.721,234.095 953.289,232.831 953.858,231.578 954.426,234.525 954.994,234.09 955.563,234.708 956.131,235.189 956.699,233.042 957.268,232.635 957.836,232.54 958.405,232.395 958.973,234.045 959.541,233.558 960.11,232.998 960.678,232.644 961.246,232.397 961.815,234.151 962.383,232.605 962.951,232.169 963.52,232.965 964.088,232.593 964.656,231.311 965.225,231.224 965.793,230.2 966.361,230.098 966.93,228.79 967.498,234.085 968.066,233.666 968.635,234.372 969.203,234.935 969.771,234.289 970.34,233.943 970.908,232.402 971.476,229.966 972.045,230.01 972.613,230.014 973.182,227.655 973.75,227.664 974.318,226.665 974.887,228.52 975.455,227.347 976.023,228.617 976.592,228.616 977.16,227.56 977.728,227.528 978.297,227.653 978.865,225.615 979.433,222.976 980.002,224.506 980.57,225.752 981.138,223.846 981.707,225.289 982.275,224.698 982.843,224.088 983.412,224.551 983.98,228.11 984.548,226.412 985.117,228.816 985.685,227.9 986.253,226.078 986.822,227.32 987.39,224.45 987.959,223.986 988.527,225.725 989.095,227.045 989.664,226.073 990.232,228.523 990.8,230.794 991.369,231.789 991.937,230.479 992.505,228.491 993.074,229.512 993.642,228.551 994.21,227.783 994.779,226.917 995.347,229.289 995.915,232.424 996.484,231.211 997.052,229.109 997.62,228.97 998.189,229.151 998.757,229.297 999.325,230.411 999.894,230.521 1000.46,232.466 1001.03,231.175 1001.6,230.113 1002.17,232.26 1002.74,232.09 1003.3,233.997 1003.87,229.65 1004.44,230.742 1005.01,230.59 1005.58,228.583 1006.15,228.691 1006.71,227.99 1007.28,229.202 1007.85,231.191 1008.42,233.168 1008.99,232.339 1009.56,232.314 1010.12,232.17 1010.69,232.257 1011.26,231.377 1011.83,231.533 1012.4,232.618 1012.97,233.686 1013.53,233.399 1014.1,231.968 1014.67,230.823 1015.24,229.804 1015.81,231.857 1016.38,231.722 1016.94,232.83 1017.51,232.816 1018.08,233.579 1018.65,235.479 1019.22,236.195 1019.79,234.851 1020.35,233.534 1020.92,233.15 1021.49,231.981 1022.06,231.684 1022.63,231.387 1023.2,231.289 1023.76,230.332 1024.33,229.343 1024.9,229.463 1025.47,229.568 1026.04,228.659 1026.61,227.812 1027.17,228.025 1027.74,229.276 1028.31,231.406 1028.88,230.403 1029.45,231.441 1030.02,230.279 1030.58,231.284 1031.15,232.167 1031.72,231.183 1032.29,232.006 1032.86,230.83 1033.43,232.578 1033.99,231.461 1034.56,233.563 1035.13,233.484 1035.7,234.29 1036.27,234.804 1036.84,233.524 1037.4,236.317 1037.97,236.006 1038.54,235.585 1039.11,234.284 1039.68,235.096 1040.25,233.729 1040.81,231.289 1041.38,230.284 1041.95,228.231 1042.52,228.34 1043.09,229.52 1043.66,230.649 1044.22,230.489 1044.79,229.202 1045.36,229.105 1045.93,230.194 1046.5,226.943 1047.07,229.237 1047.63,228.478 1048.2,227.373 1048.77,226.513 1049.34,226.587 1049.91,225.699 1050.48,226.146 1051.05,224.371 1051.61,224.598 1052.18,223.833 1052.75,225.299 1053.32,227.12 1053.89,227.494 1054.46,226.694 1055.02,225.829 1055.59,226.043 1056.16,227.305 1056.73,228.566 1057.3,229.683 1057.87,229.598 1058.43,231.534 1059,231.291 1059.57,229.986 1060.14,229.017 1060.71,228.112 1061.28,227.384 1061.84,227.656 1062.41,224.809 1062.98,226.272 1063.55,224.534 1064.12,225.001 1064.69,225.303 1065.25,225.706 1065.82,226.265 1066.39,226.638 1066.96,227.974 1067.53,228.449 1068.1,227.413 1068.66,228.844 1069.23,228.101 1069.8,228.25 1070.37,228.381 1070.94,228.555 1071.51,227.753 1072.07,229.073 1072.64,230.357 1073.21,230.417 1073.78,230.608 1074.35,231.606 1074.92,232.704 1075.48,231.521 1076.05,231.567 1076.62,231.68 1077.19,232.921 1077.76,232.892 1078.33,231.766 1078.89,231.783 1079.46,231.685 1080.03,230.348 1080.6,228.329 1081.17,228.594 1081.74,228.695 1082.3,226.861 1082.87,225.939 1083.44,228.265 1084.01,226.514 1084.58,228.888 1085.15,228.16 1085.71,227.548 1086.28,226.777 1086.85,227.922 1087.42,231.097 1087.99,230.265 1088.56,228.347 1089.12,228.539 1089.69,227.746 1090.26,225.825 1090.83,227.215 1091.4,226.432 1091.97,227.727 1092.53,226.87 1093.1,225.958 1093.67,225.483 1094.24,226.678 1094.81,228.344 1095.38,230.659 1095.94,230.511 1096.51,227.498 1097.08,229.809 1097.65,230.182 1098.22,229.344 1098.79,230.385 1099.35,230.724 1099.92,231.832 1100.49,233.078 1101.06,234.946 1101.63,236.623 1102.2,236.245 1102.76,238.05 1103.33,236.901 1103.9,235.42 1104.47,235.007 1105.04,236.795 1105.61,234.351 1106.17,235.049 1106.74,233.856 1107.31,235.61 1107.88,235.331 1108.45,234.844 1109.02,233.526 1109.58,233.411 1110.15,235.331 1110.72,237.077 1111.29,236.578 1111.86,237.459 1112.43,234.115 1112.99,237.916 1113.56,235.132 1114.13,234.806 1114.7,236.581 1115.27,238.21 1115.84,238.857 1116.4,238.954 1116.97,239.275 1117.54,235.315 1118.11,234.882 1118.68,234.428 1119.25,232.96 1119.81,231.93 1120.38,232.743 1120.95,230.484 1121.52,232.152 1122.09,233.013 1122.66,232.513 1123.23,230.292 1123.79,230.127 1124.36,228.913 1124.93,228.779 1125.5,225.767 1126.07,226.196 1126.64,226.344 1127.2,225.387 1127.77,226.888 1128.34,227.129 1128.91,227.211 1129.48,224.371 1130.05,225.885 1130.61,226.147 1131.18,226.507 1131.75,227.006 1132.32,227.098 1132.89,227.151 1133.46,227.259 1134.02,228.472 1134.59,229.924 1135.16,228.895 1135.73,229.003 1136.3,229.913 1136.87,230.741 1137.43,232.823 1138,231.746 1138.57,231.622 1139.14,228.415 1139.71,226.562 1140.28,225.93 1140.84,226.231 1141.41,226.633 1141.98,226.947 1142.55,225.481 1143.12,227.972 1143.69,228.271 1144.25,227.572 1144.82,229.082 1145.39,229.365 1145.96,227.285 1146.53,227.569 1147.1,228.814 1147.66,229.945 1148.23,231.101 1148.8,233.286 1149.37,233.036 1149.94,231.755 1150.51,231.767 1151.07,231.837 1151.64,230.867 1152.21,228.485 1152.78,228.687 1153.35,228.792 1153.92,228.117 1154.48,229.45 1155.05,229.418 1155.62,232.467 1156.19,233.422 1156.76,234.305 1157.33,233.94 1157.89,235.749 1158.46,238.842 1159.03,238.3 1159.6,236.785 1160.17,237.172 1160.74,238.589 1161.3,236.813 1161.87,236.197 1162.44,236.709 1163.01,235.135 1163.58,234.694 1164.15,232.267 1164.71,233.262 1165.28,232.165 1165.85,233.086 1166.42,233.844 1166.99,233.529 1167.56,233.103 1168.12,231.692 1168.69,231.497 1169.26,231.378 1169.83,231.327 1170.4,232.211 1170.97,231.128 1171.53,231.158 1172.1,230.989 1172.67,227.778 1173.24,228.044 1173.81,227.043 1174.38,224.152 1174.94,224.365 1175.51,222.627 1176.08,224.209 1176.65,224.661 1177.22,222.918 1177.79,225.631 1178.35,221.903 1178.92,222.56 1179.49,225.239 1180.06,225.597 1180.63,225.894 1181.2,226.217 1181.76,226.642 1182.33,225.765 1182.9,226.31 1183.47,227.699 1184.04,230.106 1184.61,229.12 1185.17,226.159 1185.74,225.67 1186.31,227.176 1186.88,227.425 1187.45,227.587 1188.02,228.88 1188.58,229.095 1189.15,229.339 1189.72,231.445 1190.29,231.514 1190.86,233.751 1191.43,232.503 1192,232.232 1192.56,231.191 1193.13,231.287 1193.7,232.469 1194.27,234.432 1194.84,234.17 1195.41,233.933 1195.97,231.676 1196.54,232.741 1197.11,231.478 1197.68,231.601 1198.25,231.488 1198.82,232.398 1199.38,230.339 1199.95,229.456 1200.52,229.533 1201.09,230.614 1201.66,229.426 1202.23,227.673 1202.79,228.91 1203.36,230.13 1203.93,231.272 1204.5,232.335 1205.07,231.915 1205.64,230.742 1206.2,232.785 1206.77,231.811 1207.34,230.773 1207.91,233.877 1208.48,232.607 1209.05,233.393 1209.61,233.319 1210.18,233.049 1210.75,231.864 1211.32,230.73 1211.89,232.795 1212.46,234.646 1213.02,235.272 1213.59,232.88 1214.16,232.445 1214.73,233.499 1215.3,233.366 1215.87,233.178 1216.43,235.005 1217,235.925 1217.57,234.602 1218.14,234.953 1218.71,235.916 1219.28,235.264 1219.84,234.897 1220.41,234.626 1220.98,235.345 1221.55,231.94 1222.12,232.827 1222.69,231.696 1223.25,231.478 1223.82,231.386 1224.39,232.377 1224.96,232.133 1225.53,229.79 1226.1,230.793 1226.66,232.719 1227.23,232.473 1227.8,232.156 1228.37,230.86 1228.94,228.419 1229.51,227.363 1230.07,231.79 1230.64,230.491 1231.21,231.535 1231.78,230.305 1232.35,230.126 1232.92,231.214 1233.48,227.832 1234.05,231.246 1234.62,231.18 1235.19,231.07 1235.76,230.975 1236.33,229.829 1236.89,229.928 1237.46,230.022 1238.03,229.841 1238.6,228.507 1239.17,225.341 1239.74,225.801 1240.3,225.982 1240.87,228.367 1241.44,228.386 1242.01,226.365 1242.58,225.505 1243.15,225.872 1243.71,228.53 1244.28,229.639 1244.85,229.161 1245.42,229.426 1245.99,228.418 1246.56,228.51 1247.12,229.81 1247.69,229.861 1248.26,229.822 1248.83,228.98 1249.4,229.115 1249.97,232.322 1250.53,229.905 1251.1,229.552 1251.67,228.33 1252.24,228.39 1252.81,228.292 1253.38,228.468 1253.94,227.376 1254.51,228.723 1255.08,227.793 1255.65,229.808 1256.22,230.011 1256.79,228.984 1257.35,228.047 1257.92,228.125 1258.49,228.325 1259.06,226.526 1259.63,227.766 1260.2,229.106 1260.76,229.168 1261.33,229.236 1261.9,227.055 1262.47,228.293 1263.04,229.258 1263.61,229.554 1264.18,226.642 1264.74,227.968 1265.31,227.082 1265.88,227.34 1266.45,227.611 1267.02,230.043 1267.59,230.165 1268.15,232.324 1268.72,233.325 1269.29,230.134 1269.86,227.044 1270.43,227.543 1271,229.05 1271.56,229.074 1272.13,229.287 1272.7,230.407 1273.27,231.403 1273.84,232.373 1274.41,232.299 1274.97,233.147 1275.54,232.948 1276.11,231.526 1276.68,231.276 1277.25,233.212 1277.82,232.92 1278.38,231.822 1278.95,233.712 1279.52,230.199 1280.09,232.16 1280.66,232.848 1281.23,231.638 1281.79,231.611 1282.36,231.375 1282.93,231.327 1283.5,231.456 1284.07,231.309 1284.64,233.53 1285.2,232.217 1285.77,231.03 1286.34,233.074 1286.91,232.799 1287.48,234.568 1288.05,233.14 1288.61,232.02 1289.18,230.925 1289.75,230.809 1290.32,230.881 1290.89,231.86 1291.46,233.906 1292.02,237.764 1292.59,237.484 1293.16,237.719 1293.73,237.198 1294.3,235.683 1294.87,235.176 1295.43,234.77 1296,235.378 1296.57,236.03 1297.14,236.56 1297.71,235.108 1298.28,233.726 1298.84,234.492 1299.41,233.903 1299.98,234.36 1300.55,232.938 1301.12,232.539 1301.69,232.11 1302.25,230.817 1302.82,231.622 1303.39,230.279 1303.96,229.13 1304.53,228.152 1305.1,229.28 1305.66,229.16 1306.23,229.085 1306.8,228.905 1307.37,228.809 1307.94,229.731 1308.51,229.69 1309.07,228.31 1309.64,227.283 1310.21,227.357 1310.78,227.465 1311.35,227.418 1311.92,226.395 1312.48,228.632 1313.05,227.596 1313.62,226.623 1314.19,226.895 1314.76,225.91 1315.33,227.2 1315.89,225.205 1316.46,223.393 1317.03,225.856 1317.6,226.232 1318.17,225.616 1318.74,225.824 1319.3,224.015 1319.87,222.226 1320.44,223.971 1321.01,224.277 1321.58,225.858 1322.15,226.408 1322.71,227.825 1323.28,228.124 1323.85,227.484 1324.42,227.71 1324.99,227.975 1325.56,227.165 1326.12,230.521 1326.69,232.612 1327.26,234.499 1327.83,234.337 1328.4,235.985 1328.97,234.557 1329.53,233.227 1330.1,234.939 1330.67,234.668 1331.24,234.467 1331.81,234.243 1332.38,233.805 1332.94,232.477 1333.51,232.256 1334.08,233.107 1334.65,231.741 1335.22,229.714 1335.79,229.531 1336.36,229.507 1336.92,230.731 1337.49,228.655 1338.06,228.712 1338.63,228.906 1339.2,230.912 1339.77,232.018 1340.33,230.771 1340.9,232.079 1341.47,234.185 1342.04,234.808 1342.61,234.578 1343.18,236.511 1343.74,234.983 1344.31,234.544 1344.88,234.242 1345.45,233.975 1346.02,234.807 1346.59,233.335 1347.15,233.947 1347.72,232.609 1348.29,231.165 1348.86,228.885 1349.43,230.796 1350,230.73 1350.56,228.49 1351.13,228.487 1351.7,228.661 1352.27,228.526 1352.84,226.704 1353.41,225.833 1353.97,223.007 1354.54,222.357 1355.11,223.071 1355.68,223.41 1356.25,224.04 1356.82,224.473 1357.38,221.556 1357.95,222.273 1358.52,223.078 1359.09,223.511 1359.66,223.116 1360.23,223.804 1360.79,224.163 1361.36,226.691 1361.93,227.025 1362.5,228.57 1363.07,228.5 1363.64,228.648 1364.2,228.714 1364.77,230.763 1365.34,229.805 1365.91,227.772 1366.48,227.865 1367.05,230.323 1367.61,230.399 1368.18,231.733 1368.75,230.723 1369.32,227.897 1369.89,226.142 1370.46,225.669 1371.02,227.128 1371.59,227.689 1372.16,226.956 1372.73,225.19 1373.3,228.737 1373.87,227.929 1374.43,227.9 1375,229.185 1375.57,231.49 1376.14,233.506 1376.71,232.494 1377.28,232.518 1377.84,233.561 1378.41,233.226 1378.98,234.176 1379.55,232.898 1380.12,232.729 1380.69,232.705 1381.25,232.692 1381.82,233.594 1382.39,233.345 1382.96,232.153 1383.53,228.271 1384.1,228.498 1384.66,227.8 1385.23,230.069 1385.8,233.546 1386.37,234.209 1386.94,234.018 1387.51,233.7 1388.07,235.481 1388.64,236.044 1389.21,235.657 1389.78,235.512 1390.35,235.282 1390.92,234.993 1391.48,232.651 1392.05,233.612 1392.62,233.393 1393.19,233.102 1393.76,232.975 1394.33,232.728 1394.89,232.577 1395.46,232.286 1396.03,231.207 1396.6,231.038 1397.17,232.003 1397.74,231.089 1398.3,231.287 1398.87,231.231 1399.44,232.095 1400.01,232.073 1400.58,231.901 1401.15,230.789 1401.71,232.794 1402.28,232.503 1402.85,232.298 1403.42,232.397 1403.99,233.132 1404.56,232.854 1405.13,234.597 1405.69,233.353 1406.26,232.935 1406.83,229.632 1407.4,230.43 1407.97,231.358 1408.54,234.416 1409.1,233.979 1409.67,232.604 1410.24,233.393 1410.81,232.873 1411.38,232.566 1411.95,231.156 1412.51,234.106 1413.08,235.002 1413.65,233.594 1414.22,231.14 1414.79,230.881 1415.36,231.781 1415.92,230.779 1416.49,229.47 1417.06,228.561 1417.63,227.506 1418.2,226.585 1418.77,226.708 1419.33,224.921 1419.9,226.14 1420.47,225.348 1421.04,226.461 1421.61,225.741 1422.18,222.938 1422.74,222.311 1423.31,221.926 1423.88,222.401 1424.45,221.8 1425.02,222.424 1425.59,223.997 1426.15,223.424 1426.72,221.928 1427.29,222.657 1427.86,227.24 1428.43,228.562 1429,229.932 1429.56,232.891 1430.13,230.644 1430.7,230.96 1431.27,228.977 1431.84,229.96 1432.41,229.196 1432.97,229.333 1433.54,231.375 1434.11,228.314 1434.68,229.626 1435.25,229.876 1435.82,229.144 1436.38,230.556 1436.95,231.42 1437.52,229.422 1438.09,229.452 1438.66,228.6 1439.23,230.842 1439.79,232.684 1440.36,232.481 1440.93,231.226 1441.5,231.185 1442.07,230.282 1442.64,230.449 1443.2,228.548 1443.77,228.521 1444.34,229.71 1444.91,230.868 1445.48,227.779 1446.05,228.037 1446.61,229.555 1447.18,230.587 1447.75,231.561 1448.32,230.527 1448.89,230.536 1449.46,229.727 1450.02,229.713 1450.59,232.99 1451.16,234.904 1451.73,233.689 1452.3,230.331 1452.87,230.479 1453.43,231.394 1454,229.193 1454.57,226.162 1455.14,228.402 1455.71,231.601 1456.28,228.304 1456.84,228.427 1457.41,228.629 1457.98,227.479 1458.55,223.552 1459.12,224.884 1459.69,223.089 1460.25,222.547 1460.82,222.109 1461.39,221.713 1461.96,225.455 1462.53,225.819 1463.1,227.451 1463.66,228.785 1464.23,230.252 1464.8,230.465 1465.37,228.591 1465.94,227.955 1466.51,231.312 1467.07,229.63 1467.64,230.748 1468.21,231.905 1468.78,231.579 1469.35,231.512 1469.92,230.717 1470.48,230.866 1471.05,230.855 1471.62,229.138 1472.19,228.211 1472.76,228.248 1473.33,228.582 1473.89,227.017 1474.46,228.214 1475.03,228.392 1475.6,232.798 1476.17,232.876 1476.74,233.76 1477.31,232.871 1477.87,234.776 1478.44,232.545 1479.01,232.622 1479.58,232.606 1480.15,235.559 1480.72,236.18 1481.28,234.752 1481.85,234.551 1482.42,233.409 1482.99,234.26 1483.56,234.086 1484.13,230.86 1484.69,231.15 1485.26,230.051 1485.83,226.931 1486.4,227.428 1486.97,227.524 1487.54,229.845 1488.1,230.033 1488.67,229.905 1489.24,230.029 1489.81,233.158 1490.38,231.997 1490.95,230.875 1491.51,229.82 1492.08,229.946 1492.65,231.062 1493.22,231.084 1493.79,232.029 1494.36,233.054 1494.92,234.034 1495.49,234.1 1496.06,234.003 1496.63,233.817 1497.2,232.308 1497.77,235.454 1498.33,235.069 1498.9,234.633 1499.47,233.352 1500.04,234.345 1500.61,232.884 1501.18,232.772 1501.74,231.541 1502.31,232.491 1502.88,231.295 1503.45,228.248 1504.02,226.489 1504.59,226.719 1505.15,227.017 1505.72,227.154 1506.29,226.44 1506.86,222.835 1507.43,224.567 1508,223.833 1508.56,223.538 1509.13,225.136 1509.7,224.568 1510.27,226.068 1510.84,227.554 1511.41,227.842 1511.97,228.183 1512.54,230.715 1513.11,230.943 1513.68,231.099 1514.25,229.899 1514.82,231.132 1515.38,230.139 1515.95,232.459 1516.52,231.379 1517.09,232.495 1517.66,232.388 1518.23,231.286 1518.79,233.386 1519.36,237.396 1519.93,237.888 1520.5,235.219 1521.07,234.922 1521.64,231.565 1522.2,232.525 1522.77,232.37 1523.34,232.382 1523.91,230.985 1524.48,231.997 1525.05,227.987 1525.61,228.255 1526.18,228.353 1526.75,229.572 1527.32,230.598 1527.89,230.525 1528.46,231.393 1529.02,231.349 1529.59,231.168 1530.16,231.352 1530.73,232.4 1531.3,231.254 1531.87,231.259 1532.43,231.096 1533,231.099 1533.57,231.16 1534.14,229.147 1534.71,228.303 1535.28,227.522 1535.84,228.859 1536.41,227.106 1536.98,226.54 1537.55,226.952 1538.12,225.21 1538.69,226.659 1539.25,227.049 1539.82,227.098 1540.39,230.331 1540.96,231.461 1541.53,232.435 1542.1,232.466 1542.66,230.342 1543.23,231.598 1543.8,230.465 1544.37,228.459 1544.94,229.634 1545.51,230.841 1546.08,230.856 1546.64,231.025 1547.21,233.249 1547.78,233.21 1548.35,234.214 1548.92,232.832 1549.49,232.715 1550.05,235.977 1550.62,236.485 1551.19,237.151 1551.76,235.704 1552.33,234.319 1552.9,236.012 1553.46,237.839 1554.03,235.267 1554.6,235.091 1555.17,234.848 1555.74,232.347 1556.31,232.002 1556.87,228.879 1557.44,228.861 1558.01,230.885 1558.58,232.024 1559.15,229.783 1559.72,229.586 1560.28,229.367 1560.85,230.551 1561.42,231.616 1561.99,233.735 1562.56,233.423 1563.13,233.374 1563.69,232.131 1564.26,233.192 1564.83,234.846 1565.4,234.358 1565.97,235.058 1566.54,234.363 1567.1,234.197 1567.67,233.875 1568.24,233.539 1568.81,231.911 1569.38,232.528 1569.95,235.302 1570.51,237.777 1571.08,238.422 1571.65,237.7 1572.22,238.148 1572.79,237.115 1573.36,236.396 1573.92,235.993 1574.49,234.511 1575.06,235.07 1575.63,236.572 1576.2,234.6 1576.77,234.185 1577.33,233.715 1577.9,233.355 1578.47,230.772 1579.04,230.579 1579.61,230.467 1580.18,230.543 1580.74,229.085 1581.31,226.775 1581.88,226.836 1582.45,225.958 1583.02,225.974 1583.59,225.119 1584.15,223.18 1584.72,223.399 1585.29,223.801 1585.86,223.263 1586.43,221.511 1587,222.162 1587.56,223.687 1588.13,224.042 1588.7,223.315 1589.27,223.579 1589.84,223.68 1590.41,224.212 1590.97,225.339 1591.54,223.541 1592.11,223.859 1592.68,225.395 1593.25,226.68 1593.82,229.173 1594.38,228.02 1594.95,227.076 1595.52,229.384 1596.09,232.479 1596.66,231.406 1597.23,232.424 1597.79,232.431 1598.36,230.224 1598.93,229.435 1599.5,227.348 1600.07,226.602 1600.64,227.864 1601.2,227.705 1601.77,228.88 1602.34,229.895 1602.91,231.13 1603.48,230.247 1604.05,232.373 1604.61,232.274 1605.18,230.259 1605.75,231.57 1606.32,232.32 1606.89,231.346 1607.46,233.571 1608.02,231.245 1608.59,233.339 1609.16,233.113 1609.73,229.756 1610.3,230.633 1610.87,230.752 1611.43,229.866 1612,227.861 1612.57,228.062 1613.14,228.412 1613.71,229.487 1614.28,228.486 1614.84,228.586 1615.41,226.676 1615.98,228.083 1616.55,229.281 1617.12,229.316 1617.69,230.47 1618.26,232.512 1618.82,232.259 1619.39,235.356 1619.96,235.096 1620.53,233.723 1621.1,230.368 1621.67,229.372 1622.23,230.293 1622.8,229.274 1623.37,229.427 1623.94,230.514 1624.51,229.659 1625.08,229.701 1625.64,228.958 1626.21,228.162 1626.78,232.336 1627.35,231.265 1627.92,230.233 1628.49,229.101 1629.05,229.293 1629.62,229.506 1630.19,230.673 1630.76,230.529 1631.33,231.393 1631.9,230.326 1632.46,230.395 1633.03,230.492 1633.6,233.79 1634.17,232.54 1634.74,233.314 1635.31,233.242 1635.87,231.777 1636.44,231.578 1637.01,231.43 1637.58,232.116 1638.15,233.971 1638.72,233.5 1639.28,234.081 1639.85,233.503 1640.42,233.125 1640.99,232.741 1641.56,232.726 1642.13,233.554 1642.69,232.238 1643.26,233.295 1643.83,234.167 1644.4,234.738 1644.97,234.291 1645.54,234.05 1646.1,232.538 1646.67,234.465 1647.24,234.243 1647.81,233.724 1648.38,233.658 1648.95,234.203 1649.51,233.673 1650.08,234.362 1650.65,234.027 1651.22,232.537 1651.79,231.304 1652.36,231.312 1652.92,230.982 1653.49,232.175 1654.06,232.942 1654.63,230.798 1655.2,227.673 1655.77,227.791 1656.33,227.294 1656.9,228.451 1657.47,226.503 1658.04,226.892 1658.61,226.865 1659.18,225.812 1659.74,226.054 1660.31,227.456 1660.88,227.652 1661.45,224.498 1662.02,223.757 1662.59,223.175 1663.15,223.694 1663.72,222.093 1664.29,221.795 1664.86,223.381 1665.43,223.869 1666,224.353 1666.56,224.731 1667.13,225.241 1667.7,226.676 1668.27,229.076 1668.84,229.222 1669.41,228.479 1669.97,228.617 1670.54,230.771 1671.11,230.719 1671.68,229.823 1672.25,231.807 1672.82,229.335 1673.38,228.549 1673.95,227.906 1674.52,225.933 1675.09,225.295 1675.66,224.361 1676.23,226.719 1676.79,226.908 1677.36,226.11 1677.93,226.52 1678.5,226.765 1679.07,227.239 1679.64,232.618 1680.2,233.451 1680.77,232.301 1681.34,232.24 1681.91,231.199 1682.48,232.386 1683.05,234.167 1683.61,234.136 1684.18,235.05 1684.75,235.857 1685.32,234.474 1685.89,235.075 1686.46,233.69 1687.02,231.401 1687.59,229.222 1688.16,229.309 1688.73,229.583 1689.3,229.917 1689.87,228.702 1690.44,230.131 1691,228.047 1691.57,226.214 1692.14,225.549 1692.71,225.955 1693.28,226.204 1693.85,227.345 1694.41,229.375 1694.98,228.366 1695.55,227.517 1696.12,227.96 1696.69,230.388 1697.26,231.376 1697.82,232.413 1698.39,232.355 1698.96,231.263 1699.53,232.146 1700.1,232.24 1700.67,230.066 1701.23,230.204 1701.8,230.37 1702.37,230.393 1702.94,232.594 1703.51,233.407 1704.08,233.077 1704.64,231.798 1705.21,230.749 1705.78,229.706 1706.35,230.798 1706.92,229.722 1707.49,226.593 1708.05,229.909 1708.62,231.167 1709.19,232.2 1709.76,234.15 1710.33,233.072 1710.9,232.998 1711.46,232.753 1712.03,233.689 1712.6,233.497 1713.17,234.319 1713.74,234.033 1714.31,235.954 1714.87,235.413 1715.44,234.197 1716.01,234.048 1716.58,232.781 1717.15,232.625 1717.72,233.487 1718.28,234.248 1718.85,233.759 1719.42,233.491 1719.99,234.007 1720.56,234.783 1721.13,234.491 1721.69,233.099 1722.26,233.77 1722.83,232.453 1723.4,230.969 1723.97,230.91 1724.54,231.517 1725.1,230.323 1725.67,229.987 1726.24,229.722 1726.81,229.701 1727.38,230.863 1727.95,230.86 1728.51,229.591 1729.08,231.676 1729.65,230.096 1730.22,228.165 1730.79,229.053 1731.36,226.088 1731.92,226.449 1732.49,227.66 1733.06,228.837 1733.63,228.909 1734.2,231.036 1734.77,230.026 1735.33,229.932 1735.9,230.963 1736.47,230.915 1737.04,230.606 1737.61,229.458 1738.18,230.496 1738.74,229.618 1739.31,231.651 1739.88,228.491 1740.45,226.358 1741.02,225.556 1741.59,225.606 1742.15,225.927 1742.72,226.279 1743.29,225.436 1743.86,225.81 1744.43,223.137 1745,223.68 1745.56,223.471 1746.13,224.174 1746.7,224.684 1747.27,226.181 1747.84,225.478 1748.41,227.755 1748.97,227.849 1749.54,228.066 1750.11,228.317 1750.68,230.705 1751.25,232.956 1751.82,231.712 1752.38,229.596 1752.95,228.803 1753.52,230.176 1754.09,229.285 1754.66,227.45 1755.23,228.789 1755.79,228.727 1756.36,227.937 1756.93,227.306 1757.5,226.411 1758.07,226.894 1758.64,225.206 1759.21,225.702 1759.77,225.112 1760.34,223.482 1760.91,224.981 1761.48,224.603 1762.05,222.987 1762.62,223.518 1763.18,225.191 1763.75,226.634 1764.32,224.075 1764.89,226.712 1765.46,229.202 1766.03,227.267 1766.59,228.729 1767.16,226.858 1767.73,227.148 1768.3,226.645 1768.87,226.986 1769.44,230.463 1770,230.725 1770.57,233.649 1771.14,233.414 1771.71,236.444 1772.28,236.123 1772.85,234.738 1773.41,234.713 1773.98,234.566 1774.55,234.279 1775.12,233.963 1775.69,233.364 1776.26,232.188 1776.82,232.19 1777.39,233.208 1777.96,233.233 1778.53,233.273 1779.1,235.318 1779.67,235.078 1780.23,236.841 1780.8,235.596 1781.37,235.544 1781.94,235.094 1782.51,234.019 1783.08,232.571 1783.64,234.642 1784.21,232.439 1784.78,232.497 1785.35,232.383 1785.92,230.199 1786.49,230.333 1787.05,231.62 1787.62,231.573 1788.19,233.571 1788.76,236.421 1789.33,237.03 1789.9,238.542 1790.46,239.919 1791.03,239.224 1791.6,238.753 1792.17,239.562 1792.74,240.977 1793.31,239.039 1793.87,238.441 1794.44,240.963 1795.01,240.189 1795.58,241.643 1796.15,243.695 1796.72,241.555 1797.28,239.734 1797.85,236.971 1798.42,234.317 1798.99,233.817 1799.56,233.584 1800.13,235.038 1800.69,235.501 1801.26,233.995 1801.83,233.473 1802.4,231.934 1802.97,231.937 1803.54,230.736 1804.1,232.613 1804.67,231.208 1805.24,228.94 1805.81,228.875 1806.38,229.788 1806.95,228.61 1807.51,229.71 1808.08,230.513 1808.65,230.454 1809.22,230.385 1809.79,228.062 1810.36,226.956 1810.92,226.068 1811.49,225.304 1812.06,226.522 1812.63,222.615 1813.2,219.895 1813.77,223.793 1814.33,222.045 1814.9,223.543 1815.47,223.685 1816.04,226.182 1816.61,226.378 1817.18,228.377 1817.74,226.392 1818.31,227.48 1818.88,227.597 1819.45,226.587 1820.02,226.839 1820.59,227.014 1821.15,227.271 1821.72,229.51 1822.29,228.376 1822.86,226.506 1823.43,225.82 1824,224.976 1824.56,226.391 1825.13,228.535 1825.7,228.483 1826.27,228.929 1826.84,227.786 1827.41,225.899 1827.97,226.07 1828.54,227.479 1829.11,225.624 1829.68,225.882 1830.25,227.223 1830.82,227.69 1831.39,229.008 1831.95,227.153 1832.52,226.316 1833.09,225.672 1833.66,228.226 1834.23,228.504 1834.8,229.882 1835.36,228.805 1835.93,230.816 1836.5,233.79 1837.07,232.497 1837.64,232.337 1838.21,229.809 1838.77,230.159 1839.34,229.226 1839.91,228.15 1840.48,229.423 1841.05,229.499 1841.62,229.424 1842.18,229.463 1842.75,227.46 1843.32,226.718 1843.89,227.934 1844.46,230.337 1845.03,228.275 1845.59,230.554 1846.16,229.672 1846.73,231.842 1847.3,230.664 1847.87,230.705 1848.44,230.638 1849,230.839 1849.57,230.958 1850.14,233.09 1850.71,233.039 1851.28,231.93 1851.85,231.68 1852.41,234.93 1852.98,232.586 1853.55,233.491 1854.12,237.295 1854.69,236.996 1855.26,235.389 1855.82,234.072 1856.39,233.954 1856.96,233.56 1857.53,233.353 1858.1,235.174 1858.67,233.699 1859.23,233.379 1859.8,230.849 1860.37,230.738 1860.94,230.529 1861.51,231.6 1862.08,230.37 1862.64,232.231 1863.21,232.095 1863.78,231.971 1864.35,231.797 1864.92,232.622 1865.49,231.561 1866.05,230.24 1866.62,231.284 1867.19,230.363 1867.76,229.404 1868.33,229.361 1868.9,231.405 1869.46,229.321 1870.03,229.276 1870.6,230.493 1871.17,229.427 1871.74,229.228 1872.31,228.272 1872.87,227.421 1873.44,226.667 1874.01,223.979 1874.58,224.514 1875.15,226.039 1875.72,226.374 1876.28,226.734 1876.85,227.994 1877.42,228.157 1877.99,227.074 1878.56,225.165 1879.13,224.449 1879.69,227.06 1880.26,228.522 1880.83,228.77 1881.4,228.954 1881.97,230.208 1882.54,230.174 1883.1,234.371 1883.67,234.262 1884.24,235.268 1884.81,235.058 1885.38,234.694 1885.95,233.318 1886.51,232.985 1887.08,232.661 1887.65,231.377 1888.22,229.065 1888.79,230.147 1889.36,228.308 1889.92,229.651 1890.49,230.63 1891.06,231.758 1891.63,232.676 1892.2,230.504 1892.77,231.512 1893.33,231.475 1893.9,232.407 1894.47,232.302 1895.04,231.924 1895.61,229.785 1896.18,230.901 1896.74,229.749 1897.31,229.641 1897.88,229.823 1898.45,228.728 1899.02,228.876 1899.59,227.102 1900.16,226.345 1900.72,226.95 1901.29,229.33 1901.86,227.512 1902.43,226.86 1903,227.166 1903.57,226.498 1904.13,226.781 1904.7,227.875 1905.27,229.29 1905.84,231.431 1906.41,234.552 1906.98,233.477 1907.54,235.351 1908.11,234.13 1908.68,233.885 1909.25,235.88 1909.82,235.584 1910.39,236.119 1910.95,234.679 1911.52,237.525 1912.09,237.05 1912.66,235.599 1913.23,235.1 1913.8,235.715 1914.36,234.189 1914.93,230.912 1915.5,230.547 1916.07,229.462 1916.64,231.501 1917.21,232.245 1917.77,233.242 1918.34,233.188 1918.91,232.944 1919.48,232.777 1920.05,229.737 1920.62,229.678 1921.18,227.503 1921.75,226.473 1922.32,229.816 1922.89,229.875 1923.46,229.957 1924.03,227.958 1924.59,228.02 1925.16,227.981 1925.73,230.509 1926.3,231.628 1926.87,232.472 1927.44,233.392 1928,232.962 1928.57,233.723 1929.14,237.318 1929.71,238.917 1930.28,238.165 1930.85,236.551 1931.41,236.977 1931.98,235.251 1932.55,233.649 1933.12,233.176 1933.69,233.121 1934.26,230.687 1934.82,229.767 1935.39,229.633 1935.96,230.476 1936.53,232.544 1937.1,231.255 1937.67,231.049 1938.23,230.601 1938.8,230.589 1939.37,232.598 1939.94,233.299 1940.51,233.01 1941.08,233.824 1941.64,234.294 1942.21,232.836 1942.78,232.615 1943.35,233.279 1943.92,230.66 1944.49,230.242 1945.05,228.885 1945.62,226.786 1946.19,225.791 1946.76,226.019 1947.33,225.337 1947.9,225.476 1948.46,225.631 1949.03,225.953 1949.6,226.159 1950.17,227.52 1950.74,225.806 1951.31,226.923 1951.87,226.1 1952.44,225.299 1953.01,225.435 1953.58,222.472 1954.15,221.968 1954.72,222.417 1955.28,224.771 1955.85,225.115 1956.42,226.318 1956.99,226.411 1957.56,228.703 1958.13,227.833 1958.69,226.65 1959.26,228.958 1959.83,228.874 1960.4,230.086 1960.97,229.122 1961.54,229.34 1962.1,228.408 1962.67,230.562 1963.24,230.72 1963.81,231.86 1964.38,232.812 1964.95,233.704 1965.51,233.447 1966.08,233.035 1966.65,232.903 1967.22,233.775 1967.79,234.459 1968.36,233.089 1968.92,230.642 1969.49,229.559 1970.06,229.495 1970.63,230.554 1971.2,234.518 1971.77,232.154 1972.34,228.702 1972.9,227.818 1973.47,228.153 1974.04,227.149 1974.61,226.136 1975.18,226.202 1975.75,226.374 1976.31,227.653 1976.88,227.581 1977.45,225.487 1978.02,223.8 1978.59,224.365 1979.16,223.739 1979.72,224.369 1980.29,224.893 1980.86,226.391 1981.43,225.743 1982,227.122 1982.57,226.289 1983.13,227.829 1983.7,226.871 1984.27,228.212 1984.84,228.524 1985.41,227.753 1985.98,228.973 1986.54,228.908 1987.11,227.941 1987.68,226.237 1988.25,225.511 1988.82,229.042 1989.39,230.313 1989.95,231.443 1990.52,228.56 1991.09,227.896 1991.66,227.965 1992.23,228.136 1992.8,229.526 1993.36,231.857 1993.93,229.776 1994.5,229.736 1995.07,229.029 1995.64,227.883 1996.21,229.293 1996.77,230.682 1997.34,228.784 1997.91,228.888 1998.48,229.121 1999.05,228.334 1999.62,230.593 2000.18,230.425 2000.75,230.501 2001.32,229.304 2001.89,230.504 2002.46,229.872 2003.03,229.92 2003.59,231.078 2004.16,232.071 2004.73,232.021 2005.3,230.923 2005.87,230.858 2006.44,232.869 2007,232.622 2007.57,231.584 2008.14,231.836 2008.71,230.046 2009.28,231.065 2009.85,231.219 2010.41,230.008 2010.98,227.983 2011.55,228.457 2012.12,229.765 2012.69,228.839 2013.26,229.172 2013.82,229.209 2014.39,229.42 2014.96,229.507 2015.53,230.6 2016.1,230.405 2016.67,230.476 2017.23,232.81 2017.8,233.688 2018.37,233.437 2018.94,234.302 2019.51,235.927 2020.08,235.615 2020.64,234.273 2021.21,233.194 2021.78,233.042 2022.35,231.865 2022.92,231.635 2023.49,230.547 2024.05,230.753 2024.62,229.876 2025.19,229.847 2025.76,228.982 2026.33,230.095 2026.9,231.083 2027.46,231.132 2028.03,231.051 2028.6,233.064 2029.17,232.845 2029.74,229.614 2030.31,230.671 2030.87,230.665 2031.44,230.834 2032.01,231.717 2032.58,230.726 2033.15,231.901 2033.72,232.599 2034.28,233.494 2034.85,232.347 2035.42,233.576 2035.99,232.128 2036.56,232.962 2037.13,232.549 2037.69,229.406 2038.26,228.22 2038.83,227.381 2039.4,228.952 2039.97,227.14 2040.54,226.391 2041.11,227.521 2041.67,228.866 2042.24,230.196 2042.81,231.245 2043.38,232.195 2043.95,233.058 2044.52,234.1 2045.08,233.009 2045.65,233.787 2046.22,234.548 2046.79,236.15 2047.36,235.82 2047.93,238.342 2048.49,236.832 2049.06,237.143 2049.63,236.672 2050.2,235.346 2050.77,234.073 2051.34,236.875 2051.9,235.501 2052.47,236.069 2053.04,236.536 2053.61,234.081 2054.18,235.946 2054.75,234.546 2055.31,233.137 2055.88,233.862 2056.45,233.543 2057.02,230.131 2057.59,230.951 2058.16,230.75 2058.72,228.616 2059.29,229.812 2059.86,228.874 2060.43,227.751 2061,226.88 2061.57,226.999 2062.13,227.223 2062.7,228.34 2063.27,228.394 2063.84,228.74 2064.41,228.86 2064.98,229.972 2065.54,228.755 2066.11,228.903 2066.68,229.886 2067.25,229.82 2067.82,229.853 2068.39,228.696 2068.95,226.677 2069.52,225.722 2070.09,224.766 2070.66,226.007 2071.23,223.251 2071.8,222.785 2072.36,224.202 2072.93,224.4 2073.5,225.607 2074.07,224.91 2074.64,226.345 2075.21,225.384 2075.77,223.639 2076.34,221.999 2076.91,222.452 2077.48,222.181 2078.05,224.885 2078.62,226.713 2079.18,227.882 2079.75,228.138 2080.32,228.282 2080.89,226.66 2081.46,229.098 2082.03,229.168 2082.59,227.139 2083.16,228.409 2083.73,228.506 2084.3,227.72 2084.87,227.793 2085.44,227.903 2086,228.164 2086.57,228.486 2087.14,227.548 2087.71,227.849 2088.28,227.285 2088.85,227.601 2089.41,228.032 2089.98,229.248 2090.55,229.256 2091.12,231.583 2091.69,230.487 2092.26,231.445 2092.82,235.646 2093.39,236.301 2093.96,237.019 2094.53,237.509 2095.1,238.264 2095.67,235.736 2096.23,235.281 2096.8,236.037 2097.37,235.719 2097.94,235.375 2098.51,234.047 2099.08,234.644 2099.64,234.171 2100.21,236.903 2100.78,238.424 2101.35,237.752 2101.92,237.159 2102.49,237.64 2103.05,237.905 2103.62,236.358 2104.19,234.787 2104.76,232.48 2105.33,233.278 2105.9,233.165 2106.46,234.031 2107.03,233.635 2107.6,233.22 2108.17,233.936 2108.74,232.408 2109.31,232.241 2109.87,230.002 2110.44,229.081 2111.01,228.975 2111.58,225.683 2112.15,224.999 2112.72,227.354 2113.29,225.316 2113.85,225.546 2114.42,225.895 2114.99,227.174 2115.56,227.342 2116.13,227.555 2116.7,228.714 2117.26,228.569 2117.83,229.801 2118.4,231.701 2118.97,232.583 2119.54,232.318 2120.11,231.996 2120.67,232.627 2121.24,235.524 2121.81,235.049 2122.38,235.025 2122.95,232.523 2123.52,232.587 2124.08,233.321 2124.65,233.106 2125.22,233.936 2125.79,234.668 2126.36,235.137 2126.93,233.757 2127.49,235.441 2128.06,234.975 2128.63,234.798 2129.2,234.225 2129.77,233.69 2130.34,232.328 2130.9,232.176 2131.47,230.786 2132.04,230.862 2132.61,229.789 2133.18,229.623 2133.75,231.399 2134.31,230.241 2134.88,229.135 2135.45,230.095 2136.02,230.124 2136.59,229.905 2137.16,229.78 2137.72,231.003 2138.29,231.983 2138.86,231.593 2139.43,231.241 2140,232.185 2140.57,231.056 2141.13,231.988 2141.7,231.733 2142.27,231.484 2142.84,231.132 2143.41,230.85 2143.98,228.841 2144.54,229.968 2145.11,228.968 2145.68,229.103 2146.25,227.912 2146.82,226.909 2147.39,228.148 2147.95,229.213 2148.52,228.272 2149.09,229.273 2149.66,227.175 2150.23,228.124 2150.8,229.114 2151.36,230.158 2151.93,229.118 2152.5,229.27 2153.07,229.343 2153.64,228.647 2154.21,230.047 2154.77,229.91 2155.34,229.867 2155.91,228.752 2156.48,228.716 2157.05,226.515 2157.62,222.478 2158.18,224.983 2158.75,227.462 2159.32,229.441 2159.89,230.301 \"/>\n<path clip-path=\"url(#clip730)\" d=\"M1625.75 1245.03 L2150.8 1245.03 L2150.8 1089.51 L1625.75 1089.51  Z\" fill=\"#ffffff\" fill-rule=\"evenodd\" fill-opacity=\"1\"/>\n<polyline clip-path=\"url(#clip730)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"1625.75,1245.03 2150.8,1245.03 2150.8,1089.51 1625.75,1089.51 1625.75,1245.03 \"/>\n<polyline clip-path=\"url(#clip730)\" style=\"stroke:#e26f46; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" stroke-dasharray=\"16, 10\" points=\"1645.83,1141.35 1766.28,1141.35 \"/>\n<path clip-path=\"url(#clip730)\" d=\"M1793.76 1125.34 L1793.76 1132.71 L1802.53 1132.71 L1802.53 1136.02 L1793.76 1136.02 L1793.76 1150.09 Q1793.76 1153.26 1794.61 1154.16 Q1795.49 1155.07 1798.16 1155.07 L1802.53 1155.07 L1802.53 1158.63 L1798.16 1158.63 Q1793.23 1158.63 1791.35 1156.8 Q1789.48 1154.95 1789.48 1150.09 L1789.48 1136.02 L1786.35 1136.02 L1786.35 1132.71 L1789.48 1132.71 L1789.48 1125.34 L1793.76 1125.34 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip730)\" d=\"M1819.92 1145.6 Q1814.75 1145.6 1812.76 1146.78 Q1810.77 1147.96 1810.77 1150.81 Q1810.77 1153.08 1812.25 1154.42 Q1813.76 1155.74 1816.33 1155.74 Q1819.87 1155.74 1822 1153.24 Q1824.15 1150.72 1824.15 1146.55 L1824.15 1145.6 L1819.92 1145.6 M1828.41 1143.84 L1828.41 1158.63 L1824.15 1158.63 L1824.15 1154.7 Q1822.69 1157.06 1820.52 1158.19 Q1818.34 1159.3 1815.19 1159.3 Q1811.21 1159.3 1808.85 1157.08 Q1806.51 1154.84 1806.51 1151.09 Q1806.51 1146.71 1809.43 1144.49 Q1812.37 1142.27 1818.18 1142.27 L1824.15 1142.27 L1824.15 1141.85 Q1824.15 1138.91 1822.21 1137.31 Q1820.29 1135.69 1816.79 1135.69 Q1814.57 1135.69 1812.46 1136.22 Q1810.36 1136.76 1808.41 1137.82 L1808.41 1133.89 Q1810.75 1132.98 1812.95 1132.54 Q1815.15 1132.08 1817.23 1132.08 Q1822.86 1132.08 1825.63 1135 Q1828.41 1137.91 1828.41 1143.84 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip730)\" d=\"M1852.21 1136.69 Q1851.49 1136.27 1850.63 1136.09 Q1849.8 1135.88 1848.78 1135.88 Q1845.17 1135.88 1843.23 1138.24 Q1841.3 1140.58 1841.3 1144.97 L1841.3 1158.63 L1837.02 1158.63 L1837.02 1132.71 L1841.3 1132.71 L1841.3 1136.73 Q1842.65 1134.37 1844.8 1133.24 Q1846.95 1132.08 1850.03 1132.08 Q1850.47 1132.08 1851 1132.15 Q1851.54 1132.2 1852.18 1132.31 L1852.21 1136.69 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip730)\" d=\"M1872.9 1145.37 Q1872.9 1140.74 1870.98 1138.19 Q1869.08 1135.65 1865.63 1135.65 Q1862.21 1135.65 1860.29 1138.19 Q1858.39 1140.74 1858.39 1145.37 Q1858.39 1149.97 1860.29 1152.52 Q1862.21 1155.07 1865.63 1155.07 Q1869.08 1155.07 1870.98 1152.52 Q1872.9 1149.97 1872.9 1145.37 M1877.16 1155.41 Q1877.16 1162.03 1874.22 1165.25 Q1871.28 1168.49 1865.22 1168.49 Q1862.97 1168.49 1860.98 1168.15 Q1858.99 1167.82 1857.11 1167.13 L1857.11 1162.98 Q1858.99 1164 1860.82 1164.49 Q1862.65 1164.97 1864.54 1164.97 Q1868.73 1164.97 1870.82 1162.78 Q1872.9 1160.6 1872.9 1156.18 L1872.9 1154.07 Q1871.58 1156.36 1869.52 1157.5 Q1867.46 1158.63 1864.59 1158.63 Q1859.82 1158.63 1856.91 1155 Q1853.99 1151.36 1853.99 1145.37 Q1853.99 1139.35 1856.91 1135.72 Q1859.82 1132.08 1864.59 1132.08 Q1867.46 1132.08 1869.52 1133.22 Q1871.58 1134.35 1872.9 1136.64 L1872.9 1132.71 L1877.16 1132.71 L1877.16 1155.41 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip730)\" d=\"M1908.11 1144.6 L1908.11 1146.69 L1888.53 1146.69 Q1888.8 1151.09 1891.17 1153.4 Q1893.55 1155.69 1897.79 1155.69 Q1900.24 1155.69 1902.53 1155.09 Q1904.85 1154.49 1907.11 1153.28 L1907.11 1157.31 Q1904.82 1158.28 1902.42 1158.79 Q1900.01 1159.3 1897.53 1159.3 Q1891.33 1159.3 1887.69 1155.69 Q1884.08 1152.08 1884.08 1145.92 Q1884.08 1139.56 1887.51 1135.83 Q1890.96 1132.08 1896.79 1132.08 Q1902.02 1132.08 1905.05 1135.46 Q1908.11 1138.82 1908.11 1144.6 M1903.85 1143.35 Q1903.8 1139.86 1901.88 1137.78 Q1899.98 1135.69 1896.84 1135.69 Q1893.27 1135.69 1891.12 1137.71 Q1888.99 1139.72 1888.67 1143.38 L1903.85 1143.35 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip730)\" d=\"M1919.31 1125.34 L1919.31 1132.71 L1928.09 1132.71 L1928.09 1136.02 L1919.31 1136.02 L1919.31 1150.09 Q1919.31 1153.26 1920.17 1154.16 Q1921.05 1155.07 1923.71 1155.07 L1928.09 1155.07 L1928.09 1158.63 L1923.71 1158.63 Q1918.78 1158.63 1916.91 1156.8 Q1915.03 1154.95 1915.03 1150.09 L1915.03 1136.02 L1911.91 1136.02 L1911.91 1132.71 L1915.03 1132.71 L1915.03 1125.34 L1919.31 1125.34 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip730)\" d=\"M1953.39 1166.5 L1953.39 1169.81 L1928.76 1169.81 L1928.76 1166.5 L1953.39 1166.5 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip730)\" d=\"M1954.91 1132.71 L1959.17 1132.71 L1964.5 1152.94 L1969.8 1132.71 L1974.82 1132.71 L1980.15 1152.94 L1985.45 1132.71 L1989.71 1132.71 L1982.92 1158.63 L1977.9 1158.63 L1972.32 1137.38 L1966.72 1158.63 L1961.7 1158.63 L1954.91 1132.71 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip730)\" d=\"M2007.95 1145.6 Q2002.78 1145.6 2000.79 1146.78 Q1998.8 1147.96 1998.8 1150.81 Q1998.8 1153.08 2000.28 1154.42 Q2001.79 1155.74 2004.36 1155.74 Q2007.9 1155.74 2010.03 1153.24 Q2012.18 1150.72 2012.18 1146.55 L2012.18 1145.6 L2007.95 1145.6 M2016.44 1143.84 L2016.44 1158.63 L2012.18 1158.63 L2012.18 1154.7 Q2010.72 1157.06 2008.55 1158.19 Q2006.37 1159.3 2003.22 1159.3 Q1999.24 1159.3 1996.88 1157.08 Q1994.54 1154.84 1994.54 1151.09 Q1994.54 1146.71 1997.46 1144.49 Q2000.4 1142.27 2006.21 1142.27 L2012.18 1142.27 L2012.18 1141.85 Q2012.18 1138.91 2010.24 1137.31 Q2008.32 1135.69 2004.82 1135.69 Q2002.6 1135.69 2000.49 1136.22 Q1998.39 1136.76 1996.44 1137.82 L1996.44 1133.89 Q1998.78 1132.98 2000.98 1132.54 Q2003.18 1132.08 2005.26 1132.08 Q2010.89 1132.08 2013.66 1135 Q2016.44 1137.91 2016.44 1143.84 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip730)\" d=\"M2025.22 1122.61 L2029.47 1122.61 L2029.47 1158.63 L2025.22 1158.63 L2025.22 1122.61 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip730)\" d=\"M2038.22 1122.61 L2042.51 1122.61 L2042.51 1143.89 L2055.22 1132.71 L2060.65 1132.71 L2046.91 1144.84 L2061.23 1158.63 L2055.68 1158.63 L2042.51 1145.97 L2042.51 1158.63 L2038.22 1158.63 L2038.22 1122.61 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip730)\" d=\"M2086.33 1144.6 L2086.33 1146.69 L2066.74 1146.69 Q2067.02 1151.09 2069.38 1153.4 Q2071.77 1155.69 2076 1155.69 Q2078.46 1155.69 2080.75 1155.09 Q2083.06 1154.49 2085.33 1153.28 L2085.33 1157.31 Q2083.04 1158.28 2080.63 1158.79 Q2078.22 1159.3 2075.75 1159.3 Q2069.54 1159.3 2065.91 1155.69 Q2062.3 1152.08 2062.3 1145.92 Q2062.3 1139.56 2065.72 1135.83 Q2069.17 1132.08 2075.01 1132.08 Q2080.24 1132.08 2083.27 1135.46 Q2086.33 1138.82 2086.33 1144.6 M2082.07 1143.35 Q2082.02 1139.86 2080.1 1137.78 Q2078.2 1135.69 2075.05 1135.69 Q2071.49 1135.69 2069.34 1137.71 Q2067.21 1139.72 2066.88 1143.38 L2082.07 1143.35 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip730)\" d=\"M2108.34 1136.69 Q2107.62 1136.27 2106.77 1136.09 Q2105.93 1135.88 2104.91 1135.88 Q2101.3 1135.88 2099.36 1138.24 Q2097.44 1140.58 2097.44 1144.97 L2097.44 1158.63 L2093.15 1158.63 L2093.15 1132.71 L2097.44 1132.71 L2097.44 1136.73 Q2098.78 1134.37 2100.93 1133.24 Q2103.09 1132.08 2106.16 1132.08 Q2106.6 1132.08 2107.14 1132.15 Q2107.67 1132.2 2108.32 1132.31 L2108.34 1136.69 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip730)\" d=\"M2129.34 1133.47 L2129.34 1137.5 Q2127.53 1136.57 2125.59 1136.11 Q2123.64 1135.65 2121.56 1135.65 Q2118.39 1135.65 2116.79 1136.62 Q2115.21 1137.59 2115.21 1139.53 Q2115.21 1141.02 2116.35 1141.87 Q2117.48 1142.71 2120.91 1143.47 L2122.37 1143.79 Q2126.9 1144.77 2128.8 1146.55 Q2130.72 1148.31 2130.72 1151.48 Q2130.72 1155.09 2127.85 1157.2 Q2125.01 1159.3 2120.01 1159.3 Q2117.92 1159.3 2115.65 1158.89 Q2113.41 1158.49 2110.91 1157.68 L2110.91 1153.28 Q2113.27 1154.51 2115.56 1155.14 Q2117.85 1155.74 2120.1 1155.74 Q2123.11 1155.74 2124.73 1154.72 Q2126.35 1153.68 2126.35 1151.8 Q2126.35 1150.07 2125.17 1149.14 Q2124.01 1148.22 2120.05 1147.36 L2118.57 1147.01 Q2114.61 1146.18 2112.85 1144.47 Q2111.09 1142.73 2111.09 1139.72 Q2111.09 1136.06 2113.69 1134.07 Q2116.28 1132.08 2121.05 1132.08 Q2123.41 1132.08 2125.49 1132.43 Q2127.58 1132.78 2129.34 1133.47 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><polyline clip-path=\"url(#clip730)\" style=\"stroke:#009af9; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"1645.83,1193.19 1766.28,1193.19 \"/>\n<path clip-path=\"url(#clip730)\" d=\"M1808.06 1194.82 L1808.06 1210.47 L1803.8 1210.47 L1803.8 1194.96 Q1803.8 1191.28 1802.37 1189.45 Q1800.93 1187.62 1798.06 1187.62 Q1794.61 1187.62 1792.62 1189.82 Q1790.63 1192.02 1790.63 1195.82 L1790.63 1210.47 L1786.35 1210.47 L1786.35 1184.55 L1790.63 1184.55 L1790.63 1188.57 Q1792.16 1186.24 1794.22 1185.08 Q1796.3 1183.92 1799.01 1183.92 Q1803.48 1183.92 1805.77 1186.7 Q1808.06 1189.45 1808.06 1194.82 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip730)\" d=\"M1826.61 1187.53 Q1823.18 1187.53 1821.19 1190.22 Q1819.2 1192.88 1819.2 1197.53 Q1819.2 1202.18 1821.17 1204.87 Q1823.16 1207.53 1826.61 1207.53 Q1830.01 1207.53 1832 1204.85 Q1833.99 1202.16 1833.99 1197.53 Q1833.99 1192.93 1832 1190.24 Q1830.01 1187.53 1826.61 1187.53 M1826.61 1183.92 Q1832.16 1183.92 1835.33 1187.53 Q1838.5 1191.14 1838.5 1197.53 Q1838.5 1203.9 1835.33 1207.53 Q1832.16 1211.14 1826.61 1211.14 Q1821.03 1211.14 1817.86 1207.53 Q1814.71 1203.9 1814.71 1197.53 Q1814.71 1191.14 1817.86 1187.53 Q1821.03 1183.92 1826.61 1183.92 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip730)\" d=\"M1860.59 1188.53 Q1859.87 1188.11 1859.01 1187.93 Q1858.18 1187.72 1857.16 1187.72 Q1853.55 1187.72 1851.61 1190.08 Q1849.68 1192.42 1849.68 1196.81 L1849.68 1210.47 L1845.4 1210.47 L1845.4 1184.55 L1849.68 1184.55 L1849.68 1188.57 Q1851.03 1186.21 1853.18 1185.08 Q1855.33 1183.92 1858.41 1183.92 Q1858.85 1183.92 1859.38 1183.99 Q1859.92 1184.04 1860.56 1184.15 L1860.59 1188.53 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip730)\" d=\"M1884.41 1189.52 Q1886 1186.65 1888.23 1185.29 Q1890.45 1183.92 1893.46 1183.92 Q1897.51 1183.92 1899.71 1186.77 Q1901.91 1189.59 1901.91 1194.82 L1901.91 1210.47 L1897.62 1210.47 L1897.62 1194.96 Q1897.62 1191.24 1896.3 1189.43 Q1894.98 1187.62 1892.28 1187.62 Q1888.97 1187.62 1887.04 1189.82 Q1885.12 1192.02 1885.12 1195.82 L1885.12 1210.47 L1880.84 1210.47 L1880.84 1194.96 Q1880.84 1191.21 1879.52 1189.43 Q1878.2 1187.62 1875.45 1187.62 Q1872.18 1187.62 1870.26 1189.85 Q1868.34 1192.05 1868.34 1195.82 L1868.34 1210.47 L1864.06 1210.47 L1864.06 1184.55 L1868.34 1184.55 L1868.34 1188.57 Q1869.8 1186.19 1871.84 1185.06 Q1873.87 1183.92 1876.67 1183.92 Q1879.5 1183.92 1881.47 1185.36 Q1883.46 1186.79 1884.41 1189.52 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /></svg>\n","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"After an initial equilibriation period, the norm fluctuates around the target number of walkers.","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"Now, let's look at using the shift to estimate the ground state energy of H. The mean of the shift is a useful estimator of the energy. Calculating the error bars is a bit more involved as autocorrelations have to be removed from the time series. This can be done with the function shift_estimator, which performs a blocking analysis on the shift column of the dataframe.","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"se = shift_estimator(df; skip=steps_equilibrate)","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"BlockingResult{Float64}\n  mean = -4.024 ± 0.025\n  with uncertainty of ± 0.0022271690538727524\n  from 62 blocks after 5 transformations (k = 6).\n","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"Here, se contains the calculated mean and standard errors of the shift, as well as some additional information related to the blocking analysis.","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"Computing the error of the projected energy is a bit more complicated, as it's a ratio of fluctuating variables contained in the hproj and vproj columns in the dataframe. Thankfully, the complications are handled by the function projected_energy.","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"pe = projected_energy(df; skip=steps_equilibrate)","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"RatioBlockingResult{Float64,MonteCarloMeasurements.Particles{Float64, 2000}}\n  ratio = -4.01443 ± (0.00171909, 0.00188769) (MC)\n  95% confidence interval: [-4.01808, -4.01092]) (MC)\n  linear error propagation: -4.01452 ± 0.00184421\n  |δ_y| = |0.00163934| (≤ 0.1 for normal approx)\n  Blocking successful with 31 blocks after 6 transformations (k = 7).\n","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"The result is a ratio distribution. We extract its median and the edges of the 95% confidence interval.","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"v = val_and_errs(pe; p=0.95)","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"(val = -4.014431858929614, val_l = 0.003648257206082306, val_u = 0.0035083751152624743)","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"Let's visualise these estimators together with the time series of the shift.","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"plot(df.step, df.shift, ylabel=\"energy\", xlabel=\"step\", label=\"shift\", margin = 1Plots.cm)\n\nplot!(x->se.mean, df.step[steps_equilibrate+1:end], ribbon=se.err, label=\"shift mean\")\nplot!(\n    x -> v.val, df.step[steps_equilibrate+1:end], ribbon=(v.val_l,v.val_u),\n    label=\"projected energy\",\n)\nlens!([steps_equilibrate, last_step], [-5.1, -2.9]; inset=(1, bbox(0.2, 0.25, 0.6, 0.4)))","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"<?xml version=\"1.0\" encoding=\"utf-8\"?>\n<svg xmlns=\"http://www.w3.org/2000/svg\" xmlns:xlink=\"http://www.w3.org/1999/xlink\" width=\"600\" height=\"400\" viewBox=\"0 0 2400 1600\">\n<defs>\n  <clipPath id=\"clip760\">\n    <rect x=\"0\" y=\"0\" width=\"2400\" height=\"1600\"/>\n  </clipPath>\n</defs>\n<path clip-path=\"url(#clip760)\" d=\"M0 1600 L2400 1600 L2400 0 L0 0  Z\" fill=\"#ffffff\" fill-rule=\"evenodd\" fill-opacity=\"1\"/>\n<defs>\n  <clipPath id=\"clip761\">\n    <rect x=\"480\" y=\"0\" width=\"1681\" height=\"1600\"/>\n  </clipPath>\n</defs>\n<path clip-path=\"url(#clip760)\" d=\"M346.853 1281.45 L2211.02 1281.45 L2211.02 188.976 L346.853 188.976  Z\" fill=\"#ffffff\" fill-rule=\"evenodd\" fill-opacity=\"1\"/>\n<defs>\n  <clipPath id=\"clip762\">\n    <rect x=\"346\" y=\"188\" width=\"1865\" height=\"1093\"/>\n  </clipPath>\n</defs>\n<polyline clip-path=\"url(#clip762)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:2; stroke-opacity:0.1; fill:none\" points=\"399.026,1281.45 399.026,188.976 \"/>\n<polyline clip-path=\"url(#clip762)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:2; stroke-opacity:0.1; fill:none\" points=\"985.439,1281.45 985.439,188.976 \"/>\n<polyline clip-path=\"url(#clip762)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:2; stroke-opacity:0.1; fill:none\" points=\"1571.85,1281.45 1571.85,188.976 \"/>\n<polyline clip-path=\"url(#clip762)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:2; stroke-opacity:0.1; fill:none\" points=\"2158.26,1281.45 2158.26,188.976 \"/>\n<polyline clip-path=\"url(#clip762)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:2; stroke-opacity:0.1; fill:none\" points=\"346.853,1157.26 2211.02,1157.26 \"/>\n<polyline clip-path=\"url(#clip762)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:2; stroke-opacity:0.1; fill:none\" points=\"346.853,1009.57 2211.02,1009.57 \"/>\n<polyline clip-path=\"url(#clip762)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:2; stroke-opacity:0.1; fill:none\" points=\"346.853,861.889 2211.02,861.889 \"/>\n<polyline clip-path=\"url(#clip762)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:2; stroke-opacity:0.1; fill:none\" points=\"346.853,714.204 2211.02,714.204 \"/>\n<polyline clip-path=\"url(#clip762)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:2; stroke-opacity:0.1; fill:none\" points=\"346.853,566.519 2211.02,566.519 \"/>\n<polyline clip-path=\"url(#clip762)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:2; stroke-opacity:0.1; fill:none\" points=\"346.853,418.833 2211.02,418.833 \"/>\n<polyline clip-path=\"url(#clip762)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:2; stroke-opacity:0.1; fill:none\" points=\"346.853,271.148 2211.02,271.148 \"/>\n<polyline clip-path=\"url(#clip760)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"346.853,1281.45 2211.02,1281.45 \"/>\n<polyline clip-path=\"url(#clip760)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"399.026,1281.45 399.026,1262.55 \"/>\n<polyline clip-path=\"url(#clip760)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"985.439,1281.45 985.439,1262.55 \"/>\n<polyline clip-path=\"url(#clip760)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"1571.85,1281.45 1571.85,1262.55 \"/>\n<polyline clip-path=\"url(#clip760)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"2158.26,1281.45 2158.26,1262.55 \"/>\n<path clip-path=\"url(#clip760)\" d=\"M399.026 1312.37 Q395.415 1312.37 393.587 1315.93 Q391.781 1319.47 391.781 1326.6 Q391.781 1333.71 393.587 1337.27 Q395.415 1340.82 399.026 1340.82 Q402.661 1340.82 404.466 1337.27 Q406.295 1333.71 406.295 1326.6 Q406.295 1319.47 404.466 1315.93 Q402.661 1312.37 399.026 1312.37 M399.026 1308.66 Q404.837 1308.66 407.892 1313.27 Q410.971 1317.85 410.971 1326.6 Q410.971 1335.33 407.892 1339.94 Q404.837 1344.52 399.026 1344.52 Q393.216 1344.52 390.138 1339.94 Q387.082 1335.33 387.082 1326.6 Q387.082 1317.85 390.138 1313.27 Q393.216 1308.66 399.026 1308.66 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip760)\" d=\"M929.965 1339.91 L937.604 1339.91 L937.604 1313.55 L929.293 1315.21 L929.293 1310.95 L937.557 1309.29 L942.233 1309.29 L942.233 1339.91 L949.872 1339.91 L949.872 1343.85 L929.965 1343.85 L929.965 1339.91 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip760)\" d=\"M969.316 1312.37 Q965.705 1312.37 963.877 1315.93 Q962.071 1319.47 962.071 1326.6 Q962.071 1333.71 963.877 1337.27 Q965.705 1340.82 969.316 1340.82 Q972.951 1340.82 974.756 1337.27 Q976.585 1333.71 976.585 1326.6 Q976.585 1319.47 974.756 1315.93 Q972.951 1312.37 969.316 1312.37 M969.316 1308.66 Q975.127 1308.66 978.182 1313.27 Q981.261 1317.85 981.261 1326.6 Q981.261 1335.33 978.182 1339.94 Q975.127 1344.52 969.316 1344.52 Q963.506 1344.52 960.428 1339.94 Q957.372 1335.33 957.372 1326.6 Q957.372 1317.85 960.428 1313.27 Q963.506 1308.66 969.316 1308.66 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip760)\" d=\"M999.478 1312.37 Q995.867 1312.37 994.038 1315.93 Q992.233 1319.47 992.233 1326.6 Q992.233 1333.71 994.038 1337.27 Q995.867 1340.82 999.478 1340.82 Q1003.11 1340.82 1004.92 1337.27 Q1006.75 1333.71 1006.75 1326.6 Q1006.75 1319.47 1004.92 1315.93 Q1003.11 1312.37 999.478 1312.37 M999.478 1308.66 Q1005.29 1308.66 1008.34 1313.27 Q1011.42 1317.85 1011.42 1326.6 Q1011.42 1335.33 1008.34 1339.94 Q1005.29 1344.52 999.478 1344.52 Q993.668 1344.52 990.589 1339.94 Q987.534 1335.33 987.534 1326.6 Q987.534 1317.85 990.589 1313.27 Q993.668 1308.66 999.478 1308.66 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip760)\" d=\"M1029.64 1312.37 Q1026.03 1312.37 1024.2 1315.93 Q1022.39 1319.47 1022.39 1326.6 Q1022.39 1333.71 1024.2 1337.27 Q1026.03 1340.82 1029.64 1340.82 Q1033.27 1340.82 1035.08 1337.27 Q1036.91 1333.71 1036.91 1326.6 Q1036.91 1319.47 1035.08 1315.93 Q1033.27 1312.37 1029.64 1312.37 M1029.64 1308.66 Q1035.45 1308.66 1038.51 1313.27 Q1041.58 1317.85 1041.58 1326.6 Q1041.58 1335.33 1038.51 1339.94 Q1035.45 1344.52 1029.64 1344.52 Q1023.83 1344.52 1020.75 1339.94 Q1017.7 1335.33 1017.7 1326.6 Q1017.7 1317.85 1020.75 1313.27 Q1023.83 1308.66 1029.64 1308.66 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip760)\" d=\"M1520.46 1339.91 L1536.78 1339.91 L1536.78 1343.85 L1514.84 1343.85 L1514.84 1339.91 Q1517.5 1337.16 1522.08 1332.53 Q1526.69 1327.88 1527.87 1326.53 Q1530.12 1324.01 1531 1322.27 Q1531.9 1320.51 1531.9 1318.82 Q1531.9 1316.07 1529.95 1314.33 Q1528.03 1312.6 1524.93 1312.6 Q1522.73 1312.6 1520.28 1313.36 Q1517.85 1314.13 1515.07 1315.68 L1515.07 1310.95 Q1517.89 1309.82 1520.35 1309.24 Q1522.8 1308.66 1524.84 1308.66 Q1530.21 1308.66 1533.4 1311.35 Q1536.6 1314.03 1536.6 1318.52 Q1536.6 1320.65 1535.79 1322.57 Q1535 1324.47 1532.89 1327.07 Q1532.31 1327.74 1529.21 1330.95 Q1526.11 1334.15 1520.46 1339.91 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip760)\" d=\"M1556.6 1312.37 Q1552.99 1312.37 1551.16 1315.93 Q1549.35 1319.47 1549.35 1326.6 Q1549.35 1333.71 1551.16 1337.27 Q1552.99 1340.82 1556.6 1340.82 Q1560.23 1340.82 1562.04 1337.27 Q1563.87 1333.71 1563.87 1326.6 Q1563.87 1319.47 1562.04 1315.93 Q1560.23 1312.37 1556.6 1312.37 M1556.6 1308.66 Q1562.41 1308.66 1565.46 1313.27 Q1568.54 1317.85 1568.54 1326.6 Q1568.54 1335.33 1565.46 1339.94 Q1562.41 1344.52 1556.6 1344.52 Q1550.79 1344.52 1547.71 1339.94 Q1544.65 1335.33 1544.65 1326.6 Q1544.65 1317.85 1547.71 1313.27 Q1550.79 1308.66 1556.6 1308.66 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip760)\" d=\"M1586.76 1312.37 Q1583.15 1312.37 1581.32 1315.93 Q1579.51 1319.47 1579.51 1326.6 Q1579.51 1333.71 1581.32 1337.27 Q1583.15 1340.82 1586.76 1340.82 Q1590.39 1340.82 1592.2 1337.27 Q1594.03 1333.71 1594.03 1326.6 Q1594.03 1319.47 1592.2 1315.93 Q1590.39 1312.37 1586.76 1312.37 M1586.76 1308.66 Q1592.57 1308.66 1595.62 1313.27 Q1598.7 1317.85 1598.7 1326.6 Q1598.7 1335.33 1595.62 1339.94 Q1592.57 1344.52 1586.76 1344.52 Q1580.95 1344.52 1577.87 1339.94 Q1574.81 1335.33 1574.81 1326.6 Q1574.81 1317.85 1577.87 1313.27 Q1580.95 1308.66 1586.76 1308.66 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip760)\" d=\"M1616.92 1312.37 Q1613.31 1312.37 1611.48 1315.93 Q1609.68 1319.47 1609.68 1326.6 Q1609.68 1333.71 1611.48 1337.27 Q1613.31 1340.82 1616.92 1340.82 Q1620.55 1340.82 1622.36 1337.27 Q1624.19 1333.71 1624.19 1326.6 Q1624.19 1319.47 1622.36 1315.93 Q1620.55 1312.37 1616.92 1312.37 M1616.92 1308.66 Q1622.73 1308.66 1625.79 1313.27 Q1628.87 1317.85 1628.87 1326.6 Q1628.87 1335.33 1625.79 1339.94 Q1622.73 1344.52 1616.92 1344.52 Q1611.11 1344.52 1608.03 1339.94 Q1604.98 1335.33 1604.98 1326.6 Q1604.98 1317.85 1608.03 1313.27 Q1611.11 1308.66 1616.92 1308.66 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip760)\" d=\"M2116.94 1325.21 Q2120.3 1325.93 2122.18 1328.2 Q2124.07 1330.47 2124.07 1333.8 Q2124.07 1338.92 2120.56 1341.72 Q2117.04 1344.52 2110.56 1344.52 Q2108.38 1344.52 2106.07 1344.08 Q2103.77 1343.66 2101.32 1342.81 L2101.32 1338.29 Q2103.26 1339.43 2105.58 1340 Q2107.89 1340.58 2110.42 1340.58 Q2114.82 1340.58 2117.11 1338.85 Q2119.42 1337.11 2119.42 1333.8 Q2119.42 1330.75 2117.27 1329.03 Q2115.14 1327.3 2111.32 1327.3 L2107.29 1327.3 L2107.29 1323.45 L2111.51 1323.45 Q2114.95 1323.45 2116.78 1322.09 Q2118.61 1320.7 2118.61 1318.11 Q2118.61 1315.44 2116.71 1314.03 Q2114.84 1312.6 2111.32 1312.6 Q2109.4 1312.6 2107.2 1313.01 Q2105 1313.43 2102.36 1314.31 L2102.36 1310.14 Q2105.02 1309.4 2107.34 1309.03 Q2109.68 1308.66 2111.74 1308.66 Q2117.06 1308.66 2120.16 1311.09 Q2123.26 1313.5 2123.26 1317.62 Q2123.26 1320.49 2121.62 1322.48 Q2119.98 1324.45 2116.94 1325.21 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip760)\" d=\"M2142.94 1312.37 Q2139.33 1312.37 2137.5 1315.93 Q2135.69 1319.47 2135.69 1326.6 Q2135.69 1333.71 2137.5 1337.27 Q2139.33 1340.82 2142.94 1340.82 Q2146.57 1340.82 2148.38 1337.27 Q2150.21 1333.71 2150.21 1326.6 Q2150.21 1319.47 2148.38 1315.93 Q2146.57 1312.37 2142.94 1312.37 M2142.94 1308.66 Q2148.75 1308.66 2151.81 1313.27 Q2154.88 1317.85 2154.88 1326.6 Q2154.88 1335.33 2151.81 1339.94 Q2148.75 1344.52 2142.94 1344.52 Q2137.13 1344.52 2134.05 1339.94 Q2131 1335.33 2131 1326.6 Q2131 1317.85 2134.05 1313.27 Q2137.13 1308.66 2142.94 1308.66 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip760)\" d=\"M2173.1 1312.37 Q2169.49 1312.37 2167.66 1315.93 Q2165.86 1319.47 2165.86 1326.6 Q2165.86 1333.71 2167.66 1337.27 Q2169.49 1340.82 2173.1 1340.82 Q2176.74 1340.82 2178.54 1337.27 Q2180.37 1333.71 2180.37 1326.6 Q2180.37 1319.47 2178.54 1315.93 Q2176.74 1312.37 2173.1 1312.37 M2173.1 1308.66 Q2178.91 1308.66 2181.97 1313.27 Q2185.05 1317.85 2185.05 1326.6 Q2185.05 1335.33 2181.97 1339.94 Q2178.91 1344.52 2173.1 1344.52 Q2167.29 1344.52 2164.21 1339.94 Q2161.16 1335.33 2161.16 1326.6 Q2161.16 1317.85 2164.21 1313.27 Q2167.29 1308.66 2173.1 1308.66 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip760)\" d=\"M2203.26 1312.37 Q2199.65 1312.37 2197.82 1315.93 Q2196.02 1319.47 2196.02 1326.6 Q2196.02 1333.71 2197.82 1337.27 Q2199.65 1340.82 2203.26 1340.82 Q2206.9 1340.82 2208.7 1337.27 Q2210.53 1333.71 2210.53 1326.6 Q2210.53 1319.47 2208.7 1315.93 Q2206.9 1312.37 2203.26 1312.37 M2203.26 1308.66 Q2209.07 1308.66 2212.13 1313.27 Q2215.21 1317.85 2215.21 1326.6 Q2215.21 1335.33 2212.13 1339.94 Q2209.07 1344.52 2203.26 1344.52 Q2197.45 1344.52 2194.38 1339.94 Q2191.32 1335.33 2191.32 1326.6 Q2191.32 1317.85 2194.38 1313.27 Q2197.45 1308.66 2203.26 1308.66 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip760)\" d=\"M1237.32 1391.71 L1237.32 1397.25 Q1234.84 1395.98 1232.17 1395.34 Q1229.49 1394.71 1226.63 1394.71 Q1222.27 1394.71 1220.07 1396.04 Q1217.91 1397.38 1217.91 1400.05 Q1217.91 1402.09 1219.47 1403.27 Q1221.03 1404.41 1225.74 1405.46 L1227.74 1405.91 Q1233.98 1407.25 1236.59 1409.7 Q1239.23 1412.12 1239.23 1416.48 Q1239.23 1421.44 1235.29 1424.34 Q1231.37 1427.23 1224.5 1427.23 Q1221.63 1427.23 1218.51 1426.66 Q1215.42 1426.12 1211.99 1425.01 L1211.99 1418.96 Q1215.23 1420.65 1218.38 1421.51 Q1221.54 1422.33 1224.62 1422.33 Q1228.76 1422.33 1230.99 1420.93 Q1233.22 1419.5 1233.22 1416.92 Q1233.22 1414.54 1231.59 1413.26 Q1230 1411.99 1224.56 1410.81 L1222.52 1410.33 Q1217.08 1409.19 1214.66 1406.83 Q1212.24 1404.45 1212.24 1400.31 Q1212.24 1395.28 1215.81 1392.54 Q1219.37 1389.8 1225.93 1389.8 Q1229.17 1389.8 1232.04 1390.28 Q1234.9 1390.76 1237.32 1391.71 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip760)\" d=\"M1254.35 1380.54 L1254.35 1390.66 L1266.41 1390.66 L1266.41 1395.22 L1254.35 1395.22 L1254.35 1414.57 Q1254.35 1418.93 1255.53 1420.17 Q1256.74 1421.41 1260.4 1421.41 L1266.41 1421.41 L1266.41 1426.31 L1260.4 1426.31 Q1253.62 1426.31 1251.04 1423.8 Q1248.46 1421.25 1248.46 1414.57 L1248.46 1395.22 L1244.17 1395.22 L1244.17 1390.66 L1248.46 1390.66 L1248.46 1380.54 L1254.35 1380.54 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip760)\" d=\"M1304.61 1407.02 L1304.61 1409.89 L1277.68 1409.89 Q1278.06 1415.94 1281.31 1419.12 Q1284.59 1422.27 1290.41 1422.27 Q1293.79 1422.27 1296.94 1421.44 Q1300.12 1420.61 1303.24 1418.96 L1303.24 1424.5 Q1300.09 1425.83 1296.78 1426.53 Q1293.47 1427.23 1290.06 1427.23 Q1281.53 1427.23 1276.54 1422.27 Q1271.57 1417.3 1271.57 1408.84 Q1271.57 1400.08 1276.28 1394.96 Q1281.02 1389.8 1289.04 1389.8 Q1296.24 1389.8 1300.41 1394.45 Q1304.61 1399.07 1304.61 1407.02 M1298.75 1405.3 Q1298.69 1400.5 1296.05 1397.63 Q1293.44 1394.77 1289.11 1394.77 Q1284.21 1394.77 1281.25 1397.54 Q1278.32 1400.31 1277.87 1405.34 L1298.75 1405.3 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip760)\" d=\"M1319.89 1420.96 L1319.89 1439.87 L1314 1439.87 L1314 1390.66 L1319.89 1390.66 L1319.89 1396.07 Q1321.73 1392.89 1324.53 1391.36 Q1327.37 1389.8 1331.28 1389.8 Q1337.77 1389.8 1341.82 1394.96 Q1345.89 1400.12 1345.89 1408.52 Q1345.89 1416.92 1341.82 1422.08 Q1337.77 1427.23 1331.28 1427.23 Q1327.37 1427.23 1324.53 1425.71 Q1321.73 1424.15 1319.89 1420.96 M1339.81 1408.52 Q1339.81 1402.06 1337.14 1398.4 Q1334.5 1394.71 1329.85 1394.71 Q1325.2 1394.71 1322.53 1398.4 Q1319.89 1402.06 1319.89 1408.52 Q1319.89 1414.98 1322.53 1418.67 Q1325.2 1422.33 1329.85 1422.33 Q1334.5 1422.33 1337.14 1418.67 Q1339.81 1414.98 1339.81 1408.52 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><polyline clip-path=\"url(#clip760)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"346.853,1281.45 346.853,188.976 \"/>\n<polyline clip-path=\"url(#clip760)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"346.853,1157.26 365.751,1157.26 \"/>\n<polyline clip-path=\"url(#clip760)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"346.853,1009.57 365.751,1009.57 \"/>\n<polyline clip-path=\"url(#clip760)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"346.853,861.889 365.751,861.889 \"/>\n<polyline clip-path=\"url(#clip760)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"346.853,714.204 365.751,714.204 \"/>\n<polyline clip-path=\"url(#clip760)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"346.853,566.519 365.751,566.519 \"/>\n<polyline clip-path=\"url(#clip760)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"346.853,418.833 365.751,418.833 \"/>\n<polyline clip-path=\"url(#clip760)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"346.853,271.148 365.751,271.148 \"/>\n<path clip-path=\"url(#clip760)\" d=\"M298.909 1143.06 Q295.298 1143.06 293.469 1146.62 Q291.664 1150.16 291.664 1157.29 Q291.664 1164.4 293.469 1167.97 Q295.298 1171.51 298.909 1171.51 Q302.543 1171.51 304.349 1167.97 Q306.177 1164.4 306.177 1157.29 Q306.177 1150.16 304.349 1146.62 Q302.543 1143.06 298.909 1143.06 M298.909 1139.35 Q304.719 1139.35 307.775 1143.96 Q310.853 1148.54 310.853 1157.29 Q310.853 1166.02 307.775 1170.63 Q304.719 1175.21 298.909 1175.21 Q293.099 1175.21 290.02 1170.63 Q286.964 1166.02 286.964 1157.29 Q286.964 1148.54 290.02 1143.96 Q293.099 1139.35 298.909 1139.35 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip760)\" d=\"M259.557 1022.92 L267.196 1022.92 L267.196 996.554 L258.886 998.22 L258.886 993.961 L267.15 992.294 L271.826 992.294 L271.826 1022.92 L279.465 1022.92 L279.465 1026.85 L259.557 1026.85 L259.557 1022.92 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip760)\" d=\"M298.909 995.373 Q295.298 995.373 293.469 998.938 Q291.664 1002.48 291.664 1009.61 Q291.664 1016.72 293.469 1020.28 Q295.298 1023.82 298.909 1023.82 Q302.543 1023.82 304.349 1020.28 Q306.177 1016.72 306.177 1009.61 Q306.177 1002.48 304.349 998.938 Q302.543 995.373 298.909 995.373 M298.909 991.669 Q304.719 991.669 307.775 996.276 Q310.853 1000.86 310.853 1009.61 Q310.853 1018.34 307.775 1022.94 Q304.719 1027.53 298.909 1027.53 Q293.099 1027.53 290.02 1022.94 Q286.964 1018.34 286.964 1009.61 Q286.964 1000.86 290.02 996.276 Q293.099 991.669 298.909 991.669 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip760)\" d=\"M262.775 875.234 L279.094 875.234 L279.094 879.169 L257.15 879.169 L257.15 875.234 Q259.812 872.479 264.395 867.85 Q269.002 863.197 270.182 861.854 Q272.428 859.331 273.307 857.595 Q274.21 855.836 274.21 854.146 Q274.21 851.392 272.266 849.655 Q270.344 847.919 267.242 847.919 Q265.043 847.919 262.59 848.683 Q260.159 849.447 257.381 850.998 L257.381 846.276 Q260.205 845.142 262.659 844.563 Q265.113 843.984 267.15 843.984 Q272.52 843.984 275.715 846.669 Q278.909 849.355 278.909 853.845 Q278.909 855.975 278.099 857.896 Q277.312 859.794 275.205 862.387 Q274.627 863.058 271.525 866.276 Q268.423 869.47 262.775 875.234 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip760)\" d=\"M298.909 847.688 Q295.298 847.688 293.469 851.253 Q291.664 854.794 291.664 861.924 Q291.664 869.03 293.469 872.595 Q295.298 876.137 298.909 876.137 Q302.543 876.137 304.349 872.595 Q306.177 869.03 306.177 861.924 Q306.177 854.794 304.349 851.253 Q302.543 847.688 298.909 847.688 M298.909 843.984 Q304.719 843.984 307.775 848.591 Q310.853 853.174 310.853 861.924 Q310.853 870.651 307.775 875.257 Q304.719 879.84 298.909 879.84 Q293.099 879.84 290.02 875.257 Q286.964 870.651 286.964 861.924 Q286.964 853.174 290.02 848.591 Q293.099 843.984 298.909 843.984 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip760)\" d=\"M272.914 712.85 Q276.27 713.567 278.145 715.836 Q280.043 718.104 280.043 721.438 Q280.043 726.553 276.525 729.354 Q273.006 732.155 266.525 732.155 Q264.349 732.155 262.034 731.715 Q259.742 731.299 257.289 730.442 L257.289 725.928 Q259.233 727.063 261.548 727.641 Q263.863 728.22 266.386 728.22 Q270.784 728.22 273.076 726.484 Q275.39 724.748 275.39 721.438 Q275.39 718.382 273.238 716.669 Q271.108 714.933 267.289 714.933 L263.261 714.933 L263.261 711.09 L267.474 711.09 Q270.923 711.09 272.752 709.725 Q274.58 708.336 274.58 705.743 Q274.58 703.081 272.682 701.669 Q270.807 700.234 267.289 700.234 Q265.367 700.234 263.168 700.651 Q260.969 701.067 258.33 701.947 L258.33 697.78 Q260.992 697.04 263.307 696.669 Q265.645 696.299 267.705 696.299 Q273.029 696.299 276.131 698.729 Q279.233 701.137 279.233 705.257 Q279.233 708.128 277.59 710.118 Q275.946 712.086 272.914 712.85 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip760)\" d=\"M298.909 700.003 Q295.298 700.003 293.469 703.567 Q291.664 707.109 291.664 714.239 Q291.664 721.345 293.469 724.91 Q295.298 728.451 298.909 728.451 Q302.543 728.451 304.349 724.91 Q306.177 721.345 306.177 714.239 Q306.177 707.109 304.349 703.567 Q302.543 700.003 298.909 700.003 M298.909 696.299 Q304.719 696.299 307.775 700.905 Q310.853 705.489 310.853 714.239 Q310.853 722.965 307.775 727.572 Q304.719 732.155 298.909 732.155 Q293.099 732.155 290.02 727.572 Q286.964 722.965 286.964 714.239 Q286.964 705.489 290.02 700.905 Q293.099 696.299 298.909 696.299 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip760)\" d=\"M271.594 553.313 L259.789 571.762 L271.594 571.762 L271.594 553.313 M270.367 549.239 L276.247 549.239 L276.247 571.762 L281.177 571.762 L281.177 575.65 L276.247 575.65 L276.247 583.799 L271.594 583.799 L271.594 575.65 L255.992 575.65 L255.992 571.137 L270.367 549.239 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip760)\" d=\"M298.909 552.317 Q295.298 552.317 293.469 555.882 Q291.664 559.424 291.664 566.553 Q291.664 573.66 293.469 577.225 Q295.298 580.766 298.909 580.766 Q302.543 580.766 304.349 577.225 Q306.177 573.66 306.177 566.553 Q306.177 559.424 304.349 555.882 Q302.543 552.317 298.909 552.317 M298.909 548.614 Q304.719 548.614 307.775 553.22 Q310.853 557.803 310.853 566.553 Q310.853 575.28 307.775 579.887 Q304.719 584.47 298.909 584.47 Q293.099 584.47 290.02 579.887 Q286.964 575.28 286.964 566.553 Q286.964 557.803 290.02 553.22 Q293.099 548.614 298.909 548.614 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip760)\" d=\"M258.793 401.553 L277.15 401.553 L277.15 405.488 L263.076 405.488 L263.076 413.961 Q264.094 413.613 265.113 413.451 Q266.131 413.266 267.15 413.266 Q272.937 413.266 276.316 416.437 Q279.696 419.609 279.696 425.025 Q279.696 430.604 276.224 433.706 Q272.752 436.785 266.432 436.785 Q264.256 436.785 261.988 436.414 Q259.742 436.044 257.335 435.303 L257.335 430.604 Q259.418 431.738 261.641 432.294 Q263.863 432.849 266.34 432.849 Q270.344 432.849 272.682 430.743 Q275.02 428.636 275.02 425.025 Q275.02 421.414 272.682 419.308 Q270.344 417.201 266.34 417.201 Q264.465 417.201 262.59 417.618 Q260.738 418.035 258.793 418.914 L258.793 401.553 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip760)\" d=\"M298.909 404.632 Q295.298 404.632 293.469 408.197 Q291.664 411.738 291.664 418.868 Q291.664 425.974 293.469 429.539 Q295.298 433.081 298.909 433.081 Q302.543 433.081 304.349 429.539 Q306.177 425.974 306.177 418.868 Q306.177 411.738 304.349 408.197 Q302.543 404.632 298.909 404.632 M298.909 400.928 Q304.719 400.928 307.775 405.535 Q310.853 410.118 310.853 418.868 Q310.853 427.595 307.775 432.201 Q304.719 436.785 298.909 436.785 Q293.099 436.785 290.02 432.201 Q286.964 427.595 286.964 418.868 Q286.964 410.118 290.02 405.535 Q293.099 400.928 298.909 400.928 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip760)\" d=\"M269.326 269.285 Q266.178 269.285 264.326 271.437 Q262.497 273.59 262.497 277.34 Q262.497 281.067 264.326 283.243 Q266.178 285.396 269.326 285.396 Q272.474 285.396 274.303 283.243 Q276.154 281.067 276.154 277.34 Q276.154 273.59 274.303 271.437 Q272.474 269.285 269.326 269.285 M278.608 254.632 L278.608 258.891 Q276.849 258.058 275.043 257.618 Q273.261 257.178 271.502 257.178 Q266.872 257.178 264.418 260.303 Q261.988 263.428 261.641 269.748 Q263.006 267.734 265.066 266.669 Q267.127 265.581 269.603 265.581 Q274.812 265.581 277.821 268.752 Q280.853 271.9 280.853 277.34 Q280.853 282.664 277.705 285.882 Q274.557 289.099 269.326 289.099 Q263.33 289.099 260.159 284.516 Q256.988 279.91 256.988 271.183 Q256.988 262.988 260.877 258.127 Q264.766 253.243 271.316 253.243 Q273.076 253.243 274.858 253.59 Q276.664 253.937 278.608 254.632 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip760)\" d=\"M298.909 256.947 Q295.298 256.947 293.469 260.511 Q291.664 264.053 291.664 271.183 Q291.664 278.289 293.469 281.854 Q295.298 285.396 298.909 285.396 Q302.543 285.396 304.349 281.854 Q306.177 278.289 306.177 271.183 Q306.177 264.053 304.349 260.511 Q302.543 256.947 298.909 256.947 M298.909 253.243 Q304.719 253.243 307.775 257.849 Q310.853 262.433 310.853 271.183 Q310.853 279.91 307.775 284.516 Q304.719 289.099 298.909 289.099 Q293.099 289.099 290.02 284.516 Q286.964 279.91 286.964 271.183 Q286.964 262.433 290.02 257.849 Q293.099 253.243 298.909 253.243 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip760)\" d=\"M186.448 812.969 L189.313 812.969 L189.313 839.896 Q195.36 839.514 198.543 836.268 Q201.694 832.989 201.694 827.165 Q201.694 823.791 200.867 820.64 Q200.039 817.457 198.384 814.338 L203.922 814.338 Q205.259 817.489 205.959 820.799 Q206.659 824.109 206.659 827.515 Q206.659 836.045 201.694 841.042 Q196.729 846.007 188.263 846.007 Q179.51 846.007 174.385 841.296 Q169.229 836.554 169.229 828.533 Q169.229 821.34 173.876 817.17 Q178.491 812.969 186.448 812.969 M184.73 818.826 Q179.924 818.889 177.059 821.531 Q174.194 824.141 174.194 828.47 Q174.194 833.371 176.963 836.331 Q179.733 839.259 184.761 839.705 L184.73 818.826 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip760)\" d=\"M184.22 773.724 L205.736 773.724 L205.736 779.581 L184.411 779.581 Q179.351 779.581 176.836 781.554 Q174.322 783.528 174.322 787.474 Q174.322 792.217 177.345 794.954 Q180.369 797.691 185.589 797.691 L205.736 797.691 L205.736 803.58 L170.088 803.58 L170.088 797.691 L175.627 797.691 Q172.412 795.591 170.821 792.758 Q169.229 789.893 169.229 786.169 Q169.229 780.027 173.049 776.876 Q176.836 773.724 184.22 773.724 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip760)\" d=\"M186.448 731.552 L189.313 731.552 L189.313 758.479 Q195.36 758.097 198.543 754.85 Q201.694 751.572 201.694 745.747 Q201.694 742.373 200.867 739.222 Q200.039 736.04 198.384 732.92 L203.922 732.92 Q205.259 736.071 205.959 739.382 Q206.659 742.692 206.659 746.097 Q206.659 754.627 201.694 759.624 Q196.729 764.59 188.263 764.59 Q179.51 764.59 174.385 759.879 Q169.229 755.137 169.229 747.116 Q169.229 739.923 173.876 735.753 Q178.491 731.552 186.448 731.552 M184.73 737.408 Q179.924 737.472 177.059 740.114 Q174.194 742.724 174.194 747.052 Q174.194 751.954 176.963 754.914 Q179.733 757.842 184.761 758.288 L184.73 737.408 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip760)\" d=\"M175.563 701.283 Q174.99 702.269 174.735 703.447 Q174.449 704.593 174.449 705.993 Q174.449 710.959 177.696 713.632 Q180.91 716.274 186.958 716.274 L205.736 716.274 L205.736 722.162 L170.088 722.162 L170.088 716.274 L175.627 716.274 Q172.38 714.428 170.821 711.468 Q169.229 708.508 169.229 704.275 Q169.229 703.67 169.325 702.938 Q169.388 702.206 169.547 701.315 L175.563 701.283 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip760)\" d=\"M187.499 672.828 Q181.133 672.828 177.632 675.47 Q174.131 678.08 174.131 682.822 Q174.131 687.533 177.632 690.175 Q181.133 692.785 187.499 692.785 Q193.833 692.785 197.334 690.175 Q200.835 687.533 200.835 682.822 Q200.835 678.08 197.334 675.47 Q193.833 672.828 187.499 672.828 M201.312 666.972 Q210.415 666.972 214.839 671.014 Q219.295 675.056 219.295 683.395 Q219.295 686.482 218.818 689.22 Q218.372 691.957 217.418 694.535 L211.72 694.535 Q213.121 691.957 213.789 689.443 Q214.457 686.928 214.457 684.318 Q214.457 678.557 211.434 675.693 Q208.442 672.828 202.363 672.828 L199.466 672.828 Q202.617 674.642 204.177 677.475 Q205.736 680.308 205.736 684.254 Q205.736 690.811 200.739 694.822 Q195.742 698.832 187.499 698.832 Q179.223 698.832 174.226 694.822 Q169.229 690.811 169.229 684.254 Q169.229 680.308 170.789 677.475 Q172.348 674.642 175.499 672.828 L170.088 672.828 L170.088 666.972 L201.312 666.972 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip760)\" d=\"M209.047 640.076 Q215.412 642.559 217.354 644.914 Q219.295 647.27 219.295 651.216 L219.295 655.895 L214.394 655.895 L214.394 652.458 Q214.394 650.039 213.248 648.702 Q212.102 647.365 207.837 645.742 L205.164 644.692 L170.088 659.11 L170.088 652.903 L197.97 641.763 L170.088 630.623 L170.088 624.417 L209.047 640.076 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><polyline clip-path=\"url(#clip762)\" style=\"stroke:#009af9; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"399.613,1163.3 400.199,1057.44 400.786,960.398 401.372,869.327 401.958,787.418 402.545,712.798 403.131,644.696 403.718,580.896 404.304,526.16 404.891,473.416 405.477,427.249 406.063,385.756 406.65,348.632 407.236,315.597 407.823,287.943 408.409,262.212 408.995,299.19 409.582,277.535 410.168,258.903 410.755,243.889 411.341,230.665 411.927,219.895 412.514,250.96 413.1,280.144 413.687,273.492 414.273,299.754 414.86,351.71 415.446,373.018 416.032,418.074 416.619,437.808 417.205,435.205 417.792,433.957 418.378,434.384 418.964,435.941 419.551,437.582 420.137,455.683 420.724,458.901 421.31,491.64 421.896,495.7 422.483,513.026 423.069,552.46 423.656,567.281 424.242,571.774 424.829,595.97 425.415,600.009 426.001,605.325 426.588,618.588 427.174,631.554 427.761,645.233 428.347,665.011 428.933,683.721 429.52,688.225 430.106,706.105 430.693,711.216 431.279,722.164 431.865,738.295 432.452,744.488 433.038,776.752 433.625,786.505 434.211,791.502 434.798,796.793 435.384,802.254 435.97,812.281 436.557,822.241 437.143,831.392 437.73,841.09 438.316,850.564 438.902,863.461 439.489,875.905 440.075,884.669 440.662,893.155 441.248,898.361 441.835,907.238 442.421,915.654 443.007,924.059 443.594,929.47 444.18,937.628 444.767,951.096 445.353,961.238 445.939,966.032 446.526,978.623 447.112,985.719 447.699,989.917 448.285,999.108 448.871,1003.41 449.458,1017.12 450.044,1023.61 450.631,1027.33 451.217,1037.76 451.804,1043.59 452.39,1053.54 452.976,1061.3 453.563,1068.52 454.149,1071.59 454.736,1074.57 455.322,1081.66 455.908,1088.07 456.495,1090.68 457.081,1099.12 457.668,1101.62 458.254,1107.58 458.84,1109.93 459.427,1112.17 460.013,1120.23 460.6,1124.47 461.186,1124.95 461.773,1129.11 462.359,1134.81 462.945,1137.12 463.532,1142.7 464.118,1146.24 464.705,1153.12 465.291,1158.05 465.877,1159.54 466.464,1163.03 467.05,1166.04 467.637,1166.03 468.223,1169.11 468.809,1169.1 469.396,1176.73 469.982,1180.94 470.569,1182.02 471.155,1187.14 471.742,1191.05 472.328,1193.19 472.914,1196.85 473.501,1200.27 474.087,1197.75 474.674,1199.71 475.26,1199.97 475.846,1200.62 476.433,1201.36 477.019,1203.26 477.606,1205.05 478.192,1209.78 478.778,1212.94 479.365,1217.39 479.951,1220 480.538,1220.02 481.124,1222.5 481.711,1219.46 482.297,1219.43 482.883,1218.13 483.47,1220.88 484.056,1220.98 484.643,1220.01 485.229,1220.19 485.815,1221.75 486.402,1223.46 486.988,1223.57 487.575,1223.76 488.161,1222.63 488.748,1222.72 489.334,1221.58 489.92,1221.95 490.507,1224.8 491.093,1223.66 491.68,1226.6 492.266,1233.49 492.852,1233.28 493.439,1234.2 494.025,1235.46 494.612,1234.93 495.198,1235.87 495.784,1237.28 496.371,1238.16 496.957,1237.62 497.544,1238.88 498.13,1238.8 498.717,1239.86 499.303,1241.11 499.889,1238.27 500.476,1240.8 501.062,1240.55 501.649,1239.15 502.235,1240.32 502.821,1244.92 503.408,1245.97 503.994,1243.95 504.581,1244.7 505.167,1244.32 505.753,1244.12 506.34,1242.41 506.926,1241.91 507.513,1238.95 508.099,1240.04 508.686,1238.88 509.272,1240 509.858,1240.87 510.445,1240.78 511.031,1241.95 511.618,1241.39 512.204,1242.28 512.79,1240.55 513.377,1244.06 513.963,1241.43 514.55,1240.99 515.136,1240.74 515.722,1243.06 516.309,1245.37 516.895,1246.25 517.482,1244.69 518.068,1246.68 518.655,1244.85 519.241,1245.7 519.827,1245.28 520.414,1244.71 521,1244.19 521.587,1245.19 522.173,1246.3 522.759,1245.92 523.346,1246.15 523.932,1245.61 524.519,1244.9 525.105,1245.73 525.691,1245.36 526.278,1245.89 526.864,1245.39 527.451,1245.89 528.037,1248.02 528.624,1247.48 529.21,1246.63 529.796,1248.38 530.383,1248.77 530.969,1250.53 531.556,1249.69 532.142,1250.21 532.728,1249.45 533.315,1248.69 533.901,1249.06 534.488,1248.47 535.074,1247.94 535.661,1248.48 536.247,1248.96 536.833,1248.13 537.42,1247.42 538.006,1244.03 538.593,1242.05 539.179,1241.51 539.765,1242.3 540.352,1242.95 540.938,1242.48 541.525,1241.89 542.111,1241.47 542.697,1241.08 543.284,1241.92 543.87,1240.39 544.457,1237.62 545.043,1241.14 545.63,1243.27 546.216,1244.11 546.802,1243.5 547.389,1243.04 547.975,1244.93 548.562,1243.1 549.148,1241.43 549.734,1242.34 550.321,1240.71 550.907,1241.55 551.494,1242.34 552.08,1243.14 552.666,1243.68 553.253,1243.16 553.839,1242.53 554.426,1242.1 555.012,1240.37 555.599,1240.26 556.185,1238.61 556.771,1241.8 557.358,1242.52 557.944,1243.14 558.531,1242.5 559.117,1244.09 559.703,1245.87 560.29,1248.77 560.876,1244.19 561.463,1242.3 562.049,1242.95 562.635,1243.53 563.222,1242.84 563.808,1240.87 564.395,1240.41 564.981,1238.7 565.568,1239.38 566.154,1239.07 566.74,1241.1 567.327,1240.34 567.913,1242.28 568.5,1242.75 569.086,1242.26 569.672,1241.63 570.259,1240.9 570.845,1242.83 571.432,1244.65 572.018,1244 572.605,1244.32 573.191,1242.25 573.777,1242.71 574.364,1240.75 574.95,1241.52 575.537,1240.75 576.123,1238.76 576.709,1239.42 577.296,1239.99 577.882,1239.42 578.469,1236.61 579.055,1236.2 579.641,1235.87 580.228,1235.66 580.814,1237.49 581.401,1239.42 581.987,1238.97 582.574,1238.65 583.16,1239.5 583.746,1241.41 584.333,1243.2 584.919,1244.74 585.506,1242.68 586.092,1240.72 586.678,1237.72 587.265,1238.56 587.851,1237.95 588.438,1237.55 589.024,1237.76 589.61,1234.76 590.197,1233.17 590.783,1231.65 591.37,1229.12 591.956,1228.92 592.543,1228.74 593.129,1228.65 593.715,1228.33 594.302,1229.67 594.888,1229.5 595.475,1228.1 596.061,1226.93 596.647,1228.33 597.234,1228.28 597.82,1227.27 598.407,1228.52 598.993,1228.29 599.579,1229.44 600.166,1229.22 600.752,1229.22 601.339,1228.96 601.925,1227.51 602.512,1228.78 603.098,1230.01 603.684,1229.94 604.271,1231.25 604.857,1233.46 605.444,1233.15 606.03,1234.01 606.616,1234.8 607.203,1234.17 607.789,1233.98 608.376,1232.31 608.962,1232.14 609.548,1233.08 610.135,1232.59 610.721,1232.33 611.308,1232.09 611.894,1232.03 612.481,1230.28 613.067,1229.09 613.653,1228.9 614.24,1226.16 614.826,1228.56 615.413,1229.62 615.999,1231.9 616.585,1232.9 617.172,1232.74 617.758,1234.7 618.345,1236.89 618.931,1236.49 619.518,1234.68 620.104,1235.27 620.69,1235.93 621.277,1235.28 621.863,1234.83 622.45,1233.13 623.036,1235.13 623.622,1233.38 624.209,1231.52 624.795,1231.26 625.382,1230.95 625.968,1231.91 626.554,1232.58 627.141,1229.81 627.727,1227.15 628.314,1228.25 628.9,1225.44 629.487,1225.36 630.073,1224.1 630.659,1225.38 631.246,1225.18 631.832,1223.7 632.419,1223.47 633.005,1223.79 633.591,1222.75 634.178,1224.1 634.764,1221.73 635.351,1224.38 635.937,1224.68 636.523,1224.6 637.11,1228.08 637.696,1226.55 638.283,1227.59 638.869,1229.99 639.456,1229.56 640.042,1229.14 640.628,1231.39 641.215,1230.17 641.801,1231.03 642.388,1230.89 642.974,1226.85 643.56,1226.78 644.147,1225.32 644.733,1227.6 645.32,1226.31 645.906,1228.69 646.492,1227.42 647.079,1227.29 647.665,1228.59 648.252,1229.39 648.838,1230.27 649.425,1229.92 650.011,1229.48 650.597,1230.4 651.184,1225.47 651.77,1230.35 652.357,1230.05 652.943,1228.28 653.529,1229.15 654.116,1227.73 654.702,1229.93 655.289,1228.34 655.875,1228.02 656.462,1226.61 657.048,1227.52 657.634,1227.35 658.221,1227.25 658.807,1227.33 659.394,1227.21 659.98,1227.15 660.566,1226.62 661.153,1223.91 661.739,1223.99 662.326,1224.05 662.912,1224.2 663.498,1226.61 664.085,1227.6 664.671,1227.42 665.258,1228.3 665.844,1229.3 666.431,1232.54 667.017,1231.8 667.603,1231.4 668.19,1229.82 668.776,1228.46 669.363,1229.62 669.949,1227.05 670.535,1223.34 671.122,1225.73 671.708,1225.78 672.295,1227.07 672.881,1226.92 673.467,1226.75 674.054,1226.78 674.64,1225.51 675.227,1225.36 675.813,1226.31 676.4,1223.76 676.986,1223.91 677.572,1224.01 678.159,1225.1 678.745,1225 679.332,1223.57 679.918,1222.2 680.504,1220.9 681.091,1220.69 681.677,1219.41 682.264,1218.21 682.85,1219.58 683.436,1219.66 684.023,1218.66 684.609,1218 685.196,1218.03 685.782,1218.47 686.369,1218.5 686.955,1219.86 687.541,1218.79 688.128,1220.33 688.714,1220.45 689.301,1221.9 689.887,1221.77 690.473,1224.25 691.06,1223.94 691.646,1221.26 692.233,1218.58 692.819,1217.78 693.405,1216.87 693.992,1219.63 694.578,1220.95 695.165,1221.13 695.751,1221.25 696.338,1218.49 696.924,1218.85 697.51,1219.01 698.097,1219.1 698.683,1220.59 699.27,1223.95 699.856,1223.63 700.442,1224.76 701.029,1224.47 701.615,1227.85 702.202,1232.24 702.788,1230.56 703.375,1230.04 703.961,1231.83 704.547,1232.43 705.134,1229.46 705.72,1230.38 706.307,1229.77 706.893,1231.83 707.479,1232.47 708.066,1230.68 708.652,1230.22 709.239,1229.7 709.825,1229.32 710.411,1228.81 710.998,1226.09 711.584,1227.24 712.171,1231.63 712.757,1230.07 713.344,1232.18 713.93,1234.2 714.516,1236.14 715.103,1234.13 715.689,1235.78 716.276,1235.05 716.862,1234.21 717.448,1237.18 718.035,1236.26 718.621,1232.88 719.208,1233.46 719.794,1230.26 720.38,1229.74 720.967,1229.1 721.553,1228.49 722.14,1229.39 722.726,1231.3 723.313,1229.7 723.899,1230.57 724.485,1228.75 725.072,1227.08 725.658,1224.56 726.245,1224.55 726.831,1224.2 727.417,1221.58 728.004,1219.01 728.59,1217.89 729.177,1215.43 729.763,1213.31 730.349,1212.51 730.936,1212.82 731.522,1214.54 732.109,1214.87 732.695,1217.69 733.282,1216.42 733.868,1219.13 734.454,1221.61 735.041,1224.01 735.627,1223.91 736.214,1222.41 736.8,1222.06 737.386,1221.7 737.973,1221.24 738.559,1222.38 739.146,1223.54 739.732,1223.5 740.318,1221.01 740.905,1226.15 741.491,1224.43 742.078,1223.11 742.664,1224.12 743.251,1222.76 743.837,1221.62 744.423,1223.01 745.01,1221.55 745.596,1222.61 746.183,1223.61 746.769,1224.87 747.355,1224.67 747.942,1222.05 748.528,1220.61 749.115,1221.79 749.701,1219.31 750.288,1215.91 750.874,1216.2 751.46,1214.07 752.047,1216.97 752.633,1218.31 753.22,1216 753.806,1215.32 754.392,1217.91 754.979,1216.82 755.565,1218.22 756.152,1219.28 756.738,1218.24 757.324,1219.61 757.911,1221.01 758.497,1223.13 759.084,1223.15 759.67,1223.19 760.257,1220.53 760.843,1221.66 761.429,1222.7 762.016,1222.88 762.602,1221.54 763.189,1220.23 763.775,1218.01 764.361,1216.78 764.948,1218.09 765.534,1219.55 766.121,1219.8 766.707,1218.77 767.293,1221.63 767.88,1221.62 768.466,1220.28 769.053,1221.45 769.639,1223.6 770.226,1224.55 770.812,1226.62 771.398,1229.84 771.985,1228.1 772.571,1227.67 773.158,1227.35 773.744,1224.57 774.33,1224.59 774.917,1224.23 775.503,1225.04 776.09,1224.84 776.676,1225.52 777.262,1226.41 777.849,1227.29 778.435,1226.8 779.022,1226.25 779.608,1226.07 780.195,1227.93 780.781,1226.37 781.367,1227.22 781.954,1225.45 782.54,1225.01 783.127,1222.5 783.713,1224.66 784.299,1221.97 784.886,1221.64 785.472,1219.03 786.059,1220.44 786.645,1221.8 787.232,1222.97 787.818,1221.4 788.404,1221.26 788.991,1222.43 789.577,1222.58 790.164,1221.32 790.75,1222.34 791.336,1221 791.923,1225.96 792.509,1223.33 793.096,1223.02 793.682,1222.64 794.268,1221.31 794.855,1218.89 795.441,1220.17 796.028,1219.09 796.614,1218.85 797.201,1220.96 797.787,1221.9 798.373,1223.03 798.96,1221.64 799.546,1223.91 800.133,1222.46 800.719,1218.93 801.305,1217.9 801.892,1220.38 802.478,1220.37 803.065,1220.6 803.651,1217.12 804.237,1219.52 804.824,1220.65 805.41,1220.61 805.997,1219.42 806.583,1220.84 807.17,1219.8 807.756,1221.06 808.342,1220.95 808.929,1219.78 809.515,1218.32 810.102,1219.65 810.688,1219.53 811.274,1220.58 811.861,1220.47 812.447,1221.67 813.034,1220.44 813.62,1220.5 814.206,1214.63 814.793,1214.95 815.379,1216.53 815.966,1217.88 816.552,1218.04 817.139,1219.35 817.725,1218.01 818.311,1216.98 818.898,1220.69 819.484,1221.7 820.071,1220.43 820.657,1220.48 821.243,1221.53 821.83,1222.56 822.416,1222.4 823.003,1223.2 823.589,1224.26 824.175,1221.83 824.762,1221.34 825.348,1218.48 825.935,1218.55 826.521,1217.45 827.108,1217.93 827.694,1218.05 828.28,1218.09 828.867,1219.42 829.453,1218.22 830.04,1218.16 830.626,1221.82 831.212,1222.78 831.799,1218.98 832.385,1216.58 832.972,1214.14 833.558,1213.42 834.145,1213.75 834.731,1215.27 835.317,1215.62 835.904,1217.16 836.49,1217.27 837.077,1218.44 837.663,1214.94 838.249,1217.8 838.836,1219.35 839.422,1219.29 840.009,1221.23 840.595,1222.44 841.181,1223.62 841.768,1224.8 842.354,1226.02 842.941,1225.72 843.527,1226.28 844.114,1227.3 844.7,1226.91 845.286,1227.67 845.873,1226.26 846.459,1225.96 847.046,1222.99 847.632,1224.21 848.218,1224.96 848.805,1222.43 849.391,1223.59 849.978,1224.29 850.564,1221.79 851.15,1223.14 851.737,1224.41 852.323,1223.9 852.91,1224.81 853.496,1224.62 854.083,1225.56 854.669,1222.69 855.255,1222.39 855.842,1224.81 856.428,1225.75 857.015,1221.55 857.601,1221.36 858.187,1222.31 858.774,1219.47 859.36,1218.12 859.947,1219.09 860.533,1215.25 861.119,1213.9 861.706,1213.9 862.292,1215.41 862.879,1214.24 863.465,1214.51 864.052,1214.81 864.638,1213.81 865.224,1213.84 865.811,1215.22 866.397,1215.03 866.984,1216.57 867.57,1217.74 868.156,1215.37 868.743,1214.16 869.329,1215.65 869.916,1214.43 870.502,1214.6 871.089,1214.72 871.675,1218.62 872.261,1218.57 872.848,1219.62 873.434,1219.48 874.021,1219.49 874.607,1218.17 875.193,1219.47 875.78,1217.89 876.366,1216.57 876.953,1215.51 877.539,1216.74 878.125,1217.83 878.712,1218.05 879.298,1216.8 879.885,1216.68 880.471,1216.65 881.058,1216.81 881.644,1218.03 882.23,1218.02 882.817,1217.09 883.403,1215.87 883.99,1217.11 884.576,1218.44 885.162,1219.63 885.749,1219.53 886.335,1218.37 886.922,1218.1 887.508,1217.04 888.094,1219.29 888.681,1220.55 889.267,1220.24 889.854,1220.14 890.44,1218.83 891.027,1217.22 891.613,1217.26 892.199,1218.34 892.786,1217.26 893.372,1216.23 893.959,1217.56 894.545,1217.89 895.131,1215.42 895.718,1215.51 896.304,1215.55 896.891,1215.74 897.477,1215.55 898.063,1215.78 898.65,1215.76 899.236,1215.97 899.823,1216.23 900.409,1217.3 900.996,1219.68 901.582,1220.77 902.168,1219.1 902.755,1218.96 903.341,1222.91 903.928,1218.9 904.514,1215.19 905.1,1217.77 905.687,1216.49 906.273,1215.35 906.86,1211.99 907.446,1212.42 908.032,1214.12 908.619,1213.1 909.205,1212.1 909.792,1212.28 910.378,1212.48 910.965,1210.44 911.551,1212.17 912.137,1212.59 912.724,1212.8 913.31,1214.19 913.897,1215.6 914.483,1212.12 915.069,1212.54 915.656,1211.73 916.242,1211.06 916.829,1213.47 917.415,1213.88 918.002,1213.94 918.588,1214.06 919.174,1212.08 919.761,1212.57 920.347,1213.15 920.934,1213.5 921.52,1213.74 922.106,1211.64 922.693,1213.36 923.279,1213.82 923.866,1212.84 924.452,1213.22 925.038,1214.67 925.625,1214.75 926.211,1215.93 926.798,1216.05 927.384,1217.58 927.971,1211.42 928.557,1211.83 929.143,1210.92 929.73,1210.17 930.316,1210.82 930.903,1211.14 931.489,1212.86 932.075,1215.66 932.662,1215.62 933.248,1215.62 933.835,1218.38 934.421,1218.43 935.007,1219.66 935.594,1217.58 936.18,1218.99 936.767,1217.58 937.353,1217.62 937.94,1218.89 938.526,1218.99 939.112,1218.91 939.699,1221.34 940.285,1224.52 940.872,1222.91 941.458,1221.59 942.044,1223.91 942.631,1222.38 943.217,1223.19 943.804,1224.02 944.39,1223.63 944.976,1219.62 945.563,1221.65 946.149,1218.94 946.736,1220.04 947.322,1222.22 947.909,1220.87 948.495,1224.28 949.081,1224.95 949.668,1223.07 950.254,1221.64 950.841,1222.85 951.427,1220.09 952.013,1217.49 952.6,1216.31 953.186,1217.81 953.773,1220.13 954.359,1218.98 954.945,1220.12 955.532,1221.06 956.118,1222.12 956.705,1219.44 957.291,1215.79 957.878,1217.17 958.464,1219.6 959.05,1219.79 959.637,1219.61 960.223,1219.47 960.81,1218.19 961.396,1218.06 961.982,1215.78 962.569,1217.25 963.155,1218.47 963.742,1215.96 964.328,1216.12 964.915,1213.84 965.501,1218.85 966.087,1217.59 966.674,1217.75 967.26,1220.09 967.847,1220.01 968.433,1220.86 969.019,1219.5 969.606,1217.2 970.192,1214.87 970.779,1215.78 971.365,1215.76 971.951,1215.88 972.538,1215.74 973.124,1216.73 973.711,1216.52 974.297,1215.22 974.884,1213.92 975.47,1214.18 976.056,1215.78 976.643,1217.09 977.229,1218.27 977.816,1215.88 978.402,1216 978.988,1214.67 979.575,1214.63 980.161,1213.68 980.748,1211.38 981.334,1210.42 981.92,1211.86 982.507,1213.3 983.093,1213.68 983.68,1214.98 984.266,1215.3 984.853,1215.61 985.439,1215.7 986.025,1216.8 986.612,1217.95 987.198,1217.84 987.785,1217.73 988.371,1218.81 988.957,1219.84 989.544,1219.65 990.13,1218.24 990.717,1215.78 991.303,1216.93 991.889,1215.71 992.476,1217.05 993.062,1215.87 993.649,1214.82 994.235,1215.93 994.822,1214.94 995.408,1216.28 995.994,1214.23 996.581,1215.48 997.167,1213 997.754,1213.01 998.34,1212 998.926,1211.3 999.513,1212.7 1000.1,1209.35 1000.69,1209.58 1001.27,1209.94 1001.86,1211.35 1002.44,1210.31 1003.03,1211.8 1003.62,1214.58 1004.2,1215.73 1004.79,1218.13 1005.38,1218.05 1005.96,1216.72 1006.55,1215.42 1007.14,1215.6 1007.72,1217.1 1008.31,1217.24 1008.9,1216 1009.48,1219.79 1010.07,1217.2 1010.65,1218.11 1011.24,1219.44 1011.83,1220.51 1012.41,1220.51 1013,1221.63 1013.59,1221.21 1014.17,1223.37 1014.76,1223.24 1015.35,1224.26 1015.93,1222.71 1016.52,1220.71 1017.11,1220.34 1017.69,1221.34 1018.28,1222.43 1018.86,1222.29 1019.45,1220.91 1020.04,1219.51 1020.62,1218.25 1021.21,1218.37 1021.8,1216.12 1022.38,1216.38 1022.97,1217.88 1023.56,1219.02 1024.14,1220.11 1024.73,1221.01 1025.32,1220.76 1025.9,1224.13 1026.49,1222.56 1027.07,1224.67 1027.66,1224.26 1028.25,1224.03 1028.83,1223.68 1029.42,1223.13 1030.01,1222.79 1030.59,1221.32 1031.18,1220.82 1031.77,1222.07 1032.35,1220.47 1032.94,1221.37 1033.52,1221.25 1034.11,1221.14 1034.7,1220.99 1035.28,1221.96 1035.87,1220.48 1036.46,1219.01 1037.04,1218.94 1037.63,1218.72 1038.22,1217.54 1038.8,1216.23 1039.39,1217.56 1039.98,1217.48 1040.56,1217.32 1041.15,1215.84 1041.73,1215.81 1042.32,1217.07 1042.91,1217.02 1043.49,1217.1 1044.08,1218.63 1044.67,1220.99 1045.25,1220.72 1045.84,1220.65 1046.43,1222.82 1047.01,1223.98 1047.6,1221.37 1048.19,1223.45 1048.77,1220.78 1049.36,1221.66 1049.94,1222.42 1050.53,1223.38 1051.12,1222.13 1051.7,1218.48 1052.29,1219.43 1052.88,1221.68 1053.46,1221.5 1054.05,1222.46 1054.64,1224.76 1055.22,1223.24 1055.81,1224.23 1056.39,1222.81 1056.98,1223.87 1057.57,1225.01 1058.15,1225.66 1058.74,1224.38 1059.33,1222.52 1059.91,1219.87 1060.5,1220.03 1061.09,1223.54 1061.67,1220.91 1062.26,1220.49 1062.85,1221.47 1063.43,1220.28 1064.02,1219.88 1064.6,1218.58 1065.19,1217.09 1065.78,1214.83 1066.36,1212.76 1066.95,1213.06 1067.54,1210.8 1068.12,1211.97 1068.71,1213.56 1069.3,1213.93 1069.88,1211.72 1070.47,1214.44 1071.06,1213.53 1071.64,1214.83 1072.23,1212.69 1072.81,1212.89 1073.4,1213.35 1073.99,1214.79 1074.57,1214.85 1075.16,1212.53 1075.75,1210.37 1076.33,1210.8 1076.92,1209.62 1077.51,1213.38 1078.09,1208.83 1078.68,1211.93 1079.26,1212.2 1079.85,1210.01 1080.44,1207.95 1081.02,1207.01 1081.61,1206.7 1082.2,1206.13 1082.78,1210.58 1083.37,1210.97 1083.96,1211.4 1084.54,1213.03 1085.13,1214.17 1085.72,1213.18 1086.3,1215.77 1086.89,1213.82 1087.47,1212.77 1088.06,1213.29 1088.65,1215.84 1089.23,1216.03 1089.82,1217.46 1090.41,1217.65 1090.99,1221.19 1091.58,1220.8 1092.17,1220.72 1092.75,1221.92 1093.34,1220.29 1093.93,1220.09 1094.51,1220.07 1095.1,1223.44 1095.68,1221.82 1096.27,1221.61 1096.86,1221.29 1097.44,1220.8 1098.03,1220.77 1098.62,1220.78 1099.2,1220.73 1099.79,1219.38 1100.38,1217.73 1100.96,1218.94 1101.55,1218.85 1102.14,1217.82 1102.72,1216.86 1103.31,1214.42 1103.89,1215.62 1104.48,1215.73 1105.07,1219.45 1105.65,1221.65 1106.24,1222.47 1106.83,1222.22 1107.41,1221.85 1108,1221.57 1108.59,1223.35 1109.17,1220.56 1109.76,1220.27 1110.34,1221.13 1110.93,1219.44 1111.52,1219.13 1112.1,1221.58 1112.69,1221.32 1113.28,1219.93 1113.86,1218.65 1114.45,1217.31 1115.04,1214.73 1115.62,1214.96 1116.21,1216.39 1116.8,1216.35 1117.38,1216.23 1117.97,1217.33 1118.55,1220.1 1119.14,1219.91 1119.73,1219.82 1120.31,1220.65 1120.9,1219.14 1121.49,1219.2 1122.07,1215.66 1122.66,1214.49 1123.25,1213.38 1123.83,1213.72 1124.42,1211.52 1125.01,1207.75 1125.59,1208.2 1126.18,1209.8 1126.76,1209.19 1127.35,1207.37 1127.94,1209.27 1128.52,1209.84 1129.11,1209.11 1129.7,1210.81 1130.28,1211.22 1130.87,1213.96 1131.46,1212.75 1132.04,1213.97 1132.63,1212.85 1133.21,1211.9 1133.8,1212.19 1134.39,1212.61 1134.97,1214.2 1135.56,1214.4 1136.15,1214.51 1136.73,1214.55 1137.32,1213.49 1137.91,1214.72 1138.49,1214.66 1139.08,1214.84 1139.67,1218.57 1140.25,1218.32 1140.84,1219.54 1141.42,1222.98 1142.01,1222.87 1142.6,1225.03 1143.18,1223.37 1143.77,1222.98 1144.36,1225.14 1144.94,1222.15 1145.53,1226.59 1146.12,1226.02 1146.7,1223.09 1147.29,1222.79 1147.88,1222.55 1148.46,1222.28 1149.05,1221.88 1149.63,1222.98 1150.22,1222.45 1150.81,1220.93 1151.39,1218.18 1151.98,1219.34 1152.57,1222.81 1153.15,1223.48 1153.74,1221.83 1154.33,1221.62 1154.91,1221.49 1155.5,1220.05 1156.09,1219.83 1156.67,1219.57 1157.26,1217.14 1157.84,1217.03 1158.43,1214.39 1159.02,1215.77 1159.6,1216.04 1160.19,1217.21 1160.78,1217.08 1161.36,1215.68 1161.95,1213.33 1162.54,1213.54 1163.12,1213.73 1163.71,1216.29 1164.29,1215.01 1164.88,1216.44 1165.47,1216.27 1166.05,1216.37 1166.64,1215.28 1167.23,1217.64 1167.81,1218.67 1168.4,1218.6 1168.99,1217.36 1169.57,1218.74 1170.16,1220.8 1170.75,1219.42 1171.33,1218.03 1171.92,1216.7 1172.5,1215.44 1173.09,1215.88 1173.68,1217.22 1174.26,1214.82 1174.85,1215.9 1175.44,1217.08 1176.02,1213.44 1176.61,1214.85 1177.2,1213.87 1177.78,1213.89 1178.37,1214.14 1178.96,1215.46 1179.54,1216.76 1180.13,1214.33 1180.71,1212.1 1181.3,1211.27 1181.89,1213.96 1182.47,1214.41 1183.06,1213.13 1183.65,1213.21 1184.23,1213.37 1184.82,1211.16 1185.41,1209.97 1185.99,1211.4 1186.58,1210.89 1187.16,1209.65 1187.75,1210.29 1188.34,1210.61 1188.92,1210.82 1189.51,1209.88 1190.1,1213.75 1190.68,1212.68 1191.27,1213.94 1191.86,1214.17 1192.44,1214.25 1193.03,1213.07 1193.62,1213.31 1194.2,1216 1194.79,1214.84 1195.37,1212.58 1195.96,1212.81 1196.55,1213.14 1197.13,1214.61 1197.72,1217.45 1198.31,1218.72 1198.89,1213.62 1199.48,1215.11 1200.07,1213.89 1200.65,1215.3 1201.24,1215.5 1201.83,1214.24 1202.41,1218.17 1203,1214.24 1203.58,1214.3 1204.17,1214.41 1204.76,1214.5 1205.34,1215.82 1205.93,1215.72 1206.52,1215.62 1207.1,1215.84 1207.69,1217.41 1208.28,1221.14 1208.86,1220.71 1209.45,1220.61 1210.03,1217.93 1210.62,1217.95 1211.21,1220.35 1211.79,1221.44 1212.38,1221.13 1212.97,1218.13 1213.55,1216.88 1214.14,1217.46 1214.73,1217.17 1215.31,1218.37 1215.9,1218.31 1216.49,1216.83 1217.07,1216.78 1217.66,1216.84 1218.24,1217.84 1218.83,1217.71 1219.42,1213.99 1220,1216.77 1220.59,1217.19 1221.18,1218.64 1221.76,1218.61 1222.35,1218.77 1222.94,1218.61 1223.52,1219.93 1224.11,1218.43 1224.7,1219.55 1225.28,1217.25 1225.87,1217.03 1226.45,1218.24 1227.04,1219.36 1227.63,1219.32 1228.21,1219.14 1228.8,1221.28 1229.39,1219.92 1229.97,1218.42 1230.56,1218.38 1231.15,1218.32 1231.73,1220.89 1232.32,1219.52 1232.91,1218.45 1233.49,1218.13 1234.08,1221.54 1234.66,1220.08 1235.25,1221.16 1235.84,1220.94 1236.42,1220.69 1237.01,1217.92 1237.6,1217.78 1238.18,1215.26 1238.77,1214.04 1239.36,1217.71 1239.94,1221.32 1240.53,1220.81 1241.11,1219.12 1241.7,1219.12 1242.29,1218.9 1242.87,1217.62 1243.46,1216.45 1244.05,1215.29 1244.63,1215.33 1245.22,1214.29 1245.81,1214.46 1246.39,1216.07 1246.98,1216.33 1247.57,1214.04 1248.15,1214.32 1248.74,1215.55 1249.32,1213.3 1249.91,1217.33 1250.5,1215.04 1251.08,1214.2 1251.67,1215.55 1252.26,1215.56 1252.84,1215.8 1253.43,1215.84 1254.02,1215.66 1254.6,1215.81 1255.19,1213.19 1255.78,1214.65 1256.36,1216 1256.95,1213.59 1257.53,1213.85 1258.12,1211.72 1258.71,1213.3 1259.29,1214.54 1259.88,1215.79 1260.47,1215.91 1261.05,1215.81 1261.64,1214.66 1262.23,1212.23 1262.81,1207.61 1263.4,1207.77 1263.98,1207.33 1264.57,1207.77 1265.16,1209.4 1265.74,1209.87 1266.33,1210.23 1266.92,1209.42 1267.5,1208.54 1268.09,1207.78 1268.68,1209.35 1269.26,1210.86 1269.85,1209.88 1270.44,1210.48 1271.02,1209.86 1271.61,1211.43 1272.19,1211.84 1272.78,1212.29 1273.37,1213.77 1273.95,1212.81 1274.54,1214.35 1275.13,1215.7 1275.71,1216.87 1276.3,1215.6 1276.89,1215.76 1277.47,1215.88 1278.06,1216.12 1278.65,1216.26 1279.23,1215.22 1279.82,1215.28 1280.4,1216.91 1280.99,1218.15 1281.58,1218.14 1282.16,1218.08 1282.75,1218.2 1283.34,1219.46 1283.92,1216.94 1284.51,1218.19 1285.1,1219.38 1285.68,1219.15 1286.27,1220.38 1286.86,1218.98 1287.44,1221.37 1288.03,1223.59 1288.61,1220.89 1289.2,1220.55 1289.79,1221.37 1290.37,1221.23 1290.96,1223.44 1291.55,1225.66 1292.13,1223.82 1292.72,1223.61 1293.31,1221.91 1293.89,1221.37 1294.48,1219.81 1295.06,1219.52 1295.65,1220.32 1296.24,1220.12 1296.82,1219.87 1297.41,1220.87 1298,1217.03 1298.58,1214.58 1299.17,1212.31 1299.76,1212.41 1300.34,1210.38 1300.93,1211.93 1301.52,1213.39 1302.1,1211.32 1302.69,1211.53 1303.27,1211.67 1303.86,1211.83 1304.45,1212.26 1305.03,1213.73 1305.62,1213.94 1306.21,1212.9 1306.79,1214.44 1307.38,1216.78 1307.97,1217 1308.55,1217.05 1309.14,1215.64 1309.73,1218.06 1310.31,1218.03 1310.9,1217.84 1311.48,1215.53 1312.07,1214.22 1312.66,1215.64 1313.24,1214.1 1313.83,1211.6 1314.42,1210.78 1315,1210.94 1315.59,1208.58 1316.18,1210.23 1316.76,1210.64 1317.35,1210.9 1317.93,1211.12 1318.52,1210.06 1319.11,1211.68 1319.69,1210.9 1320.28,1212.38 1320.87,1214.02 1321.45,1216.67 1322.04,1214.47 1322.63,1214.53 1323.21,1217.14 1323.8,1217.19 1324.39,1217.03 1324.97,1217.22 1325.56,1219.39 1326.14,1220.48 1326.73,1223.87 1327.32,1224.79 1327.9,1224.14 1328.49,1223.92 1329.08,1223.34 1329.66,1222.98 1330.25,1226.5 1330.84,1225.87 1331.42,1225.12 1332.01,1224.79 1332.6,1225.4 1333.18,1224.77 1333.77,1224.5 1334.35,1221.7 1334.94,1221.4 1335.53,1219.67 1336.11,1219.79 1336.7,1219.66 1337.29,1219.62 1337.87,1217.27 1338.46,1218.38 1339.05,1220.76 1339.63,1220.71 1340.22,1217.9 1340.8,1217.81 1341.39,1216.25 1341.98,1217.4 1342.56,1220.69 1343.15,1222.79 1343.74,1223.44 1344.32,1221.85 1344.91,1221.27 1345.5,1222.18 1346.08,1224.31 1346.67,1220.3 1347.26,1221.28 1347.84,1221.37 1348.43,1219.92 1349.01,1217.26 1349.6,1214.87 1350.19,1215.99 1350.77,1215.91 1351.36,1214.64 1351.95,1214.95 1352.53,1213.78 1353.12,1215.19 1353.71,1215.32 1354.29,1215.3 1354.88,1215.26 1355.47,1214.15 1356.05,1214.37 1356.64,1215.69 1357.22,1220.19 1357.81,1219.97 1358.4,1220.82 1358.98,1218.24 1359.57,1214.17 1360.16,1213.32 1360.74,1213.46 1361.33,1213.75 1361.92,1211.58 1362.5,1210.8 1363.09,1211.12 1363.68,1211.17 1364.26,1211.32 1364.85,1211.55 1365.43,1214.19 1366.02,1213.01 1366.61,1213.19 1367.19,1213.46 1367.78,1213.55 1368.37,1213.78 1368.95,1213.9 1369.54,1214.19 1370.13,1215.41 1370.71,1215.58 1371.3,1214.44 1371.88,1215.47 1372.47,1215.22 1373.06,1215.27 1373.64,1214.23 1374.23,1214.22 1374.82,1214.38 1375.4,1215.65 1375.99,1213.29 1376.58,1213.57 1377.16,1213.76 1377.75,1213.6 1378.34,1212.7 1378.92,1212.96 1379.51,1210.86 1380.09,1212.22 1380.68,1212.64 1381.27,1216.44 1381.85,1215.53 1382.44,1214.44 1383.03,1210.83 1383.61,1211.25 1384.2,1212.78 1384.79,1211.8 1385.37,1212.34 1385.96,1212.65 1386.55,1214.24 1387.13,1210.77 1387.72,1209.63 1388.3,1211.18 1388.89,1213.98 1389.48,1214.26 1390.06,1213.2 1390.65,1214.33 1391.24,1215.85 1391.82,1216.93 1392.41,1218.21 1393,1219.34 1393.58,1219.29 1394.17,1221.45 1394.75,1220.15 1395.34,1221.17 1395.93,1219.99 1396.51,1220.92 1397.1,1224.28 1397.69,1225.17 1398.27,1225.8 1398.86,1225.44 1399.45,1226.32 1400.03,1225.79 1400.62,1224.15 1401.21,1224.96 1401.79,1226.85 1402.38,1226.2 1402.96,1221.05 1403.55,1219.58 1404.14,1218.02 1404.72,1214.57 1405.31,1217.14 1405.9,1216.76 1406.48,1219.06 1407.07,1217.95 1407.66,1218.85 1408.24,1218.72 1408.83,1216.35 1409.42,1219.9 1410,1218.42 1410.59,1218.14 1411.17,1219.01 1411.76,1217.39 1412.35,1216.37 1412.93,1218.68 1413.52,1218.67 1414.11,1219.68 1414.69,1217.11 1415.28,1214.94 1415.87,1215.12 1416.45,1216.54 1417.04,1216.57 1417.63,1217.61 1418.21,1217.41 1418.8,1219.63 1419.38,1219.7 1419.97,1218.36 1420.56,1217.02 1421.14,1220.61 1421.73,1220.37 1422.32,1218.65 1422.9,1217.46 1423.49,1216.32 1424.08,1217.5 1424.66,1217.49 1425.25,1218.43 1425.83,1218.46 1426.42,1214.64 1427.01,1212.33 1427.59,1213.65 1428.18,1217.51 1428.77,1217.33 1429.35,1216.26 1429.94,1218.81 1430.53,1222.37 1431.11,1219.85 1431.7,1216.16 1432.29,1219.98 1432.87,1219.89 1433.46,1219.69 1434.04,1221.07 1434.63,1225.71 1435.22,1224.31 1435.8,1226.52 1436.39,1227.32 1436.98,1228 1437.56,1228.65 1438.15,1224.5 1438.74,1224.19 1439.32,1222.4 1439.91,1220.91 1440.5,1219.23 1441.08,1218.98 1441.67,1221.17 1442.25,1221.95 1442.84,1218.08 1443.43,1220.03 1444.01,1218.74 1444.6,1217.38 1445.19,1217.72 1445.77,1217.77 1446.36,1218.67 1446.95,1218.49 1447.53,1218.49 1448.12,1220.49 1448.7,1221.59 1449.29,1221.6 1449.88,1221.26 1450.46,1223.12 1451.05,1221.8 1451.64,1221.65 1452.22,1216.54 1452.81,1216.39 1453.4,1215.3 1453.98,1216.26 1454.57,1213.97 1455.16,1216.49 1455.74,1216.34 1456.33,1216.31 1456.91,1212.8 1457.5,1211.95 1458.09,1213.49 1458.67,1213.62 1459.26,1214.87 1459.85,1213.8 1460.43,1213.91 1461.02,1217.6 1461.61,1217.25 1462.19,1218.52 1462.78,1222.16 1463.37,1221.66 1463.95,1221.62 1464.54,1218.98 1465.12,1218.77 1465.71,1218.92 1466.3,1218.79 1466.88,1215.14 1467.47,1216.43 1468.06,1217.71 1468.64,1218.93 1469.23,1218.79 1469.82,1217.5 1470.4,1217.45 1470.99,1216.33 1471.57,1215.09 1472.16,1213.88 1472.75,1213.72 1473.33,1213.75 1473.92,1213.88 1474.51,1215.57 1475.09,1211.84 1475.68,1212.17 1476.27,1212.57 1476.85,1213.98 1477.44,1212.74 1478.03,1214.36 1478.61,1214.44 1479.2,1215.82 1479.78,1214.68 1480.37,1216.03 1480.96,1219.57 1481.54,1221.67 1482.13,1221.49 1482.72,1221.22 1483.3,1221.14 1483.89,1222.04 1484.48,1226.32 1485.06,1224.48 1485.65,1225.47 1486.24,1225.96 1486.82,1224.26 1487.41,1225.04 1487.99,1223.42 1488.58,1221.79 1489.17,1221.52 1489.75,1221.18 1490.34,1218.27 1490.93,1218 1491.51,1217.8 1492.1,1219.19 1492.69,1217.76 1493.27,1218.9 1493.86,1216.19 1494.45,1217.4 1495.03,1216.08 1495.62,1216.15 1496.2,1217.39 1496.79,1214.91 1497.38,1210.14 1497.96,1209.4 1498.55,1212.36 1499.14,1212.6 1499.72,1216.42 1500.31,1215.27 1500.9,1215.4 1501.48,1215.34 1502.07,1216.93 1502.65,1215.73 1503.24,1220.38 1503.83,1220.12 1504.41,1220.05 1505,1218.68 1505.59,1217.49 1506.17,1217.57 1506.76,1216.55 1507.35,1216.58 1507.93,1216.77 1508.52,1216.54 1509.11,1215.29 1509.69,1216.58 1510.28,1216.56 1510.86,1216.72 1511.45,1216.7 1512.04,1216.62 1512.62,1218.95 1513.21,1219.96 1513.8,1220.92 1514.38,1219.42 1514.97,1221.5 1515.56,1222.23 1516.14,1221.84 1516.73,1223.94 1517.32,1222.38 1517.9,1222.01 1518.49,1222.02 1519.07,1218.33 1519.66,1217.01 1520.25,1215.84 1520.83,1215.76 1521.42,1218.19 1522.01,1216.72 1522.59,1218.02 1523.18,1220.36 1523.77,1219.03 1524.35,1217.64 1524.94,1217.61 1525.52,1217.4 1526.11,1214.78 1526.7,1214.76 1527.28,1213.52 1527.87,1215.05 1528.46,1215.13 1529.04,1211.25 1529.63,1210.52 1530.22,1209.6 1530.8,1211.14 1531.39,1212.64 1531.98,1210.57 1532.56,1208.29 1533.15,1211.14 1533.73,1211.23 1534.32,1211.41 1534.91,1214.23 1535.49,1214.59 1536.08,1218.2 1536.67,1218.26 1537.25,1215.93 1537.84,1214.58 1538.43,1217.16 1539.01,1217.41 1539.6,1217.68 1540.19,1216.32 1540.77,1215.07 1541.36,1212.56 1541.94,1212.85 1542.53,1212.83 1543.12,1214.22 1543.7,1212.94 1544.29,1210.93 1544.88,1211.4 1545.46,1210.49 1546.05,1211.2 1546.64,1211.3 1547.22,1211.59 1547.81,1211.9 1548.4,1213.73 1548.98,1212.97 1549.57,1209.67 1550.15,1206.65 1550.74,1205.72 1551.33,1206.38 1551.91,1205.69 1552.5,1206.72 1553.09,1207.41 1553.67,1207.75 1554.26,1209.36 1554.85,1208.6 1555.43,1206.73 1556.02,1208.91 1556.6,1209.29 1557.19,1209.76 1557.78,1210.1 1558.36,1213.05 1558.95,1213.27 1559.54,1213.4 1560.12,1213.3 1560.71,1215 1561.3,1217.72 1561.88,1217.73 1562.47,1218.84 1563.06,1218.92 1563.64,1220.01 1564.23,1222.38 1564.81,1222.29 1565.4,1221.98 1565.99,1222.76 1566.57,1224.95 1567.16,1224.4 1567.75,1222.82 1568.33,1222.55 1568.92,1223.54 1569.51,1223.4 1570.09,1223.43 1570.68,1222.97 1571.27,1221.8 1571.85,1224 1572.44,1223.79 1573.02,1222.15 1573.61,1220.77 1574.2,1217.95 1574.78,1219.32 1575.37,1220.47 1575.96,1217.86 1576.54,1214.26 1577.13,1215.47 1577.72,1214.25 1578.3,1214.2 1578.89,1216.73 1579.47,1217.65 1580.06,1220.11 1580.65,1221.04 1581.23,1219.66 1581.82,1219.9 1582.41,1218.59 1582.99,1217.44 1583.58,1216.01 1584.17,1217.02 1584.75,1214.54 1585.34,1214.61 1585.93,1216.92 1586.51,1215.39 1587.1,1214.48 1587.68,1215.58 1588.27,1212.95 1588.86,1215.6 1589.44,1213.13 1590.03,1213.32 1590.62,1217.19 1591.2,1216.17 1591.79,1216.03 1592.38,1217.05 1592.96,1219.4 1593.55,1219.23 1594.14,1218.87 1594.72,1217.66 1595.31,1218.85 1595.89,1218.77 1596.48,1221.04 1597.07,1219.48 1597.65,1218.14 1598.24,1218.12 1598.83,1216.8 1599.41,1214.41 1600,1214.65 1600.59,1210.98 1601.17,1211.17 1601.76,1212.67 1602.34,1216.52 1602.93,1217.68 1603.52,1216.63 1604.1,1217.82 1604.69,1217.67 1605.28,1216.42 1605.86,1217.41 1606.45,1217.38 1607.04,1218.26 1607.62,1219.22 1608.21,1214.39 1608.8,1215.6 1609.38,1216.79 1609.97,1218.11 1610.55,1217.92 1611.14,1217.69 1611.73,1216.35 1612.31,1216.51 1612.9,1215.49 1613.49,1216.72 1614.07,1216.64 1614.66,1216.52 1615.25,1212.66 1615.83,1214.04 1616.42,1213.09 1617.01,1213.1 1617.59,1214.75 1618.18,1214.95 1618.76,1215.1 1619.35,1214.27 1619.94,1212.06 1620.52,1212.52 1621.11,1211.77 1621.7,1212.36 1622.28,1212.73 1622.87,1213.12 1623.46,1213.08 1624.04,1212.06 1624.63,1213.52 1625.22,1212.24 1625.8,1211.15 1626.39,1210.4 1626.97,1210.82 1627.56,1211.01 1628.15,1212.7 1628.73,1210.39 1629.32,1210.55 1629.91,1211.07 1630.49,1211.07 1631.08,1210.36 1631.67,1210.89 1632.25,1210.01 1632.84,1210.31 1633.42,1211.97 1634.01,1213.36 1634.6,1213.33 1635.18,1213.69 1635.77,1212.28 1636.36,1211.34 1636.94,1213.79 1637.53,1217.43 1638.12,1217.35 1638.7,1217.99 1639.29,1216.71 1639.88,1219.02 1640.46,1218.66 1641.05,1218.77 1641.63,1220.07 1642.22,1219.9 1642.81,1218.36 1643.39,1218.2 1643.98,1221.93 1644.57,1222.92 1645.15,1223.75 1645.74,1223.31 1646.33,1225.32 1646.91,1225.85 1647.5,1224.21 1648.09,1223.8 1648.67,1223.39 1649.26,1223.09 1649.84,1222.62 1650.43,1221.07 1651.02,1218.36 1651.6,1218.21 1652.19,1219.11 1652.78,1218.99 1653.36,1216.51 1653.95,1216.56 1654.54,1217.6 1655.12,1215.29 1655.71,1218.15 1656.29,1219.09 1656.88,1219.88 1657.47,1222.23 1658.05,1223.08 1658.64,1224.28 1659.23,1221.67 1659.81,1221.53 1660.4,1222.54 1660.99,1222.16 1661.57,1221.96 1662.16,1221.49 1662.75,1215.28 1663.33,1214.25 1663.92,1215.53 1664.5,1215.56 1665.09,1216.73 1665.68,1215.32 1666.26,1213.19 1666.85,1213.14 1667.44,1211.98 1668.02,1210.92 1668.61,1212.42 1669.2,1211.62 1669.78,1213.14 1670.37,1215.74 1670.96,1218.26 1671.54,1218.18 1672.13,1217.89 1672.71,1217.51 1673.3,1218.94 1673.89,1217.31 1674.47,1219.75 1675.06,1221.94 1675.65,1222.8 1676.23,1222.44 1676.82,1222.25 1677.41,1221.02 1677.99,1218.72 1678.58,1219.92 1679.17,1220.95 1679.75,1220.5 1680.34,1217.72 1680.92,1216.57 1681.51,1215.33 1682.1,1215.35 1682.68,1216.58 1683.27,1215.53 1683.86,1215.38 1684.44,1217.88 1685.03,1217.72 1685.62,1217.53 1686.2,1217.5 1686.79,1214.93 1687.37,1213.92 1687.96,1214.24 1688.55,1215.67 1689.13,1216.87 1689.72,1218.08 1690.31,1216.82 1690.89,1218.06 1691.48,1221.72 1692.07,1217.94 1692.65,1216.48 1693.24,1215.26 1693.83,1212.93 1694.41,1214.11 1695,1214.13 1695.58,1214.36 1696.17,1213.2 1696.76,1213.35 1697.34,1212.32 1697.93,1212.56 1698.52,1210.22 1699.1,1210.73 1699.69,1212.04 1700.28,1212.12 1700.86,1213.52 1701.45,1213.65 1702.04,1212.59 1702.62,1211.62 1703.21,1212.11 1703.79,1212.34 1704.38,1211.67 1704.97,1210.67 1705.55,1210.91 1706.14,1212.45 1706.73,1211.6 1707.31,1213.06 1707.9,1214.75 1708.49,1214.81 1709.07,1214.08 1709.66,1215.45 1710.24,1215.85 1710.83,1216.16 1711.42,1216.2 1712,1214.86 1712.59,1214.85 1713.18,1216.32 1713.76,1213.9 1714.35,1215.72 1714.94,1217.98 1715.52,1216.99 1716.11,1220.47 1716.7,1220.15 1717.28,1218.83 1717.87,1217.52 1718.45,1217.47 1719.04,1215.02 1719.63,1216.18 1720.21,1216.3 1720.8,1215.11 1721.39,1215.15 1721.97,1215.5 1722.56,1216.83 1723.15,1215.64 1723.73,1216.66 1724.32,1214.3 1724.91,1217.96 1725.49,1220.49 1726.08,1221.51 1726.66,1221.56 1727.25,1221.3 1727.84,1220.99 1728.42,1222.06 1729.01,1221.74 1729.6,1224.95 1730.18,1224.48 1730.77,1224.88 1731.36,1224.22 1731.94,1223.77 1732.53,1222.16 1733.11,1223.07 1733.7,1220.53 1734.29,1220.48 1734.87,1220.28 1735.46,1220.04 1736.05,1217.3 1736.63,1214.66 1737.22,1216.06 1737.81,1218.5 1738.39,1219.44 1738.98,1217.87 1739.57,1218.92 1740.15,1221.08 1740.74,1219.59 1741.32,1219.69 1741.91,1220.65 1742.5,1221.44 1743.08,1222.55 1743.67,1222.08 1744.26,1224.12 1744.84,1223.66 1745.43,1224.46 1746.02,1226.47 1746.6,1224.89 1747.19,1225.45 1747.78,1227.46 1748.36,1227.01 1748.95,1225.22 1749.53,1223.66 1750.12,1226.72 1750.71,1223.8 1751.29,1220.98 1751.88,1223.26 1752.47,1221.62 1753.05,1223.84 1753.64,1223.58 1754.23,1224.24 1754.81,1223.93 1755.4,1219.95 1755.99,1219.64 1756.57,1216.21 1757.16,1216.41 1757.74,1212.78 1758.33,1213.02 1758.92,1214.52 1759.5,1214.44 1760.09,1214.52 1760.68,1214.75 1761.26,1215.04 1761.85,1215.65 1762.44,1216.96 1763.02,1216.92 1763.61,1215.68 1764.19,1215.59 1764.78,1215.48 1765.37,1213.01 1765.95,1213.18 1766.54,1211 1767.13,1212.31 1767.71,1212.25 1768.3,1212.66 1768.89,1213.81 1769.47,1215.42 1770.06,1212.95 1770.65,1215.43 1771.23,1215.31 1771.82,1215.4 1772.4,1217.9 1772.99,1217.75 1773.58,1216.25 1774.16,1216.27 1774.75,1213.91 1775.34,1210.49 1775.92,1209.63 1776.51,1207.7 1777.1,1205.89 1777.68,1206.49 1778.27,1206.84 1778.86,1205.69 1779.44,1203.81 1780.03,1205.85 1780.61,1206.35 1781.2,1203.19 1781.79,1203.86 1782.37,1201.92 1782.96,1199.23 1783.55,1201.45 1784.13,1203.35 1784.72,1206.38 1785.31,1209.35 1785.89,1209.84 1786.48,1210.04 1787.06,1208.26 1787.65,1207.6 1788.24,1209.25 1788.82,1209.78 1789.41,1211.51 1790,1211.47 1790.58,1212.84 1791.17,1210.63 1791.76,1212.23 1792.34,1214.85 1792.93,1214.96 1793.52,1213.93 1794.1,1215.32 1794.69,1214.07 1795.27,1213.15 1795.86,1213.22 1796.45,1213.29 1797.03,1216 1797.62,1217.34 1798.21,1218.46 1798.79,1219.44 1799.38,1218.14 1799.97,1222.77 1800.55,1226.09 1801.14,1221.81 1801.73,1223.99 1802.31,1222.44 1802.9,1222.43 1803.48,1219.68 1804.07,1219.55 1804.66,1217.31 1805.24,1219.67 1805.83,1218.49 1806.42,1218.42 1807,1219.66 1807.59,1219.46 1808.18,1219.33 1808.76,1219.11 1809.35,1216.57 1809.94,1217.91 1810.52,1220.13 1811.11,1221.02 1811.69,1222.1 1812.28,1220.58 1812.87,1218.17 1813.45,1218.27 1814.04,1217.8 1814.63,1219.16 1815.21,1221.42 1815.8,1221.32 1816.39,1219.78 1816.97,1222 1817.56,1221.81 1818.14,1220.35 1818.73,1219.88 1819.32,1218.4 1819.9,1220.6 1820.49,1221.64 1821.08,1222.48 1821.66,1219.62 1822.25,1219.34 1822.84,1217.78 1823.42,1219.04 1824.01,1216.73 1824.6,1213.24 1825.18,1214.67 1825.77,1214.81 1826.35,1217.72 1826.94,1217.33 1827.53,1218.42 1828.11,1219.7 1828.7,1218.26 1829.29,1218.2 1829.87,1218.3 1830.46,1218.28 1831.05,1220.64 1831.63,1221.57 1832.22,1220.23 1832.81,1217.48 1833.39,1219.89 1833.98,1217.28 1834.56,1218.3 1835.15,1215.78 1835.74,1217.12 1836.32,1217.07 1836.91,1217.14 1837.5,1216.9 1838.08,1216.75 1838.67,1214.24 1839.26,1214.23 1839.84,1215.47 1840.43,1215.73 1841.01,1211.89 1841.6,1214.53 1842.19,1213.42 1842.77,1208.88 1843.36,1209.07 1843.95,1210.81 1844.53,1212.24 1845.12,1212.29 1845.71,1212.67 1846.29,1212.84 1846.88,1210.63 1847.47,1212.25 1848.05,1212.55 1848.64,1215.44 1849.22,1215.56 1849.81,1215.79 1850.4,1214.54 1850.98,1215.95 1851.57,1213.77 1852.16,1213.89 1852.74,1213.99 1853.33,1214.16 1853.92,1213.16 1854.5,1214.35 1855.09,1215.86 1855.68,1214.65 1856.26,1215.7 1856.85,1216.82 1857.43,1216.89 1858.02,1214.53 1858.61,1216.94 1859.19,1217.01 1859.78,1215.62 1860.37,1216.86 1860.95,1217.11 1861.54,1218.25 1862.13,1219.29 1862.71,1220.24 1863.3,1223.45 1863.88,1222.97 1864.47,1221.33 1865.06,1221.04 1865.64,1220.71 1866.23,1219.32 1866.82,1219.19 1867.4,1220.5 1867.99,1222.8 1868.58,1223.75 1869.16,1220.84 1869.75,1219.22 1870.34,1218.97 1870.92,1218.79 1871.51,1217.36 1872.09,1217.4 1872.68,1212.49 1873.27,1212.53 1873.85,1211.26 1874.44,1211.39 1875.03,1211.71 1875.61,1213.22 1876.2,1213.54 1876.79,1213.86 1877.37,1215.31 1877.96,1217.99 1878.55,1216.76 1879.13,1218.91 1879.72,1217.39 1880.3,1216.26 1880.89,1214.93 1881.48,1213.82 1882.06,1216.31 1882.65,1215.13 1883.24,1215.15 1883.82,1214.03 1884.41,1214.11 1885,1214.5 1885.58,1216.97 1886.17,1215.68 1886.76,1217.01 1887.34,1217.15 1887.93,1216.95 1888.51,1218.24 1889.1,1218.11 1889.69,1220.21 1890.27,1221.16 1890.86,1220.55 1891.45,1217.85 1892.03,1220 1892.62,1220.82 1893.21,1220.54 1893.79,1221.39 1894.38,1221.15 1894.96,1219.96 1895.55,1218.37 1896.14,1215.89 1896.72,1212.21 1897.31,1213.37 1897.9,1211.1 1898.48,1212.42 1899.07,1212.62 1899.66,1210.2 1900.24,1210.42 1900.83,1209.67 1901.42,1211.23 1902,1207.78 1902.59,1208.18 1903.17,1209.73 1903.76,1210.19 1904.35,1209.36 1904.93,1211.03 1905.52,1214.78 1906.11,1215.19 1906.69,1216.46 1907.28,1214.09 1907.87,1213.2 1908.45,1211.98 1909.04,1211.98 1909.63,1212.2 1910.21,1212.34 1910.8,1215.84 1911.38,1215.92 1911.97,1218.47 1912.56,1219.74 1913.14,1215.93 1913.73,1215.87 1914.32,1215.78 1914.9,1218.13 1915.49,1218.11 1916.08,1218.21 1916.66,1215.31 1917.25,1214 1917.83,1212.98 1918.42,1211.86 1919.01,1212.29 1919.59,1211.34 1920.18,1207.04 1920.77,1205 1921.35,1205.68 1921.94,1207.4 1922.53,1206.76 1923.11,1208.63 1923.7,1210.4 1924.29,1210.88 1924.87,1210.88 1925.46,1213.66 1926.04,1214.73 1926.63,1214.9 1927.22,1213.93 1927.8,1211.51 1928.39,1212.97 1928.98,1213.19 1929.56,1213.69 1930.15,1213.7 1930.74,1211.35 1931.32,1210.47 1931.91,1210.75 1932.5,1209.73 1933.08,1209.1 1933.67,1210.72 1934.25,1210.92 1934.84,1210.09 1935.43,1213.09 1936.01,1213.57 1936.6,1215.15 1937.19,1217.63 1937.77,1218.87 1938.36,1218.71 1938.95,1219.6 1939.53,1219.56 1940.12,1219.49 1940.71,1219.22 1941.29,1219.08 1941.88,1217.59 1942.46,1219.65 1943.05,1218.46 1943.64,1219.49 1944.22,1220.52 1944.81,1220.48 1945.4,1224.03 1945.98,1224.79 1946.57,1224.46 1947.16,1221.91 1947.74,1221.64 1948.33,1220.36 1948.91,1220.34 1949.5,1217.76 1950.09,1218.82 1950.67,1220.25 1951.26,1217.65 1951.85,1217.78 1952.43,1216.39 1953.02,1217.53 1953.61,1217.3 1954.19,1218.41 1954.78,1215.94 1955.37,1215.75 1955.95,1214.41 1956.54,1213.26 1957.12,1212.16 1957.71,1212.38 1958.3,1212.79 1958.88,1212.89 1959.47,1211.8 1960.06,1210.92 1960.64,1212.44 1961.23,1215.24 1961.82,1216.49 1962.4,1216.59 1962.99,1215.37 1963.58,1210.72 1964.16,1213.4 1964.75,1217.39 1965.33,1218.46 1965.92,1218.12 1966.51,1219.34 1967.09,1220.6 1967.68,1220.62 1968.27,1220.51 1968.85,1219.11 1969.44,1219.26 1970.03,1221.76 1970.61,1223.83 1971.2,1223.32 1971.78,1224.19 1972.37,1223.61 1972.96,1223.13 1973.54,1221.51 1974.13,1222.36 1974.72,1220.86 1975.3,1221.9 1975.89,1220.2 1976.48,1221.38 1977.06,1219.89 1977.65,1219.58 1978.24,1220.52 1978.82,1219.15 1979.41,1219.26 1979.99,1220.42 1980.58,1222.46 1981.17,1223.4 1981.75,1219.4 1982.34,1217.94 1982.93,1216.62 1983.51,1219.97 1984.1,1220.78 1984.69,1220.76 1985.27,1220.61 1985.86,1219.04 1986.45,1216.33 1987.03,1218.73 1987.62,1218.79 1988.2,1219.63 1988.79,1221 1989.38,1219.41 1989.96,1217.81 1990.55,1220.02 1991.14,1219.93 1991.72,1219.69 1992.31,1220.64 1992.9,1218.05 1993.48,1218.24 1994.07,1218.15 1994.65,1219.54 1995.24,1218.17 1995.83,1218.9 1996.41,1218.86 1997,1217.51 1997.59,1216.33 1998.17,1216.35 1998.76,1217.6 1999.35,1217.66 1999.93,1215.3 2000.52,1215.53 2001.11,1216.69 2001.69,1216.37 2002.28,1218.42 2002.86,1217.24 2003.45,1217.04 2004.04,1218.44 2004.62,1220.81 2005.21,1220.31 2005.8,1218.83 2006.38,1219.92 2006.97,1219.57 2007.56,1219.55 2008.14,1219.33 2008.73,1219.25 2009.32,1217.99 2009.9,1218.22 2010.49,1218.13 2011.07,1215.4 2011.66,1214.31 2012.25,1214.53 2012.83,1213.45 2013.42,1211.45 2014.01,1211.69 2014.59,1213.14 2015.18,1214.31 2015.77,1214.43 2016.35,1215.74 2016.94,1215.98 2017.53,1217.22 2018.11,1216.97 2018.7,1217.99 2019.28,1218.03 2019.87,1219.05 2020.46,1217.79 2021.04,1216.64 2021.63,1216.56 2022.22,1216.64 2022.8,1214.27 2023.39,1214.46 2023.98,1218.18 2024.56,1216.96 2025.15,1216.96 2025.73,1216.76 2026.32,1215.71 2026.91,1216.84 2027.49,1215.46 2028.08,1214.61 2028.67,1213.51 2029.25,1214.78 2029.84,1213.29 2030.43,1214.91 2031.01,1213.9 2031.6,1214.32 2032.19,1217.94 2032.77,1219.35 2033.36,1220.38 2033.94,1218.61 2034.53,1220.75 2035.12,1221.7 2035.7,1220.47 2036.29,1218.97 2036.88,1217.45 2037.46,1216.23 2038.05,1215.1 2038.64,1214.05 2039.22,1212.76 2039.81,1213.95 2040.4,1212.98 2040.98,1212.01 2041.57,1210.03 2042.15,1210.29 2042.74,1207.2 2043.33,1208.79 2043.91,1208.27 2044.5,1208.67 2045.09,1210.08 2045.67,1211.46 2046.26,1208.09 2046.85,1209.55 2047.43,1208.76 2048.02,1208.08 2048.6,1210.82 2049.19,1208.55 2049.78,1210.06 2050.36,1211.62 2050.95,1210.71 2051.54,1211 2052.12,1214.92 2052.71,1213.96 2053.3,1214.19 2053.88,1216.67 2054.47,1215.31 2055.06,1216.42 2055.64,1217.76 2056.23,1218.84 2056.81,1218.78 2057.4,1218.59 2057.99,1217.36 2058.57,1217.34 2059.16,1216.99 2059.75,1216.88 2060.33,1215.62 2060.92,1217.05 2061.51,1216.91 2062.09,1215.8 2062.68,1215.88 2063.27,1215.86 2063.85,1217.22 2064.44,1219.61 2065.02,1220.8 2065.61,1222.02 2066.2,1220.7 2066.78,1224.01 2067.37,1224.71 2067.96,1223.24 2068.54,1223.15 2069.13,1221.88 2069.72,1222.8 2070.3,1221.25 2070.89,1222.46 2071.48,1224.6 2072.06,1226.66 2072.65,1226.32 2073.23,1226.82 2073.82,1223.87 2074.41,1221.86 2074.99,1220.59 2075.58,1220.34 2076.17,1220.23 2076.75,1222.16 2077.34,1219.41 2077.93,1219.35 2078.51,1221.74 2079.1,1220.34 2079.68,1220.27 2080.27,1221.23 2080.86,1221.2 2081.44,1221.13 2082.03,1220.88 2082.62,1220.56 2083.2,1221.69 2083.79,1221.41 2084.38,1222.12 2084.96,1221.82 2085.55,1221.38 2086.14,1220.02 2086.72,1220.03 2087.31,1217.34 2087.89,1218.59 2088.48,1217.47 2089.07,1212.52 2089.65,1211.63 2090.24,1210.65 2090.83,1209.92 2091.41,1208.87 2092,1211.66 2092.59,1212.07 2093.17,1211.07 2093.76,1211.31 2094.35,1211.59 2094.93,1213.03 2095.52,1212.25 2096.1,1212.7 2096.69,1209.41 2097.28,1207.47 2097.86,1208.07 2098.45,1208.6 2099.04,1207.88 2099.62,1207.4 2100.21,1209.04 2100.8,1210.75 2101.38,1213.35 2101.97,1212.37 2102.55,1212.43 2103.14,1211.35 2103.73,1211.73 2104.31,1212.14 2104.9,1211.24 2105.49,1212.94 2106.07,1213.09 2106.66,1215.67 2107.25,1216.75 2107.83,1216.9 2108.42,1220.77 2109.01,1221.67 2109.59,1219.05 2110.18,1221.49 2110.76,1221.34 2111.35,1221.04 2111.94,1219.66 2112.52,1219.53 2113.11,1219.35 2113.7,1218.07 2114.28,1218.27 2114.87,1216.88 2115.46,1214.67 2116.04,1213.6 2116.63,1213.86 2117.22,1214.19 2117.8,1213.42 2118.39,1209.97 2118.97,1210.41 2119.56,1210.33 2120.15,1213.15 2120.73,1213.03 2121.32,1212.12 2121.91,1212.3 2122.49,1211.26 2123.08,1210.32 2123.67,1209.67 2124.25,1211.18 2124.84,1209.13 2125.42,1209.56 2126.01,1209.66 2126.6,1210.23 2127.18,1210.77 2127.77,1212.29 2128.36,1212.42 2128.94,1214 2129.53,1213.9 2130.12,1215.14 2130.7,1215.35 2131.29,1213.29 2131.88,1214.62 2132.46,1215.92 2133.05,1214.82 2133.63,1214.8 2134.22,1215.06 2134.81,1215.21 2135.39,1213.8 2135.98,1212.63 2136.57,1213.05 2137.15,1213.44 2137.74,1212.31 2138.33,1213.59 2138.91,1212.48 2139.5,1212.74 2140.09,1213 2140.67,1213.39 2141.26,1213.7 2141.84,1216.03 2142.43,1214.75 2143.02,1215.93 2143.6,1215.8 2144.19,1217.22 2144.78,1218.44 2145.36,1217.08 2145.95,1215.89 2146.54,1217.01 2147.12,1215.89 2147.71,1218.36 2148.3,1217.33 2148.88,1216.22 2149.47,1215.03 2150.05,1216.25 2150.64,1216.1 2151.23,1216.04 2151.81,1216.88 2152.4,1215.28 2152.99,1215.45 2153.57,1215.51 2154.16,1216.82 2154.75,1216.9 2155.33,1219.5 2155.92,1224.28 2156.5,1221.55 2157.09,1218.79 2157.68,1216.55 2158.26,1215.56 \"/>\n<path clip-path=\"url(#clip762)\" d=\"M986.025 1217.06 L986.612 1217.06 L987.198 1217.06 L987.785 1217.06 L988.371 1217.06 L988.957 1217.06 L989.544 1217.06 L990.13 1217.06 L990.717 1217.06 L991.303 1217.06 L991.889 1217.06 L992.476 1217.06 L993.062 1217.06 L993.649 1217.06 L994.235 1217.06 L994.822 1217.06 L995.408 1217.06 L995.994 1217.06 L996.581 1217.06 L997.167 1217.06 L997.754 1217.06 L998.34 1217.06 L998.926 1217.06 L999.513 1217.06 L1000.1 1217.06 L1000.69 1217.06 L1001.27 1217.06 L1001.86 1217.06 L1002.44 1217.06 L1003.03 1217.06 L1003.62 1217.06 L1004.2 1217.06 L1004.79 1217.06 L1005.38 1217.06 L1005.96 1217.06 L1006.55 1217.06 L1007.14 1217.06 L1007.72 1217.06 L1008.31 1217.06 L1008.9 1217.06 L1009.48 1217.06 L1010.07 1217.06 L1010.65 1217.06 L1011.24 1217.06 L1011.83 1217.06 L1012.41 1217.06 L1013 1217.06 L1013.59 1217.06 L1014.17 1217.06 L1014.76 1217.06 L1015.35 1217.06 L1015.93 1217.06 L1016.52 1217.06 L1017.11 1217.06 L1017.69 1217.06 L1018.28 1217.06 L1018.86 1217.06 L1019.45 1217.06 L1020.04 1217.06 L1020.62 1217.06 L1021.21 1217.06 L1021.8 1217.06 L1022.38 1217.06 L1022.97 1217.06 L1023.56 1217.06 L1024.14 1217.06 L1024.73 1217.06 L1025.32 1217.06 L1025.9 1217.06 L1026.49 1217.06 L1027.07 1217.06 L1027.66 1217.06 L1028.25 1217.06 L1028.83 1217.06 L1029.42 1217.06 L1030.01 1217.06 L1030.59 1217.06 L1031.18 1217.06 L1031.77 1217.06 L1032.35 1217.06 L1032.94 1217.06 L1033.52 1217.06 L1034.11 1217.06 L1034.7 1217.06 L1035.28 1217.06 L1035.87 1217.06 L1036.46 1217.06 L1037.04 1217.06 L1037.63 1217.06 L1038.22 1217.06 L1038.8 1217.06 L1039.39 1217.06 L1039.98 1217.06 L1040.56 1217.06 L1041.15 1217.06 L1041.73 1217.06 L1042.32 1217.06 L1042.91 1217.06 L1043.49 1217.06 L1044.08 1217.06 L1044.67 1217.06 L1045.25 1217.06 L1045.84 1217.06 L1046.43 1217.06 L1047.01 1217.06 L1047.6 1217.06 L1048.19 1217.06 L1048.77 1217.06 L1049.36 1217.06 L1049.94 1217.06 L1050.53 1217.06 L1051.12 1217.06 L1051.7 1217.06 L1052.29 1217.06 L1052.88 1217.06 L1053.46 1217.06 L1054.05 1217.06 L1054.64 1217.06 L1055.22 1217.06 L1055.81 1217.06 L1056.39 1217.06 L1056.98 1217.06 L1057.57 1217.06 L1058.15 1217.06 L1058.74 1217.06 L1059.33 1217.06 L1059.91 1217.06 L1060.5 1217.06 L1061.09 1217.06 L1061.67 1217.06 L1062.26 1217.06 L1062.85 1217.06 L1063.43 1217.06 L1064.02 1217.06 L1064.6 1217.06 L1065.19 1217.06 L1065.78 1217.06 L1066.36 1217.06 L1066.95 1217.06 L1067.54 1217.06 L1068.12 1217.06 L1068.71 1217.06 L1069.3 1217.06 L1069.88 1217.06 L1070.47 1217.06 L1071.06 1217.06 L1071.64 1217.06 L1072.23 1217.06 L1072.81 1217.06 L1073.4 1217.06 L1073.99 1217.06 L1074.57 1217.06 L1075.16 1217.06 L1075.75 1217.06 L1076.33 1217.06 L1076.92 1217.06 L1077.51 1217.06 L1078.09 1217.06 L1078.68 1217.06 L1079.26 1217.06 L1079.85 1217.06 L1080.44 1217.06 L1081.02 1217.06 L1081.61 1217.06 L1082.2 1217.06 L1082.78 1217.06 L1083.37 1217.06 L1083.96 1217.06 L1084.54 1217.06 L1085.13 1217.06 L1085.72 1217.06 L1086.3 1217.06 L1086.89 1217.06 L1087.47 1217.06 L1088.06 1217.06 L1088.65 1217.06 L1089.23 1217.06 L1089.82 1217.06 L1090.41 1217.06 L1090.99 1217.06 L1091.58 1217.06 L1092.17 1217.06 L1092.75 1217.06 L1093.34 1217.06 L1093.93 1217.06 L1094.51 1217.06 L1095.1 1217.06 L1095.68 1217.06 L1096.27 1217.06 L1096.86 1217.06 L1097.44 1217.06 L1098.03 1217.06 L1098.62 1217.06 L1099.2 1217.06 L1099.79 1217.06 L1100.38 1217.06 L1100.96 1217.06 L1101.55 1217.06 L1102.14 1217.06 L1102.72 1217.06 L1103.31 1217.06 L1103.89 1217.06 L1104.48 1217.06 L1105.07 1217.06 L1105.65 1217.06 L1106.24 1217.06 L1106.83 1217.06 L1107.41 1217.06 L1108 1217.06 L1108.59 1217.06 L1109.17 1217.06 L1109.76 1217.06 L1110.34 1217.06 L1110.93 1217.06 L1111.52 1217.06 L1112.1 1217.06 L1112.69 1217.06 L1113.28 1217.06 L1113.86 1217.06 L1114.45 1217.06 L1115.04 1217.06 L1115.62 1217.06 L1116.21 1217.06 L1116.8 1217.06 L1117.38 1217.06 L1117.97 1217.06 L1118.55 1217.06 L1119.14 1217.06 L1119.73 1217.06 L1120.31 1217.06 L1120.9 1217.06 L1121.49 1217.06 L1122.07 1217.06 L1122.66 1217.06 L1123.25 1217.06 L1123.83 1217.06 L1124.42 1217.06 L1125.01 1217.06 L1125.59 1217.06 L1126.18 1217.06 L1126.76 1217.06 L1127.35 1217.06 L1127.94 1217.06 L1128.52 1217.06 L1129.11 1217.06 L1129.7 1217.06 L1130.28 1217.06 L1130.87 1217.06 L1131.46 1217.06 L1132.04 1217.06 L1132.63 1217.06 L1133.21 1217.06 L1133.8 1217.06 L1134.39 1217.06 L1134.97 1217.06 L1135.56 1217.06 L1136.15 1217.06 L1136.73 1217.06 L1137.32 1217.06 L1137.91 1217.06 L1138.49 1217.06 L1139.08 1217.06 L1139.67 1217.06 L1140.25 1217.06 L1140.84 1217.06 L1141.42 1217.06 L1142.01 1217.06 L1142.6 1217.06 L1143.18 1217.06 L1143.77 1217.06 L1144.36 1217.06 L1144.94 1217.06 L1145.53 1217.06 L1146.12 1217.06 L1146.7 1217.06 L1147.29 1217.06 L1147.88 1217.06 L1148.46 1217.06 L1149.05 1217.06 L1149.63 1217.06 L1150.22 1217.06 L1150.81 1217.06 L1151.39 1217.06 L1151.98 1217.06 L1152.57 1217.06 L1153.15 1217.06 L1153.74 1217.06 L1154.33 1217.06 L1154.91 1217.06 L1155.5 1217.06 L1156.09 1217.06 L1156.67 1217.06 L1157.26 1217.06 L1157.84 1217.06 L1158.43 1217.06 L1159.02 1217.06 L1159.6 1217.06 L1160.19 1217.06 L1160.78 1217.06 L1161.36 1217.06 L1161.95 1217.06 L1162.54 1217.06 L1163.12 1217.06 L1163.71 1217.06 L1164.29 1217.06 L1164.88 1217.06 L1165.47 1217.06 L1166.05 1217.06 L1166.64 1217.06 L1167.23 1217.06 L1167.81 1217.06 L1168.4 1217.06 L1168.99 1217.06 L1169.57 1217.06 L1170.16 1217.06 L1170.75 1217.06 L1171.33 1217.06 L1171.92 1217.06 L1172.5 1217.06 L1173.09 1217.06 L1173.68 1217.06 L1174.26 1217.06 L1174.85 1217.06 L1175.44 1217.06 L1176.02 1217.06 L1176.61 1217.06 L1177.2 1217.06 L1177.78 1217.06 L1178.37 1217.06 L1178.96 1217.06 L1179.54 1217.06 L1180.13 1217.06 L1180.71 1217.06 L1181.3 1217.06 L1181.89 1217.06 L1182.47 1217.06 L1183.06 1217.06 L1183.65 1217.06 L1184.23 1217.06 L1184.82 1217.06 L1185.41 1217.06 L1185.99 1217.06 L1186.58 1217.06 L1187.16 1217.06 L1187.75 1217.06 L1188.34 1217.06 L1188.92 1217.06 L1189.51 1217.06 L1190.1 1217.06 L1190.68 1217.06 L1191.27 1217.06 L1191.86 1217.06 L1192.44 1217.06 L1193.03 1217.06 L1193.62 1217.06 L1194.2 1217.06 L1194.79 1217.06 L1195.37 1217.06 L1195.96 1217.06 L1196.55 1217.06 L1197.13 1217.06 L1197.72 1217.06 L1198.31 1217.06 L1198.89 1217.06 L1199.48 1217.06 L1200.07 1217.06 L1200.65 1217.06 L1201.24 1217.06 L1201.83 1217.06 L1202.41 1217.06 L1203 1217.06 L1203.58 1217.06 L1204.17 1217.06 L1204.76 1217.06 L1205.34 1217.06 L1205.93 1217.06 L1206.52 1217.06 L1207.1 1217.06 L1207.69 1217.06 L1208.28 1217.06 L1208.86 1217.06 L1209.45 1217.06 L1210.03 1217.06 L1210.62 1217.06 L1211.21 1217.06 L1211.79 1217.06 L1212.38 1217.06 L1212.97 1217.06 L1213.55 1217.06 L1214.14 1217.06 L1214.73 1217.06 L1215.31 1217.06 L1215.9 1217.06 L1216.49 1217.06 L1217.07 1217.06 L1217.66 1217.06 L1218.24 1217.06 L1218.83 1217.06 L1219.42 1217.06 L1220 1217.06 L1220.59 1217.06 L1221.18 1217.06 L1221.76 1217.06 L1222.35 1217.06 L1222.94 1217.06 L1223.52 1217.06 L1224.11 1217.06 L1224.7 1217.06 L1225.28 1217.06 L1225.87 1217.06 L1226.45 1217.06 L1227.04 1217.06 L1227.63 1217.06 L1228.21 1217.06 L1228.8 1217.06 L1229.39 1217.06 L1229.97 1217.06 L1230.56 1217.06 L1231.15 1217.06 L1231.73 1217.06 L1232.32 1217.06 L1232.91 1217.06 L1233.49 1217.06 L1234.08 1217.06 L1234.66 1217.06 L1235.25 1217.06 L1235.84 1217.06 L1236.42 1217.06 L1237.01 1217.06 L1237.6 1217.06 L1238.18 1217.06 L1238.77 1217.06 L1239.36 1217.06 L1239.94 1217.06 L1240.53 1217.06 L1241.11 1217.06 L1241.7 1217.06 L1242.29 1217.06 L1242.87 1217.06 L1243.46 1217.06 L1244.05 1217.06 L1244.63 1217.06 L1245.22 1217.06 L1245.81 1217.06 L1246.39 1217.06 L1246.98 1217.06 L1247.57 1217.06 L1248.15 1217.06 L1248.74 1217.06 L1249.32 1217.06 L1249.91 1217.06 L1250.5 1217.06 L1251.08 1217.06 L1251.67 1217.06 L1252.26 1217.06 L1252.84 1217.06 L1253.43 1217.06 L1254.02 1217.06 L1254.6 1217.06 L1255.19 1217.06 L1255.78 1217.06 L1256.36 1217.06 L1256.95 1217.06 L1257.53 1217.06 L1258.12 1217.06 L1258.71 1217.06 L1259.29 1217.06 L1259.88 1217.06 L1260.47 1217.06 L1261.05 1217.06 L1261.64 1217.06 L1262.23 1217.06 L1262.81 1217.06 L1263.4 1217.06 L1263.98 1217.06 L1264.57 1217.06 L1265.16 1217.06 L1265.74 1217.06 L1266.33 1217.06 L1266.92 1217.06 L1267.5 1217.06 L1268.09 1217.06 L1268.68 1217.06 L1269.26 1217.06 L1269.85 1217.06 L1270.44 1217.06 L1271.02 1217.06 L1271.61 1217.06 L1272.19 1217.06 L1272.78 1217.06 L1273.37 1217.06 L1273.95 1217.06 L1274.54 1217.06 L1275.13 1217.06 L1275.71 1217.06 L1276.3 1217.06 L1276.89 1217.06 L1277.47 1217.06 L1278.06 1217.06 L1278.65 1217.06 L1279.23 1217.06 L1279.82 1217.06 L1280.4 1217.06 L1280.99 1217.06 L1281.58 1217.06 L1282.16 1217.06 L1282.75 1217.06 L1283.34 1217.06 L1283.92 1217.06 L1284.51 1217.06 L1285.1 1217.06 L1285.68 1217.06 L1286.27 1217.06 L1286.86 1217.06 L1287.44 1217.06 L1288.03 1217.06 L1288.61 1217.06 L1289.2 1217.06 L1289.79 1217.06 L1290.37 1217.06 L1290.96 1217.06 L1291.55 1217.06 L1292.13 1217.06 L1292.72 1217.06 L1293.31 1217.06 L1293.89 1217.06 L1294.48 1217.06 L1295.06 1217.06 L1295.65 1217.06 L1296.24 1217.06 L1296.82 1217.06 L1297.41 1217.06 L1298 1217.06 L1298.58 1217.06 L1299.17 1217.06 L1299.76 1217.06 L1300.34 1217.06 L1300.93 1217.06 L1301.52 1217.06 L1302.1 1217.06 L1302.69 1217.06 L1303.27 1217.06 L1303.86 1217.06 L1304.45 1217.06 L1305.03 1217.06 L1305.62 1217.06 L1306.21 1217.06 L1306.79 1217.06 L1307.38 1217.06 L1307.97 1217.06 L1308.55 1217.06 L1309.14 1217.06 L1309.73 1217.06 L1310.31 1217.06 L1310.9 1217.06 L1311.48 1217.06 L1312.07 1217.06 L1312.66 1217.06 L1313.24 1217.06 L1313.83 1217.06 L1314.42 1217.06 L1315 1217.06 L1315.59 1217.06 L1316.18 1217.06 L1316.76 1217.06 L1317.35 1217.06 L1317.93 1217.06 L1318.52 1217.06 L1319.11 1217.06 L1319.69 1217.06 L1320.28 1217.06 L1320.87 1217.06 L1321.45 1217.06 L1322.04 1217.06 L1322.63 1217.06 L1323.21 1217.06 L1323.8 1217.06 L1324.39 1217.06 L1324.97 1217.06 L1325.56 1217.06 L1326.14 1217.06 L1326.73 1217.06 L1327.32 1217.06 L1327.9 1217.06 L1328.49 1217.06 L1329.08 1217.06 L1329.66 1217.06 L1330.25 1217.06 L1330.84 1217.06 L1331.42 1217.06 L1332.01 1217.06 L1332.6 1217.06 L1333.18 1217.06 L1333.77 1217.06 L1334.35 1217.06 L1334.94 1217.06 L1335.53 1217.06 L1336.11 1217.06 L1336.7 1217.06 L1337.29 1217.06 L1337.87 1217.06 L1338.46 1217.06 L1339.05 1217.06 L1339.63 1217.06 L1340.22 1217.06 L1340.8 1217.06 L1341.39 1217.06 L1341.98 1217.06 L1342.56 1217.06 L1343.15 1217.06 L1343.74 1217.06 L1344.32 1217.06 L1344.91 1217.06 L1345.5 1217.06 L1346.08 1217.06 L1346.67 1217.06 L1347.26 1217.06 L1347.84 1217.06 L1348.43 1217.06 L1349.01 1217.06 L1349.6 1217.06 L1350.19 1217.06 L1350.77 1217.06 L1351.36 1217.06 L1351.95 1217.06 L1352.53 1217.06 L1353.12 1217.06 L1353.71 1217.06 L1354.29 1217.06 L1354.88 1217.06 L1355.47 1217.06 L1356.05 1217.06 L1356.64 1217.06 L1357.22 1217.06 L1357.81 1217.06 L1358.4 1217.06 L1358.98 1217.06 L1359.57 1217.06 L1360.16 1217.06 L1360.74 1217.06 L1361.33 1217.06 L1361.92 1217.06 L1362.5 1217.06 L1363.09 1217.06 L1363.68 1217.06 L1364.26 1217.06 L1364.85 1217.06 L1365.43 1217.06 L1366.02 1217.06 L1366.61 1217.06 L1367.19 1217.06 L1367.78 1217.06 L1368.37 1217.06 L1368.95 1217.06 L1369.54 1217.06 L1370.13 1217.06 L1370.71 1217.06 L1371.3 1217.06 L1371.88 1217.06 L1372.47 1217.06 L1373.06 1217.06 L1373.64 1217.06 L1374.23 1217.06 L1374.82 1217.06 L1375.4 1217.06 L1375.99 1217.06 L1376.58 1217.06 L1377.16 1217.06 L1377.75 1217.06 L1378.34 1217.06 L1378.92 1217.06 L1379.51 1217.06 L1380.09 1217.06 L1380.68 1217.06 L1381.27 1217.06 L1381.85 1217.06 L1382.44 1217.06 L1383.03 1217.06 L1383.61 1217.06 L1384.2 1217.06 L1384.79 1217.06 L1385.37 1217.06 L1385.96 1217.06 L1386.55 1217.06 L1387.13 1217.06 L1387.72 1217.06 L1388.3 1217.06 L1388.89 1217.06 L1389.48 1217.06 L1390.06 1217.06 L1390.65 1217.06 L1391.24 1217.06 L1391.82 1217.06 L1392.41 1217.06 L1393 1217.06 L1393.58 1217.06 L1394.17 1217.06 L1394.75 1217.06 L1395.34 1217.06 L1395.93 1217.06 L1396.51 1217.06 L1397.1 1217.06 L1397.69 1217.06 L1398.27 1217.06 L1398.86 1217.06 L1399.45 1217.06 L1400.03 1217.06 L1400.62 1217.06 L1401.21 1217.06 L1401.79 1217.06 L1402.38 1217.06 L1402.96 1217.06 L1403.55 1217.06 L1404.14 1217.06 L1404.72 1217.06 L1405.31 1217.06 L1405.9 1217.06 L1406.48 1217.06 L1407.07 1217.06 L1407.66 1217.06 L1408.24 1217.06 L1408.83 1217.06 L1409.42 1217.06 L1410 1217.06 L1410.59 1217.06 L1411.17 1217.06 L1411.76 1217.06 L1412.35 1217.06 L1412.93 1217.06 L1413.52 1217.06 L1414.11 1217.06 L1414.69 1217.06 L1415.28 1217.06 L1415.87 1217.06 L1416.45 1217.06 L1417.04 1217.06 L1417.63 1217.06 L1418.21 1217.06 L1418.8 1217.06 L1419.38 1217.06 L1419.97 1217.06 L1420.56 1217.06 L1421.14 1217.06 L1421.73 1217.06 L1422.32 1217.06 L1422.9 1217.06 L1423.49 1217.06 L1424.08 1217.06 L1424.66 1217.06 L1425.25 1217.06 L1425.83 1217.06 L1426.42 1217.06 L1427.01 1217.06 L1427.59 1217.06 L1428.18 1217.06 L1428.77 1217.06 L1429.35 1217.06 L1429.94 1217.06 L1430.53 1217.06 L1431.11 1217.06 L1431.7 1217.06 L1432.29 1217.06 L1432.87 1217.06 L1433.46 1217.06 L1434.04 1217.06 L1434.63 1217.06 L1435.22 1217.06 L1435.8 1217.06 L1436.39 1217.06 L1436.98 1217.06 L1437.56 1217.06 L1438.15 1217.06 L1438.74 1217.06 L1439.32 1217.06 L1439.91 1217.06 L1440.5 1217.06 L1441.08 1217.06 L1441.67 1217.06 L1442.25 1217.06 L1442.84 1217.06 L1443.43 1217.06 L1444.01 1217.06 L1444.6 1217.06 L1445.19 1217.06 L1445.77 1217.06 L1446.36 1217.06 L1446.95 1217.06 L1447.53 1217.06 L1448.12 1217.06 L1448.7 1217.06 L1449.29 1217.06 L1449.88 1217.06 L1450.46 1217.06 L1451.05 1217.06 L1451.64 1217.06 L1452.22 1217.06 L1452.81 1217.06 L1453.4 1217.06 L1453.98 1217.06 L1454.57 1217.06 L1455.16 1217.06 L1455.74 1217.06 L1456.33 1217.06 L1456.91 1217.06 L1457.5 1217.06 L1458.09 1217.06 L1458.67 1217.06 L1459.26 1217.06 L1459.85 1217.06 L1460.43 1217.06 L1461.02 1217.06 L1461.61 1217.06 L1462.19 1217.06 L1462.78 1217.06 L1463.37 1217.06 L1463.95 1217.06 L1464.54 1217.06 L1465.12 1217.06 L1465.71 1217.06 L1466.3 1217.06 L1466.88 1217.06 L1467.47 1217.06 L1468.06 1217.06 L1468.64 1217.06 L1469.23 1217.06 L1469.82 1217.06 L1470.4 1217.06 L1470.99 1217.06 L1471.57 1217.06 L1472.16 1217.06 L1472.75 1217.06 L1473.33 1217.06 L1473.92 1217.06 L1474.51 1217.06 L1475.09 1217.06 L1475.68 1217.06 L1476.27 1217.06 L1476.85 1217.06 L1477.44 1217.06 L1478.03 1217.06 L1478.61 1217.06 L1479.2 1217.06 L1479.78 1217.06 L1480.37 1217.06 L1480.96 1217.06 L1481.54 1217.06 L1482.13 1217.06 L1482.72 1217.06 L1483.3 1217.06 L1483.89 1217.06 L1484.48 1217.06 L1485.06 1217.06 L1485.65 1217.06 L1486.24 1217.06 L1486.82 1217.06 L1487.41 1217.06 L1487.99 1217.06 L1488.58 1217.06 L1489.17 1217.06 L1489.75 1217.06 L1490.34 1217.06 L1490.93 1217.06 L1491.51 1217.06 L1492.1 1217.06 L1492.69 1217.06 L1493.27 1217.06 L1493.86 1217.06 L1494.45 1217.06 L1495.03 1217.06 L1495.62 1217.06 L1496.2 1217.06 L1496.79 1217.06 L1497.38 1217.06 L1497.96 1217.06 L1498.55 1217.06 L1499.14 1217.06 L1499.72 1217.06 L1500.31 1217.06 L1500.9 1217.06 L1501.48 1217.06 L1502.07 1217.06 L1502.65 1217.06 L1503.24 1217.06 L1503.83 1217.06 L1504.41 1217.06 L1505 1217.06 L1505.59 1217.06 L1506.17 1217.06 L1506.76 1217.06 L1507.35 1217.06 L1507.93 1217.06 L1508.52 1217.06 L1509.11 1217.06 L1509.69 1217.06 L1510.28 1217.06 L1510.86 1217.06 L1511.45 1217.06 L1512.04 1217.06 L1512.62 1217.06 L1513.21 1217.06 L1513.8 1217.06 L1514.38 1217.06 L1514.97 1217.06 L1515.56 1217.06 L1516.14 1217.06 L1516.73 1217.06 L1517.32 1217.06 L1517.9 1217.06 L1518.49 1217.06 L1519.07 1217.06 L1519.66 1217.06 L1520.25 1217.06 L1520.83 1217.06 L1521.42 1217.06 L1522.01 1217.06 L1522.59 1217.06 L1523.18 1217.06 L1523.77 1217.06 L1524.35 1217.06 L1524.94 1217.06 L1525.52 1217.06 L1526.11 1217.06 L1526.7 1217.06 L1527.28 1217.06 L1527.87 1217.06 L1528.46 1217.06 L1529.04 1217.06 L1529.63 1217.06 L1530.22 1217.06 L1530.8 1217.06 L1531.39 1217.06 L1531.98 1217.06 L1532.56 1217.06 L1533.15 1217.06 L1533.73 1217.06 L1534.32 1217.06 L1534.91 1217.06 L1535.49 1217.06 L1536.08 1217.06 L1536.67 1217.06 L1537.25 1217.06 L1537.84 1217.06 L1538.43 1217.06 L1539.01 1217.06 L1539.6 1217.06 L1540.19 1217.06 L1540.77 1217.06 L1541.36 1217.06 L1541.94 1217.06 L1542.53 1217.06 L1543.12 1217.06 L1543.7 1217.06 L1544.29 1217.06 L1544.88 1217.06 L1545.46 1217.06 L1546.05 1217.06 L1546.64 1217.06 L1547.22 1217.06 L1547.81 1217.06 L1548.4 1217.06 L1548.98 1217.06 L1549.57 1217.06 L1550.15 1217.06 L1550.74 1217.06 L1551.33 1217.06 L1551.91 1217.06 L1552.5 1217.06 L1553.09 1217.06 L1553.67 1217.06 L1554.26 1217.06 L1554.85 1217.06 L1555.43 1217.06 L1556.02 1217.06 L1556.6 1217.06 L1557.19 1217.06 L1557.78 1217.06 L1558.36 1217.06 L1558.95 1217.06 L1559.54 1217.06 L1560.12 1217.06 L1560.71 1217.06 L1561.3 1217.06 L1561.88 1217.06 L1562.47 1217.06 L1563.06 1217.06 L1563.64 1217.06 L1564.23 1217.06 L1564.81 1217.06 L1565.4 1217.06 L1565.99 1217.06 L1566.57 1217.06 L1567.16 1217.06 L1567.75 1217.06 L1568.33 1217.06 L1568.92 1217.06 L1569.51 1217.06 L1570.09 1217.06 L1570.68 1217.06 L1571.27 1217.06 L1571.85 1217.06 L1572.44 1217.06 L1573.02 1217.06 L1573.61 1217.06 L1574.2 1217.06 L1574.78 1217.06 L1575.37 1217.06 L1575.96 1217.06 L1576.54 1217.06 L1577.13 1217.06 L1577.72 1217.06 L1578.3 1217.06 L1578.89 1217.06 L1579.47 1217.06 L1580.06 1217.06 L1580.65 1217.06 L1581.23 1217.06 L1581.82 1217.06 L1582.41 1217.06 L1582.99 1217.06 L1583.58 1217.06 L1584.17 1217.06 L1584.75 1217.06 L1585.34 1217.06 L1585.93 1217.06 L1586.51 1217.06 L1587.1 1217.06 L1587.68 1217.06 L1588.27 1217.06 L1588.86 1217.06 L1589.44 1217.06 L1590.03 1217.06 L1590.62 1217.06 L1591.2 1217.06 L1591.79 1217.06 L1592.38 1217.06 L1592.96 1217.06 L1593.55 1217.06 L1594.14 1217.06 L1594.72 1217.06 L1595.31 1217.06 L1595.89 1217.06 L1596.48 1217.06 L1597.07 1217.06 L1597.65 1217.06 L1598.24 1217.06 L1598.83 1217.06 L1599.41 1217.06 L1600 1217.06 L1600.59 1217.06 L1601.17 1217.06 L1601.76 1217.06 L1602.34 1217.06 L1602.93 1217.06 L1603.52 1217.06 L1604.1 1217.06 L1604.69 1217.06 L1605.28 1217.06 L1605.86 1217.06 L1606.45 1217.06 L1607.04 1217.06 L1607.62 1217.06 L1608.21 1217.06 L1608.8 1217.06 L1609.38 1217.06 L1609.97 1217.06 L1610.55 1217.06 L1611.14 1217.06 L1611.73 1217.06 L1612.31 1217.06 L1612.9 1217.06 L1613.49 1217.06 L1614.07 1217.06 L1614.66 1217.06 L1615.25 1217.06 L1615.83 1217.06 L1616.42 1217.06 L1617.01 1217.06 L1617.59 1217.06 L1618.18 1217.06 L1618.76 1217.06 L1619.35 1217.06 L1619.94 1217.06 L1620.52 1217.06 L1621.11 1217.06 L1621.7 1217.06 L1622.28 1217.06 L1622.87 1217.06 L1623.46 1217.06 L1624.04 1217.06 L1624.63 1217.06 L1625.22 1217.06 L1625.8 1217.06 L1626.39 1217.06 L1626.97 1217.06 L1627.56 1217.06 L1628.15 1217.06 L1628.73 1217.06 L1629.32 1217.06 L1629.91 1217.06 L1630.49 1217.06 L1631.08 1217.06 L1631.67 1217.06 L1632.25 1217.06 L1632.84 1217.06 L1633.42 1217.06 L1634.01 1217.06 L1634.6 1217.06 L1635.18 1217.06 L1635.77 1217.06 L1636.36 1217.06 L1636.94 1217.06 L1637.53 1217.06 L1638.12 1217.06 L1638.7 1217.06 L1639.29 1217.06 L1639.88 1217.06 L1640.46 1217.06 L1641.05 1217.06 L1641.63 1217.06 L1642.22 1217.06 L1642.81 1217.06 L1643.39 1217.06 L1643.98 1217.06 L1644.57 1217.06 L1645.15 1217.06 L1645.74 1217.06 L1646.33 1217.06 L1646.91 1217.06 L1647.5 1217.06 L1648.09 1217.06 L1648.67 1217.06 L1649.26 1217.06 L1649.84 1217.06 L1650.43 1217.06 L1651.02 1217.06 L1651.6 1217.06 L1652.19 1217.06 L1652.78 1217.06 L1653.36 1217.06 L1653.95 1217.06 L1654.54 1217.06 L1655.12 1217.06 L1655.71 1217.06 L1656.29 1217.06 L1656.88 1217.06 L1657.47 1217.06 L1658.05 1217.06 L1658.64 1217.06 L1659.23 1217.06 L1659.81 1217.06 L1660.4 1217.06 L1660.99 1217.06 L1661.57 1217.06 L1662.16 1217.06 L1662.75 1217.06 L1663.33 1217.06 L1663.92 1217.06 L1664.5 1217.06 L1665.09 1217.06 L1665.68 1217.06 L1666.26 1217.06 L1666.85 1217.06 L1667.44 1217.06 L1668.02 1217.06 L1668.61 1217.06 L1669.2 1217.06 L1669.78 1217.06 L1670.37 1217.06 L1670.96 1217.06 L1671.54 1217.06 L1672.13 1217.06 L1672.71 1217.06 L1673.3 1217.06 L1673.89 1217.06 L1674.47 1217.06 L1675.06 1217.06 L1675.65 1217.06 L1676.23 1217.06 L1676.82 1217.06 L1677.41 1217.06 L1677.99 1217.06 L1678.58 1217.06 L1679.17 1217.06 L1679.75 1217.06 L1680.34 1217.06 L1680.92 1217.06 L1681.51 1217.06 L1682.1 1217.06 L1682.68 1217.06 L1683.27 1217.06 L1683.86 1217.06 L1684.44 1217.06 L1685.03 1217.06 L1685.62 1217.06 L1686.2 1217.06 L1686.79 1217.06 L1687.37 1217.06 L1687.96 1217.06 L1688.55 1217.06 L1689.13 1217.06 L1689.72 1217.06 L1690.31 1217.06 L1690.89 1217.06 L1691.48 1217.06 L1692.07 1217.06 L1692.65 1217.06 L1693.24 1217.06 L1693.83 1217.06 L1694.41 1217.06 L1695 1217.06 L1695.58 1217.06 L1696.17 1217.06 L1696.76 1217.06 L1697.34 1217.06 L1697.93 1217.06 L1698.52 1217.06 L1699.1 1217.06 L1699.69 1217.06 L1700.28 1217.06 L1700.86 1217.06 L1701.45 1217.06 L1702.04 1217.06 L1702.62 1217.06 L1703.21 1217.06 L1703.79 1217.06 L1704.38 1217.06 L1704.97 1217.06 L1705.55 1217.06 L1706.14 1217.06 L1706.73 1217.06 L1707.31 1217.06 L1707.9 1217.06 L1708.49 1217.06 L1709.07 1217.06 L1709.66 1217.06 L1710.24 1217.06 L1710.83 1217.06 L1711.42 1217.06 L1712 1217.06 L1712.59 1217.06 L1713.18 1217.06 L1713.76 1217.06 L1714.35 1217.06 L1714.94 1217.06 L1715.52 1217.06 L1716.11 1217.06 L1716.7 1217.06 L1717.28 1217.06 L1717.87 1217.06 L1718.45 1217.06 L1719.04 1217.06 L1719.63 1217.06 L1720.21 1217.06 L1720.8 1217.06 L1721.39 1217.06 L1721.97 1217.06 L1722.56 1217.06 L1723.15 1217.06 L1723.73 1217.06 L1724.32 1217.06 L1724.91 1217.06 L1725.49 1217.06 L1726.08 1217.06 L1726.66 1217.06 L1727.25 1217.06 L1727.84 1217.06 L1728.42 1217.06 L1729.01 1217.06 L1729.6 1217.06 L1730.18 1217.06 L1730.77 1217.06 L1731.36 1217.06 L1731.94 1217.06 L1732.53 1217.06 L1733.11 1217.06 L1733.7 1217.06 L1734.29 1217.06 L1734.87 1217.06 L1735.46 1217.06 L1736.05 1217.06 L1736.63 1217.06 L1737.22 1217.06 L1737.81 1217.06 L1738.39 1217.06 L1738.98 1217.06 L1739.57 1217.06 L1740.15 1217.06 L1740.74 1217.06 L1741.32 1217.06 L1741.91 1217.06 L1742.5 1217.06 L1743.08 1217.06 L1743.67 1217.06 L1744.26 1217.06 L1744.84 1217.06 L1745.43 1217.06 L1746.02 1217.06 L1746.6 1217.06 L1747.19 1217.06 L1747.78 1217.06 L1748.36 1217.06 L1748.95 1217.06 L1749.53 1217.06 L1750.12 1217.06 L1750.71 1217.06 L1751.29 1217.06 L1751.88 1217.06 L1752.47 1217.06 L1753.05 1217.06 L1753.64 1217.06 L1754.23 1217.06 L1754.81 1217.06 L1755.4 1217.06 L1755.99 1217.06 L1756.57 1217.06 L1757.16 1217.06 L1757.74 1217.06 L1758.33 1217.06 L1758.92 1217.06 L1759.5 1217.06 L1760.09 1217.06 L1760.68 1217.06 L1761.26 1217.06 L1761.85 1217.06 L1762.44 1217.06 L1763.02 1217.06 L1763.61 1217.06 L1764.19 1217.06 L1764.78 1217.06 L1765.37 1217.06 L1765.95 1217.06 L1766.54 1217.06 L1767.13 1217.06 L1767.71 1217.06 L1768.3 1217.06 L1768.89 1217.06 L1769.47 1217.06 L1770.06 1217.06 L1770.65 1217.06 L1771.23 1217.06 L1771.82 1217.06 L1772.4 1217.06 L1772.99 1217.06 L1773.58 1217.06 L1774.16 1217.06 L1774.75 1217.06 L1775.34 1217.06 L1775.92 1217.06 L1776.51 1217.06 L1777.1 1217.06 L1777.68 1217.06 L1778.27 1217.06 L1778.86 1217.06 L1779.44 1217.06 L1780.03 1217.06 L1780.61 1217.06 L1781.2 1217.06 L1781.79 1217.06 L1782.37 1217.06 L1782.96 1217.06 L1783.55 1217.06 L1784.13 1217.06 L1784.72 1217.06 L1785.31 1217.06 L1785.89 1217.06 L1786.48 1217.06 L1787.06 1217.06 L1787.65 1217.06 L1788.24 1217.06 L1788.82 1217.06 L1789.41 1217.06 L1790 1217.06 L1790.58 1217.06 L1791.17 1217.06 L1791.76 1217.06 L1792.34 1217.06 L1792.93 1217.06 L1793.52 1217.06 L1794.1 1217.06 L1794.69 1217.06 L1795.27 1217.06 L1795.86 1217.06 L1796.45 1217.06 L1797.03 1217.06 L1797.62 1217.06 L1798.21 1217.06 L1798.79 1217.06 L1799.38 1217.06 L1799.97 1217.06 L1800.55 1217.06 L1801.14 1217.06 L1801.73 1217.06 L1802.31 1217.06 L1802.9 1217.06 L1803.48 1217.06 L1804.07 1217.06 L1804.66 1217.06 L1805.24 1217.06 L1805.83 1217.06 L1806.42 1217.06 L1807 1217.06 L1807.59 1217.06 L1808.18 1217.06 L1808.76 1217.06 L1809.35 1217.06 L1809.94 1217.06 L1810.52 1217.06 L1811.11 1217.06 L1811.69 1217.06 L1812.28 1217.06 L1812.87 1217.06 L1813.45 1217.06 L1814.04 1217.06 L1814.63 1217.06 L1815.21 1217.06 L1815.8 1217.06 L1816.39 1217.06 L1816.97 1217.06 L1817.56 1217.06 L1818.14 1217.06 L1818.73 1217.06 L1819.32 1217.06 L1819.9 1217.06 L1820.49 1217.06 L1821.08 1217.06 L1821.66 1217.06 L1822.25 1217.06 L1822.84 1217.06 L1823.42 1217.06 L1824.01 1217.06 L1824.6 1217.06 L1825.18 1217.06 L1825.77 1217.06 L1826.35 1217.06 L1826.94 1217.06 L1827.53 1217.06 L1828.11 1217.06 L1828.7 1217.06 L1829.29 1217.06 L1829.87 1217.06 L1830.46 1217.06 L1831.05 1217.06 L1831.63 1217.06 L1832.22 1217.06 L1832.81 1217.06 L1833.39 1217.06 L1833.98 1217.06 L1834.56 1217.06 L1835.15 1217.06 L1835.74 1217.06 L1836.32 1217.06 L1836.91 1217.06 L1837.5 1217.06 L1838.08 1217.06 L1838.67 1217.06 L1839.26 1217.06 L1839.84 1217.06 L1840.43 1217.06 L1841.01 1217.06 L1841.6 1217.06 L1842.19 1217.06 L1842.77 1217.06 L1843.36 1217.06 L1843.95 1217.06 L1844.53 1217.06 L1845.12 1217.06 L1845.71 1217.06 L1846.29 1217.06 L1846.88 1217.06 L1847.47 1217.06 L1848.05 1217.06 L1848.64 1217.06 L1849.22 1217.06 L1849.81 1217.06 L1850.4 1217.06 L1850.98 1217.06 L1851.57 1217.06 L1852.16 1217.06 L1852.74 1217.06 L1853.33 1217.06 L1853.92 1217.06 L1854.5 1217.06 L1855.09 1217.06 L1855.68 1217.06 L1856.26 1217.06 L1856.85 1217.06 L1857.43 1217.06 L1858.02 1217.06 L1858.61 1217.06 L1859.19 1217.06 L1859.78 1217.06 L1860.37 1217.06 L1860.95 1217.06 L1861.54 1217.06 L1862.13 1217.06 L1862.71 1217.06 L1863.3 1217.06 L1863.88 1217.06 L1864.47 1217.06 L1865.06 1217.06 L1865.64 1217.06 L1866.23 1217.06 L1866.82 1217.06 L1867.4 1217.06 L1867.99 1217.06 L1868.58 1217.06 L1869.16 1217.06 L1869.75 1217.06 L1870.34 1217.06 L1870.92 1217.06 L1871.51 1217.06 L1872.09 1217.06 L1872.68 1217.06 L1873.27 1217.06 L1873.85 1217.06 L1874.44 1217.06 L1875.03 1217.06 L1875.61 1217.06 L1876.2 1217.06 L1876.79 1217.06 L1877.37 1217.06 L1877.96 1217.06 L1878.55 1217.06 L1879.13 1217.06 L1879.72 1217.06 L1880.3 1217.06 L1880.89 1217.06 L1881.48 1217.06 L1882.06 1217.06 L1882.65 1217.06 L1883.24 1217.06 L1883.82 1217.06 L1884.41 1217.06 L1885 1217.06 L1885.58 1217.06 L1886.17 1217.06 L1886.76 1217.06 L1887.34 1217.06 L1887.93 1217.06 L1888.51 1217.06 L1889.1 1217.06 L1889.69 1217.06 L1890.27 1217.06 L1890.86 1217.06 L1891.45 1217.06 L1892.03 1217.06 L1892.62 1217.06 L1893.21 1217.06 L1893.79 1217.06 L1894.38 1217.06 L1894.96 1217.06 L1895.55 1217.06 L1896.14 1217.06 L1896.72 1217.06 L1897.31 1217.06 L1897.9 1217.06 L1898.48 1217.06 L1899.07 1217.06 L1899.66 1217.06 L1900.24 1217.06 L1900.83 1217.06 L1901.42 1217.06 L1902 1217.06 L1902.59 1217.06 L1903.17 1217.06 L1903.76 1217.06 L1904.35 1217.06 L1904.93 1217.06 L1905.52 1217.06 L1906.11 1217.06 L1906.69 1217.06 L1907.28 1217.06 L1907.87 1217.06 L1908.45 1217.06 L1909.04 1217.06 L1909.63 1217.06 L1910.21 1217.06 L1910.8 1217.06 L1911.38 1217.06 L1911.97 1217.06 L1912.56 1217.06 L1913.14 1217.06 L1913.73 1217.06 L1914.32 1217.06 L1914.9 1217.06 L1915.49 1217.06 L1916.08 1217.06 L1916.66 1217.06 L1917.25 1217.06 L1917.83 1217.06 L1918.42 1217.06 L1919.01 1217.06 L1919.59 1217.06 L1920.18 1217.06 L1920.77 1217.06 L1921.35 1217.06 L1921.94 1217.06 L1922.53 1217.06 L1923.11 1217.06 L1923.7 1217.06 L1924.29 1217.06 L1924.87 1217.06 L1925.46 1217.06 L1926.04 1217.06 L1926.63 1217.06 L1927.22 1217.06 L1927.8 1217.06 L1928.39 1217.06 L1928.98 1217.06 L1929.56 1217.06 L1930.15 1217.06 L1930.74 1217.06 L1931.32 1217.06 L1931.91 1217.06 L1932.5 1217.06 L1933.08 1217.06 L1933.67 1217.06 L1934.25 1217.06 L1934.84 1217.06 L1935.43 1217.06 L1936.01 1217.06 L1936.6 1217.06 L1937.19 1217.06 L1937.77 1217.06 L1938.36 1217.06 L1938.95 1217.06 L1939.53 1217.06 L1940.12 1217.06 L1940.71 1217.06 L1941.29 1217.06 L1941.88 1217.06 L1942.46 1217.06 L1943.05 1217.06 L1943.64 1217.06 L1944.22 1217.06 L1944.81 1217.06 L1945.4 1217.06 L1945.98 1217.06 L1946.57 1217.06 L1947.16 1217.06 L1947.74 1217.06 L1948.33 1217.06 L1948.91 1217.06 L1949.5 1217.06 L1950.09 1217.06 L1950.67 1217.06 L1951.26 1217.06 L1951.85 1217.06 L1952.43 1217.06 L1953.02 1217.06 L1953.61 1217.06 L1954.19 1217.06 L1954.78 1217.06 L1955.37 1217.06 L1955.95 1217.06 L1956.54 1217.06 L1957.12 1217.06 L1957.71 1217.06 L1958.3 1217.06 L1958.88 1217.06 L1959.47 1217.06 L1960.06 1217.06 L1960.64 1217.06 L1961.23 1217.06 L1961.82 1217.06 L1962.4 1217.06 L1962.99 1217.06 L1963.58 1217.06 L1964.16 1217.06 L1964.75 1217.06 L1965.33 1217.06 L1965.92 1217.06 L1966.51 1217.06 L1967.09 1217.06 L1967.68 1217.06 L1968.27 1217.06 L1968.85 1217.06 L1969.44 1217.06 L1970.03 1217.06 L1970.61 1217.06 L1971.2 1217.06 L1971.78 1217.06 L1972.37 1217.06 L1972.96 1217.06 L1973.54 1217.06 L1974.13 1217.06 L1974.72 1217.06 L1975.3 1217.06 L1975.89 1217.06 L1976.48 1217.06 L1977.06 1217.06 L1977.65 1217.06 L1978.24 1217.06 L1978.82 1217.06 L1979.41 1217.06 L1979.99 1217.06 L1980.58 1217.06 L1981.17 1217.06 L1981.75 1217.06 L1982.34 1217.06 L1982.93 1217.06 L1983.51 1217.06 L1984.1 1217.06 L1984.69 1217.06 L1985.27 1217.06 L1985.86 1217.06 L1986.45 1217.06 L1987.03 1217.06 L1987.62 1217.06 L1988.2 1217.06 L1988.79 1217.06 L1989.38 1217.06 L1989.96 1217.06 L1990.55 1217.06 L1991.14 1217.06 L1991.72 1217.06 L1992.31 1217.06 L1992.9 1217.06 L1993.48 1217.06 L1994.07 1217.06 L1994.65 1217.06 L1995.24 1217.06 L1995.83 1217.06 L1996.41 1217.06 L1997 1217.06 L1997.59 1217.06 L1998.17 1217.06 L1998.76 1217.06 L1999.35 1217.06 L1999.93 1217.06 L2000.52 1217.06 L2001.11 1217.06 L2001.69 1217.06 L2002.28 1217.06 L2002.86 1217.06 L2003.45 1217.06 L2004.04 1217.06 L2004.62 1217.06 L2005.21 1217.06 L2005.8 1217.06 L2006.38 1217.06 L2006.97 1217.06 L2007.56 1217.06 L2008.14 1217.06 L2008.73 1217.06 L2009.32 1217.06 L2009.9 1217.06 L2010.49 1217.06 L2011.07 1217.06 L2011.66 1217.06 L2012.25 1217.06 L2012.83 1217.06 L2013.42 1217.06 L2014.01 1217.06 L2014.59 1217.06 L2015.18 1217.06 L2015.77 1217.06 L2016.35 1217.06 L2016.94 1217.06 L2017.53 1217.06 L2018.11 1217.06 L2018.7 1217.06 L2019.28 1217.06 L2019.87 1217.06 L2020.46 1217.06 L2021.04 1217.06 L2021.63 1217.06 L2022.22 1217.06 L2022.8 1217.06 L2023.39 1217.06 L2023.98 1217.06 L2024.56 1217.06 L2025.15 1217.06 L2025.73 1217.06 L2026.32 1217.06 L2026.91 1217.06 L2027.49 1217.06 L2028.08 1217.06 L2028.67 1217.06 L2029.25 1217.06 L2029.84 1217.06 L2030.43 1217.06 L2031.01 1217.06 L2031.6 1217.06 L2032.19 1217.06 L2032.77 1217.06 L2033.36 1217.06 L2033.94 1217.06 L2034.53 1217.06 L2035.12 1217.06 L2035.7 1217.06 L2036.29 1217.06 L2036.88 1217.06 L2037.46 1217.06 L2038.05 1217.06 L2038.64 1217.06 L2039.22 1217.06 L2039.81 1217.06 L2040.4 1217.06 L2040.98 1217.06 L2041.57 1217.06 L2042.15 1217.06 L2042.74 1217.06 L2043.33 1217.06 L2043.91 1217.06 L2044.5 1217.06 L2045.09 1217.06 L2045.67 1217.06 L2046.26 1217.06 L2046.85 1217.06 L2047.43 1217.06 L2048.02 1217.06 L2048.6 1217.06 L2049.19 1217.06 L2049.78 1217.06 L2050.36 1217.06 L2050.95 1217.06 L2051.54 1217.06 L2052.12 1217.06 L2052.71 1217.06 L2053.3 1217.06 L2053.88 1217.06 L2054.47 1217.06 L2055.06 1217.06 L2055.64 1217.06 L2056.23 1217.06 L2056.81 1217.06 L2057.4 1217.06 L2057.99 1217.06 L2058.57 1217.06 L2059.16 1217.06 L2059.75 1217.06 L2060.33 1217.06 L2060.92 1217.06 L2061.51 1217.06 L2062.09 1217.06 L2062.68 1217.06 L2063.27 1217.06 L2063.85 1217.06 L2064.44 1217.06 L2065.02 1217.06 L2065.61 1217.06 L2066.2 1217.06 L2066.78 1217.06 L2067.37 1217.06 L2067.96 1217.06 L2068.54 1217.06 L2069.13 1217.06 L2069.72 1217.06 L2070.3 1217.06 L2070.89 1217.06 L2071.48 1217.06 L2072.06 1217.06 L2072.65 1217.06 L2073.23 1217.06 L2073.82 1217.06 L2074.41 1217.06 L2074.99 1217.06 L2075.58 1217.06 L2076.17 1217.06 L2076.75 1217.06 L2077.34 1217.06 L2077.93 1217.06 L2078.51 1217.06 L2079.1 1217.06 L2079.68 1217.06 L2080.27 1217.06 L2080.86 1217.06 L2081.44 1217.06 L2082.03 1217.06 L2082.62 1217.06 L2083.2 1217.06 L2083.79 1217.06 L2084.38 1217.06 L2084.96 1217.06 L2085.55 1217.06 L2086.14 1217.06 L2086.72 1217.06 L2087.31 1217.06 L2087.89 1217.06 L2088.48 1217.06 L2089.07 1217.06 L2089.65 1217.06 L2090.24 1217.06 L2090.83 1217.06 L2091.41 1217.06 L2092 1217.06 L2092.59 1217.06 L2093.17 1217.06 L2093.76 1217.06 L2094.35 1217.06 L2094.93 1217.06 L2095.52 1217.06 L2096.1 1217.06 L2096.69 1217.06 L2097.28 1217.06 L2097.86 1217.06 L2098.45 1217.06 L2099.04 1217.06 L2099.62 1217.06 L2100.21 1217.06 L2100.8 1217.06 L2101.38 1217.06 L2101.97 1217.06 L2102.55 1217.06 L2103.14 1217.06 L2103.73 1217.06 L2104.31 1217.06 L2104.9 1217.06 L2105.49 1217.06 L2106.07 1217.06 L2106.66 1217.06 L2107.25 1217.06 L2107.83 1217.06 L2108.42 1217.06 L2109.01 1217.06 L2109.59 1217.06 L2110.18 1217.06 L2110.76 1217.06 L2111.35 1217.06 L2111.94 1217.06 L2112.52 1217.06 L2113.11 1217.06 L2113.7 1217.06 L2114.28 1217.06 L2114.87 1217.06 L2115.46 1217.06 L2116.04 1217.06 L2116.63 1217.06 L2117.22 1217.06 L2117.8 1217.06 L2118.39 1217.06 L2118.97 1217.06 L2119.56 1217.06 L2120.15 1217.06 L2120.73 1217.06 L2121.32 1217.06 L2121.91 1217.06 L2122.49 1217.06 L2123.08 1217.06 L2123.67 1217.06 L2124.25 1217.06 L2124.84 1217.06 L2125.42 1217.06 L2126.01 1217.06 L2126.6 1217.06 L2127.18 1217.06 L2127.77 1217.06 L2128.36 1217.06 L2128.94 1217.06 L2129.53 1217.06 L2130.12 1217.06 L2130.7 1217.06 L2131.29 1217.06 L2131.88 1217.06 L2132.46 1217.06 L2133.05 1217.06 L2133.63 1217.06 L2134.22 1217.06 L2134.81 1217.06 L2135.39 1217.06 L2135.98 1217.06 L2136.57 1217.06 L2137.15 1217.06 L2137.74 1217.06 L2138.33 1217.06 L2138.91 1217.06 L2139.5 1217.06 L2140.09 1217.06 L2140.67 1217.06 L2141.26 1217.06 L2141.84 1217.06 L2142.43 1217.06 L2143.02 1217.06 L2143.6 1217.06 L2144.19 1217.06 L2144.78 1217.06 L2145.36 1217.06 L2145.95 1217.06 L2146.54 1217.06 L2147.12 1217.06 L2147.71 1217.06 L2148.3 1217.06 L2148.88 1217.06 L2149.47 1217.06 L2150.05 1217.06 L2150.64 1217.06 L2151.23 1217.06 L2151.81 1217.06 L2152.4 1217.06 L2152.99 1217.06 L2153.57 1217.06 L2154.16 1217.06 L2154.75 1217.06 L2155.33 1217.06 L2155.92 1217.06 L2156.5 1217.06 L2157.09 1217.06 L2157.68 1217.06 L2158.26 1217.06 L2158.26 1216.33 L2157.68 1216.33 L2157.09 1216.33 L2156.5 1216.33 L2155.92 1216.33 L2155.33 1216.33 L2154.75 1216.33 L2154.16 1216.33 L2153.57 1216.33 L2152.99 1216.33 L2152.4 1216.33 L2151.81 1216.33 L2151.23 1216.33 L2150.64 1216.33 L2150.05 1216.33 L2149.47 1216.33 L2148.88 1216.33 L2148.3 1216.33 L2147.71 1216.33 L2147.12 1216.33 L2146.54 1216.33 L2145.95 1216.33 L2145.36 1216.33 L2144.78 1216.33 L2144.19 1216.33 L2143.6 1216.33 L2143.02 1216.33 L2142.43 1216.33 L2141.84 1216.33 L2141.26 1216.33 L2140.67 1216.33 L2140.09 1216.33 L2139.5 1216.33 L2138.91 1216.33 L2138.33 1216.33 L2137.74 1216.33 L2137.15 1216.33 L2136.57 1216.33 L2135.98 1216.33 L2135.39 1216.33 L2134.81 1216.33 L2134.22 1216.33 L2133.63 1216.33 L2133.05 1216.33 L2132.46 1216.33 L2131.88 1216.33 L2131.29 1216.33 L2130.7 1216.33 L2130.12 1216.33 L2129.53 1216.33 L2128.94 1216.33 L2128.36 1216.33 L2127.77 1216.33 L2127.18 1216.33 L2126.6 1216.33 L2126.01 1216.33 L2125.42 1216.33 L2124.84 1216.33 L2124.25 1216.33 L2123.67 1216.33 L2123.08 1216.33 L2122.49 1216.33 L2121.91 1216.33 L2121.32 1216.33 L2120.73 1216.33 L2120.15 1216.33 L2119.56 1216.33 L2118.97 1216.33 L2118.39 1216.33 L2117.8 1216.33 L2117.22 1216.33 L2116.63 1216.33 L2116.04 1216.33 L2115.46 1216.33 L2114.87 1216.33 L2114.28 1216.33 L2113.7 1216.33 L2113.11 1216.33 L2112.52 1216.33 L2111.94 1216.33 L2111.35 1216.33 L2110.76 1216.33 L2110.18 1216.33 L2109.59 1216.33 L2109.01 1216.33 L2108.42 1216.33 L2107.83 1216.33 L2107.25 1216.33 L2106.66 1216.33 L2106.07 1216.33 L2105.49 1216.33 L2104.9 1216.33 L2104.31 1216.33 L2103.73 1216.33 L2103.14 1216.33 L2102.55 1216.33 L2101.97 1216.33 L2101.38 1216.33 L2100.8 1216.33 L2100.21 1216.33 L2099.62 1216.33 L2099.04 1216.33 L2098.45 1216.33 L2097.86 1216.33 L2097.28 1216.33 L2096.69 1216.33 L2096.1 1216.33 L2095.52 1216.33 L2094.93 1216.33 L2094.35 1216.33 L2093.76 1216.33 L2093.17 1216.33 L2092.59 1216.33 L2092 1216.33 L2091.41 1216.33 L2090.83 1216.33 L2090.24 1216.33 L2089.65 1216.33 L2089.07 1216.33 L2088.48 1216.33 L2087.89 1216.33 L2087.31 1216.33 L2086.72 1216.33 L2086.14 1216.33 L2085.55 1216.33 L2084.96 1216.33 L2084.38 1216.33 L2083.79 1216.33 L2083.2 1216.33 L2082.62 1216.33 L2082.03 1216.33 L2081.44 1216.33 L2080.86 1216.33 L2080.27 1216.33 L2079.68 1216.33 L2079.1 1216.33 L2078.51 1216.33 L2077.93 1216.33 L2077.34 1216.33 L2076.75 1216.33 L2076.17 1216.33 L2075.58 1216.33 L2074.99 1216.33 L2074.41 1216.33 L2073.82 1216.33 L2073.23 1216.33 L2072.65 1216.33 L2072.06 1216.33 L2071.48 1216.33 L2070.89 1216.33 L2070.3 1216.33 L2069.72 1216.33 L2069.13 1216.33 L2068.54 1216.33 L2067.96 1216.33 L2067.37 1216.33 L2066.78 1216.33 L2066.2 1216.33 L2065.61 1216.33 L2065.02 1216.33 L2064.44 1216.33 L2063.85 1216.33 L2063.27 1216.33 L2062.68 1216.33 L2062.09 1216.33 L2061.51 1216.33 L2060.92 1216.33 L2060.33 1216.33 L2059.75 1216.33 L2059.16 1216.33 L2058.57 1216.33 L2057.99 1216.33 L2057.4 1216.33 L2056.81 1216.33 L2056.23 1216.33 L2055.64 1216.33 L2055.06 1216.33 L2054.47 1216.33 L2053.88 1216.33 L2053.3 1216.33 L2052.71 1216.33 L2052.12 1216.33 L2051.54 1216.33 L2050.95 1216.33 L2050.36 1216.33 L2049.78 1216.33 L2049.19 1216.33 L2048.6 1216.33 L2048.02 1216.33 L2047.43 1216.33 L2046.85 1216.33 L2046.26 1216.33 L2045.67 1216.33 L2045.09 1216.33 L2044.5 1216.33 L2043.91 1216.33 L2043.33 1216.33 L2042.74 1216.33 L2042.15 1216.33 L2041.57 1216.33 L2040.98 1216.33 L2040.4 1216.33 L2039.81 1216.33 L2039.22 1216.33 L2038.64 1216.33 L2038.05 1216.33 L2037.46 1216.33 L2036.88 1216.33 L2036.29 1216.33 L2035.7 1216.33 L2035.12 1216.33 L2034.53 1216.33 L2033.94 1216.33 L2033.36 1216.33 L2032.77 1216.33 L2032.19 1216.33 L2031.6 1216.33 L2031.01 1216.33 L2030.43 1216.33 L2029.84 1216.33 L2029.25 1216.33 L2028.67 1216.33 L2028.08 1216.33 L2027.49 1216.33 L2026.91 1216.33 L2026.32 1216.33 L2025.73 1216.33 L2025.15 1216.33 L2024.56 1216.33 L2023.98 1216.33 L2023.39 1216.33 L2022.8 1216.33 L2022.22 1216.33 L2021.63 1216.33 L2021.04 1216.33 L2020.46 1216.33 L2019.87 1216.33 L2019.28 1216.33 L2018.7 1216.33 L2018.11 1216.33 L2017.53 1216.33 L2016.94 1216.33 L2016.35 1216.33 L2015.77 1216.33 L2015.18 1216.33 L2014.59 1216.33 L2014.01 1216.33 L2013.42 1216.33 L2012.83 1216.33 L2012.25 1216.33 L2011.66 1216.33 L2011.07 1216.33 L2010.49 1216.33 L2009.9 1216.33 L2009.32 1216.33 L2008.73 1216.33 L2008.14 1216.33 L2007.56 1216.33 L2006.97 1216.33 L2006.38 1216.33 L2005.8 1216.33 L2005.21 1216.33 L2004.62 1216.33 L2004.04 1216.33 L2003.45 1216.33 L2002.86 1216.33 L2002.28 1216.33 L2001.69 1216.33 L2001.11 1216.33 L2000.52 1216.33 L1999.93 1216.33 L1999.35 1216.33 L1998.76 1216.33 L1998.17 1216.33 L1997.59 1216.33 L1997 1216.33 L1996.41 1216.33 L1995.83 1216.33 L1995.24 1216.33 L1994.65 1216.33 L1994.07 1216.33 L1993.48 1216.33 L1992.9 1216.33 L1992.31 1216.33 L1991.72 1216.33 L1991.14 1216.33 L1990.55 1216.33 L1989.96 1216.33 L1989.38 1216.33 L1988.79 1216.33 L1988.2 1216.33 L1987.62 1216.33 L1987.03 1216.33 L1986.45 1216.33 L1985.86 1216.33 L1985.27 1216.33 L1984.69 1216.33 L1984.1 1216.33 L1983.51 1216.33 L1982.93 1216.33 L1982.34 1216.33 L1981.75 1216.33 L1981.17 1216.33 L1980.58 1216.33 L1979.99 1216.33 L1979.41 1216.33 L1978.82 1216.33 L1978.24 1216.33 L1977.65 1216.33 L1977.06 1216.33 L1976.48 1216.33 L1975.89 1216.33 L1975.3 1216.33 L1974.72 1216.33 L1974.13 1216.33 L1973.54 1216.33 L1972.96 1216.33 L1972.37 1216.33 L1971.78 1216.33 L1971.2 1216.33 L1970.61 1216.33 L1970.03 1216.33 L1969.44 1216.33 L1968.85 1216.33 L1968.27 1216.33 L1967.68 1216.33 L1967.09 1216.33 L1966.51 1216.33 L1965.92 1216.33 L1965.33 1216.33 L1964.75 1216.33 L1964.16 1216.33 L1963.58 1216.33 L1962.99 1216.33 L1962.4 1216.33 L1961.82 1216.33 L1961.23 1216.33 L1960.64 1216.33 L1960.06 1216.33 L1959.47 1216.33 L1958.88 1216.33 L1958.3 1216.33 L1957.71 1216.33 L1957.12 1216.33 L1956.54 1216.33 L1955.95 1216.33 L1955.37 1216.33 L1954.78 1216.33 L1954.19 1216.33 L1953.61 1216.33 L1953.02 1216.33 L1952.43 1216.33 L1951.85 1216.33 L1951.26 1216.33 L1950.67 1216.33 L1950.09 1216.33 L1949.5 1216.33 L1948.91 1216.33 L1948.33 1216.33 L1947.74 1216.33 L1947.16 1216.33 L1946.57 1216.33 L1945.98 1216.33 L1945.4 1216.33 L1944.81 1216.33 L1944.22 1216.33 L1943.64 1216.33 L1943.05 1216.33 L1942.46 1216.33 L1941.88 1216.33 L1941.29 1216.33 L1940.71 1216.33 L1940.12 1216.33 L1939.53 1216.33 L1938.95 1216.33 L1938.36 1216.33 L1937.77 1216.33 L1937.19 1216.33 L1936.6 1216.33 L1936.01 1216.33 L1935.43 1216.33 L1934.84 1216.33 L1934.25 1216.33 L1933.67 1216.33 L1933.08 1216.33 L1932.5 1216.33 L1931.91 1216.33 L1931.32 1216.33 L1930.74 1216.33 L1930.15 1216.33 L1929.56 1216.33 L1928.98 1216.33 L1928.39 1216.33 L1927.8 1216.33 L1927.22 1216.33 L1926.63 1216.33 L1926.04 1216.33 L1925.46 1216.33 L1924.87 1216.33 L1924.29 1216.33 L1923.7 1216.33 L1923.11 1216.33 L1922.53 1216.33 L1921.94 1216.33 L1921.35 1216.33 L1920.77 1216.33 L1920.18 1216.33 L1919.59 1216.33 L1919.01 1216.33 L1918.42 1216.33 L1917.83 1216.33 L1917.25 1216.33 L1916.66 1216.33 L1916.08 1216.33 L1915.49 1216.33 L1914.9 1216.33 L1914.32 1216.33 L1913.73 1216.33 L1913.14 1216.33 L1912.56 1216.33 L1911.97 1216.33 L1911.38 1216.33 L1910.8 1216.33 L1910.21 1216.33 L1909.63 1216.33 L1909.04 1216.33 L1908.45 1216.33 L1907.87 1216.33 L1907.28 1216.33 L1906.69 1216.33 L1906.11 1216.33 L1905.52 1216.33 L1904.93 1216.33 L1904.35 1216.33 L1903.76 1216.33 L1903.17 1216.33 L1902.59 1216.33 L1902 1216.33 L1901.42 1216.33 L1900.83 1216.33 L1900.24 1216.33 L1899.66 1216.33 L1899.07 1216.33 L1898.48 1216.33 L1897.9 1216.33 L1897.31 1216.33 L1896.72 1216.33 L1896.14 1216.33 L1895.55 1216.33 L1894.96 1216.33 L1894.38 1216.33 L1893.79 1216.33 L1893.21 1216.33 L1892.62 1216.33 L1892.03 1216.33 L1891.45 1216.33 L1890.86 1216.33 L1890.27 1216.33 L1889.69 1216.33 L1889.1 1216.33 L1888.51 1216.33 L1887.93 1216.33 L1887.34 1216.33 L1886.76 1216.33 L1886.17 1216.33 L1885.58 1216.33 L1885 1216.33 L1884.41 1216.33 L1883.82 1216.33 L1883.24 1216.33 L1882.65 1216.33 L1882.06 1216.33 L1881.48 1216.33 L1880.89 1216.33 L1880.3 1216.33 L1879.72 1216.33 L1879.13 1216.33 L1878.55 1216.33 L1877.96 1216.33 L1877.37 1216.33 L1876.79 1216.33 L1876.2 1216.33 L1875.61 1216.33 L1875.03 1216.33 L1874.44 1216.33 L1873.85 1216.33 L1873.27 1216.33 L1872.68 1216.33 L1872.09 1216.33 L1871.51 1216.33 L1870.92 1216.33 L1870.34 1216.33 L1869.75 1216.33 L1869.16 1216.33 L1868.58 1216.33 L1867.99 1216.33 L1867.4 1216.33 L1866.82 1216.33 L1866.23 1216.33 L1865.64 1216.33 L1865.06 1216.33 L1864.47 1216.33 L1863.88 1216.33 L1863.3 1216.33 L1862.71 1216.33 L1862.13 1216.33 L1861.54 1216.33 L1860.95 1216.33 L1860.37 1216.33 L1859.78 1216.33 L1859.19 1216.33 L1858.61 1216.33 L1858.02 1216.33 L1857.43 1216.33 L1856.85 1216.33 L1856.26 1216.33 L1855.68 1216.33 L1855.09 1216.33 L1854.5 1216.33 L1853.92 1216.33 L1853.33 1216.33 L1852.74 1216.33 L1852.16 1216.33 L1851.57 1216.33 L1850.98 1216.33 L1850.4 1216.33 L1849.81 1216.33 L1849.22 1216.33 L1848.64 1216.33 L1848.05 1216.33 L1847.47 1216.33 L1846.88 1216.33 L1846.29 1216.33 L1845.71 1216.33 L1845.12 1216.33 L1844.53 1216.33 L1843.95 1216.33 L1843.36 1216.33 L1842.77 1216.33 L1842.19 1216.33 L1841.6 1216.33 L1841.01 1216.33 L1840.43 1216.33 L1839.84 1216.33 L1839.26 1216.33 L1838.67 1216.33 L1838.08 1216.33 L1837.5 1216.33 L1836.91 1216.33 L1836.32 1216.33 L1835.74 1216.33 L1835.15 1216.33 L1834.56 1216.33 L1833.98 1216.33 L1833.39 1216.33 L1832.81 1216.33 L1832.22 1216.33 L1831.63 1216.33 L1831.05 1216.33 L1830.46 1216.33 L1829.87 1216.33 L1829.29 1216.33 L1828.7 1216.33 L1828.11 1216.33 L1827.53 1216.33 L1826.94 1216.33 L1826.35 1216.33 L1825.77 1216.33 L1825.18 1216.33 L1824.6 1216.33 L1824.01 1216.33 L1823.42 1216.33 L1822.84 1216.33 L1822.25 1216.33 L1821.66 1216.33 L1821.08 1216.33 L1820.49 1216.33 L1819.9 1216.33 L1819.32 1216.33 L1818.73 1216.33 L1818.14 1216.33 L1817.56 1216.33 L1816.97 1216.33 L1816.39 1216.33 L1815.8 1216.33 L1815.21 1216.33 L1814.63 1216.33 L1814.04 1216.33 L1813.45 1216.33 L1812.87 1216.33 L1812.28 1216.33 L1811.69 1216.33 L1811.11 1216.33 L1810.52 1216.33 L1809.94 1216.33 L1809.35 1216.33 L1808.76 1216.33 L1808.18 1216.33 L1807.59 1216.33 L1807 1216.33 L1806.42 1216.33 L1805.83 1216.33 L1805.24 1216.33 L1804.66 1216.33 L1804.07 1216.33 L1803.48 1216.33 L1802.9 1216.33 L1802.31 1216.33 L1801.73 1216.33 L1801.14 1216.33 L1800.55 1216.33 L1799.97 1216.33 L1799.38 1216.33 L1798.79 1216.33 L1798.21 1216.33 L1797.62 1216.33 L1797.03 1216.33 L1796.45 1216.33 L1795.86 1216.33 L1795.27 1216.33 L1794.69 1216.33 L1794.1 1216.33 L1793.52 1216.33 L1792.93 1216.33 L1792.34 1216.33 L1791.76 1216.33 L1791.17 1216.33 L1790.58 1216.33 L1790 1216.33 L1789.41 1216.33 L1788.82 1216.33 L1788.24 1216.33 L1787.65 1216.33 L1787.06 1216.33 L1786.48 1216.33 L1785.89 1216.33 L1785.31 1216.33 L1784.72 1216.33 L1784.13 1216.33 L1783.55 1216.33 L1782.96 1216.33 L1782.37 1216.33 L1781.79 1216.33 L1781.2 1216.33 L1780.61 1216.33 L1780.03 1216.33 L1779.44 1216.33 L1778.86 1216.33 L1778.27 1216.33 L1777.68 1216.33 L1777.1 1216.33 L1776.51 1216.33 L1775.92 1216.33 L1775.34 1216.33 L1774.75 1216.33 L1774.16 1216.33 L1773.58 1216.33 L1772.99 1216.33 L1772.4 1216.33 L1771.82 1216.33 L1771.23 1216.33 L1770.65 1216.33 L1770.06 1216.33 L1769.47 1216.33 L1768.89 1216.33 L1768.3 1216.33 L1767.71 1216.33 L1767.13 1216.33 L1766.54 1216.33 L1765.95 1216.33 L1765.37 1216.33 L1764.78 1216.33 L1764.19 1216.33 L1763.61 1216.33 L1763.02 1216.33 L1762.44 1216.33 L1761.85 1216.33 L1761.26 1216.33 L1760.68 1216.33 L1760.09 1216.33 L1759.5 1216.33 L1758.92 1216.33 L1758.33 1216.33 L1757.74 1216.33 L1757.16 1216.33 L1756.57 1216.33 L1755.99 1216.33 L1755.4 1216.33 L1754.81 1216.33 L1754.23 1216.33 L1753.64 1216.33 L1753.05 1216.33 L1752.47 1216.33 L1751.88 1216.33 L1751.29 1216.33 L1750.71 1216.33 L1750.12 1216.33 L1749.53 1216.33 L1748.95 1216.33 L1748.36 1216.33 L1747.78 1216.33 L1747.19 1216.33 L1746.6 1216.33 L1746.02 1216.33 L1745.43 1216.33 L1744.84 1216.33 L1744.26 1216.33 L1743.67 1216.33 L1743.08 1216.33 L1742.5 1216.33 L1741.91 1216.33 L1741.32 1216.33 L1740.74 1216.33 L1740.15 1216.33 L1739.57 1216.33 L1738.98 1216.33 L1738.39 1216.33 L1737.81 1216.33 L1737.22 1216.33 L1736.63 1216.33 L1736.05 1216.33 L1735.46 1216.33 L1734.87 1216.33 L1734.29 1216.33 L1733.7 1216.33 L1733.11 1216.33 L1732.53 1216.33 L1731.94 1216.33 L1731.36 1216.33 L1730.77 1216.33 L1730.18 1216.33 L1729.6 1216.33 L1729.01 1216.33 L1728.42 1216.33 L1727.84 1216.33 L1727.25 1216.33 L1726.66 1216.33 L1726.08 1216.33 L1725.49 1216.33 L1724.91 1216.33 L1724.32 1216.33 L1723.73 1216.33 L1723.15 1216.33 L1722.56 1216.33 L1721.97 1216.33 L1721.39 1216.33 L1720.8 1216.33 L1720.21 1216.33 L1719.63 1216.33 L1719.04 1216.33 L1718.45 1216.33 L1717.87 1216.33 L1717.28 1216.33 L1716.7 1216.33 L1716.11 1216.33 L1715.52 1216.33 L1714.94 1216.33 L1714.35 1216.33 L1713.76 1216.33 L1713.18 1216.33 L1712.59 1216.33 L1712 1216.33 L1711.42 1216.33 L1710.83 1216.33 L1710.24 1216.33 L1709.66 1216.33 L1709.07 1216.33 L1708.49 1216.33 L1707.9 1216.33 L1707.31 1216.33 L1706.73 1216.33 L1706.14 1216.33 L1705.55 1216.33 L1704.97 1216.33 L1704.38 1216.33 L1703.79 1216.33 L1703.21 1216.33 L1702.62 1216.33 L1702.04 1216.33 L1701.45 1216.33 L1700.86 1216.33 L1700.28 1216.33 L1699.69 1216.33 L1699.1 1216.33 L1698.52 1216.33 L1697.93 1216.33 L1697.34 1216.33 L1696.76 1216.33 L1696.17 1216.33 L1695.58 1216.33 L1695 1216.33 L1694.41 1216.33 L1693.83 1216.33 L1693.24 1216.33 L1692.65 1216.33 L1692.07 1216.33 L1691.48 1216.33 L1690.89 1216.33 L1690.31 1216.33 L1689.72 1216.33 L1689.13 1216.33 L1688.55 1216.33 L1687.96 1216.33 L1687.37 1216.33 L1686.79 1216.33 L1686.2 1216.33 L1685.62 1216.33 L1685.03 1216.33 L1684.44 1216.33 L1683.86 1216.33 L1683.27 1216.33 L1682.68 1216.33 L1682.1 1216.33 L1681.51 1216.33 L1680.92 1216.33 L1680.34 1216.33 L1679.75 1216.33 L1679.17 1216.33 L1678.58 1216.33 L1677.99 1216.33 L1677.41 1216.33 L1676.82 1216.33 L1676.23 1216.33 L1675.65 1216.33 L1675.06 1216.33 L1674.47 1216.33 L1673.89 1216.33 L1673.3 1216.33 L1672.71 1216.33 L1672.13 1216.33 L1671.54 1216.33 L1670.96 1216.33 L1670.37 1216.33 L1669.78 1216.33 L1669.2 1216.33 L1668.61 1216.33 L1668.02 1216.33 L1667.44 1216.33 L1666.85 1216.33 L1666.26 1216.33 L1665.68 1216.33 L1665.09 1216.33 L1664.5 1216.33 L1663.92 1216.33 L1663.33 1216.33 L1662.75 1216.33 L1662.16 1216.33 L1661.57 1216.33 L1660.99 1216.33 L1660.4 1216.33 L1659.81 1216.33 L1659.23 1216.33 L1658.64 1216.33 L1658.05 1216.33 L1657.47 1216.33 L1656.88 1216.33 L1656.29 1216.33 L1655.71 1216.33 L1655.12 1216.33 L1654.54 1216.33 L1653.95 1216.33 L1653.36 1216.33 L1652.78 1216.33 L1652.19 1216.33 L1651.6 1216.33 L1651.02 1216.33 L1650.43 1216.33 L1649.84 1216.33 L1649.26 1216.33 L1648.67 1216.33 L1648.09 1216.33 L1647.5 1216.33 L1646.91 1216.33 L1646.33 1216.33 L1645.74 1216.33 L1645.15 1216.33 L1644.57 1216.33 L1643.98 1216.33 L1643.39 1216.33 L1642.81 1216.33 L1642.22 1216.33 L1641.63 1216.33 L1641.05 1216.33 L1640.46 1216.33 L1639.88 1216.33 L1639.29 1216.33 L1638.7 1216.33 L1638.12 1216.33 L1637.53 1216.33 L1636.94 1216.33 L1636.36 1216.33 L1635.77 1216.33 L1635.18 1216.33 L1634.6 1216.33 L1634.01 1216.33 L1633.42 1216.33 L1632.84 1216.33 L1632.25 1216.33 L1631.67 1216.33 L1631.08 1216.33 L1630.49 1216.33 L1629.91 1216.33 L1629.32 1216.33 L1628.73 1216.33 L1628.15 1216.33 L1627.56 1216.33 L1626.97 1216.33 L1626.39 1216.33 L1625.8 1216.33 L1625.22 1216.33 L1624.63 1216.33 L1624.04 1216.33 L1623.46 1216.33 L1622.87 1216.33 L1622.28 1216.33 L1621.7 1216.33 L1621.11 1216.33 L1620.52 1216.33 L1619.94 1216.33 L1619.35 1216.33 L1618.76 1216.33 L1618.18 1216.33 L1617.59 1216.33 L1617.01 1216.33 L1616.42 1216.33 L1615.83 1216.33 L1615.25 1216.33 L1614.66 1216.33 L1614.07 1216.33 L1613.49 1216.33 L1612.9 1216.33 L1612.31 1216.33 L1611.73 1216.33 L1611.14 1216.33 L1610.55 1216.33 L1609.97 1216.33 L1609.38 1216.33 L1608.8 1216.33 L1608.21 1216.33 L1607.62 1216.33 L1607.04 1216.33 L1606.45 1216.33 L1605.86 1216.33 L1605.28 1216.33 L1604.69 1216.33 L1604.1 1216.33 L1603.52 1216.33 L1602.93 1216.33 L1602.34 1216.33 L1601.76 1216.33 L1601.17 1216.33 L1600.59 1216.33 L1600 1216.33 L1599.41 1216.33 L1598.83 1216.33 L1598.24 1216.33 L1597.65 1216.33 L1597.07 1216.33 L1596.48 1216.33 L1595.89 1216.33 L1595.31 1216.33 L1594.72 1216.33 L1594.14 1216.33 L1593.55 1216.33 L1592.96 1216.33 L1592.38 1216.33 L1591.79 1216.33 L1591.2 1216.33 L1590.62 1216.33 L1590.03 1216.33 L1589.44 1216.33 L1588.86 1216.33 L1588.27 1216.33 L1587.68 1216.33 L1587.1 1216.33 L1586.51 1216.33 L1585.93 1216.33 L1585.34 1216.33 L1584.75 1216.33 L1584.17 1216.33 L1583.58 1216.33 L1582.99 1216.33 L1582.41 1216.33 L1581.82 1216.33 L1581.23 1216.33 L1580.65 1216.33 L1580.06 1216.33 L1579.47 1216.33 L1578.89 1216.33 L1578.3 1216.33 L1577.72 1216.33 L1577.13 1216.33 L1576.54 1216.33 L1575.96 1216.33 L1575.37 1216.33 L1574.78 1216.33 L1574.2 1216.33 L1573.61 1216.33 L1573.02 1216.33 L1572.44 1216.33 L1571.85 1216.33 L1571.27 1216.33 L1570.68 1216.33 L1570.09 1216.33 L1569.51 1216.33 L1568.92 1216.33 L1568.33 1216.33 L1567.75 1216.33 L1567.16 1216.33 L1566.57 1216.33 L1565.99 1216.33 L1565.4 1216.33 L1564.81 1216.33 L1564.23 1216.33 L1563.64 1216.33 L1563.06 1216.33 L1562.47 1216.33 L1561.88 1216.33 L1561.3 1216.33 L1560.71 1216.33 L1560.12 1216.33 L1559.54 1216.33 L1558.95 1216.33 L1558.36 1216.33 L1557.78 1216.33 L1557.19 1216.33 L1556.6 1216.33 L1556.02 1216.33 L1555.43 1216.33 L1554.85 1216.33 L1554.26 1216.33 L1553.67 1216.33 L1553.09 1216.33 L1552.5 1216.33 L1551.91 1216.33 L1551.33 1216.33 L1550.74 1216.33 L1550.15 1216.33 L1549.57 1216.33 L1548.98 1216.33 L1548.4 1216.33 L1547.81 1216.33 L1547.22 1216.33 L1546.64 1216.33 L1546.05 1216.33 L1545.46 1216.33 L1544.88 1216.33 L1544.29 1216.33 L1543.7 1216.33 L1543.12 1216.33 L1542.53 1216.33 L1541.94 1216.33 L1541.36 1216.33 L1540.77 1216.33 L1540.19 1216.33 L1539.6 1216.33 L1539.01 1216.33 L1538.43 1216.33 L1537.84 1216.33 L1537.25 1216.33 L1536.67 1216.33 L1536.08 1216.33 L1535.49 1216.33 L1534.91 1216.33 L1534.32 1216.33 L1533.73 1216.33 L1533.15 1216.33 L1532.56 1216.33 L1531.98 1216.33 L1531.39 1216.33 L1530.8 1216.33 L1530.22 1216.33 L1529.63 1216.33 L1529.04 1216.33 L1528.46 1216.33 L1527.87 1216.33 L1527.28 1216.33 L1526.7 1216.33 L1526.11 1216.33 L1525.52 1216.33 L1524.94 1216.33 L1524.35 1216.33 L1523.77 1216.33 L1523.18 1216.33 L1522.59 1216.33 L1522.01 1216.33 L1521.42 1216.33 L1520.83 1216.33 L1520.25 1216.33 L1519.66 1216.33 L1519.07 1216.33 L1518.49 1216.33 L1517.9 1216.33 L1517.32 1216.33 L1516.73 1216.33 L1516.14 1216.33 L1515.56 1216.33 L1514.97 1216.33 L1514.38 1216.33 L1513.8 1216.33 L1513.21 1216.33 L1512.62 1216.33 L1512.04 1216.33 L1511.45 1216.33 L1510.86 1216.33 L1510.28 1216.33 L1509.69 1216.33 L1509.11 1216.33 L1508.52 1216.33 L1507.93 1216.33 L1507.35 1216.33 L1506.76 1216.33 L1506.17 1216.33 L1505.59 1216.33 L1505 1216.33 L1504.41 1216.33 L1503.83 1216.33 L1503.24 1216.33 L1502.65 1216.33 L1502.07 1216.33 L1501.48 1216.33 L1500.9 1216.33 L1500.31 1216.33 L1499.72 1216.33 L1499.14 1216.33 L1498.55 1216.33 L1497.96 1216.33 L1497.38 1216.33 L1496.79 1216.33 L1496.2 1216.33 L1495.62 1216.33 L1495.03 1216.33 L1494.45 1216.33 L1493.86 1216.33 L1493.27 1216.33 L1492.69 1216.33 L1492.1 1216.33 L1491.51 1216.33 L1490.93 1216.33 L1490.34 1216.33 L1489.75 1216.33 L1489.17 1216.33 L1488.58 1216.33 L1487.99 1216.33 L1487.41 1216.33 L1486.82 1216.33 L1486.24 1216.33 L1485.65 1216.33 L1485.06 1216.33 L1484.48 1216.33 L1483.89 1216.33 L1483.3 1216.33 L1482.72 1216.33 L1482.13 1216.33 L1481.54 1216.33 L1480.96 1216.33 L1480.37 1216.33 L1479.78 1216.33 L1479.2 1216.33 L1478.61 1216.33 L1478.03 1216.33 L1477.44 1216.33 L1476.85 1216.33 L1476.27 1216.33 L1475.68 1216.33 L1475.09 1216.33 L1474.51 1216.33 L1473.92 1216.33 L1473.33 1216.33 L1472.75 1216.33 L1472.16 1216.33 L1471.57 1216.33 L1470.99 1216.33 L1470.4 1216.33 L1469.82 1216.33 L1469.23 1216.33 L1468.64 1216.33 L1468.06 1216.33 L1467.47 1216.33 L1466.88 1216.33 L1466.3 1216.33 L1465.71 1216.33 L1465.12 1216.33 L1464.54 1216.33 L1463.95 1216.33 L1463.37 1216.33 L1462.78 1216.33 L1462.19 1216.33 L1461.61 1216.33 L1461.02 1216.33 L1460.43 1216.33 L1459.85 1216.33 L1459.26 1216.33 L1458.67 1216.33 L1458.09 1216.33 L1457.5 1216.33 L1456.91 1216.33 L1456.33 1216.33 L1455.74 1216.33 L1455.16 1216.33 L1454.57 1216.33 L1453.98 1216.33 L1453.4 1216.33 L1452.81 1216.33 L1452.22 1216.33 L1451.64 1216.33 L1451.05 1216.33 L1450.46 1216.33 L1449.88 1216.33 L1449.29 1216.33 L1448.7 1216.33 L1448.12 1216.33 L1447.53 1216.33 L1446.95 1216.33 L1446.36 1216.33 L1445.77 1216.33 L1445.19 1216.33 L1444.6 1216.33 L1444.01 1216.33 L1443.43 1216.33 L1442.84 1216.33 L1442.25 1216.33 L1441.67 1216.33 L1441.08 1216.33 L1440.5 1216.33 L1439.91 1216.33 L1439.32 1216.33 L1438.74 1216.33 L1438.15 1216.33 L1437.56 1216.33 L1436.98 1216.33 L1436.39 1216.33 L1435.8 1216.33 L1435.22 1216.33 L1434.63 1216.33 L1434.04 1216.33 L1433.46 1216.33 L1432.87 1216.33 L1432.29 1216.33 L1431.7 1216.33 L1431.11 1216.33 L1430.53 1216.33 L1429.94 1216.33 L1429.35 1216.33 L1428.77 1216.33 L1428.18 1216.33 L1427.59 1216.33 L1427.01 1216.33 L1426.42 1216.33 L1425.83 1216.33 L1425.25 1216.33 L1424.66 1216.33 L1424.08 1216.33 L1423.49 1216.33 L1422.9 1216.33 L1422.32 1216.33 L1421.73 1216.33 L1421.14 1216.33 L1420.56 1216.33 L1419.97 1216.33 L1419.38 1216.33 L1418.8 1216.33 L1418.21 1216.33 L1417.63 1216.33 L1417.04 1216.33 L1416.45 1216.33 L1415.87 1216.33 L1415.28 1216.33 L1414.69 1216.33 L1414.11 1216.33 L1413.52 1216.33 L1412.93 1216.33 L1412.35 1216.33 L1411.76 1216.33 L1411.17 1216.33 L1410.59 1216.33 L1410 1216.33 L1409.42 1216.33 L1408.83 1216.33 L1408.24 1216.33 L1407.66 1216.33 L1407.07 1216.33 L1406.48 1216.33 L1405.9 1216.33 L1405.31 1216.33 L1404.72 1216.33 L1404.14 1216.33 L1403.55 1216.33 L1402.96 1216.33 L1402.38 1216.33 L1401.79 1216.33 L1401.21 1216.33 L1400.62 1216.33 L1400.03 1216.33 L1399.45 1216.33 L1398.86 1216.33 L1398.27 1216.33 L1397.69 1216.33 L1397.1 1216.33 L1396.51 1216.33 L1395.93 1216.33 L1395.34 1216.33 L1394.75 1216.33 L1394.17 1216.33 L1393.58 1216.33 L1393 1216.33 L1392.41 1216.33 L1391.82 1216.33 L1391.24 1216.33 L1390.65 1216.33 L1390.06 1216.33 L1389.48 1216.33 L1388.89 1216.33 L1388.3 1216.33 L1387.72 1216.33 L1387.13 1216.33 L1386.55 1216.33 L1385.96 1216.33 L1385.37 1216.33 L1384.79 1216.33 L1384.2 1216.33 L1383.61 1216.33 L1383.03 1216.33 L1382.44 1216.33 L1381.85 1216.33 L1381.27 1216.33 L1380.68 1216.33 L1380.09 1216.33 L1379.51 1216.33 L1378.92 1216.33 L1378.34 1216.33 L1377.75 1216.33 L1377.16 1216.33 L1376.58 1216.33 L1375.99 1216.33 L1375.4 1216.33 L1374.82 1216.33 L1374.23 1216.33 L1373.64 1216.33 L1373.06 1216.33 L1372.47 1216.33 L1371.88 1216.33 L1371.3 1216.33 L1370.71 1216.33 L1370.13 1216.33 L1369.54 1216.33 L1368.95 1216.33 L1368.37 1216.33 L1367.78 1216.33 L1367.19 1216.33 L1366.61 1216.33 L1366.02 1216.33 L1365.43 1216.33 L1364.85 1216.33 L1364.26 1216.33 L1363.68 1216.33 L1363.09 1216.33 L1362.5 1216.33 L1361.92 1216.33 L1361.33 1216.33 L1360.74 1216.33 L1360.16 1216.33 L1359.57 1216.33 L1358.98 1216.33 L1358.4 1216.33 L1357.81 1216.33 L1357.22 1216.33 L1356.64 1216.33 L1356.05 1216.33 L1355.47 1216.33 L1354.88 1216.33 L1354.29 1216.33 L1353.71 1216.33 L1353.12 1216.33 L1352.53 1216.33 L1351.95 1216.33 L1351.36 1216.33 L1350.77 1216.33 L1350.19 1216.33 L1349.6 1216.33 L1349.01 1216.33 L1348.43 1216.33 L1347.84 1216.33 L1347.26 1216.33 L1346.67 1216.33 L1346.08 1216.33 L1345.5 1216.33 L1344.91 1216.33 L1344.32 1216.33 L1343.74 1216.33 L1343.15 1216.33 L1342.56 1216.33 L1341.98 1216.33 L1341.39 1216.33 L1340.8 1216.33 L1340.22 1216.33 L1339.63 1216.33 L1339.05 1216.33 L1338.46 1216.33 L1337.87 1216.33 L1337.29 1216.33 L1336.7 1216.33 L1336.11 1216.33 L1335.53 1216.33 L1334.94 1216.33 L1334.35 1216.33 L1333.77 1216.33 L1333.18 1216.33 L1332.6 1216.33 L1332.01 1216.33 L1331.42 1216.33 L1330.84 1216.33 L1330.25 1216.33 L1329.66 1216.33 L1329.08 1216.33 L1328.49 1216.33 L1327.9 1216.33 L1327.32 1216.33 L1326.73 1216.33 L1326.14 1216.33 L1325.56 1216.33 L1324.97 1216.33 L1324.39 1216.33 L1323.8 1216.33 L1323.21 1216.33 L1322.63 1216.33 L1322.04 1216.33 L1321.45 1216.33 L1320.87 1216.33 L1320.28 1216.33 L1319.69 1216.33 L1319.11 1216.33 L1318.52 1216.33 L1317.93 1216.33 L1317.35 1216.33 L1316.76 1216.33 L1316.18 1216.33 L1315.59 1216.33 L1315 1216.33 L1314.42 1216.33 L1313.83 1216.33 L1313.24 1216.33 L1312.66 1216.33 L1312.07 1216.33 L1311.48 1216.33 L1310.9 1216.33 L1310.31 1216.33 L1309.73 1216.33 L1309.14 1216.33 L1308.55 1216.33 L1307.97 1216.33 L1307.38 1216.33 L1306.79 1216.33 L1306.21 1216.33 L1305.62 1216.33 L1305.03 1216.33 L1304.45 1216.33 L1303.86 1216.33 L1303.27 1216.33 L1302.69 1216.33 L1302.1 1216.33 L1301.52 1216.33 L1300.93 1216.33 L1300.34 1216.33 L1299.76 1216.33 L1299.17 1216.33 L1298.58 1216.33 L1298 1216.33 L1297.41 1216.33 L1296.82 1216.33 L1296.24 1216.33 L1295.65 1216.33 L1295.06 1216.33 L1294.48 1216.33 L1293.89 1216.33 L1293.31 1216.33 L1292.72 1216.33 L1292.13 1216.33 L1291.55 1216.33 L1290.96 1216.33 L1290.37 1216.33 L1289.79 1216.33 L1289.2 1216.33 L1288.61 1216.33 L1288.03 1216.33 L1287.44 1216.33 L1286.86 1216.33 L1286.27 1216.33 L1285.68 1216.33 L1285.1 1216.33 L1284.51 1216.33 L1283.92 1216.33 L1283.34 1216.33 L1282.75 1216.33 L1282.16 1216.33 L1281.58 1216.33 L1280.99 1216.33 L1280.4 1216.33 L1279.82 1216.33 L1279.23 1216.33 L1278.65 1216.33 L1278.06 1216.33 L1277.47 1216.33 L1276.89 1216.33 L1276.3 1216.33 L1275.71 1216.33 L1275.13 1216.33 L1274.54 1216.33 L1273.95 1216.33 L1273.37 1216.33 L1272.78 1216.33 L1272.19 1216.33 L1271.61 1216.33 L1271.02 1216.33 L1270.44 1216.33 L1269.85 1216.33 L1269.26 1216.33 L1268.68 1216.33 L1268.09 1216.33 L1267.5 1216.33 L1266.92 1216.33 L1266.33 1216.33 L1265.74 1216.33 L1265.16 1216.33 L1264.57 1216.33 L1263.98 1216.33 L1263.4 1216.33 L1262.81 1216.33 L1262.23 1216.33 L1261.64 1216.33 L1261.05 1216.33 L1260.47 1216.33 L1259.88 1216.33 L1259.29 1216.33 L1258.71 1216.33 L1258.12 1216.33 L1257.53 1216.33 L1256.95 1216.33 L1256.36 1216.33 L1255.78 1216.33 L1255.19 1216.33 L1254.6 1216.33 L1254.02 1216.33 L1253.43 1216.33 L1252.84 1216.33 L1252.26 1216.33 L1251.67 1216.33 L1251.08 1216.33 L1250.5 1216.33 L1249.91 1216.33 L1249.32 1216.33 L1248.74 1216.33 L1248.15 1216.33 L1247.57 1216.33 L1246.98 1216.33 L1246.39 1216.33 L1245.81 1216.33 L1245.22 1216.33 L1244.63 1216.33 L1244.05 1216.33 L1243.46 1216.33 L1242.87 1216.33 L1242.29 1216.33 L1241.7 1216.33 L1241.11 1216.33 L1240.53 1216.33 L1239.94 1216.33 L1239.36 1216.33 L1238.77 1216.33 L1238.18 1216.33 L1237.6 1216.33 L1237.01 1216.33 L1236.42 1216.33 L1235.84 1216.33 L1235.25 1216.33 L1234.66 1216.33 L1234.08 1216.33 L1233.49 1216.33 L1232.91 1216.33 L1232.32 1216.33 L1231.73 1216.33 L1231.15 1216.33 L1230.56 1216.33 L1229.97 1216.33 L1229.39 1216.33 L1228.8 1216.33 L1228.21 1216.33 L1227.63 1216.33 L1227.04 1216.33 L1226.45 1216.33 L1225.87 1216.33 L1225.28 1216.33 L1224.7 1216.33 L1224.11 1216.33 L1223.52 1216.33 L1222.94 1216.33 L1222.35 1216.33 L1221.76 1216.33 L1221.18 1216.33 L1220.59 1216.33 L1220 1216.33 L1219.42 1216.33 L1218.83 1216.33 L1218.24 1216.33 L1217.66 1216.33 L1217.07 1216.33 L1216.49 1216.33 L1215.9 1216.33 L1215.31 1216.33 L1214.73 1216.33 L1214.14 1216.33 L1213.55 1216.33 L1212.97 1216.33 L1212.38 1216.33 L1211.79 1216.33 L1211.21 1216.33 L1210.62 1216.33 L1210.03 1216.33 L1209.45 1216.33 L1208.86 1216.33 L1208.28 1216.33 L1207.69 1216.33 L1207.1 1216.33 L1206.52 1216.33 L1205.93 1216.33 L1205.34 1216.33 L1204.76 1216.33 L1204.17 1216.33 L1203.58 1216.33 L1203 1216.33 L1202.41 1216.33 L1201.83 1216.33 L1201.24 1216.33 L1200.65 1216.33 L1200.07 1216.33 L1199.48 1216.33 L1198.89 1216.33 L1198.31 1216.33 L1197.72 1216.33 L1197.13 1216.33 L1196.55 1216.33 L1195.96 1216.33 L1195.37 1216.33 L1194.79 1216.33 L1194.2 1216.33 L1193.62 1216.33 L1193.03 1216.33 L1192.44 1216.33 L1191.86 1216.33 L1191.27 1216.33 L1190.68 1216.33 L1190.1 1216.33 L1189.51 1216.33 L1188.92 1216.33 L1188.34 1216.33 L1187.75 1216.33 L1187.16 1216.33 L1186.58 1216.33 L1185.99 1216.33 L1185.41 1216.33 L1184.82 1216.33 L1184.23 1216.33 L1183.65 1216.33 L1183.06 1216.33 L1182.47 1216.33 L1181.89 1216.33 L1181.3 1216.33 L1180.71 1216.33 L1180.13 1216.33 L1179.54 1216.33 L1178.96 1216.33 L1178.37 1216.33 L1177.78 1216.33 L1177.2 1216.33 L1176.61 1216.33 L1176.02 1216.33 L1175.44 1216.33 L1174.85 1216.33 L1174.26 1216.33 L1173.68 1216.33 L1173.09 1216.33 L1172.5 1216.33 L1171.92 1216.33 L1171.33 1216.33 L1170.75 1216.33 L1170.16 1216.33 L1169.57 1216.33 L1168.99 1216.33 L1168.4 1216.33 L1167.81 1216.33 L1167.23 1216.33 L1166.64 1216.33 L1166.05 1216.33 L1165.47 1216.33 L1164.88 1216.33 L1164.29 1216.33 L1163.71 1216.33 L1163.12 1216.33 L1162.54 1216.33 L1161.95 1216.33 L1161.36 1216.33 L1160.78 1216.33 L1160.19 1216.33 L1159.6 1216.33 L1159.02 1216.33 L1158.43 1216.33 L1157.84 1216.33 L1157.26 1216.33 L1156.67 1216.33 L1156.09 1216.33 L1155.5 1216.33 L1154.91 1216.33 L1154.33 1216.33 L1153.74 1216.33 L1153.15 1216.33 L1152.57 1216.33 L1151.98 1216.33 L1151.39 1216.33 L1150.81 1216.33 L1150.22 1216.33 L1149.63 1216.33 L1149.05 1216.33 L1148.46 1216.33 L1147.88 1216.33 L1147.29 1216.33 L1146.7 1216.33 L1146.12 1216.33 L1145.53 1216.33 L1144.94 1216.33 L1144.36 1216.33 L1143.77 1216.33 L1143.18 1216.33 L1142.6 1216.33 L1142.01 1216.33 L1141.42 1216.33 L1140.84 1216.33 L1140.25 1216.33 L1139.67 1216.33 L1139.08 1216.33 L1138.49 1216.33 L1137.91 1216.33 L1137.32 1216.33 L1136.73 1216.33 L1136.15 1216.33 L1135.56 1216.33 L1134.97 1216.33 L1134.39 1216.33 L1133.8 1216.33 L1133.21 1216.33 L1132.63 1216.33 L1132.04 1216.33 L1131.46 1216.33 L1130.87 1216.33 L1130.28 1216.33 L1129.7 1216.33 L1129.11 1216.33 L1128.52 1216.33 L1127.94 1216.33 L1127.35 1216.33 L1126.76 1216.33 L1126.18 1216.33 L1125.59 1216.33 L1125.01 1216.33 L1124.42 1216.33 L1123.83 1216.33 L1123.25 1216.33 L1122.66 1216.33 L1122.07 1216.33 L1121.49 1216.33 L1120.9 1216.33 L1120.31 1216.33 L1119.73 1216.33 L1119.14 1216.33 L1118.55 1216.33 L1117.97 1216.33 L1117.38 1216.33 L1116.8 1216.33 L1116.21 1216.33 L1115.62 1216.33 L1115.04 1216.33 L1114.45 1216.33 L1113.86 1216.33 L1113.28 1216.33 L1112.69 1216.33 L1112.1 1216.33 L1111.52 1216.33 L1110.93 1216.33 L1110.34 1216.33 L1109.76 1216.33 L1109.17 1216.33 L1108.59 1216.33 L1108 1216.33 L1107.41 1216.33 L1106.83 1216.33 L1106.24 1216.33 L1105.65 1216.33 L1105.07 1216.33 L1104.48 1216.33 L1103.89 1216.33 L1103.31 1216.33 L1102.72 1216.33 L1102.14 1216.33 L1101.55 1216.33 L1100.96 1216.33 L1100.38 1216.33 L1099.79 1216.33 L1099.2 1216.33 L1098.62 1216.33 L1098.03 1216.33 L1097.44 1216.33 L1096.86 1216.33 L1096.27 1216.33 L1095.68 1216.33 L1095.1 1216.33 L1094.51 1216.33 L1093.93 1216.33 L1093.34 1216.33 L1092.75 1216.33 L1092.17 1216.33 L1091.58 1216.33 L1090.99 1216.33 L1090.41 1216.33 L1089.82 1216.33 L1089.23 1216.33 L1088.65 1216.33 L1088.06 1216.33 L1087.47 1216.33 L1086.89 1216.33 L1086.3 1216.33 L1085.72 1216.33 L1085.13 1216.33 L1084.54 1216.33 L1083.96 1216.33 L1083.37 1216.33 L1082.78 1216.33 L1082.2 1216.33 L1081.61 1216.33 L1081.02 1216.33 L1080.44 1216.33 L1079.85 1216.33 L1079.26 1216.33 L1078.68 1216.33 L1078.09 1216.33 L1077.51 1216.33 L1076.92 1216.33 L1076.33 1216.33 L1075.75 1216.33 L1075.16 1216.33 L1074.57 1216.33 L1073.99 1216.33 L1073.4 1216.33 L1072.81 1216.33 L1072.23 1216.33 L1071.64 1216.33 L1071.06 1216.33 L1070.47 1216.33 L1069.88 1216.33 L1069.3 1216.33 L1068.71 1216.33 L1068.12 1216.33 L1067.54 1216.33 L1066.95 1216.33 L1066.36 1216.33 L1065.78 1216.33 L1065.19 1216.33 L1064.6 1216.33 L1064.02 1216.33 L1063.43 1216.33 L1062.85 1216.33 L1062.26 1216.33 L1061.67 1216.33 L1061.09 1216.33 L1060.5 1216.33 L1059.91 1216.33 L1059.33 1216.33 L1058.74 1216.33 L1058.15 1216.33 L1057.57 1216.33 L1056.98 1216.33 L1056.39 1216.33 L1055.81 1216.33 L1055.22 1216.33 L1054.64 1216.33 L1054.05 1216.33 L1053.46 1216.33 L1052.88 1216.33 L1052.29 1216.33 L1051.7 1216.33 L1051.12 1216.33 L1050.53 1216.33 L1049.94 1216.33 L1049.36 1216.33 L1048.77 1216.33 L1048.19 1216.33 L1047.6 1216.33 L1047.01 1216.33 L1046.43 1216.33 L1045.84 1216.33 L1045.25 1216.33 L1044.67 1216.33 L1044.08 1216.33 L1043.49 1216.33 L1042.91 1216.33 L1042.32 1216.33 L1041.73 1216.33 L1041.15 1216.33 L1040.56 1216.33 L1039.98 1216.33 L1039.39 1216.33 L1038.8 1216.33 L1038.22 1216.33 L1037.63 1216.33 L1037.04 1216.33 L1036.46 1216.33 L1035.87 1216.33 L1035.28 1216.33 L1034.7 1216.33 L1034.11 1216.33 L1033.52 1216.33 L1032.94 1216.33 L1032.35 1216.33 L1031.77 1216.33 L1031.18 1216.33 L1030.59 1216.33 L1030.01 1216.33 L1029.42 1216.33 L1028.83 1216.33 L1028.25 1216.33 L1027.66 1216.33 L1027.07 1216.33 L1026.49 1216.33 L1025.9 1216.33 L1025.32 1216.33 L1024.73 1216.33 L1024.14 1216.33 L1023.56 1216.33 L1022.97 1216.33 L1022.38 1216.33 L1021.8 1216.33 L1021.21 1216.33 L1020.62 1216.33 L1020.04 1216.33 L1019.45 1216.33 L1018.86 1216.33 L1018.28 1216.33 L1017.69 1216.33 L1017.11 1216.33 L1016.52 1216.33 L1015.93 1216.33 L1015.35 1216.33 L1014.76 1216.33 L1014.17 1216.33 L1013.59 1216.33 L1013 1216.33 L1012.41 1216.33 L1011.83 1216.33 L1011.24 1216.33 L1010.65 1216.33 L1010.07 1216.33 L1009.48 1216.33 L1008.9 1216.33 L1008.31 1216.33 L1007.72 1216.33 L1007.14 1216.33 L1006.55 1216.33 L1005.96 1216.33 L1005.38 1216.33 L1004.79 1216.33 L1004.2 1216.33 L1003.62 1216.33 L1003.03 1216.33 L1002.44 1216.33 L1001.86 1216.33 L1001.27 1216.33 L1000.69 1216.33 L1000.1 1216.33 L999.513 1216.33 L998.926 1216.33 L998.34 1216.33 L997.754 1216.33 L997.167 1216.33 L996.581 1216.33 L995.994 1216.33 L995.408 1216.33 L994.822 1216.33 L994.235 1216.33 L993.649 1216.33 L993.062 1216.33 L992.476 1216.33 L991.889 1216.33 L991.303 1216.33 L990.717 1216.33 L990.13 1216.33 L989.544 1216.33 L988.957 1216.33 L988.371 1216.33 L987.785 1216.33 L987.198 1216.33 L986.612 1216.33 L986.025 1216.33  Z\" fill=\"#e26f46\" fill-rule=\"evenodd\" fill-opacity=\"0.5\"/>\n<polyline clip-path=\"url(#clip762)\" style=\"stroke:#e26f46; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"986.025,1216.69 986.612,1216.69 987.198,1216.69 987.785,1216.69 988.371,1216.69 988.957,1216.69 989.544,1216.69 990.13,1216.69 990.717,1216.69 991.303,1216.69 991.889,1216.69 992.476,1216.69 993.062,1216.69 993.649,1216.69 994.235,1216.69 994.822,1216.69 995.408,1216.69 995.994,1216.69 996.581,1216.69 997.167,1216.69 997.754,1216.69 998.34,1216.69 998.926,1216.69 999.513,1216.69 1000.1,1216.69 1000.69,1216.69 1001.27,1216.69 1001.86,1216.69 1002.44,1216.69 1003.03,1216.69 1003.62,1216.69 1004.2,1216.69 1004.79,1216.69 1005.38,1216.69 1005.96,1216.69 1006.55,1216.69 1007.14,1216.69 1007.72,1216.69 1008.31,1216.69 1008.9,1216.69 1009.48,1216.69 1010.07,1216.69 1010.65,1216.69 1011.24,1216.69 1011.83,1216.69 1012.41,1216.69 1013,1216.69 1013.59,1216.69 1014.17,1216.69 1014.76,1216.69 1015.35,1216.69 1015.93,1216.69 1016.52,1216.69 1017.11,1216.69 1017.69,1216.69 1018.28,1216.69 1018.86,1216.69 1019.45,1216.69 1020.04,1216.69 1020.62,1216.69 1021.21,1216.69 1021.8,1216.69 1022.38,1216.69 1022.97,1216.69 1023.56,1216.69 1024.14,1216.69 1024.73,1216.69 1025.32,1216.69 1025.9,1216.69 1026.49,1216.69 1027.07,1216.69 1027.66,1216.69 1028.25,1216.69 1028.83,1216.69 1029.42,1216.69 1030.01,1216.69 1030.59,1216.69 1031.18,1216.69 1031.77,1216.69 1032.35,1216.69 1032.94,1216.69 1033.52,1216.69 1034.11,1216.69 1034.7,1216.69 1035.28,1216.69 1035.87,1216.69 1036.46,1216.69 1037.04,1216.69 1037.63,1216.69 1038.22,1216.69 1038.8,1216.69 1039.39,1216.69 1039.98,1216.69 1040.56,1216.69 1041.15,1216.69 1041.73,1216.69 1042.32,1216.69 1042.91,1216.69 1043.49,1216.69 1044.08,1216.69 1044.67,1216.69 1045.25,1216.69 1045.84,1216.69 1046.43,1216.69 1047.01,1216.69 1047.6,1216.69 1048.19,1216.69 1048.77,1216.69 1049.36,1216.69 1049.94,1216.69 1050.53,1216.69 1051.12,1216.69 1051.7,1216.69 1052.29,1216.69 1052.88,1216.69 1053.46,1216.69 1054.05,1216.69 1054.64,1216.69 1055.22,1216.69 1055.81,1216.69 1056.39,1216.69 1056.98,1216.69 1057.57,1216.69 1058.15,1216.69 1058.74,1216.69 1059.33,1216.69 1059.91,1216.69 1060.5,1216.69 1061.09,1216.69 1061.67,1216.69 1062.26,1216.69 1062.85,1216.69 1063.43,1216.69 1064.02,1216.69 1064.6,1216.69 1065.19,1216.69 1065.78,1216.69 1066.36,1216.69 1066.95,1216.69 1067.54,1216.69 1068.12,1216.69 1068.71,1216.69 1069.3,1216.69 1069.88,1216.69 1070.47,1216.69 1071.06,1216.69 1071.64,1216.69 1072.23,1216.69 1072.81,1216.69 1073.4,1216.69 1073.99,1216.69 1074.57,1216.69 1075.16,1216.69 1075.75,1216.69 1076.33,1216.69 1076.92,1216.69 1077.51,1216.69 1078.09,1216.69 1078.68,1216.69 1079.26,1216.69 1079.85,1216.69 1080.44,1216.69 1081.02,1216.69 1081.61,1216.69 1082.2,1216.69 1082.78,1216.69 1083.37,1216.69 1083.96,1216.69 1084.54,1216.69 1085.13,1216.69 1085.72,1216.69 1086.3,1216.69 1086.89,1216.69 1087.47,1216.69 1088.06,1216.69 1088.65,1216.69 1089.23,1216.69 1089.82,1216.69 1090.41,1216.69 1090.99,1216.69 1091.58,1216.69 1092.17,1216.69 1092.75,1216.69 1093.34,1216.69 1093.93,1216.69 1094.51,1216.69 1095.1,1216.69 1095.68,1216.69 1096.27,1216.69 1096.86,1216.69 1097.44,1216.69 1098.03,1216.69 1098.62,1216.69 1099.2,1216.69 1099.79,1216.69 1100.38,1216.69 1100.96,1216.69 1101.55,1216.69 1102.14,1216.69 1102.72,1216.69 1103.31,1216.69 1103.89,1216.69 1104.48,1216.69 1105.07,1216.69 1105.65,1216.69 1106.24,1216.69 1106.83,1216.69 1107.41,1216.69 1108,1216.69 1108.59,1216.69 1109.17,1216.69 1109.76,1216.69 1110.34,1216.69 1110.93,1216.69 1111.52,1216.69 1112.1,1216.69 1112.69,1216.69 1113.28,1216.69 1113.86,1216.69 1114.45,1216.69 1115.04,1216.69 1115.62,1216.69 1116.21,1216.69 1116.8,1216.69 1117.38,1216.69 1117.97,1216.69 1118.55,1216.69 1119.14,1216.69 1119.73,1216.69 1120.31,1216.69 1120.9,1216.69 1121.49,1216.69 1122.07,1216.69 1122.66,1216.69 1123.25,1216.69 1123.83,1216.69 1124.42,1216.69 1125.01,1216.69 1125.59,1216.69 1126.18,1216.69 1126.76,1216.69 1127.35,1216.69 1127.94,1216.69 1128.52,1216.69 1129.11,1216.69 1129.7,1216.69 1130.28,1216.69 1130.87,1216.69 1131.46,1216.69 1132.04,1216.69 1132.63,1216.69 1133.21,1216.69 1133.8,1216.69 1134.39,1216.69 1134.97,1216.69 1135.56,1216.69 1136.15,1216.69 1136.73,1216.69 1137.32,1216.69 1137.91,1216.69 1138.49,1216.69 1139.08,1216.69 1139.67,1216.69 1140.25,1216.69 1140.84,1216.69 1141.42,1216.69 1142.01,1216.69 1142.6,1216.69 1143.18,1216.69 1143.77,1216.69 1144.36,1216.69 1144.94,1216.69 1145.53,1216.69 1146.12,1216.69 1146.7,1216.69 1147.29,1216.69 1147.88,1216.69 1148.46,1216.69 1149.05,1216.69 1149.63,1216.69 1150.22,1216.69 1150.81,1216.69 1151.39,1216.69 1151.98,1216.69 1152.57,1216.69 1153.15,1216.69 1153.74,1216.69 1154.33,1216.69 1154.91,1216.69 1155.5,1216.69 1156.09,1216.69 1156.67,1216.69 1157.26,1216.69 1157.84,1216.69 1158.43,1216.69 1159.02,1216.69 1159.6,1216.69 1160.19,1216.69 1160.78,1216.69 1161.36,1216.69 1161.95,1216.69 1162.54,1216.69 1163.12,1216.69 1163.71,1216.69 1164.29,1216.69 1164.88,1216.69 1165.47,1216.69 1166.05,1216.69 1166.64,1216.69 1167.23,1216.69 1167.81,1216.69 1168.4,1216.69 1168.99,1216.69 1169.57,1216.69 1170.16,1216.69 1170.75,1216.69 1171.33,1216.69 1171.92,1216.69 1172.5,1216.69 1173.09,1216.69 1173.68,1216.69 1174.26,1216.69 1174.85,1216.69 1175.44,1216.69 1176.02,1216.69 1176.61,1216.69 1177.2,1216.69 1177.78,1216.69 1178.37,1216.69 1178.96,1216.69 1179.54,1216.69 1180.13,1216.69 1180.71,1216.69 1181.3,1216.69 1181.89,1216.69 1182.47,1216.69 1183.06,1216.69 1183.65,1216.69 1184.23,1216.69 1184.82,1216.69 1185.41,1216.69 1185.99,1216.69 1186.58,1216.69 1187.16,1216.69 1187.75,1216.69 1188.34,1216.69 1188.92,1216.69 1189.51,1216.69 1190.1,1216.69 1190.68,1216.69 1191.27,1216.69 1191.86,1216.69 1192.44,1216.69 1193.03,1216.69 1193.62,1216.69 1194.2,1216.69 1194.79,1216.69 1195.37,1216.69 1195.96,1216.69 1196.55,1216.69 1197.13,1216.69 1197.72,1216.69 1198.31,1216.69 1198.89,1216.69 1199.48,1216.69 1200.07,1216.69 1200.65,1216.69 1201.24,1216.69 1201.83,1216.69 1202.41,1216.69 1203,1216.69 1203.58,1216.69 1204.17,1216.69 1204.76,1216.69 1205.34,1216.69 1205.93,1216.69 1206.52,1216.69 1207.1,1216.69 1207.69,1216.69 1208.28,1216.69 1208.86,1216.69 1209.45,1216.69 1210.03,1216.69 1210.62,1216.69 1211.21,1216.69 1211.79,1216.69 1212.38,1216.69 1212.97,1216.69 1213.55,1216.69 1214.14,1216.69 1214.73,1216.69 1215.31,1216.69 1215.9,1216.69 1216.49,1216.69 1217.07,1216.69 1217.66,1216.69 1218.24,1216.69 1218.83,1216.69 1219.42,1216.69 1220,1216.69 1220.59,1216.69 1221.18,1216.69 1221.76,1216.69 1222.35,1216.69 1222.94,1216.69 1223.52,1216.69 1224.11,1216.69 1224.7,1216.69 1225.28,1216.69 1225.87,1216.69 1226.45,1216.69 1227.04,1216.69 1227.63,1216.69 1228.21,1216.69 1228.8,1216.69 1229.39,1216.69 1229.97,1216.69 1230.56,1216.69 1231.15,1216.69 1231.73,1216.69 1232.32,1216.69 1232.91,1216.69 1233.49,1216.69 1234.08,1216.69 1234.66,1216.69 1235.25,1216.69 1235.84,1216.69 1236.42,1216.69 1237.01,1216.69 1237.6,1216.69 1238.18,1216.69 1238.77,1216.69 1239.36,1216.69 1239.94,1216.69 1240.53,1216.69 1241.11,1216.69 1241.7,1216.69 1242.29,1216.69 1242.87,1216.69 1243.46,1216.69 1244.05,1216.69 1244.63,1216.69 1245.22,1216.69 1245.81,1216.69 1246.39,1216.69 1246.98,1216.69 1247.57,1216.69 1248.15,1216.69 1248.74,1216.69 1249.32,1216.69 1249.91,1216.69 1250.5,1216.69 1251.08,1216.69 1251.67,1216.69 1252.26,1216.69 1252.84,1216.69 1253.43,1216.69 1254.02,1216.69 1254.6,1216.69 1255.19,1216.69 1255.78,1216.69 1256.36,1216.69 1256.95,1216.69 1257.53,1216.69 1258.12,1216.69 1258.71,1216.69 1259.29,1216.69 1259.88,1216.69 1260.47,1216.69 1261.05,1216.69 1261.64,1216.69 1262.23,1216.69 1262.81,1216.69 1263.4,1216.69 1263.98,1216.69 1264.57,1216.69 1265.16,1216.69 1265.74,1216.69 1266.33,1216.69 1266.92,1216.69 1267.5,1216.69 1268.09,1216.69 1268.68,1216.69 1269.26,1216.69 1269.85,1216.69 1270.44,1216.69 1271.02,1216.69 1271.61,1216.69 1272.19,1216.69 1272.78,1216.69 1273.37,1216.69 1273.95,1216.69 1274.54,1216.69 1275.13,1216.69 1275.71,1216.69 1276.3,1216.69 1276.89,1216.69 1277.47,1216.69 1278.06,1216.69 1278.65,1216.69 1279.23,1216.69 1279.82,1216.69 1280.4,1216.69 1280.99,1216.69 1281.58,1216.69 1282.16,1216.69 1282.75,1216.69 1283.34,1216.69 1283.92,1216.69 1284.51,1216.69 1285.1,1216.69 1285.68,1216.69 1286.27,1216.69 1286.86,1216.69 1287.44,1216.69 1288.03,1216.69 1288.61,1216.69 1289.2,1216.69 1289.79,1216.69 1290.37,1216.69 1290.96,1216.69 1291.55,1216.69 1292.13,1216.69 1292.72,1216.69 1293.31,1216.69 1293.89,1216.69 1294.48,1216.69 1295.06,1216.69 1295.65,1216.69 1296.24,1216.69 1296.82,1216.69 1297.41,1216.69 1298,1216.69 1298.58,1216.69 1299.17,1216.69 1299.76,1216.69 1300.34,1216.69 1300.93,1216.69 1301.52,1216.69 1302.1,1216.69 1302.69,1216.69 1303.27,1216.69 1303.86,1216.69 1304.45,1216.69 1305.03,1216.69 1305.62,1216.69 1306.21,1216.69 1306.79,1216.69 1307.38,1216.69 1307.97,1216.69 1308.55,1216.69 1309.14,1216.69 1309.73,1216.69 1310.31,1216.69 1310.9,1216.69 1311.48,1216.69 1312.07,1216.69 1312.66,1216.69 1313.24,1216.69 1313.83,1216.69 1314.42,1216.69 1315,1216.69 1315.59,1216.69 1316.18,1216.69 1316.76,1216.69 1317.35,1216.69 1317.93,1216.69 1318.52,1216.69 1319.11,1216.69 1319.69,1216.69 1320.28,1216.69 1320.87,1216.69 1321.45,1216.69 1322.04,1216.69 1322.63,1216.69 1323.21,1216.69 1323.8,1216.69 1324.39,1216.69 1324.97,1216.69 1325.56,1216.69 1326.14,1216.69 1326.73,1216.69 1327.32,1216.69 1327.9,1216.69 1328.49,1216.69 1329.08,1216.69 1329.66,1216.69 1330.25,1216.69 1330.84,1216.69 1331.42,1216.69 1332.01,1216.69 1332.6,1216.69 1333.18,1216.69 1333.77,1216.69 1334.35,1216.69 1334.94,1216.69 1335.53,1216.69 1336.11,1216.69 1336.7,1216.69 1337.29,1216.69 1337.87,1216.69 1338.46,1216.69 1339.05,1216.69 1339.63,1216.69 1340.22,1216.69 1340.8,1216.69 1341.39,1216.69 1341.98,1216.69 1342.56,1216.69 1343.15,1216.69 1343.74,1216.69 1344.32,1216.69 1344.91,1216.69 1345.5,1216.69 1346.08,1216.69 1346.67,1216.69 1347.26,1216.69 1347.84,1216.69 1348.43,1216.69 1349.01,1216.69 1349.6,1216.69 1350.19,1216.69 1350.77,1216.69 1351.36,1216.69 1351.95,1216.69 1352.53,1216.69 1353.12,1216.69 1353.71,1216.69 1354.29,1216.69 1354.88,1216.69 1355.47,1216.69 1356.05,1216.69 1356.64,1216.69 1357.22,1216.69 1357.81,1216.69 1358.4,1216.69 1358.98,1216.69 1359.57,1216.69 1360.16,1216.69 1360.74,1216.69 1361.33,1216.69 1361.92,1216.69 1362.5,1216.69 1363.09,1216.69 1363.68,1216.69 1364.26,1216.69 1364.85,1216.69 1365.43,1216.69 1366.02,1216.69 1366.61,1216.69 1367.19,1216.69 1367.78,1216.69 1368.37,1216.69 1368.95,1216.69 1369.54,1216.69 1370.13,1216.69 1370.71,1216.69 1371.3,1216.69 1371.88,1216.69 1372.47,1216.69 1373.06,1216.69 1373.64,1216.69 1374.23,1216.69 1374.82,1216.69 1375.4,1216.69 1375.99,1216.69 1376.58,1216.69 1377.16,1216.69 1377.75,1216.69 1378.34,1216.69 1378.92,1216.69 1379.51,1216.69 1380.09,1216.69 1380.68,1216.69 1381.27,1216.69 1381.85,1216.69 1382.44,1216.69 1383.03,1216.69 1383.61,1216.69 1384.2,1216.69 1384.79,1216.69 1385.37,1216.69 1385.96,1216.69 1386.55,1216.69 1387.13,1216.69 1387.72,1216.69 1388.3,1216.69 1388.89,1216.69 1389.48,1216.69 1390.06,1216.69 1390.65,1216.69 1391.24,1216.69 1391.82,1216.69 1392.41,1216.69 1393,1216.69 1393.58,1216.69 1394.17,1216.69 1394.75,1216.69 1395.34,1216.69 1395.93,1216.69 1396.51,1216.69 1397.1,1216.69 1397.69,1216.69 1398.27,1216.69 1398.86,1216.69 1399.45,1216.69 1400.03,1216.69 1400.62,1216.69 1401.21,1216.69 1401.79,1216.69 1402.38,1216.69 1402.96,1216.69 1403.55,1216.69 1404.14,1216.69 1404.72,1216.69 1405.31,1216.69 1405.9,1216.69 1406.48,1216.69 1407.07,1216.69 1407.66,1216.69 1408.24,1216.69 1408.83,1216.69 1409.42,1216.69 1410,1216.69 1410.59,1216.69 1411.17,1216.69 1411.76,1216.69 1412.35,1216.69 1412.93,1216.69 1413.52,1216.69 1414.11,1216.69 1414.69,1216.69 1415.28,1216.69 1415.87,1216.69 1416.45,1216.69 1417.04,1216.69 1417.63,1216.69 1418.21,1216.69 1418.8,1216.69 1419.38,1216.69 1419.97,1216.69 1420.56,1216.69 1421.14,1216.69 1421.73,1216.69 1422.32,1216.69 1422.9,1216.69 1423.49,1216.69 1424.08,1216.69 1424.66,1216.69 1425.25,1216.69 1425.83,1216.69 1426.42,1216.69 1427.01,1216.69 1427.59,1216.69 1428.18,1216.69 1428.77,1216.69 1429.35,1216.69 1429.94,1216.69 1430.53,1216.69 1431.11,1216.69 1431.7,1216.69 1432.29,1216.69 1432.87,1216.69 1433.46,1216.69 1434.04,1216.69 1434.63,1216.69 1435.22,1216.69 1435.8,1216.69 1436.39,1216.69 1436.98,1216.69 1437.56,1216.69 1438.15,1216.69 1438.74,1216.69 1439.32,1216.69 1439.91,1216.69 1440.5,1216.69 1441.08,1216.69 1441.67,1216.69 1442.25,1216.69 1442.84,1216.69 1443.43,1216.69 1444.01,1216.69 1444.6,1216.69 1445.19,1216.69 1445.77,1216.69 1446.36,1216.69 1446.95,1216.69 1447.53,1216.69 1448.12,1216.69 1448.7,1216.69 1449.29,1216.69 1449.88,1216.69 1450.46,1216.69 1451.05,1216.69 1451.64,1216.69 1452.22,1216.69 1452.81,1216.69 1453.4,1216.69 1453.98,1216.69 1454.57,1216.69 1455.16,1216.69 1455.74,1216.69 1456.33,1216.69 1456.91,1216.69 1457.5,1216.69 1458.09,1216.69 1458.67,1216.69 1459.26,1216.69 1459.85,1216.69 1460.43,1216.69 1461.02,1216.69 1461.61,1216.69 1462.19,1216.69 1462.78,1216.69 1463.37,1216.69 1463.95,1216.69 1464.54,1216.69 1465.12,1216.69 1465.71,1216.69 1466.3,1216.69 1466.88,1216.69 1467.47,1216.69 1468.06,1216.69 1468.64,1216.69 1469.23,1216.69 1469.82,1216.69 1470.4,1216.69 1470.99,1216.69 1471.57,1216.69 1472.16,1216.69 1472.75,1216.69 1473.33,1216.69 1473.92,1216.69 1474.51,1216.69 1475.09,1216.69 1475.68,1216.69 1476.27,1216.69 1476.85,1216.69 1477.44,1216.69 1478.03,1216.69 1478.61,1216.69 1479.2,1216.69 1479.78,1216.69 1480.37,1216.69 1480.96,1216.69 1481.54,1216.69 1482.13,1216.69 1482.72,1216.69 1483.3,1216.69 1483.89,1216.69 1484.48,1216.69 1485.06,1216.69 1485.65,1216.69 1486.24,1216.69 1486.82,1216.69 1487.41,1216.69 1487.99,1216.69 1488.58,1216.69 1489.17,1216.69 1489.75,1216.69 1490.34,1216.69 1490.93,1216.69 1491.51,1216.69 1492.1,1216.69 1492.69,1216.69 1493.27,1216.69 1493.86,1216.69 1494.45,1216.69 1495.03,1216.69 1495.62,1216.69 1496.2,1216.69 1496.79,1216.69 1497.38,1216.69 1497.96,1216.69 1498.55,1216.69 1499.14,1216.69 1499.72,1216.69 1500.31,1216.69 1500.9,1216.69 1501.48,1216.69 1502.07,1216.69 1502.65,1216.69 1503.24,1216.69 1503.83,1216.69 1504.41,1216.69 1505,1216.69 1505.59,1216.69 1506.17,1216.69 1506.76,1216.69 1507.35,1216.69 1507.93,1216.69 1508.52,1216.69 1509.11,1216.69 1509.69,1216.69 1510.28,1216.69 1510.86,1216.69 1511.45,1216.69 1512.04,1216.69 1512.62,1216.69 1513.21,1216.69 1513.8,1216.69 1514.38,1216.69 1514.97,1216.69 1515.56,1216.69 1516.14,1216.69 1516.73,1216.69 1517.32,1216.69 1517.9,1216.69 1518.49,1216.69 1519.07,1216.69 1519.66,1216.69 1520.25,1216.69 1520.83,1216.69 1521.42,1216.69 1522.01,1216.69 1522.59,1216.69 1523.18,1216.69 1523.77,1216.69 1524.35,1216.69 1524.94,1216.69 1525.52,1216.69 1526.11,1216.69 1526.7,1216.69 1527.28,1216.69 1527.87,1216.69 1528.46,1216.69 1529.04,1216.69 1529.63,1216.69 1530.22,1216.69 1530.8,1216.69 1531.39,1216.69 1531.98,1216.69 1532.56,1216.69 1533.15,1216.69 1533.73,1216.69 1534.32,1216.69 1534.91,1216.69 1535.49,1216.69 1536.08,1216.69 1536.67,1216.69 1537.25,1216.69 1537.84,1216.69 1538.43,1216.69 1539.01,1216.69 1539.6,1216.69 1540.19,1216.69 1540.77,1216.69 1541.36,1216.69 1541.94,1216.69 1542.53,1216.69 1543.12,1216.69 1543.7,1216.69 1544.29,1216.69 1544.88,1216.69 1545.46,1216.69 1546.05,1216.69 1546.64,1216.69 1547.22,1216.69 1547.81,1216.69 1548.4,1216.69 1548.98,1216.69 1549.57,1216.69 1550.15,1216.69 1550.74,1216.69 1551.33,1216.69 1551.91,1216.69 1552.5,1216.69 1553.09,1216.69 1553.67,1216.69 1554.26,1216.69 1554.85,1216.69 1555.43,1216.69 1556.02,1216.69 1556.6,1216.69 1557.19,1216.69 1557.78,1216.69 1558.36,1216.69 1558.95,1216.69 1559.54,1216.69 1560.12,1216.69 1560.71,1216.69 1561.3,1216.69 1561.88,1216.69 1562.47,1216.69 1563.06,1216.69 1563.64,1216.69 1564.23,1216.69 1564.81,1216.69 1565.4,1216.69 1565.99,1216.69 1566.57,1216.69 1567.16,1216.69 1567.75,1216.69 1568.33,1216.69 1568.92,1216.69 1569.51,1216.69 1570.09,1216.69 1570.68,1216.69 1571.27,1216.69 1571.85,1216.69 1572.44,1216.69 1573.02,1216.69 1573.61,1216.69 1574.2,1216.69 1574.78,1216.69 1575.37,1216.69 1575.96,1216.69 1576.54,1216.69 1577.13,1216.69 1577.72,1216.69 1578.3,1216.69 1578.89,1216.69 1579.47,1216.69 1580.06,1216.69 1580.65,1216.69 1581.23,1216.69 1581.82,1216.69 1582.41,1216.69 1582.99,1216.69 1583.58,1216.69 1584.17,1216.69 1584.75,1216.69 1585.34,1216.69 1585.93,1216.69 1586.51,1216.69 1587.1,1216.69 1587.68,1216.69 1588.27,1216.69 1588.86,1216.69 1589.44,1216.69 1590.03,1216.69 1590.62,1216.69 1591.2,1216.69 1591.79,1216.69 1592.38,1216.69 1592.96,1216.69 1593.55,1216.69 1594.14,1216.69 1594.72,1216.69 1595.31,1216.69 1595.89,1216.69 1596.48,1216.69 1597.07,1216.69 1597.65,1216.69 1598.24,1216.69 1598.83,1216.69 1599.41,1216.69 1600,1216.69 1600.59,1216.69 1601.17,1216.69 1601.76,1216.69 1602.34,1216.69 1602.93,1216.69 1603.52,1216.69 1604.1,1216.69 1604.69,1216.69 1605.28,1216.69 1605.86,1216.69 1606.45,1216.69 1607.04,1216.69 1607.62,1216.69 1608.21,1216.69 1608.8,1216.69 1609.38,1216.69 1609.97,1216.69 1610.55,1216.69 1611.14,1216.69 1611.73,1216.69 1612.31,1216.69 1612.9,1216.69 1613.49,1216.69 1614.07,1216.69 1614.66,1216.69 1615.25,1216.69 1615.83,1216.69 1616.42,1216.69 1617.01,1216.69 1617.59,1216.69 1618.18,1216.69 1618.76,1216.69 1619.35,1216.69 1619.94,1216.69 1620.52,1216.69 1621.11,1216.69 1621.7,1216.69 1622.28,1216.69 1622.87,1216.69 1623.46,1216.69 1624.04,1216.69 1624.63,1216.69 1625.22,1216.69 1625.8,1216.69 1626.39,1216.69 1626.97,1216.69 1627.56,1216.69 1628.15,1216.69 1628.73,1216.69 1629.32,1216.69 1629.91,1216.69 1630.49,1216.69 1631.08,1216.69 1631.67,1216.69 1632.25,1216.69 1632.84,1216.69 1633.42,1216.69 1634.01,1216.69 1634.6,1216.69 1635.18,1216.69 1635.77,1216.69 1636.36,1216.69 1636.94,1216.69 1637.53,1216.69 1638.12,1216.69 1638.7,1216.69 1639.29,1216.69 1639.88,1216.69 1640.46,1216.69 1641.05,1216.69 1641.63,1216.69 1642.22,1216.69 1642.81,1216.69 1643.39,1216.69 1643.98,1216.69 1644.57,1216.69 1645.15,1216.69 1645.74,1216.69 1646.33,1216.69 1646.91,1216.69 1647.5,1216.69 1648.09,1216.69 1648.67,1216.69 1649.26,1216.69 1649.84,1216.69 1650.43,1216.69 1651.02,1216.69 1651.6,1216.69 1652.19,1216.69 1652.78,1216.69 1653.36,1216.69 1653.95,1216.69 1654.54,1216.69 1655.12,1216.69 1655.71,1216.69 1656.29,1216.69 1656.88,1216.69 1657.47,1216.69 1658.05,1216.69 1658.64,1216.69 1659.23,1216.69 1659.81,1216.69 1660.4,1216.69 1660.99,1216.69 1661.57,1216.69 1662.16,1216.69 1662.75,1216.69 1663.33,1216.69 1663.92,1216.69 1664.5,1216.69 1665.09,1216.69 1665.68,1216.69 1666.26,1216.69 1666.85,1216.69 1667.44,1216.69 1668.02,1216.69 1668.61,1216.69 1669.2,1216.69 1669.78,1216.69 1670.37,1216.69 1670.96,1216.69 1671.54,1216.69 1672.13,1216.69 1672.71,1216.69 1673.3,1216.69 1673.89,1216.69 1674.47,1216.69 1675.06,1216.69 1675.65,1216.69 1676.23,1216.69 1676.82,1216.69 1677.41,1216.69 1677.99,1216.69 1678.58,1216.69 1679.17,1216.69 1679.75,1216.69 1680.34,1216.69 1680.92,1216.69 1681.51,1216.69 1682.1,1216.69 1682.68,1216.69 1683.27,1216.69 1683.86,1216.69 1684.44,1216.69 1685.03,1216.69 1685.62,1216.69 1686.2,1216.69 1686.79,1216.69 1687.37,1216.69 1687.96,1216.69 1688.55,1216.69 1689.13,1216.69 1689.72,1216.69 1690.31,1216.69 1690.89,1216.69 1691.48,1216.69 1692.07,1216.69 1692.65,1216.69 1693.24,1216.69 1693.83,1216.69 1694.41,1216.69 1695,1216.69 1695.58,1216.69 1696.17,1216.69 1696.76,1216.69 1697.34,1216.69 1697.93,1216.69 1698.52,1216.69 1699.1,1216.69 1699.69,1216.69 1700.28,1216.69 1700.86,1216.69 1701.45,1216.69 1702.04,1216.69 1702.62,1216.69 1703.21,1216.69 1703.79,1216.69 1704.38,1216.69 1704.97,1216.69 1705.55,1216.69 1706.14,1216.69 1706.73,1216.69 1707.31,1216.69 1707.9,1216.69 1708.49,1216.69 1709.07,1216.69 1709.66,1216.69 1710.24,1216.69 1710.83,1216.69 1711.42,1216.69 1712,1216.69 1712.59,1216.69 1713.18,1216.69 1713.76,1216.69 1714.35,1216.69 1714.94,1216.69 1715.52,1216.69 1716.11,1216.69 1716.7,1216.69 1717.28,1216.69 1717.87,1216.69 1718.45,1216.69 1719.04,1216.69 1719.63,1216.69 1720.21,1216.69 1720.8,1216.69 1721.39,1216.69 1721.97,1216.69 1722.56,1216.69 1723.15,1216.69 1723.73,1216.69 1724.32,1216.69 1724.91,1216.69 1725.49,1216.69 1726.08,1216.69 1726.66,1216.69 1727.25,1216.69 1727.84,1216.69 1728.42,1216.69 1729.01,1216.69 1729.6,1216.69 1730.18,1216.69 1730.77,1216.69 1731.36,1216.69 1731.94,1216.69 1732.53,1216.69 1733.11,1216.69 1733.7,1216.69 1734.29,1216.69 1734.87,1216.69 1735.46,1216.69 1736.05,1216.69 1736.63,1216.69 1737.22,1216.69 1737.81,1216.69 1738.39,1216.69 1738.98,1216.69 1739.57,1216.69 1740.15,1216.69 1740.74,1216.69 1741.32,1216.69 1741.91,1216.69 1742.5,1216.69 1743.08,1216.69 1743.67,1216.69 1744.26,1216.69 1744.84,1216.69 1745.43,1216.69 1746.02,1216.69 1746.6,1216.69 1747.19,1216.69 1747.78,1216.69 1748.36,1216.69 1748.95,1216.69 1749.53,1216.69 1750.12,1216.69 1750.71,1216.69 1751.29,1216.69 1751.88,1216.69 1752.47,1216.69 1753.05,1216.69 1753.64,1216.69 1754.23,1216.69 1754.81,1216.69 1755.4,1216.69 1755.99,1216.69 1756.57,1216.69 1757.16,1216.69 1757.74,1216.69 1758.33,1216.69 1758.92,1216.69 1759.5,1216.69 1760.09,1216.69 1760.68,1216.69 1761.26,1216.69 1761.85,1216.69 1762.44,1216.69 1763.02,1216.69 1763.61,1216.69 1764.19,1216.69 1764.78,1216.69 1765.37,1216.69 1765.95,1216.69 1766.54,1216.69 1767.13,1216.69 1767.71,1216.69 1768.3,1216.69 1768.89,1216.69 1769.47,1216.69 1770.06,1216.69 1770.65,1216.69 1771.23,1216.69 1771.82,1216.69 1772.4,1216.69 1772.99,1216.69 1773.58,1216.69 1774.16,1216.69 1774.75,1216.69 1775.34,1216.69 1775.92,1216.69 1776.51,1216.69 1777.1,1216.69 1777.68,1216.69 1778.27,1216.69 1778.86,1216.69 1779.44,1216.69 1780.03,1216.69 1780.61,1216.69 1781.2,1216.69 1781.79,1216.69 1782.37,1216.69 1782.96,1216.69 1783.55,1216.69 1784.13,1216.69 1784.72,1216.69 1785.31,1216.69 1785.89,1216.69 1786.48,1216.69 1787.06,1216.69 1787.65,1216.69 1788.24,1216.69 1788.82,1216.69 1789.41,1216.69 1790,1216.69 1790.58,1216.69 1791.17,1216.69 1791.76,1216.69 1792.34,1216.69 1792.93,1216.69 1793.52,1216.69 1794.1,1216.69 1794.69,1216.69 1795.27,1216.69 1795.86,1216.69 1796.45,1216.69 1797.03,1216.69 1797.62,1216.69 1798.21,1216.69 1798.79,1216.69 1799.38,1216.69 1799.97,1216.69 1800.55,1216.69 1801.14,1216.69 1801.73,1216.69 1802.31,1216.69 1802.9,1216.69 1803.48,1216.69 1804.07,1216.69 1804.66,1216.69 1805.24,1216.69 1805.83,1216.69 1806.42,1216.69 1807,1216.69 1807.59,1216.69 1808.18,1216.69 1808.76,1216.69 1809.35,1216.69 1809.94,1216.69 1810.52,1216.69 1811.11,1216.69 1811.69,1216.69 1812.28,1216.69 1812.87,1216.69 1813.45,1216.69 1814.04,1216.69 1814.63,1216.69 1815.21,1216.69 1815.8,1216.69 1816.39,1216.69 1816.97,1216.69 1817.56,1216.69 1818.14,1216.69 1818.73,1216.69 1819.32,1216.69 1819.9,1216.69 1820.49,1216.69 1821.08,1216.69 1821.66,1216.69 1822.25,1216.69 1822.84,1216.69 1823.42,1216.69 1824.01,1216.69 1824.6,1216.69 1825.18,1216.69 1825.77,1216.69 1826.35,1216.69 1826.94,1216.69 1827.53,1216.69 1828.11,1216.69 1828.7,1216.69 1829.29,1216.69 1829.87,1216.69 1830.46,1216.69 1831.05,1216.69 1831.63,1216.69 1832.22,1216.69 1832.81,1216.69 1833.39,1216.69 1833.98,1216.69 1834.56,1216.69 1835.15,1216.69 1835.74,1216.69 1836.32,1216.69 1836.91,1216.69 1837.5,1216.69 1838.08,1216.69 1838.67,1216.69 1839.26,1216.69 1839.84,1216.69 1840.43,1216.69 1841.01,1216.69 1841.6,1216.69 1842.19,1216.69 1842.77,1216.69 1843.36,1216.69 1843.95,1216.69 1844.53,1216.69 1845.12,1216.69 1845.71,1216.69 1846.29,1216.69 1846.88,1216.69 1847.47,1216.69 1848.05,1216.69 1848.64,1216.69 1849.22,1216.69 1849.81,1216.69 1850.4,1216.69 1850.98,1216.69 1851.57,1216.69 1852.16,1216.69 1852.74,1216.69 1853.33,1216.69 1853.92,1216.69 1854.5,1216.69 1855.09,1216.69 1855.68,1216.69 1856.26,1216.69 1856.85,1216.69 1857.43,1216.69 1858.02,1216.69 1858.61,1216.69 1859.19,1216.69 1859.78,1216.69 1860.37,1216.69 1860.95,1216.69 1861.54,1216.69 1862.13,1216.69 1862.71,1216.69 1863.3,1216.69 1863.88,1216.69 1864.47,1216.69 1865.06,1216.69 1865.64,1216.69 1866.23,1216.69 1866.82,1216.69 1867.4,1216.69 1867.99,1216.69 1868.58,1216.69 1869.16,1216.69 1869.75,1216.69 1870.34,1216.69 1870.92,1216.69 1871.51,1216.69 1872.09,1216.69 1872.68,1216.69 1873.27,1216.69 1873.85,1216.69 1874.44,1216.69 1875.03,1216.69 1875.61,1216.69 1876.2,1216.69 1876.79,1216.69 1877.37,1216.69 1877.96,1216.69 1878.55,1216.69 1879.13,1216.69 1879.72,1216.69 1880.3,1216.69 1880.89,1216.69 1881.48,1216.69 1882.06,1216.69 1882.65,1216.69 1883.24,1216.69 1883.82,1216.69 1884.41,1216.69 1885,1216.69 1885.58,1216.69 1886.17,1216.69 1886.76,1216.69 1887.34,1216.69 1887.93,1216.69 1888.51,1216.69 1889.1,1216.69 1889.69,1216.69 1890.27,1216.69 1890.86,1216.69 1891.45,1216.69 1892.03,1216.69 1892.62,1216.69 1893.21,1216.69 1893.79,1216.69 1894.38,1216.69 1894.96,1216.69 1895.55,1216.69 1896.14,1216.69 1896.72,1216.69 1897.31,1216.69 1897.9,1216.69 1898.48,1216.69 1899.07,1216.69 1899.66,1216.69 1900.24,1216.69 1900.83,1216.69 1901.42,1216.69 1902,1216.69 1902.59,1216.69 1903.17,1216.69 1903.76,1216.69 1904.35,1216.69 1904.93,1216.69 1905.52,1216.69 1906.11,1216.69 1906.69,1216.69 1907.28,1216.69 1907.87,1216.69 1908.45,1216.69 1909.04,1216.69 1909.63,1216.69 1910.21,1216.69 1910.8,1216.69 1911.38,1216.69 1911.97,1216.69 1912.56,1216.69 1913.14,1216.69 1913.73,1216.69 1914.32,1216.69 1914.9,1216.69 1915.49,1216.69 1916.08,1216.69 1916.66,1216.69 1917.25,1216.69 1917.83,1216.69 1918.42,1216.69 1919.01,1216.69 1919.59,1216.69 1920.18,1216.69 1920.77,1216.69 1921.35,1216.69 1921.94,1216.69 1922.53,1216.69 1923.11,1216.69 1923.7,1216.69 1924.29,1216.69 1924.87,1216.69 1925.46,1216.69 1926.04,1216.69 1926.63,1216.69 1927.22,1216.69 1927.8,1216.69 1928.39,1216.69 1928.98,1216.69 1929.56,1216.69 1930.15,1216.69 1930.74,1216.69 1931.32,1216.69 1931.91,1216.69 1932.5,1216.69 1933.08,1216.69 1933.67,1216.69 1934.25,1216.69 1934.84,1216.69 1935.43,1216.69 1936.01,1216.69 1936.6,1216.69 1937.19,1216.69 1937.77,1216.69 1938.36,1216.69 1938.95,1216.69 1939.53,1216.69 1940.12,1216.69 1940.71,1216.69 1941.29,1216.69 1941.88,1216.69 1942.46,1216.69 1943.05,1216.69 1943.64,1216.69 1944.22,1216.69 1944.81,1216.69 1945.4,1216.69 1945.98,1216.69 1946.57,1216.69 1947.16,1216.69 1947.74,1216.69 1948.33,1216.69 1948.91,1216.69 1949.5,1216.69 1950.09,1216.69 1950.67,1216.69 1951.26,1216.69 1951.85,1216.69 1952.43,1216.69 1953.02,1216.69 1953.61,1216.69 1954.19,1216.69 1954.78,1216.69 1955.37,1216.69 1955.95,1216.69 1956.54,1216.69 1957.12,1216.69 1957.71,1216.69 1958.3,1216.69 1958.88,1216.69 1959.47,1216.69 1960.06,1216.69 1960.64,1216.69 1961.23,1216.69 1961.82,1216.69 1962.4,1216.69 1962.99,1216.69 1963.58,1216.69 1964.16,1216.69 1964.75,1216.69 1965.33,1216.69 1965.92,1216.69 1966.51,1216.69 1967.09,1216.69 1967.68,1216.69 1968.27,1216.69 1968.85,1216.69 1969.44,1216.69 1970.03,1216.69 1970.61,1216.69 1971.2,1216.69 1971.78,1216.69 1972.37,1216.69 1972.96,1216.69 1973.54,1216.69 1974.13,1216.69 1974.72,1216.69 1975.3,1216.69 1975.89,1216.69 1976.48,1216.69 1977.06,1216.69 1977.65,1216.69 1978.24,1216.69 1978.82,1216.69 1979.41,1216.69 1979.99,1216.69 1980.58,1216.69 1981.17,1216.69 1981.75,1216.69 1982.34,1216.69 1982.93,1216.69 1983.51,1216.69 1984.1,1216.69 1984.69,1216.69 1985.27,1216.69 1985.86,1216.69 1986.45,1216.69 1987.03,1216.69 1987.62,1216.69 1988.2,1216.69 1988.79,1216.69 1989.38,1216.69 1989.96,1216.69 1990.55,1216.69 1991.14,1216.69 1991.72,1216.69 1992.31,1216.69 1992.9,1216.69 1993.48,1216.69 1994.07,1216.69 1994.65,1216.69 1995.24,1216.69 1995.83,1216.69 1996.41,1216.69 1997,1216.69 1997.59,1216.69 1998.17,1216.69 1998.76,1216.69 1999.35,1216.69 1999.93,1216.69 2000.52,1216.69 2001.11,1216.69 2001.69,1216.69 2002.28,1216.69 2002.86,1216.69 2003.45,1216.69 2004.04,1216.69 2004.62,1216.69 2005.21,1216.69 2005.8,1216.69 2006.38,1216.69 2006.97,1216.69 2007.56,1216.69 2008.14,1216.69 2008.73,1216.69 2009.32,1216.69 2009.9,1216.69 2010.49,1216.69 2011.07,1216.69 2011.66,1216.69 2012.25,1216.69 2012.83,1216.69 2013.42,1216.69 2014.01,1216.69 2014.59,1216.69 2015.18,1216.69 2015.77,1216.69 2016.35,1216.69 2016.94,1216.69 2017.53,1216.69 2018.11,1216.69 2018.7,1216.69 2019.28,1216.69 2019.87,1216.69 2020.46,1216.69 2021.04,1216.69 2021.63,1216.69 2022.22,1216.69 2022.8,1216.69 2023.39,1216.69 2023.98,1216.69 2024.56,1216.69 2025.15,1216.69 2025.73,1216.69 2026.32,1216.69 2026.91,1216.69 2027.49,1216.69 2028.08,1216.69 2028.67,1216.69 2029.25,1216.69 2029.84,1216.69 2030.43,1216.69 2031.01,1216.69 2031.6,1216.69 2032.19,1216.69 2032.77,1216.69 2033.36,1216.69 2033.94,1216.69 2034.53,1216.69 2035.12,1216.69 2035.7,1216.69 2036.29,1216.69 2036.88,1216.69 2037.46,1216.69 2038.05,1216.69 2038.64,1216.69 2039.22,1216.69 2039.81,1216.69 2040.4,1216.69 2040.98,1216.69 2041.57,1216.69 2042.15,1216.69 2042.74,1216.69 2043.33,1216.69 2043.91,1216.69 2044.5,1216.69 2045.09,1216.69 2045.67,1216.69 2046.26,1216.69 2046.85,1216.69 2047.43,1216.69 2048.02,1216.69 2048.6,1216.69 2049.19,1216.69 2049.78,1216.69 2050.36,1216.69 2050.95,1216.69 2051.54,1216.69 2052.12,1216.69 2052.71,1216.69 2053.3,1216.69 2053.88,1216.69 2054.47,1216.69 2055.06,1216.69 2055.64,1216.69 2056.23,1216.69 2056.81,1216.69 2057.4,1216.69 2057.99,1216.69 2058.57,1216.69 2059.16,1216.69 2059.75,1216.69 2060.33,1216.69 2060.92,1216.69 2061.51,1216.69 2062.09,1216.69 2062.68,1216.69 2063.27,1216.69 2063.85,1216.69 2064.44,1216.69 2065.02,1216.69 2065.61,1216.69 2066.2,1216.69 2066.78,1216.69 2067.37,1216.69 2067.96,1216.69 2068.54,1216.69 2069.13,1216.69 2069.72,1216.69 2070.3,1216.69 2070.89,1216.69 2071.48,1216.69 2072.06,1216.69 2072.65,1216.69 2073.23,1216.69 2073.82,1216.69 2074.41,1216.69 2074.99,1216.69 2075.58,1216.69 2076.17,1216.69 2076.75,1216.69 2077.34,1216.69 2077.93,1216.69 2078.51,1216.69 2079.1,1216.69 2079.68,1216.69 2080.27,1216.69 2080.86,1216.69 2081.44,1216.69 2082.03,1216.69 2082.62,1216.69 2083.2,1216.69 2083.79,1216.69 2084.38,1216.69 2084.96,1216.69 2085.55,1216.69 2086.14,1216.69 2086.72,1216.69 2087.31,1216.69 2087.89,1216.69 2088.48,1216.69 2089.07,1216.69 2089.65,1216.69 2090.24,1216.69 2090.83,1216.69 2091.41,1216.69 2092,1216.69 2092.59,1216.69 2093.17,1216.69 2093.76,1216.69 2094.35,1216.69 2094.93,1216.69 2095.52,1216.69 2096.1,1216.69 2096.69,1216.69 2097.28,1216.69 2097.86,1216.69 2098.45,1216.69 2099.04,1216.69 2099.62,1216.69 2100.21,1216.69 2100.8,1216.69 2101.38,1216.69 2101.97,1216.69 2102.55,1216.69 2103.14,1216.69 2103.73,1216.69 2104.31,1216.69 2104.9,1216.69 2105.49,1216.69 2106.07,1216.69 2106.66,1216.69 2107.25,1216.69 2107.83,1216.69 2108.42,1216.69 2109.01,1216.69 2109.59,1216.69 2110.18,1216.69 2110.76,1216.69 2111.35,1216.69 2111.94,1216.69 2112.52,1216.69 2113.11,1216.69 2113.7,1216.69 2114.28,1216.69 2114.87,1216.69 2115.46,1216.69 2116.04,1216.69 2116.63,1216.69 2117.22,1216.69 2117.8,1216.69 2118.39,1216.69 2118.97,1216.69 2119.56,1216.69 2120.15,1216.69 2120.73,1216.69 2121.32,1216.69 2121.91,1216.69 2122.49,1216.69 2123.08,1216.69 2123.67,1216.69 2124.25,1216.69 2124.84,1216.69 2125.42,1216.69 2126.01,1216.69 2126.6,1216.69 2127.18,1216.69 2127.77,1216.69 2128.36,1216.69 2128.94,1216.69 2129.53,1216.69 2130.12,1216.69 2130.7,1216.69 2131.29,1216.69 2131.88,1216.69 2132.46,1216.69 2133.05,1216.69 2133.63,1216.69 2134.22,1216.69 2134.81,1216.69 2135.39,1216.69 2135.98,1216.69 2136.57,1216.69 2137.15,1216.69 2137.74,1216.69 2138.33,1216.69 2138.91,1216.69 2139.5,1216.69 2140.09,1216.69 2140.67,1216.69 2141.26,1216.69 2141.84,1216.69 2142.43,1216.69 2143.02,1216.69 2143.6,1216.69 2144.19,1216.69 2144.78,1216.69 2145.36,1216.69 2145.95,1216.69 2146.54,1216.69 2147.12,1216.69 2147.71,1216.69 2148.3,1216.69 2148.88,1216.69 2149.47,1216.69 2150.05,1216.69 2150.64,1216.69 2151.23,1216.69 2151.81,1216.69 2152.4,1216.69 2152.99,1216.69 2153.57,1216.69 2154.16,1216.69 2154.75,1216.69 2155.33,1216.69 2155.92,1216.69 2156.5,1216.69 2157.09,1216.69 2157.68,1216.69 2158.26,1216.69 \"/>\n<path clip-path=\"url(#clip762)\" d=\"M986.025 1216.6 L986.612 1216.6 L987.198 1216.6 L987.785 1216.6 L988.371 1216.6 L988.957 1216.6 L989.544 1216.6 L990.13 1216.6 L990.717 1216.6 L991.303 1216.6 L991.889 1216.6 L992.476 1216.6 L993.062 1216.6 L993.649 1216.6 L994.235 1216.6 L994.822 1216.6 L995.408 1216.6 L995.994 1216.6 L996.581 1216.6 L997.167 1216.6 L997.754 1216.6 L998.34 1216.6 L998.926 1216.6 L999.513 1216.6 L1000.1 1216.6 L1000.69 1216.6 L1001.27 1216.6 L1001.86 1216.6 L1002.44 1216.6 L1003.03 1216.6 L1003.62 1216.6 L1004.2 1216.6 L1004.79 1216.6 L1005.38 1216.6 L1005.96 1216.6 L1006.55 1216.6 L1007.14 1216.6 L1007.72 1216.6 L1008.31 1216.6 L1008.9 1216.6 L1009.48 1216.6 L1010.07 1216.6 L1010.65 1216.6 L1011.24 1216.6 L1011.83 1216.6 L1012.41 1216.6 L1013 1216.6 L1013.59 1216.6 L1014.17 1216.6 L1014.76 1216.6 L1015.35 1216.6 L1015.93 1216.6 L1016.52 1216.6 L1017.11 1216.6 L1017.69 1216.6 L1018.28 1216.6 L1018.86 1216.6 L1019.45 1216.6 L1020.04 1216.6 L1020.62 1216.6 L1021.21 1216.6 L1021.8 1216.6 L1022.38 1216.6 L1022.97 1216.6 L1023.56 1216.6 L1024.14 1216.6 L1024.73 1216.6 L1025.32 1216.6 L1025.9 1216.6 L1026.49 1216.6 L1027.07 1216.6 L1027.66 1216.6 L1028.25 1216.6 L1028.83 1216.6 L1029.42 1216.6 L1030.01 1216.6 L1030.59 1216.6 L1031.18 1216.6 L1031.77 1216.6 L1032.35 1216.6 L1032.94 1216.6 L1033.52 1216.6 L1034.11 1216.6 L1034.7 1216.6 L1035.28 1216.6 L1035.87 1216.6 L1036.46 1216.6 L1037.04 1216.6 L1037.63 1216.6 L1038.22 1216.6 L1038.8 1216.6 L1039.39 1216.6 L1039.98 1216.6 L1040.56 1216.6 L1041.15 1216.6 L1041.73 1216.6 L1042.32 1216.6 L1042.91 1216.6 L1043.49 1216.6 L1044.08 1216.6 L1044.67 1216.6 L1045.25 1216.6 L1045.84 1216.6 L1046.43 1216.6 L1047.01 1216.6 L1047.6 1216.6 L1048.19 1216.6 L1048.77 1216.6 L1049.36 1216.6 L1049.94 1216.6 L1050.53 1216.6 L1051.12 1216.6 L1051.7 1216.6 L1052.29 1216.6 L1052.88 1216.6 L1053.46 1216.6 L1054.05 1216.6 L1054.64 1216.6 L1055.22 1216.6 L1055.81 1216.6 L1056.39 1216.6 L1056.98 1216.6 L1057.57 1216.6 L1058.15 1216.6 L1058.74 1216.6 L1059.33 1216.6 L1059.91 1216.6 L1060.5 1216.6 L1061.09 1216.6 L1061.67 1216.6 L1062.26 1216.6 L1062.85 1216.6 L1063.43 1216.6 L1064.02 1216.6 L1064.6 1216.6 L1065.19 1216.6 L1065.78 1216.6 L1066.36 1216.6 L1066.95 1216.6 L1067.54 1216.6 L1068.12 1216.6 L1068.71 1216.6 L1069.3 1216.6 L1069.88 1216.6 L1070.47 1216.6 L1071.06 1216.6 L1071.64 1216.6 L1072.23 1216.6 L1072.81 1216.6 L1073.4 1216.6 L1073.99 1216.6 L1074.57 1216.6 L1075.16 1216.6 L1075.75 1216.6 L1076.33 1216.6 L1076.92 1216.6 L1077.51 1216.6 L1078.09 1216.6 L1078.68 1216.6 L1079.26 1216.6 L1079.85 1216.6 L1080.44 1216.6 L1081.02 1216.6 L1081.61 1216.6 L1082.2 1216.6 L1082.78 1216.6 L1083.37 1216.6 L1083.96 1216.6 L1084.54 1216.6 L1085.13 1216.6 L1085.72 1216.6 L1086.3 1216.6 L1086.89 1216.6 L1087.47 1216.6 L1088.06 1216.6 L1088.65 1216.6 L1089.23 1216.6 L1089.82 1216.6 L1090.41 1216.6 L1090.99 1216.6 L1091.58 1216.6 L1092.17 1216.6 L1092.75 1216.6 L1093.34 1216.6 L1093.93 1216.6 L1094.51 1216.6 L1095.1 1216.6 L1095.68 1216.6 L1096.27 1216.6 L1096.86 1216.6 L1097.44 1216.6 L1098.03 1216.6 L1098.62 1216.6 L1099.2 1216.6 L1099.79 1216.6 L1100.38 1216.6 L1100.96 1216.6 L1101.55 1216.6 L1102.14 1216.6 L1102.72 1216.6 L1103.31 1216.6 L1103.89 1216.6 L1104.48 1216.6 L1105.07 1216.6 L1105.65 1216.6 L1106.24 1216.6 L1106.83 1216.6 L1107.41 1216.6 L1108 1216.6 L1108.59 1216.6 L1109.17 1216.6 L1109.76 1216.6 L1110.34 1216.6 L1110.93 1216.6 L1111.52 1216.6 L1112.1 1216.6 L1112.69 1216.6 L1113.28 1216.6 L1113.86 1216.6 L1114.45 1216.6 L1115.04 1216.6 L1115.62 1216.6 L1116.21 1216.6 L1116.8 1216.6 L1117.38 1216.6 L1117.97 1216.6 L1118.55 1216.6 L1119.14 1216.6 L1119.73 1216.6 L1120.31 1216.6 L1120.9 1216.6 L1121.49 1216.6 L1122.07 1216.6 L1122.66 1216.6 L1123.25 1216.6 L1123.83 1216.6 L1124.42 1216.6 L1125.01 1216.6 L1125.59 1216.6 L1126.18 1216.6 L1126.76 1216.6 L1127.35 1216.6 L1127.94 1216.6 L1128.52 1216.6 L1129.11 1216.6 L1129.7 1216.6 L1130.28 1216.6 L1130.87 1216.6 L1131.46 1216.6 L1132.04 1216.6 L1132.63 1216.6 L1133.21 1216.6 L1133.8 1216.6 L1134.39 1216.6 L1134.97 1216.6 L1135.56 1216.6 L1136.15 1216.6 L1136.73 1216.6 L1137.32 1216.6 L1137.91 1216.6 L1138.49 1216.6 L1139.08 1216.6 L1139.67 1216.6 L1140.25 1216.6 L1140.84 1216.6 L1141.42 1216.6 L1142.01 1216.6 L1142.6 1216.6 L1143.18 1216.6 L1143.77 1216.6 L1144.36 1216.6 L1144.94 1216.6 L1145.53 1216.6 L1146.12 1216.6 L1146.7 1216.6 L1147.29 1216.6 L1147.88 1216.6 L1148.46 1216.6 L1149.05 1216.6 L1149.63 1216.6 L1150.22 1216.6 L1150.81 1216.6 L1151.39 1216.6 L1151.98 1216.6 L1152.57 1216.6 L1153.15 1216.6 L1153.74 1216.6 L1154.33 1216.6 L1154.91 1216.6 L1155.5 1216.6 L1156.09 1216.6 L1156.67 1216.6 L1157.26 1216.6 L1157.84 1216.6 L1158.43 1216.6 L1159.02 1216.6 L1159.6 1216.6 L1160.19 1216.6 L1160.78 1216.6 L1161.36 1216.6 L1161.95 1216.6 L1162.54 1216.6 L1163.12 1216.6 L1163.71 1216.6 L1164.29 1216.6 L1164.88 1216.6 L1165.47 1216.6 L1166.05 1216.6 L1166.64 1216.6 L1167.23 1216.6 L1167.81 1216.6 L1168.4 1216.6 L1168.99 1216.6 L1169.57 1216.6 L1170.16 1216.6 L1170.75 1216.6 L1171.33 1216.6 L1171.92 1216.6 L1172.5 1216.6 L1173.09 1216.6 L1173.68 1216.6 L1174.26 1216.6 L1174.85 1216.6 L1175.44 1216.6 L1176.02 1216.6 L1176.61 1216.6 L1177.2 1216.6 L1177.78 1216.6 L1178.37 1216.6 L1178.96 1216.6 L1179.54 1216.6 L1180.13 1216.6 L1180.71 1216.6 L1181.3 1216.6 L1181.89 1216.6 L1182.47 1216.6 L1183.06 1216.6 L1183.65 1216.6 L1184.23 1216.6 L1184.82 1216.6 L1185.41 1216.6 L1185.99 1216.6 L1186.58 1216.6 L1187.16 1216.6 L1187.75 1216.6 L1188.34 1216.6 L1188.92 1216.6 L1189.51 1216.6 L1190.1 1216.6 L1190.68 1216.6 L1191.27 1216.6 L1191.86 1216.6 L1192.44 1216.6 L1193.03 1216.6 L1193.62 1216.6 L1194.2 1216.6 L1194.79 1216.6 L1195.37 1216.6 L1195.96 1216.6 L1196.55 1216.6 L1197.13 1216.6 L1197.72 1216.6 L1198.31 1216.6 L1198.89 1216.6 L1199.48 1216.6 L1200.07 1216.6 L1200.65 1216.6 L1201.24 1216.6 L1201.83 1216.6 L1202.41 1216.6 L1203 1216.6 L1203.58 1216.6 L1204.17 1216.6 L1204.76 1216.6 L1205.34 1216.6 L1205.93 1216.6 L1206.52 1216.6 L1207.1 1216.6 L1207.69 1216.6 L1208.28 1216.6 L1208.86 1216.6 L1209.45 1216.6 L1210.03 1216.6 L1210.62 1216.6 L1211.21 1216.6 L1211.79 1216.6 L1212.38 1216.6 L1212.97 1216.6 L1213.55 1216.6 L1214.14 1216.6 L1214.73 1216.6 L1215.31 1216.6 L1215.9 1216.6 L1216.49 1216.6 L1217.07 1216.6 L1217.66 1216.6 L1218.24 1216.6 L1218.83 1216.6 L1219.42 1216.6 L1220 1216.6 L1220.59 1216.6 L1221.18 1216.6 L1221.76 1216.6 L1222.35 1216.6 L1222.94 1216.6 L1223.52 1216.6 L1224.11 1216.6 L1224.7 1216.6 L1225.28 1216.6 L1225.87 1216.6 L1226.45 1216.6 L1227.04 1216.6 L1227.63 1216.6 L1228.21 1216.6 L1228.8 1216.6 L1229.39 1216.6 L1229.97 1216.6 L1230.56 1216.6 L1231.15 1216.6 L1231.73 1216.6 L1232.32 1216.6 L1232.91 1216.6 L1233.49 1216.6 L1234.08 1216.6 L1234.66 1216.6 L1235.25 1216.6 L1235.84 1216.6 L1236.42 1216.6 L1237.01 1216.6 L1237.6 1216.6 L1238.18 1216.6 L1238.77 1216.6 L1239.36 1216.6 L1239.94 1216.6 L1240.53 1216.6 L1241.11 1216.6 L1241.7 1216.6 L1242.29 1216.6 L1242.87 1216.6 L1243.46 1216.6 L1244.05 1216.6 L1244.63 1216.6 L1245.22 1216.6 L1245.81 1216.6 L1246.39 1216.6 L1246.98 1216.6 L1247.57 1216.6 L1248.15 1216.6 L1248.74 1216.6 L1249.32 1216.6 L1249.91 1216.6 L1250.5 1216.6 L1251.08 1216.6 L1251.67 1216.6 L1252.26 1216.6 L1252.84 1216.6 L1253.43 1216.6 L1254.02 1216.6 L1254.6 1216.6 L1255.19 1216.6 L1255.78 1216.6 L1256.36 1216.6 L1256.95 1216.6 L1257.53 1216.6 L1258.12 1216.6 L1258.71 1216.6 L1259.29 1216.6 L1259.88 1216.6 L1260.47 1216.6 L1261.05 1216.6 L1261.64 1216.6 L1262.23 1216.6 L1262.81 1216.6 L1263.4 1216.6 L1263.98 1216.6 L1264.57 1216.6 L1265.16 1216.6 L1265.74 1216.6 L1266.33 1216.6 L1266.92 1216.6 L1267.5 1216.6 L1268.09 1216.6 L1268.68 1216.6 L1269.26 1216.6 L1269.85 1216.6 L1270.44 1216.6 L1271.02 1216.6 L1271.61 1216.6 L1272.19 1216.6 L1272.78 1216.6 L1273.37 1216.6 L1273.95 1216.6 L1274.54 1216.6 L1275.13 1216.6 L1275.71 1216.6 L1276.3 1216.6 L1276.89 1216.6 L1277.47 1216.6 L1278.06 1216.6 L1278.65 1216.6 L1279.23 1216.6 L1279.82 1216.6 L1280.4 1216.6 L1280.99 1216.6 L1281.58 1216.6 L1282.16 1216.6 L1282.75 1216.6 L1283.34 1216.6 L1283.92 1216.6 L1284.51 1216.6 L1285.1 1216.6 L1285.68 1216.6 L1286.27 1216.6 L1286.86 1216.6 L1287.44 1216.6 L1288.03 1216.6 L1288.61 1216.6 L1289.2 1216.6 L1289.79 1216.6 L1290.37 1216.6 L1290.96 1216.6 L1291.55 1216.6 L1292.13 1216.6 L1292.72 1216.6 L1293.31 1216.6 L1293.89 1216.6 L1294.48 1216.6 L1295.06 1216.6 L1295.65 1216.6 L1296.24 1216.6 L1296.82 1216.6 L1297.41 1216.6 L1298 1216.6 L1298.58 1216.6 L1299.17 1216.6 L1299.76 1216.6 L1300.34 1216.6 L1300.93 1216.6 L1301.52 1216.6 L1302.1 1216.6 L1302.69 1216.6 L1303.27 1216.6 L1303.86 1216.6 L1304.45 1216.6 L1305.03 1216.6 L1305.62 1216.6 L1306.21 1216.6 L1306.79 1216.6 L1307.38 1216.6 L1307.97 1216.6 L1308.55 1216.6 L1309.14 1216.6 L1309.73 1216.6 L1310.31 1216.6 L1310.9 1216.6 L1311.48 1216.6 L1312.07 1216.6 L1312.66 1216.6 L1313.24 1216.6 L1313.83 1216.6 L1314.42 1216.6 L1315 1216.6 L1315.59 1216.6 L1316.18 1216.6 L1316.76 1216.6 L1317.35 1216.6 L1317.93 1216.6 L1318.52 1216.6 L1319.11 1216.6 L1319.69 1216.6 L1320.28 1216.6 L1320.87 1216.6 L1321.45 1216.6 L1322.04 1216.6 L1322.63 1216.6 L1323.21 1216.6 L1323.8 1216.6 L1324.39 1216.6 L1324.97 1216.6 L1325.56 1216.6 L1326.14 1216.6 L1326.73 1216.6 L1327.32 1216.6 L1327.9 1216.6 L1328.49 1216.6 L1329.08 1216.6 L1329.66 1216.6 L1330.25 1216.6 L1330.84 1216.6 L1331.42 1216.6 L1332.01 1216.6 L1332.6 1216.6 L1333.18 1216.6 L1333.77 1216.6 L1334.35 1216.6 L1334.94 1216.6 L1335.53 1216.6 L1336.11 1216.6 L1336.7 1216.6 L1337.29 1216.6 L1337.87 1216.6 L1338.46 1216.6 L1339.05 1216.6 L1339.63 1216.6 L1340.22 1216.6 L1340.8 1216.6 L1341.39 1216.6 L1341.98 1216.6 L1342.56 1216.6 L1343.15 1216.6 L1343.74 1216.6 L1344.32 1216.6 L1344.91 1216.6 L1345.5 1216.6 L1346.08 1216.6 L1346.67 1216.6 L1347.26 1216.6 L1347.84 1216.6 L1348.43 1216.6 L1349.01 1216.6 L1349.6 1216.6 L1350.19 1216.6 L1350.77 1216.6 L1351.36 1216.6 L1351.95 1216.6 L1352.53 1216.6 L1353.12 1216.6 L1353.71 1216.6 L1354.29 1216.6 L1354.88 1216.6 L1355.47 1216.6 L1356.05 1216.6 L1356.64 1216.6 L1357.22 1216.6 L1357.81 1216.6 L1358.4 1216.6 L1358.98 1216.6 L1359.57 1216.6 L1360.16 1216.6 L1360.74 1216.6 L1361.33 1216.6 L1361.92 1216.6 L1362.5 1216.6 L1363.09 1216.6 L1363.68 1216.6 L1364.26 1216.6 L1364.85 1216.6 L1365.43 1216.6 L1366.02 1216.6 L1366.61 1216.6 L1367.19 1216.6 L1367.78 1216.6 L1368.37 1216.6 L1368.95 1216.6 L1369.54 1216.6 L1370.13 1216.6 L1370.71 1216.6 L1371.3 1216.6 L1371.88 1216.6 L1372.47 1216.6 L1373.06 1216.6 L1373.64 1216.6 L1374.23 1216.6 L1374.82 1216.6 L1375.4 1216.6 L1375.99 1216.6 L1376.58 1216.6 L1377.16 1216.6 L1377.75 1216.6 L1378.34 1216.6 L1378.92 1216.6 L1379.51 1216.6 L1380.09 1216.6 L1380.68 1216.6 L1381.27 1216.6 L1381.85 1216.6 L1382.44 1216.6 L1383.03 1216.6 L1383.61 1216.6 L1384.2 1216.6 L1384.79 1216.6 L1385.37 1216.6 L1385.96 1216.6 L1386.55 1216.6 L1387.13 1216.6 L1387.72 1216.6 L1388.3 1216.6 L1388.89 1216.6 L1389.48 1216.6 L1390.06 1216.6 L1390.65 1216.6 L1391.24 1216.6 L1391.82 1216.6 L1392.41 1216.6 L1393 1216.6 L1393.58 1216.6 L1394.17 1216.6 L1394.75 1216.6 L1395.34 1216.6 L1395.93 1216.6 L1396.51 1216.6 L1397.1 1216.6 L1397.69 1216.6 L1398.27 1216.6 L1398.86 1216.6 L1399.45 1216.6 L1400.03 1216.6 L1400.62 1216.6 L1401.21 1216.6 L1401.79 1216.6 L1402.38 1216.6 L1402.96 1216.6 L1403.55 1216.6 L1404.14 1216.6 L1404.72 1216.6 L1405.31 1216.6 L1405.9 1216.6 L1406.48 1216.6 L1407.07 1216.6 L1407.66 1216.6 L1408.24 1216.6 L1408.83 1216.6 L1409.42 1216.6 L1410 1216.6 L1410.59 1216.6 L1411.17 1216.6 L1411.76 1216.6 L1412.35 1216.6 L1412.93 1216.6 L1413.52 1216.6 L1414.11 1216.6 L1414.69 1216.6 L1415.28 1216.6 L1415.87 1216.6 L1416.45 1216.6 L1417.04 1216.6 L1417.63 1216.6 L1418.21 1216.6 L1418.8 1216.6 L1419.38 1216.6 L1419.97 1216.6 L1420.56 1216.6 L1421.14 1216.6 L1421.73 1216.6 L1422.32 1216.6 L1422.9 1216.6 L1423.49 1216.6 L1424.08 1216.6 L1424.66 1216.6 L1425.25 1216.6 L1425.83 1216.6 L1426.42 1216.6 L1427.01 1216.6 L1427.59 1216.6 L1428.18 1216.6 L1428.77 1216.6 L1429.35 1216.6 L1429.94 1216.6 L1430.53 1216.6 L1431.11 1216.6 L1431.7 1216.6 L1432.29 1216.6 L1432.87 1216.6 L1433.46 1216.6 L1434.04 1216.6 L1434.63 1216.6 L1435.22 1216.6 L1435.8 1216.6 L1436.39 1216.6 L1436.98 1216.6 L1437.56 1216.6 L1438.15 1216.6 L1438.74 1216.6 L1439.32 1216.6 L1439.91 1216.6 L1440.5 1216.6 L1441.08 1216.6 L1441.67 1216.6 L1442.25 1216.6 L1442.84 1216.6 L1443.43 1216.6 L1444.01 1216.6 L1444.6 1216.6 L1445.19 1216.6 L1445.77 1216.6 L1446.36 1216.6 L1446.95 1216.6 L1447.53 1216.6 L1448.12 1216.6 L1448.7 1216.6 L1449.29 1216.6 L1449.88 1216.6 L1450.46 1216.6 L1451.05 1216.6 L1451.64 1216.6 L1452.22 1216.6 L1452.81 1216.6 L1453.4 1216.6 L1453.98 1216.6 L1454.57 1216.6 L1455.16 1216.6 L1455.74 1216.6 L1456.33 1216.6 L1456.91 1216.6 L1457.5 1216.6 L1458.09 1216.6 L1458.67 1216.6 L1459.26 1216.6 L1459.85 1216.6 L1460.43 1216.6 L1461.02 1216.6 L1461.61 1216.6 L1462.19 1216.6 L1462.78 1216.6 L1463.37 1216.6 L1463.95 1216.6 L1464.54 1216.6 L1465.12 1216.6 L1465.71 1216.6 L1466.3 1216.6 L1466.88 1216.6 L1467.47 1216.6 L1468.06 1216.6 L1468.64 1216.6 L1469.23 1216.6 L1469.82 1216.6 L1470.4 1216.6 L1470.99 1216.6 L1471.57 1216.6 L1472.16 1216.6 L1472.75 1216.6 L1473.33 1216.6 L1473.92 1216.6 L1474.51 1216.6 L1475.09 1216.6 L1475.68 1216.6 L1476.27 1216.6 L1476.85 1216.6 L1477.44 1216.6 L1478.03 1216.6 L1478.61 1216.6 L1479.2 1216.6 L1479.78 1216.6 L1480.37 1216.6 L1480.96 1216.6 L1481.54 1216.6 L1482.13 1216.6 L1482.72 1216.6 L1483.3 1216.6 L1483.89 1216.6 L1484.48 1216.6 L1485.06 1216.6 L1485.65 1216.6 L1486.24 1216.6 L1486.82 1216.6 L1487.41 1216.6 L1487.99 1216.6 L1488.58 1216.6 L1489.17 1216.6 L1489.75 1216.6 L1490.34 1216.6 L1490.93 1216.6 L1491.51 1216.6 L1492.1 1216.6 L1492.69 1216.6 L1493.27 1216.6 L1493.86 1216.6 L1494.45 1216.6 L1495.03 1216.6 L1495.62 1216.6 L1496.2 1216.6 L1496.79 1216.6 L1497.38 1216.6 L1497.96 1216.6 L1498.55 1216.6 L1499.14 1216.6 L1499.72 1216.6 L1500.31 1216.6 L1500.9 1216.6 L1501.48 1216.6 L1502.07 1216.6 L1502.65 1216.6 L1503.24 1216.6 L1503.83 1216.6 L1504.41 1216.6 L1505 1216.6 L1505.59 1216.6 L1506.17 1216.6 L1506.76 1216.6 L1507.35 1216.6 L1507.93 1216.6 L1508.52 1216.6 L1509.11 1216.6 L1509.69 1216.6 L1510.28 1216.6 L1510.86 1216.6 L1511.45 1216.6 L1512.04 1216.6 L1512.62 1216.6 L1513.21 1216.6 L1513.8 1216.6 L1514.38 1216.6 L1514.97 1216.6 L1515.56 1216.6 L1516.14 1216.6 L1516.73 1216.6 L1517.32 1216.6 L1517.9 1216.6 L1518.49 1216.6 L1519.07 1216.6 L1519.66 1216.6 L1520.25 1216.6 L1520.83 1216.6 L1521.42 1216.6 L1522.01 1216.6 L1522.59 1216.6 L1523.18 1216.6 L1523.77 1216.6 L1524.35 1216.6 L1524.94 1216.6 L1525.52 1216.6 L1526.11 1216.6 L1526.7 1216.6 L1527.28 1216.6 L1527.87 1216.6 L1528.46 1216.6 L1529.04 1216.6 L1529.63 1216.6 L1530.22 1216.6 L1530.8 1216.6 L1531.39 1216.6 L1531.98 1216.6 L1532.56 1216.6 L1533.15 1216.6 L1533.73 1216.6 L1534.32 1216.6 L1534.91 1216.6 L1535.49 1216.6 L1536.08 1216.6 L1536.67 1216.6 L1537.25 1216.6 L1537.84 1216.6 L1538.43 1216.6 L1539.01 1216.6 L1539.6 1216.6 L1540.19 1216.6 L1540.77 1216.6 L1541.36 1216.6 L1541.94 1216.6 L1542.53 1216.6 L1543.12 1216.6 L1543.7 1216.6 L1544.29 1216.6 L1544.88 1216.6 L1545.46 1216.6 L1546.05 1216.6 L1546.64 1216.6 L1547.22 1216.6 L1547.81 1216.6 L1548.4 1216.6 L1548.98 1216.6 L1549.57 1216.6 L1550.15 1216.6 L1550.74 1216.6 L1551.33 1216.6 L1551.91 1216.6 L1552.5 1216.6 L1553.09 1216.6 L1553.67 1216.6 L1554.26 1216.6 L1554.85 1216.6 L1555.43 1216.6 L1556.02 1216.6 L1556.6 1216.6 L1557.19 1216.6 L1557.78 1216.6 L1558.36 1216.6 L1558.95 1216.6 L1559.54 1216.6 L1560.12 1216.6 L1560.71 1216.6 L1561.3 1216.6 L1561.88 1216.6 L1562.47 1216.6 L1563.06 1216.6 L1563.64 1216.6 L1564.23 1216.6 L1564.81 1216.6 L1565.4 1216.6 L1565.99 1216.6 L1566.57 1216.6 L1567.16 1216.6 L1567.75 1216.6 L1568.33 1216.6 L1568.92 1216.6 L1569.51 1216.6 L1570.09 1216.6 L1570.68 1216.6 L1571.27 1216.6 L1571.85 1216.6 L1572.44 1216.6 L1573.02 1216.6 L1573.61 1216.6 L1574.2 1216.6 L1574.78 1216.6 L1575.37 1216.6 L1575.96 1216.6 L1576.54 1216.6 L1577.13 1216.6 L1577.72 1216.6 L1578.3 1216.6 L1578.89 1216.6 L1579.47 1216.6 L1580.06 1216.6 L1580.65 1216.6 L1581.23 1216.6 L1581.82 1216.6 L1582.41 1216.6 L1582.99 1216.6 L1583.58 1216.6 L1584.17 1216.6 L1584.75 1216.6 L1585.34 1216.6 L1585.93 1216.6 L1586.51 1216.6 L1587.1 1216.6 L1587.68 1216.6 L1588.27 1216.6 L1588.86 1216.6 L1589.44 1216.6 L1590.03 1216.6 L1590.62 1216.6 L1591.2 1216.6 L1591.79 1216.6 L1592.38 1216.6 L1592.96 1216.6 L1593.55 1216.6 L1594.14 1216.6 L1594.72 1216.6 L1595.31 1216.6 L1595.89 1216.6 L1596.48 1216.6 L1597.07 1216.6 L1597.65 1216.6 L1598.24 1216.6 L1598.83 1216.6 L1599.41 1216.6 L1600 1216.6 L1600.59 1216.6 L1601.17 1216.6 L1601.76 1216.6 L1602.34 1216.6 L1602.93 1216.6 L1603.52 1216.6 L1604.1 1216.6 L1604.69 1216.6 L1605.28 1216.6 L1605.86 1216.6 L1606.45 1216.6 L1607.04 1216.6 L1607.62 1216.6 L1608.21 1216.6 L1608.8 1216.6 L1609.38 1216.6 L1609.97 1216.6 L1610.55 1216.6 L1611.14 1216.6 L1611.73 1216.6 L1612.31 1216.6 L1612.9 1216.6 L1613.49 1216.6 L1614.07 1216.6 L1614.66 1216.6 L1615.25 1216.6 L1615.83 1216.6 L1616.42 1216.6 L1617.01 1216.6 L1617.59 1216.6 L1618.18 1216.6 L1618.76 1216.6 L1619.35 1216.6 L1619.94 1216.6 L1620.52 1216.6 L1621.11 1216.6 L1621.7 1216.6 L1622.28 1216.6 L1622.87 1216.6 L1623.46 1216.6 L1624.04 1216.6 L1624.63 1216.6 L1625.22 1216.6 L1625.8 1216.6 L1626.39 1216.6 L1626.97 1216.6 L1627.56 1216.6 L1628.15 1216.6 L1628.73 1216.6 L1629.32 1216.6 L1629.91 1216.6 L1630.49 1216.6 L1631.08 1216.6 L1631.67 1216.6 L1632.25 1216.6 L1632.84 1216.6 L1633.42 1216.6 L1634.01 1216.6 L1634.6 1216.6 L1635.18 1216.6 L1635.77 1216.6 L1636.36 1216.6 L1636.94 1216.6 L1637.53 1216.6 L1638.12 1216.6 L1638.7 1216.6 L1639.29 1216.6 L1639.88 1216.6 L1640.46 1216.6 L1641.05 1216.6 L1641.63 1216.6 L1642.22 1216.6 L1642.81 1216.6 L1643.39 1216.6 L1643.98 1216.6 L1644.57 1216.6 L1645.15 1216.6 L1645.74 1216.6 L1646.33 1216.6 L1646.91 1216.6 L1647.5 1216.6 L1648.09 1216.6 L1648.67 1216.6 L1649.26 1216.6 L1649.84 1216.6 L1650.43 1216.6 L1651.02 1216.6 L1651.6 1216.6 L1652.19 1216.6 L1652.78 1216.6 L1653.36 1216.6 L1653.95 1216.6 L1654.54 1216.6 L1655.12 1216.6 L1655.71 1216.6 L1656.29 1216.6 L1656.88 1216.6 L1657.47 1216.6 L1658.05 1216.6 L1658.64 1216.6 L1659.23 1216.6 L1659.81 1216.6 L1660.4 1216.6 L1660.99 1216.6 L1661.57 1216.6 L1662.16 1216.6 L1662.75 1216.6 L1663.33 1216.6 L1663.92 1216.6 L1664.5 1216.6 L1665.09 1216.6 L1665.68 1216.6 L1666.26 1216.6 L1666.85 1216.6 L1667.44 1216.6 L1668.02 1216.6 L1668.61 1216.6 L1669.2 1216.6 L1669.78 1216.6 L1670.37 1216.6 L1670.96 1216.6 L1671.54 1216.6 L1672.13 1216.6 L1672.71 1216.6 L1673.3 1216.6 L1673.89 1216.6 L1674.47 1216.6 L1675.06 1216.6 L1675.65 1216.6 L1676.23 1216.6 L1676.82 1216.6 L1677.41 1216.6 L1677.99 1216.6 L1678.58 1216.6 L1679.17 1216.6 L1679.75 1216.6 L1680.34 1216.6 L1680.92 1216.6 L1681.51 1216.6 L1682.1 1216.6 L1682.68 1216.6 L1683.27 1216.6 L1683.86 1216.6 L1684.44 1216.6 L1685.03 1216.6 L1685.62 1216.6 L1686.2 1216.6 L1686.79 1216.6 L1687.37 1216.6 L1687.96 1216.6 L1688.55 1216.6 L1689.13 1216.6 L1689.72 1216.6 L1690.31 1216.6 L1690.89 1216.6 L1691.48 1216.6 L1692.07 1216.6 L1692.65 1216.6 L1693.24 1216.6 L1693.83 1216.6 L1694.41 1216.6 L1695 1216.6 L1695.58 1216.6 L1696.17 1216.6 L1696.76 1216.6 L1697.34 1216.6 L1697.93 1216.6 L1698.52 1216.6 L1699.1 1216.6 L1699.69 1216.6 L1700.28 1216.6 L1700.86 1216.6 L1701.45 1216.6 L1702.04 1216.6 L1702.62 1216.6 L1703.21 1216.6 L1703.79 1216.6 L1704.38 1216.6 L1704.97 1216.6 L1705.55 1216.6 L1706.14 1216.6 L1706.73 1216.6 L1707.31 1216.6 L1707.9 1216.6 L1708.49 1216.6 L1709.07 1216.6 L1709.66 1216.6 L1710.24 1216.6 L1710.83 1216.6 L1711.42 1216.6 L1712 1216.6 L1712.59 1216.6 L1713.18 1216.6 L1713.76 1216.6 L1714.35 1216.6 L1714.94 1216.6 L1715.52 1216.6 L1716.11 1216.6 L1716.7 1216.6 L1717.28 1216.6 L1717.87 1216.6 L1718.45 1216.6 L1719.04 1216.6 L1719.63 1216.6 L1720.21 1216.6 L1720.8 1216.6 L1721.39 1216.6 L1721.97 1216.6 L1722.56 1216.6 L1723.15 1216.6 L1723.73 1216.6 L1724.32 1216.6 L1724.91 1216.6 L1725.49 1216.6 L1726.08 1216.6 L1726.66 1216.6 L1727.25 1216.6 L1727.84 1216.6 L1728.42 1216.6 L1729.01 1216.6 L1729.6 1216.6 L1730.18 1216.6 L1730.77 1216.6 L1731.36 1216.6 L1731.94 1216.6 L1732.53 1216.6 L1733.11 1216.6 L1733.7 1216.6 L1734.29 1216.6 L1734.87 1216.6 L1735.46 1216.6 L1736.05 1216.6 L1736.63 1216.6 L1737.22 1216.6 L1737.81 1216.6 L1738.39 1216.6 L1738.98 1216.6 L1739.57 1216.6 L1740.15 1216.6 L1740.74 1216.6 L1741.32 1216.6 L1741.91 1216.6 L1742.5 1216.6 L1743.08 1216.6 L1743.67 1216.6 L1744.26 1216.6 L1744.84 1216.6 L1745.43 1216.6 L1746.02 1216.6 L1746.6 1216.6 L1747.19 1216.6 L1747.78 1216.6 L1748.36 1216.6 L1748.95 1216.6 L1749.53 1216.6 L1750.12 1216.6 L1750.71 1216.6 L1751.29 1216.6 L1751.88 1216.6 L1752.47 1216.6 L1753.05 1216.6 L1753.64 1216.6 L1754.23 1216.6 L1754.81 1216.6 L1755.4 1216.6 L1755.99 1216.6 L1756.57 1216.6 L1757.16 1216.6 L1757.74 1216.6 L1758.33 1216.6 L1758.92 1216.6 L1759.5 1216.6 L1760.09 1216.6 L1760.68 1216.6 L1761.26 1216.6 L1761.85 1216.6 L1762.44 1216.6 L1763.02 1216.6 L1763.61 1216.6 L1764.19 1216.6 L1764.78 1216.6 L1765.37 1216.6 L1765.95 1216.6 L1766.54 1216.6 L1767.13 1216.6 L1767.71 1216.6 L1768.3 1216.6 L1768.89 1216.6 L1769.47 1216.6 L1770.06 1216.6 L1770.65 1216.6 L1771.23 1216.6 L1771.82 1216.6 L1772.4 1216.6 L1772.99 1216.6 L1773.58 1216.6 L1774.16 1216.6 L1774.75 1216.6 L1775.34 1216.6 L1775.92 1216.6 L1776.51 1216.6 L1777.1 1216.6 L1777.68 1216.6 L1778.27 1216.6 L1778.86 1216.6 L1779.44 1216.6 L1780.03 1216.6 L1780.61 1216.6 L1781.2 1216.6 L1781.79 1216.6 L1782.37 1216.6 L1782.96 1216.6 L1783.55 1216.6 L1784.13 1216.6 L1784.72 1216.6 L1785.31 1216.6 L1785.89 1216.6 L1786.48 1216.6 L1787.06 1216.6 L1787.65 1216.6 L1788.24 1216.6 L1788.82 1216.6 L1789.41 1216.6 L1790 1216.6 L1790.58 1216.6 L1791.17 1216.6 L1791.76 1216.6 L1792.34 1216.6 L1792.93 1216.6 L1793.52 1216.6 L1794.1 1216.6 L1794.69 1216.6 L1795.27 1216.6 L1795.86 1216.6 L1796.45 1216.6 L1797.03 1216.6 L1797.62 1216.6 L1798.21 1216.6 L1798.79 1216.6 L1799.38 1216.6 L1799.97 1216.6 L1800.55 1216.6 L1801.14 1216.6 L1801.73 1216.6 L1802.31 1216.6 L1802.9 1216.6 L1803.48 1216.6 L1804.07 1216.6 L1804.66 1216.6 L1805.24 1216.6 L1805.83 1216.6 L1806.42 1216.6 L1807 1216.6 L1807.59 1216.6 L1808.18 1216.6 L1808.76 1216.6 L1809.35 1216.6 L1809.94 1216.6 L1810.52 1216.6 L1811.11 1216.6 L1811.69 1216.6 L1812.28 1216.6 L1812.87 1216.6 L1813.45 1216.6 L1814.04 1216.6 L1814.63 1216.6 L1815.21 1216.6 L1815.8 1216.6 L1816.39 1216.6 L1816.97 1216.6 L1817.56 1216.6 L1818.14 1216.6 L1818.73 1216.6 L1819.32 1216.6 L1819.9 1216.6 L1820.49 1216.6 L1821.08 1216.6 L1821.66 1216.6 L1822.25 1216.6 L1822.84 1216.6 L1823.42 1216.6 L1824.01 1216.6 L1824.6 1216.6 L1825.18 1216.6 L1825.77 1216.6 L1826.35 1216.6 L1826.94 1216.6 L1827.53 1216.6 L1828.11 1216.6 L1828.7 1216.6 L1829.29 1216.6 L1829.87 1216.6 L1830.46 1216.6 L1831.05 1216.6 L1831.63 1216.6 L1832.22 1216.6 L1832.81 1216.6 L1833.39 1216.6 L1833.98 1216.6 L1834.56 1216.6 L1835.15 1216.6 L1835.74 1216.6 L1836.32 1216.6 L1836.91 1216.6 L1837.5 1216.6 L1838.08 1216.6 L1838.67 1216.6 L1839.26 1216.6 L1839.84 1216.6 L1840.43 1216.6 L1841.01 1216.6 L1841.6 1216.6 L1842.19 1216.6 L1842.77 1216.6 L1843.36 1216.6 L1843.95 1216.6 L1844.53 1216.6 L1845.12 1216.6 L1845.71 1216.6 L1846.29 1216.6 L1846.88 1216.6 L1847.47 1216.6 L1848.05 1216.6 L1848.64 1216.6 L1849.22 1216.6 L1849.81 1216.6 L1850.4 1216.6 L1850.98 1216.6 L1851.57 1216.6 L1852.16 1216.6 L1852.74 1216.6 L1853.33 1216.6 L1853.92 1216.6 L1854.5 1216.6 L1855.09 1216.6 L1855.68 1216.6 L1856.26 1216.6 L1856.85 1216.6 L1857.43 1216.6 L1858.02 1216.6 L1858.61 1216.6 L1859.19 1216.6 L1859.78 1216.6 L1860.37 1216.6 L1860.95 1216.6 L1861.54 1216.6 L1862.13 1216.6 L1862.71 1216.6 L1863.3 1216.6 L1863.88 1216.6 L1864.47 1216.6 L1865.06 1216.6 L1865.64 1216.6 L1866.23 1216.6 L1866.82 1216.6 L1867.4 1216.6 L1867.99 1216.6 L1868.58 1216.6 L1869.16 1216.6 L1869.75 1216.6 L1870.34 1216.6 L1870.92 1216.6 L1871.51 1216.6 L1872.09 1216.6 L1872.68 1216.6 L1873.27 1216.6 L1873.85 1216.6 L1874.44 1216.6 L1875.03 1216.6 L1875.61 1216.6 L1876.2 1216.6 L1876.79 1216.6 L1877.37 1216.6 L1877.96 1216.6 L1878.55 1216.6 L1879.13 1216.6 L1879.72 1216.6 L1880.3 1216.6 L1880.89 1216.6 L1881.48 1216.6 L1882.06 1216.6 L1882.65 1216.6 L1883.24 1216.6 L1883.82 1216.6 L1884.41 1216.6 L1885 1216.6 L1885.58 1216.6 L1886.17 1216.6 L1886.76 1216.6 L1887.34 1216.6 L1887.93 1216.6 L1888.51 1216.6 L1889.1 1216.6 L1889.69 1216.6 L1890.27 1216.6 L1890.86 1216.6 L1891.45 1216.6 L1892.03 1216.6 L1892.62 1216.6 L1893.21 1216.6 L1893.79 1216.6 L1894.38 1216.6 L1894.96 1216.6 L1895.55 1216.6 L1896.14 1216.6 L1896.72 1216.6 L1897.31 1216.6 L1897.9 1216.6 L1898.48 1216.6 L1899.07 1216.6 L1899.66 1216.6 L1900.24 1216.6 L1900.83 1216.6 L1901.42 1216.6 L1902 1216.6 L1902.59 1216.6 L1903.17 1216.6 L1903.76 1216.6 L1904.35 1216.6 L1904.93 1216.6 L1905.52 1216.6 L1906.11 1216.6 L1906.69 1216.6 L1907.28 1216.6 L1907.87 1216.6 L1908.45 1216.6 L1909.04 1216.6 L1909.63 1216.6 L1910.21 1216.6 L1910.8 1216.6 L1911.38 1216.6 L1911.97 1216.6 L1912.56 1216.6 L1913.14 1216.6 L1913.73 1216.6 L1914.32 1216.6 L1914.9 1216.6 L1915.49 1216.6 L1916.08 1216.6 L1916.66 1216.6 L1917.25 1216.6 L1917.83 1216.6 L1918.42 1216.6 L1919.01 1216.6 L1919.59 1216.6 L1920.18 1216.6 L1920.77 1216.6 L1921.35 1216.6 L1921.94 1216.6 L1922.53 1216.6 L1923.11 1216.6 L1923.7 1216.6 L1924.29 1216.6 L1924.87 1216.6 L1925.46 1216.6 L1926.04 1216.6 L1926.63 1216.6 L1927.22 1216.6 L1927.8 1216.6 L1928.39 1216.6 L1928.98 1216.6 L1929.56 1216.6 L1930.15 1216.6 L1930.74 1216.6 L1931.32 1216.6 L1931.91 1216.6 L1932.5 1216.6 L1933.08 1216.6 L1933.67 1216.6 L1934.25 1216.6 L1934.84 1216.6 L1935.43 1216.6 L1936.01 1216.6 L1936.6 1216.6 L1937.19 1216.6 L1937.77 1216.6 L1938.36 1216.6 L1938.95 1216.6 L1939.53 1216.6 L1940.12 1216.6 L1940.71 1216.6 L1941.29 1216.6 L1941.88 1216.6 L1942.46 1216.6 L1943.05 1216.6 L1943.64 1216.6 L1944.22 1216.6 L1944.81 1216.6 L1945.4 1216.6 L1945.98 1216.6 L1946.57 1216.6 L1947.16 1216.6 L1947.74 1216.6 L1948.33 1216.6 L1948.91 1216.6 L1949.5 1216.6 L1950.09 1216.6 L1950.67 1216.6 L1951.26 1216.6 L1951.85 1216.6 L1952.43 1216.6 L1953.02 1216.6 L1953.61 1216.6 L1954.19 1216.6 L1954.78 1216.6 L1955.37 1216.6 L1955.95 1216.6 L1956.54 1216.6 L1957.12 1216.6 L1957.71 1216.6 L1958.3 1216.6 L1958.88 1216.6 L1959.47 1216.6 L1960.06 1216.6 L1960.64 1216.6 L1961.23 1216.6 L1961.82 1216.6 L1962.4 1216.6 L1962.99 1216.6 L1963.58 1216.6 L1964.16 1216.6 L1964.75 1216.6 L1965.33 1216.6 L1965.92 1216.6 L1966.51 1216.6 L1967.09 1216.6 L1967.68 1216.6 L1968.27 1216.6 L1968.85 1216.6 L1969.44 1216.6 L1970.03 1216.6 L1970.61 1216.6 L1971.2 1216.6 L1971.78 1216.6 L1972.37 1216.6 L1972.96 1216.6 L1973.54 1216.6 L1974.13 1216.6 L1974.72 1216.6 L1975.3 1216.6 L1975.89 1216.6 L1976.48 1216.6 L1977.06 1216.6 L1977.65 1216.6 L1978.24 1216.6 L1978.82 1216.6 L1979.41 1216.6 L1979.99 1216.6 L1980.58 1216.6 L1981.17 1216.6 L1981.75 1216.6 L1982.34 1216.6 L1982.93 1216.6 L1983.51 1216.6 L1984.1 1216.6 L1984.69 1216.6 L1985.27 1216.6 L1985.86 1216.6 L1986.45 1216.6 L1987.03 1216.6 L1987.62 1216.6 L1988.2 1216.6 L1988.79 1216.6 L1989.38 1216.6 L1989.96 1216.6 L1990.55 1216.6 L1991.14 1216.6 L1991.72 1216.6 L1992.31 1216.6 L1992.9 1216.6 L1993.48 1216.6 L1994.07 1216.6 L1994.65 1216.6 L1995.24 1216.6 L1995.83 1216.6 L1996.41 1216.6 L1997 1216.6 L1997.59 1216.6 L1998.17 1216.6 L1998.76 1216.6 L1999.35 1216.6 L1999.93 1216.6 L2000.52 1216.6 L2001.11 1216.6 L2001.69 1216.6 L2002.28 1216.6 L2002.86 1216.6 L2003.45 1216.6 L2004.04 1216.6 L2004.62 1216.6 L2005.21 1216.6 L2005.8 1216.6 L2006.38 1216.6 L2006.97 1216.6 L2007.56 1216.6 L2008.14 1216.6 L2008.73 1216.6 L2009.32 1216.6 L2009.9 1216.6 L2010.49 1216.6 L2011.07 1216.6 L2011.66 1216.6 L2012.25 1216.6 L2012.83 1216.6 L2013.42 1216.6 L2014.01 1216.6 L2014.59 1216.6 L2015.18 1216.6 L2015.77 1216.6 L2016.35 1216.6 L2016.94 1216.6 L2017.53 1216.6 L2018.11 1216.6 L2018.7 1216.6 L2019.28 1216.6 L2019.87 1216.6 L2020.46 1216.6 L2021.04 1216.6 L2021.63 1216.6 L2022.22 1216.6 L2022.8 1216.6 L2023.39 1216.6 L2023.98 1216.6 L2024.56 1216.6 L2025.15 1216.6 L2025.73 1216.6 L2026.32 1216.6 L2026.91 1216.6 L2027.49 1216.6 L2028.08 1216.6 L2028.67 1216.6 L2029.25 1216.6 L2029.84 1216.6 L2030.43 1216.6 L2031.01 1216.6 L2031.6 1216.6 L2032.19 1216.6 L2032.77 1216.6 L2033.36 1216.6 L2033.94 1216.6 L2034.53 1216.6 L2035.12 1216.6 L2035.7 1216.6 L2036.29 1216.6 L2036.88 1216.6 L2037.46 1216.6 L2038.05 1216.6 L2038.64 1216.6 L2039.22 1216.6 L2039.81 1216.6 L2040.4 1216.6 L2040.98 1216.6 L2041.57 1216.6 L2042.15 1216.6 L2042.74 1216.6 L2043.33 1216.6 L2043.91 1216.6 L2044.5 1216.6 L2045.09 1216.6 L2045.67 1216.6 L2046.26 1216.6 L2046.85 1216.6 L2047.43 1216.6 L2048.02 1216.6 L2048.6 1216.6 L2049.19 1216.6 L2049.78 1216.6 L2050.36 1216.6 L2050.95 1216.6 L2051.54 1216.6 L2052.12 1216.6 L2052.71 1216.6 L2053.3 1216.6 L2053.88 1216.6 L2054.47 1216.6 L2055.06 1216.6 L2055.64 1216.6 L2056.23 1216.6 L2056.81 1216.6 L2057.4 1216.6 L2057.99 1216.6 L2058.57 1216.6 L2059.16 1216.6 L2059.75 1216.6 L2060.33 1216.6 L2060.92 1216.6 L2061.51 1216.6 L2062.09 1216.6 L2062.68 1216.6 L2063.27 1216.6 L2063.85 1216.6 L2064.44 1216.6 L2065.02 1216.6 L2065.61 1216.6 L2066.2 1216.6 L2066.78 1216.6 L2067.37 1216.6 L2067.96 1216.6 L2068.54 1216.6 L2069.13 1216.6 L2069.72 1216.6 L2070.3 1216.6 L2070.89 1216.6 L2071.48 1216.6 L2072.06 1216.6 L2072.65 1216.6 L2073.23 1216.6 L2073.82 1216.6 L2074.41 1216.6 L2074.99 1216.6 L2075.58 1216.6 L2076.17 1216.6 L2076.75 1216.6 L2077.34 1216.6 L2077.93 1216.6 L2078.51 1216.6 L2079.1 1216.6 L2079.68 1216.6 L2080.27 1216.6 L2080.86 1216.6 L2081.44 1216.6 L2082.03 1216.6 L2082.62 1216.6 L2083.2 1216.6 L2083.79 1216.6 L2084.38 1216.6 L2084.96 1216.6 L2085.55 1216.6 L2086.14 1216.6 L2086.72 1216.6 L2087.31 1216.6 L2087.89 1216.6 L2088.48 1216.6 L2089.07 1216.6 L2089.65 1216.6 L2090.24 1216.6 L2090.83 1216.6 L2091.41 1216.6 L2092 1216.6 L2092.59 1216.6 L2093.17 1216.6 L2093.76 1216.6 L2094.35 1216.6 L2094.93 1216.6 L2095.52 1216.6 L2096.1 1216.6 L2096.69 1216.6 L2097.28 1216.6 L2097.86 1216.6 L2098.45 1216.6 L2099.04 1216.6 L2099.62 1216.6 L2100.21 1216.6 L2100.8 1216.6 L2101.38 1216.6 L2101.97 1216.6 L2102.55 1216.6 L2103.14 1216.6 L2103.73 1216.6 L2104.31 1216.6 L2104.9 1216.6 L2105.49 1216.6 L2106.07 1216.6 L2106.66 1216.6 L2107.25 1216.6 L2107.83 1216.6 L2108.42 1216.6 L2109.01 1216.6 L2109.59 1216.6 L2110.18 1216.6 L2110.76 1216.6 L2111.35 1216.6 L2111.94 1216.6 L2112.52 1216.6 L2113.11 1216.6 L2113.7 1216.6 L2114.28 1216.6 L2114.87 1216.6 L2115.46 1216.6 L2116.04 1216.6 L2116.63 1216.6 L2117.22 1216.6 L2117.8 1216.6 L2118.39 1216.6 L2118.97 1216.6 L2119.56 1216.6 L2120.15 1216.6 L2120.73 1216.6 L2121.32 1216.6 L2121.91 1216.6 L2122.49 1216.6 L2123.08 1216.6 L2123.67 1216.6 L2124.25 1216.6 L2124.84 1216.6 L2125.42 1216.6 L2126.01 1216.6 L2126.6 1216.6 L2127.18 1216.6 L2127.77 1216.6 L2128.36 1216.6 L2128.94 1216.6 L2129.53 1216.6 L2130.12 1216.6 L2130.7 1216.6 L2131.29 1216.6 L2131.88 1216.6 L2132.46 1216.6 L2133.05 1216.6 L2133.63 1216.6 L2134.22 1216.6 L2134.81 1216.6 L2135.39 1216.6 L2135.98 1216.6 L2136.57 1216.6 L2137.15 1216.6 L2137.74 1216.6 L2138.33 1216.6 L2138.91 1216.6 L2139.5 1216.6 L2140.09 1216.6 L2140.67 1216.6 L2141.26 1216.6 L2141.84 1216.6 L2142.43 1216.6 L2143.02 1216.6 L2143.6 1216.6 L2144.19 1216.6 L2144.78 1216.6 L2145.36 1216.6 L2145.95 1216.6 L2146.54 1216.6 L2147.12 1216.6 L2147.71 1216.6 L2148.3 1216.6 L2148.88 1216.6 L2149.47 1216.6 L2150.05 1216.6 L2150.64 1216.6 L2151.23 1216.6 L2151.81 1216.6 L2152.4 1216.6 L2152.99 1216.6 L2153.57 1216.6 L2154.16 1216.6 L2154.75 1216.6 L2155.33 1216.6 L2155.92 1216.6 L2156.5 1216.6 L2157.09 1216.6 L2157.68 1216.6 L2158.26 1216.6 L2158.26 1216.5 L2157.68 1216.5 L2157.09 1216.5 L2156.5 1216.5 L2155.92 1216.5 L2155.33 1216.5 L2154.75 1216.5 L2154.16 1216.5 L2153.57 1216.5 L2152.99 1216.5 L2152.4 1216.5 L2151.81 1216.5 L2151.23 1216.5 L2150.64 1216.5 L2150.05 1216.5 L2149.47 1216.5 L2148.88 1216.5 L2148.3 1216.5 L2147.71 1216.5 L2147.12 1216.5 L2146.54 1216.5 L2145.95 1216.5 L2145.36 1216.5 L2144.78 1216.5 L2144.19 1216.5 L2143.6 1216.5 L2143.02 1216.5 L2142.43 1216.5 L2141.84 1216.5 L2141.26 1216.5 L2140.67 1216.5 L2140.09 1216.5 L2139.5 1216.5 L2138.91 1216.5 L2138.33 1216.5 L2137.74 1216.5 L2137.15 1216.5 L2136.57 1216.5 L2135.98 1216.5 L2135.39 1216.5 L2134.81 1216.5 L2134.22 1216.5 L2133.63 1216.5 L2133.05 1216.5 L2132.46 1216.5 L2131.88 1216.5 L2131.29 1216.5 L2130.7 1216.5 L2130.12 1216.5 L2129.53 1216.5 L2128.94 1216.5 L2128.36 1216.5 L2127.77 1216.5 L2127.18 1216.5 L2126.6 1216.5 L2126.01 1216.5 L2125.42 1216.5 L2124.84 1216.5 L2124.25 1216.5 L2123.67 1216.5 L2123.08 1216.5 L2122.49 1216.5 L2121.91 1216.5 L2121.32 1216.5 L2120.73 1216.5 L2120.15 1216.5 L2119.56 1216.5 L2118.97 1216.5 L2118.39 1216.5 L2117.8 1216.5 L2117.22 1216.5 L2116.63 1216.5 L2116.04 1216.5 L2115.46 1216.5 L2114.87 1216.5 L2114.28 1216.5 L2113.7 1216.5 L2113.11 1216.5 L2112.52 1216.5 L2111.94 1216.5 L2111.35 1216.5 L2110.76 1216.5 L2110.18 1216.5 L2109.59 1216.5 L2109.01 1216.5 L2108.42 1216.5 L2107.83 1216.5 L2107.25 1216.5 L2106.66 1216.5 L2106.07 1216.5 L2105.49 1216.5 L2104.9 1216.5 L2104.31 1216.5 L2103.73 1216.5 L2103.14 1216.5 L2102.55 1216.5 L2101.97 1216.5 L2101.38 1216.5 L2100.8 1216.5 L2100.21 1216.5 L2099.62 1216.5 L2099.04 1216.5 L2098.45 1216.5 L2097.86 1216.5 L2097.28 1216.5 L2096.69 1216.5 L2096.1 1216.5 L2095.52 1216.5 L2094.93 1216.5 L2094.35 1216.5 L2093.76 1216.5 L2093.17 1216.5 L2092.59 1216.5 L2092 1216.5 L2091.41 1216.5 L2090.83 1216.5 L2090.24 1216.5 L2089.65 1216.5 L2089.07 1216.5 L2088.48 1216.5 L2087.89 1216.5 L2087.31 1216.5 L2086.72 1216.5 L2086.14 1216.5 L2085.55 1216.5 L2084.96 1216.5 L2084.38 1216.5 L2083.79 1216.5 L2083.2 1216.5 L2082.62 1216.5 L2082.03 1216.5 L2081.44 1216.5 L2080.86 1216.5 L2080.27 1216.5 L2079.68 1216.5 L2079.1 1216.5 L2078.51 1216.5 L2077.93 1216.5 L2077.34 1216.5 L2076.75 1216.5 L2076.17 1216.5 L2075.58 1216.5 L2074.99 1216.5 L2074.41 1216.5 L2073.82 1216.5 L2073.23 1216.5 L2072.65 1216.5 L2072.06 1216.5 L2071.48 1216.5 L2070.89 1216.5 L2070.3 1216.5 L2069.72 1216.5 L2069.13 1216.5 L2068.54 1216.5 L2067.96 1216.5 L2067.37 1216.5 L2066.78 1216.5 L2066.2 1216.5 L2065.61 1216.5 L2065.02 1216.5 L2064.44 1216.5 L2063.85 1216.5 L2063.27 1216.5 L2062.68 1216.5 L2062.09 1216.5 L2061.51 1216.5 L2060.92 1216.5 L2060.33 1216.5 L2059.75 1216.5 L2059.16 1216.5 L2058.57 1216.5 L2057.99 1216.5 L2057.4 1216.5 L2056.81 1216.5 L2056.23 1216.5 L2055.64 1216.5 L2055.06 1216.5 L2054.47 1216.5 L2053.88 1216.5 L2053.3 1216.5 L2052.71 1216.5 L2052.12 1216.5 L2051.54 1216.5 L2050.95 1216.5 L2050.36 1216.5 L2049.78 1216.5 L2049.19 1216.5 L2048.6 1216.5 L2048.02 1216.5 L2047.43 1216.5 L2046.85 1216.5 L2046.26 1216.5 L2045.67 1216.5 L2045.09 1216.5 L2044.5 1216.5 L2043.91 1216.5 L2043.33 1216.5 L2042.74 1216.5 L2042.15 1216.5 L2041.57 1216.5 L2040.98 1216.5 L2040.4 1216.5 L2039.81 1216.5 L2039.22 1216.5 L2038.64 1216.5 L2038.05 1216.5 L2037.46 1216.5 L2036.88 1216.5 L2036.29 1216.5 L2035.7 1216.5 L2035.12 1216.5 L2034.53 1216.5 L2033.94 1216.5 L2033.36 1216.5 L2032.77 1216.5 L2032.19 1216.5 L2031.6 1216.5 L2031.01 1216.5 L2030.43 1216.5 L2029.84 1216.5 L2029.25 1216.5 L2028.67 1216.5 L2028.08 1216.5 L2027.49 1216.5 L2026.91 1216.5 L2026.32 1216.5 L2025.73 1216.5 L2025.15 1216.5 L2024.56 1216.5 L2023.98 1216.5 L2023.39 1216.5 L2022.8 1216.5 L2022.22 1216.5 L2021.63 1216.5 L2021.04 1216.5 L2020.46 1216.5 L2019.87 1216.5 L2019.28 1216.5 L2018.7 1216.5 L2018.11 1216.5 L2017.53 1216.5 L2016.94 1216.5 L2016.35 1216.5 L2015.77 1216.5 L2015.18 1216.5 L2014.59 1216.5 L2014.01 1216.5 L2013.42 1216.5 L2012.83 1216.5 L2012.25 1216.5 L2011.66 1216.5 L2011.07 1216.5 L2010.49 1216.5 L2009.9 1216.5 L2009.32 1216.5 L2008.73 1216.5 L2008.14 1216.5 L2007.56 1216.5 L2006.97 1216.5 L2006.38 1216.5 L2005.8 1216.5 L2005.21 1216.5 L2004.62 1216.5 L2004.04 1216.5 L2003.45 1216.5 L2002.86 1216.5 L2002.28 1216.5 L2001.69 1216.5 L2001.11 1216.5 L2000.52 1216.5 L1999.93 1216.5 L1999.35 1216.5 L1998.76 1216.5 L1998.17 1216.5 L1997.59 1216.5 L1997 1216.5 L1996.41 1216.5 L1995.83 1216.5 L1995.24 1216.5 L1994.65 1216.5 L1994.07 1216.5 L1993.48 1216.5 L1992.9 1216.5 L1992.31 1216.5 L1991.72 1216.5 L1991.14 1216.5 L1990.55 1216.5 L1989.96 1216.5 L1989.38 1216.5 L1988.79 1216.5 L1988.2 1216.5 L1987.62 1216.5 L1987.03 1216.5 L1986.45 1216.5 L1985.86 1216.5 L1985.27 1216.5 L1984.69 1216.5 L1984.1 1216.5 L1983.51 1216.5 L1982.93 1216.5 L1982.34 1216.5 L1981.75 1216.5 L1981.17 1216.5 L1980.58 1216.5 L1979.99 1216.5 L1979.41 1216.5 L1978.82 1216.5 L1978.24 1216.5 L1977.65 1216.5 L1977.06 1216.5 L1976.48 1216.5 L1975.89 1216.5 L1975.3 1216.5 L1974.72 1216.5 L1974.13 1216.5 L1973.54 1216.5 L1972.96 1216.5 L1972.37 1216.5 L1971.78 1216.5 L1971.2 1216.5 L1970.61 1216.5 L1970.03 1216.5 L1969.44 1216.5 L1968.85 1216.5 L1968.27 1216.5 L1967.68 1216.5 L1967.09 1216.5 L1966.51 1216.5 L1965.92 1216.5 L1965.33 1216.5 L1964.75 1216.5 L1964.16 1216.5 L1963.58 1216.5 L1962.99 1216.5 L1962.4 1216.5 L1961.82 1216.5 L1961.23 1216.5 L1960.64 1216.5 L1960.06 1216.5 L1959.47 1216.5 L1958.88 1216.5 L1958.3 1216.5 L1957.71 1216.5 L1957.12 1216.5 L1956.54 1216.5 L1955.95 1216.5 L1955.37 1216.5 L1954.78 1216.5 L1954.19 1216.5 L1953.61 1216.5 L1953.02 1216.5 L1952.43 1216.5 L1951.85 1216.5 L1951.26 1216.5 L1950.67 1216.5 L1950.09 1216.5 L1949.5 1216.5 L1948.91 1216.5 L1948.33 1216.5 L1947.74 1216.5 L1947.16 1216.5 L1946.57 1216.5 L1945.98 1216.5 L1945.4 1216.5 L1944.81 1216.5 L1944.22 1216.5 L1943.64 1216.5 L1943.05 1216.5 L1942.46 1216.5 L1941.88 1216.5 L1941.29 1216.5 L1940.71 1216.5 L1940.12 1216.5 L1939.53 1216.5 L1938.95 1216.5 L1938.36 1216.5 L1937.77 1216.5 L1937.19 1216.5 L1936.6 1216.5 L1936.01 1216.5 L1935.43 1216.5 L1934.84 1216.5 L1934.25 1216.5 L1933.67 1216.5 L1933.08 1216.5 L1932.5 1216.5 L1931.91 1216.5 L1931.32 1216.5 L1930.74 1216.5 L1930.15 1216.5 L1929.56 1216.5 L1928.98 1216.5 L1928.39 1216.5 L1927.8 1216.5 L1927.22 1216.5 L1926.63 1216.5 L1926.04 1216.5 L1925.46 1216.5 L1924.87 1216.5 L1924.29 1216.5 L1923.7 1216.5 L1923.11 1216.5 L1922.53 1216.5 L1921.94 1216.5 L1921.35 1216.5 L1920.77 1216.5 L1920.18 1216.5 L1919.59 1216.5 L1919.01 1216.5 L1918.42 1216.5 L1917.83 1216.5 L1917.25 1216.5 L1916.66 1216.5 L1916.08 1216.5 L1915.49 1216.5 L1914.9 1216.5 L1914.32 1216.5 L1913.73 1216.5 L1913.14 1216.5 L1912.56 1216.5 L1911.97 1216.5 L1911.38 1216.5 L1910.8 1216.5 L1910.21 1216.5 L1909.63 1216.5 L1909.04 1216.5 L1908.45 1216.5 L1907.87 1216.5 L1907.28 1216.5 L1906.69 1216.5 L1906.11 1216.5 L1905.52 1216.5 L1904.93 1216.5 L1904.35 1216.5 L1903.76 1216.5 L1903.17 1216.5 L1902.59 1216.5 L1902 1216.5 L1901.42 1216.5 L1900.83 1216.5 L1900.24 1216.5 L1899.66 1216.5 L1899.07 1216.5 L1898.48 1216.5 L1897.9 1216.5 L1897.31 1216.5 L1896.72 1216.5 L1896.14 1216.5 L1895.55 1216.5 L1894.96 1216.5 L1894.38 1216.5 L1893.79 1216.5 L1893.21 1216.5 L1892.62 1216.5 L1892.03 1216.5 L1891.45 1216.5 L1890.86 1216.5 L1890.27 1216.5 L1889.69 1216.5 L1889.1 1216.5 L1888.51 1216.5 L1887.93 1216.5 L1887.34 1216.5 L1886.76 1216.5 L1886.17 1216.5 L1885.58 1216.5 L1885 1216.5 L1884.41 1216.5 L1883.82 1216.5 L1883.24 1216.5 L1882.65 1216.5 L1882.06 1216.5 L1881.48 1216.5 L1880.89 1216.5 L1880.3 1216.5 L1879.72 1216.5 L1879.13 1216.5 L1878.55 1216.5 L1877.96 1216.5 L1877.37 1216.5 L1876.79 1216.5 L1876.2 1216.5 L1875.61 1216.5 L1875.03 1216.5 L1874.44 1216.5 L1873.85 1216.5 L1873.27 1216.5 L1872.68 1216.5 L1872.09 1216.5 L1871.51 1216.5 L1870.92 1216.5 L1870.34 1216.5 L1869.75 1216.5 L1869.16 1216.5 L1868.58 1216.5 L1867.99 1216.5 L1867.4 1216.5 L1866.82 1216.5 L1866.23 1216.5 L1865.64 1216.5 L1865.06 1216.5 L1864.47 1216.5 L1863.88 1216.5 L1863.3 1216.5 L1862.71 1216.5 L1862.13 1216.5 L1861.54 1216.5 L1860.95 1216.5 L1860.37 1216.5 L1859.78 1216.5 L1859.19 1216.5 L1858.61 1216.5 L1858.02 1216.5 L1857.43 1216.5 L1856.85 1216.5 L1856.26 1216.5 L1855.68 1216.5 L1855.09 1216.5 L1854.5 1216.5 L1853.92 1216.5 L1853.33 1216.5 L1852.74 1216.5 L1852.16 1216.5 L1851.57 1216.5 L1850.98 1216.5 L1850.4 1216.5 L1849.81 1216.5 L1849.22 1216.5 L1848.64 1216.5 L1848.05 1216.5 L1847.47 1216.5 L1846.88 1216.5 L1846.29 1216.5 L1845.71 1216.5 L1845.12 1216.5 L1844.53 1216.5 L1843.95 1216.5 L1843.36 1216.5 L1842.77 1216.5 L1842.19 1216.5 L1841.6 1216.5 L1841.01 1216.5 L1840.43 1216.5 L1839.84 1216.5 L1839.26 1216.5 L1838.67 1216.5 L1838.08 1216.5 L1837.5 1216.5 L1836.91 1216.5 L1836.32 1216.5 L1835.74 1216.5 L1835.15 1216.5 L1834.56 1216.5 L1833.98 1216.5 L1833.39 1216.5 L1832.81 1216.5 L1832.22 1216.5 L1831.63 1216.5 L1831.05 1216.5 L1830.46 1216.5 L1829.87 1216.5 L1829.29 1216.5 L1828.7 1216.5 L1828.11 1216.5 L1827.53 1216.5 L1826.94 1216.5 L1826.35 1216.5 L1825.77 1216.5 L1825.18 1216.5 L1824.6 1216.5 L1824.01 1216.5 L1823.42 1216.5 L1822.84 1216.5 L1822.25 1216.5 L1821.66 1216.5 L1821.08 1216.5 L1820.49 1216.5 L1819.9 1216.5 L1819.32 1216.5 L1818.73 1216.5 L1818.14 1216.5 L1817.56 1216.5 L1816.97 1216.5 L1816.39 1216.5 L1815.8 1216.5 L1815.21 1216.5 L1814.63 1216.5 L1814.04 1216.5 L1813.45 1216.5 L1812.87 1216.5 L1812.28 1216.5 L1811.69 1216.5 L1811.11 1216.5 L1810.52 1216.5 L1809.94 1216.5 L1809.35 1216.5 L1808.76 1216.5 L1808.18 1216.5 L1807.59 1216.5 L1807 1216.5 L1806.42 1216.5 L1805.83 1216.5 L1805.24 1216.5 L1804.66 1216.5 L1804.07 1216.5 L1803.48 1216.5 L1802.9 1216.5 L1802.31 1216.5 L1801.73 1216.5 L1801.14 1216.5 L1800.55 1216.5 L1799.97 1216.5 L1799.38 1216.5 L1798.79 1216.5 L1798.21 1216.5 L1797.62 1216.5 L1797.03 1216.5 L1796.45 1216.5 L1795.86 1216.5 L1795.27 1216.5 L1794.69 1216.5 L1794.1 1216.5 L1793.52 1216.5 L1792.93 1216.5 L1792.34 1216.5 L1791.76 1216.5 L1791.17 1216.5 L1790.58 1216.5 L1790 1216.5 L1789.41 1216.5 L1788.82 1216.5 L1788.24 1216.5 L1787.65 1216.5 L1787.06 1216.5 L1786.48 1216.5 L1785.89 1216.5 L1785.31 1216.5 L1784.72 1216.5 L1784.13 1216.5 L1783.55 1216.5 L1782.96 1216.5 L1782.37 1216.5 L1781.79 1216.5 L1781.2 1216.5 L1780.61 1216.5 L1780.03 1216.5 L1779.44 1216.5 L1778.86 1216.5 L1778.27 1216.5 L1777.68 1216.5 L1777.1 1216.5 L1776.51 1216.5 L1775.92 1216.5 L1775.34 1216.5 L1774.75 1216.5 L1774.16 1216.5 L1773.58 1216.5 L1772.99 1216.5 L1772.4 1216.5 L1771.82 1216.5 L1771.23 1216.5 L1770.65 1216.5 L1770.06 1216.5 L1769.47 1216.5 L1768.89 1216.5 L1768.3 1216.5 L1767.71 1216.5 L1767.13 1216.5 L1766.54 1216.5 L1765.95 1216.5 L1765.37 1216.5 L1764.78 1216.5 L1764.19 1216.5 L1763.61 1216.5 L1763.02 1216.5 L1762.44 1216.5 L1761.85 1216.5 L1761.26 1216.5 L1760.68 1216.5 L1760.09 1216.5 L1759.5 1216.5 L1758.92 1216.5 L1758.33 1216.5 L1757.74 1216.5 L1757.16 1216.5 L1756.57 1216.5 L1755.99 1216.5 L1755.4 1216.5 L1754.81 1216.5 L1754.23 1216.5 L1753.64 1216.5 L1753.05 1216.5 L1752.47 1216.5 L1751.88 1216.5 L1751.29 1216.5 L1750.71 1216.5 L1750.12 1216.5 L1749.53 1216.5 L1748.95 1216.5 L1748.36 1216.5 L1747.78 1216.5 L1747.19 1216.5 L1746.6 1216.5 L1746.02 1216.5 L1745.43 1216.5 L1744.84 1216.5 L1744.26 1216.5 L1743.67 1216.5 L1743.08 1216.5 L1742.5 1216.5 L1741.91 1216.5 L1741.32 1216.5 L1740.74 1216.5 L1740.15 1216.5 L1739.57 1216.5 L1738.98 1216.5 L1738.39 1216.5 L1737.81 1216.5 L1737.22 1216.5 L1736.63 1216.5 L1736.05 1216.5 L1735.46 1216.5 L1734.87 1216.5 L1734.29 1216.5 L1733.7 1216.5 L1733.11 1216.5 L1732.53 1216.5 L1731.94 1216.5 L1731.36 1216.5 L1730.77 1216.5 L1730.18 1216.5 L1729.6 1216.5 L1729.01 1216.5 L1728.42 1216.5 L1727.84 1216.5 L1727.25 1216.5 L1726.66 1216.5 L1726.08 1216.5 L1725.49 1216.5 L1724.91 1216.5 L1724.32 1216.5 L1723.73 1216.5 L1723.15 1216.5 L1722.56 1216.5 L1721.97 1216.5 L1721.39 1216.5 L1720.8 1216.5 L1720.21 1216.5 L1719.63 1216.5 L1719.04 1216.5 L1718.45 1216.5 L1717.87 1216.5 L1717.28 1216.5 L1716.7 1216.5 L1716.11 1216.5 L1715.52 1216.5 L1714.94 1216.5 L1714.35 1216.5 L1713.76 1216.5 L1713.18 1216.5 L1712.59 1216.5 L1712 1216.5 L1711.42 1216.5 L1710.83 1216.5 L1710.24 1216.5 L1709.66 1216.5 L1709.07 1216.5 L1708.49 1216.5 L1707.9 1216.5 L1707.31 1216.5 L1706.73 1216.5 L1706.14 1216.5 L1705.55 1216.5 L1704.97 1216.5 L1704.38 1216.5 L1703.79 1216.5 L1703.21 1216.5 L1702.62 1216.5 L1702.04 1216.5 L1701.45 1216.5 L1700.86 1216.5 L1700.28 1216.5 L1699.69 1216.5 L1699.1 1216.5 L1698.52 1216.5 L1697.93 1216.5 L1697.34 1216.5 L1696.76 1216.5 L1696.17 1216.5 L1695.58 1216.5 L1695 1216.5 L1694.41 1216.5 L1693.83 1216.5 L1693.24 1216.5 L1692.65 1216.5 L1692.07 1216.5 L1691.48 1216.5 L1690.89 1216.5 L1690.31 1216.5 L1689.72 1216.5 L1689.13 1216.5 L1688.55 1216.5 L1687.96 1216.5 L1687.37 1216.5 L1686.79 1216.5 L1686.2 1216.5 L1685.62 1216.5 L1685.03 1216.5 L1684.44 1216.5 L1683.86 1216.5 L1683.27 1216.5 L1682.68 1216.5 L1682.1 1216.5 L1681.51 1216.5 L1680.92 1216.5 L1680.34 1216.5 L1679.75 1216.5 L1679.17 1216.5 L1678.58 1216.5 L1677.99 1216.5 L1677.41 1216.5 L1676.82 1216.5 L1676.23 1216.5 L1675.65 1216.5 L1675.06 1216.5 L1674.47 1216.5 L1673.89 1216.5 L1673.3 1216.5 L1672.71 1216.5 L1672.13 1216.5 L1671.54 1216.5 L1670.96 1216.5 L1670.37 1216.5 L1669.78 1216.5 L1669.2 1216.5 L1668.61 1216.5 L1668.02 1216.5 L1667.44 1216.5 L1666.85 1216.5 L1666.26 1216.5 L1665.68 1216.5 L1665.09 1216.5 L1664.5 1216.5 L1663.92 1216.5 L1663.33 1216.5 L1662.75 1216.5 L1662.16 1216.5 L1661.57 1216.5 L1660.99 1216.5 L1660.4 1216.5 L1659.81 1216.5 L1659.23 1216.5 L1658.64 1216.5 L1658.05 1216.5 L1657.47 1216.5 L1656.88 1216.5 L1656.29 1216.5 L1655.71 1216.5 L1655.12 1216.5 L1654.54 1216.5 L1653.95 1216.5 L1653.36 1216.5 L1652.78 1216.5 L1652.19 1216.5 L1651.6 1216.5 L1651.02 1216.5 L1650.43 1216.5 L1649.84 1216.5 L1649.26 1216.5 L1648.67 1216.5 L1648.09 1216.5 L1647.5 1216.5 L1646.91 1216.5 L1646.33 1216.5 L1645.74 1216.5 L1645.15 1216.5 L1644.57 1216.5 L1643.98 1216.5 L1643.39 1216.5 L1642.81 1216.5 L1642.22 1216.5 L1641.63 1216.5 L1641.05 1216.5 L1640.46 1216.5 L1639.88 1216.5 L1639.29 1216.5 L1638.7 1216.5 L1638.12 1216.5 L1637.53 1216.5 L1636.94 1216.5 L1636.36 1216.5 L1635.77 1216.5 L1635.18 1216.5 L1634.6 1216.5 L1634.01 1216.5 L1633.42 1216.5 L1632.84 1216.5 L1632.25 1216.5 L1631.67 1216.5 L1631.08 1216.5 L1630.49 1216.5 L1629.91 1216.5 L1629.32 1216.5 L1628.73 1216.5 L1628.15 1216.5 L1627.56 1216.5 L1626.97 1216.5 L1626.39 1216.5 L1625.8 1216.5 L1625.22 1216.5 L1624.63 1216.5 L1624.04 1216.5 L1623.46 1216.5 L1622.87 1216.5 L1622.28 1216.5 L1621.7 1216.5 L1621.11 1216.5 L1620.52 1216.5 L1619.94 1216.5 L1619.35 1216.5 L1618.76 1216.5 L1618.18 1216.5 L1617.59 1216.5 L1617.01 1216.5 L1616.42 1216.5 L1615.83 1216.5 L1615.25 1216.5 L1614.66 1216.5 L1614.07 1216.5 L1613.49 1216.5 L1612.9 1216.5 L1612.31 1216.5 L1611.73 1216.5 L1611.14 1216.5 L1610.55 1216.5 L1609.97 1216.5 L1609.38 1216.5 L1608.8 1216.5 L1608.21 1216.5 L1607.62 1216.5 L1607.04 1216.5 L1606.45 1216.5 L1605.86 1216.5 L1605.28 1216.5 L1604.69 1216.5 L1604.1 1216.5 L1603.52 1216.5 L1602.93 1216.5 L1602.34 1216.5 L1601.76 1216.5 L1601.17 1216.5 L1600.59 1216.5 L1600 1216.5 L1599.41 1216.5 L1598.83 1216.5 L1598.24 1216.5 L1597.65 1216.5 L1597.07 1216.5 L1596.48 1216.5 L1595.89 1216.5 L1595.31 1216.5 L1594.72 1216.5 L1594.14 1216.5 L1593.55 1216.5 L1592.96 1216.5 L1592.38 1216.5 L1591.79 1216.5 L1591.2 1216.5 L1590.62 1216.5 L1590.03 1216.5 L1589.44 1216.5 L1588.86 1216.5 L1588.27 1216.5 L1587.68 1216.5 L1587.1 1216.5 L1586.51 1216.5 L1585.93 1216.5 L1585.34 1216.5 L1584.75 1216.5 L1584.17 1216.5 L1583.58 1216.5 L1582.99 1216.5 L1582.41 1216.5 L1581.82 1216.5 L1581.23 1216.5 L1580.65 1216.5 L1580.06 1216.5 L1579.47 1216.5 L1578.89 1216.5 L1578.3 1216.5 L1577.72 1216.5 L1577.13 1216.5 L1576.54 1216.5 L1575.96 1216.5 L1575.37 1216.5 L1574.78 1216.5 L1574.2 1216.5 L1573.61 1216.5 L1573.02 1216.5 L1572.44 1216.5 L1571.85 1216.5 L1571.27 1216.5 L1570.68 1216.5 L1570.09 1216.5 L1569.51 1216.5 L1568.92 1216.5 L1568.33 1216.5 L1567.75 1216.5 L1567.16 1216.5 L1566.57 1216.5 L1565.99 1216.5 L1565.4 1216.5 L1564.81 1216.5 L1564.23 1216.5 L1563.64 1216.5 L1563.06 1216.5 L1562.47 1216.5 L1561.88 1216.5 L1561.3 1216.5 L1560.71 1216.5 L1560.12 1216.5 L1559.54 1216.5 L1558.95 1216.5 L1558.36 1216.5 L1557.78 1216.5 L1557.19 1216.5 L1556.6 1216.5 L1556.02 1216.5 L1555.43 1216.5 L1554.85 1216.5 L1554.26 1216.5 L1553.67 1216.5 L1553.09 1216.5 L1552.5 1216.5 L1551.91 1216.5 L1551.33 1216.5 L1550.74 1216.5 L1550.15 1216.5 L1549.57 1216.5 L1548.98 1216.5 L1548.4 1216.5 L1547.81 1216.5 L1547.22 1216.5 L1546.64 1216.5 L1546.05 1216.5 L1545.46 1216.5 L1544.88 1216.5 L1544.29 1216.5 L1543.7 1216.5 L1543.12 1216.5 L1542.53 1216.5 L1541.94 1216.5 L1541.36 1216.5 L1540.77 1216.5 L1540.19 1216.5 L1539.6 1216.5 L1539.01 1216.5 L1538.43 1216.5 L1537.84 1216.5 L1537.25 1216.5 L1536.67 1216.5 L1536.08 1216.5 L1535.49 1216.5 L1534.91 1216.5 L1534.32 1216.5 L1533.73 1216.5 L1533.15 1216.5 L1532.56 1216.5 L1531.98 1216.5 L1531.39 1216.5 L1530.8 1216.5 L1530.22 1216.5 L1529.63 1216.5 L1529.04 1216.5 L1528.46 1216.5 L1527.87 1216.5 L1527.28 1216.5 L1526.7 1216.5 L1526.11 1216.5 L1525.52 1216.5 L1524.94 1216.5 L1524.35 1216.5 L1523.77 1216.5 L1523.18 1216.5 L1522.59 1216.5 L1522.01 1216.5 L1521.42 1216.5 L1520.83 1216.5 L1520.25 1216.5 L1519.66 1216.5 L1519.07 1216.5 L1518.49 1216.5 L1517.9 1216.5 L1517.32 1216.5 L1516.73 1216.5 L1516.14 1216.5 L1515.56 1216.5 L1514.97 1216.5 L1514.38 1216.5 L1513.8 1216.5 L1513.21 1216.5 L1512.62 1216.5 L1512.04 1216.5 L1511.45 1216.5 L1510.86 1216.5 L1510.28 1216.5 L1509.69 1216.5 L1509.11 1216.5 L1508.52 1216.5 L1507.93 1216.5 L1507.35 1216.5 L1506.76 1216.5 L1506.17 1216.5 L1505.59 1216.5 L1505 1216.5 L1504.41 1216.5 L1503.83 1216.5 L1503.24 1216.5 L1502.65 1216.5 L1502.07 1216.5 L1501.48 1216.5 L1500.9 1216.5 L1500.31 1216.5 L1499.72 1216.5 L1499.14 1216.5 L1498.55 1216.5 L1497.96 1216.5 L1497.38 1216.5 L1496.79 1216.5 L1496.2 1216.5 L1495.62 1216.5 L1495.03 1216.5 L1494.45 1216.5 L1493.86 1216.5 L1493.27 1216.5 L1492.69 1216.5 L1492.1 1216.5 L1491.51 1216.5 L1490.93 1216.5 L1490.34 1216.5 L1489.75 1216.5 L1489.17 1216.5 L1488.58 1216.5 L1487.99 1216.5 L1487.41 1216.5 L1486.82 1216.5 L1486.24 1216.5 L1485.65 1216.5 L1485.06 1216.5 L1484.48 1216.5 L1483.89 1216.5 L1483.3 1216.5 L1482.72 1216.5 L1482.13 1216.5 L1481.54 1216.5 L1480.96 1216.5 L1480.37 1216.5 L1479.78 1216.5 L1479.2 1216.5 L1478.61 1216.5 L1478.03 1216.5 L1477.44 1216.5 L1476.85 1216.5 L1476.27 1216.5 L1475.68 1216.5 L1475.09 1216.5 L1474.51 1216.5 L1473.92 1216.5 L1473.33 1216.5 L1472.75 1216.5 L1472.16 1216.5 L1471.57 1216.5 L1470.99 1216.5 L1470.4 1216.5 L1469.82 1216.5 L1469.23 1216.5 L1468.64 1216.5 L1468.06 1216.5 L1467.47 1216.5 L1466.88 1216.5 L1466.3 1216.5 L1465.71 1216.5 L1465.12 1216.5 L1464.54 1216.5 L1463.95 1216.5 L1463.37 1216.5 L1462.78 1216.5 L1462.19 1216.5 L1461.61 1216.5 L1461.02 1216.5 L1460.43 1216.5 L1459.85 1216.5 L1459.26 1216.5 L1458.67 1216.5 L1458.09 1216.5 L1457.5 1216.5 L1456.91 1216.5 L1456.33 1216.5 L1455.74 1216.5 L1455.16 1216.5 L1454.57 1216.5 L1453.98 1216.5 L1453.4 1216.5 L1452.81 1216.5 L1452.22 1216.5 L1451.64 1216.5 L1451.05 1216.5 L1450.46 1216.5 L1449.88 1216.5 L1449.29 1216.5 L1448.7 1216.5 L1448.12 1216.5 L1447.53 1216.5 L1446.95 1216.5 L1446.36 1216.5 L1445.77 1216.5 L1445.19 1216.5 L1444.6 1216.5 L1444.01 1216.5 L1443.43 1216.5 L1442.84 1216.5 L1442.25 1216.5 L1441.67 1216.5 L1441.08 1216.5 L1440.5 1216.5 L1439.91 1216.5 L1439.32 1216.5 L1438.74 1216.5 L1438.15 1216.5 L1437.56 1216.5 L1436.98 1216.5 L1436.39 1216.5 L1435.8 1216.5 L1435.22 1216.5 L1434.63 1216.5 L1434.04 1216.5 L1433.46 1216.5 L1432.87 1216.5 L1432.29 1216.5 L1431.7 1216.5 L1431.11 1216.5 L1430.53 1216.5 L1429.94 1216.5 L1429.35 1216.5 L1428.77 1216.5 L1428.18 1216.5 L1427.59 1216.5 L1427.01 1216.5 L1426.42 1216.5 L1425.83 1216.5 L1425.25 1216.5 L1424.66 1216.5 L1424.08 1216.5 L1423.49 1216.5 L1422.9 1216.5 L1422.32 1216.5 L1421.73 1216.5 L1421.14 1216.5 L1420.56 1216.5 L1419.97 1216.5 L1419.38 1216.5 L1418.8 1216.5 L1418.21 1216.5 L1417.63 1216.5 L1417.04 1216.5 L1416.45 1216.5 L1415.87 1216.5 L1415.28 1216.5 L1414.69 1216.5 L1414.11 1216.5 L1413.52 1216.5 L1412.93 1216.5 L1412.35 1216.5 L1411.76 1216.5 L1411.17 1216.5 L1410.59 1216.5 L1410 1216.5 L1409.42 1216.5 L1408.83 1216.5 L1408.24 1216.5 L1407.66 1216.5 L1407.07 1216.5 L1406.48 1216.5 L1405.9 1216.5 L1405.31 1216.5 L1404.72 1216.5 L1404.14 1216.5 L1403.55 1216.5 L1402.96 1216.5 L1402.38 1216.5 L1401.79 1216.5 L1401.21 1216.5 L1400.62 1216.5 L1400.03 1216.5 L1399.45 1216.5 L1398.86 1216.5 L1398.27 1216.5 L1397.69 1216.5 L1397.1 1216.5 L1396.51 1216.5 L1395.93 1216.5 L1395.34 1216.5 L1394.75 1216.5 L1394.17 1216.5 L1393.58 1216.5 L1393 1216.5 L1392.41 1216.5 L1391.82 1216.5 L1391.24 1216.5 L1390.65 1216.5 L1390.06 1216.5 L1389.48 1216.5 L1388.89 1216.5 L1388.3 1216.5 L1387.72 1216.5 L1387.13 1216.5 L1386.55 1216.5 L1385.96 1216.5 L1385.37 1216.5 L1384.79 1216.5 L1384.2 1216.5 L1383.61 1216.5 L1383.03 1216.5 L1382.44 1216.5 L1381.85 1216.5 L1381.27 1216.5 L1380.68 1216.5 L1380.09 1216.5 L1379.51 1216.5 L1378.92 1216.5 L1378.34 1216.5 L1377.75 1216.5 L1377.16 1216.5 L1376.58 1216.5 L1375.99 1216.5 L1375.4 1216.5 L1374.82 1216.5 L1374.23 1216.5 L1373.64 1216.5 L1373.06 1216.5 L1372.47 1216.5 L1371.88 1216.5 L1371.3 1216.5 L1370.71 1216.5 L1370.13 1216.5 L1369.54 1216.5 L1368.95 1216.5 L1368.37 1216.5 L1367.78 1216.5 L1367.19 1216.5 L1366.61 1216.5 L1366.02 1216.5 L1365.43 1216.5 L1364.85 1216.5 L1364.26 1216.5 L1363.68 1216.5 L1363.09 1216.5 L1362.5 1216.5 L1361.92 1216.5 L1361.33 1216.5 L1360.74 1216.5 L1360.16 1216.5 L1359.57 1216.5 L1358.98 1216.5 L1358.4 1216.5 L1357.81 1216.5 L1357.22 1216.5 L1356.64 1216.5 L1356.05 1216.5 L1355.47 1216.5 L1354.88 1216.5 L1354.29 1216.5 L1353.71 1216.5 L1353.12 1216.5 L1352.53 1216.5 L1351.95 1216.5 L1351.36 1216.5 L1350.77 1216.5 L1350.19 1216.5 L1349.6 1216.5 L1349.01 1216.5 L1348.43 1216.5 L1347.84 1216.5 L1347.26 1216.5 L1346.67 1216.5 L1346.08 1216.5 L1345.5 1216.5 L1344.91 1216.5 L1344.32 1216.5 L1343.74 1216.5 L1343.15 1216.5 L1342.56 1216.5 L1341.98 1216.5 L1341.39 1216.5 L1340.8 1216.5 L1340.22 1216.5 L1339.63 1216.5 L1339.05 1216.5 L1338.46 1216.5 L1337.87 1216.5 L1337.29 1216.5 L1336.7 1216.5 L1336.11 1216.5 L1335.53 1216.5 L1334.94 1216.5 L1334.35 1216.5 L1333.77 1216.5 L1333.18 1216.5 L1332.6 1216.5 L1332.01 1216.5 L1331.42 1216.5 L1330.84 1216.5 L1330.25 1216.5 L1329.66 1216.5 L1329.08 1216.5 L1328.49 1216.5 L1327.9 1216.5 L1327.32 1216.5 L1326.73 1216.5 L1326.14 1216.5 L1325.56 1216.5 L1324.97 1216.5 L1324.39 1216.5 L1323.8 1216.5 L1323.21 1216.5 L1322.63 1216.5 L1322.04 1216.5 L1321.45 1216.5 L1320.87 1216.5 L1320.28 1216.5 L1319.69 1216.5 L1319.11 1216.5 L1318.52 1216.5 L1317.93 1216.5 L1317.35 1216.5 L1316.76 1216.5 L1316.18 1216.5 L1315.59 1216.5 L1315 1216.5 L1314.42 1216.5 L1313.83 1216.5 L1313.24 1216.5 L1312.66 1216.5 L1312.07 1216.5 L1311.48 1216.5 L1310.9 1216.5 L1310.31 1216.5 L1309.73 1216.5 L1309.14 1216.5 L1308.55 1216.5 L1307.97 1216.5 L1307.38 1216.5 L1306.79 1216.5 L1306.21 1216.5 L1305.62 1216.5 L1305.03 1216.5 L1304.45 1216.5 L1303.86 1216.5 L1303.27 1216.5 L1302.69 1216.5 L1302.1 1216.5 L1301.52 1216.5 L1300.93 1216.5 L1300.34 1216.5 L1299.76 1216.5 L1299.17 1216.5 L1298.58 1216.5 L1298 1216.5 L1297.41 1216.5 L1296.82 1216.5 L1296.24 1216.5 L1295.65 1216.5 L1295.06 1216.5 L1294.48 1216.5 L1293.89 1216.5 L1293.31 1216.5 L1292.72 1216.5 L1292.13 1216.5 L1291.55 1216.5 L1290.96 1216.5 L1290.37 1216.5 L1289.79 1216.5 L1289.2 1216.5 L1288.61 1216.5 L1288.03 1216.5 L1287.44 1216.5 L1286.86 1216.5 L1286.27 1216.5 L1285.68 1216.5 L1285.1 1216.5 L1284.51 1216.5 L1283.92 1216.5 L1283.34 1216.5 L1282.75 1216.5 L1282.16 1216.5 L1281.58 1216.5 L1280.99 1216.5 L1280.4 1216.5 L1279.82 1216.5 L1279.23 1216.5 L1278.65 1216.5 L1278.06 1216.5 L1277.47 1216.5 L1276.89 1216.5 L1276.3 1216.5 L1275.71 1216.5 L1275.13 1216.5 L1274.54 1216.5 L1273.95 1216.5 L1273.37 1216.5 L1272.78 1216.5 L1272.19 1216.5 L1271.61 1216.5 L1271.02 1216.5 L1270.44 1216.5 L1269.85 1216.5 L1269.26 1216.5 L1268.68 1216.5 L1268.09 1216.5 L1267.5 1216.5 L1266.92 1216.5 L1266.33 1216.5 L1265.74 1216.5 L1265.16 1216.5 L1264.57 1216.5 L1263.98 1216.5 L1263.4 1216.5 L1262.81 1216.5 L1262.23 1216.5 L1261.64 1216.5 L1261.05 1216.5 L1260.47 1216.5 L1259.88 1216.5 L1259.29 1216.5 L1258.71 1216.5 L1258.12 1216.5 L1257.53 1216.5 L1256.95 1216.5 L1256.36 1216.5 L1255.78 1216.5 L1255.19 1216.5 L1254.6 1216.5 L1254.02 1216.5 L1253.43 1216.5 L1252.84 1216.5 L1252.26 1216.5 L1251.67 1216.5 L1251.08 1216.5 L1250.5 1216.5 L1249.91 1216.5 L1249.32 1216.5 L1248.74 1216.5 L1248.15 1216.5 L1247.57 1216.5 L1246.98 1216.5 L1246.39 1216.5 L1245.81 1216.5 L1245.22 1216.5 L1244.63 1216.5 L1244.05 1216.5 L1243.46 1216.5 L1242.87 1216.5 L1242.29 1216.5 L1241.7 1216.5 L1241.11 1216.5 L1240.53 1216.5 L1239.94 1216.5 L1239.36 1216.5 L1238.77 1216.5 L1238.18 1216.5 L1237.6 1216.5 L1237.01 1216.5 L1236.42 1216.5 L1235.84 1216.5 L1235.25 1216.5 L1234.66 1216.5 L1234.08 1216.5 L1233.49 1216.5 L1232.91 1216.5 L1232.32 1216.5 L1231.73 1216.5 L1231.15 1216.5 L1230.56 1216.5 L1229.97 1216.5 L1229.39 1216.5 L1228.8 1216.5 L1228.21 1216.5 L1227.63 1216.5 L1227.04 1216.5 L1226.45 1216.5 L1225.87 1216.5 L1225.28 1216.5 L1224.7 1216.5 L1224.11 1216.5 L1223.52 1216.5 L1222.94 1216.5 L1222.35 1216.5 L1221.76 1216.5 L1221.18 1216.5 L1220.59 1216.5 L1220 1216.5 L1219.42 1216.5 L1218.83 1216.5 L1218.24 1216.5 L1217.66 1216.5 L1217.07 1216.5 L1216.49 1216.5 L1215.9 1216.5 L1215.31 1216.5 L1214.73 1216.5 L1214.14 1216.5 L1213.55 1216.5 L1212.97 1216.5 L1212.38 1216.5 L1211.79 1216.5 L1211.21 1216.5 L1210.62 1216.5 L1210.03 1216.5 L1209.45 1216.5 L1208.86 1216.5 L1208.28 1216.5 L1207.69 1216.5 L1207.1 1216.5 L1206.52 1216.5 L1205.93 1216.5 L1205.34 1216.5 L1204.76 1216.5 L1204.17 1216.5 L1203.58 1216.5 L1203 1216.5 L1202.41 1216.5 L1201.83 1216.5 L1201.24 1216.5 L1200.65 1216.5 L1200.07 1216.5 L1199.48 1216.5 L1198.89 1216.5 L1198.31 1216.5 L1197.72 1216.5 L1197.13 1216.5 L1196.55 1216.5 L1195.96 1216.5 L1195.37 1216.5 L1194.79 1216.5 L1194.2 1216.5 L1193.62 1216.5 L1193.03 1216.5 L1192.44 1216.5 L1191.86 1216.5 L1191.27 1216.5 L1190.68 1216.5 L1190.1 1216.5 L1189.51 1216.5 L1188.92 1216.5 L1188.34 1216.5 L1187.75 1216.5 L1187.16 1216.5 L1186.58 1216.5 L1185.99 1216.5 L1185.41 1216.5 L1184.82 1216.5 L1184.23 1216.5 L1183.65 1216.5 L1183.06 1216.5 L1182.47 1216.5 L1181.89 1216.5 L1181.3 1216.5 L1180.71 1216.5 L1180.13 1216.5 L1179.54 1216.5 L1178.96 1216.5 L1178.37 1216.5 L1177.78 1216.5 L1177.2 1216.5 L1176.61 1216.5 L1176.02 1216.5 L1175.44 1216.5 L1174.85 1216.5 L1174.26 1216.5 L1173.68 1216.5 L1173.09 1216.5 L1172.5 1216.5 L1171.92 1216.5 L1171.33 1216.5 L1170.75 1216.5 L1170.16 1216.5 L1169.57 1216.5 L1168.99 1216.5 L1168.4 1216.5 L1167.81 1216.5 L1167.23 1216.5 L1166.64 1216.5 L1166.05 1216.5 L1165.47 1216.5 L1164.88 1216.5 L1164.29 1216.5 L1163.71 1216.5 L1163.12 1216.5 L1162.54 1216.5 L1161.95 1216.5 L1161.36 1216.5 L1160.78 1216.5 L1160.19 1216.5 L1159.6 1216.5 L1159.02 1216.5 L1158.43 1216.5 L1157.84 1216.5 L1157.26 1216.5 L1156.67 1216.5 L1156.09 1216.5 L1155.5 1216.5 L1154.91 1216.5 L1154.33 1216.5 L1153.74 1216.5 L1153.15 1216.5 L1152.57 1216.5 L1151.98 1216.5 L1151.39 1216.5 L1150.81 1216.5 L1150.22 1216.5 L1149.63 1216.5 L1149.05 1216.5 L1148.46 1216.5 L1147.88 1216.5 L1147.29 1216.5 L1146.7 1216.5 L1146.12 1216.5 L1145.53 1216.5 L1144.94 1216.5 L1144.36 1216.5 L1143.77 1216.5 L1143.18 1216.5 L1142.6 1216.5 L1142.01 1216.5 L1141.42 1216.5 L1140.84 1216.5 L1140.25 1216.5 L1139.67 1216.5 L1139.08 1216.5 L1138.49 1216.5 L1137.91 1216.5 L1137.32 1216.5 L1136.73 1216.5 L1136.15 1216.5 L1135.56 1216.5 L1134.97 1216.5 L1134.39 1216.5 L1133.8 1216.5 L1133.21 1216.5 L1132.63 1216.5 L1132.04 1216.5 L1131.46 1216.5 L1130.87 1216.5 L1130.28 1216.5 L1129.7 1216.5 L1129.11 1216.5 L1128.52 1216.5 L1127.94 1216.5 L1127.35 1216.5 L1126.76 1216.5 L1126.18 1216.5 L1125.59 1216.5 L1125.01 1216.5 L1124.42 1216.5 L1123.83 1216.5 L1123.25 1216.5 L1122.66 1216.5 L1122.07 1216.5 L1121.49 1216.5 L1120.9 1216.5 L1120.31 1216.5 L1119.73 1216.5 L1119.14 1216.5 L1118.55 1216.5 L1117.97 1216.5 L1117.38 1216.5 L1116.8 1216.5 L1116.21 1216.5 L1115.62 1216.5 L1115.04 1216.5 L1114.45 1216.5 L1113.86 1216.5 L1113.28 1216.5 L1112.69 1216.5 L1112.1 1216.5 L1111.52 1216.5 L1110.93 1216.5 L1110.34 1216.5 L1109.76 1216.5 L1109.17 1216.5 L1108.59 1216.5 L1108 1216.5 L1107.41 1216.5 L1106.83 1216.5 L1106.24 1216.5 L1105.65 1216.5 L1105.07 1216.5 L1104.48 1216.5 L1103.89 1216.5 L1103.31 1216.5 L1102.72 1216.5 L1102.14 1216.5 L1101.55 1216.5 L1100.96 1216.5 L1100.38 1216.5 L1099.79 1216.5 L1099.2 1216.5 L1098.62 1216.5 L1098.03 1216.5 L1097.44 1216.5 L1096.86 1216.5 L1096.27 1216.5 L1095.68 1216.5 L1095.1 1216.5 L1094.51 1216.5 L1093.93 1216.5 L1093.34 1216.5 L1092.75 1216.5 L1092.17 1216.5 L1091.58 1216.5 L1090.99 1216.5 L1090.41 1216.5 L1089.82 1216.5 L1089.23 1216.5 L1088.65 1216.5 L1088.06 1216.5 L1087.47 1216.5 L1086.89 1216.5 L1086.3 1216.5 L1085.72 1216.5 L1085.13 1216.5 L1084.54 1216.5 L1083.96 1216.5 L1083.37 1216.5 L1082.78 1216.5 L1082.2 1216.5 L1081.61 1216.5 L1081.02 1216.5 L1080.44 1216.5 L1079.85 1216.5 L1079.26 1216.5 L1078.68 1216.5 L1078.09 1216.5 L1077.51 1216.5 L1076.92 1216.5 L1076.33 1216.5 L1075.75 1216.5 L1075.16 1216.5 L1074.57 1216.5 L1073.99 1216.5 L1073.4 1216.5 L1072.81 1216.5 L1072.23 1216.5 L1071.64 1216.5 L1071.06 1216.5 L1070.47 1216.5 L1069.88 1216.5 L1069.3 1216.5 L1068.71 1216.5 L1068.12 1216.5 L1067.54 1216.5 L1066.95 1216.5 L1066.36 1216.5 L1065.78 1216.5 L1065.19 1216.5 L1064.6 1216.5 L1064.02 1216.5 L1063.43 1216.5 L1062.85 1216.5 L1062.26 1216.5 L1061.67 1216.5 L1061.09 1216.5 L1060.5 1216.5 L1059.91 1216.5 L1059.33 1216.5 L1058.74 1216.5 L1058.15 1216.5 L1057.57 1216.5 L1056.98 1216.5 L1056.39 1216.5 L1055.81 1216.5 L1055.22 1216.5 L1054.64 1216.5 L1054.05 1216.5 L1053.46 1216.5 L1052.88 1216.5 L1052.29 1216.5 L1051.7 1216.5 L1051.12 1216.5 L1050.53 1216.5 L1049.94 1216.5 L1049.36 1216.5 L1048.77 1216.5 L1048.19 1216.5 L1047.6 1216.5 L1047.01 1216.5 L1046.43 1216.5 L1045.84 1216.5 L1045.25 1216.5 L1044.67 1216.5 L1044.08 1216.5 L1043.49 1216.5 L1042.91 1216.5 L1042.32 1216.5 L1041.73 1216.5 L1041.15 1216.5 L1040.56 1216.5 L1039.98 1216.5 L1039.39 1216.5 L1038.8 1216.5 L1038.22 1216.5 L1037.63 1216.5 L1037.04 1216.5 L1036.46 1216.5 L1035.87 1216.5 L1035.28 1216.5 L1034.7 1216.5 L1034.11 1216.5 L1033.52 1216.5 L1032.94 1216.5 L1032.35 1216.5 L1031.77 1216.5 L1031.18 1216.5 L1030.59 1216.5 L1030.01 1216.5 L1029.42 1216.5 L1028.83 1216.5 L1028.25 1216.5 L1027.66 1216.5 L1027.07 1216.5 L1026.49 1216.5 L1025.9 1216.5 L1025.32 1216.5 L1024.73 1216.5 L1024.14 1216.5 L1023.56 1216.5 L1022.97 1216.5 L1022.38 1216.5 L1021.8 1216.5 L1021.21 1216.5 L1020.62 1216.5 L1020.04 1216.5 L1019.45 1216.5 L1018.86 1216.5 L1018.28 1216.5 L1017.69 1216.5 L1017.11 1216.5 L1016.52 1216.5 L1015.93 1216.5 L1015.35 1216.5 L1014.76 1216.5 L1014.17 1216.5 L1013.59 1216.5 L1013 1216.5 L1012.41 1216.5 L1011.83 1216.5 L1011.24 1216.5 L1010.65 1216.5 L1010.07 1216.5 L1009.48 1216.5 L1008.9 1216.5 L1008.31 1216.5 L1007.72 1216.5 L1007.14 1216.5 L1006.55 1216.5 L1005.96 1216.5 L1005.38 1216.5 L1004.79 1216.5 L1004.2 1216.5 L1003.62 1216.5 L1003.03 1216.5 L1002.44 1216.5 L1001.86 1216.5 L1001.27 1216.5 L1000.69 1216.5 L1000.1 1216.5 L999.513 1216.5 L998.926 1216.5 L998.34 1216.5 L997.754 1216.5 L997.167 1216.5 L996.581 1216.5 L995.994 1216.5 L995.408 1216.5 L994.822 1216.5 L994.235 1216.5 L993.649 1216.5 L993.062 1216.5 L992.476 1216.5 L991.889 1216.5 L991.303 1216.5 L990.717 1216.5 L990.13 1216.5 L989.544 1216.5 L988.957 1216.5 L988.371 1216.5 L987.785 1216.5 L987.198 1216.5 L986.612 1216.5 L986.025 1216.5  Z\" fill=\"#3da44d\" fill-rule=\"evenodd\" fill-opacity=\"0.5\"/>\n<polyline clip-path=\"url(#clip762)\" style=\"stroke:#3da44d; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"986.025,1216.55 986.612,1216.55 987.198,1216.55 987.785,1216.55 988.371,1216.55 988.957,1216.55 989.544,1216.55 990.13,1216.55 990.717,1216.55 991.303,1216.55 991.889,1216.55 992.476,1216.55 993.062,1216.55 993.649,1216.55 994.235,1216.55 994.822,1216.55 995.408,1216.55 995.994,1216.55 996.581,1216.55 997.167,1216.55 997.754,1216.55 998.34,1216.55 998.926,1216.55 999.513,1216.55 1000.1,1216.55 1000.69,1216.55 1001.27,1216.55 1001.86,1216.55 1002.44,1216.55 1003.03,1216.55 1003.62,1216.55 1004.2,1216.55 1004.79,1216.55 1005.38,1216.55 1005.96,1216.55 1006.55,1216.55 1007.14,1216.55 1007.72,1216.55 1008.31,1216.55 1008.9,1216.55 1009.48,1216.55 1010.07,1216.55 1010.65,1216.55 1011.24,1216.55 1011.83,1216.55 1012.41,1216.55 1013,1216.55 1013.59,1216.55 1014.17,1216.55 1014.76,1216.55 1015.35,1216.55 1015.93,1216.55 1016.52,1216.55 1017.11,1216.55 1017.69,1216.55 1018.28,1216.55 1018.86,1216.55 1019.45,1216.55 1020.04,1216.55 1020.62,1216.55 1021.21,1216.55 1021.8,1216.55 1022.38,1216.55 1022.97,1216.55 1023.56,1216.55 1024.14,1216.55 1024.73,1216.55 1025.32,1216.55 1025.9,1216.55 1026.49,1216.55 1027.07,1216.55 1027.66,1216.55 1028.25,1216.55 1028.83,1216.55 1029.42,1216.55 1030.01,1216.55 1030.59,1216.55 1031.18,1216.55 1031.77,1216.55 1032.35,1216.55 1032.94,1216.55 1033.52,1216.55 1034.11,1216.55 1034.7,1216.55 1035.28,1216.55 1035.87,1216.55 1036.46,1216.55 1037.04,1216.55 1037.63,1216.55 1038.22,1216.55 1038.8,1216.55 1039.39,1216.55 1039.98,1216.55 1040.56,1216.55 1041.15,1216.55 1041.73,1216.55 1042.32,1216.55 1042.91,1216.55 1043.49,1216.55 1044.08,1216.55 1044.67,1216.55 1045.25,1216.55 1045.84,1216.55 1046.43,1216.55 1047.01,1216.55 1047.6,1216.55 1048.19,1216.55 1048.77,1216.55 1049.36,1216.55 1049.94,1216.55 1050.53,1216.55 1051.12,1216.55 1051.7,1216.55 1052.29,1216.55 1052.88,1216.55 1053.46,1216.55 1054.05,1216.55 1054.64,1216.55 1055.22,1216.55 1055.81,1216.55 1056.39,1216.55 1056.98,1216.55 1057.57,1216.55 1058.15,1216.55 1058.74,1216.55 1059.33,1216.55 1059.91,1216.55 1060.5,1216.55 1061.09,1216.55 1061.67,1216.55 1062.26,1216.55 1062.85,1216.55 1063.43,1216.55 1064.02,1216.55 1064.6,1216.55 1065.19,1216.55 1065.78,1216.55 1066.36,1216.55 1066.95,1216.55 1067.54,1216.55 1068.12,1216.55 1068.71,1216.55 1069.3,1216.55 1069.88,1216.55 1070.47,1216.55 1071.06,1216.55 1071.64,1216.55 1072.23,1216.55 1072.81,1216.55 1073.4,1216.55 1073.99,1216.55 1074.57,1216.55 1075.16,1216.55 1075.75,1216.55 1076.33,1216.55 1076.92,1216.55 1077.51,1216.55 1078.09,1216.55 1078.68,1216.55 1079.26,1216.55 1079.85,1216.55 1080.44,1216.55 1081.02,1216.55 1081.61,1216.55 1082.2,1216.55 1082.78,1216.55 1083.37,1216.55 1083.96,1216.55 1084.54,1216.55 1085.13,1216.55 1085.72,1216.55 1086.3,1216.55 1086.89,1216.55 1087.47,1216.55 1088.06,1216.55 1088.65,1216.55 1089.23,1216.55 1089.82,1216.55 1090.41,1216.55 1090.99,1216.55 1091.58,1216.55 1092.17,1216.55 1092.75,1216.55 1093.34,1216.55 1093.93,1216.55 1094.51,1216.55 1095.1,1216.55 1095.68,1216.55 1096.27,1216.55 1096.86,1216.55 1097.44,1216.55 1098.03,1216.55 1098.62,1216.55 1099.2,1216.55 1099.79,1216.55 1100.38,1216.55 1100.96,1216.55 1101.55,1216.55 1102.14,1216.55 1102.72,1216.55 1103.31,1216.55 1103.89,1216.55 1104.48,1216.55 1105.07,1216.55 1105.65,1216.55 1106.24,1216.55 1106.83,1216.55 1107.41,1216.55 1108,1216.55 1108.59,1216.55 1109.17,1216.55 1109.76,1216.55 1110.34,1216.55 1110.93,1216.55 1111.52,1216.55 1112.1,1216.55 1112.69,1216.55 1113.28,1216.55 1113.86,1216.55 1114.45,1216.55 1115.04,1216.55 1115.62,1216.55 1116.21,1216.55 1116.8,1216.55 1117.38,1216.55 1117.97,1216.55 1118.55,1216.55 1119.14,1216.55 1119.73,1216.55 1120.31,1216.55 1120.9,1216.55 1121.49,1216.55 1122.07,1216.55 1122.66,1216.55 1123.25,1216.55 1123.83,1216.55 1124.42,1216.55 1125.01,1216.55 1125.59,1216.55 1126.18,1216.55 1126.76,1216.55 1127.35,1216.55 1127.94,1216.55 1128.52,1216.55 1129.11,1216.55 1129.7,1216.55 1130.28,1216.55 1130.87,1216.55 1131.46,1216.55 1132.04,1216.55 1132.63,1216.55 1133.21,1216.55 1133.8,1216.55 1134.39,1216.55 1134.97,1216.55 1135.56,1216.55 1136.15,1216.55 1136.73,1216.55 1137.32,1216.55 1137.91,1216.55 1138.49,1216.55 1139.08,1216.55 1139.67,1216.55 1140.25,1216.55 1140.84,1216.55 1141.42,1216.55 1142.01,1216.55 1142.6,1216.55 1143.18,1216.55 1143.77,1216.55 1144.36,1216.55 1144.94,1216.55 1145.53,1216.55 1146.12,1216.55 1146.7,1216.55 1147.29,1216.55 1147.88,1216.55 1148.46,1216.55 1149.05,1216.55 1149.63,1216.55 1150.22,1216.55 1150.81,1216.55 1151.39,1216.55 1151.98,1216.55 1152.57,1216.55 1153.15,1216.55 1153.74,1216.55 1154.33,1216.55 1154.91,1216.55 1155.5,1216.55 1156.09,1216.55 1156.67,1216.55 1157.26,1216.55 1157.84,1216.55 1158.43,1216.55 1159.02,1216.55 1159.6,1216.55 1160.19,1216.55 1160.78,1216.55 1161.36,1216.55 1161.95,1216.55 1162.54,1216.55 1163.12,1216.55 1163.71,1216.55 1164.29,1216.55 1164.88,1216.55 1165.47,1216.55 1166.05,1216.55 1166.64,1216.55 1167.23,1216.55 1167.81,1216.55 1168.4,1216.55 1168.99,1216.55 1169.57,1216.55 1170.16,1216.55 1170.75,1216.55 1171.33,1216.55 1171.92,1216.55 1172.5,1216.55 1173.09,1216.55 1173.68,1216.55 1174.26,1216.55 1174.85,1216.55 1175.44,1216.55 1176.02,1216.55 1176.61,1216.55 1177.2,1216.55 1177.78,1216.55 1178.37,1216.55 1178.96,1216.55 1179.54,1216.55 1180.13,1216.55 1180.71,1216.55 1181.3,1216.55 1181.89,1216.55 1182.47,1216.55 1183.06,1216.55 1183.65,1216.55 1184.23,1216.55 1184.82,1216.55 1185.41,1216.55 1185.99,1216.55 1186.58,1216.55 1187.16,1216.55 1187.75,1216.55 1188.34,1216.55 1188.92,1216.55 1189.51,1216.55 1190.1,1216.55 1190.68,1216.55 1191.27,1216.55 1191.86,1216.55 1192.44,1216.55 1193.03,1216.55 1193.62,1216.55 1194.2,1216.55 1194.79,1216.55 1195.37,1216.55 1195.96,1216.55 1196.55,1216.55 1197.13,1216.55 1197.72,1216.55 1198.31,1216.55 1198.89,1216.55 1199.48,1216.55 1200.07,1216.55 1200.65,1216.55 1201.24,1216.55 1201.83,1216.55 1202.41,1216.55 1203,1216.55 1203.58,1216.55 1204.17,1216.55 1204.76,1216.55 1205.34,1216.55 1205.93,1216.55 1206.52,1216.55 1207.1,1216.55 1207.69,1216.55 1208.28,1216.55 1208.86,1216.55 1209.45,1216.55 1210.03,1216.55 1210.62,1216.55 1211.21,1216.55 1211.79,1216.55 1212.38,1216.55 1212.97,1216.55 1213.55,1216.55 1214.14,1216.55 1214.73,1216.55 1215.31,1216.55 1215.9,1216.55 1216.49,1216.55 1217.07,1216.55 1217.66,1216.55 1218.24,1216.55 1218.83,1216.55 1219.42,1216.55 1220,1216.55 1220.59,1216.55 1221.18,1216.55 1221.76,1216.55 1222.35,1216.55 1222.94,1216.55 1223.52,1216.55 1224.11,1216.55 1224.7,1216.55 1225.28,1216.55 1225.87,1216.55 1226.45,1216.55 1227.04,1216.55 1227.63,1216.55 1228.21,1216.55 1228.8,1216.55 1229.39,1216.55 1229.97,1216.55 1230.56,1216.55 1231.15,1216.55 1231.73,1216.55 1232.32,1216.55 1232.91,1216.55 1233.49,1216.55 1234.08,1216.55 1234.66,1216.55 1235.25,1216.55 1235.84,1216.55 1236.42,1216.55 1237.01,1216.55 1237.6,1216.55 1238.18,1216.55 1238.77,1216.55 1239.36,1216.55 1239.94,1216.55 1240.53,1216.55 1241.11,1216.55 1241.7,1216.55 1242.29,1216.55 1242.87,1216.55 1243.46,1216.55 1244.05,1216.55 1244.63,1216.55 1245.22,1216.55 1245.81,1216.55 1246.39,1216.55 1246.98,1216.55 1247.57,1216.55 1248.15,1216.55 1248.74,1216.55 1249.32,1216.55 1249.91,1216.55 1250.5,1216.55 1251.08,1216.55 1251.67,1216.55 1252.26,1216.55 1252.84,1216.55 1253.43,1216.55 1254.02,1216.55 1254.6,1216.55 1255.19,1216.55 1255.78,1216.55 1256.36,1216.55 1256.95,1216.55 1257.53,1216.55 1258.12,1216.55 1258.71,1216.55 1259.29,1216.55 1259.88,1216.55 1260.47,1216.55 1261.05,1216.55 1261.64,1216.55 1262.23,1216.55 1262.81,1216.55 1263.4,1216.55 1263.98,1216.55 1264.57,1216.55 1265.16,1216.55 1265.74,1216.55 1266.33,1216.55 1266.92,1216.55 1267.5,1216.55 1268.09,1216.55 1268.68,1216.55 1269.26,1216.55 1269.85,1216.55 1270.44,1216.55 1271.02,1216.55 1271.61,1216.55 1272.19,1216.55 1272.78,1216.55 1273.37,1216.55 1273.95,1216.55 1274.54,1216.55 1275.13,1216.55 1275.71,1216.55 1276.3,1216.55 1276.89,1216.55 1277.47,1216.55 1278.06,1216.55 1278.65,1216.55 1279.23,1216.55 1279.82,1216.55 1280.4,1216.55 1280.99,1216.55 1281.58,1216.55 1282.16,1216.55 1282.75,1216.55 1283.34,1216.55 1283.92,1216.55 1284.51,1216.55 1285.1,1216.55 1285.68,1216.55 1286.27,1216.55 1286.86,1216.55 1287.44,1216.55 1288.03,1216.55 1288.61,1216.55 1289.2,1216.55 1289.79,1216.55 1290.37,1216.55 1290.96,1216.55 1291.55,1216.55 1292.13,1216.55 1292.72,1216.55 1293.31,1216.55 1293.89,1216.55 1294.48,1216.55 1295.06,1216.55 1295.65,1216.55 1296.24,1216.55 1296.82,1216.55 1297.41,1216.55 1298,1216.55 1298.58,1216.55 1299.17,1216.55 1299.76,1216.55 1300.34,1216.55 1300.93,1216.55 1301.52,1216.55 1302.1,1216.55 1302.69,1216.55 1303.27,1216.55 1303.86,1216.55 1304.45,1216.55 1305.03,1216.55 1305.62,1216.55 1306.21,1216.55 1306.79,1216.55 1307.38,1216.55 1307.97,1216.55 1308.55,1216.55 1309.14,1216.55 1309.73,1216.55 1310.31,1216.55 1310.9,1216.55 1311.48,1216.55 1312.07,1216.55 1312.66,1216.55 1313.24,1216.55 1313.83,1216.55 1314.42,1216.55 1315,1216.55 1315.59,1216.55 1316.18,1216.55 1316.76,1216.55 1317.35,1216.55 1317.93,1216.55 1318.52,1216.55 1319.11,1216.55 1319.69,1216.55 1320.28,1216.55 1320.87,1216.55 1321.45,1216.55 1322.04,1216.55 1322.63,1216.55 1323.21,1216.55 1323.8,1216.55 1324.39,1216.55 1324.97,1216.55 1325.56,1216.55 1326.14,1216.55 1326.73,1216.55 1327.32,1216.55 1327.9,1216.55 1328.49,1216.55 1329.08,1216.55 1329.66,1216.55 1330.25,1216.55 1330.84,1216.55 1331.42,1216.55 1332.01,1216.55 1332.6,1216.55 1333.18,1216.55 1333.77,1216.55 1334.35,1216.55 1334.94,1216.55 1335.53,1216.55 1336.11,1216.55 1336.7,1216.55 1337.29,1216.55 1337.87,1216.55 1338.46,1216.55 1339.05,1216.55 1339.63,1216.55 1340.22,1216.55 1340.8,1216.55 1341.39,1216.55 1341.98,1216.55 1342.56,1216.55 1343.15,1216.55 1343.74,1216.55 1344.32,1216.55 1344.91,1216.55 1345.5,1216.55 1346.08,1216.55 1346.67,1216.55 1347.26,1216.55 1347.84,1216.55 1348.43,1216.55 1349.01,1216.55 1349.6,1216.55 1350.19,1216.55 1350.77,1216.55 1351.36,1216.55 1351.95,1216.55 1352.53,1216.55 1353.12,1216.55 1353.71,1216.55 1354.29,1216.55 1354.88,1216.55 1355.47,1216.55 1356.05,1216.55 1356.64,1216.55 1357.22,1216.55 1357.81,1216.55 1358.4,1216.55 1358.98,1216.55 1359.57,1216.55 1360.16,1216.55 1360.74,1216.55 1361.33,1216.55 1361.92,1216.55 1362.5,1216.55 1363.09,1216.55 1363.68,1216.55 1364.26,1216.55 1364.85,1216.55 1365.43,1216.55 1366.02,1216.55 1366.61,1216.55 1367.19,1216.55 1367.78,1216.55 1368.37,1216.55 1368.95,1216.55 1369.54,1216.55 1370.13,1216.55 1370.71,1216.55 1371.3,1216.55 1371.88,1216.55 1372.47,1216.55 1373.06,1216.55 1373.64,1216.55 1374.23,1216.55 1374.82,1216.55 1375.4,1216.55 1375.99,1216.55 1376.58,1216.55 1377.16,1216.55 1377.75,1216.55 1378.34,1216.55 1378.92,1216.55 1379.51,1216.55 1380.09,1216.55 1380.68,1216.55 1381.27,1216.55 1381.85,1216.55 1382.44,1216.55 1383.03,1216.55 1383.61,1216.55 1384.2,1216.55 1384.79,1216.55 1385.37,1216.55 1385.96,1216.55 1386.55,1216.55 1387.13,1216.55 1387.72,1216.55 1388.3,1216.55 1388.89,1216.55 1389.48,1216.55 1390.06,1216.55 1390.65,1216.55 1391.24,1216.55 1391.82,1216.55 1392.41,1216.55 1393,1216.55 1393.58,1216.55 1394.17,1216.55 1394.75,1216.55 1395.34,1216.55 1395.93,1216.55 1396.51,1216.55 1397.1,1216.55 1397.69,1216.55 1398.27,1216.55 1398.86,1216.55 1399.45,1216.55 1400.03,1216.55 1400.62,1216.55 1401.21,1216.55 1401.79,1216.55 1402.38,1216.55 1402.96,1216.55 1403.55,1216.55 1404.14,1216.55 1404.72,1216.55 1405.31,1216.55 1405.9,1216.55 1406.48,1216.55 1407.07,1216.55 1407.66,1216.55 1408.24,1216.55 1408.83,1216.55 1409.42,1216.55 1410,1216.55 1410.59,1216.55 1411.17,1216.55 1411.76,1216.55 1412.35,1216.55 1412.93,1216.55 1413.52,1216.55 1414.11,1216.55 1414.69,1216.55 1415.28,1216.55 1415.87,1216.55 1416.45,1216.55 1417.04,1216.55 1417.63,1216.55 1418.21,1216.55 1418.8,1216.55 1419.38,1216.55 1419.97,1216.55 1420.56,1216.55 1421.14,1216.55 1421.73,1216.55 1422.32,1216.55 1422.9,1216.55 1423.49,1216.55 1424.08,1216.55 1424.66,1216.55 1425.25,1216.55 1425.83,1216.55 1426.42,1216.55 1427.01,1216.55 1427.59,1216.55 1428.18,1216.55 1428.77,1216.55 1429.35,1216.55 1429.94,1216.55 1430.53,1216.55 1431.11,1216.55 1431.7,1216.55 1432.29,1216.55 1432.87,1216.55 1433.46,1216.55 1434.04,1216.55 1434.63,1216.55 1435.22,1216.55 1435.8,1216.55 1436.39,1216.55 1436.98,1216.55 1437.56,1216.55 1438.15,1216.55 1438.74,1216.55 1439.32,1216.55 1439.91,1216.55 1440.5,1216.55 1441.08,1216.55 1441.67,1216.55 1442.25,1216.55 1442.84,1216.55 1443.43,1216.55 1444.01,1216.55 1444.6,1216.55 1445.19,1216.55 1445.77,1216.55 1446.36,1216.55 1446.95,1216.55 1447.53,1216.55 1448.12,1216.55 1448.7,1216.55 1449.29,1216.55 1449.88,1216.55 1450.46,1216.55 1451.05,1216.55 1451.64,1216.55 1452.22,1216.55 1452.81,1216.55 1453.4,1216.55 1453.98,1216.55 1454.57,1216.55 1455.16,1216.55 1455.74,1216.55 1456.33,1216.55 1456.91,1216.55 1457.5,1216.55 1458.09,1216.55 1458.67,1216.55 1459.26,1216.55 1459.85,1216.55 1460.43,1216.55 1461.02,1216.55 1461.61,1216.55 1462.19,1216.55 1462.78,1216.55 1463.37,1216.55 1463.95,1216.55 1464.54,1216.55 1465.12,1216.55 1465.71,1216.55 1466.3,1216.55 1466.88,1216.55 1467.47,1216.55 1468.06,1216.55 1468.64,1216.55 1469.23,1216.55 1469.82,1216.55 1470.4,1216.55 1470.99,1216.55 1471.57,1216.55 1472.16,1216.55 1472.75,1216.55 1473.33,1216.55 1473.92,1216.55 1474.51,1216.55 1475.09,1216.55 1475.68,1216.55 1476.27,1216.55 1476.85,1216.55 1477.44,1216.55 1478.03,1216.55 1478.61,1216.55 1479.2,1216.55 1479.78,1216.55 1480.37,1216.55 1480.96,1216.55 1481.54,1216.55 1482.13,1216.55 1482.72,1216.55 1483.3,1216.55 1483.89,1216.55 1484.48,1216.55 1485.06,1216.55 1485.65,1216.55 1486.24,1216.55 1486.82,1216.55 1487.41,1216.55 1487.99,1216.55 1488.58,1216.55 1489.17,1216.55 1489.75,1216.55 1490.34,1216.55 1490.93,1216.55 1491.51,1216.55 1492.1,1216.55 1492.69,1216.55 1493.27,1216.55 1493.86,1216.55 1494.45,1216.55 1495.03,1216.55 1495.62,1216.55 1496.2,1216.55 1496.79,1216.55 1497.38,1216.55 1497.96,1216.55 1498.55,1216.55 1499.14,1216.55 1499.72,1216.55 1500.31,1216.55 1500.9,1216.55 1501.48,1216.55 1502.07,1216.55 1502.65,1216.55 1503.24,1216.55 1503.83,1216.55 1504.41,1216.55 1505,1216.55 1505.59,1216.55 1506.17,1216.55 1506.76,1216.55 1507.35,1216.55 1507.93,1216.55 1508.52,1216.55 1509.11,1216.55 1509.69,1216.55 1510.28,1216.55 1510.86,1216.55 1511.45,1216.55 1512.04,1216.55 1512.62,1216.55 1513.21,1216.55 1513.8,1216.55 1514.38,1216.55 1514.97,1216.55 1515.56,1216.55 1516.14,1216.55 1516.73,1216.55 1517.32,1216.55 1517.9,1216.55 1518.49,1216.55 1519.07,1216.55 1519.66,1216.55 1520.25,1216.55 1520.83,1216.55 1521.42,1216.55 1522.01,1216.55 1522.59,1216.55 1523.18,1216.55 1523.77,1216.55 1524.35,1216.55 1524.94,1216.55 1525.52,1216.55 1526.11,1216.55 1526.7,1216.55 1527.28,1216.55 1527.87,1216.55 1528.46,1216.55 1529.04,1216.55 1529.63,1216.55 1530.22,1216.55 1530.8,1216.55 1531.39,1216.55 1531.98,1216.55 1532.56,1216.55 1533.15,1216.55 1533.73,1216.55 1534.32,1216.55 1534.91,1216.55 1535.49,1216.55 1536.08,1216.55 1536.67,1216.55 1537.25,1216.55 1537.84,1216.55 1538.43,1216.55 1539.01,1216.55 1539.6,1216.55 1540.19,1216.55 1540.77,1216.55 1541.36,1216.55 1541.94,1216.55 1542.53,1216.55 1543.12,1216.55 1543.7,1216.55 1544.29,1216.55 1544.88,1216.55 1545.46,1216.55 1546.05,1216.55 1546.64,1216.55 1547.22,1216.55 1547.81,1216.55 1548.4,1216.55 1548.98,1216.55 1549.57,1216.55 1550.15,1216.55 1550.74,1216.55 1551.33,1216.55 1551.91,1216.55 1552.5,1216.55 1553.09,1216.55 1553.67,1216.55 1554.26,1216.55 1554.85,1216.55 1555.43,1216.55 1556.02,1216.55 1556.6,1216.55 1557.19,1216.55 1557.78,1216.55 1558.36,1216.55 1558.95,1216.55 1559.54,1216.55 1560.12,1216.55 1560.71,1216.55 1561.3,1216.55 1561.88,1216.55 1562.47,1216.55 1563.06,1216.55 1563.64,1216.55 1564.23,1216.55 1564.81,1216.55 1565.4,1216.55 1565.99,1216.55 1566.57,1216.55 1567.16,1216.55 1567.75,1216.55 1568.33,1216.55 1568.92,1216.55 1569.51,1216.55 1570.09,1216.55 1570.68,1216.55 1571.27,1216.55 1571.85,1216.55 1572.44,1216.55 1573.02,1216.55 1573.61,1216.55 1574.2,1216.55 1574.78,1216.55 1575.37,1216.55 1575.96,1216.55 1576.54,1216.55 1577.13,1216.55 1577.72,1216.55 1578.3,1216.55 1578.89,1216.55 1579.47,1216.55 1580.06,1216.55 1580.65,1216.55 1581.23,1216.55 1581.82,1216.55 1582.41,1216.55 1582.99,1216.55 1583.58,1216.55 1584.17,1216.55 1584.75,1216.55 1585.34,1216.55 1585.93,1216.55 1586.51,1216.55 1587.1,1216.55 1587.68,1216.55 1588.27,1216.55 1588.86,1216.55 1589.44,1216.55 1590.03,1216.55 1590.62,1216.55 1591.2,1216.55 1591.79,1216.55 1592.38,1216.55 1592.96,1216.55 1593.55,1216.55 1594.14,1216.55 1594.72,1216.55 1595.31,1216.55 1595.89,1216.55 1596.48,1216.55 1597.07,1216.55 1597.65,1216.55 1598.24,1216.55 1598.83,1216.55 1599.41,1216.55 1600,1216.55 1600.59,1216.55 1601.17,1216.55 1601.76,1216.55 1602.34,1216.55 1602.93,1216.55 1603.52,1216.55 1604.1,1216.55 1604.69,1216.55 1605.28,1216.55 1605.86,1216.55 1606.45,1216.55 1607.04,1216.55 1607.62,1216.55 1608.21,1216.55 1608.8,1216.55 1609.38,1216.55 1609.97,1216.55 1610.55,1216.55 1611.14,1216.55 1611.73,1216.55 1612.31,1216.55 1612.9,1216.55 1613.49,1216.55 1614.07,1216.55 1614.66,1216.55 1615.25,1216.55 1615.83,1216.55 1616.42,1216.55 1617.01,1216.55 1617.59,1216.55 1618.18,1216.55 1618.76,1216.55 1619.35,1216.55 1619.94,1216.55 1620.52,1216.55 1621.11,1216.55 1621.7,1216.55 1622.28,1216.55 1622.87,1216.55 1623.46,1216.55 1624.04,1216.55 1624.63,1216.55 1625.22,1216.55 1625.8,1216.55 1626.39,1216.55 1626.97,1216.55 1627.56,1216.55 1628.15,1216.55 1628.73,1216.55 1629.32,1216.55 1629.91,1216.55 1630.49,1216.55 1631.08,1216.55 1631.67,1216.55 1632.25,1216.55 1632.84,1216.55 1633.42,1216.55 1634.01,1216.55 1634.6,1216.55 1635.18,1216.55 1635.77,1216.55 1636.36,1216.55 1636.94,1216.55 1637.53,1216.55 1638.12,1216.55 1638.7,1216.55 1639.29,1216.55 1639.88,1216.55 1640.46,1216.55 1641.05,1216.55 1641.63,1216.55 1642.22,1216.55 1642.81,1216.55 1643.39,1216.55 1643.98,1216.55 1644.57,1216.55 1645.15,1216.55 1645.74,1216.55 1646.33,1216.55 1646.91,1216.55 1647.5,1216.55 1648.09,1216.55 1648.67,1216.55 1649.26,1216.55 1649.84,1216.55 1650.43,1216.55 1651.02,1216.55 1651.6,1216.55 1652.19,1216.55 1652.78,1216.55 1653.36,1216.55 1653.95,1216.55 1654.54,1216.55 1655.12,1216.55 1655.71,1216.55 1656.29,1216.55 1656.88,1216.55 1657.47,1216.55 1658.05,1216.55 1658.64,1216.55 1659.23,1216.55 1659.81,1216.55 1660.4,1216.55 1660.99,1216.55 1661.57,1216.55 1662.16,1216.55 1662.75,1216.55 1663.33,1216.55 1663.92,1216.55 1664.5,1216.55 1665.09,1216.55 1665.68,1216.55 1666.26,1216.55 1666.85,1216.55 1667.44,1216.55 1668.02,1216.55 1668.61,1216.55 1669.2,1216.55 1669.78,1216.55 1670.37,1216.55 1670.96,1216.55 1671.54,1216.55 1672.13,1216.55 1672.71,1216.55 1673.3,1216.55 1673.89,1216.55 1674.47,1216.55 1675.06,1216.55 1675.65,1216.55 1676.23,1216.55 1676.82,1216.55 1677.41,1216.55 1677.99,1216.55 1678.58,1216.55 1679.17,1216.55 1679.75,1216.55 1680.34,1216.55 1680.92,1216.55 1681.51,1216.55 1682.1,1216.55 1682.68,1216.55 1683.27,1216.55 1683.86,1216.55 1684.44,1216.55 1685.03,1216.55 1685.62,1216.55 1686.2,1216.55 1686.79,1216.55 1687.37,1216.55 1687.96,1216.55 1688.55,1216.55 1689.13,1216.55 1689.72,1216.55 1690.31,1216.55 1690.89,1216.55 1691.48,1216.55 1692.07,1216.55 1692.65,1216.55 1693.24,1216.55 1693.83,1216.55 1694.41,1216.55 1695,1216.55 1695.58,1216.55 1696.17,1216.55 1696.76,1216.55 1697.34,1216.55 1697.93,1216.55 1698.52,1216.55 1699.1,1216.55 1699.69,1216.55 1700.28,1216.55 1700.86,1216.55 1701.45,1216.55 1702.04,1216.55 1702.62,1216.55 1703.21,1216.55 1703.79,1216.55 1704.38,1216.55 1704.97,1216.55 1705.55,1216.55 1706.14,1216.55 1706.73,1216.55 1707.31,1216.55 1707.9,1216.55 1708.49,1216.55 1709.07,1216.55 1709.66,1216.55 1710.24,1216.55 1710.83,1216.55 1711.42,1216.55 1712,1216.55 1712.59,1216.55 1713.18,1216.55 1713.76,1216.55 1714.35,1216.55 1714.94,1216.55 1715.52,1216.55 1716.11,1216.55 1716.7,1216.55 1717.28,1216.55 1717.87,1216.55 1718.45,1216.55 1719.04,1216.55 1719.63,1216.55 1720.21,1216.55 1720.8,1216.55 1721.39,1216.55 1721.97,1216.55 1722.56,1216.55 1723.15,1216.55 1723.73,1216.55 1724.32,1216.55 1724.91,1216.55 1725.49,1216.55 1726.08,1216.55 1726.66,1216.55 1727.25,1216.55 1727.84,1216.55 1728.42,1216.55 1729.01,1216.55 1729.6,1216.55 1730.18,1216.55 1730.77,1216.55 1731.36,1216.55 1731.94,1216.55 1732.53,1216.55 1733.11,1216.55 1733.7,1216.55 1734.29,1216.55 1734.87,1216.55 1735.46,1216.55 1736.05,1216.55 1736.63,1216.55 1737.22,1216.55 1737.81,1216.55 1738.39,1216.55 1738.98,1216.55 1739.57,1216.55 1740.15,1216.55 1740.74,1216.55 1741.32,1216.55 1741.91,1216.55 1742.5,1216.55 1743.08,1216.55 1743.67,1216.55 1744.26,1216.55 1744.84,1216.55 1745.43,1216.55 1746.02,1216.55 1746.6,1216.55 1747.19,1216.55 1747.78,1216.55 1748.36,1216.55 1748.95,1216.55 1749.53,1216.55 1750.12,1216.55 1750.71,1216.55 1751.29,1216.55 1751.88,1216.55 1752.47,1216.55 1753.05,1216.55 1753.64,1216.55 1754.23,1216.55 1754.81,1216.55 1755.4,1216.55 1755.99,1216.55 1756.57,1216.55 1757.16,1216.55 1757.74,1216.55 1758.33,1216.55 1758.92,1216.55 1759.5,1216.55 1760.09,1216.55 1760.68,1216.55 1761.26,1216.55 1761.85,1216.55 1762.44,1216.55 1763.02,1216.55 1763.61,1216.55 1764.19,1216.55 1764.78,1216.55 1765.37,1216.55 1765.95,1216.55 1766.54,1216.55 1767.13,1216.55 1767.71,1216.55 1768.3,1216.55 1768.89,1216.55 1769.47,1216.55 1770.06,1216.55 1770.65,1216.55 1771.23,1216.55 1771.82,1216.55 1772.4,1216.55 1772.99,1216.55 1773.58,1216.55 1774.16,1216.55 1774.75,1216.55 1775.34,1216.55 1775.92,1216.55 1776.51,1216.55 1777.1,1216.55 1777.68,1216.55 1778.27,1216.55 1778.86,1216.55 1779.44,1216.55 1780.03,1216.55 1780.61,1216.55 1781.2,1216.55 1781.79,1216.55 1782.37,1216.55 1782.96,1216.55 1783.55,1216.55 1784.13,1216.55 1784.72,1216.55 1785.31,1216.55 1785.89,1216.55 1786.48,1216.55 1787.06,1216.55 1787.65,1216.55 1788.24,1216.55 1788.82,1216.55 1789.41,1216.55 1790,1216.55 1790.58,1216.55 1791.17,1216.55 1791.76,1216.55 1792.34,1216.55 1792.93,1216.55 1793.52,1216.55 1794.1,1216.55 1794.69,1216.55 1795.27,1216.55 1795.86,1216.55 1796.45,1216.55 1797.03,1216.55 1797.62,1216.55 1798.21,1216.55 1798.79,1216.55 1799.38,1216.55 1799.97,1216.55 1800.55,1216.55 1801.14,1216.55 1801.73,1216.55 1802.31,1216.55 1802.9,1216.55 1803.48,1216.55 1804.07,1216.55 1804.66,1216.55 1805.24,1216.55 1805.83,1216.55 1806.42,1216.55 1807,1216.55 1807.59,1216.55 1808.18,1216.55 1808.76,1216.55 1809.35,1216.55 1809.94,1216.55 1810.52,1216.55 1811.11,1216.55 1811.69,1216.55 1812.28,1216.55 1812.87,1216.55 1813.45,1216.55 1814.04,1216.55 1814.63,1216.55 1815.21,1216.55 1815.8,1216.55 1816.39,1216.55 1816.97,1216.55 1817.56,1216.55 1818.14,1216.55 1818.73,1216.55 1819.32,1216.55 1819.9,1216.55 1820.49,1216.55 1821.08,1216.55 1821.66,1216.55 1822.25,1216.55 1822.84,1216.55 1823.42,1216.55 1824.01,1216.55 1824.6,1216.55 1825.18,1216.55 1825.77,1216.55 1826.35,1216.55 1826.94,1216.55 1827.53,1216.55 1828.11,1216.55 1828.7,1216.55 1829.29,1216.55 1829.87,1216.55 1830.46,1216.55 1831.05,1216.55 1831.63,1216.55 1832.22,1216.55 1832.81,1216.55 1833.39,1216.55 1833.98,1216.55 1834.56,1216.55 1835.15,1216.55 1835.74,1216.55 1836.32,1216.55 1836.91,1216.55 1837.5,1216.55 1838.08,1216.55 1838.67,1216.55 1839.26,1216.55 1839.84,1216.55 1840.43,1216.55 1841.01,1216.55 1841.6,1216.55 1842.19,1216.55 1842.77,1216.55 1843.36,1216.55 1843.95,1216.55 1844.53,1216.55 1845.12,1216.55 1845.71,1216.55 1846.29,1216.55 1846.88,1216.55 1847.47,1216.55 1848.05,1216.55 1848.64,1216.55 1849.22,1216.55 1849.81,1216.55 1850.4,1216.55 1850.98,1216.55 1851.57,1216.55 1852.16,1216.55 1852.74,1216.55 1853.33,1216.55 1853.92,1216.55 1854.5,1216.55 1855.09,1216.55 1855.68,1216.55 1856.26,1216.55 1856.85,1216.55 1857.43,1216.55 1858.02,1216.55 1858.61,1216.55 1859.19,1216.55 1859.78,1216.55 1860.37,1216.55 1860.95,1216.55 1861.54,1216.55 1862.13,1216.55 1862.71,1216.55 1863.3,1216.55 1863.88,1216.55 1864.47,1216.55 1865.06,1216.55 1865.64,1216.55 1866.23,1216.55 1866.82,1216.55 1867.4,1216.55 1867.99,1216.55 1868.58,1216.55 1869.16,1216.55 1869.75,1216.55 1870.34,1216.55 1870.92,1216.55 1871.51,1216.55 1872.09,1216.55 1872.68,1216.55 1873.27,1216.55 1873.85,1216.55 1874.44,1216.55 1875.03,1216.55 1875.61,1216.55 1876.2,1216.55 1876.79,1216.55 1877.37,1216.55 1877.96,1216.55 1878.55,1216.55 1879.13,1216.55 1879.72,1216.55 1880.3,1216.55 1880.89,1216.55 1881.48,1216.55 1882.06,1216.55 1882.65,1216.55 1883.24,1216.55 1883.82,1216.55 1884.41,1216.55 1885,1216.55 1885.58,1216.55 1886.17,1216.55 1886.76,1216.55 1887.34,1216.55 1887.93,1216.55 1888.51,1216.55 1889.1,1216.55 1889.69,1216.55 1890.27,1216.55 1890.86,1216.55 1891.45,1216.55 1892.03,1216.55 1892.62,1216.55 1893.21,1216.55 1893.79,1216.55 1894.38,1216.55 1894.96,1216.55 1895.55,1216.55 1896.14,1216.55 1896.72,1216.55 1897.31,1216.55 1897.9,1216.55 1898.48,1216.55 1899.07,1216.55 1899.66,1216.55 1900.24,1216.55 1900.83,1216.55 1901.42,1216.55 1902,1216.55 1902.59,1216.55 1903.17,1216.55 1903.76,1216.55 1904.35,1216.55 1904.93,1216.55 1905.52,1216.55 1906.11,1216.55 1906.69,1216.55 1907.28,1216.55 1907.87,1216.55 1908.45,1216.55 1909.04,1216.55 1909.63,1216.55 1910.21,1216.55 1910.8,1216.55 1911.38,1216.55 1911.97,1216.55 1912.56,1216.55 1913.14,1216.55 1913.73,1216.55 1914.32,1216.55 1914.9,1216.55 1915.49,1216.55 1916.08,1216.55 1916.66,1216.55 1917.25,1216.55 1917.83,1216.55 1918.42,1216.55 1919.01,1216.55 1919.59,1216.55 1920.18,1216.55 1920.77,1216.55 1921.35,1216.55 1921.94,1216.55 1922.53,1216.55 1923.11,1216.55 1923.7,1216.55 1924.29,1216.55 1924.87,1216.55 1925.46,1216.55 1926.04,1216.55 1926.63,1216.55 1927.22,1216.55 1927.8,1216.55 1928.39,1216.55 1928.98,1216.55 1929.56,1216.55 1930.15,1216.55 1930.74,1216.55 1931.32,1216.55 1931.91,1216.55 1932.5,1216.55 1933.08,1216.55 1933.67,1216.55 1934.25,1216.55 1934.84,1216.55 1935.43,1216.55 1936.01,1216.55 1936.6,1216.55 1937.19,1216.55 1937.77,1216.55 1938.36,1216.55 1938.95,1216.55 1939.53,1216.55 1940.12,1216.55 1940.71,1216.55 1941.29,1216.55 1941.88,1216.55 1942.46,1216.55 1943.05,1216.55 1943.64,1216.55 1944.22,1216.55 1944.81,1216.55 1945.4,1216.55 1945.98,1216.55 1946.57,1216.55 1947.16,1216.55 1947.74,1216.55 1948.33,1216.55 1948.91,1216.55 1949.5,1216.55 1950.09,1216.55 1950.67,1216.55 1951.26,1216.55 1951.85,1216.55 1952.43,1216.55 1953.02,1216.55 1953.61,1216.55 1954.19,1216.55 1954.78,1216.55 1955.37,1216.55 1955.95,1216.55 1956.54,1216.55 1957.12,1216.55 1957.71,1216.55 1958.3,1216.55 1958.88,1216.55 1959.47,1216.55 1960.06,1216.55 1960.64,1216.55 1961.23,1216.55 1961.82,1216.55 1962.4,1216.55 1962.99,1216.55 1963.58,1216.55 1964.16,1216.55 1964.75,1216.55 1965.33,1216.55 1965.92,1216.55 1966.51,1216.55 1967.09,1216.55 1967.68,1216.55 1968.27,1216.55 1968.85,1216.55 1969.44,1216.55 1970.03,1216.55 1970.61,1216.55 1971.2,1216.55 1971.78,1216.55 1972.37,1216.55 1972.96,1216.55 1973.54,1216.55 1974.13,1216.55 1974.72,1216.55 1975.3,1216.55 1975.89,1216.55 1976.48,1216.55 1977.06,1216.55 1977.65,1216.55 1978.24,1216.55 1978.82,1216.55 1979.41,1216.55 1979.99,1216.55 1980.58,1216.55 1981.17,1216.55 1981.75,1216.55 1982.34,1216.55 1982.93,1216.55 1983.51,1216.55 1984.1,1216.55 1984.69,1216.55 1985.27,1216.55 1985.86,1216.55 1986.45,1216.55 1987.03,1216.55 1987.62,1216.55 1988.2,1216.55 1988.79,1216.55 1989.38,1216.55 1989.96,1216.55 1990.55,1216.55 1991.14,1216.55 1991.72,1216.55 1992.31,1216.55 1992.9,1216.55 1993.48,1216.55 1994.07,1216.55 1994.65,1216.55 1995.24,1216.55 1995.83,1216.55 1996.41,1216.55 1997,1216.55 1997.59,1216.55 1998.17,1216.55 1998.76,1216.55 1999.35,1216.55 1999.93,1216.55 2000.52,1216.55 2001.11,1216.55 2001.69,1216.55 2002.28,1216.55 2002.86,1216.55 2003.45,1216.55 2004.04,1216.55 2004.62,1216.55 2005.21,1216.55 2005.8,1216.55 2006.38,1216.55 2006.97,1216.55 2007.56,1216.55 2008.14,1216.55 2008.73,1216.55 2009.32,1216.55 2009.9,1216.55 2010.49,1216.55 2011.07,1216.55 2011.66,1216.55 2012.25,1216.55 2012.83,1216.55 2013.42,1216.55 2014.01,1216.55 2014.59,1216.55 2015.18,1216.55 2015.77,1216.55 2016.35,1216.55 2016.94,1216.55 2017.53,1216.55 2018.11,1216.55 2018.7,1216.55 2019.28,1216.55 2019.87,1216.55 2020.46,1216.55 2021.04,1216.55 2021.63,1216.55 2022.22,1216.55 2022.8,1216.55 2023.39,1216.55 2023.98,1216.55 2024.56,1216.55 2025.15,1216.55 2025.73,1216.55 2026.32,1216.55 2026.91,1216.55 2027.49,1216.55 2028.08,1216.55 2028.67,1216.55 2029.25,1216.55 2029.84,1216.55 2030.43,1216.55 2031.01,1216.55 2031.6,1216.55 2032.19,1216.55 2032.77,1216.55 2033.36,1216.55 2033.94,1216.55 2034.53,1216.55 2035.12,1216.55 2035.7,1216.55 2036.29,1216.55 2036.88,1216.55 2037.46,1216.55 2038.05,1216.55 2038.64,1216.55 2039.22,1216.55 2039.81,1216.55 2040.4,1216.55 2040.98,1216.55 2041.57,1216.55 2042.15,1216.55 2042.74,1216.55 2043.33,1216.55 2043.91,1216.55 2044.5,1216.55 2045.09,1216.55 2045.67,1216.55 2046.26,1216.55 2046.85,1216.55 2047.43,1216.55 2048.02,1216.55 2048.6,1216.55 2049.19,1216.55 2049.78,1216.55 2050.36,1216.55 2050.95,1216.55 2051.54,1216.55 2052.12,1216.55 2052.71,1216.55 2053.3,1216.55 2053.88,1216.55 2054.47,1216.55 2055.06,1216.55 2055.64,1216.55 2056.23,1216.55 2056.81,1216.55 2057.4,1216.55 2057.99,1216.55 2058.57,1216.55 2059.16,1216.55 2059.75,1216.55 2060.33,1216.55 2060.92,1216.55 2061.51,1216.55 2062.09,1216.55 2062.68,1216.55 2063.27,1216.55 2063.85,1216.55 2064.44,1216.55 2065.02,1216.55 2065.61,1216.55 2066.2,1216.55 2066.78,1216.55 2067.37,1216.55 2067.96,1216.55 2068.54,1216.55 2069.13,1216.55 2069.72,1216.55 2070.3,1216.55 2070.89,1216.55 2071.48,1216.55 2072.06,1216.55 2072.65,1216.55 2073.23,1216.55 2073.82,1216.55 2074.41,1216.55 2074.99,1216.55 2075.58,1216.55 2076.17,1216.55 2076.75,1216.55 2077.34,1216.55 2077.93,1216.55 2078.51,1216.55 2079.1,1216.55 2079.68,1216.55 2080.27,1216.55 2080.86,1216.55 2081.44,1216.55 2082.03,1216.55 2082.62,1216.55 2083.2,1216.55 2083.79,1216.55 2084.38,1216.55 2084.96,1216.55 2085.55,1216.55 2086.14,1216.55 2086.72,1216.55 2087.31,1216.55 2087.89,1216.55 2088.48,1216.55 2089.07,1216.55 2089.65,1216.55 2090.24,1216.55 2090.83,1216.55 2091.41,1216.55 2092,1216.55 2092.59,1216.55 2093.17,1216.55 2093.76,1216.55 2094.35,1216.55 2094.93,1216.55 2095.52,1216.55 2096.1,1216.55 2096.69,1216.55 2097.28,1216.55 2097.86,1216.55 2098.45,1216.55 2099.04,1216.55 2099.62,1216.55 2100.21,1216.55 2100.8,1216.55 2101.38,1216.55 2101.97,1216.55 2102.55,1216.55 2103.14,1216.55 2103.73,1216.55 2104.31,1216.55 2104.9,1216.55 2105.49,1216.55 2106.07,1216.55 2106.66,1216.55 2107.25,1216.55 2107.83,1216.55 2108.42,1216.55 2109.01,1216.55 2109.59,1216.55 2110.18,1216.55 2110.76,1216.55 2111.35,1216.55 2111.94,1216.55 2112.52,1216.55 2113.11,1216.55 2113.7,1216.55 2114.28,1216.55 2114.87,1216.55 2115.46,1216.55 2116.04,1216.55 2116.63,1216.55 2117.22,1216.55 2117.8,1216.55 2118.39,1216.55 2118.97,1216.55 2119.56,1216.55 2120.15,1216.55 2120.73,1216.55 2121.32,1216.55 2121.91,1216.55 2122.49,1216.55 2123.08,1216.55 2123.67,1216.55 2124.25,1216.55 2124.84,1216.55 2125.42,1216.55 2126.01,1216.55 2126.6,1216.55 2127.18,1216.55 2127.77,1216.55 2128.36,1216.55 2128.94,1216.55 2129.53,1216.55 2130.12,1216.55 2130.7,1216.55 2131.29,1216.55 2131.88,1216.55 2132.46,1216.55 2133.05,1216.55 2133.63,1216.55 2134.22,1216.55 2134.81,1216.55 2135.39,1216.55 2135.98,1216.55 2136.57,1216.55 2137.15,1216.55 2137.74,1216.55 2138.33,1216.55 2138.91,1216.55 2139.5,1216.55 2140.09,1216.55 2140.67,1216.55 2141.26,1216.55 2141.84,1216.55 2142.43,1216.55 2143.02,1216.55 2143.6,1216.55 2144.19,1216.55 2144.78,1216.55 2145.36,1216.55 2145.95,1216.55 2146.54,1216.55 2147.12,1216.55 2147.71,1216.55 2148.3,1216.55 2148.88,1216.55 2149.47,1216.55 2150.05,1216.55 2150.64,1216.55 2151.23,1216.55 2151.81,1216.55 2152.4,1216.55 2152.99,1216.55 2153.57,1216.55 2154.16,1216.55 2154.75,1216.55 2155.33,1216.55 2155.92,1216.55 2156.5,1216.55 2157.09,1216.55 2157.68,1216.55 2158.26,1216.55 \"/>\n<polyline clip-path=\"url(#clip762)\" style=\"stroke:#d3d3d3; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"1562.97,1200.09 1398.4,899.083 \"/>\n<polyline clip-path=\"url(#clip762)\" style=\"stroke:#d3d3d3; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"985.439,1232.58 985.439,1200.09 2158.26,1200.09 2158.26,1232.58 985.439,1232.58 \"/>\n<path clip-path=\"url(#clip760)\" d=\"M1564.14 432.752 L2148.88 432.752 L2148.88 225.392 L1564.14 225.392  Z\" fill=\"#ffffff\" fill-rule=\"evenodd\" fill-opacity=\"1\"/>\n<polyline clip-path=\"url(#clip760)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"1564.14,432.752 2148.88,432.752 2148.88,225.392 1564.14,225.392 1564.14,432.752 \"/>\n<polyline clip-path=\"url(#clip760)\" style=\"stroke:#009af9; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"1584.85,277.232 1709.13,277.232 \"/>\n<path clip-path=\"url(#clip760)\" d=\"M1748.27 269.35 L1748.27 273.378 Q1746.46 272.452 1744.52 271.989 Q1742.57 271.526 1740.49 271.526 Q1737.32 271.526 1735.72 272.498 Q1734.15 273.471 1734.15 275.415 Q1734.15 276.896 1735.28 277.753 Q1736.41 278.586 1739.84 279.35 L1741.3 279.674 Q1745.84 280.646 1747.73 282.429 Q1749.66 284.188 1749.66 287.359 Q1749.66 290.97 1746.78 293.077 Q1743.94 295.183 1738.94 295.183 Q1736.85 295.183 1734.59 294.767 Q1732.34 294.373 1729.84 293.563 L1729.84 289.165 Q1732.2 290.392 1734.49 291.017 Q1736.78 291.619 1739.03 291.619 Q1742.04 291.619 1743.66 290.6 Q1745.28 289.558 1745.28 287.683 Q1745.28 285.947 1744.1 285.021 Q1742.94 284.095 1738.98 283.239 L1737.5 282.892 Q1733.54 282.058 1731.78 280.345 Q1730.03 278.609 1730.03 275.6 Q1730.03 271.943 1732.62 269.952 Q1735.21 267.961 1739.98 267.961 Q1742.34 267.961 1744.42 268.309 Q1746.51 268.656 1748.27 269.35 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip760)\" d=\"M1777.99 278.864 L1777.99 294.512 L1773.73 294.512 L1773.73 279.003 Q1773.73 275.322 1772.29 273.494 Q1770.86 271.665 1767.99 271.665 Q1764.54 271.665 1762.55 273.864 Q1760.56 276.063 1760.56 279.859 L1760.56 294.512 L1756.28 294.512 L1756.28 258.494 L1760.56 258.494 L1760.56 272.614 Q1762.09 270.276 1764.15 269.119 Q1766.23 267.961 1768.94 267.961 Q1773.4 267.961 1775.7 270.739 Q1777.99 273.494 1777.99 278.864 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip760)\" d=\"M1786.48 268.586 L1790.74 268.586 L1790.74 294.512 L1786.48 294.512 L1786.48 268.586 M1786.48 258.494 L1790.74 258.494 L1790.74 263.887 L1786.48 263.887 L1786.48 258.494 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip760)\" d=\"M1812.78 258.494 L1812.78 262.035 L1808.71 262.035 Q1806.41 262.035 1805.51 262.961 Q1804.63 263.887 1804.63 266.295 L1804.63 268.586 L1811.65 268.586 L1811.65 271.896 L1804.63 271.896 L1804.63 294.512 L1800.35 294.512 L1800.35 271.896 L1796.28 271.896 L1796.28 268.586 L1800.35 268.586 L1800.35 266.781 Q1800.35 262.452 1802.36 260.484 Q1804.38 258.494 1808.75 258.494 L1812.78 258.494 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip760)\" d=\"M1819.72 261.225 L1819.72 268.586 L1828.5 268.586 L1828.5 271.896 L1819.72 271.896 L1819.72 285.97 Q1819.72 289.142 1820.58 290.045 Q1821.46 290.947 1824.12 290.947 L1828.5 290.947 L1828.5 294.512 L1824.12 294.512 Q1819.19 294.512 1817.32 292.683 Q1815.44 290.832 1815.44 285.97 L1815.44 271.896 L1812.32 271.896 L1812.32 268.586 L1815.44 268.586 L1815.44 261.225 L1819.72 261.225 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><polyline clip-path=\"url(#clip760)\" style=\"stroke:#e26f46; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"1584.85,329.072 1709.13,329.072 \"/>\n<path clip-path=\"url(#clip760)\" d=\"M1748.27 321.19 L1748.27 325.218 Q1746.46 324.292 1744.52 323.829 Q1742.57 323.366 1740.49 323.366 Q1737.32 323.366 1735.72 324.338 Q1734.15 325.311 1734.15 327.255 Q1734.15 328.736 1735.28 329.593 Q1736.41 330.426 1739.84 331.19 L1741.3 331.514 Q1745.84 332.486 1747.73 334.269 Q1749.66 336.028 1749.66 339.199 Q1749.66 342.81 1746.78 344.917 Q1743.94 347.023 1738.94 347.023 Q1736.85 347.023 1734.59 346.607 Q1732.34 346.213 1729.84 345.403 L1729.84 341.005 Q1732.2 342.232 1734.49 342.857 Q1736.78 343.459 1739.03 343.459 Q1742.04 343.459 1743.66 342.44 Q1745.28 341.398 1745.28 339.523 Q1745.28 337.787 1744.1 336.861 Q1742.94 335.935 1738.98 335.079 L1737.5 334.732 Q1733.54 333.898 1731.78 332.185 Q1730.03 330.449 1730.03 327.44 Q1730.03 323.783 1732.62 321.792 Q1735.21 319.801 1739.98 319.801 Q1742.34 319.801 1744.42 320.149 Q1746.51 320.496 1748.27 321.19 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip760)\" d=\"M1777.99 330.704 L1777.99 346.352 L1773.73 346.352 L1773.73 330.843 Q1773.73 327.162 1772.29 325.334 Q1770.86 323.505 1767.99 323.505 Q1764.54 323.505 1762.55 325.704 Q1760.56 327.903 1760.56 331.699 L1760.56 346.352 L1756.28 346.352 L1756.28 310.334 L1760.56 310.334 L1760.56 324.454 Q1762.09 322.116 1764.15 320.959 Q1766.23 319.801 1768.94 319.801 Q1773.4 319.801 1775.7 322.579 Q1777.99 325.334 1777.99 330.704 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip760)\" d=\"M1786.48 320.426 L1790.74 320.426 L1790.74 346.352 L1786.48 346.352 L1786.48 320.426 M1786.48 310.334 L1790.74 310.334 L1790.74 315.727 L1786.48 315.727 L1786.48 310.334 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip760)\" d=\"M1812.78 310.334 L1812.78 313.875 L1808.71 313.875 Q1806.41 313.875 1805.51 314.801 Q1804.63 315.727 1804.63 318.135 L1804.63 320.426 L1811.65 320.426 L1811.65 323.736 L1804.63 323.736 L1804.63 346.352 L1800.35 346.352 L1800.35 323.736 L1796.28 323.736 L1796.28 320.426 L1800.35 320.426 L1800.35 318.621 Q1800.35 314.292 1802.36 312.324 Q1804.38 310.334 1808.75 310.334 L1812.78 310.334 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip760)\" d=\"M1819.72 313.065 L1819.72 320.426 L1828.5 320.426 L1828.5 323.736 L1819.72 323.736 L1819.72 337.81 Q1819.72 340.982 1820.58 341.885 Q1821.46 342.787 1824.12 342.787 L1828.5 342.787 L1828.5 346.352 L1824.12 346.352 Q1819.19 346.352 1817.32 344.523 Q1815.44 342.672 1815.44 337.81 L1815.44 323.736 L1812.32 323.736 L1812.32 320.426 L1815.44 320.426 L1815.44 313.065 L1819.72 313.065 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip760)\" d=\"M1869.35 325.403 Q1870.95 322.533 1873.17 321.167 Q1875.4 319.801 1878.4 319.801 Q1882.46 319.801 1884.65 322.649 Q1886.85 325.473 1886.85 330.704 L1886.85 346.352 L1882.57 346.352 L1882.57 330.843 Q1882.57 327.116 1881.25 325.311 Q1879.93 323.505 1877.22 323.505 Q1873.91 323.505 1871.99 325.704 Q1870.07 327.903 1870.07 331.699 L1870.07 346.352 L1865.79 346.352 L1865.79 330.843 Q1865.79 327.093 1864.47 325.311 Q1863.15 323.505 1860.4 323.505 Q1857.13 323.505 1855.21 325.727 Q1853.29 327.926 1853.29 331.699 L1853.29 346.352 L1849.01 346.352 L1849.01 320.426 L1853.29 320.426 L1853.29 324.454 Q1854.75 322.07 1856.78 320.936 Q1858.82 319.801 1861.62 319.801 Q1864.45 319.801 1866.41 321.236 Q1868.4 322.672 1869.35 325.403 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip760)\" d=\"M1917.52 332.324 L1917.52 334.408 L1897.94 334.408 Q1898.22 338.806 1900.58 341.121 Q1902.96 343.412 1907.2 343.412 Q1909.65 343.412 1911.95 342.81 Q1914.26 342.209 1916.53 341.005 L1916.53 345.033 Q1914.24 346.005 1911.83 346.514 Q1909.42 347.023 1906.95 347.023 Q1900.74 347.023 1897.11 343.412 Q1893.5 339.801 1893.5 333.644 Q1893.5 327.278 1896.92 323.551 Q1900.37 319.801 1906.21 319.801 Q1911.44 319.801 1914.47 323.181 Q1917.52 326.537 1917.52 332.324 M1913.27 331.074 Q1913.22 327.579 1911.3 325.496 Q1909.4 323.412 1906.25 323.412 Q1902.69 323.412 1900.53 325.426 Q1898.4 327.44 1898.08 331.098 L1913.27 331.074 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip760)\" d=\"M1936.3 333.32 Q1931.14 333.32 1929.14 334.5 Q1927.15 335.681 1927.15 338.528 Q1927.15 340.797 1928.64 342.139 Q1930.14 343.459 1932.71 343.459 Q1936.25 343.459 1938.38 340.959 Q1940.53 338.435 1940.53 334.269 L1940.53 333.32 L1936.3 333.32 M1944.79 331.56 L1944.79 346.352 L1940.53 346.352 L1940.53 342.417 Q1939.08 344.778 1936.9 345.912 Q1934.72 347.023 1931.58 347.023 Q1927.59 347.023 1925.23 344.801 Q1922.89 342.556 1922.89 338.806 Q1922.89 334.431 1925.81 332.209 Q1928.75 329.986 1934.56 329.986 L1940.53 329.986 L1940.53 329.57 Q1940.53 326.63 1938.59 325.033 Q1936.67 323.412 1933.17 323.412 Q1930.95 323.412 1928.84 323.945 Q1926.74 324.477 1924.79 325.542 L1924.79 321.607 Q1927.13 320.704 1929.33 320.264 Q1931.53 319.801 1933.61 319.801 Q1939.24 319.801 1942.02 322.718 Q1944.79 325.635 1944.79 331.56 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip760)\" d=\"M1975.12 330.704 L1975.12 346.352 L1970.86 346.352 L1970.86 330.843 Q1970.86 327.162 1969.42 325.334 Q1967.99 323.505 1965.12 323.505 Q1961.67 323.505 1959.68 325.704 Q1957.69 327.903 1957.69 331.699 L1957.69 346.352 L1953.4 346.352 L1953.4 320.426 L1957.69 320.426 L1957.69 324.454 Q1959.21 322.116 1961.27 320.959 Q1963.36 319.801 1966.07 319.801 Q1970.53 319.801 1972.83 322.579 Q1975.12 325.334 1975.12 330.704 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><polyline clip-path=\"url(#clip760)\" style=\"stroke:#3da44d; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"1584.85,380.912 1709.13,380.912 \"/>\n<path clip-path=\"url(#clip760)\" d=\"M1734.12 394.303 L1734.12 408.053 L1729.84 408.053 L1729.84 372.266 L1734.12 372.266 L1734.12 376.201 Q1735.47 373.887 1737.5 372.776 Q1739.56 371.641 1742.41 371.641 Q1747.13 371.641 1750.07 375.391 Q1753.03 379.141 1753.03 385.252 Q1753.03 391.363 1750.07 395.113 Q1747.13 398.863 1742.41 398.863 Q1739.56 398.863 1737.5 397.752 Q1735.47 396.618 1734.12 394.303 M1748.61 385.252 Q1748.61 380.553 1746.67 377.891 Q1744.75 375.206 1741.37 375.206 Q1737.99 375.206 1736.04 377.891 Q1734.12 380.553 1734.12 385.252 Q1734.12 389.951 1736.04 392.637 Q1737.99 395.299 1741.37 395.299 Q1744.75 395.299 1746.67 392.637 Q1748.61 389.951 1748.61 385.252 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip760)\" d=\"M1775.12 376.248 Q1774.4 375.831 1773.54 375.646 Q1772.71 375.438 1771.69 375.438 Q1768.08 375.438 1766.14 377.799 Q1764.22 380.137 1764.22 384.535 L1764.22 398.192 L1759.93 398.192 L1759.93 372.266 L1764.22 372.266 L1764.22 376.294 Q1765.56 373.933 1767.71 372.799 Q1769.86 371.641 1772.94 371.641 Q1773.38 371.641 1773.91 371.711 Q1774.45 371.757 1775.09 371.873 L1775.12 376.248 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip760)\" d=\"M1788.59 375.252 Q1785.16 375.252 1783.17 377.938 Q1781.18 380.6 1781.18 385.252 Q1781.18 389.905 1783.15 392.59 Q1785.14 395.252 1788.59 395.252 Q1791.99 395.252 1793.98 392.567 Q1795.97 389.882 1795.97 385.252 Q1795.97 380.646 1793.98 377.961 Q1791.99 375.252 1788.59 375.252 M1788.59 371.641 Q1794.15 371.641 1797.32 375.252 Q1800.49 378.863 1800.49 385.252 Q1800.49 391.618 1797.32 395.252 Q1794.15 398.863 1788.59 398.863 Q1783.01 398.863 1779.84 395.252 Q1776.69 391.618 1776.69 385.252 Q1776.69 378.863 1779.84 375.252 Q1783.01 371.641 1788.59 371.641 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip760)\" d=\"M1807.55 372.266 L1811.81 372.266 L1811.81 398.655 Q1811.81 403.609 1809.91 405.831 Q1808.03 408.053 1803.84 408.053 L1802.22 408.053 L1802.22 404.442 L1803.36 404.442 Q1805.79 404.442 1806.67 403.308 Q1807.55 402.197 1807.55 398.655 L1807.55 372.266 M1807.55 362.174 L1811.81 362.174 L1811.81 367.567 L1807.55 367.567 L1807.55 362.174 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip760)\" d=\"M1842.9 384.164 L1842.9 386.248 L1823.31 386.248 Q1823.59 390.646 1825.95 392.961 Q1828.34 395.252 1832.57 395.252 Q1835.03 395.252 1837.32 394.65 Q1839.63 394.049 1841.9 392.845 L1841.9 396.873 Q1839.61 397.845 1837.2 398.354 Q1834.79 398.863 1832.32 398.863 Q1826.11 398.863 1822.48 395.252 Q1818.87 391.641 1818.87 385.484 Q1818.87 379.118 1822.29 375.391 Q1825.74 371.641 1831.58 371.641 Q1836.81 371.641 1839.84 375.021 Q1842.9 378.377 1842.9 384.164 M1838.64 382.914 Q1838.59 379.419 1836.67 377.336 Q1834.77 375.252 1831.62 375.252 Q1828.06 375.252 1825.9 377.266 Q1823.78 379.28 1823.45 382.938 L1838.64 382.914 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip760)\" d=\"M1868.54 373.262 L1868.54 377.243 Q1866.74 376.248 1864.91 375.762 Q1863.1 375.252 1861.25 375.252 Q1857.11 375.252 1854.82 377.891 Q1852.52 380.507 1852.52 385.252 Q1852.52 389.998 1854.82 392.637 Q1857.11 395.252 1861.25 395.252 Q1863.1 395.252 1864.91 394.766 Q1866.74 394.257 1868.54 393.262 L1868.54 397.197 Q1866.76 398.03 1864.84 398.447 Q1862.94 398.863 1860.79 398.863 Q1854.93 398.863 1851.48 395.183 Q1848.03 391.502 1848.03 385.252 Q1848.03 378.91 1851.51 375.276 Q1855 371.641 1861.07 371.641 Q1863.03 371.641 1864.91 372.058 Q1866.78 372.451 1868.54 373.262 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip760)\" d=\"M1880.16 364.905 L1880.16 372.266 L1888.94 372.266 L1888.94 375.576 L1880.16 375.576 L1880.16 389.65 Q1880.16 392.822 1881.02 393.725 Q1881.9 394.627 1884.56 394.627 L1888.94 394.627 L1888.94 398.192 L1884.56 398.192 Q1879.63 398.192 1877.76 396.363 Q1875.88 394.512 1875.88 389.65 L1875.88 375.576 L1872.76 375.576 L1872.76 372.266 L1875.88 372.266 L1875.88 364.905 L1880.16 364.905 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip760)\" d=\"M1916.71 384.164 L1916.71 386.248 L1897.13 386.248 Q1897.41 390.646 1899.77 392.961 Q1902.15 395.252 1906.39 395.252 Q1908.84 395.252 1911.14 394.65 Q1913.45 394.049 1915.72 392.845 L1915.72 396.873 Q1913.43 397.845 1911.02 398.354 Q1908.61 398.863 1906.14 398.863 Q1899.93 398.863 1896.3 395.252 Q1892.69 391.641 1892.69 385.484 Q1892.69 379.118 1896.11 375.391 Q1899.56 371.641 1905.4 371.641 Q1910.63 371.641 1913.66 375.021 Q1916.71 378.377 1916.71 384.164 M1912.46 382.914 Q1912.41 379.419 1910.49 377.336 Q1908.59 375.252 1905.44 375.252 Q1901.88 375.252 1899.72 377.266 Q1897.59 379.28 1897.27 382.938 L1912.46 382.914 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip760)\" d=\"M1940.77 376.201 L1940.77 362.174 L1945.02 362.174 L1945.02 398.192 L1940.77 398.192 L1940.77 394.303 Q1939.42 396.618 1937.36 397.752 Q1935.33 398.863 1932.46 398.863 Q1927.76 398.863 1924.79 395.113 Q1921.85 391.363 1921.85 385.252 Q1921.85 379.141 1924.79 375.391 Q1927.76 371.641 1932.46 371.641 Q1935.33 371.641 1937.36 372.776 Q1939.42 373.887 1940.77 376.201 M1926.25 385.252 Q1926.25 389.951 1928.17 392.637 Q1930.12 395.299 1933.5 395.299 Q1936.88 395.299 1938.82 392.637 Q1940.77 389.951 1940.77 385.252 Q1940.77 380.553 1938.82 377.891 Q1936.88 375.206 1933.5 375.206 Q1930.12 375.206 1928.17 377.891 Q1926.25 380.553 1926.25 385.252 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip760)\" d=\"M1991.04 384.164 L1991.04 386.248 L1971.46 386.248 Q1971.74 390.646 1974.1 392.961 Q1976.48 395.252 1980.72 395.252 Q1983.17 395.252 1985.46 394.65 Q1987.78 394.049 1990.05 392.845 L1990.05 396.873 Q1987.76 397.845 1985.35 398.354 Q1982.94 398.863 1980.46 398.863 Q1974.26 398.863 1970.63 395.252 Q1967.02 391.641 1967.02 385.484 Q1967.02 379.118 1970.44 375.391 Q1973.89 371.641 1979.72 371.641 Q1984.95 371.641 1987.99 375.021 Q1991.04 378.377 1991.04 384.164 M1986.78 382.914 Q1986.74 379.419 1984.82 377.336 Q1982.92 375.252 1979.77 375.252 Q1976.2 375.252 1974.05 377.266 Q1971.92 379.28 1971.6 382.938 L1986.78 382.914 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip760)\" d=\"M2019.58 382.544 L2019.58 398.192 L2015.32 398.192 L2015.32 382.683 Q2015.32 379.002 2013.89 377.174 Q2012.45 375.345 2009.58 375.345 Q2006.14 375.345 2004.14 377.544 Q2002.15 379.743 2002.15 383.539 L2002.15 398.192 L1997.87 398.192 L1997.87 372.266 L2002.15 372.266 L2002.15 376.294 Q2003.68 373.956 2005.74 372.799 Q2007.83 371.641 2010.53 371.641 Q2015 371.641 2017.29 374.419 Q2019.58 377.174 2019.58 382.544 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip760)\" d=\"M2050.26 384.164 L2050.26 386.248 L2030.67 386.248 Q2030.95 390.646 2033.31 392.961 Q2035.7 395.252 2039.93 395.252 Q2042.39 395.252 2044.68 394.65 Q2046.99 394.049 2049.26 392.845 L2049.26 396.873 Q2046.97 397.845 2044.56 398.354 Q2042.15 398.863 2039.68 398.863 Q2033.47 398.863 2029.84 395.252 Q2026.23 391.641 2026.23 385.484 Q2026.23 379.118 2029.65 375.391 Q2033.1 371.641 2038.94 371.641 Q2044.17 371.641 2047.2 375.021 Q2050.26 378.377 2050.26 384.164 M2046 382.914 Q2045.95 379.419 2044.03 377.336 Q2042.13 375.252 2038.98 375.252 Q2035.42 375.252 2033.26 377.266 Q2031.14 379.28 2030.81 382.938 L2046 382.914 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip760)\" d=\"M2072.27 376.248 Q2071.55 375.831 2070.7 375.646 Q2069.86 375.438 2068.84 375.438 Q2065.23 375.438 2063.29 377.799 Q2061.37 380.137 2061.37 384.535 L2061.37 398.192 L2057.08 398.192 L2057.08 372.266 L2061.37 372.266 L2061.37 376.294 Q2062.71 373.933 2064.86 372.799 Q2067.01 371.641 2070.09 371.641 Q2070.53 371.641 2071.07 371.711 Q2071.6 371.757 2072.25 371.873 L2072.27 376.248 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip760)\" d=\"M2092.96 384.928 Q2092.96 380.299 2091.04 377.752 Q2089.14 375.206 2085.69 375.206 Q2082.27 375.206 2080.35 377.752 Q2078.45 380.299 2078.45 384.928 Q2078.45 389.535 2080.35 392.081 Q2082.27 394.627 2085.69 394.627 Q2089.14 394.627 2091.04 392.081 Q2092.96 389.535 2092.96 384.928 M2097.22 394.975 Q2097.22 401.595 2094.28 404.812 Q2091.34 408.053 2085.28 408.053 Q2083.03 408.053 2081.04 407.706 Q2079.05 407.382 2077.18 406.687 L2077.18 402.544 Q2079.05 403.562 2080.88 404.049 Q2082.71 404.535 2084.61 404.535 Q2088.8 404.535 2090.88 402.336 Q2092.96 400.16 2092.96 395.738 L2092.96 393.632 Q2091.64 395.924 2089.58 397.058 Q2087.52 398.192 2084.65 398.192 Q2079.88 398.192 2076.97 394.558 Q2074.05 390.924 2074.05 384.928 Q2074.05 378.91 2076.97 375.276 Q2079.88 371.641 2084.65 371.641 Q2087.52 371.641 2089.58 372.776 Q2091.64 373.91 2092.96 376.201 L2092.96 372.266 L2097.22 372.266 L2097.22 394.975 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip760)\" d=\"M2116.78 400.599 Q2114.98 405.229 2113.26 406.641 Q2111.55 408.053 2108.68 408.053 L2105.28 408.053 L2105.28 404.488 L2107.78 404.488 Q2109.54 404.488 2110.51 403.655 Q2111.48 402.822 2112.66 399.72 L2113.43 397.775 L2102.94 372.266 L2107.45 372.266 L2115.56 392.544 L2123.66 372.266 L2128.17 372.266 L2116.78 400.599 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip760)\" d=\"M719.687 899.083 L1838.19 899.083 L1838.19 462.094 L719.687 462.094  Z\" fill=\"#ffffff\" fill-rule=\"evenodd\" fill-opacity=\"1\"/>\n<defs>\n  <clipPath id=\"clip763\">\n    <rect x=\"719\" y=\"462\" width=\"1120\" height=\"438\"/>\n  </clipPath>\n</defs>\n<polyline clip-path=\"url(#clip763)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:2; stroke-opacity:0.1; fill:none\" points=\"719.687,899.083 719.687,462.094 \"/>\n<polyline clip-path=\"url(#clip763)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:2; stroke-opacity:0.1; fill:none\" points=\"999.313,899.083 999.313,462.094 \"/>\n<polyline clip-path=\"url(#clip763)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:2; stroke-opacity:0.1; fill:none\" points=\"1278.94,899.083 1278.94,462.094 \"/>\n<polyline clip-path=\"url(#clip763)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:2; stroke-opacity:0.1; fill:none\" points=\"1558.56,899.083 1558.56,462.094 \"/>\n<polyline clip-path=\"url(#clip763)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:2; stroke-opacity:0.1; fill:none\" points=\"1838.19,899.083 1838.19,462.094 \"/>\n<polyline clip-path=\"url(#clip763)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:2; stroke-opacity:0.1; fill:none\" points=\"719.687,879.22 1838.19,879.22 \"/>\n<polyline clip-path=\"url(#clip763)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:2; stroke-opacity:0.1; fill:none\" points=\"719.687,779.904 1838.19,779.904 \"/>\n<polyline clip-path=\"url(#clip763)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:2; stroke-opacity:0.1; fill:none\" points=\"719.687,680.588 1838.19,680.588 \"/>\n<polyline clip-path=\"url(#clip763)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:2; stroke-opacity:0.1; fill:none\" points=\"719.687,581.273 1838.19,581.273 \"/>\n<polyline clip-path=\"url(#clip763)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:2; stroke-opacity:0.1; fill:none\" points=\"719.687,481.957 1838.19,481.957 \"/>\n<polyline clip-path=\"url(#clip760)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"719.687,899.083 1838.19,899.083 \"/>\n<polyline clip-path=\"url(#clip760)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"719.687,899.083 719.687,880.185 \"/>\n<polyline clip-path=\"url(#clip760)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"999.313,899.083 999.313,880.185 \"/>\n<polyline clip-path=\"url(#clip760)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"1278.94,899.083 1278.94,880.185 \"/>\n<polyline clip-path=\"url(#clip760)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"1558.56,899.083 1558.56,880.185 \"/>\n<polyline clip-path=\"url(#clip760)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"1838.19,899.083 1838.19,880.185 \"/>\n<path clip-path=\"url(#clip760)\" d=\"M664.213 957.547 L671.852 957.547 L671.852 931.182 L663.542 932.849 L663.542 928.589 L671.806 926.923 L676.482 926.923 L676.482 957.547 L684.12 957.547 L684.12 961.483 L664.213 961.483 L664.213 957.547 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip760)\" d=\"M703.565 930.001 Q699.954 930.001 698.125 933.566 Q696.319 937.108 696.319 944.237 Q696.319 951.344 698.125 954.909 Q699.954 958.45 703.565 958.45 Q707.199 958.45 709.005 954.909 Q710.833 951.344 710.833 944.237 Q710.833 937.108 709.005 933.566 Q707.199 930.001 703.565 930.001 M703.565 926.298 Q709.375 926.298 712.43 930.904 Q715.509 935.487 715.509 944.237 Q715.509 952.964 712.43 957.571 Q709.375 962.154 703.565 962.154 Q697.755 962.154 694.676 957.571 Q691.62 952.964 691.62 944.237 Q691.62 935.487 694.676 930.904 Q697.755 926.298 703.565 926.298 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip760)\" d=\"M733.727 930.001 Q730.116 930.001 728.287 933.566 Q726.481 937.108 726.481 944.237 Q726.481 951.344 728.287 954.909 Q730.116 958.45 733.727 958.45 Q737.361 958.45 739.166 954.909 Q740.995 951.344 740.995 944.237 Q740.995 937.108 739.166 933.566 Q737.361 930.001 733.727 930.001 M733.727 926.298 Q739.537 926.298 742.592 930.904 Q745.671 935.487 745.671 944.237 Q745.671 952.964 742.592 957.571 Q739.537 962.154 733.727 962.154 Q727.916 962.154 724.838 957.571 Q721.782 952.964 721.782 944.237 Q721.782 935.487 724.838 930.904 Q727.916 926.298 733.727 926.298 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip760)\" d=\"M763.888 930.001 Q760.277 930.001 758.449 933.566 Q756.643 937.108 756.643 944.237 Q756.643 951.344 758.449 954.909 Q760.277 958.45 763.888 958.45 Q767.523 958.45 769.328 954.909 Q771.157 951.344 771.157 944.237 Q771.157 937.108 769.328 933.566 Q767.523 930.001 763.888 930.001 M763.888 926.298 Q769.699 926.298 772.754 930.904 Q775.833 935.487 775.833 944.237 Q775.833 952.964 772.754 957.571 Q769.699 962.154 763.888 962.154 Q758.078 962.154 755 957.571 Q751.944 952.964 751.944 944.237 Q751.944 935.487 755 930.904 Q758.078 926.298 763.888 926.298 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip760)\" d=\"M943.839 957.547 L951.477 957.547 L951.477 931.182 L943.167 932.849 L943.167 928.589 L951.431 926.923 L956.107 926.923 L956.107 957.547 L963.746 957.547 L963.746 961.483 L943.839 961.483 L943.839 957.547 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip760)\" d=\"M973.237 926.923 L991.593 926.923 L991.593 930.858 L977.519 930.858 L977.519 939.33 Q978.538 938.983 979.556 938.821 Q980.575 938.636 981.593 938.636 Q987.38 938.636 990.76 941.807 Q994.139 944.978 994.139 950.395 Q994.139 955.973 990.667 959.075 Q987.195 962.154 980.875 962.154 Q978.7 962.154 976.431 961.784 Q974.186 961.413 971.778 960.672 L971.778 955.973 Q973.862 957.108 976.084 957.663 Q978.306 958.219 980.783 958.219 Q984.788 958.219 987.125 956.112 Q989.463 954.006 989.463 950.395 Q989.463 946.784 987.125 944.677 Q984.788 942.571 980.783 942.571 Q978.908 942.571 977.033 942.987 Q975.181 943.404 973.237 944.284 L973.237 926.923 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip760)\" d=\"M1013.35 930.001 Q1009.74 930.001 1007.91 933.566 Q1006.11 937.108 1006.11 944.237 Q1006.11 951.344 1007.91 954.909 Q1009.74 958.45 1013.35 958.45 Q1016.99 958.45 1018.79 954.909 Q1020.62 951.344 1020.62 944.237 Q1020.62 937.108 1018.79 933.566 Q1016.99 930.001 1013.35 930.001 M1013.35 926.298 Q1019.16 926.298 1022.22 930.904 Q1025.3 935.487 1025.3 944.237 Q1025.3 952.964 1022.22 957.571 Q1019.16 962.154 1013.35 962.154 Q1007.54 962.154 1004.46 957.571 Q1001.41 952.964 1001.41 944.237 Q1001.41 935.487 1004.46 930.904 Q1007.54 926.298 1013.35 926.298 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip760)\" d=\"M1043.51 930.001 Q1039.9 930.001 1038.07 933.566 Q1036.27 937.108 1036.27 944.237 Q1036.27 951.344 1038.07 954.909 Q1039.9 958.45 1043.51 958.45 Q1047.15 958.45 1048.95 954.909 Q1050.78 951.344 1050.78 944.237 Q1050.78 937.108 1048.95 933.566 Q1047.15 930.001 1043.51 930.001 M1043.51 926.298 Q1049.32 926.298 1052.38 930.904 Q1055.46 935.487 1055.46 944.237 Q1055.46 952.964 1052.38 957.571 Q1049.32 962.154 1043.51 962.154 Q1037.7 962.154 1034.63 957.571 Q1031.57 952.964 1031.57 944.237 Q1031.57 935.487 1034.63 930.904 Q1037.7 926.298 1043.51 926.298 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip760)\" d=\"M1227.55 957.547 L1243.87 957.547 L1243.87 961.483 L1221.92 961.483 L1221.92 957.547 Q1224.59 954.793 1229.17 950.163 Q1233.78 945.511 1234.96 944.168 Q1237.2 941.645 1238.08 939.909 Q1238.98 938.149 1238.98 936.46 Q1238.98 933.705 1237.04 931.969 Q1235.12 930.233 1232.02 930.233 Q1229.82 930.233 1227.36 930.997 Q1224.93 931.761 1222.16 933.312 L1222.16 928.589 Q1224.98 927.455 1227.43 926.876 Q1229.89 926.298 1231.92 926.298 Q1237.3 926.298 1240.49 928.983 Q1243.68 931.668 1243.68 936.159 Q1243.68 938.288 1242.87 940.21 Q1242.09 942.108 1239.98 944.7 Q1239.4 945.372 1236.3 948.589 Q1233.2 951.784 1227.55 957.547 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip760)\" d=\"M1263.68 930.001 Q1260.07 930.001 1258.24 933.566 Q1256.44 937.108 1256.44 944.237 Q1256.44 951.344 1258.24 954.909 Q1260.07 958.45 1263.68 958.45 Q1267.32 958.45 1269.12 954.909 Q1270.95 951.344 1270.95 944.237 Q1270.95 937.108 1269.12 933.566 Q1267.32 930.001 1263.68 930.001 M1263.68 926.298 Q1269.49 926.298 1272.55 930.904 Q1275.63 935.487 1275.63 944.237 Q1275.63 952.964 1272.55 957.571 Q1269.49 962.154 1263.68 962.154 Q1257.87 962.154 1254.8 957.571 Q1251.74 952.964 1251.74 944.237 Q1251.74 935.487 1254.8 930.904 Q1257.87 926.298 1263.68 926.298 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip760)\" d=\"M1293.85 930.001 Q1290.23 930.001 1288.41 933.566 Q1286.6 937.108 1286.6 944.237 Q1286.6 951.344 1288.41 954.909 Q1290.23 958.45 1293.85 958.45 Q1297.48 958.45 1299.29 954.909 Q1301.11 951.344 1301.11 944.237 Q1301.11 937.108 1299.29 933.566 Q1297.48 930.001 1293.85 930.001 M1293.85 926.298 Q1299.66 926.298 1302.71 930.904 Q1305.79 935.487 1305.79 944.237 Q1305.79 952.964 1302.71 957.571 Q1299.66 962.154 1293.85 962.154 Q1288.04 962.154 1284.96 957.571 Q1281.9 952.964 1281.9 944.237 Q1281.9 935.487 1284.96 930.904 Q1288.04 926.298 1293.85 926.298 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip760)\" d=\"M1324.01 930.001 Q1320.4 930.001 1318.57 933.566 Q1316.76 937.108 1316.76 944.237 Q1316.76 951.344 1318.57 954.909 Q1320.4 958.45 1324.01 958.45 Q1327.64 958.45 1329.45 954.909 Q1331.28 951.344 1331.28 944.237 Q1331.28 937.108 1329.45 933.566 Q1327.64 930.001 1324.01 930.001 M1324.01 926.298 Q1329.82 926.298 1332.87 930.904 Q1335.95 935.487 1335.95 944.237 Q1335.95 952.964 1332.87 957.571 Q1329.82 962.154 1324.01 962.154 Q1318.2 962.154 1315.12 957.571 Q1312.06 952.964 1312.06 944.237 Q1312.06 935.487 1315.12 930.904 Q1318.2 926.298 1324.01 926.298 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip760)\" d=\"M1507.18 957.547 L1523.49 957.547 L1523.49 961.483 L1501.55 961.483 L1501.55 957.547 Q1504.21 954.793 1508.8 950.163 Q1513.4 945.511 1514.58 944.168 Q1516.83 941.645 1517.71 939.909 Q1518.61 938.149 1518.61 936.46 Q1518.61 933.705 1516.67 931.969 Q1514.74 930.233 1511.64 930.233 Q1509.44 930.233 1506.99 930.997 Q1504.56 931.761 1501.78 933.312 L1501.78 928.589 Q1504.61 927.455 1507.06 926.876 Q1509.51 926.298 1511.55 926.298 Q1516.92 926.298 1520.12 928.983 Q1523.31 931.668 1523.31 936.159 Q1523.31 938.288 1522.5 940.21 Q1521.71 942.108 1519.61 944.7 Q1519.03 945.372 1515.93 948.589 Q1512.82 951.784 1507.18 957.547 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip760)\" d=\"M1533.36 926.923 L1551.71 926.923 L1551.71 930.858 L1537.64 930.858 L1537.64 939.33 Q1538.66 938.983 1539.68 938.821 Q1540.69 938.636 1541.71 938.636 Q1547.5 938.636 1550.88 941.807 Q1554.26 944.978 1554.26 950.395 Q1554.26 955.973 1550.79 959.075 Q1547.31 962.154 1540.99 962.154 Q1538.82 962.154 1536.55 961.784 Q1534.3 961.413 1531.9 960.672 L1531.9 955.973 Q1533.98 957.108 1536.2 957.663 Q1538.43 958.219 1540.9 958.219 Q1544.91 958.219 1547.24 956.112 Q1549.58 954.006 1549.58 950.395 Q1549.58 946.784 1547.24 944.677 Q1544.91 942.571 1540.9 942.571 Q1539.03 942.571 1537.15 942.987 Q1535.3 943.404 1533.36 944.284 L1533.36 926.923 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip760)\" d=\"M1573.47 930.001 Q1569.86 930.001 1568.03 933.566 Q1566.23 937.108 1566.23 944.237 Q1566.23 951.344 1568.03 954.909 Q1569.86 958.45 1573.47 958.45 Q1577.11 958.45 1578.91 954.909 Q1580.74 951.344 1580.74 944.237 Q1580.74 937.108 1578.91 933.566 Q1577.11 930.001 1573.47 930.001 M1573.47 926.298 Q1579.28 926.298 1582.34 930.904 Q1585.42 935.487 1585.42 944.237 Q1585.42 952.964 1582.34 957.571 Q1579.28 962.154 1573.47 962.154 Q1567.66 962.154 1564.58 957.571 Q1561.53 952.964 1561.53 944.237 Q1561.53 935.487 1564.58 930.904 Q1567.66 926.298 1573.47 926.298 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip760)\" d=\"M1603.63 930.001 Q1600.02 930.001 1598.19 933.566 Q1596.39 937.108 1596.39 944.237 Q1596.39 951.344 1598.19 954.909 Q1600.02 958.45 1603.63 958.45 Q1607.27 958.45 1609.07 954.909 Q1610.9 951.344 1610.9 944.237 Q1610.9 937.108 1609.07 933.566 Q1607.27 930.001 1603.63 930.001 M1603.63 926.298 Q1609.44 926.298 1612.5 930.904 Q1615.58 935.487 1615.58 944.237 Q1615.58 952.964 1612.5 957.571 Q1609.44 962.154 1603.63 962.154 Q1597.82 962.154 1594.74 957.571 Q1591.69 952.964 1591.69 944.237 Q1591.69 935.487 1594.74 930.904 Q1597.82 926.298 1603.63 926.298 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip760)\" d=\"M1796.87 942.848 Q1800.23 943.566 1802.1 945.835 Q1804 948.103 1804 951.436 Q1804 956.552 1800.48 959.353 Q1796.96 962.154 1790.48 962.154 Q1788.31 962.154 1785.99 961.714 Q1783.7 961.297 1781.25 960.441 L1781.25 955.927 Q1783.19 957.061 1785.5 957.64 Q1787.82 958.219 1790.34 958.219 Q1794.74 958.219 1797.03 956.483 Q1799.35 954.747 1799.35 951.436 Q1799.35 948.381 1797.19 946.668 Q1795.06 944.932 1791.25 944.932 L1787.22 944.932 L1787.22 941.089 L1791.43 941.089 Q1794.88 941.089 1796.71 939.724 Q1798.54 938.335 1798.54 935.742 Q1798.54 933.08 1796.64 931.668 Q1794.76 930.233 1791.25 930.233 Q1789.32 930.233 1787.13 930.649 Q1784.93 931.066 1782.29 931.946 L1782.29 927.779 Q1784.95 927.038 1787.26 926.668 Q1789.6 926.298 1791.66 926.298 Q1796.99 926.298 1800.09 928.728 Q1803.19 931.136 1803.19 935.256 Q1803.19 938.126 1801.55 940.117 Q1799.9 942.085 1796.87 942.848 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip760)\" d=\"M1822.87 930.001 Q1819.25 930.001 1817.43 933.566 Q1815.62 937.108 1815.62 944.237 Q1815.62 951.344 1817.43 954.909 Q1819.25 958.45 1822.87 958.45 Q1826.5 958.45 1828.31 954.909 Q1830.13 951.344 1830.13 944.237 Q1830.13 937.108 1828.31 933.566 Q1826.5 930.001 1822.87 930.001 M1822.87 926.298 Q1828.68 926.298 1831.73 930.904 Q1834.81 935.487 1834.81 944.237 Q1834.81 952.964 1831.73 957.571 Q1828.68 962.154 1822.87 962.154 Q1817.06 962.154 1813.98 957.571 Q1810.92 952.964 1810.92 944.237 Q1810.92 935.487 1813.98 930.904 Q1817.06 926.298 1822.87 926.298 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip760)\" d=\"M1853.03 930.001 Q1849.42 930.001 1847.59 933.566 Q1845.78 937.108 1845.78 944.237 Q1845.78 951.344 1847.59 954.909 Q1849.42 958.45 1853.03 958.45 Q1856.66 958.45 1858.47 954.909 Q1860.3 951.344 1860.3 944.237 Q1860.3 937.108 1858.47 933.566 Q1856.66 930.001 1853.03 930.001 M1853.03 926.298 Q1858.84 926.298 1861.89 930.904 Q1864.97 935.487 1864.97 944.237 Q1864.97 952.964 1861.89 957.571 Q1858.84 962.154 1853.03 962.154 Q1847.22 962.154 1844.14 957.571 Q1841.08 952.964 1841.08 944.237 Q1841.08 935.487 1844.14 930.904 Q1847.22 926.298 1853.03 926.298 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip760)\" d=\"M1883.19 930.001 Q1879.58 930.001 1877.75 933.566 Q1875.94 937.108 1875.94 944.237 Q1875.94 951.344 1877.75 954.909 Q1879.58 958.45 1883.19 958.45 Q1886.82 958.45 1888.63 954.909 Q1890.46 951.344 1890.46 944.237 Q1890.46 937.108 1888.63 933.566 Q1886.82 930.001 1883.19 930.001 M1883.19 926.298 Q1889 926.298 1892.06 930.904 Q1895.13 935.487 1895.13 944.237 Q1895.13 952.964 1892.06 957.571 Q1889 962.154 1883.19 962.154 Q1877.38 962.154 1874.3 957.571 Q1871.24 952.964 1871.24 944.237 Q1871.24 935.487 1874.3 930.904 Q1877.38 926.298 1883.19 926.298 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><polyline clip-path=\"url(#clip760)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"719.687,899.083 719.687,462.094 \"/>\n<polyline clip-path=\"url(#clip760)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"719.687,879.22 738.585,879.22 \"/>\n<polyline clip-path=\"url(#clip760)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"719.687,779.904 738.585,779.904 \"/>\n<polyline clip-path=\"url(#clip760)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"719.687,680.588 738.585,680.588 \"/>\n<polyline clip-path=\"url(#clip760)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"719.687,581.273 738.585,581.273 \"/>\n<polyline clip-path=\"url(#clip760)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"719.687,481.957 738.585,481.957 \"/>\n<path clip-path=\"url(#clip760)\" d=\"M576.743 879.671 L606.419 879.671 L606.419 883.606 L576.743 883.606 L576.743 879.671 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip760)\" d=\"M616.558 861.94 L634.914 861.94 L634.914 865.875 L620.84 865.875 L620.84 874.347 Q621.859 874 622.877 873.838 Q623.896 873.652 624.914 873.652 Q630.702 873.652 634.081 876.824 Q637.461 879.995 637.461 885.412 Q637.461 890.99 633.989 894.092 Q630.516 897.171 624.197 897.171 Q622.021 897.171 619.752 896.8 Q617.507 896.43 615.1 895.689 L615.1 890.99 Q617.183 892.125 619.405 892.68 Q621.627 893.236 624.104 893.236 Q628.109 893.236 630.447 891.129 Q632.785 889.023 632.785 885.412 Q632.785 881.801 630.447 879.694 Q628.109 877.588 624.104 877.588 Q622.229 877.588 620.354 878.004 Q618.502 878.421 616.558 879.301 L616.558 861.94 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip760)\" d=\"M646.674 890.62 L651.558 890.62 L651.558 896.5 L646.674 896.5 L646.674 890.62 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip760)\" d=\"M671.743 865.018 Q668.132 865.018 666.303 868.583 Q664.498 872.125 664.498 879.254 Q664.498 886.361 666.303 889.925 Q668.132 893.467 671.743 893.467 Q675.377 893.467 677.183 889.925 Q679.011 886.361 679.011 879.254 Q679.011 872.125 677.183 868.583 Q675.377 865.018 671.743 865.018 M671.743 861.315 Q677.553 861.315 680.609 865.921 Q683.687 870.504 683.687 879.254 Q683.687 887.981 680.609 892.588 Q677.553 897.171 671.743 897.171 Q665.933 897.171 662.854 892.588 Q659.799 887.981 659.799 879.254 Q659.799 870.504 662.854 865.921 Q665.933 861.315 671.743 861.315 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip760)\" d=\"M577.739 780.355 L607.415 780.355 L607.415 784.291 L577.739 784.291 L577.739 780.355 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip760)\" d=\"M630.354 766.698 L618.549 785.147 L630.354 785.147 L630.354 766.698 M629.127 762.624 L635.007 762.624 L635.007 785.147 L639.938 785.147 L639.938 789.036 L635.007 789.036 L635.007 797.184 L630.354 797.184 L630.354 789.036 L614.753 789.036 L614.753 784.522 L629.127 762.624 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip760)\" d=\"M647.669 791.304 L652.553 791.304 L652.553 797.184 L647.669 797.184 L647.669 791.304 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip760)\" d=\"M662.785 762.624 L681.141 762.624 L681.141 766.559 L667.067 766.559 L667.067 775.031 Q668.086 774.684 669.104 774.522 Q670.123 774.337 671.141 774.337 Q676.928 774.337 680.308 777.508 Q683.687 780.679 683.687 786.096 Q683.687 791.675 680.215 794.777 Q676.743 797.855 670.424 797.855 Q668.248 797.855 665.979 797.485 Q663.734 797.115 661.326 796.374 L661.326 791.675 Q663.41 792.809 665.632 793.365 Q667.854 793.92 670.331 793.92 Q674.336 793.92 676.673 791.814 Q679.011 789.707 679.011 786.096 Q679.011 782.485 676.673 780.379 Q674.336 778.272 670.331 778.272 Q668.456 778.272 666.581 778.689 Q664.729 779.105 662.785 779.985 L662.785 762.624 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip760)\" d=\"M576.743 681.04 L606.419 681.04 L606.419 684.975 L576.743 684.975 L576.743 681.04 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip760)\" d=\"M629.359 667.382 L617.553 685.831 L629.359 685.831 L629.359 667.382 M628.132 663.308 L634.012 663.308 L634.012 685.831 L638.942 685.831 L638.942 689.72 L634.012 689.72 L634.012 697.868 L629.359 697.868 L629.359 689.72 L613.757 689.72 L613.757 685.206 L628.132 663.308 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip760)\" d=\"M646.674 691.989 L651.558 691.989 L651.558 697.868 L646.674 697.868 L646.674 691.989 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip760)\" d=\"M671.743 666.387 Q668.132 666.387 666.303 669.952 Q664.498 673.494 664.498 680.623 Q664.498 687.73 666.303 691.294 Q668.132 694.836 671.743 694.836 Q675.377 694.836 677.183 691.294 Q679.011 687.73 679.011 680.623 Q679.011 673.494 677.183 669.952 Q675.377 666.387 671.743 666.387 M671.743 662.683 Q677.553 662.683 680.609 667.29 Q683.687 671.873 683.687 680.623 Q683.687 689.35 680.609 693.956 Q677.553 698.54 671.743 698.54 Q665.933 698.54 662.854 693.956 Q659.799 689.35 659.799 680.623 Q659.799 671.873 662.854 667.29 Q665.933 662.683 671.743 662.683 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip760)\" d=\"M577.739 581.724 L607.415 581.724 L607.415 585.659 L577.739 585.659 L577.739 581.724 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip760)\" d=\"M631.674 579.919 Q635.03 580.636 636.905 582.905 Q638.803 585.173 638.803 588.507 Q638.803 593.622 635.285 596.423 Q631.766 599.224 625.285 599.224 Q623.109 599.224 620.794 598.784 Q618.502 598.368 616.049 597.511 L616.049 592.997 Q617.993 594.132 620.308 594.71 Q622.623 595.289 625.146 595.289 Q629.544 595.289 631.836 593.553 Q634.151 591.817 634.151 588.507 Q634.151 585.451 631.998 583.738 Q629.868 582.002 626.049 582.002 L622.021 582.002 L622.021 578.159 L626.234 578.159 Q629.683 578.159 631.512 576.794 Q633.34 575.405 633.34 572.812 Q633.34 570.15 631.442 568.738 Q629.567 567.303 626.049 567.303 Q624.127 567.303 621.928 567.72 Q619.729 568.136 617.09 569.016 L617.09 564.849 Q619.752 564.109 622.067 563.738 Q624.405 563.368 626.465 563.368 Q631.789 563.368 634.891 565.798 Q637.993 568.206 637.993 572.326 Q637.993 575.196 636.35 577.187 Q634.706 579.155 631.674 579.919 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip760)\" d=\"M647.669 592.673 L652.553 592.673 L652.553 598.553 L647.669 598.553 L647.669 592.673 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip760)\" d=\"M662.785 563.993 L681.141 563.993 L681.141 567.928 L667.067 567.928 L667.067 576.4 Q668.086 576.053 669.104 575.891 Q670.123 575.706 671.141 575.706 Q676.928 575.706 680.308 578.877 Q683.687 582.048 683.687 587.465 Q683.687 593.044 680.215 596.145 Q676.743 599.224 670.424 599.224 Q668.248 599.224 665.979 598.854 Q663.734 598.483 661.326 597.743 L661.326 593.044 Q663.41 594.178 665.632 594.733 Q667.854 595.289 670.331 595.289 Q674.336 595.289 676.673 593.183 Q679.011 591.076 679.011 587.465 Q679.011 583.854 676.673 581.747 Q674.336 579.641 670.331 579.641 Q668.456 579.641 666.581 580.058 Q664.729 580.474 662.785 581.354 L662.785 563.993 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip760)\" d=\"M576.743 482.409 L606.419 482.409 L606.419 486.344 L576.743 486.344 L576.743 482.409 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip760)\" d=\"M630.678 480.603 Q634.035 481.321 635.91 483.589 Q637.808 485.858 637.808 489.191 Q637.808 494.307 634.289 497.108 Q630.771 499.909 624.29 499.909 Q622.114 499.909 619.799 499.469 Q617.507 499.052 615.053 498.196 L615.053 493.682 Q616.998 494.816 619.313 495.395 Q621.627 495.973 624.151 495.973 Q628.549 495.973 630.84 494.237 Q633.155 492.501 633.155 489.191 Q633.155 486.136 631.002 484.423 Q628.873 482.686 625.053 482.686 L621.026 482.686 L621.026 478.844 L625.239 478.844 Q628.688 478.844 630.516 477.478 Q632.345 476.089 632.345 473.497 Q632.345 470.835 630.447 469.423 Q628.572 467.987 625.053 467.987 Q623.132 467.987 620.933 468.404 Q618.734 468.821 616.095 469.7 L616.095 465.534 Q618.757 464.793 621.072 464.423 Q623.41 464.052 625.47 464.052 Q630.794 464.052 633.896 466.483 Q636.998 468.89 636.998 473.011 Q636.998 475.881 635.354 477.872 Q633.711 479.839 630.678 480.603 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip760)\" d=\"M646.674 493.358 L651.558 493.358 L651.558 499.237 L646.674 499.237 L646.674 493.358 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip760)\" d=\"M671.743 467.756 Q668.132 467.756 666.303 471.321 Q664.498 474.862 664.498 481.992 Q664.498 489.098 666.303 492.663 Q668.132 496.205 671.743 496.205 Q675.377 496.205 677.183 492.663 Q679.011 489.098 679.011 481.992 Q679.011 474.862 677.183 471.321 Q675.377 467.756 671.743 467.756 M671.743 464.052 Q677.553 464.052 680.609 468.659 Q683.687 473.242 683.687 481.992 Q683.687 490.719 680.609 495.325 Q677.553 499.909 671.743 499.909 Q665.933 499.909 662.854 495.325 Q659.799 490.719 659.799 481.992 Q659.799 473.242 662.854 468.659 Q665.933 464.052 671.743 464.052 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><polyline clip-path=\"url(#clip763)\" style=\"stroke:#009af9; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"160.995,-32.6883 161.555,-1456.43 162.114,-2761.65 162.673,-3986.53 163.232,-5088.16 163.792,-6091.78 164.351,-7007.72 164.91,-7865.8 165.469,-8601.98 166.029,-9311.37 166.588,-9932.3 167.147,-10490.4 167.706,-10989.7 168.266,-11434 168.825,-11805.9 169.384,-12152 169.943,-11654.7 170.503,-11945.9 171.062,-12196.5 171.621,-12398.4 172.18,-12576.3 172.74,-12721.1 173.299,-12303.3 173.858,-11910.8 174.417,-12000.3 174.977,-11647.1 175.536,-10948.3 176.095,-10661.7 176.655,-10055.7 177.214,-9790.29 177.773,-9825.3 178.332,-9842.09 178.892,-9836.34 179.451,-9815.4 180.01,-9793.34 180.569,-9549.88 181.129,-9506.59 181.688,-9066.27 182.247,-9011.67 182.806,-8778.64 183.366,-8248.26 183.925,-8048.92 184.484,-7988.49 185.043,-7663.07 185.603,-7608.75 186.162,-7537.25 186.721,-7358.86 187.28,-7184.49 187.84,-7000.51 188.399,-6734.49 188.958,-6482.86 189.517,-6422.27 190.077,-6181.79 190.636,-6113.06 191.195,-5965.81 191.754,-5748.85 192.314,-5665.56 192.873,-5231.62 193.432,-5100.45 193.991,-5033.24 194.551,-4962.07 195.11,-4888.63 195.669,-4753.77 196.228,-4619.81 196.788,-4496.73 197.347,-4366.3 197.906,-4238.88 198.465,-4065.42 199.025,-3898.05 199.584,-3780.18 200.143,-3666.05 200.702,-3596.03 201.262,-3476.63 201.821,-3363.44 202.38,-3250.4 202.939,-3177.63 203.499,-3067.9 204.058,-2886.76 204.617,-2750.36 205.176,-2685.88 205.736,-2516.54 206.295,-2421.09 206.854,-2364.64 207.413,-2241.02 207.973,-2183.14 208.532,-1998.78 209.091,-1911.42 209.65,-1861.4 210.21,-1721.15 210.769,-1642.69 211.328,-1508.93 211.887,-1404.51 212.447,-1307.48 213.006,-1266.12 213.565,-1226.15 214.124,-1130.77 214.684,-1044.45 215.243,-1009.46 215.802,-895.879 216.361,-862.323 216.921,-782.06 217.48,-750.475 218.039,-720.388 218.598,-611.978 219.158,-554.905 219.717,-548.55 220.276,-492.548 220.835,-415.91 221.395,-384.837 221.954,-309.816 222.513,-262.112 223.072,-169.638 223.632,-103.254 224.191,-83.263 224.75,-36.373 225.309,4.21157 225.869,3.97961 226.428,45.4226 226.987,45.2925 227.546,147.902 228.106,204.596 228.665,219.115 229.224,287.973 229.783,340.527 230.343,369.359 230.902,418.509 231.461,464.582 232.02,430.647 232.58,456.958 233.139,460.511 233.698,469.279 234.257,479.172 234.817,504.691 235.376,528.762 235.935,592.39 236.494,635.002 237.054,694.774 237.613,729.91 238.172,730.111 238.731,763.542 239.291,722.598 239.85,722.191 240.409,704.701 240.968,741.729 241.528,743.102 242.087,730.015 242.646,732.422 243.205,753.475 243.765,776.427 244.324,777.875 244.883,780.443 245.442,765.31 246.002,766.426 246.561,751.094 247.12,756.057 247.679,794.515 248.239,779.117 248.798,818.731 249.357,911.354 249.916,908.541 250.476,920.829 251.035,937.782 251.594,930.71 252.153,943.3 252.713,962.299 253.272,974.141 253.831,966.85 254.39,983.791 254.95,982.737 255.509,997 256.068,1013.79 256.627,975.673 257.187,1009.7 257.746,1006.35 258.305,987.415 258.864,1003.19 259.424,1065.11 259.983,1079.21 260.542,1052.01 261.101,1062.04 261.661,1057 262.22,1054.25 262.779,1031.26 263.338,1024.54 263.898,984.7 264.457,999.39 265.016,983.839 265.575,998.918 266.135,1010.61 266.694,1009.33 267.253,1025.11 267.812,1017.65 268.372,1029.5 268.931,1006.25 269.49,1053.47 270.049,1018.11 270.609,1012.26 271.168,1008.83 271.727,1040.04 272.286,1071.16 272.846,1083 273.405,1061.96 273.964,1088.74 274.523,1064.17 275.083,1075.55 275.642,1069.96 276.201,1062.3 276.76,1055.21 277.32,1068.69 277.879,1083.62 278.438,1078.57 278.997,1081.55 279.557,1074.4 280.116,1064.74 280.675,1075.91 281.234,1070.98 281.794,1078.14 282.353,1071.38 282.912,1078.16 283.471,1106.76 284.031,1099.44 284.59,1088.05 285.149,1111.66 285.708,1116.91 286.268,1140.49 286.827,1129.2 287.386,1136.19 287.945,1125.93 288.505,1115.79 289.064,1120.77 289.623,1112.87 290.182,1105.71 290.742,1112.92 291.301,1119.4 291.86,1108.28 292.419,1098.67 292.979,1053.04 293.538,1026.49 294.097,1019.17 294.656,1029.8 295.216,1038.56 295.775,1032.23 296.334,1024.35 296.893,1018.69 297.453,1013.45 298.012,1024.78 298.571,1004.12 299.13,966.922 299.69,1014.27 300.249,1042.85 300.808,1054.1 301.368,1045.97 301.927,1039.71 302.486,1065.13 303.045,1040.57 303.605,1018.11 304.164,1030.35 304.723,1008.37 305.282,1019.72 305.842,1030.42 306.401,1041.11 306.96,1048.33 307.519,1041.44 308.079,1032.95 308.638,1027.07 309.197,1003.84 309.756,1002.34 310.316,980.143 310.875,1023.15 311.434,1032.76 311.993,1041.09 312.553,1032.51 313.112,1053.95 313.671,1077.9 314.23,1116.81 314.79,1055.3 315.349,1029.84 315.908,1038.61 316.467,1046.41 317.027,1037.15 317.586,1010.55 318.145,1004.46 318.704,981.407 319.264,990.525 319.823,986.39 320.382,1013.62 320.941,1003.52 321.501,1029.56 322.06,1035.82 322.619,1029.32 323.178,1020.82 323.738,1011.03 324.297,1036.91 324.856,1061.4 325.415,1052.66 325.975,1056.98 326.534,1029.15 327.093,1035.33 327.652,1008.98 328.212,1019.38 328.771,1009.02 329.33,982.268 329.889,991.131 330.449,998.81 331.008,991.148 331.567,953.295 332.126,947.841 332.686,943.323 333.245,940.511 333.804,965.118 334.363,991.149 334.923,985.085 335.482,980.677 336.041,992.173 336.6,1017.8 337.16,1041.89 337.719,1062.67 338.278,1034.97 338.837,1008.53 339.397,968.172 339.956,979.526 340.515,971.315 341.074,965.952 341.634,968.727 342.193,928.452 342.752,907.035 343.311,886.607 343.871,852.595 344.43,849.854 344.989,847.405 345.548,846.177 346.108,841.909 346.667,859.909 347.226,857.659 347.785,838.815 348.345,823.109 348.904,841.921 349.463,841.239 350.022,827.686 350.582,844.47 351.141,841.459 351.7,856.857 352.259,853.865 352.819,853.842 353.378,850.369 353.937,830.908 354.496,848.019 355.056,864.523 355.615,863.553 356.174,881.19 356.733,910.928 357.293,906.743 357.852,918.345 358.411,928.982 358.97,920.513 359.53,917.923 360.089,895.475 360.648,893.208 361.207,905.818 361.767,899.219 362.326,895.679 362.885,892.462 363.444,891.672 364.004,868.181 364.563,852.192 365.122,849.58 365.681,812.77 366.241,845.069 366.8,859.33 367.359,889.974 367.918,903.423 368.478,901.248 369.037,927.643 369.596,957.091 370.155,951.661 370.715,927.343 371.274,935.209 371.833,944.095 372.392,935.45 372.952,929.329 373.511,906.496 374.07,933.453 374.629,909.826 375.189,884.824 375.748,881.307 376.307,877.13 376.866,890.022 377.426,899.041 377.985,861.782 378.544,826.043 379.103,840.796 379.663,803.083 380.222,802.003 380.781,785.104 381.34,802.257 381.9,799.515 382.459,779.624 383.018,776.553 383.577,780.88 384.137,766.825 384.696,785.095 385.255,753.203 385.814,788.751 386.374,792.852 386.933,791.83 387.492,838.571 388.051,817.946 388.611,831.966 389.17,864.226 389.729,858.49 390.288,852.868 390.848,883.116 391.407,866.65 391.966,878.246 392.525,876.397 393.085,821.96 393.644,821.1 394.203,801.504 394.762,832.163 395.322,814.779 395.881,846.763 396.44,829.667 396.999,828.01 397.559,845.444 398.118,856.188 398.677,868.009 399.236,863.293 399.796,857.433 400.355,869.778 400.914,803.482 401.473,869.147 402.033,865.008 402.592,841.306 403.151,853.016 403.71,833.923 404.27,863.446 404.829,842.059 405.388,837.779 405.947,818.862 406.507,831.044 407.066,828.696 407.625,827.422 408.184,828.547 408.744,826.817 409.303,826.086 409.862,818.962 410.421,782.521 410.981,783.552 411.54,784.421 412.099,786.338 412.658,818.8 413.218,832.092 413.777,829.712 414.336,841.467 414.895,854.982 415.455,898.593 416.014,888.637 416.573,883.193 417.132,862.037 417.692,843.671 418.251,859.301 418.81,824.651 419.369,774.872 419.929,806.978 420.488,807.671 421.047,824.959 421.606,822.94 422.166,820.668 422.725,821.041 423.284,803.986 423.843,802.03 424.403,814.809 424.962,780.501 425.521,782.46 426.08,783.812 426.64,798.487 427.199,797.095 427.758,777.865 428.318,759.44 428.877,741.955 429.436,739.134 429.995,721.946 430.555,705.772 431.114,724.215 431.673,725.308 432.232,711.935 432.792,703.012 433.351,703.411 433.91,709.326 434.469,709.765 435.029,727.948 435.588,713.586 436.147,734.29 436.706,735.981 437.266,755.514 437.825,753.645 438.384,787.026 438.943,782.901 439.503,746.835 440.062,710.766 440.621,700.006 441.18,687.82 441.74,724.867 442.299,742.676 442.858,745.137 443.417,746.758 443.977,709.632 444.536,714.472 445.095,716.526 445.654,717.843 446.214,737.792 446.773,783.016 447.332,778.742 447.891,793.961 448.451,789.962 449.01,835.442 449.569,894.453 450.128,871.937 450.688,864.968 451.247,889.047 451.806,897.131 452.365,857.145 452.925,869.492 453.484,861.292 454.043,889.031 454.602,897.584 455.162,873.525 455.721,867.353 456.28,860.397 456.839,855.266 457.399,848.415 457.958,811.753 458.517,827.262 459.076,886.346 459.636,865.354 460.195,893.749 460.754,920.942 461.313,946.936 461.873,919.94 462.432,942.147 462.991,932.347 463.55,921.069 464.11,960.971 464.669,948.582 465.228,903.091 465.787,910.882 466.347,867.901 466.906,860.833 467.465,852.342 468.024,844.083 468.584,856.122 469.143,881.865 469.702,860.364 470.261,872.041 470.821,847.538 471.38,825.065 471.939,791.173 472.498,791.071 473.058,786.44 473.617,751.178 474.176,716.602 474.735,701.46 475.295,668.368 475.854,639.874 476.413,629.118 476.972,633.343 477.532,656.509 478.091,660.93 478.65,698.85 479.209,681.722 479.769,718.233 480.328,751.511 480.887,783.776 481.446,782.479 482.006,762.3 482.565,757.546 483.124,752.722 483.683,746.545 484.243,761.878 484.802,777.474 485.361,776.932 485.92,743.518 486.48,812.663 487.039,789.437 487.598,771.731 488.157,785.302 488.717,766.96 489.276,751.63 489.835,770.38 490.394,750.69 490.954,764.968 491.513,778.453 492.072,795.345 492.631,792.747 493.191,757.431 493.75,738.151 494.309,754.021 494.868,720.634 495.428,674.921 495.987,678.839 496.546,650.079 497.105,689.115 497.665,707.124 498.224,676.116 498.783,666.935 499.342,701.766 499.902,687.062 500.461,705.944 501.02,720.259 501.579,706.246 502.139,724.627 502.698,743.417 503.257,771.987 503.816,772.303 504.376,772.852 504.935,736.978 505.494,752.255 506.053,766.148 506.613,768.64 507.172,750.557 507.731,733.047 508.29,703.099 508.85,686.655 509.409,704.198 509.968,723.87 510.527,727.163 511.087,713.389 511.646,751.821 512.205,751.637 512.764,733.68 513.324,749.429 513.883,778.269 514.442,791.122 515.001,818.867 515.561,862.195 516.12,838.827 516.679,833 517.238,828.784 517.798,791.34 518.357,791.683 518.916,786.831 519.475,797.731 520.035,794.962 520.594,804.087 521.153,816.167 521.712,827.941 522.272,821.372 522.831,813.927 523.39,811.479 523.949,836.596 524.509,815.606 525.068,826.993 525.627,803.261 526.186,797.224 526.746,763.534 527.305,792.636 527.864,756.348 528.423,751.959 528.983,716.849 529.542,735.769 530.101,754.118 530.66,769.833 531.22,748.769 531.779,746.838 532.338,762.62 532.897,764.6 533.457,747.64 534.016,761.366 534.575,743.369 535.134,810.059 535.694,774.709 536.253,770.554 536.812,765.426 537.371,747.574 537.931,714.982 538.49,732.191 539.049,717.612 539.608,714.46 540.168,742.838 540.727,755.503 541.286,770.582 541.845,751.929 542.405,782.526 542.964,763.028 543.523,715.486 544.082,701.66 544.642,734.97 545.201,734.86 545.76,737.901 546.319,691.128 546.879,723.38 547.438,738.606 547.997,738.088 548.556,722.074 549.116,741.247 549.675,727.215 550.234,744.159 550.793,742.737 551.353,726.931 551.912,707.354 552.471,725.215 553.031,723.528 553.59,737.682 554.149,736.275 554.708,752.334 555.268,735.836 555.827,736.678 556.386,657.613 556.945,661.952 557.505,683.237 558.064,701.406 558.623,703.475 559.182,721.199 559.742,703.087 560.301,689.241 560.86,739.122 561.419,752.769 561.979,735.635 562.538,736.306 563.097,750.533 563.656,764.349 564.216,762.159 564.775,772.963 565.334,787.228 565.893,754.514 566.453,747.863 567.012,709.514 567.571,710.429 568.13,695.564 568.69,702.067 569.249,703.639 569.808,704.216 570.367,722.075 570.927,705.892 571.486,705.104 572.045,754.432 572.604,767.342 573.164,716.232 573.723,683.88 574.282,651.13 574.841,641.422 575.401,645.868 575.96,666.247 576.519,671.004 577.078,691.683 577.638,693.12 578.197,708.933 578.756,661.855 579.315,700.339 579.875,721.127 580.434,720.303 580.993,746.407 581.552,762.659 582.112,778.595 582.671,794.441 583.23,810.855 583.789,806.798 584.349,814.375 584.908,828.028 585.467,822.823 586.026,833.052 586.586,814.144 587.145,810.035 587.704,770.069 588.263,786.463 588.823,796.67 589.382,762.514 589.941,778.135 590.5,787.661 591.06,754.015 591.619,772.119 592.178,789.175 592.737,782.39 593.297,794.652 593.856,792.099 594.415,804.625 594.974,766.08 595.534,761.975 596.093,794.578 596.652,807.221 597.211,750.803 597.771,748.158 598.33,760.908 598.889,722.731 599.448,704.669 600.008,717.603 600.567,665.959 601.126,647.909 601.685,647.902 602.245,668.157 602.804,652.446 603.363,656.056 603.922,660.115 604.482,646.706 605.041,647.04 605.6,665.615 606.159,663.116 606.719,683.738 607.278,699.458 607.837,667.671 608.396,651.346 608.956,671.447 609.515,654.918 610.074,657.233 610.633,658.825 611.193,711.296 611.752,710.628 612.311,724.835 612.87,722.888 613.43,723.097 613.989,705.24 614.548,722.815 615.107,701.571 615.667,683.715 616.226,669.559 616.785,686.091 617.344,700.75 617.904,703.624 618.463,686.882 619.022,685.285 619.581,684.852 620.141,687.006 620.7,703.379 621.259,703.297 621.818,690.725 622.378,674.379 622.937,691.026 623.496,708.849 624.055,724.921 624.615,723.627 625.174,707.996 625.733,704.292 626.292,690.127 626.852,720.335 627.411,737.347 627.97,733.154 628.529,731.835 629.089,714.114 629.648,692.453 630.207,693.083 630.766,707.603 631.326,693.046 631.885,679.255 632.444,697.113 633.003,701.533 633.563,668.286 634.122,669.479 634.681,669.989 635.24,672.574 635.8,669.993 636.359,673.176 636.918,672.866 637.477,675.709 638.037,679.148 638.596,693.53 639.155,725.619 639.714,740.196 640.274,717.767 640.833,715.852 641.392,769.057 641.951,715.099 642.511,665.185 643.07,699.911 643.629,682.745 644.188,667.403 644.748,622.121 645.307,627.919 645.866,650.803 646.425,637.081 646.985,623.697 647.544,626.101 648.103,628.75 648.662,601.328 649.222,624.587 649.781,630.243 650.34,633.028 650.899,651.798 651.459,670.752 652.018,623.949 652.577,629.517 653.136,618.612 653.696,609.67 654.255,642.029 654.814,647.606 655.373,648.395 655.933,650.008 656.492,623.378 657.051,629.906 657.61,637.737 658.17,642.49 658.729,645.684 659.288,617.406 659.847,640.599 660.407,646.766 660.966,633.659 661.525,638.712 662.084,658.195 662.644,659.256 663.203,675.093 663.762,676.727 664.321,697.339 664.881,614.536 665.44,619.991 665.999,607.819 666.558,597.699 667.118,606.472 667.677,610.717 668.236,633.887 668.795,671.56 669.355,670.975 669.914,671.019 670.473,708.138 671.032,708.814 671.592,725.284 672.151,697.347 672.71,716.296 673.269,697.32 673.829,697.855 674.388,714.945 674.947,716.307 675.506,715.213 676.066,747.948 676.625,790.623 677.184,768.998 677.743,751.306 678.303,782.51 678.862,761.961 679.421,772.749 679.981,784.014 680.54,778.704 681.099,724.778 681.658,752.067 682.218,715.598 682.777,730.431 683.336,759.725 683.895,741.583 684.455,787.426 685.014,796.478 685.573,771.248 686.132,752.002 686.692,768.246 687.251,731.172 687.81,696.072 688.369,680.282 688.929,700.44 689.488,731.607 690.047,716.16 690.606,731.483 691.166,744.088 691.725,758.443 692.284,722.308 692.843,673.339 693.403,691.787 693.962,724.548 694.521,727.104 695.08,724.692 695.64,722.765 696.199,705.586 696.758,703.845 697.317,673.188 697.877,692.852 698.436,709.291 698.995,675.588 699.554,677.678 700.114,647.088 700.673,714.371 701.232,697.43 701.791,699.693 702.351,731.126 702.91,729.976 703.469,741.477 704.028,723.189 704.588,692.286 705.147,660.906 705.706,673.096 706.265,672.867 706.825,674.537 707.384,672.597 707.943,685.859 708.502,683.086 709.062,665.642 709.621,648.118 710.18,651.596 710.739,673.195 711.299,690.703 711.858,706.567 712.417,674.453 712.976,676.121 713.536,658.245 714.095,657.697 714.654,644.92 715.213,613.94 715.773,601.045 716.332,620.458 716.891,639.842 717.45,644.901 718.01,662.442 718.569,666.625 719.128,670.872 719.687,672.091 720.247,686.844 720.806,702.381 721.365,700.814 721.924,699.424 722.484,713.933 723.043,727.739 723.602,725.179 724.161,706.259 724.721,673.131 725.28,688.566 725.839,672.232 726.398,690.162 726.958,674.37 727.517,660.2 728.076,675.111 728.635,661.908 729.195,679.884 729.754,652.244 730.313,669.137 730.872,635.686 731.432,635.932 731.991,622.267 732.55,612.937 733.109,631.749 733.669,586.681 734.228,589.747 734.787,594.641 735.346,613.559 735.906,599.54 736.465,619.632 737.024,657.003 737.583,672.509 738.143,704.755 738.702,703.69 739.261,685.789 739.82,668.309 740.38,670.73 740.939,690.902 741.498,692.769 742.057,676.052 742.617,727.09 743.176,692.173 743.735,704.417 744.294,722.322 744.854,736.699 745.413,736.725 745.972,751.772 746.531,746.202 747.091,775.254 747.65,773.538 748.209,787.251 748.768,766.34 749.328,739.393 749.887,734.532 750.446,747.942 751.005,762.595 751.565,760.64 752.124,742.195 752.683,723.366 753.242,706.375 753.802,707.926 754.361,677.726 754.92,681.172 755.479,701.401 756.039,716.719 756.598,731.328 757.157,743.418 757.716,740.067 758.276,785.445 758.835,764.275 759.394,792.698 759.953,787.185 760.513,784.104 761.072,779.36 761.631,772.038 762.19,767.44 762.75,747.654 763.309,740.934 763.868,757.768 764.427,736.23 764.987,748.333 765.546,746.7 766.105,745.279 766.664,743.15 767.224,756.285 767.783,736.371 768.342,716.607 768.901,715.666 769.461,712.636 770.02,696.863 770.579,679.181 771.138,697.085 771.698,695.995 772.257,693.836 772.816,673.89 773.375,673.547 773.935,690.496 774.494,689.791 775.053,690.888 775.612,711.494 776.172,743.178 776.731,739.638 777.29,738.597 777.849,767.847 778.409,783.359 778.968,748.271 779.527,776.354 780.086,740.323 780.646,752.191 781.205,762.447 781.764,775.383 782.323,758.552 782.883,709.442 783.442,722.291 784.001,752.425 784.56,750.029 785.12,763.018 785.679,793.885 786.238,773.519 786.797,786.737 787.357,767.664 787.916,781.89 788.475,797.236 789.034,806.017 789.594,788.804 790.153,763.829 790.712,728.098 791.271,730.327 791.831,777.564 792.39,742.173 792.949,736.492 793.508,749.692 794.068,733.651 794.627,728.316 795.186,710.762 795.745,690.692 796.305,660.394 796.864,632.475 797.423,636.517 797.982,606.145 798.542,621.942 799.101,643.307 799.66,648.266 800.219,618.576 800.779,655.179 801.338,642.928 801.897,660.3 802.456,631.541 803.016,634.311 803.575,640.455 804.134,659.857 804.693,660.694 805.253,629.459 805.812,600.321 806.371,606.125 806.931,590.267 807.49,640.89 808.049,579.673 808.608,621.346 809.168,625.009 809.727,595.595 810.286,567.893 810.845,555.22 811.405,551.041 811.964,543.294 812.523,603.17 813.082,608.467 813.642,614.227 814.201,636.107 814.76,651.52 815.319,638.236 815.879,673.036 816.438,646.755 816.997,632.635 817.556,639.684 818.116,673.957 818.675,676.556 819.234,695.694 819.793,698.225 820.353,745.904 820.912,740.6 821.471,739.549 822.03,755.753 822.59,733.791 823.149,731.079 823.708,730.783 824.267,776.173 824.827,754.342 825.386,751.616 825.945,747.271 826.504,740.637 827.064,740.216 827.623,740.389 828.182,739.68 828.741,721.604 829.301,699.399 829.86,715.679 830.419,714.426 830.978,700.555 831.538,687.676 832.097,654.794 832.656,670.988 833.215,672.505 833.775,722.478 834.334,752.113 834.893,763.165 835.452,759.807 836.012,754.783 836.571,751.004 837.13,774.997 837.689,737.487 838.249,733.523 838.808,745.123 839.367,722.301 839.926,718.24 840.486,751.155 841.045,747.648 841.604,728.98 842.163,711.696 842.723,693.655 843.282,659.033 843.841,662.054 844.4,681.391 844.96,680.77 845.519,679.234 846.078,694.019 846.637,731.265 847.197,728.665 847.756,727.536 848.315,738.597 848.874,718.375 849.434,719.148 849.993,671.5 850.552,655.8 851.111,640.925 851.671,645.453 852.23,615.798 852.789,565.197 853.348,571.16 853.908,592.664 854.467,584.551 855.026,560.01 855.585,585.571 856.145,593.31 856.704,583.4 857.263,606.305 857.822,611.792 858.382,648.688 858.941,632.43 859.5,648.806 860.059,633.746 860.619,620.94 861.178,624.832 861.737,630.559 862.296,651.924 862.856,654.579 863.415,656.09 863.974,656.58 864.533,642.36 865.093,658.822 865.652,658.115 866.211,660.523 866.77,710.728 867.33,707.345 867.889,723.741 868.448,769.975 869.007,768.544 869.567,797.516 870.126,775.181 870.685,770.009 871.244,798.964 871.804,758.864 872.363,818.532 872.922,810.868 873.481,771.425 874.041,767.402 874.6,764.213 875.159,760.517 875.718,755.139 876.278,770.007 876.837,762.882 877.396,742.367 877.955,705.417 878.515,720.965 879.074,767.741 879.633,776.678 880.192,754.543 880.752,751.625 881.311,749.974 881.87,730.558 882.429,727.628 882.989,724.178 883.548,691.392 884.107,689.978 884.666,654.379 885.226,672.997 885.785,676.599 886.344,692.39 886.903,690.621 887.463,671.733 888.022,640.136 888.581,643.012 889.14,645.57 889.7,679.998 890.259,662.832 890.818,681.968 891.377,679.685 891.937,681.069 892.496,666.396 893.055,698.147 893.614,712.02 894.174,711.088 894.733,694.35 895.292,712.926 895.851,740.705 896.411,722.126 896.97,703.417 897.529,685.528 898.088,668.521 898.648,674.521 899.207,692.475 899.766,660.214 900.325,674.798 900.885,690.67 901.444,641.662 902.003,660.583 902.562,647.504 903.122,647.738 903.681,651.064 904.24,668.891 904.799,686.259 905.359,653.639 905.918,623.705 906.477,612.5 907.036,648.698 907.596,654.772 908.155,637.513 908.714,638.635 909.273,640.661 909.833,610.972 910.392,595.017 910.951,614.181 911.51,607.326 912.07,590.685 912.629,599.263 913.188,603.541 913.747,606.403 914.307,593.733 914.866,645.861 915.425,631.417 915.984,648.448 916.544,651.459 917.103,652.561 917.662,636.638 918.221,639.861 918.781,676.147 919.34,660.546 919.899,630.112 920.458,633.249 921.018,637.584 921.577,657.408 922.136,695.58 922.695,712.725 923.255,644.135 923.814,664.118 924.373,647.659 924.932,666.625 925.492,669.44 926.051,652.412 926.61,705.238 927.169,652.413 927.729,653.175 928.288,654.651 928.847,655.915 929.406,673.723 929.966,672.324 930.525,670.986 931.084,673.927 931.644,695.014 932.203,745.164 932.762,739.504 933.321,738.064 933.881,702.054 934.44,702.364 934.999,734.627 935.558,749.303 936.118,745.059 936.677,704.787 937.236,687.942 937.795,695.669 938.355,691.874 938.914,707.974 939.473,707.114 940.032,687.282 940.592,686.646 941.151,687.402 941.71,700.779 942.269,699.087 942.829,649.057 943.388,686.445 943.947,692.131 944.506,711.547 945.066,711.213 945.625,713.354 946.184,711.227 946.743,728.925 947.303,708.722 947.862,723.798 948.421,692.976 948.98,689.942 949.54,706.171 950.099,721.297 950.658,720.775 951.217,718.316 951.777,747.122 952.336,728.875 952.895,708.649 953.454,708.058 954.014,707.358 954.573,741.899 955.132,723.498 955.691,708.996 956.251,704.687 956.81,750.579 957.369,730.942 957.928,745.562 958.488,742.521 959.047,739.198 959.606,701.875 960.165,700.057 960.725,666.164 961.284,649.774 961.843,699.064 962.402,747.6 962.962,740.795 963.521,718.031 964.08,718.047 964.639,715.094 965.199,697.83 965.758,682.161 966.317,666.555 966.876,667.097 967.436,653.148 967.995,655.415 968.554,676.988 969.113,680.562 969.673,649.802 970.232,653.51 970.791,670.002 971.35,639.785 971.91,694.03 972.469,663.228 973.028,651.844 973.587,670.11 974.147,670.136 974.706,673.457 975.265,673.906 975.824,671.563 976.384,673.531 976.943,638.266 977.502,657.969 978.061,676.062 978.621,643.678 979.18,647.173 979.739,618.533 980.298,639.732 980.858,656.505 981.417,673.219 981.976,674.864 982.535,673.581 983.095,658.024 983.654,625.33 984.213,563.275 984.772,565.424 985.332,559.486 985.891,565.45 986.45,587.288 987.009,593.643 987.569,598.552 988.128,587.583 988.687,575.738 989.246,565.599 989.806,586.612 990.365,606.941 990.924,593.822 991.483,601.827 992.043,593.525 992.602,614.697 993.161,620.181 993.72,626.262 994.28,646.061 994.839,633.245 995.398,653.973 995.957,672.036 996.517,687.745 997.076,670.727 997.635,672.931 998.194,674.484 998.754,677.696 999.313,679.643 999.872,665.634 1000.43,666.464 1000.99,688.327 1001.55,705.057 1002.11,704.833 1002.67,704.062 1003.23,705.686 1003.79,722.602 1004.35,688.763 1004.91,705.527 1005.46,721.613 1006.02,718.506 1006.58,734.981 1007.14,716.141 1007.7,748.341 1008.26,778.228 1008.82,741.864 1009.38,737.358 1009.94,748.272 1010.5,746.468 1011.06,776.125 1011.62,805.983 1012.18,781.249 1012.73,778.425 1013.29,755.58 1013.85,748.348 1014.41,727.357 1014.97,723.452 1015.53,734.162 1016.09,731.497 1016.65,728.166 1017.21,741.589 1017.77,689.91 1018.33,656.948 1018.89,626.514 1019.45,627.783 1020.01,600.528 1020.56,621.332 1021.12,640.999 1021.68,613.116 1022.24,615.97 1022.8,617.803 1023.36,620.07 1023.92,625.777 1024.48,645.634 1025.04,648.451 1025.6,634.461 1026.16,655.118 1026.72,686.539 1027.28,689.614 1027.83,690.23 1028.39,671.27 1028.95,703.745 1029.51,703.375 1030.07,700.832 1030.63,669.759 1031.19,652.187 1031.75,671.292 1032.31,650.577 1032.87,616.866 1033.43,605.856 1033.99,608.095 1034.55,576.271 1035.1,598.493 1035.66,603.988 1036.22,607.452 1036.78,610.466 1037.34,596.229 1037.9,618.055 1038.46,607.48 1039.02,627.459 1039.58,649.489 1040.14,685.047 1040.7,655.479 1041.26,656.378 1041.82,691.425 1042.38,692.039 1042.93,689.895 1043.49,692.524 1044.05,721.641 1044.61,736.386 1045.17,781.92 1045.73,794.311 1046.29,785.622 1046.85,782.565 1047.41,774.858 1047.97,770.038 1048.53,817.354 1049.09,808.873 1049.65,798.79 1050.2,794.266 1050.76,802.526 1051.32,794.003 1051.88,790.414 1052.44,752.769 1053,748.66 1053.56,725.478 1054.12,727.119 1054.68,725.357 1055.24,724.84 1055.8,693.165 1056.36,708.094 1056.92,740.159 1057.48,739.49 1058.03,701.674 1058.59,700.488 1059.15,679.489 1059.71,694.945 1060.27,739.194 1060.83,767.44 1061.39,776.131 1061.95,754.727 1062.51,746.921 1063.07,759.217 1063.63,787.906 1064.19,733.931 1064.75,747.096 1065.3,748.298 1065.86,728.884 1066.42,693.034 1066.98,660.938 1067.54,675.902 1068.1,674.861 1068.66,657.75 1069.22,662.038 1069.78,646.176 1070.34,665.137 1070.9,667.007 1071.46,666.647 1072.02,666.121 1072.57,651.183 1073.13,654.11 1073.69,671.963 1074.25,732.389 1074.81,729.463 1075.37,740.973 1075.93,706.158 1076.49,651.525 1077.05,640.084 1077.61,641.911 1078.17,645.79 1078.73,616.65 1079.29,606.174 1079.85,610.518 1080.4,611.171 1080.96,613.202 1081.52,616.237 1082.08,651.732 1082.64,635.871 1083.2,638.316 1083.76,641.968 1084.32,643.109 1084.88,646.187 1085.44,647.835 1086,651.734 1086.56,668.103 1087.12,670.496 1087.67,655.108 1088.23,668.964 1088.79,665.629 1089.35,666.219 1089.91,652.346 1090.47,652.147 1091.03,654.33 1091.59,671.33 1092.15,639.645 1092.71,643.473 1093.27,646.031 1093.83,643.876 1094.39,631.661 1094.94,635.178 1095.5,606.926 1096.06,625.24 1096.62,630.891 1097.18,682.035 1097.74,669.717 1098.3,655.101 1098.86,606.618 1099.42,612.264 1099.98,632.803 1100.54,619.676 1101.1,626.924 1101.66,630.981 1102.22,652.49 1102.77,605.774 1103.33,590.476 1103.89,611.249 1104.45,648.887 1105.01,652.713 1105.57,638.391 1106.13,653.701 1106.69,674.134 1107.25,688.669 1107.81,705.756 1108.37,721.061 1108.93,720.288 1109.49,749.365 1110.04,731.953 1110.6,745.638 1111.16,729.766 1111.72,742.224 1112.28,787.432 1112.84,799.477 1113.4,807.942 1113.96,803.118 1114.52,814.935 1115.08,807.816 1115.64,785.699 1116.2,796.595 1116.76,822.057 1117.31,813.266 1117.87,743.996 1118.43,724.23 1118.99,703.276 1119.55,656.848 1120.11,691.423 1120.67,686.36 1121.23,717.32 1121.79,702.315 1122.35,714.422 1122.91,712.622 1123.47,680.852 1124.03,728.607 1124.59,708.638 1125.14,704.939 1125.7,716.577 1126.26,694.761 1126.82,681.123 1127.38,712.178 1127.94,711.993 1128.5,725.632 1129.06,690.974 1129.62,661.829 1130.18,664.298 1130.74,683.388 1131.3,683.774 1131.86,697.696 1132.41,695.095 1132.97,724.905 1133.53,725.887 1134.09,707.793 1134.65,689.788 1135.21,738.109 1135.77,734.852 1136.33,711.756 1136.89,695.786 1137.45,680.396 1138.01,696.278 1138.57,696.071 1139.13,708.733 1139.68,709.132 1140.24,657.781 1140.8,626.793 1141.36,644.55 1141.92,696.365 1142.48,694.041 1143.04,679.611 1143.6,713.873 1144.16,761.732 1144.72,727.915 1145.28,678.273 1145.84,729.666 1146.4,728.362 1146.96,725.785 1147.51,744.34 1148.07,806.641 1148.63,787.927 1149.19,817.638 1149.75,828.31 1150.31,837.542 1150.87,846.239 1151.43,790.468 1151.99,786.272 1152.55,762.112 1153.11,742.088 1153.67,719.529 1154.23,716.21 1154.78,745.609 1155.34,756.119 1155.9,704.13 1156.46,730.268 1157.02,712.927 1157.58,694.604 1158.14,699.258 1158.7,699.926 1159.26,712.058 1159.82,709.605 1160.38,709.624 1160.94,736.429 1161.5,751.343 1162.05,751.421 1162.61,746.826 1163.17,771.899 1163.73,754.171 1164.29,752.03 1164.85,683.381 1165.41,681.395 1165.97,666.685 1166.53,679.64 1167.09,648.823 1167.65,682.622 1168.21,680.734 1168.77,680.274 1169.33,633.012 1169.88,621.596 1170.44,642.344 1171,644.141 1171.56,660.852 1172.12,646.491 1172.68,648.029 1173.24,697.674 1173.8,692.956 1174.36,709.966 1174.92,759.001 1175.48,752.259 1176.04,751.657 1176.6,716.116 1177.15,713.304 1177.71,715.425 1178.27,713.612 1178.83,664.48 1179.39,681.889 1179.95,699.035 1180.51,715.441 1181.07,713.631 1181.63,696.205 1182.19,695.636 1182.75,680.55 1183.31,663.892 1183.87,647.61 1184.43,645.426 1184.98,645.792 1185.54,647.601 1186.1,670.302 1186.66,620.081 1187.22,624.584 1187.78,630.003 1188.34,648.881 1188.9,632.307 1189.46,654.098 1190.02,655.076 1190.58,673.697 1191.14,658.381 1191.7,676.541 1192.25,724.103 1192.81,752.293 1193.37,749.883 1193.93,746.328 1194.49,745.206 1195.05,757.363 1195.61,814.908 1196.17,790.166 1196.73,803.414 1197.29,810.013 1197.85,787.14 1198.41,797.622 1198.97,775.933 1199.52,753.988 1200.08,750.325 1200.64,745.754 1201.2,706.66 1201.76,702.968 1202.32,700.322 1202.88,718.958 1203.44,699.715 1204,715.078 1204.56,678.649 1205.12,694.992 1205.68,677.108 1206.24,678.131 1206.8,694.847 1207.35,661.486 1207.91,597.232 1208.47,587.267 1209.03,627.124 1209.59,630.307 1210.15,681.79 1210.71,666.304 1211.27,668.068 1211.83,667.255 1212.39,688.6 1212.95,672.494 1213.51,734.971 1214.07,731.488 1214.62,730.596 1215.18,712.087 1215.74,696.205 1216.3,697.264 1216.86,683.561 1217.42,683.928 1217.98,686.47 1218.54,683.321 1219.1,666.526 1219.66,683.921 1220.22,683.565 1220.78,685.836 1221.34,685.552 1221.89,684.374 1222.45,715.74 1223.01,729.356 1223.57,742.217 1224.13,722.119 1224.69,750.07 1225.25,759.914 1225.81,754.636 1226.37,782.942 1226.93,761.855 1227.49,756.868 1228.05,757.112 1228.61,707.401 1229.17,689.632 1229.72,673.965 1230.28,672.826 1230.84,705.583 1231.4,685.837 1231.96,703.267 1232.52,734.722 1233.08,716.866 1233.64,698.121 1234.2,697.732 1234.76,694.912 1235.32,659.69 1235.88,659.411 1236.44,642.694 1236.99,663.284 1237.55,664.365 1238.11,612.176 1238.67,602.4 1239.23,589.973 1239.79,610.745 1240.35,630.953 1240.91,603.002 1241.47,572.352 1242.03,610.694 1242.59,611.957 1243.15,614.326 1243.71,652.35 1244.26,657.159 1244.82,705.727 1245.38,706.467 1245.94,675.125 1246.5,657.052 1247.06,691.756 1247.62,695.03 1248.18,698.694 1248.74,680.404 1249.3,663.594 1249.86,629.824 1250.42,633.701 1250.98,633.521 1251.54,652.156 1252.09,634.906 1252.65,607.945 1253.21,614.24 1253.77,601.97 1254.33,611.48 1254.89,612.844 1255.45,616.737 1256.01,620.947 1256.57,645.594 1257.13,635.41 1257.69,590.985 1258.25,550.338 1258.81,537.827 1259.36,546.75 1259.92,537.393 1260.48,551.316 1261.04,560.598 1261.6,565.09 1262.16,586.748 1262.72,576.635 1263.28,551.443 1263.84,580.676 1264.4,585.904 1264.96,592.128 1265.52,596.757 1266.08,636.488 1266.63,639.387 1267.19,641.071 1267.75,639.848 1268.31,662.684 1268.87,699.274 1269.43,699.412 1269.99,714.246 1270.55,715.333 1271.11,730.051 1271.67,761.95 1272.23,760.729 1272.79,756.587 1273.35,766.986 1273.91,796.475 1274.46,789.043 1275.02,767.771 1275.58,764.259 1276.14,777.549 1276.7,775.59 1277.26,776.09 1277.82,769.823 1278.38,754.1 1278.94,783.721 1279.5,780.855 1280.06,758.839 1280.62,740.251 1281.18,702.304 1281.73,720.747 1282.29,736.247 1282.85,701.07 1283.41,652.709 1283.97,668.924 1284.53,652.586 1285.09,651.836 1285.65,685.901 1286.21,698.326 1286.77,731.338 1287.33,743.947 1287.89,725.322 1288.45,728.582 1289,710.958 1289.56,695.486 1290.12,676.203 1290.68,689.837 1291.24,656.436 1291.8,657.377 1292.36,688.458 1292.92,667.88 1293.48,655.696 1294.04,670.421 1294.6,635.071 1295.16,670.694 1295.72,637.447 1296.28,640.085 1296.83,692.038 1297.39,678.447 1297.95,676.479 1298.51,690.285 1299.07,721.884 1299.63,719.494 1300.19,714.716 1300.75,698.435 1301.31,714.4 1301.87,713.408 1302.43,743.891 1302.99,722.961 1303.55,704.867 1304.1,704.653 1304.66,686.844 1305.22,654.676 1305.78,657.993 1306.34,608.573 1306.9,611.135 1307.46,631.314 1308.02,683.083 1308.58,698.721 1309.14,684.55 1309.7,700.568 1310.26,698.503 1310.82,681.707 1311.38,695.082 1311.93,694.636 1312.49,706.502 1313.05,719.401 1313.61,654.493 1314.17,670.74 1314.73,686.668 1315.29,704.486 1315.85,701.855 1316.41,698.839 1316.97,680.761 1317.53,682.914 1318.09,669.282 1318.65,685.722 1319.2,684.642 1319.76,683.112 1320.32,631.157 1320.88,649.783 1321.44,636.909 1322,637.133 1322.56,659.303 1323.12,661.997 1323.68,663.931 1324.24,652.81 1324.8,623.04 1325.36,629.339 1325.92,619.215 1326.47,627.162 1327.03,632.151 1327.59,637.343 1328.15,636.842 1328.71,623.051 1329.27,642.791 1329.83,625.564 1330.39,610.908 1330.95,600.718 1331.51,606.409 1332.07,608.988 1332.63,631.673 1333.19,600.633 1333.75,602.851 1334.3,609.835 1334.86,609.832 1335.42,600.212 1335.98,607.376 1336.54,595.493 1337.1,599.535 1337.66,621.874 1338.22,640.605 1338.78,640.181 1339.34,645.062 1339.9,626.1 1340.46,613.464 1341.02,646.397 1341.57,695.314 1342.13,694.276 1342.69,702.848 1343.25,685.657 1343.81,716.769 1344.37,711.845 1344.93,713.342 1345.49,730.88 1346.05,728.491 1346.61,707.854 1347.17,705.681 1347.73,755.85 1348.29,769.221 1348.84,780.341 1349.4,774.437 1349.96,801.449 1350.52,808.631 1351.08,786.516 1351.64,781.042 1352.2,775.467 1352.76,771.4 1353.32,765.148 1353.88,744.26 1354.44,707.773 1355,705.868 1355.56,717.872 1356.12,716.284 1356.67,682.994 1357.23,683.683 1357.79,697.636 1358.35,666.616 1358.91,705.008 1359.47,717.647 1360.03,728.283 1360.59,759.935 1361.15,771.276 1361.71,787.418 1362.27,752.378 1362.83,750.539 1363.39,764.076 1363.94,758.971 1364.5,756.304 1365.06,749.975 1365.62,666.458 1366.18,652.623 1366.74,669.781 1367.3,670.135 1367.86,685.933 1368.42,666.985 1368.98,638.304 1369.54,637.61 1370.1,622.02 1370.66,607.817 1371.21,627.938 1371.77,617.191 1372.33,637.57 1372.89,672.578 1373.45,706.49 1374.01,705.473 1374.57,701.496 1375.13,696.472 1375.69,715.686 1376.25,693.758 1376.81,726.532 1377.37,755.942 1377.93,767.622 1378.49,762.739 1379.04,760.196 1379.6,743.602 1380.16,712.691 1380.72,728.815 1381.28,742.739 1381.84,736.657 1382.4,699.277 1382.96,683.745 1383.52,667.098 1384.08,667.371 1384.64,683.93 1385.2,669.761 1385.76,667.732 1386.31,701.328 1386.87,699.249 1387.43,696.682 1387.99,696.316 1388.55,661.672 1389.11,648.163 1389.67,652.424 1390.23,671.719 1390.79,687.765 1391.35,704.024 1391.91,687.067 1392.47,703.825 1393.03,753.086 1393.58,702.233 1394.14,682.598 1394.7,666.102 1395.26,634.805 1395.82,650.613 1396.38,650.941 1396.94,653.98 1397.5,638.486 1398.06,640.486 1398.62,626.552 1399.18,629.838 1399.74,598.378 1400.3,605.19 1400.86,622.81 1401.41,623.961 1401.97,642.79 1402.53,644.498 1403.09,630.212 1403.65,617.243 1404.21,623.744 1404.77,626.918 1405.33,617.807 1405.89,604.437 1406.45,607.675 1407.01,628.347 1407.57,616.923 1408.13,636.607 1408.68,659.305 1409.24,660.046 1409.8,650.323 1410.36,668.725 1410.92,674.021 1411.48,678.288 1412.04,678.815 1412.6,660.742 1413.16,660.63 1413.72,680.405 1414.28,647.877 1414.84,672.301 1415.4,702.681 1415.95,689.42 1416.51,736.279 1417.07,731.943 1417.63,714.171 1418.19,696.545 1418.75,695.877 1419.31,662.902 1419.87,678.573 1420.43,680.135 1420.99,664.066 1421.55,664.625 1422.11,669.316 1422.67,687.267 1423.23,671.23 1423.78,684.981 1424.34,653.238 1424.9,702.482 1425.46,736.479 1426.02,750.24 1426.58,750.932 1427.14,747.376 1427.7,743.223 1428.26,757.661 1428.82,753.319 1429.38,796.468 1429.94,790.202 1430.5,795.525 1431.05,786.644 1431.61,780.575 1432.17,758.904 1432.73,771.182 1433.29,737.034 1433.85,736.345 1434.41,733.725 1434.97,730.48 1435.53,693.62 1436.09,658.089 1436.65,676.861 1437.21,709.689 1437.77,722.376 1438.33,701.295 1438.88,715.342 1439.44,744.443 1440,724.327 1440.56,725.79 1441.12,738.673 1441.68,749.3 1442.24,764.258 1442.8,757.891 1443.36,785.364 1443.92,779.189 1444.48,789.844 1445.04,816.911 1445.6,795.615 1446.15,803.158 1446.71,830.166 1447.27,824.129 1447.83,800.089 1448.39,779.101 1448.95,820.259 1449.51,780.946 1450.07,743.03 1450.63,773.714 1451.19,751.739 1451.75,781.56 1452.31,778.089 1452.87,786.959 1453.42,782.747 1453.98,729.234 1454.54,725.09 1455.1,678.939 1455.66,681.624 1456.22,632.847 1456.78,636.038 1457.34,656.13 1457.9,655.167 1458.46,656.13 1459.02,659.352 1459.58,663.124 1460.14,671.443 1460.7,689.044 1461.25,688.445 1461.81,671.837 1462.37,670.552 1462.93,669.038 1463.49,635.875 1464.05,638.129 1464.61,608.815 1465.17,626.476 1465.73,625.671 1466.29,631.177 1466.85,646.664 1467.41,668.356 1467.97,635.019 1468.52,668.417 1469.08,666.864 1469.64,667.994 1470.2,701.701 1470.76,699.638 1471.32,679.414 1471.88,679.764 1472.44,647.922 1473,601.932 1473.56,590.426 1474.12,564.433 1474.68,540.074 1475.24,548.127 1475.79,552.834 1476.35,537.411 1476.91,512.115 1477.47,539.558 1478.03,546.338 1478.59,503.847 1479.15,512.843 1479.71,486.71 1480.27,450.573 1480.83,480.468 1481.39,505.901 1481.95,546.752 1482.51,586.608 1483.07,593.277 1483.62,595.877 1484.18,571.941 1484.74,563.171 1485.3,585.348 1485.86,592.455 1486.42,615.718 1486.98,615.179 1487.54,633.585 1488.1,603.929 1488.66,625.342 1489.22,660.697 1489.78,662.159 1490.34,648.273 1490.89,666.928 1491.45,650.201 1492.01,637.777 1492.57,638.651 1493.13,639.706 1493.69,676.159 1494.25,694.18 1494.81,709.127 1495.37,722.402 1495.93,704.895 1496.49,767.112 1497.05,811.843 1497.61,754.3 1498.16,783.581 1498.72,762.76 1499.28,762.639 1499.84,725.657 1500.4,723.858 1500.96,693.767 1501.52,725.47 1502.08,709.646 1502.64,708.697 1503.2,725.36 1503.76,722.571 1504.32,720.897 1504.88,717.894 1505.44,683.734 1505.99,701.781 1506.55,731.687 1507.11,743.606 1507.67,758.197 1508.23,737.702 1508.79,705.319 1509.35,706.693 1509.91,700.27 1510.47,718.63 1511.03,748.978 1511.59,747.661 1512.15,726.908 1512.71,756.838 1513.26,754.241 1513.82,734.63 1514.38,728.271 1514.94,708.413 1515.5,737.905 1516.06,752.002 1516.62,763.309 1517.18,724.747 1517.74,721.046 1518.3,699.984 1518.86,717.021 1519.42,685.915 1519.98,638.949 1520.53,658.265 1521.09,660.121 1521.65,699.255 1522.21,693.922 1522.77,708.619 1523.33,725.853 1523.89,706.556 1524.45,705.646 1525.01,707.072 1525.57,706.753 1526.13,738.44 1526.69,750.952 1527.25,733.004 1527.81,696.029 1528.36,728.412 1528.92,693.259 1529.48,707.058 1530.04,673.155 1530.6,691.215 1531.16,690.464 1531.72,691.415 1532.28,688.157 1532.84,686.144 1533.4,652.398 1533.96,652.355 1534.52,668.979 1535.08,672.425 1535.63,620.802 1536.19,656.329 1536.75,641.384 1537.31,580.342 1537.87,582.932 1538.43,606.266 1538.99,625.498 1539.55,626.202 1540.11,631.299 1540.67,633.566 1541.23,603.914 1541.79,625.69 1542.35,629.708 1542.9,668.591 1543.46,670.176 1544.02,673.34 1544.58,656.435 1545.14,675.388 1545.7,646.11 1546.26,647.669 1546.82,649.079 1547.38,651.315 1547.94,637.88 1548.5,653.877 1549.06,674.277 1549.62,657.893 1550.18,672.078 1550.73,687.133 1551.29,688.108 1551.85,656.279 1552.41,688.703 1552.97,689.725 1553.53,670.944 1554.09,687.638 1554.65,691.047 1555.21,706.391 1555.77,720.361 1556.33,733.071 1556.89,776.231 1557.45,769.831 1558,747.77 1558.56,743.862 1559.12,739.447 1559.68,720.807 1560.24,718.977 1560.8,736.621 1561.36,767.495 1561.92,780.285 1562.48,741.254 1563.04,719.347 1563.6,716.019 1564.16,713.614 1564.72,694.355 1565.28,694.925 1565.83,628.906 1566.39,629.387 1566.95,612.291 1567.51,614.092 1568.07,618.385 1568.63,638.732 1569.19,643.059 1569.75,647.343 1570.31,666.848 1570.87,702.848 1571.43,686.256 1571.99,715.185 1572.55,694.726 1573.1,679.566 1573.66,661.732 1574.22,646.843 1574.78,680.306 1575.34,664.395 1575.9,664.627 1576.46,649.613 1577.02,650.62 1577.58,655.969 1578.14,689.107 1578.7,671.738 1579.26,689.667 1579.82,691.558 1580.37,688.905 1580.93,706.251 1581.49,704.435 1582.05,732.699 1582.61,745.544 1583.17,737.306 1583.73,701.023 1584.29,729.854 1584.85,740.941 1585.41,737.209 1585.97,748.648 1586.53,745.412 1587.09,729.364 1587.65,707.918 1588.2,674.608 1588.76,625.112 1589.32,640.759 1589.88,610.222 1590.44,627.954 1591,630.65 1591.56,598.064 1592.12,601.026 1592.68,590.961 1593.24,611.915 1593.8,565.609 1594.36,570.902 1594.92,591.751 1595.47,598.005 1596.03,586.826 1596.59,609.258 1597.15,659.667 1597.71,665.236 1598.27,682.218 1598.83,650.445 1599.39,638.376 1599.95,622.086 1600.51,622.046 1601.07,625.017 1601.63,626.846 1602.19,673.9 1602.74,675.015 1603.3,709.338 1603.86,726.338 1604.42,675.109 1604.98,674.351 1605.54,673.203 1606.1,704.685 1606.66,704.453 1607.22,705.779 1607.78,666.822 1608.34,649.179 1608.9,635.496 1609.46,620.35 1610.02,626.181 1610.57,613.378 1611.13,555.567 1611.69,528.092 1612.25,537.353 1612.81,560.472 1613.37,551.818 1613.93,577.037 1614.49,600.797 1615.05,607.223 1615.61,607.224 1616.17,644.671 1616.73,659.018 1617.29,661.304 1617.84,648.273 1618.4,615.695 1618.96,635.313 1619.52,638.26 1620.08,645.087 1620.64,645.196 1621.2,613.521 1621.76,601.781 1622.32,605.422 1622.88,591.773 1623.44,583.281 1624,605.037 1624.56,607.753 1625.11,596.593 1625.67,636.914 1626.23,643.375 1626.79,664.721 1627.35,698.07 1627.91,714.735 1628.47,712.563 1629.03,724.554 1629.59,723.93 1630.15,723.003 1630.71,719.409 1631.27,717.532 1631.83,697.513 1632.39,725.211 1632.94,709.118 1633.5,723.053 1634.06,736.896 1634.62,736.324 1635.18,784.09 1635.74,794.365 1636.3,789.944 1636.86,755.618 1637.42,751.953 1637.98,734.742 1638.54,734.525 1639.1,699.829 1639.66,713.965 1640.21,733.268 1640.77,698.235 1641.33,699.98 1641.89,681.402 1642.45,696.622 1643.01,693.571 1643.57,708.498 1644.13,675.275 1644.69,672.738 1645.25,654.688 1645.81,639.236 1646.37,624.411 1646.93,627.43 1647.48,632.956 1648.04,634.216 1648.6,619.672 1649.16,607.838 1649.72,628.158 1650.28,665.812 1650.84,682.741 1651.4,683.988 1651.96,667.61 1652.52,605.123 1653.08,641.097 1653.64,694.781 1654.2,709.145 1654.76,704.669 1655.31,721.086 1655.87,737.917 1656.43,738.181 1656.99,736.771 1657.55,717.95 1658.11,719.914 1658.67,753.533 1659.23,781.389 1659.79,774.587 1660.35,786.194 1660.91,778.384 1661.47,772.025 1662.03,750.268 1662.58,761.632 1663.14,741.448 1663.7,755.487 1664.26,732.622 1664.82,748.399 1665.38,728.444 1665.94,724.206 1666.5,736.859 1667.06,718.523 1667.62,719.972 1668.18,735.58 1668.74,763.004 1669.3,775.628 1669.85,721.789 1670.41,702.231 1670.97,684.487 1671.53,729.429 1672.09,740.388 1672.65,740.061 1673.21,738.105 1673.77,716.981 1674.33,680.596 1674.89,712.836 1675.45,713.635 1676.01,724.932 1676.57,743.308 1677.13,721.953 1677.68,700.451 1678.24,730.148 1678.8,729.005 1679.36,725.789 1679.92,738.516 1680.48,703.671 1681.04,706.234 1681.6,705.01 1682.16,723.762 1682.72,705.237 1683.28,715.112 1683.84,714.506 1684.4,696.444 1684.95,680.59 1685.51,680.843 1686.07,697.601 1686.63,698.439 1687.19,666.636 1687.75,669.745 1688.31,685.378 1688.87,681.032 1689.43,708.712 1689.99,692.796 1690.55,690.148 1691.11,708.917 1691.67,740.79 1692.23,734.087 1692.78,714.14 1693.34,728.855 1693.9,724.094 1694.46,723.872 1695.02,720.902 1695.58,719.819 1696.14,702.911 1696.7,705.89 1697.26,704.767 1697.82,667.995 1698.38,653.406 1698.94,656.334 1699.5,641.737 1700.05,614.863 1700.61,618.065 1701.17,637.617 1701.73,653.422 1702.29,654.927 1702.85,672.634 1703.41,675.777 1703.97,692.482 1704.53,689.191 1705.09,702.843 1705.65,703.442 1706.21,717.167 1706.77,700.122 1707.32,684.658 1707.88,683.659 1708.44,684.695 1709,652.795 1709.56,655.398 1710.12,705.443 1710.68,689.061 1711.24,689.054 1711.8,686.302 1712.36,672.262 1712.92,687.42 1713.48,668.824 1714.04,657.356 1714.6,642.561 1715.15,659.653 1715.71,639.686 1716.27,661.493 1716.83,647.805 1717.39,653.508 1717.95,702.244 1718.51,721.133 1719.07,734.942 1719.63,711.22 1720.19,740.046 1720.75,752.765 1721.31,736.28 1721.87,716.065 1722.42,695.631 1722.98,679.2 1723.54,663.971 1724.1,649.814 1724.66,632.551 1725.22,648.586 1725.78,635.501 1726.34,622.432 1726.9,595.84 1727.46,599.253 1728.02,557.677 1728.58,579.093 1729.14,572.181 1729.69,577.52 1730.25,596.517 1730.81,615.059 1731.37,569.653 1731.93,589.344 1732.49,578.782 1733.05,569.64 1733.61,606.49 1734.17,575.891 1734.73,596.259 1735.29,617.186 1735.85,604.887 1736.41,608.828 1736.97,661.544 1737.52,648.71 1738.08,651.688 1738.64,685.078 1739.2,666.838 1739.76,681.722 1740.32,699.785 1740.88,714.229 1741.44,713.426 1742,710.943 1742.56,694.4 1743.12,694.162 1743.68,689.349 1744.24,687.956 1744.79,670.947 1745.35,690.175 1745.91,688.337 1746.47,673.343 1747.03,674.522 1747.59,674.166 1748.15,692.482 1748.71,724.625 1749.27,740.697 1749.83,757.071 1750.39,739.374 1750.95,783.774 1751.51,793.223 1752.06,773.425 1752.62,772.223 1753.18,755.173 1753.74,767.53 1754.3,746.751 1754.86,763.018 1755.42,791.814 1755.98,819.454 1756.54,814.955 1757.1,821.598 1757.66,781.894 1758.22,754.965 1758.78,737.78 1759.34,734.516 1759.89,732.937 1760.45,758.981 1761.01,721.906 1761.57,721.19 1762.13,753.359 1762.69,734.443 1763.25,733.518 1763.81,746.406 1764.37,746.062 1764.93,745.132 1765.49,741.782 1766.05,737.413 1766.61,752.689 1767.16,748.827 1767.72,758.428 1768.28,754.425 1768.84,748.514 1769.4,730.14 1769.96,730.361 1770.52,694.133 1771.08,710.984 1771.64,695.865 1772.2,629.319 1772.76,617.328 1773.32,604.145 1773.88,594.326 1774.43,580.158 1774.99,617.679 1775.55,623.202 1776.11,609.746 1776.67,613.009 1777.23,616.772 1777.79,636.181 1778.35,625.62 1778.91,631.758 1779.47,587.419 1780.03,561.323 1780.59,569.469 1781.15,576.557 1781.71,566.833 1782.26,560.393 1782.82,582.527 1783.38,605.477 1783.94,640.473 1784.5,627.238 1785.06,628.114 1785.62,613.595 1786.18,618.699 1786.74,624.214 1787.3,612.04 1787.86,635.005 1788.42,637.001 1788.98,671.632 1789.53,686.194 1790.09,688.241 1790.65,740.246 1791.21,752.37 1791.77,717.15 1792.33,749.981 1792.89,747.922 1793.45,743.94 1794.01,725.281 1794.57,723.63 1795.13,721.209 1795.69,703.897 1796.25,706.679 1796.8,687.889 1797.36,658.181 1797.92,643.882 1798.48,647.364 1799.04,651.819 1799.6,641.379 1800.16,594.988 1800.72,600.89 1801.28,599.808 1801.84,637.82 1802.4,636.135 1802.96,623.879 1803.52,626.353 1804.08,612.408 1804.63,599.752 1805.19,591.026 1805.75,611.308 1806.31,583.688 1806.87,589.464 1807.43,590.824 1807.99,598.493 1808.55,605.733 1809.11,626.157 1809.67,627.942 1810.23,649.244 1810.79,647.904 1811.35,664.598 1811.9,667.385 1812.46,639.699 1813.02,657.57 1813.58,674.973 1814.14,660.274 1814.7,659.892 1815.26,663.395 1815.82,665.489 1816.38,646.446 1816.94,630.831 1817.5,636.462 1818.06,641.618 1818.62,626.489 1819.18,643.683 1819.73,628.794 1820.29,632.306 1820.85,635.792 1821.41,640.974 1821.97,645.167 1822.53,676.567 1823.09,659.332 1823.65,675.152 1824.21,673.445 1824.77,692.506 1825.33,708.979 1825.89,690.622 1826.45,674.588 1827,689.698 1827.56,674.63 1828.12,707.853 1828.68,693.96 1829.24,679.115 1829.8,663.094 1830.36,679.479 1830.92,677.476 1831.48,676.665 1832.04,687.882 1832.6,666.435 1833.16,668.682 1833.72,669.485 1834.27,687.138 1834.83,688.187 1835.39,723.184 1835.95,787.438 1836.51,750.738 1837.07,713.589 1837.63,683.434 1838.19,670.201 \"/>\n<path clip-path=\"url(#clip763)\" d=\"M720.247 690.314 L720.806 690.314 L721.365 690.314 L721.924 690.314 L722.484 690.314 L723.043 690.314 L723.602 690.314 L724.161 690.314 L724.721 690.314 L725.28 690.314 L725.839 690.314 L726.398 690.314 L726.958 690.314 L727.517 690.314 L728.076 690.314 L728.635 690.314 L729.195 690.314 L729.754 690.314 L730.313 690.314 L730.872 690.314 L731.432 690.314 L731.991 690.314 L732.55 690.314 L733.109 690.314 L733.669 690.314 L734.228 690.314 L734.787 690.314 L735.346 690.314 L735.906 690.314 L736.465 690.314 L737.024 690.314 L737.583 690.314 L738.143 690.314 L738.702 690.314 L739.261 690.314 L739.82 690.314 L740.38 690.314 L740.939 690.314 L741.498 690.314 L742.057 690.314 L742.617 690.314 L743.176 690.314 L743.735 690.314 L744.294 690.314 L744.854 690.314 L745.413 690.314 L745.972 690.314 L746.531 690.314 L747.091 690.314 L747.65 690.314 L748.209 690.314 L748.768 690.314 L749.328 690.314 L749.887 690.314 L750.446 690.314 L751.005 690.314 L751.565 690.314 L752.124 690.314 L752.683 690.314 L753.242 690.314 L753.802 690.314 L754.361 690.314 L754.92 690.314 L755.479 690.314 L756.039 690.314 L756.598 690.314 L757.157 690.314 L757.716 690.314 L758.276 690.314 L758.835 690.314 L759.394 690.314 L759.953 690.314 L760.513 690.314 L761.072 690.314 L761.631 690.314 L762.19 690.314 L762.75 690.314 L763.309 690.314 L763.868 690.314 L764.427 690.314 L764.987 690.314 L765.546 690.314 L766.105 690.314 L766.664 690.314 L767.224 690.314 L767.783 690.314 L768.342 690.314 L768.901 690.314 L769.461 690.314 L770.02 690.314 L770.579 690.314 L771.138 690.314 L771.698 690.314 L772.257 690.314 L772.816 690.314 L773.375 690.314 L773.935 690.314 L774.494 690.314 L775.053 690.314 L775.612 690.314 L776.172 690.314 L776.731 690.314 L777.29 690.314 L777.849 690.314 L778.409 690.314 L778.968 690.314 L779.527 690.314 L780.086 690.314 L780.646 690.314 L781.205 690.314 L781.764 690.314 L782.323 690.314 L782.883 690.314 L783.442 690.314 L784.001 690.314 L784.56 690.314 L785.12 690.314 L785.679 690.314 L786.238 690.314 L786.797 690.314 L787.357 690.314 L787.916 690.314 L788.475 690.314 L789.034 690.314 L789.594 690.314 L790.153 690.314 L790.712 690.314 L791.271 690.314 L791.831 690.314 L792.39 690.314 L792.949 690.314 L793.508 690.314 L794.068 690.314 L794.627 690.314 L795.186 690.314 L795.745 690.314 L796.305 690.314 L796.864 690.314 L797.423 690.314 L797.982 690.314 L798.542 690.314 L799.101 690.314 L799.66 690.314 L800.219 690.314 L800.779 690.314 L801.338 690.314 L801.897 690.314 L802.456 690.314 L803.016 690.314 L803.575 690.314 L804.134 690.314 L804.693 690.314 L805.253 690.314 L805.812 690.314 L806.371 690.314 L806.931 690.314 L807.49 690.314 L808.049 690.314 L808.608 690.314 L809.168 690.314 L809.727 690.314 L810.286 690.314 L810.845 690.314 L811.405 690.314 L811.964 690.314 L812.523 690.314 L813.082 690.314 L813.642 690.314 L814.201 690.314 L814.76 690.314 L815.319 690.314 L815.879 690.314 L816.438 690.314 L816.997 690.314 L817.556 690.314 L818.116 690.314 L818.675 690.314 L819.234 690.314 L819.793 690.314 L820.353 690.314 L820.912 690.314 L821.471 690.314 L822.03 690.314 L822.59 690.314 L823.149 690.314 L823.708 690.314 L824.267 690.314 L824.827 690.314 L825.386 690.314 L825.945 690.314 L826.504 690.314 L827.064 690.314 L827.623 690.314 L828.182 690.314 L828.741 690.314 L829.301 690.314 L829.86 690.314 L830.419 690.314 L830.978 690.314 L831.538 690.314 L832.097 690.314 L832.656 690.314 L833.215 690.314 L833.775 690.314 L834.334 690.314 L834.893 690.314 L835.452 690.314 L836.012 690.314 L836.571 690.314 L837.13 690.314 L837.689 690.314 L838.249 690.314 L838.808 690.314 L839.367 690.314 L839.926 690.314 L840.486 690.314 L841.045 690.314 L841.604 690.314 L842.163 690.314 L842.723 690.314 L843.282 690.314 L843.841 690.314 L844.4 690.314 L844.96 690.314 L845.519 690.314 L846.078 690.314 L846.637 690.314 L847.197 690.314 L847.756 690.314 L848.315 690.314 L848.874 690.314 L849.434 690.314 L849.993 690.314 L850.552 690.314 L851.111 690.314 L851.671 690.314 L852.23 690.314 L852.789 690.314 L853.348 690.314 L853.908 690.314 L854.467 690.314 L855.026 690.314 L855.585 690.314 L856.145 690.314 L856.704 690.314 L857.263 690.314 L857.822 690.314 L858.382 690.314 L858.941 690.314 L859.5 690.314 L860.059 690.314 L860.619 690.314 L861.178 690.314 L861.737 690.314 L862.296 690.314 L862.856 690.314 L863.415 690.314 L863.974 690.314 L864.533 690.314 L865.093 690.314 L865.652 690.314 L866.211 690.314 L866.77 690.314 L867.33 690.314 L867.889 690.314 L868.448 690.314 L869.007 690.314 L869.567 690.314 L870.126 690.314 L870.685 690.314 L871.244 690.314 L871.804 690.314 L872.363 690.314 L872.922 690.314 L873.481 690.314 L874.041 690.314 L874.6 690.314 L875.159 690.314 L875.718 690.314 L876.278 690.314 L876.837 690.314 L877.396 690.314 L877.955 690.314 L878.515 690.314 L879.074 690.314 L879.633 690.314 L880.192 690.314 L880.752 690.314 L881.311 690.314 L881.87 690.314 L882.429 690.314 L882.989 690.314 L883.548 690.314 L884.107 690.314 L884.666 690.314 L885.226 690.314 L885.785 690.314 L886.344 690.314 L886.903 690.314 L887.463 690.314 L888.022 690.314 L888.581 690.314 L889.14 690.314 L889.7 690.314 L890.259 690.314 L890.818 690.314 L891.377 690.314 L891.937 690.314 L892.496 690.314 L893.055 690.314 L893.614 690.314 L894.174 690.314 L894.733 690.314 L895.292 690.314 L895.851 690.314 L896.411 690.314 L896.97 690.314 L897.529 690.314 L898.088 690.314 L898.648 690.314 L899.207 690.314 L899.766 690.314 L900.325 690.314 L900.885 690.314 L901.444 690.314 L902.003 690.314 L902.562 690.314 L903.122 690.314 L903.681 690.314 L904.24 690.314 L904.799 690.314 L905.359 690.314 L905.918 690.314 L906.477 690.314 L907.036 690.314 L907.596 690.314 L908.155 690.314 L908.714 690.314 L909.273 690.314 L909.833 690.314 L910.392 690.314 L910.951 690.314 L911.51 690.314 L912.07 690.314 L912.629 690.314 L913.188 690.314 L913.747 690.314 L914.307 690.314 L914.866 690.314 L915.425 690.314 L915.984 690.314 L916.544 690.314 L917.103 690.314 L917.662 690.314 L918.221 690.314 L918.781 690.314 L919.34 690.314 L919.899 690.314 L920.458 690.314 L921.018 690.314 L921.577 690.314 L922.136 690.314 L922.695 690.314 L923.255 690.314 L923.814 690.314 L924.373 690.314 L924.932 690.314 L925.492 690.314 L926.051 690.314 L926.61 690.314 L927.169 690.314 L927.729 690.314 L928.288 690.314 L928.847 690.314 L929.406 690.314 L929.966 690.314 L930.525 690.314 L931.084 690.314 L931.644 690.314 L932.203 690.314 L932.762 690.314 L933.321 690.314 L933.881 690.314 L934.44 690.314 L934.999 690.314 L935.558 690.314 L936.118 690.314 L936.677 690.314 L937.236 690.314 L937.795 690.314 L938.355 690.314 L938.914 690.314 L939.473 690.314 L940.032 690.314 L940.592 690.314 L941.151 690.314 L941.71 690.314 L942.269 690.314 L942.829 690.314 L943.388 690.314 L943.947 690.314 L944.506 690.314 L945.066 690.314 L945.625 690.314 L946.184 690.314 L946.743 690.314 L947.303 690.314 L947.862 690.314 L948.421 690.314 L948.98 690.314 L949.54 690.314 L950.099 690.314 L950.658 690.314 L951.217 690.314 L951.777 690.314 L952.336 690.314 L952.895 690.314 L953.454 690.314 L954.014 690.314 L954.573 690.314 L955.132 690.314 L955.691 690.314 L956.251 690.314 L956.81 690.314 L957.369 690.314 L957.928 690.314 L958.488 690.314 L959.047 690.314 L959.606 690.314 L960.165 690.314 L960.725 690.314 L961.284 690.314 L961.843 690.314 L962.402 690.314 L962.962 690.314 L963.521 690.314 L964.08 690.314 L964.639 690.314 L965.199 690.314 L965.758 690.314 L966.317 690.314 L966.876 690.314 L967.436 690.314 L967.995 690.314 L968.554 690.314 L969.113 690.314 L969.673 690.314 L970.232 690.314 L970.791 690.314 L971.35 690.314 L971.91 690.314 L972.469 690.314 L973.028 690.314 L973.587 690.314 L974.147 690.314 L974.706 690.314 L975.265 690.314 L975.824 690.314 L976.384 690.314 L976.943 690.314 L977.502 690.314 L978.061 690.314 L978.621 690.314 L979.18 690.314 L979.739 690.314 L980.298 690.314 L980.858 690.314 L981.417 690.314 L981.976 690.314 L982.535 690.314 L983.095 690.314 L983.654 690.314 L984.213 690.314 L984.772 690.314 L985.332 690.314 L985.891 690.314 L986.45 690.314 L987.009 690.314 L987.569 690.314 L988.128 690.314 L988.687 690.314 L989.246 690.314 L989.806 690.314 L990.365 690.314 L990.924 690.314 L991.483 690.314 L992.043 690.314 L992.602 690.314 L993.161 690.314 L993.72 690.314 L994.28 690.314 L994.839 690.314 L995.398 690.314 L995.957 690.314 L996.517 690.314 L997.076 690.314 L997.635 690.314 L998.194 690.314 L998.754 690.314 L999.313 690.314 L999.872 690.314 L1000.43 690.314 L1000.99 690.314 L1001.55 690.314 L1002.11 690.314 L1002.67 690.314 L1003.23 690.314 L1003.79 690.314 L1004.35 690.314 L1004.91 690.314 L1005.46 690.314 L1006.02 690.314 L1006.58 690.314 L1007.14 690.314 L1007.7 690.314 L1008.26 690.314 L1008.82 690.314 L1009.38 690.314 L1009.94 690.314 L1010.5 690.314 L1011.06 690.314 L1011.62 690.314 L1012.18 690.314 L1012.73 690.314 L1013.29 690.314 L1013.85 690.314 L1014.41 690.314 L1014.97 690.314 L1015.53 690.314 L1016.09 690.314 L1016.65 690.314 L1017.21 690.314 L1017.77 690.314 L1018.33 690.314 L1018.89 690.314 L1019.45 690.314 L1020.01 690.314 L1020.56 690.314 L1021.12 690.314 L1021.68 690.314 L1022.24 690.314 L1022.8 690.314 L1023.36 690.314 L1023.92 690.314 L1024.48 690.314 L1025.04 690.314 L1025.6 690.314 L1026.16 690.314 L1026.72 690.314 L1027.28 690.314 L1027.83 690.314 L1028.39 690.314 L1028.95 690.314 L1029.51 690.314 L1030.07 690.314 L1030.63 690.314 L1031.19 690.314 L1031.75 690.314 L1032.31 690.314 L1032.87 690.314 L1033.43 690.314 L1033.99 690.314 L1034.55 690.314 L1035.1 690.314 L1035.66 690.314 L1036.22 690.314 L1036.78 690.314 L1037.34 690.314 L1037.9 690.314 L1038.46 690.314 L1039.02 690.314 L1039.58 690.314 L1040.14 690.314 L1040.7 690.314 L1041.26 690.314 L1041.82 690.314 L1042.38 690.314 L1042.93 690.314 L1043.49 690.314 L1044.05 690.314 L1044.61 690.314 L1045.17 690.314 L1045.73 690.314 L1046.29 690.314 L1046.85 690.314 L1047.41 690.314 L1047.97 690.314 L1048.53 690.314 L1049.09 690.314 L1049.65 690.314 L1050.2 690.314 L1050.76 690.314 L1051.32 690.314 L1051.88 690.314 L1052.44 690.314 L1053 690.314 L1053.56 690.314 L1054.12 690.314 L1054.68 690.314 L1055.24 690.314 L1055.8 690.314 L1056.36 690.314 L1056.92 690.314 L1057.48 690.314 L1058.03 690.314 L1058.59 690.314 L1059.15 690.314 L1059.71 690.314 L1060.27 690.314 L1060.83 690.314 L1061.39 690.314 L1061.95 690.314 L1062.51 690.314 L1063.07 690.314 L1063.63 690.314 L1064.19 690.314 L1064.75 690.314 L1065.3 690.314 L1065.86 690.314 L1066.42 690.314 L1066.98 690.314 L1067.54 690.314 L1068.1 690.314 L1068.66 690.314 L1069.22 690.314 L1069.78 690.314 L1070.34 690.314 L1070.9 690.314 L1071.46 690.314 L1072.02 690.314 L1072.57 690.314 L1073.13 690.314 L1073.69 690.314 L1074.25 690.314 L1074.81 690.314 L1075.37 690.314 L1075.93 690.314 L1076.49 690.314 L1077.05 690.314 L1077.61 690.314 L1078.17 690.314 L1078.73 690.314 L1079.29 690.314 L1079.85 690.314 L1080.4 690.314 L1080.96 690.314 L1081.52 690.314 L1082.08 690.314 L1082.64 690.314 L1083.2 690.314 L1083.76 690.314 L1084.32 690.314 L1084.88 690.314 L1085.44 690.314 L1086 690.314 L1086.56 690.314 L1087.12 690.314 L1087.67 690.314 L1088.23 690.314 L1088.79 690.314 L1089.35 690.314 L1089.91 690.314 L1090.47 690.314 L1091.03 690.314 L1091.59 690.314 L1092.15 690.314 L1092.71 690.314 L1093.27 690.314 L1093.83 690.314 L1094.39 690.314 L1094.94 690.314 L1095.5 690.314 L1096.06 690.314 L1096.62 690.314 L1097.18 690.314 L1097.74 690.314 L1098.3 690.314 L1098.86 690.314 L1099.42 690.314 L1099.98 690.314 L1100.54 690.314 L1101.1 690.314 L1101.66 690.314 L1102.22 690.314 L1102.77 690.314 L1103.33 690.314 L1103.89 690.314 L1104.45 690.314 L1105.01 690.314 L1105.57 690.314 L1106.13 690.314 L1106.69 690.314 L1107.25 690.314 L1107.81 690.314 L1108.37 690.314 L1108.93 690.314 L1109.49 690.314 L1110.04 690.314 L1110.6 690.314 L1111.16 690.314 L1111.72 690.314 L1112.28 690.314 L1112.84 690.314 L1113.4 690.314 L1113.96 690.314 L1114.52 690.314 L1115.08 690.314 L1115.64 690.314 L1116.2 690.314 L1116.76 690.314 L1117.31 690.314 L1117.87 690.314 L1118.43 690.314 L1118.99 690.314 L1119.55 690.314 L1120.11 690.314 L1120.67 690.314 L1121.23 690.314 L1121.79 690.314 L1122.35 690.314 L1122.91 690.314 L1123.47 690.314 L1124.03 690.314 L1124.59 690.314 L1125.14 690.314 L1125.7 690.314 L1126.26 690.314 L1126.82 690.314 L1127.38 690.314 L1127.94 690.314 L1128.5 690.314 L1129.06 690.314 L1129.62 690.314 L1130.18 690.314 L1130.74 690.314 L1131.3 690.314 L1131.86 690.314 L1132.41 690.314 L1132.97 690.314 L1133.53 690.314 L1134.09 690.314 L1134.65 690.314 L1135.21 690.314 L1135.77 690.314 L1136.33 690.314 L1136.89 690.314 L1137.45 690.314 L1138.01 690.314 L1138.57 690.314 L1139.13 690.314 L1139.68 690.314 L1140.24 690.314 L1140.8 690.314 L1141.36 690.314 L1141.92 690.314 L1142.48 690.314 L1143.04 690.314 L1143.6 690.314 L1144.16 690.314 L1144.72 690.314 L1145.28 690.314 L1145.84 690.314 L1146.4 690.314 L1146.96 690.314 L1147.51 690.314 L1148.07 690.314 L1148.63 690.314 L1149.19 690.314 L1149.75 690.314 L1150.31 690.314 L1150.87 690.314 L1151.43 690.314 L1151.99 690.314 L1152.55 690.314 L1153.11 690.314 L1153.67 690.314 L1154.23 690.314 L1154.78 690.314 L1155.34 690.314 L1155.9 690.314 L1156.46 690.314 L1157.02 690.314 L1157.58 690.314 L1158.14 690.314 L1158.7 690.314 L1159.26 690.314 L1159.82 690.314 L1160.38 690.314 L1160.94 690.314 L1161.5 690.314 L1162.05 690.314 L1162.61 690.314 L1163.17 690.314 L1163.73 690.314 L1164.29 690.314 L1164.85 690.314 L1165.41 690.314 L1165.97 690.314 L1166.53 690.314 L1167.09 690.314 L1167.65 690.314 L1168.21 690.314 L1168.77 690.314 L1169.33 690.314 L1169.88 690.314 L1170.44 690.314 L1171 690.314 L1171.56 690.314 L1172.12 690.314 L1172.68 690.314 L1173.24 690.314 L1173.8 690.314 L1174.36 690.314 L1174.92 690.314 L1175.48 690.314 L1176.04 690.314 L1176.6 690.314 L1177.15 690.314 L1177.71 690.314 L1178.27 690.314 L1178.83 690.314 L1179.39 690.314 L1179.95 690.314 L1180.51 690.314 L1181.07 690.314 L1181.63 690.314 L1182.19 690.314 L1182.75 690.314 L1183.31 690.314 L1183.87 690.314 L1184.43 690.314 L1184.98 690.314 L1185.54 690.314 L1186.1 690.314 L1186.66 690.314 L1187.22 690.314 L1187.78 690.314 L1188.34 690.314 L1188.9 690.314 L1189.46 690.314 L1190.02 690.314 L1190.58 690.314 L1191.14 690.314 L1191.7 690.314 L1192.25 690.314 L1192.81 690.314 L1193.37 690.314 L1193.93 690.314 L1194.49 690.314 L1195.05 690.314 L1195.61 690.314 L1196.17 690.314 L1196.73 690.314 L1197.29 690.314 L1197.85 690.314 L1198.41 690.314 L1198.97 690.314 L1199.52 690.314 L1200.08 690.314 L1200.64 690.314 L1201.2 690.314 L1201.76 690.314 L1202.32 690.314 L1202.88 690.314 L1203.44 690.314 L1204 690.314 L1204.56 690.314 L1205.12 690.314 L1205.68 690.314 L1206.24 690.314 L1206.8 690.314 L1207.35 690.314 L1207.91 690.314 L1208.47 690.314 L1209.03 690.314 L1209.59 690.314 L1210.15 690.314 L1210.71 690.314 L1211.27 690.314 L1211.83 690.314 L1212.39 690.314 L1212.95 690.314 L1213.51 690.314 L1214.07 690.314 L1214.62 690.314 L1215.18 690.314 L1215.74 690.314 L1216.3 690.314 L1216.86 690.314 L1217.42 690.314 L1217.98 690.314 L1218.54 690.314 L1219.1 690.314 L1219.66 690.314 L1220.22 690.314 L1220.78 690.314 L1221.34 690.314 L1221.89 690.314 L1222.45 690.314 L1223.01 690.314 L1223.57 690.314 L1224.13 690.314 L1224.69 690.314 L1225.25 690.314 L1225.81 690.314 L1226.37 690.314 L1226.93 690.314 L1227.49 690.314 L1228.05 690.314 L1228.61 690.314 L1229.17 690.314 L1229.72 690.314 L1230.28 690.314 L1230.84 690.314 L1231.4 690.314 L1231.96 690.314 L1232.52 690.314 L1233.08 690.314 L1233.64 690.314 L1234.2 690.314 L1234.76 690.314 L1235.32 690.314 L1235.88 690.314 L1236.44 690.314 L1236.99 690.314 L1237.55 690.314 L1238.11 690.314 L1238.67 690.314 L1239.23 690.314 L1239.79 690.314 L1240.35 690.314 L1240.91 690.314 L1241.47 690.314 L1242.03 690.314 L1242.59 690.314 L1243.15 690.314 L1243.71 690.314 L1244.26 690.314 L1244.82 690.314 L1245.38 690.314 L1245.94 690.314 L1246.5 690.314 L1247.06 690.314 L1247.62 690.314 L1248.18 690.314 L1248.74 690.314 L1249.3 690.314 L1249.86 690.314 L1250.42 690.314 L1250.98 690.314 L1251.54 690.314 L1252.09 690.314 L1252.65 690.314 L1253.21 690.314 L1253.77 690.314 L1254.33 690.314 L1254.89 690.314 L1255.45 690.314 L1256.01 690.314 L1256.57 690.314 L1257.13 690.314 L1257.69 690.314 L1258.25 690.314 L1258.81 690.314 L1259.36 690.314 L1259.92 690.314 L1260.48 690.314 L1261.04 690.314 L1261.6 690.314 L1262.16 690.314 L1262.72 690.314 L1263.28 690.314 L1263.84 690.314 L1264.4 690.314 L1264.96 690.314 L1265.52 690.314 L1266.08 690.314 L1266.63 690.314 L1267.19 690.314 L1267.75 690.314 L1268.31 690.314 L1268.87 690.314 L1269.43 690.314 L1269.99 690.314 L1270.55 690.314 L1271.11 690.314 L1271.67 690.314 L1272.23 690.314 L1272.79 690.314 L1273.35 690.314 L1273.91 690.314 L1274.46 690.314 L1275.02 690.314 L1275.58 690.314 L1276.14 690.314 L1276.7 690.314 L1277.26 690.314 L1277.82 690.314 L1278.38 690.314 L1278.94 690.314 L1279.5 690.314 L1280.06 690.314 L1280.62 690.314 L1281.18 690.314 L1281.73 690.314 L1282.29 690.314 L1282.85 690.314 L1283.41 690.314 L1283.97 690.314 L1284.53 690.314 L1285.09 690.314 L1285.65 690.314 L1286.21 690.314 L1286.77 690.314 L1287.33 690.314 L1287.89 690.314 L1288.45 690.314 L1289 690.314 L1289.56 690.314 L1290.12 690.314 L1290.68 690.314 L1291.24 690.314 L1291.8 690.314 L1292.36 690.314 L1292.92 690.314 L1293.48 690.314 L1294.04 690.314 L1294.6 690.314 L1295.16 690.314 L1295.72 690.314 L1296.28 690.314 L1296.83 690.314 L1297.39 690.314 L1297.95 690.314 L1298.51 690.314 L1299.07 690.314 L1299.63 690.314 L1300.19 690.314 L1300.75 690.314 L1301.31 690.314 L1301.87 690.314 L1302.43 690.314 L1302.99 690.314 L1303.55 690.314 L1304.1 690.314 L1304.66 690.314 L1305.22 690.314 L1305.78 690.314 L1306.34 690.314 L1306.9 690.314 L1307.46 690.314 L1308.02 690.314 L1308.58 690.314 L1309.14 690.314 L1309.7 690.314 L1310.26 690.314 L1310.82 690.314 L1311.38 690.314 L1311.93 690.314 L1312.49 690.314 L1313.05 690.314 L1313.61 690.314 L1314.17 690.314 L1314.73 690.314 L1315.29 690.314 L1315.85 690.314 L1316.41 690.314 L1316.97 690.314 L1317.53 690.314 L1318.09 690.314 L1318.65 690.314 L1319.2 690.314 L1319.76 690.314 L1320.32 690.314 L1320.88 690.314 L1321.44 690.314 L1322 690.314 L1322.56 690.314 L1323.12 690.314 L1323.68 690.314 L1324.24 690.314 L1324.8 690.314 L1325.36 690.314 L1325.92 690.314 L1326.47 690.314 L1327.03 690.314 L1327.59 690.314 L1328.15 690.314 L1328.71 690.314 L1329.27 690.314 L1329.83 690.314 L1330.39 690.314 L1330.95 690.314 L1331.51 690.314 L1332.07 690.314 L1332.63 690.314 L1333.19 690.314 L1333.75 690.314 L1334.3 690.314 L1334.86 690.314 L1335.42 690.314 L1335.98 690.314 L1336.54 690.314 L1337.1 690.314 L1337.66 690.314 L1338.22 690.314 L1338.78 690.314 L1339.34 690.314 L1339.9 690.314 L1340.46 690.314 L1341.02 690.314 L1341.57 690.314 L1342.13 690.314 L1342.69 690.314 L1343.25 690.314 L1343.81 690.314 L1344.37 690.314 L1344.93 690.314 L1345.49 690.314 L1346.05 690.314 L1346.61 690.314 L1347.17 690.314 L1347.73 690.314 L1348.29 690.314 L1348.84 690.314 L1349.4 690.314 L1349.96 690.314 L1350.52 690.314 L1351.08 690.314 L1351.64 690.314 L1352.2 690.314 L1352.76 690.314 L1353.32 690.314 L1353.88 690.314 L1354.44 690.314 L1355 690.314 L1355.56 690.314 L1356.12 690.314 L1356.67 690.314 L1357.23 690.314 L1357.79 690.314 L1358.35 690.314 L1358.91 690.314 L1359.47 690.314 L1360.03 690.314 L1360.59 690.314 L1361.15 690.314 L1361.71 690.314 L1362.27 690.314 L1362.83 690.314 L1363.39 690.314 L1363.94 690.314 L1364.5 690.314 L1365.06 690.314 L1365.62 690.314 L1366.18 690.314 L1366.74 690.314 L1367.3 690.314 L1367.86 690.314 L1368.42 690.314 L1368.98 690.314 L1369.54 690.314 L1370.1 690.314 L1370.66 690.314 L1371.21 690.314 L1371.77 690.314 L1372.33 690.314 L1372.89 690.314 L1373.45 690.314 L1374.01 690.314 L1374.57 690.314 L1375.13 690.314 L1375.69 690.314 L1376.25 690.314 L1376.81 690.314 L1377.37 690.314 L1377.93 690.314 L1378.49 690.314 L1379.04 690.314 L1379.6 690.314 L1380.16 690.314 L1380.72 690.314 L1381.28 690.314 L1381.84 690.314 L1382.4 690.314 L1382.96 690.314 L1383.52 690.314 L1384.08 690.314 L1384.64 690.314 L1385.2 690.314 L1385.76 690.314 L1386.31 690.314 L1386.87 690.314 L1387.43 690.314 L1387.99 690.314 L1388.55 690.314 L1389.11 690.314 L1389.67 690.314 L1390.23 690.314 L1390.79 690.314 L1391.35 690.314 L1391.91 690.314 L1392.47 690.314 L1393.03 690.314 L1393.58 690.314 L1394.14 690.314 L1394.7 690.314 L1395.26 690.314 L1395.82 690.314 L1396.38 690.314 L1396.94 690.314 L1397.5 690.314 L1398.06 690.314 L1398.62 690.314 L1399.18 690.314 L1399.74 690.314 L1400.3 690.314 L1400.86 690.314 L1401.41 690.314 L1401.97 690.314 L1402.53 690.314 L1403.09 690.314 L1403.65 690.314 L1404.21 690.314 L1404.77 690.314 L1405.33 690.314 L1405.89 690.314 L1406.45 690.314 L1407.01 690.314 L1407.57 690.314 L1408.13 690.314 L1408.68 690.314 L1409.24 690.314 L1409.8 690.314 L1410.36 690.314 L1410.92 690.314 L1411.48 690.314 L1412.04 690.314 L1412.6 690.314 L1413.16 690.314 L1413.72 690.314 L1414.28 690.314 L1414.84 690.314 L1415.4 690.314 L1415.95 690.314 L1416.51 690.314 L1417.07 690.314 L1417.63 690.314 L1418.19 690.314 L1418.75 690.314 L1419.31 690.314 L1419.87 690.314 L1420.43 690.314 L1420.99 690.314 L1421.55 690.314 L1422.11 690.314 L1422.67 690.314 L1423.23 690.314 L1423.78 690.314 L1424.34 690.314 L1424.9 690.314 L1425.46 690.314 L1426.02 690.314 L1426.58 690.314 L1427.14 690.314 L1427.7 690.314 L1428.26 690.314 L1428.82 690.314 L1429.38 690.314 L1429.94 690.314 L1430.5 690.314 L1431.05 690.314 L1431.61 690.314 L1432.17 690.314 L1432.73 690.314 L1433.29 690.314 L1433.85 690.314 L1434.41 690.314 L1434.97 690.314 L1435.53 690.314 L1436.09 690.314 L1436.65 690.314 L1437.21 690.314 L1437.77 690.314 L1438.33 690.314 L1438.88 690.314 L1439.44 690.314 L1440 690.314 L1440.56 690.314 L1441.12 690.314 L1441.68 690.314 L1442.24 690.314 L1442.8 690.314 L1443.36 690.314 L1443.92 690.314 L1444.48 690.314 L1445.04 690.314 L1445.6 690.314 L1446.15 690.314 L1446.71 690.314 L1447.27 690.314 L1447.83 690.314 L1448.39 690.314 L1448.95 690.314 L1449.51 690.314 L1450.07 690.314 L1450.63 690.314 L1451.19 690.314 L1451.75 690.314 L1452.31 690.314 L1452.87 690.314 L1453.42 690.314 L1453.98 690.314 L1454.54 690.314 L1455.1 690.314 L1455.66 690.314 L1456.22 690.314 L1456.78 690.314 L1457.34 690.314 L1457.9 690.314 L1458.46 690.314 L1459.02 690.314 L1459.58 690.314 L1460.14 690.314 L1460.7 690.314 L1461.25 690.314 L1461.81 690.314 L1462.37 690.314 L1462.93 690.314 L1463.49 690.314 L1464.05 690.314 L1464.61 690.314 L1465.17 690.314 L1465.73 690.314 L1466.29 690.314 L1466.85 690.314 L1467.41 690.314 L1467.97 690.314 L1468.52 690.314 L1469.08 690.314 L1469.64 690.314 L1470.2 690.314 L1470.76 690.314 L1471.32 690.314 L1471.88 690.314 L1472.44 690.314 L1473 690.314 L1473.56 690.314 L1474.12 690.314 L1474.68 690.314 L1475.24 690.314 L1475.79 690.314 L1476.35 690.314 L1476.91 690.314 L1477.47 690.314 L1478.03 690.314 L1478.59 690.314 L1479.15 690.314 L1479.71 690.314 L1480.27 690.314 L1480.83 690.314 L1481.39 690.314 L1481.95 690.314 L1482.51 690.314 L1483.07 690.314 L1483.62 690.314 L1484.18 690.314 L1484.74 690.314 L1485.3 690.314 L1485.86 690.314 L1486.42 690.314 L1486.98 690.314 L1487.54 690.314 L1488.1 690.314 L1488.66 690.314 L1489.22 690.314 L1489.78 690.314 L1490.34 690.314 L1490.89 690.314 L1491.45 690.314 L1492.01 690.314 L1492.57 690.314 L1493.13 690.314 L1493.69 690.314 L1494.25 690.314 L1494.81 690.314 L1495.37 690.314 L1495.93 690.314 L1496.49 690.314 L1497.05 690.314 L1497.61 690.314 L1498.16 690.314 L1498.72 690.314 L1499.28 690.314 L1499.84 690.314 L1500.4 690.314 L1500.96 690.314 L1501.52 690.314 L1502.08 690.314 L1502.64 690.314 L1503.2 690.314 L1503.76 690.314 L1504.32 690.314 L1504.88 690.314 L1505.44 690.314 L1505.99 690.314 L1506.55 690.314 L1507.11 690.314 L1507.67 690.314 L1508.23 690.314 L1508.79 690.314 L1509.35 690.314 L1509.91 690.314 L1510.47 690.314 L1511.03 690.314 L1511.59 690.314 L1512.15 690.314 L1512.71 690.314 L1513.26 690.314 L1513.82 690.314 L1514.38 690.314 L1514.94 690.314 L1515.5 690.314 L1516.06 690.314 L1516.62 690.314 L1517.18 690.314 L1517.74 690.314 L1518.3 690.314 L1518.86 690.314 L1519.42 690.314 L1519.98 690.314 L1520.53 690.314 L1521.09 690.314 L1521.65 690.314 L1522.21 690.314 L1522.77 690.314 L1523.33 690.314 L1523.89 690.314 L1524.45 690.314 L1525.01 690.314 L1525.57 690.314 L1526.13 690.314 L1526.69 690.314 L1527.25 690.314 L1527.81 690.314 L1528.36 690.314 L1528.92 690.314 L1529.48 690.314 L1530.04 690.314 L1530.6 690.314 L1531.16 690.314 L1531.72 690.314 L1532.28 690.314 L1532.84 690.314 L1533.4 690.314 L1533.96 690.314 L1534.52 690.314 L1535.08 690.314 L1535.63 690.314 L1536.19 690.314 L1536.75 690.314 L1537.31 690.314 L1537.87 690.314 L1538.43 690.314 L1538.99 690.314 L1539.55 690.314 L1540.11 690.314 L1540.67 690.314 L1541.23 690.314 L1541.79 690.314 L1542.35 690.314 L1542.9 690.314 L1543.46 690.314 L1544.02 690.314 L1544.58 690.314 L1545.14 690.314 L1545.7 690.314 L1546.26 690.314 L1546.82 690.314 L1547.38 690.314 L1547.94 690.314 L1548.5 690.314 L1549.06 690.314 L1549.62 690.314 L1550.18 690.314 L1550.73 690.314 L1551.29 690.314 L1551.85 690.314 L1552.41 690.314 L1552.97 690.314 L1553.53 690.314 L1554.09 690.314 L1554.65 690.314 L1555.21 690.314 L1555.77 690.314 L1556.33 690.314 L1556.89 690.314 L1557.45 690.314 L1558 690.314 L1558.56 690.314 L1559.12 690.314 L1559.68 690.314 L1560.24 690.314 L1560.8 690.314 L1561.36 690.314 L1561.92 690.314 L1562.48 690.314 L1563.04 690.314 L1563.6 690.314 L1564.16 690.314 L1564.72 690.314 L1565.28 690.314 L1565.83 690.314 L1566.39 690.314 L1566.95 690.314 L1567.51 690.314 L1568.07 690.314 L1568.63 690.314 L1569.19 690.314 L1569.75 690.314 L1570.31 690.314 L1570.87 690.314 L1571.43 690.314 L1571.99 690.314 L1572.55 690.314 L1573.1 690.314 L1573.66 690.314 L1574.22 690.314 L1574.78 690.314 L1575.34 690.314 L1575.9 690.314 L1576.46 690.314 L1577.02 690.314 L1577.58 690.314 L1578.14 690.314 L1578.7 690.314 L1579.26 690.314 L1579.82 690.314 L1580.37 690.314 L1580.93 690.314 L1581.49 690.314 L1582.05 690.314 L1582.61 690.314 L1583.17 690.314 L1583.73 690.314 L1584.29 690.314 L1584.85 690.314 L1585.41 690.314 L1585.97 690.314 L1586.53 690.314 L1587.09 690.314 L1587.65 690.314 L1588.2 690.314 L1588.76 690.314 L1589.32 690.314 L1589.88 690.314 L1590.44 690.314 L1591 690.314 L1591.56 690.314 L1592.12 690.314 L1592.68 690.314 L1593.24 690.314 L1593.8 690.314 L1594.36 690.314 L1594.92 690.314 L1595.47 690.314 L1596.03 690.314 L1596.59 690.314 L1597.15 690.314 L1597.71 690.314 L1598.27 690.314 L1598.83 690.314 L1599.39 690.314 L1599.95 690.314 L1600.51 690.314 L1601.07 690.314 L1601.63 690.314 L1602.19 690.314 L1602.74 690.314 L1603.3 690.314 L1603.86 690.314 L1604.42 690.314 L1604.98 690.314 L1605.54 690.314 L1606.1 690.314 L1606.66 690.314 L1607.22 690.314 L1607.78 690.314 L1608.34 690.314 L1608.9 690.314 L1609.46 690.314 L1610.02 690.314 L1610.57 690.314 L1611.13 690.314 L1611.69 690.314 L1612.25 690.314 L1612.81 690.314 L1613.37 690.314 L1613.93 690.314 L1614.49 690.314 L1615.05 690.314 L1615.61 690.314 L1616.17 690.314 L1616.73 690.314 L1617.29 690.314 L1617.84 690.314 L1618.4 690.314 L1618.96 690.314 L1619.52 690.314 L1620.08 690.314 L1620.64 690.314 L1621.2 690.314 L1621.76 690.314 L1622.32 690.314 L1622.88 690.314 L1623.44 690.314 L1624 690.314 L1624.56 690.314 L1625.11 690.314 L1625.67 690.314 L1626.23 690.314 L1626.79 690.314 L1627.35 690.314 L1627.91 690.314 L1628.47 690.314 L1629.03 690.314 L1629.59 690.314 L1630.15 690.314 L1630.71 690.314 L1631.27 690.314 L1631.83 690.314 L1632.39 690.314 L1632.94 690.314 L1633.5 690.314 L1634.06 690.314 L1634.62 690.314 L1635.18 690.314 L1635.74 690.314 L1636.3 690.314 L1636.86 690.314 L1637.42 690.314 L1637.98 690.314 L1638.54 690.314 L1639.1 690.314 L1639.66 690.314 L1640.21 690.314 L1640.77 690.314 L1641.33 690.314 L1641.89 690.314 L1642.45 690.314 L1643.01 690.314 L1643.57 690.314 L1644.13 690.314 L1644.69 690.314 L1645.25 690.314 L1645.81 690.314 L1646.37 690.314 L1646.93 690.314 L1647.48 690.314 L1648.04 690.314 L1648.6 690.314 L1649.16 690.314 L1649.72 690.314 L1650.28 690.314 L1650.84 690.314 L1651.4 690.314 L1651.96 690.314 L1652.52 690.314 L1653.08 690.314 L1653.64 690.314 L1654.2 690.314 L1654.76 690.314 L1655.31 690.314 L1655.87 690.314 L1656.43 690.314 L1656.99 690.314 L1657.55 690.314 L1658.11 690.314 L1658.67 690.314 L1659.23 690.314 L1659.79 690.314 L1660.35 690.314 L1660.91 690.314 L1661.47 690.314 L1662.03 690.314 L1662.58 690.314 L1663.14 690.314 L1663.7 690.314 L1664.26 690.314 L1664.82 690.314 L1665.38 690.314 L1665.94 690.314 L1666.5 690.314 L1667.06 690.314 L1667.62 690.314 L1668.18 690.314 L1668.74 690.314 L1669.3 690.314 L1669.85 690.314 L1670.41 690.314 L1670.97 690.314 L1671.53 690.314 L1672.09 690.314 L1672.65 690.314 L1673.21 690.314 L1673.77 690.314 L1674.33 690.314 L1674.89 690.314 L1675.45 690.314 L1676.01 690.314 L1676.57 690.314 L1677.13 690.314 L1677.68 690.314 L1678.24 690.314 L1678.8 690.314 L1679.36 690.314 L1679.92 690.314 L1680.48 690.314 L1681.04 690.314 L1681.6 690.314 L1682.16 690.314 L1682.72 690.314 L1683.28 690.314 L1683.84 690.314 L1684.4 690.314 L1684.95 690.314 L1685.51 690.314 L1686.07 690.314 L1686.63 690.314 L1687.19 690.314 L1687.75 690.314 L1688.31 690.314 L1688.87 690.314 L1689.43 690.314 L1689.99 690.314 L1690.55 690.314 L1691.11 690.314 L1691.67 690.314 L1692.23 690.314 L1692.78 690.314 L1693.34 690.314 L1693.9 690.314 L1694.46 690.314 L1695.02 690.314 L1695.58 690.314 L1696.14 690.314 L1696.7 690.314 L1697.26 690.314 L1697.82 690.314 L1698.38 690.314 L1698.94 690.314 L1699.5 690.314 L1700.05 690.314 L1700.61 690.314 L1701.17 690.314 L1701.73 690.314 L1702.29 690.314 L1702.85 690.314 L1703.41 690.314 L1703.97 690.314 L1704.53 690.314 L1705.09 690.314 L1705.65 690.314 L1706.21 690.314 L1706.77 690.314 L1707.32 690.314 L1707.88 690.314 L1708.44 690.314 L1709 690.314 L1709.56 690.314 L1710.12 690.314 L1710.68 690.314 L1711.24 690.314 L1711.8 690.314 L1712.36 690.314 L1712.92 690.314 L1713.48 690.314 L1714.04 690.314 L1714.6 690.314 L1715.15 690.314 L1715.71 690.314 L1716.27 690.314 L1716.83 690.314 L1717.39 690.314 L1717.95 690.314 L1718.51 690.314 L1719.07 690.314 L1719.63 690.314 L1720.19 690.314 L1720.75 690.314 L1721.31 690.314 L1721.87 690.314 L1722.42 690.314 L1722.98 690.314 L1723.54 690.314 L1724.1 690.314 L1724.66 690.314 L1725.22 690.314 L1725.78 690.314 L1726.34 690.314 L1726.9 690.314 L1727.46 690.314 L1728.02 690.314 L1728.58 690.314 L1729.14 690.314 L1729.69 690.314 L1730.25 690.314 L1730.81 690.314 L1731.37 690.314 L1731.93 690.314 L1732.49 690.314 L1733.05 690.314 L1733.61 690.314 L1734.17 690.314 L1734.73 690.314 L1735.29 690.314 L1735.85 690.314 L1736.41 690.314 L1736.97 690.314 L1737.52 690.314 L1738.08 690.314 L1738.64 690.314 L1739.2 690.314 L1739.76 690.314 L1740.32 690.314 L1740.88 690.314 L1741.44 690.314 L1742 690.314 L1742.56 690.314 L1743.12 690.314 L1743.68 690.314 L1744.24 690.314 L1744.79 690.314 L1745.35 690.314 L1745.91 690.314 L1746.47 690.314 L1747.03 690.314 L1747.59 690.314 L1748.15 690.314 L1748.71 690.314 L1749.27 690.314 L1749.83 690.314 L1750.39 690.314 L1750.95 690.314 L1751.51 690.314 L1752.06 690.314 L1752.62 690.314 L1753.18 690.314 L1753.74 690.314 L1754.3 690.314 L1754.86 690.314 L1755.42 690.314 L1755.98 690.314 L1756.54 690.314 L1757.1 690.314 L1757.66 690.314 L1758.22 690.314 L1758.78 690.314 L1759.34 690.314 L1759.89 690.314 L1760.45 690.314 L1761.01 690.314 L1761.57 690.314 L1762.13 690.314 L1762.69 690.314 L1763.25 690.314 L1763.81 690.314 L1764.37 690.314 L1764.93 690.314 L1765.49 690.314 L1766.05 690.314 L1766.61 690.314 L1767.16 690.314 L1767.72 690.314 L1768.28 690.314 L1768.84 690.314 L1769.4 690.314 L1769.96 690.314 L1770.52 690.314 L1771.08 690.314 L1771.64 690.314 L1772.2 690.314 L1772.76 690.314 L1773.32 690.314 L1773.88 690.314 L1774.43 690.314 L1774.99 690.314 L1775.55 690.314 L1776.11 690.314 L1776.67 690.314 L1777.23 690.314 L1777.79 690.314 L1778.35 690.314 L1778.91 690.314 L1779.47 690.314 L1780.03 690.314 L1780.59 690.314 L1781.15 690.314 L1781.71 690.314 L1782.26 690.314 L1782.82 690.314 L1783.38 690.314 L1783.94 690.314 L1784.5 690.314 L1785.06 690.314 L1785.62 690.314 L1786.18 690.314 L1786.74 690.314 L1787.3 690.314 L1787.86 690.314 L1788.42 690.314 L1788.98 690.314 L1789.53 690.314 L1790.09 690.314 L1790.65 690.314 L1791.21 690.314 L1791.77 690.314 L1792.33 690.314 L1792.89 690.314 L1793.45 690.314 L1794.01 690.314 L1794.57 690.314 L1795.13 690.314 L1795.69 690.314 L1796.25 690.314 L1796.8 690.314 L1797.36 690.314 L1797.92 690.314 L1798.48 690.314 L1799.04 690.314 L1799.6 690.314 L1800.16 690.314 L1800.72 690.314 L1801.28 690.314 L1801.84 690.314 L1802.4 690.314 L1802.96 690.314 L1803.52 690.314 L1804.08 690.314 L1804.63 690.314 L1805.19 690.314 L1805.75 690.314 L1806.31 690.314 L1806.87 690.314 L1807.43 690.314 L1807.99 690.314 L1808.55 690.314 L1809.11 690.314 L1809.67 690.314 L1810.23 690.314 L1810.79 690.314 L1811.35 690.314 L1811.9 690.314 L1812.46 690.314 L1813.02 690.314 L1813.58 690.314 L1814.14 690.314 L1814.7 690.314 L1815.26 690.314 L1815.82 690.314 L1816.38 690.314 L1816.94 690.314 L1817.5 690.314 L1818.06 690.314 L1818.62 690.314 L1819.18 690.314 L1819.73 690.314 L1820.29 690.314 L1820.85 690.314 L1821.41 690.314 L1821.97 690.314 L1822.53 690.314 L1823.09 690.314 L1823.65 690.314 L1824.21 690.314 L1824.77 690.314 L1825.33 690.314 L1825.89 690.314 L1826.45 690.314 L1827 690.314 L1827.56 690.314 L1828.12 690.314 L1828.68 690.314 L1829.24 690.314 L1829.8 690.314 L1830.36 690.314 L1830.92 690.314 L1831.48 690.314 L1832.04 690.314 L1832.6 690.314 L1833.16 690.314 L1833.72 690.314 L1834.27 690.314 L1834.83 690.314 L1835.39 690.314 L1835.95 690.314 L1836.51 690.314 L1837.07 690.314 L1837.63 690.314 L1838.19 690.314 L1838.19 680.541 L1837.63 680.541 L1837.07 680.541 L1836.51 680.541 L1835.95 680.541 L1835.39 680.541 L1834.83 680.541 L1834.27 680.541 L1833.72 680.541 L1833.16 680.541 L1832.6 680.541 L1832.04 680.541 L1831.48 680.541 L1830.92 680.541 L1830.36 680.541 L1829.8 680.541 L1829.24 680.541 L1828.68 680.541 L1828.12 680.541 L1827.56 680.541 L1827 680.541 L1826.45 680.541 L1825.89 680.541 L1825.33 680.541 L1824.77 680.541 L1824.21 680.541 L1823.65 680.541 L1823.09 680.541 L1822.53 680.541 L1821.97 680.541 L1821.41 680.541 L1820.85 680.541 L1820.29 680.541 L1819.73 680.541 L1819.18 680.541 L1818.62 680.541 L1818.06 680.541 L1817.5 680.541 L1816.94 680.541 L1816.38 680.541 L1815.82 680.541 L1815.26 680.541 L1814.7 680.541 L1814.14 680.541 L1813.58 680.541 L1813.02 680.541 L1812.46 680.541 L1811.9 680.541 L1811.35 680.541 L1810.79 680.541 L1810.23 680.541 L1809.67 680.541 L1809.11 680.541 L1808.55 680.541 L1807.99 680.541 L1807.43 680.541 L1806.87 680.541 L1806.31 680.541 L1805.75 680.541 L1805.19 680.541 L1804.63 680.541 L1804.08 680.541 L1803.52 680.541 L1802.96 680.541 L1802.4 680.541 L1801.84 680.541 L1801.28 680.541 L1800.72 680.541 L1800.16 680.541 L1799.6 680.541 L1799.04 680.541 L1798.48 680.541 L1797.92 680.541 L1797.36 680.541 L1796.8 680.541 L1796.25 680.541 L1795.69 680.541 L1795.13 680.541 L1794.57 680.541 L1794.01 680.541 L1793.45 680.541 L1792.89 680.541 L1792.33 680.541 L1791.77 680.541 L1791.21 680.541 L1790.65 680.541 L1790.09 680.541 L1789.53 680.541 L1788.98 680.541 L1788.42 680.541 L1787.86 680.541 L1787.3 680.541 L1786.74 680.541 L1786.18 680.541 L1785.62 680.541 L1785.06 680.541 L1784.5 680.541 L1783.94 680.541 L1783.38 680.541 L1782.82 680.541 L1782.26 680.541 L1781.71 680.541 L1781.15 680.541 L1780.59 680.541 L1780.03 680.541 L1779.47 680.541 L1778.91 680.541 L1778.35 680.541 L1777.79 680.541 L1777.23 680.541 L1776.67 680.541 L1776.11 680.541 L1775.55 680.541 L1774.99 680.541 L1774.43 680.541 L1773.88 680.541 L1773.32 680.541 L1772.76 680.541 L1772.2 680.541 L1771.64 680.541 L1771.08 680.541 L1770.52 680.541 L1769.96 680.541 L1769.4 680.541 L1768.84 680.541 L1768.28 680.541 L1767.72 680.541 L1767.16 680.541 L1766.61 680.541 L1766.05 680.541 L1765.49 680.541 L1764.93 680.541 L1764.37 680.541 L1763.81 680.541 L1763.25 680.541 L1762.69 680.541 L1762.13 680.541 L1761.57 680.541 L1761.01 680.541 L1760.45 680.541 L1759.89 680.541 L1759.34 680.541 L1758.78 680.541 L1758.22 680.541 L1757.66 680.541 L1757.1 680.541 L1756.54 680.541 L1755.98 680.541 L1755.42 680.541 L1754.86 680.541 L1754.3 680.541 L1753.74 680.541 L1753.18 680.541 L1752.62 680.541 L1752.06 680.541 L1751.51 680.541 L1750.95 680.541 L1750.39 680.541 L1749.83 680.541 L1749.27 680.541 L1748.71 680.541 L1748.15 680.541 L1747.59 680.541 L1747.03 680.541 L1746.47 680.541 L1745.91 680.541 L1745.35 680.541 L1744.79 680.541 L1744.24 680.541 L1743.68 680.541 L1743.12 680.541 L1742.56 680.541 L1742 680.541 L1741.44 680.541 L1740.88 680.541 L1740.32 680.541 L1739.76 680.541 L1739.2 680.541 L1738.64 680.541 L1738.08 680.541 L1737.52 680.541 L1736.97 680.541 L1736.41 680.541 L1735.85 680.541 L1735.29 680.541 L1734.73 680.541 L1734.17 680.541 L1733.61 680.541 L1733.05 680.541 L1732.49 680.541 L1731.93 680.541 L1731.37 680.541 L1730.81 680.541 L1730.25 680.541 L1729.69 680.541 L1729.14 680.541 L1728.58 680.541 L1728.02 680.541 L1727.46 680.541 L1726.9 680.541 L1726.34 680.541 L1725.78 680.541 L1725.22 680.541 L1724.66 680.541 L1724.1 680.541 L1723.54 680.541 L1722.98 680.541 L1722.42 680.541 L1721.87 680.541 L1721.31 680.541 L1720.75 680.541 L1720.19 680.541 L1719.63 680.541 L1719.07 680.541 L1718.51 680.541 L1717.95 680.541 L1717.39 680.541 L1716.83 680.541 L1716.27 680.541 L1715.71 680.541 L1715.15 680.541 L1714.6 680.541 L1714.04 680.541 L1713.48 680.541 L1712.92 680.541 L1712.36 680.541 L1711.8 680.541 L1711.24 680.541 L1710.68 680.541 L1710.12 680.541 L1709.56 680.541 L1709 680.541 L1708.44 680.541 L1707.88 680.541 L1707.32 680.541 L1706.77 680.541 L1706.21 680.541 L1705.65 680.541 L1705.09 680.541 L1704.53 680.541 L1703.97 680.541 L1703.41 680.541 L1702.85 680.541 L1702.29 680.541 L1701.73 680.541 L1701.17 680.541 L1700.61 680.541 L1700.05 680.541 L1699.5 680.541 L1698.94 680.541 L1698.38 680.541 L1697.82 680.541 L1697.26 680.541 L1696.7 680.541 L1696.14 680.541 L1695.58 680.541 L1695.02 680.541 L1694.46 680.541 L1693.9 680.541 L1693.34 680.541 L1692.78 680.541 L1692.23 680.541 L1691.67 680.541 L1691.11 680.541 L1690.55 680.541 L1689.99 680.541 L1689.43 680.541 L1688.87 680.541 L1688.31 680.541 L1687.75 680.541 L1687.19 680.541 L1686.63 680.541 L1686.07 680.541 L1685.51 680.541 L1684.95 680.541 L1684.4 680.541 L1683.84 680.541 L1683.28 680.541 L1682.72 680.541 L1682.16 680.541 L1681.6 680.541 L1681.04 680.541 L1680.48 680.541 L1679.92 680.541 L1679.36 680.541 L1678.8 680.541 L1678.24 680.541 L1677.68 680.541 L1677.13 680.541 L1676.57 680.541 L1676.01 680.541 L1675.45 680.541 L1674.89 680.541 L1674.33 680.541 L1673.77 680.541 L1673.21 680.541 L1672.65 680.541 L1672.09 680.541 L1671.53 680.541 L1670.97 680.541 L1670.41 680.541 L1669.85 680.541 L1669.3 680.541 L1668.74 680.541 L1668.18 680.541 L1667.62 680.541 L1667.06 680.541 L1666.5 680.541 L1665.94 680.541 L1665.38 680.541 L1664.82 680.541 L1664.26 680.541 L1663.7 680.541 L1663.14 680.541 L1662.58 680.541 L1662.03 680.541 L1661.47 680.541 L1660.91 680.541 L1660.35 680.541 L1659.79 680.541 L1659.23 680.541 L1658.67 680.541 L1658.11 680.541 L1657.55 680.541 L1656.99 680.541 L1656.43 680.541 L1655.87 680.541 L1655.31 680.541 L1654.76 680.541 L1654.2 680.541 L1653.64 680.541 L1653.08 680.541 L1652.52 680.541 L1651.96 680.541 L1651.4 680.541 L1650.84 680.541 L1650.28 680.541 L1649.72 680.541 L1649.16 680.541 L1648.6 680.541 L1648.04 680.541 L1647.48 680.541 L1646.93 680.541 L1646.37 680.541 L1645.81 680.541 L1645.25 680.541 L1644.69 680.541 L1644.13 680.541 L1643.57 680.541 L1643.01 680.541 L1642.45 680.541 L1641.89 680.541 L1641.33 680.541 L1640.77 680.541 L1640.21 680.541 L1639.66 680.541 L1639.1 680.541 L1638.54 680.541 L1637.98 680.541 L1637.42 680.541 L1636.86 680.541 L1636.3 680.541 L1635.74 680.541 L1635.18 680.541 L1634.62 680.541 L1634.06 680.541 L1633.5 680.541 L1632.94 680.541 L1632.39 680.541 L1631.83 680.541 L1631.27 680.541 L1630.71 680.541 L1630.15 680.541 L1629.59 680.541 L1629.03 680.541 L1628.47 680.541 L1627.91 680.541 L1627.35 680.541 L1626.79 680.541 L1626.23 680.541 L1625.67 680.541 L1625.11 680.541 L1624.56 680.541 L1624 680.541 L1623.44 680.541 L1622.88 680.541 L1622.32 680.541 L1621.76 680.541 L1621.2 680.541 L1620.64 680.541 L1620.08 680.541 L1619.52 680.541 L1618.96 680.541 L1618.4 680.541 L1617.84 680.541 L1617.29 680.541 L1616.73 680.541 L1616.17 680.541 L1615.61 680.541 L1615.05 680.541 L1614.49 680.541 L1613.93 680.541 L1613.37 680.541 L1612.81 680.541 L1612.25 680.541 L1611.69 680.541 L1611.13 680.541 L1610.57 680.541 L1610.02 680.541 L1609.46 680.541 L1608.9 680.541 L1608.34 680.541 L1607.78 680.541 L1607.22 680.541 L1606.66 680.541 L1606.1 680.541 L1605.54 680.541 L1604.98 680.541 L1604.42 680.541 L1603.86 680.541 L1603.3 680.541 L1602.74 680.541 L1602.19 680.541 L1601.63 680.541 L1601.07 680.541 L1600.51 680.541 L1599.95 680.541 L1599.39 680.541 L1598.83 680.541 L1598.27 680.541 L1597.71 680.541 L1597.15 680.541 L1596.59 680.541 L1596.03 680.541 L1595.47 680.541 L1594.92 680.541 L1594.36 680.541 L1593.8 680.541 L1593.24 680.541 L1592.68 680.541 L1592.12 680.541 L1591.56 680.541 L1591 680.541 L1590.44 680.541 L1589.88 680.541 L1589.32 680.541 L1588.76 680.541 L1588.2 680.541 L1587.65 680.541 L1587.09 680.541 L1586.53 680.541 L1585.97 680.541 L1585.41 680.541 L1584.85 680.541 L1584.29 680.541 L1583.73 680.541 L1583.17 680.541 L1582.61 680.541 L1582.05 680.541 L1581.49 680.541 L1580.93 680.541 L1580.37 680.541 L1579.82 680.541 L1579.26 680.541 L1578.7 680.541 L1578.14 680.541 L1577.58 680.541 L1577.02 680.541 L1576.46 680.541 L1575.9 680.541 L1575.34 680.541 L1574.78 680.541 L1574.22 680.541 L1573.66 680.541 L1573.1 680.541 L1572.55 680.541 L1571.99 680.541 L1571.43 680.541 L1570.87 680.541 L1570.31 680.541 L1569.75 680.541 L1569.19 680.541 L1568.63 680.541 L1568.07 680.541 L1567.51 680.541 L1566.95 680.541 L1566.39 680.541 L1565.83 680.541 L1565.28 680.541 L1564.72 680.541 L1564.16 680.541 L1563.6 680.541 L1563.04 680.541 L1562.48 680.541 L1561.92 680.541 L1561.36 680.541 L1560.8 680.541 L1560.24 680.541 L1559.68 680.541 L1559.12 680.541 L1558.56 680.541 L1558 680.541 L1557.45 680.541 L1556.89 680.541 L1556.33 680.541 L1555.77 680.541 L1555.21 680.541 L1554.65 680.541 L1554.09 680.541 L1553.53 680.541 L1552.97 680.541 L1552.41 680.541 L1551.85 680.541 L1551.29 680.541 L1550.73 680.541 L1550.18 680.541 L1549.62 680.541 L1549.06 680.541 L1548.5 680.541 L1547.94 680.541 L1547.38 680.541 L1546.82 680.541 L1546.26 680.541 L1545.7 680.541 L1545.14 680.541 L1544.58 680.541 L1544.02 680.541 L1543.46 680.541 L1542.9 680.541 L1542.35 680.541 L1541.79 680.541 L1541.23 680.541 L1540.67 680.541 L1540.11 680.541 L1539.55 680.541 L1538.99 680.541 L1538.43 680.541 L1537.87 680.541 L1537.31 680.541 L1536.75 680.541 L1536.19 680.541 L1535.63 680.541 L1535.08 680.541 L1534.52 680.541 L1533.96 680.541 L1533.4 680.541 L1532.84 680.541 L1532.28 680.541 L1531.72 680.541 L1531.16 680.541 L1530.6 680.541 L1530.04 680.541 L1529.48 680.541 L1528.92 680.541 L1528.36 680.541 L1527.81 680.541 L1527.25 680.541 L1526.69 680.541 L1526.13 680.541 L1525.57 680.541 L1525.01 680.541 L1524.45 680.541 L1523.89 680.541 L1523.33 680.541 L1522.77 680.541 L1522.21 680.541 L1521.65 680.541 L1521.09 680.541 L1520.53 680.541 L1519.98 680.541 L1519.42 680.541 L1518.86 680.541 L1518.3 680.541 L1517.74 680.541 L1517.18 680.541 L1516.62 680.541 L1516.06 680.541 L1515.5 680.541 L1514.94 680.541 L1514.38 680.541 L1513.82 680.541 L1513.26 680.541 L1512.71 680.541 L1512.15 680.541 L1511.59 680.541 L1511.03 680.541 L1510.47 680.541 L1509.91 680.541 L1509.35 680.541 L1508.79 680.541 L1508.23 680.541 L1507.67 680.541 L1507.11 680.541 L1506.55 680.541 L1505.99 680.541 L1505.44 680.541 L1504.88 680.541 L1504.32 680.541 L1503.76 680.541 L1503.2 680.541 L1502.64 680.541 L1502.08 680.541 L1501.52 680.541 L1500.96 680.541 L1500.4 680.541 L1499.84 680.541 L1499.28 680.541 L1498.72 680.541 L1498.16 680.541 L1497.61 680.541 L1497.05 680.541 L1496.49 680.541 L1495.93 680.541 L1495.37 680.541 L1494.81 680.541 L1494.25 680.541 L1493.69 680.541 L1493.13 680.541 L1492.57 680.541 L1492.01 680.541 L1491.45 680.541 L1490.89 680.541 L1490.34 680.541 L1489.78 680.541 L1489.22 680.541 L1488.66 680.541 L1488.1 680.541 L1487.54 680.541 L1486.98 680.541 L1486.42 680.541 L1485.86 680.541 L1485.3 680.541 L1484.74 680.541 L1484.18 680.541 L1483.62 680.541 L1483.07 680.541 L1482.51 680.541 L1481.95 680.541 L1481.39 680.541 L1480.83 680.541 L1480.27 680.541 L1479.71 680.541 L1479.15 680.541 L1478.59 680.541 L1478.03 680.541 L1477.47 680.541 L1476.91 680.541 L1476.35 680.541 L1475.79 680.541 L1475.24 680.541 L1474.68 680.541 L1474.12 680.541 L1473.56 680.541 L1473 680.541 L1472.44 680.541 L1471.88 680.541 L1471.32 680.541 L1470.76 680.541 L1470.2 680.541 L1469.64 680.541 L1469.08 680.541 L1468.52 680.541 L1467.97 680.541 L1467.41 680.541 L1466.85 680.541 L1466.29 680.541 L1465.73 680.541 L1465.17 680.541 L1464.61 680.541 L1464.05 680.541 L1463.49 680.541 L1462.93 680.541 L1462.37 680.541 L1461.81 680.541 L1461.25 680.541 L1460.7 680.541 L1460.14 680.541 L1459.58 680.541 L1459.02 680.541 L1458.46 680.541 L1457.9 680.541 L1457.34 680.541 L1456.78 680.541 L1456.22 680.541 L1455.66 680.541 L1455.1 680.541 L1454.54 680.541 L1453.98 680.541 L1453.42 680.541 L1452.87 680.541 L1452.31 680.541 L1451.75 680.541 L1451.19 680.541 L1450.63 680.541 L1450.07 680.541 L1449.51 680.541 L1448.95 680.541 L1448.39 680.541 L1447.83 680.541 L1447.27 680.541 L1446.71 680.541 L1446.15 680.541 L1445.6 680.541 L1445.04 680.541 L1444.48 680.541 L1443.92 680.541 L1443.36 680.541 L1442.8 680.541 L1442.24 680.541 L1441.68 680.541 L1441.12 680.541 L1440.56 680.541 L1440 680.541 L1439.44 680.541 L1438.88 680.541 L1438.33 680.541 L1437.77 680.541 L1437.21 680.541 L1436.65 680.541 L1436.09 680.541 L1435.53 680.541 L1434.97 680.541 L1434.41 680.541 L1433.85 680.541 L1433.29 680.541 L1432.73 680.541 L1432.17 680.541 L1431.61 680.541 L1431.05 680.541 L1430.5 680.541 L1429.94 680.541 L1429.38 680.541 L1428.82 680.541 L1428.26 680.541 L1427.7 680.541 L1427.14 680.541 L1426.58 680.541 L1426.02 680.541 L1425.46 680.541 L1424.9 680.541 L1424.34 680.541 L1423.78 680.541 L1423.23 680.541 L1422.67 680.541 L1422.11 680.541 L1421.55 680.541 L1420.99 680.541 L1420.43 680.541 L1419.87 680.541 L1419.31 680.541 L1418.75 680.541 L1418.19 680.541 L1417.63 680.541 L1417.07 680.541 L1416.51 680.541 L1415.95 680.541 L1415.4 680.541 L1414.84 680.541 L1414.28 680.541 L1413.72 680.541 L1413.16 680.541 L1412.6 680.541 L1412.04 680.541 L1411.48 680.541 L1410.92 680.541 L1410.36 680.541 L1409.8 680.541 L1409.24 680.541 L1408.68 680.541 L1408.13 680.541 L1407.57 680.541 L1407.01 680.541 L1406.45 680.541 L1405.89 680.541 L1405.33 680.541 L1404.77 680.541 L1404.21 680.541 L1403.65 680.541 L1403.09 680.541 L1402.53 680.541 L1401.97 680.541 L1401.41 680.541 L1400.86 680.541 L1400.3 680.541 L1399.74 680.541 L1399.18 680.541 L1398.62 680.541 L1398.06 680.541 L1397.5 680.541 L1396.94 680.541 L1396.38 680.541 L1395.82 680.541 L1395.26 680.541 L1394.7 680.541 L1394.14 680.541 L1393.58 680.541 L1393.03 680.541 L1392.47 680.541 L1391.91 680.541 L1391.35 680.541 L1390.79 680.541 L1390.23 680.541 L1389.67 680.541 L1389.11 680.541 L1388.55 680.541 L1387.99 680.541 L1387.43 680.541 L1386.87 680.541 L1386.31 680.541 L1385.76 680.541 L1385.2 680.541 L1384.64 680.541 L1384.08 680.541 L1383.52 680.541 L1382.96 680.541 L1382.4 680.541 L1381.84 680.541 L1381.28 680.541 L1380.72 680.541 L1380.16 680.541 L1379.6 680.541 L1379.04 680.541 L1378.49 680.541 L1377.93 680.541 L1377.37 680.541 L1376.81 680.541 L1376.25 680.541 L1375.69 680.541 L1375.13 680.541 L1374.57 680.541 L1374.01 680.541 L1373.45 680.541 L1372.89 680.541 L1372.33 680.541 L1371.77 680.541 L1371.21 680.541 L1370.66 680.541 L1370.1 680.541 L1369.54 680.541 L1368.98 680.541 L1368.42 680.541 L1367.86 680.541 L1367.3 680.541 L1366.74 680.541 L1366.18 680.541 L1365.62 680.541 L1365.06 680.541 L1364.5 680.541 L1363.94 680.541 L1363.39 680.541 L1362.83 680.541 L1362.27 680.541 L1361.71 680.541 L1361.15 680.541 L1360.59 680.541 L1360.03 680.541 L1359.47 680.541 L1358.91 680.541 L1358.35 680.541 L1357.79 680.541 L1357.23 680.541 L1356.67 680.541 L1356.12 680.541 L1355.56 680.541 L1355 680.541 L1354.44 680.541 L1353.88 680.541 L1353.32 680.541 L1352.76 680.541 L1352.2 680.541 L1351.64 680.541 L1351.08 680.541 L1350.52 680.541 L1349.96 680.541 L1349.4 680.541 L1348.84 680.541 L1348.29 680.541 L1347.73 680.541 L1347.17 680.541 L1346.61 680.541 L1346.05 680.541 L1345.49 680.541 L1344.93 680.541 L1344.37 680.541 L1343.81 680.541 L1343.25 680.541 L1342.69 680.541 L1342.13 680.541 L1341.57 680.541 L1341.02 680.541 L1340.46 680.541 L1339.9 680.541 L1339.34 680.541 L1338.78 680.541 L1338.22 680.541 L1337.66 680.541 L1337.1 680.541 L1336.54 680.541 L1335.98 680.541 L1335.42 680.541 L1334.86 680.541 L1334.3 680.541 L1333.75 680.541 L1333.19 680.541 L1332.63 680.541 L1332.07 680.541 L1331.51 680.541 L1330.95 680.541 L1330.39 680.541 L1329.83 680.541 L1329.27 680.541 L1328.71 680.541 L1328.15 680.541 L1327.59 680.541 L1327.03 680.541 L1326.47 680.541 L1325.92 680.541 L1325.36 680.541 L1324.8 680.541 L1324.24 680.541 L1323.68 680.541 L1323.12 680.541 L1322.56 680.541 L1322 680.541 L1321.44 680.541 L1320.88 680.541 L1320.32 680.541 L1319.76 680.541 L1319.2 680.541 L1318.65 680.541 L1318.09 680.541 L1317.53 680.541 L1316.97 680.541 L1316.41 680.541 L1315.85 680.541 L1315.29 680.541 L1314.73 680.541 L1314.17 680.541 L1313.61 680.541 L1313.05 680.541 L1312.49 680.541 L1311.93 680.541 L1311.38 680.541 L1310.82 680.541 L1310.26 680.541 L1309.7 680.541 L1309.14 680.541 L1308.58 680.541 L1308.02 680.541 L1307.46 680.541 L1306.9 680.541 L1306.34 680.541 L1305.78 680.541 L1305.22 680.541 L1304.66 680.541 L1304.1 680.541 L1303.55 680.541 L1302.99 680.541 L1302.43 680.541 L1301.87 680.541 L1301.31 680.541 L1300.75 680.541 L1300.19 680.541 L1299.63 680.541 L1299.07 680.541 L1298.51 680.541 L1297.95 680.541 L1297.39 680.541 L1296.83 680.541 L1296.28 680.541 L1295.72 680.541 L1295.16 680.541 L1294.6 680.541 L1294.04 680.541 L1293.48 680.541 L1292.92 680.541 L1292.36 680.541 L1291.8 680.541 L1291.24 680.541 L1290.68 680.541 L1290.12 680.541 L1289.56 680.541 L1289 680.541 L1288.45 680.541 L1287.89 680.541 L1287.33 680.541 L1286.77 680.541 L1286.21 680.541 L1285.65 680.541 L1285.09 680.541 L1284.53 680.541 L1283.97 680.541 L1283.41 680.541 L1282.85 680.541 L1282.29 680.541 L1281.73 680.541 L1281.18 680.541 L1280.62 680.541 L1280.06 680.541 L1279.5 680.541 L1278.94 680.541 L1278.38 680.541 L1277.82 680.541 L1277.26 680.541 L1276.7 680.541 L1276.14 680.541 L1275.58 680.541 L1275.02 680.541 L1274.46 680.541 L1273.91 680.541 L1273.35 680.541 L1272.79 680.541 L1272.23 680.541 L1271.67 680.541 L1271.11 680.541 L1270.55 680.541 L1269.99 680.541 L1269.43 680.541 L1268.87 680.541 L1268.31 680.541 L1267.75 680.541 L1267.19 680.541 L1266.63 680.541 L1266.08 680.541 L1265.52 680.541 L1264.96 680.541 L1264.4 680.541 L1263.84 680.541 L1263.28 680.541 L1262.72 680.541 L1262.16 680.541 L1261.6 680.541 L1261.04 680.541 L1260.48 680.541 L1259.92 680.541 L1259.36 680.541 L1258.81 680.541 L1258.25 680.541 L1257.69 680.541 L1257.13 680.541 L1256.57 680.541 L1256.01 680.541 L1255.45 680.541 L1254.89 680.541 L1254.33 680.541 L1253.77 680.541 L1253.21 680.541 L1252.65 680.541 L1252.09 680.541 L1251.54 680.541 L1250.98 680.541 L1250.42 680.541 L1249.86 680.541 L1249.3 680.541 L1248.74 680.541 L1248.18 680.541 L1247.62 680.541 L1247.06 680.541 L1246.5 680.541 L1245.94 680.541 L1245.38 680.541 L1244.82 680.541 L1244.26 680.541 L1243.71 680.541 L1243.15 680.541 L1242.59 680.541 L1242.03 680.541 L1241.47 680.541 L1240.91 680.541 L1240.35 680.541 L1239.79 680.541 L1239.23 680.541 L1238.67 680.541 L1238.11 680.541 L1237.55 680.541 L1236.99 680.541 L1236.44 680.541 L1235.88 680.541 L1235.32 680.541 L1234.76 680.541 L1234.2 680.541 L1233.64 680.541 L1233.08 680.541 L1232.52 680.541 L1231.96 680.541 L1231.4 680.541 L1230.84 680.541 L1230.28 680.541 L1229.72 680.541 L1229.17 680.541 L1228.61 680.541 L1228.05 680.541 L1227.49 680.541 L1226.93 680.541 L1226.37 680.541 L1225.81 680.541 L1225.25 680.541 L1224.69 680.541 L1224.13 680.541 L1223.57 680.541 L1223.01 680.541 L1222.45 680.541 L1221.89 680.541 L1221.34 680.541 L1220.78 680.541 L1220.22 680.541 L1219.66 680.541 L1219.1 680.541 L1218.54 680.541 L1217.98 680.541 L1217.42 680.541 L1216.86 680.541 L1216.3 680.541 L1215.74 680.541 L1215.18 680.541 L1214.62 680.541 L1214.07 680.541 L1213.51 680.541 L1212.95 680.541 L1212.39 680.541 L1211.83 680.541 L1211.27 680.541 L1210.71 680.541 L1210.15 680.541 L1209.59 680.541 L1209.03 680.541 L1208.47 680.541 L1207.91 680.541 L1207.35 680.541 L1206.8 680.541 L1206.24 680.541 L1205.68 680.541 L1205.12 680.541 L1204.56 680.541 L1204 680.541 L1203.44 680.541 L1202.88 680.541 L1202.32 680.541 L1201.76 680.541 L1201.2 680.541 L1200.64 680.541 L1200.08 680.541 L1199.52 680.541 L1198.97 680.541 L1198.41 680.541 L1197.85 680.541 L1197.29 680.541 L1196.73 680.541 L1196.17 680.541 L1195.61 680.541 L1195.05 680.541 L1194.49 680.541 L1193.93 680.541 L1193.37 680.541 L1192.81 680.541 L1192.25 680.541 L1191.7 680.541 L1191.14 680.541 L1190.58 680.541 L1190.02 680.541 L1189.46 680.541 L1188.9 680.541 L1188.34 680.541 L1187.78 680.541 L1187.22 680.541 L1186.66 680.541 L1186.1 680.541 L1185.54 680.541 L1184.98 680.541 L1184.43 680.541 L1183.87 680.541 L1183.31 680.541 L1182.75 680.541 L1182.19 680.541 L1181.63 680.541 L1181.07 680.541 L1180.51 680.541 L1179.95 680.541 L1179.39 680.541 L1178.83 680.541 L1178.27 680.541 L1177.71 680.541 L1177.15 680.541 L1176.6 680.541 L1176.04 680.541 L1175.48 680.541 L1174.92 680.541 L1174.36 680.541 L1173.8 680.541 L1173.24 680.541 L1172.68 680.541 L1172.12 680.541 L1171.56 680.541 L1171 680.541 L1170.44 680.541 L1169.88 680.541 L1169.33 680.541 L1168.77 680.541 L1168.21 680.541 L1167.65 680.541 L1167.09 680.541 L1166.53 680.541 L1165.97 680.541 L1165.41 680.541 L1164.85 680.541 L1164.29 680.541 L1163.73 680.541 L1163.17 680.541 L1162.61 680.541 L1162.05 680.541 L1161.5 680.541 L1160.94 680.541 L1160.38 680.541 L1159.82 680.541 L1159.26 680.541 L1158.7 680.541 L1158.14 680.541 L1157.58 680.541 L1157.02 680.541 L1156.46 680.541 L1155.9 680.541 L1155.34 680.541 L1154.78 680.541 L1154.23 680.541 L1153.67 680.541 L1153.11 680.541 L1152.55 680.541 L1151.99 680.541 L1151.43 680.541 L1150.87 680.541 L1150.31 680.541 L1149.75 680.541 L1149.19 680.541 L1148.63 680.541 L1148.07 680.541 L1147.51 680.541 L1146.96 680.541 L1146.4 680.541 L1145.84 680.541 L1145.28 680.541 L1144.72 680.541 L1144.16 680.541 L1143.6 680.541 L1143.04 680.541 L1142.48 680.541 L1141.92 680.541 L1141.36 680.541 L1140.8 680.541 L1140.24 680.541 L1139.68 680.541 L1139.13 680.541 L1138.57 680.541 L1138.01 680.541 L1137.45 680.541 L1136.89 680.541 L1136.33 680.541 L1135.77 680.541 L1135.21 680.541 L1134.65 680.541 L1134.09 680.541 L1133.53 680.541 L1132.97 680.541 L1132.41 680.541 L1131.86 680.541 L1131.3 680.541 L1130.74 680.541 L1130.18 680.541 L1129.62 680.541 L1129.06 680.541 L1128.5 680.541 L1127.94 680.541 L1127.38 680.541 L1126.82 680.541 L1126.26 680.541 L1125.7 680.541 L1125.14 680.541 L1124.59 680.541 L1124.03 680.541 L1123.47 680.541 L1122.91 680.541 L1122.35 680.541 L1121.79 680.541 L1121.23 680.541 L1120.67 680.541 L1120.11 680.541 L1119.55 680.541 L1118.99 680.541 L1118.43 680.541 L1117.87 680.541 L1117.31 680.541 L1116.76 680.541 L1116.2 680.541 L1115.64 680.541 L1115.08 680.541 L1114.52 680.541 L1113.96 680.541 L1113.4 680.541 L1112.84 680.541 L1112.28 680.541 L1111.72 680.541 L1111.16 680.541 L1110.6 680.541 L1110.04 680.541 L1109.49 680.541 L1108.93 680.541 L1108.37 680.541 L1107.81 680.541 L1107.25 680.541 L1106.69 680.541 L1106.13 680.541 L1105.57 680.541 L1105.01 680.541 L1104.45 680.541 L1103.89 680.541 L1103.33 680.541 L1102.77 680.541 L1102.22 680.541 L1101.66 680.541 L1101.1 680.541 L1100.54 680.541 L1099.98 680.541 L1099.42 680.541 L1098.86 680.541 L1098.3 680.541 L1097.74 680.541 L1097.18 680.541 L1096.62 680.541 L1096.06 680.541 L1095.5 680.541 L1094.94 680.541 L1094.39 680.541 L1093.83 680.541 L1093.27 680.541 L1092.71 680.541 L1092.15 680.541 L1091.59 680.541 L1091.03 680.541 L1090.47 680.541 L1089.91 680.541 L1089.35 680.541 L1088.79 680.541 L1088.23 680.541 L1087.67 680.541 L1087.12 680.541 L1086.56 680.541 L1086 680.541 L1085.44 680.541 L1084.88 680.541 L1084.32 680.541 L1083.76 680.541 L1083.2 680.541 L1082.64 680.541 L1082.08 680.541 L1081.52 680.541 L1080.96 680.541 L1080.4 680.541 L1079.85 680.541 L1079.29 680.541 L1078.73 680.541 L1078.17 680.541 L1077.61 680.541 L1077.05 680.541 L1076.49 680.541 L1075.93 680.541 L1075.37 680.541 L1074.81 680.541 L1074.25 680.541 L1073.69 680.541 L1073.13 680.541 L1072.57 680.541 L1072.02 680.541 L1071.46 680.541 L1070.9 680.541 L1070.34 680.541 L1069.78 680.541 L1069.22 680.541 L1068.66 680.541 L1068.1 680.541 L1067.54 680.541 L1066.98 680.541 L1066.42 680.541 L1065.86 680.541 L1065.3 680.541 L1064.75 680.541 L1064.19 680.541 L1063.63 680.541 L1063.07 680.541 L1062.51 680.541 L1061.95 680.541 L1061.39 680.541 L1060.83 680.541 L1060.27 680.541 L1059.71 680.541 L1059.15 680.541 L1058.59 680.541 L1058.03 680.541 L1057.48 680.541 L1056.92 680.541 L1056.36 680.541 L1055.8 680.541 L1055.24 680.541 L1054.68 680.541 L1054.12 680.541 L1053.56 680.541 L1053 680.541 L1052.44 680.541 L1051.88 680.541 L1051.32 680.541 L1050.76 680.541 L1050.2 680.541 L1049.65 680.541 L1049.09 680.541 L1048.53 680.541 L1047.97 680.541 L1047.41 680.541 L1046.85 680.541 L1046.29 680.541 L1045.73 680.541 L1045.17 680.541 L1044.61 680.541 L1044.05 680.541 L1043.49 680.541 L1042.93 680.541 L1042.38 680.541 L1041.82 680.541 L1041.26 680.541 L1040.7 680.541 L1040.14 680.541 L1039.58 680.541 L1039.02 680.541 L1038.46 680.541 L1037.9 680.541 L1037.34 680.541 L1036.78 680.541 L1036.22 680.541 L1035.66 680.541 L1035.1 680.541 L1034.55 680.541 L1033.99 680.541 L1033.43 680.541 L1032.87 680.541 L1032.31 680.541 L1031.75 680.541 L1031.19 680.541 L1030.63 680.541 L1030.07 680.541 L1029.51 680.541 L1028.95 680.541 L1028.39 680.541 L1027.83 680.541 L1027.28 680.541 L1026.72 680.541 L1026.16 680.541 L1025.6 680.541 L1025.04 680.541 L1024.48 680.541 L1023.92 680.541 L1023.36 680.541 L1022.8 680.541 L1022.24 680.541 L1021.68 680.541 L1021.12 680.541 L1020.56 680.541 L1020.01 680.541 L1019.45 680.541 L1018.89 680.541 L1018.33 680.541 L1017.77 680.541 L1017.21 680.541 L1016.65 680.541 L1016.09 680.541 L1015.53 680.541 L1014.97 680.541 L1014.41 680.541 L1013.85 680.541 L1013.29 680.541 L1012.73 680.541 L1012.18 680.541 L1011.62 680.541 L1011.06 680.541 L1010.5 680.541 L1009.94 680.541 L1009.38 680.541 L1008.82 680.541 L1008.26 680.541 L1007.7 680.541 L1007.14 680.541 L1006.58 680.541 L1006.02 680.541 L1005.46 680.541 L1004.91 680.541 L1004.35 680.541 L1003.79 680.541 L1003.23 680.541 L1002.67 680.541 L1002.11 680.541 L1001.55 680.541 L1000.99 680.541 L1000.43 680.541 L999.872 680.541 L999.313 680.541 L998.754 680.541 L998.194 680.541 L997.635 680.541 L997.076 680.541 L996.517 680.541 L995.957 680.541 L995.398 680.541 L994.839 680.541 L994.28 680.541 L993.72 680.541 L993.161 680.541 L992.602 680.541 L992.043 680.541 L991.483 680.541 L990.924 680.541 L990.365 680.541 L989.806 680.541 L989.246 680.541 L988.687 680.541 L988.128 680.541 L987.569 680.541 L987.009 680.541 L986.45 680.541 L985.891 680.541 L985.332 680.541 L984.772 680.541 L984.213 680.541 L983.654 680.541 L983.095 680.541 L982.535 680.541 L981.976 680.541 L981.417 680.541 L980.858 680.541 L980.298 680.541 L979.739 680.541 L979.18 680.541 L978.621 680.541 L978.061 680.541 L977.502 680.541 L976.943 680.541 L976.384 680.541 L975.824 680.541 L975.265 680.541 L974.706 680.541 L974.147 680.541 L973.587 680.541 L973.028 680.541 L972.469 680.541 L971.91 680.541 L971.35 680.541 L970.791 680.541 L970.232 680.541 L969.673 680.541 L969.113 680.541 L968.554 680.541 L967.995 680.541 L967.436 680.541 L966.876 680.541 L966.317 680.541 L965.758 680.541 L965.199 680.541 L964.639 680.541 L964.08 680.541 L963.521 680.541 L962.962 680.541 L962.402 680.541 L961.843 680.541 L961.284 680.541 L960.725 680.541 L960.165 680.541 L959.606 680.541 L959.047 680.541 L958.488 680.541 L957.928 680.541 L957.369 680.541 L956.81 680.541 L956.251 680.541 L955.691 680.541 L955.132 680.541 L954.573 680.541 L954.014 680.541 L953.454 680.541 L952.895 680.541 L952.336 680.541 L951.777 680.541 L951.217 680.541 L950.658 680.541 L950.099 680.541 L949.54 680.541 L948.98 680.541 L948.421 680.541 L947.862 680.541 L947.303 680.541 L946.743 680.541 L946.184 680.541 L945.625 680.541 L945.066 680.541 L944.506 680.541 L943.947 680.541 L943.388 680.541 L942.829 680.541 L942.269 680.541 L941.71 680.541 L941.151 680.541 L940.592 680.541 L940.032 680.541 L939.473 680.541 L938.914 680.541 L938.355 680.541 L937.795 680.541 L937.236 680.541 L936.677 680.541 L936.118 680.541 L935.558 680.541 L934.999 680.541 L934.44 680.541 L933.881 680.541 L933.321 680.541 L932.762 680.541 L932.203 680.541 L931.644 680.541 L931.084 680.541 L930.525 680.541 L929.966 680.541 L929.406 680.541 L928.847 680.541 L928.288 680.541 L927.729 680.541 L927.169 680.541 L926.61 680.541 L926.051 680.541 L925.492 680.541 L924.932 680.541 L924.373 680.541 L923.814 680.541 L923.255 680.541 L922.695 680.541 L922.136 680.541 L921.577 680.541 L921.018 680.541 L920.458 680.541 L919.899 680.541 L919.34 680.541 L918.781 680.541 L918.221 680.541 L917.662 680.541 L917.103 680.541 L916.544 680.541 L915.984 680.541 L915.425 680.541 L914.866 680.541 L914.307 680.541 L913.747 680.541 L913.188 680.541 L912.629 680.541 L912.07 680.541 L911.51 680.541 L910.951 680.541 L910.392 680.541 L909.833 680.541 L909.273 680.541 L908.714 680.541 L908.155 680.541 L907.596 680.541 L907.036 680.541 L906.477 680.541 L905.918 680.541 L905.359 680.541 L904.799 680.541 L904.24 680.541 L903.681 680.541 L903.122 680.541 L902.562 680.541 L902.003 680.541 L901.444 680.541 L900.885 680.541 L900.325 680.541 L899.766 680.541 L899.207 680.541 L898.648 680.541 L898.088 680.541 L897.529 680.541 L896.97 680.541 L896.411 680.541 L895.851 680.541 L895.292 680.541 L894.733 680.541 L894.174 680.541 L893.614 680.541 L893.055 680.541 L892.496 680.541 L891.937 680.541 L891.377 680.541 L890.818 680.541 L890.259 680.541 L889.7 680.541 L889.14 680.541 L888.581 680.541 L888.022 680.541 L887.463 680.541 L886.903 680.541 L886.344 680.541 L885.785 680.541 L885.226 680.541 L884.666 680.541 L884.107 680.541 L883.548 680.541 L882.989 680.541 L882.429 680.541 L881.87 680.541 L881.311 680.541 L880.752 680.541 L880.192 680.541 L879.633 680.541 L879.074 680.541 L878.515 680.541 L877.955 680.541 L877.396 680.541 L876.837 680.541 L876.278 680.541 L875.718 680.541 L875.159 680.541 L874.6 680.541 L874.041 680.541 L873.481 680.541 L872.922 680.541 L872.363 680.541 L871.804 680.541 L871.244 680.541 L870.685 680.541 L870.126 680.541 L869.567 680.541 L869.007 680.541 L868.448 680.541 L867.889 680.541 L867.33 680.541 L866.77 680.541 L866.211 680.541 L865.652 680.541 L865.093 680.541 L864.533 680.541 L863.974 680.541 L863.415 680.541 L862.856 680.541 L862.296 680.541 L861.737 680.541 L861.178 680.541 L860.619 680.541 L860.059 680.541 L859.5 680.541 L858.941 680.541 L858.382 680.541 L857.822 680.541 L857.263 680.541 L856.704 680.541 L856.145 680.541 L855.585 680.541 L855.026 680.541 L854.467 680.541 L853.908 680.541 L853.348 680.541 L852.789 680.541 L852.23 680.541 L851.671 680.541 L851.111 680.541 L850.552 680.541 L849.993 680.541 L849.434 680.541 L848.874 680.541 L848.315 680.541 L847.756 680.541 L847.197 680.541 L846.637 680.541 L846.078 680.541 L845.519 680.541 L844.96 680.541 L844.4 680.541 L843.841 680.541 L843.282 680.541 L842.723 680.541 L842.163 680.541 L841.604 680.541 L841.045 680.541 L840.486 680.541 L839.926 680.541 L839.367 680.541 L838.808 680.541 L838.249 680.541 L837.689 680.541 L837.13 680.541 L836.571 680.541 L836.012 680.541 L835.452 680.541 L834.893 680.541 L834.334 680.541 L833.775 680.541 L833.215 680.541 L832.656 680.541 L832.097 680.541 L831.538 680.541 L830.978 680.541 L830.419 680.541 L829.86 680.541 L829.301 680.541 L828.741 680.541 L828.182 680.541 L827.623 680.541 L827.064 680.541 L826.504 680.541 L825.945 680.541 L825.386 680.541 L824.827 680.541 L824.267 680.541 L823.708 680.541 L823.149 680.541 L822.59 680.541 L822.03 680.541 L821.471 680.541 L820.912 680.541 L820.353 680.541 L819.793 680.541 L819.234 680.541 L818.675 680.541 L818.116 680.541 L817.556 680.541 L816.997 680.541 L816.438 680.541 L815.879 680.541 L815.319 680.541 L814.76 680.541 L814.201 680.541 L813.642 680.541 L813.082 680.541 L812.523 680.541 L811.964 680.541 L811.405 680.541 L810.845 680.541 L810.286 680.541 L809.727 680.541 L809.168 680.541 L808.608 680.541 L808.049 680.541 L807.49 680.541 L806.931 680.541 L806.371 680.541 L805.812 680.541 L805.253 680.541 L804.693 680.541 L804.134 680.541 L803.575 680.541 L803.016 680.541 L802.456 680.541 L801.897 680.541 L801.338 680.541 L800.779 680.541 L800.219 680.541 L799.66 680.541 L799.101 680.541 L798.542 680.541 L797.982 680.541 L797.423 680.541 L796.864 680.541 L796.305 680.541 L795.745 680.541 L795.186 680.541 L794.627 680.541 L794.068 680.541 L793.508 680.541 L792.949 680.541 L792.39 680.541 L791.831 680.541 L791.271 680.541 L790.712 680.541 L790.153 680.541 L789.594 680.541 L789.034 680.541 L788.475 680.541 L787.916 680.541 L787.357 680.541 L786.797 680.541 L786.238 680.541 L785.679 680.541 L785.12 680.541 L784.56 680.541 L784.001 680.541 L783.442 680.541 L782.883 680.541 L782.323 680.541 L781.764 680.541 L781.205 680.541 L780.646 680.541 L780.086 680.541 L779.527 680.541 L778.968 680.541 L778.409 680.541 L777.849 680.541 L777.29 680.541 L776.731 680.541 L776.172 680.541 L775.612 680.541 L775.053 680.541 L774.494 680.541 L773.935 680.541 L773.375 680.541 L772.816 680.541 L772.257 680.541 L771.698 680.541 L771.138 680.541 L770.579 680.541 L770.02 680.541 L769.461 680.541 L768.901 680.541 L768.342 680.541 L767.783 680.541 L767.224 680.541 L766.664 680.541 L766.105 680.541 L765.546 680.541 L764.987 680.541 L764.427 680.541 L763.868 680.541 L763.309 680.541 L762.75 680.541 L762.19 680.541 L761.631 680.541 L761.072 680.541 L760.513 680.541 L759.953 680.541 L759.394 680.541 L758.835 680.541 L758.276 680.541 L757.716 680.541 L757.157 680.541 L756.598 680.541 L756.039 680.541 L755.479 680.541 L754.92 680.541 L754.361 680.541 L753.802 680.541 L753.242 680.541 L752.683 680.541 L752.124 680.541 L751.565 680.541 L751.005 680.541 L750.446 680.541 L749.887 680.541 L749.328 680.541 L748.768 680.541 L748.209 680.541 L747.65 680.541 L747.091 680.541 L746.531 680.541 L745.972 680.541 L745.413 680.541 L744.854 680.541 L744.294 680.541 L743.735 680.541 L743.176 680.541 L742.617 680.541 L742.057 680.541 L741.498 680.541 L740.939 680.541 L740.38 680.541 L739.82 680.541 L739.261 680.541 L738.702 680.541 L738.143 680.541 L737.583 680.541 L737.024 680.541 L736.465 680.541 L735.906 680.541 L735.346 680.541 L734.787 680.541 L734.228 680.541 L733.669 680.541 L733.109 680.541 L732.55 680.541 L731.991 680.541 L731.432 680.541 L730.872 680.541 L730.313 680.541 L729.754 680.541 L729.195 680.541 L728.635 680.541 L728.076 680.541 L727.517 680.541 L726.958 680.541 L726.398 680.541 L725.839 680.541 L725.28 680.541 L724.721 680.541 L724.161 680.541 L723.602 680.541 L723.043 680.541 L722.484 680.541 L721.924 680.541 L721.365 680.541 L720.806 680.541 L720.247 680.541  Z\" fill=\"#e26f46\" fill-rule=\"evenodd\" fill-opacity=\"0.5\"/>\n<polyline clip-path=\"url(#clip763)\" style=\"stroke:#e26f46; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"720.247,685.428 720.806,685.428 721.365,685.428 721.924,685.428 722.484,685.428 723.043,685.428 723.602,685.428 724.161,685.428 724.721,685.428 725.28,685.428 725.839,685.428 726.398,685.428 726.958,685.428 727.517,685.428 728.076,685.428 728.635,685.428 729.195,685.428 729.754,685.428 730.313,685.428 730.872,685.428 731.432,685.428 731.991,685.428 732.55,685.428 733.109,685.428 733.669,685.428 734.228,685.428 734.787,685.428 735.346,685.428 735.906,685.428 736.465,685.428 737.024,685.428 737.583,685.428 738.143,685.428 738.702,685.428 739.261,685.428 739.82,685.428 740.38,685.428 740.939,685.428 741.498,685.428 742.057,685.428 742.617,685.428 743.176,685.428 743.735,685.428 744.294,685.428 744.854,685.428 745.413,685.428 745.972,685.428 746.531,685.428 747.091,685.428 747.65,685.428 748.209,685.428 748.768,685.428 749.328,685.428 749.887,685.428 750.446,685.428 751.005,685.428 751.565,685.428 752.124,685.428 752.683,685.428 753.242,685.428 753.802,685.428 754.361,685.428 754.92,685.428 755.479,685.428 756.039,685.428 756.598,685.428 757.157,685.428 757.716,685.428 758.276,685.428 758.835,685.428 759.394,685.428 759.953,685.428 760.513,685.428 761.072,685.428 761.631,685.428 762.19,685.428 762.75,685.428 763.309,685.428 763.868,685.428 764.427,685.428 764.987,685.428 765.546,685.428 766.105,685.428 766.664,685.428 767.224,685.428 767.783,685.428 768.342,685.428 768.901,685.428 769.461,685.428 770.02,685.428 770.579,685.428 771.138,685.428 771.698,685.428 772.257,685.428 772.816,685.428 773.375,685.428 773.935,685.428 774.494,685.428 775.053,685.428 775.612,685.428 776.172,685.428 776.731,685.428 777.29,685.428 777.849,685.428 778.409,685.428 778.968,685.428 779.527,685.428 780.086,685.428 780.646,685.428 781.205,685.428 781.764,685.428 782.323,685.428 782.883,685.428 783.442,685.428 784.001,685.428 784.56,685.428 785.12,685.428 785.679,685.428 786.238,685.428 786.797,685.428 787.357,685.428 787.916,685.428 788.475,685.428 789.034,685.428 789.594,685.428 790.153,685.428 790.712,685.428 791.271,685.428 791.831,685.428 792.39,685.428 792.949,685.428 793.508,685.428 794.068,685.428 794.627,685.428 795.186,685.428 795.745,685.428 796.305,685.428 796.864,685.428 797.423,685.428 797.982,685.428 798.542,685.428 799.101,685.428 799.66,685.428 800.219,685.428 800.779,685.428 801.338,685.428 801.897,685.428 802.456,685.428 803.016,685.428 803.575,685.428 804.134,685.428 804.693,685.428 805.253,685.428 805.812,685.428 806.371,685.428 806.931,685.428 807.49,685.428 808.049,685.428 808.608,685.428 809.168,685.428 809.727,685.428 810.286,685.428 810.845,685.428 811.405,685.428 811.964,685.428 812.523,685.428 813.082,685.428 813.642,685.428 814.201,685.428 814.76,685.428 815.319,685.428 815.879,685.428 816.438,685.428 816.997,685.428 817.556,685.428 818.116,685.428 818.675,685.428 819.234,685.428 819.793,685.428 820.353,685.428 820.912,685.428 821.471,685.428 822.03,685.428 822.59,685.428 823.149,685.428 823.708,685.428 824.267,685.428 824.827,685.428 825.386,685.428 825.945,685.428 826.504,685.428 827.064,685.428 827.623,685.428 828.182,685.428 828.741,685.428 829.301,685.428 829.86,685.428 830.419,685.428 830.978,685.428 831.538,685.428 832.097,685.428 832.656,685.428 833.215,685.428 833.775,685.428 834.334,685.428 834.893,685.428 835.452,685.428 836.012,685.428 836.571,685.428 837.13,685.428 837.689,685.428 838.249,685.428 838.808,685.428 839.367,685.428 839.926,685.428 840.486,685.428 841.045,685.428 841.604,685.428 842.163,685.428 842.723,685.428 843.282,685.428 843.841,685.428 844.4,685.428 844.96,685.428 845.519,685.428 846.078,685.428 846.637,685.428 847.197,685.428 847.756,685.428 848.315,685.428 848.874,685.428 849.434,685.428 849.993,685.428 850.552,685.428 851.111,685.428 851.671,685.428 852.23,685.428 852.789,685.428 853.348,685.428 853.908,685.428 854.467,685.428 855.026,685.428 855.585,685.428 856.145,685.428 856.704,685.428 857.263,685.428 857.822,685.428 858.382,685.428 858.941,685.428 859.5,685.428 860.059,685.428 860.619,685.428 861.178,685.428 861.737,685.428 862.296,685.428 862.856,685.428 863.415,685.428 863.974,685.428 864.533,685.428 865.093,685.428 865.652,685.428 866.211,685.428 866.77,685.428 867.33,685.428 867.889,685.428 868.448,685.428 869.007,685.428 869.567,685.428 870.126,685.428 870.685,685.428 871.244,685.428 871.804,685.428 872.363,685.428 872.922,685.428 873.481,685.428 874.041,685.428 874.6,685.428 875.159,685.428 875.718,685.428 876.278,685.428 876.837,685.428 877.396,685.428 877.955,685.428 878.515,685.428 879.074,685.428 879.633,685.428 880.192,685.428 880.752,685.428 881.311,685.428 881.87,685.428 882.429,685.428 882.989,685.428 883.548,685.428 884.107,685.428 884.666,685.428 885.226,685.428 885.785,685.428 886.344,685.428 886.903,685.428 887.463,685.428 888.022,685.428 888.581,685.428 889.14,685.428 889.7,685.428 890.259,685.428 890.818,685.428 891.377,685.428 891.937,685.428 892.496,685.428 893.055,685.428 893.614,685.428 894.174,685.428 894.733,685.428 895.292,685.428 895.851,685.428 896.411,685.428 896.97,685.428 897.529,685.428 898.088,685.428 898.648,685.428 899.207,685.428 899.766,685.428 900.325,685.428 900.885,685.428 901.444,685.428 902.003,685.428 902.562,685.428 903.122,685.428 903.681,685.428 904.24,685.428 904.799,685.428 905.359,685.428 905.918,685.428 906.477,685.428 907.036,685.428 907.596,685.428 908.155,685.428 908.714,685.428 909.273,685.428 909.833,685.428 910.392,685.428 910.951,685.428 911.51,685.428 912.07,685.428 912.629,685.428 913.188,685.428 913.747,685.428 914.307,685.428 914.866,685.428 915.425,685.428 915.984,685.428 916.544,685.428 917.103,685.428 917.662,685.428 918.221,685.428 918.781,685.428 919.34,685.428 919.899,685.428 920.458,685.428 921.018,685.428 921.577,685.428 922.136,685.428 922.695,685.428 923.255,685.428 923.814,685.428 924.373,685.428 924.932,685.428 925.492,685.428 926.051,685.428 926.61,685.428 927.169,685.428 927.729,685.428 928.288,685.428 928.847,685.428 929.406,685.428 929.966,685.428 930.525,685.428 931.084,685.428 931.644,685.428 932.203,685.428 932.762,685.428 933.321,685.428 933.881,685.428 934.44,685.428 934.999,685.428 935.558,685.428 936.118,685.428 936.677,685.428 937.236,685.428 937.795,685.428 938.355,685.428 938.914,685.428 939.473,685.428 940.032,685.428 940.592,685.428 941.151,685.428 941.71,685.428 942.269,685.428 942.829,685.428 943.388,685.428 943.947,685.428 944.506,685.428 945.066,685.428 945.625,685.428 946.184,685.428 946.743,685.428 947.303,685.428 947.862,685.428 948.421,685.428 948.98,685.428 949.54,685.428 950.099,685.428 950.658,685.428 951.217,685.428 951.777,685.428 952.336,685.428 952.895,685.428 953.454,685.428 954.014,685.428 954.573,685.428 955.132,685.428 955.691,685.428 956.251,685.428 956.81,685.428 957.369,685.428 957.928,685.428 958.488,685.428 959.047,685.428 959.606,685.428 960.165,685.428 960.725,685.428 961.284,685.428 961.843,685.428 962.402,685.428 962.962,685.428 963.521,685.428 964.08,685.428 964.639,685.428 965.199,685.428 965.758,685.428 966.317,685.428 966.876,685.428 967.436,685.428 967.995,685.428 968.554,685.428 969.113,685.428 969.673,685.428 970.232,685.428 970.791,685.428 971.35,685.428 971.91,685.428 972.469,685.428 973.028,685.428 973.587,685.428 974.147,685.428 974.706,685.428 975.265,685.428 975.824,685.428 976.384,685.428 976.943,685.428 977.502,685.428 978.061,685.428 978.621,685.428 979.18,685.428 979.739,685.428 980.298,685.428 980.858,685.428 981.417,685.428 981.976,685.428 982.535,685.428 983.095,685.428 983.654,685.428 984.213,685.428 984.772,685.428 985.332,685.428 985.891,685.428 986.45,685.428 987.009,685.428 987.569,685.428 988.128,685.428 988.687,685.428 989.246,685.428 989.806,685.428 990.365,685.428 990.924,685.428 991.483,685.428 992.043,685.428 992.602,685.428 993.161,685.428 993.72,685.428 994.28,685.428 994.839,685.428 995.398,685.428 995.957,685.428 996.517,685.428 997.076,685.428 997.635,685.428 998.194,685.428 998.754,685.428 999.313,685.428 999.872,685.428 1000.43,685.428 1000.99,685.428 1001.55,685.428 1002.11,685.428 1002.67,685.428 1003.23,685.428 1003.79,685.428 1004.35,685.428 1004.91,685.428 1005.46,685.428 1006.02,685.428 1006.58,685.428 1007.14,685.428 1007.7,685.428 1008.26,685.428 1008.82,685.428 1009.38,685.428 1009.94,685.428 1010.5,685.428 1011.06,685.428 1011.62,685.428 1012.18,685.428 1012.73,685.428 1013.29,685.428 1013.85,685.428 1014.41,685.428 1014.97,685.428 1015.53,685.428 1016.09,685.428 1016.65,685.428 1017.21,685.428 1017.77,685.428 1018.33,685.428 1018.89,685.428 1019.45,685.428 1020.01,685.428 1020.56,685.428 1021.12,685.428 1021.68,685.428 1022.24,685.428 1022.8,685.428 1023.36,685.428 1023.92,685.428 1024.48,685.428 1025.04,685.428 1025.6,685.428 1026.16,685.428 1026.72,685.428 1027.28,685.428 1027.83,685.428 1028.39,685.428 1028.95,685.428 1029.51,685.428 1030.07,685.428 1030.63,685.428 1031.19,685.428 1031.75,685.428 1032.31,685.428 1032.87,685.428 1033.43,685.428 1033.99,685.428 1034.55,685.428 1035.1,685.428 1035.66,685.428 1036.22,685.428 1036.78,685.428 1037.34,685.428 1037.9,685.428 1038.46,685.428 1039.02,685.428 1039.58,685.428 1040.14,685.428 1040.7,685.428 1041.26,685.428 1041.82,685.428 1042.38,685.428 1042.93,685.428 1043.49,685.428 1044.05,685.428 1044.61,685.428 1045.17,685.428 1045.73,685.428 1046.29,685.428 1046.85,685.428 1047.41,685.428 1047.97,685.428 1048.53,685.428 1049.09,685.428 1049.65,685.428 1050.2,685.428 1050.76,685.428 1051.32,685.428 1051.88,685.428 1052.44,685.428 1053,685.428 1053.56,685.428 1054.12,685.428 1054.68,685.428 1055.24,685.428 1055.8,685.428 1056.36,685.428 1056.92,685.428 1057.48,685.428 1058.03,685.428 1058.59,685.428 1059.15,685.428 1059.71,685.428 1060.27,685.428 1060.83,685.428 1061.39,685.428 1061.95,685.428 1062.51,685.428 1063.07,685.428 1063.63,685.428 1064.19,685.428 1064.75,685.428 1065.3,685.428 1065.86,685.428 1066.42,685.428 1066.98,685.428 1067.54,685.428 1068.1,685.428 1068.66,685.428 1069.22,685.428 1069.78,685.428 1070.34,685.428 1070.9,685.428 1071.46,685.428 1072.02,685.428 1072.57,685.428 1073.13,685.428 1073.69,685.428 1074.25,685.428 1074.81,685.428 1075.37,685.428 1075.93,685.428 1076.49,685.428 1077.05,685.428 1077.61,685.428 1078.17,685.428 1078.73,685.428 1079.29,685.428 1079.85,685.428 1080.4,685.428 1080.96,685.428 1081.52,685.428 1082.08,685.428 1082.64,685.428 1083.2,685.428 1083.76,685.428 1084.32,685.428 1084.88,685.428 1085.44,685.428 1086,685.428 1086.56,685.428 1087.12,685.428 1087.67,685.428 1088.23,685.428 1088.79,685.428 1089.35,685.428 1089.91,685.428 1090.47,685.428 1091.03,685.428 1091.59,685.428 1092.15,685.428 1092.71,685.428 1093.27,685.428 1093.83,685.428 1094.39,685.428 1094.94,685.428 1095.5,685.428 1096.06,685.428 1096.62,685.428 1097.18,685.428 1097.74,685.428 1098.3,685.428 1098.86,685.428 1099.42,685.428 1099.98,685.428 1100.54,685.428 1101.1,685.428 1101.66,685.428 1102.22,685.428 1102.77,685.428 1103.33,685.428 1103.89,685.428 1104.45,685.428 1105.01,685.428 1105.57,685.428 1106.13,685.428 1106.69,685.428 1107.25,685.428 1107.81,685.428 1108.37,685.428 1108.93,685.428 1109.49,685.428 1110.04,685.428 1110.6,685.428 1111.16,685.428 1111.72,685.428 1112.28,685.428 1112.84,685.428 1113.4,685.428 1113.96,685.428 1114.52,685.428 1115.08,685.428 1115.64,685.428 1116.2,685.428 1116.76,685.428 1117.31,685.428 1117.87,685.428 1118.43,685.428 1118.99,685.428 1119.55,685.428 1120.11,685.428 1120.67,685.428 1121.23,685.428 1121.79,685.428 1122.35,685.428 1122.91,685.428 1123.47,685.428 1124.03,685.428 1124.59,685.428 1125.14,685.428 1125.7,685.428 1126.26,685.428 1126.82,685.428 1127.38,685.428 1127.94,685.428 1128.5,685.428 1129.06,685.428 1129.62,685.428 1130.18,685.428 1130.74,685.428 1131.3,685.428 1131.86,685.428 1132.41,685.428 1132.97,685.428 1133.53,685.428 1134.09,685.428 1134.65,685.428 1135.21,685.428 1135.77,685.428 1136.33,685.428 1136.89,685.428 1137.45,685.428 1138.01,685.428 1138.57,685.428 1139.13,685.428 1139.68,685.428 1140.24,685.428 1140.8,685.428 1141.36,685.428 1141.92,685.428 1142.48,685.428 1143.04,685.428 1143.6,685.428 1144.16,685.428 1144.72,685.428 1145.28,685.428 1145.84,685.428 1146.4,685.428 1146.96,685.428 1147.51,685.428 1148.07,685.428 1148.63,685.428 1149.19,685.428 1149.75,685.428 1150.31,685.428 1150.87,685.428 1151.43,685.428 1151.99,685.428 1152.55,685.428 1153.11,685.428 1153.67,685.428 1154.23,685.428 1154.78,685.428 1155.34,685.428 1155.9,685.428 1156.46,685.428 1157.02,685.428 1157.58,685.428 1158.14,685.428 1158.7,685.428 1159.26,685.428 1159.82,685.428 1160.38,685.428 1160.94,685.428 1161.5,685.428 1162.05,685.428 1162.61,685.428 1163.17,685.428 1163.73,685.428 1164.29,685.428 1164.85,685.428 1165.41,685.428 1165.97,685.428 1166.53,685.428 1167.09,685.428 1167.65,685.428 1168.21,685.428 1168.77,685.428 1169.33,685.428 1169.88,685.428 1170.44,685.428 1171,685.428 1171.56,685.428 1172.12,685.428 1172.68,685.428 1173.24,685.428 1173.8,685.428 1174.36,685.428 1174.92,685.428 1175.48,685.428 1176.04,685.428 1176.6,685.428 1177.15,685.428 1177.71,685.428 1178.27,685.428 1178.83,685.428 1179.39,685.428 1179.95,685.428 1180.51,685.428 1181.07,685.428 1181.63,685.428 1182.19,685.428 1182.75,685.428 1183.31,685.428 1183.87,685.428 1184.43,685.428 1184.98,685.428 1185.54,685.428 1186.1,685.428 1186.66,685.428 1187.22,685.428 1187.78,685.428 1188.34,685.428 1188.9,685.428 1189.46,685.428 1190.02,685.428 1190.58,685.428 1191.14,685.428 1191.7,685.428 1192.25,685.428 1192.81,685.428 1193.37,685.428 1193.93,685.428 1194.49,685.428 1195.05,685.428 1195.61,685.428 1196.17,685.428 1196.73,685.428 1197.29,685.428 1197.85,685.428 1198.41,685.428 1198.97,685.428 1199.52,685.428 1200.08,685.428 1200.64,685.428 1201.2,685.428 1201.76,685.428 1202.32,685.428 1202.88,685.428 1203.44,685.428 1204,685.428 1204.56,685.428 1205.12,685.428 1205.68,685.428 1206.24,685.428 1206.8,685.428 1207.35,685.428 1207.91,685.428 1208.47,685.428 1209.03,685.428 1209.59,685.428 1210.15,685.428 1210.71,685.428 1211.27,685.428 1211.83,685.428 1212.39,685.428 1212.95,685.428 1213.51,685.428 1214.07,685.428 1214.62,685.428 1215.18,685.428 1215.74,685.428 1216.3,685.428 1216.86,685.428 1217.42,685.428 1217.98,685.428 1218.54,685.428 1219.1,685.428 1219.66,685.428 1220.22,685.428 1220.78,685.428 1221.34,685.428 1221.89,685.428 1222.45,685.428 1223.01,685.428 1223.57,685.428 1224.13,685.428 1224.69,685.428 1225.25,685.428 1225.81,685.428 1226.37,685.428 1226.93,685.428 1227.49,685.428 1228.05,685.428 1228.61,685.428 1229.17,685.428 1229.72,685.428 1230.28,685.428 1230.84,685.428 1231.4,685.428 1231.96,685.428 1232.52,685.428 1233.08,685.428 1233.64,685.428 1234.2,685.428 1234.76,685.428 1235.32,685.428 1235.88,685.428 1236.44,685.428 1236.99,685.428 1237.55,685.428 1238.11,685.428 1238.67,685.428 1239.23,685.428 1239.79,685.428 1240.35,685.428 1240.91,685.428 1241.47,685.428 1242.03,685.428 1242.59,685.428 1243.15,685.428 1243.71,685.428 1244.26,685.428 1244.82,685.428 1245.38,685.428 1245.94,685.428 1246.5,685.428 1247.06,685.428 1247.62,685.428 1248.18,685.428 1248.74,685.428 1249.3,685.428 1249.86,685.428 1250.42,685.428 1250.98,685.428 1251.54,685.428 1252.09,685.428 1252.65,685.428 1253.21,685.428 1253.77,685.428 1254.33,685.428 1254.89,685.428 1255.45,685.428 1256.01,685.428 1256.57,685.428 1257.13,685.428 1257.69,685.428 1258.25,685.428 1258.81,685.428 1259.36,685.428 1259.92,685.428 1260.48,685.428 1261.04,685.428 1261.6,685.428 1262.16,685.428 1262.72,685.428 1263.28,685.428 1263.84,685.428 1264.4,685.428 1264.96,685.428 1265.52,685.428 1266.08,685.428 1266.63,685.428 1267.19,685.428 1267.75,685.428 1268.31,685.428 1268.87,685.428 1269.43,685.428 1269.99,685.428 1270.55,685.428 1271.11,685.428 1271.67,685.428 1272.23,685.428 1272.79,685.428 1273.35,685.428 1273.91,685.428 1274.46,685.428 1275.02,685.428 1275.58,685.428 1276.14,685.428 1276.7,685.428 1277.26,685.428 1277.82,685.428 1278.38,685.428 1278.94,685.428 1279.5,685.428 1280.06,685.428 1280.62,685.428 1281.18,685.428 1281.73,685.428 1282.29,685.428 1282.85,685.428 1283.41,685.428 1283.97,685.428 1284.53,685.428 1285.09,685.428 1285.65,685.428 1286.21,685.428 1286.77,685.428 1287.33,685.428 1287.89,685.428 1288.45,685.428 1289,685.428 1289.56,685.428 1290.12,685.428 1290.68,685.428 1291.24,685.428 1291.8,685.428 1292.36,685.428 1292.92,685.428 1293.48,685.428 1294.04,685.428 1294.6,685.428 1295.16,685.428 1295.72,685.428 1296.28,685.428 1296.83,685.428 1297.39,685.428 1297.95,685.428 1298.51,685.428 1299.07,685.428 1299.63,685.428 1300.19,685.428 1300.75,685.428 1301.31,685.428 1301.87,685.428 1302.43,685.428 1302.99,685.428 1303.55,685.428 1304.1,685.428 1304.66,685.428 1305.22,685.428 1305.78,685.428 1306.34,685.428 1306.9,685.428 1307.46,685.428 1308.02,685.428 1308.58,685.428 1309.14,685.428 1309.7,685.428 1310.26,685.428 1310.82,685.428 1311.38,685.428 1311.93,685.428 1312.49,685.428 1313.05,685.428 1313.61,685.428 1314.17,685.428 1314.73,685.428 1315.29,685.428 1315.85,685.428 1316.41,685.428 1316.97,685.428 1317.53,685.428 1318.09,685.428 1318.65,685.428 1319.2,685.428 1319.76,685.428 1320.32,685.428 1320.88,685.428 1321.44,685.428 1322,685.428 1322.56,685.428 1323.12,685.428 1323.68,685.428 1324.24,685.428 1324.8,685.428 1325.36,685.428 1325.92,685.428 1326.47,685.428 1327.03,685.428 1327.59,685.428 1328.15,685.428 1328.71,685.428 1329.27,685.428 1329.83,685.428 1330.39,685.428 1330.95,685.428 1331.51,685.428 1332.07,685.428 1332.63,685.428 1333.19,685.428 1333.75,685.428 1334.3,685.428 1334.86,685.428 1335.42,685.428 1335.98,685.428 1336.54,685.428 1337.1,685.428 1337.66,685.428 1338.22,685.428 1338.78,685.428 1339.34,685.428 1339.9,685.428 1340.46,685.428 1341.02,685.428 1341.57,685.428 1342.13,685.428 1342.69,685.428 1343.25,685.428 1343.81,685.428 1344.37,685.428 1344.93,685.428 1345.49,685.428 1346.05,685.428 1346.61,685.428 1347.17,685.428 1347.73,685.428 1348.29,685.428 1348.84,685.428 1349.4,685.428 1349.96,685.428 1350.52,685.428 1351.08,685.428 1351.64,685.428 1352.2,685.428 1352.76,685.428 1353.32,685.428 1353.88,685.428 1354.44,685.428 1355,685.428 1355.56,685.428 1356.12,685.428 1356.67,685.428 1357.23,685.428 1357.79,685.428 1358.35,685.428 1358.91,685.428 1359.47,685.428 1360.03,685.428 1360.59,685.428 1361.15,685.428 1361.71,685.428 1362.27,685.428 1362.83,685.428 1363.39,685.428 1363.94,685.428 1364.5,685.428 1365.06,685.428 1365.62,685.428 1366.18,685.428 1366.74,685.428 1367.3,685.428 1367.86,685.428 1368.42,685.428 1368.98,685.428 1369.54,685.428 1370.1,685.428 1370.66,685.428 1371.21,685.428 1371.77,685.428 1372.33,685.428 1372.89,685.428 1373.45,685.428 1374.01,685.428 1374.57,685.428 1375.13,685.428 1375.69,685.428 1376.25,685.428 1376.81,685.428 1377.37,685.428 1377.93,685.428 1378.49,685.428 1379.04,685.428 1379.6,685.428 1380.16,685.428 1380.72,685.428 1381.28,685.428 1381.84,685.428 1382.4,685.428 1382.96,685.428 1383.52,685.428 1384.08,685.428 1384.64,685.428 1385.2,685.428 1385.76,685.428 1386.31,685.428 1386.87,685.428 1387.43,685.428 1387.99,685.428 1388.55,685.428 1389.11,685.428 1389.67,685.428 1390.23,685.428 1390.79,685.428 1391.35,685.428 1391.91,685.428 1392.47,685.428 1393.03,685.428 1393.58,685.428 1394.14,685.428 1394.7,685.428 1395.26,685.428 1395.82,685.428 1396.38,685.428 1396.94,685.428 1397.5,685.428 1398.06,685.428 1398.62,685.428 1399.18,685.428 1399.74,685.428 1400.3,685.428 1400.86,685.428 1401.41,685.428 1401.97,685.428 1402.53,685.428 1403.09,685.428 1403.65,685.428 1404.21,685.428 1404.77,685.428 1405.33,685.428 1405.89,685.428 1406.45,685.428 1407.01,685.428 1407.57,685.428 1408.13,685.428 1408.68,685.428 1409.24,685.428 1409.8,685.428 1410.36,685.428 1410.92,685.428 1411.48,685.428 1412.04,685.428 1412.6,685.428 1413.16,685.428 1413.72,685.428 1414.28,685.428 1414.84,685.428 1415.4,685.428 1415.95,685.428 1416.51,685.428 1417.07,685.428 1417.63,685.428 1418.19,685.428 1418.75,685.428 1419.31,685.428 1419.87,685.428 1420.43,685.428 1420.99,685.428 1421.55,685.428 1422.11,685.428 1422.67,685.428 1423.23,685.428 1423.78,685.428 1424.34,685.428 1424.9,685.428 1425.46,685.428 1426.02,685.428 1426.58,685.428 1427.14,685.428 1427.7,685.428 1428.26,685.428 1428.82,685.428 1429.38,685.428 1429.94,685.428 1430.5,685.428 1431.05,685.428 1431.61,685.428 1432.17,685.428 1432.73,685.428 1433.29,685.428 1433.85,685.428 1434.41,685.428 1434.97,685.428 1435.53,685.428 1436.09,685.428 1436.65,685.428 1437.21,685.428 1437.77,685.428 1438.33,685.428 1438.88,685.428 1439.44,685.428 1440,685.428 1440.56,685.428 1441.12,685.428 1441.68,685.428 1442.24,685.428 1442.8,685.428 1443.36,685.428 1443.92,685.428 1444.48,685.428 1445.04,685.428 1445.6,685.428 1446.15,685.428 1446.71,685.428 1447.27,685.428 1447.83,685.428 1448.39,685.428 1448.95,685.428 1449.51,685.428 1450.07,685.428 1450.63,685.428 1451.19,685.428 1451.75,685.428 1452.31,685.428 1452.87,685.428 1453.42,685.428 1453.98,685.428 1454.54,685.428 1455.1,685.428 1455.66,685.428 1456.22,685.428 1456.78,685.428 1457.34,685.428 1457.9,685.428 1458.46,685.428 1459.02,685.428 1459.58,685.428 1460.14,685.428 1460.7,685.428 1461.25,685.428 1461.81,685.428 1462.37,685.428 1462.93,685.428 1463.49,685.428 1464.05,685.428 1464.61,685.428 1465.17,685.428 1465.73,685.428 1466.29,685.428 1466.85,685.428 1467.41,685.428 1467.97,685.428 1468.52,685.428 1469.08,685.428 1469.64,685.428 1470.2,685.428 1470.76,685.428 1471.32,685.428 1471.88,685.428 1472.44,685.428 1473,685.428 1473.56,685.428 1474.12,685.428 1474.68,685.428 1475.24,685.428 1475.79,685.428 1476.35,685.428 1476.91,685.428 1477.47,685.428 1478.03,685.428 1478.59,685.428 1479.15,685.428 1479.71,685.428 1480.27,685.428 1480.83,685.428 1481.39,685.428 1481.95,685.428 1482.51,685.428 1483.07,685.428 1483.62,685.428 1484.18,685.428 1484.74,685.428 1485.3,685.428 1485.86,685.428 1486.42,685.428 1486.98,685.428 1487.54,685.428 1488.1,685.428 1488.66,685.428 1489.22,685.428 1489.78,685.428 1490.34,685.428 1490.89,685.428 1491.45,685.428 1492.01,685.428 1492.57,685.428 1493.13,685.428 1493.69,685.428 1494.25,685.428 1494.81,685.428 1495.37,685.428 1495.93,685.428 1496.49,685.428 1497.05,685.428 1497.61,685.428 1498.16,685.428 1498.72,685.428 1499.28,685.428 1499.84,685.428 1500.4,685.428 1500.96,685.428 1501.52,685.428 1502.08,685.428 1502.64,685.428 1503.2,685.428 1503.76,685.428 1504.32,685.428 1504.88,685.428 1505.44,685.428 1505.99,685.428 1506.55,685.428 1507.11,685.428 1507.67,685.428 1508.23,685.428 1508.79,685.428 1509.35,685.428 1509.91,685.428 1510.47,685.428 1511.03,685.428 1511.59,685.428 1512.15,685.428 1512.71,685.428 1513.26,685.428 1513.82,685.428 1514.38,685.428 1514.94,685.428 1515.5,685.428 1516.06,685.428 1516.62,685.428 1517.18,685.428 1517.74,685.428 1518.3,685.428 1518.86,685.428 1519.42,685.428 1519.98,685.428 1520.53,685.428 1521.09,685.428 1521.65,685.428 1522.21,685.428 1522.77,685.428 1523.33,685.428 1523.89,685.428 1524.45,685.428 1525.01,685.428 1525.57,685.428 1526.13,685.428 1526.69,685.428 1527.25,685.428 1527.81,685.428 1528.36,685.428 1528.92,685.428 1529.48,685.428 1530.04,685.428 1530.6,685.428 1531.16,685.428 1531.72,685.428 1532.28,685.428 1532.84,685.428 1533.4,685.428 1533.96,685.428 1534.52,685.428 1535.08,685.428 1535.63,685.428 1536.19,685.428 1536.75,685.428 1537.31,685.428 1537.87,685.428 1538.43,685.428 1538.99,685.428 1539.55,685.428 1540.11,685.428 1540.67,685.428 1541.23,685.428 1541.79,685.428 1542.35,685.428 1542.9,685.428 1543.46,685.428 1544.02,685.428 1544.58,685.428 1545.14,685.428 1545.7,685.428 1546.26,685.428 1546.82,685.428 1547.38,685.428 1547.94,685.428 1548.5,685.428 1549.06,685.428 1549.62,685.428 1550.18,685.428 1550.73,685.428 1551.29,685.428 1551.85,685.428 1552.41,685.428 1552.97,685.428 1553.53,685.428 1554.09,685.428 1554.65,685.428 1555.21,685.428 1555.77,685.428 1556.33,685.428 1556.89,685.428 1557.45,685.428 1558,685.428 1558.56,685.428 1559.12,685.428 1559.68,685.428 1560.24,685.428 1560.8,685.428 1561.36,685.428 1561.92,685.428 1562.48,685.428 1563.04,685.428 1563.6,685.428 1564.16,685.428 1564.72,685.428 1565.28,685.428 1565.83,685.428 1566.39,685.428 1566.95,685.428 1567.51,685.428 1568.07,685.428 1568.63,685.428 1569.19,685.428 1569.75,685.428 1570.31,685.428 1570.87,685.428 1571.43,685.428 1571.99,685.428 1572.55,685.428 1573.1,685.428 1573.66,685.428 1574.22,685.428 1574.78,685.428 1575.34,685.428 1575.9,685.428 1576.46,685.428 1577.02,685.428 1577.58,685.428 1578.14,685.428 1578.7,685.428 1579.26,685.428 1579.82,685.428 1580.37,685.428 1580.93,685.428 1581.49,685.428 1582.05,685.428 1582.61,685.428 1583.17,685.428 1583.73,685.428 1584.29,685.428 1584.85,685.428 1585.41,685.428 1585.97,685.428 1586.53,685.428 1587.09,685.428 1587.65,685.428 1588.2,685.428 1588.76,685.428 1589.32,685.428 1589.88,685.428 1590.44,685.428 1591,685.428 1591.56,685.428 1592.12,685.428 1592.68,685.428 1593.24,685.428 1593.8,685.428 1594.36,685.428 1594.92,685.428 1595.47,685.428 1596.03,685.428 1596.59,685.428 1597.15,685.428 1597.71,685.428 1598.27,685.428 1598.83,685.428 1599.39,685.428 1599.95,685.428 1600.51,685.428 1601.07,685.428 1601.63,685.428 1602.19,685.428 1602.74,685.428 1603.3,685.428 1603.86,685.428 1604.42,685.428 1604.98,685.428 1605.54,685.428 1606.1,685.428 1606.66,685.428 1607.22,685.428 1607.78,685.428 1608.34,685.428 1608.9,685.428 1609.46,685.428 1610.02,685.428 1610.57,685.428 1611.13,685.428 1611.69,685.428 1612.25,685.428 1612.81,685.428 1613.37,685.428 1613.93,685.428 1614.49,685.428 1615.05,685.428 1615.61,685.428 1616.17,685.428 1616.73,685.428 1617.29,685.428 1617.84,685.428 1618.4,685.428 1618.96,685.428 1619.52,685.428 1620.08,685.428 1620.64,685.428 1621.2,685.428 1621.76,685.428 1622.32,685.428 1622.88,685.428 1623.44,685.428 1624,685.428 1624.56,685.428 1625.11,685.428 1625.67,685.428 1626.23,685.428 1626.79,685.428 1627.35,685.428 1627.91,685.428 1628.47,685.428 1629.03,685.428 1629.59,685.428 1630.15,685.428 1630.71,685.428 1631.27,685.428 1631.83,685.428 1632.39,685.428 1632.94,685.428 1633.5,685.428 1634.06,685.428 1634.62,685.428 1635.18,685.428 1635.74,685.428 1636.3,685.428 1636.86,685.428 1637.42,685.428 1637.98,685.428 1638.54,685.428 1639.1,685.428 1639.66,685.428 1640.21,685.428 1640.77,685.428 1641.33,685.428 1641.89,685.428 1642.45,685.428 1643.01,685.428 1643.57,685.428 1644.13,685.428 1644.69,685.428 1645.25,685.428 1645.81,685.428 1646.37,685.428 1646.93,685.428 1647.48,685.428 1648.04,685.428 1648.6,685.428 1649.16,685.428 1649.72,685.428 1650.28,685.428 1650.84,685.428 1651.4,685.428 1651.96,685.428 1652.52,685.428 1653.08,685.428 1653.64,685.428 1654.2,685.428 1654.76,685.428 1655.31,685.428 1655.87,685.428 1656.43,685.428 1656.99,685.428 1657.55,685.428 1658.11,685.428 1658.67,685.428 1659.23,685.428 1659.79,685.428 1660.35,685.428 1660.91,685.428 1661.47,685.428 1662.03,685.428 1662.58,685.428 1663.14,685.428 1663.7,685.428 1664.26,685.428 1664.82,685.428 1665.38,685.428 1665.94,685.428 1666.5,685.428 1667.06,685.428 1667.62,685.428 1668.18,685.428 1668.74,685.428 1669.3,685.428 1669.85,685.428 1670.41,685.428 1670.97,685.428 1671.53,685.428 1672.09,685.428 1672.65,685.428 1673.21,685.428 1673.77,685.428 1674.33,685.428 1674.89,685.428 1675.45,685.428 1676.01,685.428 1676.57,685.428 1677.13,685.428 1677.68,685.428 1678.24,685.428 1678.8,685.428 1679.36,685.428 1679.92,685.428 1680.48,685.428 1681.04,685.428 1681.6,685.428 1682.16,685.428 1682.72,685.428 1683.28,685.428 1683.84,685.428 1684.4,685.428 1684.95,685.428 1685.51,685.428 1686.07,685.428 1686.63,685.428 1687.19,685.428 1687.75,685.428 1688.31,685.428 1688.87,685.428 1689.43,685.428 1689.99,685.428 1690.55,685.428 1691.11,685.428 1691.67,685.428 1692.23,685.428 1692.78,685.428 1693.34,685.428 1693.9,685.428 1694.46,685.428 1695.02,685.428 1695.58,685.428 1696.14,685.428 1696.7,685.428 1697.26,685.428 1697.82,685.428 1698.38,685.428 1698.94,685.428 1699.5,685.428 1700.05,685.428 1700.61,685.428 1701.17,685.428 1701.73,685.428 1702.29,685.428 1702.85,685.428 1703.41,685.428 1703.97,685.428 1704.53,685.428 1705.09,685.428 1705.65,685.428 1706.21,685.428 1706.77,685.428 1707.32,685.428 1707.88,685.428 1708.44,685.428 1709,685.428 1709.56,685.428 1710.12,685.428 1710.68,685.428 1711.24,685.428 1711.8,685.428 1712.36,685.428 1712.92,685.428 1713.48,685.428 1714.04,685.428 1714.6,685.428 1715.15,685.428 1715.71,685.428 1716.27,685.428 1716.83,685.428 1717.39,685.428 1717.95,685.428 1718.51,685.428 1719.07,685.428 1719.63,685.428 1720.19,685.428 1720.75,685.428 1721.31,685.428 1721.87,685.428 1722.42,685.428 1722.98,685.428 1723.54,685.428 1724.1,685.428 1724.66,685.428 1725.22,685.428 1725.78,685.428 1726.34,685.428 1726.9,685.428 1727.46,685.428 1728.02,685.428 1728.58,685.428 1729.14,685.428 1729.69,685.428 1730.25,685.428 1730.81,685.428 1731.37,685.428 1731.93,685.428 1732.49,685.428 1733.05,685.428 1733.61,685.428 1734.17,685.428 1734.73,685.428 1735.29,685.428 1735.85,685.428 1736.41,685.428 1736.97,685.428 1737.52,685.428 1738.08,685.428 1738.64,685.428 1739.2,685.428 1739.76,685.428 1740.32,685.428 1740.88,685.428 1741.44,685.428 1742,685.428 1742.56,685.428 1743.12,685.428 1743.68,685.428 1744.24,685.428 1744.79,685.428 1745.35,685.428 1745.91,685.428 1746.47,685.428 1747.03,685.428 1747.59,685.428 1748.15,685.428 1748.71,685.428 1749.27,685.428 1749.83,685.428 1750.39,685.428 1750.95,685.428 1751.51,685.428 1752.06,685.428 1752.62,685.428 1753.18,685.428 1753.74,685.428 1754.3,685.428 1754.86,685.428 1755.42,685.428 1755.98,685.428 1756.54,685.428 1757.1,685.428 1757.66,685.428 1758.22,685.428 1758.78,685.428 1759.34,685.428 1759.89,685.428 1760.45,685.428 1761.01,685.428 1761.57,685.428 1762.13,685.428 1762.69,685.428 1763.25,685.428 1763.81,685.428 1764.37,685.428 1764.93,685.428 1765.49,685.428 1766.05,685.428 1766.61,685.428 1767.16,685.428 1767.72,685.428 1768.28,685.428 1768.84,685.428 1769.4,685.428 1769.96,685.428 1770.52,685.428 1771.08,685.428 1771.64,685.428 1772.2,685.428 1772.76,685.428 1773.32,685.428 1773.88,685.428 1774.43,685.428 1774.99,685.428 1775.55,685.428 1776.11,685.428 1776.67,685.428 1777.23,685.428 1777.79,685.428 1778.35,685.428 1778.91,685.428 1779.47,685.428 1780.03,685.428 1780.59,685.428 1781.15,685.428 1781.71,685.428 1782.26,685.428 1782.82,685.428 1783.38,685.428 1783.94,685.428 1784.5,685.428 1785.06,685.428 1785.62,685.428 1786.18,685.428 1786.74,685.428 1787.3,685.428 1787.86,685.428 1788.42,685.428 1788.98,685.428 1789.53,685.428 1790.09,685.428 1790.65,685.428 1791.21,685.428 1791.77,685.428 1792.33,685.428 1792.89,685.428 1793.45,685.428 1794.01,685.428 1794.57,685.428 1795.13,685.428 1795.69,685.428 1796.25,685.428 1796.8,685.428 1797.36,685.428 1797.92,685.428 1798.48,685.428 1799.04,685.428 1799.6,685.428 1800.16,685.428 1800.72,685.428 1801.28,685.428 1801.84,685.428 1802.4,685.428 1802.96,685.428 1803.52,685.428 1804.08,685.428 1804.63,685.428 1805.19,685.428 1805.75,685.428 1806.31,685.428 1806.87,685.428 1807.43,685.428 1807.99,685.428 1808.55,685.428 1809.11,685.428 1809.67,685.428 1810.23,685.428 1810.79,685.428 1811.35,685.428 1811.9,685.428 1812.46,685.428 1813.02,685.428 1813.58,685.428 1814.14,685.428 1814.7,685.428 1815.26,685.428 1815.82,685.428 1816.38,685.428 1816.94,685.428 1817.5,685.428 1818.06,685.428 1818.62,685.428 1819.18,685.428 1819.73,685.428 1820.29,685.428 1820.85,685.428 1821.41,685.428 1821.97,685.428 1822.53,685.428 1823.09,685.428 1823.65,685.428 1824.21,685.428 1824.77,685.428 1825.33,685.428 1825.89,685.428 1826.45,685.428 1827,685.428 1827.56,685.428 1828.12,685.428 1828.68,685.428 1829.24,685.428 1829.8,685.428 1830.36,685.428 1830.92,685.428 1831.48,685.428 1832.04,685.428 1832.6,685.428 1833.16,685.428 1833.72,685.428 1834.27,685.428 1834.83,685.428 1835.39,685.428 1835.95,685.428 1836.51,685.428 1837.07,685.428 1837.63,685.428 1838.19,685.428 \"/>\n<path clip-path=\"url(#clip763)\" d=\"M720.247 684.18 L720.806 684.18 L721.365 684.18 L721.924 684.18 L722.484 684.18 L723.043 684.18 L723.602 684.18 L724.161 684.18 L724.721 684.18 L725.28 684.18 L725.839 684.18 L726.398 684.18 L726.958 684.18 L727.517 684.18 L728.076 684.18 L728.635 684.18 L729.195 684.18 L729.754 684.18 L730.313 684.18 L730.872 684.18 L731.432 684.18 L731.991 684.18 L732.55 684.18 L733.109 684.18 L733.669 684.18 L734.228 684.18 L734.787 684.18 L735.346 684.18 L735.906 684.18 L736.465 684.18 L737.024 684.18 L737.583 684.18 L738.143 684.18 L738.702 684.18 L739.261 684.18 L739.82 684.18 L740.38 684.18 L740.939 684.18 L741.498 684.18 L742.057 684.18 L742.617 684.18 L743.176 684.18 L743.735 684.18 L744.294 684.18 L744.854 684.18 L745.413 684.18 L745.972 684.18 L746.531 684.18 L747.091 684.18 L747.65 684.18 L748.209 684.18 L748.768 684.18 L749.328 684.18 L749.887 684.18 L750.446 684.18 L751.005 684.18 L751.565 684.18 L752.124 684.18 L752.683 684.18 L753.242 684.18 L753.802 684.18 L754.361 684.18 L754.92 684.18 L755.479 684.18 L756.039 684.18 L756.598 684.18 L757.157 684.18 L757.716 684.18 L758.276 684.18 L758.835 684.18 L759.394 684.18 L759.953 684.18 L760.513 684.18 L761.072 684.18 L761.631 684.18 L762.19 684.18 L762.75 684.18 L763.309 684.18 L763.868 684.18 L764.427 684.18 L764.987 684.18 L765.546 684.18 L766.105 684.18 L766.664 684.18 L767.224 684.18 L767.783 684.18 L768.342 684.18 L768.901 684.18 L769.461 684.18 L770.02 684.18 L770.579 684.18 L771.138 684.18 L771.698 684.18 L772.257 684.18 L772.816 684.18 L773.375 684.18 L773.935 684.18 L774.494 684.18 L775.053 684.18 L775.612 684.18 L776.172 684.18 L776.731 684.18 L777.29 684.18 L777.849 684.18 L778.409 684.18 L778.968 684.18 L779.527 684.18 L780.086 684.18 L780.646 684.18 L781.205 684.18 L781.764 684.18 L782.323 684.18 L782.883 684.18 L783.442 684.18 L784.001 684.18 L784.56 684.18 L785.12 684.18 L785.679 684.18 L786.238 684.18 L786.797 684.18 L787.357 684.18 L787.916 684.18 L788.475 684.18 L789.034 684.18 L789.594 684.18 L790.153 684.18 L790.712 684.18 L791.271 684.18 L791.831 684.18 L792.39 684.18 L792.949 684.18 L793.508 684.18 L794.068 684.18 L794.627 684.18 L795.186 684.18 L795.745 684.18 L796.305 684.18 L796.864 684.18 L797.423 684.18 L797.982 684.18 L798.542 684.18 L799.101 684.18 L799.66 684.18 L800.219 684.18 L800.779 684.18 L801.338 684.18 L801.897 684.18 L802.456 684.18 L803.016 684.18 L803.575 684.18 L804.134 684.18 L804.693 684.18 L805.253 684.18 L805.812 684.18 L806.371 684.18 L806.931 684.18 L807.49 684.18 L808.049 684.18 L808.608 684.18 L809.168 684.18 L809.727 684.18 L810.286 684.18 L810.845 684.18 L811.405 684.18 L811.964 684.18 L812.523 684.18 L813.082 684.18 L813.642 684.18 L814.201 684.18 L814.76 684.18 L815.319 684.18 L815.879 684.18 L816.438 684.18 L816.997 684.18 L817.556 684.18 L818.116 684.18 L818.675 684.18 L819.234 684.18 L819.793 684.18 L820.353 684.18 L820.912 684.18 L821.471 684.18 L822.03 684.18 L822.59 684.18 L823.149 684.18 L823.708 684.18 L824.267 684.18 L824.827 684.18 L825.386 684.18 L825.945 684.18 L826.504 684.18 L827.064 684.18 L827.623 684.18 L828.182 684.18 L828.741 684.18 L829.301 684.18 L829.86 684.18 L830.419 684.18 L830.978 684.18 L831.538 684.18 L832.097 684.18 L832.656 684.18 L833.215 684.18 L833.775 684.18 L834.334 684.18 L834.893 684.18 L835.452 684.18 L836.012 684.18 L836.571 684.18 L837.13 684.18 L837.689 684.18 L838.249 684.18 L838.808 684.18 L839.367 684.18 L839.926 684.18 L840.486 684.18 L841.045 684.18 L841.604 684.18 L842.163 684.18 L842.723 684.18 L843.282 684.18 L843.841 684.18 L844.4 684.18 L844.96 684.18 L845.519 684.18 L846.078 684.18 L846.637 684.18 L847.197 684.18 L847.756 684.18 L848.315 684.18 L848.874 684.18 L849.434 684.18 L849.993 684.18 L850.552 684.18 L851.111 684.18 L851.671 684.18 L852.23 684.18 L852.789 684.18 L853.348 684.18 L853.908 684.18 L854.467 684.18 L855.026 684.18 L855.585 684.18 L856.145 684.18 L856.704 684.18 L857.263 684.18 L857.822 684.18 L858.382 684.18 L858.941 684.18 L859.5 684.18 L860.059 684.18 L860.619 684.18 L861.178 684.18 L861.737 684.18 L862.296 684.18 L862.856 684.18 L863.415 684.18 L863.974 684.18 L864.533 684.18 L865.093 684.18 L865.652 684.18 L866.211 684.18 L866.77 684.18 L867.33 684.18 L867.889 684.18 L868.448 684.18 L869.007 684.18 L869.567 684.18 L870.126 684.18 L870.685 684.18 L871.244 684.18 L871.804 684.18 L872.363 684.18 L872.922 684.18 L873.481 684.18 L874.041 684.18 L874.6 684.18 L875.159 684.18 L875.718 684.18 L876.278 684.18 L876.837 684.18 L877.396 684.18 L877.955 684.18 L878.515 684.18 L879.074 684.18 L879.633 684.18 L880.192 684.18 L880.752 684.18 L881.311 684.18 L881.87 684.18 L882.429 684.18 L882.989 684.18 L883.548 684.18 L884.107 684.18 L884.666 684.18 L885.226 684.18 L885.785 684.18 L886.344 684.18 L886.903 684.18 L887.463 684.18 L888.022 684.18 L888.581 684.18 L889.14 684.18 L889.7 684.18 L890.259 684.18 L890.818 684.18 L891.377 684.18 L891.937 684.18 L892.496 684.18 L893.055 684.18 L893.614 684.18 L894.174 684.18 L894.733 684.18 L895.292 684.18 L895.851 684.18 L896.411 684.18 L896.97 684.18 L897.529 684.18 L898.088 684.18 L898.648 684.18 L899.207 684.18 L899.766 684.18 L900.325 684.18 L900.885 684.18 L901.444 684.18 L902.003 684.18 L902.562 684.18 L903.122 684.18 L903.681 684.18 L904.24 684.18 L904.799 684.18 L905.359 684.18 L905.918 684.18 L906.477 684.18 L907.036 684.18 L907.596 684.18 L908.155 684.18 L908.714 684.18 L909.273 684.18 L909.833 684.18 L910.392 684.18 L910.951 684.18 L911.51 684.18 L912.07 684.18 L912.629 684.18 L913.188 684.18 L913.747 684.18 L914.307 684.18 L914.866 684.18 L915.425 684.18 L915.984 684.18 L916.544 684.18 L917.103 684.18 L917.662 684.18 L918.221 684.18 L918.781 684.18 L919.34 684.18 L919.899 684.18 L920.458 684.18 L921.018 684.18 L921.577 684.18 L922.136 684.18 L922.695 684.18 L923.255 684.18 L923.814 684.18 L924.373 684.18 L924.932 684.18 L925.492 684.18 L926.051 684.18 L926.61 684.18 L927.169 684.18 L927.729 684.18 L928.288 684.18 L928.847 684.18 L929.406 684.18 L929.966 684.18 L930.525 684.18 L931.084 684.18 L931.644 684.18 L932.203 684.18 L932.762 684.18 L933.321 684.18 L933.881 684.18 L934.44 684.18 L934.999 684.18 L935.558 684.18 L936.118 684.18 L936.677 684.18 L937.236 684.18 L937.795 684.18 L938.355 684.18 L938.914 684.18 L939.473 684.18 L940.032 684.18 L940.592 684.18 L941.151 684.18 L941.71 684.18 L942.269 684.18 L942.829 684.18 L943.388 684.18 L943.947 684.18 L944.506 684.18 L945.066 684.18 L945.625 684.18 L946.184 684.18 L946.743 684.18 L947.303 684.18 L947.862 684.18 L948.421 684.18 L948.98 684.18 L949.54 684.18 L950.099 684.18 L950.658 684.18 L951.217 684.18 L951.777 684.18 L952.336 684.18 L952.895 684.18 L953.454 684.18 L954.014 684.18 L954.573 684.18 L955.132 684.18 L955.691 684.18 L956.251 684.18 L956.81 684.18 L957.369 684.18 L957.928 684.18 L958.488 684.18 L959.047 684.18 L959.606 684.18 L960.165 684.18 L960.725 684.18 L961.284 684.18 L961.843 684.18 L962.402 684.18 L962.962 684.18 L963.521 684.18 L964.08 684.18 L964.639 684.18 L965.199 684.18 L965.758 684.18 L966.317 684.18 L966.876 684.18 L967.436 684.18 L967.995 684.18 L968.554 684.18 L969.113 684.18 L969.673 684.18 L970.232 684.18 L970.791 684.18 L971.35 684.18 L971.91 684.18 L972.469 684.18 L973.028 684.18 L973.587 684.18 L974.147 684.18 L974.706 684.18 L975.265 684.18 L975.824 684.18 L976.384 684.18 L976.943 684.18 L977.502 684.18 L978.061 684.18 L978.621 684.18 L979.18 684.18 L979.739 684.18 L980.298 684.18 L980.858 684.18 L981.417 684.18 L981.976 684.18 L982.535 684.18 L983.095 684.18 L983.654 684.18 L984.213 684.18 L984.772 684.18 L985.332 684.18 L985.891 684.18 L986.45 684.18 L987.009 684.18 L987.569 684.18 L988.128 684.18 L988.687 684.18 L989.246 684.18 L989.806 684.18 L990.365 684.18 L990.924 684.18 L991.483 684.18 L992.043 684.18 L992.602 684.18 L993.161 684.18 L993.72 684.18 L994.28 684.18 L994.839 684.18 L995.398 684.18 L995.957 684.18 L996.517 684.18 L997.076 684.18 L997.635 684.18 L998.194 684.18 L998.754 684.18 L999.313 684.18 L999.872 684.18 L1000.43 684.18 L1000.99 684.18 L1001.55 684.18 L1002.11 684.18 L1002.67 684.18 L1003.23 684.18 L1003.79 684.18 L1004.35 684.18 L1004.91 684.18 L1005.46 684.18 L1006.02 684.18 L1006.58 684.18 L1007.14 684.18 L1007.7 684.18 L1008.26 684.18 L1008.82 684.18 L1009.38 684.18 L1009.94 684.18 L1010.5 684.18 L1011.06 684.18 L1011.62 684.18 L1012.18 684.18 L1012.73 684.18 L1013.29 684.18 L1013.85 684.18 L1014.41 684.18 L1014.97 684.18 L1015.53 684.18 L1016.09 684.18 L1016.65 684.18 L1017.21 684.18 L1017.77 684.18 L1018.33 684.18 L1018.89 684.18 L1019.45 684.18 L1020.01 684.18 L1020.56 684.18 L1021.12 684.18 L1021.68 684.18 L1022.24 684.18 L1022.8 684.18 L1023.36 684.18 L1023.92 684.18 L1024.48 684.18 L1025.04 684.18 L1025.6 684.18 L1026.16 684.18 L1026.72 684.18 L1027.28 684.18 L1027.83 684.18 L1028.39 684.18 L1028.95 684.18 L1029.51 684.18 L1030.07 684.18 L1030.63 684.18 L1031.19 684.18 L1031.75 684.18 L1032.31 684.18 L1032.87 684.18 L1033.43 684.18 L1033.99 684.18 L1034.55 684.18 L1035.1 684.18 L1035.66 684.18 L1036.22 684.18 L1036.78 684.18 L1037.34 684.18 L1037.9 684.18 L1038.46 684.18 L1039.02 684.18 L1039.58 684.18 L1040.14 684.18 L1040.7 684.18 L1041.26 684.18 L1041.82 684.18 L1042.38 684.18 L1042.93 684.18 L1043.49 684.18 L1044.05 684.18 L1044.61 684.18 L1045.17 684.18 L1045.73 684.18 L1046.29 684.18 L1046.85 684.18 L1047.41 684.18 L1047.97 684.18 L1048.53 684.18 L1049.09 684.18 L1049.65 684.18 L1050.2 684.18 L1050.76 684.18 L1051.32 684.18 L1051.88 684.18 L1052.44 684.18 L1053 684.18 L1053.56 684.18 L1054.12 684.18 L1054.68 684.18 L1055.24 684.18 L1055.8 684.18 L1056.36 684.18 L1056.92 684.18 L1057.48 684.18 L1058.03 684.18 L1058.59 684.18 L1059.15 684.18 L1059.71 684.18 L1060.27 684.18 L1060.83 684.18 L1061.39 684.18 L1061.95 684.18 L1062.51 684.18 L1063.07 684.18 L1063.63 684.18 L1064.19 684.18 L1064.75 684.18 L1065.3 684.18 L1065.86 684.18 L1066.42 684.18 L1066.98 684.18 L1067.54 684.18 L1068.1 684.18 L1068.66 684.18 L1069.22 684.18 L1069.78 684.18 L1070.34 684.18 L1070.9 684.18 L1071.46 684.18 L1072.02 684.18 L1072.57 684.18 L1073.13 684.18 L1073.69 684.18 L1074.25 684.18 L1074.81 684.18 L1075.37 684.18 L1075.93 684.18 L1076.49 684.18 L1077.05 684.18 L1077.61 684.18 L1078.17 684.18 L1078.73 684.18 L1079.29 684.18 L1079.85 684.18 L1080.4 684.18 L1080.96 684.18 L1081.52 684.18 L1082.08 684.18 L1082.64 684.18 L1083.2 684.18 L1083.76 684.18 L1084.32 684.18 L1084.88 684.18 L1085.44 684.18 L1086 684.18 L1086.56 684.18 L1087.12 684.18 L1087.67 684.18 L1088.23 684.18 L1088.79 684.18 L1089.35 684.18 L1089.91 684.18 L1090.47 684.18 L1091.03 684.18 L1091.59 684.18 L1092.15 684.18 L1092.71 684.18 L1093.27 684.18 L1093.83 684.18 L1094.39 684.18 L1094.94 684.18 L1095.5 684.18 L1096.06 684.18 L1096.62 684.18 L1097.18 684.18 L1097.74 684.18 L1098.3 684.18 L1098.86 684.18 L1099.42 684.18 L1099.98 684.18 L1100.54 684.18 L1101.1 684.18 L1101.66 684.18 L1102.22 684.18 L1102.77 684.18 L1103.33 684.18 L1103.89 684.18 L1104.45 684.18 L1105.01 684.18 L1105.57 684.18 L1106.13 684.18 L1106.69 684.18 L1107.25 684.18 L1107.81 684.18 L1108.37 684.18 L1108.93 684.18 L1109.49 684.18 L1110.04 684.18 L1110.6 684.18 L1111.16 684.18 L1111.72 684.18 L1112.28 684.18 L1112.84 684.18 L1113.4 684.18 L1113.96 684.18 L1114.52 684.18 L1115.08 684.18 L1115.64 684.18 L1116.2 684.18 L1116.76 684.18 L1117.31 684.18 L1117.87 684.18 L1118.43 684.18 L1118.99 684.18 L1119.55 684.18 L1120.11 684.18 L1120.67 684.18 L1121.23 684.18 L1121.79 684.18 L1122.35 684.18 L1122.91 684.18 L1123.47 684.18 L1124.03 684.18 L1124.59 684.18 L1125.14 684.18 L1125.7 684.18 L1126.26 684.18 L1126.82 684.18 L1127.38 684.18 L1127.94 684.18 L1128.5 684.18 L1129.06 684.18 L1129.62 684.18 L1130.18 684.18 L1130.74 684.18 L1131.3 684.18 L1131.86 684.18 L1132.41 684.18 L1132.97 684.18 L1133.53 684.18 L1134.09 684.18 L1134.65 684.18 L1135.21 684.18 L1135.77 684.18 L1136.33 684.18 L1136.89 684.18 L1137.45 684.18 L1138.01 684.18 L1138.57 684.18 L1139.13 684.18 L1139.68 684.18 L1140.24 684.18 L1140.8 684.18 L1141.36 684.18 L1141.92 684.18 L1142.48 684.18 L1143.04 684.18 L1143.6 684.18 L1144.16 684.18 L1144.72 684.18 L1145.28 684.18 L1145.84 684.18 L1146.4 684.18 L1146.96 684.18 L1147.51 684.18 L1148.07 684.18 L1148.63 684.18 L1149.19 684.18 L1149.75 684.18 L1150.31 684.18 L1150.87 684.18 L1151.43 684.18 L1151.99 684.18 L1152.55 684.18 L1153.11 684.18 L1153.67 684.18 L1154.23 684.18 L1154.78 684.18 L1155.34 684.18 L1155.9 684.18 L1156.46 684.18 L1157.02 684.18 L1157.58 684.18 L1158.14 684.18 L1158.7 684.18 L1159.26 684.18 L1159.82 684.18 L1160.38 684.18 L1160.94 684.18 L1161.5 684.18 L1162.05 684.18 L1162.61 684.18 L1163.17 684.18 L1163.73 684.18 L1164.29 684.18 L1164.85 684.18 L1165.41 684.18 L1165.97 684.18 L1166.53 684.18 L1167.09 684.18 L1167.65 684.18 L1168.21 684.18 L1168.77 684.18 L1169.33 684.18 L1169.88 684.18 L1170.44 684.18 L1171 684.18 L1171.56 684.18 L1172.12 684.18 L1172.68 684.18 L1173.24 684.18 L1173.8 684.18 L1174.36 684.18 L1174.92 684.18 L1175.48 684.18 L1176.04 684.18 L1176.6 684.18 L1177.15 684.18 L1177.71 684.18 L1178.27 684.18 L1178.83 684.18 L1179.39 684.18 L1179.95 684.18 L1180.51 684.18 L1181.07 684.18 L1181.63 684.18 L1182.19 684.18 L1182.75 684.18 L1183.31 684.18 L1183.87 684.18 L1184.43 684.18 L1184.98 684.18 L1185.54 684.18 L1186.1 684.18 L1186.66 684.18 L1187.22 684.18 L1187.78 684.18 L1188.34 684.18 L1188.9 684.18 L1189.46 684.18 L1190.02 684.18 L1190.58 684.18 L1191.14 684.18 L1191.7 684.18 L1192.25 684.18 L1192.81 684.18 L1193.37 684.18 L1193.93 684.18 L1194.49 684.18 L1195.05 684.18 L1195.61 684.18 L1196.17 684.18 L1196.73 684.18 L1197.29 684.18 L1197.85 684.18 L1198.41 684.18 L1198.97 684.18 L1199.52 684.18 L1200.08 684.18 L1200.64 684.18 L1201.2 684.18 L1201.76 684.18 L1202.32 684.18 L1202.88 684.18 L1203.44 684.18 L1204 684.18 L1204.56 684.18 L1205.12 684.18 L1205.68 684.18 L1206.24 684.18 L1206.8 684.18 L1207.35 684.18 L1207.91 684.18 L1208.47 684.18 L1209.03 684.18 L1209.59 684.18 L1210.15 684.18 L1210.71 684.18 L1211.27 684.18 L1211.83 684.18 L1212.39 684.18 L1212.95 684.18 L1213.51 684.18 L1214.07 684.18 L1214.62 684.18 L1215.18 684.18 L1215.74 684.18 L1216.3 684.18 L1216.86 684.18 L1217.42 684.18 L1217.98 684.18 L1218.54 684.18 L1219.1 684.18 L1219.66 684.18 L1220.22 684.18 L1220.78 684.18 L1221.34 684.18 L1221.89 684.18 L1222.45 684.18 L1223.01 684.18 L1223.57 684.18 L1224.13 684.18 L1224.69 684.18 L1225.25 684.18 L1225.81 684.18 L1226.37 684.18 L1226.93 684.18 L1227.49 684.18 L1228.05 684.18 L1228.61 684.18 L1229.17 684.18 L1229.72 684.18 L1230.28 684.18 L1230.84 684.18 L1231.4 684.18 L1231.96 684.18 L1232.52 684.18 L1233.08 684.18 L1233.64 684.18 L1234.2 684.18 L1234.76 684.18 L1235.32 684.18 L1235.88 684.18 L1236.44 684.18 L1236.99 684.18 L1237.55 684.18 L1238.11 684.18 L1238.67 684.18 L1239.23 684.18 L1239.79 684.18 L1240.35 684.18 L1240.91 684.18 L1241.47 684.18 L1242.03 684.18 L1242.59 684.18 L1243.15 684.18 L1243.71 684.18 L1244.26 684.18 L1244.82 684.18 L1245.38 684.18 L1245.94 684.18 L1246.5 684.18 L1247.06 684.18 L1247.62 684.18 L1248.18 684.18 L1248.74 684.18 L1249.3 684.18 L1249.86 684.18 L1250.42 684.18 L1250.98 684.18 L1251.54 684.18 L1252.09 684.18 L1252.65 684.18 L1253.21 684.18 L1253.77 684.18 L1254.33 684.18 L1254.89 684.18 L1255.45 684.18 L1256.01 684.18 L1256.57 684.18 L1257.13 684.18 L1257.69 684.18 L1258.25 684.18 L1258.81 684.18 L1259.36 684.18 L1259.92 684.18 L1260.48 684.18 L1261.04 684.18 L1261.6 684.18 L1262.16 684.18 L1262.72 684.18 L1263.28 684.18 L1263.84 684.18 L1264.4 684.18 L1264.96 684.18 L1265.52 684.18 L1266.08 684.18 L1266.63 684.18 L1267.19 684.18 L1267.75 684.18 L1268.31 684.18 L1268.87 684.18 L1269.43 684.18 L1269.99 684.18 L1270.55 684.18 L1271.11 684.18 L1271.67 684.18 L1272.23 684.18 L1272.79 684.18 L1273.35 684.18 L1273.91 684.18 L1274.46 684.18 L1275.02 684.18 L1275.58 684.18 L1276.14 684.18 L1276.7 684.18 L1277.26 684.18 L1277.82 684.18 L1278.38 684.18 L1278.94 684.18 L1279.5 684.18 L1280.06 684.18 L1280.62 684.18 L1281.18 684.18 L1281.73 684.18 L1282.29 684.18 L1282.85 684.18 L1283.41 684.18 L1283.97 684.18 L1284.53 684.18 L1285.09 684.18 L1285.65 684.18 L1286.21 684.18 L1286.77 684.18 L1287.33 684.18 L1287.89 684.18 L1288.45 684.18 L1289 684.18 L1289.56 684.18 L1290.12 684.18 L1290.68 684.18 L1291.24 684.18 L1291.8 684.18 L1292.36 684.18 L1292.92 684.18 L1293.48 684.18 L1294.04 684.18 L1294.6 684.18 L1295.16 684.18 L1295.72 684.18 L1296.28 684.18 L1296.83 684.18 L1297.39 684.18 L1297.95 684.18 L1298.51 684.18 L1299.07 684.18 L1299.63 684.18 L1300.19 684.18 L1300.75 684.18 L1301.31 684.18 L1301.87 684.18 L1302.43 684.18 L1302.99 684.18 L1303.55 684.18 L1304.1 684.18 L1304.66 684.18 L1305.22 684.18 L1305.78 684.18 L1306.34 684.18 L1306.9 684.18 L1307.46 684.18 L1308.02 684.18 L1308.58 684.18 L1309.14 684.18 L1309.7 684.18 L1310.26 684.18 L1310.82 684.18 L1311.38 684.18 L1311.93 684.18 L1312.49 684.18 L1313.05 684.18 L1313.61 684.18 L1314.17 684.18 L1314.73 684.18 L1315.29 684.18 L1315.85 684.18 L1316.41 684.18 L1316.97 684.18 L1317.53 684.18 L1318.09 684.18 L1318.65 684.18 L1319.2 684.18 L1319.76 684.18 L1320.32 684.18 L1320.88 684.18 L1321.44 684.18 L1322 684.18 L1322.56 684.18 L1323.12 684.18 L1323.68 684.18 L1324.24 684.18 L1324.8 684.18 L1325.36 684.18 L1325.92 684.18 L1326.47 684.18 L1327.03 684.18 L1327.59 684.18 L1328.15 684.18 L1328.71 684.18 L1329.27 684.18 L1329.83 684.18 L1330.39 684.18 L1330.95 684.18 L1331.51 684.18 L1332.07 684.18 L1332.63 684.18 L1333.19 684.18 L1333.75 684.18 L1334.3 684.18 L1334.86 684.18 L1335.42 684.18 L1335.98 684.18 L1336.54 684.18 L1337.1 684.18 L1337.66 684.18 L1338.22 684.18 L1338.78 684.18 L1339.34 684.18 L1339.9 684.18 L1340.46 684.18 L1341.02 684.18 L1341.57 684.18 L1342.13 684.18 L1342.69 684.18 L1343.25 684.18 L1343.81 684.18 L1344.37 684.18 L1344.93 684.18 L1345.49 684.18 L1346.05 684.18 L1346.61 684.18 L1347.17 684.18 L1347.73 684.18 L1348.29 684.18 L1348.84 684.18 L1349.4 684.18 L1349.96 684.18 L1350.52 684.18 L1351.08 684.18 L1351.64 684.18 L1352.2 684.18 L1352.76 684.18 L1353.32 684.18 L1353.88 684.18 L1354.44 684.18 L1355 684.18 L1355.56 684.18 L1356.12 684.18 L1356.67 684.18 L1357.23 684.18 L1357.79 684.18 L1358.35 684.18 L1358.91 684.18 L1359.47 684.18 L1360.03 684.18 L1360.59 684.18 L1361.15 684.18 L1361.71 684.18 L1362.27 684.18 L1362.83 684.18 L1363.39 684.18 L1363.94 684.18 L1364.5 684.18 L1365.06 684.18 L1365.62 684.18 L1366.18 684.18 L1366.74 684.18 L1367.3 684.18 L1367.86 684.18 L1368.42 684.18 L1368.98 684.18 L1369.54 684.18 L1370.1 684.18 L1370.66 684.18 L1371.21 684.18 L1371.77 684.18 L1372.33 684.18 L1372.89 684.18 L1373.45 684.18 L1374.01 684.18 L1374.57 684.18 L1375.13 684.18 L1375.69 684.18 L1376.25 684.18 L1376.81 684.18 L1377.37 684.18 L1377.93 684.18 L1378.49 684.18 L1379.04 684.18 L1379.6 684.18 L1380.16 684.18 L1380.72 684.18 L1381.28 684.18 L1381.84 684.18 L1382.4 684.18 L1382.96 684.18 L1383.52 684.18 L1384.08 684.18 L1384.64 684.18 L1385.2 684.18 L1385.76 684.18 L1386.31 684.18 L1386.87 684.18 L1387.43 684.18 L1387.99 684.18 L1388.55 684.18 L1389.11 684.18 L1389.67 684.18 L1390.23 684.18 L1390.79 684.18 L1391.35 684.18 L1391.91 684.18 L1392.47 684.18 L1393.03 684.18 L1393.58 684.18 L1394.14 684.18 L1394.7 684.18 L1395.26 684.18 L1395.82 684.18 L1396.38 684.18 L1396.94 684.18 L1397.5 684.18 L1398.06 684.18 L1398.62 684.18 L1399.18 684.18 L1399.74 684.18 L1400.3 684.18 L1400.86 684.18 L1401.41 684.18 L1401.97 684.18 L1402.53 684.18 L1403.09 684.18 L1403.65 684.18 L1404.21 684.18 L1404.77 684.18 L1405.33 684.18 L1405.89 684.18 L1406.45 684.18 L1407.01 684.18 L1407.57 684.18 L1408.13 684.18 L1408.68 684.18 L1409.24 684.18 L1409.8 684.18 L1410.36 684.18 L1410.92 684.18 L1411.48 684.18 L1412.04 684.18 L1412.6 684.18 L1413.16 684.18 L1413.72 684.18 L1414.28 684.18 L1414.84 684.18 L1415.4 684.18 L1415.95 684.18 L1416.51 684.18 L1417.07 684.18 L1417.63 684.18 L1418.19 684.18 L1418.75 684.18 L1419.31 684.18 L1419.87 684.18 L1420.43 684.18 L1420.99 684.18 L1421.55 684.18 L1422.11 684.18 L1422.67 684.18 L1423.23 684.18 L1423.78 684.18 L1424.34 684.18 L1424.9 684.18 L1425.46 684.18 L1426.02 684.18 L1426.58 684.18 L1427.14 684.18 L1427.7 684.18 L1428.26 684.18 L1428.82 684.18 L1429.38 684.18 L1429.94 684.18 L1430.5 684.18 L1431.05 684.18 L1431.61 684.18 L1432.17 684.18 L1432.73 684.18 L1433.29 684.18 L1433.85 684.18 L1434.41 684.18 L1434.97 684.18 L1435.53 684.18 L1436.09 684.18 L1436.65 684.18 L1437.21 684.18 L1437.77 684.18 L1438.33 684.18 L1438.88 684.18 L1439.44 684.18 L1440 684.18 L1440.56 684.18 L1441.12 684.18 L1441.68 684.18 L1442.24 684.18 L1442.8 684.18 L1443.36 684.18 L1443.92 684.18 L1444.48 684.18 L1445.04 684.18 L1445.6 684.18 L1446.15 684.18 L1446.71 684.18 L1447.27 684.18 L1447.83 684.18 L1448.39 684.18 L1448.95 684.18 L1449.51 684.18 L1450.07 684.18 L1450.63 684.18 L1451.19 684.18 L1451.75 684.18 L1452.31 684.18 L1452.87 684.18 L1453.42 684.18 L1453.98 684.18 L1454.54 684.18 L1455.1 684.18 L1455.66 684.18 L1456.22 684.18 L1456.78 684.18 L1457.34 684.18 L1457.9 684.18 L1458.46 684.18 L1459.02 684.18 L1459.58 684.18 L1460.14 684.18 L1460.7 684.18 L1461.25 684.18 L1461.81 684.18 L1462.37 684.18 L1462.93 684.18 L1463.49 684.18 L1464.05 684.18 L1464.61 684.18 L1465.17 684.18 L1465.73 684.18 L1466.29 684.18 L1466.85 684.18 L1467.41 684.18 L1467.97 684.18 L1468.52 684.18 L1469.08 684.18 L1469.64 684.18 L1470.2 684.18 L1470.76 684.18 L1471.32 684.18 L1471.88 684.18 L1472.44 684.18 L1473 684.18 L1473.56 684.18 L1474.12 684.18 L1474.68 684.18 L1475.24 684.18 L1475.79 684.18 L1476.35 684.18 L1476.91 684.18 L1477.47 684.18 L1478.03 684.18 L1478.59 684.18 L1479.15 684.18 L1479.71 684.18 L1480.27 684.18 L1480.83 684.18 L1481.39 684.18 L1481.95 684.18 L1482.51 684.18 L1483.07 684.18 L1483.62 684.18 L1484.18 684.18 L1484.74 684.18 L1485.3 684.18 L1485.86 684.18 L1486.42 684.18 L1486.98 684.18 L1487.54 684.18 L1488.1 684.18 L1488.66 684.18 L1489.22 684.18 L1489.78 684.18 L1490.34 684.18 L1490.89 684.18 L1491.45 684.18 L1492.01 684.18 L1492.57 684.18 L1493.13 684.18 L1493.69 684.18 L1494.25 684.18 L1494.81 684.18 L1495.37 684.18 L1495.93 684.18 L1496.49 684.18 L1497.05 684.18 L1497.61 684.18 L1498.16 684.18 L1498.72 684.18 L1499.28 684.18 L1499.84 684.18 L1500.4 684.18 L1500.96 684.18 L1501.52 684.18 L1502.08 684.18 L1502.64 684.18 L1503.2 684.18 L1503.76 684.18 L1504.32 684.18 L1504.88 684.18 L1505.44 684.18 L1505.99 684.18 L1506.55 684.18 L1507.11 684.18 L1507.67 684.18 L1508.23 684.18 L1508.79 684.18 L1509.35 684.18 L1509.91 684.18 L1510.47 684.18 L1511.03 684.18 L1511.59 684.18 L1512.15 684.18 L1512.71 684.18 L1513.26 684.18 L1513.82 684.18 L1514.38 684.18 L1514.94 684.18 L1515.5 684.18 L1516.06 684.18 L1516.62 684.18 L1517.18 684.18 L1517.74 684.18 L1518.3 684.18 L1518.86 684.18 L1519.42 684.18 L1519.98 684.18 L1520.53 684.18 L1521.09 684.18 L1521.65 684.18 L1522.21 684.18 L1522.77 684.18 L1523.33 684.18 L1523.89 684.18 L1524.45 684.18 L1525.01 684.18 L1525.57 684.18 L1526.13 684.18 L1526.69 684.18 L1527.25 684.18 L1527.81 684.18 L1528.36 684.18 L1528.92 684.18 L1529.48 684.18 L1530.04 684.18 L1530.6 684.18 L1531.16 684.18 L1531.72 684.18 L1532.28 684.18 L1532.84 684.18 L1533.4 684.18 L1533.96 684.18 L1534.52 684.18 L1535.08 684.18 L1535.63 684.18 L1536.19 684.18 L1536.75 684.18 L1537.31 684.18 L1537.87 684.18 L1538.43 684.18 L1538.99 684.18 L1539.55 684.18 L1540.11 684.18 L1540.67 684.18 L1541.23 684.18 L1541.79 684.18 L1542.35 684.18 L1542.9 684.18 L1543.46 684.18 L1544.02 684.18 L1544.58 684.18 L1545.14 684.18 L1545.7 684.18 L1546.26 684.18 L1546.82 684.18 L1547.38 684.18 L1547.94 684.18 L1548.5 684.18 L1549.06 684.18 L1549.62 684.18 L1550.18 684.18 L1550.73 684.18 L1551.29 684.18 L1551.85 684.18 L1552.41 684.18 L1552.97 684.18 L1553.53 684.18 L1554.09 684.18 L1554.65 684.18 L1555.21 684.18 L1555.77 684.18 L1556.33 684.18 L1556.89 684.18 L1557.45 684.18 L1558 684.18 L1558.56 684.18 L1559.12 684.18 L1559.68 684.18 L1560.24 684.18 L1560.8 684.18 L1561.36 684.18 L1561.92 684.18 L1562.48 684.18 L1563.04 684.18 L1563.6 684.18 L1564.16 684.18 L1564.72 684.18 L1565.28 684.18 L1565.83 684.18 L1566.39 684.18 L1566.95 684.18 L1567.51 684.18 L1568.07 684.18 L1568.63 684.18 L1569.19 684.18 L1569.75 684.18 L1570.31 684.18 L1570.87 684.18 L1571.43 684.18 L1571.99 684.18 L1572.55 684.18 L1573.1 684.18 L1573.66 684.18 L1574.22 684.18 L1574.78 684.18 L1575.34 684.18 L1575.9 684.18 L1576.46 684.18 L1577.02 684.18 L1577.58 684.18 L1578.14 684.18 L1578.7 684.18 L1579.26 684.18 L1579.82 684.18 L1580.37 684.18 L1580.93 684.18 L1581.49 684.18 L1582.05 684.18 L1582.61 684.18 L1583.17 684.18 L1583.73 684.18 L1584.29 684.18 L1584.85 684.18 L1585.41 684.18 L1585.97 684.18 L1586.53 684.18 L1587.09 684.18 L1587.65 684.18 L1588.2 684.18 L1588.76 684.18 L1589.32 684.18 L1589.88 684.18 L1590.44 684.18 L1591 684.18 L1591.56 684.18 L1592.12 684.18 L1592.68 684.18 L1593.24 684.18 L1593.8 684.18 L1594.36 684.18 L1594.92 684.18 L1595.47 684.18 L1596.03 684.18 L1596.59 684.18 L1597.15 684.18 L1597.71 684.18 L1598.27 684.18 L1598.83 684.18 L1599.39 684.18 L1599.95 684.18 L1600.51 684.18 L1601.07 684.18 L1601.63 684.18 L1602.19 684.18 L1602.74 684.18 L1603.3 684.18 L1603.86 684.18 L1604.42 684.18 L1604.98 684.18 L1605.54 684.18 L1606.1 684.18 L1606.66 684.18 L1607.22 684.18 L1607.78 684.18 L1608.34 684.18 L1608.9 684.18 L1609.46 684.18 L1610.02 684.18 L1610.57 684.18 L1611.13 684.18 L1611.69 684.18 L1612.25 684.18 L1612.81 684.18 L1613.37 684.18 L1613.93 684.18 L1614.49 684.18 L1615.05 684.18 L1615.61 684.18 L1616.17 684.18 L1616.73 684.18 L1617.29 684.18 L1617.84 684.18 L1618.4 684.18 L1618.96 684.18 L1619.52 684.18 L1620.08 684.18 L1620.64 684.18 L1621.2 684.18 L1621.76 684.18 L1622.32 684.18 L1622.88 684.18 L1623.44 684.18 L1624 684.18 L1624.56 684.18 L1625.11 684.18 L1625.67 684.18 L1626.23 684.18 L1626.79 684.18 L1627.35 684.18 L1627.91 684.18 L1628.47 684.18 L1629.03 684.18 L1629.59 684.18 L1630.15 684.18 L1630.71 684.18 L1631.27 684.18 L1631.83 684.18 L1632.39 684.18 L1632.94 684.18 L1633.5 684.18 L1634.06 684.18 L1634.62 684.18 L1635.18 684.18 L1635.74 684.18 L1636.3 684.18 L1636.86 684.18 L1637.42 684.18 L1637.98 684.18 L1638.54 684.18 L1639.1 684.18 L1639.66 684.18 L1640.21 684.18 L1640.77 684.18 L1641.33 684.18 L1641.89 684.18 L1642.45 684.18 L1643.01 684.18 L1643.57 684.18 L1644.13 684.18 L1644.69 684.18 L1645.25 684.18 L1645.81 684.18 L1646.37 684.18 L1646.93 684.18 L1647.48 684.18 L1648.04 684.18 L1648.6 684.18 L1649.16 684.18 L1649.72 684.18 L1650.28 684.18 L1650.84 684.18 L1651.4 684.18 L1651.96 684.18 L1652.52 684.18 L1653.08 684.18 L1653.64 684.18 L1654.2 684.18 L1654.76 684.18 L1655.31 684.18 L1655.87 684.18 L1656.43 684.18 L1656.99 684.18 L1657.55 684.18 L1658.11 684.18 L1658.67 684.18 L1659.23 684.18 L1659.79 684.18 L1660.35 684.18 L1660.91 684.18 L1661.47 684.18 L1662.03 684.18 L1662.58 684.18 L1663.14 684.18 L1663.7 684.18 L1664.26 684.18 L1664.82 684.18 L1665.38 684.18 L1665.94 684.18 L1666.5 684.18 L1667.06 684.18 L1667.62 684.18 L1668.18 684.18 L1668.74 684.18 L1669.3 684.18 L1669.85 684.18 L1670.41 684.18 L1670.97 684.18 L1671.53 684.18 L1672.09 684.18 L1672.65 684.18 L1673.21 684.18 L1673.77 684.18 L1674.33 684.18 L1674.89 684.18 L1675.45 684.18 L1676.01 684.18 L1676.57 684.18 L1677.13 684.18 L1677.68 684.18 L1678.24 684.18 L1678.8 684.18 L1679.36 684.18 L1679.92 684.18 L1680.48 684.18 L1681.04 684.18 L1681.6 684.18 L1682.16 684.18 L1682.72 684.18 L1683.28 684.18 L1683.84 684.18 L1684.4 684.18 L1684.95 684.18 L1685.51 684.18 L1686.07 684.18 L1686.63 684.18 L1687.19 684.18 L1687.75 684.18 L1688.31 684.18 L1688.87 684.18 L1689.43 684.18 L1689.99 684.18 L1690.55 684.18 L1691.11 684.18 L1691.67 684.18 L1692.23 684.18 L1692.78 684.18 L1693.34 684.18 L1693.9 684.18 L1694.46 684.18 L1695.02 684.18 L1695.58 684.18 L1696.14 684.18 L1696.7 684.18 L1697.26 684.18 L1697.82 684.18 L1698.38 684.18 L1698.94 684.18 L1699.5 684.18 L1700.05 684.18 L1700.61 684.18 L1701.17 684.18 L1701.73 684.18 L1702.29 684.18 L1702.85 684.18 L1703.41 684.18 L1703.97 684.18 L1704.53 684.18 L1705.09 684.18 L1705.65 684.18 L1706.21 684.18 L1706.77 684.18 L1707.32 684.18 L1707.88 684.18 L1708.44 684.18 L1709 684.18 L1709.56 684.18 L1710.12 684.18 L1710.68 684.18 L1711.24 684.18 L1711.8 684.18 L1712.36 684.18 L1712.92 684.18 L1713.48 684.18 L1714.04 684.18 L1714.6 684.18 L1715.15 684.18 L1715.71 684.18 L1716.27 684.18 L1716.83 684.18 L1717.39 684.18 L1717.95 684.18 L1718.51 684.18 L1719.07 684.18 L1719.63 684.18 L1720.19 684.18 L1720.75 684.18 L1721.31 684.18 L1721.87 684.18 L1722.42 684.18 L1722.98 684.18 L1723.54 684.18 L1724.1 684.18 L1724.66 684.18 L1725.22 684.18 L1725.78 684.18 L1726.34 684.18 L1726.9 684.18 L1727.46 684.18 L1728.02 684.18 L1728.58 684.18 L1729.14 684.18 L1729.69 684.18 L1730.25 684.18 L1730.81 684.18 L1731.37 684.18 L1731.93 684.18 L1732.49 684.18 L1733.05 684.18 L1733.61 684.18 L1734.17 684.18 L1734.73 684.18 L1735.29 684.18 L1735.85 684.18 L1736.41 684.18 L1736.97 684.18 L1737.52 684.18 L1738.08 684.18 L1738.64 684.18 L1739.2 684.18 L1739.76 684.18 L1740.32 684.18 L1740.88 684.18 L1741.44 684.18 L1742 684.18 L1742.56 684.18 L1743.12 684.18 L1743.68 684.18 L1744.24 684.18 L1744.79 684.18 L1745.35 684.18 L1745.91 684.18 L1746.47 684.18 L1747.03 684.18 L1747.59 684.18 L1748.15 684.18 L1748.71 684.18 L1749.27 684.18 L1749.83 684.18 L1750.39 684.18 L1750.95 684.18 L1751.51 684.18 L1752.06 684.18 L1752.62 684.18 L1753.18 684.18 L1753.74 684.18 L1754.3 684.18 L1754.86 684.18 L1755.42 684.18 L1755.98 684.18 L1756.54 684.18 L1757.1 684.18 L1757.66 684.18 L1758.22 684.18 L1758.78 684.18 L1759.34 684.18 L1759.89 684.18 L1760.45 684.18 L1761.01 684.18 L1761.57 684.18 L1762.13 684.18 L1762.69 684.18 L1763.25 684.18 L1763.81 684.18 L1764.37 684.18 L1764.93 684.18 L1765.49 684.18 L1766.05 684.18 L1766.61 684.18 L1767.16 684.18 L1767.72 684.18 L1768.28 684.18 L1768.84 684.18 L1769.4 684.18 L1769.96 684.18 L1770.52 684.18 L1771.08 684.18 L1771.64 684.18 L1772.2 684.18 L1772.76 684.18 L1773.32 684.18 L1773.88 684.18 L1774.43 684.18 L1774.99 684.18 L1775.55 684.18 L1776.11 684.18 L1776.67 684.18 L1777.23 684.18 L1777.79 684.18 L1778.35 684.18 L1778.91 684.18 L1779.47 684.18 L1780.03 684.18 L1780.59 684.18 L1781.15 684.18 L1781.71 684.18 L1782.26 684.18 L1782.82 684.18 L1783.38 684.18 L1783.94 684.18 L1784.5 684.18 L1785.06 684.18 L1785.62 684.18 L1786.18 684.18 L1786.74 684.18 L1787.3 684.18 L1787.86 684.18 L1788.42 684.18 L1788.98 684.18 L1789.53 684.18 L1790.09 684.18 L1790.65 684.18 L1791.21 684.18 L1791.77 684.18 L1792.33 684.18 L1792.89 684.18 L1793.45 684.18 L1794.01 684.18 L1794.57 684.18 L1795.13 684.18 L1795.69 684.18 L1796.25 684.18 L1796.8 684.18 L1797.36 684.18 L1797.92 684.18 L1798.48 684.18 L1799.04 684.18 L1799.6 684.18 L1800.16 684.18 L1800.72 684.18 L1801.28 684.18 L1801.84 684.18 L1802.4 684.18 L1802.96 684.18 L1803.52 684.18 L1804.08 684.18 L1804.63 684.18 L1805.19 684.18 L1805.75 684.18 L1806.31 684.18 L1806.87 684.18 L1807.43 684.18 L1807.99 684.18 L1808.55 684.18 L1809.11 684.18 L1809.67 684.18 L1810.23 684.18 L1810.79 684.18 L1811.35 684.18 L1811.9 684.18 L1812.46 684.18 L1813.02 684.18 L1813.58 684.18 L1814.14 684.18 L1814.7 684.18 L1815.26 684.18 L1815.82 684.18 L1816.38 684.18 L1816.94 684.18 L1817.5 684.18 L1818.06 684.18 L1818.62 684.18 L1819.18 684.18 L1819.73 684.18 L1820.29 684.18 L1820.85 684.18 L1821.41 684.18 L1821.97 684.18 L1822.53 684.18 L1823.09 684.18 L1823.65 684.18 L1824.21 684.18 L1824.77 684.18 L1825.33 684.18 L1825.89 684.18 L1826.45 684.18 L1827 684.18 L1827.56 684.18 L1828.12 684.18 L1828.68 684.18 L1829.24 684.18 L1829.8 684.18 L1830.36 684.18 L1830.92 684.18 L1831.48 684.18 L1832.04 684.18 L1832.6 684.18 L1833.16 684.18 L1833.72 684.18 L1834.27 684.18 L1834.83 684.18 L1835.39 684.18 L1835.95 684.18 L1836.51 684.18 L1837.07 684.18 L1837.63 684.18 L1838.19 684.18 L1838.19 682.758 L1837.63 682.758 L1837.07 682.758 L1836.51 682.758 L1835.95 682.758 L1835.39 682.758 L1834.83 682.758 L1834.27 682.758 L1833.72 682.758 L1833.16 682.758 L1832.6 682.758 L1832.04 682.758 L1831.48 682.758 L1830.92 682.758 L1830.36 682.758 L1829.8 682.758 L1829.24 682.758 L1828.68 682.758 L1828.12 682.758 L1827.56 682.758 L1827 682.758 L1826.45 682.758 L1825.89 682.758 L1825.33 682.758 L1824.77 682.758 L1824.21 682.758 L1823.65 682.758 L1823.09 682.758 L1822.53 682.758 L1821.97 682.758 L1821.41 682.758 L1820.85 682.758 L1820.29 682.758 L1819.73 682.758 L1819.18 682.758 L1818.62 682.758 L1818.06 682.758 L1817.5 682.758 L1816.94 682.758 L1816.38 682.758 L1815.82 682.758 L1815.26 682.758 L1814.7 682.758 L1814.14 682.758 L1813.58 682.758 L1813.02 682.758 L1812.46 682.758 L1811.9 682.758 L1811.35 682.758 L1810.79 682.758 L1810.23 682.758 L1809.67 682.758 L1809.11 682.758 L1808.55 682.758 L1807.99 682.758 L1807.43 682.758 L1806.87 682.758 L1806.31 682.758 L1805.75 682.758 L1805.19 682.758 L1804.63 682.758 L1804.08 682.758 L1803.52 682.758 L1802.96 682.758 L1802.4 682.758 L1801.84 682.758 L1801.28 682.758 L1800.72 682.758 L1800.16 682.758 L1799.6 682.758 L1799.04 682.758 L1798.48 682.758 L1797.92 682.758 L1797.36 682.758 L1796.8 682.758 L1796.25 682.758 L1795.69 682.758 L1795.13 682.758 L1794.57 682.758 L1794.01 682.758 L1793.45 682.758 L1792.89 682.758 L1792.33 682.758 L1791.77 682.758 L1791.21 682.758 L1790.65 682.758 L1790.09 682.758 L1789.53 682.758 L1788.98 682.758 L1788.42 682.758 L1787.86 682.758 L1787.3 682.758 L1786.74 682.758 L1786.18 682.758 L1785.62 682.758 L1785.06 682.758 L1784.5 682.758 L1783.94 682.758 L1783.38 682.758 L1782.82 682.758 L1782.26 682.758 L1781.71 682.758 L1781.15 682.758 L1780.59 682.758 L1780.03 682.758 L1779.47 682.758 L1778.91 682.758 L1778.35 682.758 L1777.79 682.758 L1777.23 682.758 L1776.67 682.758 L1776.11 682.758 L1775.55 682.758 L1774.99 682.758 L1774.43 682.758 L1773.88 682.758 L1773.32 682.758 L1772.76 682.758 L1772.2 682.758 L1771.64 682.758 L1771.08 682.758 L1770.52 682.758 L1769.96 682.758 L1769.4 682.758 L1768.84 682.758 L1768.28 682.758 L1767.72 682.758 L1767.16 682.758 L1766.61 682.758 L1766.05 682.758 L1765.49 682.758 L1764.93 682.758 L1764.37 682.758 L1763.81 682.758 L1763.25 682.758 L1762.69 682.758 L1762.13 682.758 L1761.57 682.758 L1761.01 682.758 L1760.45 682.758 L1759.89 682.758 L1759.34 682.758 L1758.78 682.758 L1758.22 682.758 L1757.66 682.758 L1757.1 682.758 L1756.54 682.758 L1755.98 682.758 L1755.42 682.758 L1754.86 682.758 L1754.3 682.758 L1753.74 682.758 L1753.18 682.758 L1752.62 682.758 L1752.06 682.758 L1751.51 682.758 L1750.95 682.758 L1750.39 682.758 L1749.83 682.758 L1749.27 682.758 L1748.71 682.758 L1748.15 682.758 L1747.59 682.758 L1747.03 682.758 L1746.47 682.758 L1745.91 682.758 L1745.35 682.758 L1744.79 682.758 L1744.24 682.758 L1743.68 682.758 L1743.12 682.758 L1742.56 682.758 L1742 682.758 L1741.44 682.758 L1740.88 682.758 L1740.32 682.758 L1739.76 682.758 L1739.2 682.758 L1738.64 682.758 L1738.08 682.758 L1737.52 682.758 L1736.97 682.758 L1736.41 682.758 L1735.85 682.758 L1735.29 682.758 L1734.73 682.758 L1734.17 682.758 L1733.61 682.758 L1733.05 682.758 L1732.49 682.758 L1731.93 682.758 L1731.37 682.758 L1730.81 682.758 L1730.25 682.758 L1729.69 682.758 L1729.14 682.758 L1728.58 682.758 L1728.02 682.758 L1727.46 682.758 L1726.9 682.758 L1726.34 682.758 L1725.78 682.758 L1725.22 682.758 L1724.66 682.758 L1724.1 682.758 L1723.54 682.758 L1722.98 682.758 L1722.42 682.758 L1721.87 682.758 L1721.31 682.758 L1720.75 682.758 L1720.19 682.758 L1719.63 682.758 L1719.07 682.758 L1718.51 682.758 L1717.95 682.758 L1717.39 682.758 L1716.83 682.758 L1716.27 682.758 L1715.71 682.758 L1715.15 682.758 L1714.6 682.758 L1714.04 682.758 L1713.48 682.758 L1712.92 682.758 L1712.36 682.758 L1711.8 682.758 L1711.24 682.758 L1710.68 682.758 L1710.12 682.758 L1709.56 682.758 L1709 682.758 L1708.44 682.758 L1707.88 682.758 L1707.32 682.758 L1706.77 682.758 L1706.21 682.758 L1705.65 682.758 L1705.09 682.758 L1704.53 682.758 L1703.97 682.758 L1703.41 682.758 L1702.85 682.758 L1702.29 682.758 L1701.73 682.758 L1701.17 682.758 L1700.61 682.758 L1700.05 682.758 L1699.5 682.758 L1698.94 682.758 L1698.38 682.758 L1697.82 682.758 L1697.26 682.758 L1696.7 682.758 L1696.14 682.758 L1695.58 682.758 L1695.02 682.758 L1694.46 682.758 L1693.9 682.758 L1693.34 682.758 L1692.78 682.758 L1692.23 682.758 L1691.67 682.758 L1691.11 682.758 L1690.55 682.758 L1689.99 682.758 L1689.43 682.758 L1688.87 682.758 L1688.31 682.758 L1687.75 682.758 L1687.19 682.758 L1686.63 682.758 L1686.07 682.758 L1685.51 682.758 L1684.95 682.758 L1684.4 682.758 L1683.84 682.758 L1683.28 682.758 L1682.72 682.758 L1682.16 682.758 L1681.6 682.758 L1681.04 682.758 L1680.48 682.758 L1679.92 682.758 L1679.36 682.758 L1678.8 682.758 L1678.24 682.758 L1677.68 682.758 L1677.13 682.758 L1676.57 682.758 L1676.01 682.758 L1675.45 682.758 L1674.89 682.758 L1674.33 682.758 L1673.77 682.758 L1673.21 682.758 L1672.65 682.758 L1672.09 682.758 L1671.53 682.758 L1670.97 682.758 L1670.41 682.758 L1669.85 682.758 L1669.3 682.758 L1668.74 682.758 L1668.18 682.758 L1667.62 682.758 L1667.06 682.758 L1666.5 682.758 L1665.94 682.758 L1665.38 682.758 L1664.82 682.758 L1664.26 682.758 L1663.7 682.758 L1663.14 682.758 L1662.58 682.758 L1662.03 682.758 L1661.47 682.758 L1660.91 682.758 L1660.35 682.758 L1659.79 682.758 L1659.23 682.758 L1658.67 682.758 L1658.11 682.758 L1657.55 682.758 L1656.99 682.758 L1656.43 682.758 L1655.87 682.758 L1655.31 682.758 L1654.76 682.758 L1654.2 682.758 L1653.64 682.758 L1653.08 682.758 L1652.52 682.758 L1651.96 682.758 L1651.4 682.758 L1650.84 682.758 L1650.28 682.758 L1649.72 682.758 L1649.16 682.758 L1648.6 682.758 L1648.04 682.758 L1647.48 682.758 L1646.93 682.758 L1646.37 682.758 L1645.81 682.758 L1645.25 682.758 L1644.69 682.758 L1644.13 682.758 L1643.57 682.758 L1643.01 682.758 L1642.45 682.758 L1641.89 682.758 L1641.33 682.758 L1640.77 682.758 L1640.21 682.758 L1639.66 682.758 L1639.1 682.758 L1638.54 682.758 L1637.98 682.758 L1637.42 682.758 L1636.86 682.758 L1636.3 682.758 L1635.74 682.758 L1635.18 682.758 L1634.62 682.758 L1634.06 682.758 L1633.5 682.758 L1632.94 682.758 L1632.39 682.758 L1631.83 682.758 L1631.27 682.758 L1630.71 682.758 L1630.15 682.758 L1629.59 682.758 L1629.03 682.758 L1628.47 682.758 L1627.91 682.758 L1627.35 682.758 L1626.79 682.758 L1626.23 682.758 L1625.67 682.758 L1625.11 682.758 L1624.56 682.758 L1624 682.758 L1623.44 682.758 L1622.88 682.758 L1622.32 682.758 L1621.76 682.758 L1621.2 682.758 L1620.64 682.758 L1620.08 682.758 L1619.52 682.758 L1618.96 682.758 L1618.4 682.758 L1617.84 682.758 L1617.29 682.758 L1616.73 682.758 L1616.17 682.758 L1615.61 682.758 L1615.05 682.758 L1614.49 682.758 L1613.93 682.758 L1613.37 682.758 L1612.81 682.758 L1612.25 682.758 L1611.69 682.758 L1611.13 682.758 L1610.57 682.758 L1610.02 682.758 L1609.46 682.758 L1608.9 682.758 L1608.34 682.758 L1607.78 682.758 L1607.22 682.758 L1606.66 682.758 L1606.1 682.758 L1605.54 682.758 L1604.98 682.758 L1604.42 682.758 L1603.86 682.758 L1603.3 682.758 L1602.74 682.758 L1602.19 682.758 L1601.63 682.758 L1601.07 682.758 L1600.51 682.758 L1599.95 682.758 L1599.39 682.758 L1598.83 682.758 L1598.27 682.758 L1597.71 682.758 L1597.15 682.758 L1596.59 682.758 L1596.03 682.758 L1595.47 682.758 L1594.92 682.758 L1594.36 682.758 L1593.8 682.758 L1593.24 682.758 L1592.68 682.758 L1592.12 682.758 L1591.56 682.758 L1591 682.758 L1590.44 682.758 L1589.88 682.758 L1589.32 682.758 L1588.76 682.758 L1588.2 682.758 L1587.65 682.758 L1587.09 682.758 L1586.53 682.758 L1585.97 682.758 L1585.41 682.758 L1584.85 682.758 L1584.29 682.758 L1583.73 682.758 L1583.17 682.758 L1582.61 682.758 L1582.05 682.758 L1581.49 682.758 L1580.93 682.758 L1580.37 682.758 L1579.82 682.758 L1579.26 682.758 L1578.7 682.758 L1578.14 682.758 L1577.58 682.758 L1577.02 682.758 L1576.46 682.758 L1575.9 682.758 L1575.34 682.758 L1574.78 682.758 L1574.22 682.758 L1573.66 682.758 L1573.1 682.758 L1572.55 682.758 L1571.99 682.758 L1571.43 682.758 L1570.87 682.758 L1570.31 682.758 L1569.75 682.758 L1569.19 682.758 L1568.63 682.758 L1568.07 682.758 L1567.51 682.758 L1566.95 682.758 L1566.39 682.758 L1565.83 682.758 L1565.28 682.758 L1564.72 682.758 L1564.16 682.758 L1563.6 682.758 L1563.04 682.758 L1562.48 682.758 L1561.92 682.758 L1561.36 682.758 L1560.8 682.758 L1560.24 682.758 L1559.68 682.758 L1559.12 682.758 L1558.56 682.758 L1558 682.758 L1557.45 682.758 L1556.89 682.758 L1556.33 682.758 L1555.77 682.758 L1555.21 682.758 L1554.65 682.758 L1554.09 682.758 L1553.53 682.758 L1552.97 682.758 L1552.41 682.758 L1551.85 682.758 L1551.29 682.758 L1550.73 682.758 L1550.18 682.758 L1549.62 682.758 L1549.06 682.758 L1548.5 682.758 L1547.94 682.758 L1547.38 682.758 L1546.82 682.758 L1546.26 682.758 L1545.7 682.758 L1545.14 682.758 L1544.58 682.758 L1544.02 682.758 L1543.46 682.758 L1542.9 682.758 L1542.35 682.758 L1541.79 682.758 L1541.23 682.758 L1540.67 682.758 L1540.11 682.758 L1539.55 682.758 L1538.99 682.758 L1538.43 682.758 L1537.87 682.758 L1537.31 682.758 L1536.75 682.758 L1536.19 682.758 L1535.63 682.758 L1535.08 682.758 L1534.52 682.758 L1533.96 682.758 L1533.4 682.758 L1532.84 682.758 L1532.28 682.758 L1531.72 682.758 L1531.16 682.758 L1530.6 682.758 L1530.04 682.758 L1529.48 682.758 L1528.92 682.758 L1528.36 682.758 L1527.81 682.758 L1527.25 682.758 L1526.69 682.758 L1526.13 682.758 L1525.57 682.758 L1525.01 682.758 L1524.45 682.758 L1523.89 682.758 L1523.33 682.758 L1522.77 682.758 L1522.21 682.758 L1521.65 682.758 L1521.09 682.758 L1520.53 682.758 L1519.98 682.758 L1519.42 682.758 L1518.86 682.758 L1518.3 682.758 L1517.74 682.758 L1517.18 682.758 L1516.62 682.758 L1516.06 682.758 L1515.5 682.758 L1514.94 682.758 L1514.38 682.758 L1513.82 682.758 L1513.26 682.758 L1512.71 682.758 L1512.15 682.758 L1511.59 682.758 L1511.03 682.758 L1510.47 682.758 L1509.91 682.758 L1509.35 682.758 L1508.79 682.758 L1508.23 682.758 L1507.67 682.758 L1507.11 682.758 L1506.55 682.758 L1505.99 682.758 L1505.44 682.758 L1504.88 682.758 L1504.32 682.758 L1503.76 682.758 L1503.2 682.758 L1502.64 682.758 L1502.08 682.758 L1501.52 682.758 L1500.96 682.758 L1500.4 682.758 L1499.84 682.758 L1499.28 682.758 L1498.72 682.758 L1498.16 682.758 L1497.61 682.758 L1497.05 682.758 L1496.49 682.758 L1495.93 682.758 L1495.37 682.758 L1494.81 682.758 L1494.25 682.758 L1493.69 682.758 L1493.13 682.758 L1492.57 682.758 L1492.01 682.758 L1491.45 682.758 L1490.89 682.758 L1490.34 682.758 L1489.78 682.758 L1489.22 682.758 L1488.66 682.758 L1488.1 682.758 L1487.54 682.758 L1486.98 682.758 L1486.42 682.758 L1485.86 682.758 L1485.3 682.758 L1484.74 682.758 L1484.18 682.758 L1483.62 682.758 L1483.07 682.758 L1482.51 682.758 L1481.95 682.758 L1481.39 682.758 L1480.83 682.758 L1480.27 682.758 L1479.71 682.758 L1479.15 682.758 L1478.59 682.758 L1478.03 682.758 L1477.47 682.758 L1476.91 682.758 L1476.35 682.758 L1475.79 682.758 L1475.24 682.758 L1474.68 682.758 L1474.12 682.758 L1473.56 682.758 L1473 682.758 L1472.44 682.758 L1471.88 682.758 L1471.32 682.758 L1470.76 682.758 L1470.2 682.758 L1469.64 682.758 L1469.08 682.758 L1468.52 682.758 L1467.97 682.758 L1467.41 682.758 L1466.85 682.758 L1466.29 682.758 L1465.73 682.758 L1465.17 682.758 L1464.61 682.758 L1464.05 682.758 L1463.49 682.758 L1462.93 682.758 L1462.37 682.758 L1461.81 682.758 L1461.25 682.758 L1460.7 682.758 L1460.14 682.758 L1459.58 682.758 L1459.02 682.758 L1458.46 682.758 L1457.9 682.758 L1457.34 682.758 L1456.78 682.758 L1456.22 682.758 L1455.66 682.758 L1455.1 682.758 L1454.54 682.758 L1453.98 682.758 L1453.42 682.758 L1452.87 682.758 L1452.31 682.758 L1451.75 682.758 L1451.19 682.758 L1450.63 682.758 L1450.07 682.758 L1449.51 682.758 L1448.95 682.758 L1448.39 682.758 L1447.83 682.758 L1447.27 682.758 L1446.71 682.758 L1446.15 682.758 L1445.6 682.758 L1445.04 682.758 L1444.48 682.758 L1443.92 682.758 L1443.36 682.758 L1442.8 682.758 L1442.24 682.758 L1441.68 682.758 L1441.12 682.758 L1440.56 682.758 L1440 682.758 L1439.44 682.758 L1438.88 682.758 L1438.33 682.758 L1437.77 682.758 L1437.21 682.758 L1436.65 682.758 L1436.09 682.758 L1435.53 682.758 L1434.97 682.758 L1434.41 682.758 L1433.85 682.758 L1433.29 682.758 L1432.73 682.758 L1432.17 682.758 L1431.61 682.758 L1431.05 682.758 L1430.5 682.758 L1429.94 682.758 L1429.38 682.758 L1428.82 682.758 L1428.26 682.758 L1427.7 682.758 L1427.14 682.758 L1426.58 682.758 L1426.02 682.758 L1425.46 682.758 L1424.9 682.758 L1424.34 682.758 L1423.78 682.758 L1423.23 682.758 L1422.67 682.758 L1422.11 682.758 L1421.55 682.758 L1420.99 682.758 L1420.43 682.758 L1419.87 682.758 L1419.31 682.758 L1418.75 682.758 L1418.19 682.758 L1417.63 682.758 L1417.07 682.758 L1416.51 682.758 L1415.95 682.758 L1415.4 682.758 L1414.84 682.758 L1414.28 682.758 L1413.72 682.758 L1413.16 682.758 L1412.6 682.758 L1412.04 682.758 L1411.48 682.758 L1410.92 682.758 L1410.36 682.758 L1409.8 682.758 L1409.24 682.758 L1408.68 682.758 L1408.13 682.758 L1407.57 682.758 L1407.01 682.758 L1406.45 682.758 L1405.89 682.758 L1405.33 682.758 L1404.77 682.758 L1404.21 682.758 L1403.65 682.758 L1403.09 682.758 L1402.53 682.758 L1401.97 682.758 L1401.41 682.758 L1400.86 682.758 L1400.3 682.758 L1399.74 682.758 L1399.18 682.758 L1398.62 682.758 L1398.06 682.758 L1397.5 682.758 L1396.94 682.758 L1396.38 682.758 L1395.82 682.758 L1395.26 682.758 L1394.7 682.758 L1394.14 682.758 L1393.58 682.758 L1393.03 682.758 L1392.47 682.758 L1391.91 682.758 L1391.35 682.758 L1390.79 682.758 L1390.23 682.758 L1389.67 682.758 L1389.11 682.758 L1388.55 682.758 L1387.99 682.758 L1387.43 682.758 L1386.87 682.758 L1386.31 682.758 L1385.76 682.758 L1385.2 682.758 L1384.64 682.758 L1384.08 682.758 L1383.52 682.758 L1382.96 682.758 L1382.4 682.758 L1381.84 682.758 L1381.28 682.758 L1380.72 682.758 L1380.16 682.758 L1379.6 682.758 L1379.04 682.758 L1378.49 682.758 L1377.93 682.758 L1377.37 682.758 L1376.81 682.758 L1376.25 682.758 L1375.69 682.758 L1375.13 682.758 L1374.57 682.758 L1374.01 682.758 L1373.45 682.758 L1372.89 682.758 L1372.33 682.758 L1371.77 682.758 L1371.21 682.758 L1370.66 682.758 L1370.1 682.758 L1369.54 682.758 L1368.98 682.758 L1368.42 682.758 L1367.86 682.758 L1367.3 682.758 L1366.74 682.758 L1366.18 682.758 L1365.62 682.758 L1365.06 682.758 L1364.5 682.758 L1363.94 682.758 L1363.39 682.758 L1362.83 682.758 L1362.27 682.758 L1361.71 682.758 L1361.15 682.758 L1360.59 682.758 L1360.03 682.758 L1359.47 682.758 L1358.91 682.758 L1358.35 682.758 L1357.79 682.758 L1357.23 682.758 L1356.67 682.758 L1356.12 682.758 L1355.56 682.758 L1355 682.758 L1354.44 682.758 L1353.88 682.758 L1353.32 682.758 L1352.76 682.758 L1352.2 682.758 L1351.64 682.758 L1351.08 682.758 L1350.52 682.758 L1349.96 682.758 L1349.4 682.758 L1348.84 682.758 L1348.29 682.758 L1347.73 682.758 L1347.17 682.758 L1346.61 682.758 L1346.05 682.758 L1345.49 682.758 L1344.93 682.758 L1344.37 682.758 L1343.81 682.758 L1343.25 682.758 L1342.69 682.758 L1342.13 682.758 L1341.57 682.758 L1341.02 682.758 L1340.46 682.758 L1339.9 682.758 L1339.34 682.758 L1338.78 682.758 L1338.22 682.758 L1337.66 682.758 L1337.1 682.758 L1336.54 682.758 L1335.98 682.758 L1335.42 682.758 L1334.86 682.758 L1334.3 682.758 L1333.75 682.758 L1333.19 682.758 L1332.63 682.758 L1332.07 682.758 L1331.51 682.758 L1330.95 682.758 L1330.39 682.758 L1329.83 682.758 L1329.27 682.758 L1328.71 682.758 L1328.15 682.758 L1327.59 682.758 L1327.03 682.758 L1326.47 682.758 L1325.92 682.758 L1325.36 682.758 L1324.8 682.758 L1324.24 682.758 L1323.68 682.758 L1323.12 682.758 L1322.56 682.758 L1322 682.758 L1321.44 682.758 L1320.88 682.758 L1320.32 682.758 L1319.76 682.758 L1319.2 682.758 L1318.65 682.758 L1318.09 682.758 L1317.53 682.758 L1316.97 682.758 L1316.41 682.758 L1315.85 682.758 L1315.29 682.758 L1314.73 682.758 L1314.17 682.758 L1313.61 682.758 L1313.05 682.758 L1312.49 682.758 L1311.93 682.758 L1311.38 682.758 L1310.82 682.758 L1310.26 682.758 L1309.7 682.758 L1309.14 682.758 L1308.58 682.758 L1308.02 682.758 L1307.46 682.758 L1306.9 682.758 L1306.34 682.758 L1305.78 682.758 L1305.22 682.758 L1304.66 682.758 L1304.1 682.758 L1303.55 682.758 L1302.99 682.758 L1302.43 682.758 L1301.87 682.758 L1301.31 682.758 L1300.75 682.758 L1300.19 682.758 L1299.63 682.758 L1299.07 682.758 L1298.51 682.758 L1297.95 682.758 L1297.39 682.758 L1296.83 682.758 L1296.28 682.758 L1295.72 682.758 L1295.16 682.758 L1294.6 682.758 L1294.04 682.758 L1293.48 682.758 L1292.92 682.758 L1292.36 682.758 L1291.8 682.758 L1291.24 682.758 L1290.68 682.758 L1290.12 682.758 L1289.56 682.758 L1289 682.758 L1288.45 682.758 L1287.89 682.758 L1287.33 682.758 L1286.77 682.758 L1286.21 682.758 L1285.65 682.758 L1285.09 682.758 L1284.53 682.758 L1283.97 682.758 L1283.41 682.758 L1282.85 682.758 L1282.29 682.758 L1281.73 682.758 L1281.18 682.758 L1280.62 682.758 L1280.06 682.758 L1279.5 682.758 L1278.94 682.758 L1278.38 682.758 L1277.82 682.758 L1277.26 682.758 L1276.7 682.758 L1276.14 682.758 L1275.58 682.758 L1275.02 682.758 L1274.46 682.758 L1273.91 682.758 L1273.35 682.758 L1272.79 682.758 L1272.23 682.758 L1271.67 682.758 L1271.11 682.758 L1270.55 682.758 L1269.99 682.758 L1269.43 682.758 L1268.87 682.758 L1268.31 682.758 L1267.75 682.758 L1267.19 682.758 L1266.63 682.758 L1266.08 682.758 L1265.52 682.758 L1264.96 682.758 L1264.4 682.758 L1263.84 682.758 L1263.28 682.758 L1262.72 682.758 L1262.16 682.758 L1261.6 682.758 L1261.04 682.758 L1260.48 682.758 L1259.92 682.758 L1259.36 682.758 L1258.81 682.758 L1258.25 682.758 L1257.69 682.758 L1257.13 682.758 L1256.57 682.758 L1256.01 682.758 L1255.45 682.758 L1254.89 682.758 L1254.33 682.758 L1253.77 682.758 L1253.21 682.758 L1252.65 682.758 L1252.09 682.758 L1251.54 682.758 L1250.98 682.758 L1250.42 682.758 L1249.86 682.758 L1249.3 682.758 L1248.74 682.758 L1248.18 682.758 L1247.62 682.758 L1247.06 682.758 L1246.5 682.758 L1245.94 682.758 L1245.38 682.758 L1244.82 682.758 L1244.26 682.758 L1243.71 682.758 L1243.15 682.758 L1242.59 682.758 L1242.03 682.758 L1241.47 682.758 L1240.91 682.758 L1240.35 682.758 L1239.79 682.758 L1239.23 682.758 L1238.67 682.758 L1238.11 682.758 L1237.55 682.758 L1236.99 682.758 L1236.44 682.758 L1235.88 682.758 L1235.32 682.758 L1234.76 682.758 L1234.2 682.758 L1233.64 682.758 L1233.08 682.758 L1232.52 682.758 L1231.96 682.758 L1231.4 682.758 L1230.84 682.758 L1230.28 682.758 L1229.72 682.758 L1229.17 682.758 L1228.61 682.758 L1228.05 682.758 L1227.49 682.758 L1226.93 682.758 L1226.37 682.758 L1225.81 682.758 L1225.25 682.758 L1224.69 682.758 L1224.13 682.758 L1223.57 682.758 L1223.01 682.758 L1222.45 682.758 L1221.89 682.758 L1221.34 682.758 L1220.78 682.758 L1220.22 682.758 L1219.66 682.758 L1219.1 682.758 L1218.54 682.758 L1217.98 682.758 L1217.42 682.758 L1216.86 682.758 L1216.3 682.758 L1215.74 682.758 L1215.18 682.758 L1214.62 682.758 L1214.07 682.758 L1213.51 682.758 L1212.95 682.758 L1212.39 682.758 L1211.83 682.758 L1211.27 682.758 L1210.71 682.758 L1210.15 682.758 L1209.59 682.758 L1209.03 682.758 L1208.47 682.758 L1207.91 682.758 L1207.35 682.758 L1206.8 682.758 L1206.24 682.758 L1205.68 682.758 L1205.12 682.758 L1204.56 682.758 L1204 682.758 L1203.44 682.758 L1202.88 682.758 L1202.32 682.758 L1201.76 682.758 L1201.2 682.758 L1200.64 682.758 L1200.08 682.758 L1199.52 682.758 L1198.97 682.758 L1198.41 682.758 L1197.85 682.758 L1197.29 682.758 L1196.73 682.758 L1196.17 682.758 L1195.61 682.758 L1195.05 682.758 L1194.49 682.758 L1193.93 682.758 L1193.37 682.758 L1192.81 682.758 L1192.25 682.758 L1191.7 682.758 L1191.14 682.758 L1190.58 682.758 L1190.02 682.758 L1189.46 682.758 L1188.9 682.758 L1188.34 682.758 L1187.78 682.758 L1187.22 682.758 L1186.66 682.758 L1186.1 682.758 L1185.54 682.758 L1184.98 682.758 L1184.43 682.758 L1183.87 682.758 L1183.31 682.758 L1182.75 682.758 L1182.19 682.758 L1181.63 682.758 L1181.07 682.758 L1180.51 682.758 L1179.95 682.758 L1179.39 682.758 L1178.83 682.758 L1178.27 682.758 L1177.71 682.758 L1177.15 682.758 L1176.6 682.758 L1176.04 682.758 L1175.48 682.758 L1174.92 682.758 L1174.36 682.758 L1173.8 682.758 L1173.24 682.758 L1172.68 682.758 L1172.12 682.758 L1171.56 682.758 L1171 682.758 L1170.44 682.758 L1169.88 682.758 L1169.33 682.758 L1168.77 682.758 L1168.21 682.758 L1167.65 682.758 L1167.09 682.758 L1166.53 682.758 L1165.97 682.758 L1165.41 682.758 L1164.85 682.758 L1164.29 682.758 L1163.73 682.758 L1163.17 682.758 L1162.61 682.758 L1162.05 682.758 L1161.5 682.758 L1160.94 682.758 L1160.38 682.758 L1159.82 682.758 L1159.26 682.758 L1158.7 682.758 L1158.14 682.758 L1157.58 682.758 L1157.02 682.758 L1156.46 682.758 L1155.9 682.758 L1155.34 682.758 L1154.78 682.758 L1154.23 682.758 L1153.67 682.758 L1153.11 682.758 L1152.55 682.758 L1151.99 682.758 L1151.43 682.758 L1150.87 682.758 L1150.31 682.758 L1149.75 682.758 L1149.19 682.758 L1148.63 682.758 L1148.07 682.758 L1147.51 682.758 L1146.96 682.758 L1146.4 682.758 L1145.84 682.758 L1145.28 682.758 L1144.72 682.758 L1144.16 682.758 L1143.6 682.758 L1143.04 682.758 L1142.48 682.758 L1141.92 682.758 L1141.36 682.758 L1140.8 682.758 L1140.24 682.758 L1139.68 682.758 L1139.13 682.758 L1138.57 682.758 L1138.01 682.758 L1137.45 682.758 L1136.89 682.758 L1136.33 682.758 L1135.77 682.758 L1135.21 682.758 L1134.65 682.758 L1134.09 682.758 L1133.53 682.758 L1132.97 682.758 L1132.41 682.758 L1131.86 682.758 L1131.3 682.758 L1130.74 682.758 L1130.18 682.758 L1129.62 682.758 L1129.06 682.758 L1128.5 682.758 L1127.94 682.758 L1127.38 682.758 L1126.82 682.758 L1126.26 682.758 L1125.7 682.758 L1125.14 682.758 L1124.59 682.758 L1124.03 682.758 L1123.47 682.758 L1122.91 682.758 L1122.35 682.758 L1121.79 682.758 L1121.23 682.758 L1120.67 682.758 L1120.11 682.758 L1119.55 682.758 L1118.99 682.758 L1118.43 682.758 L1117.87 682.758 L1117.31 682.758 L1116.76 682.758 L1116.2 682.758 L1115.64 682.758 L1115.08 682.758 L1114.52 682.758 L1113.96 682.758 L1113.4 682.758 L1112.84 682.758 L1112.28 682.758 L1111.72 682.758 L1111.16 682.758 L1110.6 682.758 L1110.04 682.758 L1109.49 682.758 L1108.93 682.758 L1108.37 682.758 L1107.81 682.758 L1107.25 682.758 L1106.69 682.758 L1106.13 682.758 L1105.57 682.758 L1105.01 682.758 L1104.45 682.758 L1103.89 682.758 L1103.33 682.758 L1102.77 682.758 L1102.22 682.758 L1101.66 682.758 L1101.1 682.758 L1100.54 682.758 L1099.98 682.758 L1099.42 682.758 L1098.86 682.758 L1098.3 682.758 L1097.74 682.758 L1097.18 682.758 L1096.62 682.758 L1096.06 682.758 L1095.5 682.758 L1094.94 682.758 L1094.39 682.758 L1093.83 682.758 L1093.27 682.758 L1092.71 682.758 L1092.15 682.758 L1091.59 682.758 L1091.03 682.758 L1090.47 682.758 L1089.91 682.758 L1089.35 682.758 L1088.79 682.758 L1088.23 682.758 L1087.67 682.758 L1087.12 682.758 L1086.56 682.758 L1086 682.758 L1085.44 682.758 L1084.88 682.758 L1084.32 682.758 L1083.76 682.758 L1083.2 682.758 L1082.64 682.758 L1082.08 682.758 L1081.52 682.758 L1080.96 682.758 L1080.4 682.758 L1079.85 682.758 L1079.29 682.758 L1078.73 682.758 L1078.17 682.758 L1077.61 682.758 L1077.05 682.758 L1076.49 682.758 L1075.93 682.758 L1075.37 682.758 L1074.81 682.758 L1074.25 682.758 L1073.69 682.758 L1073.13 682.758 L1072.57 682.758 L1072.02 682.758 L1071.46 682.758 L1070.9 682.758 L1070.34 682.758 L1069.78 682.758 L1069.22 682.758 L1068.66 682.758 L1068.1 682.758 L1067.54 682.758 L1066.98 682.758 L1066.42 682.758 L1065.86 682.758 L1065.3 682.758 L1064.75 682.758 L1064.19 682.758 L1063.63 682.758 L1063.07 682.758 L1062.51 682.758 L1061.95 682.758 L1061.39 682.758 L1060.83 682.758 L1060.27 682.758 L1059.71 682.758 L1059.15 682.758 L1058.59 682.758 L1058.03 682.758 L1057.48 682.758 L1056.92 682.758 L1056.36 682.758 L1055.8 682.758 L1055.24 682.758 L1054.68 682.758 L1054.12 682.758 L1053.56 682.758 L1053 682.758 L1052.44 682.758 L1051.88 682.758 L1051.32 682.758 L1050.76 682.758 L1050.2 682.758 L1049.65 682.758 L1049.09 682.758 L1048.53 682.758 L1047.97 682.758 L1047.41 682.758 L1046.85 682.758 L1046.29 682.758 L1045.73 682.758 L1045.17 682.758 L1044.61 682.758 L1044.05 682.758 L1043.49 682.758 L1042.93 682.758 L1042.38 682.758 L1041.82 682.758 L1041.26 682.758 L1040.7 682.758 L1040.14 682.758 L1039.58 682.758 L1039.02 682.758 L1038.46 682.758 L1037.9 682.758 L1037.34 682.758 L1036.78 682.758 L1036.22 682.758 L1035.66 682.758 L1035.1 682.758 L1034.55 682.758 L1033.99 682.758 L1033.43 682.758 L1032.87 682.758 L1032.31 682.758 L1031.75 682.758 L1031.19 682.758 L1030.63 682.758 L1030.07 682.758 L1029.51 682.758 L1028.95 682.758 L1028.39 682.758 L1027.83 682.758 L1027.28 682.758 L1026.72 682.758 L1026.16 682.758 L1025.6 682.758 L1025.04 682.758 L1024.48 682.758 L1023.92 682.758 L1023.36 682.758 L1022.8 682.758 L1022.24 682.758 L1021.68 682.758 L1021.12 682.758 L1020.56 682.758 L1020.01 682.758 L1019.45 682.758 L1018.89 682.758 L1018.33 682.758 L1017.77 682.758 L1017.21 682.758 L1016.65 682.758 L1016.09 682.758 L1015.53 682.758 L1014.97 682.758 L1014.41 682.758 L1013.85 682.758 L1013.29 682.758 L1012.73 682.758 L1012.18 682.758 L1011.62 682.758 L1011.06 682.758 L1010.5 682.758 L1009.94 682.758 L1009.38 682.758 L1008.82 682.758 L1008.26 682.758 L1007.7 682.758 L1007.14 682.758 L1006.58 682.758 L1006.02 682.758 L1005.46 682.758 L1004.91 682.758 L1004.35 682.758 L1003.79 682.758 L1003.23 682.758 L1002.67 682.758 L1002.11 682.758 L1001.55 682.758 L1000.99 682.758 L1000.43 682.758 L999.872 682.758 L999.313 682.758 L998.754 682.758 L998.194 682.758 L997.635 682.758 L997.076 682.758 L996.517 682.758 L995.957 682.758 L995.398 682.758 L994.839 682.758 L994.28 682.758 L993.72 682.758 L993.161 682.758 L992.602 682.758 L992.043 682.758 L991.483 682.758 L990.924 682.758 L990.365 682.758 L989.806 682.758 L989.246 682.758 L988.687 682.758 L988.128 682.758 L987.569 682.758 L987.009 682.758 L986.45 682.758 L985.891 682.758 L985.332 682.758 L984.772 682.758 L984.213 682.758 L983.654 682.758 L983.095 682.758 L982.535 682.758 L981.976 682.758 L981.417 682.758 L980.858 682.758 L980.298 682.758 L979.739 682.758 L979.18 682.758 L978.621 682.758 L978.061 682.758 L977.502 682.758 L976.943 682.758 L976.384 682.758 L975.824 682.758 L975.265 682.758 L974.706 682.758 L974.147 682.758 L973.587 682.758 L973.028 682.758 L972.469 682.758 L971.91 682.758 L971.35 682.758 L970.791 682.758 L970.232 682.758 L969.673 682.758 L969.113 682.758 L968.554 682.758 L967.995 682.758 L967.436 682.758 L966.876 682.758 L966.317 682.758 L965.758 682.758 L965.199 682.758 L964.639 682.758 L964.08 682.758 L963.521 682.758 L962.962 682.758 L962.402 682.758 L961.843 682.758 L961.284 682.758 L960.725 682.758 L960.165 682.758 L959.606 682.758 L959.047 682.758 L958.488 682.758 L957.928 682.758 L957.369 682.758 L956.81 682.758 L956.251 682.758 L955.691 682.758 L955.132 682.758 L954.573 682.758 L954.014 682.758 L953.454 682.758 L952.895 682.758 L952.336 682.758 L951.777 682.758 L951.217 682.758 L950.658 682.758 L950.099 682.758 L949.54 682.758 L948.98 682.758 L948.421 682.758 L947.862 682.758 L947.303 682.758 L946.743 682.758 L946.184 682.758 L945.625 682.758 L945.066 682.758 L944.506 682.758 L943.947 682.758 L943.388 682.758 L942.829 682.758 L942.269 682.758 L941.71 682.758 L941.151 682.758 L940.592 682.758 L940.032 682.758 L939.473 682.758 L938.914 682.758 L938.355 682.758 L937.795 682.758 L937.236 682.758 L936.677 682.758 L936.118 682.758 L935.558 682.758 L934.999 682.758 L934.44 682.758 L933.881 682.758 L933.321 682.758 L932.762 682.758 L932.203 682.758 L931.644 682.758 L931.084 682.758 L930.525 682.758 L929.966 682.758 L929.406 682.758 L928.847 682.758 L928.288 682.758 L927.729 682.758 L927.169 682.758 L926.61 682.758 L926.051 682.758 L925.492 682.758 L924.932 682.758 L924.373 682.758 L923.814 682.758 L923.255 682.758 L922.695 682.758 L922.136 682.758 L921.577 682.758 L921.018 682.758 L920.458 682.758 L919.899 682.758 L919.34 682.758 L918.781 682.758 L918.221 682.758 L917.662 682.758 L917.103 682.758 L916.544 682.758 L915.984 682.758 L915.425 682.758 L914.866 682.758 L914.307 682.758 L913.747 682.758 L913.188 682.758 L912.629 682.758 L912.07 682.758 L911.51 682.758 L910.951 682.758 L910.392 682.758 L909.833 682.758 L909.273 682.758 L908.714 682.758 L908.155 682.758 L907.596 682.758 L907.036 682.758 L906.477 682.758 L905.918 682.758 L905.359 682.758 L904.799 682.758 L904.24 682.758 L903.681 682.758 L903.122 682.758 L902.562 682.758 L902.003 682.758 L901.444 682.758 L900.885 682.758 L900.325 682.758 L899.766 682.758 L899.207 682.758 L898.648 682.758 L898.088 682.758 L897.529 682.758 L896.97 682.758 L896.411 682.758 L895.851 682.758 L895.292 682.758 L894.733 682.758 L894.174 682.758 L893.614 682.758 L893.055 682.758 L892.496 682.758 L891.937 682.758 L891.377 682.758 L890.818 682.758 L890.259 682.758 L889.7 682.758 L889.14 682.758 L888.581 682.758 L888.022 682.758 L887.463 682.758 L886.903 682.758 L886.344 682.758 L885.785 682.758 L885.226 682.758 L884.666 682.758 L884.107 682.758 L883.548 682.758 L882.989 682.758 L882.429 682.758 L881.87 682.758 L881.311 682.758 L880.752 682.758 L880.192 682.758 L879.633 682.758 L879.074 682.758 L878.515 682.758 L877.955 682.758 L877.396 682.758 L876.837 682.758 L876.278 682.758 L875.718 682.758 L875.159 682.758 L874.6 682.758 L874.041 682.758 L873.481 682.758 L872.922 682.758 L872.363 682.758 L871.804 682.758 L871.244 682.758 L870.685 682.758 L870.126 682.758 L869.567 682.758 L869.007 682.758 L868.448 682.758 L867.889 682.758 L867.33 682.758 L866.77 682.758 L866.211 682.758 L865.652 682.758 L865.093 682.758 L864.533 682.758 L863.974 682.758 L863.415 682.758 L862.856 682.758 L862.296 682.758 L861.737 682.758 L861.178 682.758 L860.619 682.758 L860.059 682.758 L859.5 682.758 L858.941 682.758 L858.382 682.758 L857.822 682.758 L857.263 682.758 L856.704 682.758 L856.145 682.758 L855.585 682.758 L855.026 682.758 L854.467 682.758 L853.908 682.758 L853.348 682.758 L852.789 682.758 L852.23 682.758 L851.671 682.758 L851.111 682.758 L850.552 682.758 L849.993 682.758 L849.434 682.758 L848.874 682.758 L848.315 682.758 L847.756 682.758 L847.197 682.758 L846.637 682.758 L846.078 682.758 L845.519 682.758 L844.96 682.758 L844.4 682.758 L843.841 682.758 L843.282 682.758 L842.723 682.758 L842.163 682.758 L841.604 682.758 L841.045 682.758 L840.486 682.758 L839.926 682.758 L839.367 682.758 L838.808 682.758 L838.249 682.758 L837.689 682.758 L837.13 682.758 L836.571 682.758 L836.012 682.758 L835.452 682.758 L834.893 682.758 L834.334 682.758 L833.775 682.758 L833.215 682.758 L832.656 682.758 L832.097 682.758 L831.538 682.758 L830.978 682.758 L830.419 682.758 L829.86 682.758 L829.301 682.758 L828.741 682.758 L828.182 682.758 L827.623 682.758 L827.064 682.758 L826.504 682.758 L825.945 682.758 L825.386 682.758 L824.827 682.758 L824.267 682.758 L823.708 682.758 L823.149 682.758 L822.59 682.758 L822.03 682.758 L821.471 682.758 L820.912 682.758 L820.353 682.758 L819.793 682.758 L819.234 682.758 L818.675 682.758 L818.116 682.758 L817.556 682.758 L816.997 682.758 L816.438 682.758 L815.879 682.758 L815.319 682.758 L814.76 682.758 L814.201 682.758 L813.642 682.758 L813.082 682.758 L812.523 682.758 L811.964 682.758 L811.405 682.758 L810.845 682.758 L810.286 682.758 L809.727 682.758 L809.168 682.758 L808.608 682.758 L808.049 682.758 L807.49 682.758 L806.931 682.758 L806.371 682.758 L805.812 682.758 L805.253 682.758 L804.693 682.758 L804.134 682.758 L803.575 682.758 L803.016 682.758 L802.456 682.758 L801.897 682.758 L801.338 682.758 L800.779 682.758 L800.219 682.758 L799.66 682.758 L799.101 682.758 L798.542 682.758 L797.982 682.758 L797.423 682.758 L796.864 682.758 L796.305 682.758 L795.745 682.758 L795.186 682.758 L794.627 682.758 L794.068 682.758 L793.508 682.758 L792.949 682.758 L792.39 682.758 L791.831 682.758 L791.271 682.758 L790.712 682.758 L790.153 682.758 L789.594 682.758 L789.034 682.758 L788.475 682.758 L787.916 682.758 L787.357 682.758 L786.797 682.758 L786.238 682.758 L785.679 682.758 L785.12 682.758 L784.56 682.758 L784.001 682.758 L783.442 682.758 L782.883 682.758 L782.323 682.758 L781.764 682.758 L781.205 682.758 L780.646 682.758 L780.086 682.758 L779.527 682.758 L778.968 682.758 L778.409 682.758 L777.849 682.758 L777.29 682.758 L776.731 682.758 L776.172 682.758 L775.612 682.758 L775.053 682.758 L774.494 682.758 L773.935 682.758 L773.375 682.758 L772.816 682.758 L772.257 682.758 L771.698 682.758 L771.138 682.758 L770.579 682.758 L770.02 682.758 L769.461 682.758 L768.901 682.758 L768.342 682.758 L767.783 682.758 L767.224 682.758 L766.664 682.758 L766.105 682.758 L765.546 682.758 L764.987 682.758 L764.427 682.758 L763.868 682.758 L763.309 682.758 L762.75 682.758 L762.19 682.758 L761.631 682.758 L761.072 682.758 L760.513 682.758 L759.953 682.758 L759.394 682.758 L758.835 682.758 L758.276 682.758 L757.716 682.758 L757.157 682.758 L756.598 682.758 L756.039 682.758 L755.479 682.758 L754.92 682.758 L754.361 682.758 L753.802 682.758 L753.242 682.758 L752.683 682.758 L752.124 682.758 L751.565 682.758 L751.005 682.758 L750.446 682.758 L749.887 682.758 L749.328 682.758 L748.768 682.758 L748.209 682.758 L747.65 682.758 L747.091 682.758 L746.531 682.758 L745.972 682.758 L745.413 682.758 L744.854 682.758 L744.294 682.758 L743.735 682.758 L743.176 682.758 L742.617 682.758 L742.057 682.758 L741.498 682.758 L740.939 682.758 L740.38 682.758 L739.82 682.758 L739.261 682.758 L738.702 682.758 L738.143 682.758 L737.583 682.758 L737.024 682.758 L736.465 682.758 L735.906 682.758 L735.346 682.758 L734.787 682.758 L734.228 682.758 L733.669 682.758 L733.109 682.758 L732.55 682.758 L731.991 682.758 L731.432 682.758 L730.872 682.758 L730.313 682.758 L729.754 682.758 L729.195 682.758 L728.635 682.758 L728.076 682.758 L727.517 682.758 L726.958 682.758 L726.398 682.758 L725.839 682.758 L725.28 682.758 L724.721 682.758 L724.161 682.758 L723.602 682.758 L723.043 682.758 L722.484 682.758 L721.924 682.758 L721.365 682.758 L720.806 682.758 L720.247 682.758  Z\" fill=\"#3da44d\" fill-rule=\"evenodd\" fill-opacity=\"0.5\"/>\n<polyline clip-path=\"url(#clip763)\" style=\"stroke:#3da44d; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"720.247,683.455 720.806,683.455 721.365,683.455 721.924,683.455 722.484,683.455 723.043,683.455 723.602,683.455 724.161,683.455 724.721,683.455 725.28,683.455 725.839,683.455 726.398,683.455 726.958,683.455 727.517,683.455 728.076,683.455 728.635,683.455 729.195,683.455 729.754,683.455 730.313,683.455 730.872,683.455 731.432,683.455 731.991,683.455 732.55,683.455 733.109,683.455 733.669,683.455 734.228,683.455 734.787,683.455 735.346,683.455 735.906,683.455 736.465,683.455 737.024,683.455 737.583,683.455 738.143,683.455 738.702,683.455 739.261,683.455 739.82,683.455 740.38,683.455 740.939,683.455 741.498,683.455 742.057,683.455 742.617,683.455 743.176,683.455 743.735,683.455 744.294,683.455 744.854,683.455 745.413,683.455 745.972,683.455 746.531,683.455 747.091,683.455 747.65,683.455 748.209,683.455 748.768,683.455 749.328,683.455 749.887,683.455 750.446,683.455 751.005,683.455 751.565,683.455 752.124,683.455 752.683,683.455 753.242,683.455 753.802,683.455 754.361,683.455 754.92,683.455 755.479,683.455 756.039,683.455 756.598,683.455 757.157,683.455 757.716,683.455 758.276,683.455 758.835,683.455 759.394,683.455 759.953,683.455 760.513,683.455 761.072,683.455 761.631,683.455 762.19,683.455 762.75,683.455 763.309,683.455 763.868,683.455 764.427,683.455 764.987,683.455 765.546,683.455 766.105,683.455 766.664,683.455 767.224,683.455 767.783,683.455 768.342,683.455 768.901,683.455 769.461,683.455 770.02,683.455 770.579,683.455 771.138,683.455 771.698,683.455 772.257,683.455 772.816,683.455 773.375,683.455 773.935,683.455 774.494,683.455 775.053,683.455 775.612,683.455 776.172,683.455 776.731,683.455 777.29,683.455 777.849,683.455 778.409,683.455 778.968,683.455 779.527,683.455 780.086,683.455 780.646,683.455 781.205,683.455 781.764,683.455 782.323,683.455 782.883,683.455 783.442,683.455 784.001,683.455 784.56,683.455 785.12,683.455 785.679,683.455 786.238,683.455 786.797,683.455 787.357,683.455 787.916,683.455 788.475,683.455 789.034,683.455 789.594,683.455 790.153,683.455 790.712,683.455 791.271,683.455 791.831,683.455 792.39,683.455 792.949,683.455 793.508,683.455 794.068,683.455 794.627,683.455 795.186,683.455 795.745,683.455 796.305,683.455 796.864,683.455 797.423,683.455 797.982,683.455 798.542,683.455 799.101,683.455 799.66,683.455 800.219,683.455 800.779,683.455 801.338,683.455 801.897,683.455 802.456,683.455 803.016,683.455 803.575,683.455 804.134,683.455 804.693,683.455 805.253,683.455 805.812,683.455 806.371,683.455 806.931,683.455 807.49,683.455 808.049,683.455 808.608,683.455 809.168,683.455 809.727,683.455 810.286,683.455 810.845,683.455 811.405,683.455 811.964,683.455 812.523,683.455 813.082,683.455 813.642,683.455 814.201,683.455 814.76,683.455 815.319,683.455 815.879,683.455 816.438,683.455 816.997,683.455 817.556,683.455 818.116,683.455 818.675,683.455 819.234,683.455 819.793,683.455 820.353,683.455 820.912,683.455 821.471,683.455 822.03,683.455 822.59,683.455 823.149,683.455 823.708,683.455 824.267,683.455 824.827,683.455 825.386,683.455 825.945,683.455 826.504,683.455 827.064,683.455 827.623,683.455 828.182,683.455 828.741,683.455 829.301,683.455 829.86,683.455 830.419,683.455 830.978,683.455 831.538,683.455 832.097,683.455 832.656,683.455 833.215,683.455 833.775,683.455 834.334,683.455 834.893,683.455 835.452,683.455 836.012,683.455 836.571,683.455 837.13,683.455 837.689,683.455 838.249,683.455 838.808,683.455 839.367,683.455 839.926,683.455 840.486,683.455 841.045,683.455 841.604,683.455 842.163,683.455 842.723,683.455 843.282,683.455 843.841,683.455 844.4,683.455 844.96,683.455 845.519,683.455 846.078,683.455 846.637,683.455 847.197,683.455 847.756,683.455 848.315,683.455 848.874,683.455 849.434,683.455 849.993,683.455 850.552,683.455 851.111,683.455 851.671,683.455 852.23,683.455 852.789,683.455 853.348,683.455 853.908,683.455 854.467,683.455 855.026,683.455 855.585,683.455 856.145,683.455 856.704,683.455 857.263,683.455 857.822,683.455 858.382,683.455 858.941,683.455 859.5,683.455 860.059,683.455 860.619,683.455 861.178,683.455 861.737,683.455 862.296,683.455 862.856,683.455 863.415,683.455 863.974,683.455 864.533,683.455 865.093,683.455 865.652,683.455 866.211,683.455 866.77,683.455 867.33,683.455 867.889,683.455 868.448,683.455 869.007,683.455 869.567,683.455 870.126,683.455 870.685,683.455 871.244,683.455 871.804,683.455 872.363,683.455 872.922,683.455 873.481,683.455 874.041,683.455 874.6,683.455 875.159,683.455 875.718,683.455 876.278,683.455 876.837,683.455 877.396,683.455 877.955,683.455 878.515,683.455 879.074,683.455 879.633,683.455 880.192,683.455 880.752,683.455 881.311,683.455 881.87,683.455 882.429,683.455 882.989,683.455 883.548,683.455 884.107,683.455 884.666,683.455 885.226,683.455 885.785,683.455 886.344,683.455 886.903,683.455 887.463,683.455 888.022,683.455 888.581,683.455 889.14,683.455 889.7,683.455 890.259,683.455 890.818,683.455 891.377,683.455 891.937,683.455 892.496,683.455 893.055,683.455 893.614,683.455 894.174,683.455 894.733,683.455 895.292,683.455 895.851,683.455 896.411,683.455 896.97,683.455 897.529,683.455 898.088,683.455 898.648,683.455 899.207,683.455 899.766,683.455 900.325,683.455 900.885,683.455 901.444,683.455 902.003,683.455 902.562,683.455 903.122,683.455 903.681,683.455 904.24,683.455 904.799,683.455 905.359,683.455 905.918,683.455 906.477,683.455 907.036,683.455 907.596,683.455 908.155,683.455 908.714,683.455 909.273,683.455 909.833,683.455 910.392,683.455 910.951,683.455 911.51,683.455 912.07,683.455 912.629,683.455 913.188,683.455 913.747,683.455 914.307,683.455 914.866,683.455 915.425,683.455 915.984,683.455 916.544,683.455 917.103,683.455 917.662,683.455 918.221,683.455 918.781,683.455 919.34,683.455 919.899,683.455 920.458,683.455 921.018,683.455 921.577,683.455 922.136,683.455 922.695,683.455 923.255,683.455 923.814,683.455 924.373,683.455 924.932,683.455 925.492,683.455 926.051,683.455 926.61,683.455 927.169,683.455 927.729,683.455 928.288,683.455 928.847,683.455 929.406,683.455 929.966,683.455 930.525,683.455 931.084,683.455 931.644,683.455 932.203,683.455 932.762,683.455 933.321,683.455 933.881,683.455 934.44,683.455 934.999,683.455 935.558,683.455 936.118,683.455 936.677,683.455 937.236,683.455 937.795,683.455 938.355,683.455 938.914,683.455 939.473,683.455 940.032,683.455 940.592,683.455 941.151,683.455 941.71,683.455 942.269,683.455 942.829,683.455 943.388,683.455 943.947,683.455 944.506,683.455 945.066,683.455 945.625,683.455 946.184,683.455 946.743,683.455 947.303,683.455 947.862,683.455 948.421,683.455 948.98,683.455 949.54,683.455 950.099,683.455 950.658,683.455 951.217,683.455 951.777,683.455 952.336,683.455 952.895,683.455 953.454,683.455 954.014,683.455 954.573,683.455 955.132,683.455 955.691,683.455 956.251,683.455 956.81,683.455 957.369,683.455 957.928,683.455 958.488,683.455 959.047,683.455 959.606,683.455 960.165,683.455 960.725,683.455 961.284,683.455 961.843,683.455 962.402,683.455 962.962,683.455 963.521,683.455 964.08,683.455 964.639,683.455 965.199,683.455 965.758,683.455 966.317,683.455 966.876,683.455 967.436,683.455 967.995,683.455 968.554,683.455 969.113,683.455 969.673,683.455 970.232,683.455 970.791,683.455 971.35,683.455 971.91,683.455 972.469,683.455 973.028,683.455 973.587,683.455 974.147,683.455 974.706,683.455 975.265,683.455 975.824,683.455 976.384,683.455 976.943,683.455 977.502,683.455 978.061,683.455 978.621,683.455 979.18,683.455 979.739,683.455 980.298,683.455 980.858,683.455 981.417,683.455 981.976,683.455 982.535,683.455 983.095,683.455 983.654,683.455 984.213,683.455 984.772,683.455 985.332,683.455 985.891,683.455 986.45,683.455 987.009,683.455 987.569,683.455 988.128,683.455 988.687,683.455 989.246,683.455 989.806,683.455 990.365,683.455 990.924,683.455 991.483,683.455 992.043,683.455 992.602,683.455 993.161,683.455 993.72,683.455 994.28,683.455 994.839,683.455 995.398,683.455 995.957,683.455 996.517,683.455 997.076,683.455 997.635,683.455 998.194,683.455 998.754,683.455 999.313,683.455 999.872,683.455 1000.43,683.455 1000.99,683.455 1001.55,683.455 1002.11,683.455 1002.67,683.455 1003.23,683.455 1003.79,683.455 1004.35,683.455 1004.91,683.455 1005.46,683.455 1006.02,683.455 1006.58,683.455 1007.14,683.455 1007.7,683.455 1008.26,683.455 1008.82,683.455 1009.38,683.455 1009.94,683.455 1010.5,683.455 1011.06,683.455 1011.62,683.455 1012.18,683.455 1012.73,683.455 1013.29,683.455 1013.85,683.455 1014.41,683.455 1014.97,683.455 1015.53,683.455 1016.09,683.455 1016.65,683.455 1017.21,683.455 1017.77,683.455 1018.33,683.455 1018.89,683.455 1019.45,683.455 1020.01,683.455 1020.56,683.455 1021.12,683.455 1021.68,683.455 1022.24,683.455 1022.8,683.455 1023.36,683.455 1023.92,683.455 1024.48,683.455 1025.04,683.455 1025.6,683.455 1026.16,683.455 1026.72,683.455 1027.28,683.455 1027.83,683.455 1028.39,683.455 1028.95,683.455 1029.51,683.455 1030.07,683.455 1030.63,683.455 1031.19,683.455 1031.75,683.455 1032.31,683.455 1032.87,683.455 1033.43,683.455 1033.99,683.455 1034.55,683.455 1035.1,683.455 1035.66,683.455 1036.22,683.455 1036.78,683.455 1037.34,683.455 1037.9,683.455 1038.46,683.455 1039.02,683.455 1039.58,683.455 1040.14,683.455 1040.7,683.455 1041.26,683.455 1041.82,683.455 1042.38,683.455 1042.93,683.455 1043.49,683.455 1044.05,683.455 1044.61,683.455 1045.17,683.455 1045.73,683.455 1046.29,683.455 1046.85,683.455 1047.41,683.455 1047.97,683.455 1048.53,683.455 1049.09,683.455 1049.65,683.455 1050.2,683.455 1050.76,683.455 1051.32,683.455 1051.88,683.455 1052.44,683.455 1053,683.455 1053.56,683.455 1054.12,683.455 1054.68,683.455 1055.24,683.455 1055.8,683.455 1056.36,683.455 1056.92,683.455 1057.48,683.455 1058.03,683.455 1058.59,683.455 1059.15,683.455 1059.71,683.455 1060.27,683.455 1060.83,683.455 1061.39,683.455 1061.95,683.455 1062.51,683.455 1063.07,683.455 1063.63,683.455 1064.19,683.455 1064.75,683.455 1065.3,683.455 1065.86,683.455 1066.42,683.455 1066.98,683.455 1067.54,683.455 1068.1,683.455 1068.66,683.455 1069.22,683.455 1069.78,683.455 1070.34,683.455 1070.9,683.455 1071.46,683.455 1072.02,683.455 1072.57,683.455 1073.13,683.455 1073.69,683.455 1074.25,683.455 1074.81,683.455 1075.37,683.455 1075.93,683.455 1076.49,683.455 1077.05,683.455 1077.61,683.455 1078.17,683.455 1078.73,683.455 1079.29,683.455 1079.85,683.455 1080.4,683.455 1080.96,683.455 1081.52,683.455 1082.08,683.455 1082.64,683.455 1083.2,683.455 1083.76,683.455 1084.32,683.455 1084.88,683.455 1085.44,683.455 1086,683.455 1086.56,683.455 1087.12,683.455 1087.67,683.455 1088.23,683.455 1088.79,683.455 1089.35,683.455 1089.91,683.455 1090.47,683.455 1091.03,683.455 1091.59,683.455 1092.15,683.455 1092.71,683.455 1093.27,683.455 1093.83,683.455 1094.39,683.455 1094.94,683.455 1095.5,683.455 1096.06,683.455 1096.62,683.455 1097.18,683.455 1097.74,683.455 1098.3,683.455 1098.86,683.455 1099.42,683.455 1099.98,683.455 1100.54,683.455 1101.1,683.455 1101.66,683.455 1102.22,683.455 1102.77,683.455 1103.33,683.455 1103.89,683.455 1104.45,683.455 1105.01,683.455 1105.57,683.455 1106.13,683.455 1106.69,683.455 1107.25,683.455 1107.81,683.455 1108.37,683.455 1108.93,683.455 1109.49,683.455 1110.04,683.455 1110.6,683.455 1111.16,683.455 1111.72,683.455 1112.28,683.455 1112.84,683.455 1113.4,683.455 1113.96,683.455 1114.52,683.455 1115.08,683.455 1115.64,683.455 1116.2,683.455 1116.76,683.455 1117.31,683.455 1117.87,683.455 1118.43,683.455 1118.99,683.455 1119.55,683.455 1120.11,683.455 1120.67,683.455 1121.23,683.455 1121.79,683.455 1122.35,683.455 1122.91,683.455 1123.47,683.455 1124.03,683.455 1124.59,683.455 1125.14,683.455 1125.7,683.455 1126.26,683.455 1126.82,683.455 1127.38,683.455 1127.94,683.455 1128.5,683.455 1129.06,683.455 1129.62,683.455 1130.18,683.455 1130.74,683.455 1131.3,683.455 1131.86,683.455 1132.41,683.455 1132.97,683.455 1133.53,683.455 1134.09,683.455 1134.65,683.455 1135.21,683.455 1135.77,683.455 1136.33,683.455 1136.89,683.455 1137.45,683.455 1138.01,683.455 1138.57,683.455 1139.13,683.455 1139.68,683.455 1140.24,683.455 1140.8,683.455 1141.36,683.455 1141.92,683.455 1142.48,683.455 1143.04,683.455 1143.6,683.455 1144.16,683.455 1144.72,683.455 1145.28,683.455 1145.84,683.455 1146.4,683.455 1146.96,683.455 1147.51,683.455 1148.07,683.455 1148.63,683.455 1149.19,683.455 1149.75,683.455 1150.31,683.455 1150.87,683.455 1151.43,683.455 1151.99,683.455 1152.55,683.455 1153.11,683.455 1153.67,683.455 1154.23,683.455 1154.78,683.455 1155.34,683.455 1155.9,683.455 1156.46,683.455 1157.02,683.455 1157.58,683.455 1158.14,683.455 1158.7,683.455 1159.26,683.455 1159.82,683.455 1160.38,683.455 1160.94,683.455 1161.5,683.455 1162.05,683.455 1162.61,683.455 1163.17,683.455 1163.73,683.455 1164.29,683.455 1164.85,683.455 1165.41,683.455 1165.97,683.455 1166.53,683.455 1167.09,683.455 1167.65,683.455 1168.21,683.455 1168.77,683.455 1169.33,683.455 1169.88,683.455 1170.44,683.455 1171,683.455 1171.56,683.455 1172.12,683.455 1172.68,683.455 1173.24,683.455 1173.8,683.455 1174.36,683.455 1174.92,683.455 1175.48,683.455 1176.04,683.455 1176.6,683.455 1177.15,683.455 1177.71,683.455 1178.27,683.455 1178.83,683.455 1179.39,683.455 1179.95,683.455 1180.51,683.455 1181.07,683.455 1181.63,683.455 1182.19,683.455 1182.75,683.455 1183.31,683.455 1183.87,683.455 1184.43,683.455 1184.98,683.455 1185.54,683.455 1186.1,683.455 1186.66,683.455 1187.22,683.455 1187.78,683.455 1188.34,683.455 1188.9,683.455 1189.46,683.455 1190.02,683.455 1190.58,683.455 1191.14,683.455 1191.7,683.455 1192.25,683.455 1192.81,683.455 1193.37,683.455 1193.93,683.455 1194.49,683.455 1195.05,683.455 1195.61,683.455 1196.17,683.455 1196.73,683.455 1197.29,683.455 1197.85,683.455 1198.41,683.455 1198.97,683.455 1199.52,683.455 1200.08,683.455 1200.64,683.455 1201.2,683.455 1201.76,683.455 1202.32,683.455 1202.88,683.455 1203.44,683.455 1204,683.455 1204.56,683.455 1205.12,683.455 1205.68,683.455 1206.24,683.455 1206.8,683.455 1207.35,683.455 1207.91,683.455 1208.47,683.455 1209.03,683.455 1209.59,683.455 1210.15,683.455 1210.71,683.455 1211.27,683.455 1211.83,683.455 1212.39,683.455 1212.95,683.455 1213.51,683.455 1214.07,683.455 1214.62,683.455 1215.18,683.455 1215.74,683.455 1216.3,683.455 1216.86,683.455 1217.42,683.455 1217.98,683.455 1218.54,683.455 1219.1,683.455 1219.66,683.455 1220.22,683.455 1220.78,683.455 1221.34,683.455 1221.89,683.455 1222.45,683.455 1223.01,683.455 1223.57,683.455 1224.13,683.455 1224.69,683.455 1225.25,683.455 1225.81,683.455 1226.37,683.455 1226.93,683.455 1227.49,683.455 1228.05,683.455 1228.61,683.455 1229.17,683.455 1229.72,683.455 1230.28,683.455 1230.84,683.455 1231.4,683.455 1231.96,683.455 1232.52,683.455 1233.08,683.455 1233.64,683.455 1234.2,683.455 1234.76,683.455 1235.32,683.455 1235.88,683.455 1236.44,683.455 1236.99,683.455 1237.55,683.455 1238.11,683.455 1238.67,683.455 1239.23,683.455 1239.79,683.455 1240.35,683.455 1240.91,683.455 1241.47,683.455 1242.03,683.455 1242.59,683.455 1243.15,683.455 1243.71,683.455 1244.26,683.455 1244.82,683.455 1245.38,683.455 1245.94,683.455 1246.5,683.455 1247.06,683.455 1247.62,683.455 1248.18,683.455 1248.74,683.455 1249.3,683.455 1249.86,683.455 1250.42,683.455 1250.98,683.455 1251.54,683.455 1252.09,683.455 1252.65,683.455 1253.21,683.455 1253.77,683.455 1254.33,683.455 1254.89,683.455 1255.45,683.455 1256.01,683.455 1256.57,683.455 1257.13,683.455 1257.69,683.455 1258.25,683.455 1258.81,683.455 1259.36,683.455 1259.92,683.455 1260.48,683.455 1261.04,683.455 1261.6,683.455 1262.16,683.455 1262.72,683.455 1263.28,683.455 1263.84,683.455 1264.4,683.455 1264.96,683.455 1265.52,683.455 1266.08,683.455 1266.63,683.455 1267.19,683.455 1267.75,683.455 1268.31,683.455 1268.87,683.455 1269.43,683.455 1269.99,683.455 1270.55,683.455 1271.11,683.455 1271.67,683.455 1272.23,683.455 1272.79,683.455 1273.35,683.455 1273.91,683.455 1274.46,683.455 1275.02,683.455 1275.58,683.455 1276.14,683.455 1276.7,683.455 1277.26,683.455 1277.82,683.455 1278.38,683.455 1278.94,683.455 1279.5,683.455 1280.06,683.455 1280.62,683.455 1281.18,683.455 1281.73,683.455 1282.29,683.455 1282.85,683.455 1283.41,683.455 1283.97,683.455 1284.53,683.455 1285.09,683.455 1285.65,683.455 1286.21,683.455 1286.77,683.455 1287.33,683.455 1287.89,683.455 1288.45,683.455 1289,683.455 1289.56,683.455 1290.12,683.455 1290.68,683.455 1291.24,683.455 1291.8,683.455 1292.36,683.455 1292.92,683.455 1293.48,683.455 1294.04,683.455 1294.6,683.455 1295.16,683.455 1295.72,683.455 1296.28,683.455 1296.83,683.455 1297.39,683.455 1297.95,683.455 1298.51,683.455 1299.07,683.455 1299.63,683.455 1300.19,683.455 1300.75,683.455 1301.31,683.455 1301.87,683.455 1302.43,683.455 1302.99,683.455 1303.55,683.455 1304.1,683.455 1304.66,683.455 1305.22,683.455 1305.78,683.455 1306.34,683.455 1306.9,683.455 1307.46,683.455 1308.02,683.455 1308.58,683.455 1309.14,683.455 1309.7,683.455 1310.26,683.455 1310.82,683.455 1311.38,683.455 1311.93,683.455 1312.49,683.455 1313.05,683.455 1313.61,683.455 1314.17,683.455 1314.73,683.455 1315.29,683.455 1315.85,683.455 1316.41,683.455 1316.97,683.455 1317.53,683.455 1318.09,683.455 1318.65,683.455 1319.2,683.455 1319.76,683.455 1320.32,683.455 1320.88,683.455 1321.44,683.455 1322,683.455 1322.56,683.455 1323.12,683.455 1323.68,683.455 1324.24,683.455 1324.8,683.455 1325.36,683.455 1325.92,683.455 1326.47,683.455 1327.03,683.455 1327.59,683.455 1328.15,683.455 1328.71,683.455 1329.27,683.455 1329.83,683.455 1330.39,683.455 1330.95,683.455 1331.51,683.455 1332.07,683.455 1332.63,683.455 1333.19,683.455 1333.75,683.455 1334.3,683.455 1334.86,683.455 1335.42,683.455 1335.98,683.455 1336.54,683.455 1337.1,683.455 1337.66,683.455 1338.22,683.455 1338.78,683.455 1339.34,683.455 1339.9,683.455 1340.46,683.455 1341.02,683.455 1341.57,683.455 1342.13,683.455 1342.69,683.455 1343.25,683.455 1343.81,683.455 1344.37,683.455 1344.93,683.455 1345.49,683.455 1346.05,683.455 1346.61,683.455 1347.17,683.455 1347.73,683.455 1348.29,683.455 1348.84,683.455 1349.4,683.455 1349.96,683.455 1350.52,683.455 1351.08,683.455 1351.64,683.455 1352.2,683.455 1352.76,683.455 1353.32,683.455 1353.88,683.455 1354.44,683.455 1355,683.455 1355.56,683.455 1356.12,683.455 1356.67,683.455 1357.23,683.455 1357.79,683.455 1358.35,683.455 1358.91,683.455 1359.47,683.455 1360.03,683.455 1360.59,683.455 1361.15,683.455 1361.71,683.455 1362.27,683.455 1362.83,683.455 1363.39,683.455 1363.94,683.455 1364.5,683.455 1365.06,683.455 1365.62,683.455 1366.18,683.455 1366.74,683.455 1367.3,683.455 1367.86,683.455 1368.42,683.455 1368.98,683.455 1369.54,683.455 1370.1,683.455 1370.66,683.455 1371.21,683.455 1371.77,683.455 1372.33,683.455 1372.89,683.455 1373.45,683.455 1374.01,683.455 1374.57,683.455 1375.13,683.455 1375.69,683.455 1376.25,683.455 1376.81,683.455 1377.37,683.455 1377.93,683.455 1378.49,683.455 1379.04,683.455 1379.6,683.455 1380.16,683.455 1380.72,683.455 1381.28,683.455 1381.84,683.455 1382.4,683.455 1382.96,683.455 1383.52,683.455 1384.08,683.455 1384.64,683.455 1385.2,683.455 1385.76,683.455 1386.31,683.455 1386.87,683.455 1387.43,683.455 1387.99,683.455 1388.55,683.455 1389.11,683.455 1389.67,683.455 1390.23,683.455 1390.79,683.455 1391.35,683.455 1391.91,683.455 1392.47,683.455 1393.03,683.455 1393.58,683.455 1394.14,683.455 1394.7,683.455 1395.26,683.455 1395.82,683.455 1396.38,683.455 1396.94,683.455 1397.5,683.455 1398.06,683.455 1398.62,683.455 1399.18,683.455 1399.74,683.455 1400.3,683.455 1400.86,683.455 1401.41,683.455 1401.97,683.455 1402.53,683.455 1403.09,683.455 1403.65,683.455 1404.21,683.455 1404.77,683.455 1405.33,683.455 1405.89,683.455 1406.45,683.455 1407.01,683.455 1407.57,683.455 1408.13,683.455 1408.68,683.455 1409.24,683.455 1409.8,683.455 1410.36,683.455 1410.92,683.455 1411.48,683.455 1412.04,683.455 1412.6,683.455 1413.16,683.455 1413.72,683.455 1414.28,683.455 1414.84,683.455 1415.4,683.455 1415.95,683.455 1416.51,683.455 1417.07,683.455 1417.63,683.455 1418.19,683.455 1418.75,683.455 1419.31,683.455 1419.87,683.455 1420.43,683.455 1420.99,683.455 1421.55,683.455 1422.11,683.455 1422.67,683.455 1423.23,683.455 1423.78,683.455 1424.34,683.455 1424.9,683.455 1425.46,683.455 1426.02,683.455 1426.58,683.455 1427.14,683.455 1427.7,683.455 1428.26,683.455 1428.82,683.455 1429.38,683.455 1429.94,683.455 1430.5,683.455 1431.05,683.455 1431.61,683.455 1432.17,683.455 1432.73,683.455 1433.29,683.455 1433.85,683.455 1434.41,683.455 1434.97,683.455 1435.53,683.455 1436.09,683.455 1436.65,683.455 1437.21,683.455 1437.77,683.455 1438.33,683.455 1438.88,683.455 1439.44,683.455 1440,683.455 1440.56,683.455 1441.12,683.455 1441.68,683.455 1442.24,683.455 1442.8,683.455 1443.36,683.455 1443.92,683.455 1444.48,683.455 1445.04,683.455 1445.6,683.455 1446.15,683.455 1446.71,683.455 1447.27,683.455 1447.83,683.455 1448.39,683.455 1448.95,683.455 1449.51,683.455 1450.07,683.455 1450.63,683.455 1451.19,683.455 1451.75,683.455 1452.31,683.455 1452.87,683.455 1453.42,683.455 1453.98,683.455 1454.54,683.455 1455.1,683.455 1455.66,683.455 1456.22,683.455 1456.78,683.455 1457.34,683.455 1457.9,683.455 1458.46,683.455 1459.02,683.455 1459.58,683.455 1460.14,683.455 1460.7,683.455 1461.25,683.455 1461.81,683.455 1462.37,683.455 1462.93,683.455 1463.49,683.455 1464.05,683.455 1464.61,683.455 1465.17,683.455 1465.73,683.455 1466.29,683.455 1466.85,683.455 1467.41,683.455 1467.97,683.455 1468.52,683.455 1469.08,683.455 1469.64,683.455 1470.2,683.455 1470.76,683.455 1471.32,683.455 1471.88,683.455 1472.44,683.455 1473,683.455 1473.56,683.455 1474.12,683.455 1474.68,683.455 1475.24,683.455 1475.79,683.455 1476.35,683.455 1476.91,683.455 1477.47,683.455 1478.03,683.455 1478.59,683.455 1479.15,683.455 1479.71,683.455 1480.27,683.455 1480.83,683.455 1481.39,683.455 1481.95,683.455 1482.51,683.455 1483.07,683.455 1483.62,683.455 1484.18,683.455 1484.74,683.455 1485.3,683.455 1485.86,683.455 1486.42,683.455 1486.98,683.455 1487.54,683.455 1488.1,683.455 1488.66,683.455 1489.22,683.455 1489.78,683.455 1490.34,683.455 1490.89,683.455 1491.45,683.455 1492.01,683.455 1492.57,683.455 1493.13,683.455 1493.69,683.455 1494.25,683.455 1494.81,683.455 1495.37,683.455 1495.93,683.455 1496.49,683.455 1497.05,683.455 1497.61,683.455 1498.16,683.455 1498.72,683.455 1499.28,683.455 1499.84,683.455 1500.4,683.455 1500.96,683.455 1501.52,683.455 1502.08,683.455 1502.64,683.455 1503.2,683.455 1503.76,683.455 1504.32,683.455 1504.88,683.455 1505.44,683.455 1505.99,683.455 1506.55,683.455 1507.11,683.455 1507.67,683.455 1508.23,683.455 1508.79,683.455 1509.35,683.455 1509.91,683.455 1510.47,683.455 1511.03,683.455 1511.59,683.455 1512.15,683.455 1512.71,683.455 1513.26,683.455 1513.82,683.455 1514.38,683.455 1514.94,683.455 1515.5,683.455 1516.06,683.455 1516.62,683.455 1517.18,683.455 1517.74,683.455 1518.3,683.455 1518.86,683.455 1519.42,683.455 1519.98,683.455 1520.53,683.455 1521.09,683.455 1521.65,683.455 1522.21,683.455 1522.77,683.455 1523.33,683.455 1523.89,683.455 1524.45,683.455 1525.01,683.455 1525.57,683.455 1526.13,683.455 1526.69,683.455 1527.25,683.455 1527.81,683.455 1528.36,683.455 1528.92,683.455 1529.48,683.455 1530.04,683.455 1530.6,683.455 1531.16,683.455 1531.72,683.455 1532.28,683.455 1532.84,683.455 1533.4,683.455 1533.96,683.455 1534.52,683.455 1535.08,683.455 1535.63,683.455 1536.19,683.455 1536.75,683.455 1537.31,683.455 1537.87,683.455 1538.43,683.455 1538.99,683.455 1539.55,683.455 1540.11,683.455 1540.67,683.455 1541.23,683.455 1541.79,683.455 1542.35,683.455 1542.9,683.455 1543.46,683.455 1544.02,683.455 1544.58,683.455 1545.14,683.455 1545.7,683.455 1546.26,683.455 1546.82,683.455 1547.38,683.455 1547.94,683.455 1548.5,683.455 1549.06,683.455 1549.62,683.455 1550.18,683.455 1550.73,683.455 1551.29,683.455 1551.85,683.455 1552.41,683.455 1552.97,683.455 1553.53,683.455 1554.09,683.455 1554.65,683.455 1555.21,683.455 1555.77,683.455 1556.33,683.455 1556.89,683.455 1557.45,683.455 1558,683.455 1558.56,683.455 1559.12,683.455 1559.68,683.455 1560.24,683.455 1560.8,683.455 1561.36,683.455 1561.92,683.455 1562.48,683.455 1563.04,683.455 1563.6,683.455 1564.16,683.455 1564.72,683.455 1565.28,683.455 1565.83,683.455 1566.39,683.455 1566.95,683.455 1567.51,683.455 1568.07,683.455 1568.63,683.455 1569.19,683.455 1569.75,683.455 1570.31,683.455 1570.87,683.455 1571.43,683.455 1571.99,683.455 1572.55,683.455 1573.1,683.455 1573.66,683.455 1574.22,683.455 1574.78,683.455 1575.34,683.455 1575.9,683.455 1576.46,683.455 1577.02,683.455 1577.58,683.455 1578.14,683.455 1578.7,683.455 1579.26,683.455 1579.82,683.455 1580.37,683.455 1580.93,683.455 1581.49,683.455 1582.05,683.455 1582.61,683.455 1583.17,683.455 1583.73,683.455 1584.29,683.455 1584.85,683.455 1585.41,683.455 1585.97,683.455 1586.53,683.455 1587.09,683.455 1587.65,683.455 1588.2,683.455 1588.76,683.455 1589.32,683.455 1589.88,683.455 1590.44,683.455 1591,683.455 1591.56,683.455 1592.12,683.455 1592.68,683.455 1593.24,683.455 1593.8,683.455 1594.36,683.455 1594.92,683.455 1595.47,683.455 1596.03,683.455 1596.59,683.455 1597.15,683.455 1597.71,683.455 1598.27,683.455 1598.83,683.455 1599.39,683.455 1599.95,683.455 1600.51,683.455 1601.07,683.455 1601.63,683.455 1602.19,683.455 1602.74,683.455 1603.3,683.455 1603.86,683.455 1604.42,683.455 1604.98,683.455 1605.54,683.455 1606.1,683.455 1606.66,683.455 1607.22,683.455 1607.78,683.455 1608.34,683.455 1608.9,683.455 1609.46,683.455 1610.02,683.455 1610.57,683.455 1611.13,683.455 1611.69,683.455 1612.25,683.455 1612.81,683.455 1613.37,683.455 1613.93,683.455 1614.49,683.455 1615.05,683.455 1615.61,683.455 1616.17,683.455 1616.73,683.455 1617.29,683.455 1617.84,683.455 1618.4,683.455 1618.96,683.455 1619.52,683.455 1620.08,683.455 1620.64,683.455 1621.2,683.455 1621.76,683.455 1622.32,683.455 1622.88,683.455 1623.44,683.455 1624,683.455 1624.56,683.455 1625.11,683.455 1625.67,683.455 1626.23,683.455 1626.79,683.455 1627.35,683.455 1627.91,683.455 1628.47,683.455 1629.03,683.455 1629.59,683.455 1630.15,683.455 1630.71,683.455 1631.27,683.455 1631.83,683.455 1632.39,683.455 1632.94,683.455 1633.5,683.455 1634.06,683.455 1634.62,683.455 1635.18,683.455 1635.74,683.455 1636.3,683.455 1636.86,683.455 1637.42,683.455 1637.98,683.455 1638.54,683.455 1639.1,683.455 1639.66,683.455 1640.21,683.455 1640.77,683.455 1641.33,683.455 1641.89,683.455 1642.45,683.455 1643.01,683.455 1643.57,683.455 1644.13,683.455 1644.69,683.455 1645.25,683.455 1645.81,683.455 1646.37,683.455 1646.93,683.455 1647.48,683.455 1648.04,683.455 1648.6,683.455 1649.16,683.455 1649.72,683.455 1650.28,683.455 1650.84,683.455 1651.4,683.455 1651.96,683.455 1652.52,683.455 1653.08,683.455 1653.64,683.455 1654.2,683.455 1654.76,683.455 1655.31,683.455 1655.87,683.455 1656.43,683.455 1656.99,683.455 1657.55,683.455 1658.11,683.455 1658.67,683.455 1659.23,683.455 1659.79,683.455 1660.35,683.455 1660.91,683.455 1661.47,683.455 1662.03,683.455 1662.58,683.455 1663.14,683.455 1663.7,683.455 1664.26,683.455 1664.82,683.455 1665.38,683.455 1665.94,683.455 1666.5,683.455 1667.06,683.455 1667.62,683.455 1668.18,683.455 1668.74,683.455 1669.3,683.455 1669.85,683.455 1670.41,683.455 1670.97,683.455 1671.53,683.455 1672.09,683.455 1672.65,683.455 1673.21,683.455 1673.77,683.455 1674.33,683.455 1674.89,683.455 1675.45,683.455 1676.01,683.455 1676.57,683.455 1677.13,683.455 1677.68,683.455 1678.24,683.455 1678.8,683.455 1679.36,683.455 1679.92,683.455 1680.48,683.455 1681.04,683.455 1681.6,683.455 1682.16,683.455 1682.72,683.455 1683.28,683.455 1683.84,683.455 1684.4,683.455 1684.95,683.455 1685.51,683.455 1686.07,683.455 1686.63,683.455 1687.19,683.455 1687.75,683.455 1688.31,683.455 1688.87,683.455 1689.43,683.455 1689.99,683.455 1690.55,683.455 1691.11,683.455 1691.67,683.455 1692.23,683.455 1692.78,683.455 1693.34,683.455 1693.9,683.455 1694.46,683.455 1695.02,683.455 1695.58,683.455 1696.14,683.455 1696.7,683.455 1697.26,683.455 1697.82,683.455 1698.38,683.455 1698.94,683.455 1699.5,683.455 1700.05,683.455 1700.61,683.455 1701.17,683.455 1701.73,683.455 1702.29,683.455 1702.85,683.455 1703.41,683.455 1703.97,683.455 1704.53,683.455 1705.09,683.455 1705.65,683.455 1706.21,683.455 1706.77,683.455 1707.32,683.455 1707.88,683.455 1708.44,683.455 1709,683.455 1709.56,683.455 1710.12,683.455 1710.68,683.455 1711.24,683.455 1711.8,683.455 1712.36,683.455 1712.92,683.455 1713.48,683.455 1714.04,683.455 1714.6,683.455 1715.15,683.455 1715.71,683.455 1716.27,683.455 1716.83,683.455 1717.39,683.455 1717.95,683.455 1718.51,683.455 1719.07,683.455 1719.63,683.455 1720.19,683.455 1720.75,683.455 1721.31,683.455 1721.87,683.455 1722.42,683.455 1722.98,683.455 1723.54,683.455 1724.1,683.455 1724.66,683.455 1725.22,683.455 1725.78,683.455 1726.34,683.455 1726.9,683.455 1727.46,683.455 1728.02,683.455 1728.58,683.455 1729.14,683.455 1729.69,683.455 1730.25,683.455 1730.81,683.455 1731.37,683.455 1731.93,683.455 1732.49,683.455 1733.05,683.455 1733.61,683.455 1734.17,683.455 1734.73,683.455 1735.29,683.455 1735.85,683.455 1736.41,683.455 1736.97,683.455 1737.52,683.455 1738.08,683.455 1738.64,683.455 1739.2,683.455 1739.76,683.455 1740.32,683.455 1740.88,683.455 1741.44,683.455 1742,683.455 1742.56,683.455 1743.12,683.455 1743.68,683.455 1744.24,683.455 1744.79,683.455 1745.35,683.455 1745.91,683.455 1746.47,683.455 1747.03,683.455 1747.59,683.455 1748.15,683.455 1748.71,683.455 1749.27,683.455 1749.83,683.455 1750.39,683.455 1750.95,683.455 1751.51,683.455 1752.06,683.455 1752.62,683.455 1753.18,683.455 1753.74,683.455 1754.3,683.455 1754.86,683.455 1755.42,683.455 1755.98,683.455 1756.54,683.455 1757.1,683.455 1757.66,683.455 1758.22,683.455 1758.78,683.455 1759.34,683.455 1759.89,683.455 1760.45,683.455 1761.01,683.455 1761.57,683.455 1762.13,683.455 1762.69,683.455 1763.25,683.455 1763.81,683.455 1764.37,683.455 1764.93,683.455 1765.49,683.455 1766.05,683.455 1766.61,683.455 1767.16,683.455 1767.72,683.455 1768.28,683.455 1768.84,683.455 1769.4,683.455 1769.96,683.455 1770.52,683.455 1771.08,683.455 1771.64,683.455 1772.2,683.455 1772.76,683.455 1773.32,683.455 1773.88,683.455 1774.43,683.455 1774.99,683.455 1775.55,683.455 1776.11,683.455 1776.67,683.455 1777.23,683.455 1777.79,683.455 1778.35,683.455 1778.91,683.455 1779.47,683.455 1780.03,683.455 1780.59,683.455 1781.15,683.455 1781.71,683.455 1782.26,683.455 1782.82,683.455 1783.38,683.455 1783.94,683.455 1784.5,683.455 1785.06,683.455 1785.62,683.455 1786.18,683.455 1786.74,683.455 1787.3,683.455 1787.86,683.455 1788.42,683.455 1788.98,683.455 1789.53,683.455 1790.09,683.455 1790.65,683.455 1791.21,683.455 1791.77,683.455 1792.33,683.455 1792.89,683.455 1793.45,683.455 1794.01,683.455 1794.57,683.455 1795.13,683.455 1795.69,683.455 1796.25,683.455 1796.8,683.455 1797.36,683.455 1797.92,683.455 1798.48,683.455 1799.04,683.455 1799.6,683.455 1800.16,683.455 1800.72,683.455 1801.28,683.455 1801.84,683.455 1802.4,683.455 1802.96,683.455 1803.52,683.455 1804.08,683.455 1804.63,683.455 1805.19,683.455 1805.75,683.455 1806.31,683.455 1806.87,683.455 1807.43,683.455 1807.99,683.455 1808.55,683.455 1809.11,683.455 1809.67,683.455 1810.23,683.455 1810.79,683.455 1811.35,683.455 1811.9,683.455 1812.46,683.455 1813.02,683.455 1813.58,683.455 1814.14,683.455 1814.7,683.455 1815.26,683.455 1815.82,683.455 1816.38,683.455 1816.94,683.455 1817.5,683.455 1818.06,683.455 1818.62,683.455 1819.18,683.455 1819.73,683.455 1820.29,683.455 1820.85,683.455 1821.41,683.455 1821.97,683.455 1822.53,683.455 1823.09,683.455 1823.65,683.455 1824.21,683.455 1824.77,683.455 1825.33,683.455 1825.89,683.455 1826.45,683.455 1827,683.455 1827.56,683.455 1828.12,683.455 1828.68,683.455 1829.24,683.455 1829.8,683.455 1830.36,683.455 1830.92,683.455 1831.48,683.455 1832.04,683.455 1832.6,683.455 1833.16,683.455 1833.72,683.455 1834.27,683.455 1834.83,683.455 1835.39,683.455 1835.95,683.455 1836.51,683.455 1837.07,683.455 1837.63,683.455 1838.19,683.455 \"/>\n</svg>\n","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"In this case the projected energy and the shift are close to each other and the error bars are hard to see.","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"The problem was just a toy example, as the dimension of the Hamiltonian is rather small:","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"dimension(H)","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"462","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"In this case, it's easy (and more efficient) to calculate the exact ground state energy using standard linear algebra. Read more about Rimu's capabilities for exact diagonalization in the example \"Exact diagonalization\".","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"edp = ExactDiagonalizationProblem(H)\nexact_energy = solve(edp).values[1]","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"-4.021502406906472","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"We finish by comparing our FCIQMC results with the exact computation.","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"println(\n    \"\"\"\n    Energy from $steps_measure steps with $target_walkers walkers:\n    Shift: $(se.mean) ± $(se.err)\n    Projected Energy: $(v.val) ± ($(v.val_l), $(v.val_u))\n    Exact Energy: $exact_energy\n    \"\"\"\n)\n\n","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"Energy from 2000 steps with 1000 walkers:\nShift: -4.024363319760883 ± 0.024599886246331935\nProjected Energy: -4.014431858929614 ± (0.003648257206082306, 0.0035083751152624743)\nExact Energy: -4.021502406906472\n\n","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"This page was generated using Literate.jl.","category":"page"},{"location":"statstools.html#Module-StatsTools","page":"StatsTools","title":"Module StatsTools","text":"","category":"section"},{"location":"statstools.html","page":"StatsTools","title":"StatsTools","text":"The  module StatsTools contains helper function for analysis and post processing of Monte Carlo data.","category":"page"},{"location":"statstools.html#Blocking-analysis","page":"StatsTools","title":"Blocking analysis","text":"","category":"section"},{"location":"statstools.html","page":"StatsTools","title":"StatsTools","text":"After equilibration, FCIQMC produces information about observables through correlated time series. In order to estimate the statistical errors the time series need to be decorrelated. The main workhorse for achieving this is the blocking_analysis, which is based on the paper by Flyvberg and Peterson JCP (1989), and automated with the M test of Jonsson PRE (2018).","category":"page"},{"location":"statstools.html","page":"StatsTools","title":"StatsTools","text":"Analysing the stochastic errors of observables obtained from the ratio of sample means is done with ratio_of_means, where error propagation of correlated uncertainties is done with the help of the package MonteCarloMeasurements.","category":"page"},{"location":"statstools.html","page":"StatsTools","title":"StatsTools","text":"Many convenience functions are implemented for directly analysing data obtained from solve as a DataFrame. See, e.g., shift_estimator and projected_energy. Asymptotically unbiased estimators are implemented as mixed_estimator, growth_estimator and rayleigh_replica_estimator.","category":"page"},{"location":"statstools.html#Exported","page":"StatsTools","title":"Exported","text":"","category":"section"},{"location":"statstools.html","page":"StatsTools","title":"StatsTools","text":"Modules = [StatsTools]\nPages = [\"StatsTools.jl\", \"blocking.jl\", \"ratio_of_means.jl\", \"convenience.jl\",\n  \"variances.jl\", \"growth_witness.jl\", \"reweighting.jl\", \"fidelity.jl\", \"variational_energy_estimator.jl\"\n]\nPrivate = false","category":"page"},{"location":"statstools.html#Rimu.StatsTools","page":"StatsTools","title":"Rimu.StatsTools","text":"Tools for the statistical analysis of Monte Carlo data.\n\nExports:\n\nblocking_analysis\nblocking_analysis_data\nratio_of_means\ngrowth_witness\nsmoothen\nshift_estimator\nprojected_energy\nvariational_energy_estimator\ngrowth_estimator\ngrowth_estimator_analysis\nmixed_estimator\nmixed_estimator_analysis\nrayleigh_replica_estimator\nrayleigh_replica_estimator_analysis\nval_and_errs\nval\nmean_and_se\n\n\n\n\n\n","category":"module"},{"location":"statstools.html#Rimu.StatsTools.blocking_analysis-Tuple{AbstractVector}","page":"StatsTools","title":"Rimu.StatsTools.blocking_analysis","text":"blocking_analysis(v::AbstractVector; α = 0.01, corrected = true, skip=0, warn=true)\n-> BlockingResult(mean, err, err_err, p_cov, k, blocks)\n\nCompute the sample mean mean and estimate the standard deviation of the mean (standard error) err of a correlated time series. It uses the blocking algorithm from Flyvberg and Peterson JCP (1989) and the M test of Jonsson PRE (2018) at significance level 1-α.\n\nUse skip to skip the first skip elements in v. corrected controls whether bias correction for variances is used. If decorrelating the time series fails according to the M test, NaN is returned as the standard error and -1 for k. The keyword argument warn controls whether a warning message is logged.\n\nThe summary result is returned as a BlockingResult. k - 1 is the number of blocking transformations required to pass the hypothesis test for an uncorrelated time series and err_err the estimated standard error or err.\n\nThe detailed results from each reblocking step can be obtained with blocking_analysis_data.\n\nSee BlockingResult, shift_estimator, ratio_of_means, blocking_analysis_data.\n\n\n\n\n\n","category":"method"},{"location":"statstools.html#Rimu.StatsTools.blocking_analysis_data-Tuple{AbstractVector}","page":"StatsTools","title":"Rimu.StatsTools.blocking_analysis_data","text":"blocking_analysis_data(v::AbstractVector; kwargs...) ->\n(; br::BlockingResult, df::DataFrame)\n\nPerform a blocking_analysis and return the summary result br as well as a DataFrame df with information about the standard error in each blocking step.\n\nFor a description of the keyword arguments see blocking_analysis.\n\nExample\n\njulia> data = smoothen(rand(10_000), 2^6); # generate correlated data\n\njulia> br, df = blocking_analysis_data(data)\n(br = BlockingResult{Float64}\n  mean = 0.5088 ± 0.0029\n  with uncertainty of ± 0.00023454488294744232\n  from 78 blocks after 7 transformations (k = 8).\n, df = 13×6 DataFrame\n Row │ blocks  mean      std_err      std_err_err  p_cov       mj\n     │ Int64   Float64   Float64      Float64      Float64     Float64\n─────┼──────────────────────────────────────────────────────────────────────\n   1 │  10000  0.508806  0.000375044  2.6521e-6    1.40658e-7  9715.08\n   2 │   5000  0.508806  0.000528547  5.28599e-6   2.79361e-7  4778.14\n   3 │   2500  0.508806  0.000743386  1.05152e-5   5.52622e-7  2298.64\n   4 │   1250  0.508806  0.00104064   2.08212e-5   1.08293e-6  1056.24\n   5 │    625  0.508806  0.00144177   4.08121e-5   2.07871e-6   427.949\n   6 │    312  0.508736  0.00194209   7.78707e-5   3.77171e-6   128.711\n   7 │    156  0.508736  0.00247921   0.00014081   6.14647e-6    17.3075\n   8 │     78  0.508736  0.00291063   0.000234545  8.47174e-6     0.731386\n   9 │     39  0.508736  0.00284613   0.000326474  8.10046e-6     0.901054\n  10 │     19  0.508241  0.0026998    0.000449967  7.28892e-6     2.85915\n  11 │      9  0.507939  0.00359907   0.000899766  1.29533e-5     1.08644\n  12 │      4  0.509327  0.00440559   0.00179857   1.94092e-5     0.0370381\n  13 │      2  0.509327  0.00432708   0.00305971   1.87237e-5     0.125)\n\njulia> using StatsPlots; unicodeplots();\n\njulia> plot([br.k,br.k],[0.0,maximum(df.std_err.+df.std_err_err)], label=\"m test\");\n\njulia> @df df plot!(\n           1:length(:std_err), :std_err;\n           err=:std_err_err, xlabel=\"k\", label=\"std err\",\n           title=\"std err vs blocking steps\"\n       )\n               ⠀⠀⠀⠀⠀⠀⠀⠀⠀std err vs blocking steps⠀⠀⠀⠀⠀⠀⠀⠀\n               ┌────────────────────────────────────────┐\n    0.00423501 │⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⡀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⢠⠀⠀⠀⠀│ m test\n               │⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⡇⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⢀⠀⠀⢸⠀⠀⠀⠀│ std err\n               │⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⡇⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⢸⠀⠀⢸⠀⠀⠀⠀│\n               │⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⡇⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⢸⠀⠀⢸⠀⠀⠀⠀│\n               │⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⡇⠀⠀⠀⠀⠀⠀⠀⠀⡇⠀⡠⢺⠒⠒⢺⠀⠀⠀⠀│\n               │⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⡇⠀⠀⡀⠀⠀⡆⣀⠤⡗⠉⠀⢸⠀⠀⢸⡆⠀⠀⠀│\n               │⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⢀⡧⠤⠔⡗⠊⠉⡏⠀⠀⡇⠀⠀⢸⠀⠀⢸⢣⠀⠀⠀│\n               │⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⢀⠔⠁⡇⠀⠀⠁⠀⠀⠁⠀⠀⠁⠀⠀⠀⠀⠀⢸⠸⡀⠀⠀│\n               │⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⢀⠴⠁⠀⠀⡇⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠸⠀⡇⠀⠀│\n               │⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⢀⠔⠁⠀⠀⠀⠀⡇⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⢸⠀⠀│\n               │⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⢀⠔⠊⠀⠀⠀⠀⠀⠀⡇⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠈⣦⠀│\n               │⠀⠀⠀⠀⠀⠀⠀⠀⡠⠔⠒⠁⠀⠀⠀⠀⠀⠀⠀⠀⡇⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⢹⠀│\n               │⠀⠀⠀⢀⣀⠤⠒⠉⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⡇⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⢸⠀│\n               │⠀⠒⠉⠁⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⡇⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⢸⠀│\n   -0.00012335 │⠤⠤⠤⠤⠤⠤⠤⠤⠤⠤⠤⠤⠤⠤⠤⠤⠤⠤⠤⠤⠧⠤⠤⠤⠤⠤⠤⠤⠤⠤⠤⠤⠤⠤⠤⠤⠤⠤⠤⠤│\n               └────────────────────────────────────────┘\n               ⠀0.64⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀k⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀13.36⠀\n\nA vertical line at k==8 indicates the blocking step identified by hypothesis testing to decorrelate the time series data. The decorrelation length can thus be estimated at 2^k-1 = 2^7 = 128. Note that the data was correlated with a sliding window of 2^6 steps.\n\nSee blocking_analysis, BlockingResult.\n\n\n\n\n\n","category":"method"},{"location":"statstools.html#Rimu.StatsTools.mean_and_se-Tuple{Rimu.StatsTools.BlockingResult}","page":"StatsTools","title":"Rimu.StatsTools.mean_and_se","text":"mean_and_se(v::AbstractVector; α = 0.01, corrected::Bool=true, skip=0) -> mean, err\nmean_and_se(r::BlockingResult) -> mean, err\n\nReturn the mean and standard error (as a tuple) of a time series obtained from blocking_analysis. See also BlockingResult.\n\n\n\n\n\n","category":"method"},{"location":"statstools.html#Statistics.cov-Tuple{Rimu.StatsTools.BlockingResult{<:Complex}}","page":"StatsTools","title":"Statistics.cov","text":"cov(r::BlockingResult{<:Complex})\n\nReturn the covariance matrix of the multivariate normal distribution approximating the uncertainty of the blocking result r of a complex time series. See (https://en.wikipedia.org/wiki/Complexnormaldistribution).\n\n\n\n\n\n","category":"method"},{"location":"statstools.html#Rimu.StatsTools.ratio_of_means-Tuple{Any, Any}","page":"StatsTools","title":"Rimu.StatsTools.ratio_of_means","text":"ratio_of_means(num, denom; α=0.01, corrected=true, mc_samples=nothing, skip=0, warn=true)\n-> r::RatioBlockingResult\n\nEstimate the ratio of mean(num)/mean(denom) assuming that num and denom are possibly correlated time series, skipping the first skip elements. A blocking analysis with m-test is used to uncorrelate the time series, see blocking_analysis. The remaining standard error and correlation of the means is propagated using MonteCarloMeasurements. The results are reported as a RatioBlockingResult.\n\nRobust estimates for the ratio are obtained from pmedian(r) and confidence intervals from pquantile(), e.g. pquantile(r, [0.025, 0.975]) for the 95% confidence interval.\n\nEstimates from linear uncertainty propagation are returned as r.f and r.σ_f using x_by_y_linear. The standard error estimate r.σ_f should only be trusted when the coefficient of variation std(denom)/mean(denom) is small: abs(r.δ_y) < 0.1. Under this condition can the ratio be approximated as a normal distribution. See wikipedia and Díaz-Francés, Rubio (2013)\n\nThe keyword mc_samples controls the number of samples used for error propagation by MonteCarloMeasurements. Use nothing for the default and Val(1000) to set the number to 1000 samples in a type-consistent way.\n\nThe keyword warn controls whether warning messages are logged when blocking fails or noisy denominators are encountered.\n\nNote: to compute statistics on the RatioBlockingResult, use functions pmedian, pquantile, pmiddle, piterate, pextrema, pminimum, pmaximum, pmean, and pcov.\n\n\n\n\n\n","category":"method"},{"location":"statstools.html#Rimu.StatsTools.errs-Tuple","page":"StatsTools","title":"Rimu.StatsTools.errs","text":"errs(x; n=1, p=nothing, name=:err) -> (; err_l, err_u)\n\nReturn the lower and upper error bar for the uncertain value x.\n\nSee val_and_errs.\n\n\n\n\n\n","category":"method"},{"location":"statstools.html#Rimu.StatsTools.to_measurement-Tuple{MonteCarloMeasurements.Particles}","page":"StatsTools","title":"Rimu.StatsTools.to_measurement","text":"to_measurement(p::MonteCarloMeasurements.Particles) -> ::Measurements.measurement\n\nConvert an uncertain number from MonteCarloMeasurements  to Measurements format  using the median as the central point. The new ± boundaries will include  the 68% quantile around the median.\n\n\n\n\n\n","category":"method"},{"location":"statstools.html#Rimu.StatsTools.val-Tuple{Any}","page":"StatsTools","title":"Rimu.StatsTools.val","text":"val(x)\n\nReturn the best estimate value for an uncertain x. Defaults to the median for uncertain x represented by a (sampled) distribution. Supports  MonteCarloMeasurements and Measurements.\n\nSee errs, BlockingResult, RatioBlockingResult.\n\n\n\n\n\n","category":"method"},{"location":"statstools.html#Rimu.StatsTools.val_and_errs-Tuple{Any}","page":"StatsTools","title":"Rimu.StatsTools.val_and_errs","text":"val_and_errs(x; n=1, p=nothing, name=:val) -> (;val, val_l, val_u)\n\nReturn the median and the lower and upper error bar for the uncertain value x as a NamedTuple. This is useful for plotting scripts. The interval [val - val_l, val + val_u] represents the confidence interval at level n*σ, or at probability p. Setting p overrides n. Supports  MonteCarloMeasurements and Measurements. The  names in the NamedTuple can be changed with name.\n\nExample:\n\njulia> results = [blocking_analysis(i:0.1:2i+20) for i in 1:3]; # mock results\n\njulia> v = val_and_errs.(results, name=\"res\"); # Vector of NamedTuple's with standard errors\n\njulia> DataFrame(v)\n3×3 DataFrame\n Row │ res      res_l    res_u\n     │ Float64  Float64  Float64\n─────┼───────────────────────────\n   1 │    11.5  1.7282   1.7282\n   2 │    13.0  1.7282   1.7282\n   3 │    14.5  1.78885  1.78885\n\nSee NamedTuple, val, errs, BlockingResult, RatioBlockingResult.\n\n\n\n\n\n","category":"method"},{"location":"statstools.html#Rimu.StatsTools.growth_witness","page":"StatsTools","title":"Rimu.StatsTools.growth_witness","text":"growth_witness(df::DataFrame, [b];\n    shift=:shift,\n    norm=:norm,\n    time_step=determine_constant_time_step(df),\n    skip=0\n)\ngrowth_witness(sim::PMCSimulation, [b]; kwargs...)\n\nCalculate the growth witness directly from the result (DataFrame or PMCSimulation) of solveing a ProjectorMonteCarloProblem. The keyword arguments shift and norm can be used to change the names of the relevant columns.\n\n\n\n\n\n","category":"function"},{"location":"statstools.html#Rimu.StatsTools.growth_witness-Tuple{AbstractArray, AbstractArray, Any}","page":"StatsTools","title":"Rimu.StatsTools.growth_witness","text":"growth_witness(shift::AbstractArray, norm::AbstractArray, dt, [b]; skip=0)\n\nCompute the growth witness\n\nG^(n) = S^(n) - fracvertmathbfc^(n+1)vert -\n          vertmathbfc^(n)vertvertmathbfc^(n)vert dtau\n\nwhere S is the shift and vertmathbfc^(n)vert == norm[n, 1]. Setting b ≥ 1 a sliding average over b time steps is computed using smoothen(). The first skip time steps are skipped. mean(growth_witness) is approximately the same as growth_estimator with h=0.\n\nSee also growth_estimator.\n\n\n\n\n\n","category":"method"},{"location":"statstools.html#Rimu.StatsTools.smoothen-Tuple{AbstractVector, Integer}","page":"StatsTools","title":"Rimu.StatsTools.smoothen","text":"smoothen(noisy::AbstractVector, b)\n\nSmoothen the array noisy by averaging over a sliding window of length b and wrapping noisy periodically. The mean(noisy) is preserved.\n\n\n\n\n\n","category":"method"},{"location":"statstools.html#Rimu.StatsTools.growth_estimator-NTuple{4, Any}","page":"StatsTools","title":"Rimu.StatsTools.growth_estimator","text":"growth_estimator(\n    shift, wn, h, time_step;\n    skip = 0,\n    E_r = mean(shift[skip+1:end]),\n    weights = w_exp,\n    change_type = identity,\n    kwargs...\n)\ngrowth_estimator(\n    df::DataFrame, h;\n    shift_name=:shift,\n    norm_name=:norm,\n    time_step=determine_constant_time_step(df),\n    kwargs...\n)\ngrowth_estimator(sim::PMCSimulation; kwargs...)\n-> r::RatioBlockingResult\n\nCompute the growth estimator with reference energy E_r by the reweighting technique described in Umrigar et al. (1993), see Eq. (20). shift and wn are equal length vectors containing the shift and walker number time series, respectively.  Reweighting is done over h time steps and length(shift) - skip time steps are used for the blocking analysis done with ratio_of_means. weights is a function that calulates the weights. See w_exp and w_lin.\n\nE_gr = E_r - frac1dτln\n    fracsum_n w_h+1^(n+1) N_mathrmw^(n+1)\n        sum_m w_h^(m) N_mathrmw^(m) \n\nwhere dτ is the time_step\n\nWhen h is greater than the autocorrelation time scale of the shift, then E_gr (returned as r.ratio) is an unbiased but approximate estimator for the ground state energy E_0 with an error mathcalO(dτ^2) and potentially increased confidence intervals compared to the (biased) shift estimator.  Error propagation is done with MonteCarloMeasurements. Propagation through the logarithm can be modified by setting change_type to to_measurement in order to avoid NaN results from negative outliers.\n\nIf success==true the blocking analysis was successful in k-1 steps, using blocks uncorrelated data points.\n\nThe second method calculates the growth estimator directly from a PMCSimulation or DataFrame returned by solve. The keyword arguments shift_name and norm_name can be used to change the names of the relevant columns.\n\nSee also mixed_estimator and RatioBlockingResult.\n\n\n\n\n\n","category":"method"},{"location":"statstools.html#Rimu.StatsTools.growth_estimator_analysis-Tuple{Any}","page":"StatsTools","title":"Rimu.StatsTools.growth_estimator_analysis","text":"growth_estimator_analysis(df::DataFrame; kwargs...)\ngrowth_estimator_analysis(sim::PMCSimulation; kwargs...)\n-> (; df_ge, correlation_estimate, se, se_l, se_u)\n\nCompute the growth_estimator on a DataFrame df or PMCSimulation sim. repeatedly over a range of reweighting depths.\n\nReturns a NamedTuple with the fields\n\ndf_ge: DataFrame with reweighting depth and growth_estiamator data. See example below.\ncorrelation_estimate: estimated correlation time from blocking analysis\nse, se_l, se_u: shift_estimator and error\n\nKeyword arguments\n\nh_range: The default is about h_values values from 0 to twice the estimated correlation time\nh_values = 100: minimum number of reweighting depths\nskip = 0: initial time steps to exclude from averaging\nthreading = Threads.nthreads() > 1: if false a progress meter is displayed\nshift_name = :shift name of column in df with shift data\nnorm_name = :norm name of column in df with walkernumber data\nwarn = true whether to log warning messages when blocking fails or denominators are small\n\nExample\n\nsim = solve(...)\ndf_ge, correlation_estimate, se, se_l, se_u = growth_estimator_analysis(sim; skip=5_000)\n\nusing StatsPlots\n@df df_ge plot(_ -> se, :h, ribbon = (se_l, se_u), label = \"⟨S⟩\") # constant line and ribbon for shift estimator\n@df df_ge plot!(:h, :val, ribbon = (:val_l, :val_u), label=\"E_gr\") # growth estimator as a function of reweighting depth\nxlabel!(\"h\")\n\nSee also: growth_estimator, mixed_estimator_analysis.\n\n\n\n\n\n","category":"method"},{"location":"statstools.html#Rimu.StatsTools.mixed_estimator-Tuple{AbstractVector, AbstractVector, AbstractVector, Any, Any}","page":"StatsTools","title":"Rimu.StatsTools.mixed_estimator","text":"mixed_estimator(\n    hproj, vproj, shift, h, time_step;\n    skip = 0,\n    E_r = mean(shift[skip+1:end]),\n    weights = w_exp,\n    kwargs...\n)\nmixed_estimator(\n    df::DataFrame, h;\n    hproj_name=:hproj,\n    vproj_name=:vproj,\n    shift_name=:shift,\n    time_step=determine_constant_time_step(df),\n    kwargs...\n)\nmixed_estimator(sim::PMCSimulation, h; kwargs...)\n-> r::RatioBlockingResult\n\nCompute the mixed estimator by the reweighting technique described in Umrigar et al. (1993), Eq. (19)\n\nE_mathrmmix = fracsum_n w_h^(n)  (Hmathbfv)mathbfc^(n)\n        sum_m w_h^(m)  mathbfvmathbfc^(m) \n\nwhere the time series hproj == (Hmathbfv)mathbfc^(n) and vproj == mathbfvmathbfc^(m) have the same length as shift (See ProjectedEnergy on how to set these up).  Reweighting is done over h time steps and length(shift) - skip time steps are used for the blocking analysis done with ratio_of_means. weights is a function that calulates the weights. See w_exp and w_lin.  Additional keyword arguments are passed on to ratio_of_means.\n\nWhen h is greater than the autocorrelation time scale of the shift, then r.ratio is an unbiased but approximate estimator for the ground state energy E_0 with an error mathcalO(dτ^2), where dτ is the time_step, and potentially increased confidence intervals compared to the unweighted ratio.  Error propagation is done with MonteCarloMeasurements. Results are returned as RatioBlockingResult.\n\nThe second method calculates the mixed energy estimator directly from a DataFrame or PMCSimulation returned by solve. The keyword arguments hproj_name, vproj_name, and shift_name can be used to change the names of the relevant columns.\n\nSee also growth_estimator.\n\n\n\n\n\n","category":"method"},{"location":"statstools.html#Rimu.StatsTools.mixed_estimator_analysis-Tuple{DataFrame}","page":"StatsTools","title":"Rimu.StatsTools.mixed_estimator_analysis","text":"mixed_estimator_analysis(df::DataFrame; kwargs...)\nmixed_estimator_analysis(sim::PMCSimulation; kwargs...)\n-> (; df_me, correlation_estimate, se, se_l, se_u)\n\nCompute the mixed_estimator on a DataFrame df or PMCSimulation sim returned from solve repeatedly over a range of reweighting depths.\n\nReturns a NamedTuple with the fields\n\ndf_me: DataFrame with reweighting depth and mixed_estiamator data. See example below.\ncorrelation_estimate: estimated correlation time from blocking analysis\nse, se_l, se_u: shift_estimator and error\n\nKeyword arguments\n\nh_range: The default is about h_values values from 0 to twice the estimated correlation time\nh_values = 100: minimum number of reweighting depths\nskip = 0: initial time steps to exclude from averaging\nthreading = Threads.nthreads() > 1: if false a progress meter is displayed\nshift_name = :shift name of column in df with shift data\nhproj_name = :hproj name of column in df with operator overlap data\nvproj_name = :vproj name of column in df with projector overlap data\nwarn = true whether to log warning messages when blocking fails or denominators are small\n\nExample\n\nsim = solve(...)\ndf_me, correlation_estimate, se, se_l, se_u = mixed_estimator_analysis(sim; skip=5_000)\n\nusing StatsPlots\n@df df_me plot(_ -> se, :h, ribbon = (se_l, se_u), label = \"⟨S⟩\") # constant line and ribbon for shift estimator\n@df df_me plot!(:h, :val, ribbon = (:val_l, :val_u), label=\"E_mix\") # mixed estimator as a function of reweighting depth\nxlabel!(\"h\")\n\nSee also: mixed_estimator, growth_estimator_analysis.\n\n\n\n\n\n","category":"method"},{"location":"statstools.html#Rimu.StatsTools.projected_energy-Tuple{Any}","page":"StatsTools","title":"Rimu.StatsTools.projected_energy","text":"projected_energy(df::DataFrame; skip=0, hproj=:hproj, vproj=:vproj, kwargs...)\nprojected_energy(sim::PMCSimulation; kwargs...)\n-> r::RatioBlockingResult\n\nCompute the projected energy estimator\n\nE_mathrmp = fracsum_n  mathbfvHmathbfc^(n)\n        sum_m mathbfvmathbfc^(m) \n\nwhere the time series df.hproj == mathbfvHmathbfc^(n) and df.vproj == mathbfvmathbfc^(m) are taken from df, skipping the first skip entries (use post_step_strategy =ProjectedEnergy(...) to set these up in ProjectorMonteCarloProblem). projected_energy is equivalent to mixed_estimator with h=0.\n\nThe keyword arguments hproj and vproj can be used to change the names of the relevant columns. Other kwargs are passed on to ratio_of_means. Returns a RatioBlockingResult.\n\nSee NamedTuple, val_and_errs, val, errs for processing results.\n\n\n\n\n\n","category":"method"},{"location":"statstools.html#Rimu.StatsTools.rayleigh_replica_estimator-Tuple{Vector, Vector, Vector, Any, Any}","page":"StatsTools","title":"Rimu.StatsTools.rayleigh_replica_estimator","text":"rayleigh_replica_estimator(\n    op_ol, vec_ol, shift, h, time_step;\n    skip = 0,\n    E_r = mean(shift[skip+1:end]),\n    weights = w_exp,\n    kwargs...\n)\nrayleigh_replica_estimator(\n    df::DataFrame;\n    shift_name=\"shift\",\n    op_name=\"Op1\",\n    vec_name=\"dot\",\n    h=0,\n    skip=0,\n    Anorm=1,\n    kwargs...\n)\nrayleigh_replica_estimator(sim::PMCSimulation; kwargs...)\n-> r::RatioBlockingResult\n\nCompute the estimator of a Rayleigh quotient of operator hatA with reweighting,\n\nA_mathrmest(h) = fracsum_ab sum_n w_ha^(n) w_hb^(n)\n    mathbfc_a^(n) cdot hatA cdot mathbfc_b^(n)\n    sum_ab sum_n w_ha^(n) w_hb^(n) mathbfc_a^(n) cdot mathbfc_b^(n)\n\nusing data from multiple replicas.\n\nArgument op_ol holds data for the operator overlap mathbfc_a^(n) hatA mathbfc_b^(n) and vec_ol holds data for the vector overlap mathbfc_a^(n) mathbfc_b^(n). They are of type Vector{Vector}, with each element Vector holding the data for a pair of replicas. Argument shift is of type Vector{Vector}, with each element Vector holding the shift data for each individual replica.\n\nThe second method computes the Rayleigh quotient directly from a DataFrame or PMCSimulation returned by solve. The keyword arguments shift_name, op_name and vec_name can be used to change the names of the relevant columns, see AllOverlaps for default formatting. The operator overlap data can be scaled by a prefactor Anorm. A specific reweighting depth can be set with keyword argument h. The default is h = 0 which calculates the Rayleigh quotient without reweighting.\n\nThe reweighting is an extension of the mixed estimator using the reweighting technique described in Umrigar et al. (1993). Reweighting is done over h time steps and length(shift) - skip time steps are used for the blocking analysis done with ratio_of_means. weights is a function that calulates the weights. See w_exp and w_lin. Additional keyword arguments are passed on to ratio_of_means.\n\nError propagation is done with MonteCarloMeasurements. Results are returned as RatioBlockingResult.\n\nSee also mixed_estimator, growth_estimator.\n\n\n\n\n\n","category":"method"},{"location":"statstools.html#Rimu.StatsTools.rayleigh_replica_estimator_analysis-Tuple{Any}","page":"StatsTools","title":"Rimu.StatsTools.rayleigh_replica_estimator_analysis","text":"rayleigh_replica_estimator_analysis(df::DataFrame; kwargs...)\nrayleigh_replica_estimator_analysis(sim::PMCSimulation; kwargs...)\n-> (; df_rre, df_se)\n\nCompute the rayleigh_replica_estimator on a DataFrame df or PMCSimulation sim returned from solve repeatedly over a range of reweighting depths.\n\nReturns a NamedTuple with the fields\n\ndf_rre: DataFrame with reweighting depth and rayleigh_replica_estimator data. See example below.\ndf_se: DataFrame with shift_estimator output, one row per replica\n\nKeyword arguments\n\nh_range: The default is about h_values values from 0 to twice the estimated correlation time\nh_values = 100: minimum number of reweighting depths\nskip = 0: initial time steps to exclude from averaging\nthreading = Threads.nthreads() > 1: if false a progress meter is displayed\nshift_name = \"shift\": shift data corresponding to column in df with names <shift>_1, ...\nop_name = \"Op1\": name of operator overlap corresponding to column in df with names c1_<op_ol>_c2, ...\nvec_name = \"dot\": name of vector-vector overlap corresponding to column in df with names c1_<vec_ol>_c2, ...\nAnorm = 1: a scalar prefactor to scale the operator overlap data\nwarn = true: whether to log warning messages when blocking fails or denominators are small\n\nExample\n\nsim = solve(...)\ndf_rre, df_se = rayleigh_replica_estimator_analysis(sim; skip=5_000)\n\nusing StatsPlots\n@df df_rre plot(_ -> se, :h, ribbon = (se_l, se_u), label = \"⟨S⟩\") # constant line and ribbon for shift estimator\n@df df_rre plot!(:h, :val, ribbon = (:val_l, :val_u), label=\"E_mix\") # Rayleigh quotient estimator as a function of reweighting depth\nxlabel!(\"h\")\n\nSee also: rayleigh_replica_estimator, mixed_estimator_analysis, AllOverlaps.\n\n\n\n\n\n","category":"method"},{"location":"statstools.html#Rimu.StatsTools.shift_estimator-Tuple{Any}","page":"StatsTools","title":"Rimu.StatsTools.shift_estimator","text":"shift_estimator(df::DataFrame; shift=:shift, kwargs...)\nshift_estimator(sim::PMCSimulation; kwargs...)\n-> r::BlockingResult\n\nReturn the shift estimator from the data in df.shift. The keyword argument shift can be used to change the name of the relevant column. Other keyword arguments are passed on to blocking_analysis. Returns a BlockingResult.\n\nSee also growth_estimator, projected_energy.\n\n\n\n\n\n","category":"method"},{"location":"statstools.html#Rimu.StatsTools.w_exp-Tuple{Union{SubArray{<:Any, 1, <:Vector, <:Any, true}, Vector}, Any, Any}","page":"StatsTools","title":"Rimu.StatsTools.w_exp","text":"w_exp(shift, h, time_step; E_r = mean(shift), skip = 0)\n\nCompute the weights for reweighting over h time steps with reference energy E_r from the exponential formula\n\nw_h^(n) = prod_j=1^h exp-dτ(S^(q+n-j)-E_r) \n\nwhere q = skip and dτ is the time_step.\n\nSee also w_lin, growth_estimator, mixed_estimator.\n\n\n\n\n\n","category":"method"},{"location":"statstools.html#Rimu.StatsTools.w_lin-Tuple{Union{SubArray{<:Any, 1, <:Vector, <:Any, true}, Vector}, Any, Any}","page":"StatsTools","title":"Rimu.StatsTools.w_lin","text":"w_lin(shift, h, time_step; E_r = mean(shift), skip = 0)\n\nCompute the weights for reweighting over h time steps with reference energy E_r from the linearised formula\n\nw_h^(n) = prod_j=1^h 1-dτ(S^(q+n-j)-E_r) \n\nwhere q = skip and dτ is the time_step.\n\nSee also w_exp, growth_estimator, mixed_estimator.\n\n\n\n\n\n","category":"method"},{"location":"statstools.html#Rimu.StatsTools.replica_fidelity-Tuple{Any}","page":"StatsTools","title":"Rimu.StatsTools.replica_fidelity","text":"replica_fidelity(df::DataFrame; p_field = :hproj, skip = 0)\nreplica_fidelity(sim::PMCSimulation; kwargs...)\n\nCompute the fidelity of the average coefficient vector and the projector defined in p_field from the PMCSimulation or DataFrame returned by solve, using replicas _1 and _2. Calls ratio_of_means to perform a blocking analysis on a ratio of the means of separate time series and returns a RatioBlockingResult. The first skip steps in the time series are skipped.\n\nThe fidelity of states |ψ⟩ and |ϕ⟩ is defined as\n\nF(ψϕ) = fracψϕ^2ψψϕϕ \n\nSpecifically, replica_fidelity computes\n\nF(mathbfvmathbfc) =\n    frac(mathbfc_1mathbfv)(mathbfvmathbfc_1)\n    mathbfc_1mathbfc_1 \n\nwhere v is the projector specified by p_field, which is assumed to be normalised to unity with the two-norm (i.e. v⋅v == 1), and mathbfc_1 and mathbfc_2 are two replica coefficient vectors.\n\n\n\n\n\n","category":"method"},{"location":"statstools.html#Rimu.StatsTools.variational_energy_estimator-Tuple{Any, Any}","page":"StatsTools","title":"Rimu.StatsTools.variational_energy_estimator","text":"variational_energy_estimator(shifts, overlaps; kwargs...)\nvariational_energy_estimator(df::DataFrame; max_replicas=:all, kwargs...)\nvariational_energy_estimator(sim::PMCSimulation; kwargs...)\n-> r::RatioBlockingResult\n\nCompute the variational energy estimator from the replica time series of the shifts and coefficient vector overlaps by blocking analysis. The keyword argument max_replicas can be used to constrain the number of replicas processed to be smaller than all available in df. Other keyword arguments are passed on to ratio_of_means(). Returns a RatioBlockingResult.\n\nAn estimator for the variational energy\n\nfracmathbfc^ mathbfHmathbfcmathbfc^mathbfc\n\nis calculated from\n\nE_v  =  fracsum_ab^R overline(S_a+S_b) mathbfc_a^ mathbfc_b\n               2sum_ab^R overlinemathbfc_a^ mathbfc_b \n\nwhere the sum goes over distinct pairs out of the R replicas. See arXiv:2103.07800.\n\nThe DataFrame and PMCSimulation versions can extract the relevant information from the result of solve. Set up the ProjectorMonteCarloProblem with the keyword argument replica_strategy = AllOverlaps(R) and R ≥ 2. If passing shifts and overlaps, the data has to be arranged in the correct order (as provided in the DataFrame version).\n\nSee AllOverlaps.\n\n\n\n\n\n","category":"method"},{"location":"statstools.html#Additional-docstrings","page":"StatsTools","title":"Additional docstrings","text":"","category":"section"},{"location":"statstools.html","page":"StatsTools","title":"StatsTools","text":"Modules = [StatsTools]\nPages = [\"StatsTools.jl\", \"blocking.jl\", \"ratio_of_means.jl\", \"convenience.jl\",\n  \"variances.jl\", \"growth_witness.jl\", \"reweighting.jl\"\n]\nPublic = false","category":"page"},{"location":"statstools.html#MonteCarloMeasurements.Particles-Tuple{Rimu.StatsTools.BlockingResult{<:Real}}","page":"StatsTools","title":"MonteCarloMeasurements.Particles","text":"MonteCarloMeasurements.Particles(r::BlockingResult; mc_samples = 2000)\nMonteCarloMeasurements.±(r::BlockingResult)\n\nConvert a BlockingResult into a Particles object for nonlinear error propagation with MonteCarloMeasurements.\n\n\n\n\n\n","category":"method"},{"location":"statstools.html#Rimu.StatsTools.BlockingResult","page":"StatsTools","title":"Rimu.StatsTools.BlockingResult","text":"BlockingResult(mean, err, err_err, p_cov, k, blocks)\n\nResult of blocking_analysis.\n\nFields:\n\nmean: sample mean\nerr: standard error (estimated standard deviation of the mean)\nerr_err: estimated uncertainty of err\np_cov: estimated pseudo covariance of mean, relevant for complex time series\nk::Int: k-1 blocking steps were used to uncorrelate time series\nblocks::Int: number of uncorrelated values after blocking\n\nHas methods for NamedTuple, val_and_errs, val, errs, mean_and_se, Measurements.:±, MonteCarloMeasurements.Particles, and Statistics.cov for Complex data.\n\nExample:\n\njulia> blocking_analysis(smoothen(randn(2^10), 2^5))\nBlockingResult{Float64}\n  mean = -0.026 ± 0.029\n  with uncertainty of ± 0.003638545517264226\n  from 32 blocks after 5 transformations (k = 6).\n\n\n\n\n\n","category":"type"},{"location":"statstools.html#Measurements.measurement-Tuple{Rimu.StatsTools.BlockingResult{<:Real}}","page":"StatsTools","title":"Measurements.measurement","text":"measurement(r::BlockingResult)\nMeasurements.±(r::BlockingResult)\n\nConvert a BlockingResult into a Measurement for linear error propagation with Measurements.\n\nLimitation: Does not account for covariance in complex BlockingResult. Consider using MonteCarloMeasurements.Particles(r)!\n\n\n\n\n\n","category":"method"},{"location":"statstools.html#Rimu.StatsTools.blocker-Union{Tuple{AbstractVector{T}}, Tuple{T}} where T","page":"StatsTools","title":"Rimu.StatsTools.blocker","text":"blocker(v::Vector) -> new_v::Vector\n\nReblock the data by successively taking the mean of two adjacent data points to form a new vector with a half of the length(v). The last data point will be discarded if length(v) is odd.\n\n\n\n\n\n","category":"method"},{"location":"statstools.html#Rimu.StatsTools.blocks_with_m-Tuple{Any}","page":"StatsTools","title":"Rimu.StatsTools.blocks_with_m","text":"blocks_with_m(v; corrected = true) -> (;blocks, mean, std_err, std_err_err, p_cov, mj)\n\nPerform the blocking algorithm from Flyvberg and Peterson JCP (1989). Returns named tuple with the results from all blocking steps. See mtest().\n\n\n\n\n\n","category":"method"},{"location":"statstools.html#Rimu.StatsTools.mtest-Tuple{AbstractVector}","page":"StatsTools","title":"Rimu.StatsTools.mtest","text":"mtest(mj::AbstractVector; α = 0.01) -> k\nmtest(table::NamedTuple; α = 0.01) -> k\n\nHypothesis test for decorrelation of a time series after blocking transformations with significance level 1-α after Jonson PRE (2018). mj or table.mj is expected to be a vector with relevant M_j values from a blocking analysis as obtained from blocks_with_m(). Returns the row number k where the M-test is passed. If the M-test has failed mtest() returns the value -1.\n\n\n\n\n\n","category":"method"},{"location":"statstools.html#Rimu.StatsTools.RatioBlockingResult","page":"StatsTools","title":"Rimu.StatsTools.RatioBlockingResult","text":"RatioBlockingResult(ratio, f, σ_f, δ_y, k, success)\n\nResult of ratio_of_means().\n\nFields:\n\nratio::P: ratio with uncertainties propagated by MonteCarloMeasurements\nf::T: ratio of means\nσ_f::T: std from linear propagation\nδ_y::T: coefficient of variation for denominator (≤ 0.1 for normal approx)\nk::Int: k-1 blocking steps were used to uncorrelate time series\nblocks::Int: number of data values after blocking\nsuccess::Bool: false if any of the blocking steps failed\n\nHas methods for NamedTuple, val_and_errs, val, errs.\n\nNote: to compute statistics on the RatioBlockingResult, use functions pmedian, pquantile, pmiddle, piterate, pextrema, pminimum, pmaximum, pmean, and pcov.\n\n\n\n\n\n","category":"type"},{"location":"statstools.html#Rimu.StatsTools.particles-Tuple{Any, Any, Any}","page":"StatsTools","title":"Rimu.StatsTools.particles","text":"particles(samples, μ, σ)\nparticles(samples, μ::AbstractVector, Σ::AbstractMatrix)\n\nReturn Particles object from MonteCarloMeasurements with single- or multivariate normal distribution. Zero variance parameters are supported.\n\n\n\n\n\n","category":"method"},{"location":"statstools.html#Rimu.StatsTools.particles-Tuple{Any, Distributions.Distribution}","page":"StatsTools","title":"Rimu.StatsTools.particles","text":"particles(samples, d)\nparticles(::Nothing, d)\nparticles(::Val{T}, d) where T\n\nReturn Particles object from  MonteCarloMeasurements using  a type-stable constructor if possible. Pass nothing for the default number of particles or Val(1_000) for using 1000 particles in a type-stable manner. If d is a Particles object it is passed through without re-sampling.\n\n\n\n\n\n","category":"method"},{"location":"statstools.html#Rimu.StatsTools.ratio_estimators-Tuple{AbstractVector{<:Real}, AbstractVector{<:Real}}","page":"StatsTools","title":"Rimu.StatsTools.ratio_estimators","text":"ratio_estimators(x, y, [k]; corrected=true, mc_samples=10_000) -> (; r, f, σ_f, δ_y, n)\n\nEstimators for the ratio of means mean(x)/mean(y). If k is given, k-1 blocking steps are performed to remove internal correlations in the time series x and y. Otherwise these are assumed to be free of internal correlations. Correlations between x and y may be present and are taken into account.\n\nReturn values:\n\nr::Particles is the Monte Carlo sampled ratio estimator, see Particles\nf = mean(x)/mean(y)\nσ_f standard deviation of f from linear error propagation (normal approximation)\nδ_y = std(y)/mean(y) coefficient of variation; < 0.1 for normal approximation to work\nn: number of uncorrelated data used for uncertainty estimation\n\n\n\n\n\n","category":"method"},{"location":"statstools.html#Rimu.StatsTools.x_by_y_linear-NTuple{5, Any}","page":"StatsTools","title":"Rimu.StatsTools.x_by_y_linear","text":"x_by_y_linear(μ_x,μ_y,σ_x,σ_y,ρ) -> f, σ_f\n\nLinear error propagation for ratio f = x/y assuming x and y are correlated normal random variables and assuming the ratio can be approximated as a normal distribution. See wikipedia and Díaz-Francés, Rubio (2013).\n\nσ_f = sqrtfracσ_xμ_y^2 + fracμ_x σ_yμ_y^2^2 - frac2 ρ μ_xμ_y^3\n\n\n\n\n\n","category":"method"},{"location":"statstools.html#Core.NamedTuple-Tuple{Rimu.StatsTools.BlockingResult}","page":"StatsTools","title":"Core.NamedTuple","text":"NamedTuple(x::BlockingResult; n=1, p=nothing, name=:val)\nNamedTuple(x::RatioBlockingResult; n=1, p=nothing, name=:val)\n\nReturn a named tuple with value and error bars (see val_and_errs) as well as additional numerical fields relevant for x.\n\nExample:\n\njulia> results = [blocking_analysis(i:0.1:2i+20) for i in 1:3]; # mock results\n\njulia> df = NamedTuple.(results, name=:res)|>DataFrame\n3×7 DataFrame\n Row │ res      res_l    res_u    res_err_err  res_p_cov  res_k  res_blocks\n     │ Float64  Float64  Float64  Float64      Float64    Int64  Int64\n─────┼──────────────────────────────────────────────────────────────────────\n   1 │    11.5  1.7282   1.7282      0.352767    2.98667      5          13\n   2 │    13.0  1.7282   1.7282      0.352767    2.98667      5          13\n   3 │    14.5  1.78885  1.78885     0.350823    3.2          5          14\n\njulia> rbs = ratio_of_means(1 .+sin.(1:0.1:11),2 .+sin.(2:0.1:12)); # more mock results\n\njulia> [NamedTuple(rbs),]|>DataFrame\n1×9 DataFrame\n Row │ val       val_l      val_u      val_f     val_σ_f    val_δ_y    val_k  val_blocks  val_success\n     │ Float64   Float64    Float64    Float64   Float64    Float64    Int64  Int64       Bool\n─────┼────────────────────────────────────────────────────────────────────────────────────────────────\n   1 │ 0.581549  0.0925669  0.0812292  0.560532  0.0875548  0.0875548      4          12         true\n\n\nSee val_and_errs, val, errs, BlockingResult, RatioBlockingResult.\n\n\n\n\n\n","category":"method"},{"location":"statstools.html#Rimu.StatsTools.autocovariance-Tuple{AbstractVector, Int64}","page":"StatsTools","title":"Rimu.StatsTools.autocovariance","text":"autocovariance(v::Vector,h::Int; corrected::Bool=true)\n\nhatgamma(h) =frac1nsum_t=1^n-h(v_t+h-barv)(v_t-barv)^* Calculate the autocovariance of dataset v with a delay h. If corrected is true (the default) then the sum is scaled with n-h, whereas the sum is scaled with n if corrected is false where n = length(v).\n\n\n\n\n\n","category":"method"},{"location":"statstools.html#Rimu.StatsTools.pseudo_cov-Tuple{Any, Any}","page":"StatsTools","title":"Rimu.StatsTools.pseudo_cov","text":"pseudo_cov(x, y; xmean = mean(x), ymean = mean(y), corrected = true)\n\nCompute the pseudo covariance between collections x and y returning a scalar:\n\nfrac1nsum_i=1^n (x_i - barx)(y_i - bary)\n\nOptionally, precomputed means can be passed as keyword arguments. pseudo_cov(x,y) is functionally equivalent to Statistics.cov(x, conj(y); corrected = false) but it is found to be significantly faster and avoids allocations.\n\n\n\n\n\n","category":"method"},{"location":"statstools.html#Rimu.StatsTools.determine_constant_time_step-Tuple{Any}","page":"StatsTools","title":"Rimu.StatsTools.determine_constant_time_step","text":"determine_constant_time_step(df) -> time_step\n\nGiven a DataFrame df, determine the time step that was used to compute it. Throw an error if time step is not constant.\n\n\n\n\n\n","category":"method"},{"location":"statstools.html#Index","page":"StatsTools","title":"Index","text":"","category":"section"},{"location":"statstools.html","page":"StatsTools","title":"StatsTools","text":"Pages   = [\"statstools.md\"]","category":"page"},{"location":"interfaces.html#Module-Interfaces","page":"Interfaces","title":"Module Interfaces","text":"","category":"section"},{"location":"interfaces.html","page":"Interfaces","title":"Interfaces","text":"Interfaces","category":"page"},{"location":"interfaces.html#Rimu.Interfaces","page":"Interfaces","title":"Rimu.Interfaces","text":"module Interfaces\n\nThis module contains interfaces that can be used to extend and modify the algorithms and behaviours of Rimu.\n\nInterfaces\n\nFollow the links for the definitions of the interfaces!\n\nAbstractHamiltonian for defining Hamiltonians\nAbstractOperator for defining observable operators\nAbstractDVec for defining data structures for Rimu as in DictVectors\nStochasticStyle for controlling the stochastic algorithms used by ProjectorMonteCarloProblem as implemented in StochasticStyles\n\nAdditional exports\n\nInterface functions forAbstractHamiltonians:\n\ndiagonal_element\nnum_offdiagonals\nget_offdiagonal\noffdiagonals.\nrandom_offdiagonal\nstarting_address\nLOStructure\nallows_address_type\n\nworking with  AbstractDVecs and StochasticStyle\n\ndeposit!\ndefault_style\nCompressionStrategy\nThe interface from VectorInterface.jl.\n\nFunctions Rimu.jl uses to do FCIQMC:\n\napply_column!\napply_operator!\nstep_stats\n\n\n\n\n\n","category":"module"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"EditURL = \"../../../scripts/HO-example.jl\"","category":"page"},{"location":"generated/HO-example.html#Example-5:-Degenerate-perturbation-theory-in-a-harmonic-oscillator-basis","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Example 5: Degenerate perturbation theory in a harmonic oscillator basis","text":"","category":"section"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"Rimu can also handle non-lattice systems. This example looks at weakly-interacting bosonic particles in a harmonic oscillator external potential using a basis of (Cartesian product) single-particle eigenstates of the harmonic oscillator potential. Blocks of degenerate non-interacting states are coupled by a contact interaction in first order degenerate perturbation theory. This example shows how to generate these blocks and find the energy and angular momentum eigenstates.","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"A runnable script for this example is located here. Run it with julia HO-example.jl.","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"First, load all needed packages.","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"using Rimu\nusing DataFrames\nusing LinearAlgebra","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"Define the system size for N=2 particles in a 2D harmonic oscillator allowing M=4 levels in each dimension, including the groundstate.","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"N = 2\nM = 4;","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"Use a tuple S to define the range of harmonic oscillator states in a Cartesian basis, in this isotropic case n_xn_y=01ldotsM-1.","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"S = (M, M);","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"In Rimu the N-particle states are still stored as Fock states.","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"P = prod(S)\naddr = BoseFS(P, M => N)","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"BoseFS{2,16}(0, 0, 0, 2, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0)","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"Here, the numbering of the modes folds in the two spatial dimensions.  Use the utility function fock_to_cart to convert a Fock address to human-readable Cartesian quantum numbers for inspection.","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"fock_to_cart(addr, S)","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"2-element StaticArraysCore.SVector{2, Tuple{Int64, Int64}} with indices SOneTo(2):\n (3, 0)\n (3, 0)","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"The output shows that all N particles are in single-particle state n_x=M-1 n_y=0.","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"The harmonic oscillator Hamiltonian HOCartesianContactInteractions handles contact interactions with first-order perturbation theory, so the matrix representation will block according to the non-interacting energy of the basis states. The first task is to find all blocks of basis states with the same energy. The strength of the interaction is not relevant at this point, just that it is non-zero. Use an arbitrary N-particle starting address to build the Hamiltonian.","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"H = HOCartesianContactInteractions(BoseFS(P, 1 => N); S);","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"Then, use the utility function get_all_blocks to find all blocks. The blocks are found by looping over all possible states with N particles in Cartesian states defined by S. Note that this will only work for total energy up to the maximum accessible by a single particle. The N-particle groundstate energy for a 2D harmonic oscillator is E_0 = N hbar omega and the maximum single-particle energy is E = (E_0 + M - 1) hbar omega.","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"block_df = get_all_blocks(H; max_energy = N + M - 1)","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"<div><div style = \"float: left;\"><span>7×6 DataFrame</span></div><div style = \"clear: both;\"></div></div><div class = \"data-frame\" style = \"overflow-x: scroll;\"><table class = \"data-frame\" style = \"margin-bottom: 6px;\"><thead><tr class = \"header\"><th class = \"rowNumber\" style = \"font-weight: bold; text-align: right;\">Row</th><th style = \"text-align: left;\">block_id</th><th style = \"text-align: left;\">block_E0</th><th style = \"text-align: left;\">block_size</th><th style = \"text-align: left;\">addr</th><th style = \"text-align: left;\">indices</th><th style = \"text-align: left;\">t_basis</th></tr><tr class = \"subheader headerLastRow\"><th class = \"rowNumber\" style = \"font-weight: bold; text-align: right;\"></th><th title = \"Int64\" style = \"text-align: left;\">Int64</th><th title = \"Float64\" style = \"text-align: left;\">Float64</th><th title = \"Int64\" style = \"text-align: left;\">Int64</th><th title = \"BoseFS{2, 16, BitString{17, 1, UInt32}}\" style = \"text-align: left;\">BoseFS…</th><th title = \"Tuple{Int64, Int64}\" style = \"text-align: left;\">Tuple…</th><th title = \"Float64\" style = \"text-align: left;\">Float64</th></tr></thead><tbody><tr><td class = \"rowNumber\" style = \"font-weight: bold; text-align: right;\">1</td><td style = \"text-align: right;\">1</td><td style = \"text-align: right;\">2.0</td><td style = \"text-align: right;\">1</td><td style = \"text-align: left;\">fs&quot;|2 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0⟩&quot;</td><td style = \"text-align: left;\">(1, 1)</td><td style = \"text-align: right;\">0.463095</td></tr><tr><td class = \"rowNumber\" style = \"font-weight: bold; text-align: right;\">2</td><td style = \"text-align: right;\">2</td><td style = \"text-align: right;\">3.0</td><td style = \"text-align: right;\">1</td><td style = \"text-align: left;\">fs&quot;|1 1 0 0 0 0 0 0 0 0 0 0 0 0 0 0⟩&quot;</td><td style = \"text-align: left;\">(2, 1)</td><td style = \"text-align: right;\">1.4026e-5</td></tr><tr><td class = \"rowNumber\" style = \"font-weight: bold; text-align: right;\">3</td><td style = \"text-align: right;\">3</td><td style = \"text-align: right;\">4.0</td><td style = \"text-align: right;\">4</td><td style = \"text-align: left;\">fs&quot;|0 2 0 0 0 0 0 0 0 0 0 0 0 0 0 0⟩&quot;</td><td style = \"text-align: left;\">(2, 2)</td><td style = \"text-align: right;\">9.348e-6</td></tr><tr><td class = \"rowNumber\" style = \"font-weight: bold; text-align: right;\">4</td><td style = \"text-align: right;\">4</td><td style = \"text-align: right;\">5.0</td><td style = \"text-align: right;\">5</td><td style = \"text-align: left;\">fs&quot;|0 1 1 0 0 0 0 0 0 0 0 0 0 0 0 0⟩&quot;</td><td style = \"text-align: left;\">(3, 2)</td><td style = \"text-align: right;\">9.237e-6</td></tr><tr><td class = \"rowNumber\" style = \"font-weight: bold; text-align: right;\">5</td><td style = \"text-align: right;\">5</td><td style = \"text-align: right;\">3.0</td><td style = \"text-align: right;\">1</td><td style = \"text-align: left;\">fs&quot;|1 0 0 0 1 0 0 0 0 0 0 0 0 0 0 0⟩&quot;</td><td style = \"text-align: left;\">(5, 1)</td><td style = \"text-align: right;\">1.312e-6</td></tr><tr><td class = \"rowNumber\" style = \"font-weight: bold; text-align: right;\">6</td><td style = \"text-align: right;\">6</td><td style = \"text-align: right;\">4.0</td><td style = \"text-align: right;\">2</td><td style = \"text-align: left;\">fs&quot;|0 1 0 0 1 0 0 0 0 0 0 0 0 0 0 0⟩&quot;</td><td style = \"text-align: left;\">(5, 2)</td><td style = \"text-align: right;\">2.625e-6</td></tr><tr><td class = \"rowNumber\" style = \"font-weight: bold; text-align: right;\">7</td><td style = \"text-align: right;\">7</td><td style = \"text-align: right;\">5.0</td><td style = \"text-align: right;\">5</td><td style = \"text-align: left;\">fs&quot;|0 0 1 0 1 0 0 0 0 0 0 0 0 0 0 0⟩&quot;</td><td style = \"text-align: left;\">(5, 3)</td><td style = \"text-align: right;\">8.004e-6</td></tr></tbody></table></div>","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"This outputs a list of blocks in H indexed by the noninteracting energy of all states in the block, and a single address that can be used to rebuild the block for further analysis.","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"addr1 = block_df[7,:addr]\nE = block_df[7,:block_E0]","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"5.0","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"First, notice that all basis states have the same energy, defined by the block.","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"basis1 = build_basis(H, addr1)\nmap(b -> Hamiltonians.noninteracting_energy(H, b), basis1)","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"5-element Vector{Float64}:\n 5.0\n 5.0\n 5.0\n 5.0\n 5.0","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"There are two blocks at each energy level (except the groundstate), which are different due to parity conservation, which is the only other symmetry in the Cartesian harmonic oscillator. The basis of this other block is different,","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"addr2 = block_df[4,:addr]\nbasis2 = build_basis(H, addr2);\nbasis1 ≠ basis2","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"true","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"but its basis elements have the same energy.","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"map(b -> Hamiltonians.noninteracting_energy(H, b), basis2)","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"5-element Vector{Float64}:\n 5.0\n 5.0\n 5.0\n 5.0\n 5.0","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"However, since this system is an isotropic harmonic oscillator, it is possible to build simultaneous eigenstates of the angular momentum operator L_z, implemented with AxialAngularMomentumHO.","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"Lz = AxialAngularMomentumHO(S)","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"AxialAngularMomentumHO((4, 4); z_dim = 3, addr = BoseFS{0,16}(0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0))","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"L_z does not conserve parity, so both blocks are required. First combine the bases of each block and convert to DVecs.","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"dvs = map(b -> DVec(b => 1.0), vcat(basis1, basis2));","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"and then compute overlaps for the matrix elements of L_z.","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"Lz_mat = [dot(v, Lz, w) for v in dvs, w in dvs]","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"10×10 Matrix{ComplexF64}:\n 0.0+0.0im      0.0+0.0im      0.0+0.0im      0.0+0.0im      0.0+0.0im      0.0+1.0im      0.0+0.0im      0.0-1.41421im  0.0+0.0im      0.0+0.0im\n 0.0+0.0im      0.0+0.0im      0.0+0.0im      0.0+0.0im      0.0+0.0im      0.0+1.41421im  0.0+0.0im      0.0-1.0im      0.0-1.41421im  0.0+0.0im\n 0.0+0.0im      0.0+0.0im      0.0+0.0im      0.0+0.0im      0.0+0.0im      0.0+0.0im      0.0+1.73205im  0.0+0.0im      0.0+0.0im      0.0-2.0im\n 0.0+0.0im      0.0+0.0im      0.0+0.0im      0.0+0.0im      0.0+0.0im      0.0+0.0im      0.0+0.0im      0.0+1.41421im  0.0+1.0im      0.0+0.0im\n 0.0+0.0im      0.0+0.0im      0.0+0.0im      0.0+0.0im      0.0+0.0im      0.0+0.0im      0.0+0.0im      0.0+0.0im      0.0+0.0im      0.0+1.73205im\n 0.0-1.0im      0.0-1.41421im  0.0+0.0im      0.0+0.0im      0.0+0.0im      0.0+0.0im      0.0+0.0im      0.0+0.0im      0.0+0.0im      0.0+0.0im\n 0.0+0.0im      0.0+0.0im      0.0-1.73205im  0.0+0.0im      0.0+0.0im      0.0+0.0im      0.0+0.0im      0.0+0.0im      0.0+0.0im      0.0+0.0im\n 0.0+1.41421im  0.0+1.0im      0.0+0.0im      0.0-1.41421im  0.0+0.0im      0.0+0.0im      0.0+0.0im      0.0+0.0im      0.0+0.0im      0.0+0.0im\n 0.0+0.0im      0.0+1.41421im  0.0+0.0im      0.0-1.0im      0.0+0.0im      0.0+0.0im      0.0+0.0im      0.0+0.0im      0.0+0.0im      0.0+0.0im\n 0.0+0.0im      0.0+0.0im      0.0+2.0im      0.0+0.0im      0.0-1.73205im  0.0+0.0im      0.0+0.0im      0.0+0.0im      0.0+0.0im      0.0+0.0im","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"By diagonalising this matrix the eigenstate have energy E and well-defined angular momentum.","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"Diagonalise this matrix to obtain the eigenstates of L_z. The eigenvectors provide the linear combinations of basis states with well-defined angular momentum, within the subspace of energy E.","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"Lz_vals, Lz_vecs = eigen(Lz_mat)","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"Eigen{ComplexF64, Float64, Matrix{ComplexF64}, Vector{Float64}}\nvalues:\n10-element Vector{Float64}:\n -2.9999999999999956\n -2.999999999999991\n -0.9999999999999991\n -0.9999999999999982\n -0.9999999999999973\n  1.0000000000000002\n  1.0000000000000027\n  1.0000000000000027\n  3.0\n  3.0000000000000004\nvectors:\n10×10 Matrix{ComplexF64}:\n       0.0+0.0im       -5.55112e-17-0.353553im         0.534676-0.217841im      2.77556e-17-0.204124im             0.0+0.0im           0.534676+0.217841im      2.77556e-17+0.204124im             0.0+0.0im       -5.55112e-17+0.353553im           0.0+0.0im\n       0.0+0.0im        5.55112e-17-0.5im             -0.378073+0.154037im              0.0-0.288675im             0.0+0.0im          -0.378073-0.154037im     -5.55112e-17+0.288675im             0.0+0.0im                0.0+0.5im                0.0+0.0im\n       0.0+0.612372im           0.0+0.0im          -5.55112e-17+0.0im           -1.2326e-32+2.77556e-17im          0.0+0.353553im           0.0+0.0im                   0.0+2.77556e-17im          0.0+0.353553im           0.0+0.0im                0.0+0.612372im\n       0.0+0.0im                0.0+0.353553im      5.55112e-17+6.93889e-17im           0.0-0.612372im             0.0+0.0im        5.55112e-17-1.38778e-16im           0.0+0.612372im             0.0+0.0im                0.0-0.353553im           0.0+0.0im\n       0.0-0.353553im    1.2326e-32+1.11022e-16im   5.55112e-17-2.77556e-17im  -2.46519e-32-2.77556e-17im          0.0+0.612372im  -1.11022e-16-2.77556e-17im   4.93038e-32-2.77556e-17im          0.0+0.612372im   -1.2326e-32+8.32667e-17im        0.0-0.353553im\n       0.0+0.0im           0.353553+0.0im                   0.0+0.0im              0.612372+0.0im                  0.0+0.0im                0.0+0.0im              0.612372+0.0im                  0.0+0.0im           0.353553+0.0im                0.0+0.0im\n -0.353553+0.0im                0.0+0.0im                   0.0+0.0im                   0.0+0.0im            -0.612372+0.0im                0.0+0.0im                   0.0+0.0im             0.612372+0.0im                0.0+0.0im           0.353553+0.0im\n       0.0+0.0im               -0.5+7.02973e-17im     -0.154037-0.378073im         0.288675-1.95105e-16im          0.0+0.0im          -0.154037+0.378073im         0.288675+2.29062e-16im          0.0+0.0im               -0.5-7.48398e-17im        0.0+0.0im\n       0.0+0.0im          -0.353553+8.84171e-17im      0.217841+0.534676im         0.204124-1.1389e-16im   8.32667e-17+0.0im           0.217841-0.534676im         0.204124+2.4427e-16im   8.32667e-17+0.0im          -0.353553-8.31718e-17im        0.0+0.0im\n  0.612372+0.0im                0.0+0.0im                   0.0+0.0im                   0.0+0.0im            -0.353553-0.0im                0.0+0.0im                   0.0+0.0im             0.353553+0.0im                0.0+0.0im          -0.612372-0.0im","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"Finally, consider the effect of interactions by looking at how states in a single block are perturbed. Only the energy shift due to the interaction is relevant so now rebuild the Hamiltonian without the non-interacting energy.","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"Hint = HOCartesianContactInteractions(addr1; S, interaction_only = true)\nΔE = eigvals(Matrix(Hint, addr1))","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"5-element Vector{Float64}:\n -1.6810327175633306e-17\n  3.469966302164114e-17\n  0.15915494309189535\n  0.1591549430918954\n  0.1591549430918954","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"Two eigenstates in this block are unaffected by the interaction and three have a non-zero energy shift.","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"The default strength of the interaction is g = 1.0. Other interactions strengths can be obtained by using keyword argument g in HOCartesianContactInteractions or by rescaling ΔE since the interactions are handled with first-order perturbation theory.","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"Rimu also contains HOCartesianEnergyConservedPerDim which is a similar Hamiltonian but with the stricter condition that the contact interaction only connects states that have the same total energy in each dimension, rather than conserving the overall total energy. Both Hamiltonians can handle anisotropic systems by passing a tuple S whose elements are not all the same. This will alter which states are connected by the interaction, but assumes that the harmonic trapping frequencies in each dimension are commensurate.","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"This page was generated using Literate.jl.","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"EditURL = \"../../../scripts/exact-example.jl\"","category":"page"},{"location":"generated/exact-example.html#Example-4:-Exact-diagonalization","page":"Exact diagonalization","title":"Example 4: Exact diagonalization","text":"","category":"section"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"When working with smaller systems or when multiple eigenvalues of a system are required, one can use an exact diagonalization method. There are a few ways to go about this, each with its pros and cons. The purpose of this tutorial is to show off the methods as well as provide a few tips regarding them.","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"A runnable script for this example is located here. Run it with julia exact-example.jl.","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"We start by loading Rimu.","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"using Rimu","category":"page"},{"location":"generated/exact-example.html#Introduction","page":"Exact diagonalization","title":"Introduction","text":"","category":"section"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"We will look at a bosonic system of 4 particles in 5 sites, formulated in momentum space. Let's start by building the Hamiltonian. To create a Fock state where all particles have zero momentum, we put all the particles in the mode at the centre of the address.","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"M = 5\nN = 4\nadd = BoseFS(M, cld(M, 2) => N)\nham = HubbardMom1D(add)","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"HubbardMom1D(fs\"|0 0 4 0 0⟩\"; u=1.0, t=1.0)","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"Before performing exact diagonalization, it is a good idea to check the dimension of the Hamiltonian.","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"dimension(ham)","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"70","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"Keep in mind that this is an estimate of the number of Fock states the Hamiltonian can act on, not the actual matrix size - the matrix size can sometimes be smaller. It can still be used as a guide to decide whether a Hamiltonian is amenable to exact diagonalization and to determine which algorithm would be best suited to diagonalising it.","category":"page"},{"location":"generated/exact-example.html#The-BasisSetRepresentation","page":"Exact diagonalization","title":"The BasisSetRepresentation","text":"","category":"section"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"As we'll see later, there are two ways to construct the matrices from Hamiltonians directly, but they both use BasisSetRepresentation under the hood. The BasisSetRepresentation, when called with a Hamiltonian and optionally a starting address, constructs the sparse matrix of the system, as well as its basis. The starting address defaults to the one that was used to initialize the Hamiltonian. BasisSetRepresentation only returns the part of the matrix that is accessible from this starting address through non-zero offdiagonal elements.","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"bsr = BasisSetRepresentation(ham);","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"To access the matrix or basis, access the sparse_matrix and basis fields, respectively.","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"bsr.sparse_matrix","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"14×14 SparseArrays.SparseMatrixCSC{Float64, Int64} with 104 stored entries:\n -6.8       0.69282   0.69282    ⋅         ⋅         ⋅         ⋅          ⋅         ⋅         ⋅         ⋅         ⋅         ⋅         ⋅ \n  0.69282  -3.03607   0.4       0.8       0.4       0.8       0.4        0.565685  0.282843   ⋅         ⋅         ⋅         ⋅         ⋅ \n  0.69282   0.4       1.43607   0.4       0.8       0.4       0.8         ⋅        0.282843  0.565685   ⋅         ⋅         ⋅         ⋅ \n   ⋅        0.8       0.4       0.581966  0.4        ⋅        0.4        0.282843  0.565685   ⋅        0.69282   0.69282    ⋅         ⋅ \n   ⋅        0.4       0.8       0.4       2.81803   0.4        ⋅          ⋅        0.565685  0.282843  0.69282    ⋅        0.69282    ⋅ \n   ⋅        0.8       0.4        ⋅        0.4       0.581966  0.4        0.282843  0.565685   ⋅         ⋅         ⋅        0.69282   0.69282\n   ⋅        0.4       0.8       0.4        ⋅        0.4       2.81803     ⋅        0.565685  0.282843   ⋅        0.69282    ⋅        0.69282\n   ⋅        0.565685   ⋅        0.282843   ⋅        0.282843   ⋅        -0.472136  0.8        ⋅        0.489898   ⋅         ⋅        0.489898\n   ⋅        0.282843  0.282843  0.565685  0.565685  0.565685  0.565685   0.8       4.4       0.8       0.489898  0.489898  0.489898  0.489898\n   ⋅         ⋅        0.565685   ⋅        0.282843   ⋅        0.282843    ⋅        0.8       8.47214    ⋅        0.489898  0.489898   ⋅ \n   ⋅         ⋅         ⋅        0.69282   0.69282    ⋅         ⋅         0.489898  0.489898   ⋅        1.56393    ⋅         ⋅         ⋅ \n   ⋅         ⋅         ⋅        0.69282    ⋅         ⋅        0.69282     ⋅        0.489898  0.489898   ⋅        6.03607    ⋅         ⋅ \n   ⋅         ⋅         ⋅         ⋅        0.69282   0.69282    ⋅          ⋅        0.489898  0.489898   ⋅         ⋅        6.03607    ⋅ \n   ⋅         ⋅         ⋅         ⋅         ⋅        0.69282   0.69282    0.489898  0.489898   ⋅         ⋅         ⋅         ⋅        1.56393","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"bsr.basis","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"14-element Vector{BoseFS{4, 5, BitString{8, 1, UInt8}}}:\n fs\"|0 0 4 0 0⟩\"\n fs\"|0 1 2 1 0⟩\"\n fs\"|1 0 2 0 1⟩\"\n fs\"|1 0 1 2 0⟩\"\n fs\"|0 0 1 1 2⟩\"\n fs\"|0 2 1 0 1⟩\"\n fs\"|2 1 1 0 0⟩\"\n fs\"|0 2 0 2 0⟩\"\n fs\"|1 1 0 1 1⟩\"\n fs\"|2 0 0 0 2⟩\"\n fs\"|0 0 0 3 1⟩\"\n fs\"|3 0 0 1 0⟩\"\n fs\"|0 1 0 0 3⟩\"\n fs\"|1 3 0 0 0⟩\"","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"When the basis is not needed, we can use Matrix or sparse directly.","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"Matrix(ham)","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"14×14 Matrix{Float64}:\n -6.8       0.69282   0.69282   0.0       0.0       0.0       0.0        0.0       0.0       0.0       0.0       0.0       0.0       0.0\n  0.69282  -3.03607   0.4       0.8       0.4       0.8       0.4        0.565685  0.282843  0.0       0.0       0.0       0.0       0.0\n  0.69282   0.4       1.43607   0.4       0.8       0.4       0.8        0.0       0.282843  0.565685  0.0       0.0       0.0       0.0\n  0.0       0.8       0.4       0.581966  0.4       0.0       0.4        0.282843  0.565685  0.0       0.69282   0.69282   0.0       0.0\n  0.0       0.4       0.8       0.4       2.81803   0.4       0.0        0.0       0.565685  0.282843  0.69282   0.0       0.69282   0.0\n  0.0       0.8       0.4       0.0       0.4       0.581966  0.4        0.282843  0.565685  0.0       0.0       0.0       0.69282   0.69282\n  0.0       0.4       0.8       0.4       0.0       0.4       2.81803    0.0       0.565685  0.282843  0.0       0.69282   0.0       0.69282\n  0.0       0.565685  0.0       0.282843  0.0       0.282843  0.0       -0.472136  0.8       0.0       0.489898  0.0       0.0       0.489898\n  0.0       0.282843  0.282843  0.565685  0.565685  0.565685  0.565685   0.8       4.4       0.8       0.489898  0.489898  0.489898  0.489898\n  0.0       0.0       0.565685  0.0       0.282843  0.0       0.282843   0.0       0.8       8.47214   0.0       0.489898  0.489898  0.0\n  0.0       0.0       0.0       0.69282   0.69282   0.0       0.0        0.489898  0.489898  0.0       1.56393   0.0       0.0       0.0\n  0.0       0.0       0.0       0.69282   0.0       0.0       0.69282    0.0       0.489898  0.489898  0.0       6.03607   0.0       0.0\n  0.0       0.0       0.0       0.0       0.69282   0.69282   0.0        0.0       0.489898  0.489898  0.0       0.0       6.03607   0.0\n  0.0       0.0       0.0       0.0       0.0       0.69282   0.69282    0.489898  0.489898  0.0       0.0       0.0       0.0       1.56393","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"sparse(ham)","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"14×14 SparseArrays.SparseMatrixCSC{Float64, Int64} with 104 stored entries:\n -6.8       0.69282   0.69282    ⋅         ⋅         ⋅         ⋅          ⋅         ⋅         ⋅         ⋅         ⋅         ⋅         ⋅ \n  0.69282  -3.03607   0.4       0.8       0.4       0.8       0.4        0.565685  0.282843   ⋅         ⋅         ⋅         ⋅         ⋅ \n  0.69282   0.4       1.43607   0.4       0.8       0.4       0.8         ⋅        0.282843  0.565685   ⋅         ⋅         ⋅         ⋅ \n   ⋅        0.8       0.4       0.581966  0.4        ⋅        0.4        0.282843  0.565685   ⋅        0.69282   0.69282    ⋅         ⋅ \n   ⋅        0.4       0.8       0.4       2.81803   0.4        ⋅          ⋅        0.565685  0.282843  0.69282    ⋅        0.69282    ⋅ \n   ⋅        0.8       0.4        ⋅        0.4       0.581966  0.4        0.282843  0.565685   ⋅         ⋅         ⋅        0.69282   0.69282\n   ⋅        0.4       0.8       0.4        ⋅        0.4       2.81803     ⋅        0.565685  0.282843   ⋅        0.69282    ⋅        0.69282\n   ⋅        0.565685   ⋅        0.282843   ⋅        0.282843   ⋅        -0.472136  0.8        ⋅        0.489898   ⋅         ⋅        0.489898\n   ⋅        0.282843  0.282843  0.565685  0.565685  0.565685  0.565685   0.8       4.4       0.8       0.489898  0.489898  0.489898  0.489898\n   ⋅         ⋅        0.565685   ⋅        0.282843   ⋅        0.282843    ⋅        0.8       8.47214    ⋅        0.489898  0.489898   ⋅ \n   ⋅         ⋅         ⋅        0.69282   0.69282    ⋅         ⋅         0.489898  0.489898   ⋅        1.56393    ⋅         ⋅         ⋅ \n   ⋅         ⋅         ⋅        0.69282    ⋅         ⋅        0.69282     ⋅        0.489898  0.489898   ⋅        6.03607    ⋅         ⋅ \n   ⋅         ⋅         ⋅         ⋅        0.69282   0.69282    ⋅          ⋅        0.489898  0.489898   ⋅         ⋅        6.03607    ⋅ \n   ⋅         ⋅         ⋅         ⋅         ⋅        0.69282   0.69282    0.489898  0.489898   ⋅         ⋅         ⋅         ⋅        1.56393","category":"page"},{"location":"generated/exact-example.html#Computing-eigenvalues","page":"Exact diagonalization","title":"Computing eigenvalues","text":"","category":"section"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"Now that we have a way of constructing matrices from Hamiltonians, we can use standard Julia functionality to diagonalise them.","category":"page"},{"location":"generated/exact-example.html#The-built-in-method","page":"Exact diagonalization","title":"The built-in method","text":"","category":"section"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"Let's begin by looking at the eigen, eigvecs, and eigvals functions from the LinearAlgebra standard library. They operate on dense matrices and return the full spectra, hence they are only useful for small systems, or when all eigenvalues are required.","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"using LinearAlgebra\n\nmat = Matrix(ham)\neig = eigen(mat);","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"The values can be accessed like so:","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"eig.values","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"14-element Vector{Float64}:\n -6.9798639983216155\n -3.363124291613371\n -0.7590191922770746\n  0.1358418221962303\n  0.1578999869460933\n  0.8767114411781396\n  1.530592997097333\n  1.5835732611867464\n  3.072870330325867\n  3.125672653951849\n  4.862107221562182\n  6.26069485038059\n  6.402671211183119\n  9.093371706203957","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"The vectors are stored as columns in eig.vectors:","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"eig.vectors","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"14×14 Matrix{Float64}:\n -0.980348     0.175378     0.0135766   -2.81719e-15  -0.0221221  -0.0697193   1.3739e-15    0.0314466   -2.35922e-16  -0.0360987   -0.0161557  -5.55112e-17   0.00625248  -0.0058099\n  0.177701     0.932229     0.105473     3.01009e-14   0.225254   -0.132826    9.71445e-17  -0.00292026  -2.09555e-15  -0.0861158   -0.0907789  -4.996e-16     0.0591715   -0.0264275\n  0.0768085   -0.0622307    0.0129069   -6.06251e-14  -0.447424   -0.63969     2.05322e-14   0.383444    -6.54338e-15  -0.431051    -0.181167   -6.10623e-16   0.0599783   -0.106852\n -0.0214153   -0.175119    -0.20169      0.616673      0.522017   -0.296818   -0.31234      -0.122119    -0.123629     -0.106455    -0.126661    0.0829132     0.148347    -0.0574235\n -0.0119687   -0.0373038    0.0678797    0.0693699     0.0495446   0.416847    0.33773       0.0584554   -0.601232     -0.467179    -0.215841   -0.140166      0.190543    -0.114342\n -0.0214153   -0.175119    -0.20169     -0.616673      0.522017   -0.296818    0.31234      -0.122119     0.123629     -0.106455    -0.126661   -0.0829132     0.148347    -0.0574235\n -0.0119687   -0.0373038    0.0678797   -0.0693699     0.0495446   0.416847   -0.33773       0.0584554    0.601232     -0.467179    -0.215841    0.140166      0.190543    -0.114342\n -0.0138439   -0.165902     0.922758     1.00753e-14   0.1111     -0.172508   -1.30521e-14  -0.207974     2.66454e-15   0.0848902   -0.149153   -8.32667e-16   0.0712921   -0.0301968\n -0.00234782   0.00840544  -0.098969    -9.6867e-15   -0.0847116   0.082999    1.51129e-14   0.274424     3.60822e-15   0.575786    -0.61385    -2.72005e-15   0.353775    -0.259338\n -0.00237613   0.00294196   0.00143189   5.56152e-15   0.0427486   0.0110863  -3.72619e-15  -0.0663108    9.50628e-16   0.00167015   0.0832916   2.91434e-15  -0.448519    -0.8863\n  0.00363555   0.0455298   -0.133824    -0.332825     -0.290831   -0.057199   -0.527627     -0.588225    -0.332816     -0.0472302   -0.18528    -0.00844536    0.0915588   -0.0346434\n  0.00195478   0.0150664    0.0206752   -0.0642658    -0.0638689  -0.0250518   0.0999631    -0.012992    -0.111668      0.0393523    0.423534    0.688046      0.513839    -0.222499\n  0.00195478   0.0150664    0.0206752    0.0642658    -0.0638689  -0.0250518  -0.0999631    -0.012992     0.111668      0.0393523    0.423534   -0.688046      0.513839    -0.222499\n  0.00363555   0.0455298   -0.133824     0.332825     -0.290831   -0.057199    0.527627     -0.588225     0.332816     -0.0472302   -0.18528     0.00844536    0.0915588   -0.0346434","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"If you need the full spectrum, but would like to use less memory, consider using the in-place eigen!.","category":"page"},{"location":"generated/exact-example.html#Iterative-sparse-solvers","page":"Exact diagonalization","title":"Iterative sparse solvers","text":"","category":"section"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"For larger Hamiltonians, it is better to use an iterative solver. There are several options. We will look at eigs from Arpack.jl and eigsolve from KrylovKit.jl.","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"Let's start with Arpack's eigs. It is important to set the nev and which keyword arguments. nev sets the number of eigenpairs to find. which should in most cases be set to :SR, which will find the eigenvalues with the smallest real part.","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"using Arpack\n\nnum_eigvals = 3\n\nsparse_matrix = sparse(ham)\nvals_ar, vecs_ar = eigs(sparse_matrix; which=:SR, nev=num_eigvals)\nvals_ar","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"3-element Vector{Float64}:\n -6.979863998321619\n -3.3631242916133606\n -0.7590191922770747","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"Using KrylovKit's eigsolve is similar, but the nev and which are given as positional arguments. Note that KrylovKit may sometimes return more than nev eigenpairs if it happens to find them.","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"using KrylovKit\n\nvals_kk, vecs_kk = eigsolve(sparse_matrix, num_eigvals, :SR)\nvals_kk","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"14-element Vector{Float64}:\n -6.979863998321612\n -3.3631242916133672\n -0.7590191922770906\n  0.1358418221962232\n  0.15789998694607377\n  0.8767114411781307\n  1.5305929970973393\n  1.5835732611867357\n  3.07287033032585\n  3.1256726539518516\n  4.862107221562173\n  6.260694850380596\n  6.402671211183109\n  9.093371706203957","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"Both solvers use variants of the Lanczos algorithm for Hermitian matrices and the Arnoldi algorithm for non-Hermitian ones. These may in some cases miss degenerate eigenpairs.","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"If diagonalization takes too long, you can reduce the tolerance by setting the tol keyword argument to eigs or eigsolve. Using drastically lower tolerances than the default can still produce good results in practice. This, however, should be checked on a case-by-case basis.","category":"page"},{"location":"generated/exact-example.html#The-matrix-free-method","page":"Exact diagonalization","title":"The matrix-free method","text":"","category":"section"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"KrylovKit's eigsolve function is implemented in a way that does not require the linear operator and vector to be Julia arrays. Rimu leverages this functionality, which allows diagonalising Hamiltonians without ever needing to construct the matrix - all matrix elements are generated on the fly.","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"While this method is by far the slowest of the ones discussed, it also uses drastically less memory. This allows us to diagonalise much larger Hamiltonians.","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"To use this method, you first need a starting vector. It's best to use PDVec here as it leverages threading during the diagonalization.","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"dvec = PDVec(add => 1.0)","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"1-element PDVec: style = IsDeterministic{Float64}()\n  fs\"|0 0 4 0 0⟩\" => 1.0","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"Then, pass that vector and the Hamiltonian to eigsolve.","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"vals_mf, vecs_mf = eigsolve(ham, dvec, num_eigvals, :SR; issymmetric=true)\nvals_mf","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"10-element Vector{Float64}:\n -6.979863998321612\n -3.3631242916133406\n -0.7590191922770728\n  0.1578999869460862\n  0.8767114411781503\n  1.5835732611867401\n  3.125672653951839\n  4.862107221562172\n  6.402671211183112\n  9.093371706203953","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"Keep in mind that if an eigenvector is orthogonal to dvec, KrylovKit will miss it. Consider the following example:","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"eigsolve(ham, vecs_mf[2], num_eigvals, :SR, issymmetric=true)[1]","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"1-element Vector{Float64}:\n -3.3631242916133606","category":"page"},{"location":"generated/exact-example.html#Reducing-matrix-size-with-symmetries","page":"Exact diagonalization","title":"Reducing matrix size with symmetries","text":"","category":"section"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"As these matrices tend to get large quickly, memory is usually the bottleneck.  There are currently two methods implemented to reduce the matrix size, ParitySymmetry and TimeReversalSymmetry. These symmetries work by performing a unitary transformation on the Hamiltonian which causes it to become block-diagonal. When building a matrix from a block-diagonal Hamiltonian, only the block that contains the starting address is constructed.","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"You should only use these where the relevant symmetries actually apply - no checks are performed to make sure they do. There is also currently no way of using both at the same time. Please consult the documentation for a more in-depth description of these options.","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"The Hamiltonian presented in this example is compatible with ParitySymmetry. Let's see how the matrix size is reduced when applying it.","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"size(sparse(ham))","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"(14, 14)","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"size(sparse(ParitySymmetry(ham)))","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"(10, 10)","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"In this small example, the size reduction is modest, but for larger systems, you can expect to reduce the dimension of the matrix by about half.","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"all_eigs = eigvals(Matrix(ham))\neven_eigs = eigvals(Matrix(ParitySymmetry(ham)))","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"10-element Vector{Float64}:\n -6.979863998321621\n -3.3631242916133637\n -0.759019192277076\n  0.1578999869460802\n  0.8767114411781437\n  1.5835732611867417\n  3.125672653951844\n  4.862107221562179\n  6.402671211183117\n  9.093371706203957","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"The eigenvalues of the transformed Hamiltonian are a subset of the full spectrum. To get the other half, we can pass the even=false keyword argument to ParitySymmetry. When doing that, we need to make sure the starting address of the Hamiltonian is not symmetric under reversal:","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"add_odd = BoseFS(M, cld(M, 2) => N - 3, cld(M, 2) - 1 => 2, cld(M, 2) + 2 => 1)","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"BoseFS{4,5}(0, 2, 1, 0, 1)","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"odd_eigs = eigvals(Matrix(ParitySymmetry(HubbardMom1D(add_odd); even=false)))","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"4-element Vector{Float64}:\n 0.135841822196218\n 1.530592997097328\n 3.0728703303258613\n 6.260694850380591","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"Now, let's check that combining the two sets of eigenvalues indeed recovers the whole spectrum.","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"sort([even_eigs; odd_eigs]) ≈ all_eigs","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"true","category":"page"},{"location":"generated/exact-example.html#Computing-observables","page":"Exact diagonalization","title":"Computing observables","text":"","category":"section"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"Since building a matrix from an operator only builds the part that is reachable from the starting address, we need to use a different approach when computing observables.","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"To demonstrate this, we will use the DensityMatrixDiagonal operator, which in this case will give the momentum density.","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"The idea here is to construct a PDVec from the computed eigenvector and use it directly with the operator.","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"dvec = PDVec(zip(bsr.basis, eigvecs(Matrix(ham))[:, 1]))","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"14-element PDVec: style = IsDeterministic{Float64}()\n  fs\"|1 0 1 2 0⟩\" => -0.0214153\n  fs\"|2 0 0 0 2⟩\" => -0.00237613\n  fs\"|0 0 4 0 0⟩\" => -0.980348\n  fs\"|0 0 0 3 1⟩\" => 0.00363555\n  fs\"|2 1 1 0 0⟩\" => -0.0119687\n  fs\"|1 0 2 0 1⟩\" => 0.0768085\n  fs\"|1 3 0 0 0⟩\" => 0.00363555\n  fs\"|0 1 2 1 0⟩\" => 0.177701\n  fs\"|0 0 1 1 2⟩\" => -0.0119687\n  fs\"|3 0 0 1 0⟩\" => 0.00195478\n  fs\"|0 2 0 2 0⟩\" => -0.0138439\n  fs\"|1 1 0 1 1⟩\" => -0.00234782\n  fs\"|0 1 0 0 3⟩\" => 0.00195478\n  fs\"|0 2 1 0 1⟩\" => -0.0214153","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"The eigenvectors these methods produce are normalized, hence we can use the three-argument dot to compute the values of observables. Here we are computing the single particle momentum density distribution, which is just the diagonal of the single-particle density matrix in momentum space.","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"[dot(dvec, DensityMatrixDiagonal(i), dvec) for i in 1:M]","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"5-element Vector{Float64}:\n 0.0066861389450877905\n 0.033070399772041625\n 3.9204869225657406\n 0.03307039977204162\n 0.006686138945087839","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"This page was generated using Literate.jl.","category":"page"},{"location":"rimuio.html#Module-RimuIO","page":"I/O","title":"Module RimuIO","text":"","category":"section"},{"location":"rimuio.html","page":"I/O","title":"I/O","text":"Modules = [RimuIO]","category":"page"},{"location":"rimuio.html#Rimu.RimuIO","page":"I/O","title":"Rimu.RimuIO","text":"Module to provide file input and output functionality for Rimu. Provides convenience functions:\n\nRimuIO.save_df(filename, df::DataFrame) Save dataframe in Arrow format.\nRimuIO.load_df(filename) Load Arrow file into dataframe.\n\n\n\n\n\n","category":"module"},{"location":"rimuio.html#Rimu.RimuIO.load_df-Tuple{Any}","page":"I/O","title":"Rimu.RimuIO.load_df","text":"RimuIO.load_df(filename; propagate_metadata = true, add_filename = true) -> DataFrame\n\nLoad Arrow file into DataFrame. Optionally propagate metadata to DataFrame and add the file name as metadata.\n\nSee also RimuIO.save_df.\n\n\n\n\n\n","category":"method"},{"location":"rimuio.html#Rimu.RimuIO.save_df-Tuple{Any, DataFrame}","page":"I/O","title":"Rimu.RimuIO.save_df","text":"RimuIO.save_df(filename, df::DataFrame; kwargs...)\n\nSave dataframe in Arrow format.\n\nKeyword arguments are passed on to Arrow.write. Compression is enabled by default for large DataFrames (over 10,000 rows).\n\nTable-level metadata of the DataFrame is saved as Arrow metadata (with String value) unless overwritten with the keyword argument metadata.\n\nSee also RimuIO.load_df.\n\n\n\n\n\n","category":"method"},{"location":"rimuio.html#Index","page":"I/O","title":"Index","text":"","category":"section"},{"location":"rimuio.html","page":"I/O","title":"I/O","text":"Pages   = [\"rimuio.md\"]","category":"page"},{"location":"hamiltonians.html#Module-Hamiltonians","page":"Hamiltonians","title":"Module Hamiltonians","text":"","category":"section"},{"location":"hamiltonians.html","page":"Hamiltonians","title":"Hamiltonians","text":"This module contains definitions of Hamiltonians, in particular specific physical models of interest. These are organised by means of an interface around the abstract type AbstractHamiltonian, in the spirit of the AbstractArray interface as discussed in the Julia Documentation.","category":"page"},{"location":"hamiltonians.html","page":"Hamiltonians","title":"Hamiltonians","text":"The Hamiltonians can be used for projector quantum Monte Carlo with ProjectorMonteCarloProblem or for exact diagonalization with ExactDiagonalizationProblem, see Exact Diagonalization.","category":"page"},{"location":"hamiltonians.html","page":"Hamiltonians","title":"Hamiltonians","text":"Hamiltonians","category":"page"},{"location":"hamiltonians.html#Rimu.Hamiltonians","page":"Hamiltonians","title":"Rimu.Hamiltonians","text":"The module Rimu.Hamiltonians defines types and functions for working with Hamiltonians.\n\nExported concrete Hamiltonian types\n\nReal space Hubbard models\n\nHubbardReal1D\nBoseHubbardReal1D2C\nHubbardReal1DEP\nHubbardRealSpace\nExtendedHubbardReal1D\n\nMomentum space Hubbard models\n\nHubbardMom1D\nBoseHubbardMom1D2C\nHubbardMom1DEP\n\nHarmonic oscillator models\n\nHOCartesianContactInteractions\nHOCartesianEnergyConservedPerDim\nHOCartesianCentralImpurity\n\nOther\n\nFroehlichPolaron\nMatrixHamiltonian\nTranscorrelated1D\n\nWrappers\n\nGutzwillerSampling\nGuidingVectorSampling\nParitySymmetry\nTimeReversalSymmetry\nStoquastic\n\nObservables\n\nParticleNumberOperator\nG2RealCorrelator\nG2RealSpace\nG2MomCorrelator\nDensityMatrixDiagonal\nSingleParticleExcitation\nTwoParticleExcitation\nMomentum\nAxialAngularMomentumHO\n\nInterface for working with Hamiltonians\n\nAbstractHamiltonian: defined in the module Interfaces\n\n\n\n\n\n","category":"module"},{"location":"hamiltonians.html#Model-Hamiltonians","page":"Hamiltonians","title":"Model Hamiltonians","text":"","category":"section"},{"location":"hamiltonians.html","page":"Hamiltonians","title":"Hamiltonians","text":"Here is a list of fully implemented model Hamiltonians. There are several variants of the Hubbard model in real and momentum space, as well as some other models.","category":"page"},{"location":"hamiltonians.html#Real-space-Hubbard-models","page":"Hamiltonians","title":"Real space Hubbard models","text":"","category":"section"},{"location":"hamiltonians.html","page":"Hamiltonians","title":"Hamiltonians","text":"HubbardReal1D\nBoseHubbardReal1D2C\nHubbardReal1DEP\nHubbardRealSpace\nExtendedHubbardReal1D","category":"page"},{"location":"hamiltonians.html#Rimu.Hamiltonians.HubbardReal1D","page":"Hamiltonians","title":"Rimu.Hamiltonians.HubbardReal1D","text":"HubbardReal1D(address; u=1.0, t=1.0)\n\nImplements a one-dimensional Bose Hubbard chain in real space.\n\nhatH = -t sum_langle ijrangle a_i^ a_j + fracu2sum_i n_i (n_i-1)\n\nArguments\n\naddress: the starting address, defines number of particles and sites.\nu: the interaction parameter.\nt: the hopping strength.\n\nSee also\n\nHubbardMom1D\nExtendedHubbardReal1D\n\n\n\n\n\n","category":"type"},{"location":"hamiltonians.html#Rimu.Hamiltonians.BoseHubbardReal1D2C","page":"Hamiltonians","title":"Rimu.Hamiltonians.BoseHubbardReal1D2C","text":"BoseHubbardReal1D2C(address::BoseFS2C; ua=1.0, ub=1.0, ta=1.0, tb=1.0, v=1.0)\n\nImplements a two-component one-dimensional Bose Hubbard chain in real space.\n\nhatH = hatH_a + hatH_b + Vsum_i n_a_in_b_i\n\nArguments\n\naddress: the starting address, defines number of particles and sites.\nua: the on-site interaction parameter parameter for Hamiltonian a.\nub: the on-site interaction parameter parameter for Hamiltonian b.\nta: the hopping strength for Hamiltonian a.\ntb: the hopping strength for Hamiltonian b.\nv: the inter-species interaction parameter V.\n\nSee also\n\nHubbardReal1D\nBoseHubbardMom1D2C\n\n\n\n\n\n","category":"type"},{"location":"hamiltonians.html#Rimu.Hamiltonians.HubbardReal1DEP","page":"Hamiltonians","title":"Rimu.Hamiltonians.HubbardReal1DEP","text":"HubbardReal1DEP(address; u=1.0, t=1.0, v_ho=1.0)\n\nImplements a one-dimensional Bose Hubbard chain in real space with external potential.\n\nhatH = -t sum_langle ijrangle a_i^ a_j + sum_i ϵ_i n_i\n+ fracu2sum_i n_i (n_i-1)\n\nArguments\n\naddress: the starting address, defines number of particles and sites.\nu: the interaction parameter.\nt: the hopping strength.\nv_ho: strength of the external harmonic oscillator potential ϵ_i = v_ho i^2.\n\nThe first index is i=0 and the maximum of the potential occurs in the centre of the lattice.\n\nSee also\n\nHubbardReal1D\nHubbardMom1D\nExtendedHubbardReal1D\n\n\n\n\n\n","category":"type"},{"location":"hamiltonians.html#Rimu.Hamiltonians.HubbardRealSpace","page":"Hamiltonians","title":"Rimu.Hamiltonians.HubbardRealSpace","text":"HubbardRealSpace(address; geometry=PeriodicBoundaries(M,), t=ones(C), u=ones(C, C), v=zeros(C, D))\n\nHubbard model in real space. Supports single or multi-component Fock state addresses (with C components) and various (rectangular) lattice geometries in D dimensions.\n\n  hatH = -sum_langle ijrangleσ t_σ a^_iσ a_jσ +\n  frac12sum_iσ u_σσ n_iσ (n_iσ - 1) +\n  sum_iστu_στ n_iσ n_iτ\n\nIf v is nonzero then this calculates hatH + hatV by adding the harmonic trapping potential\n\n    hatV = sum_iσd v_σd x_di^2 n_iσ\n\nwhere x_di is the distance of site i from the centre of the trap along dimension d.\n\nAddress types\n\nBoseFS: Single-component Bose-Hubbard model.\nFermiFS: Single-component Fermi-Hubbard model.\nCompositeFS: For multi-component models.\n\nNote that a single component of fermions cannot interact with itself. A warning is produced if addressis incompatible with the interaction parameters u.\n\nGeometries\n\nImplemented CubicGrids for keyword geometry\n\nPeriodicBoundaries\nHardwallBoundaries\nLadderBoundaries\n\nDefault is geometry=PeriodicBoundaries(M,), i.e. a one-dimensional lattice with the number of sites M inferred from the number of modes in address.\n\nOther parameters\n\nt: the hopping strengths. Must be a vector of length C. The i-th element of the vector corresponds to the hopping strength of the i-th component.\nu: the on-site interaction parameters. Must be a symmetric matrix. u[i, j] corresponds to the interaction between the i-th and j-th component. u[i, i] corresponds to the interaction of a component with itself. Note that u[i,i] must be zero for fermionic components.\nv: the trap potential strengths. Must be a matrix of size C × D. v[i,j] is the strength of the trap for component i in the jth dimension.\n\n\n\n\n\n","category":"type"},{"location":"hamiltonians.html#Rimu.Hamiltonians.ExtendedHubbardReal1D","page":"Hamiltonians","title":"Rimu.Hamiltonians.ExtendedHubbardReal1D","text":"ExtendedHubbardReal1D(address; u=1.0, v=1.0, t=1.0, boundary_condition=:periodic)\n\nImplements the extended Hubbard model on a one-dimensional chain in real space. This Hamiltonian can be either real or complex, depending on the choice of boundary_condition.\n\nhatH = -t sum_langle ijrangle a_i^ a_j + fracu2sum_i n_i (n_i-1) +\nv sum_langle ijrangle n_i n_j\n\nArguments\n\naddress: the starting address.\nu: on-site interaction parameter\nv: the next-neighbor interaction\nt: the hopping strength\nboundary_condition The following values are supported:\n:periodic: usual period boundary condition realising a ring geometry.\n:hard_wall: hopping over the boundary is not allowed.\n:twisted: like :periodic but hopping over the boundary incurs an additional factor of -1.\nθ <: Number: like :periodic and :twisted but hopping over the boundary incurs a factor exp(iθ) for a hop to the right and exp(iθ) for a hop to the left. With this choice the Hamiltonian will have a complex eltype whereas otherwise the eltype is determined by the type of the parameters t, u, and v.\n\nSee also HubbardRealSpace.\n\n\n\n\n\n","category":"type"},{"location":"hamiltonians.html#Momentum-space-Hubbard-models","page":"Hamiltonians","title":"Momentum space Hubbard models","text":"","category":"section"},{"location":"hamiltonians.html","page":"Hamiltonians","title":"Hamiltonians","text":"HubbardMom1D\nBoseHubbardMom1D2C\nHubbardMom1DEP","category":"page"},{"location":"hamiltonians.html#Rimu.Hamiltonians.HubbardMom1D","page":"Hamiltonians","title":"Rimu.Hamiltonians.HubbardMom1D","text":"HubbardMom1D(address; u=1.0, t=1.0, dispersion=hubbard_dispersion)\n\nImplements a one-dimensional Bose Hubbard chain in momentum space.\n\nhatH =  sum_k ϵ_k n_k + fracuMsum_kpqr a^_r a^_q a_p a_k δ_r+qp+k\n\nArguments\n\naddress: the starting address, defines number of particles and sites.\nu: the interaction parameter.\nt: the hopping strength.\ndispersion: defines ϵ_k =t*dispersion(k)\nhubbard_dispersion: ϵ_k = -2t cos(k)\ncontinuum_dispersion: ϵ_k = tk^2\n\nSee also\n\nHubbardReal1D\nExtendedHubbardReal1D\n\n\n\n\n\n","category":"type"},{"location":"hamiltonians.html#Rimu.Hamiltonians.BoseHubbardMom1D2C","page":"Hamiltonians","title":"Rimu.Hamiltonians.BoseHubbardMom1D2C","text":"BoseHubbardMom1D2C(address::BoseFS2C; ua=1.0, ub=1.0, ta=1.0, tb=1.0, v=1.0, kwargs...)\n\nImplements a one-dimensional Bose Hubbard chain in momentum space with a two-component Bose gas.\n\nhatH = hatH_a + hatH_b + fracVMsum_kpqr b^_r a^_q b_p a_k δ_r+qp+k\n\nArguments\n\naddress: the starting address.\nua: the u parameter for Hamiltonian a.\nub: the u parameter for Hamiltonian b.\nta: the t parameter for Hamiltonian a.\ntb: the t parameter for Hamiltonian b.\nv: the inter-species interaction parameter V.\n\nFurther keyword arguments are passed on to the constructor of HubbardMom1D.\n\nSee also\n\nBoseFS2C\nBoseHubbardReal1D2C\n\n\n\n\n\n","category":"type"},{"location":"hamiltonians.html#Rimu.Hamiltonians.HubbardMom1DEP","page":"Hamiltonians","title":"Rimu.Hamiltonians.HubbardMom1DEP","text":"HubbardMom1DEP(address; u=1.0, t=1.0, v_ho=1.0, dispersion=hubbard_dispersion)\n\nImplements a one-dimensional Bose Hubbard chain in momentum space with harmonic external potential.\n\nH = sum_k ϵ_k n_k + fracuMsum_kpqr a^_r a^_q a_p a_k δ_r+qp+k\n            + V_mathrmho \n\nwhere\n\nbeginaligned\nV_mathrmho  = frac1M sum_pq  mathrmDFTV_ext_p-q \n                    a^_p a_q \nV_mathrmext(x) = v_mathrmho x^2 \nendaligned\n\nis an external harmonic potential in momentum space, mathrmDFT_k is a discrete Fourier transform performed by fft()[k%M + 1], and M == num_modes(address).\n\nArguments\n\naddress: the starting address, defines number of particles and sites.\nu: the interaction parameter.\nt: the hopping strength.\ndispersion: defines ϵ_k =t*dispersion(k)\nhubbard_dispersion: ϵ_k = -2t cos(k)\ncontinuum_dispersion: ϵ_k = tk^2\nv_ho: strength of the external harmonic oscillator potential v_mathrmho.\n\nSee also HubbardMom1D, HubbardReal1DEP, Transcorrelated1D, Hamiltonians.\n\n\n\n\n\n","category":"type"},{"location":"hamiltonians.html#Harmonic-oscillator-models","page":"Hamiltonians","title":"Harmonic oscillator models","text":"","category":"section"},{"location":"hamiltonians.html","page":"Hamiltonians","title":"Hamiltonians","text":"HOCartesianContactInteractions\nHOCartesianEnergyConservedPerDim\nHOCartesianCentralImpurity","category":"page"},{"location":"hamiltonians.html#Rimu.Hamiltonians.HOCartesianContactInteractions","page":"Hamiltonians","title":"Rimu.Hamiltonians.HOCartesianContactInteractions","text":"HOCartesianContactInteractions(addr; S, η, g = 1.0, interaction_only = false, block_by_level = true)\n\nImplements a bosonic harmonic oscillator in Cartesian basis with contact interactions\n\nhatH = sum_i epsilon_mathbfi n_mathbfi + fracg2sum_mathbfijkl\n    V_mathbfijkl a^_mathbfi a^_mathbfj a_mathbfk a_mathbfl\n\nFor a D-dimensional harmonic oscillator indices mathbfi mathbfj ldots are D-tuples. The energy scale is defined by the first dimension i.e. hbar omega_x so that single particle energies are\n\n    fracepsilon_mathbfihbar omega_x = (i_x + 12) + eta_y (i_y+12) + ldots\n\nThe factors eta_y ldots allow for anisotropic trapping geometries and are assumed to be greater than 1 so that omega_x is the smallest trapping frequency.\n\nBy default the offdiagonal elements due to the interactions are consistent with first-order degenerate perturbation theory\n\n    V_mathbfijkl = delta_epsilon_mathbfi + epsilon_mathbfj\n        ^epsilon_mathbfk + epsilon_mathbfl\n        prod_d in x yldots mathcalI(i_dj_dk_dl_d)\n\nwhere the delta function indicates that the total noninteracting energy is conserved meaning all states with the same noninteracting energy are connected by this interaction and the Hamiltonian blocks according to noninteracting energy levels. Setting block_by_level = false will disable this restriction and allow coupling between basis states of any noninteracting energy level, leading to many more offdiagonals and fewer but larger blocks (the blocks are still distinguished by parity of basis states). Alternatively, see HOCartesianEnergyConservedPerDim for a model with the stronger restriction that conserves energy separately per spatial dimension. The integral mathcalI(abcd) is of four one dimensional harmonic oscillator basis functions, implemented in four_oscillator_integral_general.\n\nArguments\n\naddr: the starting address, defines number of particles and total number of modes.\nS: Tuple of the number of levels in each dimension, including the groundstate. The   allowed couplings between states is defined by the aspect ratio of S .- 1. Defaults   to a 1D spectrum with number of levels matching modes of addr. Will be sorted to make   the first dimension the largest.\nη: Define a custom aspect ratio for the trapping potential strengths, instead of deriving   from S .- 1. This will only affect the single particle energy scale and not the   interactions. The values are always scaled relative to the first dimension, which sets   the energy scale of the system, hbaromega_x.\ng: the (isotropic) bare interaction parameter. The value of g is assumed   to be in trap units.\ninteraction_only: if set to true then the noninteracting single-particle terms are   ignored. Useful if only energy shifts due to interactions are required.\nblock_by_level: if set to false will allow the interactions to couple all states without   comparing their noninteracting energy.\n\nwarning: Warning\nnum_offdiagonals is a bad estimate for this Hamiltonian. Take care when building a matrix or using QMC methods. Use get_all_blocks first then pass option col_hint = block_size to BasisSetRep to safely build the matrix.\n\n\n\n\n\n","category":"type"},{"location":"hamiltonians.html#Rimu.Hamiltonians.HOCartesianEnergyConservedPerDim","page":"Hamiltonians","title":"Rimu.Hamiltonians.HOCartesianEnergyConservedPerDim","text":"HOCartesianEnergyConservedPerDim(addr; S, η, g = 1.0, interaction_only = false)\n\nImplements a bosonic harmonic oscillator in Cartesian basis with contact interactions\n\nhatH = sum_i ϵ_i n_i + fracg2sum_ijkl V_ijkl a^_i a^_j a_k a_l\n\nwith the additional restriction that the interactions only couple states with the same energy in each dimension separately. See HOCartesianContactInteractions for a model that conserves total energy.\n\nFor a D-dimensional harmonic oscillator indices mathbfi mathbfj ldots are D-tuples. The energy scale is defined by the first dimension i.e. hbar omega_x so that single particle energies are\n\n    fracepsilon_mathbfihbar omega_x = (i_x + 12) + eta_y (i_y+12) + ldots\n\nThe factors eta_y ldots allow for anisotropic trapping geometries and are assumed to be greater than 1 so that omega_x is the smallest trapping frequency.\n\nMatrix elements V_mathbfijkl are for a contact interaction calculated in this basis using first-order degenerate perturbation theory.\n\n    V_mathbfijkl = prod_d in x yldots mathcalI(i_dj_dk_dl_d)\n        delta_i_d + j_d^k_d + l_d\n\nwhere the delta-function indicates that the noninteracting energy is conserved along each dimension. The integral mathcalI(abcd) is of four one dimensional harmonic oscillator basis functions, see four_oscillator_integral_general, with the additional restriction that energy is conserved in each dimension.\n\nArguments\n\naddr: the starting address, defines number of particles and total number of modes.\nS: Tuple of the number of levels in each dimension, including the groundstate. Defaults   to a 1D spectrum with number of levels matching modes of addr. Will be sorted to   make the first dimension the largest.\nη: Define a custom aspect ratio for the trapping potential strengths, instead of deriving   from S .- 1. The values are always scaled relative to the first dimension, which sets   the energy scale of the system, hbaromega_x.\ng: the (isotropic) interparticle interaction parameter. The value of g is assumed   to be in trap units.\ninteraction_only: if set to true then the noninteracting single-particle terms are   ignored. Useful if only energy shifts due to interactions are required.\n\n\n\n\n\n","category":"type"},{"location":"hamiltonians.html#Rimu.Hamiltonians.HOCartesianCentralImpurity","page":"Hamiltonians","title":"Rimu.Hamiltonians.HOCartesianCentralImpurity","text":"HOCartesianCentralImpurity(addr; kwargs...)\n\nHamiltonian of non-interacting particles in an arbitrary harmonic trap with a delta-function potential at the centre, with strength g,\n\nhatH_mathrmrel = sum_mathbfi ϵ_mathbfi n_mathbfi\n    + gsum_mathbfij V_mathbfij a^_mathbfi a_mathbfj\n\nFor a D-dimensional harmonic oscillator indices mathbfi mathbfj ldots are D-tuples. The energy scale is defined by the first dimension i.e. hbar omega_x so that single particle energies are\n\n    fracepsilon_mathbfihbar omega_x = (i_x + 12) + eta_y (i_y+12) + ldots\n\nThe factors eta_y ldots allow for anisotropic trapping geometries and are assumed to be greater than 1 so that omega_x is the smallest trapping frequency.\n\nMatrix elements V_mathbfij are for a delta function potential calculated in this basis\n\n    V_mathbfij = prod_d in x yldots psi_i_d(0) psi_j_d(0)\n\nOnly even parity states feel this impurity, so all i_d are even. Note that the matrix representation of this Hamiltonian for a single particle is completely dense in the even-parity subspace.\n\nArguments\n\naddr: the starting address, defines number of particles and total number of modes.\nmax_nx = num_modes(addr) - 1: the maximum harmonic oscillator index number in the x-dimension.   Must be even. Index number for the harmonic oscillator groundstate is 0.\nηs = (): a tuple of aspect ratios for the remaining dimensions (η_y, ...). Should be empty   for a 1D trap or contain values greater than 1.0. The maximum index   in other dimensions will be the largest even number less than M/η_y.\nS = nothing: Instead of max_nx, manually set the number of levels in each dimension,   including the groundstate. Must be a Tuple of Ints.\ng = 1.0: the strength of the delta impurity in (x-dimension) trap units.\nimpurity_only=false: if set to true then the trap energy terms are ignored. Useful if   only energy shifts due to the impurity are required.\n\nwarning: Warning\nDue to use of `SpecialFunctions` with large arguments the matrix representation of\nthis Hamiltonian may not be strictly symmetric, but is approximately symmetric within\nmachine precision.\n\nSee also HOCartesianContactInteractions andHOCartesianEnergyConservedPerDim.\n\n\n\n\n\n","category":"type"},{"location":"hamiltonians.html#Other","page":"Hamiltonians","title":"Other","text":"","category":"section"},{"location":"hamiltonians.html","page":"Hamiltonians","title":"Hamiltonians","text":"MatrixHamiltonian\nTranscorrelated1D\nFroehlichPolaron","category":"page"},{"location":"hamiltonians.html#Rimu.Hamiltonians.MatrixHamiltonian","page":"Hamiltonians","title":"Rimu.Hamiltonians.MatrixHamiltonian","text":"MatrixHamiltonian(\n    mat::AbstractMatrix{T};\n    starting_address::Int = starting_address(mat)\n) <: AbstractHamiltonian{T}\n\nWrap an abstract matrix mat as an AbstractHamiltonian object. Works with stochastic methods of ProjectorMonteCarloProblem() and DVec. Optionally, a valid index can be provided as the starting_address.\n\nSpecialised methods are implemented for sparse matrices of type AbstractSparseMatrixCSC. One based indexing is required for the matrix mat.\n\n\n\n\n\n","category":"type"},{"location":"hamiltonians.html#Rimu.Hamiltonians.Transcorrelated1D","page":"Hamiltonians","title":"Rimu.Hamiltonians.Transcorrelated1D","text":"Transcorrelated1D(address; t=1.0, v=1.0, v_ho=0.0, cutoff=1, three_body_term=true)\n\nImplements a transcorrelated Hamiltonian for contact interactions in one dimensional momentum space from Jeszenski et al. (2018). Currently limited to two component fermionic addresses.\n\nbeginaligned\n\ntildeH = t sum_kσk^2 n_kσ \n    quad + sum_pqkσσ T_pqk a^_p-kσ a^_q+kσ a_qσ a_pσ \n    quad + sum_pqskkσσ Q_kka^_p-kσ a^_q+kσ a^_s+k-kσ\n                                       a_sσ a_qσ a_pσ \n    quad + V_mathrmho\nendaligned\n\nwhere\n\nbeginaligned\ntildeu(k) = begincases -frac2k^2 mathrmif  k  k_c\n0  mathrmotherwise\nendcases\n\n\nT_pqk = fracvM + frac2vMleftk^2tildeu(k)\n          - (p - q)ktildeu(k)right + frac2v^2tW(k)\nW(k) = frac1M^2sum_q (k - q)q tildeu(q)tildeu(k - q) \nQ_kl = -fracv^2t M^2k tildeu(k)ltildeu(l)\nendaligned\n\nArguments\n\naddress: The starting address, defines number of particles and sites.\nv: The interaction parameter.\nt: The kinetic energy prefactor.\nv_ho: Strength of the external harmonic oscillator potential V_mathrmho. See HubbardMom1DEP.\ncutoff controls k_c in equations above. Note: skipping generating off-diagonal elements below the cutoff is not implemented - zero-valued elements are returned instead.\nthree_body_term: If set to false, generating three body excitations is skipped. Note: when disabling three body terms, cutoff should be set to a higher value for best results.\n\nSee also\n\nHubbardMom1D\nHubbardMom1DEP\n\n\n\n\n\n","category":"type"},{"location":"hamiltonians.html#Rimu.Hamiltonians.FroehlichPolaron","page":"Hamiltonians","title":"Rimu.Hamiltonians.FroehlichPolaron","text":"FroehlichPolaron(address::OccupationNumberFS{M}; kwargs...) <: AbstractHamiltonian\n\nThe Froehlich polaron Hamiltonian for a 1D lattice with M momentum modes is given by\n\nH = (p_f - p)^2m + ωN - v Σₖ(aₖ^ + aₖ)\n\nwhere p is the total momentum, p_f = Σ_k k aₖ^ aₖ is the momentum operator for the bosons, and k part of the momentum lattice with separation 2πl. N is the number operator for the bosons.\n\nKeyword Arguments\n\np=0.0: the total momentum p.\nv=1.0: the coupling strength v.\nmass=1.0: the particle mass m.\nomega=1.0: the oscillation frequency of the phonons ω.\nl=1.0: the box size in real space l. Provides scale parameter of the momentum   lattice.\nmomentum_cutoff=nothing: the maximum boson momentum allowed for an address.\nmode_cutoff: the maximum number of bosons in each momentum mode. Defaults to the maximum   value supported by the address type OccupationNumberFS.\n\nExamples\n\njulia> fs = OccupationNumberFS(0,0,0)\nOccupationNumberFS{3, UInt8}(0, 0, 0)\n\njulia> ham = FroehlichPolaron(fs; v=0.5)\nFroehlichPolaron(fs\"|0 0 0⟩{8}\"; v=0.5, mass=1.0, omega=1.0, l=1.0, p=0.0, mode_cutoff=255)\n\njulia> dimension(ham)\n16777216\n\njulia> dimension(FroehlichPolaron(fs; v=0.5, mode_cutoff=5))\n216\n\nSee also OccupationNumberFS, dimension, AbstractHamiltonian.\n\n\n\n\n\n","category":"type"},{"location":"hamiltonians.html#Convenience-functions","page":"Hamiltonians","title":"Convenience functions","text":"","category":"section"},{"location":"hamiltonians.html","page":"Hamiltonians","title":"Hamiltonians","text":"rayleigh_quotient\nmomentum\nhubbard_dispersion\ncontinuum_dispersion\nshift_lattice\nshift_lattice_inv","category":"page"},{"location":"hamiltonians.html#Rimu.Hamiltonians.rayleigh_quotient","page":"Hamiltonians","title":"Rimu.Hamiltonians.rayleigh_quotient","text":"rayleigh_quotient(H, v)\n\nReturn the Rayleigh quotient of the linear operator H and the vector v:\n\nfrac v  H  v  vv \n\n\n\n\n\n","category":"function"},{"location":"hamiltonians.html#Rimu.Hamiltonians.momentum","page":"Hamiltonians","title":"Rimu.Hamiltonians.momentum","text":"momentum(ham::AbstractHamiltonian)\n\nMomentum as a linear operator in Fock space. Pass a Hamiltonian ham in order to convey information about the Fock basis. Returns an AbstractHamiltonian that represents the momentum operator.\n\nNote: momentum is currently only defined on HubbardMom1D.\n\nExample\n\njulia> add = BoseFS((1, 0, 2, 1, 2, 1, 1, 3));\n\n\njulia> ham = HubbardMom1D(add; u = 2.0, t = 1.0);\n\n\njulia> mom = momentum(ham);\n\n\njulia> diagonal_element(mom, add) # calculate the momentum of a single configuration\n-1.5707963267948966\n\njulia> v = DVec(add => 10; capacity=1000);\n\n\njulia> rayleigh_quotient(mom, v) # momentum expectation value for state vector `v`\n-1.5707963267948966\n\nPart of the AbstractHamiltonian interface.\n\n\n\n\n\n","category":"function"},{"location":"hamiltonians.html#Rimu.Hamiltonians.hubbard_dispersion","page":"Hamiltonians","title":"Rimu.Hamiltonians.hubbard_dispersion","text":"hubbard_dispersion(k)\n\nDispersion relation for HubbardMom1D. Returns -2cos(k).\n\nSee also continuum_dispersion.\n\n\n\n\n\n","category":"function"},{"location":"hamiltonians.html#Rimu.Hamiltonians.continuum_dispersion","page":"Hamiltonians","title":"Rimu.Hamiltonians.continuum_dispersion","text":"continuum_dispersion(k)\n\nDispersion relation for HubbardMom1D. Returns k^2.\n\nSee also hubbard_dispersion.\n\n\n\n\n\n","category":"function"},{"location":"hamiltonians.html#Rimu.Hamiltonians.shift_lattice","page":"Hamiltonians","title":"Rimu.Hamiltonians.shift_lattice","text":"shift_lattice(is)\n\nCircular shift contiguous indices is in interval [M÷2, M÷2) such that set starts with 0, where M=length(is).\n\nInverse operation: shift_lattice_inv. Used in HubbardReal1DEP and HubbardMom1DEP\n\n\n\n\n\n","category":"function"},{"location":"hamiltonians.html#Rimu.Hamiltonians.shift_lattice_inv","page":"Hamiltonians","title":"Rimu.Hamiltonians.shift_lattice_inv","text":"shift_lattice_inv(js)\n\nCircular shift indices starting with 0 into a contiguous set in interval [M÷2, M÷2), where M=length(js).\n\nInverse operation of shift_lattice. Used in HubbardReal1DEP and HubbardMom1DEP\n\n\n\n\n\n","category":"function"},{"location":"hamiltonians.html#Hamiltonian-wrappers","page":"Hamiltonians","title":"Hamiltonian wrappers","text":"","category":"section"},{"location":"hamiltonians.html","page":"Hamiltonians","title":"Hamiltonians","text":"The following Hamiltonians are constructed from an existing Hamiltonian instance and change its behaviour:","category":"page"},{"location":"hamiltonians.html","page":"Hamiltonians","title":"Hamiltonians","text":"GutzwillerSampling\nGuidingVectorSampling\nParitySymmetry\nTimeReversalSymmetry\nStoquastic","category":"page"},{"location":"hamiltonians.html#Rimu.Hamiltonians.GutzwillerSampling","page":"Hamiltonians","title":"Rimu.Hamiltonians.GutzwillerSampling","text":"GutzwillerSampling(::AbstractHamiltonian; g)\n\nWrapper over any AbstractHamiltonian that implements Gutzwiller sampling. In this importance sampling scheme the Hamiltonian is modified as follows\n\ntildeH_ij = H_ij e^-g(H_ii - H_jj) \n\nThis way off-diagonal spawns to higher-energy configurations are discouraged and spawns to lower-energy configurations encouraged for positive g.\n\nConstructor\n\nGutzwillerSampling(::AbstractHamiltonian, g)\nGutzwillerSampling(::AbstractHamiltonian; g)\n\nAfter construction, we can access the underlying Hamiltonian with G.hamiltonian and the g parameter with G.g.\n\nExample\n\njulia> H = HubbardMom1D(BoseFS(1,1,1); u=6.0, t=1.0)\nHubbardMom1D(fs\"|1 1 1⟩\"; u=6.0, t=1.0)\n\njulia> G = GutzwillerSampling(H, g=0.3)\nGutzwillerSampling(HubbardMom1D(fs\"|1 1 1⟩\"; u=6.0, t=1.0); g=0.3)\n\njulia> get_offdiagonal(H, BoseFS(2, 1, 0), 1)\n(BoseFS{3,3}(1, 0, 2), 2.0)\n\njulia> get_offdiagonal(G, BoseFS(2, 1, 0), 1)\n(BoseFS{3,3}(1, 0, 2), 0.8131393194811987)\n\nObservables\n\nTo calculate observables, pass the transformed Hamiltonian G to AllOverlaps with keyword argument transform=G.\n\n\n\n\n\n","category":"type"},{"location":"hamiltonians.html#Rimu.Hamiltonians.GuidingVectorSampling","page":"Hamiltonians","title":"Rimu.Hamiltonians.GuidingVectorSampling","text":"GuidingVectorSampling\n\nWrapper over any AbstractHamiltonian that implements guided vector a.k.a. guided wave function sampling. In this importance sampling scheme the Hamiltonian is modified as follows.\n\ntildeH_ij = v_i H_ij v_j^-1\n\nand where v is the guiding vector. v_i and v_j are also thresholded to avoid dividing by zero (see below).\n\nConstructors\n\nGuidingVectorSampling(::AbstractHamiltonian, vector, eps)\nGuidingVectorSampling(::AbstractHamiltonian; vector, eps)\n\neps is a thresholding parameter used to avoid dividing by zero; all values below eps are set to eps. It is recommended that eps is in the same value range as the guiding vector. The default value is set to eps=norm(v, Inf) * 1e-2\n\nAfter construction, we can access the underlying hamiltonian with G.hamiltonian, the eps parameter with G.eps, and the guiding vector with G.vector.\n\nExample\n\njulia> H = HubbardReal1D(BoseFS(1,1,1); u=6.0, t=1.0);\n\njulia> v = DVec(starting_address(H) => 10; capacity=1);\n\njulia> G = GuidingVectorSampling(H, v, 0.1);\n\njulia> get_offdiagonal(H, starting_address(H), 4)\n(BoseFS{3,3}(2, 0, 1), -1.4142135623730951)\n\njulia> get_offdiagonal(G, starting_address(G), 4)\n(BoseFS{3,3}(2, 0, 1), -0.014142135623730952)\n\nObservables\n\nTo calculate observables, pass the transformed Hamiltonian G to AllOverlaps with keyword argument transform=G.\n\n\n\n\n\n","category":"type"},{"location":"hamiltonians.html#Rimu.Hamiltonians.ParitySymmetry","page":"Hamiltonians","title":"Rimu.Hamiltonians.ParitySymmetry","text":"ParitySymmetry(ham::AbstractHamiltonian{T}; even=true) <: AbstractHamiltonian{T}\n\nImpose even or odd parity on all states and the Hamiltonian ham as controlled by the keyword argument even. Parity symmetry of the Hamiltonian is assumed. For some Hamiltonians, ParitySymmetry reduces the size of the Hilbert space by half.\n\nParitySymmetry performs a unitary transformation, leaving the eigenvalues unchanged and preserving the LOStructure. This is achieved by changing the basis set to states with defined parity. Effectively, a non-even address α is replaced by frac12(α  α) for even and odd parity, respectively, where ᾱ == reverse(α).\n\nNotes\n\nThis modifier currently only works on starting_addresss with an odd number of modes.\nFor odd parity, the starting_address of the underlying Hamiltonian cannot be symmetric.\nIf parity is not a symmetry of the Hamiltonian ham then the result is undefined.\nParitySymmetry works by modifying the offdiagonals iterator.\n\njulia> ham = HubbardReal1D(BoseFS(0,2,1))\nHubbardReal1D(fs\"|0 2 1⟩\"; u=1.0, t=1.0)\n\njulia> size(Matrix(ham))\n(10, 10)\n\njulia> size(Matrix(ParitySymmetry(ham)))\n(6, 6)\n\njulia> size(Matrix(ParitySymmetry(ham; odd=true)))\n(4, 4)\n\njulia> eigvals(Matrix(ham))[1] ≈ eigvals(Matrix(ParitySymmetry(ham)))[1]\ntrue\n\nSee also TimeReversalSymmetry.\n\n\n\n\n\n","category":"type"},{"location":"hamiltonians.html#Rimu.Hamiltonians.TimeReversalSymmetry","page":"Hamiltonians","title":"Rimu.Hamiltonians.TimeReversalSymmetry","text":"TimeReversalSymmetry(ham::AbstractHamiltonian{T}; even=true) <: AbstractHamiltonian{T}\n\nImpose even or odd time reversal on all states and the Hamiltonian ham as controlled by the keyword argument even. If time reversal is a symmetry of the Hamiltonian it will block (reducing Hilbert space dimension) preserving the eigenvalues and LOStructure.\n\nNotes\n\nThis modifier only works two component starting_addresses.\nFor odd time reversal symmetry, the starting_address of the underlying Hamiltonian must not be symmetric.\nIf time reversal is not a symmetry of the Hamiltonian ham then the result is undefined.\nTimeReversalSymmetry works by modifying the offdiagonals iterator.\n\njulia> ham = HubbardMom1D(FermiFS2C((1,0,1),(0,1,1)));\n\njulia> size(Matrix(ham))\n(3, 3)\n\njulia> size(Matrix(TimeReversalSymmetry(ham)))\n(2, 2)\n\njulia> size(Matrix(TimeReversalSymmetry(ham, even=false)))\n(1, 1)\n\njulia> eigvals(Matrix(TimeReversalSymmetry(ham)))[1] ≈ eigvals(Matrix(ham))[1]\ntrue\n\nSee also ParitySymmetry.\n\n\n\n\n\n","category":"type"},{"location":"hamiltonians.html#Rimu.Hamiltonians.Stoquastic","page":"Hamiltonians","title":"Rimu.Hamiltonians.Stoquastic","text":"Stoquastic(ham <: AbstractHamiltonian) <: AbstractHamiltonian\n\nA wrapper for an AbstractHamiltonian that replaces all off-diagonal matrix elements v by -abs(v), thus making the new Hamiltonian stoquastic.\n\nA stoquastic Hamiltonian does not have a Monte Carlo sign problem. For a hermitian ham the smallest eigenvalue of Stoquastic(ham) is ≤ the smallest eigenvalue of ham.\n\n\n\n\n\n","category":"type"},{"location":"hamiltonians.html#Observables","page":"Hamiltonians","title":"Observables","text":"","category":"section"},{"location":"hamiltonians.html","page":"Hamiltonians","title":"Hamiltonians","text":"Observables are AbstractOperators that represent a physical observable. Their expectation values can be sampled during a ProjectorMonteCarloProblem simulation by passing them into a suitable ReplicaStrategy, e.g.  AllOverlaps.  AbstractOperator is a supertype of  AbstractHamiltonian and has less stringent  requirements. Some observables are also AbstractHamiltonians.","category":"page"},{"location":"hamiltonians.html","page":"Hamiltonians","title":"Hamiltonians","text":"AbstractOperator\nParticleNumberOperator\nG2RealCorrelator\nG2RealSpace\nG2MomCorrelator\nSuperfluidCorrelator\nStringCorrelator\nDensityMatrixDiagonal\nSingleParticleExcitation\nTwoParticleExcitation\nMomentum\nAxialAngularMomentumHO","category":"page"},{"location":"hamiltonians.html#Rimu.Interfaces.AbstractOperator","page":"Hamiltonians","title":"Rimu.Interfaces.AbstractOperator","text":"AbstractOperator{T}\n\nSupertype that provides an interface for linear operators over a linear space with elements of type T (returned by eltype) and general (custom type) indices called 'addresses'.\n\nAbstractOperator instances operate on vectors of type AbstractDVec from the module DictVectors and work well with addresses of type AbstractFockAddress from the module BitStringAddresses.\n\nThe defining feature of an AbstractOperator is that it can be applied to a vector with mul!(y, op, x) and that three-way dot products can be calculated with dot(x, op, y).\n\nThe AbstractOperator type is useful for defining operators that are not necessarily Hamiltonians, but that can be used in the context of a ProjectorMonteCarloProblem as observable operators in a ReplicaStrategy, e.g. for defining correlation functions. In contrast to AbstractHamiltonians, AbstractOperators do not need to have a starting_address. Moreover, the eltype of an AbstractOperator can be a vector value.\n\nFor concrete implementations see Hamiltonians. In order to implement a Hamiltonian for use in ProjectorMonteCarloProblem or ExactDiagonalizationProblem use the type AbstractHamiltonian instead, which is a subtype of AbstractOperator.\n\nInterface\n\nBasic interface methods to implement:\n\nallows_address_type(op, type)\ndiagonal_element(op, address)\nnum_offdiagonals(op, address) and\nget_offdiagonal(op, address, chosen) or offdiagonals\n\nOptional additional methods to implement:\n\nVectorInterface.scalartype(op): defaults to eltype(eltype(op))\nLOStructure(::Type{typeof(op)}): defaults to AdjointUnknown\ndimension(op, addr): defaults to dimension of address space\n\nIn order to calculate observables efficiently, it may make sense to implement custom methods for Interfaces.dot_from_right(x, op, y) and LinearAlgebra.mul!(y, op, x).\n\nSee also AbstractHamiltonian, Interfaces.\n\n\n\n\n\n","category":"type"},{"location":"hamiltonians.html#Rimu.Hamiltonians.ParticleNumberOperator","page":"Hamiltonians","title":"Rimu.Hamiltonians.ParticleNumberOperator","text":"ParticleNumberOperator() <: AbstractOperator{Float64}\n\nThe number operator in Fock space. This operator is diagonal in the Fock basis and returns the number of particles in the Fock state. It works with any address type that is a subtype of AbstractFockAddress.\n\njulia> p = ExactDiagonalizationProblem(FroehlichPolaron(fs\"|0 0⟩{}\"; mode_cutoff=5, v=3));\n\njulia> gs = solve(p).vectors[1]; # normalised ground state vector\n\njulia> dot(gs, ParticleNumberOperator(), gs) # particle number expectation value\n2.8823297252925917\n\nSee also AbstractHamiltonian.\n\n\n\n\n\n","category":"type"},{"location":"hamiltonians.html#Rimu.Hamiltonians.G2RealCorrelator","page":"Hamiltonians","title":"Rimu.Hamiltonians.G2RealCorrelator","text":"G2RealCorrelator(d::Int) <: AbstractOperator{Float64}\n\nTwo-body operator for density-density correlation between sites separated by d with 0 ≤ d < M.\n\n    hatG^(2)(d) = frac1M sum_i^M hatn_i (hatn_i+d - delta_0d)\n\nAssumes a one-dimensional lattice with periodic boundary conditions where\n\n    hatG^(2)(-M2 leq d  0) = hatG^(2)(d)\n\n    hatG^(2)(M2  d  M) = hatG^(2)(M - d)\n\nand normalisation\n\n    sum_d=0^M-1 langle hatG^(2)(d) rangle = fracN (N-1)M\n\nFor multicomponent basis, calculates correlations between all particles equally, equivalent to stacking all components into a single Fock state.\n\nArguments\n\nd::Integer: distance between sites.\n\nSee also\n\nHubbardReal1D\nG2RealSpace\nG2MomCorrelator\nAbstractOperator\nAllOverlaps\n\n\n\n\n\n","category":"type"},{"location":"hamiltonians.html#Rimu.Hamiltonians.G2RealSpace","page":"Hamiltonians","title":"Rimu.Hamiltonians.G2RealSpace","text":"G2RealSpace(geometry::CubicGrid, σ=1, τ=1; sum_components=false) <: AbstractOperator{SArray}\n\nTwo-body operator for density-density correlation for all Displacements d in the specified geometry.\n\n    hatG^(2)_στ(d) = frac1M _i n_σi (n_τi+d - δ_0dδ_στ)\n\nFor multicomponent addresses, σ and τ control the components involved. Alternatively, sum_components can be set to true, which treats all particles as belonging to the same component.\n\nExamples\n\njulia> geom = CubicGrid(2, 2);\n\njulia> g2 = G2RealSpace(geom)\nG2RealSpace(CubicGrid((2, 2), (true, true)), 1,1)\n\njulia> diagonal_element(g2, BoseFS(2,0,1,1))\n2×2 StaticArraysCore.SMatrix{2, 2, Float64, 4} with indices SOneTo(2)×SOneTo(2):\n 0.5  1.0\n 0.5  1.0\n\njulia> g2_cross = G2RealSpace(geom, 1, 2)\nG2RealSpace(CubicGrid((2, 2), (true, true)), 1,2)\n\njulia> g2_sum = G2RealSpace(geom, sum_components=true)\nG2RealSpace(CubicGrid((2, 2), (true, true)); sum_components=true)\n\njulia> diagonal_element(g2, fs\"|⇅⋅↓↑⟩\")\n2×2 StaticArraysCore.SMatrix{2, 2, Float64, 4} with indices SOneTo(2)×SOneTo(2):\n 0.0  0.0\n 0.0  0.5\n\njulia> diagonal_element(g2_cross, fs\"|⇅⋅↓↑⟩\")\n2×2 StaticArraysCore.SMatrix{2, 2, Float64, 4} with indices SOneTo(2)×SOneTo(2):\n 0.25  0.25\n 0.25  0.25\n\njulia> diagonal_element(g2_sum, fs\"|⇅⋅↓↑⟩\")\n2×2 StaticArraysCore.SMatrix{2, 2, Float64, 4} with indices SOneTo(2)×SOneTo(2):\n 0.5  1.0\n 0.5  1.0\n\nSee also\n\nCubicGrid\nHubbardRealSpace\nG2RealCorrelator\nG2MomCorrelator\nAbstractOperator\nAllOverlaps\n\n\n\n\n\n","category":"type"},{"location":"hamiltonians.html#Rimu.Hamiltonians.G2MomCorrelator","page":"Hamiltonians","title":"Rimu.Hamiltonians.G2MomCorrelator","text":"G2MomCorrelator(d::Int,c=:cross) <: AbstractOperator{ComplexF64}\n\nTwo-body correlation operator representing the density-density correlation at distance d of a two component system in a momentum-space Fock-state basis. It returns a Complex value.\n\nCorrelation across two components:\n\nhatG^(2)(d) = frac1Msum_spqr=1^M e^-id(p-q)2πM a^_s b^_p  b_q a_r δ_s+pq+r\n\nCorrelation within a single component:\n\nhatG^(2)(d) = frac1Msum_spqr=1^M e^-id(p-q)2πM a^_s a^_p  a_q a_r δ_s+pq+r\n\nThe diagonal element, where (p-q)=0, is\n\nfrac1Msum_kp=1^M a^_k b^_p  b_p a_k \n\nArguments\n\nd::Integer: the distance between two particles.\nc: possible instructions: :cross: default instruction, computing correlation between particles across two components; :first: computing correlation between particles within the first component; :second: computing correlation between particles within the second component. These are the only defined instructions, using anything else will produce errors.\n\nTo use on a one-component system\n\nFor a system with only one component, e.g. with BoseFS, the second argument c is irrelevant and can be any of the above instructions, one could simply skip this argument and let it be the default value.\n\nSee also\n\nBoseHubbardMom1D2C\nBoseFS2C\nG2RealCorrelator\nG2RealSpace\nAbstractOperator\nAllOverlaps\n\n\n\n\n\n","category":"type"},{"location":"hamiltonians.html#Rimu.Hamiltonians.SuperfluidCorrelator","page":"Hamiltonians","title":"Rimu.Hamiltonians.SuperfluidCorrelator","text":"SuperfluidCorrelator(d::Int) <: AbstractOperator{Float64}\n\nOperator for extracting superfluid correlation between sites separated by a distance d with 0 ≤ d < M:\n\n    hatC_textSF(d) = frac1M sum_i^M a_i^dagger a_i + d\n\nAssumes a one-dimensional lattice with M sites and periodic boundary conditions. M is also the number of modes in the Fock state address.\n\nUsage\n\nSuperfluid correlations can be extracted from a Monte Carlo calculation by wrapping SuperfluidCorrelator with AllOverlaps and passing into ProjectorMonteCarloProblem with the replica keyword argument. For an example with a similar use of G2RealCorrelator see G2 Correlator Example.\n\nSee also HubbardReal1D, G2RealCorrelator, AbstractOperator, and AllOverlaps.\n\n\n\n\n\n","category":"type"},{"location":"hamiltonians.html#Rimu.Hamiltonians.StringCorrelator","page":"Hamiltonians","title":"Rimu.Hamiltonians.StringCorrelator","text":"StringCorrelator(d::Int; address=nothing, type=nothing) <: AbstractOperator{T}\n\nOperator for extracting string correlation between lattice sites on a one-dimensional Hubbard lattice separated by a distance d with 0 ≤ d < M\n\n    C_textstring(d) = frac1M sum_j^M δ n_j\n                                         (e^i π sum_j  k  j + d δ n_k) δ n_j+d\n\nHere, δ n_j = n_j - n is the boson number deviation from the mean filling number and n = NM is the mean filling number of lattice sites with N particles and M lattice sites (or modes).\n\nAssumes a one-dimensional lattice with periodic boundary conditions. For usage see SuperfluidCorrelator and AllOverlaps.\n\nThe default element type T is ComplexF64. This can be overridden with the type keyword argument. If an address is provided, then T is calculated from the address type. It is set to ComplexF64 for non-integer filling numbers, and to Float64 for integer filling numbers or if d==0.\n\nSee also HubbardReal1D, G2RealCorrelator, SuperfluidCorrelator, AbstractOperator, and AllOverlaps.\n\n\n\n\n\n","category":"type"},{"location":"hamiltonians.html#Rimu.Hamiltonians.DensityMatrixDiagonal","page":"Hamiltonians","title":"Rimu.Hamiltonians.DensityMatrixDiagonal","text":"DensityMatrixDiagonal(mode; component=0) <: AbstractHamiltonian\n\nRepresent a diagonal element of the single-particle density:\n\nhatn_iσ = hat a^_iσ hat a_iσ\n\nwhere i is the mode and σ is the component. If component is zero, the sum over all components is computed.\n\nSee also\n\nsingle_particle_density\nSingleParticleDensity\nSingleParticleExcitation\n\n\n\n\n\n","category":"type"},{"location":"hamiltonians.html#Rimu.Hamiltonians.SingleParticleExcitation","page":"Hamiltonians","title":"Rimu.Hamiltonians.SingleParticleExcitation","text":"SingleParticleExcitation(i, j) <: AbstractHamiltonian\n\nRepresent the ij element of the single-particle reduced density matrix:\n\nρ^(1)_ij = a^_i a_j\n\nwhere i <: Int and j <: Int specify the mode numbers.\n\nSee also\n\nsingle_particle_density\nSingleParticleDensity\nTwoParticleExcitation\n\n\n\n\n\n","category":"type"},{"location":"hamiltonians.html#Rimu.Hamiltonians.TwoParticleExcitation","page":"Hamiltonians","title":"Rimu.Hamiltonians.TwoParticleExcitation","text":"TwoParticleExcitation(i, j, k, l) <: AbstractHamiltonian\n\nRepresent the ij kl element of the two-particle reduced density matrix:\n\nρ^(2)_ij kl =  a^_i a^_j a_l a_k\n\nwhere i, j, k, and l (all <: Int) specify the mode numbers.\n\nSee also\n\nsingle_particle_density\nSingleParticleDensity\nSingleParticleExcitation\n\n\n\n\n\n","category":"type"},{"location":"hamiltonians.html#Rimu.Hamiltonians.Momentum","page":"Hamiltonians","title":"Rimu.Hamiltonians.Momentum","text":"Momentum(component=0; fold=true) <: AbstractHamiltonian\n\nThe momentum operator P.\n\nThe component argument controls which component of the address is taken into consideration. A value of 0 sums the contributions of all components. If fold is true, the momentum is folded into the Brillouin zone.\n\njulia> address = BoseFS((1, 0, 2, 1, 2, 1, 1, 3))\nBoseFS{11,8}(1, 0, 2, 1, 2, 1, 1, 3)\n\njulia> v = DVec(address => 10);\n\njulia> rayleigh_quotient(Momentum(), DVec(address => 1))\n-2.0\n\njulia> rayleigh_quotient(Momentum(fold=false), DVec(address => 1))\n14.0\n\n\n\n\n\n","category":"type"},{"location":"hamiltonians.html#Rimu.Hamiltonians.AxialAngularMomentumHO","page":"Hamiltonians","title":"Rimu.Hamiltonians.AxialAngularMomentumHO","text":"AxialAngularMomentumHO(S; z_dim = 3, addr = BoseFS(prod(S))) <: AbstractHamiltonian\n\nAngular momentum operator for application to Cartesian harmonic oscillator basis, see HOCartesianContactInteractions or HOCartesianEnergyConservedPerDim. Represents the projection of angular momentum onto z-axis:\n\nhatL_z = i hbar sum_j=1^N left( b_x b_y^dag - b_y b_x^dag right)\n\nwhere b_x^dag and b_x are raising and lowering (ladder) operators for  a harmonic oscillator in the x dimension, and simlarly for y.\n\nThis is implemented for an N particle Fock space with creation and annihilation operators as\n\nfrac1hbar hatL_z = i sum_n_x=1^M_x sum_n_y=1^M_y\n    left( a_n_x-1n_y+1^dag - a_n_x+1n_y-1^dag right) a_n_x n_y\n\nin units of hbar.\n\nArgument S is a tuple defining the range of Cartesian modes in each dimension and their mapping to Fock space modes in a SingleComponentFockAddress. If S indicates a 3D system the z dimension can be changed by setting z_dim; S should be be isotropic in the remaining x-y plane, i.e. must have S[x_dim] == S[y_dim]. The starting address addr only needs to satisfy num_modes(addr) == prod(S).\n\nExample\n\nCalculate the overlap of two Fock addresses interpreted as harmonic oscillator states in a 2D Cartesian basis\n\njulia> S = (2,2)\n(2, 2)\n\njulia> Lz = AxialAngularMomentumHO(S)\nAxialAngularMomentumHO((2, 2); z_dim = 3, addr = BoseFS{0,4}(0, 0, 0, 0))\n\njulia> v = DVec(BoseFS(prod(S), 2 => 1) => 1.0)\nDVec{BoseFS{1, 4, BitString{4, 1, UInt8}},Float64} with 1 entry, style = IsDeterministic{Float64}()\n  fs\"|0 1 0 0⟩\" => 1.0\n\njulia> w = DVec(BoseFS(prod(S), 3 => 1) => 1.0)\nDVec{BoseFS{1, 4, BitString{4, 1, UInt8}},Float64} with 1 entry, style = IsDeterministic{Float64}()\n  fs\"|0 0 1 0⟩\" => 1.0\n\njulia> dot(w, Lz, v)\n0.0 + 1.0im\n\n\n\n\n\n","category":"type"},{"location":"hamiltonians.html#Hamiltonians-interface","page":"Hamiltonians","title":"Hamiltonians interface","text":"","category":"section"},{"location":"hamiltonians.html","page":"Hamiltonians","title":"Hamiltonians","text":"Behind the implementation of a particular model is a more abstract interface for defining Hamiltonians. If you want to define a new model you should make use of this interface. The most general form of a model Hamiltonian should subtype to AbstractHamiltonian and implement the relevant methods.","category":"page"},{"location":"hamiltonians.html","page":"Hamiltonians","title":"Hamiltonians","text":"AbstractHamiltonian\noffdiagonals\ndiagonal_element\nstarting_address","category":"page"},{"location":"hamiltonians.html#Rimu.Interfaces.AbstractHamiltonian","page":"Hamiltonians","title":"Rimu.Interfaces.AbstractHamiltonian","text":"AbstractHamiltonian{T} <: AbstractOperator{T}\n\nSupertype that provides an interface for linear operators over a linear space with scalar type T that are suitable for FCIQMC (with ProjectorMonteCarloProblem). Indexing is done with addresses (typically not integers) from an address space that may be large (and will not need to be completely generated).\n\nAbstractHamiltonian instances operate on vectors of type AbstractDVec from the module DictVectors and work well with addresses of type AbstractFockAddress from the module BitStringAddresses. The type works well with the external package KrylovKit.jl.\n\nFor available implementations see Hamiltonians.\n\nInterface\n\nBasic interface methods to implement:\n\nstarting_address(::AbstractHamiltonian)\ndiagonal_element(::AbstractHamiltonian, address)\nnum_offdiagonals(::AbstractHamiltonian, address)\nget_offdiagonal(::AbstractHamiltonian, address, chosen::Integer) (optional, see   below)\n\nOptional additional methods to implement:\n\nLOStructure(::Type{typeof(lo)}): defaults to AdjointUnknown\ndimension(::AbstractHamiltonian, addr): defaults to dimension of address space\nallows_address_type(h::AbstractHamiltonian, type): defaults to type :< typeof(starting_address(h))\nmomentum(::AbstractHamiltonian): no default\n\nProvides the following functions and methods:\n\noffdiagonals: iterator over reachable off-diagonal matrix elements\nrandom_offdiagonal: function to generate random off-diagonal matrix element\n*(H, v): deterministic matrix-vector multiply (allocating)\nH(v): equivalent to H * v.\nmul!(w, H, v): mutating matrix-vector multiply.\ndot(x, H, v): compute x⋅(H*v) minimizing allocations.\nH[address1, address2]: indexing with getindex() - mostly for testing purposes (slow!)\nBasisSetRepresentation: construct a basis set repesentation\nsparse, Matrix: construct a (sparse) matrix representation\n\nAlternatively to the above, offdiagonals can be implemented instead of get_offdiagonal. Sometimes this can be done efficiently. In this case num_offdiagonals should provide an upper bound on the number of elements obtained when iterating offdiagonals.\n\nSee also Hamiltonians, Interfaces, AbstractOperator.\n\n\n\n\n\n","category":"type"},{"location":"hamiltonians.html#Rimu.Interfaces.offdiagonals","page":"Hamiltonians","title":"Rimu.Interfaces.offdiagonals","text":"offdiagonals(h::AbstractHamiltonian, address)\n\nReturn an iterator over nonzero off-diagonal matrix elements of h in the same column as address. Will iterate over pairs (newaddress, matrixelement).\n\nExample\n\njulia> address = BoseFS(3,2,1);\n\n\njulia> H = HubbardReal1D(address);\n\n\njulia> h = offdiagonals(H, address)\n6-element Rimu.Hamiltonians.Offdiagonals{BoseFS{6, 3, BitString{8, 1, UInt8}}, Float64, HubbardReal1D{Float64, BoseFS{6, 3, BitString{8, 1, UInt8}}, 1.0, 1.0}}:\n (fs\"|2 3 1⟩\", -3.0)\n (fs\"|2 2 2⟩\", -2.449489742783178)\n (fs\"|3 1 2⟩\", -2.0)\n (fs\"|4 1 1⟩\", -2.8284271247461903)\n (fs\"|4 2 0⟩\", -2.0)\n (fs\"|3 3 0⟩\", -1.7320508075688772)\n\nPart of the AbstractHamiltonian interface.\n\nExtemded help\n\noffdiagonals return and iterator of type <:AbstractOffdiagonals. It defaults to returning Offdiagonals(h, a)\n\nSee also Offdiagonals, AbstractOffdiagonals.\n\n\n\n\n\n","category":"function"},{"location":"hamiltonians.html#Rimu.Interfaces.diagonal_element","page":"Hamiltonians","title":"Rimu.Interfaces.diagonal_element","text":"diagonal_element(ham, address)\n\nCompute the diagonal matrix element of the linear operator ham at address address.\n\nExample\n\njulia> address = BoseFS((3, 2, 1));\n\n\njulia> H = HubbardMom1D(address);\n\n\njulia> diagonal_element(H, address)\n8.666666666666664\n\nPart of the AbstractHamiltonian interface.\n\n\n\n\n\n","category":"function"},{"location":"hamiltonians.html#Rimu.Interfaces.starting_address","page":"Hamiltonians","title":"Rimu.Interfaces.starting_address","text":"starting_address(h)\n\nReturn the starting address for Hamiltonian h. When called on an AbstractMatrix, starting_address returns the index of the lowest diagonal element.\n\nExample\n\njulia> address = BoseFS((3, 2, 1));\n\n\njulia> H = HubbardMom1D(address);\n\n\njulia> address == starting_address(H)\ntrue\n\nPart of the AbstractHamiltonian interface.\n\n\n\n\n\n","category":"function"},{"location":"hamiltonians.html","page":"Hamiltonians","title":"Hamiltonians","text":"The following functions may be implemented instead of offdiagonals.","category":"page"},{"location":"hamiltonians.html","page":"Hamiltonians","title":"Hamiltonians","text":"num_offdiagonals\nget_offdiagonal","category":"page"},{"location":"hamiltonians.html#Rimu.Interfaces.num_offdiagonals","page":"Hamiltonians","title":"Rimu.Interfaces.num_offdiagonals","text":"num_offdiagonals(ham, address)\n\nCompute the number of number of reachable configurations from address address.\n\nExample\n\njulia> address = BoseFS((3, 2, 1));\n\n\njulia> H = HubbardMom1D(address);\n\n\njulia> num_offdiagonals(H, address)\n10\n\nPart of the AbstractHamiltonian interface.\n\n\n\n\n\n","category":"function"},{"location":"hamiltonians.html#Rimu.Interfaces.get_offdiagonal","page":"Hamiltonians","title":"Rimu.Interfaces.get_offdiagonal","text":"newadd, me = get_offdiagonal(ham, address, chosen)\n\nCompute value me and new address newadd of a single (off-diagonal) matrix element in a Hamiltonian ham. The off-diagonal element is in the same column as address address and is indexed by integer index chosen.\n\nExample\n\njulia> addr = BoseFS(3, 2, 1);\n\njulia> H = HubbardMom1D(addr);\n\njulia> get_offdiagonal(H, addr, 3)\n(BoseFS{6,3}(2, 1, 3), 1.0)\n\nPart of the AbstractHamiltonian interface.\n\n\n\n\n\n","category":"function"},{"location":"hamiltonians.html","page":"Hamiltonians","title":"Hamiltonians","text":"The following functions come with default implementations, but may be customized.","category":"page"},{"location":"hamiltonians.html","page":"Hamiltonians","title":"Hamiltonians","text":"random_offdiagonal\nHamiltonians.LOStructure\ndimension\nhas_adjoint\nallows_address_type\nBase.eltype\nVectorInterface.scalartype\nmul!","category":"page"},{"location":"hamiltonians.html#Rimu.Interfaces.random_offdiagonal","page":"Hamiltonians","title":"Rimu.Interfaces.random_offdiagonal","text":"random_offdiagonal(offdiagonals::AbstractOffdiagonals)\nrandom_offdiagonal(ham::AbstractHamiltonian, address)\n-> newaddress, probability, matrixelement\n\nGenerate a single random excitation, i.e. choose from one of the accessible off-diagonal elements in the column corresponding to address in the Hamiltonian matrix represented by ham. Alternatively, pass as argument an iterator over the accessible matrix elements.\n\nPart of the AbstractHamiltonian interface.\n\n\n\n\n\n","category":"function"},{"location":"hamiltonians.html#Rimu.Interfaces.LOStructure","page":"Hamiltonians","title":"Rimu.Interfaces.LOStructure","text":"LOStructure(op::AbstractHamiltonian)\nLOStructure(typeof(op))\n\nReturn information about the structure of the linear operator op. LOStructure is used as a trait to speficy symmetries or other properties of the linear operator op that may simplify or speed up calculations. Implemented instances are:\n\nIsDiagonal(): The operator is diagonal.\nIsHermitian(): The operator is complex and Hermitian or real and symmetric.\nAdjointKnown(): The operator is not Hermitian, but its   adjoint is implemented.\nAdjointUnknown(): adjoint for this operator is not   implemented.\n\nPart of the AbstractHamiltonian interface.\n\nIn order to define this trait for a new linear operator type, define a method for LOStructure(::Type{<:MyNewLOType}) = ….\n\n\n\n\n\n","category":"type"},{"location":"hamiltonians.html#Rimu.Hamiltonians.dimension","page":"Hamiltonians","title":"Rimu.Hamiltonians.dimension","text":"dimension(h::AbstractHamiltonian, addr=starting_address(h))\ndimension(h::AbstractOperator, addr)\ndimension(addr::AbstractFockAddress)\ndimension(::Type{<:AbstractFockAddress})\n\nReturn the estimated dimension of Hilbert space. May return a BigInt number.\n\nWhen called on an address or address type, the dimension of the linear space spanned by the address type is returned. When called on an AbstractHamiltonian, an upper bound on the dimension of the matrix representing the Hamiltonian is returned.\n\nExamples\n\njulia> dimension(OccupationNumberFS(1,2,3))\n16777216\n\njulia> dimension(HubbardReal1D(OccupationNumberFS(1,2,3)))\n28\n\njulia> dimension(BoseFS{200,100})\n1386083821086188248261127842108801860093488668581216236221011219101585442774669540\n\njulia> Float64(ans)\n1.3860838210861882e81\n\nPart of the AbstractHamiltonian interface. See also BasisSetRepresentation.\n\nExtended Help\n\nThe default fallback for dimension called on an AbstractHamiltonian is to return the dimension of the address space, which provides an upper bound. For new Hamiltonians a tighter bound can be provided by defining a custom method.\n\nWhen extending AbstractHamiltonian, define a method for the two-argument form dimension(h::MyNewHamiltonian, addr). For number-conserving Hamiltonians, the function Hamiltonians.number_conserving_dimension may be useful.\n\nWhen extending AbstractFockAddress, define a method for dimension(::Type{MyNewFockAddress}).\n\n\n\n\n\n","category":"function"},{"location":"hamiltonians.html#Rimu.Interfaces.has_adjoint","page":"Hamiltonians","title":"Rimu.Interfaces.has_adjoint","text":"has_adjoint(op)\n\nReturn true if adjoint is defined on op.\n\nPart of the AbstractHamiltonian interface.\n\nSee also LOStructure.\n\n\n\n\n\n","category":"function"},{"location":"hamiltonians.html#Rimu.Interfaces.allows_address_type","page":"Hamiltonians","title":"Rimu.Interfaces.allows_address_type","text":"allows_address_type(operator, addr_or_type)\n\nReturns true if addr_or_type is a valid address for operator. Otherwise, returns false.\n\nPart of the AbstractHamiltonian interface.\n\nExtended help\n\nDefaults to addr_or_type <: typeof(starting_address(operator)). Overload this function if the operator can be used with addresses of different types.\n\n\n\n\n\n","category":"function"},{"location":"hamiltonians.html#Base.eltype","page":"Hamiltonians","title":"Base.eltype","text":"eltype(op::AbstractOperator)\n\nReturn the type of the elements of the operator. This can be a vector value. For the underlying scalar type use scalartype.\n\nPart of the AbstractOperator interface.\n\nnote: Note\nNew types should only implement the method with the argument in the type domain.\n\n\n\n\n\n","category":"function"},{"location":"hamiltonians.html#VectorInterface.scalartype","page":"Hamiltonians","title":"VectorInterface.scalartype","text":"scalartype(op::AbstractOperator)\n\nReturn the type of the underlying scalar field of the operator. This may be different from the element type of the operator returned by eltype, which can be a vector value.\n\nPart of the AbstractOperator interface.\n\nnote: Note\nNew types should only implement the method with the argument in the type domain.\n\n\n\n\n\n","category":"function"},{"location":"hamiltonians.html#LinearAlgebra.mul!","page":"Hamiltonians","title":"LinearAlgebra.mul!","text":"LinearAlgebra.mul!(w::AbstractDVec, op::AbstractOperator, v::AbstractDVec)\n\nIn place multiplication of op with v and storing the result in w. The result is returned. Note that w needs to have a valtype that can hold a product of instances of eltype(op) and valtype(v). Moreover, the StochasticStyle of w needs to be <:IsDeterministic.\n\nPart of the AbstractOperator interface.\n\nThe default implementation relies of diagonal_element and offdiagonals to access the elements of the operator. The function can be overloaded for custom operators.\n\n\n\n\n\n","category":"function"},{"location":"hamiltonians.html","page":"Hamiltonians","title":"Hamiltonians","text":"This interface relies on unexported functionality, including","category":"page"},{"location":"hamiltonians.html","page":"Hamiltonians","title":"Hamiltonians","text":"Hamiltonians.adjoint\nHamiltonians.dot\nHamiltonians.AbstractOffdiagonals\nHamiltonians.Offdiagonals\nHamiltonians.check_address_type\nHamiltonians.number_conserving_dimension\nHamiltonians.number_conserving_bose_dimension\nHamiltonians.number_conserving_fermi_dimension","category":"page"},{"location":"hamiltonians.html#Base.adjoint","page":"Hamiltonians","title":"Base.adjoint","text":"adjoint(::LOStructure, op::AbstractOperator)\n\nRepresent the adjoint of an AbstractOperator. Extend this method to define custom adjoints.\n\n\n\n\n\n","category":"function"},{"location":"hamiltonians.html#LinearAlgebra.dot","page":"Hamiltonians","title":"LinearAlgebra.dot","text":"dot(w, op::AbstractOperator, v)\n\nEvaluate w⋅op(v) minimizing memory allocations.\n\n\n\n\n\n","category":"function"},{"location":"hamiltonians.html#Rimu.Hamiltonians.AbstractOffdiagonals","page":"Hamiltonians","title":"Rimu.Hamiltonians.AbstractOffdiagonals","text":"AbstractOffdiagonals{A,T}<:AbstractVector{Tuple{A,T}}\n\nIterator over new address and matrix elements for reachable off-diagonal matrix elements of a linear operator.\n\nSee Offdiagonals for a default implementation.\n\nMethods to define\n\noffdiagonals(h, a)::AbstractOffdiagonals: This function is used to construct the correct type of offdiagonals for a given combination of Hamiltonian h and Fock address a.\nBase.getindex(::AbstractOffdiagonals, i): should be equivalent to get_offdiagonal(h, a, i).\nBase.size(::AbstractOffdiagonals): should be equivalent to num_offdiagonals(h, a).\n\nSee also offdiagonals, AbstractHamiltonian, AbstractOperator.\n\n\n\n\n\n","category":"type"},{"location":"hamiltonians.html#Rimu.Hamiltonians.Offdiagonals","page":"Hamiltonians","title":"Rimu.Hamiltonians.Offdiagonals","text":"Offdiagonals(h, address) <: AbstractOffdiagonals\n\nIterator over new address and matrix element for reachable off-diagonal matrix elements of linear operator h from address address.  Represents an abstract vector containing the non-zero off-diagonal matrix elements of the column of h indexed by address. To construct this iterator use offdiagonals.\n\nThis is the default implementation of AbstractOffdiagonals defined in terms of num_offdiagonals and get_offdiagonal.\n\nSee also offdiagonals, AbstractHamiltonian, AbstractOperator.\n\n\n\n\n\n","category":"type"},{"location":"hamiltonians.html#Rimu.Hamiltonians.check_address_type","page":"Hamiltonians","title":"Rimu.Hamiltonians.check_address_type","text":"check_address_type(h::AbstractOperator, addr_or_type)\n\nThrow an ArgumentError if addr_or_type is not compatible with h, otherwise return true. Acceptable arguments are either an address or an address type, or a tuple or array thereof.\n\nSee also allows_address_type.\n\n\n\n\n\n","category":"function"},{"location":"hamiltonians.html#Rimu.Hamiltonians.number_conserving_dimension","page":"Hamiltonians","title":"Rimu.Hamiltonians.number_conserving_dimension","text":"number_conserving_dimension(address <: AbstractFockAddress)\n\nReturn the dimension of the Fock space spanned by the address type assuming particle number conservation.\n\nSee also number_conserving_bose_dimension, number_conserving_fermi_dimension, dimension.\n\n\n\n\n\n","category":"function"},{"location":"hamiltonians.html#Rimu.Hamiltonians.number_conserving_bose_dimension","page":"Hamiltonians","title":"Rimu.Hamiltonians.number_conserving_bose_dimension","text":"number_conserving_bose_dimension(n, m)\n\nReturn the dimension of the number-conserving Fock space for n bosons in m modes: binomial(n + m - 1, n).\n\nSee also number_conserving_fermi_dimension, number_conserving_dimension.\n\n\n\n\n\n","category":"function"},{"location":"hamiltonians.html#Rimu.Hamiltonians.number_conserving_fermi_dimension","page":"Hamiltonians","title":"Rimu.Hamiltonians.number_conserving_fermi_dimension","text":"number_conserving_fermi_dimension(n, m)\n\nReturn the dimension of the number-conserving Fock space for n fermions in m modes: binomial(m, n).\n\nSee also number_conserving_bose_dimension, number_conserving_dimension.\n\n\n\n\n\n","category":"function"},{"location":"hamiltonians.html#Geometry","page":"Hamiltonians","title":"Geometry","text":"","category":"section"},{"location":"hamiltonians.html","page":"Hamiltonians","title":"Hamiltonians","text":"Lattices in higher dimensions are defined here for HubbardRealSpace and G2RealSpace.","category":"page"},{"location":"hamiltonians.html","page":"Hamiltonians","title":"Hamiltonians","text":"CubicGrid\nHamiltonians.Directions\nHamiltonians.Displacements\nHamiltonians.neighbor_site\nPeriodicBoundaries\nHardwallBoundaries\nLadderBoundaries","category":"page"},{"location":"hamiltonians.html#Rimu.Hamiltonians.CubicGrid","page":"Hamiltonians","title":"Rimu.Hamiltonians.CubicGrid","text":"CubicGrid(dims::NTuple{D,Int}, fold::NTuple{D,Bool})\n\nRepresents a D-dimensional grid. Used to define a cubic lattice and boundary conditions for some AbstractHamiltonians. The type instance can be used to convert between cartesian vector indices (tuples or SVectors) and linear indices (integers). When indexed with vectors, it folds them back into the grid if the out-of-bounds dimension is periodic and 0 otherwise (see example below).\n\ndims controls the size of the grid in each dimension.\nfold controls whether the boundaries in each dimension are periodic (or folded in the case of momentum space).\n\njulia> geo = CubicGrid((2,3), (true,false))\nCubicGrid{2}((2, 3), (true, false))\n\njulia> geo[1]\n(1, 1)\n\njulia> geo[2]\n(2, 1)\n\njulia> geo[3]\n(1, 2)\n\njulia> geo[(1,2)]\n3\n\njulia> geo[(3,2)] # 3 is folded back into 1\n3\n\njulia> geo[(3,3)]\n5\n\njulia> geo[(3,4)] # returns 0 if out of bounds\n0\n\nSee also PeriodicBoundaries, HardwallBoundaries and LadderBoundaries for special-case constructors.\n\n\n\n\n\n","category":"type"},{"location":"hamiltonians.html#Rimu.Hamiltonians.Directions","page":"Hamiltonians","title":"Rimu.Hamiltonians.Directions","text":"Directions(D) <: AbstractVector{SVector{D,Int}}\nDirections(geometry::CubicGrid) <: AbstractVector{SVector{D,Int}}\n\nIterate over axis-aligned direction vectors in D dimensions.\n\njulia> Directions(3)\n6-element Directions{3}:\n [1, 0, 0]\n [0, 1, 0]\n [0, 0, 1]\n [-1, 0, 0]\n [0, -1, 0]\n [0, 0, -1]\n\n\nSee also CubicGrid.\n\n\n\n\n\n","category":"type"},{"location":"hamiltonians.html#Rimu.Hamiltonians.Displacements","page":"Hamiltonians","title":"Rimu.Hamiltonians.Displacements","text":"Displacements(geometry::CubicGrid) <: AbstractVector{SVector{D,Int}}\n\nReturn all valid offset vectors in a CubicGrid. If center=true the (0,0) displacement is placed at the centre of the array.\n\njulia> geometry = CubicGrid((3,4));\n\njulia> reshape(Displacements(geometry), (3,4))\n3×4 reshape(::Displacements{2}, 3, 4) with eltype StaticArraysCore.SVector{2, Int64}:\n [0, 0]  [0, 1]  [0, 2]  [0, 3]\n [1, 0]  [1, 1]  [1, 2]  [1, 3]\n [2, 0]  [2, 1]  [2, 2]  [2, 3]\n\njulia> reshape(Displacements(geometry; center=true), (3,4))\n3×4 reshape(::Displacements{2}, 3, 4) with eltype StaticArraysCore.SVector{2, Int64}:\n [-1, -1]  [-1, 0]  [-1, 1]  [-1, 2]\n [0, -1]   [0, 0]   [0, 1]   [0, 2]\n [1, -1]   [1, 0]   [1, 1]   [1, 2]\n\n\n\n\n\n\n","category":"type"},{"location":"hamiltonians.html#Rimu.Hamiltonians.neighbor_site","page":"Hamiltonians","title":"Rimu.Hamiltonians.neighbor_site","text":"neighbor_site(geom::CubicGrid, site, i)\n\nFind the i-th neighbor of site in the geometry. If the move is illegal, return 0.\n\n\n\n\n\n","category":"function"},{"location":"hamiltonians.html#Rimu.Hamiltonians.PeriodicBoundaries","page":"Hamiltonians","title":"Rimu.Hamiltonians.PeriodicBoundaries","text":"PeriodicBoundaries(dims...) -> CubicGrid\nPeriodicBoundaries(dims) -> CubicGrid\n\nReturn CubicGrid with all dimensions periodic. Equivalent to CubicGrid(dims).\n\n\n\n\n\n","category":"function"},{"location":"hamiltonians.html#Rimu.Hamiltonians.HardwallBoundaries","page":"Hamiltonians","title":"Rimu.Hamiltonians.HardwallBoundaries","text":"HardwallBoundaries(dims...) -> CubicGrid\nHardwallBoundaries(dims) -> CubicGrid\n\nReturn CubicGrid with all dimensions non-periodic. Equivalent to CubicGrid(dims, (false, false, ...)).\n\n\n\n\n\n","category":"function"},{"location":"hamiltonians.html#Rimu.Hamiltonians.LadderBoundaries","page":"Hamiltonians","title":"Rimu.Hamiltonians.LadderBoundaries","text":"LadderBoundaries(dims...) -> CubicGrid\nLadderBoundaries(dims) -> CubicGrid\n\nReturn CubicGrid where the first dimension is dimensions non-periodic and the rest are periodic. Equivalent to CubicGrid(dims, (true, false, ...)).\n\n\n\n\n\n","category":"function"},{"location":"hamiltonians.html#Harmonic-Oscillator","page":"Hamiltonians","title":"Harmonic Oscillator","text":"","category":"section"},{"location":"hamiltonians.html","page":"Hamiltonians","title":"Hamiltonians","text":"Useful utilities for harmonic oscillator in Cartesian basis, see HOCartesianContactInteractions and HOCartesianEnergyConservedPerDim.","category":"page"},{"location":"hamiltonians.html","page":"Hamiltonians","title":"Hamiltonians","text":"get_all_blocks\nfock_to_cart","category":"page"},{"location":"hamiltonians.html#Rimu.Hamiltonians.get_all_blocks","page":"Hamiltonians","title":"Rimu.Hamiltonians.get_all_blocks","text":"get_all_blocks(h::Union{HOCartesianContactInteractions,HOCartesianEnergyConservedPerDim}; \n    target_energy = nothing, \n    max_energy = nothing, \n    max_blocks = nothing, \n    method = :vertices,\n    kwargs...) -> df\n\nFind all distinct blocks of h. Returns a DataFrame with columns \n\nblock_id: index of block in order found\nblock_E0: noninteracting energy of all elements in the block\nblock_size: number of elements in the block\naddr: first address that generates the block with e.g. BasisSetRep\nindices: tuple of mode indices that allow recreation of the generating address    addr; in this case use e.g. BoseFS(M; indices .=> 1) This is useful when    the DataFrame is loaded from file since Arrow.jl converts custom   types to NamedTuples.\nt_basis: time to generate the basis for each block\n\nKeyword arguments:\n\ntarget_energy: only blocks with this noninteracting energy are found\nmax_energy: only blocks with noninteracting energy less than this are found\nmax_blocks: exit after finding this many blocks\nmethod: Choose between :vertices and :comb for method of enumerating    tuples of quantum numbers\nsave_to_file=nothing: if set then the DataFrame recording blocks is saved    after each new block is found\nadditional kwargs: passed to isapprox for comparing block energies.    Useful for anisotropic traps\n\nNote: If h was constructed with option block_by_level = false then the block seeds  addr are determined by parity. In this case the blocks are not generated; t_basis  will be zero, and block_size will be an estimate. Pass the seed addresses to  BasisSetRep with an appropriate filter to generate the blocks.\n\n\n\n\n\n","category":"function"},{"location":"hamiltonians.html#Rimu.Hamiltonians.fock_to_cart","page":"Hamiltonians","title":"Rimu.Hamiltonians.fock_to_cart","text":"fock_to_cart(addr, S; zero_index = true)\n\nConvert a Fock state address addr to Cartesian harmonic oscillator basis  indices n_xn_yldots. These indices are bounded by S which is a  tuple of the maximum number of states in each dimension. By default the  groundstate in each dimension is indexed by 0, but this can be changed  by setting zero_index = false.\n\n\n\n\n\n","category":"function"},{"location":"hamiltonians.html","page":"Hamiltonians","title":"Hamiltonians","text":"Underlying integrals for the interaction matrix elements are implemented in the following unexported functions","category":"page"},{"location":"hamiltonians.html","page":"Hamiltonians","title":"Hamiltonians","text":"Hamiltonians.four_oscillator_integral_general\nHamiltonians.ho_delta_potential\nHamiltonians.log_abs_oscillator_zero","category":"page"},{"location":"hamiltonians.html#Rimu.Hamiltonians.four_oscillator_integral_general","page":"Hamiltonians","title":"Rimu.Hamiltonians.four_oscillator_integral_general","text":"four_oscillator_integral_general(i, j, k, l; max_level = typemax(Int))\n\nIntegral of four one-dimensional harmonic oscillator functions,\n\n    mathcalI(ijkl) = int_-infty^infty dx \n    phi_i(x) phi_j(x) phi_k(x) phi_l(x)\n\nIndices i,j,k,l start at 0 for the groundstate.\n\nThis integral has a closed form in terms of the hypergeometric _3F_2 function, and is non-zero unless i+j+k+l is odd. See e.g. Titchmarsh (1948). This is a generalisation of the closed form in Papenbrock (2002), which is is the special case where i+j == k+l, but is numerically unstable for large arguments. Used in HOCartesianContactInteractions and HOCartesianEnergyConservedPerDim.\n\n\n\n\n\n","category":"function"},{"location":"hamiltonians.html#Rimu.Hamiltonians.ho_delta_potential","page":"Hamiltonians","title":"Rimu.Hamiltonians.ho_delta_potential","text":"ho_delta_potential(S, i, j; [vals])\n\nReturns the matrix element of a delta potential at the centre of a trap, i.e. the  product of two harmonic oscillator functions evaluated at the origin,\n\n    v_ij = phi_mathbfn_i(0) phi_mathbfn_j(0)\n\nwhich is only non-zero for even-parity states. The ith single particle state corresponds to a D-tuple of harmonic oscillator indices mathbfn_i. S defines the bounds of Cartesian harmonic oscillator indices for each dimension. The optional keyword argument vals allows passing pre-computed values of phi_i(0) to speed-up the calculation. The values can be calculated with log_abs_oscillator_zero.\n\nSee also HOCartesianCentralImpurity.\n\n\n\n\n\n","category":"function"},{"location":"hamiltonians.html#Rimu.Hamiltonians.log_abs_oscillator_zero","page":"Hamiltonians","title":"Rimu.Hamiltonians.log_abs_oscillator_zero","text":"log_abs_oscillator_zero(n)\n\nCompute the logarithm of the absolute value of the n^mathrmth 1D harmonic oscillator function evaluated at the origin. The overall sign is determined when the matrix element is evaluated in ho_delta_potential.\n\n\n\n\n\n","category":"function"},{"location":"hamiltonians.html#Index","page":"Hamiltonians","title":"Index","text":"","category":"section"},{"location":"hamiltonians.html","page":"Hamiltonians","title":"Hamiltonians","text":"Pages   = [\"hamiltonians.md\"]","category":"page"},{"location":"RMPI.html#Module-RMPI","page":"RMPI","title":"Module RMPI","text":"","category":"section"},{"location":"RMPI.html","page":"RMPI","title":"RMPI","text":"Rimu.RMPI","category":"page"},{"location":"RMPI.html#Rimu.RMPI","page":"RMPI","title":"Rimu.RMPI","text":"Module for providing MPI functionality for Rimu. This module is unexported. To use it, run\n\nusing Rimu.RMPI\n\n\n\n\n\n","category":"module"},{"location":"RMPI.html#MPIData","page":"RMPI","title":"MPIData","text":"","category":"section"},{"location":"RMPI.html","page":"RMPI","title":"RMPI","text":"Rimu.RMPI.MPIData","category":"page"},{"location":"RMPI.html#Rimu.RMPI.MPIData","page":"RMPI","title":"Rimu.RMPI.MPIData","text":"MPIData(data; kwargs...)\n\nWrapper used for signaling that this data is part of a distributed data structure and communication should happen with MPI. MPIData can generally be used where an AbstractDVec would be used otherwise. Unlike AbstractDVecs, MPIData does not support indexing, or iteration over keys, values, and pairs.\n\nKeyword arguments:\n\nsetup = mpi_point_to_point - controls the communication stratgy\nmpi_one_sided uses one-sided communication with remote memory access (RMA), sets MPIOneSided strategy.\nmpi_point_to_point uses MPIPointToPoint strategy.\nmpi_all_to_all uses MPIAllToAll strategy.\nmpi_no_exchange sets MPINoWalkerExchange strategy. Experimental. Use with caution!\ncomm = mpi_comm()\nroot = mpi_root\nThe rest of the keyword arguments are passed to setup.\n\n\n\n\n\n","category":"type"},{"location":"RMPI.html#Setup-functions","page":"RMPI","title":"Setup functions","text":"","category":"section"},{"location":"RMPI.html","page":"RMPI","title":"RMPI","text":"The following distribute strategies are available. The functions are unexported.","category":"page"},{"location":"RMPI.html","page":"RMPI","title":"RMPI","text":"Rimu.RMPI.mpi_point_to_point\nRimu.RMPI.mpi_one_sided\nRimu.RMPI.mpi_all_to_all\nRimu.RMPI.mpi_no_exchange","category":"page"},{"location":"RMPI.html#Rimu.RMPI.mpi_point_to_point","page":"RMPI","title":"Rimu.RMPI.mpi_point_to_point","text":"mpi_point_to_point(data, comm = mpi_comm(), root = mpi_root)\n\nDeclare data as mpi-distributed and set communication strategy to point-to-point.\n\nSets up the MPIData structure with MPIPointToPoint strategy.\n\n\n\n\n\n","category":"function"},{"location":"RMPI.html#Rimu.RMPI.mpi_one_sided","page":"RMPI","title":"Rimu.RMPI.mpi_one_sided","text":"mpi_one_sided(data, comm = mpi_comm(), root = mpi_root; capacity)\n\nDeclare data as mpi-distributed and set communication strategy to one-sided with remote memory access (RMA). capacity sets the capacity of the RMA windows.\n\nSets up the MPIData structure with MPIOneSided strategy.\n\n\n\n\n\n","category":"function"},{"location":"RMPI.html#Rimu.RMPI.mpi_all_to_all","page":"RMPI","title":"Rimu.RMPI.mpi_all_to_all","text":"mpi_all_to_all(data, comm = mpi_comm(), root = mpi_root)\n\nDeclare data as mpi-distributed and set communication strategy to all-to-all.\n\nSets up the MPIData structure with MPIAllToAll strategy.\n\n\n\n\n\n","category":"function"},{"location":"RMPI.html#Rimu.RMPI.mpi_no_exchange","page":"RMPI","title":"Rimu.RMPI.mpi_no_exchange","text":"mpi_no_exchange(data, comm = mpi_comm(), root = mpi_root)\n\nDeclare data as mpi-distributed and set communication strategy to MPINoWalkerExchange. Sets up the MPIData structure with MPINoWalkerExchange strategy.\n\n\n\n\n\n","category":"function"},{"location":"RMPI.html#Strategies","page":"RMPI","title":"Strategies","text":"","category":"section"},{"location":"RMPI.html","page":"RMPI","title":"RMPI","text":"Rimu.RMPI.MPIPointToPoint\nRimu.RMPI.MPIOneSided\nRimu.RMPI.MPIAllToAll\nRimu.RMPI.MPINoWalkerExchange","category":"page"},{"location":"RMPI.html#Rimu.RMPI.MPIPointToPoint","page":"RMPI","title":"Rimu.RMPI.MPIPointToPoint","text":"MPIPointToPoint{N,A}\n\nPoint-to-point communication strategy. Uses circular communication using MPI.Send and MPI.Recv!.\n\nConstructor\n\nMPIPointToPoint(::Type{P}, np, id, comm): Construct an instance with pair type P on np processes with current rank id.\n\n\n\n\n\n","category":"type"},{"location":"RMPI.html#Rimu.RMPI.MPIOneSided","page":"RMPI","title":"Rimu.RMPI.MPIOneSided","text":"MPIOneSided(nprocs, myrank, comm, ::Type{T}, capacity)\n\nCommunication buffer for use with MPI one-sided communication (remote memory access). Up to capacity elements of type T can be exchanged between MPI ranks via put. It is important that isbitstype(T) == true. Objects of type MPIOneSided have to be freed manually with a (blocking) call to free().\n\n\n\n\n\n","category":"type"},{"location":"RMPI.html#Rimu.RMPI.MPIAllToAll","page":"RMPI","title":"Rimu.RMPI.MPIAllToAll","text":" MPIAllToAll\n\nAll-to-all communication strategy. The communication works in two steps: first MPI.Alltoall! is used to communicate the number of walkers each rank wants to send to other ranks, then MPI.Alltoallv! is used to send the walkers around.\n\nConstructor\n\nMPIAllToAll(Type{P}, np, id, comm): Construct an instance with pair type P on np processes with current rank id.\n\n\n\n\n\n","category":"type"},{"location":"RMPI.html#Rimu.RMPI.MPINoWalkerExchange","page":"RMPI","title":"Rimu.RMPI.MPINoWalkerExchange","text":"MPINoWalkerExchange(nprocs, my_rank, comm)\n\nStrategy for not exchanging walkers between ranks. Consequently there will be no cross-rank annihilations.\n\n\n\n\n\n","category":"type"},{"location":"RMPI.html#MPI-convenience-functions","page":"RMPI","title":"MPI convenience functions","text":"","category":"section"},{"location":"RMPI.html","page":"RMPI","title":"RMPI","text":"Modules = [Rimu.RMPI]\nPages = [\"helpers.jl\"]\nPrivate = true\nPublic = true","category":"page"},{"location":"RMPI.html#Rimu.RMPI.mpi_root","page":"RMPI","title":"Rimu.RMPI.mpi_root","text":"Default MPI root for RMPI.\n\n\n\n\n\n","category":"constant"},{"location":"RMPI.html#Rimu.DictVectors.mpi_comm-Tuple{}","page":"RMPI","title":"Rimu.DictVectors.mpi_comm","text":"Default MPI communicator for RMPI.\n\n\n\n\n\n","category":"method"},{"location":"RMPI.html#Rimu.DictVectors.mpi_rank","page":"RMPI","title":"Rimu.DictVectors.mpi_rank","text":"mpi_rank(comm = mpi_comm())\n\nReturn the current MPI rank.\n\n\n\n\n\n","category":"function"},{"location":"RMPI.html#Rimu.DictVectors.mpi_size","page":"RMPI","title":"Rimu.DictVectors.mpi_size","text":"mpi_size(comm = mpi_comm())\n\nSize of MPI communicator.\n\n\n\n\n\n","category":"function"},{"location":"RMPI.html#Rimu.RMPI.is_mpi_root","page":"RMPI","title":"Rimu.RMPI.is_mpi_root","text":"is_mpi_root(root = mpi_root)\n\nReturns true if called from the root rank\n\n\n\n\n\n","category":"function"},{"location":"RMPI.html#Rimu.RMPI.mpi_allprintln-Tuple","page":"RMPI","title":"Rimu.RMPI.mpi_allprintln","text":"mpi_allprintln(args...)\n\nPrint a message to stdout from each rank separately, in order. MPI synchronizing.\n\n\n\n\n\n","category":"method"},{"location":"RMPI.html#Rimu.RMPI.mpi_barrier","page":"RMPI","title":"Rimu.RMPI.mpi_barrier","text":"mpi_barrier(comm = mpi_comm())\n\nThe MPI barrier with optional argument. MPI syncronizing.\n\n\n\n\n\n","category":"function"},{"location":"RMPI.html#Rimu.RMPI.mpi_combine_walkers!-Tuple{Rimu.RMPI.MPIData, AbstractDVec}","page":"RMPI","title":"Rimu.RMPI.mpi_combine_walkers!","text":"mpi_combine_walkers!(target, source, [strategy])\n\nDistribute the entries of source to the target data structure such that all entries in the target are on the process with the correct mpi rank as controlled by targetrank(). MPI syncronizing.\n\nNote: the storage of the source is communicated rather than the source itself.\n\n\n\n\n\n","category":"method"},{"location":"RMPI.html#Rimu.RMPI.mpi_seed!","page":"RMPI","title":"Rimu.RMPI.mpi_seed!","text":"mpi_seed!(seed = rand(Random.RandomDevice(), UInt))\n\nRe-seed the random number generators in an MPI-safe way. If seed is provided, the random numbers from rand will follow a deterministic sequence.\n\nIndependence of the random number generators on different MPI ranks is achieved by adding hash(mpi_rank()) to seed.\n\n\n\n\n\n","category":"function"},{"location":"RMPI.html#Rimu.RMPI.next_mpiID","page":"RMPI","title":"Rimu.RMPI.next_mpiID","text":"next_mpiID()\n\nProduce a new ID number for MPI distributed objects. Uses an internal counter.\n\n\n\n\n\n","category":"function"},{"location":"RMPI.html#Rimu.RMPI.targetrank-Tuple{Union{Integer, AbstractFockAddress}, Any}","page":"RMPI","title":"Rimu.RMPI.targetrank","text":"targetrank(key, np)\n\nCompute the rank where the key belongs.\n\n\n\n\n\n","category":"method"},{"location":"RMPI.html#Rimu.RMPI.@mpi_root-Tuple","page":"RMPI","title":"Rimu.RMPI.@mpi_root","text":"@mpi_root expr\n\nEvaluate expression only on the root rank. Extra care needs to be taken as expr must not contain any code that involves syncronising MPI operations, i.e. actions that would require syncronous action of all MPI ranks.\n\nExample:\n\nwn = walkernumber(dv)   # an MPI syncronising function call that gathers\n                        # information from all MPI ranks\n@mpi_root @info \"The current walker number is\" wn # print info message on root only\n\n\n\n\n\n","category":"macro"},{"location":"RMPI.html#Index","page":"RMPI","title":"Index","text":"","category":"section"},{"location":"RMPI.html","page":"RMPI","title":"RMPI","text":"Pages   = [\"RMPI.md\"]","category":"page"},{"location":"testing.html#Code-testing","page":"Code testing","title":"Code testing","text":"","category":"section"},{"location":"testing.html","page":"Code testing","title":"Code testing","text":"The script runtest.jl in the test/ folder contains tests of the code. To run the test simply run the script from the Julia REPL or run","category":"page"},{"location":"testing.html","page":"Code testing","title":"Code testing","text":"Rimu$ julia test/runtest.jl","category":"page"},{"location":"testing.html","page":"Code testing","title":"Code testing","text":"from the command line.","category":"page"},{"location":"testing.html","page":"Code testing","title":"Code testing","text":"More tests should be added over time to test core functionality of the code. To add new tests, directly edit the file runtest.jl.","category":"page"},{"location":"testing.html#Automated-testing-with-GitHub-Actions","page":"Code testing","title":"Automated testing with GitHub Actions","text":"","category":"section"},{"location":"testing.html","page":"Code testing","title":"Code testing","text":"GitHub Actions are set up to run the test script automatically on the GitHub cloud server every time a new commit to the master branch is pushed to the server. The setup for this to happen is configured in the file actions.yml in the Rimu/.github/workflows folder.","category":"page"},{"location":"exactdiagonalization.html#Exact-Diagonalization","page":"Exact Diagonalization","title":"Exact Diagonalization","text":"","category":"section"},{"location":"exactdiagonalization.html","page":"Exact Diagonalization","title":"Exact Diagonalization","text":"The main functionality of Rimu for exact diagonalization is contained in the module ExactDiagonalization.","category":"page"},{"location":"exactdiagonalization.html","page":"Exact Diagonalization","title":"Exact Diagonalization","text":"ExactDiagonalization","category":"page"},{"location":"exactdiagonalization.html#Rimu.ExactDiagonalization","page":"Exact Diagonalization","title":"Rimu.ExactDiagonalization","text":"The module Rimu.ExactDiagonalization provides a framework for exact diagonalization of quantum many-body systems defined by an AbstractHamiltonian type.\n\nThe main usage is through defining an ExactDiagonalizationProblem and solving it with the solve function. The module provides a unified interface for accessing different solver algorithms, which make use of solvers provided by external packages.\n\nExports\n\nExactDiagonalizationProblem\nBasisSetRepresentation\nbuild_basis\nKrylovKitSolver\nLinearAlgebraSolver\nArpackSolver\nLOBPCGSolver\n\n\n\n\n\n","category":"module"},{"location":"exactdiagonalization.html#ExactDiagonalizationProblem","page":"Exact Diagonalization","title":"ExactDiagonalizationProblem","text":"","category":"section"},{"location":"exactdiagonalization.html","page":"Exact Diagonalization","title":"Exact Diagonalization","text":"ExactDiagonalizationProblem\nsolve(::ExactDiagonalizationProblem)\ninit(::ExactDiagonalizationProblem)","category":"page"},{"location":"exactdiagonalization.html#Rimu.ExactDiagonalization.ExactDiagonalizationProblem","page":"Exact Diagonalization","title":"Rimu.ExactDiagonalization.ExactDiagonalizationProblem","text":"ExactDiagonalizationProblem(hamiltonian::AbstractHamiltonian, [v0]; kwargs...)\n\nDefines an exact diagonalization problem with an AbstractHamiltonian hamiltonian. Optionally, a starting vector of type AbstractDVec, or a single address or a collection of addresses can be passed as v0.\n\nExactDiagonalizationProblems can be solved with solve.\n\nKeyword arguments\n\nalgorithm=LinearAlgebraSolver(): The algorithm to use for solving the problem. The   algorithm can also be specified as the second positional argument in the init   function.\nOptional keyword arguments will be passed on to the init and solve functions.\n\nAlgorithms\n\nLinearAlgebraSolver(): An algorithm for solving the problem using the   dense-matrix eigensolver from the LinearAlgebra standard library (eventually using   LAPACK). Only suitable for small matrices.\nKrylovKitSolver(matrix_free=true): An algorithm for finding a few eigenvalues   and vectors. With matrix_free=true the problem is solved without instatiating a   matrix. This is suitable for large dimensions. With matrix_free=false the problem is   solved after instantiating a sparse matrix. This is faster if sufficient memory is   available. Requires using KrylovKit.\nArpackSolver(): An algorithm for solving the problem after instantiating a   sparse matrix and using the Arpack Fortran library. Requires using Arpack.\nLOBPCGSolver(): An algorithm for solving the problem after instantiating a   sparse matrix using the LOBPCG method. Requires using IterativeSolvers.\n\nKeyword arguments for matrix-based algorithms (also accepted by init)\n\nSee BasisSetRepresentation for more information.\n\nsizelim: The maximum size of the basis set representation. The default is 10^6 for   sparse matrices and 10^5 for dense matrices.\ncutoff: A cutoff value for the basis set representation.\nfilter: A filter function for the basis set representation.\nnnzs = 0: The number of non-zero elements in the basis set representation. Setting a   non-zero value can speed up the computation.\ncol_hint = 0: A hint for the number of columns in the basis set representation.\nsort = false: Whether to sort the basis set representation.\n\nKeyword arguments for iterative algorithms (also accepted by solve)\n\nverbose = false: Whether to print additional information.\nabstol = nothing: The absolute tolerance for the solver. If nothing, the solver   chooses a default value.\nhowmany = 1: The minimum number of eigenvalues to compute.\nwhich = :SR: Whether to compute the largest or smallest eigenvalues.\nmaxiters = nothing: The maximum number of iterations for the solver. If nothing, the   solver chooses a default value.\n\nSolving an ExactDiagonalizationProblem\n\nThe solve function can be called directly on an ExactDiagonalizationProblem to solve it. Alternatively, the init function can be used to initialize a solver, which can then be solved with solve. The solve function returns a result type with the eigenvalues, eigenvectors, and convergence information.\n\nResult type\n\nThe result type for the solve function is determined by the algorithm used. It has the following fields:\n\nvalues::Vector: The eigenvalues.\nvectors::Vector{<:AbstractDVec}: The eigenvectors.\nsuccess::Bool: A boolean flag indicating whether the solver was successful.\ninfo: Convergence information.\nalgorithm: The algorithm used for the computation.\nproblem: The ExactDiagonalizationProblem that was solved.\nAdditional fields may be present depending on the algorithm used.\n\nIterating the result type will yield the eigenvalues, eigenvectors, and a boolean flag success in that order.\n\nExamples\n\njulia> p = ExactDiagonalizationProblem(HubbardReal1D(BoseFS(1,1,1)))\nExactDiagonalizationProblem(\n  HubbardReal1D(fs\"|1 1 1⟩\"; u=1.0, t=1.0),\n  nothing;\n  NamedTuple()...\n)\n\njulia> result = solve(p) # convert to dense matrix and solve with LinearAlgebra.eigen\nEDResult for algorithm LinearAlgebraSolver() with 10 eigenvalue(s),\n  values = [-5.09593, -1.51882, -1.51882, 1.55611, 1.6093, 1.6093, 4.0, 4.53982, 4.90952, 4.90952],\n  and vectors of length 10.\n  Convergence info: \"Dense matrix eigensolver solution from `LinearAlgebra.eigen`\", with howmany = 10 eigenvalues requested.\n  success = true.\n\njulia> using KrylovKit # an external package has to be installed and loaded\n\njulia> s = init(p; algorithm = KrylovKitSolver(true)) # solve without building a matrix\nKrylovKitDirectEDSolver\n with algorithm KrylovKitSolver(matrix_free = true,) for hamiltonian = HubbardReal1D(fs\"|1 1 1⟩\"; u=1.0, t=1.0),\n  v0 = 1-element PDVec: style = IsDeterministic{Float64}()\n  fs\"|1 1 1⟩\" => 1.0,\n  kwargs = NamedTuple()\n)\n\njulia> values, vectors, success = solve(s);\n\njulia> result.values[1] ≈ values[1]\ntrue\n\nSee also solve(::ExactDiagonalizationProblem), init(::ExactDiagonalizationProblem), KrylovKitSolver, ArpackSolver, LinearAlgebraSolver.\n\nnote: Note\nUsing the KrylovKitSolver() algorithms requires the KrylovKit.jl package. The package can be loaded with using KrylovKit. Using the ArpackSolver() algorithm requires the Arpack.jl package. The package can be loaded with using Arpack. Using the LOBPCGSolver() algorithm requires the IterativeSolvers.jl package. The package can be loaded with using IterativeSolvers.\n\n\n\n\n\n","category":"type"},{"location":"exactdiagonalization.html#CommonSolve.solve-Tuple{ExactDiagonalizationProblem}","page":"Exact Diagonalization","title":"CommonSolve.solve","text":"solve(p::ExactDiagonalizationProblem, [algorithm]; kwargs...)\n\nSolve an ExactDiagonalizationProblem p directly. Optionally specify an algorithm. Returns a result type with the eigenvalues, eigenvectors, and convergence information.\n\nFor a description of the keyword arguments, see the documentation for ExactDiagonalizationProblem.\n\nSee also solve(::ProjectorMonteCarloProblem).\n\n\n\n\n\n","category":"method"},{"location":"exactdiagonalization.html#CommonSolve.init-Tuple{ExactDiagonalizationProblem}","page":"Exact Diagonalization","title":"CommonSolve.init","text":"init(p::ExactDiagonalizationProblem, [algorithm]; kwargs...)\n\nInitialize a solver for an ExactDiagonalizationProblem p with an optional algorithm. Returns a solver instance that can be solved with solve.\n\nFor a description of the keyword arguments, see the documentation for ExactDiagonalizationProblem.\n\n\n\n\n\n","category":"method"},{"location":"exactdiagonalization.html#Solver-algorithms","page":"Exact Diagonalization","title":"Solver algorithms","text":"","category":"section"},{"location":"exactdiagonalization.html","page":"Exact Diagonalization","title":"Exact Diagonalization","text":"KrylovKitSolver\nLinearAlgebraSolver\nArpackSolver\nLOBPCGSolver","category":"page"},{"location":"exactdiagonalization.html#Rimu.ExactDiagonalization.KrylovKitSolver","page":"Exact Diagonalization","title":"Rimu.ExactDiagonalization.KrylovKitSolver","text":"KrylovKitSolver(matrix_free::Bool; kwargs...)\nKrylovKitSolver(; matrix_free = false, kwargs...)\n\nAlgorithm for solving a large ExactDiagonalizationProblem to find a few eigenvalues and vectors using the KrylovKit.jl package. The Lanczos method is used for hermitian matrices, and the Arnoldi method is used for non-hermitian matrices.\n\nArguments\n\nmatrix_free = false: Whether to use a matrix-free algorithm. If false, a sparse matrix   will be instantiated. This is typically faster and recommended for small matrices,   but requires more memory. If true, the matrix is not instantiated, which is useful for   large matrices that would not fit into memory. The calculation will parallelise using   threading and MPI if available by making use of PDVec.\nkwargs: Additional keyword arguments are passed on to the function   KrylovKit.eigsolve().\n\nSee also ExactDiagonalizationProblem, solve.\n\nnote: Note\nRequires the KrylovKit.jl package to be loaded with using KrylovKit.\n\n\n\n\n\n","category":"type"},{"location":"exactdiagonalization.html#Rimu.ExactDiagonalization.LinearAlgebraSolver","page":"Exact Diagonalization","title":"Rimu.ExactDiagonalization.LinearAlgebraSolver","text":"LinearAlgebraSolver(; kwargs...)\n\nAlgorithm for solving an ExactDiagonalizationProblem using the dense-matrix eigensolver from the LinearAlgebra standard library. This is only suitable for small matrices.\n\nThe kwargs are passed on to function LinearAlgebra.eigen.\n\nKeyword arguments\n\npermute = true: Whether to permute the matrix before diagonalization.\nscale = true: Whether to scale the matrix before diagonalization.\nsortby: The sorting order for the eigenvalues.\n\nSee also ExactDiagonalizationProblem, solve.\n\n\n\n\n\n","category":"type"},{"location":"exactdiagonalization.html#Rimu.ExactDiagonalization.ArpackSolver","page":"Exact Diagonalization","title":"Rimu.ExactDiagonalization.ArpackSolver","text":"ArpackSolver(; kwargs...)\n\nAlgorithm for solving an ExactDiagonalizationProblem after instantiating a sparse matrix. It uses the Lanzcos method for hermitian problems, and the Arnoldi method for non-hermitian problems, using the Arpack Fortran library. This is faster than KrylovKitSolver(; matrix_free=true), but it requires more memory and will only be useful if the matrix fits into memory.\n\nThe kwargs are passed on to the function Arpack.eigs().\n\nSee also ExactDiagonalizationProblem, solve.\n\nnote: Note\nRequires the Arpack.jl package to be loaded with using Arpack.\n\n\n\n\n\n","category":"type"},{"location":"exactdiagonalization.html#Rimu.ExactDiagonalization.LOBPCGSolver","page":"Exact Diagonalization","title":"Rimu.ExactDiagonalization.LOBPCGSolver","text":"LOBPCGSolver(; kwargs...)\n\nThe Locally Optimal Block Preconditioned Conjugate Gradient Method (LOBPCG). Algorithm for solving an ExactDiagonalizationProblem after instantiating a sparse matrix.\n\nLOBPCG is not suitable for non-hermitian eigenvalue problems.\n\nThe kwargs are passed on to the function IterativeSolvers.lobpcg().\n\nSee also ExactDiagonalizationProblem, solve.\n\nnote: Note\nRequires the IterativeSolvers.jl package to be loaded with using IterativeSolvers.\n\n\n\n\n\n","category":"type"},{"location":"exactdiagonalization.html#Converting-a-Hamiltonian-in-to-a-matrix","page":"Exact Diagonalization","title":"Converting a Hamiltonian in to a matrix","text":"","category":"section"},{"location":"exactdiagonalization.html","page":"Exact Diagonalization","title":"Exact Diagonalization","text":"BasisSetRepresentation\nbuild_basis\nMatrix\nsparse","category":"page"},{"location":"exactdiagonalization.html#Rimu.ExactDiagonalization.BasisSetRepresentation","page":"Exact Diagonalization","title":"Rimu.ExactDiagonalization.BasisSetRepresentation","text":"BasisSetRepresentation(\n    hamiltonian::AbstractHamiltonian, addr=starting_address(hamiltonian);\n    sizelim=10^6, nnzs, cutoff, filter, sort=false, kwargs...\n)\nBasisSetRepresentation(hamiltonian::AbstractHamiltonian, addresses::AbstractVector; kwargs...)\n\nEagerly construct the basis set representation of the operator hamiltonian with all addresses reachable from addr. Instead of a single address, a vector of addresses can be passed.\n\nAn ArgumentError is thrown if dimension(hamiltonian) > sizelim in order to prevent memory overflow. Set sizelim = Inf in order to disable this behaviour.\n\nProviding the number nnzs of expected calculated matrix elements and col_hint for the estimated number of nonzero off-diagonal matrix elements in each matrix column may improve performance.\n\nProviding an energy cutoff will skip the columns and rows with diagonal elements greater than cutoff. Alternatively, an arbitrary filter function can be used instead. Addresses passed as arguments are not filtered. To generate the matrix truncated to the subspace spanned by the addresses, use filter = Returns(false).\n\nSetting sort to true will sort the matrix rows and columns. This is useful when the order of the columns matters, e.g. when comparing matrices. Any additional keyword arguments are passed on to Base.sortperm.\n\nFields\n\nsparse_matrix: sparse matrix representing hamiltonian in the basis basis\nbasis: vector of addresses\nhamiltonian: the Hamiltonian hamiltonian\n\nExample\n\njulia> hamiltonian = HubbardReal1D(BoseFS(1,0,0));\n\njulia> bsr = BasisSetRepresentation(hamiltonian)\nBasisSetRepresentation(HubbardReal1D(fs\"|1 0 0⟩\"; u=1.0, t=1.0)) with dimension 3 and 9 stored entries:3×3 SparseArrays.SparseMatrixCSC{Float64, Int64} with 9 stored entries:\n  0.0  -1.0  -1.0\n -1.0   0.0  -1.0\n -1.0  -1.0   0.0\n\njulia> BasisSetRepresentation(hamiltonian, bsr.basis[1:2]; filter = Returns(false)) # passing addresses and truncating\nBasisSetRepresentation(HubbardReal1D(fs\"|1 0 0⟩\"; u=1.0, t=1.0)) with dimension 2 and 4 stored entries:2×2 SparseArrays.SparseMatrixCSC{Float64, Int64} with 4 stored entries:\n  0.0  -1.0\n -1.0   0.0\n\njulia> using LinearAlgebra; round.(eigvals(Matrix(bsr)); digits = 4) # eigenvalues\n3-element Vector{Float64}:\n -2.0\n  1.0\n  1.0\n\njulia> ev = eigvecs(Matrix(bsr))[:,1]; ev = ev .* sign(ev[1]) # ground state eigenvector\n3-element Vector{Float64}:\n 0.5773502691896257\n 0.5773502691896255\n 0.5773502691896257\n\njulia> dv = DVec(zip(bsr.basis, ev)) # ground state as DVec\nDVec{BoseFS{1, 3, BitString{3, 1, UInt8}},Float64} with 3 entries, style = IsDeterministic{Float64}()\n  fs\"|0 0 1⟩\" => 0.57735\n  fs\"|0 1 0⟩\" => 0.57735\n  fs\"|1 0 0⟩\" => 0.57735\n\nHas methods for dimension, sparse, Matrix, starting_address.\n\nPart of the AbstractHamiltonian interface. See also build_basis.\n\n\n\n\n\n","category":"type"},{"location":"exactdiagonalization.html#Rimu.ExactDiagonalization.build_basis","page":"Exact Diagonalization","title":"Rimu.ExactDiagonalization.build_basis","text":"build_basis(\n    ham, address=starting_address(ham);\n    cutoff, filter, sizelim, sort=false, kwargs...\n) -> basis\nbuild_basis(ham, addresses::AbstractVector; kwargs...)\n\nGet all basis element of a linear operator ham that are reachable (via non-zero matrix elements) from the address address, returned as a vector. Instead of a single address, a vector of addresses can be passed. Does not return the matrix, for that purpose use BasisSetRepresentation.\n\nProviding an energy cutoff will skip addresses with diagonal elements greater than cutoff. Alternatively, an arbitrary filter function can be used instead. Addresses passed as arguments are not filtered. A maximum basis size sizelim can be set which will throw an error if the expected dimension of ham is larger than sizelim. This may be useful when memory may be a concern. These options are disabled by default.\n\nSetting sort to true will sort the basis. Any additional keyword arguments are passed on to Base.sort!.\n\n\n\n\n\n","category":"function"},{"location":"exactdiagonalization.html#Base.Matrix","page":"Exact Diagonalization","title":"Base.Matrix","text":"Matrix(\n    hamiltonian::AbstractHamiltonian, addr=starting_address(hamiltonian);\n    sizelim=10^4, kwargs...\n)\nMatrix(bsr::BasisSetRepresentation)\n\nReturn a dense matrix representation of hamiltonian or bsr. kwargs are passed to BasisSetRepresentation.\n\nSee BasisSetRepresentation.\n\n\n\n\n\n","category":"type"},{"location":"exactdiagonalization.html#SparseArrays.sparse","page":"Exact Diagonalization","title":"SparseArrays.sparse","text":"sparse(hamiltonian::AbstractHamiltonian, addr=starting_address(hamiltonian); kwargs...)\nsparse(bsr::BasisSetRepresentation)\n\nReturn a sparse matrix representation of hamiltonian or bsr. kwargs are passed to BasisSetRepresentation.\n\nSee BasisSetRepresentation.\n\n\n\n\n\n","category":"function"},{"location":"exactdiagonalization.html#Deprecated","page":"Exact Diagonalization","title":"Deprecated","text":"","category":"section"},{"location":"exactdiagonalization.html","page":"Exact Diagonalization","title":"Exact Diagonalization","text":"BasisSetRep","category":"page"},{"location":"exactdiagonalization.html#Rimu.ExactDiagonalization.BasisSetRep","page":"Exact Diagonalization","title":"Rimu.ExactDiagonalization.BasisSetRep","text":"BasisSetRep(args...; kwargs...)\n\nBasisSetRep is deprecated. Use BasisSetRepresentation instead.\n\n\n\n\n\n","category":"function"},{"location":"randomnumbers.html#Random-numbers-in-Rimu","page":"Random numbers","title":"Random numbers in Rimu","text":"","category":"section"},{"location":"randomnumbers.html","page":"Random numbers","title":"Random numbers","text":"Rimu uses Julia's built-in random number generator, which currently defaults to Xoshiro256++.","category":"page"},{"location":"randomnumbers.html#Reproducibility","page":"Random numbers","title":"Reproducibility","text":"","category":"section"},{"location":"randomnumbers.html","page":"Random numbers","title":"Random numbers","text":"If you want FCIQMC runs to be reproducible, make sure to seed the RNG with Random.seed!.","category":"page"},{"location":"randomnumbers.html","page":"Random numbers","title":"Random numbers","text":"MPI-distributed runs can also be made reproducible by seeding the RNG with Rimu.RMPI.mpi_seed!.","category":"page"},{"location":"documentation.html#Documentation-generation","page":"Documentation generation","title":"Documentation generation","text":"","category":"section"},{"location":"documentation.html","page":"Documentation generation","title":"Documentation generation","text":"We are using Documenter.jl to generate the documentation web site based on markdown files stored in docs/src. Please help keeping the documentation up-to-date by editing the markdown files! For instructions on how to write appropriate documentation please refer to the relevant chapter in the Julia documentation and the Documenter.jl documentation.","category":"page"},{"location":"documentation.html#Generating-the-documentation-web-site","page":"Documentation generation","title":"Generating the documentation web site","text":"","category":"section"},{"location":"documentation.html","page":"Documentation generation","title":"Documentation generation","text":"The documentation pages can be generated by running the build script by typing","category":"page"},{"location":"documentation.html","page":"Documentation generation","title":"Documentation generation","text":"Rimu$ julia --project=docs docs/make.jl","category":"page"},{"location":"documentation.html","page":"Documentation generation","title":"Documentation generation","text":"on the shell prompt from the Rimu/ folder. A complete image of the static documentation web site will be generated in the folder docs/build/. It can be viewed locally by pointing a web browser to file docs/build/index.html, or by deploying it to the GitHub pages web server.","category":"page"},{"location":"documentation.html#Automatic-documentation-generation-and-deployment","page":"Documentation generation","title":"Automatic documentation generation and deployment","text":"","category":"section"},{"location":"documentation.html","page":"Documentation generation","title":"Documentation generation","text":"Our documentation is hosted on GitHub pages. The documentation web site can be built and deployed automatically with GitHub Actions. This needs to be set up with an appropriate script in the file .github/workflows/docs.yml, where triggers for this to happen can be defined. In the current set up, a new documentation web site is generated and deployed whenever someone pushes to the develop branch on the GitHub server. The updated documentation can then be accessed here.","category":"page"},{"location":"documentation.html","page":"Documentation generation","title":"Documentation generation","text":"Previews for pull-requests can be accessed by replacing 101 in the following link with the PR number: https://joachimbrand.github.io/Rimu.jl/previews/PR101/","category":"page"},{"location":"documentation.html#Example-scripts","page":"Documentation generation","title":"Example scripts","text":"","category":"section"},{"location":"documentation.html","page":"Documentation generation","title":"Documentation generation","text":"Examples should be added to the scripts folder, in the form of .jl files suitable for  parsing by Literate. The process of generating  documentation is automated in the docs/make.jl file and assumes that the following line is  at (or near) the top of the script:","category":"page"},{"location":"documentation.html","page":"Documentation generation","title":"Documentation generation","text":"# # Example N: Title","category":"page"},{"location":"documentation.html","page":"Documentation generation","title":"Documentation generation","text":"where the number N and Title will be extracted automatically.","category":"page"},{"location":"documentation.html","page":"Documentation generation","title":"Documentation generation","text":"Tests for the results and output of specific scripts should be added at the end of each example. The code to run the test should be hidden from the final generated document by appending \"#hide\" to each line of testing code. For example, ","category":"page"},{"location":"documentation.html","page":"Documentation generation","title":"Documentation generation","text":"using Test                          #hide\n@test isfile(\"result.out\")          #hide\n@test result == expected_result     #hide","category":"page"},{"location":"addresses.html#Module-BitStringAddresses","page":"BitString addresses","title":"Module BitStringAddresses","text":"","category":"section"},{"location":"addresses.html","page":"BitString addresses","title":"BitString addresses","text":"This module contains the implementations of BitString and various Fock addresses. The addresses serve as a basis for a Hamiltonian.","category":"page"},{"location":"addresses.html","page":"BitString addresses","title":"BitString addresses","text":"While there are not restrictions on the type of address a Hamiltonian uses, Rimu provides implementations for Bosonic, Fermionic, and mixed Fock States.","category":"page"},{"location":"addresses.html","page":"BitString addresses","title":"BitString addresses","text":"When implementing a new address type, care must be taken to make them space-efficient and stack-allocated - avoid using (heap-allocated) arrays to represent your addresses at all costs!","category":"page"},{"location":"addresses.html#Fock-addresses","page":"BitString addresses","title":"Fock addresses","text":"","category":"section"},{"location":"addresses.html","page":"BitString addresses","title":"BitString addresses","text":"Rimu provides a variety of address implementations that should make it straightforward to implement efficient Hamiltonians. Examples are:","category":"page"},{"location":"addresses.html","page":"BitString addresses","title":"BitString addresses","text":"BoseFS Single-component bosonic Fock state with fixed particle and mode number.\nFermiFS Single-component fermionic Fock state with fixed particle and mode number.\nCompositeFS Multi-component Fock state composed of the above types.\nOccupationNumberFS Single-component bosonic Fock state with a fixed number of modes. The number of particles is not part of the type and can be changed by operators.","category":"page"},{"location":"addresses.html#Fock-address-API","page":"BitString addresses","title":"Fock address API","text":"","category":"section"},{"location":"addresses.html","page":"BitString addresses","title":"BitString addresses","text":"Modules = [BitStringAddresses]\nPages = [\"fockaddress.jl\",\"bosefs.jl\",\"fermifs.jl\",\"multicomponent.jl\",\"occupationnumberfs.jl\"]\nPrivate = false","category":"page"},{"location":"addresses.html#Rimu.BitStringAddresses.AbstractFockAddress","page":"BitString addresses","title":"Rimu.BitStringAddresses.AbstractFockAddress","text":"AbstractFockAddress{N,M}\n\nAbstract type representing a Fock state with N particles and M modes.\n\nSee also SingleComponentFockAddress, CompositeFS, BoseFS, FermiFS.\n\n\n\n\n\n","category":"type"},{"location":"addresses.html#Rimu.BitStringAddresses.BoseFSIndex","page":"BitString addresses","title":"Rimu.BitStringAddresses.BoseFSIndex","text":"BoseFSIndex\n\nStruct used for indexing and performing excitations on a BoseFS.\n\nFields:\n\noccnum: the occupation number.\nmode: the index of the mode.\noffset: the position of the mode in the address. This is the bit offset of the mode when\n\nthe address is represented by a bitstring, and the position in the list when it is  represented by SortedParticleList.\n\n\n\n\n\n","category":"type"},{"location":"addresses.html#Rimu.BitStringAddresses.FermiFSIndex","page":"BitString addresses","title":"Rimu.BitStringAddresses.FermiFSIndex","text":"FermiFSIndex\n\nStruct used for indexing and performing excitations on a FermiFS.\n\nFields:\n\noccnum: the occupation number.\nmode: the index of the mode.\noffset: the position of the mode in the address. This is mode - 1 when the address is represented by a bitstring, and the position in the list when using SortedParticleList.\n\n\n\n\n\n","category":"type"},{"location":"addresses.html#Rimu.BitStringAddresses.OccupiedModeMap","page":"BitString addresses","title":"Rimu.BitStringAddresses.OccupiedModeMap","text":"OccupiedModeMap(addr) <: AbstractVector\n\nGet a map of occupied modes in address as an AbstractVector of indices compatible with excitation - BoseFSIndex or FermiFSIndex.\n\nOccupiedModeMap(addr)[i] contains the index for the i-th occupied mode. This is useful because repeatedly looking for occupied modes with find_occupied_mode can be time-consuming. OccupiedModeMap(addr) is an eager version of the iterator returned by occupied_modes. It is similar to onr but contains more information.\n\nExample\n\njulia> b = BoseFS(10, 0, 0, 0, 2, 0, 1)\nBoseFS{13,7}(10, 0, 0, 0, 2, 0, 1)\n\njulia> mb = OccupiedModeMap(b)\n3-element OccupiedModeMap{7, BoseFSIndex}:\n BoseFSIndex(occnum=10, mode=1, offset=0)\n BoseFSIndex(occnum=2, mode=5, offset=14)\n BoseFSIndex(occnum=1, mode=7, offset=18)\n\njulia> f = FermiFS(1,1,1,1,0,0,1,0,0)\nFermiFS{5,9}(1, 1, 1, 1, 0, 0, 1, 0, 0)\n\njulia> mf = OccupiedModeMap(f)\n5-element OccupiedModeMap{5, FermiFSIndex}:\n FermiFSIndex(occnum=1, mode=1, offset=0)\n FermiFSIndex(occnum=1, mode=2, offset=1)\n FermiFSIndex(occnum=1, mode=3, offset=2)\n FermiFSIndex(occnum=1, mode=4, offset=3)\n FermiFSIndex(occnum=1, mode=7, offset=6)\n\njulia> mf == collect(occupied_modes(f))\ntrue\n\njulia> dot(mf, mb)\n11\n\njulia> dot(mf, 1:20)\n17\n\nSee also dot, SingleComponentFockAddress.\n\n\n\n\n\n","category":"type"},{"location":"addresses.html#Rimu.BitStringAddresses.OccupiedPairsMap","page":"BitString addresses","title":"Rimu.BitStringAddresses.OccupiedPairsMap","text":"OccupiedPairsMap(addr::SingleComponentFockAddress) <: AbstractVector\n\nGet a map of all distinct pairs of indices in addr. Pairs involving multiply-occupied modes are counted once, (including self-pairing). This is useful for cases where identifying pairs of particles for eg. interactions is not well-defined or efficient to do on the fly. This is an eager iterator whose elements are a tuple of particle indices that can be given to excitation\n\nExample\n\njulia> addr = BoseFS(10, 0, 0, 0, 2, 0, 1)\nBoseFS{13,7}(10, 0, 0, 0, 2, 0, 1)\n\njulia> pairs = OccupiedPairsMap(addr)\n5-element OccupiedPairsMap{78, Tuple{BoseFSIndex, BoseFSIndex}}:\n (BoseFSIndex(occnum=10, mode=1, offset=0), BoseFSIndex(occnum=10, mode=1, offset=0))\n (BoseFSIndex(occnum=2, mode=5, offset=14), BoseFSIndex(occnum=2, mode=5, offset=14))\n (BoseFSIndex(occnum=2, mode=5, offset=14), BoseFSIndex(occnum=10, mode=1, offset=0))\n (BoseFSIndex(occnum=1, mode=7, offset=18), BoseFSIndex(occnum=10, mode=1, offset=0))\n (BoseFSIndex(occnum=1, mode=7, offset=18), BoseFSIndex(occnum=2, mode=5, offset=14))\n\njulia> excitation(addr, pairs[2], pairs[4])\n(BoseFS{13,7}(9, 0, 0, 0, 4, 0, 0), 10.954451150103322)\n\nSee also OccupiedModeMap.\n\n\n\n\n\n","category":"type"},{"location":"addresses.html#Rimu.BitStringAddresses.SingleComponentFockAddress","page":"BitString addresses","title":"Rimu.BitStringAddresses.SingleComponentFockAddress","text":"SingleComponentFockAddress{N,M} <: AbstractFockAddress{N,M}\n\nA type representing a single component Fock state with N particles and M modes.\n\nImplemented subtypes: BoseFS, FermiFS.\n\nSupported functionality\n\nfind_mode\nfind_occupied_mode\nnum_occupied_modes\noccupied_modes: Lazy iterator.\nOccupiedModeMap: AbstractVector with eager construction.\nexcitation: Create a new address.\nBoseFSIndex and FermiFSIndex for indexing.\n\nSee also CompositeFS, AbstractFockAddress.\n\n\n\n\n\n","category":"type"},{"location":"addresses.html#Rimu.BitStringAddresses.excitation","page":"BitString addresses","title":"Rimu.BitStringAddresses.excitation","text":"excitation(addr::SingleComponentFockAddress, creations::NTuple, destructions::NTuple)\n\nGenerate an excitation on address addr by applying creations and destructions, which are tuples of the appropriate address indices (i.e. BoseFSIndex for bosons, or FermiFSIndex for fermions).\n\na^_c_1 a^_c_2 ldots a_d_1 a_d_2 ldots mathrmaddrrangle to\nαmathrmnaddrrangle\n\nReturns the new address naddr and the factor α. The value of α is given by the square root of the product of mode occupations before destruction and after creation. If the excitation is illegal, returns an arbitrary address and the value 0.0.\n\nExample\n\njulia> f = FermiFS(1,1,0,0,1,1,1,1)\nFermiFS{6,8}(1, 1, 0, 0, 1, 1, 1, 1)\n\njulia> i, j, k, l = find_mode(f, (3,4,2,5))\n(FermiFSIndex(occnum=0, mode=3, offset=2), FermiFSIndex(occnum=0, mode=4, offset=3), FermiFSIndex(occnum=1, mode=2, offset=1), FermiFSIndex(occnum=1, mode=5, offset=4))\n\njulia> excitation(f, (i,j), (k,l))\n(FermiFS{6,8}(1, 0, 1, 1, 0, 1, 1, 1), -1.0)\n\nSee SingleComponentFockAddress.\n\n\n\n\n\n","category":"function"},{"location":"addresses.html#Rimu.BitStringAddresses.find_mode","page":"BitString addresses","title":"Rimu.BitStringAddresses.find_mode","text":"find_mode(::SingleComponentFockAddress, i)\n\nFind the i-th mode in address. Returns BoseFSIndex for BoseFS, and FermiFSIndex for FermiFS. Can work on a tuple of modes. Does not check bounds.\n\njulia> find_mode(BoseFS(1, 0, 2), 2)\nBoseFSIndex(occnum=0, mode=2, offset=2)\n\njulia> find_mode(FermiFS(1, 1, 1, 0), (2,3))\n(FermiFSIndex(occnum=1, mode=2, offset=1), FermiFSIndex(occnum=1, mode=3, offset=2))\n\nSee SingleComponentFockAddress.\n\n\n\n\n\n","category":"function"},{"location":"addresses.html#Rimu.BitStringAddresses.find_occupied_mode","page":"BitString addresses","title":"Rimu.BitStringAddresses.find_occupied_mode","text":"find_occupied_mode(::SingleComponentFockAddress, k)\nfind_occupied_mode(::BoseFS, k, [n])\n\nFind the k-th occupied mode in address (with at least n particles). Returns BoseFSIndex for BoseFS, and FermiFSIndex for FermiFS. When unsuccessful it returns a zero index.\n\nExample\n\njulia> find_occupied_mode(FermiFS(1, 1, 1, 0), 2)\nFermiFSIndex(occnum=1, mode=2, offset=1)\n\njulia> find_occupied_mode(BoseFS(1, 0, 2), 1)\nBoseFSIndex(occnum=1, mode=1, offset=0)\n\njulia> find_occupied_mode(BoseFS(1, 0, 2), 1, 2)\nBoseFSIndex(occnum=2, mode=3, offset=3)\n\nSee also occupied_modes, OccupiedModeMap, SingleComponentFockAddress.\n\n\n\n\n\n","category":"function"},{"location":"addresses.html#Rimu.BitStringAddresses.num_components-Tuple{AbstractFockAddress}","page":"BitString addresses","title":"Rimu.BitStringAddresses.num_components","text":"num_components(::Type{<:AbstractFockAddress})\nnum_components(::AbstractFockAddress)\n\nNumber of components in address.\n\n\n\n\n\n","category":"method"},{"location":"addresses.html#Rimu.BitStringAddresses.num_modes-Tuple{AbstractFockAddress}","page":"BitString addresses","title":"Rimu.BitStringAddresses.num_modes","text":"num_modes(::Type{<:AbstractFockAddress})\nnum_modes(::AbstractFockAddress)\n\nNumber of modes represented by address.\n\n\n\n\n\n","category":"method"},{"location":"addresses.html#Rimu.BitStringAddresses.num_occupied_modes","page":"BitString addresses","title":"Rimu.BitStringAddresses.num_occupied_modes","text":"num_occupied_modes(::SingleComponentFockAddress)\n\nGet the number of occupied modes in address. Equivalent to length(occupied_modes(address)), or the number of non-zeros in its ONR representation.\n\nExample\n\njulia> num_occupied_modes(BoseFS((1, 0, 2)))\n2\njulia> num_occupied_modes(FermiFS((1, 1, 1, 0)))\n3\n\nSee SingleComponentFockAddress.\n\n\n\n\n\n","category":"function"},{"location":"addresses.html#Rimu.BitStringAddresses.num_particles-Tuple{AbstractFockAddress}","page":"BitString addresses","title":"Rimu.BitStringAddresses.num_particles","text":"num_particles(::Type{<:AbstractFockAddress})\nnum_particles(::AbstractFockAddress)\n\nNumber of particles represented by address.\n\n\n\n\n\n","category":"method"},{"location":"addresses.html#Rimu.BitStringAddresses.occupied_modes","page":"BitString addresses","title":"Rimu.BitStringAddresses.occupied_modes","text":"occupied_modes(::SingleComponentFockAddress)\n\nReturn a lazy iterator over all occupied modes in an address. Iterates over BoseFSIndexs for BoseFS, and over FermiFSIndexs for FermiFS. See OccupiedModeMap for an eager version.\n\nExample\n\njulia> b = BoseFS((1,5,0,4));\n\njulia> foreach(println, occupied_modes(b))\nBoseFSIndex(occnum=1, mode=1, offset=0)\nBoseFSIndex(occnum=5, mode=2, offset=2)\nBoseFSIndex(occnum=4, mode=4, offset=9)\n\njulia> f = FermiFS((1,1,0,1,0,0,1));\n\njulia> foreach(println, occupied_modes(f))\nFermiFSIndex(occnum=1, mode=1, offset=0)\nFermiFSIndex(occnum=1, mode=2, offset=1)\nFermiFSIndex(occnum=1, mode=4, offset=3)\nFermiFSIndex(occnum=1, mode=7, offset=6)\n\nSee also find_occupied_mode, SingleComponentFockAddress.\n\n\n\n\n\n","category":"function"},{"location":"addresses.html#Rimu.BitStringAddresses.onr","page":"BitString addresses","title":"Rimu.BitStringAddresses.onr","text":"occupation_number_representation(fs::SingleComponentFockAddress)\nonr(fs::SingleComponentFockAddress)\n\nCompute and return the occupation number representation of the Fock state fs as an SVector{M}, where M is the number of modes.\n\n\n\n\n\n","category":"function"},{"location":"addresses.html#Rimu.BitStringAddresses.@fs_str-Tuple{Any}","page":"BitString addresses","title":"Rimu.BitStringAddresses.@fs_str","text":"fs\"$(string)\"\n\nParse the compact representation of a Fock state. Useful for copying the printout from a vector to the REPL.\n\nExample\n\njulia> DVec(BoseFS{3,4}(0, 1, 2, 0) => 1)\nDVec{BoseFS{3, 4, BitString{6, 1, UInt8}},Int64} with 1 entry, style = IsStochasticInteger{Int64}()\n  fs\"|0 1 2 0⟩\" => 1\n\njulia> fs\"|0 1 2 0⟩\" => 1 # Copied from above printout\nBoseFS{3,4}(0, 1, 2, 0) => 1\n\njulia> fs\"|1 2 3⟩⊗|0 1 0⟩\" # composite bosonic Fock state\nCompositeFS(\n  BoseFS{6,3}(1, 2, 3),\n  BoseFS{1,3}(0, 1, 0),\n)\n\njulia> fs\"|↑↓↑⟩\" # construct a fermionic Fock state\nCompositeFS(\n  FermiFS{2,3}(1, 0, 1),\n  FermiFS{1,3}(0, 1, 0),\n)\n\njulia> s = fs\"|0 1 2 0⟩{}\" # constructing OccupationNumberFS with default UInt8 container\nOccupationNumberFS{4, UInt8}(0, 1, 2, 0)\n\njulia> [s] # prints out with the signifcant number of bits specified in braces\n1-element Vector{OccupationNumberFS{4, UInt8}}:\n fs\"|0 1 2 0⟩{8}\"\n\nSee also FermiFS, BoseFS, CompositeFS, FermiFS2C, OccupationNumberFS.\n\n\n\n\n\n","category":"macro"},{"location":"addresses.html#Rimu.BitStringAddresses.BoseFS","page":"BitString addresses","title":"Rimu.BitStringAddresses.BoseFS","text":"BoseFS{N,M,S} <: SingleComponentFockAddress\n\nAddress type that represents a Fock state of N spinless bosons in M modes by wrapping a BitString, or a SortedParticleList. Which is wrapped is chosen automatically based on the properties of the address.\n\nConstructors\n\nBoseFS{[N,M]}(val::Integer...): Create BoseFS{N,M} from occupation numbers. This is type-stable if the number of modes M and the number of particles N are provided. Otherwise, M and N are inferred from the arguments.\nBoseFS{[N,M]}(onr): Create BoseFS{N,M} from occupation number representation, see onr. This is efficient if N and M are provided, and onr is a statically-sized collection, such as a Tuple or SVector.\nBoseFS{[N,M]}([M, ]pairs...): Provide the number of modes M and mode => occupation_number pairs. If M is provided as a type parameter, it should not be provided as the first argument.  Useful for creating sparse addresses. pairs can be multiple arguments or an iterator of pairs.\nBoseFS{N,M,S}(bs::S): Unsafe constructor. Does not check whether the number of particles in bs is equal to N.\n@fs_str: Addresses are sometimes printed in a compact manner. This representation can also be used as a constructor. See the last example below.\n\nExamples\n\njulia> BoseFS{6,5}(0, 1, 2, 3, 0)\nBoseFS{6,5}(0, 1, 2, 3, 0)\n\njulia> BoseFS([abs(i - 3) ≤ 1 ? i - 1 : 0 for i in 1:5])\nBoseFS{6,5}(0, 1, 2, 3, 0)\n\njulia> BoseFS(5, 2 => 1, 3 => 2, 4 => 3)\nBoseFS{6,5}(0, 1, 2, 3, 0)\n\njulia> BoseFS{6,5}(i => i - 1 for i in 2:4)\nBoseFS{6,5}(0, 1, 2, 3, 0)\n\njulia> fs\"|0 1 2 3 0⟩\"\nBoseFS{6,5}(0, 1, 2, 3, 0)\n\njulia> fs\"|b 5: 2 3 3 4 4 4⟩\"\nBoseFS{6,5}(0, 1, 2, 3, 0)\n\nSee also: SingleComponentFockAddress, OccupationNumberFS, FermiFS, CompositeFS, FermiFS2C.\n\n\n\n\n\n","category":"type"},{"location":"addresses.html#Rimu.BitStringAddresses.bose_hubbard_interaction-Union{Tuple{BoseFS{<:Any, <:Any, A}}, Tuple{A}} where A<:BitString","page":"BitString addresses","title":"Rimu.BitStringAddresses.bose_hubbard_interaction","text":"bose_hubbard_interaction(address)\n\nReturn Σ_i n_i (n_i-1) for computing the Bose-Hubbard on-site interaction (without the U prefactor.)\n\nExample\n\njulia> Hamiltonians.bose_hubbard_interaction(BoseFS{4,4}((2,1,1,0)))\n2\njulia> Hamiltonians.bose_hubbard_interaction(BoseFS{4,4}((3,0,1,0)))\n6\n\n\n\n\n\n","category":"method"},{"location":"addresses.html#Rimu.BitStringAddresses.hopnextneighbour-Union{Tuple{A}, Tuple{M}, Tuple{N}, Tuple{BoseFS{N, M, A}, Any}} where {N, M, A<:BitString}","page":"BitString addresses","title":"Rimu.BitStringAddresses.hopnextneighbour","text":"new_address, value = hopnextneighbour(add, chosen, boundary_condition)\n\nCompute the new address of a hopping event for the Hubbard model. Returns the new address and the square root of product of occupation numbers of the involved modes multiplied by a term consistent with boundary condition as the value.  The following boundary conditions are supported:\n\n:periodic: hopping over the boundary gives does not change the value.\n:twisted: hopping over the boundary flips the sign of the value.\n:hard_wall: hopping over the boundary gives a value of zero.\nθ <: Number: hopping over the boundary gives a value multiplied by exp(iθ) or exp(iθ) depending on the direction of hopping.\n\nThe off-diagonals are indexed as follows:\n\n(chosen + 1) ÷ 2 selects the hopping site.\nEven chosen indicates a hop to the left.\nOdd chosen indicates a hop to the right.\n\nExample\n\njulia> using Rimu.Hamiltonians: hopnextneighbour\n\njulia> hopnextneighbour(BoseFS(1, 0, 1), 3)\n(BoseFS{2,3}(2, 0, 0), 1.4142135623730951)\n\njulia> hopnextneighbour(BoseFS(1, 0, 1), 4)\n(BoseFS{2,3}(1, 1, 0), 1.0)\n\njulia> hopnextneighbour(BoseFS(1, 0, 1), 3, :twisted)\n(BoseFS{2,3}(2, 0, 0), -1.4142135623730951)\n\njulia> hopnextneighbour(BoseFS(1, 0, 1), 3, :hard_wall)\n(BoseFS{2,3}(2, 0, 0), 0.0)\n\njulia> hopnextneighbour(BoseFS(1, 0, 1), 3, π/4)\n(BoseFS{2,3}(2, 0, 0), 1.0000000000000002 + 1.0im)\n\n\n\n\n\n","category":"method"},{"location":"addresses.html#Rimu.BitStringAddresses.near_uniform-Union{Tuple{Type{<:BoseFS{N, M}}}, Tuple{M}, Tuple{N}} where {N, M}","page":"BitString addresses","title":"Rimu.BitStringAddresses.near_uniform","text":"near_uniform(BoseFS{N,M}) -> BoseFS{N,M}\n\nCreate bosonic Fock state with near uniform occupation number of M modes with a total of N particles.\n\nExamples\n\njulia> near_uniform(BoseFS{7,5})\nBoseFS{7,5}(2, 2, 1, 1, 1)\n\njulia> near_uniform(FermiFS{3,5})\nFermiFS{3,5}(1, 1, 1, 0, 0)\n\n\n\n\n\n","category":"method"},{"location":"addresses.html#Rimu.BitStringAddresses.FermiFS","page":"BitString addresses","title":"Rimu.BitStringAddresses.FermiFS","text":"FermiFS{N,M,S} <: SingleComponentFockAddress\n\nAddress type that represents a Fock state of N fermions of the same spin in M modes by wrapping a BitString, or a SortedParticleList. Which is wrapped is chosen automatically based on the properties of the address.\n\nConstructors\n\nFermiFS{[N,M]}(val::Integer...): Create FermiFS{N,M} from occupation numbers. This is type-stable if the number of modes M and the number of particles N are provided. Otherwise, M and N are inferred from the arguments.\nFermiFS{[N,M]}(onr): Create FermiFS{N,M}  from occupation number representation, see onr. This is efficient if N and M are provided, and onr is a statically-sized collection, such as a Tuple{M} or SVector{M}.\nFermiFS{[N,M]}([M, ]pairs...): Provide the number of modes M and pairs of the form mode => 1. If M is provided as a type parameter, it should not be provided as the first argument.  Useful for creating sparse addresses. pairs can be multiple arguments or an iterator of pairs.\nFermiFS{N,M,S}(bs::S): Unsafe constructor. Does not check whether the number of particles in bs is equal to N, or whether each mode only contains one particle.\n@fs_str: Addresses are sometimes printed in a compact manner. This representation can also be used as a constructor. See the last example below.\n\nExamples\n\njulia> FermiFS{3,5}(0, 1, 1, 1, 0)\nFermiFS{3,5}(0, 1, 1, 1, 0)\n\njulia> FermiFS([abs(i - 3) ≤ 1 for i in 1:5])\nFermiFS{3,5}(0, 1, 1, 1, 0)\n\njulia> FermiFS(5, 2 => 1, 3 => 1, 4 => 1)\nFermiFS{3,5}(0, 1, 1, 1, 0)\n\njulia> FermiFS{3,5}(i => 1 for i in 2:4)\nFermiFS{3,5}(0, 1, 1, 1, 0)\n\njulia> fs\"|⋅↑↑↑⋅⟩\"\nFermiFS{3,5}(0, 1, 1, 1, 0)\n\njulia> fs\"|f 5: 2 3 4⟩\"\nFermiFS{3,5}(0, 1, 1, 1, 0)\n\nSee also: SingleComponentFockAddress, BoseFS, CompositeFS, FermiFS2C, BitString, OccupationNumberFS.\n\n\n\n\n\n","category":"type"},{"location":"addresses.html#Rimu.BitStringAddresses.BoseFS2C","page":"BitString addresses","title":"Rimu.BitStringAddresses.BoseFS2C","text":"BoseFS2C{NA,NB,M,AA,AB} <: AbstractFockAddress\nBoseFS2C(onr_a, onr_b)\n\nAddress type that constructed with two BoseFS{N,M,S}. It represents a Fock state with two components, e.g. two different species of bosons with particle number NA from species S and particle number NB from species B. The number of modes M is expected to be the same for both components.\n\n\n\n\n\n","category":"type"},{"location":"addresses.html#Rimu.BitStringAddresses.CompositeFS","page":"BitString addresses","title":"Rimu.BitStringAddresses.CompositeFS","text":"CompositeFS(addresses::SingleComponentFockAddress...) <: AbstractFockAddress\n\nUsed to encode addresses for multi-component models. All component addresses are expected have the same number of modes.\n\nSee also: BoseFS, FermiFS, SingleComponentFockAddress, num_modes, FermiFS2C, AbstractFockAddress.\n\n\n\n\n\n","category":"type"},{"location":"addresses.html#Rimu.BitStringAddresses.FermiFS2C","page":"BitString addresses","title":"Rimu.BitStringAddresses.FermiFS2C","text":"FermiFS2C <: AbstractFockAddress\nFermiFS2C(onr_a, onr_b)\n\nFock state address with two fermionic (spin) components. Alias for CompositeFS with two FermiFS components. Construct by specifying either two compatible FermiFSs, two onrs, or the number of modes followed by mode => occupation_number pairs, where occupation_number=1 will put a particle in the first component and occupation_number=-1 will put a particle in the second component. See examples below.\n\nExamples\n\njulia> FermiFS2C(FermiFS(1,0,0), FermiFS(0,1,1))\nCompositeFS(\n  FermiFS{1,3}(1, 0, 0),\n  FermiFS{2,3}(0, 1, 1),\n)\n\njulia> FermiFS2C((1,0,0), (0,1,1))\nCompositeFS(\n  FermiFS{1,3}(1, 0, 0),\n  FermiFS{2,3}(0, 1, 1),\n)\n\njulia> FermiFS2C(3, 1 => 1, 2 => -1, 3 => -1)\nCompositeFS(\n  FermiFS{1,3}(1, 0, 0),\n  FermiFS{2,3}(0, 1, 1),\n)\n\njulia> fs\"|↑↓↓⟩\"\nCompositeFS(\n  FermiFS{1,3}(1, 0, 0),\n  FermiFS{2,3}(0, 1, 1),\n)\n\n\n\n\n\n","category":"type"},{"location":"addresses.html#Rimu.BitStringAddresses.time_reverse-Union{Tuple{CompositeFS{2, N, M, T}}, Tuple{T}, Tuple{M}, Tuple{N}} where {N, M, T<:(Tuple{T, T} where T)}","page":"BitString addresses","title":"Rimu.BitStringAddresses.time_reverse","text":"time_reverse(addr)\n\nApply the time-reversal operation on a two-component Fock address that flips all the spins.\n\nRequires each component address to have the same type.\n\n\n\n\n\n","category":"method"},{"location":"addresses.html#Rimu.BitStringAddresses.OccupationNumberFS","page":"BitString addresses","title":"Rimu.BitStringAddresses.OccupationNumberFS","text":"OccupationNumberFS{M,T} <: SingleComponentFockAddress\n\nAddress type that stores the occupation numbers of a single component bosonic Fock state with M modes. The occupation numbers must fit into the type T <: Unsigned. The number of particles is runtime data, and can be retrieved with num_particles(address).\n\nConstructors\n\nOccupationNumberFS(val::Integer...): Construct from occupation numbers. Must be < 256 to fit into UInt8.\nOccupationNumberFS{[M,T]}(onr): Construct from collection onr with M occupation numbers with type T. If unspecified, the type T of the occupation numbers is inferred from the type of the arguments.\nOccupationNumberFS(fs::BoseFS): Construct from BoseFS.\nWith shortform macro @fs_str. Specify the number of significant bits in braces. See example below.\n\nExamples\n\njulia> ofs = OccupationNumberFS(1,2,3)\nOccupationNumberFS{3, UInt8}(1, 2, 3)\n\njulia> ofs == fs\"|1 2 3⟩{8}\"\ntrue\n\njulia> num_particles(ofs)\n6\n\n\n\n\n\n","category":"type"},{"location":"addresses.html#Rimu.BitStringAddresses.excitation-Union{Tuple{T}, Tuple{OccupationNumberFS{<:Any, T}, Tuple{Vararg{Int64, var\"#s61\"}} where var\"#s61\", Tuple{Vararg{Int64, var\"#s5\"}} where var\"#s5\"}} where T","page":"BitString addresses","title":"Rimu.BitStringAddresses.excitation","text":"excitation(addr::OccupationNumberFS, c::NTuple, d::NTuple)\n→ (nadd, α)\n\nGenerate an excitation on an OccupationNumberFS by applying the creation and destruction operators specified by the tuples of mode numbers c and d to the Fock state addr. The modes are indexed by integers (starting at 1), or by indices of type BoseFSIndex. The value of α is given by the square root of the product of mode occupations before destruction and after creation.\n\nThe number of particles may change by this type of excitation.\n\nExample\n\njulia> s = fs\"|1 2 3⟩{8}\"\nOccupationNumberFS{3, UInt8}(1, 2, 3)\n\njulia> num_particles(s)\n6\n\njulia> es, α = excitation(s, (1,1), (3,))\n(OccupationNumberFS{3, UInt8}(3, 2, 2), 4.242640687119285)\n\njulia> num_particles(es)\n7\n\n\n\n\n\n","category":"method"},{"location":"addresses.html#Internal-representations","page":"BitString addresses","title":"Internal representations","text":"","category":"section"},{"location":"addresses.html","page":"BitString addresses","title":"BitString addresses","text":"The atomic addresses, BoseFS and FermiFS, are implemented as either bitstrings or sorted lists of particles. Using these approaches over an occupation number representation makes the addresses much more space-efficient.","category":"page"},{"location":"addresses.html","page":"BitString addresses","title":"BitString addresses","text":"Therewhile OccupationNumberFS internally uses the occupation number representation,  which allows it to handle excitation operations that change the particle number. This is fast but requires more storage space.","category":"page"},{"location":"addresses.html#Internal-APIs","page":"BitString addresses","title":"Internal APIs","text":"","category":"section"},{"location":"addresses.html","page":"BitString addresses","title":"BitString addresses","text":"Modules = [BitStringAddresses]\nPages = [\"bitstring.jl\", \"sortedparticlelist.jl\"]\nPrivate = false","category":"page"},{"location":"addresses.html#Rimu.BitStringAddresses.BitString","page":"BitString addresses","title":"Rimu.BitStringAddresses.BitString","text":"BitString{B,N,T<:Unsigned}\n\nType for storing bitstrings of static size. Holds B bits in N chunks, where each chunk is of type T.\n\nN is chosen automatically to accommodate B bits as efficiently as possible.\n\nConstructors\n\nBitString{B,N,T}(::SVector{N,T}): unsafe constructor. Does not check for ghost bits.\nBitString{B,N,T}(i::T): as above, but sets i as the rightmost chunk.\nBitString{B}(::Integer): Convert integer to BitString. Integer is truncated to the correct number of bits.\n\n\n\n\n\n","category":"type"},{"location":"addresses.html#Rimu.BitStringAddresses.SortedParticleList","page":"BitString addresses","title":"Rimu.BitStringAddresses.SortedParticleList","text":"SortedParticleList{N,M,T<:Unsigned}\n\nType for storing sparse fock states. Stores the mode number of each particle as an entry with only its mode stored. The entries are always kept sorted.\n\nIterating over SortedParticleLists yields occupied modes as a tuple of occupation number, mode number, and position in list.\n\nConstructors\n\nSortedParticleList{N,M,T}(::SVector{N,T}): unsafe constructor. Does not sort input.\nSortedParticleList(arr::AbstractVector): convert ONR to SortedParticleList\n\n\n\n\n\n","category":"type"},{"location":"addresses.html#Index","page":"BitString addresses","title":"Index","text":"","category":"section"},{"location":"addresses.html","page":"BitString addresses","title":"BitString addresses","text":"Pages   = [\"addresses.md\"]","category":"page"},{"location":"API.html#API","page":"API","title":"API","text":"","category":"section"},{"location":"API.html#Rimu","page":"API","title":"Rimu","text":"","category":"section"},{"location":"API.html","page":"API","title":"API","text":"Modules = [Rimu]","category":"page"},{"location":"API.html#Rimu.Rimu","page":"API","title":"Rimu.Rimu","text":"Rimu\n\nRandom integrators for many-body quantum systems\n\nWelcome to Rimu version 0.13.0. Read the documentation online.\n\n\n\n\n\n","category":"module"},{"location":"API.html#Rimu.PACKAGE_VERSION","page":"API","title":"Rimu.PACKAGE_VERSION","text":"Rimu.PACKAGE_VERSION\n\nConstant that contains the current VersionNumber of Rimu.\n\n\n\n\n\n","category":"constant"},{"location":"API.html#DataFrames.DataFrame-Tuple{Rimu.Report}","page":"API","title":"DataFrames.DataFrame","text":"DataFrame(report::Report)\n\nConvert the Report to a DataFrame. Metadata is added as metadata to the DataFrame.\n\n\n\n\n\n","category":"method"},{"location":"API.html#Rimu.AllOverlaps","page":"API","title":"Rimu.AllOverlaps","text":"AllOverlaps(n_replicas=2; operator=nothing, transform=nothing, vecnorm=true)\n    <: ReplicaStrategy{n_replicas}\n\nRun n_replicas replicas and report overlaps between all pairs of replica vectors. If operator is not nothing, the overlap dot(c1, operator, c2) is reported as well. If operator is a tuple of operators, the overlaps are computed for all operators.\n\nColumn names in the report are of the form c{i}_dot_c{j} for vector-vector overlaps, and c{i}_Op{k}_c{j} for operator overlaps.\n\nSee ProjectorMonteCarloProblem, ReplicaStrategy and AbstractOperator (for an interface for implementing operators).\n\nTransformed Hamiltonians\n\nIf a transformed Hamiltonian G has been passed to ProjectorMonteCarloProblem then overlaps can be calculated by passing the same transformed Hamiltonian to AllOverlaps by setting transform=G. A warning is given if these two Hamiltonians do not match.\n\nImplemented transformations are:\n\nGutzwillerSampling\nGuidingVectorSampling\n\nIn the case of a transformed Hamiltonian the overlaps are defined as follows. For a similarity transformation G of the Hamiltonian (see e.g. GutzwillerSampling.)\n\n    hatG = f hatH f^-1\n\nThe expectation value of an operator hatA is\n\n    langle hatA rangle = langle psi  hatA  psi rangle\n        = fraclangle phi  f^-1 hatA f^-1  phi ranglelangle phi  f^-2  phi rangle\n\nwhere\n\n     phi rangle = f  psi rangle\n\nis the (right) eigenvector of hatG and  psi rangle is an eigenvector of hatH.\n\nFor a K-tuple of input operators (hatA_1  hatA_K), overlaps of langle phi  f^-1 hatA f^-1  phi rangle are reported as c{i}_Op{k}_c{j}. The correct vector-vector overlap langle phi  f^-2  phi rangle is reported last as c{i}_Op{K+1}_c{j}. This is in addition to the bare vector-vector overlap langle phi  f^-2  phi rangle that is reported as c{i}_dot_c{j}.\n\nIn either case the c{i}_dot_c{j} overlap can be omitted with the flag vecnorm=false.\n\n\n\n\n\n","category":"type"},{"location":"API.html#Rimu.ConstantTimeStep","page":"API","title":"Rimu.ConstantTimeStep","text":"ConstantTimeStep <: TimeStepStrategy\n\nKeep time_step constant.\n\n\n\n\n\n","category":"type"},{"location":"API.html#Rimu.DefaultShiftParameters","page":"API","title":"Rimu.DefaultShiftParameters","text":"DefaultShiftParameters\n\nDefault mutable struct for storing the shift parameters.\n\nSee ShiftStrategy, initialise_shift_parameters.\n\n\n\n\n\n","category":"type"},{"location":"API.html#Rimu.DontUpdate","page":"API","title":"Rimu.DontUpdate","text":"DontUpdate(; target_walkers = 1_000) <: ShiftStrategy\n\nDon't update the shift.  Return when target_walkers is reached.\n\nSee ShiftStrategy, ProjectorMonteCarloProblem.\n\n\n\n\n\n","category":"type"},{"location":"API.html#Rimu.DoubleLogProjected","page":"API","title":"Rimu.DoubleLogProjected","text":"DoubleLogProjected(; target, projector, ζ = 0.08, ξ = ζ^2/4) <: ShiftStrategy\n\nStrategy for updating the shift according to the log formula with damping parameter ζ and ξ after projecting onto projector.\n\nS^n+1 = S^n -fracζdτlnleft(fracPΨ^(n+1)PΨ^(n)right)-fracξdτlnleft(fracPΨ^(n+1)texttargetright)\n\nNote that adjusting the keyword maxlength in ProjectorMonteCarloProblem is advised as the default may not be appropriate.\n\nSee ShiftStrategy, ProjectorMonteCarloProblem.\n\n\n\n\n\n","category":"type"},{"location":"API.html#Rimu.DoubleLogSumUpdate","page":"API","title":"Rimu.DoubleLogSumUpdate","text":"DoubleLogSumUpdate(; target_walkers = 1000, ζ = 0.08, ξ = ζ^2/4, α = 1/2) <: ShiftStrategy\n\nStrategy for updating the shift according to the log formula with damping parameters ζ and ξ.\n\nS^n+1 = S^n -fracζdτlnleft(fracN_mathrmw^n+1N_mathrmw^nright)\n- fracξdτlnleft(fracN_mathrmw^n+1N_mathrmw^texttargetright)\n\nwhere N_mathrmw = (1-α)*walkernumber() + α*UniformProjector()⋅ψ computed with walkernumber() and UniformProjector(). When ξ = ζ^2/4 this corresponds to critical damping with a damping time scale T = 2/ζ.\n\nSee ShiftStrategy, ProjectorMonteCarloProblem.\n\n\n\n\n\n","category":"type"},{"location":"API.html#Rimu.DoubleLogUpdate","page":"API","title":"Rimu.DoubleLogUpdate","text":"DoubleLogUpdate(; target_walkers = 1_000, ζ = 0.08, ξ = ζ^2/4) <: ShiftStrategy\n\nStrategy for updating the shift according to the log formula with damping parameter ζ and ξ.\n\nS^n+1 = S^n -fracζdτlnleft(fracΨ_1^n+1Ψ_1^nright)-fracξdτlnleft(fracΨ_1^n+1Ψ_1^texttargetright)\n\nWhen ξ = ζ^2/4 this corresponds to critical damping with a damping time scale T = 2/ζ.\n\nSee ShiftStrategy, ProjectorMonteCarloProblem.\n\n\n\n\n\n","category":"type"},{"location":"API.html#Rimu.DoubleLogUpdateAfterTargetWalkers","page":"API","title":"Rimu.DoubleLogUpdateAfterTargetWalkers","text":"DoubleLogUpdateAfterTargetWalkers(target_walkers = 1_000, ζ = 0.08, ξ = ζ^2/4) <: ShiftStrategy\n\nStrategy for updating the shift: After target_walkers is reached, update the shift according to the log formula with damping parameter ζ and ξ.\n\nSee DoubleLogUpdate, ShiftStrategy, ProjectorMonteCarloProblem.\n\n\n\n\n\n","category":"type"},{"location":"API.html#Rimu.FCIQMC","page":"API","title":"Rimu.FCIQMC","text":"FCIQMC(; kwargs...) <: PMCAlgorithm\n\nAlgorithm for the full configuration interaction quantum Monte Carlo (FCIQMC) method. The default algorithm for ProjectorMonteCarloProblem.\n\nKeyword arguments and defaults:\n\nshift_strategy = DoubleLogUpdate(; targetwalkers = 1_000, ζ = 0.08,   ξ = ζ^2/4): How to update the shift.\ntime_step_strategy = ConstantTimeStep(): Adjust time step or not.\n\nSee also ProjectorMonteCarloProblem, ShiftStrategy, TimeStepStrategy, DoubleLogUpdate, ConstantTimeStep.\n\n\n\n\n\n","category":"type"},{"location":"API.html#Rimu.FciqmcRunStrategy","page":"API","title":"Rimu.FciqmcRunStrategy","text":" FciqmcRunStrategy{T}\n\nAbstract type representing the strategy for running and terminating lomc!(). The type parameter T is relevant for reporting the shift and the norm.\n\nImplemented strategies:\n\nRunTillLastStep\n\nwarning: Warning\nThe use of this strategy is deprecated. Pass the relevant arguments directly to ProjectorMonteCarloProblem or to lomc!() instead.\n\n\n\n\n\n","category":"type"},{"location":"API.html#Rimu.FirstOrderTransitionOperator","page":"API","title":"Rimu.FirstOrderTransitionOperator","text":"FirstOrderTransitionOperator(hamiltonian, shift, time_step) <: AbstractHamiltonian\nFirstOrderTransitionOperator(sp::DefaultShiftParameters, hamiltonian)\n\nFirst order transition operator\n\n𝐓 = 1 + dτ(S - 𝐇)\n\nwhere 𝐇 is the hamiltonian, dτ the time_step and S is the shift.\n\n𝐓 represents the first order expansion of the exponential evolution operator of the imaginary-time Schrödinger equation (Euler step) and repeated application will project out the ground state eigenvector of the hamiltonian.  It is the transition operator used in FCIQMC.\n\n\n\n\n\n","category":"type"},{"location":"API.html#Rimu.GramSchmidt","page":"API","title":"Rimu.GramSchmidt","text":"GramSchmidt{S} <: SpectralStrategy{S}\n\nUse the Gram-Schmidt procedure to orthogonalize the excited states. A total of S spectral states are used in the simulation.\n\n\n\n\n\n","category":"type"},{"location":"API.html#Rimu.LogUpdate","page":"API","title":"Rimu.LogUpdate","text":"LogUpdate(ζ = 0.08) <: ShiftStrategy\n\nStrategy for updating the shift according to the log formula with damping parameter ζ.\n\nS^n+1 = S^n -fracζdτlnleft(fracΨ_1^n+1Ψ_1^nright)\n\nSee ShiftStrategy, ProjectorMonteCarloProblem.\n\n\n\n\n\n","category":"type"},{"location":"API.html#Rimu.LogUpdateAfterTargetWalkers","page":"API","title":"Rimu.LogUpdateAfterTargetWalkers","text":"LogUpdateAfterTargetWalkers(target_walkers = 1_000, ζ = 0.08) <: ShiftStrategy\n\nStrategy for updating the shift: After target_walkers is reached, update the shift according to the log formula with damping parameter ζ.\n\nSee LogUpdate, ShiftStrategy, ProjectorMonteCarloProblem.\n\n\n\n\n\n","category":"type"},{"location":"API.html#Rimu.MultiScalar","page":"API","title":"Rimu.MultiScalar","text":"MultiScalar\n\nWrapper over a tuple that supports +, *, min, and max. Used with MPI communication because SVectors are treated as arrays by MPI.Allreduce and Tuples do not support scalar operations.\n\nExample\n\nSuppose you want to compute the sum of a vector dv and also get the number of positive elements it has in a single pass. You can use MultiScalar:\n\njulia> dv = DVec(:a => 1, :b => -2, :c => 1);\n\njulia> s, p = mapreduce(+, values(dv)) do v\n    Rimu.MultiScalar(v, Int(sign(v) == 1))\nend;\n\njulia> s, p\n(0, 2)\n\nThis will work with MPIData.\n\nNote that only MultiScalars with the same types can be operated on. This is a feature, as it forces type stability.\n\n\n\n\n\n","category":"type"},{"location":"API.html#Rimu.NoStats","page":"API","title":"Rimu.NoStats","text":"NoStats(N=1) <: ReplicaStrategy{N}\n\nThe default ReplicaStrategy. N replicas are run, but no statistics are collected.\n\nSee also ProjectorMonteCarloProblem.\n\n\n\n\n\n","category":"type"},{"location":"API.html#Rimu.PMCAlgorithm","page":"API","title":"Rimu.PMCAlgorithm","text":"PMCAlgorithm\n\nAbstract type for projector Monte Carlo algorithms.\n\nSee ProjectorMonteCarloProblem, FCIQMC.\n\n\n\n\n\n","category":"type"},{"location":"API.html#Rimu.PMCSimulation","page":"API","title":"Rimu.PMCSimulation","text":"PMCSimulation\n\nHolds the state and the results of a projector quantum Monte Carlo (PMC) simulation. Is returned by init(::ProjectorMonteCarloProblem) and solved with solve!(::PMCSimulation).\n\nObtain the results of a simulation sm as a DataFrame with DataFrame(sm).\n\nSee also state_vectors, ProjectorMonteCarloProblem, init, solve!.\n\n\n\n\n\n","category":"type"},{"location":"API.html#Rimu.PostStepStrategy","page":"API","title":"Rimu.PostStepStrategy","text":"PostStepStrategy\n\nSubtypes of PostStepStrategy can be used to perform arbitrary computation on a single state after an FCIQMC step is finished and report the results.\n\nImplemented strategies:\n\nProjectedEnergy\nProjector\nSignCoherence\nWalkerLoneliness\nTimer\n\nNote: A tuple of multiple strategies can be passed to ProjectorMonteCarloProblem. In that case, all reported column names must be distinct.\n\nInterface:\n\nA subtype of this type must implement post_step_action(::PostStepStrategy, ::SingleState, step::Int).\n\n\n\n\n\n","category":"type"},{"location":"API.html#Rimu.ProjectedEnergy","page":"API","title":"Rimu.ProjectedEnergy","text":"ProjectedEnergy(hamiltonian, projector; hproj=:hproj, vproj=:vproj) <: PostStepStrategy\n\nAfter every step, compute hproj = dot(projector, hamiltonian, dv) and vproj = dot(projector, dv), where dv is the instantaneous coefficient vector.  projector can be an AbstractDVec, or an AbstractProjector.\n\nReports to columns hproj and vproj, which can be used to compute projective energy, e.g. with projected_energy. The keyword arguments hproj and vproj can be used to change the names of these columns. This can be used to make the names unique when computing projected energies with different projectors in the same run.\n\nSee also projected_energy, ratio_of_means, mixed_estimator, and PostStepStrategy.\n\n\n\n\n\n","category":"type"},{"location":"API.html#Rimu.Projector","page":"API","title":"Rimu.Projector","text":"Projector(name=projector) <: PostStepStrategy\n\nAfter each step, compute dot(projector, dv) and report it in the DataFrame under name. projector can be an AbstractDVec, or an AbstractProjector.\n\n\n\n\n\n","category":"type"},{"location":"API.html#Rimu.ProjectorMonteCarloProblem","page":"API","title":"Rimu.ProjectorMonteCarloProblem","text":"ProjectorMonteCarloProblem(hamiltonian::AbstractHamiltonian; kwargs...)\n\nDefines a problem to be solved by projector quantum Monte Carlo (QMC) methods, such as the the FCIQMC algorithm.\n\nCommon keyword arguments and defaults:\n\ntime_step = 0.01: Initial time step size.\nlast_step = 100: Controls the number of steps.\ntarget_walkers = 1_000: Target for the 1-norm of the coefficient vector.\nstart_at = starting_address(hamiltonian): Define the initial state vector(s).   An r  s matrix of state vectors can be passed where r is the   number of replicas and s the number of spectral states. See also   default_starting_vector.\nstyle = IsDynamicSemistochastic(): The StochasticStyle of the simulation.\ninitiator = false: Whether to use initiators. Can be true, false, or a valid   InitiatorRule.\nthreading: Default is to use multithreading and/or MPI if available. Set to true to force PDVec for the starting vector, false for serial computation; may be overridden by start_at.\nreporting_strategy = ReportDFAndInfo(): How and when to report results, see ReportingStrategy.\npost_step_strategy = (): Extract observables (e.g. ProjectedEnergy), see PostStepStrategy.\nn_replicas = 1: Number of synchronised independent simulations.\nreplica_strategy = NoStats(n_replicas): Which results to report from replica simulations, see ReplicaStrategy.\n\nExample\n\njulia> hamiltonian = HubbardReal1D(BoseFS(1,2,3));\n\njulia> problem = ProjectorMonteCarloProblem(hamiltonian; target_walkers = 500, last_step = 100);\n\njulia> simulation = solve(problem);\n\njulia> simulation.success[]\ntrue\n\njulia> size(DataFrame(simulation))\n(100, 9)\n\nFurther keyword arguments:\n\nstarting_step = 1: Starting step of the simulation.\nwalltime = Inf: Maximum time allowed for the simulation.\nsimulation_plan = SimulationPlan(; starting_step, last_step, walltime): Defines the   duration of the simulation. Takes precedence over last_step and walltime.\nζ = 0.08: Damping parameter for the shift update.\nξ = ζ^2/4: Forcing parameter for the shift update.\nshift_strategy = DoubleLogUpdate(; target_walkers, ζ, ξ): How to update the shift,   see ShiftStrategy.\ntime_step_strategy = ConstantTimeStep(): Adjust time step or not, see   TimeStepStrategy.\nalgorithm = FCIQMC(; shift_strategy, time_step_strategy): The algorithm to use.   Currenlty only FCIQMC is implemented.\nshift: Initial shift value or collection of shift values. Determined by default from the   Hamiltonian and the starting vectors.\ninitial_shift_parameters: Initial shift parameters or collection of initial shift   parameters. Overrides shift if provided.\nmaxlength = 2 * target_walkers + 100: Maximum length of the vectors.\ndisplay_name = \"PMCSimulation\": Name displayed in progress bar (via ProgressLogging).\nmetadata: User-supplied metadata to be added to the report. Must be an iterable of pairs or a NamedTuple, e.g. metadata = (\"key1\" => \"value1\", \"key2\" => \"value2\"). All metadata is converted to strings.\nrandom_seed = true: Provide and store a seed for the random number generator. If set to   true, a random seed is generated. If set to number, this number is used as the seed.   The seed is used by solve such that solveing the problem twice will yield identical   results. If set to false, no seed is used and results are not reproducible.\n\nSee also init, solve.\n\n\n\n\n\n","category":"type"},{"location":"API.html#Rimu.ReplicaState","page":"API","title":"Rimu.ReplicaState","text":"ReplicaState <: AbstractMatrix{SingleState}\n\nHolds information about multiple replicas of SpectralStates.\n\nIndexing the ReplicaState state[i, j] returns a SingleState from the ith replica and jth spectral state.\n\nSee also ReplicaStrategy, SpectralState, SingleState, PMCSimulation.\n\n\n\n\n\n","category":"type"},{"location":"API.html#Rimu.ReplicaStrategy","page":"API","title":"Rimu.ReplicaStrategy","text":"ReplicaStrategy{N}\n\nSupertype for strategies that can be passed to ProjectorMonteCarloProblem and control how many replicas are used, and what information is computed and returned. The number of replicas is N.\n\nConcrete implementations\n\nNoStats: run (possibly one) replica(s), but don't report any additional info.\nAllOverlaps: report overlaps between all pairs of replica vectors.\n\nInterface\n\nA subtype of ReplicaStrategy{N} must implement the following function:\n\nRimu.replica_stats - return a tuple of Strings or Symbols of names for replica statistics and a tuple of the values. These will be reported to the DataFrame returned by ProjectorMonteCarloProblem.\n\n\n\n\n\n","category":"type"},{"location":"API.html#Rimu.Report","page":"API","title":"Rimu.Report","text":"Report()\nReport(df::DataFrame)\n\nInternal structure that holds the temporary reported values as well as metadata. It can be converted to a DataFrame with DataFrame(report::Report).\n\nSee report!, report_metadata!, get_metadata.\n\n\n\n\n\n","category":"type"},{"location":"API.html#Rimu.ReportDFAndInfo","page":"API","title":"Rimu.ReportDFAndInfo","text":"ReportDFAndInfo(; reporting_interval=1, info_interval=100, io=stdout, writeinfo=false) <: ReportingStrategy\n\nThe default ReportingStrategy. Report every reporting_intervalth step to a DataFrame and write info message to io every info_intervalth reported step (unless writeinfo == false). The flag writeinfo is useful for controlling info messages in MPI codes, e.g. by setting writeinfo =is_mpi_root().\n\n\n\n\n\n","category":"type"},{"location":"API.html#Rimu.ReportToFile","page":"API","title":"Rimu.ReportToFile","text":"ReportToFile(; kwargs...) <: ReportingStrategy\n\nReportingStrategy that writes the report directly to a file in the Arrow format. Useful when dealing with long jobs or large numbers of replicas, when the report can incur a significant memory cost.\n\nThe arrow file can be read back in with load_df(filename) or using Arrow; Arrow.Table(filename).\n\nKeyword arguments\n\nfilename = \"out.arrow\": the file to report to. If the file already exists, a new file is created.\nreporting_interval = 1: interval between simulation steps that are reported.\nchunk_size = 1000: the size of each chunk that is written to the file. A DataFrame of this size is collected in memory and written to disk. When saving, an info message is also printed to io.\nsave_if =is_mpi_root(): if this value is true, save the report, otherwise ignore it.\nreturn_df = false: if this value is true, read the file and return the data frame at the end of computation. Otherwise, an empty DataFrame is returned.\nio = stdout: The IO to print messages to. Set to devnull if you don't want to see messages printed out.\ncompress = :zstd: compression algorithm to use. Can be :zstd, :lz4 or nothing.\n\nSee also load_df and save_df.\n\n\n\n\n\n","category":"type"},{"location":"API.html#Rimu.ReportingStrategy","page":"API","title":"Rimu.ReportingStrategy","text":"ReportingStrategy\n\nAbstract type for strategies for reporting data in a DataFrame with report!().\n\nImplemented strategies:\n\nReportDFAndInfo\nReportToFile\n\nInterface:\n\nA ReportingStrategy can define any of the following:\n\nrefine_reporting_strategy\nreport!\nreport_after_step!\nfinalize_report!\nreporting_interval\n\n\n\n\n\n","category":"type"},{"location":"API.html#Rimu.RunTillLastStep","page":"API","title":"Rimu.RunTillLastStep","text":"RunTillLastStep(step::Int = 0 # number of current/starting timestep\n             laststep::Int = 100 # number of final timestep\n             shiftMode::Bool = false # whether to adjust shift\n             shift = 0.0 # starting/current value of shift\n             dτ::Float64 = 0.01 # current value of time step\n) <: FciqmcRunStrategy\n\nParameters for running lomc!() for a fixed number of time steps. For alternative strategies, see FciqmcRunStrategy.\n\nwarning: Warning\nThe use of this strategy is deprecated. Pass the relevant arguments directly to ProjectorMonteCarloProblem or to lomc!() instead.\n\n\n\n\n\n","category":"type"},{"location":"API.html#Rimu.ShiftStrategy","page":"API","title":"Rimu.ShiftStrategy","text":"ShiftStrategy\n\nAbstract type for defining the strategy for controlling the norm, potentially by updating the shift. Passed as a parameter to ProjectorMonteCarloProblem or to FCIQMC.\n\nImplemented strategies:\n\nDontUpdate\nDoubleLogUpdate - default in ProjectorMonteCarloProblem()\nLogUpdate\nLogUpdateAfterTargetWalkers - FCIQMC standard\nDoubleLogUpdateAfterTargetWalkers\n\nExtended help\n\nInternally To implement a custom strategy, define a new subtype of Rimu.ShiftStrategy and implement methods for:\n\nRimu.update_shift_parameters! - to update the shift_parameters\nRimu.initialise_shift_parameters - (optional) to initialise and construct a   custom implementation of the shift_parameters. The default implementation is   Rimu.DefaultShiftParameters.\n\n\n\n\n\n","category":"type"},{"location":"API.html#Rimu.SignCoherence","page":"API","title":"Rimu.SignCoherence","text":"SignCoherence(reference[; name=:coherence]) <: PostStepStrategy\n\nAfter each step, compute the proportion of configurations that have the same sign as they do in the reference_dvec. Reports to a column named name, which defaults to coherence.\n\n\n\n\n\n","category":"type"},{"location":"API.html#Rimu.SimulationPlan","page":"API","title":"Rimu.SimulationPlan","text":"SimulationPlan(; starting_step = 1, last_step = 100, walltime = Inf)\n\nDefines the duration of the simulation. The simulation ends when the last_step is reached or the walltime is exceeded.\n\nSee ProjectorMonteCarloProblem, PMCSimulation.\n\n\n\n\n\n","category":"type"},{"location":"API.html#Rimu.SingleParticleDensity","page":"API","title":"Rimu.SingleParticleDensity","text":"SingleParticleDensity(; save_every=1, component) <: PostStepStrategy\n\nPostStepStrategy  to  compute the diagonal single_particle_density. It records a Tuple with the same eltype as the vector.\n\nComputing the density at every time step can be expensive. This cost can be reduced by setting the save_every argument to a higher value. If the value is set, a vector of zeros is recorded when the saving is skipped.\n\nIf the address type has multiple components, the component argument can be used to compute the density on a per-component basis.\n\nThe density is not normalized, and must be divided by the vector norm(⋅,2) squared.\n\nSee also\n\nsingle_particle_density\nDensityMatrixDiagonal\n\n\n\n\n\n","category":"type"},{"location":"API.html#Rimu.SingleState","page":"API","title":"Rimu.SingleState","text":"SingleState(hamiltonian, algorithm, v, wm, pnorm, params, id)\n\nStruct that holds a single state vector and all information needed for an independent run of the algorithm. Can be advanced a step forward with advance!.\n\nSee also SpectralState, SpectralStrategy, ReplicaState, ReplicaStrategy, replica_stats, PMCSimulation.\n\n\n\n\n\n","category":"type"},{"location":"API.html#Rimu.SpectralState","page":"API","title":"Rimu.SpectralState","text":"SpectralState <: AbstractVector{SingleState}\n\nHolds one or several SingleStates representing the ground state and excited states of a single replica.\n\nIndexing the SpectralState state[i] returns the ith SingleState.\n\nSee also SpectralStrategy, ReplicaState, SingleState, PMCSimulation.\n\n\n\n\n\n","category":"type"},{"location":"API.html#Rimu.SpectralStrategy","page":"API","title":"Rimu.SpectralStrategy","text":"SpectralStrategy{S}\n\nAbstract type for spectral strategies. The spectral strategy is used to control the number of spectral states used in the simulation.\n\n\n\n\n\n","category":"type"},{"location":"API.html#Rimu.StateVectors","page":"API","title":"Rimu.StateVectors","text":"StateVectors <: AbstractMatrix{V}\n\nRepresents a matrix of configuration vectors from the state. Construct this object with state_vectors.\n\n\n\n\n\n","category":"type"},{"location":"API.html#Rimu.TimeStepStrategy","page":"API","title":"Rimu.TimeStepStrategy","text":"TimeStepStrategy\n\nAbstract type for strategies for updating the time step with update_time_step(). Implemented strategies:\n\nConstantTimeStep\n\n\n\n\n\n","category":"type"},{"location":"API.html#Rimu.Timer","page":"API","title":"Rimu.Timer","text":"Timer <: PostStepStrategy\n\nRecord current time after every step. See Base.Libc.time for information on what time is recorded.\n\n\n\n\n\n","category":"type"},{"location":"API.html#Rimu.WalkerLoneliness","page":"API","title":"Rimu.WalkerLoneliness","text":"WalkerLoneliness(threshold=1) <: PostStepStrategy\n\nAfter each step, compute the proportion of configurations that are occupied by at most threshold walkers. Reports to a column named loneliness.\n\n\n\n\n\n","category":"type"},{"location":"API.html#CommonSolve.init-Tuple{ProjectorMonteCarloProblem}","page":"API","title":"CommonSolve.init","text":"init(problem::ProjectorMonteCarloProblem; copy_vectors=true)::PMCSimulation\n\nInitialise a Rimu.PMCSimulation.\n\nSee also ProjectorMonteCarloProblem, solve!, solve, step!, Rimu.PMCSimulation.\n\n\n\n\n\n","category":"method"},{"location":"API.html#CommonSolve.solve","page":"API","title":"CommonSolve.solve","text":"solve(::ProjectorMonteCarloProblem)::PMCSimulation\n\nInitialize and solve a ProjectorMonteCarloProblem until the last step is completed or the walltime limit is reached.\n\nSee also init, solve!, step!, Rimu.PMCSimulation, and solve(::ExactDiagonalizationProblem).\n\n\n\n\n\n","category":"function"},{"location":"API.html#CommonSolve.solve!-Tuple{Rimu.PMCSimulation}","page":"API","title":"CommonSolve.solve!","text":"solve!(sm::PMCSimulation; kwargs...)::PMCSimulation\n\nSolve a Rimu.PMCSimulation until the last step is completed or the walltime limit is reached.\n\nTo continue a previously completed simulation, set a new last_step or walltime using the keyword arguments. Optionally, changes can be made to the replica_strategy, the post_step_strategy, or the reporting_strategy.\n\nOptional keyword arguments:\n\nlast_step = nothing: Set the last step to a new value and continue the simulation.\nwalltime = nothing: Set the allowed walltime to a new value and continue the simulation.\nreset_time = false: Reset the elapsed_time counter and continue the simulation.\nempty_report = false: Empty the report before continuing the simulation.\nreplica_strategy = nothing: Change the replica strategy. Requires the number of replicas   to match the number of replicas in the simulation sm. Implies empty_report = true.\npost_step_strategy = nothing: Change the post-step strategy. Implies   empty_report = true.\nreporting_strategy = nothing: Change the reporting strategy. Implies   empty_report = true.\nmetadata = nothing: Add metadata to the report.\n\nSee also ProjectorMonteCarloProblem, init, solve, step!, Rimu.PMCSimulation.\n\n\n\n\n\n","category":"method"},{"location":"API.html#CommonSolve.step!-Tuple{Rimu.PMCSimulation}","page":"API","title":"CommonSolve.step!","text":"step!(sm::PMCSimulation)::PMCSimulation\n\nAdvance the simulation by one step.\n\nCalling solve! will advance the simulation until the last step or the walltime is exceeded. When completing the simulation without calling solve!, the simulation report needs to be finalised by calling Rimu.finalize_report!.\n\nSee also ProjectorMonteCarloProblem, init, solve!, solve, Rimu.PMCSimulation.\n\n\n\n\n\n","category":"method"},{"location":"API.html#Rimu._n_walkers-Tuple{Any, Any}","page":"API","title":"Rimu._n_walkers","text":"_n_walkers(v, shift_strategy)\n\nReturns an estimate of the expected number of walkers as an integer.\n\n\n\n\n\n","category":"method"},{"location":"API.html#Rimu.advance!-Tuple{FCIQMC, Any, Rimu.ReplicaState, Rimu.SingleState}","page":"API","title":"Rimu.advance!","text":"advance!(algorithm::PMCAlgorithm, report::Report, state::ReplicaState, s_state::SingleState)\n\nAdvance the s_state by one step according to the algorithm. The state is used only to access the various strategies involved. Steps, stats, and computed quantities are written to the report.\n\nReturns true if the step was successful and calculation should proceed, false when it should terminate.\n\nSee also solve!, step!.\n\n\n\n\n\n","category":"method"},{"location":"API.html#Rimu.all_overlaps-Union{Tuple{B}, Tuple{N}, Tuple{Union{Tuple, Vector}, Tuple{Vararg{AbstractDVec, N}}, Any, Val{B}}} where {N, B}","page":"API","title":"Rimu.all_overlaps","text":"all_overlaps(operators, vectors, working_memories, vecnorm=true)\n\nGet all overlaps between vectors and operators. This function is overloaded for MPIData. The flag vecnorm can disable the vector-vector overlap c{i}_dot_c{j}.\n\n\n\n\n\n","category":"method"},{"location":"API.html#Rimu.check_transform-Tuple{AllOverlaps, AbstractHamiltonian}","page":"API","title":"Rimu.check_transform","text":"check_transform(r::AllOverlaps, ham)\n\nCheck that the transformation provided to r::AllOverlaps matches the given Hamiltonian ham. Used as a sanity check before starting main ProjectorMonteCarloProblem loop.\n\n\n\n\n\n","category":"method"},{"location":"API.html#Rimu.clean_and_warn_if_others_present-Union{Tuple{names}, Tuple{NamedTuple{names}, Any}} where names","page":"API","title":"Rimu.clean_and_warn_if_others_present","text":"clean_and_warn_if_others_present(nt::NamedTuple{names}, keys) where {names}\n\nRemove keys from a NamedTuple that are not in keys and issue a warning if they are present.\n\n\n\n\n\n","category":"method"},{"location":"API.html#Rimu.default_logger-Tuple","page":"API","title":"Rimu.default_logger","text":"default_logger(args...)\n\nReset the global_logger to Logging.ConsoleLogger. Undoes the effect of smart_logger. Arguments are passed on to Logging.ConsoleLogger.\n\n\n\n\n\n","category":"method"},{"location":"API.html#Rimu.default_starting_vector-Tuple{AbstractHamiltonian}","page":"API","title":"Rimu.default_starting_vector","text":"default_starting_vector(hamiltonian::AbstractHamiltonian; kwargs...)\ndefault_starting_vector(\n    address=starting_address(hamiltonian);\n    style=IsDynamicSemistochastic(),\n    initiator=NonInitiator(),\n    threading=nothing,\n    population=10\n)\n\nReturn a default starting vector for ProjectorMonteCarloProblem. The default choice for the starting vector is\n\nv = PDVec(address => population; style, initiator)\n\nif threading is available, or otherwise\n\nv = DVec(address => population; style)\n\nif initiator == NonInitiator(), and\n\nv = InitiatorDVec(address => population; style, initiator)\n\nif not. See PDVec, DVec, InitiatorDVec, StochasticStyle, and InitiatorRule.\n\n\n\n\n\n","category":"method"},{"location":"API.html#Rimu.delete_and_warn_if_present-Union{Tuple{names}, Tuple{NamedTuple{names}, Any}} where names","page":"API","title":"Rimu.delete_and_warn_if_present","text":"delete_and_warn_if_present(nt::NamedTuple, keys)\n\nDelete keys from a NamedTuple and issue a warning if they are present. This is useful for removing unused keyword arguments.\n\n\n\n\n\n","category":"method"},{"location":"API.html#Rimu.finalize_report!-Tuple{ReportingStrategy, Any}","page":"API","title":"Rimu.finalize_report!","text":"finalize_report!(::ReportingStrategy, report)\n\nFinalize the report. This function is called after all steps in solve! have finished.\n\n\n\n\n\n","category":"method"},{"location":"API.html#Rimu.get_metadata-Tuple{Rimu.Report, Any}","page":"API","title":"Rimu.get_metadata","text":"get_metadata(report::Report, key)\n\nGet metadata key from report. key is converted to a String.\n\nSee also report_metadata!, Report, report!.\n\n\n\n\n\n","category":"method"},{"location":"API.html#Rimu.initialise_shift_parameters","page":"API","title":"Rimu.initialise_shift_parameters","text":"initialise_shift_parameters(s::ShiftStrategy, shift, norm, time_step, counter=0, shift_mode=false)\n\nInitiatlise a struct to store the shift parameters.\n\nSee ShiftStrategy, update_shift_parameters!, DefaultShiftParameters.\n\n\n\n\n\n","category":"function"},{"location":"API.html#Rimu.lomc!-Tuple{Any, Any}","page":"API","title":"Rimu.lomc!","text":"lomc!(ham::AbstractHamiltonian, [v]; kwargs...) -> df, state\nlomc!(state::ReplicaState, [df]; kwargs...) -> df, state\n\nLinear operator Monte Carlo: Perform a projector quantum Monte Carlo simulation for determining the lowest eigenvalue of ham. The details of the simulation are controlled by the optional keyword arguments and by the type of the optional starting vector v. Alternatively, a ReplicaState can be passed in to continue a previous simulation.\n\nCommon keyword arguments and defaults:\n\nlaststep = 100 - controls the number of steps.\ndτ = 0.01 - time step.\ntargetwalkers = 1000 - target for the 1-norm of the coefficient vector.\naddress = starting_address(ham) - set starting address for default v and shift.\nstyle = IsStochasticInteger() - set StochasticStyle for default v; unused if v is specified.\ninitiator = NonInitiator() - set InitiatorRule for default v; unused if v is specified.\nthreading - default is to use multithreading and MPI if multiple threads are available. Set to true to force PDVec for the starting vector, false for serial computation; unused if v is specified.\nshift = diagonal_element(ham, address) - initial value of shift.\npost_step_strategy::NTuple{N,<:PostStepStrategy} = () - extract observables (e.g. ProjectedEnergy), see PostStepStrategy. (Deprecated: post_step is accepted as an alias for post_step_strategy.)\nreplica_strategy::ReplicaStrategy = NoStats(1) - run several synchronised simulations, see ReplicaStrategy. (Deprecated: replica is accepted as an alias for replica_strategy.)\nreporting_strategy::ReportingStrategy = ReportDFAndInfo() - how and when to report results, see ReportingStrategy. (Deprecated: r_strat is accepted as an alias for reporting_strategy.)\nname = \"lomc!\" - name displayed in progress bar (via ProgressLogging)\nmetadata - user-supplied metadata to be added to the report df. Must be an iterable of pairs or a NamedTuple, e.g. metadata = (\"key1\" => \"value1\", \"key2\" => \"value2\"). All metadata is converted to strings.\n\nSome metadata is automatically added to the report df including Rimu.PACKAGE_VERSION and data from state.\n\nReturn values\n\nlomc! returns a named tuple with the following fields:\n\ndf: a DataFrame with all statistics being reported.\nstate: a ReplicaState that can be used for continuations.\n\nExample\n\njulia> address = BoseFS(1,2,3);\n\njulia> hamiltonian = HubbardReal1D(address);\n\njulia> df1, state = lomc!(hamiltonian; targetwalkers=500, laststep=100);\n\njulia> df2, _ = lomc!(state, df1; laststep=200, metadata=(;info=\"cont\")); # Continuation run\n\njulia> size(df1)\n(100, 9)\n\njulia> size(df2)\n(200, 9)\n\njulia> using DataFrames; metadata(df2, \"info\") # retrieve custom metadata\n\"cont\"\n\njulia> metadata(df2, \"hamiltonian\") # some metadata is automatically added\n\"HubbardReal1D(fs\\\"|1 2 3⟩\\\"; u=1.0, t=1.0)\"\n\nFurther keyword arguments and defaults:\n\nτ_strat::TimeStepStrategy = ConstantTimeStep() - adjust time step or not, see TimeStepStrategy\ns_strat::ShiftStrategy = DoubleLogUpdate(; target_walkers=targetwalkers, ζ = 0.08, ξ = ζ^2/4) - how to update the shift, see ShiftStrategy.\nmaxlength = 2 * s_strat.target_walkers + 100 - upper limit on the length of v; when reached, lomc! will abort\nwm - working memory for re-use in subsequent calculations; is mutated.\ndf = DataFrame() - when called with AbstractHamiltonian argument, a DataFrame can be passed for merging with the report df.\n\nThe default choice for the starting vector is v = default_starting_vector(; address, style, threading, initiator). See default_starting_vector, PDVec, DVec, StochasticStyle, and InitiatorRule.\n\nwarning: Warning\nThe use of this lomc! is deprecated. Use ProjectorMonteCarloProblem and solve instead.\n\n\n\n\n\n","category":"method"},{"location":"API.html#Rimu.num_replicas-Union{Tuple{ReplicaStrategy{N}}, Tuple{N}} where N","page":"API","title":"Rimu.num_replicas","text":"num_replicas(state_or_strategy)\n\nReturn the number of replicas used in the simulation.\n\n\n\n\n\n","category":"method"},{"location":"API.html#Rimu.num_spectral_states-Union{Tuple{Rimu.SpectralStrategy{S}}, Tuple{S}} where S","page":"API","title":"Rimu.num_spectral_states","text":"num_spectral_states(state_or_strategy)\n\nReturn the number of spectral states used in the simulation.\n\n\n\n\n\n","category":"method"},{"location":"API.html#Rimu.post_step_action","page":"API","title":"Rimu.post_step_action","text":"post_step_action(::PostStepStrategy, ::SingleState, step) -> kvpairs\n\nCompute statistics after FCIQMC step. Should return a tuple of :key => value pairs. This function is only called every reporting_interval steps, as defined by the ReportingStrategy.\n\nSee also PostStepStrategy, ReportingStrategy.\n\n\n\n\n\n","category":"function"},{"location":"API.html#Rimu.refine_reporting_strategy-Tuple{ReportingStrategy}","page":"API","title":"Rimu.refine_reporting_strategy","text":"refine_reporting_strategy(reporting_strategy::ReportingStrategy) -> reporting_strategy\n\nInitialize the reporting strategy. This can be used to set up filenames or other attributes that need to be unique for a run of FCIQMC.\n\n\n\n\n\n","category":"method"},{"location":"API.html#Rimu.replace_keys-Tuple{NamedTuple, Any}","page":"API","title":"Rimu.replace_keys","text":"replace_keys(nt::NamedTuple, (:old1 => :new1, :old2 => :new2, ...))\n\nReplace keys in a NamedTuple with new keys. This is useful for renaming fields in a NamedTuple. Ignores keys that are not present in the NamedTuple.\n\n\n\n\n\n","category":"method"},{"location":"API.html#Rimu.replica_stats","page":"API","title":"Rimu.replica_stats","text":"replica_stats(RS::ReplicaStrategy{N}, spectral_states::NTuple{N,SingleState}) -> (names, values)\n\nReturn the names and values of statistics related to N replica states consistent with the ReplicaStrategy RS. names should be a tuple of Symbols or Strings and values should be a tuple of the same length. This function will be called every reporting_interval steps from ProjectorMonteCarloProblem, or once per time step if reporting_interval is not defined.\n\nPart of the ReplicaStrategy interface. See also SingleState.\n\n\n\n\n\n","category":"function"},{"location":"API.html#Rimu.report!-Tuple{ReportingStrategy, Any, Vararg{Any}}","page":"API","title":"Rimu.report!","text":" report!(::ReportingStrategy, step, report::Report, keys, values, id=\"\")\n report!(::ReportingStrategy, step, report::Report, nt, id=\"\")\n\nReport keys and values to report, which will be converted to a DataFrame before ProjectorMonteCarloProblem exits. Alternatively, a nt::NamedTuple can be passed in place of keys and values. If id is specified, it is appended to all keys. This is used to differentiate between values reported by different replicas.\n\nTo overload this function for a new ReportingStrategy, overload report!(::ReportingStrategy, step, args...) and apply the report by calling report!(args...).\n\n\n\n\n\n","category":"method"},{"location":"API.html#Rimu.report!-Tuple{Rimu.Report, DataFrame}","page":"API","title":"Rimu.report!","text":"report!(report::Report, df::DataFrame)\n\nConvert the DataFrame df to a Report. This function does not copy the data.\n\n\n\n\n\n","category":"method"},{"location":"API.html#Rimu.report!-Tuple{Rimu.Report, Union{AbstractString, Symbol}, Any}","page":"API","title":"Rimu.report!","text":"report!(report, keys, values, id=\"\")\nreport!(report, pairs, id=\"\")\n\nWrite keys, values pairs to report that will be converted to a DataFrame later. Alternatively, a named tuple or a collection of pairs can be passed instead of keys and values.\n\nThe value of id is appended to the name of the column, e.g. report!(report, :key, value, :_1) will report value to a column named :key_1.\n\n\n\n\n\n","category":"method"},{"location":"API.html#Rimu.report_after_step!-Tuple{ReportingStrategy, Any, Any, Vararg{Any}}","page":"API","title":"Rimu.report_after_step!","text":"report_after_step!(::ReportingStrategy, step, report, state) -> report\n\nThis function is called at the very end of a step, after reporting_interval steps. It may modify the report.\n\n\n\n\n\n","category":"method"},{"location":"API.html#Rimu.report_metadata!-Tuple{Rimu.Report, Any, Any}","page":"API","title":"Rimu.report_metadata!","text":"report_metadata!(report::Report, key, value)\nreport_metadata!(report::Report, kvpairs)\n\nSet metadata key to value in report. key and value are converted to Strings. Alternatively, an iterable of key-value pairs or a NamedTuple can be passed.\n\nSee also get_metadata, report!, Report.\n\n\n\n\n\n","category":"method"},{"location":"API.html#Rimu.reporting_interval-Tuple{ReportingStrategy}","page":"API","title":"Rimu.reporting_interval","text":"reporting_interval(::ReportingStrategy)\n\nGet the interval between steps for which non-essential statistics are reported. Defaults to 1 if chosen ReportingStrategy does not specify an interval.\n\n\n\n\n\n","category":"method"},{"location":"API.html#Rimu.set_up_initial_shift_parameters-Union{Tuple{R}, Tuple{S}, Tuple{FCIQMC, Any, StaticArraysCore.SMatrix{S, R}, Any, Any}} where {S, R}","page":"API","title":"Rimu.set_up_initial_shift_parameters","text":"set_up_initial_shift_parameters(\n    algorithm::FCIQMC, hamiltonian, starting_vectors, shift, time_step, initial_shift_parameters\n)\n\nSet up the initial shift parameters for the FCIQMC algorithm.\n\n\n\n\n\n","category":"method"},{"location":"API.html#Rimu.single_particle_density-Tuple{Any}","page":"API","title":"Rimu.single_particle_density","text":"single_particle_density(dvec; component)\nsingle_particle_density(add; component)\n\nCompute the diagonal single particle density of vector dvec or address add. If the component argument is given, only that component of the addresses is taken into account. The result is always normalized so that sum(result) ≈ num_particles(address).\n\nExamples\n\njulia> v = DVec(fs\"|⋅↑⇅↓⋅⟩\" => 1.0, fs\"|↓↓⋅↑↑⟩\" => 0.5)\nDVec{FermiFS2C{2, 2, 5, 4, FermiFS{2, 5, BitString{5, 1, UInt8}}, FermiFS{2, 5, BitString{5, 1, UInt8}}},Float64} with 2 entries, style = IsDeterministic{Float64}()\n  fs\"|↓↓⋅↑↑⟩\" => 0.5\n  fs\"|⋅↑⇅↓⋅⟩\" => 1.0\n\njulia> single_particle_density(v)\n(0.2, 1.0, 1.6, 1.0, 0.2)\n\njulia> single_particle_density(v; component=1)\n(0.0, 1.6, 1.6, 0.4, 0.4)\n\nSee also\n\nSingleParticleDensity\n\n\n\n\n\n","category":"method"},{"location":"API.html#Rimu.smart_logger-Tuple","page":"API","title":"Rimu.smart_logger","text":"smart_logger(args...)\n\nEnable terminal progress bar during interactive use (i.e. unless running on CI or HPC). Arguments are passed on to the logger. This is run once during Rimu startup. Undo with default_logger or by setting Base.global_logger().\n\n\n\n\n\n","category":"method"},{"location":"API.html#Rimu.state_vectors-Tuple{R} where R<:Rimu.ReplicaState","page":"API","title":"Rimu.state_vectors","text":"state_vectors(state::ReplicaState)\nstate_vectors(sim::PMCSimulation)\n\nReturn an AbstractMatrix of configuration vectors from the state. The vectors can be accessed by indexing the resulting collection, where the row index corresponds to the replica index and the column index corresponds to the spectral state index.\n\nSee also SingleState, ReplicaState, SpectralState, PMCSimulation.\n\n\n\n\n\n","category":"method"},{"location":"API.html#Rimu.update_shift_parameters!","page":"API","title":"Rimu.update_shift_parameters!","text":"update_shift_parameters!(\n    s <: ShiftStrategy,\n    shift_parameters,\n    tnorm,\n    v_new,\n    v_old,\n    step,\n    report\n) -> shift_stats, proceed\n\nUpdate the shift_parameters according to strategy s. See ShiftStrategy. Returns a named tuple of the shift statistics and a boolean proceed indicating whether the simulation should proceed.\n\nSee initialise_shift_parameters, ShiftStrategy.\n\n\n\n\n\n","category":"function"},{"location":"API.html#Rimu.update_time_step-Tuple{ConstantTimeStep, Any, Vararg{Any}}","page":"API","title":"Rimu.update_time_step","text":"update_time_step(s<:TimeStepStrategy, time_step, tnorm) -> new_time_step\n\nUpdate the time step according to the strategy s.\n\n\n\n\n\n","category":"method"},{"location":"API.html#Reexported-Submodules","page":"API","title":"Reexported Submodules","text":"","category":"section"},{"location":"API.html#ExactDiagonalization","page":"API","title":"ExactDiagonalization","text":"","category":"section"},{"location":"API.html","page":"API","title":"API","text":"See Exact Diagonalization","category":"page"},{"location":"API.html#Interfaces","page":"API","title":"Interfaces","text":"","category":"section"},{"location":"API.html","page":"API","title":"API","text":"See Module Interfaces","category":"page"},{"location":"API.html#StochasticStyles","page":"API","title":"StochasticStyles","text":"","category":"section"},{"location":"API.html","page":"API","title":"API","text":"See Module StochasticStyles","category":"page"},{"location":"API.html#Hamiltonians","page":"API","title":"Hamiltonians","text":"","category":"section"},{"location":"API.html","page":"API","title":"API","text":"See Module Hamiltonians","category":"page"},{"location":"API.html#BitStringAddresses","page":"API","title":"BitStringAddresses","text":"","category":"section"},{"location":"API.html","page":"API","title":"API","text":"See Module BitStringAddresses","category":"page"},{"location":"API.html#DictVectors","page":"API","title":"DictVectors","text":"","category":"section"},{"location":"API.html","page":"API","title":"API","text":"See Module DictVectors","category":"page"},{"location":"API.html#StatsTools","page":"API","title":"StatsTools","text":"","category":"section"},{"location":"API.html","page":"API","title":"API","text":"See Module StatsTools","category":"page"},{"location":"API.html#RMPI","page":"API","title":"RMPI","text":"","category":"section"},{"location":"API.html","page":"API","title":"API","text":"See Module RMPI","category":"page"},{"location":"API.html#Index","page":"API","title":"Index","text":"","category":"section"},{"location":"API.html","page":"API","title":"API","text":"","category":"page"},{"location":"stochasticstyles.html#Module-StochasticStyles","page":"Stochastic styles","title":"Module StochasticStyles","text":"","category":"section"},{"location":"stochasticstyles.html","page":"Stochastic styles","title":"Stochastic styles","text":"StochasticStyles","category":"page"},{"location":"stochasticstyles.html#Rimu.StochasticStyles","page":"Stochastic styles","title":"Rimu.StochasticStyles","text":"This module provides concrete implementations of StochasticStyles, which specify the algorithm used by ProjectorMonteCarloProblem when performing stochastic matrix-vector multiplication.\n\nImplemented stochastic styles:\n\nStochasticStyle: abstract type for stochastic styles\nIsStochasticInteger\nIsDeterministic\nIsStochasticWithThreshold\nIsDynamicSemistochastic\nStyleUnknown\n\nThe offdiagonal spawning is defined in spawning.jl and is controlled by setting a SpawningStrategy.\n\nThe vector compression strategies are defined in compression.jl and are controlled by setting a CompressionStrategy.\n\n\n\n\n\n","category":"module"},{"location":"stochasticstyles.html#Available-StochasticStyles","page":"Stochastic styles","title":"Available StochasticStyles","text":"","category":"section"},{"location":"stochasticstyles.html","page":"Stochastic styles","title":"Stochastic styles","text":"StyleUnknown","category":"page"},{"location":"stochasticstyles.html#Rimu.Interfaces.StyleUnknown","page":"Stochastic styles","title":"Rimu.Interfaces.StyleUnknown","text":"StyleUnknown{T}() <: StochasticStyle\n\nTrait for value types not (currently) compatible with FCIQMC. This style makes it possible to construct dict vectors with unsupported valtypes.\n\nSee also StochasticStyle.\n\n\n\n\n\n","category":"type"},{"location":"stochasticstyles.html","page":"Stochastic styles","title":"Stochastic styles","text":"Modules = [StochasticStyles]\nPages = [\"styles.jl\"]","category":"page"},{"location":"stochasticstyles.html#Rimu.StochasticStyles.IsDeterministic","page":"Stochastic styles","title":"Rimu.StochasticStyles.IsDeterministic","text":"IsDeterministic{T=Float64}(compression=NoCompression()) <: StochasticStyle{T}\n\nPropagate with deterministic vector matrix multiplications. Stochastic compression of the resultant vector (after annihilations) can be triggered by setting the optional compression argument to a relevant CompressionStrategy.\n\nSee also StochasticStyle.\n\n\n\n\n\n","category":"type"},{"location":"stochasticstyles.html#Rimu.StochasticStyles.IsDynamicSemistochastic","page":"Stochastic styles","title":"Rimu.StochasticStyles.IsDynamicSemistochastic","text":"IsDynamicSemistochastic{T=Float64}(; kwargs...) <: StochasticStyle{T}\n\nQMC propagation with floating-point walker numbers and reduced noise. All possible spawns (offdiagonal elements in vector-matrix multiplication) are performed deterministically when number of walkers in a configuration is high, as controlled by the rel_spawning_threshold and abs_spawning_threshold keywords. Stochastic selection of spawns is controlled by the spawning keyword.\n\nBy default, a stochastic vector compression is applied after annihilations are completed. This behaviour can be changed to on-the-fly projection (as in IsStochasticInteger or IsStochasticWithThreshold) by setting late_compression=false, or modifying spawning and compression. See parameters below for a more detailed explanation.\n\nParameters:\n\nthreshold = 1.0: Values below this number are stochastically projected to this value or zero. See also ThresholdCompression.\nlate_compression = true: If this is set to true, stochastic vector compression is performed after all the spawns are performed. If it is set to false, values are stochastically projected as they are being spawned. late_compression=true is equivalent to setting compression=ThresholdCompression(threshold) and spawning=WithReplacement().  late_compression=false is equivalent to compression=NoCompression() and spawning=WithReplacement(threshold).\nrel_spawning_threshold = 1.0: If the walker number on a configuration times this threshold is greater than the number of offdiagonals, spawning is done deterministically. Should be set to 1 or more for best performance.\nabs_spawning_threshold = Inf: If the walker number on a configuration is greater than this value, spawning is done deterministically. Can be set to e.g.  abs_spawning_threshold = 0.1 * target_walkers.\nspawning = WithReplacement(): SpawningStrategy to use for the non-exact spawns.\ncompression = ThresholdCompression(threshold): CompressionStrategy used to compress the vector after a step. Overrides threshold.\n\nSee also StochasticStyle.\n\n\n\n\n\n","category":"type"},{"location":"stochasticstyles.html#Rimu.StochasticStyles.IsStochastic2Pop","page":"Stochastic styles","title":"Rimu.StochasticStyles.IsStochastic2Pop","text":"IsStochastic2Pop{T=Complex{Int}}() <: StochasticStyle{T}\n\nStochastic propagation with complex walker numbers representing two populations of integer walkers.\n\nWhen using this style, make sure to set a complex number as target walkers in the ShiftStrategy!\n\nThis style is experimental.\n\nSee also StochasticStyle.\n\n\n\n\n\n","category":"type"},{"location":"stochasticstyles.html#Rimu.StochasticStyles.IsStochasticInteger","page":"Stochastic styles","title":"Rimu.StochasticStyles.IsStochasticInteger","text":"IsStochasticInteger{T=Int}() <: StochasticStyle{T}\n\nFCIQMC algorithm with integer walkers as in Booth et al. (2009). During the vector matrix product each individual diagonal and spawning step is rounded stochastically to a nearby integer value.\n\nSee also StochasticStyle.\n\n\n\n\n\n","category":"type"},{"location":"stochasticstyles.html#Rimu.StochasticStyles.IsStochasticWithThreshold","page":"Stochastic styles","title":"Rimu.StochasticStyles.IsStochasticWithThreshold","text":"IsStochasticWithThreshold{T=Float64}(threshold=1.0) <: StochasticStyle{T}\n\nStochastic propagation with floating point walker numbers. During the vector matrix product each individual diagonal and spawning result is rounded stochastically if smaller than threshold (before annihilations). For a more customizable stochastic style, see IsDynamicSemistochastic.\n\nSee also StochasticStyle.\n\n\n\n\n\n","category":"type"},{"location":"stochasticstyles.html#The-StochasticStyle-interface","page":"Stochastic styles","title":"The StochasticStyle interface","text":"","category":"section"},{"location":"stochasticstyles.html","page":"Stochastic styles","title":"Stochastic styles","text":"StochasticStyle\nstep_stats\napply_column!\ndefault_style","category":"page"},{"location":"stochasticstyles.html#Rimu.Interfaces.StochasticStyle","page":"Stochastic styles","title":"Rimu.Interfaces.StochasticStyle","text":"StochasticStyle(v)\n\nAbstract type. When called as a function it returns the native style of the generalised vector v that determines how simulations are to proceed.\n\nUsage\n\nConcrete StochasticStyles can be used for the style keyword argument of ProjectorMonteCarloProblem, DVec and PDVec. The following styles are available:\n\nIsStochasticInteger\nIsDeterministic\nIsStochasticWithThreshold\nIsDynamicSemistochastic\nStyleUnknown\n\nExtended Help\n\nInterface\n\nWhen defining a new StochasticStyle, subtype it as MyStyle<:StochasticStyle{T} where T is the concrete value type the style is designed to work with.\n\nFor it to work with ProjectorMonteCarloProblem, a StochasticStyle must define the following:\n\napply_column!(::StochasticStyle, w, H, address, value)\nstep_stats(::StochasticStyle)\n\nand optionally\n\nCompressionStrategy(::StochasticStyle) for vector compression after annihilations,\n\nSee also StochasticStyles, Interfaces.\n\n\n\n\n\n","category":"type"},{"location":"stochasticstyles.html#Rimu.Interfaces.step_stats","page":"Stochastic styles","title":"Rimu.Interfaces.step_stats","text":"step_stats(::StochasticStyle)\nstep_stats(::CompressionStrategy)\n\nReturn a tuple of stat names (Symbol or String) and a tuple of zeros of the same length. These will be reported as columns in the DataFrame returned by ProjectorMonteCarloProblem.\n\n\n\n\n\n","category":"function"},{"location":"stochasticstyles.html#Rimu.Interfaces.apply_column!","page":"Stochastic styles","title":"Rimu.Interfaces.apply_column!","text":"apply_column!(v, op, addr, num, boost=1) -> stats::Tuple\n\nApply the product of column addr of the operator op and the scalar num to the vector v according to the StochasticStyle of v. By expectation value this should be equivalent to\n\nv .+= op[:, add] .* num\n\nThis is used to perform the spawning step in FCIQMC and to implement operator-vector multiplications. Mutates v and reports spawning statistics.\n\nThe boost argument multiplicatively increases the number of spawns to be performed without affecting the expectation value of the procedure.\n\n\n\n\n\n","category":"function"},{"location":"stochasticstyles.html#Rimu.Interfaces.default_style","page":"Stochastic styles","title":"Rimu.Interfaces.default_style","text":"default_style(::Type)\n\nPick a StochasticStyle based on the value type. Returns StyleUnknown if no known default style is set.\n\n\n\n\n\n","category":"function"},{"location":"stochasticstyles.html#Compression-strategies","page":"Stochastic styles","title":"Compression strategies","text":"","category":"section"},{"location":"stochasticstyles.html","page":"Stochastic styles","title":"Stochastic styles","text":"CompressionStrategy\nNoCompression\nStochasticStyles.ThresholdCompression\ncompress!","category":"page"},{"location":"stochasticstyles.html#Rimu.Interfaces.CompressionStrategy","page":"Stochastic styles","title":"Rimu.Interfaces.CompressionStrategy","text":"CompressionStrategy\n\nThe CompressionStrategy controls how a vector is compressed after a step.\n\nDefault implementation:\n\nNoCompression: no vector compression\n\nUsage\n\nA subtype of CompressionStrategy can be passed as a keyword argument to the constructors for some StochasticStyles. Calling CompressionStrategy(s::StochasticStyle) returns a relevant subtype. The default is NoCompression.\n\nInterface\n\nWhen defining a new CompressionStrategy, subtype it as MyCompressionStrategy <: CompressionStrategy and define these methods:\n\ncompress!(s::CompressionStrategy, v)\ncompress!(s::CompressionStrategy, w, v)\nstep_stats(s::CompressionStrategy)\n\n\n\n\n\n","category":"type"},{"location":"stochasticstyles.html#Rimu.Interfaces.NoCompression","page":"Stochastic styles","title":"Rimu.Interfaces.NoCompression","text":"NoCompression <: CompressionStrategy end\n\nDefault CompressionStrategy. Leaves the vector intact.\n\n\n\n\n\n","category":"type"},{"location":"stochasticstyles.html#Rimu.StochasticStyles.ThresholdCompression","page":"Stochastic styles","title":"Rimu.StochasticStyles.ThresholdCompression","text":"ThresholdCompression(threshold=1) <: CompressionStrategy\n\nCompressionStrategy that compresses a vector by threshold projection. Every entry in the vector with a value below the threshold is either set to zero, or increased to the threshold. The probabilty of setting it to zero is equal to abs(value) / threshold.\n\n\n\n\n\n","category":"type"},{"location":"stochasticstyles.html#Rimu.Interfaces.compress!","page":"Stochastic styles","title":"Rimu.Interfaces.compress!","text":"compress!([::CompressionStrategy,] v) -> ::NTuple{N,::Symbol}, ::NTuple{N}\ncompress!([::CompressionStrategy,] w, v) -> ::NTuple{N,::Symbol}, ::NTuple{N}\n\nCompress the vector v. The one-argument version compresses the vector in-place. The two-argument vector stores the result in w. The CompressionStrategy associated with the StochasticStyle of v is used to determine the type of compression.\n\nReturns two tuples, containing the names and values of statistics that are to be reported.\n\n\n\n\n\n","category":"function"},{"location":"stochasticstyles.html#Spawning-strategies-and-convenience-functions","page":"Stochastic styles","title":"Spawning strategies and convenience functions","text":"","category":"section"},{"location":"stochasticstyles.html","page":"Stochastic styles","title":"Stochastic styles","text":"The following functions and types are unexported, but are useful when defining new styles.","category":"page"},{"location":"stochasticstyles.html","page":"Stochastic styles","title":"Stochastic styles","text":"Modules = [StochasticStyles]\nPages = [\"spawning.jl\"]\nOrder = [:function,:method,:type]","category":"page"},{"location":"stochasticstyles.html#Rimu.StochasticStyles.diagonal_step!","page":"Stochastic styles","title":"Rimu.StochasticStyles.diagonal_step!","text":"diagonal_step!(w, op, add, val, threshold=0) -> (clones, deaths, zombies)\n\nPerform diagonal step on a walker add => val. Optional argument threshold sets the projection threshold. If eltype(w) is an Integer, the val is rounded to the nearest integer stochastically.\n\n\n\n\n\n","category":"function"},{"location":"stochasticstyles.html#Rimu.StochasticStyles.projected_deposit!","page":"Stochastic styles","title":"Rimu.StochasticStyles.projected_deposit!","text":"projected_deposit!(w, add, val, parent, threshold=0)\n\nLike deposit!, but performs threshold projection before spawning. If eltype(w) is an Integer, values are stochastically rounded.\n\nReturns the value deposited.\n\n\n\n\n\n","category":"function"},{"location":"stochasticstyles.html#Rimu.StochasticStyles.spawn!","page":"Stochastic styles","title":"Rimu.StochasticStyles.spawn!","text":"spawn!(s::SpawningStrategy, w, op::AbstractHamiltonian, add, val, boost)\nspawn!(s::SpawningStrategy, w, offdiags::AbstractOffdiagonals, add, val, boost)\n\nPerform stochastic spawns to w from address add with val walkers. val * boost controls the number of spawns performed.\n\nThis function should be overloaded in the second form, with offdiags as an argument.\n\nSee SpawningStrategy.\n\n\n\n\n\n","category":"function"},{"location":"stochasticstyles.html#Rimu.StochasticStyles.Bernoulli","page":"Stochastic styles","title":"Rimu.StochasticStyles.Bernoulli","text":"Bernoulli(threshold=0.0) <: SpawningStrategy\n\nPerform Bernoulli sampling. A spawn is attempted on each offdiagonal element with a probability that results in an expected number of spawns equal to the number of walkers on the spawning configuration. This is significantly less efficient than WithReplacement.\n\nIf the number of spawn attempts is greater than the number of offdiagonals, this functions like Exact, but is less efficient. For best performance, this strategy is to be used as a substrategy of DynamicSemistochastic.\n\nParameters\n\nthreshold sets the projection threshold.\n\nspawn! with this strategy returns the number of spawn attempts and the number of spawns.\n\n\n\n\n\n","category":"type"},{"location":"stochasticstyles.html#Rimu.StochasticStyles.DynamicSemistochastic","page":"Stochastic styles","title":"Rimu.StochasticStyles.DynamicSemistochastic","text":"DynamicSemistochastic(; strat, rel_threshold, abs_threshold) <: SpawningStrategy\n\nSpawningStrategy that behaves like strat when the number of walkers is low, but performs exact steps when it is high. What \"high\" means is controlled by the two thresholds described below.\n\nParameters\n\nstrat = WithReplacement(): a SpawningStrategy to use when the multiplication is not performed exactly. If the strat has a threshold different from zero, all spawns will be projected to that threshold.\nrel_threshold = 1.0: When deciding on whether to perform an exact spawn, this value is multiplied to the number of walkers. Should be set to 1 or more for best performance. This threshold is affected by the boost argument to spawn!.\nabs_threshold = Inf: When deciding on whether to perform an exact spawn, min(abs_threshold, num_offdiagonals) is used. This threshold is not affected by the boost argument to spawn!.\n\nSee e.g. WithoutReplacement for a description of the strat.threshold parameter.\n\nspawn! with this strategy returns the numbers of exact and inexact spawns, the number of spawn attempts and the number of spawns.\n\n\n\n\n\n","category":"type"},{"location":"stochasticstyles.html#Rimu.StochasticStyles.Exact","page":"Stochastic styles","title":"Rimu.StochasticStyles.Exact","text":"Exact(threshold=0.0) <: SpawningStrategy\n\nPerform an exact spawning step.\n\nParameters\n\nthreshold sets the projection threshold. If set to zero, no projection is performed.\n\nspawn! with this strategy returns the number of spawn attempts and the number of spawns.\n\n\n\n\n\n","category":"type"},{"location":"stochasticstyles.html#Rimu.StochasticStyles.SingleSpawn","page":"Stochastic styles","title":"Rimu.StochasticStyles.SingleSpawn","text":"SingleSpawn(threshold=0.0) <: SpawningStrategy\n\nPerform a single spawn. Useful as a building block for other stochastic styles.\n\nParameters\n\nthreshold sets the projection threshold. If set to zero, no projection is performed.\n\nspawn! with this strategy returns the number of spawn attempts (always 1) and the number of spawns.\n\n\n\n\n\n","category":"type"},{"location":"stochasticstyles.html#Rimu.StochasticStyles.SpawningStrategy","page":"Stochastic styles","title":"Rimu.StochasticStyles.SpawningStrategy","text":"SpawningStrategy\n\nA SpawningStrategy is used to control how spawns (multiplies with off-diagonal part of the column vector) are performed and can be passed to some of the StochasticStyles as keyword arguments.\n\nThe following concrete implementations are provided:\n\nExact: Perform exact spawns. Used by IsDeterministic.\nWithReplacement: The default stochastic spawning strategy. Spawns are chosen with replacement.\nDynamicSemistochastic: Behave like Exact when the number of spawns performed is high, and like a different substrategy otherwise. Used by IsDynamicSemistochastic.\nSingleSpawn: Perform a single spawn only. Used as a building block for other strategies.\nWithoutReplacement: Similar to WithReplacement, but ensures each spawn is only performed once. Only to be used as a substrategy of DynamicSemistochastic.\nBernoulli: Each spawn is attempted with a fixed probability. Only to be used as a substrategy of DynamicSemistochastic.\n\nInterface\n\nIn order to implement a new SpawningStrategy, define a method for spawn!.\n\n\n\n\n\n","category":"type"},{"location":"stochasticstyles.html#Rimu.StochasticStyles.WithReplacement","page":"Stochastic styles","title":"Rimu.StochasticStyles.WithReplacement","text":"WithReplacement(threshold=0.0) <: SpawningStrategy\n\nSpawningStrategy where spawn targets are sampled with replacement. This is the default spawning strategy for most of the StochasticStyles.\n\nParameters\n\nthreshold sets the projection threshold. If set to zero, no projection is performed.\n\nspawn! with this strategy returns the number of spawn attempts and the number of spawns.\n\n\n\n\n\n","category":"type"},{"location":"stochasticstyles.html#Rimu.StochasticStyles.WithoutReplacement","page":"Stochastic styles","title":"Rimu.StochasticStyles.WithoutReplacement","text":"WithoutReplacement(threshold=0.0) <: SpawningStrategy\n\nSpawningStrategy where spawn targets are sampled without replacement. This strategy needs to allocate a temporary array during spawning, which makes it significantly less efficient than WithReplacement.\n\nIf the number of spawn attempts is greater than the number of offdiagonals, this functions like Exact, but is less efficient. For best performance, this strategy is to be used as a substrategy of DynamicSemistochastic.\n\nParameters\n\nthreshold sets the projection threshold. If set to zero, no projection is performed.\n\nspawn! with this strategy returns the number of spawn attempts and the number of spawns.\n\n\n\n\n\n","category":"type"},{"location":"stochasticstyles.html#Index","page":"Stochastic styles","title":"Index","text":"","category":"section"},{"location":"stochasticstyles.html","page":"Stochastic styles","title":"Stochastic styles","text":"Pages   = [\"stochasticstyles.md\"]","category":"page"},{"location":"generated/BHM-example-mpi.html","page":"Rimu with MPI","title":"Rimu with MPI","text":"EditURL = \"../../../scripts/BHM-example-mpi.jl\"","category":"page"},{"location":"generated/BHM-example-mpi.html#Example-2:-Rimu-with-MPI","page":"Rimu with MPI","title":"Example 2: Rimu with MPI","text":"","category":"section"},{"location":"generated/BHM-example-mpi.html","page":"Rimu with MPI","title":"Rimu with MPI","text":"In this example, we will demonstrate using Rimu with MPI. MPI is a standard for parallel and distributed computing, and it is widely used in high-performance computing. Rimu provides support for MPI to enable parallel computations on multiple nodes.","category":"page"},{"location":"generated/BHM-example-mpi.html","page":"Rimu with MPI","title":"Rimu with MPI","text":"A runnable script for this example is located here. Run it with 2 MPI ranks with mpirun -n 2 julia BHM-example-mpi.jl.","category":"page"},{"location":"generated/BHM-example-mpi.html","page":"Rimu with MPI","title":"Rimu with MPI","text":"We start by importing Rimu and Rimu.RMPI, which contains MPI-related functionality.","category":"page"},{"location":"generated/BHM-example-mpi.html","page":"Rimu with MPI","title":"Rimu with MPI","text":"using Rimu\nusing Rimu.RMPI","category":"page"},{"location":"generated/BHM-example-mpi.html","page":"Rimu with MPI","title":"Rimu with MPI","text":"Note that it is not necessary to initialise the MPI library, as this is already done automatically when Rimu is loaded.","category":"page"},{"location":"generated/BHM-example-mpi.html","page":"Rimu with MPI","title":"Rimu with MPI","text":"We will compute the ground state of a Bose-Hubbard model in momentum space with 10 particles in 10 sites.","category":"page"},{"location":"generated/BHM-example-mpi.html","page":"Rimu with MPI","title":"Rimu with MPI","text":"First, we define the Hamiltonian. We want to start from an address with zero momentum, which is located at mode 5 in the momentum grid. We put all 10 particles, all in the zero momentum mode.","category":"page"},{"location":"generated/BHM-example-mpi.html","page":"Rimu with MPI","title":"Rimu with MPI","text":"address = BoseFS(10, 5 => 10)","category":"page"},{"location":"generated/BHM-example-mpi.html","page":"Rimu with MPI","title":"Rimu with MPI","text":"BoseFS{10,10}(0, 0, 0, 0, 10, 0, 0, 0, 0, 0)","category":"page"},{"location":"generated/BHM-example-mpi.html","page":"Rimu with MPI","title":"Rimu with MPI","text":"We will set the interaction strength u to 6.0. The hopping strength t defaults to 1.0.","category":"page"},{"location":"generated/BHM-example-mpi.html","page":"Rimu with MPI","title":"Rimu with MPI","text":"H = HubbardMom1D(address; u=6.0)","category":"page"},{"location":"generated/BHM-example-mpi.html","page":"Rimu with MPI","title":"Rimu with MPI","text":"HubbardMom1D(fs\"|0 0 0 0 10 0 0 0 0 0⟩\"; u=6.0, t=1.0)","category":"page"},{"location":"generated/BHM-example-mpi.html","page":"Rimu with MPI","title":"Rimu with MPI","text":"We set a reporting strategy. We will use ReportToFile, which writes the reports directly to a file. This is useful for MPI calculations, as they will typically run non-interactively. The reports will be written to disk and can be inspected later. This has the additional benefit of reducing memory use in long-running jobs, as we don't need to keep the results in memory. It also allows us to inspect the results before the computation finishes and recover some data if it fails.","category":"page"},{"location":"generated/BHM-example-mpi.html","page":"Rimu with MPI","title":"Rimu with MPI","text":"The default settings will ensure that only the root MPI rank will write to the file, which is reasonable, and that data is saved in chunks of 1000 time steps. We choose to suppress progress messages with setting io=devnull.","category":"page"},{"location":"generated/BHM-example-mpi.html","page":"Rimu with MPI","title":"Rimu with MPI","text":"reporting_strategy = ReportToFile(\n    filename=\"result.arrow\",\n    io=devnull\n)","category":"page"},{"location":"generated/BHM-example-mpi.html","page":"Rimu with MPI","title":"Rimu with MPI","text":"ReportToFile{Symbol}(\"result.arrow\", 1, 1000, true, false, Base.DevNull(), :zstd, nothing)","category":"page"},{"location":"generated/BHM-example-mpi.html","page":"Rimu with MPI","title":"Rimu with MPI","text":"For running parallel computations with MPI, it is important that a compatible state vector is used. Here we explicitly set up an MPI-enabled state vector, PDVec, which is automatically MPI-distributed over the available number of MPI ranks. In addition, threading will be used with all threads available to Julia.","category":"page"},{"location":"generated/BHM-example-mpi.html","page":"Rimu with MPI","title":"Rimu with MPI","text":"initial_vector = PDVec(address => 1.0; style=IsDynamicSemistochastic())","category":"page"},{"location":"generated/BHM-example-mpi.html","page":"Rimu with MPI","title":"Rimu with MPI","text":"1-element PDVec: style = IsDynamicSemistochastic{Float64,ThresholdCompression,DynamicSemistochastic}()\n  fs\"|0 0 0 0 10 0 0 0 0 0⟩\" => 1.0","category":"page"},{"location":"generated/BHM-example-mpi.html","page":"Rimu with MPI","title":"Rimu with MPI","text":"Now, we can set other parameters as usual. We will perform the computation with 10000 walkers and for 10000 time steps. We will also compute the projected energy by passing a ProjectedEnergy object as a post_step_strategy.","category":"page"},{"location":"generated/BHM-example-mpi.html","page":"Rimu with MPI","title":"Rimu with MPI","text":"problem = ProjectorMonteCarloProblem(H;\n    start_at=initial_vector,\n    reporting_strategy,\n    post_step_strategy=ProjectedEnergy(H, initial_vector),\n    target_walkers=10_000,\n    time_step=1e-4,\n    last_step=10_000\n);","category":"page"},{"location":"generated/BHM-example-mpi.html","page":"Rimu with MPI","title":"Rimu with MPI","text":"The @mpi_root macro performs an action on the root rank only, which is useful for printing.","category":"page"},{"location":"generated/BHM-example-mpi.html","page":"Rimu with MPI","title":"Rimu with MPI","text":"@mpi_root println(\"Running FCIQMC with \", mpi_size(), \" rank(s).\")","category":"page"},{"location":"generated/BHM-example-mpi.html","page":"Rimu with MPI","title":"Rimu with MPI","text":"Running FCIQMC with 1 rank(s).\n","category":"page"},{"location":"generated/BHM-example-mpi.html","page":"Rimu with MPI","title":"Rimu with MPI","text":"Finally, we can run the computation.","category":"page"},{"location":"generated/BHM-example-mpi.html","page":"Rimu with MPI","title":"Rimu with MPI","text":"simulation = solve(problem);\n\n@mpi_root println(\"Simulation success = \", simulation.success)","category":"page"},{"location":"generated/BHM-example-mpi.html","page":"Rimu with MPI","title":"Rimu with MPI","text":"Simulation success = true\n","category":"page"},{"location":"generated/BHM-example-mpi.html","page":"Rimu with MPI","title":"Rimu with MPI","text":"Once the calculation is done, the results are available in the arrow file on disk.","category":"page"},{"location":"generated/BHM-example-mpi.html","page":"Rimu with MPI","title":"Rimu with MPI","text":"In a typical workflow, the simulation results would be loaded from disk and analysed in the REPL or with a separate script. The arrow file can be loaded into a DataFrame with metadata using the load_df function.","category":"page"},{"location":"generated/BHM-example-mpi.html","page":"Rimu with MPI","title":"Rimu with MPI","text":"","category":"page"},{"location":"generated/BHM-example-mpi.html","page":"Rimu with MPI","title":"Rimu with MPI","text":"This page was generated using Literate.jl.","category":"page"},{"location":"index.html#Rimu.jl-Package-Guide","page":"Guide","title":"Rimu.jl Package Guide","text":"","category":"section"},{"location":"index.html","page":"Guide","title":"Guide","text":"Random Integrators for many-body quantum systems","category":"page"},{"location":"index.html","page":"Guide","title":"Guide","text":"The grand aim is to develop a toolbox for many-body quantum systems that can be represented by a Hamiltonian in second quantisation language. Currently supported features include:","category":"page"},{"location":"index.html#Interacting-with-quantum-many-body-models","page":"Guide","title":"Interacting with quantum many-body models","text":"","category":"section"},{"location":"index.html","page":"Guide","title":"Guide","text":"Full configuration interaction quantum Monte Carlo (FCIQMC), a flavour of projector quantum Monte Carlo for stochastically solving the time-independent Schrödinger equation. See References.\nMatrix-free exact diagonalisation of quantum Hamiltonians (with external package KrylovKit.jl).\nSparse matrix representation of quantum Hamiltonians for exact diagonalisation with sparse linear algebra package of your choice (fastest for small systems).","category":"page"},{"location":"index.html#Representing-quantum-many-body-models","page":"Guide","title":"Representing quantum many-body models","text":"","category":"section"},{"location":"index.html","page":"Guide","title":"Guide","text":"A composable and efficient type system for representing single- and multi-component Fock states of bosons, fermions, and mixtures thereof, to be used as a basis for representing Hamiltonians.\nAn interface for defining many-body Hamiltonians.\nPre-defined models include:\nHubbard model in real space for bosons and fermions and mixtures in 1, 2, and 3 spatial dimensions.\nHubbard and related lattice models in momentum space for bosons and fermions in one spatial dimension.\nTranscorrelated Hamiltonian for contact interactions in one dimension for fermions, as described in Jeszenski et al. arXiv:1806.11268.","category":"page"},{"location":"index.html#Statistical-analysis-of-Monte-Carlo-data","page":"Guide","title":"Statistical analysis of Monte Carlo data","text":"","category":"section"},{"location":"index.html","page":"Guide","title":"Guide","text":"Blocking analysis following Flyvberg & Peterson JCP (1989), and automated with hypothesis testing by Jonsson","category":"page"},{"location":"index.html","page":"Guide","title":"Guide","text":"PRE (2018).","category":"page"},{"location":"index.html","page":"Guide","title":"Guide","text":"Unbiased estimators for the ground state energy by re-reweighting following Nightingale & Blöte PRB (1986) and Umrigar et al. JCP (1993).","category":"page"},{"location":"index.html","page":"Guide","title":"Guide","text":"The code supports parallelisation with MPI (harnessing MPI.jl) as well as native Julia threading (experimental). In the future, we may add tools to solve the time-dependent Schrödinger equation and Master equations for open system time evolution.","category":"page"},{"location":"index.html","page":"Guide","title":"Guide","text":"Concept: Joachim Brand and Elke Pahl.","category":"page"},{"location":"index.html","page":"Guide","title":"Guide","text":"Contributors: Joachim Brand, Elke Pahl, Mingrui Yang, Matija Čufar, Chris Bradly.","category":"page"},{"location":"index.html","page":"Guide","title":"Guide","text":"Discussions, help, and additional contributions are acknowledged by Ali Alavi, Didier Adrien, Chris Scott (NeSI), Alexander Pletzer (NeSI).","category":"page"},{"location":"index.html#Installation","page":"Guide","title":"Installation","text":"","category":"section"},{"location":"index.html#Installing-Rimu-for-usage","page":"Guide","title":"Installing Rimu for usage","text":"","category":"section"},{"location":"index.html","page":"Guide","title":"Guide","text":"Rimu is a registered package and can be installed with the package manager. Hit the ] key at the Julia REPL to get into Pkg mode and type","category":"page"},{"location":"index.html","page":"Guide","title":"Guide","text":"pkg> add Rimu","category":"page"},{"location":"index.html","page":"Guide","title":"Guide","text":"Alternatively, use","category":"page"},{"location":"index.html","page":"Guide","title":"Guide","text":"julia> using Pkg; Pkg.add(name=\"Rimu\")","category":"page"},{"location":"index.html","page":"Guide","title":"Guide","text":"in order to install Rimu from a script.","category":"page"},{"location":"index.html#Installing-Rimu-for-development","page":"Guide","title":"Installing Rimu for development","text":"","category":"section"},{"location":"index.html","page":"Guide","title":"Guide","text":"In order to be able to edit the source code, push changes, change and make new git branches, etc., clone the git repository with git clone to a convenient location, e.g. ~/mygitpackagefolder/. Then hit the ] key at the Julia REPL to get into Pkg mode and type","category":"page"},{"location":"index.html","page":"Guide","title":"Guide","text":"pkg> develop ~/mygitpackagefolder/rimu.jl","category":"page"},{"location":"index.html","page":"Guide","title":"Guide","text":"where the file path has to be adjusted to the location of the cloned git repository.","category":"page"},{"location":"index.html#Usage","page":"Guide","title":"Usage","text":"","category":"section"},{"location":"index.html","page":"Guide","title":"Guide","text":"The package is now installed and can be imported with","category":"page"},{"location":"index.html","page":"Guide","title":"Guide","text":"julia> using Rimu","category":"page"},{"location":"index.html","page":"Guide","title":"Guide","text":"When planning to edit the code of the package it is advisable to use the Revise package by issuing","category":"page"},{"location":"index.html","page":"Guide","title":"Guide","text":"julia> using Revise","category":"page"},{"location":"index.html","page":"Guide","title":"Guide","text":"before using Rimu. This will track any changes made to the source code of Rimu and the changed package will be available after saving the source code (hopefully, and most of the time, without restarting the Julia REPL).","category":"page"},{"location":"index.html","page":"Guide","title":"Guide","text":"Rimu offers a number of tools for representing Hamiltonians (see Hamiltonians) and state vectors / wave functions (see DictVectors) as well as algorithms to find the ground state, e.g. ProjectorMonteCarloProblem, ExactDiagonalizationProblem.","category":"page"},{"location":"index.html#Scripts","page":"Guide","title":"Scripts","text":"","category":"section"},{"location":"index.html","page":"Guide","title":"Guide","text":"Rimu is written as a Julia package to be imported with using Rimu as described above. It supplies useful functions and types. Performing actual calculations and analysing the results is done with scripts. The folder scripts/ contains a collections of scripts that are either examples for use of the Rimu package or useful scripts for data analysis. In particular:","category":"page"},{"location":"index.html","page":"Guide","title":"Guide","text":"scripts/BHM-example.jl is an example script that runs fciqmc on the 1D Bose-Hubbard model. A data frame with results is written to the file fciqmcdata.arrow.\nscripts/BHM-example-mpi.jl demonstrates basic usage of Rimu with MPI.","category":"page"},{"location":"index.html#MPI","page":"Guide","title":"MPI","text":"","category":"section"},{"location":"index.html","page":"Guide","title":"Guide","text":"The Rimu package can run in parallel on different processes or node and distribute work by making use of MPI, or \"message passing interface\". For example, running","category":"page"},{"location":"index.html","page":"Guide","title":"Guide","text":"> julia scripts/BHM-example.jl","category":"page"},{"location":"index.html","page":"Guide","title":"Guide","text":"will run on one processor with the main computation (i.e. after package loading and compilation) completing in 2.69 seconds.","category":"page"},{"location":"index.html","page":"Guide","title":"Guide","text":"Running","category":"page"},{"location":"index.html","page":"Guide","title":"Guide","text":"> mpirun -np 4 julia scripts/BHM-example-mpi.jl","category":"page"},{"location":"index.html","page":"Guide","title":"Guide","text":"on the same hardware makes use of 4 cores and the main part completes in 1.04 seconds, a speedup factor of 2.6. This seems reasonable, given that extra work needs to be done for communicating between different processes.","category":"page"},{"location":"index.html","page":"Guide","title":"Guide","text":"Using MPI parallelism with Rimu is easy. Enabling MPI enabled automatically if PDVec is used to store a vector. In that case, data will be stored in a distributed fashion among the MPI ranks and only communicated between ranks when necessary. Additional MPI-related functionality is provided by the module RMPI.","category":"page"},{"location":"index.html#Compatibility","page":"Guide","title":"Compatibility","text":"","category":"section"},{"location":"index.html","page":"Guide","title":"Guide","text":"We recommend using Rimu with the latest Julia release version. Rimu requires at least julia v1.9.","category":"page"},{"location":"index.html#References","page":"Guide","title":"References","text":"","category":"section"},{"location":"index.html","page":"Guide","title":"Guide","text":"The code implements the FCIQMC algorithm originally described in","category":"page"},{"location":"index.html","page":"Guide","title":"Guide","text":"\"Fermion Monte Carlo without fixed nodes: A game of life, death, and annihilation in Slater determinant space\", G. H. Booth, A. J. W. Thom, A. Alavi, J. Chem. Phys. 131, 054106 (2009).\n\"Communications: Survival of the fittest: accelerating convergence in full configuration-interaction quantum Monte Carlo.\", D. Cleland,  G. H. Booth, A. Alavi, J. Chem. Phys. 132, 041103 (2010).","category":"page"},{"location":"index.html","page":"Guide","title":"Guide","text":"Scientific papers describing additional features implemented in Rimu:","category":"page"},{"location":"index.html","page":"Guide","title":"Guide","text":"\"Improved walker population control for full configuration interaction quantum Monte Carlo\", M. Yang, E. Pahl, J. Brand, J. Chem. Phys. 153, 170143 (2020); arXiv:2008.01927.\n\"Stochastic differential equation approach to understanding the population control bias in full configuration interaction quantum Monte Carlo\", J. Brand, M. Yang, E. Pahl, arXiv:2103.07800 (2021).","category":"page"},{"location":"index.html","page":"Guide","title":"Guide","text":"Papers discussing results obtained with Rimu:","category":"page"},{"location":"index.html","page":"Guide","title":"Guide","text":"\"Polaron-Depleton Transition in the Yrast Excitations of a One-Dimensional Bose Gas with a Mobile Impurity\", M. Yang, M. Čufar, E. Pahl, J. Brand, Condens. Matter 7, 15 (2022).\n\"Magnetic impurity in a one-dimensional few-fermion system\", L. Rammelmüller, D. Huber, M. Čufar, J. Brand, A. Volosniev, arXiv:2204.01606 (2022).","category":"page"},{"location":"dictvectors.html#Module-DictVectors","page":"Dict vectors","title":"Module DictVectors","text":"","category":"section"},{"location":"dictvectors.html","page":"Dict vectors","title":"Dict vectors","text":"DictVectors\nAbstractDVec","category":"page"},{"location":"dictvectors.html#Rimu.DictVectors","page":"Dict vectors","title":"Rimu.DictVectors","text":"Module that provides concrete implementations of the AbstractDVec interface.\n\nDVec: basic AbstractDVec\nPDVec: parallel AbstractDVec with MPI and initiator support\nInitiatorDVec: allows storing information about initiator status\n\nSee Interfaces.\n\n\n\n\n\n","category":"module"},{"location":"dictvectors.html#Rimu.Interfaces.AbstractDVec","page":"Dict vectors","title":"Rimu.Interfaces.AbstractDVec","text":"AbstractDVec{K,V}\n\nAbstract data type for vector-like data structures with sparse storage. While conceptually AbstractDVecs represent elements of a vector space over a scalar type V, they are indexed by an arbitrary type K (could be non-integers) similar to dictionaries. They support the interface from VectorInterface.jl and are designed to work well for quantum Monte Carlo with ProjectorMonteCarloProblem and for matrix-free linear algebra with KrylovKit.\n\nConcrete implementations are available as PDVec, DVec, and InitiatorDVec.\n\nAbstractDVecs have a StochasticStyle which selects the spawning algorithm in FCIQMC. Looking up an element that is not stored in the AbstractDVec should return a zero, and setting a value to zero should remove it from the vector. To iterate over an AbstractDVec, use keys, pairs, or values. When possible, use reduction functions such as sum or mapreduce.\n\nInterface\n\nThe interface is similar to the AbstractDict interface, but with the changed behaviour as noted above.  Implement what would be needed for the AbstractDict interface (pairs, keys, values, setindex!, getindex, delete!, length, empty, empty!) and, in addition:\n\nStochasticStyle\nstorage returns an AbstractDict storing the raw data with possibly different valtype than V.\ndeposit!\n\nA default implementation for the VectorInterface.jl interface is provided through the above functions.\n\nSee also DictVectors, Interfaces.\n\n\n\n\n\n","category":"type"},{"location":"dictvectors.html#Concrete-implementations","page":"Dict vectors","title":"Concrete implementations","text":"","category":"section"},{"location":"dictvectors.html","page":"Dict vectors","title":"Dict vectors","text":"DVec\nInitiatorDVec\nPDVec","category":"page"},{"location":"dictvectors.html#Rimu.DictVectors.DVec","page":"Dict vectors","title":"Rimu.DictVectors.DVec","text":"DVec{K,V,D<:AbstractDict{K,V},S}\n\nDictionary-based vector-like data structure for use with FCIQMC and KrylovKit. While mostly behaving like a Dict, it supports various linear algebra operations such as norm and dot. It has a StochasticStyle that is used to select an appropriate spawning strategy in the FCIQMC algorithm.\n\nSee also: AbstractDVec, InitiatorDVec, PDVec.\n\nConstructors\n\nDVec(dict::AbstractDict[; style, capacity]): create a DVec with dict for storage. Note that the data may or may not be copied.\nDVec(args...[; style, capacity]): args... are passed to the Dict constructor. The Dict is used for storage.\nDVec{K,V}([; style, capacity]): create an empty DVec{K,V}.\nDVec(dv::AbstractDVec[; style, capacity]): create a DVec with the same contents as  adv. The style is inherited from dv by default.\n\nThe default style is selected based on the DVec's valtype (see default_style). If a style is given and the valtype does not match the style's eltype, the values are converted to an appropriate type.\n\nThe capacity argument is optional and sets the initial size of the DVec via Base.sizehint!.\n\nExamples\n\njulia> dv = DVec(:a => 1)\nDVec{Symbol,Int64} with 1 entry, style = IsStochasticInteger{Int64}()\n  :a => 1\n\njulia> dv = DVec(:a => 2, :b => 3; style=IsDeterministic())\nDVec{Symbol,Float64} with 2 entries, style = IsDeterministic{Float64}()\n  :a => 2.0\n  :b => 3.0\n\n\n\n\n\n","category":"type"},{"location":"dictvectors.html#Rimu.DictVectors.InitiatorDVec","page":"Dict vectors","title":"Rimu.DictVectors.InitiatorDVec","text":"InitiatorDVec{K,V} <: AbstractDVec{K,V}\n\nDictionary-based vector-like data structure for use with ProjectorMonteCarloProblem and KrylovKit.jl. See AbstractDVec. Functionally identical to DVec, but contains InitiatorValues internally in order to facilitate initiator methods. Initiator methods for controlling the Monte Carlo sign problem were first introduced in J. Chem. Phys. 132, 041103 (2010). How the initiators are handled is controlled by specifying an InitiatorRule with the initiator keyword argument (see below).\n\nSee also: AbstractDVec, DVec, PDVec.\n\nConstructors\n\nInitiatorDVec(dict::AbstractDict[; style, initiator, capacity]): create an InitiatorDVec with dict for storage.  Note that the data may or may not be copied.\nInitiatorDVec(args...[; style, initiator, capacity]): args... are passed to the Dict constructor. The Dict is used for storage.\nInitiatorDVec{K,V}([; style, initiator, capacity]): create an empty InitiatorDVec{K,V}.\nInitiatorDVec(dv::AbstractDVec[; style, initiator, capacity]): create an InitiatorDVec  with the same contents as dv. The style is inherited from dv by default.\n\nKeyword  arguments\n\nstyle: A valid StochasticStyle.  The default is selected based on the InitiatorDVec's valtype (see default_style). If a style is given and the valtype does not match the style's eltype, the values are converted to an appropriate type.\ninitiator = Initiator(1): A valid InitiatorRule. See Initiator.\ncapacity: Indicative size as Int. Optional. Sets the initial size of the InitiatorDVec via Base.sizehint!.\n\n\n\n\n\n","category":"type"},{"location":"dictvectors.html#Rimu.DictVectors.PDVec","page":"Dict vectors","title":"Rimu.DictVectors.PDVec","text":"PDVec{K,V}(; kwargs...)\nPDVec(iter; kwargs...)\nPDVec(pairs...; kwargs...)\n\nDictionary-based vector-like data structure for use with FCIQMC and KrylovKit.jl. While mostly behaving like a Dict, it supports various linear algebra operations such as norm and dot, and the interface defined in VectorInterface.\n\nThe P in PDVec stands for parallel. PDVecs perform mapreduce, foreach, and various linear algebra operations in a threaded manner. If MPI is available, these operations are automatically distributed as well. As such it is not recommended to iterate over pairs, keys, or values directly unless explicitly performing them on the localpart of the vector.\n\nSee also: AbstractDVec, DVec, InitiatorDVec.\n\nKeyword arguments\n\nstyle =default_style(V): A StochasticStyle that is used to select the spawning strategy in the FCIQMC algorithm.\ninitiator =NonInitiator(): An InitiatorRule, used in FCIQMC to remove the sign problem.\ncommunicator: A Communicator that controls how operations are performed when using MPI. The defaults are NotDistributed when not using MPI and AllToAll when using MPI.\n\nExtended Help\n\nSegmentation\n\nThe vector is split into Threads.nthreads() subdictionaries called segments. Which dictionary a key-value pair is mapped to is determined by the hash of the key. The purpose of this segmentation is to allow parallel processing - functions such as mapreduce, add! or dot (full list below) process each subdictionary on a separate thread.\n\nSee also PDWorkingMemory.\n\nExample\n\njulia> add = FermiFS2C((1,1,0,0), (0,0,1,1));\n\njulia> op = HubbardMom1D(add; t=4/π^2, u=4);\n\njulia> pv = PDVec(add => 1.0)\n1-element PDVec: style = IsDeterministic{Float64}()\n  fs\"|↑↑↓↓⟩\" => 1.0\n\njulia> pv = op * pv\n7-element PDVec: style = IsDeterministic{Float64}()\n  fs\"|↑↓↑↓⟩\" => 1.0\n  fs\"|↑↑↓↓⟩\" => 4.0\n  fs\"|↓↑↓↑⟩\" => 1.0\n  fs\"|↓↑↑↓⟩\" => -1.0\n  fs\"|⇅⋅⋅⇅⟩\" => 1.0\n  fs\"|↑↓↓↑⟩\" => -1.0\n  fs\"|⋅⇅⇅⋅⟩\" => 1.0\n\njulia> scale!(pv, -1); pv\n7-element PDVec: style = IsDeterministic{Float64}()\n  fs\"|↑↓↑↓⟩\" => -1.0\n  fs\"|↑↑↓↓⟩\" => -4.0\n  fs\"|↓↑↓↑⟩\" => -1.0\n  fs\"|↓↑↑↓⟩\" => 1.0\n  fs\"|⇅⋅⋅⇅⟩\" => -1.0\n  fs\"|↑↓↓↑⟩\" => 1.0\n  fs\"|⋅⇅⇅⋅⟩\" => -1.0\n\njulia> dest = similar(pv)\n0-element PDVec: style = IsDeterministic{Float64}()\n\njulia> map!(x -> x + 2, dest, values(pv))\n7-element PDVec: style = IsDeterministic{Float64}()\n  fs\"|↑↓↑↓⟩\" => 1.0\n  fs\"|↑↑↓↓⟩\" => -2.0\n  fs\"|↓↑↓↑⟩\" => 1.0\n  fs\"|↓↑↑↓⟩\" => 3.0\n  fs\"|⇅⋅⋅⇅⟩\" => 1.0\n  fs\"|↑↓↓↑⟩\" => 3.0\n  fs\"|⋅⇅⇅⋅⟩\" => 1.0\n\njulia> sum(values(pv))\n-6.0\n\njulia> dot(dest, pv)\n10.0\n\njulia> dot(dest, op, pv)\n44.0\n\nMPI\n\nWhen MPI is active, all parallel reductions are automatically reduced across MPI ranks with a call to MPI.Allreduce!.\n\nIn a distributed setting, PDVec does not support iteration without first making it explicit the iteration is only to be performed on the local segments of the vector. This is done with localpart. In general, even when not using MPI, it is best practice to use localpart when explicit iteration is required.\n\nUse with KrylovKit\n\nPDVec is compatible with eigsolve from KrylovKit.jl. When used, the diagonalisation is performed in a threaded and distributed manner. Using multiple MPI ranks with this method does not distribute the memory load effectively, but does result in significant speedups.\n\nExample\n\njulia> using KrylovKit\n\njulia> add = BoseFS((0,0,5,0,0));\n\njulia> op = HubbardMom1D(add; u=6.0);\n\njulia> pv = PDVec(add => 1.0);\n\njulia> results = eigsolve(op, pv, 4, :SR);\n\njulia> results[1][1:4]\n4-element Vector{Float64}:\n -3.4311156892322234\n  1.1821748602612363\n  3.7377753753082823\n  6.996390417443125\n\nParallel functionality\n\nThe following functions are threaded and MPI-compatible:\n\nFrom Base: mapreduce and derivatives (sum, prod, reduce...), all, any,map! (on values only), +, -, *\nFrom LinearAlgebra: rmul!, lmul!, mul!, axpy!, axpby!, dot, norm, normalize, normalize!\nThe full interface defined in VectorInterface.jl\n\n\n\n\n\n","category":"type"},{"location":"dictvectors.html#Interface-functions","page":"Dict vectors","title":"Interface functions","text":"","category":"section"},{"location":"dictvectors.html","page":"Dict vectors","title":"Dict vectors","text":"deposit!\nstorage\nfreeze\nlocalpart\napply_operator!\nsort_into_targets!\nworking_memory","category":"page"},{"location":"dictvectors.html#Rimu.Interfaces.deposit!","page":"Dict vectors","title":"Rimu.Interfaces.deposit!","text":"deposit!(w::InitiatorDVec, add, val, p_add=>p_val)\n\nAdd val into w at address add as an AbstractInitiatorValue.\n\n\n\n\n\ndeposit!(w::AbstractDVec, add, val, parent::Pair)\n\nAdd val into w at address add, taking into account initiator rules if applicable. parent contains the address => value pair from which the pair add => val was created. InitiatorDVec can intercept this and add its own functionality.\n\n\n\n\n\n","category":"function"},{"location":"dictvectors.html#Rimu.Interfaces.storage","page":"Dict vectors","title":"Rimu.Interfaces.storage","text":"storage(dvec) -> AbstractDict\n\nReturn the raw storage associated with dvec as an AbstractDict. Used in MPI communication.\n\n\n\n\n\n","category":"function"},{"location":"dictvectors.html#OrderedCollections.freeze","page":"Dict vectors","title":"OrderedCollections.freeze","text":"freeze(dv)\n\nCreate a \"frozen\" version of dv which can no longer be modified or used in the conventional manner, but supports faster dot products.\n\nIf dv is an MPIData, synchronize its contents among the ranks first.\n\n\n\n\n\n","category":"function"},{"location":"dictvectors.html#Rimu.Interfaces.localpart","page":"Dict vectors","title":"Rimu.Interfaces.localpart","text":"localpart(dv) -> AbstractDVec\n\nGet the part of dv that is located on this MPI rank. Returns dv itself for vectors that can't be MPI distributed (DVecs and InitiatorDVecs).\n\n\n\n\n\n","category":"function"},{"location":"dictvectors.html#Rimu.Interfaces.apply_operator!","page":"Dict vectors","title":"Rimu.Interfaces.apply_operator!","text":"apply_operator!(working_memory, target, source, operator, boost=1, compress=Val(true)) ->\n    stat_names, stats, working_memory, target\n\nPerform a single matrix(/operator)-vector multiplication:\n\nv^(n + 1) = hatT v^(n) \n\nwhere hatT is the operator, v^(n+1) is the target and v^(n) is the source. The working_memory can be used as temporary storage.\n\nThe boost argument is passed to apply_column! and increases the number of spawns performed. For the operator to be applied without compressing the vector after, set compress to Val(false).\n\nWhether the operation is performed in a stochastic, semistochastic, or determistic way is controlled by the trait StochasticStyle(target). See StochasticStyle.\n\nReturns the step stats generated by the StochasticStyle, the working memory and the target vector. target and working_memory may be mutated and/or swapped.\n\n\n\n\n\n","category":"function"},{"location":"dictvectors.html#Rimu.Interfaces.sort_into_targets!","page":"Dict vectors","title":"Rimu.Interfaces.sort_into_targets!","text":"sort_into_targets!(target, source, stats) -> target, source, agg_stats\n\nAggregate coefficients from source to target and from stats to agg_stats according to thread- or MPI-level parallelism.\n\nReturns the new target and source, as the sorting process may involve swapping them.\n\n\n\n\n\n","category":"function"},{"location":"dictvectors.html#Rimu.Interfaces.working_memory","page":"Dict vectors","title":"Rimu.Interfaces.working_memory","text":"working_memory(dv::AbstractDVec)\n\nCreate a working memory instance compatible with dv. The working memory must be compatible with sort_into_targets! and apply_operator!.\n\n\n\n\n\n","category":"function"},{"location":"dictvectors.html#Supported-operations","page":"Dict vectors","title":"Supported operations","text":"","category":"section"},{"location":"dictvectors.html","page":"Dict vectors","title":"Dict vectors","text":"AbstractDVecs generally support most operations that are defined on Vectors and Dicts. This includes the interface from VectorInterface.jl, and many functions from the LinearAlgebra standard library.","category":"page"},{"location":"dictvectors.html","page":"Dict vectors","title":"Dict vectors","text":"A significant difference between AbstractDVecs, Vectors, and Dicts, is that iteration on them is disabled by default. Iteration must be explicitly performed on keys, values, or pairs, however, it is highly recommended you use mapreduce, reduce, or similar functions when performing reductions, as that will make the operations compatible with MPI.","category":"page"},{"location":"dictvectors.html","page":"Dict vectors","title":"Dict vectors","text":"In addition, Rimu defines the following function.","category":"page"},{"location":"dictvectors.html","page":"Dict vectors","title":"Dict vectors","text":"walkernumber\nwalkernumber_and_length\ndot_from_right","category":"page"},{"location":"dictvectors.html#Rimu.DictVectors.walkernumber","page":"Dict vectors","title":"Rimu.DictVectors.walkernumber","text":"walkernumber(md::MPIData)\n\nCompute the walkernumber of the distributed data on every MPI rank with MPI.Allreduce. MPI syncronizing.\n\n\n\n\n\nwalkernumber(v)\n\nCompute the number of walkers in v. It is used for updating the shift. Overload this function for modifying population control.\n\nIn most cases walkernumber(v) is identical to norm(v, 1). For AbstractDVecs with complex coefficients it reports the one norm separately for the real and the imaginary part as a ComplexF64. See Norm1ProjectorPPop.\n\n\n\n\n\n","category":"function"},{"location":"dictvectors.html#Rimu.DictVectors.walkernumber_and_length","page":"Dict vectors","title":"Rimu.DictVectors.walkernumber_and_length","text":"walkernumber_and_length(v)\n\nCompute walkernumber and length at the same time. When MPI is used, this is more efficient than calling them separately.\n\n\n\n\n\n","category":"function"},{"location":"dictvectors.html#Rimu.Interfaces.dot_from_right","page":"Dict vectors","title":"Rimu.Interfaces.dot_from_right","text":"dot_from_right(w, op::AbstractOperator, v)\n\nInternal function evaluates the 3-argument dot() function in order from right to left.\n\n\n\n\n\n","category":"function"},{"location":"dictvectors.html#Projectors","page":"Dict vectors","title":"Projectors","text":"","category":"section"},{"location":"dictvectors.html","page":"Dict vectors","title":"Dict vectors","text":"AbstractProjector\nNormProjector\nNorm2Projector\nUniformProjector\nNorm1ProjectorPPop\nRimu.DictVectors.FrozenDVec\nRimu.DictVectors.FrozenPDVec","category":"page"},{"location":"dictvectors.html#Rimu.DictVectors.AbstractProjector","page":"Dict vectors","title":"Rimu.DictVectors.AbstractProjector","text":"Abstract supertype for projectors to be used in in lieu of DVecs or Vectors in dot products. Implemented subtypes:\n\nUniformProjector\nNormProjector\nNorm2Projector\nNorm1ProjectorPPop\n\nSee also PostStepStrategy for use of projectors in ProjectorMonteCarloProblem.\n\nInterface\n\nDefine a method for LinearAlgebra.dot(projector, v).\n\n\n\n\n\n","category":"type"},{"location":"dictvectors.html#Rimu.DictVectors.NormProjector","page":"Dict vectors","title":"Rimu.DictVectors.NormProjector","text":"NormProjector() <: AbstractProjector\n\nResults in computing the one-norm when used in dot(). E.g.\n\ndot(NormProjector(),x)\n-> norm(x,1)\n\nNormProjector() thus represents the vector sign.(x).\n\nSee also PostStepStrategy, and AbstractProjector for use of projectors in ProjectorMonteCarloProblem.\n\n\n\n\n\n","category":"type"},{"location":"dictvectors.html#Rimu.DictVectors.Norm2Projector","page":"Dict vectors","title":"Rimu.DictVectors.Norm2Projector","text":"Norm2Projector() <: AbstractProjector\n\nResults in computing the two-norm when used in dot(). E.g.\n\ndot(NormProjector(),x)\n-> norm(x,2) # with type Float64\n\nSee also PostStepStrategy, and AbstractProjector for use of projectors in ProjectorMonteCarloProblem.\n\n\n\n\n\n","category":"type"},{"location":"dictvectors.html#Rimu.DictVectors.UniformProjector","page":"Dict vectors","title":"Rimu.DictVectors.UniformProjector","text":"UniformProjector() <: AbstractProjector\n\nRepresents a vector with all elements 1. To be used with dot(). Minimizes memory allocations.\n\nUniformProjector()⋅v == sum(v)\ndot(UniformProjector(), LO, v) == sum(LO*v)\n\nSee also PostStepStrategy, and AbstractProjector for use of projectors in ProjectorMonteCarloProblem.\n\n\n\n\n\n","category":"type"},{"location":"dictvectors.html#Rimu.DictVectors.Norm1ProjectorPPop","page":"Dict vectors","title":"Rimu.DictVectors.Norm1ProjectorPPop","text":"Norm1ProjectorPPop() <: AbstractProjector\n\nResults in computing the one-norm per population when used in dot(). E.g.\n\ndot(Norm1ProjectorPPop(),x)\n-> norm(real.(x),1) + im*norm(imag.(x),1)\n\nSee also PostStepStrategy, and AbstractProjector for use of projectors in ProjectorMonteCarloProblem.\n\n\n\n\n\n","category":"type"},{"location":"dictvectors.html#Rimu.DictVectors.FrozenDVec","page":"Dict vectors","title":"Rimu.DictVectors.FrozenDVec","text":"FrozenDVec\n\nA frozen DVec(s) can't be modified or used in the conventional manner, but support faster dot products. See: freeze.\n\n\n\n\n\n","category":"type"},{"location":"dictvectors.html#Rimu.DictVectors.FrozenPDVec","page":"Dict vectors","title":"Rimu.DictVectors.FrozenPDVec","text":"FrozenPDVec\n\nParallel version of FrozenDVec. See: freeze, PDVec.\n\n\n\n\n\n","category":"type"},{"location":"dictvectors.html#Initiator-rules","page":"Dict vectors","title":"Initiator rules","text":"","category":"section"},{"location":"dictvectors.html","page":"Dict vectors","title":"Dict vectors","text":"Rimu.DictVectors.InitiatorRule\nRimu.DictVectors.AbstractInitiatorValue\nRimu.DictVectors.InitiatorValue\nRimu.DictVectors.initiator_valtype\nRimu.DictVectors.to_initiator_value\nRimu.DictVectors.from_initiator_value\nRimu.DictVectors.Initiator\nRimu.DictVectors.SimpleInitiator\nRimu.DictVectors.CoherentInitiator\nRimu.DictVectors.NonInitiator\nRimu.DictVectors.NonInitiatorValue","category":"page"},{"location":"dictvectors.html#Rimu.DictVectors.InitiatorRule","page":"Dict vectors","title":"Rimu.DictVectors.InitiatorRule","text":"InitiatorRule{V}\n\nAbstract type for defining initiator rules for InitiatorDVec. Concrete implementations:\n\nInitiator\nSimpleInitiator\nCoherentInitiator\nNonInitiator\n\nExtended Help\n\nInitiatorRules define how to store and retrieve data from associated AbstractInitiatorValues. When defining a new InitiatorRule, also define the following:\n\ninitiator_valtype\nfrom_initiator_value\nto_initiator_value\n\n\n\n\n\n","category":"type"},{"location":"dictvectors.html#Rimu.DictVectors.AbstractInitiatorValue","page":"Dict vectors","title":"Rimu.DictVectors.AbstractInitiatorValue","text":"abstract type AbstractInitiatorValue{V}\n\nA value equipped with additional information that enables a variation of the initiator approximation. To be used with PDVec, InitiatorDVec and InitiatorRules.\n\nMust define:\n\nBase.zero, Base.:+, Base.:-, Base.:*\nfrom_initiator_value and to_initiator_value\n\n\n\n\n\n","category":"type"},{"location":"dictvectors.html#Rimu.DictVectors.InitiatorValue","page":"Dict vectors","title":"Rimu.DictVectors.InitiatorValue","text":"InitiatorValue{V}(; safe::V, unsafe::V, initiator::V) where V\n\nComposite \"walker\" with three fields. For use with InitiatorDVecs.\n\n\n\n\n\n","category":"type"},{"location":"dictvectors.html#Rimu.DictVectors.initiator_valtype","page":"Dict vectors","title":"Rimu.DictVectors.initiator_valtype","text":"initiator_valtype(rule::InitiatorRule, T)\n\nReturn the AbstractInitiatorValue{T} that is employed by the rule.\n\n\n\n\n\n","category":"function"},{"location":"dictvectors.html#Rimu.DictVectors.to_initiator_value","page":"Dict vectors","title":"Rimu.DictVectors.to_initiator_value","text":"to_initiator_value(::InitiatorRule, k::K, v::V, parent)\n\nConvert v to an AbstractInitiatorValue, taking the initiator rule and the parent that spawned it into account.\n\n\n\n\n\n","category":"function"},{"location":"dictvectors.html#Rimu.DictVectors.from_initiator_value","page":"Dict vectors","title":"Rimu.DictVectors.from_initiator_value","text":"from_initiator_value(i::InitiatorRule, v::AbstractInitiatorValue)\n\nConvert the AbstractInitiatorValue v into a scalar value according to the InitiatorRule i.\n\n\n\n\n\n","category":"function"},{"location":"dictvectors.html#Rimu.DictVectors.Initiator","page":"Dict vectors","title":"Rimu.DictVectors.Initiator","text":"Initiator(threshold = 1.0) <: InitiatorRule\n\nInitiator rule to be passed to PDVec or InitiatorDVec. An initiator is a configuration add with a coefficient with magnitude abs(v[add]) > threshold. The threshold can be passed as a keyword argument. Rules:\n\nInitiators can spawn anywhere.\nNon-initiators can spawn to initiators.\n\nSee InitiatorRule.\n\n\n\n\n\n","category":"type"},{"location":"dictvectors.html#Rimu.DictVectors.SimpleInitiator","page":"Dict vectors","title":"Rimu.DictVectors.SimpleInitiator","text":"SimpleInitiator(threshold = 1.0) <: InitiatorRule\n\nInitiator rule to be passed to PDVec or InitiatorDVec. An initiator is a configuration add with a coefficient with magnitude abs(v[add]) > threshold. The threshold can be passed as a keyword argument. Rules:\n\nInitiators can spawn anywhere.\nNon-initiators cannot spawn.\n\nSee InitiatorRule.\n\n\n\n\n\n","category":"type"},{"location":"dictvectors.html#Rimu.DictVectors.CoherentInitiator","page":"Dict vectors","title":"Rimu.DictVectors.CoherentInitiator","text":"CoherentInitiator(threshold = 1.0) <: InitiatorRule\n\nInitiator rule to be passed to PDVec or InitiatorDVec. An initiator is a configuration add with a coefficient with magnitude abs(v[add]) > threshold. The threshold can be passed as a keyword argument. Rules:\n\nInitiators can spawn anywhere.\nNon-initiators can spawn to initiators.\nMultiple non-initiators can spawn to a single non-initiator if their contributions add up to a value greater than the initiator threshold.\n\nSee InitiatorRule.\n\n\n\n\n\n","category":"type"},{"location":"dictvectors.html#Rimu.DictVectors.NonInitiator","page":"Dict vectors","title":"Rimu.DictVectors.NonInitiator","text":"NonInitiator() <: InitiatorRule\n\nInitiator rule that disables the approximation. This is the default setting for PDVec.\n\nSee InitiatorRule.\n\n\n\n\n\n","category":"type"},{"location":"dictvectors.html#Rimu.DictVectors.NonInitiatorValue","page":"Dict vectors","title":"Rimu.DictVectors.NonInitiatorValue","text":"NonInitiatorValue{V}\n\nValue that does not contain any additional information - used with NonInitiator, the default initiator rule for PDVec.\n\n\n\n\n\n","category":"type"},{"location":"dictvectors.html#PDVec-internals","page":"Dict vectors","title":"PDVec internals","text":"","category":"section"},{"location":"dictvectors.html#Working-memory","page":"Dict vectors","title":"Working memory","text":"","category":"section"},{"location":"dictvectors.html","page":"Dict vectors","title":"Dict vectors","text":"Modules = [DictVectors]\nPages = [\"pdworkingmemory.jl\"]","category":"page"},{"location":"dictvectors.html#Rimu.DictVectors.FirstColumnIterator","page":"Dict vectors","title":"Rimu.DictVectors.FirstColumnIterator","text":"FirstColumnIterator{W,D} <: AbstractVector{D}\n\nIterates segments in the first column of a working memory that belong to a specified rank.\n\nSee PDWorkingMemory, remote_segments and local_segments.\n\n\n\n\n\n","category":"type"},{"location":"dictvectors.html#Rimu.DictVectors.PDWorkingMemory","page":"Dict vectors","title":"Rimu.DictVectors.PDWorkingMemory","text":"PDWorkingMemory(t::PDVec)\n\nThe working memory that handles threading and MPI distribution for operations that involve operators, such as FCIQMC propagation, operator-vector multiplication and three-way dot products with PDVecs.\n\nThe working memory is structured as a two-dimensional array of segments, which themselves are Dicts (see PDVec). The number of rows in this array is equal to the number of segments across all MPI ranks (covering the entire address space), while the number of columns corresponds to the number of segments in the current MPI rank (i.e. column corresponds to the part of the address space that is local to the current rank).\n\nThe purpose of this organisation is to allow spawning in parallel without using locks or atomic operations. The spawning is performed by applying the following sequence of operations:\n\nperform_spawns!: each segment in the PDVec is multiplied by the operator independently, with the results being stored in a column of the working memory.\ncollect_local!: the rows of the working memory are summed to the first column.\nsynchronize_remote!: the segments corresponding to other MPI ranks are distributed and transferred to the first column.\nmove_and_compress!: the results are stochastically compressed and moved to the result PDVec\n\nWhen used with three-argument dot products, a full copy of the left-hand side vector is materialized in the first column of the working memory on all ranks.\n\n\n\n\n\n","category":"type"},{"location":"dictvectors.html#Rimu.DictVectors.PDWorkingMemoryColumn","page":"Dict vectors","title":"Rimu.DictVectors.PDWorkingMemoryColumn","text":"PDWorkingMemoryColumn\n\nA column in PDWorkingMemory. Supports getindex, deposit! and StochasticStyle and acts as a target for spawning. Can be used as a target in a three-way dot-product.\n\n\n\n\n\n","category":"type"},{"location":"dictvectors.html#Rimu.DictVectors.collect_local!-Tuple{PDWorkingMemory}","page":"Dict vectors","title":"Rimu.DictVectors.collect_local!","text":"collect_local!(w::PDWorkingMemory)\n\nSum each row in w and store the result in the first column. This step must be performed before using local_segments or remote_segments to move the values elsewhere.\n\nSee PDWorkingMemory.\n\n\n\n\n\n","category":"method"},{"location":"dictvectors.html#Rimu.DictVectors.first_column-Union{Tuple{PDWorkingMemory{K, V, W, S}}, Tuple{S}, Tuple{W}, Tuple{V}, Tuple{K}} where {K, V, W, S}","page":"Dict vectors","title":"Rimu.DictVectors.first_column","text":"first_column(::PDWorkingMemory)\n\nReturn the first column of the working memory. This is where the vectors are collected with collect_local!, synchronize_remote!, copy_to_local!.\n\nSee PDWorkingMemory.\n\n\n\n\n\n","category":"method"},{"location":"dictvectors.html#Rimu.DictVectors.local_segments-Tuple{PDWorkingMemory}","page":"Dict vectors","title":"Rimu.DictVectors.local_segments","text":"local_segments(w::PDWorkingMemory)\n\nReturns iterator over the segments in the first column of w on the current rank. Iterates Dicts.\n\nSee PDWorkingMemory.\n\n\n\n\n\n","category":"method"},{"location":"dictvectors.html#Rimu.DictVectors.move_and_compress!-Tuple{PDVec, PDWorkingMemory}","page":"Dict vectors","title":"Rimu.DictVectors.move_and_compress!","text":"move_and_compress!(dst::PDVec, src::PDWorkingMemory)\nmove_and_compress!(::CompressionStrategy, dst::PDVec, src::PDWorkingMemory)\n\nMove the values in src to dst, compressing the according to the CompressionStrategy on the way. This step can only be performed after collect_local! and synchronize_remote!.\n\nSee PDWorkingMemory.\n\n\n\n\n\n","category":"method"},{"location":"dictvectors.html#Rimu.DictVectors.num_columns-Tuple{PDWorkingMemory}","page":"Dict vectors","title":"Rimu.DictVectors.num_columns","text":"num_columns(w::PDWorkingMemory) -> Int\n\nNumber of columns in the working memory. The number of rows is equal to the number of segments in the local MPI rank.\n\nSee PDWorkingMemory.\n\n\n\n\n\n","category":"method"},{"location":"dictvectors.html#Rimu.DictVectors.num_rows-Tuple{PDWorkingMemory}","page":"Dict vectors","title":"Rimu.DictVectors.num_rows","text":"num_rows(w::PDWorkingMemory) -> Int\n\nNumber of rows in the working memory. The number of rows is equal to the number of segments accross all MPI ranks.\n\nSee PDWorkingMemory.\n\n\n\n\n\n","category":"method"},{"location":"dictvectors.html#Rimu.DictVectors.perform_spawns!-Tuple{PDWorkingMemory, PDVec, Any, Any}","page":"Dict vectors","title":"Rimu.DictVectors.perform_spawns!","text":"perform_spawns!(w::PDWorkingMemory, v::PDVec, ham, boost)\n\nPerform spawns from v through ham to w. boost increases the number of spawns without affecting the expectation value of the process.\n\nSee PDVec and PDWorkingMemory.\n\n\n\n\n\n","category":"method"},{"location":"dictvectors.html#Rimu.DictVectors.remote_segments-Tuple{PDWorkingMemory, Any}","page":"Dict vectors","title":"Rimu.DictVectors.remote_segments","text":"remote_segments(w::PDWorkingMemory, rank_id)\n\nReturns iterator over the segments in the first column of w that belong to rank rank_id. Iterates Dicts.\n\nSee PDWorkingMemory.\n\n\n\n\n\n","category":"method"},{"location":"dictvectors.html#Rimu.DictVectors.synchronize_remote!-Tuple{PDWorkingMemory}","page":"Dict vectors","title":"Rimu.DictVectors.synchronize_remote!","text":"synchronize_remote!([::Communicator,] w::PDWorkingMemory) -> names, values\n\nSynchronize non-local segments across MPI and add the results to the first column. Controlled by the Communicator. This can only be perfomed after collect_local!.\n\nShould return a Tuple of names and a Tuple of values to report.\n\nSee PDWorkingMemory.\n\n\n\n\n\n","category":"method"},{"location":"dictvectors.html#Communicators","page":"Dict vectors","title":"Communicators","text":"","category":"section"},{"location":"dictvectors.html","page":"Dict vectors","title":"Dict vectors","text":"Modules = [DictVectors]\nPages = [\"communicators.jl\"]","category":"page"},{"location":"dictvectors.html#Rimu.DictVectors.AllToAll","page":"Dict vectors","title":"Rimu.DictVectors.AllToAll","text":"AllToAll{K,V}(; mpi_comm, n_segments, report) <: Communicator\n\nCommunicator that uses collective communication using MPI.Alltoall[v]!.\n\nKeyword arguments\n\nmpi_comm=MPI.COMM_WORLD: the MPI communicator to use.\nn_segments=Threads.nthreads(): the number of segments per rank to use. Should match the PDVec the communicator is used with.\nreport=false: if set to true, report MPI communication times during a projector Monte Carlo run.\n\nSee also: Communicator.\n\n\n\n\n\n","category":"type"},{"location":"dictvectors.html#Rimu.DictVectors.Communicator","page":"Dict vectors","title":"Rimu.DictVectors.Communicator","text":"abstract type Communicator\n\nCommunicators are used to handle MPI communication when using PDVecs. Currently, three implementations are provided, NotDistributed, AllToAll and PointToPoint. The communicator is picked automatically according to the number of MPI ranks available.\n\nWhen implementing a communicator, use local_segments and remote_segments.\n\nInterface\n\nsynchronize_remote!\nmpi_rank\nmpi_size\nmpi_comm\n\nOptional interface\n\nis_distributed: defaults to returning true.\nmerge_remote_reductions: defaults to using MPI.Allreduce.\ntotal_num_segments: defaults to n * mpi_size.\ntarget_segment: defaults to selecting using fastrange  to pick the segment.\n\nSee also: PDVec, PDWorkingMemory.\n\n\n\n\n\n","category":"type"},{"location":"dictvectors.html#Rimu.DictVectors.LocalPart","page":"Dict vectors","title":"Rimu.DictVectors.LocalPart","text":"LocalPart <: Communicator\n\nWhen localpart is used, the vector's Communicator is replaced with this. This allows iteration and local reductions.\n\n\n\n\n\n","category":"type"},{"location":"dictvectors.html#Rimu.DictVectors.NestedSegmentedBuffer","page":"Dict vectors","title":"Rimu.DictVectors.NestedSegmentedBuffer","text":"NestedSegmentedBuffer{T}(nrows) <: AbstractMatrix{AbstractVector{T}}\n\nMatrix of vectors stored in a single buffer with collective MPI communication support. The number of rows in the matrix is fixed to nrows.\n\nUsed in the AllToAll communication strategy, where each column corresponds to an MPI rank and each row corresponds to a segment in the PDVec.\n\nSupported operations\n\nappend_collections!: add a column to the matrix.\nappend_empty_column!: add an empty column to the matrix.\nmpi_exchange_alltoall!: each rank sends the i-th column of the matrix to the (i-1)-st rank.\nmpi_exchange_allgather!: each rank sends the 1-st column of the matrix to all ranks.\n\nSee also: SegmentedBuffer.\n\n\n\n\n\n","category":"type"},{"location":"dictvectors.html#Rimu.DictVectors.NotDistributed","page":"Dict vectors","title":"Rimu.DictVectors.NotDistributed","text":"NotDistributed <: Communicator\n\nThis Communicator is used when MPI is not available.\n\n\n\n\n\n","category":"type"},{"location":"dictvectors.html#Rimu.DictVectors.PointToPoint","page":"Dict vectors","title":"Rimu.DictVectors.PointToPoint","text":"PointToPoint{K,V}(; mpi_comm, report) <: Communicator\n\nMPI Communicator that uses circular communication using MPI.Isend and MPI.Recv!.\n\nKeyword arguments\n\nmpi_comm=MPI.COMM_WORLD: the MPI communicator to use.\nreport=false: if set to true, report MPI communication times during a projector Monte Carlo run.\n\n\n\n\n\n","category":"type"},{"location":"dictvectors.html#Rimu.DictVectors.SegmentedBuffer","page":"Dict vectors","title":"Rimu.DictVectors.SegmentedBuffer","text":"SegmentedBuffer{T}() <: AbstractVector{AbstractVector{T}}\n\nBehaves like a vector of vectors, but is stored in a single buffer. It can be sent/received over MPI keeping its structure intact. Used in the PointToPoint communication strategy.\n\nSupported operations\n\nreplace_collections!: insert data into the buffers\nmpi_send: send the contents of a buffer to a given rank\nmpi_recv_any!: receive a message sent by mpi_send from any rank, storing the contents in this buffer\n\nSee also: NestedSegmentedBuffer.\n\n\n\n\n\n","category":"type"},{"location":"dictvectors.html#Rimu.DictVectors.append_collections!-Tuple{Rimu.DictVectors.NestedSegmentedBuffer, Any}","page":"Dict vectors","title":"Rimu.DictVectors.append_collections!","text":"append_collections!(buf::NestedSegmentedBuffer, iters)\n\nAdd a column to buf. The length of iters should match buf.nrows.\n\nSee also: NestedSegmentedBuffer, append_empty_column!.\n\n\n\n\n\n","category":"method"},{"location":"dictvectors.html#Rimu.DictVectors.append_empty_column!-Tuple{Rimu.DictVectors.NestedSegmentedBuffer}","page":"Dict vectors","title":"Rimu.DictVectors.append_empty_column!","text":"append_empty_column!(buf::NestedSegmentedBuffer)\n\nLike append_collections!, but adds an empty column.\n\nSee also: NestedSegmentedBuffer, append_collections!.\n\n\n\n\n\n","category":"method"},{"location":"dictvectors.html#Rimu.DictVectors.copy_to_local!","page":"Dict vectors","title":"Rimu.DictVectors.copy_to_local!","text":"copy_to_local!([::Communicator,] w::PDWorkingMemory, t::PDVec) -> PDVec\n\nCopy pairs in t from all ranks and return them as a (possibly) new PDVec, possibly using the PDWorkingMemory as temporary storage.\n\nSee also: PDVec, PDWorkingMemory, Communicator.\n\n\n\n\n\n","category":"function"},{"location":"dictvectors.html#Rimu.DictVectors.is_distributed-Tuple{Rimu.DictVectors.Communicator}","page":"Dict vectors","title":"Rimu.DictVectors.is_distributed","text":"is_distributed(::Communicator)\n\nReturn true if Communicator operates over MPI.\n\n\n\n\n\n","category":"method"},{"location":"dictvectors.html#Rimu.DictVectors.merge_remote_reductions-Tuple{Rimu.DictVectors.Communicator, Any, Any}","page":"Dict vectors","title":"Rimu.DictVectors.merge_remote_reductions","text":"merge_remote_reductions(c::Communicator, op, x)\n\nMerge the results of reductions over MPI. By default, it uses MPI.Allreduce.\n\nSee also: Communicator.\n\n\n\n\n\n","category":"method"},{"location":"dictvectors.html#Rimu.DictVectors.mpi_comm","page":"Dict vectors","title":"Rimu.DictVectors.mpi_comm","text":"mpi_comm(::Communicator) -> MPI.Comm\n\nReturn the MPI.Comm that the Communicator operates on.\n\n\n\n\n\n","category":"function"},{"location":"dictvectors.html#Rimu.DictVectors.mpi_exchange_allgather!-Tuple{Rimu.DictVectors.NestedSegmentedBuffer, Rimu.DictVectors.NestedSegmentedBuffer, Any}","page":"Dict vectors","title":"Rimu.DictVectors.mpi_exchange_allgather!","text":"mpi_exchange_allgather!(src::NestedSegmentedBuffer, dst::NestedSegmentedBuffer, comm)\n\nThe first and only column in src will be sent to all ranks. The data from all ranks will be gethered in dst. After this operation, dst will contain the same data on all ranks.\n\nSee also NestedSegmentedBuffer, mpi_exchange_alltoall!.\n\n\n\n\n\n","category":"method"},{"location":"dictvectors.html#Rimu.DictVectors.mpi_exchange_alltoall!-Tuple{Rimu.DictVectors.NestedSegmentedBuffer, Rimu.DictVectors.NestedSegmentedBuffer, Any}","page":"Dict vectors","title":"Rimu.DictVectors.mpi_exchange_alltoall!","text":"mpi_exchange_alltoall!(src::NestedSegmentedBuffer, dst::NestedSegmentedBuffer, comm)\n\nThe n-th column from src will be sent to rank n-1. The data sent from rank r will be stored in the (r+1)-st column of dst.\n\nSee also: NestedSegmentedBuffer, mpi_exchange_allgather!.\n\n\n\n\n\n","category":"method"},{"location":"dictvectors.html#Rimu.DictVectors.mpi_rank","page":"Dict vectors","title":"Rimu.DictVectors.mpi_rank","text":"mpi_rank(::Communicator) -> Int\n\nReturn the MPI rank of the Communicator.\n\n\n\n\n\n","category":"function"},{"location":"dictvectors.html#Rimu.DictVectors.mpi_recv_any!-Tuple{Rimu.DictVectors.SegmentedBuffer, Any}","page":"Dict vectors","title":"Rimu.DictVectors.mpi_recv_any!","text":"mpi_recv_any!(buf::SegmentedBuffer, comm::MPI_Comm) -> Int\n\nFind a source that is ready to send a buffer and receive from it. Return the rank ID of the sender.\n\n\n\n\n\n","category":"method"},{"location":"dictvectors.html#Rimu.DictVectors.mpi_send-Tuple{Rimu.DictVectors.SegmentedBuffer, Any, Any}","page":"Dict vectors","title":"Rimu.DictVectors.mpi_send","text":"mpi_send(buf::SegmentedBuffer, dest, comm::MPI.Comm)\n\nSend the buffer to rank with id dest.\n\n\n\n\n\n","category":"method"},{"location":"dictvectors.html#Rimu.DictVectors.mpi_size","page":"Dict vectors","title":"Rimu.DictVectors.mpi_size","text":"mpi_size(::Communicator) -> Int\n\nReturn the total number of MPI ranks in the Communicator.\n\n\n\n\n\n","category":"function"},{"location":"dictvectors.html#Rimu.DictVectors.replace_collections!-Tuple{Rimu.DictVectors.SegmentedBuffer, Any}","page":"Dict vectors","title":"Rimu.DictVectors.replace_collections!","text":"replace_collections!(buf::SegmentedBuffer, iters)\n\nInsert collections in iters into a SegmentedBuffer.\n\njulia> using Rimu.DictVectors: SegmentedBuffer\n\njulia> buf = SegmentedBuffer{Int}()\n0-element SegmentedBuffer{Int64}\n\njulia> Rimu.DictVectors.replace_collections!(buf, [[1,2,3], [4,5]])\n2-element SegmentedBuffer{Int64}:\n [1, 2, 3]\n [4, 5]\n\njulia> Rimu.DictVectors.replace_collections!(buf, [[1], [2,3], [4]])\n3-element SegmentedBuffer{Int64}:\n [1]\n [2, 3]\n [4]\n\n\n\n\n\n","category":"method"},{"location":"dictvectors.html#Rimu.DictVectors.target_segment-Tuple{Rimu.DictVectors.Communicator, Any, Any}","page":"Dict vectors","title":"Rimu.DictVectors.target_segment","text":"target_segment(c::Communicator, k, num_segments) -> target, is_local\n\nThis function is used to determine where in the PDVec a key should be stored. If the key is local (stored on the same MPI rank), return its segment index and true. If the key is non-local, return any value and false.\n\nSee also: PDVec, Communicator.\n\n\n\n\n\n","category":"method"},{"location":"dictvectors.html#Rimu.DictVectors.total_num_segments-Tuple{Rimu.DictVectors.Communicator, Any}","page":"Dict vectors","title":"Rimu.DictVectors.total_num_segments","text":"total_num_segments(c::Communicator, n) -> Int\n\nReturn the total number of segments, including the remote ones, where n is number of local segments.\n\nSee also: PDVec, Communicator.\n\n\n\n\n\n","category":"method"},{"location":"dictvectors.html#Index","page":"Dict vectors","title":"Index","text":"","category":"section"},{"location":"dictvectors.html","page":"Dict vectors","title":"Dict vectors","text":"Pages   = [\"dictvectors.md\"]","category":"page"}]
}
