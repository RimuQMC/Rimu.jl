var documenterSearchIndex = {"docs":
[{"location":"mpi.html#Working-with-MPI","page":"Using MPI","title":"Working with MPI","text":"","category":"section"},{"location":"mpi.html","page":"Using MPI","title":"Using MPI","text":"If you are using PDVecs to store your vectors, working with MPI should be fairly straightforward. Generally, PDVec will work with MPI automatically, as long as MPI is set up correctly and a few common pitfalls are avoided.","category":"page"},{"location":"mpi.html#Configuring-MPI","page":"Using MPI","title":"Configuring MPI","text":"","category":"section"},{"location":"mpi.html","page":"Using MPI","title":"Using MPI","text":"When running on a cluster, ensure that MPI.jl is using the system binary. See the MPI.jl documentation for more information.","category":"page"},{"location":"mpi.html","page":"Using MPI","title":"Using MPI","text":"It is always a good idea to start your script with a quick test that ensures the MPI is set up correctly. One way to do this is to open with","category":"page"},{"location":"mpi.html","page":"Using MPI","title":"Using MPI","text":"mpi_allprintln(\"hello\")","category":"page"},{"location":"mpi.html","page":"Using MPI","title":"Using MPI","text":"which should print something like","category":"page"},{"location":"mpi.html","page":"Using MPI","title":"Using MPI","text":"[ rank 0: hello\n[ rank 1: hello\n[ rank 2: hello\n[ rank 3: hello","category":"page"},{"location":"mpi.html","page":"Using MPI","title":"Using MPI","text":"If it prints rank 0 several times, the code will run, but ranks will not communicate.","category":"page"},{"location":"mpi.html#Using-Slurm","page":"Using MPI","title":"Using Slurm","text":"","category":"section"},{"location":"mpi.html","page":"Using MPI","title":"Using MPI","text":"When using PDVec, the recommended setup is to use threads to parallelise the computation within a node, and to only use MPI for inter-node communication. In a slurm script, this is done as follows:","category":"page"},{"location":"mpi.html","page":"Using MPI","title":"Using MPI","text":"...\n#SBATCH --ntasks-per-node=1\n#SBATCH --nodes=4            # replace 4 with the desired number of nodes\n#SBATCH --cpus-per-task=28   # replace 28 with the number of cores available in a node\n#SBATCH --hint=nomultithread # don't use hyperthreading\n...\n\nsrun julia --project -tauto script.jl","category":"page"},{"location":"mpi.html","page":"Using MPI","title":"Using MPI","text":"On some clusters, additional settings must be used with srun, for example the CTCP cluster requires the following.","category":"page"},{"location":"mpi.html","page":"Using MPI","title":"Using MPI","text":"srun mpi=pmi2 julia --project -tauto script.jl","category":"page"},{"location":"mpi.html#Common-pitfalls-with-reducing-functions","page":"Using MPI","title":"Common pitfalls with reducing functions","text":"","category":"section"},{"location":"mpi.html#Using-@mpi_root","page":"Using MPI","title":"Using @mpi_root","text":"","category":"section"},{"location":"mpi.html","page":"Using MPI","title":"Using MPI","text":"Take care to not use reducing functions (such as length, sum, norm, ...) inside @mpi_root blocks. Doing so will only initiate the distributed reduction on one rank only, which will cause the code to go out of sync and freeze. As an example, to report the current length of a vector, calculate the length before the @mpi_root block:","category":"page"},{"location":"mpi.html","page":"Using MPI","title":"Using MPI","text":"len = length(pdvec)\n@mpi_root println(\"vector length is $len\")","category":"page"},{"location":"mpi.html#Threaded-operations-and-reductions","page":"Using MPI","title":"Threaded operations and reductions","text":"","category":"section"},{"location":"mpi.html","page":"Using MPI","title":"Using MPI","text":"When using functions that take anonymous functions, such as map(!), sum, or mapreduce, it is important that the anonymous functions passed to them do not perform any MPI-reducing operations (length, norm, sum, etc.). These anonymous functions are executed on multiple threads and initiating MPI communication from multiple threads may cause issues.","category":"page"},{"location":"mpi.html","page":"Using MPI","title":"Using MPI","text":"As an example, suppose we want to scale a vector by its length by using map!. The correct way to write this code is as","category":"page"},{"location":"mpi.html","page":"Using MPI","title":"Using MPI","text":"len = length(pdvec)\nmap!(values(pdvec)) do x\n\tx / len\nend","category":"page"},{"location":"mpi.html","page":"Using MPI","title":"Using MPI","text":"Similar to the previous example, len is calculated first and not within the body of map!. In this specific case, an even better option is to use the scale! function from VectorInterface.jl:","category":"page"},{"location":"mpi.html","page":"Using MPI","title":"Using MPI","text":"scale!(pdvec, 1 / length(pdvec))","category":"page"},{"location":"projectormontecarlo.html#Projector-Monte-Carlo-/-FCIQMC","page":"Projector Monte Carlo","title":"Projector Monte Carlo / FCIQMC","text":"","category":"section"},{"location":"projectormontecarlo.html","page":"Projector Monte Carlo","title":"Projector Monte Carlo","text":"The purpose of Projector Monte Carlo is to stochastically sample the ground state, i.e. the  eigenvector corresponding to the lowest eigenvalue of a quantum Hamiltonian, or more generally,  a very large matrix. Rimu implements a flavor of Projector Monte Carlo called  Full Configuration Interaction Quantum Monte Carlo (FCIQMC).","category":"page"},{"location":"projectormontecarlo.html#ProjectorMonteCarloProblem","page":"Projector Monte Carlo","title":"ProjectorMonteCarloProblem","text":"","category":"section"},{"location":"projectormontecarlo.html","page":"Projector Monte Carlo","title":"Projector Monte Carlo","text":"To run a projector Monte Carlo simulation you set up a problem with ProjectorMonteCarloProblem and solve it with solve. Alternatively you can initialize a PMCSimulation struct, step!  through time steps, and solve! it to completion. ","category":"page"},{"location":"projectormontecarlo.html","page":"Projector Monte Carlo","title":"Projector Monte Carlo","text":"ProjectorMonteCarloProblem\ninit\nsolve\nsolve!\nstep!","category":"page"},{"location":"projectormontecarlo.html#Rimu.ProjectorMonteCarloProblem-projectormontecarlo","page":"Projector Monte Carlo","title":"Rimu.ProjectorMonteCarloProblem","text":"ProjectorMonteCarloProblem(hamiltonian::AbstractHamiltonian; kwargs...)\n\nDefines a problem to be solved by projector quantum Monte Carlo (QMC) methods, such as the the FCIQMC algorithm.\n\nCommon keyword arguments and defaults:\n\ntime_step = 0.01: Initial time step size.\nlast_step = 100: Controls the number of steps.\ntarget_walkers = 1_000: Target for the 1-norm of the coefficient vector.\nstart_at = starting_address(hamiltonian): Define the initial state vector(s).   An r  s matrix of state vectors can be passed where r is the   number of replicas and s the number of spectral states. See also   default_starting_vector.\nstyle = IsDynamicSemistochastic(): The StochasticStyle of the simulation.\ninitiator = false: Whether to use initiators. Can be true, false, or a valid   InitiatorRule.\nthreading: Default is to use multithreading and/or MPI if available. Set to true to force PDVec for the starting vector, false for serial computation; may be overridden by start_at.\nreporting_strategy = ReportDFAndInfo(): How and when to report results, see ReportingStrategy.\npost_step_strategy = (): Extract observables (e.g. ProjectedEnergy), see PostStepStrategy.\nn_replicas = 1: Number of synchronised independent simulations.\nreplica_strategy = NoStats(n_replicas): Which results to report from replica simulations, see ReplicaStrategy.\n\nExample\n\njulia> hamiltonian = HubbardReal1D(BoseFS(1,2,3));\n\njulia> problem = ProjectorMonteCarloProblem(hamiltonian; target_walkers = 500, last_step = 100);\n\njulia> simulation = solve(problem);\n\njulia> simulation.success[]\ntrue\n\njulia> size(DataFrame(simulation))\n(100, 9)\n\nFurther keyword arguments:\n\nstarting_step = 1: Starting step of the simulation.\nwalltime = Inf: Maximum time allowed for the simulation.\nsimulation_plan = SimulationPlan(; starting_step, last_step, walltime): Defines the   duration of the simulation. Takes precedence over last_step and walltime.\nζ = 0.08: Damping parameter for the shift update.\nξ = ζ^2/4: Forcing parameter for the shift update.\nshift_strategy = DoubleLogUpdate(; target_walkers, ζ, ξ): How to update the shift,   see ShiftStrategy.\ntime_step_strategy = ConstantTimeStep(): Adjust time step or not, see   TimeStepStrategy.\nalgorithm = FCIQMC(; shift_strategy, time_step_strategy): The algorithm to use.   Currenlty only FCIQMC is implemented.\nshift: Initial shift value or collection of shift values. Determined by default from the   Hamiltonian and the starting vectors.\ninitial_shift_parameters: Initial shift parameters or collection of initial shift   parameters. Overrides shift if provided.\nmaxlength = 2 * target_walkers + 100: Maximum length of the vectors.\ndisplay_name = \"PMCSimulation\": Name displayed in progress bar (via ProgressLogging).\nmetadata: User-supplied metadata to be added to the report. Must be an iterable of pairs or a NamedTuple, e.g. metadata = (\"key1\" => \"value1\", \"key2\" => \"value2\"). All metadata is converted to strings.\nrandom_seed = true: Provide and store a seed for the random number generator. If set to   true, a random seed is generated. If set to number, this number is used as the seed.   The seed is used by solve such that solveing the problem twice will yield identical   results. If set to false, no seed is used and results are not reproducible.\n\nSee also init, solve.\n\n\n\n\n\n","category":"type"},{"location":"projectormontecarlo.html#CommonSolve.init-projectormontecarlo","page":"Projector Monte Carlo","title":"CommonSolve.init","text":"init(p::ExactDiagonalizationProblem, [algorithm]; kwargs...)\n\nInitialize a solver for an ExactDiagonalizationProblem p with an optional algorithm. Returns a solver instance that can be solved with solve.\n\nFor a description of the keyword arguments, see the documentation for ExactDiagonalizationProblem.\n\n\n\n\n\ninit(problem::ProjectorMonteCarloProblem; copy_vectors=true)::PMCSimulation\n\nInitialise a Rimu.PMCSimulation.\n\nSee also ProjectorMonteCarloProblem, solve!, solve, step!, Rimu.PMCSimulation.\n\n\n\n\n\n","category":"function"},{"location":"projectormontecarlo.html#CommonSolve.solve-projectormontecarlo","page":"Projector Monte Carlo","title":"CommonSolve.solve","text":"solve(::ProjectorMonteCarloProblem)::PMCSimulation\n\nInitialize and solve a ProjectorMonteCarloProblem until the last step is completed or the walltime limit is reached.\n\nSee also init, solve!, step!, Rimu.PMCSimulation, and solve(::ExactDiagonalizationProblem).\n\n\n\n\n\n","category":"function"},{"location":"projectormontecarlo.html#CommonSolve.solve!-projectormontecarlo","page":"Projector Monte Carlo","title":"CommonSolve.solve!","text":"solve!(sm::PMCSimulation; kwargs...)::PMCSimulation\n\nSolve a Rimu.PMCSimulation until the last step is completed or the walltime limit is reached.\n\nTo continue a previously completed simulation, set a new last_step or walltime using the keyword arguments. Optionally, changes can be made to the replica_strategy, the post_step_strategy, or the reporting_strategy.\n\nOptional keyword arguments:\n\nlast_step = nothing: Set the last step to a new value and continue the simulation.\nwalltime = nothing: Set the allowed walltime to a new value and continue the simulation.\nreset_time = false: Reset the elapsed_time counter and continue the simulation.\nempty_report = false: Empty the report before continuing the simulation.\nreplica_strategy = nothing: Change the replica strategy. Requires the number of replicas   to match the number of replicas in the simulation sm. Implies empty_report = true.\npost_step_strategy = nothing: Change the post-step strategy. Implies   empty_report = true.\nreporting_strategy = nothing: Change the reporting strategy. Implies   empty_report = true.\nmetadata = nothing: Add metadata to the report.\n\nSee also ProjectorMonteCarloProblem, init, solve, step!, Rimu.PMCSimulation.\n\n\n\n\n\n","category":"function"},{"location":"projectormontecarlo.html#CommonSolve.step!-projectormontecarlo","page":"Projector Monte Carlo","title":"CommonSolve.step!","text":"step!(sm::PMCSimulation)::PMCSimulation\n\nAdvance the simulation by one step.\n\nCalling solve! will advance the simulation until the last step or the walltime is exceeded. When completing the simulation without calling solve!, the simulation report needs to be finalised by calling Rimu.finalize_report!.\n\nSee also ProjectorMonteCarloProblem, init, solve!, solve, Rimu.PMCSimulation.\n\n\n\n\n\n","category":"function"},{"location":"projectormontecarlo.html","page":"Projector Monte Carlo","title":"Projector Monte Carlo","text":"After solve or solve! have been called the returned PMCSimulation contains the results of  the projector Monte Carlo calculation.","category":"page"},{"location":"projectormontecarlo.html#PMCSimulation-and-report-as-a-DataFrame","page":"Projector Monte Carlo","title":"PMCSimulation and report as a DataFrame","text":"","category":"section"},{"location":"projectormontecarlo.html","page":"Projector Monte Carlo","title":"Projector Monte Carlo","text":"Rimu.PMCSimulation","category":"page"},{"location":"projectormontecarlo.html#Rimu.PMCSimulation-projectormontecarlo","page":"Projector Monte Carlo","title":"Rimu.PMCSimulation","text":"PMCSimulation\n\nHolds the state and the results of a projector quantum Monte Carlo (PMC) simulation. Is returned by init(::ProjectorMonteCarloProblem) and solved with solve!(::PMCSimulation).\n\nObtain the results of a simulation sm as a DataFrame with DataFrame(sm).\n\nSee also state_vectors, ProjectorMonteCarloProblem, init, solve!.\n\n\n\n\n\n","category":"type"},{"location":"projectormontecarlo.html","page":"Projector Monte Carlo","title":"Projector Monte Carlo","text":"The DataFrame returned from DataFrame(::PMCSimulation) contains the time series data from  the projector Monte Carlo simulation that is of primary interest for analysis. Depending on the  reporting_strategy and other options passed as keyword arguments to  ProjectorMonteCarloProblem it can have different numbers of rows and columns. The rows  correspond to the reported time steps (Monte Carlo steps). There is at least one column with the name :step. Further columns are usually present with additional data reported from the simulation.","category":"page"},{"location":"projectormontecarlo.html","page":"Projector Monte Carlo","title":"Projector Monte Carlo","text":"For the default option algorithm = FCIQMC(; shift_strategy, time_step_strategy) with a single replica (n_replicas = 1) and single spectral state, the fields :shift, :norm, :len will  be present as well as others depending on the style argument and the post_step_strategy.","category":"page"},{"location":"projectormontecarlo.html","page":"Projector Monte Carlo","title":"Projector Monte Carlo","text":"If multiple replicas or spectral states are requested, then the relevant field names in the  DataFrame will have a suffix identifying the respective replica simulation, e.g. the shifts will be reported as shift_1, shift_2, ... ","category":"page"},{"location":"projectormontecarlo.html","page":"Projector Monte Carlo","title":"Projector Monte Carlo","text":"Many tools for analysing the time series data obtained from a  ProjectorMonteCarloProblem are contained in the Module StatsTools.","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"EditURL = \"../../../scripts/G2-example.jl\"","category":"page"},{"location":"generated/G2-example.html#Example-3:-Calculating-observables","page":"Calculating observables","title":"Example 3: Calculating observables","text":"","category":"section"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"This is an example calculation of the two-body correlation function G_2.","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"A runnable script for this example is located here. Run it with julia G2-example.jl.","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"First, we load the reqired packages. Rimu for FCIQMC calculation, and DataFrames for maniplating the output.","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"using Rimu\nusing Random\nusing DataFrames","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"We use the same Hamiltonian as the first example, a Bose-Hubbard model with 6 particles in 6 sites, with strong interactions (we expect a Mott insulating state).","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"m = n = 6\ninitial_address = near_uniform(BoseFS{n,m})\nH = HubbardReal1D(initial_address; u = 6.0, t = 1.0)","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"HubbardReal1D(fs\"|1 1 1 1 1 1⟩\"; u=6.0, t=1.0)","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"Now, we define the operators for the observables we wish to calculate.","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"dvals = 0:m-1\nG2list = ((G2RealCorrelator(d) for d in dvals)...,)","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"(G2RealCorrelator(0), G2RealCorrelator(1), G2RealCorrelator(2), G2RealCorrelator(3), G2RealCorrelator(4), G2RealCorrelator(5))","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"This is a tuple of G2RealCorrelators, subtypes of AbstractHamiltonian. It calculates the density-density correlation function on a lattice","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"    hatG^(2)(d) = frac1M sum_i^M hatn_i (hatn_i+d - delta_0d)","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"with normalisation","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"    sum_d=0^M-1 langle hatG^(2)(d) rangle = fracN (N-1)M","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"Observables that are defined by expectation values are calculated using the \"replica trick\". Thereby several independent copies or \"replicas\" of the state vector are propagated simultaneously. The reason is to have two (or more) stochastically independent copies of the state vector available such that we can calculate bias-free overlaps. We enable this by defining a ReplicaStrategy. Each replica has its own state and FCIQMC is effectively performed independently on each one.  For calculating observables, we use AllOverlaps for the ReplicaStrategy. At each timestep, after the FCIQMC step is performed on, this strategy calculates the overlaps of every operator with the wavefunctions from each pair of replicas.","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"To obtain an unbiased result, at least two replicas should be used. One can also use more than two to improve the statistics. This is particularly helpful when the walker number is low.","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"n_replicas = 3\nreplica_strategy = AllOverlaps(n_replicas; operator=G2list)","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"AllOverlaps{3, 6, Tuple{G2RealCorrelator{0}, G2RealCorrelator{1}, G2RealCorrelator{2}, G2RealCorrelator{3}, G2RealCorrelator{4}, G2RealCorrelator{5}}, true}((G2RealCorrelator(0), G2RealCorrelator(1), G2RealCorrelator(2), G2RealCorrelator(3), G2RealCorrelator(4), G2RealCorrelator(5)))","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"Other FCIQMC parameters and strategies can be set in the same way as before.","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"steps_equilibrate = 1_000\nsteps_measure = 5_000\ntarget_walkers = 100;\ntime_step = 0.001\n","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"Now, we run FCIQMC. Note that passing an initial vector is optional - if we only pass the style, a vector with the appropriate style is created automatically.","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"problem = ProjectorMonteCarloProblem(H;\n    style=IsDynamicSemistochastic(),\n    time_step,\n    last_step = steps_equilibrate + steps_measure,\n    target_walkers,\n    replica_strategy,\n)\nresult = solve(problem)\ndf = DataFrame(result);","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"The output DataFrame has FCIQMC statistics for each replica (e.g. shift, norm),","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"println(filter(startswith(\"shift_\"), names(df)))","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"[\"shift_1\", \"shift_2\", \"shift_3\"]\n","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"as well as vector-vector overlaps (e.g. c1_dot_c2),","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"println(filter(contains(\"dot\"), names(df)))","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"[\"c1_dot_c2\", \"c1_dot_c3\", \"c2_dot_c3\"]\n","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"and operator overlaps (e.g. c1_Op1_c2) between the replicas.","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"println(filter(contains(\"Op\"), names(df)))","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"[\"c1_Op1_c2\", \"c1_Op2_c2\", \"c1_Op3_c2\", \"c1_Op4_c2\", \"c1_Op5_c2\", \"c1_Op6_c2\", \"c1_Op1_c3\", \"c1_Op2_c3\", \"c1_Op3_c3\", \"c1_Op4_c3\", \"c1_Op5_c3\", \"c1_Op6_c3\", \"c2_Op1_c3\", \"c2_Op2_c3\", \"c2_Op3_c3\", \"c2_Op4_c3\", \"c2_Op5_c3\", \"c2_Op6_c3\"]\n","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"The vector-vector and operator overlaps go into calculating the Rayleigh quotient for an observable","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"    langle hatG^(2)(d) rangle = fracsum_ab mathbfc_a^dagger cdot hatG^(2)(d) cdot mathbfc_bsum_ab mathbfc_a^dagger cdot mathbfc_b ","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"The sum over all replica pairs (a,b), especially in the denominator, helps to avoid errors from poor sampling if the number of walkers is too low.","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"We use the function rayleigh_replica_estimator to calculate the Rayleigh quotient using all replicas in df, returning a RatioBlockingResult. Using the keyword skip will ignore the initial equilibration steps.","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"Now, we can calculate the correlation function for each value of d.","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"println(\"Two-body correlator from $n_replicas replicas:\")\nfor d in dvals\n    r = rayleigh_replica_estimator(df; op_name = \"Op$(d+1)\", skip=steps_equilibrate)\n    println(\"   G2($d) = $(r.f) ± $(r.σ_f)\")\nend","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"Two-body correlator from 3 replicas:\n   G2(0) = 0.2129062763768427 ± 0.0015496628628160999\n   G2(1) = 0.9173023703241059 ± 0.0006560944260472923\n   G2(2) = 0.9817653788562708 ± 0.0005874295378756548\n   G2(3) = 0.9889582252624045 ± 0.0008561845166875112\n   G2(4) = 0.9817653788562708 ± 0.0005874295378756548\n   G2(5) = 0.9173023703241059 ± 0.0006560944260472923\n","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"As expected, the onsite correlation at d=0 is low since this is a Mott insulating state with unit filling fraction, and is close to 10 for all other values of the displacement d.","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"Since we ran multiple independent replicas, we also have multiple estimates of the shift energy.","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"println(\"Shift energy from $n_replicas replicas:\")\nfor i in 1:n_replicas\n    se = shift_estimator(df; shift=\"shift_$i\", skip=steps_equilibrate)\n    println(\"   Replica $i: $(se.mean) ± $(se.err)\")\nend\n","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"Shift energy from 3 replicas:\n   Replica 1: -4.035687213334236 ± 0.13420961507935464\n   Replica 2: -3.9684970393729673 ± 0.12880655055437953\n   Replica 3: -4.085252494681926 ± 0.1449402137844291\n","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"This page was generated using Literate.jl.","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"EditURL = \"../../../scripts/BHM-example.jl\"","category":"page"},{"location":"generated/BHM-example.html#Example-1:-1D-Bose-Hubbard-Model","page":"1D Bose-Hubbard Model","title":"Example 1: 1D Bose-Hubbard Model","text":"","category":"section"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"This is an example calculation finding the ground state of a 1D Bose-Hubbard chain with 6 particles in 6 lattice sites.","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"A runnable script for this example is located here. Run it with julia BHM-example.jl.","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"First, we load Rimu and Plots.","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"using Rimu\nusing Plots","category":"page"},{"location":"generated/BHM-example.html#Setting-up-the-model","page":"1D Bose-Hubbard Model","title":"Setting up the model","text":"","category":"section"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"We start by defining the physical problem. First, we generate an initial configuration which will be used as a starting point of our computation. In this example, we use a bosonic Fock state with 6 particles evenly distributed in 6 lattice sites.","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"initial_address = near_uniform(BoseFS{6,6})","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"BoseFS{6,6}(1, 1, 1, 1, 1, 1)","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"The Hamiltonian is constructed by initializing a struct with an initial address and model parameters. Here, we use the Bose Hubbard model in one-dimensional real space.","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"H = HubbardReal1D(initial_address; u = 6.0, t = 1.0)","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"HubbardReal1D(fs\"|1 1 1 1 1 1⟩\"; u=6.0, t=1.0)","category":"page"},{"location":"generated/BHM-example.html#Parameters-of-the-calculation","page":"1D Bose-Hubbard Model","title":"Parameters of the calculation","text":"","category":"section"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"Now, let's setup the Monte Carlo calculation. We need to decide the number of walkers to use in this Monte Carlo run, which is equivalent to the average one-norm of the coefficient vector. Higher values will result in better statistics, but require more memory and computing power.","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"target_walkers = 1_000;","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"FCIQMC takes a certain number of steps to equllibrate, after which the observables will fluctuate around a mean value. In this example, we will devote 1000 steps to equilibration and take an additional 2000 steps for measurement.","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"steps_equilibrate = 1_000;\nsteps_measure = 2_000;\nlast_step = steps_equilibrate + steps_measure","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"3000","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"Next, we pick a time step size. FCIQMC does not have a time step error, but the time step needs to be small enough, or the computation might diverge. If the time step is too small, however, the computation might take a long time to equilibrate. The appropriate time step size is problem-dependent and is best determined through experimentation.","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"time_step = 0.001;","category":"page"},{"location":"generated/BHM-example.html#Defining-an-observable","page":"1D Bose-Hubbard Model","title":"Defining an observable","text":"","category":"section"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"Now, let's set up an observable to measure. Here we will measure the projected energy. In additon to the shift, the projected energy is a second estimator for the energy. It usually produces better statistics than the shift.","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"We first need to define a projector. Here, we use the function default_starting_vector to generate a vector with only a single occupied configuration. We will use the same vector as the starting vector for the FCIQMC calculation.","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"initial_vector = default_starting_vector(initial_address; style=IsDynamicSemistochastic())","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"DVec{BoseFS{6, 6, BitString{11, 1, UInt16}},Float64} with 1 entry, style = IsDynamicSemistochastic{Float64,ThresholdCompression,DynamicSemistochastic}()\n  fs\"|1 1 1 1 1 1⟩\" => 10.0","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"The choice of the style argument already determines the FCIQMC algorithm to use. IsDynamicSemistochastic is usually the best choice as it reduces noise and improves the sign problem.","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"Observables that can be calculated by projection of the fluctuating quantum state onto a constant vector are passed into the ProjectorMonteCarloProblem with the post_step_strategy keyword argument.","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"post_step_strategy = ProjectedEnergy(H, initial_vector)","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"ProjectedEnergy{HubbardReal1D{Float64, BoseFS{6, 6, BitString{11, 1, UInt16}}, 6.0, 1.0}, Rimu.DictVectors.FrozenDVec{BoseFS{6, 6, BitString{11, 1, UInt16}}, Float64}, Rimu.DictVectors.FrozenDVec{BoseFS{6, 6, BitString{11, 1, UInt16}}, Float64}}(:vproj, :hproj, HubbardReal1D(fs\"|1 1 1 1 1 1⟩\"; u=6.0, t=1.0), Rimu.FrozenDVec([fs\"|1 1 1 1 1 1⟩\"=>10.0]), Rimu.FrozenDVec([fs\"|1 1 1 1 2 0⟩\"=>-14.1421, fs\"|0 2 1 1 1 1⟩\"=>-14.1421, fs\"|1 1 1 1 0 2⟩\"=>-14.1421, fs\"|1 2 0 1 1 1⟩\"=>-14.1421, fs\"|2 0 1 1 1 1⟩\"=>-14.1421, fs\"|1 1 1 2 0 1⟩\"=>-14.1421, fs\"|1 1 2 0 1 1⟩\"=>-14.1421, fs\"|1 1 0 2 1 1⟩\"=>-14.1421, fs\"|1 1 1 0 2 1⟩\"=>-14.1421, fs\"|1 0 2 1 1 1⟩\"=>-14.1421, fs\"|2 1 1 1 1 0⟩\"=>-14.1421, fs\"|0 1 1 1 1 2⟩\"=>-14.1421]))","category":"page"},{"location":"generated/BHM-example.html#Running-the-calculation","page":"1D Bose-Hubbard Model","title":"Running the calculation","text":"","category":"section"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"This is a two-step process: First we define a ProjectorMonteCarloProblem with all the parameters needed for the simulation","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"problem = ProjectorMonteCarloProblem(\n    H;\n    start_at = initial_vector,\n    last_step,\n    time_step,\n    target_walkers,\n    post_step_strategy\n);","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"To run the simulation we simply call solve on the problem","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"simulation = solve(problem);","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"The simulation object contains the results of the simulation as well as state vectors and strategies. We can extract the time series data for further analysis:","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"df = DataFrame(simulation);","category":"page"},{"location":"generated/BHM-example.html#Analysing-the-results","page":"1D Bose-Hubbard Model","title":"Analysing the results","text":"","category":"section"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"We can plot the norm of the coefficient vector as a function of the number of steps.","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"hline(\n    [target_walkers];\n    label=\"target_walkers\", xlabel=\"step\", ylabel=\"norm\",\n    color=2, linestyle=:dash, margin = 1Plots.cm\n)\nplot!(df.step, df.norm, label=\"norm\", color=1)","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"<?xml version=\"1.0\" encoding=\"utf-8\"?>\n<svg xmlns=\"http://www.w3.org/2000/svg\" xmlns:xlink=\"http://www.w3.org/1999/xlink\" width=\"600\" height=\"400\" viewBox=\"0 0 2400 1600\">\n<defs>\n  <clipPath id=\"clip950\">\n    <rect x=\"0\" y=\"0\" width=\"2400\" height=\"1600\"/>\n  </clipPath>\n</defs>\n<path clip-path=\"url(#clip950)\" d=\"M0 1600 L2400 1600 L2400 0 L0 0  Z\" fill=\"#ffffff\" fill-rule=\"evenodd\" fill-opacity=\"1\"/>\n<defs>\n  <clipPath id=\"clip951\">\n    <rect x=\"480\" y=\"0\" width=\"1681\" height=\"1600\"/>\n  </clipPath>\n</defs>\n<path clip-path=\"url(#clip950)\" d=\"M404.284 1281.45 L2211.02 1281.45 L2211.02 188.976 L404.284 188.976  Z\" fill=\"#ffffff\" fill-rule=\"evenodd\" fill-opacity=\"1\"/>\n<defs>\n  <clipPath id=\"clip952\">\n    <rect x=\"404\" y=\"188\" width=\"1808\" height=\"1093\"/>\n  </clipPath>\n</defs>\n<polyline clip-path=\"url(#clip952)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:2; stroke-opacity:0.1; fill:none\" points=\"454.849,1281.45 454.849,188.976 \"/>\n<polyline clip-path=\"url(#clip952)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:2; stroke-opacity:0.1; fill:none\" points=\"1023.2,1281.45 1023.2,188.976 \"/>\n<polyline clip-path=\"url(#clip952)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:2; stroke-opacity:0.1; fill:none\" points=\"1591.54,1281.45 1591.54,188.976 \"/>\n<polyline clip-path=\"url(#clip952)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:2; stroke-opacity:0.1; fill:none\" points=\"2159.89,1281.45 2159.89,188.976 \"/>\n<polyline clip-path=\"url(#clip952)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:2; stroke-opacity:0.1; fill:none\" points=\"404.284,1260.82 2211.02,1260.82 \"/>\n<polyline clip-path=\"url(#clip952)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:2; stroke-opacity:0.1; fill:none\" points=\"404.284,1003.43 2211.02,1003.43 \"/>\n<polyline clip-path=\"url(#clip952)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:2; stroke-opacity:0.1; fill:none\" points=\"404.284,746.03 2211.02,746.03 \"/>\n<polyline clip-path=\"url(#clip952)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:2; stroke-opacity:0.1; fill:none\" points=\"404.284,488.632 2211.02,488.632 \"/>\n<polyline clip-path=\"url(#clip952)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:2; stroke-opacity:0.1; fill:none\" points=\"404.284,231.235 2211.02,231.235 \"/>\n<polyline clip-path=\"url(#clip950)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"404.284,1281.45 2211.02,1281.45 \"/>\n<polyline clip-path=\"url(#clip950)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"454.849,1281.45 454.849,1262.55 \"/>\n<polyline clip-path=\"url(#clip950)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"1023.2,1281.45 1023.2,1262.55 \"/>\n<polyline clip-path=\"url(#clip950)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"1591.54,1281.45 1591.54,1262.55 \"/>\n<polyline clip-path=\"url(#clip950)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"2159.89,1281.45 2159.89,1262.55 \"/>\n<path clip-path=\"url(#clip950)\" d=\"M454.849 1312.37 Q451.238 1312.37 449.41 1315.93 Q447.604 1319.47 447.604 1326.6 Q447.604 1333.71 449.41 1337.27 Q451.238 1340.82 454.849 1340.82 Q458.484 1340.82 460.289 1337.27 Q462.118 1333.71 462.118 1326.6 Q462.118 1319.47 460.289 1315.93 Q458.484 1312.37 454.849 1312.37 M454.849 1308.66 Q460.659 1308.66 463.715 1313.27 Q466.794 1317.85 466.794 1326.6 Q466.794 1335.33 463.715 1339.94 Q460.659 1344.52 454.849 1344.52 Q449.039 1344.52 445.96 1339.94 Q442.905 1335.33 442.905 1326.6 Q442.905 1317.85 445.96 1313.27 Q449.039 1308.66 454.849 1308.66 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip950)\" d=\"M967.722 1339.91 L975.361 1339.91 L975.361 1313.55 L967.05 1315.21 L967.05 1310.95 L975.314 1309.29 L979.99 1309.29 L979.99 1339.91 L987.629 1339.91 L987.629 1343.85 L967.722 1343.85 L967.722 1339.91 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip950)\" d=\"M1007.07 1312.37 Q1003.46 1312.37 1001.63 1315.93 Q999.828 1319.47 999.828 1326.6 Q999.828 1333.71 1001.63 1337.27 Q1003.46 1340.82 1007.07 1340.82 Q1010.71 1340.82 1012.51 1337.27 Q1014.34 1333.71 1014.34 1326.6 Q1014.34 1319.47 1012.51 1315.93 Q1010.71 1312.37 1007.07 1312.37 M1007.07 1308.66 Q1012.88 1308.66 1015.94 1313.27 Q1019.02 1317.85 1019.02 1326.6 Q1019.02 1335.33 1015.94 1339.94 Q1012.88 1344.52 1007.07 1344.52 Q1001.26 1344.52 998.185 1339.94 Q995.129 1335.33 995.129 1326.6 Q995.129 1317.85 998.185 1313.27 Q1001.26 1308.66 1007.07 1308.66 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip950)\" d=\"M1037.24 1312.37 Q1033.62 1312.37 1031.8 1315.93 Q1029.99 1319.47 1029.99 1326.6 Q1029.99 1333.71 1031.8 1337.27 Q1033.62 1340.82 1037.24 1340.82 Q1040.87 1340.82 1042.68 1337.27 Q1044.5 1333.71 1044.5 1326.6 Q1044.5 1319.47 1042.68 1315.93 Q1040.87 1312.37 1037.24 1312.37 M1037.24 1308.66 Q1043.05 1308.66 1046.1 1313.27 Q1049.18 1317.85 1049.18 1326.6 Q1049.18 1335.33 1046.1 1339.94 Q1043.05 1344.52 1037.24 1344.52 Q1031.43 1344.52 1028.35 1339.94 Q1025.29 1335.33 1025.29 1326.6 Q1025.29 1317.85 1028.35 1313.27 Q1031.43 1308.66 1037.24 1308.66 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip950)\" d=\"M1067.4 1312.37 Q1063.79 1312.37 1061.96 1315.93 Q1060.15 1319.47 1060.15 1326.6 Q1060.15 1333.71 1061.96 1337.27 Q1063.79 1340.82 1067.4 1340.82 Q1071.03 1340.82 1072.84 1337.27 Q1074.67 1333.71 1074.67 1326.6 Q1074.67 1319.47 1072.84 1315.93 Q1071.03 1312.37 1067.4 1312.37 M1067.4 1308.66 Q1073.21 1308.66 1076.26 1313.27 Q1079.34 1317.85 1079.34 1326.6 Q1079.34 1335.33 1076.26 1339.94 Q1073.21 1344.52 1067.4 1344.52 Q1061.59 1344.52 1058.51 1339.94 Q1055.45 1335.33 1055.45 1326.6 Q1055.45 1317.85 1058.51 1313.27 Q1061.59 1308.66 1067.4 1308.66 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip950)\" d=\"M1540.15 1339.91 L1556.47 1339.91 L1556.47 1343.85 L1534.53 1343.85 L1534.53 1339.91 Q1537.19 1337.16 1541.77 1332.53 Q1546.38 1327.88 1547.56 1326.53 Q1549.81 1324.01 1550.69 1322.27 Q1551.59 1320.51 1551.59 1318.82 Q1551.59 1316.07 1549.64 1314.33 Q1547.72 1312.6 1544.62 1312.6 Q1542.42 1312.6 1539.97 1313.36 Q1537.54 1314.13 1534.76 1315.68 L1534.76 1310.95 Q1537.58 1309.82 1540.04 1309.24 Q1542.49 1308.66 1544.53 1308.66 Q1549.9 1308.66 1553.09 1311.35 Q1556.29 1314.03 1556.29 1318.52 Q1556.29 1320.65 1555.48 1322.57 Q1554.69 1324.47 1552.58 1327.07 Q1552.01 1327.74 1548.9 1330.95 Q1545.8 1334.15 1540.15 1339.91 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip950)\" d=\"M1576.29 1312.37 Q1572.68 1312.37 1570.85 1315.93 Q1569.04 1319.47 1569.04 1326.6 Q1569.04 1333.71 1570.85 1337.27 Q1572.68 1340.82 1576.29 1340.82 Q1579.92 1340.82 1581.73 1337.27 Q1583.56 1333.71 1583.56 1326.6 Q1583.56 1319.47 1581.73 1315.93 Q1579.92 1312.37 1576.29 1312.37 M1576.29 1308.66 Q1582.1 1308.66 1585.15 1313.27 Q1588.23 1317.85 1588.23 1326.6 Q1588.23 1335.33 1585.15 1339.94 Q1582.1 1344.52 1576.29 1344.52 Q1570.48 1344.52 1567.4 1339.94 Q1564.34 1335.33 1564.34 1326.6 Q1564.34 1317.85 1567.4 1313.27 Q1570.48 1308.66 1576.29 1308.66 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip950)\" d=\"M1606.45 1312.37 Q1602.84 1312.37 1601.01 1315.93 Q1599.2 1319.47 1599.2 1326.6 Q1599.2 1333.71 1601.01 1337.27 Q1602.84 1340.82 1606.45 1340.82 Q1610.08 1340.82 1611.89 1337.27 Q1613.72 1333.71 1613.72 1326.6 Q1613.72 1319.47 1611.89 1315.93 Q1610.08 1312.37 1606.45 1312.37 M1606.45 1308.66 Q1612.26 1308.66 1615.32 1313.27 Q1618.39 1317.85 1618.39 1326.6 Q1618.39 1335.33 1615.32 1339.94 Q1612.26 1344.52 1606.45 1344.52 Q1600.64 1344.52 1597.56 1339.94 Q1594.51 1335.33 1594.51 1326.6 Q1594.51 1317.85 1597.56 1313.27 Q1600.64 1308.66 1606.45 1308.66 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip950)\" d=\"M1636.61 1312.37 Q1633 1312.37 1631.17 1315.93 Q1629.37 1319.47 1629.37 1326.6 Q1629.37 1333.71 1631.17 1337.27 Q1633 1340.82 1636.61 1340.82 Q1640.25 1340.82 1642.05 1337.27 Q1643.88 1333.71 1643.88 1326.6 Q1643.88 1319.47 1642.05 1315.93 Q1640.25 1312.37 1636.61 1312.37 M1636.61 1308.66 Q1642.42 1308.66 1645.48 1313.27 Q1648.56 1317.85 1648.56 1326.6 Q1648.56 1335.33 1645.48 1339.94 Q1642.42 1344.52 1636.61 1344.52 Q1630.8 1344.52 1627.72 1339.94 Q1624.67 1335.33 1624.67 1326.6 Q1624.67 1317.85 1627.72 1313.27 Q1630.8 1308.66 1636.61 1308.66 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip950)\" d=\"M2118.57 1325.21 Q2121.93 1325.93 2123.8 1328.2 Q2125.7 1330.47 2125.7 1333.8 Q2125.7 1338.92 2122.18 1341.72 Q2118.66 1344.52 2112.18 1344.52 Q2110.01 1344.52 2107.69 1344.08 Q2105.4 1343.66 2102.95 1342.81 L2102.95 1338.29 Q2104.89 1339.43 2107.2 1340 Q2109.52 1340.58 2112.04 1340.58 Q2116.44 1340.58 2118.73 1338.85 Q2121.05 1337.11 2121.05 1333.8 Q2121.05 1330.75 2118.89 1329.03 Q2116.76 1327.3 2112.95 1327.3 L2108.92 1327.3 L2108.92 1323.45 L2113.13 1323.45 Q2116.58 1323.45 2118.41 1322.09 Q2120.24 1320.7 2120.24 1318.11 Q2120.24 1315.44 2118.34 1314.03 Q2116.46 1312.6 2112.95 1312.6 Q2111.02 1312.6 2108.82 1313.01 Q2106.63 1313.43 2103.99 1314.31 L2103.99 1310.14 Q2106.65 1309.4 2108.96 1309.03 Q2111.3 1308.66 2113.36 1308.66 Q2118.69 1308.66 2121.79 1311.09 Q2124.89 1313.5 2124.89 1317.62 Q2124.89 1320.49 2123.25 1322.48 Q2121.6 1324.45 2118.57 1325.21 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip950)\" d=\"M2144.57 1312.37 Q2140.95 1312.37 2139.13 1315.93 Q2137.32 1319.47 2137.32 1326.6 Q2137.32 1333.71 2139.13 1337.27 Q2140.95 1340.82 2144.57 1340.82 Q2148.2 1340.82 2150.01 1337.27 Q2151.83 1333.71 2151.83 1326.6 Q2151.83 1319.47 2150.01 1315.93 Q2148.2 1312.37 2144.57 1312.37 M2144.57 1308.66 Q2150.38 1308.66 2153.43 1313.27 Q2156.51 1317.85 2156.51 1326.6 Q2156.51 1335.33 2153.43 1339.94 Q2150.38 1344.52 2144.57 1344.52 Q2138.76 1344.52 2135.68 1339.94 Q2132.62 1335.33 2132.62 1326.6 Q2132.62 1317.85 2135.68 1313.27 Q2138.76 1308.66 2144.57 1308.66 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip950)\" d=\"M2174.73 1312.37 Q2171.12 1312.37 2169.29 1315.93 Q2167.48 1319.47 2167.48 1326.6 Q2167.48 1333.71 2169.29 1337.27 Q2171.12 1340.82 2174.73 1340.82 Q2178.36 1340.82 2180.17 1337.27 Q2182 1333.71 2182 1326.6 Q2182 1319.47 2180.17 1315.93 Q2178.36 1312.37 2174.73 1312.37 M2174.73 1308.66 Q2180.54 1308.66 2183.59 1313.27 Q2186.67 1317.85 2186.67 1326.6 Q2186.67 1335.33 2183.59 1339.94 Q2180.54 1344.52 2174.73 1344.52 Q2168.92 1344.52 2165.84 1339.94 Q2162.78 1335.33 2162.78 1326.6 Q2162.78 1317.85 2165.84 1313.27 Q2168.92 1308.66 2174.73 1308.66 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip950)\" d=\"M2204.89 1312.37 Q2201.28 1312.37 2199.45 1315.93 Q2197.64 1319.47 2197.64 1326.6 Q2197.64 1333.71 2199.45 1337.27 Q2201.28 1340.82 2204.89 1340.82 Q2208.52 1340.82 2210.33 1337.27 Q2212.16 1333.71 2212.16 1326.6 Q2212.16 1319.47 2210.33 1315.93 Q2208.52 1312.37 2204.89 1312.37 M2204.89 1308.66 Q2210.7 1308.66 2213.75 1313.27 Q2216.83 1317.85 2216.83 1326.6 Q2216.83 1335.33 2213.75 1339.94 Q2210.7 1344.52 2204.89 1344.52 Q2199.08 1344.52 2196 1339.94 Q2192.94 1335.33 2192.94 1326.6 Q2192.94 1317.85 2196 1313.27 Q2199.08 1308.66 2204.89 1308.66 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip950)\" d=\"M1266.04 1391.71 L1266.04 1397.25 Q1263.56 1395.98 1260.88 1395.34 Q1258.21 1394.71 1255.34 1394.71 Q1250.98 1394.71 1248.79 1396.04 Q1246.62 1397.38 1246.62 1400.05 Q1246.62 1402.09 1248.18 1403.27 Q1249.74 1404.41 1254.45 1405.46 L1256.46 1405.91 Q1262.7 1407.25 1265.31 1409.7 Q1267.95 1412.12 1267.95 1416.48 Q1267.95 1421.44 1264 1424.34 Q1260.09 1427.23 1253.21 1427.23 Q1250.35 1427.23 1247.23 1426.66 Q1244.14 1426.12 1240.7 1425.01 L1240.7 1418.96 Q1243.95 1420.65 1247.1 1421.51 Q1250.25 1422.33 1253.34 1422.33 Q1257.48 1422.33 1259.7 1420.93 Q1261.93 1419.5 1261.93 1416.92 Q1261.93 1414.54 1260.31 1413.26 Q1258.72 1411.99 1253.27 1410.81 L1251.24 1410.33 Q1245.79 1409.19 1243.38 1406.83 Q1240.96 1404.45 1240.96 1400.31 Q1240.96 1395.28 1244.52 1392.54 Q1248.09 1389.8 1254.64 1389.8 Q1257.89 1389.8 1260.75 1390.28 Q1263.62 1390.76 1266.04 1391.71 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip950)\" d=\"M1283.07 1380.54 L1283.07 1390.66 L1295.13 1390.66 L1295.13 1395.22 L1283.07 1395.22 L1283.07 1414.57 Q1283.07 1418.93 1284.24 1420.17 Q1285.45 1421.41 1289.11 1421.41 L1295.13 1421.41 L1295.13 1426.31 L1289.11 1426.31 Q1282.33 1426.31 1279.76 1423.8 Q1277.18 1421.25 1277.18 1414.57 L1277.18 1395.22 L1272.88 1395.22 L1272.88 1390.66 L1277.18 1390.66 L1277.18 1380.54 L1283.07 1380.54 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip950)\" d=\"M1333.32 1407.02 L1333.32 1409.89 L1306.4 1409.89 Q1306.78 1415.94 1310.02 1419.12 Q1313.3 1422.27 1319.13 1422.27 Q1322.5 1422.27 1325.65 1421.44 Q1328.84 1420.61 1331.95 1418.96 L1331.95 1424.5 Q1328.8 1425.83 1325.49 1426.53 Q1322.18 1427.23 1318.78 1427.23 Q1310.25 1427.23 1305.25 1422.27 Q1300.29 1417.3 1300.29 1408.84 Q1300.29 1400.08 1305 1394.96 Q1309.74 1389.8 1317.76 1389.8 Q1324.95 1389.8 1329.12 1394.45 Q1333.32 1399.07 1333.32 1407.02 M1327.47 1405.3 Q1327.4 1400.5 1324.76 1397.63 Q1322.15 1394.77 1317.82 1394.77 Q1312.92 1394.77 1309.96 1397.54 Q1307.03 1400.31 1306.59 1405.34 L1327.47 1405.3 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip950)\" d=\"M1348.6 1420.96 L1348.6 1439.87 L1342.71 1439.87 L1342.71 1390.66 L1348.6 1390.66 L1348.6 1396.07 Q1350.45 1392.89 1353.25 1391.36 Q1356.08 1389.8 1360 1389.8 Q1366.49 1389.8 1370.53 1394.96 Q1374.6 1400.12 1374.6 1408.52 Q1374.6 1416.92 1370.53 1422.08 Q1366.49 1427.23 1360 1427.23 Q1356.08 1427.23 1353.25 1425.71 Q1350.45 1424.15 1348.6 1420.96 M1368.53 1408.52 Q1368.53 1402.06 1365.85 1398.4 Q1363.21 1394.71 1358.56 1394.71 Q1353.92 1394.71 1351.24 1398.4 Q1348.6 1402.06 1348.6 1408.52 Q1348.6 1414.98 1351.24 1418.67 Q1353.92 1422.33 1358.56 1422.33 Q1363.21 1422.33 1365.85 1418.67 Q1368.53 1414.98 1368.53 1408.52 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><polyline clip-path=\"url(#clip950)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"404.284,1281.45 404.284,188.976 \"/>\n<polyline clip-path=\"url(#clip950)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"404.284,1260.82 423.181,1260.82 \"/>\n<polyline clip-path=\"url(#clip950)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"404.284,1003.43 423.181,1003.43 \"/>\n<polyline clip-path=\"url(#clip950)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"404.284,746.03 423.181,746.03 \"/>\n<polyline clip-path=\"url(#clip950)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"404.284,488.632 423.181,488.632 \"/>\n<polyline clip-path=\"url(#clip950)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"404.284,231.235 423.181,231.235 \"/>\n<path clip-path=\"url(#clip950)\" d=\"M356.339 1246.62 Q352.728 1246.62 350.899 1250.19 Q349.094 1253.73 349.094 1260.86 Q349.094 1267.97 350.899 1271.53 Q352.728 1275.07 356.339 1275.07 Q359.973 1275.07 361.779 1271.53 Q363.608 1267.97 363.608 1260.86 Q363.608 1253.73 361.779 1250.19 Q359.973 1246.62 356.339 1246.62 M356.339 1242.92 Q362.149 1242.92 365.205 1247.53 Q368.284 1252.11 368.284 1260.86 Q368.284 1269.59 365.205 1274.19 Q362.149 1278.78 356.339 1278.78 Q350.529 1278.78 347.45 1274.19 Q344.395 1269.59 344.395 1260.86 Q344.395 1252.11 347.45 1247.53 Q350.529 1242.92 356.339 1242.92 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip950)\" d=\"M290.043 1016.77 L306.363 1016.77 L306.363 1020.71 L284.418 1020.71 L284.418 1016.77 Q287.08 1014.02 291.664 1009.39 Q296.27 1004.73 297.451 1003.39 Q299.696 1000.87 300.576 999.133 Q301.478 997.374 301.478 995.684 Q301.478 992.929 299.534 991.193 Q297.613 989.457 294.511 989.457 Q292.312 989.457 289.858 990.221 Q287.427 990.985 284.65 992.536 L284.65 987.814 Q287.474 986.679 289.927 986.101 Q292.381 985.522 294.418 985.522 Q299.789 985.522 302.983 988.207 Q306.177 990.892 306.177 995.383 Q306.177 997.513 305.367 999.434 Q304.58 1001.33 302.474 1003.92 Q301.895 1004.6 298.793 1007.81 Q295.691 1011.01 290.043 1016.77 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip950)\" d=\"M316.224 986.147 L334.58 986.147 L334.58 990.082 L320.506 990.082 L320.506 998.554 Q321.524 998.207 322.543 998.045 Q323.562 997.86 324.58 997.86 Q330.367 997.86 333.747 1001.03 Q337.126 1004.2 337.126 1009.62 Q337.126 1015.2 333.654 1018.3 Q330.182 1021.38 323.862 1021.38 Q321.687 1021.38 319.418 1021.01 Q317.173 1020.64 314.765 1019.9 L314.765 1015.2 Q316.849 1016.33 319.071 1016.89 Q321.293 1017.44 323.77 1017.44 Q327.774 1017.44 330.112 1015.34 Q332.45 1013.23 332.45 1009.62 Q332.45 1006.01 330.112 1003.9 Q327.774 1001.8 323.77 1001.8 Q321.895 1001.8 320.02 1002.21 Q318.168 1002.63 316.224 1003.51 L316.224 986.147 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip950)\" d=\"M356.339 989.226 Q352.728 989.226 350.899 992.791 Q349.094 996.332 349.094 1003.46 Q349.094 1010.57 350.899 1014.13 Q352.728 1017.67 356.339 1017.67 Q359.973 1017.67 361.779 1014.13 Q363.608 1010.57 363.608 1003.46 Q363.608 996.332 361.779 992.791 Q359.973 989.226 356.339 989.226 M356.339 985.522 Q362.149 985.522 365.205 990.129 Q368.284 994.712 368.284 1003.46 Q368.284 1012.19 365.205 1016.8 Q362.149 1021.38 356.339 1021.38 Q350.529 1021.38 347.45 1016.8 Q344.395 1012.19 344.395 1003.46 Q344.395 994.712 347.45 990.129 Q350.529 985.522 356.339 985.522 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip950)\" d=\"M286.062 728.75 L304.418 728.75 L304.418 732.685 L290.344 732.685 L290.344 741.157 Q291.363 740.81 292.381 740.648 Q293.4 740.463 294.418 740.463 Q300.205 740.463 303.585 743.634 Q306.964 746.805 306.964 752.222 Q306.964 757.8 303.492 760.902 Q300.02 763.981 293.701 763.981 Q291.525 763.981 289.256 763.611 Q287.011 763.24 284.603 762.499 L284.603 757.8 Q286.687 758.935 288.909 759.49 Q291.131 760.046 293.608 760.046 Q297.613 760.046 299.951 757.939 Q302.288 755.833 302.288 752.222 Q302.288 748.611 299.951 746.504 Q297.613 744.398 293.608 744.398 Q291.733 744.398 289.858 744.814 Q288.006 745.231 286.062 746.111 L286.062 728.75 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip950)\" d=\"M326.177 731.828 Q322.566 731.828 320.737 735.393 Q318.932 738.935 318.932 746.064 Q318.932 753.171 320.737 756.736 Q322.566 760.277 326.177 760.277 Q329.811 760.277 331.617 756.736 Q333.446 753.171 333.446 746.064 Q333.446 738.935 331.617 735.393 Q329.811 731.828 326.177 731.828 M326.177 728.125 Q331.987 728.125 335.043 732.731 Q338.122 737.314 338.122 746.064 Q338.122 754.791 335.043 759.398 Q331.987 763.981 326.177 763.981 Q320.367 763.981 317.288 759.398 Q314.233 754.791 314.233 746.064 Q314.233 737.314 317.288 732.731 Q320.367 728.125 326.177 728.125 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip950)\" d=\"M356.339 731.828 Q352.728 731.828 350.899 735.393 Q349.094 738.935 349.094 746.064 Q349.094 753.171 350.899 756.736 Q352.728 760.277 356.339 760.277 Q359.973 760.277 361.779 756.736 Q363.608 753.171 363.608 746.064 Q363.608 738.935 361.779 735.393 Q359.973 731.828 356.339 731.828 M356.339 728.125 Q362.149 728.125 365.205 732.731 Q368.284 737.314 368.284 746.064 Q368.284 754.791 365.205 759.398 Q362.149 763.981 356.339 763.981 Q350.529 763.981 347.45 759.398 Q344.395 754.791 344.395 746.064 Q344.395 737.314 347.45 732.731 Q350.529 728.125 356.339 728.125 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip950)\" d=\"M284.835 471.352 L307.057 471.352 L307.057 473.343 L294.511 505.912 L289.627 505.912 L301.432 475.287 L284.835 475.287 L284.835 471.352 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip950)\" d=\"M316.224 471.352 L334.58 471.352 L334.58 475.287 L320.506 475.287 L320.506 483.76 Q321.524 483.412 322.543 483.25 Q323.562 483.065 324.58 483.065 Q330.367 483.065 333.747 486.236 Q337.126 489.408 337.126 494.824 Q337.126 500.403 333.654 503.505 Q330.182 506.584 323.862 506.584 Q321.687 506.584 319.418 506.213 Q317.173 505.843 314.765 505.102 L314.765 500.403 Q316.849 501.537 319.071 502.093 Q321.293 502.648 323.77 502.648 Q327.774 502.648 330.112 500.542 Q332.45 498.435 332.45 494.824 Q332.45 491.213 330.112 489.107 Q327.774 487 323.77 487 Q321.895 487 320.02 487.417 Q318.168 487.834 316.224 488.713 L316.224 471.352 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip950)\" d=\"M356.339 474.431 Q352.728 474.431 350.899 477.996 Q349.094 481.537 349.094 488.667 Q349.094 495.773 350.899 499.338 Q352.728 502.88 356.339 502.88 Q359.973 502.88 361.779 499.338 Q363.608 495.773 363.608 488.667 Q363.608 481.537 361.779 477.996 Q359.973 474.431 356.339 474.431 M356.339 470.727 Q362.149 470.727 365.205 475.334 Q368.284 479.917 368.284 488.667 Q368.284 497.394 365.205 502 Q362.149 506.584 356.339 506.584 Q350.529 506.584 347.45 502 Q344.395 497.394 344.395 488.667 Q344.395 479.917 347.45 475.334 Q350.529 470.727 356.339 470.727 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip950)\" d=\"M256.664 244.58 L264.303 244.58 L264.303 218.214 L255.992 219.881 L255.992 215.622 L264.256 213.955 L268.932 213.955 L268.932 244.58 L276.571 244.58 L276.571 248.515 L256.664 248.515 L256.664 244.58 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip950)\" d=\"M296.015 217.034 Q292.404 217.034 290.576 220.598 Q288.77 224.14 288.77 231.27 Q288.77 238.376 290.576 241.941 Q292.404 245.482 296.015 245.482 Q299.65 245.482 301.455 241.941 Q303.284 238.376 303.284 231.27 Q303.284 224.14 301.455 220.598 Q299.65 217.034 296.015 217.034 M296.015 213.33 Q301.826 213.33 304.881 217.936 Q307.96 222.52 307.96 231.27 Q307.96 239.996 304.881 244.603 Q301.826 249.186 296.015 249.186 Q290.205 249.186 287.127 244.603 Q284.071 239.996 284.071 231.27 Q284.071 222.52 287.127 217.936 Q290.205 213.33 296.015 213.33 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip950)\" d=\"M326.177 217.034 Q322.566 217.034 320.737 220.598 Q318.932 224.14 318.932 231.27 Q318.932 238.376 320.737 241.941 Q322.566 245.482 326.177 245.482 Q329.811 245.482 331.617 241.941 Q333.446 238.376 333.446 231.27 Q333.446 224.14 331.617 220.598 Q329.811 217.034 326.177 217.034 M326.177 213.33 Q331.987 213.33 335.043 217.936 Q338.122 222.52 338.122 231.27 Q338.122 239.996 335.043 244.603 Q331.987 249.186 326.177 249.186 Q320.367 249.186 317.288 244.603 Q314.233 239.996 314.233 231.27 Q314.233 222.52 317.288 217.936 Q320.367 213.33 326.177 213.33 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip950)\" d=\"M356.339 217.034 Q352.728 217.034 350.899 220.598 Q349.094 224.14 349.094 231.27 Q349.094 238.376 350.899 241.941 Q352.728 245.482 356.339 245.482 Q359.973 245.482 361.779 241.941 Q363.608 238.376 363.608 231.27 Q363.608 224.14 361.779 220.598 Q359.973 217.034 356.339 217.034 M356.339 213.33 Q362.149 213.33 365.205 217.936 Q368.284 222.52 368.284 231.27 Q368.284 239.996 365.205 244.603 Q362.149 249.186 356.339 249.186 Q350.529 249.186 347.45 244.603 Q344.395 239.996 344.395 231.27 Q344.395 222.52 347.45 217.936 Q350.529 213.33 356.339 213.33 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip950)\" d=\"M184.22 784.801 L205.736 784.801 L205.736 790.657 L184.411 790.657 Q179.351 790.657 176.836 792.631 Q174.322 794.604 174.322 798.551 Q174.322 803.293 177.345 806.03 Q180.369 808.768 185.589 808.768 L205.736 808.768 L205.736 814.656 L170.088 814.656 L170.088 808.768 L175.627 808.768 Q172.412 806.667 170.821 803.834 Q169.229 800.97 169.229 797.246 Q169.229 791.103 173.049 787.952 Q176.836 784.801 184.22 784.801 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip950)\" d=\"M174.194 759.306 Q174.194 764.017 177.886 766.754 Q181.547 769.491 187.944 769.491 Q194.342 769.491 198.034 766.786 Q201.694 764.049 201.694 759.306 Q201.694 754.627 198.002 751.89 Q194.31 749.153 187.944 749.153 Q181.61 749.153 177.918 751.89 Q174.194 754.627 174.194 759.306 M169.229 759.306 Q169.229 751.667 174.194 747.307 Q179.16 742.946 187.944 742.946 Q196.697 742.946 201.694 747.307 Q206.659 751.667 206.659 759.306 Q206.659 766.977 201.694 771.337 Q196.697 775.666 187.944 775.666 Q179.16 775.666 174.194 771.337 Q169.229 766.977 169.229 759.306 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip950)\" d=\"M175.563 712.582 Q174.99 713.569 174.735 714.746 Q174.449 715.892 174.449 717.293 Q174.449 722.258 177.696 724.931 Q180.91 727.573 186.958 727.573 L205.736 727.573 L205.736 733.461 L170.088 733.461 L170.088 727.573 L175.627 727.573 Q172.38 725.727 170.821 722.767 Q169.229 719.807 169.229 715.574 Q169.229 714.969 169.325 714.237 Q169.388 713.505 169.547 712.614 L175.563 712.582 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip950)\" d=\"M176.932 679.83 Q172.985 677.634 171.107 674.579 Q169.229 671.523 169.229 667.385 Q169.229 661.815 173.144 658.792 Q177.027 655.768 184.22 655.768 L205.736 655.768 L205.736 661.656 L184.411 661.656 Q179.287 661.656 176.804 663.47 Q174.322 665.285 174.322 669.009 Q174.322 673.56 177.345 676.202 Q180.369 678.844 185.589 678.844 L205.736 678.844 L205.736 684.732 L184.411 684.732 Q179.255 684.732 176.804 686.546 Q174.322 688.36 174.322 692.148 Q174.322 696.636 177.377 699.278 Q180.401 701.919 185.589 701.919 L205.736 701.919 L205.736 707.808 L170.088 707.808 L170.088 701.919 L175.627 701.919 Q172.348 699.914 170.789 697.113 Q169.229 694.312 169.229 690.461 Q169.229 686.578 171.202 683.873 Q173.176 681.135 176.932 679.83 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><polyline clip-path=\"url(#clip952)\" style=\"stroke:#e26f46; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" stroke-dasharray=\"16, 10\" points=\"-1402.46,231.235 4017.76,231.235 \"/>\n<polyline clip-path=\"url(#clip952)\" style=\"stroke:#009af9; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"455.418,1250.53 455.986,1250.45 456.554,1250.31 457.123,1248.03 457.691,1247.88 458.259,1247.64 458.828,1247.33 459.396,1246.92 459.964,1246.46 460.533,1245.89 461.101,1245.26 461.669,1244.55 462.238,1243.76 462.806,1242.86 463.375,1241.9 463.943,1240.84 464.511,1238.66 465.08,1237.44 465.648,1236.08 466.216,1234.64 466.785,1233.05 467.353,1231.35 467.921,1228.51 468.49,1225.52 469.058,1223.43 469.626,1221.2 470.195,1218.8 470.763,1215.21 471.331,1212.44 471.9,1209.49 472.468,1204.32 473.036,1200.98 473.605,1197.47 474.173,1193.76 474.741,1188.79 475.31,1184.67 475.878,1180.37 476.446,1174.79 477.015,1168.97 477.583,1164 478.152,1158.71 478.72,1153.3 479.288,1147.59 479.857,1141.67 480.425,1135.49 480.993,1129.11 481.562,1122.5 482.13,1112.57 482.698,1103.31 483.267,1095.86 483.835,1086.1 484.403,1077.06 484.972,1067.9 485.54,1056.48 486.108,1047.13 486.677,1037.61 487.245,1027.92 487.813,1017.1 488.382,1007.23 488.95,995.256 489.518,986.156 490.087,974.812 490.655,964.489 491.224,953.167 491.792,943.735 492.36,934.274 492.929,922.686 493.497,910.921 494.065,899.164 494.634,888.529 495.202,876.934 495.77,866.327 496.339,855.743 496.907,843.102 497.475,833.802 498.044,822.298 498.612,810.823 499.18,800.468 499.749,788.067 500.317,776.865 500.885,766.946 501.454,756.961 502.022,746.991 502.59,737.023 503.159,726.215 503.727,716.532 504.295,705.755 504.864,697.314 505.432,688.787 506.001,679.137 506.569,667.582 507.137,658.32 507.706,649.14 508.274,637.947 508.842,629.254 509.411,620.528 509.979,611.948 510.547,603.472 511.116,595.17 511.684,586.958 512.252,577.809 512.821,569.972 513.389,563.238 513.957,556.598 514.526,547.948 515.094,540.326 515.662,533.076 516.231,525.875 516.799,518.875 517.367,510.995 517.936,503.491 518.504,493.808 519.072,487.61 519.641,480.594 520.209,476.792 520.778,471.937 521.346,466.123 521.914,460.109 522.483,454.417 523.051,447.645 523.619,442.238 524.188,436.367 524.756,432.434 525.324,428.442 525.893,423.516 526.461,417.644 527.029,412.917 527.598,407.272 528.166,403.914 528.734,398.581 529.303,393.373 529.871,389.194 530.439,386.291 531.008,383.181 531.576,379.058 532.144,378.289 532.713,374.535 533.281,368.629 533.85,363.915 534.418,356.34 534.986,352.264 535.555,348.231 536.123,344.665 536.691,342.984 537.26,341.219 537.828,339.628 538.396,333.808 538.965,332.363 539.533,329.951 540.101,326.616 540.67,324.398 541.238,323.218 541.806,320.051 542.375,318.126 542.943,316.063 543.511,312.953 544.08,311.258 544.648,313.534 545.216,311.577 545.785,307.65 546.353,307.994 546.921,306.114 547.49,303.158 548.058,302.454 548.627,300.711 549.195,302.166 549.763,302.434 550.332,300.597 550.9,299.549 551.468,298.501 552.037,297.594 552.605,295.631 553.173,294.653 553.742,292.694 554.31,289.843 554.878,289.248 555.447,288.541 556.015,287.956 556.583,287.327 557.152,286.448 557.72,283.726 558.288,282.947 558.857,281.252 559.425,277.569 559.993,276.981 560.562,276.626 561.13,275.23 561.698,274.982 562.267,272.804 562.835,274.7 563.404,274.215 563.972,272.666 564.54,274.27 565.109,273.828 565.677,271.343 566.245,270.801 566.814,270.4 567.382,268.011 567.95,266.389 568.519,263.935 569.087,263.844 569.655,265.757 570.224,266.568 570.792,268.064 571.36,265.597 571.929,265.364 572.497,266.013 573.065,267.673 573.634,267.957 574.202,267.153 574.77,268.702 575.339,267.679 575.907,270.047 576.476,267.944 577.044,267.28 577.612,267.409 578.181,264.254 578.749,262.499 579.317,262.021 579.886,258.17 580.454,255.765 581.022,256.557 581.591,254.505 582.159,253.368 582.727,252.137 583.296,252.005 583.864,250.956 584.432,247.658 585.001,249.039 585.569,249.326 586.137,248.276 586.706,244.584 587.274,245.916 587.842,246.012 588.411,243.056 588.979,242.419 589.547,241.673 590.116,241.151 590.684,240.667 591.253,239.953 591.821,241.526 592.389,239.01 592.958,239.763 593.526,242.51 594.094,244.776 594.663,244.911 595.231,244.916 595.799,245.112 596.368,244.051 596.936,243.362 597.504,243.641 598.073,243.813 598.641,244.101 599.209,243.019 599.778,243.001 600.346,243.21 600.914,242.328 601.483,240.556 602.051,237.814 602.619,238.593 603.188,240.244 603.756,239.807 604.325,239.466 604.893,237.886 605.461,238.461 606.03,239.79 606.598,239.106 607.166,238.452 607.735,238.962 608.303,240.428 608.871,242.916 609.44,244.269 610.008,243.185 610.576,244.385 611.145,246.63 611.713,248.441 612.281,249.193 612.85,250.913 613.418,251.47 613.986,249.028 614.555,248.516 615.123,246.388 615.691,247.49 616.26,249.143 616.828,248.68 617.396,248.28 617.965,245.704 618.533,245.498 619.102,245.051 619.67,240.735 620.238,241.81 620.807,241.745 621.375,238.442 621.943,238.799 622.512,240.163 623.08,241.276 623.648,242.355 624.217,243.225 624.785,239.979 625.353,240.281 625.922,240.129 626.49,240.141 627.058,238.119 627.627,237.121 628.195,234.453 628.763,235.958 629.332,236.308 629.9,236.723 630.468,238.09 631.037,237.211 631.605,237.437 632.173,238.644 632.742,239.704 633.31,239.659 633.879,241.663 634.447,238.556 635.015,238.547 635.584,237.613 636.152,236.728 636.72,237.053 637.289,238.154 637.857,238.356 638.425,237.373 638.994,232.362 639.562,232.771 640.13,233.142 640.699,232.78 641.267,234.428 641.835,234.037 642.404,232.605 642.972,233.1 643.54,233.515 644.109,236.092 644.677,236.505 645.245,236.759 645.814,237.063 646.382,237.304 646.951,238.523 647.519,237.614 648.087,236.641 648.656,237.01 649.224,237.113 649.792,237.159 650.361,235.14 650.929,236.378 651.497,234.466 652.066,235.658 652.634,236.919 653.202,237.933 653.771,238.986 654.339,239.946 654.907,241.871 655.476,241.509 656.044,242.33 656.612,242.059 657.181,241.029 657.749,239.705 658.317,239.539 658.886,239.413 659.454,237.323 660.022,236.075 660.591,235.236 661.159,235.654 661.728,234.507 662.296,231.937 662.864,233.366 663.433,233.618 664.001,233.833 664.569,232.848 665.138,233.168 665.706,232.271 666.274,233.701 666.843,233.857 667.411,231.041 667.979,232.522 668.548,231.801 669.116,232.368 669.684,232.758 670.253,232.283 670.821,229.864 671.389,230.354 671.958,230.988 672.526,230.488 673.094,229.126 673.663,230.73 674.231,231.291 674.799,233.995 675.368,232.487 675.936,233.886 676.505,234.362 677.073,233.521 677.641,234.89 678.21,235.039 678.778,232.251 679.346,232.694 679.915,231.062 680.483,233.522 681.051,233.892 681.62,235.313 682.188,235.666 682.756,238.91 683.325,236.793 683.893,236.884 684.461,235.772 685.03,235.988 685.598,237.291 686.166,237.516 686.735,236.506 687.303,235.595 687.871,236.809 688.44,238.111 689.008,235.885 689.577,237.024 690.145,236.964 690.713,236.11 691.282,234.008 691.85,233.21 692.418,232.346 692.987,232.773 693.555,234.991 694.123,235.07 694.692,235.397 695.26,233.368 695.828,232.458 696.397,232.873 696.965,234.086 697.533,234.407 698.102,234.393 698.67,236.534 699.238,235.738 699.807,235.761 700.375,236.963 700.943,235.899 701.512,236.034 702.08,236.214 702.648,239.47 703.217,239.201 703.785,238.114 704.354,237.802 704.922,237.757 705.49,237.714 706.059,239.602 706.627,240.132 707.195,240.773 707.764,238.542 708.332,238.319 708.9,237.281 709.469,237.101 710.037,239.16 710.605,240.814 711.174,239.608 711.742,240.292 712.31,240.822 712.879,239.82 713.447,240.525 714.015,238.163 714.584,237.91 715.152,236.834 715.72,237.728 716.289,236.523 716.857,236.376 717.425,235.965 717.994,234.738 718.562,235.611 719.131,235.478 719.699,232.338 720.267,232.511 720.836,232.674 721.404,234.049 721.972,233.248 722.541,234.229 723.109,236.256 723.677,234.158 724.246,232.2 724.814,231.411 725.382,231.573 725.951,230.891 726.519,229.994 727.087,230.485 727.656,230.91 728.224,231.388 728.792,229.56 729.361,229.879 729.929,231.056 730.497,232.218 731.066,233.32 731.634,233.33 732.203,235.442 732.771,235.572 733.339,235.641 733.908,234.667 734.476,232.588 735.044,233.847 735.613,233.065 736.181,234.213 736.749,234.992 737.318,233.926 737.886,234.844 738.454,233.896 739.023,235.937 739.591,236.653 740.159,238.622 740.728,240.232 741.296,241.596 741.864,239.978 742.433,241.484 743.001,241.797 743.569,242.095 744.138,238.04 744.706,236.648 745.274,236.201 745.843,235.845 746.411,233.6 746.98,232.407 747.548,232.446 748.116,232.427 748.685,234.31 749.253,236.185 749.821,234.809 750.39,233.683 750.958,232.642 751.526,231.474 752.095,231.382 752.663,231.39 753.231,232.435 753.8,233.462 754.368,233.328 754.936,233.111 755.505,230.882 756.073,231.085 756.641,231.074 757.21,231.183 757.778,232.303 758.346,231.333 758.915,230.18 759.483,232.563 760.052,233.218 760.62,232.053 761.188,232.075 761.757,230.983 762.325,231.109 762.893,231.239 763.462,231.363 764.03,231.616 764.598,229.544 765.167,227.509 765.735,226.99 766.303,226.517 766.872,227.865 767.44,227.999 768.008,230.218 768.577,231.409 769.145,231.671 769.713,231.889 770.282,233.892 770.85,234.79 771.418,233.742 771.987,230.636 772.555,230.686 773.123,228.775 773.692,228.93 774.26,230.998 774.829,231.127 775.397,232.321 775.965,232.319 776.534,231.228 777.102,230.25 777.67,224.411 778.239,225.132 778.807,222.57 779.375,223.21 779.944,224.12 780.512,224.839 781.08,226.664 781.649,227.121 782.217,228.72 782.785,229.193 783.354,227.505 783.922,227.876 784.49,225.205 785.059,226.79 785.627,227.341 786.195,229.851 786.764,231.227 787.332,232.441 787.9,233.689 788.469,233.819 789.037,232.787 789.606,235.015 790.174,233.964 790.742,233.149 791.311,235.299 791.879,235.125 792.447,233.049 793.016,231.996 793.584,233.056 794.152,233.911 794.721,235.077 795.289,236.154 795.857,235.966 796.426,238.992 796.994,237.585 797.562,238.593 798.131,237.299 798.699,237.229 799.267,234.923 799.836,233.794 800.404,234.689 800.972,232.347 801.541,233.554 802.109,234.724 802.678,232.792 803.246,232.894 803.814,233.049 804.383,232.106 804.951,233.338 805.519,232.302 806.088,232.478 806.656,233.632 807.224,233.781 807.793,234.792 808.361,232.512 808.929,232.416 809.498,232.197 810.066,233.312 810.634,232.137 811.203,230.085 811.771,233.471 812.339,232.527 812.908,233.771 813.476,233.899 814.044,232.656 814.613,230.556 815.181,229.816 815.749,227.048 816.318,228.611 816.886,228.98 817.455,227.261 818.023,225.787 818.591,226.078 819.16,227.493 819.728,226.941 820.296,229.336 820.865,229.45 821.433,231.064 822.001,232.072 822.57,231.059 823.138,229.22 823.706,230.497 824.275,230.823 824.843,231.02 825.411,233.416 825.98,234.497 826.548,235.666 827.116,233.523 827.685,233.493 828.253,235.515 828.821,234.215 829.39,236.501 829.958,237.314 830.526,236.982 831.095,236.646 831.663,236.164 832.232,235.913 832.8,236.59 833.368,238.448 833.937,238.011 834.505,236.661 835.073,234.202 835.642,236.257 836.21,236.073 836.778,234.58 837.347,235.522 837.915,235.406 838.483,235.111 839.052,232.861 839.62,232.014 840.188,231.025 840.757,231.121 841.325,231.271 841.893,232.466 842.462,232.231 843.03,233.298 843.598,233.306 844.167,233.303 844.735,232.084 845.304,231.145 845.872,230.071 846.44,229.28 847.009,229.628 847.577,231.195 848.145,229.149 848.714,230.335 849.282,230.35 849.85,229.511 850.419,227.469 850.987,226.774 851.555,226.361 852.124,227.038 852.692,227.364 853.26,227.675 853.829,228.084 854.397,230.02 854.965,230.208 855.534,229.54 856.102,228.737 856.67,230.032 857.239,230.201 857.807,230.536 858.375,230.611 858.944,231.657 859.512,231.921 860.081,231.07 860.649,230.124 861.217,229.399 861.786,230.448 862.354,230.716 862.922,231.084 863.491,231.248 864.059,231.339 864.627,231.613 865.196,231.629 865.764,233.735 866.332,233.955 866.901,231.945 867.469,233.144 868.037,235.216 868.606,235.146 869.174,237.007 869.742,236.654 870.311,235.331 870.879,235.062 871.447,235.03 872.016,236.009 872.584,237.589 873.152,238.239 873.721,239.667 874.289,238.079 874.858,236.815 875.426,235.475 875.994,234.184 876.563,231.894 877.131,230.823 877.699,232.851 878.268,232.901 878.836,231.934 879.404,230.071 879.973,230.085 880.541,231.076 881.109,231.117 881.678,230.06 882.246,230.038 882.814,229.161 883.383,229.613 883.951,229.8 884.519,231.194 885.088,230.192 885.656,229.195 886.224,228.39 886.793,228.678 887.361,228.96 887.93,231.189 888.498,229.145 889.066,229.456 889.635,227.533 890.203,227.784 890.771,229.032 891.34,230.397 891.908,230.407 892.476,232.481 893.045,232.54 893.613,231.499 894.181,230.763 894.75,231.895 895.318,233.043 895.886,231.99 896.455,230.197 897.023,229.354 897.591,229.491 898.16,230.638 898.728,233.851 899.296,233.468 899.865,234.311 900.433,235.255 901.001,238.06 901.57,238.531 902.138,238.058 902.707,238.565 903.275,237.137 903.843,235.885 904.412,238.502 904.98,239.03 905.548,239.49 906.117,240.003 906.685,238.356 907.253,239.026 907.822,238.391 908.39,238.903 908.958,239.309 909.527,237.611 910.095,235.152 910.663,235.863 911.232,234.447 911.8,232.064 912.368,234.086 912.937,232.676 913.505,232.378 914.073,230.042 914.642,227.111 915.21,226.322 915.779,225.654 916.347,225.044 916.915,226.52 917.484,225.816 918.052,225.162 918.62,225.564 919.189,225.942 919.757,228.155 920.325,228.401 920.894,226.622 921.462,227.948 922.03,227.255 922.599,228.624 923.167,228.754 923.735,228.102 924.304,229.447 924.872,229.647 925.44,230.852 926.009,234.013 926.577,233.873 927.145,236.821 927.714,235.279 928.282,234.326 928.85,233.253 929.419,233.225 929.987,234.222 930.556,234.03 931.124,231.008 931.692,230.179 932.261,230.232 932.829,229.376 933.397,229.584 933.966,231.821 934.534,231.675 935.102,232.641 935.671,233.559 936.239,233.314 936.807,233.164 937.376,235.013 937.944,235.89 938.512,235.542 939.081,235.19 939.649,231.967 940.217,231.873 940.786,230.671 941.354,230.532 941.922,229.613 942.491,229.496 943.059,229.587 943.627,230.977 944.196,229.923 944.764,229.991 945.333,229.163 945.901,229.375 946.469,229.585 947.038,229.74 947.606,229.79 948.174,227.944 948.743,230.343 949.311,234.545 949.879,233.302 950.448,232.316 951.016,232.274 951.584,231.257 952.153,229.065 952.721,230.144 953.289,232.434 953.858,230.263 954.426,231.595 954.994,229.586 955.563,229.651 956.131,227.924 956.699,229.232 957.268,228.463 957.836,228.688 958.405,230.045 958.973,230.213 959.541,230.398 960.11,230.66 960.678,228.892 961.246,231.245 961.815,232.314 962.383,229.979 962.951,230.022 963.52,229.296 964.088,229.551 964.656,229.739 965.225,227.74 965.793,229.316 966.361,230.483 966.93,230.673 967.498,230.836 968.066,231.18 968.635,231.315 969.203,227.15 969.771,230.829 970.34,232.812 970.908,231.927 971.476,232.954 972.045,232.854 972.613,234.154 973.182,234.094 973.75,233.959 974.318,233.757 974.887,235.672 975.455,235.413 976.023,233.96 976.592,234.853 977.16,234.68 977.728,233.241 978.297,233.931 978.865,232.944 979.433,232.839 980.002,233.669 980.57,236.63 981.138,236.269 981.707,232.782 982.275,232.521 982.843,227.904 983.412,229.309 983.98,230.418 984.548,230.483 985.117,230.527 985.685,230.689 986.253,229.833 986.822,229.868 987.39,232.093 987.959,234.077 988.527,233.605 989.095,234.354 989.664,232.743 990.232,233.632 990.8,233.184 991.369,234.16 991.937,235.064 992.505,231.65 993.074,232.691 993.642,232.31 994.21,232.202 994.779,231.19 995.347,231.219 995.915,231.227 996.484,232.149 997.052,232.015 997.62,231.01 998.189,230.873 998.757,230.859 999.325,232.007 999.894,231.923 1000.46,231.92 1001.03,231.816 1001.6,229.688 1002.17,231.825 1002.74,233.117 1003.3,233.057 1003.87,232.79 1004.44,233.576 1005.01,232.616 1005.58,231.377 1006.15,231.724 1006.71,231.617 1007.28,230.541 1007.85,230.56 1008.42,230.453 1008.99,231.541 1009.56,231.367 1010.12,233.284 1010.69,232.032 1011.26,233.028 1011.83,231.806 1012.4,233.811 1012.97,233.645 1013.53,232.441 1014.1,231.171 1014.67,231.015 1015.24,229.961 1015.81,233.013 1016.38,231.876 1016.94,228.709 1017.51,228.757 1018.08,229.905 1018.65,231.055 1019.22,231.882 1019.79,233.723 1020.35,232.546 1020.92,232.588 1021.49,234.34 1022.06,232.906 1022.63,234.676 1023.2,234.666 1023.76,234.47 1024.33,232.176 1024.9,234.278 1025.47,235.164 1026.04,235.805 1026.61,234.408 1027.17,233.275 1027.74,231.129 1028.31,228.055 1028.88,227.21 1029.45,226.304 1030.02,226.545 1030.58,225.833 1031.15,224.117 1031.72,222.488 1032.29,223.951 1032.86,225.364 1033.43,226.823 1033.99,225.937 1034.56,225.408 1035.13,225.845 1035.7,226.438 1036.27,225.61 1036.84,226.159 1037.4,225.661 1037.97,226.19 1038.54,228.752 1039.11,230.159 1039.68,230.411 1040.25,227.538 1040.81,227.969 1041.38,227.157 1041.95,228.619 1042.52,227.836 1043.09,228.285 1043.66,228.609 1044.22,230.954 1044.79,230.932 1045.36,231.086 1045.93,229.183 1046.5,228.303 1047.07,228.448 1047.63,229.609 1048.2,229.654 1048.77,231.074 1049.34,230.49 1049.91,229.928 1050.48,229.118 1051.05,230.482 1051.61,230.771 1052.18,229.033 1052.75,230.448 1053.32,233.682 1053.89,233.641 1054.46,234.48 1055.02,234.513 1055.59,234.509 1056.16,234.091 1056.73,234.017 1057.3,234.773 1057.87,233.56 1058.43,232.395 1059,232.474 1059.57,233.481 1060.14,234.378 1060.71,233.213 1061.28,232.958 1061.84,231.062 1062.41,230.735 1062.98,227.572 1063.55,225.906 1064.12,227.488 1064.69,230.047 1065.25,229.143 1065.82,231.532 1066.39,229.597 1066.96,230.824 1067.53,231.907 1068.1,230.841 1068.66,230.789 1069.23,229.942 1069.8,231.076 1070.37,230.151 1070.94,231.353 1071.51,231.5 1072.07,231.717 1072.64,231.802 1073.21,231.981 1073.78,231.957 1074.35,231.12 1074.92,231.267 1075.48,232.411 1076.05,230.329 1076.62,233.69 1077.19,234.834 1077.76,233.818 1078.33,235.81 1078.89,233.436 1079.46,232.23 1080.03,233.222 1080.6,234.155 1081.17,234.938 1081.74,237.72 1082.3,238.288 1082.87,239.96 1083.44,239.164 1084.01,239.52 1084.58,240.989 1085.15,242.407 1085.71,242.602 1086.28,242.829 1086.85,239.894 1087.42,237.268 1087.99,237.965 1088.56,237.47 1089.12,238.927 1089.69,238.105 1090.26,237.764 1090.83,237.201 1091.4,238.688 1091.97,238.001 1092.53,236.39 1093.1,233.938 1093.67,232.715 1094.24,233.428 1094.81,233.327 1095.38,229.976 1095.94,229.021 1096.51,229.256 1097.08,229.421 1097.65,230.384 1098.22,229.271 1098.79,229.277 1099.35,229.36 1099.92,230.608 1100.49,229.289 1101.06,230.255 1101.63,229.061 1102.2,231.205 1102.76,231.162 1103.33,230.158 1103.9,230.115 1104.47,230.219 1105.04,229.301 1105.61,229.417 1106.17,228.431 1106.74,228.527 1107.31,227.57 1107.88,222.565 1108.45,221.986 1109.02,221.719 1109.58,221.304 1110.15,223.098 1110.72,225.801 1111.29,225.198 1111.86,227.533 1112.43,227.794 1112.99,226.977 1113.56,226.385 1114.13,224.492 1114.7,223.924 1115.27,224.444 1115.84,224.876 1116.4,226.318 1116.97,225.654 1117.54,225.171 1118.11,226.808 1118.68,227.045 1119.25,227.451 1119.81,227.829 1120.38,229.282 1120.95,229.504 1121.52,228.506 1122.09,229.931 1122.66,231.285 1123.23,232.456 1123.79,233.445 1124.36,234.327 1124.93,233.104 1125.5,234.011 1126.07,232.877 1126.64,231.83 1127.2,232.067 1127.77,231.346 1128.34,228.621 1128.91,229.813 1129.48,228.928 1130.05,229.135 1130.61,230.391 1131.18,230.487 1131.75,232.637 1132.32,233.382 1132.89,231.297 1133.46,234.666 1134.02,235.64 1134.59,235.463 1135.16,235.333 1135.73,234.294 1136.3,234.183 1136.87,232.009 1137.43,232.303 1138,235.19 1138.57,231.967 1139.14,230.955 1139.71,229.792 1140.28,231.996 1140.84,233.117 1141.41,232.769 1141.98,231.569 1142.55,231.778 1143.12,231.833 1143.69,230.842 1144.25,229.144 1144.82,232.451 1145.39,235.428 1145.96,236.308 1146.53,235.863 1147.1,235.775 1147.66,235.47 1148.23,235.041 1148.8,232.784 1149.37,233.744 1149.94,231.52 1150.51,233.534 1151.07,232.345 1151.64,231.21 1152.21,231.141 1152.78,234.365 1153.35,234.212 1153.92,234.796 1154.48,234.622 1155.05,238.397 1155.62,236.803 1156.19,237.801 1156.76,235.293 1157.33,236.041 1157.89,236.708 1158.46,237.189 1159.03,236.923 1159.6,235.516 1160.17,232.976 1160.74,230.959 1161.3,229.924 1161.87,229.068 1162.44,229.231 1163.01,229.393 1163.58,230.447 1164.15,228.46 1164.71,228.514 1165.28,229.686 1165.85,231.722 1166.42,231.633 1166.99,230.483 1167.56,230.414 1168.12,230.098 1168.69,234.138 1169.26,232.903 1169.83,233.649 1170.4,231.404 1170.97,230.202 1171.53,230.277 1172.1,232.192 1172.67,230.006 1173.24,230.146 1173.81,229.221 1174.38,229.303 1174.94,230.338 1175.51,230.21 1176.08,233.05 1176.65,232.763 1177.22,233.745 1177.79,234.71 1178.35,232.344 1178.92,234.323 1179.49,234.035 1180.06,233.622 1180.63,233.395 1181.2,233.393 1181.76,232.921 1182.33,233.596 1182.9,233.255 1183.47,233.12 1184.04,234.853 1184.61,234.621 1185.17,234.406 1185.74,235.249 1186.31,235.801 1186.88,234.241 1187.45,232.909 1188.02,229.743 1188.58,228.785 1189.15,227.808 1189.72,228.019 1190.29,227.029 1190.86,229.324 1191.43,229.106 1192,229.013 1192.56,230.142 1193.13,233.363 1193.7,231.951 1194.27,232.765 1194.84,231.616 1195.41,231.424 1195.97,230.235 1196.54,230.263 1197.11,230.306 1197.68,230.069 1198.25,231.206 1198.82,230.934 1199.38,229.9 1199.95,227.854 1200.52,228.163 1201.09,229.444 1201.66,227.411 1202.23,229.648 1202.79,228.719 1203.36,226.705 1203.93,228.936 1204.5,227.968 1205.07,228.413 1205.64,228.639 1206.2,229.892 1206.77,229.632 1207.34,227.699 1207.91,227.081 1208.48,227.346 1209.05,227.49 1209.61,227.87 1210.18,228.111 1210.75,228.337 1211.32,228.482 1211.89,227.676 1212.46,227.883 1213.02,228.18 1213.59,229.634 1214.16,229.712 1214.73,229.683 1215.3,228.72 1215.87,228.923 1216.43,230.036 1217,230.209 1217.57,229.212 1218.14,229.492 1218.71,229.627 1219.28,228.557 1219.84,227.644 1220.41,231.986 1220.98,230.834 1221.55,231.873 1222.12,231.798 1222.69,231.82 1223.25,230.827 1223.82,231.072 1224.39,232.331 1224.96,233.255 1225.53,235.161 1226.1,235.806 1226.66,236.577 1227.23,236.09 1227.8,234.674 1228.37,233.278 1228.94,232.12 1229.51,229.201 1230.07,228.248 1230.64,227.203 1231.21,227.231 1231.78,227.545 1232.35,228.803 1232.92,231.198 1233.48,233.166 1234.05,233.189 1234.62,231.135 1235.19,235.409 1235.76,233.961 1236.33,233.287 1236.89,233.122 1237.46,232.925 1238.03,229.869 1238.6,229.932 1239.17,229.158 1239.74,227.354 1240.3,229.695 1240.87,230.749 1241.44,229.754 1242.01,228.777 1242.58,228.848 1243.15,227.072 1243.71,228.321 1244.28,228.544 1244.85,227.537 1245.42,229.84 1245.99,231.004 1246.56,232.198 1247.12,233.295 1247.69,233.253 1248.26,233.017 1248.83,231.97 1249.4,231.983 1249.97,231.937 1250.53,231.811 1251.1,231.703 1251.67,232.535 1252.24,229.526 1252.81,228.509 1253.38,229.635 1253.94,229.91 1254.51,230.165 1255.08,228.148 1255.65,229.388 1256.22,229.767 1256.79,230.968 1257.35,231.166 1257.92,232.36 1258.49,235.595 1259.06,236.062 1259.63,235.77 1260.2,235.436 1260.76,236.091 1261.33,232.526 1261.9,231.365 1262.47,231.526 1263.04,230.467 1263.61,230.606 1264.18,230.755 1264.74,231.731 1265.31,233.758 1265.88,235.666 1266.45,234.332 1267.02,231.158 1267.59,233.156 1268.15,232.283 1268.72,232.373 1269.29,231.301 1269.86,233.235 1270.43,230.137 1271,230.092 1271.56,232.021 1272.13,233.045 1272.7,233.953 1273.27,232.787 1273.84,230.638 1274.41,229.78 1274.97,231.7 1275.54,230.819 1276.11,230.006 1276.68,231.03 1277.25,231.25 1277.82,231.244 1278.38,235.425 1278.95,236.187 1279.52,234.586 1280.09,233.361 1280.66,233.295 1281.23,233.071 1281.79,233.006 1282.36,234.022 1282.93,232.81 1283.5,233.687 1284.07,232.377 1284.64,233.373 1285.2,232.34 1285.77,230.328 1286.34,230.384 1286.91,231.671 1287.48,230.685 1288.05,231.803 1288.61,231.864 1289.18,231.831 1289.75,231.647 1290.32,232.574 1290.89,233.603 1291.46,233.401 1292.02,233.308 1292.59,234.343 1293.16,235.175 1293.73,233.892 1294.3,234.693 1294.87,233.245 1295.43,233.03 1296,232.713 1296.57,232.36 1297.14,229.104 1297.71,230.106 1298.28,230.211 1298.84,231.307 1299.41,230.363 1299.98,229.332 1300.55,230.353 1301.12,230.138 1301.69,231.163 1302.25,229.842 1302.82,230.928 1303.39,232.82 1303.96,235.704 1304.53,234.413 1305.1,232.92 1305.66,235.769 1306.23,234.191 1306.8,233.81 1307.37,232.485 1307.94,231.146 1308.51,231.976 1309.07,231.968 1309.64,231.751 1310.21,230.263 1310.78,232.338 1311.35,233.143 1311.92,232.199 1312.48,232.021 1313.05,231.77 1313.62,230.866 1314.19,232.085 1314.76,231.824 1315.33,232.598 1315.89,231.403 1316.46,232.541 1317.03,232.48 1317.6,233.387 1318.17,233.198 1318.74,232.051 1319.3,232.811 1319.87,231.588 1320.44,230.362 1321.01,230.109 1321.58,231.399 1322.15,233.229 1322.71,233.162 1323.28,232.838 1323.85,232.701 1324.42,232.929 1324.99,233.001 1325.56,234.784 1326.12,231.475 1326.69,231.48 1327.26,228.195 1327.83,228.292 1328.4,229.523 1328.97,229.548 1329.53,227.492 1330.1,225.562 1330.67,227.039 1331.24,227.306 1331.81,224.234 1332.38,224.658 1332.94,222.935 1333.51,225.303 1334.08,225.779 1334.65,225.083 1335.22,226.576 1335.79,225.713 1336.36,225.933 1336.92,226.427 1337.49,226.766 1338.06,227 1338.63,225.297 1339.2,228.902 1339.77,230.359 1340.33,229.351 1340.9,229.562 1341.47,231.485 1342.04,228.502 1342.61,230.851 1343.18,229.042 1343.74,228.176 1344.31,228.574 1344.88,228.843 1345.45,229.996 1346.02,230.084 1346.59,231.458 1347.15,232.665 1347.72,231.386 1348.29,230.333 1348.86,228.496 1349.43,227.899 1350,230.434 1350.56,228.535 1351.13,228.956 1351.7,229.341 1352.27,229.576 1352.84,227.73 1353.41,230.249 1353.97,230.142 1354.54,229.383 1355.11,230.633 1355.68,229.652 1356.25,229.682 1356.82,230.758 1357.38,232.069 1357.95,231.012 1358.52,231.121 1359.09,233.139 1359.66,232.075 1360.23,233.243 1360.79,235.246 1361.36,235.87 1361.93,235.707 1362.5,234.584 1363.07,231.259 1363.64,231.324 1364.2,233.468 1364.77,233.367 1365.34,233.321 1365.91,233.047 1366.48,232.964 1367.05,234.754 1367.61,234.348 1368.18,234.04 1368.75,235.075 1369.32,236.941 1369.89,236.526 1370.46,235.942 1371.02,236.36 1371.59,236.233 1372.16,236.951 1372.73,235.312 1373.3,233.889 1373.87,233.453 1374.43,232.386 1375,232.305 1375.57,231.18 1376.14,228.918 1376.71,230.119 1377.28,230.271 1377.84,229.101 1378.41,229.107 1378.98,230.378 1379.55,231.212 1380.12,232.345 1380.69,233.306 1381.25,232.993 1381.82,231.999 1382.39,233.976 1382.96,232.757 1383.53,231.538 1384.1,234.477 1384.66,235.194 1385.23,234.83 1385.8,231.269 1386.37,231.306 1386.94,231.098 1387.51,231.054 1388.07,229.033 1388.64,230.073 1389.21,231.22 1389.78,232.235 1390.35,232.119 1390.92,230.702 1391.48,233.77 1392.05,233.473 1392.62,232.325 1393.19,234.229 1393.76,232.196 1394.33,233.204 1394.89,231.964 1395.46,229.642 1396.03,228.65 1396.6,227.709 1397.17,227.839 1397.74,226.89 1398.3,225.981 1398.87,227.157 1399.44,225.459 1400.01,225.692 1400.58,225.2 1401.15,225.835 1401.71,226.298 1402.28,226.538 1402.85,227.794 1403.42,230.057 1403.99,232.346 1404.56,232.065 1405.13,232.065 1405.69,229.718 1406.26,231.987 1406.83,232.86 1407.4,231.647 1407.97,231.534 1408.54,232.704 1409.1,231.542 1409.67,228.581 1410.24,226.697 1410.81,225.198 1411.38,225.585 1411.95,226.948 1412.51,227.175 1413.08,226.484 1413.65,227.573 1414.22,225.751 1414.79,225.137 1415.36,224.835 1415.92,226.363 1416.49,226.863 1417.06,227.118 1417.63,229.544 1418.2,229.648 1418.77,232.041 1419.33,231.954 1419.9,231.797 1420.47,234.003 1421.04,233.002 1421.61,234.001 1422.18,233.86 1422.74,234.747 1423.31,232.435 1423.88,232.525 1424.45,233.7 1425.02,234.544 1425.59,234.422 1426.15,235.201 1426.72,234.283 1427.29,233.172 1427.86,232.209 1428.43,234.3 1429,234.176 1429.56,234.098 1430.13,234.909 1430.7,235.507 1431.27,235.262 1431.84,233.797 1432.41,231.563 1432.97,231.639 1433.54,233.778 1434.11,233.589 1434.68,233.361 1435.25,230.974 1435.82,229.988 1436.38,228.928 1436.95,228.181 1437.52,228.512 1438.09,229.882 1438.66,230.995 1439.23,230.13 1439.79,230.418 1440.36,231.391 1440.93,228.389 1441.5,226.339 1442.07,226.924 1442.64,228.178 1443.2,225.419 1443.77,226.012 1444.34,225.455 1444.91,227.928 1445.48,229.265 1446.05,233.695 1446.61,232.676 1447.18,231.444 1447.75,230.62 1448.32,227.591 1448.89,227.871 1449.46,229.373 1450.02,229.629 1450.59,231.794 1451.16,231.726 1451.73,232.733 1452.3,232.646 1452.87,235.63 1453.43,235.34 1454,234.885 1454.57,235.605 1455.14,235.16 1455.71,237.015 1456.28,236.609 1456.84,237.289 1457.41,237.01 1457.98,235.552 1458.55,232.235 1459.12,232.153 1459.69,229.032 1460.25,226.239 1460.82,226.321 1461.39,225.497 1461.96,225.946 1462.53,227.327 1463.1,228.504 1463.66,228.679 1464.23,228.939 1464.8,228.91 1465.37,228.096 1465.94,227.319 1466.51,229.86 1467.07,228.907 1467.64,232.329 1468.21,231.256 1468.78,230.11 1469.35,230.322 1469.92,229.693 1470.48,227.713 1471.05,231.345 1471.62,229.352 1472.19,230.377 1472.76,231.713 1473.33,232.503 1473.89,230.49 1474.46,229.309 1475.03,229.656 1475.6,229.917 1476.17,230.236 1476.74,230.463 1477.31,228.58 1477.87,230.967 1478.44,231.018 1479.01,230.184 1479.58,228.449 1480.15,232.106 1480.72,230.044 1481.28,229.115 1481.85,230.499 1482.42,230.908 1482.99,231.161 1483.56,232.513 1484.13,230.412 1484.69,229.728 1485.26,232.007 1485.83,233.385 1486.4,232.328 1486.97,232.483 1487.54,233.627 1488.1,234.405 1488.67,234.092 1489.24,232.782 1489.81,233.942 1490.38,233.913 1490.95,233.053 1491.51,232.947 1492.08,232.983 1492.65,231.73 1493.22,231.821 1493.79,233.804 1494.36,234.692 1494.92,234.465 1495.49,234.35 1496.06,233.15 1496.63,234.199 1497.2,233.06 1497.77,234.005 1498.33,232.836 1498.9,231.911 1499.47,233.035 1500.04,232.979 1500.61,229.795 1501.18,230.863 1501.74,230.763 1502.31,228.623 1502.88,227.785 1503.45,228.818 1504.02,230.208 1504.59,229.281 1505.15,227.424 1505.72,227.552 1506.29,225.803 1506.86,226.529 1507.43,228.003 1508,227.425 1508.56,226.74 1509.13,228.173 1509.7,231.592 1510.27,233.693 1510.84,232.4 1511.41,233.709 1511.97,230.599 1512.54,229.536 1513.11,228.969 1513.68,227.28 1514.25,228.66 1514.82,229.998 1515.38,230.227 1515.95,228.189 1516.52,230.583 1517.09,229.777 1517.66,232.322 1518.23,234.545 1518.79,235.596 1519.36,234.326 1519.93,237.321 1520.5,236.898 1521.07,237.511 1521.64,238.116 1522.2,237.698 1522.77,238.396 1523.34,238.027 1523.91,235.579 1524.48,234.288 1525.05,235.168 1525.61,237.102 1526.18,236.853 1526.75,234.373 1527.32,235.148 1527.89,234.816 1528.46,236.657 1529.02,237.459 1529.59,239.182 1530.16,239.504 1530.73,236.837 1531.3,235.355 1531.87,236.169 1532.43,235.767 1533,236.301 1533.57,235.888 1534.14,235.581 1534.71,236.409 1535.28,233.894 1535.84,233.557 1536.41,235.455 1536.98,234.191 1537.55,234.729 1538.12,233.385 1538.69,232.139 1539.25,229.773 1539.82,230.454 1540.39,230.413 1540.96,230.321 1541.53,230.147 1542.1,229.066 1542.66,229.069 1543.23,229.983 1543.8,227.987 1544.37,229.156 1544.94,229.192 1545.51,228.162 1546.08,229.254 1546.64,229.353 1547.21,228.267 1547.78,228.246 1548.35,229.201 1548.92,228.31 1549.49,227.568 1550.05,225.81 1550.62,227.024 1551.19,227.314 1551.76,229.715 1552.33,231.966 1552.9,231.861 1553.46,231.696 1554.03,231.784 1554.6,231.702 1555.17,232.702 1555.74,235.455 1556.31,235.262 1556.87,235.766 1557.44,234.364 1558.01,235.299 1558.58,234.884 1559.15,233.479 1559.72,233.383 1560.28,232.96 1560.85,232.574 1561.42,233.426 1561.99,234.224 1562.56,233.058 1563.13,231.845 1563.69,229.71 1564.26,229.737 1564.83,230.823 1565.4,231.632 1565.97,231.604 1566.54,229.434 1567.1,228.447 1567.67,228.621 1568.24,227.708 1568.81,226.99 1569.38,226.161 1569.95,225.415 1570.51,227.848 1571.08,228.023 1571.65,228.214 1572.22,226.399 1572.79,225.661 1573.36,229.197 1573.92,228.373 1574.49,230.582 1575.06,229.645 1575.63,228.629 1576.2,228.892 1576.77,226.92 1577.33,229.213 1577.9,229.432 1578.47,230.32 1579.04,231.307 1579.61,232.34 1580.18,233.381 1580.74,234.367 1581.31,235.06 1581.88,233.664 1582.45,234.357 1583.02,233.956 1583.59,232.444 1584.15,232.138 1584.72,233.177 1585.29,229.963 1585.86,230.823 1586.43,230.762 1587,229.852 1587.56,229.772 1588.13,228.647 1588.7,230.604 1589.27,229.485 1589.84,231.462 1590.41,230.149 1590.97,231.94 1591.54,228.892 1592.11,227.91 1592.68,229.024 1593.25,228.075 1593.82,227.557 1594.38,227.719 1594.95,227.708 1595.52,226.785 1596.09,226.008 1596.66,226.279 1597.23,226.467 1597.79,225.858 1598.36,225.383 1598.93,224.819 1599.5,229.626 1600.07,229.714 1600.64,228.082 1601.2,229.396 1601.77,226.514 1602.34,227.904 1602.91,229.92 1603.48,229.257 1604.05,229.547 1604.61,228.736 1605.18,229.946 1605.75,231.203 1606.32,234.406 1606.89,233.052 1607.46,234.122 1608.02,233.719 1608.59,234.686 1609.16,231.374 1609.73,231.604 1610.3,231.652 1610.87,232.869 1611.43,231.806 1612,233.651 1612.57,234.712 1613.14,236.532 1613.71,236.3 1614.28,236.84 1614.84,237.775 1615.41,236.174 1615.98,236.107 1616.55,237.766 1617.12,237.145 1617.69,235.862 1618.26,234.644 1618.82,232.185 1619.39,231.993 1619.96,231.979 1620.53,232.876 1621.1,232.655 1621.67,234.706 1622.23,233.196 1622.8,231.992 1623.37,234.07 1623.94,234.934 1624.51,235.586 1625.08,233.196 1625.64,231.122 1626.21,231.267 1626.78,230.513 1627.35,230.353 1627.92,229.472 1628.49,228.633 1629.05,229.928 1629.62,229.015 1630.19,228.24 1630.76,226.513 1631.33,226.976 1631.9,229.345 1632.46,229.581 1633.03,228.521 1633.6,227.674 1634.17,228.07 1634.74,228.327 1635.31,229.607 1635.87,228.708 1636.44,228.922 1637.01,229.03 1637.58,230.171 1638.15,232.415 1638.72,233.255 1639.28,232.326 1639.85,228.133 1640.42,229.328 1640.99,231.562 1641.56,231.61 1642.13,231.58 1642.69,230.417 1643.26,229.429 1643.83,229.413 1644.4,230.604 1644.97,228.867 1645.54,230.124 1646.1,230.173 1646.67,232.353 1647.24,233.396 1647.81,235.12 1648.38,234.706 1648.95,235.45 1649.51,235.16 1650.08,236.011 1650.65,232.578 1651.22,234.305 1651.79,234.08 1652.36,234.978 1652.92,234.533 1653.49,234.306 1654.06,235.14 1654.63,234.686 1655.2,234.53 1655.77,230.248 1656.33,226.44 1656.9,226.815 1657.47,228.072 1658.04,225.3 1658.61,225.787 1659.18,225.211 1659.74,225.763 1660.31,225.751 1660.88,226.272 1661.45,226.479 1662.02,226.759 1662.59,229.279 1663.15,228.367 1663.72,227.566 1664.29,229.816 1664.86,230.169 1665.43,231.288 1666,229.266 1666.56,231.254 1667.13,231.571 1667.7,232.413 1668.27,231.46 1668.84,231.513 1669.41,232.528 1669.97,233.294 1670.54,236.261 1671.11,238.32 1671.68,236.779 1672.25,237.394 1672.82,236.136 1673.38,235.57 1673.95,236.124 1674.52,235.791 1675.09,236.448 1675.66,238.995 1676.23,239.594 1676.79,237.813 1677.36,238.426 1677.93,235.903 1678.5,233.365 1679.07,232.021 1679.64,232.046 1680.2,230.953 1680.77,231.942 1681.34,234.139 1681.91,232.891 1682.48,232.747 1683.05,231.601 1683.61,229.456 1684.18,229.477 1684.75,228.466 1685.32,230.86 1685.89,230.615 1686.46,229.775 1687.02,228.569 1687.59,226.53 1688.16,228.83 1688.73,226.921 1689.3,226.113 1689.87,226.517 1690.44,225.724 1691,225.266 1691.57,225.425 1692.14,226.857 1692.71,231.41 1693.28,232.33 1693.85,234.131 1694.41,233.838 1694.98,233.561 1695.55,233.366 1696.12,233.078 1696.69,231.746 1697.26,231.404 1697.82,231.511 1698.39,229.212 1698.96,229.2 1699.53,231.148 1700.1,232.209 1700.67,230.022 1701.23,229.247 1701.8,229.324 1702.37,228.393 1702.94,228.432 1703.51,226.736 1704.08,224.938 1704.64,226.29 1705.21,226.617 1705.78,227.946 1706.35,229.4 1706.92,228.374 1707.49,226.322 1708.05,227.798 1708.62,230.012 1709.19,231.057 1709.76,231.208 1710.33,232.329 1710.9,233.355 1711.46,234.215 1712.03,233.047 1712.6,234.159 1713.17,233.249 1713.74,233.28 1714.31,233.085 1714.87,232.79 1715.44,232.515 1716.01,233.447 1716.58,231.158 1717.15,233.165 1717.72,233.154 1718.28,232.958 1718.85,234.698 1719.42,233.393 1719.99,232.189 1720.56,232.203 1721.13,231.102 1721.69,230.148 1722.26,229.503 1722.83,229.713 1723.4,227.128 1723.97,229.648 1724.54,229.672 1725.1,228.944 1725.67,232.306 1726.24,232.205 1726.81,231.047 1727.38,232.118 1727.95,233.882 1728.51,233.774 1729.08,237.824 1729.65,240.568 1730.22,239.692 1730.79,239.036 1731.36,238.524 1731.92,235.89 1732.49,235.509 1733.06,237.047 1733.63,236.432 1734.2,233.615 1734.77,235.459 1735.33,237.447 1735.9,238.08 1736.47,238.656 1737.04,236.875 1737.61,236.467 1738.18,234.973 1738.74,234.506 1739.31,234.29 1739.88,232.067 1740.45,232.859 1741.02,232.584 1741.59,232.494 1742.15,232.345 1742.72,229.054 1743.29,229.039 1743.86,231.945 1744.43,230.832 1745,229.953 1745.56,230.983 1746.13,232.682 1746.7,230.381 1747.27,230.403 1747.84,231.274 1748.41,232.142 1748.97,232.051 1749.54,230.807 1750.11,231.679 1750.68,230.619 1751.25,229.485 1751.82,228.504 1752.38,227.675 1752.95,225.734 1753.52,228.253 1754.09,227.201 1754.66,228.561 1755.23,227.756 1755.79,225.68 1756.36,229.157 1756.93,228.026 1757.5,227.192 1758.07,227.459 1758.64,225.808 1759.21,226.299 1759.77,225.547 1760.34,226.025 1760.91,225.227 1761.48,227.57 1762.05,227.575 1762.62,227.729 1763.18,230.956 1763.75,229.08 1764.32,228.078 1764.89,227.269 1765.46,227.484 1766.03,226.599 1766.59,227.992 1767.16,230.457 1767.73,230.742 1768.3,230.735 1768.87,230.94 1769.44,229.74 1770,229.895 1770.57,230.11 1771.14,228.2 1771.71,226.121 1772.28,224.676 1772.85,223.116 1773.41,221.542 1773.98,222.316 1774.55,222.754 1775.12,223.257 1775.69,220.772 1776.26,222.665 1776.82,220.169 1777.39,219.895 1777.96,220.874 1778.53,221.053 1779.1,221.066 1779.67,226.128 1780.23,227.798 1780.8,228.44 1781.37,230.76 1781.94,231.045 1782.51,232.436 1783.08,230.723 1783.64,233.049 1784.21,233.88 1784.78,231.907 1785.35,233.222 1785.92,233.362 1786.49,236.429 1787.05,236.166 1787.62,232.915 1788.19,235.089 1788.76,235.063 1789.33,234.716 1789.9,235.575 1790.46,233.316 1791.03,230.32 1791.6,228.462 1792.17,230.666 1792.74,230.066 1793.31,226.117 1793.87,227.846 1794.44,230.429 1795.01,231.854 1795.58,230.857 1796.15,230.905 1796.72,230.264 1797.28,232.552 1797.85,232.425 1798.42,231.312 1798.99,232.36 1799.56,233.315 1800.13,235.399 1800.69,236.132 1801.26,236.063 1801.83,234.702 1802.4,232.677 1802.97,234.81 1803.54,234.57 1804.1,233.14 1804.67,229.971 1805.24,230.011 1805.81,231.47 1806.38,231.552 1806.95,231.563 1807.51,232.662 1808.08,235.784 1808.65,235.426 1809.22,235.287 1809.79,233.949 1810.36,233.014 1810.92,233.906 1811.49,233.774 1812.06,231.677 1812.63,231.841 1813.2,231.867 1813.77,230.931 1814.33,231.095 1814.9,232.226 1815.47,233.068 1816.04,234.095 1816.61,234.741 1817.18,236.668 1817.74,236.291 1818.31,232.859 1818.88,233.896 1819.45,235.945 1820.02,234.491 1820.59,234.266 1821.15,233.891 1821.72,235.707 1822.29,234.466 1822.86,234.277 1823.43,234.126 1824,234.907 1824.56,233.629 1825.13,230.419 1825.7,232.539 1826.27,233.511 1826.84,233.41 1827.41,234.41 1827.97,235.207 1828.54,234.964 1829.11,233.48 1829.68,232.605 1830.25,234.5 1830.82,233.953 1831.39,232.635 1831.95,233.566 1832.52,234.554 1833.09,235.252 1833.66,234.797 1834.23,235.571 1834.8,235.164 1835.36,234.915 1835.93,234.491 1836.5,234.222 1837.07,235.105 1837.64,232.551 1838.21,234.184 1838.77,234.116 1839.34,231.495 1839.91,230.394 1840.48,230.393 1841.05,228.568 1841.62,228.598 1842.18,228.65 1842.75,228.548 1843.32,229.605 1843.89,228.708 1844.46,227.856 1845.03,226.832 1845.59,229.066 1846.16,231.462 1846.73,229.338 1847.3,230.275 1847.87,230.314 1848.44,230.419 1849,229.433 1849.57,229.562 1850.14,228.615 1850.71,227.629 1851.28,229.802 1851.85,231.194 1852.41,231.141 1852.98,231.132 1853.55,231.013 1854.12,228.78 1854.69,229.22 1855.26,229.419 1855.82,226.38 1856.39,224.585 1856.96,224.931 1857.53,225.256 1858.1,225.716 1858.67,226.202 1859.23,228.572 1859.8,230.837 1860.37,230.847 1860.94,230.911 1861.51,229.911 1862.08,231.169 1862.64,231.327 1863.21,231.059 1863.78,230.933 1864.35,228.987 1864.92,227.869 1865.49,228.176 1866.05,228.397 1866.62,226.577 1867.19,225.759 1867.76,229.541 1868.33,228.77 1868.9,229.974 1869.46,230.145 1870.03,230.296 1870.6,229.238 1871.17,229.534 1871.74,231.754 1872.31,230.918 1872.87,230.036 1873.44,229.39 1874.01,232.538 1874.58,231.479 1875.15,232.65 1875.72,233.62 1876.28,232.394 1876.85,233.263 1877.42,233.123 1877.99,230.958 1878.56,232.029 1879.13,230.964 1879.69,229.853 1880.26,229.086 1880.83,228.375 1881.4,227.372 1881.97,227.841 1882.54,228.305 1883.1,228.914 1883.67,227.912 1884.24,228.114 1884.81,228.353 1885.38,228.89 1885.95,229.32 1886.51,230.476 1887.08,231.497 1887.65,231.548 1888.22,232.023 1888.79,234.072 1889.36,236.971 1889.92,238.721 1890.49,239.186 1891.06,238.556 1891.63,238.153 1892.2,237.59 1892.77,237.207 1893.33,238.74 1893.9,239.04 1894.47,238.582 1895.04,239.208 1895.61,238.747 1896.18,239.267 1896.74,239.423 1897.31,238.644 1897.88,236.211 1898.45,236.766 1899.02,233.179 1899.59,233.748 1900.16,235.476 1900.72,236.151 1901.29,235.62 1901.86,235.089 1902.43,236.783 1903,234.377 1903.57,236.09 1904.13,234.578 1904.7,235.425 1905.27,236.099 1905.84,234.724 1906.41,234.428 1906.98,234.088 1907.54,232.653 1908.11,231.412 1908.68,231.417 1909.25,232.275 1909.82,233.107 1910.39,230.773 1910.95,231.765 1911.52,231.607 1912.09,230.415 1912.66,227.326 1913.23,227.431 1913.8,229.431 1914.36,228.52 1914.93,228.404 1915.5,226.255 1916.07,227.462 1916.64,224.519 1917.21,223.006 1917.77,225.468 1918.34,225.701 1918.91,227.197 1919.48,228.518 1920.05,230.852 1920.62,229.509 1921.18,228.618 1921.75,229.928 1922.32,232.964 1922.89,233.905 1923.46,233.808 1924.03,233.658 1924.59,233.378 1925.16,232.233 1925.73,233.181 1926.3,233.073 1926.87,231.961 1927.44,232.935 1928,233.827 1928.57,233.651 1929.14,233.599 1929.71,233.314 1930.28,234.059 1930.85,232.669 1931.41,232.776 1931.98,232.469 1932.55,234.21 1933.12,230.762 1933.69,229.65 1934.26,227.479 1934.82,227.759 1935.39,228.903 1935.96,233.027 1936.53,234.046 1937.1,232.628 1937.67,232.214 1938.23,230.037 1938.8,228.961 1939.37,227.006 1939.94,227.142 1940.51,229.355 1941.08,231.506 1941.64,230.29 1942.21,230.108 1942.78,229.094 1943.35,229.212 1943.92,229.087 1944.49,229.145 1945.05,228.187 1945.62,229.317 1946.19,229.598 1946.76,228.721 1947.33,228.942 1947.9,229.013 1948.46,229.071 1949.03,230.265 1949.6,230.394 1950.17,231.219 1950.74,230.957 1951.31,232.068 1951.87,232.863 1952.44,232.807 1953.01,231.554 1953.58,230.28 1954.15,232.334 1954.72,232.557 1955.28,234.524 1955.85,235.255 1956.42,234.834 1956.99,232.471 1957.56,231.257 1958.13,233.205 1958.69,231.796 1959.26,233.656 1959.83,232.584 1960.4,232.374 1960.97,232.32 1961.54,231.948 1962.1,232.839 1962.67,233.77 1963.24,233.615 1963.81,233.285 1964.38,232.847 1964.95,232.457 1965.51,232.296 1966.08,230.082 1966.65,227.835 1967.22,228.944 1967.79,225.793 1968.36,228.246 1968.92,228.53 1969.49,227.763 1970.06,228.866 1970.63,228.891 1971.2,228.077 1971.77,228.452 1972.34,229.678 1972.9,228.729 1973.47,229.872 1974.04,229.904 1974.61,230.062 1975.18,230.347 1975.75,230.383 1976.31,230.428 1976.88,230.27 1977.45,230.322 1978.02,229.219 1978.59,229.387 1979.16,228.603 1979.72,227.536 1980.29,228.016 1980.86,228.211 1981.43,228.771 1982,228.814 1982.57,229.025 1983.13,228.38 1983.7,228.619 1984.27,228.844 1984.84,228.973 1985.41,229.1 1985.98,227.615 1986.54,227.943 1987.11,226.236 1987.68,227.685 1988.25,226.912 1988.82,226.091 1989.39,226.302 1989.95,229.004 1990.52,231.207 1991.09,230.275 1991.66,230.262 1992.23,229.354 1992.8,230.701 1993.36,230.934 1993.93,234.026 1994.5,231.769 1995.07,233.052 1995.64,232.96 1996.21,232.906 1996.77,231.931 1997.34,232.88 1997.91,232.909 1998.48,232.936 1999.05,232.878 1999.62,231.787 2000.18,230.828 2000.75,230.687 2001.32,229.723 2001.89,229.779 2002.46,229.908 2003.03,228.895 2003.59,231.17 2004.16,229.122 2004.73,231.424 2005.3,229.379 2005.87,227.451 2006.44,227.691 2007,226.773 2007.57,228.401 2008.14,227.631 2008.71,227.962 2009.28,228.503 2009.85,230.861 2010.41,230.083 2010.98,229.083 2011.55,229.357 2012.12,232.543 2012.69,232.413 2013.26,230.527 2013.82,229.704 2014.39,228.671 2014.96,230.059 2015.53,229.103 2016.1,229.397 2016.67,229.82 2017.23,229.077 2017.8,229.336 2018.37,228.404 2018.94,227.846 2019.51,227.1 2020.08,227.565 2020.64,229.088 2021.21,229.075 2021.78,229.526 2022.35,229.734 2022.92,227.696 2023.49,226.951 2024.05,225.385 2024.62,224.085 2025.19,226.93 2025.76,228.306 2026.33,228.381 2026.9,228.838 2027.46,227.978 2028.03,228.574 2028.6,228.076 2029.17,228.639 2029.74,228.113 2030.31,229.745 2030.87,229.856 2031.44,230.078 2032.01,231.411 2032.58,232.526 2033.15,232.427 2033.72,231.496 2034.28,232.735 2034.85,234.854 2035.42,234.75 2035.99,234.959 2036.56,233.896 2037.13,235.955 2037.69,234.935 2038.26,236.055 2038.83,233.823 2039.4,235.665 2039.97,235.721 2040.54,235.618 2041.11,236.494 2041.67,235.2 2042.24,234.106 2042.81,237.337 2043.38,236.863 2043.95,237.527 2044.52,237.045 2045.08,237.737 2045.65,235.368 2046.22,234.211 2046.79,234.966 2047.36,233.623 2047.93,232.512 2048.49,232.298 2049.06,233.237 2049.63,234.304 2050.2,235.123 2050.77,239.024 2051.34,238.4 2051.9,238.928 2052.47,239.435 2053.04,239.994 2053.61,239.379 2054.18,238.624 2054.75,238.912 2055.31,238.463 2055.88,241.108 2056.45,240.359 2057.02,237.668 2057.59,237.132 2058.16,237.752 2058.72,236.086 2059.29,235.694 2059.86,235.364 2060.43,234.943 2061,234.737 2061.57,234.347 2062.13,232.918 2062.7,231.626 2063.27,231.52 2063.84,229.27 2064.41,230.148 2064.98,229.908 2065.54,228.868 2066.11,229.883 2066.68,226.956 2067.25,229.203 2067.82,228.367 2068.39,228.457 2068.95,229.31 2069.52,229.384 2070.09,229.624 2070.66,229.643 2071.23,228.728 2071.8,227.843 2072.36,231.135 2072.93,229.929 2073.5,235.376 2074.07,233.798 2074.64,232.32 2075.21,234.36 2075.77,235.003 2076.34,234.745 2076.91,235.213 2077.48,233.509 2078.05,234.445 2078.62,234.091 2079.18,232.805 2079.75,232.501 2080.32,231.42 2080.89,231.097 2081.46,232.056 2082.03,232.745 2082.59,229.439 2083.16,231.314 2083.73,230.147 2084.3,231.214 2084.87,231.057 2085.44,231.943 2086,233.736 2086.57,231.582 2087.14,231.472 2087.71,231.271 2088.28,231.229 2088.85,230.06 2089.41,232.224 2089.98,233.141 2090.55,232.973 2091.12,231.741 2091.69,232.447 2092.26,233.338 2092.82,232.96 2093.39,231.664 2093.96,231.488 2094.53,231.547 2095.1,229.284 2095.67,228.335 2096.23,229.549 2096.8,230.557 2097.37,229.33 2097.94,229.469 2098.51,228.429 2099.08,228.645 2099.64,231.962 2100.21,231.842 2100.78,230.643 2101.35,230.443 2101.92,230.397 2102.49,231.379 2103.05,230.2 2103.62,229.291 2104.19,230.541 2104.76,230.694 2105.33,229.506 2105.9,230.443 2106.46,230.204 2107.03,230.221 2107.6,229.985 2108.17,228.047 2108.74,228.215 2109.31,228.364 2109.87,227.39 2110.44,226.71 2111.01,227.039 2111.58,228.348 2112.15,229.593 2112.72,228.365 2113.29,227.481 2113.85,228.878 2114.42,228.845 2114.99,227.87 2115.56,228.202 2116.13,229.192 2116.7,231.523 2117.26,230.374 2117.83,229.28 2118.4,228.331 2118.97,229.461 2119.54,230.758 2120.11,228.645 2120.67,230.823 2121.24,229.807 2121.81,228.913 2122.38,229.177 2122.95,229.341 2123.52,229.479 2124.08,229.649 2124.65,230.886 2125.22,228.719 2125.79,230.014 2126.36,230.213 2126.93,230.148 2127.49,231.261 2128.06,231.1 2128.63,231.06 2129.2,231.071 2129.77,231.411 2130.34,229.315 2130.9,230.427 2131.47,231.428 2132.04,231.483 2132.61,230.639 2133.18,231.753 2133.75,234.791 2134.31,233.62 2134.88,232.508 2135.45,233.454 2136.02,229.955 2136.59,231.989 2137.16,230.916 2137.72,231.965 2138.29,232.987 2138.86,231.744 2139.43,230.712 2140,229.818 2140.57,227.841 2141.13,228.05 2141.7,228.427 2142.27,230.581 2142.84,229.473 2143.41,230.684 2143.98,227.625 2144.54,226.918 2145.11,226.362 2145.68,225.678 2146.25,226.197 2146.82,226.408 2147.39,228.785 2147.95,228.134 2148.52,230.392 2149.09,229.397 2149.66,230.542 2150.23,230.349 2150.8,229.613 2151.36,228.705 2151.93,228.019 2152.5,229.28 2153.07,230.46 2153.64,230.625 2154.21,228.921 2154.77,229.211 2155.34,230.429 2155.91,232.628 2156.48,232.74 2157.05,233.567 2157.62,234.255 2158.18,234.073 2158.75,236.08 2159.32,235.866 2159.89,237.742 \"/>\n<path clip-path=\"url(#clip950)\" d=\"M1625.75 1245.03 L2150.8 1245.03 L2150.8 1089.51 L1625.75 1089.51  Z\" fill=\"#ffffff\" fill-rule=\"evenodd\" fill-opacity=\"1\"/>\n<polyline clip-path=\"url(#clip950)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"1625.75,1245.03 2150.8,1245.03 2150.8,1089.51 1625.75,1089.51 1625.75,1245.03 \"/>\n<polyline clip-path=\"url(#clip950)\" style=\"stroke:#e26f46; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" stroke-dasharray=\"16, 10\" points=\"1645.83,1141.35 1766.28,1141.35 \"/>\n<path clip-path=\"url(#clip950)\" d=\"M1793.76 1125.34 L1793.76 1132.71 L1802.53 1132.71 L1802.53 1136.02 L1793.76 1136.02 L1793.76 1150.09 Q1793.76 1153.26 1794.61 1154.16 Q1795.49 1155.07 1798.16 1155.07 L1802.53 1155.07 L1802.53 1158.63 L1798.16 1158.63 Q1793.23 1158.63 1791.35 1156.8 Q1789.48 1154.95 1789.48 1150.09 L1789.48 1136.02 L1786.35 1136.02 L1786.35 1132.71 L1789.48 1132.71 L1789.48 1125.34 L1793.76 1125.34 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip950)\" d=\"M1819.92 1145.6 Q1814.75 1145.6 1812.76 1146.78 Q1810.77 1147.96 1810.77 1150.81 Q1810.77 1153.08 1812.25 1154.42 Q1813.76 1155.74 1816.33 1155.74 Q1819.87 1155.74 1822 1153.24 Q1824.15 1150.72 1824.15 1146.55 L1824.15 1145.6 L1819.92 1145.6 M1828.41 1143.84 L1828.41 1158.63 L1824.15 1158.63 L1824.15 1154.7 Q1822.69 1157.06 1820.52 1158.19 Q1818.34 1159.3 1815.19 1159.3 Q1811.21 1159.3 1808.85 1157.08 Q1806.51 1154.84 1806.51 1151.09 Q1806.51 1146.71 1809.43 1144.49 Q1812.37 1142.27 1818.18 1142.27 L1824.15 1142.27 L1824.15 1141.85 Q1824.15 1138.91 1822.21 1137.31 Q1820.29 1135.69 1816.79 1135.69 Q1814.57 1135.69 1812.46 1136.22 Q1810.36 1136.76 1808.41 1137.82 L1808.41 1133.89 Q1810.75 1132.98 1812.95 1132.54 Q1815.15 1132.08 1817.23 1132.08 Q1822.86 1132.08 1825.63 1135 Q1828.41 1137.91 1828.41 1143.84 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip950)\" d=\"M1852.21 1136.69 Q1851.49 1136.27 1850.63 1136.09 Q1849.8 1135.88 1848.78 1135.88 Q1845.17 1135.88 1843.23 1138.24 Q1841.3 1140.58 1841.3 1144.97 L1841.3 1158.63 L1837.02 1158.63 L1837.02 1132.71 L1841.3 1132.71 L1841.3 1136.73 Q1842.65 1134.37 1844.8 1133.24 Q1846.95 1132.08 1850.03 1132.08 Q1850.47 1132.08 1851 1132.15 Q1851.54 1132.2 1852.18 1132.31 L1852.21 1136.69 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip950)\" d=\"M1872.9 1145.37 Q1872.9 1140.74 1870.98 1138.19 Q1869.08 1135.65 1865.63 1135.65 Q1862.21 1135.65 1860.29 1138.19 Q1858.39 1140.74 1858.39 1145.37 Q1858.39 1149.97 1860.29 1152.52 Q1862.21 1155.07 1865.63 1155.07 Q1869.08 1155.07 1870.98 1152.52 Q1872.9 1149.97 1872.9 1145.37 M1877.16 1155.41 Q1877.16 1162.03 1874.22 1165.25 Q1871.28 1168.49 1865.22 1168.49 Q1862.97 1168.49 1860.98 1168.15 Q1858.99 1167.82 1857.11 1167.13 L1857.11 1162.98 Q1858.99 1164 1860.82 1164.49 Q1862.65 1164.97 1864.54 1164.97 Q1868.73 1164.97 1870.82 1162.78 Q1872.9 1160.6 1872.9 1156.18 L1872.9 1154.07 Q1871.58 1156.36 1869.52 1157.5 Q1867.46 1158.63 1864.59 1158.63 Q1859.82 1158.63 1856.91 1155 Q1853.99 1151.36 1853.99 1145.37 Q1853.99 1139.35 1856.91 1135.72 Q1859.82 1132.08 1864.59 1132.08 Q1867.46 1132.08 1869.52 1133.22 Q1871.58 1134.35 1872.9 1136.64 L1872.9 1132.71 L1877.16 1132.71 L1877.16 1155.41 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip950)\" d=\"M1908.11 1144.6 L1908.11 1146.69 L1888.53 1146.69 Q1888.8 1151.09 1891.17 1153.4 Q1893.55 1155.69 1897.79 1155.69 Q1900.24 1155.69 1902.53 1155.09 Q1904.85 1154.49 1907.11 1153.28 L1907.11 1157.31 Q1904.82 1158.28 1902.42 1158.79 Q1900.01 1159.3 1897.53 1159.3 Q1891.33 1159.3 1887.69 1155.69 Q1884.08 1152.08 1884.08 1145.92 Q1884.08 1139.56 1887.51 1135.83 Q1890.96 1132.08 1896.79 1132.08 Q1902.02 1132.08 1905.05 1135.46 Q1908.11 1138.82 1908.11 1144.6 M1903.85 1143.35 Q1903.8 1139.86 1901.88 1137.78 Q1899.98 1135.69 1896.84 1135.69 Q1893.27 1135.69 1891.12 1137.71 Q1888.99 1139.72 1888.67 1143.38 L1903.85 1143.35 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip950)\" d=\"M1919.31 1125.34 L1919.31 1132.71 L1928.09 1132.71 L1928.09 1136.02 L1919.31 1136.02 L1919.31 1150.09 Q1919.31 1153.26 1920.17 1154.16 Q1921.05 1155.07 1923.71 1155.07 L1928.09 1155.07 L1928.09 1158.63 L1923.71 1158.63 Q1918.78 1158.63 1916.91 1156.8 Q1915.03 1154.95 1915.03 1150.09 L1915.03 1136.02 L1911.91 1136.02 L1911.91 1132.71 L1915.03 1132.71 L1915.03 1125.34 L1919.31 1125.34 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip950)\" d=\"M1953.39 1166.5 L1953.39 1169.81 L1928.76 1169.81 L1928.76 1166.5 L1953.39 1166.5 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip950)\" d=\"M1954.91 1132.71 L1959.17 1132.71 L1964.5 1152.94 L1969.8 1132.71 L1974.82 1132.71 L1980.15 1152.94 L1985.45 1132.71 L1989.71 1132.71 L1982.92 1158.63 L1977.9 1158.63 L1972.32 1137.38 L1966.72 1158.63 L1961.7 1158.63 L1954.91 1132.71 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip950)\" d=\"M2007.95 1145.6 Q2002.78 1145.6 2000.79 1146.78 Q1998.8 1147.96 1998.8 1150.81 Q1998.8 1153.08 2000.28 1154.42 Q2001.79 1155.74 2004.36 1155.74 Q2007.9 1155.74 2010.03 1153.24 Q2012.18 1150.72 2012.18 1146.55 L2012.18 1145.6 L2007.95 1145.6 M2016.44 1143.84 L2016.44 1158.63 L2012.18 1158.63 L2012.18 1154.7 Q2010.72 1157.06 2008.55 1158.19 Q2006.37 1159.3 2003.22 1159.3 Q1999.24 1159.3 1996.88 1157.08 Q1994.54 1154.84 1994.54 1151.09 Q1994.54 1146.71 1997.46 1144.49 Q2000.4 1142.27 2006.21 1142.27 L2012.18 1142.27 L2012.18 1141.85 Q2012.18 1138.91 2010.24 1137.31 Q2008.32 1135.69 2004.82 1135.69 Q2002.6 1135.69 2000.49 1136.22 Q1998.39 1136.76 1996.44 1137.82 L1996.44 1133.89 Q1998.78 1132.98 2000.98 1132.54 Q2003.18 1132.08 2005.26 1132.08 Q2010.89 1132.08 2013.66 1135 Q2016.44 1137.91 2016.44 1143.84 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip950)\" d=\"M2025.22 1122.61 L2029.47 1122.61 L2029.47 1158.63 L2025.22 1158.63 L2025.22 1122.61 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip950)\" d=\"M2038.22 1122.61 L2042.51 1122.61 L2042.51 1143.89 L2055.22 1132.71 L2060.65 1132.71 L2046.91 1144.84 L2061.23 1158.63 L2055.68 1158.63 L2042.51 1145.97 L2042.51 1158.63 L2038.22 1158.63 L2038.22 1122.61 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip950)\" d=\"M2086.33 1144.6 L2086.33 1146.69 L2066.74 1146.69 Q2067.02 1151.09 2069.38 1153.4 Q2071.77 1155.69 2076 1155.69 Q2078.46 1155.69 2080.75 1155.09 Q2083.06 1154.49 2085.33 1153.28 L2085.33 1157.31 Q2083.04 1158.28 2080.63 1158.79 Q2078.22 1159.3 2075.75 1159.3 Q2069.54 1159.3 2065.91 1155.69 Q2062.3 1152.08 2062.3 1145.92 Q2062.3 1139.56 2065.72 1135.83 Q2069.17 1132.08 2075.01 1132.08 Q2080.24 1132.08 2083.27 1135.46 Q2086.33 1138.82 2086.33 1144.6 M2082.07 1143.35 Q2082.02 1139.86 2080.1 1137.78 Q2078.2 1135.69 2075.05 1135.69 Q2071.49 1135.69 2069.34 1137.71 Q2067.21 1139.72 2066.88 1143.38 L2082.07 1143.35 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip950)\" d=\"M2108.34 1136.69 Q2107.62 1136.27 2106.77 1136.09 Q2105.93 1135.88 2104.91 1135.88 Q2101.3 1135.88 2099.36 1138.24 Q2097.44 1140.58 2097.44 1144.97 L2097.44 1158.63 L2093.15 1158.63 L2093.15 1132.71 L2097.44 1132.71 L2097.44 1136.73 Q2098.78 1134.37 2100.93 1133.24 Q2103.09 1132.08 2106.16 1132.08 Q2106.6 1132.08 2107.14 1132.15 Q2107.67 1132.2 2108.32 1132.31 L2108.34 1136.69 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip950)\" d=\"M2129.34 1133.47 L2129.34 1137.5 Q2127.53 1136.57 2125.59 1136.11 Q2123.64 1135.65 2121.56 1135.65 Q2118.39 1135.65 2116.79 1136.62 Q2115.21 1137.59 2115.21 1139.53 Q2115.21 1141.02 2116.35 1141.87 Q2117.48 1142.71 2120.91 1143.47 L2122.37 1143.79 Q2126.9 1144.77 2128.8 1146.55 Q2130.72 1148.31 2130.72 1151.48 Q2130.72 1155.09 2127.85 1157.2 Q2125.01 1159.3 2120.01 1159.3 Q2117.92 1159.3 2115.65 1158.89 Q2113.41 1158.49 2110.91 1157.68 L2110.91 1153.28 Q2113.27 1154.51 2115.56 1155.14 Q2117.85 1155.74 2120.1 1155.74 Q2123.11 1155.74 2124.73 1154.72 Q2126.35 1153.68 2126.35 1151.8 Q2126.35 1150.07 2125.17 1149.14 Q2124.01 1148.22 2120.05 1147.36 L2118.57 1147.01 Q2114.61 1146.18 2112.85 1144.47 Q2111.09 1142.73 2111.09 1139.72 Q2111.09 1136.06 2113.69 1134.07 Q2116.28 1132.08 2121.05 1132.08 Q2123.41 1132.08 2125.49 1132.43 Q2127.58 1132.78 2129.34 1133.47 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><polyline clip-path=\"url(#clip950)\" style=\"stroke:#009af9; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"1645.83,1193.19 1766.28,1193.19 \"/>\n<path clip-path=\"url(#clip950)\" d=\"M1808.06 1194.82 L1808.06 1210.47 L1803.8 1210.47 L1803.8 1194.96 Q1803.8 1191.28 1802.37 1189.45 Q1800.93 1187.62 1798.06 1187.62 Q1794.61 1187.62 1792.62 1189.82 Q1790.63 1192.02 1790.63 1195.82 L1790.63 1210.47 L1786.35 1210.47 L1786.35 1184.55 L1790.63 1184.55 L1790.63 1188.57 Q1792.16 1186.24 1794.22 1185.08 Q1796.3 1183.92 1799.01 1183.92 Q1803.48 1183.92 1805.77 1186.7 Q1808.06 1189.45 1808.06 1194.82 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip950)\" d=\"M1826.61 1187.53 Q1823.18 1187.53 1821.19 1190.22 Q1819.2 1192.88 1819.2 1197.53 Q1819.2 1202.18 1821.17 1204.87 Q1823.16 1207.53 1826.61 1207.53 Q1830.01 1207.53 1832 1204.85 Q1833.99 1202.16 1833.99 1197.53 Q1833.99 1192.93 1832 1190.24 Q1830.01 1187.53 1826.61 1187.53 M1826.61 1183.92 Q1832.16 1183.92 1835.33 1187.53 Q1838.5 1191.14 1838.5 1197.53 Q1838.5 1203.9 1835.33 1207.53 Q1832.16 1211.14 1826.61 1211.14 Q1821.03 1211.14 1817.86 1207.53 Q1814.71 1203.9 1814.71 1197.53 Q1814.71 1191.14 1817.86 1187.53 Q1821.03 1183.92 1826.61 1183.92 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip950)\" d=\"M1860.59 1188.53 Q1859.87 1188.11 1859.01 1187.93 Q1858.18 1187.72 1857.16 1187.72 Q1853.55 1187.72 1851.61 1190.08 Q1849.68 1192.42 1849.68 1196.81 L1849.68 1210.47 L1845.4 1210.47 L1845.4 1184.55 L1849.68 1184.55 L1849.68 1188.57 Q1851.03 1186.21 1853.18 1185.08 Q1855.33 1183.92 1858.41 1183.92 Q1858.85 1183.92 1859.38 1183.99 Q1859.92 1184.04 1860.56 1184.15 L1860.59 1188.53 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip950)\" d=\"M1884.41 1189.52 Q1886 1186.65 1888.23 1185.29 Q1890.45 1183.92 1893.46 1183.92 Q1897.51 1183.92 1899.71 1186.77 Q1901.91 1189.59 1901.91 1194.82 L1901.91 1210.47 L1897.62 1210.47 L1897.62 1194.96 Q1897.62 1191.24 1896.3 1189.43 Q1894.98 1187.62 1892.28 1187.62 Q1888.97 1187.62 1887.04 1189.82 Q1885.12 1192.02 1885.12 1195.82 L1885.12 1210.47 L1880.84 1210.47 L1880.84 1194.96 Q1880.84 1191.21 1879.52 1189.43 Q1878.2 1187.62 1875.45 1187.62 Q1872.18 1187.62 1870.26 1189.85 Q1868.34 1192.05 1868.34 1195.82 L1868.34 1210.47 L1864.06 1210.47 L1864.06 1184.55 L1868.34 1184.55 L1868.34 1188.57 Q1869.8 1186.19 1871.84 1185.06 Q1873.87 1183.92 1876.67 1183.92 Q1879.5 1183.92 1881.47 1185.36 Q1883.46 1186.79 1884.41 1189.52 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /></svg>\n","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"After an initial equilibriation period, the norm fluctuates around the target number of walkers.","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"Now, let's look at using the shift to estimate the ground state energy of H. The mean of the shift is a useful estimator of the energy. Calculating the error bars is a bit more involved as autocorrelations have to be removed from the time series. This can be done with the function shift_estimator, which performs a blocking analysis on the shift column of the dataframe.","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"se = shift_estimator(df; skip=steps_equilibrate)","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"BlockingResult{Float64}\n  mean = -4.032 ± 0.023\n  with uncertainty of ± 0.002086012310767969\n  from 62 blocks after 5 transformations (k = 6).\n","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"Here, se contains the calculated mean and standard errors of the shift, as well as some additional information related to the blocking analysis.","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"Computing the error of the projected energy is a bit more complicated, as it's a ratio of fluctuating variables contained in the hproj and vproj columns in the dataframe. Thankfully, the complications are handled by the function projected_energy.","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"pe = projected_energy(df; skip=steps_equilibrate)","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"RatioBlockingResult{Float64,MonteCarloMeasurements.Particles{Float64, 2000}}\n  ratio = -4.01481 ± (0.002053, 0.00206394) (MC)\n  95% confidence interval: [-4.01883, -4.01086] (MC)\n  linear error propagation: -4.01486 ± 0.00213222\n  |δ_y| = |0.00144445| (≤ 0.1 for normal approx)\n  Blocking successful with 31 blocks after 6 transformations (k = 7).\n","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"The result is a ratio distribution. We extract its median and the edges of the 95% confidence interval.","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"v = val_and_errs(pe; p=0.95)","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"(val = -4.014811632771364, val_l = 0.004015452785323781, val_u = 0.003953549016062041)","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"Let's visualise these estimators together with the time series of the shift.","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"plot(df.step, df.shift, ylabel=\"energy\", xlabel=\"step\", label=\"shift\", margin = 1Plots.cm)\n\nplot!(x->se.mean, df.step[steps_equilibrate+1:end], ribbon=se.err, label=\"shift mean\")\nplot!(\n    x -> v.val, df.step[steps_equilibrate+1:end], ribbon=(v.val_l,v.val_u),\n    label=\"projected energy\",\n)\nlens!([steps_equilibrate, last_step], [-5.1, -2.9]; inset=(1, bbox(0.2, 0.25, 0.6, 0.4)))","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"<?xml version=\"1.0\" encoding=\"utf-8\"?>\n<svg xmlns=\"http://www.w3.org/2000/svg\" xmlns:xlink=\"http://www.w3.org/1999/xlink\" width=\"600\" height=\"400\" viewBox=\"0 0 2400 1600\">\n<defs>\n  <clipPath id=\"clip980\">\n    <rect x=\"0\" y=\"0\" width=\"2400\" height=\"1600\"/>\n  </clipPath>\n</defs>\n<path clip-path=\"url(#clip980)\" d=\"M0 1600 L2400 1600 L2400 0 L0 0  Z\" fill=\"#ffffff\" fill-rule=\"evenodd\" fill-opacity=\"1\"/>\n<defs>\n  <clipPath id=\"clip981\">\n    <rect x=\"480\" y=\"0\" width=\"1681\" height=\"1600\"/>\n  </clipPath>\n</defs>\n<path clip-path=\"url(#clip980)\" d=\"M346.853 1281.45 L2211.02 1281.45 L2211.02 188.976 L346.853 188.976  Z\" fill=\"#ffffff\" fill-rule=\"evenodd\" fill-opacity=\"1\"/>\n<defs>\n  <clipPath id=\"clip982\">\n    <rect x=\"346\" y=\"188\" width=\"1865\" height=\"1093\"/>\n  </clipPath>\n</defs>\n<polyline clip-path=\"url(#clip982)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:2; stroke-opacity:0.1; fill:none\" points=\"399.026,1281.45 399.026,188.976 \"/>\n<polyline clip-path=\"url(#clip982)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:2; stroke-opacity:0.1; fill:none\" points=\"985.439,1281.45 985.439,188.976 \"/>\n<polyline clip-path=\"url(#clip982)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:2; stroke-opacity:0.1; fill:none\" points=\"1571.85,1281.45 1571.85,188.976 \"/>\n<polyline clip-path=\"url(#clip982)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:2; stroke-opacity:0.1; fill:none\" points=\"2158.26,1281.45 2158.26,188.976 \"/>\n<polyline clip-path=\"url(#clip982)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:2; stroke-opacity:0.1; fill:none\" points=\"346.853,1151.16 2211.02,1151.16 \"/>\n<polyline clip-path=\"url(#clip982)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:2; stroke-opacity:0.1; fill:none\" points=\"346.853,998.319 2211.02,998.319 \"/>\n<polyline clip-path=\"url(#clip982)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:2; stroke-opacity:0.1; fill:none\" points=\"346.853,845.477 2211.02,845.477 \"/>\n<polyline clip-path=\"url(#clip982)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:2; stroke-opacity:0.1; fill:none\" points=\"346.853,692.636 2211.02,692.636 \"/>\n<polyline clip-path=\"url(#clip982)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:2; stroke-opacity:0.1; fill:none\" points=\"346.853,539.795 2211.02,539.795 \"/>\n<polyline clip-path=\"url(#clip982)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:2; stroke-opacity:0.1; fill:none\" points=\"346.853,386.954 2211.02,386.954 \"/>\n<polyline clip-path=\"url(#clip982)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:2; stroke-opacity:0.1; fill:none\" points=\"346.853,234.113 2211.02,234.113 \"/>\n<polyline clip-path=\"url(#clip980)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"346.853,1281.45 2211.02,1281.45 \"/>\n<polyline clip-path=\"url(#clip980)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"399.026,1281.45 399.026,1262.55 \"/>\n<polyline clip-path=\"url(#clip980)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"985.439,1281.45 985.439,1262.55 \"/>\n<polyline clip-path=\"url(#clip980)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"1571.85,1281.45 1571.85,1262.55 \"/>\n<polyline clip-path=\"url(#clip980)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"2158.26,1281.45 2158.26,1262.55 \"/>\n<path clip-path=\"url(#clip980)\" d=\"M399.026 1312.37 Q395.415 1312.37 393.587 1315.93 Q391.781 1319.47 391.781 1326.6 Q391.781 1333.71 393.587 1337.27 Q395.415 1340.82 399.026 1340.82 Q402.661 1340.82 404.466 1337.27 Q406.295 1333.71 406.295 1326.6 Q406.295 1319.47 404.466 1315.93 Q402.661 1312.37 399.026 1312.37 M399.026 1308.66 Q404.837 1308.66 407.892 1313.27 Q410.971 1317.85 410.971 1326.6 Q410.971 1335.33 407.892 1339.94 Q404.837 1344.52 399.026 1344.52 Q393.216 1344.52 390.138 1339.94 Q387.082 1335.33 387.082 1326.6 Q387.082 1317.85 390.138 1313.27 Q393.216 1308.66 399.026 1308.66 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip980)\" d=\"M929.965 1339.91 L937.604 1339.91 L937.604 1313.55 L929.293 1315.21 L929.293 1310.95 L937.557 1309.29 L942.233 1309.29 L942.233 1339.91 L949.872 1339.91 L949.872 1343.85 L929.965 1343.85 L929.965 1339.91 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip980)\" d=\"M969.316 1312.37 Q965.705 1312.37 963.877 1315.93 Q962.071 1319.47 962.071 1326.6 Q962.071 1333.71 963.877 1337.27 Q965.705 1340.82 969.316 1340.82 Q972.951 1340.82 974.756 1337.27 Q976.585 1333.71 976.585 1326.6 Q976.585 1319.47 974.756 1315.93 Q972.951 1312.37 969.316 1312.37 M969.316 1308.66 Q975.127 1308.66 978.182 1313.27 Q981.261 1317.85 981.261 1326.6 Q981.261 1335.33 978.182 1339.94 Q975.127 1344.52 969.316 1344.52 Q963.506 1344.52 960.428 1339.94 Q957.372 1335.33 957.372 1326.6 Q957.372 1317.85 960.428 1313.27 Q963.506 1308.66 969.316 1308.66 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip980)\" d=\"M999.478 1312.37 Q995.867 1312.37 994.038 1315.93 Q992.233 1319.47 992.233 1326.6 Q992.233 1333.71 994.038 1337.27 Q995.867 1340.82 999.478 1340.82 Q1003.11 1340.82 1004.92 1337.27 Q1006.75 1333.71 1006.75 1326.6 Q1006.75 1319.47 1004.92 1315.93 Q1003.11 1312.37 999.478 1312.37 M999.478 1308.66 Q1005.29 1308.66 1008.34 1313.27 Q1011.42 1317.85 1011.42 1326.6 Q1011.42 1335.33 1008.34 1339.94 Q1005.29 1344.52 999.478 1344.52 Q993.668 1344.52 990.589 1339.94 Q987.534 1335.33 987.534 1326.6 Q987.534 1317.85 990.589 1313.27 Q993.668 1308.66 999.478 1308.66 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip980)\" d=\"M1029.64 1312.37 Q1026.03 1312.37 1024.2 1315.93 Q1022.39 1319.47 1022.39 1326.6 Q1022.39 1333.71 1024.2 1337.27 Q1026.03 1340.82 1029.64 1340.82 Q1033.27 1340.82 1035.08 1337.27 Q1036.91 1333.71 1036.91 1326.6 Q1036.91 1319.47 1035.08 1315.93 Q1033.27 1312.37 1029.64 1312.37 M1029.64 1308.66 Q1035.45 1308.66 1038.51 1313.27 Q1041.58 1317.85 1041.58 1326.6 Q1041.58 1335.33 1038.51 1339.94 Q1035.45 1344.52 1029.64 1344.52 Q1023.83 1344.52 1020.75 1339.94 Q1017.7 1335.33 1017.7 1326.6 Q1017.7 1317.85 1020.75 1313.27 Q1023.83 1308.66 1029.64 1308.66 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip980)\" d=\"M1520.46 1339.91 L1536.78 1339.91 L1536.78 1343.85 L1514.84 1343.85 L1514.84 1339.91 Q1517.5 1337.16 1522.08 1332.53 Q1526.69 1327.88 1527.87 1326.53 Q1530.12 1324.01 1531 1322.27 Q1531.9 1320.51 1531.9 1318.82 Q1531.9 1316.07 1529.95 1314.33 Q1528.03 1312.6 1524.93 1312.6 Q1522.73 1312.6 1520.28 1313.36 Q1517.85 1314.13 1515.07 1315.68 L1515.07 1310.95 Q1517.89 1309.82 1520.35 1309.24 Q1522.8 1308.66 1524.84 1308.66 Q1530.21 1308.66 1533.4 1311.35 Q1536.6 1314.03 1536.6 1318.52 Q1536.6 1320.65 1535.79 1322.57 Q1535 1324.47 1532.89 1327.07 Q1532.31 1327.74 1529.21 1330.95 Q1526.11 1334.15 1520.46 1339.91 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip980)\" d=\"M1556.6 1312.37 Q1552.99 1312.37 1551.16 1315.93 Q1549.35 1319.47 1549.35 1326.6 Q1549.35 1333.71 1551.16 1337.27 Q1552.99 1340.82 1556.6 1340.82 Q1560.23 1340.82 1562.04 1337.27 Q1563.87 1333.71 1563.87 1326.6 Q1563.87 1319.47 1562.04 1315.93 Q1560.23 1312.37 1556.6 1312.37 M1556.6 1308.66 Q1562.41 1308.66 1565.46 1313.27 Q1568.54 1317.85 1568.54 1326.6 Q1568.54 1335.33 1565.46 1339.94 Q1562.41 1344.52 1556.6 1344.52 Q1550.79 1344.52 1547.71 1339.94 Q1544.65 1335.33 1544.65 1326.6 Q1544.65 1317.85 1547.71 1313.27 Q1550.79 1308.66 1556.6 1308.66 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip980)\" d=\"M1586.76 1312.37 Q1583.15 1312.37 1581.32 1315.93 Q1579.51 1319.47 1579.51 1326.6 Q1579.51 1333.71 1581.32 1337.27 Q1583.15 1340.82 1586.76 1340.82 Q1590.39 1340.82 1592.2 1337.27 Q1594.03 1333.71 1594.03 1326.6 Q1594.03 1319.47 1592.2 1315.93 Q1590.39 1312.37 1586.76 1312.37 M1586.76 1308.66 Q1592.57 1308.66 1595.62 1313.27 Q1598.7 1317.85 1598.7 1326.6 Q1598.7 1335.33 1595.62 1339.94 Q1592.57 1344.52 1586.76 1344.52 Q1580.95 1344.52 1577.87 1339.94 Q1574.81 1335.33 1574.81 1326.6 Q1574.81 1317.85 1577.87 1313.27 Q1580.95 1308.66 1586.76 1308.66 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip980)\" d=\"M1616.92 1312.37 Q1613.31 1312.37 1611.48 1315.93 Q1609.68 1319.47 1609.68 1326.6 Q1609.68 1333.71 1611.48 1337.27 Q1613.31 1340.82 1616.92 1340.82 Q1620.55 1340.82 1622.36 1337.27 Q1624.19 1333.71 1624.19 1326.6 Q1624.19 1319.47 1622.36 1315.93 Q1620.55 1312.37 1616.92 1312.37 M1616.92 1308.66 Q1622.73 1308.66 1625.79 1313.27 Q1628.87 1317.85 1628.87 1326.6 Q1628.87 1335.33 1625.79 1339.94 Q1622.73 1344.52 1616.92 1344.52 Q1611.11 1344.52 1608.03 1339.94 Q1604.98 1335.33 1604.98 1326.6 Q1604.98 1317.85 1608.03 1313.27 Q1611.11 1308.66 1616.92 1308.66 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip980)\" d=\"M2116.94 1325.21 Q2120.3 1325.93 2122.18 1328.2 Q2124.07 1330.47 2124.07 1333.8 Q2124.07 1338.92 2120.56 1341.72 Q2117.04 1344.52 2110.56 1344.52 Q2108.38 1344.52 2106.07 1344.08 Q2103.77 1343.66 2101.32 1342.81 L2101.32 1338.29 Q2103.26 1339.43 2105.58 1340 Q2107.89 1340.58 2110.42 1340.58 Q2114.82 1340.58 2117.11 1338.85 Q2119.42 1337.11 2119.42 1333.8 Q2119.42 1330.75 2117.27 1329.03 Q2115.14 1327.3 2111.32 1327.3 L2107.29 1327.3 L2107.29 1323.45 L2111.51 1323.45 Q2114.95 1323.45 2116.78 1322.09 Q2118.61 1320.7 2118.61 1318.11 Q2118.61 1315.44 2116.71 1314.03 Q2114.84 1312.6 2111.32 1312.6 Q2109.4 1312.6 2107.2 1313.01 Q2105 1313.43 2102.36 1314.31 L2102.36 1310.14 Q2105.02 1309.4 2107.34 1309.03 Q2109.68 1308.66 2111.74 1308.66 Q2117.06 1308.66 2120.16 1311.09 Q2123.26 1313.5 2123.26 1317.62 Q2123.26 1320.49 2121.62 1322.48 Q2119.98 1324.45 2116.94 1325.21 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip980)\" d=\"M2142.94 1312.37 Q2139.33 1312.37 2137.5 1315.93 Q2135.69 1319.47 2135.69 1326.6 Q2135.69 1333.71 2137.5 1337.27 Q2139.33 1340.82 2142.94 1340.82 Q2146.57 1340.82 2148.38 1337.27 Q2150.21 1333.71 2150.21 1326.6 Q2150.21 1319.47 2148.38 1315.93 Q2146.57 1312.37 2142.94 1312.37 M2142.94 1308.66 Q2148.75 1308.66 2151.81 1313.27 Q2154.88 1317.85 2154.88 1326.6 Q2154.88 1335.33 2151.81 1339.94 Q2148.75 1344.52 2142.94 1344.52 Q2137.13 1344.52 2134.05 1339.94 Q2131 1335.33 2131 1326.6 Q2131 1317.85 2134.05 1313.27 Q2137.13 1308.66 2142.94 1308.66 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip980)\" d=\"M2173.1 1312.37 Q2169.49 1312.37 2167.66 1315.93 Q2165.86 1319.47 2165.86 1326.6 Q2165.86 1333.71 2167.66 1337.27 Q2169.49 1340.82 2173.1 1340.82 Q2176.74 1340.82 2178.54 1337.27 Q2180.37 1333.71 2180.37 1326.6 Q2180.37 1319.47 2178.54 1315.93 Q2176.74 1312.37 2173.1 1312.37 M2173.1 1308.66 Q2178.91 1308.66 2181.97 1313.27 Q2185.05 1317.85 2185.05 1326.6 Q2185.05 1335.33 2181.97 1339.94 Q2178.91 1344.52 2173.1 1344.52 Q2167.29 1344.52 2164.21 1339.94 Q2161.16 1335.33 2161.16 1326.6 Q2161.16 1317.85 2164.21 1313.27 Q2167.29 1308.66 2173.1 1308.66 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip980)\" d=\"M2203.26 1312.37 Q2199.65 1312.37 2197.82 1315.93 Q2196.02 1319.47 2196.02 1326.6 Q2196.02 1333.71 2197.82 1337.27 Q2199.65 1340.82 2203.26 1340.82 Q2206.9 1340.82 2208.7 1337.27 Q2210.53 1333.71 2210.53 1326.6 Q2210.53 1319.47 2208.7 1315.93 Q2206.9 1312.37 2203.26 1312.37 M2203.26 1308.66 Q2209.07 1308.66 2212.13 1313.27 Q2215.21 1317.85 2215.21 1326.6 Q2215.21 1335.33 2212.13 1339.94 Q2209.07 1344.52 2203.26 1344.52 Q2197.45 1344.52 2194.38 1339.94 Q2191.32 1335.33 2191.32 1326.6 Q2191.32 1317.85 2194.38 1313.27 Q2197.45 1308.66 2203.26 1308.66 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip980)\" d=\"M1237.32 1391.71 L1237.32 1397.25 Q1234.84 1395.98 1232.17 1395.34 Q1229.49 1394.71 1226.63 1394.71 Q1222.27 1394.71 1220.07 1396.04 Q1217.91 1397.38 1217.91 1400.05 Q1217.91 1402.09 1219.47 1403.27 Q1221.03 1404.41 1225.74 1405.46 L1227.74 1405.91 Q1233.98 1407.25 1236.59 1409.7 Q1239.23 1412.12 1239.23 1416.48 Q1239.23 1421.44 1235.29 1424.34 Q1231.37 1427.23 1224.5 1427.23 Q1221.63 1427.23 1218.51 1426.66 Q1215.42 1426.12 1211.99 1425.01 L1211.99 1418.96 Q1215.23 1420.65 1218.38 1421.51 Q1221.54 1422.33 1224.62 1422.33 Q1228.76 1422.33 1230.99 1420.93 Q1233.22 1419.5 1233.22 1416.92 Q1233.22 1414.54 1231.59 1413.26 Q1230 1411.99 1224.56 1410.81 L1222.52 1410.33 Q1217.08 1409.19 1214.66 1406.83 Q1212.24 1404.45 1212.24 1400.31 Q1212.24 1395.28 1215.81 1392.54 Q1219.37 1389.8 1225.93 1389.8 Q1229.17 1389.8 1232.04 1390.28 Q1234.9 1390.76 1237.32 1391.71 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip980)\" d=\"M1254.35 1380.54 L1254.35 1390.66 L1266.41 1390.66 L1266.41 1395.22 L1254.35 1395.22 L1254.35 1414.57 Q1254.35 1418.93 1255.53 1420.17 Q1256.74 1421.41 1260.4 1421.41 L1266.41 1421.41 L1266.41 1426.31 L1260.4 1426.31 Q1253.62 1426.31 1251.04 1423.8 Q1248.46 1421.25 1248.46 1414.57 L1248.46 1395.22 L1244.17 1395.22 L1244.17 1390.66 L1248.46 1390.66 L1248.46 1380.54 L1254.35 1380.54 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip980)\" d=\"M1304.61 1407.02 L1304.61 1409.89 L1277.68 1409.89 Q1278.06 1415.94 1281.31 1419.12 Q1284.59 1422.27 1290.41 1422.27 Q1293.79 1422.27 1296.94 1421.44 Q1300.12 1420.61 1303.24 1418.96 L1303.24 1424.5 Q1300.09 1425.83 1296.78 1426.53 Q1293.47 1427.23 1290.06 1427.23 Q1281.53 1427.23 1276.54 1422.27 Q1271.57 1417.3 1271.57 1408.84 Q1271.57 1400.08 1276.28 1394.96 Q1281.02 1389.8 1289.04 1389.8 Q1296.24 1389.8 1300.41 1394.45 Q1304.61 1399.07 1304.61 1407.02 M1298.75 1405.3 Q1298.69 1400.5 1296.05 1397.63 Q1293.44 1394.77 1289.11 1394.77 Q1284.21 1394.77 1281.25 1397.54 Q1278.32 1400.31 1277.87 1405.34 L1298.75 1405.3 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip980)\" d=\"M1319.89 1420.96 L1319.89 1439.87 L1314 1439.87 L1314 1390.66 L1319.89 1390.66 L1319.89 1396.07 Q1321.73 1392.89 1324.53 1391.36 Q1327.37 1389.8 1331.28 1389.8 Q1337.77 1389.8 1341.82 1394.96 Q1345.89 1400.12 1345.89 1408.52 Q1345.89 1416.92 1341.82 1422.08 Q1337.77 1427.23 1331.28 1427.23 Q1327.37 1427.23 1324.53 1425.71 Q1321.73 1424.15 1319.89 1420.96 M1339.81 1408.52 Q1339.81 1402.06 1337.14 1398.4 Q1334.5 1394.71 1329.85 1394.71 Q1325.2 1394.71 1322.53 1398.4 Q1319.89 1402.06 1319.89 1408.52 Q1319.89 1414.98 1322.53 1418.67 Q1325.2 1422.33 1329.85 1422.33 Q1334.5 1422.33 1337.14 1418.67 Q1339.81 1414.98 1339.81 1408.52 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><polyline clip-path=\"url(#clip980)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"346.853,1281.45 346.853,188.976 \"/>\n<polyline clip-path=\"url(#clip980)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"346.853,1151.16 365.751,1151.16 \"/>\n<polyline clip-path=\"url(#clip980)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"346.853,998.319 365.751,998.319 \"/>\n<polyline clip-path=\"url(#clip980)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"346.853,845.477 365.751,845.477 \"/>\n<polyline clip-path=\"url(#clip980)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"346.853,692.636 365.751,692.636 \"/>\n<polyline clip-path=\"url(#clip980)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"346.853,539.795 365.751,539.795 \"/>\n<polyline clip-path=\"url(#clip980)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"346.853,386.954 365.751,386.954 \"/>\n<polyline clip-path=\"url(#clip980)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"346.853,234.113 365.751,234.113 \"/>\n<path clip-path=\"url(#clip980)\" d=\"M298.909 1136.96 Q295.298 1136.96 293.469 1140.52 Q291.664 1144.06 291.664 1151.19 Q291.664 1158.3 293.469 1161.87 Q295.298 1165.41 298.909 1165.41 Q302.543 1165.41 304.349 1161.87 Q306.177 1158.3 306.177 1151.19 Q306.177 1144.06 304.349 1140.52 Q302.543 1136.96 298.909 1136.96 M298.909 1133.25 Q304.719 1133.25 307.775 1137.86 Q310.853 1142.44 310.853 1151.19 Q310.853 1159.92 307.775 1164.53 Q304.719 1169.11 298.909 1169.11 Q293.099 1169.11 290.02 1164.53 Q286.964 1159.92 286.964 1151.19 Q286.964 1142.44 290.02 1137.86 Q293.099 1133.25 298.909 1133.25 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip980)\" d=\"M259.557 1011.66 L267.196 1011.66 L267.196 985.298 L258.886 986.965 L258.886 982.705 L267.15 981.039 L271.826 981.039 L271.826 1011.66 L279.465 1011.66 L279.465 1015.6 L259.557 1015.6 L259.557 1011.66 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip980)\" d=\"M298.909 984.117 Q295.298 984.117 293.469 987.682 Q291.664 991.224 291.664 998.353 Q291.664 1005.46 293.469 1009.02 Q295.298 1012.57 298.909 1012.57 Q302.543 1012.57 304.349 1009.02 Q306.177 1005.46 306.177 998.353 Q306.177 991.224 304.349 987.682 Q302.543 984.117 298.909 984.117 M298.909 980.414 Q304.719 980.414 307.775 985.02 Q310.853 989.603 310.853 998.353 Q310.853 1007.08 307.775 1011.69 Q304.719 1016.27 298.909 1016.27 Q293.099 1016.27 290.02 1011.69 Q286.964 1007.08 286.964 998.353 Q286.964 989.603 290.02 985.02 Q293.099 980.414 298.909 980.414 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip980)\" d=\"M262.775 858.822 L279.094 858.822 L279.094 862.757 L257.15 862.757 L257.15 858.822 Q259.812 856.068 264.395 851.438 Q269.002 846.785 270.182 845.443 Q272.428 842.92 273.307 841.184 Q274.21 839.424 274.21 837.734 Q274.21 834.98 272.266 833.244 Q270.344 831.508 267.242 831.508 Q265.043 831.508 262.59 832.272 Q260.159 833.035 257.381 834.586 L257.381 829.864 Q260.205 828.73 262.659 828.151 Q265.113 827.572 267.15 827.572 Q272.52 827.572 275.715 830.258 Q278.909 832.943 278.909 837.434 Q278.909 839.563 278.099 841.484 Q277.312 843.383 275.205 845.975 Q274.627 846.646 271.525 849.864 Q268.423 853.058 262.775 858.822 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip980)\" d=\"M298.909 831.276 Q295.298 831.276 293.469 834.841 Q291.664 838.383 291.664 845.512 Q291.664 852.619 293.469 856.183 Q295.298 859.725 298.909 859.725 Q302.543 859.725 304.349 856.183 Q306.177 852.619 306.177 845.512 Q306.177 838.383 304.349 834.841 Q302.543 831.276 298.909 831.276 M298.909 827.572 Q304.719 827.572 307.775 832.179 Q310.853 836.762 310.853 845.512 Q310.853 854.239 307.775 858.845 Q304.719 863.429 298.909 863.429 Q293.099 863.429 290.02 858.845 Q286.964 854.239 286.964 845.512 Q286.964 836.762 290.02 832.179 Q293.099 827.572 298.909 827.572 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip980)\" d=\"M272.914 691.282 Q276.27 692 278.145 694.268 Q280.043 696.537 280.043 699.87 Q280.043 704.986 276.525 707.787 Q273.006 710.588 266.525 710.588 Q264.349 710.588 262.034 710.148 Q259.742 709.731 257.289 708.875 L257.289 704.361 Q259.233 705.495 261.548 706.074 Q263.863 706.652 266.386 706.652 Q270.784 706.652 273.076 704.916 Q275.39 703.18 275.39 699.87 Q275.39 696.815 273.238 695.102 Q271.108 693.366 267.289 693.366 L263.261 693.366 L263.261 689.523 L267.474 689.523 Q270.923 689.523 272.752 688.157 Q274.58 686.768 274.58 684.176 Q274.58 681.514 272.682 680.102 Q270.807 678.667 267.289 678.667 Q265.367 678.667 263.168 679.083 Q260.969 679.5 258.33 680.379 L258.33 676.213 Q260.992 675.472 263.307 675.102 Q265.645 674.731 267.705 674.731 Q273.029 674.731 276.131 677.162 Q279.233 679.569 279.233 683.69 Q279.233 686.56 277.59 688.551 Q275.946 690.518 272.914 691.282 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip980)\" d=\"M298.909 678.435 Q295.298 678.435 293.469 682 Q291.664 685.541 291.664 692.671 Q291.664 699.778 293.469 703.342 Q295.298 706.884 298.909 706.884 Q302.543 706.884 304.349 703.342 Q306.177 699.778 306.177 692.671 Q306.177 685.541 304.349 682 Q302.543 678.435 298.909 678.435 M298.909 674.731 Q304.719 674.731 307.775 679.338 Q310.853 683.921 310.853 692.671 Q310.853 701.398 307.775 706.004 Q304.719 710.588 298.909 710.588 Q293.099 710.588 290.02 706.004 Q286.964 701.398 286.964 692.671 Q286.964 683.921 290.02 679.338 Q293.099 674.731 298.909 674.731 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip980)\" d=\"M271.594 526.589 L259.789 545.038 L271.594 545.038 L271.594 526.589 M270.367 522.515 L276.247 522.515 L276.247 545.038 L281.177 545.038 L281.177 548.927 L276.247 548.927 L276.247 557.075 L271.594 557.075 L271.594 548.927 L255.992 548.927 L255.992 544.413 L270.367 522.515 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip980)\" d=\"M298.909 525.594 Q295.298 525.594 293.469 529.159 Q291.664 532.7 291.664 539.83 Q291.664 546.936 293.469 550.501 Q295.298 554.043 298.909 554.043 Q302.543 554.043 304.349 550.501 Q306.177 546.936 306.177 539.83 Q306.177 532.7 304.349 529.159 Q302.543 525.594 298.909 525.594 M298.909 521.89 Q304.719 521.89 307.775 526.497 Q310.853 531.08 310.853 539.83 Q310.853 548.557 307.775 553.163 Q304.719 557.746 298.909 557.746 Q293.099 557.746 290.02 553.163 Q286.964 548.557 286.964 539.83 Q286.964 531.08 290.02 526.497 Q293.099 521.89 298.909 521.89 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip980)\" d=\"M258.793 369.674 L277.15 369.674 L277.15 373.609 L263.076 373.609 L263.076 382.081 Q264.094 381.734 265.113 381.572 Q266.131 381.387 267.15 381.387 Q272.937 381.387 276.316 384.558 Q279.696 387.729 279.696 393.146 Q279.696 398.725 276.224 401.827 Q272.752 404.905 266.432 404.905 Q264.256 404.905 261.988 404.535 Q259.742 404.165 257.335 403.424 L257.335 398.725 Q259.418 399.859 261.641 400.415 Q263.863 400.97 266.34 400.97 Q270.344 400.97 272.682 398.864 Q275.02 396.757 275.02 393.146 Q275.02 389.535 272.682 387.429 Q270.344 385.322 266.34 385.322 Q264.465 385.322 262.59 385.739 Q260.738 386.155 258.793 387.035 L258.793 369.674 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip980)\" d=\"M298.909 372.753 Q295.298 372.753 293.469 376.318 Q291.664 379.859 291.664 386.989 Q291.664 394.095 293.469 397.66 Q295.298 401.202 298.909 401.202 Q302.543 401.202 304.349 397.66 Q306.177 394.095 306.177 386.989 Q306.177 379.859 304.349 376.318 Q302.543 372.753 298.909 372.753 M298.909 369.049 Q304.719 369.049 307.775 373.655 Q310.853 378.239 310.853 386.989 Q310.853 395.716 307.775 400.322 Q304.719 404.905 298.909 404.905 Q293.099 404.905 290.02 400.322 Q286.964 395.716 286.964 386.989 Q286.964 378.239 290.02 373.655 Q293.099 369.049 298.909 369.049 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip980)\" d=\"M269.326 232.249 Q266.178 232.249 264.326 234.402 Q262.497 236.555 262.497 240.305 Q262.497 244.032 264.326 246.208 Q266.178 248.36 269.326 248.36 Q272.474 248.36 274.303 246.208 Q276.154 244.032 276.154 240.305 Q276.154 236.555 274.303 234.402 Q272.474 232.249 269.326 232.249 M278.608 217.597 L278.608 221.856 Q276.849 221.023 275.043 220.583 Q273.261 220.143 271.502 220.143 Q266.872 220.143 264.418 223.268 Q261.988 226.393 261.641 232.712 Q263.006 230.699 265.066 229.634 Q267.127 228.546 269.603 228.546 Q274.812 228.546 277.821 231.717 Q280.853 234.865 280.853 240.305 Q280.853 245.629 277.705 248.847 Q274.557 252.064 269.326 252.064 Q263.33 252.064 260.159 247.481 Q256.988 242.874 256.988 234.148 Q256.988 225.953 260.877 221.092 Q264.766 216.208 271.316 216.208 Q273.076 216.208 274.858 216.555 Q276.664 216.902 278.608 217.597 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip980)\" d=\"M298.909 219.912 Q295.298 219.912 293.469 223.476 Q291.664 227.018 291.664 234.148 Q291.664 241.254 293.469 244.819 Q295.298 248.36 298.909 248.36 Q302.543 248.36 304.349 244.819 Q306.177 241.254 306.177 234.148 Q306.177 227.018 304.349 223.476 Q302.543 219.912 298.909 219.912 M298.909 216.208 Q304.719 216.208 307.775 220.814 Q310.853 225.398 310.853 234.148 Q310.853 242.874 307.775 247.481 Q304.719 252.064 298.909 252.064 Q293.099 252.064 290.02 247.481 Q286.964 242.874 286.964 234.148 Q286.964 225.398 290.02 220.814 Q293.099 216.208 298.909 216.208 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip980)\" d=\"M186.448 812.969 L189.313 812.969 L189.313 839.896 Q195.36 839.514 198.543 836.268 Q201.694 832.989 201.694 827.165 Q201.694 823.791 200.867 820.64 Q200.039 817.457 198.384 814.338 L203.922 814.338 Q205.259 817.489 205.959 820.799 Q206.659 824.109 206.659 827.515 Q206.659 836.045 201.694 841.042 Q196.729 846.007 188.263 846.007 Q179.51 846.007 174.385 841.296 Q169.229 836.554 169.229 828.533 Q169.229 821.34 173.876 817.17 Q178.491 812.969 186.448 812.969 M184.73 818.826 Q179.924 818.889 177.059 821.531 Q174.194 824.141 174.194 828.47 Q174.194 833.371 176.963 836.331 Q179.733 839.259 184.761 839.705 L184.73 818.826 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip980)\" d=\"M184.22 773.724 L205.736 773.724 L205.736 779.581 L184.411 779.581 Q179.351 779.581 176.836 781.554 Q174.322 783.528 174.322 787.474 Q174.322 792.217 177.345 794.954 Q180.369 797.691 185.589 797.691 L205.736 797.691 L205.736 803.58 L170.088 803.58 L170.088 797.691 L175.627 797.691 Q172.412 795.591 170.821 792.758 Q169.229 789.893 169.229 786.169 Q169.229 780.027 173.049 776.876 Q176.836 773.724 184.22 773.724 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip980)\" d=\"M186.448 731.552 L189.313 731.552 L189.313 758.479 Q195.36 758.097 198.543 754.85 Q201.694 751.572 201.694 745.747 Q201.694 742.373 200.867 739.222 Q200.039 736.04 198.384 732.92 L203.922 732.92 Q205.259 736.071 205.959 739.382 Q206.659 742.692 206.659 746.097 Q206.659 754.627 201.694 759.624 Q196.729 764.59 188.263 764.59 Q179.51 764.59 174.385 759.879 Q169.229 755.137 169.229 747.116 Q169.229 739.923 173.876 735.753 Q178.491 731.552 186.448 731.552 M184.73 737.408 Q179.924 737.472 177.059 740.114 Q174.194 742.724 174.194 747.052 Q174.194 751.954 176.963 754.914 Q179.733 757.842 184.761 758.288 L184.73 737.408 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip980)\" d=\"M175.563 701.283 Q174.99 702.269 174.735 703.447 Q174.449 704.593 174.449 705.993 Q174.449 710.959 177.696 713.632 Q180.91 716.274 186.958 716.274 L205.736 716.274 L205.736 722.162 L170.088 722.162 L170.088 716.274 L175.627 716.274 Q172.38 714.428 170.821 711.468 Q169.229 708.508 169.229 704.275 Q169.229 703.67 169.325 702.938 Q169.388 702.206 169.547 701.315 L175.563 701.283 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip980)\" d=\"M187.499 672.828 Q181.133 672.828 177.632 675.47 Q174.131 678.08 174.131 682.822 Q174.131 687.533 177.632 690.175 Q181.133 692.785 187.499 692.785 Q193.833 692.785 197.334 690.175 Q200.835 687.533 200.835 682.822 Q200.835 678.08 197.334 675.47 Q193.833 672.828 187.499 672.828 M201.312 666.972 Q210.415 666.972 214.839 671.014 Q219.295 675.056 219.295 683.395 Q219.295 686.482 218.818 689.22 Q218.372 691.957 217.418 694.535 L211.72 694.535 Q213.121 691.957 213.789 689.443 Q214.457 686.928 214.457 684.318 Q214.457 678.557 211.434 675.693 Q208.442 672.828 202.363 672.828 L199.466 672.828 Q202.617 674.642 204.177 677.475 Q205.736 680.308 205.736 684.254 Q205.736 690.811 200.739 694.822 Q195.742 698.832 187.499 698.832 Q179.223 698.832 174.226 694.822 Q169.229 690.811 169.229 684.254 Q169.229 680.308 170.789 677.475 Q172.348 674.642 175.499 672.828 L170.088 672.828 L170.088 666.972 L201.312 666.972 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip980)\" d=\"M209.047 640.076 Q215.412 642.559 217.354 644.914 Q219.295 647.27 219.295 651.216 L219.295 655.895 L214.394 655.895 L214.394 652.458 Q214.394 650.039 213.248 648.702 Q212.102 647.365 207.837 645.742 L205.164 644.692 L170.088 659.11 L170.088 652.903 L197.97 641.763 L170.088 630.623 L170.088 624.417 L209.047 640.076 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><polyline clip-path=\"url(#clip982)\" style=\"stroke:#009af9; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"399.613,1038.54 400.199,935.081 400.786,840.151 401.372,972.085 401.958,879.867 402.545,795.354 403.131,718.034 403.718,649.153 404.304,584.56 404.891,528.951 405.477,476.832 406.063,429.783 406.65,387.478 407.236,350.977 407.823,317.178 408.409,287.262 408.995,320.292 409.582,293.252 410.168,270.95 410.755,250.389 411.341,234.196 411.927,219.895 412.514,247.919 413.1,273.583 413.687,262.706 414.273,253.879 414.86,247.583 415.446,271.678 416.032,268.978 416.619,267.907 417.205,314.28 417.792,314.989 418.378,316.344 418.964,319.221 419.551,341.668 420.137,345.879 420.724,350.75 421.31,371.975 421.896,393.004 422.483,399.648 423.069,408.079 423.656,416.039 424.242,425.313 424.829,434.88 425.415,445.232 426.001,455.605 426.588,466.409 427.174,503.76 427.761,531.91 428.347,543.689 428.933,570.599 429.52,590.097 430.106,608.641 430.693,639.394 431.279,655.672 431.865,671.559 432.452,687.161 433.038,707.45 433.625,721.755 434.211,745.023 434.798,753.908 435.384,772.066 435.97,784.965 436.557,801.273 437.143,809.394 437.73,817.259 438.316,832.669 438.902,848.096 439.489,862.921 440.075,873.482 440.662,886.856 441.248,896.722 441.835,906.284 442.421,921.798 443.007,927.199 443.594,938.83 444.18,950.175 444.767,958.307 445.353,971.777 445.939,981.95 446.526,988.791 447.112,995.79 447.699,1002.75 448.285,1009.72 448.871,1018.66 449.458,1025.02 450.044,1033.89 450.631,1037.6 451.217,1041.6 451.804,1048.09 452.39,1058.66 452.976,1064.49 453.563,1070.25 454.149,1080.13 454.736,1085.13 455.322,1090.29 455.908,1095.28 456.495,1100.17 457.081,1104.85 457.668,1109.48 458.254,1115.93 458.84,1120.12 459.427,1122.47 460.013,1124.76 460.6,1130.7 461.186,1134.97 461.773,1138.73 462.359,1142.53 462.945,1146.1 463.532,1151.27 464.118,1155.93 464.705,1164.27 465.291,1167.11 465.877,1171.37 466.464,1170.65 467.05,1171.69 467.637,1174.33 468.223,1177.4 468.809,1180.09 469.396,1184.54 469.982,1187.04 470.569,1190.34 471.155,1190.85 471.742,1191.52 472.328,1193.68 472.914,1197.34 473.501,1199.43 474.087,1202.96 474.674,1203.27 475.26,1206.52 475.846,1209.69 476.433,1211.5 477.019,1211.57 477.606,1212.01 478.192,1213.95 478.778,1211.24 479.365,1212.77 479.951,1217.39 480.538,1220.45 481.124,1227.57 481.711,1230.01 482.297,1232.48 482.883,1234.39 483.47,1233.82 484.056,1233.41 484.643,1232.8 485.229,1237.94 485.815,1237.31 486.402,1238.02 486.988,1240.02 487.575,1240.6 488.161,1239.85 488.748,1241.76 489.334,1242.11 489.92,1242.68 490.507,1244.67 491.093,1244.88 491.68,1239.91 492.266,1240.44 492.852,1243.61 493.439,1241.27 494.025,1241.83 494.612,1243.84 495.198,1242.99 495.784,1243.5 496.371,1239.9 496.957,1237.81 497.544,1238.44 498.13,1238.1 498.717,1237.78 499.303,1237.3 499.889,1238.21 500.476,1237.89 501.062,1238.87 501.649,1241.03 502.235,1240.36 502.821,1239.85 503.408,1239.2 503.994,1238.62 504.581,1238.37 505.167,1240.5 505.753,1240.22 506.34,1241.12 506.926,1244.58 507.513,1244.2 508.099,1243.54 508.686,1244.2 509.272,1243.45 509.858,1245.14 510.445,1241.74 511.031,1241.3 511.618,1242.21 512.204,1239.18 512.79,1238.69 513.377,1240.8 513.963,1240.51 514.55,1240.06 515.136,1242.11 515.722,1243.26 516.309,1245.48 516.895,1244.81 517.482,1241.62 518.068,1239.77 518.655,1237.04 519.241,1239.25 519.827,1238.71 520.414,1237.07 521,1234.15 521.587,1232.91 522.173,1233.03 522.759,1230.22 523.346,1230.59 523.932,1226.74 524.519,1228.44 525.105,1228.39 525.691,1227.35 526.278,1230.43 526.864,1231.83 527.451,1231.67 528.037,1235.73 528.624,1238.07 529.21,1236.5 529.796,1238.43 530.383,1239.28 530.969,1240.28 531.556,1239.94 532.142,1240.73 532.728,1244.33 533.315,1242.23 533.901,1241.45 534.488,1242.31 535.074,1246.44 535.661,1244.49 536.247,1244.02 536.833,1247.3 537.42,1247.79 538.006,1248.44 538.593,1248.83 539.179,1249.18 539.765,1249.83 540.352,1247.7 540.938,1250.53 541.525,1249.42 542.111,1245.86 542.697,1242.81 543.284,1242.32 543.87,1241.99 544.457,1241.42 545.043,1242.39 545.63,1242.93 546.216,1242.3 546.802,1241.79 547.389,1241.14 547.975,1242.16 548.562,1241.9 549.148,1241.36 549.734,1242.16 550.321,1244.06 550.907,1247.18 551.494,1246.08 552.08,1243.89 552.666,1244.2 553.253,1244.42 553.839,1246.15 554.426,1245.29 555.012,1243.49 555.599,1244.12 556.185,1244.73 556.771,1243.94 557.358,1241.97 557.944,1238.7 558.531,1236.76 559.117,1237.78 559.703,1236.03 560.29,1232.95 560.876,1230.36 561.463,1229.02 562.049,1226.46 562.635,1225.3 563.222,1227.83 563.808,1228.04 564.395,1230.24 564.981,1228.52 565.568,1226.1 566.154,1226.24 566.74,1226.31 567.327,1229.08 567.913,1228.98 568.5,1229.19 569.086,1234.15 569.672,1232.61 570.259,1232.43 570.845,1236.22 571.432,1235.61 572.018,1233.76 572.605,1232.19 573.191,1230.63 573.777,1229.3 574.364,1232.98 574.95,1232.41 575.537,1232.38 576.123,1232.15 576.709,1234.41 577.296,1235.46 577.882,1238.56 578.469,1236.66 579.055,1236.12 579.641,1235.49 580.228,1233.7 580.814,1234.61 581.401,1234.19 581.987,1232.57 582.574,1231.1 583.16,1230.95 583.746,1228.3 584.333,1231.85 584.919,1231.68 585.506,1232.65 586.092,1233.57 586.678,1233.05 587.265,1231.57 587.851,1231.16 588.438,1232.18 589.024,1238.13 589.61,1237.61 590.197,1237.12 590.783,1237.51 591.37,1235.48 591.956,1235.88 592.543,1237.55 593.129,1236.91 593.715,1236.37 594.302,1233.18 594.888,1232.56 595.475,1232.13 596.061,1231.62 596.647,1231.19 597.234,1229.56 597.82,1230.49 598.407,1231.53 598.993,1230.95 599.579,1230.69 600.166,1230.49 600.752,1232.81 601.339,1231.21 601.925,1233.41 602.512,1231.89 603.098,1230.25 603.684,1228.87 604.271,1227.43 604.857,1226.07 605.444,1223.51 606.03,1223.7 606.616,1222.45 607.203,1222.52 607.789,1223.52 608.376,1224.9 608.962,1224.9 609.548,1224.86 610.135,1227.21 610.721,1228.59 611.308,1229.49 611.894,1228.89 612.481,1230.18 613.067,1233.22 613.653,1231.47 614.24,1231.12 614.826,1230.8 615.413,1231.93 615.999,1231.5 616.585,1232.55 617.172,1230.79 617.758,1230.54 618.345,1233.89 618.931,1232.1 619.518,1232.94 620.104,1232.24 620.69,1231.74 621.277,1232.28 621.863,1235.19 622.45,1234.63 623.036,1233.88 623.622,1234.49 624.209,1236.16 624.795,1234.27 625.382,1233.6 625.968,1230.32 626.554,1232.08 627.141,1230.36 627.727,1229.71 628.314,1230.66 628.9,1228.94 629.487,1228.68 630.073,1231.97 630.659,1231.41 631.246,1233.35 631.832,1230.37 632.419,1229.87 633.005,1228.08 633.591,1227.55 634.178,1223.49 634.764,1225.89 635.351,1225.65 635.937,1226.87 636.523,1226.5 637.11,1224.8 637.696,1224.38 638.283,1225.46 638.869,1226.44 639.456,1224.86 640.042,1223.14 640.628,1225.69 641.215,1224.19 641.801,1224.13 642.388,1225.03 642.974,1227.47 643.56,1228.37 644.147,1229.38 644.733,1228.83 645.32,1226.1 645.906,1225.92 646.492,1225.43 647.079,1227.79 647.665,1228.85 648.252,1228.31 648.838,1226.8 649.425,1226.35 650.011,1226.29 650.597,1223.61 651.184,1224.45 651.77,1224.31 652.357,1222.74 652.943,1223.9 653.529,1223.63 654.116,1223.29 654.702,1219.21 655.289,1219.34 655.875,1220.47 656.462,1220.69 657.048,1220.59 657.634,1220.49 658.221,1218.03 658.807,1217.18 659.394,1216.19 659.98,1218.68 660.566,1218.78 661.153,1219.88 661.739,1219.95 662.326,1217.3 662.912,1215.09 663.498,1216.34 664.085,1215.3 664.671,1214.44 665.258,1215.43 665.844,1214.37 666.431,1217.03 667.017,1217.17 667.603,1218.32 668.19,1217.1 668.776,1218.41 669.363,1218.47 669.949,1218.85 670.535,1220.23 671.122,1219.08 671.708,1219.14 672.295,1222.85 672.881,1222.61 673.467,1222.39 674.054,1220.68 674.64,1221.59 675.227,1220.35 675.813,1217.81 676.4,1220.25 676.986,1222.55 677.572,1223.49 678.159,1223.29 678.745,1224.1 679.332,1225.2 679.918,1224.63 680.504,1224.14 681.091,1223.57 681.677,1225.77 682.264,1225.43 682.85,1224.03 683.436,1222.63 684.023,1221.27 684.609,1221.21 685.196,1218.59 685.782,1218.33 686.369,1218.15 686.955,1219.23 687.541,1221.67 688.128,1220.11 688.714,1221 689.301,1219.56 689.887,1218.54 690.473,1219.75 691.06,1218.57 691.646,1219.63 692.233,1217.09 692.819,1216.11 693.405,1213.58 693.992,1211.44 694.578,1209.55 695.165,1211.28 695.751,1209.23 696.338,1208.61 696.924,1207.99 697.51,1212.68 698.097,1214.22 698.683,1214.63 699.27,1214.95 699.856,1217.57 700.442,1218.96 701.029,1218.88 701.615,1218.88 702.202,1216.56 702.788,1214.21 703.375,1215.77 703.961,1217.05 704.547,1218.25 705.134,1219.64 705.72,1219.74 706.307,1219.73 706.893,1218.46 707.479,1217.19 708.066,1217.29 708.652,1217.51 709.239,1220.17 709.825,1219.93 710.411,1219.95 710.998,1219.82 711.584,1218.46 712.171,1219.61 712.757,1221 713.344,1218.14 713.93,1217.32 714.516,1218.68 715.103,1218.64 715.689,1219.94 716.276,1219.79 716.862,1219.64 717.448,1219.49 718.035,1219.18 718.621,1221.68 719.208,1224.18 719.794,1224.89 720.38,1225.56 720.967,1224.05 721.553,1223.97 722.14,1221.36 722.726,1219.94 723.313,1219.62 723.899,1219.35 724.485,1216.9 725.072,1215.75 725.658,1216.93 726.245,1220.64 726.831,1220.59 727.417,1222.92 728.004,1222.79 728.59,1220.34 729.177,1220.19 729.763,1218.75 730.349,1218.72 730.936,1220.02 731.522,1221.2 732.109,1228.27 732.695,1227.57 733.282,1230.79 733.868,1230.23 734.454,1229.33 735.041,1228.63 735.627,1226.58 736.214,1226.14 736.8,1224.31 737.386,1223.79 737.973,1225.88 738.559,1225.52 739.146,1228.82 739.732,1227.05 740.318,1226.5 740.905,1223.55 741.491,1221.92 742.078,1220.45 742.664,1218.91 743.251,1218.69 743.837,1219.88 744.423,1217.14 745.01,1218.33 745.596,1219.25 746.183,1216.59 746.769,1216.71 747.355,1219.14 747.942,1220.37 748.528,1219.07 749.115,1217.99 749.701,1216.51 750.288,1215.1 750.874,1215.22 751.46,1211.42 752.047,1212.95 752.633,1211.57 753.22,1212.97 753.806,1212.91 754.392,1215.57 754.979,1216.86 755.565,1215.71 756.152,1218.47 756.738,1216.98 757.324,1215.5 757.911,1217.77 758.497,1217.61 759.084,1217.38 759.67,1218.48 760.257,1216.96 760.843,1218.17 761.429,1217.93 762.016,1216.5 762.602,1216.26 763.189,1214.97 763.775,1217.66 764.361,1217.74 764.948,1217.98 765.534,1216.61 766.121,1217.98 766.707,1220.45 767.293,1216.37 767.88,1217.46 768.466,1215.92 769.053,1215.71 769.639,1217.15 770.226,1219.66 770.812,1220.57 771.398,1223.95 771.985,1222.16 772.571,1221.78 773.158,1223.91 773.744,1225.78 774.33,1225.56 774.917,1223.98 775.503,1224.73 776.09,1221.94 776.676,1221.85 777.262,1219.93 777.849,1218.72 778.435,1219.93 779.022,1222.16 779.608,1220.66 780.195,1220.28 780.781,1220.05 781.367,1217.15 781.954,1215.79 782.54,1214.29 783.127,1216.79 783.713,1216.77 784.299,1214.26 784.886,1215.74 785.472,1212.89 786.059,1211.77 786.645,1212.03 787.232,1212.3 787.818,1212.76 788.404,1212.95 788.991,1212.01 789.577,1209.62 790.164,1209.98 790.75,1211.47 791.336,1214.33 791.923,1211.76 792.509,1211.86 793.096,1213.56 793.682,1212.34 794.268,1212.38 794.855,1212.64 795.441,1215.28 796.028,1216.27 796.614,1217.45 797.201,1217.33 797.787,1217.16 798.373,1215.71 798.96,1215.96 799.546,1214.64 800.133,1214.58 800.719,1214.54 801.305,1215.97 801.892,1217.09 802.478,1218.39 803.065,1219.37 803.651,1219 804.237,1217.14 804.824,1219.62 805.41,1218.23 805.997,1218.23 806.583,1219.27 807.17,1221.78 807.756,1222.71 808.342,1223.31 808.929,1222.61 809.515,1222.32 810.102,1222.03 810.688,1221.62 811.274,1219.36 811.861,1219.16 812.447,1219.99 813.034,1221 813.62,1219.49 814.206,1219.32 814.793,1218.94 815.379,1218.86 815.966,1217.61 816.552,1217.28 817.139,1218.3 817.725,1219.45 818.311,1220.35 818.898,1219.12 819.484,1218.82 820.071,1218.38 820.657,1218.19 821.243,1218.08 821.83,1217.74 822.416,1217.72 823.003,1215.15 823.589,1214.83 824.175,1217.2 824.762,1215.73 825.348,1213.17 825.935,1213.16 826.521,1210.8 827.108,1211.09 827.694,1212.57 828.28,1212.8 828.867,1212.75 829.453,1211.47 830.04,1209.43 830.626,1208.49 831.212,1206.58 831.799,1208.31 832.385,1209.69 832.972,1211.19 833.558,1212.66 834.145,1215.37 834.731,1216.65 835.317,1214.2 835.904,1214.1 836.49,1215.23 837.077,1217.47 837.663,1217.48 838.249,1216.31 838.836,1216.27 839.422,1217.55 840.009,1217.6 840.595,1218.69 841.181,1218.19 841.768,1218.01 842.354,1216.35 842.941,1217.57 843.527,1218.8 844.114,1219.82 844.7,1219.54 845.286,1219.26 845.873,1216.62 846.459,1219.09 847.046,1218.76 847.632,1221.13 848.218,1220.91 848.805,1219.49 849.391,1217.89 849.978,1217.9 850.564,1215.4 851.15,1215.3 851.737,1216.53 852.323,1217.42 852.91,1216.06 853.496,1214.65 854.083,1215.88 854.669,1218.04 855.255,1219.08 855.842,1218.96 856.428,1217.62 857.015,1213.73 857.601,1214.14 858.187,1213.06 858.774,1211.84 859.36,1208.33 859.947,1207.59 860.533,1207.99 861.119,1207.21 861.706,1208.78 862.292,1210.16 862.879,1206.86 863.465,1206.05 864.052,1205.3 864.638,1204.47 865.224,1206.28 865.811,1205.29 866.397,1205.88 866.984,1205.08 867.57,1204.4 868.156,1206.28 868.743,1209.12 869.329,1208.17 869.916,1209.78 870.502,1212.59 871.089,1210.12 871.675,1211.76 872.261,1212.09 872.848,1214.89 873.434,1218.46 874.021,1219.51 874.607,1220.43 875.193,1221.3 875.78,1219.67 876.366,1220.63 876.953,1221.55 877.539,1221.21 878.125,1220.88 878.712,1218.34 879.298,1218.12 879.885,1220.33 880.471,1218.84 881.058,1219.75 881.644,1218.2 882.23,1218.1 882.817,1218.95 883.403,1217.4 883.99,1217.2 884.576,1215.78 885.162,1211.95 885.749,1212.05 886.335,1208.41 886.922,1210.15 887.508,1211.21 888.094,1212.44 888.681,1212.43 889.267,1211.17 889.854,1211.33 890.44,1214.93 891.027,1215.94 891.613,1215.9 892.199,1216.96 892.786,1216.75 893.372,1214.08 893.959,1214.25 894.545,1213.07 895.131,1211.92 895.718,1212.16 896.304,1212.29 896.891,1210 897.477,1208.84 898.063,1209.16 898.65,1209.48 899.236,1213.3 899.823,1213.4 900.409,1214.84 900.996,1215.02 901.582,1216.15 902.168,1216.33 902.755,1216.26 903.341,1214.62 903.928,1215.9 904.514,1215.85 905.1,1216.88 905.687,1216.67 906.273,1216.46 906.86,1216.31 907.446,1216.29 908.032,1218.55 908.619,1215.73 909.205,1210.66 909.792,1212.09 910.378,1213.23 910.965,1213.26 911.551,1214.47 912.137,1217.12 912.724,1215.87 913.31,1213.12 913.897,1215.72 914.483,1214.13 915.069,1216.55 915.656,1216.51 916.242,1218.64 916.829,1217.14 917.415,1218.11 918.002,1217.91 918.588,1216.33 919.174,1216.15 919.761,1215.95 920.347,1215.66 920.934,1217.81 921.52,1215.02 922.106,1213.72 922.693,1216.52 923.279,1216.5 923.866,1217.41 924.452,1217.14 925.038,1216.96 925.625,1219.41 926.211,1217.59 926.798,1216.22 927.384,1216.01 927.971,1215.83 928.557,1215.42 929.143,1215.26 929.73,1220.29 930.316,1215.94 930.903,1213.55 931.489,1214.58 932.075,1213.32 932.662,1213.4 933.248,1211.78 933.835,1211.79 934.421,1211.88 935.007,1212.06 935.594,1209.67 936.18,1209.88 936.767,1211.55 937.353,1210.4 937.94,1210.53 938.526,1212.19 939.112,1211.31 939.699,1212.44 940.285,1212.53 940.872,1211.48 941.458,1207.82 942.044,1208.13 942.631,1212.25 943.217,1212.53 943.804,1218.09 944.39,1216.47 944.976,1215.17 945.563,1215.11 946.149,1215.08 946.736,1214.9 947.322,1215.95 947.909,1215.94 948.495,1213.28 949.081,1210.85 949.668,1211.36 950.254,1210.39 950.841,1212.27 951.427,1211.16 952.013,1211.64 952.6,1210.41 953.186,1209.24 953.773,1213.3 954.359,1212.02 954.945,1212.45 955.532,1212.56 956.118,1213.76 956.705,1213.73 957.291,1213.72 957.878,1212.6 958.464,1212.74 959.05,1213.94 959.637,1214.11 960.223,1214.14 960.81,1212.75 961.396,1212.84 961.982,1212.82 962.569,1212.93 963.155,1215.5 963.742,1212.95 964.328,1211.37 964.915,1211.39 965.501,1211.68 966.087,1210.68 966.674,1211.79 967.26,1213.26 967.847,1212.84 968.433,1212.96 969.019,1214.25 969.606,1214.24 970.192,1214.39 970.779,1213.09 971.365,1213.29 971.951,1210.97 972.538,1212.44 973.124,1211.21 973.711,1212.65 974.297,1210.2 974.884,1210.34 975.47,1211.75 976.056,1213.26 976.643,1213.45 977.229,1214.73 977.816,1211.06 978.402,1212.4 978.988,1216.22 979.575,1216.22 980.161,1214.89 980.748,1213.53 981.334,1212.53 981.92,1210.28 982.507,1211.65 983.093,1211.57 983.68,1209.41 984.266,1211.08 984.853,1208.89 985.439,1208.82 986.025,1208.97 986.612,1211.68 987.198,1209.11 987.785,1207.96 988.371,1207.08 988.957,1208.67 989.544,1209.98 990.13,1212.53 990.717,1216.25 991.303,1217.34 991.889,1218.53 992.476,1218.36 993.062,1219.33 993.649,1221.52 994.235,1223.65 994.822,1222.1 995.408,1220.57 995.994,1218.95 996.581,1220.12 997.167,1220.89 997.754,1220.5 998.34,1219.91 998.926,1221.02 999.513,1220.49 1000.1,1221.21 1000.69,1220.71 1001.27,1217.74 1001.86,1216.09 1002.44,1215.81 1003.03,1219.3 1003.62,1218.87 1004.2,1219.93 1004.79,1218.26 1005.38,1219.27 1005.96,1218.81 1006.55,1218.49 1007.14,1215.71 1007.72,1215.75 1008.31,1215.57 1008.9,1217.87 1009.48,1218.98 1010.07,1218.88 1010.65,1217.54 1011.24,1217.53 1011.83,1215.84 1012.41,1216.56 1013,1217.25 1013.59,1218.26 1014.17,1216.66 1014.76,1216.33 1015.35,1218.45 1015.93,1216.79 1016.52,1212.88 1017.11,1212.88 1017.69,1211.8 1018.28,1211.68 1018.86,1211.61 1019.45,1212.04 1020.04,1212.06 1020.62,1211.08 1021.21,1212.47 1021.8,1213.82 1022.38,1213.7 1022.97,1212.45 1023.56,1211.31 1024.14,1212.65 1024.73,1212.91 1025.32,1215.17 1025.9,1215.57 1026.49,1219.4 1027.07,1221.5 1027.66,1219.72 1028.25,1216.71 1028.83,1217.83 1029.42,1214.99 1030.01,1217.33 1030.59,1215.88 1031.18,1214.58 1031.77,1215.86 1032.35,1215.93 1032.94,1216.96 1033.52,1215.62 1034.11,1216.75 1034.7,1215.32 1035.28,1215.13 1035.87,1214.87 1036.46,1214.75 1037.04,1214.52 1037.63,1214.53 1038.22,1215.53 1038.8,1215.35 1039.39,1213.97 1039.98,1216.46 1040.56,1212.41 1041.15,1210.96 1041.73,1212.11 1042.32,1209.63 1042.91,1212.4 1043.49,1213.81 1044.08,1212.59 1044.67,1211.41 1045.25,1210.38 1045.84,1206.91 1046.43,1206.06 1047.01,1203.85 1047.6,1204.62 1048.19,1203.99 1048.77,1202 1049.36,1200.03 1049.94,1199.53 1050.53,1198.98 1051.12,1202.29 1051.7,1205.29 1052.29,1204.3 1052.88,1204.74 1053.46,1202.81 1054.05,1203.63 1054.64,1203.88 1055.22,1204.41 1055.81,1202.46 1056.39,1203.12 1056.98,1204.92 1057.57,1207.78 1058.15,1209.2 1058.74,1208.3 1059.33,1208.37 1059.91,1212.38 1060.5,1213.57 1061.09,1213.34 1061.67,1213.18 1062.26,1212.06 1062.85,1213.43 1063.43,1213.47 1064.02,1213.41 1064.6,1211.95 1065.19,1213.56 1065.78,1212.44 1066.36,1213.9 1066.95,1211.36 1067.54,1211.41 1068.12,1212.63 1068.71,1212.71 1069.3,1212.61 1069.88,1213.74 1070.47,1213.65 1071.06,1214.88 1071.64,1214.83 1072.23,1216.05 1072.81,1222.17 1073.4,1223.07 1073.99,1223.61 1074.57,1224.33 1075.16,1222.41 1075.75,1219.35 1076.33,1220.2 1076.92,1217.53 1077.51,1217.31 1078.09,1218.37 1078.68,1219.19 1079.26,1221.58 1079.85,1222.43 1080.44,1221.97 1081.02,1221.61 1081.61,1220.03 1082.2,1220.94 1082.78,1221.66 1083.37,1219.83 1083.96,1219.65 1084.54,1219.26 1085.13,1218.89 1085.72,1217.22 1086.3,1216.99 1086.89,1218.24 1087.47,1216.58 1088.06,1214.98 1088.65,1213.56 1089.23,1212.33 1089.82,1211.2 1090.41,1212.61 1090.99,1211.47 1091.58,1212.78 1092.17,1214.01 1092.75,1213.71 1093.34,1214.56 1093.93,1217.86 1094.51,1216.48 1095.1,1217.58 1095.68,1217.39 1096.27,1215.92 1096.86,1215.82 1097.44,1213.23 1098.03,1212.3 1098.62,1214.77 1099.2,1210.68 1099.79,1209.42 1100.38,1209.53 1100.96,1209.58 1101.55,1210.75 1102.14,1210.81 1102.72,1213.38 1103.31,1213.01 1103.89,1209.47 1104.48,1213.29 1105.07,1214.5 1105.65,1215.92 1106.24,1213.28 1106.83,1211.9 1107.41,1212.28 1108,1213.7 1108.59,1213.44 1109.17,1213.36 1109.76,1214.55 1110.34,1216.61 1110.93,1212.65 1111.52,1209.01 1112.1,1207.84 1112.69,1208.26 1113.28,1208.26 1113.86,1208.52 1114.45,1208.94 1115.04,1211.59 1115.62,1210.39 1116.21,1213.03 1116.8,1210.58 1117.38,1211.97 1117.97,1213.32 1118.55,1213.4 1119.14,1209.49 1119.73,1209.6 1120.31,1208.82 1120.9,1208.95 1121.49,1204.27 1122.07,1206.04 1122.66,1204.69 1123.25,1207.59 1123.83,1206.59 1124.42,1205.66 1125.01,1204.94 1125.59,1205.12 1126.18,1206.7 1126.76,1209.69 1127.35,1212.09 1127.94,1213.35 1128.52,1214.42 1129.11,1214.27 1129.7,1214.12 1130.28,1212.89 1130.87,1215.31 1131.46,1215.31 1132.04,1213.96 1132.63,1211.53 1133.21,1211.63 1133.8,1213.01 1134.39,1213.11 1134.97,1213.51 1135.56,1208.64 1136.15,1210.07 1136.73,1209.13 1137.32,1211.79 1137.91,1213.25 1138.49,1213.18 1139.08,1210.88 1139.67,1213.51 1140.25,1213.37 1140.84,1214.51 1141.42,1214.46 1142.01,1213.25 1142.6,1213.43 1143.18,1210.01 1143.77,1210.32 1144.36,1209.09 1144.94,1207.86 1145.53,1210.65 1146.12,1208.22 1146.7,1208.5 1147.29,1208.93 1147.88,1209.15 1148.46,1209.1 1149.05,1209.62 1149.63,1208.76 1150.22,1209.12 1150.81,1209.24 1151.39,1207.09 1151.98,1207.28 1152.57,1207.46 1153.15,1206.36 1153.74,1205.6 1154.33,1207.38 1154.91,1208.93 1155.5,1212.73 1156.09,1213.92 1156.67,1215.16 1157.26,1214.98 1157.84,1216.25 1158.43,1213.58 1159.02,1213.89 1159.6,1214.05 1160.19,1212.74 1160.78,1208.86 1161.36,1210.53 1161.95,1209.52 1162.54,1210.88 1163.12,1211.1 1163.71,1212.54 1164.29,1212.53 1164.88,1212.5 1165.47,1212.81 1166.05,1211.46 1166.64,1211.79 1167.23,1213.05 1167.81,1215.55 1168.4,1215.26 1168.99,1213.78 1169.57,1216.28 1170.16,1213.67 1170.75,1214.83 1171.33,1217.32 1171.92,1214.74 1172.5,1215.96 1173.09,1215.5 1173.68,1215.29 1174.26,1213.84 1174.85,1214.19 1175.44,1216.56 1176.02,1217.39 1176.61,1217.17 1177.2,1217.09 1177.78,1216.72 1178.37,1216.51 1178.96,1216.31 1179.54,1216.2 1180.13,1217.24 1180.71,1217.07 1181.3,1216.8 1181.89,1215.11 1182.47,1215.05 1183.06,1215.13 1183.65,1216.33 1184.23,1216.14 1184.82,1214.85 1185.41,1214.67 1185.99,1215.9 1186.58,1215.61 1187.16,1215.49 1187.75,1216.82 1188.34,1217.98 1188.92,1212.82 1189.51,1214.19 1190.1,1212.95 1190.68,1213.02 1191.27,1212.98 1191.86,1214.17 1192.44,1213.88 1193.03,1212.36 1193.62,1211.21 1194.2,1208.85 1194.79,1207.97 1195.37,1206.93 1195.96,1207.39 1196.55,1209 1197.13,1210.61 1197.72,1211.97 1198.31,1215.48 1198.89,1216.68 1199.48,1218.01 1200.07,1218.07 1200.65,1217.79 1201.24,1216.36 1201.83,1213.52 1202.41,1211.13 1203,1211.06 1203.58,1213.5 1204.17,1208.32 1204.76,1209.98 1205.34,1210.73 1205.93,1210.88 1206.52,1211.08 1207.1,1214.74 1207.69,1214.7 1208.28,1215.66 1208.86,1217.89 1209.45,1215.16 1210.03,1213.92 1210.62,1215.13 1211.21,1216.35 1211.79,1216.32 1212.38,1218.52 1212.97,1217.11 1213.55,1216.91 1214.14,1218.19 1214.73,1215.5 1215.31,1214.12 1215.9,1212.68 1216.49,1211.33 1217.07,1211.33 1217.66,1211.57 1218.24,1212.79 1218.83,1212.76 1219.42,1212.8 1220,1212.94 1220.59,1213.05 1221.18,1212.03 1221.76,1215.65 1222.35,1216.92 1222.94,1215.62 1223.52,1215.32 1224.11,1215.05 1224.7,1217.51 1225.28,1216.09 1225.87,1215.67 1226.45,1214.25 1227.04,1214.02 1227.63,1212.57 1228.21,1208.62 1228.8,1207.95 1229.39,1208.19 1229.97,1208.48 1230.56,1207.59 1231.15,1211.8 1231.73,1213.18 1232.32,1212.98 1232.91,1214.26 1233.49,1214.11 1234.08,1213.94 1234.66,1212.77 1235.25,1210.3 1235.84,1207.92 1236.42,1209.44 1237.01,1213.21 1237.6,1210.79 1238.18,1211.81 1238.77,1211.67 1239.36,1212.95 1239.94,1210.6 1240.53,1214.31 1241.11,1214.39 1241.7,1212.08 1242.29,1210.82 1242.87,1209.67 1243.46,1211.02 1244.05,1213.59 1244.63,1214.64 1245.22,1212.35 1245.81,1213.41 1246.39,1214.4 1246.98,1213.19 1247.57,1212.93 1248.15,1212.94 1248.74,1207.86 1249.32,1206.83 1249.91,1208.66 1250.5,1210.07 1251.08,1210.1 1251.67,1210.32 1252.26,1210.36 1252.84,1209.08 1253.43,1210.49 1254.02,1209.39 1254.6,1210.92 1255.19,1209.68 1255.78,1210.89 1256.36,1213.3 1256.95,1213.25 1257.53,1211.71 1258.12,1212.9 1258.71,1211.55 1259.29,1211.47 1259.88,1211.49 1260.47,1211.7 1261.05,1210.57 1261.64,1209.29 1262.23,1209.48 1262.81,1209.54 1263.4,1208.23 1263.98,1207.15 1264.57,1208.61 1265.16,1207.57 1265.74,1209.25 1266.33,1209.46 1266.92,1209.81 1267.5,1210.2 1268.09,1214.11 1268.68,1212.95 1269.26,1212.85 1269.85,1211.55 1270.44,1212.69 1271.02,1213.96 1271.61,1212.77 1272.19,1213.05 1272.78,1211.84 1273.37,1213.44 1273.95,1212.15 1274.54,1209.87 1275.13,1206.33 1275.71,1207.79 1276.3,1209.53 1276.89,1206.03 1277.47,1207.84 1278.06,1208.23 1278.65,1209.78 1279.23,1211.37 1279.82,1210.37 1280.4,1210.36 1280.99,1210.6 1281.58,1212.39 1282.16,1209.9 1282.75,1208.9 1283.34,1210 1283.92,1210.19 1284.51,1210.48 1285.1,1211.56 1285.68,1210.09 1286.27,1210.39 1286.86,1209.44 1287.44,1210.85 1288.03,1209.47 1288.61,1209.51 1289.2,1208.38 1289.79,1208.56 1290.37,1209.9 1290.96,1208.96 1291.55,1210.41 1292.13,1211.88 1292.72,1212.21 1293.31,1210.68 1293.89,1208.45 1294.48,1208.49 1295.06,1208.84 1295.65,1208.96 1296.24,1208.65 1296.82,1208.52 1297.41,1206.32 1298,1210.25 1298.58,1210.24 1299.17,1214.2 1299.76,1214.16 1300.34,1212.74 1300.93,1212.75 1301.52,1215.28 1302.1,1217.69 1302.69,1216.05 1303.27,1215.82 1303.86,1219.62 1304.45,1219.27 1305.03,1221.5 1305.62,1218.85 1306.21,1218.42 1306.79,1219.38 1307.38,1217.73 1307.97,1218.88 1308.55,1218.75 1309.14,1218.28 1309.73,1217.98 1310.31,1217.8 1310.9,1219.96 1311.48,1215.75 1312.07,1214.04 1312.66,1215.28 1313.24,1215.07 1313.83,1212.78 1314.42,1216.39 1315,1213.61 1315.59,1215.81 1316.18,1216.91 1316.76,1216.5 1317.35,1216.24 1317.93,1214.9 1318.52,1214.82 1319.11,1213.19 1319.69,1211.72 1320.28,1213.23 1320.87,1214.51 1321.45,1216.75 1322.04,1217.53 1322.63,1214.55 1323.21,1216.86 1323.8,1216.42 1324.39,1216.01 1324.97,1215.77 1325.56,1218.04 1326.14,1215.08 1326.73,1215.23 1327.32,1216.17 1327.9,1214.7 1328.49,1215.91 1329.08,1215.91 1329.66,1214.64 1330.25,1213.07 1330.84,1214.33 1331.42,1214.2 1332.01,1211.76 1332.6,1213 1333.18,1211.56 1333.77,1209.08 1334.35,1208.23 1334.94,1208.32 1335.53,1209.58 1336.11,1213.53 1336.7,1213.45 1337.29,1210.85 1337.87,1210.92 1338.46,1210.92 1339.05,1211.21 1339.63,1211.26 1340.22,1209.05 1340.8,1209.46 1341.39,1209.76 1341.98,1208.43 1342.56,1206.07 1343.15,1206.44 1343.74,1207.03 1344.32,1206.41 1344.91,1206.44 1345.5,1205.45 1346.08,1207.3 1346.67,1208.94 1347.26,1209.4 1347.84,1210.64 1348.43,1210.72 1349.01,1212.05 1349.6,1214.79 1350.19,1213.39 1350.77,1213.24 1351.36,1214.67 1351.95,1214.72 1352.53,1213.23 1353.12,1212.24 1353.71,1210.87 1354.29,1209.68 1354.88,1210.01 1355.47,1211.17 1356.05,1208.75 1356.64,1210.17 1357.22,1211.61 1357.81,1208.04 1358.4,1207.09 1358.98,1207.44 1359.57,1211.67 1360.16,1211.63 1360.74,1211.88 1361.33,1211.93 1361.92,1214.38 1362.5,1213.18 1363.09,1211.82 1363.68,1210.59 1364.26,1210.7 1364.85,1212.4 1365.43,1208.69 1366.02,1208.99 1366.61,1210.33 1367.19,1207.99 1367.78,1210.39 1368.37,1209.15 1368.95,1210.6 1369.54,1213.4 1370.13,1214.63 1370.71,1215.83 1371.3,1215.76 1371.88,1216.98 1372.47,1218.18 1373.06,1216.89 1373.64,1219.03 1374.23,1218.89 1374.82,1219.61 1375.4,1218.99 1375.99,1218.56 1376.58,1218.39 1377.16,1216.98 1377.75,1214.33 1378.34,1211.59 1378.92,1211.9 1379.51,1211.88 1380.09,1214.7 1380.68,1211.99 1381.27,1210.92 1381.85,1212.35 1382.44,1212.47 1383.03,1211.05 1383.61,1212.42 1384.2,1216 1384.79,1218.34 1385.37,1220.25 1385.96,1219.93 1386.55,1218.42 1387.13,1218.24 1387.72,1219.17 1388.3,1217.97 1388.89,1220.26 1389.48,1221.13 1390.06,1221.63 1390.65,1219.95 1391.24,1219.46 1391.82,1219.25 1392.41,1216.42 1393,1216.34 1393.58,1213.48 1394.17,1213.56 1394.75,1213.74 1395.34,1211.05 1395.93,1212.19 1396.51,1210.94 1397.1,1211.05 1397.69,1209.91 1398.27,1212.63 1398.86,1212.49 1399.45,1211.03 1400.03,1209.95 1400.62,1210.02 1401.21,1209 1401.79,1210.02 1402.38,1211.3 1402.96,1212.42 1403.55,1209.86 1404.14,1209.93 1404.72,1209.96 1405.31,1208.91 1405.9,1208.09 1406.48,1208.29 1407.07,1209.97 1407.66,1212.62 1408.24,1212.52 1408.83,1209.92 1409.42,1210.09 1410,1210.31 1410.59,1213.15 1411.17,1214.35 1411.76,1215.66 1412.35,1216.62 1412.93,1216.29 1413.52,1214.7 1414.11,1213.38 1414.69,1214.44 1415.28,1214.11 1415.87,1212.96 1416.45,1216.58 1417.04,1219.13 1417.63,1218.54 1418.21,1217.12 1418.8,1220.52 1419.38,1219.95 1419.97,1220.74 1420.56,1217.9 1421.14,1216.36 1421.73,1211.04 1422.32,1212.22 1422.9,1213.68 1423.49,1214.67 1424.08,1218.35 1424.66,1218.09 1425.25,1216.36 1425.83,1216.09 1426.42,1213.51 1427.01,1213.58 1427.59,1212.35 1428.18,1212.42 1428.77,1208.76 1429.35,1209.01 1429.94,1209.46 1430.53,1208.5 1431.11,1208.94 1431.7,1206.59 1432.29,1206.94 1432.87,1205.99 1433.46,1206.18 1434.04,1207.82 1434.63,1211.74 1435.22,1211.82 1435.8,1215.58 1436.39,1219 1436.98,1219.02 1437.56,1220.13 1438.15,1219.72 1438.74,1218.18 1439.32,1216.86 1439.91,1216.71 1440.5,1216.46 1441.08,1216.55 1441.67,1217.58 1442.25,1218.6 1442.84,1215.62 1443.43,1216.8 1444.01,1212.72 1444.6,1213.99 1445.19,1215.38 1445.77,1215.15 1446.36,1215.93 1446.95,1218.36 1447.53,1214.05 1448.12,1216.46 1448.7,1215.27 1449.29,1213.67 1449.88,1212.7 1450.46,1215.11 1451.05,1216.55 1451.64,1216.18 1452.22,1215.9 1452.81,1215.55 1453.4,1215.3 1453.98,1217.59 1454.57,1214.77 1455.16,1214.71 1455.74,1215.73 1456.33,1217.85 1456.91,1213.49 1457.5,1215.97 1458.09,1217.12 1458.67,1215.49 1459.26,1215.02 1459.85,1214.72 1460.43,1213.08 1461.02,1215.6 1461.61,1216.44 1462.19,1213.72 1462.78,1212.03 1463.37,1213.26 1463.95,1213.05 1464.54,1211.63 1465.12,1210.63 1465.71,1210.93 1466.3,1212.45 1466.88,1211.01 1467.47,1210.98 1468.06,1211.96 1468.64,1212.05 1469.23,1211.96 1469.82,1213.44 1470.4,1213.32 1470.99,1210.9 1471.57,1209.76 1472.16,1209.95 1472.75,1210.01 1473.33,1211.4 1473.92,1210.08 1474.51,1211.39 1475.09,1210.2 1475.68,1211.55 1476.27,1212.64 1476.85,1211.26 1477.44,1211.28 1478.03,1215.1 1478.61,1213.84 1479.2,1213.97 1479.78,1216.57 1480.37,1217.64 1480.96,1216.48 1481.54,1214.85 1482.13,1216 1482.72,1218.29 1483.3,1218.22 1483.89,1220.42 1484.48,1219.67 1485.06,1218.01 1485.65,1218.78 1486.24,1219.7 1486.82,1218.08 1487.41,1214.01 1487.99,1211.46 1488.58,1212.97 1489.17,1211.35 1489.75,1215.06 1490.34,1216.36 1490.93,1217.09 1491.51,1219.18 1492.1,1217.61 1492.69,1216.05 1493.27,1215.81 1493.86,1218.29 1494.45,1215.47 1495.03,1216.46 1495.62,1213.41 1496.2,1210.69 1496.79,1209.33 1497.38,1210.77 1497.96,1207.06 1498.55,1207.43 1499.14,1206.54 1499.72,1205.66 1500.31,1206 1500.9,1205 1501.48,1205.28 1502.07,1208.1 1502.65,1209.56 1503.24,1208.42 1503.83,1205.97 1504.41,1206.14 1505,1209.02 1505.59,1208 1506.17,1208.31 1506.76,1205.99 1507.35,1204.88 1507.93,1202.63 1508.52,1202.05 1509.11,1205.11 1509.69,1206.78 1510.28,1205.69 1510.86,1206.06 1511.45,1205.3 1512.04,1205.68 1512.62,1205.95 1513.21,1204.83 1513.8,1207.77 1514.38,1208.12 1514.97,1205.75 1515.56,1207.19 1516.14,1206.47 1516.73,1208.01 1517.32,1209.48 1517.9,1212.32 1518.49,1211.53 1519.07,1211.6 1519.66,1211.73 1520.25,1211.96 1520.83,1213.29 1521.42,1213.34 1522.01,1212.29 1522.59,1214.73 1523.18,1213.4 1523.77,1213.4 1524.35,1214.69 1524.94,1213.45 1525.52,1213.38 1526.11,1214.73 1526.7,1214.83 1527.28,1213.74 1527.87,1214.87 1528.46,1215.84 1529.04,1218.04 1529.63,1216.71 1530.22,1216.46 1530.8,1213.65 1531.39,1210.96 1531.98,1211.07 1532.56,1211.25 1533.15,1211.14 1533.73,1211.22 1534.32,1210 1534.91,1206.62 1535.49,1206.75 1536.08,1206.05 1536.67,1207.64 1537.25,1206.43 1537.84,1206.84 1538.43,1208.46 1539.01,1208.52 1539.6,1208.98 1540.19,1209.41 1540.77,1208.35 1541.36,1207.32 1541.94,1208.67 1542.53,1210.1 1543.12,1212.67 1543.7,1212.67 1544.29,1211.39 1544.88,1210.42 1545.46,1210.45 1546.05,1213.06 1546.64,1214.3 1547.22,1214.16 1547.81,1215.32 1548.4,1216.27 1548.98,1217.37 1549.57,1218.39 1550.15,1215.59 1550.74,1215.46 1551.33,1215.31 1551.91,1217.57 1552.5,1218.58 1553.09,1214.44 1553.67,1215.48 1554.26,1212.88 1554.85,1214.03 1555.43,1215.3 1556.02,1215.04 1556.6,1217.48 1557.19,1214.81 1557.78,1214.59 1558.36,1213.56 1558.95,1212.39 1559.54,1211.13 1560.12,1209.84 1560.71,1208.6 1561.3,1207.68 1561.88,1209.28 1562.47,1208.39 1563.06,1208.8 1563.64,1210.57 1564.23,1210.91 1564.81,1209.63 1565.4,1213.48 1565.99,1212.47 1566.57,1212.55 1567.16,1213.66 1567.75,1213.79 1568.33,1215.19 1568.92,1212.88 1569.51,1214.25 1570.09,1211.9 1570.68,1213.48 1571.27,1211.34 1571.85,1215.01 1572.44,1216.25 1573.02,1214.99 1573.61,1216.19 1574.2,1216.89 1574.78,1216.78 1575.37,1216.87 1575.96,1218.07 1576.54,1219.11 1577.13,1218.91 1577.72,1218.8 1578.3,1219.65 1578.89,1220.35 1579.47,1221.17 1580.06,1215.52 1580.65,1215.45 1581.23,1217.46 1581.82,1215.95 1582.41,1219.47 1582.99,1217.9 1583.58,1215.55 1584.17,1216.38 1584.75,1216.08 1585.34,1217.1 1585.93,1215.69 1586.51,1214.2 1587.1,1210.32 1587.68,1211.89 1588.27,1210.54 1588.86,1210.96 1589.44,1209.73 1590.03,1213.67 1590.62,1213.38 1591.2,1213.32 1591.79,1211.83 1592.38,1213.08 1592.96,1210.83 1593.55,1209.48 1594.14,1207.19 1594.72,1207.34 1595.31,1206.57 1595.89,1205.29 1596.48,1207.09 1597.07,1207.05 1597.65,1204.91 1598.24,1205.52 1598.83,1206.94 1599.41,1208.31 1600,1211.21 1600.59,1211.42 1601.17,1211.42 1601.76,1210.32 1602.34,1210.54 1602.93,1208.02 1603.52,1209.77 1604.1,1211.19 1604.69,1208.65 1605.28,1207.53 1605.86,1206.65 1606.45,1209.45 1607.04,1211.92 1607.62,1211.74 1608.21,1212.66 1608.8,1212.87 1609.38,1213.95 1609.97,1215.01 1610.55,1213.51 1611.14,1214.64 1611.73,1215.63 1612.31,1217.78 1612.9,1217.34 1613.49,1214.58 1614.07,1214.34 1614.66,1215.66 1615.25,1216.74 1615.83,1216.35 1616.42,1216.12 1617.01,1214.64 1617.59,1215.76 1618.18,1215.56 1618.76,1215.49 1619.35,1214.16 1619.94,1211.47 1620.52,1210.42 1621.11,1211.5 1621.7,1216.55 1622.28,1215.18 1622.87,1212.52 1623.46,1212.45 1624.04,1212.48 1624.63,1213.88 1625.22,1215.1 1625.8,1215.16 1626.39,1213.76 1626.97,1215.88 1627.56,1214.41 1628.15,1214.38 1628.73,1211.76 1629.32,1210.47 1629.91,1208.33 1630.49,1208.74 1631.08,1207.75 1631.67,1208 1632.25,1206.87 1632.84,1210.93 1633.42,1208.8 1634.01,1209 1634.6,1207.84 1635.18,1208.29 1635.77,1208.49 1636.36,1207.41 1636.94,1207.87 1637.53,1207.97 1638.12,1213.09 1638.7,1217.71 1639.29,1217.37 1639.88,1215.96 1640.46,1219.38 1641.05,1218.93 1641.63,1219.75 1642.22,1219.23 1642.81,1219.38 1643.39,1218.88 1643.98,1218.75 1644.57,1218.52 1645.15,1215.58 1645.74,1216.73 1646.33,1217.77 1646.91,1215.14 1647.5,1214.74 1648.09,1213.41 1648.67,1215.86 1649.26,1213.5 1649.84,1213.11 1650.43,1212.09 1651.02,1213.21 1651.6,1213.14 1652.19,1211.91 1652.78,1210.95 1653.36,1207.29 1653.95,1204.66 1654.54,1206.37 1655.12,1205.49 1655.71,1206.88 1656.29,1207.45 1656.88,1206.67 1657.47,1206.96 1658.05,1206.05 1658.64,1202.82 1659.23,1201.91 1659.81,1203.88 1660.4,1202.98 1660.99,1205.88 1661.57,1208.85 1662.16,1210.43 1662.75,1210.38 1663.33,1211.69 1663.92,1210.5 1664.5,1207.81 1665.09,1209.26 1665.68,1209.39 1666.26,1210.75 1666.85,1213.34 1667.44,1213.35 1668.02,1214.62 1668.61,1211.79 1669.2,1212.09 1669.78,1213.12 1670.37,1214.62 1670.96,1217.14 1671.54,1214.47 1672.13,1216.84 1672.71,1217.91 1673.3,1217.55 1673.89,1218.62 1674.47,1219.3 1675.06,1219.25 1675.65,1217.66 1676.23,1212.26 1676.82,1211.14 1677.41,1208.93 1677.99,1209.21 1678.58,1209.49 1679.17,1209.67 1679.75,1209.97 1680.34,1211.54 1680.92,1211.94 1681.51,1211.81 1682.1,1214.59 1682.68,1214.65 1683.27,1212.34 1683.86,1211.06 1684.44,1213.68 1685.03,1214.65 1685.62,1214.6 1686.2,1215.77 1686.79,1215.79 1687.37,1217.91 1687.96,1220.18 1688.55,1218.7 1689.13,1218.42 1689.72,1216.93 1690.31,1215.25 1690.89,1216.53 1691.48,1219.08 1692.07,1217.41 1692.65,1214.82 1693.24,1213.58 1693.83,1213.4 1694.41,1212.05 1695,1210.77 1695.58,1209.68 1696.17,1211.03 1696.76,1209.63 1697.34,1210.67 1697.93,1210.58 1698.52,1210.77 1699.1,1211.09 1699.69,1211.38 1700.28,1210.22 1700.86,1212.94 1701.45,1210.51 1702.04,1210.48 1702.62,1210.67 1703.21,1208.52 1703.79,1210.02 1704.38,1211.43 1704.97,1211.39 1705.55,1212.7 1706.14,1213.86 1706.73,1214.67 1707.31,1214.45 1707.9,1217.61 1708.49,1214.66 1709.07,1214.67 1709.66,1215.59 1710.24,1211.58 1710.83,1211.67 1711.42,1213.05 1712,1211.76 1712.59,1209.6 1713.18,1209.67 1713.76,1204.68 1714.35,1201.17 1714.94,1202.02 1715.52,1202.62 1716.11,1203.06 1716.7,1206.09 1717.28,1206.45 1717.87,1204.47 1718.45,1205.08 1719.04,1208.38 1719.63,1206.09 1720.21,1203.56 1720.8,1202.64 1721.39,1201.78 1721.97,1203.77 1722.56,1204.14 1723.15,1205.83 1723.73,1206.31 1724.32,1206.49 1724.91,1209.12 1725.49,1208.14 1726.08,1208.43 1726.66,1208.51 1727.25,1208.66 1727.84,1212.62 1728.42,1212.69 1729.01,1209.22 1729.6,1210.55 1730.18,1211.63 1730.77,1210.41 1731.36,1208.36 1731.94,1211.11 1732.53,1211.11 1733.11,1210.07 1733.7,1209.02 1734.29,1209.11 1734.87,1210.59 1735.46,1209.55 1736.05,1210.82 1736.63,1212.21 1737.22,1213.44 1737.81,1214.5 1738.39,1216.93 1738.98,1214.02 1739.57,1215.36 1740.15,1213.81 1740.74,1214.85 1741.32,1217.43 1741.91,1213.37 1742.5,1214.78 1743.08,1215.87 1743.67,1215.64 1744.26,1217.72 1744.84,1217.26 1745.43,1218.28 1746.02,1217.84 1746.6,1218.93 1747.19,1216.24 1747.78,1216.32 1748.36,1216.23 1748.95,1212.41 1749.53,1214.68 1750.12,1215.94 1750.71,1217 1751.29,1216.83 1751.88,1217.99 1752.47,1216.42 1753.05,1213.51 1753.64,1213.19 1754.23,1213.21 1754.81,1212.97 1755.4,1214.43 1755.99,1214.28 1756.57,1214.05 1757.16,1216.38 1757.74,1218.96 1758.33,1220.83 1758.92,1222.86 1759.5,1224.94 1760.09,1224.24 1760.68,1223.93 1761.26,1223.52 1761.85,1226.69 1762.44,1224.67 1763.02,1227.87 1763.61,1228.46 1764.19,1227.55 1764.78,1227.58 1765.37,1227.81 1765.95,1221.96 1766.54,1220.07 1767.13,1219.37 1767.71,1216.63 1768.3,1216.3 1768.89,1214.62 1769.47,1216.66 1770.06,1213.86 1770.65,1212.81 1771.23,1215.14 1771.82,1213.53 1772.4,1213.31 1772.99,1209.53 1773.58,1209.73 1774.16,1213.56 1774.75,1210.88 1775.34,1210.82 1775.92,1211.15 1776.51,1210.02 1777.1,1212.66 1777.68,1216.25 1778.27,1218.51 1778.86,1215.91 1779.44,1216.65 1780.03,1221.45 1780.61,1219.49 1781.2,1216.44 1781.79,1214.74 1782.37,1215.93 1782.96,1215.88 1783.55,1216.67 1784.13,1213.92 1784.72,1214.04 1785.31,1215.36 1785.89,1214.09 1786.48,1212.9 1787.06,1210.32 1787.65,1209.33 1788.24,1209.3 1788.82,1210.84 1789.41,1213.21 1790,1210.59 1790.58,1210.8 1791.17,1212.45 1791.76,1216.25 1792.34,1216.23 1792.93,1214.49 1793.52,1214.39 1794.1,1214.37 1794.69,1213.03 1795.27,1209.2 1795.86,1209.53 1796.45,1209.59 1797.03,1211.13 1797.62,1212.2 1798.21,1211.07 1798.79,1211.17 1799.38,1213.65 1799.97,1213.44 1800.55,1213.4 1801.14,1214.51 1801.73,1214.32 1802.31,1212.96 1802.9,1211.91 1803.48,1210.62 1804.07,1209.77 1804.66,1207.34 1805.24,1207.67 1805.83,1211.72 1806.42,1210.42 1807,1207.87 1807.59,1209.52 1808.18,1209.72 1808.76,1210.1 1809.35,1207.83 1809.94,1209.24 1810.52,1209.39 1811.11,1209.5 1811.69,1208.48 1812.28,1209.95 1812.87,1213.78 1813.45,1211.23 1814.04,1210.02 1814.63,1210.09 1815.21,1208.82 1815.8,1207.78 1816.39,1207.98 1816.97,1209.69 1817.56,1210.7 1818.14,1208.37 1818.73,1208.96 1819.32,1210.49 1819.9,1209.33 1820.49,1208.07 1821.08,1207.14 1821.66,1207.6 1822.25,1206.58 1822.84,1206.97 1823.42,1207.18 1824.01,1207.61 1824.6,1207.85 1825.18,1206.71 1825.77,1209.72 1826.35,1207.71 1826.94,1207.72 1827.53,1210.83 1828.11,1212.16 1828.7,1212.18 1829.29,1214.41 1829.87,1214.43 1830.46,1214.43 1831.05,1214.62 1831.63,1213.4 1832.22,1214.53 1832.81,1215.62 1833.39,1216.93 1833.98,1214.34 1834.56,1211.49 1835.15,1214.05 1835.74,1212.97 1836.32,1212.94 1836.91,1212.84 1837.5,1214.05 1838.08,1213.94 1838.67,1215.12 1839.26,1216.37 1839.84,1213.83 1840.43,1212.18 1841.01,1212.25 1841.6,1212.26 1842.19,1212.41 1842.77,1215.11 1843.36,1214.64 1843.95,1214.45 1844.53,1218.16 1845.12,1220.44 1845.71,1220.18 1846.29,1219.94 1846.88,1219.52 1847.47,1219.07 1848.05,1216.33 1848.64,1213.65 1849.22,1213.65 1849.81,1213.58 1850.4,1214.8 1850.98,1213.31 1851.57,1213.12 1852.16,1213.44 1852.74,1213.6 1853.33,1215.96 1853.92,1217.36 1854.5,1217.07 1855.09,1216.88 1855.68,1219.14 1856.26,1220.24 1856.85,1215.8 1857.43,1216.77 1858.02,1215.38 1858.61,1215.2 1859.19,1215.04 1859.78,1216.34 1860.37,1216.03 1860.95,1213.39 1861.54,1214.39 1862.13,1215.46 1862.71,1216.27 1863.3,1212.5 1863.88,1213.76 1864.47,1212.33 1865.06,1211.12 1865.64,1212.55 1866.23,1211.47 1866.82,1211.59 1867.4,1214.17 1867.99,1212.88 1868.58,1214.15 1869.16,1215.5 1869.75,1216.46 1870.34,1217.37 1870.92,1218.65 1871.51,1218.18 1872.09,1217.7 1872.68,1217.03 1873.27,1218.3 1873.85,1218.13 1874.44,1217.92 1875.03,1217.34 1875.61,1216.87 1876.2,1215.52 1876.79,1214.3 1877.37,1214.23 1877.96,1213.65 1878.55,1211.14 1879.13,1207.55 1879.72,1205.28 1880.3,1204.53 1880.89,1205.11 1881.48,1205.43 1882.06,1205.95 1882.65,1206.27 1883.24,1204.26 1883.82,1203.71 1884.41,1204.08 1885,1203.14 1885.58,1203.52 1886.17,1202.7 1886.76,1202.32 1887.34,1203.08 1887.93,1205.87 1888.51,1205.07 1889.1,1209.3 1889.69,1208.56 1890.27,1206.4 1890.86,1205.48 1891.45,1206.01 1892.03,1206.55 1892.62,1204.4 1893.21,1207.19 1893.79,1205.03 1894.38,1206.76 1894.96,1205.65 1895.55,1204.73 1896.14,1206.29 1896.72,1206.56 1897.31,1206.9 1897.9,1208.57 1898.48,1210.04 1899.07,1210.03 1899.66,1208.99 1900.24,1207.96 1900.83,1210.74 1901.42,1209.55 1902,1209.73 1902.59,1211.16 1903.17,1214.92 1903.76,1214.88 1904.35,1212.56 1904.93,1213.7 1905.52,1213.91 1906.11,1216.57 1906.69,1215.23 1907.28,1218.86 1907.87,1220.84 1908.45,1218.07 1909.04,1217.93 1909.63,1216.26 1910.21,1214.76 1910.8,1212 1911.38,1213.63 1911.97,1214.75 1912.56,1213.23 1913.14,1209.58 1913.73,1208.4 1914.32,1208.45 1914.9,1208.58 1915.49,1208.86 1916.08,1210.2 1916.66,1209.02 1917.25,1209.11 1917.83,1210.41 1918.42,1209.21 1919.01,1208.09 1919.59,1208.24 1920.18,1208.25 1920.77,1208.54 1921.35,1207.58 1921.94,1209.2 1922.53,1209.04 1923.11,1209.38 1923.7,1207.23 1924.29,1211.34 1924.87,1212.7 1925.46,1215.36 1926.04,1215.11 1926.63,1213.81 1927.22,1208.87 1927.8,1207.59 1928.39,1209.25 1928.98,1209.72 1929.56,1212.33 1930.15,1213.66 1930.74,1216.08 1931.32,1216.01 1931.91,1213.44 1932.5,1210.88 1933.08,1212.34 1933.67,1212.58 1934.25,1213.84 1934.84,1213.75 1935.43,1213.95 1936.01,1213.93 1936.6,1215.13 1937.19,1213.84 1937.77,1213.55 1938.36,1214.65 1938.95,1214.44 1939.53,1214.41 1940.12,1214.39 1940.71,1213 1941.29,1212.86 1941.88,1211.88 1942.46,1212.2 1943.05,1210.86 1943.64,1209.88 1944.22,1209.91 1944.81,1211.39 1945.4,1212.92 1945.98,1210.46 1946.57,1210.16 1947.16,1207.74 1947.74,1206.78 1948.33,1207.19 1948.91,1209.98 1949.5,1211.42 1950.09,1209.05 1950.67,1210.72 1951.26,1208.45 1951.85,1209.69 1952.43,1209.91 1953.02,1209.95 1953.61,1210.38 1954.19,1209.28 1954.78,1208.11 1955.37,1208.24 1955.95,1208.58 1956.54,1209.07 1957.12,1209.5 1957.71,1209.67 1958.3,1212.32 1958.88,1215.07 1959.47,1213.81 1960.06,1217.67 1960.64,1214.84 1961.23,1214.56 1961.82,1215.55 1962.4,1214.3 1962.99,1214.33 1963.58,1215.37 1964.16,1214.99 1964.75,1213.57 1965.33,1214.76 1965.92,1213.44 1966.51,1213.43 1967.09,1213.27 1967.68,1212.95 1968.27,1212.93 1968.85,1212.9 1969.44,1213.11 1970.03,1213.07 1970.61,1214.42 1971.2,1214.27 1971.78,1215.26 1972.37,1216.61 1972.96,1216.12 1973.54,1215.96 1974.13,1215.35 1974.72,1215.36 1975.3,1215.16 1975.89,1215.99 1976.48,1215.77 1977.06,1215.56 1977.65,1215.46 1978.24,1215.36 1978.82,1217.21 1979.41,1216.9 1979.99,1219.04 1980.58,1217.41 1981.17,1218.42 1981.75,1219.52 1982.34,1219.38 1982.93,1216.24 1983.51,1213.63 1984.1,1214.76 1984.69,1214.79 1985.27,1215.91 1985.86,1214.33 1986.45,1214.06 1987.03,1210.32 1987.62,1212.99 1988.2,1211.42 1988.79,1211.49 1989.38,1211.51 1989.96,1212.66 1990.55,1211.49 1991.14,1211.42 1991.72,1211.34 1992.31,1211.37 1992.9,1212.66 1993.48,1213.81 1994.07,1213.98 1994.65,1215.16 1995.24,1215.13 1995.83,1215.01 1996.41,1216.27 1997,1213.57 1997.59,1216.05 1998.17,1213.32 1998.76,1215.79 1999.35,1218.16 1999.93,1217.96 2000.52,1219.15 2001.11,1217.29 2001.69,1218.29 2002.28,1217.97 2002.86,1217.4 2003.45,1214.61 2004.04,1215.56 2004.62,1216.8 2005.21,1216.52 2005.8,1212.7 2006.38,1212.83 2006.97,1215.09 2007.56,1216.1 2008.14,1217.39 2008.73,1215.77 2009.32,1216.95 2009.9,1216.65 2010.49,1216.18 2011.07,1217.11 2011.66,1216.85 2012.25,1218.02 2012.83,1218.76 2013.42,1219.74 2014.01,1219.28 2014.59,1217.53 2015.18,1217.59 2015.77,1217.1 2016.35,1216.89 2016.94,1219.39 2017.53,1220.37 2018.11,1222.36 2018.7,1224.06 2019.28,1220.8 2019.87,1219.25 2020.46,1219.23 2021.04,1218.74 2021.63,1219.84 2022.22,1219.19 2022.8,1219.86 2023.39,1219.25 2023.98,1219.95 2024.56,1218.05 2025.15,1217.95 2025.73,1217.72 2026.32,1216.13 2026.91,1214.77 2027.49,1214.86 2028.08,1215.96 2028.67,1214.46 2029.25,1211.85 2029.84,1211.89 2030.43,1211.55 2031.01,1212.75 2031.6,1210.19 2032.19,1211.31 2032.77,1209.86 2033.36,1212.46 2033.94,1210.16 2034.53,1209.99 2035.12,1210.01 2035.7,1208.84 2036.29,1210.29 2036.88,1211.52 2037.46,1207.52 2038.05,1207.95 2038.64,1207.01 2039.22,1207.45 2039.81,1206.47 2040.4,1209.2 2040.98,1210.5 2041.57,1209.52 2042.15,1211.06 2042.74,1212.35 2043.33,1212.58 2043.91,1211.41 2044.5,1210.07 2045.09,1209 2045.67,1204.16 2046.26,1204.73 2046.85,1203.92 2047.43,1203.12 2048.02,1202.24 2048.6,1202.78 2049.19,1203.51 2049.78,1202.98 2050.36,1203.34 2050.95,1199.94 2051.54,1200.62 2052.12,1203.69 2052.71,1204.19 2053.3,1203.29 2053.88,1205.17 2054.47,1205.53 2055.06,1205.82 2055.64,1206.24 2056.23,1206.4 2056.81,1206.79 2057.4,1208.45 2057.99,1209.98 2058.57,1210.1 2059.16,1212.81 2059.75,1211.8 2060.33,1212.11 2060.92,1213.4 2061.51,1212.23 2062.09,1215.8 2062.68,1213.19 2063.27,1214.25 2063.85,1214.2 2064.44,1213.24 2065.02,1213.2 2065.61,1212.95 2066.2,1212.97 2066.78,1214.11 2067.37,1215.24 2067.96,1211.34 2068.54,1212.8 2069.13,1206.22 2069.72,1208.04 2070.3,1209.77 2070.89,1207.27 2071.48,1206.42 2072.06,1206.64 2072.65,1205.99 2073.23,1207.97 2073.82,1206.77 2074.41,1207.13 2074.99,1208.62 2075.58,1208.95 2076.17,1210.23 2076.75,1210.62 2077.34,1209.46 2077.93,1208.61 2078.51,1212.57 2079.1,1210.35 2079.68,1211.76 2080.27,1210.49 2080.86,1210.68 2081.44,1209.61 2082.03,1207.42 2082.62,1209.97 2083.2,1210.1 2083.79,1210.34 2084.38,1210.39 2084.96,1211.8 2085.55,1209.21 2086.14,1208.07 2086.72,1208.23 2087.31,1209.68 2087.89,1208.82 2088.48,1207.71 2089.07,1208.12 2089.65,1209.65 2090.24,1209.85 2090.83,1209.77 2091.41,1212.5 2092,1213.7 2092.59,1212.3 2093.17,1211.12 2093.76,1212.62 2094.35,1212.5 2094.93,1213.8 2095.52,1213.6 2096.1,1209.65 2096.69,1209.78 2097.28,1211.21 2097.86,1211.47 2098.45,1211.54 2099.04,1210.38 2099.62,1211.8 2100.21,1212.92 2100.8,1211.46 2101.38,1211.29 2101.97,1212.74 2102.55,1211.65 2103.14,1211.95 2103.73,1211.96 2104.31,1212.27 2104.9,1214.64 2105.49,1214.51 2106.07,1214.4 2106.66,1215.65 2107.25,1216.56 2107.83,1216.27 2108.42,1214.79 2109.01,1213.35 2109.59,1214.88 2110.18,1216.01 2110.76,1214.41 2111.35,1214.51 2111.94,1215.74 2112.52,1215.42 2113.11,1214.3 2113.7,1211.53 2114.28,1212.91 2114.87,1214.25 2115.46,1215.45 2116.04,1214.15 2116.63,1212.62 2117.22,1215.19 2117.8,1212.62 2118.39,1213.86 2118.97,1214.97 2119.56,1214.71 2120.15,1214.56 2120.73,1214.44 2121.32,1214.27 2121.91,1212.81 2122.49,1215.44 2123.08,1213.94 2123.67,1213.73 2124.25,1213.83 2124.84,1212.51 2125.42,1212.7 2126.01,1212.75 2126.6,1212.74 2127.18,1212.33 2127.77,1214.87 2128.36,1213.57 2128.94,1212.37 2129.53,1212.3 2130.12,1213.32 2130.7,1211.98 2131.29,1208.28 2131.88,1209.62 2132.46,1210.92 2133.05,1209.74 2133.63,1213.92 2134.22,1211.49 2134.81,1212.77 2135.39,1211.51 2135.98,1210.25 2136.57,1211.72 2137.15,1212.96 2137.74,1214.05 2138.33,1216.47 2138.91,1216.3 2139.5,1215.92 2140.09,1213.39 2140.67,1214.74 2141.26,1213.32 2141.84,1217.03 2142.43,1217.97 2143.02,1218.74 2143.6,1219.68 2144.19,1219.19 2144.78,1219.05 2145.36,1216.3 2145.95,1217.14 2146.54,1214.48 2147.12,1215.71 2147.71,1214.37 2148.3,1214.62 2148.88,1215.53 2149.47,1216.67 2150.05,1217.55 2150.64,1216.11 2151.23,1214.72 2151.81,1214.54 2152.4,1216.62 2152.99,1216.32 2153.57,1214.9 2154.16,1212.25 2154.75,1212.08 2155.33,1211.04 2155.92,1210.15 2156.5,1210.3 2157.09,1207.8 2157.68,1207.94 2158.26,1205.54 \"/>\n<path clip-path=\"url(#clip982)\" d=\"M986.025 1213.14 L986.612 1213.14 L987.198 1213.14 L987.785 1213.14 L988.371 1213.14 L988.957 1213.14 L989.544 1213.14 L990.13 1213.14 L990.717 1213.14 L991.303 1213.14 L991.889 1213.14 L992.476 1213.14 L993.062 1213.14 L993.649 1213.14 L994.235 1213.14 L994.822 1213.14 L995.408 1213.14 L995.994 1213.14 L996.581 1213.14 L997.167 1213.14 L997.754 1213.14 L998.34 1213.14 L998.926 1213.14 L999.513 1213.14 L1000.1 1213.14 L1000.69 1213.14 L1001.27 1213.14 L1001.86 1213.14 L1002.44 1213.14 L1003.03 1213.14 L1003.62 1213.14 L1004.2 1213.14 L1004.79 1213.14 L1005.38 1213.14 L1005.96 1213.14 L1006.55 1213.14 L1007.14 1213.14 L1007.72 1213.14 L1008.31 1213.14 L1008.9 1213.14 L1009.48 1213.14 L1010.07 1213.14 L1010.65 1213.14 L1011.24 1213.14 L1011.83 1213.14 L1012.41 1213.14 L1013 1213.14 L1013.59 1213.14 L1014.17 1213.14 L1014.76 1213.14 L1015.35 1213.14 L1015.93 1213.14 L1016.52 1213.14 L1017.11 1213.14 L1017.69 1213.14 L1018.28 1213.14 L1018.86 1213.14 L1019.45 1213.14 L1020.04 1213.14 L1020.62 1213.14 L1021.21 1213.14 L1021.8 1213.14 L1022.38 1213.14 L1022.97 1213.14 L1023.56 1213.14 L1024.14 1213.14 L1024.73 1213.14 L1025.32 1213.14 L1025.9 1213.14 L1026.49 1213.14 L1027.07 1213.14 L1027.66 1213.14 L1028.25 1213.14 L1028.83 1213.14 L1029.42 1213.14 L1030.01 1213.14 L1030.59 1213.14 L1031.18 1213.14 L1031.77 1213.14 L1032.35 1213.14 L1032.94 1213.14 L1033.52 1213.14 L1034.11 1213.14 L1034.7 1213.14 L1035.28 1213.14 L1035.87 1213.14 L1036.46 1213.14 L1037.04 1213.14 L1037.63 1213.14 L1038.22 1213.14 L1038.8 1213.14 L1039.39 1213.14 L1039.98 1213.14 L1040.56 1213.14 L1041.15 1213.14 L1041.73 1213.14 L1042.32 1213.14 L1042.91 1213.14 L1043.49 1213.14 L1044.08 1213.14 L1044.67 1213.14 L1045.25 1213.14 L1045.84 1213.14 L1046.43 1213.14 L1047.01 1213.14 L1047.6 1213.14 L1048.19 1213.14 L1048.77 1213.14 L1049.36 1213.14 L1049.94 1213.14 L1050.53 1213.14 L1051.12 1213.14 L1051.7 1213.14 L1052.29 1213.14 L1052.88 1213.14 L1053.46 1213.14 L1054.05 1213.14 L1054.64 1213.14 L1055.22 1213.14 L1055.81 1213.14 L1056.39 1213.14 L1056.98 1213.14 L1057.57 1213.14 L1058.15 1213.14 L1058.74 1213.14 L1059.33 1213.14 L1059.91 1213.14 L1060.5 1213.14 L1061.09 1213.14 L1061.67 1213.14 L1062.26 1213.14 L1062.85 1213.14 L1063.43 1213.14 L1064.02 1213.14 L1064.6 1213.14 L1065.19 1213.14 L1065.78 1213.14 L1066.36 1213.14 L1066.95 1213.14 L1067.54 1213.14 L1068.12 1213.14 L1068.71 1213.14 L1069.3 1213.14 L1069.88 1213.14 L1070.47 1213.14 L1071.06 1213.14 L1071.64 1213.14 L1072.23 1213.14 L1072.81 1213.14 L1073.4 1213.14 L1073.99 1213.14 L1074.57 1213.14 L1075.16 1213.14 L1075.75 1213.14 L1076.33 1213.14 L1076.92 1213.14 L1077.51 1213.14 L1078.09 1213.14 L1078.68 1213.14 L1079.26 1213.14 L1079.85 1213.14 L1080.44 1213.14 L1081.02 1213.14 L1081.61 1213.14 L1082.2 1213.14 L1082.78 1213.14 L1083.37 1213.14 L1083.96 1213.14 L1084.54 1213.14 L1085.13 1213.14 L1085.72 1213.14 L1086.3 1213.14 L1086.89 1213.14 L1087.47 1213.14 L1088.06 1213.14 L1088.65 1213.14 L1089.23 1213.14 L1089.82 1213.14 L1090.41 1213.14 L1090.99 1213.14 L1091.58 1213.14 L1092.17 1213.14 L1092.75 1213.14 L1093.34 1213.14 L1093.93 1213.14 L1094.51 1213.14 L1095.1 1213.14 L1095.68 1213.14 L1096.27 1213.14 L1096.86 1213.14 L1097.44 1213.14 L1098.03 1213.14 L1098.62 1213.14 L1099.2 1213.14 L1099.79 1213.14 L1100.38 1213.14 L1100.96 1213.14 L1101.55 1213.14 L1102.14 1213.14 L1102.72 1213.14 L1103.31 1213.14 L1103.89 1213.14 L1104.48 1213.14 L1105.07 1213.14 L1105.65 1213.14 L1106.24 1213.14 L1106.83 1213.14 L1107.41 1213.14 L1108 1213.14 L1108.59 1213.14 L1109.17 1213.14 L1109.76 1213.14 L1110.34 1213.14 L1110.93 1213.14 L1111.52 1213.14 L1112.1 1213.14 L1112.69 1213.14 L1113.28 1213.14 L1113.86 1213.14 L1114.45 1213.14 L1115.04 1213.14 L1115.62 1213.14 L1116.21 1213.14 L1116.8 1213.14 L1117.38 1213.14 L1117.97 1213.14 L1118.55 1213.14 L1119.14 1213.14 L1119.73 1213.14 L1120.31 1213.14 L1120.9 1213.14 L1121.49 1213.14 L1122.07 1213.14 L1122.66 1213.14 L1123.25 1213.14 L1123.83 1213.14 L1124.42 1213.14 L1125.01 1213.14 L1125.59 1213.14 L1126.18 1213.14 L1126.76 1213.14 L1127.35 1213.14 L1127.94 1213.14 L1128.52 1213.14 L1129.11 1213.14 L1129.7 1213.14 L1130.28 1213.14 L1130.87 1213.14 L1131.46 1213.14 L1132.04 1213.14 L1132.63 1213.14 L1133.21 1213.14 L1133.8 1213.14 L1134.39 1213.14 L1134.97 1213.14 L1135.56 1213.14 L1136.15 1213.14 L1136.73 1213.14 L1137.32 1213.14 L1137.91 1213.14 L1138.49 1213.14 L1139.08 1213.14 L1139.67 1213.14 L1140.25 1213.14 L1140.84 1213.14 L1141.42 1213.14 L1142.01 1213.14 L1142.6 1213.14 L1143.18 1213.14 L1143.77 1213.14 L1144.36 1213.14 L1144.94 1213.14 L1145.53 1213.14 L1146.12 1213.14 L1146.7 1213.14 L1147.29 1213.14 L1147.88 1213.14 L1148.46 1213.14 L1149.05 1213.14 L1149.63 1213.14 L1150.22 1213.14 L1150.81 1213.14 L1151.39 1213.14 L1151.98 1213.14 L1152.57 1213.14 L1153.15 1213.14 L1153.74 1213.14 L1154.33 1213.14 L1154.91 1213.14 L1155.5 1213.14 L1156.09 1213.14 L1156.67 1213.14 L1157.26 1213.14 L1157.84 1213.14 L1158.43 1213.14 L1159.02 1213.14 L1159.6 1213.14 L1160.19 1213.14 L1160.78 1213.14 L1161.36 1213.14 L1161.95 1213.14 L1162.54 1213.14 L1163.12 1213.14 L1163.71 1213.14 L1164.29 1213.14 L1164.88 1213.14 L1165.47 1213.14 L1166.05 1213.14 L1166.64 1213.14 L1167.23 1213.14 L1167.81 1213.14 L1168.4 1213.14 L1168.99 1213.14 L1169.57 1213.14 L1170.16 1213.14 L1170.75 1213.14 L1171.33 1213.14 L1171.92 1213.14 L1172.5 1213.14 L1173.09 1213.14 L1173.68 1213.14 L1174.26 1213.14 L1174.85 1213.14 L1175.44 1213.14 L1176.02 1213.14 L1176.61 1213.14 L1177.2 1213.14 L1177.78 1213.14 L1178.37 1213.14 L1178.96 1213.14 L1179.54 1213.14 L1180.13 1213.14 L1180.71 1213.14 L1181.3 1213.14 L1181.89 1213.14 L1182.47 1213.14 L1183.06 1213.14 L1183.65 1213.14 L1184.23 1213.14 L1184.82 1213.14 L1185.41 1213.14 L1185.99 1213.14 L1186.58 1213.14 L1187.16 1213.14 L1187.75 1213.14 L1188.34 1213.14 L1188.92 1213.14 L1189.51 1213.14 L1190.1 1213.14 L1190.68 1213.14 L1191.27 1213.14 L1191.86 1213.14 L1192.44 1213.14 L1193.03 1213.14 L1193.62 1213.14 L1194.2 1213.14 L1194.79 1213.14 L1195.37 1213.14 L1195.96 1213.14 L1196.55 1213.14 L1197.13 1213.14 L1197.72 1213.14 L1198.31 1213.14 L1198.89 1213.14 L1199.48 1213.14 L1200.07 1213.14 L1200.65 1213.14 L1201.24 1213.14 L1201.83 1213.14 L1202.41 1213.14 L1203 1213.14 L1203.58 1213.14 L1204.17 1213.14 L1204.76 1213.14 L1205.34 1213.14 L1205.93 1213.14 L1206.52 1213.14 L1207.1 1213.14 L1207.69 1213.14 L1208.28 1213.14 L1208.86 1213.14 L1209.45 1213.14 L1210.03 1213.14 L1210.62 1213.14 L1211.21 1213.14 L1211.79 1213.14 L1212.38 1213.14 L1212.97 1213.14 L1213.55 1213.14 L1214.14 1213.14 L1214.73 1213.14 L1215.31 1213.14 L1215.9 1213.14 L1216.49 1213.14 L1217.07 1213.14 L1217.66 1213.14 L1218.24 1213.14 L1218.83 1213.14 L1219.42 1213.14 L1220 1213.14 L1220.59 1213.14 L1221.18 1213.14 L1221.76 1213.14 L1222.35 1213.14 L1222.94 1213.14 L1223.52 1213.14 L1224.11 1213.14 L1224.7 1213.14 L1225.28 1213.14 L1225.87 1213.14 L1226.45 1213.14 L1227.04 1213.14 L1227.63 1213.14 L1228.21 1213.14 L1228.8 1213.14 L1229.39 1213.14 L1229.97 1213.14 L1230.56 1213.14 L1231.15 1213.14 L1231.73 1213.14 L1232.32 1213.14 L1232.91 1213.14 L1233.49 1213.14 L1234.08 1213.14 L1234.66 1213.14 L1235.25 1213.14 L1235.84 1213.14 L1236.42 1213.14 L1237.01 1213.14 L1237.6 1213.14 L1238.18 1213.14 L1238.77 1213.14 L1239.36 1213.14 L1239.94 1213.14 L1240.53 1213.14 L1241.11 1213.14 L1241.7 1213.14 L1242.29 1213.14 L1242.87 1213.14 L1243.46 1213.14 L1244.05 1213.14 L1244.63 1213.14 L1245.22 1213.14 L1245.81 1213.14 L1246.39 1213.14 L1246.98 1213.14 L1247.57 1213.14 L1248.15 1213.14 L1248.74 1213.14 L1249.32 1213.14 L1249.91 1213.14 L1250.5 1213.14 L1251.08 1213.14 L1251.67 1213.14 L1252.26 1213.14 L1252.84 1213.14 L1253.43 1213.14 L1254.02 1213.14 L1254.6 1213.14 L1255.19 1213.14 L1255.78 1213.14 L1256.36 1213.14 L1256.95 1213.14 L1257.53 1213.14 L1258.12 1213.14 L1258.71 1213.14 L1259.29 1213.14 L1259.88 1213.14 L1260.47 1213.14 L1261.05 1213.14 L1261.64 1213.14 L1262.23 1213.14 L1262.81 1213.14 L1263.4 1213.14 L1263.98 1213.14 L1264.57 1213.14 L1265.16 1213.14 L1265.74 1213.14 L1266.33 1213.14 L1266.92 1213.14 L1267.5 1213.14 L1268.09 1213.14 L1268.68 1213.14 L1269.26 1213.14 L1269.85 1213.14 L1270.44 1213.14 L1271.02 1213.14 L1271.61 1213.14 L1272.19 1213.14 L1272.78 1213.14 L1273.37 1213.14 L1273.95 1213.14 L1274.54 1213.14 L1275.13 1213.14 L1275.71 1213.14 L1276.3 1213.14 L1276.89 1213.14 L1277.47 1213.14 L1278.06 1213.14 L1278.65 1213.14 L1279.23 1213.14 L1279.82 1213.14 L1280.4 1213.14 L1280.99 1213.14 L1281.58 1213.14 L1282.16 1213.14 L1282.75 1213.14 L1283.34 1213.14 L1283.92 1213.14 L1284.51 1213.14 L1285.1 1213.14 L1285.68 1213.14 L1286.27 1213.14 L1286.86 1213.14 L1287.44 1213.14 L1288.03 1213.14 L1288.61 1213.14 L1289.2 1213.14 L1289.79 1213.14 L1290.37 1213.14 L1290.96 1213.14 L1291.55 1213.14 L1292.13 1213.14 L1292.72 1213.14 L1293.31 1213.14 L1293.89 1213.14 L1294.48 1213.14 L1295.06 1213.14 L1295.65 1213.14 L1296.24 1213.14 L1296.82 1213.14 L1297.41 1213.14 L1298 1213.14 L1298.58 1213.14 L1299.17 1213.14 L1299.76 1213.14 L1300.34 1213.14 L1300.93 1213.14 L1301.52 1213.14 L1302.1 1213.14 L1302.69 1213.14 L1303.27 1213.14 L1303.86 1213.14 L1304.45 1213.14 L1305.03 1213.14 L1305.62 1213.14 L1306.21 1213.14 L1306.79 1213.14 L1307.38 1213.14 L1307.97 1213.14 L1308.55 1213.14 L1309.14 1213.14 L1309.73 1213.14 L1310.31 1213.14 L1310.9 1213.14 L1311.48 1213.14 L1312.07 1213.14 L1312.66 1213.14 L1313.24 1213.14 L1313.83 1213.14 L1314.42 1213.14 L1315 1213.14 L1315.59 1213.14 L1316.18 1213.14 L1316.76 1213.14 L1317.35 1213.14 L1317.93 1213.14 L1318.52 1213.14 L1319.11 1213.14 L1319.69 1213.14 L1320.28 1213.14 L1320.87 1213.14 L1321.45 1213.14 L1322.04 1213.14 L1322.63 1213.14 L1323.21 1213.14 L1323.8 1213.14 L1324.39 1213.14 L1324.97 1213.14 L1325.56 1213.14 L1326.14 1213.14 L1326.73 1213.14 L1327.32 1213.14 L1327.9 1213.14 L1328.49 1213.14 L1329.08 1213.14 L1329.66 1213.14 L1330.25 1213.14 L1330.84 1213.14 L1331.42 1213.14 L1332.01 1213.14 L1332.6 1213.14 L1333.18 1213.14 L1333.77 1213.14 L1334.35 1213.14 L1334.94 1213.14 L1335.53 1213.14 L1336.11 1213.14 L1336.7 1213.14 L1337.29 1213.14 L1337.87 1213.14 L1338.46 1213.14 L1339.05 1213.14 L1339.63 1213.14 L1340.22 1213.14 L1340.8 1213.14 L1341.39 1213.14 L1341.98 1213.14 L1342.56 1213.14 L1343.15 1213.14 L1343.74 1213.14 L1344.32 1213.14 L1344.91 1213.14 L1345.5 1213.14 L1346.08 1213.14 L1346.67 1213.14 L1347.26 1213.14 L1347.84 1213.14 L1348.43 1213.14 L1349.01 1213.14 L1349.6 1213.14 L1350.19 1213.14 L1350.77 1213.14 L1351.36 1213.14 L1351.95 1213.14 L1352.53 1213.14 L1353.12 1213.14 L1353.71 1213.14 L1354.29 1213.14 L1354.88 1213.14 L1355.47 1213.14 L1356.05 1213.14 L1356.64 1213.14 L1357.22 1213.14 L1357.81 1213.14 L1358.4 1213.14 L1358.98 1213.14 L1359.57 1213.14 L1360.16 1213.14 L1360.74 1213.14 L1361.33 1213.14 L1361.92 1213.14 L1362.5 1213.14 L1363.09 1213.14 L1363.68 1213.14 L1364.26 1213.14 L1364.85 1213.14 L1365.43 1213.14 L1366.02 1213.14 L1366.61 1213.14 L1367.19 1213.14 L1367.78 1213.14 L1368.37 1213.14 L1368.95 1213.14 L1369.54 1213.14 L1370.13 1213.14 L1370.71 1213.14 L1371.3 1213.14 L1371.88 1213.14 L1372.47 1213.14 L1373.06 1213.14 L1373.64 1213.14 L1374.23 1213.14 L1374.82 1213.14 L1375.4 1213.14 L1375.99 1213.14 L1376.58 1213.14 L1377.16 1213.14 L1377.75 1213.14 L1378.34 1213.14 L1378.92 1213.14 L1379.51 1213.14 L1380.09 1213.14 L1380.68 1213.14 L1381.27 1213.14 L1381.85 1213.14 L1382.44 1213.14 L1383.03 1213.14 L1383.61 1213.14 L1384.2 1213.14 L1384.79 1213.14 L1385.37 1213.14 L1385.96 1213.14 L1386.55 1213.14 L1387.13 1213.14 L1387.72 1213.14 L1388.3 1213.14 L1388.89 1213.14 L1389.48 1213.14 L1390.06 1213.14 L1390.65 1213.14 L1391.24 1213.14 L1391.82 1213.14 L1392.41 1213.14 L1393 1213.14 L1393.58 1213.14 L1394.17 1213.14 L1394.75 1213.14 L1395.34 1213.14 L1395.93 1213.14 L1396.51 1213.14 L1397.1 1213.14 L1397.69 1213.14 L1398.27 1213.14 L1398.86 1213.14 L1399.45 1213.14 L1400.03 1213.14 L1400.62 1213.14 L1401.21 1213.14 L1401.79 1213.14 L1402.38 1213.14 L1402.96 1213.14 L1403.55 1213.14 L1404.14 1213.14 L1404.72 1213.14 L1405.31 1213.14 L1405.9 1213.14 L1406.48 1213.14 L1407.07 1213.14 L1407.66 1213.14 L1408.24 1213.14 L1408.83 1213.14 L1409.42 1213.14 L1410 1213.14 L1410.59 1213.14 L1411.17 1213.14 L1411.76 1213.14 L1412.35 1213.14 L1412.93 1213.14 L1413.52 1213.14 L1414.11 1213.14 L1414.69 1213.14 L1415.28 1213.14 L1415.87 1213.14 L1416.45 1213.14 L1417.04 1213.14 L1417.63 1213.14 L1418.21 1213.14 L1418.8 1213.14 L1419.38 1213.14 L1419.97 1213.14 L1420.56 1213.14 L1421.14 1213.14 L1421.73 1213.14 L1422.32 1213.14 L1422.9 1213.14 L1423.49 1213.14 L1424.08 1213.14 L1424.66 1213.14 L1425.25 1213.14 L1425.83 1213.14 L1426.42 1213.14 L1427.01 1213.14 L1427.59 1213.14 L1428.18 1213.14 L1428.77 1213.14 L1429.35 1213.14 L1429.94 1213.14 L1430.53 1213.14 L1431.11 1213.14 L1431.7 1213.14 L1432.29 1213.14 L1432.87 1213.14 L1433.46 1213.14 L1434.04 1213.14 L1434.63 1213.14 L1435.22 1213.14 L1435.8 1213.14 L1436.39 1213.14 L1436.98 1213.14 L1437.56 1213.14 L1438.15 1213.14 L1438.74 1213.14 L1439.32 1213.14 L1439.91 1213.14 L1440.5 1213.14 L1441.08 1213.14 L1441.67 1213.14 L1442.25 1213.14 L1442.84 1213.14 L1443.43 1213.14 L1444.01 1213.14 L1444.6 1213.14 L1445.19 1213.14 L1445.77 1213.14 L1446.36 1213.14 L1446.95 1213.14 L1447.53 1213.14 L1448.12 1213.14 L1448.7 1213.14 L1449.29 1213.14 L1449.88 1213.14 L1450.46 1213.14 L1451.05 1213.14 L1451.64 1213.14 L1452.22 1213.14 L1452.81 1213.14 L1453.4 1213.14 L1453.98 1213.14 L1454.57 1213.14 L1455.16 1213.14 L1455.74 1213.14 L1456.33 1213.14 L1456.91 1213.14 L1457.5 1213.14 L1458.09 1213.14 L1458.67 1213.14 L1459.26 1213.14 L1459.85 1213.14 L1460.43 1213.14 L1461.02 1213.14 L1461.61 1213.14 L1462.19 1213.14 L1462.78 1213.14 L1463.37 1213.14 L1463.95 1213.14 L1464.54 1213.14 L1465.12 1213.14 L1465.71 1213.14 L1466.3 1213.14 L1466.88 1213.14 L1467.47 1213.14 L1468.06 1213.14 L1468.64 1213.14 L1469.23 1213.14 L1469.82 1213.14 L1470.4 1213.14 L1470.99 1213.14 L1471.57 1213.14 L1472.16 1213.14 L1472.75 1213.14 L1473.33 1213.14 L1473.92 1213.14 L1474.51 1213.14 L1475.09 1213.14 L1475.68 1213.14 L1476.27 1213.14 L1476.85 1213.14 L1477.44 1213.14 L1478.03 1213.14 L1478.61 1213.14 L1479.2 1213.14 L1479.78 1213.14 L1480.37 1213.14 L1480.96 1213.14 L1481.54 1213.14 L1482.13 1213.14 L1482.72 1213.14 L1483.3 1213.14 L1483.89 1213.14 L1484.48 1213.14 L1485.06 1213.14 L1485.65 1213.14 L1486.24 1213.14 L1486.82 1213.14 L1487.41 1213.14 L1487.99 1213.14 L1488.58 1213.14 L1489.17 1213.14 L1489.75 1213.14 L1490.34 1213.14 L1490.93 1213.14 L1491.51 1213.14 L1492.1 1213.14 L1492.69 1213.14 L1493.27 1213.14 L1493.86 1213.14 L1494.45 1213.14 L1495.03 1213.14 L1495.62 1213.14 L1496.2 1213.14 L1496.79 1213.14 L1497.38 1213.14 L1497.96 1213.14 L1498.55 1213.14 L1499.14 1213.14 L1499.72 1213.14 L1500.31 1213.14 L1500.9 1213.14 L1501.48 1213.14 L1502.07 1213.14 L1502.65 1213.14 L1503.24 1213.14 L1503.83 1213.14 L1504.41 1213.14 L1505 1213.14 L1505.59 1213.14 L1506.17 1213.14 L1506.76 1213.14 L1507.35 1213.14 L1507.93 1213.14 L1508.52 1213.14 L1509.11 1213.14 L1509.69 1213.14 L1510.28 1213.14 L1510.86 1213.14 L1511.45 1213.14 L1512.04 1213.14 L1512.62 1213.14 L1513.21 1213.14 L1513.8 1213.14 L1514.38 1213.14 L1514.97 1213.14 L1515.56 1213.14 L1516.14 1213.14 L1516.73 1213.14 L1517.32 1213.14 L1517.9 1213.14 L1518.49 1213.14 L1519.07 1213.14 L1519.66 1213.14 L1520.25 1213.14 L1520.83 1213.14 L1521.42 1213.14 L1522.01 1213.14 L1522.59 1213.14 L1523.18 1213.14 L1523.77 1213.14 L1524.35 1213.14 L1524.94 1213.14 L1525.52 1213.14 L1526.11 1213.14 L1526.7 1213.14 L1527.28 1213.14 L1527.87 1213.14 L1528.46 1213.14 L1529.04 1213.14 L1529.63 1213.14 L1530.22 1213.14 L1530.8 1213.14 L1531.39 1213.14 L1531.98 1213.14 L1532.56 1213.14 L1533.15 1213.14 L1533.73 1213.14 L1534.32 1213.14 L1534.91 1213.14 L1535.49 1213.14 L1536.08 1213.14 L1536.67 1213.14 L1537.25 1213.14 L1537.84 1213.14 L1538.43 1213.14 L1539.01 1213.14 L1539.6 1213.14 L1540.19 1213.14 L1540.77 1213.14 L1541.36 1213.14 L1541.94 1213.14 L1542.53 1213.14 L1543.12 1213.14 L1543.7 1213.14 L1544.29 1213.14 L1544.88 1213.14 L1545.46 1213.14 L1546.05 1213.14 L1546.64 1213.14 L1547.22 1213.14 L1547.81 1213.14 L1548.4 1213.14 L1548.98 1213.14 L1549.57 1213.14 L1550.15 1213.14 L1550.74 1213.14 L1551.33 1213.14 L1551.91 1213.14 L1552.5 1213.14 L1553.09 1213.14 L1553.67 1213.14 L1554.26 1213.14 L1554.85 1213.14 L1555.43 1213.14 L1556.02 1213.14 L1556.6 1213.14 L1557.19 1213.14 L1557.78 1213.14 L1558.36 1213.14 L1558.95 1213.14 L1559.54 1213.14 L1560.12 1213.14 L1560.71 1213.14 L1561.3 1213.14 L1561.88 1213.14 L1562.47 1213.14 L1563.06 1213.14 L1563.64 1213.14 L1564.23 1213.14 L1564.81 1213.14 L1565.4 1213.14 L1565.99 1213.14 L1566.57 1213.14 L1567.16 1213.14 L1567.75 1213.14 L1568.33 1213.14 L1568.92 1213.14 L1569.51 1213.14 L1570.09 1213.14 L1570.68 1213.14 L1571.27 1213.14 L1571.85 1213.14 L1572.44 1213.14 L1573.02 1213.14 L1573.61 1213.14 L1574.2 1213.14 L1574.78 1213.14 L1575.37 1213.14 L1575.96 1213.14 L1576.54 1213.14 L1577.13 1213.14 L1577.72 1213.14 L1578.3 1213.14 L1578.89 1213.14 L1579.47 1213.14 L1580.06 1213.14 L1580.65 1213.14 L1581.23 1213.14 L1581.82 1213.14 L1582.41 1213.14 L1582.99 1213.14 L1583.58 1213.14 L1584.17 1213.14 L1584.75 1213.14 L1585.34 1213.14 L1585.93 1213.14 L1586.51 1213.14 L1587.1 1213.14 L1587.68 1213.14 L1588.27 1213.14 L1588.86 1213.14 L1589.44 1213.14 L1590.03 1213.14 L1590.62 1213.14 L1591.2 1213.14 L1591.79 1213.14 L1592.38 1213.14 L1592.96 1213.14 L1593.55 1213.14 L1594.14 1213.14 L1594.72 1213.14 L1595.31 1213.14 L1595.89 1213.14 L1596.48 1213.14 L1597.07 1213.14 L1597.65 1213.14 L1598.24 1213.14 L1598.83 1213.14 L1599.41 1213.14 L1600 1213.14 L1600.59 1213.14 L1601.17 1213.14 L1601.76 1213.14 L1602.34 1213.14 L1602.93 1213.14 L1603.52 1213.14 L1604.1 1213.14 L1604.69 1213.14 L1605.28 1213.14 L1605.86 1213.14 L1606.45 1213.14 L1607.04 1213.14 L1607.62 1213.14 L1608.21 1213.14 L1608.8 1213.14 L1609.38 1213.14 L1609.97 1213.14 L1610.55 1213.14 L1611.14 1213.14 L1611.73 1213.14 L1612.31 1213.14 L1612.9 1213.14 L1613.49 1213.14 L1614.07 1213.14 L1614.66 1213.14 L1615.25 1213.14 L1615.83 1213.14 L1616.42 1213.14 L1617.01 1213.14 L1617.59 1213.14 L1618.18 1213.14 L1618.76 1213.14 L1619.35 1213.14 L1619.94 1213.14 L1620.52 1213.14 L1621.11 1213.14 L1621.7 1213.14 L1622.28 1213.14 L1622.87 1213.14 L1623.46 1213.14 L1624.04 1213.14 L1624.63 1213.14 L1625.22 1213.14 L1625.8 1213.14 L1626.39 1213.14 L1626.97 1213.14 L1627.56 1213.14 L1628.15 1213.14 L1628.73 1213.14 L1629.32 1213.14 L1629.91 1213.14 L1630.49 1213.14 L1631.08 1213.14 L1631.67 1213.14 L1632.25 1213.14 L1632.84 1213.14 L1633.42 1213.14 L1634.01 1213.14 L1634.6 1213.14 L1635.18 1213.14 L1635.77 1213.14 L1636.36 1213.14 L1636.94 1213.14 L1637.53 1213.14 L1638.12 1213.14 L1638.7 1213.14 L1639.29 1213.14 L1639.88 1213.14 L1640.46 1213.14 L1641.05 1213.14 L1641.63 1213.14 L1642.22 1213.14 L1642.81 1213.14 L1643.39 1213.14 L1643.98 1213.14 L1644.57 1213.14 L1645.15 1213.14 L1645.74 1213.14 L1646.33 1213.14 L1646.91 1213.14 L1647.5 1213.14 L1648.09 1213.14 L1648.67 1213.14 L1649.26 1213.14 L1649.84 1213.14 L1650.43 1213.14 L1651.02 1213.14 L1651.6 1213.14 L1652.19 1213.14 L1652.78 1213.14 L1653.36 1213.14 L1653.95 1213.14 L1654.54 1213.14 L1655.12 1213.14 L1655.71 1213.14 L1656.29 1213.14 L1656.88 1213.14 L1657.47 1213.14 L1658.05 1213.14 L1658.64 1213.14 L1659.23 1213.14 L1659.81 1213.14 L1660.4 1213.14 L1660.99 1213.14 L1661.57 1213.14 L1662.16 1213.14 L1662.75 1213.14 L1663.33 1213.14 L1663.92 1213.14 L1664.5 1213.14 L1665.09 1213.14 L1665.68 1213.14 L1666.26 1213.14 L1666.85 1213.14 L1667.44 1213.14 L1668.02 1213.14 L1668.61 1213.14 L1669.2 1213.14 L1669.78 1213.14 L1670.37 1213.14 L1670.96 1213.14 L1671.54 1213.14 L1672.13 1213.14 L1672.71 1213.14 L1673.3 1213.14 L1673.89 1213.14 L1674.47 1213.14 L1675.06 1213.14 L1675.65 1213.14 L1676.23 1213.14 L1676.82 1213.14 L1677.41 1213.14 L1677.99 1213.14 L1678.58 1213.14 L1679.17 1213.14 L1679.75 1213.14 L1680.34 1213.14 L1680.92 1213.14 L1681.51 1213.14 L1682.1 1213.14 L1682.68 1213.14 L1683.27 1213.14 L1683.86 1213.14 L1684.44 1213.14 L1685.03 1213.14 L1685.62 1213.14 L1686.2 1213.14 L1686.79 1213.14 L1687.37 1213.14 L1687.96 1213.14 L1688.55 1213.14 L1689.13 1213.14 L1689.72 1213.14 L1690.31 1213.14 L1690.89 1213.14 L1691.48 1213.14 L1692.07 1213.14 L1692.65 1213.14 L1693.24 1213.14 L1693.83 1213.14 L1694.41 1213.14 L1695 1213.14 L1695.58 1213.14 L1696.17 1213.14 L1696.76 1213.14 L1697.34 1213.14 L1697.93 1213.14 L1698.52 1213.14 L1699.1 1213.14 L1699.69 1213.14 L1700.28 1213.14 L1700.86 1213.14 L1701.45 1213.14 L1702.04 1213.14 L1702.62 1213.14 L1703.21 1213.14 L1703.79 1213.14 L1704.38 1213.14 L1704.97 1213.14 L1705.55 1213.14 L1706.14 1213.14 L1706.73 1213.14 L1707.31 1213.14 L1707.9 1213.14 L1708.49 1213.14 L1709.07 1213.14 L1709.66 1213.14 L1710.24 1213.14 L1710.83 1213.14 L1711.42 1213.14 L1712 1213.14 L1712.59 1213.14 L1713.18 1213.14 L1713.76 1213.14 L1714.35 1213.14 L1714.94 1213.14 L1715.52 1213.14 L1716.11 1213.14 L1716.7 1213.14 L1717.28 1213.14 L1717.87 1213.14 L1718.45 1213.14 L1719.04 1213.14 L1719.63 1213.14 L1720.21 1213.14 L1720.8 1213.14 L1721.39 1213.14 L1721.97 1213.14 L1722.56 1213.14 L1723.15 1213.14 L1723.73 1213.14 L1724.32 1213.14 L1724.91 1213.14 L1725.49 1213.14 L1726.08 1213.14 L1726.66 1213.14 L1727.25 1213.14 L1727.84 1213.14 L1728.42 1213.14 L1729.01 1213.14 L1729.6 1213.14 L1730.18 1213.14 L1730.77 1213.14 L1731.36 1213.14 L1731.94 1213.14 L1732.53 1213.14 L1733.11 1213.14 L1733.7 1213.14 L1734.29 1213.14 L1734.87 1213.14 L1735.46 1213.14 L1736.05 1213.14 L1736.63 1213.14 L1737.22 1213.14 L1737.81 1213.14 L1738.39 1213.14 L1738.98 1213.14 L1739.57 1213.14 L1740.15 1213.14 L1740.74 1213.14 L1741.32 1213.14 L1741.91 1213.14 L1742.5 1213.14 L1743.08 1213.14 L1743.67 1213.14 L1744.26 1213.14 L1744.84 1213.14 L1745.43 1213.14 L1746.02 1213.14 L1746.6 1213.14 L1747.19 1213.14 L1747.78 1213.14 L1748.36 1213.14 L1748.95 1213.14 L1749.53 1213.14 L1750.12 1213.14 L1750.71 1213.14 L1751.29 1213.14 L1751.88 1213.14 L1752.47 1213.14 L1753.05 1213.14 L1753.64 1213.14 L1754.23 1213.14 L1754.81 1213.14 L1755.4 1213.14 L1755.99 1213.14 L1756.57 1213.14 L1757.16 1213.14 L1757.74 1213.14 L1758.33 1213.14 L1758.92 1213.14 L1759.5 1213.14 L1760.09 1213.14 L1760.68 1213.14 L1761.26 1213.14 L1761.85 1213.14 L1762.44 1213.14 L1763.02 1213.14 L1763.61 1213.14 L1764.19 1213.14 L1764.78 1213.14 L1765.37 1213.14 L1765.95 1213.14 L1766.54 1213.14 L1767.13 1213.14 L1767.71 1213.14 L1768.3 1213.14 L1768.89 1213.14 L1769.47 1213.14 L1770.06 1213.14 L1770.65 1213.14 L1771.23 1213.14 L1771.82 1213.14 L1772.4 1213.14 L1772.99 1213.14 L1773.58 1213.14 L1774.16 1213.14 L1774.75 1213.14 L1775.34 1213.14 L1775.92 1213.14 L1776.51 1213.14 L1777.1 1213.14 L1777.68 1213.14 L1778.27 1213.14 L1778.86 1213.14 L1779.44 1213.14 L1780.03 1213.14 L1780.61 1213.14 L1781.2 1213.14 L1781.79 1213.14 L1782.37 1213.14 L1782.96 1213.14 L1783.55 1213.14 L1784.13 1213.14 L1784.72 1213.14 L1785.31 1213.14 L1785.89 1213.14 L1786.48 1213.14 L1787.06 1213.14 L1787.65 1213.14 L1788.24 1213.14 L1788.82 1213.14 L1789.41 1213.14 L1790 1213.14 L1790.58 1213.14 L1791.17 1213.14 L1791.76 1213.14 L1792.34 1213.14 L1792.93 1213.14 L1793.52 1213.14 L1794.1 1213.14 L1794.69 1213.14 L1795.27 1213.14 L1795.86 1213.14 L1796.45 1213.14 L1797.03 1213.14 L1797.62 1213.14 L1798.21 1213.14 L1798.79 1213.14 L1799.38 1213.14 L1799.97 1213.14 L1800.55 1213.14 L1801.14 1213.14 L1801.73 1213.14 L1802.31 1213.14 L1802.9 1213.14 L1803.48 1213.14 L1804.07 1213.14 L1804.66 1213.14 L1805.24 1213.14 L1805.83 1213.14 L1806.42 1213.14 L1807 1213.14 L1807.59 1213.14 L1808.18 1213.14 L1808.76 1213.14 L1809.35 1213.14 L1809.94 1213.14 L1810.52 1213.14 L1811.11 1213.14 L1811.69 1213.14 L1812.28 1213.14 L1812.87 1213.14 L1813.45 1213.14 L1814.04 1213.14 L1814.63 1213.14 L1815.21 1213.14 L1815.8 1213.14 L1816.39 1213.14 L1816.97 1213.14 L1817.56 1213.14 L1818.14 1213.14 L1818.73 1213.14 L1819.32 1213.14 L1819.9 1213.14 L1820.49 1213.14 L1821.08 1213.14 L1821.66 1213.14 L1822.25 1213.14 L1822.84 1213.14 L1823.42 1213.14 L1824.01 1213.14 L1824.6 1213.14 L1825.18 1213.14 L1825.77 1213.14 L1826.35 1213.14 L1826.94 1213.14 L1827.53 1213.14 L1828.11 1213.14 L1828.7 1213.14 L1829.29 1213.14 L1829.87 1213.14 L1830.46 1213.14 L1831.05 1213.14 L1831.63 1213.14 L1832.22 1213.14 L1832.81 1213.14 L1833.39 1213.14 L1833.98 1213.14 L1834.56 1213.14 L1835.15 1213.14 L1835.74 1213.14 L1836.32 1213.14 L1836.91 1213.14 L1837.5 1213.14 L1838.08 1213.14 L1838.67 1213.14 L1839.26 1213.14 L1839.84 1213.14 L1840.43 1213.14 L1841.01 1213.14 L1841.6 1213.14 L1842.19 1213.14 L1842.77 1213.14 L1843.36 1213.14 L1843.95 1213.14 L1844.53 1213.14 L1845.12 1213.14 L1845.71 1213.14 L1846.29 1213.14 L1846.88 1213.14 L1847.47 1213.14 L1848.05 1213.14 L1848.64 1213.14 L1849.22 1213.14 L1849.81 1213.14 L1850.4 1213.14 L1850.98 1213.14 L1851.57 1213.14 L1852.16 1213.14 L1852.74 1213.14 L1853.33 1213.14 L1853.92 1213.14 L1854.5 1213.14 L1855.09 1213.14 L1855.68 1213.14 L1856.26 1213.14 L1856.85 1213.14 L1857.43 1213.14 L1858.02 1213.14 L1858.61 1213.14 L1859.19 1213.14 L1859.78 1213.14 L1860.37 1213.14 L1860.95 1213.14 L1861.54 1213.14 L1862.13 1213.14 L1862.71 1213.14 L1863.3 1213.14 L1863.88 1213.14 L1864.47 1213.14 L1865.06 1213.14 L1865.64 1213.14 L1866.23 1213.14 L1866.82 1213.14 L1867.4 1213.14 L1867.99 1213.14 L1868.58 1213.14 L1869.16 1213.14 L1869.75 1213.14 L1870.34 1213.14 L1870.92 1213.14 L1871.51 1213.14 L1872.09 1213.14 L1872.68 1213.14 L1873.27 1213.14 L1873.85 1213.14 L1874.44 1213.14 L1875.03 1213.14 L1875.61 1213.14 L1876.2 1213.14 L1876.79 1213.14 L1877.37 1213.14 L1877.96 1213.14 L1878.55 1213.14 L1879.13 1213.14 L1879.72 1213.14 L1880.3 1213.14 L1880.89 1213.14 L1881.48 1213.14 L1882.06 1213.14 L1882.65 1213.14 L1883.24 1213.14 L1883.82 1213.14 L1884.41 1213.14 L1885 1213.14 L1885.58 1213.14 L1886.17 1213.14 L1886.76 1213.14 L1887.34 1213.14 L1887.93 1213.14 L1888.51 1213.14 L1889.1 1213.14 L1889.69 1213.14 L1890.27 1213.14 L1890.86 1213.14 L1891.45 1213.14 L1892.03 1213.14 L1892.62 1213.14 L1893.21 1213.14 L1893.79 1213.14 L1894.38 1213.14 L1894.96 1213.14 L1895.55 1213.14 L1896.14 1213.14 L1896.72 1213.14 L1897.31 1213.14 L1897.9 1213.14 L1898.48 1213.14 L1899.07 1213.14 L1899.66 1213.14 L1900.24 1213.14 L1900.83 1213.14 L1901.42 1213.14 L1902 1213.14 L1902.59 1213.14 L1903.17 1213.14 L1903.76 1213.14 L1904.35 1213.14 L1904.93 1213.14 L1905.52 1213.14 L1906.11 1213.14 L1906.69 1213.14 L1907.28 1213.14 L1907.87 1213.14 L1908.45 1213.14 L1909.04 1213.14 L1909.63 1213.14 L1910.21 1213.14 L1910.8 1213.14 L1911.38 1213.14 L1911.97 1213.14 L1912.56 1213.14 L1913.14 1213.14 L1913.73 1213.14 L1914.32 1213.14 L1914.9 1213.14 L1915.49 1213.14 L1916.08 1213.14 L1916.66 1213.14 L1917.25 1213.14 L1917.83 1213.14 L1918.42 1213.14 L1919.01 1213.14 L1919.59 1213.14 L1920.18 1213.14 L1920.77 1213.14 L1921.35 1213.14 L1921.94 1213.14 L1922.53 1213.14 L1923.11 1213.14 L1923.7 1213.14 L1924.29 1213.14 L1924.87 1213.14 L1925.46 1213.14 L1926.04 1213.14 L1926.63 1213.14 L1927.22 1213.14 L1927.8 1213.14 L1928.39 1213.14 L1928.98 1213.14 L1929.56 1213.14 L1930.15 1213.14 L1930.74 1213.14 L1931.32 1213.14 L1931.91 1213.14 L1932.5 1213.14 L1933.08 1213.14 L1933.67 1213.14 L1934.25 1213.14 L1934.84 1213.14 L1935.43 1213.14 L1936.01 1213.14 L1936.6 1213.14 L1937.19 1213.14 L1937.77 1213.14 L1938.36 1213.14 L1938.95 1213.14 L1939.53 1213.14 L1940.12 1213.14 L1940.71 1213.14 L1941.29 1213.14 L1941.88 1213.14 L1942.46 1213.14 L1943.05 1213.14 L1943.64 1213.14 L1944.22 1213.14 L1944.81 1213.14 L1945.4 1213.14 L1945.98 1213.14 L1946.57 1213.14 L1947.16 1213.14 L1947.74 1213.14 L1948.33 1213.14 L1948.91 1213.14 L1949.5 1213.14 L1950.09 1213.14 L1950.67 1213.14 L1951.26 1213.14 L1951.85 1213.14 L1952.43 1213.14 L1953.02 1213.14 L1953.61 1213.14 L1954.19 1213.14 L1954.78 1213.14 L1955.37 1213.14 L1955.95 1213.14 L1956.54 1213.14 L1957.12 1213.14 L1957.71 1213.14 L1958.3 1213.14 L1958.88 1213.14 L1959.47 1213.14 L1960.06 1213.14 L1960.64 1213.14 L1961.23 1213.14 L1961.82 1213.14 L1962.4 1213.14 L1962.99 1213.14 L1963.58 1213.14 L1964.16 1213.14 L1964.75 1213.14 L1965.33 1213.14 L1965.92 1213.14 L1966.51 1213.14 L1967.09 1213.14 L1967.68 1213.14 L1968.27 1213.14 L1968.85 1213.14 L1969.44 1213.14 L1970.03 1213.14 L1970.61 1213.14 L1971.2 1213.14 L1971.78 1213.14 L1972.37 1213.14 L1972.96 1213.14 L1973.54 1213.14 L1974.13 1213.14 L1974.72 1213.14 L1975.3 1213.14 L1975.89 1213.14 L1976.48 1213.14 L1977.06 1213.14 L1977.65 1213.14 L1978.24 1213.14 L1978.82 1213.14 L1979.41 1213.14 L1979.99 1213.14 L1980.58 1213.14 L1981.17 1213.14 L1981.75 1213.14 L1982.34 1213.14 L1982.93 1213.14 L1983.51 1213.14 L1984.1 1213.14 L1984.69 1213.14 L1985.27 1213.14 L1985.86 1213.14 L1986.45 1213.14 L1987.03 1213.14 L1987.62 1213.14 L1988.2 1213.14 L1988.79 1213.14 L1989.38 1213.14 L1989.96 1213.14 L1990.55 1213.14 L1991.14 1213.14 L1991.72 1213.14 L1992.31 1213.14 L1992.9 1213.14 L1993.48 1213.14 L1994.07 1213.14 L1994.65 1213.14 L1995.24 1213.14 L1995.83 1213.14 L1996.41 1213.14 L1997 1213.14 L1997.59 1213.14 L1998.17 1213.14 L1998.76 1213.14 L1999.35 1213.14 L1999.93 1213.14 L2000.52 1213.14 L2001.11 1213.14 L2001.69 1213.14 L2002.28 1213.14 L2002.86 1213.14 L2003.45 1213.14 L2004.04 1213.14 L2004.62 1213.14 L2005.21 1213.14 L2005.8 1213.14 L2006.38 1213.14 L2006.97 1213.14 L2007.56 1213.14 L2008.14 1213.14 L2008.73 1213.14 L2009.32 1213.14 L2009.9 1213.14 L2010.49 1213.14 L2011.07 1213.14 L2011.66 1213.14 L2012.25 1213.14 L2012.83 1213.14 L2013.42 1213.14 L2014.01 1213.14 L2014.59 1213.14 L2015.18 1213.14 L2015.77 1213.14 L2016.35 1213.14 L2016.94 1213.14 L2017.53 1213.14 L2018.11 1213.14 L2018.7 1213.14 L2019.28 1213.14 L2019.87 1213.14 L2020.46 1213.14 L2021.04 1213.14 L2021.63 1213.14 L2022.22 1213.14 L2022.8 1213.14 L2023.39 1213.14 L2023.98 1213.14 L2024.56 1213.14 L2025.15 1213.14 L2025.73 1213.14 L2026.32 1213.14 L2026.91 1213.14 L2027.49 1213.14 L2028.08 1213.14 L2028.67 1213.14 L2029.25 1213.14 L2029.84 1213.14 L2030.43 1213.14 L2031.01 1213.14 L2031.6 1213.14 L2032.19 1213.14 L2032.77 1213.14 L2033.36 1213.14 L2033.94 1213.14 L2034.53 1213.14 L2035.12 1213.14 L2035.7 1213.14 L2036.29 1213.14 L2036.88 1213.14 L2037.46 1213.14 L2038.05 1213.14 L2038.64 1213.14 L2039.22 1213.14 L2039.81 1213.14 L2040.4 1213.14 L2040.98 1213.14 L2041.57 1213.14 L2042.15 1213.14 L2042.74 1213.14 L2043.33 1213.14 L2043.91 1213.14 L2044.5 1213.14 L2045.09 1213.14 L2045.67 1213.14 L2046.26 1213.14 L2046.85 1213.14 L2047.43 1213.14 L2048.02 1213.14 L2048.6 1213.14 L2049.19 1213.14 L2049.78 1213.14 L2050.36 1213.14 L2050.95 1213.14 L2051.54 1213.14 L2052.12 1213.14 L2052.71 1213.14 L2053.3 1213.14 L2053.88 1213.14 L2054.47 1213.14 L2055.06 1213.14 L2055.64 1213.14 L2056.23 1213.14 L2056.81 1213.14 L2057.4 1213.14 L2057.99 1213.14 L2058.57 1213.14 L2059.16 1213.14 L2059.75 1213.14 L2060.33 1213.14 L2060.92 1213.14 L2061.51 1213.14 L2062.09 1213.14 L2062.68 1213.14 L2063.27 1213.14 L2063.85 1213.14 L2064.44 1213.14 L2065.02 1213.14 L2065.61 1213.14 L2066.2 1213.14 L2066.78 1213.14 L2067.37 1213.14 L2067.96 1213.14 L2068.54 1213.14 L2069.13 1213.14 L2069.72 1213.14 L2070.3 1213.14 L2070.89 1213.14 L2071.48 1213.14 L2072.06 1213.14 L2072.65 1213.14 L2073.23 1213.14 L2073.82 1213.14 L2074.41 1213.14 L2074.99 1213.14 L2075.58 1213.14 L2076.17 1213.14 L2076.75 1213.14 L2077.34 1213.14 L2077.93 1213.14 L2078.51 1213.14 L2079.1 1213.14 L2079.68 1213.14 L2080.27 1213.14 L2080.86 1213.14 L2081.44 1213.14 L2082.03 1213.14 L2082.62 1213.14 L2083.2 1213.14 L2083.79 1213.14 L2084.38 1213.14 L2084.96 1213.14 L2085.55 1213.14 L2086.14 1213.14 L2086.72 1213.14 L2087.31 1213.14 L2087.89 1213.14 L2088.48 1213.14 L2089.07 1213.14 L2089.65 1213.14 L2090.24 1213.14 L2090.83 1213.14 L2091.41 1213.14 L2092 1213.14 L2092.59 1213.14 L2093.17 1213.14 L2093.76 1213.14 L2094.35 1213.14 L2094.93 1213.14 L2095.52 1213.14 L2096.1 1213.14 L2096.69 1213.14 L2097.28 1213.14 L2097.86 1213.14 L2098.45 1213.14 L2099.04 1213.14 L2099.62 1213.14 L2100.21 1213.14 L2100.8 1213.14 L2101.38 1213.14 L2101.97 1213.14 L2102.55 1213.14 L2103.14 1213.14 L2103.73 1213.14 L2104.31 1213.14 L2104.9 1213.14 L2105.49 1213.14 L2106.07 1213.14 L2106.66 1213.14 L2107.25 1213.14 L2107.83 1213.14 L2108.42 1213.14 L2109.01 1213.14 L2109.59 1213.14 L2110.18 1213.14 L2110.76 1213.14 L2111.35 1213.14 L2111.94 1213.14 L2112.52 1213.14 L2113.11 1213.14 L2113.7 1213.14 L2114.28 1213.14 L2114.87 1213.14 L2115.46 1213.14 L2116.04 1213.14 L2116.63 1213.14 L2117.22 1213.14 L2117.8 1213.14 L2118.39 1213.14 L2118.97 1213.14 L2119.56 1213.14 L2120.15 1213.14 L2120.73 1213.14 L2121.32 1213.14 L2121.91 1213.14 L2122.49 1213.14 L2123.08 1213.14 L2123.67 1213.14 L2124.25 1213.14 L2124.84 1213.14 L2125.42 1213.14 L2126.01 1213.14 L2126.6 1213.14 L2127.18 1213.14 L2127.77 1213.14 L2128.36 1213.14 L2128.94 1213.14 L2129.53 1213.14 L2130.12 1213.14 L2130.7 1213.14 L2131.29 1213.14 L2131.88 1213.14 L2132.46 1213.14 L2133.05 1213.14 L2133.63 1213.14 L2134.22 1213.14 L2134.81 1213.14 L2135.39 1213.14 L2135.98 1213.14 L2136.57 1213.14 L2137.15 1213.14 L2137.74 1213.14 L2138.33 1213.14 L2138.91 1213.14 L2139.5 1213.14 L2140.09 1213.14 L2140.67 1213.14 L2141.26 1213.14 L2141.84 1213.14 L2142.43 1213.14 L2143.02 1213.14 L2143.6 1213.14 L2144.19 1213.14 L2144.78 1213.14 L2145.36 1213.14 L2145.95 1213.14 L2146.54 1213.14 L2147.12 1213.14 L2147.71 1213.14 L2148.3 1213.14 L2148.88 1213.14 L2149.47 1213.14 L2150.05 1213.14 L2150.64 1213.14 L2151.23 1213.14 L2151.81 1213.14 L2152.4 1213.14 L2152.99 1213.14 L2153.57 1213.14 L2154.16 1213.14 L2154.75 1213.14 L2155.33 1213.14 L2155.92 1213.14 L2156.5 1213.14 L2157.09 1213.14 L2157.68 1213.14 L2158.26 1213.14 L2158.26 1212.44 L2157.68 1212.44 L2157.09 1212.44 L2156.5 1212.44 L2155.92 1212.44 L2155.33 1212.44 L2154.75 1212.44 L2154.16 1212.44 L2153.57 1212.44 L2152.99 1212.44 L2152.4 1212.44 L2151.81 1212.44 L2151.23 1212.44 L2150.64 1212.44 L2150.05 1212.44 L2149.47 1212.44 L2148.88 1212.44 L2148.3 1212.44 L2147.71 1212.44 L2147.12 1212.44 L2146.54 1212.44 L2145.95 1212.44 L2145.36 1212.44 L2144.78 1212.44 L2144.19 1212.44 L2143.6 1212.44 L2143.02 1212.44 L2142.43 1212.44 L2141.84 1212.44 L2141.26 1212.44 L2140.67 1212.44 L2140.09 1212.44 L2139.5 1212.44 L2138.91 1212.44 L2138.33 1212.44 L2137.74 1212.44 L2137.15 1212.44 L2136.57 1212.44 L2135.98 1212.44 L2135.39 1212.44 L2134.81 1212.44 L2134.22 1212.44 L2133.63 1212.44 L2133.05 1212.44 L2132.46 1212.44 L2131.88 1212.44 L2131.29 1212.44 L2130.7 1212.44 L2130.12 1212.44 L2129.53 1212.44 L2128.94 1212.44 L2128.36 1212.44 L2127.77 1212.44 L2127.18 1212.44 L2126.6 1212.44 L2126.01 1212.44 L2125.42 1212.44 L2124.84 1212.44 L2124.25 1212.44 L2123.67 1212.44 L2123.08 1212.44 L2122.49 1212.44 L2121.91 1212.44 L2121.32 1212.44 L2120.73 1212.44 L2120.15 1212.44 L2119.56 1212.44 L2118.97 1212.44 L2118.39 1212.44 L2117.8 1212.44 L2117.22 1212.44 L2116.63 1212.44 L2116.04 1212.44 L2115.46 1212.44 L2114.87 1212.44 L2114.28 1212.44 L2113.7 1212.44 L2113.11 1212.44 L2112.52 1212.44 L2111.94 1212.44 L2111.35 1212.44 L2110.76 1212.44 L2110.18 1212.44 L2109.59 1212.44 L2109.01 1212.44 L2108.42 1212.44 L2107.83 1212.44 L2107.25 1212.44 L2106.66 1212.44 L2106.07 1212.44 L2105.49 1212.44 L2104.9 1212.44 L2104.31 1212.44 L2103.73 1212.44 L2103.14 1212.44 L2102.55 1212.44 L2101.97 1212.44 L2101.38 1212.44 L2100.8 1212.44 L2100.21 1212.44 L2099.62 1212.44 L2099.04 1212.44 L2098.45 1212.44 L2097.86 1212.44 L2097.28 1212.44 L2096.69 1212.44 L2096.1 1212.44 L2095.52 1212.44 L2094.93 1212.44 L2094.35 1212.44 L2093.76 1212.44 L2093.17 1212.44 L2092.59 1212.44 L2092 1212.44 L2091.41 1212.44 L2090.83 1212.44 L2090.24 1212.44 L2089.65 1212.44 L2089.07 1212.44 L2088.48 1212.44 L2087.89 1212.44 L2087.31 1212.44 L2086.72 1212.44 L2086.14 1212.44 L2085.55 1212.44 L2084.96 1212.44 L2084.38 1212.44 L2083.79 1212.44 L2083.2 1212.44 L2082.62 1212.44 L2082.03 1212.44 L2081.44 1212.44 L2080.86 1212.44 L2080.27 1212.44 L2079.68 1212.44 L2079.1 1212.44 L2078.51 1212.44 L2077.93 1212.44 L2077.34 1212.44 L2076.75 1212.44 L2076.17 1212.44 L2075.58 1212.44 L2074.99 1212.44 L2074.41 1212.44 L2073.82 1212.44 L2073.23 1212.44 L2072.65 1212.44 L2072.06 1212.44 L2071.48 1212.44 L2070.89 1212.44 L2070.3 1212.44 L2069.72 1212.44 L2069.13 1212.44 L2068.54 1212.44 L2067.96 1212.44 L2067.37 1212.44 L2066.78 1212.44 L2066.2 1212.44 L2065.61 1212.44 L2065.02 1212.44 L2064.44 1212.44 L2063.85 1212.44 L2063.27 1212.44 L2062.68 1212.44 L2062.09 1212.44 L2061.51 1212.44 L2060.92 1212.44 L2060.33 1212.44 L2059.75 1212.44 L2059.16 1212.44 L2058.57 1212.44 L2057.99 1212.44 L2057.4 1212.44 L2056.81 1212.44 L2056.23 1212.44 L2055.64 1212.44 L2055.06 1212.44 L2054.47 1212.44 L2053.88 1212.44 L2053.3 1212.44 L2052.71 1212.44 L2052.12 1212.44 L2051.54 1212.44 L2050.95 1212.44 L2050.36 1212.44 L2049.78 1212.44 L2049.19 1212.44 L2048.6 1212.44 L2048.02 1212.44 L2047.43 1212.44 L2046.85 1212.44 L2046.26 1212.44 L2045.67 1212.44 L2045.09 1212.44 L2044.5 1212.44 L2043.91 1212.44 L2043.33 1212.44 L2042.74 1212.44 L2042.15 1212.44 L2041.57 1212.44 L2040.98 1212.44 L2040.4 1212.44 L2039.81 1212.44 L2039.22 1212.44 L2038.64 1212.44 L2038.05 1212.44 L2037.46 1212.44 L2036.88 1212.44 L2036.29 1212.44 L2035.7 1212.44 L2035.12 1212.44 L2034.53 1212.44 L2033.94 1212.44 L2033.36 1212.44 L2032.77 1212.44 L2032.19 1212.44 L2031.6 1212.44 L2031.01 1212.44 L2030.43 1212.44 L2029.84 1212.44 L2029.25 1212.44 L2028.67 1212.44 L2028.08 1212.44 L2027.49 1212.44 L2026.91 1212.44 L2026.32 1212.44 L2025.73 1212.44 L2025.15 1212.44 L2024.56 1212.44 L2023.98 1212.44 L2023.39 1212.44 L2022.8 1212.44 L2022.22 1212.44 L2021.63 1212.44 L2021.04 1212.44 L2020.46 1212.44 L2019.87 1212.44 L2019.28 1212.44 L2018.7 1212.44 L2018.11 1212.44 L2017.53 1212.44 L2016.94 1212.44 L2016.35 1212.44 L2015.77 1212.44 L2015.18 1212.44 L2014.59 1212.44 L2014.01 1212.44 L2013.42 1212.44 L2012.83 1212.44 L2012.25 1212.44 L2011.66 1212.44 L2011.07 1212.44 L2010.49 1212.44 L2009.9 1212.44 L2009.32 1212.44 L2008.73 1212.44 L2008.14 1212.44 L2007.56 1212.44 L2006.97 1212.44 L2006.38 1212.44 L2005.8 1212.44 L2005.21 1212.44 L2004.62 1212.44 L2004.04 1212.44 L2003.45 1212.44 L2002.86 1212.44 L2002.28 1212.44 L2001.69 1212.44 L2001.11 1212.44 L2000.52 1212.44 L1999.93 1212.44 L1999.35 1212.44 L1998.76 1212.44 L1998.17 1212.44 L1997.59 1212.44 L1997 1212.44 L1996.41 1212.44 L1995.83 1212.44 L1995.24 1212.44 L1994.65 1212.44 L1994.07 1212.44 L1993.48 1212.44 L1992.9 1212.44 L1992.31 1212.44 L1991.72 1212.44 L1991.14 1212.44 L1990.55 1212.44 L1989.96 1212.44 L1989.38 1212.44 L1988.79 1212.44 L1988.2 1212.44 L1987.62 1212.44 L1987.03 1212.44 L1986.45 1212.44 L1985.86 1212.44 L1985.27 1212.44 L1984.69 1212.44 L1984.1 1212.44 L1983.51 1212.44 L1982.93 1212.44 L1982.34 1212.44 L1981.75 1212.44 L1981.17 1212.44 L1980.58 1212.44 L1979.99 1212.44 L1979.41 1212.44 L1978.82 1212.44 L1978.24 1212.44 L1977.65 1212.44 L1977.06 1212.44 L1976.48 1212.44 L1975.89 1212.44 L1975.3 1212.44 L1974.72 1212.44 L1974.13 1212.44 L1973.54 1212.44 L1972.96 1212.44 L1972.37 1212.44 L1971.78 1212.44 L1971.2 1212.44 L1970.61 1212.44 L1970.03 1212.44 L1969.44 1212.44 L1968.85 1212.44 L1968.27 1212.44 L1967.68 1212.44 L1967.09 1212.44 L1966.51 1212.44 L1965.92 1212.44 L1965.33 1212.44 L1964.75 1212.44 L1964.16 1212.44 L1963.58 1212.44 L1962.99 1212.44 L1962.4 1212.44 L1961.82 1212.44 L1961.23 1212.44 L1960.64 1212.44 L1960.06 1212.44 L1959.47 1212.44 L1958.88 1212.44 L1958.3 1212.44 L1957.71 1212.44 L1957.12 1212.44 L1956.54 1212.44 L1955.95 1212.44 L1955.37 1212.44 L1954.78 1212.44 L1954.19 1212.44 L1953.61 1212.44 L1953.02 1212.44 L1952.43 1212.44 L1951.85 1212.44 L1951.26 1212.44 L1950.67 1212.44 L1950.09 1212.44 L1949.5 1212.44 L1948.91 1212.44 L1948.33 1212.44 L1947.74 1212.44 L1947.16 1212.44 L1946.57 1212.44 L1945.98 1212.44 L1945.4 1212.44 L1944.81 1212.44 L1944.22 1212.44 L1943.64 1212.44 L1943.05 1212.44 L1942.46 1212.44 L1941.88 1212.44 L1941.29 1212.44 L1940.71 1212.44 L1940.12 1212.44 L1939.53 1212.44 L1938.95 1212.44 L1938.36 1212.44 L1937.77 1212.44 L1937.19 1212.44 L1936.6 1212.44 L1936.01 1212.44 L1935.43 1212.44 L1934.84 1212.44 L1934.25 1212.44 L1933.67 1212.44 L1933.08 1212.44 L1932.5 1212.44 L1931.91 1212.44 L1931.32 1212.44 L1930.74 1212.44 L1930.15 1212.44 L1929.56 1212.44 L1928.98 1212.44 L1928.39 1212.44 L1927.8 1212.44 L1927.22 1212.44 L1926.63 1212.44 L1926.04 1212.44 L1925.46 1212.44 L1924.87 1212.44 L1924.29 1212.44 L1923.7 1212.44 L1923.11 1212.44 L1922.53 1212.44 L1921.94 1212.44 L1921.35 1212.44 L1920.77 1212.44 L1920.18 1212.44 L1919.59 1212.44 L1919.01 1212.44 L1918.42 1212.44 L1917.83 1212.44 L1917.25 1212.44 L1916.66 1212.44 L1916.08 1212.44 L1915.49 1212.44 L1914.9 1212.44 L1914.32 1212.44 L1913.73 1212.44 L1913.14 1212.44 L1912.56 1212.44 L1911.97 1212.44 L1911.38 1212.44 L1910.8 1212.44 L1910.21 1212.44 L1909.63 1212.44 L1909.04 1212.44 L1908.45 1212.44 L1907.87 1212.44 L1907.28 1212.44 L1906.69 1212.44 L1906.11 1212.44 L1905.52 1212.44 L1904.93 1212.44 L1904.35 1212.44 L1903.76 1212.44 L1903.17 1212.44 L1902.59 1212.44 L1902 1212.44 L1901.42 1212.44 L1900.83 1212.44 L1900.24 1212.44 L1899.66 1212.44 L1899.07 1212.44 L1898.48 1212.44 L1897.9 1212.44 L1897.31 1212.44 L1896.72 1212.44 L1896.14 1212.44 L1895.55 1212.44 L1894.96 1212.44 L1894.38 1212.44 L1893.79 1212.44 L1893.21 1212.44 L1892.62 1212.44 L1892.03 1212.44 L1891.45 1212.44 L1890.86 1212.44 L1890.27 1212.44 L1889.69 1212.44 L1889.1 1212.44 L1888.51 1212.44 L1887.93 1212.44 L1887.34 1212.44 L1886.76 1212.44 L1886.17 1212.44 L1885.58 1212.44 L1885 1212.44 L1884.41 1212.44 L1883.82 1212.44 L1883.24 1212.44 L1882.65 1212.44 L1882.06 1212.44 L1881.48 1212.44 L1880.89 1212.44 L1880.3 1212.44 L1879.72 1212.44 L1879.13 1212.44 L1878.55 1212.44 L1877.96 1212.44 L1877.37 1212.44 L1876.79 1212.44 L1876.2 1212.44 L1875.61 1212.44 L1875.03 1212.44 L1874.44 1212.44 L1873.85 1212.44 L1873.27 1212.44 L1872.68 1212.44 L1872.09 1212.44 L1871.51 1212.44 L1870.92 1212.44 L1870.34 1212.44 L1869.75 1212.44 L1869.16 1212.44 L1868.58 1212.44 L1867.99 1212.44 L1867.4 1212.44 L1866.82 1212.44 L1866.23 1212.44 L1865.64 1212.44 L1865.06 1212.44 L1864.47 1212.44 L1863.88 1212.44 L1863.3 1212.44 L1862.71 1212.44 L1862.13 1212.44 L1861.54 1212.44 L1860.95 1212.44 L1860.37 1212.44 L1859.78 1212.44 L1859.19 1212.44 L1858.61 1212.44 L1858.02 1212.44 L1857.43 1212.44 L1856.85 1212.44 L1856.26 1212.44 L1855.68 1212.44 L1855.09 1212.44 L1854.5 1212.44 L1853.92 1212.44 L1853.33 1212.44 L1852.74 1212.44 L1852.16 1212.44 L1851.57 1212.44 L1850.98 1212.44 L1850.4 1212.44 L1849.81 1212.44 L1849.22 1212.44 L1848.64 1212.44 L1848.05 1212.44 L1847.47 1212.44 L1846.88 1212.44 L1846.29 1212.44 L1845.71 1212.44 L1845.12 1212.44 L1844.53 1212.44 L1843.95 1212.44 L1843.36 1212.44 L1842.77 1212.44 L1842.19 1212.44 L1841.6 1212.44 L1841.01 1212.44 L1840.43 1212.44 L1839.84 1212.44 L1839.26 1212.44 L1838.67 1212.44 L1838.08 1212.44 L1837.5 1212.44 L1836.91 1212.44 L1836.32 1212.44 L1835.74 1212.44 L1835.15 1212.44 L1834.56 1212.44 L1833.98 1212.44 L1833.39 1212.44 L1832.81 1212.44 L1832.22 1212.44 L1831.63 1212.44 L1831.05 1212.44 L1830.46 1212.44 L1829.87 1212.44 L1829.29 1212.44 L1828.7 1212.44 L1828.11 1212.44 L1827.53 1212.44 L1826.94 1212.44 L1826.35 1212.44 L1825.77 1212.44 L1825.18 1212.44 L1824.6 1212.44 L1824.01 1212.44 L1823.42 1212.44 L1822.84 1212.44 L1822.25 1212.44 L1821.66 1212.44 L1821.08 1212.44 L1820.49 1212.44 L1819.9 1212.44 L1819.32 1212.44 L1818.73 1212.44 L1818.14 1212.44 L1817.56 1212.44 L1816.97 1212.44 L1816.39 1212.44 L1815.8 1212.44 L1815.21 1212.44 L1814.63 1212.44 L1814.04 1212.44 L1813.45 1212.44 L1812.87 1212.44 L1812.28 1212.44 L1811.69 1212.44 L1811.11 1212.44 L1810.52 1212.44 L1809.94 1212.44 L1809.35 1212.44 L1808.76 1212.44 L1808.18 1212.44 L1807.59 1212.44 L1807 1212.44 L1806.42 1212.44 L1805.83 1212.44 L1805.24 1212.44 L1804.66 1212.44 L1804.07 1212.44 L1803.48 1212.44 L1802.9 1212.44 L1802.31 1212.44 L1801.73 1212.44 L1801.14 1212.44 L1800.55 1212.44 L1799.97 1212.44 L1799.38 1212.44 L1798.79 1212.44 L1798.21 1212.44 L1797.62 1212.44 L1797.03 1212.44 L1796.45 1212.44 L1795.86 1212.44 L1795.27 1212.44 L1794.69 1212.44 L1794.1 1212.44 L1793.52 1212.44 L1792.93 1212.44 L1792.34 1212.44 L1791.76 1212.44 L1791.17 1212.44 L1790.58 1212.44 L1790 1212.44 L1789.41 1212.44 L1788.82 1212.44 L1788.24 1212.44 L1787.65 1212.44 L1787.06 1212.44 L1786.48 1212.44 L1785.89 1212.44 L1785.31 1212.44 L1784.72 1212.44 L1784.13 1212.44 L1783.55 1212.44 L1782.96 1212.44 L1782.37 1212.44 L1781.79 1212.44 L1781.2 1212.44 L1780.61 1212.44 L1780.03 1212.44 L1779.44 1212.44 L1778.86 1212.44 L1778.27 1212.44 L1777.68 1212.44 L1777.1 1212.44 L1776.51 1212.44 L1775.92 1212.44 L1775.34 1212.44 L1774.75 1212.44 L1774.16 1212.44 L1773.58 1212.44 L1772.99 1212.44 L1772.4 1212.44 L1771.82 1212.44 L1771.23 1212.44 L1770.65 1212.44 L1770.06 1212.44 L1769.47 1212.44 L1768.89 1212.44 L1768.3 1212.44 L1767.71 1212.44 L1767.13 1212.44 L1766.54 1212.44 L1765.95 1212.44 L1765.37 1212.44 L1764.78 1212.44 L1764.19 1212.44 L1763.61 1212.44 L1763.02 1212.44 L1762.44 1212.44 L1761.85 1212.44 L1761.26 1212.44 L1760.68 1212.44 L1760.09 1212.44 L1759.5 1212.44 L1758.92 1212.44 L1758.33 1212.44 L1757.74 1212.44 L1757.16 1212.44 L1756.57 1212.44 L1755.99 1212.44 L1755.4 1212.44 L1754.81 1212.44 L1754.23 1212.44 L1753.64 1212.44 L1753.05 1212.44 L1752.47 1212.44 L1751.88 1212.44 L1751.29 1212.44 L1750.71 1212.44 L1750.12 1212.44 L1749.53 1212.44 L1748.95 1212.44 L1748.36 1212.44 L1747.78 1212.44 L1747.19 1212.44 L1746.6 1212.44 L1746.02 1212.44 L1745.43 1212.44 L1744.84 1212.44 L1744.26 1212.44 L1743.67 1212.44 L1743.08 1212.44 L1742.5 1212.44 L1741.91 1212.44 L1741.32 1212.44 L1740.74 1212.44 L1740.15 1212.44 L1739.57 1212.44 L1738.98 1212.44 L1738.39 1212.44 L1737.81 1212.44 L1737.22 1212.44 L1736.63 1212.44 L1736.05 1212.44 L1735.46 1212.44 L1734.87 1212.44 L1734.29 1212.44 L1733.7 1212.44 L1733.11 1212.44 L1732.53 1212.44 L1731.94 1212.44 L1731.36 1212.44 L1730.77 1212.44 L1730.18 1212.44 L1729.6 1212.44 L1729.01 1212.44 L1728.42 1212.44 L1727.84 1212.44 L1727.25 1212.44 L1726.66 1212.44 L1726.08 1212.44 L1725.49 1212.44 L1724.91 1212.44 L1724.32 1212.44 L1723.73 1212.44 L1723.15 1212.44 L1722.56 1212.44 L1721.97 1212.44 L1721.39 1212.44 L1720.8 1212.44 L1720.21 1212.44 L1719.63 1212.44 L1719.04 1212.44 L1718.45 1212.44 L1717.87 1212.44 L1717.28 1212.44 L1716.7 1212.44 L1716.11 1212.44 L1715.52 1212.44 L1714.94 1212.44 L1714.35 1212.44 L1713.76 1212.44 L1713.18 1212.44 L1712.59 1212.44 L1712 1212.44 L1711.42 1212.44 L1710.83 1212.44 L1710.24 1212.44 L1709.66 1212.44 L1709.07 1212.44 L1708.49 1212.44 L1707.9 1212.44 L1707.31 1212.44 L1706.73 1212.44 L1706.14 1212.44 L1705.55 1212.44 L1704.97 1212.44 L1704.38 1212.44 L1703.79 1212.44 L1703.21 1212.44 L1702.62 1212.44 L1702.04 1212.44 L1701.45 1212.44 L1700.86 1212.44 L1700.28 1212.44 L1699.69 1212.44 L1699.1 1212.44 L1698.52 1212.44 L1697.93 1212.44 L1697.34 1212.44 L1696.76 1212.44 L1696.17 1212.44 L1695.58 1212.44 L1695 1212.44 L1694.41 1212.44 L1693.83 1212.44 L1693.24 1212.44 L1692.65 1212.44 L1692.07 1212.44 L1691.48 1212.44 L1690.89 1212.44 L1690.31 1212.44 L1689.72 1212.44 L1689.13 1212.44 L1688.55 1212.44 L1687.96 1212.44 L1687.37 1212.44 L1686.79 1212.44 L1686.2 1212.44 L1685.62 1212.44 L1685.03 1212.44 L1684.44 1212.44 L1683.86 1212.44 L1683.27 1212.44 L1682.68 1212.44 L1682.1 1212.44 L1681.51 1212.44 L1680.92 1212.44 L1680.34 1212.44 L1679.75 1212.44 L1679.17 1212.44 L1678.58 1212.44 L1677.99 1212.44 L1677.41 1212.44 L1676.82 1212.44 L1676.23 1212.44 L1675.65 1212.44 L1675.06 1212.44 L1674.47 1212.44 L1673.89 1212.44 L1673.3 1212.44 L1672.71 1212.44 L1672.13 1212.44 L1671.54 1212.44 L1670.96 1212.44 L1670.37 1212.44 L1669.78 1212.44 L1669.2 1212.44 L1668.61 1212.44 L1668.02 1212.44 L1667.44 1212.44 L1666.85 1212.44 L1666.26 1212.44 L1665.68 1212.44 L1665.09 1212.44 L1664.5 1212.44 L1663.92 1212.44 L1663.33 1212.44 L1662.75 1212.44 L1662.16 1212.44 L1661.57 1212.44 L1660.99 1212.44 L1660.4 1212.44 L1659.81 1212.44 L1659.23 1212.44 L1658.64 1212.44 L1658.05 1212.44 L1657.47 1212.44 L1656.88 1212.44 L1656.29 1212.44 L1655.71 1212.44 L1655.12 1212.44 L1654.54 1212.44 L1653.95 1212.44 L1653.36 1212.44 L1652.78 1212.44 L1652.19 1212.44 L1651.6 1212.44 L1651.02 1212.44 L1650.43 1212.44 L1649.84 1212.44 L1649.26 1212.44 L1648.67 1212.44 L1648.09 1212.44 L1647.5 1212.44 L1646.91 1212.44 L1646.33 1212.44 L1645.74 1212.44 L1645.15 1212.44 L1644.57 1212.44 L1643.98 1212.44 L1643.39 1212.44 L1642.81 1212.44 L1642.22 1212.44 L1641.63 1212.44 L1641.05 1212.44 L1640.46 1212.44 L1639.88 1212.44 L1639.29 1212.44 L1638.7 1212.44 L1638.12 1212.44 L1637.53 1212.44 L1636.94 1212.44 L1636.36 1212.44 L1635.77 1212.44 L1635.18 1212.44 L1634.6 1212.44 L1634.01 1212.44 L1633.42 1212.44 L1632.84 1212.44 L1632.25 1212.44 L1631.67 1212.44 L1631.08 1212.44 L1630.49 1212.44 L1629.91 1212.44 L1629.32 1212.44 L1628.73 1212.44 L1628.15 1212.44 L1627.56 1212.44 L1626.97 1212.44 L1626.39 1212.44 L1625.8 1212.44 L1625.22 1212.44 L1624.63 1212.44 L1624.04 1212.44 L1623.46 1212.44 L1622.87 1212.44 L1622.28 1212.44 L1621.7 1212.44 L1621.11 1212.44 L1620.52 1212.44 L1619.94 1212.44 L1619.35 1212.44 L1618.76 1212.44 L1618.18 1212.44 L1617.59 1212.44 L1617.01 1212.44 L1616.42 1212.44 L1615.83 1212.44 L1615.25 1212.44 L1614.66 1212.44 L1614.07 1212.44 L1613.49 1212.44 L1612.9 1212.44 L1612.31 1212.44 L1611.73 1212.44 L1611.14 1212.44 L1610.55 1212.44 L1609.97 1212.44 L1609.38 1212.44 L1608.8 1212.44 L1608.21 1212.44 L1607.62 1212.44 L1607.04 1212.44 L1606.45 1212.44 L1605.86 1212.44 L1605.28 1212.44 L1604.69 1212.44 L1604.1 1212.44 L1603.52 1212.44 L1602.93 1212.44 L1602.34 1212.44 L1601.76 1212.44 L1601.17 1212.44 L1600.59 1212.44 L1600 1212.44 L1599.41 1212.44 L1598.83 1212.44 L1598.24 1212.44 L1597.65 1212.44 L1597.07 1212.44 L1596.48 1212.44 L1595.89 1212.44 L1595.31 1212.44 L1594.72 1212.44 L1594.14 1212.44 L1593.55 1212.44 L1592.96 1212.44 L1592.38 1212.44 L1591.79 1212.44 L1591.2 1212.44 L1590.62 1212.44 L1590.03 1212.44 L1589.44 1212.44 L1588.86 1212.44 L1588.27 1212.44 L1587.68 1212.44 L1587.1 1212.44 L1586.51 1212.44 L1585.93 1212.44 L1585.34 1212.44 L1584.75 1212.44 L1584.17 1212.44 L1583.58 1212.44 L1582.99 1212.44 L1582.41 1212.44 L1581.82 1212.44 L1581.23 1212.44 L1580.65 1212.44 L1580.06 1212.44 L1579.47 1212.44 L1578.89 1212.44 L1578.3 1212.44 L1577.72 1212.44 L1577.13 1212.44 L1576.54 1212.44 L1575.96 1212.44 L1575.37 1212.44 L1574.78 1212.44 L1574.2 1212.44 L1573.61 1212.44 L1573.02 1212.44 L1572.44 1212.44 L1571.85 1212.44 L1571.27 1212.44 L1570.68 1212.44 L1570.09 1212.44 L1569.51 1212.44 L1568.92 1212.44 L1568.33 1212.44 L1567.75 1212.44 L1567.16 1212.44 L1566.57 1212.44 L1565.99 1212.44 L1565.4 1212.44 L1564.81 1212.44 L1564.23 1212.44 L1563.64 1212.44 L1563.06 1212.44 L1562.47 1212.44 L1561.88 1212.44 L1561.3 1212.44 L1560.71 1212.44 L1560.12 1212.44 L1559.54 1212.44 L1558.95 1212.44 L1558.36 1212.44 L1557.78 1212.44 L1557.19 1212.44 L1556.6 1212.44 L1556.02 1212.44 L1555.43 1212.44 L1554.85 1212.44 L1554.26 1212.44 L1553.67 1212.44 L1553.09 1212.44 L1552.5 1212.44 L1551.91 1212.44 L1551.33 1212.44 L1550.74 1212.44 L1550.15 1212.44 L1549.57 1212.44 L1548.98 1212.44 L1548.4 1212.44 L1547.81 1212.44 L1547.22 1212.44 L1546.64 1212.44 L1546.05 1212.44 L1545.46 1212.44 L1544.88 1212.44 L1544.29 1212.44 L1543.7 1212.44 L1543.12 1212.44 L1542.53 1212.44 L1541.94 1212.44 L1541.36 1212.44 L1540.77 1212.44 L1540.19 1212.44 L1539.6 1212.44 L1539.01 1212.44 L1538.43 1212.44 L1537.84 1212.44 L1537.25 1212.44 L1536.67 1212.44 L1536.08 1212.44 L1535.49 1212.44 L1534.91 1212.44 L1534.32 1212.44 L1533.73 1212.44 L1533.15 1212.44 L1532.56 1212.44 L1531.98 1212.44 L1531.39 1212.44 L1530.8 1212.44 L1530.22 1212.44 L1529.63 1212.44 L1529.04 1212.44 L1528.46 1212.44 L1527.87 1212.44 L1527.28 1212.44 L1526.7 1212.44 L1526.11 1212.44 L1525.52 1212.44 L1524.94 1212.44 L1524.35 1212.44 L1523.77 1212.44 L1523.18 1212.44 L1522.59 1212.44 L1522.01 1212.44 L1521.42 1212.44 L1520.83 1212.44 L1520.25 1212.44 L1519.66 1212.44 L1519.07 1212.44 L1518.49 1212.44 L1517.9 1212.44 L1517.32 1212.44 L1516.73 1212.44 L1516.14 1212.44 L1515.56 1212.44 L1514.97 1212.44 L1514.38 1212.44 L1513.8 1212.44 L1513.21 1212.44 L1512.62 1212.44 L1512.04 1212.44 L1511.45 1212.44 L1510.86 1212.44 L1510.28 1212.44 L1509.69 1212.44 L1509.11 1212.44 L1508.52 1212.44 L1507.93 1212.44 L1507.35 1212.44 L1506.76 1212.44 L1506.17 1212.44 L1505.59 1212.44 L1505 1212.44 L1504.41 1212.44 L1503.83 1212.44 L1503.24 1212.44 L1502.65 1212.44 L1502.07 1212.44 L1501.48 1212.44 L1500.9 1212.44 L1500.31 1212.44 L1499.72 1212.44 L1499.14 1212.44 L1498.55 1212.44 L1497.96 1212.44 L1497.38 1212.44 L1496.79 1212.44 L1496.2 1212.44 L1495.62 1212.44 L1495.03 1212.44 L1494.45 1212.44 L1493.86 1212.44 L1493.27 1212.44 L1492.69 1212.44 L1492.1 1212.44 L1491.51 1212.44 L1490.93 1212.44 L1490.34 1212.44 L1489.75 1212.44 L1489.17 1212.44 L1488.58 1212.44 L1487.99 1212.44 L1487.41 1212.44 L1486.82 1212.44 L1486.24 1212.44 L1485.65 1212.44 L1485.06 1212.44 L1484.48 1212.44 L1483.89 1212.44 L1483.3 1212.44 L1482.72 1212.44 L1482.13 1212.44 L1481.54 1212.44 L1480.96 1212.44 L1480.37 1212.44 L1479.78 1212.44 L1479.2 1212.44 L1478.61 1212.44 L1478.03 1212.44 L1477.44 1212.44 L1476.85 1212.44 L1476.27 1212.44 L1475.68 1212.44 L1475.09 1212.44 L1474.51 1212.44 L1473.92 1212.44 L1473.33 1212.44 L1472.75 1212.44 L1472.16 1212.44 L1471.57 1212.44 L1470.99 1212.44 L1470.4 1212.44 L1469.82 1212.44 L1469.23 1212.44 L1468.64 1212.44 L1468.06 1212.44 L1467.47 1212.44 L1466.88 1212.44 L1466.3 1212.44 L1465.71 1212.44 L1465.12 1212.44 L1464.54 1212.44 L1463.95 1212.44 L1463.37 1212.44 L1462.78 1212.44 L1462.19 1212.44 L1461.61 1212.44 L1461.02 1212.44 L1460.43 1212.44 L1459.85 1212.44 L1459.26 1212.44 L1458.67 1212.44 L1458.09 1212.44 L1457.5 1212.44 L1456.91 1212.44 L1456.33 1212.44 L1455.74 1212.44 L1455.16 1212.44 L1454.57 1212.44 L1453.98 1212.44 L1453.4 1212.44 L1452.81 1212.44 L1452.22 1212.44 L1451.64 1212.44 L1451.05 1212.44 L1450.46 1212.44 L1449.88 1212.44 L1449.29 1212.44 L1448.7 1212.44 L1448.12 1212.44 L1447.53 1212.44 L1446.95 1212.44 L1446.36 1212.44 L1445.77 1212.44 L1445.19 1212.44 L1444.6 1212.44 L1444.01 1212.44 L1443.43 1212.44 L1442.84 1212.44 L1442.25 1212.44 L1441.67 1212.44 L1441.08 1212.44 L1440.5 1212.44 L1439.91 1212.44 L1439.32 1212.44 L1438.74 1212.44 L1438.15 1212.44 L1437.56 1212.44 L1436.98 1212.44 L1436.39 1212.44 L1435.8 1212.44 L1435.22 1212.44 L1434.63 1212.44 L1434.04 1212.44 L1433.46 1212.44 L1432.87 1212.44 L1432.29 1212.44 L1431.7 1212.44 L1431.11 1212.44 L1430.53 1212.44 L1429.94 1212.44 L1429.35 1212.44 L1428.77 1212.44 L1428.18 1212.44 L1427.59 1212.44 L1427.01 1212.44 L1426.42 1212.44 L1425.83 1212.44 L1425.25 1212.44 L1424.66 1212.44 L1424.08 1212.44 L1423.49 1212.44 L1422.9 1212.44 L1422.32 1212.44 L1421.73 1212.44 L1421.14 1212.44 L1420.56 1212.44 L1419.97 1212.44 L1419.38 1212.44 L1418.8 1212.44 L1418.21 1212.44 L1417.63 1212.44 L1417.04 1212.44 L1416.45 1212.44 L1415.87 1212.44 L1415.28 1212.44 L1414.69 1212.44 L1414.11 1212.44 L1413.52 1212.44 L1412.93 1212.44 L1412.35 1212.44 L1411.76 1212.44 L1411.17 1212.44 L1410.59 1212.44 L1410 1212.44 L1409.42 1212.44 L1408.83 1212.44 L1408.24 1212.44 L1407.66 1212.44 L1407.07 1212.44 L1406.48 1212.44 L1405.9 1212.44 L1405.31 1212.44 L1404.72 1212.44 L1404.14 1212.44 L1403.55 1212.44 L1402.96 1212.44 L1402.38 1212.44 L1401.79 1212.44 L1401.21 1212.44 L1400.62 1212.44 L1400.03 1212.44 L1399.45 1212.44 L1398.86 1212.44 L1398.27 1212.44 L1397.69 1212.44 L1397.1 1212.44 L1396.51 1212.44 L1395.93 1212.44 L1395.34 1212.44 L1394.75 1212.44 L1394.17 1212.44 L1393.58 1212.44 L1393 1212.44 L1392.41 1212.44 L1391.82 1212.44 L1391.24 1212.44 L1390.65 1212.44 L1390.06 1212.44 L1389.48 1212.44 L1388.89 1212.44 L1388.3 1212.44 L1387.72 1212.44 L1387.13 1212.44 L1386.55 1212.44 L1385.96 1212.44 L1385.37 1212.44 L1384.79 1212.44 L1384.2 1212.44 L1383.61 1212.44 L1383.03 1212.44 L1382.44 1212.44 L1381.85 1212.44 L1381.27 1212.44 L1380.68 1212.44 L1380.09 1212.44 L1379.51 1212.44 L1378.92 1212.44 L1378.34 1212.44 L1377.75 1212.44 L1377.16 1212.44 L1376.58 1212.44 L1375.99 1212.44 L1375.4 1212.44 L1374.82 1212.44 L1374.23 1212.44 L1373.64 1212.44 L1373.06 1212.44 L1372.47 1212.44 L1371.88 1212.44 L1371.3 1212.44 L1370.71 1212.44 L1370.13 1212.44 L1369.54 1212.44 L1368.95 1212.44 L1368.37 1212.44 L1367.78 1212.44 L1367.19 1212.44 L1366.61 1212.44 L1366.02 1212.44 L1365.43 1212.44 L1364.85 1212.44 L1364.26 1212.44 L1363.68 1212.44 L1363.09 1212.44 L1362.5 1212.44 L1361.92 1212.44 L1361.33 1212.44 L1360.74 1212.44 L1360.16 1212.44 L1359.57 1212.44 L1358.98 1212.44 L1358.4 1212.44 L1357.81 1212.44 L1357.22 1212.44 L1356.64 1212.44 L1356.05 1212.44 L1355.47 1212.44 L1354.88 1212.44 L1354.29 1212.44 L1353.71 1212.44 L1353.12 1212.44 L1352.53 1212.44 L1351.95 1212.44 L1351.36 1212.44 L1350.77 1212.44 L1350.19 1212.44 L1349.6 1212.44 L1349.01 1212.44 L1348.43 1212.44 L1347.84 1212.44 L1347.26 1212.44 L1346.67 1212.44 L1346.08 1212.44 L1345.5 1212.44 L1344.91 1212.44 L1344.32 1212.44 L1343.74 1212.44 L1343.15 1212.44 L1342.56 1212.44 L1341.98 1212.44 L1341.39 1212.44 L1340.8 1212.44 L1340.22 1212.44 L1339.63 1212.44 L1339.05 1212.44 L1338.46 1212.44 L1337.87 1212.44 L1337.29 1212.44 L1336.7 1212.44 L1336.11 1212.44 L1335.53 1212.44 L1334.94 1212.44 L1334.35 1212.44 L1333.77 1212.44 L1333.18 1212.44 L1332.6 1212.44 L1332.01 1212.44 L1331.42 1212.44 L1330.84 1212.44 L1330.25 1212.44 L1329.66 1212.44 L1329.08 1212.44 L1328.49 1212.44 L1327.9 1212.44 L1327.32 1212.44 L1326.73 1212.44 L1326.14 1212.44 L1325.56 1212.44 L1324.97 1212.44 L1324.39 1212.44 L1323.8 1212.44 L1323.21 1212.44 L1322.63 1212.44 L1322.04 1212.44 L1321.45 1212.44 L1320.87 1212.44 L1320.28 1212.44 L1319.69 1212.44 L1319.11 1212.44 L1318.52 1212.44 L1317.93 1212.44 L1317.35 1212.44 L1316.76 1212.44 L1316.18 1212.44 L1315.59 1212.44 L1315 1212.44 L1314.42 1212.44 L1313.83 1212.44 L1313.24 1212.44 L1312.66 1212.44 L1312.07 1212.44 L1311.48 1212.44 L1310.9 1212.44 L1310.31 1212.44 L1309.73 1212.44 L1309.14 1212.44 L1308.55 1212.44 L1307.97 1212.44 L1307.38 1212.44 L1306.79 1212.44 L1306.21 1212.44 L1305.62 1212.44 L1305.03 1212.44 L1304.45 1212.44 L1303.86 1212.44 L1303.27 1212.44 L1302.69 1212.44 L1302.1 1212.44 L1301.52 1212.44 L1300.93 1212.44 L1300.34 1212.44 L1299.76 1212.44 L1299.17 1212.44 L1298.58 1212.44 L1298 1212.44 L1297.41 1212.44 L1296.82 1212.44 L1296.24 1212.44 L1295.65 1212.44 L1295.06 1212.44 L1294.48 1212.44 L1293.89 1212.44 L1293.31 1212.44 L1292.72 1212.44 L1292.13 1212.44 L1291.55 1212.44 L1290.96 1212.44 L1290.37 1212.44 L1289.79 1212.44 L1289.2 1212.44 L1288.61 1212.44 L1288.03 1212.44 L1287.44 1212.44 L1286.86 1212.44 L1286.27 1212.44 L1285.68 1212.44 L1285.1 1212.44 L1284.51 1212.44 L1283.92 1212.44 L1283.34 1212.44 L1282.75 1212.44 L1282.16 1212.44 L1281.58 1212.44 L1280.99 1212.44 L1280.4 1212.44 L1279.82 1212.44 L1279.23 1212.44 L1278.65 1212.44 L1278.06 1212.44 L1277.47 1212.44 L1276.89 1212.44 L1276.3 1212.44 L1275.71 1212.44 L1275.13 1212.44 L1274.54 1212.44 L1273.95 1212.44 L1273.37 1212.44 L1272.78 1212.44 L1272.19 1212.44 L1271.61 1212.44 L1271.02 1212.44 L1270.44 1212.44 L1269.85 1212.44 L1269.26 1212.44 L1268.68 1212.44 L1268.09 1212.44 L1267.5 1212.44 L1266.92 1212.44 L1266.33 1212.44 L1265.74 1212.44 L1265.16 1212.44 L1264.57 1212.44 L1263.98 1212.44 L1263.4 1212.44 L1262.81 1212.44 L1262.23 1212.44 L1261.64 1212.44 L1261.05 1212.44 L1260.47 1212.44 L1259.88 1212.44 L1259.29 1212.44 L1258.71 1212.44 L1258.12 1212.44 L1257.53 1212.44 L1256.95 1212.44 L1256.36 1212.44 L1255.78 1212.44 L1255.19 1212.44 L1254.6 1212.44 L1254.02 1212.44 L1253.43 1212.44 L1252.84 1212.44 L1252.26 1212.44 L1251.67 1212.44 L1251.08 1212.44 L1250.5 1212.44 L1249.91 1212.44 L1249.32 1212.44 L1248.74 1212.44 L1248.15 1212.44 L1247.57 1212.44 L1246.98 1212.44 L1246.39 1212.44 L1245.81 1212.44 L1245.22 1212.44 L1244.63 1212.44 L1244.05 1212.44 L1243.46 1212.44 L1242.87 1212.44 L1242.29 1212.44 L1241.7 1212.44 L1241.11 1212.44 L1240.53 1212.44 L1239.94 1212.44 L1239.36 1212.44 L1238.77 1212.44 L1238.18 1212.44 L1237.6 1212.44 L1237.01 1212.44 L1236.42 1212.44 L1235.84 1212.44 L1235.25 1212.44 L1234.66 1212.44 L1234.08 1212.44 L1233.49 1212.44 L1232.91 1212.44 L1232.32 1212.44 L1231.73 1212.44 L1231.15 1212.44 L1230.56 1212.44 L1229.97 1212.44 L1229.39 1212.44 L1228.8 1212.44 L1228.21 1212.44 L1227.63 1212.44 L1227.04 1212.44 L1226.45 1212.44 L1225.87 1212.44 L1225.28 1212.44 L1224.7 1212.44 L1224.11 1212.44 L1223.52 1212.44 L1222.94 1212.44 L1222.35 1212.44 L1221.76 1212.44 L1221.18 1212.44 L1220.59 1212.44 L1220 1212.44 L1219.42 1212.44 L1218.83 1212.44 L1218.24 1212.44 L1217.66 1212.44 L1217.07 1212.44 L1216.49 1212.44 L1215.9 1212.44 L1215.31 1212.44 L1214.73 1212.44 L1214.14 1212.44 L1213.55 1212.44 L1212.97 1212.44 L1212.38 1212.44 L1211.79 1212.44 L1211.21 1212.44 L1210.62 1212.44 L1210.03 1212.44 L1209.45 1212.44 L1208.86 1212.44 L1208.28 1212.44 L1207.69 1212.44 L1207.1 1212.44 L1206.52 1212.44 L1205.93 1212.44 L1205.34 1212.44 L1204.76 1212.44 L1204.17 1212.44 L1203.58 1212.44 L1203 1212.44 L1202.41 1212.44 L1201.83 1212.44 L1201.24 1212.44 L1200.65 1212.44 L1200.07 1212.44 L1199.48 1212.44 L1198.89 1212.44 L1198.31 1212.44 L1197.72 1212.44 L1197.13 1212.44 L1196.55 1212.44 L1195.96 1212.44 L1195.37 1212.44 L1194.79 1212.44 L1194.2 1212.44 L1193.62 1212.44 L1193.03 1212.44 L1192.44 1212.44 L1191.86 1212.44 L1191.27 1212.44 L1190.68 1212.44 L1190.1 1212.44 L1189.51 1212.44 L1188.92 1212.44 L1188.34 1212.44 L1187.75 1212.44 L1187.16 1212.44 L1186.58 1212.44 L1185.99 1212.44 L1185.41 1212.44 L1184.82 1212.44 L1184.23 1212.44 L1183.65 1212.44 L1183.06 1212.44 L1182.47 1212.44 L1181.89 1212.44 L1181.3 1212.44 L1180.71 1212.44 L1180.13 1212.44 L1179.54 1212.44 L1178.96 1212.44 L1178.37 1212.44 L1177.78 1212.44 L1177.2 1212.44 L1176.61 1212.44 L1176.02 1212.44 L1175.44 1212.44 L1174.85 1212.44 L1174.26 1212.44 L1173.68 1212.44 L1173.09 1212.44 L1172.5 1212.44 L1171.92 1212.44 L1171.33 1212.44 L1170.75 1212.44 L1170.16 1212.44 L1169.57 1212.44 L1168.99 1212.44 L1168.4 1212.44 L1167.81 1212.44 L1167.23 1212.44 L1166.64 1212.44 L1166.05 1212.44 L1165.47 1212.44 L1164.88 1212.44 L1164.29 1212.44 L1163.71 1212.44 L1163.12 1212.44 L1162.54 1212.44 L1161.95 1212.44 L1161.36 1212.44 L1160.78 1212.44 L1160.19 1212.44 L1159.6 1212.44 L1159.02 1212.44 L1158.43 1212.44 L1157.84 1212.44 L1157.26 1212.44 L1156.67 1212.44 L1156.09 1212.44 L1155.5 1212.44 L1154.91 1212.44 L1154.33 1212.44 L1153.74 1212.44 L1153.15 1212.44 L1152.57 1212.44 L1151.98 1212.44 L1151.39 1212.44 L1150.81 1212.44 L1150.22 1212.44 L1149.63 1212.44 L1149.05 1212.44 L1148.46 1212.44 L1147.88 1212.44 L1147.29 1212.44 L1146.7 1212.44 L1146.12 1212.44 L1145.53 1212.44 L1144.94 1212.44 L1144.36 1212.44 L1143.77 1212.44 L1143.18 1212.44 L1142.6 1212.44 L1142.01 1212.44 L1141.42 1212.44 L1140.84 1212.44 L1140.25 1212.44 L1139.67 1212.44 L1139.08 1212.44 L1138.49 1212.44 L1137.91 1212.44 L1137.32 1212.44 L1136.73 1212.44 L1136.15 1212.44 L1135.56 1212.44 L1134.97 1212.44 L1134.39 1212.44 L1133.8 1212.44 L1133.21 1212.44 L1132.63 1212.44 L1132.04 1212.44 L1131.46 1212.44 L1130.87 1212.44 L1130.28 1212.44 L1129.7 1212.44 L1129.11 1212.44 L1128.52 1212.44 L1127.94 1212.44 L1127.35 1212.44 L1126.76 1212.44 L1126.18 1212.44 L1125.59 1212.44 L1125.01 1212.44 L1124.42 1212.44 L1123.83 1212.44 L1123.25 1212.44 L1122.66 1212.44 L1122.07 1212.44 L1121.49 1212.44 L1120.9 1212.44 L1120.31 1212.44 L1119.73 1212.44 L1119.14 1212.44 L1118.55 1212.44 L1117.97 1212.44 L1117.38 1212.44 L1116.8 1212.44 L1116.21 1212.44 L1115.62 1212.44 L1115.04 1212.44 L1114.45 1212.44 L1113.86 1212.44 L1113.28 1212.44 L1112.69 1212.44 L1112.1 1212.44 L1111.52 1212.44 L1110.93 1212.44 L1110.34 1212.44 L1109.76 1212.44 L1109.17 1212.44 L1108.59 1212.44 L1108 1212.44 L1107.41 1212.44 L1106.83 1212.44 L1106.24 1212.44 L1105.65 1212.44 L1105.07 1212.44 L1104.48 1212.44 L1103.89 1212.44 L1103.31 1212.44 L1102.72 1212.44 L1102.14 1212.44 L1101.55 1212.44 L1100.96 1212.44 L1100.38 1212.44 L1099.79 1212.44 L1099.2 1212.44 L1098.62 1212.44 L1098.03 1212.44 L1097.44 1212.44 L1096.86 1212.44 L1096.27 1212.44 L1095.68 1212.44 L1095.1 1212.44 L1094.51 1212.44 L1093.93 1212.44 L1093.34 1212.44 L1092.75 1212.44 L1092.17 1212.44 L1091.58 1212.44 L1090.99 1212.44 L1090.41 1212.44 L1089.82 1212.44 L1089.23 1212.44 L1088.65 1212.44 L1088.06 1212.44 L1087.47 1212.44 L1086.89 1212.44 L1086.3 1212.44 L1085.72 1212.44 L1085.13 1212.44 L1084.54 1212.44 L1083.96 1212.44 L1083.37 1212.44 L1082.78 1212.44 L1082.2 1212.44 L1081.61 1212.44 L1081.02 1212.44 L1080.44 1212.44 L1079.85 1212.44 L1079.26 1212.44 L1078.68 1212.44 L1078.09 1212.44 L1077.51 1212.44 L1076.92 1212.44 L1076.33 1212.44 L1075.75 1212.44 L1075.16 1212.44 L1074.57 1212.44 L1073.99 1212.44 L1073.4 1212.44 L1072.81 1212.44 L1072.23 1212.44 L1071.64 1212.44 L1071.06 1212.44 L1070.47 1212.44 L1069.88 1212.44 L1069.3 1212.44 L1068.71 1212.44 L1068.12 1212.44 L1067.54 1212.44 L1066.95 1212.44 L1066.36 1212.44 L1065.78 1212.44 L1065.19 1212.44 L1064.6 1212.44 L1064.02 1212.44 L1063.43 1212.44 L1062.85 1212.44 L1062.26 1212.44 L1061.67 1212.44 L1061.09 1212.44 L1060.5 1212.44 L1059.91 1212.44 L1059.33 1212.44 L1058.74 1212.44 L1058.15 1212.44 L1057.57 1212.44 L1056.98 1212.44 L1056.39 1212.44 L1055.81 1212.44 L1055.22 1212.44 L1054.64 1212.44 L1054.05 1212.44 L1053.46 1212.44 L1052.88 1212.44 L1052.29 1212.44 L1051.7 1212.44 L1051.12 1212.44 L1050.53 1212.44 L1049.94 1212.44 L1049.36 1212.44 L1048.77 1212.44 L1048.19 1212.44 L1047.6 1212.44 L1047.01 1212.44 L1046.43 1212.44 L1045.84 1212.44 L1045.25 1212.44 L1044.67 1212.44 L1044.08 1212.44 L1043.49 1212.44 L1042.91 1212.44 L1042.32 1212.44 L1041.73 1212.44 L1041.15 1212.44 L1040.56 1212.44 L1039.98 1212.44 L1039.39 1212.44 L1038.8 1212.44 L1038.22 1212.44 L1037.63 1212.44 L1037.04 1212.44 L1036.46 1212.44 L1035.87 1212.44 L1035.28 1212.44 L1034.7 1212.44 L1034.11 1212.44 L1033.52 1212.44 L1032.94 1212.44 L1032.35 1212.44 L1031.77 1212.44 L1031.18 1212.44 L1030.59 1212.44 L1030.01 1212.44 L1029.42 1212.44 L1028.83 1212.44 L1028.25 1212.44 L1027.66 1212.44 L1027.07 1212.44 L1026.49 1212.44 L1025.9 1212.44 L1025.32 1212.44 L1024.73 1212.44 L1024.14 1212.44 L1023.56 1212.44 L1022.97 1212.44 L1022.38 1212.44 L1021.8 1212.44 L1021.21 1212.44 L1020.62 1212.44 L1020.04 1212.44 L1019.45 1212.44 L1018.86 1212.44 L1018.28 1212.44 L1017.69 1212.44 L1017.11 1212.44 L1016.52 1212.44 L1015.93 1212.44 L1015.35 1212.44 L1014.76 1212.44 L1014.17 1212.44 L1013.59 1212.44 L1013 1212.44 L1012.41 1212.44 L1011.83 1212.44 L1011.24 1212.44 L1010.65 1212.44 L1010.07 1212.44 L1009.48 1212.44 L1008.9 1212.44 L1008.31 1212.44 L1007.72 1212.44 L1007.14 1212.44 L1006.55 1212.44 L1005.96 1212.44 L1005.38 1212.44 L1004.79 1212.44 L1004.2 1212.44 L1003.62 1212.44 L1003.03 1212.44 L1002.44 1212.44 L1001.86 1212.44 L1001.27 1212.44 L1000.69 1212.44 L1000.1 1212.44 L999.513 1212.44 L998.926 1212.44 L998.34 1212.44 L997.754 1212.44 L997.167 1212.44 L996.581 1212.44 L995.994 1212.44 L995.408 1212.44 L994.822 1212.44 L994.235 1212.44 L993.649 1212.44 L993.062 1212.44 L992.476 1212.44 L991.889 1212.44 L991.303 1212.44 L990.717 1212.44 L990.13 1212.44 L989.544 1212.44 L988.957 1212.44 L988.371 1212.44 L987.785 1212.44 L987.198 1212.44 L986.612 1212.44 L986.025 1212.44  Z\" fill=\"#e26f46\" fill-rule=\"evenodd\" fill-opacity=\"0.5\"/>\n<polyline clip-path=\"url(#clip982)\" style=\"stroke:#e26f46; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"986.025,1212.79 986.612,1212.79 987.198,1212.79 987.785,1212.79 988.371,1212.79 988.957,1212.79 989.544,1212.79 990.13,1212.79 990.717,1212.79 991.303,1212.79 991.889,1212.79 992.476,1212.79 993.062,1212.79 993.649,1212.79 994.235,1212.79 994.822,1212.79 995.408,1212.79 995.994,1212.79 996.581,1212.79 997.167,1212.79 997.754,1212.79 998.34,1212.79 998.926,1212.79 999.513,1212.79 1000.1,1212.79 1000.69,1212.79 1001.27,1212.79 1001.86,1212.79 1002.44,1212.79 1003.03,1212.79 1003.62,1212.79 1004.2,1212.79 1004.79,1212.79 1005.38,1212.79 1005.96,1212.79 1006.55,1212.79 1007.14,1212.79 1007.72,1212.79 1008.31,1212.79 1008.9,1212.79 1009.48,1212.79 1010.07,1212.79 1010.65,1212.79 1011.24,1212.79 1011.83,1212.79 1012.41,1212.79 1013,1212.79 1013.59,1212.79 1014.17,1212.79 1014.76,1212.79 1015.35,1212.79 1015.93,1212.79 1016.52,1212.79 1017.11,1212.79 1017.69,1212.79 1018.28,1212.79 1018.86,1212.79 1019.45,1212.79 1020.04,1212.79 1020.62,1212.79 1021.21,1212.79 1021.8,1212.79 1022.38,1212.79 1022.97,1212.79 1023.56,1212.79 1024.14,1212.79 1024.73,1212.79 1025.32,1212.79 1025.9,1212.79 1026.49,1212.79 1027.07,1212.79 1027.66,1212.79 1028.25,1212.79 1028.83,1212.79 1029.42,1212.79 1030.01,1212.79 1030.59,1212.79 1031.18,1212.79 1031.77,1212.79 1032.35,1212.79 1032.94,1212.79 1033.52,1212.79 1034.11,1212.79 1034.7,1212.79 1035.28,1212.79 1035.87,1212.79 1036.46,1212.79 1037.04,1212.79 1037.63,1212.79 1038.22,1212.79 1038.8,1212.79 1039.39,1212.79 1039.98,1212.79 1040.56,1212.79 1041.15,1212.79 1041.73,1212.79 1042.32,1212.79 1042.91,1212.79 1043.49,1212.79 1044.08,1212.79 1044.67,1212.79 1045.25,1212.79 1045.84,1212.79 1046.43,1212.79 1047.01,1212.79 1047.6,1212.79 1048.19,1212.79 1048.77,1212.79 1049.36,1212.79 1049.94,1212.79 1050.53,1212.79 1051.12,1212.79 1051.7,1212.79 1052.29,1212.79 1052.88,1212.79 1053.46,1212.79 1054.05,1212.79 1054.64,1212.79 1055.22,1212.79 1055.81,1212.79 1056.39,1212.79 1056.98,1212.79 1057.57,1212.79 1058.15,1212.79 1058.74,1212.79 1059.33,1212.79 1059.91,1212.79 1060.5,1212.79 1061.09,1212.79 1061.67,1212.79 1062.26,1212.79 1062.85,1212.79 1063.43,1212.79 1064.02,1212.79 1064.6,1212.79 1065.19,1212.79 1065.78,1212.79 1066.36,1212.79 1066.95,1212.79 1067.54,1212.79 1068.12,1212.79 1068.71,1212.79 1069.3,1212.79 1069.88,1212.79 1070.47,1212.79 1071.06,1212.79 1071.64,1212.79 1072.23,1212.79 1072.81,1212.79 1073.4,1212.79 1073.99,1212.79 1074.57,1212.79 1075.16,1212.79 1075.75,1212.79 1076.33,1212.79 1076.92,1212.79 1077.51,1212.79 1078.09,1212.79 1078.68,1212.79 1079.26,1212.79 1079.85,1212.79 1080.44,1212.79 1081.02,1212.79 1081.61,1212.79 1082.2,1212.79 1082.78,1212.79 1083.37,1212.79 1083.96,1212.79 1084.54,1212.79 1085.13,1212.79 1085.72,1212.79 1086.3,1212.79 1086.89,1212.79 1087.47,1212.79 1088.06,1212.79 1088.65,1212.79 1089.23,1212.79 1089.82,1212.79 1090.41,1212.79 1090.99,1212.79 1091.58,1212.79 1092.17,1212.79 1092.75,1212.79 1093.34,1212.79 1093.93,1212.79 1094.51,1212.79 1095.1,1212.79 1095.68,1212.79 1096.27,1212.79 1096.86,1212.79 1097.44,1212.79 1098.03,1212.79 1098.62,1212.79 1099.2,1212.79 1099.79,1212.79 1100.38,1212.79 1100.96,1212.79 1101.55,1212.79 1102.14,1212.79 1102.72,1212.79 1103.31,1212.79 1103.89,1212.79 1104.48,1212.79 1105.07,1212.79 1105.65,1212.79 1106.24,1212.79 1106.83,1212.79 1107.41,1212.79 1108,1212.79 1108.59,1212.79 1109.17,1212.79 1109.76,1212.79 1110.34,1212.79 1110.93,1212.79 1111.52,1212.79 1112.1,1212.79 1112.69,1212.79 1113.28,1212.79 1113.86,1212.79 1114.45,1212.79 1115.04,1212.79 1115.62,1212.79 1116.21,1212.79 1116.8,1212.79 1117.38,1212.79 1117.97,1212.79 1118.55,1212.79 1119.14,1212.79 1119.73,1212.79 1120.31,1212.79 1120.9,1212.79 1121.49,1212.79 1122.07,1212.79 1122.66,1212.79 1123.25,1212.79 1123.83,1212.79 1124.42,1212.79 1125.01,1212.79 1125.59,1212.79 1126.18,1212.79 1126.76,1212.79 1127.35,1212.79 1127.94,1212.79 1128.52,1212.79 1129.11,1212.79 1129.7,1212.79 1130.28,1212.79 1130.87,1212.79 1131.46,1212.79 1132.04,1212.79 1132.63,1212.79 1133.21,1212.79 1133.8,1212.79 1134.39,1212.79 1134.97,1212.79 1135.56,1212.79 1136.15,1212.79 1136.73,1212.79 1137.32,1212.79 1137.91,1212.79 1138.49,1212.79 1139.08,1212.79 1139.67,1212.79 1140.25,1212.79 1140.84,1212.79 1141.42,1212.79 1142.01,1212.79 1142.6,1212.79 1143.18,1212.79 1143.77,1212.79 1144.36,1212.79 1144.94,1212.79 1145.53,1212.79 1146.12,1212.79 1146.7,1212.79 1147.29,1212.79 1147.88,1212.79 1148.46,1212.79 1149.05,1212.79 1149.63,1212.79 1150.22,1212.79 1150.81,1212.79 1151.39,1212.79 1151.98,1212.79 1152.57,1212.79 1153.15,1212.79 1153.74,1212.79 1154.33,1212.79 1154.91,1212.79 1155.5,1212.79 1156.09,1212.79 1156.67,1212.79 1157.26,1212.79 1157.84,1212.79 1158.43,1212.79 1159.02,1212.79 1159.6,1212.79 1160.19,1212.79 1160.78,1212.79 1161.36,1212.79 1161.95,1212.79 1162.54,1212.79 1163.12,1212.79 1163.71,1212.79 1164.29,1212.79 1164.88,1212.79 1165.47,1212.79 1166.05,1212.79 1166.64,1212.79 1167.23,1212.79 1167.81,1212.79 1168.4,1212.79 1168.99,1212.79 1169.57,1212.79 1170.16,1212.79 1170.75,1212.79 1171.33,1212.79 1171.92,1212.79 1172.5,1212.79 1173.09,1212.79 1173.68,1212.79 1174.26,1212.79 1174.85,1212.79 1175.44,1212.79 1176.02,1212.79 1176.61,1212.79 1177.2,1212.79 1177.78,1212.79 1178.37,1212.79 1178.96,1212.79 1179.54,1212.79 1180.13,1212.79 1180.71,1212.79 1181.3,1212.79 1181.89,1212.79 1182.47,1212.79 1183.06,1212.79 1183.65,1212.79 1184.23,1212.79 1184.82,1212.79 1185.41,1212.79 1185.99,1212.79 1186.58,1212.79 1187.16,1212.79 1187.75,1212.79 1188.34,1212.79 1188.92,1212.79 1189.51,1212.79 1190.1,1212.79 1190.68,1212.79 1191.27,1212.79 1191.86,1212.79 1192.44,1212.79 1193.03,1212.79 1193.62,1212.79 1194.2,1212.79 1194.79,1212.79 1195.37,1212.79 1195.96,1212.79 1196.55,1212.79 1197.13,1212.79 1197.72,1212.79 1198.31,1212.79 1198.89,1212.79 1199.48,1212.79 1200.07,1212.79 1200.65,1212.79 1201.24,1212.79 1201.83,1212.79 1202.41,1212.79 1203,1212.79 1203.58,1212.79 1204.17,1212.79 1204.76,1212.79 1205.34,1212.79 1205.93,1212.79 1206.52,1212.79 1207.1,1212.79 1207.69,1212.79 1208.28,1212.79 1208.86,1212.79 1209.45,1212.79 1210.03,1212.79 1210.62,1212.79 1211.21,1212.79 1211.79,1212.79 1212.38,1212.79 1212.97,1212.79 1213.55,1212.79 1214.14,1212.79 1214.73,1212.79 1215.31,1212.79 1215.9,1212.79 1216.49,1212.79 1217.07,1212.79 1217.66,1212.79 1218.24,1212.79 1218.83,1212.79 1219.42,1212.79 1220,1212.79 1220.59,1212.79 1221.18,1212.79 1221.76,1212.79 1222.35,1212.79 1222.94,1212.79 1223.52,1212.79 1224.11,1212.79 1224.7,1212.79 1225.28,1212.79 1225.87,1212.79 1226.45,1212.79 1227.04,1212.79 1227.63,1212.79 1228.21,1212.79 1228.8,1212.79 1229.39,1212.79 1229.97,1212.79 1230.56,1212.79 1231.15,1212.79 1231.73,1212.79 1232.32,1212.79 1232.91,1212.79 1233.49,1212.79 1234.08,1212.79 1234.66,1212.79 1235.25,1212.79 1235.84,1212.79 1236.42,1212.79 1237.01,1212.79 1237.6,1212.79 1238.18,1212.79 1238.77,1212.79 1239.36,1212.79 1239.94,1212.79 1240.53,1212.79 1241.11,1212.79 1241.7,1212.79 1242.29,1212.79 1242.87,1212.79 1243.46,1212.79 1244.05,1212.79 1244.63,1212.79 1245.22,1212.79 1245.81,1212.79 1246.39,1212.79 1246.98,1212.79 1247.57,1212.79 1248.15,1212.79 1248.74,1212.79 1249.32,1212.79 1249.91,1212.79 1250.5,1212.79 1251.08,1212.79 1251.67,1212.79 1252.26,1212.79 1252.84,1212.79 1253.43,1212.79 1254.02,1212.79 1254.6,1212.79 1255.19,1212.79 1255.78,1212.79 1256.36,1212.79 1256.95,1212.79 1257.53,1212.79 1258.12,1212.79 1258.71,1212.79 1259.29,1212.79 1259.88,1212.79 1260.47,1212.79 1261.05,1212.79 1261.64,1212.79 1262.23,1212.79 1262.81,1212.79 1263.4,1212.79 1263.98,1212.79 1264.57,1212.79 1265.16,1212.79 1265.74,1212.79 1266.33,1212.79 1266.92,1212.79 1267.5,1212.79 1268.09,1212.79 1268.68,1212.79 1269.26,1212.79 1269.85,1212.79 1270.44,1212.79 1271.02,1212.79 1271.61,1212.79 1272.19,1212.79 1272.78,1212.79 1273.37,1212.79 1273.95,1212.79 1274.54,1212.79 1275.13,1212.79 1275.71,1212.79 1276.3,1212.79 1276.89,1212.79 1277.47,1212.79 1278.06,1212.79 1278.65,1212.79 1279.23,1212.79 1279.82,1212.79 1280.4,1212.79 1280.99,1212.79 1281.58,1212.79 1282.16,1212.79 1282.75,1212.79 1283.34,1212.79 1283.92,1212.79 1284.51,1212.79 1285.1,1212.79 1285.68,1212.79 1286.27,1212.79 1286.86,1212.79 1287.44,1212.79 1288.03,1212.79 1288.61,1212.79 1289.2,1212.79 1289.79,1212.79 1290.37,1212.79 1290.96,1212.79 1291.55,1212.79 1292.13,1212.79 1292.72,1212.79 1293.31,1212.79 1293.89,1212.79 1294.48,1212.79 1295.06,1212.79 1295.65,1212.79 1296.24,1212.79 1296.82,1212.79 1297.41,1212.79 1298,1212.79 1298.58,1212.79 1299.17,1212.79 1299.76,1212.79 1300.34,1212.79 1300.93,1212.79 1301.52,1212.79 1302.1,1212.79 1302.69,1212.79 1303.27,1212.79 1303.86,1212.79 1304.45,1212.79 1305.03,1212.79 1305.62,1212.79 1306.21,1212.79 1306.79,1212.79 1307.38,1212.79 1307.97,1212.79 1308.55,1212.79 1309.14,1212.79 1309.73,1212.79 1310.31,1212.79 1310.9,1212.79 1311.48,1212.79 1312.07,1212.79 1312.66,1212.79 1313.24,1212.79 1313.83,1212.79 1314.42,1212.79 1315,1212.79 1315.59,1212.79 1316.18,1212.79 1316.76,1212.79 1317.35,1212.79 1317.93,1212.79 1318.52,1212.79 1319.11,1212.79 1319.69,1212.79 1320.28,1212.79 1320.87,1212.79 1321.45,1212.79 1322.04,1212.79 1322.63,1212.79 1323.21,1212.79 1323.8,1212.79 1324.39,1212.79 1324.97,1212.79 1325.56,1212.79 1326.14,1212.79 1326.73,1212.79 1327.32,1212.79 1327.9,1212.79 1328.49,1212.79 1329.08,1212.79 1329.66,1212.79 1330.25,1212.79 1330.84,1212.79 1331.42,1212.79 1332.01,1212.79 1332.6,1212.79 1333.18,1212.79 1333.77,1212.79 1334.35,1212.79 1334.94,1212.79 1335.53,1212.79 1336.11,1212.79 1336.7,1212.79 1337.29,1212.79 1337.87,1212.79 1338.46,1212.79 1339.05,1212.79 1339.63,1212.79 1340.22,1212.79 1340.8,1212.79 1341.39,1212.79 1341.98,1212.79 1342.56,1212.79 1343.15,1212.79 1343.74,1212.79 1344.32,1212.79 1344.91,1212.79 1345.5,1212.79 1346.08,1212.79 1346.67,1212.79 1347.26,1212.79 1347.84,1212.79 1348.43,1212.79 1349.01,1212.79 1349.6,1212.79 1350.19,1212.79 1350.77,1212.79 1351.36,1212.79 1351.95,1212.79 1352.53,1212.79 1353.12,1212.79 1353.71,1212.79 1354.29,1212.79 1354.88,1212.79 1355.47,1212.79 1356.05,1212.79 1356.64,1212.79 1357.22,1212.79 1357.81,1212.79 1358.4,1212.79 1358.98,1212.79 1359.57,1212.79 1360.16,1212.79 1360.74,1212.79 1361.33,1212.79 1361.92,1212.79 1362.5,1212.79 1363.09,1212.79 1363.68,1212.79 1364.26,1212.79 1364.85,1212.79 1365.43,1212.79 1366.02,1212.79 1366.61,1212.79 1367.19,1212.79 1367.78,1212.79 1368.37,1212.79 1368.95,1212.79 1369.54,1212.79 1370.13,1212.79 1370.71,1212.79 1371.3,1212.79 1371.88,1212.79 1372.47,1212.79 1373.06,1212.79 1373.64,1212.79 1374.23,1212.79 1374.82,1212.79 1375.4,1212.79 1375.99,1212.79 1376.58,1212.79 1377.16,1212.79 1377.75,1212.79 1378.34,1212.79 1378.92,1212.79 1379.51,1212.79 1380.09,1212.79 1380.68,1212.79 1381.27,1212.79 1381.85,1212.79 1382.44,1212.79 1383.03,1212.79 1383.61,1212.79 1384.2,1212.79 1384.79,1212.79 1385.37,1212.79 1385.96,1212.79 1386.55,1212.79 1387.13,1212.79 1387.72,1212.79 1388.3,1212.79 1388.89,1212.79 1389.48,1212.79 1390.06,1212.79 1390.65,1212.79 1391.24,1212.79 1391.82,1212.79 1392.41,1212.79 1393,1212.79 1393.58,1212.79 1394.17,1212.79 1394.75,1212.79 1395.34,1212.79 1395.93,1212.79 1396.51,1212.79 1397.1,1212.79 1397.69,1212.79 1398.27,1212.79 1398.86,1212.79 1399.45,1212.79 1400.03,1212.79 1400.62,1212.79 1401.21,1212.79 1401.79,1212.79 1402.38,1212.79 1402.96,1212.79 1403.55,1212.79 1404.14,1212.79 1404.72,1212.79 1405.31,1212.79 1405.9,1212.79 1406.48,1212.79 1407.07,1212.79 1407.66,1212.79 1408.24,1212.79 1408.83,1212.79 1409.42,1212.79 1410,1212.79 1410.59,1212.79 1411.17,1212.79 1411.76,1212.79 1412.35,1212.79 1412.93,1212.79 1413.52,1212.79 1414.11,1212.79 1414.69,1212.79 1415.28,1212.79 1415.87,1212.79 1416.45,1212.79 1417.04,1212.79 1417.63,1212.79 1418.21,1212.79 1418.8,1212.79 1419.38,1212.79 1419.97,1212.79 1420.56,1212.79 1421.14,1212.79 1421.73,1212.79 1422.32,1212.79 1422.9,1212.79 1423.49,1212.79 1424.08,1212.79 1424.66,1212.79 1425.25,1212.79 1425.83,1212.79 1426.42,1212.79 1427.01,1212.79 1427.59,1212.79 1428.18,1212.79 1428.77,1212.79 1429.35,1212.79 1429.94,1212.79 1430.53,1212.79 1431.11,1212.79 1431.7,1212.79 1432.29,1212.79 1432.87,1212.79 1433.46,1212.79 1434.04,1212.79 1434.63,1212.79 1435.22,1212.79 1435.8,1212.79 1436.39,1212.79 1436.98,1212.79 1437.56,1212.79 1438.15,1212.79 1438.74,1212.79 1439.32,1212.79 1439.91,1212.79 1440.5,1212.79 1441.08,1212.79 1441.67,1212.79 1442.25,1212.79 1442.84,1212.79 1443.43,1212.79 1444.01,1212.79 1444.6,1212.79 1445.19,1212.79 1445.77,1212.79 1446.36,1212.79 1446.95,1212.79 1447.53,1212.79 1448.12,1212.79 1448.7,1212.79 1449.29,1212.79 1449.88,1212.79 1450.46,1212.79 1451.05,1212.79 1451.64,1212.79 1452.22,1212.79 1452.81,1212.79 1453.4,1212.79 1453.98,1212.79 1454.57,1212.79 1455.16,1212.79 1455.74,1212.79 1456.33,1212.79 1456.91,1212.79 1457.5,1212.79 1458.09,1212.79 1458.67,1212.79 1459.26,1212.79 1459.85,1212.79 1460.43,1212.79 1461.02,1212.79 1461.61,1212.79 1462.19,1212.79 1462.78,1212.79 1463.37,1212.79 1463.95,1212.79 1464.54,1212.79 1465.12,1212.79 1465.71,1212.79 1466.3,1212.79 1466.88,1212.79 1467.47,1212.79 1468.06,1212.79 1468.64,1212.79 1469.23,1212.79 1469.82,1212.79 1470.4,1212.79 1470.99,1212.79 1471.57,1212.79 1472.16,1212.79 1472.75,1212.79 1473.33,1212.79 1473.92,1212.79 1474.51,1212.79 1475.09,1212.79 1475.68,1212.79 1476.27,1212.79 1476.85,1212.79 1477.44,1212.79 1478.03,1212.79 1478.61,1212.79 1479.2,1212.79 1479.78,1212.79 1480.37,1212.79 1480.96,1212.79 1481.54,1212.79 1482.13,1212.79 1482.72,1212.79 1483.3,1212.79 1483.89,1212.79 1484.48,1212.79 1485.06,1212.79 1485.65,1212.79 1486.24,1212.79 1486.82,1212.79 1487.41,1212.79 1487.99,1212.79 1488.58,1212.79 1489.17,1212.79 1489.75,1212.79 1490.34,1212.79 1490.93,1212.79 1491.51,1212.79 1492.1,1212.79 1492.69,1212.79 1493.27,1212.79 1493.86,1212.79 1494.45,1212.79 1495.03,1212.79 1495.62,1212.79 1496.2,1212.79 1496.79,1212.79 1497.38,1212.79 1497.96,1212.79 1498.55,1212.79 1499.14,1212.79 1499.72,1212.79 1500.31,1212.79 1500.9,1212.79 1501.48,1212.79 1502.07,1212.79 1502.65,1212.79 1503.24,1212.79 1503.83,1212.79 1504.41,1212.79 1505,1212.79 1505.59,1212.79 1506.17,1212.79 1506.76,1212.79 1507.35,1212.79 1507.93,1212.79 1508.52,1212.79 1509.11,1212.79 1509.69,1212.79 1510.28,1212.79 1510.86,1212.79 1511.45,1212.79 1512.04,1212.79 1512.62,1212.79 1513.21,1212.79 1513.8,1212.79 1514.38,1212.79 1514.97,1212.79 1515.56,1212.79 1516.14,1212.79 1516.73,1212.79 1517.32,1212.79 1517.9,1212.79 1518.49,1212.79 1519.07,1212.79 1519.66,1212.79 1520.25,1212.79 1520.83,1212.79 1521.42,1212.79 1522.01,1212.79 1522.59,1212.79 1523.18,1212.79 1523.77,1212.79 1524.35,1212.79 1524.94,1212.79 1525.52,1212.79 1526.11,1212.79 1526.7,1212.79 1527.28,1212.79 1527.87,1212.79 1528.46,1212.79 1529.04,1212.79 1529.63,1212.79 1530.22,1212.79 1530.8,1212.79 1531.39,1212.79 1531.98,1212.79 1532.56,1212.79 1533.15,1212.79 1533.73,1212.79 1534.32,1212.79 1534.91,1212.79 1535.49,1212.79 1536.08,1212.79 1536.67,1212.79 1537.25,1212.79 1537.84,1212.79 1538.43,1212.79 1539.01,1212.79 1539.6,1212.79 1540.19,1212.79 1540.77,1212.79 1541.36,1212.79 1541.94,1212.79 1542.53,1212.79 1543.12,1212.79 1543.7,1212.79 1544.29,1212.79 1544.88,1212.79 1545.46,1212.79 1546.05,1212.79 1546.64,1212.79 1547.22,1212.79 1547.81,1212.79 1548.4,1212.79 1548.98,1212.79 1549.57,1212.79 1550.15,1212.79 1550.74,1212.79 1551.33,1212.79 1551.91,1212.79 1552.5,1212.79 1553.09,1212.79 1553.67,1212.79 1554.26,1212.79 1554.85,1212.79 1555.43,1212.79 1556.02,1212.79 1556.6,1212.79 1557.19,1212.79 1557.78,1212.79 1558.36,1212.79 1558.95,1212.79 1559.54,1212.79 1560.12,1212.79 1560.71,1212.79 1561.3,1212.79 1561.88,1212.79 1562.47,1212.79 1563.06,1212.79 1563.64,1212.79 1564.23,1212.79 1564.81,1212.79 1565.4,1212.79 1565.99,1212.79 1566.57,1212.79 1567.16,1212.79 1567.75,1212.79 1568.33,1212.79 1568.92,1212.79 1569.51,1212.79 1570.09,1212.79 1570.68,1212.79 1571.27,1212.79 1571.85,1212.79 1572.44,1212.79 1573.02,1212.79 1573.61,1212.79 1574.2,1212.79 1574.78,1212.79 1575.37,1212.79 1575.96,1212.79 1576.54,1212.79 1577.13,1212.79 1577.72,1212.79 1578.3,1212.79 1578.89,1212.79 1579.47,1212.79 1580.06,1212.79 1580.65,1212.79 1581.23,1212.79 1581.82,1212.79 1582.41,1212.79 1582.99,1212.79 1583.58,1212.79 1584.17,1212.79 1584.75,1212.79 1585.34,1212.79 1585.93,1212.79 1586.51,1212.79 1587.1,1212.79 1587.68,1212.79 1588.27,1212.79 1588.86,1212.79 1589.44,1212.79 1590.03,1212.79 1590.62,1212.79 1591.2,1212.79 1591.79,1212.79 1592.38,1212.79 1592.96,1212.79 1593.55,1212.79 1594.14,1212.79 1594.72,1212.79 1595.31,1212.79 1595.89,1212.79 1596.48,1212.79 1597.07,1212.79 1597.65,1212.79 1598.24,1212.79 1598.83,1212.79 1599.41,1212.79 1600,1212.79 1600.59,1212.79 1601.17,1212.79 1601.76,1212.79 1602.34,1212.79 1602.93,1212.79 1603.52,1212.79 1604.1,1212.79 1604.69,1212.79 1605.28,1212.79 1605.86,1212.79 1606.45,1212.79 1607.04,1212.79 1607.62,1212.79 1608.21,1212.79 1608.8,1212.79 1609.38,1212.79 1609.97,1212.79 1610.55,1212.79 1611.14,1212.79 1611.73,1212.79 1612.31,1212.79 1612.9,1212.79 1613.49,1212.79 1614.07,1212.79 1614.66,1212.79 1615.25,1212.79 1615.83,1212.79 1616.42,1212.79 1617.01,1212.79 1617.59,1212.79 1618.18,1212.79 1618.76,1212.79 1619.35,1212.79 1619.94,1212.79 1620.52,1212.79 1621.11,1212.79 1621.7,1212.79 1622.28,1212.79 1622.87,1212.79 1623.46,1212.79 1624.04,1212.79 1624.63,1212.79 1625.22,1212.79 1625.8,1212.79 1626.39,1212.79 1626.97,1212.79 1627.56,1212.79 1628.15,1212.79 1628.73,1212.79 1629.32,1212.79 1629.91,1212.79 1630.49,1212.79 1631.08,1212.79 1631.67,1212.79 1632.25,1212.79 1632.84,1212.79 1633.42,1212.79 1634.01,1212.79 1634.6,1212.79 1635.18,1212.79 1635.77,1212.79 1636.36,1212.79 1636.94,1212.79 1637.53,1212.79 1638.12,1212.79 1638.7,1212.79 1639.29,1212.79 1639.88,1212.79 1640.46,1212.79 1641.05,1212.79 1641.63,1212.79 1642.22,1212.79 1642.81,1212.79 1643.39,1212.79 1643.98,1212.79 1644.57,1212.79 1645.15,1212.79 1645.74,1212.79 1646.33,1212.79 1646.91,1212.79 1647.5,1212.79 1648.09,1212.79 1648.67,1212.79 1649.26,1212.79 1649.84,1212.79 1650.43,1212.79 1651.02,1212.79 1651.6,1212.79 1652.19,1212.79 1652.78,1212.79 1653.36,1212.79 1653.95,1212.79 1654.54,1212.79 1655.12,1212.79 1655.71,1212.79 1656.29,1212.79 1656.88,1212.79 1657.47,1212.79 1658.05,1212.79 1658.64,1212.79 1659.23,1212.79 1659.81,1212.79 1660.4,1212.79 1660.99,1212.79 1661.57,1212.79 1662.16,1212.79 1662.75,1212.79 1663.33,1212.79 1663.92,1212.79 1664.5,1212.79 1665.09,1212.79 1665.68,1212.79 1666.26,1212.79 1666.85,1212.79 1667.44,1212.79 1668.02,1212.79 1668.61,1212.79 1669.2,1212.79 1669.78,1212.79 1670.37,1212.79 1670.96,1212.79 1671.54,1212.79 1672.13,1212.79 1672.71,1212.79 1673.3,1212.79 1673.89,1212.79 1674.47,1212.79 1675.06,1212.79 1675.65,1212.79 1676.23,1212.79 1676.82,1212.79 1677.41,1212.79 1677.99,1212.79 1678.58,1212.79 1679.17,1212.79 1679.75,1212.79 1680.34,1212.79 1680.92,1212.79 1681.51,1212.79 1682.1,1212.79 1682.68,1212.79 1683.27,1212.79 1683.86,1212.79 1684.44,1212.79 1685.03,1212.79 1685.62,1212.79 1686.2,1212.79 1686.79,1212.79 1687.37,1212.79 1687.96,1212.79 1688.55,1212.79 1689.13,1212.79 1689.72,1212.79 1690.31,1212.79 1690.89,1212.79 1691.48,1212.79 1692.07,1212.79 1692.65,1212.79 1693.24,1212.79 1693.83,1212.79 1694.41,1212.79 1695,1212.79 1695.58,1212.79 1696.17,1212.79 1696.76,1212.79 1697.34,1212.79 1697.93,1212.79 1698.52,1212.79 1699.1,1212.79 1699.69,1212.79 1700.28,1212.79 1700.86,1212.79 1701.45,1212.79 1702.04,1212.79 1702.62,1212.79 1703.21,1212.79 1703.79,1212.79 1704.38,1212.79 1704.97,1212.79 1705.55,1212.79 1706.14,1212.79 1706.73,1212.79 1707.31,1212.79 1707.9,1212.79 1708.49,1212.79 1709.07,1212.79 1709.66,1212.79 1710.24,1212.79 1710.83,1212.79 1711.42,1212.79 1712,1212.79 1712.59,1212.79 1713.18,1212.79 1713.76,1212.79 1714.35,1212.79 1714.94,1212.79 1715.52,1212.79 1716.11,1212.79 1716.7,1212.79 1717.28,1212.79 1717.87,1212.79 1718.45,1212.79 1719.04,1212.79 1719.63,1212.79 1720.21,1212.79 1720.8,1212.79 1721.39,1212.79 1721.97,1212.79 1722.56,1212.79 1723.15,1212.79 1723.73,1212.79 1724.32,1212.79 1724.91,1212.79 1725.49,1212.79 1726.08,1212.79 1726.66,1212.79 1727.25,1212.79 1727.84,1212.79 1728.42,1212.79 1729.01,1212.79 1729.6,1212.79 1730.18,1212.79 1730.77,1212.79 1731.36,1212.79 1731.94,1212.79 1732.53,1212.79 1733.11,1212.79 1733.7,1212.79 1734.29,1212.79 1734.87,1212.79 1735.46,1212.79 1736.05,1212.79 1736.63,1212.79 1737.22,1212.79 1737.81,1212.79 1738.39,1212.79 1738.98,1212.79 1739.57,1212.79 1740.15,1212.79 1740.74,1212.79 1741.32,1212.79 1741.91,1212.79 1742.5,1212.79 1743.08,1212.79 1743.67,1212.79 1744.26,1212.79 1744.84,1212.79 1745.43,1212.79 1746.02,1212.79 1746.6,1212.79 1747.19,1212.79 1747.78,1212.79 1748.36,1212.79 1748.95,1212.79 1749.53,1212.79 1750.12,1212.79 1750.71,1212.79 1751.29,1212.79 1751.88,1212.79 1752.47,1212.79 1753.05,1212.79 1753.64,1212.79 1754.23,1212.79 1754.81,1212.79 1755.4,1212.79 1755.99,1212.79 1756.57,1212.79 1757.16,1212.79 1757.74,1212.79 1758.33,1212.79 1758.92,1212.79 1759.5,1212.79 1760.09,1212.79 1760.68,1212.79 1761.26,1212.79 1761.85,1212.79 1762.44,1212.79 1763.02,1212.79 1763.61,1212.79 1764.19,1212.79 1764.78,1212.79 1765.37,1212.79 1765.95,1212.79 1766.54,1212.79 1767.13,1212.79 1767.71,1212.79 1768.3,1212.79 1768.89,1212.79 1769.47,1212.79 1770.06,1212.79 1770.65,1212.79 1771.23,1212.79 1771.82,1212.79 1772.4,1212.79 1772.99,1212.79 1773.58,1212.79 1774.16,1212.79 1774.75,1212.79 1775.34,1212.79 1775.92,1212.79 1776.51,1212.79 1777.1,1212.79 1777.68,1212.79 1778.27,1212.79 1778.86,1212.79 1779.44,1212.79 1780.03,1212.79 1780.61,1212.79 1781.2,1212.79 1781.79,1212.79 1782.37,1212.79 1782.96,1212.79 1783.55,1212.79 1784.13,1212.79 1784.72,1212.79 1785.31,1212.79 1785.89,1212.79 1786.48,1212.79 1787.06,1212.79 1787.65,1212.79 1788.24,1212.79 1788.82,1212.79 1789.41,1212.79 1790,1212.79 1790.58,1212.79 1791.17,1212.79 1791.76,1212.79 1792.34,1212.79 1792.93,1212.79 1793.52,1212.79 1794.1,1212.79 1794.69,1212.79 1795.27,1212.79 1795.86,1212.79 1796.45,1212.79 1797.03,1212.79 1797.62,1212.79 1798.21,1212.79 1798.79,1212.79 1799.38,1212.79 1799.97,1212.79 1800.55,1212.79 1801.14,1212.79 1801.73,1212.79 1802.31,1212.79 1802.9,1212.79 1803.48,1212.79 1804.07,1212.79 1804.66,1212.79 1805.24,1212.79 1805.83,1212.79 1806.42,1212.79 1807,1212.79 1807.59,1212.79 1808.18,1212.79 1808.76,1212.79 1809.35,1212.79 1809.94,1212.79 1810.52,1212.79 1811.11,1212.79 1811.69,1212.79 1812.28,1212.79 1812.87,1212.79 1813.45,1212.79 1814.04,1212.79 1814.63,1212.79 1815.21,1212.79 1815.8,1212.79 1816.39,1212.79 1816.97,1212.79 1817.56,1212.79 1818.14,1212.79 1818.73,1212.79 1819.32,1212.79 1819.9,1212.79 1820.49,1212.79 1821.08,1212.79 1821.66,1212.79 1822.25,1212.79 1822.84,1212.79 1823.42,1212.79 1824.01,1212.79 1824.6,1212.79 1825.18,1212.79 1825.77,1212.79 1826.35,1212.79 1826.94,1212.79 1827.53,1212.79 1828.11,1212.79 1828.7,1212.79 1829.29,1212.79 1829.87,1212.79 1830.46,1212.79 1831.05,1212.79 1831.63,1212.79 1832.22,1212.79 1832.81,1212.79 1833.39,1212.79 1833.98,1212.79 1834.56,1212.79 1835.15,1212.79 1835.74,1212.79 1836.32,1212.79 1836.91,1212.79 1837.5,1212.79 1838.08,1212.79 1838.67,1212.79 1839.26,1212.79 1839.84,1212.79 1840.43,1212.79 1841.01,1212.79 1841.6,1212.79 1842.19,1212.79 1842.77,1212.79 1843.36,1212.79 1843.95,1212.79 1844.53,1212.79 1845.12,1212.79 1845.71,1212.79 1846.29,1212.79 1846.88,1212.79 1847.47,1212.79 1848.05,1212.79 1848.64,1212.79 1849.22,1212.79 1849.81,1212.79 1850.4,1212.79 1850.98,1212.79 1851.57,1212.79 1852.16,1212.79 1852.74,1212.79 1853.33,1212.79 1853.92,1212.79 1854.5,1212.79 1855.09,1212.79 1855.68,1212.79 1856.26,1212.79 1856.85,1212.79 1857.43,1212.79 1858.02,1212.79 1858.61,1212.79 1859.19,1212.79 1859.78,1212.79 1860.37,1212.79 1860.95,1212.79 1861.54,1212.79 1862.13,1212.79 1862.71,1212.79 1863.3,1212.79 1863.88,1212.79 1864.47,1212.79 1865.06,1212.79 1865.64,1212.79 1866.23,1212.79 1866.82,1212.79 1867.4,1212.79 1867.99,1212.79 1868.58,1212.79 1869.16,1212.79 1869.75,1212.79 1870.34,1212.79 1870.92,1212.79 1871.51,1212.79 1872.09,1212.79 1872.68,1212.79 1873.27,1212.79 1873.85,1212.79 1874.44,1212.79 1875.03,1212.79 1875.61,1212.79 1876.2,1212.79 1876.79,1212.79 1877.37,1212.79 1877.96,1212.79 1878.55,1212.79 1879.13,1212.79 1879.72,1212.79 1880.3,1212.79 1880.89,1212.79 1881.48,1212.79 1882.06,1212.79 1882.65,1212.79 1883.24,1212.79 1883.82,1212.79 1884.41,1212.79 1885,1212.79 1885.58,1212.79 1886.17,1212.79 1886.76,1212.79 1887.34,1212.79 1887.93,1212.79 1888.51,1212.79 1889.1,1212.79 1889.69,1212.79 1890.27,1212.79 1890.86,1212.79 1891.45,1212.79 1892.03,1212.79 1892.62,1212.79 1893.21,1212.79 1893.79,1212.79 1894.38,1212.79 1894.96,1212.79 1895.55,1212.79 1896.14,1212.79 1896.72,1212.79 1897.31,1212.79 1897.9,1212.79 1898.48,1212.79 1899.07,1212.79 1899.66,1212.79 1900.24,1212.79 1900.83,1212.79 1901.42,1212.79 1902,1212.79 1902.59,1212.79 1903.17,1212.79 1903.76,1212.79 1904.35,1212.79 1904.93,1212.79 1905.52,1212.79 1906.11,1212.79 1906.69,1212.79 1907.28,1212.79 1907.87,1212.79 1908.45,1212.79 1909.04,1212.79 1909.63,1212.79 1910.21,1212.79 1910.8,1212.79 1911.38,1212.79 1911.97,1212.79 1912.56,1212.79 1913.14,1212.79 1913.73,1212.79 1914.32,1212.79 1914.9,1212.79 1915.49,1212.79 1916.08,1212.79 1916.66,1212.79 1917.25,1212.79 1917.83,1212.79 1918.42,1212.79 1919.01,1212.79 1919.59,1212.79 1920.18,1212.79 1920.77,1212.79 1921.35,1212.79 1921.94,1212.79 1922.53,1212.79 1923.11,1212.79 1923.7,1212.79 1924.29,1212.79 1924.87,1212.79 1925.46,1212.79 1926.04,1212.79 1926.63,1212.79 1927.22,1212.79 1927.8,1212.79 1928.39,1212.79 1928.98,1212.79 1929.56,1212.79 1930.15,1212.79 1930.74,1212.79 1931.32,1212.79 1931.91,1212.79 1932.5,1212.79 1933.08,1212.79 1933.67,1212.79 1934.25,1212.79 1934.84,1212.79 1935.43,1212.79 1936.01,1212.79 1936.6,1212.79 1937.19,1212.79 1937.77,1212.79 1938.36,1212.79 1938.95,1212.79 1939.53,1212.79 1940.12,1212.79 1940.71,1212.79 1941.29,1212.79 1941.88,1212.79 1942.46,1212.79 1943.05,1212.79 1943.64,1212.79 1944.22,1212.79 1944.81,1212.79 1945.4,1212.79 1945.98,1212.79 1946.57,1212.79 1947.16,1212.79 1947.74,1212.79 1948.33,1212.79 1948.91,1212.79 1949.5,1212.79 1950.09,1212.79 1950.67,1212.79 1951.26,1212.79 1951.85,1212.79 1952.43,1212.79 1953.02,1212.79 1953.61,1212.79 1954.19,1212.79 1954.78,1212.79 1955.37,1212.79 1955.95,1212.79 1956.54,1212.79 1957.12,1212.79 1957.71,1212.79 1958.3,1212.79 1958.88,1212.79 1959.47,1212.79 1960.06,1212.79 1960.64,1212.79 1961.23,1212.79 1961.82,1212.79 1962.4,1212.79 1962.99,1212.79 1963.58,1212.79 1964.16,1212.79 1964.75,1212.79 1965.33,1212.79 1965.92,1212.79 1966.51,1212.79 1967.09,1212.79 1967.68,1212.79 1968.27,1212.79 1968.85,1212.79 1969.44,1212.79 1970.03,1212.79 1970.61,1212.79 1971.2,1212.79 1971.78,1212.79 1972.37,1212.79 1972.96,1212.79 1973.54,1212.79 1974.13,1212.79 1974.72,1212.79 1975.3,1212.79 1975.89,1212.79 1976.48,1212.79 1977.06,1212.79 1977.65,1212.79 1978.24,1212.79 1978.82,1212.79 1979.41,1212.79 1979.99,1212.79 1980.58,1212.79 1981.17,1212.79 1981.75,1212.79 1982.34,1212.79 1982.93,1212.79 1983.51,1212.79 1984.1,1212.79 1984.69,1212.79 1985.27,1212.79 1985.86,1212.79 1986.45,1212.79 1987.03,1212.79 1987.62,1212.79 1988.2,1212.79 1988.79,1212.79 1989.38,1212.79 1989.96,1212.79 1990.55,1212.79 1991.14,1212.79 1991.72,1212.79 1992.31,1212.79 1992.9,1212.79 1993.48,1212.79 1994.07,1212.79 1994.65,1212.79 1995.24,1212.79 1995.83,1212.79 1996.41,1212.79 1997,1212.79 1997.59,1212.79 1998.17,1212.79 1998.76,1212.79 1999.35,1212.79 1999.93,1212.79 2000.52,1212.79 2001.11,1212.79 2001.69,1212.79 2002.28,1212.79 2002.86,1212.79 2003.45,1212.79 2004.04,1212.79 2004.62,1212.79 2005.21,1212.79 2005.8,1212.79 2006.38,1212.79 2006.97,1212.79 2007.56,1212.79 2008.14,1212.79 2008.73,1212.79 2009.32,1212.79 2009.9,1212.79 2010.49,1212.79 2011.07,1212.79 2011.66,1212.79 2012.25,1212.79 2012.83,1212.79 2013.42,1212.79 2014.01,1212.79 2014.59,1212.79 2015.18,1212.79 2015.77,1212.79 2016.35,1212.79 2016.94,1212.79 2017.53,1212.79 2018.11,1212.79 2018.7,1212.79 2019.28,1212.79 2019.87,1212.79 2020.46,1212.79 2021.04,1212.79 2021.63,1212.79 2022.22,1212.79 2022.8,1212.79 2023.39,1212.79 2023.98,1212.79 2024.56,1212.79 2025.15,1212.79 2025.73,1212.79 2026.32,1212.79 2026.91,1212.79 2027.49,1212.79 2028.08,1212.79 2028.67,1212.79 2029.25,1212.79 2029.84,1212.79 2030.43,1212.79 2031.01,1212.79 2031.6,1212.79 2032.19,1212.79 2032.77,1212.79 2033.36,1212.79 2033.94,1212.79 2034.53,1212.79 2035.12,1212.79 2035.7,1212.79 2036.29,1212.79 2036.88,1212.79 2037.46,1212.79 2038.05,1212.79 2038.64,1212.79 2039.22,1212.79 2039.81,1212.79 2040.4,1212.79 2040.98,1212.79 2041.57,1212.79 2042.15,1212.79 2042.74,1212.79 2043.33,1212.79 2043.91,1212.79 2044.5,1212.79 2045.09,1212.79 2045.67,1212.79 2046.26,1212.79 2046.85,1212.79 2047.43,1212.79 2048.02,1212.79 2048.6,1212.79 2049.19,1212.79 2049.78,1212.79 2050.36,1212.79 2050.95,1212.79 2051.54,1212.79 2052.12,1212.79 2052.71,1212.79 2053.3,1212.79 2053.88,1212.79 2054.47,1212.79 2055.06,1212.79 2055.64,1212.79 2056.23,1212.79 2056.81,1212.79 2057.4,1212.79 2057.99,1212.79 2058.57,1212.79 2059.16,1212.79 2059.75,1212.79 2060.33,1212.79 2060.92,1212.79 2061.51,1212.79 2062.09,1212.79 2062.68,1212.79 2063.27,1212.79 2063.85,1212.79 2064.44,1212.79 2065.02,1212.79 2065.61,1212.79 2066.2,1212.79 2066.78,1212.79 2067.37,1212.79 2067.96,1212.79 2068.54,1212.79 2069.13,1212.79 2069.72,1212.79 2070.3,1212.79 2070.89,1212.79 2071.48,1212.79 2072.06,1212.79 2072.65,1212.79 2073.23,1212.79 2073.82,1212.79 2074.41,1212.79 2074.99,1212.79 2075.58,1212.79 2076.17,1212.79 2076.75,1212.79 2077.34,1212.79 2077.93,1212.79 2078.51,1212.79 2079.1,1212.79 2079.68,1212.79 2080.27,1212.79 2080.86,1212.79 2081.44,1212.79 2082.03,1212.79 2082.62,1212.79 2083.2,1212.79 2083.79,1212.79 2084.38,1212.79 2084.96,1212.79 2085.55,1212.79 2086.14,1212.79 2086.72,1212.79 2087.31,1212.79 2087.89,1212.79 2088.48,1212.79 2089.07,1212.79 2089.65,1212.79 2090.24,1212.79 2090.83,1212.79 2091.41,1212.79 2092,1212.79 2092.59,1212.79 2093.17,1212.79 2093.76,1212.79 2094.35,1212.79 2094.93,1212.79 2095.52,1212.79 2096.1,1212.79 2096.69,1212.79 2097.28,1212.79 2097.86,1212.79 2098.45,1212.79 2099.04,1212.79 2099.62,1212.79 2100.21,1212.79 2100.8,1212.79 2101.38,1212.79 2101.97,1212.79 2102.55,1212.79 2103.14,1212.79 2103.73,1212.79 2104.31,1212.79 2104.9,1212.79 2105.49,1212.79 2106.07,1212.79 2106.66,1212.79 2107.25,1212.79 2107.83,1212.79 2108.42,1212.79 2109.01,1212.79 2109.59,1212.79 2110.18,1212.79 2110.76,1212.79 2111.35,1212.79 2111.94,1212.79 2112.52,1212.79 2113.11,1212.79 2113.7,1212.79 2114.28,1212.79 2114.87,1212.79 2115.46,1212.79 2116.04,1212.79 2116.63,1212.79 2117.22,1212.79 2117.8,1212.79 2118.39,1212.79 2118.97,1212.79 2119.56,1212.79 2120.15,1212.79 2120.73,1212.79 2121.32,1212.79 2121.91,1212.79 2122.49,1212.79 2123.08,1212.79 2123.67,1212.79 2124.25,1212.79 2124.84,1212.79 2125.42,1212.79 2126.01,1212.79 2126.6,1212.79 2127.18,1212.79 2127.77,1212.79 2128.36,1212.79 2128.94,1212.79 2129.53,1212.79 2130.12,1212.79 2130.7,1212.79 2131.29,1212.79 2131.88,1212.79 2132.46,1212.79 2133.05,1212.79 2133.63,1212.79 2134.22,1212.79 2134.81,1212.79 2135.39,1212.79 2135.98,1212.79 2136.57,1212.79 2137.15,1212.79 2137.74,1212.79 2138.33,1212.79 2138.91,1212.79 2139.5,1212.79 2140.09,1212.79 2140.67,1212.79 2141.26,1212.79 2141.84,1212.79 2142.43,1212.79 2143.02,1212.79 2143.6,1212.79 2144.19,1212.79 2144.78,1212.79 2145.36,1212.79 2145.95,1212.79 2146.54,1212.79 2147.12,1212.79 2147.71,1212.79 2148.3,1212.79 2148.88,1212.79 2149.47,1212.79 2150.05,1212.79 2150.64,1212.79 2151.23,1212.79 2151.81,1212.79 2152.4,1212.79 2152.99,1212.79 2153.57,1212.79 2154.16,1212.79 2154.75,1212.79 2155.33,1212.79 2155.92,1212.79 2156.5,1212.79 2157.09,1212.79 2157.68,1212.79 2158.26,1212.79 \"/>\n<path clip-path=\"url(#clip982)\" d=\"M986.025 1212.58 L986.612 1212.58 L987.198 1212.58 L987.785 1212.58 L988.371 1212.58 L988.957 1212.58 L989.544 1212.58 L990.13 1212.58 L990.717 1212.58 L991.303 1212.58 L991.889 1212.58 L992.476 1212.58 L993.062 1212.58 L993.649 1212.58 L994.235 1212.58 L994.822 1212.58 L995.408 1212.58 L995.994 1212.58 L996.581 1212.58 L997.167 1212.58 L997.754 1212.58 L998.34 1212.58 L998.926 1212.58 L999.513 1212.58 L1000.1 1212.58 L1000.69 1212.58 L1001.27 1212.58 L1001.86 1212.58 L1002.44 1212.58 L1003.03 1212.58 L1003.62 1212.58 L1004.2 1212.58 L1004.79 1212.58 L1005.38 1212.58 L1005.96 1212.58 L1006.55 1212.58 L1007.14 1212.58 L1007.72 1212.58 L1008.31 1212.58 L1008.9 1212.58 L1009.48 1212.58 L1010.07 1212.58 L1010.65 1212.58 L1011.24 1212.58 L1011.83 1212.58 L1012.41 1212.58 L1013 1212.58 L1013.59 1212.58 L1014.17 1212.58 L1014.76 1212.58 L1015.35 1212.58 L1015.93 1212.58 L1016.52 1212.58 L1017.11 1212.58 L1017.69 1212.58 L1018.28 1212.58 L1018.86 1212.58 L1019.45 1212.58 L1020.04 1212.58 L1020.62 1212.58 L1021.21 1212.58 L1021.8 1212.58 L1022.38 1212.58 L1022.97 1212.58 L1023.56 1212.58 L1024.14 1212.58 L1024.73 1212.58 L1025.32 1212.58 L1025.9 1212.58 L1026.49 1212.58 L1027.07 1212.58 L1027.66 1212.58 L1028.25 1212.58 L1028.83 1212.58 L1029.42 1212.58 L1030.01 1212.58 L1030.59 1212.58 L1031.18 1212.58 L1031.77 1212.58 L1032.35 1212.58 L1032.94 1212.58 L1033.52 1212.58 L1034.11 1212.58 L1034.7 1212.58 L1035.28 1212.58 L1035.87 1212.58 L1036.46 1212.58 L1037.04 1212.58 L1037.63 1212.58 L1038.22 1212.58 L1038.8 1212.58 L1039.39 1212.58 L1039.98 1212.58 L1040.56 1212.58 L1041.15 1212.58 L1041.73 1212.58 L1042.32 1212.58 L1042.91 1212.58 L1043.49 1212.58 L1044.08 1212.58 L1044.67 1212.58 L1045.25 1212.58 L1045.84 1212.58 L1046.43 1212.58 L1047.01 1212.58 L1047.6 1212.58 L1048.19 1212.58 L1048.77 1212.58 L1049.36 1212.58 L1049.94 1212.58 L1050.53 1212.58 L1051.12 1212.58 L1051.7 1212.58 L1052.29 1212.58 L1052.88 1212.58 L1053.46 1212.58 L1054.05 1212.58 L1054.64 1212.58 L1055.22 1212.58 L1055.81 1212.58 L1056.39 1212.58 L1056.98 1212.58 L1057.57 1212.58 L1058.15 1212.58 L1058.74 1212.58 L1059.33 1212.58 L1059.91 1212.58 L1060.5 1212.58 L1061.09 1212.58 L1061.67 1212.58 L1062.26 1212.58 L1062.85 1212.58 L1063.43 1212.58 L1064.02 1212.58 L1064.6 1212.58 L1065.19 1212.58 L1065.78 1212.58 L1066.36 1212.58 L1066.95 1212.58 L1067.54 1212.58 L1068.12 1212.58 L1068.71 1212.58 L1069.3 1212.58 L1069.88 1212.58 L1070.47 1212.58 L1071.06 1212.58 L1071.64 1212.58 L1072.23 1212.58 L1072.81 1212.58 L1073.4 1212.58 L1073.99 1212.58 L1074.57 1212.58 L1075.16 1212.58 L1075.75 1212.58 L1076.33 1212.58 L1076.92 1212.58 L1077.51 1212.58 L1078.09 1212.58 L1078.68 1212.58 L1079.26 1212.58 L1079.85 1212.58 L1080.44 1212.58 L1081.02 1212.58 L1081.61 1212.58 L1082.2 1212.58 L1082.78 1212.58 L1083.37 1212.58 L1083.96 1212.58 L1084.54 1212.58 L1085.13 1212.58 L1085.72 1212.58 L1086.3 1212.58 L1086.89 1212.58 L1087.47 1212.58 L1088.06 1212.58 L1088.65 1212.58 L1089.23 1212.58 L1089.82 1212.58 L1090.41 1212.58 L1090.99 1212.58 L1091.58 1212.58 L1092.17 1212.58 L1092.75 1212.58 L1093.34 1212.58 L1093.93 1212.58 L1094.51 1212.58 L1095.1 1212.58 L1095.68 1212.58 L1096.27 1212.58 L1096.86 1212.58 L1097.44 1212.58 L1098.03 1212.58 L1098.62 1212.58 L1099.2 1212.58 L1099.79 1212.58 L1100.38 1212.58 L1100.96 1212.58 L1101.55 1212.58 L1102.14 1212.58 L1102.72 1212.58 L1103.31 1212.58 L1103.89 1212.58 L1104.48 1212.58 L1105.07 1212.58 L1105.65 1212.58 L1106.24 1212.58 L1106.83 1212.58 L1107.41 1212.58 L1108 1212.58 L1108.59 1212.58 L1109.17 1212.58 L1109.76 1212.58 L1110.34 1212.58 L1110.93 1212.58 L1111.52 1212.58 L1112.1 1212.58 L1112.69 1212.58 L1113.28 1212.58 L1113.86 1212.58 L1114.45 1212.58 L1115.04 1212.58 L1115.62 1212.58 L1116.21 1212.58 L1116.8 1212.58 L1117.38 1212.58 L1117.97 1212.58 L1118.55 1212.58 L1119.14 1212.58 L1119.73 1212.58 L1120.31 1212.58 L1120.9 1212.58 L1121.49 1212.58 L1122.07 1212.58 L1122.66 1212.58 L1123.25 1212.58 L1123.83 1212.58 L1124.42 1212.58 L1125.01 1212.58 L1125.59 1212.58 L1126.18 1212.58 L1126.76 1212.58 L1127.35 1212.58 L1127.94 1212.58 L1128.52 1212.58 L1129.11 1212.58 L1129.7 1212.58 L1130.28 1212.58 L1130.87 1212.58 L1131.46 1212.58 L1132.04 1212.58 L1132.63 1212.58 L1133.21 1212.58 L1133.8 1212.58 L1134.39 1212.58 L1134.97 1212.58 L1135.56 1212.58 L1136.15 1212.58 L1136.73 1212.58 L1137.32 1212.58 L1137.91 1212.58 L1138.49 1212.58 L1139.08 1212.58 L1139.67 1212.58 L1140.25 1212.58 L1140.84 1212.58 L1141.42 1212.58 L1142.01 1212.58 L1142.6 1212.58 L1143.18 1212.58 L1143.77 1212.58 L1144.36 1212.58 L1144.94 1212.58 L1145.53 1212.58 L1146.12 1212.58 L1146.7 1212.58 L1147.29 1212.58 L1147.88 1212.58 L1148.46 1212.58 L1149.05 1212.58 L1149.63 1212.58 L1150.22 1212.58 L1150.81 1212.58 L1151.39 1212.58 L1151.98 1212.58 L1152.57 1212.58 L1153.15 1212.58 L1153.74 1212.58 L1154.33 1212.58 L1154.91 1212.58 L1155.5 1212.58 L1156.09 1212.58 L1156.67 1212.58 L1157.26 1212.58 L1157.84 1212.58 L1158.43 1212.58 L1159.02 1212.58 L1159.6 1212.58 L1160.19 1212.58 L1160.78 1212.58 L1161.36 1212.58 L1161.95 1212.58 L1162.54 1212.58 L1163.12 1212.58 L1163.71 1212.58 L1164.29 1212.58 L1164.88 1212.58 L1165.47 1212.58 L1166.05 1212.58 L1166.64 1212.58 L1167.23 1212.58 L1167.81 1212.58 L1168.4 1212.58 L1168.99 1212.58 L1169.57 1212.58 L1170.16 1212.58 L1170.75 1212.58 L1171.33 1212.58 L1171.92 1212.58 L1172.5 1212.58 L1173.09 1212.58 L1173.68 1212.58 L1174.26 1212.58 L1174.85 1212.58 L1175.44 1212.58 L1176.02 1212.58 L1176.61 1212.58 L1177.2 1212.58 L1177.78 1212.58 L1178.37 1212.58 L1178.96 1212.58 L1179.54 1212.58 L1180.13 1212.58 L1180.71 1212.58 L1181.3 1212.58 L1181.89 1212.58 L1182.47 1212.58 L1183.06 1212.58 L1183.65 1212.58 L1184.23 1212.58 L1184.82 1212.58 L1185.41 1212.58 L1185.99 1212.58 L1186.58 1212.58 L1187.16 1212.58 L1187.75 1212.58 L1188.34 1212.58 L1188.92 1212.58 L1189.51 1212.58 L1190.1 1212.58 L1190.68 1212.58 L1191.27 1212.58 L1191.86 1212.58 L1192.44 1212.58 L1193.03 1212.58 L1193.62 1212.58 L1194.2 1212.58 L1194.79 1212.58 L1195.37 1212.58 L1195.96 1212.58 L1196.55 1212.58 L1197.13 1212.58 L1197.72 1212.58 L1198.31 1212.58 L1198.89 1212.58 L1199.48 1212.58 L1200.07 1212.58 L1200.65 1212.58 L1201.24 1212.58 L1201.83 1212.58 L1202.41 1212.58 L1203 1212.58 L1203.58 1212.58 L1204.17 1212.58 L1204.76 1212.58 L1205.34 1212.58 L1205.93 1212.58 L1206.52 1212.58 L1207.1 1212.58 L1207.69 1212.58 L1208.28 1212.58 L1208.86 1212.58 L1209.45 1212.58 L1210.03 1212.58 L1210.62 1212.58 L1211.21 1212.58 L1211.79 1212.58 L1212.38 1212.58 L1212.97 1212.58 L1213.55 1212.58 L1214.14 1212.58 L1214.73 1212.58 L1215.31 1212.58 L1215.9 1212.58 L1216.49 1212.58 L1217.07 1212.58 L1217.66 1212.58 L1218.24 1212.58 L1218.83 1212.58 L1219.42 1212.58 L1220 1212.58 L1220.59 1212.58 L1221.18 1212.58 L1221.76 1212.58 L1222.35 1212.58 L1222.94 1212.58 L1223.52 1212.58 L1224.11 1212.58 L1224.7 1212.58 L1225.28 1212.58 L1225.87 1212.58 L1226.45 1212.58 L1227.04 1212.58 L1227.63 1212.58 L1228.21 1212.58 L1228.8 1212.58 L1229.39 1212.58 L1229.97 1212.58 L1230.56 1212.58 L1231.15 1212.58 L1231.73 1212.58 L1232.32 1212.58 L1232.91 1212.58 L1233.49 1212.58 L1234.08 1212.58 L1234.66 1212.58 L1235.25 1212.58 L1235.84 1212.58 L1236.42 1212.58 L1237.01 1212.58 L1237.6 1212.58 L1238.18 1212.58 L1238.77 1212.58 L1239.36 1212.58 L1239.94 1212.58 L1240.53 1212.58 L1241.11 1212.58 L1241.7 1212.58 L1242.29 1212.58 L1242.87 1212.58 L1243.46 1212.58 L1244.05 1212.58 L1244.63 1212.58 L1245.22 1212.58 L1245.81 1212.58 L1246.39 1212.58 L1246.98 1212.58 L1247.57 1212.58 L1248.15 1212.58 L1248.74 1212.58 L1249.32 1212.58 L1249.91 1212.58 L1250.5 1212.58 L1251.08 1212.58 L1251.67 1212.58 L1252.26 1212.58 L1252.84 1212.58 L1253.43 1212.58 L1254.02 1212.58 L1254.6 1212.58 L1255.19 1212.58 L1255.78 1212.58 L1256.36 1212.58 L1256.95 1212.58 L1257.53 1212.58 L1258.12 1212.58 L1258.71 1212.58 L1259.29 1212.58 L1259.88 1212.58 L1260.47 1212.58 L1261.05 1212.58 L1261.64 1212.58 L1262.23 1212.58 L1262.81 1212.58 L1263.4 1212.58 L1263.98 1212.58 L1264.57 1212.58 L1265.16 1212.58 L1265.74 1212.58 L1266.33 1212.58 L1266.92 1212.58 L1267.5 1212.58 L1268.09 1212.58 L1268.68 1212.58 L1269.26 1212.58 L1269.85 1212.58 L1270.44 1212.58 L1271.02 1212.58 L1271.61 1212.58 L1272.19 1212.58 L1272.78 1212.58 L1273.37 1212.58 L1273.95 1212.58 L1274.54 1212.58 L1275.13 1212.58 L1275.71 1212.58 L1276.3 1212.58 L1276.89 1212.58 L1277.47 1212.58 L1278.06 1212.58 L1278.65 1212.58 L1279.23 1212.58 L1279.82 1212.58 L1280.4 1212.58 L1280.99 1212.58 L1281.58 1212.58 L1282.16 1212.58 L1282.75 1212.58 L1283.34 1212.58 L1283.92 1212.58 L1284.51 1212.58 L1285.1 1212.58 L1285.68 1212.58 L1286.27 1212.58 L1286.86 1212.58 L1287.44 1212.58 L1288.03 1212.58 L1288.61 1212.58 L1289.2 1212.58 L1289.79 1212.58 L1290.37 1212.58 L1290.96 1212.58 L1291.55 1212.58 L1292.13 1212.58 L1292.72 1212.58 L1293.31 1212.58 L1293.89 1212.58 L1294.48 1212.58 L1295.06 1212.58 L1295.65 1212.58 L1296.24 1212.58 L1296.82 1212.58 L1297.41 1212.58 L1298 1212.58 L1298.58 1212.58 L1299.17 1212.58 L1299.76 1212.58 L1300.34 1212.58 L1300.93 1212.58 L1301.52 1212.58 L1302.1 1212.58 L1302.69 1212.58 L1303.27 1212.58 L1303.86 1212.58 L1304.45 1212.58 L1305.03 1212.58 L1305.62 1212.58 L1306.21 1212.58 L1306.79 1212.58 L1307.38 1212.58 L1307.97 1212.58 L1308.55 1212.58 L1309.14 1212.58 L1309.73 1212.58 L1310.31 1212.58 L1310.9 1212.58 L1311.48 1212.58 L1312.07 1212.58 L1312.66 1212.58 L1313.24 1212.58 L1313.83 1212.58 L1314.42 1212.58 L1315 1212.58 L1315.59 1212.58 L1316.18 1212.58 L1316.76 1212.58 L1317.35 1212.58 L1317.93 1212.58 L1318.52 1212.58 L1319.11 1212.58 L1319.69 1212.58 L1320.28 1212.58 L1320.87 1212.58 L1321.45 1212.58 L1322.04 1212.58 L1322.63 1212.58 L1323.21 1212.58 L1323.8 1212.58 L1324.39 1212.58 L1324.97 1212.58 L1325.56 1212.58 L1326.14 1212.58 L1326.73 1212.58 L1327.32 1212.58 L1327.9 1212.58 L1328.49 1212.58 L1329.08 1212.58 L1329.66 1212.58 L1330.25 1212.58 L1330.84 1212.58 L1331.42 1212.58 L1332.01 1212.58 L1332.6 1212.58 L1333.18 1212.58 L1333.77 1212.58 L1334.35 1212.58 L1334.94 1212.58 L1335.53 1212.58 L1336.11 1212.58 L1336.7 1212.58 L1337.29 1212.58 L1337.87 1212.58 L1338.46 1212.58 L1339.05 1212.58 L1339.63 1212.58 L1340.22 1212.58 L1340.8 1212.58 L1341.39 1212.58 L1341.98 1212.58 L1342.56 1212.58 L1343.15 1212.58 L1343.74 1212.58 L1344.32 1212.58 L1344.91 1212.58 L1345.5 1212.58 L1346.08 1212.58 L1346.67 1212.58 L1347.26 1212.58 L1347.84 1212.58 L1348.43 1212.58 L1349.01 1212.58 L1349.6 1212.58 L1350.19 1212.58 L1350.77 1212.58 L1351.36 1212.58 L1351.95 1212.58 L1352.53 1212.58 L1353.12 1212.58 L1353.71 1212.58 L1354.29 1212.58 L1354.88 1212.58 L1355.47 1212.58 L1356.05 1212.58 L1356.64 1212.58 L1357.22 1212.58 L1357.81 1212.58 L1358.4 1212.58 L1358.98 1212.58 L1359.57 1212.58 L1360.16 1212.58 L1360.74 1212.58 L1361.33 1212.58 L1361.92 1212.58 L1362.5 1212.58 L1363.09 1212.58 L1363.68 1212.58 L1364.26 1212.58 L1364.85 1212.58 L1365.43 1212.58 L1366.02 1212.58 L1366.61 1212.58 L1367.19 1212.58 L1367.78 1212.58 L1368.37 1212.58 L1368.95 1212.58 L1369.54 1212.58 L1370.13 1212.58 L1370.71 1212.58 L1371.3 1212.58 L1371.88 1212.58 L1372.47 1212.58 L1373.06 1212.58 L1373.64 1212.58 L1374.23 1212.58 L1374.82 1212.58 L1375.4 1212.58 L1375.99 1212.58 L1376.58 1212.58 L1377.16 1212.58 L1377.75 1212.58 L1378.34 1212.58 L1378.92 1212.58 L1379.51 1212.58 L1380.09 1212.58 L1380.68 1212.58 L1381.27 1212.58 L1381.85 1212.58 L1382.44 1212.58 L1383.03 1212.58 L1383.61 1212.58 L1384.2 1212.58 L1384.79 1212.58 L1385.37 1212.58 L1385.96 1212.58 L1386.55 1212.58 L1387.13 1212.58 L1387.72 1212.58 L1388.3 1212.58 L1388.89 1212.58 L1389.48 1212.58 L1390.06 1212.58 L1390.65 1212.58 L1391.24 1212.58 L1391.82 1212.58 L1392.41 1212.58 L1393 1212.58 L1393.58 1212.58 L1394.17 1212.58 L1394.75 1212.58 L1395.34 1212.58 L1395.93 1212.58 L1396.51 1212.58 L1397.1 1212.58 L1397.69 1212.58 L1398.27 1212.58 L1398.86 1212.58 L1399.45 1212.58 L1400.03 1212.58 L1400.62 1212.58 L1401.21 1212.58 L1401.79 1212.58 L1402.38 1212.58 L1402.96 1212.58 L1403.55 1212.58 L1404.14 1212.58 L1404.72 1212.58 L1405.31 1212.58 L1405.9 1212.58 L1406.48 1212.58 L1407.07 1212.58 L1407.66 1212.58 L1408.24 1212.58 L1408.83 1212.58 L1409.42 1212.58 L1410 1212.58 L1410.59 1212.58 L1411.17 1212.58 L1411.76 1212.58 L1412.35 1212.58 L1412.93 1212.58 L1413.52 1212.58 L1414.11 1212.58 L1414.69 1212.58 L1415.28 1212.58 L1415.87 1212.58 L1416.45 1212.58 L1417.04 1212.58 L1417.63 1212.58 L1418.21 1212.58 L1418.8 1212.58 L1419.38 1212.58 L1419.97 1212.58 L1420.56 1212.58 L1421.14 1212.58 L1421.73 1212.58 L1422.32 1212.58 L1422.9 1212.58 L1423.49 1212.58 L1424.08 1212.58 L1424.66 1212.58 L1425.25 1212.58 L1425.83 1212.58 L1426.42 1212.58 L1427.01 1212.58 L1427.59 1212.58 L1428.18 1212.58 L1428.77 1212.58 L1429.35 1212.58 L1429.94 1212.58 L1430.53 1212.58 L1431.11 1212.58 L1431.7 1212.58 L1432.29 1212.58 L1432.87 1212.58 L1433.46 1212.58 L1434.04 1212.58 L1434.63 1212.58 L1435.22 1212.58 L1435.8 1212.58 L1436.39 1212.58 L1436.98 1212.58 L1437.56 1212.58 L1438.15 1212.58 L1438.74 1212.58 L1439.32 1212.58 L1439.91 1212.58 L1440.5 1212.58 L1441.08 1212.58 L1441.67 1212.58 L1442.25 1212.58 L1442.84 1212.58 L1443.43 1212.58 L1444.01 1212.58 L1444.6 1212.58 L1445.19 1212.58 L1445.77 1212.58 L1446.36 1212.58 L1446.95 1212.58 L1447.53 1212.58 L1448.12 1212.58 L1448.7 1212.58 L1449.29 1212.58 L1449.88 1212.58 L1450.46 1212.58 L1451.05 1212.58 L1451.64 1212.58 L1452.22 1212.58 L1452.81 1212.58 L1453.4 1212.58 L1453.98 1212.58 L1454.57 1212.58 L1455.16 1212.58 L1455.74 1212.58 L1456.33 1212.58 L1456.91 1212.58 L1457.5 1212.58 L1458.09 1212.58 L1458.67 1212.58 L1459.26 1212.58 L1459.85 1212.58 L1460.43 1212.58 L1461.02 1212.58 L1461.61 1212.58 L1462.19 1212.58 L1462.78 1212.58 L1463.37 1212.58 L1463.95 1212.58 L1464.54 1212.58 L1465.12 1212.58 L1465.71 1212.58 L1466.3 1212.58 L1466.88 1212.58 L1467.47 1212.58 L1468.06 1212.58 L1468.64 1212.58 L1469.23 1212.58 L1469.82 1212.58 L1470.4 1212.58 L1470.99 1212.58 L1471.57 1212.58 L1472.16 1212.58 L1472.75 1212.58 L1473.33 1212.58 L1473.92 1212.58 L1474.51 1212.58 L1475.09 1212.58 L1475.68 1212.58 L1476.27 1212.58 L1476.85 1212.58 L1477.44 1212.58 L1478.03 1212.58 L1478.61 1212.58 L1479.2 1212.58 L1479.78 1212.58 L1480.37 1212.58 L1480.96 1212.58 L1481.54 1212.58 L1482.13 1212.58 L1482.72 1212.58 L1483.3 1212.58 L1483.89 1212.58 L1484.48 1212.58 L1485.06 1212.58 L1485.65 1212.58 L1486.24 1212.58 L1486.82 1212.58 L1487.41 1212.58 L1487.99 1212.58 L1488.58 1212.58 L1489.17 1212.58 L1489.75 1212.58 L1490.34 1212.58 L1490.93 1212.58 L1491.51 1212.58 L1492.1 1212.58 L1492.69 1212.58 L1493.27 1212.58 L1493.86 1212.58 L1494.45 1212.58 L1495.03 1212.58 L1495.62 1212.58 L1496.2 1212.58 L1496.79 1212.58 L1497.38 1212.58 L1497.96 1212.58 L1498.55 1212.58 L1499.14 1212.58 L1499.72 1212.58 L1500.31 1212.58 L1500.9 1212.58 L1501.48 1212.58 L1502.07 1212.58 L1502.65 1212.58 L1503.24 1212.58 L1503.83 1212.58 L1504.41 1212.58 L1505 1212.58 L1505.59 1212.58 L1506.17 1212.58 L1506.76 1212.58 L1507.35 1212.58 L1507.93 1212.58 L1508.52 1212.58 L1509.11 1212.58 L1509.69 1212.58 L1510.28 1212.58 L1510.86 1212.58 L1511.45 1212.58 L1512.04 1212.58 L1512.62 1212.58 L1513.21 1212.58 L1513.8 1212.58 L1514.38 1212.58 L1514.97 1212.58 L1515.56 1212.58 L1516.14 1212.58 L1516.73 1212.58 L1517.32 1212.58 L1517.9 1212.58 L1518.49 1212.58 L1519.07 1212.58 L1519.66 1212.58 L1520.25 1212.58 L1520.83 1212.58 L1521.42 1212.58 L1522.01 1212.58 L1522.59 1212.58 L1523.18 1212.58 L1523.77 1212.58 L1524.35 1212.58 L1524.94 1212.58 L1525.52 1212.58 L1526.11 1212.58 L1526.7 1212.58 L1527.28 1212.58 L1527.87 1212.58 L1528.46 1212.58 L1529.04 1212.58 L1529.63 1212.58 L1530.22 1212.58 L1530.8 1212.58 L1531.39 1212.58 L1531.98 1212.58 L1532.56 1212.58 L1533.15 1212.58 L1533.73 1212.58 L1534.32 1212.58 L1534.91 1212.58 L1535.49 1212.58 L1536.08 1212.58 L1536.67 1212.58 L1537.25 1212.58 L1537.84 1212.58 L1538.43 1212.58 L1539.01 1212.58 L1539.6 1212.58 L1540.19 1212.58 L1540.77 1212.58 L1541.36 1212.58 L1541.94 1212.58 L1542.53 1212.58 L1543.12 1212.58 L1543.7 1212.58 L1544.29 1212.58 L1544.88 1212.58 L1545.46 1212.58 L1546.05 1212.58 L1546.64 1212.58 L1547.22 1212.58 L1547.81 1212.58 L1548.4 1212.58 L1548.98 1212.58 L1549.57 1212.58 L1550.15 1212.58 L1550.74 1212.58 L1551.33 1212.58 L1551.91 1212.58 L1552.5 1212.58 L1553.09 1212.58 L1553.67 1212.58 L1554.26 1212.58 L1554.85 1212.58 L1555.43 1212.58 L1556.02 1212.58 L1556.6 1212.58 L1557.19 1212.58 L1557.78 1212.58 L1558.36 1212.58 L1558.95 1212.58 L1559.54 1212.58 L1560.12 1212.58 L1560.71 1212.58 L1561.3 1212.58 L1561.88 1212.58 L1562.47 1212.58 L1563.06 1212.58 L1563.64 1212.58 L1564.23 1212.58 L1564.81 1212.58 L1565.4 1212.58 L1565.99 1212.58 L1566.57 1212.58 L1567.16 1212.58 L1567.75 1212.58 L1568.33 1212.58 L1568.92 1212.58 L1569.51 1212.58 L1570.09 1212.58 L1570.68 1212.58 L1571.27 1212.58 L1571.85 1212.58 L1572.44 1212.58 L1573.02 1212.58 L1573.61 1212.58 L1574.2 1212.58 L1574.78 1212.58 L1575.37 1212.58 L1575.96 1212.58 L1576.54 1212.58 L1577.13 1212.58 L1577.72 1212.58 L1578.3 1212.58 L1578.89 1212.58 L1579.47 1212.58 L1580.06 1212.58 L1580.65 1212.58 L1581.23 1212.58 L1581.82 1212.58 L1582.41 1212.58 L1582.99 1212.58 L1583.58 1212.58 L1584.17 1212.58 L1584.75 1212.58 L1585.34 1212.58 L1585.93 1212.58 L1586.51 1212.58 L1587.1 1212.58 L1587.68 1212.58 L1588.27 1212.58 L1588.86 1212.58 L1589.44 1212.58 L1590.03 1212.58 L1590.62 1212.58 L1591.2 1212.58 L1591.79 1212.58 L1592.38 1212.58 L1592.96 1212.58 L1593.55 1212.58 L1594.14 1212.58 L1594.72 1212.58 L1595.31 1212.58 L1595.89 1212.58 L1596.48 1212.58 L1597.07 1212.58 L1597.65 1212.58 L1598.24 1212.58 L1598.83 1212.58 L1599.41 1212.58 L1600 1212.58 L1600.59 1212.58 L1601.17 1212.58 L1601.76 1212.58 L1602.34 1212.58 L1602.93 1212.58 L1603.52 1212.58 L1604.1 1212.58 L1604.69 1212.58 L1605.28 1212.58 L1605.86 1212.58 L1606.45 1212.58 L1607.04 1212.58 L1607.62 1212.58 L1608.21 1212.58 L1608.8 1212.58 L1609.38 1212.58 L1609.97 1212.58 L1610.55 1212.58 L1611.14 1212.58 L1611.73 1212.58 L1612.31 1212.58 L1612.9 1212.58 L1613.49 1212.58 L1614.07 1212.58 L1614.66 1212.58 L1615.25 1212.58 L1615.83 1212.58 L1616.42 1212.58 L1617.01 1212.58 L1617.59 1212.58 L1618.18 1212.58 L1618.76 1212.58 L1619.35 1212.58 L1619.94 1212.58 L1620.52 1212.58 L1621.11 1212.58 L1621.7 1212.58 L1622.28 1212.58 L1622.87 1212.58 L1623.46 1212.58 L1624.04 1212.58 L1624.63 1212.58 L1625.22 1212.58 L1625.8 1212.58 L1626.39 1212.58 L1626.97 1212.58 L1627.56 1212.58 L1628.15 1212.58 L1628.73 1212.58 L1629.32 1212.58 L1629.91 1212.58 L1630.49 1212.58 L1631.08 1212.58 L1631.67 1212.58 L1632.25 1212.58 L1632.84 1212.58 L1633.42 1212.58 L1634.01 1212.58 L1634.6 1212.58 L1635.18 1212.58 L1635.77 1212.58 L1636.36 1212.58 L1636.94 1212.58 L1637.53 1212.58 L1638.12 1212.58 L1638.7 1212.58 L1639.29 1212.58 L1639.88 1212.58 L1640.46 1212.58 L1641.05 1212.58 L1641.63 1212.58 L1642.22 1212.58 L1642.81 1212.58 L1643.39 1212.58 L1643.98 1212.58 L1644.57 1212.58 L1645.15 1212.58 L1645.74 1212.58 L1646.33 1212.58 L1646.91 1212.58 L1647.5 1212.58 L1648.09 1212.58 L1648.67 1212.58 L1649.26 1212.58 L1649.84 1212.58 L1650.43 1212.58 L1651.02 1212.58 L1651.6 1212.58 L1652.19 1212.58 L1652.78 1212.58 L1653.36 1212.58 L1653.95 1212.58 L1654.54 1212.58 L1655.12 1212.58 L1655.71 1212.58 L1656.29 1212.58 L1656.88 1212.58 L1657.47 1212.58 L1658.05 1212.58 L1658.64 1212.58 L1659.23 1212.58 L1659.81 1212.58 L1660.4 1212.58 L1660.99 1212.58 L1661.57 1212.58 L1662.16 1212.58 L1662.75 1212.58 L1663.33 1212.58 L1663.92 1212.58 L1664.5 1212.58 L1665.09 1212.58 L1665.68 1212.58 L1666.26 1212.58 L1666.85 1212.58 L1667.44 1212.58 L1668.02 1212.58 L1668.61 1212.58 L1669.2 1212.58 L1669.78 1212.58 L1670.37 1212.58 L1670.96 1212.58 L1671.54 1212.58 L1672.13 1212.58 L1672.71 1212.58 L1673.3 1212.58 L1673.89 1212.58 L1674.47 1212.58 L1675.06 1212.58 L1675.65 1212.58 L1676.23 1212.58 L1676.82 1212.58 L1677.41 1212.58 L1677.99 1212.58 L1678.58 1212.58 L1679.17 1212.58 L1679.75 1212.58 L1680.34 1212.58 L1680.92 1212.58 L1681.51 1212.58 L1682.1 1212.58 L1682.68 1212.58 L1683.27 1212.58 L1683.86 1212.58 L1684.44 1212.58 L1685.03 1212.58 L1685.62 1212.58 L1686.2 1212.58 L1686.79 1212.58 L1687.37 1212.58 L1687.96 1212.58 L1688.55 1212.58 L1689.13 1212.58 L1689.72 1212.58 L1690.31 1212.58 L1690.89 1212.58 L1691.48 1212.58 L1692.07 1212.58 L1692.65 1212.58 L1693.24 1212.58 L1693.83 1212.58 L1694.41 1212.58 L1695 1212.58 L1695.58 1212.58 L1696.17 1212.58 L1696.76 1212.58 L1697.34 1212.58 L1697.93 1212.58 L1698.52 1212.58 L1699.1 1212.58 L1699.69 1212.58 L1700.28 1212.58 L1700.86 1212.58 L1701.45 1212.58 L1702.04 1212.58 L1702.62 1212.58 L1703.21 1212.58 L1703.79 1212.58 L1704.38 1212.58 L1704.97 1212.58 L1705.55 1212.58 L1706.14 1212.58 L1706.73 1212.58 L1707.31 1212.58 L1707.9 1212.58 L1708.49 1212.58 L1709.07 1212.58 L1709.66 1212.58 L1710.24 1212.58 L1710.83 1212.58 L1711.42 1212.58 L1712 1212.58 L1712.59 1212.58 L1713.18 1212.58 L1713.76 1212.58 L1714.35 1212.58 L1714.94 1212.58 L1715.52 1212.58 L1716.11 1212.58 L1716.7 1212.58 L1717.28 1212.58 L1717.87 1212.58 L1718.45 1212.58 L1719.04 1212.58 L1719.63 1212.58 L1720.21 1212.58 L1720.8 1212.58 L1721.39 1212.58 L1721.97 1212.58 L1722.56 1212.58 L1723.15 1212.58 L1723.73 1212.58 L1724.32 1212.58 L1724.91 1212.58 L1725.49 1212.58 L1726.08 1212.58 L1726.66 1212.58 L1727.25 1212.58 L1727.84 1212.58 L1728.42 1212.58 L1729.01 1212.58 L1729.6 1212.58 L1730.18 1212.58 L1730.77 1212.58 L1731.36 1212.58 L1731.94 1212.58 L1732.53 1212.58 L1733.11 1212.58 L1733.7 1212.58 L1734.29 1212.58 L1734.87 1212.58 L1735.46 1212.58 L1736.05 1212.58 L1736.63 1212.58 L1737.22 1212.58 L1737.81 1212.58 L1738.39 1212.58 L1738.98 1212.58 L1739.57 1212.58 L1740.15 1212.58 L1740.74 1212.58 L1741.32 1212.58 L1741.91 1212.58 L1742.5 1212.58 L1743.08 1212.58 L1743.67 1212.58 L1744.26 1212.58 L1744.84 1212.58 L1745.43 1212.58 L1746.02 1212.58 L1746.6 1212.58 L1747.19 1212.58 L1747.78 1212.58 L1748.36 1212.58 L1748.95 1212.58 L1749.53 1212.58 L1750.12 1212.58 L1750.71 1212.58 L1751.29 1212.58 L1751.88 1212.58 L1752.47 1212.58 L1753.05 1212.58 L1753.64 1212.58 L1754.23 1212.58 L1754.81 1212.58 L1755.4 1212.58 L1755.99 1212.58 L1756.57 1212.58 L1757.16 1212.58 L1757.74 1212.58 L1758.33 1212.58 L1758.92 1212.58 L1759.5 1212.58 L1760.09 1212.58 L1760.68 1212.58 L1761.26 1212.58 L1761.85 1212.58 L1762.44 1212.58 L1763.02 1212.58 L1763.61 1212.58 L1764.19 1212.58 L1764.78 1212.58 L1765.37 1212.58 L1765.95 1212.58 L1766.54 1212.58 L1767.13 1212.58 L1767.71 1212.58 L1768.3 1212.58 L1768.89 1212.58 L1769.47 1212.58 L1770.06 1212.58 L1770.65 1212.58 L1771.23 1212.58 L1771.82 1212.58 L1772.4 1212.58 L1772.99 1212.58 L1773.58 1212.58 L1774.16 1212.58 L1774.75 1212.58 L1775.34 1212.58 L1775.92 1212.58 L1776.51 1212.58 L1777.1 1212.58 L1777.68 1212.58 L1778.27 1212.58 L1778.86 1212.58 L1779.44 1212.58 L1780.03 1212.58 L1780.61 1212.58 L1781.2 1212.58 L1781.79 1212.58 L1782.37 1212.58 L1782.96 1212.58 L1783.55 1212.58 L1784.13 1212.58 L1784.72 1212.58 L1785.31 1212.58 L1785.89 1212.58 L1786.48 1212.58 L1787.06 1212.58 L1787.65 1212.58 L1788.24 1212.58 L1788.82 1212.58 L1789.41 1212.58 L1790 1212.58 L1790.58 1212.58 L1791.17 1212.58 L1791.76 1212.58 L1792.34 1212.58 L1792.93 1212.58 L1793.52 1212.58 L1794.1 1212.58 L1794.69 1212.58 L1795.27 1212.58 L1795.86 1212.58 L1796.45 1212.58 L1797.03 1212.58 L1797.62 1212.58 L1798.21 1212.58 L1798.79 1212.58 L1799.38 1212.58 L1799.97 1212.58 L1800.55 1212.58 L1801.14 1212.58 L1801.73 1212.58 L1802.31 1212.58 L1802.9 1212.58 L1803.48 1212.58 L1804.07 1212.58 L1804.66 1212.58 L1805.24 1212.58 L1805.83 1212.58 L1806.42 1212.58 L1807 1212.58 L1807.59 1212.58 L1808.18 1212.58 L1808.76 1212.58 L1809.35 1212.58 L1809.94 1212.58 L1810.52 1212.58 L1811.11 1212.58 L1811.69 1212.58 L1812.28 1212.58 L1812.87 1212.58 L1813.45 1212.58 L1814.04 1212.58 L1814.63 1212.58 L1815.21 1212.58 L1815.8 1212.58 L1816.39 1212.58 L1816.97 1212.58 L1817.56 1212.58 L1818.14 1212.58 L1818.73 1212.58 L1819.32 1212.58 L1819.9 1212.58 L1820.49 1212.58 L1821.08 1212.58 L1821.66 1212.58 L1822.25 1212.58 L1822.84 1212.58 L1823.42 1212.58 L1824.01 1212.58 L1824.6 1212.58 L1825.18 1212.58 L1825.77 1212.58 L1826.35 1212.58 L1826.94 1212.58 L1827.53 1212.58 L1828.11 1212.58 L1828.7 1212.58 L1829.29 1212.58 L1829.87 1212.58 L1830.46 1212.58 L1831.05 1212.58 L1831.63 1212.58 L1832.22 1212.58 L1832.81 1212.58 L1833.39 1212.58 L1833.98 1212.58 L1834.56 1212.58 L1835.15 1212.58 L1835.74 1212.58 L1836.32 1212.58 L1836.91 1212.58 L1837.5 1212.58 L1838.08 1212.58 L1838.67 1212.58 L1839.26 1212.58 L1839.84 1212.58 L1840.43 1212.58 L1841.01 1212.58 L1841.6 1212.58 L1842.19 1212.58 L1842.77 1212.58 L1843.36 1212.58 L1843.95 1212.58 L1844.53 1212.58 L1845.12 1212.58 L1845.71 1212.58 L1846.29 1212.58 L1846.88 1212.58 L1847.47 1212.58 L1848.05 1212.58 L1848.64 1212.58 L1849.22 1212.58 L1849.81 1212.58 L1850.4 1212.58 L1850.98 1212.58 L1851.57 1212.58 L1852.16 1212.58 L1852.74 1212.58 L1853.33 1212.58 L1853.92 1212.58 L1854.5 1212.58 L1855.09 1212.58 L1855.68 1212.58 L1856.26 1212.58 L1856.85 1212.58 L1857.43 1212.58 L1858.02 1212.58 L1858.61 1212.58 L1859.19 1212.58 L1859.78 1212.58 L1860.37 1212.58 L1860.95 1212.58 L1861.54 1212.58 L1862.13 1212.58 L1862.71 1212.58 L1863.3 1212.58 L1863.88 1212.58 L1864.47 1212.58 L1865.06 1212.58 L1865.64 1212.58 L1866.23 1212.58 L1866.82 1212.58 L1867.4 1212.58 L1867.99 1212.58 L1868.58 1212.58 L1869.16 1212.58 L1869.75 1212.58 L1870.34 1212.58 L1870.92 1212.58 L1871.51 1212.58 L1872.09 1212.58 L1872.68 1212.58 L1873.27 1212.58 L1873.85 1212.58 L1874.44 1212.58 L1875.03 1212.58 L1875.61 1212.58 L1876.2 1212.58 L1876.79 1212.58 L1877.37 1212.58 L1877.96 1212.58 L1878.55 1212.58 L1879.13 1212.58 L1879.72 1212.58 L1880.3 1212.58 L1880.89 1212.58 L1881.48 1212.58 L1882.06 1212.58 L1882.65 1212.58 L1883.24 1212.58 L1883.82 1212.58 L1884.41 1212.58 L1885 1212.58 L1885.58 1212.58 L1886.17 1212.58 L1886.76 1212.58 L1887.34 1212.58 L1887.93 1212.58 L1888.51 1212.58 L1889.1 1212.58 L1889.69 1212.58 L1890.27 1212.58 L1890.86 1212.58 L1891.45 1212.58 L1892.03 1212.58 L1892.62 1212.58 L1893.21 1212.58 L1893.79 1212.58 L1894.38 1212.58 L1894.96 1212.58 L1895.55 1212.58 L1896.14 1212.58 L1896.72 1212.58 L1897.31 1212.58 L1897.9 1212.58 L1898.48 1212.58 L1899.07 1212.58 L1899.66 1212.58 L1900.24 1212.58 L1900.83 1212.58 L1901.42 1212.58 L1902 1212.58 L1902.59 1212.58 L1903.17 1212.58 L1903.76 1212.58 L1904.35 1212.58 L1904.93 1212.58 L1905.52 1212.58 L1906.11 1212.58 L1906.69 1212.58 L1907.28 1212.58 L1907.87 1212.58 L1908.45 1212.58 L1909.04 1212.58 L1909.63 1212.58 L1910.21 1212.58 L1910.8 1212.58 L1911.38 1212.58 L1911.97 1212.58 L1912.56 1212.58 L1913.14 1212.58 L1913.73 1212.58 L1914.32 1212.58 L1914.9 1212.58 L1915.49 1212.58 L1916.08 1212.58 L1916.66 1212.58 L1917.25 1212.58 L1917.83 1212.58 L1918.42 1212.58 L1919.01 1212.58 L1919.59 1212.58 L1920.18 1212.58 L1920.77 1212.58 L1921.35 1212.58 L1921.94 1212.58 L1922.53 1212.58 L1923.11 1212.58 L1923.7 1212.58 L1924.29 1212.58 L1924.87 1212.58 L1925.46 1212.58 L1926.04 1212.58 L1926.63 1212.58 L1927.22 1212.58 L1927.8 1212.58 L1928.39 1212.58 L1928.98 1212.58 L1929.56 1212.58 L1930.15 1212.58 L1930.74 1212.58 L1931.32 1212.58 L1931.91 1212.58 L1932.5 1212.58 L1933.08 1212.58 L1933.67 1212.58 L1934.25 1212.58 L1934.84 1212.58 L1935.43 1212.58 L1936.01 1212.58 L1936.6 1212.58 L1937.19 1212.58 L1937.77 1212.58 L1938.36 1212.58 L1938.95 1212.58 L1939.53 1212.58 L1940.12 1212.58 L1940.71 1212.58 L1941.29 1212.58 L1941.88 1212.58 L1942.46 1212.58 L1943.05 1212.58 L1943.64 1212.58 L1944.22 1212.58 L1944.81 1212.58 L1945.4 1212.58 L1945.98 1212.58 L1946.57 1212.58 L1947.16 1212.58 L1947.74 1212.58 L1948.33 1212.58 L1948.91 1212.58 L1949.5 1212.58 L1950.09 1212.58 L1950.67 1212.58 L1951.26 1212.58 L1951.85 1212.58 L1952.43 1212.58 L1953.02 1212.58 L1953.61 1212.58 L1954.19 1212.58 L1954.78 1212.58 L1955.37 1212.58 L1955.95 1212.58 L1956.54 1212.58 L1957.12 1212.58 L1957.71 1212.58 L1958.3 1212.58 L1958.88 1212.58 L1959.47 1212.58 L1960.06 1212.58 L1960.64 1212.58 L1961.23 1212.58 L1961.82 1212.58 L1962.4 1212.58 L1962.99 1212.58 L1963.58 1212.58 L1964.16 1212.58 L1964.75 1212.58 L1965.33 1212.58 L1965.92 1212.58 L1966.51 1212.58 L1967.09 1212.58 L1967.68 1212.58 L1968.27 1212.58 L1968.85 1212.58 L1969.44 1212.58 L1970.03 1212.58 L1970.61 1212.58 L1971.2 1212.58 L1971.78 1212.58 L1972.37 1212.58 L1972.96 1212.58 L1973.54 1212.58 L1974.13 1212.58 L1974.72 1212.58 L1975.3 1212.58 L1975.89 1212.58 L1976.48 1212.58 L1977.06 1212.58 L1977.65 1212.58 L1978.24 1212.58 L1978.82 1212.58 L1979.41 1212.58 L1979.99 1212.58 L1980.58 1212.58 L1981.17 1212.58 L1981.75 1212.58 L1982.34 1212.58 L1982.93 1212.58 L1983.51 1212.58 L1984.1 1212.58 L1984.69 1212.58 L1985.27 1212.58 L1985.86 1212.58 L1986.45 1212.58 L1987.03 1212.58 L1987.62 1212.58 L1988.2 1212.58 L1988.79 1212.58 L1989.38 1212.58 L1989.96 1212.58 L1990.55 1212.58 L1991.14 1212.58 L1991.72 1212.58 L1992.31 1212.58 L1992.9 1212.58 L1993.48 1212.58 L1994.07 1212.58 L1994.65 1212.58 L1995.24 1212.58 L1995.83 1212.58 L1996.41 1212.58 L1997 1212.58 L1997.59 1212.58 L1998.17 1212.58 L1998.76 1212.58 L1999.35 1212.58 L1999.93 1212.58 L2000.52 1212.58 L2001.11 1212.58 L2001.69 1212.58 L2002.28 1212.58 L2002.86 1212.58 L2003.45 1212.58 L2004.04 1212.58 L2004.62 1212.58 L2005.21 1212.58 L2005.8 1212.58 L2006.38 1212.58 L2006.97 1212.58 L2007.56 1212.58 L2008.14 1212.58 L2008.73 1212.58 L2009.32 1212.58 L2009.9 1212.58 L2010.49 1212.58 L2011.07 1212.58 L2011.66 1212.58 L2012.25 1212.58 L2012.83 1212.58 L2013.42 1212.58 L2014.01 1212.58 L2014.59 1212.58 L2015.18 1212.58 L2015.77 1212.58 L2016.35 1212.58 L2016.94 1212.58 L2017.53 1212.58 L2018.11 1212.58 L2018.7 1212.58 L2019.28 1212.58 L2019.87 1212.58 L2020.46 1212.58 L2021.04 1212.58 L2021.63 1212.58 L2022.22 1212.58 L2022.8 1212.58 L2023.39 1212.58 L2023.98 1212.58 L2024.56 1212.58 L2025.15 1212.58 L2025.73 1212.58 L2026.32 1212.58 L2026.91 1212.58 L2027.49 1212.58 L2028.08 1212.58 L2028.67 1212.58 L2029.25 1212.58 L2029.84 1212.58 L2030.43 1212.58 L2031.01 1212.58 L2031.6 1212.58 L2032.19 1212.58 L2032.77 1212.58 L2033.36 1212.58 L2033.94 1212.58 L2034.53 1212.58 L2035.12 1212.58 L2035.7 1212.58 L2036.29 1212.58 L2036.88 1212.58 L2037.46 1212.58 L2038.05 1212.58 L2038.64 1212.58 L2039.22 1212.58 L2039.81 1212.58 L2040.4 1212.58 L2040.98 1212.58 L2041.57 1212.58 L2042.15 1212.58 L2042.74 1212.58 L2043.33 1212.58 L2043.91 1212.58 L2044.5 1212.58 L2045.09 1212.58 L2045.67 1212.58 L2046.26 1212.58 L2046.85 1212.58 L2047.43 1212.58 L2048.02 1212.58 L2048.6 1212.58 L2049.19 1212.58 L2049.78 1212.58 L2050.36 1212.58 L2050.95 1212.58 L2051.54 1212.58 L2052.12 1212.58 L2052.71 1212.58 L2053.3 1212.58 L2053.88 1212.58 L2054.47 1212.58 L2055.06 1212.58 L2055.64 1212.58 L2056.23 1212.58 L2056.81 1212.58 L2057.4 1212.58 L2057.99 1212.58 L2058.57 1212.58 L2059.16 1212.58 L2059.75 1212.58 L2060.33 1212.58 L2060.92 1212.58 L2061.51 1212.58 L2062.09 1212.58 L2062.68 1212.58 L2063.27 1212.58 L2063.85 1212.58 L2064.44 1212.58 L2065.02 1212.58 L2065.61 1212.58 L2066.2 1212.58 L2066.78 1212.58 L2067.37 1212.58 L2067.96 1212.58 L2068.54 1212.58 L2069.13 1212.58 L2069.72 1212.58 L2070.3 1212.58 L2070.89 1212.58 L2071.48 1212.58 L2072.06 1212.58 L2072.65 1212.58 L2073.23 1212.58 L2073.82 1212.58 L2074.41 1212.58 L2074.99 1212.58 L2075.58 1212.58 L2076.17 1212.58 L2076.75 1212.58 L2077.34 1212.58 L2077.93 1212.58 L2078.51 1212.58 L2079.1 1212.58 L2079.68 1212.58 L2080.27 1212.58 L2080.86 1212.58 L2081.44 1212.58 L2082.03 1212.58 L2082.62 1212.58 L2083.2 1212.58 L2083.79 1212.58 L2084.38 1212.58 L2084.96 1212.58 L2085.55 1212.58 L2086.14 1212.58 L2086.72 1212.58 L2087.31 1212.58 L2087.89 1212.58 L2088.48 1212.58 L2089.07 1212.58 L2089.65 1212.58 L2090.24 1212.58 L2090.83 1212.58 L2091.41 1212.58 L2092 1212.58 L2092.59 1212.58 L2093.17 1212.58 L2093.76 1212.58 L2094.35 1212.58 L2094.93 1212.58 L2095.52 1212.58 L2096.1 1212.58 L2096.69 1212.58 L2097.28 1212.58 L2097.86 1212.58 L2098.45 1212.58 L2099.04 1212.58 L2099.62 1212.58 L2100.21 1212.58 L2100.8 1212.58 L2101.38 1212.58 L2101.97 1212.58 L2102.55 1212.58 L2103.14 1212.58 L2103.73 1212.58 L2104.31 1212.58 L2104.9 1212.58 L2105.49 1212.58 L2106.07 1212.58 L2106.66 1212.58 L2107.25 1212.58 L2107.83 1212.58 L2108.42 1212.58 L2109.01 1212.58 L2109.59 1212.58 L2110.18 1212.58 L2110.76 1212.58 L2111.35 1212.58 L2111.94 1212.58 L2112.52 1212.58 L2113.11 1212.58 L2113.7 1212.58 L2114.28 1212.58 L2114.87 1212.58 L2115.46 1212.58 L2116.04 1212.58 L2116.63 1212.58 L2117.22 1212.58 L2117.8 1212.58 L2118.39 1212.58 L2118.97 1212.58 L2119.56 1212.58 L2120.15 1212.58 L2120.73 1212.58 L2121.32 1212.58 L2121.91 1212.58 L2122.49 1212.58 L2123.08 1212.58 L2123.67 1212.58 L2124.25 1212.58 L2124.84 1212.58 L2125.42 1212.58 L2126.01 1212.58 L2126.6 1212.58 L2127.18 1212.58 L2127.77 1212.58 L2128.36 1212.58 L2128.94 1212.58 L2129.53 1212.58 L2130.12 1212.58 L2130.7 1212.58 L2131.29 1212.58 L2131.88 1212.58 L2132.46 1212.58 L2133.05 1212.58 L2133.63 1212.58 L2134.22 1212.58 L2134.81 1212.58 L2135.39 1212.58 L2135.98 1212.58 L2136.57 1212.58 L2137.15 1212.58 L2137.74 1212.58 L2138.33 1212.58 L2138.91 1212.58 L2139.5 1212.58 L2140.09 1212.58 L2140.67 1212.58 L2141.26 1212.58 L2141.84 1212.58 L2142.43 1212.58 L2143.02 1212.58 L2143.6 1212.58 L2144.19 1212.58 L2144.78 1212.58 L2145.36 1212.58 L2145.95 1212.58 L2146.54 1212.58 L2147.12 1212.58 L2147.71 1212.58 L2148.3 1212.58 L2148.88 1212.58 L2149.47 1212.58 L2150.05 1212.58 L2150.64 1212.58 L2151.23 1212.58 L2151.81 1212.58 L2152.4 1212.58 L2152.99 1212.58 L2153.57 1212.58 L2154.16 1212.58 L2154.75 1212.58 L2155.33 1212.58 L2155.92 1212.58 L2156.5 1212.58 L2157.09 1212.58 L2157.68 1212.58 L2158.26 1212.58 L2158.26 1212.46 L2157.68 1212.46 L2157.09 1212.46 L2156.5 1212.46 L2155.92 1212.46 L2155.33 1212.46 L2154.75 1212.46 L2154.16 1212.46 L2153.57 1212.46 L2152.99 1212.46 L2152.4 1212.46 L2151.81 1212.46 L2151.23 1212.46 L2150.64 1212.46 L2150.05 1212.46 L2149.47 1212.46 L2148.88 1212.46 L2148.3 1212.46 L2147.71 1212.46 L2147.12 1212.46 L2146.54 1212.46 L2145.95 1212.46 L2145.36 1212.46 L2144.78 1212.46 L2144.19 1212.46 L2143.6 1212.46 L2143.02 1212.46 L2142.43 1212.46 L2141.84 1212.46 L2141.26 1212.46 L2140.67 1212.46 L2140.09 1212.46 L2139.5 1212.46 L2138.91 1212.46 L2138.33 1212.46 L2137.74 1212.46 L2137.15 1212.46 L2136.57 1212.46 L2135.98 1212.46 L2135.39 1212.46 L2134.81 1212.46 L2134.22 1212.46 L2133.63 1212.46 L2133.05 1212.46 L2132.46 1212.46 L2131.88 1212.46 L2131.29 1212.46 L2130.7 1212.46 L2130.12 1212.46 L2129.53 1212.46 L2128.94 1212.46 L2128.36 1212.46 L2127.77 1212.46 L2127.18 1212.46 L2126.6 1212.46 L2126.01 1212.46 L2125.42 1212.46 L2124.84 1212.46 L2124.25 1212.46 L2123.67 1212.46 L2123.08 1212.46 L2122.49 1212.46 L2121.91 1212.46 L2121.32 1212.46 L2120.73 1212.46 L2120.15 1212.46 L2119.56 1212.46 L2118.97 1212.46 L2118.39 1212.46 L2117.8 1212.46 L2117.22 1212.46 L2116.63 1212.46 L2116.04 1212.46 L2115.46 1212.46 L2114.87 1212.46 L2114.28 1212.46 L2113.7 1212.46 L2113.11 1212.46 L2112.52 1212.46 L2111.94 1212.46 L2111.35 1212.46 L2110.76 1212.46 L2110.18 1212.46 L2109.59 1212.46 L2109.01 1212.46 L2108.42 1212.46 L2107.83 1212.46 L2107.25 1212.46 L2106.66 1212.46 L2106.07 1212.46 L2105.49 1212.46 L2104.9 1212.46 L2104.31 1212.46 L2103.73 1212.46 L2103.14 1212.46 L2102.55 1212.46 L2101.97 1212.46 L2101.38 1212.46 L2100.8 1212.46 L2100.21 1212.46 L2099.62 1212.46 L2099.04 1212.46 L2098.45 1212.46 L2097.86 1212.46 L2097.28 1212.46 L2096.69 1212.46 L2096.1 1212.46 L2095.52 1212.46 L2094.93 1212.46 L2094.35 1212.46 L2093.76 1212.46 L2093.17 1212.46 L2092.59 1212.46 L2092 1212.46 L2091.41 1212.46 L2090.83 1212.46 L2090.24 1212.46 L2089.65 1212.46 L2089.07 1212.46 L2088.48 1212.46 L2087.89 1212.46 L2087.31 1212.46 L2086.72 1212.46 L2086.14 1212.46 L2085.55 1212.46 L2084.96 1212.46 L2084.38 1212.46 L2083.79 1212.46 L2083.2 1212.46 L2082.62 1212.46 L2082.03 1212.46 L2081.44 1212.46 L2080.86 1212.46 L2080.27 1212.46 L2079.68 1212.46 L2079.1 1212.46 L2078.51 1212.46 L2077.93 1212.46 L2077.34 1212.46 L2076.75 1212.46 L2076.17 1212.46 L2075.58 1212.46 L2074.99 1212.46 L2074.41 1212.46 L2073.82 1212.46 L2073.23 1212.46 L2072.65 1212.46 L2072.06 1212.46 L2071.48 1212.46 L2070.89 1212.46 L2070.3 1212.46 L2069.72 1212.46 L2069.13 1212.46 L2068.54 1212.46 L2067.96 1212.46 L2067.37 1212.46 L2066.78 1212.46 L2066.2 1212.46 L2065.61 1212.46 L2065.02 1212.46 L2064.44 1212.46 L2063.85 1212.46 L2063.27 1212.46 L2062.68 1212.46 L2062.09 1212.46 L2061.51 1212.46 L2060.92 1212.46 L2060.33 1212.46 L2059.75 1212.46 L2059.16 1212.46 L2058.57 1212.46 L2057.99 1212.46 L2057.4 1212.46 L2056.81 1212.46 L2056.23 1212.46 L2055.64 1212.46 L2055.06 1212.46 L2054.47 1212.46 L2053.88 1212.46 L2053.3 1212.46 L2052.71 1212.46 L2052.12 1212.46 L2051.54 1212.46 L2050.95 1212.46 L2050.36 1212.46 L2049.78 1212.46 L2049.19 1212.46 L2048.6 1212.46 L2048.02 1212.46 L2047.43 1212.46 L2046.85 1212.46 L2046.26 1212.46 L2045.67 1212.46 L2045.09 1212.46 L2044.5 1212.46 L2043.91 1212.46 L2043.33 1212.46 L2042.74 1212.46 L2042.15 1212.46 L2041.57 1212.46 L2040.98 1212.46 L2040.4 1212.46 L2039.81 1212.46 L2039.22 1212.46 L2038.64 1212.46 L2038.05 1212.46 L2037.46 1212.46 L2036.88 1212.46 L2036.29 1212.46 L2035.7 1212.46 L2035.12 1212.46 L2034.53 1212.46 L2033.94 1212.46 L2033.36 1212.46 L2032.77 1212.46 L2032.19 1212.46 L2031.6 1212.46 L2031.01 1212.46 L2030.43 1212.46 L2029.84 1212.46 L2029.25 1212.46 L2028.67 1212.46 L2028.08 1212.46 L2027.49 1212.46 L2026.91 1212.46 L2026.32 1212.46 L2025.73 1212.46 L2025.15 1212.46 L2024.56 1212.46 L2023.98 1212.46 L2023.39 1212.46 L2022.8 1212.46 L2022.22 1212.46 L2021.63 1212.46 L2021.04 1212.46 L2020.46 1212.46 L2019.87 1212.46 L2019.28 1212.46 L2018.7 1212.46 L2018.11 1212.46 L2017.53 1212.46 L2016.94 1212.46 L2016.35 1212.46 L2015.77 1212.46 L2015.18 1212.46 L2014.59 1212.46 L2014.01 1212.46 L2013.42 1212.46 L2012.83 1212.46 L2012.25 1212.46 L2011.66 1212.46 L2011.07 1212.46 L2010.49 1212.46 L2009.9 1212.46 L2009.32 1212.46 L2008.73 1212.46 L2008.14 1212.46 L2007.56 1212.46 L2006.97 1212.46 L2006.38 1212.46 L2005.8 1212.46 L2005.21 1212.46 L2004.62 1212.46 L2004.04 1212.46 L2003.45 1212.46 L2002.86 1212.46 L2002.28 1212.46 L2001.69 1212.46 L2001.11 1212.46 L2000.52 1212.46 L1999.93 1212.46 L1999.35 1212.46 L1998.76 1212.46 L1998.17 1212.46 L1997.59 1212.46 L1997 1212.46 L1996.41 1212.46 L1995.83 1212.46 L1995.24 1212.46 L1994.65 1212.46 L1994.07 1212.46 L1993.48 1212.46 L1992.9 1212.46 L1992.31 1212.46 L1991.72 1212.46 L1991.14 1212.46 L1990.55 1212.46 L1989.96 1212.46 L1989.38 1212.46 L1988.79 1212.46 L1988.2 1212.46 L1987.62 1212.46 L1987.03 1212.46 L1986.45 1212.46 L1985.86 1212.46 L1985.27 1212.46 L1984.69 1212.46 L1984.1 1212.46 L1983.51 1212.46 L1982.93 1212.46 L1982.34 1212.46 L1981.75 1212.46 L1981.17 1212.46 L1980.58 1212.46 L1979.99 1212.46 L1979.41 1212.46 L1978.82 1212.46 L1978.24 1212.46 L1977.65 1212.46 L1977.06 1212.46 L1976.48 1212.46 L1975.89 1212.46 L1975.3 1212.46 L1974.72 1212.46 L1974.13 1212.46 L1973.54 1212.46 L1972.96 1212.46 L1972.37 1212.46 L1971.78 1212.46 L1971.2 1212.46 L1970.61 1212.46 L1970.03 1212.46 L1969.44 1212.46 L1968.85 1212.46 L1968.27 1212.46 L1967.68 1212.46 L1967.09 1212.46 L1966.51 1212.46 L1965.92 1212.46 L1965.33 1212.46 L1964.75 1212.46 L1964.16 1212.46 L1963.58 1212.46 L1962.99 1212.46 L1962.4 1212.46 L1961.82 1212.46 L1961.23 1212.46 L1960.64 1212.46 L1960.06 1212.46 L1959.47 1212.46 L1958.88 1212.46 L1958.3 1212.46 L1957.71 1212.46 L1957.12 1212.46 L1956.54 1212.46 L1955.95 1212.46 L1955.37 1212.46 L1954.78 1212.46 L1954.19 1212.46 L1953.61 1212.46 L1953.02 1212.46 L1952.43 1212.46 L1951.85 1212.46 L1951.26 1212.46 L1950.67 1212.46 L1950.09 1212.46 L1949.5 1212.46 L1948.91 1212.46 L1948.33 1212.46 L1947.74 1212.46 L1947.16 1212.46 L1946.57 1212.46 L1945.98 1212.46 L1945.4 1212.46 L1944.81 1212.46 L1944.22 1212.46 L1943.64 1212.46 L1943.05 1212.46 L1942.46 1212.46 L1941.88 1212.46 L1941.29 1212.46 L1940.71 1212.46 L1940.12 1212.46 L1939.53 1212.46 L1938.95 1212.46 L1938.36 1212.46 L1937.77 1212.46 L1937.19 1212.46 L1936.6 1212.46 L1936.01 1212.46 L1935.43 1212.46 L1934.84 1212.46 L1934.25 1212.46 L1933.67 1212.46 L1933.08 1212.46 L1932.5 1212.46 L1931.91 1212.46 L1931.32 1212.46 L1930.74 1212.46 L1930.15 1212.46 L1929.56 1212.46 L1928.98 1212.46 L1928.39 1212.46 L1927.8 1212.46 L1927.22 1212.46 L1926.63 1212.46 L1926.04 1212.46 L1925.46 1212.46 L1924.87 1212.46 L1924.29 1212.46 L1923.7 1212.46 L1923.11 1212.46 L1922.53 1212.46 L1921.94 1212.46 L1921.35 1212.46 L1920.77 1212.46 L1920.18 1212.46 L1919.59 1212.46 L1919.01 1212.46 L1918.42 1212.46 L1917.83 1212.46 L1917.25 1212.46 L1916.66 1212.46 L1916.08 1212.46 L1915.49 1212.46 L1914.9 1212.46 L1914.32 1212.46 L1913.73 1212.46 L1913.14 1212.46 L1912.56 1212.46 L1911.97 1212.46 L1911.38 1212.46 L1910.8 1212.46 L1910.21 1212.46 L1909.63 1212.46 L1909.04 1212.46 L1908.45 1212.46 L1907.87 1212.46 L1907.28 1212.46 L1906.69 1212.46 L1906.11 1212.46 L1905.52 1212.46 L1904.93 1212.46 L1904.35 1212.46 L1903.76 1212.46 L1903.17 1212.46 L1902.59 1212.46 L1902 1212.46 L1901.42 1212.46 L1900.83 1212.46 L1900.24 1212.46 L1899.66 1212.46 L1899.07 1212.46 L1898.48 1212.46 L1897.9 1212.46 L1897.31 1212.46 L1896.72 1212.46 L1896.14 1212.46 L1895.55 1212.46 L1894.96 1212.46 L1894.38 1212.46 L1893.79 1212.46 L1893.21 1212.46 L1892.62 1212.46 L1892.03 1212.46 L1891.45 1212.46 L1890.86 1212.46 L1890.27 1212.46 L1889.69 1212.46 L1889.1 1212.46 L1888.51 1212.46 L1887.93 1212.46 L1887.34 1212.46 L1886.76 1212.46 L1886.17 1212.46 L1885.58 1212.46 L1885 1212.46 L1884.41 1212.46 L1883.82 1212.46 L1883.24 1212.46 L1882.65 1212.46 L1882.06 1212.46 L1881.48 1212.46 L1880.89 1212.46 L1880.3 1212.46 L1879.72 1212.46 L1879.13 1212.46 L1878.55 1212.46 L1877.96 1212.46 L1877.37 1212.46 L1876.79 1212.46 L1876.2 1212.46 L1875.61 1212.46 L1875.03 1212.46 L1874.44 1212.46 L1873.85 1212.46 L1873.27 1212.46 L1872.68 1212.46 L1872.09 1212.46 L1871.51 1212.46 L1870.92 1212.46 L1870.34 1212.46 L1869.75 1212.46 L1869.16 1212.46 L1868.58 1212.46 L1867.99 1212.46 L1867.4 1212.46 L1866.82 1212.46 L1866.23 1212.46 L1865.64 1212.46 L1865.06 1212.46 L1864.47 1212.46 L1863.88 1212.46 L1863.3 1212.46 L1862.71 1212.46 L1862.13 1212.46 L1861.54 1212.46 L1860.95 1212.46 L1860.37 1212.46 L1859.78 1212.46 L1859.19 1212.46 L1858.61 1212.46 L1858.02 1212.46 L1857.43 1212.46 L1856.85 1212.46 L1856.26 1212.46 L1855.68 1212.46 L1855.09 1212.46 L1854.5 1212.46 L1853.92 1212.46 L1853.33 1212.46 L1852.74 1212.46 L1852.16 1212.46 L1851.57 1212.46 L1850.98 1212.46 L1850.4 1212.46 L1849.81 1212.46 L1849.22 1212.46 L1848.64 1212.46 L1848.05 1212.46 L1847.47 1212.46 L1846.88 1212.46 L1846.29 1212.46 L1845.71 1212.46 L1845.12 1212.46 L1844.53 1212.46 L1843.95 1212.46 L1843.36 1212.46 L1842.77 1212.46 L1842.19 1212.46 L1841.6 1212.46 L1841.01 1212.46 L1840.43 1212.46 L1839.84 1212.46 L1839.26 1212.46 L1838.67 1212.46 L1838.08 1212.46 L1837.5 1212.46 L1836.91 1212.46 L1836.32 1212.46 L1835.74 1212.46 L1835.15 1212.46 L1834.56 1212.46 L1833.98 1212.46 L1833.39 1212.46 L1832.81 1212.46 L1832.22 1212.46 L1831.63 1212.46 L1831.05 1212.46 L1830.46 1212.46 L1829.87 1212.46 L1829.29 1212.46 L1828.7 1212.46 L1828.11 1212.46 L1827.53 1212.46 L1826.94 1212.46 L1826.35 1212.46 L1825.77 1212.46 L1825.18 1212.46 L1824.6 1212.46 L1824.01 1212.46 L1823.42 1212.46 L1822.84 1212.46 L1822.25 1212.46 L1821.66 1212.46 L1821.08 1212.46 L1820.49 1212.46 L1819.9 1212.46 L1819.32 1212.46 L1818.73 1212.46 L1818.14 1212.46 L1817.56 1212.46 L1816.97 1212.46 L1816.39 1212.46 L1815.8 1212.46 L1815.21 1212.46 L1814.63 1212.46 L1814.04 1212.46 L1813.45 1212.46 L1812.87 1212.46 L1812.28 1212.46 L1811.69 1212.46 L1811.11 1212.46 L1810.52 1212.46 L1809.94 1212.46 L1809.35 1212.46 L1808.76 1212.46 L1808.18 1212.46 L1807.59 1212.46 L1807 1212.46 L1806.42 1212.46 L1805.83 1212.46 L1805.24 1212.46 L1804.66 1212.46 L1804.07 1212.46 L1803.48 1212.46 L1802.9 1212.46 L1802.31 1212.46 L1801.73 1212.46 L1801.14 1212.46 L1800.55 1212.46 L1799.97 1212.46 L1799.38 1212.46 L1798.79 1212.46 L1798.21 1212.46 L1797.62 1212.46 L1797.03 1212.46 L1796.45 1212.46 L1795.86 1212.46 L1795.27 1212.46 L1794.69 1212.46 L1794.1 1212.46 L1793.52 1212.46 L1792.93 1212.46 L1792.34 1212.46 L1791.76 1212.46 L1791.17 1212.46 L1790.58 1212.46 L1790 1212.46 L1789.41 1212.46 L1788.82 1212.46 L1788.24 1212.46 L1787.65 1212.46 L1787.06 1212.46 L1786.48 1212.46 L1785.89 1212.46 L1785.31 1212.46 L1784.72 1212.46 L1784.13 1212.46 L1783.55 1212.46 L1782.96 1212.46 L1782.37 1212.46 L1781.79 1212.46 L1781.2 1212.46 L1780.61 1212.46 L1780.03 1212.46 L1779.44 1212.46 L1778.86 1212.46 L1778.27 1212.46 L1777.68 1212.46 L1777.1 1212.46 L1776.51 1212.46 L1775.92 1212.46 L1775.34 1212.46 L1774.75 1212.46 L1774.16 1212.46 L1773.58 1212.46 L1772.99 1212.46 L1772.4 1212.46 L1771.82 1212.46 L1771.23 1212.46 L1770.65 1212.46 L1770.06 1212.46 L1769.47 1212.46 L1768.89 1212.46 L1768.3 1212.46 L1767.71 1212.46 L1767.13 1212.46 L1766.54 1212.46 L1765.95 1212.46 L1765.37 1212.46 L1764.78 1212.46 L1764.19 1212.46 L1763.61 1212.46 L1763.02 1212.46 L1762.44 1212.46 L1761.85 1212.46 L1761.26 1212.46 L1760.68 1212.46 L1760.09 1212.46 L1759.5 1212.46 L1758.92 1212.46 L1758.33 1212.46 L1757.74 1212.46 L1757.16 1212.46 L1756.57 1212.46 L1755.99 1212.46 L1755.4 1212.46 L1754.81 1212.46 L1754.23 1212.46 L1753.64 1212.46 L1753.05 1212.46 L1752.47 1212.46 L1751.88 1212.46 L1751.29 1212.46 L1750.71 1212.46 L1750.12 1212.46 L1749.53 1212.46 L1748.95 1212.46 L1748.36 1212.46 L1747.78 1212.46 L1747.19 1212.46 L1746.6 1212.46 L1746.02 1212.46 L1745.43 1212.46 L1744.84 1212.46 L1744.26 1212.46 L1743.67 1212.46 L1743.08 1212.46 L1742.5 1212.46 L1741.91 1212.46 L1741.32 1212.46 L1740.74 1212.46 L1740.15 1212.46 L1739.57 1212.46 L1738.98 1212.46 L1738.39 1212.46 L1737.81 1212.46 L1737.22 1212.46 L1736.63 1212.46 L1736.05 1212.46 L1735.46 1212.46 L1734.87 1212.46 L1734.29 1212.46 L1733.7 1212.46 L1733.11 1212.46 L1732.53 1212.46 L1731.94 1212.46 L1731.36 1212.46 L1730.77 1212.46 L1730.18 1212.46 L1729.6 1212.46 L1729.01 1212.46 L1728.42 1212.46 L1727.84 1212.46 L1727.25 1212.46 L1726.66 1212.46 L1726.08 1212.46 L1725.49 1212.46 L1724.91 1212.46 L1724.32 1212.46 L1723.73 1212.46 L1723.15 1212.46 L1722.56 1212.46 L1721.97 1212.46 L1721.39 1212.46 L1720.8 1212.46 L1720.21 1212.46 L1719.63 1212.46 L1719.04 1212.46 L1718.45 1212.46 L1717.87 1212.46 L1717.28 1212.46 L1716.7 1212.46 L1716.11 1212.46 L1715.52 1212.46 L1714.94 1212.46 L1714.35 1212.46 L1713.76 1212.46 L1713.18 1212.46 L1712.59 1212.46 L1712 1212.46 L1711.42 1212.46 L1710.83 1212.46 L1710.24 1212.46 L1709.66 1212.46 L1709.07 1212.46 L1708.49 1212.46 L1707.9 1212.46 L1707.31 1212.46 L1706.73 1212.46 L1706.14 1212.46 L1705.55 1212.46 L1704.97 1212.46 L1704.38 1212.46 L1703.79 1212.46 L1703.21 1212.46 L1702.62 1212.46 L1702.04 1212.46 L1701.45 1212.46 L1700.86 1212.46 L1700.28 1212.46 L1699.69 1212.46 L1699.1 1212.46 L1698.52 1212.46 L1697.93 1212.46 L1697.34 1212.46 L1696.76 1212.46 L1696.17 1212.46 L1695.58 1212.46 L1695 1212.46 L1694.41 1212.46 L1693.83 1212.46 L1693.24 1212.46 L1692.65 1212.46 L1692.07 1212.46 L1691.48 1212.46 L1690.89 1212.46 L1690.31 1212.46 L1689.72 1212.46 L1689.13 1212.46 L1688.55 1212.46 L1687.96 1212.46 L1687.37 1212.46 L1686.79 1212.46 L1686.2 1212.46 L1685.62 1212.46 L1685.03 1212.46 L1684.44 1212.46 L1683.86 1212.46 L1683.27 1212.46 L1682.68 1212.46 L1682.1 1212.46 L1681.51 1212.46 L1680.92 1212.46 L1680.34 1212.46 L1679.75 1212.46 L1679.17 1212.46 L1678.58 1212.46 L1677.99 1212.46 L1677.41 1212.46 L1676.82 1212.46 L1676.23 1212.46 L1675.65 1212.46 L1675.06 1212.46 L1674.47 1212.46 L1673.89 1212.46 L1673.3 1212.46 L1672.71 1212.46 L1672.13 1212.46 L1671.54 1212.46 L1670.96 1212.46 L1670.37 1212.46 L1669.78 1212.46 L1669.2 1212.46 L1668.61 1212.46 L1668.02 1212.46 L1667.44 1212.46 L1666.85 1212.46 L1666.26 1212.46 L1665.68 1212.46 L1665.09 1212.46 L1664.5 1212.46 L1663.92 1212.46 L1663.33 1212.46 L1662.75 1212.46 L1662.16 1212.46 L1661.57 1212.46 L1660.99 1212.46 L1660.4 1212.46 L1659.81 1212.46 L1659.23 1212.46 L1658.64 1212.46 L1658.05 1212.46 L1657.47 1212.46 L1656.88 1212.46 L1656.29 1212.46 L1655.71 1212.46 L1655.12 1212.46 L1654.54 1212.46 L1653.95 1212.46 L1653.36 1212.46 L1652.78 1212.46 L1652.19 1212.46 L1651.6 1212.46 L1651.02 1212.46 L1650.43 1212.46 L1649.84 1212.46 L1649.26 1212.46 L1648.67 1212.46 L1648.09 1212.46 L1647.5 1212.46 L1646.91 1212.46 L1646.33 1212.46 L1645.74 1212.46 L1645.15 1212.46 L1644.57 1212.46 L1643.98 1212.46 L1643.39 1212.46 L1642.81 1212.46 L1642.22 1212.46 L1641.63 1212.46 L1641.05 1212.46 L1640.46 1212.46 L1639.88 1212.46 L1639.29 1212.46 L1638.7 1212.46 L1638.12 1212.46 L1637.53 1212.46 L1636.94 1212.46 L1636.36 1212.46 L1635.77 1212.46 L1635.18 1212.46 L1634.6 1212.46 L1634.01 1212.46 L1633.42 1212.46 L1632.84 1212.46 L1632.25 1212.46 L1631.67 1212.46 L1631.08 1212.46 L1630.49 1212.46 L1629.91 1212.46 L1629.32 1212.46 L1628.73 1212.46 L1628.15 1212.46 L1627.56 1212.46 L1626.97 1212.46 L1626.39 1212.46 L1625.8 1212.46 L1625.22 1212.46 L1624.63 1212.46 L1624.04 1212.46 L1623.46 1212.46 L1622.87 1212.46 L1622.28 1212.46 L1621.7 1212.46 L1621.11 1212.46 L1620.52 1212.46 L1619.94 1212.46 L1619.35 1212.46 L1618.76 1212.46 L1618.18 1212.46 L1617.59 1212.46 L1617.01 1212.46 L1616.42 1212.46 L1615.83 1212.46 L1615.25 1212.46 L1614.66 1212.46 L1614.07 1212.46 L1613.49 1212.46 L1612.9 1212.46 L1612.31 1212.46 L1611.73 1212.46 L1611.14 1212.46 L1610.55 1212.46 L1609.97 1212.46 L1609.38 1212.46 L1608.8 1212.46 L1608.21 1212.46 L1607.62 1212.46 L1607.04 1212.46 L1606.45 1212.46 L1605.86 1212.46 L1605.28 1212.46 L1604.69 1212.46 L1604.1 1212.46 L1603.52 1212.46 L1602.93 1212.46 L1602.34 1212.46 L1601.76 1212.46 L1601.17 1212.46 L1600.59 1212.46 L1600 1212.46 L1599.41 1212.46 L1598.83 1212.46 L1598.24 1212.46 L1597.65 1212.46 L1597.07 1212.46 L1596.48 1212.46 L1595.89 1212.46 L1595.31 1212.46 L1594.72 1212.46 L1594.14 1212.46 L1593.55 1212.46 L1592.96 1212.46 L1592.38 1212.46 L1591.79 1212.46 L1591.2 1212.46 L1590.62 1212.46 L1590.03 1212.46 L1589.44 1212.46 L1588.86 1212.46 L1588.27 1212.46 L1587.68 1212.46 L1587.1 1212.46 L1586.51 1212.46 L1585.93 1212.46 L1585.34 1212.46 L1584.75 1212.46 L1584.17 1212.46 L1583.58 1212.46 L1582.99 1212.46 L1582.41 1212.46 L1581.82 1212.46 L1581.23 1212.46 L1580.65 1212.46 L1580.06 1212.46 L1579.47 1212.46 L1578.89 1212.46 L1578.3 1212.46 L1577.72 1212.46 L1577.13 1212.46 L1576.54 1212.46 L1575.96 1212.46 L1575.37 1212.46 L1574.78 1212.46 L1574.2 1212.46 L1573.61 1212.46 L1573.02 1212.46 L1572.44 1212.46 L1571.85 1212.46 L1571.27 1212.46 L1570.68 1212.46 L1570.09 1212.46 L1569.51 1212.46 L1568.92 1212.46 L1568.33 1212.46 L1567.75 1212.46 L1567.16 1212.46 L1566.57 1212.46 L1565.99 1212.46 L1565.4 1212.46 L1564.81 1212.46 L1564.23 1212.46 L1563.64 1212.46 L1563.06 1212.46 L1562.47 1212.46 L1561.88 1212.46 L1561.3 1212.46 L1560.71 1212.46 L1560.12 1212.46 L1559.54 1212.46 L1558.95 1212.46 L1558.36 1212.46 L1557.78 1212.46 L1557.19 1212.46 L1556.6 1212.46 L1556.02 1212.46 L1555.43 1212.46 L1554.85 1212.46 L1554.26 1212.46 L1553.67 1212.46 L1553.09 1212.46 L1552.5 1212.46 L1551.91 1212.46 L1551.33 1212.46 L1550.74 1212.46 L1550.15 1212.46 L1549.57 1212.46 L1548.98 1212.46 L1548.4 1212.46 L1547.81 1212.46 L1547.22 1212.46 L1546.64 1212.46 L1546.05 1212.46 L1545.46 1212.46 L1544.88 1212.46 L1544.29 1212.46 L1543.7 1212.46 L1543.12 1212.46 L1542.53 1212.46 L1541.94 1212.46 L1541.36 1212.46 L1540.77 1212.46 L1540.19 1212.46 L1539.6 1212.46 L1539.01 1212.46 L1538.43 1212.46 L1537.84 1212.46 L1537.25 1212.46 L1536.67 1212.46 L1536.08 1212.46 L1535.49 1212.46 L1534.91 1212.46 L1534.32 1212.46 L1533.73 1212.46 L1533.15 1212.46 L1532.56 1212.46 L1531.98 1212.46 L1531.39 1212.46 L1530.8 1212.46 L1530.22 1212.46 L1529.63 1212.46 L1529.04 1212.46 L1528.46 1212.46 L1527.87 1212.46 L1527.28 1212.46 L1526.7 1212.46 L1526.11 1212.46 L1525.52 1212.46 L1524.94 1212.46 L1524.35 1212.46 L1523.77 1212.46 L1523.18 1212.46 L1522.59 1212.46 L1522.01 1212.46 L1521.42 1212.46 L1520.83 1212.46 L1520.25 1212.46 L1519.66 1212.46 L1519.07 1212.46 L1518.49 1212.46 L1517.9 1212.46 L1517.32 1212.46 L1516.73 1212.46 L1516.14 1212.46 L1515.56 1212.46 L1514.97 1212.46 L1514.38 1212.46 L1513.8 1212.46 L1513.21 1212.46 L1512.62 1212.46 L1512.04 1212.46 L1511.45 1212.46 L1510.86 1212.46 L1510.28 1212.46 L1509.69 1212.46 L1509.11 1212.46 L1508.52 1212.46 L1507.93 1212.46 L1507.35 1212.46 L1506.76 1212.46 L1506.17 1212.46 L1505.59 1212.46 L1505 1212.46 L1504.41 1212.46 L1503.83 1212.46 L1503.24 1212.46 L1502.65 1212.46 L1502.07 1212.46 L1501.48 1212.46 L1500.9 1212.46 L1500.31 1212.46 L1499.72 1212.46 L1499.14 1212.46 L1498.55 1212.46 L1497.96 1212.46 L1497.38 1212.46 L1496.79 1212.46 L1496.2 1212.46 L1495.62 1212.46 L1495.03 1212.46 L1494.45 1212.46 L1493.86 1212.46 L1493.27 1212.46 L1492.69 1212.46 L1492.1 1212.46 L1491.51 1212.46 L1490.93 1212.46 L1490.34 1212.46 L1489.75 1212.46 L1489.17 1212.46 L1488.58 1212.46 L1487.99 1212.46 L1487.41 1212.46 L1486.82 1212.46 L1486.24 1212.46 L1485.65 1212.46 L1485.06 1212.46 L1484.48 1212.46 L1483.89 1212.46 L1483.3 1212.46 L1482.72 1212.46 L1482.13 1212.46 L1481.54 1212.46 L1480.96 1212.46 L1480.37 1212.46 L1479.78 1212.46 L1479.2 1212.46 L1478.61 1212.46 L1478.03 1212.46 L1477.44 1212.46 L1476.85 1212.46 L1476.27 1212.46 L1475.68 1212.46 L1475.09 1212.46 L1474.51 1212.46 L1473.92 1212.46 L1473.33 1212.46 L1472.75 1212.46 L1472.16 1212.46 L1471.57 1212.46 L1470.99 1212.46 L1470.4 1212.46 L1469.82 1212.46 L1469.23 1212.46 L1468.64 1212.46 L1468.06 1212.46 L1467.47 1212.46 L1466.88 1212.46 L1466.3 1212.46 L1465.71 1212.46 L1465.12 1212.46 L1464.54 1212.46 L1463.95 1212.46 L1463.37 1212.46 L1462.78 1212.46 L1462.19 1212.46 L1461.61 1212.46 L1461.02 1212.46 L1460.43 1212.46 L1459.85 1212.46 L1459.26 1212.46 L1458.67 1212.46 L1458.09 1212.46 L1457.5 1212.46 L1456.91 1212.46 L1456.33 1212.46 L1455.74 1212.46 L1455.16 1212.46 L1454.57 1212.46 L1453.98 1212.46 L1453.4 1212.46 L1452.81 1212.46 L1452.22 1212.46 L1451.64 1212.46 L1451.05 1212.46 L1450.46 1212.46 L1449.88 1212.46 L1449.29 1212.46 L1448.7 1212.46 L1448.12 1212.46 L1447.53 1212.46 L1446.95 1212.46 L1446.36 1212.46 L1445.77 1212.46 L1445.19 1212.46 L1444.6 1212.46 L1444.01 1212.46 L1443.43 1212.46 L1442.84 1212.46 L1442.25 1212.46 L1441.67 1212.46 L1441.08 1212.46 L1440.5 1212.46 L1439.91 1212.46 L1439.32 1212.46 L1438.74 1212.46 L1438.15 1212.46 L1437.56 1212.46 L1436.98 1212.46 L1436.39 1212.46 L1435.8 1212.46 L1435.22 1212.46 L1434.63 1212.46 L1434.04 1212.46 L1433.46 1212.46 L1432.87 1212.46 L1432.29 1212.46 L1431.7 1212.46 L1431.11 1212.46 L1430.53 1212.46 L1429.94 1212.46 L1429.35 1212.46 L1428.77 1212.46 L1428.18 1212.46 L1427.59 1212.46 L1427.01 1212.46 L1426.42 1212.46 L1425.83 1212.46 L1425.25 1212.46 L1424.66 1212.46 L1424.08 1212.46 L1423.49 1212.46 L1422.9 1212.46 L1422.32 1212.46 L1421.73 1212.46 L1421.14 1212.46 L1420.56 1212.46 L1419.97 1212.46 L1419.38 1212.46 L1418.8 1212.46 L1418.21 1212.46 L1417.63 1212.46 L1417.04 1212.46 L1416.45 1212.46 L1415.87 1212.46 L1415.28 1212.46 L1414.69 1212.46 L1414.11 1212.46 L1413.52 1212.46 L1412.93 1212.46 L1412.35 1212.46 L1411.76 1212.46 L1411.17 1212.46 L1410.59 1212.46 L1410 1212.46 L1409.42 1212.46 L1408.83 1212.46 L1408.24 1212.46 L1407.66 1212.46 L1407.07 1212.46 L1406.48 1212.46 L1405.9 1212.46 L1405.31 1212.46 L1404.72 1212.46 L1404.14 1212.46 L1403.55 1212.46 L1402.96 1212.46 L1402.38 1212.46 L1401.79 1212.46 L1401.21 1212.46 L1400.62 1212.46 L1400.03 1212.46 L1399.45 1212.46 L1398.86 1212.46 L1398.27 1212.46 L1397.69 1212.46 L1397.1 1212.46 L1396.51 1212.46 L1395.93 1212.46 L1395.34 1212.46 L1394.75 1212.46 L1394.17 1212.46 L1393.58 1212.46 L1393 1212.46 L1392.41 1212.46 L1391.82 1212.46 L1391.24 1212.46 L1390.65 1212.46 L1390.06 1212.46 L1389.48 1212.46 L1388.89 1212.46 L1388.3 1212.46 L1387.72 1212.46 L1387.13 1212.46 L1386.55 1212.46 L1385.96 1212.46 L1385.37 1212.46 L1384.79 1212.46 L1384.2 1212.46 L1383.61 1212.46 L1383.03 1212.46 L1382.44 1212.46 L1381.85 1212.46 L1381.27 1212.46 L1380.68 1212.46 L1380.09 1212.46 L1379.51 1212.46 L1378.92 1212.46 L1378.34 1212.46 L1377.75 1212.46 L1377.16 1212.46 L1376.58 1212.46 L1375.99 1212.46 L1375.4 1212.46 L1374.82 1212.46 L1374.23 1212.46 L1373.64 1212.46 L1373.06 1212.46 L1372.47 1212.46 L1371.88 1212.46 L1371.3 1212.46 L1370.71 1212.46 L1370.13 1212.46 L1369.54 1212.46 L1368.95 1212.46 L1368.37 1212.46 L1367.78 1212.46 L1367.19 1212.46 L1366.61 1212.46 L1366.02 1212.46 L1365.43 1212.46 L1364.85 1212.46 L1364.26 1212.46 L1363.68 1212.46 L1363.09 1212.46 L1362.5 1212.46 L1361.92 1212.46 L1361.33 1212.46 L1360.74 1212.46 L1360.16 1212.46 L1359.57 1212.46 L1358.98 1212.46 L1358.4 1212.46 L1357.81 1212.46 L1357.22 1212.46 L1356.64 1212.46 L1356.05 1212.46 L1355.47 1212.46 L1354.88 1212.46 L1354.29 1212.46 L1353.71 1212.46 L1353.12 1212.46 L1352.53 1212.46 L1351.95 1212.46 L1351.36 1212.46 L1350.77 1212.46 L1350.19 1212.46 L1349.6 1212.46 L1349.01 1212.46 L1348.43 1212.46 L1347.84 1212.46 L1347.26 1212.46 L1346.67 1212.46 L1346.08 1212.46 L1345.5 1212.46 L1344.91 1212.46 L1344.32 1212.46 L1343.74 1212.46 L1343.15 1212.46 L1342.56 1212.46 L1341.98 1212.46 L1341.39 1212.46 L1340.8 1212.46 L1340.22 1212.46 L1339.63 1212.46 L1339.05 1212.46 L1338.46 1212.46 L1337.87 1212.46 L1337.29 1212.46 L1336.7 1212.46 L1336.11 1212.46 L1335.53 1212.46 L1334.94 1212.46 L1334.35 1212.46 L1333.77 1212.46 L1333.18 1212.46 L1332.6 1212.46 L1332.01 1212.46 L1331.42 1212.46 L1330.84 1212.46 L1330.25 1212.46 L1329.66 1212.46 L1329.08 1212.46 L1328.49 1212.46 L1327.9 1212.46 L1327.32 1212.46 L1326.73 1212.46 L1326.14 1212.46 L1325.56 1212.46 L1324.97 1212.46 L1324.39 1212.46 L1323.8 1212.46 L1323.21 1212.46 L1322.63 1212.46 L1322.04 1212.46 L1321.45 1212.46 L1320.87 1212.46 L1320.28 1212.46 L1319.69 1212.46 L1319.11 1212.46 L1318.52 1212.46 L1317.93 1212.46 L1317.35 1212.46 L1316.76 1212.46 L1316.18 1212.46 L1315.59 1212.46 L1315 1212.46 L1314.42 1212.46 L1313.83 1212.46 L1313.24 1212.46 L1312.66 1212.46 L1312.07 1212.46 L1311.48 1212.46 L1310.9 1212.46 L1310.31 1212.46 L1309.73 1212.46 L1309.14 1212.46 L1308.55 1212.46 L1307.97 1212.46 L1307.38 1212.46 L1306.79 1212.46 L1306.21 1212.46 L1305.62 1212.46 L1305.03 1212.46 L1304.45 1212.46 L1303.86 1212.46 L1303.27 1212.46 L1302.69 1212.46 L1302.1 1212.46 L1301.52 1212.46 L1300.93 1212.46 L1300.34 1212.46 L1299.76 1212.46 L1299.17 1212.46 L1298.58 1212.46 L1298 1212.46 L1297.41 1212.46 L1296.82 1212.46 L1296.24 1212.46 L1295.65 1212.46 L1295.06 1212.46 L1294.48 1212.46 L1293.89 1212.46 L1293.31 1212.46 L1292.72 1212.46 L1292.13 1212.46 L1291.55 1212.46 L1290.96 1212.46 L1290.37 1212.46 L1289.79 1212.46 L1289.2 1212.46 L1288.61 1212.46 L1288.03 1212.46 L1287.44 1212.46 L1286.86 1212.46 L1286.27 1212.46 L1285.68 1212.46 L1285.1 1212.46 L1284.51 1212.46 L1283.92 1212.46 L1283.34 1212.46 L1282.75 1212.46 L1282.16 1212.46 L1281.58 1212.46 L1280.99 1212.46 L1280.4 1212.46 L1279.82 1212.46 L1279.23 1212.46 L1278.65 1212.46 L1278.06 1212.46 L1277.47 1212.46 L1276.89 1212.46 L1276.3 1212.46 L1275.71 1212.46 L1275.13 1212.46 L1274.54 1212.46 L1273.95 1212.46 L1273.37 1212.46 L1272.78 1212.46 L1272.19 1212.46 L1271.61 1212.46 L1271.02 1212.46 L1270.44 1212.46 L1269.85 1212.46 L1269.26 1212.46 L1268.68 1212.46 L1268.09 1212.46 L1267.5 1212.46 L1266.92 1212.46 L1266.33 1212.46 L1265.74 1212.46 L1265.16 1212.46 L1264.57 1212.46 L1263.98 1212.46 L1263.4 1212.46 L1262.81 1212.46 L1262.23 1212.46 L1261.64 1212.46 L1261.05 1212.46 L1260.47 1212.46 L1259.88 1212.46 L1259.29 1212.46 L1258.71 1212.46 L1258.12 1212.46 L1257.53 1212.46 L1256.95 1212.46 L1256.36 1212.46 L1255.78 1212.46 L1255.19 1212.46 L1254.6 1212.46 L1254.02 1212.46 L1253.43 1212.46 L1252.84 1212.46 L1252.26 1212.46 L1251.67 1212.46 L1251.08 1212.46 L1250.5 1212.46 L1249.91 1212.46 L1249.32 1212.46 L1248.74 1212.46 L1248.15 1212.46 L1247.57 1212.46 L1246.98 1212.46 L1246.39 1212.46 L1245.81 1212.46 L1245.22 1212.46 L1244.63 1212.46 L1244.05 1212.46 L1243.46 1212.46 L1242.87 1212.46 L1242.29 1212.46 L1241.7 1212.46 L1241.11 1212.46 L1240.53 1212.46 L1239.94 1212.46 L1239.36 1212.46 L1238.77 1212.46 L1238.18 1212.46 L1237.6 1212.46 L1237.01 1212.46 L1236.42 1212.46 L1235.84 1212.46 L1235.25 1212.46 L1234.66 1212.46 L1234.08 1212.46 L1233.49 1212.46 L1232.91 1212.46 L1232.32 1212.46 L1231.73 1212.46 L1231.15 1212.46 L1230.56 1212.46 L1229.97 1212.46 L1229.39 1212.46 L1228.8 1212.46 L1228.21 1212.46 L1227.63 1212.46 L1227.04 1212.46 L1226.45 1212.46 L1225.87 1212.46 L1225.28 1212.46 L1224.7 1212.46 L1224.11 1212.46 L1223.52 1212.46 L1222.94 1212.46 L1222.35 1212.46 L1221.76 1212.46 L1221.18 1212.46 L1220.59 1212.46 L1220 1212.46 L1219.42 1212.46 L1218.83 1212.46 L1218.24 1212.46 L1217.66 1212.46 L1217.07 1212.46 L1216.49 1212.46 L1215.9 1212.46 L1215.31 1212.46 L1214.73 1212.46 L1214.14 1212.46 L1213.55 1212.46 L1212.97 1212.46 L1212.38 1212.46 L1211.79 1212.46 L1211.21 1212.46 L1210.62 1212.46 L1210.03 1212.46 L1209.45 1212.46 L1208.86 1212.46 L1208.28 1212.46 L1207.69 1212.46 L1207.1 1212.46 L1206.52 1212.46 L1205.93 1212.46 L1205.34 1212.46 L1204.76 1212.46 L1204.17 1212.46 L1203.58 1212.46 L1203 1212.46 L1202.41 1212.46 L1201.83 1212.46 L1201.24 1212.46 L1200.65 1212.46 L1200.07 1212.46 L1199.48 1212.46 L1198.89 1212.46 L1198.31 1212.46 L1197.72 1212.46 L1197.13 1212.46 L1196.55 1212.46 L1195.96 1212.46 L1195.37 1212.46 L1194.79 1212.46 L1194.2 1212.46 L1193.62 1212.46 L1193.03 1212.46 L1192.44 1212.46 L1191.86 1212.46 L1191.27 1212.46 L1190.68 1212.46 L1190.1 1212.46 L1189.51 1212.46 L1188.92 1212.46 L1188.34 1212.46 L1187.75 1212.46 L1187.16 1212.46 L1186.58 1212.46 L1185.99 1212.46 L1185.41 1212.46 L1184.82 1212.46 L1184.23 1212.46 L1183.65 1212.46 L1183.06 1212.46 L1182.47 1212.46 L1181.89 1212.46 L1181.3 1212.46 L1180.71 1212.46 L1180.13 1212.46 L1179.54 1212.46 L1178.96 1212.46 L1178.37 1212.46 L1177.78 1212.46 L1177.2 1212.46 L1176.61 1212.46 L1176.02 1212.46 L1175.44 1212.46 L1174.85 1212.46 L1174.26 1212.46 L1173.68 1212.46 L1173.09 1212.46 L1172.5 1212.46 L1171.92 1212.46 L1171.33 1212.46 L1170.75 1212.46 L1170.16 1212.46 L1169.57 1212.46 L1168.99 1212.46 L1168.4 1212.46 L1167.81 1212.46 L1167.23 1212.46 L1166.64 1212.46 L1166.05 1212.46 L1165.47 1212.46 L1164.88 1212.46 L1164.29 1212.46 L1163.71 1212.46 L1163.12 1212.46 L1162.54 1212.46 L1161.95 1212.46 L1161.36 1212.46 L1160.78 1212.46 L1160.19 1212.46 L1159.6 1212.46 L1159.02 1212.46 L1158.43 1212.46 L1157.84 1212.46 L1157.26 1212.46 L1156.67 1212.46 L1156.09 1212.46 L1155.5 1212.46 L1154.91 1212.46 L1154.33 1212.46 L1153.74 1212.46 L1153.15 1212.46 L1152.57 1212.46 L1151.98 1212.46 L1151.39 1212.46 L1150.81 1212.46 L1150.22 1212.46 L1149.63 1212.46 L1149.05 1212.46 L1148.46 1212.46 L1147.88 1212.46 L1147.29 1212.46 L1146.7 1212.46 L1146.12 1212.46 L1145.53 1212.46 L1144.94 1212.46 L1144.36 1212.46 L1143.77 1212.46 L1143.18 1212.46 L1142.6 1212.46 L1142.01 1212.46 L1141.42 1212.46 L1140.84 1212.46 L1140.25 1212.46 L1139.67 1212.46 L1139.08 1212.46 L1138.49 1212.46 L1137.91 1212.46 L1137.32 1212.46 L1136.73 1212.46 L1136.15 1212.46 L1135.56 1212.46 L1134.97 1212.46 L1134.39 1212.46 L1133.8 1212.46 L1133.21 1212.46 L1132.63 1212.46 L1132.04 1212.46 L1131.46 1212.46 L1130.87 1212.46 L1130.28 1212.46 L1129.7 1212.46 L1129.11 1212.46 L1128.52 1212.46 L1127.94 1212.46 L1127.35 1212.46 L1126.76 1212.46 L1126.18 1212.46 L1125.59 1212.46 L1125.01 1212.46 L1124.42 1212.46 L1123.83 1212.46 L1123.25 1212.46 L1122.66 1212.46 L1122.07 1212.46 L1121.49 1212.46 L1120.9 1212.46 L1120.31 1212.46 L1119.73 1212.46 L1119.14 1212.46 L1118.55 1212.46 L1117.97 1212.46 L1117.38 1212.46 L1116.8 1212.46 L1116.21 1212.46 L1115.62 1212.46 L1115.04 1212.46 L1114.45 1212.46 L1113.86 1212.46 L1113.28 1212.46 L1112.69 1212.46 L1112.1 1212.46 L1111.52 1212.46 L1110.93 1212.46 L1110.34 1212.46 L1109.76 1212.46 L1109.17 1212.46 L1108.59 1212.46 L1108 1212.46 L1107.41 1212.46 L1106.83 1212.46 L1106.24 1212.46 L1105.65 1212.46 L1105.07 1212.46 L1104.48 1212.46 L1103.89 1212.46 L1103.31 1212.46 L1102.72 1212.46 L1102.14 1212.46 L1101.55 1212.46 L1100.96 1212.46 L1100.38 1212.46 L1099.79 1212.46 L1099.2 1212.46 L1098.62 1212.46 L1098.03 1212.46 L1097.44 1212.46 L1096.86 1212.46 L1096.27 1212.46 L1095.68 1212.46 L1095.1 1212.46 L1094.51 1212.46 L1093.93 1212.46 L1093.34 1212.46 L1092.75 1212.46 L1092.17 1212.46 L1091.58 1212.46 L1090.99 1212.46 L1090.41 1212.46 L1089.82 1212.46 L1089.23 1212.46 L1088.65 1212.46 L1088.06 1212.46 L1087.47 1212.46 L1086.89 1212.46 L1086.3 1212.46 L1085.72 1212.46 L1085.13 1212.46 L1084.54 1212.46 L1083.96 1212.46 L1083.37 1212.46 L1082.78 1212.46 L1082.2 1212.46 L1081.61 1212.46 L1081.02 1212.46 L1080.44 1212.46 L1079.85 1212.46 L1079.26 1212.46 L1078.68 1212.46 L1078.09 1212.46 L1077.51 1212.46 L1076.92 1212.46 L1076.33 1212.46 L1075.75 1212.46 L1075.16 1212.46 L1074.57 1212.46 L1073.99 1212.46 L1073.4 1212.46 L1072.81 1212.46 L1072.23 1212.46 L1071.64 1212.46 L1071.06 1212.46 L1070.47 1212.46 L1069.88 1212.46 L1069.3 1212.46 L1068.71 1212.46 L1068.12 1212.46 L1067.54 1212.46 L1066.95 1212.46 L1066.36 1212.46 L1065.78 1212.46 L1065.19 1212.46 L1064.6 1212.46 L1064.02 1212.46 L1063.43 1212.46 L1062.85 1212.46 L1062.26 1212.46 L1061.67 1212.46 L1061.09 1212.46 L1060.5 1212.46 L1059.91 1212.46 L1059.33 1212.46 L1058.74 1212.46 L1058.15 1212.46 L1057.57 1212.46 L1056.98 1212.46 L1056.39 1212.46 L1055.81 1212.46 L1055.22 1212.46 L1054.64 1212.46 L1054.05 1212.46 L1053.46 1212.46 L1052.88 1212.46 L1052.29 1212.46 L1051.7 1212.46 L1051.12 1212.46 L1050.53 1212.46 L1049.94 1212.46 L1049.36 1212.46 L1048.77 1212.46 L1048.19 1212.46 L1047.6 1212.46 L1047.01 1212.46 L1046.43 1212.46 L1045.84 1212.46 L1045.25 1212.46 L1044.67 1212.46 L1044.08 1212.46 L1043.49 1212.46 L1042.91 1212.46 L1042.32 1212.46 L1041.73 1212.46 L1041.15 1212.46 L1040.56 1212.46 L1039.98 1212.46 L1039.39 1212.46 L1038.8 1212.46 L1038.22 1212.46 L1037.63 1212.46 L1037.04 1212.46 L1036.46 1212.46 L1035.87 1212.46 L1035.28 1212.46 L1034.7 1212.46 L1034.11 1212.46 L1033.52 1212.46 L1032.94 1212.46 L1032.35 1212.46 L1031.77 1212.46 L1031.18 1212.46 L1030.59 1212.46 L1030.01 1212.46 L1029.42 1212.46 L1028.83 1212.46 L1028.25 1212.46 L1027.66 1212.46 L1027.07 1212.46 L1026.49 1212.46 L1025.9 1212.46 L1025.32 1212.46 L1024.73 1212.46 L1024.14 1212.46 L1023.56 1212.46 L1022.97 1212.46 L1022.38 1212.46 L1021.8 1212.46 L1021.21 1212.46 L1020.62 1212.46 L1020.04 1212.46 L1019.45 1212.46 L1018.86 1212.46 L1018.28 1212.46 L1017.69 1212.46 L1017.11 1212.46 L1016.52 1212.46 L1015.93 1212.46 L1015.35 1212.46 L1014.76 1212.46 L1014.17 1212.46 L1013.59 1212.46 L1013 1212.46 L1012.41 1212.46 L1011.83 1212.46 L1011.24 1212.46 L1010.65 1212.46 L1010.07 1212.46 L1009.48 1212.46 L1008.9 1212.46 L1008.31 1212.46 L1007.72 1212.46 L1007.14 1212.46 L1006.55 1212.46 L1005.96 1212.46 L1005.38 1212.46 L1004.79 1212.46 L1004.2 1212.46 L1003.62 1212.46 L1003.03 1212.46 L1002.44 1212.46 L1001.86 1212.46 L1001.27 1212.46 L1000.69 1212.46 L1000.1 1212.46 L999.513 1212.46 L998.926 1212.46 L998.34 1212.46 L997.754 1212.46 L997.167 1212.46 L996.581 1212.46 L995.994 1212.46 L995.408 1212.46 L994.822 1212.46 L994.235 1212.46 L993.649 1212.46 L993.062 1212.46 L992.476 1212.46 L991.889 1212.46 L991.303 1212.46 L990.717 1212.46 L990.13 1212.46 L989.544 1212.46 L988.957 1212.46 L988.371 1212.46 L987.785 1212.46 L987.198 1212.46 L986.612 1212.46 L986.025 1212.46  Z\" fill=\"#3da44d\" fill-rule=\"evenodd\" fill-opacity=\"0.5\"/>\n<polyline clip-path=\"url(#clip982)\" style=\"stroke:#3da44d; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"986.025,1212.52 986.612,1212.52 987.198,1212.52 987.785,1212.52 988.371,1212.52 988.957,1212.52 989.544,1212.52 990.13,1212.52 990.717,1212.52 991.303,1212.52 991.889,1212.52 992.476,1212.52 993.062,1212.52 993.649,1212.52 994.235,1212.52 994.822,1212.52 995.408,1212.52 995.994,1212.52 996.581,1212.52 997.167,1212.52 997.754,1212.52 998.34,1212.52 998.926,1212.52 999.513,1212.52 1000.1,1212.52 1000.69,1212.52 1001.27,1212.52 1001.86,1212.52 1002.44,1212.52 1003.03,1212.52 1003.62,1212.52 1004.2,1212.52 1004.79,1212.52 1005.38,1212.52 1005.96,1212.52 1006.55,1212.52 1007.14,1212.52 1007.72,1212.52 1008.31,1212.52 1008.9,1212.52 1009.48,1212.52 1010.07,1212.52 1010.65,1212.52 1011.24,1212.52 1011.83,1212.52 1012.41,1212.52 1013,1212.52 1013.59,1212.52 1014.17,1212.52 1014.76,1212.52 1015.35,1212.52 1015.93,1212.52 1016.52,1212.52 1017.11,1212.52 1017.69,1212.52 1018.28,1212.52 1018.86,1212.52 1019.45,1212.52 1020.04,1212.52 1020.62,1212.52 1021.21,1212.52 1021.8,1212.52 1022.38,1212.52 1022.97,1212.52 1023.56,1212.52 1024.14,1212.52 1024.73,1212.52 1025.32,1212.52 1025.9,1212.52 1026.49,1212.52 1027.07,1212.52 1027.66,1212.52 1028.25,1212.52 1028.83,1212.52 1029.42,1212.52 1030.01,1212.52 1030.59,1212.52 1031.18,1212.52 1031.77,1212.52 1032.35,1212.52 1032.94,1212.52 1033.52,1212.52 1034.11,1212.52 1034.7,1212.52 1035.28,1212.52 1035.87,1212.52 1036.46,1212.52 1037.04,1212.52 1037.63,1212.52 1038.22,1212.52 1038.8,1212.52 1039.39,1212.52 1039.98,1212.52 1040.56,1212.52 1041.15,1212.52 1041.73,1212.52 1042.32,1212.52 1042.91,1212.52 1043.49,1212.52 1044.08,1212.52 1044.67,1212.52 1045.25,1212.52 1045.84,1212.52 1046.43,1212.52 1047.01,1212.52 1047.6,1212.52 1048.19,1212.52 1048.77,1212.52 1049.36,1212.52 1049.94,1212.52 1050.53,1212.52 1051.12,1212.52 1051.7,1212.52 1052.29,1212.52 1052.88,1212.52 1053.46,1212.52 1054.05,1212.52 1054.64,1212.52 1055.22,1212.52 1055.81,1212.52 1056.39,1212.52 1056.98,1212.52 1057.57,1212.52 1058.15,1212.52 1058.74,1212.52 1059.33,1212.52 1059.91,1212.52 1060.5,1212.52 1061.09,1212.52 1061.67,1212.52 1062.26,1212.52 1062.85,1212.52 1063.43,1212.52 1064.02,1212.52 1064.6,1212.52 1065.19,1212.52 1065.78,1212.52 1066.36,1212.52 1066.95,1212.52 1067.54,1212.52 1068.12,1212.52 1068.71,1212.52 1069.3,1212.52 1069.88,1212.52 1070.47,1212.52 1071.06,1212.52 1071.64,1212.52 1072.23,1212.52 1072.81,1212.52 1073.4,1212.52 1073.99,1212.52 1074.57,1212.52 1075.16,1212.52 1075.75,1212.52 1076.33,1212.52 1076.92,1212.52 1077.51,1212.52 1078.09,1212.52 1078.68,1212.52 1079.26,1212.52 1079.85,1212.52 1080.44,1212.52 1081.02,1212.52 1081.61,1212.52 1082.2,1212.52 1082.78,1212.52 1083.37,1212.52 1083.96,1212.52 1084.54,1212.52 1085.13,1212.52 1085.72,1212.52 1086.3,1212.52 1086.89,1212.52 1087.47,1212.52 1088.06,1212.52 1088.65,1212.52 1089.23,1212.52 1089.82,1212.52 1090.41,1212.52 1090.99,1212.52 1091.58,1212.52 1092.17,1212.52 1092.75,1212.52 1093.34,1212.52 1093.93,1212.52 1094.51,1212.52 1095.1,1212.52 1095.68,1212.52 1096.27,1212.52 1096.86,1212.52 1097.44,1212.52 1098.03,1212.52 1098.62,1212.52 1099.2,1212.52 1099.79,1212.52 1100.38,1212.52 1100.96,1212.52 1101.55,1212.52 1102.14,1212.52 1102.72,1212.52 1103.31,1212.52 1103.89,1212.52 1104.48,1212.52 1105.07,1212.52 1105.65,1212.52 1106.24,1212.52 1106.83,1212.52 1107.41,1212.52 1108,1212.52 1108.59,1212.52 1109.17,1212.52 1109.76,1212.52 1110.34,1212.52 1110.93,1212.52 1111.52,1212.52 1112.1,1212.52 1112.69,1212.52 1113.28,1212.52 1113.86,1212.52 1114.45,1212.52 1115.04,1212.52 1115.62,1212.52 1116.21,1212.52 1116.8,1212.52 1117.38,1212.52 1117.97,1212.52 1118.55,1212.52 1119.14,1212.52 1119.73,1212.52 1120.31,1212.52 1120.9,1212.52 1121.49,1212.52 1122.07,1212.52 1122.66,1212.52 1123.25,1212.52 1123.83,1212.52 1124.42,1212.52 1125.01,1212.52 1125.59,1212.52 1126.18,1212.52 1126.76,1212.52 1127.35,1212.52 1127.94,1212.52 1128.52,1212.52 1129.11,1212.52 1129.7,1212.52 1130.28,1212.52 1130.87,1212.52 1131.46,1212.52 1132.04,1212.52 1132.63,1212.52 1133.21,1212.52 1133.8,1212.52 1134.39,1212.52 1134.97,1212.52 1135.56,1212.52 1136.15,1212.52 1136.73,1212.52 1137.32,1212.52 1137.91,1212.52 1138.49,1212.52 1139.08,1212.52 1139.67,1212.52 1140.25,1212.52 1140.84,1212.52 1141.42,1212.52 1142.01,1212.52 1142.6,1212.52 1143.18,1212.52 1143.77,1212.52 1144.36,1212.52 1144.94,1212.52 1145.53,1212.52 1146.12,1212.52 1146.7,1212.52 1147.29,1212.52 1147.88,1212.52 1148.46,1212.52 1149.05,1212.52 1149.63,1212.52 1150.22,1212.52 1150.81,1212.52 1151.39,1212.52 1151.98,1212.52 1152.57,1212.52 1153.15,1212.52 1153.74,1212.52 1154.33,1212.52 1154.91,1212.52 1155.5,1212.52 1156.09,1212.52 1156.67,1212.52 1157.26,1212.52 1157.84,1212.52 1158.43,1212.52 1159.02,1212.52 1159.6,1212.52 1160.19,1212.52 1160.78,1212.52 1161.36,1212.52 1161.95,1212.52 1162.54,1212.52 1163.12,1212.52 1163.71,1212.52 1164.29,1212.52 1164.88,1212.52 1165.47,1212.52 1166.05,1212.52 1166.64,1212.52 1167.23,1212.52 1167.81,1212.52 1168.4,1212.52 1168.99,1212.52 1169.57,1212.52 1170.16,1212.52 1170.75,1212.52 1171.33,1212.52 1171.92,1212.52 1172.5,1212.52 1173.09,1212.52 1173.68,1212.52 1174.26,1212.52 1174.85,1212.52 1175.44,1212.52 1176.02,1212.52 1176.61,1212.52 1177.2,1212.52 1177.78,1212.52 1178.37,1212.52 1178.96,1212.52 1179.54,1212.52 1180.13,1212.52 1180.71,1212.52 1181.3,1212.52 1181.89,1212.52 1182.47,1212.52 1183.06,1212.52 1183.65,1212.52 1184.23,1212.52 1184.82,1212.52 1185.41,1212.52 1185.99,1212.52 1186.58,1212.52 1187.16,1212.52 1187.75,1212.52 1188.34,1212.52 1188.92,1212.52 1189.51,1212.52 1190.1,1212.52 1190.68,1212.52 1191.27,1212.52 1191.86,1212.52 1192.44,1212.52 1193.03,1212.52 1193.62,1212.52 1194.2,1212.52 1194.79,1212.52 1195.37,1212.52 1195.96,1212.52 1196.55,1212.52 1197.13,1212.52 1197.72,1212.52 1198.31,1212.52 1198.89,1212.52 1199.48,1212.52 1200.07,1212.52 1200.65,1212.52 1201.24,1212.52 1201.83,1212.52 1202.41,1212.52 1203,1212.52 1203.58,1212.52 1204.17,1212.52 1204.76,1212.52 1205.34,1212.52 1205.93,1212.52 1206.52,1212.52 1207.1,1212.52 1207.69,1212.52 1208.28,1212.52 1208.86,1212.52 1209.45,1212.52 1210.03,1212.52 1210.62,1212.52 1211.21,1212.52 1211.79,1212.52 1212.38,1212.52 1212.97,1212.52 1213.55,1212.52 1214.14,1212.52 1214.73,1212.52 1215.31,1212.52 1215.9,1212.52 1216.49,1212.52 1217.07,1212.52 1217.66,1212.52 1218.24,1212.52 1218.83,1212.52 1219.42,1212.52 1220,1212.52 1220.59,1212.52 1221.18,1212.52 1221.76,1212.52 1222.35,1212.52 1222.94,1212.52 1223.52,1212.52 1224.11,1212.52 1224.7,1212.52 1225.28,1212.52 1225.87,1212.52 1226.45,1212.52 1227.04,1212.52 1227.63,1212.52 1228.21,1212.52 1228.8,1212.52 1229.39,1212.52 1229.97,1212.52 1230.56,1212.52 1231.15,1212.52 1231.73,1212.52 1232.32,1212.52 1232.91,1212.52 1233.49,1212.52 1234.08,1212.52 1234.66,1212.52 1235.25,1212.52 1235.84,1212.52 1236.42,1212.52 1237.01,1212.52 1237.6,1212.52 1238.18,1212.52 1238.77,1212.52 1239.36,1212.52 1239.94,1212.52 1240.53,1212.52 1241.11,1212.52 1241.7,1212.52 1242.29,1212.52 1242.87,1212.52 1243.46,1212.52 1244.05,1212.52 1244.63,1212.52 1245.22,1212.52 1245.81,1212.52 1246.39,1212.52 1246.98,1212.52 1247.57,1212.52 1248.15,1212.52 1248.74,1212.52 1249.32,1212.52 1249.91,1212.52 1250.5,1212.52 1251.08,1212.52 1251.67,1212.52 1252.26,1212.52 1252.84,1212.52 1253.43,1212.52 1254.02,1212.52 1254.6,1212.52 1255.19,1212.52 1255.78,1212.52 1256.36,1212.52 1256.95,1212.52 1257.53,1212.52 1258.12,1212.52 1258.71,1212.52 1259.29,1212.52 1259.88,1212.52 1260.47,1212.52 1261.05,1212.52 1261.64,1212.52 1262.23,1212.52 1262.81,1212.52 1263.4,1212.52 1263.98,1212.52 1264.57,1212.52 1265.16,1212.52 1265.74,1212.52 1266.33,1212.52 1266.92,1212.52 1267.5,1212.52 1268.09,1212.52 1268.68,1212.52 1269.26,1212.52 1269.85,1212.52 1270.44,1212.52 1271.02,1212.52 1271.61,1212.52 1272.19,1212.52 1272.78,1212.52 1273.37,1212.52 1273.95,1212.52 1274.54,1212.52 1275.13,1212.52 1275.71,1212.52 1276.3,1212.52 1276.89,1212.52 1277.47,1212.52 1278.06,1212.52 1278.65,1212.52 1279.23,1212.52 1279.82,1212.52 1280.4,1212.52 1280.99,1212.52 1281.58,1212.52 1282.16,1212.52 1282.75,1212.52 1283.34,1212.52 1283.92,1212.52 1284.51,1212.52 1285.1,1212.52 1285.68,1212.52 1286.27,1212.52 1286.86,1212.52 1287.44,1212.52 1288.03,1212.52 1288.61,1212.52 1289.2,1212.52 1289.79,1212.52 1290.37,1212.52 1290.96,1212.52 1291.55,1212.52 1292.13,1212.52 1292.72,1212.52 1293.31,1212.52 1293.89,1212.52 1294.48,1212.52 1295.06,1212.52 1295.65,1212.52 1296.24,1212.52 1296.82,1212.52 1297.41,1212.52 1298,1212.52 1298.58,1212.52 1299.17,1212.52 1299.76,1212.52 1300.34,1212.52 1300.93,1212.52 1301.52,1212.52 1302.1,1212.52 1302.69,1212.52 1303.27,1212.52 1303.86,1212.52 1304.45,1212.52 1305.03,1212.52 1305.62,1212.52 1306.21,1212.52 1306.79,1212.52 1307.38,1212.52 1307.97,1212.52 1308.55,1212.52 1309.14,1212.52 1309.73,1212.52 1310.31,1212.52 1310.9,1212.52 1311.48,1212.52 1312.07,1212.52 1312.66,1212.52 1313.24,1212.52 1313.83,1212.52 1314.42,1212.52 1315,1212.52 1315.59,1212.52 1316.18,1212.52 1316.76,1212.52 1317.35,1212.52 1317.93,1212.52 1318.52,1212.52 1319.11,1212.52 1319.69,1212.52 1320.28,1212.52 1320.87,1212.52 1321.45,1212.52 1322.04,1212.52 1322.63,1212.52 1323.21,1212.52 1323.8,1212.52 1324.39,1212.52 1324.97,1212.52 1325.56,1212.52 1326.14,1212.52 1326.73,1212.52 1327.32,1212.52 1327.9,1212.52 1328.49,1212.52 1329.08,1212.52 1329.66,1212.52 1330.25,1212.52 1330.84,1212.52 1331.42,1212.52 1332.01,1212.52 1332.6,1212.52 1333.18,1212.52 1333.77,1212.52 1334.35,1212.52 1334.94,1212.52 1335.53,1212.52 1336.11,1212.52 1336.7,1212.52 1337.29,1212.52 1337.87,1212.52 1338.46,1212.52 1339.05,1212.52 1339.63,1212.52 1340.22,1212.52 1340.8,1212.52 1341.39,1212.52 1341.98,1212.52 1342.56,1212.52 1343.15,1212.52 1343.74,1212.52 1344.32,1212.52 1344.91,1212.52 1345.5,1212.52 1346.08,1212.52 1346.67,1212.52 1347.26,1212.52 1347.84,1212.52 1348.43,1212.52 1349.01,1212.52 1349.6,1212.52 1350.19,1212.52 1350.77,1212.52 1351.36,1212.52 1351.95,1212.52 1352.53,1212.52 1353.12,1212.52 1353.71,1212.52 1354.29,1212.52 1354.88,1212.52 1355.47,1212.52 1356.05,1212.52 1356.64,1212.52 1357.22,1212.52 1357.81,1212.52 1358.4,1212.52 1358.98,1212.52 1359.57,1212.52 1360.16,1212.52 1360.74,1212.52 1361.33,1212.52 1361.92,1212.52 1362.5,1212.52 1363.09,1212.52 1363.68,1212.52 1364.26,1212.52 1364.85,1212.52 1365.43,1212.52 1366.02,1212.52 1366.61,1212.52 1367.19,1212.52 1367.78,1212.52 1368.37,1212.52 1368.95,1212.52 1369.54,1212.52 1370.13,1212.52 1370.71,1212.52 1371.3,1212.52 1371.88,1212.52 1372.47,1212.52 1373.06,1212.52 1373.64,1212.52 1374.23,1212.52 1374.82,1212.52 1375.4,1212.52 1375.99,1212.52 1376.58,1212.52 1377.16,1212.52 1377.75,1212.52 1378.34,1212.52 1378.92,1212.52 1379.51,1212.52 1380.09,1212.52 1380.68,1212.52 1381.27,1212.52 1381.85,1212.52 1382.44,1212.52 1383.03,1212.52 1383.61,1212.52 1384.2,1212.52 1384.79,1212.52 1385.37,1212.52 1385.96,1212.52 1386.55,1212.52 1387.13,1212.52 1387.72,1212.52 1388.3,1212.52 1388.89,1212.52 1389.48,1212.52 1390.06,1212.52 1390.65,1212.52 1391.24,1212.52 1391.82,1212.52 1392.41,1212.52 1393,1212.52 1393.58,1212.52 1394.17,1212.52 1394.75,1212.52 1395.34,1212.52 1395.93,1212.52 1396.51,1212.52 1397.1,1212.52 1397.69,1212.52 1398.27,1212.52 1398.86,1212.52 1399.45,1212.52 1400.03,1212.52 1400.62,1212.52 1401.21,1212.52 1401.79,1212.52 1402.38,1212.52 1402.96,1212.52 1403.55,1212.52 1404.14,1212.52 1404.72,1212.52 1405.31,1212.52 1405.9,1212.52 1406.48,1212.52 1407.07,1212.52 1407.66,1212.52 1408.24,1212.52 1408.83,1212.52 1409.42,1212.52 1410,1212.52 1410.59,1212.52 1411.17,1212.52 1411.76,1212.52 1412.35,1212.52 1412.93,1212.52 1413.52,1212.52 1414.11,1212.52 1414.69,1212.52 1415.28,1212.52 1415.87,1212.52 1416.45,1212.52 1417.04,1212.52 1417.63,1212.52 1418.21,1212.52 1418.8,1212.52 1419.38,1212.52 1419.97,1212.52 1420.56,1212.52 1421.14,1212.52 1421.73,1212.52 1422.32,1212.52 1422.9,1212.52 1423.49,1212.52 1424.08,1212.52 1424.66,1212.52 1425.25,1212.52 1425.83,1212.52 1426.42,1212.52 1427.01,1212.52 1427.59,1212.52 1428.18,1212.52 1428.77,1212.52 1429.35,1212.52 1429.94,1212.52 1430.53,1212.52 1431.11,1212.52 1431.7,1212.52 1432.29,1212.52 1432.87,1212.52 1433.46,1212.52 1434.04,1212.52 1434.63,1212.52 1435.22,1212.52 1435.8,1212.52 1436.39,1212.52 1436.98,1212.52 1437.56,1212.52 1438.15,1212.52 1438.74,1212.52 1439.32,1212.52 1439.91,1212.52 1440.5,1212.52 1441.08,1212.52 1441.67,1212.52 1442.25,1212.52 1442.84,1212.52 1443.43,1212.52 1444.01,1212.52 1444.6,1212.52 1445.19,1212.52 1445.77,1212.52 1446.36,1212.52 1446.95,1212.52 1447.53,1212.52 1448.12,1212.52 1448.7,1212.52 1449.29,1212.52 1449.88,1212.52 1450.46,1212.52 1451.05,1212.52 1451.64,1212.52 1452.22,1212.52 1452.81,1212.52 1453.4,1212.52 1453.98,1212.52 1454.57,1212.52 1455.16,1212.52 1455.74,1212.52 1456.33,1212.52 1456.91,1212.52 1457.5,1212.52 1458.09,1212.52 1458.67,1212.52 1459.26,1212.52 1459.85,1212.52 1460.43,1212.52 1461.02,1212.52 1461.61,1212.52 1462.19,1212.52 1462.78,1212.52 1463.37,1212.52 1463.95,1212.52 1464.54,1212.52 1465.12,1212.52 1465.71,1212.52 1466.3,1212.52 1466.88,1212.52 1467.47,1212.52 1468.06,1212.52 1468.64,1212.52 1469.23,1212.52 1469.82,1212.52 1470.4,1212.52 1470.99,1212.52 1471.57,1212.52 1472.16,1212.52 1472.75,1212.52 1473.33,1212.52 1473.92,1212.52 1474.51,1212.52 1475.09,1212.52 1475.68,1212.52 1476.27,1212.52 1476.85,1212.52 1477.44,1212.52 1478.03,1212.52 1478.61,1212.52 1479.2,1212.52 1479.78,1212.52 1480.37,1212.52 1480.96,1212.52 1481.54,1212.52 1482.13,1212.52 1482.72,1212.52 1483.3,1212.52 1483.89,1212.52 1484.48,1212.52 1485.06,1212.52 1485.65,1212.52 1486.24,1212.52 1486.82,1212.52 1487.41,1212.52 1487.99,1212.52 1488.58,1212.52 1489.17,1212.52 1489.75,1212.52 1490.34,1212.52 1490.93,1212.52 1491.51,1212.52 1492.1,1212.52 1492.69,1212.52 1493.27,1212.52 1493.86,1212.52 1494.45,1212.52 1495.03,1212.52 1495.62,1212.52 1496.2,1212.52 1496.79,1212.52 1497.38,1212.52 1497.96,1212.52 1498.55,1212.52 1499.14,1212.52 1499.72,1212.52 1500.31,1212.52 1500.9,1212.52 1501.48,1212.52 1502.07,1212.52 1502.65,1212.52 1503.24,1212.52 1503.83,1212.52 1504.41,1212.52 1505,1212.52 1505.59,1212.52 1506.17,1212.52 1506.76,1212.52 1507.35,1212.52 1507.93,1212.52 1508.52,1212.52 1509.11,1212.52 1509.69,1212.52 1510.28,1212.52 1510.86,1212.52 1511.45,1212.52 1512.04,1212.52 1512.62,1212.52 1513.21,1212.52 1513.8,1212.52 1514.38,1212.52 1514.97,1212.52 1515.56,1212.52 1516.14,1212.52 1516.73,1212.52 1517.32,1212.52 1517.9,1212.52 1518.49,1212.52 1519.07,1212.52 1519.66,1212.52 1520.25,1212.52 1520.83,1212.52 1521.42,1212.52 1522.01,1212.52 1522.59,1212.52 1523.18,1212.52 1523.77,1212.52 1524.35,1212.52 1524.94,1212.52 1525.52,1212.52 1526.11,1212.52 1526.7,1212.52 1527.28,1212.52 1527.87,1212.52 1528.46,1212.52 1529.04,1212.52 1529.63,1212.52 1530.22,1212.52 1530.8,1212.52 1531.39,1212.52 1531.98,1212.52 1532.56,1212.52 1533.15,1212.52 1533.73,1212.52 1534.32,1212.52 1534.91,1212.52 1535.49,1212.52 1536.08,1212.52 1536.67,1212.52 1537.25,1212.52 1537.84,1212.52 1538.43,1212.52 1539.01,1212.52 1539.6,1212.52 1540.19,1212.52 1540.77,1212.52 1541.36,1212.52 1541.94,1212.52 1542.53,1212.52 1543.12,1212.52 1543.7,1212.52 1544.29,1212.52 1544.88,1212.52 1545.46,1212.52 1546.05,1212.52 1546.64,1212.52 1547.22,1212.52 1547.81,1212.52 1548.4,1212.52 1548.98,1212.52 1549.57,1212.52 1550.15,1212.52 1550.74,1212.52 1551.33,1212.52 1551.91,1212.52 1552.5,1212.52 1553.09,1212.52 1553.67,1212.52 1554.26,1212.52 1554.85,1212.52 1555.43,1212.52 1556.02,1212.52 1556.6,1212.52 1557.19,1212.52 1557.78,1212.52 1558.36,1212.52 1558.95,1212.52 1559.54,1212.52 1560.12,1212.52 1560.71,1212.52 1561.3,1212.52 1561.88,1212.52 1562.47,1212.52 1563.06,1212.52 1563.64,1212.52 1564.23,1212.52 1564.81,1212.52 1565.4,1212.52 1565.99,1212.52 1566.57,1212.52 1567.16,1212.52 1567.75,1212.52 1568.33,1212.52 1568.92,1212.52 1569.51,1212.52 1570.09,1212.52 1570.68,1212.52 1571.27,1212.52 1571.85,1212.52 1572.44,1212.52 1573.02,1212.52 1573.61,1212.52 1574.2,1212.52 1574.78,1212.52 1575.37,1212.52 1575.96,1212.52 1576.54,1212.52 1577.13,1212.52 1577.72,1212.52 1578.3,1212.52 1578.89,1212.52 1579.47,1212.52 1580.06,1212.52 1580.65,1212.52 1581.23,1212.52 1581.82,1212.52 1582.41,1212.52 1582.99,1212.52 1583.58,1212.52 1584.17,1212.52 1584.75,1212.52 1585.34,1212.52 1585.93,1212.52 1586.51,1212.52 1587.1,1212.52 1587.68,1212.52 1588.27,1212.52 1588.86,1212.52 1589.44,1212.52 1590.03,1212.52 1590.62,1212.52 1591.2,1212.52 1591.79,1212.52 1592.38,1212.52 1592.96,1212.52 1593.55,1212.52 1594.14,1212.52 1594.72,1212.52 1595.31,1212.52 1595.89,1212.52 1596.48,1212.52 1597.07,1212.52 1597.65,1212.52 1598.24,1212.52 1598.83,1212.52 1599.41,1212.52 1600,1212.52 1600.59,1212.52 1601.17,1212.52 1601.76,1212.52 1602.34,1212.52 1602.93,1212.52 1603.52,1212.52 1604.1,1212.52 1604.69,1212.52 1605.28,1212.52 1605.86,1212.52 1606.45,1212.52 1607.04,1212.52 1607.62,1212.52 1608.21,1212.52 1608.8,1212.52 1609.38,1212.52 1609.97,1212.52 1610.55,1212.52 1611.14,1212.52 1611.73,1212.52 1612.31,1212.52 1612.9,1212.52 1613.49,1212.52 1614.07,1212.52 1614.66,1212.52 1615.25,1212.52 1615.83,1212.52 1616.42,1212.52 1617.01,1212.52 1617.59,1212.52 1618.18,1212.52 1618.76,1212.52 1619.35,1212.52 1619.94,1212.52 1620.52,1212.52 1621.11,1212.52 1621.7,1212.52 1622.28,1212.52 1622.87,1212.52 1623.46,1212.52 1624.04,1212.52 1624.63,1212.52 1625.22,1212.52 1625.8,1212.52 1626.39,1212.52 1626.97,1212.52 1627.56,1212.52 1628.15,1212.52 1628.73,1212.52 1629.32,1212.52 1629.91,1212.52 1630.49,1212.52 1631.08,1212.52 1631.67,1212.52 1632.25,1212.52 1632.84,1212.52 1633.42,1212.52 1634.01,1212.52 1634.6,1212.52 1635.18,1212.52 1635.77,1212.52 1636.36,1212.52 1636.94,1212.52 1637.53,1212.52 1638.12,1212.52 1638.7,1212.52 1639.29,1212.52 1639.88,1212.52 1640.46,1212.52 1641.05,1212.52 1641.63,1212.52 1642.22,1212.52 1642.81,1212.52 1643.39,1212.52 1643.98,1212.52 1644.57,1212.52 1645.15,1212.52 1645.74,1212.52 1646.33,1212.52 1646.91,1212.52 1647.5,1212.52 1648.09,1212.52 1648.67,1212.52 1649.26,1212.52 1649.84,1212.52 1650.43,1212.52 1651.02,1212.52 1651.6,1212.52 1652.19,1212.52 1652.78,1212.52 1653.36,1212.52 1653.95,1212.52 1654.54,1212.52 1655.12,1212.52 1655.71,1212.52 1656.29,1212.52 1656.88,1212.52 1657.47,1212.52 1658.05,1212.52 1658.64,1212.52 1659.23,1212.52 1659.81,1212.52 1660.4,1212.52 1660.99,1212.52 1661.57,1212.52 1662.16,1212.52 1662.75,1212.52 1663.33,1212.52 1663.92,1212.52 1664.5,1212.52 1665.09,1212.52 1665.68,1212.52 1666.26,1212.52 1666.85,1212.52 1667.44,1212.52 1668.02,1212.52 1668.61,1212.52 1669.2,1212.52 1669.78,1212.52 1670.37,1212.52 1670.96,1212.52 1671.54,1212.52 1672.13,1212.52 1672.71,1212.52 1673.3,1212.52 1673.89,1212.52 1674.47,1212.52 1675.06,1212.52 1675.65,1212.52 1676.23,1212.52 1676.82,1212.52 1677.41,1212.52 1677.99,1212.52 1678.58,1212.52 1679.17,1212.52 1679.75,1212.52 1680.34,1212.52 1680.92,1212.52 1681.51,1212.52 1682.1,1212.52 1682.68,1212.52 1683.27,1212.52 1683.86,1212.52 1684.44,1212.52 1685.03,1212.52 1685.62,1212.52 1686.2,1212.52 1686.79,1212.52 1687.37,1212.52 1687.96,1212.52 1688.55,1212.52 1689.13,1212.52 1689.72,1212.52 1690.31,1212.52 1690.89,1212.52 1691.48,1212.52 1692.07,1212.52 1692.65,1212.52 1693.24,1212.52 1693.83,1212.52 1694.41,1212.52 1695,1212.52 1695.58,1212.52 1696.17,1212.52 1696.76,1212.52 1697.34,1212.52 1697.93,1212.52 1698.52,1212.52 1699.1,1212.52 1699.69,1212.52 1700.28,1212.52 1700.86,1212.52 1701.45,1212.52 1702.04,1212.52 1702.62,1212.52 1703.21,1212.52 1703.79,1212.52 1704.38,1212.52 1704.97,1212.52 1705.55,1212.52 1706.14,1212.52 1706.73,1212.52 1707.31,1212.52 1707.9,1212.52 1708.49,1212.52 1709.07,1212.52 1709.66,1212.52 1710.24,1212.52 1710.83,1212.52 1711.42,1212.52 1712,1212.52 1712.59,1212.52 1713.18,1212.52 1713.76,1212.52 1714.35,1212.52 1714.94,1212.52 1715.52,1212.52 1716.11,1212.52 1716.7,1212.52 1717.28,1212.52 1717.87,1212.52 1718.45,1212.52 1719.04,1212.52 1719.63,1212.52 1720.21,1212.52 1720.8,1212.52 1721.39,1212.52 1721.97,1212.52 1722.56,1212.52 1723.15,1212.52 1723.73,1212.52 1724.32,1212.52 1724.91,1212.52 1725.49,1212.52 1726.08,1212.52 1726.66,1212.52 1727.25,1212.52 1727.84,1212.52 1728.42,1212.52 1729.01,1212.52 1729.6,1212.52 1730.18,1212.52 1730.77,1212.52 1731.36,1212.52 1731.94,1212.52 1732.53,1212.52 1733.11,1212.52 1733.7,1212.52 1734.29,1212.52 1734.87,1212.52 1735.46,1212.52 1736.05,1212.52 1736.63,1212.52 1737.22,1212.52 1737.81,1212.52 1738.39,1212.52 1738.98,1212.52 1739.57,1212.52 1740.15,1212.52 1740.74,1212.52 1741.32,1212.52 1741.91,1212.52 1742.5,1212.52 1743.08,1212.52 1743.67,1212.52 1744.26,1212.52 1744.84,1212.52 1745.43,1212.52 1746.02,1212.52 1746.6,1212.52 1747.19,1212.52 1747.78,1212.52 1748.36,1212.52 1748.95,1212.52 1749.53,1212.52 1750.12,1212.52 1750.71,1212.52 1751.29,1212.52 1751.88,1212.52 1752.47,1212.52 1753.05,1212.52 1753.64,1212.52 1754.23,1212.52 1754.81,1212.52 1755.4,1212.52 1755.99,1212.52 1756.57,1212.52 1757.16,1212.52 1757.74,1212.52 1758.33,1212.52 1758.92,1212.52 1759.5,1212.52 1760.09,1212.52 1760.68,1212.52 1761.26,1212.52 1761.85,1212.52 1762.44,1212.52 1763.02,1212.52 1763.61,1212.52 1764.19,1212.52 1764.78,1212.52 1765.37,1212.52 1765.95,1212.52 1766.54,1212.52 1767.13,1212.52 1767.71,1212.52 1768.3,1212.52 1768.89,1212.52 1769.47,1212.52 1770.06,1212.52 1770.65,1212.52 1771.23,1212.52 1771.82,1212.52 1772.4,1212.52 1772.99,1212.52 1773.58,1212.52 1774.16,1212.52 1774.75,1212.52 1775.34,1212.52 1775.92,1212.52 1776.51,1212.52 1777.1,1212.52 1777.68,1212.52 1778.27,1212.52 1778.86,1212.52 1779.44,1212.52 1780.03,1212.52 1780.61,1212.52 1781.2,1212.52 1781.79,1212.52 1782.37,1212.52 1782.96,1212.52 1783.55,1212.52 1784.13,1212.52 1784.72,1212.52 1785.31,1212.52 1785.89,1212.52 1786.48,1212.52 1787.06,1212.52 1787.65,1212.52 1788.24,1212.52 1788.82,1212.52 1789.41,1212.52 1790,1212.52 1790.58,1212.52 1791.17,1212.52 1791.76,1212.52 1792.34,1212.52 1792.93,1212.52 1793.52,1212.52 1794.1,1212.52 1794.69,1212.52 1795.27,1212.52 1795.86,1212.52 1796.45,1212.52 1797.03,1212.52 1797.62,1212.52 1798.21,1212.52 1798.79,1212.52 1799.38,1212.52 1799.97,1212.52 1800.55,1212.52 1801.14,1212.52 1801.73,1212.52 1802.31,1212.52 1802.9,1212.52 1803.48,1212.52 1804.07,1212.52 1804.66,1212.52 1805.24,1212.52 1805.83,1212.52 1806.42,1212.52 1807,1212.52 1807.59,1212.52 1808.18,1212.52 1808.76,1212.52 1809.35,1212.52 1809.94,1212.52 1810.52,1212.52 1811.11,1212.52 1811.69,1212.52 1812.28,1212.52 1812.87,1212.52 1813.45,1212.52 1814.04,1212.52 1814.63,1212.52 1815.21,1212.52 1815.8,1212.52 1816.39,1212.52 1816.97,1212.52 1817.56,1212.52 1818.14,1212.52 1818.73,1212.52 1819.32,1212.52 1819.9,1212.52 1820.49,1212.52 1821.08,1212.52 1821.66,1212.52 1822.25,1212.52 1822.84,1212.52 1823.42,1212.52 1824.01,1212.52 1824.6,1212.52 1825.18,1212.52 1825.77,1212.52 1826.35,1212.52 1826.94,1212.52 1827.53,1212.52 1828.11,1212.52 1828.7,1212.52 1829.29,1212.52 1829.87,1212.52 1830.46,1212.52 1831.05,1212.52 1831.63,1212.52 1832.22,1212.52 1832.81,1212.52 1833.39,1212.52 1833.98,1212.52 1834.56,1212.52 1835.15,1212.52 1835.74,1212.52 1836.32,1212.52 1836.91,1212.52 1837.5,1212.52 1838.08,1212.52 1838.67,1212.52 1839.26,1212.52 1839.84,1212.52 1840.43,1212.52 1841.01,1212.52 1841.6,1212.52 1842.19,1212.52 1842.77,1212.52 1843.36,1212.52 1843.95,1212.52 1844.53,1212.52 1845.12,1212.52 1845.71,1212.52 1846.29,1212.52 1846.88,1212.52 1847.47,1212.52 1848.05,1212.52 1848.64,1212.52 1849.22,1212.52 1849.81,1212.52 1850.4,1212.52 1850.98,1212.52 1851.57,1212.52 1852.16,1212.52 1852.74,1212.52 1853.33,1212.52 1853.92,1212.52 1854.5,1212.52 1855.09,1212.52 1855.68,1212.52 1856.26,1212.52 1856.85,1212.52 1857.43,1212.52 1858.02,1212.52 1858.61,1212.52 1859.19,1212.52 1859.78,1212.52 1860.37,1212.52 1860.95,1212.52 1861.54,1212.52 1862.13,1212.52 1862.71,1212.52 1863.3,1212.52 1863.88,1212.52 1864.47,1212.52 1865.06,1212.52 1865.64,1212.52 1866.23,1212.52 1866.82,1212.52 1867.4,1212.52 1867.99,1212.52 1868.58,1212.52 1869.16,1212.52 1869.75,1212.52 1870.34,1212.52 1870.92,1212.52 1871.51,1212.52 1872.09,1212.52 1872.68,1212.52 1873.27,1212.52 1873.85,1212.52 1874.44,1212.52 1875.03,1212.52 1875.61,1212.52 1876.2,1212.52 1876.79,1212.52 1877.37,1212.52 1877.96,1212.52 1878.55,1212.52 1879.13,1212.52 1879.72,1212.52 1880.3,1212.52 1880.89,1212.52 1881.48,1212.52 1882.06,1212.52 1882.65,1212.52 1883.24,1212.52 1883.82,1212.52 1884.41,1212.52 1885,1212.52 1885.58,1212.52 1886.17,1212.52 1886.76,1212.52 1887.34,1212.52 1887.93,1212.52 1888.51,1212.52 1889.1,1212.52 1889.69,1212.52 1890.27,1212.52 1890.86,1212.52 1891.45,1212.52 1892.03,1212.52 1892.62,1212.52 1893.21,1212.52 1893.79,1212.52 1894.38,1212.52 1894.96,1212.52 1895.55,1212.52 1896.14,1212.52 1896.72,1212.52 1897.31,1212.52 1897.9,1212.52 1898.48,1212.52 1899.07,1212.52 1899.66,1212.52 1900.24,1212.52 1900.83,1212.52 1901.42,1212.52 1902,1212.52 1902.59,1212.52 1903.17,1212.52 1903.76,1212.52 1904.35,1212.52 1904.93,1212.52 1905.52,1212.52 1906.11,1212.52 1906.69,1212.52 1907.28,1212.52 1907.87,1212.52 1908.45,1212.52 1909.04,1212.52 1909.63,1212.52 1910.21,1212.52 1910.8,1212.52 1911.38,1212.52 1911.97,1212.52 1912.56,1212.52 1913.14,1212.52 1913.73,1212.52 1914.32,1212.52 1914.9,1212.52 1915.49,1212.52 1916.08,1212.52 1916.66,1212.52 1917.25,1212.52 1917.83,1212.52 1918.42,1212.52 1919.01,1212.52 1919.59,1212.52 1920.18,1212.52 1920.77,1212.52 1921.35,1212.52 1921.94,1212.52 1922.53,1212.52 1923.11,1212.52 1923.7,1212.52 1924.29,1212.52 1924.87,1212.52 1925.46,1212.52 1926.04,1212.52 1926.63,1212.52 1927.22,1212.52 1927.8,1212.52 1928.39,1212.52 1928.98,1212.52 1929.56,1212.52 1930.15,1212.52 1930.74,1212.52 1931.32,1212.52 1931.91,1212.52 1932.5,1212.52 1933.08,1212.52 1933.67,1212.52 1934.25,1212.52 1934.84,1212.52 1935.43,1212.52 1936.01,1212.52 1936.6,1212.52 1937.19,1212.52 1937.77,1212.52 1938.36,1212.52 1938.95,1212.52 1939.53,1212.52 1940.12,1212.52 1940.71,1212.52 1941.29,1212.52 1941.88,1212.52 1942.46,1212.52 1943.05,1212.52 1943.64,1212.52 1944.22,1212.52 1944.81,1212.52 1945.4,1212.52 1945.98,1212.52 1946.57,1212.52 1947.16,1212.52 1947.74,1212.52 1948.33,1212.52 1948.91,1212.52 1949.5,1212.52 1950.09,1212.52 1950.67,1212.52 1951.26,1212.52 1951.85,1212.52 1952.43,1212.52 1953.02,1212.52 1953.61,1212.52 1954.19,1212.52 1954.78,1212.52 1955.37,1212.52 1955.95,1212.52 1956.54,1212.52 1957.12,1212.52 1957.71,1212.52 1958.3,1212.52 1958.88,1212.52 1959.47,1212.52 1960.06,1212.52 1960.64,1212.52 1961.23,1212.52 1961.82,1212.52 1962.4,1212.52 1962.99,1212.52 1963.58,1212.52 1964.16,1212.52 1964.75,1212.52 1965.33,1212.52 1965.92,1212.52 1966.51,1212.52 1967.09,1212.52 1967.68,1212.52 1968.27,1212.52 1968.85,1212.52 1969.44,1212.52 1970.03,1212.52 1970.61,1212.52 1971.2,1212.52 1971.78,1212.52 1972.37,1212.52 1972.96,1212.52 1973.54,1212.52 1974.13,1212.52 1974.72,1212.52 1975.3,1212.52 1975.89,1212.52 1976.48,1212.52 1977.06,1212.52 1977.65,1212.52 1978.24,1212.52 1978.82,1212.52 1979.41,1212.52 1979.99,1212.52 1980.58,1212.52 1981.17,1212.52 1981.75,1212.52 1982.34,1212.52 1982.93,1212.52 1983.51,1212.52 1984.1,1212.52 1984.69,1212.52 1985.27,1212.52 1985.86,1212.52 1986.45,1212.52 1987.03,1212.52 1987.62,1212.52 1988.2,1212.52 1988.79,1212.52 1989.38,1212.52 1989.96,1212.52 1990.55,1212.52 1991.14,1212.52 1991.72,1212.52 1992.31,1212.52 1992.9,1212.52 1993.48,1212.52 1994.07,1212.52 1994.65,1212.52 1995.24,1212.52 1995.83,1212.52 1996.41,1212.52 1997,1212.52 1997.59,1212.52 1998.17,1212.52 1998.76,1212.52 1999.35,1212.52 1999.93,1212.52 2000.52,1212.52 2001.11,1212.52 2001.69,1212.52 2002.28,1212.52 2002.86,1212.52 2003.45,1212.52 2004.04,1212.52 2004.62,1212.52 2005.21,1212.52 2005.8,1212.52 2006.38,1212.52 2006.97,1212.52 2007.56,1212.52 2008.14,1212.52 2008.73,1212.52 2009.32,1212.52 2009.9,1212.52 2010.49,1212.52 2011.07,1212.52 2011.66,1212.52 2012.25,1212.52 2012.83,1212.52 2013.42,1212.52 2014.01,1212.52 2014.59,1212.52 2015.18,1212.52 2015.77,1212.52 2016.35,1212.52 2016.94,1212.52 2017.53,1212.52 2018.11,1212.52 2018.7,1212.52 2019.28,1212.52 2019.87,1212.52 2020.46,1212.52 2021.04,1212.52 2021.63,1212.52 2022.22,1212.52 2022.8,1212.52 2023.39,1212.52 2023.98,1212.52 2024.56,1212.52 2025.15,1212.52 2025.73,1212.52 2026.32,1212.52 2026.91,1212.52 2027.49,1212.52 2028.08,1212.52 2028.67,1212.52 2029.25,1212.52 2029.84,1212.52 2030.43,1212.52 2031.01,1212.52 2031.6,1212.52 2032.19,1212.52 2032.77,1212.52 2033.36,1212.52 2033.94,1212.52 2034.53,1212.52 2035.12,1212.52 2035.7,1212.52 2036.29,1212.52 2036.88,1212.52 2037.46,1212.52 2038.05,1212.52 2038.64,1212.52 2039.22,1212.52 2039.81,1212.52 2040.4,1212.52 2040.98,1212.52 2041.57,1212.52 2042.15,1212.52 2042.74,1212.52 2043.33,1212.52 2043.91,1212.52 2044.5,1212.52 2045.09,1212.52 2045.67,1212.52 2046.26,1212.52 2046.85,1212.52 2047.43,1212.52 2048.02,1212.52 2048.6,1212.52 2049.19,1212.52 2049.78,1212.52 2050.36,1212.52 2050.95,1212.52 2051.54,1212.52 2052.12,1212.52 2052.71,1212.52 2053.3,1212.52 2053.88,1212.52 2054.47,1212.52 2055.06,1212.52 2055.64,1212.52 2056.23,1212.52 2056.81,1212.52 2057.4,1212.52 2057.99,1212.52 2058.57,1212.52 2059.16,1212.52 2059.75,1212.52 2060.33,1212.52 2060.92,1212.52 2061.51,1212.52 2062.09,1212.52 2062.68,1212.52 2063.27,1212.52 2063.85,1212.52 2064.44,1212.52 2065.02,1212.52 2065.61,1212.52 2066.2,1212.52 2066.78,1212.52 2067.37,1212.52 2067.96,1212.52 2068.54,1212.52 2069.13,1212.52 2069.72,1212.52 2070.3,1212.52 2070.89,1212.52 2071.48,1212.52 2072.06,1212.52 2072.65,1212.52 2073.23,1212.52 2073.82,1212.52 2074.41,1212.52 2074.99,1212.52 2075.58,1212.52 2076.17,1212.52 2076.75,1212.52 2077.34,1212.52 2077.93,1212.52 2078.51,1212.52 2079.1,1212.52 2079.68,1212.52 2080.27,1212.52 2080.86,1212.52 2081.44,1212.52 2082.03,1212.52 2082.62,1212.52 2083.2,1212.52 2083.79,1212.52 2084.38,1212.52 2084.96,1212.52 2085.55,1212.52 2086.14,1212.52 2086.72,1212.52 2087.31,1212.52 2087.89,1212.52 2088.48,1212.52 2089.07,1212.52 2089.65,1212.52 2090.24,1212.52 2090.83,1212.52 2091.41,1212.52 2092,1212.52 2092.59,1212.52 2093.17,1212.52 2093.76,1212.52 2094.35,1212.52 2094.93,1212.52 2095.52,1212.52 2096.1,1212.52 2096.69,1212.52 2097.28,1212.52 2097.86,1212.52 2098.45,1212.52 2099.04,1212.52 2099.62,1212.52 2100.21,1212.52 2100.8,1212.52 2101.38,1212.52 2101.97,1212.52 2102.55,1212.52 2103.14,1212.52 2103.73,1212.52 2104.31,1212.52 2104.9,1212.52 2105.49,1212.52 2106.07,1212.52 2106.66,1212.52 2107.25,1212.52 2107.83,1212.52 2108.42,1212.52 2109.01,1212.52 2109.59,1212.52 2110.18,1212.52 2110.76,1212.52 2111.35,1212.52 2111.94,1212.52 2112.52,1212.52 2113.11,1212.52 2113.7,1212.52 2114.28,1212.52 2114.87,1212.52 2115.46,1212.52 2116.04,1212.52 2116.63,1212.52 2117.22,1212.52 2117.8,1212.52 2118.39,1212.52 2118.97,1212.52 2119.56,1212.52 2120.15,1212.52 2120.73,1212.52 2121.32,1212.52 2121.91,1212.52 2122.49,1212.52 2123.08,1212.52 2123.67,1212.52 2124.25,1212.52 2124.84,1212.52 2125.42,1212.52 2126.01,1212.52 2126.6,1212.52 2127.18,1212.52 2127.77,1212.52 2128.36,1212.52 2128.94,1212.52 2129.53,1212.52 2130.12,1212.52 2130.7,1212.52 2131.29,1212.52 2131.88,1212.52 2132.46,1212.52 2133.05,1212.52 2133.63,1212.52 2134.22,1212.52 2134.81,1212.52 2135.39,1212.52 2135.98,1212.52 2136.57,1212.52 2137.15,1212.52 2137.74,1212.52 2138.33,1212.52 2138.91,1212.52 2139.5,1212.52 2140.09,1212.52 2140.67,1212.52 2141.26,1212.52 2141.84,1212.52 2142.43,1212.52 2143.02,1212.52 2143.6,1212.52 2144.19,1212.52 2144.78,1212.52 2145.36,1212.52 2145.95,1212.52 2146.54,1212.52 2147.12,1212.52 2147.71,1212.52 2148.3,1212.52 2148.88,1212.52 2149.47,1212.52 2150.05,1212.52 2150.64,1212.52 2151.23,1212.52 2151.81,1212.52 2152.4,1212.52 2152.99,1212.52 2153.57,1212.52 2154.16,1212.52 2154.75,1212.52 2155.33,1212.52 2155.92,1212.52 2156.5,1212.52 2157.09,1212.52 2157.68,1212.52 2158.26,1212.52 \"/>\n<polyline clip-path=\"url(#clip982)\" style=\"stroke:#d3d3d3; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"1562.59,1195.48 1399.3,899.083 \"/>\n<polyline clip-path=\"url(#clip982)\" style=\"stroke:#d3d3d3; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"985.439,1229.11 985.439,1195.48 2158.26,1195.48 2158.26,1229.11 985.439,1229.11 \"/>\n<path clip-path=\"url(#clip980)\" d=\"M1564.14 432.752 L2148.88 432.752 L2148.88 225.392 L1564.14 225.392  Z\" fill=\"#ffffff\" fill-rule=\"evenodd\" fill-opacity=\"1\"/>\n<polyline clip-path=\"url(#clip980)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"1564.14,432.752 2148.88,432.752 2148.88,225.392 1564.14,225.392 1564.14,432.752 \"/>\n<polyline clip-path=\"url(#clip980)\" style=\"stroke:#009af9; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"1584.85,277.232 1709.13,277.232 \"/>\n<path clip-path=\"url(#clip980)\" d=\"M1748.27 269.35 L1748.27 273.378 Q1746.46 272.452 1744.52 271.989 Q1742.57 271.526 1740.49 271.526 Q1737.32 271.526 1735.72 272.498 Q1734.15 273.471 1734.15 275.415 Q1734.15 276.896 1735.28 277.753 Q1736.41 278.586 1739.84 279.35 L1741.3 279.674 Q1745.84 280.646 1747.73 282.429 Q1749.66 284.188 1749.66 287.359 Q1749.66 290.97 1746.78 293.077 Q1743.94 295.183 1738.94 295.183 Q1736.85 295.183 1734.59 294.767 Q1732.34 294.373 1729.84 293.563 L1729.84 289.165 Q1732.2 290.392 1734.49 291.017 Q1736.78 291.619 1739.03 291.619 Q1742.04 291.619 1743.66 290.6 Q1745.28 289.558 1745.28 287.683 Q1745.28 285.947 1744.1 285.021 Q1742.94 284.095 1738.98 283.239 L1737.5 282.892 Q1733.54 282.058 1731.78 280.345 Q1730.03 278.609 1730.03 275.6 Q1730.03 271.943 1732.62 269.952 Q1735.21 267.961 1739.98 267.961 Q1742.34 267.961 1744.42 268.309 Q1746.51 268.656 1748.27 269.35 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip980)\" d=\"M1777.99 278.864 L1777.99 294.512 L1773.73 294.512 L1773.73 279.003 Q1773.73 275.322 1772.29 273.494 Q1770.86 271.665 1767.99 271.665 Q1764.54 271.665 1762.55 273.864 Q1760.56 276.063 1760.56 279.859 L1760.56 294.512 L1756.28 294.512 L1756.28 258.494 L1760.56 258.494 L1760.56 272.614 Q1762.09 270.276 1764.15 269.119 Q1766.23 267.961 1768.94 267.961 Q1773.4 267.961 1775.7 270.739 Q1777.99 273.494 1777.99 278.864 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip980)\" d=\"M1786.48 268.586 L1790.74 268.586 L1790.74 294.512 L1786.48 294.512 L1786.48 268.586 M1786.48 258.494 L1790.74 258.494 L1790.74 263.887 L1786.48 263.887 L1786.48 258.494 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip980)\" d=\"M1812.78 258.494 L1812.78 262.035 L1808.71 262.035 Q1806.41 262.035 1805.51 262.961 Q1804.63 263.887 1804.63 266.295 L1804.63 268.586 L1811.65 268.586 L1811.65 271.896 L1804.63 271.896 L1804.63 294.512 L1800.35 294.512 L1800.35 271.896 L1796.28 271.896 L1796.28 268.586 L1800.35 268.586 L1800.35 266.781 Q1800.35 262.452 1802.36 260.484 Q1804.38 258.494 1808.75 258.494 L1812.78 258.494 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip980)\" d=\"M1819.72 261.225 L1819.72 268.586 L1828.5 268.586 L1828.5 271.896 L1819.72 271.896 L1819.72 285.97 Q1819.72 289.142 1820.58 290.045 Q1821.46 290.947 1824.12 290.947 L1828.5 290.947 L1828.5 294.512 L1824.12 294.512 Q1819.19 294.512 1817.32 292.683 Q1815.44 290.832 1815.44 285.97 L1815.44 271.896 L1812.32 271.896 L1812.32 268.586 L1815.44 268.586 L1815.44 261.225 L1819.72 261.225 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><polyline clip-path=\"url(#clip980)\" style=\"stroke:#e26f46; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"1584.85,329.072 1709.13,329.072 \"/>\n<path clip-path=\"url(#clip980)\" d=\"M1748.27 321.19 L1748.27 325.218 Q1746.46 324.292 1744.52 323.829 Q1742.57 323.366 1740.49 323.366 Q1737.32 323.366 1735.72 324.338 Q1734.15 325.311 1734.15 327.255 Q1734.15 328.736 1735.28 329.593 Q1736.41 330.426 1739.84 331.19 L1741.3 331.514 Q1745.84 332.486 1747.73 334.269 Q1749.66 336.028 1749.66 339.199 Q1749.66 342.81 1746.78 344.917 Q1743.94 347.023 1738.94 347.023 Q1736.85 347.023 1734.59 346.607 Q1732.34 346.213 1729.84 345.403 L1729.84 341.005 Q1732.2 342.232 1734.49 342.857 Q1736.78 343.459 1739.03 343.459 Q1742.04 343.459 1743.66 342.44 Q1745.28 341.398 1745.28 339.523 Q1745.28 337.787 1744.1 336.861 Q1742.94 335.935 1738.98 335.079 L1737.5 334.732 Q1733.54 333.898 1731.78 332.185 Q1730.03 330.449 1730.03 327.44 Q1730.03 323.783 1732.62 321.792 Q1735.21 319.801 1739.98 319.801 Q1742.34 319.801 1744.42 320.149 Q1746.51 320.496 1748.27 321.19 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip980)\" d=\"M1777.99 330.704 L1777.99 346.352 L1773.73 346.352 L1773.73 330.843 Q1773.73 327.162 1772.29 325.334 Q1770.86 323.505 1767.99 323.505 Q1764.54 323.505 1762.55 325.704 Q1760.56 327.903 1760.56 331.699 L1760.56 346.352 L1756.28 346.352 L1756.28 310.334 L1760.56 310.334 L1760.56 324.454 Q1762.09 322.116 1764.15 320.959 Q1766.23 319.801 1768.94 319.801 Q1773.4 319.801 1775.7 322.579 Q1777.99 325.334 1777.99 330.704 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip980)\" d=\"M1786.48 320.426 L1790.74 320.426 L1790.74 346.352 L1786.48 346.352 L1786.48 320.426 M1786.48 310.334 L1790.74 310.334 L1790.74 315.727 L1786.48 315.727 L1786.48 310.334 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip980)\" d=\"M1812.78 310.334 L1812.78 313.875 L1808.71 313.875 Q1806.41 313.875 1805.51 314.801 Q1804.63 315.727 1804.63 318.135 L1804.63 320.426 L1811.65 320.426 L1811.65 323.736 L1804.63 323.736 L1804.63 346.352 L1800.35 346.352 L1800.35 323.736 L1796.28 323.736 L1796.28 320.426 L1800.35 320.426 L1800.35 318.621 Q1800.35 314.292 1802.36 312.324 Q1804.38 310.334 1808.75 310.334 L1812.78 310.334 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip980)\" d=\"M1819.72 313.065 L1819.72 320.426 L1828.5 320.426 L1828.5 323.736 L1819.72 323.736 L1819.72 337.81 Q1819.72 340.982 1820.58 341.885 Q1821.46 342.787 1824.12 342.787 L1828.5 342.787 L1828.5 346.352 L1824.12 346.352 Q1819.19 346.352 1817.32 344.523 Q1815.44 342.672 1815.44 337.81 L1815.44 323.736 L1812.32 323.736 L1812.32 320.426 L1815.44 320.426 L1815.44 313.065 L1819.72 313.065 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip980)\" d=\"M1869.35 325.403 Q1870.95 322.533 1873.17 321.167 Q1875.4 319.801 1878.4 319.801 Q1882.46 319.801 1884.65 322.649 Q1886.85 325.473 1886.85 330.704 L1886.85 346.352 L1882.57 346.352 L1882.57 330.843 Q1882.57 327.116 1881.25 325.311 Q1879.93 323.505 1877.22 323.505 Q1873.91 323.505 1871.99 325.704 Q1870.07 327.903 1870.07 331.699 L1870.07 346.352 L1865.79 346.352 L1865.79 330.843 Q1865.79 327.093 1864.47 325.311 Q1863.15 323.505 1860.4 323.505 Q1857.13 323.505 1855.21 325.727 Q1853.29 327.926 1853.29 331.699 L1853.29 346.352 L1849.01 346.352 L1849.01 320.426 L1853.29 320.426 L1853.29 324.454 Q1854.75 322.07 1856.78 320.936 Q1858.82 319.801 1861.62 319.801 Q1864.45 319.801 1866.41 321.236 Q1868.4 322.672 1869.35 325.403 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip980)\" d=\"M1917.52 332.324 L1917.52 334.408 L1897.94 334.408 Q1898.22 338.806 1900.58 341.121 Q1902.96 343.412 1907.2 343.412 Q1909.65 343.412 1911.95 342.81 Q1914.26 342.209 1916.53 341.005 L1916.53 345.033 Q1914.24 346.005 1911.83 346.514 Q1909.42 347.023 1906.95 347.023 Q1900.74 347.023 1897.11 343.412 Q1893.5 339.801 1893.5 333.644 Q1893.5 327.278 1896.92 323.551 Q1900.37 319.801 1906.21 319.801 Q1911.44 319.801 1914.47 323.181 Q1917.52 326.537 1917.52 332.324 M1913.27 331.074 Q1913.22 327.579 1911.3 325.496 Q1909.4 323.412 1906.25 323.412 Q1902.69 323.412 1900.53 325.426 Q1898.4 327.44 1898.08 331.098 L1913.27 331.074 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip980)\" d=\"M1936.3 333.32 Q1931.14 333.32 1929.14 334.5 Q1927.15 335.681 1927.15 338.528 Q1927.15 340.797 1928.64 342.139 Q1930.14 343.459 1932.71 343.459 Q1936.25 343.459 1938.38 340.959 Q1940.53 338.435 1940.53 334.269 L1940.53 333.32 L1936.3 333.32 M1944.79 331.56 L1944.79 346.352 L1940.53 346.352 L1940.53 342.417 Q1939.08 344.778 1936.9 345.912 Q1934.72 347.023 1931.58 347.023 Q1927.59 347.023 1925.23 344.801 Q1922.89 342.556 1922.89 338.806 Q1922.89 334.431 1925.81 332.209 Q1928.75 329.986 1934.56 329.986 L1940.53 329.986 L1940.53 329.57 Q1940.53 326.63 1938.59 325.033 Q1936.67 323.412 1933.17 323.412 Q1930.95 323.412 1928.84 323.945 Q1926.74 324.477 1924.79 325.542 L1924.79 321.607 Q1927.13 320.704 1929.33 320.264 Q1931.53 319.801 1933.61 319.801 Q1939.24 319.801 1942.02 322.718 Q1944.79 325.635 1944.79 331.56 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip980)\" d=\"M1975.12 330.704 L1975.12 346.352 L1970.86 346.352 L1970.86 330.843 Q1970.86 327.162 1969.42 325.334 Q1967.99 323.505 1965.12 323.505 Q1961.67 323.505 1959.68 325.704 Q1957.69 327.903 1957.69 331.699 L1957.69 346.352 L1953.4 346.352 L1953.4 320.426 L1957.69 320.426 L1957.69 324.454 Q1959.21 322.116 1961.27 320.959 Q1963.36 319.801 1966.07 319.801 Q1970.53 319.801 1972.83 322.579 Q1975.12 325.334 1975.12 330.704 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><polyline clip-path=\"url(#clip980)\" style=\"stroke:#3da44d; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"1584.85,380.912 1709.13,380.912 \"/>\n<path clip-path=\"url(#clip980)\" d=\"M1734.12 394.303 L1734.12 408.053 L1729.84 408.053 L1729.84 372.266 L1734.12 372.266 L1734.12 376.201 Q1735.47 373.887 1737.5 372.776 Q1739.56 371.641 1742.41 371.641 Q1747.13 371.641 1750.07 375.391 Q1753.03 379.141 1753.03 385.252 Q1753.03 391.363 1750.07 395.113 Q1747.13 398.863 1742.41 398.863 Q1739.56 398.863 1737.5 397.752 Q1735.47 396.618 1734.12 394.303 M1748.61 385.252 Q1748.61 380.553 1746.67 377.891 Q1744.75 375.206 1741.37 375.206 Q1737.99 375.206 1736.04 377.891 Q1734.12 380.553 1734.12 385.252 Q1734.12 389.951 1736.04 392.637 Q1737.99 395.299 1741.37 395.299 Q1744.75 395.299 1746.67 392.637 Q1748.61 389.951 1748.61 385.252 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip980)\" d=\"M1775.12 376.248 Q1774.4 375.831 1773.54 375.646 Q1772.71 375.438 1771.69 375.438 Q1768.08 375.438 1766.14 377.799 Q1764.22 380.137 1764.22 384.535 L1764.22 398.192 L1759.93 398.192 L1759.93 372.266 L1764.22 372.266 L1764.22 376.294 Q1765.56 373.933 1767.71 372.799 Q1769.86 371.641 1772.94 371.641 Q1773.38 371.641 1773.91 371.711 Q1774.45 371.757 1775.09 371.873 L1775.12 376.248 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip980)\" d=\"M1788.59 375.252 Q1785.16 375.252 1783.17 377.938 Q1781.18 380.6 1781.18 385.252 Q1781.18 389.905 1783.15 392.59 Q1785.14 395.252 1788.59 395.252 Q1791.99 395.252 1793.98 392.567 Q1795.97 389.882 1795.97 385.252 Q1795.97 380.646 1793.98 377.961 Q1791.99 375.252 1788.59 375.252 M1788.59 371.641 Q1794.15 371.641 1797.32 375.252 Q1800.49 378.863 1800.49 385.252 Q1800.49 391.618 1797.32 395.252 Q1794.15 398.863 1788.59 398.863 Q1783.01 398.863 1779.84 395.252 Q1776.69 391.618 1776.69 385.252 Q1776.69 378.863 1779.84 375.252 Q1783.01 371.641 1788.59 371.641 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip980)\" d=\"M1807.55 372.266 L1811.81 372.266 L1811.81 398.655 Q1811.81 403.609 1809.91 405.831 Q1808.03 408.053 1803.84 408.053 L1802.22 408.053 L1802.22 404.442 L1803.36 404.442 Q1805.79 404.442 1806.67 403.308 Q1807.55 402.197 1807.55 398.655 L1807.55 372.266 M1807.55 362.174 L1811.81 362.174 L1811.81 367.567 L1807.55 367.567 L1807.55 362.174 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip980)\" d=\"M1842.9 384.164 L1842.9 386.248 L1823.31 386.248 Q1823.59 390.646 1825.95 392.961 Q1828.34 395.252 1832.57 395.252 Q1835.03 395.252 1837.32 394.65 Q1839.63 394.049 1841.9 392.845 L1841.9 396.873 Q1839.61 397.845 1837.2 398.354 Q1834.79 398.863 1832.32 398.863 Q1826.11 398.863 1822.48 395.252 Q1818.87 391.641 1818.87 385.484 Q1818.87 379.118 1822.29 375.391 Q1825.74 371.641 1831.58 371.641 Q1836.81 371.641 1839.84 375.021 Q1842.9 378.377 1842.9 384.164 M1838.64 382.914 Q1838.59 379.419 1836.67 377.336 Q1834.77 375.252 1831.62 375.252 Q1828.06 375.252 1825.9 377.266 Q1823.78 379.28 1823.45 382.938 L1838.64 382.914 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip980)\" d=\"M1868.54 373.262 L1868.54 377.243 Q1866.74 376.248 1864.91 375.762 Q1863.1 375.252 1861.25 375.252 Q1857.11 375.252 1854.82 377.891 Q1852.52 380.507 1852.52 385.252 Q1852.52 389.998 1854.82 392.637 Q1857.11 395.252 1861.25 395.252 Q1863.1 395.252 1864.91 394.766 Q1866.74 394.257 1868.54 393.262 L1868.54 397.197 Q1866.76 398.03 1864.84 398.447 Q1862.94 398.863 1860.79 398.863 Q1854.93 398.863 1851.48 395.183 Q1848.03 391.502 1848.03 385.252 Q1848.03 378.91 1851.51 375.276 Q1855 371.641 1861.07 371.641 Q1863.03 371.641 1864.91 372.058 Q1866.78 372.451 1868.54 373.262 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip980)\" d=\"M1880.16 364.905 L1880.16 372.266 L1888.94 372.266 L1888.94 375.576 L1880.16 375.576 L1880.16 389.65 Q1880.16 392.822 1881.02 393.725 Q1881.9 394.627 1884.56 394.627 L1888.94 394.627 L1888.94 398.192 L1884.56 398.192 Q1879.63 398.192 1877.76 396.363 Q1875.88 394.512 1875.88 389.65 L1875.88 375.576 L1872.76 375.576 L1872.76 372.266 L1875.88 372.266 L1875.88 364.905 L1880.16 364.905 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip980)\" d=\"M1916.71 384.164 L1916.71 386.248 L1897.13 386.248 Q1897.41 390.646 1899.77 392.961 Q1902.15 395.252 1906.39 395.252 Q1908.84 395.252 1911.14 394.65 Q1913.45 394.049 1915.72 392.845 L1915.72 396.873 Q1913.43 397.845 1911.02 398.354 Q1908.61 398.863 1906.14 398.863 Q1899.93 398.863 1896.3 395.252 Q1892.69 391.641 1892.69 385.484 Q1892.69 379.118 1896.11 375.391 Q1899.56 371.641 1905.4 371.641 Q1910.63 371.641 1913.66 375.021 Q1916.71 378.377 1916.71 384.164 M1912.46 382.914 Q1912.41 379.419 1910.49 377.336 Q1908.59 375.252 1905.44 375.252 Q1901.88 375.252 1899.72 377.266 Q1897.59 379.28 1897.27 382.938 L1912.46 382.914 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip980)\" d=\"M1940.77 376.201 L1940.77 362.174 L1945.02 362.174 L1945.02 398.192 L1940.77 398.192 L1940.77 394.303 Q1939.42 396.618 1937.36 397.752 Q1935.33 398.863 1932.46 398.863 Q1927.76 398.863 1924.79 395.113 Q1921.85 391.363 1921.85 385.252 Q1921.85 379.141 1924.79 375.391 Q1927.76 371.641 1932.46 371.641 Q1935.33 371.641 1937.36 372.776 Q1939.42 373.887 1940.77 376.201 M1926.25 385.252 Q1926.25 389.951 1928.17 392.637 Q1930.12 395.299 1933.5 395.299 Q1936.88 395.299 1938.82 392.637 Q1940.77 389.951 1940.77 385.252 Q1940.77 380.553 1938.82 377.891 Q1936.88 375.206 1933.5 375.206 Q1930.12 375.206 1928.17 377.891 Q1926.25 380.553 1926.25 385.252 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip980)\" d=\"M1991.04 384.164 L1991.04 386.248 L1971.46 386.248 Q1971.74 390.646 1974.1 392.961 Q1976.48 395.252 1980.72 395.252 Q1983.17 395.252 1985.46 394.65 Q1987.78 394.049 1990.05 392.845 L1990.05 396.873 Q1987.76 397.845 1985.35 398.354 Q1982.94 398.863 1980.46 398.863 Q1974.26 398.863 1970.63 395.252 Q1967.02 391.641 1967.02 385.484 Q1967.02 379.118 1970.44 375.391 Q1973.89 371.641 1979.72 371.641 Q1984.95 371.641 1987.99 375.021 Q1991.04 378.377 1991.04 384.164 M1986.78 382.914 Q1986.74 379.419 1984.82 377.336 Q1982.92 375.252 1979.77 375.252 Q1976.2 375.252 1974.05 377.266 Q1971.92 379.28 1971.6 382.938 L1986.78 382.914 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip980)\" d=\"M2019.58 382.544 L2019.58 398.192 L2015.32 398.192 L2015.32 382.683 Q2015.32 379.002 2013.89 377.174 Q2012.45 375.345 2009.58 375.345 Q2006.14 375.345 2004.14 377.544 Q2002.15 379.743 2002.15 383.539 L2002.15 398.192 L1997.87 398.192 L1997.87 372.266 L2002.15 372.266 L2002.15 376.294 Q2003.68 373.956 2005.74 372.799 Q2007.83 371.641 2010.53 371.641 Q2015 371.641 2017.29 374.419 Q2019.58 377.174 2019.58 382.544 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip980)\" d=\"M2050.26 384.164 L2050.26 386.248 L2030.67 386.248 Q2030.95 390.646 2033.31 392.961 Q2035.7 395.252 2039.93 395.252 Q2042.39 395.252 2044.68 394.65 Q2046.99 394.049 2049.26 392.845 L2049.26 396.873 Q2046.97 397.845 2044.56 398.354 Q2042.15 398.863 2039.68 398.863 Q2033.47 398.863 2029.84 395.252 Q2026.23 391.641 2026.23 385.484 Q2026.23 379.118 2029.65 375.391 Q2033.1 371.641 2038.94 371.641 Q2044.17 371.641 2047.2 375.021 Q2050.26 378.377 2050.26 384.164 M2046 382.914 Q2045.95 379.419 2044.03 377.336 Q2042.13 375.252 2038.98 375.252 Q2035.42 375.252 2033.26 377.266 Q2031.14 379.28 2030.81 382.938 L2046 382.914 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip980)\" d=\"M2072.27 376.248 Q2071.55 375.831 2070.7 375.646 Q2069.86 375.438 2068.84 375.438 Q2065.23 375.438 2063.29 377.799 Q2061.37 380.137 2061.37 384.535 L2061.37 398.192 L2057.08 398.192 L2057.08 372.266 L2061.37 372.266 L2061.37 376.294 Q2062.71 373.933 2064.86 372.799 Q2067.01 371.641 2070.09 371.641 Q2070.53 371.641 2071.07 371.711 Q2071.6 371.757 2072.25 371.873 L2072.27 376.248 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip980)\" d=\"M2092.96 384.928 Q2092.96 380.299 2091.04 377.752 Q2089.14 375.206 2085.69 375.206 Q2082.27 375.206 2080.35 377.752 Q2078.45 380.299 2078.45 384.928 Q2078.45 389.535 2080.35 392.081 Q2082.27 394.627 2085.69 394.627 Q2089.14 394.627 2091.04 392.081 Q2092.96 389.535 2092.96 384.928 M2097.22 394.975 Q2097.22 401.595 2094.28 404.812 Q2091.34 408.053 2085.28 408.053 Q2083.03 408.053 2081.04 407.706 Q2079.05 407.382 2077.18 406.687 L2077.18 402.544 Q2079.05 403.562 2080.88 404.049 Q2082.71 404.535 2084.61 404.535 Q2088.8 404.535 2090.88 402.336 Q2092.96 400.16 2092.96 395.738 L2092.96 393.632 Q2091.64 395.924 2089.58 397.058 Q2087.52 398.192 2084.65 398.192 Q2079.88 398.192 2076.97 394.558 Q2074.05 390.924 2074.05 384.928 Q2074.05 378.91 2076.97 375.276 Q2079.88 371.641 2084.65 371.641 Q2087.52 371.641 2089.58 372.776 Q2091.64 373.91 2092.96 376.201 L2092.96 372.266 L2097.22 372.266 L2097.22 394.975 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip980)\" d=\"M2116.78 400.599 Q2114.98 405.229 2113.26 406.641 Q2111.55 408.053 2108.68 408.053 L2105.28 408.053 L2105.28 404.488 L2107.78 404.488 Q2109.54 404.488 2110.51 403.655 Q2111.48 402.822 2112.66 399.72 L2113.43 397.775 L2102.94 372.266 L2107.45 372.266 L2115.56 392.544 L2123.66 372.266 L2128.17 372.266 L2116.78 400.599 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip980)\" d=\"M719.687 899.083 L1838.19 899.083 L1838.19 462.094 L719.687 462.094  Z\" fill=\"#ffffff\" fill-rule=\"evenodd\" fill-opacity=\"1\"/>\n<defs>\n  <clipPath id=\"clip983\">\n    <rect x=\"719\" y=\"462\" width=\"1120\" height=\"438\"/>\n  </clipPath>\n</defs>\n<polyline clip-path=\"url(#clip983)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:2; stroke-opacity:0.1; fill:none\" points=\"719.687,899.083 719.687,462.094 \"/>\n<polyline clip-path=\"url(#clip983)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:2; stroke-opacity:0.1; fill:none\" points=\"999.313,899.083 999.313,462.094 \"/>\n<polyline clip-path=\"url(#clip983)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:2; stroke-opacity:0.1; fill:none\" points=\"1278.94,899.083 1278.94,462.094 \"/>\n<polyline clip-path=\"url(#clip983)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:2; stroke-opacity:0.1; fill:none\" points=\"1558.56,899.083 1558.56,462.094 \"/>\n<polyline clip-path=\"url(#clip983)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:2; stroke-opacity:0.1; fill:none\" points=\"1838.19,899.083 1838.19,462.094 \"/>\n<polyline clip-path=\"url(#clip983)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:2; stroke-opacity:0.1; fill:none\" points=\"719.687,879.22 1838.19,879.22 \"/>\n<polyline clip-path=\"url(#clip983)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:2; stroke-opacity:0.1; fill:none\" points=\"719.687,779.904 1838.19,779.904 \"/>\n<polyline clip-path=\"url(#clip983)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:2; stroke-opacity:0.1; fill:none\" points=\"719.687,680.588 1838.19,680.588 \"/>\n<polyline clip-path=\"url(#clip983)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:2; stroke-opacity:0.1; fill:none\" points=\"719.687,581.273 1838.19,581.273 \"/>\n<polyline clip-path=\"url(#clip983)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:2; stroke-opacity:0.1; fill:none\" points=\"719.687,481.957 1838.19,481.957 \"/>\n<polyline clip-path=\"url(#clip980)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"719.687,899.083 1838.19,899.083 \"/>\n<polyline clip-path=\"url(#clip980)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"719.687,899.083 719.687,880.185 \"/>\n<polyline clip-path=\"url(#clip980)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"999.313,899.083 999.313,880.185 \"/>\n<polyline clip-path=\"url(#clip980)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"1278.94,899.083 1278.94,880.185 \"/>\n<polyline clip-path=\"url(#clip980)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"1558.56,899.083 1558.56,880.185 \"/>\n<polyline clip-path=\"url(#clip980)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"1838.19,899.083 1838.19,880.185 \"/>\n<path clip-path=\"url(#clip980)\" d=\"M664.213 957.547 L671.852 957.547 L671.852 931.182 L663.542 932.849 L663.542 928.589 L671.806 926.923 L676.482 926.923 L676.482 957.547 L684.12 957.547 L684.12 961.483 L664.213 961.483 L664.213 957.547 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip980)\" d=\"M703.565 930.001 Q699.954 930.001 698.125 933.566 Q696.319 937.108 696.319 944.237 Q696.319 951.344 698.125 954.909 Q699.954 958.45 703.565 958.45 Q707.199 958.45 709.005 954.909 Q710.833 951.344 710.833 944.237 Q710.833 937.108 709.005 933.566 Q707.199 930.001 703.565 930.001 M703.565 926.298 Q709.375 926.298 712.43 930.904 Q715.509 935.487 715.509 944.237 Q715.509 952.964 712.43 957.571 Q709.375 962.154 703.565 962.154 Q697.755 962.154 694.676 957.571 Q691.62 952.964 691.62 944.237 Q691.62 935.487 694.676 930.904 Q697.755 926.298 703.565 926.298 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip980)\" d=\"M733.727 930.001 Q730.116 930.001 728.287 933.566 Q726.481 937.108 726.481 944.237 Q726.481 951.344 728.287 954.909 Q730.116 958.45 733.727 958.45 Q737.361 958.45 739.166 954.909 Q740.995 951.344 740.995 944.237 Q740.995 937.108 739.166 933.566 Q737.361 930.001 733.727 930.001 M733.727 926.298 Q739.537 926.298 742.592 930.904 Q745.671 935.487 745.671 944.237 Q745.671 952.964 742.592 957.571 Q739.537 962.154 733.727 962.154 Q727.916 962.154 724.838 957.571 Q721.782 952.964 721.782 944.237 Q721.782 935.487 724.838 930.904 Q727.916 926.298 733.727 926.298 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip980)\" d=\"M763.888 930.001 Q760.277 930.001 758.449 933.566 Q756.643 937.108 756.643 944.237 Q756.643 951.344 758.449 954.909 Q760.277 958.45 763.888 958.45 Q767.523 958.45 769.328 954.909 Q771.157 951.344 771.157 944.237 Q771.157 937.108 769.328 933.566 Q767.523 930.001 763.888 930.001 M763.888 926.298 Q769.699 926.298 772.754 930.904 Q775.833 935.487 775.833 944.237 Q775.833 952.964 772.754 957.571 Q769.699 962.154 763.888 962.154 Q758.078 962.154 755 957.571 Q751.944 952.964 751.944 944.237 Q751.944 935.487 755 930.904 Q758.078 926.298 763.888 926.298 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip980)\" d=\"M943.839 957.547 L951.477 957.547 L951.477 931.182 L943.167 932.849 L943.167 928.589 L951.431 926.923 L956.107 926.923 L956.107 957.547 L963.746 957.547 L963.746 961.483 L943.839 961.483 L943.839 957.547 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip980)\" d=\"M973.237 926.923 L991.593 926.923 L991.593 930.858 L977.519 930.858 L977.519 939.33 Q978.538 938.983 979.556 938.821 Q980.575 938.636 981.593 938.636 Q987.38 938.636 990.76 941.807 Q994.139 944.978 994.139 950.395 Q994.139 955.973 990.667 959.075 Q987.195 962.154 980.875 962.154 Q978.7 962.154 976.431 961.784 Q974.186 961.413 971.778 960.672 L971.778 955.973 Q973.862 957.108 976.084 957.663 Q978.306 958.219 980.783 958.219 Q984.788 958.219 987.125 956.112 Q989.463 954.006 989.463 950.395 Q989.463 946.784 987.125 944.677 Q984.788 942.571 980.783 942.571 Q978.908 942.571 977.033 942.987 Q975.181 943.404 973.237 944.284 L973.237 926.923 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip980)\" d=\"M1013.35 930.001 Q1009.74 930.001 1007.91 933.566 Q1006.11 937.108 1006.11 944.237 Q1006.11 951.344 1007.91 954.909 Q1009.74 958.45 1013.35 958.45 Q1016.99 958.45 1018.79 954.909 Q1020.62 951.344 1020.62 944.237 Q1020.62 937.108 1018.79 933.566 Q1016.99 930.001 1013.35 930.001 M1013.35 926.298 Q1019.16 926.298 1022.22 930.904 Q1025.3 935.487 1025.3 944.237 Q1025.3 952.964 1022.22 957.571 Q1019.16 962.154 1013.35 962.154 Q1007.54 962.154 1004.46 957.571 Q1001.41 952.964 1001.41 944.237 Q1001.41 935.487 1004.46 930.904 Q1007.54 926.298 1013.35 926.298 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip980)\" d=\"M1043.51 930.001 Q1039.9 930.001 1038.07 933.566 Q1036.27 937.108 1036.27 944.237 Q1036.27 951.344 1038.07 954.909 Q1039.9 958.45 1043.51 958.45 Q1047.15 958.45 1048.95 954.909 Q1050.78 951.344 1050.78 944.237 Q1050.78 937.108 1048.95 933.566 Q1047.15 930.001 1043.51 930.001 M1043.51 926.298 Q1049.32 926.298 1052.38 930.904 Q1055.46 935.487 1055.46 944.237 Q1055.46 952.964 1052.38 957.571 Q1049.32 962.154 1043.51 962.154 Q1037.7 962.154 1034.63 957.571 Q1031.57 952.964 1031.57 944.237 Q1031.57 935.487 1034.63 930.904 Q1037.7 926.298 1043.51 926.298 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip980)\" d=\"M1227.55 957.547 L1243.87 957.547 L1243.87 961.483 L1221.92 961.483 L1221.92 957.547 Q1224.59 954.793 1229.17 950.163 Q1233.78 945.511 1234.96 944.168 Q1237.2 941.645 1238.08 939.909 Q1238.98 938.149 1238.98 936.46 Q1238.98 933.705 1237.04 931.969 Q1235.12 930.233 1232.02 930.233 Q1229.82 930.233 1227.36 930.997 Q1224.93 931.761 1222.16 933.312 L1222.16 928.589 Q1224.98 927.455 1227.43 926.876 Q1229.89 926.298 1231.92 926.298 Q1237.3 926.298 1240.49 928.983 Q1243.68 931.668 1243.68 936.159 Q1243.68 938.288 1242.87 940.21 Q1242.09 942.108 1239.98 944.7 Q1239.4 945.372 1236.3 948.589 Q1233.2 951.784 1227.55 957.547 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip980)\" d=\"M1263.68 930.001 Q1260.07 930.001 1258.24 933.566 Q1256.44 937.108 1256.44 944.237 Q1256.44 951.344 1258.24 954.909 Q1260.07 958.45 1263.68 958.45 Q1267.32 958.45 1269.12 954.909 Q1270.95 951.344 1270.95 944.237 Q1270.95 937.108 1269.12 933.566 Q1267.32 930.001 1263.68 930.001 M1263.68 926.298 Q1269.49 926.298 1272.55 930.904 Q1275.63 935.487 1275.63 944.237 Q1275.63 952.964 1272.55 957.571 Q1269.49 962.154 1263.68 962.154 Q1257.87 962.154 1254.8 957.571 Q1251.74 952.964 1251.74 944.237 Q1251.74 935.487 1254.8 930.904 Q1257.87 926.298 1263.68 926.298 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip980)\" d=\"M1293.85 930.001 Q1290.23 930.001 1288.41 933.566 Q1286.6 937.108 1286.6 944.237 Q1286.6 951.344 1288.41 954.909 Q1290.23 958.45 1293.85 958.45 Q1297.48 958.45 1299.29 954.909 Q1301.11 951.344 1301.11 944.237 Q1301.11 937.108 1299.29 933.566 Q1297.48 930.001 1293.85 930.001 M1293.85 926.298 Q1299.66 926.298 1302.71 930.904 Q1305.79 935.487 1305.79 944.237 Q1305.79 952.964 1302.71 957.571 Q1299.66 962.154 1293.85 962.154 Q1288.04 962.154 1284.96 957.571 Q1281.9 952.964 1281.9 944.237 Q1281.9 935.487 1284.96 930.904 Q1288.04 926.298 1293.85 926.298 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip980)\" d=\"M1324.01 930.001 Q1320.4 930.001 1318.57 933.566 Q1316.76 937.108 1316.76 944.237 Q1316.76 951.344 1318.57 954.909 Q1320.4 958.45 1324.01 958.45 Q1327.64 958.45 1329.45 954.909 Q1331.28 951.344 1331.28 944.237 Q1331.28 937.108 1329.45 933.566 Q1327.64 930.001 1324.01 930.001 M1324.01 926.298 Q1329.82 926.298 1332.87 930.904 Q1335.95 935.487 1335.95 944.237 Q1335.95 952.964 1332.87 957.571 Q1329.82 962.154 1324.01 962.154 Q1318.2 962.154 1315.12 957.571 Q1312.06 952.964 1312.06 944.237 Q1312.06 935.487 1315.12 930.904 Q1318.2 926.298 1324.01 926.298 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip980)\" d=\"M1507.18 957.547 L1523.49 957.547 L1523.49 961.483 L1501.55 961.483 L1501.55 957.547 Q1504.21 954.793 1508.8 950.163 Q1513.4 945.511 1514.58 944.168 Q1516.83 941.645 1517.71 939.909 Q1518.61 938.149 1518.61 936.46 Q1518.61 933.705 1516.67 931.969 Q1514.74 930.233 1511.64 930.233 Q1509.44 930.233 1506.99 930.997 Q1504.56 931.761 1501.78 933.312 L1501.78 928.589 Q1504.61 927.455 1507.06 926.876 Q1509.51 926.298 1511.55 926.298 Q1516.92 926.298 1520.12 928.983 Q1523.31 931.668 1523.31 936.159 Q1523.31 938.288 1522.5 940.21 Q1521.71 942.108 1519.61 944.7 Q1519.03 945.372 1515.93 948.589 Q1512.82 951.784 1507.18 957.547 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip980)\" d=\"M1533.36 926.923 L1551.71 926.923 L1551.71 930.858 L1537.64 930.858 L1537.64 939.33 Q1538.66 938.983 1539.68 938.821 Q1540.69 938.636 1541.71 938.636 Q1547.5 938.636 1550.88 941.807 Q1554.26 944.978 1554.26 950.395 Q1554.26 955.973 1550.79 959.075 Q1547.31 962.154 1540.99 962.154 Q1538.82 962.154 1536.55 961.784 Q1534.3 961.413 1531.9 960.672 L1531.9 955.973 Q1533.98 957.108 1536.2 957.663 Q1538.43 958.219 1540.9 958.219 Q1544.91 958.219 1547.24 956.112 Q1549.58 954.006 1549.58 950.395 Q1549.58 946.784 1547.24 944.677 Q1544.91 942.571 1540.9 942.571 Q1539.03 942.571 1537.15 942.987 Q1535.3 943.404 1533.36 944.284 L1533.36 926.923 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip980)\" d=\"M1573.47 930.001 Q1569.86 930.001 1568.03 933.566 Q1566.23 937.108 1566.23 944.237 Q1566.23 951.344 1568.03 954.909 Q1569.86 958.45 1573.47 958.45 Q1577.11 958.45 1578.91 954.909 Q1580.74 951.344 1580.74 944.237 Q1580.74 937.108 1578.91 933.566 Q1577.11 930.001 1573.47 930.001 M1573.47 926.298 Q1579.28 926.298 1582.34 930.904 Q1585.42 935.487 1585.42 944.237 Q1585.42 952.964 1582.34 957.571 Q1579.28 962.154 1573.47 962.154 Q1567.66 962.154 1564.58 957.571 Q1561.53 952.964 1561.53 944.237 Q1561.53 935.487 1564.58 930.904 Q1567.66 926.298 1573.47 926.298 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip980)\" d=\"M1603.63 930.001 Q1600.02 930.001 1598.19 933.566 Q1596.39 937.108 1596.39 944.237 Q1596.39 951.344 1598.19 954.909 Q1600.02 958.45 1603.63 958.45 Q1607.27 958.45 1609.07 954.909 Q1610.9 951.344 1610.9 944.237 Q1610.9 937.108 1609.07 933.566 Q1607.27 930.001 1603.63 930.001 M1603.63 926.298 Q1609.44 926.298 1612.5 930.904 Q1615.58 935.487 1615.58 944.237 Q1615.58 952.964 1612.5 957.571 Q1609.44 962.154 1603.63 962.154 Q1597.82 962.154 1594.74 957.571 Q1591.69 952.964 1591.69 944.237 Q1591.69 935.487 1594.74 930.904 Q1597.82 926.298 1603.63 926.298 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip980)\" d=\"M1796.87 942.848 Q1800.23 943.566 1802.1 945.835 Q1804 948.103 1804 951.436 Q1804 956.552 1800.48 959.353 Q1796.96 962.154 1790.48 962.154 Q1788.31 962.154 1785.99 961.714 Q1783.7 961.297 1781.25 960.441 L1781.25 955.927 Q1783.19 957.061 1785.5 957.64 Q1787.82 958.219 1790.34 958.219 Q1794.74 958.219 1797.03 956.483 Q1799.35 954.747 1799.35 951.436 Q1799.35 948.381 1797.19 946.668 Q1795.06 944.932 1791.25 944.932 L1787.22 944.932 L1787.22 941.089 L1791.43 941.089 Q1794.88 941.089 1796.71 939.724 Q1798.54 938.335 1798.54 935.742 Q1798.54 933.08 1796.64 931.668 Q1794.76 930.233 1791.25 930.233 Q1789.32 930.233 1787.13 930.649 Q1784.93 931.066 1782.29 931.946 L1782.29 927.779 Q1784.95 927.038 1787.26 926.668 Q1789.6 926.298 1791.66 926.298 Q1796.99 926.298 1800.09 928.728 Q1803.19 931.136 1803.19 935.256 Q1803.19 938.126 1801.55 940.117 Q1799.9 942.085 1796.87 942.848 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip980)\" d=\"M1822.87 930.001 Q1819.25 930.001 1817.43 933.566 Q1815.62 937.108 1815.62 944.237 Q1815.62 951.344 1817.43 954.909 Q1819.25 958.45 1822.87 958.45 Q1826.5 958.45 1828.31 954.909 Q1830.13 951.344 1830.13 944.237 Q1830.13 937.108 1828.31 933.566 Q1826.5 930.001 1822.87 930.001 M1822.87 926.298 Q1828.68 926.298 1831.73 930.904 Q1834.81 935.487 1834.81 944.237 Q1834.81 952.964 1831.73 957.571 Q1828.68 962.154 1822.87 962.154 Q1817.06 962.154 1813.98 957.571 Q1810.92 952.964 1810.92 944.237 Q1810.92 935.487 1813.98 930.904 Q1817.06 926.298 1822.87 926.298 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip980)\" d=\"M1853.03 930.001 Q1849.42 930.001 1847.59 933.566 Q1845.78 937.108 1845.78 944.237 Q1845.78 951.344 1847.59 954.909 Q1849.42 958.45 1853.03 958.45 Q1856.66 958.45 1858.47 954.909 Q1860.3 951.344 1860.3 944.237 Q1860.3 937.108 1858.47 933.566 Q1856.66 930.001 1853.03 930.001 M1853.03 926.298 Q1858.84 926.298 1861.89 930.904 Q1864.97 935.487 1864.97 944.237 Q1864.97 952.964 1861.89 957.571 Q1858.84 962.154 1853.03 962.154 Q1847.22 962.154 1844.14 957.571 Q1841.08 952.964 1841.08 944.237 Q1841.08 935.487 1844.14 930.904 Q1847.22 926.298 1853.03 926.298 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip980)\" d=\"M1883.19 930.001 Q1879.58 930.001 1877.75 933.566 Q1875.94 937.108 1875.94 944.237 Q1875.94 951.344 1877.75 954.909 Q1879.58 958.45 1883.19 958.45 Q1886.82 958.45 1888.63 954.909 Q1890.46 951.344 1890.46 944.237 Q1890.46 937.108 1888.63 933.566 Q1886.82 930.001 1883.19 930.001 M1883.19 926.298 Q1889 926.298 1892.06 930.904 Q1895.13 935.487 1895.13 944.237 Q1895.13 952.964 1892.06 957.571 Q1889 962.154 1883.19 962.154 Q1877.38 962.154 1874.3 957.571 Q1871.24 952.964 1871.24 944.237 Q1871.24 935.487 1874.3 930.904 Q1877.38 926.298 1883.19 926.298 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><polyline clip-path=\"url(#clip980)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"719.687,899.083 719.687,462.094 \"/>\n<polyline clip-path=\"url(#clip980)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"719.687,879.22 738.585,879.22 \"/>\n<polyline clip-path=\"url(#clip980)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"719.687,779.904 738.585,779.904 \"/>\n<polyline clip-path=\"url(#clip980)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"719.687,680.588 738.585,680.588 \"/>\n<polyline clip-path=\"url(#clip980)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"719.687,581.273 738.585,581.273 \"/>\n<polyline clip-path=\"url(#clip980)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"719.687,481.957 738.585,481.957 \"/>\n<path clip-path=\"url(#clip980)\" d=\"M576.743 879.671 L606.419 879.671 L606.419 883.606 L576.743 883.606 L576.743 879.671 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip980)\" d=\"M616.558 861.94 L634.914 861.94 L634.914 865.875 L620.84 865.875 L620.84 874.347 Q621.859 874 622.877 873.838 Q623.896 873.652 624.914 873.652 Q630.702 873.652 634.081 876.824 Q637.461 879.995 637.461 885.412 Q637.461 890.99 633.989 894.092 Q630.516 897.171 624.197 897.171 Q622.021 897.171 619.752 896.8 Q617.507 896.43 615.1 895.689 L615.1 890.99 Q617.183 892.125 619.405 892.68 Q621.627 893.236 624.104 893.236 Q628.109 893.236 630.447 891.129 Q632.785 889.023 632.785 885.412 Q632.785 881.801 630.447 879.694 Q628.109 877.588 624.104 877.588 Q622.229 877.588 620.354 878.004 Q618.502 878.421 616.558 879.301 L616.558 861.94 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip980)\" d=\"M646.674 890.62 L651.558 890.62 L651.558 896.5 L646.674 896.5 L646.674 890.62 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip980)\" d=\"M671.743 865.018 Q668.132 865.018 666.303 868.583 Q664.498 872.125 664.498 879.254 Q664.498 886.361 666.303 889.925 Q668.132 893.467 671.743 893.467 Q675.377 893.467 677.183 889.925 Q679.011 886.361 679.011 879.254 Q679.011 872.125 677.183 868.583 Q675.377 865.018 671.743 865.018 M671.743 861.315 Q677.553 861.315 680.609 865.921 Q683.687 870.504 683.687 879.254 Q683.687 887.981 680.609 892.588 Q677.553 897.171 671.743 897.171 Q665.933 897.171 662.854 892.588 Q659.799 887.981 659.799 879.254 Q659.799 870.504 662.854 865.921 Q665.933 861.315 671.743 861.315 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip980)\" d=\"M577.739 780.355 L607.415 780.355 L607.415 784.291 L577.739 784.291 L577.739 780.355 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip980)\" d=\"M630.354 766.698 L618.549 785.147 L630.354 785.147 L630.354 766.698 M629.127 762.624 L635.007 762.624 L635.007 785.147 L639.938 785.147 L639.938 789.036 L635.007 789.036 L635.007 797.184 L630.354 797.184 L630.354 789.036 L614.753 789.036 L614.753 784.522 L629.127 762.624 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip980)\" d=\"M647.669 791.304 L652.553 791.304 L652.553 797.184 L647.669 797.184 L647.669 791.304 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip980)\" d=\"M662.785 762.624 L681.141 762.624 L681.141 766.559 L667.067 766.559 L667.067 775.031 Q668.086 774.684 669.104 774.522 Q670.123 774.337 671.141 774.337 Q676.928 774.337 680.308 777.508 Q683.687 780.679 683.687 786.096 Q683.687 791.675 680.215 794.777 Q676.743 797.855 670.424 797.855 Q668.248 797.855 665.979 797.485 Q663.734 797.115 661.326 796.374 L661.326 791.675 Q663.41 792.809 665.632 793.365 Q667.854 793.92 670.331 793.92 Q674.336 793.92 676.673 791.814 Q679.011 789.707 679.011 786.096 Q679.011 782.485 676.673 780.379 Q674.336 778.272 670.331 778.272 Q668.456 778.272 666.581 778.689 Q664.729 779.105 662.785 779.985 L662.785 762.624 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip980)\" d=\"M576.743 681.04 L606.419 681.04 L606.419 684.975 L576.743 684.975 L576.743 681.04 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip980)\" d=\"M629.359 667.382 L617.553 685.831 L629.359 685.831 L629.359 667.382 M628.132 663.308 L634.012 663.308 L634.012 685.831 L638.942 685.831 L638.942 689.72 L634.012 689.72 L634.012 697.868 L629.359 697.868 L629.359 689.72 L613.757 689.72 L613.757 685.206 L628.132 663.308 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip980)\" d=\"M646.674 691.989 L651.558 691.989 L651.558 697.868 L646.674 697.868 L646.674 691.989 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip980)\" d=\"M671.743 666.387 Q668.132 666.387 666.303 669.952 Q664.498 673.494 664.498 680.623 Q664.498 687.73 666.303 691.294 Q668.132 694.836 671.743 694.836 Q675.377 694.836 677.183 691.294 Q679.011 687.73 679.011 680.623 Q679.011 673.494 677.183 669.952 Q675.377 666.387 671.743 666.387 M671.743 662.683 Q677.553 662.683 680.609 667.29 Q683.687 671.873 683.687 680.623 Q683.687 689.35 680.609 693.956 Q677.553 698.54 671.743 698.54 Q665.933 698.54 662.854 693.956 Q659.799 689.35 659.799 680.623 Q659.799 671.873 662.854 667.29 Q665.933 662.683 671.743 662.683 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip980)\" d=\"M577.739 581.724 L607.415 581.724 L607.415 585.659 L577.739 585.659 L577.739 581.724 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip980)\" d=\"M631.674 579.919 Q635.03 580.636 636.905 582.905 Q638.803 585.173 638.803 588.507 Q638.803 593.622 635.285 596.423 Q631.766 599.224 625.285 599.224 Q623.109 599.224 620.794 598.784 Q618.502 598.368 616.049 597.511 L616.049 592.997 Q617.993 594.132 620.308 594.71 Q622.623 595.289 625.146 595.289 Q629.544 595.289 631.836 593.553 Q634.151 591.817 634.151 588.507 Q634.151 585.451 631.998 583.738 Q629.868 582.002 626.049 582.002 L622.021 582.002 L622.021 578.159 L626.234 578.159 Q629.683 578.159 631.512 576.794 Q633.34 575.405 633.34 572.812 Q633.34 570.15 631.442 568.738 Q629.567 567.303 626.049 567.303 Q624.127 567.303 621.928 567.72 Q619.729 568.136 617.09 569.016 L617.09 564.849 Q619.752 564.109 622.067 563.738 Q624.405 563.368 626.465 563.368 Q631.789 563.368 634.891 565.798 Q637.993 568.206 637.993 572.326 Q637.993 575.196 636.35 577.187 Q634.706 579.155 631.674 579.919 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip980)\" d=\"M647.669 592.673 L652.553 592.673 L652.553 598.553 L647.669 598.553 L647.669 592.673 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip980)\" d=\"M662.785 563.993 L681.141 563.993 L681.141 567.928 L667.067 567.928 L667.067 576.4 Q668.086 576.053 669.104 575.891 Q670.123 575.706 671.141 575.706 Q676.928 575.706 680.308 578.877 Q683.687 582.048 683.687 587.465 Q683.687 593.044 680.215 596.145 Q676.743 599.224 670.424 599.224 Q668.248 599.224 665.979 598.854 Q663.734 598.483 661.326 597.743 L661.326 593.044 Q663.41 594.178 665.632 594.733 Q667.854 595.289 670.331 595.289 Q674.336 595.289 676.673 593.183 Q679.011 591.076 679.011 587.465 Q679.011 583.854 676.673 581.747 Q674.336 579.641 670.331 579.641 Q668.456 579.641 666.581 580.058 Q664.729 580.474 662.785 581.354 L662.785 563.993 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip980)\" d=\"M576.743 482.409 L606.419 482.409 L606.419 486.344 L576.743 486.344 L576.743 482.409 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip980)\" d=\"M630.678 480.603 Q634.035 481.321 635.91 483.589 Q637.808 485.858 637.808 489.191 Q637.808 494.307 634.289 497.108 Q630.771 499.909 624.29 499.909 Q622.114 499.909 619.799 499.469 Q617.507 499.052 615.053 498.196 L615.053 493.682 Q616.998 494.816 619.313 495.395 Q621.627 495.973 624.151 495.973 Q628.549 495.973 630.84 494.237 Q633.155 492.501 633.155 489.191 Q633.155 486.136 631.002 484.423 Q628.873 482.686 625.053 482.686 L621.026 482.686 L621.026 478.844 L625.239 478.844 Q628.688 478.844 630.516 477.478 Q632.345 476.089 632.345 473.497 Q632.345 470.835 630.447 469.423 Q628.572 467.987 625.053 467.987 Q623.132 467.987 620.933 468.404 Q618.734 468.821 616.095 469.7 L616.095 465.534 Q618.757 464.793 621.072 464.423 Q623.41 464.052 625.47 464.052 Q630.794 464.052 633.896 466.483 Q636.998 468.89 636.998 473.011 Q636.998 475.881 635.354 477.872 Q633.711 479.839 630.678 480.603 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip980)\" d=\"M646.674 493.358 L651.558 493.358 L651.558 499.237 L646.674 499.237 L646.674 493.358 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip980)\" d=\"M671.743 467.756 Q668.132 467.756 666.303 471.321 Q664.498 474.862 664.498 481.992 Q664.498 489.098 666.303 492.663 Q668.132 496.205 671.743 496.205 Q675.377 496.205 677.183 492.663 Q679.011 489.098 679.011 481.992 Q679.011 474.862 677.183 471.321 Q675.377 467.756 671.743 467.756 M671.743 464.052 Q677.553 464.052 680.609 468.659 Q683.687 473.242 683.687 481.992 Q683.687 490.719 680.609 495.325 Q677.553 499.909 671.743 499.909 Q665.933 499.909 662.854 495.325 Q659.799 490.719 659.799 481.992 Q659.799 473.242 662.854 468.659 Q665.933 464.052 671.743 464.052 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><polyline clip-path=\"url(#clip983)\" style=\"stroke:#009af9; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"160.995,-1577.5 161.555,-2922.08 162.114,-4155.78 162.673,-2441.17 163.232,-3639.63 163.792,-4737.96 164.351,-5742.81 164.91,-6637.97 165.469,-7477.42 166.029,-8200.11 166.588,-8877.45 167.147,-9488.89 167.706,-10038.7 168.266,-10513.1 168.825,-10952.3 169.384,-11341.1 169.943,-10911.8 170.503,-11263.2 171.062,-11553.1 171.621,-11820.3 172.18,-12030.7 172.74,-12216.6 173.299,-11852.4 173.858,-11518.9 174.417,-11660.2 174.977,-11774.9 175.536,-11856.7 176.095,-11543.6 176.655,-11578.7 177.214,-11592.6 177.773,-10990 178.332,-10980.7 178.892,-10963.1 179.451,-10925.7 180.01,-10634 180.569,-10579.3 181.129,-10516 181.688,-10240.2 182.247,-9966.87 182.806,-9880.53 183.366,-9770.95 183.925,-9667.51 184.484,-9546.99 185.043,-9422.65 185.603,-9288.11 186.162,-9153.31 186.721,-9012.91 187.28,-8527.49 187.84,-8161.66 188.399,-8008.58 188.958,-7658.86 189.517,-7405.46 190.077,-7164.46 190.636,-6764.8 191.195,-6553.25 191.754,-6346.78 192.314,-6144.02 192.873,-5880.35 193.432,-5694.45 193.991,-5392.05 194.551,-5276.59 195.11,-5040.61 195.669,-4872.97 196.228,-4661.04 196.788,-4555.5 197.347,-4453.28 197.906,-4253.02 198.465,-4052.53 199.025,-3859.87 199.584,-3722.61 200.143,-3548.81 200.702,-3420.59 201.262,-3296.32 201.821,-3094.71 202.38,-3024.51 202.939,-2873.36 203.499,-2725.92 204.058,-2620.24 204.617,-2445.18 205.176,-2312.97 205.736,-2224.07 206.295,-2133.11 206.854,-2042.65 207.413,-1952.1 207.973,-1835.84 208.532,-1753.18 209.091,-1637.98 209.65,-1589.71 210.21,-1537.83 210.769,-1453.46 211.328,-1316.11 211.887,-1240.23 212.447,-1165.43 213.006,-1036.99 213.565,-972.072 214.124,-904.977 214.684,-840.186 215.243,-776.559 215.802,-715.746 216.361,-655.613 216.921,-571.751 217.48,-517.271 218.039,-486.843 218.598,-457.016 219.158,-379.848 219.717,-324.294 220.276,-275.471 220.835,-226.151 221.395,-179.635 221.954,-112.522 222.513,-51.8914 223.072,56.4259 223.632,93.291 224.191,148.698 224.75,139.35 225.309,152.828 225.869,187.208 226.428,227.102 226.987,262.023 227.546,319.915 228.106,352.339 228.665,395.28 229.224,401.813 229.783,410.621 230.343,438.685 230.902,486.254 231.461,513.397 232.02,559.252 232.58,563.285 233.139,605.511 233.698,646.749 234.257,670.181 234.817,671.135 235.376,676.807 235.935,702.024 236.494,666.893 237.054,686.717 237.613,746.726 238.172,786.617 238.731,879.097 239.291,910.791 239.85,942.851 240.409,967.71 240.968,960.333 241.528,954.954 242.087,947.078 242.646,1013.79 243.205,1005.69 243.765,1014.89 244.324,1040.83 244.883,1048.36 245.442,1038.63 246.002,1063.55 246.561,1067.99 247.12,1075.42 247.679,1101.35 248.239,1104.04 248.798,1039.42 249.357,1046.4 249.916,1087.49 250.476,1057.12 251.035,1064.45 251.594,1090.56 252.153,1079.45 252.713,1086.13 253.272,1039.34 253.831,1012.12 254.39,1020.39 254.95,1015.91 255.509,1011.75 256.068,1005.55 256.627,1017.37 257.187,1013.26 257.746,1025.88 258.305,1053.99 258.864,1045.28 259.424,1038.65 259.983,1030.19 260.542,1022.67 261.101,1019.48 261.661,1047.18 262.22,1043.47 262.779,1055.16 263.338,1100.16 263.898,1095.23 264.457,1086.63 265.016,1095.26 265.575,1085.47 266.135,1107.43 266.694,1063.21 267.253,1057.46 267.812,1069.34 268.372,1029.95 268.931,1023.64 269.49,1050.98 270.049,1047.22 270.609,1041.34 271.168,1068.05 271.727,1082.96 272.286,1111.86 272.846,1103.08 273.405,1061.73 273.964,1037.67 274.523,1002.17 275.083,1030.83 275.642,1023.82 276.201,1002.54 276.76,964.548 277.32,948.473 277.879,950.039 278.438,913.469 278.997,918.396 279.557,868.244 280.116,890.398 280.675,889.708 281.234,876.271 281.794,916.294 282.353,934.461 282.912,932.417 283.471,985.135 284.031,1015.55 284.59,995.102 285.149,1020.29 285.708,1031.31 286.268,1044.2 286.827,1039.81 287.386,1050.17 287.945,1096.87 288.505,1069.65 289.064,1059.51 289.623,1070.7 290.182,1124.38 290.742,1098.97 291.301,1092.88 291.86,1135.43 292.419,1141.9 292.979,1150.3 293.538,1155.36 294.097,1159.97 294.656,1168.39 295.216,1140.7 295.775,1177.45 296.334,1163.11 296.893,1116.79 297.453,1077.18 298.012,1070.83 298.571,1066.5 299.13,1059.11 299.69,1071.73 300.249,1078.73 300.808,1070.51 301.368,1063.93 301.927,1055.42 302.486,1068.66 303.045,1065.3 303.605,1058.31 304.164,1068.63 304.723,1093.37 305.282,1133.97 305.842,1119.59 306.401,1091.12 306.96,1095.27 307.519,1098.02 308.079,1120.52 308.638,1109.34 309.197,1086.03 309.756,1094.23 310.316,1102.16 310.875,1091.83 311.434,1066.17 311.993,1023.75 312.553,998.578 313.112,1011.8 313.671,988.97 314.23,949.043 314.79,915.284 315.349,897.891 315.908,864.707 316.467,849.636 317.027,882.49 317.586,885.155 318.145,913.811 318.704,891.473 319.264,859.968 319.823,861.794 320.382,862.774 320.941,898.651 321.501,897.435 322.06,900.143 322.619,964.574 323.178,944.544 323.738,942.287 324.297,991.476 324.856,983.591 325.415,959.586 325.975,939.135 326.534,918.863 327.093,901.569 327.652,949.456 328.212,941.954 328.771,941.569 329.33,938.616 329.889,967.927 330.449,981.613 331.008,1021.97 331.567,997.194 332.126,990.202 332.686,982.06 333.245,958.714 333.804,970.517 334.363,965.085 334.923,944.034 335.482,924.928 336.041,923.01 336.6,888.565 337.16,934.659 337.719,932.537 338.278,945.077 338.837,957.116 339.397,950.267 339.956,931.027 340.515,925.678 341.074,939.05 341.634,1016.32 342.193,1009.51 342.752,1003.2 343.311,1008.32 343.871,981.837 344.43,987.017 344.989,1008.75 345.548,1000.52 346.108,993.399 346.667,951.979 347.226,943.946 347.785,938.29 348.345,931.768 348.904,926.153 349.463,904.949 350.022,917.098 350.582,930.533 351.141,923.018 351.7,919.607 352.259,917.051 352.819,947.149 353.378,926.367 353.937,954.997 354.496,935.172 355.056,913.856 355.615,896.033 356.174,877.265 356.733,859.628 357.293,826.34 357.852,828.79 358.411,812.545 358.97,813.414 359.53,826.44 360.089,844.434 360.648,844.435 361.207,843.859 361.767,874.457 362.326,892.332 362.885,904.089 363.444,896.246 364.004,913.014 364.563,952.535 365.122,929.781 365.681,925.16 366.241,921.026 366.8,935.754 367.359,930.211 367.918,943.751 368.478,920.889 369.037,917.66 369.596,961.242 370.155,937.969 370.715,948.93 371.274,939.818 371.833,933.323 372.392,940.342 372.952,978.09 373.511,970.808 374.07,961.104 374.629,969.046 375.189,990.699 375.748,966.132 376.307,957.451 376.866,914.801 377.426,937.746 377.985,915.292 378.544,906.952 379.103,919.264 379.663,896.949 380.222,893.451 380.781,936.276 381.34,928.975 381.9,954.231 382.459,915.524 383.018,908.983 383.577,885.719 384.137,878.866 384.696,826.124 385.255,857.296 385.814,854.127 386.374,869.977 386.933,865.158 387.492,843.069 388.051,837.622 388.611,851.67 389.17,864.452 389.729,843.89 390.288,821.549 390.848,854.661 391.407,835.195 391.966,834.364 392.525,846.098 393.085,877.802 393.644,889.532 394.203,902.549 394.762,895.469 395.322,859.998 395.881,857.589 396.44,851.223 396.999,881.975 397.559,895.667 398.118,888.749 398.677,869.113 399.236,863.165 399.796,862.397 400.355,827.574 400.914,838.528 401.473,836.777 402.033,816.36 402.592,831.412 403.151,827.847 403.71,823.502 404.27,770.381 404.829,772.098 405.388,786.869 405.947,789.678 406.507,788.355 407.066,787.011 407.625,755.068 408.184,744.068 408.744,731.127 409.303,763.572 409.862,764.85 410.421,779.099 410.981,780.082 411.54,745.627 412.099,716.912 412.658,733.095 413.218,719.646 413.777,708.419 414.336,721.357 414.895,707.502 415.455,742.091 416.014,743.962 416.573,758.929 417.132,743.051 417.692,760.107 418.251,760.797 418.81,765.71 419.369,783.64 419.929,768.768 420.488,769.505 421.047,817.765 421.606,814.685 422.166,811.725 422.725,789.59 423.284,801.37 423.843,785.26 424.403,752.305 424.962,783.906 425.521,813.884 426.08,826.004 426.64,823.411 427.199,834.029 427.758,848.249 428.318,840.911 428.877,834.451 429.436,827.036 429.995,855.742 430.555,851.247 431.114,833.144 431.673,814.905 432.232,797.231 432.792,796.43 433.351,762.423 433.91,759.065 434.469,756.641 435.029,770.67 435.588,802.413 436.147,782.14 436.706,793.67 437.266,774.989 437.825,761.754 438.384,777.424 438.943,762.106 439.503,775.95 440.062,742.883 440.621,730.109 441.18,697.233 441.74,669.4 442.299,644.937 442.858,667.43 443.417,640.789 443.977,632.629 444.536,624.617 445.095,685.632 445.654,705.566 446.214,710.964 446.773,715.057 447.332,749.091 447.891,767.186 448.451,766.205 449.01,766.129 449.569,736.063 450.128,705.469 450.688,725.701 451.247,742.364 451.806,758.027 452.365,775.998 452.925,777.373 453.484,777.193 454.043,760.683 454.602,744.127 455.162,745.545 455.721,748.321 456.28,782.862 456.839,779.773 457.399,779.999 457.958,778.322 458.517,760.7 459.076,775.651 459.636,793.766 460.195,756.576 460.754,745.834 461.313,763.585 461.873,762.989 462.432,779.919 462.991,778.017 463.55,776.016 464.11,774.06 464.669,770.036 465.228,802.507 465.787,834.98 466.347,844.276 466.906,852.991 467.465,833.317 468.024,832.25 468.584,798.385 469.143,779.951 469.702,775.782 470.261,772.207 470.821,740.423 471.38,725.421 471.939,740.869 472.498,789.04 473.058,788.432 473.617,818.636 474.176,816.963 474.735,785.163 475.295,783.208 475.854,764.431 476.413,764.131 476.972,780.976 477.532,796.364 478.091,888.24 478.65,879.066 479.209,920.987 479.769,913.653 480.328,901.908 480.887,892.85 481.446,866.243 482.006,860.478 482.565,836.654 483.124,830.01 483.683,857.14 484.243,852.465 484.802,895.356 485.361,872.39 485.92,865.119 486.48,826.905 487.039,805.683 487.598,786.563 488.157,766.513 488.717,763.69 489.276,779.184 489.835,743.536 490.394,758.964 490.954,770.974 491.513,736.434 492.072,737.928 492.631,769.495 493.191,785.535 493.75,768.589 494.309,754.537 494.868,735.304 495.428,717.083 495.987,718.538 496.546,669.147 497.105,689.053 497.665,671.11 498.224,689.326 498.783,688.566 499.342,723.179 499.902,739.86 500.461,724.952 501.02,760.826 501.579,741.452 502.139,722.268 502.698,751.673 503.257,749.593 503.816,746.633 504.376,760.928 504.935,741.235 505.494,756.927 506.053,753.828 506.613,735.241 507.172,732.152 507.731,715.399 508.29,750.274 508.85,751.397 509.409,754.473 509.968,736.601 510.527,754.484 511.087,786.515 511.646,733.528 512.205,747.72 512.764,727.708 513.324,724.907 513.883,743.688 514.442,776.312 515.001,788.166 515.561,832.055 516.12,808.831 516.679,803.836 517.238,831.507 517.798,855.841 518.357,852.962 518.916,832.372 519.475,842.174 520.035,805.903 520.594,804.706 521.153,779.86 521.712,764.04 522.272,779.736 522.831,808.717 523.39,789.252 523.949,784.356 524.509,781.387 525.068,743.7 525.627,725.961 526.186,706.48 526.746,738.946 527.305,738.724 527.864,706.085 528.423,725.308 528.983,688.246 529.542,673.756 530.101,677.133 530.66,680.669 531.22,686.622 531.779,689.063 532.338,676.905 532.897,645.815 533.457,650.506 534.016,669.786 534.575,706.983 535.134,673.583 535.694,674.95 536.253,697.038 536.812,681.127 537.371,681.637 537.931,685.009 538.49,719.313 539.049,732.173 539.608,747.505 540.168,746.056 540.727,743.733 541.286,724.892 541.845,728.214 542.405,711.089 542.964,710.327 543.523,709.737 544.082,728.315 544.642,742.841 545.201,759.765 545.76,772.552 546.319,767.687 546.879,743.533 547.438,775.726 547.997,757.717 548.556,757.766 549.116,771.233 549.675,803.814 550.234,815.871 550.793,823.724 551.353,814.614 551.912,810.801 552.471,807.112 553.031,801.782 553.59,772.341 554.149,769.769 554.708,780.584 555.268,793.714 555.827,774.142 556.386,771.852 556.945,766.898 557.505,765.939 558.064,749.675 558.623,745.383 559.182,758.56 559.742,773.501 560.301,785.239 560.86,769.319 561.419,765.337 561.979,759.714 562.538,757.174 563.097,755.743 563.656,751.387 564.216,751.025 564.775,717.698 565.334,713.462 565.893,744.309 566.453,725.186 567.012,691.885 567.571,691.772 568.13,661.12 568.69,664.923 569.249,684.16 569.808,687.146 570.367,686.474 570.927,669.831 571.486,643.345 572.045,631.072 572.604,606.247 573.164,628.82 573.723,646.724 574.282,666.19 574.841,685.28 575.401,720.483 575.96,737.133 576.519,705.313 577.078,704.03 577.638,718.761 578.197,747.864 578.756,748.001 579.315,732.773 579.875,732.173 580.434,748.828 580.993,749.547 581.552,763.695 582.112,757.232 582.671,754.792 583.23,733.311 583.789,749.082 584.349,765.074 584.908,778.356 585.467,774.708 586.026,771.059 586.586,736.722 587.145,768.869 587.704,764.633 588.263,795.381 588.823,792.572 589.382,774.048 589.941,753.269 590.5,753.367 591.06,720.966 591.619,719.661 592.178,735.645 592.737,747.15 593.297,729.48 593.856,711.187 594.415,727.215 594.974,755.214 595.534,768.786 596.093,767.208 596.652,749.712 597.211,699.26 597.771,704.502 598.33,690.507 598.889,674.648 599.448,629.003 600.008,619.426 600.567,624.659 601.126,614.516 601.685,634.867 602.245,652.854 602.804,609.977 603.363,599.359 603.922,589.644 604.482,578.931 605.041,602.343 605.6,589.518 606.159,597.173 606.719,586.832 607.278,578.021 607.837,602.433 608.396,639.372 608.956,626.913 609.515,647.866 610.074,684.467 610.633,652.322 611.193,673.671 611.752,677.929 612.311,714.346 612.87,760.736 613.43,774.372 613.989,786.355 614.548,797.616 615.107,776.415 615.667,788.884 616.226,800.804 616.785,796.368 617.344,792.194 617.904,759.133 618.463,756.215 619.022,785.004 619.581,765.626 620.141,777.512 620.7,757.256 621.259,756.013 621.818,767.014 622.378,746.864 622.937,744.272 623.496,725.807 624.055,676.109 624.615,677.453 625.174,630.049 625.733,652.707 626.292,666.514 626.852,682.487 627.411,682.298 627.97,665.963 628.529,668.057 629.089,714.834 629.648,727.943 630.207,727.436 630.766,741.208 631.326,738.505 631.885,703.816 632.444,705.934 633.003,690.581 633.563,675.676 634.122,678.818 634.681,680.533 635.24,650.763 635.8,635.725 636.359,639.789 636.918,644.018 637.477,693.643 638.037,694.908 638.596,713.63 639.155,715.992 639.714,730.664 640.274,732.99 640.833,732.111 641.392,710.743 641.951,727.412 642.511,726.737 643.07,740.138 643.629,737.449 644.188,734.727 644.748,732.789 645.307,732.472 645.866,761.913 646.425,725.242 646.985,659.283 647.544,677.881 648.103,692.785 648.662,693.119 649.222,708.808 649.781,743.271 650.34,726.983 650.899,691.266 651.459,725.08 652.018,704.414 652.577,735.919 653.136,735.404 653.696,763.008 654.255,743.492 654.814,756.184 655.373,753.518 655.933,732.971 656.492,730.704 657.051,728.099 657.61,724.24 658.17,752.211 658.729,715.939 659.288,699.098 659.847,735.508 660.407,735.223 660.966,747.015 661.525,743.596 662.084,741.173 662.644,773.026 663.203,749.359 663.762,731.59 664.321,728.846 664.881,726.451 665.44,721.163 665.999,719.054 666.558,784.463 667.118,727.929 667.677,696.82 668.236,710.276 668.795,693.882 669.355,694.929 669.914,673.925 670.473,673.955 671.032,675.211 671.592,677.553 672.151,646.521 672.71,649.244 673.269,670.903 673.829,655.96 674.388,657.578 674.947,679.232 675.506,667.713 676.066,682.458 676.625,683.581 677.184,670.004 677.743,622.452 678.303,626.5 678.862,680.004 679.421,683.645 679.981,755.86 680.54,734.826 681.099,717.981 681.658,717.207 682.218,716.747 682.777,714.421 683.336,728.05 683.895,727.935 684.455,693.336 685.014,661.778 685.573,668.36 686.132,655.793 686.692,680.249 687.251,665.767 687.81,672.086 688.369,656.091 688.929,640.907 689.488,693.575 690.047,677.041 690.606,682.606 691.166,683.972 691.725,699.616 692.284,699.171 692.843,699.041 693.403,684.525 693.962,686.355 694.521,701.947 695.08,704.173 695.64,704.494 696.199,686.534 696.758,687.624 697.317,687.457 697.877,688.889 698.436,722.193 698.995,689.047 699.554,668.497 700.114,668.859 700.673,672.515 701.232,659.627 701.791,674.049 702.351,693.14 702.91,687.625 703.469,689.159 704.028,705.98 704.588,705.907 705.147,707.785 705.706,690.911 706.265,693.555 706.825,663.299 707.384,682.413 707.943,666.455 708.502,685.169 709.062,653.376 709.621,655.197 710.18,673.438 710.739,693.069 711.299,695.552 711.858,712.193 712.417,664.526 712.976,681.905 713.536,731.522 714.095,731.547 714.654,714.275 715.213,696.595 715.773,683.617 716.332,654.391 716.891,672.197 717.45,671.128 718.01,643.061 718.569,664.727 719.128,636.278 719.687,635.381 720.247,637.417 720.806,672.601 721.365,639.154 721.924,624.208 722.484,612.862 723.043,633.521 723.602,650.434 724.161,683.618 724.721,731.968 725.28,746.197 725.839,761.638 726.398,759.381 726.958,771.976 727.517,800.491 728.076,828.127 728.635,807.97 729.195,788.097 729.754,767.052 730.313,782.29 730.872,792.214 731.432,787.169 731.991,779.528 732.55,793.978 733.109,787.107 733.669,796.468 734.228,789.903 734.787,751.278 735.346,729.926 735.906,726.3 736.465,771.672 737.024,766.064 737.583,779.801 738.143,758.112 738.702,771.217 739.261,765.219 739.82,761.032 740.38,724.989 740.939,725.412 741.498,723.077 742.057,753.059 742.617,767.508 743.176,766.135 743.735,748.761 744.294,748.544 744.854,726.698 745.413,735.943 745.972,745.016 746.531,758.149 747.091,737.356 747.65,733.036 748.209,760.508 748.768,738.943 749.328,688.237 749.887,688.129 750.446,674.138 751.005,672.616 751.565,671.663 752.124,677.252 752.683,677.539 753.242,664.734 753.802,682.8 754.361,700.445 754.92,698.837 755.479,682.581 756.039,667.723 756.598,685.143 757.157,688.552 757.716,717.898 758.276,723.095 758.835,772.944 759.394,800.181 759.953,777.024 760.513,737.987 761.072,752.565 761.631,715.626 762.19,745.984 762.75,727.197 763.309,710.264 763.868,726.843 764.427,727.787 764.987,741.247 765.546,723.797 766.105,738.407 766.664,719.82 767.224,717.469 767.783,713.982 768.342,712.483 768.901,709.499 769.461,709.638 770.02,722.603 770.579,720.318 771.138,702.289 771.698,734.714 772.257,682.033 772.816,663.213 773.375,678.143 773.935,645.879 774.494,681.954 775.053,700.297 775.612,684.343 776.172,669.01 776.731,655.744 777.29,610.583 777.849,599.578 778.409,570.868 778.968,580.797 779.527,572.688 780.086,546.792 780.646,521.205 781.205,514.641 781.764,507.493 782.323,550.562 782.883,589.511 783.442,576.612 784.001,582.368 784.56,557.347 785.12,567.983 785.679,571.263 786.238,578.154 786.797,552.752 787.357,561.331 787.916,584.742 788.475,621.901 789.034,640.35 789.594,628.653 790.153,629.574 790.712,681.7 791.271,697.099 791.831,694.089 792.39,692.104 792.949,677.527 793.508,695.283 794.068,695.797 794.627,695.088 795.186,676.055 795.745,696.986 796.305,682.402 796.864,701.473 797.423,668.415 797.982,669.112 798.542,684.927 799.101,685.941 799.66,684.651 800.219,699.381 800.779,698.166 801.338,714.208 801.897,713.564 802.456,729.415 803.016,808.876 803.575,820.578 804.134,827.588 804.693,836.984 805.253,812.034 805.812,772.265 806.371,783.369 806.931,748.648 807.49,745.693 808.049,759.564 808.608,770.157 809.168,801.289 809.727,812.237 810.286,806.362 810.845,801.692 811.405,781.074 811.964,792.986 812.523,802.255 813.082,778.493 813.642,776.13 814.201,771.054 814.76,766.296 815.319,744.538 815.879,741.64 816.438,757.854 816.997,736.3 817.556,715.405 818.116,696.953 818.675,680.977 819.234,666.374 819.793,684.707 820.353,669.829 820.912,686.852 821.471,702.857 822.03,698.938 822.59,710.035 823.149,752.849 823.708,734.915 824.267,749.264 824.827,746.726 825.386,727.627 825.945,726.385 826.504,692.752 827.064,680.578 827.623,712.762 828.182,659.624 828.741,643.171 829.301,644.608 829.86,645.345 830.419,660.494 830.978,661.296 831.538,694.68 832.097,689.81 832.656,643.92 833.215,693.546 833.775,709.256 834.334,727.644 834.893,693.396 835.452,675.489 836.012,680.403 836.571,698.83 837.13,695.44 837.689,694.397 838.249,709.824 838.808,736.634 839.367,685.241 839.926,637.881 840.486,622.672 841.045,628.139 841.604,628.099 842.163,631.519 842.723,636.979 843.282,671.437 843.841,655.808 844.4,690.09 844.96,658.266 845.519,676.3 846.078,693.833 846.637,694.927 847.197,644.13 847.756,645.573 848.315,635.439 848.874,637.079 849.434,576.304 849.993,599.325 850.552,581.798 851.111,619.454 851.671,606.37 852.23,594.333 852.789,585.019 853.348,587.388 853.908,607.898 854.467,646.666 855.026,677.905 855.585,694.269 856.145,708.137 856.704,706.239 857.263,704.303 857.822,688.3 858.382,719.781 858.941,719.776 859.5,702.217 860.059,670.648 860.619,671.907 861.178,689.886 861.737,691.196 862.296,696.424 862.856,633.121 863.415,651.703 863.974,639.424 864.533,674.063 865.093,692.922 865.652,692.07 866.211,662.216 866.77,696.323 867.33,694.502 867.889,709.381 868.448,708.709 869.007,693.042 869.567,695.333 870.126,650.911 870.685,654.875 871.244,638.927 871.804,622.913 872.363,659.164 872.922,627.606 873.481,631.204 874.041,636.845 874.6,639.686 875.159,639.053 875.718,645.84 876.278,634.671 876.837,639.314 877.396,640.817 877.955,612.878 878.515,615.425 879.074,617.782 879.633,603.479 880.192,593.519 880.752,616.745 881.311,636.837 881.87,686.17 882.429,701.683 882.989,717.77 883.548,715.513 884.107,732.034 884.666,697.313 885.226,701.33 885.785,703.442 886.344,686.374 886.903,635.987 887.463,657.588 888.022,644.534 888.581,662.174 889.14,665.078 889.7,683.735 890.259,683.591 890.818,683.221 891.377,687.234 891.937,669.707 892.496,673.997 893.055,690.355 893.614,722.905 894.174,719.09 894.733,699.926 895.292,732.387 895.851,698.446 896.411,713.528 896.97,745.901 897.529,712.289 898.088,728.2 898.648,722.224 899.207,719.542 899.766,700.659 900.325,705.157 900.885,736.002 901.444,746.782 902.003,743.904 902.562,742.851 903.122,738.038 903.681,735.305 904.24,732.706 904.799,731.324 905.359,744.826 905.918,742.685 906.477,739.055 907.036,717.157 907.596,716.42 908.155,717.354 908.714,732.956 909.273,730.537 909.833,713.758 910.392,711.415 910.951,727.408 911.51,723.629 912.07,722.046 912.629,739.343 913.188,754.5 913.747,687.348 914.307,705.261 914.866,689.021 915.425,690.01 915.984,689.48 916.544,704.93 917.103,701.21 917.662,681.429 918.221,666.528 918.781,635.805 919.34,624.389 919.899,610.793 920.458,616.829 921.018,637.716 921.577,658.687 922.136,676.319 922.695,721.962 923.255,737.551 923.814,754.871 924.373,755.685 924.932,751.983 925.492,733.377 926.051,696.466 926.61,665.471 927.169,664.506 927.729,696.277 928.288,628.886 928.847,650.466 929.406,660.253 929.966,662.221 930.525,664.755 931.084,712.339 931.644,711.769 932.203,724.344 932.762,753.306 933.321,717.746 933.881,701.634 934.44,717.442 934.999,733.238 935.558,732.886 936.118,761.497 936.677,743.186 937.236,740.571 937.795,757.216 938.355,722.185 938.914,704.309 939.473,685.573 940.032,667.982 940.592,668.008 941.151,671.111 941.71,687.062 942.269,686.623 942.829,687.113 943.388,688.89 943.947,690.413 944.506,677.154 945.066,724.115 945.625,740.614 946.184,723.769 946.743,719.948 947.303,716.333 947.862,748.357 948.421,729.839 948.98,724.443 949.54,706.005 950.099,702.971 950.658,684.185 951.217,632.786 951.777,624.051 952.336,627.172 952.895,631.048 953.454,619.399 954.014,674.184 954.573,692.07 955.132,689.499 955.691,706.079 956.251,704.13 956.81,701.978 957.369,686.754 957.928,654.653 958.488,623.727 959.047,643.43 959.606,692.525 960.165,661.058 960.725,674.232 961.284,672.492 961.843,689.028 962.402,658.525 962.962,706.696 963.521,707.75 964.08,677.738 964.639,661.346 965.199,646.465 965.758,664.023 966.317,697.384 966.876,711.061 967.436,681.302 967.995,695.024 968.554,707.946 969.113,692.212 969.673,688.811 970.232,688.909 970.791,622.942 971.35,609.608 971.91,633.376 972.469,651.675 973.028,652.063 973.587,654.958 974.147,655.411 974.706,638.832 975.265,657.094 975.824,642.774 976.384,662.671 976.943,646.614 977.502,662.255 978.061,693.588 978.621,692.976 979.18,672.98 979.739,688.381 980.298,670.949 980.858,669.804 981.417,670.139 981.976,672.85 982.535,658.11 983.095,641.466 983.654,643.926 984.213,644.719 984.772,627.758 985.332,613.647 985.891,632.688 986.45,619.228 987.009,641.01 987.569,643.774 988.128,648.229 988.687,653.324 989.246,704.217 989.806,689.125 990.365,687.823 990.924,670.896 991.483,685.722 992.043,702.194 992.602,686.732 993.161,690.389 993.72,674.608 994.28,695.4 994.839,678.748 995.398,649.046 995.957,603.025 996.517,622.036 997.076,644.615 997.635,599.11 998.194,622.637 998.754,627.741 999.313,647.835 999.872,668.537 1000.43,655.501 1000.99,655.4 1001.55,658.588 1002.11,681.841 1002.67,649.474 1003.23,636.449 1003.79,650.735 1004.35,653.248 1004.91,656.963 1005.46,671.024 1006.02,651.948 1006.58,655.793 1007.14,643.412 1007.7,661.828 1008.26,643.834 1008.82,644.4 1009.38,629.707 1009.94,632.027 1010.5,649.5 1011.06,637.274 1011.62,656.065 1012.18,675.238 1012.73,679.496 1013.29,659.538 1013.85,630.648 1014.41,631.086 1014.97,635.607 1015.53,637.278 1016.09,633.218 1016.65,631.572 1017.21,602.875 1017.77,653.96 1018.33,653.811 1018.89,705.379 1019.45,704.803 1020.01,686.368 1020.56,686.505 1021.12,719.303 1021.68,750.707 1022.24,729.31 1022.8,726.417 1023.36,775.739 1023.92,771.247 1024.48,800.202 1025.04,765.738 1025.6,760.115 1026.16,772.688 1026.72,751.203 1027.28,766.146 1027.83,764.408 1028.39,758.295 1028.95,754.474 1029.51,752.169 1030.07,780.159 1030.63,725.457 1031.19,703.279 1031.75,719.395 1032.31,716.659 1032.87,686.928 1033.43,733.745 1033.99,697.672 1034.55,726.237 1035.1,740.505 1035.66,735.195 1036.22,731.796 1036.78,714.419 1037.34,713.416 1037.9,692.148 1038.46,673.067 1039.02,692.764 1039.58,709.302 1040.14,738.449 1040.7,748.654 1041.26,709.853 1041.82,739.95 1042.38,734.171 1042.93,728.821 1043.49,725.711 1044.05,755.217 1044.61,716.724 1045.17,718.706 1045.73,730.983 1046.29,711.891 1046.85,727.513 1047.41,727.519 1047.97,711.087 1048.53,690.586 1049.09,706.977 1049.65,705.333 1050.2,673.575 1050.76,689.753 1051.32,671.072 1051.88,638.839 1052.44,627.737 1053,628.88 1053.56,645.24 1054.12,696.636 1054.68,695.599 1055.24,661.79 1055.8,662.679 1056.36,662.755 1056.92,666.421 1057.48,667.179 1058.03,638.394 1058.59,643.709 1059.15,647.613 1059.71,630.402 1060.27,599.699 1060.83,604.509 1061.39,612.107 1061.95,604.032 1062.51,604.459 1063.07,591.553 1063.63,615.703 1064.19,636.917 1064.75,642.975 1065.3,659.116 1065.86,660.049 1066.42,677.433 1066.98,713.009 1067.54,694.85 1068.1,692.809 1068.66,711.502 1069.22,712.056 1069.78,692.741 1070.34,679.878 1070.9,662.037 1071.46,646.55 1072.02,650.841 1072.57,665.959 1073.13,634.56 1073.69,652.939 1074.25,671.671 1074.81,625.229 1075.37,612.898 1075.93,617.432 1076.49,672.483 1077.05,671.883 1077.61,675.137 1078.17,675.867 1078.73,707.711 1079.29,692.037 1079.85,674.358 1080.4,658.37 1080.96,659.886 1081.52,681.933 1082.08,633.747 1082.64,637.656 1083.2,655.058 1083.76,624.689 1084.32,655.825 1084.88,639.644 1085.44,658.573 1086,694.9 1086.56,710.974 1087.12,726.537 1087.67,725.578 1088.23,741.507 1088.79,757.089 1089.35,740.283 1089.91,768.148 1090.47,766.266 1091.03,775.682 1091.59,767.603 1092.15,761.999 1092.71,759.763 1093.27,741.51 1093.83,707.039 1094.39,671.357 1094.94,675.449 1095.5,675.191 1096.06,711.869 1096.62,676.626 1097.18,662.642 1097.74,681.259 1098.3,682.906 1098.86,664.375 1099.42,682.227 1099.98,728.695 1100.54,759.07 1101.1,783.949 1101.66,779.743 1102.22,760.135 1102.77,757.889 1103.33,769.977 1103.89,754.366 1104.45,784.049 1105.01,795.355 1105.57,801.945 1106.13,780.003 1106.69,773.666 1107.25,771.006 1107.81,734.192 1108.37,733.085 1108.93,695.92 1109.49,697.034 1110.04,699.289 1110.6,664.328 1111.16,679.27 1111.72,662.952 1112.28,664.335 1112.84,649.518 1113.4,684.905 1113.96,683.114 1114.52,664.185 1115.08,650.108 1115.64,651.007 1116.2,637.719 1116.76,650.994 1117.31,667.583 1117.87,682.164 1118.43,648.881 1118.99,649.888 1119.55,650.211 1120.11,636.519 1120.67,625.93 1121.23,628.485 1121.79,650.381 1122.35,684.801 1122.91,683.506 1123.47,649.661 1124.03,651.857 1124.59,654.717 1125.14,691.678 1125.7,707.263 1126.26,724.309 1126.82,736.752 1127.38,732.501 1127.94,711.814 1128.5,694.718 1129.06,708.401 1129.62,704.209 1130.18,689.159 1130.74,736.303 1131.3,769.339 1131.86,761.676 1132.41,743.331 1132.97,787.519 1133.53,780.018 1134.09,790.355 1134.65,753.376 1135.21,733.392 1135.77,664.246 1136.33,679.553 1136.89,698.527 1137.45,711.425 1138.01,759.2 1138.57,755.938 1139.13,733.389 1139.68,729.938 1140.24,696.372 1140.8,697.273 1141.36,681.248 1141.92,682.163 1142.48,634.611 1143.04,637.84 1143.6,643.752 1144.16,631.244 1144.72,636.936 1145.28,606.374 1145.84,611.006 1146.4,598.581 1146.96,601.125 1147.51,622.404 1148.07,673.417 1148.63,674.41 1149.19,723.232 1149.75,767.723 1150.31,767.972 1150.87,782.388 1151.43,777.124 1151.99,757.112 1152.55,739.854 1153.11,737.934 1153.67,734.639 1154.23,735.809 1154.78,749.308 1155.34,762.47 1155.9,723.768 1156.46,739.166 1157.02,686.049 1157.58,702.617 1158.14,720.642 1158.7,717.646 1159.26,727.828 1159.82,759.391 1160.38,703.394 1160.94,734.714 1161.5,719.177 1162.05,698.404 1162.61,685.819 1163.17,717.127 1163.73,735.923 1164.29,731.052 1164.85,727.437 1165.41,722.842 1165.97,719.573 1166.53,749.409 1167.09,712.7 1167.65,711.973 1168.21,725.161 1168.77,752.746 1169.33,696.097 1169.88,728.289 1170.44,743.246 1171,722.147 1171.56,715.933 1172.12,712.05 1172.68,690.791 1173.24,723.471 1173.8,734.478 1174.36,699.075 1174.92,677.113 1175.48,693.113 1176.04,690.337 1176.6,671.916 1177.15,658.897 1177.71,662.857 1178.27,682.641 1178.83,663.869 1179.39,663.486 1179.95,676.22 1180.51,677.335 1181.07,676.243 1181.63,695.45 1182.19,693.863 1182.75,662.404 1183.31,647.591 1183.87,650.116 1184.43,650.925 1184.98,668.903 1185.54,651.762 1186.1,668.813 1186.66,653.339 1187.22,670.933 1187.78,685.009 1188.34,667.09 1188.9,667.406 1189.46,717.007 1190.02,700.649 1190.58,702.337 1191.14,736.129 1191.7,750.082 1192.25,734.924 1192.81,713.823 1193.37,728.714 1193.93,758.47 1194.49,757.632 1195.05,786.181 1195.61,776.478 1196.17,754.823 1196.73,764.888 1197.29,776.802 1197.85,755.713 1198.41,702.902 1198.97,669.667 1199.52,689.297 1200.08,668.291 1200.64,716.54 1201.2,733.443 1201.76,742.876 1202.32,770.081 1202.88,749.643 1203.44,729.411 1204,726.191 1204.56,758.534 1205.12,721.848 1205.68,734.721 1206.24,695.11 1206.8,659.713 1207.35,642.078 1207.91,660.789 1208.47,612.477 1209.03,617.299 1209.59,605.831 1210.15,594.304 1210.71,598.804 1211.27,585.727 1211.83,589.362 1212.39,626.002 1212.95,645.063 1213.51,630.211 1214.07,598.401 1214.62,600.532 1215.18,638 1215.74,624.79 1216.3,628.821 1216.86,598.609 1217.42,584.236 1217.98,554.993 1218.54,547.415 1219.1,587.133 1219.66,608.843 1220.22,594.691 1220.78,599.519 1221.34,589.682 1221.89,594.632 1222.45,598.058 1223.01,583.621 1223.57,621.762 1224.13,626.255 1224.69,595.565 1225.25,614.226 1225.81,604.821 1226.37,624.949 1226.93,643.93 1227.49,680.889 1228.05,670.629 1228.61,671.512 1229.17,673.223 1229.72,676.239 1230.28,693.568 1230.84,694.178 1231.4,680.483 1231.96,712.219 1232.52,694.869 1233.08,694.94 1233.64,711.748 1234.2,695.547 1234.76,694.61 1235.32,712.243 1235.88,713.484 1236.44,699.407 1236.99,714.023 1237.55,726.58 1238.11,755.263 1238.67,737.898 1239.23,734.649 1239.79,698.159 1240.35,663.218 1240.91,664.636 1241.47,667.051 1242.03,665.516 1242.59,666.643 1243.15,650.738 1243.71,606.823 1244.26,608.573 1244.82,599.354 1245.38,620.102 1245.94,604.375 1246.5,609.663 1247.06,630.729 1247.62,631.547 1248.18,637.549 1248.74,643.102 1249.3,629.256 1249.86,615.979 1250.42,633.467 1250.98,652.016 1251.54,685.418 1252.09,685.469 1252.65,668.847 1253.21,656.235 1253.77,656.555 1254.33,690.575 1254.89,706.638 1255.45,704.762 1256.01,719.908 1256.57,732.258 1257.13,746.543 1257.69,759.794 1258.25,723.455 1258.81,721.748 1259.36,719.741 1259.92,749.148 1260.48,762.193 1261.04,708.452 1261.6,722.021 1262.16,688.177 1262.72,703.122 1263.28,719.563 1263.84,716.243 1264.4,747.907 1264.96,713.25 1265.52,710.432 1266.08,697.033 1266.63,681.785 1267.19,665.49 1267.75,648.729 1268.31,632.508 1268.87,620.596 1269.43,641.452 1269.99,629.762 1270.55,635.132 1271.11,658.131 1271.67,662.577 1272.23,645.921 1272.79,695.932 1273.35,682.808 1273.91,683.888 1274.46,698.351 1275.02,700.038 1275.58,718.157 1276.14,688.198 1276.7,705.993 1277.26,675.421 1277.82,696.023 1278.38,668.157 1278.94,715.897 1279.5,732.024 1280.06,715.568 1280.62,731.153 1281.18,740.249 1281.73,738.839 1282.29,740.091 1282.85,755.661 1283.41,769.196 1283.97,766.572 1284.53,765.155 1285.09,776.157 1285.65,785.249 1286.21,795.871 1286.77,722.472 1287.33,721.584 1287.89,747.681 1288.45,728.014 1289,773.817 1289.56,753.471 1290.12,722.839 1290.68,733.659 1291.24,729.712 1291.8,742.965 1292.36,724.727 1292.92,705.347 1293.48,654.855 1294.04,675.253 1294.6,657.801 1295.16,663.277 1295.72,647.231 1296.28,698.393 1296.83,694.731 1297.39,693.869 1297.95,674.562 1298.51,690.811 1299.07,661.541 1299.63,644.051 1300.19,614.195 1300.75,616.235 1301.31,606.118 1301.87,589.571 1302.43,612.892 1302.99,612.425 1303.55,584.65 1304.1,592.471 1304.66,610.934 1305.22,628.76 1305.78,666.493 1306.34,669.234 1306.9,669.209 1307.46,654.845 1308.02,657.825 1308.58,625.024 1309.14,647.784 1309.7,666.154 1310.26,633.145 1310.82,618.633 1311.38,607.18 1311.93,643.572 1312.49,675.649 1313.05,673.401 1313.61,685.252 1314.17,687.992 1314.73,702.124 1315.29,715.848 1315.85,696.298 1316.41,711.058 1316.97,723.902 1317.53,751.908 1318.09,746.109 1318.65,710.233 1319.2,707.106 1319.76,724.272 1320.32,738.398 1320.88,733.282 1321.44,730.225 1322,711.025 1322.56,725.639 1323.12,723.066 1323.68,722.076 1324.24,704.827 1324.8,669.829 1325.36,656.216 1325.92,670.247 1326.47,735.842 1327.03,718.037 1327.59,683.486 1328.15,682.63 1328.71,682.985 1329.27,701.174 1329.83,716.965 1330.39,717.779 1330.95,699.616 1331.51,727.104 1332.07,708.092 1332.63,707.651 1333.19,673.658 1333.75,656.875 1334.3,628.987 1334.86,634.329 1335.42,621.5 1335.98,624.774 1336.54,610.101 1337.1,662.835 1337.66,635.176 1338.22,637.775 1338.78,622.71 1339.34,628.588 1339.9,631.148 1340.46,617.03 1341.02,623.001 1341.57,624.388 1342.13,690.865 1342.69,750.938 1343.25,746.548 1343.81,728.188 1344.37,772.603 1344.93,766.815 1345.49,777.499 1346.05,770.717 1346.61,772.586 1347.17,766.111 1347.73,764.396 1348.29,761.482 1348.84,723.307 1349.4,738.229 1349.96,751.69 1350.52,717.49 1351.08,712.376 1351.64,695.095 1352.2,726.888 1352.76,696.218 1353.32,691.226 1353.88,677.858 1354.44,692.506 1355,691.607 1355.56,675.523 1356.12,663.052 1356.67,615.541 1357.23,581.388 1357.79,603.588 1358.35,592.136 1358.91,610.144 1359.47,617.583 1360.03,607.472 1360.59,611.226 1361.15,599.43 1361.71,557.461 1362.27,545.565 1362.83,571.208 1363.39,559.452 1363.94,597.174 1364.5,635.822 1365.06,656.353 1365.62,655.72 1366.18,672.668 1366.74,657.182 1367.3,622.318 1367.86,641.112 1368.42,642.874 1368.98,660.472 1369.54,694.091 1370.1,694.308 1370.66,710.734 1371.21,673.955 1371.77,677.936 1372.33,691.328 1372.89,710.735 1373.45,743.535 1374.01,708.903 1374.57,739.594 1375.13,753.584 1375.69,748.84 1376.25,762.719 1376.81,771.575 1377.37,770.931 1377.93,750.289 1378.49,680.097 1379.04,665.56 1379.6,636.818 1380.16,640.538 1380.72,644.102 1381.28,646.46 1381.84,650.347 1382.4,670.77 1382.96,676.007 1383.52,674.259 1384.08,710.344 1384.64,711.153 1385.2,681.138 1385.76,664.459 1386.31,698.578 1386.87,711.142 1387.43,710.538 1387.99,725.756 1388.55,726.014 1389.11,753.491 1389.67,783.024 1390.23,763.792 1390.79,760.204 1391.35,740.774 1391.91,718.959 1392.47,735.644 1393.03,768.705 1393.58,747.083 1394.14,713.363 1394.7,697.293 1395.26,694.98 1395.82,677.324 1396.38,660.808 1396.94,646.592 1397.5,664.101 1398.06,645.981 1398.62,659.447 1399.18,658.334 1399.74,660.769 1400.3,664.863 1400.86,668.706 1401.41,653.622 1401.97,689.002 1402.53,657.406 1403.09,656.991 1403.65,659.486 1404.21,631.488 1404.77,651.027 1405.33,669.329 1405.89,668.815 1406.45,685.856 1407.01,700.903 1407.57,711.378 1408.13,708.626 1408.68,749.665 1409.24,711.368 1409.8,711.481 1410.36,723.404 1410.92,671.218 1411.48,672.478 1412.04,690.413 1412.6,673.602 1413.16,645.515 1413.72,646.402 1414.28,581.577 1414.84,536 1415.4,547.019 1415.95,554.817 1416.51,560.517 1417.07,599.966 1417.63,604.549 1418.19,578.893 1418.75,586.831 1419.31,629.728 1419.87,599.874 1420.43,567.112 1420.99,555.149 1421.55,543.908 1422.11,569.826 1422.67,574.536 1423.23,596.54 1423.78,602.755 1424.34,605.165 1424.9,639.279 1425.46,626.534 1426.02,630.368 1426.58,631.368 1427.14,633.335 1427.7,684.77 1428.26,685.682 1428.82,640.645 1429.38,657.945 1429.94,671.892 1430.5,656.087 1431.05,629.402 1431.61,665.192 1432.17,665.109 1432.73,651.663 1433.29,637.969 1433.85,639.137 1434.41,658.465 1434.97,644.87 1435.53,661.413 1436.09,679.438 1436.65,695.392 1437.21,709.249 1437.77,740.768 1438.33,702.957 1438.88,720.388 1439.44,700.283 1440,713.747 1440.56,747.353 1441.12,694.536 1441.68,712.929 1442.24,727.002 1442.8,724.057 1443.36,751.099 1443.92,745.08 1444.48,758.376 1445.04,752.641 1445.6,766.744 1446.15,731.88 1446.71,732.937 1447.27,731.648 1447.83,682.018 1448.39,711.6 1448.95,727.995 1449.51,741.661 1450.07,739.513 1450.63,754.537 1451.19,734.131 1451.75,696.402 1452.31,692.146 1452.87,692.421 1453.42,689.335 1453.98,708.301 1454.54,706.326 1455.1,703.362 1455.66,733.718 1456.22,767.251 1456.78,791.453 1457.34,817.856 1457.9,844.918 1458.46,835.819 1459.02,831.715 1459.58,826.468 1460.14,867.692 1460.7,841.39 1461.25,882.937 1461.81,890.598 1462.37,878.832 1462.93,879.222 1463.49,882.146 1464.05,806.167 1464.61,781.57 1465.17,772.547 1465.73,736.942 1466.29,732.611 1466.85,710.762 1467.41,737.362 1467.97,700.88 1468.52,687.203 1469.08,717.501 1469.64,696.57 1470.2,693.736 1470.76,644.623 1471.32,647.187 1471.88,696.999 1472.44,662.162 1473,661.391 1473.56,665.685 1474.12,651.035 1474.68,685.37 1475.24,731.911 1475.79,761.387 1476.35,727.602 1476.91,737.221 1477.47,799.558 1478.03,774.032 1478.59,734.487 1479.15,712.307 1479.71,727.806 1480.27,727.168 1480.83,737.365 1481.39,701.63 1481.95,703.225 1482.51,720.393 1483.07,703.866 1483.62,688.461 1484.18,654.907 1484.74,642.031 1485.3,641.607 1485.86,661.625 1486.42,692.502 1486.98,658.403 1487.54,661.092 1488.1,682.626 1488.66,731.935 1489.22,731.704 1489.78,709.115 1490.34,707.758 1490.89,707.478 1491.45,690.076 1492.01,640.329 1492.57,644.591 1493.13,645.483 1493.69,665.376 1494.25,679.276 1494.81,664.667 1495.37,665.915 1495.93,698.192 1496.49,695.474 1497.05,694.876 1497.61,709.41 1498.16,706.932 1498.72,689.158 1499.28,675.585 1499.84,658.817 1500.4,647.732 1500.96,616.17 1501.52,620.451 1502.08,673.095 1502.64,656.239 1503.2,623.039 1503.76,644.569 1504.32,647.106 1504.88,652.098 1505.44,622.586 1505.99,640.807 1506.55,642.799 1507.11,644.246 1507.67,631.01 1508.23,650.055 1508.79,699.879 1509.35,666.759 1509.91,651.024 1510.47,651.912 1511.03,635.46 1511.59,621.885 1512.15,624.494 1512.71,646.781 1513.26,659.885 1513.82,629.556 1514.38,637.181 1514.94,657.132 1515.5,642.016 1516.06,625.697 1516.62,613.643 1517.18,619.593 1517.74,606.256 1518.3,611.358 1518.86,614.071 1519.42,619.626 1519.98,622.87 1520.53,608.009 1521.09,647.111 1521.65,620.944 1522.21,621.113 1522.77,661.541 1523.33,678.782 1523.89,679.068 1524.45,708.012 1525.01,708.352 1525.57,708.359 1526.13,710.752 1526.69,694.972 1527.25,709.563 1527.81,723.719 1528.36,740.82 1528.92,707.115 1529.48,670.108 1530.04,703.443 1530.6,689.296 1531.16,688.988 1531.72,687.617 1532.28,703.369 1532.84,701.896 1533.4,717.297 1533.96,733.583 1534.52,700.556 1535.08,679.099 1535.63,679.953 1536.19,680.123 1536.75,682.024 1537.31,717.207 1537.87,711.047 1538.43,708.537 1538.99,756.788 1539.55,786.386 1540.11,783.013 1540.67,779.87 1541.23,774.514 1541.79,768.6 1542.35,732.98 1542.9,698.196 1543.46,698.163 1544.02,697.272 1544.58,713.107 1545.14,693.725 1545.7,691.249 1546.26,695.44 1546.82,697.478 1547.38,728.174 1547.94,746.414 1548.5,742.638 1549.06,740.117 1549.62,769.538 1550.18,783.784 1550.73,726.134 1551.29,738.77 1551.85,720.611 1552.41,718.311 1552.97,716.267 1553.53,733.198 1554.09,729.164 1554.65,694.759 1555.21,707.752 1555.77,721.727 1556.33,732.254 1556.89,683.272 1557.45,699.567 1558,681.038 1558.56,665.305 1559.12,683.894 1559.68,669.831 1560.24,671.424 1560.8,704.939 1561.36,688.167 1561.92,704.69 1562.48,722.245 1563.04,734.725 1563.6,746.559 1564.16,763.18 1564.72,757.013 1565.28,750.779 1565.83,742.115 1566.39,758.558 1566.95,756.411 1567.51,753.622 1568.07,746.078 1568.63,740.056 1569.19,722.466 1569.75,706.637 1570.31,705.744 1570.87,698.164 1571.43,665.612 1571.99,618.906 1572.55,589.409 1573.1,579.704 1573.66,587.229 1574.22,591.35 1574.78,598.134 1575.34,602.233 1575.9,576.089 1576.46,569.014 1577.02,573.846 1577.58,561.652 1578.14,566.49 1578.7,555.912 1579.26,550.955 1579.82,560.769 1580.37,597.012 1580.93,586.69 1581.49,641.653 1582.05,632.072 1582.61,603.996 1583.17,592.019 1583.73,598.885 1584.29,605.934 1584.85,577.949 1585.41,614.258 1585.97,586.215 1586.53,608.623 1587.09,594.194 1587.65,582.25 1588.2,602.479 1588.76,606.066 1589.32,610.458 1589.88,632.206 1590.44,651.321 1591,651.192 1591.56,637.615 1592.12,624.184 1592.68,660.365 1593.24,644.897 1593.8,647.227 1594.36,665.868 1594.92,714.632 1595.47,714.197 1596.03,683.962 1596.59,698.831 1597.15,701.498 1597.71,736.069 1598.27,718.679 1598.83,765.938 1599.39,791.652 1599.95,755.685 1600.51,753.809 1601.07,732.069 1601.63,712.585 1602.19,676.732 1602.74,697.971 1603.3,712.514 1603.86,692.729 1604.42,645.336 1604.98,629.949 1605.54,630.658 1606.1,632.231 1606.66,635.901 1607.22,653.282 1607.78,638.039 1608.34,639.127 1608.9,656.097 1609.46,640.511 1610.02,625.929 1610.57,627.893 1611.13,627.968 1611.69,631.737 1612.25,619.334 1612.81,640.396 1613.37,638.263 1613.93,642.627 1614.49,614.777 1615.05,668.205 1615.61,685.846 1616.17,720.421 1616.73,717.182 1617.29,700.3 1617.84,636.106 1618.4,619.482 1618.96,640.983 1619.52,647.078 1620.08,681.032 1620.64,698.314 1621.2,729.703 1621.76,728.878 1622.32,695.393 1622.88,662.131 1623.44,681.187 1624,684.338 1624.56,700.632 1625.11,699.433 1625.67,702.022 1626.23,701.77 1626.79,717.459 1627.35,700.66 1627.91,696.838 1628.47,711.12 1629.03,708.412 1629.59,708.007 1630.15,707.786 1630.71,689.686 1631.27,687.959 1631.83,675.228 1632.39,679.355 1632.94,661.957 1633.5,649.161 1634.06,649.536 1634.62,668.801 1635.18,688.754 1635.74,656.703 1636.3,652.861 1636.86,621.418 1637.42,608.854 1637.98,614.261 1638.54,650.432 1639.1,669.172 1639.66,638.463 1640.21,660.074 1640.77,630.575 1641.33,646.725 1641.89,649.621 1642.45,650.129 1643.01,655.652 1643.57,641.392 1644.13,626.206 1644.69,627.87 1645.25,632.34 1645.81,638.605 1646.37,644.262 1646.93,646.429 1647.48,680.946 1648.04,716.6 1648.6,700.235 1649.16,750.362 1649.72,713.584 1650.28,710.04 1650.84,722.911 1651.4,706.663 1651.96,707.007 1652.52,720.509 1653.08,715.598 1653.64,697.197 1654.2,712.586 1654.76,695.398 1655.31,695.319 1655.87,693.242 1656.43,689.121 1656.99,688.823 1657.55,688.378 1658.11,691.112 1658.67,690.59 1659.23,708.215 1659.79,706.199 1660.35,719.09 1660.91,736.636 1661.47,730.251 1662.03,728.188 1662.58,720.325 1663.14,720.41 1663.7,717.831 1664.26,728.651 1664.82,725.774 1665.38,723.047 1665.94,721.756 1666.5,720.467 1667.06,744.434 1667.62,740.404 1668.18,768.178 1668.74,746.998 1669.3,760.214 1669.85,774.412 1670.41,772.697 1670.97,731.823 1671.53,697.864 1672.09,712.542 1672.65,713.04 1673.21,727.613 1673.77,707.014 1674.33,703.522 1674.89,654.871 1675.45,689.593 1676.01,669.21 1676.57,670.1 1677.13,670.418 1677.68,685.268 1678.24,670.105 1678.8,669.142 1679.36,668.187 1679.92,668.582 1680.48,685.271 1681.04,700.2 1681.6,702.535 1682.16,717.864 1682.72,717.455 1683.28,715.883 1683.84,732.2 1684.4,697.151 1684.95,729.376 1685.51,693.829 1686.07,725.94 1686.63,756.773 1687.19,754.184 1687.75,769.659 1688.31,745.504 1688.87,758.453 1689.43,754.378 1689.99,746.898 1690.55,710.662 1691.11,723.023 1691.67,739.099 1692.23,735.453 1692.78,685.898 1693.34,687.541 1693.9,716.872 1694.46,730.025 1695.02,746.726 1695.58,725.71 1696.14,741.093 1696.7,737.142 1697.26,731.061 1697.82,743.168 1698.38,739.765 1698.94,754.997 1699.5,764.623 1700.05,777.367 1700.61,771.34 1701.17,748.561 1701.73,749.429 1702.29,743.019 1702.85,740.274 1703.41,772.741 1703.97,785.515 1704.53,811.369 1705.09,833.511 1705.65,791.162 1706.21,770.909 1706.77,770.635 1707.32,764.329 1707.88,778.566 1708.44,770.218 1709,778.853 1709.56,770.998 1710.12,780.044 1710.68,755.381 1711.24,754.091 1711.8,751.036 1712.36,730.411 1712.92,712.787 1713.48,713.956 1714.04,728.248 1714.6,708.647 1715.15,674.739 1715.71,675.274 1716.27,670.884 1716.83,686.509 1717.39,653.164 1717.95,667.818 1718.51,648.977 1719.07,682.741 1719.63,652.844 1720.19,650.595 1720.75,650.834 1721.31,635.623 1721.87,654.452 1722.42,670.509 1722.98,618.541 1723.54,624.146 1724.1,611.894 1724.66,617.575 1725.22,604.823 1725.78,640.291 1726.34,657.291 1726.9,644.46 1727.46,664.501 1728.02,681.291 1728.58,684.263 1729.14,669.128 1729.69,651.67 1730.25,637.796 1730.81,574.826 1731.37,582.306 1731.93,571.721 1732.49,561.287 1733.05,549.87 1733.61,556.916 1734.17,566.367 1734.73,559.512 1735.29,564.25 1735.85,520.035 1736.41,528.862 1736.97,568.733 1737.52,575.227 1738.08,563.577 1738.64,587.928 1739.2,592.637 1739.76,596.471 1740.32,601.847 1740.88,603.949 1741.44,609.032 1742,630.616 1742.56,650.447 1743.12,652.009 1743.68,687.299 1744.24,674.114 1744.79,678.213 1745.35,694.967 1745.91,679.756 1746.47,726.117 1747.03,692.169 1747.59,705.93 1748.15,705.393 1748.71,692.856 1749.27,692.287 1749.83,689.09 1750.39,689.28 1750.95,704.147 1751.51,718.821 1752.06,668.12 1752.62,687.132 1753.18,601.665 1753.74,625.314 1754.3,647.817 1754.86,615.312 1755.42,604.188 1755.98,607.097 1756.54,598.621 1757.1,624.3 1757.66,608.815 1758.22,613.417 1758.78,632.827 1759.34,637.125 1759.89,653.768 1760.45,658.792 1761.01,643.736 1761.57,632.619 1762.13,684.188 1762.69,655.256 1763.25,673.589 1763.81,657.145 1764.37,659.612 1764.93,645.716 1765.49,617.226 1766.05,650.418 1766.61,652.038 1767.16,655.133 1767.72,655.783 1768.28,674.174 1768.84,640.467 1769.4,625.709 1769.96,627.773 1770.52,646.651 1771.08,635.366 1771.64,620.947 1772.2,626.263 1772.76,646.149 1773.32,648.789 1773.88,647.782 1774.43,683.279 1774.99,698.795 1775.55,680.611 1776.11,665.285 1776.67,684.778 1777.23,683.191 1777.79,700.07 1778.35,697.538 1778.91,646.165 1779.47,647.833 1780.03,666.523 1780.59,669.856 1781.15,670.823 1781.71,655.63 1782.26,674.14 1782.82,688.735 1783.38,669.681 1783.94,667.498 1784.5,686.345 1785.06,672.146 1785.62,676.15 1786.18,676.197 1786.74,680.214 1787.3,711.05 1787.86,709.395 1788.42,707.992 1788.98,724.16 1789.53,735.999 1790.09,732.234 1790.65,712.997 1791.21,694.334 1791.77,714.128 1792.33,728.88 1792.89,708.114 1793.45,709.348 1794.01,725.4 1794.57,721.218 1795.13,706.619 1795.69,670.585 1796.25,688.567 1796.8,706.036 1797.36,721.537 1797.92,704.687 1798.48,684.847 1799.04,718.21 1799.6,684.769 1800.16,700.876 1800.72,715.354 1801.28,711.933 1801.84,709.98 1802.4,708.405 1802.96,706.266 1803.52,687.302 1804.08,721.478 1804.63,701.914 1805.19,699.158 1805.75,700.487 1806.31,683.307 1806.87,685.84 1807.43,686.506 1807.99,686.391 1808.55,681.084 1809.11,714.001 1809.67,697.107 1810.23,681.611 1810.79,680.681 1811.35,693.885 1811.9,676.536 1812.46,628.453 1813.02,645.84 1813.58,662.64 1814.14,647.33 1814.7,701.754 1815.26,670.139 1815.82,686.805 1816.38,670.381 1816.94,654.047 1817.5,673.091 1818.06,689.184 1818.62,703.413 1819.18,734.89 1819.73,732.663 1820.29,727.733 1820.85,694.743 1821.41,712.369 1821.97,693.864 1822.53,742.089 1823.09,754.288 1823.65,764.338 1824.21,776.55 1824.77,770.129 1825.33,768.372 1825.89,732.576 1826.45,743.546 1827,709.033 1827.56,724.936 1828.12,707.492 1828.68,710.748 1829.24,722.597 1829.8,737.365 1830.36,748.903 1830.92,730.089 1831.48,712.148 1832.04,709.784 1832.6,736.766 1833.16,732.916 1833.72,714.399 1834.27,680.02 1834.83,677.831 1835.39,664.309 1835.95,652.73 1836.51,654.674 1837.07,622.093 1837.63,623.974 1838.19,592.846 \"/>\n<path clip-path=\"url(#clip983)\" d=\"M720.247 691.617 L720.806 691.617 L721.365 691.617 L721.924 691.617 L722.484 691.617 L723.043 691.617 L723.602 691.617 L724.161 691.617 L724.721 691.617 L725.28 691.617 L725.839 691.617 L726.398 691.617 L726.958 691.617 L727.517 691.617 L728.076 691.617 L728.635 691.617 L729.195 691.617 L729.754 691.617 L730.313 691.617 L730.872 691.617 L731.432 691.617 L731.991 691.617 L732.55 691.617 L733.109 691.617 L733.669 691.617 L734.228 691.617 L734.787 691.617 L735.346 691.617 L735.906 691.617 L736.465 691.617 L737.024 691.617 L737.583 691.617 L738.143 691.617 L738.702 691.617 L739.261 691.617 L739.82 691.617 L740.38 691.617 L740.939 691.617 L741.498 691.617 L742.057 691.617 L742.617 691.617 L743.176 691.617 L743.735 691.617 L744.294 691.617 L744.854 691.617 L745.413 691.617 L745.972 691.617 L746.531 691.617 L747.091 691.617 L747.65 691.617 L748.209 691.617 L748.768 691.617 L749.328 691.617 L749.887 691.617 L750.446 691.617 L751.005 691.617 L751.565 691.617 L752.124 691.617 L752.683 691.617 L753.242 691.617 L753.802 691.617 L754.361 691.617 L754.92 691.617 L755.479 691.617 L756.039 691.617 L756.598 691.617 L757.157 691.617 L757.716 691.617 L758.276 691.617 L758.835 691.617 L759.394 691.617 L759.953 691.617 L760.513 691.617 L761.072 691.617 L761.631 691.617 L762.19 691.617 L762.75 691.617 L763.309 691.617 L763.868 691.617 L764.427 691.617 L764.987 691.617 L765.546 691.617 L766.105 691.617 L766.664 691.617 L767.224 691.617 L767.783 691.617 L768.342 691.617 L768.901 691.617 L769.461 691.617 L770.02 691.617 L770.579 691.617 L771.138 691.617 L771.698 691.617 L772.257 691.617 L772.816 691.617 L773.375 691.617 L773.935 691.617 L774.494 691.617 L775.053 691.617 L775.612 691.617 L776.172 691.617 L776.731 691.617 L777.29 691.617 L777.849 691.617 L778.409 691.617 L778.968 691.617 L779.527 691.617 L780.086 691.617 L780.646 691.617 L781.205 691.617 L781.764 691.617 L782.323 691.617 L782.883 691.617 L783.442 691.617 L784.001 691.617 L784.56 691.617 L785.12 691.617 L785.679 691.617 L786.238 691.617 L786.797 691.617 L787.357 691.617 L787.916 691.617 L788.475 691.617 L789.034 691.617 L789.594 691.617 L790.153 691.617 L790.712 691.617 L791.271 691.617 L791.831 691.617 L792.39 691.617 L792.949 691.617 L793.508 691.617 L794.068 691.617 L794.627 691.617 L795.186 691.617 L795.745 691.617 L796.305 691.617 L796.864 691.617 L797.423 691.617 L797.982 691.617 L798.542 691.617 L799.101 691.617 L799.66 691.617 L800.219 691.617 L800.779 691.617 L801.338 691.617 L801.897 691.617 L802.456 691.617 L803.016 691.617 L803.575 691.617 L804.134 691.617 L804.693 691.617 L805.253 691.617 L805.812 691.617 L806.371 691.617 L806.931 691.617 L807.49 691.617 L808.049 691.617 L808.608 691.617 L809.168 691.617 L809.727 691.617 L810.286 691.617 L810.845 691.617 L811.405 691.617 L811.964 691.617 L812.523 691.617 L813.082 691.617 L813.642 691.617 L814.201 691.617 L814.76 691.617 L815.319 691.617 L815.879 691.617 L816.438 691.617 L816.997 691.617 L817.556 691.617 L818.116 691.617 L818.675 691.617 L819.234 691.617 L819.793 691.617 L820.353 691.617 L820.912 691.617 L821.471 691.617 L822.03 691.617 L822.59 691.617 L823.149 691.617 L823.708 691.617 L824.267 691.617 L824.827 691.617 L825.386 691.617 L825.945 691.617 L826.504 691.617 L827.064 691.617 L827.623 691.617 L828.182 691.617 L828.741 691.617 L829.301 691.617 L829.86 691.617 L830.419 691.617 L830.978 691.617 L831.538 691.617 L832.097 691.617 L832.656 691.617 L833.215 691.617 L833.775 691.617 L834.334 691.617 L834.893 691.617 L835.452 691.617 L836.012 691.617 L836.571 691.617 L837.13 691.617 L837.689 691.617 L838.249 691.617 L838.808 691.617 L839.367 691.617 L839.926 691.617 L840.486 691.617 L841.045 691.617 L841.604 691.617 L842.163 691.617 L842.723 691.617 L843.282 691.617 L843.841 691.617 L844.4 691.617 L844.96 691.617 L845.519 691.617 L846.078 691.617 L846.637 691.617 L847.197 691.617 L847.756 691.617 L848.315 691.617 L848.874 691.617 L849.434 691.617 L849.993 691.617 L850.552 691.617 L851.111 691.617 L851.671 691.617 L852.23 691.617 L852.789 691.617 L853.348 691.617 L853.908 691.617 L854.467 691.617 L855.026 691.617 L855.585 691.617 L856.145 691.617 L856.704 691.617 L857.263 691.617 L857.822 691.617 L858.382 691.617 L858.941 691.617 L859.5 691.617 L860.059 691.617 L860.619 691.617 L861.178 691.617 L861.737 691.617 L862.296 691.617 L862.856 691.617 L863.415 691.617 L863.974 691.617 L864.533 691.617 L865.093 691.617 L865.652 691.617 L866.211 691.617 L866.77 691.617 L867.33 691.617 L867.889 691.617 L868.448 691.617 L869.007 691.617 L869.567 691.617 L870.126 691.617 L870.685 691.617 L871.244 691.617 L871.804 691.617 L872.363 691.617 L872.922 691.617 L873.481 691.617 L874.041 691.617 L874.6 691.617 L875.159 691.617 L875.718 691.617 L876.278 691.617 L876.837 691.617 L877.396 691.617 L877.955 691.617 L878.515 691.617 L879.074 691.617 L879.633 691.617 L880.192 691.617 L880.752 691.617 L881.311 691.617 L881.87 691.617 L882.429 691.617 L882.989 691.617 L883.548 691.617 L884.107 691.617 L884.666 691.617 L885.226 691.617 L885.785 691.617 L886.344 691.617 L886.903 691.617 L887.463 691.617 L888.022 691.617 L888.581 691.617 L889.14 691.617 L889.7 691.617 L890.259 691.617 L890.818 691.617 L891.377 691.617 L891.937 691.617 L892.496 691.617 L893.055 691.617 L893.614 691.617 L894.174 691.617 L894.733 691.617 L895.292 691.617 L895.851 691.617 L896.411 691.617 L896.97 691.617 L897.529 691.617 L898.088 691.617 L898.648 691.617 L899.207 691.617 L899.766 691.617 L900.325 691.617 L900.885 691.617 L901.444 691.617 L902.003 691.617 L902.562 691.617 L903.122 691.617 L903.681 691.617 L904.24 691.617 L904.799 691.617 L905.359 691.617 L905.918 691.617 L906.477 691.617 L907.036 691.617 L907.596 691.617 L908.155 691.617 L908.714 691.617 L909.273 691.617 L909.833 691.617 L910.392 691.617 L910.951 691.617 L911.51 691.617 L912.07 691.617 L912.629 691.617 L913.188 691.617 L913.747 691.617 L914.307 691.617 L914.866 691.617 L915.425 691.617 L915.984 691.617 L916.544 691.617 L917.103 691.617 L917.662 691.617 L918.221 691.617 L918.781 691.617 L919.34 691.617 L919.899 691.617 L920.458 691.617 L921.018 691.617 L921.577 691.617 L922.136 691.617 L922.695 691.617 L923.255 691.617 L923.814 691.617 L924.373 691.617 L924.932 691.617 L925.492 691.617 L926.051 691.617 L926.61 691.617 L927.169 691.617 L927.729 691.617 L928.288 691.617 L928.847 691.617 L929.406 691.617 L929.966 691.617 L930.525 691.617 L931.084 691.617 L931.644 691.617 L932.203 691.617 L932.762 691.617 L933.321 691.617 L933.881 691.617 L934.44 691.617 L934.999 691.617 L935.558 691.617 L936.118 691.617 L936.677 691.617 L937.236 691.617 L937.795 691.617 L938.355 691.617 L938.914 691.617 L939.473 691.617 L940.032 691.617 L940.592 691.617 L941.151 691.617 L941.71 691.617 L942.269 691.617 L942.829 691.617 L943.388 691.617 L943.947 691.617 L944.506 691.617 L945.066 691.617 L945.625 691.617 L946.184 691.617 L946.743 691.617 L947.303 691.617 L947.862 691.617 L948.421 691.617 L948.98 691.617 L949.54 691.617 L950.099 691.617 L950.658 691.617 L951.217 691.617 L951.777 691.617 L952.336 691.617 L952.895 691.617 L953.454 691.617 L954.014 691.617 L954.573 691.617 L955.132 691.617 L955.691 691.617 L956.251 691.617 L956.81 691.617 L957.369 691.617 L957.928 691.617 L958.488 691.617 L959.047 691.617 L959.606 691.617 L960.165 691.617 L960.725 691.617 L961.284 691.617 L961.843 691.617 L962.402 691.617 L962.962 691.617 L963.521 691.617 L964.08 691.617 L964.639 691.617 L965.199 691.617 L965.758 691.617 L966.317 691.617 L966.876 691.617 L967.436 691.617 L967.995 691.617 L968.554 691.617 L969.113 691.617 L969.673 691.617 L970.232 691.617 L970.791 691.617 L971.35 691.617 L971.91 691.617 L972.469 691.617 L973.028 691.617 L973.587 691.617 L974.147 691.617 L974.706 691.617 L975.265 691.617 L975.824 691.617 L976.384 691.617 L976.943 691.617 L977.502 691.617 L978.061 691.617 L978.621 691.617 L979.18 691.617 L979.739 691.617 L980.298 691.617 L980.858 691.617 L981.417 691.617 L981.976 691.617 L982.535 691.617 L983.095 691.617 L983.654 691.617 L984.213 691.617 L984.772 691.617 L985.332 691.617 L985.891 691.617 L986.45 691.617 L987.009 691.617 L987.569 691.617 L988.128 691.617 L988.687 691.617 L989.246 691.617 L989.806 691.617 L990.365 691.617 L990.924 691.617 L991.483 691.617 L992.043 691.617 L992.602 691.617 L993.161 691.617 L993.72 691.617 L994.28 691.617 L994.839 691.617 L995.398 691.617 L995.957 691.617 L996.517 691.617 L997.076 691.617 L997.635 691.617 L998.194 691.617 L998.754 691.617 L999.313 691.617 L999.872 691.617 L1000.43 691.617 L1000.99 691.617 L1001.55 691.617 L1002.11 691.617 L1002.67 691.617 L1003.23 691.617 L1003.79 691.617 L1004.35 691.617 L1004.91 691.617 L1005.46 691.617 L1006.02 691.617 L1006.58 691.617 L1007.14 691.617 L1007.7 691.617 L1008.26 691.617 L1008.82 691.617 L1009.38 691.617 L1009.94 691.617 L1010.5 691.617 L1011.06 691.617 L1011.62 691.617 L1012.18 691.617 L1012.73 691.617 L1013.29 691.617 L1013.85 691.617 L1014.41 691.617 L1014.97 691.617 L1015.53 691.617 L1016.09 691.617 L1016.65 691.617 L1017.21 691.617 L1017.77 691.617 L1018.33 691.617 L1018.89 691.617 L1019.45 691.617 L1020.01 691.617 L1020.56 691.617 L1021.12 691.617 L1021.68 691.617 L1022.24 691.617 L1022.8 691.617 L1023.36 691.617 L1023.92 691.617 L1024.48 691.617 L1025.04 691.617 L1025.6 691.617 L1026.16 691.617 L1026.72 691.617 L1027.28 691.617 L1027.83 691.617 L1028.39 691.617 L1028.95 691.617 L1029.51 691.617 L1030.07 691.617 L1030.63 691.617 L1031.19 691.617 L1031.75 691.617 L1032.31 691.617 L1032.87 691.617 L1033.43 691.617 L1033.99 691.617 L1034.55 691.617 L1035.1 691.617 L1035.66 691.617 L1036.22 691.617 L1036.78 691.617 L1037.34 691.617 L1037.9 691.617 L1038.46 691.617 L1039.02 691.617 L1039.58 691.617 L1040.14 691.617 L1040.7 691.617 L1041.26 691.617 L1041.82 691.617 L1042.38 691.617 L1042.93 691.617 L1043.49 691.617 L1044.05 691.617 L1044.61 691.617 L1045.17 691.617 L1045.73 691.617 L1046.29 691.617 L1046.85 691.617 L1047.41 691.617 L1047.97 691.617 L1048.53 691.617 L1049.09 691.617 L1049.65 691.617 L1050.2 691.617 L1050.76 691.617 L1051.32 691.617 L1051.88 691.617 L1052.44 691.617 L1053 691.617 L1053.56 691.617 L1054.12 691.617 L1054.68 691.617 L1055.24 691.617 L1055.8 691.617 L1056.36 691.617 L1056.92 691.617 L1057.48 691.617 L1058.03 691.617 L1058.59 691.617 L1059.15 691.617 L1059.71 691.617 L1060.27 691.617 L1060.83 691.617 L1061.39 691.617 L1061.95 691.617 L1062.51 691.617 L1063.07 691.617 L1063.63 691.617 L1064.19 691.617 L1064.75 691.617 L1065.3 691.617 L1065.86 691.617 L1066.42 691.617 L1066.98 691.617 L1067.54 691.617 L1068.1 691.617 L1068.66 691.617 L1069.22 691.617 L1069.78 691.617 L1070.34 691.617 L1070.9 691.617 L1071.46 691.617 L1072.02 691.617 L1072.57 691.617 L1073.13 691.617 L1073.69 691.617 L1074.25 691.617 L1074.81 691.617 L1075.37 691.617 L1075.93 691.617 L1076.49 691.617 L1077.05 691.617 L1077.61 691.617 L1078.17 691.617 L1078.73 691.617 L1079.29 691.617 L1079.85 691.617 L1080.4 691.617 L1080.96 691.617 L1081.52 691.617 L1082.08 691.617 L1082.64 691.617 L1083.2 691.617 L1083.76 691.617 L1084.32 691.617 L1084.88 691.617 L1085.44 691.617 L1086 691.617 L1086.56 691.617 L1087.12 691.617 L1087.67 691.617 L1088.23 691.617 L1088.79 691.617 L1089.35 691.617 L1089.91 691.617 L1090.47 691.617 L1091.03 691.617 L1091.59 691.617 L1092.15 691.617 L1092.71 691.617 L1093.27 691.617 L1093.83 691.617 L1094.39 691.617 L1094.94 691.617 L1095.5 691.617 L1096.06 691.617 L1096.62 691.617 L1097.18 691.617 L1097.74 691.617 L1098.3 691.617 L1098.86 691.617 L1099.42 691.617 L1099.98 691.617 L1100.54 691.617 L1101.1 691.617 L1101.66 691.617 L1102.22 691.617 L1102.77 691.617 L1103.33 691.617 L1103.89 691.617 L1104.45 691.617 L1105.01 691.617 L1105.57 691.617 L1106.13 691.617 L1106.69 691.617 L1107.25 691.617 L1107.81 691.617 L1108.37 691.617 L1108.93 691.617 L1109.49 691.617 L1110.04 691.617 L1110.6 691.617 L1111.16 691.617 L1111.72 691.617 L1112.28 691.617 L1112.84 691.617 L1113.4 691.617 L1113.96 691.617 L1114.52 691.617 L1115.08 691.617 L1115.64 691.617 L1116.2 691.617 L1116.76 691.617 L1117.31 691.617 L1117.87 691.617 L1118.43 691.617 L1118.99 691.617 L1119.55 691.617 L1120.11 691.617 L1120.67 691.617 L1121.23 691.617 L1121.79 691.617 L1122.35 691.617 L1122.91 691.617 L1123.47 691.617 L1124.03 691.617 L1124.59 691.617 L1125.14 691.617 L1125.7 691.617 L1126.26 691.617 L1126.82 691.617 L1127.38 691.617 L1127.94 691.617 L1128.5 691.617 L1129.06 691.617 L1129.62 691.617 L1130.18 691.617 L1130.74 691.617 L1131.3 691.617 L1131.86 691.617 L1132.41 691.617 L1132.97 691.617 L1133.53 691.617 L1134.09 691.617 L1134.65 691.617 L1135.21 691.617 L1135.77 691.617 L1136.33 691.617 L1136.89 691.617 L1137.45 691.617 L1138.01 691.617 L1138.57 691.617 L1139.13 691.617 L1139.68 691.617 L1140.24 691.617 L1140.8 691.617 L1141.36 691.617 L1141.92 691.617 L1142.48 691.617 L1143.04 691.617 L1143.6 691.617 L1144.16 691.617 L1144.72 691.617 L1145.28 691.617 L1145.84 691.617 L1146.4 691.617 L1146.96 691.617 L1147.51 691.617 L1148.07 691.617 L1148.63 691.617 L1149.19 691.617 L1149.75 691.617 L1150.31 691.617 L1150.87 691.617 L1151.43 691.617 L1151.99 691.617 L1152.55 691.617 L1153.11 691.617 L1153.67 691.617 L1154.23 691.617 L1154.78 691.617 L1155.34 691.617 L1155.9 691.617 L1156.46 691.617 L1157.02 691.617 L1157.58 691.617 L1158.14 691.617 L1158.7 691.617 L1159.26 691.617 L1159.82 691.617 L1160.38 691.617 L1160.94 691.617 L1161.5 691.617 L1162.05 691.617 L1162.61 691.617 L1163.17 691.617 L1163.73 691.617 L1164.29 691.617 L1164.85 691.617 L1165.41 691.617 L1165.97 691.617 L1166.53 691.617 L1167.09 691.617 L1167.65 691.617 L1168.21 691.617 L1168.77 691.617 L1169.33 691.617 L1169.88 691.617 L1170.44 691.617 L1171 691.617 L1171.56 691.617 L1172.12 691.617 L1172.68 691.617 L1173.24 691.617 L1173.8 691.617 L1174.36 691.617 L1174.92 691.617 L1175.48 691.617 L1176.04 691.617 L1176.6 691.617 L1177.15 691.617 L1177.71 691.617 L1178.27 691.617 L1178.83 691.617 L1179.39 691.617 L1179.95 691.617 L1180.51 691.617 L1181.07 691.617 L1181.63 691.617 L1182.19 691.617 L1182.75 691.617 L1183.31 691.617 L1183.87 691.617 L1184.43 691.617 L1184.98 691.617 L1185.54 691.617 L1186.1 691.617 L1186.66 691.617 L1187.22 691.617 L1187.78 691.617 L1188.34 691.617 L1188.9 691.617 L1189.46 691.617 L1190.02 691.617 L1190.58 691.617 L1191.14 691.617 L1191.7 691.617 L1192.25 691.617 L1192.81 691.617 L1193.37 691.617 L1193.93 691.617 L1194.49 691.617 L1195.05 691.617 L1195.61 691.617 L1196.17 691.617 L1196.73 691.617 L1197.29 691.617 L1197.85 691.617 L1198.41 691.617 L1198.97 691.617 L1199.52 691.617 L1200.08 691.617 L1200.64 691.617 L1201.2 691.617 L1201.76 691.617 L1202.32 691.617 L1202.88 691.617 L1203.44 691.617 L1204 691.617 L1204.56 691.617 L1205.12 691.617 L1205.68 691.617 L1206.24 691.617 L1206.8 691.617 L1207.35 691.617 L1207.91 691.617 L1208.47 691.617 L1209.03 691.617 L1209.59 691.617 L1210.15 691.617 L1210.71 691.617 L1211.27 691.617 L1211.83 691.617 L1212.39 691.617 L1212.95 691.617 L1213.51 691.617 L1214.07 691.617 L1214.62 691.617 L1215.18 691.617 L1215.74 691.617 L1216.3 691.617 L1216.86 691.617 L1217.42 691.617 L1217.98 691.617 L1218.54 691.617 L1219.1 691.617 L1219.66 691.617 L1220.22 691.617 L1220.78 691.617 L1221.34 691.617 L1221.89 691.617 L1222.45 691.617 L1223.01 691.617 L1223.57 691.617 L1224.13 691.617 L1224.69 691.617 L1225.25 691.617 L1225.81 691.617 L1226.37 691.617 L1226.93 691.617 L1227.49 691.617 L1228.05 691.617 L1228.61 691.617 L1229.17 691.617 L1229.72 691.617 L1230.28 691.617 L1230.84 691.617 L1231.4 691.617 L1231.96 691.617 L1232.52 691.617 L1233.08 691.617 L1233.64 691.617 L1234.2 691.617 L1234.76 691.617 L1235.32 691.617 L1235.88 691.617 L1236.44 691.617 L1236.99 691.617 L1237.55 691.617 L1238.11 691.617 L1238.67 691.617 L1239.23 691.617 L1239.79 691.617 L1240.35 691.617 L1240.91 691.617 L1241.47 691.617 L1242.03 691.617 L1242.59 691.617 L1243.15 691.617 L1243.71 691.617 L1244.26 691.617 L1244.82 691.617 L1245.38 691.617 L1245.94 691.617 L1246.5 691.617 L1247.06 691.617 L1247.62 691.617 L1248.18 691.617 L1248.74 691.617 L1249.3 691.617 L1249.86 691.617 L1250.42 691.617 L1250.98 691.617 L1251.54 691.617 L1252.09 691.617 L1252.65 691.617 L1253.21 691.617 L1253.77 691.617 L1254.33 691.617 L1254.89 691.617 L1255.45 691.617 L1256.01 691.617 L1256.57 691.617 L1257.13 691.617 L1257.69 691.617 L1258.25 691.617 L1258.81 691.617 L1259.36 691.617 L1259.92 691.617 L1260.48 691.617 L1261.04 691.617 L1261.6 691.617 L1262.16 691.617 L1262.72 691.617 L1263.28 691.617 L1263.84 691.617 L1264.4 691.617 L1264.96 691.617 L1265.52 691.617 L1266.08 691.617 L1266.63 691.617 L1267.19 691.617 L1267.75 691.617 L1268.31 691.617 L1268.87 691.617 L1269.43 691.617 L1269.99 691.617 L1270.55 691.617 L1271.11 691.617 L1271.67 691.617 L1272.23 691.617 L1272.79 691.617 L1273.35 691.617 L1273.91 691.617 L1274.46 691.617 L1275.02 691.617 L1275.58 691.617 L1276.14 691.617 L1276.7 691.617 L1277.26 691.617 L1277.82 691.617 L1278.38 691.617 L1278.94 691.617 L1279.5 691.617 L1280.06 691.617 L1280.62 691.617 L1281.18 691.617 L1281.73 691.617 L1282.29 691.617 L1282.85 691.617 L1283.41 691.617 L1283.97 691.617 L1284.53 691.617 L1285.09 691.617 L1285.65 691.617 L1286.21 691.617 L1286.77 691.617 L1287.33 691.617 L1287.89 691.617 L1288.45 691.617 L1289 691.617 L1289.56 691.617 L1290.12 691.617 L1290.68 691.617 L1291.24 691.617 L1291.8 691.617 L1292.36 691.617 L1292.92 691.617 L1293.48 691.617 L1294.04 691.617 L1294.6 691.617 L1295.16 691.617 L1295.72 691.617 L1296.28 691.617 L1296.83 691.617 L1297.39 691.617 L1297.95 691.617 L1298.51 691.617 L1299.07 691.617 L1299.63 691.617 L1300.19 691.617 L1300.75 691.617 L1301.31 691.617 L1301.87 691.617 L1302.43 691.617 L1302.99 691.617 L1303.55 691.617 L1304.1 691.617 L1304.66 691.617 L1305.22 691.617 L1305.78 691.617 L1306.34 691.617 L1306.9 691.617 L1307.46 691.617 L1308.02 691.617 L1308.58 691.617 L1309.14 691.617 L1309.7 691.617 L1310.26 691.617 L1310.82 691.617 L1311.38 691.617 L1311.93 691.617 L1312.49 691.617 L1313.05 691.617 L1313.61 691.617 L1314.17 691.617 L1314.73 691.617 L1315.29 691.617 L1315.85 691.617 L1316.41 691.617 L1316.97 691.617 L1317.53 691.617 L1318.09 691.617 L1318.65 691.617 L1319.2 691.617 L1319.76 691.617 L1320.32 691.617 L1320.88 691.617 L1321.44 691.617 L1322 691.617 L1322.56 691.617 L1323.12 691.617 L1323.68 691.617 L1324.24 691.617 L1324.8 691.617 L1325.36 691.617 L1325.92 691.617 L1326.47 691.617 L1327.03 691.617 L1327.59 691.617 L1328.15 691.617 L1328.71 691.617 L1329.27 691.617 L1329.83 691.617 L1330.39 691.617 L1330.95 691.617 L1331.51 691.617 L1332.07 691.617 L1332.63 691.617 L1333.19 691.617 L1333.75 691.617 L1334.3 691.617 L1334.86 691.617 L1335.42 691.617 L1335.98 691.617 L1336.54 691.617 L1337.1 691.617 L1337.66 691.617 L1338.22 691.617 L1338.78 691.617 L1339.34 691.617 L1339.9 691.617 L1340.46 691.617 L1341.02 691.617 L1341.57 691.617 L1342.13 691.617 L1342.69 691.617 L1343.25 691.617 L1343.81 691.617 L1344.37 691.617 L1344.93 691.617 L1345.49 691.617 L1346.05 691.617 L1346.61 691.617 L1347.17 691.617 L1347.73 691.617 L1348.29 691.617 L1348.84 691.617 L1349.4 691.617 L1349.96 691.617 L1350.52 691.617 L1351.08 691.617 L1351.64 691.617 L1352.2 691.617 L1352.76 691.617 L1353.32 691.617 L1353.88 691.617 L1354.44 691.617 L1355 691.617 L1355.56 691.617 L1356.12 691.617 L1356.67 691.617 L1357.23 691.617 L1357.79 691.617 L1358.35 691.617 L1358.91 691.617 L1359.47 691.617 L1360.03 691.617 L1360.59 691.617 L1361.15 691.617 L1361.71 691.617 L1362.27 691.617 L1362.83 691.617 L1363.39 691.617 L1363.94 691.617 L1364.5 691.617 L1365.06 691.617 L1365.62 691.617 L1366.18 691.617 L1366.74 691.617 L1367.3 691.617 L1367.86 691.617 L1368.42 691.617 L1368.98 691.617 L1369.54 691.617 L1370.1 691.617 L1370.66 691.617 L1371.21 691.617 L1371.77 691.617 L1372.33 691.617 L1372.89 691.617 L1373.45 691.617 L1374.01 691.617 L1374.57 691.617 L1375.13 691.617 L1375.69 691.617 L1376.25 691.617 L1376.81 691.617 L1377.37 691.617 L1377.93 691.617 L1378.49 691.617 L1379.04 691.617 L1379.6 691.617 L1380.16 691.617 L1380.72 691.617 L1381.28 691.617 L1381.84 691.617 L1382.4 691.617 L1382.96 691.617 L1383.52 691.617 L1384.08 691.617 L1384.64 691.617 L1385.2 691.617 L1385.76 691.617 L1386.31 691.617 L1386.87 691.617 L1387.43 691.617 L1387.99 691.617 L1388.55 691.617 L1389.11 691.617 L1389.67 691.617 L1390.23 691.617 L1390.79 691.617 L1391.35 691.617 L1391.91 691.617 L1392.47 691.617 L1393.03 691.617 L1393.58 691.617 L1394.14 691.617 L1394.7 691.617 L1395.26 691.617 L1395.82 691.617 L1396.38 691.617 L1396.94 691.617 L1397.5 691.617 L1398.06 691.617 L1398.62 691.617 L1399.18 691.617 L1399.74 691.617 L1400.3 691.617 L1400.86 691.617 L1401.41 691.617 L1401.97 691.617 L1402.53 691.617 L1403.09 691.617 L1403.65 691.617 L1404.21 691.617 L1404.77 691.617 L1405.33 691.617 L1405.89 691.617 L1406.45 691.617 L1407.01 691.617 L1407.57 691.617 L1408.13 691.617 L1408.68 691.617 L1409.24 691.617 L1409.8 691.617 L1410.36 691.617 L1410.92 691.617 L1411.48 691.617 L1412.04 691.617 L1412.6 691.617 L1413.16 691.617 L1413.72 691.617 L1414.28 691.617 L1414.84 691.617 L1415.4 691.617 L1415.95 691.617 L1416.51 691.617 L1417.07 691.617 L1417.63 691.617 L1418.19 691.617 L1418.75 691.617 L1419.31 691.617 L1419.87 691.617 L1420.43 691.617 L1420.99 691.617 L1421.55 691.617 L1422.11 691.617 L1422.67 691.617 L1423.23 691.617 L1423.78 691.617 L1424.34 691.617 L1424.9 691.617 L1425.46 691.617 L1426.02 691.617 L1426.58 691.617 L1427.14 691.617 L1427.7 691.617 L1428.26 691.617 L1428.82 691.617 L1429.38 691.617 L1429.94 691.617 L1430.5 691.617 L1431.05 691.617 L1431.61 691.617 L1432.17 691.617 L1432.73 691.617 L1433.29 691.617 L1433.85 691.617 L1434.41 691.617 L1434.97 691.617 L1435.53 691.617 L1436.09 691.617 L1436.65 691.617 L1437.21 691.617 L1437.77 691.617 L1438.33 691.617 L1438.88 691.617 L1439.44 691.617 L1440 691.617 L1440.56 691.617 L1441.12 691.617 L1441.68 691.617 L1442.24 691.617 L1442.8 691.617 L1443.36 691.617 L1443.92 691.617 L1444.48 691.617 L1445.04 691.617 L1445.6 691.617 L1446.15 691.617 L1446.71 691.617 L1447.27 691.617 L1447.83 691.617 L1448.39 691.617 L1448.95 691.617 L1449.51 691.617 L1450.07 691.617 L1450.63 691.617 L1451.19 691.617 L1451.75 691.617 L1452.31 691.617 L1452.87 691.617 L1453.42 691.617 L1453.98 691.617 L1454.54 691.617 L1455.1 691.617 L1455.66 691.617 L1456.22 691.617 L1456.78 691.617 L1457.34 691.617 L1457.9 691.617 L1458.46 691.617 L1459.02 691.617 L1459.58 691.617 L1460.14 691.617 L1460.7 691.617 L1461.25 691.617 L1461.81 691.617 L1462.37 691.617 L1462.93 691.617 L1463.49 691.617 L1464.05 691.617 L1464.61 691.617 L1465.17 691.617 L1465.73 691.617 L1466.29 691.617 L1466.85 691.617 L1467.41 691.617 L1467.97 691.617 L1468.52 691.617 L1469.08 691.617 L1469.64 691.617 L1470.2 691.617 L1470.76 691.617 L1471.32 691.617 L1471.88 691.617 L1472.44 691.617 L1473 691.617 L1473.56 691.617 L1474.12 691.617 L1474.68 691.617 L1475.24 691.617 L1475.79 691.617 L1476.35 691.617 L1476.91 691.617 L1477.47 691.617 L1478.03 691.617 L1478.59 691.617 L1479.15 691.617 L1479.71 691.617 L1480.27 691.617 L1480.83 691.617 L1481.39 691.617 L1481.95 691.617 L1482.51 691.617 L1483.07 691.617 L1483.62 691.617 L1484.18 691.617 L1484.74 691.617 L1485.3 691.617 L1485.86 691.617 L1486.42 691.617 L1486.98 691.617 L1487.54 691.617 L1488.1 691.617 L1488.66 691.617 L1489.22 691.617 L1489.78 691.617 L1490.34 691.617 L1490.89 691.617 L1491.45 691.617 L1492.01 691.617 L1492.57 691.617 L1493.13 691.617 L1493.69 691.617 L1494.25 691.617 L1494.81 691.617 L1495.37 691.617 L1495.93 691.617 L1496.49 691.617 L1497.05 691.617 L1497.61 691.617 L1498.16 691.617 L1498.72 691.617 L1499.28 691.617 L1499.84 691.617 L1500.4 691.617 L1500.96 691.617 L1501.52 691.617 L1502.08 691.617 L1502.64 691.617 L1503.2 691.617 L1503.76 691.617 L1504.32 691.617 L1504.88 691.617 L1505.44 691.617 L1505.99 691.617 L1506.55 691.617 L1507.11 691.617 L1507.67 691.617 L1508.23 691.617 L1508.79 691.617 L1509.35 691.617 L1509.91 691.617 L1510.47 691.617 L1511.03 691.617 L1511.59 691.617 L1512.15 691.617 L1512.71 691.617 L1513.26 691.617 L1513.82 691.617 L1514.38 691.617 L1514.94 691.617 L1515.5 691.617 L1516.06 691.617 L1516.62 691.617 L1517.18 691.617 L1517.74 691.617 L1518.3 691.617 L1518.86 691.617 L1519.42 691.617 L1519.98 691.617 L1520.53 691.617 L1521.09 691.617 L1521.65 691.617 L1522.21 691.617 L1522.77 691.617 L1523.33 691.617 L1523.89 691.617 L1524.45 691.617 L1525.01 691.617 L1525.57 691.617 L1526.13 691.617 L1526.69 691.617 L1527.25 691.617 L1527.81 691.617 L1528.36 691.617 L1528.92 691.617 L1529.48 691.617 L1530.04 691.617 L1530.6 691.617 L1531.16 691.617 L1531.72 691.617 L1532.28 691.617 L1532.84 691.617 L1533.4 691.617 L1533.96 691.617 L1534.52 691.617 L1535.08 691.617 L1535.63 691.617 L1536.19 691.617 L1536.75 691.617 L1537.31 691.617 L1537.87 691.617 L1538.43 691.617 L1538.99 691.617 L1539.55 691.617 L1540.11 691.617 L1540.67 691.617 L1541.23 691.617 L1541.79 691.617 L1542.35 691.617 L1542.9 691.617 L1543.46 691.617 L1544.02 691.617 L1544.58 691.617 L1545.14 691.617 L1545.7 691.617 L1546.26 691.617 L1546.82 691.617 L1547.38 691.617 L1547.94 691.617 L1548.5 691.617 L1549.06 691.617 L1549.62 691.617 L1550.18 691.617 L1550.73 691.617 L1551.29 691.617 L1551.85 691.617 L1552.41 691.617 L1552.97 691.617 L1553.53 691.617 L1554.09 691.617 L1554.65 691.617 L1555.21 691.617 L1555.77 691.617 L1556.33 691.617 L1556.89 691.617 L1557.45 691.617 L1558 691.617 L1558.56 691.617 L1559.12 691.617 L1559.68 691.617 L1560.24 691.617 L1560.8 691.617 L1561.36 691.617 L1561.92 691.617 L1562.48 691.617 L1563.04 691.617 L1563.6 691.617 L1564.16 691.617 L1564.72 691.617 L1565.28 691.617 L1565.83 691.617 L1566.39 691.617 L1566.95 691.617 L1567.51 691.617 L1568.07 691.617 L1568.63 691.617 L1569.19 691.617 L1569.75 691.617 L1570.31 691.617 L1570.87 691.617 L1571.43 691.617 L1571.99 691.617 L1572.55 691.617 L1573.1 691.617 L1573.66 691.617 L1574.22 691.617 L1574.78 691.617 L1575.34 691.617 L1575.9 691.617 L1576.46 691.617 L1577.02 691.617 L1577.58 691.617 L1578.14 691.617 L1578.7 691.617 L1579.26 691.617 L1579.82 691.617 L1580.37 691.617 L1580.93 691.617 L1581.49 691.617 L1582.05 691.617 L1582.61 691.617 L1583.17 691.617 L1583.73 691.617 L1584.29 691.617 L1584.85 691.617 L1585.41 691.617 L1585.97 691.617 L1586.53 691.617 L1587.09 691.617 L1587.65 691.617 L1588.2 691.617 L1588.76 691.617 L1589.32 691.617 L1589.88 691.617 L1590.44 691.617 L1591 691.617 L1591.56 691.617 L1592.12 691.617 L1592.68 691.617 L1593.24 691.617 L1593.8 691.617 L1594.36 691.617 L1594.92 691.617 L1595.47 691.617 L1596.03 691.617 L1596.59 691.617 L1597.15 691.617 L1597.71 691.617 L1598.27 691.617 L1598.83 691.617 L1599.39 691.617 L1599.95 691.617 L1600.51 691.617 L1601.07 691.617 L1601.63 691.617 L1602.19 691.617 L1602.74 691.617 L1603.3 691.617 L1603.86 691.617 L1604.42 691.617 L1604.98 691.617 L1605.54 691.617 L1606.1 691.617 L1606.66 691.617 L1607.22 691.617 L1607.78 691.617 L1608.34 691.617 L1608.9 691.617 L1609.46 691.617 L1610.02 691.617 L1610.57 691.617 L1611.13 691.617 L1611.69 691.617 L1612.25 691.617 L1612.81 691.617 L1613.37 691.617 L1613.93 691.617 L1614.49 691.617 L1615.05 691.617 L1615.61 691.617 L1616.17 691.617 L1616.73 691.617 L1617.29 691.617 L1617.84 691.617 L1618.4 691.617 L1618.96 691.617 L1619.52 691.617 L1620.08 691.617 L1620.64 691.617 L1621.2 691.617 L1621.76 691.617 L1622.32 691.617 L1622.88 691.617 L1623.44 691.617 L1624 691.617 L1624.56 691.617 L1625.11 691.617 L1625.67 691.617 L1626.23 691.617 L1626.79 691.617 L1627.35 691.617 L1627.91 691.617 L1628.47 691.617 L1629.03 691.617 L1629.59 691.617 L1630.15 691.617 L1630.71 691.617 L1631.27 691.617 L1631.83 691.617 L1632.39 691.617 L1632.94 691.617 L1633.5 691.617 L1634.06 691.617 L1634.62 691.617 L1635.18 691.617 L1635.74 691.617 L1636.3 691.617 L1636.86 691.617 L1637.42 691.617 L1637.98 691.617 L1638.54 691.617 L1639.1 691.617 L1639.66 691.617 L1640.21 691.617 L1640.77 691.617 L1641.33 691.617 L1641.89 691.617 L1642.45 691.617 L1643.01 691.617 L1643.57 691.617 L1644.13 691.617 L1644.69 691.617 L1645.25 691.617 L1645.81 691.617 L1646.37 691.617 L1646.93 691.617 L1647.48 691.617 L1648.04 691.617 L1648.6 691.617 L1649.16 691.617 L1649.72 691.617 L1650.28 691.617 L1650.84 691.617 L1651.4 691.617 L1651.96 691.617 L1652.52 691.617 L1653.08 691.617 L1653.64 691.617 L1654.2 691.617 L1654.76 691.617 L1655.31 691.617 L1655.87 691.617 L1656.43 691.617 L1656.99 691.617 L1657.55 691.617 L1658.11 691.617 L1658.67 691.617 L1659.23 691.617 L1659.79 691.617 L1660.35 691.617 L1660.91 691.617 L1661.47 691.617 L1662.03 691.617 L1662.58 691.617 L1663.14 691.617 L1663.7 691.617 L1664.26 691.617 L1664.82 691.617 L1665.38 691.617 L1665.94 691.617 L1666.5 691.617 L1667.06 691.617 L1667.62 691.617 L1668.18 691.617 L1668.74 691.617 L1669.3 691.617 L1669.85 691.617 L1670.41 691.617 L1670.97 691.617 L1671.53 691.617 L1672.09 691.617 L1672.65 691.617 L1673.21 691.617 L1673.77 691.617 L1674.33 691.617 L1674.89 691.617 L1675.45 691.617 L1676.01 691.617 L1676.57 691.617 L1677.13 691.617 L1677.68 691.617 L1678.24 691.617 L1678.8 691.617 L1679.36 691.617 L1679.92 691.617 L1680.48 691.617 L1681.04 691.617 L1681.6 691.617 L1682.16 691.617 L1682.72 691.617 L1683.28 691.617 L1683.84 691.617 L1684.4 691.617 L1684.95 691.617 L1685.51 691.617 L1686.07 691.617 L1686.63 691.617 L1687.19 691.617 L1687.75 691.617 L1688.31 691.617 L1688.87 691.617 L1689.43 691.617 L1689.99 691.617 L1690.55 691.617 L1691.11 691.617 L1691.67 691.617 L1692.23 691.617 L1692.78 691.617 L1693.34 691.617 L1693.9 691.617 L1694.46 691.617 L1695.02 691.617 L1695.58 691.617 L1696.14 691.617 L1696.7 691.617 L1697.26 691.617 L1697.82 691.617 L1698.38 691.617 L1698.94 691.617 L1699.5 691.617 L1700.05 691.617 L1700.61 691.617 L1701.17 691.617 L1701.73 691.617 L1702.29 691.617 L1702.85 691.617 L1703.41 691.617 L1703.97 691.617 L1704.53 691.617 L1705.09 691.617 L1705.65 691.617 L1706.21 691.617 L1706.77 691.617 L1707.32 691.617 L1707.88 691.617 L1708.44 691.617 L1709 691.617 L1709.56 691.617 L1710.12 691.617 L1710.68 691.617 L1711.24 691.617 L1711.8 691.617 L1712.36 691.617 L1712.92 691.617 L1713.48 691.617 L1714.04 691.617 L1714.6 691.617 L1715.15 691.617 L1715.71 691.617 L1716.27 691.617 L1716.83 691.617 L1717.39 691.617 L1717.95 691.617 L1718.51 691.617 L1719.07 691.617 L1719.63 691.617 L1720.19 691.617 L1720.75 691.617 L1721.31 691.617 L1721.87 691.617 L1722.42 691.617 L1722.98 691.617 L1723.54 691.617 L1724.1 691.617 L1724.66 691.617 L1725.22 691.617 L1725.78 691.617 L1726.34 691.617 L1726.9 691.617 L1727.46 691.617 L1728.02 691.617 L1728.58 691.617 L1729.14 691.617 L1729.69 691.617 L1730.25 691.617 L1730.81 691.617 L1731.37 691.617 L1731.93 691.617 L1732.49 691.617 L1733.05 691.617 L1733.61 691.617 L1734.17 691.617 L1734.73 691.617 L1735.29 691.617 L1735.85 691.617 L1736.41 691.617 L1736.97 691.617 L1737.52 691.617 L1738.08 691.617 L1738.64 691.617 L1739.2 691.617 L1739.76 691.617 L1740.32 691.617 L1740.88 691.617 L1741.44 691.617 L1742 691.617 L1742.56 691.617 L1743.12 691.617 L1743.68 691.617 L1744.24 691.617 L1744.79 691.617 L1745.35 691.617 L1745.91 691.617 L1746.47 691.617 L1747.03 691.617 L1747.59 691.617 L1748.15 691.617 L1748.71 691.617 L1749.27 691.617 L1749.83 691.617 L1750.39 691.617 L1750.95 691.617 L1751.51 691.617 L1752.06 691.617 L1752.62 691.617 L1753.18 691.617 L1753.74 691.617 L1754.3 691.617 L1754.86 691.617 L1755.42 691.617 L1755.98 691.617 L1756.54 691.617 L1757.1 691.617 L1757.66 691.617 L1758.22 691.617 L1758.78 691.617 L1759.34 691.617 L1759.89 691.617 L1760.45 691.617 L1761.01 691.617 L1761.57 691.617 L1762.13 691.617 L1762.69 691.617 L1763.25 691.617 L1763.81 691.617 L1764.37 691.617 L1764.93 691.617 L1765.49 691.617 L1766.05 691.617 L1766.61 691.617 L1767.16 691.617 L1767.72 691.617 L1768.28 691.617 L1768.84 691.617 L1769.4 691.617 L1769.96 691.617 L1770.52 691.617 L1771.08 691.617 L1771.64 691.617 L1772.2 691.617 L1772.76 691.617 L1773.32 691.617 L1773.88 691.617 L1774.43 691.617 L1774.99 691.617 L1775.55 691.617 L1776.11 691.617 L1776.67 691.617 L1777.23 691.617 L1777.79 691.617 L1778.35 691.617 L1778.91 691.617 L1779.47 691.617 L1780.03 691.617 L1780.59 691.617 L1781.15 691.617 L1781.71 691.617 L1782.26 691.617 L1782.82 691.617 L1783.38 691.617 L1783.94 691.617 L1784.5 691.617 L1785.06 691.617 L1785.62 691.617 L1786.18 691.617 L1786.74 691.617 L1787.3 691.617 L1787.86 691.617 L1788.42 691.617 L1788.98 691.617 L1789.53 691.617 L1790.09 691.617 L1790.65 691.617 L1791.21 691.617 L1791.77 691.617 L1792.33 691.617 L1792.89 691.617 L1793.45 691.617 L1794.01 691.617 L1794.57 691.617 L1795.13 691.617 L1795.69 691.617 L1796.25 691.617 L1796.8 691.617 L1797.36 691.617 L1797.92 691.617 L1798.48 691.617 L1799.04 691.617 L1799.6 691.617 L1800.16 691.617 L1800.72 691.617 L1801.28 691.617 L1801.84 691.617 L1802.4 691.617 L1802.96 691.617 L1803.52 691.617 L1804.08 691.617 L1804.63 691.617 L1805.19 691.617 L1805.75 691.617 L1806.31 691.617 L1806.87 691.617 L1807.43 691.617 L1807.99 691.617 L1808.55 691.617 L1809.11 691.617 L1809.67 691.617 L1810.23 691.617 L1810.79 691.617 L1811.35 691.617 L1811.9 691.617 L1812.46 691.617 L1813.02 691.617 L1813.58 691.617 L1814.14 691.617 L1814.7 691.617 L1815.26 691.617 L1815.82 691.617 L1816.38 691.617 L1816.94 691.617 L1817.5 691.617 L1818.06 691.617 L1818.62 691.617 L1819.18 691.617 L1819.73 691.617 L1820.29 691.617 L1820.85 691.617 L1821.41 691.617 L1821.97 691.617 L1822.53 691.617 L1823.09 691.617 L1823.65 691.617 L1824.21 691.617 L1824.77 691.617 L1825.33 691.617 L1825.89 691.617 L1826.45 691.617 L1827 691.617 L1827.56 691.617 L1828.12 691.617 L1828.68 691.617 L1829.24 691.617 L1829.8 691.617 L1830.36 691.617 L1830.92 691.617 L1831.48 691.617 L1832.04 691.617 L1832.6 691.617 L1833.16 691.617 L1833.72 691.617 L1834.27 691.617 L1834.83 691.617 L1835.39 691.617 L1835.95 691.617 L1836.51 691.617 L1837.07 691.617 L1837.63 691.617 L1838.19 691.617 L1838.19 682.464 L1837.63 682.464 L1837.07 682.464 L1836.51 682.464 L1835.95 682.464 L1835.39 682.464 L1834.83 682.464 L1834.27 682.464 L1833.72 682.464 L1833.16 682.464 L1832.6 682.464 L1832.04 682.464 L1831.48 682.464 L1830.92 682.464 L1830.36 682.464 L1829.8 682.464 L1829.24 682.464 L1828.68 682.464 L1828.12 682.464 L1827.56 682.464 L1827 682.464 L1826.45 682.464 L1825.89 682.464 L1825.33 682.464 L1824.77 682.464 L1824.21 682.464 L1823.65 682.464 L1823.09 682.464 L1822.53 682.464 L1821.97 682.464 L1821.41 682.464 L1820.85 682.464 L1820.29 682.464 L1819.73 682.464 L1819.18 682.464 L1818.62 682.464 L1818.06 682.464 L1817.5 682.464 L1816.94 682.464 L1816.38 682.464 L1815.82 682.464 L1815.26 682.464 L1814.7 682.464 L1814.14 682.464 L1813.58 682.464 L1813.02 682.464 L1812.46 682.464 L1811.9 682.464 L1811.35 682.464 L1810.79 682.464 L1810.23 682.464 L1809.67 682.464 L1809.11 682.464 L1808.55 682.464 L1807.99 682.464 L1807.43 682.464 L1806.87 682.464 L1806.31 682.464 L1805.75 682.464 L1805.19 682.464 L1804.63 682.464 L1804.08 682.464 L1803.52 682.464 L1802.96 682.464 L1802.4 682.464 L1801.84 682.464 L1801.28 682.464 L1800.72 682.464 L1800.16 682.464 L1799.6 682.464 L1799.04 682.464 L1798.48 682.464 L1797.92 682.464 L1797.36 682.464 L1796.8 682.464 L1796.25 682.464 L1795.69 682.464 L1795.13 682.464 L1794.57 682.464 L1794.01 682.464 L1793.45 682.464 L1792.89 682.464 L1792.33 682.464 L1791.77 682.464 L1791.21 682.464 L1790.65 682.464 L1790.09 682.464 L1789.53 682.464 L1788.98 682.464 L1788.42 682.464 L1787.86 682.464 L1787.3 682.464 L1786.74 682.464 L1786.18 682.464 L1785.62 682.464 L1785.06 682.464 L1784.5 682.464 L1783.94 682.464 L1783.38 682.464 L1782.82 682.464 L1782.26 682.464 L1781.71 682.464 L1781.15 682.464 L1780.59 682.464 L1780.03 682.464 L1779.47 682.464 L1778.91 682.464 L1778.35 682.464 L1777.79 682.464 L1777.23 682.464 L1776.67 682.464 L1776.11 682.464 L1775.55 682.464 L1774.99 682.464 L1774.43 682.464 L1773.88 682.464 L1773.32 682.464 L1772.76 682.464 L1772.2 682.464 L1771.64 682.464 L1771.08 682.464 L1770.52 682.464 L1769.96 682.464 L1769.4 682.464 L1768.84 682.464 L1768.28 682.464 L1767.72 682.464 L1767.16 682.464 L1766.61 682.464 L1766.05 682.464 L1765.49 682.464 L1764.93 682.464 L1764.37 682.464 L1763.81 682.464 L1763.25 682.464 L1762.69 682.464 L1762.13 682.464 L1761.57 682.464 L1761.01 682.464 L1760.45 682.464 L1759.89 682.464 L1759.34 682.464 L1758.78 682.464 L1758.22 682.464 L1757.66 682.464 L1757.1 682.464 L1756.54 682.464 L1755.98 682.464 L1755.42 682.464 L1754.86 682.464 L1754.3 682.464 L1753.74 682.464 L1753.18 682.464 L1752.62 682.464 L1752.06 682.464 L1751.51 682.464 L1750.95 682.464 L1750.39 682.464 L1749.83 682.464 L1749.27 682.464 L1748.71 682.464 L1748.15 682.464 L1747.59 682.464 L1747.03 682.464 L1746.47 682.464 L1745.91 682.464 L1745.35 682.464 L1744.79 682.464 L1744.24 682.464 L1743.68 682.464 L1743.12 682.464 L1742.56 682.464 L1742 682.464 L1741.44 682.464 L1740.88 682.464 L1740.32 682.464 L1739.76 682.464 L1739.2 682.464 L1738.64 682.464 L1738.08 682.464 L1737.52 682.464 L1736.97 682.464 L1736.41 682.464 L1735.85 682.464 L1735.29 682.464 L1734.73 682.464 L1734.17 682.464 L1733.61 682.464 L1733.05 682.464 L1732.49 682.464 L1731.93 682.464 L1731.37 682.464 L1730.81 682.464 L1730.25 682.464 L1729.69 682.464 L1729.14 682.464 L1728.58 682.464 L1728.02 682.464 L1727.46 682.464 L1726.9 682.464 L1726.34 682.464 L1725.78 682.464 L1725.22 682.464 L1724.66 682.464 L1724.1 682.464 L1723.54 682.464 L1722.98 682.464 L1722.42 682.464 L1721.87 682.464 L1721.31 682.464 L1720.75 682.464 L1720.19 682.464 L1719.63 682.464 L1719.07 682.464 L1718.51 682.464 L1717.95 682.464 L1717.39 682.464 L1716.83 682.464 L1716.27 682.464 L1715.71 682.464 L1715.15 682.464 L1714.6 682.464 L1714.04 682.464 L1713.48 682.464 L1712.92 682.464 L1712.36 682.464 L1711.8 682.464 L1711.24 682.464 L1710.68 682.464 L1710.12 682.464 L1709.56 682.464 L1709 682.464 L1708.44 682.464 L1707.88 682.464 L1707.32 682.464 L1706.77 682.464 L1706.21 682.464 L1705.65 682.464 L1705.09 682.464 L1704.53 682.464 L1703.97 682.464 L1703.41 682.464 L1702.85 682.464 L1702.29 682.464 L1701.73 682.464 L1701.17 682.464 L1700.61 682.464 L1700.05 682.464 L1699.5 682.464 L1698.94 682.464 L1698.38 682.464 L1697.82 682.464 L1697.26 682.464 L1696.7 682.464 L1696.14 682.464 L1695.58 682.464 L1695.02 682.464 L1694.46 682.464 L1693.9 682.464 L1693.34 682.464 L1692.78 682.464 L1692.23 682.464 L1691.67 682.464 L1691.11 682.464 L1690.55 682.464 L1689.99 682.464 L1689.43 682.464 L1688.87 682.464 L1688.31 682.464 L1687.75 682.464 L1687.19 682.464 L1686.63 682.464 L1686.07 682.464 L1685.51 682.464 L1684.95 682.464 L1684.4 682.464 L1683.84 682.464 L1683.28 682.464 L1682.72 682.464 L1682.16 682.464 L1681.6 682.464 L1681.04 682.464 L1680.48 682.464 L1679.92 682.464 L1679.36 682.464 L1678.8 682.464 L1678.24 682.464 L1677.68 682.464 L1677.13 682.464 L1676.57 682.464 L1676.01 682.464 L1675.45 682.464 L1674.89 682.464 L1674.33 682.464 L1673.77 682.464 L1673.21 682.464 L1672.65 682.464 L1672.09 682.464 L1671.53 682.464 L1670.97 682.464 L1670.41 682.464 L1669.85 682.464 L1669.3 682.464 L1668.74 682.464 L1668.18 682.464 L1667.62 682.464 L1667.06 682.464 L1666.5 682.464 L1665.94 682.464 L1665.38 682.464 L1664.82 682.464 L1664.26 682.464 L1663.7 682.464 L1663.14 682.464 L1662.58 682.464 L1662.03 682.464 L1661.47 682.464 L1660.91 682.464 L1660.35 682.464 L1659.79 682.464 L1659.23 682.464 L1658.67 682.464 L1658.11 682.464 L1657.55 682.464 L1656.99 682.464 L1656.43 682.464 L1655.87 682.464 L1655.31 682.464 L1654.76 682.464 L1654.2 682.464 L1653.64 682.464 L1653.08 682.464 L1652.52 682.464 L1651.96 682.464 L1651.4 682.464 L1650.84 682.464 L1650.28 682.464 L1649.72 682.464 L1649.16 682.464 L1648.6 682.464 L1648.04 682.464 L1647.48 682.464 L1646.93 682.464 L1646.37 682.464 L1645.81 682.464 L1645.25 682.464 L1644.69 682.464 L1644.13 682.464 L1643.57 682.464 L1643.01 682.464 L1642.45 682.464 L1641.89 682.464 L1641.33 682.464 L1640.77 682.464 L1640.21 682.464 L1639.66 682.464 L1639.1 682.464 L1638.54 682.464 L1637.98 682.464 L1637.42 682.464 L1636.86 682.464 L1636.3 682.464 L1635.74 682.464 L1635.18 682.464 L1634.62 682.464 L1634.06 682.464 L1633.5 682.464 L1632.94 682.464 L1632.39 682.464 L1631.83 682.464 L1631.27 682.464 L1630.71 682.464 L1630.15 682.464 L1629.59 682.464 L1629.03 682.464 L1628.47 682.464 L1627.91 682.464 L1627.35 682.464 L1626.79 682.464 L1626.23 682.464 L1625.67 682.464 L1625.11 682.464 L1624.56 682.464 L1624 682.464 L1623.44 682.464 L1622.88 682.464 L1622.32 682.464 L1621.76 682.464 L1621.2 682.464 L1620.64 682.464 L1620.08 682.464 L1619.52 682.464 L1618.96 682.464 L1618.4 682.464 L1617.84 682.464 L1617.29 682.464 L1616.73 682.464 L1616.17 682.464 L1615.61 682.464 L1615.05 682.464 L1614.49 682.464 L1613.93 682.464 L1613.37 682.464 L1612.81 682.464 L1612.25 682.464 L1611.69 682.464 L1611.13 682.464 L1610.57 682.464 L1610.02 682.464 L1609.46 682.464 L1608.9 682.464 L1608.34 682.464 L1607.78 682.464 L1607.22 682.464 L1606.66 682.464 L1606.1 682.464 L1605.54 682.464 L1604.98 682.464 L1604.42 682.464 L1603.86 682.464 L1603.3 682.464 L1602.74 682.464 L1602.19 682.464 L1601.63 682.464 L1601.07 682.464 L1600.51 682.464 L1599.95 682.464 L1599.39 682.464 L1598.83 682.464 L1598.27 682.464 L1597.71 682.464 L1597.15 682.464 L1596.59 682.464 L1596.03 682.464 L1595.47 682.464 L1594.92 682.464 L1594.36 682.464 L1593.8 682.464 L1593.24 682.464 L1592.68 682.464 L1592.12 682.464 L1591.56 682.464 L1591 682.464 L1590.44 682.464 L1589.88 682.464 L1589.32 682.464 L1588.76 682.464 L1588.2 682.464 L1587.65 682.464 L1587.09 682.464 L1586.53 682.464 L1585.97 682.464 L1585.41 682.464 L1584.85 682.464 L1584.29 682.464 L1583.73 682.464 L1583.17 682.464 L1582.61 682.464 L1582.05 682.464 L1581.49 682.464 L1580.93 682.464 L1580.37 682.464 L1579.82 682.464 L1579.26 682.464 L1578.7 682.464 L1578.14 682.464 L1577.58 682.464 L1577.02 682.464 L1576.46 682.464 L1575.9 682.464 L1575.34 682.464 L1574.78 682.464 L1574.22 682.464 L1573.66 682.464 L1573.1 682.464 L1572.55 682.464 L1571.99 682.464 L1571.43 682.464 L1570.87 682.464 L1570.31 682.464 L1569.75 682.464 L1569.19 682.464 L1568.63 682.464 L1568.07 682.464 L1567.51 682.464 L1566.95 682.464 L1566.39 682.464 L1565.83 682.464 L1565.28 682.464 L1564.72 682.464 L1564.16 682.464 L1563.6 682.464 L1563.04 682.464 L1562.48 682.464 L1561.92 682.464 L1561.36 682.464 L1560.8 682.464 L1560.24 682.464 L1559.68 682.464 L1559.12 682.464 L1558.56 682.464 L1558 682.464 L1557.45 682.464 L1556.89 682.464 L1556.33 682.464 L1555.77 682.464 L1555.21 682.464 L1554.65 682.464 L1554.09 682.464 L1553.53 682.464 L1552.97 682.464 L1552.41 682.464 L1551.85 682.464 L1551.29 682.464 L1550.73 682.464 L1550.18 682.464 L1549.62 682.464 L1549.06 682.464 L1548.5 682.464 L1547.94 682.464 L1547.38 682.464 L1546.82 682.464 L1546.26 682.464 L1545.7 682.464 L1545.14 682.464 L1544.58 682.464 L1544.02 682.464 L1543.46 682.464 L1542.9 682.464 L1542.35 682.464 L1541.79 682.464 L1541.23 682.464 L1540.67 682.464 L1540.11 682.464 L1539.55 682.464 L1538.99 682.464 L1538.43 682.464 L1537.87 682.464 L1537.31 682.464 L1536.75 682.464 L1536.19 682.464 L1535.63 682.464 L1535.08 682.464 L1534.52 682.464 L1533.96 682.464 L1533.4 682.464 L1532.84 682.464 L1532.28 682.464 L1531.72 682.464 L1531.16 682.464 L1530.6 682.464 L1530.04 682.464 L1529.48 682.464 L1528.92 682.464 L1528.36 682.464 L1527.81 682.464 L1527.25 682.464 L1526.69 682.464 L1526.13 682.464 L1525.57 682.464 L1525.01 682.464 L1524.45 682.464 L1523.89 682.464 L1523.33 682.464 L1522.77 682.464 L1522.21 682.464 L1521.65 682.464 L1521.09 682.464 L1520.53 682.464 L1519.98 682.464 L1519.42 682.464 L1518.86 682.464 L1518.3 682.464 L1517.74 682.464 L1517.18 682.464 L1516.62 682.464 L1516.06 682.464 L1515.5 682.464 L1514.94 682.464 L1514.38 682.464 L1513.82 682.464 L1513.26 682.464 L1512.71 682.464 L1512.15 682.464 L1511.59 682.464 L1511.03 682.464 L1510.47 682.464 L1509.91 682.464 L1509.35 682.464 L1508.79 682.464 L1508.23 682.464 L1507.67 682.464 L1507.11 682.464 L1506.55 682.464 L1505.99 682.464 L1505.44 682.464 L1504.88 682.464 L1504.32 682.464 L1503.76 682.464 L1503.2 682.464 L1502.64 682.464 L1502.08 682.464 L1501.52 682.464 L1500.96 682.464 L1500.4 682.464 L1499.84 682.464 L1499.28 682.464 L1498.72 682.464 L1498.16 682.464 L1497.61 682.464 L1497.05 682.464 L1496.49 682.464 L1495.93 682.464 L1495.37 682.464 L1494.81 682.464 L1494.25 682.464 L1493.69 682.464 L1493.13 682.464 L1492.57 682.464 L1492.01 682.464 L1491.45 682.464 L1490.89 682.464 L1490.34 682.464 L1489.78 682.464 L1489.22 682.464 L1488.66 682.464 L1488.1 682.464 L1487.54 682.464 L1486.98 682.464 L1486.42 682.464 L1485.86 682.464 L1485.3 682.464 L1484.74 682.464 L1484.18 682.464 L1483.62 682.464 L1483.07 682.464 L1482.51 682.464 L1481.95 682.464 L1481.39 682.464 L1480.83 682.464 L1480.27 682.464 L1479.71 682.464 L1479.15 682.464 L1478.59 682.464 L1478.03 682.464 L1477.47 682.464 L1476.91 682.464 L1476.35 682.464 L1475.79 682.464 L1475.24 682.464 L1474.68 682.464 L1474.12 682.464 L1473.56 682.464 L1473 682.464 L1472.44 682.464 L1471.88 682.464 L1471.32 682.464 L1470.76 682.464 L1470.2 682.464 L1469.64 682.464 L1469.08 682.464 L1468.52 682.464 L1467.97 682.464 L1467.41 682.464 L1466.85 682.464 L1466.29 682.464 L1465.73 682.464 L1465.17 682.464 L1464.61 682.464 L1464.05 682.464 L1463.49 682.464 L1462.93 682.464 L1462.37 682.464 L1461.81 682.464 L1461.25 682.464 L1460.7 682.464 L1460.14 682.464 L1459.58 682.464 L1459.02 682.464 L1458.46 682.464 L1457.9 682.464 L1457.34 682.464 L1456.78 682.464 L1456.22 682.464 L1455.66 682.464 L1455.1 682.464 L1454.54 682.464 L1453.98 682.464 L1453.42 682.464 L1452.87 682.464 L1452.31 682.464 L1451.75 682.464 L1451.19 682.464 L1450.63 682.464 L1450.07 682.464 L1449.51 682.464 L1448.95 682.464 L1448.39 682.464 L1447.83 682.464 L1447.27 682.464 L1446.71 682.464 L1446.15 682.464 L1445.6 682.464 L1445.04 682.464 L1444.48 682.464 L1443.92 682.464 L1443.36 682.464 L1442.8 682.464 L1442.24 682.464 L1441.68 682.464 L1441.12 682.464 L1440.56 682.464 L1440 682.464 L1439.44 682.464 L1438.88 682.464 L1438.33 682.464 L1437.77 682.464 L1437.21 682.464 L1436.65 682.464 L1436.09 682.464 L1435.53 682.464 L1434.97 682.464 L1434.41 682.464 L1433.85 682.464 L1433.29 682.464 L1432.73 682.464 L1432.17 682.464 L1431.61 682.464 L1431.05 682.464 L1430.5 682.464 L1429.94 682.464 L1429.38 682.464 L1428.82 682.464 L1428.26 682.464 L1427.7 682.464 L1427.14 682.464 L1426.58 682.464 L1426.02 682.464 L1425.46 682.464 L1424.9 682.464 L1424.34 682.464 L1423.78 682.464 L1423.23 682.464 L1422.67 682.464 L1422.11 682.464 L1421.55 682.464 L1420.99 682.464 L1420.43 682.464 L1419.87 682.464 L1419.31 682.464 L1418.75 682.464 L1418.19 682.464 L1417.63 682.464 L1417.07 682.464 L1416.51 682.464 L1415.95 682.464 L1415.4 682.464 L1414.84 682.464 L1414.28 682.464 L1413.72 682.464 L1413.16 682.464 L1412.6 682.464 L1412.04 682.464 L1411.48 682.464 L1410.92 682.464 L1410.36 682.464 L1409.8 682.464 L1409.24 682.464 L1408.68 682.464 L1408.13 682.464 L1407.57 682.464 L1407.01 682.464 L1406.45 682.464 L1405.89 682.464 L1405.33 682.464 L1404.77 682.464 L1404.21 682.464 L1403.65 682.464 L1403.09 682.464 L1402.53 682.464 L1401.97 682.464 L1401.41 682.464 L1400.86 682.464 L1400.3 682.464 L1399.74 682.464 L1399.18 682.464 L1398.62 682.464 L1398.06 682.464 L1397.5 682.464 L1396.94 682.464 L1396.38 682.464 L1395.82 682.464 L1395.26 682.464 L1394.7 682.464 L1394.14 682.464 L1393.58 682.464 L1393.03 682.464 L1392.47 682.464 L1391.91 682.464 L1391.35 682.464 L1390.79 682.464 L1390.23 682.464 L1389.67 682.464 L1389.11 682.464 L1388.55 682.464 L1387.99 682.464 L1387.43 682.464 L1386.87 682.464 L1386.31 682.464 L1385.76 682.464 L1385.2 682.464 L1384.64 682.464 L1384.08 682.464 L1383.52 682.464 L1382.96 682.464 L1382.4 682.464 L1381.84 682.464 L1381.28 682.464 L1380.72 682.464 L1380.16 682.464 L1379.6 682.464 L1379.04 682.464 L1378.49 682.464 L1377.93 682.464 L1377.37 682.464 L1376.81 682.464 L1376.25 682.464 L1375.69 682.464 L1375.13 682.464 L1374.57 682.464 L1374.01 682.464 L1373.45 682.464 L1372.89 682.464 L1372.33 682.464 L1371.77 682.464 L1371.21 682.464 L1370.66 682.464 L1370.1 682.464 L1369.54 682.464 L1368.98 682.464 L1368.42 682.464 L1367.86 682.464 L1367.3 682.464 L1366.74 682.464 L1366.18 682.464 L1365.62 682.464 L1365.06 682.464 L1364.5 682.464 L1363.94 682.464 L1363.39 682.464 L1362.83 682.464 L1362.27 682.464 L1361.71 682.464 L1361.15 682.464 L1360.59 682.464 L1360.03 682.464 L1359.47 682.464 L1358.91 682.464 L1358.35 682.464 L1357.79 682.464 L1357.23 682.464 L1356.67 682.464 L1356.12 682.464 L1355.56 682.464 L1355 682.464 L1354.44 682.464 L1353.88 682.464 L1353.32 682.464 L1352.76 682.464 L1352.2 682.464 L1351.64 682.464 L1351.08 682.464 L1350.52 682.464 L1349.96 682.464 L1349.4 682.464 L1348.84 682.464 L1348.29 682.464 L1347.73 682.464 L1347.17 682.464 L1346.61 682.464 L1346.05 682.464 L1345.49 682.464 L1344.93 682.464 L1344.37 682.464 L1343.81 682.464 L1343.25 682.464 L1342.69 682.464 L1342.13 682.464 L1341.57 682.464 L1341.02 682.464 L1340.46 682.464 L1339.9 682.464 L1339.34 682.464 L1338.78 682.464 L1338.22 682.464 L1337.66 682.464 L1337.1 682.464 L1336.54 682.464 L1335.98 682.464 L1335.42 682.464 L1334.86 682.464 L1334.3 682.464 L1333.75 682.464 L1333.19 682.464 L1332.63 682.464 L1332.07 682.464 L1331.51 682.464 L1330.95 682.464 L1330.39 682.464 L1329.83 682.464 L1329.27 682.464 L1328.71 682.464 L1328.15 682.464 L1327.59 682.464 L1327.03 682.464 L1326.47 682.464 L1325.92 682.464 L1325.36 682.464 L1324.8 682.464 L1324.24 682.464 L1323.68 682.464 L1323.12 682.464 L1322.56 682.464 L1322 682.464 L1321.44 682.464 L1320.88 682.464 L1320.32 682.464 L1319.76 682.464 L1319.2 682.464 L1318.65 682.464 L1318.09 682.464 L1317.53 682.464 L1316.97 682.464 L1316.41 682.464 L1315.85 682.464 L1315.29 682.464 L1314.73 682.464 L1314.17 682.464 L1313.61 682.464 L1313.05 682.464 L1312.49 682.464 L1311.93 682.464 L1311.38 682.464 L1310.82 682.464 L1310.26 682.464 L1309.7 682.464 L1309.14 682.464 L1308.58 682.464 L1308.02 682.464 L1307.46 682.464 L1306.9 682.464 L1306.34 682.464 L1305.78 682.464 L1305.22 682.464 L1304.66 682.464 L1304.1 682.464 L1303.55 682.464 L1302.99 682.464 L1302.43 682.464 L1301.87 682.464 L1301.31 682.464 L1300.75 682.464 L1300.19 682.464 L1299.63 682.464 L1299.07 682.464 L1298.51 682.464 L1297.95 682.464 L1297.39 682.464 L1296.83 682.464 L1296.28 682.464 L1295.72 682.464 L1295.16 682.464 L1294.6 682.464 L1294.04 682.464 L1293.48 682.464 L1292.92 682.464 L1292.36 682.464 L1291.8 682.464 L1291.24 682.464 L1290.68 682.464 L1290.12 682.464 L1289.56 682.464 L1289 682.464 L1288.45 682.464 L1287.89 682.464 L1287.33 682.464 L1286.77 682.464 L1286.21 682.464 L1285.65 682.464 L1285.09 682.464 L1284.53 682.464 L1283.97 682.464 L1283.41 682.464 L1282.85 682.464 L1282.29 682.464 L1281.73 682.464 L1281.18 682.464 L1280.62 682.464 L1280.06 682.464 L1279.5 682.464 L1278.94 682.464 L1278.38 682.464 L1277.82 682.464 L1277.26 682.464 L1276.7 682.464 L1276.14 682.464 L1275.58 682.464 L1275.02 682.464 L1274.46 682.464 L1273.91 682.464 L1273.35 682.464 L1272.79 682.464 L1272.23 682.464 L1271.67 682.464 L1271.11 682.464 L1270.55 682.464 L1269.99 682.464 L1269.43 682.464 L1268.87 682.464 L1268.31 682.464 L1267.75 682.464 L1267.19 682.464 L1266.63 682.464 L1266.08 682.464 L1265.52 682.464 L1264.96 682.464 L1264.4 682.464 L1263.84 682.464 L1263.28 682.464 L1262.72 682.464 L1262.16 682.464 L1261.6 682.464 L1261.04 682.464 L1260.48 682.464 L1259.92 682.464 L1259.36 682.464 L1258.81 682.464 L1258.25 682.464 L1257.69 682.464 L1257.13 682.464 L1256.57 682.464 L1256.01 682.464 L1255.45 682.464 L1254.89 682.464 L1254.33 682.464 L1253.77 682.464 L1253.21 682.464 L1252.65 682.464 L1252.09 682.464 L1251.54 682.464 L1250.98 682.464 L1250.42 682.464 L1249.86 682.464 L1249.3 682.464 L1248.74 682.464 L1248.18 682.464 L1247.62 682.464 L1247.06 682.464 L1246.5 682.464 L1245.94 682.464 L1245.38 682.464 L1244.82 682.464 L1244.26 682.464 L1243.71 682.464 L1243.15 682.464 L1242.59 682.464 L1242.03 682.464 L1241.47 682.464 L1240.91 682.464 L1240.35 682.464 L1239.79 682.464 L1239.23 682.464 L1238.67 682.464 L1238.11 682.464 L1237.55 682.464 L1236.99 682.464 L1236.44 682.464 L1235.88 682.464 L1235.32 682.464 L1234.76 682.464 L1234.2 682.464 L1233.64 682.464 L1233.08 682.464 L1232.52 682.464 L1231.96 682.464 L1231.4 682.464 L1230.84 682.464 L1230.28 682.464 L1229.72 682.464 L1229.17 682.464 L1228.61 682.464 L1228.05 682.464 L1227.49 682.464 L1226.93 682.464 L1226.37 682.464 L1225.81 682.464 L1225.25 682.464 L1224.69 682.464 L1224.13 682.464 L1223.57 682.464 L1223.01 682.464 L1222.45 682.464 L1221.89 682.464 L1221.34 682.464 L1220.78 682.464 L1220.22 682.464 L1219.66 682.464 L1219.1 682.464 L1218.54 682.464 L1217.98 682.464 L1217.42 682.464 L1216.86 682.464 L1216.3 682.464 L1215.74 682.464 L1215.18 682.464 L1214.62 682.464 L1214.07 682.464 L1213.51 682.464 L1212.95 682.464 L1212.39 682.464 L1211.83 682.464 L1211.27 682.464 L1210.71 682.464 L1210.15 682.464 L1209.59 682.464 L1209.03 682.464 L1208.47 682.464 L1207.91 682.464 L1207.35 682.464 L1206.8 682.464 L1206.24 682.464 L1205.68 682.464 L1205.12 682.464 L1204.56 682.464 L1204 682.464 L1203.44 682.464 L1202.88 682.464 L1202.32 682.464 L1201.76 682.464 L1201.2 682.464 L1200.64 682.464 L1200.08 682.464 L1199.52 682.464 L1198.97 682.464 L1198.41 682.464 L1197.85 682.464 L1197.29 682.464 L1196.73 682.464 L1196.17 682.464 L1195.61 682.464 L1195.05 682.464 L1194.49 682.464 L1193.93 682.464 L1193.37 682.464 L1192.81 682.464 L1192.25 682.464 L1191.7 682.464 L1191.14 682.464 L1190.58 682.464 L1190.02 682.464 L1189.46 682.464 L1188.9 682.464 L1188.34 682.464 L1187.78 682.464 L1187.22 682.464 L1186.66 682.464 L1186.1 682.464 L1185.54 682.464 L1184.98 682.464 L1184.43 682.464 L1183.87 682.464 L1183.31 682.464 L1182.75 682.464 L1182.19 682.464 L1181.63 682.464 L1181.07 682.464 L1180.51 682.464 L1179.95 682.464 L1179.39 682.464 L1178.83 682.464 L1178.27 682.464 L1177.71 682.464 L1177.15 682.464 L1176.6 682.464 L1176.04 682.464 L1175.48 682.464 L1174.92 682.464 L1174.36 682.464 L1173.8 682.464 L1173.24 682.464 L1172.68 682.464 L1172.12 682.464 L1171.56 682.464 L1171 682.464 L1170.44 682.464 L1169.88 682.464 L1169.33 682.464 L1168.77 682.464 L1168.21 682.464 L1167.65 682.464 L1167.09 682.464 L1166.53 682.464 L1165.97 682.464 L1165.41 682.464 L1164.85 682.464 L1164.29 682.464 L1163.73 682.464 L1163.17 682.464 L1162.61 682.464 L1162.05 682.464 L1161.5 682.464 L1160.94 682.464 L1160.38 682.464 L1159.82 682.464 L1159.26 682.464 L1158.7 682.464 L1158.14 682.464 L1157.58 682.464 L1157.02 682.464 L1156.46 682.464 L1155.9 682.464 L1155.34 682.464 L1154.78 682.464 L1154.23 682.464 L1153.67 682.464 L1153.11 682.464 L1152.55 682.464 L1151.99 682.464 L1151.43 682.464 L1150.87 682.464 L1150.31 682.464 L1149.75 682.464 L1149.19 682.464 L1148.63 682.464 L1148.07 682.464 L1147.51 682.464 L1146.96 682.464 L1146.4 682.464 L1145.84 682.464 L1145.28 682.464 L1144.72 682.464 L1144.16 682.464 L1143.6 682.464 L1143.04 682.464 L1142.48 682.464 L1141.92 682.464 L1141.36 682.464 L1140.8 682.464 L1140.24 682.464 L1139.68 682.464 L1139.13 682.464 L1138.57 682.464 L1138.01 682.464 L1137.45 682.464 L1136.89 682.464 L1136.33 682.464 L1135.77 682.464 L1135.21 682.464 L1134.65 682.464 L1134.09 682.464 L1133.53 682.464 L1132.97 682.464 L1132.41 682.464 L1131.86 682.464 L1131.3 682.464 L1130.74 682.464 L1130.18 682.464 L1129.62 682.464 L1129.06 682.464 L1128.5 682.464 L1127.94 682.464 L1127.38 682.464 L1126.82 682.464 L1126.26 682.464 L1125.7 682.464 L1125.14 682.464 L1124.59 682.464 L1124.03 682.464 L1123.47 682.464 L1122.91 682.464 L1122.35 682.464 L1121.79 682.464 L1121.23 682.464 L1120.67 682.464 L1120.11 682.464 L1119.55 682.464 L1118.99 682.464 L1118.43 682.464 L1117.87 682.464 L1117.31 682.464 L1116.76 682.464 L1116.2 682.464 L1115.64 682.464 L1115.08 682.464 L1114.52 682.464 L1113.96 682.464 L1113.4 682.464 L1112.84 682.464 L1112.28 682.464 L1111.72 682.464 L1111.16 682.464 L1110.6 682.464 L1110.04 682.464 L1109.49 682.464 L1108.93 682.464 L1108.37 682.464 L1107.81 682.464 L1107.25 682.464 L1106.69 682.464 L1106.13 682.464 L1105.57 682.464 L1105.01 682.464 L1104.45 682.464 L1103.89 682.464 L1103.33 682.464 L1102.77 682.464 L1102.22 682.464 L1101.66 682.464 L1101.1 682.464 L1100.54 682.464 L1099.98 682.464 L1099.42 682.464 L1098.86 682.464 L1098.3 682.464 L1097.74 682.464 L1097.18 682.464 L1096.62 682.464 L1096.06 682.464 L1095.5 682.464 L1094.94 682.464 L1094.39 682.464 L1093.83 682.464 L1093.27 682.464 L1092.71 682.464 L1092.15 682.464 L1091.59 682.464 L1091.03 682.464 L1090.47 682.464 L1089.91 682.464 L1089.35 682.464 L1088.79 682.464 L1088.23 682.464 L1087.67 682.464 L1087.12 682.464 L1086.56 682.464 L1086 682.464 L1085.44 682.464 L1084.88 682.464 L1084.32 682.464 L1083.76 682.464 L1083.2 682.464 L1082.64 682.464 L1082.08 682.464 L1081.52 682.464 L1080.96 682.464 L1080.4 682.464 L1079.85 682.464 L1079.29 682.464 L1078.73 682.464 L1078.17 682.464 L1077.61 682.464 L1077.05 682.464 L1076.49 682.464 L1075.93 682.464 L1075.37 682.464 L1074.81 682.464 L1074.25 682.464 L1073.69 682.464 L1073.13 682.464 L1072.57 682.464 L1072.02 682.464 L1071.46 682.464 L1070.9 682.464 L1070.34 682.464 L1069.78 682.464 L1069.22 682.464 L1068.66 682.464 L1068.1 682.464 L1067.54 682.464 L1066.98 682.464 L1066.42 682.464 L1065.86 682.464 L1065.3 682.464 L1064.75 682.464 L1064.19 682.464 L1063.63 682.464 L1063.07 682.464 L1062.51 682.464 L1061.95 682.464 L1061.39 682.464 L1060.83 682.464 L1060.27 682.464 L1059.71 682.464 L1059.15 682.464 L1058.59 682.464 L1058.03 682.464 L1057.48 682.464 L1056.92 682.464 L1056.36 682.464 L1055.8 682.464 L1055.24 682.464 L1054.68 682.464 L1054.12 682.464 L1053.56 682.464 L1053 682.464 L1052.44 682.464 L1051.88 682.464 L1051.32 682.464 L1050.76 682.464 L1050.2 682.464 L1049.65 682.464 L1049.09 682.464 L1048.53 682.464 L1047.97 682.464 L1047.41 682.464 L1046.85 682.464 L1046.29 682.464 L1045.73 682.464 L1045.17 682.464 L1044.61 682.464 L1044.05 682.464 L1043.49 682.464 L1042.93 682.464 L1042.38 682.464 L1041.82 682.464 L1041.26 682.464 L1040.7 682.464 L1040.14 682.464 L1039.58 682.464 L1039.02 682.464 L1038.46 682.464 L1037.9 682.464 L1037.34 682.464 L1036.78 682.464 L1036.22 682.464 L1035.66 682.464 L1035.1 682.464 L1034.55 682.464 L1033.99 682.464 L1033.43 682.464 L1032.87 682.464 L1032.31 682.464 L1031.75 682.464 L1031.19 682.464 L1030.63 682.464 L1030.07 682.464 L1029.51 682.464 L1028.95 682.464 L1028.39 682.464 L1027.83 682.464 L1027.28 682.464 L1026.72 682.464 L1026.16 682.464 L1025.6 682.464 L1025.04 682.464 L1024.48 682.464 L1023.92 682.464 L1023.36 682.464 L1022.8 682.464 L1022.24 682.464 L1021.68 682.464 L1021.12 682.464 L1020.56 682.464 L1020.01 682.464 L1019.45 682.464 L1018.89 682.464 L1018.33 682.464 L1017.77 682.464 L1017.21 682.464 L1016.65 682.464 L1016.09 682.464 L1015.53 682.464 L1014.97 682.464 L1014.41 682.464 L1013.85 682.464 L1013.29 682.464 L1012.73 682.464 L1012.18 682.464 L1011.62 682.464 L1011.06 682.464 L1010.5 682.464 L1009.94 682.464 L1009.38 682.464 L1008.82 682.464 L1008.26 682.464 L1007.7 682.464 L1007.14 682.464 L1006.58 682.464 L1006.02 682.464 L1005.46 682.464 L1004.91 682.464 L1004.35 682.464 L1003.79 682.464 L1003.23 682.464 L1002.67 682.464 L1002.11 682.464 L1001.55 682.464 L1000.99 682.464 L1000.43 682.464 L999.872 682.464 L999.313 682.464 L998.754 682.464 L998.194 682.464 L997.635 682.464 L997.076 682.464 L996.517 682.464 L995.957 682.464 L995.398 682.464 L994.839 682.464 L994.28 682.464 L993.72 682.464 L993.161 682.464 L992.602 682.464 L992.043 682.464 L991.483 682.464 L990.924 682.464 L990.365 682.464 L989.806 682.464 L989.246 682.464 L988.687 682.464 L988.128 682.464 L987.569 682.464 L987.009 682.464 L986.45 682.464 L985.891 682.464 L985.332 682.464 L984.772 682.464 L984.213 682.464 L983.654 682.464 L983.095 682.464 L982.535 682.464 L981.976 682.464 L981.417 682.464 L980.858 682.464 L980.298 682.464 L979.739 682.464 L979.18 682.464 L978.621 682.464 L978.061 682.464 L977.502 682.464 L976.943 682.464 L976.384 682.464 L975.824 682.464 L975.265 682.464 L974.706 682.464 L974.147 682.464 L973.587 682.464 L973.028 682.464 L972.469 682.464 L971.91 682.464 L971.35 682.464 L970.791 682.464 L970.232 682.464 L969.673 682.464 L969.113 682.464 L968.554 682.464 L967.995 682.464 L967.436 682.464 L966.876 682.464 L966.317 682.464 L965.758 682.464 L965.199 682.464 L964.639 682.464 L964.08 682.464 L963.521 682.464 L962.962 682.464 L962.402 682.464 L961.843 682.464 L961.284 682.464 L960.725 682.464 L960.165 682.464 L959.606 682.464 L959.047 682.464 L958.488 682.464 L957.928 682.464 L957.369 682.464 L956.81 682.464 L956.251 682.464 L955.691 682.464 L955.132 682.464 L954.573 682.464 L954.014 682.464 L953.454 682.464 L952.895 682.464 L952.336 682.464 L951.777 682.464 L951.217 682.464 L950.658 682.464 L950.099 682.464 L949.54 682.464 L948.98 682.464 L948.421 682.464 L947.862 682.464 L947.303 682.464 L946.743 682.464 L946.184 682.464 L945.625 682.464 L945.066 682.464 L944.506 682.464 L943.947 682.464 L943.388 682.464 L942.829 682.464 L942.269 682.464 L941.71 682.464 L941.151 682.464 L940.592 682.464 L940.032 682.464 L939.473 682.464 L938.914 682.464 L938.355 682.464 L937.795 682.464 L937.236 682.464 L936.677 682.464 L936.118 682.464 L935.558 682.464 L934.999 682.464 L934.44 682.464 L933.881 682.464 L933.321 682.464 L932.762 682.464 L932.203 682.464 L931.644 682.464 L931.084 682.464 L930.525 682.464 L929.966 682.464 L929.406 682.464 L928.847 682.464 L928.288 682.464 L927.729 682.464 L927.169 682.464 L926.61 682.464 L926.051 682.464 L925.492 682.464 L924.932 682.464 L924.373 682.464 L923.814 682.464 L923.255 682.464 L922.695 682.464 L922.136 682.464 L921.577 682.464 L921.018 682.464 L920.458 682.464 L919.899 682.464 L919.34 682.464 L918.781 682.464 L918.221 682.464 L917.662 682.464 L917.103 682.464 L916.544 682.464 L915.984 682.464 L915.425 682.464 L914.866 682.464 L914.307 682.464 L913.747 682.464 L913.188 682.464 L912.629 682.464 L912.07 682.464 L911.51 682.464 L910.951 682.464 L910.392 682.464 L909.833 682.464 L909.273 682.464 L908.714 682.464 L908.155 682.464 L907.596 682.464 L907.036 682.464 L906.477 682.464 L905.918 682.464 L905.359 682.464 L904.799 682.464 L904.24 682.464 L903.681 682.464 L903.122 682.464 L902.562 682.464 L902.003 682.464 L901.444 682.464 L900.885 682.464 L900.325 682.464 L899.766 682.464 L899.207 682.464 L898.648 682.464 L898.088 682.464 L897.529 682.464 L896.97 682.464 L896.411 682.464 L895.851 682.464 L895.292 682.464 L894.733 682.464 L894.174 682.464 L893.614 682.464 L893.055 682.464 L892.496 682.464 L891.937 682.464 L891.377 682.464 L890.818 682.464 L890.259 682.464 L889.7 682.464 L889.14 682.464 L888.581 682.464 L888.022 682.464 L887.463 682.464 L886.903 682.464 L886.344 682.464 L885.785 682.464 L885.226 682.464 L884.666 682.464 L884.107 682.464 L883.548 682.464 L882.989 682.464 L882.429 682.464 L881.87 682.464 L881.311 682.464 L880.752 682.464 L880.192 682.464 L879.633 682.464 L879.074 682.464 L878.515 682.464 L877.955 682.464 L877.396 682.464 L876.837 682.464 L876.278 682.464 L875.718 682.464 L875.159 682.464 L874.6 682.464 L874.041 682.464 L873.481 682.464 L872.922 682.464 L872.363 682.464 L871.804 682.464 L871.244 682.464 L870.685 682.464 L870.126 682.464 L869.567 682.464 L869.007 682.464 L868.448 682.464 L867.889 682.464 L867.33 682.464 L866.77 682.464 L866.211 682.464 L865.652 682.464 L865.093 682.464 L864.533 682.464 L863.974 682.464 L863.415 682.464 L862.856 682.464 L862.296 682.464 L861.737 682.464 L861.178 682.464 L860.619 682.464 L860.059 682.464 L859.5 682.464 L858.941 682.464 L858.382 682.464 L857.822 682.464 L857.263 682.464 L856.704 682.464 L856.145 682.464 L855.585 682.464 L855.026 682.464 L854.467 682.464 L853.908 682.464 L853.348 682.464 L852.789 682.464 L852.23 682.464 L851.671 682.464 L851.111 682.464 L850.552 682.464 L849.993 682.464 L849.434 682.464 L848.874 682.464 L848.315 682.464 L847.756 682.464 L847.197 682.464 L846.637 682.464 L846.078 682.464 L845.519 682.464 L844.96 682.464 L844.4 682.464 L843.841 682.464 L843.282 682.464 L842.723 682.464 L842.163 682.464 L841.604 682.464 L841.045 682.464 L840.486 682.464 L839.926 682.464 L839.367 682.464 L838.808 682.464 L838.249 682.464 L837.689 682.464 L837.13 682.464 L836.571 682.464 L836.012 682.464 L835.452 682.464 L834.893 682.464 L834.334 682.464 L833.775 682.464 L833.215 682.464 L832.656 682.464 L832.097 682.464 L831.538 682.464 L830.978 682.464 L830.419 682.464 L829.86 682.464 L829.301 682.464 L828.741 682.464 L828.182 682.464 L827.623 682.464 L827.064 682.464 L826.504 682.464 L825.945 682.464 L825.386 682.464 L824.827 682.464 L824.267 682.464 L823.708 682.464 L823.149 682.464 L822.59 682.464 L822.03 682.464 L821.471 682.464 L820.912 682.464 L820.353 682.464 L819.793 682.464 L819.234 682.464 L818.675 682.464 L818.116 682.464 L817.556 682.464 L816.997 682.464 L816.438 682.464 L815.879 682.464 L815.319 682.464 L814.76 682.464 L814.201 682.464 L813.642 682.464 L813.082 682.464 L812.523 682.464 L811.964 682.464 L811.405 682.464 L810.845 682.464 L810.286 682.464 L809.727 682.464 L809.168 682.464 L808.608 682.464 L808.049 682.464 L807.49 682.464 L806.931 682.464 L806.371 682.464 L805.812 682.464 L805.253 682.464 L804.693 682.464 L804.134 682.464 L803.575 682.464 L803.016 682.464 L802.456 682.464 L801.897 682.464 L801.338 682.464 L800.779 682.464 L800.219 682.464 L799.66 682.464 L799.101 682.464 L798.542 682.464 L797.982 682.464 L797.423 682.464 L796.864 682.464 L796.305 682.464 L795.745 682.464 L795.186 682.464 L794.627 682.464 L794.068 682.464 L793.508 682.464 L792.949 682.464 L792.39 682.464 L791.831 682.464 L791.271 682.464 L790.712 682.464 L790.153 682.464 L789.594 682.464 L789.034 682.464 L788.475 682.464 L787.916 682.464 L787.357 682.464 L786.797 682.464 L786.238 682.464 L785.679 682.464 L785.12 682.464 L784.56 682.464 L784.001 682.464 L783.442 682.464 L782.883 682.464 L782.323 682.464 L781.764 682.464 L781.205 682.464 L780.646 682.464 L780.086 682.464 L779.527 682.464 L778.968 682.464 L778.409 682.464 L777.849 682.464 L777.29 682.464 L776.731 682.464 L776.172 682.464 L775.612 682.464 L775.053 682.464 L774.494 682.464 L773.935 682.464 L773.375 682.464 L772.816 682.464 L772.257 682.464 L771.698 682.464 L771.138 682.464 L770.579 682.464 L770.02 682.464 L769.461 682.464 L768.901 682.464 L768.342 682.464 L767.783 682.464 L767.224 682.464 L766.664 682.464 L766.105 682.464 L765.546 682.464 L764.987 682.464 L764.427 682.464 L763.868 682.464 L763.309 682.464 L762.75 682.464 L762.19 682.464 L761.631 682.464 L761.072 682.464 L760.513 682.464 L759.953 682.464 L759.394 682.464 L758.835 682.464 L758.276 682.464 L757.716 682.464 L757.157 682.464 L756.598 682.464 L756.039 682.464 L755.479 682.464 L754.92 682.464 L754.361 682.464 L753.802 682.464 L753.242 682.464 L752.683 682.464 L752.124 682.464 L751.565 682.464 L751.005 682.464 L750.446 682.464 L749.887 682.464 L749.328 682.464 L748.768 682.464 L748.209 682.464 L747.65 682.464 L747.091 682.464 L746.531 682.464 L745.972 682.464 L745.413 682.464 L744.854 682.464 L744.294 682.464 L743.735 682.464 L743.176 682.464 L742.617 682.464 L742.057 682.464 L741.498 682.464 L740.939 682.464 L740.38 682.464 L739.82 682.464 L739.261 682.464 L738.702 682.464 L738.143 682.464 L737.583 682.464 L737.024 682.464 L736.465 682.464 L735.906 682.464 L735.346 682.464 L734.787 682.464 L734.228 682.464 L733.669 682.464 L733.109 682.464 L732.55 682.464 L731.991 682.464 L731.432 682.464 L730.872 682.464 L730.313 682.464 L729.754 682.464 L729.195 682.464 L728.635 682.464 L728.076 682.464 L727.517 682.464 L726.958 682.464 L726.398 682.464 L725.839 682.464 L725.28 682.464 L724.721 682.464 L724.161 682.464 L723.602 682.464 L723.043 682.464 L722.484 682.464 L721.924 682.464 L721.365 682.464 L720.806 682.464 L720.247 682.464  Z\" fill=\"#e26f46\" fill-rule=\"evenodd\" fill-opacity=\"0.5\"/>\n<polyline clip-path=\"url(#clip983)\" style=\"stroke:#e26f46; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"720.247,687.041 720.806,687.041 721.365,687.041 721.924,687.041 722.484,687.041 723.043,687.041 723.602,687.041 724.161,687.041 724.721,687.041 725.28,687.041 725.839,687.041 726.398,687.041 726.958,687.041 727.517,687.041 728.076,687.041 728.635,687.041 729.195,687.041 729.754,687.041 730.313,687.041 730.872,687.041 731.432,687.041 731.991,687.041 732.55,687.041 733.109,687.041 733.669,687.041 734.228,687.041 734.787,687.041 735.346,687.041 735.906,687.041 736.465,687.041 737.024,687.041 737.583,687.041 738.143,687.041 738.702,687.041 739.261,687.041 739.82,687.041 740.38,687.041 740.939,687.041 741.498,687.041 742.057,687.041 742.617,687.041 743.176,687.041 743.735,687.041 744.294,687.041 744.854,687.041 745.413,687.041 745.972,687.041 746.531,687.041 747.091,687.041 747.65,687.041 748.209,687.041 748.768,687.041 749.328,687.041 749.887,687.041 750.446,687.041 751.005,687.041 751.565,687.041 752.124,687.041 752.683,687.041 753.242,687.041 753.802,687.041 754.361,687.041 754.92,687.041 755.479,687.041 756.039,687.041 756.598,687.041 757.157,687.041 757.716,687.041 758.276,687.041 758.835,687.041 759.394,687.041 759.953,687.041 760.513,687.041 761.072,687.041 761.631,687.041 762.19,687.041 762.75,687.041 763.309,687.041 763.868,687.041 764.427,687.041 764.987,687.041 765.546,687.041 766.105,687.041 766.664,687.041 767.224,687.041 767.783,687.041 768.342,687.041 768.901,687.041 769.461,687.041 770.02,687.041 770.579,687.041 771.138,687.041 771.698,687.041 772.257,687.041 772.816,687.041 773.375,687.041 773.935,687.041 774.494,687.041 775.053,687.041 775.612,687.041 776.172,687.041 776.731,687.041 777.29,687.041 777.849,687.041 778.409,687.041 778.968,687.041 779.527,687.041 780.086,687.041 780.646,687.041 781.205,687.041 781.764,687.041 782.323,687.041 782.883,687.041 783.442,687.041 784.001,687.041 784.56,687.041 785.12,687.041 785.679,687.041 786.238,687.041 786.797,687.041 787.357,687.041 787.916,687.041 788.475,687.041 789.034,687.041 789.594,687.041 790.153,687.041 790.712,687.041 791.271,687.041 791.831,687.041 792.39,687.041 792.949,687.041 793.508,687.041 794.068,687.041 794.627,687.041 795.186,687.041 795.745,687.041 796.305,687.041 796.864,687.041 797.423,687.041 797.982,687.041 798.542,687.041 799.101,687.041 799.66,687.041 800.219,687.041 800.779,687.041 801.338,687.041 801.897,687.041 802.456,687.041 803.016,687.041 803.575,687.041 804.134,687.041 804.693,687.041 805.253,687.041 805.812,687.041 806.371,687.041 806.931,687.041 807.49,687.041 808.049,687.041 808.608,687.041 809.168,687.041 809.727,687.041 810.286,687.041 810.845,687.041 811.405,687.041 811.964,687.041 812.523,687.041 813.082,687.041 813.642,687.041 814.201,687.041 814.76,687.041 815.319,687.041 815.879,687.041 816.438,687.041 816.997,687.041 817.556,687.041 818.116,687.041 818.675,687.041 819.234,687.041 819.793,687.041 820.353,687.041 820.912,687.041 821.471,687.041 822.03,687.041 822.59,687.041 823.149,687.041 823.708,687.041 824.267,687.041 824.827,687.041 825.386,687.041 825.945,687.041 826.504,687.041 827.064,687.041 827.623,687.041 828.182,687.041 828.741,687.041 829.301,687.041 829.86,687.041 830.419,687.041 830.978,687.041 831.538,687.041 832.097,687.041 832.656,687.041 833.215,687.041 833.775,687.041 834.334,687.041 834.893,687.041 835.452,687.041 836.012,687.041 836.571,687.041 837.13,687.041 837.689,687.041 838.249,687.041 838.808,687.041 839.367,687.041 839.926,687.041 840.486,687.041 841.045,687.041 841.604,687.041 842.163,687.041 842.723,687.041 843.282,687.041 843.841,687.041 844.4,687.041 844.96,687.041 845.519,687.041 846.078,687.041 846.637,687.041 847.197,687.041 847.756,687.041 848.315,687.041 848.874,687.041 849.434,687.041 849.993,687.041 850.552,687.041 851.111,687.041 851.671,687.041 852.23,687.041 852.789,687.041 853.348,687.041 853.908,687.041 854.467,687.041 855.026,687.041 855.585,687.041 856.145,687.041 856.704,687.041 857.263,687.041 857.822,687.041 858.382,687.041 858.941,687.041 859.5,687.041 860.059,687.041 860.619,687.041 861.178,687.041 861.737,687.041 862.296,687.041 862.856,687.041 863.415,687.041 863.974,687.041 864.533,687.041 865.093,687.041 865.652,687.041 866.211,687.041 866.77,687.041 867.33,687.041 867.889,687.041 868.448,687.041 869.007,687.041 869.567,687.041 870.126,687.041 870.685,687.041 871.244,687.041 871.804,687.041 872.363,687.041 872.922,687.041 873.481,687.041 874.041,687.041 874.6,687.041 875.159,687.041 875.718,687.041 876.278,687.041 876.837,687.041 877.396,687.041 877.955,687.041 878.515,687.041 879.074,687.041 879.633,687.041 880.192,687.041 880.752,687.041 881.311,687.041 881.87,687.041 882.429,687.041 882.989,687.041 883.548,687.041 884.107,687.041 884.666,687.041 885.226,687.041 885.785,687.041 886.344,687.041 886.903,687.041 887.463,687.041 888.022,687.041 888.581,687.041 889.14,687.041 889.7,687.041 890.259,687.041 890.818,687.041 891.377,687.041 891.937,687.041 892.496,687.041 893.055,687.041 893.614,687.041 894.174,687.041 894.733,687.041 895.292,687.041 895.851,687.041 896.411,687.041 896.97,687.041 897.529,687.041 898.088,687.041 898.648,687.041 899.207,687.041 899.766,687.041 900.325,687.041 900.885,687.041 901.444,687.041 902.003,687.041 902.562,687.041 903.122,687.041 903.681,687.041 904.24,687.041 904.799,687.041 905.359,687.041 905.918,687.041 906.477,687.041 907.036,687.041 907.596,687.041 908.155,687.041 908.714,687.041 909.273,687.041 909.833,687.041 910.392,687.041 910.951,687.041 911.51,687.041 912.07,687.041 912.629,687.041 913.188,687.041 913.747,687.041 914.307,687.041 914.866,687.041 915.425,687.041 915.984,687.041 916.544,687.041 917.103,687.041 917.662,687.041 918.221,687.041 918.781,687.041 919.34,687.041 919.899,687.041 920.458,687.041 921.018,687.041 921.577,687.041 922.136,687.041 922.695,687.041 923.255,687.041 923.814,687.041 924.373,687.041 924.932,687.041 925.492,687.041 926.051,687.041 926.61,687.041 927.169,687.041 927.729,687.041 928.288,687.041 928.847,687.041 929.406,687.041 929.966,687.041 930.525,687.041 931.084,687.041 931.644,687.041 932.203,687.041 932.762,687.041 933.321,687.041 933.881,687.041 934.44,687.041 934.999,687.041 935.558,687.041 936.118,687.041 936.677,687.041 937.236,687.041 937.795,687.041 938.355,687.041 938.914,687.041 939.473,687.041 940.032,687.041 940.592,687.041 941.151,687.041 941.71,687.041 942.269,687.041 942.829,687.041 943.388,687.041 943.947,687.041 944.506,687.041 945.066,687.041 945.625,687.041 946.184,687.041 946.743,687.041 947.303,687.041 947.862,687.041 948.421,687.041 948.98,687.041 949.54,687.041 950.099,687.041 950.658,687.041 951.217,687.041 951.777,687.041 952.336,687.041 952.895,687.041 953.454,687.041 954.014,687.041 954.573,687.041 955.132,687.041 955.691,687.041 956.251,687.041 956.81,687.041 957.369,687.041 957.928,687.041 958.488,687.041 959.047,687.041 959.606,687.041 960.165,687.041 960.725,687.041 961.284,687.041 961.843,687.041 962.402,687.041 962.962,687.041 963.521,687.041 964.08,687.041 964.639,687.041 965.199,687.041 965.758,687.041 966.317,687.041 966.876,687.041 967.436,687.041 967.995,687.041 968.554,687.041 969.113,687.041 969.673,687.041 970.232,687.041 970.791,687.041 971.35,687.041 971.91,687.041 972.469,687.041 973.028,687.041 973.587,687.041 974.147,687.041 974.706,687.041 975.265,687.041 975.824,687.041 976.384,687.041 976.943,687.041 977.502,687.041 978.061,687.041 978.621,687.041 979.18,687.041 979.739,687.041 980.298,687.041 980.858,687.041 981.417,687.041 981.976,687.041 982.535,687.041 983.095,687.041 983.654,687.041 984.213,687.041 984.772,687.041 985.332,687.041 985.891,687.041 986.45,687.041 987.009,687.041 987.569,687.041 988.128,687.041 988.687,687.041 989.246,687.041 989.806,687.041 990.365,687.041 990.924,687.041 991.483,687.041 992.043,687.041 992.602,687.041 993.161,687.041 993.72,687.041 994.28,687.041 994.839,687.041 995.398,687.041 995.957,687.041 996.517,687.041 997.076,687.041 997.635,687.041 998.194,687.041 998.754,687.041 999.313,687.041 999.872,687.041 1000.43,687.041 1000.99,687.041 1001.55,687.041 1002.11,687.041 1002.67,687.041 1003.23,687.041 1003.79,687.041 1004.35,687.041 1004.91,687.041 1005.46,687.041 1006.02,687.041 1006.58,687.041 1007.14,687.041 1007.7,687.041 1008.26,687.041 1008.82,687.041 1009.38,687.041 1009.94,687.041 1010.5,687.041 1011.06,687.041 1011.62,687.041 1012.18,687.041 1012.73,687.041 1013.29,687.041 1013.85,687.041 1014.41,687.041 1014.97,687.041 1015.53,687.041 1016.09,687.041 1016.65,687.041 1017.21,687.041 1017.77,687.041 1018.33,687.041 1018.89,687.041 1019.45,687.041 1020.01,687.041 1020.56,687.041 1021.12,687.041 1021.68,687.041 1022.24,687.041 1022.8,687.041 1023.36,687.041 1023.92,687.041 1024.48,687.041 1025.04,687.041 1025.6,687.041 1026.16,687.041 1026.72,687.041 1027.28,687.041 1027.83,687.041 1028.39,687.041 1028.95,687.041 1029.51,687.041 1030.07,687.041 1030.63,687.041 1031.19,687.041 1031.75,687.041 1032.31,687.041 1032.87,687.041 1033.43,687.041 1033.99,687.041 1034.55,687.041 1035.1,687.041 1035.66,687.041 1036.22,687.041 1036.78,687.041 1037.34,687.041 1037.9,687.041 1038.46,687.041 1039.02,687.041 1039.58,687.041 1040.14,687.041 1040.7,687.041 1041.26,687.041 1041.82,687.041 1042.38,687.041 1042.93,687.041 1043.49,687.041 1044.05,687.041 1044.61,687.041 1045.17,687.041 1045.73,687.041 1046.29,687.041 1046.85,687.041 1047.41,687.041 1047.97,687.041 1048.53,687.041 1049.09,687.041 1049.65,687.041 1050.2,687.041 1050.76,687.041 1051.32,687.041 1051.88,687.041 1052.44,687.041 1053,687.041 1053.56,687.041 1054.12,687.041 1054.68,687.041 1055.24,687.041 1055.8,687.041 1056.36,687.041 1056.92,687.041 1057.48,687.041 1058.03,687.041 1058.59,687.041 1059.15,687.041 1059.71,687.041 1060.27,687.041 1060.83,687.041 1061.39,687.041 1061.95,687.041 1062.51,687.041 1063.07,687.041 1063.63,687.041 1064.19,687.041 1064.75,687.041 1065.3,687.041 1065.86,687.041 1066.42,687.041 1066.98,687.041 1067.54,687.041 1068.1,687.041 1068.66,687.041 1069.22,687.041 1069.78,687.041 1070.34,687.041 1070.9,687.041 1071.46,687.041 1072.02,687.041 1072.57,687.041 1073.13,687.041 1073.69,687.041 1074.25,687.041 1074.81,687.041 1075.37,687.041 1075.93,687.041 1076.49,687.041 1077.05,687.041 1077.61,687.041 1078.17,687.041 1078.73,687.041 1079.29,687.041 1079.85,687.041 1080.4,687.041 1080.96,687.041 1081.52,687.041 1082.08,687.041 1082.64,687.041 1083.2,687.041 1083.76,687.041 1084.32,687.041 1084.88,687.041 1085.44,687.041 1086,687.041 1086.56,687.041 1087.12,687.041 1087.67,687.041 1088.23,687.041 1088.79,687.041 1089.35,687.041 1089.91,687.041 1090.47,687.041 1091.03,687.041 1091.59,687.041 1092.15,687.041 1092.71,687.041 1093.27,687.041 1093.83,687.041 1094.39,687.041 1094.94,687.041 1095.5,687.041 1096.06,687.041 1096.62,687.041 1097.18,687.041 1097.74,687.041 1098.3,687.041 1098.86,687.041 1099.42,687.041 1099.98,687.041 1100.54,687.041 1101.1,687.041 1101.66,687.041 1102.22,687.041 1102.77,687.041 1103.33,687.041 1103.89,687.041 1104.45,687.041 1105.01,687.041 1105.57,687.041 1106.13,687.041 1106.69,687.041 1107.25,687.041 1107.81,687.041 1108.37,687.041 1108.93,687.041 1109.49,687.041 1110.04,687.041 1110.6,687.041 1111.16,687.041 1111.72,687.041 1112.28,687.041 1112.84,687.041 1113.4,687.041 1113.96,687.041 1114.52,687.041 1115.08,687.041 1115.64,687.041 1116.2,687.041 1116.76,687.041 1117.31,687.041 1117.87,687.041 1118.43,687.041 1118.99,687.041 1119.55,687.041 1120.11,687.041 1120.67,687.041 1121.23,687.041 1121.79,687.041 1122.35,687.041 1122.91,687.041 1123.47,687.041 1124.03,687.041 1124.59,687.041 1125.14,687.041 1125.7,687.041 1126.26,687.041 1126.82,687.041 1127.38,687.041 1127.94,687.041 1128.5,687.041 1129.06,687.041 1129.62,687.041 1130.18,687.041 1130.74,687.041 1131.3,687.041 1131.86,687.041 1132.41,687.041 1132.97,687.041 1133.53,687.041 1134.09,687.041 1134.65,687.041 1135.21,687.041 1135.77,687.041 1136.33,687.041 1136.89,687.041 1137.45,687.041 1138.01,687.041 1138.57,687.041 1139.13,687.041 1139.68,687.041 1140.24,687.041 1140.8,687.041 1141.36,687.041 1141.92,687.041 1142.48,687.041 1143.04,687.041 1143.6,687.041 1144.16,687.041 1144.72,687.041 1145.28,687.041 1145.84,687.041 1146.4,687.041 1146.96,687.041 1147.51,687.041 1148.07,687.041 1148.63,687.041 1149.19,687.041 1149.75,687.041 1150.31,687.041 1150.87,687.041 1151.43,687.041 1151.99,687.041 1152.55,687.041 1153.11,687.041 1153.67,687.041 1154.23,687.041 1154.78,687.041 1155.34,687.041 1155.9,687.041 1156.46,687.041 1157.02,687.041 1157.58,687.041 1158.14,687.041 1158.7,687.041 1159.26,687.041 1159.82,687.041 1160.38,687.041 1160.94,687.041 1161.5,687.041 1162.05,687.041 1162.61,687.041 1163.17,687.041 1163.73,687.041 1164.29,687.041 1164.85,687.041 1165.41,687.041 1165.97,687.041 1166.53,687.041 1167.09,687.041 1167.65,687.041 1168.21,687.041 1168.77,687.041 1169.33,687.041 1169.88,687.041 1170.44,687.041 1171,687.041 1171.56,687.041 1172.12,687.041 1172.68,687.041 1173.24,687.041 1173.8,687.041 1174.36,687.041 1174.92,687.041 1175.48,687.041 1176.04,687.041 1176.6,687.041 1177.15,687.041 1177.71,687.041 1178.27,687.041 1178.83,687.041 1179.39,687.041 1179.95,687.041 1180.51,687.041 1181.07,687.041 1181.63,687.041 1182.19,687.041 1182.75,687.041 1183.31,687.041 1183.87,687.041 1184.43,687.041 1184.98,687.041 1185.54,687.041 1186.1,687.041 1186.66,687.041 1187.22,687.041 1187.78,687.041 1188.34,687.041 1188.9,687.041 1189.46,687.041 1190.02,687.041 1190.58,687.041 1191.14,687.041 1191.7,687.041 1192.25,687.041 1192.81,687.041 1193.37,687.041 1193.93,687.041 1194.49,687.041 1195.05,687.041 1195.61,687.041 1196.17,687.041 1196.73,687.041 1197.29,687.041 1197.85,687.041 1198.41,687.041 1198.97,687.041 1199.52,687.041 1200.08,687.041 1200.64,687.041 1201.2,687.041 1201.76,687.041 1202.32,687.041 1202.88,687.041 1203.44,687.041 1204,687.041 1204.56,687.041 1205.12,687.041 1205.68,687.041 1206.24,687.041 1206.8,687.041 1207.35,687.041 1207.91,687.041 1208.47,687.041 1209.03,687.041 1209.59,687.041 1210.15,687.041 1210.71,687.041 1211.27,687.041 1211.83,687.041 1212.39,687.041 1212.95,687.041 1213.51,687.041 1214.07,687.041 1214.62,687.041 1215.18,687.041 1215.74,687.041 1216.3,687.041 1216.86,687.041 1217.42,687.041 1217.98,687.041 1218.54,687.041 1219.1,687.041 1219.66,687.041 1220.22,687.041 1220.78,687.041 1221.34,687.041 1221.89,687.041 1222.45,687.041 1223.01,687.041 1223.57,687.041 1224.13,687.041 1224.69,687.041 1225.25,687.041 1225.81,687.041 1226.37,687.041 1226.93,687.041 1227.49,687.041 1228.05,687.041 1228.61,687.041 1229.17,687.041 1229.72,687.041 1230.28,687.041 1230.84,687.041 1231.4,687.041 1231.96,687.041 1232.52,687.041 1233.08,687.041 1233.64,687.041 1234.2,687.041 1234.76,687.041 1235.32,687.041 1235.88,687.041 1236.44,687.041 1236.99,687.041 1237.55,687.041 1238.11,687.041 1238.67,687.041 1239.23,687.041 1239.79,687.041 1240.35,687.041 1240.91,687.041 1241.47,687.041 1242.03,687.041 1242.59,687.041 1243.15,687.041 1243.71,687.041 1244.26,687.041 1244.82,687.041 1245.38,687.041 1245.94,687.041 1246.5,687.041 1247.06,687.041 1247.62,687.041 1248.18,687.041 1248.74,687.041 1249.3,687.041 1249.86,687.041 1250.42,687.041 1250.98,687.041 1251.54,687.041 1252.09,687.041 1252.65,687.041 1253.21,687.041 1253.77,687.041 1254.33,687.041 1254.89,687.041 1255.45,687.041 1256.01,687.041 1256.57,687.041 1257.13,687.041 1257.69,687.041 1258.25,687.041 1258.81,687.041 1259.36,687.041 1259.92,687.041 1260.48,687.041 1261.04,687.041 1261.6,687.041 1262.16,687.041 1262.72,687.041 1263.28,687.041 1263.84,687.041 1264.4,687.041 1264.96,687.041 1265.52,687.041 1266.08,687.041 1266.63,687.041 1267.19,687.041 1267.75,687.041 1268.31,687.041 1268.87,687.041 1269.43,687.041 1269.99,687.041 1270.55,687.041 1271.11,687.041 1271.67,687.041 1272.23,687.041 1272.79,687.041 1273.35,687.041 1273.91,687.041 1274.46,687.041 1275.02,687.041 1275.58,687.041 1276.14,687.041 1276.7,687.041 1277.26,687.041 1277.82,687.041 1278.38,687.041 1278.94,687.041 1279.5,687.041 1280.06,687.041 1280.62,687.041 1281.18,687.041 1281.73,687.041 1282.29,687.041 1282.85,687.041 1283.41,687.041 1283.97,687.041 1284.53,687.041 1285.09,687.041 1285.65,687.041 1286.21,687.041 1286.77,687.041 1287.33,687.041 1287.89,687.041 1288.45,687.041 1289,687.041 1289.56,687.041 1290.12,687.041 1290.68,687.041 1291.24,687.041 1291.8,687.041 1292.36,687.041 1292.92,687.041 1293.48,687.041 1294.04,687.041 1294.6,687.041 1295.16,687.041 1295.72,687.041 1296.28,687.041 1296.83,687.041 1297.39,687.041 1297.95,687.041 1298.51,687.041 1299.07,687.041 1299.63,687.041 1300.19,687.041 1300.75,687.041 1301.31,687.041 1301.87,687.041 1302.43,687.041 1302.99,687.041 1303.55,687.041 1304.1,687.041 1304.66,687.041 1305.22,687.041 1305.78,687.041 1306.34,687.041 1306.9,687.041 1307.46,687.041 1308.02,687.041 1308.58,687.041 1309.14,687.041 1309.7,687.041 1310.26,687.041 1310.82,687.041 1311.38,687.041 1311.93,687.041 1312.49,687.041 1313.05,687.041 1313.61,687.041 1314.17,687.041 1314.73,687.041 1315.29,687.041 1315.85,687.041 1316.41,687.041 1316.97,687.041 1317.53,687.041 1318.09,687.041 1318.65,687.041 1319.2,687.041 1319.76,687.041 1320.32,687.041 1320.88,687.041 1321.44,687.041 1322,687.041 1322.56,687.041 1323.12,687.041 1323.68,687.041 1324.24,687.041 1324.8,687.041 1325.36,687.041 1325.92,687.041 1326.47,687.041 1327.03,687.041 1327.59,687.041 1328.15,687.041 1328.71,687.041 1329.27,687.041 1329.83,687.041 1330.39,687.041 1330.95,687.041 1331.51,687.041 1332.07,687.041 1332.63,687.041 1333.19,687.041 1333.75,687.041 1334.3,687.041 1334.86,687.041 1335.42,687.041 1335.98,687.041 1336.54,687.041 1337.1,687.041 1337.66,687.041 1338.22,687.041 1338.78,687.041 1339.34,687.041 1339.9,687.041 1340.46,687.041 1341.02,687.041 1341.57,687.041 1342.13,687.041 1342.69,687.041 1343.25,687.041 1343.81,687.041 1344.37,687.041 1344.93,687.041 1345.49,687.041 1346.05,687.041 1346.61,687.041 1347.17,687.041 1347.73,687.041 1348.29,687.041 1348.84,687.041 1349.4,687.041 1349.96,687.041 1350.52,687.041 1351.08,687.041 1351.64,687.041 1352.2,687.041 1352.76,687.041 1353.32,687.041 1353.88,687.041 1354.44,687.041 1355,687.041 1355.56,687.041 1356.12,687.041 1356.67,687.041 1357.23,687.041 1357.79,687.041 1358.35,687.041 1358.91,687.041 1359.47,687.041 1360.03,687.041 1360.59,687.041 1361.15,687.041 1361.71,687.041 1362.27,687.041 1362.83,687.041 1363.39,687.041 1363.94,687.041 1364.5,687.041 1365.06,687.041 1365.62,687.041 1366.18,687.041 1366.74,687.041 1367.3,687.041 1367.86,687.041 1368.42,687.041 1368.98,687.041 1369.54,687.041 1370.1,687.041 1370.66,687.041 1371.21,687.041 1371.77,687.041 1372.33,687.041 1372.89,687.041 1373.45,687.041 1374.01,687.041 1374.57,687.041 1375.13,687.041 1375.69,687.041 1376.25,687.041 1376.81,687.041 1377.37,687.041 1377.93,687.041 1378.49,687.041 1379.04,687.041 1379.6,687.041 1380.16,687.041 1380.72,687.041 1381.28,687.041 1381.84,687.041 1382.4,687.041 1382.96,687.041 1383.52,687.041 1384.08,687.041 1384.64,687.041 1385.2,687.041 1385.76,687.041 1386.31,687.041 1386.87,687.041 1387.43,687.041 1387.99,687.041 1388.55,687.041 1389.11,687.041 1389.67,687.041 1390.23,687.041 1390.79,687.041 1391.35,687.041 1391.91,687.041 1392.47,687.041 1393.03,687.041 1393.58,687.041 1394.14,687.041 1394.7,687.041 1395.26,687.041 1395.82,687.041 1396.38,687.041 1396.94,687.041 1397.5,687.041 1398.06,687.041 1398.62,687.041 1399.18,687.041 1399.74,687.041 1400.3,687.041 1400.86,687.041 1401.41,687.041 1401.97,687.041 1402.53,687.041 1403.09,687.041 1403.65,687.041 1404.21,687.041 1404.77,687.041 1405.33,687.041 1405.89,687.041 1406.45,687.041 1407.01,687.041 1407.57,687.041 1408.13,687.041 1408.68,687.041 1409.24,687.041 1409.8,687.041 1410.36,687.041 1410.92,687.041 1411.48,687.041 1412.04,687.041 1412.6,687.041 1413.16,687.041 1413.72,687.041 1414.28,687.041 1414.84,687.041 1415.4,687.041 1415.95,687.041 1416.51,687.041 1417.07,687.041 1417.63,687.041 1418.19,687.041 1418.75,687.041 1419.31,687.041 1419.87,687.041 1420.43,687.041 1420.99,687.041 1421.55,687.041 1422.11,687.041 1422.67,687.041 1423.23,687.041 1423.78,687.041 1424.34,687.041 1424.9,687.041 1425.46,687.041 1426.02,687.041 1426.58,687.041 1427.14,687.041 1427.7,687.041 1428.26,687.041 1428.82,687.041 1429.38,687.041 1429.94,687.041 1430.5,687.041 1431.05,687.041 1431.61,687.041 1432.17,687.041 1432.73,687.041 1433.29,687.041 1433.85,687.041 1434.41,687.041 1434.97,687.041 1435.53,687.041 1436.09,687.041 1436.65,687.041 1437.21,687.041 1437.77,687.041 1438.33,687.041 1438.88,687.041 1439.44,687.041 1440,687.041 1440.56,687.041 1441.12,687.041 1441.68,687.041 1442.24,687.041 1442.8,687.041 1443.36,687.041 1443.92,687.041 1444.48,687.041 1445.04,687.041 1445.6,687.041 1446.15,687.041 1446.71,687.041 1447.27,687.041 1447.83,687.041 1448.39,687.041 1448.95,687.041 1449.51,687.041 1450.07,687.041 1450.63,687.041 1451.19,687.041 1451.75,687.041 1452.31,687.041 1452.87,687.041 1453.42,687.041 1453.98,687.041 1454.54,687.041 1455.1,687.041 1455.66,687.041 1456.22,687.041 1456.78,687.041 1457.34,687.041 1457.9,687.041 1458.46,687.041 1459.02,687.041 1459.58,687.041 1460.14,687.041 1460.7,687.041 1461.25,687.041 1461.81,687.041 1462.37,687.041 1462.93,687.041 1463.49,687.041 1464.05,687.041 1464.61,687.041 1465.17,687.041 1465.73,687.041 1466.29,687.041 1466.85,687.041 1467.41,687.041 1467.97,687.041 1468.52,687.041 1469.08,687.041 1469.64,687.041 1470.2,687.041 1470.76,687.041 1471.32,687.041 1471.88,687.041 1472.44,687.041 1473,687.041 1473.56,687.041 1474.12,687.041 1474.68,687.041 1475.24,687.041 1475.79,687.041 1476.35,687.041 1476.91,687.041 1477.47,687.041 1478.03,687.041 1478.59,687.041 1479.15,687.041 1479.71,687.041 1480.27,687.041 1480.83,687.041 1481.39,687.041 1481.95,687.041 1482.51,687.041 1483.07,687.041 1483.62,687.041 1484.18,687.041 1484.74,687.041 1485.3,687.041 1485.86,687.041 1486.42,687.041 1486.98,687.041 1487.54,687.041 1488.1,687.041 1488.66,687.041 1489.22,687.041 1489.78,687.041 1490.34,687.041 1490.89,687.041 1491.45,687.041 1492.01,687.041 1492.57,687.041 1493.13,687.041 1493.69,687.041 1494.25,687.041 1494.81,687.041 1495.37,687.041 1495.93,687.041 1496.49,687.041 1497.05,687.041 1497.61,687.041 1498.16,687.041 1498.72,687.041 1499.28,687.041 1499.84,687.041 1500.4,687.041 1500.96,687.041 1501.52,687.041 1502.08,687.041 1502.64,687.041 1503.2,687.041 1503.76,687.041 1504.32,687.041 1504.88,687.041 1505.44,687.041 1505.99,687.041 1506.55,687.041 1507.11,687.041 1507.67,687.041 1508.23,687.041 1508.79,687.041 1509.35,687.041 1509.91,687.041 1510.47,687.041 1511.03,687.041 1511.59,687.041 1512.15,687.041 1512.71,687.041 1513.26,687.041 1513.82,687.041 1514.38,687.041 1514.94,687.041 1515.5,687.041 1516.06,687.041 1516.62,687.041 1517.18,687.041 1517.74,687.041 1518.3,687.041 1518.86,687.041 1519.42,687.041 1519.98,687.041 1520.53,687.041 1521.09,687.041 1521.65,687.041 1522.21,687.041 1522.77,687.041 1523.33,687.041 1523.89,687.041 1524.45,687.041 1525.01,687.041 1525.57,687.041 1526.13,687.041 1526.69,687.041 1527.25,687.041 1527.81,687.041 1528.36,687.041 1528.92,687.041 1529.48,687.041 1530.04,687.041 1530.6,687.041 1531.16,687.041 1531.72,687.041 1532.28,687.041 1532.84,687.041 1533.4,687.041 1533.96,687.041 1534.52,687.041 1535.08,687.041 1535.63,687.041 1536.19,687.041 1536.75,687.041 1537.31,687.041 1537.87,687.041 1538.43,687.041 1538.99,687.041 1539.55,687.041 1540.11,687.041 1540.67,687.041 1541.23,687.041 1541.79,687.041 1542.35,687.041 1542.9,687.041 1543.46,687.041 1544.02,687.041 1544.58,687.041 1545.14,687.041 1545.7,687.041 1546.26,687.041 1546.82,687.041 1547.38,687.041 1547.94,687.041 1548.5,687.041 1549.06,687.041 1549.62,687.041 1550.18,687.041 1550.73,687.041 1551.29,687.041 1551.85,687.041 1552.41,687.041 1552.97,687.041 1553.53,687.041 1554.09,687.041 1554.65,687.041 1555.21,687.041 1555.77,687.041 1556.33,687.041 1556.89,687.041 1557.45,687.041 1558,687.041 1558.56,687.041 1559.12,687.041 1559.68,687.041 1560.24,687.041 1560.8,687.041 1561.36,687.041 1561.92,687.041 1562.48,687.041 1563.04,687.041 1563.6,687.041 1564.16,687.041 1564.72,687.041 1565.28,687.041 1565.83,687.041 1566.39,687.041 1566.95,687.041 1567.51,687.041 1568.07,687.041 1568.63,687.041 1569.19,687.041 1569.75,687.041 1570.31,687.041 1570.87,687.041 1571.43,687.041 1571.99,687.041 1572.55,687.041 1573.1,687.041 1573.66,687.041 1574.22,687.041 1574.78,687.041 1575.34,687.041 1575.9,687.041 1576.46,687.041 1577.02,687.041 1577.58,687.041 1578.14,687.041 1578.7,687.041 1579.26,687.041 1579.82,687.041 1580.37,687.041 1580.93,687.041 1581.49,687.041 1582.05,687.041 1582.61,687.041 1583.17,687.041 1583.73,687.041 1584.29,687.041 1584.85,687.041 1585.41,687.041 1585.97,687.041 1586.53,687.041 1587.09,687.041 1587.65,687.041 1588.2,687.041 1588.76,687.041 1589.32,687.041 1589.88,687.041 1590.44,687.041 1591,687.041 1591.56,687.041 1592.12,687.041 1592.68,687.041 1593.24,687.041 1593.8,687.041 1594.36,687.041 1594.92,687.041 1595.47,687.041 1596.03,687.041 1596.59,687.041 1597.15,687.041 1597.71,687.041 1598.27,687.041 1598.83,687.041 1599.39,687.041 1599.95,687.041 1600.51,687.041 1601.07,687.041 1601.63,687.041 1602.19,687.041 1602.74,687.041 1603.3,687.041 1603.86,687.041 1604.42,687.041 1604.98,687.041 1605.54,687.041 1606.1,687.041 1606.66,687.041 1607.22,687.041 1607.78,687.041 1608.34,687.041 1608.9,687.041 1609.46,687.041 1610.02,687.041 1610.57,687.041 1611.13,687.041 1611.69,687.041 1612.25,687.041 1612.81,687.041 1613.37,687.041 1613.93,687.041 1614.49,687.041 1615.05,687.041 1615.61,687.041 1616.17,687.041 1616.73,687.041 1617.29,687.041 1617.84,687.041 1618.4,687.041 1618.96,687.041 1619.52,687.041 1620.08,687.041 1620.64,687.041 1621.2,687.041 1621.76,687.041 1622.32,687.041 1622.88,687.041 1623.44,687.041 1624,687.041 1624.56,687.041 1625.11,687.041 1625.67,687.041 1626.23,687.041 1626.79,687.041 1627.35,687.041 1627.91,687.041 1628.47,687.041 1629.03,687.041 1629.59,687.041 1630.15,687.041 1630.71,687.041 1631.27,687.041 1631.83,687.041 1632.39,687.041 1632.94,687.041 1633.5,687.041 1634.06,687.041 1634.62,687.041 1635.18,687.041 1635.74,687.041 1636.3,687.041 1636.86,687.041 1637.42,687.041 1637.98,687.041 1638.54,687.041 1639.1,687.041 1639.66,687.041 1640.21,687.041 1640.77,687.041 1641.33,687.041 1641.89,687.041 1642.45,687.041 1643.01,687.041 1643.57,687.041 1644.13,687.041 1644.69,687.041 1645.25,687.041 1645.81,687.041 1646.37,687.041 1646.93,687.041 1647.48,687.041 1648.04,687.041 1648.6,687.041 1649.16,687.041 1649.72,687.041 1650.28,687.041 1650.84,687.041 1651.4,687.041 1651.96,687.041 1652.52,687.041 1653.08,687.041 1653.64,687.041 1654.2,687.041 1654.76,687.041 1655.31,687.041 1655.87,687.041 1656.43,687.041 1656.99,687.041 1657.55,687.041 1658.11,687.041 1658.67,687.041 1659.23,687.041 1659.79,687.041 1660.35,687.041 1660.91,687.041 1661.47,687.041 1662.03,687.041 1662.58,687.041 1663.14,687.041 1663.7,687.041 1664.26,687.041 1664.82,687.041 1665.38,687.041 1665.94,687.041 1666.5,687.041 1667.06,687.041 1667.62,687.041 1668.18,687.041 1668.74,687.041 1669.3,687.041 1669.85,687.041 1670.41,687.041 1670.97,687.041 1671.53,687.041 1672.09,687.041 1672.65,687.041 1673.21,687.041 1673.77,687.041 1674.33,687.041 1674.89,687.041 1675.45,687.041 1676.01,687.041 1676.57,687.041 1677.13,687.041 1677.68,687.041 1678.24,687.041 1678.8,687.041 1679.36,687.041 1679.92,687.041 1680.48,687.041 1681.04,687.041 1681.6,687.041 1682.16,687.041 1682.72,687.041 1683.28,687.041 1683.84,687.041 1684.4,687.041 1684.95,687.041 1685.51,687.041 1686.07,687.041 1686.63,687.041 1687.19,687.041 1687.75,687.041 1688.31,687.041 1688.87,687.041 1689.43,687.041 1689.99,687.041 1690.55,687.041 1691.11,687.041 1691.67,687.041 1692.23,687.041 1692.78,687.041 1693.34,687.041 1693.9,687.041 1694.46,687.041 1695.02,687.041 1695.58,687.041 1696.14,687.041 1696.7,687.041 1697.26,687.041 1697.82,687.041 1698.38,687.041 1698.94,687.041 1699.5,687.041 1700.05,687.041 1700.61,687.041 1701.17,687.041 1701.73,687.041 1702.29,687.041 1702.85,687.041 1703.41,687.041 1703.97,687.041 1704.53,687.041 1705.09,687.041 1705.65,687.041 1706.21,687.041 1706.77,687.041 1707.32,687.041 1707.88,687.041 1708.44,687.041 1709,687.041 1709.56,687.041 1710.12,687.041 1710.68,687.041 1711.24,687.041 1711.8,687.041 1712.36,687.041 1712.92,687.041 1713.48,687.041 1714.04,687.041 1714.6,687.041 1715.15,687.041 1715.71,687.041 1716.27,687.041 1716.83,687.041 1717.39,687.041 1717.95,687.041 1718.51,687.041 1719.07,687.041 1719.63,687.041 1720.19,687.041 1720.75,687.041 1721.31,687.041 1721.87,687.041 1722.42,687.041 1722.98,687.041 1723.54,687.041 1724.1,687.041 1724.66,687.041 1725.22,687.041 1725.78,687.041 1726.34,687.041 1726.9,687.041 1727.46,687.041 1728.02,687.041 1728.58,687.041 1729.14,687.041 1729.69,687.041 1730.25,687.041 1730.81,687.041 1731.37,687.041 1731.93,687.041 1732.49,687.041 1733.05,687.041 1733.61,687.041 1734.17,687.041 1734.73,687.041 1735.29,687.041 1735.85,687.041 1736.41,687.041 1736.97,687.041 1737.52,687.041 1738.08,687.041 1738.64,687.041 1739.2,687.041 1739.76,687.041 1740.32,687.041 1740.88,687.041 1741.44,687.041 1742,687.041 1742.56,687.041 1743.12,687.041 1743.68,687.041 1744.24,687.041 1744.79,687.041 1745.35,687.041 1745.91,687.041 1746.47,687.041 1747.03,687.041 1747.59,687.041 1748.15,687.041 1748.71,687.041 1749.27,687.041 1749.83,687.041 1750.39,687.041 1750.95,687.041 1751.51,687.041 1752.06,687.041 1752.62,687.041 1753.18,687.041 1753.74,687.041 1754.3,687.041 1754.86,687.041 1755.42,687.041 1755.98,687.041 1756.54,687.041 1757.1,687.041 1757.66,687.041 1758.22,687.041 1758.78,687.041 1759.34,687.041 1759.89,687.041 1760.45,687.041 1761.01,687.041 1761.57,687.041 1762.13,687.041 1762.69,687.041 1763.25,687.041 1763.81,687.041 1764.37,687.041 1764.93,687.041 1765.49,687.041 1766.05,687.041 1766.61,687.041 1767.16,687.041 1767.72,687.041 1768.28,687.041 1768.84,687.041 1769.4,687.041 1769.96,687.041 1770.52,687.041 1771.08,687.041 1771.64,687.041 1772.2,687.041 1772.76,687.041 1773.32,687.041 1773.88,687.041 1774.43,687.041 1774.99,687.041 1775.55,687.041 1776.11,687.041 1776.67,687.041 1777.23,687.041 1777.79,687.041 1778.35,687.041 1778.91,687.041 1779.47,687.041 1780.03,687.041 1780.59,687.041 1781.15,687.041 1781.71,687.041 1782.26,687.041 1782.82,687.041 1783.38,687.041 1783.94,687.041 1784.5,687.041 1785.06,687.041 1785.62,687.041 1786.18,687.041 1786.74,687.041 1787.3,687.041 1787.86,687.041 1788.42,687.041 1788.98,687.041 1789.53,687.041 1790.09,687.041 1790.65,687.041 1791.21,687.041 1791.77,687.041 1792.33,687.041 1792.89,687.041 1793.45,687.041 1794.01,687.041 1794.57,687.041 1795.13,687.041 1795.69,687.041 1796.25,687.041 1796.8,687.041 1797.36,687.041 1797.92,687.041 1798.48,687.041 1799.04,687.041 1799.6,687.041 1800.16,687.041 1800.72,687.041 1801.28,687.041 1801.84,687.041 1802.4,687.041 1802.96,687.041 1803.52,687.041 1804.08,687.041 1804.63,687.041 1805.19,687.041 1805.75,687.041 1806.31,687.041 1806.87,687.041 1807.43,687.041 1807.99,687.041 1808.55,687.041 1809.11,687.041 1809.67,687.041 1810.23,687.041 1810.79,687.041 1811.35,687.041 1811.9,687.041 1812.46,687.041 1813.02,687.041 1813.58,687.041 1814.14,687.041 1814.7,687.041 1815.26,687.041 1815.82,687.041 1816.38,687.041 1816.94,687.041 1817.5,687.041 1818.06,687.041 1818.62,687.041 1819.18,687.041 1819.73,687.041 1820.29,687.041 1820.85,687.041 1821.41,687.041 1821.97,687.041 1822.53,687.041 1823.09,687.041 1823.65,687.041 1824.21,687.041 1824.77,687.041 1825.33,687.041 1825.89,687.041 1826.45,687.041 1827,687.041 1827.56,687.041 1828.12,687.041 1828.68,687.041 1829.24,687.041 1829.8,687.041 1830.36,687.041 1830.92,687.041 1831.48,687.041 1832.04,687.041 1832.6,687.041 1833.16,687.041 1833.72,687.041 1834.27,687.041 1834.83,687.041 1835.39,687.041 1835.95,687.041 1836.51,687.041 1837.07,687.041 1837.63,687.041 1838.19,687.041 \"/>\n<path clip-path=\"url(#clip983)\" d=\"M720.247 684.328 L720.806 684.328 L721.365 684.328 L721.924 684.328 L722.484 684.328 L723.043 684.328 L723.602 684.328 L724.161 684.328 L724.721 684.328 L725.28 684.328 L725.839 684.328 L726.398 684.328 L726.958 684.328 L727.517 684.328 L728.076 684.328 L728.635 684.328 L729.195 684.328 L729.754 684.328 L730.313 684.328 L730.872 684.328 L731.432 684.328 L731.991 684.328 L732.55 684.328 L733.109 684.328 L733.669 684.328 L734.228 684.328 L734.787 684.328 L735.346 684.328 L735.906 684.328 L736.465 684.328 L737.024 684.328 L737.583 684.328 L738.143 684.328 L738.702 684.328 L739.261 684.328 L739.82 684.328 L740.38 684.328 L740.939 684.328 L741.498 684.328 L742.057 684.328 L742.617 684.328 L743.176 684.328 L743.735 684.328 L744.294 684.328 L744.854 684.328 L745.413 684.328 L745.972 684.328 L746.531 684.328 L747.091 684.328 L747.65 684.328 L748.209 684.328 L748.768 684.328 L749.328 684.328 L749.887 684.328 L750.446 684.328 L751.005 684.328 L751.565 684.328 L752.124 684.328 L752.683 684.328 L753.242 684.328 L753.802 684.328 L754.361 684.328 L754.92 684.328 L755.479 684.328 L756.039 684.328 L756.598 684.328 L757.157 684.328 L757.716 684.328 L758.276 684.328 L758.835 684.328 L759.394 684.328 L759.953 684.328 L760.513 684.328 L761.072 684.328 L761.631 684.328 L762.19 684.328 L762.75 684.328 L763.309 684.328 L763.868 684.328 L764.427 684.328 L764.987 684.328 L765.546 684.328 L766.105 684.328 L766.664 684.328 L767.224 684.328 L767.783 684.328 L768.342 684.328 L768.901 684.328 L769.461 684.328 L770.02 684.328 L770.579 684.328 L771.138 684.328 L771.698 684.328 L772.257 684.328 L772.816 684.328 L773.375 684.328 L773.935 684.328 L774.494 684.328 L775.053 684.328 L775.612 684.328 L776.172 684.328 L776.731 684.328 L777.29 684.328 L777.849 684.328 L778.409 684.328 L778.968 684.328 L779.527 684.328 L780.086 684.328 L780.646 684.328 L781.205 684.328 L781.764 684.328 L782.323 684.328 L782.883 684.328 L783.442 684.328 L784.001 684.328 L784.56 684.328 L785.12 684.328 L785.679 684.328 L786.238 684.328 L786.797 684.328 L787.357 684.328 L787.916 684.328 L788.475 684.328 L789.034 684.328 L789.594 684.328 L790.153 684.328 L790.712 684.328 L791.271 684.328 L791.831 684.328 L792.39 684.328 L792.949 684.328 L793.508 684.328 L794.068 684.328 L794.627 684.328 L795.186 684.328 L795.745 684.328 L796.305 684.328 L796.864 684.328 L797.423 684.328 L797.982 684.328 L798.542 684.328 L799.101 684.328 L799.66 684.328 L800.219 684.328 L800.779 684.328 L801.338 684.328 L801.897 684.328 L802.456 684.328 L803.016 684.328 L803.575 684.328 L804.134 684.328 L804.693 684.328 L805.253 684.328 L805.812 684.328 L806.371 684.328 L806.931 684.328 L807.49 684.328 L808.049 684.328 L808.608 684.328 L809.168 684.328 L809.727 684.328 L810.286 684.328 L810.845 684.328 L811.405 684.328 L811.964 684.328 L812.523 684.328 L813.082 684.328 L813.642 684.328 L814.201 684.328 L814.76 684.328 L815.319 684.328 L815.879 684.328 L816.438 684.328 L816.997 684.328 L817.556 684.328 L818.116 684.328 L818.675 684.328 L819.234 684.328 L819.793 684.328 L820.353 684.328 L820.912 684.328 L821.471 684.328 L822.03 684.328 L822.59 684.328 L823.149 684.328 L823.708 684.328 L824.267 684.328 L824.827 684.328 L825.386 684.328 L825.945 684.328 L826.504 684.328 L827.064 684.328 L827.623 684.328 L828.182 684.328 L828.741 684.328 L829.301 684.328 L829.86 684.328 L830.419 684.328 L830.978 684.328 L831.538 684.328 L832.097 684.328 L832.656 684.328 L833.215 684.328 L833.775 684.328 L834.334 684.328 L834.893 684.328 L835.452 684.328 L836.012 684.328 L836.571 684.328 L837.13 684.328 L837.689 684.328 L838.249 684.328 L838.808 684.328 L839.367 684.328 L839.926 684.328 L840.486 684.328 L841.045 684.328 L841.604 684.328 L842.163 684.328 L842.723 684.328 L843.282 684.328 L843.841 684.328 L844.4 684.328 L844.96 684.328 L845.519 684.328 L846.078 684.328 L846.637 684.328 L847.197 684.328 L847.756 684.328 L848.315 684.328 L848.874 684.328 L849.434 684.328 L849.993 684.328 L850.552 684.328 L851.111 684.328 L851.671 684.328 L852.23 684.328 L852.789 684.328 L853.348 684.328 L853.908 684.328 L854.467 684.328 L855.026 684.328 L855.585 684.328 L856.145 684.328 L856.704 684.328 L857.263 684.328 L857.822 684.328 L858.382 684.328 L858.941 684.328 L859.5 684.328 L860.059 684.328 L860.619 684.328 L861.178 684.328 L861.737 684.328 L862.296 684.328 L862.856 684.328 L863.415 684.328 L863.974 684.328 L864.533 684.328 L865.093 684.328 L865.652 684.328 L866.211 684.328 L866.77 684.328 L867.33 684.328 L867.889 684.328 L868.448 684.328 L869.007 684.328 L869.567 684.328 L870.126 684.328 L870.685 684.328 L871.244 684.328 L871.804 684.328 L872.363 684.328 L872.922 684.328 L873.481 684.328 L874.041 684.328 L874.6 684.328 L875.159 684.328 L875.718 684.328 L876.278 684.328 L876.837 684.328 L877.396 684.328 L877.955 684.328 L878.515 684.328 L879.074 684.328 L879.633 684.328 L880.192 684.328 L880.752 684.328 L881.311 684.328 L881.87 684.328 L882.429 684.328 L882.989 684.328 L883.548 684.328 L884.107 684.328 L884.666 684.328 L885.226 684.328 L885.785 684.328 L886.344 684.328 L886.903 684.328 L887.463 684.328 L888.022 684.328 L888.581 684.328 L889.14 684.328 L889.7 684.328 L890.259 684.328 L890.818 684.328 L891.377 684.328 L891.937 684.328 L892.496 684.328 L893.055 684.328 L893.614 684.328 L894.174 684.328 L894.733 684.328 L895.292 684.328 L895.851 684.328 L896.411 684.328 L896.97 684.328 L897.529 684.328 L898.088 684.328 L898.648 684.328 L899.207 684.328 L899.766 684.328 L900.325 684.328 L900.885 684.328 L901.444 684.328 L902.003 684.328 L902.562 684.328 L903.122 684.328 L903.681 684.328 L904.24 684.328 L904.799 684.328 L905.359 684.328 L905.918 684.328 L906.477 684.328 L907.036 684.328 L907.596 684.328 L908.155 684.328 L908.714 684.328 L909.273 684.328 L909.833 684.328 L910.392 684.328 L910.951 684.328 L911.51 684.328 L912.07 684.328 L912.629 684.328 L913.188 684.328 L913.747 684.328 L914.307 684.328 L914.866 684.328 L915.425 684.328 L915.984 684.328 L916.544 684.328 L917.103 684.328 L917.662 684.328 L918.221 684.328 L918.781 684.328 L919.34 684.328 L919.899 684.328 L920.458 684.328 L921.018 684.328 L921.577 684.328 L922.136 684.328 L922.695 684.328 L923.255 684.328 L923.814 684.328 L924.373 684.328 L924.932 684.328 L925.492 684.328 L926.051 684.328 L926.61 684.328 L927.169 684.328 L927.729 684.328 L928.288 684.328 L928.847 684.328 L929.406 684.328 L929.966 684.328 L930.525 684.328 L931.084 684.328 L931.644 684.328 L932.203 684.328 L932.762 684.328 L933.321 684.328 L933.881 684.328 L934.44 684.328 L934.999 684.328 L935.558 684.328 L936.118 684.328 L936.677 684.328 L937.236 684.328 L937.795 684.328 L938.355 684.328 L938.914 684.328 L939.473 684.328 L940.032 684.328 L940.592 684.328 L941.151 684.328 L941.71 684.328 L942.269 684.328 L942.829 684.328 L943.388 684.328 L943.947 684.328 L944.506 684.328 L945.066 684.328 L945.625 684.328 L946.184 684.328 L946.743 684.328 L947.303 684.328 L947.862 684.328 L948.421 684.328 L948.98 684.328 L949.54 684.328 L950.099 684.328 L950.658 684.328 L951.217 684.328 L951.777 684.328 L952.336 684.328 L952.895 684.328 L953.454 684.328 L954.014 684.328 L954.573 684.328 L955.132 684.328 L955.691 684.328 L956.251 684.328 L956.81 684.328 L957.369 684.328 L957.928 684.328 L958.488 684.328 L959.047 684.328 L959.606 684.328 L960.165 684.328 L960.725 684.328 L961.284 684.328 L961.843 684.328 L962.402 684.328 L962.962 684.328 L963.521 684.328 L964.08 684.328 L964.639 684.328 L965.199 684.328 L965.758 684.328 L966.317 684.328 L966.876 684.328 L967.436 684.328 L967.995 684.328 L968.554 684.328 L969.113 684.328 L969.673 684.328 L970.232 684.328 L970.791 684.328 L971.35 684.328 L971.91 684.328 L972.469 684.328 L973.028 684.328 L973.587 684.328 L974.147 684.328 L974.706 684.328 L975.265 684.328 L975.824 684.328 L976.384 684.328 L976.943 684.328 L977.502 684.328 L978.061 684.328 L978.621 684.328 L979.18 684.328 L979.739 684.328 L980.298 684.328 L980.858 684.328 L981.417 684.328 L981.976 684.328 L982.535 684.328 L983.095 684.328 L983.654 684.328 L984.213 684.328 L984.772 684.328 L985.332 684.328 L985.891 684.328 L986.45 684.328 L987.009 684.328 L987.569 684.328 L988.128 684.328 L988.687 684.328 L989.246 684.328 L989.806 684.328 L990.365 684.328 L990.924 684.328 L991.483 684.328 L992.043 684.328 L992.602 684.328 L993.161 684.328 L993.72 684.328 L994.28 684.328 L994.839 684.328 L995.398 684.328 L995.957 684.328 L996.517 684.328 L997.076 684.328 L997.635 684.328 L998.194 684.328 L998.754 684.328 L999.313 684.328 L999.872 684.328 L1000.43 684.328 L1000.99 684.328 L1001.55 684.328 L1002.11 684.328 L1002.67 684.328 L1003.23 684.328 L1003.79 684.328 L1004.35 684.328 L1004.91 684.328 L1005.46 684.328 L1006.02 684.328 L1006.58 684.328 L1007.14 684.328 L1007.7 684.328 L1008.26 684.328 L1008.82 684.328 L1009.38 684.328 L1009.94 684.328 L1010.5 684.328 L1011.06 684.328 L1011.62 684.328 L1012.18 684.328 L1012.73 684.328 L1013.29 684.328 L1013.85 684.328 L1014.41 684.328 L1014.97 684.328 L1015.53 684.328 L1016.09 684.328 L1016.65 684.328 L1017.21 684.328 L1017.77 684.328 L1018.33 684.328 L1018.89 684.328 L1019.45 684.328 L1020.01 684.328 L1020.56 684.328 L1021.12 684.328 L1021.68 684.328 L1022.24 684.328 L1022.8 684.328 L1023.36 684.328 L1023.92 684.328 L1024.48 684.328 L1025.04 684.328 L1025.6 684.328 L1026.16 684.328 L1026.72 684.328 L1027.28 684.328 L1027.83 684.328 L1028.39 684.328 L1028.95 684.328 L1029.51 684.328 L1030.07 684.328 L1030.63 684.328 L1031.19 684.328 L1031.75 684.328 L1032.31 684.328 L1032.87 684.328 L1033.43 684.328 L1033.99 684.328 L1034.55 684.328 L1035.1 684.328 L1035.66 684.328 L1036.22 684.328 L1036.78 684.328 L1037.34 684.328 L1037.9 684.328 L1038.46 684.328 L1039.02 684.328 L1039.58 684.328 L1040.14 684.328 L1040.7 684.328 L1041.26 684.328 L1041.82 684.328 L1042.38 684.328 L1042.93 684.328 L1043.49 684.328 L1044.05 684.328 L1044.61 684.328 L1045.17 684.328 L1045.73 684.328 L1046.29 684.328 L1046.85 684.328 L1047.41 684.328 L1047.97 684.328 L1048.53 684.328 L1049.09 684.328 L1049.65 684.328 L1050.2 684.328 L1050.76 684.328 L1051.32 684.328 L1051.88 684.328 L1052.44 684.328 L1053 684.328 L1053.56 684.328 L1054.12 684.328 L1054.68 684.328 L1055.24 684.328 L1055.8 684.328 L1056.36 684.328 L1056.92 684.328 L1057.48 684.328 L1058.03 684.328 L1058.59 684.328 L1059.15 684.328 L1059.71 684.328 L1060.27 684.328 L1060.83 684.328 L1061.39 684.328 L1061.95 684.328 L1062.51 684.328 L1063.07 684.328 L1063.63 684.328 L1064.19 684.328 L1064.75 684.328 L1065.3 684.328 L1065.86 684.328 L1066.42 684.328 L1066.98 684.328 L1067.54 684.328 L1068.1 684.328 L1068.66 684.328 L1069.22 684.328 L1069.78 684.328 L1070.34 684.328 L1070.9 684.328 L1071.46 684.328 L1072.02 684.328 L1072.57 684.328 L1073.13 684.328 L1073.69 684.328 L1074.25 684.328 L1074.81 684.328 L1075.37 684.328 L1075.93 684.328 L1076.49 684.328 L1077.05 684.328 L1077.61 684.328 L1078.17 684.328 L1078.73 684.328 L1079.29 684.328 L1079.85 684.328 L1080.4 684.328 L1080.96 684.328 L1081.52 684.328 L1082.08 684.328 L1082.64 684.328 L1083.2 684.328 L1083.76 684.328 L1084.32 684.328 L1084.88 684.328 L1085.44 684.328 L1086 684.328 L1086.56 684.328 L1087.12 684.328 L1087.67 684.328 L1088.23 684.328 L1088.79 684.328 L1089.35 684.328 L1089.91 684.328 L1090.47 684.328 L1091.03 684.328 L1091.59 684.328 L1092.15 684.328 L1092.71 684.328 L1093.27 684.328 L1093.83 684.328 L1094.39 684.328 L1094.94 684.328 L1095.5 684.328 L1096.06 684.328 L1096.62 684.328 L1097.18 684.328 L1097.74 684.328 L1098.3 684.328 L1098.86 684.328 L1099.42 684.328 L1099.98 684.328 L1100.54 684.328 L1101.1 684.328 L1101.66 684.328 L1102.22 684.328 L1102.77 684.328 L1103.33 684.328 L1103.89 684.328 L1104.45 684.328 L1105.01 684.328 L1105.57 684.328 L1106.13 684.328 L1106.69 684.328 L1107.25 684.328 L1107.81 684.328 L1108.37 684.328 L1108.93 684.328 L1109.49 684.328 L1110.04 684.328 L1110.6 684.328 L1111.16 684.328 L1111.72 684.328 L1112.28 684.328 L1112.84 684.328 L1113.4 684.328 L1113.96 684.328 L1114.52 684.328 L1115.08 684.328 L1115.64 684.328 L1116.2 684.328 L1116.76 684.328 L1117.31 684.328 L1117.87 684.328 L1118.43 684.328 L1118.99 684.328 L1119.55 684.328 L1120.11 684.328 L1120.67 684.328 L1121.23 684.328 L1121.79 684.328 L1122.35 684.328 L1122.91 684.328 L1123.47 684.328 L1124.03 684.328 L1124.59 684.328 L1125.14 684.328 L1125.7 684.328 L1126.26 684.328 L1126.82 684.328 L1127.38 684.328 L1127.94 684.328 L1128.5 684.328 L1129.06 684.328 L1129.62 684.328 L1130.18 684.328 L1130.74 684.328 L1131.3 684.328 L1131.86 684.328 L1132.41 684.328 L1132.97 684.328 L1133.53 684.328 L1134.09 684.328 L1134.65 684.328 L1135.21 684.328 L1135.77 684.328 L1136.33 684.328 L1136.89 684.328 L1137.45 684.328 L1138.01 684.328 L1138.57 684.328 L1139.13 684.328 L1139.68 684.328 L1140.24 684.328 L1140.8 684.328 L1141.36 684.328 L1141.92 684.328 L1142.48 684.328 L1143.04 684.328 L1143.6 684.328 L1144.16 684.328 L1144.72 684.328 L1145.28 684.328 L1145.84 684.328 L1146.4 684.328 L1146.96 684.328 L1147.51 684.328 L1148.07 684.328 L1148.63 684.328 L1149.19 684.328 L1149.75 684.328 L1150.31 684.328 L1150.87 684.328 L1151.43 684.328 L1151.99 684.328 L1152.55 684.328 L1153.11 684.328 L1153.67 684.328 L1154.23 684.328 L1154.78 684.328 L1155.34 684.328 L1155.9 684.328 L1156.46 684.328 L1157.02 684.328 L1157.58 684.328 L1158.14 684.328 L1158.7 684.328 L1159.26 684.328 L1159.82 684.328 L1160.38 684.328 L1160.94 684.328 L1161.5 684.328 L1162.05 684.328 L1162.61 684.328 L1163.17 684.328 L1163.73 684.328 L1164.29 684.328 L1164.85 684.328 L1165.41 684.328 L1165.97 684.328 L1166.53 684.328 L1167.09 684.328 L1167.65 684.328 L1168.21 684.328 L1168.77 684.328 L1169.33 684.328 L1169.88 684.328 L1170.44 684.328 L1171 684.328 L1171.56 684.328 L1172.12 684.328 L1172.68 684.328 L1173.24 684.328 L1173.8 684.328 L1174.36 684.328 L1174.92 684.328 L1175.48 684.328 L1176.04 684.328 L1176.6 684.328 L1177.15 684.328 L1177.71 684.328 L1178.27 684.328 L1178.83 684.328 L1179.39 684.328 L1179.95 684.328 L1180.51 684.328 L1181.07 684.328 L1181.63 684.328 L1182.19 684.328 L1182.75 684.328 L1183.31 684.328 L1183.87 684.328 L1184.43 684.328 L1184.98 684.328 L1185.54 684.328 L1186.1 684.328 L1186.66 684.328 L1187.22 684.328 L1187.78 684.328 L1188.34 684.328 L1188.9 684.328 L1189.46 684.328 L1190.02 684.328 L1190.58 684.328 L1191.14 684.328 L1191.7 684.328 L1192.25 684.328 L1192.81 684.328 L1193.37 684.328 L1193.93 684.328 L1194.49 684.328 L1195.05 684.328 L1195.61 684.328 L1196.17 684.328 L1196.73 684.328 L1197.29 684.328 L1197.85 684.328 L1198.41 684.328 L1198.97 684.328 L1199.52 684.328 L1200.08 684.328 L1200.64 684.328 L1201.2 684.328 L1201.76 684.328 L1202.32 684.328 L1202.88 684.328 L1203.44 684.328 L1204 684.328 L1204.56 684.328 L1205.12 684.328 L1205.68 684.328 L1206.24 684.328 L1206.8 684.328 L1207.35 684.328 L1207.91 684.328 L1208.47 684.328 L1209.03 684.328 L1209.59 684.328 L1210.15 684.328 L1210.71 684.328 L1211.27 684.328 L1211.83 684.328 L1212.39 684.328 L1212.95 684.328 L1213.51 684.328 L1214.07 684.328 L1214.62 684.328 L1215.18 684.328 L1215.74 684.328 L1216.3 684.328 L1216.86 684.328 L1217.42 684.328 L1217.98 684.328 L1218.54 684.328 L1219.1 684.328 L1219.66 684.328 L1220.22 684.328 L1220.78 684.328 L1221.34 684.328 L1221.89 684.328 L1222.45 684.328 L1223.01 684.328 L1223.57 684.328 L1224.13 684.328 L1224.69 684.328 L1225.25 684.328 L1225.81 684.328 L1226.37 684.328 L1226.93 684.328 L1227.49 684.328 L1228.05 684.328 L1228.61 684.328 L1229.17 684.328 L1229.72 684.328 L1230.28 684.328 L1230.84 684.328 L1231.4 684.328 L1231.96 684.328 L1232.52 684.328 L1233.08 684.328 L1233.64 684.328 L1234.2 684.328 L1234.76 684.328 L1235.32 684.328 L1235.88 684.328 L1236.44 684.328 L1236.99 684.328 L1237.55 684.328 L1238.11 684.328 L1238.67 684.328 L1239.23 684.328 L1239.79 684.328 L1240.35 684.328 L1240.91 684.328 L1241.47 684.328 L1242.03 684.328 L1242.59 684.328 L1243.15 684.328 L1243.71 684.328 L1244.26 684.328 L1244.82 684.328 L1245.38 684.328 L1245.94 684.328 L1246.5 684.328 L1247.06 684.328 L1247.62 684.328 L1248.18 684.328 L1248.74 684.328 L1249.3 684.328 L1249.86 684.328 L1250.42 684.328 L1250.98 684.328 L1251.54 684.328 L1252.09 684.328 L1252.65 684.328 L1253.21 684.328 L1253.77 684.328 L1254.33 684.328 L1254.89 684.328 L1255.45 684.328 L1256.01 684.328 L1256.57 684.328 L1257.13 684.328 L1257.69 684.328 L1258.25 684.328 L1258.81 684.328 L1259.36 684.328 L1259.92 684.328 L1260.48 684.328 L1261.04 684.328 L1261.6 684.328 L1262.16 684.328 L1262.72 684.328 L1263.28 684.328 L1263.84 684.328 L1264.4 684.328 L1264.96 684.328 L1265.52 684.328 L1266.08 684.328 L1266.63 684.328 L1267.19 684.328 L1267.75 684.328 L1268.31 684.328 L1268.87 684.328 L1269.43 684.328 L1269.99 684.328 L1270.55 684.328 L1271.11 684.328 L1271.67 684.328 L1272.23 684.328 L1272.79 684.328 L1273.35 684.328 L1273.91 684.328 L1274.46 684.328 L1275.02 684.328 L1275.58 684.328 L1276.14 684.328 L1276.7 684.328 L1277.26 684.328 L1277.82 684.328 L1278.38 684.328 L1278.94 684.328 L1279.5 684.328 L1280.06 684.328 L1280.62 684.328 L1281.18 684.328 L1281.73 684.328 L1282.29 684.328 L1282.85 684.328 L1283.41 684.328 L1283.97 684.328 L1284.53 684.328 L1285.09 684.328 L1285.65 684.328 L1286.21 684.328 L1286.77 684.328 L1287.33 684.328 L1287.89 684.328 L1288.45 684.328 L1289 684.328 L1289.56 684.328 L1290.12 684.328 L1290.68 684.328 L1291.24 684.328 L1291.8 684.328 L1292.36 684.328 L1292.92 684.328 L1293.48 684.328 L1294.04 684.328 L1294.6 684.328 L1295.16 684.328 L1295.72 684.328 L1296.28 684.328 L1296.83 684.328 L1297.39 684.328 L1297.95 684.328 L1298.51 684.328 L1299.07 684.328 L1299.63 684.328 L1300.19 684.328 L1300.75 684.328 L1301.31 684.328 L1301.87 684.328 L1302.43 684.328 L1302.99 684.328 L1303.55 684.328 L1304.1 684.328 L1304.66 684.328 L1305.22 684.328 L1305.78 684.328 L1306.34 684.328 L1306.9 684.328 L1307.46 684.328 L1308.02 684.328 L1308.58 684.328 L1309.14 684.328 L1309.7 684.328 L1310.26 684.328 L1310.82 684.328 L1311.38 684.328 L1311.93 684.328 L1312.49 684.328 L1313.05 684.328 L1313.61 684.328 L1314.17 684.328 L1314.73 684.328 L1315.29 684.328 L1315.85 684.328 L1316.41 684.328 L1316.97 684.328 L1317.53 684.328 L1318.09 684.328 L1318.65 684.328 L1319.2 684.328 L1319.76 684.328 L1320.32 684.328 L1320.88 684.328 L1321.44 684.328 L1322 684.328 L1322.56 684.328 L1323.12 684.328 L1323.68 684.328 L1324.24 684.328 L1324.8 684.328 L1325.36 684.328 L1325.92 684.328 L1326.47 684.328 L1327.03 684.328 L1327.59 684.328 L1328.15 684.328 L1328.71 684.328 L1329.27 684.328 L1329.83 684.328 L1330.39 684.328 L1330.95 684.328 L1331.51 684.328 L1332.07 684.328 L1332.63 684.328 L1333.19 684.328 L1333.75 684.328 L1334.3 684.328 L1334.86 684.328 L1335.42 684.328 L1335.98 684.328 L1336.54 684.328 L1337.1 684.328 L1337.66 684.328 L1338.22 684.328 L1338.78 684.328 L1339.34 684.328 L1339.9 684.328 L1340.46 684.328 L1341.02 684.328 L1341.57 684.328 L1342.13 684.328 L1342.69 684.328 L1343.25 684.328 L1343.81 684.328 L1344.37 684.328 L1344.93 684.328 L1345.49 684.328 L1346.05 684.328 L1346.61 684.328 L1347.17 684.328 L1347.73 684.328 L1348.29 684.328 L1348.84 684.328 L1349.4 684.328 L1349.96 684.328 L1350.52 684.328 L1351.08 684.328 L1351.64 684.328 L1352.2 684.328 L1352.76 684.328 L1353.32 684.328 L1353.88 684.328 L1354.44 684.328 L1355 684.328 L1355.56 684.328 L1356.12 684.328 L1356.67 684.328 L1357.23 684.328 L1357.79 684.328 L1358.35 684.328 L1358.91 684.328 L1359.47 684.328 L1360.03 684.328 L1360.59 684.328 L1361.15 684.328 L1361.71 684.328 L1362.27 684.328 L1362.83 684.328 L1363.39 684.328 L1363.94 684.328 L1364.5 684.328 L1365.06 684.328 L1365.62 684.328 L1366.18 684.328 L1366.74 684.328 L1367.3 684.328 L1367.86 684.328 L1368.42 684.328 L1368.98 684.328 L1369.54 684.328 L1370.1 684.328 L1370.66 684.328 L1371.21 684.328 L1371.77 684.328 L1372.33 684.328 L1372.89 684.328 L1373.45 684.328 L1374.01 684.328 L1374.57 684.328 L1375.13 684.328 L1375.69 684.328 L1376.25 684.328 L1376.81 684.328 L1377.37 684.328 L1377.93 684.328 L1378.49 684.328 L1379.04 684.328 L1379.6 684.328 L1380.16 684.328 L1380.72 684.328 L1381.28 684.328 L1381.84 684.328 L1382.4 684.328 L1382.96 684.328 L1383.52 684.328 L1384.08 684.328 L1384.64 684.328 L1385.2 684.328 L1385.76 684.328 L1386.31 684.328 L1386.87 684.328 L1387.43 684.328 L1387.99 684.328 L1388.55 684.328 L1389.11 684.328 L1389.67 684.328 L1390.23 684.328 L1390.79 684.328 L1391.35 684.328 L1391.91 684.328 L1392.47 684.328 L1393.03 684.328 L1393.58 684.328 L1394.14 684.328 L1394.7 684.328 L1395.26 684.328 L1395.82 684.328 L1396.38 684.328 L1396.94 684.328 L1397.5 684.328 L1398.06 684.328 L1398.62 684.328 L1399.18 684.328 L1399.74 684.328 L1400.3 684.328 L1400.86 684.328 L1401.41 684.328 L1401.97 684.328 L1402.53 684.328 L1403.09 684.328 L1403.65 684.328 L1404.21 684.328 L1404.77 684.328 L1405.33 684.328 L1405.89 684.328 L1406.45 684.328 L1407.01 684.328 L1407.57 684.328 L1408.13 684.328 L1408.68 684.328 L1409.24 684.328 L1409.8 684.328 L1410.36 684.328 L1410.92 684.328 L1411.48 684.328 L1412.04 684.328 L1412.6 684.328 L1413.16 684.328 L1413.72 684.328 L1414.28 684.328 L1414.84 684.328 L1415.4 684.328 L1415.95 684.328 L1416.51 684.328 L1417.07 684.328 L1417.63 684.328 L1418.19 684.328 L1418.75 684.328 L1419.31 684.328 L1419.87 684.328 L1420.43 684.328 L1420.99 684.328 L1421.55 684.328 L1422.11 684.328 L1422.67 684.328 L1423.23 684.328 L1423.78 684.328 L1424.34 684.328 L1424.9 684.328 L1425.46 684.328 L1426.02 684.328 L1426.58 684.328 L1427.14 684.328 L1427.7 684.328 L1428.26 684.328 L1428.82 684.328 L1429.38 684.328 L1429.94 684.328 L1430.5 684.328 L1431.05 684.328 L1431.61 684.328 L1432.17 684.328 L1432.73 684.328 L1433.29 684.328 L1433.85 684.328 L1434.41 684.328 L1434.97 684.328 L1435.53 684.328 L1436.09 684.328 L1436.65 684.328 L1437.21 684.328 L1437.77 684.328 L1438.33 684.328 L1438.88 684.328 L1439.44 684.328 L1440 684.328 L1440.56 684.328 L1441.12 684.328 L1441.68 684.328 L1442.24 684.328 L1442.8 684.328 L1443.36 684.328 L1443.92 684.328 L1444.48 684.328 L1445.04 684.328 L1445.6 684.328 L1446.15 684.328 L1446.71 684.328 L1447.27 684.328 L1447.83 684.328 L1448.39 684.328 L1448.95 684.328 L1449.51 684.328 L1450.07 684.328 L1450.63 684.328 L1451.19 684.328 L1451.75 684.328 L1452.31 684.328 L1452.87 684.328 L1453.42 684.328 L1453.98 684.328 L1454.54 684.328 L1455.1 684.328 L1455.66 684.328 L1456.22 684.328 L1456.78 684.328 L1457.34 684.328 L1457.9 684.328 L1458.46 684.328 L1459.02 684.328 L1459.58 684.328 L1460.14 684.328 L1460.7 684.328 L1461.25 684.328 L1461.81 684.328 L1462.37 684.328 L1462.93 684.328 L1463.49 684.328 L1464.05 684.328 L1464.61 684.328 L1465.17 684.328 L1465.73 684.328 L1466.29 684.328 L1466.85 684.328 L1467.41 684.328 L1467.97 684.328 L1468.52 684.328 L1469.08 684.328 L1469.64 684.328 L1470.2 684.328 L1470.76 684.328 L1471.32 684.328 L1471.88 684.328 L1472.44 684.328 L1473 684.328 L1473.56 684.328 L1474.12 684.328 L1474.68 684.328 L1475.24 684.328 L1475.79 684.328 L1476.35 684.328 L1476.91 684.328 L1477.47 684.328 L1478.03 684.328 L1478.59 684.328 L1479.15 684.328 L1479.71 684.328 L1480.27 684.328 L1480.83 684.328 L1481.39 684.328 L1481.95 684.328 L1482.51 684.328 L1483.07 684.328 L1483.62 684.328 L1484.18 684.328 L1484.74 684.328 L1485.3 684.328 L1485.86 684.328 L1486.42 684.328 L1486.98 684.328 L1487.54 684.328 L1488.1 684.328 L1488.66 684.328 L1489.22 684.328 L1489.78 684.328 L1490.34 684.328 L1490.89 684.328 L1491.45 684.328 L1492.01 684.328 L1492.57 684.328 L1493.13 684.328 L1493.69 684.328 L1494.25 684.328 L1494.81 684.328 L1495.37 684.328 L1495.93 684.328 L1496.49 684.328 L1497.05 684.328 L1497.61 684.328 L1498.16 684.328 L1498.72 684.328 L1499.28 684.328 L1499.84 684.328 L1500.4 684.328 L1500.96 684.328 L1501.52 684.328 L1502.08 684.328 L1502.64 684.328 L1503.2 684.328 L1503.76 684.328 L1504.32 684.328 L1504.88 684.328 L1505.44 684.328 L1505.99 684.328 L1506.55 684.328 L1507.11 684.328 L1507.67 684.328 L1508.23 684.328 L1508.79 684.328 L1509.35 684.328 L1509.91 684.328 L1510.47 684.328 L1511.03 684.328 L1511.59 684.328 L1512.15 684.328 L1512.71 684.328 L1513.26 684.328 L1513.82 684.328 L1514.38 684.328 L1514.94 684.328 L1515.5 684.328 L1516.06 684.328 L1516.62 684.328 L1517.18 684.328 L1517.74 684.328 L1518.3 684.328 L1518.86 684.328 L1519.42 684.328 L1519.98 684.328 L1520.53 684.328 L1521.09 684.328 L1521.65 684.328 L1522.21 684.328 L1522.77 684.328 L1523.33 684.328 L1523.89 684.328 L1524.45 684.328 L1525.01 684.328 L1525.57 684.328 L1526.13 684.328 L1526.69 684.328 L1527.25 684.328 L1527.81 684.328 L1528.36 684.328 L1528.92 684.328 L1529.48 684.328 L1530.04 684.328 L1530.6 684.328 L1531.16 684.328 L1531.72 684.328 L1532.28 684.328 L1532.84 684.328 L1533.4 684.328 L1533.96 684.328 L1534.52 684.328 L1535.08 684.328 L1535.63 684.328 L1536.19 684.328 L1536.75 684.328 L1537.31 684.328 L1537.87 684.328 L1538.43 684.328 L1538.99 684.328 L1539.55 684.328 L1540.11 684.328 L1540.67 684.328 L1541.23 684.328 L1541.79 684.328 L1542.35 684.328 L1542.9 684.328 L1543.46 684.328 L1544.02 684.328 L1544.58 684.328 L1545.14 684.328 L1545.7 684.328 L1546.26 684.328 L1546.82 684.328 L1547.38 684.328 L1547.94 684.328 L1548.5 684.328 L1549.06 684.328 L1549.62 684.328 L1550.18 684.328 L1550.73 684.328 L1551.29 684.328 L1551.85 684.328 L1552.41 684.328 L1552.97 684.328 L1553.53 684.328 L1554.09 684.328 L1554.65 684.328 L1555.21 684.328 L1555.77 684.328 L1556.33 684.328 L1556.89 684.328 L1557.45 684.328 L1558 684.328 L1558.56 684.328 L1559.12 684.328 L1559.68 684.328 L1560.24 684.328 L1560.8 684.328 L1561.36 684.328 L1561.92 684.328 L1562.48 684.328 L1563.04 684.328 L1563.6 684.328 L1564.16 684.328 L1564.72 684.328 L1565.28 684.328 L1565.83 684.328 L1566.39 684.328 L1566.95 684.328 L1567.51 684.328 L1568.07 684.328 L1568.63 684.328 L1569.19 684.328 L1569.75 684.328 L1570.31 684.328 L1570.87 684.328 L1571.43 684.328 L1571.99 684.328 L1572.55 684.328 L1573.1 684.328 L1573.66 684.328 L1574.22 684.328 L1574.78 684.328 L1575.34 684.328 L1575.9 684.328 L1576.46 684.328 L1577.02 684.328 L1577.58 684.328 L1578.14 684.328 L1578.7 684.328 L1579.26 684.328 L1579.82 684.328 L1580.37 684.328 L1580.93 684.328 L1581.49 684.328 L1582.05 684.328 L1582.61 684.328 L1583.17 684.328 L1583.73 684.328 L1584.29 684.328 L1584.85 684.328 L1585.41 684.328 L1585.97 684.328 L1586.53 684.328 L1587.09 684.328 L1587.65 684.328 L1588.2 684.328 L1588.76 684.328 L1589.32 684.328 L1589.88 684.328 L1590.44 684.328 L1591 684.328 L1591.56 684.328 L1592.12 684.328 L1592.68 684.328 L1593.24 684.328 L1593.8 684.328 L1594.36 684.328 L1594.92 684.328 L1595.47 684.328 L1596.03 684.328 L1596.59 684.328 L1597.15 684.328 L1597.71 684.328 L1598.27 684.328 L1598.83 684.328 L1599.39 684.328 L1599.95 684.328 L1600.51 684.328 L1601.07 684.328 L1601.63 684.328 L1602.19 684.328 L1602.74 684.328 L1603.3 684.328 L1603.86 684.328 L1604.42 684.328 L1604.98 684.328 L1605.54 684.328 L1606.1 684.328 L1606.66 684.328 L1607.22 684.328 L1607.78 684.328 L1608.34 684.328 L1608.9 684.328 L1609.46 684.328 L1610.02 684.328 L1610.57 684.328 L1611.13 684.328 L1611.69 684.328 L1612.25 684.328 L1612.81 684.328 L1613.37 684.328 L1613.93 684.328 L1614.49 684.328 L1615.05 684.328 L1615.61 684.328 L1616.17 684.328 L1616.73 684.328 L1617.29 684.328 L1617.84 684.328 L1618.4 684.328 L1618.96 684.328 L1619.52 684.328 L1620.08 684.328 L1620.64 684.328 L1621.2 684.328 L1621.76 684.328 L1622.32 684.328 L1622.88 684.328 L1623.44 684.328 L1624 684.328 L1624.56 684.328 L1625.11 684.328 L1625.67 684.328 L1626.23 684.328 L1626.79 684.328 L1627.35 684.328 L1627.91 684.328 L1628.47 684.328 L1629.03 684.328 L1629.59 684.328 L1630.15 684.328 L1630.71 684.328 L1631.27 684.328 L1631.83 684.328 L1632.39 684.328 L1632.94 684.328 L1633.5 684.328 L1634.06 684.328 L1634.62 684.328 L1635.18 684.328 L1635.74 684.328 L1636.3 684.328 L1636.86 684.328 L1637.42 684.328 L1637.98 684.328 L1638.54 684.328 L1639.1 684.328 L1639.66 684.328 L1640.21 684.328 L1640.77 684.328 L1641.33 684.328 L1641.89 684.328 L1642.45 684.328 L1643.01 684.328 L1643.57 684.328 L1644.13 684.328 L1644.69 684.328 L1645.25 684.328 L1645.81 684.328 L1646.37 684.328 L1646.93 684.328 L1647.48 684.328 L1648.04 684.328 L1648.6 684.328 L1649.16 684.328 L1649.72 684.328 L1650.28 684.328 L1650.84 684.328 L1651.4 684.328 L1651.96 684.328 L1652.52 684.328 L1653.08 684.328 L1653.64 684.328 L1654.2 684.328 L1654.76 684.328 L1655.31 684.328 L1655.87 684.328 L1656.43 684.328 L1656.99 684.328 L1657.55 684.328 L1658.11 684.328 L1658.67 684.328 L1659.23 684.328 L1659.79 684.328 L1660.35 684.328 L1660.91 684.328 L1661.47 684.328 L1662.03 684.328 L1662.58 684.328 L1663.14 684.328 L1663.7 684.328 L1664.26 684.328 L1664.82 684.328 L1665.38 684.328 L1665.94 684.328 L1666.5 684.328 L1667.06 684.328 L1667.62 684.328 L1668.18 684.328 L1668.74 684.328 L1669.3 684.328 L1669.85 684.328 L1670.41 684.328 L1670.97 684.328 L1671.53 684.328 L1672.09 684.328 L1672.65 684.328 L1673.21 684.328 L1673.77 684.328 L1674.33 684.328 L1674.89 684.328 L1675.45 684.328 L1676.01 684.328 L1676.57 684.328 L1677.13 684.328 L1677.68 684.328 L1678.24 684.328 L1678.8 684.328 L1679.36 684.328 L1679.92 684.328 L1680.48 684.328 L1681.04 684.328 L1681.6 684.328 L1682.16 684.328 L1682.72 684.328 L1683.28 684.328 L1683.84 684.328 L1684.4 684.328 L1684.95 684.328 L1685.51 684.328 L1686.07 684.328 L1686.63 684.328 L1687.19 684.328 L1687.75 684.328 L1688.31 684.328 L1688.87 684.328 L1689.43 684.328 L1689.99 684.328 L1690.55 684.328 L1691.11 684.328 L1691.67 684.328 L1692.23 684.328 L1692.78 684.328 L1693.34 684.328 L1693.9 684.328 L1694.46 684.328 L1695.02 684.328 L1695.58 684.328 L1696.14 684.328 L1696.7 684.328 L1697.26 684.328 L1697.82 684.328 L1698.38 684.328 L1698.94 684.328 L1699.5 684.328 L1700.05 684.328 L1700.61 684.328 L1701.17 684.328 L1701.73 684.328 L1702.29 684.328 L1702.85 684.328 L1703.41 684.328 L1703.97 684.328 L1704.53 684.328 L1705.09 684.328 L1705.65 684.328 L1706.21 684.328 L1706.77 684.328 L1707.32 684.328 L1707.88 684.328 L1708.44 684.328 L1709 684.328 L1709.56 684.328 L1710.12 684.328 L1710.68 684.328 L1711.24 684.328 L1711.8 684.328 L1712.36 684.328 L1712.92 684.328 L1713.48 684.328 L1714.04 684.328 L1714.6 684.328 L1715.15 684.328 L1715.71 684.328 L1716.27 684.328 L1716.83 684.328 L1717.39 684.328 L1717.95 684.328 L1718.51 684.328 L1719.07 684.328 L1719.63 684.328 L1720.19 684.328 L1720.75 684.328 L1721.31 684.328 L1721.87 684.328 L1722.42 684.328 L1722.98 684.328 L1723.54 684.328 L1724.1 684.328 L1724.66 684.328 L1725.22 684.328 L1725.78 684.328 L1726.34 684.328 L1726.9 684.328 L1727.46 684.328 L1728.02 684.328 L1728.58 684.328 L1729.14 684.328 L1729.69 684.328 L1730.25 684.328 L1730.81 684.328 L1731.37 684.328 L1731.93 684.328 L1732.49 684.328 L1733.05 684.328 L1733.61 684.328 L1734.17 684.328 L1734.73 684.328 L1735.29 684.328 L1735.85 684.328 L1736.41 684.328 L1736.97 684.328 L1737.52 684.328 L1738.08 684.328 L1738.64 684.328 L1739.2 684.328 L1739.76 684.328 L1740.32 684.328 L1740.88 684.328 L1741.44 684.328 L1742 684.328 L1742.56 684.328 L1743.12 684.328 L1743.68 684.328 L1744.24 684.328 L1744.79 684.328 L1745.35 684.328 L1745.91 684.328 L1746.47 684.328 L1747.03 684.328 L1747.59 684.328 L1748.15 684.328 L1748.71 684.328 L1749.27 684.328 L1749.83 684.328 L1750.39 684.328 L1750.95 684.328 L1751.51 684.328 L1752.06 684.328 L1752.62 684.328 L1753.18 684.328 L1753.74 684.328 L1754.3 684.328 L1754.86 684.328 L1755.42 684.328 L1755.98 684.328 L1756.54 684.328 L1757.1 684.328 L1757.66 684.328 L1758.22 684.328 L1758.78 684.328 L1759.34 684.328 L1759.89 684.328 L1760.45 684.328 L1761.01 684.328 L1761.57 684.328 L1762.13 684.328 L1762.69 684.328 L1763.25 684.328 L1763.81 684.328 L1764.37 684.328 L1764.93 684.328 L1765.49 684.328 L1766.05 684.328 L1766.61 684.328 L1767.16 684.328 L1767.72 684.328 L1768.28 684.328 L1768.84 684.328 L1769.4 684.328 L1769.96 684.328 L1770.52 684.328 L1771.08 684.328 L1771.64 684.328 L1772.2 684.328 L1772.76 684.328 L1773.32 684.328 L1773.88 684.328 L1774.43 684.328 L1774.99 684.328 L1775.55 684.328 L1776.11 684.328 L1776.67 684.328 L1777.23 684.328 L1777.79 684.328 L1778.35 684.328 L1778.91 684.328 L1779.47 684.328 L1780.03 684.328 L1780.59 684.328 L1781.15 684.328 L1781.71 684.328 L1782.26 684.328 L1782.82 684.328 L1783.38 684.328 L1783.94 684.328 L1784.5 684.328 L1785.06 684.328 L1785.62 684.328 L1786.18 684.328 L1786.74 684.328 L1787.3 684.328 L1787.86 684.328 L1788.42 684.328 L1788.98 684.328 L1789.53 684.328 L1790.09 684.328 L1790.65 684.328 L1791.21 684.328 L1791.77 684.328 L1792.33 684.328 L1792.89 684.328 L1793.45 684.328 L1794.01 684.328 L1794.57 684.328 L1795.13 684.328 L1795.69 684.328 L1796.25 684.328 L1796.8 684.328 L1797.36 684.328 L1797.92 684.328 L1798.48 684.328 L1799.04 684.328 L1799.6 684.328 L1800.16 684.328 L1800.72 684.328 L1801.28 684.328 L1801.84 684.328 L1802.4 684.328 L1802.96 684.328 L1803.52 684.328 L1804.08 684.328 L1804.63 684.328 L1805.19 684.328 L1805.75 684.328 L1806.31 684.328 L1806.87 684.328 L1807.43 684.328 L1807.99 684.328 L1808.55 684.328 L1809.11 684.328 L1809.67 684.328 L1810.23 684.328 L1810.79 684.328 L1811.35 684.328 L1811.9 684.328 L1812.46 684.328 L1813.02 684.328 L1813.58 684.328 L1814.14 684.328 L1814.7 684.328 L1815.26 684.328 L1815.82 684.328 L1816.38 684.328 L1816.94 684.328 L1817.5 684.328 L1818.06 684.328 L1818.62 684.328 L1819.18 684.328 L1819.73 684.328 L1820.29 684.328 L1820.85 684.328 L1821.41 684.328 L1821.97 684.328 L1822.53 684.328 L1823.09 684.328 L1823.65 684.328 L1824.21 684.328 L1824.77 684.328 L1825.33 684.328 L1825.89 684.328 L1826.45 684.328 L1827 684.328 L1827.56 684.328 L1828.12 684.328 L1828.68 684.328 L1829.24 684.328 L1829.8 684.328 L1830.36 684.328 L1830.92 684.328 L1831.48 684.328 L1832.04 684.328 L1832.6 684.328 L1833.16 684.328 L1833.72 684.328 L1834.27 684.328 L1834.83 684.328 L1835.39 684.328 L1835.95 684.328 L1836.51 684.328 L1837.07 684.328 L1837.63 684.328 L1838.19 684.328 L1838.19 682.745 L1837.63 682.745 L1837.07 682.745 L1836.51 682.745 L1835.95 682.745 L1835.39 682.745 L1834.83 682.745 L1834.27 682.745 L1833.72 682.745 L1833.16 682.745 L1832.6 682.745 L1832.04 682.745 L1831.48 682.745 L1830.92 682.745 L1830.36 682.745 L1829.8 682.745 L1829.24 682.745 L1828.68 682.745 L1828.12 682.745 L1827.56 682.745 L1827 682.745 L1826.45 682.745 L1825.89 682.745 L1825.33 682.745 L1824.77 682.745 L1824.21 682.745 L1823.65 682.745 L1823.09 682.745 L1822.53 682.745 L1821.97 682.745 L1821.41 682.745 L1820.85 682.745 L1820.29 682.745 L1819.73 682.745 L1819.18 682.745 L1818.62 682.745 L1818.06 682.745 L1817.5 682.745 L1816.94 682.745 L1816.38 682.745 L1815.82 682.745 L1815.26 682.745 L1814.7 682.745 L1814.14 682.745 L1813.58 682.745 L1813.02 682.745 L1812.46 682.745 L1811.9 682.745 L1811.35 682.745 L1810.79 682.745 L1810.23 682.745 L1809.67 682.745 L1809.11 682.745 L1808.55 682.745 L1807.99 682.745 L1807.43 682.745 L1806.87 682.745 L1806.31 682.745 L1805.75 682.745 L1805.19 682.745 L1804.63 682.745 L1804.08 682.745 L1803.52 682.745 L1802.96 682.745 L1802.4 682.745 L1801.84 682.745 L1801.28 682.745 L1800.72 682.745 L1800.16 682.745 L1799.6 682.745 L1799.04 682.745 L1798.48 682.745 L1797.92 682.745 L1797.36 682.745 L1796.8 682.745 L1796.25 682.745 L1795.69 682.745 L1795.13 682.745 L1794.57 682.745 L1794.01 682.745 L1793.45 682.745 L1792.89 682.745 L1792.33 682.745 L1791.77 682.745 L1791.21 682.745 L1790.65 682.745 L1790.09 682.745 L1789.53 682.745 L1788.98 682.745 L1788.42 682.745 L1787.86 682.745 L1787.3 682.745 L1786.74 682.745 L1786.18 682.745 L1785.62 682.745 L1785.06 682.745 L1784.5 682.745 L1783.94 682.745 L1783.38 682.745 L1782.82 682.745 L1782.26 682.745 L1781.71 682.745 L1781.15 682.745 L1780.59 682.745 L1780.03 682.745 L1779.47 682.745 L1778.91 682.745 L1778.35 682.745 L1777.79 682.745 L1777.23 682.745 L1776.67 682.745 L1776.11 682.745 L1775.55 682.745 L1774.99 682.745 L1774.43 682.745 L1773.88 682.745 L1773.32 682.745 L1772.76 682.745 L1772.2 682.745 L1771.64 682.745 L1771.08 682.745 L1770.52 682.745 L1769.96 682.745 L1769.4 682.745 L1768.84 682.745 L1768.28 682.745 L1767.72 682.745 L1767.16 682.745 L1766.61 682.745 L1766.05 682.745 L1765.49 682.745 L1764.93 682.745 L1764.37 682.745 L1763.81 682.745 L1763.25 682.745 L1762.69 682.745 L1762.13 682.745 L1761.57 682.745 L1761.01 682.745 L1760.45 682.745 L1759.89 682.745 L1759.34 682.745 L1758.78 682.745 L1758.22 682.745 L1757.66 682.745 L1757.1 682.745 L1756.54 682.745 L1755.98 682.745 L1755.42 682.745 L1754.86 682.745 L1754.3 682.745 L1753.74 682.745 L1753.18 682.745 L1752.62 682.745 L1752.06 682.745 L1751.51 682.745 L1750.95 682.745 L1750.39 682.745 L1749.83 682.745 L1749.27 682.745 L1748.71 682.745 L1748.15 682.745 L1747.59 682.745 L1747.03 682.745 L1746.47 682.745 L1745.91 682.745 L1745.35 682.745 L1744.79 682.745 L1744.24 682.745 L1743.68 682.745 L1743.12 682.745 L1742.56 682.745 L1742 682.745 L1741.44 682.745 L1740.88 682.745 L1740.32 682.745 L1739.76 682.745 L1739.2 682.745 L1738.64 682.745 L1738.08 682.745 L1737.52 682.745 L1736.97 682.745 L1736.41 682.745 L1735.85 682.745 L1735.29 682.745 L1734.73 682.745 L1734.17 682.745 L1733.61 682.745 L1733.05 682.745 L1732.49 682.745 L1731.93 682.745 L1731.37 682.745 L1730.81 682.745 L1730.25 682.745 L1729.69 682.745 L1729.14 682.745 L1728.58 682.745 L1728.02 682.745 L1727.46 682.745 L1726.9 682.745 L1726.34 682.745 L1725.78 682.745 L1725.22 682.745 L1724.66 682.745 L1724.1 682.745 L1723.54 682.745 L1722.98 682.745 L1722.42 682.745 L1721.87 682.745 L1721.31 682.745 L1720.75 682.745 L1720.19 682.745 L1719.63 682.745 L1719.07 682.745 L1718.51 682.745 L1717.95 682.745 L1717.39 682.745 L1716.83 682.745 L1716.27 682.745 L1715.71 682.745 L1715.15 682.745 L1714.6 682.745 L1714.04 682.745 L1713.48 682.745 L1712.92 682.745 L1712.36 682.745 L1711.8 682.745 L1711.24 682.745 L1710.68 682.745 L1710.12 682.745 L1709.56 682.745 L1709 682.745 L1708.44 682.745 L1707.88 682.745 L1707.32 682.745 L1706.77 682.745 L1706.21 682.745 L1705.65 682.745 L1705.09 682.745 L1704.53 682.745 L1703.97 682.745 L1703.41 682.745 L1702.85 682.745 L1702.29 682.745 L1701.73 682.745 L1701.17 682.745 L1700.61 682.745 L1700.05 682.745 L1699.5 682.745 L1698.94 682.745 L1698.38 682.745 L1697.82 682.745 L1697.26 682.745 L1696.7 682.745 L1696.14 682.745 L1695.58 682.745 L1695.02 682.745 L1694.46 682.745 L1693.9 682.745 L1693.34 682.745 L1692.78 682.745 L1692.23 682.745 L1691.67 682.745 L1691.11 682.745 L1690.55 682.745 L1689.99 682.745 L1689.43 682.745 L1688.87 682.745 L1688.31 682.745 L1687.75 682.745 L1687.19 682.745 L1686.63 682.745 L1686.07 682.745 L1685.51 682.745 L1684.95 682.745 L1684.4 682.745 L1683.84 682.745 L1683.28 682.745 L1682.72 682.745 L1682.16 682.745 L1681.6 682.745 L1681.04 682.745 L1680.48 682.745 L1679.92 682.745 L1679.36 682.745 L1678.8 682.745 L1678.24 682.745 L1677.68 682.745 L1677.13 682.745 L1676.57 682.745 L1676.01 682.745 L1675.45 682.745 L1674.89 682.745 L1674.33 682.745 L1673.77 682.745 L1673.21 682.745 L1672.65 682.745 L1672.09 682.745 L1671.53 682.745 L1670.97 682.745 L1670.41 682.745 L1669.85 682.745 L1669.3 682.745 L1668.74 682.745 L1668.18 682.745 L1667.62 682.745 L1667.06 682.745 L1666.5 682.745 L1665.94 682.745 L1665.38 682.745 L1664.82 682.745 L1664.26 682.745 L1663.7 682.745 L1663.14 682.745 L1662.58 682.745 L1662.03 682.745 L1661.47 682.745 L1660.91 682.745 L1660.35 682.745 L1659.79 682.745 L1659.23 682.745 L1658.67 682.745 L1658.11 682.745 L1657.55 682.745 L1656.99 682.745 L1656.43 682.745 L1655.87 682.745 L1655.31 682.745 L1654.76 682.745 L1654.2 682.745 L1653.64 682.745 L1653.08 682.745 L1652.52 682.745 L1651.96 682.745 L1651.4 682.745 L1650.84 682.745 L1650.28 682.745 L1649.72 682.745 L1649.16 682.745 L1648.6 682.745 L1648.04 682.745 L1647.48 682.745 L1646.93 682.745 L1646.37 682.745 L1645.81 682.745 L1645.25 682.745 L1644.69 682.745 L1644.13 682.745 L1643.57 682.745 L1643.01 682.745 L1642.45 682.745 L1641.89 682.745 L1641.33 682.745 L1640.77 682.745 L1640.21 682.745 L1639.66 682.745 L1639.1 682.745 L1638.54 682.745 L1637.98 682.745 L1637.42 682.745 L1636.86 682.745 L1636.3 682.745 L1635.74 682.745 L1635.18 682.745 L1634.62 682.745 L1634.06 682.745 L1633.5 682.745 L1632.94 682.745 L1632.39 682.745 L1631.83 682.745 L1631.27 682.745 L1630.71 682.745 L1630.15 682.745 L1629.59 682.745 L1629.03 682.745 L1628.47 682.745 L1627.91 682.745 L1627.35 682.745 L1626.79 682.745 L1626.23 682.745 L1625.67 682.745 L1625.11 682.745 L1624.56 682.745 L1624 682.745 L1623.44 682.745 L1622.88 682.745 L1622.32 682.745 L1621.76 682.745 L1621.2 682.745 L1620.64 682.745 L1620.08 682.745 L1619.52 682.745 L1618.96 682.745 L1618.4 682.745 L1617.84 682.745 L1617.29 682.745 L1616.73 682.745 L1616.17 682.745 L1615.61 682.745 L1615.05 682.745 L1614.49 682.745 L1613.93 682.745 L1613.37 682.745 L1612.81 682.745 L1612.25 682.745 L1611.69 682.745 L1611.13 682.745 L1610.57 682.745 L1610.02 682.745 L1609.46 682.745 L1608.9 682.745 L1608.34 682.745 L1607.78 682.745 L1607.22 682.745 L1606.66 682.745 L1606.1 682.745 L1605.54 682.745 L1604.98 682.745 L1604.42 682.745 L1603.86 682.745 L1603.3 682.745 L1602.74 682.745 L1602.19 682.745 L1601.63 682.745 L1601.07 682.745 L1600.51 682.745 L1599.95 682.745 L1599.39 682.745 L1598.83 682.745 L1598.27 682.745 L1597.71 682.745 L1597.15 682.745 L1596.59 682.745 L1596.03 682.745 L1595.47 682.745 L1594.92 682.745 L1594.36 682.745 L1593.8 682.745 L1593.24 682.745 L1592.68 682.745 L1592.12 682.745 L1591.56 682.745 L1591 682.745 L1590.44 682.745 L1589.88 682.745 L1589.32 682.745 L1588.76 682.745 L1588.2 682.745 L1587.65 682.745 L1587.09 682.745 L1586.53 682.745 L1585.97 682.745 L1585.41 682.745 L1584.85 682.745 L1584.29 682.745 L1583.73 682.745 L1583.17 682.745 L1582.61 682.745 L1582.05 682.745 L1581.49 682.745 L1580.93 682.745 L1580.37 682.745 L1579.82 682.745 L1579.26 682.745 L1578.7 682.745 L1578.14 682.745 L1577.58 682.745 L1577.02 682.745 L1576.46 682.745 L1575.9 682.745 L1575.34 682.745 L1574.78 682.745 L1574.22 682.745 L1573.66 682.745 L1573.1 682.745 L1572.55 682.745 L1571.99 682.745 L1571.43 682.745 L1570.87 682.745 L1570.31 682.745 L1569.75 682.745 L1569.19 682.745 L1568.63 682.745 L1568.07 682.745 L1567.51 682.745 L1566.95 682.745 L1566.39 682.745 L1565.83 682.745 L1565.28 682.745 L1564.72 682.745 L1564.16 682.745 L1563.6 682.745 L1563.04 682.745 L1562.48 682.745 L1561.92 682.745 L1561.36 682.745 L1560.8 682.745 L1560.24 682.745 L1559.68 682.745 L1559.12 682.745 L1558.56 682.745 L1558 682.745 L1557.45 682.745 L1556.89 682.745 L1556.33 682.745 L1555.77 682.745 L1555.21 682.745 L1554.65 682.745 L1554.09 682.745 L1553.53 682.745 L1552.97 682.745 L1552.41 682.745 L1551.85 682.745 L1551.29 682.745 L1550.73 682.745 L1550.18 682.745 L1549.62 682.745 L1549.06 682.745 L1548.5 682.745 L1547.94 682.745 L1547.38 682.745 L1546.82 682.745 L1546.26 682.745 L1545.7 682.745 L1545.14 682.745 L1544.58 682.745 L1544.02 682.745 L1543.46 682.745 L1542.9 682.745 L1542.35 682.745 L1541.79 682.745 L1541.23 682.745 L1540.67 682.745 L1540.11 682.745 L1539.55 682.745 L1538.99 682.745 L1538.43 682.745 L1537.87 682.745 L1537.31 682.745 L1536.75 682.745 L1536.19 682.745 L1535.63 682.745 L1535.08 682.745 L1534.52 682.745 L1533.96 682.745 L1533.4 682.745 L1532.84 682.745 L1532.28 682.745 L1531.72 682.745 L1531.16 682.745 L1530.6 682.745 L1530.04 682.745 L1529.48 682.745 L1528.92 682.745 L1528.36 682.745 L1527.81 682.745 L1527.25 682.745 L1526.69 682.745 L1526.13 682.745 L1525.57 682.745 L1525.01 682.745 L1524.45 682.745 L1523.89 682.745 L1523.33 682.745 L1522.77 682.745 L1522.21 682.745 L1521.65 682.745 L1521.09 682.745 L1520.53 682.745 L1519.98 682.745 L1519.42 682.745 L1518.86 682.745 L1518.3 682.745 L1517.74 682.745 L1517.18 682.745 L1516.62 682.745 L1516.06 682.745 L1515.5 682.745 L1514.94 682.745 L1514.38 682.745 L1513.82 682.745 L1513.26 682.745 L1512.71 682.745 L1512.15 682.745 L1511.59 682.745 L1511.03 682.745 L1510.47 682.745 L1509.91 682.745 L1509.35 682.745 L1508.79 682.745 L1508.23 682.745 L1507.67 682.745 L1507.11 682.745 L1506.55 682.745 L1505.99 682.745 L1505.44 682.745 L1504.88 682.745 L1504.32 682.745 L1503.76 682.745 L1503.2 682.745 L1502.64 682.745 L1502.08 682.745 L1501.52 682.745 L1500.96 682.745 L1500.4 682.745 L1499.84 682.745 L1499.28 682.745 L1498.72 682.745 L1498.16 682.745 L1497.61 682.745 L1497.05 682.745 L1496.49 682.745 L1495.93 682.745 L1495.37 682.745 L1494.81 682.745 L1494.25 682.745 L1493.69 682.745 L1493.13 682.745 L1492.57 682.745 L1492.01 682.745 L1491.45 682.745 L1490.89 682.745 L1490.34 682.745 L1489.78 682.745 L1489.22 682.745 L1488.66 682.745 L1488.1 682.745 L1487.54 682.745 L1486.98 682.745 L1486.42 682.745 L1485.86 682.745 L1485.3 682.745 L1484.74 682.745 L1484.18 682.745 L1483.62 682.745 L1483.07 682.745 L1482.51 682.745 L1481.95 682.745 L1481.39 682.745 L1480.83 682.745 L1480.27 682.745 L1479.71 682.745 L1479.15 682.745 L1478.59 682.745 L1478.03 682.745 L1477.47 682.745 L1476.91 682.745 L1476.35 682.745 L1475.79 682.745 L1475.24 682.745 L1474.68 682.745 L1474.12 682.745 L1473.56 682.745 L1473 682.745 L1472.44 682.745 L1471.88 682.745 L1471.32 682.745 L1470.76 682.745 L1470.2 682.745 L1469.64 682.745 L1469.08 682.745 L1468.52 682.745 L1467.97 682.745 L1467.41 682.745 L1466.85 682.745 L1466.29 682.745 L1465.73 682.745 L1465.17 682.745 L1464.61 682.745 L1464.05 682.745 L1463.49 682.745 L1462.93 682.745 L1462.37 682.745 L1461.81 682.745 L1461.25 682.745 L1460.7 682.745 L1460.14 682.745 L1459.58 682.745 L1459.02 682.745 L1458.46 682.745 L1457.9 682.745 L1457.34 682.745 L1456.78 682.745 L1456.22 682.745 L1455.66 682.745 L1455.1 682.745 L1454.54 682.745 L1453.98 682.745 L1453.42 682.745 L1452.87 682.745 L1452.31 682.745 L1451.75 682.745 L1451.19 682.745 L1450.63 682.745 L1450.07 682.745 L1449.51 682.745 L1448.95 682.745 L1448.39 682.745 L1447.83 682.745 L1447.27 682.745 L1446.71 682.745 L1446.15 682.745 L1445.6 682.745 L1445.04 682.745 L1444.48 682.745 L1443.92 682.745 L1443.36 682.745 L1442.8 682.745 L1442.24 682.745 L1441.68 682.745 L1441.12 682.745 L1440.56 682.745 L1440 682.745 L1439.44 682.745 L1438.88 682.745 L1438.33 682.745 L1437.77 682.745 L1437.21 682.745 L1436.65 682.745 L1436.09 682.745 L1435.53 682.745 L1434.97 682.745 L1434.41 682.745 L1433.85 682.745 L1433.29 682.745 L1432.73 682.745 L1432.17 682.745 L1431.61 682.745 L1431.05 682.745 L1430.5 682.745 L1429.94 682.745 L1429.38 682.745 L1428.82 682.745 L1428.26 682.745 L1427.7 682.745 L1427.14 682.745 L1426.58 682.745 L1426.02 682.745 L1425.46 682.745 L1424.9 682.745 L1424.34 682.745 L1423.78 682.745 L1423.23 682.745 L1422.67 682.745 L1422.11 682.745 L1421.55 682.745 L1420.99 682.745 L1420.43 682.745 L1419.87 682.745 L1419.31 682.745 L1418.75 682.745 L1418.19 682.745 L1417.63 682.745 L1417.07 682.745 L1416.51 682.745 L1415.95 682.745 L1415.4 682.745 L1414.84 682.745 L1414.28 682.745 L1413.72 682.745 L1413.16 682.745 L1412.6 682.745 L1412.04 682.745 L1411.48 682.745 L1410.92 682.745 L1410.36 682.745 L1409.8 682.745 L1409.24 682.745 L1408.68 682.745 L1408.13 682.745 L1407.57 682.745 L1407.01 682.745 L1406.45 682.745 L1405.89 682.745 L1405.33 682.745 L1404.77 682.745 L1404.21 682.745 L1403.65 682.745 L1403.09 682.745 L1402.53 682.745 L1401.97 682.745 L1401.41 682.745 L1400.86 682.745 L1400.3 682.745 L1399.74 682.745 L1399.18 682.745 L1398.62 682.745 L1398.06 682.745 L1397.5 682.745 L1396.94 682.745 L1396.38 682.745 L1395.82 682.745 L1395.26 682.745 L1394.7 682.745 L1394.14 682.745 L1393.58 682.745 L1393.03 682.745 L1392.47 682.745 L1391.91 682.745 L1391.35 682.745 L1390.79 682.745 L1390.23 682.745 L1389.67 682.745 L1389.11 682.745 L1388.55 682.745 L1387.99 682.745 L1387.43 682.745 L1386.87 682.745 L1386.31 682.745 L1385.76 682.745 L1385.2 682.745 L1384.64 682.745 L1384.08 682.745 L1383.52 682.745 L1382.96 682.745 L1382.4 682.745 L1381.84 682.745 L1381.28 682.745 L1380.72 682.745 L1380.16 682.745 L1379.6 682.745 L1379.04 682.745 L1378.49 682.745 L1377.93 682.745 L1377.37 682.745 L1376.81 682.745 L1376.25 682.745 L1375.69 682.745 L1375.13 682.745 L1374.57 682.745 L1374.01 682.745 L1373.45 682.745 L1372.89 682.745 L1372.33 682.745 L1371.77 682.745 L1371.21 682.745 L1370.66 682.745 L1370.1 682.745 L1369.54 682.745 L1368.98 682.745 L1368.42 682.745 L1367.86 682.745 L1367.3 682.745 L1366.74 682.745 L1366.18 682.745 L1365.62 682.745 L1365.06 682.745 L1364.5 682.745 L1363.94 682.745 L1363.39 682.745 L1362.83 682.745 L1362.27 682.745 L1361.71 682.745 L1361.15 682.745 L1360.59 682.745 L1360.03 682.745 L1359.47 682.745 L1358.91 682.745 L1358.35 682.745 L1357.79 682.745 L1357.23 682.745 L1356.67 682.745 L1356.12 682.745 L1355.56 682.745 L1355 682.745 L1354.44 682.745 L1353.88 682.745 L1353.32 682.745 L1352.76 682.745 L1352.2 682.745 L1351.64 682.745 L1351.08 682.745 L1350.52 682.745 L1349.96 682.745 L1349.4 682.745 L1348.84 682.745 L1348.29 682.745 L1347.73 682.745 L1347.17 682.745 L1346.61 682.745 L1346.05 682.745 L1345.49 682.745 L1344.93 682.745 L1344.37 682.745 L1343.81 682.745 L1343.25 682.745 L1342.69 682.745 L1342.13 682.745 L1341.57 682.745 L1341.02 682.745 L1340.46 682.745 L1339.9 682.745 L1339.34 682.745 L1338.78 682.745 L1338.22 682.745 L1337.66 682.745 L1337.1 682.745 L1336.54 682.745 L1335.98 682.745 L1335.42 682.745 L1334.86 682.745 L1334.3 682.745 L1333.75 682.745 L1333.19 682.745 L1332.63 682.745 L1332.07 682.745 L1331.51 682.745 L1330.95 682.745 L1330.39 682.745 L1329.83 682.745 L1329.27 682.745 L1328.71 682.745 L1328.15 682.745 L1327.59 682.745 L1327.03 682.745 L1326.47 682.745 L1325.92 682.745 L1325.36 682.745 L1324.8 682.745 L1324.24 682.745 L1323.68 682.745 L1323.12 682.745 L1322.56 682.745 L1322 682.745 L1321.44 682.745 L1320.88 682.745 L1320.32 682.745 L1319.76 682.745 L1319.2 682.745 L1318.65 682.745 L1318.09 682.745 L1317.53 682.745 L1316.97 682.745 L1316.41 682.745 L1315.85 682.745 L1315.29 682.745 L1314.73 682.745 L1314.17 682.745 L1313.61 682.745 L1313.05 682.745 L1312.49 682.745 L1311.93 682.745 L1311.38 682.745 L1310.82 682.745 L1310.26 682.745 L1309.7 682.745 L1309.14 682.745 L1308.58 682.745 L1308.02 682.745 L1307.46 682.745 L1306.9 682.745 L1306.34 682.745 L1305.78 682.745 L1305.22 682.745 L1304.66 682.745 L1304.1 682.745 L1303.55 682.745 L1302.99 682.745 L1302.43 682.745 L1301.87 682.745 L1301.31 682.745 L1300.75 682.745 L1300.19 682.745 L1299.63 682.745 L1299.07 682.745 L1298.51 682.745 L1297.95 682.745 L1297.39 682.745 L1296.83 682.745 L1296.28 682.745 L1295.72 682.745 L1295.16 682.745 L1294.6 682.745 L1294.04 682.745 L1293.48 682.745 L1292.92 682.745 L1292.36 682.745 L1291.8 682.745 L1291.24 682.745 L1290.68 682.745 L1290.12 682.745 L1289.56 682.745 L1289 682.745 L1288.45 682.745 L1287.89 682.745 L1287.33 682.745 L1286.77 682.745 L1286.21 682.745 L1285.65 682.745 L1285.09 682.745 L1284.53 682.745 L1283.97 682.745 L1283.41 682.745 L1282.85 682.745 L1282.29 682.745 L1281.73 682.745 L1281.18 682.745 L1280.62 682.745 L1280.06 682.745 L1279.5 682.745 L1278.94 682.745 L1278.38 682.745 L1277.82 682.745 L1277.26 682.745 L1276.7 682.745 L1276.14 682.745 L1275.58 682.745 L1275.02 682.745 L1274.46 682.745 L1273.91 682.745 L1273.35 682.745 L1272.79 682.745 L1272.23 682.745 L1271.67 682.745 L1271.11 682.745 L1270.55 682.745 L1269.99 682.745 L1269.43 682.745 L1268.87 682.745 L1268.31 682.745 L1267.75 682.745 L1267.19 682.745 L1266.63 682.745 L1266.08 682.745 L1265.52 682.745 L1264.96 682.745 L1264.4 682.745 L1263.84 682.745 L1263.28 682.745 L1262.72 682.745 L1262.16 682.745 L1261.6 682.745 L1261.04 682.745 L1260.48 682.745 L1259.92 682.745 L1259.36 682.745 L1258.81 682.745 L1258.25 682.745 L1257.69 682.745 L1257.13 682.745 L1256.57 682.745 L1256.01 682.745 L1255.45 682.745 L1254.89 682.745 L1254.33 682.745 L1253.77 682.745 L1253.21 682.745 L1252.65 682.745 L1252.09 682.745 L1251.54 682.745 L1250.98 682.745 L1250.42 682.745 L1249.86 682.745 L1249.3 682.745 L1248.74 682.745 L1248.18 682.745 L1247.62 682.745 L1247.06 682.745 L1246.5 682.745 L1245.94 682.745 L1245.38 682.745 L1244.82 682.745 L1244.26 682.745 L1243.71 682.745 L1243.15 682.745 L1242.59 682.745 L1242.03 682.745 L1241.47 682.745 L1240.91 682.745 L1240.35 682.745 L1239.79 682.745 L1239.23 682.745 L1238.67 682.745 L1238.11 682.745 L1237.55 682.745 L1236.99 682.745 L1236.44 682.745 L1235.88 682.745 L1235.32 682.745 L1234.76 682.745 L1234.2 682.745 L1233.64 682.745 L1233.08 682.745 L1232.52 682.745 L1231.96 682.745 L1231.4 682.745 L1230.84 682.745 L1230.28 682.745 L1229.72 682.745 L1229.17 682.745 L1228.61 682.745 L1228.05 682.745 L1227.49 682.745 L1226.93 682.745 L1226.37 682.745 L1225.81 682.745 L1225.25 682.745 L1224.69 682.745 L1224.13 682.745 L1223.57 682.745 L1223.01 682.745 L1222.45 682.745 L1221.89 682.745 L1221.34 682.745 L1220.78 682.745 L1220.22 682.745 L1219.66 682.745 L1219.1 682.745 L1218.54 682.745 L1217.98 682.745 L1217.42 682.745 L1216.86 682.745 L1216.3 682.745 L1215.74 682.745 L1215.18 682.745 L1214.62 682.745 L1214.07 682.745 L1213.51 682.745 L1212.95 682.745 L1212.39 682.745 L1211.83 682.745 L1211.27 682.745 L1210.71 682.745 L1210.15 682.745 L1209.59 682.745 L1209.03 682.745 L1208.47 682.745 L1207.91 682.745 L1207.35 682.745 L1206.8 682.745 L1206.24 682.745 L1205.68 682.745 L1205.12 682.745 L1204.56 682.745 L1204 682.745 L1203.44 682.745 L1202.88 682.745 L1202.32 682.745 L1201.76 682.745 L1201.2 682.745 L1200.64 682.745 L1200.08 682.745 L1199.52 682.745 L1198.97 682.745 L1198.41 682.745 L1197.85 682.745 L1197.29 682.745 L1196.73 682.745 L1196.17 682.745 L1195.61 682.745 L1195.05 682.745 L1194.49 682.745 L1193.93 682.745 L1193.37 682.745 L1192.81 682.745 L1192.25 682.745 L1191.7 682.745 L1191.14 682.745 L1190.58 682.745 L1190.02 682.745 L1189.46 682.745 L1188.9 682.745 L1188.34 682.745 L1187.78 682.745 L1187.22 682.745 L1186.66 682.745 L1186.1 682.745 L1185.54 682.745 L1184.98 682.745 L1184.43 682.745 L1183.87 682.745 L1183.31 682.745 L1182.75 682.745 L1182.19 682.745 L1181.63 682.745 L1181.07 682.745 L1180.51 682.745 L1179.95 682.745 L1179.39 682.745 L1178.83 682.745 L1178.27 682.745 L1177.71 682.745 L1177.15 682.745 L1176.6 682.745 L1176.04 682.745 L1175.48 682.745 L1174.92 682.745 L1174.36 682.745 L1173.8 682.745 L1173.24 682.745 L1172.68 682.745 L1172.12 682.745 L1171.56 682.745 L1171 682.745 L1170.44 682.745 L1169.88 682.745 L1169.33 682.745 L1168.77 682.745 L1168.21 682.745 L1167.65 682.745 L1167.09 682.745 L1166.53 682.745 L1165.97 682.745 L1165.41 682.745 L1164.85 682.745 L1164.29 682.745 L1163.73 682.745 L1163.17 682.745 L1162.61 682.745 L1162.05 682.745 L1161.5 682.745 L1160.94 682.745 L1160.38 682.745 L1159.82 682.745 L1159.26 682.745 L1158.7 682.745 L1158.14 682.745 L1157.58 682.745 L1157.02 682.745 L1156.46 682.745 L1155.9 682.745 L1155.34 682.745 L1154.78 682.745 L1154.23 682.745 L1153.67 682.745 L1153.11 682.745 L1152.55 682.745 L1151.99 682.745 L1151.43 682.745 L1150.87 682.745 L1150.31 682.745 L1149.75 682.745 L1149.19 682.745 L1148.63 682.745 L1148.07 682.745 L1147.51 682.745 L1146.96 682.745 L1146.4 682.745 L1145.84 682.745 L1145.28 682.745 L1144.72 682.745 L1144.16 682.745 L1143.6 682.745 L1143.04 682.745 L1142.48 682.745 L1141.92 682.745 L1141.36 682.745 L1140.8 682.745 L1140.24 682.745 L1139.68 682.745 L1139.13 682.745 L1138.57 682.745 L1138.01 682.745 L1137.45 682.745 L1136.89 682.745 L1136.33 682.745 L1135.77 682.745 L1135.21 682.745 L1134.65 682.745 L1134.09 682.745 L1133.53 682.745 L1132.97 682.745 L1132.41 682.745 L1131.86 682.745 L1131.3 682.745 L1130.74 682.745 L1130.18 682.745 L1129.62 682.745 L1129.06 682.745 L1128.5 682.745 L1127.94 682.745 L1127.38 682.745 L1126.82 682.745 L1126.26 682.745 L1125.7 682.745 L1125.14 682.745 L1124.59 682.745 L1124.03 682.745 L1123.47 682.745 L1122.91 682.745 L1122.35 682.745 L1121.79 682.745 L1121.23 682.745 L1120.67 682.745 L1120.11 682.745 L1119.55 682.745 L1118.99 682.745 L1118.43 682.745 L1117.87 682.745 L1117.31 682.745 L1116.76 682.745 L1116.2 682.745 L1115.64 682.745 L1115.08 682.745 L1114.52 682.745 L1113.96 682.745 L1113.4 682.745 L1112.84 682.745 L1112.28 682.745 L1111.72 682.745 L1111.16 682.745 L1110.6 682.745 L1110.04 682.745 L1109.49 682.745 L1108.93 682.745 L1108.37 682.745 L1107.81 682.745 L1107.25 682.745 L1106.69 682.745 L1106.13 682.745 L1105.57 682.745 L1105.01 682.745 L1104.45 682.745 L1103.89 682.745 L1103.33 682.745 L1102.77 682.745 L1102.22 682.745 L1101.66 682.745 L1101.1 682.745 L1100.54 682.745 L1099.98 682.745 L1099.42 682.745 L1098.86 682.745 L1098.3 682.745 L1097.74 682.745 L1097.18 682.745 L1096.62 682.745 L1096.06 682.745 L1095.5 682.745 L1094.94 682.745 L1094.39 682.745 L1093.83 682.745 L1093.27 682.745 L1092.71 682.745 L1092.15 682.745 L1091.59 682.745 L1091.03 682.745 L1090.47 682.745 L1089.91 682.745 L1089.35 682.745 L1088.79 682.745 L1088.23 682.745 L1087.67 682.745 L1087.12 682.745 L1086.56 682.745 L1086 682.745 L1085.44 682.745 L1084.88 682.745 L1084.32 682.745 L1083.76 682.745 L1083.2 682.745 L1082.64 682.745 L1082.08 682.745 L1081.52 682.745 L1080.96 682.745 L1080.4 682.745 L1079.85 682.745 L1079.29 682.745 L1078.73 682.745 L1078.17 682.745 L1077.61 682.745 L1077.05 682.745 L1076.49 682.745 L1075.93 682.745 L1075.37 682.745 L1074.81 682.745 L1074.25 682.745 L1073.69 682.745 L1073.13 682.745 L1072.57 682.745 L1072.02 682.745 L1071.46 682.745 L1070.9 682.745 L1070.34 682.745 L1069.78 682.745 L1069.22 682.745 L1068.66 682.745 L1068.1 682.745 L1067.54 682.745 L1066.98 682.745 L1066.42 682.745 L1065.86 682.745 L1065.3 682.745 L1064.75 682.745 L1064.19 682.745 L1063.63 682.745 L1063.07 682.745 L1062.51 682.745 L1061.95 682.745 L1061.39 682.745 L1060.83 682.745 L1060.27 682.745 L1059.71 682.745 L1059.15 682.745 L1058.59 682.745 L1058.03 682.745 L1057.48 682.745 L1056.92 682.745 L1056.36 682.745 L1055.8 682.745 L1055.24 682.745 L1054.68 682.745 L1054.12 682.745 L1053.56 682.745 L1053 682.745 L1052.44 682.745 L1051.88 682.745 L1051.32 682.745 L1050.76 682.745 L1050.2 682.745 L1049.65 682.745 L1049.09 682.745 L1048.53 682.745 L1047.97 682.745 L1047.41 682.745 L1046.85 682.745 L1046.29 682.745 L1045.73 682.745 L1045.17 682.745 L1044.61 682.745 L1044.05 682.745 L1043.49 682.745 L1042.93 682.745 L1042.38 682.745 L1041.82 682.745 L1041.26 682.745 L1040.7 682.745 L1040.14 682.745 L1039.58 682.745 L1039.02 682.745 L1038.46 682.745 L1037.9 682.745 L1037.34 682.745 L1036.78 682.745 L1036.22 682.745 L1035.66 682.745 L1035.1 682.745 L1034.55 682.745 L1033.99 682.745 L1033.43 682.745 L1032.87 682.745 L1032.31 682.745 L1031.75 682.745 L1031.19 682.745 L1030.63 682.745 L1030.07 682.745 L1029.51 682.745 L1028.95 682.745 L1028.39 682.745 L1027.83 682.745 L1027.28 682.745 L1026.72 682.745 L1026.16 682.745 L1025.6 682.745 L1025.04 682.745 L1024.48 682.745 L1023.92 682.745 L1023.36 682.745 L1022.8 682.745 L1022.24 682.745 L1021.68 682.745 L1021.12 682.745 L1020.56 682.745 L1020.01 682.745 L1019.45 682.745 L1018.89 682.745 L1018.33 682.745 L1017.77 682.745 L1017.21 682.745 L1016.65 682.745 L1016.09 682.745 L1015.53 682.745 L1014.97 682.745 L1014.41 682.745 L1013.85 682.745 L1013.29 682.745 L1012.73 682.745 L1012.18 682.745 L1011.62 682.745 L1011.06 682.745 L1010.5 682.745 L1009.94 682.745 L1009.38 682.745 L1008.82 682.745 L1008.26 682.745 L1007.7 682.745 L1007.14 682.745 L1006.58 682.745 L1006.02 682.745 L1005.46 682.745 L1004.91 682.745 L1004.35 682.745 L1003.79 682.745 L1003.23 682.745 L1002.67 682.745 L1002.11 682.745 L1001.55 682.745 L1000.99 682.745 L1000.43 682.745 L999.872 682.745 L999.313 682.745 L998.754 682.745 L998.194 682.745 L997.635 682.745 L997.076 682.745 L996.517 682.745 L995.957 682.745 L995.398 682.745 L994.839 682.745 L994.28 682.745 L993.72 682.745 L993.161 682.745 L992.602 682.745 L992.043 682.745 L991.483 682.745 L990.924 682.745 L990.365 682.745 L989.806 682.745 L989.246 682.745 L988.687 682.745 L988.128 682.745 L987.569 682.745 L987.009 682.745 L986.45 682.745 L985.891 682.745 L985.332 682.745 L984.772 682.745 L984.213 682.745 L983.654 682.745 L983.095 682.745 L982.535 682.745 L981.976 682.745 L981.417 682.745 L980.858 682.745 L980.298 682.745 L979.739 682.745 L979.18 682.745 L978.621 682.745 L978.061 682.745 L977.502 682.745 L976.943 682.745 L976.384 682.745 L975.824 682.745 L975.265 682.745 L974.706 682.745 L974.147 682.745 L973.587 682.745 L973.028 682.745 L972.469 682.745 L971.91 682.745 L971.35 682.745 L970.791 682.745 L970.232 682.745 L969.673 682.745 L969.113 682.745 L968.554 682.745 L967.995 682.745 L967.436 682.745 L966.876 682.745 L966.317 682.745 L965.758 682.745 L965.199 682.745 L964.639 682.745 L964.08 682.745 L963.521 682.745 L962.962 682.745 L962.402 682.745 L961.843 682.745 L961.284 682.745 L960.725 682.745 L960.165 682.745 L959.606 682.745 L959.047 682.745 L958.488 682.745 L957.928 682.745 L957.369 682.745 L956.81 682.745 L956.251 682.745 L955.691 682.745 L955.132 682.745 L954.573 682.745 L954.014 682.745 L953.454 682.745 L952.895 682.745 L952.336 682.745 L951.777 682.745 L951.217 682.745 L950.658 682.745 L950.099 682.745 L949.54 682.745 L948.98 682.745 L948.421 682.745 L947.862 682.745 L947.303 682.745 L946.743 682.745 L946.184 682.745 L945.625 682.745 L945.066 682.745 L944.506 682.745 L943.947 682.745 L943.388 682.745 L942.829 682.745 L942.269 682.745 L941.71 682.745 L941.151 682.745 L940.592 682.745 L940.032 682.745 L939.473 682.745 L938.914 682.745 L938.355 682.745 L937.795 682.745 L937.236 682.745 L936.677 682.745 L936.118 682.745 L935.558 682.745 L934.999 682.745 L934.44 682.745 L933.881 682.745 L933.321 682.745 L932.762 682.745 L932.203 682.745 L931.644 682.745 L931.084 682.745 L930.525 682.745 L929.966 682.745 L929.406 682.745 L928.847 682.745 L928.288 682.745 L927.729 682.745 L927.169 682.745 L926.61 682.745 L926.051 682.745 L925.492 682.745 L924.932 682.745 L924.373 682.745 L923.814 682.745 L923.255 682.745 L922.695 682.745 L922.136 682.745 L921.577 682.745 L921.018 682.745 L920.458 682.745 L919.899 682.745 L919.34 682.745 L918.781 682.745 L918.221 682.745 L917.662 682.745 L917.103 682.745 L916.544 682.745 L915.984 682.745 L915.425 682.745 L914.866 682.745 L914.307 682.745 L913.747 682.745 L913.188 682.745 L912.629 682.745 L912.07 682.745 L911.51 682.745 L910.951 682.745 L910.392 682.745 L909.833 682.745 L909.273 682.745 L908.714 682.745 L908.155 682.745 L907.596 682.745 L907.036 682.745 L906.477 682.745 L905.918 682.745 L905.359 682.745 L904.799 682.745 L904.24 682.745 L903.681 682.745 L903.122 682.745 L902.562 682.745 L902.003 682.745 L901.444 682.745 L900.885 682.745 L900.325 682.745 L899.766 682.745 L899.207 682.745 L898.648 682.745 L898.088 682.745 L897.529 682.745 L896.97 682.745 L896.411 682.745 L895.851 682.745 L895.292 682.745 L894.733 682.745 L894.174 682.745 L893.614 682.745 L893.055 682.745 L892.496 682.745 L891.937 682.745 L891.377 682.745 L890.818 682.745 L890.259 682.745 L889.7 682.745 L889.14 682.745 L888.581 682.745 L888.022 682.745 L887.463 682.745 L886.903 682.745 L886.344 682.745 L885.785 682.745 L885.226 682.745 L884.666 682.745 L884.107 682.745 L883.548 682.745 L882.989 682.745 L882.429 682.745 L881.87 682.745 L881.311 682.745 L880.752 682.745 L880.192 682.745 L879.633 682.745 L879.074 682.745 L878.515 682.745 L877.955 682.745 L877.396 682.745 L876.837 682.745 L876.278 682.745 L875.718 682.745 L875.159 682.745 L874.6 682.745 L874.041 682.745 L873.481 682.745 L872.922 682.745 L872.363 682.745 L871.804 682.745 L871.244 682.745 L870.685 682.745 L870.126 682.745 L869.567 682.745 L869.007 682.745 L868.448 682.745 L867.889 682.745 L867.33 682.745 L866.77 682.745 L866.211 682.745 L865.652 682.745 L865.093 682.745 L864.533 682.745 L863.974 682.745 L863.415 682.745 L862.856 682.745 L862.296 682.745 L861.737 682.745 L861.178 682.745 L860.619 682.745 L860.059 682.745 L859.5 682.745 L858.941 682.745 L858.382 682.745 L857.822 682.745 L857.263 682.745 L856.704 682.745 L856.145 682.745 L855.585 682.745 L855.026 682.745 L854.467 682.745 L853.908 682.745 L853.348 682.745 L852.789 682.745 L852.23 682.745 L851.671 682.745 L851.111 682.745 L850.552 682.745 L849.993 682.745 L849.434 682.745 L848.874 682.745 L848.315 682.745 L847.756 682.745 L847.197 682.745 L846.637 682.745 L846.078 682.745 L845.519 682.745 L844.96 682.745 L844.4 682.745 L843.841 682.745 L843.282 682.745 L842.723 682.745 L842.163 682.745 L841.604 682.745 L841.045 682.745 L840.486 682.745 L839.926 682.745 L839.367 682.745 L838.808 682.745 L838.249 682.745 L837.689 682.745 L837.13 682.745 L836.571 682.745 L836.012 682.745 L835.452 682.745 L834.893 682.745 L834.334 682.745 L833.775 682.745 L833.215 682.745 L832.656 682.745 L832.097 682.745 L831.538 682.745 L830.978 682.745 L830.419 682.745 L829.86 682.745 L829.301 682.745 L828.741 682.745 L828.182 682.745 L827.623 682.745 L827.064 682.745 L826.504 682.745 L825.945 682.745 L825.386 682.745 L824.827 682.745 L824.267 682.745 L823.708 682.745 L823.149 682.745 L822.59 682.745 L822.03 682.745 L821.471 682.745 L820.912 682.745 L820.353 682.745 L819.793 682.745 L819.234 682.745 L818.675 682.745 L818.116 682.745 L817.556 682.745 L816.997 682.745 L816.438 682.745 L815.879 682.745 L815.319 682.745 L814.76 682.745 L814.201 682.745 L813.642 682.745 L813.082 682.745 L812.523 682.745 L811.964 682.745 L811.405 682.745 L810.845 682.745 L810.286 682.745 L809.727 682.745 L809.168 682.745 L808.608 682.745 L808.049 682.745 L807.49 682.745 L806.931 682.745 L806.371 682.745 L805.812 682.745 L805.253 682.745 L804.693 682.745 L804.134 682.745 L803.575 682.745 L803.016 682.745 L802.456 682.745 L801.897 682.745 L801.338 682.745 L800.779 682.745 L800.219 682.745 L799.66 682.745 L799.101 682.745 L798.542 682.745 L797.982 682.745 L797.423 682.745 L796.864 682.745 L796.305 682.745 L795.745 682.745 L795.186 682.745 L794.627 682.745 L794.068 682.745 L793.508 682.745 L792.949 682.745 L792.39 682.745 L791.831 682.745 L791.271 682.745 L790.712 682.745 L790.153 682.745 L789.594 682.745 L789.034 682.745 L788.475 682.745 L787.916 682.745 L787.357 682.745 L786.797 682.745 L786.238 682.745 L785.679 682.745 L785.12 682.745 L784.56 682.745 L784.001 682.745 L783.442 682.745 L782.883 682.745 L782.323 682.745 L781.764 682.745 L781.205 682.745 L780.646 682.745 L780.086 682.745 L779.527 682.745 L778.968 682.745 L778.409 682.745 L777.849 682.745 L777.29 682.745 L776.731 682.745 L776.172 682.745 L775.612 682.745 L775.053 682.745 L774.494 682.745 L773.935 682.745 L773.375 682.745 L772.816 682.745 L772.257 682.745 L771.698 682.745 L771.138 682.745 L770.579 682.745 L770.02 682.745 L769.461 682.745 L768.901 682.745 L768.342 682.745 L767.783 682.745 L767.224 682.745 L766.664 682.745 L766.105 682.745 L765.546 682.745 L764.987 682.745 L764.427 682.745 L763.868 682.745 L763.309 682.745 L762.75 682.745 L762.19 682.745 L761.631 682.745 L761.072 682.745 L760.513 682.745 L759.953 682.745 L759.394 682.745 L758.835 682.745 L758.276 682.745 L757.716 682.745 L757.157 682.745 L756.598 682.745 L756.039 682.745 L755.479 682.745 L754.92 682.745 L754.361 682.745 L753.802 682.745 L753.242 682.745 L752.683 682.745 L752.124 682.745 L751.565 682.745 L751.005 682.745 L750.446 682.745 L749.887 682.745 L749.328 682.745 L748.768 682.745 L748.209 682.745 L747.65 682.745 L747.091 682.745 L746.531 682.745 L745.972 682.745 L745.413 682.745 L744.854 682.745 L744.294 682.745 L743.735 682.745 L743.176 682.745 L742.617 682.745 L742.057 682.745 L741.498 682.745 L740.939 682.745 L740.38 682.745 L739.82 682.745 L739.261 682.745 L738.702 682.745 L738.143 682.745 L737.583 682.745 L737.024 682.745 L736.465 682.745 L735.906 682.745 L735.346 682.745 L734.787 682.745 L734.228 682.745 L733.669 682.745 L733.109 682.745 L732.55 682.745 L731.991 682.745 L731.432 682.745 L730.872 682.745 L730.313 682.745 L729.754 682.745 L729.195 682.745 L728.635 682.745 L728.076 682.745 L727.517 682.745 L726.958 682.745 L726.398 682.745 L725.839 682.745 L725.28 682.745 L724.721 682.745 L724.161 682.745 L723.602 682.745 L723.043 682.745 L722.484 682.745 L721.924 682.745 L721.365 682.745 L720.806 682.745 L720.247 682.745  Z\" fill=\"#3da44d\" fill-rule=\"evenodd\" fill-opacity=\"0.5\"/>\n<polyline clip-path=\"url(#clip983)\" style=\"stroke:#3da44d; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"720.247,683.53 720.806,683.53 721.365,683.53 721.924,683.53 722.484,683.53 723.043,683.53 723.602,683.53 724.161,683.53 724.721,683.53 725.28,683.53 725.839,683.53 726.398,683.53 726.958,683.53 727.517,683.53 728.076,683.53 728.635,683.53 729.195,683.53 729.754,683.53 730.313,683.53 730.872,683.53 731.432,683.53 731.991,683.53 732.55,683.53 733.109,683.53 733.669,683.53 734.228,683.53 734.787,683.53 735.346,683.53 735.906,683.53 736.465,683.53 737.024,683.53 737.583,683.53 738.143,683.53 738.702,683.53 739.261,683.53 739.82,683.53 740.38,683.53 740.939,683.53 741.498,683.53 742.057,683.53 742.617,683.53 743.176,683.53 743.735,683.53 744.294,683.53 744.854,683.53 745.413,683.53 745.972,683.53 746.531,683.53 747.091,683.53 747.65,683.53 748.209,683.53 748.768,683.53 749.328,683.53 749.887,683.53 750.446,683.53 751.005,683.53 751.565,683.53 752.124,683.53 752.683,683.53 753.242,683.53 753.802,683.53 754.361,683.53 754.92,683.53 755.479,683.53 756.039,683.53 756.598,683.53 757.157,683.53 757.716,683.53 758.276,683.53 758.835,683.53 759.394,683.53 759.953,683.53 760.513,683.53 761.072,683.53 761.631,683.53 762.19,683.53 762.75,683.53 763.309,683.53 763.868,683.53 764.427,683.53 764.987,683.53 765.546,683.53 766.105,683.53 766.664,683.53 767.224,683.53 767.783,683.53 768.342,683.53 768.901,683.53 769.461,683.53 770.02,683.53 770.579,683.53 771.138,683.53 771.698,683.53 772.257,683.53 772.816,683.53 773.375,683.53 773.935,683.53 774.494,683.53 775.053,683.53 775.612,683.53 776.172,683.53 776.731,683.53 777.29,683.53 777.849,683.53 778.409,683.53 778.968,683.53 779.527,683.53 780.086,683.53 780.646,683.53 781.205,683.53 781.764,683.53 782.323,683.53 782.883,683.53 783.442,683.53 784.001,683.53 784.56,683.53 785.12,683.53 785.679,683.53 786.238,683.53 786.797,683.53 787.357,683.53 787.916,683.53 788.475,683.53 789.034,683.53 789.594,683.53 790.153,683.53 790.712,683.53 791.271,683.53 791.831,683.53 792.39,683.53 792.949,683.53 793.508,683.53 794.068,683.53 794.627,683.53 795.186,683.53 795.745,683.53 796.305,683.53 796.864,683.53 797.423,683.53 797.982,683.53 798.542,683.53 799.101,683.53 799.66,683.53 800.219,683.53 800.779,683.53 801.338,683.53 801.897,683.53 802.456,683.53 803.016,683.53 803.575,683.53 804.134,683.53 804.693,683.53 805.253,683.53 805.812,683.53 806.371,683.53 806.931,683.53 807.49,683.53 808.049,683.53 808.608,683.53 809.168,683.53 809.727,683.53 810.286,683.53 810.845,683.53 811.405,683.53 811.964,683.53 812.523,683.53 813.082,683.53 813.642,683.53 814.201,683.53 814.76,683.53 815.319,683.53 815.879,683.53 816.438,683.53 816.997,683.53 817.556,683.53 818.116,683.53 818.675,683.53 819.234,683.53 819.793,683.53 820.353,683.53 820.912,683.53 821.471,683.53 822.03,683.53 822.59,683.53 823.149,683.53 823.708,683.53 824.267,683.53 824.827,683.53 825.386,683.53 825.945,683.53 826.504,683.53 827.064,683.53 827.623,683.53 828.182,683.53 828.741,683.53 829.301,683.53 829.86,683.53 830.419,683.53 830.978,683.53 831.538,683.53 832.097,683.53 832.656,683.53 833.215,683.53 833.775,683.53 834.334,683.53 834.893,683.53 835.452,683.53 836.012,683.53 836.571,683.53 837.13,683.53 837.689,683.53 838.249,683.53 838.808,683.53 839.367,683.53 839.926,683.53 840.486,683.53 841.045,683.53 841.604,683.53 842.163,683.53 842.723,683.53 843.282,683.53 843.841,683.53 844.4,683.53 844.96,683.53 845.519,683.53 846.078,683.53 846.637,683.53 847.197,683.53 847.756,683.53 848.315,683.53 848.874,683.53 849.434,683.53 849.993,683.53 850.552,683.53 851.111,683.53 851.671,683.53 852.23,683.53 852.789,683.53 853.348,683.53 853.908,683.53 854.467,683.53 855.026,683.53 855.585,683.53 856.145,683.53 856.704,683.53 857.263,683.53 857.822,683.53 858.382,683.53 858.941,683.53 859.5,683.53 860.059,683.53 860.619,683.53 861.178,683.53 861.737,683.53 862.296,683.53 862.856,683.53 863.415,683.53 863.974,683.53 864.533,683.53 865.093,683.53 865.652,683.53 866.211,683.53 866.77,683.53 867.33,683.53 867.889,683.53 868.448,683.53 869.007,683.53 869.567,683.53 870.126,683.53 870.685,683.53 871.244,683.53 871.804,683.53 872.363,683.53 872.922,683.53 873.481,683.53 874.041,683.53 874.6,683.53 875.159,683.53 875.718,683.53 876.278,683.53 876.837,683.53 877.396,683.53 877.955,683.53 878.515,683.53 879.074,683.53 879.633,683.53 880.192,683.53 880.752,683.53 881.311,683.53 881.87,683.53 882.429,683.53 882.989,683.53 883.548,683.53 884.107,683.53 884.666,683.53 885.226,683.53 885.785,683.53 886.344,683.53 886.903,683.53 887.463,683.53 888.022,683.53 888.581,683.53 889.14,683.53 889.7,683.53 890.259,683.53 890.818,683.53 891.377,683.53 891.937,683.53 892.496,683.53 893.055,683.53 893.614,683.53 894.174,683.53 894.733,683.53 895.292,683.53 895.851,683.53 896.411,683.53 896.97,683.53 897.529,683.53 898.088,683.53 898.648,683.53 899.207,683.53 899.766,683.53 900.325,683.53 900.885,683.53 901.444,683.53 902.003,683.53 902.562,683.53 903.122,683.53 903.681,683.53 904.24,683.53 904.799,683.53 905.359,683.53 905.918,683.53 906.477,683.53 907.036,683.53 907.596,683.53 908.155,683.53 908.714,683.53 909.273,683.53 909.833,683.53 910.392,683.53 910.951,683.53 911.51,683.53 912.07,683.53 912.629,683.53 913.188,683.53 913.747,683.53 914.307,683.53 914.866,683.53 915.425,683.53 915.984,683.53 916.544,683.53 917.103,683.53 917.662,683.53 918.221,683.53 918.781,683.53 919.34,683.53 919.899,683.53 920.458,683.53 921.018,683.53 921.577,683.53 922.136,683.53 922.695,683.53 923.255,683.53 923.814,683.53 924.373,683.53 924.932,683.53 925.492,683.53 926.051,683.53 926.61,683.53 927.169,683.53 927.729,683.53 928.288,683.53 928.847,683.53 929.406,683.53 929.966,683.53 930.525,683.53 931.084,683.53 931.644,683.53 932.203,683.53 932.762,683.53 933.321,683.53 933.881,683.53 934.44,683.53 934.999,683.53 935.558,683.53 936.118,683.53 936.677,683.53 937.236,683.53 937.795,683.53 938.355,683.53 938.914,683.53 939.473,683.53 940.032,683.53 940.592,683.53 941.151,683.53 941.71,683.53 942.269,683.53 942.829,683.53 943.388,683.53 943.947,683.53 944.506,683.53 945.066,683.53 945.625,683.53 946.184,683.53 946.743,683.53 947.303,683.53 947.862,683.53 948.421,683.53 948.98,683.53 949.54,683.53 950.099,683.53 950.658,683.53 951.217,683.53 951.777,683.53 952.336,683.53 952.895,683.53 953.454,683.53 954.014,683.53 954.573,683.53 955.132,683.53 955.691,683.53 956.251,683.53 956.81,683.53 957.369,683.53 957.928,683.53 958.488,683.53 959.047,683.53 959.606,683.53 960.165,683.53 960.725,683.53 961.284,683.53 961.843,683.53 962.402,683.53 962.962,683.53 963.521,683.53 964.08,683.53 964.639,683.53 965.199,683.53 965.758,683.53 966.317,683.53 966.876,683.53 967.436,683.53 967.995,683.53 968.554,683.53 969.113,683.53 969.673,683.53 970.232,683.53 970.791,683.53 971.35,683.53 971.91,683.53 972.469,683.53 973.028,683.53 973.587,683.53 974.147,683.53 974.706,683.53 975.265,683.53 975.824,683.53 976.384,683.53 976.943,683.53 977.502,683.53 978.061,683.53 978.621,683.53 979.18,683.53 979.739,683.53 980.298,683.53 980.858,683.53 981.417,683.53 981.976,683.53 982.535,683.53 983.095,683.53 983.654,683.53 984.213,683.53 984.772,683.53 985.332,683.53 985.891,683.53 986.45,683.53 987.009,683.53 987.569,683.53 988.128,683.53 988.687,683.53 989.246,683.53 989.806,683.53 990.365,683.53 990.924,683.53 991.483,683.53 992.043,683.53 992.602,683.53 993.161,683.53 993.72,683.53 994.28,683.53 994.839,683.53 995.398,683.53 995.957,683.53 996.517,683.53 997.076,683.53 997.635,683.53 998.194,683.53 998.754,683.53 999.313,683.53 999.872,683.53 1000.43,683.53 1000.99,683.53 1001.55,683.53 1002.11,683.53 1002.67,683.53 1003.23,683.53 1003.79,683.53 1004.35,683.53 1004.91,683.53 1005.46,683.53 1006.02,683.53 1006.58,683.53 1007.14,683.53 1007.7,683.53 1008.26,683.53 1008.82,683.53 1009.38,683.53 1009.94,683.53 1010.5,683.53 1011.06,683.53 1011.62,683.53 1012.18,683.53 1012.73,683.53 1013.29,683.53 1013.85,683.53 1014.41,683.53 1014.97,683.53 1015.53,683.53 1016.09,683.53 1016.65,683.53 1017.21,683.53 1017.77,683.53 1018.33,683.53 1018.89,683.53 1019.45,683.53 1020.01,683.53 1020.56,683.53 1021.12,683.53 1021.68,683.53 1022.24,683.53 1022.8,683.53 1023.36,683.53 1023.92,683.53 1024.48,683.53 1025.04,683.53 1025.6,683.53 1026.16,683.53 1026.72,683.53 1027.28,683.53 1027.83,683.53 1028.39,683.53 1028.95,683.53 1029.51,683.53 1030.07,683.53 1030.63,683.53 1031.19,683.53 1031.75,683.53 1032.31,683.53 1032.87,683.53 1033.43,683.53 1033.99,683.53 1034.55,683.53 1035.1,683.53 1035.66,683.53 1036.22,683.53 1036.78,683.53 1037.34,683.53 1037.9,683.53 1038.46,683.53 1039.02,683.53 1039.58,683.53 1040.14,683.53 1040.7,683.53 1041.26,683.53 1041.82,683.53 1042.38,683.53 1042.93,683.53 1043.49,683.53 1044.05,683.53 1044.61,683.53 1045.17,683.53 1045.73,683.53 1046.29,683.53 1046.85,683.53 1047.41,683.53 1047.97,683.53 1048.53,683.53 1049.09,683.53 1049.65,683.53 1050.2,683.53 1050.76,683.53 1051.32,683.53 1051.88,683.53 1052.44,683.53 1053,683.53 1053.56,683.53 1054.12,683.53 1054.68,683.53 1055.24,683.53 1055.8,683.53 1056.36,683.53 1056.92,683.53 1057.48,683.53 1058.03,683.53 1058.59,683.53 1059.15,683.53 1059.71,683.53 1060.27,683.53 1060.83,683.53 1061.39,683.53 1061.95,683.53 1062.51,683.53 1063.07,683.53 1063.63,683.53 1064.19,683.53 1064.75,683.53 1065.3,683.53 1065.86,683.53 1066.42,683.53 1066.98,683.53 1067.54,683.53 1068.1,683.53 1068.66,683.53 1069.22,683.53 1069.78,683.53 1070.34,683.53 1070.9,683.53 1071.46,683.53 1072.02,683.53 1072.57,683.53 1073.13,683.53 1073.69,683.53 1074.25,683.53 1074.81,683.53 1075.37,683.53 1075.93,683.53 1076.49,683.53 1077.05,683.53 1077.61,683.53 1078.17,683.53 1078.73,683.53 1079.29,683.53 1079.85,683.53 1080.4,683.53 1080.96,683.53 1081.52,683.53 1082.08,683.53 1082.64,683.53 1083.2,683.53 1083.76,683.53 1084.32,683.53 1084.88,683.53 1085.44,683.53 1086,683.53 1086.56,683.53 1087.12,683.53 1087.67,683.53 1088.23,683.53 1088.79,683.53 1089.35,683.53 1089.91,683.53 1090.47,683.53 1091.03,683.53 1091.59,683.53 1092.15,683.53 1092.71,683.53 1093.27,683.53 1093.83,683.53 1094.39,683.53 1094.94,683.53 1095.5,683.53 1096.06,683.53 1096.62,683.53 1097.18,683.53 1097.74,683.53 1098.3,683.53 1098.86,683.53 1099.42,683.53 1099.98,683.53 1100.54,683.53 1101.1,683.53 1101.66,683.53 1102.22,683.53 1102.77,683.53 1103.33,683.53 1103.89,683.53 1104.45,683.53 1105.01,683.53 1105.57,683.53 1106.13,683.53 1106.69,683.53 1107.25,683.53 1107.81,683.53 1108.37,683.53 1108.93,683.53 1109.49,683.53 1110.04,683.53 1110.6,683.53 1111.16,683.53 1111.72,683.53 1112.28,683.53 1112.84,683.53 1113.4,683.53 1113.96,683.53 1114.52,683.53 1115.08,683.53 1115.64,683.53 1116.2,683.53 1116.76,683.53 1117.31,683.53 1117.87,683.53 1118.43,683.53 1118.99,683.53 1119.55,683.53 1120.11,683.53 1120.67,683.53 1121.23,683.53 1121.79,683.53 1122.35,683.53 1122.91,683.53 1123.47,683.53 1124.03,683.53 1124.59,683.53 1125.14,683.53 1125.7,683.53 1126.26,683.53 1126.82,683.53 1127.38,683.53 1127.94,683.53 1128.5,683.53 1129.06,683.53 1129.62,683.53 1130.18,683.53 1130.74,683.53 1131.3,683.53 1131.86,683.53 1132.41,683.53 1132.97,683.53 1133.53,683.53 1134.09,683.53 1134.65,683.53 1135.21,683.53 1135.77,683.53 1136.33,683.53 1136.89,683.53 1137.45,683.53 1138.01,683.53 1138.57,683.53 1139.13,683.53 1139.68,683.53 1140.24,683.53 1140.8,683.53 1141.36,683.53 1141.92,683.53 1142.48,683.53 1143.04,683.53 1143.6,683.53 1144.16,683.53 1144.72,683.53 1145.28,683.53 1145.84,683.53 1146.4,683.53 1146.96,683.53 1147.51,683.53 1148.07,683.53 1148.63,683.53 1149.19,683.53 1149.75,683.53 1150.31,683.53 1150.87,683.53 1151.43,683.53 1151.99,683.53 1152.55,683.53 1153.11,683.53 1153.67,683.53 1154.23,683.53 1154.78,683.53 1155.34,683.53 1155.9,683.53 1156.46,683.53 1157.02,683.53 1157.58,683.53 1158.14,683.53 1158.7,683.53 1159.26,683.53 1159.82,683.53 1160.38,683.53 1160.94,683.53 1161.5,683.53 1162.05,683.53 1162.61,683.53 1163.17,683.53 1163.73,683.53 1164.29,683.53 1164.85,683.53 1165.41,683.53 1165.97,683.53 1166.53,683.53 1167.09,683.53 1167.65,683.53 1168.21,683.53 1168.77,683.53 1169.33,683.53 1169.88,683.53 1170.44,683.53 1171,683.53 1171.56,683.53 1172.12,683.53 1172.68,683.53 1173.24,683.53 1173.8,683.53 1174.36,683.53 1174.92,683.53 1175.48,683.53 1176.04,683.53 1176.6,683.53 1177.15,683.53 1177.71,683.53 1178.27,683.53 1178.83,683.53 1179.39,683.53 1179.95,683.53 1180.51,683.53 1181.07,683.53 1181.63,683.53 1182.19,683.53 1182.75,683.53 1183.31,683.53 1183.87,683.53 1184.43,683.53 1184.98,683.53 1185.54,683.53 1186.1,683.53 1186.66,683.53 1187.22,683.53 1187.78,683.53 1188.34,683.53 1188.9,683.53 1189.46,683.53 1190.02,683.53 1190.58,683.53 1191.14,683.53 1191.7,683.53 1192.25,683.53 1192.81,683.53 1193.37,683.53 1193.93,683.53 1194.49,683.53 1195.05,683.53 1195.61,683.53 1196.17,683.53 1196.73,683.53 1197.29,683.53 1197.85,683.53 1198.41,683.53 1198.97,683.53 1199.52,683.53 1200.08,683.53 1200.64,683.53 1201.2,683.53 1201.76,683.53 1202.32,683.53 1202.88,683.53 1203.44,683.53 1204,683.53 1204.56,683.53 1205.12,683.53 1205.68,683.53 1206.24,683.53 1206.8,683.53 1207.35,683.53 1207.91,683.53 1208.47,683.53 1209.03,683.53 1209.59,683.53 1210.15,683.53 1210.71,683.53 1211.27,683.53 1211.83,683.53 1212.39,683.53 1212.95,683.53 1213.51,683.53 1214.07,683.53 1214.62,683.53 1215.18,683.53 1215.74,683.53 1216.3,683.53 1216.86,683.53 1217.42,683.53 1217.98,683.53 1218.54,683.53 1219.1,683.53 1219.66,683.53 1220.22,683.53 1220.78,683.53 1221.34,683.53 1221.89,683.53 1222.45,683.53 1223.01,683.53 1223.57,683.53 1224.13,683.53 1224.69,683.53 1225.25,683.53 1225.81,683.53 1226.37,683.53 1226.93,683.53 1227.49,683.53 1228.05,683.53 1228.61,683.53 1229.17,683.53 1229.72,683.53 1230.28,683.53 1230.84,683.53 1231.4,683.53 1231.96,683.53 1232.52,683.53 1233.08,683.53 1233.64,683.53 1234.2,683.53 1234.76,683.53 1235.32,683.53 1235.88,683.53 1236.44,683.53 1236.99,683.53 1237.55,683.53 1238.11,683.53 1238.67,683.53 1239.23,683.53 1239.79,683.53 1240.35,683.53 1240.91,683.53 1241.47,683.53 1242.03,683.53 1242.59,683.53 1243.15,683.53 1243.71,683.53 1244.26,683.53 1244.82,683.53 1245.38,683.53 1245.94,683.53 1246.5,683.53 1247.06,683.53 1247.62,683.53 1248.18,683.53 1248.74,683.53 1249.3,683.53 1249.86,683.53 1250.42,683.53 1250.98,683.53 1251.54,683.53 1252.09,683.53 1252.65,683.53 1253.21,683.53 1253.77,683.53 1254.33,683.53 1254.89,683.53 1255.45,683.53 1256.01,683.53 1256.57,683.53 1257.13,683.53 1257.69,683.53 1258.25,683.53 1258.81,683.53 1259.36,683.53 1259.92,683.53 1260.48,683.53 1261.04,683.53 1261.6,683.53 1262.16,683.53 1262.72,683.53 1263.28,683.53 1263.84,683.53 1264.4,683.53 1264.96,683.53 1265.52,683.53 1266.08,683.53 1266.63,683.53 1267.19,683.53 1267.75,683.53 1268.31,683.53 1268.87,683.53 1269.43,683.53 1269.99,683.53 1270.55,683.53 1271.11,683.53 1271.67,683.53 1272.23,683.53 1272.79,683.53 1273.35,683.53 1273.91,683.53 1274.46,683.53 1275.02,683.53 1275.58,683.53 1276.14,683.53 1276.7,683.53 1277.26,683.53 1277.82,683.53 1278.38,683.53 1278.94,683.53 1279.5,683.53 1280.06,683.53 1280.62,683.53 1281.18,683.53 1281.73,683.53 1282.29,683.53 1282.85,683.53 1283.41,683.53 1283.97,683.53 1284.53,683.53 1285.09,683.53 1285.65,683.53 1286.21,683.53 1286.77,683.53 1287.33,683.53 1287.89,683.53 1288.45,683.53 1289,683.53 1289.56,683.53 1290.12,683.53 1290.68,683.53 1291.24,683.53 1291.8,683.53 1292.36,683.53 1292.92,683.53 1293.48,683.53 1294.04,683.53 1294.6,683.53 1295.16,683.53 1295.72,683.53 1296.28,683.53 1296.83,683.53 1297.39,683.53 1297.95,683.53 1298.51,683.53 1299.07,683.53 1299.63,683.53 1300.19,683.53 1300.75,683.53 1301.31,683.53 1301.87,683.53 1302.43,683.53 1302.99,683.53 1303.55,683.53 1304.1,683.53 1304.66,683.53 1305.22,683.53 1305.78,683.53 1306.34,683.53 1306.9,683.53 1307.46,683.53 1308.02,683.53 1308.58,683.53 1309.14,683.53 1309.7,683.53 1310.26,683.53 1310.82,683.53 1311.38,683.53 1311.93,683.53 1312.49,683.53 1313.05,683.53 1313.61,683.53 1314.17,683.53 1314.73,683.53 1315.29,683.53 1315.85,683.53 1316.41,683.53 1316.97,683.53 1317.53,683.53 1318.09,683.53 1318.65,683.53 1319.2,683.53 1319.76,683.53 1320.32,683.53 1320.88,683.53 1321.44,683.53 1322,683.53 1322.56,683.53 1323.12,683.53 1323.68,683.53 1324.24,683.53 1324.8,683.53 1325.36,683.53 1325.92,683.53 1326.47,683.53 1327.03,683.53 1327.59,683.53 1328.15,683.53 1328.71,683.53 1329.27,683.53 1329.83,683.53 1330.39,683.53 1330.95,683.53 1331.51,683.53 1332.07,683.53 1332.63,683.53 1333.19,683.53 1333.75,683.53 1334.3,683.53 1334.86,683.53 1335.42,683.53 1335.98,683.53 1336.54,683.53 1337.1,683.53 1337.66,683.53 1338.22,683.53 1338.78,683.53 1339.34,683.53 1339.9,683.53 1340.46,683.53 1341.02,683.53 1341.57,683.53 1342.13,683.53 1342.69,683.53 1343.25,683.53 1343.81,683.53 1344.37,683.53 1344.93,683.53 1345.49,683.53 1346.05,683.53 1346.61,683.53 1347.17,683.53 1347.73,683.53 1348.29,683.53 1348.84,683.53 1349.4,683.53 1349.96,683.53 1350.52,683.53 1351.08,683.53 1351.64,683.53 1352.2,683.53 1352.76,683.53 1353.32,683.53 1353.88,683.53 1354.44,683.53 1355,683.53 1355.56,683.53 1356.12,683.53 1356.67,683.53 1357.23,683.53 1357.79,683.53 1358.35,683.53 1358.91,683.53 1359.47,683.53 1360.03,683.53 1360.59,683.53 1361.15,683.53 1361.71,683.53 1362.27,683.53 1362.83,683.53 1363.39,683.53 1363.94,683.53 1364.5,683.53 1365.06,683.53 1365.62,683.53 1366.18,683.53 1366.74,683.53 1367.3,683.53 1367.86,683.53 1368.42,683.53 1368.98,683.53 1369.54,683.53 1370.1,683.53 1370.66,683.53 1371.21,683.53 1371.77,683.53 1372.33,683.53 1372.89,683.53 1373.45,683.53 1374.01,683.53 1374.57,683.53 1375.13,683.53 1375.69,683.53 1376.25,683.53 1376.81,683.53 1377.37,683.53 1377.93,683.53 1378.49,683.53 1379.04,683.53 1379.6,683.53 1380.16,683.53 1380.72,683.53 1381.28,683.53 1381.84,683.53 1382.4,683.53 1382.96,683.53 1383.52,683.53 1384.08,683.53 1384.64,683.53 1385.2,683.53 1385.76,683.53 1386.31,683.53 1386.87,683.53 1387.43,683.53 1387.99,683.53 1388.55,683.53 1389.11,683.53 1389.67,683.53 1390.23,683.53 1390.79,683.53 1391.35,683.53 1391.91,683.53 1392.47,683.53 1393.03,683.53 1393.58,683.53 1394.14,683.53 1394.7,683.53 1395.26,683.53 1395.82,683.53 1396.38,683.53 1396.94,683.53 1397.5,683.53 1398.06,683.53 1398.62,683.53 1399.18,683.53 1399.74,683.53 1400.3,683.53 1400.86,683.53 1401.41,683.53 1401.97,683.53 1402.53,683.53 1403.09,683.53 1403.65,683.53 1404.21,683.53 1404.77,683.53 1405.33,683.53 1405.89,683.53 1406.45,683.53 1407.01,683.53 1407.57,683.53 1408.13,683.53 1408.68,683.53 1409.24,683.53 1409.8,683.53 1410.36,683.53 1410.92,683.53 1411.48,683.53 1412.04,683.53 1412.6,683.53 1413.16,683.53 1413.72,683.53 1414.28,683.53 1414.84,683.53 1415.4,683.53 1415.95,683.53 1416.51,683.53 1417.07,683.53 1417.63,683.53 1418.19,683.53 1418.75,683.53 1419.31,683.53 1419.87,683.53 1420.43,683.53 1420.99,683.53 1421.55,683.53 1422.11,683.53 1422.67,683.53 1423.23,683.53 1423.78,683.53 1424.34,683.53 1424.9,683.53 1425.46,683.53 1426.02,683.53 1426.58,683.53 1427.14,683.53 1427.7,683.53 1428.26,683.53 1428.82,683.53 1429.38,683.53 1429.94,683.53 1430.5,683.53 1431.05,683.53 1431.61,683.53 1432.17,683.53 1432.73,683.53 1433.29,683.53 1433.85,683.53 1434.41,683.53 1434.97,683.53 1435.53,683.53 1436.09,683.53 1436.65,683.53 1437.21,683.53 1437.77,683.53 1438.33,683.53 1438.88,683.53 1439.44,683.53 1440,683.53 1440.56,683.53 1441.12,683.53 1441.68,683.53 1442.24,683.53 1442.8,683.53 1443.36,683.53 1443.92,683.53 1444.48,683.53 1445.04,683.53 1445.6,683.53 1446.15,683.53 1446.71,683.53 1447.27,683.53 1447.83,683.53 1448.39,683.53 1448.95,683.53 1449.51,683.53 1450.07,683.53 1450.63,683.53 1451.19,683.53 1451.75,683.53 1452.31,683.53 1452.87,683.53 1453.42,683.53 1453.98,683.53 1454.54,683.53 1455.1,683.53 1455.66,683.53 1456.22,683.53 1456.78,683.53 1457.34,683.53 1457.9,683.53 1458.46,683.53 1459.02,683.53 1459.58,683.53 1460.14,683.53 1460.7,683.53 1461.25,683.53 1461.81,683.53 1462.37,683.53 1462.93,683.53 1463.49,683.53 1464.05,683.53 1464.61,683.53 1465.17,683.53 1465.73,683.53 1466.29,683.53 1466.85,683.53 1467.41,683.53 1467.97,683.53 1468.52,683.53 1469.08,683.53 1469.64,683.53 1470.2,683.53 1470.76,683.53 1471.32,683.53 1471.88,683.53 1472.44,683.53 1473,683.53 1473.56,683.53 1474.12,683.53 1474.68,683.53 1475.24,683.53 1475.79,683.53 1476.35,683.53 1476.91,683.53 1477.47,683.53 1478.03,683.53 1478.59,683.53 1479.15,683.53 1479.71,683.53 1480.27,683.53 1480.83,683.53 1481.39,683.53 1481.95,683.53 1482.51,683.53 1483.07,683.53 1483.62,683.53 1484.18,683.53 1484.74,683.53 1485.3,683.53 1485.86,683.53 1486.42,683.53 1486.98,683.53 1487.54,683.53 1488.1,683.53 1488.66,683.53 1489.22,683.53 1489.78,683.53 1490.34,683.53 1490.89,683.53 1491.45,683.53 1492.01,683.53 1492.57,683.53 1493.13,683.53 1493.69,683.53 1494.25,683.53 1494.81,683.53 1495.37,683.53 1495.93,683.53 1496.49,683.53 1497.05,683.53 1497.61,683.53 1498.16,683.53 1498.72,683.53 1499.28,683.53 1499.84,683.53 1500.4,683.53 1500.96,683.53 1501.52,683.53 1502.08,683.53 1502.64,683.53 1503.2,683.53 1503.76,683.53 1504.32,683.53 1504.88,683.53 1505.44,683.53 1505.99,683.53 1506.55,683.53 1507.11,683.53 1507.67,683.53 1508.23,683.53 1508.79,683.53 1509.35,683.53 1509.91,683.53 1510.47,683.53 1511.03,683.53 1511.59,683.53 1512.15,683.53 1512.71,683.53 1513.26,683.53 1513.82,683.53 1514.38,683.53 1514.94,683.53 1515.5,683.53 1516.06,683.53 1516.62,683.53 1517.18,683.53 1517.74,683.53 1518.3,683.53 1518.86,683.53 1519.42,683.53 1519.98,683.53 1520.53,683.53 1521.09,683.53 1521.65,683.53 1522.21,683.53 1522.77,683.53 1523.33,683.53 1523.89,683.53 1524.45,683.53 1525.01,683.53 1525.57,683.53 1526.13,683.53 1526.69,683.53 1527.25,683.53 1527.81,683.53 1528.36,683.53 1528.92,683.53 1529.48,683.53 1530.04,683.53 1530.6,683.53 1531.16,683.53 1531.72,683.53 1532.28,683.53 1532.84,683.53 1533.4,683.53 1533.96,683.53 1534.52,683.53 1535.08,683.53 1535.63,683.53 1536.19,683.53 1536.75,683.53 1537.31,683.53 1537.87,683.53 1538.43,683.53 1538.99,683.53 1539.55,683.53 1540.11,683.53 1540.67,683.53 1541.23,683.53 1541.79,683.53 1542.35,683.53 1542.9,683.53 1543.46,683.53 1544.02,683.53 1544.58,683.53 1545.14,683.53 1545.7,683.53 1546.26,683.53 1546.82,683.53 1547.38,683.53 1547.94,683.53 1548.5,683.53 1549.06,683.53 1549.62,683.53 1550.18,683.53 1550.73,683.53 1551.29,683.53 1551.85,683.53 1552.41,683.53 1552.97,683.53 1553.53,683.53 1554.09,683.53 1554.65,683.53 1555.21,683.53 1555.77,683.53 1556.33,683.53 1556.89,683.53 1557.45,683.53 1558,683.53 1558.56,683.53 1559.12,683.53 1559.68,683.53 1560.24,683.53 1560.8,683.53 1561.36,683.53 1561.92,683.53 1562.48,683.53 1563.04,683.53 1563.6,683.53 1564.16,683.53 1564.72,683.53 1565.28,683.53 1565.83,683.53 1566.39,683.53 1566.95,683.53 1567.51,683.53 1568.07,683.53 1568.63,683.53 1569.19,683.53 1569.75,683.53 1570.31,683.53 1570.87,683.53 1571.43,683.53 1571.99,683.53 1572.55,683.53 1573.1,683.53 1573.66,683.53 1574.22,683.53 1574.78,683.53 1575.34,683.53 1575.9,683.53 1576.46,683.53 1577.02,683.53 1577.58,683.53 1578.14,683.53 1578.7,683.53 1579.26,683.53 1579.82,683.53 1580.37,683.53 1580.93,683.53 1581.49,683.53 1582.05,683.53 1582.61,683.53 1583.17,683.53 1583.73,683.53 1584.29,683.53 1584.85,683.53 1585.41,683.53 1585.97,683.53 1586.53,683.53 1587.09,683.53 1587.65,683.53 1588.2,683.53 1588.76,683.53 1589.32,683.53 1589.88,683.53 1590.44,683.53 1591,683.53 1591.56,683.53 1592.12,683.53 1592.68,683.53 1593.24,683.53 1593.8,683.53 1594.36,683.53 1594.92,683.53 1595.47,683.53 1596.03,683.53 1596.59,683.53 1597.15,683.53 1597.71,683.53 1598.27,683.53 1598.83,683.53 1599.39,683.53 1599.95,683.53 1600.51,683.53 1601.07,683.53 1601.63,683.53 1602.19,683.53 1602.74,683.53 1603.3,683.53 1603.86,683.53 1604.42,683.53 1604.98,683.53 1605.54,683.53 1606.1,683.53 1606.66,683.53 1607.22,683.53 1607.78,683.53 1608.34,683.53 1608.9,683.53 1609.46,683.53 1610.02,683.53 1610.57,683.53 1611.13,683.53 1611.69,683.53 1612.25,683.53 1612.81,683.53 1613.37,683.53 1613.93,683.53 1614.49,683.53 1615.05,683.53 1615.61,683.53 1616.17,683.53 1616.73,683.53 1617.29,683.53 1617.84,683.53 1618.4,683.53 1618.96,683.53 1619.52,683.53 1620.08,683.53 1620.64,683.53 1621.2,683.53 1621.76,683.53 1622.32,683.53 1622.88,683.53 1623.44,683.53 1624,683.53 1624.56,683.53 1625.11,683.53 1625.67,683.53 1626.23,683.53 1626.79,683.53 1627.35,683.53 1627.91,683.53 1628.47,683.53 1629.03,683.53 1629.59,683.53 1630.15,683.53 1630.71,683.53 1631.27,683.53 1631.83,683.53 1632.39,683.53 1632.94,683.53 1633.5,683.53 1634.06,683.53 1634.62,683.53 1635.18,683.53 1635.74,683.53 1636.3,683.53 1636.86,683.53 1637.42,683.53 1637.98,683.53 1638.54,683.53 1639.1,683.53 1639.66,683.53 1640.21,683.53 1640.77,683.53 1641.33,683.53 1641.89,683.53 1642.45,683.53 1643.01,683.53 1643.57,683.53 1644.13,683.53 1644.69,683.53 1645.25,683.53 1645.81,683.53 1646.37,683.53 1646.93,683.53 1647.48,683.53 1648.04,683.53 1648.6,683.53 1649.16,683.53 1649.72,683.53 1650.28,683.53 1650.84,683.53 1651.4,683.53 1651.96,683.53 1652.52,683.53 1653.08,683.53 1653.64,683.53 1654.2,683.53 1654.76,683.53 1655.31,683.53 1655.87,683.53 1656.43,683.53 1656.99,683.53 1657.55,683.53 1658.11,683.53 1658.67,683.53 1659.23,683.53 1659.79,683.53 1660.35,683.53 1660.91,683.53 1661.47,683.53 1662.03,683.53 1662.58,683.53 1663.14,683.53 1663.7,683.53 1664.26,683.53 1664.82,683.53 1665.38,683.53 1665.94,683.53 1666.5,683.53 1667.06,683.53 1667.62,683.53 1668.18,683.53 1668.74,683.53 1669.3,683.53 1669.85,683.53 1670.41,683.53 1670.97,683.53 1671.53,683.53 1672.09,683.53 1672.65,683.53 1673.21,683.53 1673.77,683.53 1674.33,683.53 1674.89,683.53 1675.45,683.53 1676.01,683.53 1676.57,683.53 1677.13,683.53 1677.68,683.53 1678.24,683.53 1678.8,683.53 1679.36,683.53 1679.92,683.53 1680.48,683.53 1681.04,683.53 1681.6,683.53 1682.16,683.53 1682.72,683.53 1683.28,683.53 1683.84,683.53 1684.4,683.53 1684.95,683.53 1685.51,683.53 1686.07,683.53 1686.63,683.53 1687.19,683.53 1687.75,683.53 1688.31,683.53 1688.87,683.53 1689.43,683.53 1689.99,683.53 1690.55,683.53 1691.11,683.53 1691.67,683.53 1692.23,683.53 1692.78,683.53 1693.34,683.53 1693.9,683.53 1694.46,683.53 1695.02,683.53 1695.58,683.53 1696.14,683.53 1696.7,683.53 1697.26,683.53 1697.82,683.53 1698.38,683.53 1698.94,683.53 1699.5,683.53 1700.05,683.53 1700.61,683.53 1701.17,683.53 1701.73,683.53 1702.29,683.53 1702.85,683.53 1703.41,683.53 1703.97,683.53 1704.53,683.53 1705.09,683.53 1705.65,683.53 1706.21,683.53 1706.77,683.53 1707.32,683.53 1707.88,683.53 1708.44,683.53 1709,683.53 1709.56,683.53 1710.12,683.53 1710.68,683.53 1711.24,683.53 1711.8,683.53 1712.36,683.53 1712.92,683.53 1713.48,683.53 1714.04,683.53 1714.6,683.53 1715.15,683.53 1715.71,683.53 1716.27,683.53 1716.83,683.53 1717.39,683.53 1717.95,683.53 1718.51,683.53 1719.07,683.53 1719.63,683.53 1720.19,683.53 1720.75,683.53 1721.31,683.53 1721.87,683.53 1722.42,683.53 1722.98,683.53 1723.54,683.53 1724.1,683.53 1724.66,683.53 1725.22,683.53 1725.78,683.53 1726.34,683.53 1726.9,683.53 1727.46,683.53 1728.02,683.53 1728.58,683.53 1729.14,683.53 1729.69,683.53 1730.25,683.53 1730.81,683.53 1731.37,683.53 1731.93,683.53 1732.49,683.53 1733.05,683.53 1733.61,683.53 1734.17,683.53 1734.73,683.53 1735.29,683.53 1735.85,683.53 1736.41,683.53 1736.97,683.53 1737.52,683.53 1738.08,683.53 1738.64,683.53 1739.2,683.53 1739.76,683.53 1740.32,683.53 1740.88,683.53 1741.44,683.53 1742,683.53 1742.56,683.53 1743.12,683.53 1743.68,683.53 1744.24,683.53 1744.79,683.53 1745.35,683.53 1745.91,683.53 1746.47,683.53 1747.03,683.53 1747.59,683.53 1748.15,683.53 1748.71,683.53 1749.27,683.53 1749.83,683.53 1750.39,683.53 1750.95,683.53 1751.51,683.53 1752.06,683.53 1752.62,683.53 1753.18,683.53 1753.74,683.53 1754.3,683.53 1754.86,683.53 1755.42,683.53 1755.98,683.53 1756.54,683.53 1757.1,683.53 1757.66,683.53 1758.22,683.53 1758.78,683.53 1759.34,683.53 1759.89,683.53 1760.45,683.53 1761.01,683.53 1761.57,683.53 1762.13,683.53 1762.69,683.53 1763.25,683.53 1763.81,683.53 1764.37,683.53 1764.93,683.53 1765.49,683.53 1766.05,683.53 1766.61,683.53 1767.16,683.53 1767.72,683.53 1768.28,683.53 1768.84,683.53 1769.4,683.53 1769.96,683.53 1770.52,683.53 1771.08,683.53 1771.64,683.53 1772.2,683.53 1772.76,683.53 1773.32,683.53 1773.88,683.53 1774.43,683.53 1774.99,683.53 1775.55,683.53 1776.11,683.53 1776.67,683.53 1777.23,683.53 1777.79,683.53 1778.35,683.53 1778.91,683.53 1779.47,683.53 1780.03,683.53 1780.59,683.53 1781.15,683.53 1781.71,683.53 1782.26,683.53 1782.82,683.53 1783.38,683.53 1783.94,683.53 1784.5,683.53 1785.06,683.53 1785.62,683.53 1786.18,683.53 1786.74,683.53 1787.3,683.53 1787.86,683.53 1788.42,683.53 1788.98,683.53 1789.53,683.53 1790.09,683.53 1790.65,683.53 1791.21,683.53 1791.77,683.53 1792.33,683.53 1792.89,683.53 1793.45,683.53 1794.01,683.53 1794.57,683.53 1795.13,683.53 1795.69,683.53 1796.25,683.53 1796.8,683.53 1797.36,683.53 1797.92,683.53 1798.48,683.53 1799.04,683.53 1799.6,683.53 1800.16,683.53 1800.72,683.53 1801.28,683.53 1801.84,683.53 1802.4,683.53 1802.96,683.53 1803.52,683.53 1804.08,683.53 1804.63,683.53 1805.19,683.53 1805.75,683.53 1806.31,683.53 1806.87,683.53 1807.43,683.53 1807.99,683.53 1808.55,683.53 1809.11,683.53 1809.67,683.53 1810.23,683.53 1810.79,683.53 1811.35,683.53 1811.9,683.53 1812.46,683.53 1813.02,683.53 1813.58,683.53 1814.14,683.53 1814.7,683.53 1815.26,683.53 1815.82,683.53 1816.38,683.53 1816.94,683.53 1817.5,683.53 1818.06,683.53 1818.62,683.53 1819.18,683.53 1819.73,683.53 1820.29,683.53 1820.85,683.53 1821.41,683.53 1821.97,683.53 1822.53,683.53 1823.09,683.53 1823.65,683.53 1824.21,683.53 1824.77,683.53 1825.33,683.53 1825.89,683.53 1826.45,683.53 1827,683.53 1827.56,683.53 1828.12,683.53 1828.68,683.53 1829.24,683.53 1829.8,683.53 1830.36,683.53 1830.92,683.53 1831.48,683.53 1832.04,683.53 1832.6,683.53 1833.16,683.53 1833.72,683.53 1834.27,683.53 1834.83,683.53 1835.39,683.53 1835.95,683.53 1836.51,683.53 1837.07,683.53 1837.63,683.53 1838.19,683.53 \"/>\n</svg>\n","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"In this case the projected energy and the shift are close to each other and the error bars are hard to see.","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"The problem was just a toy example, as the dimension of the Hamiltonian is rather small:","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"dimension(H)","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"462","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"In this case, it's easy (and more efficient) to calculate the exact ground state energy using standard linear algebra. Read more about Rimu's capabilities for exact diagonalization in the example \"Exact diagonalization\".","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"edp = ExactDiagonalizationProblem(H)\nexact_energy = solve(edp).values[1]","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"-4.021502406906472","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"We finish by comparing our FCIQMC results with the exact computation.","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"println(\n    \"\"\"\n    Energy from $steps_measure steps with $target_walkers walkers:\n    Shift: $(se.mean) ± $(se.err)\n    Projected Energy: $(v.val) ± ($(v.val_l), $(v.val_u))\n    Exact Energy: $exact_energy\n    \"\"\"\n)\n\n","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"Energy from 2000 steps with 1000 walkers:\nShift: -4.032483291363995 ± 0.02304075905872924\nProjected Energy: -4.014811632771364 ± (0.004015452785323781, 0.003953549016062041)\nExact Energy: -4.021502406906472\n\n","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"This page was generated using Literate.jl.","category":"page"},{"location":"statstools.html#Module-StatsTools","page":"StatsTools","title":"Module StatsTools","text":"","category":"section"},{"location":"statstools.html","page":"StatsTools","title":"StatsTools","text":"The  module StatsTools contains helper function for analysis and post processing of Monte Carlo data.","category":"page"},{"location":"statstools.html#Blocking-analysis","page":"StatsTools","title":"Blocking analysis","text":"","category":"section"},{"location":"statstools.html","page":"StatsTools","title":"StatsTools","text":"After equilibration, FCIQMC produces information about observables through correlated time series. In order to estimate the statistical errors the time series need to be decorrelated. The main workhorse for achieving this is the blocking_analysis, which is based on the paper by Flyvberg and Peterson JCP (1989), and automated with the M test of Jonsson PRE (2018).","category":"page"},{"location":"statstools.html","page":"StatsTools","title":"StatsTools","text":"Analysing the stochastic errors of observables obtained from the ratio of sample means is done with ratio_of_means, where error propagation of correlated uncertainties is done with the help of the package MonteCarloMeasurements.","category":"page"},{"location":"statstools.html","page":"StatsTools","title":"StatsTools","text":"Many convenience functions are implemented for directly analysing data obtained from solve as a DataFrame. See, e.g., shift_estimator and projected_energy. Asymptotically unbiased estimators are implemented as mixed_estimator, growth_estimator and rayleigh_replica_estimator.","category":"page"},{"location":"statstools.html#Exported","page":"StatsTools","title":"Exported","text":"","category":"section"},{"location":"statstools.html","page":"StatsTools","title":"StatsTools","text":"Modules = [StatsTools]\nPages = [\"StatsTools.jl\", \"blocking.jl\", \"ratio_of_means.jl\", \"convenience.jl\",\n  \"variances.jl\", \"growth_witness.jl\", \"reweighting.jl\", \"fidelity.jl\", \"variational_energy_estimator.jl\"\n]\nPrivate = false","category":"page"},{"location":"statstools.html#Rimu.StatsTools","page":"StatsTools","title":"Rimu.StatsTools","text":"Tools for the statistical analysis of Monte Carlo data.\n\nExports:\n\nblocking_analysis\nblocking_analysis_data\nratio_of_means\ngrowth_witness\nsmoothen\nshift_estimator\nprojected_energy\nvariational_energy_estimator\ngrowth_estimator\ngrowth_estimator_analysis\nmixed_estimator\nmixed_estimator_analysis\nrayleigh_replica_estimator\nrayleigh_replica_estimator_analysis\nval_and_errs\nval\nmean_and_se\n\n\n\n\n\n","category":"module"},{"location":"statstools.html#Rimu.StatsTools.blocking_analysis-Tuple{AbstractVector}","page":"StatsTools","title":"Rimu.StatsTools.blocking_analysis","text":"blocking_analysis(v::AbstractVector; α = 0.01, corrected = true, skip=0, warn=true)\n-> BlockingResult(mean, err, err_err, p_cov, k, blocks)\n\nCompute the sample mean mean and estimate the standard deviation of the mean (standard error) err of a correlated time series. It uses the blocking algorithm from Flyvberg and Peterson JCP (1989) and the M test of Jonsson PRE (2018) at significance level 1-α.\n\nUse skip to skip the first skip elements in v. corrected controls whether bias correction for variances is used. If decorrelating the time series fails according to the M test, NaN is returned as the standard error and -1 for k. The keyword argument warn controls whether a warning message is logged.\n\nThe summary result is returned as a BlockingResult. k - 1 is the number of blocking transformations required to pass the hypothesis test for an uncorrelated time series and err_err the estimated standard error or err.\n\nThe detailed results from each reblocking step can be obtained with blocking_analysis_data.\n\nSee BlockingResult, shift_estimator, ratio_of_means, blocking_analysis_data.\n\n\n\n\n\n","category":"method"},{"location":"statstools.html#Rimu.StatsTools.blocking_analysis_data-Tuple{AbstractVector}","page":"StatsTools","title":"Rimu.StatsTools.blocking_analysis_data","text":"blocking_analysis_data(v::AbstractVector; kwargs...) ->\n(; br::BlockingResult, df::DataFrame)\n\nPerform a blocking_analysis and return the summary result br as well as a DataFrame df with information about the standard error in each blocking step.\n\nFor a description of the keyword arguments see blocking_analysis.\n\nExample\n\njulia> data = smoothen(rand(10_000), 2^6); # generate correlated data\n\njulia> br, df = blocking_analysis_data(data)\n(br = BlockingResult{Float64}\n  mean = 0.5088 ± 0.0029\n  with uncertainty of ± 0.00023454488294744232\n  from 78 blocks after 7 transformations (k = 8).\n, df = 13×6 DataFrame\n Row │ blocks  mean      std_err      std_err_err  p_cov       mj\n     │ Int64   Float64   Float64      Float64      Float64     Float64\n─────┼──────────────────────────────────────────────────────────────────────\n   1 │  10000  0.508806  0.000375044  2.6521e-6    1.40658e-7  9715.08\n   2 │   5000  0.508806  0.000528547  5.28599e-6   2.79361e-7  4778.14\n   3 │   2500  0.508806  0.000743386  1.05152e-5   5.52622e-7  2298.64\n   4 │   1250  0.508806  0.00104064   2.08212e-5   1.08293e-6  1056.24\n   5 │    625  0.508806  0.00144177   4.08121e-5   2.07871e-6   427.949\n   6 │    312  0.508736  0.00194209   7.78707e-5   3.77171e-6   128.711\n   7 │    156  0.508736  0.00247921   0.00014081   6.14647e-6    17.3075\n   8 │     78  0.508736  0.00291063   0.000234545  8.47174e-6     0.731386\n   9 │     39  0.508736  0.00284613   0.000326474  8.10046e-6     0.901054\n  10 │     19  0.508241  0.0026998    0.000449967  7.28892e-6     2.85915\n  11 │      9  0.507939  0.00359907   0.000899766  1.29533e-5     1.08644\n  12 │      4  0.509327  0.00440559   0.00179857   1.94092e-5     0.0370381\n  13 │      2  0.509327  0.00432708   0.00305971   1.87237e-5     0.125)\n\njulia> using StatsPlots; unicodeplots();\n\njulia> plot([br.k,br.k],[0.0,maximum(df.std_err.+df.std_err_err)], label=\"m test\");\n\njulia> @df df plot!(\n           1:length(:std_err), :std_err;\n           err=:std_err_err, xlabel=\"k\", label=\"std err\",\n           title=\"std err vs blocking steps\"\n       )\n               ⠀⠀⠀⠀⠀⠀⠀⠀⠀std err vs blocking steps⠀⠀⠀⠀⠀⠀⠀⠀\n               ┌────────────────────────────────────────┐\n    0.00423501 │⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⡀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⢠⠀⠀⠀⠀│ m test\n               │⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⡇⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⢀⠀⠀⢸⠀⠀⠀⠀│ std err\n               │⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⡇⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⢸⠀⠀⢸⠀⠀⠀⠀│\n               │⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⡇⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⢸⠀⠀⢸⠀⠀⠀⠀│\n               │⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⡇⠀⠀⠀⠀⠀⠀⠀⠀⡇⠀⡠⢺⠒⠒⢺⠀⠀⠀⠀│\n               │⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⡇⠀⠀⡀⠀⠀⡆⣀⠤⡗⠉⠀⢸⠀⠀⢸⡆⠀⠀⠀│\n               │⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⢀⡧⠤⠔⡗⠊⠉⡏⠀⠀⡇⠀⠀⢸⠀⠀⢸⢣⠀⠀⠀│\n               │⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⢀⠔⠁⡇⠀⠀⠁⠀⠀⠁⠀⠀⠁⠀⠀⠀⠀⠀⢸⠸⡀⠀⠀│\n               │⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⢀⠴⠁⠀⠀⡇⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠸⠀⡇⠀⠀│\n               │⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⢀⠔⠁⠀⠀⠀⠀⡇⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⢸⠀⠀│\n               │⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⢀⠔⠊⠀⠀⠀⠀⠀⠀⡇⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠈⣦⠀│\n               │⠀⠀⠀⠀⠀⠀⠀⠀⡠⠔⠒⠁⠀⠀⠀⠀⠀⠀⠀⠀⡇⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⢹⠀│\n               │⠀⠀⠀⢀⣀⠤⠒⠉⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⡇⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⢸⠀│\n               │⠀⠒⠉⠁⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⡇⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⢸⠀│\n   -0.00012335 │⠤⠤⠤⠤⠤⠤⠤⠤⠤⠤⠤⠤⠤⠤⠤⠤⠤⠤⠤⠤⠧⠤⠤⠤⠤⠤⠤⠤⠤⠤⠤⠤⠤⠤⠤⠤⠤⠤⠤⠤│\n               └────────────────────────────────────────┘\n               ⠀0.64⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀k⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀13.36⠀\n\nA vertical line at k==8 indicates the blocking step identified by hypothesis testing to decorrelate the time series data. The decorrelation length can thus be estimated at 2^k-1 = 2^7 = 128. Note that the data was correlated with a sliding window of 2^6 steps.\n\nSee blocking_analysis, BlockingResult.\n\n\n\n\n\n","category":"method"},{"location":"statstools.html#Rimu.StatsTools.mean_and_se-Tuple{Rimu.StatsTools.BlockingResult}","page":"StatsTools","title":"Rimu.StatsTools.mean_and_se","text":"mean_and_se(v::AbstractVector; α = 0.01, corrected::Bool=true, skip=0) -> mean, err\nmean_and_se(r::BlockingResult) -> mean, err\n\nReturn the mean and standard error (as a tuple) of a time series obtained from blocking_analysis. See also BlockingResult.\n\n\n\n\n\n","category":"method"},{"location":"statstools.html#Statistics.cov-Tuple{Rimu.StatsTools.BlockingResult{<:Complex}}","page":"StatsTools","title":"Statistics.cov","text":"cov(r::BlockingResult{<:Complex})\n\nReturn the covariance matrix of the multivariate normal distribution approximating the uncertainty of the blocking result r of a complex time series. See (https://en.wikipedia.org/wiki/Complexnormaldistribution).\n\n\n\n\n\n","category":"method"},{"location":"statstools.html#Rimu.StatsTools.ratio_of_means-Tuple{Any, Any}","page":"StatsTools","title":"Rimu.StatsTools.ratio_of_means","text":"ratio_of_means(num, denom; α=0.01, corrected=true, mc_samples=nothing, skip=0, warn=true)\n-> r::RatioBlockingResult\n\nEstimate the ratio of mean(num)/mean(denom) assuming that num and denom are possibly correlated time series, skipping the first skip elements. A blocking analysis with m-test is used to uncorrelate the time series, see blocking_analysis. The remaining standard error and correlation of the means is propagated using MonteCarloMeasurements. The results are reported as a RatioBlockingResult.\n\nRobust estimates for the ratio are obtained from pmedian(r) and confidence intervals from pquantile(), e.g. pquantile(r, [0.025, 0.975]) for the 95% confidence interval.\n\nEstimates from linear uncertainty propagation are returned as r.f and r.σ_f using x_by_y_linear. The standard error estimate r.σ_f should only be trusted when the coefficient of variation std(denom)/mean(denom) is small: abs(r.δ_y) < 0.1. Under this condition can the ratio be approximated as a normal distribution. See wikipedia and Díaz-Francés, Rubio (2013)\n\nThe keyword mc_samples controls the number of samples used for error propagation by MonteCarloMeasurements. Use nothing for the default and Val(1000) to set the number to 1000 samples in a type-consistent way.\n\nThe keyword warn controls whether warning messages are logged when blocking fails or noisy denominators are encountered.\n\nNote: to compute statistics on the RatioBlockingResult, use functions pmedian, pquantile, pmiddle, piterate, pextrema, pminimum, pmaximum, pmean, and pcov.\n\n\n\n\n\n","category":"method"},{"location":"statstools.html#Rimu.StatsTools.errs-Tuple","page":"StatsTools","title":"Rimu.StatsTools.errs","text":"errs(x; n=1, p=nothing, name=:err) -> (; err_l, err_u)\n\nReturn the lower and upper error bar for the uncertain value x.\n\nSee val_and_errs.\n\n\n\n\n\n","category":"method"},{"location":"statstools.html#Rimu.StatsTools.to_measurement-Tuple{MonteCarloMeasurements.Particles}","page":"StatsTools","title":"Rimu.StatsTools.to_measurement","text":"to_measurement(p::MonteCarloMeasurements.Particles) -> ::Measurements.measurement\n\nConvert an uncertain number from MonteCarloMeasurements  to Measurements format  using the median as the central point. The new ± boundaries will include  the 68% quantile around the median.\n\n\n\n\n\n","category":"method"},{"location":"statstools.html#Rimu.StatsTools.val-Tuple{Any}","page":"StatsTools","title":"Rimu.StatsTools.val","text":"val(x)\n\nReturn the best estimate value for an uncertain x. Defaults to the median for uncertain x represented by a (sampled) distribution. Supports  MonteCarloMeasurements and Measurements.\n\nSee errs, BlockingResult, RatioBlockingResult.\n\n\n\n\n\n","category":"method"},{"location":"statstools.html#Rimu.StatsTools.val_and_errs-Tuple{Any}","page":"StatsTools","title":"Rimu.StatsTools.val_and_errs","text":"val_and_errs(x; n=1, p=nothing, name=:val) -> (;val, val_l, val_u)\n\nReturn the median and the lower and upper error bar for the uncertain value x as a NamedTuple. This is useful for plotting scripts. The interval [val - val_l, val + val_u] represents the confidence interval at level n*σ, or at probability p. Setting p overrides n. Supports  MonteCarloMeasurements and Measurements. The  names in the NamedTuple can be changed with name.\n\nExample:\n\njulia> results = [blocking_analysis(i:0.1:2i+20) for i in 1:3]; # mock results\n\njulia> v = val_and_errs.(results, name=\"res\"); # Vector of NamedTuple's with standard errors\n\njulia> DataFrame(v)\n3×3 DataFrame\n Row │ res      res_l    res_u\n     │ Float64  Float64  Float64\n─────┼───────────────────────────\n   1 │    11.5  1.7282   1.7282\n   2 │    13.0  1.7282   1.7282\n   3 │    14.5  1.78885  1.78885\n\nSee NamedTuple, val, errs, BlockingResult, RatioBlockingResult.\n\n\n\n\n\n","category":"method"},{"location":"statstools.html#Rimu.StatsTools.growth_witness","page":"StatsTools","title":"Rimu.StatsTools.growth_witness","text":"growth_witness(df::DataFrame, [b];\n    shift=:shift,\n    norm=:norm,\n    time_step=determine_constant_time_step(df),\n    skip=0\n)\ngrowth_witness(sim::PMCSimulation, [b]; kwargs...)\n\nCalculate the growth witness directly from the result (DataFrame or PMCSimulation) of solveing a ProjectorMonteCarloProblem. The keyword arguments shift and norm can be used to change the names of the relevant columns.\n\n\n\n\n\n","category":"function"},{"location":"statstools.html#Rimu.StatsTools.growth_witness-Tuple{AbstractArray, AbstractArray, Any}","page":"StatsTools","title":"Rimu.StatsTools.growth_witness","text":"growth_witness(shift::AbstractArray, norm::AbstractArray, dt, [b]; skip=0)\n\nCompute the growth witness\n\nG^(n) = S^(n) - fracvertmathbfc^(n+1)vert -\n          vertmathbfc^(n)vertvertmathbfc^(n)vert dtau\n\nwhere S is the shift and vertmathbfc^(n)vert == norm[n, 1]. Setting b ≥ 1 a sliding average over b time steps is computed using smoothen(). The first skip time steps are skipped. mean(growth_witness) is approximately the same as growth_estimator with h=0.\n\nSee also growth_estimator.\n\n\n\n\n\n","category":"method"},{"location":"statstools.html#Rimu.StatsTools.smoothen-Tuple{AbstractVector, Integer}","page":"StatsTools","title":"Rimu.StatsTools.smoothen","text":"smoothen(noisy::AbstractVector, b)\n\nSmoothen the array noisy by averaging over a sliding window of length b and wrapping noisy periodically. The mean(noisy) is preserved.\n\n\n\n\n\n","category":"method"},{"location":"statstools.html#Rimu.StatsTools.growth_estimator-NTuple{4, Any}","page":"StatsTools","title":"Rimu.StatsTools.growth_estimator","text":"growth_estimator(\n    shift, wn, h, time_step;\n    skip = 0,\n    E_r = mean(shift[skip+1:end]),\n    weights = w_exp,\n    change_type = identity,\n    kwargs...\n)\ngrowth_estimator(\n    df::DataFrame, h;\n    shift_name=:shift,\n    norm_name=:norm,\n    time_step=determine_constant_time_step(df),\n    kwargs...\n)\ngrowth_estimator(sim::PMCSimulation; kwargs...)\n-> r::RatioBlockingResult\n\nCompute the growth estimator with reference energy E_r by the reweighting technique described in Umrigar et al. (1993), see Eq. (20). shift and wn are equal length vectors containing the shift and walker number time series, respectively.  Reweighting is done over h time steps and length(shift) - skip time steps are used for the blocking analysis done with ratio_of_means. weights is a function that calulates the weights. See w_exp and w_lin.\n\nE_gr = E_r - frac1dτln\n    fracsum_n w_h+1^(n+1) N_mathrmw^(n+1)\n        sum_m w_h^(m) N_mathrmw^(m) \n\nwhere dτ is the time_step\n\nWhen h is greater than the autocorrelation time scale of the shift, then E_gr (returned as r.ratio) is an unbiased but approximate estimator for the ground state energy E_0 with an error mathcalO(dτ^2) and potentially increased confidence intervals compared to the (biased) shift estimator.  Error propagation is done with MonteCarloMeasurements. Propagation through the logarithm can be modified by setting change_type to to_measurement in order to avoid NaN results from negative outliers.\n\nIf success==true the blocking analysis was successful in k-1 steps, using blocks uncorrelated data points.\n\nThe second method calculates the growth estimator directly from a PMCSimulation or DataFrame returned by solve. The keyword arguments shift_name and norm_name can be used to change the names of the relevant columns.\n\nSee also mixed_estimator and RatioBlockingResult.\n\n\n\n\n\n","category":"method"},{"location":"statstools.html#Rimu.StatsTools.growth_estimator_analysis-Tuple{Any}","page":"StatsTools","title":"Rimu.StatsTools.growth_estimator_analysis","text":"growth_estimator_analysis(df::DataFrame; kwargs...)\ngrowth_estimator_analysis(sim::PMCSimulation; kwargs...)\n-> (; df_ge, correlation_estimate, se, se_l, se_u)\n\nCompute the growth_estimator on a DataFrame df or PMCSimulation sim. repeatedly over a range of reweighting depths.\n\nReturns a NamedTuple with the fields\n\ndf_ge: DataFrame with reweighting depth and growth_estiamator data. See example below.\ncorrelation_estimate: estimated correlation time from blocking analysis\nse, se_l, se_u: shift_estimator and error\n\nKeyword arguments\n\nh_range: The default is about h_values values from 0 to twice the estimated correlation time\nh_values = 100: minimum number of reweighting depths\nskip = 0: initial time steps to exclude from averaging\nthreading = Threads.nthreads() > 1: if false a progress meter is displayed\nshift_name = :shift name of column in df with shift data\nnorm_name = :norm name of column in df with walkernumber data\nwarn = true whether to log warning messages when blocking fails or denominators are small\n\nExample\n\nsim = solve(...)\ndf_ge, correlation_estimate, se, se_l, se_u = growth_estimator_analysis(sim; skip=5_000)\n\nusing StatsPlots\n@df df_ge plot(_ -> se, :h, ribbon = (se_l, se_u), label = \"⟨S⟩\") # constant line and ribbon for shift estimator\n@df df_ge plot!(:h, :val, ribbon = (:val_l, :val_u), label=\"E_gr\") # growth estimator as a function of reweighting depth\nxlabel!(\"h\")\n\nSee also: growth_estimator, mixed_estimator_analysis.\n\n\n\n\n\n","category":"method"},{"location":"statstools.html#Rimu.StatsTools.mixed_estimator-Tuple{AbstractVector, AbstractVector, AbstractVector, Any, Any}","page":"StatsTools","title":"Rimu.StatsTools.mixed_estimator","text":"mixed_estimator(\n    hproj, vproj, shift, h, time_step;\n    skip = 0,\n    E_r = mean(shift[skip+1:end]),\n    weights = w_exp,\n    kwargs...\n)\nmixed_estimator(\n    df::DataFrame, h;\n    hproj_name=:hproj,\n    vproj_name=:vproj,\n    shift_name=:shift,\n    time_step=determine_constant_time_step(df),\n    kwargs...\n)\nmixed_estimator(sim::PMCSimulation, h; kwargs...)\n-> r::RatioBlockingResult\n\nCompute the mixed estimator by the reweighting technique described in Umrigar et al. (1993), Eq. (19)\n\nE_mathrmmix = fracsum_n w_h^(n)  (Hmathbfv)mathbfc^(n)\n        sum_m w_h^(m)  mathbfvmathbfc^(m) \n\nwhere the time series hproj == (Hmathbfv)mathbfc^(n) and vproj == mathbfvmathbfc^(m) have the same length as shift (See ProjectedEnergy on how to set these up).  Reweighting is done over h time steps and length(shift) - skip time steps are used for the blocking analysis done with ratio_of_means. weights is a function that calulates the weights. See w_exp and w_lin.  Additional keyword arguments are passed on to ratio_of_means.\n\nWhen h is greater than the autocorrelation time scale of the shift, then r.ratio is an unbiased but approximate estimator for the ground state energy E_0 with an error mathcalO(dτ^2), where dτ is the time_step, and potentially increased confidence intervals compared to the unweighted ratio.  Error propagation is done with MonteCarloMeasurements. Results are returned as RatioBlockingResult.\n\nThe second method calculates the mixed energy estimator directly from a DataFrame or PMCSimulation returned by solve. The keyword arguments hproj_name, vproj_name, and shift_name can be used to change the names of the relevant columns.\n\nSee also growth_estimator.\n\n\n\n\n\n","category":"method"},{"location":"statstools.html#Rimu.StatsTools.mixed_estimator_analysis-Tuple{DataFrame}","page":"StatsTools","title":"Rimu.StatsTools.mixed_estimator_analysis","text":"mixed_estimator_analysis(df::DataFrame; kwargs...)\nmixed_estimator_analysis(sim::PMCSimulation; kwargs...)\n-> (; df_me, correlation_estimate, se, se_l, se_u)\n\nCompute the mixed_estimator on a DataFrame df or PMCSimulation sim returned from solve repeatedly over a range of reweighting depths.\n\nReturns a NamedTuple with the fields\n\ndf_me: DataFrame with reweighting depth and mixed_estiamator data. See example below.\ncorrelation_estimate: estimated correlation time from blocking analysis\nse, se_l, se_u: shift_estimator and error\n\nKeyword arguments\n\nh_range: The default is about h_values values from 0 to twice the estimated correlation time\nh_values = 100: minimum number of reweighting depths\nskip = 0: initial time steps to exclude from averaging\nthreading = Threads.nthreads() > 1: if false a progress meter is displayed\nshift_name = :shift name of column in df with shift data\nhproj_name = :hproj name of column in df with operator overlap data\nvproj_name = :vproj name of column in df with projector overlap data\nwarn = true whether to log warning messages when blocking fails or denominators are small\n\nExample\n\nsim = solve(...)\ndf_me, correlation_estimate, se, se_l, se_u = mixed_estimator_analysis(sim; skip=5_000)\n\nusing StatsPlots\n@df df_me plot(_ -> se, :h, ribbon = (se_l, se_u), label = \"⟨S⟩\") # constant line and ribbon for shift estimator\n@df df_me plot!(:h, :val, ribbon = (:val_l, :val_u), label=\"E_mix\") # mixed estimator as a function of reweighting depth\nxlabel!(\"h\")\n\nSee also: mixed_estimator, growth_estimator_analysis.\n\n\n\n\n\n","category":"method"},{"location":"statstools.html#Rimu.StatsTools.projected_energy-Tuple{Any}","page":"StatsTools","title":"Rimu.StatsTools.projected_energy","text":"projected_energy(df::DataFrame; skip=0, hproj=:hproj, vproj=:vproj, kwargs...)\nprojected_energy(sim::PMCSimulation; kwargs...)\n-> r::RatioBlockingResult\n\nCompute the projected energy estimator\n\nE_mathrmp = fracsum_n  mathbfvHmathbfc^(n)\n        sum_m mathbfvmathbfc^(m) \n\nwhere the time series df.hproj == mathbfvHmathbfc^(n) and df.vproj == mathbfvmathbfc^(m) are taken from df, skipping the first skip entries (use post_step_strategy =ProjectedEnergy(...) to set these up in ProjectorMonteCarloProblem). projected_energy is equivalent to mixed_estimator with h=0.\n\nThe keyword arguments hproj and vproj can be used to change the names of the relevant columns. Other kwargs are passed on to ratio_of_means. Returns a RatioBlockingResult.\n\nSee NamedTuple, val_and_errs, val, errs for processing results.\n\n\n\n\n\n","category":"method"},{"location":"statstools.html#Rimu.StatsTools.rayleigh_replica_estimator-Tuple{Vector, Vector, Vector, Any, Any}","page":"StatsTools","title":"Rimu.StatsTools.rayleigh_replica_estimator","text":"rayleigh_replica_estimator(\n    op_ol, vec_ol, shift, h, time_step;\n    skip = 0,\n    E_r = mean(shift[skip+1:end]),\n    weights = w_exp,\n    kwargs...\n)\nrayleigh_replica_estimator(\n    df::DataFrame;\n    shift_name=\"shift\",\n    op_name=\"Op1\",\n    vec_name=\"dot\",\n    h=0,\n    skip=0,\n    Anorm=1,\n    kwargs...\n)\nrayleigh_replica_estimator(sim::PMCSimulation; kwargs...)\n-> r::RatioBlockingResult\n\nCompute the estimator of a Rayleigh quotient of operator hatA with reweighting,\n\nA_mathrmest(h) = fracsum_ab sum_n w_ha^(n) w_hb^(n)\n    mathbfc_a^(n) cdot hatA cdot mathbfc_b^(n)\n    sum_ab sum_n w_ha^(n) w_hb^(n) mathbfc_a^(n) cdot mathbfc_b^(n)\n\nusing data from multiple replicas.\n\nArgument op_ol holds data for the operator overlap mathbfc_a^(n) hatA mathbfc_b^(n) and vec_ol holds data for the vector overlap mathbfc_a^(n) mathbfc_b^(n). They are of type Vector{Vector}, with each element Vector holding the data for a pair of replicas. Argument shift is of type Vector{Vector}, with each element Vector holding the shift data for each individual replica.\n\nThe second method computes the Rayleigh quotient directly from a DataFrame or PMCSimulation returned by solve. The keyword arguments shift_name, op_name and vec_name can be used to change the names of the relevant columns, see AllOverlaps for default formatting. The operator overlap data can be scaled by a prefactor Anorm. A specific reweighting depth can be set with keyword argument h. The default is h = 0 which calculates the Rayleigh quotient without reweighting.\n\nThe reweighting is an extension of the mixed estimator using the reweighting technique described in Umrigar et al. (1993). Reweighting is done over h time steps and length(shift) - skip time steps are used for the blocking analysis done with ratio_of_means. weights is a function that calulates the weights. See w_exp and w_lin. Additional keyword arguments are passed on to ratio_of_means.\n\nError propagation is done with MonteCarloMeasurements. Results are returned as RatioBlockingResult.\n\nSee also mixed_estimator, growth_estimator.\n\n\n\n\n\n","category":"method"},{"location":"statstools.html#Rimu.StatsTools.rayleigh_replica_estimator_analysis-Tuple{Any}","page":"StatsTools","title":"Rimu.StatsTools.rayleigh_replica_estimator_analysis","text":"rayleigh_replica_estimator_analysis(df::DataFrame; kwargs...)\nrayleigh_replica_estimator_analysis(sim::PMCSimulation; kwargs...)\n-> (; df_rre, df_se)\n\nCompute the rayleigh_replica_estimator on a DataFrame df or PMCSimulation sim returned from solve repeatedly over a range of reweighting depths.\n\nReturns a NamedTuple with the fields\n\ndf_rre: DataFrame with reweighting depth and rayleigh_replica_estimator data. See example below.\ndf_se: DataFrame with shift_estimator output, one row per replica\n\nKeyword arguments\n\nh_range: The default is about h_values values from 0 to twice the estimated correlation time\nh_values = 100: minimum number of reweighting depths\nskip = 0: initial time steps to exclude from averaging\nthreading = Threads.nthreads() > 1: if false a progress meter is displayed\nshift_name = \"shift\": shift data corresponding to column in df with names <shift>_1, ...\nop_name = \"Op1\": name of operator overlap corresponding to column in df with names c1_<op_ol>_c2, ...\nvec_name = \"dot\": name of vector-vector overlap corresponding to column in df with names c1_<vec_ol>_c2, ...\nAnorm = 1: a scalar prefactor to scale the operator overlap data\nwarn = true: whether to log warning messages when blocking fails or denominators are small\n\nExample\n\nsim = solve(...)\ndf_rre, df_se = rayleigh_replica_estimator_analysis(sim; skip=5_000)\n\nusing StatsPlots\n@df df_rre plot(_ -> se, :h, ribbon = (se_l, se_u), label = \"⟨S⟩\") # constant line and ribbon for shift estimator\n@df df_rre plot!(:h, :val, ribbon = (:val_l, :val_u), label=\"E_mix\") # Rayleigh quotient estimator as a function of reweighting depth\nxlabel!(\"h\")\n\nSee also: rayleigh_replica_estimator, mixed_estimator_analysis, AllOverlaps.\n\n\n\n\n\n","category":"method"},{"location":"statstools.html#Rimu.StatsTools.shift_estimator-Tuple{Any}","page":"StatsTools","title":"Rimu.StatsTools.shift_estimator","text":"shift_estimator(df::DataFrame; shift=:shift, kwargs...)\nshift_estimator(sim::PMCSimulation; kwargs...)\n-> r::BlockingResult\n\nReturn the shift estimator from the data in df.shift. The keyword argument shift can be used to change the name of the relevant column. Other keyword arguments are passed on to blocking_analysis. Returns a BlockingResult.\n\nSee also growth_estimator, projected_energy.\n\n\n\n\n\n","category":"method"},{"location":"statstools.html#Rimu.StatsTools.w_exp-Tuple{Union{SubArray{<:Any, 1, <:Vector, <:Any, true}, Vector}, Any, Any}","page":"StatsTools","title":"Rimu.StatsTools.w_exp","text":"w_exp(shift, h, time_step; E_r = mean(shift), skip = 0)\n\nCompute the weights for reweighting over h time steps with reference energy E_r from the exponential formula\n\nw_h^(n) = prod_j=1^h exp-dτ(S^(q+n-j)-E_r) \n\nwhere q = skip and dτ is the time_step.\n\nSee also w_lin, growth_estimator, mixed_estimator.\n\n\n\n\n\n","category":"method"},{"location":"statstools.html#Rimu.StatsTools.w_lin-Tuple{Union{SubArray{<:Any, 1, <:Vector, <:Any, true}, Vector}, Any, Any}","page":"StatsTools","title":"Rimu.StatsTools.w_lin","text":"w_lin(shift, h, time_step; E_r = mean(shift), skip = 0)\n\nCompute the weights for reweighting over h time steps with reference energy E_r from the linearised formula\n\nw_h^(n) = prod_j=1^h 1-dτ(S^(q+n-j)-E_r) \n\nwhere q = skip and dτ is the time_step.\n\nSee also w_exp, growth_estimator, mixed_estimator.\n\n\n\n\n\n","category":"method"},{"location":"statstools.html#Rimu.StatsTools.replica_fidelity-Tuple{Any}","page":"StatsTools","title":"Rimu.StatsTools.replica_fidelity","text":"replica_fidelity(df::DataFrame; p_field = :hproj, skip = 0)\nreplica_fidelity(sim::PMCSimulation; kwargs...)\n\nCompute the fidelity of the average coefficient vector and the projector defined in p_field from the PMCSimulation or DataFrame returned by solve, using replicas _1 and _2. Calls ratio_of_means to perform a blocking analysis on a ratio of the means of separate time series and returns a RatioBlockingResult. The first skip steps in the time series are skipped.\n\nThe fidelity of states |ψ⟩ and |ϕ⟩ is defined as\n\nF(ψϕ) = fracψϕ^2ψψϕϕ \n\nSpecifically, replica_fidelity computes\n\nF(mathbfvmathbfc) =\n    frac(mathbfc_1mathbfv)(mathbfvmathbfc_1)\n    mathbfc_1mathbfc_1 \n\nwhere v is the projector specified by p_field, which is assumed to be normalised to unity with the two-norm (i.e. v⋅v == 1), and mathbfc_1 and mathbfc_2 are two replica coefficient vectors.\n\n\n\n\n\n","category":"method"},{"location":"statstools.html#Rimu.StatsTools.variational_energy_estimator-Tuple{Any, Any}","page":"StatsTools","title":"Rimu.StatsTools.variational_energy_estimator","text":"variational_energy_estimator(shifts, overlaps; kwargs...)\nvariational_energy_estimator(df::DataFrame; max_replicas=:all, kwargs...)\nvariational_energy_estimator(sim::PMCSimulation; kwargs...)\n-> r::RatioBlockingResult\n\nCompute the variational energy estimator from the replica time series of the shifts and coefficient vector overlaps by blocking analysis. The keyword argument max_replicas can be used to constrain the number of replicas processed to be smaller than all available in df. Other keyword arguments are passed on to ratio_of_means(). Returns a RatioBlockingResult.\n\nAn estimator for the variational energy\n\nfracmathbfc^ mathbfHmathbfcmathbfc^mathbfc\n\nis calculated from\n\nE_v  =  fracsum_ab^R overline(S_a+S_b) mathbfc_a^ mathbfc_b\n               2sum_ab^R overlinemathbfc_a^ mathbfc_b \n\nwhere the sum goes over distinct pairs out of the R replicas. See arXiv:2103.07800.\n\nThe DataFrame and PMCSimulation versions can extract the relevant information from the result of solve. Set up the ProjectorMonteCarloProblem with the keyword argument replica_strategy = AllOverlaps(R) and R ≥ 2. If passing shifts and overlaps, the data has to be arranged in the correct order (as provided in the DataFrame version).\n\nSee AllOverlaps.\n\n\n\n\n\n","category":"method"},{"location":"statstools.html#Additional-docstrings","page":"StatsTools","title":"Additional docstrings","text":"","category":"section"},{"location":"statstools.html","page":"StatsTools","title":"StatsTools","text":"Modules = [StatsTools]\nPages = [\"StatsTools.jl\", \"blocking.jl\", \"ratio_of_means.jl\", \"convenience.jl\",\n  \"variances.jl\", \"growth_witness.jl\", \"reweighting.jl\"\n]\nPublic = false","category":"page"},{"location":"statstools.html#MonteCarloMeasurements.Particles-Tuple{Rimu.StatsTools.BlockingResult{<:Real}}","page":"StatsTools","title":"MonteCarloMeasurements.Particles","text":"MonteCarloMeasurements.Particles(r::BlockingResult; mc_samples = 2000)\nMonteCarloMeasurements.±(r::BlockingResult)\n\nConvert a BlockingResult into a Particles object for nonlinear error propagation with MonteCarloMeasurements.\n\n\n\n\n\n","category":"method"},{"location":"statstools.html#Rimu.StatsTools.BlockingResult","page":"StatsTools","title":"Rimu.StatsTools.BlockingResult","text":"BlockingResult(mean, err, err_err, p_cov, k, blocks)\n\nResult of blocking_analysis.\n\nFields:\n\nmean: sample mean\nerr: standard error (estimated standard deviation of the mean)\nerr_err: estimated uncertainty of err\np_cov: estimated pseudo covariance of mean, relevant for complex time series\nk::Int: k-1 blocking steps were used to uncorrelate time series\nblocks::Int: number of uncorrelated values after blocking\n\nHas methods for NamedTuple, val_and_errs, val, errs, mean_and_se, Measurements.:±, MonteCarloMeasurements.Particles, and Statistics.cov for Complex data.\n\nExample:\n\njulia> blocking_analysis(smoothen(randn(2^10), 2^5))\nBlockingResult{Float64}\n  mean = -0.026 ± 0.029\n  with uncertainty of ± 0.003638545517264226\n  from 32 blocks after 5 transformations (k = 6).\n\n\n\n\n\n","category":"type"},{"location":"statstools.html#Measurements.measurement-Tuple{Rimu.StatsTools.BlockingResult{<:Real}}","page":"StatsTools","title":"Measurements.measurement","text":"measurement(r::BlockingResult)\nMeasurements.±(r::BlockingResult)\n\nConvert a BlockingResult into a Measurement for linear error propagation with Measurements.\n\nLimitation: Does not account for covariance in complex BlockingResult. Consider using MonteCarloMeasurements.Particles(r)!\n\n\n\n\n\n","category":"method"},{"location":"statstools.html#Rimu.StatsTools.blocker-Union{Tuple{AbstractVector{T}}, Tuple{T}} where T","page":"StatsTools","title":"Rimu.StatsTools.blocker","text":"blocker(v::Vector) -> new_v::Vector\n\nReblock the data by successively taking the mean of two adjacent data points to form a new vector with a half of the length(v). The last data point will be discarded if length(v) is odd.\n\n\n\n\n\n","category":"method"},{"location":"statstools.html#Rimu.StatsTools.blocks_with_m-Tuple{Any}","page":"StatsTools","title":"Rimu.StatsTools.blocks_with_m","text":"blocks_with_m(v; corrected = true) -> (;blocks, mean, std_err, std_err_err, p_cov, mj)\n\nPerform the blocking algorithm from Flyvberg and Peterson JCP (1989). Returns named tuple with the results from all blocking steps. See mtest().\n\n\n\n\n\n","category":"method"},{"location":"statstools.html#Rimu.StatsTools.mtest-Tuple{AbstractVector}","page":"StatsTools","title":"Rimu.StatsTools.mtest","text":"mtest(mj::AbstractVector; α = 0.01) -> k\nmtest(table::NamedTuple; α = 0.01) -> k\n\nHypothesis test for decorrelation of a time series after blocking transformations with significance level 1-α after Jonson PRE (2018). mj or table.mj is expected to be a vector with relevant M_j values from a blocking analysis as obtained from blocks_with_m(). Returns the row number k where the M-test is passed. If the M-test has failed mtest() returns the value -1.\n\n\n\n\n\n","category":"method"},{"location":"statstools.html#Rimu.StatsTools.RatioBlockingResult","page":"StatsTools","title":"Rimu.StatsTools.RatioBlockingResult","text":"RatioBlockingResult(ratio, f, σ_f, δ_y, k, success)\n\nResult of ratio_of_means().\n\nFields:\n\nratio::P: ratio with uncertainties propagated by MonteCarloMeasurements\nf::T: ratio of means\nσ_f::T: std from linear propagation\nδ_y::T: coefficient of variation for denominator (≤ 0.1 for normal approx)\nk::Int: k-1 blocking steps were used to uncorrelate time series\nblocks::Int: number of data values after blocking\nsuccess::Bool: false if any of the blocking steps failed\n\nHas methods for NamedTuple, val_and_errs, val, errs.\n\nNote: to compute statistics on the RatioBlockingResult, use functions pmedian, pquantile, pmiddle, piterate, pextrema, pminimum, pmaximum, pmean, and pcov.\n\n\n\n\n\n","category":"type"},{"location":"statstools.html#Rimu.StatsTools.particles-Tuple{Any, Any, Any}","page":"StatsTools","title":"Rimu.StatsTools.particles","text":"particles(samples, μ, σ)\nparticles(samples, μ::AbstractVector, Σ::AbstractMatrix)\n\nReturn Particles object from MonteCarloMeasurements with single- or multivariate normal distribution. Zero variance parameters are supported.\n\n\n\n\n\n","category":"method"},{"location":"statstools.html#Rimu.StatsTools.particles-Tuple{Any, Distributions.Distribution}","page":"StatsTools","title":"Rimu.StatsTools.particles","text":"particles(samples, d)\nparticles(::Nothing, d)\nparticles(::Val{T}, d) where T\n\nReturn Particles object from  MonteCarloMeasurements using  a type-stable constructor if possible. Pass nothing for the default number of particles or Val(1_000) for using 1000 particles in a type-stable manner. If d is a Particles object it is passed through without re-sampling.\n\n\n\n\n\n","category":"method"},{"location":"statstools.html#Rimu.StatsTools.ratio_estimators-Tuple{AbstractVector{<:Real}, AbstractVector{<:Real}}","page":"StatsTools","title":"Rimu.StatsTools.ratio_estimators","text":"ratio_estimators(x, y, [k]; corrected=true, mc_samples=10_000) -> (; r, f, σ_f, δ_y, n)\n\nEstimators for the ratio of means mean(x)/mean(y). If k is given, k-1 blocking steps are performed to remove internal correlations in the time series x and y. Otherwise these are assumed to be free of internal correlations. Correlations between x and y may be present and are taken into account.\n\nReturn values:\n\nr::Particles is the Monte Carlo sampled ratio estimator, see Particles\nf = mean(x)/mean(y)\nσ_f standard deviation of f from linear error propagation (normal approximation)\nδ_y = std(y)/mean(y) coefficient of variation; < 0.1 for normal approximation to work\nn: number of uncorrelated data used for uncertainty estimation\n\n\n\n\n\n","category":"method"},{"location":"statstools.html#Rimu.StatsTools.x_by_y_linear-NTuple{5, Any}","page":"StatsTools","title":"Rimu.StatsTools.x_by_y_linear","text":"x_by_y_linear(μ_x,μ_y,σ_x,σ_y,ρ) -> f, σ_f\n\nLinear error propagation for ratio f = x/y assuming x and y are correlated normal random variables and assuming the ratio can be approximated as a normal distribution. See wikipedia and Díaz-Francés, Rubio (2013).\n\nσ_f = sqrtfracσ_xμ_y^2 + fracμ_x σ_yμ_y^2^2 - frac2 ρ μ_xμ_y^3\n\n\n\n\n\n","category":"method"},{"location":"statstools.html#Core.NamedTuple-Tuple{Rimu.StatsTools.BlockingResult}","page":"StatsTools","title":"Core.NamedTuple","text":"NamedTuple(x::BlockingResult; n=1, p=nothing, name=:val)\nNamedTuple(x::RatioBlockingResult; n=1, p=nothing, name=:val)\n\nReturn a named tuple with value and error bars (see val_and_errs) as well as additional numerical fields relevant for x.\n\nExample:\n\njulia> results = [blocking_analysis(i:0.1:2i+20) for i in 1:3]; # mock results\n\njulia> df = NamedTuple.(results, name=:res)|>DataFrame\n3×7 DataFrame\n Row │ res      res_l    res_u    res_err_err  res_p_cov  res_k  res_blocks\n     │ Float64  Float64  Float64  Float64      Float64    Int64  Int64\n─────┼──────────────────────────────────────────────────────────────────────\n   1 │    11.5  1.7282   1.7282      0.352767    2.98667      5          13\n   2 │    13.0  1.7282   1.7282      0.352767    2.98667      5          13\n   3 │    14.5  1.78885  1.78885     0.350823    3.2          5          14\n\njulia> rbs = ratio_of_means(1 .+sin.(1:0.1:11),2 .+sin.(2:0.1:12)); # more mock results\n\njulia> [NamedTuple(rbs),]|>DataFrame\n1×9 DataFrame\n Row │ val       val_l      val_u      val_f     val_σ_f    val_δ_y    val_k  val_blocks  val_success\n     │ Float64   Float64    Float64    Float64   Float64    Float64    Int64  Int64       Bool\n─────┼────────────────────────────────────────────────────────────────────────────────────────────────\n   1 │ 0.581549  0.0925669  0.0812292  0.560532  0.0875548  0.0875548      4          12         true\n\n\nSee val_and_errs, val, errs, BlockingResult, RatioBlockingResult.\n\n\n\n\n\n","category":"method"},{"location":"statstools.html#Rimu.StatsTools.autocovariance-Tuple{AbstractVector, Int64}","page":"StatsTools","title":"Rimu.StatsTools.autocovariance","text":"autocovariance(v::Vector,h::Int; corrected::Bool=true)\n\nhatgamma(h) =frac1nsum_t=1^n-h(v_t+h-barv)(v_t-barv)^* Calculate the autocovariance of dataset v with a delay h. If corrected is true (the default) then the sum is scaled with n-h, whereas the sum is scaled with n if corrected is false where n = length(v).\n\n\n\n\n\n","category":"method"},{"location":"statstools.html#Rimu.StatsTools.pseudo_cov-Tuple{Any, Any}","page":"StatsTools","title":"Rimu.StatsTools.pseudo_cov","text":"pseudo_cov(x, y; xmean = mean(x), ymean = mean(y), corrected = true)\n\nCompute the pseudo covariance between collections x and y returning a scalar:\n\nfrac1nsum_i=1^n (x_i - barx)(y_i - bary)\n\nOptionally, precomputed means can be passed as keyword arguments. pseudo_cov(x,y) is functionally equivalent to Statistics.cov(x, conj(y); corrected = false) but it is found to be significantly faster and avoids allocations.\n\n\n\n\n\n","category":"method"},{"location":"statstools.html#Rimu.StatsTools.determine_constant_time_step-Tuple{Any}","page":"StatsTools","title":"Rimu.StatsTools.determine_constant_time_step","text":"determine_constant_time_step(df) -> time_step\n\nGiven a DataFrame df, determine the time step that was used to compute it. Throw an error if time step is not constant.\n\n\n\n\n\n","category":"method"},{"location":"statstools.html#Index","page":"StatsTools","title":"Index","text":"","category":"section"},{"location":"statstools.html","page":"StatsTools","title":"StatsTools","text":"Pages   = [\"statstools.md\"]","category":"page"},{"location":"interfaces.html#Module-Interfaces","page":"Interfaces","title":"Module Interfaces","text":"","category":"section"},{"location":"interfaces.html","page":"Interfaces","title":"Interfaces","text":"Interfaces","category":"page"},{"location":"interfaces.html#Rimu.Interfaces","page":"Interfaces","title":"Rimu.Interfaces","text":"module Interfaces\n\nThis module contains interfaces that can be used to extend and modify the algorithms and behaviours of Rimu.\n\nInterfaces\n\nFollow the links for the definitions of the interfaces!\n\nAbstractHamiltonian for defining Hamiltonians\nAbstractOperator for defining observable operators\nAbstractDVec for defining data structures for Rimu as in DictVectors\nStochasticStyle for controlling the stochastic algorithms used by ProjectorMonteCarloProblem as implemented in StochasticStyles\n\nAdditional exports\n\nInterface functions forAbstractHamiltonians:\n\ndiagonal_element\nnum_offdiagonals\nget_offdiagonal\noffdiagonals.\nrandom_offdiagonal\nstarting_address\nLOStructure\nallows_address_type\n\nworking with  AbstractDVecs and StochasticStyle\n\ndeposit!\ndefault_style\nCompressionStrategy\nThe interface from VectorInterface.jl.\n\nFunctions Rimu.jl uses to do FCIQMC:\n\napply_column!\napply_operator!\nstep_stats\n\n\n\n\n\n","category":"module"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"EditURL = \"../../../scripts/HO-example.jl\"","category":"page"},{"location":"generated/HO-example.html#Example-5:-Degenerate-perturbation-theory-in-a-harmonic-oscillator-basis","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Example 5: Degenerate perturbation theory in a harmonic oscillator basis","text":"","category":"section"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"Rimu can also handle non-lattice systems. This example looks at weakly-interacting bosonic particles in a harmonic oscillator external potential using a basis of (Cartesian product) single-particle eigenstates of the harmonic oscillator potential. Blocks of degenerate non-interacting states are coupled by a contact interaction in first order degenerate perturbation theory. This example shows how to generate these blocks and find the energy and angular momentum eigenstates.","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"A runnable script for this example is located here. Run it with julia HO-example.jl.","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"First, load all needed packages.","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"using Rimu\nusing DataFrames\nusing LinearAlgebra","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"Define the system size for N=2 particles in a 2D harmonic oscillator allowing M=4 levels in each dimension, including the groundstate.","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"N = 2\nM = 4;","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"Use a tuple S to define the range of harmonic oscillator states in a Cartesian basis, in this isotropic case n_xn_y=01ldotsM-1.","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"S = (M, M);","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"In Rimu the N-particle states are still stored as Fock states.","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"P = prod(S)\naddr = BoseFS(P, M => N)","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"BoseFS{2,16}(0, 0, 0, 2, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0)","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"Here, the numbering of the modes folds in the two spatial dimensions.  Use the utility function fock_to_cart to convert a Fock address to human-readable Cartesian quantum numbers for inspection.","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"fock_to_cart(addr, S)","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"2-element StaticArraysCore.SVector{2, Tuple{Int64, Int64}} with indices SOneTo(2):\n (3, 0)\n (3, 0)","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"The output shows that all N particles are in single-particle state n_x=M-1 n_y=0.","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"The harmonic oscillator Hamiltonian HOCartesianContactInteractions handles contact interactions with first-order perturbation theory, so the matrix representation will block according to the non-interacting energy of the basis states. The first task is to find all blocks of basis states with the same energy. The strength of the interaction is not relevant at this point, just that it is non-zero. Use an arbitrary N-particle starting address to build the Hamiltonian.","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"H = HOCartesianContactInteractions(BoseFS(P, 1 => N); S);","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"Then, use the utility function get_all_blocks to find all blocks. The blocks are found by looping over all possible states with N particles in Cartesian states defined by S. Note that this will only work for total energy up to the maximum accessible by a single particle. The N-particle groundstate energy for a 2D harmonic oscillator is E_0 = N hbar omega and the maximum single-particle energy is E = (E_0 + M - 1) hbar omega.","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"block_df = get_all_blocks(H; max_energy = N + M - 1)","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"<div><div style = \"float: left;\"><span>7×6 DataFrame</span></div><div style = \"clear: both;\"></div></div><div class = \"data-frame\" style = \"overflow-x: scroll;\"><table class = \"data-frame\" style = \"margin-bottom: 6px;\"><thead><tr class = \"header\"><th class = \"rowNumber\" style = \"font-weight: bold; text-align: right;\">Row</th><th style = \"text-align: left;\">block_id</th><th style = \"text-align: left;\">block_E0</th><th style = \"text-align: left;\">block_size</th><th style = \"text-align: left;\">addr</th><th style = \"text-align: left;\">indices</th><th style = \"text-align: left;\">t_basis</th></tr><tr class = \"subheader headerLastRow\"><th class = \"rowNumber\" style = \"font-weight: bold; text-align: right;\"></th><th title = \"Int64\" style = \"text-align: left;\">Int64</th><th title = \"Float64\" style = \"text-align: left;\">Float64</th><th title = \"Int64\" style = \"text-align: left;\">Int64</th><th title = \"BoseFS{2, 16, BitString{17, 1, UInt32}}\" style = \"text-align: left;\">BoseFS…</th><th title = \"Tuple{Int64, Int64}\" style = \"text-align: left;\">Tuple…</th><th title = \"Float64\" style = \"text-align: left;\">Float64</th></tr></thead><tbody><tr><td class = \"rowNumber\" style = \"font-weight: bold; text-align: right;\">1</td><td style = \"text-align: right;\">1</td><td style = \"text-align: right;\">2.0</td><td style = \"text-align: right;\">1</td><td style = \"text-align: left;\">fs&quot;|2 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0⟩&quot;</td><td style = \"text-align: left;\">(1, 1)</td><td style = \"text-align: right;\">0.542873</td></tr><tr><td class = \"rowNumber\" style = \"font-weight: bold; text-align: right;\">2</td><td style = \"text-align: right;\">2</td><td style = \"text-align: right;\">3.0</td><td style = \"text-align: right;\">1</td><td style = \"text-align: left;\">fs&quot;|1 1 0 0 0 0 0 0 0 0 0 0 0 0 0 0⟩&quot;</td><td style = \"text-align: left;\">(2, 1)</td><td style = \"text-align: right;\">1.5238e-5</td></tr><tr><td class = \"rowNumber\" style = \"font-weight: bold; text-align: right;\">3</td><td style = \"text-align: right;\">3</td><td style = \"text-align: right;\">4.0</td><td style = \"text-align: right;\">4</td><td style = \"text-align: left;\">fs&quot;|0 2 0 0 0 0 0 0 0 0 0 0 0 0 0 0⟩&quot;</td><td style = \"text-align: left;\">(2, 2)</td><td style = \"text-align: right;\">1.7873e-5</td></tr><tr><td class = \"rowNumber\" style = \"font-weight: bold; text-align: right;\">4</td><td style = \"text-align: right;\">4</td><td style = \"text-align: right;\">5.0</td><td style = \"text-align: right;\">5</td><td style = \"text-align: left;\">fs&quot;|0 1 1 0 0 0 0 0 0 0 0 0 0 0 0 0⟩&quot;</td><td style = \"text-align: left;\">(3, 2)</td><td style = \"text-align: right;\">1.053e-5</td></tr><tr><td class = \"rowNumber\" style = \"font-weight: bold; text-align: right;\">5</td><td style = \"text-align: right;\">5</td><td style = \"text-align: right;\">3.0</td><td style = \"text-align: right;\">1</td><td style = \"text-align: left;\">fs&quot;|1 0 0 0 1 0 0 0 0 0 0 0 0 0 0 0⟩&quot;</td><td style = \"text-align: left;\">(5, 1)</td><td style = \"text-align: right;\">1.363e-6</td></tr><tr><td class = \"rowNumber\" style = \"font-weight: bold; text-align: right;\">6</td><td style = \"text-align: right;\">6</td><td style = \"text-align: right;\">4.0</td><td style = \"text-align: right;\">2</td><td style = \"text-align: left;\">fs&quot;|0 1 0 0 1 0 0 0 0 0 0 0 0 0 0 0⟩&quot;</td><td style = \"text-align: left;\">(5, 2)</td><td style = \"text-align: right;\">2.815e-6</td></tr><tr><td class = \"rowNumber\" style = \"font-weight: bold; text-align: right;\">7</td><td style = \"text-align: right;\">7</td><td style = \"text-align: right;\">5.0</td><td style = \"text-align: right;\">5</td><td style = \"text-align: left;\">fs&quot;|0 0 1 0 1 0 0 0 0 0 0 0 0 0 0 0⟩&quot;</td><td style = \"text-align: left;\">(5, 3)</td><td style = \"text-align: right;\">1.0219e-5</td></tr></tbody></table></div>","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"This outputs a list of blocks in H indexed by the noninteracting energy of all states in the block, and a single address that can be used to rebuild the block for further analysis.","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"addr1 = block_df[7,:addr]\nE = block_df[7,:block_E0]","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"5.0","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"First, notice that all basis states have the same energy, defined by the block.","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"basis1 = build_basis(H, addr1)\nmap(b -> Hamiltonians.noninteracting_energy(H, b), basis1)","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"5-element Vector{Float64}:\n 5.0\n 5.0\n 5.0\n 5.0\n 5.0","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"There are two blocks at each energy level (except the groundstate), which are different due to parity conservation, which is the only other symmetry in the Cartesian harmonic oscillator. The basis of this other block is different,","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"addr2 = block_df[4,:addr]\nbasis2 = build_basis(H, addr2);\nbasis1 ≠ basis2","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"true","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"but its basis elements have the same energy.","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"map(b -> Hamiltonians.noninteracting_energy(H, b), basis2)","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"5-element Vector{Float64}:\n 5.0\n 5.0\n 5.0\n 5.0\n 5.0","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"However, since this system is an isotropic harmonic oscillator, it is possible to build simultaneous eigenstates of the angular momentum operator L_z, implemented with AxialAngularMomentumHO.","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"Lz = AxialAngularMomentumHO(S)","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"AxialAngularMomentumHO((4, 4); z_dim = 3, addr = BoseFS{0,16}(0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0))","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"L_z does not conserve parity, so both blocks are required. First combine the bases of each block and convert to DVecs.","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"dvs = map(b -> DVec(b => 1.0), vcat(basis1, basis2));","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"and then compute overlaps for the matrix elements of L_z.","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"Lz_mat = [dot(v, Lz, w) for v in dvs, w in dvs]","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"10×10 Matrix{ComplexF64}:\n 0.0+0.0im      0.0+0.0im      0.0+0.0im      0.0+0.0im      0.0+0.0im      0.0+1.0im      0.0+0.0im      0.0-1.41421im  0.0+0.0im      0.0+0.0im\n 0.0+0.0im      0.0+0.0im      0.0+0.0im      0.0+0.0im      0.0+0.0im      0.0+1.41421im  0.0+0.0im      0.0-1.0im      0.0-1.41421im  0.0+0.0im\n 0.0+0.0im      0.0+0.0im      0.0+0.0im      0.0+0.0im      0.0+0.0im      0.0+0.0im      0.0+1.73205im  0.0+0.0im      0.0+0.0im      0.0-2.0im\n 0.0+0.0im      0.0+0.0im      0.0+0.0im      0.0+0.0im      0.0+0.0im      0.0+0.0im      0.0+0.0im      0.0+1.41421im  0.0+1.0im      0.0+0.0im\n 0.0+0.0im      0.0+0.0im      0.0+0.0im      0.0+0.0im      0.0+0.0im      0.0+0.0im      0.0+0.0im      0.0+0.0im      0.0+0.0im      0.0+1.73205im\n 0.0-1.0im      0.0-1.41421im  0.0+0.0im      0.0+0.0im      0.0+0.0im      0.0+0.0im      0.0+0.0im      0.0+0.0im      0.0+0.0im      0.0+0.0im\n 0.0+0.0im      0.0+0.0im      0.0-1.73205im  0.0+0.0im      0.0+0.0im      0.0+0.0im      0.0+0.0im      0.0+0.0im      0.0+0.0im      0.0+0.0im\n 0.0+1.41421im  0.0+1.0im      0.0+0.0im      0.0-1.41421im  0.0+0.0im      0.0+0.0im      0.0+0.0im      0.0+0.0im      0.0+0.0im      0.0+0.0im\n 0.0+0.0im      0.0+1.41421im  0.0+0.0im      0.0-1.0im      0.0+0.0im      0.0+0.0im      0.0+0.0im      0.0+0.0im      0.0+0.0im      0.0+0.0im\n 0.0+0.0im      0.0+0.0im      0.0+2.0im      0.0+0.0im      0.0-1.73205im  0.0+0.0im      0.0+0.0im      0.0+0.0im      0.0+0.0im      0.0+0.0im","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"By diagonalising this matrix the eigenstate have energy E and well-defined angular momentum.","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"Diagonalise this matrix to obtain the eigenstates of L_z. The eigenvectors provide the linear combinations of basis states with well-defined angular momentum, within the subspace of energy E.","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"Lz_vals, Lz_vecs = eigen(Lz_mat)","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"Eigen{ComplexF64, Float64, Matrix{ComplexF64}, Vector{Float64}}\nvalues:\n10-element Vector{Float64}:\n -2.9999999999999956\n -2.999999999999991\n -0.9999999999999991\n -0.9999999999999982\n -0.9999999999999973\n  1.0000000000000002\n  1.0000000000000027\n  1.0000000000000027\n  3.0\n  3.0000000000000004\nvectors:\n10×10 Matrix{ComplexF64}:\n       0.0+0.0im       -5.55112e-17-0.353553im         0.534676-0.217841im      2.77556e-17-0.204124im             0.0+0.0im           0.534676+0.217841im      2.77556e-17+0.204124im             0.0+0.0im       -5.55112e-17+0.353553im           0.0+0.0im\n       0.0+0.0im        5.55112e-17-0.5im             -0.378073+0.154037im              0.0-0.288675im             0.0+0.0im          -0.378073-0.154037im     -5.55112e-17+0.288675im             0.0+0.0im                0.0+0.5im                0.0+0.0im\n       0.0+0.612372im           0.0+0.0im          -5.55112e-17+0.0im           -1.2326e-32+2.77556e-17im          0.0+0.353553im           0.0+0.0im                   0.0+2.77556e-17im          0.0+0.353553im           0.0+0.0im                0.0+0.612372im\n       0.0+0.0im                0.0+0.353553im      5.55112e-17+6.93889e-17im           0.0-0.612372im             0.0+0.0im        5.55112e-17-1.38778e-16im           0.0+0.612372im             0.0+0.0im                0.0-0.353553im           0.0+0.0im\n       0.0-0.353553im    1.2326e-32+1.11022e-16im   5.55112e-17-2.77556e-17im  -2.46519e-32-2.77556e-17im          0.0+0.612372im  -1.11022e-16-2.77556e-17im   4.93038e-32-2.77556e-17im          0.0+0.612372im   -1.2326e-32+8.32667e-17im        0.0-0.353553im\n       0.0+0.0im           0.353553+0.0im                   0.0+0.0im              0.612372+0.0im                  0.0+0.0im                0.0+0.0im              0.612372+0.0im                  0.0+0.0im           0.353553+0.0im                0.0+0.0im\n -0.353553+0.0im                0.0+0.0im                   0.0+0.0im                   0.0+0.0im            -0.612372+0.0im                0.0+0.0im                   0.0+0.0im             0.612372+0.0im                0.0+0.0im           0.353553+0.0im\n       0.0+0.0im               -0.5+7.02973e-17im     -0.154037-0.378073im         0.288675-1.95105e-16im          0.0+0.0im          -0.154037+0.378073im         0.288675+2.29062e-16im          0.0+0.0im               -0.5-7.48398e-17im        0.0+0.0im\n       0.0+0.0im          -0.353553+8.84171e-17im      0.217841+0.534676im         0.204124-1.1389e-16im   8.32667e-17+0.0im           0.217841-0.534676im         0.204124+2.4427e-16im   8.32667e-17+0.0im          -0.353553-8.31718e-17im        0.0+0.0im\n  0.612372+0.0im                0.0+0.0im                   0.0+0.0im                   0.0+0.0im            -0.353553-0.0im                0.0+0.0im                   0.0+0.0im             0.353553+0.0im                0.0+0.0im          -0.612372-0.0im","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"Finally, consider the effect of interactions by looking at how states in a single block are perturbed. Only the energy shift due to the interaction is relevant so now rebuild the Hamiltonian without the non-interacting energy.","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"Hint = HOCartesianContactInteractions(addr1; S, interaction_only = true)\nΔE = eigvals(Matrix(Hint, addr1))","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"5-element Vector{Float64}:\n -1.6810327175633306e-17\n  3.469966302164114e-17\n  0.15915494309189535\n  0.1591549430918954\n  0.1591549430918954","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"Two eigenstates in this block are unaffected by the interaction and three have a non-zero energy shift.","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"The default strength of the interaction is g = 1.0. Other interactions strengths can be obtained by using keyword argument g in HOCartesianContactInteractions or by rescaling ΔE since the interactions are handled with first-order perturbation theory.","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"Rimu also contains HOCartesianEnergyConservedPerDim which is a similar Hamiltonian but with the stricter condition that the contact interaction only connects states that have the same total energy in each dimension, rather than conserving the overall total energy. Both Hamiltonians can handle anisotropic systems by passing a tuple S whose elements are not all the same. This will alter which states are connected by the interaction, but assumes that the harmonic trapping frequencies in each dimension are commensurate.","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"This page was generated using Literate.jl.","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"EditURL = \"../../../scripts/exact-example.jl\"","category":"page"},{"location":"generated/exact-example.html#Example-4:-Exact-diagonalization","page":"Exact diagonalization","title":"Example 4: Exact diagonalization","text":"","category":"section"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"When working with smaller systems or when multiple eigenvalues of a system are required, one can use an exact diagonalization method. There are a few ways to go about this, each with its pros and cons. The purpose of this tutorial is to show off the methods as well as provide a few tips regarding them.","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"A runnable script for this example is located here. Run it with julia exact-example.jl.","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"We start by loading Rimu.","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"using Rimu","category":"page"},{"location":"generated/exact-example.html#Introduction","page":"Exact diagonalization","title":"Introduction","text":"","category":"section"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"We will look at a bosonic system of 4 particles in 5 sites, formulated in momentum space. Let's start by building the Hamiltonian. To create a Fock state where all particles have zero momentum, we put all the particles in the mode at the centre of the address.","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"M = 5\nN = 4\nadd = BoseFS(M, cld(M, 2) => N)\nham = HubbardMom1D(add)","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"HubbardMom1D(fs\"|0 0 4 0 0⟩\"; u=1.0, t=1.0)","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"Before performing exact diagonalization, it is a good idea to check the dimension of the Hamiltonian.","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"dimension(ham)","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"70","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"Keep in mind that this is an estimate of the number of Fock states the Hamiltonian can act on, not the actual matrix size - the matrix size can sometimes be smaller. It can still be used as a guide to decide whether a Hamiltonian is amenable to exact diagonalization and to determine which algorithm would be best suited to diagonalising it.","category":"page"},{"location":"generated/exact-example.html#The-BasisSetRepresentation","page":"Exact diagonalization","title":"The BasisSetRepresentation","text":"","category":"section"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"As we'll see later, there are two ways to construct the matrices from Hamiltonians directly, but they both use BasisSetRepresentation under the hood. The BasisSetRepresentation, when called with a Hamiltonian and optionally a starting address, constructs the sparse matrix of the system, as well as its basis. The starting address defaults to the one that was used to initialize the Hamiltonian. BasisSetRepresentation only returns the part of the matrix that is accessible from this starting address through non-zero offdiagonal elements.","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"bsr = BasisSetRepresentation(ham);","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"To access the matrix or basis, access the sparse_matrix and basis fields, respectively.","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"bsr.sparse_matrix","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"14×14 SparseArrays.SparseMatrixCSC{Float64, Int64} with 104 stored entries:\n -6.8       0.69282   0.69282    ⋅         ⋅         ⋅         ⋅          ⋅         ⋅         ⋅         ⋅         ⋅         ⋅         ⋅ \n  0.69282  -3.03607   0.4       0.8       0.4       0.8       0.4        0.565685  0.282843   ⋅         ⋅         ⋅         ⋅         ⋅ \n  0.69282   0.4       1.43607   0.4       0.8       0.4       0.8         ⋅        0.282843  0.565685   ⋅         ⋅         ⋅         ⋅ \n   ⋅        0.8       0.4       0.581966  0.4        ⋅        0.4        0.282843  0.565685   ⋅        0.69282   0.69282    ⋅         ⋅ \n   ⋅        0.4       0.8       0.4       2.81803   0.4        ⋅          ⋅        0.565685  0.282843  0.69282    ⋅        0.69282    ⋅ \n   ⋅        0.8       0.4        ⋅        0.4       0.581966  0.4        0.282843  0.565685   ⋅         ⋅         ⋅        0.69282   0.69282\n   ⋅        0.4       0.8       0.4        ⋅        0.4       2.81803     ⋅        0.565685  0.282843   ⋅        0.69282    ⋅        0.69282\n   ⋅        0.565685   ⋅        0.282843   ⋅        0.282843   ⋅        -0.472136  0.8        ⋅        0.489898   ⋅         ⋅        0.489898\n   ⋅        0.282843  0.282843  0.565685  0.565685  0.565685  0.565685   0.8       4.4       0.8       0.489898  0.489898  0.489898  0.489898\n   ⋅         ⋅        0.565685   ⋅        0.282843   ⋅        0.282843    ⋅        0.8       8.47214    ⋅        0.489898  0.489898   ⋅ \n   ⋅         ⋅         ⋅        0.69282   0.69282    ⋅         ⋅         0.489898  0.489898   ⋅        1.56393    ⋅         ⋅         ⋅ \n   ⋅         ⋅         ⋅        0.69282    ⋅         ⋅        0.69282     ⋅        0.489898  0.489898   ⋅        6.03607    ⋅         ⋅ \n   ⋅         ⋅         ⋅         ⋅        0.69282   0.69282    ⋅          ⋅        0.489898  0.489898   ⋅         ⋅        6.03607    ⋅ \n   ⋅         ⋅         ⋅         ⋅         ⋅        0.69282   0.69282    0.489898  0.489898   ⋅         ⋅         ⋅         ⋅        1.56393","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"bsr.basis","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"14-element Vector{BoseFS{4, 5, BitString{8, 1, UInt8}}}:\n fs\"|0 0 4 0 0⟩\"\n fs\"|0 1 2 1 0⟩\"\n fs\"|1 0 2 0 1⟩\"\n fs\"|1 0 1 2 0⟩\"\n fs\"|0 0 1 1 2⟩\"\n fs\"|0 2 1 0 1⟩\"\n fs\"|2 1 1 0 0⟩\"\n fs\"|0 2 0 2 0⟩\"\n fs\"|1 1 0 1 1⟩\"\n fs\"|2 0 0 0 2⟩\"\n fs\"|0 0 0 3 1⟩\"\n fs\"|3 0 0 1 0⟩\"\n fs\"|0 1 0 0 3⟩\"\n fs\"|1 3 0 0 0⟩\"","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"When the basis is not needed, we can use Matrix or sparse directly.","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"Matrix(ham)","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"14×14 Matrix{Float64}:\n -6.8       0.69282   0.69282   0.0       0.0       0.0       0.0        0.0       0.0       0.0       0.0       0.0       0.0       0.0\n  0.69282  -3.03607   0.4       0.8       0.4       0.8       0.4        0.565685  0.282843  0.0       0.0       0.0       0.0       0.0\n  0.69282   0.4       1.43607   0.4       0.8       0.4       0.8        0.0       0.282843  0.565685  0.0       0.0       0.0       0.0\n  0.0       0.8       0.4       0.581966  0.4       0.0       0.4        0.282843  0.565685  0.0       0.69282   0.69282   0.0       0.0\n  0.0       0.4       0.8       0.4       2.81803   0.4       0.0        0.0       0.565685  0.282843  0.69282   0.0       0.69282   0.0\n  0.0       0.8       0.4       0.0       0.4       0.581966  0.4        0.282843  0.565685  0.0       0.0       0.0       0.69282   0.69282\n  0.0       0.4       0.8       0.4       0.0       0.4       2.81803    0.0       0.565685  0.282843  0.0       0.69282   0.0       0.69282\n  0.0       0.565685  0.0       0.282843  0.0       0.282843  0.0       -0.472136  0.8       0.0       0.489898  0.0       0.0       0.489898\n  0.0       0.282843  0.282843  0.565685  0.565685  0.565685  0.565685   0.8       4.4       0.8       0.489898  0.489898  0.489898  0.489898\n  0.0       0.0       0.565685  0.0       0.282843  0.0       0.282843   0.0       0.8       8.47214   0.0       0.489898  0.489898  0.0\n  0.0       0.0       0.0       0.69282   0.69282   0.0       0.0        0.489898  0.489898  0.0       1.56393   0.0       0.0       0.0\n  0.0       0.0       0.0       0.69282   0.0       0.0       0.69282    0.0       0.489898  0.489898  0.0       6.03607   0.0       0.0\n  0.0       0.0       0.0       0.0       0.69282   0.69282   0.0        0.0       0.489898  0.489898  0.0       0.0       6.03607   0.0\n  0.0       0.0       0.0       0.0       0.0       0.69282   0.69282    0.489898  0.489898  0.0       0.0       0.0       0.0       1.56393","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"sparse(ham)","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"14×14 SparseArrays.SparseMatrixCSC{Float64, Int64} with 104 stored entries:\n -6.8       0.69282   0.69282    ⋅         ⋅         ⋅         ⋅          ⋅         ⋅         ⋅         ⋅         ⋅         ⋅         ⋅ \n  0.69282  -3.03607   0.4       0.8       0.4       0.8       0.4        0.565685  0.282843   ⋅         ⋅         ⋅         ⋅         ⋅ \n  0.69282   0.4       1.43607   0.4       0.8       0.4       0.8         ⋅        0.282843  0.565685   ⋅         ⋅         ⋅         ⋅ \n   ⋅        0.8       0.4       0.581966  0.4        ⋅        0.4        0.282843  0.565685   ⋅        0.69282   0.69282    ⋅         ⋅ \n   ⋅        0.4       0.8       0.4       2.81803   0.4        ⋅          ⋅        0.565685  0.282843  0.69282    ⋅        0.69282    ⋅ \n   ⋅        0.8       0.4        ⋅        0.4       0.581966  0.4        0.282843  0.565685   ⋅         ⋅         ⋅        0.69282   0.69282\n   ⋅        0.4       0.8       0.4        ⋅        0.4       2.81803     ⋅        0.565685  0.282843   ⋅        0.69282    ⋅        0.69282\n   ⋅        0.565685   ⋅        0.282843   ⋅        0.282843   ⋅        -0.472136  0.8        ⋅        0.489898   ⋅         ⋅        0.489898\n   ⋅        0.282843  0.282843  0.565685  0.565685  0.565685  0.565685   0.8       4.4       0.8       0.489898  0.489898  0.489898  0.489898\n   ⋅         ⋅        0.565685   ⋅        0.282843   ⋅        0.282843    ⋅        0.8       8.47214    ⋅        0.489898  0.489898   ⋅ \n   ⋅         ⋅         ⋅        0.69282   0.69282    ⋅         ⋅         0.489898  0.489898   ⋅        1.56393    ⋅         ⋅         ⋅ \n   ⋅         ⋅         ⋅        0.69282    ⋅         ⋅        0.69282     ⋅        0.489898  0.489898   ⋅        6.03607    ⋅         ⋅ \n   ⋅         ⋅         ⋅         ⋅        0.69282   0.69282    ⋅          ⋅        0.489898  0.489898   ⋅         ⋅        6.03607    ⋅ \n   ⋅         ⋅         ⋅         ⋅         ⋅        0.69282   0.69282    0.489898  0.489898   ⋅         ⋅         ⋅         ⋅        1.56393","category":"page"},{"location":"generated/exact-example.html#Computing-eigenvalues","page":"Exact diagonalization","title":"Computing eigenvalues","text":"","category":"section"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"Now that we have a way of constructing matrices from Hamiltonians, we can use standard Julia functionality to diagonalise them.","category":"page"},{"location":"generated/exact-example.html#The-built-in-method","page":"Exact diagonalization","title":"The built-in method","text":"","category":"section"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"Let's begin by looking at the eigen, eigvecs, and eigvals functions from the LinearAlgebra standard library. They operate on dense matrices and return the full spectra, hence they are only useful for small systems, or when all eigenvalues are required.","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"using LinearAlgebra\n\nmat = Matrix(ham)\neig = eigen(mat);","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"The values can be accessed like so:","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"eig.values","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"14-element Vector{Float64}:\n -6.9798639983216155\n -3.363124291613371\n -0.7590191922770746\n  0.1358418221962303\n  0.1578999869460933\n  0.8767114411781396\n  1.530592997097333\n  1.5835732611867464\n  3.072870330325867\n  3.125672653951849\n  4.862107221562182\n  6.26069485038059\n  6.402671211183119\n  9.093371706203957","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"The vectors are stored as columns in eig.vectors:","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"eig.vectors","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"14×14 Matrix{Float64}:\n -0.980348     0.175378     0.0135766   -2.81719e-15  -0.0221221  -0.0697193   1.3739e-15    0.0314466   -2.35922e-16  -0.0360987   -0.0161557  -5.55112e-17   0.00625248  -0.0058099\n  0.177701     0.932229     0.105473     3.01009e-14   0.225254   -0.132826    9.71445e-17  -0.00292026  -2.09555e-15  -0.0861158   -0.0907789  -4.996e-16     0.0591715   -0.0264275\n  0.0768085   -0.0622307    0.0129069   -6.06251e-14  -0.447424   -0.63969     2.05322e-14   0.383444    -6.54338e-15  -0.431051    -0.181167   -6.10623e-16   0.0599783   -0.106852\n -0.0214153   -0.175119    -0.20169      0.616673      0.522017   -0.296818   -0.31234      -0.122119    -0.123629     -0.106455    -0.126661    0.0829132     0.148347    -0.0574235\n -0.0119687   -0.0373038    0.0678797    0.0693699     0.0495446   0.416847    0.33773       0.0584554   -0.601232     -0.467179    -0.215841   -0.140166      0.190543    -0.114342\n -0.0214153   -0.175119    -0.20169     -0.616673      0.522017   -0.296818    0.31234      -0.122119     0.123629     -0.106455    -0.126661   -0.0829132     0.148347    -0.0574235\n -0.0119687   -0.0373038    0.0678797   -0.0693699     0.0495446   0.416847   -0.33773       0.0584554    0.601232     -0.467179    -0.215841    0.140166      0.190543    -0.114342\n -0.0138439   -0.165902     0.922758     1.00753e-14   0.1111     -0.172508   -1.30521e-14  -0.207974     2.66454e-15   0.0848902   -0.149153   -8.32667e-16   0.0712921   -0.0301968\n -0.00234782   0.00840544  -0.098969    -9.6867e-15   -0.0847116   0.082999    1.51129e-14   0.274424     3.60822e-15   0.575786    -0.61385    -2.72005e-15   0.353775    -0.259338\n -0.00237613   0.00294196   0.00143189   5.56152e-15   0.0427486   0.0110863  -3.72619e-15  -0.0663108    9.50628e-16   0.00167015   0.0832916   2.91434e-15  -0.448519    -0.8863\n  0.00363555   0.0455298   -0.133824    -0.332825     -0.290831   -0.057199   -0.527627     -0.588225    -0.332816     -0.0472302   -0.18528    -0.00844536    0.0915588   -0.0346434\n  0.00195478   0.0150664    0.0206752   -0.0642658    -0.0638689  -0.0250518   0.0999631    -0.012992    -0.111668      0.0393523    0.423534    0.688046      0.513839    -0.222499\n  0.00195478   0.0150664    0.0206752    0.0642658    -0.0638689  -0.0250518  -0.0999631    -0.012992     0.111668      0.0393523    0.423534   -0.688046      0.513839    -0.222499\n  0.00363555   0.0455298   -0.133824     0.332825     -0.290831   -0.057199    0.527627     -0.588225     0.332816     -0.0472302   -0.18528     0.00844536    0.0915588   -0.0346434","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"If you need the full spectrum, but would like to use less memory, consider using the in-place eigen!.","category":"page"},{"location":"generated/exact-example.html#Iterative-sparse-solvers","page":"Exact diagonalization","title":"Iterative sparse solvers","text":"","category":"section"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"For larger Hamiltonians, it is better to use an iterative solver. There are several options. We will look at eigs from Arpack.jl and eigsolve from KrylovKit.jl.","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"Let's start with Arpack's eigs. It is important to set the nev and which keyword arguments. nev sets the number of eigenpairs to find. which should in most cases be set to :SR, which will find the eigenvalues with the smallest real part.","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"using Arpack\n\nnum_eigvals = 3\n\nsparse_matrix = sparse(ham)\nvals_ar, vecs_ar = eigs(sparse_matrix; which=:SR, nev=num_eigvals)\nvals_ar","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"3-element Vector{Float64}:\n -6.979863998321619\n -3.3631242916133606\n -0.7590191922770747","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"Using KrylovKit's eigsolve is similar, but the nev and which are given as positional arguments. Note that KrylovKit may sometimes return more than nev eigenpairs if it happens to find them.","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"using KrylovKit\n\nvals_kk, vecs_kk = eigsolve(sparse_matrix, num_eigvals, :SR)\nvals_kk","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"14-element Vector{Float64}:\n -6.979863998321608\n -3.363124291613378\n -0.7590191922770853\n  0.13584182219621965\n  0.15789998694607732\n  0.8767114411781325\n  1.5305929970973375\n  1.5835732611867437\n  3.072870330325867\n  3.125672653951841\n  4.8621072215621695\n  6.2606948503806\n  6.402671211183108\n  9.093371706203955","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"Both solvers use variants of the Lanczos algorithm for Hermitian matrices and the Arnoldi algorithm for non-Hermitian ones. These may in some cases miss degenerate eigenpairs.","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"If diagonalization takes too long, you can reduce the tolerance by setting the tol keyword argument to eigs or eigsolve. Using drastically lower tolerances than the default can still produce good results in practice. This, however, should be checked on a case-by-case basis.","category":"page"},{"location":"generated/exact-example.html#The-matrix-free-method","page":"Exact diagonalization","title":"The matrix-free method","text":"","category":"section"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"KrylovKit's eigsolve function is implemented in a way that does not require the linear operator and vector to be Julia arrays. Rimu leverages this functionality, which allows diagonalising Hamiltonians without ever needing to construct the matrix - all matrix elements are generated on the fly.","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"While this method is by far the slowest of the ones discussed, it also uses drastically less memory. This allows us to diagonalise much larger Hamiltonians.","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"To use this method, you first need a starting vector. It's best to use PDVec here as it leverages threading during the diagonalization.","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"dvec = PDVec(add => 1.0)","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"1-element PDVec: style = IsDeterministic{Float64}()\n  fs\"|0 0 4 0 0⟩\" => 1.0","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"Then, pass that vector and the Hamiltonian to eigsolve.","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"vals_mf, vecs_mf = eigsolve(ham, dvec, num_eigvals, :SR; issymmetric=true)\nvals_mf","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"10-element Vector{Float64}:\n -6.979863998321612\n -3.3631242916133406\n -0.7590191922770728\n  0.1578999869460862\n  0.8767114411781503\n  1.5835732611867401\n  3.125672653951839\n  4.862107221562172\n  6.402671211183112\n  9.093371706203953","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"Keep in mind that if an eigenvector is orthogonal to dvec, KrylovKit will miss it. Consider the following example:","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"eigsolve(ham, vecs_mf[2], num_eigvals, :SR, issymmetric=true)[1]","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"1-element Vector{Float64}:\n -3.3631242916133606","category":"page"},{"location":"generated/exact-example.html#Reducing-matrix-size-with-symmetries","page":"Exact diagonalization","title":"Reducing matrix size with symmetries","text":"","category":"section"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"As these matrices tend to get large quickly, memory is usually the bottleneck.  There are currently two methods implemented to reduce the matrix size, ParitySymmetry and TimeReversalSymmetry. These symmetries work by performing a unitary transformation on the Hamiltonian which causes it to become block-diagonal. When building a matrix from a block-diagonal Hamiltonian, only the block that contains the starting address is constructed.","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"You should only use these where the relevant symmetries actually apply - no checks are performed to make sure they do. There is also currently no way of using both at the same time. Please consult the documentation for a more in-depth description of these options.","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"The Hamiltonian presented in this example is compatible with ParitySymmetry. Let's see how the matrix size is reduced when applying it.","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"size(sparse(ham))","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"(14, 14)","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"size(sparse(ParitySymmetry(ham)))","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"(10, 10)","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"In this small example, the size reduction is modest, but for larger systems, you can expect to reduce the dimension of the matrix by about half.","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"all_eigs = eigvals(Matrix(ham))\neven_eigs = eigvals(Matrix(ParitySymmetry(ham)))","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"10-element Vector{Float64}:\n -6.979863998321621\n -3.3631242916133637\n -0.759019192277076\n  0.1578999869460802\n  0.8767114411781437\n  1.5835732611867417\n  3.125672653951844\n  4.862107221562179\n  6.402671211183117\n  9.093371706203957","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"The eigenvalues of the transformed Hamiltonian are a subset of the full spectrum. To get the other half, we can pass the even=false keyword argument to ParitySymmetry. When doing that, we need to make sure the starting address of the Hamiltonian is not symmetric under reversal:","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"add_odd = BoseFS(M, cld(M, 2) => N - 3, cld(M, 2) - 1 => 2, cld(M, 2) + 2 => 1)","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"BoseFS{4,5}(0, 2, 1, 0, 1)","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"odd_eigs = eigvals(Matrix(ParitySymmetry(HubbardMom1D(add_odd); even=false)))","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"4-element Vector{Float64}:\n 0.135841822196218\n 1.530592997097328\n 3.0728703303258613\n 6.260694850380591","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"Now, let's check that combining the two sets of eigenvalues indeed recovers the whole spectrum.","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"sort([even_eigs; odd_eigs]) ≈ all_eigs","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"true","category":"page"},{"location":"generated/exact-example.html#Computing-observables","page":"Exact diagonalization","title":"Computing observables","text":"","category":"section"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"Since building a matrix from an operator only builds the part that is reachable from the starting address, we need to use a different approach when computing observables.","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"To demonstrate this, we will use the DensityMatrixDiagonal operator, which in this case will give the momentum density.","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"The idea here is to construct a PDVec from the computed eigenvector and use it directly with the operator.","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"dvec = PDVec(zip(bsr.basis, eigvecs(Matrix(ham))[:, 1]))","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"14-element PDVec: style = IsDeterministic{Float64}()\n  fs\"|1 0 1 2 0⟩\" => -0.0214153\n  fs\"|2 0 0 0 2⟩\" => -0.00237613\n  fs\"|0 0 4 0 0⟩\" => -0.980348\n  fs\"|0 0 0 3 1⟩\" => 0.00363555\n  fs\"|2 1 1 0 0⟩\" => -0.0119687\n  fs\"|1 0 2 0 1⟩\" => 0.0768085\n  fs\"|1 3 0 0 0⟩\" => 0.00363555\n  fs\"|0 1 2 1 0⟩\" => 0.177701\n  fs\"|0 0 1 1 2⟩\" => -0.0119687\n  fs\"|3 0 0 1 0⟩\" => 0.00195478\n  fs\"|0 2 0 2 0⟩\" => -0.0138439\n  fs\"|1 1 0 1 1⟩\" => -0.00234782\n  fs\"|0 1 0 0 3⟩\" => 0.00195478\n  fs\"|0 2 1 0 1⟩\" => -0.0214153","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"The eigenvectors these methods produce are normalized, hence we can use the three-argument dot to compute the values of observables. Here we are computing the single particle momentum density distribution, which is just the diagonal of the single-particle density matrix in momentum space.","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"[dot(dvec, DensityMatrixDiagonal(i), dvec) for i in 1:M]","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"5-element Vector{Float64}:\n 0.0066861389450877905\n 0.033070399772041625\n 3.9204869225657406\n 0.03307039977204162\n 0.006686138945087839","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"This page was generated using Literate.jl.","category":"page"},{"location":"rimuio.html#Module-RimuIO","page":"I/O","title":"Module RimuIO","text":"","category":"section"},{"location":"rimuio.html","page":"I/O","title":"I/O","text":"Modules = [RimuIO]","category":"page"},{"location":"rimuio.html#Rimu.RimuIO","page":"I/O","title":"Rimu.RimuIO","text":"Module to provide file input and output functionality for Rimu. Provides convenience functions:\n\nRimuIO.save_df(filename, df::DataFrame) Save dataframe in Arrow format.\nRimuIO.load_df(filename) Load Arrow file into dataframe.\n\n\n\n\n\n","category":"module"},{"location":"rimuio.html#Rimu.RimuIO.load_df-Tuple{Any}","page":"I/O","title":"Rimu.RimuIO.load_df","text":"RimuIO.load_df(filename; propagate_metadata = true, add_filename = true) -> DataFrame\n\nLoad Arrow file into DataFrame. Optionally propagate metadata to DataFrame and add the file name as metadata.\n\nSee also RimuIO.save_df.\n\n\n\n\n\n","category":"method"},{"location":"rimuio.html#Rimu.RimuIO.save_df-Tuple{Any, DataFrame}","page":"I/O","title":"Rimu.RimuIO.save_df","text":"RimuIO.save_df(filename, df::DataFrame; kwargs...)\n\nSave dataframe in Arrow format.\n\nKeyword arguments are passed on to Arrow.write. Compression is enabled by default for large DataFrames (over 10,000 rows).\n\nTable-level metadata of the DataFrame is saved as Arrow metadata (with String value) unless overwritten with the keyword argument metadata.\n\nSee also RimuIO.load_df.\n\n\n\n\n\n","category":"method"},{"location":"rimuio.html#Index","page":"I/O","title":"Index","text":"","category":"section"},{"location":"rimuio.html","page":"I/O","title":"I/O","text":"Pages   = [\"rimuio.md\"]","category":"page"},{"location":"hamiltonians.html#Module-Hamiltonians","page":"Hamiltonians","title":"Module Hamiltonians","text":"","category":"section"},{"location":"hamiltonians.html","page":"Hamiltonians","title":"Hamiltonians","text":"This module contains definitions of Hamiltonians, in particular specific physical models of interest. These are organised by means of an interface around the abstract type AbstractHamiltonian, in the spirit of the AbstractArray interface as discussed in the Julia Documentation.","category":"page"},{"location":"hamiltonians.html","page":"Hamiltonians","title":"Hamiltonians","text":"The Hamiltonians can be used for projector quantum Monte Carlo with ProjectorMonteCarloProblem or for exact diagonalization with ExactDiagonalizationProblem, see Exact Diagonalization.","category":"page"},{"location":"hamiltonians.html","page":"Hamiltonians","title":"Hamiltonians","text":"Hamiltonians","category":"page"},{"location":"hamiltonians.html#Rimu.Hamiltonians","page":"Hamiltonians","title":"Rimu.Hamiltonians","text":"The module Rimu.Hamiltonians defines types and functions for working with Hamiltonians.\n\nExported concrete Hamiltonian types\n\nReal space Hubbard models\n\nHubbardReal1D\nBoseHubbardReal1D2C\nHubbardReal1DEP\nHubbardRealSpace\nExtendedHubbardReal1D\n\nMomentum space Hubbard models\n\nHubbardMom1D\nBoseHubbardMom1D2C\nHubbardMom1DEP\n\nHarmonic oscillator models\n\nHOCartesianContactInteractions\nHOCartesianEnergyConservedPerDim\nHOCartesianCentralImpurity\n\nOther\n\nFroehlichPolaron\nMatrixHamiltonian\nTranscorrelated1D\n\nWrappers\n\nGutzwillerSampling\nGuidingVectorSampling\nParitySymmetry\nTimeReversalSymmetry\nStoquastic\n\nObservables\n\nParticleNumberOperator\nG2RealCorrelator\nG2RealSpace\nG2MomCorrelator\nDensityMatrixDiagonal\nSingleParticleExcitation\nTwoParticleExcitation\nMomentum\nAxialAngularMomentumHO\n\nInterface for working with Hamiltonians\n\nAbstractHamiltonian: defined in the module Interfaces\n\n\n\n\n\n","category":"module"},{"location":"hamiltonians.html#Model-Hamiltonians","page":"Hamiltonians","title":"Model Hamiltonians","text":"","category":"section"},{"location":"hamiltonians.html","page":"Hamiltonians","title":"Hamiltonians","text":"Here is a list of fully implemented model Hamiltonians. There are several variants of the Hubbard model in real and momentum space, as well as some other models.","category":"page"},{"location":"hamiltonians.html#Real-space-Hubbard-models","page":"Hamiltonians","title":"Real space Hubbard models","text":"","category":"section"},{"location":"hamiltonians.html","page":"Hamiltonians","title":"Hamiltonians","text":"HubbardReal1D\nBoseHubbardReal1D2C\nHubbardReal1DEP\nHubbardRealSpace\nExtendedHubbardReal1D","category":"page"},{"location":"hamiltonians.html#Rimu.Hamiltonians.HubbardReal1D","page":"Hamiltonians","title":"Rimu.Hamiltonians.HubbardReal1D","text":"HubbardReal1D(address; u=1.0, t=1.0)\n\nImplements a one-dimensional Bose Hubbard chain in real space.\n\nhatH = -t sum_langle ijrangle a_i^ a_j + fracu2sum_i n_i (n_i-1)\n\nArguments\n\naddress: the starting address, defines number of particles and sites.\nu: the interaction parameter.\nt: the hopping strength.\n\nSee also\n\nHubbardMom1D\nExtendedHubbardReal1D\n\n\n\n\n\n","category":"type"},{"location":"hamiltonians.html#Rimu.Hamiltonians.BoseHubbardReal1D2C","page":"Hamiltonians","title":"Rimu.Hamiltonians.BoseHubbardReal1D2C","text":"BoseHubbardReal1D2C(address::BoseFS2C; ua=1.0, ub=1.0, ta=1.0, tb=1.0, v=1.0)\n\nImplements a two-component one-dimensional Bose Hubbard chain in real space.\n\nhatH = hatH_a + hatH_b + Vsum_i n_a_in_b_i\n\nArguments\n\naddress: the starting address, defines number of particles and sites.\nua: the on-site interaction parameter parameter for Hamiltonian a.\nub: the on-site interaction parameter parameter for Hamiltonian b.\nta: the hopping strength for Hamiltonian a.\ntb: the hopping strength for Hamiltonian b.\nv: the inter-species interaction parameter V.\n\nSee also\n\nHubbardReal1D\nBoseHubbardMom1D2C\n\n\n\n\n\n","category":"type"},{"location":"hamiltonians.html#Rimu.Hamiltonians.HubbardReal1DEP","page":"Hamiltonians","title":"Rimu.Hamiltonians.HubbardReal1DEP","text":"HubbardReal1DEP(address; u=1.0, t=1.0, v_ho=1.0)\n\nImplements a one-dimensional Bose Hubbard chain in real space with external potential.\n\nhatH = -t sum_langle ijrangle a_i^ a_j + sum_i ϵ_i n_i\n+ fracu2sum_i n_i (n_i-1)\n\nArguments\n\naddress: the starting address, defines number of particles and sites.\nu: the interaction parameter.\nt: the hopping strength.\nv_ho: strength of the external harmonic oscillator potential ϵ_i = v_ho i^2.\n\nThe first index is i=0 and the maximum of the potential occurs in the centre of the lattice.\n\nSee also\n\nHubbardReal1D\nHubbardMom1D\nExtendedHubbardReal1D\n\n\n\n\n\n","category":"type"},{"location":"hamiltonians.html#Rimu.Hamiltonians.HubbardRealSpace","page":"Hamiltonians","title":"Rimu.Hamiltonians.HubbardRealSpace","text":"HubbardRealSpace(address; geometry=PeriodicBoundaries(M,), t=ones(C), u=ones(C, C), v=zeros(C, D))\n\nHubbard model in real space. Supports single or multi-component Fock state addresses (with C components) and various (rectangular) lattice geometries in D dimensions.\n\n  hatH = -sum_langle ijrangleσ t_σ a^_iσ a_jσ +\n  frac12sum_iσ u_σσ n_iσ (n_iσ - 1) +\n  sum_iστu_στ n_iσ n_iτ\n\nIf v is nonzero then this calculates hatH + hatV by adding the harmonic trapping potential\n\n    hatV = sum_iσd v_σd x_di^2 n_iσ\n\nwhere x_di is the distance of site i from the centre of the trap along dimension d.\n\nAddress types\n\nBoseFS: Single-component Bose-Hubbard model.\nFermiFS: Single-component Fermi-Hubbard model.\nCompositeFS: For multi-component models.\n\nNote that a single component of fermions cannot interact with itself. A warning is produced if addressis incompatible with the interaction parameters u.\n\nGeometries\n\nImplemented CubicGrids for keyword geometry\n\nPeriodicBoundaries\nHardwallBoundaries\nLadderBoundaries\n\nDefault is geometry=PeriodicBoundaries(M,), i.e. a one-dimensional lattice with the number of sites M inferred from the number of modes in address.\n\nOther parameters\n\nt: the hopping strengths. Must be a vector of length C. The i-th element of the vector corresponds to the hopping strength of the i-th component.\nu: the on-site interaction parameters. Must be a symmetric matrix. u[i, j] corresponds to the interaction between the i-th and j-th component. u[i, i] corresponds to the interaction of a component with itself. Note that u[i,i] must be zero for fermionic components.\nv: the trap potential strengths. Must be a matrix of size C × D. v[i,j] is the strength of the trap for component i in the jth dimension.\n\n\n\n\n\n","category":"type"},{"location":"hamiltonians.html#Rimu.Hamiltonians.ExtendedHubbardReal1D","page":"Hamiltonians","title":"Rimu.Hamiltonians.ExtendedHubbardReal1D","text":"ExtendedHubbardReal1D(address; u=1.0, v=1.0, t=1.0, boundary_condition=:periodic)\n\nImplements the extended Hubbard model on a one-dimensional chain in real space. This Hamiltonian can be either real or complex, depending on the choice of boundary_condition.\n\nhatH = -t sum_langle ijrangle a_i^ a_j + fracu2sum_i n_i (n_i-1) +\nv sum_langle ijrangle n_i n_j\n\nArguments\n\naddress: the starting address.\nu: on-site interaction parameter\nv: the next-neighbor interaction\nt: the hopping strength\nboundary_condition The following values are supported:\n:periodic: usual period boundary condition realising a ring geometry.\n:hard_wall: hopping over the boundary is not allowed.\n:twisted: like :periodic but hopping over the boundary incurs an additional factor of -1.\nθ <: Number: like :periodic and :twisted but hopping over the boundary incurs a factor exp(iθ) for a hop to the right and exp(iθ) for a hop to the left. With this choice the Hamiltonian will have a complex eltype whereas otherwise the eltype is determined by the type of the parameters t, u, and v.\n\nSee also HubbardRealSpace.\n\n\n\n\n\n","category":"type"},{"location":"hamiltonians.html#Momentum-space-Hubbard-models","page":"Hamiltonians","title":"Momentum space Hubbard models","text":"","category":"section"},{"location":"hamiltonians.html","page":"Hamiltonians","title":"Hamiltonians","text":"HubbardMom1D\nBoseHubbardMom1D2C\nHubbardMom1DEP\nExtendedHubbardMom1D","category":"page"},{"location":"hamiltonians.html#Rimu.Hamiltonians.HubbardMom1D","page":"Hamiltonians","title":"Rimu.Hamiltonians.HubbardMom1D","text":"HubbardMom1D(address; u=1.0, t=1.0, dispersion=hubbard_dispersion)\n\nImplements a one-dimensional Bose Hubbard chain in momentum space.\n\nhatH =  sum_k ϵ_k n_k + fracuMsum_kpqr a^_r a^_q a_p a_k δ_r+qp+k\n\nArguments\n\naddress: the starting address, defines number of particles and sites.\nu: the interaction parameter.\nt: the hopping strength.\ndispersion: defines ϵ_k =dispersion(t, k)\nhubbard_dispersion: ϵ_k = -2(Re(t) cos(k) + Im(t) sin(k))\ncontinuum_dispersion: ϵ_k = Re(t) k^2 - 2 Im(t) k\n\nSee also\n\nHubbardReal1D\nExtendedHubbardReal1D\n\n\n\n\n\n","category":"type"},{"location":"hamiltonians.html#Rimu.Hamiltonians.BoseHubbardMom1D2C","page":"Hamiltonians","title":"Rimu.Hamiltonians.BoseHubbardMom1D2C","text":"BoseHubbardMom1D2C(address::BoseFS2C; ua=1.0, ub=1.0, ta=1.0, tb=1.0, v=1.0, kwargs...)\n\nImplements a one-dimensional Bose Hubbard chain in momentum space with a two-component Bose gas.\n\nhatH = hatH_a + hatH_b + fracVMsum_kpqr b^_r a^_q b_p a_k δ_r+qp+k\n\nArguments\n\naddress: the starting address.\nua: the u parameter for Hamiltonian a.\nub: the u parameter for Hamiltonian b.\nta: the t parameter for Hamiltonian a.\ntb: the t parameter for Hamiltonian b.\nv: the inter-species interaction parameter V.\n\nFurther keyword arguments are passed on to the constructor of HubbardMom1D.\n\nSee also\n\nBoseFS2C\nBoseHubbardReal1D2C\n\n\n\n\n\n","category":"type"},{"location":"hamiltonians.html#Rimu.Hamiltonians.HubbardMom1DEP","page":"Hamiltonians","title":"Rimu.Hamiltonians.HubbardMom1DEP","text":"HubbardMom1DEP(address; u=1.0, t=1.0, v_ho=1.0, dispersion=hubbard_dispersion)\n\nImplements a one-dimensional Bose Hubbard chain in momentum space with harmonic external potential.\n\nH = sum_k ϵ_k n_k + fracuMsum_kpqr a^_r a^_q a_p a_k δ_r+qp+k\n            + V_mathrmho \n\nwhere\n\nbeginaligned\nV_mathrmho  = frac1M sum_pq  mathrmDFTV_ext_p-q \n                    a^_p a_q \nV_mathrmext(x) = v_mathrmho x^2 \nendaligned\n\nis an external harmonic potential in momentum space, mathrmDFT_k is a discrete Fourier transform performed by fft()[k%M + 1], and M == num_modes(address).\n\nArguments\n\naddress: the starting address, defines number of particles and sites.\nu: the interaction parameter.\nt: the hopping strength.\ndispersion: defines ϵ_k =dispersion(t, k)\nhubbard_dispersion: ϵ_k = -2Re(t) cos(k) + Im(t) sin(k)\ncontinuum_dispersion: ϵ_k = Re(t) k^2 - 2 Im(t) k\nv_ho: strength of the external harmonic oscillator potential v_mathrmho.\n\nSee also HubbardMom1D, HubbardReal1DEP, Transcorrelated1D, Hamiltonians.\n\n\n\n\n\n","category":"type"},{"location":"hamiltonians.html#Rimu.Hamiltonians.ExtendedHubbardMom1D","page":"Hamiltonians","title":"Rimu.Hamiltonians.ExtendedHubbardMom1D","text":"ExtendedHubbardMom1D(\n    address; \n    u=1.0, t=1.0, v=1.0, dispersion=hubbard_dispersion, boundary_condition = 0.0\n)\n\nImplements a one-dimensional extended Hubbard chain, also known as the t - V model,  in momentum space.\n\nhatH =  sum_k ϵ_k n_k + frac12M sum_kpqr (u + 2v cos(q-p)) a^_r a^_q a_p a_k δ_r+qp+k\n\nArguments\n\naddress: the starting address, defines number of particles and sites.\nu: the interaction parameter.\nt: the hopping strength.\nboundary_condition: θ <: Number: hopping over the boundary incurs a   factor exp(iθ) for a hop to the right and exp(iθ) for a hop to the left.\ndispersion: defines ϵ_k =dispersion(t, k + θ)\nhubbard_dispersion: ϵ_k = -2 (Re(t) cos(k + θ) + Im(t) sin(k + θ))\ncontinuum_dispersion: ϵ_k = Re(t) (k + θ)^2 - 2 Im(t) (k + θ)\n\nSee also\n\nHubbardMom1D\nHubbardReal1D\nExtendedHubbardReal1D\n\n\n\n\n\n","category":"type"},{"location":"hamiltonians.html#Harmonic-oscillator-models","page":"Hamiltonians","title":"Harmonic oscillator models","text":"","category":"section"},{"location":"hamiltonians.html","page":"Hamiltonians","title":"Hamiltonians","text":"HOCartesianContactInteractions\nHOCartesianEnergyConservedPerDim\nHOCartesianCentralImpurity","category":"page"},{"location":"hamiltonians.html#Rimu.Hamiltonians.HOCartesianContactInteractions","page":"Hamiltonians","title":"Rimu.Hamiltonians.HOCartesianContactInteractions","text":"HOCartesianContactInteractions(addr; S, η, g = 1.0, interaction_only = false, block_by_level = true)\n\nImplements a bosonic harmonic oscillator in Cartesian basis with contact interactions\n\nhatH = sum_i epsilon_mathbfi n_mathbfi + fracg2sum_mathbfijkl\n    V_mathbfijkl a^_mathbfi a^_mathbfj a_mathbfk a_mathbfl\n\nFor a D-dimensional harmonic oscillator indices mathbfi mathbfj ldots are D-tuples. The energy scale is defined by the first dimension i.e. hbar omega_x so that single particle energies are\n\n    fracepsilon_mathbfihbar omega_x = (i_x + 12) + eta_y (i_y+12) + ldots\n\nThe factors eta_y ldots allow for anisotropic trapping geometries and are assumed to be greater than 1 so that omega_x is the smallest trapping frequency.\n\nBy default the offdiagonal elements due to the interactions are consistent with first-order degenerate perturbation theory\n\n    V_mathbfijkl = delta_epsilon_mathbfi + epsilon_mathbfj\n        ^epsilon_mathbfk + epsilon_mathbfl\n        prod_d in x yldots mathcalI(i_dj_dk_dl_d)\n\nwhere the delta function indicates that the total noninteracting energy is conserved meaning all states with the same noninteracting energy are connected by this interaction and the Hamiltonian blocks according to noninteracting energy levels. Setting block_by_level = false will disable this restriction and allow coupling between basis states of any noninteracting energy level, leading to many more offdiagonals and fewer but larger blocks (the blocks are still distinguished by parity of basis states). Alternatively, see HOCartesianEnergyConservedPerDim for a model with the stronger restriction that conserves energy separately per spatial dimension. The integral mathcalI(abcd) is of four one dimensional harmonic oscillator basis functions, implemented in four_oscillator_integral_general.\n\nArguments\n\naddr: the starting address, defines number of particles and total number of modes.\nS: Tuple of the number of levels in each dimension, including the groundstate. The   allowed couplings between states is defined by the aspect ratio of S .- 1. Defaults   to a 1D spectrum with number of levels matching modes of addr. Will be sorted to make   the first dimension the largest.\nη: Define a custom aspect ratio for the trapping potential strengths, instead of deriving   from S .- 1. This will only affect the single particle energy scale and not the   interactions. The values are always scaled relative to the first dimension, which sets   the energy scale of the system, hbaromega_x.\ng: the (isotropic) bare interaction parameter. The value of g is assumed   to be in trap units.\ninteraction_only: if set to true then the noninteracting single-particle terms are   ignored. Useful if only energy shifts due to interactions are required.\nblock_by_level: if set to false will allow the interactions to couple all states without   comparing their noninteracting energy.\n\nwarning: Warning\nnum_offdiagonals is a bad estimate for this Hamiltonian. Take care when building a matrix or using QMC methods. Use get_all_blocks first then pass option col_hint = block_size to BasisSetRep to safely build the matrix.\n\n\n\n\n\n","category":"type"},{"location":"hamiltonians.html#Rimu.Hamiltonians.HOCartesianEnergyConservedPerDim","page":"Hamiltonians","title":"Rimu.Hamiltonians.HOCartesianEnergyConservedPerDim","text":"HOCartesianEnergyConservedPerDim(addr; S, η, g = 1.0, interaction_only = false)\n\nImplements a bosonic harmonic oscillator in Cartesian basis with contact interactions\n\nhatH = sum_i ϵ_i n_i + fracg2sum_ijkl V_ijkl a^_i a^_j a_k a_l\n\nwith the additional restriction that the interactions only couple states with the same energy in each dimension separately. See HOCartesianContactInteractions for a model that conserves total energy.\n\nFor a D-dimensional harmonic oscillator indices mathbfi mathbfj ldots are D-tuples. The energy scale is defined by the first dimension i.e. hbar omega_x so that single particle energies are\n\n    fracepsilon_mathbfihbar omega_x = (i_x + 12) + eta_y (i_y+12) + ldots\n\nThe factors eta_y ldots allow for anisotropic trapping geometries and are assumed to be greater than 1 so that omega_x is the smallest trapping frequency.\n\nMatrix elements V_mathbfijkl are for a contact interaction calculated in this basis using first-order degenerate perturbation theory.\n\n    V_mathbfijkl = prod_d in x yldots mathcalI(i_dj_dk_dl_d)\n        delta_i_d + j_d^k_d + l_d\n\nwhere the delta-function indicates that the noninteracting energy is conserved along each dimension. The integral mathcalI(abcd) is of four one dimensional harmonic oscillator basis functions, see four_oscillator_integral_general, with the additional restriction that energy is conserved in each dimension.\n\nArguments\n\naddr: the starting address, defines number of particles and total number of modes.\nS: Tuple of the number of levels in each dimension, including the groundstate. Defaults   to a 1D spectrum with number of levels matching modes of addr. Will be sorted to   make the first dimension the largest.\nη: Define a custom aspect ratio for the trapping potential strengths, instead of deriving   from S .- 1. The values are always scaled relative to the first dimension, which sets   the energy scale of the system, hbaromega_x.\ng: the (isotropic) interparticle interaction parameter. The value of g is assumed   to be in trap units.\ninteraction_only: if set to true then the noninteracting single-particle terms are   ignored. Useful if only energy shifts due to interactions are required.\n\n\n\n\n\n","category":"type"},{"location":"hamiltonians.html#Rimu.Hamiltonians.HOCartesianCentralImpurity","page":"Hamiltonians","title":"Rimu.Hamiltonians.HOCartesianCentralImpurity","text":"HOCartesianCentralImpurity(addr; kwargs...)\n\nHamiltonian of non-interacting particles in an arbitrary harmonic trap with a delta-function potential at the centre, with strength g,\n\nhatH_mathrmrel = sum_mathbfi ϵ_mathbfi n_mathbfi\n    + gsum_mathbfij V_mathbfij a^_mathbfi a_mathbfj\n\nFor a D-dimensional harmonic oscillator indices mathbfi mathbfj ldots are D-tuples. The energy scale is defined by the first dimension i.e. hbar omega_x so that single particle energies are\n\n    fracepsilon_mathbfihbar omega_x = (i_x + 12) + eta_y (i_y+12) + ldots\n\nThe factors eta_y ldots allow for anisotropic trapping geometries and are assumed to be greater than 1 so that omega_x is the smallest trapping frequency.\n\nMatrix elements V_mathbfij are for a delta function potential calculated in this basis\n\n    V_mathbfij = prod_d in x yldots psi_i_d(0) psi_j_d(0)\n\nOnly even parity states feel this impurity, so all i_d are even. Note that the matrix representation of this Hamiltonian for a single particle is completely dense in the even-parity subspace.\n\nArguments\n\naddr: the starting address, defines number of particles and total number of modes.\nmax_nx = num_modes(addr) - 1: the maximum harmonic oscillator index number in the x-dimension.   Must be even. Index number for the harmonic oscillator groundstate is 0.\nηs = (): a tuple of aspect ratios for the remaining dimensions (η_y, ...). Should be empty   for a 1D trap or contain values greater than 1.0. The maximum index   in other dimensions will be the largest even number less than M/η_y.\nS = nothing: Instead of max_nx, manually set the number of levels in each dimension,   including the groundstate. Must be a Tuple of Ints.\ng = 1.0: the strength of the delta impurity in (x-dimension) trap units.\nimpurity_only=false: if set to true then the trap energy terms are ignored. Useful if   only energy shifts due to the impurity are required.\n\nwarning: Warning\nDue to use of `SpecialFunctions` with large arguments the matrix representation of\nthis Hamiltonian may not be strictly symmetric, but is approximately symmetric within\nmachine precision.\n\nSee also HOCartesianContactInteractions andHOCartesianEnergyConservedPerDim.\n\n\n\n\n\n","category":"type"},{"location":"hamiltonians.html#Other","page":"Hamiltonians","title":"Other","text":"","category":"section"},{"location":"hamiltonians.html","page":"Hamiltonians","title":"Hamiltonians","text":"MatrixHamiltonian\nTranscorrelated1D\nFroehlichPolaron","category":"page"},{"location":"hamiltonians.html#Rimu.Hamiltonians.MatrixHamiltonian","page":"Hamiltonians","title":"Rimu.Hamiltonians.MatrixHamiltonian","text":"MatrixHamiltonian(\n    mat::AbstractMatrix{T};\n    starting_address::Int = starting_address(mat)\n) <: AbstractHamiltonian{T}\n\nWrap an abstract matrix mat as an AbstractHamiltonian object. Works with stochastic methods of ProjectorMonteCarloProblem() and DVec. Optionally, a valid index can be provided as the starting_address.\n\nSpecialised methods are implemented for sparse matrices of type AbstractSparseMatrixCSC. One based indexing is required for the matrix mat.\n\n\n\n\n\n","category":"type"},{"location":"hamiltonians.html#Rimu.Hamiltonians.Transcorrelated1D","page":"Hamiltonians","title":"Rimu.Hamiltonians.Transcorrelated1D","text":"Transcorrelated1D(address; t=1.0, v=1.0, v_ho=0.0, cutoff=1, three_body_term=true)\n\nImplements a transcorrelated Hamiltonian for contact interactions in one dimensional momentum space from Jeszenski et al. (2018). Currently limited to two component fermionic addresses.\n\nbeginaligned\n\ntildeH = t sum_kσk^2 n_kσ \n    quad + sum_pqkσσ T_pqk a^_p-kσ a^_q+kσ a_qσ a_pσ \n    quad + sum_pqskkσσ Q_kka^_p-kσ a^_q+kσ a^_s+k-kσ\n                                       a_sσ a_qσ a_pσ \n    quad + V_mathrmho\nendaligned\n\nwhere\n\nbeginaligned\ntildeu(k) = begincases -frac2k^2 mathrmif  k  k_c\n0  mathrmotherwise\nendcases\n\n\nT_pqk = fracvM + frac2vMleftk^2tildeu(k)\n          - (p - q)ktildeu(k)right + frac2v^2tW(k)\nW(k) = frac1M^2sum_q (k - q)q tildeu(q)tildeu(k - q) \nQ_kl = -fracv^2t M^2k tildeu(k)ltildeu(l)\nendaligned\n\nArguments\n\naddress: The starting address, defines number of particles and sites.\nv: The interaction parameter.\nt: The kinetic energy prefactor.\nv_ho: Strength of the external harmonic oscillator potential V_mathrmho. See HubbardMom1DEP.\ncutoff controls k_c in equations above. Note: skipping generating off-diagonal elements below the cutoff is not implemented - zero-valued elements are returned instead.\nthree_body_term: If set to false, generating three body excitations is skipped. Note: when disabling three body terms, cutoff should be set to a higher value for best results.\n\nSee also\n\nHubbardMom1D\nHubbardMom1DEP\n\n\n\n\n\n","category":"type"},{"location":"hamiltonians.html#Rimu.Hamiltonians.FroehlichPolaron","page":"Hamiltonians","title":"Rimu.Hamiltonians.FroehlichPolaron","text":"FroehlichPolaron(address::OccupationNumberFS{M}; kwargs...) <: AbstractHamiltonian\n\nThe Froehlich polaron Hamiltonian for a 1D lattice with M momentum modes is given by\n\nH = (p_f - p)^2m + ωN - v Σₖ(aₖ^ + aₖ)\n\nwhere p is the total momentum, p_f = Σ_k k aₖ^ aₖ is the momentum operator for the bosons, and k part of the momentum lattice with separation 2πl. N is the number operator for the bosons.\n\nKeyword Arguments\n\np=0.0: the total momentum p.\nv=1.0: the coupling strength v.\nmass=1.0: the particle mass m.\nomega=1.0: the oscillation frequency of the phonons ω.\nl=1.0: the box size in real space l. Provides scale parameter of the momentum   lattice.\nmomentum_cutoff=nothing: the maximum boson momentum allowed for an address.\nmode_cutoff: the maximum number of bosons in each momentum mode. Defaults to the maximum   value supported by the address type OccupationNumberFS.\n\nExamples\n\njulia> fs = OccupationNumberFS(0,0,0)\nOccupationNumberFS{3, UInt8}(0, 0, 0)\n\njulia> ham = FroehlichPolaron(fs; v=0.5)\nFroehlichPolaron(fs\"|0 0 0⟩{8}\"; v=0.5, mass=1.0, omega=1.0, l=1.0, p=0.0, mode_cutoff=255)\n\njulia> dimension(ham)\n16777216\n\njulia> dimension(FroehlichPolaron(fs; v=0.5, mode_cutoff=5))\n216\n\nSee also OccupationNumberFS, dimension, AbstractHamiltonian.\n\n\n\n\n\n","category":"type"},{"location":"hamiltonians.html#Convenience-functions","page":"Hamiltonians","title":"Convenience functions","text":"","category":"section"},{"location":"hamiltonians.html","page":"Hamiltonians","title":"Hamiltonians","text":"rayleigh_quotient\nmomentum\nhubbard_dispersion\ncontinuum_dispersion\nshift_lattice\nshift_lattice_inv","category":"page"},{"location":"hamiltonians.html#Rimu.Hamiltonians.rayleigh_quotient","page":"Hamiltonians","title":"Rimu.Hamiltonians.rayleigh_quotient","text":"rayleigh_quotient(H, v)\n\nReturn the Rayleigh quotient of the linear operator H and the vector v:\n\nfrac v  H  v  vv \n\n\n\n\n\n","category":"function"},{"location":"hamiltonians.html#Rimu.Hamiltonians.momentum","page":"Hamiltonians","title":"Rimu.Hamiltonians.momentum","text":"momentum(ham::AbstractHamiltonian)\n\nMomentum as a linear operator in Fock space. Pass a Hamiltonian ham in order to convey information about the Fock basis. Returns an AbstractHamiltonian that represents the momentum operator.\n\nNote: momentum is currently only defined on HubbardMom1D.\n\nExample\n\njulia> add = BoseFS((1, 0, 2, 1, 2, 1, 1, 3));\n\n\njulia> ham = HubbardMom1D(add; u = 2.0, t = 1.0);\n\n\njulia> mom = momentum(ham);\n\n\njulia> diagonal_element(mom, add) # calculate the momentum of a single configuration\n-1.5707963267948966\n\njulia> v = DVec(add => 10; capacity=1000);\n\n\njulia> rayleigh_quotient(mom, v) # momentum expectation value for state vector `v`\n-1.5707963267948966\n\nPart of the AbstractHamiltonian interface.\n\n\n\n\n\n","category":"function"},{"location":"hamiltonians.html#Rimu.Hamiltonians.hubbard_dispersion","page":"Hamiltonians","title":"Rimu.Hamiltonians.hubbard_dispersion","text":"hubbard_dispersion(t, k)\n\nDispersion relation for HubbardMom1D. Returns -2(Re(t) cos(k) + Im(t) sin(k)).\n\nSee also continuum_dispersion.\n\n\n\n\n\n","category":"function"},{"location":"hamiltonians.html#Rimu.Hamiltonians.continuum_dispersion","page":"Hamiltonians","title":"Rimu.Hamiltonians.continuum_dispersion","text":"continuum_dispersion(t, k)\n\nDispersion relation for HubbardMom1D. Returns Re(t) k^2 - 2 Im(t) k.\n\nSee also hubbard_dispersion.\n\n\n\n\n\n","category":"function"},{"location":"hamiltonians.html#Rimu.Hamiltonians.shift_lattice","page":"Hamiltonians","title":"Rimu.Hamiltonians.shift_lattice","text":"shift_lattice(is)\n\nCircular shift contiguous indices is in interval [M÷2, M÷2) such that set starts with 0, where M=length(is).\n\nInverse operation: shift_lattice_inv. Used in HubbardReal1DEP and HubbardMom1DEP\n\n\n\n\n\n","category":"function"},{"location":"hamiltonians.html#Rimu.Hamiltonians.shift_lattice_inv","page":"Hamiltonians","title":"Rimu.Hamiltonians.shift_lattice_inv","text":"shift_lattice_inv(js)\n\nCircular shift indices starting with 0 into a contiguous set in interval [M÷2, M÷2), where M=length(js).\n\nInverse operation of shift_lattice. Used in HubbardReal1DEP and HubbardMom1DEP\n\n\n\n\n\n","category":"function"},{"location":"hamiltonians.html#Hamiltonian-wrappers","page":"Hamiltonians","title":"Hamiltonian wrappers","text":"","category":"section"},{"location":"hamiltonians.html","page":"Hamiltonians","title":"Hamiltonians","text":"The following Hamiltonians are constructed from an existing Hamiltonian instance and change its behaviour:","category":"page"},{"location":"hamiltonians.html","page":"Hamiltonians","title":"Hamiltonians","text":"GutzwillerSampling\nGuidingVectorSampling\nParitySymmetry\nTimeReversalSymmetry\nStoquastic","category":"page"},{"location":"hamiltonians.html#Rimu.Hamiltonians.GutzwillerSampling","page":"Hamiltonians","title":"Rimu.Hamiltonians.GutzwillerSampling","text":"GutzwillerSampling(::AbstractHamiltonian; g)\n\nWrapper over any AbstractHamiltonian that implements Gutzwiller sampling. In this importance sampling scheme the Hamiltonian is modified as follows\n\ntildeH_ij = H_ij e^-g(H_ii - H_jj) \n\nThis way off-diagonal spawns to higher-energy configurations are discouraged and spawns to lower-energy configurations encouraged for positive g.\n\nConstructor\n\nGutzwillerSampling(::AbstractHamiltonian, g)\nGutzwillerSampling(::AbstractHamiltonian; g)\n\nAfter construction, we can access the underlying Hamiltonian with G.hamiltonian and the g parameter with G.g.\n\nExample\n\njulia> H = HubbardMom1D(BoseFS(1,1,1); u=6.0, t=1.0)\nHubbardMom1D(fs\"|1 1 1⟩\"; u=6.0, t=1.0)\n\njulia> G = GutzwillerSampling(H, g=0.3)\nGutzwillerSampling(HubbardMom1D(fs\"|1 1 1⟩\"; u=6.0, t=1.0); g=0.3)\n\njulia> get_offdiagonal(H, BoseFS(2, 1, 0), 1)\n(BoseFS{3,3}(1, 0, 2), 2.0)\n\njulia> get_offdiagonal(G, BoseFS(2, 1, 0), 1)\n(BoseFS{3,3}(1, 0, 2), 0.8131393194811987)\n\nObservables\n\nTo calculate observables, pass the transformed Hamiltonian G to AllOverlaps with keyword argument transform=G.\n\n\n\n\n\n","category":"type"},{"location":"hamiltonians.html#Rimu.Hamiltonians.GuidingVectorSampling","page":"Hamiltonians","title":"Rimu.Hamiltonians.GuidingVectorSampling","text":"GuidingVectorSampling\n\nWrapper over any AbstractHamiltonian that implements guided vector a.k.a. guided wave function sampling. In this importance sampling scheme the Hamiltonian is modified as follows.\n\ntildeH_ij = v_i H_ij v_j^-1\n\nand where v is the guiding vector. v_i and v_j are also thresholded to avoid dividing by zero (see below).\n\nConstructors\n\nGuidingVectorSampling(::AbstractHamiltonian, vector, eps)\nGuidingVectorSampling(::AbstractHamiltonian; vector, eps)\n\neps is a thresholding parameter used to avoid dividing by zero; all values below eps are set to eps. It is recommended that eps is in the same value range as the guiding vector. The default value is set to eps=norm(v, Inf) * 1e-2\n\nAfter construction, we can access the underlying hamiltonian with G.hamiltonian, the eps parameter with G.eps, and the guiding vector with G.vector.\n\nExample\n\njulia> H = HubbardReal1D(BoseFS(1,1,1); u=6.0, t=1.0);\n\njulia> v = DVec(starting_address(H) => 10; capacity=1);\n\njulia> G = GuidingVectorSampling(H, v, 0.1);\n\njulia> get_offdiagonal(H, starting_address(H), 4)\n(BoseFS{3,3}(2, 0, 1), -1.4142135623730951)\n\njulia> get_offdiagonal(G, starting_address(G), 4)\n(BoseFS{3,3}(2, 0, 1), -0.014142135623730952)\n\nObservables\n\nTo calculate observables, pass the transformed Hamiltonian G to AllOverlaps with keyword argument transform=G.\n\n\n\n\n\n","category":"type"},{"location":"hamiltonians.html#Rimu.Hamiltonians.ParitySymmetry","page":"Hamiltonians","title":"Rimu.Hamiltonians.ParitySymmetry","text":"ParitySymmetry(ham::AbstractHamiltonian{T}; even=true) <: AbstractHamiltonian{T}\n\nImpose even or odd parity on all states and the Hamiltonian ham as controlled by the keyword argument even. Parity symmetry of the Hamiltonian is assumed. For some Hamiltonians, ParitySymmetry reduces the size of the Hilbert space by half.\n\nParitySymmetry performs a unitary transformation, leaving the eigenvalues unchanged and preserving the LOStructure. This is achieved by changing the basis set to states with defined parity. Effectively, a non-even address α is replaced by frac12(α  α) for even and odd parity, respectively, where ᾱ == reverse(α).\n\nNotes\n\nThis modifier currently only works on starting_addresss with an odd number of modes.\nFor odd parity, the starting_address of the underlying Hamiltonian cannot be symmetric.\nIf parity is not a symmetry of the Hamiltonian ham then the result is undefined.\nParitySymmetry works by modifying the offdiagonals iterator.\n\njulia> ham = HubbardReal1D(BoseFS(0,2,1))\nHubbardReal1D(fs\"|0 2 1⟩\"; u=1.0, t=1.0)\n\njulia> size(Matrix(ham))\n(10, 10)\n\njulia> size(Matrix(ParitySymmetry(ham)))\n(6, 6)\n\njulia> size(Matrix(ParitySymmetry(ham; odd=true)))\n(4, 4)\n\njulia> eigvals(Matrix(ham))[1] ≈ eigvals(Matrix(ParitySymmetry(ham)))[1]\ntrue\n\nSee also TimeReversalSymmetry.\n\n\n\n\n\n","category":"type"},{"location":"hamiltonians.html#Rimu.Hamiltonians.TimeReversalSymmetry","page":"Hamiltonians","title":"Rimu.Hamiltonians.TimeReversalSymmetry","text":"TimeReversalSymmetry(ham::AbstractHamiltonian{T}; even=true) <: AbstractHamiltonian{T}\n\nImpose even or odd time reversal on all states and the Hamiltonian ham as controlled by the keyword argument even. If time reversal is a symmetry of the Hamiltonian it will block (reducing Hilbert space dimension) preserving the eigenvalues and LOStructure.\n\nNotes\n\nThis modifier only works two component starting_addresses.\nFor odd time reversal symmetry, the starting_address of the underlying Hamiltonian must not be symmetric.\nIf time reversal is not a symmetry of the Hamiltonian ham then the result is undefined.\nTimeReversalSymmetry works by modifying the offdiagonals iterator.\n\njulia> ham = HubbardMom1D(FermiFS2C((1,0,1),(0,1,1)));\n\njulia> size(Matrix(ham))\n(3, 3)\n\njulia> size(Matrix(TimeReversalSymmetry(ham)))\n(2, 2)\n\njulia> size(Matrix(TimeReversalSymmetry(ham, even=false)))\n(1, 1)\n\njulia> eigvals(Matrix(TimeReversalSymmetry(ham)))[1] ≈ eigvals(Matrix(ham))[1]\ntrue\n\nSee also ParitySymmetry.\n\n\n\n\n\n","category":"type"},{"location":"hamiltonians.html#Rimu.Hamiltonians.Stoquastic","page":"Hamiltonians","title":"Rimu.Hamiltonians.Stoquastic","text":"Stoquastic(ham <: AbstractHamiltonian) <: AbstractHamiltonian\n\nA wrapper for an AbstractHamiltonian that replaces all off-diagonal matrix elements v by -abs(v), thus making the new Hamiltonian stoquastic.\n\nA stoquastic Hamiltonian does not have a Monte Carlo sign problem. For a hermitian ham the smallest eigenvalue of Stoquastic(ham) is ≤ the smallest eigenvalue of ham.\n\n\n\n\n\n","category":"type"},{"location":"hamiltonians.html#Observables","page":"Hamiltonians","title":"Observables","text":"","category":"section"},{"location":"hamiltonians.html","page":"Hamiltonians","title":"Hamiltonians","text":"Rimu.jl offers two other supertypes for operators that are less  restrictive than AbstractHamiltonian.  AbstractObservable and AbstractOperators both can represent a physical observable. Their expectation values can be sampled during a ProjectorMonteCarloProblem simulation by  passing them into a suitable ReplicaStrategy, e.g.  AllOverlaps. Some observables are also AbstractHamiltonians. The full type hierarchy is","category":"page"},{"location":"hamiltonians.html","page":"Hamiltonians","title":"Hamiltonians","text":"AbstractHamiltonian{T} <: AbstractOperator{T} <: AbstractObservable{T}","category":"page"},{"location":"hamiltonians.html","page":"Hamiltonians","title":"Hamiltonians","text":"AbstractObservable\nAbstractOperator\nParticleNumberOperator\nG2RealCorrelator\nG2RealSpace\nG2MomCorrelator\nSuperfluidCorrelator\nStringCorrelator\nDensityMatrixDiagonal\nSingleParticleExcitation\nTwoParticleExcitation\nMomentum\nAxialAngularMomentumHO","category":"page"},{"location":"hamiltonians.html#Rimu.Interfaces.AbstractObservable","page":"Hamiltonians","title":"Rimu.Interfaces.AbstractObservable","text":"AbstractObservable{T}\n\nMost permissive supertype for operators in the type hierarchy:\n\nAbstractHamiltonian{T} <: AbstractOperator{T} <: AbstractObservable{T}\n\nAbstractObservable provides an interface for operators that can appear in a three-way dot product dot(x, op, y) with two vectors of type AbstractDVec. The result is a value of type T, which is also returned by the eltype function. This may be a vector type associated with a scalar type returned by the scalartype function.\n\nThe AbstractObservable type is useful for defining observables that can be calculated in the context of a ProjectorMonteCarloProblem using AllOverlaps.\n\nInterface\n\nBasic interface methods to implement:\n\nInterfaces.dot_from_right(x, op, y)\nallows_address_type(op, type)\n\nOptional additional methods to implement:\n\nVectorInterface.scalartype(op): defaults to eltype(eltype(op))\nLOStructure(::Type{typeof(op)}): defaults to AdjointUnknown\n\nSee also AbstractOperator, AbstractHamiltonian, Interfaces.\n\n\n\n\n\n","category":"type"},{"location":"hamiltonians.html#Rimu.Interfaces.AbstractOperator","page":"Hamiltonians","title":"Rimu.Interfaces.AbstractOperator","text":"AbstractOperator{T} <: AbstractObservable{T}\n\nSupertype that provides an interface for linear operators over a linear space with elements of type T (returned by eltype) and general (custom type) indices called 'addresses'.\n\nAbstractOperator instances operate on vectors of type AbstractDVec from the module DictVectors and work well with addresses of type AbstractFockAddress from the module BitStringAddresses.\n\nThe defining feature of an AbstractOperator is that it can be applied to a vector with mul!(y, op, x) and that three-way dot products can be calculated with dot(x, op, y).\n\nThe AbstractOperator type is useful for defining operators that are not necessarily Hamiltonians, but that can be used in the context of a ProjectorMonteCarloProblem as observable operators in a ReplicaStrategy, e.g. for defining correlation functions. In contrast to AbstractHamiltonians, AbstractOperators do not need to have a starting_address. Moreover, the eltype of an AbstractOperator can be a vector value whereas AbstractHamiltonians requre a scalar eltype.\n\nAbstractHamiltonian{T} <: AbstractOperator{T} <: AbstractObservable{T}\n\nThe AbstractOperator type is part of the AbstractObservable hierarchy. It is more restrictive than AbstractObservable in that it requires the interface for the generation of diagonal and off-diagonal elements.\n\nFor concrete implementations see Hamiltonians. In order to implement a Hamiltonian for use in ProjectorMonteCarloProblem or ExactDiagonalizationProblem use the type AbstractHamiltonian instead.\n\nInterface\n\nBasic interface methods to implement:\n\nallows_address_type(op, type)\ndiagonal_element(op, address)\nnum_offdiagonals(op, address) and\nget_offdiagonal(op, address, chosen) or offdiagonals\n\nOptional additional methods to implement:\n\nVectorInterface.scalartype(op): defaults to eltype(eltype(op))\nLOStructure(::Type{typeof(op)}): defaults to AdjointUnknown\ndimension(op, addr): defaults to dimension of address space\n\nIn order to calculate observables efficiently, it may make sense to implement custom methods for Interfaces.dot_from_right(x, op, y) and LinearAlgebra.mul!(y, op, x).\n\nSee also AbstractHamiltonian, Interfaces.\n\n\n\n\n\n","category":"type"},{"location":"hamiltonians.html#Rimu.Hamiltonians.ParticleNumberOperator","page":"Hamiltonians","title":"Rimu.Hamiltonians.ParticleNumberOperator","text":"ParticleNumberOperator() <: AbstractOperator{Float64}\n\nThe number operator in Fock space. This operator is diagonal in the Fock basis and returns the number of particles in the Fock state. It works with any address type that is a subtype of AbstractFockAddress.\n\njulia> p = ExactDiagonalizationProblem(FroehlichPolaron(fs\"|0 0⟩{}\"; mode_cutoff=5, v=3));\n\njulia> gs = solve(p).vectors[1]; # normalised ground state vector\n\njulia> dot(gs, ParticleNumberOperator(), gs) # particle number expectation value\n2.8823297252925917\n\nSee also AbstractHamiltonian.\n\n\n\n\n\n","category":"type"},{"location":"hamiltonians.html#Rimu.Hamiltonians.G2RealCorrelator","page":"Hamiltonians","title":"Rimu.Hamiltonians.G2RealCorrelator","text":"G2RealCorrelator(d::Int) <: AbstractOperator{Float64}\n\nTwo-body operator for density-density correlation between sites separated by d with 0 ≤ d < M.\n\n    hatG^(2)(d) = frac1M sum_i^M hatn_i (hatn_i+d - delta_0d)\n\nAssumes a one-dimensional lattice with periodic boundary conditions where\n\n    hatG^(2)(-M2 leq d  0) = hatG^(2)(d)\n\n    hatG^(2)(M2  d  M) = hatG^(2)(M - d)\n\nand normalisation\n\n    sum_d=0^M-1 langle hatG^(2)(d) rangle = fracN (N-1)M\n\nFor multicomponent basis, calculates correlations between all particles equally, equivalent to stacking all components into a single Fock state.\n\nArguments\n\nd::Integer: distance between sites.\n\nSee also\n\nHubbardReal1D\nG2RealSpace\nG2MomCorrelator\nAbstractOperator\nAllOverlaps\n\n\n\n\n\n","category":"type"},{"location":"hamiltonians.html#Rimu.Hamiltonians.G2RealSpace","page":"Hamiltonians","title":"Rimu.Hamiltonians.G2RealSpace","text":"G2RealSpace(geometry::CubicGrid, σ=1, τ=1; sum_components=false) <: AbstractOperator{SArray}\n\nTwo-body operator for density-density correlation for all Displacements d in the specified geometry.\n\n    hatG^(2)_στ(d) = frac1M _i n_σi (n_τi+d - δ_0dδ_στ)\n\nFor multicomponent addresses, σ and τ control the components involved. Alternatively, sum_components can be set to true, which treats all particles as belonging to the same component.\n\nExamples\n\njulia> geom = CubicGrid(2, 2);\n\njulia> g2 = G2RealSpace(geom)\nG2RealSpace(CubicGrid((2, 2), (true, true)), 1,1)\n\njulia> diagonal_element(g2, BoseFS(2,0,1,1))\n2×2 StaticArraysCore.SMatrix{2, 2, Float64, 4} with indices SOneTo(2)×SOneTo(2):\n 0.5  1.0\n 0.5  1.0\n\njulia> g2_cross = G2RealSpace(geom, 1, 2)\nG2RealSpace(CubicGrid((2, 2), (true, true)), 1,2)\n\njulia> g2_sum = G2RealSpace(geom, sum_components=true)\nG2RealSpace(CubicGrid((2, 2), (true, true)); sum_components=true)\n\njulia> diagonal_element(g2, fs\"|⇅⋅↓↑⟩\")\n2×2 StaticArraysCore.SMatrix{2, 2, Float64, 4} with indices SOneTo(2)×SOneTo(2):\n 0.0  0.0\n 0.0  0.5\n\njulia> diagonal_element(g2_cross, fs\"|⇅⋅↓↑⟩\")\n2×2 StaticArraysCore.SMatrix{2, 2, Float64, 4} with indices SOneTo(2)×SOneTo(2):\n 0.25  0.25\n 0.25  0.25\n\njulia> diagonal_element(g2_sum, fs\"|⇅⋅↓↑⟩\")\n2×2 StaticArraysCore.SMatrix{2, 2, Float64, 4} with indices SOneTo(2)×SOneTo(2):\n 0.5  1.0\n 0.5  1.0\n\nSee also\n\nCubicGrid\nHubbardRealSpace\nG2RealCorrelator\nG2MomCorrelator\nAbstractOperator\nAllOverlaps\n\n\n\n\n\n","category":"type"},{"location":"hamiltonians.html#Rimu.Hamiltonians.G2MomCorrelator","page":"Hamiltonians","title":"Rimu.Hamiltonians.G2MomCorrelator","text":"G2MomCorrelator(d::Int,c=:cross) <: AbstractOperator{ComplexF64}\n\nTwo-body correlation operator representing the density-density correlation at distance d of a two component system in a momentum-space Fock-state basis. It returns a Complex value.\n\nCorrelation across two components:\n\nhatG^(2)(d) = frac1Msum_spqr=1^M e^-id(p-q)2πM a^_s b^_p  b_q a_r δ_s+pq+r\n\nCorrelation within a single component:\n\nhatG^(2)(d) = frac1Msum_spqr=1^M e^-id(p-q)2πM a^_s a^_p  a_q a_r δ_s+pq+r\n\nThe diagonal element, where (p-q)=0, is\n\nfrac1Msum_kp=1^M a^_k b^_p  b_p a_k \n\nArguments\n\nd::Integer: the distance between two particles.\nc: possible instructions: :cross: default instruction, computing correlation between particles across two components; :first: computing correlation between particles within the first component; :second: computing correlation between particles within the second component. These are the only defined instructions, using anything else will produce errors.\n\nTo use on a one-component system\n\nFor a system with only one component, e.g. with BoseFS, the second argument c is irrelevant and can be any of the above instructions, one could simply skip this argument and let it be the default value.\n\nSee also\n\nBoseHubbardMom1D2C\nBoseFS2C\nG2RealCorrelator\nG2RealSpace\nAbstractOperator\nAllOverlaps\n\n\n\n\n\n","category":"type"},{"location":"hamiltonians.html#Rimu.Hamiltonians.SuperfluidCorrelator","page":"Hamiltonians","title":"Rimu.Hamiltonians.SuperfluidCorrelator","text":"SuperfluidCorrelator(d::Int) <: AbstractOperator{Float64}\n\nOperator for extracting superfluid correlation between sites separated by a distance d with 0 ≤ d < M:\n\n    hatC_textSF(d) = frac1M sum_i^M a_i^dagger a_i + d\n\nAssumes a one-dimensional lattice with M sites and periodic boundary conditions. M is also the number of modes in the Fock state address.\n\nUsage\n\nSuperfluid correlations can be extracted from a Monte Carlo calculation by wrapping SuperfluidCorrelator with AllOverlaps and passing into ProjectorMonteCarloProblem with the replica keyword argument. For an example with a similar use of G2RealCorrelator see G2 Correlator Example.\n\nSee also HubbardReal1D, G2RealCorrelator, AbstractOperator, and AllOverlaps.\n\n\n\n\n\n","category":"type"},{"location":"hamiltonians.html#Rimu.Hamiltonians.StringCorrelator","page":"Hamiltonians","title":"Rimu.Hamiltonians.StringCorrelator","text":"StringCorrelator(d::Int; address=nothing, type=nothing) <: AbstractOperator{T}\n\nOperator for extracting string correlation between lattice sites on a one-dimensional Hubbard lattice separated by a distance d with 0 ≤ d < M\n\n    C_textstring(d) = frac1M sum_j^M δ n_j\n                                         (e^i π sum_j  k  j + d δ n_k) δ n_j+d\n\nHere, δ n_j = n_j - n is the boson number deviation from the mean filling number and n = NM is the mean filling number of lattice sites with N particles and M lattice sites (or modes).\n\nAssumes a one-dimensional lattice with periodic boundary conditions. For usage see SuperfluidCorrelator and AllOverlaps.\n\nThe default element type T is ComplexF64. This can be overridden with the type keyword argument. If an address is provided, then T is calculated from the address type. It is set to ComplexF64 for non-integer filling numbers, and to Float64 for integer filling numbers or if d==0.\n\nSee also HubbardReal1D, G2RealCorrelator, SuperfluidCorrelator, AbstractOperator, and AllOverlaps.\n\n\n\n\n\n","category":"type"},{"location":"hamiltonians.html#Rimu.Hamiltonians.DensityMatrixDiagonal","page":"Hamiltonians","title":"Rimu.Hamiltonians.DensityMatrixDiagonal","text":"DensityMatrixDiagonal(mode; component=0) <: AbstractHamiltonian\n\nRepresent a diagonal element of the single-particle density:\n\nhatn_iσ = hat a^_iσ hat a_iσ\n\nwhere i is the mode and σ is the component. If component is zero, the sum over all components is computed.\n\nSee also\n\nsingle_particle_density\nSingleParticleDensity\nSingleParticleExcitation\n\n\n\n\n\n","category":"type"},{"location":"hamiltonians.html#Rimu.Hamiltonians.SingleParticleExcitation","page":"Hamiltonians","title":"Rimu.Hamiltonians.SingleParticleExcitation","text":"SingleParticleExcitation(i, j) <: AbstractHamiltonian\n\nRepresent the ij element of the single-particle reduced density matrix:\n\nρ^(1)_ij = a^_i a_j\n\nwhere i <: Int and j <: Int specify the mode numbers.\n\nSee also\n\nsingle_particle_density\nSingleParticleDensity\nTwoParticleExcitation\n\n\n\n\n\n","category":"type"},{"location":"hamiltonians.html#Rimu.Hamiltonians.TwoParticleExcitation","page":"Hamiltonians","title":"Rimu.Hamiltonians.TwoParticleExcitation","text":"TwoParticleExcitation(i, j, k, l) <: AbstractHamiltonian\n\nRepresent the ij kl element of the two-particle reduced density matrix:\n\nρ^(2)_ij kl =  a^_i a^_j a_l a_k\n\nwhere i, j, k, and l (all <: Int) specify the mode numbers.\n\nSee also\n\nsingle_particle_density\nSingleParticleDensity\nSingleParticleExcitation\n\n\n\n\n\n","category":"type"},{"location":"hamiltonians.html#Rimu.Hamiltonians.Momentum","page":"Hamiltonians","title":"Rimu.Hamiltonians.Momentum","text":"Momentum(component=0; fold=true) <: AbstractHamiltonian\n\nThe momentum operator P.\n\nThe component argument controls which component of the address is taken into consideration. A value of 0 sums the contributions of all components. If fold is true, the momentum is folded into the Brillouin zone.\n\njulia> address = BoseFS((1, 0, 2, 1, 2, 1, 1, 3))\nBoseFS{11,8}(1, 0, 2, 1, 2, 1, 1, 3)\n\njulia> v = DVec(address => 10);\n\njulia> rayleigh_quotient(Momentum(), DVec(address => 1))\n-2.0\n\njulia> rayleigh_quotient(Momentum(fold=false), DVec(address => 1))\n14.0\n\n\n\n\n\n","category":"type"},{"location":"hamiltonians.html#Rimu.Hamiltonians.AxialAngularMomentumHO","page":"Hamiltonians","title":"Rimu.Hamiltonians.AxialAngularMomentumHO","text":"AxialAngularMomentumHO(S; z_dim = 3, addr = BoseFS(prod(S))) <: AbstractHamiltonian\n\nAngular momentum operator for application to Cartesian harmonic oscillator basis, see HOCartesianContactInteractions or HOCartesianEnergyConservedPerDim. Represents the projection of angular momentum onto z-axis:\n\nhatL_z = i hbar sum_j=1^N left( b_x b_y^dag - b_y b_x^dag right)\n\nwhere b_x^dag and b_x are raising and lowering (ladder) operators for  a harmonic oscillator in the x dimension, and simlarly for y.\n\nThis is implemented for an N particle Fock space with creation and annihilation operators as\n\nfrac1hbar hatL_z = i sum_n_x=1^M_x sum_n_y=1^M_y\n    left( a_n_x-1n_y+1^dag - a_n_x+1n_y-1^dag right) a_n_x n_y\n\nin units of hbar.\n\nArgument S is a tuple defining the range of Cartesian modes in each dimension and their mapping to Fock space modes in a SingleComponentFockAddress. If S indicates a 3D system the z dimension can be changed by setting z_dim; S should be be isotropic in the remaining x-y plane, i.e. must have S[x_dim] == S[y_dim]. The starting address addr only needs to satisfy num_modes(addr) == prod(S).\n\nExample\n\nCalculate the overlap of two Fock addresses interpreted as harmonic oscillator states in a 2D Cartesian basis\n\njulia> S = (2,2)\n(2, 2)\n\njulia> Lz = AxialAngularMomentumHO(S)\nAxialAngularMomentumHO((2, 2); z_dim = 3, addr = BoseFS{0,4}(0, 0, 0, 0))\n\njulia> v = DVec(BoseFS(prod(S), 2 => 1) => 1.0)\nDVec{BoseFS{1, 4, BitString{4, 1, UInt8}},Float64} with 1 entry, style = IsDeterministic{Float64}()\n  fs\"|0 1 0 0⟩\" => 1.0\n\njulia> w = DVec(BoseFS(prod(S), 3 => 1) => 1.0)\nDVec{BoseFS{1, 4, BitString{4, 1, UInt8}},Float64} with 1 entry, style = IsDeterministic{Float64}()\n  fs\"|0 0 1 0⟩\" => 1.0\n\njulia> dot(w, Lz, v)\n0.0 + 1.0im\n\n\n\n\n\n","category":"type"},{"location":"hamiltonians.html#Hamiltonians-interface","page":"Hamiltonians","title":"Hamiltonians interface","text":"","category":"section"},{"location":"hamiltonians.html","page":"Hamiltonians","title":"Hamiltonians","text":"Behind the implementation of a particular model is a more abstract interface for defining Hamiltonians. If you want to define a new model you should make use of this interface. The most general form of a model Hamiltonian should subtype to AbstractHamiltonian and implement the relevant methods.","category":"page"},{"location":"hamiltonians.html","page":"Hamiltonians","title":"Hamiltonians","text":"AbstractHamiltonian\noffdiagonals\ndiagonal_element\nstarting_address","category":"page"},{"location":"hamiltonians.html#Rimu.Interfaces.AbstractHamiltonian","page":"Hamiltonians","title":"Rimu.Interfaces.AbstractHamiltonian","text":"AbstractHamiltonian{T} <: AbstractOperator{T}\n\nSupertype that provides an interface for linear operators over a linear space with scalar type T that are suitable for FCIQMC (with ProjectorMonteCarloProblem). Indexing is done with addresses (typically not integers) from an address space that may be large (and will not need to be completely generated).\n\nAbstractHamiltonian instances operate on vectors of type AbstractDVec from the module DictVectors and work well with addresses of type AbstractFockAddress from the module BitStringAddresses. The type works well with the external package KrylovKit.jl.\n\nFor available implementations see Hamiltonians.\n\nInterface\n\nBasic interface methods to implement:\n\nstarting_address(::AbstractHamiltonian)\ndiagonal_element(::AbstractHamiltonian, address)\nnum_offdiagonals(::AbstractHamiltonian, address)\nget_offdiagonal(::AbstractHamiltonian, address, chosen::Integer) (optional, see   below)\n\nOptional additional methods to implement:\n\nLOStructure(::Type{typeof(lo)}): defaults to AdjointUnknown\ndimension(::AbstractHamiltonian, addr): defaults to dimension of address space\nallows_address_type(h::AbstractHamiltonian, type): defaults to type :< typeof(starting_address(h))\nmomentum(::AbstractHamiltonian): no default\n\nProvides the following functions and methods:\n\noffdiagonals: iterator over reachable off-diagonal matrix elements\nrandom_offdiagonal: function to generate random off-diagonal matrix element\n*(H, v): deterministic matrix-vector multiply (allocating)\nH(v): equivalent to H * v.\nmul!(w, H, v): mutating matrix-vector multiply.\ndot(x, H, v): compute x⋅(H*v) minimizing allocations.\nH[address1, address2]: indexing with getindex() - mostly for testing purposes (slow!)\nBasisSetRepresentation: construct a basis set repesentation\nsparse, Matrix: construct a (sparse) matrix representation\n\nAlternatively to the above, offdiagonals can be implemented instead of get_offdiagonal. Sometimes this can be done efficiently. In this case num_offdiagonals should provide an upper bound on the number of elements obtained when iterating offdiagonals.\n\nSee also Hamiltonians, Interfaces, AbstractOperator, AbstractObservable.\n\n\n\n\n\n","category":"type"},{"location":"hamiltonians.html#Rimu.Interfaces.offdiagonals","page":"Hamiltonians","title":"Rimu.Interfaces.offdiagonals","text":"offdiagonals(h::AbstractHamiltonian, address)\n\nReturn an iterator over nonzero off-diagonal matrix elements of h in the same column as address. Will iterate over pairs (newaddress, matrixelement).\n\nExample\n\njulia> address = BoseFS(3,2,1);\n\n\njulia> H = HubbardReal1D(address);\n\n\njulia> h = offdiagonals(H, address)\n6-element Rimu.Hamiltonians.Offdiagonals{BoseFS{6, 3, BitString{8, 1, UInt8}}, Float64, HubbardReal1D{Float64, BoseFS{6, 3, BitString{8, 1, UInt8}}, 1.0, 1.0}}:\n (fs\"|2 3 1⟩\", -3.0)\n (fs\"|2 2 2⟩\", -2.449489742783178)\n (fs\"|3 1 2⟩\", -2.0)\n (fs\"|4 1 1⟩\", -2.8284271247461903)\n (fs\"|4 2 0⟩\", -2.0)\n (fs\"|3 3 0⟩\", -1.7320508075688772)\n\nPart of the AbstractHamiltonian interface.\n\nExtemded help\n\noffdiagonals return and iterator of type <:AbstractOffdiagonals. It defaults to returning Offdiagonals(h, a)\n\nSee also Offdiagonals, AbstractOffdiagonals.\n\n\n\n\n\n","category":"function"},{"location":"hamiltonians.html#Rimu.Interfaces.diagonal_element","page":"Hamiltonians","title":"Rimu.Interfaces.diagonal_element","text":"diagonal_element(ham, address)\n\nCompute the diagonal matrix element of the linear operator ham at address address.\n\nExample\n\njulia> address = BoseFS((3, 2, 1));\n\n\njulia> H = HubbardMom1D(address);\n\n\njulia> diagonal_element(H, address)\n8.666666666666664\n\nPart of the AbstractHamiltonian interface.\n\n\n\n\n\n","category":"function"},{"location":"hamiltonians.html#Rimu.Interfaces.starting_address","page":"Hamiltonians","title":"Rimu.Interfaces.starting_address","text":"starting_address(h)\n\nReturn the starting address for Hamiltonian h. When called on an AbstractMatrix, starting_address returns the index of the lowest diagonal element.\n\nExample\n\njulia> address = BoseFS((3, 2, 1));\n\n\njulia> H = HubbardMom1D(address);\n\n\njulia> address == starting_address(H)\ntrue\n\nPart of the AbstractHamiltonian interface.\n\n\n\n\n\n","category":"function"},{"location":"hamiltonians.html","page":"Hamiltonians","title":"Hamiltonians","text":"The following functions may be implemented instead of offdiagonals.","category":"page"},{"location":"hamiltonians.html","page":"Hamiltonians","title":"Hamiltonians","text":"num_offdiagonals\nget_offdiagonal","category":"page"},{"location":"hamiltonians.html#Rimu.Interfaces.num_offdiagonals","page":"Hamiltonians","title":"Rimu.Interfaces.num_offdiagonals","text":"num_offdiagonals(ham, address)\n\nCompute the number of number of reachable configurations from address address.\n\nExample\n\njulia> address = BoseFS((3, 2, 1));\n\n\njulia> H = HubbardMom1D(address);\n\n\njulia> num_offdiagonals(H, address)\n10\n\nPart of the AbstractHamiltonian interface.\n\n\n\n\n\n","category":"function"},{"location":"hamiltonians.html#Rimu.Interfaces.get_offdiagonal","page":"Hamiltonians","title":"Rimu.Interfaces.get_offdiagonal","text":"newadd, me = get_offdiagonal(ham, address, chosen)\n\nCompute value me and new address newadd of a single (off-diagonal) matrix element in a Hamiltonian ham. The off-diagonal element is in the same column as address address and is indexed by integer index chosen.\n\nExample\n\njulia> addr = BoseFS(3, 2, 1);\n\njulia> H = HubbardMom1D(addr);\n\njulia> get_offdiagonal(H, addr, 3)\n(BoseFS{6,3}(2, 1, 3), 1.0)\n\nPart of the AbstractHamiltonian interface.\n\n\n\n\n\n","category":"function"},{"location":"hamiltonians.html","page":"Hamiltonians","title":"Hamiltonians","text":"The following functions come with default implementations, but may be customized.","category":"page"},{"location":"hamiltonians.html","page":"Hamiltonians","title":"Hamiltonians","text":"random_offdiagonal\nHamiltonians.LOStructure\ndimension\nhas_adjoint\nallows_address_type\nBase.eltype\nVectorInterface.scalartype\nmul!","category":"page"},{"location":"hamiltonians.html#Rimu.Interfaces.random_offdiagonal","page":"Hamiltonians","title":"Rimu.Interfaces.random_offdiagonal","text":"random_offdiagonal(offdiagonals::AbstractOffdiagonals)\nrandom_offdiagonal(ham::AbstractHamiltonian, address)\n-> newaddress, probability, matrixelement\n\nGenerate a single random excitation, i.e. choose from one of the accessible off-diagonal elements in the column corresponding to address in the Hamiltonian matrix represented by ham. Alternatively, pass as argument an iterator over the accessible matrix elements.\n\nPart of the AbstractHamiltonian interface.\n\n\n\n\n\n","category":"function"},{"location":"hamiltonians.html#Rimu.Interfaces.LOStructure","page":"Hamiltonians","title":"Rimu.Interfaces.LOStructure","text":"LOStructure(op::AbstractHamiltonian)\nLOStructure(typeof(op))\n\nReturn information about the structure of the linear operator op. LOStructure is used as a trait to speficy symmetries or other properties of the linear operator op that may simplify or speed up calculations. Implemented instances are:\n\nIsDiagonal(): The operator is diagonal.\nIsHermitian(): The operator is complex and Hermitian or real and symmetric.\nAdjointKnown(): The operator is not Hermitian, but its   adjoint is implemented.\nAdjointUnknown(): adjoint for this operator is not   implemented.\n\nPart of the AbstractHamiltonian interface.\n\nIn order to define this trait for a new linear operator type, define a method for LOStructure(::Type{<:MyNewLOType}) = ….\n\n\n\n\n\n","category":"type"},{"location":"hamiltonians.html#Rimu.Hamiltonians.dimension","page":"Hamiltonians","title":"Rimu.Hamiltonians.dimension","text":"dimension(h::AbstractHamiltonian, addr=starting_address(h))\ndimension(h::AbstractOperator, addr)\ndimension(addr::AbstractFockAddress)\ndimension(::Type{<:AbstractFockAddress})\n\nReturn the estimated dimension of Hilbert space. May return a BigInt number.\n\nWhen called on an address or address type, the dimension of the linear space spanned by the address type is returned. When called on an AbstractHamiltonian, an upper bound on the dimension of the matrix representing the Hamiltonian is returned.\n\nExamples\n\njulia> dimension(OccupationNumberFS(1,2,3))\n16777216\n\njulia> dimension(HubbardReal1D(OccupationNumberFS(1,2,3)))\n28\n\njulia> dimension(BoseFS{200,100})\n1386083821086188248261127842108801860093488668581216236221011219101585442774669540\n\njulia> Float64(ans)\n1.3860838210861882e81\n\nPart of the AbstractHamiltonian interface. See also BasisSetRepresentation.\n\nExtended Help\n\nThe default fallback for dimension called on an AbstractHamiltonian is to return the dimension of the address space, which provides an upper bound. For new Hamiltonians a tighter bound can be provided by defining a custom method.\n\nWhen extending AbstractHamiltonian, define a method for the two-argument form dimension(h::MyNewHamiltonian, addr). For number-conserving Hamiltonians, the function Hamiltonians.number_conserving_dimension may be useful.\n\nWhen extending AbstractFockAddress, define a method for dimension(::Type{MyNewFockAddress}).\n\n\n\n\n\n","category":"function"},{"location":"hamiltonians.html#Rimu.Interfaces.has_adjoint","page":"Hamiltonians","title":"Rimu.Interfaces.has_adjoint","text":"has_adjoint(op)\n\nReturn true if adjoint is defined on op.\n\nPart of the AbstractHamiltonian interface.\n\nSee also LOStructure.\n\n\n\n\n\n","category":"function"},{"location":"hamiltonians.html#Rimu.Interfaces.allows_address_type","page":"Hamiltonians","title":"Rimu.Interfaces.allows_address_type","text":"allows_address_type(operator, addr_or_type)\n\nReturns true if addr_or_type is a valid address for operator. Otherwise, returns false.\n\nPart of the AbstractHamiltonian interface.\n\nExtended help\n\nDefaults to addr_or_type <: typeof(starting_address(operator)). Overload this function if the operator can be used with addresses of different types.\n\n\n\n\n\n","category":"function"},{"location":"hamiltonians.html#Base.eltype","page":"Hamiltonians","title":"Base.eltype","text":"eltype(op::AbstractObservable)\n\nReturn the type of the elements of the operator. This can be a vector value. For the underlying scalar type use scalartype.\n\nPart of the AbstractObservable interface.\n\nnote: Note\nNew types do not have to implement this method explicitly. An implementation is provided based on the AbstractObservable's type parameter.\n\n\n\n\n\n","category":"function"},{"location":"hamiltonians.html#VectorInterface.scalartype","page":"Hamiltonians","title":"VectorInterface.scalartype","text":"scalartype(op::AbstractObservable)\n\nReturn the type of the underlying scalar field of the operator. This may be different from the element type of the operator returned by eltype, which can be a vector value.\n\nPart of the AbstractObservable interface.\n\nnote: Note\nNew types do not have to implement this method explicitly. An implementation is provided based on the AbstractObservable's type parameter.\n\n\n\n\n\n","category":"function"},{"location":"hamiltonians.html#LinearAlgebra.mul!","page":"Hamiltonians","title":"LinearAlgebra.mul!","text":"LinearAlgebra.mul!(w::AbstractDVec, op::AbstractOperator, v::AbstractDVec)\n\nIn place multiplication of op with v and storing the result in w. The result is returned. Note that w needs to have a valtype that can hold a product of instances of eltype(op) and valtype(v). Moreover, the StochasticStyle of w needs to be <:IsDeterministic.\n\nPart of the AbstractOperator interface.\n\nThe default implementation relies of diagonal_element and offdiagonals to access the elements of the operator. The function can be overloaded for custom operators.\n\n\n\n\n\n","category":"function"},{"location":"hamiltonians.html","page":"Hamiltonians","title":"Hamiltonians","text":"This interface relies on unexported functionality, including","category":"page"},{"location":"hamiltonians.html","page":"Hamiltonians","title":"Hamiltonians","text":"Hamiltonians.adjoint\nHamiltonians.dot\nHamiltonians.AbstractOffdiagonals\nHamiltonians.Offdiagonals\nHamiltonians.check_address_type\nHamiltonians.number_conserving_dimension\nHamiltonians.number_conserving_bose_dimension\nHamiltonians.number_conserving_fermi_dimension","category":"page"},{"location":"hamiltonians.html#Base.adjoint","page":"Hamiltonians","title":"Base.adjoint","text":"adjoint(::LOStructure, op::AbstractOperator)\n\nRepresent the adjoint of an AbstractOperator. Extend this method to define custom adjoints.\n\n\n\n\n\n","category":"function"},{"location":"hamiltonians.html#LinearAlgebra.dot","page":"Hamiltonians","title":"LinearAlgebra.dot","text":"dot(w, op::AbstractObservable, v)\n\nEvaluate w⋅op(v) minimizing memory allocations.\n\n\n\n\n\n","category":"function"},{"location":"hamiltonians.html#Rimu.Hamiltonians.AbstractOffdiagonals","page":"Hamiltonians","title":"Rimu.Hamiltonians.AbstractOffdiagonals","text":"AbstractOffdiagonals{A,T}<:AbstractVector{Tuple{A,T}}\n\nIterator over new address and matrix elements for reachable off-diagonal matrix elements of a linear operator.\n\nSee Offdiagonals for a default implementation.\n\nMethods to define\n\noffdiagonals(h, a)::AbstractOffdiagonals: This function is used to construct the correct type of offdiagonals for a given combination of Hamiltonian h and Fock address a.\nBase.getindex(::AbstractOffdiagonals, i): should be equivalent to get_offdiagonal(h, a, i).\nBase.size(::AbstractOffdiagonals): should be equivalent to num_offdiagonals(h, a).\n\nSee also offdiagonals, AbstractHamiltonian, AbstractOperator.\n\n\n\n\n\n","category":"type"},{"location":"hamiltonians.html#Rimu.Hamiltonians.Offdiagonals","page":"Hamiltonians","title":"Rimu.Hamiltonians.Offdiagonals","text":"Offdiagonals(h, address) <: AbstractOffdiagonals\n\nIterator over new address and matrix element for reachable off-diagonal matrix elements of linear operator h from address address.  Represents an abstract vector containing the non-zero off-diagonal matrix elements of the column of h indexed by address. To construct this iterator use offdiagonals.\n\nThis is the default implementation of AbstractOffdiagonals defined in terms of num_offdiagonals and get_offdiagonal.\n\nSee also offdiagonals, AbstractHamiltonian, AbstractOperator.\n\n\n\n\n\n","category":"type"},{"location":"hamiltonians.html#Rimu.Hamiltonians.check_address_type","page":"Hamiltonians","title":"Rimu.Hamiltonians.check_address_type","text":"check_address_type(h::AbstractOperator, addr_or_type)\n\nThrow an ArgumentError if addr_or_type is not compatible with h, otherwise return true. Acceptable arguments are either an address or an address type, or a tuple or array thereof.\n\nSee also allows_address_type.\n\n\n\n\n\n","category":"function"},{"location":"hamiltonians.html#Rimu.Hamiltonians.number_conserving_dimension","page":"Hamiltonians","title":"Rimu.Hamiltonians.number_conserving_dimension","text":"number_conserving_dimension(address <: AbstractFockAddress)\n\nReturn the dimension of the Fock space spanned by the address type assuming particle number conservation.\n\nSee also number_conserving_bose_dimension, number_conserving_fermi_dimension, dimension.\n\n\n\n\n\n","category":"function"},{"location":"hamiltonians.html#Rimu.Hamiltonians.number_conserving_bose_dimension","page":"Hamiltonians","title":"Rimu.Hamiltonians.number_conserving_bose_dimension","text":"number_conserving_bose_dimension(n, m)\n\nReturn the dimension of the number-conserving Fock space for n bosons in m modes: binomial(n + m - 1, n).\n\nSee also number_conserving_fermi_dimension, number_conserving_dimension.\n\n\n\n\n\n","category":"function"},{"location":"hamiltonians.html#Rimu.Hamiltonians.number_conserving_fermi_dimension","page":"Hamiltonians","title":"Rimu.Hamiltonians.number_conserving_fermi_dimension","text":"number_conserving_fermi_dimension(n, m)\n\nReturn the dimension of the number-conserving Fock space for n fermions in m modes: binomial(m, n).\n\nSee also number_conserving_bose_dimension, number_conserving_dimension.\n\n\n\n\n\n","category":"function"},{"location":"hamiltonians.html#Geometry","page":"Hamiltonians","title":"Geometry","text":"","category":"section"},{"location":"hamiltonians.html","page":"Hamiltonians","title":"Hamiltonians","text":"Lattices in higher dimensions are defined here for HubbardRealSpace and G2RealSpace.","category":"page"},{"location":"hamiltonians.html","page":"Hamiltonians","title":"Hamiltonians","text":"CubicGrid\nHamiltonians.Directions\nHamiltonians.Displacements\nHamiltonians.neighbor_site\nPeriodicBoundaries\nHardwallBoundaries\nLadderBoundaries","category":"page"},{"location":"hamiltonians.html#Rimu.Hamiltonians.CubicGrid","page":"Hamiltonians","title":"Rimu.Hamiltonians.CubicGrid","text":"CubicGrid(dims::NTuple{D,Int}, fold::NTuple{D,Bool})\n\nRepresents a D-dimensional grid. Used to define a cubic lattice and boundary conditions for some AbstractHamiltonians. The type instance can be used to convert between cartesian vector indices (tuples or SVectors) and linear indices (integers). When indexed with vectors, it folds them back into the grid if the out-of-bounds dimension is periodic and 0 otherwise (see example below).\n\ndims controls the size of the grid in each dimension.\nfold controls whether the boundaries in each dimension are periodic (or folded in the case of momentum space).\n\njulia> geo = CubicGrid((2,3), (true,false))\nCubicGrid{2}((2, 3), (true, false))\n\njulia> geo[1]\n(1, 1)\n\njulia> geo[2]\n(2, 1)\n\njulia> geo[3]\n(1, 2)\n\njulia> geo[(1,2)]\n3\n\njulia> geo[(3,2)] # 3 is folded back into 1\n3\n\njulia> geo[(3,3)]\n5\n\njulia> geo[(3,4)] # returns 0 if out of bounds\n0\n\nSee also PeriodicBoundaries, HardwallBoundaries and LadderBoundaries for special-case constructors.\n\n\n\n\n\n","category":"type"},{"location":"hamiltonians.html#Rimu.Hamiltonians.Directions","page":"Hamiltonians","title":"Rimu.Hamiltonians.Directions","text":"Directions(D) <: AbstractVector{SVector{D,Int}}\nDirections(geometry::CubicGrid) <: AbstractVector{SVector{D,Int}}\n\nIterate over axis-aligned direction vectors in D dimensions.\n\njulia> Directions(3)\n6-element Directions{3}:\n [1, 0, 0]\n [0, 1, 0]\n [0, 0, 1]\n [-1, 0, 0]\n [0, -1, 0]\n [0, 0, -1]\n\n\nSee also CubicGrid.\n\n\n\n\n\n","category":"type"},{"location":"hamiltonians.html#Rimu.Hamiltonians.Displacements","page":"Hamiltonians","title":"Rimu.Hamiltonians.Displacements","text":"Displacements(geometry::CubicGrid) <: AbstractVector{SVector{D,Int}}\n\nReturn all valid offset vectors in a CubicGrid. If center=true the (0,0) displacement is placed at the centre of the array.\n\njulia> geometry = CubicGrid((3,4));\n\njulia> reshape(Displacements(geometry), (3,4))\n3×4 reshape(::Displacements{2, CubicGrid{2, (3, 4), (true, true)}}, 3, 4) with eltype StaticArraysCore.SVector{2, Int64}:\n [0, 0]  [0, 1]  [0, 2]  [0, 3]\n [1, 0]  [1, 1]  [1, 2]  [1, 3]\n [2, 0]  [2, 1]  [2, 2]  [2, 3]\n\njulia> reshape(Displacements(geometry; center=true), (3,4))\n3×4 reshape(::Displacements{2, CubicGrid{2, (3, 4), (true, true)}}, 3, 4) with eltype StaticArraysCore.SVector{2, Int64}:\n [-1, -1]  [-1, 0]  [-1, 1]  [-1, 2]\n [0, -1]   [0, 0]   [0, 1]   [0, 2]\n [1, -1]   [1, 0]   [1, 1]   [1, 2]\n\n\n\n\n\n\n","category":"type"},{"location":"hamiltonians.html#Rimu.Hamiltonians.neighbor_site","page":"Hamiltonians","title":"Rimu.Hamiltonians.neighbor_site","text":"neighbor_site(geom::CubicGrid, site, i)\n\nFind the i-th neighbor of site in the geometry. If the move is illegal, return 0.\n\n\n\n\n\n","category":"function"},{"location":"hamiltonians.html#Rimu.Hamiltonians.PeriodicBoundaries","page":"Hamiltonians","title":"Rimu.Hamiltonians.PeriodicBoundaries","text":"PeriodicBoundaries(dims...) -> CubicGrid\nPeriodicBoundaries(dims) -> CubicGrid\n\nReturn CubicGrid with all dimensions periodic. Equivalent to CubicGrid(dims).\n\n\n\n\n\n","category":"function"},{"location":"hamiltonians.html#Rimu.Hamiltonians.HardwallBoundaries","page":"Hamiltonians","title":"Rimu.Hamiltonians.HardwallBoundaries","text":"HardwallBoundaries(dims...) -> CubicGrid\nHardwallBoundaries(dims) -> CubicGrid\n\nReturn CubicGrid with all dimensions non-periodic. Equivalent to CubicGrid(dims, (false, false, ...)).\n\n\n\n\n\n","category":"function"},{"location":"hamiltonians.html#Rimu.Hamiltonians.LadderBoundaries","page":"Hamiltonians","title":"Rimu.Hamiltonians.LadderBoundaries","text":"LadderBoundaries(dims...) -> CubicGrid\nLadderBoundaries(dims) -> CubicGrid\n\nReturn CubicGrid where the first dimension is dimensions non-periodic and the rest are periodic. Equivalent to CubicGrid(dims, (true, false, ...)).\n\n\n\n\n\n","category":"function"},{"location":"hamiltonians.html#Harmonic-Oscillator","page":"Hamiltonians","title":"Harmonic Oscillator","text":"","category":"section"},{"location":"hamiltonians.html","page":"Hamiltonians","title":"Hamiltonians","text":"Useful utilities for harmonic oscillator in Cartesian basis, see HOCartesianContactInteractions and HOCartesianEnergyConservedPerDim.","category":"page"},{"location":"hamiltonians.html","page":"Hamiltonians","title":"Hamiltonians","text":"get_all_blocks\nfock_to_cart","category":"page"},{"location":"hamiltonians.html#Rimu.Hamiltonians.get_all_blocks","page":"Hamiltonians","title":"Rimu.Hamiltonians.get_all_blocks","text":"get_all_blocks(h::Union{HOCartesianContactInteractions,HOCartesianEnergyConservedPerDim}; \n    target_energy = nothing, \n    max_energy = nothing, \n    max_blocks = nothing, \n    method = :vertices,\n    kwargs...) -> df\n\nFind all distinct blocks of h. Returns a DataFrame with columns \n\nblock_id: index of block in order found\nblock_E0: noninteracting energy of all elements in the block\nblock_size: number of elements in the block\naddr: first address that generates the block with e.g. BasisSetRep\nindices: tuple of mode indices that allow recreation of the generating address    addr; in this case use e.g. BoseFS(M; indices .=> 1) This is useful when    the DataFrame is loaded from file since Arrow.jl converts custom   types to NamedTuples.\nt_basis: time to generate the basis for each block\n\nKeyword arguments:\n\ntarget_energy: only blocks with this noninteracting energy are found\nmax_energy: only blocks with noninteracting energy less than this are found\nmax_blocks: exit after finding this many blocks\nmethod: Choose between :vertices and :comb for method of enumerating    tuples of quantum numbers\nsave_to_file=nothing: if set then the DataFrame recording blocks is saved    after each new block is found\nadditional kwargs: passed to isapprox for comparing block energies.    Useful for anisotropic traps\n\nNote: If h was constructed with option block_by_level = false then the block seeds  addr are determined by parity. In this case the blocks are not generated; t_basis  will be zero, and block_size will be an estimate. Pass the seed addresses to  BasisSetRep with an appropriate filter to generate the blocks.\n\n\n\n\n\n","category":"function"},{"location":"hamiltonians.html#Rimu.Hamiltonians.fock_to_cart","page":"Hamiltonians","title":"Rimu.Hamiltonians.fock_to_cart","text":"fock_to_cart(addr, S; zero_index = true)\n\nConvert a Fock state address addr to Cartesian harmonic oscillator basis  indices n_xn_yldots. These indices are bounded by S which is a  tuple of the maximum number of states in each dimension. By default the  groundstate in each dimension is indexed by 0, but this can be changed  by setting zero_index = false.\n\n\n\n\n\n","category":"function"},{"location":"hamiltonians.html","page":"Hamiltonians","title":"Hamiltonians","text":"Underlying integrals for the interaction matrix elements are implemented in the following unexported functions","category":"page"},{"location":"hamiltonians.html","page":"Hamiltonians","title":"Hamiltonians","text":"Hamiltonians.four_oscillator_integral_general\nHamiltonians.ho_delta_potential\nHamiltonians.log_abs_oscillator_zero","category":"page"},{"location":"hamiltonians.html#Rimu.Hamiltonians.four_oscillator_integral_general","page":"Hamiltonians","title":"Rimu.Hamiltonians.four_oscillator_integral_general","text":"four_oscillator_integral_general(i, j, k, l; max_level = typemax(Int))\n\nIntegral of four one-dimensional harmonic oscillator functions,\n\n    mathcalI(ijkl) = int_-infty^infty dx \n    phi_i(x) phi_j(x) phi_k(x) phi_l(x)\n\nIndices i,j,k,l start at 0 for the groundstate.\n\nThis integral has a closed form in terms of the hypergeometric _3F_2 function, and is non-zero unless i+j+k+l is odd. See e.g. Titchmarsh (1948). This is a generalisation of the closed form in Papenbrock (2002), which is is the special case where i+j == k+l, but is numerically unstable for large arguments. Used in HOCartesianContactInteractions and HOCartesianEnergyConservedPerDim.\n\n\n\n\n\n","category":"function"},{"location":"hamiltonians.html#Rimu.Hamiltonians.ho_delta_potential","page":"Hamiltonians","title":"Rimu.Hamiltonians.ho_delta_potential","text":"ho_delta_potential(S, i, j; [vals])\n\nReturns the matrix element of a delta potential at the centre of a trap, i.e. the  product of two harmonic oscillator functions evaluated at the origin,\n\n    v_ij = phi_mathbfn_i(0) phi_mathbfn_j(0)\n\nwhich is only non-zero for even-parity states. The ith single particle state corresponds to a D-tuple of harmonic oscillator indices mathbfn_i. S defines the bounds of Cartesian harmonic oscillator indices for each dimension. The optional keyword argument vals allows passing pre-computed values of phi_i(0) to speed-up the calculation. The values can be calculated with log_abs_oscillator_zero.\n\nSee also HOCartesianCentralImpurity.\n\n\n\n\n\n","category":"function"},{"location":"hamiltonians.html#Rimu.Hamiltonians.log_abs_oscillator_zero","page":"Hamiltonians","title":"Rimu.Hamiltonians.log_abs_oscillator_zero","text":"log_abs_oscillator_zero(n)\n\nCompute the logarithm of the absolute value of the n^mathrmth 1D harmonic oscillator function evaluated at the origin. The overall sign is determined when the matrix element is evaluated in ho_delta_potential.\n\n\n\n\n\n","category":"function"},{"location":"hamiltonians.html#Index","page":"Hamiltonians","title":"Index","text":"","category":"section"},{"location":"hamiltonians.html","page":"Hamiltonians","title":"Hamiltonians","text":"Pages   = [\"hamiltonians.md\"]","category":"page"},{"location":"testing.html#Code-testing","page":"Code testing","title":"Code testing","text":"","category":"section"},{"location":"testing.html","page":"Code testing","title":"Code testing","text":"The script runtest.jl in the test/ folder contains tests of the code. To run the test simply run the script from the Julia REPL or run","category":"page"},{"location":"testing.html","page":"Code testing","title":"Code testing","text":"Rimu$ julia test/runtest.jl","category":"page"},{"location":"testing.html","page":"Code testing","title":"Code testing","text":"from the command line.","category":"page"},{"location":"testing.html","page":"Code testing","title":"Code testing","text":"More tests should be added over time to test core functionality of the code. To add new tests, directly edit the file runtest.jl.","category":"page"},{"location":"testing.html#Automated-testing-with-GitHub-Actions","page":"Code testing","title":"Automated testing with GitHub Actions","text":"","category":"section"},{"location":"testing.html","page":"Code testing","title":"Code testing","text":"GitHub Actions are set up to run the test script automatically on the GitHub cloud server every time a new commit to the master branch is pushed to the server. The setup for this to happen is configured in the file actions.yml in the Rimu/.github/workflows folder.","category":"page"},{"location":"exactdiagonalization.html#Exact-Diagonalization","page":"Exact Diagonalization","title":"Exact Diagonalization","text":"","category":"section"},{"location":"exactdiagonalization.html","page":"Exact Diagonalization","title":"Exact Diagonalization","text":"The main functionality of Rimu for exact diagonalization is contained in the module ExactDiagonalization.","category":"page"},{"location":"exactdiagonalization.html","page":"Exact Diagonalization","title":"Exact Diagonalization","text":"ExactDiagonalization","category":"page"},{"location":"exactdiagonalization.html#Rimu.ExactDiagonalization","page":"Exact Diagonalization","title":"Rimu.ExactDiagonalization","text":"The module Rimu.ExactDiagonalization provides a framework for exact diagonalization of quantum many-body systems defined by an AbstractHamiltonian type.\n\nThe main usage is through defining an ExactDiagonalizationProblem and solving it with the solve function. The module provides a unified interface for accessing different solver algorithms, which make use of solvers provided by external packages.\n\nExports\n\nExactDiagonalizationProblem\nBasisSetRepresentation\nbuild_basis\nKrylovKitSolver\nLinearAlgebraSolver\nArpackSolver\nLOBPCGSolver\n\n\n\n\n\n","category":"module"},{"location":"exactdiagonalization.html#ExactDiagonalizationProblem","page":"Exact Diagonalization","title":"ExactDiagonalizationProblem","text":"","category":"section"},{"location":"exactdiagonalization.html","page":"Exact Diagonalization","title":"Exact Diagonalization","text":"ExactDiagonalizationProblem\nsolve(::ExactDiagonalizationProblem)\ninit(::ExactDiagonalizationProblem)","category":"page"},{"location":"exactdiagonalization.html#Rimu.ExactDiagonalization.ExactDiagonalizationProblem","page":"Exact Diagonalization","title":"Rimu.ExactDiagonalization.ExactDiagonalizationProblem","text":"ExactDiagonalizationProblem(hamiltonian::AbstractHamiltonian, [v0]; kwargs...)\n\nDefines an exact diagonalization problem with an AbstractHamiltonian hamiltonian. Optionally, a starting vector of type AbstractDVec, or a single address or a collection of addresses can be passed as v0.\n\nExactDiagonalizationProblems can be solved with solve.\n\nKeyword arguments\n\nalgorithm=LinearAlgebraSolver(): The algorithm to use for solving the problem. The   algorithm can also be specified as the second positional argument in the init   function.\nOptional keyword arguments will be passed on to the init and solve functions.\n\nAlgorithms\n\nLinearAlgebraSolver(): An algorithm for solving the problem using the   dense-matrix eigensolver from the LinearAlgebra standard library (eventually using   LAPACK). Only suitable for small matrices.\nKrylovKitSolver(matrix_free=true): An algorithm for finding a few eigenvalues   and vectors. With matrix_free=true the problem is solved without instatiating a   matrix. This is suitable for large dimensions. With matrix_free=false the problem is   solved after instantiating a sparse matrix. This is faster if sufficient memory is   available. Requires using KrylovKit.\nArpackSolver(): An algorithm for solving the problem after instantiating a   sparse matrix and using the Arpack Fortran library. Requires using Arpack.\nLOBPCGSolver(): An algorithm for solving the problem after instantiating a   sparse matrix using the LOBPCG method. Requires using IterativeSolvers.\n\nKeyword arguments for matrix-based algorithms (also accepted by init)\n\nSee BasisSetRepresentation for more information.\n\nsizelim: The maximum size of the basis set representation. The default is 10^6 for   sparse matrices and 10^5 for dense matrices.\ncutoff: A cutoff value for the basis set representation.\nfilter: A filter function for the basis set representation.\nnnzs = 0: The number of non-zero elements in the basis set representation. Setting a   non-zero value can speed up the computation.\ncol_hint = 0: A hint for the number of columns in the basis set representation.\nsort = false: Whether to sort the basis set representation.\n\nKeyword arguments for iterative algorithms (also accepted by solve)\n\nverbose = false: Whether to print additional information.\nabstol = nothing: The absolute tolerance for the solver. If nothing, the solver   chooses a default value.\nhowmany = 1: The minimum number of eigenvalues to compute.\nwhich = :SR: Whether to compute the largest or smallest eigenvalues.\nmaxiters = nothing: The maximum number of iterations for the solver. If nothing, the   solver chooses a default value.\n\nSolving an ExactDiagonalizationProblem\n\nThe solve function can be called directly on an ExactDiagonalizationProblem to solve it. Alternatively, the init function can be used to initialize a solver, which can then be solved with solve. The solve function returns a result type with the eigenvalues, eigenvectors, and convergence information.\n\nResult type\n\nThe result type for the solve function is determined by the algorithm used. It has the following fields:\n\nvalues::Vector: The eigenvalues.\nvectors::Vector{<:AbstractDVec}: The eigenvectors.\nsuccess::Bool: A boolean flag indicating whether the solver was successful.\ninfo: Convergence information.\nalgorithm: The algorithm used for the computation.\nproblem: The ExactDiagonalizationProblem that was solved.\nAdditional fields may be present depending on the algorithm used.\n\nIterating the result type will yield the eigenvalues, eigenvectors, and a boolean flag success in that order.\n\nExamples\n\njulia> p = ExactDiagonalizationProblem(HubbardReal1D(BoseFS(1,1,1)))\nExactDiagonalizationProblem(\n  HubbardReal1D(fs\"|1 1 1⟩\"; u=1.0, t=1.0),\n  nothing;\n  NamedTuple()...\n)\n\njulia> result = solve(p) # convert to dense matrix and solve with LinearAlgebra.eigen\nEDResult for algorithm LinearAlgebraSolver() with 10 eigenvalue(s),\n  values = [-5.09593, -1.51882, -1.51882, 1.55611, 1.6093, 1.6093, 4.0, 4.53982, 4.90952, 4.90952],\n  and vectors of length 10.\n  Convergence info: \"Dense matrix eigensolver solution from `LinearAlgebra.eigen`\", with howmany = 10 eigenvalues requested.\n  success = true.\n\njulia> using KrylovKit # an external package has to be installed and loaded\n\njulia> s = init(p; algorithm = KrylovKitSolver(true)) # solve without building a matrix\nKrylovKitDirectEDSolver\n with algorithm KrylovKitSolver(matrix_free = true,) for hamiltonian = HubbardReal1D(fs\"|1 1 1⟩\"; u=1.0, t=1.0),\n  v0 = 1-element PDVec: style = IsDeterministic{Float64}()\n  fs\"|1 1 1⟩\" => 1.0,\n  kwargs = NamedTuple()\n)\n\njulia> values, vectors, success = solve(s);\n\njulia> result.values[1] ≈ values[1]\ntrue\n\nSee also solve(::ExactDiagonalizationProblem), init(::ExactDiagonalizationProblem), KrylovKitSolver, ArpackSolver, LinearAlgebraSolver.\n\nnote: Note\nUsing the KrylovKitSolver() algorithms requires the KrylovKit.jl package. The package can be loaded with using KrylovKit. Using the ArpackSolver() algorithm requires the Arpack.jl package. The package can be loaded with using Arpack. Using the LOBPCGSolver() algorithm requires the IterativeSolvers.jl package. The package can be loaded with using IterativeSolvers.\n\n\n\n\n\n","category":"type"},{"location":"exactdiagonalization.html#CommonSolve.solve-Tuple{ExactDiagonalizationProblem}","page":"Exact Diagonalization","title":"CommonSolve.solve","text":"solve(p::ExactDiagonalizationProblem, [algorithm]; kwargs...)\n\nSolve an ExactDiagonalizationProblem p directly. Optionally specify an algorithm. Returns a result type with the eigenvalues, eigenvectors, and convergence information.\n\nFor a description of the keyword arguments, see the documentation for ExactDiagonalizationProblem.\n\nSee also solve(::ProjectorMonteCarloProblem).\n\n\n\n\n\n","category":"method"},{"location":"exactdiagonalization.html#CommonSolve.init-Tuple{ExactDiagonalizationProblem}","page":"Exact Diagonalization","title":"CommonSolve.init","text":"init(p::ExactDiagonalizationProblem, [algorithm]; kwargs...)\n\nInitialize a solver for an ExactDiagonalizationProblem p with an optional algorithm. Returns a solver instance that can be solved with solve.\n\nFor a description of the keyword arguments, see the documentation for ExactDiagonalizationProblem.\n\n\n\n\n\n","category":"method"},{"location":"exactdiagonalization.html#Solver-algorithms","page":"Exact Diagonalization","title":"Solver algorithms","text":"","category":"section"},{"location":"exactdiagonalization.html","page":"Exact Diagonalization","title":"Exact Diagonalization","text":"KrylovKitSolver\nLinearAlgebraSolver\nArpackSolver\nLOBPCGSolver","category":"page"},{"location":"exactdiagonalization.html#Rimu.ExactDiagonalization.KrylovKitSolver","page":"Exact Diagonalization","title":"Rimu.ExactDiagonalization.KrylovKitSolver","text":"KrylovKitSolver(matrix_free::Bool; kwargs...)\nKrylovKitSolver(; matrix_free = false, kwargs...)\n\nAlgorithm for solving a large ExactDiagonalizationProblem to find a few eigenvalues and vectors using the KrylovKit.jl package. The Lanczos method is used for hermitian matrices, and the Arnoldi method is used for non-hermitian matrices.\n\nArguments\n\nmatrix_free = false: Whether to use a matrix-free algorithm. If false, a sparse matrix   will be instantiated. This is typically faster and recommended for small matrices,   but requires more memory. If true, the matrix is not instantiated, which is useful for   large matrices that would not fit into memory. The calculation will parallelise using   threading and MPI if available by making use of PDVec.\nkwargs: Additional keyword arguments are passed on to the function   KrylovKit.eigsolve().\n\nSee also ExactDiagonalizationProblem, solve.\n\nnote: Note\nRequires the KrylovKit.jl package to be loaded with using KrylovKit.\n\n\n\n\n\n","category":"type"},{"location":"exactdiagonalization.html#Rimu.ExactDiagonalization.LinearAlgebraSolver","page":"Exact Diagonalization","title":"Rimu.ExactDiagonalization.LinearAlgebraSolver","text":"LinearAlgebraSolver(; kwargs...)\n\nAlgorithm for solving an ExactDiagonalizationProblem using the dense-matrix eigensolver from the LinearAlgebra standard library. This is only suitable for small matrices.\n\nThe kwargs are passed on to function LinearAlgebra.eigen.\n\nKeyword arguments\n\npermute = true: Whether to permute the matrix before diagonalization.\nscale = true: Whether to scale the matrix before diagonalization.\nsortby: The sorting order for the eigenvalues.\n\nSee also ExactDiagonalizationProblem, solve.\n\n\n\n\n\n","category":"type"},{"location":"exactdiagonalization.html#Rimu.ExactDiagonalization.ArpackSolver","page":"Exact Diagonalization","title":"Rimu.ExactDiagonalization.ArpackSolver","text":"ArpackSolver(; kwargs...)\n\nAlgorithm for solving an ExactDiagonalizationProblem after instantiating a sparse matrix. It uses the Lanzcos method for hermitian problems, and the Arnoldi method for non-hermitian problems, using the Arpack Fortran library. This is faster than KrylovKitSolver(; matrix_free=true), but it requires more memory and will only be useful if the matrix fits into memory.\n\nThe kwargs are passed on to the function Arpack.eigs().\n\nSee also ExactDiagonalizationProblem, solve.\n\nnote: Note\nRequires the Arpack.jl package to be loaded with using Arpack.\n\n\n\n\n\n","category":"type"},{"location":"exactdiagonalization.html#Rimu.ExactDiagonalization.LOBPCGSolver","page":"Exact Diagonalization","title":"Rimu.ExactDiagonalization.LOBPCGSolver","text":"LOBPCGSolver(; kwargs...)\n\nThe Locally Optimal Block Preconditioned Conjugate Gradient Method (LOBPCG). Algorithm for solving an ExactDiagonalizationProblem after instantiating a sparse matrix.\n\nLOBPCG is not suitable for non-hermitian eigenvalue problems.\n\nThe kwargs are passed on to the function IterativeSolvers.lobpcg().\n\nSee also ExactDiagonalizationProblem, solve.\n\nnote: Note\nRequires the IterativeSolvers.jl package to be loaded with using IterativeSolvers.\n\n\n\n\n\n","category":"type"},{"location":"exactdiagonalization.html#Converting-a-Hamiltonian-in-to-a-matrix","page":"Exact Diagonalization","title":"Converting a Hamiltonian in to a matrix","text":"","category":"section"},{"location":"exactdiagonalization.html","page":"Exact Diagonalization","title":"Exact Diagonalization","text":"BasisSetRepresentation\nbuild_basis\nMatrix\nsparse","category":"page"},{"location":"exactdiagonalization.html#Rimu.ExactDiagonalization.BasisSetRepresentation","page":"Exact Diagonalization","title":"Rimu.ExactDiagonalization.BasisSetRepresentation","text":"BasisSetRepresentation(\n    hamiltonian::AbstractHamiltonian, addr=starting_address(hamiltonian);\n    sizelim=10^6, nnzs, cutoff, filter, sort=false, kwargs...\n)\nBasisSetRepresentation(hamiltonian::AbstractHamiltonian, addresses::AbstractVector; kwargs...)\n\nEagerly construct the basis set representation of the operator hamiltonian with all addresses reachable from addr. Instead of a single address, a vector of addresses can be passed.\n\nAn ArgumentError is thrown if dimension(hamiltonian) > sizelim in order to prevent memory overflow. Set sizelim = Inf in order to disable this behaviour.\n\nProviding the number nnzs of expected calculated matrix elements and col_hint for the estimated number of nonzero off-diagonal matrix elements in each matrix column may improve performance.\n\nProviding an energy cutoff will skip the columns and rows with diagonal elements greater than cutoff. Alternatively, an arbitrary filter function can be used instead. Addresses passed as arguments are not filtered. To generate the matrix truncated to the subspace spanned by the addresses, use filter = Returns(false).\n\nSetting sort to true will sort the matrix rows and columns. This is useful when the order of the columns matters, e.g. when comparing matrices. Any additional keyword arguments are passed on to Base.sortperm.\n\nFields\n\nsparse_matrix: sparse matrix representing hamiltonian in the basis basis\nbasis: vector of addresses\nhamiltonian: the Hamiltonian hamiltonian\n\nExample\n\njulia> hamiltonian = HubbardReal1D(BoseFS(1,0,0));\n\njulia> bsr = BasisSetRepresentation(hamiltonian)\nBasisSetRepresentation(HubbardReal1D(fs\"|1 0 0⟩\"; u=1.0, t=1.0)) with dimension 3 and 9 stored entries:3×3 SparseArrays.SparseMatrixCSC{Float64, Int64} with 9 stored entries:\n  0.0  -1.0  -1.0\n -1.0   0.0  -1.0\n -1.0  -1.0   0.0\n\njulia> BasisSetRepresentation(hamiltonian, bsr.basis[1:2]; filter = Returns(false)) # passing addresses and truncating\nBasisSetRepresentation(HubbardReal1D(fs\"|1 0 0⟩\"; u=1.0, t=1.0)) with dimension 2 and 4 stored entries:2×2 SparseArrays.SparseMatrixCSC{Float64, Int64} with 4 stored entries:\n  0.0  -1.0\n -1.0   0.0\n\njulia> using LinearAlgebra; round.(eigvals(Matrix(bsr)); digits = 4) # eigenvalues\n3-element Vector{Float64}:\n -2.0\n  1.0\n  1.0\n\njulia> ev = eigvecs(Matrix(bsr))[:,1]; ev = ev .* sign(ev[1]) # ground state eigenvector\n3-element Vector{Float64}:\n 0.5773502691896257\n 0.5773502691896255\n 0.5773502691896257\n\njulia> dv = DVec(zip(bsr.basis, ev)) # ground state as DVec\nDVec{BoseFS{1, 3, BitString{3, 1, UInt8}},Float64} with 3 entries, style = IsDeterministic{Float64}()\n  fs\"|0 0 1⟩\" => 0.57735\n  fs\"|0 1 0⟩\" => 0.57735\n  fs\"|1 0 0⟩\" => 0.57735\n\nHas methods for dimension, sparse, Matrix, starting_address.\n\nPart of the AbstractHamiltonian interface. See also build_basis.\n\n\n\n\n\n","category":"type"},{"location":"exactdiagonalization.html#Rimu.ExactDiagonalization.build_basis","page":"Exact Diagonalization","title":"Rimu.ExactDiagonalization.build_basis","text":"build_basis(\n    ham, address=starting_address(ham);\n    cutoff, filter, sizelim, sort=false, kwargs...\n) -> basis\nbuild_basis(ham, addresses::AbstractVector; kwargs...)\n\nGet all basis element of a linear operator ham that are reachable (via non-zero matrix elements) from the address address, returned as a vector. Instead of a single address, a vector of addresses can be passed. Does not return the matrix, for that purpose use BasisSetRepresentation.\n\nProviding an energy cutoff will skip addresses with diagonal elements greater than cutoff. Alternatively, an arbitrary filter function can be used instead. Addresses passed as arguments are not filtered. A maximum basis size sizelim can be set which will throw an error if the expected dimension of ham is larger than sizelim. This may be useful when memory may be a concern. These options are disabled by default.\n\nSetting sort to true will sort the basis. Any additional keyword arguments are passed on to Base.sort!.\n\n\n\n\n\n","category":"function"},{"location":"exactdiagonalization.html#Base.Matrix","page":"Exact Diagonalization","title":"Base.Matrix","text":"Matrix(\n    hamiltonian::AbstractHamiltonian, addr=starting_address(hamiltonian);\n    sizelim=10^4, kwargs...\n)\nMatrix(bsr::BasisSetRepresentation)\n\nReturn a dense matrix representation of hamiltonian or bsr. kwargs are passed to BasisSetRepresentation.\n\nSee BasisSetRepresentation.\n\n\n\n\n\n","category":"type"},{"location":"exactdiagonalization.html#SparseArrays.sparse","page":"Exact Diagonalization","title":"SparseArrays.sparse","text":"sparse(hamiltonian::AbstractHamiltonian, addr=starting_address(hamiltonian); kwargs...)\nsparse(bsr::BasisSetRepresentation)\n\nReturn a sparse matrix representation of hamiltonian or bsr. kwargs are passed to BasisSetRepresentation.\n\nSee BasisSetRepresentation.\n\n\n\n\n\n","category":"function"},{"location":"exactdiagonalization.html#Deprecated","page":"Exact Diagonalization","title":"Deprecated","text":"","category":"section"},{"location":"exactdiagonalization.html","page":"Exact Diagonalization","title":"Exact Diagonalization","text":"BasisSetRep","category":"page"},{"location":"exactdiagonalization.html#Rimu.ExactDiagonalization.BasisSetRep","page":"Exact Diagonalization","title":"Rimu.ExactDiagonalization.BasisSetRep","text":"BasisSetRep(args...; kwargs...)\n\nBasisSetRep is deprecated. Use BasisSetRepresentation instead.\n\n\n\n\n\n","category":"function"},{"location":"randomnumbers.html#Random-numbers-in-Rimu","page":"Random numbers","title":"Random numbers in Rimu","text":"","category":"section"},{"location":"randomnumbers.html","page":"Random numbers","title":"Random numbers","text":"Rimu uses Julia's built-in random number generator, which currently defaults to Xoshiro256++.","category":"page"},{"location":"randomnumbers.html#Reproducibility","page":"Random numbers","title":"Reproducibility","text":"","category":"section"},{"location":"randomnumbers.html","page":"Random numbers","title":"Random numbers","text":"If you want FCIQMC runs to be reproducible, make sure to seed the RNG with Random.seed!.","category":"page"},{"location":"randomnumbers.html","page":"Random numbers","title":"Random numbers","text":"MPI-distributed runs can also be made reproducible by seeding the RNG with mpi_seed!.","category":"page"},{"location":"documentation.html#Documentation-generation","page":"Documentation generation","title":"Documentation generation","text":"","category":"section"},{"location":"documentation.html","page":"Documentation generation","title":"Documentation generation","text":"We are using Documenter.jl to generate the documentation web site based on markdown files stored in docs/src. Please help keeping the documentation up-to-date by editing the markdown files! For instructions on how to write appropriate documentation please refer to the relevant chapter in the Julia documentation and the Documenter.jl documentation.","category":"page"},{"location":"documentation.html#Generating-the-documentation-web-site","page":"Documentation generation","title":"Generating the documentation web site","text":"","category":"section"},{"location":"documentation.html","page":"Documentation generation","title":"Documentation generation","text":"The documentation pages can be generated by running the build script by typing","category":"page"},{"location":"documentation.html","page":"Documentation generation","title":"Documentation generation","text":"Rimu$ julia --project=docs docs/make.jl","category":"page"},{"location":"documentation.html","page":"Documentation generation","title":"Documentation generation","text":"on the shell prompt from the Rimu/ folder. A complete image of the static documentation web site will be generated in the folder docs/build/. It can be viewed locally by pointing a web browser to file docs/build/index.html, or by deploying it to the GitHub pages web server.","category":"page"},{"location":"documentation.html#Automatic-documentation-generation-and-deployment","page":"Documentation generation","title":"Automatic documentation generation and deployment","text":"","category":"section"},{"location":"documentation.html","page":"Documentation generation","title":"Documentation generation","text":"Our documentation is hosted on GitHub pages. The documentation web site can be built and deployed automatically with GitHub Actions. This needs to be set up with an appropriate script in the file .github/workflows/docs.yml, where triggers for this to happen can be defined. In the current set up, a new documentation web site is generated and deployed whenever someone pushes to the develop branch on the GitHub server. The updated documentation can then be accessed here.","category":"page"},{"location":"documentation.html","page":"Documentation generation","title":"Documentation generation","text":"Previews for pull-requests can be accessed by replacing 101 in the following link with the PR number: https://RimuQMC.github.io/Rimu.jl/previews/PR101/","category":"page"},{"location":"documentation.html#Example-scripts","page":"Documentation generation","title":"Example scripts","text":"","category":"section"},{"location":"documentation.html","page":"Documentation generation","title":"Documentation generation","text":"Examples should be added to the scripts folder, in the form of .jl files suitable for parsing by Literate. The process of generating documentation is automated in the docs/make.jl file and assumes that the following line is at (or near) the top of the script:","category":"page"},{"location":"documentation.html","page":"Documentation generation","title":"Documentation generation","text":"# # Example N: Title","category":"page"},{"location":"documentation.html","page":"Documentation generation","title":"Documentation generation","text":"where the number N and Title will be extracted automatically.","category":"page"},{"location":"documentation.html","page":"Documentation generation","title":"Documentation generation","text":"Tests for the results and output of specific scripts should be added at the end of each example. The code to run the test should be hidden from the final generated document by appending \"#hide\" to each line of testing code. For example,","category":"page"},{"location":"documentation.html","page":"Documentation generation","title":"Documentation generation","text":"using Test                          #hide\n@test isfile(\"result.out\")          #hide\n@test result == expected_result     #hide","category":"page"},{"location":"addresses.html#Module-BitStringAddresses","page":"BitString addresses","title":"Module BitStringAddresses","text":"","category":"section"},{"location":"addresses.html","page":"BitString addresses","title":"BitString addresses","text":"This module contains the implementations of BitString and various Fock addresses. The addresses serve as a basis for a Hamiltonian.","category":"page"},{"location":"addresses.html","page":"BitString addresses","title":"BitString addresses","text":"While there are not restrictions on the type of address a Hamiltonian uses, Rimu provides implementations for Bosonic, Fermionic, and mixed Fock States.","category":"page"},{"location":"addresses.html","page":"BitString addresses","title":"BitString addresses","text":"When implementing a new address type, care must be taken to make them space-efficient and stack-allocated - avoid using (heap-allocated) arrays to represent your addresses at all costs!","category":"page"},{"location":"addresses.html#Fock-addresses","page":"BitString addresses","title":"Fock addresses","text":"","category":"section"},{"location":"addresses.html","page":"BitString addresses","title":"BitString addresses","text":"Rimu provides a variety of address implementations that should make it straightforward to implement efficient Hamiltonians. Examples are:","category":"page"},{"location":"addresses.html","page":"BitString addresses","title":"BitString addresses","text":"BoseFS Single-component bosonic Fock state with fixed particle and mode number.\nFermiFS Single-component fermionic Fock state with fixed particle and mode number.\nCompositeFS Multi-component Fock state composed of the above types.\nOccupationNumberFS Single-component bosonic Fock state with a fixed number of modes. The number of particles is not part of the type and can be changed by operators.","category":"page"},{"location":"addresses.html#Fock-address-API","page":"BitString addresses","title":"Fock address API","text":"","category":"section"},{"location":"addresses.html","page":"BitString addresses","title":"BitString addresses","text":"Modules = [BitStringAddresses]\nPages = [\"fockaddress.jl\",\"bosefs.jl\",\"fermifs.jl\",\"multicomponent.jl\",\"occupationnumberfs.jl\"]\nPrivate = false","category":"page"},{"location":"addresses.html#Rimu.BitStringAddresses.AbstractFockAddress","page":"BitString addresses","title":"Rimu.BitStringAddresses.AbstractFockAddress","text":"AbstractFockAddress{N,M}\n\nAbstract type representing a Fock state with N particles and M modes.\n\nSee also SingleComponentFockAddress, CompositeFS, BoseFS, FermiFS.\n\n\n\n\n\n","category":"type"},{"location":"addresses.html#Rimu.BitStringAddresses.BoseFSIndex","page":"BitString addresses","title":"Rimu.BitStringAddresses.BoseFSIndex","text":"BoseFSIndex\n\nStruct used for indexing and performing excitations on a BoseFS.\n\nFields:\n\noccnum: the occupation number.\nmode: the index of the mode.\noffset: the position of the mode in the address. This is the bit offset of the mode when\n\nthe address is represented by a bitstring, and the position in the list when it is  represented by SortedParticleList.\n\n\n\n\n\n","category":"type"},{"location":"addresses.html#Rimu.BitStringAddresses.FermiFSIndex","page":"BitString addresses","title":"Rimu.BitStringAddresses.FermiFSIndex","text":"FermiFSIndex\n\nStruct used for indexing and performing excitations on a FermiFS.\n\nFields:\n\noccnum: the occupation number.\nmode: the index of the mode.\noffset: the position of the mode in the address. This is mode - 1 when the address is represented by a bitstring, and the position in the list when using SortedParticleList.\n\n\n\n\n\n","category":"type"},{"location":"addresses.html#Rimu.BitStringAddresses.OccupiedModeMap","page":"BitString addresses","title":"Rimu.BitStringAddresses.OccupiedModeMap","text":"OccupiedModeMap(addr) <: AbstractVector\n\nGet a map of occupied modes in address as an AbstractVector of indices compatible with excitation - BoseFSIndex or FermiFSIndex.\n\nOccupiedModeMap(addr)[i] contains the index for the i-th occupied mode. This is useful because repeatedly looking for occupied modes with find_occupied_mode can be time-consuming. OccupiedModeMap(addr) is an eager version of the iterator returned by occupied_modes. It is similar to onr but contains more information.\n\nExample\n\njulia> b = BoseFS(10, 0, 0, 0, 2, 0, 1)\nBoseFS{13,7}(10, 0, 0, 0, 2, 0, 1)\n\njulia> mb = OccupiedModeMap(b)\n3-element OccupiedModeMap{7, BoseFSIndex}:\n BoseFSIndex(occnum=10, mode=1, offset=0)\n BoseFSIndex(occnum=2, mode=5, offset=14)\n BoseFSIndex(occnum=1, mode=7, offset=18)\n\njulia> f = FermiFS(1,1,1,1,0,0,1,0,0)\nFermiFS{5,9}(1, 1, 1, 1, 0, 0, 1, 0, 0)\n\njulia> mf = OccupiedModeMap(f)\n5-element OccupiedModeMap{5, FermiFSIndex}:\n FermiFSIndex(occnum=1, mode=1, offset=0)\n FermiFSIndex(occnum=1, mode=2, offset=1)\n FermiFSIndex(occnum=1, mode=3, offset=2)\n FermiFSIndex(occnum=1, mode=4, offset=3)\n FermiFSIndex(occnum=1, mode=7, offset=6)\n\njulia> mf == collect(occupied_modes(f))\ntrue\n\njulia> dot(mf, mb)\n11\n\njulia> dot(mf, 1:20)\n17\n\nSee also dot, SingleComponentFockAddress.\n\n\n\n\n\n","category":"type"},{"location":"addresses.html#Rimu.BitStringAddresses.OccupiedPairsMap","page":"BitString addresses","title":"Rimu.BitStringAddresses.OccupiedPairsMap","text":"OccupiedPairsMap(addr::SingleComponentFockAddress) <: AbstractVector\n\nGet a map of all distinct pairs of indices in addr. Pairs involving multiply-occupied modes are counted once, (including self-pairing). This is useful for cases where identifying pairs of particles for eg. interactions is not well-defined or efficient to do on the fly. This is an eager iterator whose elements are a tuple of particle indices that can be given to excitation\n\nExample\n\njulia> addr = BoseFS(10, 0, 0, 0, 2, 0, 1)\nBoseFS{13,7}(10, 0, 0, 0, 2, 0, 1)\n\njulia> pairs = OccupiedPairsMap(addr)\n5-element OccupiedPairsMap{78, Tuple{BoseFSIndex, BoseFSIndex}}:\n (BoseFSIndex(occnum=10, mode=1, offset=0), BoseFSIndex(occnum=10, mode=1, offset=0))\n (BoseFSIndex(occnum=2, mode=5, offset=14), BoseFSIndex(occnum=2, mode=5, offset=14))\n (BoseFSIndex(occnum=2, mode=5, offset=14), BoseFSIndex(occnum=10, mode=1, offset=0))\n (BoseFSIndex(occnum=1, mode=7, offset=18), BoseFSIndex(occnum=10, mode=1, offset=0))\n (BoseFSIndex(occnum=1, mode=7, offset=18), BoseFSIndex(occnum=2, mode=5, offset=14))\n\njulia> excitation(addr, pairs[2], pairs[4])\n(BoseFS{13,7}(9, 0, 0, 0, 4, 0, 0), 10.954451150103322)\n\nSee also OccupiedModeMap.\n\n\n\n\n\n","category":"type"},{"location":"addresses.html#Rimu.BitStringAddresses.SingleComponentFockAddress","page":"BitString addresses","title":"Rimu.BitStringAddresses.SingleComponentFockAddress","text":"SingleComponentFockAddress{N,M} <: AbstractFockAddress{N,M}\n\nA type representing a single component Fock state with N particles and M modes.\n\nImplemented subtypes: BoseFS, FermiFS.\n\nSupported functionality\n\nfind_mode\nfind_occupied_mode\nnum_occupied_modes\noccupied_modes: Lazy iterator.\nOccupiedModeMap: AbstractVector with eager construction.\nexcitation: Create a new address.\nBoseFSIndex and FermiFSIndex for indexing.\n\nSee also CompositeFS, AbstractFockAddress.\n\n\n\n\n\n","category":"type"},{"location":"addresses.html#Rimu.BitStringAddresses.excitation","page":"BitString addresses","title":"Rimu.BitStringAddresses.excitation","text":"excitation(addr::SingleComponentFockAddress, creations::NTuple, destructions::NTuple)\n\nGenerate an excitation on address addr by applying creations and destructions, which are tuples of the appropriate address indices (i.e. BoseFSIndex for bosons, or FermiFSIndex for fermions).\n\na^_c_1 a^_c_2 ldots a_d_1 a_d_2 ldots mathrmaddrrangle to\nαmathrmnaddrrangle\n\nReturns the new address naddr and the factor α. The value of α is given by the square root of the product of mode occupations before destruction and after creation. If the excitation is illegal, returns an arbitrary address and the value 0.0.\n\nExample\n\njulia> f = FermiFS(1,1,0,0,1,1,1,1)\nFermiFS{6,8}(1, 1, 0, 0, 1, 1, 1, 1)\n\njulia> i, j, k, l = find_mode(f, (3,4,2,5))\n(FermiFSIndex(occnum=0, mode=3, offset=2), FermiFSIndex(occnum=0, mode=4, offset=3), FermiFSIndex(occnum=1, mode=2, offset=1), FermiFSIndex(occnum=1, mode=5, offset=4))\n\njulia> excitation(f, (i,j), (k,l))\n(FermiFS{6,8}(1, 0, 1, 1, 0, 1, 1, 1), -1.0)\n\nSee SingleComponentFockAddress.\n\n\n\n\n\n","category":"function"},{"location":"addresses.html#Rimu.BitStringAddresses.find_mode","page":"BitString addresses","title":"Rimu.BitStringAddresses.find_mode","text":"find_mode(::SingleComponentFockAddress, i)\n\nFind the i-th mode in address. Returns BoseFSIndex for BoseFS, and FermiFSIndex for FermiFS. Can work on a tuple of modes. Does not check bounds.\n\njulia> find_mode(BoseFS(1, 0, 2), 2)\nBoseFSIndex(occnum=0, mode=2, offset=2)\n\njulia> find_mode(FermiFS(1, 1, 1, 0), (2,3))\n(FermiFSIndex(occnum=1, mode=2, offset=1), FermiFSIndex(occnum=1, mode=3, offset=2))\n\nSee SingleComponentFockAddress.\n\n\n\n\n\n","category":"function"},{"location":"addresses.html#Rimu.BitStringAddresses.find_occupied_mode","page":"BitString addresses","title":"Rimu.BitStringAddresses.find_occupied_mode","text":"find_occupied_mode(::SingleComponentFockAddress, k)\nfind_occupied_mode(::BoseFS, k, [n])\n\nFind the k-th occupied mode in address (with at least n particles). Returns BoseFSIndex for BoseFS, and FermiFSIndex for FermiFS. When unsuccessful it returns a zero index.\n\nExample\n\njulia> find_occupied_mode(FermiFS(1, 1, 1, 0), 2)\nFermiFSIndex(occnum=1, mode=2, offset=1)\n\njulia> find_occupied_mode(BoseFS(1, 0, 2), 1)\nBoseFSIndex(occnum=1, mode=1, offset=0)\n\njulia> find_occupied_mode(BoseFS(1, 0, 2), 1, 2)\nBoseFSIndex(occnum=2, mode=3, offset=3)\n\nSee also occupied_modes, OccupiedModeMap, SingleComponentFockAddress.\n\n\n\n\n\n","category":"function"},{"location":"addresses.html#Rimu.BitStringAddresses.num_components-Tuple{AbstractFockAddress}","page":"BitString addresses","title":"Rimu.BitStringAddresses.num_components","text":"num_components(::Type{<:AbstractFockAddress})\nnum_components(::AbstractFockAddress)\n\nNumber of components in address.\n\n\n\n\n\n","category":"method"},{"location":"addresses.html#Rimu.BitStringAddresses.num_modes-Tuple{AbstractFockAddress}","page":"BitString addresses","title":"Rimu.BitStringAddresses.num_modes","text":"num_modes(::Type{<:AbstractFockAddress})\nnum_modes(::AbstractFockAddress)\n\nNumber of modes represented by address.\n\n\n\n\n\n","category":"method"},{"location":"addresses.html#Rimu.BitStringAddresses.num_occupied_modes","page":"BitString addresses","title":"Rimu.BitStringAddresses.num_occupied_modes","text":"num_occupied_modes(::SingleComponentFockAddress)\n\nGet the number of occupied modes in address. Equivalent to length(occupied_modes(address)), or the number of non-zeros in its ONR representation.\n\nExample\n\njulia> num_occupied_modes(BoseFS((1, 0, 2)))\n2\njulia> num_occupied_modes(FermiFS((1, 1, 1, 0)))\n3\n\nSee SingleComponentFockAddress.\n\n\n\n\n\n","category":"function"},{"location":"addresses.html#Rimu.BitStringAddresses.num_particles-Tuple{AbstractFockAddress}","page":"BitString addresses","title":"Rimu.BitStringAddresses.num_particles","text":"num_particles(::Type{<:AbstractFockAddress})\nnum_particles(::AbstractFockAddress)\n\nNumber of particles represented by address.\n\n\n\n\n\n","category":"method"},{"location":"addresses.html#Rimu.BitStringAddresses.occupied_modes","page":"BitString addresses","title":"Rimu.BitStringAddresses.occupied_modes","text":"occupied_modes(::SingleComponentFockAddress)\n\nReturn a lazy iterator over all occupied modes in an address. Iterates over BoseFSIndexs for BoseFS, and over FermiFSIndexs for FermiFS. See OccupiedModeMap for an eager version.\n\nExample\n\njulia> b = BoseFS((1,5,0,4));\n\njulia> foreach(println, occupied_modes(b))\nBoseFSIndex(occnum=1, mode=1, offset=0)\nBoseFSIndex(occnum=5, mode=2, offset=2)\nBoseFSIndex(occnum=4, mode=4, offset=9)\n\njulia> f = FermiFS((1,1,0,1,0,0,1));\n\njulia> foreach(println, occupied_modes(f))\nFermiFSIndex(occnum=1, mode=1, offset=0)\nFermiFSIndex(occnum=1, mode=2, offset=1)\nFermiFSIndex(occnum=1, mode=4, offset=3)\nFermiFSIndex(occnum=1, mode=7, offset=6)\n\nSee also find_occupied_mode, SingleComponentFockAddress.\n\n\n\n\n\n","category":"function"},{"location":"addresses.html#Rimu.BitStringAddresses.onr","page":"BitString addresses","title":"Rimu.BitStringAddresses.onr","text":"occupation_number_representation(fs::SingleComponentFockAddress)\nonr(fs::SingleComponentFockAddress)\n\nCompute and return the occupation number representation of the Fock state fs as an SVector{M}, where M is the number of modes.\n\n\n\n\n\n","category":"function"},{"location":"addresses.html#Rimu.BitStringAddresses.@fs_str-Tuple{Any}","page":"BitString addresses","title":"Rimu.BitStringAddresses.@fs_str","text":"fs\"$(string)\"\n\nParse the compact representation of a Fock state. Useful for copying the printout from a vector to the REPL.\n\nExample\n\njulia> DVec(BoseFS{3,4}(0, 1, 2, 0) => 1)\nDVec{BoseFS{3, 4, BitString{6, 1, UInt8}},Int64} with 1 entry, style = IsStochasticInteger{Int64}()\n  fs\"|0 1 2 0⟩\" => 1\n\njulia> fs\"|0 1 2 0⟩\" => 1 # Copied from above printout\nBoseFS{3,4}(0, 1, 2, 0) => 1\n\njulia> fs\"|1 2 3⟩⊗|0 1 0⟩\" # composite bosonic Fock state\nCompositeFS(\n  BoseFS{6,3}(1, 2, 3),\n  BoseFS{1,3}(0, 1, 0),\n)\n\njulia> fs\"|↑↓↑⟩\" # construct a fermionic Fock state\nCompositeFS(\n  FermiFS{2,3}(1, 0, 1),\n  FermiFS{1,3}(0, 1, 0),\n)\n\njulia> s = fs\"|0 1 2 0⟩{}\" # constructing OccupationNumberFS with default UInt8 container\nOccupationNumberFS{4, UInt8}(0, 1, 2, 0)\n\njulia> [s] # prints out with the signifcant number of bits specified in braces\n1-element Vector{OccupationNumberFS{4, UInt8}}:\n fs\"|0 1 2 0⟩{8}\"\n\nSee also FermiFS, BoseFS, CompositeFS, FermiFS2C, OccupationNumberFS.\n\n\n\n\n\n","category":"macro"},{"location":"addresses.html#Rimu.BitStringAddresses.BoseFS","page":"BitString addresses","title":"Rimu.BitStringAddresses.BoseFS","text":"BoseFS{N,M,S} <: SingleComponentFockAddress\n\nAddress type that represents a Fock state of N spinless bosons in M modes by wrapping a BitString, or a SortedParticleList. Which is wrapped is chosen automatically based on the properties of the address.\n\nConstructors\n\nBoseFS{[N,M]}(val::Integer...): Create BoseFS{N,M} from occupation numbers. This is type-stable if the number of modes M and the number of particles N are provided. Otherwise, M and N are inferred from the arguments.\nBoseFS{[N,M]}(onr): Create BoseFS{N,M} from occupation number representation, see onr. This is efficient if N and M are provided, and onr is a statically-sized collection, such as a Tuple or SVector.\nBoseFS{[N,M]}([M, ]pairs...): Provide the number of modes M and mode => occupation_number pairs. If M is provided as a type parameter, it should not be provided as the first argument.  Useful for creating sparse addresses. pairs can be multiple arguments or an iterator of pairs.\nBoseFS{N,M,S}(bs::S): Unsafe constructor. Does not check whether the number of particles in bs is equal to N.\n@fs_str: Addresses are sometimes printed in a compact manner. This representation can also be used as a constructor. See the last example below.\n\nExamples\n\njulia> BoseFS{6,5}(0, 1, 2, 3, 0)\nBoseFS{6,5}(0, 1, 2, 3, 0)\n\njulia> BoseFS([abs(i - 3) ≤ 1 ? i - 1 : 0 for i in 1:5])\nBoseFS{6,5}(0, 1, 2, 3, 0)\n\njulia> BoseFS(5, 2 => 1, 3 => 2, 4 => 3)\nBoseFS{6,5}(0, 1, 2, 3, 0)\n\njulia> BoseFS{6,5}(i => i - 1 for i in 2:4)\nBoseFS{6,5}(0, 1, 2, 3, 0)\n\njulia> fs\"|0 1 2 3 0⟩\"\nBoseFS{6,5}(0, 1, 2, 3, 0)\n\njulia> fs\"|b 5: 2 3 3 4 4 4⟩\"\nBoseFS{6,5}(0, 1, 2, 3, 0)\n\nSee also: SingleComponentFockAddress, OccupationNumberFS, FermiFS, CompositeFS, FermiFS2C.\n\n\n\n\n\n","category":"type"},{"location":"addresses.html#Rimu.BitStringAddresses.bose_hubbard_interaction-Union{Tuple{BoseFS{<:Any, <:Any, A}}, Tuple{A}} where A<:BitString","page":"BitString addresses","title":"Rimu.BitStringAddresses.bose_hubbard_interaction","text":"bose_hubbard_interaction(address)\n\nReturn Σ_i n_i (n_i-1) for computing the Bose-Hubbard on-site interaction (without the U prefactor.)\n\nExample\n\njulia> Hamiltonians.bose_hubbard_interaction(BoseFS{4,4}((2,1,1,0)))\n2\njulia> Hamiltonians.bose_hubbard_interaction(BoseFS{4,4}((3,0,1,0)))\n6\n\n\n\n\n\n","category":"method"},{"location":"addresses.html#Rimu.BitStringAddresses.hopnextneighbour-Union{Tuple{A}, Tuple{M}, Tuple{N}, Tuple{BoseFS{N, M, A}, Any}} where {N, M, A<:BitString}","page":"BitString addresses","title":"Rimu.BitStringAddresses.hopnextneighbour","text":"new_address, value = hopnextneighbour(add, chosen, boundary_condition)\n\nCompute the new address of a hopping event for the Hubbard model. Returns the new address and the square root of product of occupation numbers of the involved modes multiplied by a term consistent with boundary condition as the value.  The following boundary conditions are supported:\n\n:periodic: hopping over the boundary gives does not change the value.\n:twisted: hopping over the boundary flips the sign of the value.\n:hard_wall: hopping over the boundary gives a value of zero.\nθ <: Number: hopping over the boundary gives a value multiplied by exp(iθ) or exp(iθ) depending on the direction of hopping.\n\nThe off-diagonals are indexed as follows:\n\n(chosen + 1) ÷ 2 selects the hopping site.\nEven chosen indicates a hop to the left.\nOdd chosen indicates a hop to the right.\n\nExample\n\njulia> using Rimu.Hamiltonians: hopnextneighbour\n\njulia> hopnextneighbour(BoseFS(1, 0, 1), 3)\n(BoseFS{2,3}(2, 0, 0), 1.4142135623730951)\n\njulia> hopnextneighbour(BoseFS(1, 0, 1), 4)\n(BoseFS{2,3}(1, 1, 0), 1.0)\n\njulia> hopnextneighbour(BoseFS(1, 0, 1), 3, :twisted)\n(BoseFS{2,3}(2, 0, 0), -1.4142135623730951)\n\njulia> hopnextneighbour(BoseFS(1, 0, 1), 3, :hard_wall)\n(BoseFS{2,3}(2, 0, 0), 0.0)\n\njulia> hopnextneighbour(BoseFS(1, 0, 1), 3, π/4)\n(BoseFS{2,3}(2, 0, 0), 1.0000000000000002 + 1.0im)\n\n\n\n\n\n","category":"method"},{"location":"addresses.html#Rimu.BitStringAddresses.near_uniform-Union{Tuple{Type{<:BoseFS{N, M}}}, Tuple{M}, Tuple{N}} where {N, M}","page":"BitString addresses","title":"Rimu.BitStringAddresses.near_uniform","text":"near_uniform(BoseFS{N,M}) -> BoseFS{N,M}\n\nCreate bosonic Fock state with near uniform occupation number of M modes with a total of N particles.\n\nExamples\n\njulia> near_uniform(BoseFS{7,5})\nBoseFS{7,5}(2, 2, 1, 1, 1)\n\njulia> near_uniform(FermiFS{3,5})\nFermiFS{3,5}(1, 1, 1, 0, 0)\n\n\n\n\n\n","category":"method"},{"location":"addresses.html#Rimu.BitStringAddresses.FermiFS","page":"BitString addresses","title":"Rimu.BitStringAddresses.FermiFS","text":"FermiFS{N,M,S} <: SingleComponentFockAddress\n\nAddress type that represents a Fock state of N fermions of the same spin in M modes by wrapping a BitString, or a SortedParticleList. Which is wrapped is chosen automatically based on the properties of the address.\n\nConstructors\n\nFermiFS{[N,M]}(val::Integer...): Create FermiFS{N,M} from occupation numbers. This is type-stable if the number of modes M and the number of particles N are provided. Otherwise, M and N are inferred from the arguments.\nFermiFS{[N,M]}(onr): Create FermiFS{N,M}  from occupation number representation, see onr. This is efficient if N and M are provided, and onr is a statically-sized collection, such as a Tuple{M} or SVector{M}.\nFermiFS{[N,M]}([M, ]pairs...): Provide the number of modes M and pairs of the form mode => 1. If M is provided as a type parameter, it should not be provided as the first argument.  Useful for creating sparse addresses. pairs can be multiple arguments or an iterator of pairs.\nFermiFS{N,M,S}(bs::S): Unsafe constructor. Does not check whether the number of particles in bs is equal to N, or whether each mode only contains one particle.\n@fs_str: Addresses are sometimes printed in a compact manner. This representation can also be used as a constructor. See the last example below.\n\nExamples\n\njulia> FermiFS{3,5}(0, 1, 1, 1, 0)\nFermiFS{3,5}(0, 1, 1, 1, 0)\n\njulia> FermiFS([abs(i - 3) ≤ 1 for i in 1:5])\nFermiFS{3,5}(0, 1, 1, 1, 0)\n\njulia> FermiFS(5, 2 => 1, 3 => 1, 4 => 1)\nFermiFS{3,5}(0, 1, 1, 1, 0)\n\njulia> FermiFS{3,5}(i => 1 for i in 2:4)\nFermiFS{3,5}(0, 1, 1, 1, 0)\n\njulia> fs\"|⋅↑↑↑⋅⟩\"\nFermiFS{3,5}(0, 1, 1, 1, 0)\n\njulia> fs\"|f 5: 2 3 4⟩\"\nFermiFS{3,5}(0, 1, 1, 1, 0)\n\nSee also: SingleComponentFockAddress, BoseFS, CompositeFS, FermiFS2C, BitString, OccupationNumberFS.\n\n\n\n\n\n","category":"type"},{"location":"addresses.html#Rimu.BitStringAddresses.BoseFS2C","page":"BitString addresses","title":"Rimu.BitStringAddresses.BoseFS2C","text":"BoseFS2C{NA,NB,M,AA,AB} <: AbstractFockAddress\nBoseFS2C(onr_a, onr_b)\n\nAddress type that constructed with two BoseFS{N,M,S}. It represents a Fock state with two components, e.g. two different species of bosons with particle number NA from species S and particle number NB from species B. The number of modes M is expected to be the same for both components.\n\n\n\n\n\n","category":"type"},{"location":"addresses.html#Rimu.BitStringAddresses.CompositeFS","page":"BitString addresses","title":"Rimu.BitStringAddresses.CompositeFS","text":"CompositeFS(addresses::SingleComponentFockAddress...) <: AbstractFockAddress\n\nUsed to encode addresses for multi-component models. All component addresses are expected have the same number of modes.\n\nSee also: BoseFS, FermiFS, SingleComponentFockAddress, num_modes, FermiFS2C, AbstractFockAddress.\n\n\n\n\n\n","category":"type"},{"location":"addresses.html#Rimu.BitStringAddresses.FermiFS2C","page":"BitString addresses","title":"Rimu.BitStringAddresses.FermiFS2C","text":"FermiFS2C <: AbstractFockAddress\nFermiFS2C(onr_a, onr_b)\n\nFock state address with two fermionic (spin) components. Alias for CompositeFS with two FermiFS components. Construct by specifying either two compatible FermiFSs, two onrs, or the number of modes followed by mode => occupation_number pairs, where occupation_number=1 will put a particle in the first component and occupation_number=-1 will put a particle in the second component. See examples below.\n\nExamples\n\njulia> FermiFS2C(FermiFS(1,0,0), FermiFS(0,1,1))\nCompositeFS(\n  FermiFS{1,3}(1, 0, 0),\n  FermiFS{2,3}(0, 1, 1),\n)\n\njulia> FermiFS2C((1,0,0), (0,1,1))\nCompositeFS(\n  FermiFS{1,3}(1, 0, 0),\n  FermiFS{2,3}(0, 1, 1),\n)\n\njulia> FermiFS2C(3, 1 => 1, 2 => -1, 3 => -1)\nCompositeFS(\n  FermiFS{1,3}(1, 0, 0),\n  FermiFS{2,3}(0, 1, 1),\n)\n\njulia> fs\"|↑↓↓⟩\"\nCompositeFS(\n  FermiFS{1,3}(1, 0, 0),\n  FermiFS{2,3}(0, 1, 1),\n)\n\n\n\n\n\n","category":"type"},{"location":"addresses.html#Rimu.BitStringAddresses.time_reverse-Union{Tuple{CompositeFS{2, N, M, T}}, Tuple{T}, Tuple{M}, Tuple{N}} where {N, M, T<:(Tuple{T, T} where T)}","page":"BitString addresses","title":"Rimu.BitStringAddresses.time_reverse","text":"time_reverse(addr)\n\nApply the time-reversal operation on a two-component Fock address that flips all the spins.\n\nRequires each component address to have the same type.\n\n\n\n\n\n","category":"method"},{"location":"addresses.html#Rimu.BitStringAddresses.OccupationNumberFS","page":"BitString addresses","title":"Rimu.BitStringAddresses.OccupationNumberFS","text":"OccupationNumberFS{M,T} <: SingleComponentFockAddress\n\nAddress type that stores the occupation numbers of a single component bosonic Fock state with M modes. The occupation numbers must fit into the type T <: Unsigned. The number of particles is runtime data, and can be retrieved with num_particles(address).\n\nConstructors\n\nOccupationNumberFS(val::Integer...): Construct from occupation numbers. Must be < 256 to fit into UInt8.\nOccupationNumberFS{[M,T]}(onr): Construct from collection onr with M occupation numbers with type T. If unspecified, the type T of the occupation numbers is inferred from the type of the arguments.\nOccupationNumberFS(fs::BoseFS): Construct from BoseFS.\nWith shortform macro @fs_str. Specify the number of significant bits in braces. See example below.\n\nExamples\n\njulia> ofs = OccupationNumberFS(1,2,3)\nOccupationNumberFS{3, UInt8}(1, 2, 3)\n\njulia> ofs == fs\"|1 2 3⟩{8}\"\ntrue\n\njulia> num_particles(ofs)\n6\n\n\n\n\n\n","category":"type"},{"location":"addresses.html#Rimu.BitStringAddresses.excitation-Union{Tuple{T}, Tuple{OccupationNumberFS{<:Any, T}, NTuple{var\"#s61\", Int64} where var\"#s61\", NTuple{var\"#s5\", Int64} where var\"#s5\"}} where T","page":"BitString addresses","title":"Rimu.BitStringAddresses.excitation","text":"excitation(addr::OccupationNumberFS, c::NTuple, d::NTuple)\n→ (nadd, α)\n\nGenerate an excitation on an OccupationNumberFS by applying the creation and destruction operators specified by the tuples of mode numbers c and d to the Fock state addr. The modes are indexed by integers (starting at 1), or by indices of type BoseFSIndex. The value of α is given by the square root of the product of mode occupations before destruction and after creation.\n\nThe number of particles may change by this type of excitation.\n\nExample\n\njulia> s = fs\"|1 2 3⟩{8}\"\nOccupationNumberFS{3, UInt8}(1, 2, 3)\n\njulia> num_particles(s)\n6\n\njulia> es, α = excitation(s, (1,1), (3,))\n(OccupationNumberFS{3, UInt8}(3, 2, 2), 4.242640687119285)\n\njulia> num_particles(es)\n7\n\n\n\n\n\n","category":"method"},{"location":"addresses.html#Internal-representations","page":"BitString addresses","title":"Internal representations","text":"","category":"section"},{"location":"addresses.html","page":"BitString addresses","title":"BitString addresses","text":"The atomic addresses, BoseFS and FermiFS, are implemented as either bitstrings or sorted lists of particles. Using these approaches over an occupation number representation makes the addresses much more space-efficient.","category":"page"},{"location":"addresses.html","page":"BitString addresses","title":"BitString addresses","text":"Therewhile OccupationNumberFS internally uses the occupation number representation,  which allows it to handle excitation operations that change the particle number. This is fast but requires more storage space.","category":"page"},{"location":"addresses.html#Internal-APIs","page":"BitString addresses","title":"Internal APIs","text":"","category":"section"},{"location":"addresses.html","page":"BitString addresses","title":"BitString addresses","text":"Modules = [BitStringAddresses]\nPages = [\"bitstring.jl\", \"sortedparticlelist.jl\"]\nPrivate = false","category":"page"},{"location":"addresses.html#Rimu.BitStringAddresses.BitString","page":"BitString addresses","title":"Rimu.BitStringAddresses.BitString","text":"BitString{B,N,T<:Unsigned}\n\nType for storing bitstrings of static size. Holds B bits in N chunks, where each chunk is of type T.\n\nN is chosen automatically to accommodate B bits as efficiently as possible.\n\nConstructors\n\nBitString{B,N,T}(::SVector{N,T}): unsafe constructor. Does not check for ghost bits.\nBitString{B,N,T}(i::T): as above, but sets i as the rightmost chunk.\nBitString{B}(::Integer): Convert integer to BitString. Integer is truncated to the correct number of bits.\n\n\n\n\n\n","category":"type"},{"location":"addresses.html#Rimu.BitStringAddresses.SortedParticleList","page":"BitString addresses","title":"Rimu.BitStringAddresses.SortedParticleList","text":"SortedParticleList{N,M,T<:Unsigned}\n\nType for storing sparse fock states. Stores the mode number of each particle as an entry with only its mode stored. The entries are always kept sorted.\n\nIterating over SortedParticleLists yields occupied modes as a tuple of occupation number, mode number, and position in list.\n\nConstructors\n\nSortedParticleList{N,M,T}(::SVector{N,T}): unsafe constructor. Does not sort input.\nSortedParticleList(arr::AbstractVector): convert ONR to SortedParticleList\n\n\n\n\n\n","category":"type"},{"location":"addresses.html#Index","page":"BitString addresses","title":"Index","text":"","category":"section"},{"location":"addresses.html","page":"BitString addresses","title":"BitString addresses","text":"Pages   = [\"addresses.md\"]","category":"page"},{"location":"API.html#API","page":"API","title":"API","text":"","category":"section"},{"location":"API.html#Rimu","page":"API","title":"Rimu","text":"","category":"section"},{"location":"API.html","page":"API","title":"API","text":"Modules = [Rimu]","category":"page"},{"location":"API.html#Rimu.Rimu","page":"API","title":"Rimu.Rimu","text":"Rimu\n\nRandom integrators for many-body quantum systems\n\nWelcome to Rimu version 0.13.2-dev. Read the documentation online.\n\n\n\n\n\n","category":"module"},{"location":"API.html#Rimu.PACKAGE_VERSION","page":"API","title":"Rimu.PACKAGE_VERSION","text":"Rimu.PACKAGE_VERSION\n\nConstant that contains the current VersionNumber of Rimu.\n\n\n\n\n\n","category":"constant"},{"location":"API.html#DataFrames.DataFrame-Tuple{Rimu.Report}","page":"API","title":"DataFrames.DataFrame","text":"DataFrame(report::Report)\n\nConvert the Report to a DataFrame. Metadata is added as metadata to the DataFrame.\n\n\n\n\n\n","category":"method"},{"location":"API.html#Rimu.AllOverlaps","page":"API","title":"Rimu.AllOverlaps","text":"AllOverlaps(n_replicas=2; operator=nothing, transform=nothing, vecnorm=true)\n    <: ReplicaStrategy{n_replicas}\n\nRun n_replicas replicas and report overlaps between all pairs of replica vectors. If operator is not nothing, the overlap dot(c1, operator, c2) is reported as well. If operator is a tuple of operators, the overlaps are computed for all operators.\n\nColumn names in the report are of the form c{i}_dot_c{j} for vector-vector overlaps, and c{i}_Op{k}_c{j} for operator overlaps.\n\nSee ProjectorMonteCarloProblem, ReplicaStrategy and AbstractOperator (for an interface for implementing operators).\n\nTransformed Hamiltonians\n\nIf a transformed Hamiltonian G has been passed to ProjectorMonteCarloProblem then overlaps can be calculated by passing the same transformed Hamiltonian to AllOverlaps by setting transform=G. A warning is given if these two Hamiltonians do not match.\n\nImplemented transformations are:\n\nGutzwillerSampling\nGuidingVectorSampling\n\nIn the case of a transformed Hamiltonian the overlaps are defined as follows. For a similarity transformation G of the Hamiltonian (see e.g. GutzwillerSampling.)\n\n    hatG = f hatH f^-1\n\nThe expectation value of an operator hatA is\n\n    langle hatA rangle = langle psi  hatA  psi rangle\n        = fraclangle phi  f^-1 hatA f^-1  phi ranglelangle phi  f^-2  phi rangle\n\nwhere\n\n     phi rangle = f  psi rangle\n\nis the (right) eigenvector of hatG and  psi rangle is an eigenvector of hatH.\n\nFor a K-tuple of input operators (hatA_1  hatA_K), overlaps of langle phi  f^-1 hatA f^-1  phi rangle are reported as c{i}_Op{k}_c{j}. The correct vector-vector overlap langle phi  f^-2  phi rangle is reported last as c{i}_Op{K+1}_c{j}. This is in addition to the bare vector-vector overlap langle phi  f^-2  phi rangle that is reported as c{i}_dot_c{j}.\n\nIn either case the c{i}_dot_c{j} overlap can be omitted with the flag vecnorm=false.\n\n\n\n\n\n","category":"type"},{"location":"API.html#Rimu.ConstantTimeStep","page":"API","title":"Rimu.ConstantTimeStep","text":"ConstantTimeStep <: TimeStepStrategy\n\nKeep time_step constant.\n\n\n\n\n\n","category":"type"},{"location":"API.html#Rimu.DefaultShiftParameters","page":"API","title":"Rimu.DefaultShiftParameters","text":"DefaultShiftParameters\n\nDefault mutable struct for storing the shift parameters.\n\nSee ShiftStrategy, initialise_shift_parameters.\n\n\n\n\n\n","category":"type"},{"location":"API.html#Rimu.DontUpdate","page":"API","title":"Rimu.DontUpdate","text":"DontUpdate(; target_walkers = 1_000) <: ShiftStrategy\n\nDon't update the shift.  Return when target_walkers is reached.\n\nSee ShiftStrategy, ProjectorMonteCarloProblem.\n\n\n\n\n\n","category":"type"},{"location":"API.html#Rimu.DoubleLogProjected","page":"API","title":"Rimu.DoubleLogProjected","text":"DoubleLogProjected(; target, projector, ζ = 0.08, ξ = ζ^2/4) <: ShiftStrategy\n\nStrategy for updating the shift according to the log formula with damping parameter ζ and ξ after projecting onto projector.\n\nS^n+1 = S^n -fracζdτlnleft(fracPΨ^(n+1)PΨ^(n)right)-fracξdτlnleft(fracPΨ^(n+1)texttargetright)\n\nNote that adjusting the keyword maxlength in ProjectorMonteCarloProblem is advised as the default may not be appropriate.\n\nSee ShiftStrategy, ProjectorMonteCarloProblem.\n\n\n\n\n\n","category":"type"},{"location":"API.html#Rimu.DoubleLogSumUpdate","page":"API","title":"Rimu.DoubleLogSumUpdate","text":"DoubleLogSumUpdate(; target_walkers = 1000, ζ = 0.08, ξ = ζ^2/4, α = 1/2) <: ShiftStrategy\n\nStrategy for updating the shift according to the log formula with damping parameters ζ and ξ.\n\nS^n+1 = S^n -fracζdτlnleft(fracN_mathrmw^n+1N_mathrmw^nright)\n- fracξdτlnleft(fracN_mathrmw^n+1N_mathrmw^texttargetright)\n\nwhere N_mathrmw = (1-α)*walkernumber() + α*UniformProjector()⋅ψ computed with walkernumber() and UniformProjector(). When ξ = ζ^2/4 this corresponds to critical damping with a damping time scale T = 2/ζ.\n\nSee ShiftStrategy, ProjectorMonteCarloProblem.\n\n\n\n\n\n","category":"type"},{"location":"API.html#Rimu.DoubleLogUpdate","page":"API","title":"Rimu.DoubleLogUpdate","text":"DoubleLogUpdate(; target_walkers = 1_000, ζ = 0.08, ξ = ζ^2/4) <: ShiftStrategy\n\nStrategy for updating the shift according to the log formula with damping parameter ζ and ξ.\n\nS^n+1 = S^n -fracζdτlnleft(fracΨ_1^n+1Ψ_1^nright)-fracξdτlnleft(fracΨ_1^n+1Ψ_1^texttargetright)\n\nWhen ξ = ζ^2/4 this corresponds to critical damping with a damping time scale T = 2/ζ.\n\nSee ShiftStrategy, ProjectorMonteCarloProblem.\n\n\n\n\n\n","category":"type"},{"location":"API.html#Rimu.DoubleLogUpdateAfterTargetWalkers","page":"API","title":"Rimu.DoubleLogUpdateAfterTargetWalkers","text":"DoubleLogUpdateAfterTargetWalkers(target_walkers = 1_000, ζ = 0.08, ξ = ζ^2/4) <: ShiftStrategy\n\nStrategy for updating the shift: After target_walkers is reached, update the shift according to the log formula with damping parameter ζ and ξ.\n\nSee DoubleLogUpdate, ShiftStrategy, ProjectorMonteCarloProblem.\n\n\n\n\n\n","category":"type"},{"location":"API.html#Rimu.FCIQMC","page":"API","title":"Rimu.FCIQMC","text":"FCIQMC(; kwargs...) <: PMCAlgorithm\n\nAlgorithm for the full configuration interaction quantum Monte Carlo (FCIQMC) method. The default algorithm for ProjectorMonteCarloProblem.\n\nKeyword arguments and defaults:\n\nshift_strategy = DoubleLogUpdate(; targetwalkers = 1_000, ζ = 0.08,   ξ = ζ^2/4): How to update the shift.\ntime_step_strategy = ConstantTimeStep(): Adjust time step or not.\n\nSee also ProjectorMonteCarloProblem, ShiftStrategy, TimeStepStrategy, DoubleLogUpdate, ConstantTimeStep.\n\n\n\n\n\n","category":"type"},{"location":"API.html#Rimu.FciqmcRunStrategy","page":"API","title":"Rimu.FciqmcRunStrategy","text":" FciqmcRunStrategy{T}\n\nAbstract type representing the strategy for running and terminating lomc!(). The type parameter T is relevant for reporting the shift and the norm.\n\nImplemented strategies:\n\nRunTillLastStep\n\nwarning: Warning\nThe use of this strategy is deprecated. Pass the relevant arguments directly to ProjectorMonteCarloProblem or to lomc!() instead.\n\n\n\n\n\n","category":"type"},{"location":"API.html#Rimu.FirstOrderTransitionOperator","page":"API","title":"Rimu.FirstOrderTransitionOperator","text":"FirstOrderTransitionOperator(hamiltonian, shift, time_step) <: AbstractHamiltonian\nFirstOrderTransitionOperator(sp::DefaultShiftParameters, hamiltonian)\n\nFirst order transition operator\n\n𝐓 = 1 + dτ(S - 𝐇)\n\nwhere 𝐇 is the hamiltonian, dτ the time_step and S is the shift.\n\n𝐓 represents the first order expansion of the exponential evolution operator of the imaginary-time Schrödinger equation (Euler step) and repeated application will project out the ground state eigenvector of the hamiltonian.  It is the transition operator used in FCIQMC.\n\n\n\n\n\n","category":"type"},{"location":"API.html#Rimu.GramSchmidt","page":"API","title":"Rimu.GramSchmidt","text":"GramSchmidt{S} <: SpectralStrategy{S}\n\nUse the Gram-Schmidt procedure to orthogonalize the excited states. A total of S spectral states are used in the simulation.\n\n\n\n\n\n","category":"type"},{"location":"API.html#Rimu.LogUpdate","page":"API","title":"Rimu.LogUpdate","text":"LogUpdate(ζ = 0.08) <: ShiftStrategy\n\nStrategy for updating the shift according to the log formula with damping parameter ζ.\n\nS^n+1 = S^n -fracζdτlnleft(fracΨ_1^n+1Ψ_1^nright)\n\nSee ShiftStrategy, ProjectorMonteCarloProblem.\n\n\n\n\n\n","category":"type"},{"location":"API.html#Rimu.LogUpdateAfterTargetWalkers","page":"API","title":"Rimu.LogUpdateAfterTargetWalkers","text":"LogUpdateAfterTargetWalkers(target_walkers = 1_000, ζ = 0.08) <: ShiftStrategy\n\nStrategy for updating the shift: After target_walkers is reached, update the shift according to the log formula with damping parameter ζ.\n\nSee LogUpdate, ShiftStrategy, ProjectorMonteCarloProblem.\n\n\n\n\n\n","category":"type"},{"location":"API.html#Rimu.MultiScalar","page":"API","title":"Rimu.MultiScalar","text":"MultiScalar\n\nWrapper over a tuple that supports +, *, min, and max. Used with MPI communication because SVectors are treated as arrays by MPI.Allreduce and Tuples do not support scalar operations.\n\nExample\n\nSuppose you want to compute the sum of a vector dv and also get the number of positive elements it has in a single pass. You can use MultiScalar:\n\njulia> dv = DVec(:a => 1, :b => -2, :c => 1);\n\njulia> s, p = mapreduce(+, values(dv)) do v\n    Rimu.MultiScalar(v, Int(sign(v) == 1))\nend;\n\njulia> s, p\n(0, 2)\n\nNote that only MultiScalars with the same types can be operated on. This is a feature, as it forces type stability.\n\n\n\n\n\n","category":"type"},{"location":"API.html#Rimu.NoStats","page":"API","title":"Rimu.NoStats","text":"NoStats(N=1) <: ReplicaStrategy{N}\n\nThe default ReplicaStrategy. N replicas are run, but no statistics are collected.\n\nSee also ProjectorMonteCarloProblem.\n\n\n\n\n\n","category":"type"},{"location":"API.html#Rimu.PMCAlgorithm","page":"API","title":"Rimu.PMCAlgorithm","text":"PMCAlgorithm\n\nAbstract type for projector Monte Carlo algorithms.\n\nSee ProjectorMonteCarloProblem, FCIQMC.\n\n\n\n\n\n","category":"type"},{"location":"API.html#Rimu.PMCSimulation","page":"API","title":"Rimu.PMCSimulation","text":"PMCSimulation\n\nHolds the state and the results of a projector quantum Monte Carlo (PMC) simulation. Is returned by init(::ProjectorMonteCarloProblem) and solved with solve!(::PMCSimulation).\n\nObtain the results of a simulation sm as a DataFrame with DataFrame(sm).\n\nSee also state_vectors, ProjectorMonteCarloProblem, init, solve!.\n\n\n\n\n\n","category":"type"},{"location":"API.html#Rimu.PostStepStrategy","page":"API","title":"Rimu.PostStepStrategy","text":"PostStepStrategy\n\nSubtypes of PostStepStrategy can be used to perform arbitrary computation on a single state after an FCIQMC step is finished and report the results.\n\nImplemented strategies:\n\nProjectedEnergy\nProjector\nSignCoherence\nWalkerLoneliness\nTimer\n\nNote: A tuple of multiple strategies can be passed to ProjectorMonteCarloProblem. In that case, all reported column names must be distinct.\n\nInterface:\n\nA subtype of this type must implement post_step_action(::PostStepStrategy, ::SingleState, step::Int).\n\n\n\n\n\n","category":"type"},{"location":"API.html#Rimu.ProjectedEnergy","page":"API","title":"Rimu.ProjectedEnergy","text":"ProjectedEnergy(hamiltonian, projector; hproj=:hproj, vproj=:vproj) <: PostStepStrategy\n\nAfter every step, compute hproj = dot(projector, hamiltonian, dv) and vproj = dot(projector, dv), where dv is the instantaneous coefficient vector.  projector can be an AbstractDVec, or an AbstractProjector.\n\nReports to columns hproj and vproj, which can be used to compute projective energy, e.g. with projected_energy. The keyword arguments hproj and vproj can be used to change the names of these columns. This can be used to make the names unique when computing projected energies with different projectors in the same run.\n\nSee also projected_energy, ratio_of_means, mixed_estimator, and PostStepStrategy.\n\n\n\n\n\n","category":"type"},{"location":"API.html#Rimu.Projector","page":"API","title":"Rimu.Projector","text":"Projector(name=projector) <: PostStepStrategy\n\nAfter each step, compute dot(projector, dv) and report it in the DataFrame under name. projector can be an AbstractDVec, or an AbstractProjector.\n\n\n\n\n\n","category":"type"},{"location":"API.html#Rimu.ProjectorMonteCarloProblem","page":"API","title":"Rimu.ProjectorMonteCarloProblem","text":"ProjectorMonteCarloProblem(hamiltonian::AbstractHamiltonian; kwargs...)\n\nDefines a problem to be solved by projector quantum Monte Carlo (QMC) methods, such as the the FCIQMC algorithm.\n\nCommon keyword arguments and defaults:\n\ntime_step = 0.01: Initial time step size.\nlast_step = 100: Controls the number of steps.\ntarget_walkers = 1_000: Target for the 1-norm of the coefficient vector.\nstart_at = starting_address(hamiltonian): Define the initial state vector(s).   An r  s matrix of state vectors can be passed where r is the   number of replicas and s the number of spectral states. See also   default_starting_vector.\nstyle = IsDynamicSemistochastic(): The StochasticStyle of the simulation.\ninitiator = false: Whether to use initiators. Can be true, false, or a valid   InitiatorRule.\nthreading: Default is to use multithreading and/or MPI if available. Set to true to force PDVec for the starting vector, false for serial computation; may be overridden by start_at.\nreporting_strategy = ReportDFAndInfo(): How and when to report results, see ReportingStrategy.\npost_step_strategy = (): Extract observables (e.g. ProjectedEnergy), see PostStepStrategy.\nn_replicas = 1: Number of synchronised independent simulations.\nreplica_strategy = NoStats(n_replicas): Which results to report from replica simulations, see ReplicaStrategy.\n\nExample\n\njulia> hamiltonian = HubbardReal1D(BoseFS(1,2,3));\n\njulia> problem = ProjectorMonteCarloProblem(hamiltonian; target_walkers = 500, last_step = 100);\n\njulia> simulation = solve(problem);\n\njulia> simulation.success[]\ntrue\n\njulia> size(DataFrame(simulation))\n(100, 9)\n\nFurther keyword arguments:\n\nstarting_step = 1: Starting step of the simulation.\nwalltime = Inf: Maximum time allowed for the simulation.\nsimulation_plan = SimulationPlan(; starting_step, last_step, walltime): Defines the   duration of the simulation. Takes precedence over last_step and walltime.\nζ = 0.08: Damping parameter for the shift update.\nξ = ζ^2/4: Forcing parameter for the shift update.\nshift_strategy = DoubleLogUpdate(; target_walkers, ζ, ξ): How to update the shift,   see ShiftStrategy.\ntime_step_strategy = ConstantTimeStep(): Adjust time step or not, see   TimeStepStrategy.\nalgorithm = FCIQMC(; shift_strategy, time_step_strategy): The algorithm to use.   Currenlty only FCIQMC is implemented.\nshift: Initial shift value or collection of shift values. Determined by default from the   Hamiltonian and the starting vectors.\ninitial_shift_parameters: Initial shift parameters or collection of initial shift   parameters. Overrides shift if provided.\nmaxlength = 2 * target_walkers + 100: Maximum length of the vectors.\ndisplay_name = \"PMCSimulation\": Name displayed in progress bar (via ProgressLogging).\nmetadata: User-supplied metadata to be added to the report. Must be an iterable of pairs or a NamedTuple, e.g. metadata = (\"key1\" => \"value1\", \"key2\" => \"value2\"). All metadata is converted to strings.\nrandom_seed = true: Provide and store a seed for the random number generator. If set to   true, a random seed is generated. If set to number, this number is used as the seed.   The seed is used by solve such that solveing the problem twice will yield identical   results. If set to false, no seed is used and results are not reproducible.\n\nSee also init, solve.\n\n\n\n\n\n","category":"type"},{"location":"API.html#Rimu.ReplicaState","page":"API","title":"Rimu.ReplicaState","text":"ReplicaState <: AbstractMatrix{SingleState}\n\nHolds information about multiple replicas of SpectralStates.\n\nIndexing the ReplicaState state[i, j] returns a SingleState from the ith replica and jth spectral state.\n\nSee also ReplicaStrategy, SpectralState, SingleState, PMCSimulation.\n\n\n\n\n\n","category":"type"},{"location":"API.html#Rimu.ReplicaStrategy","page":"API","title":"Rimu.ReplicaStrategy","text":"ReplicaStrategy{N}\n\nSupertype for strategies that can be passed to ProjectorMonteCarloProblem and control how many replicas are used, and what information is computed and returned. The number of replicas is N.\n\nConcrete implementations\n\nNoStats: run (possibly one) replica(s), but don't report any additional info.\nAllOverlaps: report overlaps between all pairs of replica vectors.\n\nInterface\n\nA subtype of ReplicaStrategy{N} must implement the following function:\n\nRimu.replica_stats - return a tuple of Strings or Symbols of names for replica statistics and a tuple of the values. These will be reported to the DataFrame returned by ProjectorMonteCarloProblem.\n\n\n\n\n\n","category":"type"},{"location":"API.html#Rimu.Report","page":"API","title":"Rimu.Report","text":"Report()\nReport(df::DataFrame)\n\nInternal structure that holds the temporary reported values as well as metadata. It can be converted to a DataFrame with DataFrame(report::Report).\n\nSee report!, report_metadata!, get_metadata.\n\n\n\n\n\n","category":"type"},{"location":"API.html#Rimu.ReportDFAndInfo","page":"API","title":"Rimu.ReportDFAndInfo","text":"ReportDFAndInfo(; reporting_interval=1, info_interval=100, io=stdout, writeinfo=false) <: ReportingStrategy\n\nThe default ReportingStrategy. Report every reporting_intervalth step to a DataFrame and write info message to io every info_intervalth reported step (unless writeinfo == false). The flag writeinfo is useful for controlling info messages in MPI codes, e.g. by setting writeinfo =is_mpi_root().\n\n\n\n\n\n","category":"type"},{"location":"API.html#Rimu.ReportToFile","page":"API","title":"Rimu.ReportToFile","text":"ReportToFile(; kwargs...) <: ReportingStrategy\n\nReportingStrategy that writes the report directly to a file in the Arrow format. Useful when dealing with long jobs or large numbers of replicas, when the report can incur a significant memory cost.\n\nThe arrow file can be read back in with load_df(filename) or using Arrow; Arrow.Table(filename).\n\nKeyword arguments\n\nfilename = \"out.arrow\": the file to report to. If the file already exists, a new file is created.\nreporting_interval = 1: interval between simulation steps that are reported.\nchunk_size = 1000: the size of each chunk that is written to the file. A DataFrame of this size is collected in memory and written to disk. When saving, an info message is also printed to io.\nsave_if =is_mpi_root(): if this value is true, save the report, otherwise ignore it.\nreturn_df = false: if this value is true, read the file and return the data frame at the end of computation. Otherwise, an empty DataFrame is returned.\nio = stdout: The IO to print messages to. Set to devnull if you don't want to see messages printed out.\ncompress = :zstd: compression algorithm to use. Can be :zstd, :lz4 or nothing.\n\nSee also load_df and save_df.\n\n\n\n\n\n","category":"type"},{"location":"API.html#Rimu.ReportingStrategy","page":"API","title":"Rimu.ReportingStrategy","text":"ReportingStrategy\n\nAbstract type for strategies for reporting data in a DataFrame with report!().\n\nImplemented strategies:\n\nReportDFAndInfo\nReportToFile\n\nInterface:\n\nA ReportingStrategy can define any of the following:\n\nrefine_reporting_strategy\nreport!\nreport_after_step!\nfinalize_report!\nreporting_interval\n\n\n\n\n\n","category":"type"},{"location":"API.html#Rimu.RunTillLastStep","page":"API","title":"Rimu.RunTillLastStep","text":"RunTillLastStep(step::Int = 0 # number of current/starting timestep\n             laststep::Int = 100 # number of final timestep\n             shiftMode::Bool = false # whether to adjust shift\n             shift = 0.0 # starting/current value of shift\n             dτ::Float64 = 0.01 # current value of time step\n) <: FciqmcRunStrategy\n\nParameters for running lomc!() for a fixed number of time steps. For alternative strategies, see FciqmcRunStrategy.\n\nwarning: Warning\nThe use of this strategy is deprecated. Pass the relevant arguments directly to ProjectorMonteCarloProblem or to lomc!() instead.\n\n\n\n\n\n","category":"type"},{"location":"API.html#Rimu.ShiftStrategy","page":"API","title":"Rimu.ShiftStrategy","text":"ShiftStrategy\n\nAbstract type for defining the strategy for controlling the norm, potentially by updating the shift. Passed as a parameter to ProjectorMonteCarloProblem or to FCIQMC.\n\nImplemented strategies:\n\nDontUpdate\nDoubleLogUpdate - default in ProjectorMonteCarloProblem()\nLogUpdate\nLogUpdateAfterTargetWalkers - FCIQMC standard\nDoubleLogUpdateAfterTargetWalkers\n\nExtended help\n\nInternally To implement a custom strategy, define a new subtype of Rimu.ShiftStrategy and implement methods for:\n\nRimu.update_shift_parameters! - to update the shift_parameters\nRimu.initialise_shift_parameters - (optional) to initialise and construct a   custom implementation of the shift_parameters. The default implementation is   Rimu.DefaultShiftParameters.\n\n\n\n\n\n","category":"type"},{"location":"API.html#Rimu.SignCoherence","page":"API","title":"Rimu.SignCoherence","text":"SignCoherence(reference[; name=:coherence]) <: PostStepStrategy\n\nAfter each step, compute the proportion of configurations that have the same sign as they do in the reference_dvec. Reports to a column named name, which defaults to coherence.\n\n\n\n\n\n","category":"type"},{"location":"API.html#Rimu.SimulationPlan","page":"API","title":"Rimu.SimulationPlan","text":"SimulationPlan(; starting_step = 1, last_step = 100, walltime = Inf)\n\nDefines the duration of the simulation. The simulation ends when the last_step is reached or the walltime is exceeded.\n\nSee ProjectorMonteCarloProblem, PMCSimulation.\n\n\n\n\n\n","category":"type"},{"location":"API.html#Rimu.SingleParticleDensity","page":"API","title":"Rimu.SingleParticleDensity","text":"SingleParticleDensity(; save_every=1, component) <: PostStepStrategy\n\nPostStepStrategy  to  compute the diagonal single_particle_density. It records a Tuple with the same eltype as the vector.\n\nComputing the density at every time step can be expensive. This cost can be reduced by setting the save_every argument to a higher value. If the value is set, a vector of zeros is recorded when the saving is skipped.\n\nIf the address type has multiple components, the component argument can be used to compute the density on a per-component basis.\n\nThe density is not normalized, and must be divided by the vector norm(⋅,2) squared.\n\nSee also\n\nsingle_particle_density\nDensityMatrixDiagonal\n\n\n\n\n\n","category":"type"},{"location":"API.html#Rimu.SingleState","page":"API","title":"Rimu.SingleState","text":"SingleState(hamiltonian, algorithm, v, wm, pnorm, params, id)\n\nStruct that holds a single state vector and all information needed for an independent run of the algorithm. Can be advanced a step forward with advance!.\n\nSee also SpectralState, SpectralStrategy, ReplicaState, ReplicaStrategy, replica_stats, PMCSimulation.\n\n\n\n\n\n","category":"type"},{"location":"API.html#Rimu.SpectralState","page":"API","title":"Rimu.SpectralState","text":"SpectralState <: AbstractVector{SingleState}\n\nHolds one or several SingleStates representing the ground state and excited states of a single replica.\n\nIndexing the SpectralState state[i] returns the ith SingleState.\n\nSee also SpectralStrategy, ReplicaState, SingleState, PMCSimulation.\n\n\n\n\n\n","category":"type"},{"location":"API.html#Rimu.SpectralStrategy","page":"API","title":"Rimu.SpectralStrategy","text":"SpectralStrategy{S}\n\nAbstract type for spectral strategies. The spectral strategy is used to control the number of spectral states used in the simulation.\n\n\n\n\n\n","category":"type"},{"location":"API.html#Rimu.StateVectors","page":"API","title":"Rimu.StateVectors","text":"StateVectors <: AbstractMatrix{V}\n\nRepresents a matrix of configuration vectors from the state. Construct this object with state_vectors.\n\n\n\n\n\n","category":"type"},{"location":"API.html#Rimu.TimeStepStrategy","page":"API","title":"Rimu.TimeStepStrategy","text":"TimeStepStrategy\n\nAbstract type for strategies for updating the time step with update_time_step(). Implemented strategies:\n\nConstantTimeStep\n\n\n\n\n\n","category":"type"},{"location":"API.html#Rimu.Timer","page":"API","title":"Rimu.Timer","text":"Timer <: PostStepStrategy\n\nRecord current time after every step. See Base.Libc.time for information on what time is recorded.\n\n\n\n\n\n","category":"type"},{"location":"API.html#Rimu.WalkerLoneliness","page":"API","title":"Rimu.WalkerLoneliness","text":"WalkerLoneliness(threshold=1) <: PostStepStrategy\n\nAfter each step, compute the proportion of configurations that are occupied by at most threshold walkers. Reports to a column named loneliness.\n\n\n\n\n\n","category":"type"},{"location":"API.html#CommonSolve.init-Tuple{ProjectorMonteCarloProblem}","page":"API","title":"CommonSolve.init","text":"init(problem::ProjectorMonteCarloProblem; copy_vectors=true)::PMCSimulation\n\nInitialise a Rimu.PMCSimulation.\n\nSee also ProjectorMonteCarloProblem, solve!, solve, step!, Rimu.PMCSimulation.\n\n\n\n\n\n","category":"method"},{"location":"API.html#CommonSolve.solve","page":"API","title":"CommonSolve.solve","text":"solve(::ProjectorMonteCarloProblem)::PMCSimulation\n\nInitialize and solve a ProjectorMonteCarloProblem until the last step is completed or the walltime limit is reached.\n\nSee also init, solve!, step!, Rimu.PMCSimulation, and solve(::ExactDiagonalizationProblem).\n\n\n\n\n\n","category":"function"},{"location":"API.html#CommonSolve.solve!-Tuple{Rimu.PMCSimulation}","page":"API","title":"CommonSolve.solve!","text":"solve!(sm::PMCSimulation; kwargs...)::PMCSimulation\n\nSolve a Rimu.PMCSimulation until the last step is completed or the walltime limit is reached.\n\nTo continue a previously completed simulation, set a new last_step or walltime using the keyword arguments. Optionally, changes can be made to the replica_strategy, the post_step_strategy, or the reporting_strategy.\n\nOptional keyword arguments:\n\nlast_step = nothing: Set the last step to a new value and continue the simulation.\nwalltime = nothing: Set the allowed walltime to a new value and continue the simulation.\nreset_time = false: Reset the elapsed_time counter and continue the simulation.\nempty_report = false: Empty the report before continuing the simulation.\nreplica_strategy = nothing: Change the replica strategy. Requires the number of replicas   to match the number of replicas in the simulation sm. Implies empty_report = true.\npost_step_strategy = nothing: Change the post-step strategy. Implies   empty_report = true.\nreporting_strategy = nothing: Change the reporting strategy. Implies   empty_report = true.\nmetadata = nothing: Add metadata to the report.\n\nSee also ProjectorMonteCarloProblem, init, solve, step!, Rimu.PMCSimulation.\n\n\n\n\n\n","category":"method"},{"location":"API.html#CommonSolve.step!-Tuple{Rimu.PMCSimulation}","page":"API","title":"CommonSolve.step!","text":"step!(sm::PMCSimulation)::PMCSimulation\n\nAdvance the simulation by one step.\n\nCalling solve! will advance the simulation until the last step or the walltime is exceeded. When completing the simulation without calling solve!, the simulation report needs to be finalised by calling Rimu.finalize_report!.\n\nSee also ProjectorMonteCarloProblem, init, solve!, solve, Rimu.PMCSimulation.\n\n\n\n\n\n","category":"method"},{"location":"API.html#Rimu._n_walkers-Tuple{Any, Any}","page":"API","title":"Rimu._n_walkers","text":"_n_walkers(v, shift_strategy)\n\nReturns an estimate of the expected number of walkers as an integer.\n\n\n\n\n\n","category":"method"},{"location":"API.html#Rimu.advance!-Tuple{FCIQMC, Any, Rimu.ReplicaState, Rimu.SingleState}","page":"API","title":"Rimu.advance!","text":"advance!(algorithm::PMCAlgorithm, report::Report, state::ReplicaState, s_state::SingleState)\n\nAdvance the s_state by one step according to the algorithm. The state is used only to access the various strategies involved. Steps, stats, and computed quantities are written to the report.\n\nReturns true if the step was successful and calculation should proceed, false when it should terminate.\n\nSee also solve!, step!.\n\n\n\n\n\n","category":"method"},{"location":"API.html#Rimu.all_overlaps-Union{Tuple{B}, Tuple{N}, Tuple{Union{Tuple, Vector}, NTuple{N, AbstractDVec}, Any, Val{B}}} where {N, B}","page":"API","title":"Rimu.all_overlaps","text":"all_overlaps(operators, vectors, working_memories, vecnorm=true)\n\nGet all overlaps between vectors and operators.  The flag vecnorm can disable the vector-vector overlap c{i}_dot_c{j}.\n\n\n\n\n\n","category":"method"},{"location":"API.html#Rimu.check_transform-Tuple{AllOverlaps, AbstractHamiltonian}","page":"API","title":"Rimu.check_transform","text":"check_transform(r::AllOverlaps, ham)\n\nCheck that the transformation provided to r::AllOverlaps matches the given Hamiltonian ham. Used as a sanity check before starting main ProjectorMonteCarloProblem loop.\n\n\n\n\n\n","category":"method"},{"location":"API.html#Rimu.clean_and_warn_if_others_present-Union{Tuple{names}, Tuple{NamedTuple{names}, Any}} where names","page":"API","title":"Rimu.clean_and_warn_if_others_present","text":"clean_and_warn_if_others_present(nt::NamedTuple{names}, keys) where {names}\n\nRemove keys from a NamedTuple that are not in keys and issue a warning if they are present.\n\n\n\n\n\n","category":"method"},{"location":"API.html#Rimu.default_logger-Tuple","page":"API","title":"Rimu.default_logger","text":"default_logger(args...)\n\nReset the global_logger to Logging.ConsoleLogger. Undoes the effect of smart_logger. Arguments are passed on to Logging.ConsoleLogger.\n\n\n\n\n\n","category":"method"},{"location":"API.html#Rimu.default_starting_vector-Tuple{AbstractHamiltonian}","page":"API","title":"Rimu.default_starting_vector","text":"default_starting_vector(hamiltonian::AbstractHamiltonian; kwargs...)\ndefault_starting_vector(\n    address=starting_address(hamiltonian);\n    style=IsDynamicSemistochastic(),\n    initiator=NonInitiator(),\n    threading=nothing,\n    population=10\n)\n\nReturn a default starting vector for ProjectorMonteCarloProblem. The default choice for the starting vector is\n\nv = PDVec(address => population; style, initiator)\n\nif threading is available, or otherwise\n\nv = DVec(address => population; style)\n\nif initiator == NonInitiator(), and\n\nv = InitiatorDVec(address => population; style, initiator)\n\nif not. See PDVec, DVec, InitiatorDVec, StochasticStyle, and InitiatorRule.\n\n\n\n\n\n","category":"method"},{"location":"API.html#Rimu.delete_and_warn_if_present-Union{Tuple{names}, Tuple{NamedTuple{names}, Any}} where names","page":"API","title":"Rimu.delete_and_warn_if_present","text":"delete_and_warn_if_present(nt::NamedTuple, keys)\n\nDelete keys from a NamedTuple and issue a warning if they are present. This is useful for removing unused keyword arguments.\n\n\n\n\n\n","category":"method"},{"location":"API.html#Rimu.finalize_report!-Tuple{ReportingStrategy, Any}","page":"API","title":"Rimu.finalize_report!","text":"finalize_report!(::ReportingStrategy, report)\n\nFinalize the report. This function is called after all steps in solve! have finished.\n\n\n\n\n\n","category":"method"},{"location":"API.html#Rimu.get_metadata-Tuple{Rimu.Report, Any}","page":"API","title":"Rimu.get_metadata","text":"get_metadata(report::Report, key)\n\nGet metadata key from report. key is converted to a String.\n\nSee also report_metadata!, Report, report!.\n\n\n\n\n\n","category":"method"},{"location":"API.html#Rimu.initialise_shift_parameters","page":"API","title":"Rimu.initialise_shift_parameters","text":"initialise_shift_parameters(s::ShiftStrategy, shift, norm, time_step, counter=0, shift_mode=false)\n\nInitiatlise a struct to store the shift parameters.\n\nSee ShiftStrategy, update_shift_parameters!, DefaultShiftParameters.\n\n\n\n\n\n","category":"function"},{"location":"API.html#Rimu.is_mpi_root","page":"API","title":"Rimu.is_mpi_root","text":"is_mpi_root(root = mpi_root)\n\nReturns true if called from the root rank\n\n\n\n\n\n","category":"function"},{"location":"API.html#Rimu.lomc!-Tuple{Any, Any}","page":"API","title":"Rimu.lomc!","text":"lomc!(ham::AbstractHamiltonian, [v]; kwargs...) -> df, state\nlomc!(state::ReplicaState, [df]; kwargs...) -> df, state\n\nLinear operator Monte Carlo: Perform a projector quantum Monte Carlo simulation for determining the lowest eigenvalue of ham. The details of the simulation are controlled by the optional keyword arguments and by the type of the optional starting vector v. Alternatively, a ReplicaState can be passed in to continue a previous simulation.\n\nCommon keyword arguments and defaults:\n\nlaststep = 100 - controls the number of steps.\ndτ = 0.01 - time step.\ntargetwalkers = 1000 - target for the 1-norm of the coefficient vector.\naddress = starting_address(ham) - set starting address for default v and shift.\nstyle = IsStochasticInteger() - set StochasticStyle for default v; unused if v is specified.\ninitiator = NonInitiator() - set InitiatorRule for default v; unused if v is specified.\nthreading - default is to use multithreading and MPI if multiple threads are available. Set to true to force PDVec for the starting vector, false for serial computation; unused if v is specified.\nshift = diagonal_element(ham, address) - initial value of shift.\npost_step_strategy::NTuple{N,<:PostStepStrategy} = () - extract observables (e.g. ProjectedEnergy), see PostStepStrategy. (Deprecated: post_step is accepted as an alias for post_step_strategy.)\nreplica_strategy::ReplicaStrategy = NoStats(1) - run several synchronised simulations, see ReplicaStrategy. (Deprecated: replica is accepted as an alias for replica_strategy.)\nreporting_strategy::ReportingStrategy = ReportDFAndInfo() - how and when to report results, see ReportingStrategy. (Deprecated: r_strat is accepted as an alias for reporting_strategy.)\nname = \"lomc!\" - name displayed in progress bar (via ProgressLogging)\nmetadata - user-supplied metadata to be added to the report df. Must be an iterable of pairs or a NamedTuple, e.g. metadata = (\"key1\" => \"value1\", \"key2\" => \"value2\"). All metadata is converted to strings.\n\nSome metadata is automatically added to the report df including Rimu.PACKAGE_VERSION and data from state.\n\nReturn values\n\nlomc! returns a named tuple with the following fields:\n\ndf: a DataFrame with all statistics being reported.\nstate: a ReplicaState that can be used for continuations.\n\nExample\n\njulia> address = BoseFS(1,2,3);\n\njulia> hamiltonian = HubbardReal1D(address);\n\njulia> df1, state = lomc!(hamiltonian; targetwalkers=500, laststep=100);\n\njulia> df2, _ = lomc!(state, df1; laststep=200, metadata=(;info=\"cont\")); # Continuation run\n\njulia> size(df1)\n(100, 9)\n\njulia> size(df2)\n(200, 9)\n\njulia> using DataFrames; metadata(df2, \"info\") # retrieve custom metadata\n\"cont\"\n\njulia> metadata(df2, \"hamiltonian\") # some metadata is automatically added\n\"HubbardReal1D(fs\\\"|1 2 3⟩\\\"; u=1.0, t=1.0)\"\n\nFurther keyword arguments and defaults:\n\nτ_strat::TimeStepStrategy = ConstantTimeStep() - adjust time step or not, see TimeStepStrategy\ns_strat::ShiftStrategy = DoubleLogUpdate(; target_walkers=targetwalkers, ζ = 0.08, ξ = ζ^2/4) - how to update the shift, see ShiftStrategy.\nmaxlength = 2 * s_strat.target_walkers + 100 - upper limit on the length of v; when reached, lomc! will abort\nwm - working memory for re-use in subsequent calculations; is mutated.\ndf = DataFrame() - when called with AbstractHamiltonian argument, a DataFrame can be passed for merging with the report df.\n\nThe default choice for the starting vector is v = default_starting_vector(; address, style, threading, initiator). See default_starting_vector, PDVec, DVec, StochasticStyle, and InitiatorRule.\n\nwarning: Warning\nThe use of this lomc! is deprecated. Use ProjectorMonteCarloProblem and solve instead.\n\n\n\n\n\n","category":"method"},{"location":"API.html#Rimu.mpi_allprintln-Tuple","page":"API","title":"Rimu.mpi_allprintln","text":"mpi_allprintln(args...)\n\nPrint a message to stdout from each rank separately, in order. MPI synchronizing.\n\n\n\n\n\n","category":"method"},{"location":"API.html#Rimu.mpi_barrier","page":"API","title":"Rimu.mpi_barrier","text":"mpi_barrier(comm = mpi_comm())\n\nThe MPI barrier with optional argument. MPI syncronizing.\n\n\n\n\n\n","category":"function"},{"location":"API.html#Rimu.mpi_rank","page":"API","title":"Rimu.mpi_rank","text":"mpi_rank(comm = mpi_comm())\n\nReturn the current MPI rank.\n\n\n\n\n\n","category":"function"},{"location":"API.html#Rimu.mpi_seed!","page":"API","title":"Rimu.mpi_seed!","text":"mpi_seed!(seed = rand(Random.RandomDevice(), UInt))\n\nRe-seed the random number generators in an MPI-safe way. If seed is provided, the random numbers from rand will follow a deterministic sequence.\n\nIndependence of the random number generators on different MPI ranks is achieved by adding hash(mpi_rank()) to seed.\n\n\n\n\n\n","category":"function"},{"location":"API.html#Rimu.mpi_size","page":"API","title":"Rimu.mpi_size","text":"mpi_size(comm = mpi_comm())\n\nSize of MPI communicator.\n\n\n\n\n\n","category":"function"},{"location":"API.html#Rimu.num_replicas-Union{Tuple{ReplicaStrategy{N}}, Tuple{N}} where N","page":"API","title":"Rimu.num_replicas","text":"num_replicas(state_or_strategy)\n\nReturn the number of replicas used in the simulation.\n\n\n\n\n\n","category":"method"},{"location":"API.html#Rimu.num_spectral_states-Union{Tuple{Rimu.SpectralStrategy{S}}, Tuple{S}} where S","page":"API","title":"Rimu.num_spectral_states","text":"num_spectral_states(state_or_strategy)\n\nReturn the number of spectral states used in the simulation.\n\n\n\n\n\n","category":"method"},{"location":"API.html#Rimu.post_step_action","page":"API","title":"Rimu.post_step_action","text":"post_step_action(::PostStepStrategy, ::SingleState, step) -> kvpairs\n\nCompute statistics after FCIQMC step. Should return a tuple of :key => value pairs. This function is only called every reporting_interval steps, as defined by the ReportingStrategy.\n\nSee also PostStepStrategy, ReportingStrategy.\n\n\n\n\n\n","category":"function"},{"location":"API.html#Rimu.refine_reporting_strategy-Tuple{ReportingStrategy}","page":"API","title":"Rimu.refine_reporting_strategy","text":"refine_reporting_strategy(reporting_strategy::ReportingStrategy) -> reporting_strategy\n\nInitialize the reporting strategy. This can be used to set up filenames or other attributes that need to be unique for a run of FCIQMC.\n\n\n\n\n\n","category":"method"},{"location":"API.html#Rimu.replace_keys-Tuple{NamedTuple, Any}","page":"API","title":"Rimu.replace_keys","text":"replace_keys(nt::NamedTuple, (:old1 => :new1, :old2 => :new2, ...))\n\nReplace keys in a NamedTuple with new keys. This is useful for renaming fields in a NamedTuple. Ignores keys that are not present in the NamedTuple.\n\n\n\n\n\n","category":"method"},{"location":"API.html#Rimu.replica_stats","page":"API","title":"Rimu.replica_stats","text":"replica_stats(RS::ReplicaStrategy{N}, spectral_states::NTuple{N,SingleState}) -> (names, values)\n\nReturn the names and values of statistics related to N replica states consistent with the ReplicaStrategy RS. names should be a tuple of Symbols or Strings and values should be a tuple of the same length. This function will be called every reporting_interval steps from ProjectorMonteCarloProblem, or once per time step if reporting_interval is not defined.\n\nPart of the ReplicaStrategy interface. See also SingleState.\n\n\n\n\n\n","category":"function"},{"location":"API.html#Rimu.report!-Tuple{ReportingStrategy, Any, Vararg{Any}}","page":"API","title":"Rimu.report!","text":" report!(::ReportingStrategy, step, report::Report, keys, values, id=\"\")\n report!(::ReportingStrategy, step, report::Report, nt, id=\"\")\n\nReport keys and values to report, which will be converted to a DataFrame before ProjectorMonteCarloProblem exits. Alternatively, a nt::NamedTuple can be passed in place of keys and values. If id is specified, it is appended to all keys. This is used to differentiate between values reported by different replicas.\n\nTo overload this function for a new ReportingStrategy, overload report!(::ReportingStrategy, step, args...) and apply the report by calling report!(args...).\n\n\n\n\n\n","category":"method"},{"location":"API.html#Rimu.report!-Tuple{Rimu.Report, DataFrame}","page":"API","title":"Rimu.report!","text":"report!(report::Report, df::DataFrame)\n\nConvert the DataFrame df to a Report. This function does not copy the data.\n\n\n\n\n\n","category":"method"},{"location":"API.html#Rimu.report!-Tuple{Rimu.Report, Union{AbstractString, Symbol}, Any}","page":"API","title":"Rimu.report!","text":"report!(report, keys, values, id=\"\")\nreport!(report, pairs, id=\"\")\n\nWrite keys, values pairs to report that will be converted to a DataFrame later. Alternatively, a named tuple or a collection of pairs can be passed instead of keys and values.\n\nThe value of id is appended to the name of the column, e.g. report!(report, :key, value, :_1) will report value to a column named :key_1.\n\n\n\n\n\n","category":"method"},{"location":"API.html#Rimu.report_after_step!-Tuple{ReportingStrategy, Any, Any, Vararg{Any}}","page":"API","title":"Rimu.report_after_step!","text":"report_after_step!(::ReportingStrategy, step, report, state) -> report\n\nThis function is called at the very end of a step, after reporting_interval steps. It may modify the report.\n\n\n\n\n\n","category":"method"},{"location":"API.html#Rimu.report_metadata!-Tuple{Rimu.Report, Any, Any}","page":"API","title":"Rimu.report_metadata!","text":"report_metadata!(report::Report, key, value)\nreport_metadata!(report::Report, kvpairs)\n\nSet metadata key to value in report. key and value are converted to Strings. Alternatively, an iterable of key-value pairs or a NamedTuple can be passed.\n\nSee also get_metadata, report!, Report.\n\n\n\n\n\n","category":"method"},{"location":"API.html#Rimu.reporting_interval-Tuple{ReportingStrategy}","page":"API","title":"Rimu.reporting_interval","text":"reporting_interval(::ReportingStrategy)\n\nGet the interval between steps for which non-essential statistics are reported. Defaults to 1 if chosen ReportingStrategy does not specify an interval.\n\n\n\n\n\n","category":"method"},{"location":"API.html#Rimu.set_up_initial_shift_parameters-Union{Tuple{R}, Tuple{S}, Tuple{FCIQMC, Any, StaticArraysCore.SMatrix{S, R}, Any, Any}} where {S, R}","page":"API","title":"Rimu.set_up_initial_shift_parameters","text":"set_up_initial_shift_parameters(\n    algorithm::FCIQMC, hamiltonian, starting_vectors, shift, time_step, initial_shift_parameters\n)\n\nSet up the initial shift parameters for the FCIQMC algorithm.\n\n\n\n\n\n","category":"method"},{"location":"API.html#Rimu.single_particle_density-Tuple{Any}","page":"API","title":"Rimu.single_particle_density","text":"single_particle_density(dvec; component)\nsingle_particle_density(add; component)\n\nCompute the diagonal single particle density of vector dvec or address add. If the component argument is given, only that component of the addresses is taken into account. The result is always normalized so that sum(result) ≈ num_particles(address).\n\nExamples\n\njulia> v = DVec(fs\"|⋅↑⇅↓⋅⟩\" => 1.0, fs\"|↓↓⋅↑↑⟩\" => 0.5)\nDVec{FermiFS2C{2, 2, 5, 4, FermiFS{2, 5, BitString{5, 1, UInt8}}, FermiFS{2, 5, BitString{5, 1, UInt8}}},Float64} with 2 entries, style = IsDeterministic{Float64}()\n  fs\"|↓↓⋅↑↑⟩\" => 0.5\n  fs\"|⋅↑⇅↓⋅⟩\" => 1.0\n\njulia> single_particle_density(v)\n(0.2, 1.0, 1.6, 1.0, 0.2)\n\njulia> single_particle_density(v; component=1)\n(0.0, 1.6, 1.6, 0.4, 0.4)\n\nSee also\n\nSingleParticleDensity\n\n\n\n\n\n","category":"method"},{"location":"API.html#Rimu.smart_logger-Tuple","page":"API","title":"Rimu.smart_logger","text":"smart_logger(args...)\n\nEnable terminal progress bar during interactive use (i.e. unless running on CI or HPC). Arguments are passed on to the logger. This is run once during Rimu startup. Undo with default_logger or by setting Base.global_logger().\n\n\n\n\n\n","category":"method"},{"location":"API.html#Rimu.state_vectors-Tuple{R} where R<:Rimu.ReplicaState","page":"API","title":"Rimu.state_vectors","text":"state_vectors(state::ReplicaState)\nstate_vectors(sim::PMCSimulation)\n\nReturn an AbstractMatrix of configuration vectors from the state. The vectors can be accessed by indexing the resulting collection, where the row index corresponds to the replica index and the column index corresponds to the spectral state index.\n\nSee also SingleState, ReplicaState, SpectralState, PMCSimulation.\n\n\n\n\n\n","category":"method"},{"location":"API.html#Rimu.update_shift_parameters!","page":"API","title":"Rimu.update_shift_parameters!","text":"update_shift_parameters!(\n    s <: ShiftStrategy,\n    shift_parameters,\n    tnorm,\n    v_new,\n    v_old,\n    step,\n    report\n) -> shift_stats, proceed\n\nUpdate the shift_parameters according to strategy s. See ShiftStrategy. Returns a named tuple of the shift statistics and a boolean proceed indicating whether the simulation should proceed.\n\nSee initialise_shift_parameters, ShiftStrategy.\n\n\n\n\n\n","category":"function"},{"location":"API.html#Rimu.update_time_step-Tuple{ConstantTimeStep, Any, Vararg{Any}}","page":"API","title":"Rimu.update_time_step","text":"update_time_step(s<:TimeStepStrategy, time_step, tnorm) -> new_time_step\n\nUpdate the time step according to the strategy s.\n\n\n\n\n\n","category":"method"},{"location":"API.html#Rimu.@mpi_root-Tuple","page":"API","title":"Rimu.@mpi_root","text":"@mpi_root expr\n\nEvaluate expression only on the root rank. Extra care needs to be taken as expr must not contain any code that involves syncronising MPI operations, i.e. actions that would require syncronous action of all MPI ranks.\n\nExample:\n\nwn = walkernumber(dv)   # an MPI syncronising function call that gathers\n                        # information from all MPI ranks\n@mpi_root @info \"The current walker number is\" wn # print info message on root only\n\n\n\n\n\n","category":"macro"},{"location":"API.html#Reexported-Submodules","page":"API","title":"Reexported Submodules","text":"","category":"section"},{"location":"API.html#ExactDiagonalization","page":"API","title":"ExactDiagonalization","text":"","category":"section"},{"location":"API.html","page":"API","title":"API","text":"See Exact Diagonalization","category":"page"},{"location":"API.html#Interfaces","page":"API","title":"Interfaces","text":"","category":"section"},{"location":"API.html","page":"API","title":"API","text":"See Module Interfaces","category":"page"},{"location":"API.html#StochasticStyles","page":"API","title":"StochasticStyles","text":"","category":"section"},{"location":"API.html","page":"API","title":"API","text":"See Module StochasticStyles","category":"page"},{"location":"API.html#Hamiltonians","page":"API","title":"Hamiltonians","text":"","category":"section"},{"location":"API.html","page":"API","title":"API","text":"See Module Hamiltonians","category":"page"},{"location":"API.html#BitStringAddresses","page":"API","title":"BitStringAddresses","text":"","category":"section"},{"location":"API.html","page":"API","title":"API","text":"See Module BitStringAddresses","category":"page"},{"location":"API.html#DictVectors","page":"API","title":"DictVectors","text":"","category":"section"},{"location":"API.html","page":"API","title":"API","text":"See Module DictVectors","category":"page"},{"location":"API.html#StatsTools","page":"API","title":"StatsTools","text":"","category":"section"},{"location":"API.html","page":"API","title":"API","text":"See Module StatsTools","category":"page"},{"location":"API.html#Index","page":"API","title":"Index","text":"","category":"section"},{"location":"API.html","page":"API","title":"API","text":"","category":"page"},{"location":"stochasticstyles.html#Module-StochasticStyles","page":"Stochastic styles","title":"Module StochasticStyles","text":"","category":"section"},{"location":"stochasticstyles.html","page":"Stochastic styles","title":"Stochastic styles","text":"StochasticStyles","category":"page"},{"location":"stochasticstyles.html#Rimu.StochasticStyles","page":"Stochastic styles","title":"Rimu.StochasticStyles","text":"This module provides concrete implementations of StochasticStyles, which specify the algorithm used by ProjectorMonteCarloProblem when performing stochastic matrix-vector multiplication.\n\nImplemented stochastic styles:\n\nStochasticStyle: abstract type for stochastic styles\nIsStochasticInteger\nIsDeterministic\nIsStochasticWithThreshold\nIsDynamicSemistochastic\nStyleUnknown\n\nThe offdiagonal spawning is defined in spawning.jl and is controlled by setting a SpawningStrategy.\n\nThe vector compression strategies are defined in compression.jl and are controlled by setting a CompressionStrategy.\n\n\n\n\n\n","category":"module"},{"location":"stochasticstyles.html#Available-StochasticStyles","page":"Stochastic styles","title":"Available StochasticStyles","text":"","category":"section"},{"location":"stochasticstyles.html","page":"Stochastic styles","title":"Stochastic styles","text":"StyleUnknown","category":"page"},{"location":"stochasticstyles.html#Rimu.Interfaces.StyleUnknown","page":"Stochastic styles","title":"Rimu.Interfaces.StyleUnknown","text":"StyleUnknown{T}() <: StochasticStyle\n\nTrait for value types not (currently) compatible with FCIQMC. This style makes it possible to construct dict vectors with unsupported valtypes.\n\nSee also StochasticStyle.\n\n\n\n\n\n","category":"type"},{"location":"stochasticstyles.html","page":"Stochastic styles","title":"Stochastic styles","text":"Modules = [StochasticStyles]\nPages = [\"styles.jl\"]","category":"page"},{"location":"stochasticstyles.html#Rimu.StochasticStyles.IsDeterministic","page":"Stochastic styles","title":"Rimu.StochasticStyles.IsDeterministic","text":"IsDeterministic{T=Float64}(compression=NoCompression()) <: StochasticStyle{T}\n\nPropagate with deterministic vector matrix multiplications. Stochastic compression of the resultant vector (after annihilations) can be triggered by setting the optional compression argument to a relevant CompressionStrategy.\n\nSee also StochasticStyle.\n\n\n\n\n\n","category":"type"},{"location":"stochasticstyles.html#Rimu.StochasticStyles.IsDynamicSemistochastic","page":"Stochastic styles","title":"Rimu.StochasticStyles.IsDynamicSemistochastic","text":"IsDynamicSemistochastic{T=Float64}(; kwargs...) <: StochasticStyle{T}\n\nQMC propagation with floating-point walker numbers and reduced noise. All possible spawns (offdiagonal elements in vector-matrix multiplication) are performed deterministically when number of walkers in a configuration is high, as controlled by the rel_spawning_threshold and abs_spawning_threshold keywords. Stochastic selection of spawns is controlled by the spawning keyword.\n\nBy default, a stochastic vector compression is applied after annihilations are completed. This behaviour can be changed to on-the-fly projection (as in IsStochasticInteger or IsStochasticWithThreshold) by setting late_compression=false, or modifying spawning and compression. See parameters below for a more detailed explanation.\n\nParameters:\n\nthreshold = 1.0: Values below this number are stochastically projected to this value or zero. See also ThresholdCompression.\nlate_compression = true: If this is set to true, stochastic vector compression is performed after all the spawns are performed. If it is set to false, values are stochastically projected as they are being spawned. late_compression=true is equivalent to setting compression=ThresholdCompression(threshold) and spawning=WithReplacement().  late_compression=false is equivalent to compression=NoCompression() and spawning=WithReplacement(threshold).\nrel_spawning_threshold = 1.0: If the walker number on a configuration times this threshold is greater than the number of offdiagonals, spawning is done deterministically. Should be set to 1 or more for best performance.\nabs_spawning_threshold = Inf: If the walker number on a configuration is greater than this value, spawning is done deterministically. Can be set to e.g.  abs_spawning_threshold = 0.1 * target_walkers.\nspawning = WithReplacement(): SpawningStrategy to use for the non-exact spawns.\ncompression = ThresholdCompression(threshold): CompressionStrategy used to compress the vector after a step. Overrides threshold.\n\nSee also StochasticStyle.\n\n\n\n\n\n","category":"type"},{"location":"stochasticstyles.html#Rimu.StochasticStyles.IsStochastic2Pop","page":"Stochastic styles","title":"Rimu.StochasticStyles.IsStochastic2Pop","text":"IsStochastic2Pop{T=Complex{Int}}() <: StochasticStyle{T}\n\nStochastic propagation with complex walker numbers representing two populations of integer walkers.\n\nWhen using this style, make sure to set a complex number as target walkers in the ShiftStrategy!\n\nThis style is experimental.\n\nSee also StochasticStyle.\n\n\n\n\n\n","category":"type"},{"location":"stochasticstyles.html#Rimu.StochasticStyles.IsStochasticInteger","page":"Stochastic styles","title":"Rimu.StochasticStyles.IsStochasticInteger","text":"IsStochasticInteger{T=Int}() <: StochasticStyle{T}\n\nFCIQMC algorithm with integer walkers as in Booth et al. (2009). During the vector matrix product each individual diagonal and spawning step is rounded stochastically to a nearby integer value.\n\nSee also StochasticStyle.\n\n\n\n\n\n","category":"type"},{"location":"stochasticstyles.html#Rimu.StochasticStyles.IsStochasticWithThreshold","page":"Stochastic styles","title":"Rimu.StochasticStyles.IsStochasticWithThreshold","text":"IsStochasticWithThreshold{T=Float64}(threshold=1.0) <: StochasticStyle{T}\n\nStochastic propagation with floating point walker numbers. During the vector matrix product each individual diagonal and spawning result is rounded stochastically if smaller than threshold (before annihilations). For a more customizable stochastic style, see IsDynamicSemistochastic.\n\nSee also StochasticStyle.\n\n\n\n\n\n","category":"type"},{"location":"stochasticstyles.html#The-StochasticStyle-interface","page":"Stochastic styles","title":"The StochasticStyle interface","text":"","category":"section"},{"location":"stochasticstyles.html","page":"Stochastic styles","title":"Stochastic styles","text":"StochasticStyle\nstep_stats\napply_column!\ndefault_style","category":"page"},{"location":"stochasticstyles.html#Rimu.Interfaces.StochasticStyle","page":"Stochastic styles","title":"Rimu.Interfaces.StochasticStyle","text":"StochasticStyle(v)\n\nAbstract type. When called as a function it returns the native style of the generalised vector v that determines how simulations are to proceed.\n\nUsage\n\nConcrete StochasticStyles can be used for the style keyword argument of ProjectorMonteCarloProblem, DVec and PDVec. The following styles are available:\n\nIsStochasticInteger\nIsDeterministic\nIsStochasticWithThreshold\nIsDynamicSemistochastic\nStyleUnknown\n\nExtended Help\n\nInterface\n\nWhen defining a new StochasticStyle, subtype it as MyStyle<:StochasticStyle{T} where T is the concrete value type the style is designed to work with.\n\nFor it to work with ProjectorMonteCarloProblem, a StochasticStyle must define the following:\n\napply_column!(::StochasticStyle, w, H, address, value)\nstep_stats(::StochasticStyle)\n\nand optionally\n\nCompressionStrategy(::StochasticStyle) for vector compression after annihilations,\n\nSee also StochasticStyles, Interfaces.\n\n\n\n\n\n","category":"type"},{"location":"stochasticstyles.html#Rimu.Interfaces.step_stats","page":"Stochastic styles","title":"Rimu.Interfaces.step_stats","text":"step_stats(::StochasticStyle)\nstep_stats(::CompressionStrategy)\n\nReturn a tuple of stat names (Symbol or String) and a tuple of zeros of the same length. These will be reported as columns in the DataFrame returned by ProjectorMonteCarloProblem.\n\n\n\n\n\n","category":"function"},{"location":"stochasticstyles.html#Rimu.Interfaces.apply_column!","page":"Stochastic styles","title":"Rimu.Interfaces.apply_column!","text":"apply_column!(v, op, addr, num, boost=1) -> stats::Tuple\n\nApply the product of column addr of the operator op and the scalar num to the vector v according to the StochasticStyle of v. By expectation value this should be equivalent to\n\nv .+= op[:, add] .* num\n\nThis is used to perform the spawning step in FCIQMC and to implement operator-vector multiplications. Mutates v and reports spawning statistics.\n\nThe boost argument multiplicatively increases the number of spawns to be performed without affecting the expectation value of the procedure.\n\n\n\n\n\n","category":"function"},{"location":"stochasticstyles.html#Rimu.Interfaces.default_style","page":"Stochastic styles","title":"Rimu.Interfaces.default_style","text":"default_style(::Type)\n\nPick a StochasticStyle based on the value type. Returns StyleUnknown if no known default style is set.\n\n\n\n\n\n","category":"function"},{"location":"stochasticstyles.html#Compression-strategies","page":"Stochastic styles","title":"Compression strategies","text":"","category":"section"},{"location":"stochasticstyles.html","page":"Stochastic styles","title":"Stochastic styles","text":"CompressionStrategy\nNoCompression\nStochasticStyles.ThresholdCompression\ncompress!","category":"page"},{"location":"stochasticstyles.html#Rimu.Interfaces.CompressionStrategy","page":"Stochastic styles","title":"Rimu.Interfaces.CompressionStrategy","text":"CompressionStrategy\n\nThe CompressionStrategy controls how a vector is compressed after a step.\n\nDefault implementation:\n\nNoCompression: no vector compression\n\nUsage\n\nA subtype of CompressionStrategy can be passed as a keyword argument to the constructors for some StochasticStyles. Calling CompressionStrategy(s::StochasticStyle) returns a relevant subtype. The default is NoCompression.\n\nInterface\n\nWhen defining a new CompressionStrategy, subtype it as MyCompressionStrategy <: CompressionStrategy and define these methods:\n\ncompress!(s::CompressionStrategy, v)\ncompress!(s::CompressionStrategy, w, v)\nstep_stats(s::CompressionStrategy)\n\n\n\n\n\n","category":"type"},{"location":"stochasticstyles.html#Rimu.Interfaces.NoCompression","page":"Stochastic styles","title":"Rimu.Interfaces.NoCompression","text":"NoCompression <: CompressionStrategy end\n\nDefault CompressionStrategy. Leaves the vector intact.\n\n\n\n\n\n","category":"type"},{"location":"stochasticstyles.html#Rimu.StochasticStyles.ThresholdCompression","page":"Stochastic styles","title":"Rimu.StochasticStyles.ThresholdCompression","text":"ThresholdCompression(threshold=1) <: CompressionStrategy\n\nCompressionStrategy that compresses a vector by threshold projection. Every entry in the vector with a value below the threshold is either set to zero, or increased to the threshold. The probabilty of setting it to zero is equal to abs(value) / threshold.\n\n\n\n\n\n","category":"type"},{"location":"stochasticstyles.html#Rimu.Interfaces.compress!","page":"Stochastic styles","title":"Rimu.Interfaces.compress!","text":"compress!([::CompressionStrategy,] v) -> ::NTuple{N,::Symbol}, ::NTuple{N}\ncompress!([::CompressionStrategy,] w, v) -> ::NTuple{N,::Symbol}, ::NTuple{N}\n\nCompress the vector v. The one-argument version compresses the vector in-place. The two-argument vector stores the result in w. The CompressionStrategy associated with the StochasticStyle of v is used to determine the type of compression.\n\nReturns two tuples, containing the names and values of statistics that are to be reported.\n\n\n\n\n\n","category":"function"},{"location":"stochasticstyles.html#Spawning-strategies-and-convenience-functions","page":"Stochastic styles","title":"Spawning strategies and convenience functions","text":"","category":"section"},{"location":"stochasticstyles.html","page":"Stochastic styles","title":"Stochastic styles","text":"The following functions and types are unexported, but are useful when defining new styles.","category":"page"},{"location":"stochasticstyles.html","page":"Stochastic styles","title":"Stochastic styles","text":"Modules = [StochasticStyles]\nPages = [\"spawning.jl\"]\nOrder = [:function,:method,:type]","category":"page"},{"location":"stochasticstyles.html#Rimu.StochasticStyles.diagonal_step!","page":"Stochastic styles","title":"Rimu.StochasticStyles.diagonal_step!","text":"diagonal_step!(w, op, add, val, threshold=0) -> (clones, deaths, zombies)\n\nPerform diagonal step on a walker add => val. Optional argument threshold sets the projection threshold. If eltype(w) is an Integer, the val is rounded to the nearest integer stochastically.\n\n\n\n\n\n","category":"function"},{"location":"stochasticstyles.html#Rimu.StochasticStyles.projected_deposit!","page":"Stochastic styles","title":"Rimu.StochasticStyles.projected_deposit!","text":"projected_deposit!(w, add, val, parent, threshold=0)\n\nLike deposit!, but performs threshold projection before spawning. If eltype(w) is an Integer, values are stochastically rounded.\n\nReturns the value deposited.\n\n\n\n\n\n","category":"function"},{"location":"stochasticstyles.html#Rimu.StochasticStyles.spawn!","page":"Stochastic styles","title":"Rimu.StochasticStyles.spawn!","text":"spawn!(s::SpawningStrategy, w, op::AbstractHamiltonian, add, val, boost)\nspawn!(s::SpawningStrategy, w, offdiags::AbstractOffdiagonals, add, val, boost)\n\nPerform stochastic spawns to w from address add with val walkers. val * boost controls the number of spawns performed.\n\nThis function should be overloaded in the second form, with offdiags as an argument.\n\nSee SpawningStrategy.\n\n\n\n\n\n","category":"function"},{"location":"stochasticstyles.html#Rimu.StochasticStyles.Bernoulli","page":"Stochastic styles","title":"Rimu.StochasticStyles.Bernoulli","text":"Bernoulli(threshold=0.0) <: SpawningStrategy\n\nPerform Bernoulli sampling. A spawn is attempted on each offdiagonal element with a probability that results in an expected number of spawns equal to the number of walkers on the spawning configuration. This is significantly less efficient than WithReplacement.\n\nIf the number of spawn attempts is greater than the number of offdiagonals, this functions like Exact, but is less efficient. For best performance, this strategy is to be used as a substrategy of DynamicSemistochastic.\n\nParameters\n\nthreshold sets the projection threshold.\n\nspawn! with this strategy returns the number of spawn attempts and the number of spawns.\n\n\n\n\n\n","category":"type"},{"location":"stochasticstyles.html#Rimu.StochasticStyles.DynamicSemistochastic","page":"Stochastic styles","title":"Rimu.StochasticStyles.DynamicSemistochastic","text":"DynamicSemistochastic(; strat, rel_threshold, abs_threshold) <: SpawningStrategy\n\nSpawningStrategy that behaves like strat when the number of walkers is low, but performs exact steps when it is high. What \"high\" means is controlled by the two thresholds described below.\n\nParameters\n\nstrat = WithReplacement(): a SpawningStrategy to use when the multiplication is not performed exactly. If the strat has a threshold different from zero, all spawns will be projected to that threshold.\nrel_threshold = 1.0: When deciding on whether to perform an exact spawn, this value is multiplied to the number of walkers. Should be set to 1 or more for best performance. This threshold is affected by the boost argument to spawn!.\nabs_threshold = Inf: When deciding on whether to perform an exact spawn, min(abs_threshold, num_offdiagonals) is used. This threshold is not affected by the boost argument to spawn!.\n\nSee e.g. WithoutReplacement for a description of the strat.threshold parameter.\n\nspawn! with this strategy returns the numbers of exact and inexact spawns, the number of spawn attempts and the number of spawns.\n\n\n\n\n\n","category":"type"},{"location":"stochasticstyles.html#Rimu.StochasticStyles.Exact","page":"Stochastic styles","title":"Rimu.StochasticStyles.Exact","text":"Exact(threshold=0.0) <: SpawningStrategy\n\nPerform an exact spawning step.\n\nParameters\n\nthreshold sets the projection threshold. If set to zero, no projection is performed.\n\nspawn! with this strategy returns the number of spawn attempts and the number of spawns.\n\n\n\n\n\n","category":"type"},{"location":"stochasticstyles.html#Rimu.StochasticStyles.SingleSpawn","page":"Stochastic styles","title":"Rimu.StochasticStyles.SingleSpawn","text":"SingleSpawn(threshold=0.0) <: SpawningStrategy\n\nPerform a single spawn. Useful as a building block for other stochastic styles.\n\nParameters\n\nthreshold sets the projection threshold. If set to zero, no projection is performed.\n\nspawn! with this strategy returns the number of spawn attempts (always 1) and the number of spawns.\n\n\n\n\n\n","category":"type"},{"location":"stochasticstyles.html#Rimu.StochasticStyles.SpawningStrategy","page":"Stochastic styles","title":"Rimu.StochasticStyles.SpawningStrategy","text":"SpawningStrategy\n\nA SpawningStrategy is used to control how spawns (multiplies with off-diagonal part of the column vector) are performed and can be passed to some of the StochasticStyles as keyword arguments.\n\nThe following concrete implementations are provided:\n\nExact: Perform exact spawns. Used by IsDeterministic.\nWithReplacement: The default stochastic spawning strategy. Spawns are chosen with replacement.\nDynamicSemistochastic: Behave like Exact when the number of spawns performed is high, and like a different substrategy otherwise. Used by IsDynamicSemistochastic.\nSingleSpawn: Perform a single spawn only. Used as a building block for other strategies.\nWithoutReplacement: Similar to WithReplacement, but ensures each spawn is only performed once. Only to be used as a substrategy of DynamicSemistochastic.\nBernoulli: Each spawn is attempted with a fixed probability. Only to be used as a substrategy of DynamicSemistochastic.\n\nInterface\n\nIn order to implement a new SpawningStrategy, define a method for spawn!.\n\n\n\n\n\n","category":"type"},{"location":"stochasticstyles.html#Rimu.StochasticStyles.WithReplacement","page":"Stochastic styles","title":"Rimu.StochasticStyles.WithReplacement","text":"WithReplacement(threshold=0.0) <: SpawningStrategy\n\nSpawningStrategy where spawn targets are sampled with replacement. This is the default spawning strategy for most of the StochasticStyles.\n\nParameters\n\nthreshold sets the projection threshold. If set to zero, no projection is performed.\n\nspawn! with this strategy returns the number of spawn attempts and the number of spawns.\n\n\n\n\n\n","category":"type"},{"location":"stochasticstyles.html#Rimu.StochasticStyles.WithoutReplacement","page":"Stochastic styles","title":"Rimu.StochasticStyles.WithoutReplacement","text":"WithoutReplacement(threshold=0.0) <: SpawningStrategy\n\nSpawningStrategy where spawn targets are sampled without replacement. This strategy needs to allocate a temporary array during spawning, which makes it significantly less efficient than WithReplacement.\n\nIf the number of spawn attempts is greater than the number of offdiagonals, this functions like Exact, but is less efficient. For best performance, this strategy is to be used as a substrategy of DynamicSemistochastic.\n\nParameters\n\nthreshold sets the projection threshold. If set to zero, no projection is performed.\n\nspawn! with this strategy returns the number of spawn attempts and the number of spawns.\n\n\n\n\n\n","category":"type"},{"location":"stochasticstyles.html#Index","page":"Stochastic styles","title":"Index","text":"","category":"section"},{"location":"stochasticstyles.html","page":"Stochastic styles","title":"Stochastic styles","text":"Pages   = [\"stochasticstyles.md\"]","category":"page"},{"location":"generated/BHM-example-mpi.html","page":"Rimu with MPI","title":"Rimu with MPI","text":"EditURL = \"../../../scripts/BHM-example-mpi.jl\"","category":"page"},{"location":"generated/BHM-example-mpi.html#Example-2:-Rimu-with-MPI","page":"Rimu with MPI","title":"Example 2: Rimu with MPI","text":"","category":"section"},{"location":"generated/BHM-example-mpi.html","page":"Rimu with MPI","title":"Rimu with MPI","text":"In this example, we will demonstrate using Rimu with MPI. MPI is a standard for parallel and distributed computing, and it is widely used in high-performance computing. Rimu provides support for MPI to enable parallel computations on multiple nodes.","category":"page"},{"location":"generated/BHM-example-mpi.html","page":"Rimu with MPI","title":"Rimu with MPI","text":"A runnable script for this example is located here. Run it with 2 MPI ranks with mpirun -n 2 julia BHM-example-mpi.jl.","category":"page"},{"location":"generated/BHM-example-mpi.html","page":"Rimu with MPI","title":"Rimu with MPI","text":"We start by importing Rimu.","category":"page"},{"location":"generated/BHM-example-mpi.html","page":"Rimu with MPI","title":"Rimu with MPI","text":"using Rimu","category":"page"},{"location":"generated/BHM-example-mpi.html","page":"Rimu with MPI","title":"Rimu with MPI","text":"Note that it is not necessary to initialise the MPI library, as this is already done automatically when Rimu is loaded.","category":"page"},{"location":"generated/BHM-example-mpi.html","page":"Rimu with MPI","title":"Rimu with MPI","text":"We will compute the ground state of a Bose-Hubbard model in momentum space with 10 particles in 10 sites.","category":"page"},{"location":"generated/BHM-example-mpi.html","page":"Rimu with MPI","title":"Rimu with MPI","text":"First, we define the Hamiltonian. We want to start from an address with zero momentum, which is located at mode 5 in the momentum grid. We put all 10 particles, all in the zero momentum mode.","category":"page"},{"location":"generated/BHM-example-mpi.html","page":"Rimu with MPI","title":"Rimu with MPI","text":"address = BoseFS(10, 5 => 10)","category":"page"},{"location":"generated/BHM-example-mpi.html","page":"Rimu with MPI","title":"Rimu with MPI","text":"BoseFS{10,10}(0, 0, 0, 0, 10, 0, 0, 0, 0, 0)","category":"page"},{"location":"generated/BHM-example-mpi.html","page":"Rimu with MPI","title":"Rimu with MPI","text":"We will set the interaction strength u to 6.0. The hopping strength t defaults to 1.0.","category":"page"},{"location":"generated/BHM-example-mpi.html","page":"Rimu with MPI","title":"Rimu with MPI","text":"H = HubbardMom1D(address; u=6.0)","category":"page"},{"location":"generated/BHM-example-mpi.html","page":"Rimu with MPI","title":"Rimu with MPI","text":"HubbardMom1D(fs\"|0 0 0 0 10 0 0 0 0 0⟩\"; u=6.0, t=1.0)","category":"page"},{"location":"generated/BHM-example-mpi.html","page":"Rimu with MPI","title":"Rimu with MPI","text":"We set a reporting strategy. We will use ReportToFile, which writes the reports directly to a file. This is useful for MPI calculations, as they will typically run non-interactively. The reports will be written to disk and can be inspected later. This has the additional benefit of reducing memory use in long-running jobs, as we don't need to keep the results in memory. It also allows us to inspect the results before the computation finishes and recover some data if it fails.","category":"page"},{"location":"generated/BHM-example-mpi.html","page":"Rimu with MPI","title":"Rimu with MPI","text":"The default settings will ensure that only the root MPI rank will write to the file, which is reasonable, and that data is saved in chunks of 1000 time steps. We choose to suppress progress messages with setting io=devnull.","category":"page"},{"location":"generated/BHM-example-mpi.html","page":"Rimu with MPI","title":"Rimu with MPI","text":"reporting_strategy = ReportToFile(\n    filename=\"result.arrow\",\n    io=devnull\n)","category":"page"},{"location":"generated/BHM-example-mpi.html","page":"Rimu with MPI","title":"Rimu with MPI","text":"ReportToFile{Symbol}(\"result.arrow\", 1, 1000, true, false, Base.DevNull(), :zstd, nothing)","category":"page"},{"location":"generated/BHM-example-mpi.html","page":"Rimu with MPI","title":"Rimu with MPI","text":"For running parallel computations with MPI, it is important that a compatible state vector is used. Here we explicitly set up an MPI-enabled state vector, PDVec, which is automatically MPI-distributed over the available number of MPI ranks. In addition, threading will be used with all threads available to Julia.","category":"page"},{"location":"generated/BHM-example-mpi.html","page":"Rimu with MPI","title":"Rimu with MPI","text":"initial_vector = PDVec(address => 1.0; style=IsDynamicSemistochastic())","category":"page"},{"location":"generated/BHM-example-mpi.html","page":"Rimu with MPI","title":"Rimu with MPI","text":"1-element PDVec: style = IsDynamicSemistochastic{Float64,ThresholdCompression,DynamicSemistochastic}()\n  fs\"|0 0 0 0 10 0 0 0 0 0⟩\" => 1.0","category":"page"},{"location":"generated/BHM-example-mpi.html","page":"Rimu with MPI","title":"Rimu with MPI","text":"Now, we can set other parameters as usual. We will perform the computation with 10000 walkers and for 10000 time steps. We will also compute the projected energy by passing a ProjectedEnergy object as a post_step_strategy.","category":"page"},{"location":"generated/BHM-example-mpi.html","page":"Rimu with MPI","title":"Rimu with MPI","text":"problem = ProjectorMonteCarloProblem(H;\n    start_at=initial_vector,\n    reporting_strategy,\n    post_step_strategy=ProjectedEnergy(H, initial_vector),\n    target_walkers=10_000,\n    time_step=1e-4,\n    last_step=10_000\n);","category":"page"},{"location":"generated/BHM-example-mpi.html","page":"Rimu with MPI","title":"Rimu with MPI","text":"The @mpi_root macro performs an action on the root rank only, which is useful for printing.","category":"page"},{"location":"generated/BHM-example-mpi.html","page":"Rimu with MPI","title":"Rimu with MPI","text":"@mpi_root println(\"Running FCIQMC with \", mpi_size(), \" rank(s).\")","category":"page"},{"location":"generated/BHM-example-mpi.html","page":"Rimu with MPI","title":"Rimu with MPI","text":"Running FCIQMC with 1 rank(s).\n","category":"page"},{"location":"generated/BHM-example-mpi.html","page":"Rimu with MPI","title":"Rimu with MPI","text":"Finally, we can run the computation.","category":"page"},{"location":"generated/BHM-example-mpi.html","page":"Rimu with MPI","title":"Rimu with MPI","text":"simulation = solve(problem);\n\n@mpi_root println(\"Simulation success = \", simulation.success)","category":"page"},{"location":"generated/BHM-example-mpi.html","page":"Rimu with MPI","title":"Rimu with MPI","text":"Simulation success = true\n","category":"page"},{"location":"generated/BHM-example-mpi.html","page":"Rimu with MPI","title":"Rimu with MPI","text":"Once the calculation is done, the results are available in the arrow file on disk.","category":"page"},{"location":"generated/BHM-example-mpi.html","page":"Rimu with MPI","title":"Rimu with MPI","text":"In a typical workflow, the simulation results would be loaded from disk and analysed in the REPL or with a separate script. The arrow file can be loaded into a DataFrame with metadata using the load_df function.","category":"page"},{"location":"generated/BHM-example-mpi.html","page":"Rimu with MPI","title":"Rimu with MPI","text":"","category":"page"},{"location":"generated/BHM-example-mpi.html","page":"Rimu with MPI","title":"Rimu with MPI","text":"This page was generated using Literate.jl.","category":"page"},{"location":"index.html#Rimu.jl-Package-Guide","page":"Guide","title":"Rimu.jl Package Guide","text":"","category":"section"},{"location":"index.html","page":"Guide","title":"Guide","text":"Random Integrators for many-body quantum systems","category":"page"},{"location":"index.html","page":"Guide","title":"Guide","text":"The grand aim is to develop a toolbox for many-body quantum systems that can be represented by a Hamiltonian in second quantisation language. Currently supported features include:","category":"page"},{"location":"index.html#Interacting-with-quantum-many-body-models","page":"Guide","title":"Interacting with quantum many-body models","text":"","category":"section"},{"location":"index.html","page":"Guide","title":"Guide","text":"Full configuration interaction quantum Monte Carlo (FCIQMC), a flavour of projector quantum Monte Carlo for stochastically solving the time-independent Schrödinger equation. See References.\nMatrix-free exact diagonalisation of quantum Hamiltonians (with external package KrylovKit.jl).\nSparse matrix representation of quantum Hamiltonians for exact diagonalisation with sparse linear algebra package of your choice (fastest for small systems).","category":"page"},{"location":"index.html#Representing-quantum-many-body-models","page":"Guide","title":"Representing quantum many-body models","text":"","category":"section"},{"location":"index.html","page":"Guide","title":"Guide","text":"A composable and efficient type system for representing single- and multi-component Fock states of bosons, fermions, and mixtures thereof, to be used as a basis for representing Hamiltonians.\nAn interface for defining many-body Hamiltonians.\nPre-defined models include:\nHubbard model in real space for bosons and fermions and mixtures in 1, 2, and 3 spatial dimensions.\nHubbard and related lattice models in momentum space for bosons and fermions in one spatial dimension.\nTranscorrelated Hamiltonian for contact interactions in one dimension for fermions, as described in Jeszenski et al. arXiv:1806.11268.","category":"page"},{"location":"index.html#Statistical-analysis-of-Monte-Carlo-data","page":"Guide","title":"Statistical analysis of Monte Carlo data","text":"","category":"section"},{"location":"index.html","page":"Guide","title":"Guide","text":"Blocking analysis following Flyvberg & Peterson JCP (1989), and automated with hypothesis testing by Jonsson","category":"page"},{"location":"index.html","page":"Guide","title":"Guide","text":"PRE (2018).","category":"page"},{"location":"index.html","page":"Guide","title":"Guide","text":"Unbiased estimators for the ground state energy by re-reweighting following Nightingale & Blöte PRB (1986) and Umrigar et al. JCP (1993).","category":"page"},{"location":"index.html","page":"Guide","title":"Guide","text":"The code supports parallelisation with MPI (harnessing MPI.jl) as well as native Julia threading (experimental). In the future, we may add tools to solve the time-dependent Schrödinger equation and Master equations for open system time evolution.","category":"page"},{"location":"index.html","page":"Guide","title":"Guide","text":"Concept: Joachim Brand and Elke Pahl.","category":"page"},{"location":"index.html","page":"Guide","title":"Guide","text":"Contributors: Joachim Brand, Elke Pahl, Mingrui Yang, Matija Čufar, Chris Bradly.","category":"page"},{"location":"index.html","page":"Guide","title":"Guide","text":"Discussions, help, and additional contributions are acknowledged by Ali Alavi, Didier Adrien, Chris Scott (NeSI), Alexander Pletzer (NeSI).","category":"page"},{"location":"index.html#Installation","page":"Guide","title":"Installation","text":"","category":"section"},{"location":"index.html#Installing-Rimu-for-usage","page":"Guide","title":"Installing Rimu for usage","text":"","category":"section"},{"location":"index.html","page":"Guide","title":"Guide","text":"Rimu is a registered package and can be installed with the package manager. Hit the ] key at the Julia REPL to get into Pkg mode and type","category":"page"},{"location":"index.html","page":"Guide","title":"Guide","text":"pkg> add Rimu","category":"page"},{"location":"index.html","page":"Guide","title":"Guide","text":"Alternatively, use","category":"page"},{"location":"index.html","page":"Guide","title":"Guide","text":"julia> using Pkg; Pkg.add(name=\"Rimu\")","category":"page"},{"location":"index.html","page":"Guide","title":"Guide","text":"in order to install Rimu from a script.","category":"page"},{"location":"index.html#Installing-Rimu-for-development","page":"Guide","title":"Installing Rimu for development","text":"","category":"section"},{"location":"index.html","page":"Guide","title":"Guide","text":"In order to be able to edit the source code, push changes, change and make new git branches, etc., clone the git repository with git clone to a convenient location, e.g. ~/mygitpackagefolder/. Then hit the ] key at the Julia REPL to get into Pkg mode and type","category":"page"},{"location":"index.html","page":"Guide","title":"Guide","text":"pkg> develop ~/mygitpackagefolder/rimu.jl","category":"page"},{"location":"index.html","page":"Guide","title":"Guide","text":"where the file path has to be adjusted to the location of the cloned git repository.","category":"page"},{"location":"index.html#Usage","page":"Guide","title":"Usage","text":"","category":"section"},{"location":"index.html","page":"Guide","title":"Guide","text":"The package is now installed and can be imported with","category":"page"},{"location":"index.html","page":"Guide","title":"Guide","text":"julia> using Rimu","category":"page"},{"location":"index.html","page":"Guide","title":"Guide","text":"When planning to edit the code of the package it is advisable to use the Revise package by issuing","category":"page"},{"location":"index.html","page":"Guide","title":"Guide","text":"julia> using Revise","category":"page"},{"location":"index.html","page":"Guide","title":"Guide","text":"before using Rimu. This will track any changes made to the source code of Rimu and the changed package will be available after saving the source code (hopefully, and most of the time, without restarting the Julia REPL).","category":"page"},{"location":"index.html","page":"Guide","title":"Guide","text":"Rimu offers a number of tools for representing Hamiltonians (see Hamiltonians) and state vectors / wave functions (see DictVectors) as well as algorithms to find the ground state, e.g. ProjectorMonteCarloProblem, ExactDiagonalizationProblem.","category":"page"},{"location":"index.html#Scripts","page":"Guide","title":"Scripts","text":"","category":"section"},{"location":"index.html","page":"Guide","title":"Guide","text":"Rimu is written as a Julia package to be imported with using Rimu as described above. It supplies useful functions and types. Performing actual calculations and analysing the results is done with scripts. The folder scripts/ contains a collections of scripts that are either examples for use of the Rimu package or useful scripts for data analysis. In particular:","category":"page"},{"location":"index.html","page":"Guide","title":"Guide","text":"scripts/BHM-example.jl is an example script that runs fciqmc on the 1D Bose-Hubbard model. A data frame with results is written to the file fciqmcdata.arrow.\nscripts/BHM-example-mpi.jl demonstrates basic usage of Rimu with MPI.","category":"page"},{"location":"index.html#MPI","page":"Guide","title":"MPI","text":"","category":"section"},{"location":"index.html","page":"Guide","title":"Guide","text":"The Rimu package can run in parallel on different processes or node and distribute work by making use of MPI, or \"message passing interface\". For example, running","category":"page"},{"location":"index.html","page":"Guide","title":"Guide","text":"> julia scripts/BHM-example.jl","category":"page"},{"location":"index.html","page":"Guide","title":"Guide","text":"will run on one processor with the main computation (i.e. after package loading and compilation) completing in 2.69 seconds.","category":"page"},{"location":"index.html","page":"Guide","title":"Guide","text":"Running","category":"page"},{"location":"index.html","page":"Guide","title":"Guide","text":"> mpirun -np 4 julia scripts/BHM-example-mpi.jl","category":"page"},{"location":"index.html","page":"Guide","title":"Guide","text":"on the same hardware makes use of 4 cores and the main part completes in 1.04 seconds, a speedup factor of 2.6. This seems reasonable, given that extra work needs to be done for communicating between different processes.","category":"page"},{"location":"index.html","page":"Guide","title":"Guide","text":"Using MPI parallelism with Rimu is easy. Enabling MPI enabled automatically if PDVec is used to store a vector. In that case, data will be stored in a distributed fashion among the MPI ranks and only communicated between ranks when necessary.","category":"page"},{"location":"index.html#Compatibility","page":"Guide","title":"Compatibility","text":"","category":"section"},{"location":"index.html","page":"Guide","title":"Guide","text":"We recommend using Rimu with the latest Julia release version. Rimu requires at least julia v1.9.","category":"page"},{"location":"index.html#References","page":"Guide","title":"References","text":"","category":"section"},{"location":"index.html","page":"Guide","title":"Guide","text":"The code implements the FCIQMC algorithm originally described in","category":"page"},{"location":"index.html","page":"Guide","title":"Guide","text":"\"Fermion Monte Carlo without fixed nodes: A game of life, death, and annihilation in Slater determinant space\", G. H. Booth, A. J. W. Thom, A. Alavi, J. Chem. Phys. 131, 054106 (2009).\n\"Communications: Survival of the fittest: accelerating convergence in full configuration-interaction quantum Monte Carlo.\", D. Cleland,  G. H. Booth, A. Alavi, J. Chem. Phys. 132, 041103 (2010).","category":"page"},{"location":"index.html","page":"Guide","title":"Guide","text":"Scientific papers describing additional features implemented in Rimu:","category":"page"},{"location":"index.html","page":"Guide","title":"Guide","text":"\"Improved walker population control for full configuration interaction quantum Monte Carlo\", M. Yang, E. Pahl, J. Brand, J. Chem. Phys. 153, 170143 (2020); arXiv:2008.01927.\n\"Stochastic differential equation approach to understanding the population control bias in full configuration interaction quantum Monte Carlo\", J. Brand, M. Yang, E. Pahl, arXiv:2103.07800 (2021).","category":"page"},{"location":"index.html","page":"Guide","title":"Guide","text":"Papers discussing results obtained with Rimu:","category":"page"},{"location":"index.html","page":"Guide","title":"Guide","text":"\"Polaron-Depleton Transition in the Yrast Excitations of a One-Dimensional Bose Gas with a Mobile Impurity\", M. Yang, M. Čufar, E. Pahl, J. Brand, Condens. Matter 7, 15 (2022).\n\"Magnetic impurity in a one-dimensional few-fermion system\", L. Rammelmüller, D. Huber, M. Čufar, J. Brand, A. Volosniev, arXiv:2204.01606 (2022).","category":"page"},{"location":"dictvectors.html#Module-DictVectors","page":"Dict vectors","title":"Module DictVectors","text":"","category":"section"},{"location":"dictvectors.html","page":"Dict vectors","title":"Dict vectors","text":"DictVectors\nAbstractDVec","category":"page"},{"location":"dictvectors.html#Rimu.DictVectors","page":"Dict vectors","title":"Rimu.DictVectors","text":"Module that provides concrete implementations of the AbstractDVec interface.\n\nDVec: basic AbstractDVec\nPDVec: parallel AbstractDVec with MPI and initiator support\nInitiatorDVec: allows storing information about initiator status\n\nSee Interfaces.\n\n\n\n\n\n","category":"module"},{"location":"dictvectors.html#Rimu.Interfaces.AbstractDVec","page":"Dict vectors","title":"Rimu.Interfaces.AbstractDVec","text":"AbstractDVec{K,V}\n\nAbstract data type for vector-like data structures with sparse storage. While conceptually AbstractDVecs represent elements of a vector space over a scalar type V, they are indexed by an arbitrary type K (could be non-integers) similar to dictionaries. They support the interface from VectorInterface.jl and are designed to work well for quantum Monte Carlo with ProjectorMonteCarloProblem and for matrix-free linear algebra with KrylovKit.\n\nConcrete implementations are available as PDVec, DVec, and InitiatorDVec.\n\nAbstractDVecs have a StochasticStyle which selects the spawning algorithm in FCIQMC. Looking up an element that is not stored in the AbstractDVec should return a zero, and setting a value to zero should remove it from the vector. To iterate over an AbstractDVec, use keys, pairs, or values. When possible, use reduction functions such as sum or mapreduce.\n\nInterface\n\nThe interface is similar to the AbstractDict interface, but with the changed behaviour as noted above.  Implement what would be needed for the AbstractDict interface (pairs, keys, values, setindex!, getindex, delete!, length, empty, empty!) and, in addition:\n\nStochasticStyle\nstorage returns an AbstractDict storing the raw data with possibly different valtype than V.\ndeposit!\n\nA default implementation for the VectorInterface.jl interface is provided through the above functions.\n\nSee also DictVectors, Interfaces.\n\n\n\n\n\n","category":"type"},{"location":"dictvectors.html#Concrete-implementations","page":"Dict vectors","title":"Concrete implementations","text":"","category":"section"},{"location":"dictvectors.html","page":"Dict vectors","title":"Dict vectors","text":"DVec\nInitiatorDVec\nPDVec","category":"page"},{"location":"dictvectors.html#Rimu.DictVectors.DVec","page":"Dict vectors","title":"Rimu.DictVectors.DVec","text":"DVec{K,V,D<:AbstractDict{K,V},S}\n\nDictionary-based vector-like data structure for use with FCIQMC and KrylovKit. While mostly behaving like a Dict, it supports various linear algebra operations such as norm and dot. It has a StochasticStyle that is used to select an appropriate spawning strategy in the FCIQMC algorithm.\n\nSee also: AbstractDVec, InitiatorDVec, PDVec.\n\nConstructors\n\nDVec(dict::AbstractDict[; style, capacity]): create a DVec with dict for storage. Note that the data may or may not be copied.\nDVec(args...[; style, capacity]): args... are passed to the Dict constructor. The Dict is used for storage.\nDVec{K,V}([; style, capacity]): create an empty DVec{K,V}.\nDVec(dv::AbstractDVec[; style, capacity]): create a DVec with the same contents as  adv. The style is inherited from dv by default.\n\nThe default style is selected based on the DVec's valtype (see default_style). If a style is given and the valtype does not match the style's eltype, the values are converted to an appropriate type.\n\nThe capacity argument is optional and sets the initial size of the DVec via Base.sizehint!.\n\nExamples\n\njulia> dv = DVec(:a => 1)\nDVec{Symbol,Int64} with 1 entry, style = IsStochasticInteger{Int64}()\n  :a => 1\n\njulia> dv = DVec(:a => 2, :b => 3; style=IsDeterministic())\nDVec{Symbol,Float64} with 2 entries, style = IsDeterministic{Float64}()\n  :a => 2.0\n  :b => 3.0\n\n\n\n\n\n","category":"type"},{"location":"dictvectors.html#Rimu.DictVectors.InitiatorDVec","page":"Dict vectors","title":"Rimu.DictVectors.InitiatorDVec","text":"InitiatorDVec{K,V} <: AbstractDVec{K,V}\n\nDictionary-based vector-like data structure for use with ProjectorMonteCarloProblem and KrylovKit.jl. See AbstractDVec. Functionally identical to DVec, but contains InitiatorValues internally in order to facilitate initiator methods. Initiator methods for controlling the Monte Carlo sign problem were first introduced in J. Chem. Phys. 132, 041103 (2010). How the initiators are handled is controlled by specifying an InitiatorRule with the initiator keyword argument (see below).\n\nSee also: AbstractDVec, DVec, PDVec.\n\nConstructors\n\nInitiatorDVec(dict::AbstractDict[; style, initiator, capacity]): create an InitiatorDVec with dict for storage.  Note that the data may or may not be copied.\nInitiatorDVec(args...[; style, initiator, capacity]): args... are passed to the Dict constructor. The Dict is used for storage.\nInitiatorDVec{K,V}([; style, initiator, capacity]): create an empty InitiatorDVec{K,V}.\nInitiatorDVec(dv::AbstractDVec[; style, initiator, capacity]): create an InitiatorDVec  with the same contents as dv. The style is inherited from dv by default.\n\nKeyword  arguments\n\nstyle: A valid StochasticStyle.  The default is selected based on the InitiatorDVec's valtype (see default_style). If a style is given and the valtype does not match the style's eltype, the values are converted to an appropriate type.\ninitiator = Initiator(1): A valid InitiatorRule. See Initiator.\ncapacity: Indicative size as Int. Optional. Sets the initial size of the InitiatorDVec via Base.sizehint!.\n\n\n\n\n\n","category":"type"},{"location":"dictvectors.html#Rimu.DictVectors.PDVec","page":"Dict vectors","title":"Rimu.DictVectors.PDVec","text":"PDVec{K,V}(; kwargs...)\nPDVec(iter; kwargs...)\nPDVec(pairs...; kwargs...)\n\nDictionary-based vector-like data structure for use with FCIQMC and KrylovKit.jl. While mostly behaving like a Dict, it supports various linear algebra operations such as norm and dot, and the interface defined in VectorInterface.\n\nThe P in PDVec stands for parallel. PDVecs perform mapreduce, foreach, and various linear algebra operations in a threaded manner. If MPI is available, these operations are automatically distributed as well. As such it is not recommended to iterate over pairs, keys, or values directly unless explicitly performing them on the localpart of the vector.\n\nSee also: AbstractDVec, DVec, InitiatorDVec.\n\nKeyword arguments\n\nstyle =default_style(V): A StochasticStyle that is used to select the spawning strategy in the FCIQMC algorithm.\ninitiator =NonInitiator(): An InitiatorRule, used in FCIQMC to remove the sign problem.\ncommunicator: A Communicator that controls how operations are performed when using MPI. The defaults are NotDistributed when not using MPI and AllToAll when using MPI.\n\nExtended Help\n\nSegmentation\n\nThe vector is split into Threads.nthreads() subdictionaries called segments. Which dictionary a key-value pair is mapped to is determined by the hash of the key. The purpose of this segmentation is to allow parallel processing - functions such as mapreduce, add! or dot (full list below) process each subdictionary on a separate thread.\n\nSee also PDWorkingMemory.\n\nExample\n\njulia> add = FermiFS2C((1,1,0,0), (0,0,1,1));\n\njulia> op = HubbardMom1D(add; t=4/π^2, u=4);\n\njulia> pv = PDVec(add => 1.0)\n1-element PDVec: style = IsDeterministic{Float64}()\n  fs\"|↑↑↓↓⟩\" => 1.0\n\njulia> pv = op * pv\n7-element PDVec: style = IsDeterministic{Float64}()\n  fs\"|↑↓↑↓⟩\" => 1.0\n  fs\"|↑↑↓↓⟩\" => 4.0\n  fs\"|↓↑↓↑⟩\" => 1.0\n  fs\"|↓↑↑↓⟩\" => -1.0\n  fs\"|⇅⋅⋅⇅⟩\" => 1.0\n  fs\"|↑↓↓↑⟩\" => -1.0\n  fs\"|⋅⇅⇅⋅⟩\" => 1.0\n\njulia> scale!(pv, -1); pv\n7-element PDVec: style = IsDeterministic{Float64}()\n  fs\"|↑↓↑↓⟩\" => -1.0\n  fs\"|↑↑↓↓⟩\" => -4.0\n  fs\"|↓↑↓↑⟩\" => -1.0\n  fs\"|↓↑↑↓⟩\" => 1.0\n  fs\"|⇅⋅⋅⇅⟩\" => -1.0\n  fs\"|↑↓↓↑⟩\" => 1.0\n  fs\"|⋅⇅⇅⋅⟩\" => -1.0\n\njulia> dest = similar(pv)\n0-element PDVec: style = IsDeterministic{Float64}()\n\njulia> map!(x -> x + 2, dest, values(pv))\n7-element PDVec: style = IsDeterministic{Float64}()\n  fs\"|↑↓↑↓⟩\" => 1.0\n  fs\"|↑↑↓↓⟩\" => -2.0\n  fs\"|↓↑↓↑⟩\" => 1.0\n  fs\"|↓↑↑↓⟩\" => 3.0\n  fs\"|⇅⋅⋅⇅⟩\" => 1.0\n  fs\"|↑↓↓↑⟩\" => 3.0\n  fs\"|⋅⇅⇅⋅⟩\" => 1.0\n\njulia> sum(values(pv))\n-6.0\n\njulia> dot(dest, pv)\n10.0\n\njulia> dot(dest, op, pv)\n44.0\n\nMPI\n\nWhen MPI is active, all parallel reductions are automatically reduced across MPI ranks with a call to MPI.Allreduce!.\n\nIn a distributed setting, PDVec does not support iteration without first making it explicit the iteration is only to be performed on the local segments of the vector. This is done with localpart. In general, even when not using MPI, it is best practice to use localpart when explicit iteration is required.\n\nUse with KrylovKit\n\nPDVec is compatible with eigsolve from KrylovKit.jl. When used, the diagonalisation is performed in a threaded and distributed manner. Using multiple MPI ranks with this method does not distribute the memory load effectively, but does result in significant speedups.\n\nExample\n\njulia> using KrylovKit\n\njulia> add = BoseFS((0,0,5,0,0));\n\njulia> op = HubbardMom1D(add; u=6.0);\n\njulia> pv = PDVec(add => 1.0);\n\njulia> results = eigsolve(op, pv, 4, :SR);\n\njulia> results[1][1:4]\n4-element Vector{Float64}:\n -3.4311156892322234\n  1.1821748602612363\n  3.7377753753082823\n  6.996390417443125\n\nParallel functionality\n\nThe following functions are threaded and MPI-compatible:\n\nFrom Base: mapreduce and derivatives (sum, prod, reduce...), all, any,map! (on values only), +, -, *\nFrom LinearAlgebra: rmul!, lmul!, mul!, axpy!, axpby!, dot, norm, normalize, normalize!\nThe full interface defined in VectorInterface.jl\n\n\n\n\n\n","category":"type"},{"location":"dictvectors.html#Interface-functions","page":"Dict vectors","title":"Interface functions","text":"","category":"section"},{"location":"dictvectors.html","page":"Dict vectors","title":"Dict vectors","text":"deposit!\nstorage\nfreeze\nlocalpart\napply_operator!\nsort_into_targets!\nworking_memory","category":"page"},{"location":"dictvectors.html#Rimu.Interfaces.deposit!","page":"Dict vectors","title":"Rimu.Interfaces.deposit!","text":"deposit!(w::InitiatorDVec, add, val, p_add=>p_val)\n\nAdd val into w at address add as an AbstractInitiatorValue.\n\n\n\n\n\ndeposit!(w::AbstractDVec, add, val, parent::Pair)\n\nAdd val into w at address add, taking into account initiator rules if applicable. parent contains the address => value pair from which the pair add => val was created. InitiatorDVec can intercept this and add its own functionality.\n\n\n\n\n\n","category":"function"},{"location":"dictvectors.html#Rimu.Interfaces.storage","page":"Dict vectors","title":"Rimu.Interfaces.storage","text":"storage(dvec) -> AbstractDict\n\nReturn the raw storage associated with dvec as an AbstractDict. Used in MPI communication.\n\n\n\n\n\n","category":"function"},{"location":"dictvectors.html#OrderedCollections.freeze","page":"Dict vectors","title":"OrderedCollections.freeze","text":"freeze(dv)\n\nCreate a \"frozen\" version of dv which can no longer be modified or used in the conventional manner, but supports faster dot products.\n\n\n\n\n\n","category":"function"},{"location":"dictvectors.html#Rimu.Interfaces.localpart","page":"Dict vectors","title":"Rimu.Interfaces.localpart","text":"localpart(dv) -> AbstractDVec\n\nGet the part of dv that is located on this MPI rank. Returns dv itself for vectors that can't be MPI distributed (DVecs and InitiatorDVecs).\n\n\n\n\n\n","category":"function"},{"location":"dictvectors.html#Rimu.Interfaces.apply_operator!","page":"Dict vectors","title":"Rimu.Interfaces.apply_operator!","text":"apply_operator!(working_memory, target, source, operator, boost=1, compress=Val(true)) ->\n    stat_names, stats, working_memory, target\n\nPerform a single matrix(/operator)-vector multiplication:\n\nv^(n + 1) = hatT v^(n) \n\nwhere hatT is the operator, v^(n+1) is the target and v^(n) is the source. The working_memory can be used as temporary storage.\n\nThe boost argument is passed to apply_column! and increases the number of spawns performed. For the operator to be applied without compressing the vector after, set compress to Val(false).\n\nWhether the operation is performed in a stochastic, semistochastic, or determistic way is controlled by the trait StochasticStyle(target). See StochasticStyle.\n\nReturns the step stats generated by the StochasticStyle, the working memory and the target vector. target and working_memory may be mutated and/or swapped.\n\n\n\n\n\n","category":"function"},{"location":"dictvectors.html#Rimu.Interfaces.sort_into_targets!","page":"Dict vectors","title":"Rimu.Interfaces.sort_into_targets!","text":"sort_into_targets!(target, source, stats) -> target, source, agg_stats\n\nAggregate coefficients from source to target and from stats to agg_stats according to thread- or MPI-level parallelism.\n\nReturns the new target and source, as the sorting process may involve swapping them.\n\n\n\n\n\n","category":"function"},{"location":"dictvectors.html#Rimu.Interfaces.working_memory","page":"Dict vectors","title":"Rimu.Interfaces.working_memory","text":"working_memory(dv::AbstractDVec)\n\nCreate a working memory instance compatible with dv. The working memory must be compatible with sort_into_targets! and apply_operator!.\n\n\n\n\n\n","category":"function"},{"location":"dictvectors.html#Supported-operations","page":"Dict vectors","title":"Supported operations","text":"","category":"section"},{"location":"dictvectors.html","page":"Dict vectors","title":"Dict vectors","text":"AbstractDVecs generally support most operations that are defined on Vectors and Dicts. This includes the interface from VectorInterface.jl, and many functions from the LinearAlgebra standard library.","category":"page"},{"location":"dictvectors.html","page":"Dict vectors","title":"Dict vectors","text":"A significant difference between AbstractDVecs, Vectors, and Dicts, is that iteration on them is disabled by default. Iteration must be explicitly performed on keys, values, or pairs, however, it is highly recommended you use mapreduce, reduce, or similar functions when performing reductions, as that will make the operations compatible with MPI.","category":"page"},{"location":"dictvectors.html","page":"Dict vectors","title":"Dict vectors","text":"In addition, Rimu defines the following function.","category":"page"},{"location":"dictvectors.html","page":"Dict vectors","title":"Dict vectors","text":"walkernumber\nwalkernumber_and_length\ndot_from_right","category":"page"},{"location":"dictvectors.html#Rimu.DictVectors.walkernumber","page":"Dict vectors","title":"Rimu.DictVectors.walkernumber","text":"walkernumber(v)\n\nCompute the number of walkers in v. It is used for updating the shift. Overload this function for modifying population control.\n\nIn most cases walkernumber(v) is identical to norm(v, 1). For AbstractDVecs with complex coefficients it reports the one norm separately for the real and the imaginary part as a ComplexF64. See Norm1ProjectorPPop.\n\n\n\n\n\n","category":"function"},{"location":"dictvectors.html#Rimu.DictVectors.walkernumber_and_length","page":"Dict vectors","title":"Rimu.DictVectors.walkernumber_and_length","text":"walkernumber_and_length(v)\n\nCompute walkernumber and length at the same time. When MPI is used, this is more efficient than calling them separately.\n\n\n\n\n\n","category":"function"},{"location":"dictvectors.html#Rimu.Interfaces.dot_from_right","page":"Dict vectors","title":"Rimu.Interfaces.dot_from_right","text":"dot_from_right(w, op::AbstractObservable, v)\n\nInternal function evaluates the 3-argument dot() function in order from right to left.\n\n\n\n\n\n","category":"function"},{"location":"dictvectors.html#Projectors","page":"Dict vectors","title":"Projectors","text":"","category":"section"},{"location":"dictvectors.html","page":"Dict vectors","title":"Dict vectors","text":"AbstractProjector\nNormProjector\nNorm2Projector\nUniformProjector\nNorm1ProjectorPPop\nRimu.DictVectors.FrozenDVec\nRimu.DictVectors.FrozenPDVec","category":"page"},{"location":"dictvectors.html#Rimu.DictVectors.AbstractProjector","page":"Dict vectors","title":"Rimu.DictVectors.AbstractProjector","text":"Abstract supertype for projectors to be used in in lieu of DVecs or Vectors in dot products. Implemented subtypes:\n\nUniformProjector\nNormProjector\nNorm2Projector\nNorm1ProjectorPPop\n\nSee also PostStepStrategy for use of projectors in ProjectorMonteCarloProblem.\n\nInterface\n\nDefine a method for LinearAlgebra.dot(projector, v).\n\n\n\n\n\n","category":"type"},{"location":"dictvectors.html#Rimu.DictVectors.NormProjector","page":"Dict vectors","title":"Rimu.DictVectors.NormProjector","text":"NormProjector() <: AbstractProjector\n\nResults in computing the one-norm when used in dot(). E.g.\n\ndot(NormProjector(),x)\n-> norm(x,1)\n\nNormProjector() thus represents the vector sign.(x).\n\nSee also PostStepStrategy, and AbstractProjector for use of projectors in ProjectorMonteCarloProblem.\n\n\n\n\n\n","category":"type"},{"location":"dictvectors.html#Rimu.DictVectors.Norm2Projector","page":"Dict vectors","title":"Rimu.DictVectors.Norm2Projector","text":"Norm2Projector() <: AbstractProjector\n\nResults in computing the two-norm when used in dot(). E.g.\n\ndot(NormProjector(),x)\n-> norm(x,2) # with type Float64\n\nSee also PostStepStrategy, and AbstractProjector for use of projectors in ProjectorMonteCarloProblem.\n\n\n\n\n\n","category":"type"},{"location":"dictvectors.html#Rimu.DictVectors.UniformProjector","page":"Dict vectors","title":"Rimu.DictVectors.UniformProjector","text":"UniformProjector() <: AbstractProjector\n\nRepresents a vector with all elements 1. To be used with dot(). Minimizes memory allocations.\n\nUniformProjector()⋅v == sum(v)\ndot(UniformProjector(), LO, v) == sum(LO*v)\n\nSee also PostStepStrategy, and AbstractProjector for use of projectors in ProjectorMonteCarloProblem.\n\n\n\n\n\n","category":"type"},{"location":"dictvectors.html#Rimu.DictVectors.Norm1ProjectorPPop","page":"Dict vectors","title":"Rimu.DictVectors.Norm1ProjectorPPop","text":"Norm1ProjectorPPop() <: AbstractProjector\n\nResults in computing the one-norm per population when used in dot(). E.g.\n\ndot(Norm1ProjectorPPop(),x)\n-> norm(real.(x),1) + im*norm(imag.(x),1)\n\nSee also PostStepStrategy, and AbstractProjector for use of projectors in ProjectorMonteCarloProblem.\n\n\n\n\n\n","category":"type"},{"location":"dictvectors.html#Rimu.DictVectors.FrozenDVec","page":"Dict vectors","title":"Rimu.DictVectors.FrozenDVec","text":"FrozenDVec\n\nA frozen DVec(s) can't be modified or used in the conventional manner, but support faster dot products. See: freeze.\n\n\n\n\n\n","category":"type"},{"location":"dictvectors.html#Rimu.DictVectors.FrozenPDVec","page":"Dict vectors","title":"Rimu.DictVectors.FrozenPDVec","text":"FrozenPDVec\n\nParallel version of FrozenDVec. See: freeze, PDVec.\n\n\n\n\n\n","category":"type"},{"location":"dictvectors.html#Initiator-rules","page":"Dict vectors","title":"Initiator rules","text":"","category":"section"},{"location":"dictvectors.html","page":"Dict vectors","title":"Dict vectors","text":"Rimu.DictVectors.InitiatorRule\nRimu.DictVectors.AbstractInitiatorValue\nRimu.DictVectors.InitiatorValue\nRimu.DictVectors.initiator_valtype\nRimu.DictVectors.to_initiator_value\nRimu.DictVectors.from_initiator_value\nRimu.DictVectors.Initiator\nRimu.DictVectors.SimpleInitiator\nRimu.DictVectors.CoherentInitiator\nRimu.DictVectors.NonInitiator\nRimu.DictVectors.NonInitiatorValue","category":"page"},{"location":"dictvectors.html#Rimu.DictVectors.InitiatorRule","page":"Dict vectors","title":"Rimu.DictVectors.InitiatorRule","text":"InitiatorRule{V}\n\nAbstract type for defining initiator rules for InitiatorDVec. Concrete implementations:\n\nInitiator\nSimpleInitiator\nCoherentInitiator\nNonInitiator\n\nExtended Help\n\nInitiatorRules define how to store and retrieve data from associated AbstractInitiatorValues. When defining a new InitiatorRule, also define the following:\n\ninitiator_valtype\nfrom_initiator_value\nto_initiator_value\n\n\n\n\n\n","category":"type"},{"location":"dictvectors.html#Rimu.DictVectors.AbstractInitiatorValue","page":"Dict vectors","title":"Rimu.DictVectors.AbstractInitiatorValue","text":"abstract type AbstractInitiatorValue{V}\n\nA value equipped with additional information that enables a variation of the initiator approximation. To be used with PDVec, InitiatorDVec and InitiatorRules.\n\nMust define:\n\nBase.zero, Base.:+, Base.:-, Base.:*\nfrom_initiator_value and to_initiator_value\n\n\n\n\n\n","category":"type"},{"location":"dictvectors.html#Rimu.DictVectors.InitiatorValue","page":"Dict vectors","title":"Rimu.DictVectors.InitiatorValue","text":"InitiatorValue{V}(; safe::V, unsafe::V, initiator::V) where V\n\nComposite \"walker\" with three fields. For use with InitiatorDVecs.\n\n\n\n\n\n","category":"type"},{"location":"dictvectors.html#Rimu.DictVectors.initiator_valtype","page":"Dict vectors","title":"Rimu.DictVectors.initiator_valtype","text":"initiator_valtype(rule::InitiatorRule, T)\n\nReturn the AbstractInitiatorValue{T} that is employed by the rule.\n\n\n\n\n\n","category":"function"},{"location":"dictvectors.html#Rimu.DictVectors.to_initiator_value","page":"Dict vectors","title":"Rimu.DictVectors.to_initiator_value","text":"to_initiator_value(::InitiatorRule, k::K, v::V, parent)\n\nConvert v to an AbstractInitiatorValue, taking the initiator rule and the parent that spawned it into account.\n\n\n\n\n\n","category":"function"},{"location":"dictvectors.html#Rimu.DictVectors.from_initiator_value","page":"Dict vectors","title":"Rimu.DictVectors.from_initiator_value","text":"from_initiator_value(i::InitiatorRule, v::AbstractInitiatorValue)\n\nConvert the AbstractInitiatorValue v into a scalar value according to the InitiatorRule i.\n\n\n\n\n\n","category":"function"},{"location":"dictvectors.html#Rimu.DictVectors.Initiator","page":"Dict vectors","title":"Rimu.DictVectors.Initiator","text":"Initiator(threshold = 1.0) <: InitiatorRule\n\nInitiator rule to be passed to PDVec or InitiatorDVec. An initiator is a configuration add with a coefficient with magnitude abs(v[add]) > threshold. The threshold can be passed as a keyword argument. Rules:\n\nInitiators can spawn anywhere.\nNon-initiators can spawn to initiators.\n\nSee InitiatorRule.\n\n\n\n\n\n","category":"type"},{"location":"dictvectors.html#Rimu.DictVectors.SimpleInitiator","page":"Dict vectors","title":"Rimu.DictVectors.SimpleInitiator","text":"SimpleInitiator(threshold = 1.0) <: InitiatorRule\n\nInitiator rule to be passed to PDVec or InitiatorDVec. An initiator is a configuration add with a coefficient with magnitude abs(v[add]) > threshold. The threshold can be passed as a keyword argument. Rules:\n\nInitiators can spawn anywhere.\nNon-initiators cannot spawn.\n\nSee InitiatorRule.\n\n\n\n\n\n","category":"type"},{"location":"dictvectors.html#Rimu.DictVectors.CoherentInitiator","page":"Dict vectors","title":"Rimu.DictVectors.CoherentInitiator","text":"CoherentInitiator(threshold = 1.0) <: InitiatorRule\n\nInitiator rule to be passed to PDVec or InitiatorDVec. An initiator is a configuration add with a coefficient with magnitude abs(v[add]) > threshold. The threshold can be passed as a keyword argument. Rules:\n\nInitiators can spawn anywhere.\nNon-initiators can spawn to initiators.\nMultiple non-initiators can spawn to a single non-initiator if their contributions add up to a value greater than the initiator threshold.\n\nSee InitiatorRule.\n\n\n\n\n\n","category":"type"},{"location":"dictvectors.html#Rimu.DictVectors.NonInitiator","page":"Dict vectors","title":"Rimu.DictVectors.NonInitiator","text":"NonInitiator() <: InitiatorRule\n\nInitiator rule that disables the approximation. This is the default setting for PDVec.\n\nSee InitiatorRule.\n\n\n\n\n\n","category":"type"},{"location":"dictvectors.html#Rimu.DictVectors.NonInitiatorValue","page":"Dict vectors","title":"Rimu.DictVectors.NonInitiatorValue","text":"NonInitiatorValue{V}\n\nValue that does not contain any additional information - used with NonInitiator, the default initiator rule for PDVec.\n\n\n\n\n\n","category":"type"},{"location":"dictvectors.html#PDVec-internals","page":"Dict vectors","title":"PDVec internals","text":"","category":"section"},{"location":"dictvectors.html#Working-memory","page":"Dict vectors","title":"Working memory","text":"","category":"section"},{"location":"dictvectors.html","page":"Dict vectors","title":"Dict vectors","text":"Modules = [DictVectors]\nPages = [\"pdworkingmemory.jl\"]","category":"page"},{"location":"dictvectors.html#Rimu.DictVectors.FirstColumnIterator","page":"Dict vectors","title":"Rimu.DictVectors.FirstColumnIterator","text":"FirstColumnIterator{W,D} <: AbstractVector{D}\n\nIterates segments in the first column of a working memory that belong to a specified rank.\n\nSee PDWorkingMemory, remote_segments and local_segments.\n\n\n\n\n\n","category":"type"},{"location":"dictvectors.html#Rimu.DictVectors.PDWorkingMemory","page":"Dict vectors","title":"Rimu.DictVectors.PDWorkingMemory","text":"PDWorkingMemory(t::PDVec)\n\nThe working memory that handles threading and MPI distribution for operations that involve operators, such as FCIQMC propagation, operator-vector multiplication and three-way dot products with PDVecs.\n\nThe working memory is structured as a two-dimensional array of segments, which themselves are Dicts (see PDVec). The number of rows in this array is equal to the number of segments across all MPI ranks (covering the entire address space), while the number of columns corresponds to the number of segments in the current MPI rank (i.e. column corresponds to the part of the address space that is local to the current rank).\n\nThe purpose of this organisation is to allow spawning in parallel without using locks or atomic operations. The spawning is performed by applying the following sequence of operations:\n\nperform_spawns!: each segment in the PDVec is multiplied by the operator independently, with the results being stored in a column of the working memory.\ncollect_local!: the rows of the working memory are summed to the first column.\nsynchronize_remote!: the segments corresponding to other MPI ranks are distributed and transferred to the first column.\nmove_and_compress!: the results are stochastically compressed and moved to the result PDVec\n\nWhen used with three-argument dot products, a full copy of the left-hand side vector is materialized in the first column of the working memory on all ranks.\n\n\n\n\n\n","category":"type"},{"location":"dictvectors.html#Rimu.DictVectors.PDWorkingMemoryColumn","page":"Dict vectors","title":"Rimu.DictVectors.PDWorkingMemoryColumn","text":"PDWorkingMemoryColumn\n\nA column in PDWorkingMemory. Supports getindex, deposit! and StochasticStyle and acts as a target for spawning. Can be used as a target in a three-way dot-product.\n\n\n\n\n\n","category":"type"},{"location":"dictvectors.html#Rimu.DictVectors.collect_local!-Tuple{PDWorkingMemory}","page":"Dict vectors","title":"Rimu.DictVectors.collect_local!","text":"collect_local!(w::PDWorkingMemory)\n\nSum each row in w and store the result in the first column. This step must be performed before using local_segments or remote_segments to move the values elsewhere.\n\nSee PDWorkingMemory.\n\n\n\n\n\n","category":"method"},{"location":"dictvectors.html#Rimu.DictVectors.first_column-Union{Tuple{PDWorkingMemory{K, V, W, S}}, Tuple{S}, Tuple{W}, Tuple{V}, Tuple{K}} where {K, V, W, S}","page":"Dict vectors","title":"Rimu.DictVectors.first_column","text":"first_column(::PDWorkingMemory)\n\nReturn the first column of the working memory. This is where the vectors are collected with collect_local!, synchronize_remote!, copy_to_local!.\n\nSee PDWorkingMemory.\n\n\n\n\n\n","category":"method"},{"location":"dictvectors.html#Rimu.DictVectors.local_segments-Tuple{PDWorkingMemory}","page":"Dict vectors","title":"Rimu.DictVectors.local_segments","text":"local_segments(w::PDWorkingMemory)\n\nReturns iterator over the segments in the first column of w on the current rank. Iterates Dicts.\n\nSee PDWorkingMemory.\n\n\n\n\n\n","category":"method"},{"location":"dictvectors.html#Rimu.DictVectors.move_and_compress!-Tuple{PDVec, PDWorkingMemory}","page":"Dict vectors","title":"Rimu.DictVectors.move_and_compress!","text":"move_and_compress!(dst::PDVec, src::PDWorkingMemory)\nmove_and_compress!(::CompressionStrategy, dst::PDVec, src::PDWorkingMemory)\n\nMove the values in src to dst, compressing the according to the CompressionStrategy on the way. This step can only be performed after collect_local! and synchronize_remote!.\n\nSee PDWorkingMemory.\n\n\n\n\n\n","category":"method"},{"location":"dictvectors.html#Rimu.DictVectors.num_columns-Tuple{PDWorkingMemory}","page":"Dict vectors","title":"Rimu.DictVectors.num_columns","text":"num_columns(w::PDWorkingMemory) -> Int\n\nNumber of columns in the working memory. The number of rows is equal to the number of segments in the local MPI rank.\n\nSee PDWorkingMemory.\n\n\n\n\n\n","category":"method"},{"location":"dictvectors.html#Rimu.DictVectors.num_rows-Tuple{PDWorkingMemory}","page":"Dict vectors","title":"Rimu.DictVectors.num_rows","text":"num_rows(w::PDWorkingMemory) -> Int\n\nNumber of rows in the working memory. The number of rows is equal to the number of segments accross all MPI ranks.\n\nSee PDWorkingMemory.\n\n\n\n\n\n","category":"method"},{"location":"dictvectors.html#Rimu.DictVectors.perform_spawns!-Tuple{PDWorkingMemory, PDVec, Any, Any}","page":"Dict vectors","title":"Rimu.DictVectors.perform_spawns!","text":"perform_spawns!(w::PDWorkingMemory, v::PDVec, ham, boost)\n\nPerform spawns from v through ham to w. boost increases the number of spawns without affecting the expectation value of the process.\n\nSee PDVec and PDWorkingMemory.\n\n\n\n\n\n","category":"method"},{"location":"dictvectors.html#Rimu.DictVectors.remote_segments-Tuple{PDWorkingMemory, Any}","page":"Dict vectors","title":"Rimu.DictVectors.remote_segments","text":"remote_segments(w::PDWorkingMemory, rank_id)\n\nReturns iterator over the segments in the first column of w that belong to rank rank_id. Iterates Dicts.\n\nSee PDWorkingMemory.\n\n\n\n\n\n","category":"method"},{"location":"dictvectors.html#Rimu.DictVectors.synchronize_remote!-Tuple{PDWorkingMemory}","page":"Dict vectors","title":"Rimu.DictVectors.synchronize_remote!","text":"synchronize_remote!([::Communicator,] w::PDWorkingMemory) -> names, values\n\nSynchronize non-local segments across MPI and add the results to the first column. Controlled by the Communicator. This can only be perfomed after collect_local!.\n\nShould return a Tuple of names and a Tuple of values to report.\n\nSee PDWorkingMemory.\n\n\n\n\n\n","category":"method"},{"location":"dictvectors.html#Communicators","page":"Dict vectors","title":"Communicators","text":"","category":"section"},{"location":"dictvectors.html","page":"Dict vectors","title":"Dict vectors","text":"Modules = [DictVectors]\nPages = [\"communicators.jl\"]","category":"page"},{"location":"dictvectors.html#Rimu.DictVectors.AllToAll","page":"Dict vectors","title":"Rimu.DictVectors.AllToAll","text":"AllToAll{K,V}(; mpi_comm, n_segments, report) <: Communicator\n\nCommunicator that uses collective communication using MPI.Alltoall[v]!.\n\nKeyword arguments\n\nmpi_comm=MPI.COMM_WORLD: the MPI communicator to use.\nn_segments=Threads.nthreads(): the number of segments per rank to use. Should match the PDVec the communicator is used with.\nreport=false: if set to true, report MPI communication times during a projector Monte Carlo run.\n\nSee also: Communicator.\n\n\n\n\n\n","category":"type"},{"location":"dictvectors.html#Rimu.DictVectors.Communicator","page":"Dict vectors","title":"Rimu.DictVectors.Communicator","text":"abstract type Communicator\n\nCommunicators are used to handle MPI communication when using PDVecs. Currently, three implementations are provided, NotDistributed, AllToAll and PointToPoint. The communicator is picked automatically according to the number of MPI ranks available.\n\nWhen implementing a communicator, use local_segments and remote_segments.\n\nInterface\n\nsynchronize_remote!\nmpi_rank\nmpi_size\nmpi_comm\n\nOptional interface\n\nis_distributed: defaults to returning true.\nmerge_remote_reductions: defaults to using MPI.Allreduce.\ntotal_num_segments: defaults to n * mpi_size.\ntarget_segment: defaults to selecting using fastrange  to pick the segment.\n\nSee also: PDVec, PDWorkingMemory.\n\n\n\n\n\n","category":"type"},{"location":"dictvectors.html#Rimu.DictVectors.LocalPart","page":"Dict vectors","title":"Rimu.DictVectors.LocalPart","text":"LocalPart <: Communicator\n\nWhen localpart is used, the vector's Communicator is replaced with this. This allows iteration and local reductions.\n\n\n\n\n\n","category":"type"},{"location":"dictvectors.html#Rimu.DictVectors.NestedSegmentedBuffer","page":"Dict vectors","title":"Rimu.DictVectors.NestedSegmentedBuffer","text":"NestedSegmentedBuffer{T}(nrows) <: AbstractMatrix{AbstractVector{T}}\n\nMatrix of vectors stored in a single buffer with collective MPI communication support. The number of rows in the matrix is fixed to nrows.\n\nUsed in the AllToAll communication strategy, where each column corresponds to an MPI rank and each row corresponds to a segment in the PDVec.\n\nSupported operations\n\nappend_collections!: add a column to the matrix.\nappend_empty_column!: add an empty column to the matrix.\nmpi_exchange_alltoall!: each rank sends the i-th column of the matrix to the (i-1)-st rank.\nmpi_exchange_allgather!: each rank sends the 1-st column of the matrix to all ranks.\n\nSee also: SegmentedBuffer.\n\n\n\n\n\n","category":"type"},{"location":"dictvectors.html#Rimu.DictVectors.NotDistributed","page":"Dict vectors","title":"Rimu.DictVectors.NotDistributed","text":"NotDistributed <: Communicator\n\nThis Communicator is used when MPI is not available.\n\n\n\n\n\n","category":"type"},{"location":"dictvectors.html#Rimu.DictVectors.PointToPoint","page":"Dict vectors","title":"Rimu.DictVectors.PointToPoint","text":"PointToPoint{K,V}(; mpi_comm, report) <: Communicator\n\nMPI Communicator that uses circular communication using MPI.Isend and MPI.Recv!.\n\nKeyword arguments\n\nmpi_comm=MPI.COMM_WORLD: the MPI communicator to use.\nreport=false: if set to true, report MPI communication times during a projector Monte Carlo run.\n\n\n\n\n\n","category":"type"},{"location":"dictvectors.html#Rimu.DictVectors.SegmentedBuffer","page":"Dict vectors","title":"Rimu.DictVectors.SegmentedBuffer","text":"SegmentedBuffer{T}() <: AbstractVector{AbstractVector{T}}\n\nBehaves like a vector of vectors, but is stored in a single buffer. It can be sent/received over MPI keeping its structure intact. Used in the PointToPoint communication strategy.\n\nSupported operations\n\nreplace_collections!: insert data into the buffers\nmpi_send: send the contents of a buffer to a given rank\nmpi_recv_any!: receive a message sent by mpi_send from any rank, storing the contents in this buffer\n\nSee also: NestedSegmentedBuffer.\n\n\n\n\n\n","category":"type"},{"location":"dictvectors.html#Rimu.DictVectors.append_collections!-Tuple{Rimu.DictVectors.NestedSegmentedBuffer, Any}","page":"Dict vectors","title":"Rimu.DictVectors.append_collections!","text":"append_collections!(buf::NestedSegmentedBuffer, iters)\n\nAdd a column to buf. The length of iters should match buf.nrows.\n\nSee also: NestedSegmentedBuffer, append_empty_column!.\n\n\n\n\n\n","category":"method"},{"location":"dictvectors.html#Rimu.DictVectors.append_empty_column!-Tuple{Rimu.DictVectors.NestedSegmentedBuffer}","page":"Dict vectors","title":"Rimu.DictVectors.append_empty_column!","text":"append_empty_column!(buf::NestedSegmentedBuffer)\n\nLike append_collections!, but adds an empty column.\n\nSee also: NestedSegmentedBuffer, append_collections!.\n\n\n\n\n\n","category":"method"},{"location":"dictvectors.html#Rimu.DictVectors.copy_to_local!","page":"Dict vectors","title":"Rimu.DictVectors.copy_to_local!","text":"copy_to_local!([::Communicator,] w::PDWorkingMemory, t::PDVec) -> PDVec\n\nCopy pairs in t from all ranks and return them as a (possibly) new PDVec, possibly using the PDWorkingMemory as temporary storage.\n\nSee also: PDVec, PDWorkingMemory, Communicator.\n\n\n\n\n\n","category":"function"},{"location":"dictvectors.html#Rimu.DictVectors.is_distributed-Tuple{Rimu.DictVectors.Communicator}","page":"Dict vectors","title":"Rimu.DictVectors.is_distributed","text":"is_distributed(::Communicator)\n\nReturn true if Communicator operates over MPI.\n\n\n\n\n\n","category":"method"},{"location":"dictvectors.html#Rimu.DictVectors.merge_remote_reductions-Tuple{Rimu.DictVectors.Communicator, Any, Any}","page":"Dict vectors","title":"Rimu.DictVectors.merge_remote_reductions","text":"merge_remote_reductions(c::Communicator, op, x)\n\nMerge the results of reductions over MPI. By default, it uses MPI.Allreduce.\n\nSee also: Communicator.\n\n\n\n\n\n","category":"method"},{"location":"dictvectors.html#Rimu.DictVectors.mpi_exchange_allgather!-Tuple{Rimu.DictVectors.NestedSegmentedBuffer, Rimu.DictVectors.NestedSegmentedBuffer, Any}","page":"Dict vectors","title":"Rimu.DictVectors.mpi_exchange_allgather!","text":"mpi_exchange_allgather!(src::NestedSegmentedBuffer, dst::NestedSegmentedBuffer, comm)\n\nThe first and only column in src will be sent to all ranks. The data from all ranks will be gethered in dst. After this operation, dst will contain the same data on all ranks.\n\nSee also NestedSegmentedBuffer, mpi_exchange_alltoall!.\n\n\n\n\n\n","category":"method"},{"location":"dictvectors.html#Rimu.DictVectors.mpi_exchange_alltoall!-Tuple{Rimu.DictVectors.NestedSegmentedBuffer, Rimu.DictVectors.NestedSegmentedBuffer, Any}","page":"Dict vectors","title":"Rimu.DictVectors.mpi_exchange_alltoall!","text":"mpi_exchange_alltoall!(src::NestedSegmentedBuffer, dst::NestedSegmentedBuffer, comm)\n\nThe n-th column from src will be sent to rank n-1. The data sent from rank r will be stored in the (r+1)-st column of dst.\n\nSee also: NestedSegmentedBuffer, mpi_exchange_allgather!.\n\n\n\n\n\n","category":"method"},{"location":"dictvectors.html#Rimu.DictVectors.mpi_recv_any!-Tuple{Rimu.DictVectors.SegmentedBuffer, Any}","page":"Dict vectors","title":"Rimu.DictVectors.mpi_recv_any!","text":"mpi_recv_any!(buf::SegmentedBuffer, comm::MPI_Comm) -> Int\n\nFind a source that is ready to send a buffer and receive from it. Return the rank ID of the sender.\n\n\n\n\n\n","category":"method"},{"location":"dictvectors.html#Rimu.DictVectors.mpi_send-Tuple{Rimu.DictVectors.SegmentedBuffer, Any, Any}","page":"Dict vectors","title":"Rimu.DictVectors.mpi_send","text":"mpi_send(buf::SegmentedBuffer, dest, comm::MPI.Comm)\n\nSend the buffer to rank with id dest.\n\n\n\n\n\n","category":"method"},{"location":"dictvectors.html#Rimu.DictVectors.replace_collections!-Tuple{Rimu.DictVectors.SegmentedBuffer, Any}","page":"Dict vectors","title":"Rimu.DictVectors.replace_collections!","text":"replace_collections!(buf::SegmentedBuffer, iters)\n\nInsert collections in iters into a SegmentedBuffer.\n\njulia> using Rimu.DictVectors: SegmentedBuffer\n\njulia> buf = SegmentedBuffer{Int}()\n0-element SegmentedBuffer{Int64}\n\njulia> Rimu.DictVectors.replace_collections!(buf, [[1,2,3], [4,5]])\n2-element SegmentedBuffer{Int64}:\n [1, 2, 3]\n [4, 5]\n\njulia> Rimu.DictVectors.replace_collections!(buf, [[1], [2,3], [4]])\n3-element SegmentedBuffer{Int64}:\n [1]\n [2, 3]\n [4]\n\n\n\n\n\n","category":"method"},{"location":"dictvectors.html#Rimu.DictVectors.target_segment-Tuple{Rimu.DictVectors.Communicator, Any, Any}","page":"Dict vectors","title":"Rimu.DictVectors.target_segment","text":"target_segment(c::Communicator, k, num_segments) -> target, is_local\n\nThis function is used to determine where in the PDVec a key should be stored. If the key is local (stored on the same MPI rank), return its segment index and true. If the key is non-local, return any value and false.\n\nSee also: PDVec, Communicator.\n\n\n\n\n\n","category":"method"},{"location":"dictvectors.html#Rimu.DictVectors.total_num_segments-Tuple{Rimu.DictVectors.Communicator, Any}","page":"Dict vectors","title":"Rimu.DictVectors.total_num_segments","text":"total_num_segments(c::Communicator, n) -> Int\n\nReturn the total number of segments, including the remote ones, where n is number of local segments.\n\nSee also: PDVec, Communicator.\n\n\n\n\n\n","category":"method"},{"location":"dictvectors.html#Rimu.mpi_comm","page":"Dict vectors","title":"Rimu.mpi_comm","text":"mpi_comm(::Communicator) -> MPI.Comm\n\nReturn the MPI.Comm that the Communicator operates on.\n\n\n\n\n\n","category":"function"},{"location":"dictvectors.html#Rimu.mpi_rank","page":"Dict vectors","title":"Rimu.mpi_rank","text":"mpi_rank(::Communicator) -> Int\n\nReturn the MPI rank of the Communicator.\n\n\n\n\n\n","category":"function"},{"location":"dictvectors.html#Rimu.mpi_size","page":"Dict vectors","title":"Rimu.mpi_size","text":"mpi_size(::Communicator) -> Int\n\nReturn the total number of MPI ranks in the Communicator.\n\n\n\n\n\n","category":"function"},{"location":"dictvectors.html#Index","page":"Dict vectors","title":"Index","text":"","category":"section"},{"location":"dictvectors.html","page":"Dict vectors","title":"Dict vectors","text":"Pages   = [\"dictvectors.md\"]","category":"page"}]
}
