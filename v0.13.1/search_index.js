var documenterSearchIndex = {"docs":
[{"location":"mpi.html#Working-with-MPI","page":"Using MPI","title":"Working with MPI","text":"","category":"section"},{"location":"mpi.html","page":"Using MPI","title":"Using MPI","text":"If you are using PDVecs to store your vectors, working with MPI should be fairly straightforward. Generally, PDVec will work with MPI automatically, as long as MPI is set up correctly and a few common pitfalls are avoided.","category":"page"},{"location":"mpi.html","page":"Using MPI","title":"Using MPI","text":"Rimu includes an unexported module RMPI, which must be imported to access additional MPI-related functionality.","category":"page"},{"location":"mpi.html#Configuring-MPI","page":"Using MPI","title":"Configuring MPI","text":"","category":"section"},{"location":"mpi.html","page":"Using MPI","title":"Using MPI","text":"When running on a cluster, ensure that MPI.jl is using the system binary. See the MPI.jl documentation for more information.","category":"page"},{"location":"mpi.html","page":"Using MPI","title":"Using MPI","text":"It is always a good idea to start your script with a quick test that ensures the MPI is set up correctly. One way to do this is to open with","category":"page"},{"location":"mpi.html","page":"Using MPI","title":"Using MPI","text":"using Rimu.RMPI\nmpi_allprintln(\"hello\")","category":"page"},{"location":"mpi.html","page":"Using MPI","title":"Using MPI","text":"which should print something like","category":"page"},{"location":"mpi.html","page":"Using MPI","title":"Using MPI","text":"[ rank 0: hello\n[ rank 1: hello\n[ rank 2: hello\n[ rank 3: hello","category":"page"},{"location":"mpi.html","page":"Using MPI","title":"Using MPI","text":"If it prints rank 0 several times, the code will run, but ranks will not communicate.","category":"page"},{"location":"mpi.html#Using-Slurm","page":"Using MPI","title":"Using Slurm","text":"","category":"section"},{"location":"mpi.html","page":"Using MPI","title":"Using MPI","text":"When using PDVec, the recommended setup is to use threads to parallelise the computation within a node, and to only use MPI for inter-node communication. In a slurm script, this is done as follows:","category":"page"},{"location":"mpi.html","page":"Using MPI","title":"Using MPI","text":"...\n#SBATCH --ntasks-per-node=1\n#SBATCH --nodes=4            # replace 4 with the desired number of nodes\n#SBATCH --cpus-per-task=28   # replace 28 with the number of cores available in a node\n#SBATCH --hint=nomultithread # don't use hyperthreading\n...\n\nsrun julia --project -tauto script.jl","category":"page"},{"location":"mpi.html","page":"Using MPI","title":"Using MPI","text":"On some clusters, additional settings must be used with srun, for example the CTCP cluster requires the following.","category":"page"},{"location":"mpi.html","page":"Using MPI","title":"Using MPI","text":"srun mpi=pmi2 julia --project -tauto script.jl","category":"page"},{"location":"mpi.html#Common-pitfalls-with-reducing-functions","page":"Using MPI","title":"Common pitfalls with reducing functions","text":"","category":"section"},{"location":"mpi.html#Using-@mpi_root","page":"Using MPI","title":"Using @mpi_root","text":"","category":"section"},{"location":"mpi.html","page":"Using MPI","title":"Using MPI","text":"Take care to not use reducing functions (such as length, sum, norm, ...) inside @mpi_root blocks. Doing so will only initiate the distributed reduction on one rank only, which will cause the code to go out of sync and freeze. As an example, to report the current length of a vector, calculate the length before the @mpi_root block:","category":"page"},{"location":"mpi.html","page":"Using MPI","title":"Using MPI","text":"len = length(pdvec)\n@mpi_root println(\"vector length is $len\")","category":"page"},{"location":"mpi.html#Threaded-operations-and-reductions","page":"Using MPI","title":"Threaded operations and reductions","text":"","category":"section"},{"location":"mpi.html","page":"Using MPI","title":"Using MPI","text":"When using functions that take anonymous functions, such as map(!), sum, or mapreduce, it is important that the anonymous functions passed to them do not perform any MPI-reducing operations (length, norm, sum, etc.). These anonymous functions are executed on multiple threads and initiating MPI communication from multiple threads may cause issues.","category":"page"},{"location":"mpi.html","page":"Using MPI","title":"Using MPI","text":"As an example, suppose we want to scale a vector by its length by using map!. The correct way to write this code is as","category":"page"},{"location":"mpi.html","page":"Using MPI","title":"Using MPI","text":"len = length(pdvec)\nmap!(values(pdvec)) do x\n\tx / len\nend","category":"page"},{"location":"mpi.html","page":"Using MPI","title":"Using MPI","text":"Similar to the previous example, len is calculated first and not within the body of map!. In this specific case, an even better option is to use the scale! function from VectorInterface.jl:","category":"page"},{"location":"mpi.html","page":"Using MPI","title":"Using MPI","text":"scale!(pdvec, 1 / length(pdvec))","category":"page"},{"location":"projectormontecarlo.html#Projector-Monte-Carlo-/-FCIQMC","page":"Projector Monte Carlo","title":"Projector Monte Carlo / FCIQMC","text":"","category":"section"},{"location":"projectormontecarlo.html","page":"Projector Monte Carlo","title":"Projector Monte Carlo","text":"The purpose of Projector Monte Carlo is to stochastically sample the ground state, i.e. the  eigenvector corresponding to the lowest eigenvalue of a quantum Hamiltonian, or more generally,  a very large matrix. Rimu implements a flavor of Projector Monte Carlo called  Full Configuration Interaction Quantum Monte Carlo (FCIQMC).","category":"page"},{"location":"projectormontecarlo.html#ProjectorMonteCarloProblem","page":"Projector Monte Carlo","title":"ProjectorMonteCarloProblem","text":"","category":"section"},{"location":"projectormontecarlo.html","page":"Projector Monte Carlo","title":"Projector Monte Carlo","text":"To run a projector Monte Carlo simulation you set up a problem with ProjectorMonteCarloProblem and solve it with solve. Alternatively you can initialize a PMCSimulation struct, step!  through time steps, and solve! it to completion. ","category":"page"},{"location":"projectormontecarlo.html","page":"Projector Monte Carlo","title":"Projector Monte Carlo","text":"ProjectorMonteCarloProblem\ninit\nsolve\nsolve!\nstep!","category":"page"},{"location":"projectormontecarlo.html#Rimu.ProjectorMonteCarloProblem-projectormontecarlo","page":"Projector Monte Carlo","title":"Rimu.ProjectorMonteCarloProblem","text":"ProjectorMonteCarloProblem(hamiltonian::AbstractHamiltonian; kwargs...)\n\nDefines a problem to be solved by projector quantum Monte Carlo (QMC) methods, such as the the FCIQMC algorithm.\n\nCommon keyword arguments and defaults:\n\ntime_step = 0.01: Initial time step size.\nlast_step = 100: Controls the number of steps.\ntarget_walkers = 1_000: Target for the 1-norm of the coefficient vector.\nstart_at = starting_address(hamiltonian): Define the initial state vector(s).   An r  s matrix of state vectors can be passed where r is the   number of replicas and s the number of spectral states. See also   default_starting_vector.\nstyle = IsDynamicSemistochastic(): The StochasticStyle of the simulation.\ninitiator = false: Whether to use initiators. Can be true, false, or a valid   InitiatorRule.\nthreading: Default is to use multithreading and/or MPI if available. Set to true to force PDVec for the starting vector, false for serial computation; may be overridden by start_at.\nreporting_strategy = ReportDFAndInfo(): How and when to report results, see ReportingStrategy.\npost_step_strategy = (): Extract observables (e.g. ProjectedEnergy), see PostStepStrategy.\nn_replicas = 1: Number of synchronised independent simulations.\nreplica_strategy = NoStats(n_replicas): Which results to report from replica simulations, see ReplicaStrategy.\n\nExample\n\njulia> hamiltonian = HubbardReal1D(BoseFS(1,2,3));\n\njulia> problem = ProjectorMonteCarloProblem(hamiltonian; target_walkers = 500, last_step = 100);\n\njulia> simulation = solve(problem);\n\njulia> simulation.success[]\ntrue\n\njulia> size(DataFrame(simulation))\n(100, 9)\n\nFurther keyword arguments:\n\nstarting_step = 1: Starting step of the simulation.\nwalltime = Inf: Maximum time allowed for the simulation.\nsimulation_plan = SimulationPlan(; starting_step, last_step, walltime): Defines the   duration of the simulation. Takes precedence over last_step and walltime.\nζ = 0.08: Damping parameter for the shift update.\nξ = ζ^2/4: Forcing parameter for the shift update.\nshift_strategy = DoubleLogUpdate(; target_walkers, ζ, ξ): How to update the shift,   see ShiftStrategy.\ntime_step_strategy = ConstantTimeStep(): Adjust time step or not, see   TimeStepStrategy.\nalgorithm = FCIQMC(; shift_strategy, time_step_strategy): The algorithm to use.   Currenlty only FCIQMC is implemented.\nshift: Initial shift value or collection of shift values. Determined by default from the   Hamiltonian and the starting vectors.\ninitial_shift_parameters: Initial shift parameters or collection of initial shift   parameters. Overrides shift if provided.\nmaxlength = 2 * target_walkers + 100: Maximum length of the vectors.\ndisplay_name = \"PMCSimulation\": Name displayed in progress bar (via ProgressLogging).\nmetadata: User-supplied metadata to be added to the report. Must be an iterable of pairs or a NamedTuple, e.g. metadata = (\"key1\" => \"value1\", \"key2\" => \"value2\"). All metadata is converted to strings.\nrandom_seed = true: Provide and store a seed for the random number generator. If set to   true, a random seed is generated. If set to number, this number is used as the seed.   The seed is used by solve such that solveing the problem twice will yield identical   results. If set to false, no seed is used and results are not reproducible.\n\nSee also init, solve.\n\n\n\n\n\n","category":"type"},{"location":"projectormontecarlo.html#CommonSolve.init-projectormontecarlo","page":"Projector Monte Carlo","title":"CommonSolve.init","text":"init(p::ExactDiagonalizationProblem, [algorithm]; kwargs...)\n\nInitialize a solver for an ExactDiagonalizationProblem p with an optional algorithm. Returns a solver instance that can be solved with solve.\n\nFor a description of the keyword arguments, see the documentation for ExactDiagonalizationProblem.\n\n\n\n\n\ninit(problem::ProjectorMonteCarloProblem; copy_vectors=true)::PMCSimulation\n\nInitialise a Rimu.PMCSimulation.\n\nSee also ProjectorMonteCarloProblem, solve!, solve, step!, Rimu.PMCSimulation.\n\n\n\n\n\n","category":"function"},{"location":"projectormontecarlo.html#CommonSolve.solve-projectormontecarlo","page":"Projector Monte Carlo","title":"CommonSolve.solve","text":"solve(::ProjectorMonteCarloProblem)::PMCSimulation\n\nInitialize and solve a ProjectorMonteCarloProblem until the last step is completed or the walltime limit is reached.\n\nSee also init, solve!, step!, Rimu.PMCSimulation, and solve(::ExactDiagonalizationProblem).\n\n\n\n\n\n","category":"function"},{"location":"projectormontecarlo.html#CommonSolve.solve!-projectormontecarlo","page":"Projector Monte Carlo","title":"CommonSolve.solve!","text":"solve!(sm::PMCSimulation; kwargs...)::PMCSimulation\n\nSolve a Rimu.PMCSimulation until the last step is completed or the walltime limit is reached.\n\nTo continue a previously completed simulation, set a new last_step or walltime using the keyword arguments. Optionally, changes can be made to the replica_strategy, the post_step_strategy, or the reporting_strategy.\n\nOptional keyword arguments:\n\nlast_step = nothing: Set the last step to a new value and continue the simulation.\nwalltime = nothing: Set the allowed walltime to a new value and continue the simulation.\nreset_time = false: Reset the elapsed_time counter and continue the simulation.\nempty_report = false: Empty the report before continuing the simulation.\nreplica_strategy = nothing: Change the replica strategy. Requires the number of replicas   to match the number of replicas in the simulation sm. Implies empty_report = true.\npost_step_strategy = nothing: Change the post-step strategy. Implies   empty_report = true.\nreporting_strategy = nothing: Change the reporting strategy. Implies   empty_report = true.\nmetadata = nothing: Add metadata to the report.\n\nSee also ProjectorMonteCarloProblem, init, solve, step!, Rimu.PMCSimulation.\n\n\n\n\n\n","category":"function"},{"location":"projectormontecarlo.html#CommonSolve.step!-projectormontecarlo","page":"Projector Monte Carlo","title":"CommonSolve.step!","text":"step!(sm::PMCSimulation)::PMCSimulation\n\nAdvance the simulation by one step.\n\nCalling solve! will advance the simulation until the last step or the walltime is exceeded. When completing the simulation without calling solve!, the simulation report needs to be finalised by calling Rimu.finalize_report!.\n\nSee also ProjectorMonteCarloProblem, init, solve!, solve, Rimu.PMCSimulation.\n\n\n\n\n\n","category":"function"},{"location":"projectormontecarlo.html","page":"Projector Monte Carlo","title":"Projector Monte Carlo","text":"After solve or solve! have been called the returned PMCSimulation contains the results of  the projector Monte Carlo calculation.","category":"page"},{"location":"projectormontecarlo.html#PMCSimulation-and-report-as-a-DataFrame","page":"Projector Monte Carlo","title":"PMCSimulation and report as a DataFrame","text":"","category":"section"},{"location":"projectormontecarlo.html","page":"Projector Monte Carlo","title":"Projector Monte Carlo","text":"Rimu.PMCSimulation","category":"page"},{"location":"projectormontecarlo.html#Rimu.PMCSimulation-projectormontecarlo","page":"Projector Monte Carlo","title":"Rimu.PMCSimulation","text":"PMCSimulation\n\nHolds the state and the results of a projector quantum Monte Carlo (PMC) simulation. Is returned by init(::ProjectorMonteCarloProblem) and solved with solve!(::PMCSimulation).\n\nObtain the results of a simulation sm as a DataFrame with DataFrame(sm).\n\nSee also state_vectors, ProjectorMonteCarloProblem, init, solve!.\n\n\n\n\n\n","category":"type"},{"location":"projectormontecarlo.html","page":"Projector Monte Carlo","title":"Projector Monte Carlo","text":"The DataFrame returned from DataFrame(::PMCSimulation) contains the time series data from  the projector Monte Carlo simulation that is of primary interest for analysis. Depending on the  reporting_strategy and other options passed as keyword arguments to  ProjectorMonteCarloProblem it can have different numbers of rows and columns. The rows  correspond to the reported time steps (Monte Carlo steps). There is at least one column with the name :step. Further columns are usually present with additional data reported from the simulation.","category":"page"},{"location":"projectormontecarlo.html","page":"Projector Monte Carlo","title":"Projector Monte Carlo","text":"For the default option algorithm = FCIQMC(; shift_strategy, time_step_strategy) with a single replica (n_replicas = 1) and single spectral state, the fields :shift, :norm, :len will  be present as well as others depending on the style argument and the post_step_strategy.","category":"page"},{"location":"projectormontecarlo.html","page":"Projector Monte Carlo","title":"Projector Monte Carlo","text":"If multiple replicas or spectral states are requested, then the relevant field names in the  DataFrame will have a suffix identifying the respective replica simulation, e.g. the shifts will be reported as shift_1, shift_2, ... ","category":"page"},{"location":"projectormontecarlo.html","page":"Projector Monte Carlo","title":"Projector Monte Carlo","text":"Many tools for analysing the time series data obtained from a  ProjectorMonteCarloProblem are contained in the Module StatsTools.","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"EditURL = \"../../../scripts/G2-example.jl\"","category":"page"},{"location":"generated/G2-example.html#Example-3:-Calculating-observables","page":"Calculating observables","title":"Example 3: Calculating observables","text":"","category":"section"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"This is an example calculation of the two-body correlation function G_2.","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"A runnable script for this example is located here. Run it with julia G2-example.jl.","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"First, we load the reqired packages. Rimu for FCIQMC calculation, and DataFrames for maniplating the output.","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"using Rimu\nusing Random\nusing DataFrames","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"We use the same Hamiltonian as the first example, a Bose-Hubbard model with 6 particles in 6 sites, with strong interactions (we expect a Mott insulating state).","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"m = n = 6\ninitial_address = near_uniform(BoseFS{n,m})\nH = HubbardReal1D(initial_address; u = 6.0, t = 1.0)","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"HubbardReal1D(fs\"|1 1 1 1 1 1⟩\"; u=6.0, t=1.0)","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"Now, we define the operators for the observables we wish to calculate.","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"dvals = 0:m-1\nG2list = ((G2RealCorrelator(d) for d in dvals)...,)","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"(G2RealCorrelator(0), G2RealCorrelator(1), G2RealCorrelator(2), G2RealCorrelator(3), G2RealCorrelator(4), G2RealCorrelator(5))","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"This is a tuple of G2RealCorrelators, subtypes of AbstractHamiltonian. It calculates the density-density correlation function on a lattice","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"    hatG^(2)(d) = frac1M sum_i^M hatn_i (hatn_i+d - delta_0d)","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"with normalisation","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"    sum_d=0^M-1 langle hatG^(2)(d) rangle = fracN (N-1)M","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"Observables that are defined by expectation values are calculated using the \"replica trick\". Thereby several independent copies or \"replicas\" of the state vector are propagated simultaneously. The reason is to have two (or more) stochastically independent copies of the state vector available such that we can calculate bias-free overlaps. We enable this by defining a ReplicaStrategy. Each replica has its own state and FCIQMC is effectively performed independently on each one.  For calculating observables, we use AllOverlaps for the ReplicaStrategy. At each timestep, after the FCIQMC step is performed on, this strategy calculates the overlaps of every operator with the wavefunctions from each pair of replicas.","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"To obtain an unbiased result, at least two replicas should be used. One can also use more than two to improve the statistics. This is particularly helpful when the walker number is low.","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"n_replicas = 3\nreplica_strategy = AllOverlaps(n_replicas; operator=G2list)","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"AllOverlaps{3, 6, Tuple{G2RealCorrelator{0}, G2RealCorrelator{1}, G2RealCorrelator{2}, G2RealCorrelator{3}, G2RealCorrelator{4}, G2RealCorrelator{5}}, true}((G2RealCorrelator(0), G2RealCorrelator(1), G2RealCorrelator(2), G2RealCorrelator(3), G2RealCorrelator(4), G2RealCorrelator(5)))","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"Other FCIQMC parameters and strategies can be set in the same way as before.","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"steps_equilibrate = 1_000\nsteps_measure = 5_000\ntarget_walkers = 100;\ntime_step = 0.001\n","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"Now, we run FCIQMC. Note that passing an initial vector is optional - if we only pass the style, a vector with the appropriate style is created automatically.","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"problem = ProjectorMonteCarloProblem(H;\n    style=IsDynamicSemistochastic(),\n    time_step,\n    last_step = steps_equilibrate + steps_measure,\n    target_walkers,\n    replica_strategy,\n)\nresult = solve(problem)\ndf = DataFrame(result);","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"The output DataFrame has FCIQMC statistics for each replica (e.g. shift, norm),","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"println(filter(startswith(\"shift_\"), names(df)))","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"[\"shift_1\", \"shift_2\", \"shift_3\"]\n","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"as well as vector-vector overlaps (e.g. c1_dot_c2),","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"println(filter(contains(\"dot\"), names(df)))","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"[\"c1_dot_c2\", \"c1_dot_c3\", \"c2_dot_c3\"]\n","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"and operator overlaps (e.g. c1_Op1_c2) between the replicas.","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"println(filter(contains(\"Op\"), names(df)))","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"[\"c1_Op1_c2\", \"c1_Op2_c2\", \"c1_Op3_c2\", \"c1_Op4_c2\", \"c1_Op5_c2\", \"c1_Op6_c2\", \"c1_Op1_c3\", \"c1_Op2_c3\", \"c1_Op3_c3\", \"c1_Op4_c3\", \"c1_Op5_c3\", \"c1_Op6_c3\", \"c2_Op1_c3\", \"c2_Op2_c3\", \"c2_Op3_c3\", \"c2_Op4_c3\", \"c2_Op5_c3\", \"c2_Op6_c3\"]\n","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"The vector-vector and operator overlaps go into calculating the Rayleigh quotient for an observable","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"    langle hatG^(2)(d) rangle = fracsum_ab mathbfc_a^dagger cdot hatG^(2)(d) cdot mathbfc_bsum_ab mathbfc_a^dagger cdot mathbfc_b ","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"The sum over all replica pairs (a,b), especially in the denominator, helps to avoid errors from poor sampling if the number of walkers is too low.","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"We use the function rayleigh_replica_estimator to calculate the Rayleigh quotient using all replicas in df, returning a RatioBlockingResult. Using the keyword skip will ignore the initial equilibration steps.","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"Now, we can calculate the correlation function for each value of d.","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"println(\"Two-body correlator from $n_replicas replicas:\")\nfor d in dvals\n    r = rayleigh_replica_estimator(df; op_name = \"Op$(d+1)\", skip=steps_equilibrate)\n    println(\"   G2($d) = $(r.f) ± $(r.σ_f)\")\nend","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"Two-body correlator from 3 replicas:\n   G2(0) = 0.21601976042189822 ± 0.001192899288173596\n   G2(1) = 0.9166246717802329 ± 0.0006761931854634632\n   G2(2) = 0.9813192196562442 ± 0.0006586897042511087\n   G2(3) = 0.9880924567051476 ± 0.0007718450741279972\n   G2(4) = 0.9813192196562442 ± 0.0006586897042511087\n   G2(5) = 0.9166246717802329 ± 0.0006761931854634632\n","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"As expected, the onsite correlation at d=0 is low since this is a Mott insulating state with unit filling fraction, and is close to 10 for all other values of the displacement d.","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"Since we ran multiple independent replicas, we also have multiple estimates of the shift energy.","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"println(\"Shift energy from $n_replicas replicas:\")\nfor i in 1:n_replicas\n    se = shift_estimator(df; shift=\"shift_$i\", skip=steps_equilibrate)\n    println(\"   Replica $i: $(se.mean) ± $(se.err)\")\nend\n","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"Shift energy from 3 replicas:\n   Replica 1: -4.1102920249593184 ± 0.13635656437969576\n   Replica 2: -3.9861886996629474 ± 0.13300420350671663\n   Replica 3: -4.0532659746149005 ± 0.12766525508371887\n","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"This page was generated using Literate.jl.","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"EditURL = \"../../../scripts/BHM-example.jl\"","category":"page"},{"location":"generated/BHM-example.html#Example-1:-1D-Bose-Hubbard-Model","page":"1D Bose-Hubbard Model","title":"Example 1: 1D Bose-Hubbard Model","text":"","category":"section"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"This is an example calculation finding the ground state of a 1D Bose-Hubbard chain with 6 particles in 6 lattice sites.","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"A runnable script for this example is located here. Run it with julia BHM-example.jl.","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"First, we load Rimu and Plots.","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"using Rimu\nusing Plots","category":"page"},{"location":"generated/BHM-example.html#Setting-up-the-model","page":"1D Bose-Hubbard Model","title":"Setting up the model","text":"","category":"section"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"We start by defining the physical problem. First, we generate an initial configuration which will be used as a starting point of our computation. In this example, we use a bosonic Fock state with 6 particles evenly distributed in 6 lattice sites.","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"initial_address = near_uniform(BoseFS{6,6})","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"BoseFS{6,6}(1, 1, 1, 1, 1, 1)","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"The Hamiltonian is constructed by initializing a struct with an initial address and model parameters. Here, we use the Bose Hubbard model in one-dimensional real space.","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"H = HubbardReal1D(initial_address; u = 6.0, t = 1.0)","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"HubbardReal1D(fs\"|1 1 1 1 1 1⟩\"; u=6.0, t=1.0)","category":"page"},{"location":"generated/BHM-example.html#Parameters-of-the-calculation","page":"1D Bose-Hubbard Model","title":"Parameters of the calculation","text":"","category":"section"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"Now, let's setup the Monte Carlo calculation. We need to decide the number of walkers to use in this Monte Carlo run, which is equivalent to the average one-norm of the coefficient vector. Higher values will result in better statistics, but require more memory and computing power.","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"target_walkers = 1_000;","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"FCIQMC takes a certain number of steps to equllibrate, after which the observables will fluctuate around a mean value. In this example, we will devote 1000 steps to equilibration and take an additional 2000 steps for measurement.","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"steps_equilibrate = 1_000;\nsteps_measure = 2_000;\nlast_step = steps_equilibrate + steps_measure","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"3000","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"Next, we pick a time step size. FCIQMC does not have a time step error, but the time step needs to be small enough, or the computation might diverge. If the time step is too small, however, the computation might take a long time to equilibrate. The appropriate time step size is problem-dependent and is best determined through experimentation.","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"time_step = 0.001;","category":"page"},{"location":"generated/BHM-example.html#Defining-an-observable","page":"1D Bose-Hubbard Model","title":"Defining an observable","text":"","category":"section"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"Now, let's set up an observable to measure. Here we will measure the projected energy. In additon to the shift, the projected energy is a second estimator for the energy. It usually produces better statistics than the shift.","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"We first need to define a projector. Here, we use the function default_starting_vector to generate a vector with only a single occupied configuration. We will use the same vector as the starting vector for the FCIQMC calculation.","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"initial_vector = default_starting_vector(initial_address; style=IsDynamicSemistochastic())","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"DVec{BoseFS{6, 6, BitString{11, 1, UInt16}},Float64} with 1 entry, style = IsDynamicSemistochastic{Float64,ThresholdCompression,DynamicSemistochastic}()\n  fs\"|1 1 1 1 1 1⟩\" => 10.0","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"The choice of the style argument already determines the FCIQMC algorithm to use. IsDynamicSemistochastic is usually the best choice as it reduces noise and improves the sign problem.","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"Observables that can be calculated by projection of the fluctuating quantum state onto a constant vector are passed into the ProjectorMonteCarloProblem with the post_step_strategy keyword argument.","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"post_step_strategy = ProjectedEnergy(H, initial_vector)","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"ProjectedEnergy{HubbardReal1D{Float64, BoseFS{6, 6, BitString{11, 1, UInt16}}, 6.0, 1.0}, Rimu.DictVectors.FrozenDVec{BoseFS{6, 6, BitString{11, 1, UInt16}}, Float64}, Rimu.DictVectors.FrozenDVec{BoseFS{6, 6, BitString{11, 1, UInt16}}, Float64}}(:vproj, :hproj, HubbardReal1D(fs\"|1 1 1 1 1 1⟩\"; u=6.0, t=1.0), Rimu.FrozenDVec([fs\"|1 1 1 1 1 1⟩\"=>10.0]), Rimu.FrozenDVec([fs\"|1 1 1 1 2 0⟩\"=>-14.1421, fs\"|0 2 1 1 1 1⟩\"=>-14.1421, fs\"|1 1 1 1 0 2⟩\"=>-14.1421, fs\"|1 2 0 1 1 1⟩\"=>-14.1421, fs\"|2 0 1 1 1 1⟩\"=>-14.1421, fs\"|1 1 1 2 0 1⟩\"=>-14.1421, fs\"|1 1 2 0 1 1⟩\"=>-14.1421, fs\"|1 1 0 2 1 1⟩\"=>-14.1421, fs\"|1 1 1 0 2 1⟩\"=>-14.1421, fs\"|1 0 2 1 1 1⟩\"=>-14.1421, fs\"|2 1 1 1 1 0⟩\"=>-14.1421, fs\"|0 1 1 1 1 2⟩\"=>-14.1421]))","category":"page"},{"location":"generated/BHM-example.html#Running-the-calculation","page":"1D Bose-Hubbard Model","title":"Running the calculation","text":"","category":"section"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"This is a two-step process: First we define a ProjectorMonteCarloProblem with all the parameters needed for the simulation","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"problem = ProjectorMonteCarloProblem(\n    H;\n    start_at = initial_vector,\n    last_step,\n    time_step,\n    target_walkers,\n    post_step_strategy\n);","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"To run the simulation we simply call solve on the problem","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"simulation = solve(problem);","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"The simulation object contains the results of the simulation as well as state vectors and strategies. We can extract the time series data for further analysis:","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"df = DataFrame(simulation);","category":"page"},{"location":"generated/BHM-example.html#Analysing-the-results","page":"1D Bose-Hubbard Model","title":"Analysing the results","text":"","category":"section"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"We can plot the norm of the coefficient vector as a function of the number of steps.","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"hline(\n    [target_walkers];\n    label=\"target_walkers\", xlabel=\"step\", ylabel=\"norm\",\n    color=2, linestyle=:dash, margin = 1Plots.cm\n)\nplot!(df.step, df.norm, label=\"norm\", color=1)","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"<?xml version=\"1.0\" encoding=\"utf-8\"?>\n<svg xmlns=\"http://www.w3.org/2000/svg\" xmlns:xlink=\"http://www.w3.org/1999/xlink\" width=\"600\" height=\"400\" viewBox=\"0 0 2400 1600\">\n<defs>\n  <clipPath id=\"clip990\">\n    <rect x=\"0\" y=\"0\" width=\"2400\" height=\"1600\"/>\n  </clipPath>\n</defs>\n<path clip-path=\"url(#clip990)\" d=\"M0 1600 L2400 1600 L2400 0 L0 0  Z\" fill=\"#ffffff\" fill-rule=\"evenodd\" fill-opacity=\"1\"/>\n<defs>\n  <clipPath id=\"clip991\">\n    <rect x=\"480\" y=\"0\" width=\"1681\" height=\"1600\"/>\n  </clipPath>\n</defs>\n<path clip-path=\"url(#clip990)\" d=\"M404.284 1281.45 L2211.02 1281.45 L2211.02 188.976 L404.284 188.976  Z\" fill=\"#ffffff\" fill-rule=\"evenodd\" fill-opacity=\"1\"/>\n<defs>\n  <clipPath id=\"clip992\">\n    <rect x=\"404\" y=\"188\" width=\"1808\" height=\"1093\"/>\n  </clipPath>\n</defs>\n<polyline clip-path=\"url(#clip992)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:2; stroke-opacity:0.1; fill:none\" points=\"454.849,1281.45 454.849,188.976 \"/>\n<polyline clip-path=\"url(#clip992)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:2; stroke-opacity:0.1; fill:none\" points=\"1023.2,1281.45 1023.2,188.976 \"/>\n<polyline clip-path=\"url(#clip992)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:2; stroke-opacity:0.1; fill:none\" points=\"1591.54,1281.45 1591.54,188.976 \"/>\n<polyline clip-path=\"url(#clip992)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:2; stroke-opacity:0.1; fill:none\" points=\"2159.89,1281.45 2159.89,188.976 \"/>\n<polyline clip-path=\"url(#clip992)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:2; stroke-opacity:0.1; fill:none\" points=\"404.284,1260.84 2211.02,1260.84 \"/>\n<polyline clip-path=\"url(#clip992)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:2; stroke-opacity:0.1; fill:none\" points=\"404.284,1003.03 2211.02,1003.03 \"/>\n<polyline clip-path=\"url(#clip992)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:2; stroke-opacity:0.1; fill:none\" points=\"404.284,745.223 2211.02,745.223 \"/>\n<polyline clip-path=\"url(#clip992)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:2; stroke-opacity:0.1; fill:none\" points=\"404.284,487.414 2211.02,487.414 \"/>\n<polyline clip-path=\"url(#clip992)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:2; stroke-opacity:0.1; fill:none\" points=\"404.284,229.605 2211.02,229.605 \"/>\n<polyline clip-path=\"url(#clip990)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"404.284,1281.45 2211.02,1281.45 \"/>\n<polyline clip-path=\"url(#clip990)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"454.849,1281.45 454.849,1262.55 \"/>\n<polyline clip-path=\"url(#clip990)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"1023.2,1281.45 1023.2,1262.55 \"/>\n<polyline clip-path=\"url(#clip990)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"1591.54,1281.45 1591.54,1262.55 \"/>\n<polyline clip-path=\"url(#clip990)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"2159.89,1281.45 2159.89,1262.55 \"/>\n<path clip-path=\"url(#clip990)\" d=\"M454.849 1312.37 Q451.238 1312.37 449.41 1315.93 Q447.604 1319.47 447.604 1326.6 Q447.604 1333.71 449.41 1337.27 Q451.238 1340.82 454.849 1340.82 Q458.484 1340.82 460.289 1337.27 Q462.118 1333.71 462.118 1326.6 Q462.118 1319.47 460.289 1315.93 Q458.484 1312.37 454.849 1312.37 M454.849 1308.66 Q460.659 1308.66 463.715 1313.27 Q466.794 1317.85 466.794 1326.6 Q466.794 1335.33 463.715 1339.94 Q460.659 1344.52 454.849 1344.52 Q449.039 1344.52 445.96 1339.94 Q442.905 1335.33 442.905 1326.6 Q442.905 1317.85 445.96 1313.27 Q449.039 1308.66 454.849 1308.66 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip990)\" d=\"M967.722 1339.91 L975.361 1339.91 L975.361 1313.55 L967.05 1315.21 L967.05 1310.95 L975.314 1309.29 L979.99 1309.29 L979.99 1339.91 L987.629 1339.91 L987.629 1343.85 L967.722 1343.85 L967.722 1339.91 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip990)\" d=\"M1007.07 1312.37 Q1003.46 1312.37 1001.63 1315.93 Q999.828 1319.47 999.828 1326.6 Q999.828 1333.71 1001.63 1337.27 Q1003.46 1340.82 1007.07 1340.82 Q1010.71 1340.82 1012.51 1337.27 Q1014.34 1333.71 1014.34 1326.6 Q1014.34 1319.47 1012.51 1315.93 Q1010.71 1312.37 1007.07 1312.37 M1007.07 1308.66 Q1012.88 1308.66 1015.94 1313.27 Q1019.02 1317.85 1019.02 1326.6 Q1019.02 1335.33 1015.94 1339.94 Q1012.88 1344.52 1007.07 1344.52 Q1001.26 1344.52 998.185 1339.94 Q995.129 1335.33 995.129 1326.6 Q995.129 1317.85 998.185 1313.27 Q1001.26 1308.66 1007.07 1308.66 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip990)\" d=\"M1037.24 1312.37 Q1033.62 1312.37 1031.8 1315.93 Q1029.99 1319.47 1029.99 1326.6 Q1029.99 1333.71 1031.8 1337.27 Q1033.62 1340.82 1037.24 1340.82 Q1040.87 1340.82 1042.68 1337.27 Q1044.5 1333.71 1044.5 1326.6 Q1044.5 1319.47 1042.68 1315.93 Q1040.87 1312.37 1037.24 1312.37 M1037.24 1308.66 Q1043.05 1308.66 1046.1 1313.27 Q1049.18 1317.85 1049.18 1326.6 Q1049.18 1335.33 1046.1 1339.94 Q1043.05 1344.52 1037.24 1344.52 Q1031.43 1344.52 1028.35 1339.94 Q1025.29 1335.33 1025.29 1326.6 Q1025.29 1317.85 1028.35 1313.27 Q1031.43 1308.66 1037.24 1308.66 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip990)\" d=\"M1067.4 1312.37 Q1063.79 1312.37 1061.96 1315.93 Q1060.15 1319.47 1060.15 1326.6 Q1060.15 1333.71 1061.96 1337.27 Q1063.79 1340.82 1067.4 1340.82 Q1071.03 1340.82 1072.84 1337.27 Q1074.67 1333.71 1074.67 1326.6 Q1074.67 1319.47 1072.84 1315.93 Q1071.03 1312.37 1067.4 1312.37 M1067.4 1308.66 Q1073.21 1308.66 1076.26 1313.27 Q1079.34 1317.85 1079.34 1326.6 Q1079.34 1335.33 1076.26 1339.94 Q1073.21 1344.52 1067.4 1344.52 Q1061.59 1344.52 1058.51 1339.94 Q1055.45 1335.33 1055.45 1326.6 Q1055.45 1317.85 1058.51 1313.27 Q1061.59 1308.66 1067.4 1308.66 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip990)\" d=\"M1540.15 1339.91 L1556.47 1339.91 L1556.47 1343.85 L1534.53 1343.85 L1534.53 1339.91 Q1537.19 1337.16 1541.77 1332.53 Q1546.38 1327.88 1547.56 1326.53 Q1549.81 1324.01 1550.69 1322.27 Q1551.59 1320.51 1551.59 1318.82 Q1551.59 1316.07 1549.64 1314.33 Q1547.72 1312.6 1544.62 1312.6 Q1542.42 1312.6 1539.97 1313.36 Q1537.54 1314.13 1534.76 1315.68 L1534.76 1310.95 Q1537.58 1309.82 1540.04 1309.24 Q1542.49 1308.66 1544.53 1308.66 Q1549.9 1308.66 1553.09 1311.35 Q1556.29 1314.03 1556.29 1318.52 Q1556.29 1320.65 1555.48 1322.57 Q1554.69 1324.47 1552.58 1327.07 Q1552.01 1327.74 1548.9 1330.95 Q1545.8 1334.15 1540.15 1339.91 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip990)\" d=\"M1576.29 1312.37 Q1572.68 1312.37 1570.85 1315.93 Q1569.04 1319.47 1569.04 1326.6 Q1569.04 1333.71 1570.85 1337.27 Q1572.68 1340.82 1576.29 1340.82 Q1579.92 1340.82 1581.73 1337.27 Q1583.56 1333.71 1583.56 1326.6 Q1583.56 1319.47 1581.73 1315.93 Q1579.92 1312.37 1576.29 1312.37 M1576.29 1308.66 Q1582.1 1308.66 1585.15 1313.27 Q1588.23 1317.85 1588.23 1326.6 Q1588.23 1335.33 1585.15 1339.94 Q1582.1 1344.52 1576.29 1344.52 Q1570.48 1344.52 1567.4 1339.94 Q1564.34 1335.33 1564.34 1326.6 Q1564.34 1317.85 1567.4 1313.27 Q1570.48 1308.66 1576.29 1308.66 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip990)\" d=\"M1606.45 1312.37 Q1602.84 1312.37 1601.01 1315.93 Q1599.2 1319.47 1599.2 1326.6 Q1599.2 1333.71 1601.01 1337.27 Q1602.84 1340.82 1606.45 1340.82 Q1610.08 1340.82 1611.89 1337.27 Q1613.72 1333.71 1613.72 1326.6 Q1613.72 1319.47 1611.89 1315.93 Q1610.08 1312.37 1606.45 1312.37 M1606.45 1308.66 Q1612.26 1308.66 1615.32 1313.27 Q1618.39 1317.85 1618.39 1326.6 Q1618.39 1335.33 1615.32 1339.94 Q1612.26 1344.52 1606.45 1344.52 Q1600.64 1344.52 1597.56 1339.94 Q1594.51 1335.33 1594.51 1326.6 Q1594.51 1317.85 1597.56 1313.27 Q1600.64 1308.66 1606.45 1308.66 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip990)\" d=\"M1636.61 1312.37 Q1633 1312.37 1631.17 1315.93 Q1629.37 1319.47 1629.37 1326.6 Q1629.37 1333.71 1631.17 1337.27 Q1633 1340.82 1636.61 1340.82 Q1640.25 1340.82 1642.05 1337.27 Q1643.88 1333.71 1643.88 1326.6 Q1643.88 1319.47 1642.05 1315.93 Q1640.25 1312.37 1636.61 1312.37 M1636.61 1308.66 Q1642.42 1308.66 1645.48 1313.27 Q1648.56 1317.85 1648.56 1326.6 Q1648.56 1335.33 1645.48 1339.94 Q1642.42 1344.52 1636.61 1344.52 Q1630.8 1344.52 1627.72 1339.94 Q1624.67 1335.33 1624.67 1326.6 Q1624.67 1317.85 1627.72 1313.27 Q1630.8 1308.66 1636.61 1308.66 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip990)\" d=\"M2118.57 1325.21 Q2121.93 1325.93 2123.8 1328.2 Q2125.7 1330.47 2125.7 1333.8 Q2125.7 1338.92 2122.18 1341.72 Q2118.66 1344.52 2112.18 1344.52 Q2110.01 1344.52 2107.69 1344.08 Q2105.4 1343.66 2102.95 1342.81 L2102.95 1338.29 Q2104.89 1339.43 2107.2 1340 Q2109.52 1340.58 2112.04 1340.58 Q2116.44 1340.58 2118.73 1338.85 Q2121.05 1337.11 2121.05 1333.8 Q2121.05 1330.75 2118.89 1329.03 Q2116.76 1327.3 2112.95 1327.3 L2108.92 1327.3 L2108.92 1323.45 L2113.13 1323.45 Q2116.58 1323.45 2118.41 1322.09 Q2120.24 1320.7 2120.24 1318.11 Q2120.24 1315.44 2118.34 1314.03 Q2116.46 1312.6 2112.95 1312.6 Q2111.02 1312.6 2108.82 1313.01 Q2106.63 1313.43 2103.99 1314.31 L2103.99 1310.14 Q2106.65 1309.4 2108.96 1309.03 Q2111.3 1308.66 2113.36 1308.66 Q2118.69 1308.66 2121.79 1311.09 Q2124.89 1313.5 2124.89 1317.62 Q2124.89 1320.49 2123.25 1322.48 Q2121.6 1324.45 2118.57 1325.21 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip990)\" d=\"M2144.57 1312.37 Q2140.95 1312.37 2139.13 1315.93 Q2137.32 1319.47 2137.32 1326.6 Q2137.32 1333.71 2139.13 1337.27 Q2140.95 1340.82 2144.57 1340.82 Q2148.2 1340.82 2150.01 1337.27 Q2151.83 1333.71 2151.83 1326.6 Q2151.83 1319.47 2150.01 1315.93 Q2148.2 1312.37 2144.57 1312.37 M2144.57 1308.66 Q2150.38 1308.66 2153.43 1313.27 Q2156.51 1317.85 2156.51 1326.6 Q2156.51 1335.33 2153.43 1339.94 Q2150.38 1344.52 2144.57 1344.52 Q2138.76 1344.52 2135.68 1339.94 Q2132.62 1335.33 2132.62 1326.6 Q2132.62 1317.85 2135.68 1313.27 Q2138.76 1308.66 2144.57 1308.66 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip990)\" d=\"M2174.73 1312.37 Q2171.12 1312.37 2169.29 1315.93 Q2167.48 1319.47 2167.48 1326.6 Q2167.48 1333.71 2169.29 1337.27 Q2171.12 1340.82 2174.73 1340.82 Q2178.36 1340.82 2180.17 1337.27 Q2182 1333.71 2182 1326.6 Q2182 1319.47 2180.17 1315.93 Q2178.36 1312.37 2174.73 1312.37 M2174.73 1308.66 Q2180.54 1308.66 2183.59 1313.27 Q2186.67 1317.85 2186.67 1326.6 Q2186.67 1335.33 2183.59 1339.94 Q2180.54 1344.52 2174.73 1344.52 Q2168.92 1344.52 2165.84 1339.94 Q2162.78 1335.33 2162.78 1326.6 Q2162.78 1317.85 2165.84 1313.27 Q2168.92 1308.66 2174.73 1308.66 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip990)\" d=\"M2204.89 1312.37 Q2201.28 1312.37 2199.45 1315.93 Q2197.64 1319.47 2197.64 1326.6 Q2197.64 1333.71 2199.45 1337.27 Q2201.28 1340.82 2204.89 1340.82 Q2208.52 1340.82 2210.33 1337.27 Q2212.16 1333.71 2212.16 1326.6 Q2212.16 1319.47 2210.33 1315.93 Q2208.52 1312.37 2204.89 1312.37 M2204.89 1308.66 Q2210.7 1308.66 2213.75 1313.27 Q2216.83 1317.85 2216.83 1326.6 Q2216.83 1335.33 2213.75 1339.94 Q2210.7 1344.52 2204.89 1344.52 Q2199.08 1344.52 2196 1339.94 Q2192.94 1335.33 2192.94 1326.6 Q2192.94 1317.85 2196 1313.27 Q2199.08 1308.66 2204.89 1308.66 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip990)\" d=\"M1266.04 1391.71 L1266.04 1397.25 Q1263.56 1395.98 1260.88 1395.34 Q1258.21 1394.71 1255.34 1394.71 Q1250.98 1394.71 1248.79 1396.04 Q1246.62 1397.38 1246.62 1400.05 Q1246.62 1402.09 1248.18 1403.27 Q1249.74 1404.41 1254.45 1405.46 L1256.46 1405.91 Q1262.7 1407.25 1265.31 1409.7 Q1267.95 1412.12 1267.95 1416.48 Q1267.95 1421.44 1264 1424.34 Q1260.09 1427.23 1253.21 1427.23 Q1250.35 1427.23 1247.23 1426.66 Q1244.14 1426.12 1240.7 1425.01 L1240.7 1418.96 Q1243.95 1420.65 1247.1 1421.51 Q1250.25 1422.33 1253.34 1422.33 Q1257.48 1422.33 1259.7 1420.93 Q1261.93 1419.5 1261.93 1416.92 Q1261.93 1414.54 1260.31 1413.26 Q1258.72 1411.99 1253.27 1410.81 L1251.24 1410.33 Q1245.79 1409.19 1243.38 1406.83 Q1240.96 1404.45 1240.96 1400.31 Q1240.96 1395.28 1244.52 1392.54 Q1248.09 1389.8 1254.64 1389.8 Q1257.89 1389.8 1260.75 1390.28 Q1263.62 1390.76 1266.04 1391.71 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip990)\" d=\"M1283.07 1380.54 L1283.07 1390.66 L1295.13 1390.66 L1295.13 1395.22 L1283.07 1395.22 L1283.07 1414.57 Q1283.07 1418.93 1284.24 1420.17 Q1285.45 1421.41 1289.11 1421.41 L1295.13 1421.41 L1295.13 1426.31 L1289.11 1426.31 Q1282.33 1426.31 1279.76 1423.8 Q1277.18 1421.25 1277.18 1414.57 L1277.18 1395.22 L1272.88 1395.22 L1272.88 1390.66 L1277.18 1390.66 L1277.18 1380.54 L1283.07 1380.54 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip990)\" d=\"M1333.32 1407.02 L1333.32 1409.89 L1306.4 1409.89 Q1306.78 1415.94 1310.02 1419.12 Q1313.3 1422.27 1319.13 1422.27 Q1322.5 1422.27 1325.65 1421.44 Q1328.84 1420.61 1331.95 1418.96 L1331.95 1424.5 Q1328.8 1425.83 1325.49 1426.53 Q1322.18 1427.23 1318.78 1427.23 Q1310.25 1427.23 1305.25 1422.27 Q1300.29 1417.3 1300.29 1408.84 Q1300.29 1400.08 1305 1394.96 Q1309.74 1389.8 1317.76 1389.8 Q1324.95 1389.8 1329.12 1394.45 Q1333.32 1399.07 1333.32 1407.02 M1327.47 1405.3 Q1327.4 1400.5 1324.76 1397.63 Q1322.15 1394.77 1317.82 1394.77 Q1312.92 1394.77 1309.96 1397.54 Q1307.03 1400.31 1306.59 1405.34 L1327.47 1405.3 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip990)\" d=\"M1348.6 1420.96 L1348.6 1439.87 L1342.71 1439.87 L1342.71 1390.66 L1348.6 1390.66 L1348.6 1396.07 Q1350.45 1392.89 1353.25 1391.36 Q1356.08 1389.8 1360 1389.8 Q1366.49 1389.8 1370.53 1394.96 Q1374.6 1400.12 1374.6 1408.52 Q1374.6 1416.92 1370.53 1422.08 Q1366.49 1427.23 1360 1427.23 Q1356.08 1427.23 1353.25 1425.71 Q1350.45 1424.15 1348.6 1420.96 M1368.53 1408.52 Q1368.53 1402.06 1365.85 1398.4 Q1363.21 1394.71 1358.56 1394.71 Q1353.92 1394.71 1351.24 1398.4 Q1348.6 1402.06 1348.6 1408.52 Q1348.6 1414.98 1351.24 1418.67 Q1353.92 1422.33 1358.56 1422.33 Q1363.21 1422.33 1365.85 1418.67 Q1368.53 1414.98 1368.53 1408.52 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><polyline clip-path=\"url(#clip990)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"404.284,1281.45 404.284,188.976 \"/>\n<polyline clip-path=\"url(#clip990)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"404.284,1260.84 423.181,1260.84 \"/>\n<polyline clip-path=\"url(#clip990)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"404.284,1003.03 423.181,1003.03 \"/>\n<polyline clip-path=\"url(#clip990)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"404.284,745.223 423.181,745.223 \"/>\n<polyline clip-path=\"url(#clip990)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"404.284,487.414 423.181,487.414 \"/>\n<polyline clip-path=\"url(#clip990)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"404.284,229.605 423.181,229.605 \"/>\n<path clip-path=\"url(#clip990)\" d=\"M356.339 1246.64 Q352.728 1246.64 350.899 1250.2 Q349.094 1253.75 349.094 1260.88 Q349.094 1267.98 350.899 1271.55 Q352.728 1275.09 356.339 1275.09 Q359.973 1275.09 361.779 1271.55 Q363.608 1267.98 363.608 1260.88 Q363.608 1253.75 361.779 1250.2 Q359.973 1246.64 356.339 1246.64 M356.339 1242.94 Q362.149 1242.94 365.205 1247.54 Q368.284 1252.13 368.284 1260.88 Q368.284 1269.6 365.205 1274.21 Q362.149 1278.79 356.339 1278.79 Q350.529 1278.79 347.45 1274.21 Q344.395 1269.6 344.395 1260.88 Q344.395 1252.13 347.45 1247.54 Q350.529 1242.94 356.339 1242.94 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip990)\" d=\"M290.043 1016.38 L306.363 1016.38 L306.363 1020.31 L284.418 1020.31 L284.418 1016.38 Q287.08 1013.62 291.664 1008.99 Q296.27 1004.34 297.451 1003 Q299.696 1000.47 300.576 998.738 Q301.478 996.979 301.478 995.289 Q301.478 992.534 299.534 990.798 Q297.613 989.062 294.511 989.062 Q292.312 989.062 289.858 989.826 Q287.427 990.59 284.65 992.141 L284.65 987.419 Q287.474 986.284 289.927 985.706 Q292.381 985.127 294.418 985.127 Q299.789 985.127 302.983 987.812 Q306.177 990.497 306.177 994.988 Q306.177 997.118 305.367 999.039 Q304.58 1000.94 302.474 1003.53 Q301.895 1004.2 298.793 1007.42 Q295.691 1010.61 290.043 1016.38 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip990)\" d=\"M316.224 985.752 L334.58 985.752 L334.58 989.687 L320.506 989.687 L320.506 998.159 Q321.524 997.812 322.543 997.65 Q323.562 997.465 324.58 997.465 Q330.367 997.465 333.747 1000.64 Q337.126 1003.81 337.126 1009.22 Q337.126 1014.8 333.654 1017.9 Q330.182 1020.98 323.862 1020.98 Q321.687 1020.98 319.418 1020.61 Q317.173 1020.24 314.765 1019.5 L314.765 1014.8 Q316.849 1015.94 319.071 1016.49 Q321.293 1017.05 323.77 1017.05 Q327.774 1017.05 330.112 1014.94 Q332.45 1012.84 332.45 1009.22 Q332.45 1005.61 330.112 1003.51 Q327.774 1001.4 323.77 1001.4 Q321.895 1001.4 320.02 1001.82 Q318.168 1002.23 316.224 1003.11 L316.224 985.752 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip990)\" d=\"M356.339 988.831 Q352.728 988.831 350.899 992.396 Q349.094 995.937 349.094 1003.07 Q349.094 1010.17 350.899 1013.74 Q352.728 1017.28 356.339 1017.28 Q359.973 1017.28 361.779 1013.74 Q363.608 1010.17 363.608 1003.07 Q363.608 995.937 361.779 992.396 Q359.973 988.831 356.339 988.831 M356.339 985.127 Q362.149 985.127 365.205 989.734 Q368.284 994.317 368.284 1003.07 Q368.284 1011.79 365.205 1016.4 Q362.149 1020.98 356.339 1020.98 Q350.529 1020.98 347.45 1016.4 Q344.395 1011.79 344.395 1003.07 Q344.395 994.317 347.45 989.734 Q350.529 985.127 356.339 985.127 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip990)\" d=\"M286.062 727.943 L304.418 727.943 L304.418 731.878 L290.344 731.878 L290.344 740.351 Q291.363 740.003 292.381 739.841 Q293.4 739.656 294.418 739.656 Q300.205 739.656 303.585 742.827 Q306.964 745.999 306.964 751.415 Q306.964 756.994 303.492 760.096 Q300.02 763.174 293.701 763.174 Q291.525 763.174 289.256 762.804 Q287.011 762.434 284.603 761.693 L284.603 756.994 Q286.687 758.128 288.909 758.684 Q291.131 759.239 293.608 759.239 Q297.613 759.239 299.951 757.133 Q302.288 755.026 302.288 751.415 Q302.288 747.804 299.951 745.698 Q297.613 743.591 293.608 743.591 Q291.733 743.591 289.858 744.008 Q288.006 744.425 286.062 745.304 L286.062 727.943 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip990)\" d=\"M326.177 731.022 Q322.566 731.022 320.737 734.587 Q318.932 738.128 318.932 745.258 Q318.932 752.364 320.737 755.929 Q322.566 759.471 326.177 759.471 Q329.811 759.471 331.617 755.929 Q333.446 752.364 333.446 745.258 Q333.446 738.128 331.617 734.587 Q329.811 731.022 326.177 731.022 M326.177 727.318 Q331.987 727.318 335.043 731.925 Q338.122 736.508 338.122 745.258 Q338.122 753.985 335.043 758.591 Q331.987 763.174 326.177 763.174 Q320.367 763.174 317.288 758.591 Q314.233 753.985 314.233 745.258 Q314.233 736.508 317.288 731.925 Q320.367 727.318 326.177 727.318 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip990)\" d=\"M356.339 731.022 Q352.728 731.022 350.899 734.587 Q349.094 738.128 349.094 745.258 Q349.094 752.364 350.899 755.929 Q352.728 759.471 356.339 759.471 Q359.973 759.471 361.779 755.929 Q363.608 752.364 363.608 745.258 Q363.608 738.128 361.779 734.587 Q359.973 731.022 356.339 731.022 M356.339 727.318 Q362.149 727.318 365.205 731.925 Q368.284 736.508 368.284 745.258 Q368.284 753.985 365.205 758.591 Q362.149 763.174 356.339 763.174 Q350.529 763.174 347.45 758.591 Q344.395 753.985 344.395 745.258 Q344.395 736.508 347.45 731.925 Q350.529 727.318 356.339 727.318 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip990)\" d=\"M284.835 470.134 L307.057 470.134 L307.057 472.125 L294.511 504.694 L289.627 504.694 L301.432 474.069 L284.835 474.069 L284.835 470.134 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip990)\" d=\"M316.224 470.134 L334.58 470.134 L334.58 474.069 L320.506 474.069 L320.506 482.542 Q321.524 482.194 322.543 482.032 Q323.562 481.847 324.58 481.847 Q330.367 481.847 333.747 485.019 Q337.126 488.19 337.126 493.606 Q337.126 499.185 333.654 502.287 Q330.182 505.366 323.862 505.366 Q321.687 505.366 319.418 504.995 Q317.173 504.625 314.765 503.884 L314.765 499.185 Q316.849 500.319 319.071 500.875 Q321.293 501.43 323.77 501.43 Q327.774 501.43 330.112 499.324 Q332.45 497.218 332.45 493.606 Q332.45 489.995 330.112 487.889 Q327.774 485.782 323.77 485.782 Q321.895 485.782 320.02 486.199 Q318.168 486.616 316.224 487.495 L316.224 470.134 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip990)\" d=\"M356.339 473.213 Q352.728 473.213 350.899 476.778 Q349.094 480.319 349.094 487.449 Q349.094 494.556 350.899 498.12 Q352.728 501.662 356.339 501.662 Q359.973 501.662 361.779 498.12 Q363.608 494.556 363.608 487.449 Q363.608 480.319 361.779 476.778 Q359.973 473.213 356.339 473.213 M356.339 469.509 Q362.149 469.509 365.205 474.116 Q368.284 478.699 368.284 487.449 Q368.284 496.176 365.205 500.782 Q362.149 505.366 356.339 505.366 Q350.529 505.366 347.45 500.782 Q344.395 496.176 344.395 487.449 Q344.395 478.699 347.45 474.116 Q350.529 469.509 356.339 469.509 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip990)\" d=\"M256.664 242.95 L264.303 242.95 L264.303 216.585 L255.992 218.251 L255.992 213.992 L264.256 212.325 L268.932 212.325 L268.932 242.95 L276.571 242.95 L276.571 246.885 L256.664 246.885 L256.664 242.95 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip990)\" d=\"M296.015 215.404 Q292.404 215.404 290.576 218.969 Q288.77 222.511 288.77 229.64 Q288.77 236.747 290.576 240.311 Q292.404 243.853 296.015 243.853 Q299.65 243.853 301.455 240.311 Q303.284 236.747 303.284 229.64 Q303.284 222.511 301.455 218.969 Q299.65 215.404 296.015 215.404 M296.015 211.7 Q301.826 211.7 304.881 216.307 Q307.96 220.89 307.96 229.64 Q307.96 238.367 304.881 242.973 Q301.826 247.557 296.015 247.557 Q290.205 247.557 287.127 242.973 Q284.071 238.367 284.071 229.64 Q284.071 220.89 287.127 216.307 Q290.205 211.7 296.015 211.7 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip990)\" d=\"M326.177 215.404 Q322.566 215.404 320.737 218.969 Q318.932 222.511 318.932 229.64 Q318.932 236.747 320.737 240.311 Q322.566 243.853 326.177 243.853 Q329.811 243.853 331.617 240.311 Q333.446 236.747 333.446 229.64 Q333.446 222.511 331.617 218.969 Q329.811 215.404 326.177 215.404 M326.177 211.7 Q331.987 211.7 335.043 216.307 Q338.122 220.89 338.122 229.64 Q338.122 238.367 335.043 242.973 Q331.987 247.557 326.177 247.557 Q320.367 247.557 317.288 242.973 Q314.233 238.367 314.233 229.64 Q314.233 220.89 317.288 216.307 Q320.367 211.7 326.177 211.7 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip990)\" d=\"M356.339 215.404 Q352.728 215.404 350.899 218.969 Q349.094 222.511 349.094 229.64 Q349.094 236.747 350.899 240.311 Q352.728 243.853 356.339 243.853 Q359.973 243.853 361.779 240.311 Q363.608 236.747 363.608 229.64 Q363.608 222.511 361.779 218.969 Q359.973 215.404 356.339 215.404 M356.339 211.7 Q362.149 211.7 365.205 216.307 Q368.284 220.89 368.284 229.64 Q368.284 238.367 365.205 242.973 Q362.149 247.557 356.339 247.557 Q350.529 247.557 347.45 242.973 Q344.395 238.367 344.395 229.64 Q344.395 220.89 347.45 216.307 Q350.529 211.7 356.339 211.7 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip990)\" d=\"M184.22 784.801 L205.736 784.801 L205.736 790.657 L184.411 790.657 Q179.351 790.657 176.836 792.631 Q174.322 794.604 174.322 798.551 Q174.322 803.293 177.345 806.03 Q180.369 808.768 185.589 808.768 L205.736 808.768 L205.736 814.656 L170.088 814.656 L170.088 808.768 L175.627 808.768 Q172.412 806.667 170.821 803.834 Q169.229 800.97 169.229 797.246 Q169.229 791.103 173.049 787.952 Q176.836 784.801 184.22 784.801 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip990)\" d=\"M174.194 759.306 Q174.194 764.017 177.886 766.754 Q181.547 769.491 187.944 769.491 Q194.342 769.491 198.034 766.786 Q201.694 764.049 201.694 759.306 Q201.694 754.627 198.002 751.89 Q194.31 749.153 187.944 749.153 Q181.61 749.153 177.918 751.89 Q174.194 754.627 174.194 759.306 M169.229 759.306 Q169.229 751.667 174.194 747.307 Q179.16 742.946 187.944 742.946 Q196.697 742.946 201.694 747.307 Q206.659 751.667 206.659 759.306 Q206.659 766.977 201.694 771.337 Q196.697 775.666 187.944 775.666 Q179.16 775.666 174.194 771.337 Q169.229 766.977 169.229 759.306 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip990)\" d=\"M175.563 712.582 Q174.99 713.569 174.735 714.746 Q174.449 715.892 174.449 717.293 Q174.449 722.258 177.696 724.931 Q180.91 727.573 186.958 727.573 L205.736 727.573 L205.736 733.461 L170.088 733.461 L170.088 727.573 L175.627 727.573 Q172.38 725.727 170.821 722.767 Q169.229 719.807 169.229 715.574 Q169.229 714.969 169.325 714.237 Q169.388 713.505 169.547 712.614 L175.563 712.582 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip990)\" d=\"M176.932 679.83 Q172.985 677.634 171.107 674.579 Q169.229 671.523 169.229 667.385 Q169.229 661.815 173.144 658.792 Q177.027 655.768 184.22 655.768 L205.736 655.768 L205.736 661.656 L184.411 661.656 Q179.287 661.656 176.804 663.47 Q174.322 665.285 174.322 669.009 Q174.322 673.56 177.345 676.202 Q180.369 678.844 185.589 678.844 L205.736 678.844 L205.736 684.732 L184.411 684.732 Q179.255 684.732 176.804 686.546 Q174.322 688.36 174.322 692.148 Q174.322 696.636 177.377 699.278 Q180.401 701.919 185.589 701.919 L205.736 701.919 L205.736 707.808 L170.088 707.808 L170.088 701.919 L175.627 701.919 Q172.348 699.914 170.789 697.113 Q169.229 694.312 169.229 690.461 Q169.229 686.578 171.202 683.873 Q173.176 681.135 176.932 679.83 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><polyline clip-path=\"url(#clip992)\" style=\"stroke:#e26f46; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" stroke-dasharray=\"16, 10\" points=\"-1402.46,229.605 4017.76,229.605 \"/>\n<polyline clip-path=\"url(#clip992)\" style=\"stroke:#009af9; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"455.418,1250.53 455.986,1250.45 456.554,1250.31 457.123,1250.09 457.691,1249.81 458.259,1248.44 458.828,1248.08 459.396,1247.63 459.964,1247.11 460.533,1246.53 461.101,1245.87 461.669,1245.14 462.238,1244.32 462.806,1243.4 463.375,1242.41 463.943,1241.3 464.511,1240.12 465.08,1238.83 465.648,1236.38 466.216,1234.85 466.785,1233.2 467.353,1231.44 467.921,1228.52 468.49,1225.48 469.058,1222.3 469.626,1218.95 470.195,1213.42 470.763,1208.78 471.331,1206.04 471.9,1203.15 472.468,1200.16 473.036,1196.96 473.605,1193.56 474.173,1190.02 474.741,1185.19 475.31,1180.13 475.878,1175.83 476.446,1169.26 477.015,1163.49 477.583,1156.55 478.152,1149.4 478.72,1144.07 479.288,1137.45 479.857,1130.64 480.425,1124.53 480.993,1118.24 481.562,1111.89 482.13,1105.23 482.698,1097.38 483.267,1090.33 483.835,1083.05 484.403,1075.58 484.972,1065.79 485.54,1056.9 486.108,1047.85 486.677,1038.58 487.245,1026.13 487.813,1015.69 488.382,1003.04 488.95,994.681 489.518,984.955 490.087,974.206 490.655,965.537 491.224,953.545 491.792,944.785 492.36,932.978 492.929,921.942 493.497,912.002 494.065,902.004 494.634,891.833 495.202,879.487 495.77,870.458 496.339,860.284 496.907,850.009 497.475,840.756 498.044,827.495 498.612,817.254 499.18,808.098 499.749,796.911 500.317,784.627 500.885,774.689 501.454,764.761 502.022,753.902 502.59,743.985 503.159,735.267 503.727,725.55 504.295,715.976 504.864,705.379 505.432,694.781 506.001,685.418 506.569,676.171 507.137,664.034 507.706,656.082 508.274,646.294 508.842,636.522 509.411,625.743 509.979,618.243 510.547,608.989 511.116,601.886 511.684,592.678 512.252,583.724 512.821,574.874 513.389,568.305 513.957,561.706 514.526,555.176 515.094,545.527 515.662,537.426 516.231,531.519 516.799,523.456 517.367,516.649 517.936,510.916 518.504,503.417 519.072,497.031 519.641,489.75 520.209,483.596 520.778,476.629 521.346,471.898 521.914,467.302 522.483,462.58 523.051,460.024 523.619,455.095 524.188,449.237 524.756,444.537 525.324,438.145 525.893,433.667 526.461,428.297 527.029,423.082 527.598,417.03 528.166,413.129 528.734,408.414 529.303,401.552 529.871,396.914 530.439,391.569 531.008,386.326 531.576,383.605 532.144,379.615 532.713,376.732 533.281,372.866 533.85,367.07 534.418,364.59 534.986,360.139 535.555,358.949 536.123,356.586 536.691,352.243 537.26,346.887 537.828,344.016 538.396,339.943 538.965,337.177 539.533,334.353 540.101,330.556 540.67,329.212 541.238,324.822 541.806,322.515 542.375,320.358 542.943,320.304 543.511,315.724 544.08,315.628 544.648,315.444 545.216,311.149 545.785,311.192 546.353,308.795 546.921,306.436 547.49,303.218 548.058,301.311 548.627,299.255 549.195,298.548 549.763,295.592 550.332,296.031 550.9,295.315 551.468,295.719 552.037,292.676 552.605,288.699 553.173,286.069 553.742,284.578 554.31,285.277 554.878,283.794 555.447,279.162 556.015,276.92 556.583,275.816 557.152,275.637 557.72,276.708 558.288,275.432 558.857,275.612 559.425,275.397 559.993,274.03 560.562,273.908 561.13,273.809 561.698,273.536 562.267,274.354 562.835,270.864 563.404,269.554 563.972,269.755 564.54,269.419 565.109,268.232 565.677,268.015 566.245,269.067 566.814,268.54 567.382,269.375 567.95,267.711 568.519,267.406 569.087,266.917 569.655,265.462 570.224,261.921 570.792,260.624 571.36,258.358 571.929,256.367 572.497,258.617 573.065,259.887 573.634,262.045 574.202,260.64 574.77,260.412 575.339,259.087 575.907,261.023 576.476,260.728 577.044,260.395 577.612,257.9 578.181,253.665 578.749,251.617 579.317,252.808 579.886,250.805 580.454,249.896 581.022,248.12 581.591,246.133 582.159,245.689 582.727,249.382 583.296,249.839 583.864,249.93 584.432,249.009 585.001,250.13 585.569,250.209 586.137,249.253 586.706,248.476 587.274,248.752 587.842,250.715 588.411,251.789 588.979,250.581 589.547,251.632 590.116,251.286 590.684,251.113 591.253,252.976 591.821,252.828 592.389,252.414 592.958,250.917 593.526,250.523 594.094,250.61 594.663,251.262 595.231,251.119 595.799,246.664 596.368,245.541 596.936,245.588 597.504,247.856 598.073,247.755 598.641,247.519 599.209,250.229 599.778,247.887 600.346,249.806 600.914,249.443 601.483,248.997 602.051,248.747 602.619,248.438 603.188,248.087 603.756,248.892 604.325,248.548 604.893,246.078 605.461,246.948 606.03,245.398 606.598,243.951 607.166,243.929 607.735,244.99 608.303,243.683 608.871,242.418 609.44,242.438 610.008,241.389 610.576,240.474 611.145,240.535 611.713,240.61 612.281,241.47 612.85,240.495 613.418,239.292 613.986,240.185 614.555,239.169 615.123,240.679 615.691,241.53 616.26,241.55 616.828,243.51 617.396,241.081 617.965,238.942 618.533,237.15 619.102,238.207 619.67,239.378 620.238,237.277 620.807,237.208 621.375,236.287 621.943,237.339 622.512,238.479 623.08,238.45 623.648,237.309 624.217,238.422 624.785,238.423 625.353,235.301 625.922,234.603 626.49,233.694 627.058,232.794 627.627,230.888 628.195,227.256 628.763,228.11 629.332,228.914 629.9,228.667 630.468,231.563 631.037,230.968 631.605,232.342 632.173,230.63 632.742,226.925 633.31,228.746 633.879,231.353 634.447,230.621 635.015,230.403 635.584,229.99 636.152,228.705 636.72,230.658 637.289,231.22 637.857,230.641 638.425,232.395 638.994,234.018 639.562,233.548 640.13,232.914 640.699,232.117 641.267,237.826 641.835,239.03 642.404,239.127 642.972,237.015 643.54,238.122 644.109,240.387 644.677,239.525 645.245,237.401 645.814,238.549 646.382,240.501 646.951,242.398 647.519,240.109 648.087,236.885 648.656,236.914 649.224,236.009 649.792,235.857 650.361,238.057 650.929,238.07 651.497,240.862 652.066,241.632 652.634,241.067 653.202,239.773 653.771,239.709 654.339,240.553 654.907,240.171 655.476,240.899 656.044,241.516 656.612,244.083 657.181,242.416 657.749,242.764 658.317,244.272 658.886,244.545 659.454,242.716 660.022,240.101 660.591,240.497 661.159,236.801 661.728,237.688 662.296,236.355 662.864,234.209 663.433,232.158 664.001,233.042 664.569,235.227 665.138,234.2 665.706,234.08 666.274,231.079 666.843,229.196 667.411,229.421 667.979,228.641 668.548,230.171 669.116,230.488 669.684,229.897 670.253,230.388 670.821,230.736 671.389,229.032 671.958,230.377 672.526,229.739 673.094,230.085 673.663,230.405 674.231,232.71 674.799,233.779 675.368,235.968 675.936,236.759 676.505,234.811 677.073,234.714 677.641,232.839 678.21,230.931 678.778,231.353 679.346,231.574 679.915,232.72 680.483,233.954 681.051,233.959 681.62,233.963 682.188,234.123 682.756,234.95 683.325,233.904 683.893,234.007 684.461,234.133 685.03,233.031 685.598,229.979 686.166,231.33 686.735,232.827 687.303,232.205 687.871,232.39 688.44,231.663 689.008,234.565 689.577,234.68 690.145,234.59 690.713,233.494 691.282,235.405 691.85,235.287 692.418,234.99 692.987,234.821 693.555,233.429 694.123,232.296 694.692,232.442 695.26,230.641 695.828,229.862 696.397,230.236 696.965,231.398 697.533,230.223 698.102,229.474 698.67,227.571 699.238,227.162 699.807,225.746 700.375,226.563 700.943,227.096 701.512,229.498 702.08,229.822 702.648,231.255 703.217,231.476 703.785,230.507 704.354,230.693 704.922,226.665 705.49,227.159 706.059,228.41 706.627,230.782 707.195,229.837 707.764,229.021 708.332,229.352 708.9,229.954 709.469,230.456 710.037,230.727 710.605,227.797 711.174,228.35 711.742,226.706 712.31,226.192 712.879,227.721 713.447,227.236 714.015,228.77 714.584,229.297 715.152,229.586 715.72,230.813 716.289,228.764 716.857,231.264 717.425,231.487 717.994,232.574 718.562,232.53 719.131,234.704 719.699,234.606 720.267,236.529 720.836,237.406 721.404,238.204 721.972,238.98 722.541,237.817 723.109,238.457 723.677,237.244 724.246,236.946 724.814,237.723 725.382,237.37 725.951,237.27 726.519,237.01 727.087,236.948 727.656,235.437 728.224,234.309 728.792,234.036 729.361,233.021 729.929,234.836 730.497,235.938 731.066,234.726 731.634,235.554 732.203,237.501 732.771,235.913 733.339,234.534 733.908,236.521 734.476,234.944 735.044,234.673 735.613,235.665 736.181,234.289 736.749,234.212 737.318,234.921 737.886,234.581 738.454,234.258 739.023,234.111 739.591,233.061 740.159,229.664 740.728,228.767 741.296,229.894 741.864,229.944 742.433,230.231 743.001,230.414 743.569,228.395 744.138,230.638 744.706,228.616 745.274,228.947 745.843,228.055 746.411,225.234 746.98,224.637 747.548,223.202 748.116,222.505 748.685,221.423 749.253,221.088 749.821,222.801 750.39,224.397 750.958,224.042 751.526,222.608 752.095,224.291 752.663,224.671 753.231,223.038 753.8,222.519 754.368,223.172 754.936,222.769 755.505,223.34 756.073,223.844 756.641,224.356 757.21,226.122 757.778,226.919 758.346,226.297 758.915,224.836 759.483,226.443 760.052,227.193 760.62,230.838 761.188,232.197 761.757,233.326 762.325,234.268 762.893,236.123 763.462,237.956 764.03,239.773 764.598,236.295 765.167,234.122 765.735,235.281 766.303,239.324 766.872,241.002 767.44,240.454 768.008,240.178 768.577,238.8 769.145,238.403 769.713,236.9 770.282,236.426 770.85,233.961 771.418,232.877 771.987,231.83 772.555,229.918 773.123,230.01 773.692,230.181 774.26,229.409 774.829,227.54 775.397,227.156 775.965,227.676 776.534,227.95 777.102,225.17 777.67,222.609 778.239,224.472 778.807,226.076 779.375,226.464 779.944,229.984 780.512,229.146 781.08,228.366 781.649,230.859 782.217,232.217 782.785,234.332 783.354,235.372 783.922,233.982 784.49,234.76 785.059,233.398 785.627,231.465 786.195,233.463 786.764,232.463 787.332,232.69 787.9,233.693 788.469,233.698 789.037,233.641 789.606,234.688 790.174,234.439 790.742,237.346 791.311,237.101 791.879,234.53 792.447,236.743 793.016,235.367 793.584,236.371 794.152,234.016 794.721,231.729 795.289,230.689 795.857,230.726 796.426,229.775 796.994,230.941 797.562,232.002 798.131,232.084 798.699,233.902 799.267,234.786 799.836,234.272 800.404,234.013 800.972,234.798 801.541,233.501 802.109,234.448 802.678,235.24 803.246,238.053 803.814,236.35 804.383,234.866 804.951,233.534 805.519,233.202 806.088,235.058 806.656,232.553 807.224,233.423 807.793,232.259 808.361,234.118 808.929,233.84 809.498,234.614 810.066,234.35 810.634,232.924 811.203,232.689 811.771,233.578 812.339,235.461 812.908,233.819 813.476,234.504 814.044,236.265 814.613,235.798 815.181,233.388 815.749,234.062 816.318,233.803 816.886,232.561 817.455,232.424 818.023,232.184 818.591,230.051 819.16,227.694 819.728,227.613 820.296,227.734 820.865,228.762 821.433,230.841 822.001,227.546 822.57,226.701 823.138,228.979 823.706,232.134 824.275,231.22 824.843,229.827 825.411,230.864 825.98,230.866 826.548,229.879 827.116,229.845 827.685,227.817 828.253,226.027 828.821,226.232 829.39,225.658 829.958,223.668 830.526,222.122 831.095,222.585 831.663,221.127 832.232,222.572 832.8,222.221 833.368,223.03 833.937,221.431 834.505,222.114 835.073,224.843 835.642,226.363 836.21,227.99 836.778,228.341 837.347,227.557 837.915,227.802 838.483,229.073 839.052,230.262 839.62,231.544 840.188,230.727 840.757,229.717 841.325,226.654 841.893,226.908 842.462,226.913 843.03,225.082 843.598,226.583 844.167,227.849 844.735,228.035 845.304,227.311 845.872,228.449 846.44,229.783 847.009,229.952 847.577,231.162 848.145,231.473 848.714,230.523 849.282,230.724 849.85,231.824 850.419,233.803 850.987,234.534 851.555,235.259 852.124,237.009 852.692,234.433 853.26,236.288 853.829,235.759 854.397,234.295 854.965,233.022 855.534,233.951 856.102,232.744 856.67,232.452 857.239,232.245 857.807,232.307 858.375,232.061 858.944,233.985 859.512,235.643 860.081,235.201 860.649,232.855 861.217,234.34 861.786,233.919 862.354,234.499 862.922,230.047 863.491,229.1 864.059,228.187 864.627,228.324 865.196,228.35 865.764,229.338 866.332,230.258 866.901,229.158 867.469,230.08 868.037,229.299 868.606,228.327 869.174,227.324 869.742,226.437 870.311,226.584 870.879,228.676 871.447,231.868 872.016,230.703 872.584,230.544 873.152,228.462 873.721,228.591 874.289,228.863 874.858,229.968 875.426,230.25 875.994,229.353 876.563,230.489 877.131,229.449 877.699,230.494 878.268,230.444 878.836,231.696 879.404,230.644 879.973,228.811 880.541,227.976 881.109,229.13 881.678,229.153 882.246,228.249 882.814,230.498 883.383,228.387 883.951,227.384 884.519,226.649 885.088,225.791 885.656,226.3 886.224,225.923 886.793,226.359 887.361,228.746 887.93,228.969 888.498,228.171 889.066,228.259 889.635,227.213 890.203,227.322 890.771,230.651 891.34,229.672 891.908,228.526 892.476,227.396 893.045,227.686 893.613,226.825 894.181,227.269 894.75,227.64 895.318,226.812 895.886,226.967 896.455,228.134 897.023,229.429 897.591,228.464 898.16,225.433 898.728,223.79 899.296,222.406 899.865,224.091 900.433,222.252 901.001,225.911 901.57,226.295 902.138,227.709 902.707,228.114 903.275,226.391 903.843,227.975 904.412,227.16 904.98,228.687 905.548,229.097 906.117,230.325 906.685,229.216 907.253,230.254 907.822,229.174 908.39,230.345 908.958,231.484 909.527,230.344 910.095,232.495 910.663,231.457 911.232,232.582 911.8,234.526 912.368,235.342 912.937,237.305 913.505,236.098 914.073,235.923 914.642,234.698 915.21,234.213 915.779,232.941 916.347,233.932 916.915,234.8 917.484,236.72 918.052,236.285 918.62,236.783 919.189,237.314 919.757,236.639 920.325,236.063 920.894,236.527 921.462,235.295 922.03,234.203 922.599,232.819 923.167,233.849 923.735,235.601 924.304,235.26 924.872,233.803 925.44,234.516 926.009,233.277 926.577,231.788 927.145,231.539 927.714,231.634 928.282,229.438 928.85,226.292 929.419,225.443 929.987,225.963 930.556,225.316 931.124,227.731 931.692,227.785 932.261,226.215 932.829,227.646 933.397,226.651 933.966,225.829 934.534,227.103 935.102,226.208 935.671,227.622 936.239,228.899 936.807,227.844 937.376,227.055 937.944,228.355 938.512,227.54 939.081,226.807 939.649,228.089 940.217,227.389 940.786,228.659 941.354,229.772 941.922,229.888 942.491,230.042 943.059,228.979 943.627,230.153 944.196,231.185 944.764,231.05 945.333,228.939 945.901,230.001 946.469,230.143 947.038,230.299 947.606,229.21 948.174,232.587 948.743,232.523 949.311,231.319 949.879,233.494 950.448,233.324 951.016,235.349 951.584,234.854 952.153,233.327 952.721,234.961 953.289,235.565 953.858,234.223 954.426,232.778 954.994,233.607 955.563,232.392 956.131,229.382 956.699,228.467 957.268,230.692 957.836,231.594 958.405,231.517 958.973,232.465 959.541,233.21 960.11,234.941 960.678,233.414 961.246,233.03 961.815,231.557 962.383,231.332 962.951,232.161 963.52,234.137 964.088,232.779 964.656,232.492 965.225,232.361 965.793,233.101 966.361,234.085 966.93,232.809 967.498,231.528 968.066,233.281 968.635,233.112 969.203,231.766 969.771,232.618 970.34,233.493 970.908,232.119 971.476,230.937 972.045,230.863 972.613,231.597 973.182,229.307 973.75,231.191 974.318,229.866 974.887,228.594 975.455,228.666 976.023,226.454 976.592,227.529 977.16,227.72 977.728,228.768 978.297,226.813 978.865,227.751 979.433,225.825 980.002,227.178 980.57,227.252 981.138,225.273 981.707,225.62 982.275,226.053 982.843,228.271 983.412,229.469 983.98,226.18 984.548,226.506 985.117,226.399 985.685,225.559 986.253,226.96 986.822,227.005 987.39,228.284 987.959,229.252 988.527,229.211 989.095,232.416 989.664,231.458 990.232,227.418 990.8,229.785 991.369,229.775 991.937,232.888 992.505,231.657 993.074,232.445 993.642,234.366 994.21,233.053 994.779,230.564 995.347,230.481 995.915,232.495 996.484,232.311 997.052,233.173 997.62,232.942 998.189,232.483 998.757,231.284 999.325,232.173 999.894,230.75 1000.46,229.407 1001.03,229.423 1001.6,230.349 1002.17,230.19 1002.74,232.245 1003.3,232.999 1003.87,232.768 1004.44,232.367 1005.01,233.042 1005.58,231.823 1006.15,231.632 1006.71,231.551 1007.28,230.438 1007.85,229.42 1008.42,229.369 1008.99,228.138 1009.56,230.271 1010.12,230.052 1010.69,230.094 1011.26,229.899 1011.83,231.892 1012.4,231.849 1012.97,232.638 1013.53,230.347 1014.1,231.398 1014.67,231.236 1015.24,230.069 1015.81,228.922 1016.38,228.917 1016.94,228.872 1017.51,226.844 1018.08,224.852 1018.65,224.156 1019.22,223.669 1019.79,221.857 1020.35,223.211 1020.92,223.583 1021.49,228.053 1022.06,227.99 1022.63,228.111 1023.2,227.972 1023.76,229.121 1024.33,229.216 1024.9,228.125 1025.47,229.146 1026.04,229.016 1026.61,229.089 1027.17,226.061 1027.74,226.417 1028.31,229.555 1028.88,228.262 1029.45,228.194 1030.02,230.095 1030.58,231.926 1031.15,230.83 1031.72,230.696 1032.29,229.445 1032.86,230.326 1033.43,228.205 1033.99,230.263 1034.56,232.299 1035.13,232.067 1035.7,231.839 1036.27,231.738 1036.84,233.593 1037.4,231.228 1037.97,230.075 1038.54,228.898 1039.11,229.88 1039.68,230.771 1040.25,230.643 1040.81,230.413 1041.38,230.27 1041.95,230.461 1042.52,231.462 1043.09,230.535 1043.66,231.333 1044.22,230.112 1044.79,231.367 1045.36,231.371 1045.93,229.04 1046.5,227.999 1047.07,226.117 1047.63,226.278 1048.2,226.603 1048.77,222.475 1049.34,223.044 1049.91,225.648 1050.48,223.957 1051.05,225.599 1051.61,227.075 1052.18,225.311 1052.75,223.627 1053.32,222.174 1053.89,223.787 1054.46,227.195 1055.02,227.942 1055.59,230.123 1056.16,230.955 1056.73,230.949 1057.3,230.703 1057.87,231.722 1058.43,230.554 1059,226.388 1059.57,227.677 1060.14,227.884 1060.71,228.101 1061.28,228.402 1061.84,228.374 1062.41,231.654 1062.98,231.676 1063.55,231.543 1064.12,231.661 1064.69,230.657 1065.25,232.635 1065.82,232.556 1066.39,232.429 1066.96,230.213 1067.53,229.141 1068.1,230.27 1068.66,232.428 1069.23,232.231 1069.8,229.769 1070.37,230.802 1070.94,230.666 1071.51,229.685 1072.07,228.753 1072.64,228.897 1073.21,228.886 1073.78,228.932 1074.35,230.945 1074.92,228.957 1075.48,227.015 1076.05,229.211 1076.62,231.284 1077.19,231.14 1077.76,231.063 1078.33,232.106 1078.89,230.961 1079.46,230.654 1080.03,230.597 1080.6,230.576 1081.17,231.617 1081.74,232.6 1082.3,234.706 1082.87,234.396 1083.44,234.012 1084.01,233.584 1084.58,233.692 1085.15,231.498 1085.71,231.483 1086.28,230.442 1086.85,230.258 1087.42,230.155 1087.99,228.816 1088.56,232.008 1089.12,231.647 1089.69,231.387 1090.26,231.216 1090.83,228.764 1091.4,228.784 1091.97,227.824 1092.53,229.04 1093.1,229.988 1093.67,228.036 1094.24,228.255 1094.81,228.452 1095.38,228.595 1095.94,228.7 1096.51,228.59 1097.08,228.634 1097.65,227.708 1098.22,224.735 1098.79,223.037 1099.35,224.609 1099.92,227.064 1100.49,224.313 1101.06,225.758 1101.63,226.121 1102.2,224.541 1102.76,225.955 1103.33,228.369 1103.9,226.505 1104.47,226.831 1105.04,226.195 1105.61,226.705 1106.17,228.011 1106.74,230.319 1107.31,231.16 1107.88,231.161 1108.45,231.122 1109.02,231.896 1109.58,230.749 1110.15,228.73 1110.72,228.914 1111.29,229.913 1111.86,230.92 1112.43,230.897 1112.99,231.912 1113.56,230.869 1114.13,228.889 1114.7,228.836 1115.27,227.861 1115.84,227.003 1116.4,226.33 1116.97,225.537 1117.54,226.737 1118.11,224.829 1118.68,225.199 1119.25,228.731 1119.81,229.877 1120.38,228.839 1120.95,228.93 1121.52,227.085 1122.09,226.301 1122.66,226.582 1123.23,227.024 1123.79,225.817 1124.36,227.171 1124.93,224.225 1125.5,225.777 1126.07,227.243 1126.64,226.524 1127.2,225.848 1127.77,225.156 1128.34,225.369 1128.91,223.693 1129.48,223.191 1130.05,222.842 1130.61,225.467 1131.18,223.727 1131.75,225.41 1132.32,224.916 1132.89,224.384 1133.46,226.899 1134.02,229.208 1134.59,230.416 1135.16,230.349 1135.73,230.471 1136.3,231.756 1136.87,230.804 1137.43,230.73 1138,230.684 1138.57,228.754 1139.14,228.959 1139.71,228.924 1140.28,230.087 1140.84,229.034 1141.41,231.119 1141.98,230.152 1142.55,231.241 1143.12,230.346 1143.69,233.538 1144.25,233.419 1144.82,233.17 1145.39,232.05 1145.96,231.93 1146.53,230.812 1147.1,229.783 1147.66,231.934 1148.23,233.105 1148.8,230.831 1149.37,228.828 1149.94,230.247 1150.51,228.292 1151.07,227.273 1151.64,226.684 1152.21,227.952 1152.78,228.159 1153.35,228.306 1153.92,227.633 1154.48,228.964 1155.05,229.001 1155.62,228.177 1156.19,230.289 1156.76,229.28 1157.33,229.719 1157.89,232.058 1158.46,234.246 1159.03,236.989 1159.6,236.644 1160.17,235.318 1160.74,235.095 1161.3,231.608 1161.87,232.802 1162.44,233.763 1163.01,234.494 1163.58,233.292 1164.15,233.17 1164.71,230.895 1165.28,232.098 1165.85,233.981 1166.42,234.817 1166.99,235.51 1167.56,235.322 1168.12,235.888 1168.69,236.3 1169.26,237.771 1169.83,237.215 1170.4,236.492 1170.97,236.966 1171.53,234.606 1172.1,233.242 1172.67,231.909 1173.24,231.784 1173.81,231.902 1174.38,230.859 1174.94,230.828 1175.51,230.774 1176.08,228.442 1176.65,228.684 1177.22,226.824 1177.79,225.849 1178.35,225.395 1178.92,226.75 1179.49,226.865 1180.06,226.046 1180.63,226.293 1181.2,227.235 1181.76,227.451 1182.33,227.652 1182.9,227.826 1183.47,227.206 1184.04,228.356 1184.61,230.456 1185.17,230.539 1185.74,229.461 1186.31,233.725 1186.88,233.541 1187.45,233.384 1188.02,232.164 1188.58,229.898 1189.15,228.969 1189.72,228.943 1190.29,227.839 1190.86,228.114 1191.43,229.189 1192,228.243 1192.56,228.279 1193.13,227.247 1193.7,228.789 1194.27,228.749 1194.84,228.861 1195.41,229.089 1195.97,232.26 1196.54,232.818 1197.11,232.488 1197.68,231.183 1198.25,232.234 1198.82,231.075 1199.38,232.101 1199.95,232.065 1200.52,231.831 1201.09,231.505 1201.66,231.522 1202.23,231.4 1202.79,231.344 1203.36,230.169 1203.93,230.119 1204.5,229.879 1205.07,228.872 1205.64,227.081 1206.2,228.514 1206.77,229.492 1207.34,228.849 1207.91,228.761 1208.48,229.966 1209.05,231.076 1209.61,233.005 1210.18,233.743 1210.75,235.672 1211.32,234.123 1211.89,233.939 1212.46,232.717 1213.02,232.435 1213.59,234.088 1214.16,233.672 1214.73,234.455 1215.3,233.934 1215.87,233.663 1216.43,234.222 1217,236.028 1217.57,235.459 1218.14,233.894 1218.71,233.608 1219.28,231.101 1219.84,229.888 1220.41,230.888 1220.98,230.811 1221.55,231.869 1222.12,230.599 1222.69,231.686 1223.25,230.442 1223.82,233.23 1224.39,232.764 1224.96,233.293 1225.53,231.809 1226.1,231.473 1226.66,231.201 1227.23,228.856 1227.8,227.665 1228.37,226.709 1228.94,226.932 1229.51,225.974 1230.07,225.9 1230.64,226.241 1231.21,227.341 1231.78,227.379 1232.35,226.469 1232.92,225.633 1233.48,227.889 1234.05,229.926 1234.62,228.726 1235.19,228.601 1235.76,231.403 1236.33,231.17 1236.89,231.052 1237.46,232.875 1238.03,230.312 1238.6,231.227 1239.17,231.053 1239.74,231.095 1240.3,228.906 1240.87,231.02 1241.44,230.72 1242.01,233.674 1242.58,233.299 1243.15,232.797 1243.71,232.467 1244.28,231.34 1244.85,231.249 1245.42,229.935 1245.99,228.794 1246.56,229.861 1247.12,229.788 1247.69,230.616 1248.26,230.511 1248.83,230.315 1249.4,230.381 1249.97,230.189 1250.53,230.031 1251.1,227.806 1251.67,227.71 1252.24,225.788 1252.81,226.168 1253.38,225.131 1253.94,223.21 1254.51,225.054 1255.08,225.37 1255.65,224.5 1256.22,225.895 1256.79,226.21 1257.35,228.257 1257.92,227.369 1258.49,227.566 1259.06,227.605 1259.63,227.483 1260.2,227.444 1260.76,226.47 1261.33,227.584 1261.9,229.73 1262.47,226.566 1263.04,226.616 1263.61,226.879 1264.18,228.219 1264.74,229.401 1265.31,228.224 1265.88,226.206 1266.45,227.636 1267.02,227.71 1267.59,227.745 1268.15,226.816 1268.72,226.144 1269.29,227.469 1269.86,226.69 1270.43,225.975 1271,226.275 1271.56,225.57 1272.13,228.221 1272.7,229.517 1273.27,229.436 1273.84,229.638 1274.41,229.656 1274.97,228.527 1275.54,228.437 1276.11,230.562 1276.68,228.515 1277.25,227.645 1277.82,226.813 1278.38,226.963 1278.95,227.104 1279.52,227.369 1280.09,226.269 1280.66,226.446 1281.23,227.598 1281.79,226.602 1282.36,229.041 1282.93,231.145 1283.5,230.964 1284.07,230.983 1284.64,229.884 1285.2,229.983 1285.77,228.94 1286.34,226.78 1286.91,229.179 1287.48,227.203 1288.05,228.646 1288.61,227.782 1289.18,229.074 1289.75,229.094 1290.32,224.961 1290.89,222.409 1291.46,224.142 1292.02,225.794 1292.59,226.193 1293.16,226.692 1293.73,224.192 1294.3,226.835 1294.87,230.292 1295.43,233.576 1296,234.67 1296.57,236.492 1297.14,235.868 1297.71,235.242 1298.28,235.788 1298.84,235.349 1299.41,233.996 1299.98,233.806 1300.55,232.665 1301.12,233.606 1301.69,232.067 1302.25,231.039 1302.82,233.09 1303.39,231.693 1303.96,232.588 1304.53,232.534 1305.1,230.282 1305.66,230.374 1306.23,230.368 1306.8,230.205 1307.37,230.063 1307.94,228.991 1308.51,229.253 1309.07,229.564 1309.64,229.386 1310.21,226.434 1310.78,226.66 1311.35,226.91 1311.92,226.285 1312.48,226.819 1313.05,227.341 1313.62,229.603 1314.19,227.704 1314.76,227.913 1315.33,228.094 1315.89,227.106 1316.46,226.5 1317.03,226.674 1317.6,227.898 1318.17,226.965 1318.74,229.023 1319.3,230.081 1319.87,228.06 1320.44,228.075 1321.01,227.068 1321.58,226.297 1322.15,226.697 1322.71,229.053 1323.28,228.95 1323.85,228.954 1324.42,228.917 1324.99,230.146 1325.56,227.226 1326.12,228.442 1326.69,228.395 1327.26,230.381 1327.83,233.414 1328.4,230.954 1328.97,231.054 1329.53,231.934 1330.1,232.848 1330.67,231.704 1331.24,234.566 1331.81,234.307 1332.38,234.286 1332.94,233.155 1333.51,230.782 1334.08,229.65 1334.65,227.562 1335.22,225.903 1335.79,224.182 1336.36,226.839 1336.92,230.266 1337.49,229.117 1338.06,227.104 1338.63,226.351 1339.2,225.585 1339.77,226.232 1340.33,227.505 1340.9,226.689 1341.47,227.086 1342.04,227.171 1342.61,226.422 1343.18,227.745 1343.74,226.058 1344.31,227.463 1344.88,228.809 1345.45,230.012 1346.02,232.269 1346.59,232.359 1347.15,232.12 1347.72,233.256 1348.29,232.172 1348.86,232.076 1349.43,232.127 1350,230.21 1350.56,230.236 1351.13,231.347 1351.7,231.226 1352.27,231.22 1352.84,229.97 1353.41,229.956 1353.97,229.808 1354.54,229.816 1355.11,228.684 1355.68,228.66 1356.25,228.692 1356.82,228.831 1357.38,231.215 1357.95,230.026 1358.52,228.031 1359.09,227.086 1359.66,227.406 1360.23,228.492 1360.79,228.624 1361.36,231.014 1361.93,233.012 1362.5,232.914 1363.07,234.636 1363.64,235.542 1364.2,233.013 1364.77,231.47 1365.34,229.339 1365.91,228.376 1366.48,226.35 1367.05,226.705 1367.61,227.118 1368.18,226.199 1368.75,227.525 1369.32,228.967 1369.89,230.057 1370.46,232.166 1371.02,230.12 1371.59,229.062 1372.16,231.392 1372.73,233.252 1373.3,234.046 1373.87,235.036 1374.43,234.54 1375,233.193 1375.57,231.042 1376.14,231.157 1376.71,229.111 1377.28,229.279 1377.84,229.26 1378.41,229.302 1378.98,229.379 1379.55,227.634 1380.12,226.818 1380.69,226.96 1381.25,227.16 1381.82,227.326 1382.39,229.724 1382.96,230.941 1383.53,229.797 1384.1,229.894 1384.66,230.943 1385.23,230.605 1385.8,230.789 1386.37,231.904 1386.94,231.824 1387.51,232.818 1388.07,231.596 1388.64,229.595 1389.21,229.701 1389.78,231.487 1390.35,231.302 1390.92,231.182 1391.48,233.053 1392.05,233.443 1392.62,233.017 1393.19,231.732 1393.76,230.517 1394.33,231.458 1394.89,233.484 1395.46,233.334 1396.03,233.976 1396.6,233.656 1397.17,234.404 1397.74,232.953 1398.3,234.679 1398.87,232.926 1399.44,232.731 1400.01,233.575 1400.58,231.082 1401.15,231.896 1401.71,233.833 1402.28,234.322 1402.85,234.861 1403.42,235.476 1403.99,233.607 1404.56,234.344 1405.13,235.038 1405.69,234.524 1406.26,234.023 1406.83,233.786 1407.4,234.572 1407.97,235.005 1408.54,233.377 1409.1,231.967 1409.67,231.521 1410.24,230.117 1410.81,227.799 1411.38,228.553 1411.95,229.615 1412.51,229.53 1413.08,228.364 1413.65,228.363 1414.22,226.272 1414.79,227.26 1415.36,226.113 1415.92,226.08 1416.49,225.355 1417.06,225.524 1417.63,226.749 1418.2,227.008 1418.77,227.908 1419.33,229.005 1419.9,230.941 1420.47,230.686 1421.04,230.471 1421.61,230.448 1422.18,229.305 1422.74,227.365 1423.31,228.394 1423.88,226.518 1424.45,228.53 1425.02,230.786 1425.59,230.447 1426.15,229.233 1426.72,226.003 1427.29,226.061 1427.86,227.278 1428.43,229.382 1429,228.462 1429.56,225.482 1430.13,224.702 1430.7,223.957 1431.27,225.281 1431.84,226.302 1432.41,225.327 1432.97,225.763 1433.54,227.095 1434.11,228.349 1434.68,231.506 1435.25,231.507 1435.82,231.6 1436.38,232.599 1436.95,230.988 1437.52,231.968 1438.09,231.91 1438.66,231.652 1439.23,231.606 1439.79,229.445 1440.36,229.315 1440.93,230.122 1441.5,226.896 1442.07,227.093 1442.64,229.128 1443.2,230.403 1443.77,229.044 1444.34,228.988 1444.91,227.84 1445.48,226.797 1446.05,228.945 1446.61,227.145 1447.18,228.237 1447.75,229.251 1448.32,230.155 1448.89,232.163 1449.46,231.861 1450.02,231.434 1450.59,230.321 1451.16,230.438 1451.73,229.12 1452.3,228.927 1452.87,224.981 1453.43,224.03 1454,225.321 1454.57,223.568 1455.14,224.156 1455.71,223.566 1456.28,221.9 1456.84,221.376 1457.41,223.014 1457.98,222.307 1458.55,223.085 1459.12,223.527 1459.69,222.99 1460.25,229.634 1460.82,229.572 1461.39,231.781 1461.96,231.788 1462.53,232.64 1463.1,233.62 1463.66,234.52 1464.23,231.341 1464.8,233.189 1465.37,230.806 1465.94,231.489 1466.51,231.237 1467.07,229.092 1467.64,229.05 1468.21,231.006 1468.78,229.764 1469.35,229.595 1469.92,230.544 1470.48,229.734 1471.05,232.611 1471.62,233.227 1472.19,232.894 1472.76,231.535 1473.33,231.338 1473.89,230.117 1474.46,230.085 1475.03,228.981 1475.6,226.974 1476.17,228.256 1476.74,228.322 1477.31,228.268 1477.87,228.068 1478.44,226.214 1479.01,229.423 1479.58,232.624 1480.15,232.478 1480.72,232.293 1481.28,231.134 1481.85,229.094 1482.42,229.249 1482.99,228.231 1483.56,229.353 1484.13,230.572 1484.69,229.414 1485.26,228.458 1485.83,228.432 1486.4,227.7 1486.97,228.776 1487.54,230.982 1488.1,230.838 1488.67,229.925 1489.24,232.101 1489.81,231.834 1490.38,232.61 1490.95,231.419 1491.51,231.534 1492.08,232.356 1492.65,234.075 1493.22,233.67 1493.79,234.317 1494.36,231.816 1494.92,232.538 1495.49,233.214 1496.06,232.679 1496.63,233.12 1497.2,232.664 1497.77,231.453 1498.33,234.371 1498.9,232.907 1499.47,231.471 1500.04,231.297 1500.61,232.291 1501.18,231.117 1501.74,229.974 1502.31,228.692 1502.88,225.547 1503.45,225.92 1504.02,225.101 1504.59,222.36 1505.15,223.055 1505.72,225.529 1506.29,226.883 1506.86,227.02 1507.43,226.12 1508,225.336 1508.56,225.798 1509.13,227.199 1509.7,225.463 1510.27,224.722 1510.84,225.266 1511.41,226.511 1511.97,226.736 1512.54,228.073 1513.11,230.361 1513.68,229.264 1514.25,228.222 1514.82,229.264 1515.38,231.203 1515.95,233.096 1516.52,233.009 1517.09,233.559 1517.66,236.213 1518.23,235.755 1518.79,235.367 1519.36,233.986 1519.93,233.752 1520.5,232.332 1521.07,230.769 1521.64,230.657 1522.2,231.6 1522.77,231.285 1523.34,228.939 1523.91,226.822 1524.48,226.048 1525.05,229.497 1525.61,228.38 1526.18,230.511 1526.75,230.392 1527.32,231.318 1527.89,233.011 1528.46,234.611 1529.02,235.083 1529.59,235.855 1530.16,235.345 1530.73,231.856 1531.3,231.72 1531.87,231.521 1532.43,232.027 1533,231.874 1533.57,231.812 1534.14,229.508 1534.71,229.494 1535.28,230.246 1535.84,229.032 1536.41,227.962 1536.98,229.972 1537.55,229.664 1538.12,230.638 1538.69,229.027 1539.25,229.968 1539.82,230.057 1540.39,229.833 1540.96,229.527 1541.53,229.318 1542.1,229.416 1542.66,230.257 1543.23,230.202 1543.8,231.204 1544.37,230.889 1544.94,229.558 1545.51,229.416 1546.08,229.534 1546.64,229.388 1547.21,231.368 1547.78,231.152 1548.35,233.18 1548.92,232.856 1549.49,232.544 1550.05,231.365 1550.62,231.062 1551.19,229.032 1551.76,229.861 1552.33,229.903 1552.9,229.901 1553.46,228.687 1554.03,226.767 1554.6,225.58 1555.17,224.911 1555.74,225.268 1556.31,229.582 1556.87,227.136 1557.44,227.049 1558.01,225.061 1558.58,226.084 1559.15,223.985 1559.72,223.412 1560.28,221.568 1560.85,220.109 1561.42,220.798 1561.99,222.39 1562.56,222.085 1563.13,221.776 1563.69,221.284 1564.26,221.065 1564.83,221.407 1565.4,223.009 1565.97,223.542 1566.54,223.022 1567.1,223.524 1567.67,222.909 1568.24,223.536 1568.81,224.382 1569.38,226.84 1569.95,226.021 1570.51,225.269 1571.08,227.868 1571.65,226.945 1572.22,225.358 1572.79,224.764 1573.36,224.352 1573.92,224.941 1574.49,225.48 1575.06,227.033 1575.63,226.046 1576.2,225.404 1576.77,224.965 1577.33,225.358 1577.9,224.812 1578.47,225.371 1579.04,226.815 1579.61,226.329 1580.18,224.58 1580.74,225.105 1581.31,226.481 1581.88,226.739 1582.45,228.23 1583.02,229.541 1583.59,229.81 1584.15,233.086 1584.72,235.187 1585.29,234.907 1585.86,234.621 1586.43,237.499 1587,238.172 1587.56,237.756 1588.13,238.318 1588.7,235.902 1589.27,238.755 1589.84,240.354 1590.41,239.584 1590.97,237.925 1591.54,236.521 1592.11,236.105 1592.68,235.896 1593.25,235.458 1593.82,235.093 1594.38,233.675 1594.95,233.759 1595.52,234.416 1596.09,235.209 1596.66,234.994 1597.23,237.555 1597.79,237.057 1598.36,235.379 1598.93,233.875 1599.5,235.597 1600.07,234.317 1600.64,235.067 1601.2,235.592 1601.77,233.106 1602.34,232.752 1602.91,231.371 1603.48,232.223 1604.05,234.116 1604.61,233.738 1605.18,233.531 1605.75,233.185 1606.32,234.947 1606.89,236.765 1607.46,236.387 1608.02,235.655 1608.59,233.839 1609.16,235.467 1609.73,234.09 1610.3,234.744 1610.87,234.418 1611.43,233.89 1612,233.519 1612.57,233.136 1613.14,231.677 1613.71,234.323 1614.28,233.943 1614.84,232.432 1615.41,229.858 1615.98,230.674 1616.55,231.384 1617.12,231.132 1617.69,232.862 1618.26,230.453 1618.82,229.357 1619.39,228.276 1619.96,227.035 1620.53,226.974 1621.1,224.892 1621.67,223.198 1622.23,222.251 1622.8,222.433 1623.37,223.076 1623.94,225.376 1624.51,223.444 1625.08,226.677 1625.64,224.582 1626.21,223.529 1626.78,226.069 1627.35,227.369 1627.92,226.244 1628.49,225.35 1629.05,227.761 1629.62,228.757 1630.19,233.874 1630.76,233.391 1631.33,231.849 1631.9,230.645 1632.46,230.254 1633.03,231.172 1633.6,228.811 1634.17,230.188 1634.74,230.092 1635.31,228.957 1635.87,228.757 1636.44,230.674 1637.01,229.466 1637.58,228.448 1638.15,230.349 1638.72,232.382 1639.28,229.701 1639.85,230.809 1640.42,230.485 1640.99,232.243 1641.56,231.888 1642.13,230.556 1642.69,230.367 1643.26,230.233 1643.83,229.854 1644.4,229.703 1644.97,227.365 1645.54,227.406 1646.1,228.389 1646.67,228.308 1647.24,228.194 1647.81,228.232 1648.38,229.311 1648.95,227.054 1649.51,227.138 1650.08,227.348 1650.65,231.588 1651.22,231.096 1651.79,229.979 1652.36,229.734 1652.92,229.608 1653.49,229.365 1654.06,228.236 1654.63,227.353 1655.2,226.265 1655.77,226.342 1656.33,225.055 1656.9,224.203 1657.47,225.625 1658.04,227.011 1658.61,225.86 1659.18,228.27 1659.74,228.472 1660.31,229.433 1660.88,229.193 1661.45,228.382 1662.02,227.432 1662.59,228.487 1663.15,224.414 1663.72,224.637 1664.29,226.927 1664.86,228.148 1665.43,227.226 1666,228.287 1666.56,229.57 1667.13,231.45 1667.7,234.337 1668.27,232.763 1668.84,229.481 1669.41,232.415 1669.97,231.86 1670.54,231.738 1671.11,231.59 1671.68,230.361 1672.25,230.239 1672.82,230.258 1673.38,230.183 1673.95,230.275 1674.52,229.095 1675.09,228.848 1675.66,228.834 1676.23,227.88 1676.79,227.072 1677.36,227.36 1677.93,227.562 1678.5,225.628 1679.07,225.852 1679.64,228.096 1680.2,225.149 1680.77,224.397 1681.34,221.583 1681.91,222.09 1682.48,221.505 1683.05,222.112 1683.61,223.745 1684.18,224.302 1684.75,224.979 1685.32,225.336 1685.89,227.748 1686.46,228.784 1687.02,227.948 1687.59,225.151 1688.16,224.554 1688.73,224.06 1689.3,224.46 1689.87,225.048 1690.44,225.365 1691,226.682 1691.57,227.161 1692.14,228.495 1692.71,229.691 1693.28,231.484 1693.85,231.513 1694.41,229.52 1694.98,226.704 1695.55,227.212 1696.12,227.484 1696.69,226.532 1697.26,221.676 1697.82,222.304 1698.39,219.895 1698.96,220.763 1699.53,221.601 1700.1,221.25 1700.67,221.062 1701.23,222.941 1701.8,225.695 1702.37,225.029 1702.94,228.853 1703.51,228.926 1704.08,229.242 1704.64,229.427 1705.21,229.556 1705.78,230.762 1706.35,230.838 1706.92,229.832 1707.49,230.934 1708.05,233.022 1708.62,231.984 1709.19,232.11 1709.76,233.197 1710.33,231.116 1710.9,233.107 1711.46,234.028 1712.03,235.067 1712.6,233.686 1713.17,233.43 1713.74,233.263 1714.31,231.199 1714.87,230.16 1715.44,230.279 1716.01,230.261 1716.58,234.386 1717.15,234.243 1717.72,234.074 1718.28,233.687 1718.85,233.616 1719.42,231.619 1719.99,233.644 1720.56,232.315 1721.13,231.136 1721.69,231.025 1722.26,230.91 1722.83,231.063 1723.4,229.939 1723.97,233.299 1724.54,231.993 1725.1,232.997 1725.67,231.806 1726.24,230.474 1726.81,231.54 1727.38,232.607 1727.95,232.436 1728.51,232.191 1729.08,232.335 1729.65,234.366 1730.22,234.022 1730.79,233.98 1731.36,234.976 1731.92,234.478 1732.49,235.214 1733.06,233.765 1733.63,234.403 1734.2,236.006 1734.77,235.619 1735.33,234.16 1735.9,233.912 1736.47,235.728 1737.04,236.459 1737.61,236.073 1738.18,234.657 1738.74,235.312 1739.31,234.938 1739.88,232.32 1740.45,231.144 1741.02,229.71 1741.59,232.735 1742.15,233.717 1742.72,232.273 1743.29,229.842 1743.86,229.774 1744.43,229.602 1745,228.603 1745.56,226.375 1746.13,226.449 1746.7,227.51 1747.27,229.71 1747.84,231.53 1748.41,230.397 1748.97,229.409 1749.54,231.398 1750.11,231.272 1750.68,227.85 1751.25,226.79 1751.82,225.813 1752.38,224.943 1752.95,225.342 1753.52,225.54 1754.09,226.69 1754.66,224.025 1755.23,222.329 1755.79,223.874 1756.36,224.209 1756.93,226.778 1757.5,228.206 1758.07,229.144 1758.64,228.19 1759.21,228.318 1759.77,227.136 1760.34,227.574 1760.91,226.68 1761.48,231.157 1762.05,230.888 1762.62,229.775 1763.18,229.725 1763.75,230.763 1764.32,230.661 1764.89,230.309 1765.46,230.06 1766.03,232.027 1766.59,233.882 1767.16,234.373 1767.73,233.952 1768.3,233.472 1768.87,233.146 1769.44,232.848 1770,236.749 1770.57,235.013 1771.14,233.431 1771.71,233.09 1772.28,230.7 1772.85,228.592 1773.41,228.381 1773.98,228.406 1774.55,226.321 1775.12,227.572 1775.69,228.763 1776.26,228.935 1776.82,228.912 1777.39,228.807 1777.96,226.825 1778.53,225.008 1779.1,224.195 1779.67,222.708 1780.23,221.12 1780.8,221.663 1781.37,221.478 1781.94,224.315 1782.51,223.748 1783.08,225.437 1783.64,226.646 1784.21,225.945 1784.78,226.325 1785.35,226.843 1785.92,229.157 1786.49,227.324 1787.05,225.528 1787.62,224.532 1788.19,226.154 1788.76,226.77 1789.33,225.307 1789.9,226.835 1790.46,226.281 1791.03,225.421 1791.6,227.81 1792.17,226.723 1792.74,228.008 1793.31,226.212 1793.87,227.515 1794.44,227.918 1795.01,226.458 1795.58,224.835 1796.15,225.119 1796.72,224.455 1797.28,223.945 1797.85,225.466 1798.42,225.751 1798.99,226.022 1799.56,227.508 1800.13,225.631 1800.69,226.067 1801.26,226.299 1801.83,226.664 1802.4,227.165 1802.97,226.371 1803.54,226.819 1804.1,228.267 1804.67,229.447 1805.24,230.918 1805.81,236.021 1806.38,236.91 1806.95,234.367 1807.51,234.071 1808.08,233.832 1808.65,231.534 1809.22,231.554 1809.79,231.608 1810.36,230.621 1810.92,229.449 1811.49,229.458 1812.06,229.487 1812.63,228.803 1813.2,229.985 1813.77,229.766 1814.33,231.28 1814.9,230.442 1815.47,228.159 1816.04,230.311 1816.61,230.543 1817.18,230.491 1817.74,230.704 1818.31,231.847 1818.88,233.919 1819.45,231.533 1820.02,230.654 1820.59,230.752 1821.15,231.665 1821.72,231.549 1822.29,231.531 1822.86,232.7 1823.43,230.643 1824,233.701 1824.56,235.497 1825.13,236.045 1825.7,234.61 1826.27,234.342 1826.84,235.13 1827.41,234.885 1827.97,234.486 1828.54,232.119 1829.11,230.926 1829.68,230.963 1830.25,233.843 1830.82,232.304 1831.39,232.89 1831.95,231.703 1832.52,235.518 1833.09,234.267 1833.66,233.086 1834.23,231.59 1834.8,230.449 1835.36,231.521 1835.93,232.254 1836.5,231.046 1837.07,231.863 1837.64,229.596 1838.21,230.656 1838.77,230.623 1839.34,230.531 1839.91,229.457 1840.48,227.57 1841.05,229.777 1841.62,228.771 1842.18,229.045 1842.75,230.078 1843.32,231.154 1843.89,230.944 1844.46,230.663 1845.03,228.473 1845.59,230.647 1846.16,231.504 1846.73,231.254 1847.3,232.037 1847.87,229.566 1848.44,231.567 1849,232.362 1849.57,233.084 1850.14,233.802 1850.71,230.478 1851.28,231.492 1851.85,232.119 1852.41,232.822 1852.98,234.705 1853.55,235.415 1854.12,233.968 1854.69,232.441 1855.26,233.201 1855.82,234.757 1856.39,234.348 1856.96,233.863 1857.53,233.404 1858.1,233.039 1858.67,233.492 1859.23,230.149 1859.8,228.94 1860.37,225.588 1860.94,225.806 1861.51,225.57 1862.08,225.989 1862.64,229.185 1863.21,230.131 1863.78,227.215 1864.35,228.435 1864.92,228.676 1865.49,230.512 1866.05,232.422 1866.62,231.126 1867.19,229.912 1867.76,230.199 1868.33,230.207 1868.9,232.272 1869.46,229.977 1870.03,229.847 1870.6,230.773 1871.17,230.752 1871.74,229.931 1872.31,229.801 1872.87,228.723 1873.44,228.761 1874.01,228.447 1874.58,227.193 1875.15,229.335 1875.72,231.267 1876.28,231.988 1876.85,230.706 1877.42,230.286 1877.99,229.871 1878.56,226.618 1879.13,224.676 1879.69,225.89 1880.26,224.918 1880.83,224.021 1881.4,223.407 1881.97,223.91 1882.54,224.362 1883.1,224.574 1883.67,225.786 1884.24,225.111 1884.81,226.619 1885.38,225.679 1885.95,225.118 1886.51,224.321 1887.08,225.675 1887.65,224.03 1888.22,223.555 1888.79,224.284 1889.36,223.633 1889.92,225.413 1890.49,223.566 1891.06,224.159 1891.63,221.319 1892.2,222.849 1892.77,223.414 1893.33,226.031 1893.9,227.125 1894.47,225.511 1895.04,224.868 1895.61,226.175 1896.18,224.618 1896.74,225.865 1897.31,227.088 1897.88,227.08 1898.45,227.204 1899.02,227.44 1899.59,226.384 1900.16,224.363 1900.72,225.992 1901.29,225.43 1901.86,227.795 1902.43,228.974 1903,227.257 1903.57,228.583 1904.13,229.635 1904.7,230.608 1905.27,232.619 1905.84,231.57 1906.41,232.554 1906.98,233.404 1907.54,232.249 1908.11,232.159 1908.68,229.988 1909.25,229.085 1909.82,228.192 1910.39,228.368 1910.95,228.43 1911.52,231.692 1912.09,230.573 1912.66,229.527 1913.23,229.541 1913.8,229.782 1914.36,230.849 1914.93,228.865 1915.5,230.067 1916.07,230.093 1916.64,229.235 1917.21,229.455 1917.77,231.442 1918.34,229.404 1918.91,228.415 1919.48,229.662 1920.05,228.966 1920.62,230.058 1921.18,231.15 1921.75,232.282 1922.32,235.455 1922.89,234.982 1923.46,234.885 1924.03,234.622 1924.59,235.588 1925.16,235.203 1925.73,233.926 1926.3,235.542 1926.87,235.088 1927.44,234.688 1928,231.3 1928.57,227.171 1929.14,230.327 1929.71,230.2 1930.28,231.224 1930.85,230.263 1931.41,232.232 1931.98,231.236 1932.55,231.27 1933.12,233.296 1933.69,230.66 1934.26,228.718 1934.82,229.859 1935.39,231.79 1935.96,230.493 1936.53,229.427 1937.1,230.488 1937.67,231.466 1938.23,228.42 1938.8,231.626 1939.37,233.478 1939.94,232.216 1940.51,233.375 1941.08,233.147 1941.64,230.68 1942.21,229.547 1942.78,228.244 1943.35,228.306 1943.92,225.344 1944.49,225.547 1945.05,223.745 1945.62,226.052 1946.19,226.369 1946.76,227.44 1947.33,228.283 1947.9,230.288 1948.46,230.395 1949.03,229.384 1949.6,229.51 1950.17,229.753 1950.74,232.978 1951.31,232.798 1951.87,233.606 1952.44,233.513 1953.01,233.134 1953.58,232.984 1954.15,233.527 1954.72,233.559 1955.28,232.487 1955.85,231.392 1956.42,232.118 1956.99,228.942 1957.56,230.943 1958.13,230.88 1958.69,229.749 1959.26,228.953 1959.83,228.864 1960.4,233.936 1960.97,233.606 1961.54,234.401 1962.1,236.007 1962.67,235.637 1963.24,232.056 1963.81,231.913 1964.38,231.938 1964.95,232.767 1965.51,229.424 1966.08,232.562 1966.65,230.377 1967.22,229.157 1967.79,229.058 1968.36,230.097 1968.92,230.869 1969.49,229.719 1970.06,230.674 1970.63,231.68 1971.2,230.31 1971.77,232.147 1972.34,232.84 1972.9,232.531 1973.47,232.164 1974.04,231.894 1974.61,231.608 1975.18,231.738 1975.75,233.452 1976.31,233.963 1976.88,229.662 1977.45,229.794 1978.02,230.516 1978.59,231.419 1979.16,232.134 1979.72,232.701 1980.29,232.338 1980.86,232.133 1981.43,231.887 1982,229.463 1982.57,228.4 1983.13,227.12 1983.7,225.908 1984.27,226.926 1984.84,225.813 1985.41,226.08 1985.98,227.182 1986.54,226.258 1987.11,229.364 1987.68,229.416 1988.25,230.337 1988.82,230.338 1989.39,230.194 1989.95,228.916 1990.52,229.799 1991.09,230.641 1991.66,230.399 1992.23,226.881 1992.8,227.02 1993.36,224.98 1993.93,226.194 1994.5,225.29 1995.07,224.559 1995.64,225.916 1996.21,225.935 1996.77,225.15 1997.34,224.48 1997.91,223.761 1998.48,222.834 1999.05,223.373 1999.62,225.829 2000.18,227.231 2000.75,228.518 2001.32,228.694 2001.89,227.588 2002.46,226.767 2003.03,226.109 2003.59,229.575 2004.16,228.546 2004.73,230.747 2005.3,230.622 2005.87,231.518 2006.44,232.341 2007,232.246 2007.57,231.061 2008.14,228.909 2008.71,229.956 2009.28,230.815 2009.85,231.891 2010.41,230.683 2010.98,230.449 2011.55,230.523 2012.12,230.314 2012.69,230.166 2013.26,230.172 2013.82,230.185 2014.39,229.18 2014.96,230.241 2015.53,230.209 2016.1,228.201 2016.67,227.189 2017.23,226.416 2017.8,225.539 2018.37,223.945 2018.94,225.424 2019.51,224.505 2020.08,229.127 2020.64,229.154 2021.21,228.162 2021.78,228.289 2022.35,228.101 2022.92,229.399 2023.49,229.648 2024.05,229.657 2024.62,227.561 2025.19,229.824 2025.76,230.765 2026.33,229.55 2026.9,229.666 2027.46,230.763 2028.03,230.834 2028.6,231.724 2029.17,230.609 2029.74,230.713 2030.31,228.494 2030.87,227.549 2031.44,226.819 2032.01,225.118 2032.58,226.608 2033.15,227.702 2033.72,229.558 2034.28,230.6 2034.85,230.586 2035.42,231.715 2035.99,233.774 2036.56,233.397 2037.13,232.056 2037.69,234.112 2038.26,233.942 2038.83,233.515 2039.4,233.221 2039.97,233.984 2040.54,233.761 2041.11,233.454 2041.67,232.893 2042.24,233.781 2042.81,232.361 2043.38,231.142 2043.95,230.995 2044.52,230.83 2045.08,230.705 2045.65,231.599 2046.22,231.57 2046.79,231.192 2047.36,232.004 2047.93,231.589 2048.49,233.409 2049.06,233.13 2049.63,232.839 2050.2,231.591 2050.77,230.38 2051.34,230.179 2051.9,230.083 2052.47,229.856 2053.04,229.717 2053.61,230.688 2054.18,230.337 2054.75,231.194 2055.31,231.04 2055.88,233.018 2056.45,231.746 2057.02,230.579 2057.59,229.331 2058.16,232.569 2058.72,232.244 2059.29,232.17 2059.86,230.986 2060.43,230.769 2061,231.454 2061.57,231.354 2062.13,232.2 2062.7,231.966 2063.27,230.608 2063.84,227.229 2064.41,227.234 2064.98,228.343 2065.54,227.324 2066.11,221.143 2066.68,222.832 2067.25,224.284 2067.82,225.792 2068.39,224.938 2068.95,225.069 2069.52,225.283 2070.09,225.518 2070.66,225.599 2071.23,226.646 2071.8,227.728 2072.36,228.806 2072.93,226.785 2073.5,225.972 2074.07,226.273 2074.64,228.327 2075.21,229.617 2075.77,229.682 2076.34,229.73 2076.91,231.776 2077.48,231.667 2078.05,233.445 2078.62,232.148 2079.18,230.898 2079.75,229.96 2080.32,229.781 2080.89,229.81 2081.46,229.884 2082.03,227.776 2082.59,228.105 2083.16,227.194 2083.73,227.277 2084.3,228.529 2084.87,229.495 2085.44,228.523 2086,227.889 2086.57,226.886 2087.14,224.051 2087.71,221.415 2088.28,222.875 2088.85,223.591 2089.41,224.964 2089.98,225.365 2090.55,225.774 2091.12,228.23 2091.69,230.471 2092.26,230.26 2092.82,230.165 2093.39,229.101 2093.96,229.357 2094.53,229.517 2095.1,231.575 2095.67,231.555 2096.23,231.211 2096.8,231.104 2097.37,231.255 2097.94,231.073 2098.51,229.865 2099.08,229.797 2099.64,229.953 2100.21,227.812 2100.78,229.034 2101.35,229.056 2101.92,230.183 2102.49,233.175 2103.05,234.667 2103.62,233.18 2104.19,231.601 2104.76,230.339 2105.33,233.221 2105.9,232.119 2106.46,230.975 2107.03,230.891 2107.6,231.812 2108.17,231.758 2108.74,233.654 2109.31,232.604 2109.87,231.26 2110.44,231.058 2111.01,230.869 2111.58,232.593 2112.15,232.436 2112.72,233.388 2113.29,232.137 2113.85,230.695 2114.42,230.535 2114.99,230.48 2115.56,231.373 2116.13,230.118 2116.7,228.111 2117.26,228.211 2117.83,226.211 2118.4,226.319 2118.97,225.684 2119.54,226.963 2120.11,228.059 2120.67,226.811 2121.24,226.813 2121.81,229.945 2122.38,232.058 2122.95,231.965 2123.52,231.645 2124.08,230.602 2124.65,229.536 2125.22,232.375 2125.79,232.025 2126.36,231.787 2126.93,228.516 2127.49,226.659 2128.06,228.805 2128.63,228.831 2129.2,229.644 2129.77,228.554 2130.34,229.371 2130.9,229.461 2131.47,229.265 2132.04,228.416 2132.61,228.449 2133.18,230.529 2133.75,232.612 2134.31,234.601 2134.88,233.134 2135.45,232.649 2136.02,232.409 2136.59,230.982 2137.16,229.613 2137.72,229.745 2138.29,229.637 2138.86,230.706 2139.43,228.497 2140,227.648 2140.57,228.739 2141.13,227.815 2141.7,229.623 2142.27,228.424 2142.84,228.633 2143.41,230.883 2143.98,230.745 2144.54,231.591 2145.11,230.518 2145.68,231.217 2146.25,228.983 2146.82,227.819 2147.39,227.817 2147.95,226.95 2148.52,226.34 2149.09,226.529 2149.66,224.509 2150.23,226.777 2150.8,225.908 2151.36,225.059 2151.93,225.19 2152.5,226.424 2153.07,226.775 2153.64,226.915 2154.21,229.276 2154.77,229.613 2155.34,229.549 2155.91,230.828 2156.48,231.748 2157.05,230.488 2157.62,227.382 2158.18,228.45 2158.75,228.579 2159.32,228.765 2159.89,227.691 \"/>\n<path clip-path=\"url(#clip990)\" d=\"M1625.75 1245.03 L2150.8 1245.03 L2150.8 1089.51 L1625.75 1089.51  Z\" fill=\"#ffffff\" fill-rule=\"evenodd\" fill-opacity=\"1\"/>\n<polyline clip-path=\"url(#clip990)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"1625.75,1245.03 2150.8,1245.03 2150.8,1089.51 1625.75,1089.51 1625.75,1245.03 \"/>\n<polyline clip-path=\"url(#clip990)\" style=\"stroke:#e26f46; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" stroke-dasharray=\"16, 10\" points=\"1645.83,1141.35 1766.28,1141.35 \"/>\n<path clip-path=\"url(#clip990)\" d=\"M1793.76 1125.34 L1793.76 1132.71 L1802.53 1132.71 L1802.53 1136.02 L1793.76 1136.02 L1793.76 1150.09 Q1793.76 1153.26 1794.61 1154.16 Q1795.49 1155.07 1798.16 1155.07 L1802.53 1155.07 L1802.53 1158.63 L1798.16 1158.63 Q1793.23 1158.63 1791.35 1156.8 Q1789.48 1154.95 1789.48 1150.09 L1789.48 1136.02 L1786.35 1136.02 L1786.35 1132.71 L1789.48 1132.71 L1789.48 1125.34 L1793.76 1125.34 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip990)\" d=\"M1819.92 1145.6 Q1814.75 1145.6 1812.76 1146.78 Q1810.77 1147.96 1810.77 1150.81 Q1810.77 1153.08 1812.25 1154.42 Q1813.76 1155.74 1816.33 1155.74 Q1819.87 1155.74 1822 1153.24 Q1824.15 1150.72 1824.15 1146.55 L1824.15 1145.6 L1819.92 1145.6 M1828.41 1143.84 L1828.41 1158.63 L1824.15 1158.63 L1824.15 1154.7 Q1822.69 1157.06 1820.52 1158.19 Q1818.34 1159.3 1815.19 1159.3 Q1811.21 1159.3 1808.85 1157.08 Q1806.51 1154.84 1806.51 1151.09 Q1806.51 1146.71 1809.43 1144.49 Q1812.37 1142.27 1818.18 1142.27 L1824.15 1142.27 L1824.15 1141.85 Q1824.15 1138.91 1822.21 1137.31 Q1820.29 1135.69 1816.79 1135.69 Q1814.57 1135.69 1812.46 1136.22 Q1810.36 1136.76 1808.41 1137.82 L1808.41 1133.89 Q1810.75 1132.98 1812.95 1132.54 Q1815.15 1132.08 1817.23 1132.08 Q1822.86 1132.08 1825.63 1135 Q1828.41 1137.91 1828.41 1143.84 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip990)\" d=\"M1852.21 1136.69 Q1851.49 1136.27 1850.63 1136.09 Q1849.8 1135.88 1848.78 1135.88 Q1845.17 1135.88 1843.23 1138.24 Q1841.3 1140.58 1841.3 1144.97 L1841.3 1158.63 L1837.02 1158.63 L1837.02 1132.71 L1841.3 1132.71 L1841.3 1136.73 Q1842.65 1134.37 1844.8 1133.24 Q1846.95 1132.08 1850.03 1132.08 Q1850.47 1132.08 1851 1132.15 Q1851.54 1132.2 1852.18 1132.31 L1852.21 1136.69 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip990)\" d=\"M1872.9 1145.37 Q1872.9 1140.74 1870.98 1138.19 Q1869.08 1135.65 1865.63 1135.65 Q1862.21 1135.65 1860.29 1138.19 Q1858.39 1140.74 1858.39 1145.37 Q1858.39 1149.97 1860.29 1152.52 Q1862.21 1155.07 1865.63 1155.07 Q1869.08 1155.07 1870.98 1152.52 Q1872.9 1149.97 1872.9 1145.37 M1877.16 1155.41 Q1877.16 1162.03 1874.22 1165.25 Q1871.28 1168.49 1865.22 1168.49 Q1862.97 1168.49 1860.98 1168.15 Q1858.99 1167.82 1857.11 1167.13 L1857.11 1162.98 Q1858.99 1164 1860.82 1164.49 Q1862.65 1164.97 1864.54 1164.97 Q1868.73 1164.97 1870.82 1162.78 Q1872.9 1160.6 1872.9 1156.18 L1872.9 1154.07 Q1871.58 1156.36 1869.52 1157.5 Q1867.46 1158.63 1864.59 1158.63 Q1859.82 1158.63 1856.91 1155 Q1853.99 1151.36 1853.99 1145.37 Q1853.99 1139.35 1856.91 1135.72 Q1859.82 1132.08 1864.59 1132.08 Q1867.46 1132.08 1869.52 1133.22 Q1871.58 1134.35 1872.9 1136.64 L1872.9 1132.71 L1877.16 1132.71 L1877.16 1155.41 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip990)\" d=\"M1908.11 1144.6 L1908.11 1146.69 L1888.53 1146.69 Q1888.8 1151.09 1891.17 1153.4 Q1893.55 1155.69 1897.79 1155.69 Q1900.24 1155.69 1902.53 1155.09 Q1904.85 1154.49 1907.11 1153.28 L1907.11 1157.31 Q1904.82 1158.28 1902.42 1158.79 Q1900.01 1159.3 1897.53 1159.3 Q1891.33 1159.3 1887.69 1155.69 Q1884.08 1152.08 1884.08 1145.92 Q1884.08 1139.56 1887.51 1135.83 Q1890.96 1132.08 1896.79 1132.08 Q1902.02 1132.08 1905.05 1135.46 Q1908.11 1138.82 1908.11 1144.6 M1903.85 1143.35 Q1903.8 1139.86 1901.88 1137.78 Q1899.98 1135.69 1896.84 1135.69 Q1893.27 1135.69 1891.12 1137.71 Q1888.99 1139.72 1888.67 1143.38 L1903.85 1143.35 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip990)\" d=\"M1919.31 1125.34 L1919.31 1132.71 L1928.09 1132.71 L1928.09 1136.02 L1919.31 1136.02 L1919.31 1150.09 Q1919.31 1153.26 1920.17 1154.16 Q1921.05 1155.07 1923.71 1155.07 L1928.09 1155.07 L1928.09 1158.63 L1923.71 1158.63 Q1918.78 1158.63 1916.91 1156.8 Q1915.03 1154.95 1915.03 1150.09 L1915.03 1136.02 L1911.91 1136.02 L1911.91 1132.71 L1915.03 1132.71 L1915.03 1125.34 L1919.31 1125.34 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip990)\" d=\"M1953.39 1166.5 L1953.39 1169.81 L1928.76 1169.81 L1928.76 1166.5 L1953.39 1166.5 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip990)\" d=\"M1954.91 1132.71 L1959.17 1132.71 L1964.5 1152.94 L1969.8 1132.71 L1974.82 1132.71 L1980.15 1152.94 L1985.45 1132.71 L1989.71 1132.71 L1982.92 1158.63 L1977.9 1158.63 L1972.32 1137.38 L1966.72 1158.63 L1961.7 1158.63 L1954.91 1132.71 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip990)\" d=\"M2007.95 1145.6 Q2002.78 1145.6 2000.79 1146.78 Q1998.8 1147.96 1998.8 1150.81 Q1998.8 1153.08 2000.28 1154.42 Q2001.79 1155.74 2004.36 1155.74 Q2007.9 1155.74 2010.03 1153.24 Q2012.18 1150.72 2012.18 1146.55 L2012.18 1145.6 L2007.95 1145.6 M2016.44 1143.84 L2016.44 1158.63 L2012.18 1158.63 L2012.18 1154.7 Q2010.72 1157.06 2008.55 1158.19 Q2006.37 1159.3 2003.22 1159.3 Q1999.24 1159.3 1996.88 1157.08 Q1994.54 1154.84 1994.54 1151.09 Q1994.54 1146.71 1997.46 1144.49 Q2000.4 1142.27 2006.21 1142.27 L2012.18 1142.27 L2012.18 1141.85 Q2012.18 1138.91 2010.24 1137.31 Q2008.32 1135.69 2004.82 1135.69 Q2002.6 1135.69 2000.49 1136.22 Q1998.39 1136.76 1996.44 1137.82 L1996.44 1133.89 Q1998.78 1132.98 2000.98 1132.54 Q2003.18 1132.08 2005.26 1132.08 Q2010.89 1132.08 2013.66 1135 Q2016.44 1137.91 2016.44 1143.84 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip990)\" d=\"M2025.22 1122.61 L2029.47 1122.61 L2029.47 1158.63 L2025.22 1158.63 L2025.22 1122.61 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip990)\" d=\"M2038.22 1122.61 L2042.51 1122.61 L2042.51 1143.89 L2055.22 1132.71 L2060.65 1132.71 L2046.91 1144.84 L2061.23 1158.63 L2055.68 1158.63 L2042.51 1145.97 L2042.51 1158.63 L2038.22 1158.63 L2038.22 1122.61 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip990)\" d=\"M2086.33 1144.6 L2086.33 1146.69 L2066.74 1146.69 Q2067.02 1151.09 2069.38 1153.4 Q2071.77 1155.69 2076 1155.69 Q2078.46 1155.69 2080.75 1155.09 Q2083.06 1154.49 2085.33 1153.28 L2085.33 1157.31 Q2083.04 1158.28 2080.63 1158.79 Q2078.22 1159.3 2075.75 1159.3 Q2069.54 1159.3 2065.91 1155.69 Q2062.3 1152.08 2062.3 1145.92 Q2062.3 1139.56 2065.72 1135.83 Q2069.17 1132.08 2075.01 1132.08 Q2080.24 1132.08 2083.27 1135.46 Q2086.33 1138.82 2086.33 1144.6 M2082.07 1143.35 Q2082.02 1139.86 2080.1 1137.78 Q2078.2 1135.69 2075.05 1135.69 Q2071.49 1135.69 2069.34 1137.71 Q2067.21 1139.72 2066.88 1143.38 L2082.07 1143.35 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip990)\" d=\"M2108.34 1136.69 Q2107.62 1136.27 2106.77 1136.09 Q2105.93 1135.88 2104.91 1135.88 Q2101.3 1135.88 2099.36 1138.24 Q2097.44 1140.58 2097.44 1144.97 L2097.44 1158.63 L2093.15 1158.63 L2093.15 1132.71 L2097.44 1132.71 L2097.44 1136.73 Q2098.78 1134.37 2100.93 1133.24 Q2103.09 1132.08 2106.16 1132.08 Q2106.6 1132.08 2107.14 1132.15 Q2107.67 1132.2 2108.32 1132.31 L2108.34 1136.69 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip990)\" d=\"M2129.34 1133.47 L2129.34 1137.5 Q2127.53 1136.57 2125.59 1136.11 Q2123.64 1135.65 2121.56 1135.65 Q2118.39 1135.65 2116.79 1136.62 Q2115.21 1137.59 2115.21 1139.53 Q2115.21 1141.02 2116.35 1141.87 Q2117.48 1142.71 2120.91 1143.47 L2122.37 1143.79 Q2126.9 1144.77 2128.8 1146.55 Q2130.72 1148.31 2130.72 1151.48 Q2130.72 1155.09 2127.85 1157.2 Q2125.01 1159.3 2120.01 1159.3 Q2117.92 1159.3 2115.65 1158.89 Q2113.41 1158.49 2110.91 1157.68 L2110.91 1153.28 Q2113.27 1154.51 2115.56 1155.14 Q2117.85 1155.74 2120.1 1155.74 Q2123.11 1155.74 2124.73 1154.72 Q2126.35 1153.68 2126.35 1151.8 Q2126.35 1150.07 2125.17 1149.14 Q2124.01 1148.22 2120.05 1147.36 L2118.57 1147.01 Q2114.61 1146.18 2112.85 1144.47 Q2111.09 1142.73 2111.09 1139.72 Q2111.09 1136.06 2113.69 1134.07 Q2116.28 1132.08 2121.05 1132.08 Q2123.41 1132.08 2125.49 1132.43 Q2127.58 1132.78 2129.34 1133.47 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><polyline clip-path=\"url(#clip990)\" style=\"stroke:#009af9; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"1645.83,1193.19 1766.28,1193.19 \"/>\n<path clip-path=\"url(#clip990)\" d=\"M1808.06 1194.82 L1808.06 1210.47 L1803.8 1210.47 L1803.8 1194.96 Q1803.8 1191.28 1802.37 1189.45 Q1800.93 1187.62 1798.06 1187.62 Q1794.61 1187.62 1792.62 1189.82 Q1790.63 1192.02 1790.63 1195.82 L1790.63 1210.47 L1786.35 1210.47 L1786.35 1184.55 L1790.63 1184.55 L1790.63 1188.57 Q1792.16 1186.24 1794.22 1185.08 Q1796.3 1183.92 1799.01 1183.92 Q1803.48 1183.92 1805.77 1186.7 Q1808.06 1189.45 1808.06 1194.82 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip990)\" d=\"M1826.61 1187.53 Q1823.18 1187.53 1821.19 1190.22 Q1819.2 1192.88 1819.2 1197.53 Q1819.2 1202.18 1821.17 1204.87 Q1823.16 1207.53 1826.61 1207.53 Q1830.01 1207.53 1832 1204.85 Q1833.99 1202.16 1833.99 1197.53 Q1833.99 1192.93 1832 1190.24 Q1830.01 1187.53 1826.61 1187.53 M1826.61 1183.92 Q1832.16 1183.92 1835.33 1187.53 Q1838.5 1191.14 1838.5 1197.53 Q1838.5 1203.9 1835.33 1207.53 Q1832.16 1211.14 1826.61 1211.14 Q1821.03 1211.14 1817.86 1207.53 Q1814.71 1203.9 1814.71 1197.53 Q1814.71 1191.14 1817.86 1187.53 Q1821.03 1183.92 1826.61 1183.92 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip990)\" d=\"M1860.59 1188.53 Q1859.87 1188.11 1859.01 1187.93 Q1858.18 1187.72 1857.16 1187.72 Q1853.55 1187.72 1851.61 1190.08 Q1849.68 1192.42 1849.68 1196.81 L1849.68 1210.47 L1845.4 1210.47 L1845.4 1184.55 L1849.68 1184.55 L1849.68 1188.57 Q1851.03 1186.21 1853.18 1185.08 Q1855.33 1183.92 1858.41 1183.92 Q1858.85 1183.92 1859.38 1183.99 Q1859.92 1184.04 1860.56 1184.15 L1860.59 1188.53 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip990)\" d=\"M1884.41 1189.52 Q1886 1186.65 1888.23 1185.29 Q1890.45 1183.92 1893.46 1183.92 Q1897.51 1183.92 1899.71 1186.77 Q1901.91 1189.59 1901.91 1194.82 L1901.91 1210.47 L1897.62 1210.47 L1897.62 1194.96 Q1897.62 1191.24 1896.3 1189.43 Q1894.98 1187.62 1892.28 1187.62 Q1888.97 1187.62 1887.04 1189.82 Q1885.12 1192.02 1885.12 1195.82 L1885.12 1210.47 L1880.84 1210.47 L1880.84 1194.96 Q1880.84 1191.21 1879.52 1189.43 Q1878.2 1187.62 1875.45 1187.62 Q1872.18 1187.62 1870.26 1189.85 Q1868.34 1192.05 1868.34 1195.82 L1868.34 1210.47 L1864.06 1210.47 L1864.06 1184.55 L1868.34 1184.55 L1868.34 1188.57 Q1869.8 1186.19 1871.84 1185.06 Q1873.87 1183.92 1876.67 1183.92 Q1879.5 1183.92 1881.47 1185.36 Q1883.46 1186.79 1884.41 1189.52 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /></svg>\n","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"After an initial equilibriation period, the norm fluctuates around the target number of walkers.","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"Now, let's look at using the shift to estimate the ground state energy of H. The mean of the shift is a useful estimator of the energy. Calculating the error bars is a bit more involved as autocorrelations have to be removed from the time series. This can be done with the function shift_estimator, which performs a blocking analysis on the shift column of the dataframe.","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"se = shift_estimator(df; skip=steps_equilibrate)","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"BlockingResult{Float64}\n  mean = -4.025 ± 0.024\n  with uncertainty of ± 0.002139407130752508\n  from 62 blocks after 5 transformations (k = 6).\n","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"Here, se contains the calculated mean and standard errors of the shift, as well as some additional information related to the blocking analysis.","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"Computing the error of the projected energy is a bit more complicated, as it's a ratio of fluctuating variables contained in the hproj and vproj columns in the dataframe. Thankfully, the complications are handled by the function projected_energy.","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"pe = projected_energy(df; skip=steps_equilibrate)","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"RatioBlockingResult{Float64,MonteCarloMeasurements.Particles{Float64, 2000}}\n  ratio = -4.01568 ± (0.00209335, 0.00216169) (MC)\n  95% confidence interval: [-4.01988, -4.01148] (MC)\n  linear error propagation: -4.01565 ± 0.00208135\n  |δ_y| = |0.00177868| (≤ 0.1 for normal approx)\n  Blocking successful with 31 blocks after 6 transformations (k = 7).\n","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"The result is a ratio distribution. We extract its median and the edges of the 95% confidence interval.","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"v = val_and_errs(pe; p=0.95)","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"(val = -4.015680981790894, val_l = 0.004198515842920081, val_u = 0.004201350819556637)","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"Let's visualise these estimators together with the time series of the shift.","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"plot(df.step, df.shift, ylabel=\"energy\", xlabel=\"step\", label=\"shift\", margin = 1Plots.cm)\n\nplot!(x->se.mean, df.step[steps_equilibrate+1:end], ribbon=se.err, label=\"shift mean\")\nplot!(\n    x -> v.val, df.step[steps_equilibrate+1:end], ribbon=(v.val_l,v.val_u),\n    label=\"projected energy\",\n)\nlens!([steps_equilibrate, last_step], [-5.1, -2.9]; inset=(1, bbox(0.2, 0.25, 0.6, 0.4)))","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"<?xml version=\"1.0\" encoding=\"utf-8\"?>\n<svg xmlns=\"http://www.w3.org/2000/svg\" xmlns:xlink=\"http://www.w3.org/1999/xlink\" width=\"600\" height=\"400\" viewBox=\"0 0 2400 1600\">\n<defs>\n  <clipPath id=\"clip020\">\n    <rect x=\"0\" y=\"0\" width=\"2400\" height=\"1600\"/>\n  </clipPath>\n</defs>\n<path clip-path=\"url(#clip020)\" d=\"M0 1600 L2400 1600 L2400 0 L0 0  Z\" fill=\"#ffffff\" fill-rule=\"evenodd\" fill-opacity=\"1\"/>\n<defs>\n  <clipPath id=\"clip021\">\n    <rect x=\"480\" y=\"0\" width=\"1681\" height=\"1600\"/>\n  </clipPath>\n</defs>\n<path clip-path=\"url(#clip020)\" d=\"M346.853 1281.45 L2211.02 1281.45 L2211.02 188.976 L346.853 188.976  Z\" fill=\"#ffffff\" fill-rule=\"evenodd\" fill-opacity=\"1\"/>\n<defs>\n  <clipPath id=\"clip022\">\n    <rect x=\"346\" y=\"188\" width=\"1865\" height=\"1093\"/>\n  </clipPath>\n</defs>\n<polyline clip-path=\"url(#clip022)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:2; stroke-opacity:0.1; fill:none\" points=\"399.026,1281.45 399.026,188.976 \"/>\n<polyline clip-path=\"url(#clip022)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:2; stroke-opacity:0.1; fill:none\" points=\"985.439,1281.45 985.439,188.976 \"/>\n<polyline clip-path=\"url(#clip022)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:2; stroke-opacity:0.1; fill:none\" points=\"1571.85,1281.45 1571.85,188.976 \"/>\n<polyline clip-path=\"url(#clip022)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:2; stroke-opacity:0.1; fill:none\" points=\"2158.26,1281.45 2158.26,188.976 \"/>\n<polyline clip-path=\"url(#clip022)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:2; stroke-opacity:0.1; fill:none\" points=\"346.853,1154.13 2211.02,1154.13 \"/>\n<polyline clip-path=\"url(#clip022)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:2; stroke-opacity:0.1; fill:none\" points=\"346.853,1005.36 2211.02,1005.36 \"/>\n<polyline clip-path=\"url(#clip022)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:2; stroke-opacity:0.1; fill:none\" points=\"346.853,856.588 2211.02,856.588 \"/>\n<polyline clip-path=\"url(#clip022)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:2; stroke-opacity:0.1; fill:none\" points=\"346.853,707.818 2211.02,707.818 \"/>\n<polyline clip-path=\"url(#clip022)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:2; stroke-opacity:0.1; fill:none\" points=\"346.853,559.047 2211.02,559.047 \"/>\n<polyline clip-path=\"url(#clip022)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:2; stroke-opacity:0.1; fill:none\" points=\"346.853,410.277 2211.02,410.277 \"/>\n<polyline clip-path=\"url(#clip022)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:2; stroke-opacity:0.1; fill:none\" points=\"346.853,261.506 2211.02,261.506 \"/>\n<polyline clip-path=\"url(#clip020)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"346.853,1281.45 2211.02,1281.45 \"/>\n<polyline clip-path=\"url(#clip020)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"399.026,1281.45 399.026,1262.55 \"/>\n<polyline clip-path=\"url(#clip020)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"985.439,1281.45 985.439,1262.55 \"/>\n<polyline clip-path=\"url(#clip020)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"1571.85,1281.45 1571.85,1262.55 \"/>\n<polyline clip-path=\"url(#clip020)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"2158.26,1281.45 2158.26,1262.55 \"/>\n<path clip-path=\"url(#clip020)\" d=\"M399.026 1312.37 Q395.415 1312.37 393.587 1315.93 Q391.781 1319.47 391.781 1326.6 Q391.781 1333.71 393.587 1337.27 Q395.415 1340.82 399.026 1340.82 Q402.661 1340.82 404.466 1337.27 Q406.295 1333.71 406.295 1326.6 Q406.295 1319.47 404.466 1315.93 Q402.661 1312.37 399.026 1312.37 M399.026 1308.66 Q404.837 1308.66 407.892 1313.27 Q410.971 1317.85 410.971 1326.6 Q410.971 1335.33 407.892 1339.94 Q404.837 1344.52 399.026 1344.52 Q393.216 1344.52 390.138 1339.94 Q387.082 1335.33 387.082 1326.6 Q387.082 1317.85 390.138 1313.27 Q393.216 1308.66 399.026 1308.66 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip020)\" d=\"M929.965 1339.91 L937.604 1339.91 L937.604 1313.55 L929.293 1315.21 L929.293 1310.95 L937.557 1309.29 L942.233 1309.29 L942.233 1339.91 L949.872 1339.91 L949.872 1343.85 L929.965 1343.85 L929.965 1339.91 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip020)\" d=\"M969.316 1312.37 Q965.705 1312.37 963.877 1315.93 Q962.071 1319.47 962.071 1326.6 Q962.071 1333.71 963.877 1337.27 Q965.705 1340.82 969.316 1340.82 Q972.951 1340.82 974.756 1337.27 Q976.585 1333.71 976.585 1326.6 Q976.585 1319.47 974.756 1315.93 Q972.951 1312.37 969.316 1312.37 M969.316 1308.66 Q975.127 1308.66 978.182 1313.27 Q981.261 1317.85 981.261 1326.6 Q981.261 1335.33 978.182 1339.94 Q975.127 1344.52 969.316 1344.52 Q963.506 1344.52 960.428 1339.94 Q957.372 1335.33 957.372 1326.6 Q957.372 1317.85 960.428 1313.27 Q963.506 1308.66 969.316 1308.66 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip020)\" d=\"M999.478 1312.37 Q995.867 1312.37 994.038 1315.93 Q992.233 1319.47 992.233 1326.6 Q992.233 1333.71 994.038 1337.27 Q995.867 1340.82 999.478 1340.82 Q1003.11 1340.82 1004.92 1337.27 Q1006.75 1333.71 1006.75 1326.6 Q1006.75 1319.47 1004.92 1315.93 Q1003.11 1312.37 999.478 1312.37 M999.478 1308.66 Q1005.29 1308.66 1008.34 1313.27 Q1011.42 1317.85 1011.42 1326.6 Q1011.42 1335.33 1008.34 1339.94 Q1005.29 1344.52 999.478 1344.52 Q993.668 1344.52 990.589 1339.94 Q987.534 1335.33 987.534 1326.6 Q987.534 1317.85 990.589 1313.27 Q993.668 1308.66 999.478 1308.66 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip020)\" d=\"M1029.64 1312.37 Q1026.03 1312.37 1024.2 1315.93 Q1022.39 1319.47 1022.39 1326.6 Q1022.39 1333.71 1024.2 1337.27 Q1026.03 1340.82 1029.64 1340.82 Q1033.27 1340.82 1035.08 1337.27 Q1036.91 1333.71 1036.91 1326.6 Q1036.91 1319.47 1035.08 1315.93 Q1033.27 1312.37 1029.64 1312.37 M1029.64 1308.66 Q1035.45 1308.66 1038.51 1313.27 Q1041.58 1317.85 1041.58 1326.6 Q1041.58 1335.33 1038.51 1339.94 Q1035.45 1344.52 1029.64 1344.52 Q1023.83 1344.52 1020.75 1339.94 Q1017.7 1335.33 1017.7 1326.6 Q1017.7 1317.85 1020.75 1313.27 Q1023.83 1308.66 1029.64 1308.66 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip020)\" d=\"M1520.46 1339.91 L1536.78 1339.91 L1536.78 1343.85 L1514.84 1343.85 L1514.84 1339.91 Q1517.5 1337.16 1522.08 1332.53 Q1526.69 1327.88 1527.87 1326.53 Q1530.12 1324.01 1531 1322.27 Q1531.9 1320.51 1531.9 1318.82 Q1531.9 1316.07 1529.95 1314.33 Q1528.03 1312.6 1524.93 1312.6 Q1522.73 1312.6 1520.28 1313.36 Q1517.85 1314.13 1515.07 1315.68 L1515.07 1310.95 Q1517.89 1309.82 1520.35 1309.24 Q1522.8 1308.66 1524.84 1308.66 Q1530.21 1308.66 1533.4 1311.35 Q1536.6 1314.03 1536.6 1318.52 Q1536.6 1320.65 1535.79 1322.57 Q1535 1324.47 1532.89 1327.07 Q1532.31 1327.74 1529.21 1330.95 Q1526.11 1334.15 1520.46 1339.91 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip020)\" d=\"M1556.6 1312.37 Q1552.99 1312.37 1551.16 1315.93 Q1549.35 1319.47 1549.35 1326.6 Q1549.35 1333.71 1551.16 1337.27 Q1552.99 1340.82 1556.6 1340.82 Q1560.23 1340.82 1562.04 1337.27 Q1563.87 1333.71 1563.87 1326.6 Q1563.87 1319.47 1562.04 1315.93 Q1560.23 1312.37 1556.6 1312.37 M1556.6 1308.66 Q1562.41 1308.66 1565.46 1313.27 Q1568.54 1317.85 1568.54 1326.6 Q1568.54 1335.33 1565.46 1339.94 Q1562.41 1344.52 1556.6 1344.52 Q1550.79 1344.52 1547.71 1339.94 Q1544.65 1335.33 1544.65 1326.6 Q1544.65 1317.85 1547.71 1313.27 Q1550.79 1308.66 1556.6 1308.66 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip020)\" d=\"M1586.76 1312.37 Q1583.15 1312.37 1581.32 1315.93 Q1579.51 1319.47 1579.51 1326.6 Q1579.51 1333.71 1581.32 1337.27 Q1583.15 1340.82 1586.76 1340.82 Q1590.39 1340.82 1592.2 1337.27 Q1594.03 1333.71 1594.03 1326.6 Q1594.03 1319.47 1592.2 1315.93 Q1590.39 1312.37 1586.76 1312.37 M1586.76 1308.66 Q1592.57 1308.66 1595.62 1313.27 Q1598.7 1317.85 1598.7 1326.6 Q1598.7 1335.33 1595.62 1339.94 Q1592.57 1344.52 1586.76 1344.52 Q1580.95 1344.52 1577.87 1339.94 Q1574.81 1335.33 1574.81 1326.6 Q1574.81 1317.85 1577.87 1313.27 Q1580.95 1308.66 1586.76 1308.66 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip020)\" d=\"M1616.92 1312.37 Q1613.31 1312.37 1611.48 1315.93 Q1609.68 1319.47 1609.68 1326.6 Q1609.68 1333.71 1611.48 1337.27 Q1613.31 1340.82 1616.92 1340.82 Q1620.55 1340.82 1622.36 1337.27 Q1624.19 1333.71 1624.19 1326.6 Q1624.19 1319.47 1622.36 1315.93 Q1620.55 1312.37 1616.92 1312.37 M1616.92 1308.66 Q1622.73 1308.66 1625.79 1313.27 Q1628.87 1317.85 1628.87 1326.6 Q1628.87 1335.33 1625.79 1339.94 Q1622.73 1344.52 1616.92 1344.52 Q1611.11 1344.52 1608.03 1339.94 Q1604.98 1335.33 1604.98 1326.6 Q1604.98 1317.85 1608.03 1313.27 Q1611.11 1308.66 1616.92 1308.66 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip020)\" d=\"M2116.94 1325.21 Q2120.3 1325.93 2122.18 1328.2 Q2124.07 1330.47 2124.07 1333.8 Q2124.07 1338.92 2120.56 1341.72 Q2117.04 1344.52 2110.56 1344.52 Q2108.38 1344.52 2106.07 1344.08 Q2103.77 1343.66 2101.32 1342.81 L2101.32 1338.29 Q2103.26 1339.43 2105.58 1340 Q2107.89 1340.58 2110.42 1340.58 Q2114.82 1340.58 2117.11 1338.85 Q2119.42 1337.11 2119.42 1333.8 Q2119.42 1330.75 2117.27 1329.03 Q2115.14 1327.3 2111.32 1327.3 L2107.29 1327.3 L2107.29 1323.45 L2111.51 1323.45 Q2114.95 1323.45 2116.78 1322.09 Q2118.61 1320.7 2118.61 1318.11 Q2118.61 1315.44 2116.71 1314.03 Q2114.84 1312.6 2111.32 1312.6 Q2109.4 1312.6 2107.2 1313.01 Q2105 1313.43 2102.36 1314.31 L2102.36 1310.14 Q2105.02 1309.4 2107.34 1309.03 Q2109.68 1308.66 2111.74 1308.66 Q2117.06 1308.66 2120.16 1311.09 Q2123.26 1313.5 2123.26 1317.62 Q2123.26 1320.49 2121.62 1322.48 Q2119.98 1324.45 2116.94 1325.21 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip020)\" d=\"M2142.94 1312.37 Q2139.33 1312.37 2137.5 1315.93 Q2135.69 1319.47 2135.69 1326.6 Q2135.69 1333.71 2137.5 1337.27 Q2139.33 1340.82 2142.94 1340.82 Q2146.57 1340.82 2148.38 1337.27 Q2150.21 1333.71 2150.21 1326.6 Q2150.21 1319.47 2148.38 1315.93 Q2146.57 1312.37 2142.94 1312.37 M2142.94 1308.66 Q2148.75 1308.66 2151.81 1313.27 Q2154.88 1317.85 2154.88 1326.6 Q2154.88 1335.33 2151.81 1339.94 Q2148.75 1344.52 2142.94 1344.52 Q2137.13 1344.52 2134.05 1339.94 Q2131 1335.33 2131 1326.6 Q2131 1317.85 2134.05 1313.27 Q2137.13 1308.66 2142.94 1308.66 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip020)\" d=\"M2173.1 1312.37 Q2169.49 1312.37 2167.66 1315.93 Q2165.86 1319.47 2165.86 1326.6 Q2165.86 1333.71 2167.66 1337.27 Q2169.49 1340.82 2173.1 1340.82 Q2176.74 1340.82 2178.54 1337.27 Q2180.37 1333.71 2180.37 1326.6 Q2180.37 1319.47 2178.54 1315.93 Q2176.74 1312.37 2173.1 1312.37 M2173.1 1308.66 Q2178.91 1308.66 2181.97 1313.27 Q2185.05 1317.85 2185.05 1326.6 Q2185.05 1335.33 2181.97 1339.94 Q2178.91 1344.52 2173.1 1344.52 Q2167.29 1344.52 2164.21 1339.94 Q2161.16 1335.33 2161.16 1326.6 Q2161.16 1317.85 2164.21 1313.27 Q2167.29 1308.66 2173.1 1308.66 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip020)\" d=\"M2203.26 1312.37 Q2199.65 1312.37 2197.82 1315.93 Q2196.02 1319.47 2196.02 1326.6 Q2196.02 1333.71 2197.82 1337.27 Q2199.65 1340.82 2203.26 1340.82 Q2206.9 1340.82 2208.7 1337.27 Q2210.53 1333.71 2210.53 1326.6 Q2210.53 1319.47 2208.7 1315.93 Q2206.9 1312.37 2203.26 1312.37 M2203.26 1308.66 Q2209.07 1308.66 2212.13 1313.27 Q2215.21 1317.85 2215.21 1326.6 Q2215.21 1335.33 2212.13 1339.94 Q2209.07 1344.52 2203.26 1344.52 Q2197.45 1344.52 2194.38 1339.94 Q2191.32 1335.33 2191.32 1326.6 Q2191.32 1317.85 2194.38 1313.27 Q2197.45 1308.66 2203.26 1308.66 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip020)\" d=\"M1237.32 1391.71 L1237.32 1397.25 Q1234.84 1395.98 1232.17 1395.34 Q1229.49 1394.71 1226.63 1394.71 Q1222.27 1394.71 1220.07 1396.04 Q1217.91 1397.38 1217.91 1400.05 Q1217.91 1402.09 1219.47 1403.27 Q1221.03 1404.41 1225.74 1405.46 L1227.74 1405.91 Q1233.98 1407.25 1236.59 1409.7 Q1239.23 1412.12 1239.23 1416.48 Q1239.23 1421.44 1235.29 1424.34 Q1231.37 1427.23 1224.5 1427.23 Q1221.63 1427.23 1218.51 1426.66 Q1215.42 1426.12 1211.99 1425.01 L1211.99 1418.96 Q1215.23 1420.65 1218.38 1421.51 Q1221.54 1422.33 1224.62 1422.33 Q1228.76 1422.33 1230.99 1420.93 Q1233.22 1419.5 1233.22 1416.92 Q1233.22 1414.54 1231.59 1413.26 Q1230 1411.99 1224.56 1410.81 L1222.52 1410.33 Q1217.08 1409.19 1214.66 1406.83 Q1212.24 1404.45 1212.24 1400.31 Q1212.24 1395.28 1215.81 1392.54 Q1219.37 1389.8 1225.93 1389.8 Q1229.17 1389.8 1232.04 1390.28 Q1234.9 1390.76 1237.32 1391.71 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip020)\" d=\"M1254.35 1380.54 L1254.35 1390.66 L1266.41 1390.66 L1266.41 1395.22 L1254.35 1395.22 L1254.35 1414.57 Q1254.35 1418.93 1255.53 1420.17 Q1256.74 1421.41 1260.4 1421.41 L1266.41 1421.41 L1266.41 1426.31 L1260.4 1426.31 Q1253.62 1426.31 1251.04 1423.8 Q1248.46 1421.25 1248.46 1414.57 L1248.46 1395.22 L1244.17 1395.22 L1244.17 1390.66 L1248.46 1390.66 L1248.46 1380.54 L1254.35 1380.54 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip020)\" d=\"M1304.61 1407.02 L1304.61 1409.89 L1277.68 1409.89 Q1278.06 1415.94 1281.31 1419.12 Q1284.59 1422.27 1290.41 1422.27 Q1293.79 1422.27 1296.94 1421.44 Q1300.12 1420.61 1303.24 1418.96 L1303.24 1424.5 Q1300.09 1425.83 1296.78 1426.53 Q1293.47 1427.23 1290.06 1427.23 Q1281.53 1427.23 1276.54 1422.27 Q1271.57 1417.3 1271.57 1408.84 Q1271.57 1400.08 1276.28 1394.96 Q1281.02 1389.8 1289.04 1389.8 Q1296.24 1389.8 1300.41 1394.45 Q1304.61 1399.07 1304.61 1407.02 M1298.75 1405.3 Q1298.69 1400.5 1296.05 1397.63 Q1293.44 1394.77 1289.11 1394.77 Q1284.21 1394.77 1281.25 1397.54 Q1278.32 1400.31 1277.87 1405.34 L1298.75 1405.3 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip020)\" d=\"M1319.89 1420.96 L1319.89 1439.87 L1314 1439.87 L1314 1390.66 L1319.89 1390.66 L1319.89 1396.07 Q1321.73 1392.89 1324.53 1391.36 Q1327.37 1389.8 1331.28 1389.8 Q1337.77 1389.8 1341.82 1394.96 Q1345.89 1400.12 1345.89 1408.52 Q1345.89 1416.92 1341.82 1422.08 Q1337.77 1427.23 1331.28 1427.23 Q1327.37 1427.23 1324.53 1425.71 Q1321.73 1424.15 1319.89 1420.96 M1339.81 1408.52 Q1339.81 1402.06 1337.14 1398.4 Q1334.5 1394.71 1329.85 1394.71 Q1325.2 1394.71 1322.53 1398.4 Q1319.89 1402.06 1319.89 1408.52 Q1319.89 1414.98 1322.53 1418.67 Q1325.2 1422.33 1329.85 1422.33 Q1334.5 1422.33 1337.14 1418.67 Q1339.81 1414.98 1339.81 1408.52 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><polyline clip-path=\"url(#clip020)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"346.853,1281.45 346.853,188.976 \"/>\n<polyline clip-path=\"url(#clip020)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"346.853,1154.13 365.751,1154.13 \"/>\n<polyline clip-path=\"url(#clip020)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"346.853,1005.36 365.751,1005.36 \"/>\n<polyline clip-path=\"url(#clip020)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"346.853,856.588 365.751,856.588 \"/>\n<polyline clip-path=\"url(#clip020)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"346.853,707.818 365.751,707.818 \"/>\n<polyline clip-path=\"url(#clip020)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"346.853,559.047 365.751,559.047 \"/>\n<polyline clip-path=\"url(#clip020)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"346.853,410.277 365.751,410.277 \"/>\n<polyline clip-path=\"url(#clip020)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"346.853,261.506 365.751,261.506 \"/>\n<path clip-path=\"url(#clip020)\" d=\"M298.909 1139.93 Q295.298 1139.93 293.469 1143.49 Q291.664 1147.03 291.664 1154.16 Q291.664 1161.27 293.469 1164.84 Q295.298 1168.38 298.909 1168.38 Q302.543 1168.38 304.349 1164.84 Q306.177 1161.27 306.177 1154.16 Q306.177 1147.03 304.349 1143.49 Q302.543 1139.93 298.909 1139.93 M298.909 1136.22 Q304.719 1136.22 307.775 1140.83 Q310.853 1145.41 310.853 1154.16 Q310.853 1162.89 307.775 1167.5 Q304.719 1172.08 298.909 1172.08 Q293.099 1172.08 290.02 1167.5 Q286.964 1162.89 286.964 1154.16 Q286.964 1145.41 290.02 1140.83 Q293.099 1136.22 298.909 1136.22 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip020)\" d=\"M259.557 1018.7 L267.196 1018.7 L267.196 992.338 L258.886 994.005 L258.886 989.746 L267.15 988.079 L271.826 988.079 L271.826 1018.7 L279.465 1018.7 L279.465 1022.64 L259.557 1022.64 L259.557 1018.7 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip020)\" d=\"M298.909 991.158 Q295.298 991.158 293.469 994.722 Q291.664 998.264 291.664 1005.39 Q291.664 1012.5 293.469 1016.06 Q295.298 1019.61 298.909 1019.61 Q302.543 1019.61 304.349 1016.06 Q306.177 1012.5 306.177 1005.39 Q306.177 998.264 304.349 994.722 Q302.543 991.158 298.909 991.158 M298.909 987.454 Q304.719 987.454 307.775 992.06 Q310.853 996.644 310.853 1005.39 Q310.853 1014.12 307.775 1018.73 Q304.719 1023.31 298.909 1023.31 Q293.099 1023.31 290.02 1018.73 Q286.964 1014.12 286.964 1005.39 Q286.964 996.644 290.02 992.06 Q293.099 987.454 298.909 987.454 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip020)\" d=\"M262.775 869.933 L279.094 869.933 L279.094 873.868 L257.15 873.868 L257.15 869.933 Q259.812 867.179 264.395 862.549 Q269.002 857.896 270.182 856.554 Q272.428 854.031 273.307 852.294 Q274.21 850.535 274.21 848.845 Q274.21 846.091 272.266 844.355 Q270.344 842.619 267.242 842.619 Q265.043 842.619 262.59 843.382 Q260.159 844.146 257.381 845.697 L257.381 840.975 Q260.205 839.841 262.659 839.262 Q265.113 838.683 267.15 838.683 Q272.52 838.683 275.715 841.369 Q278.909 844.054 278.909 848.544 Q278.909 850.674 278.099 852.595 Q277.312 854.494 275.205 857.086 Q274.627 857.757 271.525 860.975 Q268.423 864.169 262.775 869.933 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip020)\" d=\"M298.909 842.387 Q295.298 842.387 293.469 845.952 Q291.664 849.494 291.664 856.623 Q291.664 863.73 293.469 867.294 Q295.298 870.836 298.909 870.836 Q302.543 870.836 304.349 867.294 Q306.177 863.73 306.177 856.623 Q306.177 849.494 304.349 845.952 Q302.543 842.387 298.909 842.387 M298.909 838.683 Q304.719 838.683 307.775 843.29 Q310.853 847.873 310.853 856.623 Q310.853 865.35 307.775 869.956 Q304.719 874.54 298.909 874.54 Q293.099 874.54 290.02 869.956 Q286.964 865.35 286.964 856.623 Q286.964 847.873 290.02 843.29 Q293.099 838.683 298.909 838.683 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip020)\" d=\"M272.914 706.464 Q276.27 707.181 278.145 709.45 Q280.043 711.718 280.043 715.052 Q280.043 720.167 276.525 722.968 Q273.006 725.769 266.525 725.769 Q264.349 725.769 262.034 725.329 Q259.742 724.913 257.289 724.056 L257.289 719.542 Q259.233 720.677 261.548 721.255 Q263.863 721.834 266.386 721.834 Q270.784 721.834 273.076 720.098 Q275.39 718.362 275.39 715.052 Q275.39 711.996 273.238 710.283 Q271.108 708.547 267.289 708.547 L263.261 708.547 L263.261 704.705 L267.474 704.705 Q270.923 704.705 272.752 703.339 Q274.58 701.95 274.58 699.357 Q274.58 696.695 272.682 695.283 Q270.807 693.848 267.289 693.848 Q265.367 693.848 263.168 694.265 Q260.969 694.681 258.33 695.561 L258.33 691.394 Q260.992 690.654 263.307 690.283 Q265.645 689.913 267.705 689.913 Q273.029 689.913 276.131 692.343 Q279.233 694.751 279.233 698.871 Q279.233 701.742 277.59 703.732 Q275.946 705.7 272.914 706.464 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip020)\" d=\"M298.909 693.617 Q295.298 693.617 293.469 697.181 Q291.664 700.723 291.664 707.853 Q291.664 714.959 293.469 718.524 Q295.298 722.066 298.909 722.066 Q302.543 722.066 304.349 718.524 Q306.177 714.959 306.177 707.853 Q306.177 700.723 304.349 697.181 Q302.543 693.617 298.909 693.617 M298.909 689.913 Q304.719 689.913 307.775 694.519 Q310.853 699.103 310.853 707.853 Q310.853 716.579 307.775 721.186 Q304.719 725.769 298.909 725.769 Q293.099 725.769 290.02 721.186 Q286.964 716.579 286.964 707.853 Q286.964 699.103 290.02 694.519 Q293.099 689.913 298.909 689.913 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip020)\" d=\"M271.594 545.841 L259.789 564.29 L271.594 564.29 L271.594 545.841 M270.367 541.767 L276.247 541.767 L276.247 564.29 L281.177 564.29 L281.177 568.179 L276.247 568.179 L276.247 576.327 L271.594 576.327 L271.594 568.179 L255.992 568.179 L255.992 563.665 L270.367 541.767 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip020)\" d=\"M298.909 544.846 Q295.298 544.846 293.469 548.411 Q291.664 551.953 291.664 559.082 Q291.664 566.189 293.469 569.753 Q295.298 573.295 298.909 573.295 Q302.543 573.295 304.349 569.753 Q306.177 566.189 306.177 559.082 Q306.177 551.953 304.349 548.411 Q302.543 544.846 298.909 544.846 M298.909 541.142 Q304.719 541.142 307.775 545.749 Q310.853 550.332 310.853 559.082 Q310.853 567.809 307.775 572.415 Q304.719 576.999 298.909 576.999 Q293.099 576.999 290.02 572.415 Q286.964 567.809 286.964 559.082 Q286.964 550.332 290.02 545.749 Q293.099 541.142 298.909 541.142 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip020)\" d=\"M258.793 392.997 L277.15 392.997 L277.15 396.932 L263.076 396.932 L263.076 405.404 Q264.094 405.057 265.113 404.895 Q266.131 404.71 267.15 404.71 Q272.937 404.71 276.316 407.881 Q279.696 411.052 279.696 416.469 Q279.696 422.048 276.224 425.15 Q272.752 428.228 266.432 428.228 Q264.256 428.228 261.988 427.858 Q259.742 427.487 257.335 426.747 L257.335 422.048 Q259.418 423.182 261.641 423.738 Q263.863 424.293 266.34 424.293 Q270.344 424.293 272.682 422.187 Q275.02 420.08 275.02 416.469 Q275.02 412.858 272.682 410.751 Q270.344 408.645 266.34 408.645 Q264.465 408.645 262.59 409.062 Q260.738 409.478 258.793 410.358 L258.793 392.997 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip020)\" d=\"M298.909 396.076 Q295.298 396.076 293.469 399.64 Q291.664 403.182 291.664 410.312 Q291.664 417.418 293.469 420.983 Q295.298 424.525 298.909 424.525 Q302.543 424.525 304.349 420.983 Q306.177 417.418 306.177 410.312 Q306.177 403.182 304.349 399.64 Q302.543 396.076 298.909 396.076 M298.909 392.372 Q304.719 392.372 307.775 396.978 Q310.853 401.562 310.853 410.312 Q310.853 419.038 307.775 423.645 Q304.719 428.228 298.909 428.228 Q293.099 428.228 290.02 423.645 Q286.964 419.038 286.964 410.312 Q286.964 401.562 290.02 396.978 Q293.099 392.372 298.909 392.372 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip020)\" d=\"M269.326 259.643 Q266.178 259.643 264.326 261.796 Q262.497 263.949 262.497 267.699 Q262.497 271.425 264.326 273.601 Q266.178 275.754 269.326 275.754 Q272.474 275.754 274.303 273.601 Q276.154 271.425 276.154 267.699 Q276.154 263.949 274.303 261.796 Q272.474 259.643 269.326 259.643 M278.608 244.99 L278.608 249.25 Q276.849 248.416 275.043 247.976 Q273.261 247.537 271.502 247.537 Q266.872 247.537 264.418 250.662 Q261.988 253.787 261.641 260.106 Q263.006 258.092 265.066 257.027 Q267.127 255.939 269.603 255.939 Q274.812 255.939 277.821 259.111 Q280.853 262.259 280.853 267.699 Q280.853 273.023 277.705 276.24 Q274.557 279.458 269.326 279.458 Q263.33 279.458 260.159 274.874 Q256.988 270.268 256.988 261.541 Q256.988 253.347 260.877 248.486 Q264.766 243.601 271.316 243.601 Q273.076 243.601 274.858 243.949 Q276.664 244.296 278.608 244.99 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip020)\" d=\"M298.909 247.305 Q295.298 247.305 293.469 250.87 Q291.664 254.412 291.664 261.541 Q291.664 268.648 293.469 272.212 Q295.298 275.754 298.909 275.754 Q302.543 275.754 304.349 272.212 Q306.177 268.648 306.177 261.541 Q306.177 254.412 304.349 250.87 Q302.543 247.305 298.909 247.305 M298.909 243.601 Q304.719 243.601 307.775 248.208 Q310.853 252.791 310.853 261.541 Q310.853 270.268 307.775 274.874 Q304.719 279.458 298.909 279.458 Q293.099 279.458 290.02 274.874 Q286.964 270.268 286.964 261.541 Q286.964 252.791 290.02 248.208 Q293.099 243.601 298.909 243.601 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip020)\" d=\"M186.448 812.969 L189.313 812.969 L189.313 839.896 Q195.36 839.514 198.543 836.268 Q201.694 832.989 201.694 827.165 Q201.694 823.791 200.867 820.64 Q200.039 817.457 198.384 814.338 L203.922 814.338 Q205.259 817.489 205.959 820.799 Q206.659 824.109 206.659 827.515 Q206.659 836.045 201.694 841.042 Q196.729 846.007 188.263 846.007 Q179.51 846.007 174.385 841.296 Q169.229 836.554 169.229 828.533 Q169.229 821.34 173.876 817.17 Q178.491 812.969 186.448 812.969 M184.73 818.826 Q179.924 818.889 177.059 821.531 Q174.194 824.141 174.194 828.47 Q174.194 833.371 176.963 836.331 Q179.733 839.259 184.761 839.705 L184.73 818.826 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip020)\" d=\"M184.22 773.724 L205.736 773.724 L205.736 779.581 L184.411 779.581 Q179.351 779.581 176.836 781.554 Q174.322 783.528 174.322 787.474 Q174.322 792.217 177.345 794.954 Q180.369 797.691 185.589 797.691 L205.736 797.691 L205.736 803.58 L170.088 803.58 L170.088 797.691 L175.627 797.691 Q172.412 795.591 170.821 792.758 Q169.229 789.893 169.229 786.169 Q169.229 780.027 173.049 776.876 Q176.836 773.724 184.22 773.724 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip020)\" d=\"M186.448 731.552 L189.313 731.552 L189.313 758.479 Q195.36 758.097 198.543 754.85 Q201.694 751.572 201.694 745.747 Q201.694 742.373 200.867 739.222 Q200.039 736.04 198.384 732.92 L203.922 732.92 Q205.259 736.071 205.959 739.382 Q206.659 742.692 206.659 746.097 Q206.659 754.627 201.694 759.624 Q196.729 764.59 188.263 764.59 Q179.51 764.59 174.385 759.879 Q169.229 755.137 169.229 747.116 Q169.229 739.923 173.876 735.753 Q178.491 731.552 186.448 731.552 M184.73 737.408 Q179.924 737.472 177.059 740.114 Q174.194 742.724 174.194 747.052 Q174.194 751.954 176.963 754.914 Q179.733 757.842 184.761 758.288 L184.73 737.408 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip020)\" d=\"M175.563 701.283 Q174.99 702.269 174.735 703.447 Q174.449 704.593 174.449 705.993 Q174.449 710.959 177.696 713.632 Q180.91 716.274 186.958 716.274 L205.736 716.274 L205.736 722.162 L170.088 722.162 L170.088 716.274 L175.627 716.274 Q172.38 714.428 170.821 711.468 Q169.229 708.508 169.229 704.275 Q169.229 703.67 169.325 702.938 Q169.388 702.206 169.547 701.315 L175.563 701.283 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip020)\" d=\"M187.499 672.828 Q181.133 672.828 177.632 675.47 Q174.131 678.08 174.131 682.822 Q174.131 687.533 177.632 690.175 Q181.133 692.785 187.499 692.785 Q193.833 692.785 197.334 690.175 Q200.835 687.533 200.835 682.822 Q200.835 678.08 197.334 675.47 Q193.833 672.828 187.499 672.828 M201.312 666.972 Q210.415 666.972 214.839 671.014 Q219.295 675.056 219.295 683.395 Q219.295 686.482 218.818 689.22 Q218.372 691.957 217.418 694.535 L211.72 694.535 Q213.121 691.957 213.789 689.443 Q214.457 686.928 214.457 684.318 Q214.457 678.557 211.434 675.693 Q208.442 672.828 202.363 672.828 L199.466 672.828 Q202.617 674.642 204.177 677.475 Q205.736 680.308 205.736 684.254 Q205.736 690.811 200.739 694.822 Q195.742 698.832 187.499 698.832 Q179.223 698.832 174.226 694.822 Q169.229 690.811 169.229 684.254 Q169.229 680.308 170.789 677.475 Q172.348 674.642 175.499 672.828 L170.088 672.828 L170.088 666.972 L201.312 666.972 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip020)\" d=\"M209.047 640.076 Q215.412 642.559 217.354 644.914 Q219.295 647.27 219.295 651.216 L219.295 655.895 L214.394 655.895 L214.394 652.458 Q214.394 650.039 213.248 648.702 Q212.102 647.365 207.837 645.742 L205.164 644.692 L170.088 659.11 L170.088 652.903 L197.97 641.763 L170.088 630.623 L170.088 624.417 L209.047 640.076 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><polyline clip-path=\"url(#clip022)\" style=\"stroke:#009af9; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"399.613,1044.51 400.199,943.805 400.786,851.404 401.372,766.749 401.958,689.325 402.545,724.013 403.131,652.804 403.718,590.935 404.304,533.396 404.891,481.129 405.477,433.932 406.063,391.476 406.65,353.454 407.236,320.995 407.823,290.918 408.409,265.898 408.995,242.76 409.582,222.793 410.168,259.525 410.755,243.972 411.341,231.065 411.927,219.895 412.514,250.398 413.1,276.88 413.687,301.092 414.273,324.129 414.86,398.346 415.446,438.411 416.032,429.677 416.619,422.133 417.205,414.952 417.792,409.767 418.378,406.53 418.964,403.872 419.551,420.115 420.137,436.633 420.724,438.896 421.31,469.867 421.896,486.456 422.483,513.863 423.069,539.847 423.656,543.627 424.242,558.645 424.829,573.342 425.415,579.783 426.001,586.329 426.588,592.169 427.174,599.224 427.761,613.952 428.347,621.318 428.933,629.238 429.52,637.394 430.106,659.045 430.693,673.5 431.279,687.626 431.865,701.829 432.452,731.452 433.038,749.043 433.625,775.932 434.211,781.658 434.798,792.988 435.384,808.005 435.97,813.699 436.557,832.258 437.143,837.561 437.73,853.936 438.316,866.849 438.902,875.456 439.489,883.959 440.075,892.761 440.662,908.248 441.248,912.976 441.835,921.089 442.421,929.327 443.007,934.457 443.594,950.81 444.18,958.53 444.767,963.251 445.353,973.286 445.939,985.999 446.526,992.68 447.112,999.323 447.699,1008.19 448.285,1014.81 448.871,1018.67 449.458,1024.86 450.044,1030.78 450.631,1038.98 451.217,1047.19 451.804,1052.83 452.39,1058.3 452.976,1069.73 453.563,1072.78 454.149,1079.57 454.736,1086.4 455.322,1095.23 455.908,1097.95 456.495,1104.05 457.081,1106.28 457.668,1112.47 458.254,1118.3 458.84,1124.05 459.427,1125.92 460.013,1127.95 460.6,1129.99 461.186,1137.44 461.773,1142.41 462.359,1143.84 462.945,1148.94 463.532,1152.11 464.118,1153.66 464.705,1158.16 465.291,1161.01 465.877,1165.38 466.464,1168.11 467.05,1172.21 467.637,1173 468.223,1173.67 468.809,1174.64 469.396,1172.42 469.982,1173.85 470.569,1176.77 471.155,1178.08 471.742,1181.99 472.328,1183.2 472.914,1185.81 473.501,1188.29 474.087,1192.09 474.674,1192.91 475.26,1194.98 475.846,1200.18 476.433,1202.37 477.019,1205.65 477.606,1208.88 478.192,1208.73 478.778,1210.39 479.365,1210.61 479.951,1212.24 480.538,1216.58 481.124,1216.54 481.711,1219.21 482.297,1217.59 482.883,1217.58 483.47,1220.27 484.056,1224.39 484.643,1225.32 485.229,1227.91 485.815,1228.85 486.402,1229.94 486.988,1232.35 487.575,1231.65 488.161,1234.94 488.748,1235.62 489.334,1236.16 489.92,1234.04 490.507,1237.75 491.093,1235.79 491.68,1233.96 492.266,1237.39 492.852,1235.38 493.439,1236.47 494.025,1237.58 494.612,1239.82 495.198,1240.47 495.784,1241.35 496.371,1240.58 496.957,1242.66 497.544,1240.53 498.13,1239.85 498.717,1237.77 499.303,1240.02 499.889,1243.49 500.476,1245.37 501.062,1245.88 501.649,1243.71 502.235,1244.23 502.821,1248.69 503.408,1250.28 503.994,1250.53 504.581,1249.66 505.167,1247.25 505.753,1247.71 506.34,1246.41 506.926,1245.58 507.513,1246.19 508.099,1245.29 508.686,1244.37 509.272,1243.66 509.858,1241.62 510.445,1244.85 511.031,1245.48 511.618,1244.29 512.204,1243.76 512.79,1244.28 513.377,1243.63 513.963,1241.44 514.55,1241.16 515.136,1239.22 515.722,1240.32 516.309,1239.8 516.895,1239.5 517.482,1240.4 518.068,1243.87 518.655,1244.69 519.241,1246.71 519.827,1248.44 520.414,1245.1 521,1242.88 521.587,1239.55 522.173,1240.49 522.759,1240.04 523.346,1240.93 523.932,1237.89 524.519,1237.51 525.105,1237.19 525.691,1239.49 526.278,1243.94 526.864,1245.85 527.451,1243.9 528.037,1245.77 528.624,1246.36 529.21,1248.02 529.796,1249.97 530.383,1250.12 530.969,1245.32 531.556,1244.31 532.142,1243.73 532.728,1244.36 533.315,1242.56 533.901,1241.99 534.488,1242.65 535.074,1243.13 535.661,1242.36 536.247,1239.56 536.833,1237.77 537.42,1238.71 538.006,1236.95 538.593,1236.86 539.179,1236.56 539.765,1233.82 540.352,1233.45 540.938,1233.4 541.525,1234.67 542.111,1234.65 542.697,1234.06 543.284,1232.78 543.87,1232.45 544.457,1237.29 545.043,1238.24 545.63,1237.81 546.216,1234.73 546.802,1234.42 547.389,1234.28 547.975,1230.61 548.562,1232.94 549.148,1230.21 549.734,1230.18 550.321,1230.25 550.907,1230.1 551.494,1230.02 552.08,1230.01 552.666,1228.61 553.253,1228.57 553.839,1231.09 554.426,1229.67 555.012,1231.12 555.599,1232.48 556.185,1232.17 556.771,1230.57 557.358,1231.78 557.944,1232.96 558.531,1232.63 559.117,1233.59 559.703,1234.4 560.29,1234.08 560.876,1233.73 561.463,1232.46 562.049,1233.34 562.635,1234.52 563.222,1233.23 563.808,1234.19 564.395,1232.18 564.981,1230.91 565.568,1230.61 566.154,1227.99 566.74,1230.56 567.327,1232.84 567.913,1234.75 568.5,1233.32 569.086,1231.73 569.672,1234 570.259,1233.91 570.845,1234.82 571.432,1233.42 572.018,1231.89 572.605,1231.71 573.191,1232.86 573.777,1231.36 574.364,1231.16 574.95,1234.66 575.537,1235.35 576.123,1236.31 576.709,1237.28 577.296,1239.45 577.882,1243.7 578.469,1242.75 579.055,1241.84 579.641,1242.14 580.228,1238.75 580.814,1239.41 581.401,1237.76 581.987,1239.71 582.574,1244.05 583.16,1241.97 583.746,1238.92 584.333,1239.74 584.919,1239.98 585.506,1240.44 586.092,1241.95 586.678,1239.67 587.265,1238.98 587.851,1239.63 588.438,1237.53 589.024,1235.55 589.61,1236.01 590.197,1236.66 590.783,1237.53 591.37,1230.71 591.956,1229.09 592.543,1228.76 593.129,1231.05 593.715,1229.56 594.302,1226.67 594.888,1227.45 595.475,1229.74 596.061,1228.2 596.647,1225.67 597.234,1223.16 597.82,1225.58 598.407,1229.17 598.993,1228.97 599.579,1229.87 600.166,1229.9 600.752,1227.15 601.339,1226.94 601.925,1223.42 602.512,1222.24 603.098,1222.64 603.684,1223.91 604.271,1223.75 604.857,1222.51 605.444,1222.71 606.03,1221.6 606.616,1220.61 607.203,1217.27 607.789,1218.92 608.376,1218.21 608.962,1216.1 609.548,1215.44 610.135,1217.27 610.721,1220.08 611.308,1219.37 611.894,1223.5 612.481,1222.28 613.067,1223.68 613.653,1226.06 614.24,1228.38 614.826,1227.28 615.413,1224.61 615.999,1225.7 616.585,1225.73 617.172,1229.17 617.758,1231.36 618.345,1231.1 618.931,1232.02 619.518,1230.24 620.104,1229.86 620.69,1230.53 621.277,1229.95 621.863,1229.52 622.45,1231.5 623.036,1229.93 623.622,1230.66 624.209,1230.25 624.795,1229.87 625.382,1227.13 625.968,1225.79 626.554,1223.11 627.141,1222.02 627.727,1224.16 628.314,1224.16 628.9,1226.26 629.487,1228.43 630.073,1227.9 630.659,1227.6 631.246,1226.2 631.832,1224.68 632.419,1224.57 633.005,1224.46 633.591,1224.17 634.178,1223.09 634.764,1224.2 635.351,1223.98 635.937,1223.73 636.523,1224.93 637.11,1228.45 637.696,1226.85 638.283,1225.04 638.869,1225.7 639.456,1225.42 640.042,1226.22 640.628,1222.74 641.215,1222.49 641.801,1222.48 642.388,1223.66 642.974,1221.31 643.56,1221.32 644.147,1221.54 644.733,1221.61 645.32,1223.14 645.906,1224.39 646.492,1224.15 647.079,1226.21 647.665,1227.1 648.252,1226.66 648.838,1225.27 649.425,1226.62 650.011,1227.48 650.597,1229.73 651.184,1230.25 651.77,1231.97 652.357,1231.1 652.943,1230.55 653.529,1227.78 654.116,1227.4 654.702,1225.71 655.289,1225.41 655.875,1226.51 656.462,1226.27 657.048,1230.98 657.634,1230.47 658.221,1229.05 658.807,1226.29 659.394,1227.38 659.98,1228.33 660.566,1227.96 661.153,1227.25 661.739,1226.65 662.326,1226.31 662.912,1229.74 663.498,1229.13 664.085,1231.09 664.671,1231.76 665.258,1230.04 665.844,1230.65 666.431,1228.91 667.017,1228.31 667.603,1227.97 668.19,1226.53 668.776,1228.91 669.363,1225.99 669.949,1225.69 670.535,1224.36 671.122,1224.34 671.708,1221.71 672.295,1221.7 672.881,1219.31 673.467,1218.11 674.054,1216.98 674.64,1215.86 675.227,1217.03 675.813,1216.08 676.4,1217.31 676.986,1217.49 677.572,1216.4 678.159,1216.63 678.745,1216.57 679.332,1216.7 679.918,1216.6 680.504,1218.22 681.091,1219.42 681.677,1219.63 682.264,1220.73 682.85,1218.5 683.436,1217.08 684.023,1218.37 684.609,1217.27 685.196,1214.82 685.782,1216.52 686.369,1218.01 686.955,1215.54 687.541,1217.25 688.128,1217.45 688.714,1216.15 689.301,1217.64 689.887,1217.63 690.473,1216.68 691.06,1216.96 691.646,1217.23 692.233,1217.29 692.819,1218.43 693.405,1222.35 693.992,1223.41 694.578,1222.1 695.165,1222.04 695.751,1221.69 696.338,1221.46 696.924,1223.82 697.51,1221.21 698.097,1223.56 698.683,1223.2 699.27,1224.26 699.856,1227.61 700.442,1228.41 701.029,1230.2 701.615,1231.16 702.202,1232.59 702.788,1233.17 703.375,1231.37 703.961,1229.65 704.547,1230.19 705.134,1232 705.72,1230.19 706.307,1229.87 706.893,1231.89 707.479,1232.65 708.066,1232.05 708.652,1232.67 709.239,1232.16 709.825,1231.71 710.411,1231.24 710.998,1229.29 711.584,1228.44 712.171,1229.23 712.757,1231.02 713.344,1229.25 713.93,1228.44 714.516,1224.2 715.103,1222.57 715.689,1221.18 716.276,1219.98 716.862,1217.68 717.448,1215.35 718.035,1213 718.621,1216.89 719.208,1219.31 719.794,1217.84 720.38,1212.91 720.967,1210.69 721.553,1211.08 722.14,1211.15 722.726,1212.54 723.313,1212.8 723.899,1214.38 724.485,1214.77 725.072,1217.53 725.658,1218.72 726.245,1219.88 726.831,1222.08 727.417,1221.96 728.004,1221.75 728.59,1222.65 729.177,1224.85 729.763,1225.35 730.349,1224.79 730.936,1224.52 731.522,1227.82 732.109,1230.92 732.695,1228.9 733.282,1227.14 733.868,1226.76 734.454,1222.7 735.041,1223.67 735.627,1224.6 736.214,1221.7 736.8,1220.07 737.386,1217.51 737.973,1216.17 738.559,1217.68 739.146,1216.66 739.732,1218.15 740.318,1220.34 740.905,1217.94 741.491,1219.03 742.078,1218.7 742.664,1217.44 743.251,1217.34 743.837,1217.31 744.423,1215.98 745.01,1216.16 745.596,1212.6 746.183,1212.71 746.769,1215.59 747.355,1212.85 747.942,1214.32 748.528,1212.99 749.115,1215.62 749.701,1218.22 750.288,1219.4 750.874,1219.33 751.46,1220.43 752.047,1219.05 752.633,1217.77 753.22,1217.61 753.806,1215.41 754.392,1214.26 754.979,1214.75 755.565,1214.95 756.152,1213.92 756.738,1215.33 757.324,1214.13 757.911,1213.08 758.497,1209.61 759.084,1211.44 759.67,1213.04 760.257,1214.49 760.843,1214.79 761.429,1212.51 762.016,1215.35 762.602,1214.25 763.189,1215.54 763.775,1213.28 764.361,1213.51 764.948,1212.49 765.534,1212.69 766.121,1214.26 766.707,1214.47 767.293,1213.34 767.88,1211.02 768.466,1212.83 769.053,1211.92 769.639,1209.73 770.226,1210.12 770.812,1212.83 771.398,1211.95 771.985,1212.15 772.571,1213.52 773.158,1213.61 773.744,1213.83 774.33,1216.29 774.917,1219.05 775.503,1219.19 776.09,1219.09 776.676,1217.93 777.262,1215.5 777.849,1219.35 778.435,1220.39 779.022,1217.78 779.608,1214.08 780.195,1215.09 780.781,1216.7 781.367,1215.47 781.954,1215.44 782.54,1216.57 783.127,1216.61 783.713,1218.99 784.299,1221.13 784.886,1220.97 785.472,1221.72 786.059,1224.15 786.645,1226.09 787.232,1225.72 787.818,1227.59 788.404,1226.09 788.991,1226.67 789.577,1225.89 790.164,1227.91 790.75,1227.3 791.336,1224.28 791.923,1222.61 792.509,1220.77 793.096,1220.39 793.682,1221.34 794.268,1221.1 794.855,1219.65 795.441,1218.26 796.028,1216.74 796.614,1217.66 797.201,1218.82 797.787,1222.42 798.373,1222.19 798.96,1222.24 799.546,1224.45 800.133,1222.8 800.719,1221.38 801.305,1221.2 801.892,1222.09 802.478,1220.8 803.065,1219.26 803.651,1219.06 804.237,1217.63 804.824,1217.22 805.41,1218.3 805.997,1218.04 806.583,1216.72 807.17,1214.33 807.756,1213.37 808.342,1212.4 808.929,1210.19 809.515,1213.07 810.102,1210.76 810.688,1211.24 811.274,1212.83 811.861,1214.22 812.447,1213.05 813.034,1214.37 813.62,1214.64 814.206,1214.82 814.793,1214.69 815.379,1214.91 815.966,1212.59 816.552,1210.52 817.139,1210.91 817.725,1213.55 818.311,1211.72 818.898,1212.11 819.484,1211.32 820.071,1216.46 820.657,1217.57 821.243,1218.65 821.83,1218.53 822.416,1218.52 823.003,1217.39 823.589,1216.32 824.175,1217.59 824.762,1216.52 825.348,1217.43 825.935,1218.58 826.521,1219.79 827.108,1220.88 827.694,1220.78 828.28,1218.39 828.867,1214.65 829.453,1215.98 830.04,1216.14 830.626,1218.57 831.212,1218.44 831.799,1218.15 832.385,1216.86 832.972,1216.52 833.558,1217.56 834.145,1216.23 834.731,1217.43 835.317,1216.21 835.904,1216.25 836.49,1214.75 837.077,1215.94 837.663,1218.08 838.249,1219.08 838.836,1217.76 839.422,1217.74 840.009,1218.82 840.595,1216.2 841.181,1218.66 841.768,1219.87 842.354,1220.78 842.941,1221.86 843.527,1221.35 844.114,1221.87 844.7,1221.44 845.286,1218.71 845.873,1218.47 846.459,1219.42 847.046,1219.35 847.632,1220.61 848.218,1220.54 848.805,1216.68 849.391,1217.81 849.978,1219.15 850.564,1220.5 851.15,1220.21 851.737,1221.27 852.323,1220.81 852.91,1220.43 853.496,1221.45 854.083,1221.33 854.669,1220.02 855.255,1218.53 855.842,1219.67 856.428,1223.26 857.015,1225.28 857.601,1227.03 858.187,1225.22 858.774,1227.5 859.36,1223.39 859.947,1223.02 860.533,1221.44 861.119,1221.01 861.706,1223.06 862.292,1221.28 862.879,1222.27 863.465,1220.53 864.052,1220.07 864.638,1218.64 865.224,1219.93 865.811,1218.72 866.397,1219.97 866.984,1218.6 867.57,1217.24 868.156,1218.54 868.743,1215.99 869.329,1217.15 869.916,1215.78 870.502,1213.41 871.089,1212.33 871.675,1209.87 872.261,1211.13 872.848,1211.18 873.434,1212.49 874.021,1212.94 874.607,1214.34 875.193,1213.09 875.78,1211.96 876.366,1209.57 876.953,1209.92 877.539,1209.18 878.125,1208.38 878.712,1209 879.298,1209.52 879.885,1208.82 880.471,1210.12 881.058,1211.28 881.644,1212.81 882.23,1211.52 882.817,1209.35 883.403,1209.61 883.99,1211.21 884.576,1210.27 885.162,1211.62 885.749,1213.29 886.335,1213.53 886.922,1213.38 887.508,1215.92 888.094,1219.62 888.681,1220.69 889.267,1220.18 889.854,1221.02 890.44,1218.28 891.027,1218.26 891.613,1220.15 892.199,1218.55 892.786,1219.76 893.372,1220.79 893.959,1219.39 894.545,1220.49 895.131,1218.91 895.718,1217.46 896.304,1218.71 896.891,1219.68 897.477,1218.21 898.063,1219.2 898.65,1220.11 899.236,1218.66 899.823,1219.52 900.409,1218.08 900.996,1216.79 901.582,1216.65 902.168,1216.47 902.755,1217.71 903.341,1216.34 903.928,1215.11 904.514,1215.23 905.1,1217.68 905.687,1216.45 906.273,1216.27 906.86,1216.08 907.446,1217.34 908.032,1213.37 908.619,1213.38 909.205,1214.73 909.792,1212.13 910.378,1212.24 910.965,1209.76 911.551,1210.21 912.137,1211.89 912.724,1209.87 913.31,1209.04 913.897,1210.49 914.483,1212.09 915.069,1211.03 915.656,1212.38 916.242,1215.86 916.829,1216.94 917.415,1214.35 918.002,1213.26 918.588,1213.3 919.174,1212.14 919.761,1211.2 920.347,1209.07 920.934,1210.75 921.52,1211.11 922.106,1212.77 922.693,1212.99 923.279,1211.97 923.866,1209.58 924.452,1211.08 925.038,1211.35 925.625,1211.44 926.211,1210.5 926.798,1209.25 927.384,1210.66 927.971,1212.1 928.557,1209.98 929.143,1210.1 929.73,1211.6 930.316,1210.55 930.903,1209.45 931.489,1210.98 932.075,1212.31 932.662,1212.37 933.248,1211.48 933.835,1214.13 934.421,1211.92 935.007,1213.44 935.594,1214.93 936.18,1214.87 936.767,1217.49 937.353,1216.3 937.94,1216.12 938.526,1214.94 939.112,1217.25 939.699,1216.22 940.285,1218.52 940.872,1217.02 941.458,1216.99 942.044,1219.36 942.631,1219.06 943.217,1218.64 943.804,1216.12 944.39,1214.74 944.976,1218.61 945.563,1218.3 946.149,1218.5 946.736,1219.56 947.322,1218.01 947.909,1218.02 948.495,1216.58 949.081,1215.47 949.668,1215.52 950.254,1211.75 950.841,1212.82 951.427,1217.53 952.013,1214.8 952.6,1214.81 953.186,1211.13 953.773,1212.51 954.359,1211.53 954.945,1209.2 955.532,1210.64 956.118,1213.49 956.705,1213.57 957.291,1211.17 957.878,1211.33 958.464,1210.24 959.05,1210.44 959.637,1210.9 960.223,1212.25 960.81,1211.16 961.396,1212.78 961.982,1214.33 962.569,1214.32 963.155,1213.23 963.742,1213.4 964.328,1210.97 964.915,1210.02 965.501,1210.21 966.087,1210.61 966.674,1209.75 967.26,1211.11 967.847,1211.28 968.433,1211.33 969.019,1212.6 969.606,1213.78 970.192,1213.84 970.779,1215.3 971.365,1212.82 971.951,1213.06 972.538,1213 973.124,1213.22 973.711,1210.87 974.297,1210.86 974.884,1209.88 975.47,1212.51 976.056,1211.26 976.643,1211.41 977.229,1212.74 977.816,1214.08 978.402,1214.11 978.988,1214.17 979.575,1216.57 980.161,1218.97 980.748,1219.9 981.334,1220.59 981.92,1222.85 982.507,1221.45 983.093,1221.16 983.68,1216.05 984.266,1216.16 984.853,1216.06 985.439,1216.26 986.025,1214.94 986.612,1214.84 987.198,1216.13 987.785,1214.97 988.371,1215.13 988.957,1215.06 989.544,1218.63 990.13,1218.29 990.717,1214.68 991.303,1216.2 991.889,1216.31 992.476,1214.11 993.062,1211.94 993.649,1213.18 994.235,1213.3 994.822,1214.75 995.408,1213.72 995.994,1216.2 996.581,1213.81 997.167,1211.39 997.754,1211.61 998.34,1211.82 998.926,1211.89 999.513,1209.65 1000.1,1212.34 1000.69,1213.67 1001.27,1215.04 1001.86,1213.9 1002.44,1212.84 1003.03,1212.97 1003.62,1213.22 1004.2,1213.37 1004.79,1213.13 1005.38,1211.93 1005.96,1212.98 1006.55,1212.01 1007.14,1213.41 1007.72,1211.92 1008.31,1211.88 1008.9,1214.58 1009.48,1215.82 1010.07,1218.07 1010.65,1217.96 1011.24,1217.65 1011.83,1222.56 1012.41,1222.06 1013,1219.16 1013.59,1221.23 1014.17,1219.44 1014.76,1217.8 1015.35,1219.92 1015.93,1222 1016.52,1223.83 1017.11,1222.12 1017.69,1218.25 1018.28,1217.43 1018.86,1214.91 1019.45,1213.91 1020.04,1213.89 1020.62,1214.15 1021.21,1212.92 1021.8,1214.25 1022.38,1219.13 1022.97,1217.69 1023.56,1217.49 1024.14,1217.27 1024.73,1216.95 1025.32,1217.01 1025.9,1213.18 1026.49,1213.11 1027.07,1213.22 1027.66,1213.03 1028.25,1214.17 1028.83,1211.81 1029.42,1211.83 1030.01,1211.92 1030.59,1214.46 1031.18,1215.71 1031.77,1214.39 1032.35,1211.83 1032.94,1212 1033.52,1214.84 1034.11,1213.62 1034.7,1213.75 1035.28,1214.88 1035.87,1215.98 1036.46,1215.83 1037.04,1215.86 1037.63,1215.82 1038.22,1213.47 1038.8,1215.78 1039.39,1218.07 1039.98,1215.55 1040.56,1213.12 1041.15,1213.25 1041.73,1213.31 1042.32,1212.04 1042.91,1213.33 1043.49,1213.67 1044.08,1213.71 1044.67,1213.71 1045.25,1212.46 1045.84,1211.25 1046.43,1208.7 1047.01,1208.94 1047.6,1209.29 1048.19,1209.69 1048.77,1209.47 1049.36,1211.97 1049.94,1211.94 1050.53,1213.12 1051.12,1213.32 1051.7,1213.43 1052.29,1214.99 1052.88,1211.25 1053.46,1211.62 1054.05,1211.88 1054.64,1212.04 1055.22,1214.89 1055.81,1214.89 1056.39,1216.03 1056.98,1214.64 1057.57,1213.54 1058.15,1215.83 1058.74,1215.61 1059.33,1215.41 1059.91,1215.27 1060.5,1215.17 1061.09,1215.32 1061.67,1215.29 1062.26,1216.4 1062.85,1219.93 1063.43,1222.03 1064.02,1220.34 1064.6,1217.58 1065.19,1220.86 1065.78,1219.29 1066.36,1218.95 1066.95,1220.89 1067.54,1219.35 1068.12,1216.59 1068.71,1218.81 1069.3,1218.5 1069.88,1219.31 1070.47,1218.79 1071.06,1217.32 1071.64,1214.65 1072.23,1213.64 1072.81,1213.6 1073.4,1213.61 1073.99,1212.66 1074.57,1213.96 1075.16,1216.31 1075.75,1216.12 1076.33,1214.96 1076.92,1213.76 1077.51,1213.76 1078.09,1212.53 1078.68,1213.71 1079.26,1216.01 1079.85,1216.09 1080.44,1217.26 1081.02,1218.3 1081.61,1219.15 1082.2,1220.16 1082.78,1218.85 1083.37,1221.15 1083.96,1220.83 1084.54,1216.78 1085.13,1215.45 1085.72,1216.67 1086.3,1216.58 1086.89,1218.76 1087.47,1219.74 1088.06,1219.49 1088.65,1219.04 1089.23,1220.51 1089.82,1219.01 1090.41,1222.52 1090.99,1220.83 1091.58,1219.2 1092.17,1220.09 1092.75,1220.96 1093.34,1221.86 1093.93,1221.71 1094.51,1223.77 1095.1,1224.49 1095.68,1225.05 1096.27,1222.13 1096.86,1224.26 1097.44,1222.43 1098.03,1223.1 1098.62,1223.84 1099.2,1221.01 1099.79,1218.35 1100.38,1216.94 1100.96,1217 1101.55,1216.84 1102.14,1215.31 1102.72,1216.38 1103.31,1216.44 1103.89,1216.47 1104.48,1218.71 1105.07,1218.49 1105.65,1218.55 1106.24,1217.2 1106.83,1218.42 1107.41,1215.98 1108,1217.09 1108.59,1215.79 1109.17,1216.81 1109.76,1213.02 1110.34,1213.07 1110.93,1213.28 1111.52,1214.52 1112.1,1214.6 1112.69,1215.87 1113.28,1217.05 1113.86,1214.51 1114.45,1213.08 1115.04,1215.68 1115.62,1218.01 1116.21,1216.36 1116.8,1218.64 1117.38,1219.87 1117.97,1220.62 1118.55,1219.2 1119.14,1218.99 1119.73,1218.85 1120.31,1219.67 1120.9,1218.15 1121.49,1218.12 1122.07,1219.11 1122.66,1216.65 1123.25,1217.82 1123.83,1217.32 1124.42,1214.56 1125.01,1211.92 1125.59,1208.56 1126.18,1208.8 1126.76,1210.21 1127.35,1210.34 1127.94,1214.33 1128.52,1212.87 1129.11,1211.67 1129.7,1210.7 1130.28,1212.01 1130.87,1212.07 1131.46,1214.67 1132.04,1213.23 1132.63,1210.94 1133.21,1209.85 1133.8,1208.91 1134.39,1209 1134.97,1208.2 1135.56,1207.56 1136.15,1205.66 1136.73,1206.13 1137.32,1206.81 1137.91,1206.09 1138.49,1208.72 1139.08,1210.21 1139.67,1211.7 1140.25,1211.8 1140.84,1211.61 1141.42,1212.79 1142.01,1212.79 1142.6,1212.83 1143.18,1215.55 1143.77,1215.29 1144.36,1217.5 1144.94,1218.7 1145.53,1219.32 1146.12,1217.83 1146.7,1217.76 1147.29,1218.79 1147.88,1218.58 1148.46,1217.55 1149.05,1217.35 1149.63,1217.16 1150.22,1217 1150.81,1217.77 1151.39,1216.48 1151.98,1214.03 1152.57,1213.92 1153.15,1215.16 1153.74,1210.14 1154.33,1210.26 1154.91,1210.36 1155.5,1211.71 1156.09,1214.32 1156.67,1215.41 1157.26,1215.45 1157.84,1216.77 1158.43,1216.48 1159.02,1215.25 1159.6,1216.38 1160.19,1216.37 1160.78,1217.61 1161.36,1215.85 1161.95,1215.92 1162.54,1215.8 1163.12,1215.55 1163.71,1211.83 1164.29,1211.11 1164.88,1211.42 1165.47,1212.9 1166.05,1211.62 1166.64,1212.93 1167.23,1211.68 1167.81,1211.67 1168.4,1211.89 1168.99,1212.22 1169.57,1212.16 1170.16,1212.26 1170.75,1212.28 1171.33,1213.62 1171.92,1213.67 1172.5,1213.94 1173.09,1215.12 1173.68,1217.24 1174.26,1215.62 1174.85,1214.49 1175.44,1215.25 1176.02,1215.37 1176.61,1213.97 1177.2,1212.66 1177.78,1210.35 1178.37,1209.39 1178.96,1207.02 1179.54,1208.71 1180.13,1208.82 1180.71,1210.17 1181.3,1210.43 1181.89,1208.41 1182.47,1208.8 1183.06,1207.78 1183.65,1208.28 1184.23,1208.5 1184.82,1207.75 1185.41,1205.5 1185.99,1206.03 1186.58,1207.74 1187.16,1207.98 1187.75,1210.85 1188.34,1212.24 1188.92,1211.06 1189.51,1211.12 1190.1,1209.84 1190.68,1211.29 1191.27,1209.99 1191.86,1211.4 1192.44,1208.1 1193.03,1208.56 1193.62,1207.86 1194.2,1209.53 1194.79,1209.88 1195.37,1210.15 1195.96,1212.88 1196.55,1214.3 1197.13,1215.46 1197.72,1215.27 1198.31,1216.45 1198.89,1216.62 1199.48,1216.31 1200.07,1215.1 1200.65,1215.1 1201.24,1216.22 1201.83,1217.28 1202.41,1214.72 1203,1212.36 1203.58,1213.77 1204.17,1213.94 1204.76,1210.66 1205.34,1210.89 1205.93,1211 1206.52,1208.81 1207.1,1211.76 1207.69,1210.66 1208.28,1210.83 1208.86,1210.75 1209.45,1213.29 1210.03,1210.82 1210.62,1211.14 1211.21,1207.63 1211.79,1207.98 1212.38,1208.48 1212.97,1208.8 1213.55,1210.06 1214.14,1210.13 1214.73,1211.64 1215.31,1212.98 1215.9,1211.74 1216.49,1211.82 1217.07,1210.84 1217.66,1210.94 1218.24,1211.15 1218.83,1211.06 1219.42,1211.26 1220,1211.44 1220.59,1214.04 1221.18,1214.2 1221.76,1216.5 1222.35,1216.14 1222.94,1217.44 1223.52,1219.79 1224.11,1217.78 1224.7,1217.51 1225.28,1218.63 1225.87,1217.11 1226.45,1216.83 1227.04,1214.5 1227.63,1215.58 1228.21,1215.4 1228.8,1215.4 1229.39,1215.59 1229.97,1215.68 1230.56,1216.87 1231.15,1215.64 1231.73,1213.16 1232.32,1216.88 1232.91,1216.89 1233.49,1216.65 1234.08,1215.14 1234.66,1213.78 1235.25,1215.17 1235.84,1217.57 1236.42,1215.97 1237.01,1215.93 1237.6,1215.93 1238.18,1217.07 1238.77,1217.92 1239.36,1216.44 1239.94,1217.41 1240.53,1218.31 1241.11,1218.04 1241.7,1218.95 1242.29,1215.93 1242.87,1214.43 1243.46,1214.53 1244.05,1214.3 1244.63,1214.28 1245.22,1215.6 1245.81,1215.74 1246.39,1213.26 1246.98,1215.65 1247.57,1216.7 1248.15,1217.72 1248.74,1217.61 1249.32,1217.5 1249.91,1217.25 1250.5,1218.59 1251.08,1218.46 1251.67,1217.18 1252.26,1218.4 1252.84,1215.6 1253.43,1213.13 1254.02,1213.31 1254.6,1213.26 1255.19,1214.52 1255.78,1214.4 1256.36,1215.62 1256.95,1218.17 1257.53,1215.42 1258.12,1217.75 1258.71,1216.11 1259.29,1217.15 1259.88,1215.67 1260.47,1215.66 1261.05,1220.52 1261.64,1223.62 1262.23,1221.76 1262.81,1219.95 1263.4,1219.56 1263.98,1219.06 1264.57,1222.06 1265.16,1219.08 1265.74,1215.08 1266.33,1211.19 1266.92,1209.8 1267.5,1207.53 1268.09,1208.11 1268.68,1208.71 1269.26,1207.93 1269.85,1208.31 1270.44,1209.77 1271.02,1209.9 1271.61,1211.15 1272.19,1209.97 1272.78,1211.69 1273.37,1212.85 1273.95,1210.39 1274.54,1211.96 1275.13,1210.86 1275.71,1210.85 1276.3,1213.44 1276.89,1213.32 1277.47,1213.3 1278.06,1213.48 1278.65,1213.63 1279.23,1214.88 1279.82,1214.59 1280.4,1214.23 1280.99,1214.44 1281.58,1217.92 1282.16,1217.72 1282.75,1217.5 1283.34,1218.29 1283.92,1217.74 1284.51,1217.19 1285.1,1214.59 1285.68,1216.82 1286.27,1216.62 1286.86,1216.45 1287.44,1217.64 1288.03,1218.41 1288.61,1218.28 1289.2,1216.91 1289.79,1218.04 1290.37,1215.68 1290.96,1214.45 1291.55,1216.82 1292.13,1216.84 1292.72,1218.06 1293.31,1219.02 1293.89,1218.63 1294.48,1215.92 1295.06,1216.06 1295.65,1216.07 1296.24,1216.13 1296.82,1214.7 1297.41,1218.12 1298,1216.74 1298.58,1216.83 1299.17,1214.52 1299.76,1210.92 1300.34,1213.74 1300.93,1213.59 1301.52,1212.52 1302.1,1211.38 1302.69,1212.66 1303.27,1209.23 1303.86,1209.42 1304.45,1209.34 1305.03,1210.56 1305.62,1213.28 1306.21,1214.59 1306.79,1217.04 1307.38,1219.04 1307.97,1221.14 1308.55,1218.15 1309.14,1214.18 1309.73,1215.52 1310.31,1217.9 1310.9,1218.84 1311.48,1219.81 1312.07,1219.15 1312.66,1217.73 1313.24,1218.74 1313.83,1218.34 1314.42,1218.3 1315,1219.23 1315.59,1217.75 1316.18,1219.78 1316.76,1218.21 1317.35,1216.68 1317.93,1215.28 1318.52,1212.61 1319.11,1212.44 1319.69,1212.66 1320.28,1211.26 1320.87,1212.45 1321.45,1212.51 1322.04,1212.39 1322.63,1214.59 1323.21,1214.55 1323.8,1213.22 1324.39,1213.33 1324.97,1213.3 1325.56,1214.73 1326.14,1214.74 1326.73,1214.91 1327.32,1214.89 1327.9,1216.22 1328.49,1216.27 1329.08,1216.25 1329.66,1216.11 1330.25,1213.32 1330.84,1214.68 1331.42,1217.02 1332.01,1218.17 1332.6,1217.85 1333.18,1216.63 1333.77,1216.5 1334.35,1213.7 1334.94,1211.31 1335.53,1211.35 1336.11,1209.24 1336.7,1208.05 1337.29,1210.9 1337.87,1212.65 1338.46,1215.11 1339.05,1216.25 1339.63,1218.66 1340.22,1218.32 1340.8,1217.9 1341.39,1219.04 1341.98,1217.56 1342.56,1215.91 1343.15,1214.64 1343.74,1212.15 1344.32,1214.5 1344.91,1215.73 1345.5,1213 1346.08,1210.76 1346.67,1209.74 1347.26,1208.47 1347.84,1208.93 1348.43,1210.41 1349.01,1212.86 1349.6,1212.69 1350.19,1215.07 1350.77,1214.88 1351.36,1214.91 1351.95,1214.87 1352.53,1214.79 1353.12,1216.84 1353.71,1217.85 1354.29,1217.75 1354.88,1217.57 1355.47,1217.43 1356.05,1214.67 1356.64,1213.23 1357.22,1214.55 1357.81,1214.43 1358.4,1213.18 1358.98,1213.55 1359.57,1213.31 1360.16,1211.97 1360.74,1212.01 1361.33,1210.79 1361.92,1212.16 1362.5,1214.47 1363.09,1214.34 1363.68,1212.24 1364.26,1212.41 1364.85,1212.51 1365.43,1210.27 1366.02,1209.73 1366.61,1210.14 1367.19,1211.58 1367.78,1212.96 1368.37,1211.83 1368.95,1209.4 1369.54,1209.49 1370.13,1208.64 1370.71,1208.92 1371.3,1207.94 1371.88,1209.54 1372.47,1207.43 1373.06,1209.38 1373.64,1209.53 1374.23,1208.47 1374.82,1211.32 1375.4,1210.32 1375.99,1207.98 1376.58,1207.31 1377.16,1206.56 1377.75,1205.71 1378.34,1207.78 1378.92,1206.82 1379.51,1205.89 1380.09,1206.37 1380.68,1206.85 1381.27,1207.03 1381.85,1206 1382.44,1205.38 1383.03,1207.18 1383.61,1208.75 1384.2,1209.22 1384.79,1210.83 1385.37,1213.55 1385.96,1212.71 1386.55,1211.48 1387.13,1211.58 1387.72,1212.95 1388.3,1212.98 1388.89,1215.47 1389.48,1214.38 1390.06,1215.79 1390.65,1215.91 1391.24,1216.84 1391.82,1216.74 1392.41,1215.39 1393,1215.15 1393.58,1214.16 1394.17,1212.91 1394.75,1210.64 1395.34,1210.91 1395.93,1211.14 1396.51,1211.15 1397.1,1212.47 1397.69,1214.76 1398.27,1213.6 1398.86,1215.83 1399.45,1213.54 1400.03,1210.91 1400.62,1211.28 1401.21,1212.69 1401.79,1216.5 1402.38,1216.51 1402.96,1215.16 1403.55,1212.74 1404.14,1213.83 1404.72,1217.36 1405.31,1218.37 1405.9,1219.35 1406.48,1217.93 1407.07,1216.83 1407.66,1218.05 1408.24,1217.64 1408.83,1216.17 1409.42,1214.75 1410,1211.06 1410.59,1211.02 1411.17,1210.86 1411.76,1209.64 1412.35,1211.47 1412.93,1210.28 1413.52,1210.29 1414.11,1210.55 1414.69,1210.55 1415.28,1213.05 1415.87,1213.21 1416.45,1212.27 1417.04,1216.05 1417.63,1215.88 1418.21,1213.55 1418.8,1212.05 1419.38,1213.64 1419.97,1213.72 1420.56,1215.08 1421.14,1216.34 1421.73,1213.89 1422.32,1216.02 1422.9,1214.79 1423.49,1213.63 1424.08,1212.57 1424.66,1210.19 1425.25,1210.49 1425.83,1210.94 1426.42,1212.21 1427.01,1212.06 1427.59,1213.59 1428.18,1213.83 1428.77,1218.48 1429.35,1219.7 1429.94,1218.31 1430.53,1220.46 1431.11,1219.92 1431.7,1220.73 1432.29,1222.82 1432.87,1223.61 1433.46,1221.88 1434.04,1222.86 1434.63,1222.12 1435.22,1221.75 1435.8,1222.52 1436.39,1214.88 1436.98,1214.95 1437.56,1212.35 1438.15,1212.29 1438.74,1211.23 1439.32,1210 1439.91,1208.85 1440.5,1212.49 1441.08,1210.27 1441.67,1213 1442.25,1212.16 1442.84,1212.42 1443.43,1214.9 1444.01,1214.97 1444.6,1212.67 1445.19,1214.11 1445.77,1214.3 1446.36,1213.18 1446.95,1214.12 1447.53,1210.72 1448.12,1209.93 1448.7,1210.23 1449.29,1211.76 1449.88,1211.95 1450.46,1213.35 1451.05,1213.37 1451.64,1214.66 1452.22,1217.04 1452.81,1215.59 1453.4,1215.54 1453.98,1215.64 1454.57,1215.9 1455.16,1218.12 1455.74,1214.42 1456.33,1210.65 1456.91,1210.76 1457.5,1210.91 1458.09,1212.21 1458.67,1214.58 1459.26,1214.41 1459.85,1215.62 1460.43,1214.33 1461.02,1212.9 1461.61,1214.24 1462.19,1215.37 1462.78,1215.43 1463.37,1216.31 1463.95,1215.09 1464.54,1212.51 1465.12,1212.65 1465.71,1213.7 1466.3,1211.13 1466.88,1211.38 1467.47,1210.42 1468.06,1211.75 1468.64,1211.57 1469.23,1210.56 1469.82,1208.47 1470.4,1208.84 1470.99,1207.98 1471.57,1210.83 1472.16,1209.93 1472.75,1209.06 1473.33,1209.61 1473.92,1209.02 1474.51,1209.47 1475.09,1210.83 1475.68,1207.34 1476.27,1208.96 1476.85,1210.58 1477.44,1210.74 1478.03,1209.53 1478.61,1210.85 1479.2,1212.17 1479.78,1213.67 1480.37,1217.38 1480.96,1217.04 1481.54,1218.08 1482.13,1221.39 1482.72,1220.75 1483.3,1218 1483.89,1216.51 1484.48,1216.41 1485.06,1217.52 1485.65,1218.52 1486.24,1218.08 1486.82,1216.52 1487.41,1218.62 1487.99,1219.58 1488.58,1219.05 1489.17,1217.69 1489.75,1217.5 1490.34,1216 1490.93,1213.34 1491.51,1214.61 1492.1,1215.85 1492.69,1214.65 1493.27,1212.38 1493.86,1210.11 1494.45,1210.13 1495.03,1209.4 1495.62,1206.17 1496.2,1206.56 1496.79,1206.88 1497.38,1208.38 1497.96,1208.55 1498.55,1210.13 1499.14,1211.91 1499.72,1212.02 1500.31,1210.88 1500.9,1211.21 1501.48,1213.93 1502.07,1216.44 1502.65,1217.41 1503.24,1213.44 1503.83,1214.75 1504.41,1212.27 1505,1212.39 1505.59,1211.28 1506.17,1209.24 1506.76,1207.28 1507.35,1206.6 1507.93,1205.56 1508.52,1206.02 1509.11,1210.01 1509.69,1210.12 1510.28,1210.3 1510.86,1209.66 1511.45,1209.79 1512.04,1209.81 1512.62,1212.47 1513.21,1212.49 1513.8,1211.61 1514.38,1213.02 1514.97,1214.29 1515.56,1211.97 1516.14,1212.32 1516.73,1211.17 1517.32,1213.05 1517.9,1211.95 1518.49,1211.84 1519.07,1212.09 1519.66,1212.45 1520.25,1212.69 1520.83,1212.59 1521.42,1211.6 1522.01,1211.65 1522.59,1210.46 1523.18,1210.79 1523.77,1212.33 1524.35,1212.5 1524.94,1212.36 1525.52,1212.53 1526.11,1210.21 1526.7,1210.42 1527.28,1207.99 1527.87,1208.29 1528.46,1208.59 1529.04,1209.91 1529.63,1210.23 1530.22,1212.58 1530.8,1211.62 1531.39,1211.56 1531.98,1211.56 1532.56,1212.98 1533.15,1215.26 1533.73,1216.72 1534.32,1217.59 1534.91,1217.28 1535.49,1212.32 1536.08,1215.19 1536.67,1215.35 1537.25,1217.74 1537.84,1216.65 1538.43,1219.19 1539.01,1219.99 1539.6,1222.29 1540.19,1224.18 1540.77,1223.59 1541.36,1221.93 1541.94,1222.46 1542.53,1222.99 1543.12,1223.74 1543.7,1224.19 1544.29,1223.99 1544.88,1222.3 1545.46,1221.83 1546.05,1222.58 1546.64,1222.14 1547.22,1223 1547.81,1222.42 1548.4,1221.57 1548.98,1218.81 1549.57,1219.84 1550.15,1220.8 1550.74,1217.85 1551.33,1218.97 1551.91,1220.9 1552.5,1221.69 1553.09,1222.29 1553.67,1221.72 1554.26,1221.19 1554.85,1219.46 1555.43,1220.68 1556.02,1221.52 1556.6,1222.13 1557.19,1221.77 1557.78,1222.51 1558.36,1221.97 1558.95,1220.37 1559.54,1221.01 1560.12,1223.13 1560.71,1222.63 1561.3,1221.12 1561.88,1220.89 1562.47,1219.21 1563.06,1217.7 1563.64,1217.38 1564.23,1213.51 1564.81,1210.95 1565.4,1211.15 1565.99,1211.37 1566.57,1207.84 1567.16,1206.86 1567.75,1207.15 1568.33,1206.3 1568.92,1208.96 1569.51,1205.43 1570.09,1203.32 1570.68,1203.98 1571.27,1205.72 1571.85,1207.2 1572.44,1207.53 1573.02,1207.63 1573.61,1208 1574.2,1208.3 1574.78,1209.85 1575.37,1209.65 1575.96,1208.78 1576.54,1207.73 1577.13,1207.85 1577.72,1204.7 1578.3,1205.1 1578.89,1206.92 1579.47,1208.56 1580.06,1206.43 1580.65,1207.8 1581.23,1206.81 1581.82,1206.06 1582.41,1208.86 1582.99,1209.2 1583.58,1210.75 1584.17,1209.71 1584.75,1207.41 1585.34,1207.75 1585.93,1207.9 1586.51,1208.22 1587.1,1206.06 1587.68,1203.78 1588.27,1204.06 1588.86,1204.77 1589.44,1206.78 1590.03,1204.75 1590.62,1206.25 1591.2,1205.37 1591.79,1205.64 1592.38,1206.15 1592.96,1206.49 1593.55,1206.85 1594.14,1208.49 1594.72,1205.32 1595.31,1205.66 1595.89,1207.34 1596.48,1210.31 1597.07,1209.35 1597.65,1208.49 1598.24,1208.74 1598.83,1206.67 1599.41,1209.43 1600,1210.7 1600.59,1211.98 1601.17,1213.47 1601.76,1213.6 1602.34,1216.1 1602.93,1218.19 1603.52,1219.45 1604.1,1219.41 1604.69,1218.82 1605.28,1216.27 1605.86,1218.64 1606.45,1214.99 1607.04,1217.51 1607.62,1218.86 1608.21,1216.02 1608.8,1214.58 1609.38,1215.95 1609.97,1217.08 1610.55,1214.35 1611.14,1213.22 1611.73,1207.2 1612.31,1207.68 1612.9,1209.41 1613.49,1210.78 1614.07,1211.21 1614.66,1210.12 1615.25,1212.86 1615.83,1211.26 1616.42,1211.36 1617.01,1212.68 1617.59,1212.93 1618.18,1210.7 1618.76,1212.09 1619.35,1213.29 1619.94,1211.08 1620.52,1208.67 1621.11,1211.77 1621.7,1210.46 1622.28,1210.81 1622.87,1208.72 1623.46,1209.08 1624.04,1210.6 1624.63,1210.8 1625.22,1210.94 1625.8,1211.37 1626.39,1211.54 1626.97,1214.29 1627.56,1214.29 1628.15,1213.19 1628.73,1213.31 1629.32,1213.47 1629.91,1213.46 1630.49,1212.22 1631.08,1214.88 1631.67,1214.84 1632.25,1214.65 1632.84,1209.72 1633.42,1210.25 1634.01,1211.53 1634.6,1211.81 1635.18,1211.96 1635.77,1212.24 1636.36,1213.58 1636.94,1214.64 1637.53,1215.97 1638.12,1215.96 1638.7,1217.55 1639.29,1218.65 1639.88,1217.11 1640.46,1215.57 1641.05,1216.98 1641.63,1214.24 1642.22,1214.03 1642.81,1212.93 1643.39,1213.21 1643.98,1214.18 1644.57,1215.32 1645.15,1214.13 1645.74,1218.94 1646.33,1218.8 1646.91,1216.23 1647.5,1214.85 1648.09,1215.97 1648.67,1214.78 1649.26,1213.3 1649.84,1211.08 1650.43,1207.63 1651.02,1209.38 1651.6,1213.18 1652.19,1209.72 1652.78,1210.31 1653.36,1210.41 1653.95,1210.53 1654.54,1211.93 1655.12,1212.06 1655.71,1212.02 1656.29,1212.1 1656.88,1211.97 1657.47,1213.35 1658.05,1213.65 1658.64,1213.68 1659.23,1214.82 1659.81,1215.81 1660.4,1215.53 1660.99,1215.35 1661.57,1217.67 1662.16,1217.49 1662.75,1214.95 1663.33,1218.44 1663.92,1219.42 1664.5,1222.83 1665.09,1222.43 1665.68,1223.28 1666.26,1222.76 1666.85,1221.02 1667.44,1220.5 1668.02,1219.83 1668.61,1219.52 1669.2,1216.79 1669.78,1215.61 1670.37,1216.62 1670.96,1219.94 1671.54,1220.74 1672.13,1221.43 1672.71,1221.09 1673.3,1220.52 1673.89,1220.26 1674.47,1218.81 1675.06,1218.31 1675.65,1216.8 1676.23,1215.42 1676.82,1213.31 1677.41,1213.23 1677.99,1215.53 1678.58,1218.84 1679.17,1218.32 1679.75,1218.05 1680.34,1219.22 1680.92,1224.98 1681.51,1224.42 1682.1,1227.4 1682.68,1226.61 1683.27,1225.84 1683.86,1226.43 1684.44,1226.84 1685.03,1224.85 1685.62,1221.77 1686.2,1222.64 1686.79,1218.26 1687.37,1218.19 1687.96,1217.84 1688.55,1217.63 1689.13,1217.48 1689.72,1216.06 1690.31,1215.94 1690.89,1217.1 1691.48,1215.8 1692.07,1213.3 1692.65,1214.45 1693.24,1214.24 1693.83,1212.9 1694.41,1215.28 1695,1212.89 1695.58,1211.72 1696.17,1210.39 1696.76,1211.9 1697.34,1212.11 1697.93,1212.21 1698.52,1214.57 1699.1,1215.75 1699.69,1215.6 1700.28,1215.61 1700.86,1210.72 1701.45,1210.78 1702.04,1210.87 1702.62,1211.23 1703.21,1211.22 1703.79,1213.48 1704.38,1211.04 1704.97,1212.52 1705.55,1213.85 1706.14,1213.94 1706.73,1214.05 1707.31,1213.84 1707.9,1215.13 1708.49,1211.16 1709.07,1212.61 1709.66,1211.37 1710.24,1212.7 1710.83,1214.22 1711.42,1212.94 1712,1211.64 1712.59,1211.77 1713.18,1212 1713.76,1211.77 1714.35,1209.3 1714.94,1209.6 1715.52,1209.55 1716.11,1208.27 1716.7,1208.73 1717.28,1207.75 1717.87,1209.33 1718.45,1208.48 1719.04,1206.47 1719.63,1206.78 1720.21,1208.37 1720.8,1208.56 1721.39,1206.31 1721.97,1205.3 1722.56,1205.6 1723.15,1207.13 1723.73,1206.24 1724.32,1206.55 1724.91,1209.52 1725.49,1210.84 1726.08,1212.5 1726.66,1208.93 1727.25,1207.69 1727.84,1209.31 1728.42,1212.11 1729.01,1212.18 1729.6,1212.38 1730.18,1213.56 1730.77,1216.2 1731.36,1216.19 1731.94,1215.01 1732.53,1212.47 1733.11,1210.33 1733.7,1211.62 1734.29,1212.76 1734.87,1210.42 1735.46,1210.53 1736.05,1214.52 1736.63,1215.81 1737.22,1217.02 1737.81,1218.13 1738.39,1217.77 1738.98,1217.63 1739.57,1216.38 1740.15,1219.57 1740.74,1221.68 1741.32,1220.04 1741.91,1219.78 1742.5,1216.89 1743.08,1215.28 1743.67,1214.21 1744.26,1215.34 1744.84,1215.22 1745.43,1216.64 1746.02,1216.18 1746.6,1217.28 1747.19,1212.08 1747.78,1212.36 1748.36,1213.64 1748.95,1213.7 1749.53,1212.47 1750.12,1212.57 1750.71,1212.96 1751.29,1213.23 1751.88,1210.9 1752.47,1208.66 1753.05,1207.98 1753.64,1208.37 1754.23,1208.83 1754.81,1209.13 1755.4,1209.4 1755.99,1204.71 1756.57,1206.6 1757.16,1208.35 1757.74,1208.66 1758.33,1211.4 1758.92,1213.85 1759.5,1214.13 1760.09,1214.12 1760.68,1216.6 1761.26,1215.21 1761.85,1213.86 1762.44,1213.67 1763.02,1213.72 1763.61,1213.85 1764.19,1216.2 1764.78,1218.4 1765.37,1219.46 1765.95,1221.32 1766.54,1223.34 1767.13,1222.9 1767.71,1223.29 1768.3,1220.16 1768.89,1220.95 1769.47,1219.11 1770.06,1217.78 1770.65,1218.67 1771.23,1218.31 1771.82,1217.78 1772.4,1215.12 1772.99,1217.29 1773.58,1219.45 1774.16,1220.71 1774.75,1218.93 1775.34,1218.28 1775.92,1220.06 1776.51,1218.37 1777.1,1219.08 1777.68,1220.17 1778.27,1217.46 1778.86,1218.78 1779.44,1217.34 1780.03,1219.48 1780.61,1218.03 1781.2,1217.61 1781.79,1219.36 1782.37,1221.34 1782.96,1221.11 1783.55,1221.99 1784.13,1222.71 1784.72,1221.06 1785.31,1220.82 1785.89,1220.59 1786.48,1218.93 1787.06,1221.18 1787.65,1220.76 1788.24,1220.57 1788.82,1220.22 1789.41,1219.7 1790,1220.69 1790.58,1220.23 1791.17,1218.6 1791.76,1217.24 1792.34,1215.51 1792.93,1209.45 1793.52,1208.25 1794.1,1211.09 1794.69,1211.33 1795.27,1211.51 1795.86,1214.12 1796.45,1214.06 1797.03,1213.95 1797.62,1215.07 1798.21,1216.42 1798.79,1216.42 1799.38,1216.38 1799.97,1217.19 1800.55,1215.82 1801.14,1216.07 1801.73,1214.28 1802.31,1215.23 1802.9,1217.9 1803.48,1215.4 1804.07,1215.11 1804.66,1215.15 1805.24,1214.88 1805.83,1213.5 1806.42,1211.01 1807,1213.72 1807.59,1214.71 1808.18,1214.58 1808.76,1213.47 1809.35,1213.56 1809.94,1213.54 1810.52,1212.11 1811.11,1214.47 1811.69,1210.84 1812.28,1208.62 1812.87,1207.83 1813.45,1209.38 1814.04,1209.58 1814.63,1208.54 1815.21,1208.7 1815.8,1209.05 1816.39,1211.74 1816.97,1213.08 1817.56,1213.01 1818.14,1209.58 1818.73,1211.3 1819.32,1210.54 1819.9,1211.87 1820.49,1207.31 1821.08,1208.66 1821.66,1209.94 1822.25,1211.63 1822.84,1212.93 1823.42,1211.65 1824.01,1210.74 1824.6,1212.1 1825.18,1211.1 1825.77,1213.72 1826.35,1212.47 1826.94,1212.49 1827.53,1212.57 1828.11,1213.82 1828.7,1216.04 1829.29,1213.49 1829.87,1214.67 1830.46,1214.37 1831.05,1213.16 1831.63,1211.89 1832.22,1212.1 1832.81,1212.4 1833.39,1214.95 1833.98,1212.42 1834.56,1211.38 1835.15,1211.64 1835.74,1210.67 1836.32,1213.53 1836.91,1211.17 1837.5,1210.19 1838.08,1209.27 1838.67,1208.34 1839.26,1212.17 1839.84,1210.95 1840.43,1210.17 1841.01,1209.28 1841.6,1206.98 1842.19,1206.03 1842.77,1207.6 1843.36,1209.31 1843.95,1208.34 1844.53,1206.42 1845.12,1206.78 1845.71,1207.25 1846.29,1207.69 1846.88,1208.04 1847.47,1207.42 1848.05,1211.28 1848.64,1212.69 1849.22,1216.64 1849.81,1216.48 1850.4,1216.84 1850.98,1216.44 1851.57,1212.77 1852.16,1211.67 1852.74,1215.08 1853.33,1213.7 1853.92,1213.45 1854.5,1211.31 1855.09,1209.03 1855.68,1210.5 1856.26,1211.89 1856.85,1211.55 1857.43,1211.53 1858.02,1209.08 1858.61,1211.72 1859.19,1211.86 1859.78,1210.77 1860.37,1210.77 1860.95,1211.71 1861.54,1211.85 1862.13,1213.12 1862.71,1213.09 1863.3,1213.48 1863.88,1214.98 1864.47,1212.52 1865.06,1210.25 1865.64,1209.36 1866.23,1210.82 1866.82,1211.29 1867.4,1211.76 1867.99,1215.58 1868.58,1217.92 1869.16,1216.61 1869.75,1217.84 1870.34,1219 1870.92,1219.85 1871.51,1219.4 1872.09,1219 1872.68,1218.87 1873.27,1217.57 1873.85,1218.45 1874.44,1216.78 1875.03,1217.95 1875.61,1218.7 1876.2,1219.74 1876.79,1218.28 1877.37,1220.29 1877.96,1220.98 1878.55,1220.26 1879.13,1221.15 1879.72,1219.2 1880.3,1221.46 1880.89,1220.91 1881.48,1224.35 1882.06,1222.75 1882.65,1222.25 1883.24,1219.32 1883.82,1218.12 1884.41,1220.07 1885,1220.92 1885.58,1219.5 1886.17,1221.4 1886.76,1220.06 1887.34,1218.71 1887.93,1218.78 1888.51,1218.69 1889.1,1218.47 1889.69,1219.75 1890.27,1222.2 1890.86,1220.41 1891.45,1221.15 1892.03,1218.47 1892.62,1217.13 1893.21,1219.16 1893.79,1217.66 1894.38,1216.44 1894.96,1215.3 1895.55,1212.9 1896.14,1214.07 1896.72,1212.86 1897.31,1211.79 1897.9,1213.07 1898.48,1213.11 1899.07,1215.61 1899.66,1216.67 1900.24,1217.73 1900.83,1217.55 1901.42,1217.51 1902,1213.7 1902.59,1214.97 1903.17,1216.18 1903.76,1216.16 1904.35,1215.88 1904.93,1214.62 1905.52,1216.93 1906.11,1215.53 1906.69,1215.49 1907.28,1216.49 1907.87,1216.23 1908.45,1213.9 1909.04,1216.26 1909.63,1217.42 1910.21,1215.98 1910.8,1216.8 1911.38,1215.53 1911.97,1214.23 1912.56,1212.86 1913.14,1209.05 1913.73,1209.47 1914.32,1209.47 1914.9,1209.65 1915.49,1208.39 1916.08,1208.71 1916.66,1210.09 1917.25,1208.08 1917.83,1208.48 1918.42,1208.83 1919.01,1212.71 1919.59,1217.53 1920.18,1213.87 1920.77,1214.01 1921.35,1212.79 1921.94,1213.88 1922.53,1211.55 1923.11,1212.66 1923.7,1212.58 1924.29,1210.15 1924.87,1213.18 1925.46,1215.44 1926.04,1214.12 1926.63,1211.84 1927.22,1213.31 1927.8,1214.55 1928.39,1213.3 1928.98,1212.13 1929.56,1215.67 1930.15,1211.93 1930.74,1209.69 1931.32,1211.09 1931.91,1209.67 1932.5,1209.85 1933.08,1212.68 1933.67,1213.99 1934.25,1215.52 1934.84,1215.48 1935.43,1218.99 1936.01,1218.85 1936.6,1221.05 1937.19,1218.48 1937.77,1218.19 1938.36,1217.01 1938.95,1216.07 1939.53,1213.74 1940.12,1213.6 1940.71,1214.77 1941.29,1214.63 1941.88,1214.34 1942.46,1210.54 1943.05,1210.67 1943.64,1209.64 1944.22,1209.66 1944.81,1210.02 1945.4,1210.11 1945.98,1209.39 1946.57,1209.27 1947.16,1210.44 1947.74,1211.66 1948.33,1210.77 1948.91,1214.45 1949.5,1212.11 1950.09,1212.15 1950.67,1213.46 1951.26,1214.39 1951.85,1214.51 1952.43,1208.55 1953.02,1208.84 1953.61,1207.8 1954.19,1205.79 1954.78,1206.08 1955.37,1210.17 1955.95,1210.29 1956.54,1210.2 1957.12,1209.17 1957.71,1213.04 1958.3,1209.34 1958.88,1211.85 1959.47,1213.27 1960.06,1213.4 1960.64,1212.19 1961.23,1211.27 1961.82,1212.59 1962.4,1211.47 1962.99,1210.25 1963.58,1211.82 1964.16,1209.64 1964.75,1208.76 1965.33,1209.05 1965.92,1209.42 1966.51,1209.68 1967.09,1209.96 1967.68,1209.76 1968.27,1207.69 1968.85,1207 1969.44,1211.97 1970.03,1211.81 1970.61,1210.96 1971.2,1209.87 1971.78,1208.99 1972.37,1208.26 1972.96,1208.62 1973.54,1208.8 1974.13,1209.03 1974.72,1211.83 1975.3,1213.09 1975.89,1214.62 1976.48,1216.1 1977.06,1214.99 1977.65,1216.36 1978.24,1216.13 1978.82,1214.92 1979.41,1216.06 1979.99,1212.48 1980.58,1212.43 1981.17,1211.35 1981.75,1211.33 1982.34,1211.48 1982.93,1212.97 1983.51,1211.95 1984.1,1210.95 1984.69,1211.22 1985.27,1215.34 1985.86,1215.23 1986.45,1217.69 1987.03,1216.37 1987.62,1217.51 1988.2,1218.47 1988.79,1216.99 1989.38,1217.05 1989.96,1218.06 1990.55,1218.95 1991.14,1219.91 1991.72,1221.13 1992.31,1220.65 1992.9,1217.92 1993.48,1216.36 1994.07,1214.9 1994.65,1214.72 1995.24,1216.04 1995.83,1217.05 1996.41,1217.89 1997,1213.9 1997.59,1215.11 1998.17,1212.54 1998.76,1212.66 1999.35,1211.58 1999.93,1210.57 2000.52,1210.62 2001.11,1211.95 2001.69,1214.45 2002.28,1213.24 2002.86,1212.22 2003.45,1210.92 2004.04,1212.29 2004.62,1212.54 2005.21,1212.44 2005.8,1212.66 2006.38,1212.82 2006.97,1212.8 2007.56,1212.77 2008.14,1213.94 2008.73,1212.7 2009.32,1212.72 2009.9,1215.07 2010.49,1216.29 2011.07,1217.26 2011.66,1218.36 2012.25,1220.32 2012.83,1218.72 2013.42,1219.89 2014.01,1214.58 2014.59,1214.56 2015.18,1215.74 2015.77,1215.62 2016.35,1215.87 2016.94,1214.38 2017.53,1214.09 2018.11,1214.08 2018.7,1216.55 2019.28,1213.93 2019.87,1212.82 2020.46,1214.22 2021.04,1214.09 2021.63,1212.79 2022.22,1212.68 2022.8,1211.61 2023.39,1212.87 2023.98,1212.73 2024.56,1215.31 2025.15,1216.45 2025.73,1217.35 2026.32,1219.41 2026.91,1217.77 2027.49,1216.55 2028.08,1214.41 2028.67,1213.19 2029.25,1213.18 2029.84,1211.83 2030.43,1209.35 2031.01,1209.7 2031.6,1211.19 2032.19,1208.71 2032.77,1208.8 2033.36,1209.21 2033.94,1209.47 2034.53,1208.48 2035.12,1208.64 2035.7,1208.91 2036.29,1209.48 2036.88,1208.36 2037.46,1209.94 2038.05,1211.31 2038.64,1211.45 2039.22,1211.61 2039.81,1211.73 2040.4,1210.65 2040.98,1210.64 2041.57,1211.04 2042.15,1210.05 2042.74,1210.48 2043.33,1208.29 2043.91,1208.53 2044.5,1208.79 2045.09,1210.19 2045.67,1211.57 2046.26,1211.79 2046.85,1211.89 2047.43,1212.14 2048.02,1212.3 2048.6,1211.16 2049.19,1211.54 2049.78,1210.52 2050.36,1210.66 2050.95,1208.3 2051.54,1209.72 2052.12,1211.04 2052.71,1212.49 2053.3,1208.68 2053.88,1209 2054.47,1209.02 2055.06,1210.36 2055.64,1210.58 2056.23,1209.75 2056.81,1209.82 2057.4,1208.79 2057.99,1209 2058.57,1210.55 2059.16,1214.5 2059.75,1214.55 2060.33,1213.3 2060.92,1214.53 2061.51,1221.82 2062.09,1220.04 2062.68,1218.5 2063.27,1216.85 2063.85,1217.94 2064.44,1217.9 2065.02,1217.75 2065.61,1217.57 2066.2,1217.57 2066.78,1216.44 2067.37,1215.23 2067.96,1214.01 2068.54,1216.4 2069.13,1217.42 2069.72,1217.15 2070.3,1214.82 2070.89,1213.33 2071.48,1213.25 2072.06,1213.19 2072.65,1210.78 2073.23,1210.86 2073.82,1208.71 2074.41,1210.15 2074.99,1211.57 2075.58,1212.64 2076.17,1212.85 2076.75,1212.81 2077.34,1212.72 2077.93,1215.19 2078.51,1214.85 2079.1,1215.95 2079.68,1215.91 2080.27,1214.49 2080.86,1213.38 2081.44,1214.53 2082.03,1215.3 2082.62,1216.51 2083.2,1219.9 2083.79,1223.11 2084.38,1221.59 2084.96,1220.91 2085.55,1219.44 2086.14,1219.08 2086.72,1218.7 2087.31,1215.9 2087.89,1213.29 2088.48,1213.52 2089.07,1213.62 2089.65,1214.86 2090.24,1214.57 2090.83,1214.39 2091.41,1211.96 2092,1211.94 2092.59,1212.3 2093.17,1212.39 2093.76,1212.18 2094.35,1212.36 2094.93,1213.75 2095.52,1213.82 2096.1,1213.63 2096.69,1216.14 2097.28,1214.75 2097.86,1214.73 2098.45,1213.42 2099.04,1209.88 2099.62,1208.03 2100.21,1209.67 2100.8,1211.45 2101.38,1212.89 2101.97,1209.48 2102.55,1210.69 2103.14,1211.99 2103.73,1212.05 2104.31,1210.94 2104.9,1210.95 2105.49,1208.66 2106.07,1209.81 2106.66,1211.32 2107.25,1211.52 2107.83,1211.71 2108.42,1209.65 2109.01,1209.77 2109.59,1208.58 2110.18,1209.97 2110.76,1211.61 2111.35,1211.77 2111.94,1211.82 2112.52,1210.74 2113.11,1212.18 2113.7,1214.53 2114.28,1214.45 2114.87,1216.83 2115.46,1216.78 2116.04,1217.6 2116.63,1216.19 2117.22,1214.96 2117.8,1216.47 2118.39,1216.53 2118.97,1212.91 2119.56,1210.41 2120.15,1210.46 2120.73,1210.79 2121.32,1211.97 2121.91,1213.2 2122.49,1209.86 2123.08,1210.21 2123.67,1210.43 2124.25,1214.23 2124.84,1216.44 2125.42,1213.99 2126.01,1213.97 2126.6,1213.03 2127.18,1214.32 2127.77,1213.38 2128.36,1213.28 2128.94,1213.51 2129.53,1214.52 2130.12,1214.51 2130.7,1212.09 2131.29,1209.61 2131.88,1207.19 2132.46,1208.81 2133.05,1209.3 2133.63,1209.51 2134.22,1211.13 2134.81,1212.71 2135.39,1212.55 2135.98,1212.68 2136.57,1211.42 2137.15,1213.99 2137.74,1215.02 2138.33,1213.78 2138.91,1214.89 2139.5,1212.8 2140.09,1214.21 2140.67,1213.99 2141.26,1211.37 2141.84,1211.5 2142.43,1210.48 2143.02,1211.7 2143.6,1210.85 2144.19,1213.44 2144.78,1214.83 2145.36,1214.87 2145.95,1215.93 2146.54,1216.71 2147.12,1216.56 2147.71,1219 2148.3,1216.46 2148.88,1217.54 2149.47,1218.62 2150.05,1218.57 2150.64,1217.23 2151.23,1216.89 2151.81,1216.79 2152.4,1214.08 2152.99,1213.69 2153.57,1213.76 2154.16,1212.26 2154.75,1211.15 2155.33,1212.58 2155.92,1216.22 2156.5,1215.01 2157.09,1214.89 2157.68,1214.69 2158.26,1215.97 \"/>\n<path clip-path=\"url(#clip022)\" d=\"M986.025 1214.35 L986.612 1214.35 L987.198 1214.35 L987.785 1214.35 L988.371 1214.35 L988.957 1214.35 L989.544 1214.35 L990.13 1214.35 L990.717 1214.35 L991.303 1214.35 L991.889 1214.35 L992.476 1214.35 L993.062 1214.35 L993.649 1214.35 L994.235 1214.35 L994.822 1214.35 L995.408 1214.35 L995.994 1214.35 L996.581 1214.35 L997.167 1214.35 L997.754 1214.35 L998.34 1214.35 L998.926 1214.35 L999.513 1214.35 L1000.1 1214.35 L1000.69 1214.35 L1001.27 1214.35 L1001.86 1214.35 L1002.44 1214.35 L1003.03 1214.35 L1003.62 1214.35 L1004.2 1214.35 L1004.79 1214.35 L1005.38 1214.35 L1005.96 1214.35 L1006.55 1214.35 L1007.14 1214.35 L1007.72 1214.35 L1008.31 1214.35 L1008.9 1214.35 L1009.48 1214.35 L1010.07 1214.35 L1010.65 1214.35 L1011.24 1214.35 L1011.83 1214.35 L1012.41 1214.35 L1013 1214.35 L1013.59 1214.35 L1014.17 1214.35 L1014.76 1214.35 L1015.35 1214.35 L1015.93 1214.35 L1016.52 1214.35 L1017.11 1214.35 L1017.69 1214.35 L1018.28 1214.35 L1018.86 1214.35 L1019.45 1214.35 L1020.04 1214.35 L1020.62 1214.35 L1021.21 1214.35 L1021.8 1214.35 L1022.38 1214.35 L1022.97 1214.35 L1023.56 1214.35 L1024.14 1214.35 L1024.73 1214.35 L1025.32 1214.35 L1025.9 1214.35 L1026.49 1214.35 L1027.07 1214.35 L1027.66 1214.35 L1028.25 1214.35 L1028.83 1214.35 L1029.42 1214.35 L1030.01 1214.35 L1030.59 1214.35 L1031.18 1214.35 L1031.77 1214.35 L1032.35 1214.35 L1032.94 1214.35 L1033.52 1214.35 L1034.11 1214.35 L1034.7 1214.35 L1035.28 1214.35 L1035.87 1214.35 L1036.46 1214.35 L1037.04 1214.35 L1037.63 1214.35 L1038.22 1214.35 L1038.8 1214.35 L1039.39 1214.35 L1039.98 1214.35 L1040.56 1214.35 L1041.15 1214.35 L1041.73 1214.35 L1042.32 1214.35 L1042.91 1214.35 L1043.49 1214.35 L1044.08 1214.35 L1044.67 1214.35 L1045.25 1214.35 L1045.84 1214.35 L1046.43 1214.35 L1047.01 1214.35 L1047.6 1214.35 L1048.19 1214.35 L1048.77 1214.35 L1049.36 1214.35 L1049.94 1214.35 L1050.53 1214.35 L1051.12 1214.35 L1051.7 1214.35 L1052.29 1214.35 L1052.88 1214.35 L1053.46 1214.35 L1054.05 1214.35 L1054.64 1214.35 L1055.22 1214.35 L1055.81 1214.35 L1056.39 1214.35 L1056.98 1214.35 L1057.57 1214.35 L1058.15 1214.35 L1058.74 1214.35 L1059.33 1214.35 L1059.91 1214.35 L1060.5 1214.35 L1061.09 1214.35 L1061.67 1214.35 L1062.26 1214.35 L1062.85 1214.35 L1063.43 1214.35 L1064.02 1214.35 L1064.6 1214.35 L1065.19 1214.35 L1065.78 1214.35 L1066.36 1214.35 L1066.95 1214.35 L1067.54 1214.35 L1068.12 1214.35 L1068.71 1214.35 L1069.3 1214.35 L1069.88 1214.35 L1070.47 1214.35 L1071.06 1214.35 L1071.64 1214.35 L1072.23 1214.35 L1072.81 1214.35 L1073.4 1214.35 L1073.99 1214.35 L1074.57 1214.35 L1075.16 1214.35 L1075.75 1214.35 L1076.33 1214.35 L1076.92 1214.35 L1077.51 1214.35 L1078.09 1214.35 L1078.68 1214.35 L1079.26 1214.35 L1079.85 1214.35 L1080.44 1214.35 L1081.02 1214.35 L1081.61 1214.35 L1082.2 1214.35 L1082.78 1214.35 L1083.37 1214.35 L1083.96 1214.35 L1084.54 1214.35 L1085.13 1214.35 L1085.72 1214.35 L1086.3 1214.35 L1086.89 1214.35 L1087.47 1214.35 L1088.06 1214.35 L1088.65 1214.35 L1089.23 1214.35 L1089.82 1214.35 L1090.41 1214.35 L1090.99 1214.35 L1091.58 1214.35 L1092.17 1214.35 L1092.75 1214.35 L1093.34 1214.35 L1093.93 1214.35 L1094.51 1214.35 L1095.1 1214.35 L1095.68 1214.35 L1096.27 1214.35 L1096.86 1214.35 L1097.44 1214.35 L1098.03 1214.35 L1098.62 1214.35 L1099.2 1214.35 L1099.79 1214.35 L1100.38 1214.35 L1100.96 1214.35 L1101.55 1214.35 L1102.14 1214.35 L1102.72 1214.35 L1103.31 1214.35 L1103.89 1214.35 L1104.48 1214.35 L1105.07 1214.35 L1105.65 1214.35 L1106.24 1214.35 L1106.83 1214.35 L1107.41 1214.35 L1108 1214.35 L1108.59 1214.35 L1109.17 1214.35 L1109.76 1214.35 L1110.34 1214.35 L1110.93 1214.35 L1111.52 1214.35 L1112.1 1214.35 L1112.69 1214.35 L1113.28 1214.35 L1113.86 1214.35 L1114.45 1214.35 L1115.04 1214.35 L1115.62 1214.35 L1116.21 1214.35 L1116.8 1214.35 L1117.38 1214.35 L1117.97 1214.35 L1118.55 1214.35 L1119.14 1214.35 L1119.73 1214.35 L1120.31 1214.35 L1120.9 1214.35 L1121.49 1214.35 L1122.07 1214.35 L1122.66 1214.35 L1123.25 1214.35 L1123.83 1214.35 L1124.42 1214.35 L1125.01 1214.35 L1125.59 1214.35 L1126.18 1214.35 L1126.76 1214.35 L1127.35 1214.35 L1127.94 1214.35 L1128.52 1214.35 L1129.11 1214.35 L1129.7 1214.35 L1130.28 1214.35 L1130.87 1214.35 L1131.46 1214.35 L1132.04 1214.35 L1132.63 1214.35 L1133.21 1214.35 L1133.8 1214.35 L1134.39 1214.35 L1134.97 1214.35 L1135.56 1214.35 L1136.15 1214.35 L1136.73 1214.35 L1137.32 1214.35 L1137.91 1214.35 L1138.49 1214.35 L1139.08 1214.35 L1139.67 1214.35 L1140.25 1214.35 L1140.84 1214.35 L1141.42 1214.35 L1142.01 1214.35 L1142.6 1214.35 L1143.18 1214.35 L1143.77 1214.35 L1144.36 1214.35 L1144.94 1214.35 L1145.53 1214.35 L1146.12 1214.35 L1146.7 1214.35 L1147.29 1214.35 L1147.88 1214.35 L1148.46 1214.35 L1149.05 1214.35 L1149.63 1214.35 L1150.22 1214.35 L1150.81 1214.35 L1151.39 1214.35 L1151.98 1214.35 L1152.57 1214.35 L1153.15 1214.35 L1153.74 1214.35 L1154.33 1214.35 L1154.91 1214.35 L1155.5 1214.35 L1156.09 1214.35 L1156.67 1214.35 L1157.26 1214.35 L1157.84 1214.35 L1158.43 1214.35 L1159.02 1214.35 L1159.6 1214.35 L1160.19 1214.35 L1160.78 1214.35 L1161.36 1214.35 L1161.95 1214.35 L1162.54 1214.35 L1163.12 1214.35 L1163.71 1214.35 L1164.29 1214.35 L1164.88 1214.35 L1165.47 1214.35 L1166.05 1214.35 L1166.64 1214.35 L1167.23 1214.35 L1167.81 1214.35 L1168.4 1214.35 L1168.99 1214.35 L1169.57 1214.35 L1170.16 1214.35 L1170.75 1214.35 L1171.33 1214.35 L1171.92 1214.35 L1172.5 1214.35 L1173.09 1214.35 L1173.68 1214.35 L1174.26 1214.35 L1174.85 1214.35 L1175.44 1214.35 L1176.02 1214.35 L1176.61 1214.35 L1177.2 1214.35 L1177.78 1214.35 L1178.37 1214.35 L1178.96 1214.35 L1179.54 1214.35 L1180.13 1214.35 L1180.71 1214.35 L1181.3 1214.35 L1181.89 1214.35 L1182.47 1214.35 L1183.06 1214.35 L1183.65 1214.35 L1184.23 1214.35 L1184.82 1214.35 L1185.41 1214.35 L1185.99 1214.35 L1186.58 1214.35 L1187.16 1214.35 L1187.75 1214.35 L1188.34 1214.35 L1188.92 1214.35 L1189.51 1214.35 L1190.1 1214.35 L1190.68 1214.35 L1191.27 1214.35 L1191.86 1214.35 L1192.44 1214.35 L1193.03 1214.35 L1193.62 1214.35 L1194.2 1214.35 L1194.79 1214.35 L1195.37 1214.35 L1195.96 1214.35 L1196.55 1214.35 L1197.13 1214.35 L1197.72 1214.35 L1198.31 1214.35 L1198.89 1214.35 L1199.48 1214.35 L1200.07 1214.35 L1200.65 1214.35 L1201.24 1214.35 L1201.83 1214.35 L1202.41 1214.35 L1203 1214.35 L1203.58 1214.35 L1204.17 1214.35 L1204.76 1214.35 L1205.34 1214.35 L1205.93 1214.35 L1206.52 1214.35 L1207.1 1214.35 L1207.69 1214.35 L1208.28 1214.35 L1208.86 1214.35 L1209.45 1214.35 L1210.03 1214.35 L1210.62 1214.35 L1211.21 1214.35 L1211.79 1214.35 L1212.38 1214.35 L1212.97 1214.35 L1213.55 1214.35 L1214.14 1214.35 L1214.73 1214.35 L1215.31 1214.35 L1215.9 1214.35 L1216.49 1214.35 L1217.07 1214.35 L1217.66 1214.35 L1218.24 1214.35 L1218.83 1214.35 L1219.42 1214.35 L1220 1214.35 L1220.59 1214.35 L1221.18 1214.35 L1221.76 1214.35 L1222.35 1214.35 L1222.94 1214.35 L1223.52 1214.35 L1224.11 1214.35 L1224.7 1214.35 L1225.28 1214.35 L1225.87 1214.35 L1226.45 1214.35 L1227.04 1214.35 L1227.63 1214.35 L1228.21 1214.35 L1228.8 1214.35 L1229.39 1214.35 L1229.97 1214.35 L1230.56 1214.35 L1231.15 1214.35 L1231.73 1214.35 L1232.32 1214.35 L1232.91 1214.35 L1233.49 1214.35 L1234.08 1214.35 L1234.66 1214.35 L1235.25 1214.35 L1235.84 1214.35 L1236.42 1214.35 L1237.01 1214.35 L1237.6 1214.35 L1238.18 1214.35 L1238.77 1214.35 L1239.36 1214.35 L1239.94 1214.35 L1240.53 1214.35 L1241.11 1214.35 L1241.7 1214.35 L1242.29 1214.35 L1242.87 1214.35 L1243.46 1214.35 L1244.05 1214.35 L1244.63 1214.35 L1245.22 1214.35 L1245.81 1214.35 L1246.39 1214.35 L1246.98 1214.35 L1247.57 1214.35 L1248.15 1214.35 L1248.74 1214.35 L1249.32 1214.35 L1249.91 1214.35 L1250.5 1214.35 L1251.08 1214.35 L1251.67 1214.35 L1252.26 1214.35 L1252.84 1214.35 L1253.43 1214.35 L1254.02 1214.35 L1254.6 1214.35 L1255.19 1214.35 L1255.78 1214.35 L1256.36 1214.35 L1256.95 1214.35 L1257.53 1214.35 L1258.12 1214.35 L1258.71 1214.35 L1259.29 1214.35 L1259.88 1214.35 L1260.47 1214.35 L1261.05 1214.35 L1261.64 1214.35 L1262.23 1214.35 L1262.81 1214.35 L1263.4 1214.35 L1263.98 1214.35 L1264.57 1214.35 L1265.16 1214.35 L1265.74 1214.35 L1266.33 1214.35 L1266.92 1214.35 L1267.5 1214.35 L1268.09 1214.35 L1268.68 1214.35 L1269.26 1214.35 L1269.85 1214.35 L1270.44 1214.35 L1271.02 1214.35 L1271.61 1214.35 L1272.19 1214.35 L1272.78 1214.35 L1273.37 1214.35 L1273.95 1214.35 L1274.54 1214.35 L1275.13 1214.35 L1275.71 1214.35 L1276.3 1214.35 L1276.89 1214.35 L1277.47 1214.35 L1278.06 1214.35 L1278.65 1214.35 L1279.23 1214.35 L1279.82 1214.35 L1280.4 1214.35 L1280.99 1214.35 L1281.58 1214.35 L1282.16 1214.35 L1282.75 1214.35 L1283.34 1214.35 L1283.92 1214.35 L1284.51 1214.35 L1285.1 1214.35 L1285.68 1214.35 L1286.27 1214.35 L1286.86 1214.35 L1287.44 1214.35 L1288.03 1214.35 L1288.61 1214.35 L1289.2 1214.35 L1289.79 1214.35 L1290.37 1214.35 L1290.96 1214.35 L1291.55 1214.35 L1292.13 1214.35 L1292.72 1214.35 L1293.31 1214.35 L1293.89 1214.35 L1294.48 1214.35 L1295.06 1214.35 L1295.65 1214.35 L1296.24 1214.35 L1296.82 1214.35 L1297.41 1214.35 L1298 1214.35 L1298.58 1214.35 L1299.17 1214.35 L1299.76 1214.35 L1300.34 1214.35 L1300.93 1214.35 L1301.52 1214.35 L1302.1 1214.35 L1302.69 1214.35 L1303.27 1214.35 L1303.86 1214.35 L1304.45 1214.35 L1305.03 1214.35 L1305.62 1214.35 L1306.21 1214.35 L1306.79 1214.35 L1307.38 1214.35 L1307.97 1214.35 L1308.55 1214.35 L1309.14 1214.35 L1309.73 1214.35 L1310.31 1214.35 L1310.9 1214.35 L1311.48 1214.35 L1312.07 1214.35 L1312.66 1214.35 L1313.24 1214.35 L1313.83 1214.35 L1314.42 1214.35 L1315 1214.35 L1315.59 1214.35 L1316.18 1214.35 L1316.76 1214.35 L1317.35 1214.35 L1317.93 1214.35 L1318.52 1214.35 L1319.11 1214.35 L1319.69 1214.35 L1320.28 1214.35 L1320.87 1214.35 L1321.45 1214.35 L1322.04 1214.35 L1322.63 1214.35 L1323.21 1214.35 L1323.8 1214.35 L1324.39 1214.35 L1324.97 1214.35 L1325.56 1214.35 L1326.14 1214.35 L1326.73 1214.35 L1327.32 1214.35 L1327.9 1214.35 L1328.49 1214.35 L1329.08 1214.35 L1329.66 1214.35 L1330.25 1214.35 L1330.84 1214.35 L1331.42 1214.35 L1332.01 1214.35 L1332.6 1214.35 L1333.18 1214.35 L1333.77 1214.35 L1334.35 1214.35 L1334.94 1214.35 L1335.53 1214.35 L1336.11 1214.35 L1336.7 1214.35 L1337.29 1214.35 L1337.87 1214.35 L1338.46 1214.35 L1339.05 1214.35 L1339.63 1214.35 L1340.22 1214.35 L1340.8 1214.35 L1341.39 1214.35 L1341.98 1214.35 L1342.56 1214.35 L1343.15 1214.35 L1343.74 1214.35 L1344.32 1214.35 L1344.91 1214.35 L1345.5 1214.35 L1346.08 1214.35 L1346.67 1214.35 L1347.26 1214.35 L1347.84 1214.35 L1348.43 1214.35 L1349.01 1214.35 L1349.6 1214.35 L1350.19 1214.35 L1350.77 1214.35 L1351.36 1214.35 L1351.95 1214.35 L1352.53 1214.35 L1353.12 1214.35 L1353.71 1214.35 L1354.29 1214.35 L1354.88 1214.35 L1355.47 1214.35 L1356.05 1214.35 L1356.64 1214.35 L1357.22 1214.35 L1357.81 1214.35 L1358.4 1214.35 L1358.98 1214.35 L1359.57 1214.35 L1360.16 1214.35 L1360.74 1214.35 L1361.33 1214.35 L1361.92 1214.35 L1362.5 1214.35 L1363.09 1214.35 L1363.68 1214.35 L1364.26 1214.35 L1364.85 1214.35 L1365.43 1214.35 L1366.02 1214.35 L1366.61 1214.35 L1367.19 1214.35 L1367.78 1214.35 L1368.37 1214.35 L1368.95 1214.35 L1369.54 1214.35 L1370.13 1214.35 L1370.71 1214.35 L1371.3 1214.35 L1371.88 1214.35 L1372.47 1214.35 L1373.06 1214.35 L1373.64 1214.35 L1374.23 1214.35 L1374.82 1214.35 L1375.4 1214.35 L1375.99 1214.35 L1376.58 1214.35 L1377.16 1214.35 L1377.75 1214.35 L1378.34 1214.35 L1378.92 1214.35 L1379.51 1214.35 L1380.09 1214.35 L1380.68 1214.35 L1381.27 1214.35 L1381.85 1214.35 L1382.44 1214.35 L1383.03 1214.35 L1383.61 1214.35 L1384.2 1214.35 L1384.79 1214.35 L1385.37 1214.35 L1385.96 1214.35 L1386.55 1214.35 L1387.13 1214.35 L1387.72 1214.35 L1388.3 1214.35 L1388.89 1214.35 L1389.48 1214.35 L1390.06 1214.35 L1390.65 1214.35 L1391.24 1214.35 L1391.82 1214.35 L1392.41 1214.35 L1393 1214.35 L1393.58 1214.35 L1394.17 1214.35 L1394.75 1214.35 L1395.34 1214.35 L1395.93 1214.35 L1396.51 1214.35 L1397.1 1214.35 L1397.69 1214.35 L1398.27 1214.35 L1398.86 1214.35 L1399.45 1214.35 L1400.03 1214.35 L1400.62 1214.35 L1401.21 1214.35 L1401.79 1214.35 L1402.38 1214.35 L1402.96 1214.35 L1403.55 1214.35 L1404.14 1214.35 L1404.72 1214.35 L1405.31 1214.35 L1405.9 1214.35 L1406.48 1214.35 L1407.07 1214.35 L1407.66 1214.35 L1408.24 1214.35 L1408.83 1214.35 L1409.42 1214.35 L1410 1214.35 L1410.59 1214.35 L1411.17 1214.35 L1411.76 1214.35 L1412.35 1214.35 L1412.93 1214.35 L1413.52 1214.35 L1414.11 1214.35 L1414.69 1214.35 L1415.28 1214.35 L1415.87 1214.35 L1416.45 1214.35 L1417.04 1214.35 L1417.63 1214.35 L1418.21 1214.35 L1418.8 1214.35 L1419.38 1214.35 L1419.97 1214.35 L1420.56 1214.35 L1421.14 1214.35 L1421.73 1214.35 L1422.32 1214.35 L1422.9 1214.35 L1423.49 1214.35 L1424.08 1214.35 L1424.66 1214.35 L1425.25 1214.35 L1425.83 1214.35 L1426.42 1214.35 L1427.01 1214.35 L1427.59 1214.35 L1428.18 1214.35 L1428.77 1214.35 L1429.35 1214.35 L1429.94 1214.35 L1430.53 1214.35 L1431.11 1214.35 L1431.7 1214.35 L1432.29 1214.35 L1432.87 1214.35 L1433.46 1214.35 L1434.04 1214.35 L1434.63 1214.35 L1435.22 1214.35 L1435.8 1214.35 L1436.39 1214.35 L1436.98 1214.35 L1437.56 1214.35 L1438.15 1214.35 L1438.74 1214.35 L1439.32 1214.35 L1439.91 1214.35 L1440.5 1214.35 L1441.08 1214.35 L1441.67 1214.35 L1442.25 1214.35 L1442.84 1214.35 L1443.43 1214.35 L1444.01 1214.35 L1444.6 1214.35 L1445.19 1214.35 L1445.77 1214.35 L1446.36 1214.35 L1446.95 1214.35 L1447.53 1214.35 L1448.12 1214.35 L1448.7 1214.35 L1449.29 1214.35 L1449.88 1214.35 L1450.46 1214.35 L1451.05 1214.35 L1451.64 1214.35 L1452.22 1214.35 L1452.81 1214.35 L1453.4 1214.35 L1453.98 1214.35 L1454.57 1214.35 L1455.16 1214.35 L1455.74 1214.35 L1456.33 1214.35 L1456.91 1214.35 L1457.5 1214.35 L1458.09 1214.35 L1458.67 1214.35 L1459.26 1214.35 L1459.85 1214.35 L1460.43 1214.35 L1461.02 1214.35 L1461.61 1214.35 L1462.19 1214.35 L1462.78 1214.35 L1463.37 1214.35 L1463.95 1214.35 L1464.54 1214.35 L1465.12 1214.35 L1465.71 1214.35 L1466.3 1214.35 L1466.88 1214.35 L1467.47 1214.35 L1468.06 1214.35 L1468.64 1214.35 L1469.23 1214.35 L1469.82 1214.35 L1470.4 1214.35 L1470.99 1214.35 L1471.57 1214.35 L1472.16 1214.35 L1472.75 1214.35 L1473.33 1214.35 L1473.92 1214.35 L1474.51 1214.35 L1475.09 1214.35 L1475.68 1214.35 L1476.27 1214.35 L1476.85 1214.35 L1477.44 1214.35 L1478.03 1214.35 L1478.61 1214.35 L1479.2 1214.35 L1479.78 1214.35 L1480.37 1214.35 L1480.96 1214.35 L1481.54 1214.35 L1482.13 1214.35 L1482.72 1214.35 L1483.3 1214.35 L1483.89 1214.35 L1484.48 1214.35 L1485.06 1214.35 L1485.65 1214.35 L1486.24 1214.35 L1486.82 1214.35 L1487.41 1214.35 L1487.99 1214.35 L1488.58 1214.35 L1489.17 1214.35 L1489.75 1214.35 L1490.34 1214.35 L1490.93 1214.35 L1491.51 1214.35 L1492.1 1214.35 L1492.69 1214.35 L1493.27 1214.35 L1493.86 1214.35 L1494.45 1214.35 L1495.03 1214.35 L1495.62 1214.35 L1496.2 1214.35 L1496.79 1214.35 L1497.38 1214.35 L1497.96 1214.35 L1498.55 1214.35 L1499.14 1214.35 L1499.72 1214.35 L1500.31 1214.35 L1500.9 1214.35 L1501.48 1214.35 L1502.07 1214.35 L1502.65 1214.35 L1503.24 1214.35 L1503.83 1214.35 L1504.41 1214.35 L1505 1214.35 L1505.59 1214.35 L1506.17 1214.35 L1506.76 1214.35 L1507.35 1214.35 L1507.93 1214.35 L1508.52 1214.35 L1509.11 1214.35 L1509.69 1214.35 L1510.28 1214.35 L1510.86 1214.35 L1511.45 1214.35 L1512.04 1214.35 L1512.62 1214.35 L1513.21 1214.35 L1513.8 1214.35 L1514.38 1214.35 L1514.97 1214.35 L1515.56 1214.35 L1516.14 1214.35 L1516.73 1214.35 L1517.32 1214.35 L1517.9 1214.35 L1518.49 1214.35 L1519.07 1214.35 L1519.66 1214.35 L1520.25 1214.35 L1520.83 1214.35 L1521.42 1214.35 L1522.01 1214.35 L1522.59 1214.35 L1523.18 1214.35 L1523.77 1214.35 L1524.35 1214.35 L1524.94 1214.35 L1525.52 1214.35 L1526.11 1214.35 L1526.7 1214.35 L1527.28 1214.35 L1527.87 1214.35 L1528.46 1214.35 L1529.04 1214.35 L1529.63 1214.35 L1530.22 1214.35 L1530.8 1214.35 L1531.39 1214.35 L1531.98 1214.35 L1532.56 1214.35 L1533.15 1214.35 L1533.73 1214.35 L1534.32 1214.35 L1534.91 1214.35 L1535.49 1214.35 L1536.08 1214.35 L1536.67 1214.35 L1537.25 1214.35 L1537.84 1214.35 L1538.43 1214.35 L1539.01 1214.35 L1539.6 1214.35 L1540.19 1214.35 L1540.77 1214.35 L1541.36 1214.35 L1541.94 1214.35 L1542.53 1214.35 L1543.12 1214.35 L1543.7 1214.35 L1544.29 1214.35 L1544.88 1214.35 L1545.46 1214.35 L1546.05 1214.35 L1546.64 1214.35 L1547.22 1214.35 L1547.81 1214.35 L1548.4 1214.35 L1548.98 1214.35 L1549.57 1214.35 L1550.15 1214.35 L1550.74 1214.35 L1551.33 1214.35 L1551.91 1214.35 L1552.5 1214.35 L1553.09 1214.35 L1553.67 1214.35 L1554.26 1214.35 L1554.85 1214.35 L1555.43 1214.35 L1556.02 1214.35 L1556.6 1214.35 L1557.19 1214.35 L1557.78 1214.35 L1558.36 1214.35 L1558.95 1214.35 L1559.54 1214.35 L1560.12 1214.35 L1560.71 1214.35 L1561.3 1214.35 L1561.88 1214.35 L1562.47 1214.35 L1563.06 1214.35 L1563.64 1214.35 L1564.23 1214.35 L1564.81 1214.35 L1565.4 1214.35 L1565.99 1214.35 L1566.57 1214.35 L1567.16 1214.35 L1567.75 1214.35 L1568.33 1214.35 L1568.92 1214.35 L1569.51 1214.35 L1570.09 1214.35 L1570.68 1214.35 L1571.27 1214.35 L1571.85 1214.35 L1572.44 1214.35 L1573.02 1214.35 L1573.61 1214.35 L1574.2 1214.35 L1574.78 1214.35 L1575.37 1214.35 L1575.96 1214.35 L1576.54 1214.35 L1577.13 1214.35 L1577.72 1214.35 L1578.3 1214.35 L1578.89 1214.35 L1579.47 1214.35 L1580.06 1214.35 L1580.65 1214.35 L1581.23 1214.35 L1581.82 1214.35 L1582.41 1214.35 L1582.99 1214.35 L1583.58 1214.35 L1584.17 1214.35 L1584.75 1214.35 L1585.34 1214.35 L1585.93 1214.35 L1586.51 1214.35 L1587.1 1214.35 L1587.68 1214.35 L1588.27 1214.35 L1588.86 1214.35 L1589.44 1214.35 L1590.03 1214.35 L1590.62 1214.35 L1591.2 1214.35 L1591.79 1214.35 L1592.38 1214.35 L1592.96 1214.35 L1593.55 1214.35 L1594.14 1214.35 L1594.72 1214.35 L1595.31 1214.35 L1595.89 1214.35 L1596.48 1214.35 L1597.07 1214.35 L1597.65 1214.35 L1598.24 1214.35 L1598.83 1214.35 L1599.41 1214.35 L1600 1214.35 L1600.59 1214.35 L1601.17 1214.35 L1601.76 1214.35 L1602.34 1214.35 L1602.93 1214.35 L1603.52 1214.35 L1604.1 1214.35 L1604.69 1214.35 L1605.28 1214.35 L1605.86 1214.35 L1606.45 1214.35 L1607.04 1214.35 L1607.62 1214.35 L1608.21 1214.35 L1608.8 1214.35 L1609.38 1214.35 L1609.97 1214.35 L1610.55 1214.35 L1611.14 1214.35 L1611.73 1214.35 L1612.31 1214.35 L1612.9 1214.35 L1613.49 1214.35 L1614.07 1214.35 L1614.66 1214.35 L1615.25 1214.35 L1615.83 1214.35 L1616.42 1214.35 L1617.01 1214.35 L1617.59 1214.35 L1618.18 1214.35 L1618.76 1214.35 L1619.35 1214.35 L1619.94 1214.35 L1620.52 1214.35 L1621.11 1214.35 L1621.7 1214.35 L1622.28 1214.35 L1622.87 1214.35 L1623.46 1214.35 L1624.04 1214.35 L1624.63 1214.35 L1625.22 1214.35 L1625.8 1214.35 L1626.39 1214.35 L1626.97 1214.35 L1627.56 1214.35 L1628.15 1214.35 L1628.73 1214.35 L1629.32 1214.35 L1629.91 1214.35 L1630.49 1214.35 L1631.08 1214.35 L1631.67 1214.35 L1632.25 1214.35 L1632.84 1214.35 L1633.42 1214.35 L1634.01 1214.35 L1634.6 1214.35 L1635.18 1214.35 L1635.77 1214.35 L1636.36 1214.35 L1636.94 1214.35 L1637.53 1214.35 L1638.12 1214.35 L1638.7 1214.35 L1639.29 1214.35 L1639.88 1214.35 L1640.46 1214.35 L1641.05 1214.35 L1641.63 1214.35 L1642.22 1214.35 L1642.81 1214.35 L1643.39 1214.35 L1643.98 1214.35 L1644.57 1214.35 L1645.15 1214.35 L1645.74 1214.35 L1646.33 1214.35 L1646.91 1214.35 L1647.5 1214.35 L1648.09 1214.35 L1648.67 1214.35 L1649.26 1214.35 L1649.84 1214.35 L1650.43 1214.35 L1651.02 1214.35 L1651.6 1214.35 L1652.19 1214.35 L1652.78 1214.35 L1653.36 1214.35 L1653.95 1214.35 L1654.54 1214.35 L1655.12 1214.35 L1655.71 1214.35 L1656.29 1214.35 L1656.88 1214.35 L1657.47 1214.35 L1658.05 1214.35 L1658.64 1214.35 L1659.23 1214.35 L1659.81 1214.35 L1660.4 1214.35 L1660.99 1214.35 L1661.57 1214.35 L1662.16 1214.35 L1662.75 1214.35 L1663.33 1214.35 L1663.92 1214.35 L1664.5 1214.35 L1665.09 1214.35 L1665.68 1214.35 L1666.26 1214.35 L1666.85 1214.35 L1667.44 1214.35 L1668.02 1214.35 L1668.61 1214.35 L1669.2 1214.35 L1669.78 1214.35 L1670.37 1214.35 L1670.96 1214.35 L1671.54 1214.35 L1672.13 1214.35 L1672.71 1214.35 L1673.3 1214.35 L1673.89 1214.35 L1674.47 1214.35 L1675.06 1214.35 L1675.65 1214.35 L1676.23 1214.35 L1676.82 1214.35 L1677.41 1214.35 L1677.99 1214.35 L1678.58 1214.35 L1679.17 1214.35 L1679.75 1214.35 L1680.34 1214.35 L1680.92 1214.35 L1681.51 1214.35 L1682.1 1214.35 L1682.68 1214.35 L1683.27 1214.35 L1683.86 1214.35 L1684.44 1214.35 L1685.03 1214.35 L1685.62 1214.35 L1686.2 1214.35 L1686.79 1214.35 L1687.37 1214.35 L1687.96 1214.35 L1688.55 1214.35 L1689.13 1214.35 L1689.72 1214.35 L1690.31 1214.35 L1690.89 1214.35 L1691.48 1214.35 L1692.07 1214.35 L1692.65 1214.35 L1693.24 1214.35 L1693.83 1214.35 L1694.41 1214.35 L1695 1214.35 L1695.58 1214.35 L1696.17 1214.35 L1696.76 1214.35 L1697.34 1214.35 L1697.93 1214.35 L1698.52 1214.35 L1699.1 1214.35 L1699.69 1214.35 L1700.28 1214.35 L1700.86 1214.35 L1701.45 1214.35 L1702.04 1214.35 L1702.62 1214.35 L1703.21 1214.35 L1703.79 1214.35 L1704.38 1214.35 L1704.97 1214.35 L1705.55 1214.35 L1706.14 1214.35 L1706.73 1214.35 L1707.31 1214.35 L1707.9 1214.35 L1708.49 1214.35 L1709.07 1214.35 L1709.66 1214.35 L1710.24 1214.35 L1710.83 1214.35 L1711.42 1214.35 L1712 1214.35 L1712.59 1214.35 L1713.18 1214.35 L1713.76 1214.35 L1714.35 1214.35 L1714.94 1214.35 L1715.52 1214.35 L1716.11 1214.35 L1716.7 1214.35 L1717.28 1214.35 L1717.87 1214.35 L1718.45 1214.35 L1719.04 1214.35 L1719.63 1214.35 L1720.21 1214.35 L1720.8 1214.35 L1721.39 1214.35 L1721.97 1214.35 L1722.56 1214.35 L1723.15 1214.35 L1723.73 1214.35 L1724.32 1214.35 L1724.91 1214.35 L1725.49 1214.35 L1726.08 1214.35 L1726.66 1214.35 L1727.25 1214.35 L1727.84 1214.35 L1728.42 1214.35 L1729.01 1214.35 L1729.6 1214.35 L1730.18 1214.35 L1730.77 1214.35 L1731.36 1214.35 L1731.94 1214.35 L1732.53 1214.35 L1733.11 1214.35 L1733.7 1214.35 L1734.29 1214.35 L1734.87 1214.35 L1735.46 1214.35 L1736.05 1214.35 L1736.63 1214.35 L1737.22 1214.35 L1737.81 1214.35 L1738.39 1214.35 L1738.98 1214.35 L1739.57 1214.35 L1740.15 1214.35 L1740.74 1214.35 L1741.32 1214.35 L1741.91 1214.35 L1742.5 1214.35 L1743.08 1214.35 L1743.67 1214.35 L1744.26 1214.35 L1744.84 1214.35 L1745.43 1214.35 L1746.02 1214.35 L1746.6 1214.35 L1747.19 1214.35 L1747.78 1214.35 L1748.36 1214.35 L1748.95 1214.35 L1749.53 1214.35 L1750.12 1214.35 L1750.71 1214.35 L1751.29 1214.35 L1751.88 1214.35 L1752.47 1214.35 L1753.05 1214.35 L1753.64 1214.35 L1754.23 1214.35 L1754.81 1214.35 L1755.4 1214.35 L1755.99 1214.35 L1756.57 1214.35 L1757.16 1214.35 L1757.74 1214.35 L1758.33 1214.35 L1758.92 1214.35 L1759.5 1214.35 L1760.09 1214.35 L1760.68 1214.35 L1761.26 1214.35 L1761.85 1214.35 L1762.44 1214.35 L1763.02 1214.35 L1763.61 1214.35 L1764.19 1214.35 L1764.78 1214.35 L1765.37 1214.35 L1765.95 1214.35 L1766.54 1214.35 L1767.13 1214.35 L1767.71 1214.35 L1768.3 1214.35 L1768.89 1214.35 L1769.47 1214.35 L1770.06 1214.35 L1770.65 1214.35 L1771.23 1214.35 L1771.82 1214.35 L1772.4 1214.35 L1772.99 1214.35 L1773.58 1214.35 L1774.16 1214.35 L1774.75 1214.35 L1775.34 1214.35 L1775.92 1214.35 L1776.51 1214.35 L1777.1 1214.35 L1777.68 1214.35 L1778.27 1214.35 L1778.86 1214.35 L1779.44 1214.35 L1780.03 1214.35 L1780.61 1214.35 L1781.2 1214.35 L1781.79 1214.35 L1782.37 1214.35 L1782.96 1214.35 L1783.55 1214.35 L1784.13 1214.35 L1784.72 1214.35 L1785.31 1214.35 L1785.89 1214.35 L1786.48 1214.35 L1787.06 1214.35 L1787.65 1214.35 L1788.24 1214.35 L1788.82 1214.35 L1789.41 1214.35 L1790 1214.35 L1790.58 1214.35 L1791.17 1214.35 L1791.76 1214.35 L1792.34 1214.35 L1792.93 1214.35 L1793.52 1214.35 L1794.1 1214.35 L1794.69 1214.35 L1795.27 1214.35 L1795.86 1214.35 L1796.45 1214.35 L1797.03 1214.35 L1797.62 1214.35 L1798.21 1214.35 L1798.79 1214.35 L1799.38 1214.35 L1799.97 1214.35 L1800.55 1214.35 L1801.14 1214.35 L1801.73 1214.35 L1802.31 1214.35 L1802.9 1214.35 L1803.48 1214.35 L1804.07 1214.35 L1804.66 1214.35 L1805.24 1214.35 L1805.83 1214.35 L1806.42 1214.35 L1807 1214.35 L1807.59 1214.35 L1808.18 1214.35 L1808.76 1214.35 L1809.35 1214.35 L1809.94 1214.35 L1810.52 1214.35 L1811.11 1214.35 L1811.69 1214.35 L1812.28 1214.35 L1812.87 1214.35 L1813.45 1214.35 L1814.04 1214.35 L1814.63 1214.35 L1815.21 1214.35 L1815.8 1214.35 L1816.39 1214.35 L1816.97 1214.35 L1817.56 1214.35 L1818.14 1214.35 L1818.73 1214.35 L1819.32 1214.35 L1819.9 1214.35 L1820.49 1214.35 L1821.08 1214.35 L1821.66 1214.35 L1822.25 1214.35 L1822.84 1214.35 L1823.42 1214.35 L1824.01 1214.35 L1824.6 1214.35 L1825.18 1214.35 L1825.77 1214.35 L1826.35 1214.35 L1826.94 1214.35 L1827.53 1214.35 L1828.11 1214.35 L1828.7 1214.35 L1829.29 1214.35 L1829.87 1214.35 L1830.46 1214.35 L1831.05 1214.35 L1831.63 1214.35 L1832.22 1214.35 L1832.81 1214.35 L1833.39 1214.35 L1833.98 1214.35 L1834.56 1214.35 L1835.15 1214.35 L1835.74 1214.35 L1836.32 1214.35 L1836.91 1214.35 L1837.5 1214.35 L1838.08 1214.35 L1838.67 1214.35 L1839.26 1214.35 L1839.84 1214.35 L1840.43 1214.35 L1841.01 1214.35 L1841.6 1214.35 L1842.19 1214.35 L1842.77 1214.35 L1843.36 1214.35 L1843.95 1214.35 L1844.53 1214.35 L1845.12 1214.35 L1845.71 1214.35 L1846.29 1214.35 L1846.88 1214.35 L1847.47 1214.35 L1848.05 1214.35 L1848.64 1214.35 L1849.22 1214.35 L1849.81 1214.35 L1850.4 1214.35 L1850.98 1214.35 L1851.57 1214.35 L1852.16 1214.35 L1852.74 1214.35 L1853.33 1214.35 L1853.92 1214.35 L1854.5 1214.35 L1855.09 1214.35 L1855.68 1214.35 L1856.26 1214.35 L1856.85 1214.35 L1857.43 1214.35 L1858.02 1214.35 L1858.61 1214.35 L1859.19 1214.35 L1859.78 1214.35 L1860.37 1214.35 L1860.95 1214.35 L1861.54 1214.35 L1862.13 1214.35 L1862.71 1214.35 L1863.3 1214.35 L1863.88 1214.35 L1864.47 1214.35 L1865.06 1214.35 L1865.64 1214.35 L1866.23 1214.35 L1866.82 1214.35 L1867.4 1214.35 L1867.99 1214.35 L1868.58 1214.35 L1869.16 1214.35 L1869.75 1214.35 L1870.34 1214.35 L1870.92 1214.35 L1871.51 1214.35 L1872.09 1214.35 L1872.68 1214.35 L1873.27 1214.35 L1873.85 1214.35 L1874.44 1214.35 L1875.03 1214.35 L1875.61 1214.35 L1876.2 1214.35 L1876.79 1214.35 L1877.37 1214.35 L1877.96 1214.35 L1878.55 1214.35 L1879.13 1214.35 L1879.72 1214.35 L1880.3 1214.35 L1880.89 1214.35 L1881.48 1214.35 L1882.06 1214.35 L1882.65 1214.35 L1883.24 1214.35 L1883.82 1214.35 L1884.41 1214.35 L1885 1214.35 L1885.58 1214.35 L1886.17 1214.35 L1886.76 1214.35 L1887.34 1214.35 L1887.93 1214.35 L1888.51 1214.35 L1889.1 1214.35 L1889.69 1214.35 L1890.27 1214.35 L1890.86 1214.35 L1891.45 1214.35 L1892.03 1214.35 L1892.62 1214.35 L1893.21 1214.35 L1893.79 1214.35 L1894.38 1214.35 L1894.96 1214.35 L1895.55 1214.35 L1896.14 1214.35 L1896.72 1214.35 L1897.31 1214.35 L1897.9 1214.35 L1898.48 1214.35 L1899.07 1214.35 L1899.66 1214.35 L1900.24 1214.35 L1900.83 1214.35 L1901.42 1214.35 L1902 1214.35 L1902.59 1214.35 L1903.17 1214.35 L1903.76 1214.35 L1904.35 1214.35 L1904.93 1214.35 L1905.52 1214.35 L1906.11 1214.35 L1906.69 1214.35 L1907.28 1214.35 L1907.87 1214.35 L1908.45 1214.35 L1909.04 1214.35 L1909.63 1214.35 L1910.21 1214.35 L1910.8 1214.35 L1911.38 1214.35 L1911.97 1214.35 L1912.56 1214.35 L1913.14 1214.35 L1913.73 1214.35 L1914.32 1214.35 L1914.9 1214.35 L1915.49 1214.35 L1916.08 1214.35 L1916.66 1214.35 L1917.25 1214.35 L1917.83 1214.35 L1918.42 1214.35 L1919.01 1214.35 L1919.59 1214.35 L1920.18 1214.35 L1920.77 1214.35 L1921.35 1214.35 L1921.94 1214.35 L1922.53 1214.35 L1923.11 1214.35 L1923.7 1214.35 L1924.29 1214.35 L1924.87 1214.35 L1925.46 1214.35 L1926.04 1214.35 L1926.63 1214.35 L1927.22 1214.35 L1927.8 1214.35 L1928.39 1214.35 L1928.98 1214.35 L1929.56 1214.35 L1930.15 1214.35 L1930.74 1214.35 L1931.32 1214.35 L1931.91 1214.35 L1932.5 1214.35 L1933.08 1214.35 L1933.67 1214.35 L1934.25 1214.35 L1934.84 1214.35 L1935.43 1214.35 L1936.01 1214.35 L1936.6 1214.35 L1937.19 1214.35 L1937.77 1214.35 L1938.36 1214.35 L1938.95 1214.35 L1939.53 1214.35 L1940.12 1214.35 L1940.71 1214.35 L1941.29 1214.35 L1941.88 1214.35 L1942.46 1214.35 L1943.05 1214.35 L1943.64 1214.35 L1944.22 1214.35 L1944.81 1214.35 L1945.4 1214.35 L1945.98 1214.35 L1946.57 1214.35 L1947.16 1214.35 L1947.74 1214.35 L1948.33 1214.35 L1948.91 1214.35 L1949.5 1214.35 L1950.09 1214.35 L1950.67 1214.35 L1951.26 1214.35 L1951.85 1214.35 L1952.43 1214.35 L1953.02 1214.35 L1953.61 1214.35 L1954.19 1214.35 L1954.78 1214.35 L1955.37 1214.35 L1955.95 1214.35 L1956.54 1214.35 L1957.12 1214.35 L1957.71 1214.35 L1958.3 1214.35 L1958.88 1214.35 L1959.47 1214.35 L1960.06 1214.35 L1960.64 1214.35 L1961.23 1214.35 L1961.82 1214.35 L1962.4 1214.35 L1962.99 1214.35 L1963.58 1214.35 L1964.16 1214.35 L1964.75 1214.35 L1965.33 1214.35 L1965.92 1214.35 L1966.51 1214.35 L1967.09 1214.35 L1967.68 1214.35 L1968.27 1214.35 L1968.85 1214.35 L1969.44 1214.35 L1970.03 1214.35 L1970.61 1214.35 L1971.2 1214.35 L1971.78 1214.35 L1972.37 1214.35 L1972.96 1214.35 L1973.54 1214.35 L1974.13 1214.35 L1974.72 1214.35 L1975.3 1214.35 L1975.89 1214.35 L1976.48 1214.35 L1977.06 1214.35 L1977.65 1214.35 L1978.24 1214.35 L1978.82 1214.35 L1979.41 1214.35 L1979.99 1214.35 L1980.58 1214.35 L1981.17 1214.35 L1981.75 1214.35 L1982.34 1214.35 L1982.93 1214.35 L1983.51 1214.35 L1984.1 1214.35 L1984.69 1214.35 L1985.27 1214.35 L1985.86 1214.35 L1986.45 1214.35 L1987.03 1214.35 L1987.62 1214.35 L1988.2 1214.35 L1988.79 1214.35 L1989.38 1214.35 L1989.96 1214.35 L1990.55 1214.35 L1991.14 1214.35 L1991.72 1214.35 L1992.31 1214.35 L1992.9 1214.35 L1993.48 1214.35 L1994.07 1214.35 L1994.65 1214.35 L1995.24 1214.35 L1995.83 1214.35 L1996.41 1214.35 L1997 1214.35 L1997.59 1214.35 L1998.17 1214.35 L1998.76 1214.35 L1999.35 1214.35 L1999.93 1214.35 L2000.52 1214.35 L2001.11 1214.35 L2001.69 1214.35 L2002.28 1214.35 L2002.86 1214.35 L2003.45 1214.35 L2004.04 1214.35 L2004.62 1214.35 L2005.21 1214.35 L2005.8 1214.35 L2006.38 1214.35 L2006.97 1214.35 L2007.56 1214.35 L2008.14 1214.35 L2008.73 1214.35 L2009.32 1214.35 L2009.9 1214.35 L2010.49 1214.35 L2011.07 1214.35 L2011.66 1214.35 L2012.25 1214.35 L2012.83 1214.35 L2013.42 1214.35 L2014.01 1214.35 L2014.59 1214.35 L2015.18 1214.35 L2015.77 1214.35 L2016.35 1214.35 L2016.94 1214.35 L2017.53 1214.35 L2018.11 1214.35 L2018.7 1214.35 L2019.28 1214.35 L2019.87 1214.35 L2020.46 1214.35 L2021.04 1214.35 L2021.63 1214.35 L2022.22 1214.35 L2022.8 1214.35 L2023.39 1214.35 L2023.98 1214.35 L2024.56 1214.35 L2025.15 1214.35 L2025.73 1214.35 L2026.32 1214.35 L2026.91 1214.35 L2027.49 1214.35 L2028.08 1214.35 L2028.67 1214.35 L2029.25 1214.35 L2029.84 1214.35 L2030.43 1214.35 L2031.01 1214.35 L2031.6 1214.35 L2032.19 1214.35 L2032.77 1214.35 L2033.36 1214.35 L2033.94 1214.35 L2034.53 1214.35 L2035.12 1214.35 L2035.7 1214.35 L2036.29 1214.35 L2036.88 1214.35 L2037.46 1214.35 L2038.05 1214.35 L2038.64 1214.35 L2039.22 1214.35 L2039.81 1214.35 L2040.4 1214.35 L2040.98 1214.35 L2041.57 1214.35 L2042.15 1214.35 L2042.74 1214.35 L2043.33 1214.35 L2043.91 1214.35 L2044.5 1214.35 L2045.09 1214.35 L2045.67 1214.35 L2046.26 1214.35 L2046.85 1214.35 L2047.43 1214.35 L2048.02 1214.35 L2048.6 1214.35 L2049.19 1214.35 L2049.78 1214.35 L2050.36 1214.35 L2050.95 1214.35 L2051.54 1214.35 L2052.12 1214.35 L2052.71 1214.35 L2053.3 1214.35 L2053.88 1214.35 L2054.47 1214.35 L2055.06 1214.35 L2055.64 1214.35 L2056.23 1214.35 L2056.81 1214.35 L2057.4 1214.35 L2057.99 1214.35 L2058.57 1214.35 L2059.16 1214.35 L2059.75 1214.35 L2060.33 1214.35 L2060.92 1214.35 L2061.51 1214.35 L2062.09 1214.35 L2062.68 1214.35 L2063.27 1214.35 L2063.85 1214.35 L2064.44 1214.35 L2065.02 1214.35 L2065.61 1214.35 L2066.2 1214.35 L2066.78 1214.35 L2067.37 1214.35 L2067.96 1214.35 L2068.54 1214.35 L2069.13 1214.35 L2069.72 1214.35 L2070.3 1214.35 L2070.89 1214.35 L2071.48 1214.35 L2072.06 1214.35 L2072.65 1214.35 L2073.23 1214.35 L2073.82 1214.35 L2074.41 1214.35 L2074.99 1214.35 L2075.58 1214.35 L2076.17 1214.35 L2076.75 1214.35 L2077.34 1214.35 L2077.93 1214.35 L2078.51 1214.35 L2079.1 1214.35 L2079.68 1214.35 L2080.27 1214.35 L2080.86 1214.35 L2081.44 1214.35 L2082.03 1214.35 L2082.62 1214.35 L2083.2 1214.35 L2083.79 1214.35 L2084.38 1214.35 L2084.96 1214.35 L2085.55 1214.35 L2086.14 1214.35 L2086.72 1214.35 L2087.31 1214.35 L2087.89 1214.35 L2088.48 1214.35 L2089.07 1214.35 L2089.65 1214.35 L2090.24 1214.35 L2090.83 1214.35 L2091.41 1214.35 L2092 1214.35 L2092.59 1214.35 L2093.17 1214.35 L2093.76 1214.35 L2094.35 1214.35 L2094.93 1214.35 L2095.52 1214.35 L2096.1 1214.35 L2096.69 1214.35 L2097.28 1214.35 L2097.86 1214.35 L2098.45 1214.35 L2099.04 1214.35 L2099.62 1214.35 L2100.21 1214.35 L2100.8 1214.35 L2101.38 1214.35 L2101.97 1214.35 L2102.55 1214.35 L2103.14 1214.35 L2103.73 1214.35 L2104.31 1214.35 L2104.9 1214.35 L2105.49 1214.35 L2106.07 1214.35 L2106.66 1214.35 L2107.25 1214.35 L2107.83 1214.35 L2108.42 1214.35 L2109.01 1214.35 L2109.59 1214.35 L2110.18 1214.35 L2110.76 1214.35 L2111.35 1214.35 L2111.94 1214.35 L2112.52 1214.35 L2113.11 1214.35 L2113.7 1214.35 L2114.28 1214.35 L2114.87 1214.35 L2115.46 1214.35 L2116.04 1214.35 L2116.63 1214.35 L2117.22 1214.35 L2117.8 1214.35 L2118.39 1214.35 L2118.97 1214.35 L2119.56 1214.35 L2120.15 1214.35 L2120.73 1214.35 L2121.32 1214.35 L2121.91 1214.35 L2122.49 1214.35 L2123.08 1214.35 L2123.67 1214.35 L2124.25 1214.35 L2124.84 1214.35 L2125.42 1214.35 L2126.01 1214.35 L2126.6 1214.35 L2127.18 1214.35 L2127.77 1214.35 L2128.36 1214.35 L2128.94 1214.35 L2129.53 1214.35 L2130.12 1214.35 L2130.7 1214.35 L2131.29 1214.35 L2131.88 1214.35 L2132.46 1214.35 L2133.05 1214.35 L2133.63 1214.35 L2134.22 1214.35 L2134.81 1214.35 L2135.39 1214.35 L2135.98 1214.35 L2136.57 1214.35 L2137.15 1214.35 L2137.74 1214.35 L2138.33 1214.35 L2138.91 1214.35 L2139.5 1214.35 L2140.09 1214.35 L2140.67 1214.35 L2141.26 1214.35 L2141.84 1214.35 L2142.43 1214.35 L2143.02 1214.35 L2143.6 1214.35 L2144.19 1214.35 L2144.78 1214.35 L2145.36 1214.35 L2145.95 1214.35 L2146.54 1214.35 L2147.12 1214.35 L2147.71 1214.35 L2148.3 1214.35 L2148.88 1214.35 L2149.47 1214.35 L2150.05 1214.35 L2150.64 1214.35 L2151.23 1214.35 L2151.81 1214.35 L2152.4 1214.35 L2152.99 1214.35 L2153.57 1214.35 L2154.16 1214.35 L2154.75 1214.35 L2155.33 1214.35 L2155.92 1214.35 L2156.5 1214.35 L2157.09 1214.35 L2157.68 1214.35 L2158.26 1214.35 L2158.26 1213.65 L2157.68 1213.65 L2157.09 1213.65 L2156.5 1213.65 L2155.92 1213.65 L2155.33 1213.65 L2154.75 1213.65 L2154.16 1213.65 L2153.57 1213.65 L2152.99 1213.65 L2152.4 1213.65 L2151.81 1213.65 L2151.23 1213.65 L2150.64 1213.65 L2150.05 1213.65 L2149.47 1213.65 L2148.88 1213.65 L2148.3 1213.65 L2147.71 1213.65 L2147.12 1213.65 L2146.54 1213.65 L2145.95 1213.65 L2145.36 1213.65 L2144.78 1213.65 L2144.19 1213.65 L2143.6 1213.65 L2143.02 1213.65 L2142.43 1213.65 L2141.84 1213.65 L2141.26 1213.65 L2140.67 1213.65 L2140.09 1213.65 L2139.5 1213.65 L2138.91 1213.65 L2138.33 1213.65 L2137.74 1213.65 L2137.15 1213.65 L2136.57 1213.65 L2135.98 1213.65 L2135.39 1213.65 L2134.81 1213.65 L2134.22 1213.65 L2133.63 1213.65 L2133.05 1213.65 L2132.46 1213.65 L2131.88 1213.65 L2131.29 1213.65 L2130.7 1213.65 L2130.12 1213.65 L2129.53 1213.65 L2128.94 1213.65 L2128.36 1213.65 L2127.77 1213.65 L2127.18 1213.65 L2126.6 1213.65 L2126.01 1213.65 L2125.42 1213.65 L2124.84 1213.65 L2124.25 1213.65 L2123.67 1213.65 L2123.08 1213.65 L2122.49 1213.65 L2121.91 1213.65 L2121.32 1213.65 L2120.73 1213.65 L2120.15 1213.65 L2119.56 1213.65 L2118.97 1213.65 L2118.39 1213.65 L2117.8 1213.65 L2117.22 1213.65 L2116.63 1213.65 L2116.04 1213.65 L2115.46 1213.65 L2114.87 1213.65 L2114.28 1213.65 L2113.7 1213.65 L2113.11 1213.65 L2112.52 1213.65 L2111.94 1213.65 L2111.35 1213.65 L2110.76 1213.65 L2110.18 1213.65 L2109.59 1213.65 L2109.01 1213.65 L2108.42 1213.65 L2107.83 1213.65 L2107.25 1213.65 L2106.66 1213.65 L2106.07 1213.65 L2105.49 1213.65 L2104.9 1213.65 L2104.31 1213.65 L2103.73 1213.65 L2103.14 1213.65 L2102.55 1213.65 L2101.97 1213.65 L2101.38 1213.65 L2100.8 1213.65 L2100.21 1213.65 L2099.62 1213.65 L2099.04 1213.65 L2098.45 1213.65 L2097.86 1213.65 L2097.28 1213.65 L2096.69 1213.65 L2096.1 1213.65 L2095.52 1213.65 L2094.93 1213.65 L2094.35 1213.65 L2093.76 1213.65 L2093.17 1213.65 L2092.59 1213.65 L2092 1213.65 L2091.41 1213.65 L2090.83 1213.65 L2090.24 1213.65 L2089.65 1213.65 L2089.07 1213.65 L2088.48 1213.65 L2087.89 1213.65 L2087.31 1213.65 L2086.72 1213.65 L2086.14 1213.65 L2085.55 1213.65 L2084.96 1213.65 L2084.38 1213.65 L2083.79 1213.65 L2083.2 1213.65 L2082.62 1213.65 L2082.03 1213.65 L2081.44 1213.65 L2080.86 1213.65 L2080.27 1213.65 L2079.68 1213.65 L2079.1 1213.65 L2078.51 1213.65 L2077.93 1213.65 L2077.34 1213.65 L2076.75 1213.65 L2076.17 1213.65 L2075.58 1213.65 L2074.99 1213.65 L2074.41 1213.65 L2073.82 1213.65 L2073.23 1213.65 L2072.65 1213.65 L2072.06 1213.65 L2071.48 1213.65 L2070.89 1213.65 L2070.3 1213.65 L2069.72 1213.65 L2069.13 1213.65 L2068.54 1213.65 L2067.96 1213.65 L2067.37 1213.65 L2066.78 1213.65 L2066.2 1213.65 L2065.61 1213.65 L2065.02 1213.65 L2064.44 1213.65 L2063.85 1213.65 L2063.27 1213.65 L2062.68 1213.65 L2062.09 1213.65 L2061.51 1213.65 L2060.92 1213.65 L2060.33 1213.65 L2059.75 1213.65 L2059.16 1213.65 L2058.57 1213.65 L2057.99 1213.65 L2057.4 1213.65 L2056.81 1213.65 L2056.23 1213.65 L2055.64 1213.65 L2055.06 1213.65 L2054.47 1213.65 L2053.88 1213.65 L2053.3 1213.65 L2052.71 1213.65 L2052.12 1213.65 L2051.54 1213.65 L2050.95 1213.65 L2050.36 1213.65 L2049.78 1213.65 L2049.19 1213.65 L2048.6 1213.65 L2048.02 1213.65 L2047.43 1213.65 L2046.85 1213.65 L2046.26 1213.65 L2045.67 1213.65 L2045.09 1213.65 L2044.5 1213.65 L2043.91 1213.65 L2043.33 1213.65 L2042.74 1213.65 L2042.15 1213.65 L2041.57 1213.65 L2040.98 1213.65 L2040.4 1213.65 L2039.81 1213.65 L2039.22 1213.65 L2038.64 1213.65 L2038.05 1213.65 L2037.46 1213.65 L2036.88 1213.65 L2036.29 1213.65 L2035.7 1213.65 L2035.12 1213.65 L2034.53 1213.65 L2033.94 1213.65 L2033.36 1213.65 L2032.77 1213.65 L2032.19 1213.65 L2031.6 1213.65 L2031.01 1213.65 L2030.43 1213.65 L2029.84 1213.65 L2029.25 1213.65 L2028.67 1213.65 L2028.08 1213.65 L2027.49 1213.65 L2026.91 1213.65 L2026.32 1213.65 L2025.73 1213.65 L2025.15 1213.65 L2024.56 1213.65 L2023.98 1213.65 L2023.39 1213.65 L2022.8 1213.65 L2022.22 1213.65 L2021.63 1213.65 L2021.04 1213.65 L2020.46 1213.65 L2019.87 1213.65 L2019.28 1213.65 L2018.7 1213.65 L2018.11 1213.65 L2017.53 1213.65 L2016.94 1213.65 L2016.35 1213.65 L2015.77 1213.65 L2015.18 1213.65 L2014.59 1213.65 L2014.01 1213.65 L2013.42 1213.65 L2012.83 1213.65 L2012.25 1213.65 L2011.66 1213.65 L2011.07 1213.65 L2010.49 1213.65 L2009.9 1213.65 L2009.32 1213.65 L2008.73 1213.65 L2008.14 1213.65 L2007.56 1213.65 L2006.97 1213.65 L2006.38 1213.65 L2005.8 1213.65 L2005.21 1213.65 L2004.62 1213.65 L2004.04 1213.65 L2003.45 1213.65 L2002.86 1213.65 L2002.28 1213.65 L2001.69 1213.65 L2001.11 1213.65 L2000.52 1213.65 L1999.93 1213.65 L1999.35 1213.65 L1998.76 1213.65 L1998.17 1213.65 L1997.59 1213.65 L1997 1213.65 L1996.41 1213.65 L1995.83 1213.65 L1995.24 1213.65 L1994.65 1213.65 L1994.07 1213.65 L1993.48 1213.65 L1992.9 1213.65 L1992.31 1213.65 L1991.72 1213.65 L1991.14 1213.65 L1990.55 1213.65 L1989.96 1213.65 L1989.38 1213.65 L1988.79 1213.65 L1988.2 1213.65 L1987.62 1213.65 L1987.03 1213.65 L1986.45 1213.65 L1985.86 1213.65 L1985.27 1213.65 L1984.69 1213.65 L1984.1 1213.65 L1983.51 1213.65 L1982.93 1213.65 L1982.34 1213.65 L1981.75 1213.65 L1981.17 1213.65 L1980.58 1213.65 L1979.99 1213.65 L1979.41 1213.65 L1978.82 1213.65 L1978.24 1213.65 L1977.65 1213.65 L1977.06 1213.65 L1976.48 1213.65 L1975.89 1213.65 L1975.3 1213.65 L1974.72 1213.65 L1974.13 1213.65 L1973.54 1213.65 L1972.96 1213.65 L1972.37 1213.65 L1971.78 1213.65 L1971.2 1213.65 L1970.61 1213.65 L1970.03 1213.65 L1969.44 1213.65 L1968.85 1213.65 L1968.27 1213.65 L1967.68 1213.65 L1967.09 1213.65 L1966.51 1213.65 L1965.92 1213.65 L1965.33 1213.65 L1964.75 1213.65 L1964.16 1213.65 L1963.58 1213.65 L1962.99 1213.65 L1962.4 1213.65 L1961.82 1213.65 L1961.23 1213.65 L1960.64 1213.65 L1960.06 1213.65 L1959.47 1213.65 L1958.88 1213.65 L1958.3 1213.65 L1957.71 1213.65 L1957.12 1213.65 L1956.54 1213.65 L1955.95 1213.65 L1955.37 1213.65 L1954.78 1213.65 L1954.19 1213.65 L1953.61 1213.65 L1953.02 1213.65 L1952.43 1213.65 L1951.85 1213.65 L1951.26 1213.65 L1950.67 1213.65 L1950.09 1213.65 L1949.5 1213.65 L1948.91 1213.65 L1948.33 1213.65 L1947.74 1213.65 L1947.16 1213.65 L1946.57 1213.65 L1945.98 1213.65 L1945.4 1213.65 L1944.81 1213.65 L1944.22 1213.65 L1943.64 1213.65 L1943.05 1213.65 L1942.46 1213.65 L1941.88 1213.65 L1941.29 1213.65 L1940.71 1213.65 L1940.12 1213.65 L1939.53 1213.65 L1938.95 1213.65 L1938.36 1213.65 L1937.77 1213.65 L1937.19 1213.65 L1936.6 1213.65 L1936.01 1213.65 L1935.43 1213.65 L1934.84 1213.65 L1934.25 1213.65 L1933.67 1213.65 L1933.08 1213.65 L1932.5 1213.65 L1931.91 1213.65 L1931.32 1213.65 L1930.74 1213.65 L1930.15 1213.65 L1929.56 1213.65 L1928.98 1213.65 L1928.39 1213.65 L1927.8 1213.65 L1927.22 1213.65 L1926.63 1213.65 L1926.04 1213.65 L1925.46 1213.65 L1924.87 1213.65 L1924.29 1213.65 L1923.7 1213.65 L1923.11 1213.65 L1922.53 1213.65 L1921.94 1213.65 L1921.35 1213.65 L1920.77 1213.65 L1920.18 1213.65 L1919.59 1213.65 L1919.01 1213.65 L1918.42 1213.65 L1917.83 1213.65 L1917.25 1213.65 L1916.66 1213.65 L1916.08 1213.65 L1915.49 1213.65 L1914.9 1213.65 L1914.32 1213.65 L1913.73 1213.65 L1913.14 1213.65 L1912.56 1213.65 L1911.97 1213.65 L1911.38 1213.65 L1910.8 1213.65 L1910.21 1213.65 L1909.63 1213.65 L1909.04 1213.65 L1908.45 1213.65 L1907.87 1213.65 L1907.28 1213.65 L1906.69 1213.65 L1906.11 1213.65 L1905.52 1213.65 L1904.93 1213.65 L1904.35 1213.65 L1903.76 1213.65 L1903.17 1213.65 L1902.59 1213.65 L1902 1213.65 L1901.42 1213.65 L1900.83 1213.65 L1900.24 1213.65 L1899.66 1213.65 L1899.07 1213.65 L1898.48 1213.65 L1897.9 1213.65 L1897.31 1213.65 L1896.72 1213.65 L1896.14 1213.65 L1895.55 1213.65 L1894.96 1213.65 L1894.38 1213.65 L1893.79 1213.65 L1893.21 1213.65 L1892.62 1213.65 L1892.03 1213.65 L1891.45 1213.65 L1890.86 1213.65 L1890.27 1213.65 L1889.69 1213.65 L1889.1 1213.65 L1888.51 1213.65 L1887.93 1213.65 L1887.34 1213.65 L1886.76 1213.65 L1886.17 1213.65 L1885.58 1213.65 L1885 1213.65 L1884.41 1213.65 L1883.82 1213.65 L1883.24 1213.65 L1882.65 1213.65 L1882.06 1213.65 L1881.48 1213.65 L1880.89 1213.65 L1880.3 1213.65 L1879.72 1213.65 L1879.13 1213.65 L1878.55 1213.65 L1877.96 1213.65 L1877.37 1213.65 L1876.79 1213.65 L1876.2 1213.65 L1875.61 1213.65 L1875.03 1213.65 L1874.44 1213.65 L1873.85 1213.65 L1873.27 1213.65 L1872.68 1213.65 L1872.09 1213.65 L1871.51 1213.65 L1870.92 1213.65 L1870.34 1213.65 L1869.75 1213.65 L1869.16 1213.65 L1868.58 1213.65 L1867.99 1213.65 L1867.4 1213.65 L1866.82 1213.65 L1866.23 1213.65 L1865.64 1213.65 L1865.06 1213.65 L1864.47 1213.65 L1863.88 1213.65 L1863.3 1213.65 L1862.71 1213.65 L1862.13 1213.65 L1861.54 1213.65 L1860.95 1213.65 L1860.37 1213.65 L1859.78 1213.65 L1859.19 1213.65 L1858.61 1213.65 L1858.02 1213.65 L1857.43 1213.65 L1856.85 1213.65 L1856.26 1213.65 L1855.68 1213.65 L1855.09 1213.65 L1854.5 1213.65 L1853.92 1213.65 L1853.33 1213.65 L1852.74 1213.65 L1852.16 1213.65 L1851.57 1213.65 L1850.98 1213.65 L1850.4 1213.65 L1849.81 1213.65 L1849.22 1213.65 L1848.64 1213.65 L1848.05 1213.65 L1847.47 1213.65 L1846.88 1213.65 L1846.29 1213.65 L1845.71 1213.65 L1845.12 1213.65 L1844.53 1213.65 L1843.95 1213.65 L1843.36 1213.65 L1842.77 1213.65 L1842.19 1213.65 L1841.6 1213.65 L1841.01 1213.65 L1840.43 1213.65 L1839.84 1213.65 L1839.26 1213.65 L1838.67 1213.65 L1838.08 1213.65 L1837.5 1213.65 L1836.91 1213.65 L1836.32 1213.65 L1835.74 1213.65 L1835.15 1213.65 L1834.56 1213.65 L1833.98 1213.65 L1833.39 1213.65 L1832.81 1213.65 L1832.22 1213.65 L1831.63 1213.65 L1831.05 1213.65 L1830.46 1213.65 L1829.87 1213.65 L1829.29 1213.65 L1828.7 1213.65 L1828.11 1213.65 L1827.53 1213.65 L1826.94 1213.65 L1826.35 1213.65 L1825.77 1213.65 L1825.18 1213.65 L1824.6 1213.65 L1824.01 1213.65 L1823.42 1213.65 L1822.84 1213.65 L1822.25 1213.65 L1821.66 1213.65 L1821.08 1213.65 L1820.49 1213.65 L1819.9 1213.65 L1819.32 1213.65 L1818.73 1213.65 L1818.14 1213.65 L1817.56 1213.65 L1816.97 1213.65 L1816.39 1213.65 L1815.8 1213.65 L1815.21 1213.65 L1814.63 1213.65 L1814.04 1213.65 L1813.45 1213.65 L1812.87 1213.65 L1812.28 1213.65 L1811.69 1213.65 L1811.11 1213.65 L1810.52 1213.65 L1809.94 1213.65 L1809.35 1213.65 L1808.76 1213.65 L1808.18 1213.65 L1807.59 1213.65 L1807 1213.65 L1806.42 1213.65 L1805.83 1213.65 L1805.24 1213.65 L1804.66 1213.65 L1804.07 1213.65 L1803.48 1213.65 L1802.9 1213.65 L1802.31 1213.65 L1801.73 1213.65 L1801.14 1213.65 L1800.55 1213.65 L1799.97 1213.65 L1799.38 1213.65 L1798.79 1213.65 L1798.21 1213.65 L1797.62 1213.65 L1797.03 1213.65 L1796.45 1213.65 L1795.86 1213.65 L1795.27 1213.65 L1794.69 1213.65 L1794.1 1213.65 L1793.52 1213.65 L1792.93 1213.65 L1792.34 1213.65 L1791.76 1213.65 L1791.17 1213.65 L1790.58 1213.65 L1790 1213.65 L1789.41 1213.65 L1788.82 1213.65 L1788.24 1213.65 L1787.65 1213.65 L1787.06 1213.65 L1786.48 1213.65 L1785.89 1213.65 L1785.31 1213.65 L1784.72 1213.65 L1784.13 1213.65 L1783.55 1213.65 L1782.96 1213.65 L1782.37 1213.65 L1781.79 1213.65 L1781.2 1213.65 L1780.61 1213.65 L1780.03 1213.65 L1779.44 1213.65 L1778.86 1213.65 L1778.27 1213.65 L1777.68 1213.65 L1777.1 1213.65 L1776.51 1213.65 L1775.92 1213.65 L1775.34 1213.65 L1774.75 1213.65 L1774.16 1213.65 L1773.58 1213.65 L1772.99 1213.65 L1772.4 1213.65 L1771.82 1213.65 L1771.23 1213.65 L1770.65 1213.65 L1770.06 1213.65 L1769.47 1213.65 L1768.89 1213.65 L1768.3 1213.65 L1767.71 1213.65 L1767.13 1213.65 L1766.54 1213.65 L1765.95 1213.65 L1765.37 1213.65 L1764.78 1213.65 L1764.19 1213.65 L1763.61 1213.65 L1763.02 1213.65 L1762.44 1213.65 L1761.85 1213.65 L1761.26 1213.65 L1760.68 1213.65 L1760.09 1213.65 L1759.5 1213.65 L1758.92 1213.65 L1758.33 1213.65 L1757.74 1213.65 L1757.16 1213.65 L1756.57 1213.65 L1755.99 1213.65 L1755.4 1213.65 L1754.81 1213.65 L1754.23 1213.65 L1753.64 1213.65 L1753.05 1213.65 L1752.47 1213.65 L1751.88 1213.65 L1751.29 1213.65 L1750.71 1213.65 L1750.12 1213.65 L1749.53 1213.65 L1748.95 1213.65 L1748.36 1213.65 L1747.78 1213.65 L1747.19 1213.65 L1746.6 1213.65 L1746.02 1213.65 L1745.43 1213.65 L1744.84 1213.65 L1744.26 1213.65 L1743.67 1213.65 L1743.08 1213.65 L1742.5 1213.65 L1741.91 1213.65 L1741.32 1213.65 L1740.74 1213.65 L1740.15 1213.65 L1739.57 1213.65 L1738.98 1213.65 L1738.39 1213.65 L1737.81 1213.65 L1737.22 1213.65 L1736.63 1213.65 L1736.05 1213.65 L1735.46 1213.65 L1734.87 1213.65 L1734.29 1213.65 L1733.7 1213.65 L1733.11 1213.65 L1732.53 1213.65 L1731.94 1213.65 L1731.36 1213.65 L1730.77 1213.65 L1730.18 1213.65 L1729.6 1213.65 L1729.01 1213.65 L1728.42 1213.65 L1727.84 1213.65 L1727.25 1213.65 L1726.66 1213.65 L1726.08 1213.65 L1725.49 1213.65 L1724.91 1213.65 L1724.32 1213.65 L1723.73 1213.65 L1723.15 1213.65 L1722.56 1213.65 L1721.97 1213.65 L1721.39 1213.65 L1720.8 1213.65 L1720.21 1213.65 L1719.63 1213.65 L1719.04 1213.65 L1718.45 1213.65 L1717.87 1213.65 L1717.28 1213.65 L1716.7 1213.65 L1716.11 1213.65 L1715.52 1213.65 L1714.94 1213.65 L1714.35 1213.65 L1713.76 1213.65 L1713.18 1213.65 L1712.59 1213.65 L1712 1213.65 L1711.42 1213.65 L1710.83 1213.65 L1710.24 1213.65 L1709.66 1213.65 L1709.07 1213.65 L1708.49 1213.65 L1707.9 1213.65 L1707.31 1213.65 L1706.73 1213.65 L1706.14 1213.65 L1705.55 1213.65 L1704.97 1213.65 L1704.38 1213.65 L1703.79 1213.65 L1703.21 1213.65 L1702.62 1213.65 L1702.04 1213.65 L1701.45 1213.65 L1700.86 1213.65 L1700.28 1213.65 L1699.69 1213.65 L1699.1 1213.65 L1698.52 1213.65 L1697.93 1213.65 L1697.34 1213.65 L1696.76 1213.65 L1696.17 1213.65 L1695.58 1213.65 L1695 1213.65 L1694.41 1213.65 L1693.83 1213.65 L1693.24 1213.65 L1692.65 1213.65 L1692.07 1213.65 L1691.48 1213.65 L1690.89 1213.65 L1690.31 1213.65 L1689.72 1213.65 L1689.13 1213.65 L1688.55 1213.65 L1687.96 1213.65 L1687.37 1213.65 L1686.79 1213.65 L1686.2 1213.65 L1685.62 1213.65 L1685.03 1213.65 L1684.44 1213.65 L1683.86 1213.65 L1683.27 1213.65 L1682.68 1213.65 L1682.1 1213.65 L1681.51 1213.65 L1680.92 1213.65 L1680.34 1213.65 L1679.75 1213.65 L1679.17 1213.65 L1678.58 1213.65 L1677.99 1213.65 L1677.41 1213.65 L1676.82 1213.65 L1676.23 1213.65 L1675.65 1213.65 L1675.06 1213.65 L1674.47 1213.65 L1673.89 1213.65 L1673.3 1213.65 L1672.71 1213.65 L1672.13 1213.65 L1671.54 1213.65 L1670.96 1213.65 L1670.37 1213.65 L1669.78 1213.65 L1669.2 1213.65 L1668.61 1213.65 L1668.02 1213.65 L1667.44 1213.65 L1666.85 1213.65 L1666.26 1213.65 L1665.68 1213.65 L1665.09 1213.65 L1664.5 1213.65 L1663.92 1213.65 L1663.33 1213.65 L1662.75 1213.65 L1662.16 1213.65 L1661.57 1213.65 L1660.99 1213.65 L1660.4 1213.65 L1659.81 1213.65 L1659.23 1213.65 L1658.64 1213.65 L1658.05 1213.65 L1657.47 1213.65 L1656.88 1213.65 L1656.29 1213.65 L1655.71 1213.65 L1655.12 1213.65 L1654.54 1213.65 L1653.95 1213.65 L1653.36 1213.65 L1652.78 1213.65 L1652.19 1213.65 L1651.6 1213.65 L1651.02 1213.65 L1650.43 1213.65 L1649.84 1213.65 L1649.26 1213.65 L1648.67 1213.65 L1648.09 1213.65 L1647.5 1213.65 L1646.91 1213.65 L1646.33 1213.65 L1645.74 1213.65 L1645.15 1213.65 L1644.57 1213.65 L1643.98 1213.65 L1643.39 1213.65 L1642.81 1213.65 L1642.22 1213.65 L1641.63 1213.65 L1641.05 1213.65 L1640.46 1213.65 L1639.88 1213.65 L1639.29 1213.65 L1638.7 1213.65 L1638.12 1213.65 L1637.53 1213.65 L1636.94 1213.65 L1636.36 1213.65 L1635.77 1213.65 L1635.18 1213.65 L1634.6 1213.65 L1634.01 1213.65 L1633.42 1213.65 L1632.84 1213.65 L1632.25 1213.65 L1631.67 1213.65 L1631.08 1213.65 L1630.49 1213.65 L1629.91 1213.65 L1629.32 1213.65 L1628.73 1213.65 L1628.15 1213.65 L1627.56 1213.65 L1626.97 1213.65 L1626.39 1213.65 L1625.8 1213.65 L1625.22 1213.65 L1624.63 1213.65 L1624.04 1213.65 L1623.46 1213.65 L1622.87 1213.65 L1622.28 1213.65 L1621.7 1213.65 L1621.11 1213.65 L1620.52 1213.65 L1619.94 1213.65 L1619.35 1213.65 L1618.76 1213.65 L1618.18 1213.65 L1617.59 1213.65 L1617.01 1213.65 L1616.42 1213.65 L1615.83 1213.65 L1615.25 1213.65 L1614.66 1213.65 L1614.07 1213.65 L1613.49 1213.65 L1612.9 1213.65 L1612.31 1213.65 L1611.73 1213.65 L1611.14 1213.65 L1610.55 1213.65 L1609.97 1213.65 L1609.38 1213.65 L1608.8 1213.65 L1608.21 1213.65 L1607.62 1213.65 L1607.04 1213.65 L1606.45 1213.65 L1605.86 1213.65 L1605.28 1213.65 L1604.69 1213.65 L1604.1 1213.65 L1603.52 1213.65 L1602.93 1213.65 L1602.34 1213.65 L1601.76 1213.65 L1601.17 1213.65 L1600.59 1213.65 L1600 1213.65 L1599.41 1213.65 L1598.83 1213.65 L1598.24 1213.65 L1597.65 1213.65 L1597.07 1213.65 L1596.48 1213.65 L1595.89 1213.65 L1595.31 1213.65 L1594.72 1213.65 L1594.14 1213.65 L1593.55 1213.65 L1592.96 1213.65 L1592.38 1213.65 L1591.79 1213.65 L1591.2 1213.65 L1590.62 1213.65 L1590.03 1213.65 L1589.44 1213.65 L1588.86 1213.65 L1588.27 1213.65 L1587.68 1213.65 L1587.1 1213.65 L1586.51 1213.65 L1585.93 1213.65 L1585.34 1213.65 L1584.75 1213.65 L1584.17 1213.65 L1583.58 1213.65 L1582.99 1213.65 L1582.41 1213.65 L1581.82 1213.65 L1581.23 1213.65 L1580.65 1213.65 L1580.06 1213.65 L1579.47 1213.65 L1578.89 1213.65 L1578.3 1213.65 L1577.72 1213.65 L1577.13 1213.65 L1576.54 1213.65 L1575.96 1213.65 L1575.37 1213.65 L1574.78 1213.65 L1574.2 1213.65 L1573.61 1213.65 L1573.02 1213.65 L1572.44 1213.65 L1571.85 1213.65 L1571.27 1213.65 L1570.68 1213.65 L1570.09 1213.65 L1569.51 1213.65 L1568.92 1213.65 L1568.33 1213.65 L1567.75 1213.65 L1567.16 1213.65 L1566.57 1213.65 L1565.99 1213.65 L1565.4 1213.65 L1564.81 1213.65 L1564.23 1213.65 L1563.64 1213.65 L1563.06 1213.65 L1562.47 1213.65 L1561.88 1213.65 L1561.3 1213.65 L1560.71 1213.65 L1560.12 1213.65 L1559.54 1213.65 L1558.95 1213.65 L1558.36 1213.65 L1557.78 1213.65 L1557.19 1213.65 L1556.6 1213.65 L1556.02 1213.65 L1555.43 1213.65 L1554.85 1213.65 L1554.26 1213.65 L1553.67 1213.65 L1553.09 1213.65 L1552.5 1213.65 L1551.91 1213.65 L1551.33 1213.65 L1550.74 1213.65 L1550.15 1213.65 L1549.57 1213.65 L1548.98 1213.65 L1548.4 1213.65 L1547.81 1213.65 L1547.22 1213.65 L1546.64 1213.65 L1546.05 1213.65 L1545.46 1213.65 L1544.88 1213.65 L1544.29 1213.65 L1543.7 1213.65 L1543.12 1213.65 L1542.53 1213.65 L1541.94 1213.65 L1541.36 1213.65 L1540.77 1213.65 L1540.19 1213.65 L1539.6 1213.65 L1539.01 1213.65 L1538.43 1213.65 L1537.84 1213.65 L1537.25 1213.65 L1536.67 1213.65 L1536.08 1213.65 L1535.49 1213.65 L1534.91 1213.65 L1534.32 1213.65 L1533.73 1213.65 L1533.15 1213.65 L1532.56 1213.65 L1531.98 1213.65 L1531.39 1213.65 L1530.8 1213.65 L1530.22 1213.65 L1529.63 1213.65 L1529.04 1213.65 L1528.46 1213.65 L1527.87 1213.65 L1527.28 1213.65 L1526.7 1213.65 L1526.11 1213.65 L1525.52 1213.65 L1524.94 1213.65 L1524.35 1213.65 L1523.77 1213.65 L1523.18 1213.65 L1522.59 1213.65 L1522.01 1213.65 L1521.42 1213.65 L1520.83 1213.65 L1520.25 1213.65 L1519.66 1213.65 L1519.07 1213.65 L1518.49 1213.65 L1517.9 1213.65 L1517.32 1213.65 L1516.73 1213.65 L1516.14 1213.65 L1515.56 1213.65 L1514.97 1213.65 L1514.38 1213.65 L1513.8 1213.65 L1513.21 1213.65 L1512.62 1213.65 L1512.04 1213.65 L1511.45 1213.65 L1510.86 1213.65 L1510.28 1213.65 L1509.69 1213.65 L1509.11 1213.65 L1508.52 1213.65 L1507.93 1213.65 L1507.35 1213.65 L1506.76 1213.65 L1506.17 1213.65 L1505.59 1213.65 L1505 1213.65 L1504.41 1213.65 L1503.83 1213.65 L1503.24 1213.65 L1502.65 1213.65 L1502.07 1213.65 L1501.48 1213.65 L1500.9 1213.65 L1500.31 1213.65 L1499.72 1213.65 L1499.14 1213.65 L1498.55 1213.65 L1497.96 1213.65 L1497.38 1213.65 L1496.79 1213.65 L1496.2 1213.65 L1495.62 1213.65 L1495.03 1213.65 L1494.45 1213.65 L1493.86 1213.65 L1493.27 1213.65 L1492.69 1213.65 L1492.1 1213.65 L1491.51 1213.65 L1490.93 1213.65 L1490.34 1213.65 L1489.75 1213.65 L1489.17 1213.65 L1488.58 1213.65 L1487.99 1213.65 L1487.41 1213.65 L1486.82 1213.65 L1486.24 1213.65 L1485.65 1213.65 L1485.06 1213.65 L1484.48 1213.65 L1483.89 1213.65 L1483.3 1213.65 L1482.72 1213.65 L1482.13 1213.65 L1481.54 1213.65 L1480.96 1213.65 L1480.37 1213.65 L1479.78 1213.65 L1479.2 1213.65 L1478.61 1213.65 L1478.03 1213.65 L1477.44 1213.65 L1476.85 1213.65 L1476.27 1213.65 L1475.68 1213.65 L1475.09 1213.65 L1474.51 1213.65 L1473.92 1213.65 L1473.33 1213.65 L1472.75 1213.65 L1472.16 1213.65 L1471.57 1213.65 L1470.99 1213.65 L1470.4 1213.65 L1469.82 1213.65 L1469.23 1213.65 L1468.64 1213.65 L1468.06 1213.65 L1467.47 1213.65 L1466.88 1213.65 L1466.3 1213.65 L1465.71 1213.65 L1465.12 1213.65 L1464.54 1213.65 L1463.95 1213.65 L1463.37 1213.65 L1462.78 1213.65 L1462.19 1213.65 L1461.61 1213.65 L1461.02 1213.65 L1460.43 1213.65 L1459.85 1213.65 L1459.26 1213.65 L1458.67 1213.65 L1458.09 1213.65 L1457.5 1213.65 L1456.91 1213.65 L1456.33 1213.65 L1455.74 1213.65 L1455.16 1213.65 L1454.57 1213.65 L1453.98 1213.65 L1453.4 1213.65 L1452.81 1213.65 L1452.22 1213.65 L1451.64 1213.65 L1451.05 1213.65 L1450.46 1213.65 L1449.88 1213.65 L1449.29 1213.65 L1448.7 1213.65 L1448.12 1213.65 L1447.53 1213.65 L1446.95 1213.65 L1446.36 1213.65 L1445.77 1213.65 L1445.19 1213.65 L1444.6 1213.65 L1444.01 1213.65 L1443.43 1213.65 L1442.84 1213.65 L1442.25 1213.65 L1441.67 1213.65 L1441.08 1213.65 L1440.5 1213.65 L1439.91 1213.65 L1439.32 1213.65 L1438.74 1213.65 L1438.15 1213.65 L1437.56 1213.65 L1436.98 1213.65 L1436.39 1213.65 L1435.8 1213.65 L1435.22 1213.65 L1434.63 1213.65 L1434.04 1213.65 L1433.46 1213.65 L1432.87 1213.65 L1432.29 1213.65 L1431.7 1213.65 L1431.11 1213.65 L1430.53 1213.65 L1429.94 1213.65 L1429.35 1213.65 L1428.77 1213.65 L1428.18 1213.65 L1427.59 1213.65 L1427.01 1213.65 L1426.42 1213.65 L1425.83 1213.65 L1425.25 1213.65 L1424.66 1213.65 L1424.08 1213.65 L1423.49 1213.65 L1422.9 1213.65 L1422.32 1213.65 L1421.73 1213.65 L1421.14 1213.65 L1420.56 1213.65 L1419.97 1213.65 L1419.38 1213.65 L1418.8 1213.65 L1418.21 1213.65 L1417.63 1213.65 L1417.04 1213.65 L1416.45 1213.65 L1415.87 1213.65 L1415.28 1213.65 L1414.69 1213.65 L1414.11 1213.65 L1413.52 1213.65 L1412.93 1213.65 L1412.35 1213.65 L1411.76 1213.65 L1411.17 1213.65 L1410.59 1213.65 L1410 1213.65 L1409.42 1213.65 L1408.83 1213.65 L1408.24 1213.65 L1407.66 1213.65 L1407.07 1213.65 L1406.48 1213.65 L1405.9 1213.65 L1405.31 1213.65 L1404.72 1213.65 L1404.14 1213.65 L1403.55 1213.65 L1402.96 1213.65 L1402.38 1213.65 L1401.79 1213.65 L1401.21 1213.65 L1400.62 1213.65 L1400.03 1213.65 L1399.45 1213.65 L1398.86 1213.65 L1398.27 1213.65 L1397.69 1213.65 L1397.1 1213.65 L1396.51 1213.65 L1395.93 1213.65 L1395.34 1213.65 L1394.75 1213.65 L1394.17 1213.65 L1393.58 1213.65 L1393 1213.65 L1392.41 1213.65 L1391.82 1213.65 L1391.24 1213.65 L1390.65 1213.65 L1390.06 1213.65 L1389.48 1213.65 L1388.89 1213.65 L1388.3 1213.65 L1387.72 1213.65 L1387.13 1213.65 L1386.55 1213.65 L1385.96 1213.65 L1385.37 1213.65 L1384.79 1213.65 L1384.2 1213.65 L1383.61 1213.65 L1383.03 1213.65 L1382.44 1213.65 L1381.85 1213.65 L1381.27 1213.65 L1380.68 1213.65 L1380.09 1213.65 L1379.51 1213.65 L1378.92 1213.65 L1378.34 1213.65 L1377.75 1213.65 L1377.16 1213.65 L1376.58 1213.65 L1375.99 1213.65 L1375.4 1213.65 L1374.82 1213.65 L1374.23 1213.65 L1373.64 1213.65 L1373.06 1213.65 L1372.47 1213.65 L1371.88 1213.65 L1371.3 1213.65 L1370.71 1213.65 L1370.13 1213.65 L1369.54 1213.65 L1368.95 1213.65 L1368.37 1213.65 L1367.78 1213.65 L1367.19 1213.65 L1366.61 1213.65 L1366.02 1213.65 L1365.43 1213.65 L1364.85 1213.65 L1364.26 1213.65 L1363.68 1213.65 L1363.09 1213.65 L1362.5 1213.65 L1361.92 1213.65 L1361.33 1213.65 L1360.74 1213.65 L1360.16 1213.65 L1359.57 1213.65 L1358.98 1213.65 L1358.4 1213.65 L1357.81 1213.65 L1357.22 1213.65 L1356.64 1213.65 L1356.05 1213.65 L1355.47 1213.65 L1354.88 1213.65 L1354.29 1213.65 L1353.71 1213.65 L1353.12 1213.65 L1352.53 1213.65 L1351.95 1213.65 L1351.36 1213.65 L1350.77 1213.65 L1350.19 1213.65 L1349.6 1213.65 L1349.01 1213.65 L1348.43 1213.65 L1347.84 1213.65 L1347.26 1213.65 L1346.67 1213.65 L1346.08 1213.65 L1345.5 1213.65 L1344.91 1213.65 L1344.32 1213.65 L1343.74 1213.65 L1343.15 1213.65 L1342.56 1213.65 L1341.98 1213.65 L1341.39 1213.65 L1340.8 1213.65 L1340.22 1213.65 L1339.63 1213.65 L1339.05 1213.65 L1338.46 1213.65 L1337.87 1213.65 L1337.29 1213.65 L1336.7 1213.65 L1336.11 1213.65 L1335.53 1213.65 L1334.94 1213.65 L1334.35 1213.65 L1333.77 1213.65 L1333.18 1213.65 L1332.6 1213.65 L1332.01 1213.65 L1331.42 1213.65 L1330.84 1213.65 L1330.25 1213.65 L1329.66 1213.65 L1329.08 1213.65 L1328.49 1213.65 L1327.9 1213.65 L1327.32 1213.65 L1326.73 1213.65 L1326.14 1213.65 L1325.56 1213.65 L1324.97 1213.65 L1324.39 1213.65 L1323.8 1213.65 L1323.21 1213.65 L1322.63 1213.65 L1322.04 1213.65 L1321.45 1213.65 L1320.87 1213.65 L1320.28 1213.65 L1319.69 1213.65 L1319.11 1213.65 L1318.52 1213.65 L1317.93 1213.65 L1317.35 1213.65 L1316.76 1213.65 L1316.18 1213.65 L1315.59 1213.65 L1315 1213.65 L1314.42 1213.65 L1313.83 1213.65 L1313.24 1213.65 L1312.66 1213.65 L1312.07 1213.65 L1311.48 1213.65 L1310.9 1213.65 L1310.31 1213.65 L1309.73 1213.65 L1309.14 1213.65 L1308.55 1213.65 L1307.97 1213.65 L1307.38 1213.65 L1306.79 1213.65 L1306.21 1213.65 L1305.62 1213.65 L1305.03 1213.65 L1304.45 1213.65 L1303.86 1213.65 L1303.27 1213.65 L1302.69 1213.65 L1302.1 1213.65 L1301.52 1213.65 L1300.93 1213.65 L1300.34 1213.65 L1299.76 1213.65 L1299.17 1213.65 L1298.58 1213.65 L1298 1213.65 L1297.41 1213.65 L1296.82 1213.65 L1296.24 1213.65 L1295.65 1213.65 L1295.06 1213.65 L1294.48 1213.65 L1293.89 1213.65 L1293.31 1213.65 L1292.72 1213.65 L1292.13 1213.65 L1291.55 1213.65 L1290.96 1213.65 L1290.37 1213.65 L1289.79 1213.65 L1289.2 1213.65 L1288.61 1213.65 L1288.03 1213.65 L1287.44 1213.65 L1286.86 1213.65 L1286.27 1213.65 L1285.68 1213.65 L1285.1 1213.65 L1284.51 1213.65 L1283.92 1213.65 L1283.34 1213.65 L1282.75 1213.65 L1282.16 1213.65 L1281.58 1213.65 L1280.99 1213.65 L1280.4 1213.65 L1279.82 1213.65 L1279.23 1213.65 L1278.65 1213.65 L1278.06 1213.65 L1277.47 1213.65 L1276.89 1213.65 L1276.3 1213.65 L1275.71 1213.65 L1275.13 1213.65 L1274.54 1213.65 L1273.95 1213.65 L1273.37 1213.65 L1272.78 1213.65 L1272.19 1213.65 L1271.61 1213.65 L1271.02 1213.65 L1270.44 1213.65 L1269.85 1213.65 L1269.26 1213.65 L1268.68 1213.65 L1268.09 1213.65 L1267.5 1213.65 L1266.92 1213.65 L1266.33 1213.65 L1265.74 1213.65 L1265.16 1213.65 L1264.57 1213.65 L1263.98 1213.65 L1263.4 1213.65 L1262.81 1213.65 L1262.23 1213.65 L1261.64 1213.65 L1261.05 1213.65 L1260.47 1213.65 L1259.88 1213.65 L1259.29 1213.65 L1258.71 1213.65 L1258.12 1213.65 L1257.53 1213.65 L1256.95 1213.65 L1256.36 1213.65 L1255.78 1213.65 L1255.19 1213.65 L1254.6 1213.65 L1254.02 1213.65 L1253.43 1213.65 L1252.84 1213.65 L1252.26 1213.65 L1251.67 1213.65 L1251.08 1213.65 L1250.5 1213.65 L1249.91 1213.65 L1249.32 1213.65 L1248.74 1213.65 L1248.15 1213.65 L1247.57 1213.65 L1246.98 1213.65 L1246.39 1213.65 L1245.81 1213.65 L1245.22 1213.65 L1244.63 1213.65 L1244.05 1213.65 L1243.46 1213.65 L1242.87 1213.65 L1242.29 1213.65 L1241.7 1213.65 L1241.11 1213.65 L1240.53 1213.65 L1239.94 1213.65 L1239.36 1213.65 L1238.77 1213.65 L1238.18 1213.65 L1237.6 1213.65 L1237.01 1213.65 L1236.42 1213.65 L1235.84 1213.65 L1235.25 1213.65 L1234.66 1213.65 L1234.08 1213.65 L1233.49 1213.65 L1232.91 1213.65 L1232.32 1213.65 L1231.73 1213.65 L1231.15 1213.65 L1230.56 1213.65 L1229.97 1213.65 L1229.39 1213.65 L1228.8 1213.65 L1228.21 1213.65 L1227.63 1213.65 L1227.04 1213.65 L1226.45 1213.65 L1225.87 1213.65 L1225.28 1213.65 L1224.7 1213.65 L1224.11 1213.65 L1223.52 1213.65 L1222.94 1213.65 L1222.35 1213.65 L1221.76 1213.65 L1221.18 1213.65 L1220.59 1213.65 L1220 1213.65 L1219.42 1213.65 L1218.83 1213.65 L1218.24 1213.65 L1217.66 1213.65 L1217.07 1213.65 L1216.49 1213.65 L1215.9 1213.65 L1215.31 1213.65 L1214.73 1213.65 L1214.14 1213.65 L1213.55 1213.65 L1212.97 1213.65 L1212.38 1213.65 L1211.79 1213.65 L1211.21 1213.65 L1210.62 1213.65 L1210.03 1213.65 L1209.45 1213.65 L1208.86 1213.65 L1208.28 1213.65 L1207.69 1213.65 L1207.1 1213.65 L1206.52 1213.65 L1205.93 1213.65 L1205.34 1213.65 L1204.76 1213.65 L1204.17 1213.65 L1203.58 1213.65 L1203 1213.65 L1202.41 1213.65 L1201.83 1213.65 L1201.24 1213.65 L1200.65 1213.65 L1200.07 1213.65 L1199.48 1213.65 L1198.89 1213.65 L1198.31 1213.65 L1197.72 1213.65 L1197.13 1213.65 L1196.55 1213.65 L1195.96 1213.65 L1195.37 1213.65 L1194.79 1213.65 L1194.2 1213.65 L1193.62 1213.65 L1193.03 1213.65 L1192.44 1213.65 L1191.86 1213.65 L1191.27 1213.65 L1190.68 1213.65 L1190.1 1213.65 L1189.51 1213.65 L1188.92 1213.65 L1188.34 1213.65 L1187.75 1213.65 L1187.16 1213.65 L1186.58 1213.65 L1185.99 1213.65 L1185.41 1213.65 L1184.82 1213.65 L1184.23 1213.65 L1183.65 1213.65 L1183.06 1213.65 L1182.47 1213.65 L1181.89 1213.65 L1181.3 1213.65 L1180.71 1213.65 L1180.13 1213.65 L1179.54 1213.65 L1178.96 1213.65 L1178.37 1213.65 L1177.78 1213.65 L1177.2 1213.65 L1176.61 1213.65 L1176.02 1213.65 L1175.44 1213.65 L1174.85 1213.65 L1174.26 1213.65 L1173.68 1213.65 L1173.09 1213.65 L1172.5 1213.65 L1171.92 1213.65 L1171.33 1213.65 L1170.75 1213.65 L1170.16 1213.65 L1169.57 1213.65 L1168.99 1213.65 L1168.4 1213.65 L1167.81 1213.65 L1167.23 1213.65 L1166.64 1213.65 L1166.05 1213.65 L1165.47 1213.65 L1164.88 1213.65 L1164.29 1213.65 L1163.71 1213.65 L1163.12 1213.65 L1162.54 1213.65 L1161.95 1213.65 L1161.36 1213.65 L1160.78 1213.65 L1160.19 1213.65 L1159.6 1213.65 L1159.02 1213.65 L1158.43 1213.65 L1157.84 1213.65 L1157.26 1213.65 L1156.67 1213.65 L1156.09 1213.65 L1155.5 1213.65 L1154.91 1213.65 L1154.33 1213.65 L1153.74 1213.65 L1153.15 1213.65 L1152.57 1213.65 L1151.98 1213.65 L1151.39 1213.65 L1150.81 1213.65 L1150.22 1213.65 L1149.63 1213.65 L1149.05 1213.65 L1148.46 1213.65 L1147.88 1213.65 L1147.29 1213.65 L1146.7 1213.65 L1146.12 1213.65 L1145.53 1213.65 L1144.94 1213.65 L1144.36 1213.65 L1143.77 1213.65 L1143.18 1213.65 L1142.6 1213.65 L1142.01 1213.65 L1141.42 1213.65 L1140.84 1213.65 L1140.25 1213.65 L1139.67 1213.65 L1139.08 1213.65 L1138.49 1213.65 L1137.91 1213.65 L1137.32 1213.65 L1136.73 1213.65 L1136.15 1213.65 L1135.56 1213.65 L1134.97 1213.65 L1134.39 1213.65 L1133.8 1213.65 L1133.21 1213.65 L1132.63 1213.65 L1132.04 1213.65 L1131.46 1213.65 L1130.87 1213.65 L1130.28 1213.65 L1129.7 1213.65 L1129.11 1213.65 L1128.52 1213.65 L1127.94 1213.65 L1127.35 1213.65 L1126.76 1213.65 L1126.18 1213.65 L1125.59 1213.65 L1125.01 1213.65 L1124.42 1213.65 L1123.83 1213.65 L1123.25 1213.65 L1122.66 1213.65 L1122.07 1213.65 L1121.49 1213.65 L1120.9 1213.65 L1120.31 1213.65 L1119.73 1213.65 L1119.14 1213.65 L1118.55 1213.65 L1117.97 1213.65 L1117.38 1213.65 L1116.8 1213.65 L1116.21 1213.65 L1115.62 1213.65 L1115.04 1213.65 L1114.45 1213.65 L1113.86 1213.65 L1113.28 1213.65 L1112.69 1213.65 L1112.1 1213.65 L1111.52 1213.65 L1110.93 1213.65 L1110.34 1213.65 L1109.76 1213.65 L1109.17 1213.65 L1108.59 1213.65 L1108 1213.65 L1107.41 1213.65 L1106.83 1213.65 L1106.24 1213.65 L1105.65 1213.65 L1105.07 1213.65 L1104.48 1213.65 L1103.89 1213.65 L1103.31 1213.65 L1102.72 1213.65 L1102.14 1213.65 L1101.55 1213.65 L1100.96 1213.65 L1100.38 1213.65 L1099.79 1213.65 L1099.2 1213.65 L1098.62 1213.65 L1098.03 1213.65 L1097.44 1213.65 L1096.86 1213.65 L1096.27 1213.65 L1095.68 1213.65 L1095.1 1213.65 L1094.51 1213.65 L1093.93 1213.65 L1093.34 1213.65 L1092.75 1213.65 L1092.17 1213.65 L1091.58 1213.65 L1090.99 1213.65 L1090.41 1213.65 L1089.82 1213.65 L1089.23 1213.65 L1088.65 1213.65 L1088.06 1213.65 L1087.47 1213.65 L1086.89 1213.65 L1086.3 1213.65 L1085.72 1213.65 L1085.13 1213.65 L1084.54 1213.65 L1083.96 1213.65 L1083.37 1213.65 L1082.78 1213.65 L1082.2 1213.65 L1081.61 1213.65 L1081.02 1213.65 L1080.44 1213.65 L1079.85 1213.65 L1079.26 1213.65 L1078.68 1213.65 L1078.09 1213.65 L1077.51 1213.65 L1076.92 1213.65 L1076.33 1213.65 L1075.75 1213.65 L1075.16 1213.65 L1074.57 1213.65 L1073.99 1213.65 L1073.4 1213.65 L1072.81 1213.65 L1072.23 1213.65 L1071.64 1213.65 L1071.06 1213.65 L1070.47 1213.65 L1069.88 1213.65 L1069.3 1213.65 L1068.71 1213.65 L1068.12 1213.65 L1067.54 1213.65 L1066.95 1213.65 L1066.36 1213.65 L1065.78 1213.65 L1065.19 1213.65 L1064.6 1213.65 L1064.02 1213.65 L1063.43 1213.65 L1062.85 1213.65 L1062.26 1213.65 L1061.67 1213.65 L1061.09 1213.65 L1060.5 1213.65 L1059.91 1213.65 L1059.33 1213.65 L1058.74 1213.65 L1058.15 1213.65 L1057.57 1213.65 L1056.98 1213.65 L1056.39 1213.65 L1055.81 1213.65 L1055.22 1213.65 L1054.64 1213.65 L1054.05 1213.65 L1053.46 1213.65 L1052.88 1213.65 L1052.29 1213.65 L1051.7 1213.65 L1051.12 1213.65 L1050.53 1213.65 L1049.94 1213.65 L1049.36 1213.65 L1048.77 1213.65 L1048.19 1213.65 L1047.6 1213.65 L1047.01 1213.65 L1046.43 1213.65 L1045.84 1213.65 L1045.25 1213.65 L1044.67 1213.65 L1044.08 1213.65 L1043.49 1213.65 L1042.91 1213.65 L1042.32 1213.65 L1041.73 1213.65 L1041.15 1213.65 L1040.56 1213.65 L1039.98 1213.65 L1039.39 1213.65 L1038.8 1213.65 L1038.22 1213.65 L1037.63 1213.65 L1037.04 1213.65 L1036.46 1213.65 L1035.87 1213.65 L1035.28 1213.65 L1034.7 1213.65 L1034.11 1213.65 L1033.52 1213.65 L1032.94 1213.65 L1032.35 1213.65 L1031.77 1213.65 L1031.18 1213.65 L1030.59 1213.65 L1030.01 1213.65 L1029.42 1213.65 L1028.83 1213.65 L1028.25 1213.65 L1027.66 1213.65 L1027.07 1213.65 L1026.49 1213.65 L1025.9 1213.65 L1025.32 1213.65 L1024.73 1213.65 L1024.14 1213.65 L1023.56 1213.65 L1022.97 1213.65 L1022.38 1213.65 L1021.8 1213.65 L1021.21 1213.65 L1020.62 1213.65 L1020.04 1213.65 L1019.45 1213.65 L1018.86 1213.65 L1018.28 1213.65 L1017.69 1213.65 L1017.11 1213.65 L1016.52 1213.65 L1015.93 1213.65 L1015.35 1213.65 L1014.76 1213.65 L1014.17 1213.65 L1013.59 1213.65 L1013 1213.65 L1012.41 1213.65 L1011.83 1213.65 L1011.24 1213.65 L1010.65 1213.65 L1010.07 1213.65 L1009.48 1213.65 L1008.9 1213.65 L1008.31 1213.65 L1007.72 1213.65 L1007.14 1213.65 L1006.55 1213.65 L1005.96 1213.65 L1005.38 1213.65 L1004.79 1213.65 L1004.2 1213.65 L1003.62 1213.65 L1003.03 1213.65 L1002.44 1213.65 L1001.86 1213.65 L1001.27 1213.65 L1000.69 1213.65 L1000.1 1213.65 L999.513 1213.65 L998.926 1213.65 L998.34 1213.65 L997.754 1213.65 L997.167 1213.65 L996.581 1213.65 L995.994 1213.65 L995.408 1213.65 L994.822 1213.65 L994.235 1213.65 L993.649 1213.65 L993.062 1213.65 L992.476 1213.65 L991.889 1213.65 L991.303 1213.65 L990.717 1213.65 L990.13 1213.65 L989.544 1213.65 L988.957 1213.65 L988.371 1213.65 L987.785 1213.65 L987.198 1213.65 L986.612 1213.65 L986.025 1213.65  Z\" fill=\"#e26f46\" fill-rule=\"evenodd\" fill-opacity=\"0.5\"/>\n<polyline clip-path=\"url(#clip022)\" style=\"stroke:#e26f46; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"986.025,1214 986.612,1214 987.198,1214 987.785,1214 988.371,1214 988.957,1214 989.544,1214 990.13,1214 990.717,1214 991.303,1214 991.889,1214 992.476,1214 993.062,1214 993.649,1214 994.235,1214 994.822,1214 995.408,1214 995.994,1214 996.581,1214 997.167,1214 997.754,1214 998.34,1214 998.926,1214 999.513,1214 1000.1,1214 1000.69,1214 1001.27,1214 1001.86,1214 1002.44,1214 1003.03,1214 1003.62,1214 1004.2,1214 1004.79,1214 1005.38,1214 1005.96,1214 1006.55,1214 1007.14,1214 1007.72,1214 1008.31,1214 1008.9,1214 1009.48,1214 1010.07,1214 1010.65,1214 1011.24,1214 1011.83,1214 1012.41,1214 1013,1214 1013.59,1214 1014.17,1214 1014.76,1214 1015.35,1214 1015.93,1214 1016.52,1214 1017.11,1214 1017.69,1214 1018.28,1214 1018.86,1214 1019.45,1214 1020.04,1214 1020.62,1214 1021.21,1214 1021.8,1214 1022.38,1214 1022.97,1214 1023.56,1214 1024.14,1214 1024.73,1214 1025.32,1214 1025.9,1214 1026.49,1214 1027.07,1214 1027.66,1214 1028.25,1214 1028.83,1214 1029.42,1214 1030.01,1214 1030.59,1214 1031.18,1214 1031.77,1214 1032.35,1214 1032.94,1214 1033.52,1214 1034.11,1214 1034.7,1214 1035.28,1214 1035.87,1214 1036.46,1214 1037.04,1214 1037.63,1214 1038.22,1214 1038.8,1214 1039.39,1214 1039.98,1214 1040.56,1214 1041.15,1214 1041.73,1214 1042.32,1214 1042.91,1214 1043.49,1214 1044.08,1214 1044.67,1214 1045.25,1214 1045.84,1214 1046.43,1214 1047.01,1214 1047.6,1214 1048.19,1214 1048.77,1214 1049.36,1214 1049.94,1214 1050.53,1214 1051.12,1214 1051.7,1214 1052.29,1214 1052.88,1214 1053.46,1214 1054.05,1214 1054.64,1214 1055.22,1214 1055.81,1214 1056.39,1214 1056.98,1214 1057.57,1214 1058.15,1214 1058.74,1214 1059.33,1214 1059.91,1214 1060.5,1214 1061.09,1214 1061.67,1214 1062.26,1214 1062.85,1214 1063.43,1214 1064.02,1214 1064.6,1214 1065.19,1214 1065.78,1214 1066.36,1214 1066.95,1214 1067.54,1214 1068.12,1214 1068.71,1214 1069.3,1214 1069.88,1214 1070.47,1214 1071.06,1214 1071.64,1214 1072.23,1214 1072.81,1214 1073.4,1214 1073.99,1214 1074.57,1214 1075.16,1214 1075.75,1214 1076.33,1214 1076.92,1214 1077.51,1214 1078.09,1214 1078.68,1214 1079.26,1214 1079.85,1214 1080.44,1214 1081.02,1214 1081.61,1214 1082.2,1214 1082.78,1214 1083.37,1214 1083.96,1214 1084.54,1214 1085.13,1214 1085.72,1214 1086.3,1214 1086.89,1214 1087.47,1214 1088.06,1214 1088.65,1214 1089.23,1214 1089.82,1214 1090.41,1214 1090.99,1214 1091.58,1214 1092.17,1214 1092.75,1214 1093.34,1214 1093.93,1214 1094.51,1214 1095.1,1214 1095.68,1214 1096.27,1214 1096.86,1214 1097.44,1214 1098.03,1214 1098.62,1214 1099.2,1214 1099.79,1214 1100.38,1214 1100.96,1214 1101.55,1214 1102.14,1214 1102.72,1214 1103.31,1214 1103.89,1214 1104.48,1214 1105.07,1214 1105.65,1214 1106.24,1214 1106.83,1214 1107.41,1214 1108,1214 1108.59,1214 1109.17,1214 1109.76,1214 1110.34,1214 1110.93,1214 1111.52,1214 1112.1,1214 1112.69,1214 1113.28,1214 1113.86,1214 1114.45,1214 1115.04,1214 1115.62,1214 1116.21,1214 1116.8,1214 1117.38,1214 1117.97,1214 1118.55,1214 1119.14,1214 1119.73,1214 1120.31,1214 1120.9,1214 1121.49,1214 1122.07,1214 1122.66,1214 1123.25,1214 1123.83,1214 1124.42,1214 1125.01,1214 1125.59,1214 1126.18,1214 1126.76,1214 1127.35,1214 1127.94,1214 1128.52,1214 1129.11,1214 1129.7,1214 1130.28,1214 1130.87,1214 1131.46,1214 1132.04,1214 1132.63,1214 1133.21,1214 1133.8,1214 1134.39,1214 1134.97,1214 1135.56,1214 1136.15,1214 1136.73,1214 1137.32,1214 1137.91,1214 1138.49,1214 1139.08,1214 1139.67,1214 1140.25,1214 1140.84,1214 1141.42,1214 1142.01,1214 1142.6,1214 1143.18,1214 1143.77,1214 1144.36,1214 1144.94,1214 1145.53,1214 1146.12,1214 1146.7,1214 1147.29,1214 1147.88,1214 1148.46,1214 1149.05,1214 1149.63,1214 1150.22,1214 1150.81,1214 1151.39,1214 1151.98,1214 1152.57,1214 1153.15,1214 1153.74,1214 1154.33,1214 1154.91,1214 1155.5,1214 1156.09,1214 1156.67,1214 1157.26,1214 1157.84,1214 1158.43,1214 1159.02,1214 1159.6,1214 1160.19,1214 1160.78,1214 1161.36,1214 1161.95,1214 1162.54,1214 1163.12,1214 1163.71,1214 1164.29,1214 1164.88,1214 1165.47,1214 1166.05,1214 1166.64,1214 1167.23,1214 1167.81,1214 1168.4,1214 1168.99,1214 1169.57,1214 1170.16,1214 1170.75,1214 1171.33,1214 1171.92,1214 1172.5,1214 1173.09,1214 1173.68,1214 1174.26,1214 1174.85,1214 1175.44,1214 1176.02,1214 1176.61,1214 1177.2,1214 1177.78,1214 1178.37,1214 1178.96,1214 1179.54,1214 1180.13,1214 1180.71,1214 1181.3,1214 1181.89,1214 1182.47,1214 1183.06,1214 1183.65,1214 1184.23,1214 1184.82,1214 1185.41,1214 1185.99,1214 1186.58,1214 1187.16,1214 1187.75,1214 1188.34,1214 1188.92,1214 1189.51,1214 1190.1,1214 1190.68,1214 1191.27,1214 1191.86,1214 1192.44,1214 1193.03,1214 1193.62,1214 1194.2,1214 1194.79,1214 1195.37,1214 1195.96,1214 1196.55,1214 1197.13,1214 1197.72,1214 1198.31,1214 1198.89,1214 1199.48,1214 1200.07,1214 1200.65,1214 1201.24,1214 1201.83,1214 1202.41,1214 1203,1214 1203.58,1214 1204.17,1214 1204.76,1214 1205.34,1214 1205.93,1214 1206.52,1214 1207.1,1214 1207.69,1214 1208.28,1214 1208.86,1214 1209.45,1214 1210.03,1214 1210.62,1214 1211.21,1214 1211.79,1214 1212.38,1214 1212.97,1214 1213.55,1214 1214.14,1214 1214.73,1214 1215.31,1214 1215.9,1214 1216.49,1214 1217.07,1214 1217.66,1214 1218.24,1214 1218.83,1214 1219.42,1214 1220,1214 1220.59,1214 1221.18,1214 1221.76,1214 1222.35,1214 1222.94,1214 1223.52,1214 1224.11,1214 1224.7,1214 1225.28,1214 1225.87,1214 1226.45,1214 1227.04,1214 1227.63,1214 1228.21,1214 1228.8,1214 1229.39,1214 1229.97,1214 1230.56,1214 1231.15,1214 1231.73,1214 1232.32,1214 1232.91,1214 1233.49,1214 1234.08,1214 1234.66,1214 1235.25,1214 1235.84,1214 1236.42,1214 1237.01,1214 1237.6,1214 1238.18,1214 1238.77,1214 1239.36,1214 1239.94,1214 1240.53,1214 1241.11,1214 1241.7,1214 1242.29,1214 1242.87,1214 1243.46,1214 1244.05,1214 1244.63,1214 1245.22,1214 1245.81,1214 1246.39,1214 1246.98,1214 1247.57,1214 1248.15,1214 1248.74,1214 1249.32,1214 1249.91,1214 1250.5,1214 1251.08,1214 1251.67,1214 1252.26,1214 1252.84,1214 1253.43,1214 1254.02,1214 1254.6,1214 1255.19,1214 1255.78,1214 1256.36,1214 1256.95,1214 1257.53,1214 1258.12,1214 1258.71,1214 1259.29,1214 1259.88,1214 1260.47,1214 1261.05,1214 1261.64,1214 1262.23,1214 1262.81,1214 1263.4,1214 1263.98,1214 1264.57,1214 1265.16,1214 1265.74,1214 1266.33,1214 1266.92,1214 1267.5,1214 1268.09,1214 1268.68,1214 1269.26,1214 1269.85,1214 1270.44,1214 1271.02,1214 1271.61,1214 1272.19,1214 1272.78,1214 1273.37,1214 1273.95,1214 1274.54,1214 1275.13,1214 1275.71,1214 1276.3,1214 1276.89,1214 1277.47,1214 1278.06,1214 1278.65,1214 1279.23,1214 1279.82,1214 1280.4,1214 1280.99,1214 1281.58,1214 1282.16,1214 1282.75,1214 1283.34,1214 1283.92,1214 1284.51,1214 1285.1,1214 1285.68,1214 1286.27,1214 1286.86,1214 1287.44,1214 1288.03,1214 1288.61,1214 1289.2,1214 1289.79,1214 1290.37,1214 1290.96,1214 1291.55,1214 1292.13,1214 1292.72,1214 1293.31,1214 1293.89,1214 1294.48,1214 1295.06,1214 1295.65,1214 1296.24,1214 1296.82,1214 1297.41,1214 1298,1214 1298.58,1214 1299.17,1214 1299.76,1214 1300.34,1214 1300.93,1214 1301.52,1214 1302.1,1214 1302.69,1214 1303.27,1214 1303.86,1214 1304.45,1214 1305.03,1214 1305.62,1214 1306.21,1214 1306.79,1214 1307.38,1214 1307.97,1214 1308.55,1214 1309.14,1214 1309.73,1214 1310.31,1214 1310.9,1214 1311.48,1214 1312.07,1214 1312.66,1214 1313.24,1214 1313.83,1214 1314.42,1214 1315,1214 1315.59,1214 1316.18,1214 1316.76,1214 1317.35,1214 1317.93,1214 1318.52,1214 1319.11,1214 1319.69,1214 1320.28,1214 1320.87,1214 1321.45,1214 1322.04,1214 1322.63,1214 1323.21,1214 1323.8,1214 1324.39,1214 1324.97,1214 1325.56,1214 1326.14,1214 1326.73,1214 1327.32,1214 1327.9,1214 1328.49,1214 1329.08,1214 1329.66,1214 1330.25,1214 1330.84,1214 1331.42,1214 1332.01,1214 1332.6,1214 1333.18,1214 1333.77,1214 1334.35,1214 1334.94,1214 1335.53,1214 1336.11,1214 1336.7,1214 1337.29,1214 1337.87,1214 1338.46,1214 1339.05,1214 1339.63,1214 1340.22,1214 1340.8,1214 1341.39,1214 1341.98,1214 1342.56,1214 1343.15,1214 1343.74,1214 1344.32,1214 1344.91,1214 1345.5,1214 1346.08,1214 1346.67,1214 1347.26,1214 1347.84,1214 1348.43,1214 1349.01,1214 1349.6,1214 1350.19,1214 1350.77,1214 1351.36,1214 1351.95,1214 1352.53,1214 1353.12,1214 1353.71,1214 1354.29,1214 1354.88,1214 1355.47,1214 1356.05,1214 1356.64,1214 1357.22,1214 1357.81,1214 1358.4,1214 1358.98,1214 1359.57,1214 1360.16,1214 1360.74,1214 1361.33,1214 1361.92,1214 1362.5,1214 1363.09,1214 1363.68,1214 1364.26,1214 1364.85,1214 1365.43,1214 1366.02,1214 1366.61,1214 1367.19,1214 1367.78,1214 1368.37,1214 1368.95,1214 1369.54,1214 1370.13,1214 1370.71,1214 1371.3,1214 1371.88,1214 1372.47,1214 1373.06,1214 1373.64,1214 1374.23,1214 1374.82,1214 1375.4,1214 1375.99,1214 1376.58,1214 1377.16,1214 1377.75,1214 1378.34,1214 1378.92,1214 1379.51,1214 1380.09,1214 1380.68,1214 1381.27,1214 1381.85,1214 1382.44,1214 1383.03,1214 1383.61,1214 1384.2,1214 1384.79,1214 1385.37,1214 1385.96,1214 1386.55,1214 1387.13,1214 1387.72,1214 1388.3,1214 1388.89,1214 1389.48,1214 1390.06,1214 1390.65,1214 1391.24,1214 1391.82,1214 1392.41,1214 1393,1214 1393.58,1214 1394.17,1214 1394.75,1214 1395.34,1214 1395.93,1214 1396.51,1214 1397.1,1214 1397.69,1214 1398.27,1214 1398.86,1214 1399.45,1214 1400.03,1214 1400.62,1214 1401.21,1214 1401.79,1214 1402.38,1214 1402.96,1214 1403.55,1214 1404.14,1214 1404.72,1214 1405.31,1214 1405.9,1214 1406.48,1214 1407.07,1214 1407.66,1214 1408.24,1214 1408.83,1214 1409.42,1214 1410,1214 1410.59,1214 1411.17,1214 1411.76,1214 1412.35,1214 1412.93,1214 1413.52,1214 1414.11,1214 1414.69,1214 1415.28,1214 1415.87,1214 1416.45,1214 1417.04,1214 1417.63,1214 1418.21,1214 1418.8,1214 1419.38,1214 1419.97,1214 1420.56,1214 1421.14,1214 1421.73,1214 1422.32,1214 1422.9,1214 1423.49,1214 1424.08,1214 1424.66,1214 1425.25,1214 1425.83,1214 1426.42,1214 1427.01,1214 1427.59,1214 1428.18,1214 1428.77,1214 1429.35,1214 1429.94,1214 1430.53,1214 1431.11,1214 1431.7,1214 1432.29,1214 1432.87,1214 1433.46,1214 1434.04,1214 1434.63,1214 1435.22,1214 1435.8,1214 1436.39,1214 1436.98,1214 1437.56,1214 1438.15,1214 1438.74,1214 1439.32,1214 1439.91,1214 1440.5,1214 1441.08,1214 1441.67,1214 1442.25,1214 1442.84,1214 1443.43,1214 1444.01,1214 1444.6,1214 1445.19,1214 1445.77,1214 1446.36,1214 1446.95,1214 1447.53,1214 1448.12,1214 1448.7,1214 1449.29,1214 1449.88,1214 1450.46,1214 1451.05,1214 1451.64,1214 1452.22,1214 1452.81,1214 1453.4,1214 1453.98,1214 1454.57,1214 1455.16,1214 1455.74,1214 1456.33,1214 1456.91,1214 1457.5,1214 1458.09,1214 1458.67,1214 1459.26,1214 1459.85,1214 1460.43,1214 1461.02,1214 1461.61,1214 1462.19,1214 1462.78,1214 1463.37,1214 1463.95,1214 1464.54,1214 1465.12,1214 1465.71,1214 1466.3,1214 1466.88,1214 1467.47,1214 1468.06,1214 1468.64,1214 1469.23,1214 1469.82,1214 1470.4,1214 1470.99,1214 1471.57,1214 1472.16,1214 1472.75,1214 1473.33,1214 1473.92,1214 1474.51,1214 1475.09,1214 1475.68,1214 1476.27,1214 1476.85,1214 1477.44,1214 1478.03,1214 1478.61,1214 1479.2,1214 1479.78,1214 1480.37,1214 1480.96,1214 1481.54,1214 1482.13,1214 1482.72,1214 1483.3,1214 1483.89,1214 1484.48,1214 1485.06,1214 1485.65,1214 1486.24,1214 1486.82,1214 1487.41,1214 1487.99,1214 1488.58,1214 1489.17,1214 1489.75,1214 1490.34,1214 1490.93,1214 1491.51,1214 1492.1,1214 1492.69,1214 1493.27,1214 1493.86,1214 1494.45,1214 1495.03,1214 1495.62,1214 1496.2,1214 1496.79,1214 1497.38,1214 1497.96,1214 1498.55,1214 1499.14,1214 1499.72,1214 1500.31,1214 1500.9,1214 1501.48,1214 1502.07,1214 1502.65,1214 1503.24,1214 1503.83,1214 1504.41,1214 1505,1214 1505.59,1214 1506.17,1214 1506.76,1214 1507.35,1214 1507.93,1214 1508.52,1214 1509.11,1214 1509.69,1214 1510.28,1214 1510.86,1214 1511.45,1214 1512.04,1214 1512.62,1214 1513.21,1214 1513.8,1214 1514.38,1214 1514.97,1214 1515.56,1214 1516.14,1214 1516.73,1214 1517.32,1214 1517.9,1214 1518.49,1214 1519.07,1214 1519.66,1214 1520.25,1214 1520.83,1214 1521.42,1214 1522.01,1214 1522.59,1214 1523.18,1214 1523.77,1214 1524.35,1214 1524.94,1214 1525.52,1214 1526.11,1214 1526.7,1214 1527.28,1214 1527.87,1214 1528.46,1214 1529.04,1214 1529.63,1214 1530.22,1214 1530.8,1214 1531.39,1214 1531.98,1214 1532.56,1214 1533.15,1214 1533.73,1214 1534.32,1214 1534.91,1214 1535.49,1214 1536.08,1214 1536.67,1214 1537.25,1214 1537.84,1214 1538.43,1214 1539.01,1214 1539.6,1214 1540.19,1214 1540.77,1214 1541.36,1214 1541.94,1214 1542.53,1214 1543.12,1214 1543.7,1214 1544.29,1214 1544.88,1214 1545.46,1214 1546.05,1214 1546.64,1214 1547.22,1214 1547.81,1214 1548.4,1214 1548.98,1214 1549.57,1214 1550.15,1214 1550.74,1214 1551.33,1214 1551.91,1214 1552.5,1214 1553.09,1214 1553.67,1214 1554.26,1214 1554.85,1214 1555.43,1214 1556.02,1214 1556.6,1214 1557.19,1214 1557.78,1214 1558.36,1214 1558.95,1214 1559.54,1214 1560.12,1214 1560.71,1214 1561.3,1214 1561.88,1214 1562.47,1214 1563.06,1214 1563.64,1214 1564.23,1214 1564.81,1214 1565.4,1214 1565.99,1214 1566.57,1214 1567.16,1214 1567.75,1214 1568.33,1214 1568.92,1214 1569.51,1214 1570.09,1214 1570.68,1214 1571.27,1214 1571.85,1214 1572.44,1214 1573.02,1214 1573.61,1214 1574.2,1214 1574.78,1214 1575.37,1214 1575.96,1214 1576.54,1214 1577.13,1214 1577.72,1214 1578.3,1214 1578.89,1214 1579.47,1214 1580.06,1214 1580.65,1214 1581.23,1214 1581.82,1214 1582.41,1214 1582.99,1214 1583.58,1214 1584.17,1214 1584.75,1214 1585.34,1214 1585.93,1214 1586.51,1214 1587.1,1214 1587.68,1214 1588.27,1214 1588.86,1214 1589.44,1214 1590.03,1214 1590.62,1214 1591.2,1214 1591.79,1214 1592.38,1214 1592.96,1214 1593.55,1214 1594.14,1214 1594.72,1214 1595.31,1214 1595.89,1214 1596.48,1214 1597.07,1214 1597.65,1214 1598.24,1214 1598.83,1214 1599.41,1214 1600,1214 1600.59,1214 1601.17,1214 1601.76,1214 1602.34,1214 1602.93,1214 1603.52,1214 1604.1,1214 1604.69,1214 1605.28,1214 1605.86,1214 1606.45,1214 1607.04,1214 1607.62,1214 1608.21,1214 1608.8,1214 1609.38,1214 1609.97,1214 1610.55,1214 1611.14,1214 1611.73,1214 1612.31,1214 1612.9,1214 1613.49,1214 1614.07,1214 1614.66,1214 1615.25,1214 1615.83,1214 1616.42,1214 1617.01,1214 1617.59,1214 1618.18,1214 1618.76,1214 1619.35,1214 1619.94,1214 1620.52,1214 1621.11,1214 1621.7,1214 1622.28,1214 1622.87,1214 1623.46,1214 1624.04,1214 1624.63,1214 1625.22,1214 1625.8,1214 1626.39,1214 1626.97,1214 1627.56,1214 1628.15,1214 1628.73,1214 1629.32,1214 1629.91,1214 1630.49,1214 1631.08,1214 1631.67,1214 1632.25,1214 1632.84,1214 1633.42,1214 1634.01,1214 1634.6,1214 1635.18,1214 1635.77,1214 1636.36,1214 1636.94,1214 1637.53,1214 1638.12,1214 1638.7,1214 1639.29,1214 1639.88,1214 1640.46,1214 1641.05,1214 1641.63,1214 1642.22,1214 1642.81,1214 1643.39,1214 1643.98,1214 1644.57,1214 1645.15,1214 1645.74,1214 1646.33,1214 1646.91,1214 1647.5,1214 1648.09,1214 1648.67,1214 1649.26,1214 1649.84,1214 1650.43,1214 1651.02,1214 1651.6,1214 1652.19,1214 1652.78,1214 1653.36,1214 1653.95,1214 1654.54,1214 1655.12,1214 1655.71,1214 1656.29,1214 1656.88,1214 1657.47,1214 1658.05,1214 1658.64,1214 1659.23,1214 1659.81,1214 1660.4,1214 1660.99,1214 1661.57,1214 1662.16,1214 1662.75,1214 1663.33,1214 1663.92,1214 1664.5,1214 1665.09,1214 1665.68,1214 1666.26,1214 1666.85,1214 1667.44,1214 1668.02,1214 1668.61,1214 1669.2,1214 1669.78,1214 1670.37,1214 1670.96,1214 1671.54,1214 1672.13,1214 1672.71,1214 1673.3,1214 1673.89,1214 1674.47,1214 1675.06,1214 1675.65,1214 1676.23,1214 1676.82,1214 1677.41,1214 1677.99,1214 1678.58,1214 1679.17,1214 1679.75,1214 1680.34,1214 1680.92,1214 1681.51,1214 1682.1,1214 1682.68,1214 1683.27,1214 1683.86,1214 1684.44,1214 1685.03,1214 1685.62,1214 1686.2,1214 1686.79,1214 1687.37,1214 1687.96,1214 1688.55,1214 1689.13,1214 1689.72,1214 1690.31,1214 1690.89,1214 1691.48,1214 1692.07,1214 1692.65,1214 1693.24,1214 1693.83,1214 1694.41,1214 1695,1214 1695.58,1214 1696.17,1214 1696.76,1214 1697.34,1214 1697.93,1214 1698.52,1214 1699.1,1214 1699.69,1214 1700.28,1214 1700.86,1214 1701.45,1214 1702.04,1214 1702.62,1214 1703.21,1214 1703.79,1214 1704.38,1214 1704.97,1214 1705.55,1214 1706.14,1214 1706.73,1214 1707.31,1214 1707.9,1214 1708.49,1214 1709.07,1214 1709.66,1214 1710.24,1214 1710.83,1214 1711.42,1214 1712,1214 1712.59,1214 1713.18,1214 1713.76,1214 1714.35,1214 1714.94,1214 1715.52,1214 1716.11,1214 1716.7,1214 1717.28,1214 1717.87,1214 1718.45,1214 1719.04,1214 1719.63,1214 1720.21,1214 1720.8,1214 1721.39,1214 1721.97,1214 1722.56,1214 1723.15,1214 1723.73,1214 1724.32,1214 1724.91,1214 1725.49,1214 1726.08,1214 1726.66,1214 1727.25,1214 1727.84,1214 1728.42,1214 1729.01,1214 1729.6,1214 1730.18,1214 1730.77,1214 1731.36,1214 1731.94,1214 1732.53,1214 1733.11,1214 1733.7,1214 1734.29,1214 1734.87,1214 1735.46,1214 1736.05,1214 1736.63,1214 1737.22,1214 1737.81,1214 1738.39,1214 1738.98,1214 1739.57,1214 1740.15,1214 1740.74,1214 1741.32,1214 1741.91,1214 1742.5,1214 1743.08,1214 1743.67,1214 1744.26,1214 1744.84,1214 1745.43,1214 1746.02,1214 1746.6,1214 1747.19,1214 1747.78,1214 1748.36,1214 1748.95,1214 1749.53,1214 1750.12,1214 1750.71,1214 1751.29,1214 1751.88,1214 1752.47,1214 1753.05,1214 1753.64,1214 1754.23,1214 1754.81,1214 1755.4,1214 1755.99,1214 1756.57,1214 1757.16,1214 1757.74,1214 1758.33,1214 1758.92,1214 1759.5,1214 1760.09,1214 1760.68,1214 1761.26,1214 1761.85,1214 1762.44,1214 1763.02,1214 1763.61,1214 1764.19,1214 1764.78,1214 1765.37,1214 1765.95,1214 1766.54,1214 1767.13,1214 1767.71,1214 1768.3,1214 1768.89,1214 1769.47,1214 1770.06,1214 1770.65,1214 1771.23,1214 1771.82,1214 1772.4,1214 1772.99,1214 1773.58,1214 1774.16,1214 1774.75,1214 1775.34,1214 1775.92,1214 1776.51,1214 1777.1,1214 1777.68,1214 1778.27,1214 1778.86,1214 1779.44,1214 1780.03,1214 1780.61,1214 1781.2,1214 1781.79,1214 1782.37,1214 1782.96,1214 1783.55,1214 1784.13,1214 1784.72,1214 1785.31,1214 1785.89,1214 1786.48,1214 1787.06,1214 1787.65,1214 1788.24,1214 1788.82,1214 1789.41,1214 1790,1214 1790.58,1214 1791.17,1214 1791.76,1214 1792.34,1214 1792.93,1214 1793.52,1214 1794.1,1214 1794.69,1214 1795.27,1214 1795.86,1214 1796.45,1214 1797.03,1214 1797.62,1214 1798.21,1214 1798.79,1214 1799.38,1214 1799.97,1214 1800.55,1214 1801.14,1214 1801.73,1214 1802.31,1214 1802.9,1214 1803.48,1214 1804.07,1214 1804.66,1214 1805.24,1214 1805.83,1214 1806.42,1214 1807,1214 1807.59,1214 1808.18,1214 1808.76,1214 1809.35,1214 1809.94,1214 1810.52,1214 1811.11,1214 1811.69,1214 1812.28,1214 1812.87,1214 1813.45,1214 1814.04,1214 1814.63,1214 1815.21,1214 1815.8,1214 1816.39,1214 1816.97,1214 1817.56,1214 1818.14,1214 1818.73,1214 1819.32,1214 1819.9,1214 1820.49,1214 1821.08,1214 1821.66,1214 1822.25,1214 1822.84,1214 1823.42,1214 1824.01,1214 1824.6,1214 1825.18,1214 1825.77,1214 1826.35,1214 1826.94,1214 1827.53,1214 1828.11,1214 1828.7,1214 1829.29,1214 1829.87,1214 1830.46,1214 1831.05,1214 1831.63,1214 1832.22,1214 1832.81,1214 1833.39,1214 1833.98,1214 1834.56,1214 1835.15,1214 1835.74,1214 1836.32,1214 1836.91,1214 1837.5,1214 1838.08,1214 1838.67,1214 1839.26,1214 1839.84,1214 1840.43,1214 1841.01,1214 1841.6,1214 1842.19,1214 1842.77,1214 1843.36,1214 1843.95,1214 1844.53,1214 1845.12,1214 1845.71,1214 1846.29,1214 1846.88,1214 1847.47,1214 1848.05,1214 1848.64,1214 1849.22,1214 1849.81,1214 1850.4,1214 1850.98,1214 1851.57,1214 1852.16,1214 1852.74,1214 1853.33,1214 1853.92,1214 1854.5,1214 1855.09,1214 1855.68,1214 1856.26,1214 1856.85,1214 1857.43,1214 1858.02,1214 1858.61,1214 1859.19,1214 1859.78,1214 1860.37,1214 1860.95,1214 1861.54,1214 1862.13,1214 1862.71,1214 1863.3,1214 1863.88,1214 1864.47,1214 1865.06,1214 1865.64,1214 1866.23,1214 1866.82,1214 1867.4,1214 1867.99,1214 1868.58,1214 1869.16,1214 1869.75,1214 1870.34,1214 1870.92,1214 1871.51,1214 1872.09,1214 1872.68,1214 1873.27,1214 1873.85,1214 1874.44,1214 1875.03,1214 1875.61,1214 1876.2,1214 1876.79,1214 1877.37,1214 1877.96,1214 1878.55,1214 1879.13,1214 1879.72,1214 1880.3,1214 1880.89,1214 1881.48,1214 1882.06,1214 1882.65,1214 1883.24,1214 1883.82,1214 1884.41,1214 1885,1214 1885.58,1214 1886.17,1214 1886.76,1214 1887.34,1214 1887.93,1214 1888.51,1214 1889.1,1214 1889.69,1214 1890.27,1214 1890.86,1214 1891.45,1214 1892.03,1214 1892.62,1214 1893.21,1214 1893.79,1214 1894.38,1214 1894.96,1214 1895.55,1214 1896.14,1214 1896.72,1214 1897.31,1214 1897.9,1214 1898.48,1214 1899.07,1214 1899.66,1214 1900.24,1214 1900.83,1214 1901.42,1214 1902,1214 1902.59,1214 1903.17,1214 1903.76,1214 1904.35,1214 1904.93,1214 1905.52,1214 1906.11,1214 1906.69,1214 1907.28,1214 1907.87,1214 1908.45,1214 1909.04,1214 1909.63,1214 1910.21,1214 1910.8,1214 1911.38,1214 1911.97,1214 1912.56,1214 1913.14,1214 1913.73,1214 1914.32,1214 1914.9,1214 1915.49,1214 1916.08,1214 1916.66,1214 1917.25,1214 1917.83,1214 1918.42,1214 1919.01,1214 1919.59,1214 1920.18,1214 1920.77,1214 1921.35,1214 1921.94,1214 1922.53,1214 1923.11,1214 1923.7,1214 1924.29,1214 1924.87,1214 1925.46,1214 1926.04,1214 1926.63,1214 1927.22,1214 1927.8,1214 1928.39,1214 1928.98,1214 1929.56,1214 1930.15,1214 1930.74,1214 1931.32,1214 1931.91,1214 1932.5,1214 1933.08,1214 1933.67,1214 1934.25,1214 1934.84,1214 1935.43,1214 1936.01,1214 1936.6,1214 1937.19,1214 1937.77,1214 1938.36,1214 1938.95,1214 1939.53,1214 1940.12,1214 1940.71,1214 1941.29,1214 1941.88,1214 1942.46,1214 1943.05,1214 1943.64,1214 1944.22,1214 1944.81,1214 1945.4,1214 1945.98,1214 1946.57,1214 1947.16,1214 1947.74,1214 1948.33,1214 1948.91,1214 1949.5,1214 1950.09,1214 1950.67,1214 1951.26,1214 1951.85,1214 1952.43,1214 1953.02,1214 1953.61,1214 1954.19,1214 1954.78,1214 1955.37,1214 1955.95,1214 1956.54,1214 1957.12,1214 1957.71,1214 1958.3,1214 1958.88,1214 1959.47,1214 1960.06,1214 1960.64,1214 1961.23,1214 1961.82,1214 1962.4,1214 1962.99,1214 1963.58,1214 1964.16,1214 1964.75,1214 1965.33,1214 1965.92,1214 1966.51,1214 1967.09,1214 1967.68,1214 1968.27,1214 1968.85,1214 1969.44,1214 1970.03,1214 1970.61,1214 1971.2,1214 1971.78,1214 1972.37,1214 1972.96,1214 1973.54,1214 1974.13,1214 1974.72,1214 1975.3,1214 1975.89,1214 1976.48,1214 1977.06,1214 1977.65,1214 1978.24,1214 1978.82,1214 1979.41,1214 1979.99,1214 1980.58,1214 1981.17,1214 1981.75,1214 1982.34,1214 1982.93,1214 1983.51,1214 1984.1,1214 1984.69,1214 1985.27,1214 1985.86,1214 1986.45,1214 1987.03,1214 1987.62,1214 1988.2,1214 1988.79,1214 1989.38,1214 1989.96,1214 1990.55,1214 1991.14,1214 1991.72,1214 1992.31,1214 1992.9,1214 1993.48,1214 1994.07,1214 1994.65,1214 1995.24,1214 1995.83,1214 1996.41,1214 1997,1214 1997.59,1214 1998.17,1214 1998.76,1214 1999.35,1214 1999.93,1214 2000.52,1214 2001.11,1214 2001.69,1214 2002.28,1214 2002.86,1214 2003.45,1214 2004.04,1214 2004.62,1214 2005.21,1214 2005.8,1214 2006.38,1214 2006.97,1214 2007.56,1214 2008.14,1214 2008.73,1214 2009.32,1214 2009.9,1214 2010.49,1214 2011.07,1214 2011.66,1214 2012.25,1214 2012.83,1214 2013.42,1214 2014.01,1214 2014.59,1214 2015.18,1214 2015.77,1214 2016.35,1214 2016.94,1214 2017.53,1214 2018.11,1214 2018.7,1214 2019.28,1214 2019.87,1214 2020.46,1214 2021.04,1214 2021.63,1214 2022.22,1214 2022.8,1214 2023.39,1214 2023.98,1214 2024.56,1214 2025.15,1214 2025.73,1214 2026.32,1214 2026.91,1214 2027.49,1214 2028.08,1214 2028.67,1214 2029.25,1214 2029.84,1214 2030.43,1214 2031.01,1214 2031.6,1214 2032.19,1214 2032.77,1214 2033.36,1214 2033.94,1214 2034.53,1214 2035.12,1214 2035.7,1214 2036.29,1214 2036.88,1214 2037.46,1214 2038.05,1214 2038.64,1214 2039.22,1214 2039.81,1214 2040.4,1214 2040.98,1214 2041.57,1214 2042.15,1214 2042.74,1214 2043.33,1214 2043.91,1214 2044.5,1214 2045.09,1214 2045.67,1214 2046.26,1214 2046.85,1214 2047.43,1214 2048.02,1214 2048.6,1214 2049.19,1214 2049.78,1214 2050.36,1214 2050.95,1214 2051.54,1214 2052.12,1214 2052.71,1214 2053.3,1214 2053.88,1214 2054.47,1214 2055.06,1214 2055.64,1214 2056.23,1214 2056.81,1214 2057.4,1214 2057.99,1214 2058.57,1214 2059.16,1214 2059.75,1214 2060.33,1214 2060.92,1214 2061.51,1214 2062.09,1214 2062.68,1214 2063.27,1214 2063.85,1214 2064.44,1214 2065.02,1214 2065.61,1214 2066.2,1214 2066.78,1214 2067.37,1214 2067.96,1214 2068.54,1214 2069.13,1214 2069.72,1214 2070.3,1214 2070.89,1214 2071.48,1214 2072.06,1214 2072.65,1214 2073.23,1214 2073.82,1214 2074.41,1214 2074.99,1214 2075.58,1214 2076.17,1214 2076.75,1214 2077.34,1214 2077.93,1214 2078.51,1214 2079.1,1214 2079.68,1214 2080.27,1214 2080.86,1214 2081.44,1214 2082.03,1214 2082.62,1214 2083.2,1214 2083.79,1214 2084.38,1214 2084.96,1214 2085.55,1214 2086.14,1214 2086.72,1214 2087.31,1214 2087.89,1214 2088.48,1214 2089.07,1214 2089.65,1214 2090.24,1214 2090.83,1214 2091.41,1214 2092,1214 2092.59,1214 2093.17,1214 2093.76,1214 2094.35,1214 2094.93,1214 2095.52,1214 2096.1,1214 2096.69,1214 2097.28,1214 2097.86,1214 2098.45,1214 2099.04,1214 2099.62,1214 2100.21,1214 2100.8,1214 2101.38,1214 2101.97,1214 2102.55,1214 2103.14,1214 2103.73,1214 2104.31,1214 2104.9,1214 2105.49,1214 2106.07,1214 2106.66,1214 2107.25,1214 2107.83,1214 2108.42,1214 2109.01,1214 2109.59,1214 2110.18,1214 2110.76,1214 2111.35,1214 2111.94,1214 2112.52,1214 2113.11,1214 2113.7,1214 2114.28,1214 2114.87,1214 2115.46,1214 2116.04,1214 2116.63,1214 2117.22,1214 2117.8,1214 2118.39,1214 2118.97,1214 2119.56,1214 2120.15,1214 2120.73,1214 2121.32,1214 2121.91,1214 2122.49,1214 2123.08,1214 2123.67,1214 2124.25,1214 2124.84,1214 2125.42,1214 2126.01,1214 2126.6,1214 2127.18,1214 2127.77,1214 2128.36,1214 2128.94,1214 2129.53,1214 2130.12,1214 2130.7,1214 2131.29,1214 2131.88,1214 2132.46,1214 2133.05,1214 2133.63,1214 2134.22,1214 2134.81,1214 2135.39,1214 2135.98,1214 2136.57,1214 2137.15,1214 2137.74,1214 2138.33,1214 2138.91,1214 2139.5,1214 2140.09,1214 2140.67,1214 2141.26,1214 2141.84,1214 2142.43,1214 2143.02,1214 2143.6,1214 2144.19,1214 2144.78,1214 2145.36,1214 2145.95,1214 2146.54,1214 2147.12,1214 2147.71,1214 2148.3,1214 2148.88,1214 2149.47,1214 2150.05,1214 2150.64,1214 2151.23,1214 2151.81,1214 2152.4,1214 2152.99,1214 2153.57,1214 2154.16,1214 2154.75,1214 2155.33,1214 2155.92,1214 2156.5,1214 2157.09,1214 2157.68,1214 2158.26,1214 \"/>\n<path clip-path=\"url(#clip022)\" d=\"M986.025 1213.93 L986.612 1213.93 L987.198 1213.93 L987.785 1213.93 L988.371 1213.93 L988.957 1213.93 L989.544 1213.93 L990.13 1213.93 L990.717 1213.93 L991.303 1213.93 L991.889 1213.93 L992.476 1213.93 L993.062 1213.93 L993.649 1213.93 L994.235 1213.93 L994.822 1213.93 L995.408 1213.93 L995.994 1213.93 L996.581 1213.93 L997.167 1213.93 L997.754 1213.93 L998.34 1213.93 L998.926 1213.93 L999.513 1213.93 L1000.1 1213.93 L1000.69 1213.93 L1001.27 1213.93 L1001.86 1213.93 L1002.44 1213.93 L1003.03 1213.93 L1003.62 1213.93 L1004.2 1213.93 L1004.79 1213.93 L1005.38 1213.93 L1005.96 1213.93 L1006.55 1213.93 L1007.14 1213.93 L1007.72 1213.93 L1008.31 1213.93 L1008.9 1213.93 L1009.48 1213.93 L1010.07 1213.93 L1010.65 1213.93 L1011.24 1213.93 L1011.83 1213.93 L1012.41 1213.93 L1013 1213.93 L1013.59 1213.93 L1014.17 1213.93 L1014.76 1213.93 L1015.35 1213.93 L1015.93 1213.93 L1016.52 1213.93 L1017.11 1213.93 L1017.69 1213.93 L1018.28 1213.93 L1018.86 1213.93 L1019.45 1213.93 L1020.04 1213.93 L1020.62 1213.93 L1021.21 1213.93 L1021.8 1213.93 L1022.38 1213.93 L1022.97 1213.93 L1023.56 1213.93 L1024.14 1213.93 L1024.73 1213.93 L1025.32 1213.93 L1025.9 1213.93 L1026.49 1213.93 L1027.07 1213.93 L1027.66 1213.93 L1028.25 1213.93 L1028.83 1213.93 L1029.42 1213.93 L1030.01 1213.93 L1030.59 1213.93 L1031.18 1213.93 L1031.77 1213.93 L1032.35 1213.93 L1032.94 1213.93 L1033.52 1213.93 L1034.11 1213.93 L1034.7 1213.93 L1035.28 1213.93 L1035.87 1213.93 L1036.46 1213.93 L1037.04 1213.93 L1037.63 1213.93 L1038.22 1213.93 L1038.8 1213.93 L1039.39 1213.93 L1039.98 1213.93 L1040.56 1213.93 L1041.15 1213.93 L1041.73 1213.93 L1042.32 1213.93 L1042.91 1213.93 L1043.49 1213.93 L1044.08 1213.93 L1044.67 1213.93 L1045.25 1213.93 L1045.84 1213.93 L1046.43 1213.93 L1047.01 1213.93 L1047.6 1213.93 L1048.19 1213.93 L1048.77 1213.93 L1049.36 1213.93 L1049.94 1213.93 L1050.53 1213.93 L1051.12 1213.93 L1051.7 1213.93 L1052.29 1213.93 L1052.88 1213.93 L1053.46 1213.93 L1054.05 1213.93 L1054.64 1213.93 L1055.22 1213.93 L1055.81 1213.93 L1056.39 1213.93 L1056.98 1213.93 L1057.57 1213.93 L1058.15 1213.93 L1058.74 1213.93 L1059.33 1213.93 L1059.91 1213.93 L1060.5 1213.93 L1061.09 1213.93 L1061.67 1213.93 L1062.26 1213.93 L1062.85 1213.93 L1063.43 1213.93 L1064.02 1213.93 L1064.6 1213.93 L1065.19 1213.93 L1065.78 1213.93 L1066.36 1213.93 L1066.95 1213.93 L1067.54 1213.93 L1068.12 1213.93 L1068.71 1213.93 L1069.3 1213.93 L1069.88 1213.93 L1070.47 1213.93 L1071.06 1213.93 L1071.64 1213.93 L1072.23 1213.93 L1072.81 1213.93 L1073.4 1213.93 L1073.99 1213.93 L1074.57 1213.93 L1075.16 1213.93 L1075.75 1213.93 L1076.33 1213.93 L1076.92 1213.93 L1077.51 1213.93 L1078.09 1213.93 L1078.68 1213.93 L1079.26 1213.93 L1079.85 1213.93 L1080.44 1213.93 L1081.02 1213.93 L1081.61 1213.93 L1082.2 1213.93 L1082.78 1213.93 L1083.37 1213.93 L1083.96 1213.93 L1084.54 1213.93 L1085.13 1213.93 L1085.72 1213.93 L1086.3 1213.93 L1086.89 1213.93 L1087.47 1213.93 L1088.06 1213.93 L1088.65 1213.93 L1089.23 1213.93 L1089.82 1213.93 L1090.41 1213.93 L1090.99 1213.93 L1091.58 1213.93 L1092.17 1213.93 L1092.75 1213.93 L1093.34 1213.93 L1093.93 1213.93 L1094.51 1213.93 L1095.1 1213.93 L1095.68 1213.93 L1096.27 1213.93 L1096.86 1213.93 L1097.44 1213.93 L1098.03 1213.93 L1098.62 1213.93 L1099.2 1213.93 L1099.79 1213.93 L1100.38 1213.93 L1100.96 1213.93 L1101.55 1213.93 L1102.14 1213.93 L1102.72 1213.93 L1103.31 1213.93 L1103.89 1213.93 L1104.48 1213.93 L1105.07 1213.93 L1105.65 1213.93 L1106.24 1213.93 L1106.83 1213.93 L1107.41 1213.93 L1108 1213.93 L1108.59 1213.93 L1109.17 1213.93 L1109.76 1213.93 L1110.34 1213.93 L1110.93 1213.93 L1111.52 1213.93 L1112.1 1213.93 L1112.69 1213.93 L1113.28 1213.93 L1113.86 1213.93 L1114.45 1213.93 L1115.04 1213.93 L1115.62 1213.93 L1116.21 1213.93 L1116.8 1213.93 L1117.38 1213.93 L1117.97 1213.93 L1118.55 1213.93 L1119.14 1213.93 L1119.73 1213.93 L1120.31 1213.93 L1120.9 1213.93 L1121.49 1213.93 L1122.07 1213.93 L1122.66 1213.93 L1123.25 1213.93 L1123.83 1213.93 L1124.42 1213.93 L1125.01 1213.93 L1125.59 1213.93 L1126.18 1213.93 L1126.76 1213.93 L1127.35 1213.93 L1127.94 1213.93 L1128.52 1213.93 L1129.11 1213.93 L1129.7 1213.93 L1130.28 1213.93 L1130.87 1213.93 L1131.46 1213.93 L1132.04 1213.93 L1132.63 1213.93 L1133.21 1213.93 L1133.8 1213.93 L1134.39 1213.93 L1134.97 1213.93 L1135.56 1213.93 L1136.15 1213.93 L1136.73 1213.93 L1137.32 1213.93 L1137.91 1213.93 L1138.49 1213.93 L1139.08 1213.93 L1139.67 1213.93 L1140.25 1213.93 L1140.84 1213.93 L1141.42 1213.93 L1142.01 1213.93 L1142.6 1213.93 L1143.18 1213.93 L1143.77 1213.93 L1144.36 1213.93 L1144.94 1213.93 L1145.53 1213.93 L1146.12 1213.93 L1146.7 1213.93 L1147.29 1213.93 L1147.88 1213.93 L1148.46 1213.93 L1149.05 1213.93 L1149.63 1213.93 L1150.22 1213.93 L1150.81 1213.93 L1151.39 1213.93 L1151.98 1213.93 L1152.57 1213.93 L1153.15 1213.93 L1153.74 1213.93 L1154.33 1213.93 L1154.91 1213.93 L1155.5 1213.93 L1156.09 1213.93 L1156.67 1213.93 L1157.26 1213.93 L1157.84 1213.93 L1158.43 1213.93 L1159.02 1213.93 L1159.6 1213.93 L1160.19 1213.93 L1160.78 1213.93 L1161.36 1213.93 L1161.95 1213.93 L1162.54 1213.93 L1163.12 1213.93 L1163.71 1213.93 L1164.29 1213.93 L1164.88 1213.93 L1165.47 1213.93 L1166.05 1213.93 L1166.64 1213.93 L1167.23 1213.93 L1167.81 1213.93 L1168.4 1213.93 L1168.99 1213.93 L1169.57 1213.93 L1170.16 1213.93 L1170.75 1213.93 L1171.33 1213.93 L1171.92 1213.93 L1172.5 1213.93 L1173.09 1213.93 L1173.68 1213.93 L1174.26 1213.93 L1174.85 1213.93 L1175.44 1213.93 L1176.02 1213.93 L1176.61 1213.93 L1177.2 1213.93 L1177.78 1213.93 L1178.37 1213.93 L1178.96 1213.93 L1179.54 1213.93 L1180.13 1213.93 L1180.71 1213.93 L1181.3 1213.93 L1181.89 1213.93 L1182.47 1213.93 L1183.06 1213.93 L1183.65 1213.93 L1184.23 1213.93 L1184.82 1213.93 L1185.41 1213.93 L1185.99 1213.93 L1186.58 1213.93 L1187.16 1213.93 L1187.75 1213.93 L1188.34 1213.93 L1188.92 1213.93 L1189.51 1213.93 L1190.1 1213.93 L1190.68 1213.93 L1191.27 1213.93 L1191.86 1213.93 L1192.44 1213.93 L1193.03 1213.93 L1193.62 1213.93 L1194.2 1213.93 L1194.79 1213.93 L1195.37 1213.93 L1195.96 1213.93 L1196.55 1213.93 L1197.13 1213.93 L1197.72 1213.93 L1198.31 1213.93 L1198.89 1213.93 L1199.48 1213.93 L1200.07 1213.93 L1200.65 1213.93 L1201.24 1213.93 L1201.83 1213.93 L1202.41 1213.93 L1203 1213.93 L1203.58 1213.93 L1204.17 1213.93 L1204.76 1213.93 L1205.34 1213.93 L1205.93 1213.93 L1206.52 1213.93 L1207.1 1213.93 L1207.69 1213.93 L1208.28 1213.93 L1208.86 1213.93 L1209.45 1213.93 L1210.03 1213.93 L1210.62 1213.93 L1211.21 1213.93 L1211.79 1213.93 L1212.38 1213.93 L1212.97 1213.93 L1213.55 1213.93 L1214.14 1213.93 L1214.73 1213.93 L1215.31 1213.93 L1215.9 1213.93 L1216.49 1213.93 L1217.07 1213.93 L1217.66 1213.93 L1218.24 1213.93 L1218.83 1213.93 L1219.42 1213.93 L1220 1213.93 L1220.59 1213.93 L1221.18 1213.93 L1221.76 1213.93 L1222.35 1213.93 L1222.94 1213.93 L1223.52 1213.93 L1224.11 1213.93 L1224.7 1213.93 L1225.28 1213.93 L1225.87 1213.93 L1226.45 1213.93 L1227.04 1213.93 L1227.63 1213.93 L1228.21 1213.93 L1228.8 1213.93 L1229.39 1213.93 L1229.97 1213.93 L1230.56 1213.93 L1231.15 1213.93 L1231.73 1213.93 L1232.32 1213.93 L1232.91 1213.93 L1233.49 1213.93 L1234.08 1213.93 L1234.66 1213.93 L1235.25 1213.93 L1235.84 1213.93 L1236.42 1213.93 L1237.01 1213.93 L1237.6 1213.93 L1238.18 1213.93 L1238.77 1213.93 L1239.36 1213.93 L1239.94 1213.93 L1240.53 1213.93 L1241.11 1213.93 L1241.7 1213.93 L1242.29 1213.93 L1242.87 1213.93 L1243.46 1213.93 L1244.05 1213.93 L1244.63 1213.93 L1245.22 1213.93 L1245.81 1213.93 L1246.39 1213.93 L1246.98 1213.93 L1247.57 1213.93 L1248.15 1213.93 L1248.74 1213.93 L1249.32 1213.93 L1249.91 1213.93 L1250.5 1213.93 L1251.08 1213.93 L1251.67 1213.93 L1252.26 1213.93 L1252.84 1213.93 L1253.43 1213.93 L1254.02 1213.93 L1254.6 1213.93 L1255.19 1213.93 L1255.78 1213.93 L1256.36 1213.93 L1256.95 1213.93 L1257.53 1213.93 L1258.12 1213.93 L1258.71 1213.93 L1259.29 1213.93 L1259.88 1213.93 L1260.47 1213.93 L1261.05 1213.93 L1261.64 1213.93 L1262.23 1213.93 L1262.81 1213.93 L1263.4 1213.93 L1263.98 1213.93 L1264.57 1213.93 L1265.16 1213.93 L1265.74 1213.93 L1266.33 1213.93 L1266.92 1213.93 L1267.5 1213.93 L1268.09 1213.93 L1268.68 1213.93 L1269.26 1213.93 L1269.85 1213.93 L1270.44 1213.93 L1271.02 1213.93 L1271.61 1213.93 L1272.19 1213.93 L1272.78 1213.93 L1273.37 1213.93 L1273.95 1213.93 L1274.54 1213.93 L1275.13 1213.93 L1275.71 1213.93 L1276.3 1213.93 L1276.89 1213.93 L1277.47 1213.93 L1278.06 1213.93 L1278.65 1213.93 L1279.23 1213.93 L1279.82 1213.93 L1280.4 1213.93 L1280.99 1213.93 L1281.58 1213.93 L1282.16 1213.93 L1282.75 1213.93 L1283.34 1213.93 L1283.92 1213.93 L1284.51 1213.93 L1285.1 1213.93 L1285.68 1213.93 L1286.27 1213.93 L1286.86 1213.93 L1287.44 1213.93 L1288.03 1213.93 L1288.61 1213.93 L1289.2 1213.93 L1289.79 1213.93 L1290.37 1213.93 L1290.96 1213.93 L1291.55 1213.93 L1292.13 1213.93 L1292.72 1213.93 L1293.31 1213.93 L1293.89 1213.93 L1294.48 1213.93 L1295.06 1213.93 L1295.65 1213.93 L1296.24 1213.93 L1296.82 1213.93 L1297.41 1213.93 L1298 1213.93 L1298.58 1213.93 L1299.17 1213.93 L1299.76 1213.93 L1300.34 1213.93 L1300.93 1213.93 L1301.52 1213.93 L1302.1 1213.93 L1302.69 1213.93 L1303.27 1213.93 L1303.86 1213.93 L1304.45 1213.93 L1305.03 1213.93 L1305.62 1213.93 L1306.21 1213.93 L1306.79 1213.93 L1307.38 1213.93 L1307.97 1213.93 L1308.55 1213.93 L1309.14 1213.93 L1309.73 1213.93 L1310.31 1213.93 L1310.9 1213.93 L1311.48 1213.93 L1312.07 1213.93 L1312.66 1213.93 L1313.24 1213.93 L1313.83 1213.93 L1314.42 1213.93 L1315 1213.93 L1315.59 1213.93 L1316.18 1213.93 L1316.76 1213.93 L1317.35 1213.93 L1317.93 1213.93 L1318.52 1213.93 L1319.11 1213.93 L1319.69 1213.93 L1320.28 1213.93 L1320.87 1213.93 L1321.45 1213.93 L1322.04 1213.93 L1322.63 1213.93 L1323.21 1213.93 L1323.8 1213.93 L1324.39 1213.93 L1324.97 1213.93 L1325.56 1213.93 L1326.14 1213.93 L1326.73 1213.93 L1327.32 1213.93 L1327.9 1213.93 L1328.49 1213.93 L1329.08 1213.93 L1329.66 1213.93 L1330.25 1213.93 L1330.84 1213.93 L1331.42 1213.93 L1332.01 1213.93 L1332.6 1213.93 L1333.18 1213.93 L1333.77 1213.93 L1334.35 1213.93 L1334.94 1213.93 L1335.53 1213.93 L1336.11 1213.93 L1336.7 1213.93 L1337.29 1213.93 L1337.87 1213.93 L1338.46 1213.93 L1339.05 1213.93 L1339.63 1213.93 L1340.22 1213.93 L1340.8 1213.93 L1341.39 1213.93 L1341.98 1213.93 L1342.56 1213.93 L1343.15 1213.93 L1343.74 1213.93 L1344.32 1213.93 L1344.91 1213.93 L1345.5 1213.93 L1346.08 1213.93 L1346.67 1213.93 L1347.26 1213.93 L1347.84 1213.93 L1348.43 1213.93 L1349.01 1213.93 L1349.6 1213.93 L1350.19 1213.93 L1350.77 1213.93 L1351.36 1213.93 L1351.95 1213.93 L1352.53 1213.93 L1353.12 1213.93 L1353.71 1213.93 L1354.29 1213.93 L1354.88 1213.93 L1355.47 1213.93 L1356.05 1213.93 L1356.64 1213.93 L1357.22 1213.93 L1357.81 1213.93 L1358.4 1213.93 L1358.98 1213.93 L1359.57 1213.93 L1360.16 1213.93 L1360.74 1213.93 L1361.33 1213.93 L1361.92 1213.93 L1362.5 1213.93 L1363.09 1213.93 L1363.68 1213.93 L1364.26 1213.93 L1364.85 1213.93 L1365.43 1213.93 L1366.02 1213.93 L1366.61 1213.93 L1367.19 1213.93 L1367.78 1213.93 L1368.37 1213.93 L1368.95 1213.93 L1369.54 1213.93 L1370.13 1213.93 L1370.71 1213.93 L1371.3 1213.93 L1371.88 1213.93 L1372.47 1213.93 L1373.06 1213.93 L1373.64 1213.93 L1374.23 1213.93 L1374.82 1213.93 L1375.4 1213.93 L1375.99 1213.93 L1376.58 1213.93 L1377.16 1213.93 L1377.75 1213.93 L1378.34 1213.93 L1378.92 1213.93 L1379.51 1213.93 L1380.09 1213.93 L1380.68 1213.93 L1381.27 1213.93 L1381.85 1213.93 L1382.44 1213.93 L1383.03 1213.93 L1383.61 1213.93 L1384.2 1213.93 L1384.79 1213.93 L1385.37 1213.93 L1385.96 1213.93 L1386.55 1213.93 L1387.13 1213.93 L1387.72 1213.93 L1388.3 1213.93 L1388.89 1213.93 L1389.48 1213.93 L1390.06 1213.93 L1390.65 1213.93 L1391.24 1213.93 L1391.82 1213.93 L1392.41 1213.93 L1393 1213.93 L1393.58 1213.93 L1394.17 1213.93 L1394.75 1213.93 L1395.34 1213.93 L1395.93 1213.93 L1396.51 1213.93 L1397.1 1213.93 L1397.69 1213.93 L1398.27 1213.93 L1398.86 1213.93 L1399.45 1213.93 L1400.03 1213.93 L1400.62 1213.93 L1401.21 1213.93 L1401.79 1213.93 L1402.38 1213.93 L1402.96 1213.93 L1403.55 1213.93 L1404.14 1213.93 L1404.72 1213.93 L1405.31 1213.93 L1405.9 1213.93 L1406.48 1213.93 L1407.07 1213.93 L1407.66 1213.93 L1408.24 1213.93 L1408.83 1213.93 L1409.42 1213.93 L1410 1213.93 L1410.59 1213.93 L1411.17 1213.93 L1411.76 1213.93 L1412.35 1213.93 L1412.93 1213.93 L1413.52 1213.93 L1414.11 1213.93 L1414.69 1213.93 L1415.28 1213.93 L1415.87 1213.93 L1416.45 1213.93 L1417.04 1213.93 L1417.63 1213.93 L1418.21 1213.93 L1418.8 1213.93 L1419.38 1213.93 L1419.97 1213.93 L1420.56 1213.93 L1421.14 1213.93 L1421.73 1213.93 L1422.32 1213.93 L1422.9 1213.93 L1423.49 1213.93 L1424.08 1213.93 L1424.66 1213.93 L1425.25 1213.93 L1425.83 1213.93 L1426.42 1213.93 L1427.01 1213.93 L1427.59 1213.93 L1428.18 1213.93 L1428.77 1213.93 L1429.35 1213.93 L1429.94 1213.93 L1430.53 1213.93 L1431.11 1213.93 L1431.7 1213.93 L1432.29 1213.93 L1432.87 1213.93 L1433.46 1213.93 L1434.04 1213.93 L1434.63 1213.93 L1435.22 1213.93 L1435.8 1213.93 L1436.39 1213.93 L1436.98 1213.93 L1437.56 1213.93 L1438.15 1213.93 L1438.74 1213.93 L1439.32 1213.93 L1439.91 1213.93 L1440.5 1213.93 L1441.08 1213.93 L1441.67 1213.93 L1442.25 1213.93 L1442.84 1213.93 L1443.43 1213.93 L1444.01 1213.93 L1444.6 1213.93 L1445.19 1213.93 L1445.77 1213.93 L1446.36 1213.93 L1446.95 1213.93 L1447.53 1213.93 L1448.12 1213.93 L1448.7 1213.93 L1449.29 1213.93 L1449.88 1213.93 L1450.46 1213.93 L1451.05 1213.93 L1451.64 1213.93 L1452.22 1213.93 L1452.81 1213.93 L1453.4 1213.93 L1453.98 1213.93 L1454.57 1213.93 L1455.16 1213.93 L1455.74 1213.93 L1456.33 1213.93 L1456.91 1213.93 L1457.5 1213.93 L1458.09 1213.93 L1458.67 1213.93 L1459.26 1213.93 L1459.85 1213.93 L1460.43 1213.93 L1461.02 1213.93 L1461.61 1213.93 L1462.19 1213.93 L1462.78 1213.93 L1463.37 1213.93 L1463.95 1213.93 L1464.54 1213.93 L1465.12 1213.93 L1465.71 1213.93 L1466.3 1213.93 L1466.88 1213.93 L1467.47 1213.93 L1468.06 1213.93 L1468.64 1213.93 L1469.23 1213.93 L1469.82 1213.93 L1470.4 1213.93 L1470.99 1213.93 L1471.57 1213.93 L1472.16 1213.93 L1472.75 1213.93 L1473.33 1213.93 L1473.92 1213.93 L1474.51 1213.93 L1475.09 1213.93 L1475.68 1213.93 L1476.27 1213.93 L1476.85 1213.93 L1477.44 1213.93 L1478.03 1213.93 L1478.61 1213.93 L1479.2 1213.93 L1479.78 1213.93 L1480.37 1213.93 L1480.96 1213.93 L1481.54 1213.93 L1482.13 1213.93 L1482.72 1213.93 L1483.3 1213.93 L1483.89 1213.93 L1484.48 1213.93 L1485.06 1213.93 L1485.65 1213.93 L1486.24 1213.93 L1486.82 1213.93 L1487.41 1213.93 L1487.99 1213.93 L1488.58 1213.93 L1489.17 1213.93 L1489.75 1213.93 L1490.34 1213.93 L1490.93 1213.93 L1491.51 1213.93 L1492.1 1213.93 L1492.69 1213.93 L1493.27 1213.93 L1493.86 1213.93 L1494.45 1213.93 L1495.03 1213.93 L1495.62 1213.93 L1496.2 1213.93 L1496.79 1213.93 L1497.38 1213.93 L1497.96 1213.93 L1498.55 1213.93 L1499.14 1213.93 L1499.72 1213.93 L1500.31 1213.93 L1500.9 1213.93 L1501.48 1213.93 L1502.07 1213.93 L1502.65 1213.93 L1503.24 1213.93 L1503.83 1213.93 L1504.41 1213.93 L1505 1213.93 L1505.59 1213.93 L1506.17 1213.93 L1506.76 1213.93 L1507.35 1213.93 L1507.93 1213.93 L1508.52 1213.93 L1509.11 1213.93 L1509.69 1213.93 L1510.28 1213.93 L1510.86 1213.93 L1511.45 1213.93 L1512.04 1213.93 L1512.62 1213.93 L1513.21 1213.93 L1513.8 1213.93 L1514.38 1213.93 L1514.97 1213.93 L1515.56 1213.93 L1516.14 1213.93 L1516.73 1213.93 L1517.32 1213.93 L1517.9 1213.93 L1518.49 1213.93 L1519.07 1213.93 L1519.66 1213.93 L1520.25 1213.93 L1520.83 1213.93 L1521.42 1213.93 L1522.01 1213.93 L1522.59 1213.93 L1523.18 1213.93 L1523.77 1213.93 L1524.35 1213.93 L1524.94 1213.93 L1525.52 1213.93 L1526.11 1213.93 L1526.7 1213.93 L1527.28 1213.93 L1527.87 1213.93 L1528.46 1213.93 L1529.04 1213.93 L1529.63 1213.93 L1530.22 1213.93 L1530.8 1213.93 L1531.39 1213.93 L1531.98 1213.93 L1532.56 1213.93 L1533.15 1213.93 L1533.73 1213.93 L1534.32 1213.93 L1534.91 1213.93 L1535.49 1213.93 L1536.08 1213.93 L1536.67 1213.93 L1537.25 1213.93 L1537.84 1213.93 L1538.43 1213.93 L1539.01 1213.93 L1539.6 1213.93 L1540.19 1213.93 L1540.77 1213.93 L1541.36 1213.93 L1541.94 1213.93 L1542.53 1213.93 L1543.12 1213.93 L1543.7 1213.93 L1544.29 1213.93 L1544.88 1213.93 L1545.46 1213.93 L1546.05 1213.93 L1546.64 1213.93 L1547.22 1213.93 L1547.81 1213.93 L1548.4 1213.93 L1548.98 1213.93 L1549.57 1213.93 L1550.15 1213.93 L1550.74 1213.93 L1551.33 1213.93 L1551.91 1213.93 L1552.5 1213.93 L1553.09 1213.93 L1553.67 1213.93 L1554.26 1213.93 L1554.85 1213.93 L1555.43 1213.93 L1556.02 1213.93 L1556.6 1213.93 L1557.19 1213.93 L1557.78 1213.93 L1558.36 1213.93 L1558.95 1213.93 L1559.54 1213.93 L1560.12 1213.93 L1560.71 1213.93 L1561.3 1213.93 L1561.88 1213.93 L1562.47 1213.93 L1563.06 1213.93 L1563.64 1213.93 L1564.23 1213.93 L1564.81 1213.93 L1565.4 1213.93 L1565.99 1213.93 L1566.57 1213.93 L1567.16 1213.93 L1567.75 1213.93 L1568.33 1213.93 L1568.92 1213.93 L1569.51 1213.93 L1570.09 1213.93 L1570.68 1213.93 L1571.27 1213.93 L1571.85 1213.93 L1572.44 1213.93 L1573.02 1213.93 L1573.61 1213.93 L1574.2 1213.93 L1574.78 1213.93 L1575.37 1213.93 L1575.96 1213.93 L1576.54 1213.93 L1577.13 1213.93 L1577.72 1213.93 L1578.3 1213.93 L1578.89 1213.93 L1579.47 1213.93 L1580.06 1213.93 L1580.65 1213.93 L1581.23 1213.93 L1581.82 1213.93 L1582.41 1213.93 L1582.99 1213.93 L1583.58 1213.93 L1584.17 1213.93 L1584.75 1213.93 L1585.34 1213.93 L1585.93 1213.93 L1586.51 1213.93 L1587.1 1213.93 L1587.68 1213.93 L1588.27 1213.93 L1588.86 1213.93 L1589.44 1213.93 L1590.03 1213.93 L1590.62 1213.93 L1591.2 1213.93 L1591.79 1213.93 L1592.38 1213.93 L1592.96 1213.93 L1593.55 1213.93 L1594.14 1213.93 L1594.72 1213.93 L1595.31 1213.93 L1595.89 1213.93 L1596.48 1213.93 L1597.07 1213.93 L1597.65 1213.93 L1598.24 1213.93 L1598.83 1213.93 L1599.41 1213.93 L1600 1213.93 L1600.59 1213.93 L1601.17 1213.93 L1601.76 1213.93 L1602.34 1213.93 L1602.93 1213.93 L1603.52 1213.93 L1604.1 1213.93 L1604.69 1213.93 L1605.28 1213.93 L1605.86 1213.93 L1606.45 1213.93 L1607.04 1213.93 L1607.62 1213.93 L1608.21 1213.93 L1608.8 1213.93 L1609.38 1213.93 L1609.97 1213.93 L1610.55 1213.93 L1611.14 1213.93 L1611.73 1213.93 L1612.31 1213.93 L1612.9 1213.93 L1613.49 1213.93 L1614.07 1213.93 L1614.66 1213.93 L1615.25 1213.93 L1615.83 1213.93 L1616.42 1213.93 L1617.01 1213.93 L1617.59 1213.93 L1618.18 1213.93 L1618.76 1213.93 L1619.35 1213.93 L1619.94 1213.93 L1620.52 1213.93 L1621.11 1213.93 L1621.7 1213.93 L1622.28 1213.93 L1622.87 1213.93 L1623.46 1213.93 L1624.04 1213.93 L1624.63 1213.93 L1625.22 1213.93 L1625.8 1213.93 L1626.39 1213.93 L1626.97 1213.93 L1627.56 1213.93 L1628.15 1213.93 L1628.73 1213.93 L1629.32 1213.93 L1629.91 1213.93 L1630.49 1213.93 L1631.08 1213.93 L1631.67 1213.93 L1632.25 1213.93 L1632.84 1213.93 L1633.42 1213.93 L1634.01 1213.93 L1634.6 1213.93 L1635.18 1213.93 L1635.77 1213.93 L1636.36 1213.93 L1636.94 1213.93 L1637.53 1213.93 L1638.12 1213.93 L1638.7 1213.93 L1639.29 1213.93 L1639.88 1213.93 L1640.46 1213.93 L1641.05 1213.93 L1641.63 1213.93 L1642.22 1213.93 L1642.81 1213.93 L1643.39 1213.93 L1643.98 1213.93 L1644.57 1213.93 L1645.15 1213.93 L1645.74 1213.93 L1646.33 1213.93 L1646.91 1213.93 L1647.5 1213.93 L1648.09 1213.93 L1648.67 1213.93 L1649.26 1213.93 L1649.84 1213.93 L1650.43 1213.93 L1651.02 1213.93 L1651.6 1213.93 L1652.19 1213.93 L1652.78 1213.93 L1653.36 1213.93 L1653.95 1213.93 L1654.54 1213.93 L1655.12 1213.93 L1655.71 1213.93 L1656.29 1213.93 L1656.88 1213.93 L1657.47 1213.93 L1658.05 1213.93 L1658.64 1213.93 L1659.23 1213.93 L1659.81 1213.93 L1660.4 1213.93 L1660.99 1213.93 L1661.57 1213.93 L1662.16 1213.93 L1662.75 1213.93 L1663.33 1213.93 L1663.92 1213.93 L1664.5 1213.93 L1665.09 1213.93 L1665.68 1213.93 L1666.26 1213.93 L1666.85 1213.93 L1667.44 1213.93 L1668.02 1213.93 L1668.61 1213.93 L1669.2 1213.93 L1669.78 1213.93 L1670.37 1213.93 L1670.96 1213.93 L1671.54 1213.93 L1672.13 1213.93 L1672.71 1213.93 L1673.3 1213.93 L1673.89 1213.93 L1674.47 1213.93 L1675.06 1213.93 L1675.65 1213.93 L1676.23 1213.93 L1676.82 1213.93 L1677.41 1213.93 L1677.99 1213.93 L1678.58 1213.93 L1679.17 1213.93 L1679.75 1213.93 L1680.34 1213.93 L1680.92 1213.93 L1681.51 1213.93 L1682.1 1213.93 L1682.68 1213.93 L1683.27 1213.93 L1683.86 1213.93 L1684.44 1213.93 L1685.03 1213.93 L1685.62 1213.93 L1686.2 1213.93 L1686.79 1213.93 L1687.37 1213.93 L1687.96 1213.93 L1688.55 1213.93 L1689.13 1213.93 L1689.72 1213.93 L1690.31 1213.93 L1690.89 1213.93 L1691.48 1213.93 L1692.07 1213.93 L1692.65 1213.93 L1693.24 1213.93 L1693.83 1213.93 L1694.41 1213.93 L1695 1213.93 L1695.58 1213.93 L1696.17 1213.93 L1696.76 1213.93 L1697.34 1213.93 L1697.93 1213.93 L1698.52 1213.93 L1699.1 1213.93 L1699.69 1213.93 L1700.28 1213.93 L1700.86 1213.93 L1701.45 1213.93 L1702.04 1213.93 L1702.62 1213.93 L1703.21 1213.93 L1703.79 1213.93 L1704.38 1213.93 L1704.97 1213.93 L1705.55 1213.93 L1706.14 1213.93 L1706.73 1213.93 L1707.31 1213.93 L1707.9 1213.93 L1708.49 1213.93 L1709.07 1213.93 L1709.66 1213.93 L1710.24 1213.93 L1710.83 1213.93 L1711.42 1213.93 L1712 1213.93 L1712.59 1213.93 L1713.18 1213.93 L1713.76 1213.93 L1714.35 1213.93 L1714.94 1213.93 L1715.52 1213.93 L1716.11 1213.93 L1716.7 1213.93 L1717.28 1213.93 L1717.87 1213.93 L1718.45 1213.93 L1719.04 1213.93 L1719.63 1213.93 L1720.21 1213.93 L1720.8 1213.93 L1721.39 1213.93 L1721.97 1213.93 L1722.56 1213.93 L1723.15 1213.93 L1723.73 1213.93 L1724.32 1213.93 L1724.91 1213.93 L1725.49 1213.93 L1726.08 1213.93 L1726.66 1213.93 L1727.25 1213.93 L1727.84 1213.93 L1728.42 1213.93 L1729.01 1213.93 L1729.6 1213.93 L1730.18 1213.93 L1730.77 1213.93 L1731.36 1213.93 L1731.94 1213.93 L1732.53 1213.93 L1733.11 1213.93 L1733.7 1213.93 L1734.29 1213.93 L1734.87 1213.93 L1735.46 1213.93 L1736.05 1213.93 L1736.63 1213.93 L1737.22 1213.93 L1737.81 1213.93 L1738.39 1213.93 L1738.98 1213.93 L1739.57 1213.93 L1740.15 1213.93 L1740.74 1213.93 L1741.32 1213.93 L1741.91 1213.93 L1742.5 1213.93 L1743.08 1213.93 L1743.67 1213.93 L1744.26 1213.93 L1744.84 1213.93 L1745.43 1213.93 L1746.02 1213.93 L1746.6 1213.93 L1747.19 1213.93 L1747.78 1213.93 L1748.36 1213.93 L1748.95 1213.93 L1749.53 1213.93 L1750.12 1213.93 L1750.71 1213.93 L1751.29 1213.93 L1751.88 1213.93 L1752.47 1213.93 L1753.05 1213.93 L1753.64 1213.93 L1754.23 1213.93 L1754.81 1213.93 L1755.4 1213.93 L1755.99 1213.93 L1756.57 1213.93 L1757.16 1213.93 L1757.74 1213.93 L1758.33 1213.93 L1758.92 1213.93 L1759.5 1213.93 L1760.09 1213.93 L1760.68 1213.93 L1761.26 1213.93 L1761.85 1213.93 L1762.44 1213.93 L1763.02 1213.93 L1763.61 1213.93 L1764.19 1213.93 L1764.78 1213.93 L1765.37 1213.93 L1765.95 1213.93 L1766.54 1213.93 L1767.13 1213.93 L1767.71 1213.93 L1768.3 1213.93 L1768.89 1213.93 L1769.47 1213.93 L1770.06 1213.93 L1770.65 1213.93 L1771.23 1213.93 L1771.82 1213.93 L1772.4 1213.93 L1772.99 1213.93 L1773.58 1213.93 L1774.16 1213.93 L1774.75 1213.93 L1775.34 1213.93 L1775.92 1213.93 L1776.51 1213.93 L1777.1 1213.93 L1777.68 1213.93 L1778.27 1213.93 L1778.86 1213.93 L1779.44 1213.93 L1780.03 1213.93 L1780.61 1213.93 L1781.2 1213.93 L1781.79 1213.93 L1782.37 1213.93 L1782.96 1213.93 L1783.55 1213.93 L1784.13 1213.93 L1784.72 1213.93 L1785.31 1213.93 L1785.89 1213.93 L1786.48 1213.93 L1787.06 1213.93 L1787.65 1213.93 L1788.24 1213.93 L1788.82 1213.93 L1789.41 1213.93 L1790 1213.93 L1790.58 1213.93 L1791.17 1213.93 L1791.76 1213.93 L1792.34 1213.93 L1792.93 1213.93 L1793.52 1213.93 L1794.1 1213.93 L1794.69 1213.93 L1795.27 1213.93 L1795.86 1213.93 L1796.45 1213.93 L1797.03 1213.93 L1797.62 1213.93 L1798.21 1213.93 L1798.79 1213.93 L1799.38 1213.93 L1799.97 1213.93 L1800.55 1213.93 L1801.14 1213.93 L1801.73 1213.93 L1802.31 1213.93 L1802.9 1213.93 L1803.48 1213.93 L1804.07 1213.93 L1804.66 1213.93 L1805.24 1213.93 L1805.83 1213.93 L1806.42 1213.93 L1807 1213.93 L1807.59 1213.93 L1808.18 1213.93 L1808.76 1213.93 L1809.35 1213.93 L1809.94 1213.93 L1810.52 1213.93 L1811.11 1213.93 L1811.69 1213.93 L1812.28 1213.93 L1812.87 1213.93 L1813.45 1213.93 L1814.04 1213.93 L1814.63 1213.93 L1815.21 1213.93 L1815.8 1213.93 L1816.39 1213.93 L1816.97 1213.93 L1817.56 1213.93 L1818.14 1213.93 L1818.73 1213.93 L1819.32 1213.93 L1819.9 1213.93 L1820.49 1213.93 L1821.08 1213.93 L1821.66 1213.93 L1822.25 1213.93 L1822.84 1213.93 L1823.42 1213.93 L1824.01 1213.93 L1824.6 1213.93 L1825.18 1213.93 L1825.77 1213.93 L1826.35 1213.93 L1826.94 1213.93 L1827.53 1213.93 L1828.11 1213.93 L1828.7 1213.93 L1829.29 1213.93 L1829.87 1213.93 L1830.46 1213.93 L1831.05 1213.93 L1831.63 1213.93 L1832.22 1213.93 L1832.81 1213.93 L1833.39 1213.93 L1833.98 1213.93 L1834.56 1213.93 L1835.15 1213.93 L1835.74 1213.93 L1836.32 1213.93 L1836.91 1213.93 L1837.5 1213.93 L1838.08 1213.93 L1838.67 1213.93 L1839.26 1213.93 L1839.84 1213.93 L1840.43 1213.93 L1841.01 1213.93 L1841.6 1213.93 L1842.19 1213.93 L1842.77 1213.93 L1843.36 1213.93 L1843.95 1213.93 L1844.53 1213.93 L1845.12 1213.93 L1845.71 1213.93 L1846.29 1213.93 L1846.88 1213.93 L1847.47 1213.93 L1848.05 1213.93 L1848.64 1213.93 L1849.22 1213.93 L1849.81 1213.93 L1850.4 1213.93 L1850.98 1213.93 L1851.57 1213.93 L1852.16 1213.93 L1852.74 1213.93 L1853.33 1213.93 L1853.92 1213.93 L1854.5 1213.93 L1855.09 1213.93 L1855.68 1213.93 L1856.26 1213.93 L1856.85 1213.93 L1857.43 1213.93 L1858.02 1213.93 L1858.61 1213.93 L1859.19 1213.93 L1859.78 1213.93 L1860.37 1213.93 L1860.95 1213.93 L1861.54 1213.93 L1862.13 1213.93 L1862.71 1213.93 L1863.3 1213.93 L1863.88 1213.93 L1864.47 1213.93 L1865.06 1213.93 L1865.64 1213.93 L1866.23 1213.93 L1866.82 1213.93 L1867.4 1213.93 L1867.99 1213.93 L1868.58 1213.93 L1869.16 1213.93 L1869.75 1213.93 L1870.34 1213.93 L1870.92 1213.93 L1871.51 1213.93 L1872.09 1213.93 L1872.68 1213.93 L1873.27 1213.93 L1873.85 1213.93 L1874.44 1213.93 L1875.03 1213.93 L1875.61 1213.93 L1876.2 1213.93 L1876.79 1213.93 L1877.37 1213.93 L1877.96 1213.93 L1878.55 1213.93 L1879.13 1213.93 L1879.72 1213.93 L1880.3 1213.93 L1880.89 1213.93 L1881.48 1213.93 L1882.06 1213.93 L1882.65 1213.93 L1883.24 1213.93 L1883.82 1213.93 L1884.41 1213.93 L1885 1213.93 L1885.58 1213.93 L1886.17 1213.93 L1886.76 1213.93 L1887.34 1213.93 L1887.93 1213.93 L1888.51 1213.93 L1889.1 1213.93 L1889.69 1213.93 L1890.27 1213.93 L1890.86 1213.93 L1891.45 1213.93 L1892.03 1213.93 L1892.62 1213.93 L1893.21 1213.93 L1893.79 1213.93 L1894.38 1213.93 L1894.96 1213.93 L1895.55 1213.93 L1896.14 1213.93 L1896.72 1213.93 L1897.31 1213.93 L1897.9 1213.93 L1898.48 1213.93 L1899.07 1213.93 L1899.66 1213.93 L1900.24 1213.93 L1900.83 1213.93 L1901.42 1213.93 L1902 1213.93 L1902.59 1213.93 L1903.17 1213.93 L1903.76 1213.93 L1904.35 1213.93 L1904.93 1213.93 L1905.52 1213.93 L1906.11 1213.93 L1906.69 1213.93 L1907.28 1213.93 L1907.87 1213.93 L1908.45 1213.93 L1909.04 1213.93 L1909.63 1213.93 L1910.21 1213.93 L1910.8 1213.93 L1911.38 1213.93 L1911.97 1213.93 L1912.56 1213.93 L1913.14 1213.93 L1913.73 1213.93 L1914.32 1213.93 L1914.9 1213.93 L1915.49 1213.93 L1916.08 1213.93 L1916.66 1213.93 L1917.25 1213.93 L1917.83 1213.93 L1918.42 1213.93 L1919.01 1213.93 L1919.59 1213.93 L1920.18 1213.93 L1920.77 1213.93 L1921.35 1213.93 L1921.94 1213.93 L1922.53 1213.93 L1923.11 1213.93 L1923.7 1213.93 L1924.29 1213.93 L1924.87 1213.93 L1925.46 1213.93 L1926.04 1213.93 L1926.63 1213.93 L1927.22 1213.93 L1927.8 1213.93 L1928.39 1213.93 L1928.98 1213.93 L1929.56 1213.93 L1930.15 1213.93 L1930.74 1213.93 L1931.32 1213.93 L1931.91 1213.93 L1932.5 1213.93 L1933.08 1213.93 L1933.67 1213.93 L1934.25 1213.93 L1934.84 1213.93 L1935.43 1213.93 L1936.01 1213.93 L1936.6 1213.93 L1937.19 1213.93 L1937.77 1213.93 L1938.36 1213.93 L1938.95 1213.93 L1939.53 1213.93 L1940.12 1213.93 L1940.71 1213.93 L1941.29 1213.93 L1941.88 1213.93 L1942.46 1213.93 L1943.05 1213.93 L1943.64 1213.93 L1944.22 1213.93 L1944.81 1213.93 L1945.4 1213.93 L1945.98 1213.93 L1946.57 1213.93 L1947.16 1213.93 L1947.74 1213.93 L1948.33 1213.93 L1948.91 1213.93 L1949.5 1213.93 L1950.09 1213.93 L1950.67 1213.93 L1951.26 1213.93 L1951.85 1213.93 L1952.43 1213.93 L1953.02 1213.93 L1953.61 1213.93 L1954.19 1213.93 L1954.78 1213.93 L1955.37 1213.93 L1955.95 1213.93 L1956.54 1213.93 L1957.12 1213.93 L1957.71 1213.93 L1958.3 1213.93 L1958.88 1213.93 L1959.47 1213.93 L1960.06 1213.93 L1960.64 1213.93 L1961.23 1213.93 L1961.82 1213.93 L1962.4 1213.93 L1962.99 1213.93 L1963.58 1213.93 L1964.16 1213.93 L1964.75 1213.93 L1965.33 1213.93 L1965.92 1213.93 L1966.51 1213.93 L1967.09 1213.93 L1967.68 1213.93 L1968.27 1213.93 L1968.85 1213.93 L1969.44 1213.93 L1970.03 1213.93 L1970.61 1213.93 L1971.2 1213.93 L1971.78 1213.93 L1972.37 1213.93 L1972.96 1213.93 L1973.54 1213.93 L1974.13 1213.93 L1974.72 1213.93 L1975.3 1213.93 L1975.89 1213.93 L1976.48 1213.93 L1977.06 1213.93 L1977.65 1213.93 L1978.24 1213.93 L1978.82 1213.93 L1979.41 1213.93 L1979.99 1213.93 L1980.58 1213.93 L1981.17 1213.93 L1981.75 1213.93 L1982.34 1213.93 L1982.93 1213.93 L1983.51 1213.93 L1984.1 1213.93 L1984.69 1213.93 L1985.27 1213.93 L1985.86 1213.93 L1986.45 1213.93 L1987.03 1213.93 L1987.62 1213.93 L1988.2 1213.93 L1988.79 1213.93 L1989.38 1213.93 L1989.96 1213.93 L1990.55 1213.93 L1991.14 1213.93 L1991.72 1213.93 L1992.31 1213.93 L1992.9 1213.93 L1993.48 1213.93 L1994.07 1213.93 L1994.65 1213.93 L1995.24 1213.93 L1995.83 1213.93 L1996.41 1213.93 L1997 1213.93 L1997.59 1213.93 L1998.17 1213.93 L1998.76 1213.93 L1999.35 1213.93 L1999.93 1213.93 L2000.52 1213.93 L2001.11 1213.93 L2001.69 1213.93 L2002.28 1213.93 L2002.86 1213.93 L2003.45 1213.93 L2004.04 1213.93 L2004.62 1213.93 L2005.21 1213.93 L2005.8 1213.93 L2006.38 1213.93 L2006.97 1213.93 L2007.56 1213.93 L2008.14 1213.93 L2008.73 1213.93 L2009.32 1213.93 L2009.9 1213.93 L2010.49 1213.93 L2011.07 1213.93 L2011.66 1213.93 L2012.25 1213.93 L2012.83 1213.93 L2013.42 1213.93 L2014.01 1213.93 L2014.59 1213.93 L2015.18 1213.93 L2015.77 1213.93 L2016.35 1213.93 L2016.94 1213.93 L2017.53 1213.93 L2018.11 1213.93 L2018.7 1213.93 L2019.28 1213.93 L2019.87 1213.93 L2020.46 1213.93 L2021.04 1213.93 L2021.63 1213.93 L2022.22 1213.93 L2022.8 1213.93 L2023.39 1213.93 L2023.98 1213.93 L2024.56 1213.93 L2025.15 1213.93 L2025.73 1213.93 L2026.32 1213.93 L2026.91 1213.93 L2027.49 1213.93 L2028.08 1213.93 L2028.67 1213.93 L2029.25 1213.93 L2029.84 1213.93 L2030.43 1213.93 L2031.01 1213.93 L2031.6 1213.93 L2032.19 1213.93 L2032.77 1213.93 L2033.36 1213.93 L2033.94 1213.93 L2034.53 1213.93 L2035.12 1213.93 L2035.7 1213.93 L2036.29 1213.93 L2036.88 1213.93 L2037.46 1213.93 L2038.05 1213.93 L2038.64 1213.93 L2039.22 1213.93 L2039.81 1213.93 L2040.4 1213.93 L2040.98 1213.93 L2041.57 1213.93 L2042.15 1213.93 L2042.74 1213.93 L2043.33 1213.93 L2043.91 1213.93 L2044.5 1213.93 L2045.09 1213.93 L2045.67 1213.93 L2046.26 1213.93 L2046.85 1213.93 L2047.43 1213.93 L2048.02 1213.93 L2048.6 1213.93 L2049.19 1213.93 L2049.78 1213.93 L2050.36 1213.93 L2050.95 1213.93 L2051.54 1213.93 L2052.12 1213.93 L2052.71 1213.93 L2053.3 1213.93 L2053.88 1213.93 L2054.47 1213.93 L2055.06 1213.93 L2055.64 1213.93 L2056.23 1213.93 L2056.81 1213.93 L2057.4 1213.93 L2057.99 1213.93 L2058.57 1213.93 L2059.16 1213.93 L2059.75 1213.93 L2060.33 1213.93 L2060.92 1213.93 L2061.51 1213.93 L2062.09 1213.93 L2062.68 1213.93 L2063.27 1213.93 L2063.85 1213.93 L2064.44 1213.93 L2065.02 1213.93 L2065.61 1213.93 L2066.2 1213.93 L2066.78 1213.93 L2067.37 1213.93 L2067.96 1213.93 L2068.54 1213.93 L2069.13 1213.93 L2069.72 1213.93 L2070.3 1213.93 L2070.89 1213.93 L2071.48 1213.93 L2072.06 1213.93 L2072.65 1213.93 L2073.23 1213.93 L2073.82 1213.93 L2074.41 1213.93 L2074.99 1213.93 L2075.58 1213.93 L2076.17 1213.93 L2076.75 1213.93 L2077.34 1213.93 L2077.93 1213.93 L2078.51 1213.93 L2079.1 1213.93 L2079.68 1213.93 L2080.27 1213.93 L2080.86 1213.93 L2081.44 1213.93 L2082.03 1213.93 L2082.62 1213.93 L2083.2 1213.93 L2083.79 1213.93 L2084.38 1213.93 L2084.96 1213.93 L2085.55 1213.93 L2086.14 1213.93 L2086.72 1213.93 L2087.31 1213.93 L2087.89 1213.93 L2088.48 1213.93 L2089.07 1213.93 L2089.65 1213.93 L2090.24 1213.93 L2090.83 1213.93 L2091.41 1213.93 L2092 1213.93 L2092.59 1213.93 L2093.17 1213.93 L2093.76 1213.93 L2094.35 1213.93 L2094.93 1213.93 L2095.52 1213.93 L2096.1 1213.93 L2096.69 1213.93 L2097.28 1213.93 L2097.86 1213.93 L2098.45 1213.93 L2099.04 1213.93 L2099.62 1213.93 L2100.21 1213.93 L2100.8 1213.93 L2101.38 1213.93 L2101.97 1213.93 L2102.55 1213.93 L2103.14 1213.93 L2103.73 1213.93 L2104.31 1213.93 L2104.9 1213.93 L2105.49 1213.93 L2106.07 1213.93 L2106.66 1213.93 L2107.25 1213.93 L2107.83 1213.93 L2108.42 1213.93 L2109.01 1213.93 L2109.59 1213.93 L2110.18 1213.93 L2110.76 1213.93 L2111.35 1213.93 L2111.94 1213.93 L2112.52 1213.93 L2113.11 1213.93 L2113.7 1213.93 L2114.28 1213.93 L2114.87 1213.93 L2115.46 1213.93 L2116.04 1213.93 L2116.63 1213.93 L2117.22 1213.93 L2117.8 1213.93 L2118.39 1213.93 L2118.97 1213.93 L2119.56 1213.93 L2120.15 1213.93 L2120.73 1213.93 L2121.32 1213.93 L2121.91 1213.93 L2122.49 1213.93 L2123.08 1213.93 L2123.67 1213.93 L2124.25 1213.93 L2124.84 1213.93 L2125.42 1213.93 L2126.01 1213.93 L2126.6 1213.93 L2127.18 1213.93 L2127.77 1213.93 L2128.36 1213.93 L2128.94 1213.93 L2129.53 1213.93 L2130.12 1213.93 L2130.7 1213.93 L2131.29 1213.93 L2131.88 1213.93 L2132.46 1213.93 L2133.05 1213.93 L2133.63 1213.93 L2134.22 1213.93 L2134.81 1213.93 L2135.39 1213.93 L2135.98 1213.93 L2136.57 1213.93 L2137.15 1213.93 L2137.74 1213.93 L2138.33 1213.93 L2138.91 1213.93 L2139.5 1213.93 L2140.09 1213.93 L2140.67 1213.93 L2141.26 1213.93 L2141.84 1213.93 L2142.43 1213.93 L2143.02 1213.93 L2143.6 1213.93 L2144.19 1213.93 L2144.78 1213.93 L2145.36 1213.93 L2145.95 1213.93 L2146.54 1213.93 L2147.12 1213.93 L2147.71 1213.93 L2148.3 1213.93 L2148.88 1213.93 L2149.47 1213.93 L2150.05 1213.93 L2150.64 1213.93 L2151.23 1213.93 L2151.81 1213.93 L2152.4 1213.93 L2152.99 1213.93 L2153.57 1213.93 L2154.16 1213.93 L2154.75 1213.93 L2155.33 1213.93 L2155.92 1213.93 L2156.5 1213.93 L2157.09 1213.93 L2157.68 1213.93 L2158.26 1213.93 L2158.26 1213.81 L2157.68 1213.81 L2157.09 1213.81 L2156.5 1213.81 L2155.92 1213.81 L2155.33 1213.81 L2154.75 1213.81 L2154.16 1213.81 L2153.57 1213.81 L2152.99 1213.81 L2152.4 1213.81 L2151.81 1213.81 L2151.23 1213.81 L2150.64 1213.81 L2150.05 1213.81 L2149.47 1213.81 L2148.88 1213.81 L2148.3 1213.81 L2147.71 1213.81 L2147.12 1213.81 L2146.54 1213.81 L2145.95 1213.81 L2145.36 1213.81 L2144.78 1213.81 L2144.19 1213.81 L2143.6 1213.81 L2143.02 1213.81 L2142.43 1213.81 L2141.84 1213.81 L2141.26 1213.81 L2140.67 1213.81 L2140.09 1213.81 L2139.5 1213.81 L2138.91 1213.81 L2138.33 1213.81 L2137.74 1213.81 L2137.15 1213.81 L2136.57 1213.81 L2135.98 1213.81 L2135.39 1213.81 L2134.81 1213.81 L2134.22 1213.81 L2133.63 1213.81 L2133.05 1213.81 L2132.46 1213.81 L2131.88 1213.81 L2131.29 1213.81 L2130.7 1213.81 L2130.12 1213.81 L2129.53 1213.81 L2128.94 1213.81 L2128.36 1213.81 L2127.77 1213.81 L2127.18 1213.81 L2126.6 1213.81 L2126.01 1213.81 L2125.42 1213.81 L2124.84 1213.81 L2124.25 1213.81 L2123.67 1213.81 L2123.08 1213.81 L2122.49 1213.81 L2121.91 1213.81 L2121.32 1213.81 L2120.73 1213.81 L2120.15 1213.81 L2119.56 1213.81 L2118.97 1213.81 L2118.39 1213.81 L2117.8 1213.81 L2117.22 1213.81 L2116.63 1213.81 L2116.04 1213.81 L2115.46 1213.81 L2114.87 1213.81 L2114.28 1213.81 L2113.7 1213.81 L2113.11 1213.81 L2112.52 1213.81 L2111.94 1213.81 L2111.35 1213.81 L2110.76 1213.81 L2110.18 1213.81 L2109.59 1213.81 L2109.01 1213.81 L2108.42 1213.81 L2107.83 1213.81 L2107.25 1213.81 L2106.66 1213.81 L2106.07 1213.81 L2105.49 1213.81 L2104.9 1213.81 L2104.31 1213.81 L2103.73 1213.81 L2103.14 1213.81 L2102.55 1213.81 L2101.97 1213.81 L2101.38 1213.81 L2100.8 1213.81 L2100.21 1213.81 L2099.62 1213.81 L2099.04 1213.81 L2098.45 1213.81 L2097.86 1213.81 L2097.28 1213.81 L2096.69 1213.81 L2096.1 1213.81 L2095.52 1213.81 L2094.93 1213.81 L2094.35 1213.81 L2093.76 1213.81 L2093.17 1213.81 L2092.59 1213.81 L2092 1213.81 L2091.41 1213.81 L2090.83 1213.81 L2090.24 1213.81 L2089.65 1213.81 L2089.07 1213.81 L2088.48 1213.81 L2087.89 1213.81 L2087.31 1213.81 L2086.72 1213.81 L2086.14 1213.81 L2085.55 1213.81 L2084.96 1213.81 L2084.38 1213.81 L2083.79 1213.81 L2083.2 1213.81 L2082.62 1213.81 L2082.03 1213.81 L2081.44 1213.81 L2080.86 1213.81 L2080.27 1213.81 L2079.68 1213.81 L2079.1 1213.81 L2078.51 1213.81 L2077.93 1213.81 L2077.34 1213.81 L2076.75 1213.81 L2076.17 1213.81 L2075.58 1213.81 L2074.99 1213.81 L2074.41 1213.81 L2073.82 1213.81 L2073.23 1213.81 L2072.65 1213.81 L2072.06 1213.81 L2071.48 1213.81 L2070.89 1213.81 L2070.3 1213.81 L2069.72 1213.81 L2069.13 1213.81 L2068.54 1213.81 L2067.96 1213.81 L2067.37 1213.81 L2066.78 1213.81 L2066.2 1213.81 L2065.61 1213.81 L2065.02 1213.81 L2064.44 1213.81 L2063.85 1213.81 L2063.27 1213.81 L2062.68 1213.81 L2062.09 1213.81 L2061.51 1213.81 L2060.92 1213.81 L2060.33 1213.81 L2059.75 1213.81 L2059.16 1213.81 L2058.57 1213.81 L2057.99 1213.81 L2057.4 1213.81 L2056.81 1213.81 L2056.23 1213.81 L2055.64 1213.81 L2055.06 1213.81 L2054.47 1213.81 L2053.88 1213.81 L2053.3 1213.81 L2052.71 1213.81 L2052.12 1213.81 L2051.54 1213.81 L2050.95 1213.81 L2050.36 1213.81 L2049.78 1213.81 L2049.19 1213.81 L2048.6 1213.81 L2048.02 1213.81 L2047.43 1213.81 L2046.85 1213.81 L2046.26 1213.81 L2045.67 1213.81 L2045.09 1213.81 L2044.5 1213.81 L2043.91 1213.81 L2043.33 1213.81 L2042.74 1213.81 L2042.15 1213.81 L2041.57 1213.81 L2040.98 1213.81 L2040.4 1213.81 L2039.81 1213.81 L2039.22 1213.81 L2038.64 1213.81 L2038.05 1213.81 L2037.46 1213.81 L2036.88 1213.81 L2036.29 1213.81 L2035.7 1213.81 L2035.12 1213.81 L2034.53 1213.81 L2033.94 1213.81 L2033.36 1213.81 L2032.77 1213.81 L2032.19 1213.81 L2031.6 1213.81 L2031.01 1213.81 L2030.43 1213.81 L2029.84 1213.81 L2029.25 1213.81 L2028.67 1213.81 L2028.08 1213.81 L2027.49 1213.81 L2026.91 1213.81 L2026.32 1213.81 L2025.73 1213.81 L2025.15 1213.81 L2024.56 1213.81 L2023.98 1213.81 L2023.39 1213.81 L2022.8 1213.81 L2022.22 1213.81 L2021.63 1213.81 L2021.04 1213.81 L2020.46 1213.81 L2019.87 1213.81 L2019.28 1213.81 L2018.7 1213.81 L2018.11 1213.81 L2017.53 1213.81 L2016.94 1213.81 L2016.35 1213.81 L2015.77 1213.81 L2015.18 1213.81 L2014.59 1213.81 L2014.01 1213.81 L2013.42 1213.81 L2012.83 1213.81 L2012.25 1213.81 L2011.66 1213.81 L2011.07 1213.81 L2010.49 1213.81 L2009.9 1213.81 L2009.32 1213.81 L2008.73 1213.81 L2008.14 1213.81 L2007.56 1213.81 L2006.97 1213.81 L2006.38 1213.81 L2005.8 1213.81 L2005.21 1213.81 L2004.62 1213.81 L2004.04 1213.81 L2003.45 1213.81 L2002.86 1213.81 L2002.28 1213.81 L2001.69 1213.81 L2001.11 1213.81 L2000.52 1213.81 L1999.93 1213.81 L1999.35 1213.81 L1998.76 1213.81 L1998.17 1213.81 L1997.59 1213.81 L1997 1213.81 L1996.41 1213.81 L1995.83 1213.81 L1995.24 1213.81 L1994.65 1213.81 L1994.07 1213.81 L1993.48 1213.81 L1992.9 1213.81 L1992.31 1213.81 L1991.72 1213.81 L1991.14 1213.81 L1990.55 1213.81 L1989.96 1213.81 L1989.38 1213.81 L1988.79 1213.81 L1988.2 1213.81 L1987.62 1213.81 L1987.03 1213.81 L1986.45 1213.81 L1985.86 1213.81 L1985.27 1213.81 L1984.69 1213.81 L1984.1 1213.81 L1983.51 1213.81 L1982.93 1213.81 L1982.34 1213.81 L1981.75 1213.81 L1981.17 1213.81 L1980.58 1213.81 L1979.99 1213.81 L1979.41 1213.81 L1978.82 1213.81 L1978.24 1213.81 L1977.65 1213.81 L1977.06 1213.81 L1976.48 1213.81 L1975.89 1213.81 L1975.3 1213.81 L1974.72 1213.81 L1974.13 1213.81 L1973.54 1213.81 L1972.96 1213.81 L1972.37 1213.81 L1971.78 1213.81 L1971.2 1213.81 L1970.61 1213.81 L1970.03 1213.81 L1969.44 1213.81 L1968.85 1213.81 L1968.27 1213.81 L1967.68 1213.81 L1967.09 1213.81 L1966.51 1213.81 L1965.92 1213.81 L1965.33 1213.81 L1964.75 1213.81 L1964.16 1213.81 L1963.58 1213.81 L1962.99 1213.81 L1962.4 1213.81 L1961.82 1213.81 L1961.23 1213.81 L1960.64 1213.81 L1960.06 1213.81 L1959.47 1213.81 L1958.88 1213.81 L1958.3 1213.81 L1957.71 1213.81 L1957.12 1213.81 L1956.54 1213.81 L1955.95 1213.81 L1955.37 1213.81 L1954.78 1213.81 L1954.19 1213.81 L1953.61 1213.81 L1953.02 1213.81 L1952.43 1213.81 L1951.85 1213.81 L1951.26 1213.81 L1950.67 1213.81 L1950.09 1213.81 L1949.5 1213.81 L1948.91 1213.81 L1948.33 1213.81 L1947.74 1213.81 L1947.16 1213.81 L1946.57 1213.81 L1945.98 1213.81 L1945.4 1213.81 L1944.81 1213.81 L1944.22 1213.81 L1943.64 1213.81 L1943.05 1213.81 L1942.46 1213.81 L1941.88 1213.81 L1941.29 1213.81 L1940.71 1213.81 L1940.12 1213.81 L1939.53 1213.81 L1938.95 1213.81 L1938.36 1213.81 L1937.77 1213.81 L1937.19 1213.81 L1936.6 1213.81 L1936.01 1213.81 L1935.43 1213.81 L1934.84 1213.81 L1934.25 1213.81 L1933.67 1213.81 L1933.08 1213.81 L1932.5 1213.81 L1931.91 1213.81 L1931.32 1213.81 L1930.74 1213.81 L1930.15 1213.81 L1929.56 1213.81 L1928.98 1213.81 L1928.39 1213.81 L1927.8 1213.81 L1927.22 1213.81 L1926.63 1213.81 L1926.04 1213.81 L1925.46 1213.81 L1924.87 1213.81 L1924.29 1213.81 L1923.7 1213.81 L1923.11 1213.81 L1922.53 1213.81 L1921.94 1213.81 L1921.35 1213.81 L1920.77 1213.81 L1920.18 1213.81 L1919.59 1213.81 L1919.01 1213.81 L1918.42 1213.81 L1917.83 1213.81 L1917.25 1213.81 L1916.66 1213.81 L1916.08 1213.81 L1915.49 1213.81 L1914.9 1213.81 L1914.32 1213.81 L1913.73 1213.81 L1913.14 1213.81 L1912.56 1213.81 L1911.97 1213.81 L1911.38 1213.81 L1910.8 1213.81 L1910.21 1213.81 L1909.63 1213.81 L1909.04 1213.81 L1908.45 1213.81 L1907.87 1213.81 L1907.28 1213.81 L1906.69 1213.81 L1906.11 1213.81 L1905.52 1213.81 L1904.93 1213.81 L1904.35 1213.81 L1903.76 1213.81 L1903.17 1213.81 L1902.59 1213.81 L1902 1213.81 L1901.42 1213.81 L1900.83 1213.81 L1900.24 1213.81 L1899.66 1213.81 L1899.07 1213.81 L1898.48 1213.81 L1897.9 1213.81 L1897.31 1213.81 L1896.72 1213.81 L1896.14 1213.81 L1895.55 1213.81 L1894.96 1213.81 L1894.38 1213.81 L1893.79 1213.81 L1893.21 1213.81 L1892.62 1213.81 L1892.03 1213.81 L1891.45 1213.81 L1890.86 1213.81 L1890.27 1213.81 L1889.69 1213.81 L1889.1 1213.81 L1888.51 1213.81 L1887.93 1213.81 L1887.34 1213.81 L1886.76 1213.81 L1886.17 1213.81 L1885.58 1213.81 L1885 1213.81 L1884.41 1213.81 L1883.82 1213.81 L1883.24 1213.81 L1882.65 1213.81 L1882.06 1213.81 L1881.48 1213.81 L1880.89 1213.81 L1880.3 1213.81 L1879.72 1213.81 L1879.13 1213.81 L1878.55 1213.81 L1877.96 1213.81 L1877.37 1213.81 L1876.79 1213.81 L1876.2 1213.81 L1875.61 1213.81 L1875.03 1213.81 L1874.44 1213.81 L1873.85 1213.81 L1873.27 1213.81 L1872.68 1213.81 L1872.09 1213.81 L1871.51 1213.81 L1870.92 1213.81 L1870.34 1213.81 L1869.75 1213.81 L1869.16 1213.81 L1868.58 1213.81 L1867.99 1213.81 L1867.4 1213.81 L1866.82 1213.81 L1866.23 1213.81 L1865.64 1213.81 L1865.06 1213.81 L1864.47 1213.81 L1863.88 1213.81 L1863.3 1213.81 L1862.71 1213.81 L1862.13 1213.81 L1861.54 1213.81 L1860.95 1213.81 L1860.37 1213.81 L1859.78 1213.81 L1859.19 1213.81 L1858.61 1213.81 L1858.02 1213.81 L1857.43 1213.81 L1856.85 1213.81 L1856.26 1213.81 L1855.68 1213.81 L1855.09 1213.81 L1854.5 1213.81 L1853.92 1213.81 L1853.33 1213.81 L1852.74 1213.81 L1852.16 1213.81 L1851.57 1213.81 L1850.98 1213.81 L1850.4 1213.81 L1849.81 1213.81 L1849.22 1213.81 L1848.64 1213.81 L1848.05 1213.81 L1847.47 1213.81 L1846.88 1213.81 L1846.29 1213.81 L1845.71 1213.81 L1845.12 1213.81 L1844.53 1213.81 L1843.95 1213.81 L1843.36 1213.81 L1842.77 1213.81 L1842.19 1213.81 L1841.6 1213.81 L1841.01 1213.81 L1840.43 1213.81 L1839.84 1213.81 L1839.26 1213.81 L1838.67 1213.81 L1838.08 1213.81 L1837.5 1213.81 L1836.91 1213.81 L1836.32 1213.81 L1835.74 1213.81 L1835.15 1213.81 L1834.56 1213.81 L1833.98 1213.81 L1833.39 1213.81 L1832.81 1213.81 L1832.22 1213.81 L1831.63 1213.81 L1831.05 1213.81 L1830.46 1213.81 L1829.87 1213.81 L1829.29 1213.81 L1828.7 1213.81 L1828.11 1213.81 L1827.53 1213.81 L1826.94 1213.81 L1826.35 1213.81 L1825.77 1213.81 L1825.18 1213.81 L1824.6 1213.81 L1824.01 1213.81 L1823.42 1213.81 L1822.84 1213.81 L1822.25 1213.81 L1821.66 1213.81 L1821.08 1213.81 L1820.49 1213.81 L1819.9 1213.81 L1819.32 1213.81 L1818.73 1213.81 L1818.14 1213.81 L1817.56 1213.81 L1816.97 1213.81 L1816.39 1213.81 L1815.8 1213.81 L1815.21 1213.81 L1814.63 1213.81 L1814.04 1213.81 L1813.45 1213.81 L1812.87 1213.81 L1812.28 1213.81 L1811.69 1213.81 L1811.11 1213.81 L1810.52 1213.81 L1809.94 1213.81 L1809.35 1213.81 L1808.76 1213.81 L1808.18 1213.81 L1807.59 1213.81 L1807 1213.81 L1806.42 1213.81 L1805.83 1213.81 L1805.24 1213.81 L1804.66 1213.81 L1804.07 1213.81 L1803.48 1213.81 L1802.9 1213.81 L1802.31 1213.81 L1801.73 1213.81 L1801.14 1213.81 L1800.55 1213.81 L1799.97 1213.81 L1799.38 1213.81 L1798.79 1213.81 L1798.21 1213.81 L1797.62 1213.81 L1797.03 1213.81 L1796.45 1213.81 L1795.86 1213.81 L1795.27 1213.81 L1794.69 1213.81 L1794.1 1213.81 L1793.52 1213.81 L1792.93 1213.81 L1792.34 1213.81 L1791.76 1213.81 L1791.17 1213.81 L1790.58 1213.81 L1790 1213.81 L1789.41 1213.81 L1788.82 1213.81 L1788.24 1213.81 L1787.65 1213.81 L1787.06 1213.81 L1786.48 1213.81 L1785.89 1213.81 L1785.31 1213.81 L1784.72 1213.81 L1784.13 1213.81 L1783.55 1213.81 L1782.96 1213.81 L1782.37 1213.81 L1781.79 1213.81 L1781.2 1213.81 L1780.61 1213.81 L1780.03 1213.81 L1779.44 1213.81 L1778.86 1213.81 L1778.27 1213.81 L1777.68 1213.81 L1777.1 1213.81 L1776.51 1213.81 L1775.92 1213.81 L1775.34 1213.81 L1774.75 1213.81 L1774.16 1213.81 L1773.58 1213.81 L1772.99 1213.81 L1772.4 1213.81 L1771.82 1213.81 L1771.23 1213.81 L1770.65 1213.81 L1770.06 1213.81 L1769.47 1213.81 L1768.89 1213.81 L1768.3 1213.81 L1767.71 1213.81 L1767.13 1213.81 L1766.54 1213.81 L1765.95 1213.81 L1765.37 1213.81 L1764.78 1213.81 L1764.19 1213.81 L1763.61 1213.81 L1763.02 1213.81 L1762.44 1213.81 L1761.85 1213.81 L1761.26 1213.81 L1760.68 1213.81 L1760.09 1213.81 L1759.5 1213.81 L1758.92 1213.81 L1758.33 1213.81 L1757.74 1213.81 L1757.16 1213.81 L1756.57 1213.81 L1755.99 1213.81 L1755.4 1213.81 L1754.81 1213.81 L1754.23 1213.81 L1753.64 1213.81 L1753.05 1213.81 L1752.47 1213.81 L1751.88 1213.81 L1751.29 1213.81 L1750.71 1213.81 L1750.12 1213.81 L1749.53 1213.81 L1748.95 1213.81 L1748.36 1213.81 L1747.78 1213.81 L1747.19 1213.81 L1746.6 1213.81 L1746.02 1213.81 L1745.43 1213.81 L1744.84 1213.81 L1744.26 1213.81 L1743.67 1213.81 L1743.08 1213.81 L1742.5 1213.81 L1741.91 1213.81 L1741.32 1213.81 L1740.74 1213.81 L1740.15 1213.81 L1739.57 1213.81 L1738.98 1213.81 L1738.39 1213.81 L1737.81 1213.81 L1737.22 1213.81 L1736.63 1213.81 L1736.05 1213.81 L1735.46 1213.81 L1734.87 1213.81 L1734.29 1213.81 L1733.7 1213.81 L1733.11 1213.81 L1732.53 1213.81 L1731.94 1213.81 L1731.36 1213.81 L1730.77 1213.81 L1730.18 1213.81 L1729.6 1213.81 L1729.01 1213.81 L1728.42 1213.81 L1727.84 1213.81 L1727.25 1213.81 L1726.66 1213.81 L1726.08 1213.81 L1725.49 1213.81 L1724.91 1213.81 L1724.32 1213.81 L1723.73 1213.81 L1723.15 1213.81 L1722.56 1213.81 L1721.97 1213.81 L1721.39 1213.81 L1720.8 1213.81 L1720.21 1213.81 L1719.63 1213.81 L1719.04 1213.81 L1718.45 1213.81 L1717.87 1213.81 L1717.28 1213.81 L1716.7 1213.81 L1716.11 1213.81 L1715.52 1213.81 L1714.94 1213.81 L1714.35 1213.81 L1713.76 1213.81 L1713.18 1213.81 L1712.59 1213.81 L1712 1213.81 L1711.42 1213.81 L1710.83 1213.81 L1710.24 1213.81 L1709.66 1213.81 L1709.07 1213.81 L1708.49 1213.81 L1707.9 1213.81 L1707.31 1213.81 L1706.73 1213.81 L1706.14 1213.81 L1705.55 1213.81 L1704.97 1213.81 L1704.38 1213.81 L1703.79 1213.81 L1703.21 1213.81 L1702.62 1213.81 L1702.04 1213.81 L1701.45 1213.81 L1700.86 1213.81 L1700.28 1213.81 L1699.69 1213.81 L1699.1 1213.81 L1698.52 1213.81 L1697.93 1213.81 L1697.34 1213.81 L1696.76 1213.81 L1696.17 1213.81 L1695.58 1213.81 L1695 1213.81 L1694.41 1213.81 L1693.83 1213.81 L1693.24 1213.81 L1692.65 1213.81 L1692.07 1213.81 L1691.48 1213.81 L1690.89 1213.81 L1690.31 1213.81 L1689.72 1213.81 L1689.13 1213.81 L1688.55 1213.81 L1687.96 1213.81 L1687.37 1213.81 L1686.79 1213.81 L1686.2 1213.81 L1685.62 1213.81 L1685.03 1213.81 L1684.44 1213.81 L1683.86 1213.81 L1683.27 1213.81 L1682.68 1213.81 L1682.1 1213.81 L1681.51 1213.81 L1680.92 1213.81 L1680.34 1213.81 L1679.75 1213.81 L1679.17 1213.81 L1678.58 1213.81 L1677.99 1213.81 L1677.41 1213.81 L1676.82 1213.81 L1676.23 1213.81 L1675.65 1213.81 L1675.06 1213.81 L1674.47 1213.81 L1673.89 1213.81 L1673.3 1213.81 L1672.71 1213.81 L1672.13 1213.81 L1671.54 1213.81 L1670.96 1213.81 L1670.37 1213.81 L1669.78 1213.81 L1669.2 1213.81 L1668.61 1213.81 L1668.02 1213.81 L1667.44 1213.81 L1666.85 1213.81 L1666.26 1213.81 L1665.68 1213.81 L1665.09 1213.81 L1664.5 1213.81 L1663.92 1213.81 L1663.33 1213.81 L1662.75 1213.81 L1662.16 1213.81 L1661.57 1213.81 L1660.99 1213.81 L1660.4 1213.81 L1659.81 1213.81 L1659.23 1213.81 L1658.64 1213.81 L1658.05 1213.81 L1657.47 1213.81 L1656.88 1213.81 L1656.29 1213.81 L1655.71 1213.81 L1655.12 1213.81 L1654.54 1213.81 L1653.95 1213.81 L1653.36 1213.81 L1652.78 1213.81 L1652.19 1213.81 L1651.6 1213.81 L1651.02 1213.81 L1650.43 1213.81 L1649.84 1213.81 L1649.26 1213.81 L1648.67 1213.81 L1648.09 1213.81 L1647.5 1213.81 L1646.91 1213.81 L1646.33 1213.81 L1645.74 1213.81 L1645.15 1213.81 L1644.57 1213.81 L1643.98 1213.81 L1643.39 1213.81 L1642.81 1213.81 L1642.22 1213.81 L1641.63 1213.81 L1641.05 1213.81 L1640.46 1213.81 L1639.88 1213.81 L1639.29 1213.81 L1638.7 1213.81 L1638.12 1213.81 L1637.53 1213.81 L1636.94 1213.81 L1636.36 1213.81 L1635.77 1213.81 L1635.18 1213.81 L1634.6 1213.81 L1634.01 1213.81 L1633.42 1213.81 L1632.84 1213.81 L1632.25 1213.81 L1631.67 1213.81 L1631.08 1213.81 L1630.49 1213.81 L1629.91 1213.81 L1629.32 1213.81 L1628.73 1213.81 L1628.15 1213.81 L1627.56 1213.81 L1626.97 1213.81 L1626.39 1213.81 L1625.8 1213.81 L1625.22 1213.81 L1624.63 1213.81 L1624.04 1213.81 L1623.46 1213.81 L1622.87 1213.81 L1622.28 1213.81 L1621.7 1213.81 L1621.11 1213.81 L1620.52 1213.81 L1619.94 1213.81 L1619.35 1213.81 L1618.76 1213.81 L1618.18 1213.81 L1617.59 1213.81 L1617.01 1213.81 L1616.42 1213.81 L1615.83 1213.81 L1615.25 1213.81 L1614.66 1213.81 L1614.07 1213.81 L1613.49 1213.81 L1612.9 1213.81 L1612.31 1213.81 L1611.73 1213.81 L1611.14 1213.81 L1610.55 1213.81 L1609.97 1213.81 L1609.38 1213.81 L1608.8 1213.81 L1608.21 1213.81 L1607.62 1213.81 L1607.04 1213.81 L1606.45 1213.81 L1605.86 1213.81 L1605.28 1213.81 L1604.69 1213.81 L1604.1 1213.81 L1603.52 1213.81 L1602.93 1213.81 L1602.34 1213.81 L1601.76 1213.81 L1601.17 1213.81 L1600.59 1213.81 L1600 1213.81 L1599.41 1213.81 L1598.83 1213.81 L1598.24 1213.81 L1597.65 1213.81 L1597.07 1213.81 L1596.48 1213.81 L1595.89 1213.81 L1595.31 1213.81 L1594.72 1213.81 L1594.14 1213.81 L1593.55 1213.81 L1592.96 1213.81 L1592.38 1213.81 L1591.79 1213.81 L1591.2 1213.81 L1590.62 1213.81 L1590.03 1213.81 L1589.44 1213.81 L1588.86 1213.81 L1588.27 1213.81 L1587.68 1213.81 L1587.1 1213.81 L1586.51 1213.81 L1585.93 1213.81 L1585.34 1213.81 L1584.75 1213.81 L1584.17 1213.81 L1583.58 1213.81 L1582.99 1213.81 L1582.41 1213.81 L1581.82 1213.81 L1581.23 1213.81 L1580.65 1213.81 L1580.06 1213.81 L1579.47 1213.81 L1578.89 1213.81 L1578.3 1213.81 L1577.72 1213.81 L1577.13 1213.81 L1576.54 1213.81 L1575.96 1213.81 L1575.37 1213.81 L1574.78 1213.81 L1574.2 1213.81 L1573.61 1213.81 L1573.02 1213.81 L1572.44 1213.81 L1571.85 1213.81 L1571.27 1213.81 L1570.68 1213.81 L1570.09 1213.81 L1569.51 1213.81 L1568.92 1213.81 L1568.33 1213.81 L1567.75 1213.81 L1567.16 1213.81 L1566.57 1213.81 L1565.99 1213.81 L1565.4 1213.81 L1564.81 1213.81 L1564.23 1213.81 L1563.64 1213.81 L1563.06 1213.81 L1562.47 1213.81 L1561.88 1213.81 L1561.3 1213.81 L1560.71 1213.81 L1560.12 1213.81 L1559.54 1213.81 L1558.95 1213.81 L1558.36 1213.81 L1557.78 1213.81 L1557.19 1213.81 L1556.6 1213.81 L1556.02 1213.81 L1555.43 1213.81 L1554.85 1213.81 L1554.26 1213.81 L1553.67 1213.81 L1553.09 1213.81 L1552.5 1213.81 L1551.91 1213.81 L1551.33 1213.81 L1550.74 1213.81 L1550.15 1213.81 L1549.57 1213.81 L1548.98 1213.81 L1548.4 1213.81 L1547.81 1213.81 L1547.22 1213.81 L1546.64 1213.81 L1546.05 1213.81 L1545.46 1213.81 L1544.88 1213.81 L1544.29 1213.81 L1543.7 1213.81 L1543.12 1213.81 L1542.53 1213.81 L1541.94 1213.81 L1541.36 1213.81 L1540.77 1213.81 L1540.19 1213.81 L1539.6 1213.81 L1539.01 1213.81 L1538.43 1213.81 L1537.84 1213.81 L1537.25 1213.81 L1536.67 1213.81 L1536.08 1213.81 L1535.49 1213.81 L1534.91 1213.81 L1534.32 1213.81 L1533.73 1213.81 L1533.15 1213.81 L1532.56 1213.81 L1531.98 1213.81 L1531.39 1213.81 L1530.8 1213.81 L1530.22 1213.81 L1529.63 1213.81 L1529.04 1213.81 L1528.46 1213.81 L1527.87 1213.81 L1527.28 1213.81 L1526.7 1213.81 L1526.11 1213.81 L1525.52 1213.81 L1524.94 1213.81 L1524.35 1213.81 L1523.77 1213.81 L1523.18 1213.81 L1522.59 1213.81 L1522.01 1213.81 L1521.42 1213.81 L1520.83 1213.81 L1520.25 1213.81 L1519.66 1213.81 L1519.07 1213.81 L1518.49 1213.81 L1517.9 1213.81 L1517.32 1213.81 L1516.73 1213.81 L1516.14 1213.81 L1515.56 1213.81 L1514.97 1213.81 L1514.38 1213.81 L1513.8 1213.81 L1513.21 1213.81 L1512.62 1213.81 L1512.04 1213.81 L1511.45 1213.81 L1510.86 1213.81 L1510.28 1213.81 L1509.69 1213.81 L1509.11 1213.81 L1508.52 1213.81 L1507.93 1213.81 L1507.35 1213.81 L1506.76 1213.81 L1506.17 1213.81 L1505.59 1213.81 L1505 1213.81 L1504.41 1213.81 L1503.83 1213.81 L1503.24 1213.81 L1502.65 1213.81 L1502.07 1213.81 L1501.48 1213.81 L1500.9 1213.81 L1500.31 1213.81 L1499.72 1213.81 L1499.14 1213.81 L1498.55 1213.81 L1497.96 1213.81 L1497.38 1213.81 L1496.79 1213.81 L1496.2 1213.81 L1495.62 1213.81 L1495.03 1213.81 L1494.45 1213.81 L1493.86 1213.81 L1493.27 1213.81 L1492.69 1213.81 L1492.1 1213.81 L1491.51 1213.81 L1490.93 1213.81 L1490.34 1213.81 L1489.75 1213.81 L1489.17 1213.81 L1488.58 1213.81 L1487.99 1213.81 L1487.41 1213.81 L1486.82 1213.81 L1486.24 1213.81 L1485.65 1213.81 L1485.06 1213.81 L1484.48 1213.81 L1483.89 1213.81 L1483.3 1213.81 L1482.72 1213.81 L1482.13 1213.81 L1481.54 1213.81 L1480.96 1213.81 L1480.37 1213.81 L1479.78 1213.81 L1479.2 1213.81 L1478.61 1213.81 L1478.03 1213.81 L1477.44 1213.81 L1476.85 1213.81 L1476.27 1213.81 L1475.68 1213.81 L1475.09 1213.81 L1474.51 1213.81 L1473.92 1213.81 L1473.33 1213.81 L1472.75 1213.81 L1472.16 1213.81 L1471.57 1213.81 L1470.99 1213.81 L1470.4 1213.81 L1469.82 1213.81 L1469.23 1213.81 L1468.64 1213.81 L1468.06 1213.81 L1467.47 1213.81 L1466.88 1213.81 L1466.3 1213.81 L1465.71 1213.81 L1465.12 1213.81 L1464.54 1213.81 L1463.95 1213.81 L1463.37 1213.81 L1462.78 1213.81 L1462.19 1213.81 L1461.61 1213.81 L1461.02 1213.81 L1460.43 1213.81 L1459.85 1213.81 L1459.26 1213.81 L1458.67 1213.81 L1458.09 1213.81 L1457.5 1213.81 L1456.91 1213.81 L1456.33 1213.81 L1455.74 1213.81 L1455.16 1213.81 L1454.57 1213.81 L1453.98 1213.81 L1453.4 1213.81 L1452.81 1213.81 L1452.22 1213.81 L1451.64 1213.81 L1451.05 1213.81 L1450.46 1213.81 L1449.88 1213.81 L1449.29 1213.81 L1448.7 1213.81 L1448.12 1213.81 L1447.53 1213.81 L1446.95 1213.81 L1446.36 1213.81 L1445.77 1213.81 L1445.19 1213.81 L1444.6 1213.81 L1444.01 1213.81 L1443.43 1213.81 L1442.84 1213.81 L1442.25 1213.81 L1441.67 1213.81 L1441.08 1213.81 L1440.5 1213.81 L1439.91 1213.81 L1439.32 1213.81 L1438.74 1213.81 L1438.15 1213.81 L1437.56 1213.81 L1436.98 1213.81 L1436.39 1213.81 L1435.8 1213.81 L1435.22 1213.81 L1434.63 1213.81 L1434.04 1213.81 L1433.46 1213.81 L1432.87 1213.81 L1432.29 1213.81 L1431.7 1213.81 L1431.11 1213.81 L1430.53 1213.81 L1429.94 1213.81 L1429.35 1213.81 L1428.77 1213.81 L1428.18 1213.81 L1427.59 1213.81 L1427.01 1213.81 L1426.42 1213.81 L1425.83 1213.81 L1425.25 1213.81 L1424.66 1213.81 L1424.08 1213.81 L1423.49 1213.81 L1422.9 1213.81 L1422.32 1213.81 L1421.73 1213.81 L1421.14 1213.81 L1420.56 1213.81 L1419.97 1213.81 L1419.38 1213.81 L1418.8 1213.81 L1418.21 1213.81 L1417.63 1213.81 L1417.04 1213.81 L1416.45 1213.81 L1415.87 1213.81 L1415.28 1213.81 L1414.69 1213.81 L1414.11 1213.81 L1413.52 1213.81 L1412.93 1213.81 L1412.35 1213.81 L1411.76 1213.81 L1411.17 1213.81 L1410.59 1213.81 L1410 1213.81 L1409.42 1213.81 L1408.83 1213.81 L1408.24 1213.81 L1407.66 1213.81 L1407.07 1213.81 L1406.48 1213.81 L1405.9 1213.81 L1405.31 1213.81 L1404.72 1213.81 L1404.14 1213.81 L1403.55 1213.81 L1402.96 1213.81 L1402.38 1213.81 L1401.79 1213.81 L1401.21 1213.81 L1400.62 1213.81 L1400.03 1213.81 L1399.45 1213.81 L1398.86 1213.81 L1398.27 1213.81 L1397.69 1213.81 L1397.1 1213.81 L1396.51 1213.81 L1395.93 1213.81 L1395.34 1213.81 L1394.75 1213.81 L1394.17 1213.81 L1393.58 1213.81 L1393 1213.81 L1392.41 1213.81 L1391.82 1213.81 L1391.24 1213.81 L1390.65 1213.81 L1390.06 1213.81 L1389.48 1213.81 L1388.89 1213.81 L1388.3 1213.81 L1387.72 1213.81 L1387.13 1213.81 L1386.55 1213.81 L1385.96 1213.81 L1385.37 1213.81 L1384.79 1213.81 L1384.2 1213.81 L1383.61 1213.81 L1383.03 1213.81 L1382.44 1213.81 L1381.85 1213.81 L1381.27 1213.81 L1380.68 1213.81 L1380.09 1213.81 L1379.51 1213.81 L1378.92 1213.81 L1378.34 1213.81 L1377.75 1213.81 L1377.16 1213.81 L1376.58 1213.81 L1375.99 1213.81 L1375.4 1213.81 L1374.82 1213.81 L1374.23 1213.81 L1373.64 1213.81 L1373.06 1213.81 L1372.47 1213.81 L1371.88 1213.81 L1371.3 1213.81 L1370.71 1213.81 L1370.13 1213.81 L1369.54 1213.81 L1368.95 1213.81 L1368.37 1213.81 L1367.78 1213.81 L1367.19 1213.81 L1366.61 1213.81 L1366.02 1213.81 L1365.43 1213.81 L1364.85 1213.81 L1364.26 1213.81 L1363.68 1213.81 L1363.09 1213.81 L1362.5 1213.81 L1361.92 1213.81 L1361.33 1213.81 L1360.74 1213.81 L1360.16 1213.81 L1359.57 1213.81 L1358.98 1213.81 L1358.4 1213.81 L1357.81 1213.81 L1357.22 1213.81 L1356.64 1213.81 L1356.05 1213.81 L1355.47 1213.81 L1354.88 1213.81 L1354.29 1213.81 L1353.71 1213.81 L1353.12 1213.81 L1352.53 1213.81 L1351.95 1213.81 L1351.36 1213.81 L1350.77 1213.81 L1350.19 1213.81 L1349.6 1213.81 L1349.01 1213.81 L1348.43 1213.81 L1347.84 1213.81 L1347.26 1213.81 L1346.67 1213.81 L1346.08 1213.81 L1345.5 1213.81 L1344.91 1213.81 L1344.32 1213.81 L1343.74 1213.81 L1343.15 1213.81 L1342.56 1213.81 L1341.98 1213.81 L1341.39 1213.81 L1340.8 1213.81 L1340.22 1213.81 L1339.63 1213.81 L1339.05 1213.81 L1338.46 1213.81 L1337.87 1213.81 L1337.29 1213.81 L1336.7 1213.81 L1336.11 1213.81 L1335.53 1213.81 L1334.94 1213.81 L1334.35 1213.81 L1333.77 1213.81 L1333.18 1213.81 L1332.6 1213.81 L1332.01 1213.81 L1331.42 1213.81 L1330.84 1213.81 L1330.25 1213.81 L1329.66 1213.81 L1329.08 1213.81 L1328.49 1213.81 L1327.9 1213.81 L1327.32 1213.81 L1326.73 1213.81 L1326.14 1213.81 L1325.56 1213.81 L1324.97 1213.81 L1324.39 1213.81 L1323.8 1213.81 L1323.21 1213.81 L1322.63 1213.81 L1322.04 1213.81 L1321.45 1213.81 L1320.87 1213.81 L1320.28 1213.81 L1319.69 1213.81 L1319.11 1213.81 L1318.52 1213.81 L1317.93 1213.81 L1317.35 1213.81 L1316.76 1213.81 L1316.18 1213.81 L1315.59 1213.81 L1315 1213.81 L1314.42 1213.81 L1313.83 1213.81 L1313.24 1213.81 L1312.66 1213.81 L1312.07 1213.81 L1311.48 1213.81 L1310.9 1213.81 L1310.31 1213.81 L1309.73 1213.81 L1309.14 1213.81 L1308.55 1213.81 L1307.97 1213.81 L1307.38 1213.81 L1306.79 1213.81 L1306.21 1213.81 L1305.62 1213.81 L1305.03 1213.81 L1304.45 1213.81 L1303.86 1213.81 L1303.27 1213.81 L1302.69 1213.81 L1302.1 1213.81 L1301.52 1213.81 L1300.93 1213.81 L1300.34 1213.81 L1299.76 1213.81 L1299.17 1213.81 L1298.58 1213.81 L1298 1213.81 L1297.41 1213.81 L1296.82 1213.81 L1296.24 1213.81 L1295.65 1213.81 L1295.06 1213.81 L1294.48 1213.81 L1293.89 1213.81 L1293.31 1213.81 L1292.72 1213.81 L1292.13 1213.81 L1291.55 1213.81 L1290.96 1213.81 L1290.37 1213.81 L1289.79 1213.81 L1289.2 1213.81 L1288.61 1213.81 L1288.03 1213.81 L1287.44 1213.81 L1286.86 1213.81 L1286.27 1213.81 L1285.68 1213.81 L1285.1 1213.81 L1284.51 1213.81 L1283.92 1213.81 L1283.34 1213.81 L1282.75 1213.81 L1282.16 1213.81 L1281.58 1213.81 L1280.99 1213.81 L1280.4 1213.81 L1279.82 1213.81 L1279.23 1213.81 L1278.65 1213.81 L1278.06 1213.81 L1277.47 1213.81 L1276.89 1213.81 L1276.3 1213.81 L1275.71 1213.81 L1275.13 1213.81 L1274.54 1213.81 L1273.95 1213.81 L1273.37 1213.81 L1272.78 1213.81 L1272.19 1213.81 L1271.61 1213.81 L1271.02 1213.81 L1270.44 1213.81 L1269.85 1213.81 L1269.26 1213.81 L1268.68 1213.81 L1268.09 1213.81 L1267.5 1213.81 L1266.92 1213.81 L1266.33 1213.81 L1265.74 1213.81 L1265.16 1213.81 L1264.57 1213.81 L1263.98 1213.81 L1263.4 1213.81 L1262.81 1213.81 L1262.23 1213.81 L1261.64 1213.81 L1261.05 1213.81 L1260.47 1213.81 L1259.88 1213.81 L1259.29 1213.81 L1258.71 1213.81 L1258.12 1213.81 L1257.53 1213.81 L1256.95 1213.81 L1256.36 1213.81 L1255.78 1213.81 L1255.19 1213.81 L1254.6 1213.81 L1254.02 1213.81 L1253.43 1213.81 L1252.84 1213.81 L1252.26 1213.81 L1251.67 1213.81 L1251.08 1213.81 L1250.5 1213.81 L1249.91 1213.81 L1249.32 1213.81 L1248.74 1213.81 L1248.15 1213.81 L1247.57 1213.81 L1246.98 1213.81 L1246.39 1213.81 L1245.81 1213.81 L1245.22 1213.81 L1244.63 1213.81 L1244.05 1213.81 L1243.46 1213.81 L1242.87 1213.81 L1242.29 1213.81 L1241.7 1213.81 L1241.11 1213.81 L1240.53 1213.81 L1239.94 1213.81 L1239.36 1213.81 L1238.77 1213.81 L1238.18 1213.81 L1237.6 1213.81 L1237.01 1213.81 L1236.42 1213.81 L1235.84 1213.81 L1235.25 1213.81 L1234.66 1213.81 L1234.08 1213.81 L1233.49 1213.81 L1232.91 1213.81 L1232.32 1213.81 L1231.73 1213.81 L1231.15 1213.81 L1230.56 1213.81 L1229.97 1213.81 L1229.39 1213.81 L1228.8 1213.81 L1228.21 1213.81 L1227.63 1213.81 L1227.04 1213.81 L1226.45 1213.81 L1225.87 1213.81 L1225.28 1213.81 L1224.7 1213.81 L1224.11 1213.81 L1223.52 1213.81 L1222.94 1213.81 L1222.35 1213.81 L1221.76 1213.81 L1221.18 1213.81 L1220.59 1213.81 L1220 1213.81 L1219.42 1213.81 L1218.83 1213.81 L1218.24 1213.81 L1217.66 1213.81 L1217.07 1213.81 L1216.49 1213.81 L1215.9 1213.81 L1215.31 1213.81 L1214.73 1213.81 L1214.14 1213.81 L1213.55 1213.81 L1212.97 1213.81 L1212.38 1213.81 L1211.79 1213.81 L1211.21 1213.81 L1210.62 1213.81 L1210.03 1213.81 L1209.45 1213.81 L1208.86 1213.81 L1208.28 1213.81 L1207.69 1213.81 L1207.1 1213.81 L1206.52 1213.81 L1205.93 1213.81 L1205.34 1213.81 L1204.76 1213.81 L1204.17 1213.81 L1203.58 1213.81 L1203 1213.81 L1202.41 1213.81 L1201.83 1213.81 L1201.24 1213.81 L1200.65 1213.81 L1200.07 1213.81 L1199.48 1213.81 L1198.89 1213.81 L1198.31 1213.81 L1197.72 1213.81 L1197.13 1213.81 L1196.55 1213.81 L1195.96 1213.81 L1195.37 1213.81 L1194.79 1213.81 L1194.2 1213.81 L1193.62 1213.81 L1193.03 1213.81 L1192.44 1213.81 L1191.86 1213.81 L1191.27 1213.81 L1190.68 1213.81 L1190.1 1213.81 L1189.51 1213.81 L1188.92 1213.81 L1188.34 1213.81 L1187.75 1213.81 L1187.16 1213.81 L1186.58 1213.81 L1185.99 1213.81 L1185.41 1213.81 L1184.82 1213.81 L1184.23 1213.81 L1183.65 1213.81 L1183.06 1213.81 L1182.47 1213.81 L1181.89 1213.81 L1181.3 1213.81 L1180.71 1213.81 L1180.13 1213.81 L1179.54 1213.81 L1178.96 1213.81 L1178.37 1213.81 L1177.78 1213.81 L1177.2 1213.81 L1176.61 1213.81 L1176.02 1213.81 L1175.44 1213.81 L1174.85 1213.81 L1174.26 1213.81 L1173.68 1213.81 L1173.09 1213.81 L1172.5 1213.81 L1171.92 1213.81 L1171.33 1213.81 L1170.75 1213.81 L1170.16 1213.81 L1169.57 1213.81 L1168.99 1213.81 L1168.4 1213.81 L1167.81 1213.81 L1167.23 1213.81 L1166.64 1213.81 L1166.05 1213.81 L1165.47 1213.81 L1164.88 1213.81 L1164.29 1213.81 L1163.71 1213.81 L1163.12 1213.81 L1162.54 1213.81 L1161.95 1213.81 L1161.36 1213.81 L1160.78 1213.81 L1160.19 1213.81 L1159.6 1213.81 L1159.02 1213.81 L1158.43 1213.81 L1157.84 1213.81 L1157.26 1213.81 L1156.67 1213.81 L1156.09 1213.81 L1155.5 1213.81 L1154.91 1213.81 L1154.33 1213.81 L1153.74 1213.81 L1153.15 1213.81 L1152.57 1213.81 L1151.98 1213.81 L1151.39 1213.81 L1150.81 1213.81 L1150.22 1213.81 L1149.63 1213.81 L1149.05 1213.81 L1148.46 1213.81 L1147.88 1213.81 L1147.29 1213.81 L1146.7 1213.81 L1146.12 1213.81 L1145.53 1213.81 L1144.94 1213.81 L1144.36 1213.81 L1143.77 1213.81 L1143.18 1213.81 L1142.6 1213.81 L1142.01 1213.81 L1141.42 1213.81 L1140.84 1213.81 L1140.25 1213.81 L1139.67 1213.81 L1139.08 1213.81 L1138.49 1213.81 L1137.91 1213.81 L1137.32 1213.81 L1136.73 1213.81 L1136.15 1213.81 L1135.56 1213.81 L1134.97 1213.81 L1134.39 1213.81 L1133.8 1213.81 L1133.21 1213.81 L1132.63 1213.81 L1132.04 1213.81 L1131.46 1213.81 L1130.87 1213.81 L1130.28 1213.81 L1129.7 1213.81 L1129.11 1213.81 L1128.52 1213.81 L1127.94 1213.81 L1127.35 1213.81 L1126.76 1213.81 L1126.18 1213.81 L1125.59 1213.81 L1125.01 1213.81 L1124.42 1213.81 L1123.83 1213.81 L1123.25 1213.81 L1122.66 1213.81 L1122.07 1213.81 L1121.49 1213.81 L1120.9 1213.81 L1120.31 1213.81 L1119.73 1213.81 L1119.14 1213.81 L1118.55 1213.81 L1117.97 1213.81 L1117.38 1213.81 L1116.8 1213.81 L1116.21 1213.81 L1115.62 1213.81 L1115.04 1213.81 L1114.45 1213.81 L1113.86 1213.81 L1113.28 1213.81 L1112.69 1213.81 L1112.1 1213.81 L1111.52 1213.81 L1110.93 1213.81 L1110.34 1213.81 L1109.76 1213.81 L1109.17 1213.81 L1108.59 1213.81 L1108 1213.81 L1107.41 1213.81 L1106.83 1213.81 L1106.24 1213.81 L1105.65 1213.81 L1105.07 1213.81 L1104.48 1213.81 L1103.89 1213.81 L1103.31 1213.81 L1102.72 1213.81 L1102.14 1213.81 L1101.55 1213.81 L1100.96 1213.81 L1100.38 1213.81 L1099.79 1213.81 L1099.2 1213.81 L1098.62 1213.81 L1098.03 1213.81 L1097.44 1213.81 L1096.86 1213.81 L1096.27 1213.81 L1095.68 1213.81 L1095.1 1213.81 L1094.51 1213.81 L1093.93 1213.81 L1093.34 1213.81 L1092.75 1213.81 L1092.17 1213.81 L1091.58 1213.81 L1090.99 1213.81 L1090.41 1213.81 L1089.82 1213.81 L1089.23 1213.81 L1088.65 1213.81 L1088.06 1213.81 L1087.47 1213.81 L1086.89 1213.81 L1086.3 1213.81 L1085.72 1213.81 L1085.13 1213.81 L1084.54 1213.81 L1083.96 1213.81 L1083.37 1213.81 L1082.78 1213.81 L1082.2 1213.81 L1081.61 1213.81 L1081.02 1213.81 L1080.44 1213.81 L1079.85 1213.81 L1079.26 1213.81 L1078.68 1213.81 L1078.09 1213.81 L1077.51 1213.81 L1076.92 1213.81 L1076.33 1213.81 L1075.75 1213.81 L1075.16 1213.81 L1074.57 1213.81 L1073.99 1213.81 L1073.4 1213.81 L1072.81 1213.81 L1072.23 1213.81 L1071.64 1213.81 L1071.06 1213.81 L1070.47 1213.81 L1069.88 1213.81 L1069.3 1213.81 L1068.71 1213.81 L1068.12 1213.81 L1067.54 1213.81 L1066.95 1213.81 L1066.36 1213.81 L1065.78 1213.81 L1065.19 1213.81 L1064.6 1213.81 L1064.02 1213.81 L1063.43 1213.81 L1062.85 1213.81 L1062.26 1213.81 L1061.67 1213.81 L1061.09 1213.81 L1060.5 1213.81 L1059.91 1213.81 L1059.33 1213.81 L1058.74 1213.81 L1058.15 1213.81 L1057.57 1213.81 L1056.98 1213.81 L1056.39 1213.81 L1055.81 1213.81 L1055.22 1213.81 L1054.64 1213.81 L1054.05 1213.81 L1053.46 1213.81 L1052.88 1213.81 L1052.29 1213.81 L1051.7 1213.81 L1051.12 1213.81 L1050.53 1213.81 L1049.94 1213.81 L1049.36 1213.81 L1048.77 1213.81 L1048.19 1213.81 L1047.6 1213.81 L1047.01 1213.81 L1046.43 1213.81 L1045.84 1213.81 L1045.25 1213.81 L1044.67 1213.81 L1044.08 1213.81 L1043.49 1213.81 L1042.91 1213.81 L1042.32 1213.81 L1041.73 1213.81 L1041.15 1213.81 L1040.56 1213.81 L1039.98 1213.81 L1039.39 1213.81 L1038.8 1213.81 L1038.22 1213.81 L1037.63 1213.81 L1037.04 1213.81 L1036.46 1213.81 L1035.87 1213.81 L1035.28 1213.81 L1034.7 1213.81 L1034.11 1213.81 L1033.52 1213.81 L1032.94 1213.81 L1032.35 1213.81 L1031.77 1213.81 L1031.18 1213.81 L1030.59 1213.81 L1030.01 1213.81 L1029.42 1213.81 L1028.83 1213.81 L1028.25 1213.81 L1027.66 1213.81 L1027.07 1213.81 L1026.49 1213.81 L1025.9 1213.81 L1025.32 1213.81 L1024.73 1213.81 L1024.14 1213.81 L1023.56 1213.81 L1022.97 1213.81 L1022.38 1213.81 L1021.8 1213.81 L1021.21 1213.81 L1020.62 1213.81 L1020.04 1213.81 L1019.45 1213.81 L1018.86 1213.81 L1018.28 1213.81 L1017.69 1213.81 L1017.11 1213.81 L1016.52 1213.81 L1015.93 1213.81 L1015.35 1213.81 L1014.76 1213.81 L1014.17 1213.81 L1013.59 1213.81 L1013 1213.81 L1012.41 1213.81 L1011.83 1213.81 L1011.24 1213.81 L1010.65 1213.81 L1010.07 1213.81 L1009.48 1213.81 L1008.9 1213.81 L1008.31 1213.81 L1007.72 1213.81 L1007.14 1213.81 L1006.55 1213.81 L1005.96 1213.81 L1005.38 1213.81 L1004.79 1213.81 L1004.2 1213.81 L1003.62 1213.81 L1003.03 1213.81 L1002.44 1213.81 L1001.86 1213.81 L1001.27 1213.81 L1000.69 1213.81 L1000.1 1213.81 L999.513 1213.81 L998.926 1213.81 L998.34 1213.81 L997.754 1213.81 L997.167 1213.81 L996.581 1213.81 L995.994 1213.81 L995.408 1213.81 L994.822 1213.81 L994.235 1213.81 L993.649 1213.81 L993.062 1213.81 L992.476 1213.81 L991.889 1213.81 L991.303 1213.81 L990.717 1213.81 L990.13 1213.81 L989.544 1213.81 L988.957 1213.81 L988.371 1213.81 L987.785 1213.81 L987.198 1213.81 L986.612 1213.81 L986.025 1213.81  Z\" fill=\"#3da44d\" fill-rule=\"evenodd\" fill-opacity=\"0.5\"/>\n<polyline clip-path=\"url(#clip022)\" style=\"stroke:#3da44d; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"986.025,1213.87 986.612,1213.87 987.198,1213.87 987.785,1213.87 988.371,1213.87 988.957,1213.87 989.544,1213.87 990.13,1213.87 990.717,1213.87 991.303,1213.87 991.889,1213.87 992.476,1213.87 993.062,1213.87 993.649,1213.87 994.235,1213.87 994.822,1213.87 995.408,1213.87 995.994,1213.87 996.581,1213.87 997.167,1213.87 997.754,1213.87 998.34,1213.87 998.926,1213.87 999.513,1213.87 1000.1,1213.87 1000.69,1213.87 1001.27,1213.87 1001.86,1213.87 1002.44,1213.87 1003.03,1213.87 1003.62,1213.87 1004.2,1213.87 1004.79,1213.87 1005.38,1213.87 1005.96,1213.87 1006.55,1213.87 1007.14,1213.87 1007.72,1213.87 1008.31,1213.87 1008.9,1213.87 1009.48,1213.87 1010.07,1213.87 1010.65,1213.87 1011.24,1213.87 1011.83,1213.87 1012.41,1213.87 1013,1213.87 1013.59,1213.87 1014.17,1213.87 1014.76,1213.87 1015.35,1213.87 1015.93,1213.87 1016.52,1213.87 1017.11,1213.87 1017.69,1213.87 1018.28,1213.87 1018.86,1213.87 1019.45,1213.87 1020.04,1213.87 1020.62,1213.87 1021.21,1213.87 1021.8,1213.87 1022.38,1213.87 1022.97,1213.87 1023.56,1213.87 1024.14,1213.87 1024.73,1213.87 1025.32,1213.87 1025.9,1213.87 1026.49,1213.87 1027.07,1213.87 1027.66,1213.87 1028.25,1213.87 1028.83,1213.87 1029.42,1213.87 1030.01,1213.87 1030.59,1213.87 1031.18,1213.87 1031.77,1213.87 1032.35,1213.87 1032.94,1213.87 1033.52,1213.87 1034.11,1213.87 1034.7,1213.87 1035.28,1213.87 1035.87,1213.87 1036.46,1213.87 1037.04,1213.87 1037.63,1213.87 1038.22,1213.87 1038.8,1213.87 1039.39,1213.87 1039.98,1213.87 1040.56,1213.87 1041.15,1213.87 1041.73,1213.87 1042.32,1213.87 1042.91,1213.87 1043.49,1213.87 1044.08,1213.87 1044.67,1213.87 1045.25,1213.87 1045.84,1213.87 1046.43,1213.87 1047.01,1213.87 1047.6,1213.87 1048.19,1213.87 1048.77,1213.87 1049.36,1213.87 1049.94,1213.87 1050.53,1213.87 1051.12,1213.87 1051.7,1213.87 1052.29,1213.87 1052.88,1213.87 1053.46,1213.87 1054.05,1213.87 1054.64,1213.87 1055.22,1213.87 1055.81,1213.87 1056.39,1213.87 1056.98,1213.87 1057.57,1213.87 1058.15,1213.87 1058.74,1213.87 1059.33,1213.87 1059.91,1213.87 1060.5,1213.87 1061.09,1213.87 1061.67,1213.87 1062.26,1213.87 1062.85,1213.87 1063.43,1213.87 1064.02,1213.87 1064.6,1213.87 1065.19,1213.87 1065.78,1213.87 1066.36,1213.87 1066.95,1213.87 1067.54,1213.87 1068.12,1213.87 1068.71,1213.87 1069.3,1213.87 1069.88,1213.87 1070.47,1213.87 1071.06,1213.87 1071.64,1213.87 1072.23,1213.87 1072.81,1213.87 1073.4,1213.87 1073.99,1213.87 1074.57,1213.87 1075.16,1213.87 1075.75,1213.87 1076.33,1213.87 1076.92,1213.87 1077.51,1213.87 1078.09,1213.87 1078.68,1213.87 1079.26,1213.87 1079.85,1213.87 1080.44,1213.87 1081.02,1213.87 1081.61,1213.87 1082.2,1213.87 1082.78,1213.87 1083.37,1213.87 1083.96,1213.87 1084.54,1213.87 1085.13,1213.87 1085.72,1213.87 1086.3,1213.87 1086.89,1213.87 1087.47,1213.87 1088.06,1213.87 1088.65,1213.87 1089.23,1213.87 1089.82,1213.87 1090.41,1213.87 1090.99,1213.87 1091.58,1213.87 1092.17,1213.87 1092.75,1213.87 1093.34,1213.87 1093.93,1213.87 1094.51,1213.87 1095.1,1213.87 1095.68,1213.87 1096.27,1213.87 1096.86,1213.87 1097.44,1213.87 1098.03,1213.87 1098.62,1213.87 1099.2,1213.87 1099.79,1213.87 1100.38,1213.87 1100.96,1213.87 1101.55,1213.87 1102.14,1213.87 1102.72,1213.87 1103.31,1213.87 1103.89,1213.87 1104.48,1213.87 1105.07,1213.87 1105.65,1213.87 1106.24,1213.87 1106.83,1213.87 1107.41,1213.87 1108,1213.87 1108.59,1213.87 1109.17,1213.87 1109.76,1213.87 1110.34,1213.87 1110.93,1213.87 1111.52,1213.87 1112.1,1213.87 1112.69,1213.87 1113.28,1213.87 1113.86,1213.87 1114.45,1213.87 1115.04,1213.87 1115.62,1213.87 1116.21,1213.87 1116.8,1213.87 1117.38,1213.87 1117.97,1213.87 1118.55,1213.87 1119.14,1213.87 1119.73,1213.87 1120.31,1213.87 1120.9,1213.87 1121.49,1213.87 1122.07,1213.87 1122.66,1213.87 1123.25,1213.87 1123.83,1213.87 1124.42,1213.87 1125.01,1213.87 1125.59,1213.87 1126.18,1213.87 1126.76,1213.87 1127.35,1213.87 1127.94,1213.87 1128.52,1213.87 1129.11,1213.87 1129.7,1213.87 1130.28,1213.87 1130.87,1213.87 1131.46,1213.87 1132.04,1213.87 1132.63,1213.87 1133.21,1213.87 1133.8,1213.87 1134.39,1213.87 1134.97,1213.87 1135.56,1213.87 1136.15,1213.87 1136.73,1213.87 1137.32,1213.87 1137.91,1213.87 1138.49,1213.87 1139.08,1213.87 1139.67,1213.87 1140.25,1213.87 1140.84,1213.87 1141.42,1213.87 1142.01,1213.87 1142.6,1213.87 1143.18,1213.87 1143.77,1213.87 1144.36,1213.87 1144.94,1213.87 1145.53,1213.87 1146.12,1213.87 1146.7,1213.87 1147.29,1213.87 1147.88,1213.87 1148.46,1213.87 1149.05,1213.87 1149.63,1213.87 1150.22,1213.87 1150.81,1213.87 1151.39,1213.87 1151.98,1213.87 1152.57,1213.87 1153.15,1213.87 1153.74,1213.87 1154.33,1213.87 1154.91,1213.87 1155.5,1213.87 1156.09,1213.87 1156.67,1213.87 1157.26,1213.87 1157.84,1213.87 1158.43,1213.87 1159.02,1213.87 1159.6,1213.87 1160.19,1213.87 1160.78,1213.87 1161.36,1213.87 1161.95,1213.87 1162.54,1213.87 1163.12,1213.87 1163.71,1213.87 1164.29,1213.87 1164.88,1213.87 1165.47,1213.87 1166.05,1213.87 1166.64,1213.87 1167.23,1213.87 1167.81,1213.87 1168.4,1213.87 1168.99,1213.87 1169.57,1213.87 1170.16,1213.87 1170.75,1213.87 1171.33,1213.87 1171.92,1213.87 1172.5,1213.87 1173.09,1213.87 1173.68,1213.87 1174.26,1213.87 1174.85,1213.87 1175.44,1213.87 1176.02,1213.87 1176.61,1213.87 1177.2,1213.87 1177.78,1213.87 1178.37,1213.87 1178.96,1213.87 1179.54,1213.87 1180.13,1213.87 1180.71,1213.87 1181.3,1213.87 1181.89,1213.87 1182.47,1213.87 1183.06,1213.87 1183.65,1213.87 1184.23,1213.87 1184.82,1213.87 1185.41,1213.87 1185.99,1213.87 1186.58,1213.87 1187.16,1213.87 1187.75,1213.87 1188.34,1213.87 1188.92,1213.87 1189.51,1213.87 1190.1,1213.87 1190.68,1213.87 1191.27,1213.87 1191.86,1213.87 1192.44,1213.87 1193.03,1213.87 1193.62,1213.87 1194.2,1213.87 1194.79,1213.87 1195.37,1213.87 1195.96,1213.87 1196.55,1213.87 1197.13,1213.87 1197.72,1213.87 1198.31,1213.87 1198.89,1213.87 1199.48,1213.87 1200.07,1213.87 1200.65,1213.87 1201.24,1213.87 1201.83,1213.87 1202.41,1213.87 1203,1213.87 1203.58,1213.87 1204.17,1213.87 1204.76,1213.87 1205.34,1213.87 1205.93,1213.87 1206.52,1213.87 1207.1,1213.87 1207.69,1213.87 1208.28,1213.87 1208.86,1213.87 1209.45,1213.87 1210.03,1213.87 1210.62,1213.87 1211.21,1213.87 1211.79,1213.87 1212.38,1213.87 1212.97,1213.87 1213.55,1213.87 1214.14,1213.87 1214.73,1213.87 1215.31,1213.87 1215.9,1213.87 1216.49,1213.87 1217.07,1213.87 1217.66,1213.87 1218.24,1213.87 1218.83,1213.87 1219.42,1213.87 1220,1213.87 1220.59,1213.87 1221.18,1213.87 1221.76,1213.87 1222.35,1213.87 1222.94,1213.87 1223.52,1213.87 1224.11,1213.87 1224.7,1213.87 1225.28,1213.87 1225.87,1213.87 1226.45,1213.87 1227.04,1213.87 1227.63,1213.87 1228.21,1213.87 1228.8,1213.87 1229.39,1213.87 1229.97,1213.87 1230.56,1213.87 1231.15,1213.87 1231.73,1213.87 1232.32,1213.87 1232.91,1213.87 1233.49,1213.87 1234.08,1213.87 1234.66,1213.87 1235.25,1213.87 1235.84,1213.87 1236.42,1213.87 1237.01,1213.87 1237.6,1213.87 1238.18,1213.87 1238.77,1213.87 1239.36,1213.87 1239.94,1213.87 1240.53,1213.87 1241.11,1213.87 1241.7,1213.87 1242.29,1213.87 1242.87,1213.87 1243.46,1213.87 1244.05,1213.87 1244.63,1213.87 1245.22,1213.87 1245.81,1213.87 1246.39,1213.87 1246.98,1213.87 1247.57,1213.87 1248.15,1213.87 1248.74,1213.87 1249.32,1213.87 1249.91,1213.87 1250.5,1213.87 1251.08,1213.87 1251.67,1213.87 1252.26,1213.87 1252.84,1213.87 1253.43,1213.87 1254.02,1213.87 1254.6,1213.87 1255.19,1213.87 1255.78,1213.87 1256.36,1213.87 1256.95,1213.87 1257.53,1213.87 1258.12,1213.87 1258.71,1213.87 1259.29,1213.87 1259.88,1213.87 1260.47,1213.87 1261.05,1213.87 1261.64,1213.87 1262.23,1213.87 1262.81,1213.87 1263.4,1213.87 1263.98,1213.87 1264.57,1213.87 1265.16,1213.87 1265.74,1213.87 1266.33,1213.87 1266.92,1213.87 1267.5,1213.87 1268.09,1213.87 1268.68,1213.87 1269.26,1213.87 1269.85,1213.87 1270.44,1213.87 1271.02,1213.87 1271.61,1213.87 1272.19,1213.87 1272.78,1213.87 1273.37,1213.87 1273.95,1213.87 1274.54,1213.87 1275.13,1213.87 1275.71,1213.87 1276.3,1213.87 1276.89,1213.87 1277.47,1213.87 1278.06,1213.87 1278.65,1213.87 1279.23,1213.87 1279.82,1213.87 1280.4,1213.87 1280.99,1213.87 1281.58,1213.87 1282.16,1213.87 1282.75,1213.87 1283.34,1213.87 1283.92,1213.87 1284.51,1213.87 1285.1,1213.87 1285.68,1213.87 1286.27,1213.87 1286.86,1213.87 1287.44,1213.87 1288.03,1213.87 1288.61,1213.87 1289.2,1213.87 1289.79,1213.87 1290.37,1213.87 1290.96,1213.87 1291.55,1213.87 1292.13,1213.87 1292.72,1213.87 1293.31,1213.87 1293.89,1213.87 1294.48,1213.87 1295.06,1213.87 1295.65,1213.87 1296.24,1213.87 1296.82,1213.87 1297.41,1213.87 1298,1213.87 1298.58,1213.87 1299.17,1213.87 1299.76,1213.87 1300.34,1213.87 1300.93,1213.87 1301.52,1213.87 1302.1,1213.87 1302.69,1213.87 1303.27,1213.87 1303.86,1213.87 1304.45,1213.87 1305.03,1213.87 1305.62,1213.87 1306.21,1213.87 1306.79,1213.87 1307.38,1213.87 1307.97,1213.87 1308.55,1213.87 1309.14,1213.87 1309.73,1213.87 1310.31,1213.87 1310.9,1213.87 1311.48,1213.87 1312.07,1213.87 1312.66,1213.87 1313.24,1213.87 1313.83,1213.87 1314.42,1213.87 1315,1213.87 1315.59,1213.87 1316.18,1213.87 1316.76,1213.87 1317.35,1213.87 1317.93,1213.87 1318.52,1213.87 1319.11,1213.87 1319.69,1213.87 1320.28,1213.87 1320.87,1213.87 1321.45,1213.87 1322.04,1213.87 1322.63,1213.87 1323.21,1213.87 1323.8,1213.87 1324.39,1213.87 1324.97,1213.87 1325.56,1213.87 1326.14,1213.87 1326.73,1213.87 1327.32,1213.87 1327.9,1213.87 1328.49,1213.87 1329.08,1213.87 1329.66,1213.87 1330.25,1213.87 1330.84,1213.87 1331.42,1213.87 1332.01,1213.87 1332.6,1213.87 1333.18,1213.87 1333.77,1213.87 1334.35,1213.87 1334.94,1213.87 1335.53,1213.87 1336.11,1213.87 1336.7,1213.87 1337.29,1213.87 1337.87,1213.87 1338.46,1213.87 1339.05,1213.87 1339.63,1213.87 1340.22,1213.87 1340.8,1213.87 1341.39,1213.87 1341.98,1213.87 1342.56,1213.87 1343.15,1213.87 1343.74,1213.87 1344.32,1213.87 1344.91,1213.87 1345.5,1213.87 1346.08,1213.87 1346.67,1213.87 1347.26,1213.87 1347.84,1213.87 1348.43,1213.87 1349.01,1213.87 1349.6,1213.87 1350.19,1213.87 1350.77,1213.87 1351.36,1213.87 1351.95,1213.87 1352.53,1213.87 1353.12,1213.87 1353.71,1213.87 1354.29,1213.87 1354.88,1213.87 1355.47,1213.87 1356.05,1213.87 1356.64,1213.87 1357.22,1213.87 1357.81,1213.87 1358.4,1213.87 1358.98,1213.87 1359.57,1213.87 1360.16,1213.87 1360.74,1213.87 1361.33,1213.87 1361.92,1213.87 1362.5,1213.87 1363.09,1213.87 1363.68,1213.87 1364.26,1213.87 1364.85,1213.87 1365.43,1213.87 1366.02,1213.87 1366.61,1213.87 1367.19,1213.87 1367.78,1213.87 1368.37,1213.87 1368.95,1213.87 1369.54,1213.87 1370.13,1213.87 1370.71,1213.87 1371.3,1213.87 1371.88,1213.87 1372.47,1213.87 1373.06,1213.87 1373.64,1213.87 1374.23,1213.87 1374.82,1213.87 1375.4,1213.87 1375.99,1213.87 1376.58,1213.87 1377.16,1213.87 1377.75,1213.87 1378.34,1213.87 1378.92,1213.87 1379.51,1213.87 1380.09,1213.87 1380.68,1213.87 1381.27,1213.87 1381.85,1213.87 1382.44,1213.87 1383.03,1213.87 1383.61,1213.87 1384.2,1213.87 1384.79,1213.87 1385.37,1213.87 1385.96,1213.87 1386.55,1213.87 1387.13,1213.87 1387.72,1213.87 1388.3,1213.87 1388.89,1213.87 1389.48,1213.87 1390.06,1213.87 1390.65,1213.87 1391.24,1213.87 1391.82,1213.87 1392.41,1213.87 1393,1213.87 1393.58,1213.87 1394.17,1213.87 1394.75,1213.87 1395.34,1213.87 1395.93,1213.87 1396.51,1213.87 1397.1,1213.87 1397.69,1213.87 1398.27,1213.87 1398.86,1213.87 1399.45,1213.87 1400.03,1213.87 1400.62,1213.87 1401.21,1213.87 1401.79,1213.87 1402.38,1213.87 1402.96,1213.87 1403.55,1213.87 1404.14,1213.87 1404.72,1213.87 1405.31,1213.87 1405.9,1213.87 1406.48,1213.87 1407.07,1213.87 1407.66,1213.87 1408.24,1213.87 1408.83,1213.87 1409.42,1213.87 1410,1213.87 1410.59,1213.87 1411.17,1213.87 1411.76,1213.87 1412.35,1213.87 1412.93,1213.87 1413.52,1213.87 1414.11,1213.87 1414.69,1213.87 1415.28,1213.87 1415.87,1213.87 1416.45,1213.87 1417.04,1213.87 1417.63,1213.87 1418.21,1213.87 1418.8,1213.87 1419.38,1213.87 1419.97,1213.87 1420.56,1213.87 1421.14,1213.87 1421.73,1213.87 1422.32,1213.87 1422.9,1213.87 1423.49,1213.87 1424.08,1213.87 1424.66,1213.87 1425.25,1213.87 1425.83,1213.87 1426.42,1213.87 1427.01,1213.87 1427.59,1213.87 1428.18,1213.87 1428.77,1213.87 1429.35,1213.87 1429.94,1213.87 1430.53,1213.87 1431.11,1213.87 1431.7,1213.87 1432.29,1213.87 1432.87,1213.87 1433.46,1213.87 1434.04,1213.87 1434.63,1213.87 1435.22,1213.87 1435.8,1213.87 1436.39,1213.87 1436.98,1213.87 1437.56,1213.87 1438.15,1213.87 1438.74,1213.87 1439.32,1213.87 1439.91,1213.87 1440.5,1213.87 1441.08,1213.87 1441.67,1213.87 1442.25,1213.87 1442.84,1213.87 1443.43,1213.87 1444.01,1213.87 1444.6,1213.87 1445.19,1213.87 1445.77,1213.87 1446.36,1213.87 1446.95,1213.87 1447.53,1213.87 1448.12,1213.87 1448.7,1213.87 1449.29,1213.87 1449.88,1213.87 1450.46,1213.87 1451.05,1213.87 1451.64,1213.87 1452.22,1213.87 1452.81,1213.87 1453.4,1213.87 1453.98,1213.87 1454.57,1213.87 1455.16,1213.87 1455.74,1213.87 1456.33,1213.87 1456.91,1213.87 1457.5,1213.87 1458.09,1213.87 1458.67,1213.87 1459.26,1213.87 1459.85,1213.87 1460.43,1213.87 1461.02,1213.87 1461.61,1213.87 1462.19,1213.87 1462.78,1213.87 1463.37,1213.87 1463.95,1213.87 1464.54,1213.87 1465.12,1213.87 1465.71,1213.87 1466.3,1213.87 1466.88,1213.87 1467.47,1213.87 1468.06,1213.87 1468.64,1213.87 1469.23,1213.87 1469.82,1213.87 1470.4,1213.87 1470.99,1213.87 1471.57,1213.87 1472.16,1213.87 1472.75,1213.87 1473.33,1213.87 1473.92,1213.87 1474.51,1213.87 1475.09,1213.87 1475.68,1213.87 1476.27,1213.87 1476.85,1213.87 1477.44,1213.87 1478.03,1213.87 1478.61,1213.87 1479.2,1213.87 1479.78,1213.87 1480.37,1213.87 1480.96,1213.87 1481.54,1213.87 1482.13,1213.87 1482.72,1213.87 1483.3,1213.87 1483.89,1213.87 1484.48,1213.87 1485.06,1213.87 1485.65,1213.87 1486.24,1213.87 1486.82,1213.87 1487.41,1213.87 1487.99,1213.87 1488.58,1213.87 1489.17,1213.87 1489.75,1213.87 1490.34,1213.87 1490.93,1213.87 1491.51,1213.87 1492.1,1213.87 1492.69,1213.87 1493.27,1213.87 1493.86,1213.87 1494.45,1213.87 1495.03,1213.87 1495.62,1213.87 1496.2,1213.87 1496.79,1213.87 1497.38,1213.87 1497.96,1213.87 1498.55,1213.87 1499.14,1213.87 1499.72,1213.87 1500.31,1213.87 1500.9,1213.87 1501.48,1213.87 1502.07,1213.87 1502.65,1213.87 1503.24,1213.87 1503.83,1213.87 1504.41,1213.87 1505,1213.87 1505.59,1213.87 1506.17,1213.87 1506.76,1213.87 1507.35,1213.87 1507.93,1213.87 1508.52,1213.87 1509.11,1213.87 1509.69,1213.87 1510.28,1213.87 1510.86,1213.87 1511.45,1213.87 1512.04,1213.87 1512.62,1213.87 1513.21,1213.87 1513.8,1213.87 1514.38,1213.87 1514.97,1213.87 1515.56,1213.87 1516.14,1213.87 1516.73,1213.87 1517.32,1213.87 1517.9,1213.87 1518.49,1213.87 1519.07,1213.87 1519.66,1213.87 1520.25,1213.87 1520.83,1213.87 1521.42,1213.87 1522.01,1213.87 1522.59,1213.87 1523.18,1213.87 1523.77,1213.87 1524.35,1213.87 1524.94,1213.87 1525.52,1213.87 1526.11,1213.87 1526.7,1213.87 1527.28,1213.87 1527.87,1213.87 1528.46,1213.87 1529.04,1213.87 1529.63,1213.87 1530.22,1213.87 1530.8,1213.87 1531.39,1213.87 1531.98,1213.87 1532.56,1213.87 1533.15,1213.87 1533.73,1213.87 1534.32,1213.87 1534.91,1213.87 1535.49,1213.87 1536.08,1213.87 1536.67,1213.87 1537.25,1213.87 1537.84,1213.87 1538.43,1213.87 1539.01,1213.87 1539.6,1213.87 1540.19,1213.87 1540.77,1213.87 1541.36,1213.87 1541.94,1213.87 1542.53,1213.87 1543.12,1213.87 1543.7,1213.87 1544.29,1213.87 1544.88,1213.87 1545.46,1213.87 1546.05,1213.87 1546.64,1213.87 1547.22,1213.87 1547.81,1213.87 1548.4,1213.87 1548.98,1213.87 1549.57,1213.87 1550.15,1213.87 1550.74,1213.87 1551.33,1213.87 1551.91,1213.87 1552.5,1213.87 1553.09,1213.87 1553.67,1213.87 1554.26,1213.87 1554.85,1213.87 1555.43,1213.87 1556.02,1213.87 1556.6,1213.87 1557.19,1213.87 1557.78,1213.87 1558.36,1213.87 1558.95,1213.87 1559.54,1213.87 1560.12,1213.87 1560.71,1213.87 1561.3,1213.87 1561.88,1213.87 1562.47,1213.87 1563.06,1213.87 1563.64,1213.87 1564.23,1213.87 1564.81,1213.87 1565.4,1213.87 1565.99,1213.87 1566.57,1213.87 1567.16,1213.87 1567.75,1213.87 1568.33,1213.87 1568.92,1213.87 1569.51,1213.87 1570.09,1213.87 1570.68,1213.87 1571.27,1213.87 1571.85,1213.87 1572.44,1213.87 1573.02,1213.87 1573.61,1213.87 1574.2,1213.87 1574.78,1213.87 1575.37,1213.87 1575.96,1213.87 1576.54,1213.87 1577.13,1213.87 1577.72,1213.87 1578.3,1213.87 1578.89,1213.87 1579.47,1213.87 1580.06,1213.87 1580.65,1213.87 1581.23,1213.87 1581.82,1213.87 1582.41,1213.87 1582.99,1213.87 1583.58,1213.87 1584.17,1213.87 1584.75,1213.87 1585.34,1213.87 1585.93,1213.87 1586.51,1213.87 1587.1,1213.87 1587.68,1213.87 1588.27,1213.87 1588.86,1213.87 1589.44,1213.87 1590.03,1213.87 1590.62,1213.87 1591.2,1213.87 1591.79,1213.87 1592.38,1213.87 1592.96,1213.87 1593.55,1213.87 1594.14,1213.87 1594.72,1213.87 1595.31,1213.87 1595.89,1213.87 1596.48,1213.87 1597.07,1213.87 1597.65,1213.87 1598.24,1213.87 1598.83,1213.87 1599.41,1213.87 1600,1213.87 1600.59,1213.87 1601.17,1213.87 1601.76,1213.87 1602.34,1213.87 1602.93,1213.87 1603.52,1213.87 1604.1,1213.87 1604.69,1213.87 1605.28,1213.87 1605.86,1213.87 1606.45,1213.87 1607.04,1213.87 1607.62,1213.87 1608.21,1213.87 1608.8,1213.87 1609.38,1213.87 1609.97,1213.87 1610.55,1213.87 1611.14,1213.87 1611.73,1213.87 1612.31,1213.87 1612.9,1213.87 1613.49,1213.87 1614.07,1213.87 1614.66,1213.87 1615.25,1213.87 1615.83,1213.87 1616.42,1213.87 1617.01,1213.87 1617.59,1213.87 1618.18,1213.87 1618.76,1213.87 1619.35,1213.87 1619.94,1213.87 1620.52,1213.87 1621.11,1213.87 1621.7,1213.87 1622.28,1213.87 1622.87,1213.87 1623.46,1213.87 1624.04,1213.87 1624.63,1213.87 1625.22,1213.87 1625.8,1213.87 1626.39,1213.87 1626.97,1213.87 1627.56,1213.87 1628.15,1213.87 1628.73,1213.87 1629.32,1213.87 1629.91,1213.87 1630.49,1213.87 1631.08,1213.87 1631.67,1213.87 1632.25,1213.87 1632.84,1213.87 1633.42,1213.87 1634.01,1213.87 1634.6,1213.87 1635.18,1213.87 1635.77,1213.87 1636.36,1213.87 1636.94,1213.87 1637.53,1213.87 1638.12,1213.87 1638.7,1213.87 1639.29,1213.87 1639.88,1213.87 1640.46,1213.87 1641.05,1213.87 1641.63,1213.87 1642.22,1213.87 1642.81,1213.87 1643.39,1213.87 1643.98,1213.87 1644.57,1213.87 1645.15,1213.87 1645.74,1213.87 1646.33,1213.87 1646.91,1213.87 1647.5,1213.87 1648.09,1213.87 1648.67,1213.87 1649.26,1213.87 1649.84,1213.87 1650.43,1213.87 1651.02,1213.87 1651.6,1213.87 1652.19,1213.87 1652.78,1213.87 1653.36,1213.87 1653.95,1213.87 1654.54,1213.87 1655.12,1213.87 1655.71,1213.87 1656.29,1213.87 1656.88,1213.87 1657.47,1213.87 1658.05,1213.87 1658.64,1213.87 1659.23,1213.87 1659.81,1213.87 1660.4,1213.87 1660.99,1213.87 1661.57,1213.87 1662.16,1213.87 1662.75,1213.87 1663.33,1213.87 1663.92,1213.87 1664.5,1213.87 1665.09,1213.87 1665.68,1213.87 1666.26,1213.87 1666.85,1213.87 1667.44,1213.87 1668.02,1213.87 1668.61,1213.87 1669.2,1213.87 1669.78,1213.87 1670.37,1213.87 1670.96,1213.87 1671.54,1213.87 1672.13,1213.87 1672.71,1213.87 1673.3,1213.87 1673.89,1213.87 1674.47,1213.87 1675.06,1213.87 1675.65,1213.87 1676.23,1213.87 1676.82,1213.87 1677.41,1213.87 1677.99,1213.87 1678.58,1213.87 1679.17,1213.87 1679.75,1213.87 1680.34,1213.87 1680.92,1213.87 1681.51,1213.87 1682.1,1213.87 1682.68,1213.87 1683.27,1213.87 1683.86,1213.87 1684.44,1213.87 1685.03,1213.87 1685.62,1213.87 1686.2,1213.87 1686.79,1213.87 1687.37,1213.87 1687.96,1213.87 1688.55,1213.87 1689.13,1213.87 1689.72,1213.87 1690.31,1213.87 1690.89,1213.87 1691.48,1213.87 1692.07,1213.87 1692.65,1213.87 1693.24,1213.87 1693.83,1213.87 1694.41,1213.87 1695,1213.87 1695.58,1213.87 1696.17,1213.87 1696.76,1213.87 1697.34,1213.87 1697.93,1213.87 1698.52,1213.87 1699.1,1213.87 1699.69,1213.87 1700.28,1213.87 1700.86,1213.87 1701.45,1213.87 1702.04,1213.87 1702.62,1213.87 1703.21,1213.87 1703.79,1213.87 1704.38,1213.87 1704.97,1213.87 1705.55,1213.87 1706.14,1213.87 1706.73,1213.87 1707.31,1213.87 1707.9,1213.87 1708.49,1213.87 1709.07,1213.87 1709.66,1213.87 1710.24,1213.87 1710.83,1213.87 1711.42,1213.87 1712,1213.87 1712.59,1213.87 1713.18,1213.87 1713.76,1213.87 1714.35,1213.87 1714.94,1213.87 1715.52,1213.87 1716.11,1213.87 1716.7,1213.87 1717.28,1213.87 1717.87,1213.87 1718.45,1213.87 1719.04,1213.87 1719.63,1213.87 1720.21,1213.87 1720.8,1213.87 1721.39,1213.87 1721.97,1213.87 1722.56,1213.87 1723.15,1213.87 1723.73,1213.87 1724.32,1213.87 1724.91,1213.87 1725.49,1213.87 1726.08,1213.87 1726.66,1213.87 1727.25,1213.87 1727.84,1213.87 1728.42,1213.87 1729.01,1213.87 1729.6,1213.87 1730.18,1213.87 1730.77,1213.87 1731.36,1213.87 1731.94,1213.87 1732.53,1213.87 1733.11,1213.87 1733.7,1213.87 1734.29,1213.87 1734.87,1213.87 1735.46,1213.87 1736.05,1213.87 1736.63,1213.87 1737.22,1213.87 1737.81,1213.87 1738.39,1213.87 1738.98,1213.87 1739.57,1213.87 1740.15,1213.87 1740.74,1213.87 1741.32,1213.87 1741.91,1213.87 1742.5,1213.87 1743.08,1213.87 1743.67,1213.87 1744.26,1213.87 1744.84,1213.87 1745.43,1213.87 1746.02,1213.87 1746.6,1213.87 1747.19,1213.87 1747.78,1213.87 1748.36,1213.87 1748.95,1213.87 1749.53,1213.87 1750.12,1213.87 1750.71,1213.87 1751.29,1213.87 1751.88,1213.87 1752.47,1213.87 1753.05,1213.87 1753.64,1213.87 1754.23,1213.87 1754.81,1213.87 1755.4,1213.87 1755.99,1213.87 1756.57,1213.87 1757.16,1213.87 1757.74,1213.87 1758.33,1213.87 1758.92,1213.87 1759.5,1213.87 1760.09,1213.87 1760.68,1213.87 1761.26,1213.87 1761.85,1213.87 1762.44,1213.87 1763.02,1213.87 1763.61,1213.87 1764.19,1213.87 1764.78,1213.87 1765.37,1213.87 1765.95,1213.87 1766.54,1213.87 1767.13,1213.87 1767.71,1213.87 1768.3,1213.87 1768.89,1213.87 1769.47,1213.87 1770.06,1213.87 1770.65,1213.87 1771.23,1213.87 1771.82,1213.87 1772.4,1213.87 1772.99,1213.87 1773.58,1213.87 1774.16,1213.87 1774.75,1213.87 1775.34,1213.87 1775.92,1213.87 1776.51,1213.87 1777.1,1213.87 1777.68,1213.87 1778.27,1213.87 1778.86,1213.87 1779.44,1213.87 1780.03,1213.87 1780.61,1213.87 1781.2,1213.87 1781.79,1213.87 1782.37,1213.87 1782.96,1213.87 1783.55,1213.87 1784.13,1213.87 1784.72,1213.87 1785.31,1213.87 1785.89,1213.87 1786.48,1213.87 1787.06,1213.87 1787.65,1213.87 1788.24,1213.87 1788.82,1213.87 1789.41,1213.87 1790,1213.87 1790.58,1213.87 1791.17,1213.87 1791.76,1213.87 1792.34,1213.87 1792.93,1213.87 1793.52,1213.87 1794.1,1213.87 1794.69,1213.87 1795.27,1213.87 1795.86,1213.87 1796.45,1213.87 1797.03,1213.87 1797.62,1213.87 1798.21,1213.87 1798.79,1213.87 1799.38,1213.87 1799.97,1213.87 1800.55,1213.87 1801.14,1213.87 1801.73,1213.87 1802.31,1213.87 1802.9,1213.87 1803.48,1213.87 1804.07,1213.87 1804.66,1213.87 1805.24,1213.87 1805.83,1213.87 1806.42,1213.87 1807,1213.87 1807.59,1213.87 1808.18,1213.87 1808.76,1213.87 1809.35,1213.87 1809.94,1213.87 1810.52,1213.87 1811.11,1213.87 1811.69,1213.87 1812.28,1213.87 1812.87,1213.87 1813.45,1213.87 1814.04,1213.87 1814.63,1213.87 1815.21,1213.87 1815.8,1213.87 1816.39,1213.87 1816.97,1213.87 1817.56,1213.87 1818.14,1213.87 1818.73,1213.87 1819.32,1213.87 1819.9,1213.87 1820.49,1213.87 1821.08,1213.87 1821.66,1213.87 1822.25,1213.87 1822.84,1213.87 1823.42,1213.87 1824.01,1213.87 1824.6,1213.87 1825.18,1213.87 1825.77,1213.87 1826.35,1213.87 1826.94,1213.87 1827.53,1213.87 1828.11,1213.87 1828.7,1213.87 1829.29,1213.87 1829.87,1213.87 1830.46,1213.87 1831.05,1213.87 1831.63,1213.87 1832.22,1213.87 1832.81,1213.87 1833.39,1213.87 1833.98,1213.87 1834.56,1213.87 1835.15,1213.87 1835.74,1213.87 1836.32,1213.87 1836.91,1213.87 1837.5,1213.87 1838.08,1213.87 1838.67,1213.87 1839.26,1213.87 1839.84,1213.87 1840.43,1213.87 1841.01,1213.87 1841.6,1213.87 1842.19,1213.87 1842.77,1213.87 1843.36,1213.87 1843.95,1213.87 1844.53,1213.87 1845.12,1213.87 1845.71,1213.87 1846.29,1213.87 1846.88,1213.87 1847.47,1213.87 1848.05,1213.87 1848.64,1213.87 1849.22,1213.87 1849.81,1213.87 1850.4,1213.87 1850.98,1213.87 1851.57,1213.87 1852.16,1213.87 1852.74,1213.87 1853.33,1213.87 1853.92,1213.87 1854.5,1213.87 1855.09,1213.87 1855.68,1213.87 1856.26,1213.87 1856.85,1213.87 1857.43,1213.87 1858.02,1213.87 1858.61,1213.87 1859.19,1213.87 1859.78,1213.87 1860.37,1213.87 1860.95,1213.87 1861.54,1213.87 1862.13,1213.87 1862.71,1213.87 1863.3,1213.87 1863.88,1213.87 1864.47,1213.87 1865.06,1213.87 1865.64,1213.87 1866.23,1213.87 1866.82,1213.87 1867.4,1213.87 1867.99,1213.87 1868.58,1213.87 1869.16,1213.87 1869.75,1213.87 1870.34,1213.87 1870.92,1213.87 1871.51,1213.87 1872.09,1213.87 1872.68,1213.87 1873.27,1213.87 1873.85,1213.87 1874.44,1213.87 1875.03,1213.87 1875.61,1213.87 1876.2,1213.87 1876.79,1213.87 1877.37,1213.87 1877.96,1213.87 1878.55,1213.87 1879.13,1213.87 1879.72,1213.87 1880.3,1213.87 1880.89,1213.87 1881.48,1213.87 1882.06,1213.87 1882.65,1213.87 1883.24,1213.87 1883.82,1213.87 1884.41,1213.87 1885,1213.87 1885.58,1213.87 1886.17,1213.87 1886.76,1213.87 1887.34,1213.87 1887.93,1213.87 1888.51,1213.87 1889.1,1213.87 1889.69,1213.87 1890.27,1213.87 1890.86,1213.87 1891.45,1213.87 1892.03,1213.87 1892.62,1213.87 1893.21,1213.87 1893.79,1213.87 1894.38,1213.87 1894.96,1213.87 1895.55,1213.87 1896.14,1213.87 1896.72,1213.87 1897.31,1213.87 1897.9,1213.87 1898.48,1213.87 1899.07,1213.87 1899.66,1213.87 1900.24,1213.87 1900.83,1213.87 1901.42,1213.87 1902,1213.87 1902.59,1213.87 1903.17,1213.87 1903.76,1213.87 1904.35,1213.87 1904.93,1213.87 1905.52,1213.87 1906.11,1213.87 1906.69,1213.87 1907.28,1213.87 1907.87,1213.87 1908.45,1213.87 1909.04,1213.87 1909.63,1213.87 1910.21,1213.87 1910.8,1213.87 1911.38,1213.87 1911.97,1213.87 1912.56,1213.87 1913.14,1213.87 1913.73,1213.87 1914.32,1213.87 1914.9,1213.87 1915.49,1213.87 1916.08,1213.87 1916.66,1213.87 1917.25,1213.87 1917.83,1213.87 1918.42,1213.87 1919.01,1213.87 1919.59,1213.87 1920.18,1213.87 1920.77,1213.87 1921.35,1213.87 1921.94,1213.87 1922.53,1213.87 1923.11,1213.87 1923.7,1213.87 1924.29,1213.87 1924.87,1213.87 1925.46,1213.87 1926.04,1213.87 1926.63,1213.87 1927.22,1213.87 1927.8,1213.87 1928.39,1213.87 1928.98,1213.87 1929.56,1213.87 1930.15,1213.87 1930.74,1213.87 1931.32,1213.87 1931.91,1213.87 1932.5,1213.87 1933.08,1213.87 1933.67,1213.87 1934.25,1213.87 1934.84,1213.87 1935.43,1213.87 1936.01,1213.87 1936.6,1213.87 1937.19,1213.87 1937.77,1213.87 1938.36,1213.87 1938.95,1213.87 1939.53,1213.87 1940.12,1213.87 1940.71,1213.87 1941.29,1213.87 1941.88,1213.87 1942.46,1213.87 1943.05,1213.87 1943.64,1213.87 1944.22,1213.87 1944.81,1213.87 1945.4,1213.87 1945.98,1213.87 1946.57,1213.87 1947.16,1213.87 1947.74,1213.87 1948.33,1213.87 1948.91,1213.87 1949.5,1213.87 1950.09,1213.87 1950.67,1213.87 1951.26,1213.87 1951.85,1213.87 1952.43,1213.87 1953.02,1213.87 1953.61,1213.87 1954.19,1213.87 1954.78,1213.87 1955.37,1213.87 1955.95,1213.87 1956.54,1213.87 1957.12,1213.87 1957.71,1213.87 1958.3,1213.87 1958.88,1213.87 1959.47,1213.87 1960.06,1213.87 1960.64,1213.87 1961.23,1213.87 1961.82,1213.87 1962.4,1213.87 1962.99,1213.87 1963.58,1213.87 1964.16,1213.87 1964.75,1213.87 1965.33,1213.87 1965.92,1213.87 1966.51,1213.87 1967.09,1213.87 1967.68,1213.87 1968.27,1213.87 1968.85,1213.87 1969.44,1213.87 1970.03,1213.87 1970.61,1213.87 1971.2,1213.87 1971.78,1213.87 1972.37,1213.87 1972.96,1213.87 1973.54,1213.87 1974.13,1213.87 1974.72,1213.87 1975.3,1213.87 1975.89,1213.87 1976.48,1213.87 1977.06,1213.87 1977.65,1213.87 1978.24,1213.87 1978.82,1213.87 1979.41,1213.87 1979.99,1213.87 1980.58,1213.87 1981.17,1213.87 1981.75,1213.87 1982.34,1213.87 1982.93,1213.87 1983.51,1213.87 1984.1,1213.87 1984.69,1213.87 1985.27,1213.87 1985.86,1213.87 1986.45,1213.87 1987.03,1213.87 1987.62,1213.87 1988.2,1213.87 1988.79,1213.87 1989.38,1213.87 1989.96,1213.87 1990.55,1213.87 1991.14,1213.87 1991.72,1213.87 1992.31,1213.87 1992.9,1213.87 1993.48,1213.87 1994.07,1213.87 1994.65,1213.87 1995.24,1213.87 1995.83,1213.87 1996.41,1213.87 1997,1213.87 1997.59,1213.87 1998.17,1213.87 1998.76,1213.87 1999.35,1213.87 1999.93,1213.87 2000.52,1213.87 2001.11,1213.87 2001.69,1213.87 2002.28,1213.87 2002.86,1213.87 2003.45,1213.87 2004.04,1213.87 2004.62,1213.87 2005.21,1213.87 2005.8,1213.87 2006.38,1213.87 2006.97,1213.87 2007.56,1213.87 2008.14,1213.87 2008.73,1213.87 2009.32,1213.87 2009.9,1213.87 2010.49,1213.87 2011.07,1213.87 2011.66,1213.87 2012.25,1213.87 2012.83,1213.87 2013.42,1213.87 2014.01,1213.87 2014.59,1213.87 2015.18,1213.87 2015.77,1213.87 2016.35,1213.87 2016.94,1213.87 2017.53,1213.87 2018.11,1213.87 2018.7,1213.87 2019.28,1213.87 2019.87,1213.87 2020.46,1213.87 2021.04,1213.87 2021.63,1213.87 2022.22,1213.87 2022.8,1213.87 2023.39,1213.87 2023.98,1213.87 2024.56,1213.87 2025.15,1213.87 2025.73,1213.87 2026.32,1213.87 2026.91,1213.87 2027.49,1213.87 2028.08,1213.87 2028.67,1213.87 2029.25,1213.87 2029.84,1213.87 2030.43,1213.87 2031.01,1213.87 2031.6,1213.87 2032.19,1213.87 2032.77,1213.87 2033.36,1213.87 2033.94,1213.87 2034.53,1213.87 2035.12,1213.87 2035.7,1213.87 2036.29,1213.87 2036.88,1213.87 2037.46,1213.87 2038.05,1213.87 2038.64,1213.87 2039.22,1213.87 2039.81,1213.87 2040.4,1213.87 2040.98,1213.87 2041.57,1213.87 2042.15,1213.87 2042.74,1213.87 2043.33,1213.87 2043.91,1213.87 2044.5,1213.87 2045.09,1213.87 2045.67,1213.87 2046.26,1213.87 2046.85,1213.87 2047.43,1213.87 2048.02,1213.87 2048.6,1213.87 2049.19,1213.87 2049.78,1213.87 2050.36,1213.87 2050.95,1213.87 2051.54,1213.87 2052.12,1213.87 2052.71,1213.87 2053.3,1213.87 2053.88,1213.87 2054.47,1213.87 2055.06,1213.87 2055.64,1213.87 2056.23,1213.87 2056.81,1213.87 2057.4,1213.87 2057.99,1213.87 2058.57,1213.87 2059.16,1213.87 2059.75,1213.87 2060.33,1213.87 2060.92,1213.87 2061.51,1213.87 2062.09,1213.87 2062.68,1213.87 2063.27,1213.87 2063.85,1213.87 2064.44,1213.87 2065.02,1213.87 2065.61,1213.87 2066.2,1213.87 2066.78,1213.87 2067.37,1213.87 2067.96,1213.87 2068.54,1213.87 2069.13,1213.87 2069.72,1213.87 2070.3,1213.87 2070.89,1213.87 2071.48,1213.87 2072.06,1213.87 2072.65,1213.87 2073.23,1213.87 2073.82,1213.87 2074.41,1213.87 2074.99,1213.87 2075.58,1213.87 2076.17,1213.87 2076.75,1213.87 2077.34,1213.87 2077.93,1213.87 2078.51,1213.87 2079.1,1213.87 2079.68,1213.87 2080.27,1213.87 2080.86,1213.87 2081.44,1213.87 2082.03,1213.87 2082.62,1213.87 2083.2,1213.87 2083.79,1213.87 2084.38,1213.87 2084.96,1213.87 2085.55,1213.87 2086.14,1213.87 2086.72,1213.87 2087.31,1213.87 2087.89,1213.87 2088.48,1213.87 2089.07,1213.87 2089.65,1213.87 2090.24,1213.87 2090.83,1213.87 2091.41,1213.87 2092,1213.87 2092.59,1213.87 2093.17,1213.87 2093.76,1213.87 2094.35,1213.87 2094.93,1213.87 2095.52,1213.87 2096.1,1213.87 2096.69,1213.87 2097.28,1213.87 2097.86,1213.87 2098.45,1213.87 2099.04,1213.87 2099.62,1213.87 2100.21,1213.87 2100.8,1213.87 2101.38,1213.87 2101.97,1213.87 2102.55,1213.87 2103.14,1213.87 2103.73,1213.87 2104.31,1213.87 2104.9,1213.87 2105.49,1213.87 2106.07,1213.87 2106.66,1213.87 2107.25,1213.87 2107.83,1213.87 2108.42,1213.87 2109.01,1213.87 2109.59,1213.87 2110.18,1213.87 2110.76,1213.87 2111.35,1213.87 2111.94,1213.87 2112.52,1213.87 2113.11,1213.87 2113.7,1213.87 2114.28,1213.87 2114.87,1213.87 2115.46,1213.87 2116.04,1213.87 2116.63,1213.87 2117.22,1213.87 2117.8,1213.87 2118.39,1213.87 2118.97,1213.87 2119.56,1213.87 2120.15,1213.87 2120.73,1213.87 2121.32,1213.87 2121.91,1213.87 2122.49,1213.87 2123.08,1213.87 2123.67,1213.87 2124.25,1213.87 2124.84,1213.87 2125.42,1213.87 2126.01,1213.87 2126.6,1213.87 2127.18,1213.87 2127.77,1213.87 2128.36,1213.87 2128.94,1213.87 2129.53,1213.87 2130.12,1213.87 2130.7,1213.87 2131.29,1213.87 2131.88,1213.87 2132.46,1213.87 2133.05,1213.87 2133.63,1213.87 2134.22,1213.87 2134.81,1213.87 2135.39,1213.87 2135.98,1213.87 2136.57,1213.87 2137.15,1213.87 2137.74,1213.87 2138.33,1213.87 2138.91,1213.87 2139.5,1213.87 2140.09,1213.87 2140.67,1213.87 2141.26,1213.87 2141.84,1213.87 2142.43,1213.87 2143.02,1213.87 2143.6,1213.87 2144.19,1213.87 2144.78,1213.87 2145.36,1213.87 2145.95,1213.87 2146.54,1213.87 2147.12,1213.87 2147.71,1213.87 2148.3,1213.87 2148.88,1213.87 2149.47,1213.87 2150.05,1213.87 2150.64,1213.87 2151.23,1213.87 2151.81,1213.87 2152.4,1213.87 2152.99,1213.87 2153.57,1213.87 2154.16,1213.87 2154.75,1213.87 2155.33,1213.87 2155.92,1213.87 2156.5,1213.87 2157.09,1213.87 2157.68,1213.87 2158.26,1213.87 \"/>\n<polyline clip-path=\"url(#clip022)\" style=\"stroke:#d3d3d3; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"1562.86,1197.27 1399,899.083 \"/>\n<polyline clip-path=\"url(#clip022)\" style=\"stroke:#d3d3d3; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"985.439,1230 985.439,1197.27 2158.26,1197.27 2158.26,1230 985.439,1230 \"/>\n<path clip-path=\"url(#clip020)\" d=\"M1564.14 432.752 L2148.88 432.752 L2148.88 225.392 L1564.14 225.392  Z\" fill=\"#ffffff\" fill-rule=\"evenodd\" fill-opacity=\"1\"/>\n<polyline clip-path=\"url(#clip020)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"1564.14,432.752 2148.88,432.752 2148.88,225.392 1564.14,225.392 1564.14,432.752 \"/>\n<polyline clip-path=\"url(#clip020)\" style=\"stroke:#009af9; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"1584.85,277.232 1709.13,277.232 \"/>\n<path clip-path=\"url(#clip020)\" d=\"M1748.27 269.35 L1748.27 273.378 Q1746.46 272.452 1744.52 271.989 Q1742.57 271.526 1740.49 271.526 Q1737.32 271.526 1735.72 272.498 Q1734.15 273.471 1734.15 275.415 Q1734.15 276.896 1735.28 277.753 Q1736.41 278.586 1739.84 279.35 L1741.3 279.674 Q1745.84 280.646 1747.73 282.429 Q1749.66 284.188 1749.66 287.359 Q1749.66 290.97 1746.78 293.077 Q1743.94 295.183 1738.94 295.183 Q1736.85 295.183 1734.59 294.767 Q1732.34 294.373 1729.84 293.563 L1729.84 289.165 Q1732.2 290.392 1734.49 291.017 Q1736.78 291.619 1739.03 291.619 Q1742.04 291.619 1743.66 290.6 Q1745.28 289.558 1745.28 287.683 Q1745.28 285.947 1744.1 285.021 Q1742.94 284.095 1738.98 283.239 L1737.5 282.892 Q1733.54 282.058 1731.78 280.345 Q1730.03 278.609 1730.03 275.6 Q1730.03 271.943 1732.62 269.952 Q1735.21 267.961 1739.98 267.961 Q1742.34 267.961 1744.42 268.309 Q1746.51 268.656 1748.27 269.35 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip020)\" d=\"M1777.99 278.864 L1777.99 294.512 L1773.73 294.512 L1773.73 279.003 Q1773.73 275.322 1772.29 273.494 Q1770.86 271.665 1767.99 271.665 Q1764.54 271.665 1762.55 273.864 Q1760.56 276.063 1760.56 279.859 L1760.56 294.512 L1756.28 294.512 L1756.28 258.494 L1760.56 258.494 L1760.56 272.614 Q1762.09 270.276 1764.15 269.119 Q1766.23 267.961 1768.94 267.961 Q1773.4 267.961 1775.7 270.739 Q1777.99 273.494 1777.99 278.864 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip020)\" d=\"M1786.48 268.586 L1790.74 268.586 L1790.74 294.512 L1786.48 294.512 L1786.48 268.586 M1786.48 258.494 L1790.74 258.494 L1790.74 263.887 L1786.48 263.887 L1786.48 258.494 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip020)\" d=\"M1812.78 258.494 L1812.78 262.035 L1808.71 262.035 Q1806.41 262.035 1805.51 262.961 Q1804.63 263.887 1804.63 266.295 L1804.63 268.586 L1811.65 268.586 L1811.65 271.896 L1804.63 271.896 L1804.63 294.512 L1800.35 294.512 L1800.35 271.896 L1796.28 271.896 L1796.28 268.586 L1800.35 268.586 L1800.35 266.781 Q1800.35 262.452 1802.36 260.484 Q1804.38 258.494 1808.75 258.494 L1812.78 258.494 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip020)\" d=\"M1819.72 261.225 L1819.72 268.586 L1828.5 268.586 L1828.5 271.896 L1819.72 271.896 L1819.72 285.97 Q1819.72 289.142 1820.58 290.045 Q1821.46 290.947 1824.12 290.947 L1828.5 290.947 L1828.5 294.512 L1824.12 294.512 Q1819.19 294.512 1817.32 292.683 Q1815.44 290.832 1815.44 285.97 L1815.44 271.896 L1812.32 271.896 L1812.32 268.586 L1815.44 268.586 L1815.44 261.225 L1819.72 261.225 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><polyline clip-path=\"url(#clip020)\" style=\"stroke:#e26f46; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"1584.85,329.072 1709.13,329.072 \"/>\n<path clip-path=\"url(#clip020)\" d=\"M1748.27 321.19 L1748.27 325.218 Q1746.46 324.292 1744.52 323.829 Q1742.57 323.366 1740.49 323.366 Q1737.32 323.366 1735.72 324.338 Q1734.15 325.311 1734.15 327.255 Q1734.15 328.736 1735.28 329.593 Q1736.41 330.426 1739.84 331.19 L1741.3 331.514 Q1745.84 332.486 1747.73 334.269 Q1749.66 336.028 1749.66 339.199 Q1749.66 342.81 1746.78 344.917 Q1743.94 347.023 1738.94 347.023 Q1736.85 347.023 1734.59 346.607 Q1732.34 346.213 1729.84 345.403 L1729.84 341.005 Q1732.2 342.232 1734.49 342.857 Q1736.78 343.459 1739.03 343.459 Q1742.04 343.459 1743.66 342.44 Q1745.28 341.398 1745.28 339.523 Q1745.28 337.787 1744.1 336.861 Q1742.94 335.935 1738.98 335.079 L1737.5 334.732 Q1733.54 333.898 1731.78 332.185 Q1730.03 330.449 1730.03 327.44 Q1730.03 323.783 1732.62 321.792 Q1735.21 319.801 1739.98 319.801 Q1742.34 319.801 1744.42 320.149 Q1746.51 320.496 1748.27 321.19 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip020)\" d=\"M1777.99 330.704 L1777.99 346.352 L1773.73 346.352 L1773.73 330.843 Q1773.73 327.162 1772.29 325.334 Q1770.86 323.505 1767.99 323.505 Q1764.54 323.505 1762.55 325.704 Q1760.56 327.903 1760.56 331.699 L1760.56 346.352 L1756.28 346.352 L1756.28 310.334 L1760.56 310.334 L1760.56 324.454 Q1762.09 322.116 1764.15 320.959 Q1766.23 319.801 1768.94 319.801 Q1773.4 319.801 1775.7 322.579 Q1777.99 325.334 1777.99 330.704 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip020)\" d=\"M1786.48 320.426 L1790.74 320.426 L1790.74 346.352 L1786.48 346.352 L1786.48 320.426 M1786.48 310.334 L1790.74 310.334 L1790.74 315.727 L1786.48 315.727 L1786.48 310.334 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip020)\" d=\"M1812.78 310.334 L1812.78 313.875 L1808.71 313.875 Q1806.41 313.875 1805.51 314.801 Q1804.63 315.727 1804.63 318.135 L1804.63 320.426 L1811.65 320.426 L1811.65 323.736 L1804.63 323.736 L1804.63 346.352 L1800.35 346.352 L1800.35 323.736 L1796.28 323.736 L1796.28 320.426 L1800.35 320.426 L1800.35 318.621 Q1800.35 314.292 1802.36 312.324 Q1804.38 310.334 1808.75 310.334 L1812.78 310.334 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip020)\" d=\"M1819.72 313.065 L1819.72 320.426 L1828.5 320.426 L1828.5 323.736 L1819.72 323.736 L1819.72 337.81 Q1819.72 340.982 1820.58 341.885 Q1821.46 342.787 1824.12 342.787 L1828.5 342.787 L1828.5 346.352 L1824.12 346.352 Q1819.19 346.352 1817.32 344.523 Q1815.44 342.672 1815.44 337.81 L1815.44 323.736 L1812.32 323.736 L1812.32 320.426 L1815.44 320.426 L1815.44 313.065 L1819.72 313.065 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip020)\" d=\"M1869.35 325.403 Q1870.95 322.533 1873.17 321.167 Q1875.4 319.801 1878.4 319.801 Q1882.46 319.801 1884.65 322.649 Q1886.85 325.473 1886.85 330.704 L1886.85 346.352 L1882.57 346.352 L1882.57 330.843 Q1882.57 327.116 1881.25 325.311 Q1879.93 323.505 1877.22 323.505 Q1873.91 323.505 1871.99 325.704 Q1870.07 327.903 1870.07 331.699 L1870.07 346.352 L1865.79 346.352 L1865.79 330.843 Q1865.79 327.093 1864.47 325.311 Q1863.15 323.505 1860.4 323.505 Q1857.13 323.505 1855.21 325.727 Q1853.29 327.926 1853.29 331.699 L1853.29 346.352 L1849.01 346.352 L1849.01 320.426 L1853.29 320.426 L1853.29 324.454 Q1854.75 322.07 1856.78 320.936 Q1858.82 319.801 1861.62 319.801 Q1864.45 319.801 1866.41 321.236 Q1868.4 322.672 1869.35 325.403 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip020)\" d=\"M1917.52 332.324 L1917.52 334.408 L1897.94 334.408 Q1898.22 338.806 1900.58 341.121 Q1902.96 343.412 1907.2 343.412 Q1909.65 343.412 1911.95 342.81 Q1914.26 342.209 1916.53 341.005 L1916.53 345.033 Q1914.24 346.005 1911.83 346.514 Q1909.42 347.023 1906.95 347.023 Q1900.74 347.023 1897.11 343.412 Q1893.5 339.801 1893.5 333.644 Q1893.5 327.278 1896.92 323.551 Q1900.37 319.801 1906.21 319.801 Q1911.44 319.801 1914.47 323.181 Q1917.52 326.537 1917.52 332.324 M1913.27 331.074 Q1913.22 327.579 1911.3 325.496 Q1909.4 323.412 1906.25 323.412 Q1902.69 323.412 1900.53 325.426 Q1898.4 327.44 1898.08 331.098 L1913.27 331.074 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip020)\" d=\"M1936.3 333.32 Q1931.14 333.32 1929.14 334.5 Q1927.15 335.681 1927.15 338.528 Q1927.15 340.797 1928.64 342.139 Q1930.14 343.459 1932.71 343.459 Q1936.25 343.459 1938.38 340.959 Q1940.53 338.435 1940.53 334.269 L1940.53 333.32 L1936.3 333.32 M1944.79 331.56 L1944.79 346.352 L1940.53 346.352 L1940.53 342.417 Q1939.08 344.778 1936.9 345.912 Q1934.72 347.023 1931.58 347.023 Q1927.59 347.023 1925.23 344.801 Q1922.89 342.556 1922.89 338.806 Q1922.89 334.431 1925.81 332.209 Q1928.75 329.986 1934.56 329.986 L1940.53 329.986 L1940.53 329.57 Q1940.53 326.63 1938.59 325.033 Q1936.67 323.412 1933.17 323.412 Q1930.95 323.412 1928.84 323.945 Q1926.74 324.477 1924.79 325.542 L1924.79 321.607 Q1927.13 320.704 1929.33 320.264 Q1931.53 319.801 1933.61 319.801 Q1939.24 319.801 1942.02 322.718 Q1944.79 325.635 1944.79 331.56 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip020)\" d=\"M1975.12 330.704 L1975.12 346.352 L1970.86 346.352 L1970.86 330.843 Q1970.86 327.162 1969.42 325.334 Q1967.99 323.505 1965.12 323.505 Q1961.67 323.505 1959.68 325.704 Q1957.69 327.903 1957.69 331.699 L1957.69 346.352 L1953.4 346.352 L1953.4 320.426 L1957.69 320.426 L1957.69 324.454 Q1959.21 322.116 1961.27 320.959 Q1963.36 319.801 1966.07 319.801 Q1970.53 319.801 1972.83 322.579 Q1975.12 325.334 1975.12 330.704 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><polyline clip-path=\"url(#clip020)\" style=\"stroke:#3da44d; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"1584.85,380.912 1709.13,380.912 \"/>\n<path clip-path=\"url(#clip020)\" d=\"M1734.12 394.303 L1734.12 408.053 L1729.84 408.053 L1729.84 372.266 L1734.12 372.266 L1734.12 376.201 Q1735.47 373.887 1737.5 372.776 Q1739.56 371.641 1742.41 371.641 Q1747.13 371.641 1750.07 375.391 Q1753.03 379.141 1753.03 385.252 Q1753.03 391.363 1750.07 395.113 Q1747.13 398.863 1742.41 398.863 Q1739.56 398.863 1737.5 397.752 Q1735.47 396.618 1734.12 394.303 M1748.61 385.252 Q1748.61 380.553 1746.67 377.891 Q1744.75 375.206 1741.37 375.206 Q1737.99 375.206 1736.04 377.891 Q1734.12 380.553 1734.12 385.252 Q1734.12 389.951 1736.04 392.637 Q1737.99 395.299 1741.37 395.299 Q1744.75 395.299 1746.67 392.637 Q1748.61 389.951 1748.61 385.252 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip020)\" d=\"M1775.12 376.248 Q1774.4 375.831 1773.54 375.646 Q1772.71 375.438 1771.69 375.438 Q1768.08 375.438 1766.14 377.799 Q1764.22 380.137 1764.22 384.535 L1764.22 398.192 L1759.93 398.192 L1759.93 372.266 L1764.22 372.266 L1764.22 376.294 Q1765.56 373.933 1767.71 372.799 Q1769.86 371.641 1772.94 371.641 Q1773.38 371.641 1773.91 371.711 Q1774.45 371.757 1775.09 371.873 L1775.12 376.248 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip020)\" d=\"M1788.59 375.252 Q1785.16 375.252 1783.17 377.938 Q1781.18 380.6 1781.18 385.252 Q1781.18 389.905 1783.15 392.59 Q1785.14 395.252 1788.59 395.252 Q1791.99 395.252 1793.98 392.567 Q1795.97 389.882 1795.97 385.252 Q1795.97 380.646 1793.98 377.961 Q1791.99 375.252 1788.59 375.252 M1788.59 371.641 Q1794.15 371.641 1797.32 375.252 Q1800.49 378.863 1800.49 385.252 Q1800.49 391.618 1797.32 395.252 Q1794.15 398.863 1788.59 398.863 Q1783.01 398.863 1779.84 395.252 Q1776.69 391.618 1776.69 385.252 Q1776.69 378.863 1779.84 375.252 Q1783.01 371.641 1788.59 371.641 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip020)\" d=\"M1807.55 372.266 L1811.81 372.266 L1811.81 398.655 Q1811.81 403.609 1809.91 405.831 Q1808.03 408.053 1803.84 408.053 L1802.22 408.053 L1802.22 404.442 L1803.36 404.442 Q1805.79 404.442 1806.67 403.308 Q1807.55 402.197 1807.55 398.655 L1807.55 372.266 M1807.55 362.174 L1811.81 362.174 L1811.81 367.567 L1807.55 367.567 L1807.55 362.174 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip020)\" d=\"M1842.9 384.164 L1842.9 386.248 L1823.31 386.248 Q1823.59 390.646 1825.95 392.961 Q1828.34 395.252 1832.57 395.252 Q1835.03 395.252 1837.32 394.65 Q1839.63 394.049 1841.9 392.845 L1841.9 396.873 Q1839.61 397.845 1837.2 398.354 Q1834.79 398.863 1832.32 398.863 Q1826.11 398.863 1822.48 395.252 Q1818.87 391.641 1818.87 385.484 Q1818.87 379.118 1822.29 375.391 Q1825.74 371.641 1831.58 371.641 Q1836.81 371.641 1839.84 375.021 Q1842.9 378.377 1842.9 384.164 M1838.64 382.914 Q1838.59 379.419 1836.67 377.336 Q1834.77 375.252 1831.62 375.252 Q1828.06 375.252 1825.9 377.266 Q1823.78 379.28 1823.45 382.938 L1838.64 382.914 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip020)\" d=\"M1868.54 373.262 L1868.54 377.243 Q1866.74 376.248 1864.91 375.762 Q1863.1 375.252 1861.25 375.252 Q1857.11 375.252 1854.82 377.891 Q1852.52 380.507 1852.52 385.252 Q1852.52 389.998 1854.82 392.637 Q1857.11 395.252 1861.25 395.252 Q1863.1 395.252 1864.91 394.766 Q1866.74 394.257 1868.54 393.262 L1868.54 397.197 Q1866.76 398.03 1864.84 398.447 Q1862.94 398.863 1860.79 398.863 Q1854.93 398.863 1851.48 395.183 Q1848.03 391.502 1848.03 385.252 Q1848.03 378.91 1851.51 375.276 Q1855 371.641 1861.07 371.641 Q1863.03 371.641 1864.91 372.058 Q1866.78 372.451 1868.54 373.262 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip020)\" d=\"M1880.16 364.905 L1880.16 372.266 L1888.94 372.266 L1888.94 375.576 L1880.16 375.576 L1880.16 389.65 Q1880.16 392.822 1881.02 393.725 Q1881.9 394.627 1884.56 394.627 L1888.94 394.627 L1888.94 398.192 L1884.56 398.192 Q1879.63 398.192 1877.76 396.363 Q1875.88 394.512 1875.88 389.65 L1875.88 375.576 L1872.76 375.576 L1872.76 372.266 L1875.88 372.266 L1875.88 364.905 L1880.16 364.905 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip020)\" d=\"M1916.71 384.164 L1916.71 386.248 L1897.13 386.248 Q1897.41 390.646 1899.77 392.961 Q1902.15 395.252 1906.39 395.252 Q1908.84 395.252 1911.14 394.65 Q1913.45 394.049 1915.72 392.845 L1915.72 396.873 Q1913.43 397.845 1911.02 398.354 Q1908.61 398.863 1906.14 398.863 Q1899.93 398.863 1896.3 395.252 Q1892.69 391.641 1892.69 385.484 Q1892.69 379.118 1896.11 375.391 Q1899.56 371.641 1905.4 371.641 Q1910.63 371.641 1913.66 375.021 Q1916.71 378.377 1916.71 384.164 M1912.46 382.914 Q1912.41 379.419 1910.49 377.336 Q1908.59 375.252 1905.44 375.252 Q1901.88 375.252 1899.72 377.266 Q1897.59 379.28 1897.27 382.938 L1912.46 382.914 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip020)\" d=\"M1940.77 376.201 L1940.77 362.174 L1945.02 362.174 L1945.02 398.192 L1940.77 398.192 L1940.77 394.303 Q1939.42 396.618 1937.36 397.752 Q1935.33 398.863 1932.46 398.863 Q1927.76 398.863 1924.79 395.113 Q1921.85 391.363 1921.85 385.252 Q1921.85 379.141 1924.79 375.391 Q1927.76 371.641 1932.46 371.641 Q1935.33 371.641 1937.36 372.776 Q1939.42 373.887 1940.77 376.201 M1926.25 385.252 Q1926.25 389.951 1928.17 392.637 Q1930.12 395.299 1933.5 395.299 Q1936.88 395.299 1938.82 392.637 Q1940.77 389.951 1940.77 385.252 Q1940.77 380.553 1938.82 377.891 Q1936.88 375.206 1933.5 375.206 Q1930.12 375.206 1928.17 377.891 Q1926.25 380.553 1926.25 385.252 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip020)\" d=\"M1991.04 384.164 L1991.04 386.248 L1971.46 386.248 Q1971.74 390.646 1974.1 392.961 Q1976.48 395.252 1980.72 395.252 Q1983.17 395.252 1985.46 394.65 Q1987.78 394.049 1990.05 392.845 L1990.05 396.873 Q1987.76 397.845 1985.35 398.354 Q1982.94 398.863 1980.46 398.863 Q1974.26 398.863 1970.63 395.252 Q1967.02 391.641 1967.02 385.484 Q1967.02 379.118 1970.44 375.391 Q1973.89 371.641 1979.72 371.641 Q1984.95 371.641 1987.99 375.021 Q1991.04 378.377 1991.04 384.164 M1986.78 382.914 Q1986.74 379.419 1984.82 377.336 Q1982.92 375.252 1979.77 375.252 Q1976.2 375.252 1974.05 377.266 Q1971.92 379.28 1971.6 382.938 L1986.78 382.914 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip020)\" d=\"M2019.58 382.544 L2019.58 398.192 L2015.32 398.192 L2015.32 382.683 Q2015.32 379.002 2013.89 377.174 Q2012.45 375.345 2009.58 375.345 Q2006.14 375.345 2004.14 377.544 Q2002.15 379.743 2002.15 383.539 L2002.15 398.192 L1997.87 398.192 L1997.87 372.266 L2002.15 372.266 L2002.15 376.294 Q2003.68 373.956 2005.74 372.799 Q2007.83 371.641 2010.53 371.641 Q2015 371.641 2017.29 374.419 Q2019.58 377.174 2019.58 382.544 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip020)\" d=\"M2050.26 384.164 L2050.26 386.248 L2030.67 386.248 Q2030.95 390.646 2033.31 392.961 Q2035.7 395.252 2039.93 395.252 Q2042.39 395.252 2044.68 394.65 Q2046.99 394.049 2049.26 392.845 L2049.26 396.873 Q2046.97 397.845 2044.56 398.354 Q2042.15 398.863 2039.68 398.863 Q2033.47 398.863 2029.84 395.252 Q2026.23 391.641 2026.23 385.484 Q2026.23 379.118 2029.65 375.391 Q2033.1 371.641 2038.94 371.641 Q2044.17 371.641 2047.2 375.021 Q2050.26 378.377 2050.26 384.164 M2046 382.914 Q2045.95 379.419 2044.03 377.336 Q2042.13 375.252 2038.98 375.252 Q2035.42 375.252 2033.26 377.266 Q2031.14 379.28 2030.81 382.938 L2046 382.914 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip020)\" d=\"M2072.27 376.248 Q2071.55 375.831 2070.7 375.646 Q2069.86 375.438 2068.84 375.438 Q2065.23 375.438 2063.29 377.799 Q2061.37 380.137 2061.37 384.535 L2061.37 398.192 L2057.08 398.192 L2057.08 372.266 L2061.37 372.266 L2061.37 376.294 Q2062.71 373.933 2064.86 372.799 Q2067.01 371.641 2070.09 371.641 Q2070.53 371.641 2071.07 371.711 Q2071.6 371.757 2072.25 371.873 L2072.27 376.248 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip020)\" d=\"M2092.96 384.928 Q2092.96 380.299 2091.04 377.752 Q2089.14 375.206 2085.69 375.206 Q2082.27 375.206 2080.35 377.752 Q2078.45 380.299 2078.45 384.928 Q2078.45 389.535 2080.35 392.081 Q2082.27 394.627 2085.69 394.627 Q2089.14 394.627 2091.04 392.081 Q2092.96 389.535 2092.96 384.928 M2097.22 394.975 Q2097.22 401.595 2094.28 404.812 Q2091.34 408.053 2085.28 408.053 Q2083.03 408.053 2081.04 407.706 Q2079.05 407.382 2077.18 406.687 L2077.18 402.544 Q2079.05 403.562 2080.88 404.049 Q2082.71 404.535 2084.61 404.535 Q2088.8 404.535 2090.88 402.336 Q2092.96 400.16 2092.96 395.738 L2092.96 393.632 Q2091.64 395.924 2089.58 397.058 Q2087.52 398.192 2084.65 398.192 Q2079.88 398.192 2076.97 394.558 Q2074.05 390.924 2074.05 384.928 Q2074.05 378.91 2076.97 375.276 Q2079.88 371.641 2084.65 371.641 Q2087.52 371.641 2089.58 372.776 Q2091.64 373.91 2092.96 376.201 L2092.96 372.266 L2097.22 372.266 L2097.22 394.975 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip020)\" d=\"M2116.78 400.599 Q2114.98 405.229 2113.26 406.641 Q2111.55 408.053 2108.68 408.053 L2105.28 408.053 L2105.28 404.488 L2107.78 404.488 Q2109.54 404.488 2110.51 403.655 Q2111.48 402.822 2112.66 399.72 L2113.43 397.775 L2102.94 372.266 L2107.45 372.266 L2115.56 392.544 L2123.66 372.266 L2128.17 372.266 L2116.78 400.599 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip020)\" d=\"M719.687 899.083 L1838.19 899.083 L1838.19 462.094 L719.687 462.094  Z\" fill=\"#ffffff\" fill-rule=\"evenodd\" fill-opacity=\"1\"/>\n<defs>\n  <clipPath id=\"clip023\">\n    <rect x=\"719\" y=\"462\" width=\"1120\" height=\"438\"/>\n  </clipPath>\n</defs>\n<polyline clip-path=\"url(#clip023)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:2; stroke-opacity:0.1; fill:none\" points=\"719.687,899.083 719.687,462.094 \"/>\n<polyline clip-path=\"url(#clip023)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:2; stroke-opacity:0.1; fill:none\" points=\"999.313,899.083 999.313,462.094 \"/>\n<polyline clip-path=\"url(#clip023)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:2; stroke-opacity:0.1; fill:none\" points=\"1278.94,899.083 1278.94,462.094 \"/>\n<polyline clip-path=\"url(#clip023)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:2; stroke-opacity:0.1; fill:none\" points=\"1558.56,899.083 1558.56,462.094 \"/>\n<polyline clip-path=\"url(#clip023)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:2; stroke-opacity:0.1; fill:none\" points=\"1838.19,899.083 1838.19,462.094 \"/>\n<polyline clip-path=\"url(#clip023)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:2; stroke-opacity:0.1; fill:none\" points=\"719.687,879.22 1838.19,879.22 \"/>\n<polyline clip-path=\"url(#clip023)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:2; stroke-opacity:0.1; fill:none\" points=\"719.687,779.904 1838.19,779.904 \"/>\n<polyline clip-path=\"url(#clip023)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:2; stroke-opacity:0.1; fill:none\" points=\"719.687,680.588 1838.19,680.588 \"/>\n<polyline clip-path=\"url(#clip023)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:2; stroke-opacity:0.1; fill:none\" points=\"719.687,581.273 1838.19,581.273 \"/>\n<polyline clip-path=\"url(#clip023)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:2; stroke-opacity:0.1; fill:none\" points=\"719.687,481.957 1838.19,481.957 \"/>\n<polyline clip-path=\"url(#clip020)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"719.687,899.083 1838.19,899.083 \"/>\n<polyline clip-path=\"url(#clip020)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"719.687,899.083 719.687,880.185 \"/>\n<polyline clip-path=\"url(#clip020)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"999.313,899.083 999.313,880.185 \"/>\n<polyline clip-path=\"url(#clip020)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"1278.94,899.083 1278.94,880.185 \"/>\n<polyline clip-path=\"url(#clip020)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"1558.56,899.083 1558.56,880.185 \"/>\n<polyline clip-path=\"url(#clip020)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"1838.19,899.083 1838.19,880.185 \"/>\n<path clip-path=\"url(#clip020)\" d=\"M664.213 957.547 L671.852 957.547 L671.852 931.182 L663.542 932.849 L663.542 928.589 L671.806 926.923 L676.482 926.923 L676.482 957.547 L684.12 957.547 L684.12 961.483 L664.213 961.483 L664.213 957.547 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip020)\" d=\"M703.565 930.001 Q699.954 930.001 698.125 933.566 Q696.319 937.108 696.319 944.237 Q696.319 951.344 698.125 954.909 Q699.954 958.45 703.565 958.45 Q707.199 958.45 709.005 954.909 Q710.833 951.344 710.833 944.237 Q710.833 937.108 709.005 933.566 Q707.199 930.001 703.565 930.001 M703.565 926.298 Q709.375 926.298 712.43 930.904 Q715.509 935.487 715.509 944.237 Q715.509 952.964 712.43 957.571 Q709.375 962.154 703.565 962.154 Q697.755 962.154 694.676 957.571 Q691.62 952.964 691.62 944.237 Q691.62 935.487 694.676 930.904 Q697.755 926.298 703.565 926.298 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip020)\" d=\"M733.727 930.001 Q730.116 930.001 728.287 933.566 Q726.481 937.108 726.481 944.237 Q726.481 951.344 728.287 954.909 Q730.116 958.45 733.727 958.45 Q737.361 958.45 739.166 954.909 Q740.995 951.344 740.995 944.237 Q740.995 937.108 739.166 933.566 Q737.361 930.001 733.727 930.001 M733.727 926.298 Q739.537 926.298 742.592 930.904 Q745.671 935.487 745.671 944.237 Q745.671 952.964 742.592 957.571 Q739.537 962.154 733.727 962.154 Q727.916 962.154 724.838 957.571 Q721.782 952.964 721.782 944.237 Q721.782 935.487 724.838 930.904 Q727.916 926.298 733.727 926.298 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip020)\" d=\"M763.888 930.001 Q760.277 930.001 758.449 933.566 Q756.643 937.108 756.643 944.237 Q756.643 951.344 758.449 954.909 Q760.277 958.45 763.888 958.45 Q767.523 958.45 769.328 954.909 Q771.157 951.344 771.157 944.237 Q771.157 937.108 769.328 933.566 Q767.523 930.001 763.888 930.001 M763.888 926.298 Q769.699 926.298 772.754 930.904 Q775.833 935.487 775.833 944.237 Q775.833 952.964 772.754 957.571 Q769.699 962.154 763.888 962.154 Q758.078 962.154 755 957.571 Q751.944 952.964 751.944 944.237 Q751.944 935.487 755 930.904 Q758.078 926.298 763.888 926.298 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip020)\" d=\"M943.839 957.547 L951.477 957.547 L951.477 931.182 L943.167 932.849 L943.167 928.589 L951.431 926.923 L956.107 926.923 L956.107 957.547 L963.746 957.547 L963.746 961.483 L943.839 961.483 L943.839 957.547 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip020)\" d=\"M973.237 926.923 L991.593 926.923 L991.593 930.858 L977.519 930.858 L977.519 939.33 Q978.538 938.983 979.556 938.821 Q980.575 938.636 981.593 938.636 Q987.38 938.636 990.76 941.807 Q994.139 944.978 994.139 950.395 Q994.139 955.973 990.667 959.075 Q987.195 962.154 980.875 962.154 Q978.7 962.154 976.431 961.784 Q974.186 961.413 971.778 960.672 L971.778 955.973 Q973.862 957.108 976.084 957.663 Q978.306 958.219 980.783 958.219 Q984.788 958.219 987.125 956.112 Q989.463 954.006 989.463 950.395 Q989.463 946.784 987.125 944.677 Q984.788 942.571 980.783 942.571 Q978.908 942.571 977.033 942.987 Q975.181 943.404 973.237 944.284 L973.237 926.923 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip020)\" d=\"M1013.35 930.001 Q1009.74 930.001 1007.91 933.566 Q1006.11 937.108 1006.11 944.237 Q1006.11 951.344 1007.91 954.909 Q1009.74 958.45 1013.35 958.45 Q1016.99 958.45 1018.79 954.909 Q1020.62 951.344 1020.62 944.237 Q1020.62 937.108 1018.79 933.566 Q1016.99 930.001 1013.35 930.001 M1013.35 926.298 Q1019.16 926.298 1022.22 930.904 Q1025.3 935.487 1025.3 944.237 Q1025.3 952.964 1022.22 957.571 Q1019.16 962.154 1013.35 962.154 Q1007.54 962.154 1004.46 957.571 Q1001.41 952.964 1001.41 944.237 Q1001.41 935.487 1004.46 930.904 Q1007.54 926.298 1013.35 926.298 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip020)\" d=\"M1043.51 930.001 Q1039.9 930.001 1038.07 933.566 Q1036.27 937.108 1036.27 944.237 Q1036.27 951.344 1038.07 954.909 Q1039.9 958.45 1043.51 958.45 Q1047.15 958.45 1048.95 954.909 Q1050.78 951.344 1050.78 944.237 Q1050.78 937.108 1048.95 933.566 Q1047.15 930.001 1043.51 930.001 M1043.51 926.298 Q1049.32 926.298 1052.38 930.904 Q1055.46 935.487 1055.46 944.237 Q1055.46 952.964 1052.38 957.571 Q1049.32 962.154 1043.51 962.154 Q1037.7 962.154 1034.63 957.571 Q1031.57 952.964 1031.57 944.237 Q1031.57 935.487 1034.63 930.904 Q1037.7 926.298 1043.51 926.298 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip020)\" d=\"M1227.55 957.547 L1243.87 957.547 L1243.87 961.483 L1221.92 961.483 L1221.92 957.547 Q1224.59 954.793 1229.17 950.163 Q1233.78 945.511 1234.96 944.168 Q1237.2 941.645 1238.08 939.909 Q1238.98 938.149 1238.98 936.46 Q1238.98 933.705 1237.04 931.969 Q1235.12 930.233 1232.02 930.233 Q1229.82 930.233 1227.36 930.997 Q1224.93 931.761 1222.16 933.312 L1222.16 928.589 Q1224.98 927.455 1227.43 926.876 Q1229.89 926.298 1231.92 926.298 Q1237.3 926.298 1240.49 928.983 Q1243.68 931.668 1243.68 936.159 Q1243.68 938.288 1242.87 940.21 Q1242.09 942.108 1239.98 944.7 Q1239.4 945.372 1236.3 948.589 Q1233.2 951.784 1227.55 957.547 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip020)\" d=\"M1263.68 930.001 Q1260.07 930.001 1258.24 933.566 Q1256.44 937.108 1256.44 944.237 Q1256.44 951.344 1258.24 954.909 Q1260.07 958.45 1263.68 958.45 Q1267.32 958.45 1269.12 954.909 Q1270.95 951.344 1270.95 944.237 Q1270.95 937.108 1269.12 933.566 Q1267.32 930.001 1263.68 930.001 M1263.68 926.298 Q1269.49 926.298 1272.55 930.904 Q1275.63 935.487 1275.63 944.237 Q1275.63 952.964 1272.55 957.571 Q1269.49 962.154 1263.68 962.154 Q1257.87 962.154 1254.8 957.571 Q1251.74 952.964 1251.74 944.237 Q1251.74 935.487 1254.8 930.904 Q1257.87 926.298 1263.68 926.298 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip020)\" d=\"M1293.85 930.001 Q1290.23 930.001 1288.41 933.566 Q1286.6 937.108 1286.6 944.237 Q1286.6 951.344 1288.41 954.909 Q1290.23 958.45 1293.85 958.45 Q1297.48 958.45 1299.29 954.909 Q1301.11 951.344 1301.11 944.237 Q1301.11 937.108 1299.29 933.566 Q1297.48 930.001 1293.85 930.001 M1293.85 926.298 Q1299.66 926.298 1302.71 930.904 Q1305.79 935.487 1305.79 944.237 Q1305.79 952.964 1302.71 957.571 Q1299.66 962.154 1293.85 962.154 Q1288.04 962.154 1284.96 957.571 Q1281.9 952.964 1281.9 944.237 Q1281.9 935.487 1284.96 930.904 Q1288.04 926.298 1293.85 926.298 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip020)\" d=\"M1324.01 930.001 Q1320.4 930.001 1318.57 933.566 Q1316.76 937.108 1316.76 944.237 Q1316.76 951.344 1318.57 954.909 Q1320.4 958.45 1324.01 958.45 Q1327.64 958.45 1329.45 954.909 Q1331.28 951.344 1331.28 944.237 Q1331.28 937.108 1329.45 933.566 Q1327.64 930.001 1324.01 930.001 M1324.01 926.298 Q1329.82 926.298 1332.87 930.904 Q1335.95 935.487 1335.95 944.237 Q1335.95 952.964 1332.87 957.571 Q1329.82 962.154 1324.01 962.154 Q1318.2 962.154 1315.12 957.571 Q1312.06 952.964 1312.06 944.237 Q1312.06 935.487 1315.12 930.904 Q1318.2 926.298 1324.01 926.298 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip020)\" d=\"M1507.18 957.547 L1523.49 957.547 L1523.49 961.483 L1501.55 961.483 L1501.55 957.547 Q1504.21 954.793 1508.8 950.163 Q1513.4 945.511 1514.58 944.168 Q1516.83 941.645 1517.71 939.909 Q1518.61 938.149 1518.61 936.46 Q1518.61 933.705 1516.67 931.969 Q1514.74 930.233 1511.64 930.233 Q1509.44 930.233 1506.99 930.997 Q1504.56 931.761 1501.78 933.312 L1501.78 928.589 Q1504.61 927.455 1507.06 926.876 Q1509.51 926.298 1511.55 926.298 Q1516.92 926.298 1520.12 928.983 Q1523.31 931.668 1523.31 936.159 Q1523.31 938.288 1522.5 940.21 Q1521.71 942.108 1519.61 944.7 Q1519.03 945.372 1515.93 948.589 Q1512.82 951.784 1507.18 957.547 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip020)\" d=\"M1533.36 926.923 L1551.71 926.923 L1551.71 930.858 L1537.64 930.858 L1537.64 939.33 Q1538.66 938.983 1539.68 938.821 Q1540.69 938.636 1541.71 938.636 Q1547.5 938.636 1550.88 941.807 Q1554.26 944.978 1554.26 950.395 Q1554.26 955.973 1550.79 959.075 Q1547.31 962.154 1540.99 962.154 Q1538.82 962.154 1536.55 961.784 Q1534.3 961.413 1531.9 960.672 L1531.9 955.973 Q1533.98 957.108 1536.2 957.663 Q1538.43 958.219 1540.9 958.219 Q1544.91 958.219 1547.24 956.112 Q1549.58 954.006 1549.58 950.395 Q1549.58 946.784 1547.24 944.677 Q1544.91 942.571 1540.9 942.571 Q1539.03 942.571 1537.15 942.987 Q1535.3 943.404 1533.36 944.284 L1533.36 926.923 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip020)\" d=\"M1573.47 930.001 Q1569.86 930.001 1568.03 933.566 Q1566.23 937.108 1566.23 944.237 Q1566.23 951.344 1568.03 954.909 Q1569.86 958.45 1573.47 958.45 Q1577.11 958.45 1578.91 954.909 Q1580.74 951.344 1580.74 944.237 Q1580.74 937.108 1578.91 933.566 Q1577.11 930.001 1573.47 930.001 M1573.47 926.298 Q1579.28 926.298 1582.34 930.904 Q1585.42 935.487 1585.42 944.237 Q1585.42 952.964 1582.34 957.571 Q1579.28 962.154 1573.47 962.154 Q1567.66 962.154 1564.58 957.571 Q1561.53 952.964 1561.53 944.237 Q1561.53 935.487 1564.58 930.904 Q1567.66 926.298 1573.47 926.298 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip020)\" d=\"M1603.63 930.001 Q1600.02 930.001 1598.19 933.566 Q1596.39 937.108 1596.39 944.237 Q1596.39 951.344 1598.19 954.909 Q1600.02 958.45 1603.63 958.45 Q1607.27 958.45 1609.07 954.909 Q1610.9 951.344 1610.9 944.237 Q1610.9 937.108 1609.07 933.566 Q1607.27 930.001 1603.63 930.001 M1603.63 926.298 Q1609.44 926.298 1612.5 930.904 Q1615.58 935.487 1615.58 944.237 Q1615.58 952.964 1612.5 957.571 Q1609.44 962.154 1603.63 962.154 Q1597.82 962.154 1594.74 957.571 Q1591.69 952.964 1591.69 944.237 Q1591.69 935.487 1594.74 930.904 Q1597.82 926.298 1603.63 926.298 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip020)\" d=\"M1796.87 942.848 Q1800.23 943.566 1802.1 945.835 Q1804 948.103 1804 951.436 Q1804 956.552 1800.48 959.353 Q1796.96 962.154 1790.48 962.154 Q1788.31 962.154 1785.99 961.714 Q1783.7 961.297 1781.25 960.441 L1781.25 955.927 Q1783.19 957.061 1785.5 957.64 Q1787.82 958.219 1790.34 958.219 Q1794.74 958.219 1797.03 956.483 Q1799.35 954.747 1799.35 951.436 Q1799.35 948.381 1797.19 946.668 Q1795.06 944.932 1791.25 944.932 L1787.22 944.932 L1787.22 941.089 L1791.43 941.089 Q1794.88 941.089 1796.71 939.724 Q1798.54 938.335 1798.54 935.742 Q1798.54 933.08 1796.64 931.668 Q1794.76 930.233 1791.25 930.233 Q1789.32 930.233 1787.13 930.649 Q1784.93 931.066 1782.29 931.946 L1782.29 927.779 Q1784.95 927.038 1787.26 926.668 Q1789.6 926.298 1791.66 926.298 Q1796.99 926.298 1800.09 928.728 Q1803.19 931.136 1803.19 935.256 Q1803.19 938.126 1801.55 940.117 Q1799.9 942.085 1796.87 942.848 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip020)\" d=\"M1822.87 930.001 Q1819.25 930.001 1817.43 933.566 Q1815.62 937.108 1815.62 944.237 Q1815.62 951.344 1817.43 954.909 Q1819.25 958.45 1822.87 958.45 Q1826.5 958.45 1828.31 954.909 Q1830.13 951.344 1830.13 944.237 Q1830.13 937.108 1828.31 933.566 Q1826.5 930.001 1822.87 930.001 M1822.87 926.298 Q1828.68 926.298 1831.73 930.904 Q1834.81 935.487 1834.81 944.237 Q1834.81 952.964 1831.73 957.571 Q1828.68 962.154 1822.87 962.154 Q1817.06 962.154 1813.98 957.571 Q1810.92 952.964 1810.92 944.237 Q1810.92 935.487 1813.98 930.904 Q1817.06 926.298 1822.87 926.298 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip020)\" d=\"M1853.03 930.001 Q1849.42 930.001 1847.59 933.566 Q1845.78 937.108 1845.78 944.237 Q1845.78 951.344 1847.59 954.909 Q1849.42 958.45 1853.03 958.45 Q1856.66 958.45 1858.47 954.909 Q1860.3 951.344 1860.3 944.237 Q1860.3 937.108 1858.47 933.566 Q1856.66 930.001 1853.03 930.001 M1853.03 926.298 Q1858.84 926.298 1861.89 930.904 Q1864.97 935.487 1864.97 944.237 Q1864.97 952.964 1861.89 957.571 Q1858.84 962.154 1853.03 962.154 Q1847.22 962.154 1844.14 957.571 Q1841.08 952.964 1841.08 944.237 Q1841.08 935.487 1844.14 930.904 Q1847.22 926.298 1853.03 926.298 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip020)\" d=\"M1883.19 930.001 Q1879.58 930.001 1877.75 933.566 Q1875.94 937.108 1875.94 944.237 Q1875.94 951.344 1877.75 954.909 Q1879.58 958.45 1883.19 958.45 Q1886.82 958.45 1888.63 954.909 Q1890.46 951.344 1890.46 944.237 Q1890.46 937.108 1888.63 933.566 Q1886.82 930.001 1883.19 930.001 M1883.19 926.298 Q1889 926.298 1892.06 930.904 Q1895.13 935.487 1895.13 944.237 Q1895.13 952.964 1892.06 957.571 Q1889 962.154 1883.19 962.154 Q1877.38 962.154 1874.3 957.571 Q1871.24 952.964 1871.24 944.237 Q1871.24 935.487 1874.3 930.904 Q1877.38 926.298 1883.19 926.298 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><polyline clip-path=\"url(#clip020)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"719.687,899.083 719.687,462.094 \"/>\n<polyline clip-path=\"url(#clip020)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"719.687,879.22 738.585,879.22 \"/>\n<polyline clip-path=\"url(#clip020)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"719.687,779.904 738.585,779.904 \"/>\n<polyline clip-path=\"url(#clip020)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"719.687,680.588 738.585,680.588 \"/>\n<polyline clip-path=\"url(#clip020)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"719.687,581.273 738.585,581.273 \"/>\n<polyline clip-path=\"url(#clip020)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"719.687,481.957 738.585,481.957 \"/>\n<path clip-path=\"url(#clip020)\" d=\"M576.743 879.671 L606.419 879.671 L606.419 883.606 L576.743 883.606 L576.743 879.671 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip020)\" d=\"M616.558 861.94 L634.914 861.94 L634.914 865.875 L620.84 865.875 L620.84 874.347 Q621.859 874 622.877 873.838 Q623.896 873.652 624.914 873.652 Q630.702 873.652 634.081 876.824 Q637.461 879.995 637.461 885.412 Q637.461 890.99 633.989 894.092 Q630.516 897.171 624.197 897.171 Q622.021 897.171 619.752 896.8 Q617.507 896.43 615.1 895.689 L615.1 890.99 Q617.183 892.125 619.405 892.68 Q621.627 893.236 624.104 893.236 Q628.109 893.236 630.447 891.129 Q632.785 889.023 632.785 885.412 Q632.785 881.801 630.447 879.694 Q628.109 877.588 624.104 877.588 Q622.229 877.588 620.354 878.004 Q618.502 878.421 616.558 879.301 L616.558 861.94 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip020)\" d=\"M646.674 890.62 L651.558 890.62 L651.558 896.5 L646.674 896.5 L646.674 890.62 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip020)\" d=\"M671.743 865.018 Q668.132 865.018 666.303 868.583 Q664.498 872.125 664.498 879.254 Q664.498 886.361 666.303 889.925 Q668.132 893.467 671.743 893.467 Q675.377 893.467 677.183 889.925 Q679.011 886.361 679.011 879.254 Q679.011 872.125 677.183 868.583 Q675.377 865.018 671.743 865.018 M671.743 861.315 Q677.553 861.315 680.609 865.921 Q683.687 870.504 683.687 879.254 Q683.687 887.981 680.609 892.588 Q677.553 897.171 671.743 897.171 Q665.933 897.171 662.854 892.588 Q659.799 887.981 659.799 879.254 Q659.799 870.504 662.854 865.921 Q665.933 861.315 671.743 861.315 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip020)\" d=\"M577.739 780.355 L607.415 780.355 L607.415 784.291 L577.739 784.291 L577.739 780.355 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip020)\" d=\"M630.354 766.698 L618.549 785.147 L630.354 785.147 L630.354 766.698 M629.127 762.624 L635.007 762.624 L635.007 785.147 L639.938 785.147 L639.938 789.036 L635.007 789.036 L635.007 797.184 L630.354 797.184 L630.354 789.036 L614.753 789.036 L614.753 784.522 L629.127 762.624 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip020)\" d=\"M647.669 791.304 L652.553 791.304 L652.553 797.184 L647.669 797.184 L647.669 791.304 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip020)\" d=\"M662.785 762.624 L681.141 762.624 L681.141 766.559 L667.067 766.559 L667.067 775.031 Q668.086 774.684 669.104 774.522 Q670.123 774.337 671.141 774.337 Q676.928 774.337 680.308 777.508 Q683.687 780.679 683.687 786.096 Q683.687 791.675 680.215 794.777 Q676.743 797.855 670.424 797.855 Q668.248 797.855 665.979 797.485 Q663.734 797.115 661.326 796.374 L661.326 791.675 Q663.41 792.809 665.632 793.365 Q667.854 793.92 670.331 793.92 Q674.336 793.92 676.673 791.814 Q679.011 789.707 679.011 786.096 Q679.011 782.485 676.673 780.379 Q674.336 778.272 670.331 778.272 Q668.456 778.272 666.581 778.689 Q664.729 779.105 662.785 779.985 L662.785 762.624 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip020)\" d=\"M576.743 681.04 L606.419 681.04 L606.419 684.975 L576.743 684.975 L576.743 681.04 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip020)\" d=\"M629.359 667.382 L617.553 685.831 L629.359 685.831 L629.359 667.382 M628.132 663.308 L634.012 663.308 L634.012 685.831 L638.942 685.831 L638.942 689.72 L634.012 689.72 L634.012 697.868 L629.359 697.868 L629.359 689.72 L613.757 689.72 L613.757 685.206 L628.132 663.308 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip020)\" d=\"M646.674 691.989 L651.558 691.989 L651.558 697.868 L646.674 697.868 L646.674 691.989 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip020)\" d=\"M671.743 666.387 Q668.132 666.387 666.303 669.952 Q664.498 673.494 664.498 680.623 Q664.498 687.73 666.303 691.294 Q668.132 694.836 671.743 694.836 Q675.377 694.836 677.183 691.294 Q679.011 687.73 679.011 680.623 Q679.011 673.494 677.183 669.952 Q675.377 666.387 671.743 666.387 M671.743 662.683 Q677.553 662.683 680.609 667.29 Q683.687 671.873 683.687 680.623 Q683.687 689.35 680.609 693.956 Q677.553 698.54 671.743 698.54 Q665.933 698.54 662.854 693.956 Q659.799 689.35 659.799 680.623 Q659.799 671.873 662.854 667.29 Q665.933 662.683 671.743 662.683 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip020)\" d=\"M577.739 581.724 L607.415 581.724 L607.415 585.659 L577.739 585.659 L577.739 581.724 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip020)\" d=\"M631.674 579.919 Q635.03 580.636 636.905 582.905 Q638.803 585.173 638.803 588.507 Q638.803 593.622 635.285 596.423 Q631.766 599.224 625.285 599.224 Q623.109 599.224 620.794 598.784 Q618.502 598.368 616.049 597.511 L616.049 592.997 Q617.993 594.132 620.308 594.71 Q622.623 595.289 625.146 595.289 Q629.544 595.289 631.836 593.553 Q634.151 591.817 634.151 588.507 Q634.151 585.451 631.998 583.738 Q629.868 582.002 626.049 582.002 L622.021 582.002 L622.021 578.159 L626.234 578.159 Q629.683 578.159 631.512 576.794 Q633.34 575.405 633.34 572.812 Q633.34 570.15 631.442 568.738 Q629.567 567.303 626.049 567.303 Q624.127 567.303 621.928 567.72 Q619.729 568.136 617.09 569.016 L617.09 564.849 Q619.752 564.109 622.067 563.738 Q624.405 563.368 626.465 563.368 Q631.789 563.368 634.891 565.798 Q637.993 568.206 637.993 572.326 Q637.993 575.196 636.35 577.187 Q634.706 579.155 631.674 579.919 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip020)\" d=\"M647.669 592.673 L652.553 592.673 L652.553 598.553 L647.669 598.553 L647.669 592.673 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip020)\" d=\"M662.785 563.993 L681.141 563.993 L681.141 567.928 L667.067 567.928 L667.067 576.4 Q668.086 576.053 669.104 575.891 Q670.123 575.706 671.141 575.706 Q676.928 575.706 680.308 578.877 Q683.687 582.048 683.687 587.465 Q683.687 593.044 680.215 596.145 Q676.743 599.224 670.424 599.224 Q668.248 599.224 665.979 598.854 Q663.734 598.483 661.326 597.743 L661.326 593.044 Q663.41 594.178 665.632 594.733 Q667.854 595.289 670.331 595.289 Q674.336 595.289 676.673 593.183 Q679.011 591.076 679.011 587.465 Q679.011 583.854 676.673 581.747 Q674.336 579.641 670.331 579.641 Q668.456 579.641 666.581 580.058 Q664.729 580.474 662.785 581.354 L662.785 563.993 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip020)\" d=\"M576.743 482.409 L606.419 482.409 L606.419 486.344 L576.743 486.344 L576.743 482.409 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip020)\" d=\"M630.678 480.603 Q634.035 481.321 635.91 483.589 Q637.808 485.858 637.808 489.191 Q637.808 494.307 634.289 497.108 Q630.771 499.909 624.29 499.909 Q622.114 499.909 619.799 499.469 Q617.507 499.052 615.053 498.196 L615.053 493.682 Q616.998 494.816 619.313 495.395 Q621.627 495.973 624.151 495.973 Q628.549 495.973 630.84 494.237 Q633.155 492.501 633.155 489.191 Q633.155 486.136 631.002 484.423 Q628.873 482.686 625.053 482.686 L621.026 482.686 L621.026 478.844 L625.239 478.844 Q628.688 478.844 630.516 477.478 Q632.345 476.089 632.345 473.497 Q632.345 470.835 630.447 469.423 Q628.572 467.987 625.053 467.987 Q623.132 467.987 620.933 468.404 Q618.734 468.821 616.095 469.7 L616.095 465.534 Q618.757 464.793 621.072 464.423 Q623.41 464.052 625.47 464.052 Q630.794 464.052 633.896 466.483 Q636.998 468.89 636.998 473.011 Q636.998 475.881 635.354 477.872 Q633.711 479.839 630.678 480.603 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip020)\" d=\"M646.674 493.358 L651.558 493.358 L651.558 499.237 L646.674 499.237 L646.674 493.358 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip020)\" d=\"M671.743 467.756 Q668.132 467.756 666.303 471.321 Q664.498 474.862 664.498 481.992 Q664.498 489.098 666.303 492.663 Q668.132 496.205 671.743 496.205 Q675.377 496.205 677.183 492.663 Q679.011 489.098 679.011 481.992 Q679.011 474.862 677.183 471.321 Q675.377 467.756 671.743 467.756 M671.743 464.052 Q677.553 464.052 680.609 468.659 Q683.687 473.242 683.687 481.992 Q683.687 490.719 680.609 495.325 Q677.553 499.909 671.743 499.909 Q665.933 499.909 662.854 495.325 Q659.799 490.719 659.799 481.992 Q659.799 473.242 662.854 468.659 Q665.933 464.052 671.743 464.052 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><polyline clip-path=\"url(#clip023)\" style=\"stroke:#009af9; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"160.995,-1577.5 161.555,-2922.08 162.114,-4155.78 162.673,-5286.05 163.232,-6319.78 163.792,-5856.65 164.351,-6807.39 164.91,-7633.43 165.469,-8401.67 166.029,-9099.51 166.588,-9729.67 167.147,-10296.5 167.706,-10804.2 168.266,-11237.5 168.825,-11639.1 169.384,-11973.2 169.943,-12282.1 170.503,-12548.7 171.062,-12058.3 171.621,-12265.9 172.18,-12438.2 172.74,-12587.4 173.299,-12180.1 173.858,-11826.5 174.417,-11503.3 174.977,-11195.7 175.536,-10204.8 176.095,-9669.87 176.655,-9786.47 177.214,-9887.2 177.773,-9983.08 178.332,-10052.3 178.892,-10095.5 179.451,-10131 180.01,-9914.14 180.569,-9693.59 181.129,-9663.38 181.688,-9249.88 182.247,-9028.39 182.806,-8662.46 183.366,-8315.53 183.925,-8265.06 184.484,-8064.55 185.043,-7868.33 185.603,-7782.33 186.162,-7694.93 186.721,-7616.95 187.28,-7522.76 187.84,-7326.12 188.399,-7227.78 188.958,-7122.04 189.517,-7013.13 190.077,-6724.06 190.636,-6531.07 191.195,-6342.46 191.754,-6152.83 192.314,-5757.32 192.873,-5522.46 193.432,-5163.44 193.991,-5086.99 194.551,-4935.72 195.11,-4735.22 195.669,-4659.2 196.228,-4411.41 196.788,-4340.61 197.347,-4121.97 197.906,-3949.56 198.465,-3834.65 199.025,-3721.12 199.584,-3603.6 200.143,-3396.83 200.702,-3333.7 201.262,-3225.38 201.821,-3115.39 202.38,-3046.89 202.939,-2828.56 203.499,-2725.49 204.058,-2662.45 204.617,-2528.46 205.176,-2358.73 205.736,-2269.53 206.295,-2180.83 206.854,-2062.46 207.413,-1974.12 207.973,-1922.54 208.532,-1839.83 209.091,-1760.88 209.65,-1651.42 210.21,-1541.72 210.769,-1466.45 211.328,-1393.46 211.887,-1240.78 212.447,-1200.07 213.006,-1109.44 213.565,-1018.25 214.124,-900.283 214.684,-864.052 215.243,-782.62 215.802,-752.734 216.361,-670.166 216.921,-592.325 217.48,-515.532 218.039,-490.637 218.598,-463.447 219.158,-436.288 219.717,-336.74 220.276,-270.463 220.835,-251.309 221.395,-183.206 221.954,-140.865 222.513,-120.142 223.072,-60.1129 223.632,-22.1029 224.191,36.2627 224.75,72.7311 225.309,127.492 225.869,137.958 226.428,146.983 226.987,159.894 227.546,130.313 228.106,149.406 228.665,188.408 229.224,205.881 229.783,258.011 230.343,274.204 230.902,309.012 231.461,342.206 232.02,392.836 232.58,403.837 233.139,431.463 233.698,500.904 234.257,530.17 234.817,573.895 235.376,617.057 235.935,615.01 236.494,637.174 237.054,640.144 237.613,661.947 238.172,719.875 238.731,719.319 239.291,755.028 239.85,733.406 240.409,733.22 240.968,769.127 241.528,824.151 242.087,836.624 242.646,871.096 243.205,883.733 243.765,898.2 244.324,930.46 244.883,921.107 245.442,965.024 246.002,974.145 246.561,981.352 247.12,952.996 247.679,1002.48 248.239,976.414 248.798,951.89 249.357,997.726 249.916,970.821 250.476,985.477 251.035,1000.21 251.594,1030.15 252.153,1038.87 252.713,1050.65 253.272,1040.34 253.831,1068.07 254.39,1039.67 254.95,1030.54 255.509,1002.84 256.068,1032.79 256.627,1079.18 257.187,1104.21 257.746,1111.09 258.305,1082.08 258.864,1089.07 259.424,1148.57 259.983,1169.88 260.542,1173.14 261.101,1161.51 261.661,1129.37 262.22,1135.52 262.779,1118.11 263.338,1107.13 263.898,1115.18 264.457,1103.18 265.016,1090.85 265.575,1081.41 266.135,1054.15 266.694,1097.28 267.253,1105.74 267.812,1089.89 268.372,1082.77 268.931,1089.65 269.49,1081.07 270.049,1051.81 270.609,1048.03 271.168,1022.15 271.727,1036.83 272.286,1029.84 272.846,1025.95 273.405,1037.95 273.964,1084.26 274.523,1095.17 275.083,1122.14 275.642,1145.31 276.201,1100.61 276.76,1070.99 277.32,1026.53 277.879,1039.16 278.438,1033.14 278.997,1044.96 279.557,1004.39 280.116,999.33 280.675,994.986 281.234,1025.73 281.794,1085.18 282.353,1110.61 282.912,1084.61 283.471,1109.55 284.031,1117.53 284.59,1139.67 285.149,1165.68 285.708,1167.64 286.268,1103.57 286.827,1090.09 287.386,1082.34 287.945,1090.77 288.505,1066.75 289.064,1059.11 289.623,1068.01 290.182,1074.34 290.742,1064.05 291.301,1026.64 291.86,1002.82 292.419,1015.31 292.979,991.895 293.538,990.593 294.097,986.619 294.656,949.992 295.216,945.081 295.775,944.501 296.334,961.434 296.893,961.111 297.453,953.212 298.012,936.212 298.571,931.756 299.13,996.412 299.69,1009.05 300.249,1003.35 300.808,962.141 301.368,958.073 301.927,956.215 302.486,907.234 303.045,938.326 303.605,901.909 304.164,901.445 304.723,902.422 305.282,900.386 305.842,899.377 306.401,899.145 306.96,880.512 307.519,880.02 308.079,913.616 308.638,894.61 309.197,913.976 309.756,932.156 310.316,928.044 310.875,906.684 311.434,922.75 311.993,938.517 312.553,934.226 313.112,946.935 313.671,957.822 314.23,953.495 314.79,948.906 315.349,931.835 315.908,943.659 316.467,959.383 317.027,942.204 317.586,955.055 318.145,928.121 318.704,911.168 319.264,907.144 319.823,872.244 320.382,906.588 320.941,936.996 321.501,962.502 322.06,943.427 322.619,922.193 323.178,952.459 323.738,951.192 324.297,963.412 324.856,944.691 325.415,924.232 325.975,921.948 326.534,937.3 327.093,917.27 327.652,914.537 328.212,961.222 328.771,970.487 329.33,983.287 329.889,996.224 330.449,1025.27 331.008,1081.92 331.567,1069.25 332.126,1057.08 332.686,1061.17 333.245,1015.93 333.804,1024.69 334.363,1002.63 334.923,1028.75 335.482,1086.62 336.041,1058.87 336.6,1018.14 337.16,1029.12 337.719,1032.24 338.278,1038.48 338.837,1058.57 339.397,1028.14 339.956,1018.98 340.515,1027.58 341.074,999.65 341.634,973.18 342.193,979.244 342.752,988.021 343.311,999.572 343.871,908.595 344.43,886.953 344.989,882.499 345.548,913.028 346.108,893.201 346.667,854.62 347.226,864.977 347.785,895.567 348.345,874.976 348.904,841.229 349.463,807.687 350.022,840.099 350.582,887.972 351.141,885.26 351.7,897.317 352.259,897.735 352.819,860.987 353.378,858.167 353.937,811.238 354.496,795.51 355.056,800.752 355.615,817.766 356.174,815.634 356.733,799.097 357.293,801.777 357.852,786.942 358.411,773.619 358.97,729.073 359.53,751.125 360.089,741.62 360.648,713.506 361.207,704.608 361.767,729.103 362.326,766.614 362.885,757.083 363.444,812.314 364.004,796.033 364.563,814.636 365.122,846.467 365.681,877.395 366.241,862.672 366.8,827.118 367.359,841.604 367.918,842.076 368.478,888.006 369.037,917.15 369.596,913.75 370.155,926.064 370.715,902.309 371.274,897.148 371.833,906.179 372.392,898.357 372.952,892.649 373.511,919.093 374.07,898.127 374.629,907.91 375.189,902.435 375.748,897.261 376.307,860.713 376.866,842.893 377.426,807.015 377.985,792.543 378.544,821.13 379.103,821.05 379.663,849.062 380.222,878.125 380.781,871.073 381.34,867.056 381.9,848.382 382.459,827.966 383.018,826.536 383.577,825.138 384.137,821.266 384.696,806.803 385.255,821.675 385.814,818.714 386.374,815.372 386.933,831.356 387.492,878.356 388.051,856.986 388.611,832.87 389.17,841.684 389.729,837.967 390.288,848.56 390.848,802.158 391.407,798.801 391.966,798.659 392.525,814.418 393.085,783.041 393.644,783.115 394.203,786.055 394.762,787.065 395.322,807.417 395.881,824.109 396.44,820.971 396.999,848.457 397.559,860.397 398.118,854.428 398.677,835.953 399.236,853.889 399.796,865.469 400.355,895.393 400.914,902.43 401.473,925.368 402.033,913.756 402.592,906.343 403.151,869.413 403.71,864.345 404.27,841.743 404.829,837.754 405.388,852.419 405.947,849.227 406.507,912.143 407.066,905.294 407.625,886.421 408.184,849.52 408.744,864.017 409.303,876.769 409.862,871.752 410.421,862.358 410.981,854.355 411.54,849.839 412.099,895.521 412.658,887.409 413.218,913.576 413.777,922.514 414.336,899.608 414.895,907.792 415.455,884.447 416.014,876.425 416.573,871.978 417.132,852.685 417.692,884.522 418.251,845.471 418.81,841.447 419.369,823.741 419.929,823.521 420.488,788.312 421.047,788.287 421.606,756.345 422.166,740.331 422.725,725.272 423.284,710.303 423.843,725.829 424.403,713.15 424.962,729.632 425.521,731.98 426.08,717.418 426.64,720.484 427.199,719.677 427.758,721.423 428.318,720.113 428.877,741.74 429.436,757.764 429.995,760.611 430.555,775.256 431.114,745.555 431.673,726.532 432.232,743.722 432.792,729.064 433.351,696.418 433.91,719.099 434.469,738.947 435.029,706.017 435.588,728.8 436.147,731.441 436.706,714.189 437.266,734.071 437.825,733.834 438.384,721.213 438.943,724.94 439.503,728.498 440.062,729.386 440.621,744.565 441.18,796.976 441.74,811.058 442.299,793.604 442.858,792.725 443.417,788.11 443.977,785.047 444.536,816.523 445.095,781.639 445.654,813.101 446.214,808.211 446.773,822.412 447.332,867.106 447.891,877.789 448.451,901.749 449.01,914.598 449.569,933.66 450.128,941.393 450.688,917.283 451.247,894.435 451.806,901.584 452.365,925.702 452.925,901.554 453.484,897.25 454.043,924.287 454.602,934.406 455.162,926.391 455.721,934.662 456.28,927.841 456.839,921.893 457.399,915.661 457.958,889.623 458.517,878.208 459.076,888.782 459.636,912.67 460.195,888.98 460.754,878.195 461.313,821.678 461.873,799.91 462.432,781.309 462.991,765.289 463.55,734.538 464.11,703.5 464.669,672.104 465.228,724.068 465.787,756.336 466.347,736.635 466.906,670.855 467.465,641.201 468.024,646.383 468.584,647.4 469.143,665.999 469.702,669.443 470.261,690.53 470.821,695.772 471.38,732.616 471.939,748.381 472.498,763.874 473.058,793.271 473.617,791.726 474.176,788.907 474.735,800.87 475.295,830.282 475.854,836.94 476.413,829.54 476.972,825.832 477.532,869.898 478.091,911.296 478.65,884.332 479.209,860.812 479.769,855.813 480.328,801.528 480.887,814.583 481.446,826.975 482.006,788.173 482.565,766.408 483.124,732.23 483.683,714.349 484.243,734.524 484.802,720.882 485.361,740.787 485.92,770.092 486.48,738.018 487.039,752.592 487.598,748.131 488.157,731.361 488.717,730.033 489.276,729.663 489.835,711.892 490.394,714.248 490.954,666.785 491.513,668.264 492.072,706.6 492.631,670.097 493.191,689.654 493.75,671.996 494.309,707.12 494.868,741.822 495.428,757.529 495.987,756.623 496.546,771.222 497.105,752.837 497.665,735.714 498.224,733.688 498.783,704.255 499.342,688.961 499.902,695.485 500.461,698.132 501.02,684.382 501.579,703.243 502.139,687.099 502.698,673.096 503.257,626.837 503.816,651.189 504.376,672.559 504.935,691.958 505.494,695.985 506.053,665.577 506.613,703.424 507.172,688.793 507.731,705.974 508.29,675.824 508.85,678.818 509.409,665.291 509.968,667.926 510.527,688.959 511.087,691.638 511.646,676.669 512.205,645.698 512.764,669.826 513.324,657.704 513.883,628.352 514.442,633.682 515.001,669.835 515.561,658.032 516.12,660.745 516.679,679.037 517.238,680.285 517.798,683.195 518.357,715.978 518.916,752.85 519.475,754.723 520.035,753.432 520.594,737.871 521.153,705.452 521.712,756.832 522.272,770.713 522.831,735.869 523.39,686.429 523.949,700.038 524.509,721.455 525.068,705.074 525.627,704.667 526.186,719.788 526.746,720.248 527.305,752.027 527.864,780.636 528.423,778.529 528.983,788.554 529.542,820.887 530.101,846.866 530.66,841.933 531.22,866.83 531.779,846.894 532.338,854.53 532.897,844.164 533.457,871.147 534.016,862.994 534.575,822.654 535.134,800.326 535.694,775.815 536.253,770.806 536.812,783.493 537.371,780.276 537.931,760.889 538.49,742.357 539.049,721.978 539.608,734.245 540.168,749.775 540.727,797.815 541.286,794.741 541.845,795.507 542.405,825 542.964,802.886 543.523,783.962 544.082,781.594 544.642,793.436 545.201,776.279 545.76,755.677 546.319,752.963 546.879,733.829 547.438,728.446 547.997,742.832 548.556,739.377 549.116,721.715 549.675,689.837 550.234,676.996 550.793,664.024 551.353,634.586 551.912,673.029 552.471,642.228 553.031,648.519 553.59,669.744 554.149,688.388 554.708,672.685 555.268,690.37 555.827,694.01 556.386,696.387 556.945,694.6 557.505,697.64 558.064,666.551 558.623,639.007 559.182,644.124 559.742,679.425 560.301,654.991 560.86,660.178 561.419,649.687 561.979,718.328 562.538,733.085 563.097,747.573 563.656,745.852 564.216,745.841 564.775,730.716 565.334,716.339 565.893,733.424 566.453,719.067 567.012,731.2 567.571,746.555 568.13,762.696 568.69,777.3 569.249,775.966 569.808,744.08 570.367,694.165 570.927,711.814 571.486,713.972 572.045,746.405 572.604,744.721 573.164,740.772 573.723,723.635 574.282,719.081 574.841,732.997 575.401,715.214 575.96,731.287 576.519,714.911 577.078,715.418 577.638,695.454 578.197,711.362 578.756,739.852 579.315,753.213 579.875,735.593 580.434,735.387 580.993,749.718 581.552,714.793 582.112,747.693 582.671,763.813 583.23,776.012 583.789,790.369 584.349,783.561 584.908,790.487 585.467,784.798 586.026,748.355 586.586,745.11 587.145,757.837 587.704,756.898 588.263,773.72 588.823,772.744 589.382,721.154 589.941,736.236 590.5,754.209 591.06,772.273 591.619,768.406 592.178,782.498 592.737,776.4 593.297,771.299 593.856,784.89 594.415,783.314 594.974,765.829 595.534,745.947 596.093,761.154 596.652,809.022 597.211,836.008 597.771,859.4 598.33,835.295 598.889,865.723 599.448,810.769 600.008,805.887 600.567,784.741 601.126,778.97 601.685,806.452 602.245,782.594 602.804,795.881 603.363,772.678 603.922,766.519 604.482,747.38 605.041,764.595 605.6,748.385 606.159,765.166 606.719,746.89 607.278,728.742 607.837,746.102 608.396,712.001 608.956,727.469 609.515,709.167 610.074,677.58 610.633,663.163 611.193,630.346 611.752,647.067 612.311,647.829 612.87,665.236 613.43,671.31 613.989,689.954 614.548,673.297 615.107,658.253 615.667,626.287 616.226,630.973 616.785,621.023 617.344,610.41 617.904,618.702 618.463,625.641 619.022,616.305 619.581,633.64 620.141,649.137 620.7,669.553 621.259,652.311 621.818,623.326 622.378,626.863 622.937,648.124 623.496,635.581 624.055,653.611 624.615,675.957 625.174,679.198 625.733,677.107 626.292,711.024 626.852,760.448 627.411,774.758 627.97,767.892 628.529,779.143 629.089,742.622 629.648,742.358 630.207,767.533 630.766,746.13 631.326,762.338 631.885,776.136 632.444,757.334 633.003,772.126 633.563,750.999 634.122,731.572 634.681,748.355 635.24,761.259 635.8,741.663 636.359,754.835 636.918,766.967 637.477,747.708 638.037,759.167 638.596,739.92 639.155,722.718 639.714,720.848 640.274,718.342 640.833,734.916 641.392,716.644 641.951,700.241 642.511,701.88 643.07,734.624 643.629,718.141 644.188,715.792 644.748,713.163 645.307,730.067 645.866,677.054 646.425,677.141 646.985,695.212 647.544,660.398 648.103,661.878 648.662,628.76 649.222,634.81 649.781,657.282 650.34,630.346 650.899,619.147 651.459,638.508 652.018,659.876 652.577,645.827 653.136,663.752 653.696,710.256 654.255,724.691 654.814,690.073 655.373,675.543 655.933,676.137 656.492,660.611 657.051,647.98 657.61,619.546 658.17,642.005 658.729,646.892 659.288,669.044 659.847,671.979 660.407,658.388 660.966,626.438 661.525,646.471 662.084,650.008 662.644,651.18 663.203,638.672 663.762,622.063 664.321,640.81 664.881,660.012 665.44,631.789 665.999,633.31 666.558,653.446 667.118,639.359 667.677,624.626 668.236,645.084 668.795,662.919 669.355,663.684 669.914,651.739 670.473,687.153 671.032,657.601 671.592,677.966 672.151,697.866 672.71,697.051 673.269,732.032 673.829,716.159 674.388,713.79 674.947,697.919 675.506,728.853 676.066,715.011 676.625,745.762 677.184,725.733 677.743,725.322 678.303,757.05 678.862,752.937 679.421,747.397 679.981,713.702 680.54,695.297 681.099,746.944 681.658,742.886 682.218,745.529 682.777,759.671 683.336,738.961 683.895,739.065 684.455,719.809 685.014,705.015 685.573,705.765 686.132,655.45 686.692,669.682 687.251,732.599 687.81,696.106 688.369,696.2 688.929,647.145 689.488,665.529 690.047,652.472 690.606,621.296 691.166,640.544 691.725,678.681 692.284,679.687 692.843,647.705 693.403,649.721 693.962,635.288 694.521,637.839 695.08,644.037 695.64,662.035 696.199,647.53 696.758,669.131 697.317,689.896 697.877,689.715 698.436,675.203 698.995,677.475 699.554,644.952 700.114,632.246 700.673,634.84 701.232,640.195 701.791,628.698 702.351,646.842 702.91,649.175 703.469,649.828 704.028,666.733 704.588,682.49 705.147,683.34 705.706,702.747 706.265,669.69 706.825,672.936 707.384,672.137 707.943,675.05 708.502,643.587 709.062,643.557 709.621,630.439 710.18,665.573 710.739,648.802 711.299,650.808 711.858,668.667 712.417,686.542 712.976,686.836 713.536,687.756 714.095,719.797 714.654,751.84 715.213,764.188 715.773,773.48 716.332,803.599 716.891,784.846 717.45,780.99 718.01,712.838 718.569,714.304 719.128,712.905 719.687,715.549 720.247,698.009 720.806,696.673 721.365,713.915 721.924,698.34 722.484,700.529 723.043,699.571 723.602,747.222 724.161,742.74 724.721,694.481 725.28,714.803 725.839,716.276 726.398,686.848 726.958,657.881 727.517,674.425 728.076,676.143 728.635,695.487 729.195,681.677 729.754,714.794 730.313,682.883 730.872,650.624 731.432,653.461 731.991,656.285 732.55,657.193 733.109,627.284 733.669,663.324 734.228,680.963 734.787,699.324 735.346,684.112 735.906,670.002 736.465,671.667 737.024,674.96 737.583,676.956 738.143,673.754 738.702,657.732 739.261,671.76 739.82,658.901 740.38,677.59 740.939,657.689 741.498,657.069 742.057,693.188 742.617,709.716 743.176,739.715 743.735,738.265 744.294,734.2 744.854,799.688 745.413,792.984 745.972,754.277 746.531,781.951 747.091,758.004 747.65,736.115 748.209,764.527 748.768,792.177 749.328,816.71 749.887,793.798 750.446,742.233 751.005,731.266 751.565,697.515 752.124,684.256 752.683,683.944 753.242,687.392 753.802,671.012 754.361,688.752 754.92,753.865 755.479,734.653 756.039,731.986 756.598,729.109 757.157,724.849 757.716,725.671 758.276,674.464 758.835,673.497 759.394,674.953 759.953,672.495 760.513,687.665 761.072,656.194 761.631,656.493 762.19,657.593 762.75,691.6 763.309,708.275 763.868,690.667 764.427,656.487 764.987,658.726 765.546,696.663 766.105,680.356 766.664,682.132 767.224,697.235 767.783,711.847 768.342,709.843 768.901,710.246 769.461,709.743 770.02,678.295 770.579,709.15 771.138,739.822 771.698,706.151 772.257,673.664 772.816,675.411 773.375,676.157 773.935,659.276 774.494,676.541 775.053,680.956 775.612,681.534 776.172,681.545 776.731,664.868 777.29,648.762 777.849,614.607 778.409,617.923 778.968,622.511 779.527,627.892 780.086,624.96 780.646,658.294 781.205,657.934 781.764,673.74 782.323,676.38 782.883,677.807 783.442,698.681 784.001,648.713 784.56,653.661 785.12,657.11 785.679,659.258 786.238,697.313 786.797,697.259 787.357,712.588 787.916,694.036 788.475,679.325 789.034,709.87 789.594,706.906 790.153,704.228 790.712,702.349 791.271,701.005 791.831,703.005 792.39,702.63 792.949,717.46 793.508,764.632 794.068,792.665 794.627,770.118 795.186,733.199 795.745,777.056 796.305,756.068 796.864,751.566 797.423,777.378 797.982,756.801 798.542,720.071 799.101,749.694 799.66,745.539 800.219,756.354 800.779,749.419 801.338,729.819 801.897,694.059 802.456,680.596 803.016,680.102 803.575,680.238 804.134,667.58 804.693,684.939 805.253,716.326 805.812,713.696 806.371,698.222 806.931,682.285 807.49,682.238 808.049,665.853 808.608,681.569 809.168,712.314 809.727,713.354 810.286,728.907 810.845,742.898 811.405,754.243 811.964,767.679 812.523,750.127 813.082,780.889 813.642,776.564 814.201,722.557 814.76,704.815 815.319,721.046 815.879,719.844 816.438,749.002 816.997,762.076 817.556,758.686 818.116,752.687 818.675,772.401 819.234,752.336 819.793,799.22 820.353,776.586 820.912,754.796 821.471,766.792 822.03,778.328 822.59,790.323 823.149,788.353 823.708,815.865 824.267,825.53 824.827,832.947 825.386,793.993 825.945,822.472 826.504,797.963 827.064,806.974 827.623,816.746 828.182,778.975 828.741,743.562 829.301,724.7 829.86,725.504 830.419,723.354 830.978,702.864 831.538,717.189 832.097,717.977 832.656,718.361 833.215,748.359 833.775,745.403 834.334,746.15 834.893,728.087 835.452,744.489 836.012,711.874 836.571,726.629 837.13,709.331 837.689,722.9 838.249,672.398 838.808,673.059 839.367,675.8 839.926,692.354 840.486,693.491 841.045,710.386 841.604,726.187 842.163,692.287 842.723,673.114 843.282,707.854 843.841,738.97 844.4,716.897 844.96,747.427 845.519,763.817 846.078,773.76 846.637,754.788 847.197,752.04 847.756,750.173 848.315,761.142 848.874,740.851 849.434,740.464 849.993,753.589 850.552,720.85 851.111,736.496 851.671,729.711 852.23,692.858 852.789,657.591 853.348,612.802 853.908,615.973 854.467,634.766 855.026,636.529 855.585,689.84 856.145,670.402 856.704,654.261 857.263,641.432 857.822,658.892 858.382,659.684 858.941,694.417 859.5,675.084 860.059,644.624 860.619,630.067 861.178,617.513 861.737,618.649 862.296,607.938 862.856,599.485 863.415,574.122 863.974,580.394 864.533,589.492 865.093,579.865 865.652,614.893 866.211,634.885 866.77,654.77 867.33,656.033 867.889,653.504 868.448,669.221 869.007,669.322 869.567,669.781 870.126,706.074 870.685,702.631 871.244,732.097 871.804,748.232 872.363,756.505 872.922,736.565 873.481,735.651 874.041,749.317 874.6,746.551 875.159,732.797 875.718,730.15 876.278,727.662 876.837,725.531 877.396,735.798 877.955,718.489 878.515,685.885 879.074,684.307 879.633,700.978 880.192,633.865 880.752,635.499 881.311,636.762 881.87,654.839 882.429,689.702 882.989,704.212 883.548,704.824 884.107,722.356 884.666,718.589 885.226,702.158 885.785,717.153 886.344,717.009 886.903,733.596 887.463,710.132 888.022,711.01 888.581,709.515 889.14,706.161 889.7,656.435 890.259,646.816 890.818,651.018 891.377,670.685 891.937,653.644 892.496,671.093 893.055,654.49 893.614,654.284 894.174,657.2 894.733,661.655 895.292,660.802 895.851,662.13 896.411,662.46 896.97,680.415 897.529,681.026 898.088,684.643 898.648,700.375 899.207,728.711 899.766,707.01 900.325,691.971 900.885,702.112 901.444,703.723 902.003,685.058 902.562,667.486 903.122,636.637 903.681,623.939 904.24,592.199 904.799,614.796 905.359,616.308 905.918,634.247 906.477,637.723 907.036,610.784 907.596,615.959 908.155,602.35 908.714,609.069 909.273,612.009 909.833,601.942 910.392,571.981 910.951,578.99 911.51,601.89 912.07,605.091 912.629,643.36 913.188,661.975 913.747,646.163 914.307,646.975 914.866,629.944 915.425,649.246 915.984,631.827 916.544,650.767 917.103,606.586 917.662,612.814 918.221,603.507 918.781,625.753 919.34,630.37 919.899,634.074 920.458,670.453 921.018,689.388 921.577,704.973 922.136,702.359 922.695,718.192 923.255,720.471 923.814,716.266 924.373,700.071 924.932,700.17 925.492,715.117 926.051,729.177 926.61,695.046 927.169,663.577 927.729,682.335 928.288,684.564 928.847,640.818 929.406,643.93 929.966,645.311 930.525,616.144 931.084,655.499 931.644,640.874 932.203,643.12 932.762,642.007 933.321,675.974 933.881,642.94 934.44,647.233 934.999,600.34 935.558,605.005 936.118,611.773 936.677,615.987 937.236,632.87 937.795,633.764 938.355,653.932 938.914,671.761 939.473,655.235 940.032,656.305 940.592,643.232 941.151,644.573 941.71,647.372 942.269,646.113 942.829,648.902 943.388,651.21 943.947,686.025 944.506,688.083 945.066,718.794 945.625,714.004 946.184,731.312 946.743,762.718 947.303,735.846 947.862,732.298 948.421,747.221 948.98,726.959 949.54,723.167 950.099,692.111 950.658,706.46 951.217,704.058 951.777,704.079 952.336,706.601 952.895,707.865 953.454,723.801 954.014,707.295 954.573,674.227 955.132,723.846 955.691,724.005 956.251,720.797 956.81,700.609 957.369,682.474 957.928,701.031 958.488,733.093 959.047,711.73 959.606,711.177 960.165,711.206 960.725,726.355 961.284,737.73 961.843,718.033 962.402,730.91 962.962,742.996 963.521,739.424 964.08,751.491 964.639,711.173 965.199,691.234 965.758,692.54 966.317,689.422 966.876,689.134 967.436,706.854 967.995,708.595 968.554,675.556 969.113,707.433 969.673,721.431 970.232,735.073 970.791,733.589 971.35,732.187 971.91,728.804 972.469,746.724 973.028,744.976 973.587,727.887 974.147,744.133 974.706,706.788 975.265,673.867 975.824,676.251 976.384,675.522 976.943,692.395 977.502,690.757 978.061,707.027 978.621,741.117 979.18,704.339 979.739,735.496 980.298,713.592 980.858,727.446 981.417,707.725 981.976,707.576 982.535,772.525 983.095,813.84 983.654,788.974 984.213,764.808 984.772,759.724 985.332,752.966 985.891,792.985 986.45,753.279 987.009,699.847 987.569,647.904 988.128,629.413 988.687,599.04 989.246,606.777 989.806,614.751 990.365,604.365 990.924,609.406 991.483,629.001 992.043,630.639 992.602,647.337 993.161,631.557 993.72,654.58 994.28,670.008 994.839,637.258 995.398,658.196 995.957,643.45 996.517,643.382 997.076,677.932 997.635,676.285 998.194,676.143 998.754,678.466 999.313,680.516 999.872,697.228 1000.43,693.297 1000.99,688.521 1001.55,691.32 1002.11,737.714 1002.67,735.147 1003.23,732.142 1003.79,742.765 1004.35,735.411 1004.91,728.08 1005.46,693.271 1006.02,723.097 1006.58,720.405 1007.14,718.077 1007.7,734.035 1008.26,744.307 1008.82,742.536 1009.38,724.241 1009.94,739.4 1010.5,707.92 1011.06,691.474 1011.62,723.068 1012.18,723.321 1012.73,739.582 1013.29,752.446 1013.85,747.195 1014.41,711.126 1014.97,712.919 1015.53,713.052 1016.09,713.837 1016.65,694.728 1017.21,740.423 1017.77,722.075 1018.33,723.16 1018.89,692.333 1019.45,644.316 1020.01,681.907 1020.56,679.91 1021.12,665.604 1021.68,650.486 1022.24,667.511 1022.8,621.723 1023.36,624.288 1023.92,623.165 1024.48,639.561 1025.04,675.847 1025.6,693.298 1026.16,726.069 1026.72,752.692 1027.28,780.768 1027.83,740.83 1028.39,687.888 1028.95,705.743 1029.51,737.474 1030.07,750.061 1030.63,763.046 1031.19,754.154 1031.75,735.246 1032.31,748.672 1032.87,743.346 1033.43,742.8 1033.99,755.288 1034.55,735.521 1035.1,762.542 1035.66,741.613 1036.22,721.152 1036.78,702.492 1037.34,666.829 1037.9,664.593 1038.46,667.511 1039.02,648.822 1039.58,664.788 1040.14,665.513 1040.7,663.941 1041.26,693.34 1041.82,692.742 1042.38,675.075 1042.93,676.43 1043.49,676.024 1044.05,695.206 1044.61,695.302 1045.17,697.529 1045.73,697.332 1046.29,715.054 1046.85,715.718 1047.41,715.507 1047.97,713.599 1048.53,676.361 1049.09,694.563 1049.65,725.778 1050.2,741.09 1050.76,736.851 1051.32,720.479 1051.88,718.756 1052.44,681.472 1053,649.564 1053.56,650.061 1054.12,621.873 1054.68,606.003 1055.24,644.095 1055.8,667.354 1056.36,700.304 1056.92,715.502 1057.48,747.652 1058.03,743.09 1058.59,737.513 1059.15,752.677 1059.71,732.951 1060.27,710.949 1060.83,694.01 1061.39,660.684 1061.95,692.099 1062.51,708.561 1063.07,672.089 1063.63,642.222 1064.19,628.577 1064.75,611.571 1065.3,617.728 1065.86,637.454 1066.42,670.246 1066.98,667.994 1067.54,699.683 1068.1,697.196 1068.66,697.59 1069.22,697.045 1069.78,695.933 1070.34,723.388 1070.9,736.804 1071.46,735.433 1072.02,733.111 1072.57,731.26 1073.13,694.305 1073.69,675.134 1074.25,692.718 1074.81,691.13 1075.37,674.533 1075.93,679.441 1076.49,676.245 1077.05,658.321 1077.61,658.88 1078.17,642.532 1078.73,660.794 1079.29,691.66 1079.85,689.99 1080.4,661.862 1080.96,664.196 1081.52,665.568 1082.08,635.597 1082.64,628.375 1083.2,633.921 1083.76,653.107 1084.32,671.578 1084.88,656.5 1085.44,623.993 1086,625.155 1086.56,613.872 1087.12,617.57 1087.67,604.524 1088.23,625.931 1088.79,597.661 1089.35,623.753 1089.91,625.81 1090.47,611.53 1091.03,649.586 1091.59,636.316 1092.15,605.07 1092.71,596.054 1093.27,586.071 1093.83,574.741 1094.39,602.431 1094.94,589.576 1095.5,577.15 1096.06,583.581 1096.62,589.968 1097.18,592.351 1097.74,578.658 1098.3,570.274 1098.86,594.317 1099.42,615.37 1099.98,621.668 1100.54,643.168 1101.1,679.419 1101.66,668.152 1102.22,651.784 1102.77,653.123 1103.33,671.46 1103.89,671.852 1104.45,705.038 1105.01,690.565 1105.57,709.268 1106.13,710.868 1106.69,723.301 1107.25,721.959 1107.81,704.028 1108.37,700.846 1108.93,687.521 1109.49,670.824 1110.04,640.57 1110.6,644.17 1111.16,647.218 1111.72,647.316 1112.28,665.022 1112.84,695.581 1113.4,680.121 1113.96,709.915 1114.52,679.31 1115.08,644.183 1115.64,649.145 1116.2,667.972 1116.76,718.758 1117.31,718.963 1117.87,700.972 1118.43,668.666 1118.99,683.185 1119.55,730.253 1120.11,743.725 1120.67,756.886 1121.23,737.909 1121.79,723.256 1122.35,739.53 1122.91,734.031 1123.47,714.337 1124.03,695.432 1124.59,646.186 1125.14,645.588 1125.7,643.531 1126.26,627.175 1126.82,651.624 1127.38,635.773 1127.94,635.954 1128.5,639.306 1129.06,639.405 1129.62,672.774 1130.18,674.872 1130.74,662.271 1131.3,712.772 1131.86,710.512 1132.41,679.357 1132.97,659.447 1133.53,680.575 1134.09,681.622 1134.65,699.839 1135.21,716.734 1135.77,683.904 1136.33,712.345 1136.89,695.974 1137.45,680.465 1138.01,666.372 1138.57,634.598 1139.13,638.57 1139.68,644.594 1140.24,661.544 1140.8,659.473 1141.36,679.951 1141.92,683.126 1142.48,745.202 1143.04,761.489 1143.6,743.008 1144.16,771.742 1144.72,764.41 1145.28,775.3 1145.84,803.179 1146.4,813.716 1146.96,790.679 1147.51,803.744 1148.07,793.835 1148.63,788.936 1149.19,799.192 1149.75,697.133 1150.31,698.085 1150.87,663.345 1151.43,662.559 1151.99,648.467 1152.55,632.081 1153.11,616.621 1153.67,665.231 1154.23,635.582 1154.78,672.022 1155.34,660.891 1155.9,664.276 1156.46,697.509 1157.02,698.32 1157.58,667.736 1158.14,686.85 1158.7,689.449 1159.26,674.542 1159.82,686.983 1160.38,641.662 1160.94,631.022 1161.5,635.143 1162.05,655.546 1162.61,658.057 1163.17,676.735 1163.73,677.071 1164.29,694.283 1164.85,725.963 1165.41,706.665 1165.97,706.048 1166.53,707.284 1167.09,710.848 1167.65,740.383 1168.21,691.074 1168.77,640.747 1169.33,642.128 1169.88,644.158 1170.44,661.572 1171,693.192 1171.56,690.913 1172.12,707 1172.68,689.805 1173.24,670.723 1173.8,688.62 1174.36,703.695 1174.92,704.458 1175.48,716.32 1176.04,700.007 1176.6,665.583 1177.15,667.427 1177.71,681.412 1178.27,647.065 1178.83,650.503 1179.39,637.578 1179.95,655.413 1180.51,653.04 1181.07,639.508 1181.63,611.541 1182.19,616.551 1182.75,605.085 1183.31,643.072 1183.87,631.02 1184.43,619.445 1184.98,626.77 1185.54,618.875 1186.1,624.976 1186.66,643.111 1187.22,596.536 1187.78,618.164 1188.34,639.767 1188.9,641.934 1189.46,625.75 1190.02,643.419 1190.58,660.928 1191.14,680.955 1191.7,730.549 1192.25,725.953 1192.81,739.912 1193.37,784.142 1193.93,775.506 1194.49,738.837 1195.05,718.887 1195.61,717.57 1196.17,732.465 1196.73,745.823 1197.29,739.905 1197.85,719.119 1198.41,747.056 1198.97,759.925 1199.52,752.915 1200.08,734.746 1200.64,732.181 1201.2,712.086 1201.76,676.613 1202.32,693.631 1202.88,710.105 1203.44,694.159 1204,663.768 1204.56,633.459 1205.12,633.739 1205.68,624.024 1206.24,580.872 1206.8,586.07 1207.35,590.309 1207.91,610.337 1208.47,612.676 1209.03,633.782 1209.59,657.563 1210.15,658.962 1210.71,643.802 1211.27,648.146 1211.83,684.516 1212.39,717.939 1212.95,730.92 1213.51,677.909 1214.07,695.485 1214.62,662.375 1215.18,663.961 1215.74,649.147 1216.3,621.938 1216.86,595.639 1217.42,586.645 1217.98,572.741 1218.54,578.883 1219.1,632.155 1219.66,633.606 1220.22,636.077 1220.78,627.526 1221.34,629.178 1221.89,629.463 1222.45,665.033 1223.01,665.278 1223.57,653.497 1224.13,672.373 1224.69,689.356 1225.25,658.29 1225.81,663.016 1226.37,647.683 1226.93,672.694 1227.49,658.08 1228.05,656.569 1228.61,659.948 1229.17,664.693 1229.72,667.998 1230.28,666.541 1230.84,653.387 1231.4,654.049 1231.96,638.106 1232.52,642.559 1233.08,663.108 1233.64,665.352 1234.2,663.545 1234.76,665.862 1235.32,634.789 1235.88,637.642 1236.44,605.224 1236.99,609.224 1237.55,613.136 1238.11,630.805 1238.67,635.038 1239.23,666.509 1239.79,653.647 1240.35,652.912 1240.91,652.847 1241.47,671.829 1242.03,702.244 1242.59,721.706 1243.15,733.424 1243.71,729.276 1244.26,662.945 1244.82,701.352 1245.38,703.478 1245.94,735.408 1246.5,720.783 1247.06,754.708 1247.62,765.394 1248.18,796.081 1248.74,821.286 1249.3,813.469 1249.86,791.343 1250.42,798.32 1250.98,805.447 1251.54,815.526 1252.09,821.492 1252.65,818.776 1253.21,796.29 1253.77,789.991 1254.33,799.991 1254.89,794.169 1255.45,805.647 1256.01,797.903 1256.57,786.542 1257.13,749.658 1257.69,763.343 1258.25,776.219 1258.81,736.832 1259.36,751.844 1259.92,777.519 1260.48,788.125 1261.04,796.05 1261.6,788.449 1262.16,781.448 1262.72,758.389 1263.28,774.649 1263.84,785.798 1264.4,793.962 1264.96,789.231 1265.52,799.095 1266.08,791.822 1266.63,770.504 1267.19,778.976 1267.75,807.358 1268.31,800.691 1268.87,780.526 1269.43,777.444 1269.99,754.944 1270.55,734.78 1271.11,730.564 1271.67,678.927 1272.23,644.683 1272.79,647.376 1273.35,650.262 1273.91,603.197 1274.46,590.085 1275.02,594.018 1275.58,582.596 1276.14,618.153 1276.7,571.028 1277.26,542.816 1277.82,551.705 1278.38,574.937 1278.94,594.581 1279.5,599.023 1280.06,600.32 1280.62,605.311 1281.18,609.273 1281.73,629.966 1282.29,627.386 1282.85,615.719 1283.41,601.716 1283.97,603.373 1284.53,561.206 1285.09,566.626 1285.65,590.871 1286.21,612.831 1286.77,584.315 1287.33,602.687 1287.89,589.393 1288.45,579.406 1289,616.8 1289.56,621.298 1290.12,642.093 1290.68,628.126 1291.24,597.462 1291.8,602.036 1292.36,604.02 1292.92,608.272 1293.48,579.359 1294.04,548.961 1294.6,552.715 1295.16,562.194 1295.72,589.016 1296.28,561.99 1296.83,581.936 1297.39,570.23 1297.95,573.785 1298.51,580.64 1299.07,585.166 1299.63,590.002 1300.19,611.91 1300.75,569.532 1301.31,574.08 1301.87,596.566 1302.43,636.225 1302.99,623.306 1303.55,611.797 1304.1,615.227 1304.66,587.502 1305.22,624.429 1305.78,641.401 1306.34,658.448 1306.9,678.333 1307.46,680.073 1308.02,713.502 1308.58,741.423 1309.14,758.178 1309.7,757.592 1310.26,749.768 1310.82,715.801 1311.38,747.323 1311.93,698.621 1312.49,732.333 1313.05,750.324 1313.61,712.463 1314.17,693.173 1314.73,711.504 1315.29,726.537 1315.85,690.051 1316.41,674.985 1316.97,594.695 1317.53,601.002 1318.09,624.128 1318.65,642.4 1319.2,648.231 1319.76,633.589 1320.32,670.214 1320.88,648.822 1321.44,650.149 1322,667.85 1322.56,671.182 1323.12,641.319 1323.68,659.975 1324.24,676.01 1324.8,646.491 1325.36,614.254 1325.92,655.6 1326.47,638.141 1327.03,642.864 1327.59,614.923 1328.15,619.699 1328.71,639.971 1329.27,642.636 1329.83,644.51 1330.39,650.281 1330.95,652.584 1331.51,689.257 1332.07,689.297 1332.63,674.555 1333.19,676.201 1333.75,678.391 1334.3,678.233 1334.86,661.701 1335.42,697.216 1335.98,696.687 1336.54,694.162 1337.1,628.216 1337.66,635.351 1338.22,652.466 1338.78,656.197 1339.34,658.15 1339.9,661.96 1340.46,679.768 1341.02,694.036 1341.57,711.794 1342.13,711.62 1342.69,732.769 1343.25,747.487 1343.81,726.91 1344.37,706.417 1344.93,725.244 1345.49,688.619 1346.05,685.863 1346.61,671.107 1347.17,674.935 1347.73,687.805 1348.29,703.079 1348.84,687.202 1349.4,751.361 1349.96,749.464 1350.52,715.142 1351.08,696.808 1351.64,711.73 1352.2,695.808 1352.76,676.06 1353.32,646.493 1353.88,600.404 1354.44,623.782 1355,674.466 1355.56,628.333 1356.12,636.213 1356.67,637.441 1357.23,639.105 1357.79,657.839 1358.35,659.531 1358.91,659.032 1359.47,660.004 1360.03,658.381 1360.59,676.732 1361.15,680.761 1361.71,681.219 1362.27,696.431 1362.83,709.631 1363.39,705.9 1363.94,703.416 1364.5,734.361 1365.06,732.081 1365.62,698.05 1366.18,744.697 1366.74,757.835 1367.3,803.377 1367.86,797.943 1368.42,809.366 1368.98,802.385 1369.54,779.191 1370.1,772.274 1370.66,763.329 1371.21,759.15 1371.77,722.665 1372.33,706.977 1372.89,720.353 1373.45,764.694 1374.01,775.416 1374.57,784.69 1375.13,780.139 1375.69,772.52 1376.25,768.959 1376.81,749.637 1377.37,743.022 1377.93,722.85 1378.49,704.402 1379.04,676.166 1379.6,675.126 1380.16,705.894 1380.72,750.114 1381.28,743.05 1381.84,739.522 1382.4,755.099 1382.96,831.968 1383.52,824.6 1384.08,864.388 1384.64,853.851 1385.2,843.506 1385.76,851.434 1386.31,856.919 1386.87,830.231 1387.43,789.216 1387.99,800.847 1388.55,742.3 1389.11,741.382 1389.67,736.637 1390.23,733.833 1390.79,731.862 1391.35,712.91 1391.91,711.359 1392.47,726.801 1393.03,709.393 1393.58,676.102 1394.14,691.403 1394.7,688.688 1395.26,670.769 1395.82,702.451 1396.38,670.622 1396.94,655.004 1397.5,637.233 1398.06,657.357 1398.62,660.129 1399.18,661.588 1399.74,692.973 1400.3,708.837 1400.86,706.787 1401.41,706.863 1401.97,641.658 1402.53,642.441 1403.09,643.674 1403.65,648.4 1404.21,648.265 1404.77,678.513 1405.33,645.96 1405.89,665.672 1406.45,683.405 1407.01,684.678 1407.57,686.055 1408.13,683.243 1408.68,700.482 1409.24,647.466 1409.8,666.904 1410.36,650.351 1410.92,668.068 1411.48,688.349 1412.04,671.31 1412.6,653.9 1413.16,655.672 1413.72,658.662 1414.28,655.593 1414.84,622.718 1415.4,626.667 1415.95,625.964 1416.51,608.897 1417.07,615.099 1417.63,601.972 1418.19,623.111 1418.75,611.76 1419.31,584.942 1419.87,589.084 1420.43,610.276 1420.99,612.788 1421.55,582.765 1422.11,569.312 1422.67,573.303 1423.23,593.688 1423.78,581.776 1424.34,585.911 1424.9,625.58 1425.46,643.265 1426.02,665.339 1426.58,617.698 1427.14,601.24 1427.7,622.742 1428.26,660.175 1428.82,661.181 1429.38,663.832 1429.94,679.525 1430.5,714.771 1431.05,714.617 1431.61,698.944 1432.17,665.054 1432.73,636.391 1433.29,653.621 1433.85,668.908 1434.41,637.693 1434.97,639.111 1435.53,692.381 1436.09,709.556 1436.65,725.728 1437.21,740.51 1437.77,735.701 1438.33,733.904 1438.88,717.14 1439.44,759.757 1440,787.964 1440.56,766.069 1441.12,762.591 1441.68,724.04 1442.24,702.507 1442.8,688.202 1443.36,703.336 1443.92,701.761 1444.48,720.696 1445.04,714.591 1445.6,729.234 1446.15,659.815 1446.71,663.571 1447.27,680.682 1447.83,681.419 1448.39,665.051 1448.95,666.301 1449.51,671.505 1450.07,675.203 1450.63,644.103 1451.19,614.117 1451.75,605.04 1452.31,610.21 1452.87,616.439 1453.42,620.397 1453.98,624 1454.54,561.368 1455.1,586.616 1455.66,609.924 1456.22,614.128 1456.78,650.701 1457.34,683.484 1457.9,687.113 1458.46,687.096 1459.02,720.168 1459.58,701.572 1460.14,683.498 1460.7,681.056 1461.25,681.626 1461.81,683.491 1462.37,714.84 1462.93,744.15 1463.49,758.283 1464.05,783.165 1464.61,810.068 1465.17,804.204 1465.73,809.527 1466.29,767.721 1466.85,778.202 1467.41,753.587 1467.97,735.943 1468.52,747.825 1469.08,743.005 1469.64,735.9 1470.2,700.431 1470.76,729.336 1471.32,758.186 1471.88,775.03 1472.44,751.191 1473,742.608 1473.56,766.391 1474.12,743.777 1474.68,753.318 1475.24,767.798 1475.79,731.645 1476.35,749.259 1476.91,729.989 1477.47,758.644 1478.03,739.257 1478.59,733.578 1479.15,756.991 1479.71,783.374 1480.27,780.387 1480.83,792.159 1481.39,801.723 1481.95,779.666 1482.51,776.48 1483.07,773.425 1483.62,751.229 1484.18,781.297 1484.74,775.691 1485.3,773.146 1485.86,768.431 1486.42,761.49 1486.98,774.691 1487.54,768.654 1488.1,746.804 1488.66,728.685 1489.22,705.602 1489.78,624.683 1490.34,608.636 1490.89,646.586 1491.45,649.784 1492.01,652.176 1492.57,687.092 1493.13,686.184 1493.69,684.736 1494.25,699.654 1494.81,717.764 1495.37,717.681 1495.93,717.269 1496.49,728.043 1497.05,709.726 1497.61,713.047 1498.16,689.18 1498.72,701.86 1499.28,737.461 1499.84,704.093 1500.4,700.239 1500.96,700.756 1501.52,697.136 1502.08,678.808 1502.64,645.449 1503.2,681.721 1503.76,694.966 1504.32,693.106 1504.88,678.37 1505.44,679.573 1505.99,679.253 1506.55,660.246 1507.11,691.683 1507.67,643.172 1508.23,613.54 1508.79,603.053 1509.35,623.755 1509.91,626.443 1510.47,612.533 1511.03,614.697 1511.59,619.357 1512.15,655.198 1512.71,673.2 1513.26,672.206 1513.82,626.398 1514.38,649.367 1514.94,639.288 1515.5,656.987 1516.06,596.144 1516.62,614.085 1517.18,631.277 1517.74,653.776 1518.3,671.116 1518.86,653.987 1519.42,641.853 1519.98,660.062 1520.53,646.756 1521.09,681.724 1521.65,665.055 1522.21,665.253 1522.77,666.383 1523.33,682.995 1523.89,712.669 1524.45,678.63 1525.01,694.386 1525.57,690.346 1526.13,674.271 1526.69,657.208 1527.25,660.029 1527.81,664.047 1528.36,698.137 1528.92,664.311 1529.48,650.512 1530.04,653.853 1530.6,641.01 1531.16,679.154 1531.72,647.687 1532.28,634.545 1532.84,622.315 1533.4,609.913 1533.96,660.995 1534.52,644.77 1535.08,634.304 1535.63,622.458 1536.19,591.741 1536.75,578.952 1537.31,600.013 1537.87,622.745 1538.43,609.884 1538.99,584.221 1539.55,589.084 1540.11,595.275 1540.67,601.211 1541.23,605.787 1541.79,597.593 1542.35,649.05 1542.9,667.87 1543.46,720.652 1544.02,718.472 1544.58,723.338 1545.14,718.013 1545.7,668.992 1546.26,654.254 1546.82,699.877 1547.38,681.47 1547.94,678.048 1548.5,649.477 1549.06,619.128 1549.62,638.664 1550.18,657.295 1550.73,652.69 1551.29,652.384 1551.85,619.685 1552.41,654.984 1552.97,656.92 1553.53,642.286 1554.09,642.249 1554.65,654.81 1555.21,656.749 1555.77,673.632 1556.33,673.31 1556.89,678.499 1557.45,698.522 1558,665.656 1558.56,635.352 1559.12,623.479 1559.68,642.933 1560.24,649.19 1560.8,655.516 1561.36,706.483 1561.92,737.823 1562.48,720.336 1563.04,736.692 1563.6,752.153 1564.16,763.468 1564.72,757.518 1565.28,752.199 1565.83,750.491 1566.39,733.066 1566.95,744.82 1567.51,722.579 1568.07,738.232 1568.63,748.208 1569.19,762.065 1569.75,742.507 1570.31,769.451 1570.87,778.576 1571.43,769.051 1571.99,780.863 1572.55,754.848 1573.1,785.033 1573.66,777.621 1574.22,823.642 1574.78,802.298 1575.34,795.557 1575.9,756.512 1576.46,740.48 1577.02,766.522 1577.58,777.85 1578.14,758.845 1578.7,784.275 1579.26,766.288 1579.82,748.269 1580.37,749.181 1580.93,748.006 1581.49,745.042 1582.05,762.264 1582.61,794.887 1583.17,771.013 1583.73,780.922 1584.29,745.137 1584.85,727.197 1585.41,754.328 1585.97,734.245 1586.53,718.029 1587.09,702.733 1587.65,670.745 1588.2,686.346 1588.76,670.242 1589.32,655.921 1589.88,672.954 1590.44,673.562 1591,706.949 1591.56,721.019 1592.12,735.198 1592.68,732.872 1593.24,732.28 1593.8,681.358 1594.36,698.327 1594.92,714.467 1595.47,714.281 1596.03,710.507 1596.59,693.674 1597.15,724.483 1597.71,705.822 1598.27,705.263 1598.83,718.607 1599.39,715.26 1599.95,684.056 1600.51,715.548 1601.07,731.131 1601.63,711.91 1602.19,722.838 1602.74,705.875 1603.3,688.548 1603.86,670.25 1604.42,619.336 1604.98,625.009 1605.54,624.885 1606.1,627.406 1606.66,610.58 1607.22,614.817 1607.78,633.257 1608.34,606.407 1608.9,611.744 1609.46,616.37 1610.02,668.226 1610.57,732.574 1611.13,683.754 1611.69,685.53 1612.25,669.239 1612.81,683.865 1613.37,652.661 1613.93,667.532 1614.49,666.503 1615.05,634.06 1615.61,674.452 1616.17,704.644 1616.73,686.994 1617.29,656.526 1617.84,676.272 1618.4,692.764 1618.96,676.135 1619.52,660.46 1620.08,707.786 1620.64,657.732 1621.2,627.929 1621.76,646.633 1622.32,627.556 1622.88,629.985 1623.44,667.754 1624,685.232 1624.56,705.713 1625.11,705.161 1625.67,751.992 1626.23,750.133 1626.79,779.558 1627.35,745.268 1627.91,741.392 1628.47,725.598 1629.03,713.045 1629.59,681.951 1630.15,680.053 1630.71,695.71 1631.27,693.79 1631.83,689.999 1632.39,639.176 1632.94,640.973 1633.5,627.248 1634.06,627.484 1634.62,632.247 1635.18,633.523 1635.74,623.914 1636.3,622.208 1636.86,637.886 1637.42,654.243 1637.98,642.264 1638.54,691.449 1639.1,660.193 1639.66,660.781 1640.21,678.163 1640.77,690.639 1641.33,692.23 1641.89,612.605 1642.45,616.475 1643.01,602.69 1643.57,575.822 1644.13,579.707 1644.69,634.353 1645.25,635.853 1645.81,634.748 1646.37,620.961 1646.93,672.609 1647.48,623.274 1648.04,656.764 1648.6,675.708 1649.16,677.403 1649.72,661.233 1650.28,648.934 1650.84,666.63 1651.4,651.59 1651.96,635.418 1652.52,656.333 1653.08,627.208 1653.64,615.499 1654.2,619.372 1654.76,624.254 1655.31,627.711 1655.87,631.509 1656.43,628.855 1656.99,601.176 1657.55,591.925 1658.11,658.328 1658.67,656.234 1659.23,644.82 1659.79,630.32 1660.35,618.502 1660.91,608.792 1661.47,613.554 1662.03,615.938 1662.58,619.041 1663.14,656.463 1663.7,673.215 1664.26,693.661 1664.82,713.417 1665.38,698.614 1665.94,716.88 1666.5,713.851 1667.06,697.665 1667.62,712.906 1668.18,665.191 1668.74,664.448 1669.3,650.029 1669.85,649.785 1670.41,651.824 1670.97,671.739 1671.53,658.067 1672.09,644.767 1672.65,648.254 1673.21,703.258 1673.77,701.908 1674.33,734.655 1674.89,717.076 1675.45,732.283 1676.01,745.044 1676.57,725.353 1677.13,726.197 1677.68,739.613 1678.24,751.473 1678.8,764.283 1679.36,780.56 1679.92,774.219 1680.48,737.722 1681.04,716.91 1681.6,697.458 1682.16,695.016 1682.72,712.657 1683.28,726.158 1683.84,737.337 1684.4,684.039 1684.95,700.213 1685.51,665.939 1686.07,667.552 1686.63,653.135 1687.19,639.584 1687.75,640.239 1688.31,658.089 1688.87,691.464 1689.43,675.226 1689.99,661.608 1690.55,644.3 1691.11,662.607 1691.67,665.954 1692.23,664.542 1692.78,667.534 1693.34,669.655 1693.9,669.377 1694.46,669.004 1695.02,684.618 1695.58,668.067 1696.14,668.388 1696.7,699.75 1697.26,716.059 1697.82,728.912 1698.38,743.632 1698.94,769.813 1699.5,748.42 1700.05,764.094 1700.61,693.198 1701.17,692.921 1701.73,708.642 1702.29,707.091 1702.85,710.449 1703.41,690.526 1703.97,686.688 1704.53,686.527 1705.09,719.415 1705.65,684.521 1706.21,669.652 1706.77,688.39 1707.32,686.585 1707.88,669.327 1708.44,667.847 1709,653.455 1709.56,670.347 1710.12,668.413 1710.68,702.939 1711.24,718.117 1711.8,730.203 1712.36,757.695 1712.92,735.739 1713.48,719.514 1714.04,690.95 1714.6,674.586 1715.15,674.501 1715.71,656.414 1716.27,623.315 1716.83,627.97 1717.39,647.935 1717.95,614.763 1718.51,616.052 1719.07,621.443 1719.63,624.882 1720.19,611.722 1720.75,613.892 1721.31,617.452 1721.87,625.114 1722.42,610.087 1722.98,631.201 1723.54,649.551 1724.1,651.386 1724.66,653.561 1725.22,655.14 1725.78,640.725 1726.34,640.575 1726.9,645.923 1727.46,632.634 1728.02,638.434 1728.58,609.148 1729.14,612.373 1729.69,615.875 1730.25,634.534 1730.81,652.986 1731.37,655.907 1731.93,657.238 1732.49,660.652 1733.05,662.759 1733.61,647.467 1734.17,652.644 1734.73,638.947 1735.29,640.874 1735.85,609.269 1736.41,628.256 1736.97,645.97 1737.52,665.295 1738.08,614.426 1738.64,618.624 1739.2,618.975 1739.76,636.832 1740.32,639.813 1740.88,628.675 1741.44,629.679 1742,615.817 1742.56,618.712 1743.12,639.359 1743.68,692.124 1744.24,692.768 1744.79,676.104 1745.35,692.485 1745.91,789.836 1746.47,766.076 1747.03,745.473 1747.59,723.506 1748.15,738.042 1748.71,737.434 1749.27,735.484 1749.83,733.124 1750.39,733.124 1750.95,717.945 1751.51,701.893 1752.06,685.546 1752.62,717.511 1753.18,731.115 1753.74,727.51 1754.3,696.329 1754.86,676.457 1755.42,675.432 1755.98,674.661 1756.54,642.417 1757.1,643.472 1757.66,614.815 1758.22,634.066 1758.78,652.974 1759.34,667.32 1759.89,670.033 1760.45,669.519 1761.01,668.297 1761.57,701.311 1762.13,696.713 1762.69,711.477 1763.25,710.91 1763.81,691.99 1764.37,677.143 1764.93,692.447 1765.49,702.727 1766.05,718.99 1766.61,764.205 1767.16,807.07 1767.72,786.806 1768.28,777.69 1768.84,758.059 1769.4,753.209 1769.96,748.113 1770.52,710.782 1771.08,676.001 1771.64,679.047 1772.2,680.338 1772.76,696.89 1773.32,693.027 1773.88,690.593 1774.43,658.246 1774.99,657.946 1775.55,662.763 1776.11,663.958 1776.67,661.118 1777.23,663.466 1777.79,682.023 1778.35,683.015 1778.91,680.502 1779.47,714.025 1780.03,695.393 1780.59,695.216 1781.15,677.676 1781.71,630.366 1782.26,605.722 1782.82,627.63 1783.38,651.414 1783.94,670.653 1784.5,625.041 1785.06,641.288 1785.62,658.538 1786.18,659.429 1786.74,644.536 1787.3,644.698 1787.86,614.15 1788.42,629.452 1788.98,649.701 1789.53,652.374 1790.09,654.897 1790.65,627.362 1791.21,628.914 1791.77,613.023 1792.33,631.588 1792.89,653.498 1793.45,655.694 1794.01,656.271 1794.57,641.936 1795.13,661.136 1795.69,692.509 1796.25,691.399 1796.8,723.193 1797.36,722.552 1797.92,733.51 1798.48,714.675 1799.04,698.292 1799.6,718.342 1800.16,719.182 1800.72,670.872 1801.28,637.506 1801.84,638.211 1802.4,642.519 1802.96,658.318 1803.52,674.771 1804.08,630.109 1804.63,634.77 1805.19,637.769 1805.75,688.537 1806.31,718.009 1806.87,685.238 1807.43,685.085 1807.99,672.541 1808.55,689.66 1809.11,677.157 1809.67,675.812 1810.23,678.933 1810.79,692.368 1811.35,692.218 1811.9,659.887 1812.46,626.793 1813.02,594.484 1813.58,616.099 1814.14,622.656 1814.7,625.494 1815.26,647.105 1815.82,668.222 1816.38,666.132 1816.94,667.799 1817.5,650.978 1818.06,685.353 1818.62,699.017 1819.18,682.502 1819.73,697.267 1820.29,669.431 1820.85,688.262 1821.41,685.341 1821.97,650.265 1822.53,652.048 1823.09,638.385 1823.65,654.66 1824.21,643.368 1824.77,678.004 1825.33,696.473 1825.89,697.055 1826.45,711.194 1827,721.577 1827.56,719.624 1828.12,752.186 1828.68,718.24 1829.24,732.737 1829.8,747.166 1830.36,746.502 1830.92,728.55 1831.48,724.018 1832.04,722.7 1832.6,686.467 1833.16,681.272 1833.72,682.281 1834.27,662.185 1834.83,647.322 1835.39,666.491 1835.95,715.017 1836.51,698.929 1837.07,697.262 1837.63,694.666 1838.19,711.775 \"/>\n<path clip-path=\"url(#clip023)\" d=\"M720.247 690.164 L720.806 690.164 L721.365 690.164 L721.924 690.164 L722.484 690.164 L723.043 690.164 L723.602 690.164 L724.161 690.164 L724.721 690.164 L725.28 690.164 L725.839 690.164 L726.398 690.164 L726.958 690.164 L727.517 690.164 L728.076 690.164 L728.635 690.164 L729.195 690.164 L729.754 690.164 L730.313 690.164 L730.872 690.164 L731.432 690.164 L731.991 690.164 L732.55 690.164 L733.109 690.164 L733.669 690.164 L734.228 690.164 L734.787 690.164 L735.346 690.164 L735.906 690.164 L736.465 690.164 L737.024 690.164 L737.583 690.164 L738.143 690.164 L738.702 690.164 L739.261 690.164 L739.82 690.164 L740.38 690.164 L740.939 690.164 L741.498 690.164 L742.057 690.164 L742.617 690.164 L743.176 690.164 L743.735 690.164 L744.294 690.164 L744.854 690.164 L745.413 690.164 L745.972 690.164 L746.531 690.164 L747.091 690.164 L747.65 690.164 L748.209 690.164 L748.768 690.164 L749.328 690.164 L749.887 690.164 L750.446 690.164 L751.005 690.164 L751.565 690.164 L752.124 690.164 L752.683 690.164 L753.242 690.164 L753.802 690.164 L754.361 690.164 L754.92 690.164 L755.479 690.164 L756.039 690.164 L756.598 690.164 L757.157 690.164 L757.716 690.164 L758.276 690.164 L758.835 690.164 L759.394 690.164 L759.953 690.164 L760.513 690.164 L761.072 690.164 L761.631 690.164 L762.19 690.164 L762.75 690.164 L763.309 690.164 L763.868 690.164 L764.427 690.164 L764.987 690.164 L765.546 690.164 L766.105 690.164 L766.664 690.164 L767.224 690.164 L767.783 690.164 L768.342 690.164 L768.901 690.164 L769.461 690.164 L770.02 690.164 L770.579 690.164 L771.138 690.164 L771.698 690.164 L772.257 690.164 L772.816 690.164 L773.375 690.164 L773.935 690.164 L774.494 690.164 L775.053 690.164 L775.612 690.164 L776.172 690.164 L776.731 690.164 L777.29 690.164 L777.849 690.164 L778.409 690.164 L778.968 690.164 L779.527 690.164 L780.086 690.164 L780.646 690.164 L781.205 690.164 L781.764 690.164 L782.323 690.164 L782.883 690.164 L783.442 690.164 L784.001 690.164 L784.56 690.164 L785.12 690.164 L785.679 690.164 L786.238 690.164 L786.797 690.164 L787.357 690.164 L787.916 690.164 L788.475 690.164 L789.034 690.164 L789.594 690.164 L790.153 690.164 L790.712 690.164 L791.271 690.164 L791.831 690.164 L792.39 690.164 L792.949 690.164 L793.508 690.164 L794.068 690.164 L794.627 690.164 L795.186 690.164 L795.745 690.164 L796.305 690.164 L796.864 690.164 L797.423 690.164 L797.982 690.164 L798.542 690.164 L799.101 690.164 L799.66 690.164 L800.219 690.164 L800.779 690.164 L801.338 690.164 L801.897 690.164 L802.456 690.164 L803.016 690.164 L803.575 690.164 L804.134 690.164 L804.693 690.164 L805.253 690.164 L805.812 690.164 L806.371 690.164 L806.931 690.164 L807.49 690.164 L808.049 690.164 L808.608 690.164 L809.168 690.164 L809.727 690.164 L810.286 690.164 L810.845 690.164 L811.405 690.164 L811.964 690.164 L812.523 690.164 L813.082 690.164 L813.642 690.164 L814.201 690.164 L814.76 690.164 L815.319 690.164 L815.879 690.164 L816.438 690.164 L816.997 690.164 L817.556 690.164 L818.116 690.164 L818.675 690.164 L819.234 690.164 L819.793 690.164 L820.353 690.164 L820.912 690.164 L821.471 690.164 L822.03 690.164 L822.59 690.164 L823.149 690.164 L823.708 690.164 L824.267 690.164 L824.827 690.164 L825.386 690.164 L825.945 690.164 L826.504 690.164 L827.064 690.164 L827.623 690.164 L828.182 690.164 L828.741 690.164 L829.301 690.164 L829.86 690.164 L830.419 690.164 L830.978 690.164 L831.538 690.164 L832.097 690.164 L832.656 690.164 L833.215 690.164 L833.775 690.164 L834.334 690.164 L834.893 690.164 L835.452 690.164 L836.012 690.164 L836.571 690.164 L837.13 690.164 L837.689 690.164 L838.249 690.164 L838.808 690.164 L839.367 690.164 L839.926 690.164 L840.486 690.164 L841.045 690.164 L841.604 690.164 L842.163 690.164 L842.723 690.164 L843.282 690.164 L843.841 690.164 L844.4 690.164 L844.96 690.164 L845.519 690.164 L846.078 690.164 L846.637 690.164 L847.197 690.164 L847.756 690.164 L848.315 690.164 L848.874 690.164 L849.434 690.164 L849.993 690.164 L850.552 690.164 L851.111 690.164 L851.671 690.164 L852.23 690.164 L852.789 690.164 L853.348 690.164 L853.908 690.164 L854.467 690.164 L855.026 690.164 L855.585 690.164 L856.145 690.164 L856.704 690.164 L857.263 690.164 L857.822 690.164 L858.382 690.164 L858.941 690.164 L859.5 690.164 L860.059 690.164 L860.619 690.164 L861.178 690.164 L861.737 690.164 L862.296 690.164 L862.856 690.164 L863.415 690.164 L863.974 690.164 L864.533 690.164 L865.093 690.164 L865.652 690.164 L866.211 690.164 L866.77 690.164 L867.33 690.164 L867.889 690.164 L868.448 690.164 L869.007 690.164 L869.567 690.164 L870.126 690.164 L870.685 690.164 L871.244 690.164 L871.804 690.164 L872.363 690.164 L872.922 690.164 L873.481 690.164 L874.041 690.164 L874.6 690.164 L875.159 690.164 L875.718 690.164 L876.278 690.164 L876.837 690.164 L877.396 690.164 L877.955 690.164 L878.515 690.164 L879.074 690.164 L879.633 690.164 L880.192 690.164 L880.752 690.164 L881.311 690.164 L881.87 690.164 L882.429 690.164 L882.989 690.164 L883.548 690.164 L884.107 690.164 L884.666 690.164 L885.226 690.164 L885.785 690.164 L886.344 690.164 L886.903 690.164 L887.463 690.164 L888.022 690.164 L888.581 690.164 L889.14 690.164 L889.7 690.164 L890.259 690.164 L890.818 690.164 L891.377 690.164 L891.937 690.164 L892.496 690.164 L893.055 690.164 L893.614 690.164 L894.174 690.164 L894.733 690.164 L895.292 690.164 L895.851 690.164 L896.411 690.164 L896.97 690.164 L897.529 690.164 L898.088 690.164 L898.648 690.164 L899.207 690.164 L899.766 690.164 L900.325 690.164 L900.885 690.164 L901.444 690.164 L902.003 690.164 L902.562 690.164 L903.122 690.164 L903.681 690.164 L904.24 690.164 L904.799 690.164 L905.359 690.164 L905.918 690.164 L906.477 690.164 L907.036 690.164 L907.596 690.164 L908.155 690.164 L908.714 690.164 L909.273 690.164 L909.833 690.164 L910.392 690.164 L910.951 690.164 L911.51 690.164 L912.07 690.164 L912.629 690.164 L913.188 690.164 L913.747 690.164 L914.307 690.164 L914.866 690.164 L915.425 690.164 L915.984 690.164 L916.544 690.164 L917.103 690.164 L917.662 690.164 L918.221 690.164 L918.781 690.164 L919.34 690.164 L919.899 690.164 L920.458 690.164 L921.018 690.164 L921.577 690.164 L922.136 690.164 L922.695 690.164 L923.255 690.164 L923.814 690.164 L924.373 690.164 L924.932 690.164 L925.492 690.164 L926.051 690.164 L926.61 690.164 L927.169 690.164 L927.729 690.164 L928.288 690.164 L928.847 690.164 L929.406 690.164 L929.966 690.164 L930.525 690.164 L931.084 690.164 L931.644 690.164 L932.203 690.164 L932.762 690.164 L933.321 690.164 L933.881 690.164 L934.44 690.164 L934.999 690.164 L935.558 690.164 L936.118 690.164 L936.677 690.164 L937.236 690.164 L937.795 690.164 L938.355 690.164 L938.914 690.164 L939.473 690.164 L940.032 690.164 L940.592 690.164 L941.151 690.164 L941.71 690.164 L942.269 690.164 L942.829 690.164 L943.388 690.164 L943.947 690.164 L944.506 690.164 L945.066 690.164 L945.625 690.164 L946.184 690.164 L946.743 690.164 L947.303 690.164 L947.862 690.164 L948.421 690.164 L948.98 690.164 L949.54 690.164 L950.099 690.164 L950.658 690.164 L951.217 690.164 L951.777 690.164 L952.336 690.164 L952.895 690.164 L953.454 690.164 L954.014 690.164 L954.573 690.164 L955.132 690.164 L955.691 690.164 L956.251 690.164 L956.81 690.164 L957.369 690.164 L957.928 690.164 L958.488 690.164 L959.047 690.164 L959.606 690.164 L960.165 690.164 L960.725 690.164 L961.284 690.164 L961.843 690.164 L962.402 690.164 L962.962 690.164 L963.521 690.164 L964.08 690.164 L964.639 690.164 L965.199 690.164 L965.758 690.164 L966.317 690.164 L966.876 690.164 L967.436 690.164 L967.995 690.164 L968.554 690.164 L969.113 690.164 L969.673 690.164 L970.232 690.164 L970.791 690.164 L971.35 690.164 L971.91 690.164 L972.469 690.164 L973.028 690.164 L973.587 690.164 L974.147 690.164 L974.706 690.164 L975.265 690.164 L975.824 690.164 L976.384 690.164 L976.943 690.164 L977.502 690.164 L978.061 690.164 L978.621 690.164 L979.18 690.164 L979.739 690.164 L980.298 690.164 L980.858 690.164 L981.417 690.164 L981.976 690.164 L982.535 690.164 L983.095 690.164 L983.654 690.164 L984.213 690.164 L984.772 690.164 L985.332 690.164 L985.891 690.164 L986.45 690.164 L987.009 690.164 L987.569 690.164 L988.128 690.164 L988.687 690.164 L989.246 690.164 L989.806 690.164 L990.365 690.164 L990.924 690.164 L991.483 690.164 L992.043 690.164 L992.602 690.164 L993.161 690.164 L993.72 690.164 L994.28 690.164 L994.839 690.164 L995.398 690.164 L995.957 690.164 L996.517 690.164 L997.076 690.164 L997.635 690.164 L998.194 690.164 L998.754 690.164 L999.313 690.164 L999.872 690.164 L1000.43 690.164 L1000.99 690.164 L1001.55 690.164 L1002.11 690.164 L1002.67 690.164 L1003.23 690.164 L1003.79 690.164 L1004.35 690.164 L1004.91 690.164 L1005.46 690.164 L1006.02 690.164 L1006.58 690.164 L1007.14 690.164 L1007.7 690.164 L1008.26 690.164 L1008.82 690.164 L1009.38 690.164 L1009.94 690.164 L1010.5 690.164 L1011.06 690.164 L1011.62 690.164 L1012.18 690.164 L1012.73 690.164 L1013.29 690.164 L1013.85 690.164 L1014.41 690.164 L1014.97 690.164 L1015.53 690.164 L1016.09 690.164 L1016.65 690.164 L1017.21 690.164 L1017.77 690.164 L1018.33 690.164 L1018.89 690.164 L1019.45 690.164 L1020.01 690.164 L1020.56 690.164 L1021.12 690.164 L1021.68 690.164 L1022.24 690.164 L1022.8 690.164 L1023.36 690.164 L1023.92 690.164 L1024.48 690.164 L1025.04 690.164 L1025.6 690.164 L1026.16 690.164 L1026.72 690.164 L1027.28 690.164 L1027.83 690.164 L1028.39 690.164 L1028.95 690.164 L1029.51 690.164 L1030.07 690.164 L1030.63 690.164 L1031.19 690.164 L1031.75 690.164 L1032.31 690.164 L1032.87 690.164 L1033.43 690.164 L1033.99 690.164 L1034.55 690.164 L1035.1 690.164 L1035.66 690.164 L1036.22 690.164 L1036.78 690.164 L1037.34 690.164 L1037.9 690.164 L1038.46 690.164 L1039.02 690.164 L1039.58 690.164 L1040.14 690.164 L1040.7 690.164 L1041.26 690.164 L1041.82 690.164 L1042.38 690.164 L1042.93 690.164 L1043.49 690.164 L1044.05 690.164 L1044.61 690.164 L1045.17 690.164 L1045.73 690.164 L1046.29 690.164 L1046.85 690.164 L1047.41 690.164 L1047.97 690.164 L1048.53 690.164 L1049.09 690.164 L1049.65 690.164 L1050.2 690.164 L1050.76 690.164 L1051.32 690.164 L1051.88 690.164 L1052.44 690.164 L1053 690.164 L1053.56 690.164 L1054.12 690.164 L1054.68 690.164 L1055.24 690.164 L1055.8 690.164 L1056.36 690.164 L1056.92 690.164 L1057.48 690.164 L1058.03 690.164 L1058.59 690.164 L1059.15 690.164 L1059.71 690.164 L1060.27 690.164 L1060.83 690.164 L1061.39 690.164 L1061.95 690.164 L1062.51 690.164 L1063.07 690.164 L1063.63 690.164 L1064.19 690.164 L1064.75 690.164 L1065.3 690.164 L1065.86 690.164 L1066.42 690.164 L1066.98 690.164 L1067.54 690.164 L1068.1 690.164 L1068.66 690.164 L1069.22 690.164 L1069.78 690.164 L1070.34 690.164 L1070.9 690.164 L1071.46 690.164 L1072.02 690.164 L1072.57 690.164 L1073.13 690.164 L1073.69 690.164 L1074.25 690.164 L1074.81 690.164 L1075.37 690.164 L1075.93 690.164 L1076.49 690.164 L1077.05 690.164 L1077.61 690.164 L1078.17 690.164 L1078.73 690.164 L1079.29 690.164 L1079.85 690.164 L1080.4 690.164 L1080.96 690.164 L1081.52 690.164 L1082.08 690.164 L1082.64 690.164 L1083.2 690.164 L1083.76 690.164 L1084.32 690.164 L1084.88 690.164 L1085.44 690.164 L1086 690.164 L1086.56 690.164 L1087.12 690.164 L1087.67 690.164 L1088.23 690.164 L1088.79 690.164 L1089.35 690.164 L1089.91 690.164 L1090.47 690.164 L1091.03 690.164 L1091.59 690.164 L1092.15 690.164 L1092.71 690.164 L1093.27 690.164 L1093.83 690.164 L1094.39 690.164 L1094.94 690.164 L1095.5 690.164 L1096.06 690.164 L1096.62 690.164 L1097.18 690.164 L1097.74 690.164 L1098.3 690.164 L1098.86 690.164 L1099.42 690.164 L1099.98 690.164 L1100.54 690.164 L1101.1 690.164 L1101.66 690.164 L1102.22 690.164 L1102.77 690.164 L1103.33 690.164 L1103.89 690.164 L1104.45 690.164 L1105.01 690.164 L1105.57 690.164 L1106.13 690.164 L1106.69 690.164 L1107.25 690.164 L1107.81 690.164 L1108.37 690.164 L1108.93 690.164 L1109.49 690.164 L1110.04 690.164 L1110.6 690.164 L1111.16 690.164 L1111.72 690.164 L1112.28 690.164 L1112.84 690.164 L1113.4 690.164 L1113.96 690.164 L1114.52 690.164 L1115.08 690.164 L1115.64 690.164 L1116.2 690.164 L1116.76 690.164 L1117.31 690.164 L1117.87 690.164 L1118.43 690.164 L1118.99 690.164 L1119.55 690.164 L1120.11 690.164 L1120.67 690.164 L1121.23 690.164 L1121.79 690.164 L1122.35 690.164 L1122.91 690.164 L1123.47 690.164 L1124.03 690.164 L1124.59 690.164 L1125.14 690.164 L1125.7 690.164 L1126.26 690.164 L1126.82 690.164 L1127.38 690.164 L1127.94 690.164 L1128.5 690.164 L1129.06 690.164 L1129.62 690.164 L1130.18 690.164 L1130.74 690.164 L1131.3 690.164 L1131.86 690.164 L1132.41 690.164 L1132.97 690.164 L1133.53 690.164 L1134.09 690.164 L1134.65 690.164 L1135.21 690.164 L1135.77 690.164 L1136.33 690.164 L1136.89 690.164 L1137.45 690.164 L1138.01 690.164 L1138.57 690.164 L1139.13 690.164 L1139.68 690.164 L1140.24 690.164 L1140.8 690.164 L1141.36 690.164 L1141.92 690.164 L1142.48 690.164 L1143.04 690.164 L1143.6 690.164 L1144.16 690.164 L1144.72 690.164 L1145.28 690.164 L1145.84 690.164 L1146.4 690.164 L1146.96 690.164 L1147.51 690.164 L1148.07 690.164 L1148.63 690.164 L1149.19 690.164 L1149.75 690.164 L1150.31 690.164 L1150.87 690.164 L1151.43 690.164 L1151.99 690.164 L1152.55 690.164 L1153.11 690.164 L1153.67 690.164 L1154.23 690.164 L1154.78 690.164 L1155.34 690.164 L1155.9 690.164 L1156.46 690.164 L1157.02 690.164 L1157.58 690.164 L1158.14 690.164 L1158.7 690.164 L1159.26 690.164 L1159.82 690.164 L1160.38 690.164 L1160.94 690.164 L1161.5 690.164 L1162.05 690.164 L1162.61 690.164 L1163.17 690.164 L1163.73 690.164 L1164.29 690.164 L1164.85 690.164 L1165.41 690.164 L1165.97 690.164 L1166.53 690.164 L1167.09 690.164 L1167.65 690.164 L1168.21 690.164 L1168.77 690.164 L1169.33 690.164 L1169.88 690.164 L1170.44 690.164 L1171 690.164 L1171.56 690.164 L1172.12 690.164 L1172.68 690.164 L1173.24 690.164 L1173.8 690.164 L1174.36 690.164 L1174.92 690.164 L1175.48 690.164 L1176.04 690.164 L1176.6 690.164 L1177.15 690.164 L1177.71 690.164 L1178.27 690.164 L1178.83 690.164 L1179.39 690.164 L1179.95 690.164 L1180.51 690.164 L1181.07 690.164 L1181.63 690.164 L1182.19 690.164 L1182.75 690.164 L1183.31 690.164 L1183.87 690.164 L1184.43 690.164 L1184.98 690.164 L1185.54 690.164 L1186.1 690.164 L1186.66 690.164 L1187.22 690.164 L1187.78 690.164 L1188.34 690.164 L1188.9 690.164 L1189.46 690.164 L1190.02 690.164 L1190.58 690.164 L1191.14 690.164 L1191.7 690.164 L1192.25 690.164 L1192.81 690.164 L1193.37 690.164 L1193.93 690.164 L1194.49 690.164 L1195.05 690.164 L1195.61 690.164 L1196.17 690.164 L1196.73 690.164 L1197.29 690.164 L1197.85 690.164 L1198.41 690.164 L1198.97 690.164 L1199.52 690.164 L1200.08 690.164 L1200.64 690.164 L1201.2 690.164 L1201.76 690.164 L1202.32 690.164 L1202.88 690.164 L1203.44 690.164 L1204 690.164 L1204.56 690.164 L1205.12 690.164 L1205.68 690.164 L1206.24 690.164 L1206.8 690.164 L1207.35 690.164 L1207.91 690.164 L1208.47 690.164 L1209.03 690.164 L1209.59 690.164 L1210.15 690.164 L1210.71 690.164 L1211.27 690.164 L1211.83 690.164 L1212.39 690.164 L1212.95 690.164 L1213.51 690.164 L1214.07 690.164 L1214.62 690.164 L1215.18 690.164 L1215.74 690.164 L1216.3 690.164 L1216.86 690.164 L1217.42 690.164 L1217.98 690.164 L1218.54 690.164 L1219.1 690.164 L1219.66 690.164 L1220.22 690.164 L1220.78 690.164 L1221.34 690.164 L1221.89 690.164 L1222.45 690.164 L1223.01 690.164 L1223.57 690.164 L1224.13 690.164 L1224.69 690.164 L1225.25 690.164 L1225.81 690.164 L1226.37 690.164 L1226.93 690.164 L1227.49 690.164 L1228.05 690.164 L1228.61 690.164 L1229.17 690.164 L1229.72 690.164 L1230.28 690.164 L1230.84 690.164 L1231.4 690.164 L1231.96 690.164 L1232.52 690.164 L1233.08 690.164 L1233.64 690.164 L1234.2 690.164 L1234.76 690.164 L1235.32 690.164 L1235.88 690.164 L1236.44 690.164 L1236.99 690.164 L1237.55 690.164 L1238.11 690.164 L1238.67 690.164 L1239.23 690.164 L1239.79 690.164 L1240.35 690.164 L1240.91 690.164 L1241.47 690.164 L1242.03 690.164 L1242.59 690.164 L1243.15 690.164 L1243.71 690.164 L1244.26 690.164 L1244.82 690.164 L1245.38 690.164 L1245.94 690.164 L1246.5 690.164 L1247.06 690.164 L1247.62 690.164 L1248.18 690.164 L1248.74 690.164 L1249.3 690.164 L1249.86 690.164 L1250.42 690.164 L1250.98 690.164 L1251.54 690.164 L1252.09 690.164 L1252.65 690.164 L1253.21 690.164 L1253.77 690.164 L1254.33 690.164 L1254.89 690.164 L1255.45 690.164 L1256.01 690.164 L1256.57 690.164 L1257.13 690.164 L1257.69 690.164 L1258.25 690.164 L1258.81 690.164 L1259.36 690.164 L1259.92 690.164 L1260.48 690.164 L1261.04 690.164 L1261.6 690.164 L1262.16 690.164 L1262.72 690.164 L1263.28 690.164 L1263.84 690.164 L1264.4 690.164 L1264.96 690.164 L1265.52 690.164 L1266.08 690.164 L1266.63 690.164 L1267.19 690.164 L1267.75 690.164 L1268.31 690.164 L1268.87 690.164 L1269.43 690.164 L1269.99 690.164 L1270.55 690.164 L1271.11 690.164 L1271.67 690.164 L1272.23 690.164 L1272.79 690.164 L1273.35 690.164 L1273.91 690.164 L1274.46 690.164 L1275.02 690.164 L1275.58 690.164 L1276.14 690.164 L1276.7 690.164 L1277.26 690.164 L1277.82 690.164 L1278.38 690.164 L1278.94 690.164 L1279.5 690.164 L1280.06 690.164 L1280.62 690.164 L1281.18 690.164 L1281.73 690.164 L1282.29 690.164 L1282.85 690.164 L1283.41 690.164 L1283.97 690.164 L1284.53 690.164 L1285.09 690.164 L1285.65 690.164 L1286.21 690.164 L1286.77 690.164 L1287.33 690.164 L1287.89 690.164 L1288.45 690.164 L1289 690.164 L1289.56 690.164 L1290.12 690.164 L1290.68 690.164 L1291.24 690.164 L1291.8 690.164 L1292.36 690.164 L1292.92 690.164 L1293.48 690.164 L1294.04 690.164 L1294.6 690.164 L1295.16 690.164 L1295.72 690.164 L1296.28 690.164 L1296.83 690.164 L1297.39 690.164 L1297.95 690.164 L1298.51 690.164 L1299.07 690.164 L1299.63 690.164 L1300.19 690.164 L1300.75 690.164 L1301.31 690.164 L1301.87 690.164 L1302.43 690.164 L1302.99 690.164 L1303.55 690.164 L1304.1 690.164 L1304.66 690.164 L1305.22 690.164 L1305.78 690.164 L1306.34 690.164 L1306.9 690.164 L1307.46 690.164 L1308.02 690.164 L1308.58 690.164 L1309.14 690.164 L1309.7 690.164 L1310.26 690.164 L1310.82 690.164 L1311.38 690.164 L1311.93 690.164 L1312.49 690.164 L1313.05 690.164 L1313.61 690.164 L1314.17 690.164 L1314.73 690.164 L1315.29 690.164 L1315.85 690.164 L1316.41 690.164 L1316.97 690.164 L1317.53 690.164 L1318.09 690.164 L1318.65 690.164 L1319.2 690.164 L1319.76 690.164 L1320.32 690.164 L1320.88 690.164 L1321.44 690.164 L1322 690.164 L1322.56 690.164 L1323.12 690.164 L1323.68 690.164 L1324.24 690.164 L1324.8 690.164 L1325.36 690.164 L1325.92 690.164 L1326.47 690.164 L1327.03 690.164 L1327.59 690.164 L1328.15 690.164 L1328.71 690.164 L1329.27 690.164 L1329.83 690.164 L1330.39 690.164 L1330.95 690.164 L1331.51 690.164 L1332.07 690.164 L1332.63 690.164 L1333.19 690.164 L1333.75 690.164 L1334.3 690.164 L1334.86 690.164 L1335.42 690.164 L1335.98 690.164 L1336.54 690.164 L1337.1 690.164 L1337.66 690.164 L1338.22 690.164 L1338.78 690.164 L1339.34 690.164 L1339.9 690.164 L1340.46 690.164 L1341.02 690.164 L1341.57 690.164 L1342.13 690.164 L1342.69 690.164 L1343.25 690.164 L1343.81 690.164 L1344.37 690.164 L1344.93 690.164 L1345.49 690.164 L1346.05 690.164 L1346.61 690.164 L1347.17 690.164 L1347.73 690.164 L1348.29 690.164 L1348.84 690.164 L1349.4 690.164 L1349.96 690.164 L1350.52 690.164 L1351.08 690.164 L1351.64 690.164 L1352.2 690.164 L1352.76 690.164 L1353.32 690.164 L1353.88 690.164 L1354.44 690.164 L1355 690.164 L1355.56 690.164 L1356.12 690.164 L1356.67 690.164 L1357.23 690.164 L1357.79 690.164 L1358.35 690.164 L1358.91 690.164 L1359.47 690.164 L1360.03 690.164 L1360.59 690.164 L1361.15 690.164 L1361.71 690.164 L1362.27 690.164 L1362.83 690.164 L1363.39 690.164 L1363.94 690.164 L1364.5 690.164 L1365.06 690.164 L1365.62 690.164 L1366.18 690.164 L1366.74 690.164 L1367.3 690.164 L1367.86 690.164 L1368.42 690.164 L1368.98 690.164 L1369.54 690.164 L1370.1 690.164 L1370.66 690.164 L1371.21 690.164 L1371.77 690.164 L1372.33 690.164 L1372.89 690.164 L1373.45 690.164 L1374.01 690.164 L1374.57 690.164 L1375.13 690.164 L1375.69 690.164 L1376.25 690.164 L1376.81 690.164 L1377.37 690.164 L1377.93 690.164 L1378.49 690.164 L1379.04 690.164 L1379.6 690.164 L1380.16 690.164 L1380.72 690.164 L1381.28 690.164 L1381.84 690.164 L1382.4 690.164 L1382.96 690.164 L1383.52 690.164 L1384.08 690.164 L1384.64 690.164 L1385.2 690.164 L1385.76 690.164 L1386.31 690.164 L1386.87 690.164 L1387.43 690.164 L1387.99 690.164 L1388.55 690.164 L1389.11 690.164 L1389.67 690.164 L1390.23 690.164 L1390.79 690.164 L1391.35 690.164 L1391.91 690.164 L1392.47 690.164 L1393.03 690.164 L1393.58 690.164 L1394.14 690.164 L1394.7 690.164 L1395.26 690.164 L1395.82 690.164 L1396.38 690.164 L1396.94 690.164 L1397.5 690.164 L1398.06 690.164 L1398.62 690.164 L1399.18 690.164 L1399.74 690.164 L1400.3 690.164 L1400.86 690.164 L1401.41 690.164 L1401.97 690.164 L1402.53 690.164 L1403.09 690.164 L1403.65 690.164 L1404.21 690.164 L1404.77 690.164 L1405.33 690.164 L1405.89 690.164 L1406.45 690.164 L1407.01 690.164 L1407.57 690.164 L1408.13 690.164 L1408.68 690.164 L1409.24 690.164 L1409.8 690.164 L1410.36 690.164 L1410.92 690.164 L1411.48 690.164 L1412.04 690.164 L1412.6 690.164 L1413.16 690.164 L1413.72 690.164 L1414.28 690.164 L1414.84 690.164 L1415.4 690.164 L1415.95 690.164 L1416.51 690.164 L1417.07 690.164 L1417.63 690.164 L1418.19 690.164 L1418.75 690.164 L1419.31 690.164 L1419.87 690.164 L1420.43 690.164 L1420.99 690.164 L1421.55 690.164 L1422.11 690.164 L1422.67 690.164 L1423.23 690.164 L1423.78 690.164 L1424.34 690.164 L1424.9 690.164 L1425.46 690.164 L1426.02 690.164 L1426.58 690.164 L1427.14 690.164 L1427.7 690.164 L1428.26 690.164 L1428.82 690.164 L1429.38 690.164 L1429.94 690.164 L1430.5 690.164 L1431.05 690.164 L1431.61 690.164 L1432.17 690.164 L1432.73 690.164 L1433.29 690.164 L1433.85 690.164 L1434.41 690.164 L1434.97 690.164 L1435.53 690.164 L1436.09 690.164 L1436.65 690.164 L1437.21 690.164 L1437.77 690.164 L1438.33 690.164 L1438.88 690.164 L1439.44 690.164 L1440 690.164 L1440.56 690.164 L1441.12 690.164 L1441.68 690.164 L1442.24 690.164 L1442.8 690.164 L1443.36 690.164 L1443.92 690.164 L1444.48 690.164 L1445.04 690.164 L1445.6 690.164 L1446.15 690.164 L1446.71 690.164 L1447.27 690.164 L1447.83 690.164 L1448.39 690.164 L1448.95 690.164 L1449.51 690.164 L1450.07 690.164 L1450.63 690.164 L1451.19 690.164 L1451.75 690.164 L1452.31 690.164 L1452.87 690.164 L1453.42 690.164 L1453.98 690.164 L1454.54 690.164 L1455.1 690.164 L1455.66 690.164 L1456.22 690.164 L1456.78 690.164 L1457.34 690.164 L1457.9 690.164 L1458.46 690.164 L1459.02 690.164 L1459.58 690.164 L1460.14 690.164 L1460.7 690.164 L1461.25 690.164 L1461.81 690.164 L1462.37 690.164 L1462.93 690.164 L1463.49 690.164 L1464.05 690.164 L1464.61 690.164 L1465.17 690.164 L1465.73 690.164 L1466.29 690.164 L1466.85 690.164 L1467.41 690.164 L1467.97 690.164 L1468.52 690.164 L1469.08 690.164 L1469.64 690.164 L1470.2 690.164 L1470.76 690.164 L1471.32 690.164 L1471.88 690.164 L1472.44 690.164 L1473 690.164 L1473.56 690.164 L1474.12 690.164 L1474.68 690.164 L1475.24 690.164 L1475.79 690.164 L1476.35 690.164 L1476.91 690.164 L1477.47 690.164 L1478.03 690.164 L1478.59 690.164 L1479.15 690.164 L1479.71 690.164 L1480.27 690.164 L1480.83 690.164 L1481.39 690.164 L1481.95 690.164 L1482.51 690.164 L1483.07 690.164 L1483.62 690.164 L1484.18 690.164 L1484.74 690.164 L1485.3 690.164 L1485.86 690.164 L1486.42 690.164 L1486.98 690.164 L1487.54 690.164 L1488.1 690.164 L1488.66 690.164 L1489.22 690.164 L1489.78 690.164 L1490.34 690.164 L1490.89 690.164 L1491.45 690.164 L1492.01 690.164 L1492.57 690.164 L1493.13 690.164 L1493.69 690.164 L1494.25 690.164 L1494.81 690.164 L1495.37 690.164 L1495.93 690.164 L1496.49 690.164 L1497.05 690.164 L1497.61 690.164 L1498.16 690.164 L1498.72 690.164 L1499.28 690.164 L1499.84 690.164 L1500.4 690.164 L1500.96 690.164 L1501.52 690.164 L1502.08 690.164 L1502.64 690.164 L1503.2 690.164 L1503.76 690.164 L1504.32 690.164 L1504.88 690.164 L1505.44 690.164 L1505.99 690.164 L1506.55 690.164 L1507.11 690.164 L1507.67 690.164 L1508.23 690.164 L1508.79 690.164 L1509.35 690.164 L1509.91 690.164 L1510.47 690.164 L1511.03 690.164 L1511.59 690.164 L1512.15 690.164 L1512.71 690.164 L1513.26 690.164 L1513.82 690.164 L1514.38 690.164 L1514.94 690.164 L1515.5 690.164 L1516.06 690.164 L1516.62 690.164 L1517.18 690.164 L1517.74 690.164 L1518.3 690.164 L1518.86 690.164 L1519.42 690.164 L1519.98 690.164 L1520.53 690.164 L1521.09 690.164 L1521.65 690.164 L1522.21 690.164 L1522.77 690.164 L1523.33 690.164 L1523.89 690.164 L1524.45 690.164 L1525.01 690.164 L1525.57 690.164 L1526.13 690.164 L1526.69 690.164 L1527.25 690.164 L1527.81 690.164 L1528.36 690.164 L1528.92 690.164 L1529.48 690.164 L1530.04 690.164 L1530.6 690.164 L1531.16 690.164 L1531.72 690.164 L1532.28 690.164 L1532.84 690.164 L1533.4 690.164 L1533.96 690.164 L1534.52 690.164 L1535.08 690.164 L1535.63 690.164 L1536.19 690.164 L1536.75 690.164 L1537.31 690.164 L1537.87 690.164 L1538.43 690.164 L1538.99 690.164 L1539.55 690.164 L1540.11 690.164 L1540.67 690.164 L1541.23 690.164 L1541.79 690.164 L1542.35 690.164 L1542.9 690.164 L1543.46 690.164 L1544.02 690.164 L1544.58 690.164 L1545.14 690.164 L1545.7 690.164 L1546.26 690.164 L1546.82 690.164 L1547.38 690.164 L1547.94 690.164 L1548.5 690.164 L1549.06 690.164 L1549.62 690.164 L1550.18 690.164 L1550.73 690.164 L1551.29 690.164 L1551.85 690.164 L1552.41 690.164 L1552.97 690.164 L1553.53 690.164 L1554.09 690.164 L1554.65 690.164 L1555.21 690.164 L1555.77 690.164 L1556.33 690.164 L1556.89 690.164 L1557.45 690.164 L1558 690.164 L1558.56 690.164 L1559.12 690.164 L1559.68 690.164 L1560.24 690.164 L1560.8 690.164 L1561.36 690.164 L1561.92 690.164 L1562.48 690.164 L1563.04 690.164 L1563.6 690.164 L1564.16 690.164 L1564.72 690.164 L1565.28 690.164 L1565.83 690.164 L1566.39 690.164 L1566.95 690.164 L1567.51 690.164 L1568.07 690.164 L1568.63 690.164 L1569.19 690.164 L1569.75 690.164 L1570.31 690.164 L1570.87 690.164 L1571.43 690.164 L1571.99 690.164 L1572.55 690.164 L1573.1 690.164 L1573.66 690.164 L1574.22 690.164 L1574.78 690.164 L1575.34 690.164 L1575.9 690.164 L1576.46 690.164 L1577.02 690.164 L1577.58 690.164 L1578.14 690.164 L1578.7 690.164 L1579.26 690.164 L1579.82 690.164 L1580.37 690.164 L1580.93 690.164 L1581.49 690.164 L1582.05 690.164 L1582.61 690.164 L1583.17 690.164 L1583.73 690.164 L1584.29 690.164 L1584.85 690.164 L1585.41 690.164 L1585.97 690.164 L1586.53 690.164 L1587.09 690.164 L1587.65 690.164 L1588.2 690.164 L1588.76 690.164 L1589.32 690.164 L1589.88 690.164 L1590.44 690.164 L1591 690.164 L1591.56 690.164 L1592.12 690.164 L1592.68 690.164 L1593.24 690.164 L1593.8 690.164 L1594.36 690.164 L1594.92 690.164 L1595.47 690.164 L1596.03 690.164 L1596.59 690.164 L1597.15 690.164 L1597.71 690.164 L1598.27 690.164 L1598.83 690.164 L1599.39 690.164 L1599.95 690.164 L1600.51 690.164 L1601.07 690.164 L1601.63 690.164 L1602.19 690.164 L1602.74 690.164 L1603.3 690.164 L1603.86 690.164 L1604.42 690.164 L1604.98 690.164 L1605.54 690.164 L1606.1 690.164 L1606.66 690.164 L1607.22 690.164 L1607.78 690.164 L1608.34 690.164 L1608.9 690.164 L1609.46 690.164 L1610.02 690.164 L1610.57 690.164 L1611.13 690.164 L1611.69 690.164 L1612.25 690.164 L1612.81 690.164 L1613.37 690.164 L1613.93 690.164 L1614.49 690.164 L1615.05 690.164 L1615.61 690.164 L1616.17 690.164 L1616.73 690.164 L1617.29 690.164 L1617.84 690.164 L1618.4 690.164 L1618.96 690.164 L1619.52 690.164 L1620.08 690.164 L1620.64 690.164 L1621.2 690.164 L1621.76 690.164 L1622.32 690.164 L1622.88 690.164 L1623.44 690.164 L1624 690.164 L1624.56 690.164 L1625.11 690.164 L1625.67 690.164 L1626.23 690.164 L1626.79 690.164 L1627.35 690.164 L1627.91 690.164 L1628.47 690.164 L1629.03 690.164 L1629.59 690.164 L1630.15 690.164 L1630.71 690.164 L1631.27 690.164 L1631.83 690.164 L1632.39 690.164 L1632.94 690.164 L1633.5 690.164 L1634.06 690.164 L1634.62 690.164 L1635.18 690.164 L1635.74 690.164 L1636.3 690.164 L1636.86 690.164 L1637.42 690.164 L1637.98 690.164 L1638.54 690.164 L1639.1 690.164 L1639.66 690.164 L1640.21 690.164 L1640.77 690.164 L1641.33 690.164 L1641.89 690.164 L1642.45 690.164 L1643.01 690.164 L1643.57 690.164 L1644.13 690.164 L1644.69 690.164 L1645.25 690.164 L1645.81 690.164 L1646.37 690.164 L1646.93 690.164 L1647.48 690.164 L1648.04 690.164 L1648.6 690.164 L1649.16 690.164 L1649.72 690.164 L1650.28 690.164 L1650.84 690.164 L1651.4 690.164 L1651.96 690.164 L1652.52 690.164 L1653.08 690.164 L1653.64 690.164 L1654.2 690.164 L1654.76 690.164 L1655.31 690.164 L1655.87 690.164 L1656.43 690.164 L1656.99 690.164 L1657.55 690.164 L1658.11 690.164 L1658.67 690.164 L1659.23 690.164 L1659.79 690.164 L1660.35 690.164 L1660.91 690.164 L1661.47 690.164 L1662.03 690.164 L1662.58 690.164 L1663.14 690.164 L1663.7 690.164 L1664.26 690.164 L1664.82 690.164 L1665.38 690.164 L1665.94 690.164 L1666.5 690.164 L1667.06 690.164 L1667.62 690.164 L1668.18 690.164 L1668.74 690.164 L1669.3 690.164 L1669.85 690.164 L1670.41 690.164 L1670.97 690.164 L1671.53 690.164 L1672.09 690.164 L1672.65 690.164 L1673.21 690.164 L1673.77 690.164 L1674.33 690.164 L1674.89 690.164 L1675.45 690.164 L1676.01 690.164 L1676.57 690.164 L1677.13 690.164 L1677.68 690.164 L1678.24 690.164 L1678.8 690.164 L1679.36 690.164 L1679.92 690.164 L1680.48 690.164 L1681.04 690.164 L1681.6 690.164 L1682.16 690.164 L1682.72 690.164 L1683.28 690.164 L1683.84 690.164 L1684.4 690.164 L1684.95 690.164 L1685.51 690.164 L1686.07 690.164 L1686.63 690.164 L1687.19 690.164 L1687.75 690.164 L1688.31 690.164 L1688.87 690.164 L1689.43 690.164 L1689.99 690.164 L1690.55 690.164 L1691.11 690.164 L1691.67 690.164 L1692.23 690.164 L1692.78 690.164 L1693.34 690.164 L1693.9 690.164 L1694.46 690.164 L1695.02 690.164 L1695.58 690.164 L1696.14 690.164 L1696.7 690.164 L1697.26 690.164 L1697.82 690.164 L1698.38 690.164 L1698.94 690.164 L1699.5 690.164 L1700.05 690.164 L1700.61 690.164 L1701.17 690.164 L1701.73 690.164 L1702.29 690.164 L1702.85 690.164 L1703.41 690.164 L1703.97 690.164 L1704.53 690.164 L1705.09 690.164 L1705.65 690.164 L1706.21 690.164 L1706.77 690.164 L1707.32 690.164 L1707.88 690.164 L1708.44 690.164 L1709 690.164 L1709.56 690.164 L1710.12 690.164 L1710.68 690.164 L1711.24 690.164 L1711.8 690.164 L1712.36 690.164 L1712.92 690.164 L1713.48 690.164 L1714.04 690.164 L1714.6 690.164 L1715.15 690.164 L1715.71 690.164 L1716.27 690.164 L1716.83 690.164 L1717.39 690.164 L1717.95 690.164 L1718.51 690.164 L1719.07 690.164 L1719.63 690.164 L1720.19 690.164 L1720.75 690.164 L1721.31 690.164 L1721.87 690.164 L1722.42 690.164 L1722.98 690.164 L1723.54 690.164 L1724.1 690.164 L1724.66 690.164 L1725.22 690.164 L1725.78 690.164 L1726.34 690.164 L1726.9 690.164 L1727.46 690.164 L1728.02 690.164 L1728.58 690.164 L1729.14 690.164 L1729.69 690.164 L1730.25 690.164 L1730.81 690.164 L1731.37 690.164 L1731.93 690.164 L1732.49 690.164 L1733.05 690.164 L1733.61 690.164 L1734.17 690.164 L1734.73 690.164 L1735.29 690.164 L1735.85 690.164 L1736.41 690.164 L1736.97 690.164 L1737.52 690.164 L1738.08 690.164 L1738.64 690.164 L1739.2 690.164 L1739.76 690.164 L1740.32 690.164 L1740.88 690.164 L1741.44 690.164 L1742 690.164 L1742.56 690.164 L1743.12 690.164 L1743.68 690.164 L1744.24 690.164 L1744.79 690.164 L1745.35 690.164 L1745.91 690.164 L1746.47 690.164 L1747.03 690.164 L1747.59 690.164 L1748.15 690.164 L1748.71 690.164 L1749.27 690.164 L1749.83 690.164 L1750.39 690.164 L1750.95 690.164 L1751.51 690.164 L1752.06 690.164 L1752.62 690.164 L1753.18 690.164 L1753.74 690.164 L1754.3 690.164 L1754.86 690.164 L1755.42 690.164 L1755.98 690.164 L1756.54 690.164 L1757.1 690.164 L1757.66 690.164 L1758.22 690.164 L1758.78 690.164 L1759.34 690.164 L1759.89 690.164 L1760.45 690.164 L1761.01 690.164 L1761.57 690.164 L1762.13 690.164 L1762.69 690.164 L1763.25 690.164 L1763.81 690.164 L1764.37 690.164 L1764.93 690.164 L1765.49 690.164 L1766.05 690.164 L1766.61 690.164 L1767.16 690.164 L1767.72 690.164 L1768.28 690.164 L1768.84 690.164 L1769.4 690.164 L1769.96 690.164 L1770.52 690.164 L1771.08 690.164 L1771.64 690.164 L1772.2 690.164 L1772.76 690.164 L1773.32 690.164 L1773.88 690.164 L1774.43 690.164 L1774.99 690.164 L1775.55 690.164 L1776.11 690.164 L1776.67 690.164 L1777.23 690.164 L1777.79 690.164 L1778.35 690.164 L1778.91 690.164 L1779.47 690.164 L1780.03 690.164 L1780.59 690.164 L1781.15 690.164 L1781.71 690.164 L1782.26 690.164 L1782.82 690.164 L1783.38 690.164 L1783.94 690.164 L1784.5 690.164 L1785.06 690.164 L1785.62 690.164 L1786.18 690.164 L1786.74 690.164 L1787.3 690.164 L1787.86 690.164 L1788.42 690.164 L1788.98 690.164 L1789.53 690.164 L1790.09 690.164 L1790.65 690.164 L1791.21 690.164 L1791.77 690.164 L1792.33 690.164 L1792.89 690.164 L1793.45 690.164 L1794.01 690.164 L1794.57 690.164 L1795.13 690.164 L1795.69 690.164 L1796.25 690.164 L1796.8 690.164 L1797.36 690.164 L1797.92 690.164 L1798.48 690.164 L1799.04 690.164 L1799.6 690.164 L1800.16 690.164 L1800.72 690.164 L1801.28 690.164 L1801.84 690.164 L1802.4 690.164 L1802.96 690.164 L1803.52 690.164 L1804.08 690.164 L1804.63 690.164 L1805.19 690.164 L1805.75 690.164 L1806.31 690.164 L1806.87 690.164 L1807.43 690.164 L1807.99 690.164 L1808.55 690.164 L1809.11 690.164 L1809.67 690.164 L1810.23 690.164 L1810.79 690.164 L1811.35 690.164 L1811.9 690.164 L1812.46 690.164 L1813.02 690.164 L1813.58 690.164 L1814.14 690.164 L1814.7 690.164 L1815.26 690.164 L1815.82 690.164 L1816.38 690.164 L1816.94 690.164 L1817.5 690.164 L1818.06 690.164 L1818.62 690.164 L1819.18 690.164 L1819.73 690.164 L1820.29 690.164 L1820.85 690.164 L1821.41 690.164 L1821.97 690.164 L1822.53 690.164 L1823.09 690.164 L1823.65 690.164 L1824.21 690.164 L1824.77 690.164 L1825.33 690.164 L1825.89 690.164 L1826.45 690.164 L1827 690.164 L1827.56 690.164 L1828.12 690.164 L1828.68 690.164 L1829.24 690.164 L1829.8 690.164 L1830.36 690.164 L1830.92 690.164 L1831.48 690.164 L1832.04 690.164 L1832.6 690.164 L1833.16 690.164 L1833.72 690.164 L1834.27 690.164 L1834.83 690.164 L1835.39 690.164 L1835.95 690.164 L1836.51 690.164 L1837.07 690.164 L1837.63 690.164 L1838.19 690.164 L1838.19 680.776 L1837.63 680.776 L1837.07 680.776 L1836.51 680.776 L1835.95 680.776 L1835.39 680.776 L1834.83 680.776 L1834.27 680.776 L1833.72 680.776 L1833.16 680.776 L1832.6 680.776 L1832.04 680.776 L1831.48 680.776 L1830.92 680.776 L1830.36 680.776 L1829.8 680.776 L1829.24 680.776 L1828.68 680.776 L1828.12 680.776 L1827.56 680.776 L1827 680.776 L1826.45 680.776 L1825.89 680.776 L1825.33 680.776 L1824.77 680.776 L1824.21 680.776 L1823.65 680.776 L1823.09 680.776 L1822.53 680.776 L1821.97 680.776 L1821.41 680.776 L1820.85 680.776 L1820.29 680.776 L1819.73 680.776 L1819.18 680.776 L1818.62 680.776 L1818.06 680.776 L1817.5 680.776 L1816.94 680.776 L1816.38 680.776 L1815.82 680.776 L1815.26 680.776 L1814.7 680.776 L1814.14 680.776 L1813.58 680.776 L1813.02 680.776 L1812.46 680.776 L1811.9 680.776 L1811.35 680.776 L1810.79 680.776 L1810.23 680.776 L1809.67 680.776 L1809.11 680.776 L1808.55 680.776 L1807.99 680.776 L1807.43 680.776 L1806.87 680.776 L1806.31 680.776 L1805.75 680.776 L1805.19 680.776 L1804.63 680.776 L1804.08 680.776 L1803.52 680.776 L1802.96 680.776 L1802.4 680.776 L1801.84 680.776 L1801.28 680.776 L1800.72 680.776 L1800.16 680.776 L1799.6 680.776 L1799.04 680.776 L1798.48 680.776 L1797.92 680.776 L1797.36 680.776 L1796.8 680.776 L1796.25 680.776 L1795.69 680.776 L1795.13 680.776 L1794.57 680.776 L1794.01 680.776 L1793.45 680.776 L1792.89 680.776 L1792.33 680.776 L1791.77 680.776 L1791.21 680.776 L1790.65 680.776 L1790.09 680.776 L1789.53 680.776 L1788.98 680.776 L1788.42 680.776 L1787.86 680.776 L1787.3 680.776 L1786.74 680.776 L1786.18 680.776 L1785.62 680.776 L1785.06 680.776 L1784.5 680.776 L1783.94 680.776 L1783.38 680.776 L1782.82 680.776 L1782.26 680.776 L1781.71 680.776 L1781.15 680.776 L1780.59 680.776 L1780.03 680.776 L1779.47 680.776 L1778.91 680.776 L1778.35 680.776 L1777.79 680.776 L1777.23 680.776 L1776.67 680.776 L1776.11 680.776 L1775.55 680.776 L1774.99 680.776 L1774.43 680.776 L1773.88 680.776 L1773.32 680.776 L1772.76 680.776 L1772.2 680.776 L1771.64 680.776 L1771.08 680.776 L1770.52 680.776 L1769.96 680.776 L1769.4 680.776 L1768.84 680.776 L1768.28 680.776 L1767.72 680.776 L1767.16 680.776 L1766.61 680.776 L1766.05 680.776 L1765.49 680.776 L1764.93 680.776 L1764.37 680.776 L1763.81 680.776 L1763.25 680.776 L1762.69 680.776 L1762.13 680.776 L1761.57 680.776 L1761.01 680.776 L1760.45 680.776 L1759.89 680.776 L1759.34 680.776 L1758.78 680.776 L1758.22 680.776 L1757.66 680.776 L1757.1 680.776 L1756.54 680.776 L1755.98 680.776 L1755.42 680.776 L1754.86 680.776 L1754.3 680.776 L1753.74 680.776 L1753.18 680.776 L1752.62 680.776 L1752.06 680.776 L1751.51 680.776 L1750.95 680.776 L1750.39 680.776 L1749.83 680.776 L1749.27 680.776 L1748.71 680.776 L1748.15 680.776 L1747.59 680.776 L1747.03 680.776 L1746.47 680.776 L1745.91 680.776 L1745.35 680.776 L1744.79 680.776 L1744.24 680.776 L1743.68 680.776 L1743.12 680.776 L1742.56 680.776 L1742 680.776 L1741.44 680.776 L1740.88 680.776 L1740.32 680.776 L1739.76 680.776 L1739.2 680.776 L1738.64 680.776 L1738.08 680.776 L1737.52 680.776 L1736.97 680.776 L1736.41 680.776 L1735.85 680.776 L1735.29 680.776 L1734.73 680.776 L1734.17 680.776 L1733.61 680.776 L1733.05 680.776 L1732.49 680.776 L1731.93 680.776 L1731.37 680.776 L1730.81 680.776 L1730.25 680.776 L1729.69 680.776 L1729.14 680.776 L1728.58 680.776 L1728.02 680.776 L1727.46 680.776 L1726.9 680.776 L1726.34 680.776 L1725.78 680.776 L1725.22 680.776 L1724.66 680.776 L1724.1 680.776 L1723.54 680.776 L1722.98 680.776 L1722.42 680.776 L1721.87 680.776 L1721.31 680.776 L1720.75 680.776 L1720.19 680.776 L1719.63 680.776 L1719.07 680.776 L1718.51 680.776 L1717.95 680.776 L1717.39 680.776 L1716.83 680.776 L1716.27 680.776 L1715.71 680.776 L1715.15 680.776 L1714.6 680.776 L1714.04 680.776 L1713.48 680.776 L1712.92 680.776 L1712.36 680.776 L1711.8 680.776 L1711.24 680.776 L1710.68 680.776 L1710.12 680.776 L1709.56 680.776 L1709 680.776 L1708.44 680.776 L1707.88 680.776 L1707.32 680.776 L1706.77 680.776 L1706.21 680.776 L1705.65 680.776 L1705.09 680.776 L1704.53 680.776 L1703.97 680.776 L1703.41 680.776 L1702.85 680.776 L1702.29 680.776 L1701.73 680.776 L1701.17 680.776 L1700.61 680.776 L1700.05 680.776 L1699.5 680.776 L1698.94 680.776 L1698.38 680.776 L1697.82 680.776 L1697.26 680.776 L1696.7 680.776 L1696.14 680.776 L1695.58 680.776 L1695.02 680.776 L1694.46 680.776 L1693.9 680.776 L1693.34 680.776 L1692.78 680.776 L1692.23 680.776 L1691.67 680.776 L1691.11 680.776 L1690.55 680.776 L1689.99 680.776 L1689.43 680.776 L1688.87 680.776 L1688.31 680.776 L1687.75 680.776 L1687.19 680.776 L1686.63 680.776 L1686.07 680.776 L1685.51 680.776 L1684.95 680.776 L1684.4 680.776 L1683.84 680.776 L1683.28 680.776 L1682.72 680.776 L1682.16 680.776 L1681.6 680.776 L1681.04 680.776 L1680.48 680.776 L1679.92 680.776 L1679.36 680.776 L1678.8 680.776 L1678.24 680.776 L1677.68 680.776 L1677.13 680.776 L1676.57 680.776 L1676.01 680.776 L1675.45 680.776 L1674.89 680.776 L1674.33 680.776 L1673.77 680.776 L1673.21 680.776 L1672.65 680.776 L1672.09 680.776 L1671.53 680.776 L1670.97 680.776 L1670.41 680.776 L1669.85 680.776 L1669.3 680.776 L1668.74 680.776 L1668.18 680.776 L1667.62 680.776 L1667.06 680.776 L1666.5 680.776 L1665.94 680.776 L1665.38 680.776 L1664.82 680.776 L1664.26 680.776 L1663.7 680.776 L1663.14 680.776 L1662.58 680.776 L1662.03 680.776 L1661.47 680.776 L1660.91 680.776 L1660.35 680.776 L1659.79 680.776 L1659.23 680.776 L1658.67 680.776 L1658.11 680.776 L1657.55 680.776 L1656.99 680.776 L1656.43 680.776 L1655.87 680.776 L1655.31 680.776 L1654.76 680.776 L1654.2 680.776 L1653.64 680.776 L1653.08 680.776 L1652.52 680.776 L1651.96 680.776 L1651.4 680.776 L1650.84 680.776 L1650.28 680.776 L1649.72 680.776 L1649.16 680.776 L1648.6 680.776 L1648.04 680.776 L1647.48 680.776 L1646.93 680.776 L1646.37 680.776 L1645.81 680.776 L1645.25 680.776 L1644.69 680.776 L1644.13 680.776 L1643.57 680.776 L1643.01 680.776 L1642.45 680.776 L1641.89 680.776 L1641.33 680.776 L1640.77 680.776 L1640.21 680.776 L1639.66 680.776 L1639.1 680.776 L1638.54 680.776 L1637.98 680.776 L1637.42 680.776 L1636.86 680.776 L1636.3 680.776 L1635.74 680.776 L1635.18 680.776 L1634.62 680.776 L1634.06 680.776 L1633.5 680.776 L1632.94 680.776 L1632.39 680.776 L1631.83 680.776 L1631.27 680.776 L1630.71 680.776 L1630.15 680.776 L1629.59 680.776 L1629.03 680.776 L1628.47 680.776 L1627.91 680.776 L1627.35 680.776 L1626.79 680.776 L1626.23 680.776 L1625.67 680.776 L1625.11 680.776 L1624.56 680.776 L1624 680.776 L1623.44 680.776 L1622.88 680.776 L1622.32 680.776 L1621.76 680.776 L1621.2 680.776 L1620.64 680.776 L1620.08 680.776 L1619.52 680.776 L1618.96 680.776 L1618.4 680.776 L1617.84 680.776 L1617.29 680.776 L1616.73 680.776 L1616.17 680.776 L1615.61 680.776 L1615.05 680.776 L1614.49 680.776 L1613.93 680.776 L1613.37 680.776 L1612.81 680.776 L1612.25 680.776 L1611.69 680.776 L1611.13 680.776 L1610.57 680.776 L1610.02 680.776 L1609.46 680.776 L1608.9 680.776 L1608.34 680.776 L1607.78 680.776 L1607.22 680.776 L1606.66 680.776 L1606.1 680.776 L1605.54 680.776 L1604.98 680.776 L1604.42 680.776 L1603.86 680.776 L1603.3 680.776 L1602.74 680.776 L1602.19 680.776 L1601.63 680.776 L1601.07 680.776 L1600.51 680.776 L1599.95 680.776 L1599.39 680.776 L1598.83 680.776 L1598.27 680.776 L1597.71 680.776 L1597.15 680.776 L1596.59 680.776 L1596.03 680.776 L1595.47 680.776 L1594.92 680.776 L1594.36 680.776 L1593.8 680.776 L1593.24 680.776 L1592.68 680.776 L1592.12 680.776 L1591.56 680.776 L1591 680.776 L1590.44 680.776 L1589.88 680.776 L1589.32 680.776 L1588.76 680.776 L1588.2 680.776 L1587.65 680.776 L1587.09 680.776 L1586.53 680.776 L1585.97 680.776 L1585.41 680.776 L1584.85 680.776 L1584.29 680.776 L1583.73 680.776 L1583.17 680.776 L1582.61 680.776 L1582.05 680.776 L1581.49 680.776 L1580.93 680.776 L1580.37 680.776 L1579.82 680.776 L1579.26 680.776 L1578.7 680.776 L1578.14 680.776 L1577.58 680.776 L1577.02 680.776 L1576.46 680.776 L1575.9 680.776 L1575.34 680.776 L1574.78 680.776 L1574.22 680.776 L1573.66 680.776 L1573.1 680.776 L1572.55 680.776 L1571.99 680.776 L1571.43 680.776 L1570.87 680.776 L1570.31 680.776 L1569.75 680.776 L1569.19 680.776 L1568.63 680.776 L1568.07 680.776 L1567.51 680.776 L1566.95 680.776 L1566.39 680.776 L1565.83 680.776 L1565.28 680.776 L1564.72 680.776 L1564.16 680.776 L1563.6 680.776 L1563.04 680.776 L1562.48 680.776 L1561.92 680.776 L1561.36 680.776 L1560.8 680.776 L1560.24 680.776 L1559.68 680.776 L1559.12 680.776 L1558.56 680.776 L1558 680.776 L1557.45 680.776 L1556.89 680.776 L1556.33 680.776 L1555.77 680.776 L1555.21 680.776 L1554.65 680.776 L1554.09 680.776 L1553.53 680.776 L1552.97 680.776 L1552.41 680.776 L1551.85 680.776 L1551.29 680.776 L1550.73 680.776 L1550.18 680.776 L1549.62 680.776 L1549.06 680.776 L1548.5 680.776 L1547.94 680.776 L1547.38 680.776 L1546.82 680.776 L1546.26 680.776 L1545.7 680.776 L1545.14 680.776 L1544.58 680.776 L1544.02 680.776 L1543.46 680.776 L1542.9 680.776 L1542.35 680.776 L1541.79 680.776 L1541.23 680.776 L1540.67 680.776 L1540.11 680.776 L1539.55 680.776 L1538.99 680.776 L1538.43 680.776 L1537.87 680.776 L1537.31 680.776 L1536.75 680.776 L1536.19 680.776 L1535.63 680.776 L1535.08 680.776 L1534.52 680.776 L1533.96 680.776 L1533.4 680.776 L1532.84 680.776 L1532.28 680.776 L1531.72 680.776 L1531.16 680.776 L1530.6 680.776 L1530.04 680.776 L1529.48 680.776 L1528.92 680.776 L1528.36 680.776 L1527.81 680.776 L1527.25 680.776 L1526.69 680.776 L1526.13 680.776 L1525.57 680.776 L1525.01 680.776 L1524.45 680.776 L1523.89 680.776 L1523.33 680.776 L1522.77 680.776 L1522.21 680.776 L1521.65 680.776 L1521.09 680.776 L1520.53 680.776 L1519.98 680.776 L1519.42 680.776 L1518.86 680.776 L1518.3 680.776 L1517.74 680.776 L1517.18 680.776 L1516.62 680.776 L1516.06 680.776 L1515.5 680.776 L1514.94 680.776 L1514.38 680.776 L1513.82 680.776 L1513.26 680.776 L1512.71 680.776 L1512.15 680.776 L1511.59 680.776 L1511.03 680.776 L1510.47 680.776 L1509.91 680.776 L1509.35 680.776 L1508.79 680.776 L1508.23 680.776 L1507.67 680.776 L1507.11 680.776 L1506.55 680.776 L1505.99 680.776 L1505.44 680.776 L1504.88 680.776 L1504.32 680.776 L1503.76 680.776 L1503.2 680.776 L1502.64 680.776 L1502.08 680.776 L1501.52 680.776 L1500.96 680.776 L1500.4 680.776 L1499.84 680.776 L1499.28 680.776 L1498.72 680.776 L1498.16 680.776 L1497.61 680.776 L1497.05 680.776 L1496.49 680.776 L1495.93 680.776 L1495.37 680.776 L1494.81 680.776 L1494.25 680.776 L1493.69 680.776 L1493.13 680.776 L1492.57 680.776 L1492.01 680.776 L1491.45 680.776 L1490.89 680.776 L1490.34 680.776 L1489.78 680.776 L1489.22 680.776 L1488.66 680.776 L1488.1 680.776 L1487.54 680.776 L1486.98 680.776 L1486.42 680.776 L1485.86 680.776 L1485.3 680.776 L1484.74 680.776 L1484.18 680.776 L1483.62 680.776 L1483.07 680.776 L1482.51 680.776 L1481.95 680.776 L1481.39 680.776 L1480.83 680.776 L1480.27 680.776 L1479.71 680.776 L1479.15 680.776 L1478.59 680.776 L1478.03 680.776 L1477.47 680.776 L1476.91 680.776 L1476.35 680.776 L1475.79 680.776 L1475.24 680.776 L1474.68 680.776 L1474.12 680.776 L1473.56 680.776 L1473 680.776 L1472.44 680.776 L1471.88 680.776 L1471.32 680.776 L1470.76 680.776 L1470.2 680.776 L1469.64 680.776 L1469.08 680.776 L1468.52 680.776 L1467.97 680.776 L1467.41 680.776 L1466.85 680.776 L1466.29 680.776 L1465.73 680.776 L1465.17 680.776 L1464.61 680.776 L1464.05 680.776 L1463.49 680.776 L1462.93 680.776 L1462.37 680.776 L1461.81 680.776 L1461.25 680.776 L1460.7 680.776 L1460.14 680.776 L1459.58 680.776 L1459.02 680.776 L1458.46 680.776 L1457.9 680.776 L1457.34 680.776 L1456.78 680.776 L1456.22 680.776 L1455.66 680.776 L1455.1 680.776 L1454.54 680.776 L1453.98 680.776 L1453.42 680.776 L1452.87 680.776 L1452.31 680.776 L1451.75 680.776 L1451.19 680.776 L1450.63 680.776 L1450.07 680.776 L1449.51 680.776 L1448.95 680.776 L1448.39 680.776 L1447.83 680.776 L1447.27 680.776 L1446.71 680.776 L1446.15 680.776 L1445.6 680.776 L1445.04 680.776 L1444.48 680.776 L1443.92 680.776 L1443.36 680.776 L1442.8 680.776 L1442.24 680.776 L1441.68 680.776 L1441.12 680.776 L1440.56 680.776 L1440 680.776 L1439.44 680.776 L1438.88 680.776 L1438.33 680.776 L1437.77 680.776 L1437.21 680.776 L1436.65 680.776 L1436.09 680.776 L1435.53 680.776 L1434.97 680.776 L1434.41 680.776 L1433.85 680.776 L1433.29 680.776 L1432.73 680.776 L1432.17 680.776 L1431.61 680.776 L1431.05 680.776 L1430.5 680.776 L1429.94 680.776 L1429.38 680.776 L1428.82 680.776 L1428.26 680.776 L1427.7 680.776 L1427.14 680.776 L1426.58 680.776 L1426.02 680.776 L1425.46 680.776 L1424.9 680.776 L1424.34 680.776 L1423.78 680.776 L1423.23 680.776 L1422.67 680.776 L1422.11 680.776 L1421.55 680.776 L1420.99 680.776 L1420.43 680.776 L1419.87 680.776 L1419.31 680.776 L1418.75 680.776 L1418.19 680.776 L1417.63 680.776 L1417.07 680.776 L1416.51 680.776 L1415.95 680.776 L1415.4 680.776 L1414.84 680.776 L1414.28 680.776 L1413.72 680.776 L1413.16 680.776 L1412.6 680.776 L1412.04 680.776 L1411.48 680.776 L1410.92 680.776 L1410.36 680.776 L1409.8 680.776 L1409.24 680.776 L1408.68 680.776 L1408.13 680.776 L1407.57 680.776 L1407.01 680.776 L1406.45 680.776 L1405.89 680.776 L1405.33 680.776 L1404.77 680.776 L1404.21 680.776 L1403.65 680.776 L1403.09 680.776 L1402.53 680.776 L1401.97 680.776 L1401.41 680.776 L1400.86 680.776 L1400.3 680.776 L1399.74 680.776 L1399.18 680.776 L1398.62 680.776 L1398.06 680.776 L1397.5 680.776 L1396.94 680.776 L1396.38 680.776 L1395.82 680.776 L1395.26 680.776 L1394.7 680.776 L1394.14 680.776 L1393.58 680.776 L1393.03 680.776 L1392.47 680.776 L1391.91 680.776 L1391.35 680.776 L1390.79 680.776 L1390.23 680.776 L1389.67 680.776 L1389.11 680.776 L1388.55 680.776 L1387.99 680.776 L1387.43 680.776 L1386.87 680.776 L1386.31 680.776 L1385.76 680.776 L1385.2 680.776 L1384.64 680.776 L1384.08 680.776 L1383.52 680.776 L1382.96 680.776 L1382.4 680.776 L1381.84 680.776 L1381.28 680.776 L1380.72 680.776 L1380.16 680.776 L1379.6 680.776 L1379.04 680.776 L1378.49 680.776 L1377.93 680.776 L1377.37 680.776 L1376.81 680.776 L1376.25 680.776 L1375.69 680.776 L1375.13 680.776 L1374.57 680.776 L1374.01 680.776 L1373.45 680.776 L1372.89 680.776 L1372.33 680.776 L1371.77 680.776 L1371.21 680.776 L1370.66 680.776 L1370.1 680.776 L1369.54 680.776 L1368.98 680.776 L1368.42 680.776 L1367.86 680.776 L1367.3 680.776 L1366.74 680.776 L1366.18 680.776 L1365.62 680.776 L1365.06 680.776 L1364.5 680.776 L1363.94 680.776 L1363.39 680.776 L1362.83 680.776 L1362.27 680.776 L1361.71 680.776 L1361.15 680.776 L1360.59 680.776 L1360.03 680.776 L1359.47 680.776 L1358.91 680.776 L1358.35 680.776 L1357.79 680.776 L1357.23 680.776 L1356.67 680.776 L1356.12 680.776 L1355.56 680.776 L1355 680.776 L1354.44 680.776 L1353.88 680.776 L1353.32 680.776 L1352.76 680.776 L1352.2 680.776 L1351.64 680.776 L1351.08 680.776 L1350.52 680.776 L1349.96 680.776 L1349.4 680.776 L1348.84 680.776 L1348.29 680.776 L1347.73 680.776 L1347.17 680.776 L1346.61 680.776 L1346.05 680.776 L1345.49 680.776 L1344.93 680.776 L1344.37 680.776 L1343.81 680.776 L1343.25 680.776 L1342.69 680.776 L1342.13 680.776 L1341.57 680.776 L1341.02 680.776 L1340.46 680.776 L1339.9 680.776 L1339.34 680.776 L1338.78 680.776 L1338.22 680.776 L1337.66 680.776 L1337.1 680.776 L1336.54 680.776 L1335.98 680.776 L1335.42 680.776 L1334.86 680.776 L1334.3 680.776 L1333.75 680.776 L1333.19 680.776 L1332.63 680.776 L1332.07 680.776 L1331.51 680.776 L1330.95 680.776 L1330.39 680.776 L1329.83 680.776 L1329.27 680.776 L1328.71 680.776 L1328.15 680.776 L1327.59 680.776 L1327.03 680.776 L1326.47 680.776 L1325.92 680.776 L1325.36 680.776 L1324.8 680.776 L1324.24 680.776 L1323.68 680.776 L1323.12 680.776 L1322.56 680.776 L1322 680.776 L1321.44 680.776 L1320.88 680.776 L1320.32 680.776 L1319.76 680.776 L1319.2 680.776 L1318.65 680.776 L1318.09 680.776 L1317.53 680.776 L1316.97 680.776 L1316.41 680.776 L1315.85 680.776 L1315.29 680.776 L1314.73 680.776 L1314.17 680.776 L1313.61 680.776 L1313.05 680.776 L1312.49 680.776 L1311.93 680.776 L1311.38 680.776 L1310.82 680.776 L1310.26 680.776 L1309.7 680.776 L1309.14 680.776 L1308.58 680.776 L1308.02 680.776 L1307.46 680.776 L1306.9 680.776 L1306.34 680.776 L1305.78 680.776 L1305.22 680.776 L1304.66 680.776 L1304.1 680.776 L1303.55 680.776 L1302.99 680.776 L1302.43 680.776 L1301.87 680.776 L1301.31 680.776 L1300.75 680.776 L1300.19 680.776 L1299.63 680.776 L1299.07 680.776 L1298.51 680.776 L1297.95 680.776 L1297.39 680.776 L1296.83 680.776 L1296.28 680.776 L1295.72 680.776 L1295.16 680.776 L1294.6 680.776 L1294.04 680.776 L1293.48 680.776 L1292.92 680.776 L1292.36 680.776 L1291.8 680.776 L1291.24 680.776 L1290.68 680.776 L1290.12 680.776 L1289.56 680.776 L1289 680.776 L1288.45 680.776 L1287.89 680.776 L1287.33 680.776 L1286.77 680.776 L1286.21 680.776 L1285.65 680.776 L1285.09 680.776 L1284.53 680.776 L1283.97 680.776 L1283.41 680.776 L1282.85 680.776 L1282.29 680.776 L1281.73 680.776 L1281.18 680.776 L1280.62 680.776 L1280.06 680.776 L1279.5 680.776 L1278.94 680.776 L1278.38 680.776 L1277.82 680.776 L1277.26 680.776 L1276.7 680.776 L1276.14 680.776 L1275.58 680.776 L1275.02 680.776 L1274.46 680.776 L1273.91 680.776 L1273.35 680.776 L1272.79 680.776 L1272.23 680.776 L1271.67 680.776 L1271.11 680.776 L1270.55 680.776 L1269.99 680.776 L1269.43 680.776 L1268.87 680.776 L1268.31 680.776 L1267.75 680.776 L1267.19 680.776 L1266.63 680.776 L1266.08 680.776 L1265.52 680.776 L1264.96 680.776 L1264.4 680.776 L1263.84 680.776 L1263.28 680.776 L1262.72 680.776 L1262.16 680.776 L1261.6 680.776 L1261.04 680.776 L1260.48 680.776 L1259.92 680.776 L1259.36 680.776 L1258.81 680.776 L1258.25 680.776 L1257.69 680.776 L1257.13 680.776 L1256.57 680.776 L1256.01 680.776 L1255.45 680.776 L1254.89 680.776 L1254.33 680.776 L1253.77 680.776 L1253.21 680.776 L1252.65 680.776 L1252.09 680.776 L1251.54 680.776 L1250.98 680.776 L1250.42 680.776 L1249.86 680.776 L1249.3 680.776 L1248.74 680.776 L1248.18 680.776 L1247.62 680.776 L1247.06 680.776 L1246.5 680.776 L1245.94 680.776 L1245.38 680.776 L1244.82 680.776 L1244.26 680.776 L1243.71 680.776 L1243.15 680.776 L1242.59 680.776 L1242.03 680.776 L1241.47 680.776 L1240.91 680.776 L1240.35 680.776 L1239.79 680.776 L1239.23 680.776 L1238.67 680.776 L1238.11 680.776 L1237.55 680.776 L1236.99 680.776 L1236.44 680.776 L1235.88 680.776 L1235.32 680.776 L1234.76 680.776 L1234.2 680.776 L1233.64 680.776 L1233.08 680.776 L1232.52 680.776 L1231.96 680.776 L1231.4 680.776 L1230.84 680.776 L1230.28 680.776 L1229.72 680.776 L1229.17 680.776 L1228.61 680.776 L1228.05 680.776 L1227.49 680.776 L1226.93 680.776 L1226.37 680.776 L1225.81 680.776 L1225.25 680.776 L1224.69 680.776 L1224.13 680.776 L1223.57 680.776 L1223.01 680.776 L1222.45 680.776 L1221.89 680.776 L1221.34 680.776 L1220.78 680.776 L1220.22 680.776 L1219.66 680.776 L1219.1 680.776 L1218.54 680.776 L1217.98 680.776 L1217.42 680.776 L1216.86 680.776 L1216.3 680.776 L1215.74 680.776 L1215.18 680.776 L1214.62 680.776 L1214.07 680.776 L1213.51 680.776 L1212.95 680.776 L1212.39 680.776 L1211.83 680.776 L1211.27 680.776 L1210.71 680.776 L1210.15 680.776 L1209.59 680.776 L1209.03 680.776 L1208.47 680.776 L1207.91 680.776 L1207.35 680.776 L1206.8 680.776 L1206.24 680.776 L1205.68 680.776 L1205.12 680.776 L1204.56 680.776 L1204 680.776 L1203.44 680.776 L1202.88 680.776 L1202.32 680.776 L1201.76 680.776 L1201.2 680.776 L1200.64 680.776 L1200.08 680.776 L1199.52 680.776 L1198.97 680.776 L1198.41 680.776 L1197.85 680.776 L1197.29 680.776 L1196.73 680.776 L1196.17 680.776 L1195.61 680.776 L1195.05 680.776 L1194.49 680.776 L1193.93 680.776 L1193.37 680.776 L1192.81 680.776 L1192.25 680.776 L1191.7 680.776 L1191.14 680.776 L1190.58 680.776 L1190.02 680.776 L1189.46 680.776 L1188.9 680.776 L1188.34 680.776 L1187.78 680.776 L1187.22 680.776 L1186.66 680.776 L1186.1 680.776 L1185.54 680.776 L1184.98 680.776 L1184.43 680.776 L1183.87 680.776 L1183.31 680.776 L1182.75 680.776 L1182.19 680.776 L1181.63 680.776 L1181.07 680.776 L1180.51 680.776 L1179.95 680.776 L1179.39 680.776 L1178.83 680.776 L1178.27 680.776 L1177.71 680.776 L1177.15 680.776 L1176.6 680.776 L1176.04 680.776 L1175.48 680.776 L1174.92 680.776 L1174.36 680.776 L1173.8 680.776 L1173.24 680.776 L1172.68 680.776 L1172.12 680.776 L1171.56 680.776 L1171 680.776 L1170.44 680.776 L1169.88 680.776 L1169.33 680.776 L1168.77 680.776 L1168.21 680.776 L1167.65 680.776 L1167.09 680.776 L1166.53 680.776 L1165.97 680.776 L1165.41 680.776 L1164.85 680.776 L1164.29 680.776 L1163.73 680.776 L1163.17 680.776 L1162.61 680.776 L1162.05 680.776 L1161.5 680.776 L1160.94 680.776 L1160.38 680.776 L1159.82 680.776 L1159.26 680.776 L1158.7 680.776 L1158.14 680.776 L1157.58 680.776 L1157.02 680.776 L1156.46 680.776 L1155.9 680.776 L1155.34 680.776 L1154.78 680.776 L1154.23 680.776 L1153.67 680.776 L1153.11 680.776 L1152.55 680.776 L1151.99 680.776 L1151.43 680.776 L1150.87 680.776 L1150.31 680.776 L1149.75 680.776 L1149.19 680.776 L1148.63 680.776 L1148.07 680.776 L1147.51 680.776 L1146.96 680.776 L1146.4 680.776 L1145.84 680.776 L1145.28 680.776 L1144.72 680.776 L1144.16 680.776 L1143.6 680.776 L1143.04 680.776 L1142.48 680.776 L1141.92 680.776 L1141.36 680.776 L1140.8 680.776 L1140.24 680.776 L1139.68 680.776 L1139.13 680.776 L1138.57 680.776 L1138.01 680.776 L1137.45 680.776 L1136.89 680.776 L1136.33 680.776 L1135.77 680.776 L1135.21 680.776 L1134.65 680.776 L1134.09 680.776 L1133.53 680.776 L1132.97 680.776 L1132.41 680.776 L1131.86 680.776 L1131.3 680.776 L1130.74 680.776 L1130.18 680.776 L1129.62 680.776 L1129.06 680.776 L1128.5 680.776 L1127.94 680.776 L1127.38 680.776 L1126.82 680.776 L1126.26 680.776 L1125.7 680.776 L1125.14 680.776 L1124.59 680.776 L1124.03 680.776 L1123.47 680.776 L1122.91 680.776 L1122.35 680.776 L1121.79 680.776 L1121.23 680.776 L1120.67 680.776 L1120.11 680.776 L1119.55 680.776 L1118.99 680.776 L1118.43 680.776 L1117.87 680.776 L1117.31 680.776 L1116.76 680.776 L1116.2 680.776 L1115.64 680.776 L1115.08 680.776 L1114.52 680.776 L1113.96 680.776 L1113.4 680.776 L1112.84 680.776 L1112.28 680.776 L1111.72 680.776 L1111.16 680.776 L1110.6 680.776 L1110.04 680.776 L1109.49 680.776 L1108.93 680.776 L1108.37 680.776 L1107.81 680.776 L1107.25 680.776 L1106.69 680.776 L1106.13 680.776 L1105.57 680.776 L1105.01 680.776 L1104.45 680.776 L1103.89 680.776 L1103.33 680.776 L1102.77 680.776 L1102.22 680.776 L1101.66 680.776 L1101.1 680.776 L1100.54 680.776 L1099.98 680.776 L1099.42 680.776 L1098.86 680.776 L1098.3 680.776 L1097.74 680.776 L1097.18 680.776 L1096.62 680.776 L1096.06 680.776 L1095.5 680.776 L1094.94 680.776 L1094.39 680.776 L1093.83 680.776 L1093.27 680.776 L1092.71 680.776 L1092.15 680.776 L1091.59 680.776 L1091.03 680.776 L1090.47 680.776 L1089.91 680.776 L1089.35 680.776 L1088.79 680.776 L1088.23 680.776 L1087.67 680.776 L1087.12 680.776 L1086.56 680.776 L1086 680.776 L1085.44 680.776 L1084.88 680.776 L1084.32 680.776 L1083.76 680.776 L1083.2 680.776 L1082.64 680.776 L1082.08 680.776 L1081.52 680.776 L1080.96 680.776 L1080.4 680.776 L1079.85 680.776 L1079.29 680.776 L1078.73 680.776 L1078.17 680.776 L1077.61 680.776 L1077.05 680.776 L1076.49 680.776 L1075.93 680.776 L1075.37 680.776 L1074.81 680.776 L1074.25 680.776 L1073.69 680.776 L1073.13 680.776 L1072.57 680.776 L1072.02 680.776 L1071.46 680.776 L1070.9 680.776 L1070.34 680.776 L1069.78 680.776 L1069.22 680.776 L1068.66 680.776 L1068.1 680.776 L1067.54 680.776 L1066.98 680.776 L1066.42 680.776 L1065.86 680.776 L1065.3 680.776 L1064.75 680.776 L1064.19 680.776 L1063.63 680.776 L1063.07 680.776 L1062.51 680.776 L1061.95 680.776 L1061.39 680.776 L1060.83 680.776 L1060.27 680.776 L1059.71 680.776 L1059.15 680.776 L1058.59 680.776 L1058.03 680.776 L1057.48 680.776 L1056.92 680.776 L1056.36 680.776 L1055.8 680.776 L1055.24 680.776 L1054.68 680.776 L1054.12 680.776 L1053.56 680.776 L1053 680.776 L1052.44 680.776 L1051.88 680.776 L1051.32 680.776 L1050.76 680.776 L1050.2 680.776 L1049.65 680.776 L1049.09 680.776 L1048.53 680.776 L1047.97 680.776 L1047.41 680.776 L1046.85 680.776 L1046.29 680.776 L1045.73 680.776 L1045.17 680.776 L1044.61 680.776 L1044.05 680.776 L1043.49 680.776 L1042.93 680.776 L1042.38 680.776 L1041.82 680.776 L1041.26 680.776 L1040.7 680.776 L1040.14 680.776 L1039.58 680.776 L1039.02 680.776 L1038.46 680.776 L1037.9 680.776 L1037.34 680.776 L1036.78 680.776 L1036.22 680.776 L1035.66 680.776 L1035.1 680.776 L1034.55 680.776 L1033.99 680.776 L1033.43 680.776 L1032.87 680.776 L1032.31 680.776 L1031.75 680.776 L1031.19 680.776 L1030.63 680.776 L1030.07 680.776 L1029.51 680.776 L1028.95 680.776 L1028.39 680.776 L1027.83 680.776 L1027.28 680.776 L1026.72 680.776 L1026.16 680.776 L1025.6 680.776 L1025.04 680.776 L1024.48 680.776 L1023.92 680.776 L1023.36 680.776 L1022.8 680.776 L1022.24 680.776 L1021.68 680.776 L1021.12 680.776 L1020.56 680.776 L1020.01 680.776 L1019.45 680.776 L1018.89 680.776 L1018.33 680.776 L1017.77 680.776 L1017.21 680.776 L1016.65 680.776 L1016.09 680.776 L1015.53 680.776 L1014.97 680.776 L1014.41 680.776 L1013.85 680.776 L1013.29 680.776 L1012.73 680.776 L1012.18 680.776 L1011.62 680.776 L1011.06 680.776 L1010.5 680.776 L1009.94 680.776 L1009.38 680.776 L1008.82 680.776 L1008.26 680.776 L1007.7 680.776 L1007.14 680.776 L1006.58 680.776 L1006.02 680.776 L1005.46 680.776 L1004.91 680.776 L1004.35 680.776 L1003.79 680.776 L1003.23 680.776 L1002.67 680.776 L1002.11 680.776 L1001.55 680.776 L1000.99 680.776 L1000.43 680.776 L999.872 680.776 L999.313 680.776 L998.754 680.776 L998.194 680.776 L997.635 680.776 L997.076 680.776 L996.517 680.776 L995.957 680.776 L995.398 680.776 L994.839 680.776 L994.28 680.776 L993.72 680.776 L993.161 680.776 L992.602 680.776 L992.043 680.776 L991.483 680.776 L990.924 680.776 L990.365 680.776 L989.806 680.776 L989.246 680.776 L988.687 680.776 L988.128 680.776 L987.569 680.776 L987.009 680.776 L986.45 680.776 L985.891 680.776 L985.332 680.776 L984.772 680.776 L984.213 680.776 L983.654 680.776 L983.095 680.776 L982.535 680.776 L981.976 680.776 L981.417 680.776 L980.858 680.776 L980.298 680.776 L979.739 680.776 L979.18 680.776 L978.621 680.776 L978.061 680.776 L977.502 680.776 L976.943 680.776 L976.384 680.776 L975.824 680.776 L975.265 680.776 L974.706 680.776 L974.147 680.776 L973.587 680.776 L973.028 680.776 L972.469 680.776 L971.91 680.776 L971.35 680.776 L970.791 680.776 L970.232 680.776 L969.673 680.776 L969.113 680.776 L968.554 680.776 L967.995 680.776 L967.436 680.776 L966.876 680.776 L966.317 680.776 L965.758 680.776 L965.199 680.776 L964.639 680.776 L964.08 680.776 L963.521 680.776 L962.962 680.776 L962.402 680.776 L961.843 680.776 L961.284 680.776 L960.725 680.776 L960.165 680.776 L959.606 680.776 L959.047 680.776 L958.488 680.776 L957.928 680.776 L957.369 680.776 L956.81 680.776 L956.251 680.776 L955.691 680.776 L955.132 680.776 L954.573 680.776 L954.014 680.776 L953.454 680.776 L952.895 680.776 L952.336 680.776 L951.777 680.776 L951.217 680.776 L950.658 680.776 L950.099 680.776 L949.54 680.776 L948.98 680.776 L948.421 680.776 L947.862 680.776 L947.303 680.776 L946.743 680.776 L946.184 680.776 L945.625 680.776 L945.066 680.776 L944.506 680.776 L943.947 680.776 L943.388 680.776 L942.829 680.776 L942.269 680.776 L941.71 680.776 L941.151 680.776 L940.592 680.776 L940.032 680.776 L939.473 680.776 L938.914 680.776 L938.355 680.776 L937.795 680.776 L937.236 680.776 L936.677 680.776 L936.118 680.776 L935.558 680.776 L934.999 680.776 L934.44 680.776 L933.881 680.776 L933.321 680.776 L932.762 680.776 L932.203 680.776 L931.644 680.776 L931.084 680.776 L930.525 680.776 L929.966 680.776 L929.406 680.776 L928.847 680.776 L928.288 680.776 L927.729 680.776 L927.169 680.776 L926.61 680.776 L926.051 680.776 L925.492 680.776 L924.932 680.776 L924.373 680.776 L923.814 680.776 L923.255 680.776 L922.695 680.776 L922.136 680.776 L921.577 680.776 L921.018 680.776 L920.458 680.776 L919.899 680.776 L919.34 680.776 L918.781 680.776 L918.221 680.776 L917.662 680.776 L917.103 680.776 L916.544 680.776 L915.984 680.776 L915.425 680.776 L914.866 680.776 L914.307 680.776 L913.747 680.776 L913.188 680.776 L912.629 680.776 L912.07 680.776 L911.51 680.776 L910.951 680.776 L910.392 680.776 L909.833 680.776 L909.273 680.776 L908.714 680.776 L908.155 680.776 L907.596 680.776 L907.036 680.776 L906.477 680.776 L905.918 680.776 L905.359 680.776 L904.799 680.776 L904.24 680.776 L903.681 680.776 L903.122 680.776 L902.562 680.776 L902.003 680.776 L901.444 680.776 L900.885 680.776 L900.325 680.776 L899.766 680.776 L899.207 680.776 L898.648 680.776 L898.088 680.776 L897.529 680.776 L896.97 680.776 L896.411 680.776 L895.851 680.776 L895.292 680.776 L894.733 680.776 L894.174 680.776 L893.614 680.776 L893.055 680.776 L892.496 680.776 L891.937 680.776 L891.377 680.776 L890.818 680.776 L890.259 680.776 L889.7 680.776 L889.14 680.776 L888.581 680.776 L888.022 680.776 L887.463 680.776 L886.903 680.776 L886.344 680.776 L885.785 680.776 L885.226 680.776 L884.666 680.776 L884.107 680.776 L883.548 680.776 L882.989 680.776 L882.429 680.776 L881.87 680.776 L881.311 680.776 L880.752 680.776 L880.192 680.776 L879.633 680.776 L879.074 680.776 L878.515 680.776 L877.955 680.776 L877.396 680.776 L876.837 680.776 L876.278 680.776 L875.718 680.776 L875.159 680.776 L874.6 680.776 L874.041 680.776 L873.481 680.776 L872.922 680.776 L872.363 680.776 L871.804 680.776 L871.244 680.776 L870.685 680.776 L870.126 680.776 L869.567 680.776 L869.007 680.776 L868.448 680.776 L867.889 680.776 L867.33 680.776 L866.77 680.776 L866.211 680.776 L865.652 680.776 L865.093 680.776 L864.533 680.776 L863.974 680.776 L863.415 680.776 L862.856 680.776 L862.296 680.776 L861.737 680.776 L861.178 680.776 L860.619 680.776 L860.059 680.776 L859.5 680.776 L858.941 680.776 L858.382 680.776 L857.822 680.776 L857.263 680.776 L856.704 680.776 L856.145 680.776 L855.585 680.776 L855.026 680.776 L854.467 680.776 L853.908 680.776 L853.348 680.776 L852.789 680.776 L852.23 680.776 L851.671 680.776 L851.111 680.776 L850.552 680.776 L849.993 680.776 L849.434 680.776 L848.874 680.776 L848.315 680.776 L847.756 680.776 L847.197 680.776 L846.637 680.776 L846.078 680.776 L845.519 680.776 L844.96 680.776 L844.4 680.776 L843.841 680.776 L843.282 680.776 L842.723 680.776 L842.163 680.776 L841.604 680.776 L841.045 680.776 L840.486 680.776 L839.926 680.776 L839.367 680.776 L838.808 680.776 L838.249 680.776 L837.689 680.776 L837.13 680.776 L836.571 680.776 L836.012 680.776 L835.452 680.776 L834.893 680.776 L834.334 680.776 L833.775 680.776 L833.215 680.776 L832.656 680.776 L832.097 680.776 L831.538 680.776 L830.978 680.776 L830.419 680.776 L829.86 680.776 L829.301 680.776 L828.741 680.776 L828.182 680.776 L827.623 680.776 L827.064 680.776 L826.504 680.776 L825.945 680.776 L825.386 680.776 L824.827 680.776 L824.267 680.776 L823.708 680.776 L823.149 680.776 L822.59 680.776 L822.03 680.776 L821.471 680.776 L820.912 680.776 L820.353 680.776 L819.793 680.776 L819.234 680.776 L818.675 680.776 L818.116 680.776 L817.556 680.776 L816.997 680.776 L816.438 680.776 L815.879 680.776 L815.319 680.776 L814.76 680.776 L814.201 680.776 L813.642 680.776 L813.082 680.776 L812.523 680.776 L811.964 680.776 L811.405 680.776 L810.845 680.776 L810.286 680.776 L809.727 680.776 L809.168 680.776 L808.608 680.776 L808.049 680.776 L807.49 680.776 L806.931 680.776 L806.371 680.776 L805.812 680.776 L805.253 680.776 L804.693 680.776 L804.134 680.776 L803.575 680.776 L803.016 680.776 L802.456 680.776 L801.897 680.776 L801.338 680.776 L800.779 680.776 L800.219 680.776 L799.66 680.776 L799.101 680.776 L798.542 680.776 L797.982 680.776 L797.423 680.776 L796.864 680.776 L796.305 680.776 L795.745 680.776 L795.186 680.776 L794.627 680.776 L794.068 680.776 L793.508 680.776 L792.949 680.776 L792.39 680.776 L791.831 680.776 L791.271 680.776 L790.712 680.776 L790.153 680.776 L789.594 680.776 L789.034 680.776 L788.475 680.776 L787.916 680.776 L787.357 680.776 L786.797 680.776 L786.238 680.776 L785.679 680.776 L785.12 680.776 L784.56 680.776 L784.001 680.776 L783.442 680.776 L782.883 680.776 L782.323 680.776 L781.764 680.776 L781.205 680.776 L780.646 680.776 L780.086 680.776 L779.527 680.776 L778.968 680.776 L778.409 680.776 L777.849 680.776 L777.29 680.776 L776.731 680.776 L776.172 680.776 L775.612 680.776 L775.053 680.776 L774.494 680.776 L773.935 680.776 L773.375 680.776 L772.816 680.776 L772.257 680.776 L771.698 680.776 L771.138 680.776 L770.579 680.776 L770.02 680.776 L769.461 680.776 L768.901 680.776 L768.342 680.776 L767.783 680.776 L767.224 680.776 L766.664 680.776 L766.105 680.776 L765.546 680.776 L764.987 680.776 L764.427 680.776 L763.868 680.776 L763.309 680.776 L762.75 680.776 L762.19 680.776 L761.631 680.776 L761.072 680.776 L760.513 680.776 L759.953 680.776 L759.394 680.776 L758.835 680.776 L758.276 680.776 L757.716 680.776 L757.157 680.776 L756.598 680.776 L756.039 680.776 L755.479 680.776 L754.92 680.776 L754.361 680.776 L753.802 680.776 L753.242 680.776 L752.683 680.776 L752.124 680.776 L751.565 680.776 L751.005 680.776 L750.446 680.776 L749.887 680.776 L749.328 680.776 L748.768 680.776 L748.209 680.776 L747.65 680.776 L747.091 680.776 L746.531 680.776 L745.972 680.776 L745.413 680.776 L744.854 680.776 L744.294 680.776 L743.735 680.776 L743.176 680.776 L742.617 680.776 L742.057 680.776 L741.498 680.776 L740.939 680.776 L740.38 680.776 L739.82 680.776 L739.261 680.776 L738.702 680.776 L738.143 680.776 L737.583 680.776 L737.024 680.776 L736.465 680.776 L735.906 680.776 L735.346 680.776 L734.787 680.776 L734.228 680.776 L733.669 680.776 L733.109 680.776 L732.55 680.776 L731.991 680.776 L731.432 680.776 L730.872 680.776 L730.313 680.776 L729.754 680.776 L729.195 680.776 L728.635 680.776 L728.076 680.776 L727.517 680.776 L726.958 680.776 L726.398 680.776 L725.839 680.776 L725.28 680.776 L724.721 680.776 L724.161 680.776 L723.602 680.776 L723.043 680.776 L722.484 680.776 L721.924 680.776 L721.365 680.776 L720.806 680.776 L720.247 680.776  Z\" fill=\"#e26f46\" fill-rule=\"evenodd\" fill-opacity=\"0.5\"/>\n<polyline clip-path=\"url(#clip023)\" style=\"stroke:#e26f46; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"720.247,685.47 720.806,685.47 721.365,685.47 721.924,685.47 722.484,685.47 723.043,685.47 723.602,685.47 724.161,685.47 724.721,685.47 725.28,685.47 725.839,685.47 726.398,685.47 726.958,685.47 727.517,685.47 728.076,685.47 728.635,685.47 729.195,685.47 729.754,685.47 730.313,685.47 730.872,685.47 731.432,685.47 731.991,685.47 732.55,685.47 733.109,685.47 733.669,685.47 734.228,685.47 734.787,685.47 735.346,685.47 735.906,685.47 736.465,685.47 737.024,685.47 737.583,685.47 738.143,685.47 738.702,685.47 739.261,685.47 739.82,685.47 740.38,685.47 740.939,685.47 741.498,685.47 742.057,685.47 742.617,685.47 743.176,685.47 743.735,685.47 744.294,685.47 744.854,685.47 745.413,685.47 745.972,685.47 746.531,685.47 747.091,685.47 747.65,685.47 748.209,685.47 748.768,685.47 749.328,685.47 749.887,685.47 750.446,685.47 751.005,685.47 751.565,685.47 752.124,685.47 752.683,685.47 753.242,685.47 753.802,685.47 754.361,685.47 754.92,685.47 755.479,685.47 756.039,685.47 756.598,685.47 757.157,685.47 757.716,685.47 758.276,685.47 758.835,685.47 759.394,685.47 759.953,685.47 760.513,685.47 761.072,685.47 761.631,685.47 762.19,685.47 762.75,685.47 763.309,685.47 763.868,685.47 764.427,685.47 764.987,685.47 765.546,685.47 766.105,685.47 766.664,685.47 767.224,685.47 767.783,685.47 768.342,685.47 768.901,685.47 769.461,685.47 770.02,685.47 770.579,685.47 771.138,685.47 771.698,685.47 772.257,685.47 772.816,685.47 773.375,685.47 773.935,685.47 774.494,685.47 775.053,685.47 775.612,685.47 776.172,685.47 776.731,685.47 777.29,685.47 777.849,685.47 778.409,685.47 778.968,685.47 779.527,685.47 780.086,685.47 780.646,685.47 781.205,685.47 781.764,685.47 782.323,685.47 782.883,685.47 783.442,685.47 784.001,685.47 784.56,685.47 785.12,685.47 785.679,685.47 786.238,685.47 786.797,685.47 787.357,685.47 787.916,685.47 788.475,685.47 789.034,685.47 789.594,685.47 790.153,685.47 790.712,685.47 791.271,685.47 791.831,685.47 792.39,685.47 792.949,685.47 793.508,685.47 794.068,685.47 794.627,685.47 795.186,685.47 795.745,685.47 796.305,685.47 796.864,685.47 797.423,685.47 797.982,685.47 798.542,685.47 799.101,685.47 799.66,685.47 800.219,685.47 800.779,685.47 801.338,685.47 801.897,685.47 802.456,685.47 803.016,685.47 803.575,685.47 804.134,685.47 804.693,685.47 805.253,685.47 805.812,685.47 806.371,685.47 806.931,685.47 807.49,685.47 808.049,685.47 808.608,685.47 809.168,685.47 809.727,685.47 810.286,685.47 810.845,685.47 811.405,685.47 811.964,685.47 812.523,685.47 813.082,685.47 813.642,685.47 814.201,685.47 814.76,685.47 815.319,685.47 815.879,685.47 816.438,685.47 816.997,685.47 817.556,685.47 818.116,685.47 818.675,685.47 819.234,685.47 819.793,685.47 820.353,685.47 820.912,685.47 821.471,685.47 822.03,685.47 822.59,685.47 823.149,685.47 823.708,685.47 824.267,685.47 824.827,685.47 825.386,685.47 825.945,685.47 826.504,685.47 827.064,685.47 827.623,685.47 828.182,685.47 828.741,685.47 829.301,685.47 829.86,685.47 830.419,685.47 830.978,685.47 831.538,685.47 832.097,685.47 832.656,685.47 833.215,685.47 833.775,685.47 834.334,685.47 834.893,685.47 835.452,685.47 836.012,685.47 836.571,685.47 837.13,685.47 837.689,685.47 838.249,685.47 838.808,685.47 839.367,685.47 839.926,685.47 840.486,685.47 841.045,685.47 841.604,685.47 842.163,685.47 842.723,685.47 843.282,685.47 843.841,685.47 844.4,685.47 844.96,685.47 845.519,685.47 846.078,685.47 846.637,685.47 847.197,685.47 847.756,685.47 848.315,685.47 848.874,685.47 849.434,685.47 849.993,685.47 850.552,685.47 851.111,685.47 851.671,685.47 852.23,685.47 852.789,685.47 853.348,685.47 853.908,685.47 854.467,685.47 855.026,685.47 855.585,685.47 856.145,685.47 856.704,685.47 857.263,685.47 857.822,685.47 858.382,685.47 858.941,685.47 859.5,685.47 860.059,685.47 860.619,685.47 861.178,685.47 861.737,685.47 862.296,685.47 862.856,685.47 863.415,685.47 863.974,685.47 864.533,685.47 865.093,685.47 865.652,685.47 866.211,685.47 866.77,685.47 867.33,685.47 867.889,685.47 868.448,685.47 869.007,685.47 869.567,685.47 870.126,685.47 870.685,685.47 871.244,685.47 871.804,685.47 872.363,685.47 872.922,685.47 873.481,685.47 874.041,685.47 874.6,685.47 875.159,685.47 875.718,685.47 876.278,685.47 876.837,685.47 877.396,685.47 877.955,685.47 878.515,685.47 879.074,685.47 879.633,685.47 880.192,685.47 880.752,685.47 881.311,685.47 881.87,685.47 882.429,685.47 882.989,685.47 883.548,685.47 884.107,685.47 884.666,685.47 885.226,685.47 885.785,685.47 886.344,685.47 886.903,685.47 887.463,685.47 888.022,685.47 888.581,685.47 889.14,685.47 889.7,685.47 890.259,685.47 890.818,685.47 891.377,685.47 891.937,685.47 892.496,685.47 893.055,685.47 893.614,685.47 894.174,685.47 894.733,685.47 895.292,685.47 895.851,685.47 896.411,685.47 896.97,685.47 897.529,685.47 898.088,685.47 898.648,685.47 899.207,685.47 899.766,685.47 900.325,685.47 900.885,685.47 901.444,685.47 902.003,685.47 902.562,685.47 903.122,685.47 903.681,685.47 904.24,685.47 904.799,685.47 905.359,685.47 905.918,685.47 906.477,685.47 907.036,685.47 907.596,685.47 908.155,685.47 908.714,685.47 909.273,685.47 909.833,685.47 910.392,685.47 910.951,685.47 911.51,685.47 912.07,685.47 912.629,685.47 913.188,685.47 913.747,685.47 914.307,685.47 914.866,685.47 915.425,685.47 915.984,685.47 916.544,685.47 917.103,685.47 917.662,685.47 918.221,685.47 918.781,685.47 919.34,685.47 919.899,685.47 920.458,685.47 921.018,685.47 921.577,685.47 922.136,685.47 922.695,685.47 923.255,685.47 923.814,685.47 924.373,685.47 924.932,685.47 925.492,685.47 926.051,685.47 926.61,685.47 927.169,685.47 927.729,685.47 928.288,685.47 928.847,685.47 929.406,685.47 929.966,685.47 930.525,685.47 931.084,685.47 931.644,685.47 932.203,685.47 932.762,685.47 933.321,685.47 933.881,685.47 934.44,685.47 934.999,685.47 935.558,685.47 936.118,685.47 936.677,685.47 937.236,685.47 937.795,685.47 938.355,685.47 938.914,685.47 939.473,685.47 940.032,685.47 940.592,685.47 941.151,685.47 941.71,685.47 942.269,685.47 942.829,685.47 943.388,685.47 943.947,685.47 944.506,685.47 945.066,685.47 945.625,685.47 946.184,685.47 946.743,685.47 947.303,685.47 947.862,685.47 948.421,685.47 948.98,685.47 949.54,685.47 950.099,685.47 950.658,685.47 951.217,685.47 951.777,685.47 952.336,685.47 952.895,685.47 953.454,685.47 954.014,685.47 954.573,685.47 955.132,685.47 955.691,685.47 956.251,685.47 956.81,685.47 957.369,685.47 957.928,685.47 958.488,685.47 959.047,685.47 959.606,685.47 960.165,685.47 960.725,685.47 961.284,685.47 961.843,685.47 962.402,685.47 962.962,685.47 963.521,685.47 964.08,685.47 964.639,685.47 965.199,685.47 965.758,685.47 966.317,685.47 966.876,685.47 967.436,685.47 967.995,685.47 968.554,685.47 969.113,685.47 969.673,685.47 970.232,685.47 970.791,685.47 971.35,685.47 971.91,685.47 972.469,685.47 973.028,685.47 973.587,685.47 974.147,685.47 974.706,685.47 975.265,685.47 975.824,685.47 976.384,685.47 976.943,685.47 977.502,685.47 978.061,685.47 978.621,685.47 979.18,685.47 979.739,685.47 980.298,685.47 980.858,685.47 981.417,685.47 981.976,685.47 982.535,685.47 983.095,685.47 983.654,685.47 984.213,685.47 984.772,685.47 985.332,685.47 985.891,685.47 986.45,685.47 987.009,685.47 987.569,685.47 988.128,685.47 988.687,685.47 989.246,685.47 989.806,685.47 990.365,685.47 990.924,685.47 991.483,685.47 992.043,685.47 992.602,685.47 993.161,685.47 993.72,685.47 994.28,685.47 994.839,685.47 995.398,685.47 995.957,685.47 996.517,685.47 997.076,685.47 997.635,685.47 998.194,685.47 998.754,685.47 999.313,685.47 999.872,685.47 1000.43,685.47 1000.99,685.47 1001.55,685.47 1002.11,685.47 1002.67,685.47 1003.23,685.47 1003.79,685.47 1004.35,685.47 1004.91,685.47 1005.46,685.47 1006.02,685.47 1006.58,685.47 1007.14,685.47 1007.7,685.47 1008.26,685.47 1008.82,685.47 1009.38,685.47 1009.94,685.47 1010.5,685.47 1011.06,685.47 1011.62,685.47 1012.18,685.47 1012.73,685.47 1013.29,685.47 1013.85,685.47 1014.41,685.47 1014.97,685.47 1015.53,685.47 1016.09,685.47 1016.65,685.47 1017.21,685.47 1017.77,685.47 1018.33,685.47 1018.89,685.47 1019.45,685.47 1020.01,685.47 1020.56,685.47 1021.12,685.47 1021.68,685.47 1022.24,685.47 1022.8,685.47 1023.36,685.47 1023.92,685.47 1024.48,685.47 1025.04,685.47 1025.6,685.47 1026.16,685.47 1026.72,685.47 1027.28,685.47 1027.83,685.47 1028.39,685.47 1028.95,685.47 1029.51,685.47 1030.07,685.47 1030.63,685.47 1031.19,685.47 1031.75,685.47 1032.31,685.47 1032.87,685.47 1033.43,685.47 1033.99,685.47 1034.55,685.47 1035.1,685.47 1035.66,685.47 1036.22,685.47 1036.78,685.47 1037.34,685.47 1037.9,685.47 1038.46,685.47 1039.02,685.47 1039.58,685.47 1040.14,685.47 1040.7,685.47 1041.26,685.47 1041.82,685.47 1042.38,685.47 1042.93,685.47 1043.49,685.47 1044.05,685.47 1044.61,685.47 1045.17,685.47 1045.73,685.47 1046.29,685.47 1046.85,685.47 1047.41,685.47 1047.97,685.47 1048.53,685.47 1049.09,685.47 1049.65,685.47 1050.2,685.47 1050.76,685.47 1051.32,685.47 1051.88,685.47 1052.44,685.47 1053,685.47 1053.56,685.47 1054.12,685.47 1054.68,685.47 1055.24,685.47 1055.8,685.47 1056.36,685.47 1056.92,685.47 1057.48,685.47 1058.03,685.47 1058.59,685.47 1059.15,685.47 1059.71,685.47 1060.27,685.47 1060.83,685.47 1061.39,685.47 1061.95,685.47 1062.51,685.47 1063.07,685.47 1063.63,685.47 1064.19,685.47 1064.75,685.47 1065.3,685.47 1065.86,685.47 1066.42,685.47 1066.98,685.47 1067.54,685.47 1068.1,685.47 1068.66,685.47 1069.22,685.47 1069.78,685.47 1070.34,685.47 1070.9,685.47 1071.46,685.47 1072.02,685.47 1072.57,685.47 1073.13,685.47 1073.69,685.47 1074.25,685.47 1074.81,685.47 1075.37,685.47 1075.93,685.47 1076.49,685.47 1077.05,685.47 1077.61,685.47 1078.17,685.47 1078.73,685.47 1079.29,685.47 1079.85,685.47 1080.4,685.47 1080.96,685.47 1081.52,685.47 1082.08,685.47 1082.64,685.47 1083.2,685.47 1083.76,685.47 1084.32,685.47 1084.88,685.47 1085.44,685.47 1086,685.47 1086.56,685.47 1087.12,685.47 1087.67,685.47 1088.23,685.47 1088.79,685.47 1089.35,685.47 1089.91,685.47 1090.47,685.47 1091.03,685.47 1091.59,685.47 1092.15,685.47 1092.71,685.47 1093.27,685.47 1093.83,685.47 1094.39,685.47 1094.94,685.47 1095.5,685.47 1096.06,685.47 1096.62,685.47 1097.18,685.47 1097.74,685.47 1098.3,685.47 1098.86,685.47 1099.42,685.47 1099.98,685.47 1100.54,685.47 1101.1,685.47 1101.66,685.47 1102.22,685.47 1102.77,685.47 1103.33,685.47 1103.89,685.47 1104.45,685.47 1105.01,685.47 1105.57,685.47 1106.13,685.47 1106.69,685.47 1107.25,685.47 1107.81,685.47 1108.37,685.47 1108.93,685.47 1109.49,685.47 1110.04,685.47 1110.6,685.47 1111.16,685.47 1111.72,685.47 1112.28,685.47 1112.84,685.47 1113.4,685.47 1113.96,685.47 1114.52,685.47 1115.08,685.47 1115.64,685.47 1116.2,685.47 1116.76,685.47 1117.31,685.47 1117.87,685.47 1118.43,685.47 1118.99,685.47 1119.55,685.47 1120.11,685.47 1120.67,685.47 1121.23,685.47 1121.79,685.47 1122.35,685.47 1122.91,685.47 1123.47,685.47 1124.03,685.47 1124.59,685.47 1125.14,685.47 1125.7,685.47 1126.26,685.47 1126.82,685.47 1127.38,685.47 1127.94,685.47 1128.5,685.47 1129.06,685.47 1129.62,685.47 1130.18,685.47 1130.74,685.47 1131.3,685.47 1131.86,685.47 1132.41,685.47 1132.97,685.47 1133.53,685.47 1134.09,685.47 1134.65,685.47 1135.21,685.47 1135.77,685.47 1136.33,685.47 1136.89,685.47 1137.45,685.47 1138.01,685.47 1138.57,685.47 1139.13,685.47 1139.68,685.47 1140.24,685.47 1140.8,685.47 1141.36,685.47 1141.92,685.47 1142.48,685.47 1143.04,685.47 1143.6,685.47 1144.16,685.47 1144.72,685.47 1145.28,685.47 1145.84,685.47 1146.4,685.47 1146.96,685.47 1147.51,685.47 1148.07,685.47 1148.63,685.47 1149.19,685.47 1149.75,685.47 1150.31,685.47 1150.87,685.47 1151.43,685.47 1151.99,685.47 1152.55,685.47 1153.11,685.47 1153.67,685.47 1154.23,685.47 1154.78,685.47 1155.34,685.47 1155.9,685.47 1156.46,685.47 1157.02,685.47 1157.58,685.47 1158.14,685.47 1158.7,685.47 1159.26,685.47 1159.82,685.47 1160.38,685.47 1160.94,685.47 1161.5,685.47 1162.05,685.47 1162.61,685.47 1163.17,685.47 1163.73,685.47 1164.29,685.47 1164.85,685.47 1165.41,685.47 1165.97,685.47 1166.53,685.47 1167.09,685.47 1167.65,685.47 1168.21,685.47 1168.77,685.47 1169.33,685.47 1169.88,685.47 1170.44,685.47 1171,685.47 1171.56,685.47 1172.12,685.47 1172.68,685.47 1173.24,685.47 1173.8,685.47 1174.36,685.47 1174.92,685.47 1175.48,685.47 1176.04,685.47 1176.6,685.47 1177.15,685.47 1177.71,685.47 1178.27,685.47 1178.83,685.47 1179.39,685.47 1179.95,685.47 1180.51,685.47 1181.07,685.47 1181.63,685.47 1182.19,685.47 1182.75,685.47 1183.31,685.47 1183.87,685.47 1184.43,685.47 1184.98,685.47 1185.54,685.47 1186.1,685.47 1186.66,685.47 1187.22,685.47 1187.78,685.47 1188.34,685.47 1188.9,685.47 1189.46,685.47 1190.02,685.47 1190.58,685.47 1191.14,685.47 1191.7,685.47 1192.25,685.47 1192.81,685.47 1193.37,685.47 1193.93,685.47 1194.49,685.47 1195.05,685.47 1195.61,685.47 1196.17,685.47 1196.73,685.47 1197.29,685.47 1197.85,685.47 1198.41,685.47 1198.97,685.47 1199.52,685.47 1200.08,685.47 1200.64,685.47 1201.2,685.47 1201.76,685.47 1202.32,685.47 1202.88,685.47 1203.44,685.47 1204,685.47 1204.56,685.47 1205.12,685.47 1205.68,685.47 1206.24,685.47 1206.8,685.47 1207.35,685.47 1207.91,685.47 1208.47,685.47 1209.03,685.47 1209.59,685.47 1210.15,685.47 1210.71,685.47 1211.27,685.47 1211.83,685.47 1212.39,685.47 1212.95,685.47 1213.51,685.47 1214.07,685.47 1214.62,685.47 1215.18,685.47 1215.74,685.47 1216.3,685.47 1216.86,685.47 1217.42,685.47 1217.98,685.47 1218.54,685.47 1219.1,685.47 1219.66,685.47 1220.22,685.47 1220.78,685.47 1221.34,685.47 1221.89,685.47 1222.45,685.47 1223.01,685.47 1223.57,685.47 1224.13,685.47 1224.69,685.47 1225.25,685.47 1225.81,685.47 1226.37,685.47 1226.93,685.47 1227.49,685.47 1228.05,685.47 1228.61,685.47 1229.17,685.47 1229.72,685.47 1230.28,685.47 1230.84,685.47 1231.4,685.47 1231.96,685.47 1232.52,685.47 1233.08,685.47 1233.64,685.47 1234.2,685.47 1234.76,685.47 1235.32,685.47 1235.88,685.47 1236.44,685.47 1236.99,685.47 1237.55,685.47 1238.11,685.47 1238.67,685.47 1239.23,685.47 1239.79,685.47 1240.35,685.47 1240.91,685.47 1241.47,685.47 1242.03,685.47 1242.59,685.47 1243.15,685.47 1243.71,685.47 1244.26,685.47 1244.82,685.47 1245.38,685.47 1245.94,685.47 1246.5,685.47 1247.06,685.47 1247.62,685.47 1248.18,685.47 1248.74,685.47 1249.3,685.47 1249.86,685.47 1250.42,685.47 1250.98,685.47 1251.54,685.47 1252.09,685.47 1252.65,685.47 1253.21,685.47 1253.77,685.47 1254.33,685.47 1254.89,685.47 1255.45,685.47 1256.01,685.47 1256.57,685.47 1257.13,685.47 1257.69,685.47 1258.25,685.47 1258.81,685.47 1259.36,685.47 1259.92,685.47 1260.48,685.47 1261.04,685.47 1261.6,685.47 1262.16,685.47 1262.72,685.47 1263.28,685.47 1263.84,685.47 1264.4,685.47 1264.96,685.47 1265.52,685.47 1266.08,685.47 1266.63,685.47 1267.19,685.47 1267.75,685.47 1268.31,685.47 1268.87,685.47 1269.43,685.47 1269.99,685.47 1270.55,685.47 1271.11,685.47 1271.67,685.47 1272.23,685.47 1272.79,685.47 1273.35,685.47 1273.91,685.47 1274.46,685.47 1275.02,685.47 1275.58,685.47 1276.14,685.47 1276.7,685.47 1277.26,685.47 1277.82,685.47 1278.38,685.47 1278.94,685.47 1279.5,685.47 1280.06,685.47 1280.62,685.47 1281.18,685.47 1281.73,685.47 1282.29,685.47 1282.85,685.47 1283.41,685.47 1283.97,685.47 1284.53,685.47 1285.09,685.47 1285.65,685.47 1286.21,685.47 1286.77,685.47 1287.33,685.47 1287.89,685.47 1288.45,685.47 1289,685.47 1289.56,685.47 1290.12,685.47 1290.68,685.47 1291.24,685.47 1291.8,685.47 1292.36,685.47 1292.92,685.47 1293.48,685.47 1294.04,685.47 1294.6,685.47 1295.16,685.47 1295.72,685.47 1296.28,685.47 1296.83,685.47 1297.39,685.47 1297.95,685.47 1298.51,685.47 1299.07,685.47 1299.63,685.47 1300.19,685.47 1300.75,685.47 1301.31,685.47 1301.87,685.47 1302.43,685.47 1302.99,685.47 1303.55,685.47 1304.1,685.47 1304.66,685.47 1305.22,685.47 1305.78,685.47 1306.34,685.47 1306.9,685.47 1307.46,685.47 1308.02,685.47 1308.58,685.47 1309.14,685.47 1309.7,685.47 1310.26,685.47 1310.82,685.47 1311.38,685.47 1311.93,685.47 1312.49,685.47 1313.05,685.47 1313.61,685.47 1314.17,685.47 1314.73,685.47 1315.29,685.47 1315.85,685.47 1316.41,685.47 1316.97,685.47 1317.53,685.47 1318.09,685.47 1318.65,685.47 1319.2,685.47 1319.76,685.47 1320.32,685.47 1320.88,685.47 1321.44,685.47 1322,685.47 1322.56,685.47 1323.12,685.47 1323.68,685.47 1324.24,685.47 1324.8,685.47 1325.36,685.47 1325.92,685.47 1326.47,685.47 1327.03,685.47 1327.59,685.47 1328.15,685.47 1328.71,685.47 1329.27,685.47 1329.83,685.47 1330.39,685.47 1330.95,685.47 1331.51,685.47 1332.07,685.47 1332.63,685.47 1333.19,685.47 1333.75,685.47 1334.3,685.47 1334.86,685.47 1335.42,685.47 1335.98,685.47 1336.54,685.47 1337.1,685.47 1337.66,685.47 1338.22,685.47 1338.78,685.47 1339.34,685.47 1339.9,685.47 1340.46,685.47 1341.02,685.47 1341.57,685.47 1342.13,685.47 1342.69,685.47 1343.25,685.47 1343.81,685.47 1344.37,685.47 1344.93,685.47 1345.49,685.47 1346.05,685.47 1346.61,685.47 1347.17,685.47 1347.73,685.47 1348.29,685.47 1348.84,685.47 1349.4,685.47 1349.96,685.47 1350.52,685.47 1351.08,685.47 1351.64,685.47 1352.2,685.47 1352.76,685.47 1353.32,685.47 1353.88,685.47 1354.44,685.47 1355,685.47 1355.56,685.47 1356.12,685.47 1356.67,685.47 1357.23,685.47 1357.79,685.47 1358.35,685.47 1358.91,685.47 1359.47,685.47 1360.03,685.47 1360.59,685.47 1361.15,685.47 1361.71,685.47 1362.27,685.47 1362.83,685.47 1363.39,685.47 1363.94,685.47 1364.5,685.47 1365.06,685.47 1365.62,685.47 1366.18,685.47 1366.74,685.47 1367.3,685.47 1367.86,685.47 1368.42,685.47 1368.98,685.47 1369.54,685.47 1370.1,685.47 1370.66,685.47 1371.21,685.47 1371.77,685.47 1372.33,685.47 1372.89,685.47 1373.45,685.47 1374.01,685.47 1374.57,685.47 1375.13,685.47 1375.69,685.47 1376.25,685.47 1376.81,685.47 1377.37,685.47 1377.93,685.47 1378.49,685.47 1379.04,685.47 1379.6,685.47 1380.16,685.47 1380.72,685.47 1381.28,685.47 1381.84,685.47 1382.4,685.47 1382.96,685.47 1383.52,685.47 1384.08,685.47 1384.64,685.47 1385.2,685.47 1385.76,685.47 1386.31,685.47 1386.87,685.47 1387.43,685.47 1387.99,685.47 1388.55,685.47 1389.11,685.47 1389.67,685.47 1390.23,685.47 1390.79,685.47 1391.35,685.47 1391.91,685.47 1392.47,685.47 1393.03,685.47 1393.58,685.47 1394.14,685.47 1394.7,685.47 1395.26,685.47 1395.82,685.47 1396.38,685.47 1396.94,685.47 1397.5,685.47 1398.06,685.47 1398.62,685.47 1399.18,685.47 1399.74,685.47 1400.3,685.47 1400.86,685.47 1401.41,685.47 1401.97,685.47 1402.53,685.47 1403.09,685.47 1403.65,685.47 1404.21,685.47 1404.77,685.47 1405.33,685.47 1405.89,685.47 1406.45,685.47 1407.01,685.47 1407.57,685.47 1408.13,685.47 1408.68,685.47 1409.24,685.47 1409.8,685.47 1410.36,685.47 1410.92,685.47 1411.48,685.47 1412.04,685.47 1412.6,685.47 1413.16,685.47 1413.72,685.47 1414.28,685.47 1414.84,685.47 1415.4,685.47 1415.95,685.47 1416.51,685.47 1417.07,685.47 1417.63,685.47 1418.19,685.47 1418.75,685.47 1419.31,685.47 1419.87,685.47 1420.43,685.47 1420.99,685.47 1421.55,685.47 1422.11,685.47 1422.67,685.47 1423.23,685.47 1423.78,685.47 1424.34,685.47 1424.9,685.47 1425.46,685.47 1426.02,685.47 1426.58,685.47 1427.14,685.47 1427.7,685.47 1428.26,685.47 1428.82,685.47 1429.38,685.47 1429.94,685.47 1430.5,685.47 1431.05,685.47 1431.61,685.47 1432.17,685.47 1432.73,685.47 1433.29,685.47 1433.85,685.47 1434.41,685.47 1434.97,685.47 1435.53,685.47 1436.09,685.47 1436.65,685.47 1437.21,685.47 1437.77,685.47 1438.33,685.47 1438.88,685.47 1439.44,685.47 1440,685.47 1440.56,685.47 1441.12,685.47 1441.68,685.47 1442.24,685.47 1442.8,685.47 1443.36,685.47 1443.92,685.47 1444.48,685.47 1445.04,685.47 1445.6,685.47 1446.15,685.47 1446.71,685.47 1447.27,685.47 1447.83,685.47 1448.39,685.47 1448.95,685.47 1449.51,685.47 1450.07,685.47 1450.63,685.47 1451.19,685.47 1451.75,685.47 1452.31,685.47 1452.87,685.47 1453.42,685.47 1453.98,685.47 1454.54,685.47 1455.1,685.47 1455.66,685.47 1456.22,685.47 1456.78,685.47 1457.34,685.47 1457.9,685.47 1458.46,685.47 1459.02,685.47 1459.58,685.47 1460.14,685.47 1460.7,685.47 1461.25,685.47 1461.81,685.47 1462.37,685.47 1462.93,685.47 1463.49,685.47 1464.05,685.47 1464.61,685.47 1465.17,685.47 1465.73,685.47 1466.29,685.47 1466.85,685.47 1467.41,685.47 1467.97,685.47 1468.52,685.47 1469.08,685.47 1469.64,685.47 1470.2,685.47 1470.76,685.47 1471.32,685.47 1471.88,685.47 1472.44,685.47 1473,685.47 1473.56,685.47 1474.12,685.47 1474.68,685.47 1475.24,685.47 1475.79,685.47 1476.35,685.47 1476.91,685.47 1477.47,685.47 1478.03,685.47 1478.59,685.47 1479.15,685.47 1479.71,685.47 1480.27,685.47 1480.83,685.47 1481.39,685.47 1481.95,685.47 1482.51,685.47 1483.07,685.47 1483.62,685.47 1484.18,685.47 1484.74,685.47 1485.3,685.47 1485.86,685.47 1486.42,685.47 1486.98,685.47 1487.54,685.47 1488.1,685.47 1488.66,685.47 1489.22,685.47 1489.78,685.47 1490.34,685.47 1490.89,685.47 1491.45,685.47 1492.01,685.47 1492.57,685.47 1493.13,685.47 1493.69,685.47 1494.25,685.47 1494.81,685.47 1495.37,685.47 1495.93,685.47 1496.49,685.47 1497.05,685.47 1497.61,685.47 1498.16,685.47 1498.72,685.47 1499.28,685.47 1499.84,685.47 1500.4,685.47 1500.96,685.47 1501.52,685.47 1502.08,685.47 1502.64,685.47 1503.2,685.47 1503.76,685.47 1504.32,685.47 1504.88,685.47 1505.44,685.47 1505.99,685.47 1506.55,685.47 1507.11,685.47 1507.67,685.47 1508.23,685.47 1508.79,685.47 1509.35,685.47 1509.91,685.47 1510.47,685.47 1511.03,685.47 1511.59,685.47 1512.15,685.47 1512.71,685.47 1513.26,685.47 1513.82,685.47 1514.38,685.47 1514.94,685.47 1515.5,685.47 1516.06,685.47 1516.62,685.47 1517.18,685.47 1517.74,685.47 1518.3,685.47 1518.86,685.47 1519.42,685.47 1519.98,685.47 1520.53,685.47 1521.09,685.47 1521.65,685.47 1522.21,685.47 1522.77,685.47 1523.33,685.47 1523.89,685.47 1524.45,685.47 1525.01,685.47 1525.57,685.47 1526.13,685.47 1526.69,685.47 1527.25,685.47 1527.81,685.47 1528.36,685.47 1528.92,685.47 1529.48,685.47 1530.04,685.47 1530.6,685.47 1531.16,685.47 1531.72,685.47 1532.28,685.47 1532.84,685.47 1533.4,685.47 1533.96,685.47 1534.52,685.47 1535.08,685.47 1535.63,685.47 1536.19,685.47 1536.75,685.47 1537.31,685.47 1537.87,685.47 1538.43,685.47 1538.99,685.47 1539.55,685.47 1540.11,685.47 1540.67,685.47 1541.23,685.47 1541.79,685.47 1542.35,685.47 1542.9,685.47 1543.46,685.47 1544.02,685.47 1544.58,685.47 1545.14,685.47 1545.7,685.47 1546.26,685.47 1546.82,685.47 1547.38,685.47 1547.94,685.47 1548.5,685.47 1549.06,685.47 1549.62,685.47 1550.18,685.47 1550.73,685.47 1551.29,685.47 1551.85,685.47 1552.41,685.47 1552.97,685.47 1553.53,685.47 1554.09,685.47 1554.65,685.47 1555.21,685.47 1555.77,685.47 1556.33,685.47 1556.89,685.47 1557.45,685.47 1558,685.47 1558.56,685.47 1559.12,685.47 1559.68,685.47 1560.24,685.47 1560.8,685.47 1561.36,685.47 1561.92,685.47 1562.48,685.47 1563.04,685.47 1563.6,685.47 1564.16,685.47 1564.72,685.47 1565.28,685.47 1565.83,685.47 1566.39,685.47 1566.95,685.47 1567.51,685.47 1568.07,685.47 1568.63,685.47 1569.19,685.47 1569.75,685.47 1570.31,685.47 1570.87,685.47 1571.43,685.47 1571.99,685.47 1572.55,685.47 1573.1,685.47 1573.66,685.47 1574.22,685.47 1574.78,685.47 1575.34,685.47 1575.9,685.47 1576.46,685.47 1577.02,685.47 1577.58,685.47 1578.14,685.47 1578.7,685.47 1579.26,685.47 1579.82,685.47 1580.37,685.47 1580.93,685.47 1581.49,685.47 1582.05,685.47 1582.61,685.47 1583.17,685.47 1583.73,685.47 1584.29,685.47 1584.85,685.47 1585.41,685.47 1585.97,685.47 1586.53,685.47 1587.09,685.47 1587.65,685.47 1588.2,685.47 1588.76,685.47 1589.32,685.47 1589.88,685.47 1590.44,685.47 1591,685.47 1591.56,685.47 1592.12,685.47 1592.68,685.47 1593.24,685.47 1593.8,685.47 1594.36,685.47 1594.92,685.47 1595.47,685.47 1596.03,685.47 1596.59,685.47 1597.15,685.47 1597.71,685.47 1598.27,685.47 1598.83,685.47 1599.39,685.47 1599.95,685.47 1600.51,685.47 1601.07,685.47 1601.63,685.47 1602.19,685.47 1602.74,685.47 1603.3,685.47 1603.86,685.47 1604.42,685.47 1604.98,685.47 1605.54,685.47 1606.1,685.47 1606.66,685.47 1607.22,685.47 1607.78,685.47 1608.34,685.47 1608.9,685.47 1609.46,685.47 1610.02,685.47 1610.57,685.47 1611.13,685.47 1611.69,685.47 1612.25,685.47 1612.81,685.47 1613.37,685.47 1613.93,685.47 1614.49,685.47 1615.05,685.47 1615.61,685.47 1616.17,685.47 1616.73,685.47 1617.29,685.47 1617.84,685.47 1618.4,685.47 1618.96,685.47 1619.52,685.47 1620.08,685.47 1620.64,685.47 1621.2,685.47 1621.76,685.47 1622.32,685.47 1622.88,685.47 1623.44,685.47 1624,685.47 1624.56,685.47 1625.11,685.47 1625.67,685.47 1626.23,685.47 1626.79,685.47 1627.35,685.47 1627.91,685.47 1628.47,685.47 1629.03,685.47 1629.59,685.47 1630.15,685.47 1630.71,685.47 1631.27,685.47 1631.83,685.47 1632.39,685.47 1632.94,685.47 1633.5,685.47 1634.06,685.47 1634.62,685.47 1635.18,685.47 1635.74,685.47 1636.3,685.47 1636.86,685.47 1637.42,685.47 1637.98,685.47 1638.54,685.47 1639.1,685.47 1639.66,685.47 1640.21,685.47 1640.77,685.47 1641.33,685.47 1641.89,685.47 1642.45,685.47 1643.01,685.47 1643.57,685.47 1644.13,685.47 1644.69,685.47 1645.25,685.47 1645.81,685.47 1646.37,685.47 1646.93,685.47 1647.48,685.47 1648.04,685.47 1648.6,685.47 1649.16,685.47 1649.72,685.47 1650.28,685.47 1650.84,685.47 1651.4,685.47 1651.96,685.47 1652.52,685.47 1653.08,685.47 1653.64,685.47 1654.2,685.47 1654.76,685.47 1655.31,685.47 1655.87,685.47 1656.43,685.47 1656.99,685.47 1657.55,685.47 1658.11,685.47 1658.67,685.47 1659.23,685.47 1659.79,685.47 1660.35,685.47 1660.91,685.47 1661.47,685.47 1662.03,685.47 1662.58,685.47 1663.14,685.47 1663.7,685.47 1664.26,685.47 1664.82,685.47 1665.38,685.47 1665.94,685.47 1666.5,685.47 1667.06,685.47 1667.62,685.47 1668.18,685.47 1668.74,685.47 1669.3,685.47 1669.85,685.47 1670.41,685.47 1670.97,685.47 1671.53,685.47 1672.09,685.47 1672.65,685.47 1673.21,685.47 1673.77,685.47 1674.33,685.47 1674.89,685.47 1675.45,685.47 1676.01,685.47 1676.57,685.47 1677.13,685.47 1677.68,685.47 1678.24,685.47 1678.8,685.47 1679.36,685.47 1679.92,685.47 1680.48,685.47 1681.04,685.47 1681.6,685.47 1682.16,685.47 1682.72,685.47 1683.28,685.47 1683.84,685.47 1684.4,685.47 1684.95,685.47 1685.51,685.47 1686.07,685.47 1686.63,685.47 1687.19,685.47 1687.75,685.47 1688.31,685.47 1688.87,685.47 1689.43,685.47 1689.99,685.47 1690.55,685.47 1691.11,685.47 1691.67,685.47 1692.23,685.47 1692.78,685.47 1693.34,685.47 1693.9,685.47 1694.46,685.47 1695.02,685.47 1695.58,685.47 1696.14,685.47 1696.7,685.47 1697.26,685.47 1697.82,685.47 1698.38,685.47 1698.94,685.47 1699.5,685.47 1700.05,685.47 1700.61,685.47 1701.17,685.47 1701.73,685.47 1702.29,685.47 1702.85,685.47 1703.41,685.47 1703.97,685.47 1704.53,685.47 1705.09,685.47 1705.65,685.47 1706.21,685.47 1706.77,685.47 1707.32,685.47 1707.88,685.47 1708.44,685.47 1709,685.47 1709.56,685.47 1710.12,685.47 1710.68,685.47 1711.24,685.47 1711.8,685.47 1712.36,685.47 1712.92,685.47 1713.48,685.47 1714.04,685.47 1714.6,685.47 1715.15,685.47 1715.71,685.47 1716.27,685.47 1716.83,685.47 1717.39,685.47 1717.95,685.47 1718.51,685.47 1719.07,685.47 1719.63,685.47 1720.19,685.47 1720.75,685.47 1721.31,685.47 1721.87,685.47 1722.42,685.47 1722.98,685.47 1723.54,685.47 1724.1,685.47 1724.66,685.47 1725.22,685.47 1725.78,685.47 1726.34,685.47 1726.9,685.47 1727.46,685.47 1728.02,685.47 1728.58,685.47 1729.14,685.47 1729.69,685.47 1730.25,685.47 1730.81,685.47 1731.37,685.47 1731.93,685.47 1732.49,685.47 1733.05,685.47 1733.61,685.47 1734.17,685.47 1734.73,685.47 1735.29,685.47 1735.85,685.47 1736.41,685.47 1736.97,685.47 1737.52,685.47 1738.08,685.47 1738.64,685.47 1739.2,685.47 1739.76,685.47 1740.32,685.47 1740.88,685.47 1741.44,685.47 1742,685.47 1742.56,685.47 1743.12,685.47 1743.68,685.47 1744.24,685.47 1744.79,685.47 1745.35,685.47 1745.91,685.47 1746.47,685.47 1747.03,685.47 1747.59,685.47 1748.15,685.47 1748.71,685.47 1749.27,685.47 1749.83,685.47 1750.39,685.47 1750.95,685.47 1751.51,685.47 1752.06,685.47 1752.62,685.47 1753.18,685.47 1753.74,685.47 1754.3,685.47 1754.86,685.47 1755.42,685.47 1755.98,685.47 1756.54,685.47 1757.1,685.47 1757.66,685.47 1758.22,685.47 1758.78,685.47 1759.34,685.47 1759.89,685.47 1760.45,685.47 1761.01,685.47 1761.57,685.47 1762.13,685.47 1762.69,685.47 1763.25,685.47 1763.81,685.47 1764.37,685.47 1764.93,685.47 1765.49,685.47 1766.05,685.47 1766.61,685.47 1767.16,685.47 1767.72,685.47 1768.28,685.47 1768.84,685.47 1769.4,685.47 1769.96,685.47 1770.52,685.47 1771.08,685.47 1771.64,685.47 1772.2,685.47 1772.76,685.47 1773.32,685.47 1773.88,685.47 1774.43,685.47 1774.99,685.47 1775.55,685.47 1776.11,685.47 1776.67,685.47 1777.23,685.47 1777.79,685.47 1778.35,685.47 1778.91,685.47 1779.47,685.47 1780.03,685.47 1780.59,685.47 1781.15,685.47 1781.71,685.47 1782.26,685.47 1782.82,685.47 1783.38,685.47 1783.94,685.47 1784.5,685.47 1785.06,685.47 1785.62,685.47 1786.18,685.47 1786.74,685.47 1787.3,685.47 1787.86,685.47 1788.42,685.47 1788.98,685.47 1789.53,685.47 1790.09,685.47 1790.65,685.47 1791.21,685.47 1791.77,685.47 1792.33,685.47 1792.89,685.47 1793.45,685.47 1794.01,685.47 1794.57,685.47 1795.13,685.47 1795.69,685.47 1796.25,685.47 1796.8,685.47 1797.36,685.47 1797.92,685.47 1798.48,685.47 1799.04,685.47 1799.6,685.47 1800.16,685.47 1800.72,685.47 1801.28,685.47 1801.84,685.47 1802.4,685.47 1802.96,685.47 1803.52,685.47 1804.08,685.47 1804.63,685.47 1805.19,685.47 1805.75,685.47 1806.31,685.47 1806.87,685.47 1807.43,685.47 1807.99,685.47 1808.55,685.47 1809.11,685.47 1809.67,685.47 1810.23,685.47 1810.79,685.47 1811.35,685.47 1811.9,685.47 1812.46,685.47 1813.02,685.47 1813.58,685.47 1814.14,685.47 1814.7,685.47 1815.26,685.47 1815.82,685.47 1816.38,685.47 1816.94,685.47 1817.5,685.47 1818.06,685.47 1818.62,685.47 1819.18,685.47 1819.73,685.47 1820.29,685.47 1820.85,685.47 1821.41,685.47 1821.97,685.47 1822.53,685.47 1823.09,685.47 1823.65,685.47 1824.21,685.47 1824.77,685.47 1825.33,685.47 1825.89,685.47 1826.45,685.47 1827,685.47 1827.56,685.47 1828.12,685.47 1828.68,685.47 1829.24,685.47 1829.8,685.47 1830.36,685.47 1830.92,685.47 1831.48,685.47 1832.04,685.47 1832.6,685.47 1833.16,685.47 1833.72,685.47 1834.27,685.47 1834.83,685.47 1835.39,685.47 1835.95,685.47 1836.51,685.47 1837.07,685.47 1837.63,685.47 1838.19,685.47 \"/>\n<path clip-path=\"url(#clip023)\" d=\"M720.247 684.537 L720.806 684.537 L721.365 684.537 L721.924 684.537 L722.484 684.537 L723.043 684.537 L723.602 684.537 L724.161 684.537 L724.721 684.537 L725.28 684.537 L725.839 684.537 L726.398 684.537 L726.958 684.537 L727.517 684.537 L728.076 684.537 L728.635 684.537 L729.195 684.537 L729.754 684.537 L730.313 684.537 L730.872 684.537 L731.432 684.537 L731.991 684.537 L732.55 684.537 L733.109 684.537 L733.669 684.537 L734.228 684.537 L734.787 684.537 L735.346 684.537 L735.906 684.537 L736.465 684.537 L737.024 684.537 L737.583 684.537 L738.143 684.537 L738.702 684.537 L739.261 684.537 L739.82 684.537 L740.38 684.537 L740.939 684.537 L741.498 684.537 L742.057 684.537 L742.617 684.537 L743.176 684.537 L743.735 684.537 L744.294 684.537 L744.854 684.537 L745.413 684.537 L745.972 684.537 L746.531 684.537 L747.091 684.537 L747.65 684.537 L748.209 684.537 L748.768 684.537 L749.328 684.537 L749.887 684.537 L750.446 684.537 L751.005 684.537 L751.565 684.537 L752.124 684.537 L752.683 684.537 L753.242 684.537 L753.802 684.537 L754.361 684.537 L754.92 684.537 L755.479 684.537 L756.039 684.537 L756.598 684.537 L757.157 684.537 L757.716 684.537 L758.276 684.537 L758.835 684.537 L759.394 684.537 L759.953 684.537 L760.513 684.537 L761.072 684.537 L761.631 684.537 L762.19 684.537 L762.75 684.537 L763.309 684.537 L763.868 684.537 L764.427 684.537 L764.987 684.537 L765.546 684.537 L766.105 684.537 L766.664 684.537 L767.224 684.537 L767.783 684.537 L768.342 684.537 L768.901 684.537 L769.461 684.537 L770.02 684.537 L770.579 684.537 L771.138 684.537 L771.698 684.537 L772.257 684.537 L772.816 684.537 L773.375 684.537 L773.935 684.537 L774.494 684.537 L775.053 684.537 L775.612 684.537 L776.172 684.537 L776.731 684.537 L777.29 684.537 L777.849 684.537 L778.409 684.537 L778.968 684.537 L779.527 684.537 L780.086 684.537 L780.646 684.537 L781.205 684.537 L781.764 684.537 L782.323 684.537 L782.883 684.537 L783.442 684.537 L784.001 684.537 L784.56 684.537 L785.12 684.537 L785.679 684.537 L786.238 684.537 L786.797 684.537 L787.357 684.537 L787.916 684.537 L788.475 684.537 L789.034 684.537 L789.594 684.537 L790.153 684.537 L790.712 684.537 L791.271 684.537 L791.831 684.537 L792.39 684.537 L792.949 684.537 L793.508 684.537 L794.068 684.537 L794.627 684.537 L795.186 684.537 L795.745 684.537 L796.305 684.537 L796.864 684.537 L797.423 684.537 L797.982 684.537 L798.542 684.537 L799.101 684.537 L799.66 684.537 L800.219 684.537 L800.779 684.537 L801.338 684.537 L801.897 684.537 L802.456 684.537 L803.016 684.537 L803.575 684.537 L804.134 684.537 L804.693 684.537 L805.253 684.537 L805.812 684.537 L806.371 684.537 L806.931 684.537 L807.49 684.537 L808.049 684.537 L808.608 684.537 L809.168 684.537 L809.727 684.537 L810.286 684.537 L810.845 684.537 L811.405 684.537 L811.964 684.537 L812.523 684.537 L813.082 684.537 L813.642 684.537 L814.201 684.537 L814.76 684.537 L815.319 684.537 L815.879 684.537 L816.438 684.537 L816.997 684.537 L817.556 684.537 L818.116 684.537 L818.675 684.537 L819.234 684.537 L819.793 684.537 L820.353 684.537 L820.912 684.537 L821.471 684.537 L822.03 684.537 L822.59 684.537 L823.149 684.537 L823.708 684.537 L824.267 684.537 L824.827 684.537 L825.386 684.537 L825.945 684.537 L826.504 684.537 L827.064 684.537 L827.623 684.537 L828.182 684.537 L828.741 684.537 L829.301 684.537 L829.86 684.537 L830.419 684.537 L830.978 684.537 L831.538 684.537 L832.097 684.537 L832.656 684.537 L833.215 684.537 L833.775 684.537 L834.334 684.537 L834.893 684.537 L835.452 684.537 L836.012 684.537 L836.571 684.537 L837.13 684.537 L837.689 684.537 L838.249 684.537 L838.808 684.537 L839.367 684.537 L839.926 684.537 L840.486 684.537 L841.045 684.537 L841.604 684.537 L842.163 684.537 L842.723 684.537 L843.282 684.537 L843.841 684.537 L844.4 684.537 L844.96 684.537 L845.519 684.537 L846.078 684.537 L846.637 684.537 L847.197 684.537 L847.756 684.537 L848.315 684.537 L848.874 684.537 L849.434 684.537 L849.993 684.537 L850.552 684.537 L851.111 684.537 L851.671 684.537 L852.23 684.537 L852.789 684.537 L853.348 684.537 L853.908 684.537 L854.467 684.537 L855.026 684.537 L855.585 684.537 L856.145 684.537 L856.704 684.537 L857.263 684.537 L857.822 684.537 L858.382 684.537 L858.941 684.537 L859.5 684.537 L860.059 684.537 L860.619 684.537 L861.178 684.537 L861.737 684.537 L862.296 684.537 L862.856 684.537 L863.415 684.537 L863.974 684.537 L864.533 684.537 L865.093 684.537 L865.652 684.537 L866.211 684.537 L866.77 684.537 L867.33 684.537 L867.889 684.537 L868.448 684.537 L869.007 684.537 L869.567 684.537 L870.126 684.537 L870.685 684.537 L871.244 684.537 L871.804 684.537 L872.363 684.537 L872.922 684.537 L873.481 684.537 L874.041 684.537 L874.6 684.537 L875.159 684.537 L875.718 684.537 L876.278 684.537 L876.837 684.537 L877.396 684.537 L877.955 684.537 L878.515 684.537 L879.074 684.537 L879.633 684.537 L880.192 684.537 L880.752 684.537 L881.311 684.537 L881.87 684.537 L882.429 684.537 L882.989 684.537 L883.548 684.537 L884.107 684.537 L884.666 684.537 L885.226 684.537 L885.785 684.537 L886.344 684.537 L886.903 684.537 L887.463 684.537 L888.022 684.537 L888.581 684.537 L889.14 684.537 L889.7 684.537 L890.259 684.537 L890.818 684.537 L891.377 684.537 L891.937 684.537 L892.496 684.537 L893.055 684.537 L893.614 684.537 L894.174 684.537 L894.733 684.537 L895.292 684.537 L895.851 684.537 L896.411 684.537 L896.97 684.537 L897.529 684.537 L898.088 684.537 L898.648 684.537 L899.207 684.537 L899.766 684.537 L900.325 684.537 L900.885 684.537 L901.444 684.537 L902.003 684.537 L902.562 684.537 L903.122 684.537 L903.681 684.537 L904.24 684.537 L904.799 684.537 L905.359 684.537 L905.918 684.537 L906.477 684.537 L907.036 684.537 L907.596 684.537 L908.155 684.537 L908.714 684.537 L909.273 684.537 L909.833 684.537 L910.392 684.537 L910.951 684.537 L911.51 684.537 L912.07 684.537 L912.629 684.537 L913.188 684.537 L913.747 684.537 L914.307 684.537 L914.866 684.537 L915.425 684.537 L915.984 684.537 L916.544 684.537 L917.103 684.537 L917.662 684.537 L918.221 684.537 L918.781 684.537 L919.34 684.537 L919.899 684.537 L920.458 684.537 L921.018 684.537 L921.577 684.537 L922.136 684.537 L922.695 684.537 L923.255 684.537 L923.814 684.537 L924.373 684.537 L924.932 684.537 L925.492 684.537 L926.051 684.537 L926.61 684.537 L927.169 684.537 L927.729 684.537 L928.288 684.537 L928.847 684.537 L929.406 684.537 L929.966 684.537 L930.525 684.537 L931.084 684.537 L931.644 684.537 L932.203 684.537 L932.762 684.537 L933.321 684.537 L933.881 684.537 L934.44 684.537 L934.999 684.537 L935.558 684.537 L936.118 684.537 L936.677 684.537 L937.236 684.537 L937.795 684.537 L938.355 684.537 L938.914 684.537 L939.473 684.537 L940.032 684.537 L940.592 684.537 L941.151 684.537 L941.71 684.537 L942.269 684.537 L942.829 684.537 L943.388 684.537 L943.947 684.537 L944.506 684.537 L945.066 684.537 L945.625 684.537 L946.184 684.537 L946.743 684.537 L947.303 684.537 L947.862 684.537 L948.421 684.537 L948.98 684.537 L949.54 684.537 L950.099 684.537 L950.658 684.537 L951.217 684.537 L951.777 684.537 L952.336 684.537 L952.895 684.537 L953.454 684.537 L954.014 684.537 L954.573 684.537 L955.132 684.537 L955.691 684.537 L956.251 684.537 L956.81 684.537 L957.369 684.537 L957.928 684.537 L958.488 684.537 L959.047 684.537 L959.606 684.537 L960.165 684.537 L960.725 684.537 L961.284 684.537 L961.843 684.537 L962.402 684.537 L962.962 684.537 L963.521 684.537 L964.08 684.537 L964.639 684.537 L965.199 684.537 L965.758 684.537 L966.317 684.537 L966.876 684.537 L967.436 684.537 L967.995 684.537 L968.554 684.537 L969.113 684.537 L969.673 684.537 L970.232 684.537 L970.791 684.537 L971.35 684.537 L971.91 684.537 L972.469 684.537 L973.028 684.537 L973.587 684.537 L974.147 684.537 L974.706 684.537 L975.265 684.537 L975.824 684.537 L976.384 684.537 L976.943 684.537 L977.502 684.537 L978.061 684.537 L978.621 684.537 L979.18 684.537 L979.739 684.537 L980.298 684.537 L980.858 684.537 L981.417 684.537 L981.976 684.537 L982.535 684.537 L983.095 684.537 L983.654 684.537 L984.213 684.537 L984.772 684.537 L985.332 684.537 L985.891 684.537 L986.45 684.537 L987.009 684.537 L987.569 684.537 L988.128 684.537 L988.687 684.537 L989.246 684.537 L989.806 684.537 L990.365 684.537 L990.924 684.537 L991.483 684.537 L992.043 684.537 L992.602 684.537 L993.161 684.537 L993.72 684.537 L994.28 684.537 L994.839 684.537 L995.398 684.537 L995.957 684.537 L996.517 684.537 L997.076 684.537 L997.635 684.537 L998.194 684.537 L998.754 684.537 L999.313 684.537 L999.872 684.537 L1000.43 684.537 L1000.99 684.537 L1001.55 684.537 L1002.11 684.537 L1002.67 684.537 L1003.23 684.537 L1003.79 684.537 L1004.35 684.537 L1004.91 684.537 L1005.46 684.537 L1006.02 684.537 L1006.58 684.537 L1007.14 684.537 L1007.7 684.537 L1008.26 684.537 L1008.82 684.537 L1009.38 684.537 L1009.94 684.537 L1010.5 684.537 L1011.06 684.537 L1011.62 684.537 L1012.18 684.537 L1012.73 684.537 L1013.29 684.537 L1013.85 684.537 L1014.41 684.537 L1014.97 684.537 L1015.53 684.537 L1016.09 684.537 L1016.65 684.537 L1017.21 684.537 L1017.77 684.537 L1018.33 684.537 L1018.89 684.537 L1019.45 684.537 L1020.01 684.537 L1020.56 684.537 L1021.12 684.537 L1021.68 684.537 L1022.24 684.537 L1022.8 684.537 L1023.36 684.537 L1023.92 684.537 L1024.48 684.537 L1025.04 684.537 L1025.6 684.537 L1026.16 684.537 L1026.72 684.537 L1027.28 684.537 L1027.83 684.537 L1028.39 684.537 L1028.95 684.537 L1029.51 684.537 L1030.07 684.537 L1030.63 684.537 L1031.19 684.537 L1031.75 684.537 L1032.31 684.537 L1032.87 684.537 L1033.43 684.537 L1033.99 684.537 L1034.55 684.537 L1035.1 684.537 L1035.66 684.537 L1036.22 684.537 L1036.78 684.537 L1037.34 684.537 L1037.9 684.537 L1038.46 684.537 L1039.02 684.537 L1039.58 684.537 L1040.14 684.537 L1040.7 684.537 L1041.26 684.537 L1041.82 684.537 L1042.38 684.537 L1042.93 684.537 L1043.49 684.537 L1044.05 684.537 L1044.61 684.537 L1045.17 684.537 L1045.73 684.537 L1046.29 684.537 L1046.85 684.537 L1047.41 684.537 L1047.97 684.537 L1048.53 684.537 L1049.09 684.537 L1049.65 684.537 L1050.2 684.537 L1050.76 684.537 L1051.32 684.537 L1051.88 684.537 L1052.44 684.537 L1053 684.537 L1053.56 684.537 L1054.12 684.537 L1054.68 684.537 L1055.24 684.537 L1055.8 684.537 L1056.36 684.537 L1056.92 684.537 L1057.48 684.537 L1058.03 684.537 L1058.59 684.537 L1059.15 684.537 L1059.71 684.537 L1060.27 684.537 L1060.83 684.537 L1061.39 684.537 L1061.95 684.537 L1062.51 684.537 L1063.07 684.537 L1063.63 684.537 L1064.19 684.537 L1064.75 684.537 L1065.3 684.537 L1065.86 684.537 L1066.42 684.537 L1066.98 684.537 L1067.54 684.537 L1068.1 684.537 L1068.66 684.537 L1069.22 684.537 L1069.78 684.537 L1070.34 684.537 L1070.9 684.537 L1071.46 684.537 L1072.02 684.537 L1072.57 684.537 L1073.13 684.537 L1073.69 684.537 L1074.25 684.537 L1074.81 684.537 L1075.37 684.537 L1075.93 684.537 L1076.49 684.537 L1077.05 684.537 L1077.61 684.537 L1078.17 684.537 L1078.73 684.537 L1079.29 684.537 L1079.85 684.537 L1080.4 684.537 L1080.96 684.537 L1081.52 684.537 L1082.08 684.537 L1082.64 684.537 L1083.2 684.537 L1083.76 684.537 L1084.32 684.537 L1084.88 684.537 L1085.44 684.537 L1086 684.537 L1086.56 684.537 L1087.12 684.537 L1087.67 684.537 L1088.23 684.537 L1088.79 684.537 L1089.35 684.537 L1089.91 684.537 L1090.47 684.537 L1091.03 684.537 L1091.59 684.537 L1092.15 684.537 L1092.71 684.537 L1093.27 684.537 L1093.83 684.537 L1094.39 684.537 L1094.94 684.537 L1095.5 684.537 L1096.06 684.537 L1096.62 684.537 L1097.18 684.537 L1097.74 684.537 L1098.3 684.537 L1098.86 684.537 L1099.42 684.537 L1099.98 684.537 L1100.54 684.537 L1101.1 684.537 L1101.66 684.537 L1102.22 684.537 L1102.77 684.537 L1103.33 684.537 L1103.89 684.537 L1104.45 684.537 L1105.01 684.537 L1105.57 684.537 L1106.13 684.537 L1106.69 684.537 L1107.25 684.537 L1107.81 684.537 L1108.37 684.537 L1108.93 684.537 L1109.49 684.537 L1110.04 684.537 L1110.6 684.537 L1111.16 684.537 L1111.72 684.537 L1112.28 684.537 L1112.84 684.537 L1113.4 684.537 L1113.96 684.537 L1114.52 684.537 L1115.08 684.537 L1115.64 684.537 L1116.2 684.537 L1116.76 684.537 L1117.31 684.537 L1117.87 684.537 L1118.43 684.537 L1118.99 684.537 L1119.55 684.537 L1120.11 684.537 L1120.67 684.537 L1121.23 684.537 L1121.79 684.537 L1122.35 684.537 L1122.91 684.537 L1123.47 684.537 L1124.03 684.537 L1124.59 684.537 L1125.14 684.537 L1125.7 684.537 L1126.26 684.537 L1126.82 684.537 L1127.38 684.537 L1127.94 684.537 L1128.5 684.537 L1129.06 684.537 L1129.62 684.537 L1130.18 684.537 L1130.74 684.537 L1131.3 684.537 L1131.86 684.537 L1132.41 684.537 L1132.97 684.537 L1133.53 684.537 L1134.09 684.537 L1134.65 684.537 L1135.21 684.537 L1135.77 684.537 L1136.33 684.537 L1136.89 684.537 L1137.45 684.537 L1138.01 684.537 L1138.57 684.537 L1139.13 684.537 L1139.68 684.537 L1140.24 684.537 L1140.8 684.537 L1141.36 684.537 L1141.92 684.537 L1142.48 684.537 L1143.04 684.537 L1143.6 684.537 L1144.16 684.537 L1144.72 684.537 L1145.28 684.537 L1145.84 684.537 L1146.4 684.537 L1146.96 684.537 L1147.51 684.537 L1148.07 684.537 L1148.63 684.537 L1149.19 684.537 L1149.75 684.537 L1150.31 684.537 L1150.87 684.537 L1151.43 684.537 L1151.99 684.537 L1152.55 684.537 L1153.11 684.537 L1153.67 684.537 L1154.23 684.537 L1154.78 684.537 L1155.34 684.537 L1155.9 684.537 L1156.46 684.537 L1157.02 684.537 L1157.58 684.537 L1158.14 684.537 L1158.7 684.537 L1159.26 684.537 L1159.82 684.537 L1160.38 684.537 L1160.94 684.537 L1161.5 684.537 L1162.05 684.537 L1162.61 684.537 L1163.17 684.537 L1163.73 684.537 L1164.29 684.537 L1164.85 684.537 L1165.41 684.537 L1165.97 684.537 L1166.53 684.537 L1167.09 684.537 L1167.65 684.537 L1168.21 684.537 L1168.77 684.537 L1169.33 684.537 L1169.88 684.537 L1170.44 684.537 L1171 684.537 L1171.56 684.537 L1172.12 684.537 L1172.68 684.537 L1173.24 684.537 L1173.8 684.537 L1174.36 684.537 L1174.92 684.537 L1175.48 684.537 L1176.04 684.537 L1176.6 684.537 L1177.15 684.537 L1177.71 684.537 L1178.27 684.537 L1178.83 684.537 L1179.39 684.537 L1179.95 684.537 L1180.51 684.537 L1181.07 684.537 L1181.63 684.537 L1182.19 684.537 L1182.75 684.537 L1183.31 684.537 L1183.87 684.537 L1184.43 684.537 L1184.98 684.537 L1185.54 684.537 L1186.1 684.537 L1186.66 684.537 L1187.22 684.537 L1187.78 684.537 L1188.34 684.537 L1188.9 684.537 L1189.46 684.537 L1190.02 684.537 L1190.58 684.537 L1191.14 684.537 L1191.7 684.537 L1192.25 684.537 L1192.81 684.537 L1193.37 684.537 L1193.93 684.537 L1194.49 684.537 L1195.05 684.537 L1195.61 684.537 L1196.17 684.537 L1196.73 684.537 L1197.29 684.537 L1197.85 684.537 L1198.41 684.537 L1198.97 684.537 L1199.52 684.537 L1200.08 684.537 L1200.64 684.537 L1201.2 684.537 L1201.76 684.537 L1202.32 684.537 L1202.88 684.537 L1203.44 684.537 L1204 684.537 L1204.56 684.537 L1205.12 684.537 L1205.68 684.537 L1206.24 684.537 L1206.8 684.537 L1207.35 684.537 L1207.91 684.537 L1208.47 684.537 L1209.03 684.537 L1209.59 684.537 L1210.15 684.537 L1210.71 684.537 L1211.27 684.537 L1211.83 684.537 L1212.39 684.537 L1212.95 684.537 L1213.51 684.537 L1214.07 684.537 L1214.62 684.537 L1215.18 684.537 L1215.74 684.537 L1216.3 684.537 L1216.86 684.537 L1217.42 684.537 L1217.98 684.537 L1218.54 684.537 L1219.1 684.537 L1219.66 684.537 L1220.22 684.537 L1220.78 684.537 L1221.34 684.537 L1221.89 684.537 L1222.45 684.537 L1223.01 684.537 L1223.57 684.537 L1224.13 684.537 L1224.69 684.537 L1225.25 684.537 L1225.81 684.537 L1226.37 684.537 L1226.93 684.537 L1227.49 684.537 L1228.05 684.537 L1228.61 684.537 L1229.17 684.537 L1229.72 684.537 L1230.28 684.537 L1230.84 684.537 L1231.4 684.537 L1231.96 684.537 L1232.52 684.537 L1233.08 684.537 L1233.64 684.537 L1234.2 684.537 L1234.76 684.537 L1235.32 684.537 L1235.88 684.537 L1236.44 684.537 L1236.99 684.537 L1237.55 684.537 L1238.11 684.537 L1238.67 684.537 L1239.23 684.537 L1239.79 684.537 L1240.35 684.537 L1240.91 684.537 L1241.47 684.537 L1242.03 684.537 L1242.59 684.537 L1243.15 684.537 L1243.71 684.537 L1244.26 684.537 L1244.82 684.537 L1245.38 684.537 L1245.94 684.537 L1246.5 684.537 L1247.06 684.537 L1247.62 684.537 L1248.18 684.537 L1248.74 684.537 L1249.3 684.537 L1249.86 684.537 L1250.42 684.537 L1250.98 684.537 L1251.54 684.537 L1252.09 684.537 L1252.65 684.537 L1253.21 684.537 L1253.77 684.537 L1254.33 684.537 L1254.89 684.537 L1255.45 684.537 L1256.01 684.537 L1256.57 684.537 L1257.13 684.537 L1257.69 684.537 L1258.25 684.537 L1258.81 684.537 L1259.36 684.537 L1259.92 684.537 L1260.48 684.537 L1261.04 684.537 L1261.6 684.537 L1262.16 684.537 L1262.72 684.537 L1263.28 684.537 L1263.84 684.537 L1264.4 684.537 L1264.96 684.537 L1265.52 684.537 L1266.08 684.537 L1266.63 684.537 L1267.19 684.537 L1267.75 684.537 L1268.31 684.537 L1268.87 684.537 L1269.43 684.537 L1269.99 684.537 L1270.55 684.537 L1271.11 684.537 L1271.67 684.537 L1272.23 684.537 L1272.79 684.537 L1273.35 684.537 L1273.91 684.537 L1274.46 684.537 L1275.02 684.537 L1275.58 684.537 L1276.14 684.537 L1276.7 684.537 L1277.26 684.537 L1277.82 684.537 L1278.38 684.537 L1278.94 684.537 L1279.5 684.537 L1280.06 684.537 L1280.62 684.537 L1281.18 684.537 L1281.73 684.537 L1282.29 684.537 L1282.85 684.537 L1283.41 684.537 L1283.97 684.537 L1284.53 684.537 L1285.09 684.537 L1285.65 684.537 L1286.21 684.537 L1286.77 684.537 L1287.33 684.537 L1287.89 684.537 L1288.45 684.537 L1289 684.537 L1289.56 684.537 L1290.12 684.537 L1290.68 684.537 L1291.24 684.537 L1291.8 684.537 L1292.36 684.537 L1292.92 684.537 L1293.48 684.537 L1294.04 684.537 L1294.6 684.537 L1295.16 684.537 L1295.72 684.537 L1296.28 684.537 L1296.83 684.537 L1297.39 684.537 L1297.95 684.537 L1298.51 684.537 L1299.07 684.537 L1299.63 684.537 L1300.19 684.537 L1300.75 684.537 L1301.31 684.537 L1301.87 684.537 L1302.43 684.537 L1302.99 684.537 L1303.55 684.537 L1304.1 684.537 L1304.66 684.537 L1305.22 684.537 L1305.78 684.537 L1306.34 684.537 L1306.9 684.537 L1307.46 684.537 L1308.02 684.537 L1308.58 684.537 L1309.14 684.537 L1309.7 684.537 L1310.26 684.537 L1310.82 684.537 L1311.38 684.537 L1311.93 684.537 L1312.49 684.537 L1313.05 684.537 L1313.61 684.537 L1314.17 684.537 L1314.73 684.537 L1315.29 684.537 L1315.85 684.537 L1316.41 684.537 L1316.97 684.537 L1317.53 684.537 L1318.09 684.537 L1318.65 684.537 L1319.2 684.537 L1319.76 684.537 L1320.32 684.537 L1320.88 684.537 L1321.44 684.537 L1322 684.537 L1322.56 684.537 L1323.12 684.537 L1323.68 684.537 L1324.24 684.537 L1324.8 684.537 L1325.36 684.537 L1325.92 684.537 L1326.47 684.537 L1327.03 684.537 L1327.59 684.537 L1328.15 684.537 L1328.71 684.537 L1329.27 684.537 L1329.83 684.537 L1330.39 684.537 L1330.95 684.537 L1331.51 684.537 L1332.07 684.537 L1332.63 684.537 L1333.19 684.537 L1333.75 684.537 L1334.3 684.537 L1334.86 684.537 L1335.42 684.537 L1335.98 684.537 L1336.54 684.537 L1337.1 684.537 L1337.66 684.537 L1338.22 684.537 L1338.78 684.537 L1339.34 684.537 L1339.9 684.537 L1340.46 684.537 L1341.02 684.537 L1341.57 684.537 L1342.13 684.537 L1342.69 684.537 L1343.25 684.537 L1343.81 684.537 L1344.37 684.537 L1344.93 684.537 L1345.49 684.537 L1346.05 684.537 L1346.61 684.537 L1347.17 684.537 L1347.73 684.537 L1348.29 684.537 L1348.84 684.537 L1349.4 684.537 L1349.96 684.537 L1350.52 684.537 L1351.08 684.537 L1351.64 684.537 L1352.2 684.537 L1352.76 684.537 L1353.32 684.537 L1353.88 684.537 L1354.44 684.537 L1355 684.537 L1355.56 684.537 L1356.12 684.537 L1356.67 684.537 L1357.23 684.537 L1357.79 684.537 L1358.35 684.537 L1358.91 684.537 L1359.47 684.537 L1360.03 684.537 L1360.59 684.537 L1361.15 684.537 L1361.71 684.537 L1362.27 684.537 L1362.83 684.537 L1363.39 684.537 L1363.94 684.537 L1364.5 684.537 L1365.06 684.537 L1365.62 684.537 L1366.18 684.537 L1366.74 684.537 L1367.3 684.537 L1367.86 684.537 L1368.42 684.537 L1368.98 684.537 L1369.54 684.537 L1370.1 684.537 L1370.66 684.537 L1371.21 684.537 L1371.77 684.537 L1372.33 684.537 L1372.89 684.537 L1373.45 684.537 L1374.01 684.537 L1374.57 684.537 L1375.13 684.537 L1375.69 684.537 L1376.25 684.537 L1376.81 684.537 L1377.37 684.537 L1377.93 684.537 L1378.49 684.537 L1379.04 684.537 L1379.6 684.537 L1380.16 684.537 L1380.72 684.537 L1381.28 684.537 L1381.84 684.537 L1382.4 684.537 L1382.96 684.537 L1383.52 684.537 L1384.08 684.537 L1384.64 684.537 L1385.2 684.537 L1385.76 684.537 L1386.31 684.537 L1386.87 684.537 L1387.43 684.537 L1387.99 684.537 L1388.55 684.537 L1389.11 684.537 L1389.67 684.537 L1390.23 684.537 L1390.79 684.537 L1391.35 684.537 L1391.91 684.537 L1392.47 684.537 L1393.03 684.537 L1393.58 684.537 L1394.14 684.537 L1394.7 684.537 L1395.26 684.537 L1395.82 684.537 L1396.38 684.537 L1396.94 684.537 L1397.5 684.537 L1398.06 684.537 L1398.62 684.537 L1399.18 684.537 L1399.74 684.537 L1400.3 684.537 L1400.86 684.537 L1401.41 684.537 L1401.97 684.537 L1402.53 684.537 L1403.09 684.537 L1403.65 684.537 L1404.21 684.537 L1404.77 684.537 L1405.33 684.537 L1405.89 684.537 L1406.45 684.537 L1407.01 684.537 L1407.57 684.537 L1408.13 684.537 L1408.68 684.537 L1409.24 684.537 L1409.8 684.537 L1410.36 684.537 L1410.92 684.537 L1411.48 684.537 L1412.04 684.537 L1412.6 684.537 L1413.16 684.537 L1413.72 684.537 L1414.28 684.537 L1414.84 684.537 L1415.4 684.537 L1415.95 684.537 L1416.51 684.537 L1417.07 684.537 L1417.63 684.537 L1418.19 684.537 L1418.75 684.537 L1419.31 684.537 L1419.87 684.537 L1420.43 684.537 L1420.99 684.537 L1421.55 684.537 L1422.11 684.537 L1422.67 684.537 L1423.23 684.537 L1423.78 684.537 L1424.34 684.537 L1424.9 684.537 L1425.46 684.537 L1426.02 684.537 L1426.58 684.537 L1427.14 684.537 L1427.7 684.537 L1428.26 684.537 L1428.82 684.537 L1429.38 684.537 L1429.94 684.537 L1430.5 684.537 L1431.05 684.537 L1431.61 684.537 L1432.17 684.537 L1432.73 684.537 L1433.29 684.537 L1433.85 684.537 L1434.41 684.537 L1434.97 684.537 L1435.53 684.537 L1436.09 684.537 L1436.65 684.537 L1437.21 684.537 L1437.77 684.537 L1438.33 684.537 L1438.88 684.537 L1439.44 684.537 L1440 684.537 L1440.56 684.537 L1441.12 684.537 L1441.68 684.537 L1442.24 684.537 L1442.8 684.537 L1443.36 684.537 L1443.92 684.537 L1444.48 684.537 L1445.04 684.537 L1445.6 684.537 L1446.15 684.537 L1446.71 684.537 L1447.27 684.537 L1447.83 684.537 L1448.39 684.537 L1448.95 684.537 L1449.51 684.537 L1450.07 684.537 L1450.63 684.537 L1451.19 684.537 L1451.75 684.537 L1452.31 684.537 L1452.87 684.537 L1453.42 684.537 L1453.98 684.537 L1454.54 684.537 L1455.1 684.537 L1455.66 684.537 L1456.22 684.537 L1456.78 684.537 L1457.34 684.537 L1457.9 684.537 L1458.46 684.537 L1459.02 684.537 L1459.58 684.537 L1460.14 684.537 L1460.7 684.537 L1461.25 684.537 L1461.81 684.537 L1462.37 684.537 L1462.93 684.537 L1463.49 684.537 L1464.05 684.537 L1464.61 684.537 L1465.17 684.537 L1465.73 684.537 L1466.29 684.537 L1466.85 684.537 L1467.41 684.537 L1467.97 684.537 L1468.52 684.537 L1469.08 684.537 L1469.64 684.537 L1470.2 684.537 L1470.76 684.537 L1471.32 684.537 L1471.88 684.537 L1472.44 684.537 L1473 684.537 L1473.56 684.537 L1474.12 684.537 L1474.68 684.537 L1475.24 684.537 L1475.79 684.537 L1476.35 684.537 L1476.91 684.537 L1477.47 684.537 L1478.03 684.537 L1478.59 684.537 L1479.15 684.537 L1479.71 684.537 L1480.27 684.537 L1480.83 684.537 L1481.39 684.537 L1481.95 684.537 L1482.51 684.537 L1483.07 684.537 L1483.62 684.537 L1484.18 684.537 L1484.74 684.537 L1485.3 684.537 L1485.86 684.537 L1486.42 684.537 L1486.98 684.537 L1487.54 684.537 L1488.1 684.537 L1488.66 684.537 L1489.22 684.537 L1489.78 684.537 L1490.34 684.537 L1490.89 684.537 L1491.45 684.537 L1492.01 684.537 L1492.57 684.537 L1493.13 684.537 L1493.69 684.537 L1494.25 684.537 L1494.81 684.537 L1495.37 684.537 L1495.93 684.537 L1496.49 684.537 L1497.05 684.537 L1497.61 684.537 L1498.16 684.537 L1498.72 684.537 L1499.28 684.537 L1499.84 684.537 L1500.4 684.537 L1500.96 684.537 L1501.52 684.537 L1502.08 684.537 L1502.64 684.537 L1503.2 684.537 L1503.76 684.537 L1504.32 684.537 L1504.88 684.537 L1505.44 684.537 L1505.99 684.537 L1506.55 684.537 L1507.11 684.537 L1507.67 684.537 L1508.23 684.537 L1508.79 684.537 L1509.35 684.537 L1509.91 684.537 L1510.47 684.537 L1511.03 684.537 L1511.59 684.537 L1512.15 684.537 L1512.71 684.537 L1513.26 684.537 L1513.82 684.537 L1514.38 684.537 L1514.94 684.537 L1515.5 684.537 L1516.06 684.537 L1516.62 684.537 L1517.18 684.537 L1517.74 684.537 L1518.3 684.537 L1518.86 684.537 L1519.42 684.537 L1519.98 684.537 L1520.53 684.537 L1521.09 684.537 L1521.65 684.537 L1522.21 684.537 L1522.77 684.537 L1523.33 684.537 L1523.89 684.537 L1524.45 684.537 L1525.01 684.537 L1525.57 684.537 L1526.13 684.537 L1526.69 684.537 L1527.25 684.537 L1527.81 684.537 L1528.36 684.537 L1528.92 684.537 L1529.48 684.537 L1530.04 684.537 L1530.6 684.537 L1531.16 684.537 L1531.72 684.537 L1532.28 684.537 L1532.84 684.537 L1533.4 684.537 L1533.96 684.537 L1534.52 684.537 L1535.08 684.537 L1535.63 684.537 L1536.19 684.537 L1536.75 684.537 L1537.31 684.537 L1537.87 684.537 L1538.43 684.537 L1538.99 684.537 L1539.55 684.537 L1540.11 684.537 L1540.67 684.537 L1541.23 684.537 L1541.79 684.537 L1542.35 684.537 L1542.9 684.537 L1543.46 684.537 L1544.02 684.537 L1544.58 684.537 L1545.14 684.537 L1545.7 684.537 L1546.26 684.537 L1546.82 684.537 L1547.38 684.537 L1547.94 684.537 L1548.5 684.537 L1549.06 684.537 L1549.62 684.537 L1550.18 684.537 L1550.73 684.537 L1551.29 684.537 L1551.85 684.537 L1552.41 684.537 L1552.97 684.537 L1553.53 684.537 L1554.09 684.537 L1554.65 684.537 L1555.21 684.537 L1555.77 684.537 L1556.33 684.537 L1556.89 684.537 L1557.45 684.537 L1558 684.537 L1558.56 684.537 L1559.12 684.537 L1559.68 684.537 L1560.24 684.537 L1560.8 684.537 L1561.36 684.537 L1561.92 684.537 L1562.48 684.537 L1563.04 684.537 L1563.6 684.537 L1564.16 684.537 L1564.72 684.537 L1565.28 684.537 L1565.83 684.537 L1566.39 684.537 L1566.95 684.537 L1567.51 684.537 L1568.07 684.537 L1568.63 684.537 L1569.19 684.537 L1569.75 684.537 L1570.31 684.537 L1570.87 684.537 L1571.43 684.537 L1571.99 684.537 L1572.55 684.537 L1573.1 684.537 L1573.66 684.537 L1574.22 684.537 L1574.78 684.537 L1575.34 684.537 L1575.9 684.537 L1576.46 684.537 L1577.02 684.537 L1577.58 684.537 L1578.14 684.537 L1578.7 684.537 L1579.26 684.537 L1579.82 684.537 L1580.37 684.537 L1580.93 684.537 L1581.49 684.537 L1582.05 684.537 L1582.61 684.537 L1583.17 684.537 L1583.73 684.537 L1584.29 684.537 L1584.85 684.537 L1585.41 684.537 L1585.97 684.537 L1586.53 684.537 L1587.09 684.537 L1587.65 684.537 L1588.2 684.537 L1588.76 684.537 L1589.32 684.537 L1589.88 684.537 L1590.44 684.537 L1591 684.537 L1591.56 684.537 L1592.12 684.537 L1592.68 684.537 L1593.24 684.537 L1593.8 684.537 L1594.36 684.537 L1594.92 684.537 L1595.47 684.537 L1596.03 684.537 L1596.59 684.537 L1597.15 684.537 L1597.71 684.537 L1598.27 684.537 L1598.83 684.537 L1599.39 684.537 L1599.95 684.537 L1600.51 684.537 L1601.07 684.537 L1601.63 684.537 L1602.19 684.537 L1602.74 684.537 L1603.3 684.537 L1603.86 684.537 L1604.42 684.537 L1604.98 684.537 L1605.54 684.537 L1606.1 684.537 L1606.66 684.537 L1607.22 684.537 L1607.78 684.537 L1608.34 684.537 L1608.9 684.537 L1609.46 684.537 L1610.02 684.537 L1610.57 684.537 L1611.13 684.537 L1611.69 684.537 L1612.25 684.537 L1612.81 684.537 L1613.37 684.537 L1613.93 684.537 L1614.49 684.537 L1615.05 684.537 L1615.61 684.537 L1616.17 684.537 L1616.73 684.537 L1617.29 684.537 L1617.84 684.537 L1618.4 684.537 L1618.96 684.537 L1619.52 684.537 L1620.08 684.537 L1620.64 684.537 L1621.2 684.537 L1621.76 684.537 L1622.32 684.537 L1622.88 684.537 L1623.44 684.537 L1624 684.537 L1624.56 684.537 L1625.11 684.537 L1625.67 684.537 L1626.23 684.537 L1626.79 684.537 L1627.35 684.537 L1627.91 684.537 L1628.47 684.537 L1629.03 684.537 L1629.59 684.537 L1630.15 684.537 L1630.71 684.537 L1631.27 684.537 L1631.83 684.537 L1632.39 684.537 L1632.94 684.537 L1633.5 684.537 L1634.06 684.537 L1634.62 684.537 L1635.18 684.537 L1635.74 684.537 L1636.3 684.537 L1636.86 684.537 L1637.42 684.537 L1637.98 684.537 L1638.54 684.537 L1639.1 684.537 L1639.66 684.537 L1640.21 684.537 L1640.77 684.537 L1641.33 684.537 L1641.89 684.537 L1642.45 684.537 L1643.01 684.537 L1643.57 684.537 L1644.13 684.537 L1644.69 684.537 L1645.25 684.537 L1645.81 684.537 L1646.37 684.537 L1646.93 684.537 L1647.48 684.537 L1648.04 684.537 L1648.6 684.537 L1649.16 684.537 L1649.72 684.537 L1650.28 684.537 L1650.84 684.537 L1651.4 684.537 L1651.96 684.537 L1652.52 684.537 L1653.08 684.537 L1653.64 684.537 L1654.2 684.537 L1654.76 684.537 L1655.31 684.537 L1655.87 684.537 L1656.43 684.537 L1656.99 684.537 L1657.55 684.537 L1658.11 684.537 L1658.67 684.537 L1659.23 684.537 L1659.79 684.537 L1660.35 684.537 L1660.91 684.537 L1661.47 684.537 L1662.03 684.537 L1662.58 684.537 L1663.14 684.537 L1663.7 684.537 L1664.26 684.537 L1664.82 684.537 L1665.38 684.537 L1665.94 684.537 L1666.5 684.537 L1667.06 684.537 L1667.62 684.537 L1668.18 684.537 L1668.74 684.537 L1669.3 684.537 L1669.85 684.537 L1670.41 684.537 L1670.97 684.537 L1671.53 684.537 L1672.09 684.537 L1672.65 684.537 L1673.21 684.537 L1673.77 684.537 L1674.33 684.537 L1674.89 684.537 L1675.45 684.537 L1676.01 684.537 L1676.57 684.537 L1677.13 684.537 L1677.68 684.537 L1678.24 684.537 L1678.8 684.537 L1679.36 684.537 L1679.92 684.537 L1680.48 684.537 L1681.04 684.537 L1681.6 684.537 L1682.16 684.537 L1682.72 684.537 L1683.28 684.537 L1683.84 684.537 L1684.4 684.537 L1684.95 684.537 L1685.51 684.537 L1686.07 684.537 L1686.63 684.537 L1687.19 684.537 L1687.75 684.537 L1688.31 684.537 L1688.87 684.537 L1689.43 684.537 L1689.99 684.537 L1690.55 684.537 L1691.11 684.537 L1691.67 684.537 L1692.23 684.537 L1692.78 684.537 L1693.34 684.537 L1693.9 684.537 L1694.46 684.537 L1695.02 684.537 L1695.58 684.537 L1696.14 684.537 L1696.7 684.537 L1697.26 684.537 L1697.82 684.537 L1698.38 684.537 L1698.94 684.537 L1699.5 684.537 L1700.05 684.537 L1700.61 684.537 L1701.17 684.537 L1701.73 684.537 L1702.29 684.537 L1702.85 684.537 L1703.41 684.537 L1703.97 684.537 L1704.53 684.537 L1705.09 684.537 L1705.65 684.537 L1706.21 684.537 L1706.77 684.537 L1707.32 684.537 L1707.88 684.537 L1708.44 684.537 L1709 684.537 L1709.56 684.537 L1710.12 684.537 L1710.68 684.537 L1711.24 684.537 L1711.8 684.537 L1712.36 684.537 L1712.92 684.537 L1713.48 684.537 L1714.04 684.537 L1714.6 684.537 L1715.15 684.537 L1715.71 684.537 L1716.27 684.537 L1716.83 684.537 L1717.39 684.537 L1717.95 684.537 L1718.51 684.537 L1719.07 684.537 L1719.63 684.537 L1720.19 684.537 L1720.75 684.537 L1721.31 684.537 L1721.87 684.537 L1722.42 684.537 L1722.98 684.537 L1723.54 684.537 L1724.1 684.537 L1724.66 684.537 L1725.22 684.537 L1725.78 684.537 L1726.34 684.537 L1726.9 684.537 L1727.46 684.537 L1728.02 684.537 L1728.58 684.537 L1729.14 684.537 L1729.69 684.537 L1730.25 684.537 L1730.81 684.537 L1731.37 684.537 L1731.93 684.537 L1732.49 684.537 L1733.05 684.537 L1733.61 684.537 L1734.17 684.537 L1734.73 684.537 L1735.29 684.537 L1735.85 684.537 L1736.41 684.537 L1736.97 684.537 L1737.52 684.537 L1738.08 684.537 L1738.64 684.537 L1739.2 684.537 L1739.76 684.537 L1740.32 684.537 L1740.88 684.537 L1741.44 684.537 L1742 684.537 L1742.56 684.537 L1743.12 684.537 L1743.68 684.537 L1744.24 684.537 L1744.79 684.537 L1745.35 684.537 L1745.91 684.537 L1746.47 684.537 L1747.03 684.537 L1747.59 684.537 L1748.15 684.537 L1748.71 684.537 L1749.27 684.537 L1749.83 684.537 L1750.39 684.537 L1750.95 684.537 L1751.51 684.537 L1752.06 684.537 L1752.62 684.537 L1753.18 684.537 L1753.74 684.537 L1754.3 684.537 L1754.86 684.537 L1755.42 684.537 L1755.98 684.537 L1756.54 684.537 L1757.1 684.537 L1757.66 684.537 L1758.22 684.537 L1758.78 684.537 L1759.34 684.537 L1759.89 684.537 L1760.45 684.537 L1761.01 684.537 L1761.57 684.537 L1762.13 684.537 L1762.69 684.537 L1763.25 684.537 L1763.81 684.537 L1764.37 684.537 L1764.93 684.537 L1765.49 684.537 L1766.05 684.537 L1766.61 684.537 L1767.16 684.537 L1767.72 684.537 L1768.28 684.537 L1768.84 684.537 L1769.4 684.537 L1769.96 684.537 L1770.52 684.537 L1771.08 684.537 L1771.64 684.537 L1772.2 684.537 L1772.76 684.537 L1773.32 684.537 L1773.88 684.537 L1774.43 684.537 L1774.99 684.537 L1775.55 684.537 L1776.11 684.537 L1776.67 684.537 L1777.23 684.537 L1777.79 684.537 L1778.35 684.537 L1778.91 684.537 L1779.47 684.537 L1780.03 684.537 L1780.59 684.537 L1781.15 684.537 L1781.71 684.537 L1782.26 684.537 L1782.82 684.537 L1783.38 684.537 L1783.94 684.537 L1784.5 684.537 L1785.06 684.537 L1785.62 684.537 L1786.18 684.537 L1786.74 684.537 L1787.3 684.537 L1787.86 684.537 L1788.42 684.537 L1788.98 684.537 L1789.53 684.537 L1790.09 684.537 L1790.65 684.537 L1791.21 684.537 L1791.77 684.537 L1792.33 684.537 L1792.89 684.537 L1793.45 684.537 L1794.01 684.537 L1794.57 684.537 L1795.13 684.537 L1795.69 684.537 L1796.25 684.537 L1796.8 684.537 L1797.36 684.537 L1797.92 684.537 L1798.48 684.537 L1799.04 684.537 L1799.6 684.537 L1800.16 684.537 L1800.72 684.537 L1801.28 684.537 L1801.84 684.537 L1802.4 684.537 L1802.96 684.537 L1803.52 684.537 L1804.08 684.537 L1804.63 684.537 L1805.19 684.537 L1805.75 684.537 L1806.31 684.537 L1806.87 684.537 L1807.43 684.537 L1807.99 684.537 L1808.55 684.537 L1809.11 684.537 L1809.67 684.537 L1810.23 684.537 L1810.79 684.537 L1811.35 684.537 L1811.9 684.537 L1812.46 684.537 L1813.02 684.537 L1813.58 684.537 L1814.14 684.537 L1814.7 684.537 L1815.26 684.537 L1815.82 684.537 L1816.38 684.537 L1816.94 684.537 L1817.5 684.537 L1818.06 684.537 L1818.62 684.537 L1819.18 684.537 L1819.73 684.537 L1820.29 684.537 L1820.85 684.537 L1821.41 684.537 L1821.97 684.537 L1822.53 684.537 L1823.09 684.537 L1823.65 684.537 L1824.21 684.537 L1824.77 684.537 L1825.33 684.537 L1825.89 684.537 L1826.45 684.537 L1827 684.537 L1827.56 684.537 L1828.12 684.537 L1828.68 684.537 L1829.24 684.537 L1829.8 684.537 L1830.36 684.537 L1830.92 684.537 L1831.48 684.537 L1832.04 684.537 L1832.6 684.537 L1833.16 684.537 L1833.72 684.537 L1834.27 684.537 L1834.83 684.537 L1835.39 684.537 L1835.95 684.537 L1836.51 684.537 L1837.07 684.537 L1837.63 684.537 L1838.19 684.537 L1838.19 682.869 L1837.63 682.869 L1837.07 682.869 L1836.51 682.869 L1835.95 682.869 L1835.39 682.869 L1834.83 682.869 L1834.27 682.869 L1833.72 682.869 L1833.16 682.869 L1832.6 682.869 L1832.04 682.869 L1831.48 682.869 L1830.92 682.869 L1830.36 682.869 L1829.8 682.869 L1829.24 682.869 L1828.68 682.869 L1828.12 682.869 L1827.56 682.869 L1827 682.869 L1826.45 682.869 L1825.89 682.869 L1825.33 682.869 L1824.77 682.869 L1824.21 682.869 L1823.65 682.869 L1823.09 682.869 L1822.53 682.869 L1821.97 682.869 L1821.41 682.869 L1820.85 682.869 L1820.29 682.869 L1819.73 682.869 L1819.18 682.869 L1818.62 682.869 L1818.06 682.869 L1817.5 682.869 L1816.94 682.869 L1816.38 682.869 L1815.82 682.869 L1815.26 682.869 L1814.7 682.869 L1814.14 682.869 L1813.58 682.869 L1813.02 682.869 L1812.46 682.869 L1811.9 682.869 L1811.35 682.869 L1810.79 682.869 L1810.23 682.869 L1809.67 682.869 L1809.11 682.869 L1808.55 682.869 L1807.99 682.869 L1807.43 682.869 L1806.87 682.869 L1806.31 682.869 L1805.75 682.869 L1805.19 682.869 L1804.63 682.869 L1804.08 682.869 L1803.52 682.869 L1802.96 682.869 L1802.4 682.869 L1801.84 682.869 L1801.28 682.869 L1800.72 682.869 L1800.16 682.869 L1799.6 682.869 L1799.04 682.869 L1798.48 682.869 L1797.92 682.869 L1797.36 682.869 L1796.8 682.869 L1796.25 682.869 L1795.69 682.869 L1795.13 682.869 L1794.57 682.869 L1794.01 682.869 L1793.45 682.869 L1792.89 682.869 L1792.33 682.869 L1791.77 682.869 L1791.21 682.869 L1790.65 682.869 L1790.09 682.869 L1789.53 682.869 L1788.98 682.869 L1788.42 682.869 L1787.86 682.869 L1787.3 682.869 L1786.74 682.869 L1786.18 682.869 L1785.62 682.869 L1785.06 682.869 L1784.5 682.869 L1783.94 682.869 L1783.38 682.869 L1782.82 682.869 L1782.26 682.869 L1781.71 682.869 L1781.15 682.869 L1780.59 682.869 L1780.03 682.869 L1779.47 682.869 L1778.91 682.869 L1778.35 682.869 L1777.79 682.869 L1777.23 682.869 L1776.67 682.869 L1776.11 682.869 L1775.55 682.869 L1774.99 682.869 L1774.43 682.869 L1773.88 682.869 L1773.32 682.869 L1772.76 682.869 L1772.2 682.869 L1771.64 682.869 L1771.08 682.869 L1770.52 682.869 L1769.96 682.869 L1769.4 682.869 L1768.84 682.869 L1768.28 682.869 L1767.72 682.869 L1767.16 682.869 L1766.61 682.869 L1766.05 682.869 L1765.49 682.869 L1764.93 682.869 L1764.37 682.869 L1763.81 682.869 L1763.25 682.869 L1762.69 682.869 L1762.13 682.869 L1761.57 682.869 L1761.01 682.869 L1760.45 682.869 L1759.89 682.869 L1759.34 682.869 L1758.78 682.869 L1758.22 682.869 L1757.66 682.869 L1757.1 682.869 L1756.54 682.869 L1755.98 682.869 L1755.42 682.869 L1754.86 682.869 L1754.3 682.869 L1753.74 682.869 L1753.18 682.869 L1752.62 682.869 L1752.06 682.869 L1751.51 682.869 L1750.95 682.869 L1750.39 682.869 L1749.83 682.869 L1749.27 682.869 L1748.71 682.869 L1748.15 682.869 L1747.59 682.869 L1747.03 682.869 L1746.47 682.869 L1745.91 682.869 L1745.35 682.869 L1744.79 682.869 L1744.24 682.869 L1743.68 682.869 L1743.12 682.869 L1742.56 682.869 L1742 682.869 L1741.44 682.869 L1740.88 682.869 L1740.32 682.869 L1739.76 682.869 L1739.2 682.869 L1738.64 682.869 L1738.08 682.869 L1737.52 682.869 L1736.97 682.869 L1736.41 682.869 L1735.85 682.869 L1735.29 682.869 L1734.73 682.869 L1734.17 682.869 L1733.61 682.869 L1733.05 682.869 L1732.49 682.869 L1731.93 682.869 L1731.37 682.869 L1730.81 682.869 L1730.25 682.869 L1729.69 682.869 L1729.14 682.869 L1728.58 682.869 L1728.02 682.869 L1727.46 682.869 L1726.9 682.869 L1726.34 682.869 L1725.78 682.869 L1725.22 682.869 L1724.66 682.869 L1724.1 682.869 L1723.54 682.869 L1722.98 682.869 L1722.42 682.869 L1721.87 682.869 L1721.31 682.869 L1720.75 682.869 L1720.19 682.869 L1719.63 682.869 L1719.07 682.869 L1718.51 682.869 L1717.95 682.869 L1717.39 682.869 L1716.83 682.869 L1716.27 682.869 L1715.71 682.869 L1715.15 682.869 L1714.6 682.869 L1714.04 682.869 L1713.48 682.869 L1712.92 682.869 L1712.36 682.869 L1711.8 682.869 L1711.24 682.869 L1710.68 682.869 L1710.12 682.869 L1709.56 682.869 L1709 682.869 L1708.44 682.869 L1707.88 682.869 L1707.32 682.869 L1706.77 682.869 L1706.21 682.869 L1705.65 682.869 L1705.09 682.869 L1704.53 682.869 L1703.97 682.869 L1703.41 682.869 L1702.85 682.869 L1702.29 682.869 L1701.73 682.869 L1701.17 682.869 L1700.61 682.869 L1700.05 682.869 L1699.5 682.869 L1698.94 682.869 L1698.38 682.869 L1697.82 682.869 L1697.26 682.869 L1696.7 682.869 L1696.14 682.869 L1695.58 682.869 L1695.02 682.869 L1694.46 682.869 L1693.9 682.869 L1693.34 682.869 L1692.78 682.869 L1692.23 682.869 L1691.67 682.869 L1691.11 682.869 L1690.55 682.869 L1689.99 682.869 L1689.43 682.869 L1688.87 682.869 L1688.31 682.869 L1687.75 682.869 L1687.19 682.869 L1686.63 682.869 L1686.07 682.869 L1685.51 682.869 L1684.95 682.869 L1684.4 682.869 L1683.84 682.869 L1683.28 682.869 L1682.72 682.869 L1682.16 682.869 L1681.6 682.869 L1681.04 682.869 L1680.48 682.869 L1679.92 682.869 L1679.36 682.869 L1678.8 682.869 L1678.24 682.869 L1677.68 682.869 L1677.13 682.869 L1676.57 682.869 L1676.01 682.869 L1675.45 682.869 L1674.89 682.869 L1674.33 682.869 L1673.77 682.869 L1673.21 682.869 L1672.65 682.869 L1672.09 682.869 L1671.53 682.869 L1670.97 682.869 L1670.41 682.869 L1669.85 682.869 L1669.3 682.869 L1668.74 682.869 L1668.18 682.869 L1667.62 682.869 L1667.06 682.869 L1666.5 682.869 L1665.94 682.869 L1665.38 682.869 L1664.82 682.869 L1664.26 682.869 L1663.7 682.869 L1663.14 682.869 L1662.58 682.869 L1662.03 682.869 L1661.47 682.869 L1660.91 682.869 L1660.35 682.869 L1659.79 682.869 L1659.23 682.869 L1658.67 682.869 L1658.11 682.869 L1657.55 682.869 L1656.99 682.869 L1656.43 682.869 L1655.87 682.869 L1655.31 682.869 L1654.76 682.869 L1654.2 682.869 L1653.64 682.869 L1653.08 682.869 L1652.52 682.869 L1651.96 682.869 L1651.4 682.869 L1650.84 682.869 L1650.28 682.869 L1649.72 682.869 L1649.16 682.869 L1648.6 682.869 L1648.04 682.869 L1647.48 682.869 L1646.93 682.869 L1646.37 682.869 L1645.81 682.869 L1645.25 682.869 L1644.69 682.869 L1644.13 682.869 L1643.57 682.869 L1643.01 682.869 L1642.45 682.869 L1641.89 682.869 L1641.33 682.869 L1640.77 682.869 L1640.21 682.869 L1639.66 682.869 L1639.1 682.869 L1638.54 682.869 L1637.98 682.869 L1637.42 682.869 L1636.86 682.869 L1636.3 682.869 L1635.74 682.869 L1635.18 682.869 L1634.62 682.869 L1634.06 682.869 L1633.5 682.869 L1632.94 682.869 L1632.39 682.869 L1631.83 682.869 L1631.27 682.869 L1630.71 682.869 L1630.15 682.869 L1629.59 682.869 L1629.03 682.869 L1628.47 682.869 L1627.91 682.869 L1627.35 682.869 L1626.79 682.869 L1626.23 682.869 L1625.67 682.869 L1625.11 682.869 L1624.56 682.869 L1624 682.869 L1623.44 682.869 L1622.88 682.869 L1622.32 682.869 L1621.76 682.869 L1621.2 682.869 L1620.64 682.869 L1620.08 682.869 L1619.52 682.869 L1618.96 682.869 L1618.4 682.869 L1617.84 682.869 L1617.29 682.869 L1616.73 682.869 L1616.17 682.869 L1615.61 682.869 L1615.05 682.869 L1614.49 682.869 L1613.93 682.869 L1613.37 682.869 L1612.81 682.869 L1612.25 682.869 L1611.69 682.869 L1611.13 682.869 L1610.57 682.869 L1610.02 682.869 L1609.46 682.869 L1608.9 682.869 L1608.34 682.869 L1607.78 682.869 L1607.22 682.869 L1606.66 682.869 L1606.1 682.869 L1605.54 682.869 L1604.98 682.869 L1604.42 682.869 L1603.86 682.869 L1603.3 682.869 L1602.74 682.869 L1602.19 682.869 L1601.63 682.869 L1601.07 682.869 L1600.51 682.869 L1599.95 682.869 L1599.39 682.869 L1598.83 682.869 L1598.27 682.869 L1597.71 682.869 L1597.15 682.869 L1596.59 682.869 L1596.03 682.869 L1595.47 682.869 L1594.92 682.869 L1594.36 682.869 L1593.8 682.869 L1593.24 682.869 L1592.68 682.869 L1592.12 682.869 L1591.56 682.869 L1591 682.869 L1590.44 682.869 L1589.88 682.869 L1589.32 682.869 L1588.76 682.869 L1588.2 682.869 L1587.65 682.869 L1587.09 682.869 L1586.53 682.869 L1585.97 682.869 L1585.41 682.869 L1584.85 682.869 L1584.29 682.869 L1583.73 682.869 L1583.17 682.869 L1582.61 682.869 L1582.05 682.869 L1581.49 682.869 L1580.93 682.869 L1580.37 682.869 L1579.82 682.869 L1579.26 682.869 L1578.7 682.869 L1578.14 682.869 L1577.58 682.869 L1577.02 682.869 L1576.46 682.869 L1575.9 682.869 L1575.34 682.869 L1574.78 682.869 L1574.22 682.869 L1573.66 682.869 L1573.1 682.869 L1572.55 682.869 L1571.99 682.869 L1571.43 682.869 L1570.87 682.869 L1570.31 682.869 L1569.75 682.869 L1569.19 682.869 L1568.63 682.869 L1568.07 682.869 L1567.51 682.869 L1566.95 682.869 L1566.39 682.869 L1565.83 682.869 L1565.28 682.869 L1564.72 682.869 L1564.16 682.869 L1563.6 682.869 L1563.04 682.869 L1562.48 682.869 L1561.92 682.869 L1561.36 682.869 L1560.8 682.869 L1560.24 682.869 L1559.68 682.869 L1559.12 682.869 L1558.56 682.869 L1558 682.869 L1557.45 682.869 L1556.89 682.869 L1556.33 682.869 L1555.77 682.869 L1555.21 682.869 L1554.65 682.869 L1554.09 682.869 L1553.53 682.869 L1552.97 682.869 L1552.41 682.869 L1551.85 682.869 L1551.29 682.869 L1550.73 682.869 L1550.18 682.869 L1549.62 682.869 L1549.06 682.869 L1548.5 682.869 L1547.94 682.869 L1547.38 682.869 L1546.82 682.869 L1546.26 682.869 L1545.7 682.869 L1545.14 682.869 L1544.58 682.869 L1544.02 682.869 L1543.46 682.869 L1542.9 682.869 L1542.35 682.869 L1541.79 682.869 L1541.23 682.869 L1540.67 682.869 L1540.11 682.869 L1539.55 682.869 L1538.99 682.869 L1538.43 682.869 L1537.87 682.869 L1537.31 682.869 L1536.75 682.869 L1536.19 682.869 L1535.63 682.869 L1535.08 682.869 L1534.52 682.869 L1533.96 682.869 L1533.4 682.869 L1532.84 682.869 L1532.28 682.869 L1531.72 682.869 L1531.16 682.869 L1530.6 682.869 L1530.04 682.869 L1529.48 682.869 L1528.92 682.869 L1528.36 682.869 L1527.81 682.869 L1527.25 682.869 L1526.69 682.869 L1526.13 682.869 L1525.57 682.869 L1525.01 682.869 L1524.45 682.869 L1523.89 682.869 L1523.33 682.869 L1522.77 682.869 L1522.21 682.869 L1521.65 682.869 L1521.09 682.869 L1520.53 682.869 L1519.98 682.869 L1519.42 682.869 L1518.86 682.869 L1518.3 682.869 L1517.74 682.869 L1517.18 682.869 L1516.62 682.869 L1516.06 682.869 L1515.5 682.869 L1514.94 682.869 L1514.38 682.869 L1513.82 682.869 L1513.26 682.869 L1512.71 682.869 L1512.15 682.869 L1511.59 682.869 L1511.03 682.869 L1510.47 682.869 L1509.91 682.869 L1509.35 682.869 L1508.79 682.869 L1508.23 682.869 L1507.67 682.869 L1507.11 682.869 L1506.55 682.869 L1505.99 682.869 L1505.44 682.869 L1504.88 682.869 L1504.32 682.869 L1503.76 682.869 L1503.2 682.869 L1502.64 682.869 L1502.08 682.869 L1501.52 682.869 L1500.96 682.869 L1500.4 682.869 L1499.84 682.869 L1499.28 682.869 L1498.72 682.869 L1498.16 682.869 L1497.61 682.869 L1497.05 682.869 L1496.49 682.869 L1495.93 682.869 L1495.37 682.869 L1494.81 682.869 L1494.25 682.869 L1493.69 682.869 L1493.13 682.869 L1492.57 682.869 L1492.01 682.869 L1491.45 682.869 L1490.89 682.869 L1490.34 682.869 L1489.78 682.869 L1489.22 682.869 L1488.66 682.869 L1488.1 682.869 L1487.54 682.869 L1486.98 682.869 L1486.42 682.869 L1485.86 682.869 L1485.3 682.869 L1484.74 682.869 L1484.18 682.869 L1483.62 682.869 L1483.07 682.869 L1482.51 682.869 L1481.95 682.869 L1481.39 682.869 L1480.83 682.869 L1480.27 682.869 L1479.71 682.869 L1479.15 682.869 L1478.59 682.869 L1478.03 682.869 L1477.47 682.869 L1476.91 682.869 L1476.35 682.869 L1475.79 682.869 L1475.24 682.869 L1474.68 682.869 L1474.12 682.869 L1473.56 682.869 L1473 682.869 L1472.44 682.869 L1471.88 682.869 L1471.32 682.869 L1470.76 682.869 L1470.2 682.869 L1469.64 682.869 L1469.08 682.869 L1468.52 682.869 L1467.97 682.869 L1467.41 682.869 L1466.85 682.869 L1466.29 682.869 L1465.73 682.869 L1465.17 682.869 L1464.61 682.869 L1464.05 682.869 L1463.49 682.869 L1462.93 682.869 L1462.37 682.869 L1461.81 682.869 L1461.25 682.869 L1460.7 682.869 L1460.14 682.869 L1459.58 682.869 L1459.02 682.869 L1458.46 682.869 L1457.9 682.869 L1457.34 682.869 L1456.78 682.869 L1456.22 682.869 L1455.66 682.869 L1455.1 682.869 L1454.54 682.869 L1453.98 682.869 L1453.42 682.869 L1452.87 682.869 L1452.31 682.869 L1451.75 682.869 L1451.19 682.869 L1450.63 682.869 L1450.07 682.869 L1449.51 682.869 L1448.95 682.869 L1448.39 682.869 L1447.83 682.869 L1447.27 682.869 L1446.71 682.869 L1446.15 682.869 L1445.6 682.869 L1445.04 682.869 L1444.48 682.869 L1443.92 682.869 L1443.36 682.869 L1442.8 682.869 L1442.24 682.869 L1441.68 682.869 L1441.12 682.869 L1440.56 682.869 L1440 682.869 L1439.44 682.869 L1438.88 682.869 L1438.33 682.869 L1437.77 682.869 L1437.21 682.869 L1436.65 682.869 L1436.09 682.869 L1435.53 682.869 L1434.97 682.869 L1434.41 682.869 L1433.85 682.869 L1433.29 682.869 L1432.73 682.869 L1432.17 682.869 L1431.61 682.869 L1431.05 682.869 L1430.5 682.869 L1429.94 682.869 L1429.38 682.869 L1428.82 682.869 L1428.26 682.869 L1427.7 682.869 L1427.14 682.869 L1426.58 682.869 L1426.02 682.869 L1425.46 682.869 L1424.9 682.869 L1424.34 682.869 L1423.78 682.869 L1423.23 682.869 L1422.67 682.869 L1422.11 682.869 L1421.55 682.869 L1420.99 682.869 L1420.43 682.869 L1419.87 682.869 L1419.31 682.869 L1418.75 682.869 L1418.19 682.869 L1417.63 682.869 L1417.07 682.869 L1416.51 682.869 L1415.95 682.869 L1415.4 682.869 L1414.84 682.869 L1414.28 682.869 L1413.72 682.869 L1413.16 682.869 L1412.6 682.869 L1412.04 682.869 L1411.48 682.869 L1410.92 682.869 L1410.36 682.869 L1409.8 682.869 L1409.24 682.869 L1408.68 682.869 L1408.13 682.869 L1407.57 682.869 L1407.01 682.869 L1406.45 682.869 L1405.89 682.869 L1405.33 682.869 L1404.77 682.869 L1404.21 682.869 L1403.65 682.869 L1403.09 682.869 L1402.53 682.869 L1401.97 682.869 L1401.41 682.869 L1400.86 682.869 L1400.3 682.869 L1399.74 682.869 L1399.18 682.869 L1398.62 682.869 L1398.06 682.869 L1397.5 682.869 L1396.94 682.869 L1396.38 682.869 L1395.82 682.869 L1395.26 682.869 L1394.7 682.869 L1394.14 682.869 L1393.58 682.869 L1393.03 682.869 L1392.47 682.869 L1391.91 682.869 L1391.35 682.869 L1390.79 682.869 L1390.23 682.869 L1389.67 682.869 L1389.11 682.869 L1388.55 682.869 L1387.99 682.869 L1387.43 682.869 L1386.87 682.869 L1386.31 682.869 L1385.76 682.869 L1385.2 682.869 L1384.64 682.869 L1384.08 682.869 L1383.52 682.869 L1382.96 682.869 L1382.4 682.869 L1381.84 682.869 L1381.28 682.869 L1380.72 682.869 L1380.16 682.869 L1379.6 682.869 L1379.04 682.869 L1378.49 682.869 L1377.93 682.869 L1377.37 682.869 L1376.81 682.869 L1376.25 682.869 L1375.69 682.869 L1375.13 682.869 L1374.57 682.869 L1374.01 682.869 L1373.45 682.869 L1372.89 682.869 L1372.33 682.869 L1371.77 682.869 L1371.21 682.869 L1370.66 682.869 L1370.1 682.869 L1369.54 682.869 L1368.98 682.869 L1368.42 682.869 L1367.86 682.869 L1367.3 682.869 L1366.74 682.869 L1366.18 682.869 L1365.62 682.869 L1365.06 682.869 L1364.5 682.869 L1363.94 682.869 L1363.39 682.869 L1362.83 682.869 L1362.27 682.869 L1361.71 682.869 L1361.15 682.869 L1360.59 682.869 L1360.03 682.869 L1359.47 682.869 L1358.91 682.869 L1358.35 682.869 L1357.79 682.869 L1357.23 682.869 L1356.67 682.869 L1356.12 682.869 L1355.56 682.869 L1355 682.869 L1354.44 682.869 L1353.88 682.869 L1353.32 682.869 L1352.76 682.869 L1352.2 682.869 L1351.64 682.869 L1351.08 682.869 L1350.52 682.869 L1349.96 682.869 L1349.4 682.869 L1348.84 682.869 L1348.29 682.869 L1347.73 682.869 L1347.17 682.869 L1346.61 682.869 L1346.05 682.869 L1345.49 682.869 L1344.93 682.869 L1344.37 682.869 L1343.81 682.869 L1343.25 682.869 L1342.69 682.869 L1342.13 682.869 L1341.57 682.869 L1341.02 682.869 L1340.46 682.869 L1339.9 682.869 L1339.34 682.869 L1338.78 682.869 L1338.22 682.869 L1337.66 682.869 L1337.1 682.869 L1336.54 682.869 L1335.98 682.869 L1335.42 682.869 L1334.86 682.869 L1334.3 682.869 L1333.75 682.869 L1333.19 682.869 L1332.63 682.869 L1332.07 682.869 L1331.51 682.869 L1330.95 682.869 L1330.39 682.869 L1329.83 682.869 L1329.27 682.869 L1328.71 682.869 L1328.15 682.869 L1327.59 682.869 L1327.03 682.869 L1326.47 682.869 L1325.92 682.869 L1325.36 682.869 L1324.8 682.869 L1324.24 682.869 L1323.68 682.869 L1323.12 682.869 L1322.56 682.869 L1322 682.869 L1321.44 682.869 L1320.88 682.869 L1320.32 682.869 L1319.76 682.869 L1319.2 682.869 L1318.65 682.869 L1318.09 682.869 L1317.53 682.869 L1316.97 682.869 L1316.41 682.869 L1315.85 682.869 L1315.29 682.869 L1314.73 682.869 L1314.17 682.869 L1313.61 682.869 L1313.05 682.869 L1312.49 682.869 L1311.93 682.869 L1311.38 682.869 L1310.82 682.869 L1310.26 682.869 L1309.7 682.869 L1309.14 682.869 L1308.58 682.869 L1308.02 682.869 L1307.46 682.869 L1306.9 682.869 L1306.34 682.869 L1305.78 682.869 L1305.22 682.869 L1304.66 682.869 L1304.1 682.869 L1303.55 682.869 L1302.99 682.869 L1302.43 682.869 L1301.87 682.869 L1301.31 682.869 L1300.75 682.869 L1300.19 682.869 L1299.63 682.869 L1299.07 682.869 L1298.51 682.869 L1297.95 682.869 L1297.39 682.869 L1296.83 682.869 L1296.28 682.869 L1295.72 682.869 L1295.16 682.869 L1294.6 682.869 L1294.04 682.869 L1293.48 682.869 L1292.92 682.869 L1292.36 682.869 L1291.8 682.869 L1291.24 682.869 L1290.68 682.869 L1290.12 682.869 L1289.56 682.869 L1289 682.869 L1288.45 682.869 L1287.89 682.869 L1287.33 682.869 L1286.77 682.869 L1286.21 682.869 L1285.65 682.869 L1285.09 682.869 L1284.53 682.869 L1283.97 682.869 L1283.41 682.869 L1282.85 682.869 L1282.29 682.869 L1281.73 682.869 L1281.18 682.869 L1280.62 682.869 L1280.06 682.869 L1279.5 682.869 L1278.94 682.869 L1278.38 682.869 L1277.82 682.869 L1277.26 682.869 L1276.7 682.869 L1276.14 682.869 L1275.58 682.869 L1275.02 682.869 L1274.46 682.869 L1273.91 682.869 L1273.35 682.869 L1272.79 682.869 L1272.23 682.869 L1271.67 682.869 L1271.11 682.869 L1270.55 682.869 L1269.99 682.869 L1269.43 682.869 L1268.87 682.869 L1268.31 682.869 L1267.75 682.869 L1267.19 682.869 L1266.63 682.869 L1266.08 682.869 L1265.52 682.869 L1264.96 682.869 L1264.4 682.869 L1263.84 682.869 L1263.28 682.869 L1262.72 682.869 L1262.16 682.869 L1261.6 682.869 L1261.04 682.869 L1260.48 682.869 L1259.92 682.869 L1259.36 682.869 L1258.81 682.869 L1258.25 682.869 L1257.69 682.869 L1257.13 682.869 L1256.57 682.869 L1256.01 682.869 L1255.45 682.869 L1254.89 682.869 L1254.33 682.869 L1253.77 682.869 L1253.21 682.869 L1252.65 682.869 L1252.09 682.869 L1251.54 682.869 L1250.98 682.869 L1250.42 682.869 L1249.86 682.869 L1249.3 682.869 L1248.74 682.869 L1248.18 682.869 L1247.62 682.869 L1247.06 682.869 L1246.5 682.869 L1245.94 682.869 L1245.38 682.869 L1244.82 682.869 L1244.26 682.869 L1243.71 682.869 L1243.15 682.869 L1242.59 682.869 L1242.03 682.869 L1241.47 682.869 L1240.91 682.869 L1240.35 682.869 L1239.79 682.869 L1239.23 682.869 L1238.67 682.869 L1238.11 682.869 L1237.55 682.869 L1236.99 682.869 L1236.44 682.869 L1235.88 682.869 L1235.32 682.869 L1234.76 682.869 L1234.2 682.869 L1233.64 682.869 L1233.08 682.869 L1232.52 682.869 L1231.96 682.869 L1231.4 682.869 L1230.84 682.869 L1230.28 682.869 L1229.72 682.869 L1229.17 682.869 L1228.61 682.869 L1228.05 682.869 L1227.49 682.869 L1226.93 682.869 L1226.37 682.869 L1225.81 682.869 L1225.25 682.869 L1224.69 682.869 L1224.13 682.869 L1223.57 682.869 L1223.01 682.869 L1222.45 682.869 L1221.89 682.869 L1221.34 682.869 L1220.78 682.869 L1220.22 682.869 L1219.66 682.869 L1219.1 682.869 L1218.54 682.869 L1217.98 682.869 L1217.42 682.869 L1216.86 682.869 L1216.3 682.869 L1215.74 682.869 L1215.18 682.869 L1214.62 682.869 L1214.07 682.869 L1213.51 682.869 L1212.95 682.869 L1212.39 682.869 L1211.83 682.869 L1211.27 682.869 L1210.71 682.869 L1210.15 682.869 L1209.59 682.869 L1209.03 682.869 L1208.47 682.869 L1207.91 682.869 L1207.35 682.869 L1206.8 682.869 L1206.24 682.869 L1205.68 682.869 L1205.12 682.869 L1204.56 682.869 L1204 682.869 L1203.44 682.869 L1202.88 682.869 L1202.32 682.869 L1201.76 682.869 L1201.2 682.869 L1200.64 682.869 L1200.08 682.869 L1199.52 682.869 L1198.97 682.869 L1198.41 682.869 L1197.85 682.869 L1197.29 682.869 L1196.73 682.869 L1196.17 682.869 L1195.61 682.869 L1195.05 682.869 L1194.49 682.869 L1193.93 682.869 L1193.37 682.869 L1192.81 682.869 L1192.25 682.869 L1191.7 682.869 L1191.14 682.869 L1190.58 682.869 L1190.02 682.869 L1189.46 682.869 L1188.9 682.869 L1188.34 682.869 L1187.78 682.869 L1187.22 682.869 L1186.66 682.869 L1186.1 682.869 L1185.54 682.869 L1184.98 682.869 L1184.43 682.869 L1183.87 682.869 L1183.31 682.869 L1182.75 682.869 L1182.19 682.869 L1181.63 682.869 L1181.07 682.869 L1180.51 682.869 L1179.95 682.869 L1179.39 682.869 L1178.83 682.869 L1178.27 682.869 L1177.71 682.869 L1177.15 682.869 L1176.6 682.869 L1176.04 682.869 L1175.48 682.869 L1174.92 682.869 L1174.36 682.869 L1173.8 682.869 L1173.24 682.869 L1172.68 682.869 L1172.12 682.869 L1171.56 682.869 L1171 682.869 L1170.44 682.869 L1169.88 682.869 L1169.33 682.869 L1168.77 682.869 L1168.21 682.869 L1167.65 682.869 L1167.09 682.869 L1166.53 682.869 L1165.97 682.869 L1165.41 682.869 L1164.85 682.869 L1164.29 682.869 L1163.73 682.869 L1163.17 682.869 L1162.61 682.869 L1162.05 682.869 L1161.5 682.869 L1160.94 682.869 L1160.38 682.869 L1159.82 682.869 L1159.26 682.869 L1158.7 682.869 L1158.14 682.869 L1157.58 682.869 L1157.02 682.869 L1156.46 682.869 L1155.9 682.869 L1155.34 682.869 L1154.78 682.869 L1154.23 682.869 L1153.67 682.869 L1153.11 682.869 L1152.55 682.869 L1151.99 682.869 L1151.43 682.869 L1150.87 682.869 L1150.31 682.869 L1149.75 682.869 L1149.19 682.869 L1148.63 682.869 L1148.07 682.869 L1147.51 682.869 L1146.96 682.869 L1146.4 682.869 L1145.84 682.869 L1145.28 682.869 L1144.72 682.869 L1144.16 682.869 L1143.6 682.869 L1143.04 682.869 L1142.48 682.869 L1141.92 682.869 L1141.36 682.869 L1140.8 682.869 L1140.24 682.869 L1139.68 682.869 L1139.13 682.869 L1138.57 682.869 L1138.01 682.869 L1137.45 682.869 L1136.89 682.869 L1136.33 682.869 L1135.77 682.869 L1135.21 682.869 L1134.65 682.869 L1134.09 682.869 L1133.53 682.869 L1132.97 682.869 L1132.41 682.869 L1131.86 682.869 L1131.3 682.869 L1130.74 682.869 L1130.18 682.869 L1129.62 682.869 L1129.06 682.869 L1128.5 682.869 L1127.94 682.869 L1127.38 682.869 L1126.82 682.869 L1126.26 682.869 L1125.7 682.869 L1125.14 682.869 L1124.59 682.869 L1124.03 682.869 L1123.47 682.869 L1122.91 682.869 L1122.35 682.869 L1121.79 682.869 L1121.23 682.869 L1120.67 682.869 L1120.11 682.869 L1119.55 682.869 L1118.99 682.869 L1118.43 682.869 L1117.87 682.869 L1117.31 682.869 L1116.76 682.869 L1116.2 682.869 L1115.64 682.869 L1115.08 682.869 L1114.52 682.869 L1113.96 682.869 L1113.4 682.869 L1112.84 682.869 L1112.28 682.869 L1111.72 682.869 L1111.16 682.869 L1110.6 682.869 L1110.04 682.869 L1109.49 682.869 L1108.93 682.869 L1108.37 682.869 L1107.81 682.869 L1107.25 682.869 L1106.69 682.869 L1106.13 682.869 L1105.57 682.869 L1105.01 682.869 L1104.45 682.869 L1103.89 682.869 L1103.33 682.869 L1102.77 682.869 L1102.22 682.869 L1101.66 682.869 L1101.1 682.869 L1100.54 682.869 L1099.98 682.869 L1099.42 682.869 L1098.86 682.869 L1098.3 682.869 L1097.74 682.869 L1097.18 682.869 L1096.62 682.869 L1096.06 682.869 L1095.5 682.869 L1094.94 682.869 L1094.39 682.869 L1093.83 682.869 L1093.27 682.869 L1092.71 682.869 L1092.15 682.869 L1091.59 682.869 L1091.03 682.869 L1090.47 682.869 L1089.91 682.869 L1089.35 682.869 L1088.79 682.869 L1088.23 682.869 L1087.67 682.869 L1087.12 682.869 L1086.56 682.869 L1086 682.869 L1085.44 682.869 L1084.88 682.869 L1084.32 682.869 L1083.76 682.869 L1083.2 682.869 L1082.64 682.869 L1082.08 682.869 L1081.52 682.869 L1080.96 682.869 L1080.4 682.869 L1079.85 682.869 L1079.29 682.869 L1078.73 682.869 L1078.17 682.869 L1077.61 682.869 L1077.05 682.869 L1076.49 682.869 L1075.93 682.869 L1075.37 682.869 L1074.81 682.869 L1074.25 682.869 L1073.69 682.869 L1073.13 682.869 L1072.57 682.869 L1072.02 682.869 L1071.46 682.869 L1070.9 682.869 L1070.34 682.869 L1069.78 682.869 L1069.22 682.869 L1068.66 682.869 L1068.1 682.869 L1067.54 682.869 L1066.98 682.869 L1066.42 682.869 L1065.86 682.869 L1065.3 682.869 L1064.75 682.869 L1064.19 682.869 L1063.63 682.869 L1063.07 682.869 L1062.51 682.869 L1061.95 682.869 L1061.39 682.869 L1060.83 682.869 L1060.27 682.869 L1059.71 682.869 L1059.15 682.869 L1058.59 682.869 L1058.03 682.869 L1057.48 682.869 L1056.92 682.869 L1056.36 682.869 L1055.8 682.869 L1055.24 682.869 L1054.68 682.869 L1054.12 682.869 L1053.56 682.869 L1053 682.869 L1052.44 682.869 L1051.88 682.869 L1051.32 682.869 L1050.76 682.869 L1050.2 682.869 L1049.65 682.869 L1049.09 682.869 L1048.53 682.869 L1047.97 682.869 L1047.41 682.869 L1046.85 682.869 L1046.29 682.869 L1045.73 682.869 L1045.17 682.869 L1044.61 682.869 L1044.05 682.869 L1043.49 682.869 L1042.93 682.869 L1042.38 682.869 L1041.82 682.869 L1041.26 682.869 L1040.7 682.869 L1040.14 682.869 L1039.58 682.869 L1039.02 682.869 L1038.46 682.869 L1037.9 682.869 L1037.34 682.869 L1036.78 682.869 L1036.22 682.869 L1035.66 682.869 L1035.1 682.869 L1034.55 682.869 L1033.99 682.869 L1033.43 682.869 L1032.87 682.869 L1032.31 682.869 L1031.75 682.869 L1031.19 682.869 L1030.63 682.869 L1030.07 682.869 L1029.51 682.869 L1028.95 682.869 L1028.39 682.869 L1027.83 682.869 L1027.28 682.869 L1026.72 682.869 L1026.16 682.869 L1025.6 682.869 L1025.04 682.869 L1024.48 682.869 L1023.92 682.869 L1023.36 682.869 L1022.8 682.869 L1022.24 682.869 L1021.68 682.869 L1021.12 682.869 L1020.56 682.869 L1020.01 682.869 L1019.45 682.869 L1018.89 682.869 L1018.33 682.869 L1017.77 682.869 L1017.21 682.869 L1016.65 682.869 L1016.09 682.869 L1015.53 682.869 L1014.97 682.869 L1014.41 682.869 L1013.85 682.869 L1013.29 682.869 L1012.73 682.869 L1012.18 682.869 L1011.62 682.869 L1011.06 682.869 L1010.5 682.869 L1009.94 682.869 L1009.38 682.869 L1008.82 682.869 L1008.26 682.869 L1007.7 682.869 L1007.14 682.869 L1006.58 682.869 L1006.02 682.869 L1005.46 682.869 L1004.91 682.869 L1004.35 682.869 L1003.79 682.869 L1003.23 682.869 L1002.67 682.869 L1002.11 682.869 L1001.55 682.869 L1000.99 682.869 L1000.43 682.869 L999.872 682.869 L999.313 682.869 L998.754 682.869 L998.194 682.869 L997.635 682.869 L997.076 682.869 L996.517 682.869 L995.957 682.869 L995.398 682.869 L994.839 682.869 L994.28 682.869 L993.72 682.869 L993.161 682.869 L992.602 682.869 L992.043 682.869 L991.483 682.869 L990.924 682.869 L990.365 682.869 L989.806 682.869 L989.246 682.869 L988.687 682.869 L988.128 682.869 L987.569 682.869 L987.009 682.869 L986.45 682.869 L985.891 682.869 L985.332 682.869 L984.772 682.869 L984.213 682.869 L983.654 682.869 L983.095 682.869 L982.535 682.869 L981.976 682.869 L981.417 682.869 L980.858 682.869 L980.298 682.869 L979.739 682.869 L979.18 682.869 L978.621 682.869 L978.061 682.869 L977.502 682.869 L976.943 682.869 L976.384 682.869 L975.824 682.869 L975.265 682.869 L974.706 682.869 L974.147 682.869 L973.587 682.869 L973.028 682.869 L972.469 682.869 L971.91 682.869 L971.35 682.869 L970.791 682.869 L970.232 682.869 L969.673 682.869 L969.113 682.869 L968.554 682.869 L967.995 682.869 L967.436 682.869 L966.876 682.869 L966.317 682.869 L965.758 682.869 L965.199 682.869 L964.639 682.869 L964.08 682.869 L963.521 682.869 L962.962 682.869 L962.402 682.869 L961.843 682.869 L961.284 682.869 L960.725 682.869 L960.165 682.869 L959.606 682.869 L959.047 682.869 L958.488 682.869 L957.928 682.869 L957.369 682.869 L956.81 682.869 L956.251 682.869 L955.691 682.869 L955.132 682.869 L954.573 682.869 L954.014 682.869 L953.454 682.869 L952.895 682.869 L952.336 682.869 L951.777 682.869 L951.217 682.869 L950.658 682.869 L950.099 682.869 L949.54 682.869 L948.98 682.869 L948.421 682.869 L947.862 682.869 L947.303 682.869 L946.743 682.869 L946.184 682.869 L945.625 682.869 L945.066 682.869 L944.506 682.869 L943.947 682.869 L943.388 682.869 L942.829 682.869 L942.269 682.869 L941.71 682.869 L941.151 682.869 L940.592 682.869 L940.032 682.869 L939.473 682.869 L938.914 682.869 L938.355 682.869 L937.795 682.869 L937.236 682.869 L936.677 682.869 L936.118 682.869 L935.558 682.869 L934.999 682.869 L934.44 682.869 L933.881 682.869 L933.321 682.869 L932.762 682.869 L932.203 682.869 L931.644 682.869 L931.084 682.869 L930.525 682.869 L929.966 682.869 L929.406 682.869 L928.847 682.869 L928.288 682.869 L927.729 682.869 L927.169 682.869 L926.61 682.869 L926.051 682.869 L925.492 682.869 L924.932 682.869 L924.373 682.869 L923.814 682.869 L923.255 682.869 L922.695 682.869 L922.136 682.869 L921.577 682.869 L921.018 682.869 L920.458 682.869 L919.899 682.869 L919.34 682.869 L918.781 682.869 L918.221 682.869 L917.662 682.869 L917.103 682.869 L916.544 682.869 L915.984 682.869 L915.425 682.869 L914.866 682.869 L914.307 682.869 L913.747 682.869 L913.188 682.869 L912.629 682.869 L912.07 682.869 L911.51 682.869 L910.951 682.869 L910.392 682.869 L909.833 682.869 L909.273 682.869 L908.714 682.869 L908.155 682.869 L907.596 682.869 L907.036 682.869 L906.477 682.869 L905.918 682.869 L905.359 682.869 L904.799 682.869 L904.24 682.869 L903.681 682.869 L903.122 682.869 L902.562 682.869 L902.003 682.869 L901.444 682.869 L900.885 682.869 L900.325 682.869 L899.766 682.869 L899.207 682.869 L898.648 682.869 L898.088 682.869 L897.529 682.869 L896.97 682.869 L896.411 682.869 L895.851 682.869 L895.292 682.869 L894.733 682.869 L894.174 682.869 L893.614 682.869 L893.055 682.869 L892.496 682.869 L891.937 682.869 L891.377 682.869 L890.818 682.869 L890.259 682.869 L889.7 682.869 L889.14 682.869 L888.581 682.869 L888.022 682.869 L887.463 682.869 L886.903 682.869 L886.344 682.869 L885.785 682.869 L885.226 682.869 L884.666 682.869 L884.107 682.869 L883.548 682.869 L882.989 682.869 L882.429 682.869 L881.87 682.869 L881.311 682.869 L880.752 682.869 L880.192 682.869 L879.633 682.869 L879.074 682.869 L878.515 682.869 L877.955 682.869 L877.396 682.869 L876.837 682.869 L876.278 682.869 L875.718 682.869 L875.159 682.869 L874.6 682.869 L874.041 682.869 L873.481 682.869 L872.922 682.869 L872.363 682.869 L871.804 682.869 L871.244 682.869 L870.685 682.869 L870.126 682.869 L869.567 682.869 L869.007 682.869 L868.448 682.869 L867.889 682.869 L867.33 682.869 L866.77 682.869 L866.211 682.869 L865.652 682.869 L865.093 682.869 L864.533 682.869 L863.974 682.869 L863.415 682.869 L862.856 682.869 L862.296 682.869 L861.737 682.869 L861.178 682.869 L860.619 682.869 L860.059 682.869 L859.5 682.869 L858.941 682.869 L858.382 682.869 L857.822 682.869 L857.263 682.869 L856.704 682.869 L856.145 682.869 L855.585 682.869 L855.026 682.869 L854.467 682.869 L853.908 682.869 L853.348 682.869 L852.789 682.869 L852.23 682.869 L851.671 682.869 L851.111 682.869 L850.552 682.869 L849.993 682.869 L849.434 682.869 L848.874 682.869 L848.315 682.869 L847.756 682.869 L847.197 682.869 L846.637 682.869 L846.078 682.869 L845.519 682.869 L844.96 682.869 L844.4 682.869 L843.841 682.869 L843.282 682.869 L842.723 682.869 L842.163 682.869 L841.604 682.869 L841.045 682.869 L840.486 682.869 L839.926 682.869 L839.367 682.869 L838.808 682.869 L838.249 682.869 L837.689 682.869 L837.13 682.869 L836.571 682.869 L836.012 682.869 L835.452 682.869 L834.893 682.869 L834.334 682.869 L833.775 682.869 L833.215 682.869 L832.656 682.869 L832.097 682.869 L831.538 682.869 L830.978 682.869 L830.419 682.869 L829.86 682.869 L829.301 682.869 L828.741 682.869 L828.182 682.869 L827.623 682.869 L827.064 682.869 L826.504 682.869 L825.945 682.869 L825.386 682.869 L824.827 682.869 L824.267 682.869 L823.708 682.869 L823.149 682.869 L822.59 682.869 L822.03 682.869 L821.471 682.869 L820.912 682.869 L820.353 682.869 L819.793 682.869 L819.234 682.869 L818.675 682.869 L818.116 682.869 L817.556 682.869 L816.997 682.869 L816.438 682.869 L815.879 682.869 L815.319 682.869 L814.76 682.869 L814.201 682.869 L813.642 682.869 L813.082 682.869 L812.523 682.869 L811.964 682.869 L811.405 682.869 L810.845 682.869 L810.286 682.869 L809.727 682.869 L809.168 682.869 L808.608 682.869 L808.049 682.869 L807.49 682.869 L806.931 682.869 L806.371 682.869 L805.812 682.869 L805.253 682.869 L804.693 682.869 L804.134 682.869 L803.575 682.869 L803.016 682.869 L802.456 682.869 L801.897 682.869 L801.338 682.869 L800.779 682.869 L800.219 682.869 L799.66 682.869 L799.101 682.869 L798.542 682.869 L797.982 682.869 L797.423 682.869 L796.864 682.869 L796.305 682.869 L795.745 682.869 L795.186 682.869 L794.627 682.869 L794.068 682.869 L793.508 682.869 L792.949 682.869 L792.39 682.869 L791.831 682.869 L791.271 682.869 L790.712 682.869 L790.153 682.869 L789.594 682.869 L789.034 682.869 L788.475 682.869 L787.916 682.869 L787.357 682.869 L786.797 682.869 L786.238 682.869 L785.679 682.869 L785.12 682.869 L784.56 682.869 L784.001 682.869 L783.442 682.869 L782.883 682.869 L782.323 682.869 L781.764 682.869 L781.205 682.869 L780.646 682.869 L780.086 682.869 L779.527 682.869 L778.968 682.869 L778.409 682.869 L777.849 682.869 L777.29 682.869 L776.731 682.869 L776.172 682.869 L775.612 682.869 L775.053 682.869 L774.494 682.869 L773.935 682.869 L773.375 682.869 L772.816 682.869 L772.257 682.869 L771.698 682.869 L771.138 682.869 L770.579 682.869 L770.02 682.869 L769.461 682.869 L768.901 682.869 L768.342 682.869 L767.783 682.869 L767.224 682.869 L766.664 682.869 L766.105 682.869 L765.546 682.869 L764.987 682.869 L764.427 682.869 L763.868 682.869 L763.309 682.869 L762.75 682.869 L762.19 682.869 L761.631 682.869 L761.072 682.869 L760.513 682.869 L759.953 682.869 L759.394 682.869 L758.835 682.869 L758.276 682.869 L757.716 682.869 L757.157 682.869 L756.598 682.869 L756.039 682.869 L755.479 682.869 L754.92 682.869 L754.361 682.869 L753.802 682.869 L753.242 682.869 L752.683 682.869 L752.124 682.869 L751.565 682.869 L751.005 682.869 L750.446 682.869 L749.887 682.869 L749.328 682.869 L748.768 682.869 L748.209 682.869 L747.65 682.869 L747.091 682.869 L746.531 682.869 L745.972 682.869 L745.413 682.869 L744.854 682.869 L744.294 682.869 L743.735 682.869 L743.176 682.869 L742.617 682.869 L742.057 682.869 L741.498 682.869 L740.939 682.869 L740.38 682.869 L739.82 682.869 L739.261 682.869 L738.702 682.869 L738.143 682.869 L737.583 682.869 L737.024 682.869 L736.465 682.869 L735.906 682.869 L735.346 682.869 L734.787 682.869 L734.228 682.869 L733.669 682.869 L733.109 682.869 L732.55 682.869 L731.991 682.869 L731.432 682.869 L730.872 682.869 L730.313 682.869 L729.754 682.869 L729.195 682.869 L728.635 682.869 L728.076 682.869 L727.517 682.869 L726.958 682.869 L726.398 682.869 L725.839 682.869 L725.28 682.869 L724.721 682.869 L724.161 682.869 L723.602 682.869 L723.043 682.869 L722.484 682.869 L721.924 682.869 L721.365 682.869 L720.806 682.869 L720.247 682.869  Z\" fill=\"#3da44d\" fill-rule=\"evenodd\" fill-opacity=\"0.5\"/>\n<polyline clip-path=\"url(#clip023)\" style=\"stroke:#3da44d; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"720.247,683.703 720.806,683.703 721.365,683.703 721.924,683.703 722.484,683.703 723.043,683.703 723.602,683.703 724.161,683.703 724.721,683.703 725.28,683.703 725.839,683.703 726.398,683.703 726.958,683.703 727.517,683.703 728.076,683.703 728.635,683.703 729.195,683.703 729.754,683.703 730.313,683.703 730.872,683.703 731.432,683.703 731.991,683.703 732.55,683.703 733.109,683.703 733.669,683.703 734.228,683.703 734.787,683.703 735.346,683.703 735.906,683.703 736.465,683.703 737.024,683.703 737.583,683.703 738.143,683.703 738.702,683.703 739.261,683.703 739.82,683.703 740.38,683.703 740.939,683.703 741.498,683.703 742.057,683.703 742.617,683.703 743.176,683.703 743.735,683.703 744.294,683.703 744.854,683.703 745.413,683.703 745.972,683.703 746.531,683.703 747.091,683.703 747.65,683.703 748.209,683.703 748.768,683.703 749.328,683.703 749.887,683.703 750.446,683.703 751.005,683.703 751.565,683.703 752.124,683.703 752.683,683.703 753.242,683.703 753.802,683.703 754.361,683.703 754.92,683.703 755.479,683.703 756.039,683.703 756.598,683.703 757.157,683.703 757.716,683.703 758.276,683.703 758.835,683.703 759.394,683.703 759.953,683.703 760.513,683.703 761.072,683.703 761.631,683.703 762.19,683.703 762.75,683.703 763.309,683.703 763.868,683.703 764.427,683.703 764.987,683.703 765.546,683.703 766.105,683.703 766.664,683.703 767.224,683.703 767.783,683.703 768.342,683.703 768.901,683.703 769.461,683.703 770.02,683.703 770.579,683.703 771.138,683.703 771.698,683.703 772.257,683.703 772.816,683.703 773.375,683.703 773.935,683.703 774.494,683.703 775.053,683.703 775.612,683.703 776.172,683.703 776.731,683.703 777.29,683.703 777.849,683.703 778.409,683.703 778.968,683.703 779.527,683.703 780.086,683.703 780.646,683.703 781.205,683.703 781.764,683.703 782.323,683.703 782.883,683.703 783.442,683.703 784.001,683.703 784.56,683.703 785.12,683.703 785.679,683.703 786.238,683.703 786.797,683.703 787.357,683.703 787.916,683.703 788.475,683.703 789.034,683.703 789.594,683.703 790.153,683.703 790.712,683.703 791.271,683.703 791.831,683.703 792.39,683.703 792.949,683.703 793.508,683.703 794.068,683.703 794.627,683.703 795.186,683.703 795.745,683.703 796.305,683.703 796.864,683.703 797.423,683.703 797.982,683.703 798.542,683.703 799.101,683.703 799.66,683.703 800.219,683.703 800.779,683.703 801.338,683.703 801.897,683.703 802.456,683.703 803.016,683.703 803.575,683.703 804.134,683.703 804.693,683.703 805.253,683.703 805.812,683.703 806.371,683.703 806.931,683.703 807.49,683.703 808.049,683.703 808.608,683.703 809.168,683.703 809.727,683.703 810.286,683.703 810.845,683.703 811.405,683.703 811.964,683.703 812.523,683.703 813.082,683.703 813.642,683.703 814.201,683.703 814.76,683.703 815.319,683.703 815.879,683.703 816.438,683.703 816.997,683.703 817.556,683.703 818.116,683.703 818.675,683.703 819.234,683.703 819.793,683.703 820.353,683.703 820.912,683.703 821.471,683.703 822.03,683.703 822.59,683.703 823.149,683.703 823.708,683.703 824.267,683.703 824.827,683.703 825.386,683.703 825.945,683.703 826.504,683.703 827.064,683.703 827.623,683.703 828.182,683.703 828.741,683.703 829.301,683.703 829.86,683.703 830.419,683.703 830.978,683.703 831.538,683.703 832.097,683.703 832.656,683.703 833.215,683.703 833.775,683.703 834.334,683.703 834.893,683.703 835.452,683.703 836.012,683.703 836.571,683.703 837.13,683.703 837.689,683.703 838.249,683.703 838.808,683.703 839.367,683.703 839.926,683.703 840.486,683.703 841.045,683.703 841.604,683.703 842.163,683.703 842.723,683.703 843.282,683.703 843.841,683.703 844.4,683.703 844.96,683.703 845.519,683.703 846.078,683.703 846.637,683.703 847.197,683.703 847.756,683.703 848.315,683.703 848.874,683.703 849.434,683.703 849.993,683.703 850.552,683.703 851.111,683.703 851.671,683.703 852.23,683.703 852.789,683.703 853.348,683.703 853.908,683.703 854.467,683.703 855.026,683.703 855.585,683.703 856.145,683.703 856.704,683.703 857.263,683.703 857.822,683.703 858.382,683.703 858.941,683.703 859.5,683.703 860.059,683.703 860.619,683.703 861.178,683.703 861.737,683.703 862.296,683.703 862.856,683.703 863.415,683.703 863.974,683.703 864.533,683.703 865.093,683.703 865.652,683.703 866.211,683.703 866.77,683.703 867.33,683.703 867.889,683.703 868.448,683.703 869.007,683.703 869.567,683.703 870.126,683.703 870.685,683.703 871.244,683.703 871.804,683.703 872.363,683.703 872.922,683.703 873.481,683.703 874.041,683.703 874.6,683.703 875.159,683.703 875.718,683.703 876.278,683.703 876.837,683.703 877.396,683.703 877.955,683.703 878.515,683.703 879.074,683.703 879.633,683.703 880.192,683.703 880.752,683.703 881.311,683.703 881.87,683.703 882.429,683.703 882.989,683.703 883.548,683.703 884.107,683.703 884.666,683.703 885.226,683.703 885.785,683.703 886.344,683.703 886.903,683.703 887.463,683.703 888.022,683.703 888.581,683.703 889.14,683.703 889.7,683.703 890.259,683.703 890.818,683.703 891.377,683.703 891.937,683.703 892.496,683.703 893.055,683.703 893.614,683.703 894.174,683.703 894.733,683.703 895.292,683.703 895.851,683.703 896.411,683.703 896.97,683.703 897.529,683.703 898.088,683.703 898.648,683.703 899.207,683.703 899.766,683.703 900.325,683.703 900.885,683.703 901.444,683.703 902.003,683.703 902.562,683.703 903.122,683.703 903.681,683.703 904.24,683.703 904.799,683.703 905.359,683.703 905.918,683.703 906.477,683.703 907.036,683.703 907.596,683.703 908.155,683.703 908.714,683.703 909.273,683.703 909.833,683.703 910.392,683.703 910.951,683.703 911.51,683.703 912.07,683.703 912.629,683.703 913.188,683.703 913.747,683.703 914.307,683.703 914.866,683.703 915.425,683.703 915.984,683.703 916.544,683.703 917.103,683.703 917.662,683.703 918.221,683.703 918.781,683.703 919.34,683.703 919.899,683.703 920.458,683.703 921.018,683.703 921.577,683.703 922.136,683.703 922.695,683.703 923.255,683.703 923.814,683.703 924.373,683.703 924.932,683.703 925.492,683.703 926.051,683.703 926.61,683.703 927.169,683.703 927.729,683.703 928.288,683.703 928.847,683.703 929.406,683.703 929.966,683.703 930.525,683.703 931.084,683.703 931.644,683.703 932.203,683.703 932.762,683.703 933.321,683.703 933.881,683.703 934.44,683.703 934.999,683.703 935.558,683.703 936.118,683.703 936.677,683.703 937.236,683.703 937.795,683.703 938.355,683.703 938.914,683.703 939.473,683.703 940.032,683.703 940.592,683.703 941.151,683.703 941.71,683.703 942.269,683.703 942.829,683.703 943.388,683.703 943.947,683.703 944.506,683.703 945.066,683.703 945.625,683.703 946.184,683.703 946.743,683.703 947.303,683.703 947.862,683.703 948.421,683.703 948.98,683.703 949.54,683.703 950.099,683.703 950.658,683.703 951.217,683.703 951.777,683.703 952.336,683.703 952.895,683.703 953.454,683.703 954.014,683.703 954.573,683.703 955.132,683.703 955.691,683.703 956.251,683.703 956.81,683.703 957.369,683.703 957.928,683.703 958.488,683.703 959.047,683.703 959.606,683.703 960.165,683.703 960.725,683.703 961.284,683.703 961.843,683.703 962.402,683.703 962.962,683.703 963.521,683.703 964.08,683.703 964.639,683.703 965.199,683.703 965.758,683.703 966.317,683.703 966.876,683.703 967.436,683.703 967.995,683.703 968.554,683.703 969.113,683.703 969.673,683.703 970.232,683.703 970.791,683.703 971.35,683.703 971.91,683.703 972.469,683.703 973.028,683.703 973.587,683.703 974.147,683.703 974.706,683.703 975.265,683.703 975.824,683.703 976.384,683.703 976.943,683.703 977.502,683.703 978.061,683.703 978.621,683.703 979.18,683.703 979.739,683.703 980.298,683.703 980.858,683.703 981.417,683.703 981.976,683.703 982.535,683.703 983.095,683.703 983.654,683.703 984.213,683.703 984.772,683.703 985.332,683.703 985.891,683.703 986.45,683.703 987.009,683.703 987.569,683.703 988.128,683.703 988.687,683.703 989.246,683.703 989.806,683.703 990.365,683.703 990.924,683.703 991.483,683.703 992.043,683.703 992.602,683.703 993.161,683.703 993.72,683.703 994.28,683.703 994.839,683.703 995.398,683.703 995.957,683.703 996.517,683.703 997.076,683.703 997.635,683.703 998.194,683.703 998.754,683.703 999.313,683.703 999.872,683.703 1000.43,683.703 1000.99,683.703 1001.55,683.703 1002.11,683.703 1002.67,683.703 1003.23,683.703 1003.79,683.703 1004.35,683.703 1004.91,683.703 1005.46,683.703 1006.02,683.703 1006.58,683.703 1007.14,683.703 1007.7,683.703 1008.26,683.703 1008.82,683.703 1009.38,683.703 1009.94,683.703 1010.5,683.703 1011.06,683.703 1011.62,683.703 1012.18,683.703 1012.73,683.703 1013.29,683.703 1013.85,683.703 1014.41,683.703 1014.97,683.703 1015.53,683.703 1016.09,683.703 1016.65,683.703 1017.21,683.703 1017.77,683.703 1018.33,683.703 1018.89,683.703 1019.45,683.703 1020.01,683.703 1020.56,683.703 1021.12,683.703 1021.68,683.703 1022.24,683.703 1022.8,683.703 1023.36,683.703 1023.92,683.703 1024.48,683.703 1025.04,683.703 1025.6,683.703 1026.16,683.703 1026.72,683.703 1027.28,683.703 1027.83,683.703 1028.39,683.703 1028.95,683.703 1029.51,683.703 1030.07,683.703 1030.63,683.703 1031.19,683.703 1031.75,683.703 1032.31,683.703 1032.87,683.703 1033.43,683.703 1033.99,683.703 1034.55,683.703 1035.1,683.703 1035.66,683.703 1036.22,683.703 1036.78,683.703 1037.34,683.703 1037.9,683.703 1038.46,683.703 1039.02,683.703 1039.58,683.703 1040.14,683.703 1040.7,683.703 1041.26,683.703 1041.82,683.703 1042.38,683.703 1042.93,683.703 1043.49,683.703 1044.05,683.703 1044.61,683.703 1045.17,683.703 1045.73,683.703 1046.29,683.703 1046.85,683.703 1047.41,683.703 1047.97,683.703 1048.53,683.703 1049.09,683.703 1049.65,683.703 1050.2,683.703 1050.76,683.703 1051.32,683.703 1051.88,683.703 1052.44,683.703 1053,683.703 1053.56,683.703 1054.12,683.703 1054.68,683.703 1055.24,683.703 1055.8,683.703 1056.36,683.703 1056.92,683.703 1057.48,683.703 1058.03,683.703 1058.59,683.703 1059.15,683.703 1059.71,683.703 1060.27,683.703 1060.83,683.703 1061.39,683.703 1061.95,683.703 1062.51,683.703 1063.07,683.703 1063.63,683.703 1064.19,683.703 1064.75,683.703 1065.3,683.703 1065.86,683.703 1066.42,683.703 1066.98,683.703 1067.54,683.703 1068.1,683.703 1068.66,683.703 1069.22,683.703 1069.78,683.703 1070.34,683.703 1070.9,683.703 1071.46,683.703 1072.02,683.703 1072.57,683.703 1073.13,683.703 1073.69,683.703 1074.25,683.703 1074.81,683.703 1075.37,683.703 1075.93,683.703 1076.49,683.703 1077.05,683.703 1077.61,683.703 1078.17,683.703 1078.73,683.703 1079.29,683.703 1079.85,683.703 1080.4,683.703 1080.96,683.703 1081.52,683.703 1082.08,683.703 1082.64,683.703 1083.2,683.703 1083.76,683.703 1084.32,683.703 1084.88,683.703 1085.44,683.703 1086,683.703 1086.56,683.703 1087.12,683.703 1087.67,683.703 1088.23,683.703 1088.79,683.703 1089.35,683.703 1089.91,683.703 1090.47,683.703 1091.03,683.703 1091.59,683.703 1092.15,683.703 1092.71,683.703 1093.27,683.703 1093.83,683.703 1094.39,683.703 1094.94,683.703 1095.5,683.703 1096.06,683.703 1096.62,683.703 1097.18,683.703 1097.74,683.703 1098.3,683.703 1098.86,683.703 1099.42,683.703 1099.98,683.703 1100.54,683.703 1101.1,683.703 1101.66,683.703 1102.22,683.703 1102.77,683.703 1103.33,683.703 1103.89,683.703 1104.45,683.703 1105.01,683.703 1105.57,683.703 1106.13,683.703 1106.69,683.703 1107.25,683.703 1107.81,683.703 1108.37,683.703 1108.93,683.703 1109.49,683.703 1110.04,683.703 1110.6,683.703 1111.16,683.703 1111.72,683.703 1112.28,683.703 1112.84,683.703 1113.4,683.703 1113.96,683.703 1114.52,683.703 1115.08,683.703 1115.64,683.703 1116.2,683.703 1116.76,683.703 1117.31,683.703 1117.87,683.703 1118.43,683.703 1118.99,683.703 1119.55,683.703 1120.11,683.703 1120.67,683.703 1121.23,683.703 1121.79,683.703 1122.35,683.703 1122.91,683.703 1123.47,683.703 1124.03,683.703 1124.59,683.703 1125.14,683.703 1125.7,683.703 1126.26,683.703 1126.82,683.703 1127.38,683.703 1127.94,683.703 1128.5,683.703 1129.06,683.703 1129.62,683.703 1130.18,683.703 1130.74,683.703 1131.3,683.703 1131.86,683.703 1132.41,683.703 1132.97,683.703 1133.53,683.703 1134.09,683.703 1134.65,683.703 1135.21,683.703 1135.77,683.703 1136.33,683.703 1136.89,683.703 1137.45,683.703 1138.01,683.703 1138.57,683.703 1139.13,683.703 1139.68,683.703 1140.24,683.703 1140.8,683.703 1141.36,683.703 1141.92,683.703 1142.48,683.703 1143.04,683.703 1143.6,683.703 1144.16,683.703 1144.72,683.703 1145.28,683.703 1145.84,683.703 1146.4,683.703 1146.96,683.703 1147.51,683.703 1148.07,683.703 1148.63,683.703 1149.19,683.703 1149.75,683.703 1150.31,683.703 1150.87,683.703 1151.43,683.703 1151.99,683.703 1152.55,683.703 1153.11,683.703 1153.67,683.703 1154.23,683.703 1154.78,683.703 1155.34,683.703 1155.9,683.703 1156.46,683.703 1157.02,683.703 1157.58,683.703 1158.14,683.703 1158.7,683.703 1159.26,683.703 1159.82,683.703 1160.38,683.703 1160.94,683.703 1161.5,683.703 1162.05,683.703 1162.61,683.703 1163.17,683.703 1163.73,683.703 1164.29,683.703 1164.85,683.703 1165.41,683.703 1165.97,683.703 1166.53,683.703 1167.09,683.703 1167.65,683.703 1168.21,683.703 1168.77,683.703 1169.33,683.703 1169.88,683.703 1170.44,683.703 1171,683.703 1171.56,683.703 1172.12,683.703 1172.68,683.703 1173.24,683.703 1173.8,683.703 1174.36,683.703 1174.92,683.703 1175.48,683.703 1176.04,683.703 1176.6,683.703 1177.15,683.703 1177.71,683.703 1178.27,683.703 1178.83,683.703 1179.39,683.703 1179.95,683.703 1180.51,683.703 1181.07,683.703 1181.63,683.703 1182.19,683.703 1182.75,683.703 1183.31,683.703 1183.87,683.703 1184.43,683.703 1184.98,683.703 1185.54,683.703 1186.1,683.703 1186.66,683.703 1187.22,683.703 1187.78,683.703 1188.34,683.703 1188.9,683.703 1189.46,683.703 1190.02,683.703 1190.58,683.703 1191.14,683.703 1191.7,683.703 1192.25,683.703 1192.81,683.703 1193.37,683.703 1193.93,683.703 1194.49,683.703 1195.05,683.703 1195.61,683.703 1196.17,683.703 1196.73,683.703 1197.29,683.703 1197.85,683.703 1198.41,683.703 1198.97,683.703 1199.52,683.703 1200.08,683.703 1200.64,683.703 1201.2,683.703 1201.76,683.703 1202.32,683.703 1202.88,683.703 1203.44,683.703 1204,683.703 1204.56,683.703 1205.12,683.703 1205.68,683.703 1206.24,683.703 1206.8,683.703 1207.35,683.703 1207.91,683.703 1208.47,683.703 1209.03,683.703 1209.59,683.703 1210.15,683.703 1210.71,683.703 1211.27,683.703 1211.83,683.703 1212.39,683.703 1212.95,683.703 1213.51,683.703 1214.07,683.703 1214.62,683.703 1215.18,683.703 1215.74,683.703 1216.3,683.703 1216.86,683.703 1217.42,683.703 1217.98,683.703 1218.54,683.703 1219.1,683.703 1219.66,683.703 1220.22,683.703 1220.78,683.703 1221.34,683.703 1221.89,683.703 1222.45,683.703 1223.01,683.703 1223.57,683.703 1224.13,683.703 1224.69,683.703 1225.25,683.703 1225.81,683.703 1226.37,683.703 1226.93,683.703 1227.49,683.703 1228.05,683.703 1228.61,683.703 1229.17,683.703 1229.72,683.703 1230.28,683.703 1230.84,683.703 1231.4,683.703 1231.96,683.703 1232.52,683.703 1233.08,683.703 1233.64,683.703 1234.2,683.703 1234.76,683.703 1235.32,683.703 1235.88,683.703 1236.44,683.703 1236.99,683.703 1237.55,683.703 1238.11,683.703 1238.67,683.703 1239.23,683.703 1239.79,683.703 1240.35,683.703 1240.91,683.703 1241.47,683.703 1242.03,683.703 1242.59,683.703 1243.15,683.703 1243.71,683.703 1244.26,683.703 1244.82,683.703 1245.38,683.703 1245.94,683.703 1246.5,683.703 1247.06,683.703 1247.62,683.703 1248.18,683.703 1248.74,683.703 1249.3,683.703 1249.86,683.703 1250.42,683.703 1250.98,683.703 1251.54,683.703 1252.09,683.703 1252.65,683.703 1253.21,683.703 1253.77,683.703 1254.33,683.703 1254.89,683.703 1255.45,683.703 1256.01,683.703 1256.57,683.703 1257.13,683.703 1257.69,683.703 1258.25,683.703 1258.81,683.703 1259.36,683.703 1259.92,683.703 1260.48,683.703 1261.04,683.703 1261.6,683.703 1262.16,683.703 1262.72,683.703 1263.28,683.703 1263.84,683.703 1264.4,683.703 1264.96,683.703 1265.52,683.703 1266.08,683.703 1266.63,683.703 1267.19,683.703 1267.75,683.703 1268.31,683.703 1268.87,683.703 1269.43,683.703 1269.99,683.703 1270.55,683.703 1271.11,683.703 1271.67,683.703 1272.23,683.703 1272.79,683.703 1273.35,683.703 1273.91,683.703 1274.46,683.703 1275.02,683.703 1275.58,683.703 1276.14,683.703 1276.7,683.703 1277.26,683.703 1277.82,683.703 1278.38,683.703 1278.94,683.703 1279.5,683.703 1280.06,683.703 1280.62,683.703 1281.18,683.703 1281.73,683.703 1282.29,683.703 1282.85,683.703 1283.41,683.703 1283.97,683.703 1284.53,683.703 1285.09,683.703 1285.65,683.703 1286.21,683.703 1286.77,683.703 1287.33,683.703 1287.89,683.703 1288.45,683.703 1289,683.703 1289.56,683.703 1290.12,683.703 1290.68,683.703 1291.24,683.703 1291.8,683.703 1292.36,683.703 1292.92,683.703 1293.48,683.703 1294.04,683.703 1294.6,683.703 1295.16,683.703 1295.72,683.703 1296.28,683.703 1296.83,683.703 1297.39,683.703 1297.95,683.703 1298.51,683.703 1299.07,683.703 1299.63,683.703 1300.19,683.703 1300.75,683.703 1301.31,683.703 1301.87,683.703 1302.43,683.703 1302.99,683.703 1303.55,683.703 1304.1,683.703 1304.66,683.703 1305.22,683.703 1305.78,683.703 1306.34,683.703 1306.9,683.703 1307.46,683.703 1308.02,683.703 1308.58,683.703 1309.14,683.703 1309.7,683.703 1310.26,683.703 1310.82,683.703 1311.38,683.703 1311.93,683.703 1312.49,683.703 1313.05,683.703 1313.61,683.703 1314.17,683.703 1314.73,683.703 1315.29,683.703 1315.85,683.703 1316.41,683.703 1316.97,683.703 1317.53,683.703 1318.09,683.703 1318.65,683.703 1319.2,683.703 1319.76,683.703 1320.32,683.703 1320.88,683.703 1321.44,683.703 1322,683.703 1322.56,683.703 1323.12,683.703 1323.68,683.703 1324.24,683.703 1324.8,683.703 1325.36,683.703 1325.92,683.703 1326.47,683.703 1327.03,683.703 1327.59,683.703 1328.15,683.703 1328.71,683.703 1329.27,683.703 1329.83,683.703 1330.39,683.703 1330.95,683.703 1331.51,683.703 1332.07,683.703 1332.63,683.703 1333.19,683.703 1333.75,683.703 1334.3,683.703 1334.86,683.703 1335.42,683.703 1335.98,683.703 1336.54,683.703 1337.1,683.703 1337.66,683.703 1338.22,683.703 1338.78,683.703 1339.34,683.703 1339.9,683.703 1340.46,683.703 1341.02,683.703 1341.57,683.703 1342.13,683.703 1342.69,683.703 1343.25,683.703 1343.81,683.703 1344.37,683.703 1344.93,683.703 1345.49,683.703 1346.05,683.703 1346.61,683.703 1347.17,683.703 1347.73,683.703 1348.29,683.703 1348.84,683.703 1349.4,683.703 1349.96,683.703 1350.52,683.703 1351.08,683.703 1351.64,683.703 1352.2,683.703 1352.76,683.703 1353.32,683.703 1353.88,683.703 1354.44,683.703 1355,683.703 1355.56,683.703 1356.12,683.703 1356.67,683.703 1357.23,683.703 1357.79,683.703 1358.35,683.703 1358.91,683.703 1359.47,683.703 1360.03,683.703 1360.59,683.703 1361.15,683.703 1361.71,683.703 1362.27,683.703 1362.83,683.703 1363.39,683.703 1363.94,683.703 1364.5,683.703 1365.06,683.703 1365.62,683.703 1366.18,683.703 1366.74,683.703 1367.3,683.703 1367.86,683.703 1368.42,683.703 1368.98,683.703 1369.54,683.703 1370.1,683.703 1370.66,683.703 1371.21,683.703 1371.77,683.703 1372.33,683.703 1372.89,683.703 1373.45,683.703 1374.01,683.703 1374.57,683.703 1375.13,683.703 1375.69,683.703 1376.25,683.703 1376.81,683.703 1377.37,683.703 1377.93,683.703 1378.49,683.703 1379.04,683.703 1379.6,683.703 1380.16,683.703 1380.72,683.703 1381.28,683.703 1381.84,683.703 1382.4,683.703 1382.96,683.703 1383.52,683.703 1384.08,683.703 1384.64,683.703 1385.2,683.703 1385.76,683.703 1386.31,683.703 1386.87,683.703 1387.43,683.703 1387.99,683.703 1388.55,683.703 1389.11,683.703 1389.67,683.703 1390.23,683.703 1390.79,683.703 1391.35,683.703 1391.91,683.703 1392.47,683.703 1393.03,683.703 1393.58,683.703 1394.14,683.703 1394.7,683.703 1395.26,683.703 1395.82,683.703 1396.38,683.703 1396.94,683.703 1397.5,683.703 1398.06,683.703 1398.62,683.703 1399.18,683.703 1399.74,683.703 1400.3,683.703 1400.86,683.703 1401.41,683.703 1401.97,683.703 1402.53,683.703 1403.09,683.703 1403.65,683.703 1404.21,683.703 1404.77,683.703 1405.33,683.703 1405.89,683.703 1406.45,683.703 1407.01,683.703 1407.57,683.703 1408.13,683.703 1408.68,683.703 1409.24,683.703 1409.8,683.703 1410.36,683.703 1410.92,683.703 1411.48,683.703 1412.04,683.703 1412.6,683.703 1413.16,683.703 1413.72,683.703 1414.28,683.703 1414.84,683.703 1415.4,683.703 1415.95,683.703 1416.51,683.703 1417.07,683.703 1417.63,683.703 1418.19,683.703 1418.75,683.703 1419.31,683.703 1419.87,683.703 1420.43,683.703 1420.99,683.703 1421.55,683.703 1422.11,683.703 1422.67,683.703 1423.23,683.703 1423.78,683.703 1424.34,683.703 1424.9,683.703 1425.46,683.703 1426.02,683.703 1426.58,683.703 1427.14,683.703 1427.7,683.703 1428.26,683.703 1428.82,683.703 1429.38,683.703 1429.94,683.703 1430.5,683.703 1431.05,683.703 1431.61,683.703 1432.17,683.703 1432.73,683.703 1433.29,683.703 1433.85,683.703 1434.41,683.703 1434.97,683.703 1435.53,683.703 1436.09,683.703 1436.65,683.703 1437.21,683.703 1437.77,683.703 1438.33,683.703 1438.88,683.703 1439.44,683.703 1440,683.703 1440.56,683.703 1441.12,683.703 1441.68,683.703 1442.24,683.703 1442.8,683.703 1443.36,683.703 1443.92,683.703 1444.48,683.703 1445.04,683.703 1445.6,683.703 1446.15,683.703 1446.71,683.703 1447.27,683.703 1447.83,683.703 1448.39,683.703 1448.95,683.703 1449.51,683.703 1450.07,683.703 1450.63,683.703 1451.19,683.703 1451.75,683.703 1452.31,683.703 1452.87,683.703 1453.42,683.703 1453.98,683.703 1454.54,683.703 1455.1,683.703 1455.66,683.703 1456.22,683.703 1456.78,683.703 1457.34,683.703 1457.9,683.703 1458.46,683.703 1459.02,683.703 1459.58,683.703 1460.14,683.703 1460.7,683.703 1461.25,683.703 1461.81,683.703 1462.37,683.703 1462.93,683.703 1463.49,683.703 1464.05,683.703 1464.61,683.703 1465.17,683.703 1465.73,683.703 1466.29,683.703 1466.85,683.703 1467.41,683.703 1467.97,683.703 1468.52,683.703 1469.08,683.703 1469.64,683.703 1470.2,683.703 1470.76,683.703 1471.32,683.703 1471.88,683.703 1472.44,683.703 1473,683.703 1473.56,683.703 1474.12,683.703 1474.68,683.703 1475.24,683.703 1475.79,683.703 1476.35,683.703 1476.91,683.703 1477.47,683.703 1478.03,683.703 1478.59,683.703 1479.15,683.703 1479.71,683.703 1480.27,683.703 1480.83,683.703 1481.39,683.703 1481.95,683.703 1482.51,683.703 1483.07,683.703 1483.62,683.703 1484.18,683.703 1484.74,683.703 1485.3,683.703 1485.86,683.703 1486.42,683.703 1486.98,683.703 1487.54,683.703 1488.1,683.703 1488.66,683.703 1489.22,683.703 1489.78,683.703 1490.34,683.703 1490.89,683.703 1491.45,683.703 1492.01,683.703 1492.57,683.703 1493.13,683.703 1493.69,683.703 1494.25,683.703 1494.81,683.703 1495.37,683.703 1495.93,683.703 1496.49,683.703 1497.05,683.703 1497.61,683.703 1498.16,683.703 1498.72,683.703 1499.28,683.703 1499.84,683.703 1500.4,683.703 1500.96,683.703 1501.52,683.703 1502.08,683.703 1502.64,683.703 1503.2,683.703 1503.76,683.703 1504.32,683.703 1504.88,683.703 1505.44,683.703 1505.99,683.703 1506.55,683.703 1507.11,683.703 1507.67,683.703 1508.23,683.703 1508.79,683.703 1509.35,683.703 1509.91,683.703 1510.47,683.703 1511.03,683.703 1511.59,683.703 1512.15,683.703 1512.71,683.703 1513.26,683.703 1513.82,683.703 1514.38,683.703 1514.94,683.703 1515.5,683.703 1516.06,683.703 1516.62,683.703 1517.18,683.703 1517.74,683.703 1518.3,683.703 1518.86,683.703 1519.42,683.703 1519.98,683.703 1520.53,683.703 1521.09,683.703 1521.65,683.703 1522.21,683.703 1522.77,683.703 1523.33,683.703 1523.89,683.703 1524.45,683.703 1525.01,683.703 1525.57,683.703 1526.13,683.703 1526.69,683.703 1527.25,683.703 1527.81,683.703 1528.36,683.703 1528.92,683.703 1529.48,683.703 1530.04,683.703 1530.6,683.703 1531.16,683.703 1531.72,683.703 1532.28,683.703 1532.84,683.703 1533.4,683.703 1533.96,683.703 1534.52,683.703 1535.08,683.703 1535.63,683.703 1536.19,683.703 1536.75,683.703 1537.31,683.703 1537.87,683.703 1538.43,683.703 1538.99,683.703 1539.55,683.703 1540.11,683.703 1540.67,683.703 1541.23,683.703 1541.79,683.703 1542.35,683.703 1542.9,683.703 1543.46,683.703 1544.02,683.703 1544.58,683.703 1545.14,683.703 1545.7,683.703 1546.26,683.703 1546.82,683.703 1547.38,683.703 1547.94,683.703 1548.5,683.703 1549.06,683.703 1549.62,683.703 1550.18,683.703 1550.73,683.703 1551.29,683.703 1551.85,683.703 1552.41,683.703 1552.97,683.703 1553.53,683.703 1554.09,683.703 1554.65,683.703 1555.21,683.703 1555.77,683.703 1556.33,683.703 1556.89,683.703 1557.45,683.703 1558,683.703 1558.56,683.703 1559.12,683.703 1559.68,683.703 1560.24,683.703 1560.8,683.703 1561.36,683.703 1561.92,683.703 1562.48,683.703 1563.04,683.703 1563.6,683.703 1564.16,683.703 1564.72,683.703 1565.28,683.703 1565.83,683.703 1566.39,683.703 1566.95,683.703 1567.51,683.703 1568.07,683.703 1568.63,683.703 1569.19,683.703 1569.75,683.703 1570.31,683.703 1570.87,683.703 1571.43,683.703 1571.99,683.703 1572.55,683.703 1573.1,683.703 1573.66,683.703 1574.22,683.703 1574.78,683.703 1575.34,683.703 1575.9,683.703 1576.46,683.703 1577.02,683.703 1577.58,683.703 1578.14,683.703 1578.7,683.703 1579.26,683.703 1579.82,683.703 1580.37,683.703 1580.93,683.703 1581.49,683.703 1582.05,683.703 1582.61,683.703 1583.17,683.703 1583.73,683.703 1584.29,683.703 1584.85,683.703 1585.41,683.703 1585.97,683.703 1586.53,683.703 1587.09,683.703 1587.65,683.703 1588.2,683.703 1588.76,683.703 1589.32,683.703 1589.88,683.703 1590.44,683.703 1591,683.703 1591.56,683.703 1592.12,683.703 1592.68,683.703 1593.24,683.703 1593.8,683.703 1594.36,683.703 1594.92,683.703 1595.47,683.703 1596.03,683.703 1596.59,683.703 1597.15,683.703 1597.71,683.703 1598.27,683.703 1598.83,683.703 1599.39,683.703 1599.95,683.703 1600.51,683.703 1601.07,683.703 1601.63,683.703 1602.19,683.703 1602.74,683.703 1603.3,683.703 1603.86,683.703 1604.42,683.703 1604.98,683.703 1605.54,683.703 1606.1,683.703 1606.66,683.703 1607.22,683.703 1607.78,683.703 1608.34,683.703 1608.9,683.703 1609.46,683.703 1610.02,683.703 1610.57,683.703 1611.13,683.703 1611.69,683.703 1612.25,683.703 1612.81,683.703 1613.37,683.703 1613.93,683.703 1614.49,683.703 1615.05,683.703 1615.61,683.703 1616.17,683.703 1616.73,683.703 1617.29,683.703 1617.84,683.703 1618.4,683.703 1618.96,683.703 1619.52,683.703 1620.08,683.703 1620.64,683.703 1621.2,683.703 1621.76,683.703 1622.32,683.703 1622.88,683.703 1623.44,683.703 1624,683.703 1624.56,683.703 1625.11,683.703 1625.67,683.703 1626.23,683.703 1626.79,683.703 1627.35,683.703 1627.91,683.703 1628.47,683.703 1629.03,683.703 1629.59,683.703 1630.15,683.703 1630.71,683.703 1631.27,683.703 1631.83,683.703 1632.39,683.703 1632.94,683.703 1633.5,683.703 1634.06,683.703 1634.62,683.703 1635.18,683.703 1635.74,683.703 1636.3,683.703 1636.86,683.703 1637.42,683.703 1637.98,683.703 1638.54,683.703 1639.1,683.703 1639.66,683.703 1640.21,683.703 1640.77,683.703 1641.33,683.703 1641.89,683.703 1642.45,683.703 1643.01,683.703 1643.57,683.703 1644.13,683.703 1644.69,683.703 1645.25,683.703 1645.81,683.703 1646.37,683.703 1646.93,683.703 1647.48,683.703 1648.04,683.703 1648.6,683.703 1649.16,683.703 1649.72,683.703 1650.28,683.703 1650.84,683.703 1651.4,683.703 1651.96,683.703 1652.52,683.703 1653.08,683.703 1653.64,683.703 1654.2,683.703 1654.76,683.703 1655.31,683.703 1655.87,683.703 1656.43,683.703 1656.99,683.703 1657.55,683.703 1658.11,683.703 1658.67,683.703 1659.23,683.703 1659.79,683.703 1660.35,683.703 1660.91,683.703 1661.47,683.703 1662.03,683.703 1662.58,683.703 1663.14,683.703 1663.7,683.703 1664.26,683.703 1664.82,683.703 1665.38,683.703 1665.94,683.703 1666.5,683.703 1667.06,683.703 1667.62,683.703 1668.18,683.703 1668.74,683.703 1669.3,683.703 1669.85,683.703 1670.41,683.703 1670.97,683.703 1671.53,683.703 1672.09,683.703 1672.65,683.703 1673.21,683.703 1673.77,683.703 1674.33,683.703 1674.89,683.703 1675.45,683.703 1676.01,683.703 1676.57,683.703 1677.13,683.703 1677.68,683.703 1678.24,683.703 1678.8,683.703 1679.36,683.703 1679.92,683.703 1680.48,683.703 1681.04,683.703 1681.6,683.703 1682.16,683.703 1682.72,683.703 1683.28,683.703 1683.84,683.703 1684.4,683.703 1684.95,683.703 1685.51,683.703 1686.07,683.703 1686.63,683.703 1687.19,683.703 1687.75,683.703 1688.31,683.703 1688.87,683.703 1689.43,683.703 1689.99,683.703 1690.55,683.703 1691.11,683.703 1691.67,683.703 1692.23,683.703 1692.78,683.703 1693.34,683.703 1693.9,683.703 1694.46,683.703 1695.02,683.703 1695.58,683.703 1696.14,683.703 1696.7,683.703 1697.26,683.703 1697.82,683.703 1698.38,683.703 1698.94,683.703 1699.5,683.703 1700.05,683.703 1700.61,683.703 1701.17,683.703 1701.73,683.703 1702.29,683.703 1702.85,683.703 1703.41,683.703 1703.97,683.703 1704.53,683.703 1705.09,683.703 1705.65,683.703 1706.21,683.703 1706.77,683.703 1707.32,683.703 1707.88,683.703 1708.44,683.703 1709,683.703 1709.56,683.703 1710.12,683.703 1710.68,683.703 1711.24,683.703 1711.8,683.703 1712.36,683.703 1712.92,683.703 1713.48,683.703 1714.04,683.703 1714.6,683.703 1715.15,683.703 1715.71,683.703 1716.27,683.703 1716.83,683.703 1717.39,683.703 1717.95,683.703 1718.51,683.703 1719.07,683.703 1719.63,683.703 1720.19,683.703 1720.75,683.703 1721.31,683.703 1721.87,683.703 1722.42,683.703 1722.98,683.703 1723.54,683.703 1724.1,683.703 1724.66,683.703 1725.22,683.703 1725.78,683.703 1726.34,683.703 1726.9,683.703 1727.46,683.703 1728.02,683.703 1728.58,683.703 1729.14,683.703 1729.69,683.703 1730.25,683.703 1730.81,683.703 1731.37,683.703 1731.93,683.703 1732.49,683.703 1733.05,683.703 1733.61,683.703 1734.17,683.703 1734.73,683.703 1735.29,683.703 1735.85,683.703 1736.41,683.703 1736.97,683.703 1737.52,683.703 1738.08,683.703 1738.64,683.703 1739.2,683.703 1739.76,683.703 1740.32,683.703 1740.88,683.703 1741.44,683.703 1742,683.703 1742.56,683.703 1743.12,683.703 1743.68,683.703 1744.24,683.703 1744.79,683.703 1745.35,683.703 1745.91,683.703 1746.47,683.703 1747.03,683.703 1747.59,683.703 1748.15,683.703 1748.71,683.703 1749.27,683.703 1749.83,683.703 1750.39,683.703 1750.95,683.703 1751.51,683.703 1752.06,683.703 1752.62,683.703 1753.18,683.703 1753.74,683.703 1754.3,683.703 1754.86,683.703 1755.42,683.703 1755.98,683.703 1756.54,683.703 1757.1,683.703 1757.66,683.703 1758.22,683.703 1758.78,683.703 1759.34,683.703 1759.89,683.703 1760.45,683.703 1761.01,683.703 1761.57,683.703 1762.13,683.703 1762.69,683.703 1763.25,683.703 1763.81,683.703 1764.37,683.703 1764.93,683.703 1765.49,683.703 1766.05,683.703 1766.61,683.703 1767.16,683.703 1767.72,683.703 1768.28,683.703 1768.84,683.703 1769.4,683.703 1769.96,683.703 1770.52,683.703 1771.08,683.703 1771.64,683.703 1772.2,683.703 1772.76,683.703 1773.32,683.703 1773.88,683.703 1774.43,683.703 1774.99,683.703 1775.55,683.703 1776.11,683.703 1776.67,683.703 1777.23,683.703 1777.79,683.703 1778.35,683.703 1778.91,683.703 1779.47,683.703 1780.03,683.703 1780.59,683.703 1781.15,683.703 1781.71,683.703 1782.26,683.703 1782.82,683.703 1783.38,683.703 1783.94,683.703 1784.5,683.703 1785.06,683.703 1785.62,683.703 1786.18,683.703 1786.74,683.703 1787.3,683.703 1787.86,683.703 1788.42,683.703 1788.98,683.703 1789.53,683.703 1790.09,683.703 1790.65,683.703 1791.21,683.703 1791.77,683.703 1792.33,683.703 1792.89,683.703 1793.45,683.703 1794.01,683.703 1794.57,683.703 1795.13,683.703 1795.69,683.703 1796.25,683.703 1796.8,683.703 1797.36,683.703 1797.92,683.703 1798.48,683.703 1799.04,683.703 1799.6,683.703 1800.16,683.703 1800.72,683.703 1801.28,683.703 1801.84,683.703 1802.4,683.703 1802.96,683.703 1803.52,683.703 1804.08,683.703 1804.63,683.703 1805.19,683.703 1805.75,683.703 1806.31,683.703 1806.87,683.703 1807.43,683.703 1807.99,683.703 1808.55,683.703 1809.11,683.703 1809.67,683.703 1810.23,683.703 1810.79,683.703 1811.35,683.703 1811.9,683.703 1812.46,683.703 1813.02,683.703 1813.58,683.703 1814.14,683.703 1814.7,683.703 1815.26,683.703 1815.82,683.703 1816.38,683.703 1816.94,683.703 1817.5,683.703 1818.06,683.703 1818.62,683.703 1819.18,683.703 1819.73,683.703 1820.29,683.703 1820.85,683.703 1821.41,683.703 1821.97,683.703 1822.53,683.703 1823.09,683.703 1823.65,683.703 1824.21,683.703 1824.77,683.703 1825.33,683.703 1825.89,683.703 1826.45,683.703 1827,683.703 1827.56,683.703 1828.12,683.703 1828.68,683.703 1829.24,683.703 1829.8,683.703 1830.36,683.703 1830.92,683.703 1831.48,683.703 1832.04,683.703 1832.6,683.703 1833.16,683.703 1833.72,683.703 1834.27,683.703 1834.83,683.703 1835.39,683.703 1835.95,683.703 1836.51,683.703 1837.07,683.703 1837.63,683.703 1838.19,683.703 \"/>\n</svg>\n","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"In this case the projected energy and the shift are close to each other and the error bars are hard to see.","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"The problem was just a toy example, as the dimension of the Hamiltonian is rather small:","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"dimension(H)","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"462","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"In this case, it's easy (and more efficient) to calculate the exact ground state energy using standard linear algebra. Read more about Rimu's capabilities for exact diagonalization in the example \"Exact diagonalization\".","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"edp = ExactDiagonalizationProblem(H)\nexact_energy = solve(edp).values[1]","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"-4.021502406906472","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"We finish by comparing our FCIQMC results with the exact computation.","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"println(\n    \"\"\"\n    Energy from $steps_measure steps with $target_walkers walkers:\n    Shift: $(se.mean) ± $(se.err)\n    Projected Energy: $(v.val) ± ($(v.val_l), $(v.val_u))\n    Exact Energy: $exact_energy\n    \"\"\"\n)\n\n","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"Energy from 2000 steps with 1000 walkers:\nShift: -4.024577341484725 ± 0.0236305241219062\nProjected Energy: -4.015680981790894 ± (0.004198515842920081, 0.004201350819556637)\nExact Energy: -4.021502406906472\n\n","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"This page was generated using Literate.jl.","category":"page"},{"location":"statstools.html#Module-StatsTools","page":"StatsTools","title":"Module StatsTools","text":"","category":"section"},{"location":"statstools.html","page":"StatsTools","title":"StatsTools","text":"The  module StatsTools contains helper function for analysis and post processing of Monte Carlo data.","category":"page"},{"location":"statstools.html#Blocking-analysis","page":"StatsTools","title":"Blocking analysis","text":"","category":"section"},{"location":"statstools.html","page":"StatsTools","title":"StatsTools","text":"After equilibration, FCIQMC produces information about observables through correlated time series. In order to estimate the statistical errors the time series need to be decorrelated. The main workhorse for achieving this is the blocking_analysis, which is based on the paper by Flyvberg and Peterson JCP (1989), and automated with the M test of Jonsson PRE (2018).","category":"page"},{"location":"statstools.html","page":"StatsTools","title":"StatsTools","text":"Analysing the stochastic errors of observables obtained from the ratio of sample means is done with ratio_of_means, where error propagation of correlated uncertainties is done with the help of the package MonteCarloMeasurements.","category":"page"},{"location":"statstools.html","page":"StatsTools","title":"StatsTools","text":"Many convenience functions are implemented for directly analysing data obtained from solve as a DataFrame. See, e.g., shift_estimator and projected_energy. Asymptotically unbiased estimators are implemented as mixed_estimator, growth_estimator and rayleigh_replica_estimator.","category":"page"},{"location":"statstools.html#Exported","page":"StatsTools","title":"Exported","text":"","category":"section"},{"location":"statstools.html","page":"StatsTools","title":"StatsTools","text":"Modules = [StatsTools]\nPages = [\"StatsTools.jl\", \"blocking.jl\", \"ratio_of_means.jl\", \"convenience.jl\",\n  \"variances.jl\", \"growth_witness.jl\", \"reweighting.jl\", \"fidelity.jl\", \"variational_energy_estimator.jl\"\n]\nPrivate = false","category":"page"},{"location":"statstools.html#Rimu.StatsTools","page":"StatsTools","title":"Rimu.StatsTools","text":"Tools for the statistical analysis of Monte Carlo data.\n\nExports:\n\nblocking_analysis\nblocking_analysis_data\nratio_of_means\ngrowth_witness\nsmoothen\nshift_estimator\nprojected_energy\nvariational_energy_estimator\ngrowth_estimator\ngrowth_estimator_analysis\nmixed_estimator\nmixed_estimator_analysis\nrayleigh_replica_estimator\nrayleigh_replica_estimator_analysis\nval_and_errs\nval\nmean_and_se\n\n\n\n\n\n","category":"module"},{"location":"statstools.html#Rimu.StatsTools.blocking_analysis-Tuple{AbstractVector}","page":"StatsTools","title":"Rimu.StatsTools.blocking_analysis","text":"blocking_analysis(v::AbstractVector; α = 0.01, corrected = true, skip=0, warn=true)\n-> BlockingResult(mean, err, err_err, p_cov, k, blocks)\n\nCompute the sample mean mean and estimate the standard deviation of the mean (standard error) err of a correlated time series. It uses the blocking algorithm from Flyvberg and Peterson JCP (1989) and the M test of Jonsson PRE (2018) at significance level 1-α.\n\nUse skip to skip the first skip elements in v. corrected controls whether bias correction for variances is used. If decorrelating the time series fails according to the M test, NaN is returned as the standard error and -1 for k. The keyword argument warn controls whether a warning message is logged.\n\nThe summary result is returned as a BlockingResult. k - 1 is the number of blocking transformations required to pass the hypothesis test for an uncorrelated time series and err_err the estimated standard error or err.\n\nThe detailed results from each reblocking step can be obtained with blocking_analysis_data.\n\nSee BlockingResult, shift_estimator, ratio_of_means, blocking_analysis_data.\n\n\n\n\n\n","category":"method"},{"location":"statstools.html#Rimu.StatsTools.blocking_analysis_data-Tuple{AbstractVector}","page":"StatsTools","title":"Rimu.StatsTools.blocking_analysis_data","text":"blocking_analysis_data(v::AbstractVector; kwargs...) ->\n(; br::BlockingResult, df::DataFrame)\n\nPerform a blocking_analysis and return the summary result br as well as a DataFrame df with information about the standard error in each blocking step.\n\nFor a description of the keyword arguments see blocking_analysis.\n\nExample\n\njulia> data = smoothen(rand(10_000), 2^6); # generate correlated data\n\njulia> br, df = blocking_analysis_data(data)\n(br = BlockingResult{Float64}\n  mean = 0.5088 ± 0.0029\n  with uncertainty of ± 0.00023454488294744232\n  from 78 blocks after 7 transformations (k = 8).\n, df = 13×6 DataFrame\n Row │ blocks  mean      std_err      std_err_err  p_cov       mj\n     │ Int64   Float64   Float64      Float64      Float64     Float64\n─────┼──────────────────────────────────────────────────────────────────────\n   1 │  10000  0.508806  0.000375044  2.6521e-6    1.40658e-7  9715.08\n   2 │   5000  0.508806  0.000528547  5.28599e-6   2.79361e-7  4778.14\n   3 │   2500  0.508806  0.000743386  1.05152e-5   5.52622e-7  2298.64\n   4 │   1250  0.508806  0.00104064   2.08212e-5   1.08293e-6  1056.24\n   5 │    625  0.508806  0.00144177   4.08121e-5   2.07871e-6   427.949\n   6 │    312  0.508736  0.00194209   7.78707e-5   3.77171e-6   128.711\n   7 │    156  0.508736  0.00247921   0.00014081   6.14647e-6    17.3075\n   8 │     78  0.508736  0.00291063   0.000234545  8.47174e-6     0.731386\n   9 │     39  0.508736  0.00284613   0.000326474  8.10046e-6     0.901054\n  10 │     19  0.508241  0.0026998    0.000449967  7.28892e-6     2.85915\n  11 │      9  0.507939  0.00359907   0.000899766  1.29533e-5     1.08644\n  12 │      4  0.509327  0.00440559   0.00179857   1.94092e-5     0.0370381\n  13 │      2  0.509327  0.00432708   0.00305971   1.87237e-5     0.125)\n\njulia> using StatsPlots; unicodeplots();\n\njulia> plot([br.k,br.k],[0.0,maximum(df.std_err.+df.std_err_err)], label=\"m test\");\n\njulia> @df df plot!(\n           1:length(:std_err), :std_err;\n           err=:std_err_err, xlabel=\"k\", label=\"std err\",\n           title=\"std err vs blocking steps\"\n       )\n               ⠀⠀⠀⠀⠀⠀⠀⠀⠀std err vs blocking steps⠀⠀⠀⠀⠀⠀⠀⠀\n               ┌────────────────────────────────────────┐\n    0.00423501 │⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⡀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⢠⠀⠀⠀⠀│ m test\n               │⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⡇⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⢀⠀⠀⢸⠀⠀⠀⠀│ std err\n               │⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⡇⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⢸⠀⠀⢸⠀⠀⠀⠀│\n               │⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⡇⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⢸⠀⠀⢸⠀⠀⠀⠀│\n               │⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⡇⠀⠀⠀⠀⠀⠀⠀⠀⡇⠀⡠⢺⠒⠒⢺⠀⠀⠀⠀│\n               │⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⡇⠀⠀⡀⠀⠀⡆⣀⠤⡗⠉⠀⢸⠀⠀⢸⡆⠀⠀⠀│\n               │⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⢀⡧⠤⠔⡗⠊⠉⡏⠀⠀⡇⠀⠀⢸⠀⠀⢸⢣⠀⠀⠀│\n               │⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⢀⠔⠁⡇⠀⠀⠁⠀⠀⠁⠀⠀⠁⠀⠀⠀⠀⠀⢸⠸⡀⠀⠀│\n               │⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⢀⠴⠁⠀⠀⡇⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠸⠀⡇⠀⠀│\n               │⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⢀⠔⠁⠀⠀⠀⠀⡇⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⢸⠀⠀│\n               │⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⢀⠔⠊⠀⠀⠀⠀⠀⠀⡇⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠈⣦⠀│\n               │⠀⠀⠀⠀⠀⠀⠀⠀⡠⠔⠒⠁⠀⠀⠀⠀⠀⠀⠀⠀⡇⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⢹⠀│\n               │⠀⠀⠀⢀⣀⠤⠒⠉⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⡇⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⢸⠀│\n               │⠀⠒⠉⠁⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⡇⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⢸⠀│\n   -0.00012335 │⠤⠤⠤⠤⠤⠤⠤⠤⠤⠤⠤⠤⠤⠤⠤⠤⠤⠤⠤⠤⠧⠤⠤⠤⠤⠤⠤⠤⠤⠤⠤⠤⠤⠤⠤⠤⠤⠤⠤⠤│\n               └────────────────────────────────────────┘\n               ⠀0.64⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀k⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀13.36⠀\n\nA vertical line at k==8 indicates the blocking step identified by hypothesis testing to decorrelate the time series data. The decorrelation length can thus be estimated at 2^k-1 = 2^7 = 128. Note that the data was correlated with a sliding window of 2^6 steps.\n\nSee blocking_analysis, BlockingResult.\n\n\n\n\n\n","category":"method"},{"location":"statstools.html#Rimu.StatsTools.mean_and_se-Tuple{Rimu.StatsTools.BlockingResult}","page":"StatsTools","title":"Rimu.StatsTools.mean_and_se","text":"mean_and_se(v::AbstractVector; α = 0.01, corrected::Bool=true, skip=0) -> mean, err\nmean_and_se(r::BlockingResult) -> mean, err\n\nReturn the mean and standard error (as a tuple) of a time series obtained from blocking_analysis. See also BlockingResult.\n\n\n\n\n\n","category":"method"},{"location":"statstools.html#Statistics.cov-Tuple{Rimu.StatsTools.BlockingResult{<:Complex}}","page":"StatsTools","title":"Statistics.cov","text":"cov(r::BlockingResult{<:Complex})\n\nReturn the covariance matrix of the multivariate normal distribution approximating the uncertainty of the blocking result r of a complex time series. See (https://en.wikipedia.org/wiki/Complexnormaldistribution).\n\n\n\n\n\n","category":"method"},{"location":"statstools.html#Rimu.StatsTools.ratio_of_means-Tuple{Any, Any}","page":"StatsTools","title":"Rimu.StatsTools.ratio_of_means","text":"ratio_of_means(num, denom; α=0.01, corrected=true, mc_samples=nothing, skip=0, warn=true)\n-> r::RatioBlockingResult\n\nEstimate the ratio of mean(num)/mean(denom) assuming that num and denom are possibly correlated time series, skipping the first skip elements. A blocking analysis with m-test is used to uncorrelate the time series, see blocking_analysis. The remaining standard error and correlation of the means is propagated using MonteCarloMeasurements. The results are reported as a RatioBlockingResult.\n\nRobust estimates for the ratio are obtained from pmedian(r) and confidence intervals from pquantile(), e.g. pquantile(r, [0.025, 0.975]) for the 95% confidence interval.\n\nEstimates from linear uncertainty propagation are returned as r.f and r.σ_f using x_by_y_linear. The standard error estimate r.σ_f should only be trusted when the coefficient of variation std(denom)/mean(denom) is small: abs(r.δ_y) < 0.1. Under this condition can the ratio be approximated as a normal distribution. See wikipedia and Díaz-Francés, Rubio (2013)\n\nThe keyword mc_samples controls the number of samples used for error propagation by MonteCarloMeasurements. Use nothing for the default and Val(1000) to set the number to 1000 samples in a type-consistent way.\n\nThe keyword warn controls whether warning messages are logged when blocking fails or noisy denominators are encountered.\n\nNote: to compute statistics on the RatioBlockingResult, use functions pmedian, pquantile, pmiddle, piterate, pextrema, pminimum, pmaximum, pmean, and pcov.\n\n\n\n\n\n","category":"method"},{"location":"statstools.html#Rimu.StatsTools.errs-Tuple","page":"StatsTools","title":"Rimu.StatsTools.errs","text":"errs(x; n=1, p=nothing, name=:err) -> (; err_l, err_u)\n\nReturn the lower and upper error bar for the uncertain value x.\n\nSee val_and_errs.\n\n\n\n\n\n","category":"method"},{"location":"statstools.html#Rimu.StatsTools.to_measurement-Tuple{MonteCarloMeasurements.Particles}","page":"StatsTools","title":"Rimu.StatsTools.to_measurement","text":"to_measurement(p::MonteCarloMeasurements.Particles) -> ::Measurements.measurement\n\nConvert an uncertain number from MonteCarloMeasurements  to Measurements format  using the median as the central point. The new ± boundaries will include  the 68% quantile around the median.\n\n\n\n\n\n","category":"method"},{"location":"statstools.html#Rimu.StatsTools.val-Tuple{Any}","page":"StatsTools","title":"Rimu.StatsTools.val","text":"val(x)\n\nReturn the best estimate value for an uncertain x. Defaults to the median for uncertain x represented by a (sampled) distribution. Supports  MonteCarloMeasurements and Measurements.\n\nSee errs, BlockingResult, RatioBlockingResult.\n\n\n\n\n\n","category":"method"},{"location":"statstools.html#Rimu.StatsTools.val_and_errs-Tuple{Any}","page":"StatsTools","title":"Rimu.StatsTools.val_and_errs","text":"val_and_errs(x; n=1, p=nothing, name=:val) -> (;val, val_l, val_u)\n\nReturn the median and the lower and upper error bar for the uncertain value x as a NamedTuple. This is useful for plotting scripts. The interval [val - val_l, val + val_u] represents the confidence interval at level n*σ, or at probability p. Setting p overrides n. Supports  MonteCarloMeasurements and Measurements. The  names in the NamedTuple can be changed with name.\n\nExample:\n\njulia> results = [blocking_analysis(i:0.1:2i+20) for i in 1:3]; # mock results\n\njulia> v = val_and_errs.(results, name=\"res\"); # Vector of NamedTuple's with standard errors\n\njulia> DataFrame(v)\n3×3 DataFrame\n Row │ res      res_l    res_u\n     │ Float64  Float64  Float64\n─────┼───────────────────────────\n   1 │    11.5  1.7282   1.7282\n   2 │    13.0  1.7282   1.7282\n   3 │    14.5  1.78885  1.78885\n\nSee NamedTuple, val, errs, BlockingResult, RatioBlockingResult.\n\n\n\n\n\n","category":"method"},{"location":"statstools.html#Rimu.StatsTools.growth_witness","page":"StatsTools","title":"Rimu.StatsTools.growth_witness","text":"growth_witness(df::DataFrame, [b];\n    shift=:shift,\n    norm=:norm,\n    time_step=determine_constant_time_step(df),\n    skip=0\n)\ngrowth_witness(sim::PMCSimulation, [b]; kwargs...)\n\nCalculate the growth witness directly from the result (DataFrame or PMCSimulation) of solveing a ProjectorMonteCarloProblem. The keyword arguments shift and norm can be used to change the names of the relevant columns.\n\n\n\n\n\n","category":"function"},{"location":"statstools.html#Rimu.StatsTools.growth_witness-Tuple{AbstractArray, AbstractArray, Any}","page":"StatsTools","title":"Rimu.StatsTools.growth_witness","text":"growth_witness(shift::AbstractArray, norm::AbstractArray, dt, [b]; skip=0)\n\nCompute the growth witness\n\nG^(n) = S^(n) - fracvertmathbfc^(n+1)vert -\n          vertmathbfc^(n)vertvertmathbfc^(n)vert dtau\n\nwhere S is the shift and vertmathbfc^(n)vert == norm[n, 1]. Setting b ≥ 1 a sliding average over b time steps is computed using smoothen(). The first skip time steps are skipped. mean(growth_witness) is approximately the same as growth_estimator with h=0.\n\nSee also growth_estimator.\n\n\n\n\n\n","category":"method"},{"location":"statstools.html#Rimu.StatsTools.smoothen-Tuple{AbstractVector, Integer}","page":"StatsTools","title":"Rimu.StatsTools.smoothen","text":"smoothen(noisy::AbstractVector, b)\n\nSmoothen the array noisy by averaging over a sliding window of length b and wrapping noisy periodically. The mean(noisy) is preserved.\n\n\n\n\n\n","category":"method"},{"location":"statstools.html#Rimu.StatsTools.growth_estimator-NTuple{4, Any}","page":"StatsTools","title":"Rimu.StatsTools.growth_estimator","text":"growth_estimator(\n    shift, wn, h, time_step;\n    skip = 0,\n    E_r = mean(shift[skip+1:end]),\n    weights = w_exp,\n    change_type = identity,\n    kwargs...\n)\ngrowth_estimator(\n    df::DataFrame, h;\n    shift_name=:shift,\n    norm_name=:norm,\n    time_step=determine_constant_time_step(df),\n    kwargs...\n)\ngrowth_estimator(sim::PMCSimulation; kwargs...)\n-> r::RatioBlockingResult\n\nCompute the growth estimator with reference energy E_r by the reweighting technique described in Umrigar et al. (1993), see Eq. (20). shift and wn are equal length vectors containing the shift and walker number time series, respectively.  Reweighting is done over h time steps and length(shift) - skip time steps are used for the blocking analysis done with ratio_of_means. weights is a function that calulates the weights. See w_exp and w_lin.\n\nE_gr = E_r - frac1dτln\n    fracsum_n w_h+1^(n+1) N_mathrmw^(n+1)\n        sum_m w_h^(m) N_mathrmw^(m) \n\nwhere dτ is the time_step\n\nWhen h is greater than the autocorrelation time scale of the shift, then E_gr (returned as r.ratio) is an unbiased but approximate estimator for the ground state energy E_0 with an error mathcalO(dτ^2) and potentially increased confidence intervals compared to the (biased) shift estimator.  Error propagation is done with MonteCarloMeasurements. Propagation through the logarithm can be modified by setting change_type to to_measurement in order to avoid NaN results from negative outliers.\n\nIf success==true the blocking analysis was successful in k-1 steps, using blocks uncorrelated data points.\n\nThe second method calculates the growth estimator directly from a PMCSimulation or DataFrame returned by solve. The keyword arguments shift_name and norm_name can be used to change the names of the relevant columns.\n\nSee also mixed_estimator and RatioBlockingResult.\n\n\n\n\n\n","category":"method"},{"location":"statstools.html#Rimu.StatsTools.growth_estimator_analysis-Tuple{Any}","page":"StatsTools","title":"Rimu.StatsTools.growth_estimator_analysis","text":"growth_estimator_analysis(df::DataFrame; kwargs...)\ngrowth_estimator_analysis(sim::PMCSimulation; kwargs...)\n-> (; df_ge, correlation_estimate, se, se_l, se_u)\n\nCompute the growth_estimator on a DataFrame df or PMCSimulation sim. repeatedly over a range of reweighting depths.\n\nReturns a NamedTuple with the fields\n\ndf_ge: DataFrame with reweighting depth and growth_estiamator data. See example below.\ncorrelation_estimate: estimated correlation time from blocking analysis\nse, se_l, se_u: shift_estimator and error\n\nKeyword arguments\n\nh_range: The default is about h_values values from 0 to twice the estimated correlation time\nh_values = 100: minimum number of reweighting depths\nskip = 0: initial time steps to exclude from averaging\nthreading = Threads.nthreads() > 1: if false a progress meter is displayed\nshift_name = :shift name of column in df with shift data\nnorm_name = :norm name of column in df with walkernumber data\nwarn = true whether to log warning messages when blocking fails or denominators are small\n\nExample\n\nsim = solve(...)\ndf_ge, correlation_estimate, se, se_l, se_u = growth_estimator_analysis(sim; skip=5_000)\n\nusing StatsPlots\n@df df_ge plot(_ -> se, :h, ribbon = (se_l, se_u), label = \"⟨S⟩\") # constant line and ribbon for shift estimator\n@df df_ge plot!(:h, :val, ribbon = (:val_l, :val_u), label=\"E_gr\") # growth estimator as a function of reweighting depth\nxlabel!(\"h\")\n\nSee also: growth_estimator, mixed_estimator_analysis.\n\n\n\n\n\n","category":"method"},{"location":"statstools.html#Rimu.StatsTools.mixed_estimator-Tuple{AbstractVector, AbstractVector, AbstractVector, Any, Any}","page":"StatsTools","title":"Rimu.StatsTools.mixed_estimator","text":"mixed_estimator(\n    hproj, vproj, shift, h, time_step;\n    skip = 0,\n    E_r = mean(shift[skip+1:end]),\n    weights = w_exp,\n    kwargs...\n)\nmixed_estimator(\n    df::DataFrame, h;\n    hproj_name=:hproj,\n    vproj_name=:vproj,\n    shift_name=:shift,\n    time_step=determine_constant_time_step(df),\n    kwargs...\n)\nmixed_estimator(sim::PMCSimulation, h; kwargs...)\n-> r::RatioBlockingResult\n\nCompute the mixed estimator by the reweighting technique described in Umrigar et al. (1993), Eq. (19)\n\nE_mathrmmix = fracsum_n w_h^(n)  (Hmathbfv)mathbfc^(n)\n        sum_m w_h^(m)  mathbfvmathbfc^(m) \n\nwhere the time series hproj == (Hmathbfv)mathbfc^(n) and vproj == mathbfvmathbfc^(m) have the same length as shift (See ProjectedEnergy on how to set these up).  Reweighting is done over h time steps and length(shift) - skip time steps are used for the blocking analysis done with ratio_of_means. weights is a function that calulates the weights. See w_exp and w_lin.  Additional keyword arguments are passed on to ratio_of_means.\n\nWhen h is greater than the autocorrelation time scale of the shift, then r.ratio is an unbiased but approximate estimator for the ground state energy E_0 with an error mathcalO(dτ^2), where dτ is the time_step, and potentially increased confidence intervals compared to the unweighted ratio.  Error propagation is done with MonteCarloMeasurements. Results are returned as RatioBlockingResult.\n\nThe second method calculates the mixed energy estimator directly from a DataFrame or PMCSimulation returned by solve. The keyword arguments hproj_name, vproj_name, and shift_name can be used to change the names of the relevant columns.\n\nSee also growth_estimator.\n\n\n\n\n\n","category":"method"},{"location":"statstools.html#Rimu.StatsTools.mixed_estimator_analysis-Tuple{DataFrame}","page":"StatsTools","title":"Rimu.StatsTools.mixed_estimator_analysis","text":"mixed_estimator_analysis(df::DataFrame; kwargs...)\nmixed_estimator_analysis(sim::PMCSimulation; kwargs...)\n-> (; df_me, correlation_estimate, se, se_l, se_u)\n\nCompute the mixed_estimator on a DataFrame df or PMCSimulation sim returned from solve repeatedly over a range of reweighting depths.\n\nReturns a NamedTuple with the fields\n\ndf_me: DataFrame with reweighting depth and mixed_estiamator data. See example below.\ncorrelation_estimate: estimated correlation time from blocking analysis\nse, se_l, se_u: shift_estimator and error\n\nKeyword arguments\n\nh_range: The default is about h_values values from 0 to twice the estimated correlation time\nh_values = 100: minimum number of reweighting depths\nskip = 0: initial time steps to exclude from averaging\nthreading = Threads.nthreads() > 1: if false a progress meter is displayed\nshift_name = :shift name of column in df with shift data\nhproj_name = :hproj name of column in df with operator overlap data\nvproj_name = :vproj name of column in df with projector overlap data\nwarn = true whether to log warning messages when blocking fails or denominators are small\n\nExample\n\nsim = solve(...)\ndf_me, correlation_estimate, se, se_l, se_u = mixed_estimator_analysis(sim; skip=5_000)\n\nusing StatsPlots\n@df df_me plot(_ -> se, :h, ribbon = (se_l, se_u), label = \"⟨S⟩\") # constant line and ribbon for shift estimator\n@df df_me plot!(:h, :val, ribbon = (:val_l, :val_u), label=\"E_mix\") # mixed estimator as a function of reweighting depth\nxlabel!(\"h\")\n\nSee also: mixed_estimator, growth_estimator_analysis.\n\n\n\n\n\n","category":"method"},{"location":"statstools.html#Rimu.StatsTools.projected_energy-Tuple{Any}","page":"StatsTools","title":"Rimu.StatsTools.projected_energy","text":"projected_energy(df::DataFrame; skip=0, hproj=:hproj, vproj=:vproj, kwargs...)\nprojected_energy(sim::PMCSimulation; kwargs...)\n-> r::RatioBlockingResult\n\nCompute the projected energy estimator\n\nE_mathrmp = fracsum_n  mathbfvHmathbfc^(n)\n        sum_m mathbfvmathbfc^(m) \n\nwhere the time series df.hproj == mathbfvHmathbfc^(n) and df.vproj == mathbfvmathbfc^(m) are taken from df, skipping the first skip entries (use post_step_strategy =ProjectedEnergy(...) to set these up in ProjectorMonteCarloProblem). projected_energy is equivalent to mixed_estimator with h=0.\n\nThe keyword arguments hproj and vproj can be used to change the names of the relevant columns. Other kwargs are passed on to ratio_of_means. Returns a RatioBlockingResult.\n\nSee NamedTuple, val_and_errs, val, errs for processing results.\n\n\n\n\n\n","category":"method"},{"location":"statstools.html#Rimu.StatsTools.rayleigh_replica_estimator-Tuple{Vector, Vector, Vector, Any, Any}","page":"StatsTools","title":"Rimu.StatsTools.rayleigh_replica_estimator","text":"rayleigh_replica_estimator(\n    op_ol, vec_ol, shift, h, time_step;\n    skip = 0,\n    E_r = mean(shift[skip+1:end]),\n    weights = w_exp,\n    kwargs...\n)\nrayleigh_replica_estimator(\n    df::DataFrame;\n    shift_name=\"shift\",\n    op_name=\"Op1\",\n    vec_name=\"dot\",\n    h=0,\n    skip=0,\n    Anorm=1,\n    kwargs...\n)\nrayleigh_replica_estimator(sim::PMCSimulation; kwargs...)\n-> r::RatioBlockingResult\n\nCompute the estimator of a Rayleigh quotient of operator hatA with reweighting,\n\nA_mathrmest(h) = fracsum_ab sum_n w_ha^(n) w_hb^(n)\n    mathbfc_a^(n) cdot hatA cdot mathbfc_b^(n)\n    sum_ab sum_n w_ha^(n) w_hb^(n) mathbfc_a^(n) cdot mathbfc_b^(n)\n\nusing data from multiple replicas.\n\nArgument op_ol holds data for the operator overlap mathbfc_a^(n) hatA mathbfc_b^(n) and vec_ol holds data for the vector overlap mathbfc_a^(n) mathbfc_b^(n). They are of type Vector{Vector}, with each element Vector holding the data for a pair of replicas. Argument shift is of type Vector{Vector}, with each element Vector holding the shift data for each individual replica.\n\nThe second method computes the Rayleigh quotient directly from a DataFrame or PMCSimulation returned by solve. The keyword arguments shift_name, op_name and vec_name can be used to change the names of the relevant columns, see AllOverlaps for default formatting. The operator overlap data can be scaled by a prefactor Anorm. A specific reweighting depth can be set with keyword argument h. The default is h = 0 which calculates the Rayleigh quotient without reweighting.\n\nThe reweighting is an extension of the mixed estimator using the reweighting technique described in Umrigar et al. (1993). Reweighting is done over h time steps and length(shift) - skip time steps are used for the blocking analysis done with ratio_of_means. weights is a function that calulates the weights. See w_exp and w_lin. Additional keyword arguments are passed on to ratio_of_means.\n\nError propagation is done with MonteCarloMeasurements. Results are returned as RatioBlockingResult.\n\nSee also mixed_estimator, growth_estimator.\n\n\n\n\n\n","category":"method"},{"location":"statstools.html#Rimu.StatsTools.rayleigh_replica_estimator_analysis-Tuple{Any}","page":"StatsTools","title":"Rimu.StatsTools.rayleigh_replica_estimator_analysis","text":"rayleigh_replica_estimator_analysis(df::DataFrame; kwargs...)\nrayleigh_replica_estimator_analysis(sim::PMCSimulation; kwargs...)\n-> (; df_rre, df_se)\n\nCompute the rayleigh_replica_estimator on a DataFrame df or PMCSimulation sim returned from solve repeatedly over a range of reweighting depths.\n\nReturns a NamedTuple with the fields\n\ndf_rre: DataFrame with reweighting depth and rayleigh_replica_estimator data. See example below.\ndf_se: DataFrame with shift_estimator output, one row per replica\n\nKeyword arguments\n\nh_range: The default is about h_values values from 0 to twice the estimated correlation time\nh_values = 100: minimum number of reweighting depths\nskip = 0: initial time steps to exclude from averaging\nthreading = Threads.nthreads() > 1: if false a progress meter is displayed\nshift_name = \"shift\": shift data corresponding to column in df with names <shift>_1, ...\nop_name = \"Op1\": name of operator overlap corresponding to column in df with names c1_<op_ol>_c2, ...\nvec_name = \"dot\": name of vector-vector overlap corresponding to column in df with names c1_<vec_ol>_c2, ...\nAnorm = 1: a scalar prefactor to scale the operator overlap data\nwarn = true: whether to log warning messages when blocking fails or denominators are small\n\nExample\n\nsim = solve(...)\ndf_rre, df_se = rayleigh_replica_estimator_analysis(sim; skip=5_000)\n\nusing StatsPlots\n@df df_rre plot(_ -> se, :h, ribbon = (se_l, se_u), label = \"⟨S⟩\") # constant line and ribbon for shift estimator\n@df df_rre plot!(:h, :val, ribbon = (:val_l, :val_u), label=\"E_mix\") # Rayleigh quotient estimator as a function of reweighting depth\nxlabel!(\"h\")\n\nSee also: rayleigh_replica_estimator, mixed_estimator_analysis, AllOverlaps.\n\n\n\n\n\n","category":"method"},{"location":"statstools.html#Rimu.StatsTools.shift_estimator-Tuple{Any}","page":"StatsTools","title":"Rimu.StatsTools.shift_estimator","text":"shift_estimator(df::DataFrame; shift=:shift, kwargs...)\nshift_estimator(sim::PMCSimulation; kwargs...)\n-> r::BlockingResult\n\nReturn the shift estimator from the data in df.shift. The keyword argument shift can be used to change the name of the relevant column. Other keyword arguments are passed on to blocking_analysis. Returns a BlockingResult.\n\nSee also growth_estimator, projected_energy.\n\n\n\n\n\n","category":"method"},{"location":"statstools.html#Rimu.StatsTools.w_exp-Tuple{Union{SubArray{<:Any, 1, <:Vector, <:Any, true}, Vector}, Any, Any}","page":"StatsTools","title":"Rimu.StatsTools.w_exp","text":"w_exp(shift, h, time_step; E_r = mean(shift), skip = 0)\n\nCompute the weights for reweighting over h time steps with reference energy E_r from the exponential formula\n\nw_h^(n) = prod_j=1^h exp-dτ(S^(q+n-j)-E_r) \n\nwhere q = skip and dτ is the time_step.\n\nSee also w_lin, growth_estimator, mixed_estimator.\n\n\n\n\n\n","category":"method"},{"location":"statstools.html#Rimu.StatsTools.w_lin-Tuple{Union{SubArray{<:Any, 1, <:Vector, <:Any, true}, Vector}, Any, Any}","page":"StatsTools","title":"Rimu.StatsTools.w_lin","text":"w_lin(shift, h, time_step; E_r = mean(shift), skip = 0)\n\nCompute the weights for reweighting over h time steps with reference energy E_r from the linearised formula\n\nw_h^(n) = prod_j=1^h 1-dτ(S^(q+n-j)-E_r) \n\nwhere q = skip and dτ is the time_step.\n\nSee also w_exp, growth_estimator, mixed_estimator.\n\n\n\n\n\n","category":"method"},{"location":"statstools.html#Rimu.StatsTools.replica_fidelity-Tuple{Any}","page":"StatsTools","title":"Rimu.StatsTools.replica_fidelity","text":"replica_fidelity(df::DataFrame; p_field = :hproj, skip = 0)\nreplica_fidelity(sim::PMCSimulation; kwargs...)\n\nCompute the fidelity of the average coefficient vector and the projector defined in p_field from the PMCSimulation or DataFrame returned by solve, using replicas _1 and _2. Calls ratio_of_means to perform a blocking analysis on a ratio of the means of separate time series and returns a RatioBlockingResult. The first skip steps in the time series are skipped.\n\nThe fidelity of states |ψ⟩ and |ϕ⟩ is defined as\n\nF(ψϕ) = fracψϕ^2ψψϕϕ \n\nSpecifically, replica_fidelity computes\n\nF(mathbfvmathbfc) =\n    frac(mathbfc_1mathbfv)(mathbfvmathbfc_1)\n    mathbfc_1mathbfc_1 \n\nwhere v is the projector specified by p_field, which is assumed to be normalised to unity with the two-norm (i.e. v⋅v == 1), and mathbfc_1 and mathbfc_2 are two replica coefficient vectors.\n\n\n\n\n\n","category":"method"},{"location":"statstools.html#Rimu.StatsTools.variational_energy_estimator-Tuple{Any, Any}","page":"StatsTools","title":"Rimu.StatsTools.variational_energy_estimator","text":"variational_energy_estimator(shifts, overlaps; kwargs...)\nvariational_energy_estimator(df::DataFrame; max_replicas=:all, kwargs...)\nvariational_energy_estimator(sim::PMCSimulation; kwargs...)\n-> r::RatioBlockingResult\n\nCompute the variational energy estimator from the replica time series of the shifts and coefficient vector overlaps by blocking analysis. The keyword argument max_replicas can be used to constrain the number of replicas processed to be smaller than all available in df. Other keyword arguments are passed on to ratio_of_means(). Returns a RatioBlockingResult.\n\nAn estimator for the variational energy\n\nfracmathbfc^ mathbfHmathbfcmathbfc^mathbfc\n\nis calculated from\n\nE_v  =  fracsum_ab^R overline(S_a+S_b) mathbfc_a^ mathbfc_b\n               2sum_ab^R overlinemathbfc_a^ mathbfc_b \n\nwhere the sum goes over distinct pairs out of the R replicas. See arXiv:2103.07800.\n\nThe DataFrame and PMCSimulation versions can extract the relevant information from the result of solve. Set up the ProjectorMonteCarloProblem with the keyword argument replica_strategy = AllOverlaps(R) and R ≥ 2. If passing shifts and overlaps, the data has to be arranged in the correct order (as provided in the DataFrame version).\n\nSee AllOverlaps.\n\n\n\n\n\n","category":"method"},{"location":"statstools.html#Additional-docstrings","page":"StatsTools","title":"Additional docstrings","text":"","category":"section"},{"location":"statstools.html","page":"StatsTools","title":"StatsTools","text":"Modules = [StatsTools]\nPages = [\"StatsTools.jl\", \"blocking.jl\", \"ratio_of_means.jl\", \"convenience.jl\",\n  \"variances.jl\", \"growth_witness.jl\", \"reweighting.jl\"\n]\nPublic = false","category":"page"},{"location":"statstools.html#MonteCarloMeasurements.Particles-Tuple{Rimu.StatsTools.BlockingResult{<:Real}}","page":"StatsTools","title":"MonteCarloMeasurements.Particles","text":"MonteCarloMeasurements.Particles(r::BlockingResult; mc_samples = 2000)\nMonteCarloMeasurements.±(r::BlockingResult)\n\nConvert a BlockingResult into a Particles object for nonlinear error propagation with MonteCarloMeasurements.\n\n\n\n\n\n","category":"method"},{"location":"statstools.html#Rimu.StatsTools.BlockingResult","page":"StatsTools","title":"Rimu.StatsTools.BlockingResult","text":"BlockingResult(mean, err, err_err, p_cov, k, blocks)\n\nResult of blocking_analysis.\n\nFields:\n\nmean: sample mean\nerr: standard error (estimated standard deviation of the mean)\nerr_err: estimated uncertainty of err\np_cov: estimated pseudo covariance of mean, relevant for complex time series\nk::Int: k-1 blocking steps were used to uncorrelate time series\nblocks::Int: number of uncorrelated values after blocking\n\nHas methods for NamedTuple, val_and_errs, val, errs, mean_and_se, Measurements.:±, MonteCarloMeasurements.Particles, and Statistics.cov for Complex data.\n\nExample:\n\njulia> blocking_analysis(smoothen(randn(2^10), 2^5))\nBlockingResult{Float64}\n  mean = -0.026 ± 0.029\n  with uncertainty of ± 0.003638545517264226\n  from 32 blocks after 5 transformations (k = 6).\n\n\n\n\n\n","category":"type"},{"location":"statstools.html#Measurements.measurement-Tuple{Rimu.StatsTools.BlockingResult{<:Real}}","page":"StatsTools","title":"Measurements.measurement","text":"measurement(r::BlockingResult)\nMeasurements.±(r::BlockingResult)\n\nConvert a BlockingResult into a Measurement for linear error propagation with Measurements.\n\nLimitation: Does not account for covariance in complex BlockingResult. Consider using MonteCarloMeasurements.Particles(r)!\n\n\n\n\n\n","category":"method"},{"location":"statstools.html#Rimu.StatsTools.blocker-Union{Tuple{AbstractVector{T}}, Tuple{T}} where T","page":"StatsTools","title":"Rimu.StatsTools.blocker","text":"blocker(v::Vector) -> new_v::Vector\n\nReblock the data by successively taking the mean of two adjacent data points to form a new vector with a half of the length(v). The last data point will be discarded if length(v) is odd.\n\n\n\n\n\n","category":"method"},{"location":"statstools.html#Rimu.StatsTools.blocks_with_m-Tuple{Any}","page":"StatsTools","title":"Rimu.StatsTools.blocks_with_m","text":"blocks_with_m(v; corrected = true) -> (;blocks, mean, std_err, std_err_err, p_cov, mj)\n\nPerform the blocking algorithm from Flyvberg and Peterson JCP (1989). Returns named tuple with the results from all blocking steps. See mtest().\n\n\n\n\n\n","category":"method"},{"location":"statstools.html#Rimu.StatsTools.mtest-Tuple{AbstractVector}","page":"StatsTools","title":"Rimu.StatsTools.mtest","text":"mtest(mj::AbstractVector; α = 0.01) -> k\nmtest(table::NamedTuple; α = 0.01) -> k\n\nHypothesis test for decorrelation of a time series after blocking transformations with significance level 1-α after Jonson PRE (2018). mj or table.mj is expected to be a vector with relevant M_j values from a blocking analysis as obtained from blocks_with_m(). Returns the row number k where the M-test is passed. If the M-test has failed mtest() returns the value -1.\n\n\n\n\n\n","category":"method"},{"location":"statstools.html#Rimu.StatsTools.RatioBlockingResult","page":"StatsTools","title":"Rimu.StatsTools.RatioBlockingResult","text":"RatioBlockingResult(ratio, f, σ_f, δ_y, k, success)\n\nResult of ratio_of_means().\n\nFields:\n\nratio::P: ratio with uncertainties propagated by MonteCarloMeasurements\nf::T: ratio of means\nσ_f::T: std from linear propagation\nδ_y::T: coefficient of variation for denominator (≤ 0.1 for normal approx)\nk::Int: k-1 blocking steps were used to uncorrelate time series\nblocks::Int: number of data values after blocking\nsuccess::Bool: false if any of the blocking steps failed\n\nHas methods for NamedTuple, val_and_errs, val, errs.\n\nNote: to compute statistics on the RatioBlockingResult, use functions pmedian, pquantile, pmiddle, piterate, pextrema, pminimum, pmaximum, pmean, and pcov.\n\n\n\n\n\n","category":"type"},{"location":"statstools.html#Rimu.StatsTools.particles-Tuple{Any, Any, Any}","page":"StatsTools","title":"Rimu.StatsTools.particles","text":"particles(samples, μ, σ)\nparticles(samples, μ::AbstractVector, Σ::AbstractMatrix)\n\nReturn Particles object from MonteCarloMeasurements with single- or multivariate normal distribution. Zero variance parameters are supported.\n\n\n\n\n\n","category":"method"},{"location":"statstools.html#Rimu.StatsTools.particles-Tuple{Any, Distributions.Distribution}","page":"StatsTools","title":"Rimu.StatsTools.particles","text":"particles(samples, d)\nparticles(::Nothing, d)\nparticles(::Val{T}, d) where T\n\nReturn Particles object from  MonteCarloMeasurements using  a type-stable constructor if possible. Pass nothing for the default number of particles or Val(1_000) for using 1000 particles in a type-stable manner. If d is a Particles object it is passed through without re-sampling.\n\n\n\n\n\n","category":"method"},{"location":"statstools.html#Rimu.StatsTools.ratio_estimators-Tuple{AbstractVector{<:Real}, AbstractVector{<:Real}}","page":"StatsTools","title":"Rimu.StatsTools.ratio_estimators","text":"ratio_estimators(x, y, [k]; corrected=true, mc_samples=10_000) -> (; r, f, σ_f, δ_y, n)\n\nEstimators for the ratio of means mean(x)/mean(y). If k is given, k-1 blocking steps are performed to remove internal correlations in the time series x and y. Otherwise these are assumed to be free of internal correlations. Correlations between x and y may be present and are taken into account.\n\nReturn values:\n\nr::Particles is the Monte Carlo sampled ratio estimator, see Particles\nf = mean(x)/mean(y)\nσ_f standard deviation of f from linear error propagation (normal approximation)\nδ_y = std(y)/mean(y) coefficient of variation; < 0.1 for normal approximation to work\nn: number of uncorrelated data used for uncertainty estimation\n\n\n\n\n\n","category":"method"},{"location":"statstools.html#Rimu.StatsTools.x_by_y_linear-NTuple{5, Any}","page":"StatsTools","title":"Rimu.StatsTools.x_by_y_linear","text":"x_by_y_linear(μ_x,μ_y,σ_x,σ_y,ρ) -> f, σ_f\n\nLinear error propagation for ratio f = x/y assuming x and y are correlated normal random variables and assuming the ratio can be approximated as a normal distribution. See wikipedia and Díaz-Francés, Rubio (2013).\n\nσ_f = sqrtfracσ_xμ_y^2 + fracμ_x σ_yμ_y^2^2 - frac2 ρ μ_xμ_y^3\n\n\n\n\n\n","category":"method"},{"location":"statstools.html#Core.NamedTuple-Tuple{Rimu.StatsTools.BlockingResult}","page":"StatsTools","title":"Core.NamedTuple","text":"NamedTuple(x::BlockingResult; n=1, p=nothing, name=:val)\nNamedTuple(x::RatioBlockingResult; n=1, p=nothing, name=:val)\n\nReturn a named tuple with value and error bars (see val_and_errs) as well as additional numerical fields relevant for x.\n\nExample:\n\njulia> results = [blocking_analysis(i:0.1:2i+20) for i in 1:3]; # mock results\n\njulia> df = NamedTuple.(results, name=:res)|>DataFrame\n3×7 DataFrame\n Row │ res      res_l    res_u    res_err_err  res_p_cov  res_k  res_blocks\n     │ Float64  Float64  Float64  Float64      Float64    Int64  Int64\n─────┼──────────────────────────────────────────────────────────────────────\n   1 │    11.5  1.7282   1.7282      0.352767    2.98667      5          13\n   2 │    13.0  1.7282   1.7282      0.352767    2.98667      5          13\n   3 │    14.5  1.78885  1.78885     0.350823    3.2          5          14\n\njulia> rbs = ratio_of_means(1 .+sin.(1:0.1:11),2 .+sin.(2:0.1:12)); # more mock results\n\njulia> [NamedTuple(rbs),]|>DataFrame\n1×9 DataFrame\n Row │ val       val_l      val_u      val_f     val_σ_f    val_δ_y    val_k  val_blocks  val_success\n     │ Float64   Float64    Float64    Float64   Float64    Float64    Int64  Int64       Bool\n─────┼────────────────────────────────────────────────────────────────────────────────────────────────\n   1 │ 0.581549  0.0925669  0.0812292  0.560532  0.0875548  0.0875548      4          12         true\n\n\nSee val_and_errs, val, errs, BlockingResult, RatioBlockingResult.\n\n\n\n\n\n","category":"method"},{"location":"statstools.html#Rimu.StatsTools.autocovariance-Tuple{AbstractVector, Int64}","page":"StatsTools","title":"Rimu.StatsTools.autocovariance","text":"autocovariance(v::Vector,h::Int; corrected::Bool=true)\n\nhatgamma(h) =frac1nsum_t=1^n-h(v_t+h-barv)(v_t-barv)^* Calculate the autocovariance of dataset v with a delay h. If corrected is true (the default) then the sum is scaled with n-h, whereas the sum is scaled with n if corrected is false where n = length(v).\n\n\n\n\n\n","category":"method"},{"location":"statstools.html#Rimu.StatsTools.pseudo_cov-Tuple{Any, Any}","page":"StatsTools","title":"Rimu.StatsTools.pseudo_cov","text":"pseudo_cov(x, y; xmean = mean(x), ymean = mean(y), corrected = true)\n\nCompute the pseudo covariance between collections x and y returning a scalar:\n\nfrac1nsum_i=1^n (x_i - barx)(y_i - bary)\n\nOptionally, precomputed means can be passed as keyword arguments. pseudo_cov(x,y) is functionally equivalent to Statistics.cov(x, conj(y); corrected = false) but it is found to be significantly faster and avoids allocations.\n\n\n\n\n\n","category":"method"},{"location":"statstools.html#Rimu.StatsTools.determine_constant_time_step-Tuple{Any}","page":"StatsTools","title":"Rimu.StatsTools.determine_constant_time_step","text":"determine_constant_time_step(df) -> time_step\n\nGiven a DataFrame df, determine the time step that was used to compute it. Throw an error if time step is not constant.\n\n\n\n\n\n","category":"method"},{"location":"statstools.html#Index","page":"StatsTools","title":"Index","text":"","category":"section"},{"location":"statstools.html","page":"StatsTools","title":"StatsTools","text":"Pages   = [\"statstools.md\"]","category":"page"},{"location":"interfaces.html#Module-Interfaces","page":"Interfaces","title":"Module Interfaces","text":"","category":"section"},{"location":"interfaces.html","page":"Interfaces","title":"Interfaces","text":"Interfaces","category":"page"},{"location":"interfaces.html#Rimu.Interfaces","page":"Interfaces","title":"Rimu.Interfaces","text":"module Interfaces\n\nThis module contains interfaces that can be used to extend and modify the algorithms and behaviours of Rimu.\n\nInterfaces\n\nFollow the links for the definitions of the interfaces!\n\nAbstractHamiltonian for defining Hamiltonians\nAbstractOperator for defining observable operators\nAbstractDVec for defining data structures for Rimu as in DictVectors\nStochasticStyle for controlling the stochastic algorithms used by ProjectorMonteCarloProblem as implemented in StochasticStyles\n\nAdditional exports\n\nInterface functions forAbstractHamiltonians:\n\ndiagonal_element\nnum_offdiagonals\nget_offdiagonal\noffdiagonals.\nrandom_offdiagonal\nstarting_address\nLOStructure\nallows_address_type\n\nworking with  AbstractDVecs and StochasticStyle\n\ndeposit!\ndefault_style\nCompressionStrategy\nThe interface from VectorInterface.jl.\n\nFunctions Rimu.jl uses to do FCIQMC:\n\napply_column!\napply_operator!\nstep_stats\n\n\n\n\n\n","category":"module"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"EditURL = \"../../../scripts/HO-example.jl\"","category":"page"},{"location":"generated/HO-example.html#Example-5:-Degenerate-perturbation-theory-in-a-harmonic-oscillator-basis","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Example 5: Degenerate perturbation theory in a harmonic oscillator basis","text":"","category":"section"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"Rimu can also handle non-lattice systems. This example looks at weakly-interacting bosonic particles in a harmonic oscillator external potential using a basis of (Cartesian product) single-particle eigenstates of the harmonic oscillator potential. Blocks of degenerate non-interacting states are coupled by a contact interaction in first order degenerate perturbation theory. This example shows how to generate these blocks and find the energy and angular momentum eigenstates.","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"A runnable script for this example is located here. Run it with julia HO-example.jl.","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"First, load all needed packages.","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"using Rimu\nusing DataFrames\nusing LinearAlgebra","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"Define the system size for N=2 particles in a 2D harmonic oscillator allowing M=4 levels in each dimension, including the groundstate.","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"N = 2\nM = 4;","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"Use a tuple S to define the range of harmonic oscillator states in a Cartesian basis, in this isotropic case n_xn_y=01ldotsM-1.","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"S = (M, M);","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"In Rimu the N-particle states are still stored as Fock states.","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"P = prod(S)\naddr = BoseFS(P, M => N)","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"BoseFS{2,16}(0, 0, 0, 2, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0)","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"Here, the numbering of the modes folds in the two spatial dimensions.  Use the utility function fock_to_cart to convert a Fock address to human-readable Cartesian quantum numbers for inspection.","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"fock_to_cart(addr, S)","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"2-element StaticArraysCore.SVector{2, Tuple{Int64, Int64}} with indices SOneTo(2):\n (3, 0)\n (3, 0)","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"The output shows that all N particles are in single-particle state n_x=M-1 n_y=0.","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"The harmonic oscillator Hamiltonian HOCartesianContactInteractions handles contact interactions with first-order perturbation theory, so the matrix representation will block according to the non-interacting energy of the basis states. The first task is to find all blocks of basis states with the same energy. The strength of the interaction is not relevant at this point, just that it is non-zero. Use an arbitrary N-particle starting address to build the Hamiltonian.","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"H = HOCartesianContactInteractions(BoseFS(P, 1 => N); S);","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"Then, use the utility function get_all_blocks to find all blocks. The blocks are found by looping over all possible states with N particles in Cartesian states defined by S. Note that this will only work for total energy up to the maximum accessible by a single particle. The N-particle groundstate energy for a 2D harmonic oscillator is E_0 = N hbar omega and the maximum single-particle energy is E = (E_0 + M - 1) hbar omega.","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"block_df = get_all_blocks(H; max_energy = N + M - 1)","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"<div><div style = \"float: left;\"><span>7×6 DataFrame</span></div><div style = \"clear: both;\"></div></div><div class = \"data-frame\" style = \"overflow-x: scroll;\"><table class = \"data-frame\" style = \"margin-bottom: 6px;\"><thead><tr class = \"header\"><th class = \"rowNumber\" style = \"font-weight: bold; text-align: right;\">Row</th><th style = \"text-align: left;\">block_id</th><th style = \"text-align: left;\">block_E0</th><th style = \"text-align: left;\">block_size</th><th style = \"text-align: left;\">addr</th><th style = \"text-align: left;\">indices</th><th style = \"text-align: left;\">t_basis</th></tr><tr class = \"subheader headerLastRow\"><th class = \"rowNumber\" style = \"font-weight: bold; text-align: right;\"></th><th title = \"Int64\" style = \"text-align: left;\">Int64</th><th title = \"Float64\" style = \"text-align: left;\">Float64</th><th title = \"Int64\" style = \"text-align: left;\">Int64</th><th title = \"BoseFS{2, 16, BitString{17, 1, UInt32}}\" style = \"text-align: left;\">BoseFS…</th><th title = \"Tuple{Int64, Int64}\" style = \"text-align: left;\">Tuple…</th><th title = \"Float64\" style = \"text-align: left;\">Float64</th></tr></thead><tbody><tr><td class = \"rowNumber\" style = \"font-weight: bold; text-align: right;\">1</td><td style = \"text-align: right;\">1</td><td style = \"text-align: right;\">2.0</td><td style = \"text-align: right;\">1</td><td style = \"text-align: left;\">fs&quot;|2 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0⟩&quot;</td><td style = \"text-align: left;\">(1, 1)</td><td style = \"text-align: right;\">0.537659</td></tr><tr><td class = \"rowNumber\" style = \"font-weight: bold; text-align: right;\">2</td><td style = \"text-align: right;\">2</td><td style = \"text-align: right;\">3.0</td><td style = \"text-align: right;\">1</td><td style = \"text-align: left;\">fs&quot;|1 1 0 0 0 0 0 0 0 0 0 0 0 0 0 0⟩&quot;</td><td style = \"text-align: left;\">(2, 1)</td><td style = \"text-align: right;\">1.6702e-5</td></tr><tr><td class = \"rowNumber\" style = \"font-weight: bold; text-align: right;\">3</td><td style = \"text-align: right;\">3</td><td style = \"text-align: right;\">4.0</td><td style = \"text-align: right;\">4</td><td style = \"text-align: left;\">fs&quot;|0 2 0 0 0 0 0 0 0 0 0 0 0 0 0 0⟩&quot;</td><td style = \"text-align: left;\">(2, 2)</td><td style = \"text-align: right;\">1.7964e-5</td></tr><tr><td class = \"rowNumber\" style = \"font-weight: bold; text-align: right;\">4</td><td style = \"text-align: right;\">4</td><td style = \"text-align: right;\">5.0</td><td style = \"text-align: right;\">5</td><td style = \"text-align: left;\">fs&quot;|0 1 1 0 0 0 0 0 0 0 0 0 0 0 0 0⟩&quot;</td><td style = \"text-align: left;\">(3, 2)</td><td style = \"text-align: right;\">1.053e-5</td></tr><tr><td class = \"rowNumber\" style = \"font-weight: bold; text-align: right;\">5</td><td style = \"text-align: right;\">5</td><td style = \"text-align: right;\">3.0</td><td style = \"text-align: right;\">1</td><td style = \"text-align: left;\">fs&quot;|1 0 0 0 1 0 0 0 0 0 0 0 0 0 0 0⟩&quot;</td><td style = \"text-align: left;\">(5, 1)</td><td style = \"text-align: right;\">1.302e-6</td></tr><tr><td class = \"rowNumber\" style = \"font-weight: bold; text-align: right;\">6</td><td style = \"text-align: right;\">6</td><td style = \"text-align: right;\">4.0</td><td style = \"text-align: right;\">2</td><td style = \"text-align: left;\">fs&quot;|0 1 0 0 1 0 0 0 0 0 0 0 0 0 0 0⟩&quot;</td><td style = \"text-align: left;\">(5, 2)</td><td style = \"text-align: right;\">2.895e-6</td></tr><tr><td class = \"rowNumber\" style = \"font-weight: bold; text-align: right;\">7</td><td style = \"text-align: right;\">7</td><td style = \"text-align: right;\">5.0</td><td style = \"text-align: right;\">5</td><td style = \"text-align: left;\">fs&quot;|0 0 1 0 1 0 0 0 0 0 0 0 0 0 0 0⟩&quot;</td><td style = \"text-align: left;\">(5, 3)</td><td style = \"text-align: right;\">9.408e-6</td></tr></tbody></table></div>","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"This outputs a list of blocks in H indexed by the noninteracting energy of all states in the block, and a single address that can be used to rebuild the block for further analysis.","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"addr1 = block_df[7,:addr]\nE = block_df[7,:block_E0]","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"5.0","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"First, notice that all basis states have the same energy, defined by the block.","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"basis1 = build_basis(H, addr1)\nmap(b -> Hamiltonians.noninteracting_energy(H, b), basis1)","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"5-element Vector{Float64}:\n 5.0\n 5.0\n 5.0\n 5.0\n 5.0","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"There are two blocks at each energy level (except the groundstate), which are different due to parity conservation, which is the only other symmetry in the Cartesian harmonic oscillator. The basis of this other block is different,","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"addr2 = block_df[4,:addr]\nbasis2 = build_basis(H, addr2);\nbasis1 ≠ basis2","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"true","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"but its basis elements have the same energy.","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"map(b -> Hamiltonians.noninteracting_energy(H, b), basis2)","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"5-element Vector{Float64}:\n 5.0\n 5.0\n 5.0\n 5.0\n 5.0","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"However, since this system is an isotropic harmonic oscillator, it is possible to build simultaneous eigenstates of the angular momentum operator L_z, implemented with AxialAngularMomentumHO.","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"Lz = AxialAngularMomentumHO(S)","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"AxialAngularMomentumHO((4, 4); z_dim = 3, addr = BoseFS{0,16}(0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0))","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"L_z does not conserve parity, so both blocks are required. First combine the bases of each block and convert to DVecs.","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"dvs = map(b -> DVec(b => 1.0), vcat(basis1, basis2));","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"and then compute overlaps for the matrix elements of L_z.","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"Lz_mat = [dot(v, Lz, w) for v in dvs, w in dvs]","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"10×10 Matrix{ComplexF64}:\n 0.0+0.0im      0.0+0.0im      0.0+0.0im      0.0+0.0im      0.0+0.0im      0.0+1.0im      0.0+0.0im      0.0-1.41421im  0.0+0.0im      0.0+0.0im\n 0.0+0.0im      0.0+0.0im      0.0+0.0im      0.0+0.0im      0.0+0.0im      0.0+1.41421im  0.0+0.0im      0.0-1.0im      0.0-1.41421im  0.0+0.0im\n 0.0+0.0im      0.0+0.0im      0.0+0.0im      0.0+0.0im      0.0+0.0im      0.0+0.0im      0.0+1.73205im  0.0+0.0im      0.0+0.0im      0.0-2.0im\n 0.0+0.0im      0.0+0.0im      0.0+0.0im      0.0+0.0im      0.0+0.0im      0.0+0.0im      0.0+0.0im      0.0+1.41421im  0.0+1.0im      0.0+0.0im\n 0.0+0.0im      0.0+0.0im      0.0+0.0im      0.0+0.0im      0.0+0.0im      0.0+0.0im      0.0+0.0im      0.0+0.0im      0.0+0.0im      0.0+1.73205im\n 0.0-1.0im      0.0-1.41421im  0.0+0.0im      0.0+0.0im      0.0+0.0im      0.0+0.0im      0.0+0.0im      0.0+0.0im      0.0+0.0im      0.0+0.0im\n 0.0+0.0im      0.0+0.0im      0.0-1.73205im  0.0+0.0im      0.0+0.0im      0.0+0.0im      0.0+0.0im      0.0+0.0im      0.0+0.0im      0.0+0.0im\n 0.0+1.41421im  0.0+1.0im      0.0+0.0im      0.0-1.41421im  0.0+0.0im      0.0+0.0im      0.0+0.0im      0.0+0.0im      0.0+0.0im      0.0+0.0im\n 0.0+0.0im      0.0+1.41421im  0.0+0.0im      0.0-1.0im      0.0+0.0im      0.0+0.0im      0.0+0.0im      0.0+0.0im      0.0+0.0im      0.0+0.0im\n 0.0+0.0im      0.0+0.0im      0.0+2.0im      0.0+0.0im      0.0-1.73205im  0.0+0.0im      0.0+0.0im      0.0+0.0im      0.0+0.0im      0.0+0.0im","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"By diagonalising this matrix the eigenstate have energy E and well-defined angular momentum.","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"Diagonalise this matrix to obtain the eigenstates of L_z. The eigenvectors provide the linear combinations of basis states with well-defined angular momentum, within the subspace of energy E.","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"Lz_vals, Lz_vecs = eigen(Lz_mat)","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"Eigen{ComplexF64, Float64, Matrix{ComplexF64}, Vector{Float64}}\nvalues:\n10-element Vector{Float64}:\n -2.9999999999999956\n -2.999999999999991\n -0.9999999999999991\n -0.9999999999999982\n -0.9999999999999973\n  1.0000000000000002\n  1.0000000000000027\n  1.0000000000000027\n  3.0\n  3.0000000000000004\nvectors:\n10×10 Matrix{ComplexF64}:\n       0.0+0.0im       -5.55112e-17-0.353553im         0.534676-0.217841im      2.77556e-17-0.204124im             0.0+0.0im           0.534676+0.217841im      2.77556e-17+0.204124im             0.0+0.0im       -5.55112e-17+0.353553im           0.0+0.0im\n       0.0+0.0im        5.55112e-17-0.5im             -0.378073+0.154037im              0.0-0.288675im             0.0+0.0im          -0.378073-0.154037im     -5.55112e-17+0.288675im             0.0+0.0im                0.0+0.5im                0.0+0.0im\n       0.0+0.612372im           0.0+0.0im          -5.55112e-17+0.0im           -1.2326e-32+2.77556e-17im          0.0+0.353553im           0.0+0.0im                   0.0+2.77556e-17im          0.0+0.353553im           0.0+0.0im                0.0+0.612372im\n       0.0+0.0im                0.0+0.353553im      5.55112e-17+6.93889e-17im           0.0-0.612372im             0.0+0.0im        5.55112e-17-1.38778e-16im           0.0+0.612372im             0.0+0.0im                0.0-0.353553im           0.0+0.0im\n       0.0-0.353553im    1.2326e-32+1.11022e-16im   5.55112e-17-2.77556e-17im  -2.46519e-32-2.77556e-17im          0.0+0.612372im  -1.11022e-16-2.77556e-17im   4.93038e-32-2.77556e-17im          0.0+0.612372im   -1.2326e-32+8.32667e-17im        0.0-0.353553im\n       0.0+0.0im           0.353553+0.0im                   0.0+0.0im              0.612372+0.0im                  0.0+0.0im                0.0+0.0im              0.612372+0.0im                  0.0+0.0im           0.353553+0.0im                0.0+0.0im\n -0.353553+0.0im                0.0+0.0im                   0.0+0.0im                   0.0+0.0im            -0.612372+0.0im                0.0+0.0im                   0.0+0.0im             0.612372+0.0im                0.0+0.0im           0.353553+0.0im\n       0.0+0.0im               -0.5+7.02973e-17im     -0.154037-0.378073im         0.288675-1.95105e-16im          0.0+0.0im          -0.154037+0.378073im         0.288675+2.29062e-16im          0.0+0.0im               -0.5-7.48398e-17im        0.0+0.0im\n       0.0+0.0im          -0.353553+8.84171e-17im      0.217841+0.534676im         0.204124-1.1389e-16im   8.32667e-17+0.0im           0.217841-0.534676im         0.204124+2.4427e-16im   8.32667e-17+0.0im          -0.353553-8.31718e-17im        0.0+0.0im\n  0.612372+0.0im                0.0+0.0im                   0.0+0.0im                   0.0+0.0im            -0.353553-0.0im                0.0+0.0im                   0.0+0.0im             0.353553+0.0im                0.0+0.0im          -0.612372-0.0im","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"Finally, consider the effect of interactions by looking at how states in a single block are perturbed. Only the energy shift due to the interaction is relevant so now rebuild the Hamiltonian without the non-interacting energy.","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"Hint = HOCartesianContactInteractions(addr1; S, interaction_only = true)\nΔE = eigvals(Matrix(Hint, addr1))","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"5-element Vector{Float64}:\n -1.6810327175633306e-17\n  3.469966302164114e-17\n  0.15915494309189535\n  0.1591549430918954\n  0.1591549430918954","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"Two eigenstates in this block are unaffected by the interaction and three have a non-zero energy shift.","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"The default strength of the interaction is g = 1.0. Other interactions strengths can be obtained by using keyword argument g in HOCartesianContactInteractions or by rescaling ΔE since the interactions are handled with first-order perturbation theory.","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"Rimu also contains HOCartesianEnergyConservedPerDim which is a similar Hamiltonian but with the stricter condition that the contact interaction only connects states that have the same total energy in each dimension, rather than conserving the overall total energy. Both Hamiltonians can handle anisotropic systems by passing a tuple S whose elements are not all the same. This will alter which states are connected by the interaction, but assumes that the harmonic trapping frequencies in each dimension are commensurate.","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"This page was generated using Literate.jl.","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"EditURL = \"../../../scripts/exact-example.jl\"","category":"page"},{"location":"generated/exact-example.html#Example-4:-Exact-diagonalization","page":"Exact diagonalization","title":"Example 4: Exact diagonalization","text":"","category":"section"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"When working with smaller systems or when multiple eigenvalues of a system are required, one can use an exact diagonalization method. There are a few ways to go about this, each with its pros and cons. The purpose of this tutorial is to show off the methods as well as provide a few tips regarding them.","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"A runnable script for this example is located here. Run it with julia exact-example.jl.","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"We start by loading Rimu.","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"using Rimu","category":"page"},{"location":"generated/exact-example.html#Introduction","page":"Exact diagonalization","title":"Introduction","text":"","category":"section"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"We will look at a bosonic system of 4 particles in 5 sites, formulated in momentum space. Let's start by building the Hamiltonian. To create a Fock state where all particles have zero momentum, we put all the particles in the mode at the centre of the address.","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"M = 5\nN = 4\nadd = BoseFS(M, cld(M, 2) => N)\nham = HubbardMom1D(add)","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"HubbardMom1D(fs\"|0 0 4 0 0⟩\"; u=1.0, t=1.0)","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"Before performing exact diagonalization, it is a good idea to check the dimension of the Hamiltonian.","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"dimension(ham)","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"70","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"Keep in mind that this is an estimate of the number of Fock states the Hamiltonian can act on, not the actual matrix size - the matrix size can sometimes be smaller. It can still be used as a guide to decide whether a Hamiltonian is amenable to exact diagonalization and to determine which algorithm would be best suited to diagonalising it.","category":"page"},{"location":"generated/exact-example.html#The-BasisSetRepresentation","page":"Exact diagonalization","title":"The BasisSetRepresentation","text":"","category":"section"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"As we'll see later, there are two ways to construct the matrices from Hamiltonians directly, but they both use BasisSetRepresentation under the hood. The BasisSetRepresentation, when called with a Hamiltonian and optionally a starting address, constructs the sparse matrix of the system, as well as its basis. The starting address defaults to the one that was used to initialize the Hamiltonian. BasisSetRepresentation only returns the part of the matrix that is accessible from this starting address through non-zero offdiagonal elements.","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"bsr = BasisSetRepresentation(ham);","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"To access the matrix or basis, access the sparse_matrix and basis fields, respectively.","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"bsr.sparse_matrix","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"14×14 SparseArrays.SparseMatrixCSC{Float64, Int64} with 104 stored entries:\n -6.8       0.69282   0.69282    ⋅         ⋅         ⋅         ⋅          ⋅         ⋅         ⋅         ⋅         ⋅         ⋅         ⋅ \n  0.69282  -3.03607   0.4       0.8       0.4       0.8       0.4        0.565685  0.282843   ⋅         ⋅         ⋅         ⋅         ⋅ \n  0.69282   0.4       1.43607   0.4       0.8       0.4       0.8         ⋅        0.282843  0.565685   ⋅         ⋅         ⋅         ⋅ \n   ⋅        0.8       0.4       0.581966  0.4        ⋅        0.4        0.282843  0.565685   ⋅        0.69282   0.69282    ⋅         ⋅ \n   ⋅        0.4       0.8       0.4       2.81803   0.4        ⋅          ⋅        0.565685  0.282843  0.69282    ⋅        0.69282    ⋅ \n   ⋅        0.8       0.4        ⋅        0.4       0.581966  0.4        0.282843  0.565685   ⋅         ⋅         ⋅        0.69282   0.69282\n   ⋅        0.4       0.8       0.4        ⋅        0.4       2.81803     ⋅        0.565685  0.282843   ⋅        0.69282    ⋅        0.69282\n   ⋅        0.565685   ⋅        0.282843   ⋅        0.282843   ⋅        -0.472136  0.8        ⋅        0.489898   ⋅         ⋅        0.489898\n   ⋅        0.282843  0.282843  0.565685  0.565685  0.565685  0.565685   0.8       4.4       0.8       0.489898  0.489898  0.489898  0.489898\n   ⋅         ⋅        0.565685   ⋅        0.282843   ⋅        0.282843    ⋅        0.8       8.47214    ⋅        0.489898  0.489898   ⋅ \n   ⋅         ⋅         ⋅        0.69282   0.69282    ⋅         ⋅         0.489898  0.489898   ⋅        1.56393    ⋅         ⋅         ⋅ \n   ⋅         ⋅         ⋅        0.69282    ⋅         ⋅        0.69282     ⋅        0.489898  0.489898   ⋅        6.03607    ⋅         ⋅ \n   ⋅         ⋅         ⋅         ⋅        0.69282   0.69282    ⋅          ⋅        0.489898  0.489898   ⋅         ⋅        6.03607    ⋅ \n   ⋅         ⋅         ⋅         ⋅         ⋅        0.69282   0.69282    0.489898  0.489898   ⋅         ⋅         ⋅         ⋅        1.56393","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"bsr.basis","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"14-element Vector{BoseFS{4, 5, BitString{8, 1, UInt8}}}:\n fs\"|0 0 4 0 0⟩\"\n fs\"|0 1 2 1 0⟩\"\n fs\"|1 0 2 0 1⟩\"\n fs\"|1 0 1 2 0⟩\"\n fs\"|0 0 1 1 2⟩\"\n fs\"|0 2 1 0 1⟩\"\n fs\"|2 1 1 0 0⟩\"\n fs\"|0 2 0 2 0⟩\"\n fs\"|1 1 0 1 1⟩\"\n fs\"|2 0 0 0 2⟩\"\n fs\"|0 0 0 3 1⟩\"\n fs\"|3 0 0 1 0⟩\"\n fs\"|0 1 0 0 3⟩\"\n fs\"|1 3 0 0 0⟩\"","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"When the basis is not needed, we can use Matrix or sparse directly.","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"Matrix(ham)","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"14×14 Matrix{Float64}:\n -6.8       0.69282   0.69282   0.0       0.0       0.0       0.0        0.0       0.0       0.0       0.0       0.0       0.0       0.0\n  0.69282  -3.03607   0.4       0.8       0.4       0.8       0.4        0.565685  0.282843  0.0       0.0       0.0       0.0       0.0\n  0.69282   0.4       1.43607   0.4       0.8       0.4       0.8        0.0       0.282843  0.565685  0.0       0.0       0.0       0.0\n  0.0       0.8       0.4       0.581966  0.4       0.0       0.4        0.282843  0.565685  0.0       0.69282   0.69282   0.0       0.0\n  0.0       0.4       0.8       0.4       2.81803   0.4       0.0        0.0       0.565685  0.282843  0.69282   0.0       0.69282   0.0\n  0.0       0.8       0.4       0.0       0.4       0.581966  0.4        0.282843  0.565685  0.0       0.0       0.0       0.69282   0.69282\n  0.0       0.4       0.8       0.4       0.0       0.4       2.81803    0.0       0.565685  0.282843  0.0       0.69282   0.0       0.69282\n  0.0       0.565685  0.0       0.282843  0.0       0.282843  0.0       -0.472136  0.8       0.0       0.489898  0.0       0.0       0.489898\n  0.0       0.282843  0.282843  0.565685  0.565685  0.565685  0.565685   0.8       4.4       0.8       0.489898  0.489898  0.489898  0.489898\n  0.0       0.0       0.565685  0.0       0.282843  0.0       0.282843   0.0       0.8       8.47214   0.0       0.489898  0.489898  0.0\n  0.0       0.0       0.0       0.69282   0.69282   0.0       0.0        0.489898  0.489898  0.0       1.56393   0.0       0.0       0.0\n  0.0       0.0       0.0       0.69282   0.0       0.0       0.69282    0.0       0.489898  0.489898  0.0       6.03607   0.0       0.0\n  0.0       0.0       0.0       0.0       0.69282   0.69282   0.0        0.0       0.489898  0.489898  0.0       0.0       6.03607   0.0\n  0.0       0.0       0.0       0.0       0.0       0.69282   0.69282    0.489898  0.489898  0.0       0.0       0.0       0.0       1.56393","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"sparse(ham)","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"14×14 SparseArrays.SparseMatrixCSC{Float64, Int64} with 104 stored entries:\n -6.8       0.69282   0.69282    ⋅         ⋅         ⋅         ⋅          ⋅         ⋅         ⋅         ⋅         ⋅         ⋅         ⋅ \n  0.69282  -3.03607   0.4       0.8       0.4       0.8       0.4        0.565685  0.282843   ⋅         ⋅         ⋅         ⋅         ⋅ \n  0.69282   0.4       1.43607   0.4       0.8       0.4       0.8         ⋅        0.282843  0.565685   ⋅         ⋅         ⋅         ⋅ \n   ⋅        0.8       0.4       0.581966  0.4        ⋅        0.4        0.282843  0.565685   ⋅        0.69282   0.69282    ⋅         ⋅ \n   ⋅        0.4       0.8       0.4       2.81803   0.4        ⋅          ⋅        0.565685  0.282843  0.69282    ⋅        0.69282    ⋅ \n   ⋅        0.8       0.4        ⋅        0.4       0.581966  0.4        0.282843  0.565685   ⋅         ⋅         ⋅        0.69282   0.69282\n   ⋅        0.4       0.8       0.4        ⋅        0.4       2.81803     ⋅        0.565685  0.282843   ⋅        0.69282    ⋅        0.69282\n   ⋅        0.565685   ⋅        0.282843   ⋅        0.282843   ⋅        -0.472136  0.8        ⋅        0.489898   ⋅         ⋅        0.489898\n   ⋅        0.282843  0.282843  0.565685  0.565685  0.565685  0.565685   0.8       4.4       0.8       0.489898  0.489898  0.489898  0.489898\n   ⋅         ⋅        0.565685   ⋅        0.282843   ⋅        0.282843    ⋅        0.8       8.47214    ⋅        0.489898  0.489898   ⋅ \n   ⋅         ⋅         ⋅        0.69282   0.69282    ⋅         ⋅         0.489898  0.489898   ⋅        1.56393    ⋅         ⋅         ⋅ \n   ⋅         ⋅         ⋅        0.69282    ⋅         ⋅        0.69282     ⋅        0.489898  0.489898   ⋅        6.03607    ⋅         ⋅ \n   ⋅         ⋅         ⋅         ⋅        0.69282   0.69282    ⋅          ⋅        0.489898  0.489898   ⋅         ⋅        6.03607    ⋅ \n   ⋅         ⋅         ⋅         ⋅         ⋅        0.69282   0.69282    0.489898  0.489898   ⋅         ⋅         ⋅         ⋅        1.56393","category":"page"},{"location":"generated/exact-example.html#Computing-eigenvalues","page":"Exact diagonalization","title":"Computing eigenvalues","text":"","category":"section"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"Now that we have a way of constructing matrices from Hamiltonians, we can use standard Julia functionality to diagonalise them.","category":"page"},{"location":"generated/exact-example.html#The-built-in-method","page":"Exact diagonalization","title":"The built-in method","text":"","category":"section"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"Let's begin by looking at the eigen, eigvecs, and eigvals functions from the LinearAlgebra standard library. They operate on dense matrices and return the full spectra, hence they are only useful for small systems, or when all eigenvalues are required.","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"using LinearAlgebra\n\nmat = Matrix(ham)\neig = eigen(mat);","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"The values can be accessed like so:","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"eig.values","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"14-element Vector{Float64}:\n -6.9798639983216155\n -3.363124291613371\n -0.7590191922770746\n  0.1358418221962303\n  0.1578999869460933\n  0.8767114411781396\n  1.530592997097333\n  1.5835732611867464\n  3.072870330325867\n  3.125672653951849\n  4.862107221562182\n  6.26069485038059\n  6.402671211183119\n  9.093371706203957","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"The vectors are stored as columns in eig.vectors:","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"eig.vectors","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"14×14 Matrix{Float64}:\n -0.980348     0.175378     0.0135766   -2.81719e-15  -0.0221221  -0.0697193   1.3739e-15    0.0314466   -2.35922e-16  -0.0360987   -0.0161557  -5.55112e-17   0.00625248  -0.0058099\n  0.177701     0.932229     0.105473     3.01009e-14   0.225254   -0.132826    9.71445e-17  -0.00292026  -2.09555e-15  -0.0861158   -0.0907789  -4.996e-16     0.0591715   -0.0264275\n  0.0768085   -0.0622307    0.0129069   -6.06251e-14  -0.447424   -0.63969     2.05322e-14   0.383444    -6.54338e-15  -0.431051    -0.181167   -6.10623e-16   0.0599783   -0.106852\n -0.0214153   -0.175119    -0.20169      0.616673      0.522017   -0.296818   -0.31234      -0.122119    -0.123629     -0.106455    -0.126661    0.0829132     0.148347    -0.0574235\n -0.0119687   -0.0373038    0.0678797    0.0693699     0.0495446   0.416847    0.33773       0.0584554   -0.601232     -0.467179    -0.215841   -0.140166      0.190543    -0.114342\n -0.0214153   -0.175119    -0.20169     -0.616673      0.522017   -0.296818    0.31234      -0.122119     0.123629     -0.106455    -0.126661   -0.0829132     0.148347    -0.0574235\n -0.0119687   -0.0373038    0.0678797   -0.0693699     0.0495446   0.416847   -0.33773       0.0584554    0.601232     -0.467179    -0.215841    0.140166      0.190543    -0.114342\n -0.0138439   -0.165902     0.922758     1.00753e-14   0.1111     -0.172508   -1.30521e-14  -0.207974     2.66454e-15   0.0848902   -0.149153   -8.32667e-16   0.0712921   -0.0301968\n -0.00234782   0.00840544  -0.098969    -9.6867e-15   -0.0847116   0.082999    1.51129e-14   0.274424     3.60822e-15   0.575786    -0.61385    -2.72005e-15   0.353775    -0.259338\n -0.00237613   0.00294196   0.00143189   5.56152e-15   0.0427486   0.0110863  -3.72619e-15  -0.0663108    9.50628e-16   0.00167015   0.0832916   2.91434e-15  -0.448519    -0.8863\n  0.00363555   0.0455298   -0.133824    -0.332825     -0.290831   -0.057199   -0.527627     -0.588225    -0.332816     -0.0472302   -0.18528    -0.00844536    0.0915588   -0.0346434\n  0.00195478   0.0150664    0.0206752   -0.0642658    -0.0638689  -0.0250518   0.0999631    -0.012992    -0.111668      0.0393523    0.423534    0.688046      0.513839    -0.222499\n  0.00195478   0.0150664    0.0206752    0.0642658    -0.0638689  -0.0250518  -0.0999631    -0.012992     0.111668      0.0393523    0.423534   -0.688046      0.513839    -0.222499\n  0.00363555   0.0455298   -0.133824     0.332825     -0.290831   -0.057199    0.527627     -0.588225     0.332816     -0.0472302   -0.18528     0.00844536    0.0915588   -0.0346434","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"If you need the full spectrum, but would like to use less memory, consider using the in-place eigen!.","category":"page"},{"location":"generated/exact-example.html#Iterative-sparse-solvers","page":"Exact diagonalization","title":"Iterative sparse solvers","text":"","category":"section"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"For larger Hamiltonians, it is better to use an iterative solver. There are several options. We will look at eigs from Arpack.jl and eigsolve from KrylovKit.jl.","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"Let's start with Arpack's eigs. It is important to set the nev and which keyword arguments. nev sets the number of eigenpairs to find. which should in most cases be set to :SR, which will find the eigenvalues with the smallest real part.","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"using Arpack\n\nnum_eigvals = 3\n\nsparse_matrix = sparse(ham)\nvals_ar, vecs_ar = eigs(sparse_matrix; which=:SR, nev=num_eigvals)\nvals_ar","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"3-element Vector{Float64}:\n -6.979863998321619\n -3.3631242916133606\n -0.7590191922770747","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"Using KrylovKit's eigsolve is similar, but the nev and which are given as positional arguments. Note that KrylovKit may sometimes return more than nev eigenpairs if it happens to find them.","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"using KrylovKit\n\nvals_kk, vecs_kk = eigsolve(sparse_matrix, num_eigvals, :SR)\nvals_kk","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"14-element Vector{Float64}:\n -6.979863998321637\n -3.3631242916133512\n -0.7590191922770888\n  0.13584182219622498\n  0.15789998694608265\n  0.8767114411781485\n  1.5305929970973322\n  1.5835732611867295\n  3.0728703303258573\n  3.1256726539518356\n  4.862107221562177\n  6.260694850380597\n  6.40267121118311\n  9.093371706203955","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"Both solvers use variants of the Lanczos algorithm for Hermitian matrices and the Arnoldi algorithm for non-Hermitian ones. These may in some cases miss degenerate eigenpairs.","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"If diagonalization takes too long, you can reduce the tolerance by setting the tol keyword argument to eigs or eigsolve. Using drastically lower tolerances than the default can still produce good results in practice. This, however, should be checked on a case-by-case basis.","category":"page"},{"location":"generated/exact-example.html#The-matrix-free-method","page":"Exact diagonalization","title":"The matrix-free method","text":"","category":"section"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"KrylovKit's eigsolve function is implemented in a way that does not require the linear operator and vector to be Julia arrays. Rimu leverages this functionality, which allows diagonalising Hamiltonians without ever needing to construct the matrix - all matrix elements are generated on the fly.","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"While this method is by far the slowest of the ones discussed, it also uses drastically less memory. This allows us to diagonalise much larger Hamiltonians.","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"To use this method, you first need a starting vector. It's best to use PDVec here as it leverages threading during the diagonalization.","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"dvec = PDVec(add => 1.0)","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"1-element PDVec: style = IsDeterministic{Float64}()\n  fs\"|0 0 4 0 0⟩\" => 1.0","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"Then, pass that vector and the Hamiltonian to eigsolve.","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"vals_mf, vecs_mf = eigsolve(ham, dvec, num_eigvals, :SR; issymmetric=true)\nvals_mf","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"10-element Vector{Float64}:\n -6.979863998321612\n -3.3631242916133406\n -0.7590191922770728\n  0.1578999869460862\n  0.8767114411781503\n  1.5835732611867401\n  3.125672653951839\n  4.862107221562172\n  6.402671211183112\n  9.093371706203953","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"Keep in mind that if an eigenvector is orthogonal to dvec, KrylovKit will miss it. Consider the following example:","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"eigsolve(ham, vecs_mf[2], num_eigvals, :SR, issymmetric=true)[1]","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"1-element Vector{Float64}:\n -3.3631242916133606","category":"page"},{"location":"generated/exact-example.html#Reducing-matrix-size-with-symmetries","page":"Exact diagonalization","title":"Reducing matrix size with symmetries","text":"","category":"section"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"As these matrices tend to get large quickly, memory is usually the bottleneck.  There are currently two methods implemented to reduce the matrix size, ParitySymmetry and TimeReversalSymmetry. These symmetries work by performing a unitary transformation on the Hamiltonian which causes it to become block-diagonal. When building a matrix from a block-diagonal Hamiltonian, only the block that contains the starting address is constructed.","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"You should only use these where the relevant symmetries actually apply - no checks are performed to make sure they do. There is also currently no way of using both at the same time. Please consult the documentation for a more in-depth description of these options.","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"The Hamiltonian presented in this example is compatible with ParitySymmetry. Let's see how the matrix size is reduced when applying it.","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"size(sparse(ham))","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"(14, 14)","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"size(sparse(ParitySymmetry(ham)))","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"(10, 10)","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"In this small example, the size reduction is modest, but for larger systems, you can expect to reduce the dimension of the matrix by about half.","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"all_eigs = eigvals(Matrix(ham))\neven_eigs = eigvals(Matrix(ParitySymmetry(ham)))","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"10-element Vector{Float64}:\n -6.979863998321621\n -3.3631242916133637\n -0.759019192277076\n  0.1578999869460802\n  0.8767114411781437\n  1.5835732611867417\n  3.125672653951844\n  4.862107221562179\n  6.402671211183117\n  9.093371706203957","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"The eigenvalues of the transformed Hamiltonian are a subset of the full spectrum. To get the other half, we can pass the even=false keyword argument to ParitySymmetry. When doing that, we need to make sure the starting address of the Hamiltonian is not symmetric under reversal:","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"add_odd = BoseFS(M, cld(M, 2) => N - 3, cld(M, 2) - 1 => 2, cld(M, 2) + 2 => 1)","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"BoseFS{4,5}(0, 2, 1, 0, 1)","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"odd_eigs = eigvals(Matrix(ParitySymmetry(HubbardMom1D(add_odd); even=false)))","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"4-element Vector{Float64}:\n 0.135841822196218\n 1.530592997097328\n 3.0728703303258613\n 6.260694850380591","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"Now, let's check that combining the two sets of eigenvalues indeed recovers the whole spectrum.","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"sort([even_eigs; odd_eigs]) ≈ all_eigs","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"true","category":"page"},{"location":"generated/exact-example.html#Computing-observables","page":"Exact diagonalization","title":"Computing observables","text":"","category":"section"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"Since building a matrix from an operator only builds the part that is reachable from the starting address, we need to use a different approach when computing observables.","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"To demonstrate this, we will use the DensityMatrixDiagonal operator, which in this case will give the momentum density.","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"The idea here is to construct a PDVec from the computed eigenvector and use it directly with the operator.","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"dvec = PDVec(zip(bsr.basis, eigvecs(Matrix(ham))[:, 1]))","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"14-element PDVec: style = IsDeterministic{Float64}()\n  fs\"|1 0 1 2 0⟩\" => -0.0214153\n  fs\"|2 0 0 0 2⟩\" => -0.00237613\n  fs\"|0 0 4 0 0⟩\" => -0.980348\n  fs\"|0 0 0 3 1⟩\" => 0.00363555\n  fs\"|2 1 1 0 0⟩\" => -0.0119687\n  fs\"|1 0 2 0 1⟩\" => 0.0768085\n  fs\"|1 3 0 0 0⟩\" => 0.00363555\n  fs\"|0 1 2 1 0⟩\" => 0.177701\n  fs\"|0 0 1 1 2⟩\" => -0.0119687\n  fs\"|3 0 0 1 0⟩\" => 0.00195478\n  fs\"|0 2 0 2 0⟩\" => -0.0138439\n  fs\"|1 1 0 1 1⟩\" => -0.00234782\n  fs\"|0 1 0 0 3⟩\" => 0.00195478\n  fs\"|0 2 1 0 1⟩\" => -0.0214153","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"The eigenvectors these methods produce are normalized, hence we can use the three-argument dot to compute the values of observables. Here we are computing the single particle momentum density distribution, which is just the diagonal of the single-particle density matrix in momentum space.","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"[dot(dvec, DensityMatrixDiagonal(i), dvec) for i in 1:M]","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"5-element Vector{Float64}:\n 0.0066861389450877905\n 0.033070399772041625\n 3.9204869225657406\n 0.03307039977204162\n 0.006686138945087839","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"This page was generated using Literate.jl.","category":"page"},{"location":"rimuio.html#Module-RimuIO","page":"I/O","title":"Module RimuIO","text":"","category":"section"},{"location":"rimuio.html","page":"I/O","title":"I/O","text":"Modules = [RimuIO]","category":"page"},{"location":"rimuio.html#Rimu.RimuIO","page":"I/O","title":"Rimu.RimuIO","text":"Module to provide file input and output functionality for Rimu. Provides convenience functions:\n\nRimuIO.save_df(filename, df::DataFrame) Save dataframe in Arrow format.\nRimuIO.load_df(filename) Load Arrow file into dataframe.\n\n\n\n\n\n","category":"module"},{"location":"rimuio.html#Rimu.RimuIO.load_df-Tuple{Any}","page":"I/O","title":"Rimu.RimuIO.load_df","text":"RimuIO.load_df(filename; propagate_metadata = true, add_filename = true) -> DataFrame\n\nLoad Arrow file into DataFrame. Optionally propagate metadata to DataFrame and add the file name as metadata.\n\nSee also RimuIO.save_df.\n\n\n\n\n\n","category":"method"},{"location":"rimuio.html#Rimu.RimuIO.save_df-Tuple{Any, DataFrame}","page":"I/O","title":"Rimu.RimuIO.save_df","text":"RimuIO.save_df(filename, df::DataFrame; kwargs...)\n\nSave dataframe in Arrow format.\n\nKeyword arguments are passed on to Arrow.write. Compression is enabled by default for large DataFrames (over 10,000 rows).\n\nTable-level metadata of the DataFrame is saved as Arrow metadata (with String value) unless overwritten with the keyword argument metadata.\n\nSee also RimuIO.load_df.\n\n\n\n\n\n","category":"method"},{"location":"rimuio.html#Index","page":"I/O","title":"Index","text":"","category":"section"},{"location":"rimuio.html","page":"I/O","title":"I/O","text":"Pages   = [\"rimuio.md\"]","category":"page"},{"location":"hamiltonians.html#Module-Hamiltonians","page":"Hamiltonians","title":"Module Hamiltonians","text":"","category":"section"},{"location":"hamiltonians.html","page":"Hamiltonians","title":"Hamiltonians","text":"This module contains definitions of Hamiltonians, in particular specific physical models of interest. These are organised by means of an interface around the abstract type AbstractHamiltonian, in the spirit of the AbstractArray interface as discussed in the Julia Documentation.","category":"page"},{"location":"hamiltonians.html","page":"Hamiltonians","title":"Hamiltonians","text":"The Hamiltonians can be used for projector quantum Monte Carlo with ProjectorMonteCarloProblem or for exact diagonalization with ExactDiagonalizationProblem, see Exact Diagonalization.","category":"page"},{"location":"hamiltonians.html","page":"Hamiltonians","title":"Hamiltonians","text":"Hamiltonians","category":"page"},{"location":"hamiltonians.html#Rimu.Hamiltonians","page":"Hamiltonians","title":"Rimu.Hamiltonians","text":"The module Rimu.Hamiltonians defines types and functions for working with Hamiltonians.\n\nExported concrete Hamiltonian types\n\nReal space Hubbard models\n\nHubbardReal1D\nBoseHubbardReal1D2C\nHubbardReal1DEP\nHubbardRealSpace\nExtendedHubbardReal1D\n\nMomentum space Hubbard models\n\nHubbardMom1D\nBoseHubbardMom1D2C\nHubbardMom1DEP\n\nHarmonic oscillator models\n\nHOCartesianContactInteractions\nHOCartesianEnergyConservedPerDim\nHOCartesianCentralImpurity\n\nOther\n\nFroehlichPolaron\nMatrixHamiltonian\nTranscorrelated1D\n\nWrappers\n\nGutzwillerSampling\nGuidingVectorSampling\nParitySymmetry\nTimeReversalSymmetry\nStoquastic\n\nObservables\n\nParticleNumberOperator\nG2RealCorrelator\nG2RealSpace\nG2MomCorrelator\nDensityMatrixDiagonal\nSingleParticleExcitation\nTwoParticleExcitation\nMomentum\nAxialAngularMomentumHO\n\nInterface for working with Hamiltonians\n\nAbstractHamiltonian: defined in the module Interfaces\n\n\n\n\n\n","category":"module"},{"location":"hamiltonians.html#Model-Hamiltonians","page":"Hamiltonians","title":"Model Hamiltonians","text":"","category":"section"},{"location":"hamiltonians.html","page":"Hamiltonians","title":"Hamiltonians","text":"Here is a list of fully implemented model Hamiltonians. There are several variants of the Hubbard model in real and momentum space, as well as some other models.","category":"page"},{"location":"hamiltonians.html#Real-space-Hubbard-models","page":"Hamiltonians","title":"Real space Hubbard models","text":"","category":"section"},{"location":"hamiltonians.html","page":"Hamiltonians","title":"Hamiltonians","text":"HubbardReal1D\nBoseHubbardReal1D2C\nHubbardReal1DEP\nHubbardRealSpace\nExtendedHubbardReal1D","category":"page"},{"location":"hamiltonians.html#Rimu.Hamiltonians.HubbardReal1D","page":"Hamiltonians","title":"Rimu.Hamiltonians.HubbardReal1D","text":"HubbardReal1D(address; u=1.0, t=1.0)\n\nImplements a one-dimensional Bose Hubbard chain in real space.\n\nhatH = -t sum_langle ijrangle a_i^ a_j + fracu2sum_i n_i (n_i-1)\n\nArguments\n\naddress: the starting address, defines number of particles and sites.\nu: the interaction parameter.\nt: the hopping strength.\n\nSee also\n\nHubbardMom1D\nExtendedHubbardReal1D\n\n\n\n\n\n","category":"type"},{"location":"hamiltonians.html#Rimu.Hamiltonians.BoseHubbardReal1D2C","page":"Hamiltonians","title":"Rimu.Hamiltonians.BoseHubbardReal1D2C","text":"BoseHubbardReal1D2C(address::BoseFS2C; ua=1.0, ub=1.0, ta=1.0, tb=1.0, v=1.0)\n\nImplements a two-component one-dimensional Bose Hubbard chain in real space.\n\nhatH = hatH_a + hatH_b + Vsum_i n_a_in_b_i\n\nArguments\n\naddress: the starting address, defines number of particles and sites.\nua: the on-site interaction parameter parameter for Hamiltonian a.\nub: the on-site interaction parameter parameter for Hamiltonian b.\nta: the hopping strength for Hamiltonian a.\ntb: the hopping strength for Hamiltonian b.\nv: the inter-species interaction parameter V.\n\nSee also\n\nHubbardReal1D\nBoseHubbardMom1D2C\n\n\n\n\n\n","category":"type"},{"location":"hamiltonians.html#Rimu.Hamiltonians.HubbardReal1DEP","page":"Hamiltonians","title":"Rimu.Hamiltonians.HubbardReal1DEP","text":"HubbardReal1DEP(address; u=1.0, t=1.0, v_ho=1.0)\n\nImplements a one-dimensional Bose Hubbard chain in real space with external potential.\n\nhatH = -t sum_langle ijrangle a_i^ a_j + sum_i ϵ_i n_i\n+ fracu2sum_i n_i (n_i-1)\n\nArguments\n\naddress: the starting address, defines number of particles and sites.\nu: the interaction parameter.\nt: the hopping strength.\nv_ho: strength of the external harmonic oscillator potential ϵ_i = v_ho i^2.\n\nThe first index is i=0 and the maximum of the potential occurs in the centre of the lattice.\n\nSee also\n\nHubbardReal1D\nHubbardMom1D\nExtendedHubbardReal1D\n\n\n\n\n\n","category":"type"},{"location":"hamiltonians.html#Rimu.Hamiltonians.HubbardRealSpace","page":"Hamiltonians","title":"Rimu.Hamiltonians.HubbardRealSpace","text":"HubbardRealSpace(address; geometry=PeriodicBoundaries(M,), t=ones(C), u=ones(C, C), v=zeros(C, D))\n\nHubbard model in real space. Supports single or multi-component Fock state addresses (with C components) and various (rectangular) lattice geometries in D dimensions.\n\n  hatH = -sum_langle ijrangleσ t_σ a^_iσ a_jσ +\n  frac12sum_iσ u_σσ n_iσ (n_iσ - 1) +\n  sum_iστu_στ n_iσ n_iτ\n\nIf v is nonzero then this calculates hatH + hatV by adding the harmonic trapping potential\n\n    hatV = sum_iσd v_σd x_di^2 n_iσ\n\nwhere x_di is the distance of site i from the centre of the trap along dimension d.\n\nAddress types\n\nBoseFS: Single-component Bose-Hubbard model.\nFermiFS: Single-component Fermi-Hubbard model.\nCompositeFS: For multi-component models.\n\nNote that a single component of fermions cannot interact with itself. A warning is produced if addressis incompatible with the interaction parameters u.\n\nGeometries\n\nImplemented CubicGrids for keyword geometry\n\nPeriodicBoundaries\nHardwallBoundaries\nLadderBoundaries\n\nDefault is geometry=PeriodicBoundaries(M,), i.e. a one-dimensional lattice with the number of sites M inferred from the number of modes in address.\n\nOther parameters\n\nt: the hopping strengths. Must be a vector of length C. The i-th element of the vector corresponds to the hopping strength of the i-th component.\nu: the on-site interaction parameters. Must be a symmetric matrix. u[i, j] corresponds to the interaction between the i-th and j-th component. u[i, i] corresponds to the interaction of a component with itself. Note that u[i,i] must be zero for fermionic components.\nv: the trap potential strengths. Must be a matrix of size C × D. v[i,j] is the strength of the trap for component i in the jth dimension.\n\n\n\n\n\n","category":"type"},{"location":"hamiltonians.html#Rimu.Hamiltonians.ExtendedHubbardReal1D","page":"Hamiltonians","title":"Rimu.Hamiltonians.ExtendedHubbardReal1D","text":"ExtendedHubbardReal1D(address; u=1.0, v=1.0, t=1.0, boundary_condition=:periodic)\n\nImplements the extended Hubbard model on a one-dimensional chain in real space. This Hamiltonian can be either real or complex, depending on the choice of boundary_condition.\n\nhatH = -t sum_langle ijrangle a_i^ a_j + fracu2sum_i n_i (n_i-1) +\nv sum_langle ijrangle n_i n_j\n\nArguments\n\naddress: the starting address.\nu: on-site interaction parameter\nv: the next-neighbor interaction\nt: the hopping strength\nboundary_condition The following values are supported:\n:periodic: usual period boundary condition realising a ring geometry.\n:hard_wall: hopping over the boundary is not allowed.\n:twisted: like :periodic but hopping over the boundary incurs an additional factor of -1.\nθ <: Number: like :periodic and :twisted but hopping over the boundary incurs a factor exp(iθ) for a hop to the right and exp(iθ) for a hop to the left. With this choice the Hamiltonian will have a complex eltype whereas otherwise the eltype is determined by the type of the parameters t, u, and v.\n\nSee also HubbardRealSpace.\n\n\n\n\n\n","category":"type"},{"location":"hamiltonians.html#Momentum-space-Hubbard-models","page":"Hamiltonians","title":"Momentum space Hubbard models","text":"","category":"section"},{"location":"hamiltonians.html","page":"Hamiltonians","title":"Hamiltonians","text":"HubbardMom1D\nBoseHubbardMom1D2C\nHubbardMom1DEP\nExtendedHubbardMom1D","category":"page"},{"location":"hamiltonians.html#Rimu.Hamiltonians.HubbardMom1D","page":"Hamiltonians","title":"Rimu.Hamiltonians.HubbardMom1D","text":"HubbardMom1D(address; u=1.0, t=1.0, dispersion=hubbard_dispersion)\n\nImplements a one-dimensional Bose Hubbard chain in momentum space.\n\nhatH =  sum_k ϵ_k n_k + fracuMsum_kpqr a^_r a^_q a_p a_k δ_r+qp+k\n\nArguments\n\naddress: the starting address, defines number of particles and sites.\nu: the interaction parameter.\nt: the hopping strength.\ndispersion: defines ϵ_k =dispersion(t, k)\nhubbard_dispersion: ϵ_k = -2(Re(t) cos(k) + Im(t) sin(k))\ncontinuum_dispersion: ϵ_k = Re(t) k^2 - 2 Im(t) k\n\nSee also\n\nHubbardReal1D\nExtendedHubbardReal1D\n\n\n\n\n\n","category":"type"},{"location":"hamiltonians.html#Rimu.Hamiltonians.BoseHubbardMom1D2C","page":"Hamiltonians","title":"Rimu.Hamiltonians.BoseHubbardMom1D2C","text":"BoseHubbardMom1D2C(address::BoseFS2C; ua=1.0, ub=1.0, ta=1.0, tb=1.0, v=1.0, kwargs...)\n\nImplements a one-dimensional Bose Hubbard chain in momentum space with a two-component Bose gas.\n\nhatH = hatH_a + hatH_b + fracVMsum_kpqr b^_r a^_q b_p a_k δ_r+qp+k\n\nArguments\n\naddress: the starting address.\nua: the u parameter for Hamiltonian a.\nub: the u parameter for Hamiltonian b.\nta: the t parameter for Hamiltonian a.\ntb: the t parameter for Hamiltonian b.\nv: the inter-species interaction parameter V.\n\nFurther keyword arguments are passed on to the constructor of HubbardMom1D.\n\nSee also\n\nBoseFS2C\nBoseHubbardReal1D2C\n\n\n\n\n\n","category":"type"},{"location":"hamiltonians.html#Rimu.Hamiltonians.HubbardMom1DEP","page":"Hamiltonians","title":"Rimu.Hamiltonians.HubbardMom1DEP","text":"HubbardMom1DEP(address; u=1.0, t=1.0, v_ho=1.0, dispersion=hubbard_dispersion)\n\nImplements a one-dimensional Bose Hubbard chain in momentum space with harmonic external potential.\n\nH = sum_k ϵ_k n_k + fracuMsum_kpqr a^_r a^_q a_p a_k δ_r+qp+k\n            + V_mathrmho \n\nwhere\n\nbeginaligned\nV_mathrmho  = frac1M sum_pq  mathrmDFTV_ext_p-q \n                    a^_p a_q \nV_mathrmext(x) = v_mathrmho x^2 \nendaligned\n\nis an external harmonic potential in momentum space, mathrmDFT_k is a discrete Fourier transform performed by fft()[k%M + 1], and M == num_modes(address).\n\nArguments\n\naddress: the starting address, defines number of particles and sites.\nu: the interaction parameter.\nt: the hopping strength.\ndispersion: defines ϵ_k =dispersion(t, k)\nhubbard_dispersion: ϵ_k = -2Re(t) cos(k) + Im(t) sin(k)\ncontinuum_dispersion: ϵ_k = Re(t) k^2 - 2 Im(t) k\nv_ho: strength of the external harmonic oscillator potential v_mathrmho.\n\nSee also HubbardMom1D, HubbardReal1DEP, Transcorrelated1D, Hamiltonians.\n\n\n\n\n\n","category":"type"},{"location":"hamiltonians.html#Rimu.Hamiltonians.ExtendedHubbardMom1D","page":"Hamiltonians","title":"Rimu.Hamiltonians.ExtendedHubbardMom1D","text":"ExtendedHubbardMom1D(\n    address; \n    u=1.0, t=1.0, v=1.0, dispersion=hubbard_dispersion, boundary_condition = 0.0\n)\n\nImplements a one-dimensional extended Hubbard chain, also known as the t - V model,  in momentum space.\n\nhatH =  sum_k ϵ_k n_k + frac12M sum_kpqr (u + 2v cos(q-p)) a^_r a^_q a_p a_k δ_r+qp+k\n\nArguments\n\naddress: the starting address, defines number of particles and sites.\nu: the interaction parameter.\nt: the hopping strength.\nboundary_condition: θ <: Number: hopping over the boundary incurs a   factor exp(iθ) for a hop to the right and exp(iθ) for a hop to the left.\ndispersion: defines ϵ_k =dispersion(t, k + θ)\nhubbard_dispersion: ϵ_k = -2 (Re(t) cos(k + θ) + Im(t) sin(k + θ))\ncontinuum_dispersion: ϵ_k = Re(t) (k + θ)^2 - 2 Im(t) (k + θ)\n\nSee also\n\nHubbardMom1D\nHubbardReal1D\nExtendedHubbardReal1D\n\n\n\n\n\n","category":"type"},{"location":"hamiltonians.html#Harmonic-oscillator-models","page":"Hamiltonians","title":"Harmonic oscillator models","text":"","category":"section"},{"location":"hamiltonians.html","page":"Hamiltonians","title":"Hamiltonians","text":"HOCartesianContactInteractions\nHOCartesianEnergyConservedPerDim\nHOCartesianCentralImpurity","category":"page"},{"location":"hamiltonians.html#Rimu.Hamiltonians.HOCartesianContactInteractions","page":"Hamiltonians","title":"Rimu.Hamiltonians.HOCartesianContactInteractions","text":"HOCartesianContactInteractions(addr; S, η, g = 1.0, interaction_only = false, block_by_level = true)\n\nImplements a bosonic harmonic oscillator in Cartesian basis with contact interactions\n\nhatH = sum_i epsilon_mathbfi n_mathbfi + fracg2sum_mathbfijkl\n    V_mathbfijkl a^_mathbfi a^_mathbfj a_mathbfk a_mathbfl\n\nFor a D-dimensional harmonic oscillator indices mathbfi mathbfj ldots are D-tuples. The energy scale is defined by the first dimension i.e. hbar omega_x so that single particle energies are\n\n    fracepsilon_mathbfihbar omega_x = (i_x + 12) + eta_y (i_y+12) + ldots\n\nThe factors eta_y ldots allow for anisotropic trapping geometries and are assumed to be greater than 1 so that omega_x is the smallest trapping frequency.\n\nBy default the offdiagonal elements due to the interactions are consistent with first-order degenerate perturbation theory\n\n    V_mathbfijkl = delta_epsilon_mathbfi + epsilon_mathbfj\n        ^epsilon_mathbfk + epsilon_mathbfl\n        prod_d in x yldots mathcalI(i_dj_dk_dl_d)\n\nwhere the delta function indicates that the total noninteracting energy is conserved meaning all states with the same noninteracting energy are connected by this interaction and the Hamiltonian blocks according to noninteracting energy levels. Setting block_by_level = false will disable this restriction and allow coupling between basis states of any noninteracting energy level, leading to many more offdiagonals and fewer but larger blocks (the blocks are still distinguished by parity of basis states). Alternatively, see HOCartesianEnergyConservedPerDim for a model with the stronger restriction that conserves energy separately per spatial dimension. The integral mathcalI(abcd) is of four one dimensional harmonic oscillator basis functions, implemented in four_oscillator_integral_general.\n\nArguments\n\naddr: the starting address, defines number of particles and total number of modes.\nS: Tuple of the number of levels in each dimension, including the groundstate. The   allowed couplings between states is defined by the aspect ratio of S .- 1. Defaults   to a 1D spectrum with number of levels matching modes of addr. Will be sorted to make   the first dimension the largest.\nη: Define a custom aspect ratio for the trapping potential strengths, instead of deriving   from S .- 1. This will only affect the single particle energy scale and not the   interactions. The values are always scaled relative to the first dimension, which sets   the energy scale of the system, hbaromega_x.\ng: the (isotropic) bare interaction parameter. The value of g is assumed   to be in trap units.\ninteraction_only: if set to true then the noninteracting single-particle terms are   ignored. Useful if only energy shifts due to interactions are required.\nblock_by_level: if set to false will allow the interactions to couple all states without   comparing their noninteracting energy.\n\nwarning: Warning\nnum_offdiagonals is a bad estimate for this Hamiltonian. Take care when building a matrix or using QMC methods. Use get_all_blocks first then pass option col_hint = block_size to BasisSetRep to safely build the matrix.\n\n\n\n\n\n","category":"type"},{"location":"hamiltonians.html#Rimu.Hamiltonians.HOCartesianEnergyConservedPerDim","page":"Hamiltonians","title":"Rimu.Hamiltonians.HOCartesianEnergyConservedPerDim","text":"HOCartesianEnergyConservedPerDim(addr; S, η, g = 1.0, interaction_only = false)\n\nImplements a bosonic harmonic oscillator in Cartesian basis with contact interactions\n\nhatH = sum_i ϵ_i n_i + fracg2sum_ijkl V_ijkl a^_i a^_j a_k a_l\n\nwith the additional restriction that the interactions only couple states with the same energy in each dimension separately. See HOCartesianContactInteractions for a model that conserves total energy.\n\nFor a D-dimensional harmonic oscillator indices mathbfi mathbfj ldots are D-tuples. The energy scale is defined by the first dimension i.e. hbar omega_x so that single particle energies are\n\n    fracepsilon_mathbfihbar omega_x = (i_x + 12) + eta_y (i_y+12) + ldots\n\nThe factors eta_y ldots allow for anisotropic trapping geometries and are assumed to be greater than 1 so that omega_x is the smallest trapping frequency.\n\nMatrix elements V_mathbfijkl are for a contact interaction calculated in this basis using first-order degenerate perturbation theory.\n\n    V_mathbfijkl = prod_d in x yldots mathcalI(i_dj_dk_dl_d)\n        delta_i_d + j_d^k_d + l_d\n\nwhere the delta-function indicates that the noninteracting energy is conserved along each dimension. The integral mathcalI(abcd) is of four one dimensional harmonic oscillator basis functions, see four_oscillator_integral_general, with the additional restriction that energy is conserved in each dimension.\n\nArguments\n\naddr: the starting address, defines number of particles and total number of modes.\nS: Tuple of the number of levels in each dimension, including the groundstate. Defaults   to a 1D spectrum with number of levels matching modes of addr. Will be sorted to   make the first dimension the largest.\nη: Define a custom aspect ratio for the trapping potential strengths, instead of deriving   from S .- 1. The values are always scaled relative to the first dimension, which sets   the energy scale of the system, hbaromega_x.\ng: the (isotropic) interparticle interaction parameter. The value of g is assumed   to be in trap units.\ninteraction_only: if set to true then the noninteracting single-particle terms are   ignored. Useful if only energy shifts due to interactions are required.\n\n\n\n\n\n","category":"type"},{"location":"hamiltonians.html#Rimu.Hamiltonians.HOCartesianCentralImpurity","page":"Hamiltonians","title":"Rimu.Hamiltonians.HOCartesianCentralImpurity","text":"HOCartesianCentralImpurity(addr; kwargs...)\n\nHamiltonian of non-interacting particles in an arbitrary harmonic trap with a delta-function potential at the centre, with strength g,\n\nhatH_mathrmrel = sum_mathbfi ϵ_mathbfi n_mathbfi\n    + gsum_mathbfij V_mathbfij a^_mathbfi a_mathbfj\n\nFor a D-dimensional harmonic oscillator indices mathbfi mathbfj ldots are D-tuples. The energy scale is defined by the first dimension i.e. hbar omega_x so that single particle energies are\n\n    fracepsilon_mathbfihbar omega_x = (i_x + 12) + eta_y (i_y+12) + ldots\n\nThe factors eta_y ldots allow for anisotropic trapping geometries and are assumed to be greater than 1 so that omega_x is the smallest trapping frequency.\n\nMatrix elements V_mathbfij are for a delta function potential calculated in this basis\n\n    V_mathbfij = prod_d in x yldots psi_i_d(0) psi_j_d(0)\n\nOnly even parity states feel this impurity, so all i_d are even. Note that the matrix representation of this Hamiltonian for a single particle is completely dense in the even-parity subspace.\n\nArguments\n\naddr: the starting address, defines number of particles and total number of modes.\nmax_nx = num_modes(addr) - 1: the maximum harmonic oscillator index number in the x-dimension.   Must be even. Index number for the harmonic oscillator groundstate is 0.\nηs = (): a tuple of aspect ratios for the remaining dimensions (η_y, ...). Should be empty   for a 1D trap or contain values greater than 1.0. The maximum index   in other dimensions will be the largest even number less than M/η_y.\nS = nothing: Instead of max_nx, manually set the number of levels in each dimension,   including the groundstate. Must be a Tuple of Ints.\ng = 1.0: the strength of the delta impurity in (x-dimension) trap units.\nimpurity_only=false: if set to true then the trap energy terms are ignored. Useful if   only energy shifts due to the impurity are required.\n\nwarning: Warning\nDue to use of `SpecialFunctions` with large arguments the matrix representation of\nthis Hamiltonian may not be strictly symmetric, but is approximately symmetric within\nmachine precision.\n\nSee also HOCartesianContactInteractions andHOCartesianEnergyConservedPerDim.\n\n\n\n\n\n","category":"type"},{"location":"hamiltonians.html#Other","page":"Hamiltonians","title":"Other","text":"","category":"section"},{"location":"hamiltonians.html","page":"Hamiltonians","title":"Hamiltonians","text":"MatrixHamiltonian\nTranscorrelated1D\nFroehlichPolaron","category":"page"},{"location":"hamiltonians.html#Rimu.Hamiltonians.MatrixHamiltonian","page":"Hamiltonians","title":"Rimu.Hamiltonians.MatrixHamiltonian","text":"MatrixHamiltonian(\n    mat::AbstractMatrix{T};\n    starting_address::Int = starting_address(mat)\n) <: AbstractHamiltonian{T}\n\nWrap an abstract matrix mat as an AbstractHamiltonian object. Works with stochastic methods of ProjectorMonteCarloProblem() and DVec. Optionally, a valid index can be provided as the starting_address.\n\nSpecialised methods are implemented for sparse matrices of type AbstractSparseMatrixCSC. One based indexing is required for the matrix mat.\n\n\n\n\n\n","category":"type"},{"location":"hamiltonians.html#Rimu.Hamiltonians.Transcorrelated1D","page":"Hamiltonians","title":"Rimu.Hamiltonians.Transcorrelated1D","text":"Transcorrelated1D(address; t=1.0, v=1.0, v_ho=0.0, cutoff=1, three_body_term=true)\n\nImplements a transcorrelated Hamiltonian for contact interactions in one dimensional momentum space from Jeszenski et al. (2018). Currently limited to two component fermionic addresses.\n\nbeginaligned\n\ntildeH = t sum_kσk^2 n_kσ \n    quad + sum_pqkσσ T_pqk a^_p-kσ a^_q+kσ a_qσ a_pσ \n    quad + sum_pqskkσσ Q_kka^_p-kσ a^_q+kσ a^_s+k-kσ\n                                       a_sσ a_qσ a_pσ \n    quad + V_mathrmho\nendaligned\n\nwhere\n\nbeginaligned\ntildeu(k) = begincases -frac2k^2 mathrmif  k  k_c\n0  mathrmotherwise\nendcases\n\n\nT_pqk = fracvM + frac2vMleftk^2tildeu(k)\n          - (p - q)ktildeu(k)right + frac2v^2tW(k)\nW(k) = frac1M^2sum_q (k - q)q tildeu(q)tildeu(k - q) \nQ_kl = -fracv^2t M^2k tildeu(k)ltildeu(l)\nendaligned\n\nArguments\n\naddress: The starting address, defines number of particles and sites.\nv: The interaction parameter.\nt: The kinetic energy prefactor.\nv_ho: Strength of the external harmonic oscillator potential V_mathrmho. See HubbardMom1DEP.\ncutoff controls k_c in equations above. Note: skipping generating off-diagonal elements below the cutoff is not implemented - zero-valued elements are returned instead.\nthree_body_term: If set to false, generating three body excitations is skipped. Note: when disabling three body terms, cutoff should be set to a higher value for best results.\n\nSee also\n\nHubbardMom1D\nHubbardMom1DEP\n\n\n\n\n\n","category":"type"},{"location":"hamiltonians.html#Rimu.Hamiltonians.FroehlichPolaron","page":"Hamiltonians","title":"Rimu.Hamiltonians.FroehlichPolaron","text":"FroehlichPolaron(address::OccupationNumberFS{M}; kwargs...) <: AbstractHamiltonian\n\nThe Froehlich polaron Hamiltonian for a 1D lattice with M momentum modes is given by\n\nH = (p_f - p)^2m + ωN - v Σₖ(aₖ^ + aₖ)\n\nwhere p is the total momentum, p_f = Σ_k k aₖ^ aₖ is the momentum operator for the bosons, and k part of the momentum lattice with separation 2πl. N is the number operator for the bosons.\n\nKeyword Arguments\n\np=0.0: the total momentum p.\nv=1.0: the coupling strength v.\nmass=1.0: the particle mass m.\nomega=1.0: the oscillation frequency of the phonons ω.\nl=1.0: the box size in real space l. Provides scale parameter of the momentum   lattice.\nmomentum_cutoff=nothing: the maximum boson momentum allowed for an address.\nmode_cutoff: the maximum number of bosons in each momentum mode. Defaults to the maximum   value supported by the address type OccupationNumberFS.\n\nExamples\n\njulia> fs = OccupationNumberFS(0,0,0)\nOccupationNumberFS{3, UInt8}(0, 0, 0)\n\njulia> ham = FroehlichPolaron(fs; v=0.5)\nFroehlichPolaron(fs\"|0 0 0⟩{8}\"; v=0.5, mass=1.0, omega=1.0, l=1.0, p=0.0, mode_cutoff=255)\n\njulia> dimension(ham)\n16777216\n\njulia> dimension(FroehlichPolaron(fs; v=0.5, mode_cutoff=5))\n216\n\nSee also OccupationNumberFS, dimension, AbstractHamiltonian.\n\n\n\n\n\n","category":"type"},{"location":"hamiltonians.html#Convenience-functions","page":"Hamiltonians","title":"Convenience functions","text":"","category":"section"},{"location":"hamiltonians.html","page":"Hamiltonians","title":"Hamiltonians","text":"rayleigh_quotient\nmomentum\nhubbard_dispersion\ncontinuum_dispersion\nshift_lattice\nshift_lattice_inv","category":"page"},{"location":"hamiltonians.html#Rimu.Hamiltonians.rayleigh_quotient","page":"Hamiltonians","title":"Rimu.Hamiltonians.rayleigh_quotient","text":"rayleigh_quotient(H, v)\n\nReturn the Rayleigh quotient of the linear operator H and the vector v:\n\nfrac v  H  v  vv \n\n\n\n\n\n","category":"function"},{"location":"hamiltonians.html#Rimu.Hamiltonians.momentum","page":"Hamiltonians","title":"Rimu.Hamiltonians.momentum","text":"momentum(ham::AbstractHamiltonian)\n\nMomentum as a linear operator in Fock space. Pass a Hamiltonian ham in order to convey information about the Fock basis. Returns an AbstractHamiltonian that represents the momentum operator.\n\nNote: momentum is currently only defined on HubbardMom1D.\n\nExample\n\njulia> add = BoseFS((1, 0, 2, 1, 2, 1, 1, 3));\n\n\njulia> ham = HubbardMom1D(add; u = 2.0, t = 1.0);\n\n\njulia> mom = momentum(ham);\n\n\njulia> diagonal_element(mom, add) # calculate the momentum of a single configuration\n-1.5707963267948966\n\njulia> v = DVec(add => 10; capacity=1000);\n\n\njulia> rayleigh_quotient(mom, v) # momentum expectation value for state vector `v`\n-1.5707963267948966\n\nPart of the AbstractHamiltonian interface.\n\n\n\n\n\n","category":"function"},{"location":"hamiltonians.html#Rimu.Hamiltonians.hubbard_dispersion","page":"Hamiltonians","title":"Rimu.Hamiltonians.hubbard_dispersion","text":"hubbard_dispersion(t, k)\n\nDispersion relation for HubbardMom1D. Returns -2(Re(t) cos(k) + Im(t) sin(k)).\n\nSee also continuum_dispersion.\n\n\n\n\n\n","category":"function"},{"location":"hamiltonians.html#Rimu.Hamiltonians.continuum_dispersion","page":"Hamiltonians","title":"Rimu.Hamiltonians.continuum_dispersion","text":"continuum_dispersion(t, k)\n\nDispersion relation for HubbardMom1D. Returns Re(t) k^2 - 2 Im(t) k.\n\nSee also hubbard_dispersion.\n\n\n\n\n\n","category":"function"},{"location":"hamiltonians.html#Rimu.Hamiltonians.shift_lattice","page":"Hamiltonians","title":"Rimu.Hamiltonians.shift_lattice","text":"shift_lattice(is)\n\nCircular shift contiguous indices is in interval [M÷2, M÷2) such that set starts with 0, where M=length(is).\n\nInverse operation: shift_lattice_inv. Used in HubbardReal1DEP and HubbardMom1DEP\n\n\n\n\n\n","category":"function"},{"location":"hamiltonians.html#Rimu.Hamiltonians.shift_lattice_inv","page":"Hamiltonians","title":"Rimu.Hamiltonians.shift_lattice_inv","text":"shift_lattice_inv(js)\n\nCircular shift indices starting with 0 into a contiguous set in interval [M÷2, M÷2), where M=length(js).\n\nInverse operation of shift_lattice. Used in HubbardReal1DEP and HubbardMom1DEP\n\n\n\n\n\n","category":"function"},{"location":"hamiltonians.html#Hamiltonian-wrappers","page":"Hamiltonians","title":"Hamiltonian wrappers","text":"","category":"section"},{"location":"hamiltonians.html","page":"Hamiltonians","title":"Hamiltonians","text":"The following Hamiltonians are constructed from an existing Hamiltonian instance and change its behaviour:","category":"page"},{"location":"hamiltonians.html","page":"Hamiltonians","title":"Hamiltonians","text":"GutzwillerSampling\nGuidingVectorSampling\nParitySymmetry\nTimeReversalSymmetry\nStoquastic","category":"page"},{"location":"hamiltonians.html#Rimu.Hamiltonians.GutzwillerSampling","page":"Hamiltonians","title":"Rimu.Hamiltonians.GutzwillerSampling","text":"GutzwillerSampling(::AbstractHamiltonian; g)\n\nWrapper over any AbstractHamiltonian that implements Gutzwiller sampling. In this importance sampling scheme the Hamiltonian is modified as follows\n\ntildeH_ij = H_ij e^-g(H_ii - H_jj) \n\nThis way off-diagonal spawns to higher-energy configurations are discouraged and spawns to lower-energy configurations encouraged for positive g.\n\nConstructor\n\nGutzwillerSampling(::AbstractHamiltonian, g)\nGutzwillerSampling(::AbstractHamiltonian; g)\n\nAfter construction, we can access the underlying Hamiltonian with G.hamiltonian and the g parameter with G.g.\n\nExample\n\njulia> H = HubbardMom1D(BoseFS(1,1,1); u=6.0, t=1.0)\nHubbardMom1D(fs\"|1 1 1⟩\"; u=6.0, t=1.0)\n\njulia> G = GutzwillerSampling(H, g=0.3)\nGutzwillerSampling(HubbardMom1D(fs\"|1 1 1⟩\"; u=6.0, t=1.0); g=0.3)\n\njulia> get_offdiagonal(H, BoseFS(2, 1, 0), 1)\n(BoseFS{3,3}(1, 0, 2), 2.0)\n\njulia> get_offdiagonal(G, BoseFS(2, 1, 0), 1)\n(BoseFS{3,3}(1, 0, 2), 0.8131393194811987)\n\nObservables\n\nTo calculate observables, pass the transformed Hamiltonian G to AllOverlaps with keyword argument transform=G.\n\n\n\n\n\n","category":"type"},{"location":"hamiltonians.html#Rimu.Hamiltonians.GuidingVectorSampling","page":"Hamiltonians","title":"Rimu.Hamiltonians.GuidingVectorSampling","text":"GuidingVectorSampling\n\nWrapper over any AbstractHamiltonian that implements guided vector a.k.a. guided wave function sampling. In this importance sampling scheme the Hamiltonian is modified as follows.\n\ntildeH_ij = v_i H_ij v_j^-1\n\nand where v is the guiding vector. v_i and v_j are also thresholded to avoid dividing by zero (see below).\n\nConstructors\n\nGuidingVectorSampling(::AbstractHamiltonian, vector, eps)\nGuidingVectorSampling(::AbstractHamiltonian; vector, eps)\n\neps is a thresholding parameter used to avoid dividing by zero; all values below eps are set to eps. It is recommended that eps is in the same value range as the guiding vector. The default value is set to eps=norm(v, Inf) * 1e-2\n\nAfter construction, we can access the underlying hamiltonian with G.hamiltonian, the eps parameter with G.eps, and the guiding vector with G.vector.\n\nExample\n\njulia> H = HubbardReal1D(BoseFS(1,1,1); u=6.0, t=1.0);\n\njulia> v = DVec(starting_address(H) => 10; capacity=1);\n\njulia> G = GuidingVectorSampling(H, v, 0.1);\n\njulia> get_offdiagonal(H, starting_address(H), 4)\n(BoseFS{3,3}(2, 0, 1), -1.4142135623730951)\n\njulia> get_offdiagonal(G, starting_address(G), 4)\n(BoseFS{3,3}(2, 0, 1), -0.014142135623730952)\n\nObservables\n\nTo calculate observables, pass the transformed Hamiltonian G to AllOverlaps with keyword argument transform=G.\n\n\n\n\n\n","category":"type"},{"location":"hamiltonians.html#Rimu.Hamiltonians.ParitySymmetry","page":"Hamiltonians","title":"Rimu.Hamiltonians.ParitySymmetry","text":"ParitySymmetry(ham::AbstractHamiltonian{T}; even=true) <: AbstractHamiltonian{T}\n\nImpose even or odd parity on all states and the Hamiltonian ham as controlled by the keyword argument even. Parity symmetry of the Hamiltonian is assumed. For some Hamiltonians, ParitySymmetry reduces the size of the Hilbert space by half.\n\nParitySymmetry performs a unitary transformation, leaving the eigenvalues unchanged and preserving the LOStructure. This is achieved by changing the basis set to states with defined parity. Effectively, a non-even address α is replaced by frac12(α  α) for even and odd parity, respectively, where ᾱ == reverse(α).\n\nNotes\n\nThis modifier currently only works on starting_addresss with an odd number of modes.\nFor odd parity, the starting_address of the underlying Hamiltonian cannot be symmetric.\nIf parity is not a symmetry of the Hamiltonian ham then the result is undefined.\nParitySymmetry works by modifying the offdiagonals iterator.\n\njulia> ham = HubbardReal1D(BoseFS(0,2,1))\nHubbardReal1D(fs\"|0 2 1⟩\"; u=1.0, t=1.0)\n\njulia> size(Matrix(ham))\n(10, 10)\n\njulia> size(Matrix(ParitySymmetry(ham)))\n(6, 6)\n\njulia> size(Matrix(ParitySymmetry(ham; odd=true)))\n(4, 4)\n\njulia> eigvals(Matrix(ham))[1] ≈ eigvals(Matrix(ParitySymmetry(ham)))[1]\ntrue\n\nSee also TimeReversalSymmetry.\n\n\n\n\n\n","category":"type"},{"location":"hamiltonians.html#Rimu.Hamiltonians.TimeReversalSymmetry","page":"Hamiltonians","title":"Rimu.Hamiltonians.TimeReversalSymmetry","text":"TimeReversalSymmetry(ham::AbstractHamiltonian{T}; even=true) <: AbstractHamiltonian{T}\n\nImpose even or odd time reversal on all states and the Hamiltonian ham as controlled by the keyword argument even. If time reversal is a symmetry of the Hamiltonian it will block (reducing Hilbert space dimension) preserving the eigenvalues and LOStructure.\n\nNotes\n\nThis modifier only works two component starting_addresses.\nFor odd time reversal symmetry, the starting_address of the underlying Hamiltonian must not be symmetric.\nIf time reversal is not a symmetry of the Hamiltonian ham then the result is undefined.\nTimeReversalSymmetry works by modifying the offdiagonals iterator.\n\njulia> ham = HubbardMom1D(FermiFS2C((1,0,1),(0,1,1)));\n\njulia> size(Matrix(ham))\n(3, 3)\n\njulia> size(Matrix(TimeReversalSymmetry(ham)))\n(2, 2)\n\njulia> size(Matrix(TimeReversalSymmetry(ham, even=false)))\n(1, 1)\n\njulia> eigvals(Matrix(TimeReversalSymmetry(ham)))[1] ≈ eigvals(Matrix(ham))[1]\ntrue\n\nSee also ParitySymmetry.\n\n\n\n\n\n","category":"type"},{"location":"hamiltonians.html#Rimu.Hamiltonians.Stoquastic","page":"Hamiltonians","title":"Rimu.Hamiltonians.Stoquastic","text":"Stoquastic(ham <: AbstractHamiltonian) <: AbstractHamiltonian\n\nA wrapper for an AbstractHamiltonian that replaces all off-diagonal matrix elements v by -abs(v), thus making the new Hamiltonian stoquastic.\n\nA stoquastic Hamiltonian does not have a Monte Carlo sign problem. For a hermitian ham the smallest eigenvalue of Stoquastic(ham) is ≤ the smallest eigenvalue of ham.\n\n\n\n\n\n","category":"type"},{"location":"hamiltonians.html#Observables","page":"Hamiltonians","title":"Observables","text":"","category":"section"},{"location":"hamiltonians.html","page":"Hamiltonians","title":"Hamiltonians","text":"Rimu.jl offers two other supertypes for operators that are less  restrictive than AbstractHamiltonian.  AbstractObservable and AbstractOperators both can represent a physical observable. Their expectation values can be sampled during a ProjectorMonteCarloProblem simulation by  passing them into a suitable ReplicaStrategy, e.g.  AllOverlaps. Some observables are also AbstractHamiltonians. The full type hierarchy is","category":"page"},{"location":"hamiltonians.html","page":"Hamiltonians","title":"Hamiltonians","text":"AbstractHamiltonian{T} <: AbstractOperator{T} <: AbstractObservable{T}","category":"page"},{"location":"hamiltonians.html","page":"Hamiltonians","title":"Hamiltonians","text":"AbstractObservable\nAbstractOperator\nParticleNumberOperator\nG2RealCorrelator\nG2RealSpace\nG2MomCorrelator\nSuperfluidCorrelator\nStringCorrelator\nDensityMatrixDiagonal\nSingleParticleExcitation\nTwoParticleExcitation\nMomentum\nAxialAngularMomentumHO","category":"page"},{"location":"hamiltonians.html#Rimu.Interfaces.AbstractObservable","page":"Hamiltonians","title":"Rimu.Interfaces.AbstractObservable","text":"AbstractObservable{T}\n\nMost permissive supertype for operators in the type hierarchy:\n\nAbstractHamiltonian{T} <: AbstractOperator{T} <: AbstractObservable{T}\n\nAbstractObservable provides an interface for operators that can appear in a three-way dot product dot(x, op, y) with two vectors of type AbstractDVec. The result is a value of type T, which is also returned by the eltype function. This may be a vector type associated with a scalar type returned by the scalartype function.\n\nThe AbstractObservable type is useful for defining observables that can be calculated in the context of a ProjectorMonteCarloProblem using AllOverlaps.\n\nInterface\n\nBasic interface methods to implement:\n\nInterfaces.dot_from_right(x, op, y)\nallows_address_type(op, type)\n\nOptional additional methods to implement:\n\nVectorInterface.scalartype(op): defaults to eltype(eltype(op))\nLOStructure(::Type{typeof(op)}): defaults to AdjointUnknown\n\nSee also AbstractOperator, AbstractHamiltonian, Interfaces.\n\n\n\n\n\n","category":"type"},{"location":"hamiltonians.html#Rimu.Interfaces.AbstractOperator","page":"Hamiltonians","title":"Rimu.Interfaces.AbstractOperator","text":"AbstractOperator{T} <: AbstractObservable{T}\n\nSupertype that provides an interface for linear operators over a linear space with elements of type T (returned by eltype) and general (custom type) indices called 'addresses'.\n\nAbstractOperator instances operate on vectors of type AbstractDVec from the module DictVectors and work well with addresses of type AbstractFockAddress from the module BitStringAddresses.\n\nThe defining feature of an AbstractOperator is that it can be applied to a vector with mul!(y, op, x) and that three-way dot products can be calculated with dot(x, op, y).\n\nThe AbstractOperator type is useful for defining operators that are not necessarily Hamiltonians, but that can be used in the context of a ProjectorMonteCarloProblem as observable operators in a ReplicaStrategy, e.g. for defining correlation functions. In contrast to AbstractHamiltonians, AbstractOperators do not need to have a starting_address. Moreover, the eltype of an AbstractOperator can be a vector value whereas AbstractHamiltonians requre a scalar eltype.\n\nAbstractHamiltonian{T} <: AbstractOperator{T} <: AbstractObservable{T}\n\nThe AbstractOperator type is part of the AbstractObservable hierarchy. It is more restrictive than AbstractObservable in that it requires the interface for the generation of diagonal and off-diagonal elements.\n\nFor concrete implementations see Hamiltonians. In order to implement a Hamiltonian for use in ProjectorMonteCarloProblem or ExactDiagonalizationProblem use the type AbstractHamiltonian instead.\n\nInterface\n\nBasic interface methods to implement:\n\nallows_address_type(op, type)\ndiagonal_element(op, address)\nnum_offdiagonals(op, address) and\nget_offdiagonal(op, address, chosen) or offdiagonals\n\nOptional additional methods to implement:\n\nVectorInterface.scalartype(op): defaults to eltype(eltype(op))\nLOStructure(::Type{typeof(op)}): defaults to AdjointUnknown\ndimension(op, addr): defaults to dimension of address space\n\nIn order to calculate observables efficiently, it may make sense to implement custom methods for Interfaces.dot_from_right(x, op, y) and LinearAlgebra.mul!(y, op, x).\n\nSee also AbstractHamiltonian, Interfaces.\n\n\n\n\n\n","category":"type"},{"location":"hamiltonians.html#Rimu.Hamiltonians.ParticleNumberOperator","page":"Hamiltonians","title":"Rimu.Hamiltonians.ParticleNumberOperator","text":"ParticleNumberOperator() <: AbstractOperator{Float64}\n\nThe number operator in Fock space. This operator is diagonal in the Fock basis and returns the number of particles in the Fock state. It works with any address type that is a subtype of AbstractFockAddress.\n\njulia> p = ExactDiagonalizationProblem(FroehlichPolaron(fs\"|0 0⟩{}\"; mode_cutoff=5, v=3));\n\njulia> gs = solve(p).vectors[1]; # normalised ground state vector\n\njulia> dot(gs, ParticleNumberOperator(), gs) # particle number expectation value\n2.8823297252925917\n\nSee also AbstractHamiltonian.\n\n\n\n\n\n","category":"type"},{"location":"hamiltonians.html#Rimu.Hamiltonians.G2RealCorrelator","page":"Hamiltonians","title":"Rimu.Hamiltonians.G2RealCorrelator","text":"G2RealCorrelator(d::Int) <: AbstractOperator{Float64}\n\nTwo-body operator for density-density correlation between sites separated by d with 0 ≤ d < M.\n\n    hatG^(2)(d) = frac1M sum_i^M hatn_i (hatn_i+d - delta_0d)\n\nAssumes a one-dimensional lattice with periodic boundary conditions where\n\n    hatG^(2)(-M2 leq d  0) = hatG^(2)(d)\n\n    hatG^(2)(M2  d  M) = hatG^(2)(M - d)\n\nand normalisation\n\n    sum_d=0^M-1 langle hatG^(2)(d) rangle = fracN (N-1)M\n\nFor multicomponent basis, calculates correlations between all particles equally, equivalent to stacking all components into a single Fock state.\n\nArguments\n\nd::Integer: distance between sites.\n\nSee also\n\nHubbardReal1D\nG2RealSpace\nG2MomCorrelator\nAbstractOperator\nAllOverlaps\n\n\n\n\n\n","category":"type"},{"location":"hamiltonians.html#Rimu.Hamiltonians.G2RealSpace","page":"Hamiltonians","title":"Rimu.Hamiltonians.G2RealSpace","text":"G2RealSpace(geometry::CubicGrid, σ=1, τ=1; sum_components=false) <: AbstractOperator{SArray}\n\nTwo-body operator for density-density correlation for all Displacements d in the specified geometry.\n\n    hatG^(2)_στ(d) = frac1M _i n_σi (n_τi+d - δ_0dδ_στ)\n\nFor multicomponent addresses, σ and τ control the components involved. Alternatively, sum_components can be set to true, which treats all particles as belonging to the same component.\n\nExamples\n\njulia> geom = CubicGrid(2, 2);\n\njulia> g2 = G2RealSpace(geom)\nG2RealSpace(CubicGrid((2, 2), (true, true)), 1,1)\n\njulia> diagonal_element(g2, BoseFS(2,0,1,1))\n2×2 StaticArraysCore.SMatrix{2, 2, Float64, 4} with indices SOneTo(2)×SOneTo(2):\n 0.5  1.0\n 0.5  1.0\n\njulia> g2_cross = G2RealSpace(geom, 1, 2)\nG2RealSpace(CubicGrid((2, 2), (true, true)), 1,2)\n\njulia> g2_sum = G2RealSpace(geom, sum_components=true)\nG2RealSpace(CubicGrid((2, 2), (true, true)); sum_components=true)\n\njulia> diagonal_element(g2, fs\"|⇅⋅↓↑⟩\")\n2×2 StaticArraysCore.SMatrix{2, 2, Float64, 4} with indices SOneTo(2)×SOneTo(2):\n 0.0  0.0\n 0.0  0.5\n\njulia> diagonal_element(g2_cross, fs\"|⇅⋅↓↑⟩\")\n2×2 StaticArraysCore.SMatrix{2, 2, Float64, 4} with indices SOneTo(2)×SOneTo(2):\n 0.25  0.25\n 0.25  0.25\n\njulia> diagonal_element(g2_sum, fs\"|⇅⋅↓↑⟩\")\n2×2 StaticArraysCore.SMatrix{2, 2, Float64, 4} with indices SOneTo(2)×SOneTo(2):\n 0.5  1.0\n 0.5  1.0\n\nSee also\n\nCubicGrid\nHubbardRealSpace\nG2RealCorrelator\nG2MomCorrelator\nAbstractOperator\nAllOverlaps\n\n\n\n\n\n","category":"type"},{"location":"hamiltonians.html#Rimu.Hamiltonians.G2MomCorrelator","page":"Hamiltonians","title":"Rimu.Hamiltonians.G2MomCorrelator","text":"G2MomCorrelator(d::Int,c=:cross) <: AbstractOperator{ComplexF64}\n\nTwo-body correlation operator representing the density-density correlation at distance d of a two component system in a momentum-space Fock-state basis. It returns a Complex value.\n\nCorrelation across two components:\n\nhatG^(2)(d) = frac1Msum_spqr=1^M e^-id(p-q)2πM a^_s b^_p  b_q a_r δ_s+pq+r\n\nCorrelation within a single component:\n\nhatG^(2)(d) = frac1Msum_spqr=1^M e^-id(p-q)2πM a^_s a^_p  a_q a_r δ_s+pq+r\n\nThe diagonal element, where (p-q)=0, is\n\nfrac1Msum_kp=1^M a^_k b^_p  b_p a_k \n\nArguments\n\nd::Integer: the distance between two particles.\nc: possible instructions: :cross: default instruction, computing correlation between particles across two components; :first: computing correlation between particles within the first component; :second: computing correlation between particles within the second component. These are the only defined instructions, using anything else will produce errors.\n\nTo use on a one-component system\n\nFor a system with only one component, e.g. with BoseFS, the second argument c is irrelevant and can be any of the above instructions, one could simply skip this argument and let it be the default value.\n\nSee also\n\nBoseHubbardMom1D2C\nBoseFS2C\nG2RealCorrelator\nG2RealSpace\nAbstractOperator\nAllOverlaps\n\n\n\n\n\n","category":"type"},{"location":"hamiltonians.html#Rimu.Hamiltonians.SuperfluidCorrelator","page":"Hamiltonians","title":"Rimu.Hamiltonians.SuperfluidCorrelator","text":"SuperfluidCorrelator(d::Int) <: AbstractOperator{Float64}\n\nOperator for extracting superfluid correlation between sites separated by a distance d with 0 ≤ d < M:\n\n    hatC_textSF(d) = frac1M sum_i^M a_i^dagger a_i + d\n\nAssumes a one-dimensional lattice with M sites and periodic boundary conditions. M is also the number of modes in the Fock state address.\n\nUsage\n\nSuperfluid correlations can be extracted from a Monte Carlo calculation by wrapping SuperfluidCorrelator with AllOverlaps and passing into ProjectorMonteCarloProblem with the replica keyword argument. For an example with a similar use of G2RealCorrelator see G2 Correlator Example.\n\nSee also HubbardReal1D, G2RealCorrelator, AbstractOperator, and AllOverlaps.\n\n\n\n\n\n","category":"type"},{"location":"hamiltonians.html#Rimu.Hamiltonians.StringCorrelator","page":"Hamiltonians","title":"Rimu.Hamiltonians.StringCorrelator","text":"StringCorrelator(d::Int; address=nothing, type=nothing) <: AbstractOperator{T}\n\nOperator for extracting string correlation between lattice sites on a one-dimensional Hubbard lattice separated by a distance d with 0 ≤ d < M\n\n    C_textstring(d) = frac1M sum_j^M δ n_j\n                                         (e^i π sum_j  k  j + d δ n_k) δ n_j+d\n\nHere, δ n_j = n_j - n is the boson number deviation from the mean filling number and n = NM is the mean filling number of lattice sites with N particles and M lattice sites (or modes).\n\nAssumes a one-dimensional lattice with periodic boundary conditions. For usage see SuperfluidCorrelator and AllOverlaps.\n\nThe default element type T is ComplexF64. This can be overridden with the type keyword argument. If an address is provided, then T is calculated from the address type. It is set to ComplexF64 for non-integer filling numbers, and to Float64 for integer filling numbers or if d==0.\n\nSee also HubbardReal1D, G2RealCorrelator, SuperfluidCorrelator, AbstractOperator, and AllOverlaps.\n\n\n\n\n\n","category":"type"},{"location":"hamiltonians.html#Rimu.Hamiltonians.DensityMatrixDiagonal","page":"Hamiltonians","title":"Rimu.Hamiltonians.DensityMatrixDiagonal","text":"DensityMatrixDiagonal(mode; component=0) <: AbstractHamiltonian\n\nRepresent a diagonal element of the single-particle density:\n\nhatn_iσ = hat a^_iσ hat a_iσ\n\nwhere i is the mode and σ is the component. If component is zero, the sum over all components is computed.\n\nSee also\n\nsingle_particle_density\nSingleParticleDensity\nSingleParticleExcitation\n\n\n\n\n\n","category":"type"},{"location":"hamiltonians.html#Rimu.Hamiltonians.SingleParticleExcitation","page":"Hamiltonians","title":"Rimu.Hamiltonians.SingleParticleExcitation","text":"SingleParticleExcitation(i, j) <: AbstractHamiltonian\n\nRepresent the ij element of the single-particle reduced density matrix:\n\nρ^(1)_ij = a^_i a_j\n\nwhere i <: Int and j <: Int specify the mode numbers.\n\nSee also\n\nsingle_particle_density\nSingleParticleDensity\nTwoParticleExcitation\n\n\n\n\n\n","category":"type"},{"location":"hamiltonians.html#Rimu.Hamiltonians.TwoParticleExcitation","page":"Hamiltonians","title":"Rimu.Hamiltonians.TwoParticleExcitation","text":"TwoParticleExcitation(i, j, k, l) <: AbstractHamiltonian\n\nRepresent the ij kl element of the two-particle reduced density matrix:\n\nρ^(2)_ij kl =  a^_i a^_j a_l a_k\n\nwhere i, j, k, and l (all <: Int) specify the mode numbers.\n\nSee also\n\nsingle_particle_density\nSingleParticleDensity\nSingleParticleExcitation\n\n\n\n\n\n","category":"type"},{"location":"hamiltonians.html#Rimu.Hamiltonians.Momentum","page":"Hamiltonians","title":"Rimu.Hamiltonians.Momentum","text":"Momentum(component=0; fold=true) <: AbstractHamiltonian\n\nThe momentum operator P.\n\nThe component argument controls which component of the address is taken into consideration. A value of 0 sums the contributions of all components. If fold is true, the momentum is folded into the Brillouin zone.\n\njulia> address = BoseFS((1, 0, 2, 1, 2, 1, 1, 3))\nBoseFS{11,8}(1, 0, 2, 1, 2, 1, 1, 3)\n\njulia> v = DVec(address => 10);\n\njulia> rayleigh_quotient(Momentum(), DVec(address => 1))\n-2.0\n\njulia> rayleigh_quotient(Momentum(fold=false), DVec(address => 1))\n14.0\n\n\n\n\n\n","category":"type"},{"location":"hamiltonians.html#Rimu.Hamiltonians.AxialAngularMomentumHO","page":"Hamiltonians","title":"Rimu.Hamiltonians.AxialAngularMomentumHO","text":"AxialAngularMomentumHO(S; z_dim = 3, addr = BoseFS(prod(S))) <: AbstractHamiltonian\n\nAngular momentum operator for application to Cartesian harmonic oscillator basis, see HOCartesianContactInteractions or HOCartesianEnergyConservedPerDim. Represents the projection of angular momentum onto z-axis:\n\nhatL_z = i hbar sum_j=1^N left( b_x b_y^dag - b_y b_x^dag right)\n\nwhere b_x^dag and b_x are raising and lowering (ladder) operators for  a harmonic oscillator in the x dimension, and simlarly for y.\n\nThis is implemented for an N particle Fock space with creation and annihilation operators as\n\nfrac1hbar hatL_z = i sum_n_x=1^M_x sum_n_y=1^M_y\n    left( a_n_x-1n_y+1^dag - a_n_x+1n_y-1^dag right) a_n_x n_y\n\nin units of hbar.\n\nArgument S is a tuple defining the range of Cartesian modes in each dimension and their mapping to Fock space modes in a SingleComponentFockAddress. If S indicates a 3D system the z dimension can be changed by setting z_dim; S should be be isotropic in the remaining x-y plane, i.e. must have S[x_dim] == S[y_dim]. The starting address addr only needs to satisfy num_modes(addr) == prod(S).\n\nExample\n\nCalculate the overlap of two Fock addresses interpreted as harmonic oscillator states in a 2D Cartesian basis\n\njulia> S = (2,2)\n(2, 2)\n\njulia> Lz = AxialAngularMomentumHO(S)\nAxialAngularMomentumHO((2, 2); z_dim = 3, addr = BoseFS{0,4}(0, 0, 0, 0))\n\njulia> v = DVec(BoseFS(prod(S), 2 => 1) => 1.0)\nDVec{BoseFS{1, 4, BitString{4, 1, UInt8}},Float64} with 1 entry, style = IsDeterministic{Float64}()\n  fs\"|0 1 0 0⟩\" => 1.0\n\njulia> w = DVec(BoseFS(prod(S), 3 => 1) => 1.0)\nDVec{BoseFS{1, 4, BitString{4, 1, UInt8}},Float64} with 1 entry, style = IsDeterministic{Float64}()\n  fs\"|0 0 1 0⟩\" => 1.0\n\njulia> dot(w, Lz, v)\n0.0 + 1.0im\n\n\n\n\n\n","category":"type"},{"location":"hamiltonians.html#Hamiltonians-interface","page":"Hamiltonians","title":"Hamiltonians interface","text":"","category":"section"},{"location":"hamiltonians.html","page":"Hamiltonians","title":"Hamiltonians","text":"Behind the implementation of a particular model is a more abstract interface for defining Hamiltonians. If you want to define a new model you should make use of this interface. The most general form of a model Hamiltonian should subtype to AbstractHamiltonian and implement the relevant methods.","category":"page"},{"location":"hamiltonians.html","page":"Hamiltonians","title":"Hamiltonians","text":"AbstractHamiltonian\noffdiagonals\ndiagonal_element\nstarting_address","category":"page"},{"location":"hamiltonians.html#Rimu.Interfaces.AbstractHamiltonian","page":"Hamiltonians","title":"Rimu.Interfaces.AbstractHamiltonian","text":"AbstractHamiltonian{T} <: AbstractOperator{T}\n\nSupertype that provides an interface for linear operators over a linear space with scalar type T that are suitable for FCIQMC (with ProjectorMonteCarloProblem). Indexing is done with addresses (typically not integers) from an address space that may be large (and will not need to be completely generated).\n\nAbstractHamiltonian instances operate on vectors of type AbstractDVec from the module DictVectors and work well with addresses of type AbstractFockAddress from the module BitStringAddresses. The type works well with the external package KrylovKit.jl.\n\nFor available implementations see Hamiltonians.\n\nInterface\n\nBasic interface methods to implement:\n\nstarting_address(::AbstractHamiltonian)\ndiagonal_element(::AbstractHamiltonian, address)\nnum_offdiagonals(::AbstractHamiltonian, address)\nget_offdiagonal(::AbstractHamiltonian, address, chosen::Integer) (optional, see   below)\n\nOptional additional methods to implement:\n\nLOStructure(::Type{typeof(lo)}): defaults to AdjointUnknown\ndimension(::AbstractHamiltonian, addr): defaults to dimension of address space\nallows_address_type(h::AbstractHamiltonian, type): defaults to type :< typeof(starting_address(h))\nmomentum(::AbstractHamiltonian): no default\n\nProvides the following functions and methods:\n\noffdiagonals: iterator over reachable off-diagonal matrix elements\nrandom_offdiagonal: function to generate random off-diagonal matrix element\n*(H, v): deterministic matrix-vector multiply (allocating)\nH(v): equivalent to H * v.\nmul!(w, H, v): mutating matrix-vector multiply.\ndot(x, H, v): compute x⋅(H*v) minimizing allocations.\nH[address1, address2]: indexing with getindex() - mostly for testing purposes (slow!)\nBasisSetRepresentation: construct a basis set repesentation\nsparse, Matrix: construct a (sparse) matrix representation\n\nAlternatively to the above, offdiagonals can be implemented instead of get_offdiagonal. Sometimes this can be done efficiently. In this case num_offdiagonals should provide an upper bound on the number of elements obtained when iterating offdiagonals.\n\nSee also Hamiltonians, Interfaces, AbstractOperator, AbstractObservable.\n\n\n\n\n\n","category":"type"},{"location":"hamiltonians.html#Rimu.Interfaces.offdiagonals","page":"Hamiltonians","title":"Rimu.Interfaces.offdiagonals","text":"offdiagonals(h::AbstractHamiltonian, address)\n\nReturn an iterator over nonzero off-diagonal matrix elements of h in the same column as address. Will iterate over pairs (newaddress, matrixelement).\n\nExample\n\njulia> address = BoseFS(3,2,1);\n\n\njulia> H = HubbardReal1D(address);\n\n\njulia> h = offdiagonals(H, address)\n6-element Rimu.Hamiltonians.Offdiagonals{BoseFS{6, 3, BitString{8, 1, UInt8}}, Float64, HubbardReal1D{Float64, BoseFS{6, 3, BitString{8, 1, UInt8}}, 1.0, 1.0}}:\n (fs\"|2 3 1⟩\", -3.0)\n (fs\"|2 2 2⟩\", -2.449489742783178)\n (fs\"|3 1 2⟩\", -2.0)\n (fs\"|4 1 1⟩\", -2.8284271247461903)\n (fs\"|4 2 0⟩\", -2.0)\n (fs\"|3 3 0⟩\", -1.7320508075688772)\n\nPart of the AbstractHamiltonian interface.\n\nExtemded help\n\noffdiagonals return and iterator of type <:AbstractOffdiagonals. It defaults to returning Offdiagonals(h, a)\n\nSee also Offdiagonals, AbstractOffdiagonals.\n\n\n\n\n\n","category":"function"},{"location":"hamiltonians.html#Rimu.Interfaces.diagonal_element","page":"Hamiltonians","title":"Rimu.Interfaces.diagonal_element","text":"diagonal_element(ham, address)\n\nCompute the diagonal matrix element of the linear operator ham at address address.\n\nExample\n\njulia> address = BoseFS((3, 2, 1));\n\n\njulia> H = HubbardMom1D(address);\n\n\njulia> diagonal_element(H, address)\n8.666666666666664\n\nPart of the AbstractHamiltonian interface.\n\n\n\n\n\n","category":"function"},{"location":"hamiltonians.html#Rimu.Interfaces.starting_address","page":"Hamiltonians","title":"Rimu.Interfaces.starting_address","text":"starting_address(h)\n\nReturn the starting address for Hamiltonian h. When called on an AbstractMatrix, starting_address returns the index of the lowest diagonal element.\n\nExample\n\njulia> address = BoseFS((3, 2, 1));\n\n\njulia> H = HubbardMom1D(address);\n\n\njulia> address == starting_address(H)\ntrue\n\nPart of the AbstractHamiltonian interface.\n\n\n\n\n\n","category":"function"},{"location":"hamiltonians.html","page":"Hamiltonians","title":"Hamiltonians","text":"The following functions may be implemented instead of offdiagonals.","category":"page"},{"location":"hamiltonians.html","page":"Hamiltonians","title":"Hamiltonians","text":"num_offdiagonals\nget_offdiagonal","category":"page"},{"location":"hamiltonians.html#Rimu.Interfaces.num_offdiagonals","page":"Hamiltonians","title":"Rimu.Interfaces.num_offdiagonals","text":"num_offdiagonals(ham, address)\n\nCompute the number of number of reachable configurations from address address.\n\nExample\n\njulia> address = BoseFS((3, 2, 1));\n\n\njulia> H = HubbardMom1D(address);\n\n\njulia> num_offdiagonals(H, address)\n10\n\nPart of the AbstractHamiltonian interface.\n\n\n\n\n\n","category":"function"},{"location":"hamiltonians.html#Rimu.Interfaces.get_offdiagonal","page":"Hamiltonians","title":"Rimu.Interfaces.get_offdiagonal","text":"newadd, me = get_offdiagonal(ham, address, chosen)\n\nCompute value me and new address newadd of a single (off-diagonal) matrix element in a Hamiltonian ham. The off-diagonal element is in the same column as address address and is indexed by integer index chosen.\n\nExample\n\njulia> addr = BoseFS(3, 2, 1);\n\njulia> H = HubbardMom1D(addr);\n\njulia> get_offdiagonal(H, addr, 3)\n(BoseFS{6,3}(2, 1, 3), 1.0)\n\nPart of the AbstractHamiltonian interface.\n\n\n\n\n\n","category":"function"},{"location":"hamiltonians.html","page":"Hamiltonians","title":"Hamiltonians","text":"The following functions come with default implementations, but may be customized.","category":"page"},{"location":"hamiltonians.html","page":"Hamiltonians","title":"Hamiltonians","text":"random_offdiagonal\nHamiltonians.LOStructure\ndimension\nhas_adjoint\nallows_address_type\nBase.eltype\nVectorInterface.scalartype\nmul!","category":"page"},{"location":"hamiltonians.html#Rimu.Interfaces.random_offdiagonal","page":"Hamiltonians","title":"Rimu.Interfaces.random_offdiagonal","text":"random_offdiagonal(offdiagonals::AbstractOffdiagonals)\nrandom_offdiagonal(ham::AbstractHamiltonian, address)\n-> newaddress, probability, matrixelement\n\nGenerate a single random excitation, i.e. choose from one of the accessible off-diagonal elements in the column corresponding to address in the Hamiltonian matrix represented by ham. Alternatively, pass as argument an iterator over the accessible matrix elements.\n\nPart of the AbstractHamiltonian interface.\n\n\n\n\n\n","category":"function"},{"location":"hamiltonians.html#Rimu.Interfaces.LOStructure","page":"Hamiltonians","title":"Rimu.Interfaces.LOStructure","text":"LOStructure(op::AbstractHamiltonian)\nLOStructure(typeof(op))\n\nReturn information about the structure of the linear operator op. LOStructure is used as a trait to speficy symmetries or other properties of the linear operator op that may simplify or speed up calculations. Implemented instances are:\n\nIsDiagonal(): The operator is diagonal.\nIsHermitian(): The operator is complex and Hermitian or real and symmetric.\nAdjointKnown(): The operator is not Hermitian, but its   adjoint is implemented.\nAdjointUnknown(): adjoint for this operator is not   implemented.\n\nPart of the AbstractHamiltonian interface.\n\nIn order to define this trait for a new linear operator type, define a method for LOStructure(::Type{<:MyNewLOType}) = ….\n\n\n\n\n\n","category":"type"},{"location":"hamiltonians.html#Rimu.Hamiltonians.dimension","page":"Hamiltonians","title":"Rimu.Hamiltonians.dimension","text":"dimension(h::AbstractHamiltonian, addr=starting_address(h))\ndimension(h::AbstractOperator, addr)\ndimension(addr::AbstractFockAddress)\ndimension(::Type{<:AbstractFockAddress})\n\nReturn the estimated dimension of Hilbert space. May return a BigInt number.\n\nWhen called on an address or address type, the dimension of the linear space spanned by the address type is returned. When called on an AbstractHamiltonian, an upper bound on the dimension of the matrix representing the Hamiltonian is returned.\n\nExamples\n\njulia> dimension(OccupationNumberFS(1,2,3))\n16777216\n\njulia> dimension(HubbardReal1D(OccupationNumberFS(1,2,3)))\n28\n\njulia> dimension(BoseFS{200,100})\n1386083821086188248261127842108801860093488668581216236221011219101585442774669540\n\njulia> Float64(ans)\n1.3860838210861882e81\n\nPart of the AbstractHamiltonian interface. See also BasisSetRepresentation.\n\nExtended Help\n\nThe default fallback for dimension called on an AbstractHamiltonian is to return the dimension of the address space, which provides an upper bound. For new Hamiltonians a tighter bound can be provided by defining a custom method.\n\nWhen extending AbstractHamiltonian, define a method for the two-argument form dimension(h::MyNewHamiltonian, addr). For number-conserving Hamiltonians, the function Hamiltonians.number_conserving_dimension may be useful.\n\nWhen extending AbstractFockAddress, define a method for dimension(::Type{MyNewFockAddress}).\n\n\n\n\n\n","category":"function"},{"location":"hamiltonians.html#Rimu.Interfaces.has_adjoint","page":"Hamiltonians","title":"Rimu.Interfaces.has_adjoint","text":"has_adjoint(op)\n\nReturn true if adjoint is defined on op.\n\nPart of the AbstractHamiltonian interface.\n\nSee also LOStructure.\n\n\n\n\n\n","category":"function"},{"location":"hamiltonians.html#Rimu.Interfaces.allows_address_type","page":"Hamiltonians","title":"Rimu.Interfaces.allows_address_type","text":"allows_address_type(operator, addr_or_type)\n\nReturns true if addr_or_type is a valid address for operator. Otherwise, returns false.\n\nPart of the AbstractHamiltonian interface.\n\nExtended help\n\nDefaults to addr_or_type <: typeof(starting_address(operator)). Overload this function if the operator can be used with addresses of different types.\n\n\n\n\n\n","category":"function"},{"location":"hamiltonians.html#Base.eltype","page":"Hamiltonians","title":"Base.eltype","text":"eltype(op::AbstractObservable)\n\nReturn the type of the elements of the operator. This can be a vector value. For the underlying scalar type use scalartype.\n\nPart of the AbstractObservable interface.\n\nnote: Note\nNew types do not have to implement this method explicitly. An implementation is provided based on the AbstractObservable's type parameter.\n\n\n\n\n\n","category":"function"},{"location":"hamiltonians.html#VectorInterface.scalartype","page":"Hamiltonians","title":"VectorInterface.scalartype","text":"scalartype(op::AbstractObservable)\n\nReturn the type of the underlying scalar field of the operator. This may be different from the element type of the operator returned by eltype, which can be a vector value.\n\nPart of the AbstractObservable interface.\n\nnote: Note\nNew types do not have to implement this method explicitly. An implementation is provided based on the AbstractObservable's type parameter.\n\n\n\n\n\n","category":"function"},{"location":"hamiltonians.html#LinearAlgebra.mul!","page":"Hamiltonians","title":"LinearAlgebra.mul!","text":"LinearAlgebra.mul!(w::AbstractDVec, op::AbstractOperator, v::AbstractDVec)\n\nIn place multiplication of op with v and storing the result in w. The result is returned. Note that w needs to have a valtype that can hold a product of instances of eltype(op) and valtype(v). Moreover, the StochasticStyle of w needs to be <:IsDeterministic.\n\nPart of the AbstractOperator interface.\n\nThe default implementation relies of diagonal_element and offdiagonals to access the elements of the operator. The function can be overloaded for custom operators.\n\n\n\n\n\n","category":"function"},{"location":"hamiltonians.html","page":"Hamiltonians","title":"Hamiltonians","text":"This interface relies on unexported functionality, including","category":"page"},{"location":"hamiltonians.html","page":"Hamiltonians","title":"Hamiltonians","text":"Hamiltonians.adjoint\nHamiltonians.dot\nHamiltonians.AbstractOffdiagonals\nHamiltonians.Offdiagonals\nHamiltonians.check_address_type\nHamiltonians.number_conserving_dimension\nHamiltonians.number_conserving_bose_dimension\nHamiltonians.number_conserving_fermi_dimension","category":"page"},{"location":"hamiltonians.html#Base.adjoint","page":"Hamiltonians","title":"Base.adjoint","text":"adjoint(::LOStructure, op::AbstractOperator)\n\nRepresent the adjoint of an AbstractOperator. Extend this method to define custom adjoints.\n\n\n\n\n\n","category":"function"},{"location":"hamiltonians.html#LinearAlgebra.dot","page":"Hamiltonians","title":"LinearAlgebra.dot","text":"dot(w, op::AbstractObservable, v)\n\nEvaluate w⋅op(v) minimizing memory allocations.\n\n\n\n\n\n","category":"function"},{"location":"hamiltonians.html#Rimu.Hamiltonians.AbstractOffdiagonals","page":"Hamiltonians","title":"Rimu.Hamiltonians.AbstractOffdiagonals","text":"AbstractOffdiagonals{A,T}<:AbstractVector{Tuple{A,T}}\n\nIterator over new address and matrix elements for reachable off-diagonal matrix elements of a linear operator.\n\nSee Offdiagonals for a default implementation.\n\nMethods to define\n\noffdiagonals(h, a)::AbstractOffdiagonals: This function is used to construct the correct type of offdiagonals for a given combination of Hamiltonian h and Fock address a.\nBase.getindex(::AbstractOffdiagonals, i): should be equivalent to get_offdiagonal(h, a, i).\nBase.size(::AbstractOffdiagonals): should be equivalent to num_offdiagonals(h, a).\n\nSee also offdiagonals, AbstractHamiltonian, AbstractOperator.\n\n\n\n\n\n","category":"type"},{"location":"hamiltonians.html#Rimu.Hamiltonians.Offdiagonals","page":"Hamiltonians","title":"Rimu.Hamiltonians.Offdiagonals","text":"Offdiagonals(h, address) <: AbstractOffdiagonals\n\nIterator over new address and matrix element for reachable off-diagonal matrix elements of linear operator h from address address.  Represents an abstract vector containing the non-zero off-diagonal matrix elements of the column of h indexed by address. To construct this iterator use offdiagonals.\n\nThis is the default implementation of AbstractOffdiagonals defined in terms of num_offdiagonals and get_offdiagonal.\n\nSee also offdiagonals, AbstractHamiltonian, AbstractOperator.\n\n\n\n\n\n","category":"type"},{"location":"hamiltonians.html#Rimu.Hamiltonians.check_address_type","page":"Hamiltonians","title":"Rimu.Hamiltonians.check_address_type","text":"check_address_type(h::AbstractOperator, addr_or_type)\n\nThrow an ArgumentError if addr_or_type is not compatible with h, otherwise return true. Acceptable arguments are either an address or an address type, or a tuple or array thereof.\n\nSee also allows_address_type.\n\n\n\n\n\n","category":"function"},{"location":"hamiltonians.html#Rimu.Hamiltonians.number_conserving_dimension","page":"Hamiltonians","title":"Rimu.Hamiltonians.number_conserving_dimension","text":"number_conserving_dimension(address <: AbstractFockAddress)\n\nReturn the dimension of the Fock space spanned by the address type assuming particle number conservation.\n\nSee also number_conserving_bose_dimension, number_conserving_fermi_dimension, dimension.\n\n\n\n\n\n","category":"function"},{"location":"hamiltonians.html#Rimu.Hamiltonians.number_conserving_bose_dimension","page":"Hamiltonians","title":"Rimu.Hamiltonians.number_conserving_bose_dimension","text":"number_conserving_bose_dimension(n, m)\n\nReturn the dimension of the number-conserving Fock space for n bosons in m modes: binomial(n + m - 1, n).\n\nSee also number_conserving_fermi_dimension, number_conserving_dimension.\n\n\n\n\n\n","category":"function"},{"location":"hamiltonians.html#Rimu.Hamiltonians.number_conserving_fermi_dimension","page":"Hamiltonians","title":"Rimu.Hamiltonians.number_conserving_fermi_dimension","text":"number_conserving_fermi_dimension(n, m)\n\nReturn the dimension of the number-conserving Fock space for n fermions in m modes: binomial(m, n).\n\nSee also number_conserving_bose_dimension, number_conserving_dimension.\n\n\n\n\n\n","category":"function"},{"location":"hamiltonians.html#Geometry","page":"Hamiltonians","title":"Geometry","text":"","category":"section"},{"location":"hamiltonians.html","page":"Hamiltonians","title":"Hamiltonians","text":"Lattices in higher dimensions are defined here for HubbardRealSpace and G2RealSpace.","category":"page"},{"location":"hamiltonians.html","page":"Hamiltonians","title":"Hamiltonians","text":"CubicGrid\nHamiltonians.Directions\nHamiltonians.Displacements\nHamiltonians.neighbor_site\nPeriodicBoundaries\nHardwallBoundaries\nLadderBoundaries","category":"page"},{"location":"hamiltonians.html#Rimu.Hamiltonians.CubicGrid","page":"Hamiltonians","title":"Rimu.Hamiltonians.CubicGrid","text":"CubicGrid(dims::NTuple{D,Int}, fold::NTuple{D,Bool})\n\nRepresents a D-dimensional grid. Used to define a cubic lattice and boundary conditions for some AbstractHamiltonians. The type instance can be used to convert between cartesian vector indices (tuples or SVectors) and linear indices (integers). When indexed with vectors, it folds them back into the grid if the out-of-bounds dimension is periodic and 0 otherwise (see example below).\n\ndims controls the size of the grid in each dimension.\nfold controls whether the boundaries in each dimension are periodic (or folded in the case of momentum space).\n\njulia> geo = CubicGrid((2,3), (true,false))\nCubicGrid{2}((2, 3), (true, false))\n\njulia> geo[1]\n(1, 1)\n\njulia> geo[2]\n(2, 1)\n\njulia> geo[3]\n(1, 2)\n\njulia> geo[(1,2)]\n3\n\njulia> geo[(3,2)] # 3 is folded back into 1\n3\n\njulia> geo[(3,3)]\n5\n\njulia> geo[(3,4)] # returns 0 if out of bounds\n0\n\nSee also PeriodicBoundaries, HardwallBoundaries and LadderBoundaries for special-case constructors.\n\n\n\n\n\n","category":"type"},{"location":"hamiltonians.html#Rimu.Hamiltonians.Directions","page":"Hamiltonians","title":"Rimu.Hamiltonians.Directions","text":"Directions(D) <: AbstractVector{SVector{D,Int}}\nDirections(geometry::CubicGrid) <: AbstractVector{SVector{D,Int}}\n\nIterate over axis-aligned direction vectors in D dimensions.\n\njulia> Directions(3)\n6-element Directions{3}:\n [1, 0, 0]\n [0, 1, 0]\n [0, 0, 1]\n [-1, 0, 0]\n [0, -1, 0]\n [0, 0, -1]\n\n\nSee also CubicGrid.\n\n\n\n\n\n","category":"type"},{"location":"hamiltonians.html#Rimu.Hamiltonians.Displacements","page":"Hamiltonians","title":"Rimu.Hamiltonians.Displacements","text":"Displacements(geometry::CubicGrid) <: AbstractVector{SVector{D,Int}}\n\nReturn all valid offset vectors in a CubicGrid. If center=true the (0,0) displacement is placed at the centre of the array.\n\njulia> geometry = CubicGrid((3,4));\n\njulia> reshape(Displacements(geometry), (3,4))\n3×4 reshape(::Displacements{2, CubicGrid{2, (3, 4), (true, true)}}, 3, 4) with eltype StaticArraysCore.SVector{2, Int64}:\n [0, 0]  [0, 1]  [0, 2]  [0, 3]\n [1, 0]  [1, 1]  [1, 2]  [1, 3]\n [2, 0]  [2, 1]  [2, 2]  [2, 3]\n\njulia> reshape(Displacements(geometry; center=true), (3,4))\n3×4 reshape(::Displacements{2, CubicGrid{2, (3, 4), (true, true)}}, 3, 4) with eltype StaticArraysCore.SVector{2, Int64}:\n [-1, -1]  [-1, 0]  [-1, 1]  [-1, 2]\n [0, -1]   [0, 0]   [0, 1]   [0, 2]\n [1, -1]   [1, 0]   [1, 1]   [1, 2]\n\n\n\n\n\n\n","category":"type"},{"location":"hamiltonians.html#Rimu.Hamiltonians.neighbor_site","page":"Hamiltonians","title":"Rimu.Hamiltonians.neighbor_site","text":"neighbor_site(geom::CubicGrid, site, i)\n\nFind the i-th neighbor of site in the geometry. If the move is illegal, return 0.\n\n\n\n\n\n","category":"function"},{"location":"hamiltonians.html#Rimu.Hamiltonians.PeriodicBoundaries","page":"Hamiltonians","title":"Rimu.Hamiltonians.PeriodicBoundaries","text":"PeriodicBoundaries(dims...) -> CubicGrid\nPeriodicBoundaries(dims) -> CubicGrid\n\nReturn CubicGrid with all dimensions periodic. Equivalent to CubicGrid(dims).\n\n\n\n\n\n","category":"function"},{"location":"hamiltonians.html#Rimu.Hamiltonians.HardwallBoundaries","page":"Hamiltonians","title":"Rimu.Hamiltonians.HardwallBoundaries","text":"HardwallBoundaries(dims...) -> CubicGrid\nHardwallBoundaries(dims) -> CubicGrid\n\nReturn CubicGrid with all dimensions non-periodic. Equivalent to CubicGrid(dims, (false, false, ...)).\n\n\n\n\n\n","category":"function"},{"location":"hamiltonians.html#Rimu.Hamiltonians.LadderBoundaries","page":"Hamiltonians","title":"Rimu.Hamiltonians.LadderBoundaries","text":"LadderBoundaries(dims...) -> CubicGrid\nLadderBoundaries(dims) -> CubicGrid\n\nReturn CubicGrid where the first dimension is dimensions non-periodic and the rest are periodic. Equivalent to CubicGrid(dims, (true, false, ...)).\n\n\n\n\n\n","category":"function"},{"location":"hamiltonians.html#Harmonic-Oscillator","page":"Hamiltonians","title":"Harmonic Oscillator","text":"","category":"section"},{"location":"hamiltonians.html","page":"Hamiltonians","title":"Hamiltonians","text":"Useful utilities for harmonic oscillator in Cartesian basis, see HOCartesianContactInteractions and HOCartesianEnergyConservedPerDim.","category":"page"},{"location":"hamiltonians.html","page":"Hamiltonians","title":"Hamiltonians","text":"get_all_blocks\nfock_to_cart","category":"page"},{"location":"hamiltonians.html#Rimu.Hamiltonians.get_all_blocks","page":"Hamiltonians","title":"Rimu.Hamiltonians.get_all_blocks","text":"get_all_blocks(h::Union{HOCartesianContactInteractions,HOCartesianEnergyConservedPerDim}; \n    target_energy = nothing, \n    max_energy = nothing, \n    max_blocks = nothing, \n    method = :vertices,\n    kwargs...) -> df\n\nFind all distinct blocks of h. Returns a DataFrame with columns \n\nblock_id: index of block in order found\nblock_E0: noninteracting energy of all elements in the block\nblock_size: number of elements in the block\naddr: first address that generates the block with e.g. BasisSetRep\nindices: tuple of mode indices that allow recreation of the generating address    addr; in this case use e.g. BoseFS(M; indices .=> 1) This is useful when    the DataFrame is loaded from file since Arrow.jl converts custom   types to NamedTuples.\nt_basis: time to generate the basis for each block\n\nKeyword arguments:\n\ntarget_energy: only blocks with this noninteracting energy are found\nmax_energy: only blocks with noninteracting energy less than this are found\nmax_blocks: exit after finding this many blocks\nmethod: Choose between :vertices and :comb for method of enumerating    tuples of quantum numbers\nsave_to_file=nothing: if set then the DataFrame recording blocks is saved    after each new block is found\nadditional kwargs: passed to isapprox for comparing block energies.    Useful for anisotropic traps\n\nNote: If h was constructed with option block_by_level = false then the block seeds  addr are determined by parity. In this case the blocks are not generated; t_basis  will be zero, and block_size will be an estimate. Pass the seed addresses to  BasisSetRep with an appropriate filter to generate the blocks.\n\n\n\n\n\n","category":"function"},{"location":"hamiltonians.html#Rimu.Hamiltonians.fock_to_cart","page":"Hamiltonians","title":"Rimu.Hamiltonians.fock_to_cart","text":"fock_to_cart(addr, S; zero_index = true)\n\nConvert a Fock state address addr to Cartesian harmonic oscillator basis  indices n_xn_yldots. These indices are bounded by S which is a  tuple of the maximum number of states in each dimension. By default the  groundstate in each dimension is indexed by 0, but this can be changed  by setting zero_index = false.\n\n\n\n\n\n","category":"function"},{"location":"hamiltonians.html","page":"Hamiltonians","title":"Hamiltonians","text":"Underlying integrals for the interaction matrix elements are implemented in the following unexported functions","category":"page"},{"location":"hamiltonians.html","page":"Hamiltonians","title":"Hamiltonians","text":"Hamiltonians.four_oscillator_integral_general\nHamiltonians.ho_delta_potential\nHamiltonians.log_abs_oscillator_zero","category":"page"},{"location":"hamiltonians.html#Rimu.Hamiltonians.four_oscillator_integral_general","page":"Hamiltonians","title":"Rimu.Hamiltonians.four_oscillator_integral_general","text":"four_oscillator_integral_general(i, j, k, l; max_level = typemax(Int))\n\nIntegral of four one-dimensional harmonic oscillator functions,\n\n    mathcalI(ijkl) = int_-infty^infty dx \n    phi_i(x) phi_j(x) phi_k(x) phi_l(x)\n\nIndices i,j,k,l start at 0 for the groundstate.\n\nThis integral has a closed form in terms of the hypergeometric _3F_2 function, and is non-zero unless i+j+k+l is odd. See e.g. Titchmarsh (1948). This is a generalisation of the closed form in Papenbrock (2002), which is is the special case where i+j == k+l, but is numerically unstable for large arguments. Used in HOCartesianContactInteractions and HOCartesianEnergyConservedPerDim.\n\n\n\n\n\n","category":"function"},{"location":"hamiltonians.html#Rimu.Hamiltonians.ho_delta_potential","page":"Hamiltonians","title":"Rimu.Hamiltonians.ho_delta_potential","text":"ho_delta_potential(S, i, j; [vals])\n\nReturns the matrix element of a delta potential at the centre of a trap, i.e. the  product of two harmonic oscillator functions evaluated at the origin,\n\n    v_ij = phi_mathbfn_i(0) phi_mathbfn_j(0)\n\nwhich is only non-zero for even-parity states. The ith single particle state corresponds to a D-tuple of harmonic oscillator indices mathbfn_i. S defines the bounds of Cartesian harmonic oscillator indices for each dimension. The optional keyword argument vals allows passing pre-computed values of phi_i(0) to speed-up the calculation. The values can be calculated with log_abs_oscillator_zero.\n\nSee also HOCartesianCentralImpurity.\n\n\n\n\n\n","category":"function"},{"location":"hamiltonians.html#Rimu.Hamiltonians.log_abs_oscillator_zero","page":"Hamiltonians","title":"Rimu.Hamiltonians.log_abs_oscillator_zero","text":"log_abs_oscillator_zero(n)\n\nCompute the logarithm of the absolute value of the n^mathrmth 1D harmonic oscillator function evaluated at the origin. The overall sign is determined when the matrix element is evaluated in ho_delta_potential.\n\n\n\n\n\n","category":"function"},{"location":"hamiltonians.html#Index","page":"Hamiltonians","title":"Index","text":"","category":"section"},{"location":"hamiltonians.html","page":"Hamiltonians","title":"Hamiltonians","text":"Pages   = [\"hamiltonians.md\"]","category":"page"},{"location":"RMPI.html#Module-RMPI","page":"RMPI","title":"Module RMPI","text":"","category":"section"},{"location":"RMPI.html","page":"RMPI","title":"RMPI","text":"Rimu.RMPI","category":"page"},{"location":"RMPI.html#Rimu.RMPI","page":"RMPI","title":"Rimu.RMPI","text":"Module for providing MPI functionality for Rimu. This module is unexported. To use it, run\n\nusing Rimu.RMPI\n\n\n\n\n\n","category":"module"},{"location":"RMPI.html#MPIData","page":"RMPI","title":"MPIData","text":"","category":"section"},{"location":"RMPI.html","page":"RMPI","title":"RMPI","text":"Rimu.RMPI.MPIData","category":"page"},{"location":"RMPI.html#Rimu.RMPI.MPIData","page":"RMPI","title":"Rimu.RMPI.MPIData","text":"MPIData(data; kwargs...)\n\nWrapper used for signaling that this data is part of a distributed data structure and communication should happen with MPI. MPIData can generally be used where an AbstractDVec would be used otherwise. Unlike AbstractDVecs, MPIData does not support indexing, or iteration over keys, values, and pairs.\n\nKeyword arguments:\n\nsetup = mpi_point_to_point - controls the communication stratgy\nmpi_one_sided uses one-sided communication with remote memory access (RMA), sets MPIOneSided strategy.\nmpi_point_to_point uses MPIPointToPoint strategy.\nmpi_all_to_all uses MPIAllToAll strategy.\nmpi_no_exchange sets MPINoWalkerExchange strategy. Experimental. Use with caution!\ncomm = mpi_comm()\nroot = mpi_root\nThe rest of the keyword arguments are passed to setup.\n\n\n\n\n\n","category":"type"},{"location":"RMPI.html#Setup-functions","page":"RMPI","title":"Setup functions","text":"","category":"section"},{"location":"RMPI.html","page":"RMPI","title":"RMPI","text":"The following distribute strategies are available. The functions are unexported.","category":"page"},{"location":"RMPI.html","page":"RMPI","title":"RMPI","text":"Rimu.RMPI.mpi_point_to_point\nRimu.RMPI.mpi_one_sided\nRimu.RMPI.mpi_all_to_all\nRimu.RMPI.mpi_no_exchange","category":"page"},{"location":"RMPI.html#Rimu.RMPI.mpi_point_to_point","page":"RMPI","title":"Rimu.RMPI.mpi_point_to_point","text":"mpi_point_to_point(data, comm = mpi_comm(), root = mpi_root)\n\nDeclare data as mpi-distributed and set communication strategy to point-to-point.\n\nSets up the MPIData structure with MPIPointToPoint strategy.\n\n\n\n\n\n","category":"function"},{"location":"RMPI.html#Rimu.RMPI.mpi_one_sided","page":"RMPI","title":"Rimu.RMPI.mpi_one_sided","text":"mpi_one_sided(data, comm = mpi_comm(), root = mpi_root; capacity)\n\nDeclare data as mpi-distributed and set communication strategy to one-sided with remote memory access (RMA). capacity sets the capacity of the RMA windows.\n\nSets up the MPIData structure with MPIOneSided strategy.\n\n\n\n\n\n","category":"function"},{"location":"RMPI.html#Rimu.RMPI.mpi_all_to_all","page":"RMPI","title":"Rimu.RMPI.mpi_all_to_all","text":"mpi_all_to_all(data, comm = mpi_comm(), root = mpi_root)\n\nDeclare data as mpi-distributed and set communication strategy to all-to-all.\n\nSets up the MPIData structure with MPIAllToAll strategy.\n\n\n\n\n\n","category":"function"},{"location":"RMPI.html#Rimu.RMPI.mpi_no_exchange","page":"RMPI","title":"Rimu.RMPI.mpi_no_exchange","text":"mpi_no_exchange(data, comm = mpi_comm(), root = mpi_root)\n\nDeclare data as mpi-distributed and set communication strategy to MPINoWalkerExchange. Sets up the MPIData structure with MPINoWalkerExchange strategy.\n\n\n\n\n\n","category":"function"},{"location":"RMPI.html#Strategies","page":"RMPI","title":"Strategies","text":"","category":"section"},{"location":"RMPI.html","page":"RMPI","title":"RMPI","text":"Rimu.RMPI.MPIPointToPoint\nRimu.RMPI.MPIOneSided\nRimu.RMPI.MPIAllToAll\nRimu.RMPI.MPINoWalkerExchange","category":"page"},{"location":"RMPI.html#Rimu.RMPI.MPIPointToPoint","page":"RMPI","title":"Rimu.RMPI.MPIPointToPoint","text":"MPIPointToPoint{N,A}\n\nPoint-to-point communication strategy. Uses circular communication using MPI.Send and MPI.Recv!.\n\nConstructor\n\nMPIPointToPoint(::Type{P}, np, id, comm): Construct an instance with pair type P on np processes with current rank id.\n\n\n\n\n\n","category":"type"},{"location":"RMPI.html#Rimu.RMPI.MPIOneSided","page":"RMPI","title":"Rimu.RMPI.MPIOneSided","text":"MPIOneSided(nprocs, myrank, comm, ::Type{T}, capacity)\n\nCommunication buffer for use with MPI one-sided communication (remote memory access). Up to capacity elements of type T can be exchanged between MPI ranks via put. It is important that isbitstype(T) == true. Objects of type MPIOneSided have to be freed manually with a (blocking) call to free().\n\n\n\n\n\n","category":"type"},{"location":"RMPI.html#Rimu.RMPI.MPIAllToAll","page":"RMPI","title":"Rimu.RMPI.MPIAllToAll","text":" MPIAllToAll\n\nAll-to-all communication strategy. The communication works in two steps: first MPI.Alltoall! is used to communicate the number of walkers each rank wants to send to other ranks, then MPI.Alltoallv! is used to send the walkers around.\n\nConstructor\n\nMPIAllToAll(Type{P}, np, id, comm): Construct an instance with pair type P on np processes with current rank id.\n\n\n\n\n\n","category":"type"},{"location":"RMPI.html#Rimu.RMPI.MPINoWalkerExchange","page":"RMPI","title":"Rimu.RMPI.MPINoWalkerExchange","text":"MPINoWalkerExchange(nprocs, my_rank, comm)\n\nStrategy for not exchanging walkers between ranks. Consequently there will be no cross-rank annihilations.\n\n\n\n\n\n","category":"type"},{"location":"RMPI.html#MPI-convenience-functions","page":"RMPI","title":"MPI convenience functions","text":"","category":"section"},{"location":"RMPI.html","page":"RMPI","title":"RMPI","text":"Modules = [Rimu.RMPI]\nPages = [\"helpers.jl\"]\nPrivate = true\nPublic = true","category":"page"},{"location":"RMPI.html#Rimu.RMPI.mpi_root","page":"RMPI","title":"Rimu.RMPI.mpi_root","text":"Default MPI root for RMPI.\n\n\n\n\n\n","category":"constant"},{"location":"RMPI.html#Rimu.DictVectors.mpi_comm-Tuple{}","page":"RMPI","title":"Rimu.DictVectors.mpi_comm","text":"Default MPI communicator for RMPI.\n\n\n\n\n\n","category":"method"},{"location":"RMPI.html#Rimu.DictVectors.mpi_rank","page":"RMPI","title":"Rimu.DictVectors.mpi_rank","text":"mpi_rank(comm = mpi_comm())\n\nReturn the current MPI rank.\n\n\n\n\n\n","category":"function"},{"location":"RMPI.html#Rimu.DictVectors.mpi_size","page":"RMPI","title":"Rimu.DictVectors.mpi_size","text":"mpi_size(comm = mpi_comm())\n\nSize of MPI communicator.\n\n\n\n\n\n","category":"function"},{"location":"RMPI.html#Rimu.RMPI.is_mpi_root","page":"RMPI","title":"Rimu.RMPI.is_mpi_root","text":"is_mpi_root(root = mpi_root)\n\nReturns true if called from the root rank\n\n\n\n\n\n","category":"function"},{"location":"RMPI.html#Rimu.RMPI.mpi_allprintln-Tuple","page":"RMPI","title":"Rimu.RMPI.mpi_allprintln","text":"mpi_allprintln(args...)\n\nPrint a message to stdout from each rank separately, in order. MPI synchronizing.\n\n\n\n\n\n","category":"method"},{"location":"RMPI.html#Rimu.RMPI.mpi_barrier","page":"RMPI","title":"Rimu.RMPI.mpi_barrier","text":"mpi_barrier(comm = mpi_comm())\n\nThe MPI barrier with optional argument. MPI syncronizing.\n\n\n\n\n\n","category":"function"},{"location":"RMPI.html#Rimu.RMPI.mpi_combine_walkers!-Tuple{Rimu.RMPI.MPIData, AbstractDVec}","page":"RMPI","title":"Rimu.RMPI.mpi_combine_walkers!","text":"mpi_combine_walkers!(target, source, [strategy])\n\nDistribute the entries of source to the target data structure such that all entries in the target are on the process with the correct mpi rank as controlled by targetrank(). MPI syncronizing.\n\nNote: the storage of the source is communicated rather than the source itself.\n\n\n\n\n\n","category":"method"},{"location":"RMPI.html#Rimu.RMPI.mpi_seed!","page":"RMPI","title":"Rimu.RMPI.mpi_seed!","text":"mpi_seed!(seed = rand(Random.RandomDevice(), UInt))\n\nRe-seed the random number generators in an MPI-safe way. If seed is provided, the random numbers from rand will follow a deterministic sequence.\n\nIndependence of the random number generators on different MPI ranks is achieved by adding hash(mpi_rank()) to seed.\n\n\n\n\n\n","category":"function"},{"location":"RMPI.html#Rimu.RMPI.next_mpiID","page":"RMPI","title":"Rimu.RMPI.next_mpiID","text":"next_mpiID()\n\nProduce a new ID number for MPI distributed objects. Uses an internal counter.\n\n\n\n\n\n","category":"function"},{"location":"RMPI.html#Rimu.RMPI.targetrank-Tuple{Union{Integer, AbstractFockAddress}, Any}","page":"RMPI","title":"Rimu.RMPI.targetrank","text":"targetrank(key, np)\n\nCompute the rank where the key belongs.\n\n\n\n\n\n","category":"method"},{"location":"RMPI.html#Rimu.RMPI.@mpi_root-Tuple","page":"RMPI","title":"Rimu.RMPI.@mpi_root","text":"@mpi_root expr\n\nEvaluate expression only on the root rank. Extra care needs to be taken as expr must not contain any code that involves syncronising MPI operations, i.e. actions that would require syncronous action of all MPI ranks.\n\nExample:\n\nwn = walkernumber(dv)   # an MPI syncronising function call that gathers\n                        # information from all MPI ranks\n@mpi_root @info \"The current walker number is\" wn # print info message on root only\n\n\n\n\n\n","category":"macro"},{"location":"RMPI.html#Index","page":"RMPI","title":"Index","text":"","category":"section"},{"location":"RMPI.html","page":"RMPI","title":"RMPI","text":"Pages   = [\"RMPI.md\"]","category":"page"},{"location":"testing.html#Code-testing","page":"Code testing","title":"Code testing","text":"","category":"section"},{"location":"testing.html","page":"Code testing","title":"Code testing","text":"The script runtest.jl in the test/ folder contains tests of the code. To run the test simply run the script from the Julia REPL or run","category":"page"},{"location":"testing.html","page":"Code testing","title":"Code testing","text":"Rimu$ julia test/runtest.jl","category":"page"},{"location":"testing.html","page":"Code testing","title":"Code testing","text":"from the command line.","category":"page"},{"location":"testing.html","page":"Code testing","title":"Code testing","text":"More tests should be added over time to test core functionality of the code. To add new tests, directly edit the file runtest.jl.","category":"page"},{"location":"testing.html#Automated-testing-with-GitHub-Actions","page":"Code testing","title":"Automated testing with GitHub Actions","text":"","category":"section"},{"location":"testing.html","page":"Code testing","title":"Code testing","text":"GitHub Actions are set up to run the test script automatically on the GitHub cloud server every time a new commit to the master branch is pushed to the server. The setup for this to happen is configured in the file actions.yml in the Rimu/.github/workflows folder.","category":"page"},{"location":"exactdiagonalization.html#Exact-Diagonalization","page":"Exact Diagonalization","title":"Exact Diagonalization","text":"","category":"section"},{"location":"exactdiagonalization.html","page":"Exact Diagonalization","title":"Exact Diagonalization","text":"The main functionality of Rimu for exact diagonalization is contained in the module ExactDiagonalization.","category":"page"},{"location":"exactdiagonalization.html","page":"Exact Diagonalization","title":"Exact Diagonalization","text":"ExactDiagonalization","category":"page"},{"location":"exactdiagonalization.html#Rimu.ExactDiagonalization","page":"Exact Diagonalization","title":"Rimu.ExactDiagonalization","text":"The module Rimu.ExactDiagonalization provides a framework for exact diagonalization of quantum many-body systems defined by an AbstractHamiltonian type.\n\nThe main usage is through defining an ExactDiagonalizationProblem and solving it with the solve function. The module provides a unified interface for accessing different solver algorithms, which make use of solvers provided by external packages.\n\nExports\n\nExactDiagonalizationProblem\nBasisSetRepresentation\nbuild_basis\nKrylovKitSolver\nLinearAlgebraSolver\nArpackSolver\nLOBPCGSolver\n\n\n\n\n\n","category":"module"},{"location":"exactdiagonalization.html#ExactDiagonalizationProblem","page":"Exact Diagonalization","title":"ExactDiagonalizationProblem","text":"","category":"section"},{"location":"exactdiagonalization.html","page":"Exact Diagonalization","title":"Exact Diagonalization","text":"ExactDiagonalizationProblem\nsolve(::ExactDiagonalizationProblem)\ninit(::ExactDiagonalizationProblem)","category":"page"},{"location":"exactdiagonalization.html#Rimu.ExactDiagonalization.ExactDiagonalizationProblem","page":"Exact Diagonalization","title":"Rimu.ExactDiagonalization.ExactDiagonalizationProblem","text":"ExactDiagonalizationProblem(hamiltonian::AbstractHamiltonian, [v0]; kwargs...)\n\nDefines an exact diagonalization problem with an AbstractHamiltonian hamiltonian. Optionally, a starting vector of type AbstractDVec, or a single address or a collection of addresses can be passed as v0.\n\nExactDiagonalizationProblems can be solved with solve.\n\nKeyword arguments\n\nalgorithm=LinearAlgebraSolver(): The algorithm to use for solving the problem. The   algorithm can also be specified as the second positional argument in the init   function.\nOptional keyword arguments will be passed on to the init and solve functions.\n\nAlgorithms\n\nLinearAlgebraSolver(): An algorithm for solving the problem using the   dense-matrix eigensolver from the LinearAlgebra standard library (eventually using   LAPACK). Only suitable for small matrices.\nKrylovKitSolver(matrix_free=true): An algorithm for finding a few eigenvalues   and vectors. With matrix_free=true the problem is solved without instatiating a   matrix. This is suitable for large dimensions. With matrix_free=false the problem is   solved after instantiating a sparse matrix. This is faster if sufficient memory is   available. Requires using KrylovKit.\nArpackSolver(): An algorithm for solving the problem after instantiating a   sparse matrix and using the Arpack Fortran library. Requires using Arpack.\nLOBPCGSolver(): An algorithm for solving the problem after instantiating a   sparse matrix using the LOBPCG method. Requires using IterativeSolvers.\n\nKeyword arguments for matrix-based algorithms (also accepted by init)\n\nSee BasisSetRepresentation for more information.\n\nsizelim: The maximum size of the basis set representation. The default is 10^6 for   sparse matrices and 10^5 for dense matrices.\ncutoff: A cutoff value for the basis set representation.\nfilter: A filter function for the basis set representation.\nnnzs = 0: The number of non-zero elements in the basis set representation. Setting a   non-zero value can speed up the computation.\ncol_hint = 0: A hint for the number of columns in the basis set representation.\nsort = false: Whether to sort the basis set representation.\n\nKeyword arguments for iterative algorithms (also accepted by solve)\n\nverbose = false: Whether to print additional information.\nabstol = nothing: The absolute tolerance for the solver. If nothing, the solver   chooses a default value.\nhowmany = 1: The minimum number of eigenvalues to compute.\nwhich = :SR: Whether to compute the largest or smallest eigenvalues.\nmaxiters = nothing: The maximum number of iterations for the solver. If nothing, the   solver chooses a default value.\n\nSolving an ExactDiagonalizationProblem\n\nThe solve function can be called directly on an ExactDiagonalizationProblem to solve it. Alternatively, the init function can be used to initialize a solver, which can then be solved with solve. The solve function returns a result type with the eigenvalues, eigenvectors, and convergence information.\n\nResult type\n\nThe result type for the solve function is determined by the algorithm used. It has the following fields:\n\nvalues::Vector: The eigenvalues.\nvectors::Vector{<:AbstractDVec}: The eigenvectors.\nsuccess::Bool: A boolean flag indicating whether the solver was successful.\ninfo: Convergence information.\nalgorithm: The algorithm used for the computation.\nproblem: The ExactDiagonalizationProblem that was solved.\nAdditional fields may be present depending on the algorithm used.\n\nIterating the result type will yield the eigenvalues, eigenvectors, and a boolean flag success in that order.\n\nExamples\n\njulia> p = ExactDiagonalizationProblem(HubbardReal1D(BoseFS(1,1,1)))\nExactDiagonalizationProblem(\n  HubbardReal1D(fs\"|1 1 1⟩\"; u=1.0, t=1.0),\n  nothing;\n  NamedTuple()...\n)\n\njulia> result = solve(p) # convert to dense matrix and solve with LinearAlgebra.eigen\nEDResult for algorithm LinearAlgebraSolver() with 10 eigenvalue(s),\n  values = [-5.09593, -1.51882, -1.51882, 1.55611, 1.6093, 1.6093, 4.0, 4.53982, 4.90952, 4.90952],\n  and vectors of length 10.\n  Convergence info: \"Dense matrix eigensolver solution from `LinearAlgebra.eigen`\", with howmany = 10 eigenvalues requested.\n  success = true.\n\njulia> using KrylovKit # an external package has to be installed and loaded\n\njulia> s = init(p; algorithm = KrylovKitSolver(true)) # solve without building a matrix\nKrylovKitDirectEDSolver\n with algorithm KrylovKitSolver(matrix_free = true,) for hamiltonian = HubbardReal1D(fs\"|1 1 1⟩\"; u=1.0, t=1.0),\n  v0 = 1-element PDVec: style = IsDeterministic{Float64}()\n  fs\"|1 1 1⟩\" => 1.0,\n  kwargs = NamedTuple()\n)\n\njulia> values, vectors, success = solve(s);\n\njulia> result.values[1] ≈ values[1]\ntrue\n\nSee also solve(::ExactDiagonalizationProblem), init(::ExactDiagonalizationProblem), KrylovKitSolver, ArpackSolver, LinearAlgebraSolver.\n\nnote: Note\nUsing the KrylovKitSolver() algorithms requires the KrylovKit.jl package. The package can be loaded with using KrylovKit. Using the ArpackSolver() algorithm requires the Arpack.jl package. The package can be loaded with using Arpack. Using the LOBPCGSolver() algorithm requires the IterativeSolvers.jl package. The package can be loaded with using IterativeSolvers.\n\n\n\n\n\n","category":"type"},{"location":"exactdiagonalization.html#CommonSolve.solve-Tuple{ExactDiagonalizationProblem}","page":"Exact Diagonalization","title":"CommonSolve.solve","text":"solve(p::ExactDiagonalizationProblem, [algorithm]; kwargs...)\n\nSolve an ExactDiagonalizationProblem p directly. Optionally specify an algorithm. Returns a result type with the eigenvalues, eigenvectors, and convergence information.\n\nFor a description of the keyword arguments, see the documentation for ExactDiagonalizationProblem.\n\nSee also solve(::ProjectorMonteCarloProblem).\n\n\n\n\n\n","category":"method"},{"location":"exactdiagonalization.html#CommonSolve.init-Tuple{ExactDiagonalizationProblem}","page":"Exact Diagonalization","title":"CommonSolve.init","text":"init(p::ExactDiagonalizationProblem, [algorithm]; kwargs...)\n\nInitialize a solver for an ExactDiagonalizationProblem p with an optional algorithm. Returns a solver instance that can be solved with solve.\n\nFor a description of the keyword arguments, see the documentation for ExactDiagonalizationProblem.\n\n\n\n\n\n","category":"method"},{"location":"exactdiagonalization.html#Solver-algorithms","page":"Exact Diagonalization","title":"Solver algorithms","text":"","category":"section"},{"location":"exactdiagonalization.html","page":"Exact Diagonalization","title":"Exact Diagonalization","text":"KrylovKitSolver\nLinearAlgebraSolver\nArpackSolver\nLOBPCGSolver","category":"page"},{"location":"exactdiagonalization.html#Rimu.ExactDiagonalization.KrylovKitSolver","page":"Exact Diagonalization","title":"Rimu.ExactDiagonalization.KrylovKitSolver","text":"KrylovKitSolver(matrix_free::Bool; kwargs...)\nKrylovKitSolver(; matrix_free = false, kwargs...)\n\nAlgorithm for solving a large ExactDiagonalizationProblem to find a few eigenvalues and vectors using the KrylovKit.jl package. The Lanczos method is used for hermitian matrices, and the Arnoldi method is used for non-hermitian matrices.\n\nArguments\n\nmatrix_free = false: Whether to use a matrix-free algorithm. If false, a sparse matrix   will be instantiated. This is typically faster and recommended for small matrices,   but requires more memory. If true, the matrix is not instantiated, which is useful for   large matrices that would not fit into memory. The calculation will parallelise using   threading and MPI if available by making use of PDVec.\nkwargs: Additional keyword arguments are passed on to the function   KrylovKit.eigsolve().\n\nSee also ExactDiagonalizationProblem, solve.\n\nnote: Note\nRequires the KrylovKit.jl package to be loaded with using KrylovKit.\n\n\n\n\n\n","category":"type"},{"location":"exactdiagonalization.html#Rimu.ExactDiagonalization.LinearAlgebraSolver","page":"Exact Diagonalization","title":"Rimu.ExactDiagonalization.LinearAlgebraSolver","text":"LinearAlgebraSolver(; kwargs...)\n\nAlgorithm for solving an ExactDiagonalizationProblem using the dense-matrix eigensolver from the LinearAlgebra standard library. This is only suitable for small matrices.\n\nThe kwargs are passed on to function LinearAlgebra.eigen.\n\nKeyword arguments\n\npermute = true: Whether to permute the matrix before diagonalization.\nscale = true: Whether to scale the matrix before diagonalization.\nsortby: The sorting order for the eigenvalues.\n\nSee also ExactDiagonalizationProblem, solve.\n\n\n\n\n\n","category":"type"},{"location":"exactdiagonalization.html#Rimu.ExactDiagonalization.ArpackSolver","page":"Exact Diagonalization","title":"Rimu.ExactDiagonalization.ArpackSolver","text":"ArpackSolver(; kwargs...)\n\nAlgorithm for solving an ExactDiagonalizationProblem after instantiating a sparse matrix. It uses the Lanzcos method for hermitian problems, and the Arnoldi method for non-hermitian problems, using the Arpack Fortran library. This is faster than KrylovKitSolver(; matrix_free=true), but it requires more memory and will only be useful if the matrix fits into memory.\n\nThe kwargs are passed on to the function Arpack.eigs().\n\nSee also ExactDiagonalizationProblem, solve.\n\nnote: Note\nRequires the Arpack.jl package to be loaded with using Arpack.\n\n\n\n\n\n","category":"type"},{"location":"exactdiagonalization.html#Rimu.ExactDiagonalization.LOBPCGSolver","page":"Exact Diagonalization","title":"Rimu.ExactDiagonalization.LOBPCGSolver","text":"LOBPCGSolver(; kwargs...)\n\nThe Locally Optimal Block Preconditioned Conjugate Gradient Method (LOBPCG). Algorithm for solving an ExactDiagonalizationProblem after instantiating a sparse matrix.\n\nLOBPCG is not suitable for non-hermitian eigenvalue problems.\n\nThe kwargs are passed on to the function IterativeSolvers.lobpcg().\n\nSee also ExactDiagonalizationProblem, solve.\n\nnote: Note\nRequires the IterativeSolvers.jl package to be loaded with using IterativeSolvers.\n\n\n\n\n\n","category":"type"},{"location":"exactdiagonalization.html#Converting-a-Hamiltonian-in-to-a-matrix","page":"Exact Diagonalization","title":"Converting a Hamiltonian in to a matrix","text":"","category":"section"},{"location":"exactdiagonalization.html","page":"Exact Diagonalization","title":"Exact Diagonalization","text":"BasisSetRepresentation\nbuild_basis\nMatrix\nsparse","category":"page"},{"location":"exactdiagonalization.html#Rimu.ExactDiagonalization.BasisSetRepresentation","page":"Exact Diagonalization","title":"Rimu.ExactDiagonalization.BasisSetRepresentation","text":"BasisSetRepresentation(\n    hamiltonian::AbstractHamiltonian, addr=starting_address(hamiltonian);\n    sizelim=10^6, nnzs, cutoff, filter, sort=false, kwargs...\n)\nBasisSetRepresentation(hamiltonian::AbstractHamiltonian, addresses::AbstractVector; kwargs...)\n\nEagerly construct the basis set representation of the operator hamiltonian with all addresses reachable from addr. Instead of a single address, a vector of addresses can be passed.\n\nAn ArgumentError is thrown if dimension(hamiltonian) > sizelim in order to prevent memory overflow. Set sizelim = Inf in order to disable this behaviour.\n\nProviding the number nnzs of expected calculated matrix elements and col_hint for the estimated number of nonzero off-diagonal matrix elements in each matrix column may improve performance.\n\nProviding an energy cutoff will skip the columns and rows with diagonal elements greater than cutoff. Alternatively, an arbitrary filter function can be used instead. Addresses passed as arguments are not filtered. To generate the matrix truncated to the subspace spanned by the addresses, use filter = Returns(false).\n\nSetting sort to true will sort the matrix rows and columns. This is useful when the order of the columns matters, e.g. when comparing matrices. Any additional keyword arguments are passed on to Base.sortperm.\n\nFields\n\nsparse_matrix: sparse matrix representing hamiltonian in the basis basis\nbasis: vector of addresses\nhamiltonian: the Hamiltonian hamiltonian\n\nExample\n\njulia> hamiltonian = HubbardReal1D(BoseFS(1,0,0));\n\njulia> bsr = BasisSetRepresentation(hamiltonian)\nBasisSetRepresentation(HubbardReal1D(fs\"|1 0 0⟩\"; u=1.0, t=1.0)) with dimension 3 and 9 stored entries:3×3 SparseArrays.SparseMatrixCSC{Float64, Int64} with 9 stored entries:\n  0.0  -1.0  -1.0\n -1.0   0.0  -1.0\n -1.0  -1.0   0.0\n\njulia> BasisSetRepresentation(hamiltonian, bsr.basis[1:2]; filter = Returns(false)) # passing addresses and truncating\nBasisSetRepresentation(HubbardReal1D(fs\"|1 0 0⟩\"; u=1.0, t=1.0)) with dimension 2 and 4 stored entries:2×2 SparseArrays.SparseMatrixCSC{Float64, Int64} with 4 stored entries:\n  0.0  -1.0\n -1.0   0.0\n\njulia> using LinearAlgebra; round.(eigvals(Matrix(bsr)); digits = 4) # eigenvalues\n3-element Vector{Float64}:\n -2.0\n  1.0\n  1.0\n\njulia> ev = eigvecs(Matrix(bsr))[:,1]; ev = ev .* sign(ev[1]) # ground state eigenvector\n3-element Vector{Float64}:\n 0.5773502691896257\n 0.5773502691896255\n 0.5773502691896257\n\njulia> dv = DVec(zip(bsr.basis, ev)) # ground state as DVec\nDVec{BoseFS{1, 3, BitString{3, 1, UInt8}},Float64} with 3 entries, style = IsDeterministic{Float64}()\n  fs\"|0 0 1⟩\" => 0.57735\n  fs\"|0 1 0⟩\" => 0.57735\n  fs\"|1 0 0⟩\" => 0.57735\n\nHas methods for dimension, sparse, Matrix, starting_address.\n\nPart of the AbstractHamiltonian interface. See also build_basis.\n\n\n\n\n\n","category":"type"},{"location":"exactdiagonalization.html#Rimu.ExactDiagonalization.build_basis","page":"Exact Diagonalization","title":"Rimu.ExactDiagonalization.build_basis","text":"build_basis(\n    ham, address=starting_address(ham);\n    cutoff, filter, sizelim, sort=false, kwargs...\n) -> basis\nbuild_basis(ham, addresses::AbstractVector; kwargs...)\n\nGet all basis element of a linear operator ham that are reachable (via non-zero matrix elements) from the address address, returned as a vector. Instead of a single address, a vector of addresses can be passed. Does not return the matrix, for that purpose use BasisSetRepresentation.\n\nProviding an energy cutoff will skip addresses with diagonal elements greater than cutoff. Alternatively, an arbitrary filter function can be used instead. Addresses passed as arguments are not filtered. A maximum basis size sizelim can be set which will throw an error if the expected dimension of ham is larger than sizelim. This may be useful when memory may be a concern. These options are disabled by default.\n\nSetting sort to true will sort the basis. Any additional keyword arguments are passed on to Base.sort!.\n\n\n\n\n\n","category":"function"},{"location":"exactdiagonalization.html#Base.Matrix","page":"Exact Diagonalization","title":"Base.Matrix","text":"Matrix(\n    hamiltonian::AbstractHamiltonian, addr=starting_address(hamiltonian);\n    sizelim=10^4, kwargs...\n)\nMatrix(bsr::BasisSetRepresentation)\n\nReturn a dense matrix representation of hamiltonian or bsr. kwargs are passed to BasisSetRepresentation.\n\nSee BasisSetRepresentation.\n\n\n\n\n\n","category":"type"},{"location":"exactdiagonalization.html#SparseArrays.sparse","page":"Exact Diagonalization","title":"SparseArrays.sparse","text":"sparse(hamiltonian::AbstractHamiltonian, addr=starting_address(hamiltonian); kwargs...)\nsparse(bsr::BasisSetRepresentation)\n\nReturn a sparse matrix representation of hamiltonian or bsr. kwargs are passed to BasisSetRepresentation.\n\nSee BasisSetRepresentation.\n\n\n\n\n\n","category":"function"},{"location":"exactdiagonalization.html#Deprecated","page":"Exact Diagonalization","title":"Deprecated","text":"","category":"section"},{"location":"exactdiagonalization.html","page":"Exact Diagonalization","title":"Exact Diagonalization","text":"BasisSetRep","category":"page"},{"location":"exactdiagonalization.html#Rimu.ExactDiagonalization.BasisSetRep","page":"Exact Diagonalization","title":"Rimu.ExactDiagonalization.BasisSetRep","text":"BasisSetRep(args...; kwargs...)\n\nBasisSetRep is deprecated. Use BasisSetRepresentation instead.\n\n\n\n\n\n","category":"function"},{"location":"randomnumbers.html#Random-numbers-in-Rimu","page":"Random numbers","title":"Random numbers in Rimu","text":"","category":"section"},{"location":"randomnumbers.html","page":"Random numbers","title":"Random numbers","text":"Rimu uses Julia's built-in random number generator, which currently defaults to Xoshiro256++.","category":"page"},{"location":"randomnumbers.html#Reproducibility","page":"Random numbers","title":"Reproducibility","text":"","category":"section"},{"location":"randomnumbers.html","page":"Random numbers","title":"Random numbers","text":"If you want FCIQMC runs to be reproducible, make sure to seed the RNG with Random.seed!.","category":"page"},{"location":"randomnumbers.html","page":"Random numbers","title":"Random numbers","text":"MPI-distributed runs can also be made reproducible by seeding the RNG with Rimu.RMPI.mpi_seed!.","category":"page"},{"location":"documentation.html#Documentation-generation","page":"Documentation generation","title":"Documentation generation","text":"","category":"section"},{"location":"documentation.html","page":"Documentation generation","title":"Documentation generation","text":"We are using Documenter.jl to generate the documentation web site based on markdown files stored in docs/src. Please help keeping the documentation up-to-date by editing the markdown files! For instructions on how to write appropriate documentation please refer to the relevant chapter in the Julia documentation and the Documenter.jl documentation.","category":"page"},{"location":"documentation.html#Generating-the-documentation-web-site","page":"Documentation generation","title":"Generating the documentation web site","text":"","category":"section"},{"location":"documentation.html","page":"Documentation generation","title":"Documentation generation","text":"The documentation pages can be generated by running the build script by typing","category":"page"},{"location":"documentation.html","page":"Documentation generation","title":"Documentation generation","text":"Rimu$ julia --project=docs docs/make.jl","category":"page"},{"location":"documentation.html","page":"Documentation generation","title":"Documentation generation","text":"on the shell prompt from the Rimu/ folder. A complete image of the static documentation web site will be generated in the folder docs/build/. It can be viewed locally by pointing a web browser to file docs/build/index.html, or by deploying it to the GitHub pages web server.","category":"page"},{"location":"documentation.html#Automatic-documentation-generation-and-deployment","page":"Documentation generation","title":"Automatic documentation generation and deployment","text":"","category":"section"},{"location":"documentation.html","page":"Documentation generation","title":"Documentation generation","text":"Our documentation is hosted on GitHub pages. The documentation web site can be built and deployed automatically with GitHub Actions. This needs to be set up with an appropriate script in the file .github/workflows/docs.yml, where triggers for this to happen can be defined. In the current set up, a new documentation web site is generated and deployed whenever someone pushes to the develop branch on the GitHub server. The updated documentation can then be accessed here.","category":"page"},{"location":"documentation.html","page":"Documentation generation","title":"Documentation generation","text":"Previews for pull-requests can be accessed by replacing 101 in the following link with the PR number: https://joachimbrand.github.io/Rimu.jl/previews/PR101/","category":"page"},{"location":"documentation.html#Example-scripts","page":"Documentation generation","title":"Example scripts","text":"","category":"section"},{"location":"documentation.html","page":"Documentation generation","title":"Documentation generation","text":"Examples should be added to the scripts folder, in the form of .jl files suitable for  parsing by Literate. The process of generating  documentation is automated in the docs/make.jl file and assumes that the following line is  at (or near) the top of the script:","category":"page"},{"location":"documentation.html","page":"Documentation generation","title":"Documentation generation","text":"# # Example N: Title","category":"page"},{"location":"documentation.html","page":"Documentation generation","title":"Documentation generation","text":"where the number N and Title will be extracted automatically.","category":"page"},{"location":"documentation.html","page":"Documentation generation","title":"Documentation generation","text":"Tests for the results and output of specific scripts should be added at the end of each example. The code to run the test should be hidden from the final generated document by appending \"#hide\" to each line of testing code. For example, ","category":"page"},{"location":"documentation.html","page":"Documentation generation","title":"Documentation generation","text":"using Test                          #hide\n@test isfile(\"result.out\")          #hide\n@test result == expected_result     #hide","category":"page"},{"location":"addresses.html#Module-BitStringAddresses","page":"BitString addresses","title":"Module BitStringAddresses","text":"","category":"section"},{"location":"addresses.html","page":"BitString addresses","title":"BitString addresses","text":"This module contains the implementations of BitString and various Fock addresses. The addresses serve as a basis for a Hamiltonian.","category":"page"},{"location":"addresses.html","page":"BitString addresses","title":"BitString addresses","text":"While there are not restrictions on the type of address a Hamiltonian uses, Rimu provides implementations for Bosonic, Fermionic, and mixed Fock States.","category":"page"},{"location":"addresses.html","page":"BitString addresses","title":"BitString addresses","text":"When implementing a new address type, care must be taken to make them space-efficient and stack-allocated - avoid using (heap-allocated) arrays to represent your addresses at all costs!","category":"page"},{"location":"addresses.html#Fock-addresses","page":"BitString addresses","title":"Fock addresses","text":"","category":"section"},{"location":"addresses.html","page":"BitString addresses","title":"BitString addresses","text":"Rimu provides a variety of address implementations that should make it straightforward to implement efficient Hamiltonians. Examples are:","category":"page"},{"location":"addresses.html","page":"BitString addresses","title":"BitString addresses","text":"BoseFS Single-component bosonic Fock state with fixed particle and mode number.\nFermiFS Single-component fermionic Fock state with fixed particle and mode number.\nCompositeFS Multi-component Fock state composed of the above types.\nOccupationNumberFS Single-component bosonic Fock state with a fixed number of modes. The number of particles is not part of the type and can be changed by operators.","category":"page"},{"location":"addresses.html#Fock-address-API","page":"BitString addresses","title":"Fock address API","text":"","category":"section"},{"location":"addresses.html","page":"BitString addresses","title":"BitString addresses","text":"Modules = [BitStringAddresses]\nPages = [\"fockaddress.jl\",\"bosefs.jl\",\"fermifs.jl\",\"multicomponent.jl\",\"occupationnumberfs.jl\"]\nPrivate = false","category":"page"},{"location":"addresses.html#Rimu.BitStringAddresses.AbstractFockAddress","page":"BitString addresses","title":"Rimu.BitStringAddresses.AbstractFockAddress","text":"AbstractFockAddress{N,M}\n\nAbstract type representing a Fock state with N particles and M modes.\n\nSee also SingleComponentFockAddress, CompositeFS, BoseFS, FermiFS.\n\n\n\n\n\n","category":"type"},{"location":"addresses.html#Rimu.BitStringAddresses.BoseFSIndex","page":"BitString addresses","title":"Rimu.BitStringAddresses.BoseFSIndex","text":"BoseFSIndex\n\nStruct used for indexing and performing excitations on a BoseFS.\n\nFields:\n\noccnum: the occupation number.\nmode: the index of the mode.\noffset: the position of the mode in the address. This is the bit offset of the mode when\n\nthe address is represented by a bitstring, and the position in the list when it is  represented by SortedParticleList.\n\n\n\n\n\n","category":"type"},{"location":"addresses.html#Rimu.BitStringAddresses.FermiFSIndex","page":"BitString addresses","title":"Rimu.BitStringAddresses.FermiFSIndex","text":"FermiFSIndex\n\nStruct used for indexing and performing excitations on a FermiFS.\n\nFields:\n\noccnum: the occupation number.\nmode: the index of the mode.\noffset: the position of the mode in the address. This is mode - 1 when the address is represented by a bitstring, and the position in the list when using SortedParticleList.\n\n\n\n\n\n","category":"type"},{"location":"addresses.html#Rimu.BitStringAddresses.OccupiedModeMap","page":"BitString addresses","title":"Rimu.BitStringAddresses.OccupiedModeMap","text":"OccupiedModeMap(addr) <: AbstractVector\n\nGet a map of occupied modes in address as an AbstractVector of indices compatible with excitation - BoseFSIndex or FermiFSIndex.\n\nOccupiedModeMap(addr)[i] contains the index for the i-th occupied mode. This is useful because repeatedly looking for occupied modes with find_occupied_mode can be time-consuming. OccupiedModeMap(addr) is an eager version of the iterator returned by occupied_modes. It is similar to onr but contains more information.\n\nExample\n\njulia> b = BoseFS(10, 0, 0, 0, 2, 0, 1)\nBoseFS{13,7}(10, 0, 0, 0, 2, 0, 1)\n\njulia> mb = OccupiedModeMap(b)\n3-element OccupiedModeMap{7, BoseFSIndex}:\n BoseFSIndex(occnum=10, mode=1, offset=0)\n BoseFSIndex(occnum=2, mode=5, offset=14)\n BoseFSIndex(occnum=1, mode=7, offset=18)\n\njulia> f = FermiFS(1,1,1,1,0,0,1,0,0)\nFermiFS{5,9}(1, 1, 1, 1, 0, 0, 1, 0, 0)\n\njulia> mf = OccupiedModeMap(f)\n5-element OccupiedModeMap{5, FermiFSIndex}:\n FermiFSIndex(occnum=1, mode=1, offset=0)\n FermiFSIndex(occnum=1, mode=2, offset=1)\n FermiFSIndex(occnum=1, mode=3, offset=2)\n FermiFSIndex(occnum=1, mode=4, offset=3)\n FermiFSIndex(occnum=1, mode=7, offset=6)\n\njulia> mf == collect(occupied_modes(f))\ntrue\n\njulia> dot(mf, mb)\n11\n\njulia> dot(mf, 1:20)\n17\n\nSee also dot, SingleComponentFockAddress.\n\n\n\n\n\n","category":"type"},{"location":"addresses.html#Rimu.BitStringAddresses.OccupiedPairsMap","page":"BitString addresses","title":"Rimu.BitStringAddresses.OccupiedPairsMap","text":"OccupiedPairsMap(addr::SingleComponentFockAddress) <: AbstractVector\n\nGet a map of all distinct pairs of indices in addr. Pairs involving multiply-occupied modes are counted once, (including self-pairing). This is useful for cases where identifying pairs of particles for eg. interactions is not well-defined or efficient to do on the fly. This is an eager iterator whose elements are a tuple of particle indices that can be given to excitation\n\nExample\n\njulia> addr = BoseFS(10, 0, 0, 0, 2, 0, 1)\nBoseFS{13,7}(10, 0, 0, 0, 2, 0, 1)\n\njulia> pairs = OccupiedPairsMap(addr)\n5-element OccupiedPairsMap{78, Tuple{BoseFSIndex, BoseFSIndex}}:\n (BoseFSIndex(occnum=10, mode=1, offset=0), BoseFSIndex(occnum=10, mode=1, offset=0))\n (BoseFSIndex(occnum=2, mode=5, offset=14), BoseFSIndex(occnum=2, mode=5, offset=14))\n (BoseFSIndex(occnum=2, mode=5, offset=14), BoseFSIndex(occnum=10, mode=1, offset=0))\n (BoseFSIndex(occnum=1, mode=7, offset=18), BoseFSIndex(occnum=10, mode=1, offset=0))\n (BoseFSIndex(occnum=1, mode=7, offset=18), BoseFSIndex(occnum=2, mode=5, offset=14))\n\njulia> excitation(addr, pairs[2], pairs[4])\n(BoseFS{13,7}(9, 0, 0, 0, 4, 0, 0), 10.954451150103322)\n\nSee also OccupiedModeMap.\n\n\n\n\n\n","category":"type"},{"location":"addresses.html#Rimu.BitStringAddresses.SingleComponentFockAddress","page":"BitString addresses","title":"Rimu.BitStringAddresses.SingleComponentFockAddress","text":"SingleComponentFockAddress{N,M} <: AbstractFockAddress{N,M}\n\nA type representing a single component Fock state with N particles and M modes.\n\nImplemented subtypes: BoseFS, FermiFS.\n\nSupported functionality\n\nfind_mode\nfind_occupied_mode\nnum_occupied_modes\noccupied_modes: Lazy iterator.\nOccupiedModeMap: AbstractVector with eager construction.\nexcitation: Create a new address.\nBoseFSIndex and FermiFSIndex for indexing.\n\nSee also CompositeFS, AbstractFockAddress.\n\n\n\n\n\n","category":"type"},{"location":"addresses.html#Rimu.BitStringAddresses.excitation","page":"BitString addresses","title":"Rimu.BitStringAddresses.excitation","text":"excitation(addr::SingleComponentFockAddress, creations::NTuple, destructions::NTuple)\n\nGenerate an excitation on address addr by applying creations and destructions, which are tuples of the appropriate address indices (i.e. BoseFSIndex for bosons, or FermiFSIndex for fermions).\n\na^_c_1 a^_c_2 ldots a_d_1 a_d_2 ldots mathrmaddrrangle to\nαmathrmnaddrrangle\n\nReturns the new address naddr and the factor α. The value of α is given by the square root of the product of mode occupations before destruction and after creation. If the excitation is illegal, returns an arbitrary address and the value 0.0.\n\nExample\n\njulia> f = FermiFS(1,1,0,0,1,1,1,1)\nFermiFS{6,8}(1, 1, 0, 0, 1, 1, 1, 1)\n\njulia> i, j, k, l = find_mode(f, (3,4,2,5))\n(FermiFSIndex(occnum=0, mode=3, offset=2), FermiFSIndex(occnum=0, mode=4, offset=3), FermiFSIndex(occnum=1, mode=2, offset=1), FermiFSIndex(occnum=1, mode=5, offset=4))\n\njulia> excitation(f, (i,j), (k,l))\n(FermiFS{6,8}(1, 0, 1, 1, 0, 1, 1, 1), -1.0)\n\nSee SingleComponentFockAddress.\n\n\n\n\n\n","category":"function"},{"location":"addresses.html#Rimu.BitStringAddresses.find_mode","page":"BitString addresses","title":"Rimu.BitStringAddresses.find_mode","text":"find_mode(::SingleComponentFockAddress, i)\n\nFind the i-th mode in address. Returns BoseFSIndex for BoseFS, and FermiFSIndex for FermiFS. Can work on a tuple of modes. Does not check bounds.\n\njulia> find_mode(BoseFS(1, 0, 2), 2)\nBoseFSIndex(occnum=0, mode=2, offset=2)\n\njulia> find_mode(FermiFS(1, 1, 1, 0), (2,3))\n(FermiFSIndex(occnum=1, mode=2, offset=1), FermiFSIndex(occnum=1, mode=3, offset=2))\n\nSee SingleComponentFockAddress.\n\n\n\n\n\n","category":"function"},{"location":"addresses.html#Rimu.BitStringAddresses.find_occupied_mode","page":"BitString addresses","title":"Rimu.BitStringAddresses.find_occupied_mode","text":"find_occupied_mode(::SingleComponentFockAddress, k)\nfind_occupied_mode(::BoseFS, k, [n])\n\nFind the k-th occupied mode in address (with at least n particles). Returns BoseFSIndex for BoseFS, and FermiFSIndex for FermiFS. When unsuccessful it returns a zero index.\n\nExample\n\njulia> find_occupied_mode(FermiFS(1, 1, 1, 0), 2)\nFermiFSIndex(occnum=1, mode=2, offset=1)\n\njulia> find_occupied_mode(BoseFS(1, 0, 2), 1)\nBoseFSIndex(occnum=1, mode=1, offset=0)\n\njulia> find_occupied_mode(BoseFS(1, 0, 2), 1, 2)\nBoseFSIndex(occnum=2, mode=3, offset=3)\n\nSee also occupied_modes, OccupiedModeMap, SingleComponentFockAddress.\n\n\n\n\n\n","category":"function"},{"location":"addresses.html#Rimu.BitStringAddresses.num_components-Tuple{AbstractFockAddress}","page":"BitString addresses","title":"Rimu.BitStringAddresses.num_components","text":"num_components(::Type{<:AbstractFockAddress})\nnum_components(::AbstractFockAddress)\n\nNumber of components in address.\n\n\n\n\n\n","category":"method"},{"location":"addresses.html#Rimu.BitStringAddresses.num_modes-Tuple{AbstractFockAddress}","page":"BitString addresses","title":"Rimu.BitStringAddresses.num_modes","text":"num_modes(::Type{<:AbstractFockAddress})\nnum_modes(::AbstractFockAddress)\n\nNumber of modes represented by address.\n\n\n\n\n\n","category":"method"},{"location":"addresses.html#Rimu.BitStringAddresses.num_occupied_modes","page":"BitString addresses","title":"Rimu.BitStringAddresses.num_occupied_modes","text":"num_occupied_modes(::SingleComponentFockAddress)\n\nGet the number of occupied modes in address. Equivalent to length(occupied_modes(address)), or the number of non-zeros in its ONR representation.\n\nExample\n\njulia> num_occupied_modes(BoseFS((1, 0, 2)))\n2\njulia> num_occupied_modes(FermiFS((1, 1, 1, 0)))\n3\n\nSee SingleComponentFockAddress.\n\n\n\n\n\n","category":"function"},{"location":"addresses.html#Rimu.BitStringAddresses.num_particles-Tuple{AbstractFockAddress}","page":"BitString addresses","title":"Rimu.BitStringAddresses.num_particles","text":"num_particles(::Type{<:AbstractFockAddress})\nnum_particles(::AbstractFockAddress)\n\nNumber of particles represented by address.\n\n\n\n\n\n","category":"method"},{"location":"addresses.html#Rimu.BitStringAddresses.occupied_modes","page":"BitString addresses","title":"Rimu.BitStringAddresses.occupied_modes","text":"occupied_modes(::SingleComponentFockAddress)\n\nReturn a lazy iterator over all occupied modes in an address. Iterates over BoseFSIndexs for BoseFS, and over FermiFSIndexs for FermiFS. See OccupiedModeMap for an eager version.\n\nExample\n\njulia> b = BoseFS((1,5,0,4));\n\njulia> foreach(println, occupied_modes(b))\nBoseFSIndex(occnum=1, mode=1, offset=0)\nBoseFSIndex(occnum=5, mode=2, offset=2)\nBoseFSIndex(occnum=4, mode=4, offset=9)\n\njulia> f = FermiFS((1,1,0,1,0,0,1));\n\njulia> foreach(println, occupied_modes(f))\nFermiFSIndex(occnum=1, mode=1, offset=0)\nFermiFSIndex(occnum=1, mode=2, offset=1)\nFermiFSIndex(occnum=1, mode=4, offset=3)\nFermiFSIndex(occnum=1, mode=7, offset=6)\n\nSee also find_occupied_mode, SingleComponentFockAddress.\n\n\n\n\n\n","category":"function"},{"location":"addresses.html#Rimu.BitStringAddresses.onr","page":"BitString addresses","title":"Rimu.BitStringAddresses.onr","text":"occupation_number_representation(fs::SingleComponentFockAddress)\nonr(fs::SingleComponentFockAddress)\n\nCompute and return the occupation number representation of the Fock state fs as an SVector{M}, where M is the number of modes.\n\n\n\n\n\n","category":"function"},{"location":"addresses.html#Rimu.BitStringAddresses.@fs_str-Tuple{Any}","page":"BitString addresses","title":"Rimu.BitStringAddresses.@fs_str","text":"fs\"$(string)\"\n\nParse the compact representation of a Fock state. Useful for copying the printout from a vector to the REPL.\n\nExample\n\njulia> DVec(BoseFS{3,4}(0, 1, 2, 0) => 1)\nDVec{BoseFS{3, 4, BitString{6, 1, UInt8}},Int64} with 1 entry, style = IsStochasticInteger{Int64}()\n  fs\"|0 1 2 0⟩\" => 1\n\njulia> fs\"|0 1 2 0⟩\" => 1 # Copied from above printout\nBoseFS{3,4}(0, 1, 2, 0) => 1\n\njulia> fs\"|1 2 3⟩⊗|0 1 0⟩\" # composite bosonic Fock state\nCompositeFS(\n  BoseFS{6,3}(1, 2, 3),\n  BoseFS{1,3}(0, 1, 0),\n)\n\njulia> fs\"|↑↓↑⟩\" # construct a fermionic Fock state\nCompositeFS(\n  FermiFS{2,3}(1, 0, 1),\n  FermiFS{1,3}(0, 1, 0),\n)\n\njulia> s = fs\"|0 1 2 0⟩{}\" # constructing OccupationNumberFS with default UInt8 container\nOccupationNumberFS{4, UInt8}(0, 1, 2, 0)\n\njulia> [s] # prints out with the signifcant number of bits specified in braces\n1-element Vector{OccupationNumberFS{4, UInt8}}:\n fs\"|0 1 2 0⟩{8}\"\n\nSee also FermiFS, BoseFS, CompositeFS, FermiFS2C, OccupationNumberFS.\n\n\n\n\n\n","category":"macro"},{"location":"addresses.html#Rimu.BitStringAddresses.BoseFS","page":"BitString addresses","title":"Rimu.BitStringAddresses.BoseFS","text":"BoseFS{N,M,S} <: SingleComponentFockAddress\n\nAddress type that represents a Fock state of N spinless bosons in M modes by wrapping a BitString, or a SortedParticleList. Which is wrapped is chosen automatically based on the properties of the address.\n\nConstructors\n\nBoseFS{[N,M]}(val::Integer...): Create BoseFS{N,M} from occupation numbers. This is type-stable if the number of modes M and the number of particles N are provided. Otherwise, M and N are inferred from the arguments.\nBoseFS{[N,M]}(onr): Create BoseFS{N,M} from occupation number representation, see onr. This is efficient if N and M are provided, and onr is a statically-sized collection, such as a Tuple or SVector.\nBoseFS{[N,M]}([M, ]pairs...): Provide the number of modes M and mode => occupation_number pairs. If M is provided as a type parameter, it should not be provided as the first argument.  Useful for creating sparse addresses. pairs can be multiple arguments or an iterator of pairs.\nBoseFS{N,M,S}(bs::S): Unsafe constructor. Does not check whether the number of particles in bs is equal to N.\n@fs_str: Addresses are sometimes printed in a compact manner. This representation can also be used as a constructor. See the last example below.\n\nExamples\n\njulia> BoseFS{6,5}(0, 1, 2, 3, 0)\nBoseFS{6,5}(0, 1, 2, 3, 0)\n\njulia> BoseFS([abs(i - 3) ≤ 1 ? i - 1 : 0 for i in 1:5])\nBoseFS{6,5}(0, 1, 2, 3, 0)\n\njulia> BoseFS(5, 2 => 1, 3 => 2, 4 => 3)\nBoseFS{6,5}(0, 1, 2, 3, 0)\n\njulia> BoseFS{6,5}(i => i - 1 for i in 2:4)\nBoseFS{6,5}(0, 1, 2, 3, 0)\n\njulia> fs\"|0 1 2 3 0⟩\"\nBoseFS{6,5}(0, 1, 2, 3, 0)\n\njulia> fs\"|b 5: 2 3 3 4 4 4⟩\"\nBoseFS{6,5}(0, 1, 2, 3, 0)\n\nSee also: SingleComponentFockAddress, OccupationNumberFS, FermiFS, CompositeFS, FermiFS2C.\n\n\n\n\n\n","category":"type"},{"location":"addresses.html#Rimu.BitStringAddresses.bose_hubbard_interaction-Union{Tuple{BoseFS{<:Any, <:Any, A}}, Tuple{A}} where A<:BitString","page":"BitString addresses","title":"Rimu.BitStringAddresses.bose_hubbard_interaction","text":"bose_hubbard_interaction(address)\n\nReturn Σ_i n_i (n_i-1) for computing the Bose-Hubbard on-site interaction (without the U prefactor.)\n\nExample\n\njulia> Hamiltonians.bose_hubbard_interaction(BoseFS{4,4}((2,1,1,0)))\n2\njulia> Hamiltonians.bose_hubbard_interaction(BoseFS{4,4}((3,0,1,0)))\n6\n\n\n\n\n\n","category":"method"},{"location":"addresses.html#Rimu.BitStringAddresses.hopnextneighbour-Union{Tuple{A}, Tuple{M}, Tuple{N}, Tuple{BoseFS{N, M, A}, Any}} where {N, M, A<:BitString}","page":"BitString addresses","title":"Rimu.BitStringAddresses.hopnextneighbour","text":"new_address, value = hopnextneighbour(add, chosen, boundary_condition)\n\nCompute the new address of a hopping event for the Hubbard model. Returns the new address and the square root of product of occupation numbers of the involved modes multiplied by a term consistent with boundary condition as the value.  The following boundary conditions are supported:\n\n:periodic: hopping over the boundary gives does not change the value.\n:twisted: hopping over the boundary flips the sign of the value.\n:hard_wall: hopping over the boundary gives a value of zero.\nθ <: Number: hopping over the boundary gives a value multiplied by exp(iθ) or exp(iθ) depending on the direction of hopping.\n\nThe off-diagonals are indexed as follows:\n\n(chosen + 1) ÷ 2 selects the hopping site.\nEven chosen indicates a hop to the left.\nOdd chosen indicates a hop to the right.\n\nExample\n\njulia> using Rimu.Hamiltonians: hopnextneighbour\n\njulia> hopnextneighbour(BoseFS(1, 0, 1), 3)\n(BoseFS{2,3}(2, 0, 0), 1.4142135623730951)\n\njulia> hopnextneighbour(BoseFS(1, 0, 1), 4)\n(BoseFS{2,3}(1, 1, 0), 1.0)\n\njulia> hopnextneighbour(BoseFS(1, 0, 1), 3, :twisted)\n(BoseFS{2,3}(2, 0, 0), -1.4142135623730951)\n\njulia> hopnextneighbour(BoseFS(1, 0, 1), 3, :hard_wall)\n(BoseFS{2,3}(2, 0, 0), 0.0)\n\njulia> hopnextneighbour(BoseFS(1, 0, 1), 3, π/4)\n(BoseFS{2,3}(2, 0, 0), 1.0000000000000002 + 1.0im)\n\n\n\n\n\n","category":"method"},{"location":"addresses.html#Rimu.BitStringAddresses.near_uniform-Union{Tuple{Type{<:BoseFS{N, M}}}, Tuple{M}, Tuple{N}} where {N, M}","page":"BitString addresses","title":"Rimu.BitStringAddresses.near_uniform","text":"near_uniform(BoseFS{N,M}) -> BoseFS{N,M}\n\nCreate bosonic Fock state with near uniform occupation number of M modes with a total of N particles.\n\nExamples\n\njulia> near_uniform(BoseFS{7,5})\nBoseFS{7,5}(2, 2, 1, 1, 1)\n\njulia> near_uniform(FermiFS{3,5})\nFermiFS{3,5}(1, 1, 1, 0, 0)\n\n\n\n\n\n","category":"method"},{"location":"addresses.html#Rimu.BitStringAddresses.FermiFS","page":"BitString addresses","title":"Rimu.BitStringAddresses.FermiFS","text":"FermiFS{N,M,S} <: SingleComponentFockAddress\n\nAddress type that represents a Fock state of N fermions of the same spin in M modes by wrapping a BitString, or a SortedParticleList. Which is wrapped is chosen automatically based on the properties of the address.\n\nConstructors\n\nFermiFS{[N,M]}(val::Integer...): Create FermiFS{N,M} from occupation numbers. This is type-stable if the number of modes M and the number of particles N are provided. Otherwise, M and N are inferred from the arguments.\nFermiFS{[N,M]}(onr): Create FermiFS{N,M}  from occupation number representation, see onr. This is efficient if N and M are provided, and onr is a statically-sized collection, such as a Tuple{M} or SVector{M}.\nFermiFS{[N,M]}([M, ]pairs...): Provide the number of modes M and pairs of the form mode => 1. If M is provided as a type parameter, it should not be provided as the first argument.  Useful for creating sparse addresses. pairs can be multiple arguments or an iterator of pairs.\nFermiFS{N,M,S}(bs::S): Unsafe constructor. Does not check whether the number of particles in bs is equal to N, or whether each mode only contains one particle.\n@fs_str: Addresses are sometimes printed in a compact manner. This representation can also be used as a constructor. See the last example below.\n\nExamples\n\njulia> FermiFS{3,5}(0, 1, 1, 1, 0)\nFermiFS{3,5}(0, 1, 1, 1, 0)\n\njulia> FermiFS([abs(i - 3) ≤ 1 for i in 1:5])\nFermiFS{3,5}(0, 1, 1, 1, 0)\n\njulia> FermiFS(5, 2 => 1, 3 => 1, 4 => 1)\nFermiFS{3,5}(0, 1, 1, 1, 0)\n\njulia> FermiFS{3,5}(i => 1 for i in 2:4)\nFermiFS{3,5}(0, 1, 1, 1, 0)\n\njulia> fs\"|⋅↑↑↑⋅⟩\"\nFermiFS{3,5}(0, 1, 1, 1, 0)\n\njulia> fs\"|f 5: 2 3 4⟩\"\nFermiFS{3,5}(0, 1, 1, 1, 0)\n\nSee also: SingleComponentFockAddress, BoseFS, CompositeFS, FermiFS2C, BitString, OccupationNumberFS.\n\n\n\n\n\n","category":"type"},{"location":"addresses.html#Rimu.BitStringAddresses.BoseFS2C","page":"BitString addresses","title":"Rimu.BitStringAddresses.BoseFS2C","text":"BoseFS2C{NA,NB,M,AA,AB} <: AbstractFockAddress\nBoseFS2C(onr_a, onr_b)\n\nAddress type that constructed with two BoseFS{N,M,S}. It represents a Fock state with two components, e.g. two different species of bosons with particle number NA from species S and particle number NB from species B. The number of modes M is expected to be the same for both components.\n\n\n\n\n\n","category":"type"},{"location":"addresses.html#Rimu.BitStringAddresses.CompositeFS","page":"BitString addresses","title":"Rimu.BitStringAddresses.CompositeFS","text":"CompositeFS(addresses::SingleComponentFockAddress...) <: AbstractFockAddress\n\nUsed to encode addresses for multi-component models. All component addresses are expected have the same number of modes.\n\nSee also: BoseFS, FermiFS, SingleComponentFockAddress, num_modes, FermiFS2C, AbstractFockAddress.\n\n\n\n\n\n","category":"type"},{"location":"addresses.html#Rimu.BitStringAddresses.FermiFS2C","page":"BitString addresses","title":"Rimu.BitStringAddresses.FermiFS2C","text":"FermiFS2C <: AbstractFockAddress\nFermiFS2C(onr_a, onr_b)\n\nFock state address with two fermionic (spin) components. Alias for CompositeFS with two FermiFS components. Construct by specifying either two compatible FermiFSs, two onrs, or the number of modes followed by mode => occupation_number pairs, where occupation_number=1 will put a particle in the first component and occupation_number=-1 will put a particle in the second component. See examples below.\n\nExamples\n\njulia> FermiFS2C(FermiFS(1,0,0), FermiFS(0,1,1))\nCompositeFS(\n  FermiFS{1,3}(1, 0, 0),\n  FermiFS{2,3}(0, 1, 1),\n)\n\njulia> FermiFS2C((1,0,0), (0,1,1))\nCompositeFS(\n  FermiFS{1,3}(1, 0, 0),\n  FermiFS{2,3}(0, 1, 1),\n)\n\njulia> FermiFS2C(3, 1 => 1, 2 => -1, 3 => -1)\nCompositeFS(\n  FermiFS{1,3}(1, 0, 0),\n  FermiFS{2,3}(0, 1, 1),\n)\n\njulia> fs\"|↑↓↓⟩\"\nCompositeFS(\n  FermiFS{1,3}(1, 0, 0),\n  FermiFS{2,3}(0, 1, 1),\n)\n\n\n\n\n\n","category":"type"},{"location":"addresses.html#Rimu.BitStringAddresses.time_reverse-Union{Tuple{CompositeFS{2, N, M, T}}, Tuple{T}, Tuple{M}, Tuple{N}} where {N, M, T<:(Tuple{T, T} where T)}","page":"BitString addresses","title":"Rimu.BitStringAddresses.time_reverse","text":"time_reverse(addr)\n\nApply the time-reversal operation on a two-component Fock address that flips all the spins.\n\nRequires each component address to have the same type.\n\n\n\n\n\n","category":"method"},{"location":"addresses.html#Rimu.BitStringAddresses.OccupationNumberFS","page":"BitString addresses","title":"Rimu.BitStringAddresses.OccupationNumberFS","text":"OccupationNumberFS{M,T} <: SingleComponentFockAddress\n\nAddress type that stores the occupation numbers of a single component bosonic Fock state with M modes. The occupation numbers must fit into the type T <: Unsigned. The number of particles is runtime data, and can be retrieved with num_particles(address).\n\nConstructors\n\nOccupationNumberFS(val::Integer...): Construct from occupation numbers. Must be < 256 to fit into UInt8.\nOccupationNumberFS{[M,T]}(onr): Construct from collection onr with M occupation numbers with type T. If unspecified, the type T of the occupation numbers is inferred from the type of the arguments.\nOccupationNumberFS(fs::BoseFS): Construct from BoseFS.\nWith shortform macro @fs_str. Specify the number of significant bits in braces. See example below.\n\nExamples\n\njulia> ofs = OccupationNumberFS(1,2,3)\nOccupationNumberFS{3, UInt8}(1, 2, 3)\n\njulia> ofs == fs\"|1 2 3⟩{8}\"\ntrue\n\njulia> num_particles(ofs)\n6\n\n\n\n\n\n","category":"type"},{"location":"addresses.html#Rimu.BitStringAddresses.excitation-Union{Tuple{T}, Tuple{OccupationNumberFS{<:Any, T}, NTuple{var\"#s61\", Int64} where var\"#s61\", NTuple{var\"#s5\", Int64} where var\"#s5\"}} where T","page":"BitString addresses","title":"Rimu.BitStringAddresses.excitation","text":"excitation(addr::OccupationNumberFS, c::NTuple, d::NTuple)\n→ (nadd, α)\n\nGenerate an excitation on an OccupationNumberFS by applying the creation and destruction operators specified by the tuples of mode numbers c and d to the Fock state addr. The modes are indexed by integers (starting at 1), or by indices of type BoseFSIndex. The value of α is given by the square root of the product of mode occupations before destruction and after creation.\n\nThe number of particles may change by this type of excitation.\n\nExample\n\njulia> s = fs\"|1 2 3⟩{8}\"\nOccupationNumberFS{3, UInt8}(1, 2, 3)\n\njulia> num_particles(s)\n6\n\njulia> es, α = excitation(s, (1,1), (3,))\n(OccupationNumberFS{3, UInt8}(3, 2, 2), 4.242640687119285)\n\njulia> num_particles(es)\n7\n\n\n\n\n\n","category":"method"},{"location":"addresses.html#Internal-representations","page":"BitString addresses","title":"Internal representations","text":"","category":"section"},{"location":"addresses.html","page":"BitString addresses","title":"BitString addresses","text":"The atomic addresses, BoseFS and FermiFS, are implemented as either bitstrings or sorted lists of particles. Using these approaches over an occupation number representation makes the addresses much more space-efficient.","category":"page"},{"location":"addresses.html","page":"BitString addresses","title":"BitString addresses","text":"Therewhile OccupationNumberFS internally uses the occupation number representation,  which allows it to handle excitation operations that change the particle number. This is fast but requires more storage space.","category":"page"},{"location":"addresses.html#Internal-APIs","page":"BitString addresses","title":"Internal APIs","text":"","category":"section"},{"location":"addresses.html","page":"BitString addresses","title":"BitString addresses","text":"Modules = [BitStringAddresses]\nPages = [\"bitstring.jl\", \"sortedparticlelist.jl\"]\nPrivate = false","category":"page"},{"location":"addresses.html#Rimu.BitStringAddresses.BitString","page":"BitString addresses","title":"Rimu.BitStringAddresses.BitString","text":"BitString{B,N,T<:Unsigned}\n\nType for storing bitstrings of static size. Holds B bits in N chunks, where each chunk is of type T.\n\nN is chosen automatically to accommodate B bits as efficiently as possible.\n\nConstructors\n\nBitString{B,N,T}(::SVector{N,T}): unsafe constructor. Does not check for ghost bits.\nBitString{B,N,T}(i::T): as above, but sets i as the rightmost chunk.\nBitString{B}(::Integer): Convert integer to BitString. Integer is truncated to the correct number of bits.\n\n\n\n\n\n","category":"type"},{"location":"addresses.html#Rimu.BitStringAddresses.SortedParticleList","page":"BitString addresses","title":"Rimu.BitStringAddresses.SortedParticleList","text":"SortedParticleList{N,M,T<:Unsigned}\n\nType for storing sparse fock states. Stores the mode number of each particle as an entry with only its mode stored. The entries are always kept sorted.\n\nIterating over SortedParticleLists yields occupied modes as a tuple of occupation number, mode number, and position in list.\n\nConstructors\n\nSortedParticleList{N,M,T}(::SVector{N,T}): unsafe constructor. Does not sort input.\nSortedParticleList(arr::AbstractVector): convert ONR to SortedParticleList\n\n\n\n\n\n","category":"type"},{"location":"addresses.html#Index","page":"BitString addresses","title":"Index","text":"","category":"section"},{"location":"addresses.html","page":"BitString addresses","title":"BitString addresses","text":"Pages   = [\"addresses.md\"]","category":"page"},{"location":"API.html#API","page":"API","title":"API","text":"","category":"section"},{"location":"API.html#Rimu","page":"API","title":"Rimu","text":"","category":"section"},{"location":"API.html","page":"API","title":"API","text":"Modules = [Rimu]","category":"page"},{"location":"API.html#Rimu.Rimu","page":"API","title":"Rimu.Rimu","text":"Rimu\n\nRandom integrators for many-body quantum systems\n\nWelcome to Rimu version 0.13.1-dev. Read the documentation online.\n\n\n\n\n\n","category":"module"},{"location":"API.html#Rimu.PACKAGE_VERSION","page":"API","title":"Rimu.PACKAGE_VERSION","text":"Rimu.PACKAGE_VERSION\n\nConstant that contains the current VersionNumber of Rimu.\n\n\n\n\n\n","category":"constant"},{"location":"API.html#DataFrames.DataFrame-Tuple{Rimu.Report}","page":"API","title":"DataFrames.DataFrame","text":"DataFrame(report::Report)\n\nConvert the Report to a DataFrame. Metadata is added as metadata to the DataFrame.\n\n\n\n\n\n","category":"method"},{"location":"API.html#Rimu.AllOverlaps","page":"API","title":"Rimu.AllOverlaps","text":"AllOverlaps(n_replicas=2; operator=nothing, transform=nothing, vecnorm=true)\n    <: ReplicaStrategy{n_replicas}\n\nRun n_replicas replicas and report overlaps between all pairs of replica vectors. If operator is not nothing, the overlap dot(c1, operator, c2) is reported as well. If operator is a tuple of operators, the overlaps are computed for all operators.\n\nColumn names in the report are of the form c{i}_dot_c{j} for vector-vector overlaps, and c{i}_Op{k}_c{j} for operator overlaps.\n\nSee ProjectorMonteCarloProblem, ReplicaStrategy and AbstractOperator (for an interface for implementing operators).\n\nTransformed Hamiltonians\n\nIf a transformed Hamiltonian G has been passed to ProjectorMonteCarloProblem then overlaps can be calculated by passing the same transformed Hamiltonian to AllOverlaps by setting transform=G. A warning is given if these two Hamiltonians do not match.\n\nImplemented transformations are:\n\nGutzwillerSampling\nGuidingVectorSampling\n\nIn the case of a transformed Hamiltonian the overlaps are defined as follows. For a similarity transformation G of the Hamiltonian (see e.g. GutzwillerSampling.)\n\n    hatG = f hatH f^-1\n\nThe expectation value of an operator hatA is\n\n    langle hatA rangle = langle psi  hatA  psi rangle\n        = fraclangle phi  f^-1 hatA f^-1  phi ranglelangle phi  f^-2  phi rangle\n\nwhere\n\n     phi rangle = f  psi rangle\n\nis the (right) eigenvector of hatG and  psi rangle is an eigenvector of hatH.\n\nFor a K-tuple of input operators (hatA_1  hatA_K), overlaps of langle phi  f^-1 hatA f^-1  phi rangle are reported as c{i}_Op{k}_c{j}. The correct vector-vector overlap langle phi  f^-2  phi rangle is reported last as c{i}_Op{K+1}_c{j}. This is in addition to the bare vector-vector overlap langle phi  f^-2  phi rangle that is reported as c{i}_dot_c{j}.\n\nIn either case the c{i}_dot_c{j} overlap can be omitted with the flag vecnorm=false.\n\n\n\n\n\n","category":"type"},{"location":"API.html#Rimu.ConstantTimeStep","page":"API","title":"Rimu.ConstantTimeStep","text":"ConstantTimeStep <: TimeStepStrategy\n\nKeep time_step constant.\n\n\n\n\n\n","category":"type"},{"location":"API.html#Rimu.DefaultShiftParameters","page":"API","title":"Rimu.DefaultShiftParameters","text":"DefaultShiftParameters\n\nDefault mutable struct for storing the shift parameters.\n\nSee ShiftStrategy, initialise_shift_parameters.\n\n\n\n\n\n","category":"type"},{"location":"API.html#Rimu.DontUpdate","page":"API","title":"Rimu.DontUpdate","text":"DontUpdate(; target_walkers = 1_000) <: ShiftStrategy\n\nDon't update the shift.  Return when target_walkers is reached.\n\nSee ShiftStrategy, ProjectorMonteCarloProblem.\n\n\n\n\n\n","category":"type"},{"location":"API.html#Rimu.DoubleLogProjected","page":"API","title":"Rimu.DoubleLogProjected","text":"DoubleLogProjected(; target, projector, ζ = 0.08, ξ = ζ^2/4) <: ShiftStrategy\n\nStrategy for updating the shift according to the log formula with damping parameter ζ and ξ after projecting onto projector.\n\nS^n+1 = S^n -fracζdτlnleft(fracPΨ^(n+1)PΨ^(n)right)-fracξdτlnleft(fracPΨ^(n+1)texttargetright)\n\nNote that adjusting the keyword maxlength in ProjectorMonteCarloProblem is advised as the default may not be appropriate.\n\nSee ShiftStrategy, ProjectorMonteCarloProblem.\n\n\n\n\n\n","category":"type"},{"location":"API.html#Rimu.DoubleLogSumUpdate","page":"API","title":"Rimu.DoubleLogSumUpdate","text":"DoubleLogSumUpdate(; target_walkers = 1000, ζ = 0.08, ξ = ζ^2/4, α = 1/2) <: ShiftStrategy\n\nStrategy for updating the shift according to the log formula with damping parameters ζ and ξ.\n\nS^n+1 = S^n -fracζdτlnleft(fracN_mathrmw^n+1N_mathrmw^nright)\n- fracξdτlnleft(fracN_mathrmw^n+1N_mathrmw^texttargetright)\n\nwhere N_mathrmw = (1-α)*walkernumber() + α*UniformProjector()⋅ψ computed with walkernumber() and UniformProjector(). When ξ = ζ^2/4 this corresponds to critical damping with a damping time scale T = 2/ζ.\n\nSee ShiftStrategy, ProjectorMonteCarloProblem.\n\n\n\n\n\n","category":"type"},{"location":"API.html#Rimu.DoubleLogUpdate","page":"API","title":"Rimu.DoubleLogUpdate","text":"DoubleLogUpdate(; target_walkers = 1_000, ζ = 0.08, ξ = ζ^2/4) <: ShiftStrategy\n\nStrategy for updating the shift according to the log formula with damping parameter ζ and ξ.\n\nS^n+1 = S^n -fracζdτlnleft(fracΨ_1^n+1Ψ_1^nright)-fracξdτlnleft(fracΨ_1^n+1Ψ_1^texttargetright)\n\nWhen ξ = ζ^2/4 this corresponds to critical damping with a damping time scale T = 2/ζ.\n\nSee ShiftStrategy, ProjectorMonteCarloProblem.\n\n\n\n\n\n","category":"type"},{"location":"API.html#Rimu.DoubleLogUpdateAfterTargetWalkers","page":"API","title":"Rimu.DoubleLogUpdateAfterTargetWalkers","text":"DoubleLogUpdateAfterTargetWalkers(target_walkers = 1_000, ζ = 0.08, ξ = ζ^2/4) <: ShiftStrategy\n\nStrategy for updating the shift: After target_walkers is reached, update the shift according to the log formula with damping parameter ζ and ξ.\n\nSee DoubleLogUpdate, ShiftStrategy, ProjectorMonteCarloProblem.\n\n\n\n\n\n","category":"type"},{"location":"API.html#Rimu.FCIQMC","page":"API","title":"Rimu.FCIQMC","text":"FCIQMC(; kwargs...) <: PMCAlgorithm\n\nAlgorithm for the full configuration interaction quantum Monte Carlo (FCIQMC) method. The default algorithm for ProjectorMonteCarloProblem.\n\nKeyword arguments and defaults:\n\nshift_strategy = DoubleLogUpdate(; targetwalkers = 1_000, ζ = 0.08,   ξ = ζ^2/4): How to update the shift.\ntime_step_strategy = ConstantTimeStep(): Adjust time step or not.\n\nSee also ProjectorMonteCarloProblem, ShiftStrategy, TimeStepStrategy, DoubleLogUpdate, ConstantTimeStep.\n\n\n\n\n\n","category":"type"},{"location":"API.html#Rimu.FciqmcRunStrategy","page":"API","title":"Rimu.FciqmcRunStrategy","text":" FciqmcRunStrategy{T}\n\nAbstract type representing the strategy for running and terminating lomc!(). The type parameter T is relevant for reporting the shift and the norm.\n\nImplemented strategies:\n\nRunTillLastStep\n\nwarning: Warning\nThe use of this strategy is deprecated. Pass the relevant arguments directly to ProjectorMonteCarloProblem or to lomc!() instead.\n\n\n\n\n\n","category":"type"},{"location":"API.html#Rimu.FirstOrderTransitionOperator","page":"API","title":"Rimu.FirstOrderTransitionOperator","text":"FirstOrderTransitionOperator(hamiltonian, shift, time_step) <: AbstractHamiltonian\nFirstOrderTransitionOperator(sp::DefaultShiftParameters, hamiltonian)\n\nFirst order transition operator\n\n𝐓 = 1 + dτ(S - 𝐇)\n\nwhere 𝐇 is the hamiltonian, dτ the time_step and S is the shift.\n\n𝐓 represents the first order expansion of the exponential evolution operator of the imaginary-time Schrödinger equation (Euler step) and repeated application will project out the ground state eigenvector of the hamiltonian.  It is the transition operator used in FCIQMC.\n\n\n\n\n\n","category":"type"},{"location":"API.html#Rimu.GramSchmidt","page":"API","title":"Rimu.GramSchmidt","text":"GramSchmidt{S} <: SpectralStrategy{S}\n\nUse the Gram-Schmidt procedure to orthogonalize the excited states. A total of S spectral states are used in the simulation.\n\n\n\n\n\n","category":"type"},{"location":"API.html#Rimu.LogUpdate","page":"API","title":"Rimu.LogUpdate","text":"LogUpdate(ζ = 0.08) <: ShiftStrategy\n\nStrategy for updating the shift according to the log formula with damping parameter ζ.\n\nS^n+1 = S^n -fracζdτlnleft(fracΨ_1^n+1Ψ_1^nright)\n\nSee ShiftStrategy, ProjectorMonteCarloProblem.\n\n\n\n\n\n","category":"type"},{"location":"API.html#Rimu.LogUpdateAfterTargetWalkers","page":"API","title":"Rimu.LogUpdateAfterTargetWalkers","text":"LogUpdateAfterTargetWalkers(target_walkers = 1_000, ζ = 0.08) <: ShiftStrategy\n\nStrategy for updating the shift: After target_walkers is reached, update the shift according to the log formula with damping parameter ζ.\n\nSee LogUpdate, ShiftStrategy, ProjectorMonteCarloProblem.\n\n\n\n\n\n","category":"type"},{"location":"API.html#Rimu.MultiScalar","page":"API","title":"Rimu.MultiScalar","text":"MultiScalar\n\nWrapper over a tuple that supports +, *, min, and max. Used with MPI communication because SVectors are treated as arrays by MPI.Allreduce and Tuples do not support scalar operations.\n\nExample\n\nSuppose you want to compute the sum of a vector dv and also get the number of positive elements it has in a single pass. You can use MultiScalar:\n\njulia> dv = DVec(:a => 1, :b => -2, :c => 1);\n\njulia> s, p = mapreduce(+, values(dv)) do v\n    Rimu.MultiScalar(v, Int(sign(v) == 1))\nend;\n\njulia> s, p\n(0, 2)\n\nThis will work with MPIData.\n\nNote that only MultiScalars with the same types can be operated on. This is a feature, as it forces type stability.\n\n\n\n\n\n","category":"type"},{"location":"API.html#Rimu.NoStats","page":"API","title":"Rimu.NoStats","text":"NoStats(N=1) <: ReplicaStrategy{N}\n\nThe default ReplicaStrategy. N replicas are run, but no statistics are collected.\n\nSee also ProjectorMonteCarloProblem.\n\n\n\n\n\n","category":"type"},{"location":"API.html#Rimu.PMCAlgorithm","page":"API","title":"Rimu.PMCAlgorithm","text":"PMCAlgorithm\n\nAbstract type for projector Monte Carlo algorithms.\n\nSee ProjectorMonteCarloProblem, FCIQMC.\n\n\n\n\n\n","category":"type"},{"location":"API.html#Rimu.PMCSimulation","page":"API","title":"Rimu.PMCSimulation","text":"PMCSimulation\n\nHolds the state and the results of a projector quantum Monte Carlo (PMC) simulation. Is returned by init(::ProjectorMonteCarloProblem) and solved with solve!(::PMCSimulation).\n\nObtain the results of a simulation sm as a DataFrame with DataFrame(sm).\n\nSee also state_vectors, ProjectorMonteCarloProblem, init, solve!.\n\n\n\n\n\n","category":"type"},{"location":"API.html#Rimu.PostStepStrategy","page":"API","title":"Rimu.PostStepStrategy","text":"PostStepStrategy\n\nSubtypes of PostStepStrategy can be used to perform arbitrary computation on a single state after an FCIQMC step is finished and report the results.\n\nImplemented strategies:\n\nProjectedEnergy\nProjector\nSignCoherence\nWalkerLoneliness\nTimer\n\nNote: A tuple of multiple strategies can be passed to ProjectorMonteCarloProblem. In that case, all reported column names must be distinct.\n\nInterface:\n\nA subtype of this type must implement post_step_action(::PostStepStrategy, ::SingleState, step::Int).\n\n\n\n\n\n","category":"type"},{"location":"API.html#Rimu.ProjectedEnergy","page":"API","title":"Rimu.ProjectedEnergy","text":"ProjectedEnergy(hamiltonian, projector; hproj=:hproj, vproj=:vproj) <: PostStepStrategy\n\nAfter every step, compute hproj = dot(projector, hamiltonian, dv) and vproj = dot(projector, dv), where dv is the instantaneous coefficient vector.  projector can be an AbstractDVec, or an AbstractProjector.\n\nReports to columns hproj and vproj, which can be used to compute projective energy, e.g. with projected_energy. The keyword arguments hproj and vproj can be used to change the names of these columns. This can be used to make the names unique when computing projected energies with different projectors in the same run.\n\nSee also projected_energy, ratio_of_means, mixed_estimator, and PostStepStrategy.\n\n\n\n\n\n","category":"type"},{"location":"API.html#Rimu.Projector","page":"API","title":"Rimu.Projector","text":"Projector(name=projector) <: PostStepStrategy\n\nAfter each step, compute dot(projector, dv) and report it in the DataFrame under name. projector can be an AbstractDVec, or an AbstractProjector.\n\n\n\n\n\n","category":"type"},{"location":"API.html#Rimu.ProjectorMonteCarloProblem","page":"API","title":"Rimu.ProjectorMonteCarloProblem","text":"ProjectorMonteCarloProblem(hamiltonian::AbstractHamiltonian; kwargs...)\n\nDefines a problem to be solved by projector quantum Monte Carlo (QMC) methods, such as the the FCIQMC algorithm.\n\nCommon keyword arguments and defaults:\n\ntime_step = 0.01: Initial time step size.\nlast_step = 100: Controls the number of steps.\ntarget_walkers = 1_000: Target for the 1-norm of the coefficient vector.\nstart_at = starting_address(hamiltonian): Define the initial state vector(s).   An r  s matrix of state vectors can be passed where r is the   number of replicas and s the number of spectral states. See also   default_starting_vector.\nstyle = IsDynamicSemistochastic(): The StochasticStyle of the simulation.\ninitiator = false: Whether to use initiators. Can be true, false, or a valid   InitiatorRule.\nthreading: Default is to use multithreading and/or MPI if available. Set to true to force PDVec for the starting vector, false for serial computation; may be overridden by start_at.\nreporting_strategy = ReportDFAndInfo(): How and when to report results, see ReportingStrategy.\npost_step_strategy = (): Extract observables (e.g. ProjectedEnergy), see PostStepStrategy.\nn_replicas = 1: Number of synchronised independent simulations.\nreplica_strategy = NoStats(n_replicas): Which results to report from replica simulations, see ReplicaStrategy.\n\nExample\n\njulia> hamiltonian = HubbardReal1D(BoseFS(1,2,3));\n\njulia> problem = ProjectorMonteCarloProblem(hamiltonian; target_walkers = 500, last_step = 100);\n\njulia> simulation = solve(problem);\n\njulia> simulation.success[]\ntrue\n\njulia> size(DataFrame(simulation))\n(100, 9)\n\nFurther keyword arguments:\n\nstarting_step = 1: Starting step of the simulation.\nwalltime = Inf: Maximum time allowed for the simulation.\nsimulation_plan = SimulationPlan(; starting_step, last_step, walltime): Defines the   duration of the simulation. Takes precedence over last_step and walltime.\nζ = 0.08: Damping parameter for the shift update.\nξ = ζ^2/4: Forcing parameter for the shift update.\nshift_strategy = DoubleLogUpdate(; target_walkers, ζ, ξ): How to update the shift,   see ShiftStrategy.\ntime_step_strategy = ConstantTimeStep(): Adjust time step or not, see   TimeStepStrategy.\nalgorithm = FCIQMC(; shift_strategy, time_step_strategy): The algorithm to use.   Currenlty only FCIQMC is implemented.\nshift: Initial shift value or collection of shift values. Determined by default from the   Hamiltonian and the starting vectors.\ninitial_shift_parameters: Initial shift parameters or collection of initial shift   parameters. Overrides shift if provided.\nmaxlength = 2 * target_walkers + 100: Maximum length of the vectors.\ndisplay_name = \"PMCSimulation\": Name displayed in progress bar (via ProgressLogging).\nmetadata: User-supplied metadata to be added to the report. Must be an iterable of pairs or a NamedTuple, e.g. metadata = (\"key1\" => \"value1\", \"key2\" => \"value2\"). All metadata is converted to strings.\nrandom_seed = true: Provide and store a seed for the random number generator. If set to   true, a random seed is generated. If set to number, this number is used as the seed.   The seed is used by solve such that solveing the problem twice will yield identical   results. If set to false, no seed is used and results are not reproducible.\n\nSee also init, solve.\n\n\n\n\n\n","category":"type"},{"location":"API.html#Rimu.ReplicaState","page":"API","title":"Rimu.ReplicaState","text":"ReplicaState <: AbstractMatrix{SingleState}\n\nHolds information about multiple replicas of SpectralStates.\n\nIndexing the ReplicaState state[i, j] returns a SingleState from the ith replica and jth spectral state.\n\nSee also ReplicaStrategy, SpectralState, SingleState, PMCSimulation.\n\n\n\n\n\n","category":"type"},{"location":"API.html#Rimu.ReplicaStrategy","page":"API","title":"Rimu.ReplicaStrategy","text":"ReplicaStrategy{N}\n\nSupertype for strategies that can be passed to ProjectorMonteCarloProblem and control how many replicas are used, and what information is computed and returned. The number of replicas is N.\n\nConcrete implementations\n\nNoStats: run (possibly one) replica(s), but don't report any additional info.\nAllOverlaps: report overlaps between all pairs of replica vectors.\n\nInterface\n\nA subtype of ReplicaStrategy{N} must implement the following function:\n\nRimu.replica_stats - return a tuple of Strings or Symbols of names for replica statistics and a tuple of the values. These will be reported to the DataFrame returned by ProjectorMonteCarloProblem.\n\n\n\n\n\n","category":"type"},{"location":"API.html#Rimu.Report","page":"API","title":"Rimu.Report","text":"Report()\nReport(df::DataFrame)\n\nInternal structure that holds the temporary reported values as well as metadata. It can be converted to a DataFrame with DataFrame(report::Report).\n\nSee report!, report_metadata!, get_metadata.\n\n\n\n\n\n","category":"type"},{"location":"API.html#Rimu.ReportDFAndInfo","page":"API","title":"Rimu.ReportDFAndInfo","text":"ReportDFAndInfo(; reporting_interval=1, info_interval=100, io=stdout, writeinfo=false) <: ReportingStrategy\n\nThe default ReportingStrategy. Report every reporting_intervalth step to a DataFrame and write info message to io every info_intervalth reported step (unless writeinfo == false). The flag writeinfo is useful for controlling info messages in MPI codes, e.g. by setting writeinfo =is_mpi_root().\n\n\n\n\n\n","category":"type"},{"location":"API.html#Rimu.ReportToFile","page":"API","title":"Rimu.ReportToFile","text":"ReportToFile(; kwargs...) <: ReportingStrategy\n\nReportingStrategy that writes the report directly to a file in the Arrow format. Useful when dealing with long jobs or large numbers of replicas, when the report can incur a significant memory cost.\n\nThe arrow file can be read back in with load_df(filename) or using Arrow; Arrow.Table(filename).\n\nKeyword arguments\n\nfilename = \"out.arrow\": the file to report to. If the file already exists, a new file is created.\nreporting_interval = 1: interval between simulation steps that are reported.\nchunk_size = 1000: the size of each chunk that is written to the file. A DataFrame of this size is collected in memory and written to disk. When saving, an info message is also printed to io.\nsave_if =is_mpi_root(): if this value is true, save the report, otherwise ignore it.\nreturn_df = false: if this value is true, read the file and return the data frame at the end of computation. Otherwise, an empty DataFrame is returned.\nio = stdout: The IO to print messages to. Set to devnull if you don't want to see messages printed out.\ncompress = :zstd: compression algorithm to use. Can be :zstd, :lz4 or nothing.\n\nSee also load_df and save_df.\n\n\n\n\n\n","category":"type"},{"location":"API.html#Rimu.ReportingStrategy","page":"API","title":"Rimu.ReportingStrategy","text":"ReportingStrategy\n\nAbstract type for strategies for reporting data in a DataFrame with report!().\n\nImplemented strategies:\n\nReportDFAndInfo\nReportToFile\n\nInterface:\n\nA ReportingStrategy can define any of the following:\n\nrefine_reporting_strategy\nreport!\nreport_after_step!\nfinalize_report!\nreporting_interval\n\n\n\n\n\n","category":"type"},{"location":"API.html#Rimu.RunTillLastStep","page":"API","title":"Rimu.RunTillLastStep","text":"RunTillLastStep(step::Int = 0 # number of current/starting timestep\n             laststep::Int = 100 # number of final timestep\n             shiftMode::Bool = false # whether to adjust shift\n             shift = 0.0 # starting/current value of shift\n             dτ::Float64 = 0.01 # current value of time step\n) <: FciqmcRunStrategy\n\nParameters for running lomc!() for a fixed number of time steps. For alternative strategies, see FciqmcRunStrategy.\n\nwarning: Warning\nThe use of this strategy is deprecated. Pass the relevant arguments directly to ProjectorMonteCarloProblem or to lomc!() instead.\n\n\n\n\n\n","category":"type"},{"location":"API.html#Rimu.ShiftStrategy","page":"API","title":"Rimu.ShiftStrategy","text":"ShiftStrategy\n\nAbstract type for defining the strategy for controlling the norm, potentially by updating the shift. Passed as a parameter to ProjectorMonteCarloProblem or to FCIQMC.\n\nImplemented strategies:\n\nDontUpdate\nDoubleLogUpdate - default in ProjectorMonteCarloProblem()\nLogUpdate\nLogUpdateAfterTargetWalkers - FCIQMC standard\nDoubleLogUpdateAfterTargetWalkers\n\nExtended help\n\nInternally To implement a custom strategy, define a new subtype of Rimu.ShiftStrategy and implement methods for:\n\nRimu.update_shift_parameters! - to update the shift_parameters\nRimu.initialise_shift_parameters - (optional) to initialise and construct a   custom implementation of the shift_parameters. The default implementation is   Rimu.DefaultShiftParameters.\n\n\n\n\n\n","category":"type"},{"location":"API.html#Rimu.SignCoherence","page":"API","title":"Rimu.SignCoherence","text":"SignCoherence(reference[; name=:coherence]) <: PostStepStrategy\n\nAfter each step, compute the proportion of configurations that have the same sign as they do in the reference_dvec. Reports to a column named name, which defaults to coherence.\n\n\n\n\n\n","category":"type"},{"location":"API.html#Rimu.SimulationPlan","page":"API","title":"Rimu.SimulationPlan","text":"SimulationPlan(; starting_step = 1, last_step = 100, walltime = Inf)\n\nDefines the duration of the simulation. The simulation ends when the last_step is reached or the walltime is exceeded.\n\nSee ProjectorMonteCarloProblem, PMCSimulation.\n\n\n\n\n\n","category":"type"},{"location":"API.html#Rimu.SingleParticleDensity","page":"API","title":"Rimu.SingleParticleDensity","text":"SingleParticleDensity(; save_every=1, component) <: PostStepStrategy\n\nPostStepStrategy  to  compute the diagonal single_particle_density. It records a Tuple with the same eltype as the vector.\n\nComputing the density at every time step can be expensive. This cost can be reduced by setting the save_every argument to a higher value. If the value is set, a vector of zeros is recorded when the saving is skipped.\n\nIf the address type has multiple components, the component argument can be used to compute the density on a per-component basis.\n\nThe density is not normalized, and must be divided by the vector norm(⋅,2) squared.\n\nSee also\n\nsingle_particle_density\nDensityMatrixDiagonal\n\n\n\n\n\n","category":"type"},{"location":"API.html#Rimu.SingleState","page":"API","title":"Rimu.SingleState","text":"SingleState(hamiltonian, algorithm, v, wm, pnorm, params, id)\n\nStruct that holds a single state vector and all information needed for an independent run of the algorithm. Can be advanced a step forward with advance!.\n\nSee also SpectralState, SpectralStrategy, ReplicaState, ReplicaStrategy, replica_stats, PMCSimulation.\n\n\n\n\n\n","category":"type"},{"location":"API.html#Rimu.SpectralState","page":"API","title":"Rimu.SpectralState","text":"SpectralState <: AbstractVector{SingleState}\n\nHolds one or several SingleStates representing the ground state and excited states of a single replica.\n\nIndexing the SpectralState state[i] returns the ith SingleState.\n\nSee also SpectralStrategy, ReplicaState, SingleState, PMCSimulation.\n\n\n\n\n\n","category":"type"},{"location":"API.html#Rimu.SpectralStrategy","page":"API","title":"Rimu.SpectralStrategy","text":"SpectralStrategy{S}\n\nAbstract type for spectral strategies. The spectral strategy is used to control the number of spectral states used in the simulation.\n\n\n\n\n\n","category":"type"},{"location":"API.html#Rimu.StateVectors","page":"API","title":"Rimu.StateVectors","text":"StateVectors <: AbstractMatrix{V}\n\nRepresents a matrix of configuration vectors from the state. Construct this object with state_vectors.\n\n\n\n\n\n","category":"type"},{"location":"API.html#Rimu.TimeStepStrategy","page":"API","title":"Rimu.TimeStepStrategy","text":"TimeStepStrategy\n\nAbstract type for strategies for updating the time step with update_time_step(). Implemented strategies:\n\nConstantTimeStep\n\n\n\n\n\n","category":"type"},{"location":"API.html#Rimu.Timer","page":"API","title":"Rimu.Timer","text":"Timer <: PostStepStrategy\n\nRecord current time after every step. See Base.Libc.time for information on what time is recorded.\n\n\n\n\n\n","category":"type"},{"location":"API.html#Rimu.WalkerLoneliness","page":"API","title":"Rimu.WalkerLoneliness","text":"WalkerLoneliness(threshold=1) <: PostStepStrategy\n\nAfter each step, compute the proportion of configurations that are occupied by at most threshold walkers. Reports to a column named loneliness.\n\n\n\n\n\n","category":"type"},{"location":"API.html#CommonSolve.init-Tuple{ProjectorMonteCarloProblem}","page":"API","title":"CommonSolve.init","text":"init(problem::ProjectorMonteCarloProblem; copy_vectors=true)::PMCSimulation\n\nInitialise a Rimu.PMCSimulation.\n\nSee also ProjectorMonteCarloProblem, solve!, solve, step!, Rimu.PMCSimulation.\n\n\n\n\n\n","category":"method"},{"location":"API.html#CommonSolve.solve","page":"API","title":"CommonSolve.solve","text":"solve(::ProjectorMonteCarloProblem)::PMCSimulation\n\nInitialize and solve a ProjectorMonteCarloProblem until the last step is completed or the walltime limit is reached.\n\nSee also init, solve!, step!, Rimu.PMCSimulation, and solve(::ExactDiagonalizationProblem).\n\n\n\n\n\n","category":"function"},{"location":"API.html#CommonSolve.solve!-Tuple{Rimu.PMCSimulation}","page":"API","title":"CommonSolve.solve!","text":"solve!(sm::PMCSimulation; kwargs...)::PMCSimulation\n\nSolve a Rimu.PMCSimulation until the last step is completed or the walltime limit is reached.\n\nTo continue a previously completed simulation, set a new last_step or walltime using the keyword arguments. Optionally, changes can be made to the replica_strategy, the post_step_strategy, or the reporting_strategy.\n\nOptional keyword arguments:\n\nlast_step = nothing: Set the last step to a new value and continue the simulation.\nwalltime = nothing: Set the allowed walltime to a new value and continue the simulation.\nreset_time = false: Reset the elapsed_time counter and continue the simulation.\nempty_report = false: Empty the report before continuing the simulation.\nreplica_strategy = nothing: Change the replica strategy. Requires the number of replicas   to match the number of replicas in the simulation sm. Implies empty_report = true.\npost_step_strategy = nothing: Change the post-step strategy. Implies   empty_report = true.\nreporting_strategy = nothing: Change the reporting strategy. Implies   empty_report = true.\nmetadata = nothing: Add metadata to the report.\n\nSee also ProjectorMonteCarloProblem, init, solve, step!, Rimu.PMCSimulation.\n\n\n\n\n\n","category":"method"},{"location":"API.html#CommonSolve.step!-Tuple{Rimu.PMCSimulation}","page":"API","title":"CommonSolve.step!","text":"step!(sm::PMCSimulation)::PMCSimulation\n\nAdvance the simulation by one step.\n\nCalling solve! will advance the simulation until the last step or the walltime is exceeded. When completing the simulation without calling solve!, the simulation report needs to be finalised by calling Rimu.finalize_report!.\n\nSee also ProjectorMonteCarloProblem, init, solve!, solve, Rimu.PMCSimulation.\n\n\n\n\n\n","category":"method"},{"location":"API.html#Rimu._n_walkers-Tuple{Any, Any}","page":"API","title":"Rimu._n_walkers","text":"_n_walkers(v, shift_strategy)\n\nReturns an estimate of the expected number of walkers as an integer.\n\n\n\n\n\n","category":"method"},{"location":"API.html#Rimu.advance!-Tuple{FCIQMC, Any, Rimu.ReplicaState, Rimu.SingleState}","page":"API","title":"Rimu.advance!","text":"advance!(algorithm::PMCAlgorithm, report::Report, state::ReplicaState, s_state::SingleState)\n\nAdvance the s_state by one step according to the algorithm. The state is used only to access the various strategies involved. Steps, stats, and computed quantities are written to the report.\n\nReturns true if the step was successful and calculation should proceed, false when it should terminate.\n\nSee also solve!, step!.\n\n\n\n\n\n","category":"method"},{"location":"API.html#Rimu.all_overlaps-Union{Tuple{B}, Tuple{N}, Tuple{Union{Tuple, Vector}, NTuple{N, AbstractDVec}, Any, Val{B}}} where {N, B}","page":"API","title":"Rimu.all_overlaps","text":"all_overlaps(operators, vectors, working_memories, vecnorm=true)\n\nGet all overlaps between vectors and operators. This function is overloaded for MPIData. The flag vecnorm can disable the vector-vector overlap c{i}_dot_c{j}.\n\n\n\n\n\n","category":"method"},{"location":"API.html#Rimu.check_transform-Tuple{AllOverlaps, AbstractHamiltonian}","page":"API","title":"Rimu.check_transform","text":"check_transform(r::AllOverlaps, ham)\n\nCheck that the transformation provided to r::AllOverlaps matches the given Hamiltonian ham. Used as a sanity check before starting main ProjectorMonteCarloProblem loop.\n\n\n\n\n\n","category":"method"},{"location":"API.html#Rimu.clean_and_warn_if_others_present-Union{Tuple{names}, Tuple{NamedTuple{names}, Any}} where names","page":"API","title":"Rimu.clean_and_warn_if_others_present","text":"clean_and_warn_if_others_present(nt::NamedTuple{names}, keys) where {names}\n\nRemove keys from a NamedTuple that are not in keys and issue a warning if they are present.\n\n\n\n\n\n","category":"method"},{"location":"API.html#Rimu.default_logger-Tuple","page":"API","title":"Rimu.default_logger","text":"default_logger(args...)\n\nReset the global_logger to Logging.ConsoleLogger. Undoes the effect of smart_logger. Arguments are passed on to Logging.ConsoleLogger.\n\n\n\n\n\n","category":"method"},{"location":"API.html#Rimu.default_starting_vector-Tuple{AbstractHamiltonian}","page":"API","title":"Rimu.default_starting_vector","text":"default_starting_vector(hamiltonian::AbstractHamiltonian; kwargs...)\ndefault_starting_vector(\n    address=starting_address(hamiltonian);\n    style=IsDynamicSemistochastic(),\n    initiator=NonInitiator(),\n    threading=nothing,\n    population=10\n)\n\nReturn a default starting vector for ProjectorMonteCarloProblem. The default choice for the starting vector is\n\nv = PDVec(address => population; style, initiator)\n\nif threading is available, or otherwise\n\nv = DVec(address => population; style)\n\nif initiator == NonInitiator(), and\n\nv = InitiatorDVec(address => population; style, initiator)\n\nif not. See PDVec, DVec, InitiatorDVec, StochasticStyle, and InitiatorRule.\n\n\n\n\n\n","category":"method"},{"location":"API.html#Rimu.delete_and_warn_if_present-Union{Tuple{names}, Tuple{NamedTuple{names}, Any}} where names","page":"API","title":"Rimu.delete_and_warn_if_present","text":"delete_and_warn_if_present(nt::NamedTuple, keys)\n\nDelete keys from a NamedTuple and issue a warning if they are present. This is useful for removing unused keyword arguments.\n\n\n\n\n\n","category":"method"},{"location":"API.html#Rimu.finalize_report!-Tuple{ReportingStrategy, Any}","page":"API","title":"Rimu.finalize_report!","text":"finalize_report!(::ReportingStrategy, report)\n\nFinalize the report. This function is called after all steps in solve! have finished.\n\n\n\n\n\n","category":"method"},{"location":"API.html#Rimu.get_metadata-Tuple{Rimu.Report, Any}","page":"API","title":"Rimu.get_metadata","text":"get_metadata(report::Report, key)\n\nGet metadata key from report. key is converted to a String.\n\nSee also report_metadata!, Report, report!.\n\n\n\n\n\n","category":"method"},{"location":"API.html#Rimu.initialise_shift_parameters","page":"API","title":"Rimu.initialise_shift_parameters","text":"initialise_shift_parameters(s::ShiftStrategy, shift, norm, time_step, counter=0, shift_mode=false)\n\nInitiatlise a struct to store the shift parameters.\n\nSee ShiftStrategy, update_shift_parameters!, DefaultShiftParameters.\n\n\n\n\n\n","category":"function"},{"location":"API.html#Rimu.lomc!-Tuple{Any, Any}","page":"API","title":"Rimu.lomc!","text":"lomc!(ham::AbstractHamiltonian, [v]; kwargs...) -> df, state\nlomc!(state::ReplicaState, [df]; kwargs...) -> df, state\n\nLinear operator Monte Carlo: Perform a projector quantum Monte Carlo simulation for determining the lowest eigenvalue of ham. The details of the simulation are controlled by the optional keyword arguments and by the type of the optional starting vector v. Alternatively, a ReplicaState can be passed in to continue a previous simulation.\n\nCommon keyword arguments and defaults:\n\nlaststep = 100 - controls the number of steps.\ndτ = 0.01 - time step.\ntargetwalkers = 1000 - target for the 1-norm of the coefficient vector.\naddress = starting_address(ham) - set starting address for default v and shift.\nstyle = IsStochasticInteger() - set StochasticStyle for default v; unused if v is specified.\ninitiator = NonInitiator() - set InitiatorRule for default v; unused if v is specified.\nthreading - default is to use multithreading and MPI if multiple threads are available. Set to true to force PDVec for the starting vector, false for serial computation; unused if v is specified.\nshift = diagonal_element(ham, address) - initial value of shift.\npost_step_strategy::NTuple{N,<:PostStepStrategy} = () - extract observables (e.g. ProjectedEnergy), see PostStepStrategy. (Deprecated: post_step is accepted as an alias for post_step_strategy.)\nreplica_strategy::ReplicaStrategy = NoStats(1) - run several synchronised simulations, see ReplicaStrategy. (Deprecated: replica is accepted as an alias for replica_strategy.)\nreporting_strategy::ReportingStrategy = ReportDFAndInfo() - how and when to report results, see ReportingStrategy. (Deprecated: r_strat is accepted as an alias for reporting_strategy.)\nname = \"lomc!\" - name displayed in progress bar (via ProgressLogging)\nmetadata - user-supplied metadata to be added to the report df. Must be an iterable of pairs or a NamedTuple, e.g. metadata = (\"key1\" => \"value1\", \"key2\" => \"value2\"). All metadata is converted to strings.\n\nSome metadata is automatically added to the report df including Rimu.PACKAGE_VERSION and data from state.\n\nReturn values\n\nlomc! returns a named tuple with the following fields:\n\ndf: a DataFrame with all statistics being reported.\nstate: a ReplicaState that can be used for continuations.\n\nExample\n\njulia> address = BoseFS(1,2,3);\n\njulia> hamiltonian = HubbardReal1D(address);\n\njulia> df1, state = lomc!(hamiltonian; targetwalkers=500, laststep=100);\n\njulia> df2, _ = lomc!(state, df1; laststep=200, metadata=(;info=\"cont\")); # Continuation run\n\njulia> size(df1)\n(100, 9)\n\njulia> size(df2)\n(200, 9)\n\njulia> using DataFrames; metadata(df2, \"info\") # retrieve custom metadata\n\"cont\"\n\njulia> metadata(df2, \"hamiltonian\") # some metadata is automatically added\n\"HubbardReal1D(fs\\\"|1 2 3⟩\\\"; u=1.0, t=1.0)\"\n\nFurther keyword arguments and defaults:\n\nτ_strat::TimeStepStrategy = ConstantTimeStep() - adjust time step or not, see TimeStepStrategy\ns_strat::ShiftStrategy = DoubleLogUpdate(; target_walkers=targetwalkers, ζ = 0.08, ξ = ζ^2/4) - how to update the shift, see ShiftStrategy.\nmaxlength = 2 * s_strat.target_walkers + 100 - upper limit on the length of v; when reached, lomc! will abort\nwm - working memory for re-use in subsequent calculations; is mutated.\ndf = DataFrame() - when called with AbstractHamiltonian argument, a DataFrame can be passed for merging with the report df.\n\nThe default choice for the starting vector is v = default_starting_vector(; address, style, threading, initiator). See default_starting_vector, PDVec, DVec, StochasticStyle, and InitiatorRule.\n\nwarning: Warning\nThe use of this lomc! is deprecated. Use ProjectorMonteCarloProblem and solve instead.\n\n\n\n\n\n","category":"method"},{"location":"API.html#Rimu.num_replicas-Union{Tuple{ReplicaStrategy{N}}, Tuple{N}} where N","page":"API","title":"Rimu.num_replicas","text":"num_replicas(state_or_strategy)\n\nReturn the number of replicas used in the simulation.\n\n\n\n\n\n","category":"method"},{"location":"API.html#Rimu.num_spectral_states-Union{Tuple{Rimu.SpectralStrategy{S}}, Tuple{S}} where S","page":"API","title":"Rimu.num_spectral_states","text":"num_spectral_states(state_or_strategy)\n\nReturn the number of spectral states used in the simulation.\n\n\n\n\n\n","category":"method"},{"location":"API.html#Rimu.post_step_action","page":"API","title":"Rimu.post_step_action","text":"post_step_action(::PostStepStrategy, ::SingleState, step) -> kvpairs\n\nCompute statistics after FCIQMC step. Should return a tuple of :key => value pairs. This function is only called every reporting_interval steps, as defined by the ReportingStrategy.\n\nSee also PostStepStrategy, ReportingStrategy.\n\n\n\n\n\n","category":"function"},{"location":"API.html#Rimu.refine_reporting_strategy-Tuple{ReportingStrategy}","page":"API","title":"Rimu.refine_reporting_strategy","text":"refine_reporting_strategy(reporting_strategy::ReportingStrategy) -> reporting_strategy\n\nInitialize the reporting strategy. This can be used to set up filenames or other attributes that need to be unique for a run of FCIQMC.\n\n\n\n\n\n","category":"method"},{"location":"API.html#Rimu.replace_keys-Tuple{NamedTuple, Any}","page":"API","title":"Rimu.replace_keys","text":"replace_keys(nt::NamedTuple, (:old1 => :new1, :old2 => :new2, ...))\n\nReplace keys in a NamedTuple with new keys. This is useful for renaming fields in a NamedTuple. Ignores keys that are not present in the NamedTuple.\n\n\n\n\n\n","category":"method"},{"location":"API.html#Rimu.replica_stats","page":"API","title":"Rimu.replica_stats","text":"replica_stats(RS::ReplicaStrategy{N}, spectral_states::NTuple{N,SingleState}) -> (names, values)\n\nReturn the names and values of statistics related to N replica states consistent with the ReplicaStrategy RS. names should be a tuple of Symbols or Strings and values should be a tuple of the same length. This function will be called every reporting_interval steps from ProjectorMonteCarloProblem, or once per time step if reporting_interval is not defined.\n\nPart of the ReplicaStrategy interface. See also SingleState.\n\n\n\n\n\n","category":"function"},{"location":"API.html#Rimu.report!-Tuple{ReportingStrategy, Any, Vararg{Any}}","page":"API","title":"Rimu.report!","text":" report!(::ReportingStrategy, step, report::Report, keys, values, id=\"\")\n report!(::ReportingStrategy, step, report::Report, nt, id=\"\")\n\nReport keys and values to report, which will be converted to a DataFrame before ProjectorMonteCarloProblem exits. Alternatively, a nt::NamedTuple can be passed in place of keys and values. If id is specified, it is appended to all keys. This is used to differentiate between values reported by different replicas.\n\nTo overload this function for a new ReportingStrategy, overload report!(::ReportingStrategy, step, args...) and apply the report by calling report!(args...).\n\n\n\n\n\n","category":"method"},{"location":"API.html#Rimu.report!-Tuple{Rimu.Report, DataFrame}","page":"API","title":"Rimu.report!","text":"report!(report::Report, df::DataFrame)\n\nConvert the DataFrame df to a Report. This function does not copy the data.\n\n\n\n\n\n","category":"method"},{"location":"API.html#Rimu.report!-Tuple{Rimu.Report, Union{AbstractString, Symbol}, Any}","page":"API","title":"Rimu.report!","text":"report!(report, keys, values, id=\"\")\nreport!(report, pairs, id=\"\")\n\nWrite keys, values pairs to report that will be converted to a DataFrame later. Alternatively, a named tuple or a collection of pairs can be passed instead of keys and values.\n\nThe value of id is appended to the name of the column, e.g. report!(report, :key, value, :_1) will report value to a column named :key_1.\n\n\n\n\n\n","category":"method"},{"location":"API.html#Rimu.report_after_step!-Tuple{ReportingStrategy, Any, Any, Vararg{Any}}","page":"API","title":"Rimu.report_after_step!","text":"report_after_step!(::ReportingStrategy, step, report, state) -> report\n\nThis function is called at the very end of a step, after reporting_interval steps. It may modify the report.\n\n\n\n\n\n","category":"method"},{"location":"API.html#Rimu.report_metadata!-Tuple{Rimu.Report, Any, Any}","page":"API","title":"Rimu.report_metadata!","text":"report_metadata!(report::Report, key, value)\nreport_metadata!(report::Report, kvpairs)\n\nSet metadata key to value in report. key and value are converted to Strings. Alternatively, an iterable of key-value pairs or a NamedTuple can be passed.\n\nSee also get_metadata, report!, Report.\n\n\n\n\n\n","category":"method"},{"location":"API.html#Rimu.reporting_interval-Tuple{ReportingStrategy}","page":"API","title":"Rimu.reporting_interval","text":"reporting_interval(::ReportingStrategy)\n\nGet the interval between steps for which non-essential statistics are reported. Defaults to 1 if chosen ReportingStrategy does not specify an interval.\n\n\n\n\n\n","category":"method"},{"location":"API.html#Rimu.set_up_initial_shift_parameters-Union{Tuple{R}, Tuple{S}, Tuple{FCIQMC, Any, StaticArraysCore.SMatrix{S, R}, Any, Any}} where {S, R}","page":"API","title":"Rimu.set_up_initial_shift_parameters","text":"set_up_initial_shift_parameters(\n    algorithm::FCIQMC, hamiltonian, starting_vectors, shift, time_step, initial_shift_parameters\n)\n\nSet up the initial shift parameters for the FCIQMC algorithm.\n\n\n\n\n\n","category":"method"},{"location":"API.html#Rimu.single_particle_density-Tuple{Any}","page":"API","title":"Rimu.single_particle_density","text":"single_particle_density(dvec; component)\nsingle_particle_density(add; component)\n\nCompute the diagonal single particle density of vector dvec or address add. If the component argument is given, only that component of the addresses is taken into account. The result is always normalized so that sum(result) ≈ num_particles(address).\n\nExamples\n\njulia> v = DVec(fs\"|⋅↑⇅↓⋅⟩\" => 1.0, fs\"|↓↓⋅↑↑⟩\" => 0.5)\nDVec{FermiFS2C{2, 2, 5, 4, FermiFS{2, 5, BitString{5, 1, UInt8}}, FermiFS{2, 5, BitString{5, 1, UInt8}}},Float64} with 2 entries, style = IsDeterministic{Float64}()\n  fs\"|↓↓⋅↑↑⟩\" => 0.5\n  fs\"|⋅↑⇅↓⋅⟩\" => 1.0\n\njulia> single_particle_density(v)\n(0.2, 1.0, 1.6, 1.0, 0.2)\n\njulia> single_particle_density(v; component=1)\n(0.0, 1.6, 1.6, 0.4, 0.4)\n\nSee also\n\nSingleParticleDensity\n\n\n\n\n\n","category":"method"},{"location":"API.html#Rimu.smart_logger-Tuple","page":"API","title":"Rimu.smart_logger","text":"smart_logger(args...)\n\nEnable terminal progress bar during interactive use (i.e. unless running on CI or HPC). Arguments are passed on to the logger. This is run once during Rimu startup. Undo with default_logger or by setting Base.global_logger().\n\n\n\n\n\n","category":"method"},{"location":"API.html#Rimu.state_vectors-Tuple{R} where R<:Rimu.ReplicaState","page":"API","title":"Rimu.state_vectors","text":"state_vectors(state::ReplicaState)\nstate_vectors(sim::PMCSimulation)\n\nReturn an AbstractMatrix of configuration vectors from the state. The vectors can be accessed by indexing the resulting collection, where the row index corresponds to the replica index and the column index corresponds to the spectral state index.\n\nSee also SingleState, ReplicaState, SpectralState, PMCSimulation.\n\n\n\n\n\n","category":"method"},{"location":"API.html#Rimu.update_shift_parameters!","page":"API","title":"Rimu.update_shift_parameters!","text":"update_shift_parameters!(\n    s <: ShiftStrategy,\n    shift_parameters,\n    tnorm,\n    v_new,\n    v_old,\n    step,\n    report\n) -> shift_stats, proceed\n\nUpdate the shift_parameters according to strategy s. See ShiftStrategy. Returns a named tuple of the shift statistics and a boolean proceed indicating whether the simulation should proceed.\n\nSee initialise_shift_parameters, ShiftStrategy.\n\n\n\n\n\n","category":"function"},{"location":"API.html#Rimu.update_time_step-Tuple{ConstantTimeStep, Any, Vararg{Any}}","page":"API","title":"Rimu.update_time_step","text":"update_time_step(s<:TimeStepStrategy, time_step, tnorm) -> new_time_step\n\nUpdate the time step according to the strategy s.\n\n\n\n\n\n","category":"method"},{"location":"API.html#Reexported-Submodules","page":"API","title":"Reexported Submodules","text":"","category":"section"},{"location":"API.html#ExactDiagonalization","page":"API","title":"ExactDiagonalization","text":"","category":"section"},{"location":"API.html","page":"API","title":"API","text":"See Exact Diagonalization","category":"page"},{"location":"API.html#Interfaces","page":"API","title":"Interfaces","text":"","category":"section"},{"location":"API.html","page":"API","title":"API","text":"See Module Interfaces","category":"page"},{"location":"API.html#StochasticStyles","page":"API","title":"StochasticStyles","text":"","category":"section"},{"location":"API.html","page":"API","title":"API","text":"See Module StochasticStyles","category":"page"},{"location":"API.html#Hamiltonians","page":"API","title":"Hamiltonians","text":"","category":"section"},{"location":"API.html","page":"API","title":"API","text":"See Module Hamiltonians","category":"page"},{"location":"API.html#BitStringAddresses","page":"API","title":"BitStringAddresses","text":"","category":"section"},{"location":"API.html","page":"API","title":"API","text":"See Module BitStringAddresses","category":"page"},{"location":"API.html#DictVectors","page":"API","title":"DictVectors","text":"","category":"section"},{"location":"API.html","page":"API","title":"API","text":"See Module DictVectors","category":"page"},{"location":"API.html#StatsTools","page":"API","title":"StatsTools","text":"","category":"section"},{"location":"API.html","page":"API","title":"API","text":"See Module StatsTools","category":"page"},{"location":"API.html#RMPI","page":"API","title":"RMPI","text":"","category":"section"},{"location":"API.html","page":"API","title":"API","text":"See Module RMPI","category":"page"},{"location":"API.html#Index","page":"API","title":"Index","text":"","category":"section"},{"location":"API.html","page":"API","title":"API","text":"","category":"page"},{"location":"stochasticstyles.html#Module-StochasticStyles","page":"Stochastic styles","title":"Module StochasticStyles","text":"","category":"section"},{"location":"stochasticstyles.html","page":"Stochastic styles","title":"Stochastic styles","text":"StochasticStyles","category":"page"},{"location":"stochasticstyles.html#Rimu.StochasticStyles","page":"Stochastic styles","title":"Rimu.StochasticStyles","text":"This module provides concrete implementations of StochasticStyles, which specify the algorithm used by ProjectorMonteCarloProblem when performing stochastic matrix-vector multiplication.\n\nImplemented stochastic styles:\n\nStochasticStyle: abstract type for stochastic styles\nIsStochasticInteger\nIsDeterministic\nIsStochasticWithThreshold\nIsDynamicSemistochastic\nStyleUnknown\n\nThe offdiagonal spawning is defined in spawning.jl and is controlled by setting a SpawningStrategy.\n\nThe vector compression strategies are defined in compression.jl and are controlled by setting a CompressionStrategy.\n\n\n\n\n\n","category":"module"},{"location":"stochasticstyles.html#Available-StochasticStyles","page":"Stochastic styles","title":"Available StochasticStyles","text":"","category":"section"},{"location":"stochasticstyles.html","page":"Stochastic styles","title":"Stochastic styles","text":"StyleUnknown","category":"page"},{"location":"stochasticstyles.html#Rimu.Interfaces.StyleUnknown","page":"Stochastic styles","title":"Rimu.Interfaces.StyleUnknown","text":"StyleUnknown{T}() <: StochasticStyle\n\nTrait for value types not (currently) compatible with FCIQMC. This style makes it possible to construct dict vectors with unsupported valtypes.\n\nSee also StochasticStyle.\n\n\n\n\n\n","category":"type"},{"location":"stochasticstyles.html","page":"Stochastic styles","title":"Stochastic styles","text":"Modules = [StochasticStyles]\nPages = [\"styles.jl\"]","category":"page"},{"location":"stochasticstyles.html#Rimu.StochasticStyles.IsDeterministic","page":"Stochastic styles","title":"Rimu.StochasticStyles.IsDeterministic","text":"IsDeterministic{T=Float64}(compression=NoCompression()) <: StochasticStyle{T}\n\nPropagate with deterministic vector matrix multiplications. Stochastic compression of the resultant vector (after annihilations) can be triggered by setting the optional compression argument to a relevant CompressionStrategy.\n\nSee also StochasticStyle.\n\n\n\n\n\n","category":"type"},{"location":"stochasticstyles.html#Rimu.StochasticStyles.IsDynamicSemistochastic","page":"Stochastic styles","title":"Rimu.StochasticStyles.IsDynamicSemistochastic","text":"IsDynamicSemistochastic{T=Float64}(; kwargs...) <: StochasticStyle{T}\n\nQMC propagation with floating-point walker numbers and reduced noise. All possible spawns (offdiagonal elements in vector-matrix multiplication) are performed deterministically when number of walkers in a configuration is high, as controlled by the rel_spawning_threshold and abs_spawning_threshold keywords. Stochastic selection of spawns is controlled by the spawning keyword.\n\nBy default, a stochastic vector compression is applied after annihilations are completed. This behaviour can be changed to on-the-fly projection (as in IsStochasticInteger or IsStochasticWithThreshold) by setting late_compression=false, or modifying spawning and compression. See parameters below for a more detailed explanation.\n\nParameters:\n\nthreshold = 1.0: Values below this number are stochastically projected to this value or zero. See also ThresholdCompression.\nlate_compression = true: If this is set to true, stochastic vector compression is performed after all the spawns are performed. If it is set to false, values are stochastically projected as they are being spawned. late_compression=true is equivalent to setting compression=ThresholdCompression(threshold) and spawning=WithReplacement().  late_compression=false is equivalent to compression=NoCompression() and spawning=WithReplacement(threshold).\nrel_spawning_threshold = 1.0: If the walker number on a configuration times this threshold is greater than the number of offdiagonals, spawning is done deterministically. Should be set to 1 or more for best performance.\nabs_spawning_threshold = Inf: If the walker number on a configuration is greater than this value, spawning is done deterministically. Can be set to e.g.  abs_spawning_threshold = 0.1 * target_walkers.\nspawning = WithReplacement(): SpawningStrategy to use for the non-exact spawns.\ncompression = ThresholdCompression(threshold): CompressionStrategy used to compress the vector after a step. Overrides threshold.\n\nSee also StochasticStyle.\n\n\n\n\n\n","category":"type"},{"location":"stochasticstyles.html#Rimu.StochasticStyles.IsStochastic2Pop","page":"Stochastic styles","title":"Rimu.StochasticStyles.IsStochastic2Pop","text":"IsStochastic2Pop{T=Complex{Int}}() <: StochasticStyle{T}\n\nStochastic propagation with complex walker numbers representing two populations of integer walkers.\n\nWhen using this style, make sure to set a complex number as target walkers in the ShiftStrategy!\n\nThis style is experimental.\n\nSee also StochasticStyle.\n\n\n\n\n\n","category":"type"},{"location":"stochasticstyles.html#Rimu.StochasticStyles.IsStochasticInteger","page":"Stochastic styles","title":"Rimu.StochasticStyles.IsStochasticInteger","text":"IsStochasticInteger{T=Int}() <: StochasticStyle{T}\n\nFCIQMC algorithm with integer walkers as in Booth et al. (2009). During the vector matrix product each individual diagonal and spawning step is rounded stochastically to a nearby integer value.\n\nSee also StochasticStyle.\n\n\n\n\n\n","category":"type"},{"location":"stochasticstyles.html#Rimu.StochasticStyles.IsStochasticWithThreshold","page":"Stochastic styles","title":"Rimu.StochasticStyles.IsStochasticWithThreshold","text":"IsStochasticWithThreshold{T=Float64}(threshold=1.0) <: StochasticStyle{T}\n\nStochastic propagation with floating point walker numbers. During the vector matrix product each individual diagonal and spawning result is rounded stochastically if smaller than threshold (before annihilations). For a more customizable stochastic style, see IsDynamicSemistochastic.\n\nSee also StochasticStyle.\n\n\n\n\n\n","category":"type"},{"location":"stochasticstyles.html#The-StochasticStyle-interface","page":"Stochastic styles","title":"The StochasticStyle interface","text":"","category":"section"},{"location":"stochasticstyles.html","page":"Stochastic styles","title":"Stochastic styles","text":"StochasticStyle\nstep_stats\napply_column!\ndefault_style","category":"page"},{"location":"stochasticstyles.html#Rimu.Interfaces.StochasticStyle","page":"Stochastic styles","title":"Rimu.Interfaces.StochasticStyle","text":"StochasticStyle(v)\n\nAbstract type. When called as a function it returns the native style of the generalised vector v that determines how simulations are to proceed.\n\nUsage\n\nConcrete StochasticStyles can be used for the style keyword argument of ProjectorMonteCarloProblem, DVec and PDVec. The following styles are available:\n\nIsStochasticInteger\nIsDeterministic\nIsStochasticWithThreshold\nIsDynamicSemistochastic\nStyleUnknown\n\nExtended Help\n\nInterface\n\nWhen defining a new StochasticStyle, subtype it as MyStyle<:StochasticStyle{T} where T is the concrete value type the style is designed to work with.\n\nFor it to work with ProjectorMonteCarloProblem, a StochasticStyle must define the following:\n\napply_column!(::StochasticStyle, w, H, address, value)\nstep_stats(::StochasticStyle)\n\nand optionally\n\nCompressionStrategy(::StochasticStyle) for vector compression after annihilations,\n\nSee also StochasticStyles, Interfaces.\n\n\n\n\n\n","category":"type"},{"location":"stochasticstyles.html#Rimu.Interfaces.step_stats","page":"Stochastic styles","title":"Rimu.Interfaces.step_stats","text":"step_stats(::StochasticStyle)\nstep_stats(::CompressionStrategy)\n\nReturn a tuple of stat names (Symbol or String) and a tuple of zeros of the same length. These will be reported as columns in the DataFrame returned by ProjectorMonteCarloProblem.\n\n\n\n\n\n","category":"function"},{"location":"stochasticstyles.html#Rimu.Interfaces.apply_column!","page":"Stochastic styles","title":"Rimu.Interfaces.apply_column!","text":"apply_column!(v, op, addr, num, boost=1) -> stats::Tuple\n\nApply the product of column addr of the operator op and the scalar num to the vector v according to the StochasticStyle of v. By expectation value this should be equivalent to\n\nv .+= op[:, add] .* num\n\nThis is used to perform the spawning step in FCIQMC and to implement operator-vector multiplications. Mutates v and reports spawning statistics.\n\nThe boost argument multiplicatively increases the number of spawns to be performed without affecting the expectation value of the procedure.\n\n\n\n\n\n","category":"function"},{"location":"stochasticstyles.html#Rimu.Interfaces.default_style","page":"Stochastic styles","title":"Rimu.Interfaces.default_style","text":"default_style(::Type)\n\nPick a StochasticStyle based on the value type. Returns StyleUnknown if no known default style is set.\n\n\n\n\n\n","category":"function"},{"location":"stochasticstyles.html#Compression-strategies","page":"Stochastic styles","title":"Compression strategies","text":"","category":"section"},{"location":"stochasticstyles.html","page":"Stochastic styles","title":"Stochastic styles","text":"CompressionStrategy\nNoCompression\nStochasticStyles.ThresholdCompression\ncompress!","category":"page"},{"location":"stochasticstyles.html#Rimu.Interfaces.CompressionStrategy","page":"Stochastic styles","title":"Rimu.Interfaces.CompressionStrategy","text":"CompressionStrategy\n\nThe CompressionStrategy controls how a vector is compressed after a step.\n\nDefault implementation:\n\nNoCompression: no vector compression\n\nUsage\n\nA subtype of CompressionStrategy can be passed as a keyword argument to the constructors for some StochasticStyles. Calling CompressionStrategy(s::StochasticStyle) returns a relevant subtype. The default is NoCompression.\n\nInterface\n\nWhen defining a new CompressionStrategy, subtype it as MyCompressionStrategy <: CompressionStrategy and define these methods:\n\ncompress!(s::CompressionStrategy, v)\ncompress!(s::CompressionStrategy, w, v)\nstep_stats(s::CompressionStrategy)\n\n\n\n\n\n","category":"type"},{"location":"stochasticstyles.html#Rimu.Interfaces.NoCompression","page":"Stochastic styles","title":"Rimu.Interfaces.NoCompression","text":"NoCompression <: CompressionStrategy end\n\nDefault CompressionStrategy. Leaves the vector intact.\n\n\n\n\n\n","category":"type"},{"location":"stochasticstyles.html#Rimu.StochasticStyles.ThresholdCompression","page":"Stochastic styles","title":"Rimu.StochasticStyles.ThresholdCompression","text":"ThresholdCompression(threshold=1) <: CompressionStrategy\n\nCompressionStrategy that compresses a vector by threshold projection. Every entry in the vector with a value below the threshold is either set to zero, or increased to the threshold. The probabilty of setting it to zero is equal to abs(value) / threshold.\n\n\n\n\n\n","category":"type"},{"location":"stochasticstyles.html#Rimu.Interfaces.compress!","page":"Stochastic styles","title":"Rimu.Interfaces.compress!","text":"compress!([::CompressionStrategy,] v) -> ::NTuple{N,::Symbol}, ::NTuple{N}\ncompress!([::CompressionStrategy,] w, v) -> ::NTuple{N,::Symbol}, ::NTuple{N}\n\nCompress the vector v. The one-argument version compresses the vector in-place. The two-argument vector stores the result in w. The CompressionStrategy associated with the StochasticStyle of v is used to determine the type of compression.\n\nReturns two tuples, containing the names and values of statistics that are to be reported.\n\n\n\n\n\n","category":"function"},{"location":"stochasticstyles.html#Spawning-strategies-and-convenience-functions","page":"Stochastic styles","title":"Spawning strategies and convenience functions","text":"","category":"section"},{"location":"stochasticstyles.html","page":"Stochastic styles","title":"Stochastic styles","text":"The following functions and types are unexported, but are useful when defining new styles.","category":"page"},{"location":"stochasticstyles.html","page":"Stochastic styles","title":"Stochastic styles","text":"Modules = [StochasticStyles]\nPages = [\"spawning.jl\"]\nOrder = [:function,:method,:type]","category":"page"},{"location":"stochasticstyles.html#Rimu.StochasticStyles.diagonal_step!","page":"Stochastic styles","title":"Rimu.StochasticStyles.diagonal_step!","text":"diagonal_step!(w, op, add, val, threshold=0) -> (clones, deaths, zombies)\n\nPerform diagonal step on a walker add => val. Optional argument threshold sets the projection threshold. If eltype(w) is an Integer, the val is rounded to the nearest integer stochastically.\n\n\n\n\n\n","category":"function"},{"location":"stochasticstyles.html#Rimu.StochasticStyles.projected_deposit!","page":"Stochastic styles","title":"Rimu.StochasticStyles.projected_deposit!","text":"projected_deposit!(w, add, val, parent, threshold=0)\n\nLike deposit!, but performs threshold projection before spawning. If eltype(w) is an Integer, values are stochastically rounded.\n\nReturns the value deposited.\n\n\n\n\n\n","category":"function"},{"location":"stochasticstyles.html#Rimu.StochasticStyles.spawn!","page":"Stochastic styles","title":"Rimu.StochasticStyles.spawn!","text":"spawn!(s::SpawningStrategy, w, op::AbstractHamiltonian, add, val, boost)\nspawn!(s::SpawningStrategy, w, offdiags::AbstractOffdiagonals, add, val, boost)\n\nPerform stochastic spawns to w from address add with val walkers. val * boost controls the number of spawns performed.\n\nThis function should be overloaded in the second form, with offdiags as an argument.\n\nSee SpawningStrategy.\n\n\n\n\n\n","category":"function"},{"location":"stochasticstyles.html#Rimu.StochasticStyles.Bernoulli","page":"Stochastic styles","title":"Rimu.StochasticStyles.Bernoulli","text":"Bernoulli(threshold=0.0) <: SpawningStrategy\n\nPerform Bernoulli sampling. A spawn is attempted on each offdiagonal element with a probability that results in an expected number of spawns equal to the number of walkers on the spawning configuration. This is significantly less efficient than WithReplacement.\n\nIf the number of spawn attempts is greater than the number of offdiagonals, this functions like Exact, but is less efficient. For best performance, this strategy is to be used as a substrategy of DynamicSemistochastic.\n\nParameters\n\nthreshold sets the projection threshold.\n\nspawn! with this strategy returns the number of spawn attempts and the number of spawns.\n\n\n\n\n\n","category":"type"},{"location":"stochasticstyles.html#Rimu.StochasticStyles.DynamicSemistochastic","page":"Stochastic styles","title":"Rimu.StochasticStyles.DynamicSemistochastic","text":"DynamicSemistochastic(; strat, rel_threshold, abs_threshold) <: SpawningStrategy\n\nSpawningStrategy that behaves like strat when the number of walkers is low, but performs exact steps when it is high. What \"high\" means is controlled by the two thresholds described below.\n\nParameters\n\nstrat = WithReplacement(): a SpawningStrategy to use when the multiplication is not performed exactly. If the strat has a threshold different from zero, all spawns will be projected to that threshold.\nrel_threshold = 1.0: When deciding on whether to perform an exact spawn, this value is multiplied to the number of walkers. Should be set to 1 or more for best performance. This threshold is affected by the boost argument to spawn!.\nabs_threshold = Inf: When deciding on whether to perform an exact spawn, min(abs_threshold, num_offdiagonals) is used. This threshold is not affected by the boost argument to spawn!.\n\nSee e.g. WithoutReplacement for a description of the strat.threshold parameter.\n\nspawn! with this strategy returns the numbers of exact and inexact spawns, the number of spawn attempts and the number of spawns.\n\n\n\n\n\n","category":"type"},{"location":"stochasticstyles.html#Rimu.StochasticStyles.Exact","page":"Stochastic styles","title":"Rimu.StochasticStyles.Exact","text":"Exact(threshold=0.0) <: SpawningStrategy\n\nPerform an exact spawning step.\n\nParameters\n\nthreshold sets the projection threshold. If set to zero, no projection is performed.\n\nspawn! with this strategy returns the number of spawn attempts and the number of spawns.\n\n\n\n\n\n","category":"type"},{"location":"stochasticstyles.html#Rimu.StochasticStyles.SingleSpawn","page":"Stochastic styles","title":"Rimu.StochasticStyles.SingleSpawn","text":"SingleSpawn(threshold=0.0) <: SpawningStrategy\n\nPerform a single spawn. Useful as a building block for other stochastic styles.\n\nParameters\n\nthreshold sets the projection threshold. If set to zero, no projection is performed.\n\nspawn! with this strategy returns the number of spawn attempts (always 1) and the number of spawns.\n\n\n\n\n\n","category":"type"},{"location":"stochasticstyles.html#Rimu.StochasticStyles.SpawningStrategy","page":"Stochastic styles","title":"Rimu.StochasticStyles.SpawningStrategy","text":"SpawningStrategy\n\nA SpawningStrategy is used to control how spawns (multiplies with off-diagonal part of the column vector) are performed and can be passed to some of the StochasticStyles as keyword arguments.\n\nThe following concrete implementations are provided:\n\nExact: Perform exact spawns. Used by IsDeterministic.\nWithReplacement: The default stochastic spawning strategy. Spawns are chosen with replacement.\nDynamicSemistochastic: Behave like Exact when the number of spawns performed is high, and like a different substrategy otherwise. Used by IsDynamicSemistochastic.\nSingleSpawn: Perform a single spawn only. Used as a building block for other strategies.\nWithoutReplacement: Similar to WithReplacement, but ensures each spawn is only performed once. Only to be used as a substrategy of DynamicSemistochastic.\nBernoulli: Each spawn is attempted with a fixed probability. Only to be used as a substrategy of DynamicSemistochastic.\n\nInterface\n\nIn order to implement a new SpawningStrategy, define a method for spawn!.\n\n\n\n\n\n","category":"type"},{"location":"stochasticstyles.html#Rimu.StochasticStyles.WithReplacement","page":"Stochastic styles","title":"Rimu.StochasticStyles.WithReplacement","text":"WithReplacement(threshold=0.0) <: SpawningStrategy\n\nSpawningStrategy where spawn targets are sampled with replacement. This is the default spawning strategy for most of the StochasticStyles.\n\nParameters\n\nthreshold sets the projection threshold. If set to zero, no projection is performed.\n\nspawn! with this strategy returns the number of spawn attempts and the number of spawns.\n\n\n\n\n\n","category":"type"},{"location":"stochasticstyles.html#Rimu.StochasticStyles.WithoutReplacement","page":"Stochastic styles","title":"Rimu.StochasticStyles.WithoutReplacement","text":"WithoutReplacement(threshold=0.0) <: SpawningStrategy\n\nSpawningStrategy where spawn targets are sampled without replacement. This strategy needs to allocate a temporary array during spawning, which makes it significantly less efficient than WithReplacement.\n\nIf the number of spawn attempts is greater than the number of offdiagonals, this functions like Exact, but is less efficient. For best performance, this strategy is to be used as a substrategy of DynamicSemistochastic.\n\nParameters\n\nthreshold sets the projection threshold. If set to zero, no projection is performed.\n\nspawn! with this strategy returns the number of spawn attempts and the number of spawns.\n\n\n\n\n\n","category":"type"},{"location":"stochasticstyles.html#Index","page":"Stochastic styles","title":"Index","text":"","category":"section"},{"location":"stochasticstyles.html","page":"Stochastic styles","title":"Stochastic styles","text":"Pages   = [\"stochasticstyles.md\"]","category":"page"},{"location":"generated/BHM-example-mpi.html","page":"Rimu with MPI","title":"Rimu with MPI","text":"EditURL = \"../../../scripts/BHM-example-mpi.jl\"","category":"page"},{"location":"generated/BHM-example-mpi.html#Example-2:-Rimu-with-MPI","page":"Rimu with MPI","title":"Example 2: Rimu with MPI","text":"","category":"section"},{"location":"generated/BHM-example-mpi.html","page":"Rimu with MPI","title":"Rimu with MPI","text":"In this example, we will demonstrate using Rimu with MPI. MPI is a standard for parallel and distributed computing, and it is widely used in high-performance computing. Rimu provides support for MPI to enable parallel computations on multiple nodes.","category":"page"},{"location":"generated/BHM-example-mpi.html","page":"Rimu with MPI","title":"Rimu with MPI","text":"A runnable script for this example is located here. Run it with 2 MPI ranks with mpirun -n 2 julia BHM-example-mpi.jl.","category":"page"},{"location":"generated/BHM-example-mpi.html","page":"Rimu with MPI","title":"Rimu with MPI","text":"We start by importing Rimu and Rimu.RMPI, which contains MPI-related functionality.","category":"page"},{"location":"generated/BHM-example-mpi.html","page":"Rimu with MPI","title":"Rimu with MPI","text":"using Rimu\nusing Rimu.RMPI","category":"page"},{"location":"generated/BHM-example-mpi.html","page":"Rimu with MPI","title":"Rimu with MPI","text":"Note that it is not necessary to initialise the MPI library, as this is already done automatically when Rimu is loaded.","category":"page"},{"location":"generated/BHM-example-mpi.html","page":"Rimu with MPI","title":"Rimu with MPI","text":"We will compute the ground state of a Bose-Hubbard model in momentum space with 10 particles in 10 sites.","category":"page"},{"location":"generated/BHM-example-mpi.html","page":"Rimu with MPI","title":"Rimu with MPI","text":"First, we define the Hamiltonian. We want to start from an address with zero momentum, which is located at mode 5 in the momentum grid. We put all 10 particles, all in the zero momentum mode.","category":"page"},{"location":"generated/BHM-example-mpi.html","page":"Rimu with MPI","title":"Rimu with MPI","text":"address = BoseFS(10, 5 => 10)","category":"page"},{"location":"generated/BHM-example-mpi.html","page":"Rimu with MPI","title":"Rimu with MPI","text":"BoseFS{10,10}(0, 0, 0, 0, 10, 0, 0, 0, 0, 0)","category":"page"},{"location":"generated/BHM-example-mpi.html","page":"Rimu with MPI","title":"Rimu with MPI","text":"We will set the interaction strength u to 6.0. The hopping strength t defaults to 1.0.","category":"page"},{"location":"generated/BHM-example-mpi.html","page":"Rimu with MPI","title":"Rimu with MPI","text":"H = HubbardMom1D(address; u=6.0)","category":"page"},{"location":"generated/BHM-example-mpi.html","page":"Rimu with MPI","title":"Rimu with MPI","text":"HubbardMom1D(fs\"|0 0 0 0 10 0 0 0 0 0⟩\"; u=6.0, t=1.0)","category":"page"},{"location":"generated/BHM-example-mpi.html","page":"Rimu with MPI","title":"Rimu with MPI","text":"We set a reporting strategy. We will use ReportToFile, which writes the reports directly to a file. This is useful for MPI calculations, as they will typically run non-interactively. The reports will be written to disk and can be inspected later. This has the additional benefit of reducing memory use in long-running jobs, as we don't need to keep the results in memory. It also allows us to inspect the results before the computation finishes and recover some data if it fails.","category":"page"},{"location":"generated/BHM-example-mpi.html","page":"Rimu with MPI","title":"Rimu with MPI","text":"The default settings will ensure that only the root MPI rank will write to the file, which is reasonable, and that data is saved in chunks of 1000 time steps. We choose to suppress progress messages with setting io=devnull.","category":"page"},{"location":"generated/BHM-example-mpi.html","page":"Rimu with MPI","title":"Rimu with MPI","text":"reporting_strategy = ReportToFile(\n    filename=\"result.arrow\",\n    io=devnull\n)","category":"page"},{"location":"generated/BHM-example-mpi.html","page":"Rimu with MPI","title":"Rimu with MPI","text":"ReportToFile{Symbol}(\"result.arrow\", 1, 1000, true, false, Base.DevNull(), :zstd, nothing)","category":"page"},{"location":"generated/BHM-example-mpi.html","page":"Rimu with MPI","title":"Rimu with MPI","text":"For running parallel computations with MPI, it is important that a compatible state vector is used. Here we explicitly set up an MPI-enabled state vector, PDVec, which is automatically MPI-distributed over the available number of MPI ranks. In addition, threading will be used with all threads available to Julia.","category":"page"},{"location":"generated/BHM-example-mpi.html","page":"Rimu with MPI","title":"Rimu with MPI","text":"initial_vector = PDVec(address => 1.0; style=IsDynamicSemistochastic())","category":"page"},{"location":"generated/BHM-example-mpi.html","page":"Rimu with MPI","title":"Rimu with MPI","text":"1-element PDVec: style = IsDynamicSemistochastic{Float64,ThresholdCompression,DynamicSemistochastic}()\n  fs\"|0 0 0 0 10 0 0 0 0 0⟩\" => 1.0","category":"page"},{"location":"generated/BHM-example-mpi.html","page":"Rimu with MPI","title":"Rimu with MPI","text":"Now, we can set other parameters as usual. We will perform the computation with 10000 walkers and for 10000 time steps. We will also compute the projected energy by passing a ProjectedEnergy object as a post_step_strategy.","category":"page"},{"location":"generated/BHM-example-mpi.html","page":"Rimu with MPI","title":"Rimu with MPI","text":"problem = ProjectorMonteCarloProblem(H;\n    start_at=initial_vector,\n    reporting_strategy,\n    post_step_strategy=ProjectedEnergy(H, initial_vector),\n    target_walkers=10_000,\n    time_step=1e-4,\n    last_step=10_000\n);","category":"page"},{"location":"generated/BHM-example-mpi.html","page":"Rimu with MPI","title":"Rimu with MPI","text":"The @mpi_root macro performs an action on the root rank only, which is useful for printing.","category":"page"},{"location":"generated/BHM-example-mpi.html","page":"Rimu with MPI","title":"Rimu with MPI","text":"@mpi_root println(\"Running FCIQMC with \", mpi_size(), \" rank(s).\")","category":"page"},{"location":"generated/BHM-example-mpi.html","page":"Rimu with MPI","title":"Rimu with MPI","text":"Running FCIQMC with 1 rank(s).\n","category":"page"},{"location":"generated/BHM-example-mpi.html","page":"Rimu with MPI","title":"Rimu with MPI","text":"Finally, we can run the computation.","category":"page"},{"location":"generated/BHM-example-mpi.html","page":"Rimu with MPI","title":"Rimu with MPI","text":"simulation = solve(problem);\n\n@mpi_root println(\"Simulation success = \", simulation.success)","category":"page"},{"location":"generated/BHM-example-mpi.html","page":"Rimu with MPI","title":"Rimu with MPI","text":"Simulation success = true\n","category":"page"},{"location":"generated/BHM-example-mpi.html","page":"Rimu with MPI","title":"Rimu with MPI","text":"Once the calculation is done, the results are available in the arrow file on disk.","category":"page"},{"location":"generated/BHM-example-mpi.html","page":"Rimu with MPI","title":"Rimu with MPI","text":"In a typical workflow, the simulation results would be loaded from disk and analysed in the REPL or with a separate script. The arrow file can be loaded into a DataFrame with metadata using the load_df function.","category":"page"},{"location":"generated/BHM-example-mpi.html","page":"Rimu with MPI","title":"Rimu with MPI","text":"","category":"page"},{"location":"generated/BHM-example-mpi.html","page":"Rimu with MPI","title":"Rimu with MPI","text":"This page was generated using Literate.jl.","category":"page"},{"location":"index.html#Rimu.jl-Package-Guide","page":"Guide","title":"Rimu.jl Package Guide","text":"","category":"section"},{"location":"index.html","page":"Guide","title":"Guide","text":"Random Integrators for many-body quantum systems","category":"page"},{"location":"index.html","page":"Guide","title":"Guide","text":"The grand aim is to develop a toolbox for many-body quantum systems that can be represented by a Hamiltonian in second quantisation language. Currently supported features include:","category":"page"},{"location":"index.html#Interacting-with-quantum-many-body-models","page":"Guide","title":"Interacting with quantum many-body models","text":"","category":"section"},{"location":"index.html","page":"Guide","title":"Guide","text":"Full configuration interaction quantum Monte Carlo (FCIQMC), a flavour of projector quantum Monte Carlo for stochastically solving the time-independent Schrödinger equation. See References.\nMatrix-free exact diagonalisation of quantum Hamiltonians (with external package KrylovKit.jl).\nSparse matrix representation of quantum Hamiltonians for exact diagonalisation with sparse linear algebra package of your choice (fastest for small systems).","category":"page"},{"location":"index.html#Representing-quantum-many-body-models","page":"Guide","title":"Representing quantum many-body models","text":"","category":"section"},{"location":"index.html","page":"Guide","title":"Guide","text":"A composable and efficient type system for representing single- and multi-component Fock states of bosons, fermions, and mixtures thereof, to be used as a basis for representing Hamiltonians.\nAn interface for defining many-body Hamiltonians.\nPre-defined models include:\nHubbard model in real space for bosons and fermions and mixtures in 1, 2, and 3 spatial dimensions.\nHubbard and related lattice models in momentum space for bosons and fermions in one spatial dimension.\nTranscorrelated Hamiltonian for contact interactions in one dimension for fermions, as described in Jeszenski et al. arXiv:1806.11268.","category":"page"},{"location":"index.html#Statistical-analysis-of-Monte-Carlo-data","page":"Guide","title":"Statistical analysis of Monte Carlo data","text":"","category":"section"},{"location":"index.html","page":"Guide","title":"Guide","text":"Blocking analysis following Flyvberg & Peterson JCP (1989), and automated with hypothesis testing by Jonsson","category":"page"},{"location":"index.html","page":"Guide","title":"Guide","text":"PRE (2018).","category":"page"},{"location":"index.html","page":"Guide","title":"Guide","text":"Unbiased estimators for the ground state energy by re-reweighting following Nightingale & Blöte PRB (1986) and Umrigar et al. JCP (1993).","category":"page"},{"location":"index.html","page":"Guide","title":"Guide","text":"The code supports parallelisation with MPI (harnessing MPI.jl) as well as native Julia threading (experimental). In the future, we may add tools to solve the time-dependent Schrödinger equation and Master equations for open system time evolution.","category":"page"},{"location":"index.html","page":"Guide","title":"Guide","text":"Concept: Joachim Brand and Elke Pahl.","category":"page"},{"location":"index.html","page":"Guide","title":"Guide","text":"Contributors: Joachim Brand, Elke Pahl, Mingrui Yang, Matija Čufar, Chris Bradly.","category":"page"},{"location":"index.html","page":"Guide","title":"Guide","text":"Discussions, help, and additional contributions are acknowledged by Ali Alavi, Didier Adrien, Chris Scott (NeSI), Alexander Pletzer (NeSI).","category":"page"},{"location":"index.html#Installation","page":"Guide","title":"Installation","text":"","category":"section"},{"location":"index.html#Installing-Rimu-for-usage","page":"Guide","title":"Installing Rimu for usage","text":"","category":"section"},{"location":"index.html","page":"Guide","title":"Guide","text":"Rimu is a registered package and can be installed with the package manager. Hit the ] key at the Julia REPL to get into Pkg mode and type","category":"page"},{"location":"index.html","page":"Guide","title":"Guide","text":"pkg> add Rimu","category":"page"},{"location":"index.html","page":"Guide","title":"Guide","text":"Alternatively, use","category":"page"},{"location":"index.html","page":"Guide","title":"Guide","text":"julia> using Pkg; Pkg.add(name=\"Rimu\")","category":"page"},{"location":"index.html","page":"Guide","title":"Guide","text":"in order to install Rimu from a script.","category":"page"},{"location":"index.html#Installing-Rimu-for-development","page":"Guide","title":"Installing Rimu for development","text":"","category":"section"},{"location":"index.html","page":"Guide","title":"Guide","text":"In order to be able to edit the source code, push changes, change and make new git branches, etc., clone the git repository with git clone to a convenient location, e.g. ~/mygitpackagefolder/. Then hit the ] key at the Julia REPL to get into Pkg mode and type","category":"page"},{"location":"index.html","page":"Guide","title":"Guide","text":"pkg> develop ~/mygitpackagefolder/rimu.jl","category":"page"},{"location":"index.html","page":"Guide","title":"Guide","text":"where the file path has to be adjusted to the location of the cloned git repository.","category":"page"},{"location":"index.html#Usage","page":"Guide","title":"Usage","text":"","category":"section"},{"location":"index.html","page":"Guide","title":"Guide","text":"The package is now installed and can be imported with","category":"page"},{"location":"index.html","page":"Guide","title":"Guide","text":"julia> using Rimu","category":"page"},{"location":"index.html","page":"Guide","title":"Guide","text":"When planning to edit the code of the package it is advisable to use the Revise package by issuing","category":"page"},{"location":"index.html","page":"Guide","title":"Guide","text":"julia> using Revise","category":"page"},{"location":"index.html","page":"Guide","title":"Guide","text":"before using Rimu. This will track any changes made to the source code of Rimu and the changed package will be available after saving the source code (hopefully, and most of the time, without restarting the Julia REPL).","category":"page"},{"location":"index.html","page":"Guide","title":"Guide","text":"Rimu offers a number of tools for representing Hamiltonians (see Hamiltonians) and state vectors / wave functions (see DictVectors) as well as algorithms to find the ground state, e.g. ProjectorMonteCarloProblem, ExactDiagonalizationProblem.","category":"page"},{"location":"index.html#Scripts","page":"Guide","title":"Scripts","text":"","category":"section"},{"location":"index.html","page":"Guide","title":"Guide","text":"Rimu is written as a Julia package to be imported with using Rimu as described above. It supplies useful functions and types. Performing actual calculations and analysing the results is done with scripts. The folder scripts/ contains a collections of scripts that are either examples for use of the Rimu package or useful scripts for data analysis. In particular:","category":"page"},{"location":"index.html","page":"Guide","title":"Guide","text":"scripts/BHM-example.jl is an example script that runs fciqmc on the 1D Bose-Hubbard model. A data frame with results is written to the file fciqmcdata.arrow.\nscripts/BHM-example-mpi.jl demonstrates basic usage of Rimu with MPI.","category":"page"},{"location":"index.html#MPI","page":"Guide","title":"MPI","text":"","category":"section"},{"location":"index.html","page":"Guide","title":"Guide","text":"The Rimu package can run in parallel on different processes or node and distribute work by making use of MPI, or \"message passing interface\". For example, running","category":"page"},{"location":"index.html","page":"Guide","title":"Guide","text":"> julia scripts/BHM-example.jl","category":"page"},{"location":"index.html","page":"Guide","title":"Guide","text":"will run on one processor with the main computation (i.e. after package loading and compilation) completing in 2.69 seconds.","category":"page"},{"location":"index.html","page":"Guide","title":"Guide","text":"Running","category":"page"},{"location":"index.html","page":"Guide","title":"Guide","text":"> mpirun -np 4 julia scripts/BHM-example-mpi.jl","category":"page"},{"location":"index.html","page":"Guide","title":"Guide","text":"on the same hardware makes use of 4 cores and the main part completes in 1.04 seconds, a speedup factor of 2.6. This seems reasonable, given that extra work needs to be done for communicating between different processes.","category":"page"},{"location":"index.html","page":"Guide","title":"Guide","text":"Using MPI parallelism with Rimu is easy. Enabling MPI enabled automatically if PDVec is used to store a vector. In that case, data will be stored in a distributed fashion among the MPI ranks and only communicated between ranks when necessary. Additional MPI-related functionality is provided by the module RMPI.","category":"page"},{"location":"index.html#Compatibility","page":"Guide","title":"Compatibility","text":"","category":"section"},{"location":"index.html","page":"Guide","title":"Guide","text":"We recommend using Rimu with the latest Julia release version. Rimu requires at least julia v1.9.","category":"page"},{"location":"index.html#References","page":"Guide","title":"References","text":"","category":"section"},{"location":"index.html","page":"Guide","title":"Guide","text":"The code implements the FCIQMC algorithm originally described in","category":"page"},{"location":"index.html","page":"Guide","title":"Guide","text":"\"Fermion Monte Carlo without fixed nodes: A game of life, death, and annihilation in Slater determinant space\", G. H. Booth, A. J. W. Thom, A. Alavi, J. Chem. Phys. 131, 054106 (2009).\n\"Communications: Survival of the fittest: accelerating convergence in full configuration-interaction quantum Monte Carlo.\", D. Cleland,  G. H. Booth, A. Alavi, J. Chem. Phys. 132, 041103 (2010).","category":"page"},{"location":"index.html","page":"Guide","title":"Guide","text":"Scientific papers describing additional features implemented in Rimu:","category":"page"},{"location":"index.html","page":"Guide","title":"Guide","text":"\"Improved walker population control for full configuration interaction quantum Monte Carlo\", M. Yang, E. Pahl, J. Brand, J. Chem. Phys. 153, 170143 (2020); arXiv:2008.01927.\n\"Stochastic differential equation approach to understanding the population control bias in full configuration interaction quantum Monte Carlo\", J. Brand, M. Yang, E. Pahl, arXiv:2103.07800 (2021).","category":"page"},{"location":"index.html","page":"Guide","title":"Guide","text":"Papers discussing results obtained with Rimu:","category":"page"},{"location":"index.html","page":"Guide","title":"Guide","text":"\"Polaron-Depleton Transition in the Yrast Excitations of a One-Dimensional Bose Gas with a Mobile Impurity\", M. Yang, M. Čufar, E. Pahl, J. Brand, Condens. Matter 7, 15 (2022).\n\"Magnetic impurity in a one-dimensional few-fermion system\", L. Rammelmüller, D. Huber, M. Čufar, J. Brand, A. Volosniev, arXiv:2204.01606 (2022).","category":"page"},{"location":"dictvectors.html#Module-DictVectors","page":"Dict vectors","title":"Module DictVectors","text":"","category":"section"},{"location":"dictvectors.html","page":"Dict vectors","title":"Dict vectors","text":"DictVectors\nAbstractDVec","category":"page"},{"location":"dictvectors.html#Rimu.DictVectors","page":"Dict vectors","title":"Rimu.DictVectors","text":"Module that provides concrete implementations of the AbstractDVec interface.\n\nDVec: basic AbstractDVec\nPDVec: parallel AbstractDVec with MPI and initiator support\nInitiatorDVec: allows storing information about initiator status\n\nSee Interfaces.\n\n\n\n\n\n","category":"module"},{"location":"dictvectors.html#Rimu.Interfaces.AbstractDVec","page":"Dict vectors","title":"Rimu.Interfaces.AbstractDVec","text":"AbstractDVec{K,V}\n\nAbstract data type for vector-like data structures with sparse storage. While conceptually AbstractDVecs represent elements of a vector space over a scalar type V, they are indexed by an arbitrary type K (could be non-integers) similar to dictionaries. They support the interface from VectorInterface.jl and are designed to work well for quantum Monte Carlo with ProjectorMonteCarloProblem and for matrix-free linear algebra with KrylovKit.\n\nConcrete implementations are available as PDVec, DVec, and InitiatorDVec.\n\nAbstractDVecs have a StochasticStyle which selects the spawning algorithm in FCIQMC. Looking up an element that is not stored in the AbstractDVec should return a zero, and setting a value to zero should remove it from the vector. To iterate over an AbstractDVec, use keys, pairs, or values. When possible, use reduction functions such as sum or mapreduce.\n\nInterface\n\nThe interface is similar to the AbstractDict interface, but with the changed behaviour as noted above.  Implement what would be needed for the AbstractDict interface (pairs, keys, values, setindex!, getindex, delete!, length, empty, empty!) and, in addition:\n\nStochasticStyle\nstorage returns an AbstractDict storing the raw data with possibly different valtype than V.\ndeposit!\n\nA default implementation for the VectorInterface.jl interface is provided through the above functions.\n\nSee also DictVectors, Interfaces.\n\n\n\n\n\n","category":"type"},{"location":"dictvectors.html#Concrete-implementations","page":"Dict vectors","title":"Concrete implementations","text":"","category":"section"},{"location":"dictvectors.html","page":"Dict vectors","title":"Dict vectors","text":"DVec\nInitiatorDVec\nPDVec","category":"page"},{"location":"dictvectors.html#Rimu.DictVectors.DVec","page":"Dict vectors","title":"Rimu.DictVectors.DVec","text":"DVec{K,V,D<:AbstractDict{K,V},S}\n\nDictionary-based vector-like data structure for use with FCIQMC and KrylovKit. While mostly behaving like a Dict, it supports various linear algebra operations such as norm and dot. It has a StochasticStyle that is used to select an appropriate spawning strategy in the FCIQMC algorithm.\n\nSee also: AbstractDVec, InitiatorDVec, PDVec.\n\nConstructors\n\nDVec(dict::AbstractDict[; style, capacity]): create a DVec with dict for storage. Note that the data may or may not be copied.\nDVec(args...[; style, capacity]): args... are passed to the Dict constructor. The Dict is used for storage.\nDVec{K,V}([; style, capacity]): create an empty DVec{K,V}.\nDVec(dv::AbstractDVec[; style, capacity]): create a DVec with the same contents as  adv. The style is inherited from dv by default.\n\nThe default style is selected based on the DVec's valtype (see default_style). If a style is given and the valtype does not match the style's eltype, the values are converted to an appropriate type.\n\nThe capacity argument is optional and sets the initial size of the DVec via Base.sizehint!.\n\nExamples\n\njulia> dv = DVec(:a => 1)\nDVec{Symbol,Int64} with 1 entry, style = IsStochasticInteger{Int64}()\n  :a => 1\n\njulia> dv = DVec(:a => 2, :b => 3; style=IsDeterministic())\nDVec{Symbol,Float64} with 2 entries, style = IsDeterministic{Float64}()\n  :a => 2.0\n  :b => 3.0\n\n\n\n\n\n","category":"type"},{"location":"dictvectors.html#Rimu.DictVectors.InitiatorDVec","page":"Dict vectors","title":"Rimu.DictVectors.InitiatorDVec","text":"InitiatorDVec{K,V} <: AbstractDVec{K,V}\n\nDictionary-based vector-like data structure for use with ProjectorMonteCarloProblem and KrylovKit.jl. See AbstractDVec. Functionally identical to DVec, but contains InitiatorValues internally in order to facilitate initiator methods. Initiator methods for controlling the Monte Carlo sign problem were first introduced in J. Chem. Phys. 132, 041103 (2010). How the initiators are handled is controlled by specifying an InitiatorRule with the initiator keyword argument (see below).\n\nSee also: AbstractDVec, DVec, PDVec.\n\nConstructors\n\nInitiatorDVec(dict::AbstractDict[; style, initiator, capacity]): create an InitiatorDVec with dict for storage.  Note that the data may or may not be copied.\nInitiatorDVec(args...[; style, initiator, capacity]): args... are passed to the Dict constructor. The Dict is used for storage.\nInitiatorDVec{K,V}([; style, initiator, capacity]): create an empty InitiatorDVec{K,V}.\nInitiatorDVec(dv::AbstractDVec[; style, initiator, capacity]): create an InitiatorDVec  with the same contents as dv. The style is inherited from dv by default.\n\nKeyword  arguments\n\nstyle: A valid StochasticStyle.  The default is selected based on the InitiatorDVec's valtype (see default_style). If a style is given and the valtype does not match the style's eltype, the values are converted to an appropriate type.\ninitiator = Initiator(1): A valid InitiatorRule. See Initiator.\ncapacity: Indicative size as Int. Optional. Sets the initial size of the InitiatorDVec via Base.sizehint!.\n\n\n\n\n\n","category":"type"},{"location":"dictvectors.html#Rimu.DictVectors.PDVec","page":"Dict vectors","title":"Rimu.DictVectors.PDVec","text":"PDVec{K,V}(; kwargs...)\nPDVec(iter; kwargs...)\nPDVec(pairs...; kwargs...)\n\nDictionary-based vector-like data structure for use with FCIQMC and KrylovKit.jl. While mostly behaving like a Dict, it supports various linear algebra operations such as norm and dot, and the interface defined in VectorInterface.\n\nThe P in PDVec stands for parallel. PDVecs perform mapreduce, foreach, and various linear algebra operations in a threaded manner. If MPI is available, these operations are automatically distributed as well. As such it is not recommended to iterate over pairs, keys, or values directly unless explicitly performing them on the localpart of the vector.\n\nSee also: AbstractDVec, DVec, InitiatorDVec.\n\nKeyword arguments\n\nstyle =default_style(V): A StochasticStyle that is used to select the spawning strategy in the FCIQMC algorithm.\ninitiator =NonInitiator(): An InitiatorRule, used in FCIQMC to remove the sign problem.\ncommunicator: A Communicator that controls how operations are performed when using MPI. The defaults are NotDistributed when not using MPI and AllToAll when using MPI.\n\nExtended Help\n\nSegmentation\n\nThe vector is split into Threads.nthreads() subdictionaries called segments. Which dictionary a key-value pair is mapped to is determined by the hash of the key. The purpose of this segmentation is to allow parallel processing - functions such as mapreduce, add! or dot (full list below) process each subdictionary on a separate thread.\n\nSee also PDWorkingMemory.\n\nExample\n\njulia> add = FermiFS2C((1,1,0,0), (0,0,1,1));\n\njulia> op = HubbardMom1D(add; t=4/π^2, u=4);\n\njulia> pv = PDVec(add => 1.0)\n1-element PDVec: style = IsDeterministic{Float64}()\n  fs\"|↑↑↓↓⟩\" => 1.0\n\njulia> pv = op * pv\n7-element PDVec: style = IsDeterministic{Float64}()\n  fs\"|↑↓↑↓⟩\" => 1.0\n  fs\"|↑↑↓↓⟩\" => 4.0\n  fs\"|↓↑↓↑⟩\" => 1.0\n  fs\"|↓↑↑↓⟩\" => -1.0\n  fs\"|⇅⋅⋅⇅⟩\" => 1.0\n  fs\"|↑↓↓↑⟩\" => -1.0\n  fs\"|⋅⇅⇅⋅⟩\" => 1.0\n\njulia> scale!(pv, -1); pv\n7-element PDVec: style = IsDeterministic{Float64}()\n  fs\"|↑↓↑↓⟩\" => -1.0\n  fs\"|↑↑↓↓⟩\" => -4.0\n  fs\"|↓↑↓↑⟩\" => -1.0\n  fs\"|↓↑↑↓⟩\" => 1.0\n  fs\"|⇅⋅⋅⇅⟩\" => -1.0\n  fs\"|↑↓↓↑⟩\" => 1.0\n  fs\"|⋅⇅⇅⋅⟩\" => -1.0\n\njulia> dest = similar(pv)\n0-element PDVec: style = IsDeterministic{Float64}()\n\njulia> map!(x -> x + 2, dest, values(pv))\n7-element PDVec: style = IsDeterministic{Float64}()\n  fs\"|↑↓↑↓⟩\" => 1.0\n  fs\"|↑↑↓↓⟩\" => -2.0\n  fs\"|↓↑↓↑⟩\" => 1.0\n  fs\"|↓↑↑↓⟩\" => 3.0\n  fs\"|⇅⋅⋅⇅⟩\" => 1.0\n  fs\"|↑↓↓↑⟩\" => 3.0\n  fs\"|⋅⇅⇅⋅⟩\" => 1.0\n\njulia> sum(values(pv))\n-6.0\n\njulia> dot(dest, pv)\n10.0\n\njulia> dot(dest, op, pv)\n44.0\n\nMPI\n\nWhen MPI is active, all parallel reductions are automatically reduced across MPI ranks with a call to MPI.Allreduce!.\n\nIn a distributed setting, PDVec does not support iteration without first making it explicit the iteration is only to be performed on the local segments of the vector. This is done with localpart. In general, even when not using MPI, it is best practice to use localpart when explicit iteration is required.\n\nUse with KrylovKit\n\nPDVec is compatible with eigsolve from KrylovKit.jl. When used, the diagonalisation is performed in a threaded and distributed manner. Using multiple MPI ranks with this method does not distribute the memory load effectively, but does result in significant speedups.\n\nExample\n\njulia> using KrylovKit\n\njulia> add = BoseFS((0,0,5,0,0));\n\njulia> op = HubbardMom1D(add; u=6.0);\n\njulia> pv = PDVec(add => 1.0);\n\njulia> results = eigsolve(op, pv, 4, :SR);\n\njulia> results[1][1:4]\n4-element Vector{Float64}:\n -3.4311156892322234\n  1.1821748602612363\n  3.7377753753082823\n  6.996390417443125\n\nParallel functionality\n\nThe following functions are threaded and MPI-compatible:\n\nFrom Base: mapreduce and derivatives (sum, prod, reduce...), all, any,map! (on values only), +, -, *\nFrom LinearAlgebra: rmul!, lmul!, mul!, axpy!, axpby!, dot, norm, normalize, normalize!\nThe full interface defined in VectorInterface.jl\n\n\n\n\n\n","category":"type"},{"location":"dictvectors.html#Interface-functions","page":"Dict vectors","title":"Interface functions","text":"","category":"section"},{"location":"dictvectors.html","page":"Dict vectors","title":"Dict vectors","text":"deposit!\nstorage\nfreeze\nlocalpart\napply_operator!\nsort_into_targets!\nworking_memory","category":"page"},{"location":"dictvectors.html#Rimu.Interfaces.deposit!","page":"Dict vectors","title":"Rimu.Interfaces.deposit!","text":"deposit!(w::InitiatorDVec, add, val, p_add=>p_val)\n\nAdd val into w at address add as an AbstractInitiatorValue.\n\n\n\n\n\ndeposit!(w::AbstractDVec, add, val, parent::Pair)\n\nAdd val into w at address add, taking into account initiator rules if applicable. parent contains the address => value pair from which the pair add => val was created. InitiatorDVec can intercept this and add its own functionality.\n\n\n\n\n\n","category":"function"},{"location":"dictvectors.html#Rimu.Interfaces.storage","page":"Dict vectors","title":"Rimu.Interfaces.storage","text":"storage(dvec) -> AbstractDict\n\nReturn the raw storage associated with dvec as an AbstractDict. Used in MPI communication.\n\n\n\n\n\n","category":"function"},{"location":"dictvectors.html#OrderedCollections.freeze","page":"Dict vectors","title":"OrderedCollections.freeze","text":"freeze(dv)\n\nCreate a \"frozen\" version of dv which can no longer be modified or used in the conventional manner, but supports faster dot products.\n\nIf dv is an MPIData, synchronize its contents among the ranks first.\n\n\n\n\n\n","category":"function"},{"location":"dictvectors.html#Rimu.Interfaces.localpart","page":"Dict vectors","title":"Rimu.Interfaces.localpart","text":"localpart(dv) -> AbstractDVec\n\nGet the part of dv that is located on this MPI rank. Returns dv itself for vectors that can't be MPI distributed (DVecs and InitiatorDVecs).\n\n\n\n\n\n","category":"function"},{"location":"dictvectors.html#Rimu.Interfaces.apply_operator!","page":"Dict vectors","title":"Rimu.Interfaces.apply_operator!","text":"apply_operator!(working_memory, target, source, operator, boost=1, compress=Val(true)) ->\n    stat_names, stats, working_memory, target\n\nPerform a single matrix(/operator)-vector multiplication:\n\nv^(n + 1) = hatT v^(n) \n\nwhere hatT is the operator, v^(n+1) is the target and v^(n) is the source. The working_memory can be used as temporary storage.\n\nThe boost argument is passed to apply_column! and increases the number of spawns performed. For the operator to be applied without compressing the vector after, set compress to Val(false).\n\nWhether the operation is performed in a stochastic, semistochastic, or determistic way is controlled by the trait StochasticStyle(target). See StochasticStyle.\n\nReturns the step stats generated by the StochasticStyle, the working memory and the target vector. target and working_memory may be mutated and/or swapped.\n\n\n\n\n\n","category":"function"},{"location":"dictvectors.html#Rimu.Interfaces.sort_into_targets!","page":"Dict vectors","title":"Rimu.Interfaces.sort_into_targets!","text":"sort_into_targets!(target, source, stats) -> target, source, agg_stats\n\nAggregate coefficients from source to target and from stats to agg_stats according to thread- or MPI-level parallelism.\n\nReturns the new target and source, as the sorting process may involve swapping them.\n\n\n\n\n\n","category":"function"},{"location":"dictvectors.html#Rimu.Interfaces.working_memory","page":"Dict vectors","title":"Rimu.Interfaces.working_memory","text":"working_memory(dv::AbstractDVec)\n\nCreate a working memory instance compatible with dv. The working memory must be compatible with sort_into_targets! and apply_operator!.\n\n\n\n\n\n","category":"function"},{"location":"dictvectors.html#Supported-operations","page":"Dict vectors","title":"Supported operations","text":"","category":"section"},{"location":"dictvectors.html","page":"Dict vectors","title":"Dict vectors","text":"AbstractDVecs generally support most operations that are defined on Vectors and Dicts. This includes the interface from VectorInterface.jl, and many functions from the LinearAlgebra standard library.","category":"page"},{"location":"dictvectors.html","page":"Dict vectors","title":"Dict vectors","text":"A significant difference between AbstractDVecs, Vectors, and Dicts, is that iteration on them is disabled by default. Iteration must be explicitly performed on keys, values, or pairs, however, it is highly recommended you use mapreduce, reduce, or similar functions when performing reductions, as that will make the operations compatible with MPI.","category":"page"},{"location":"dictvectors.html","page":"Dict vectors","title":"Dict vectors","text":"In addition, Rimu defines the following function.","category":"page"},{"location":"dictvectors.html","page":"Dict vectors","title":"Dict vectors","text":"walkernumber\nwalkernumber_and_length\ndot_from_right","category":"page"},{"location":"dictvectors.html#Rimu.DictVectors.walkernumber","page":"Dict vectors","title":"Rimu.DictVectors.walkernumber","text":"walkernumber(md::MPIData)\n\nCompute the walkernumber of the distributed data on every MPI rank with MPI.Allreduce. MPI syncronizing.\n\n\n\n\n\nwalkernumber(v)\n\nCompute the number of walkers in v. It is used for updating the shift. Overload this function for modifying population control.\n\nIn most cases walkernumber(v) is identical to norm(v, 1). For AbstractDVecs with complex coefficients it reports the one norm separately for the real and the imaginary part as a ComplexF64. See Norm1ProjectorPPop.\n\n\n\n\n\n","category":"function"},{"location":"dictvectors.html#Rimu.DictVectors.walkernumber_and_length","page":"Dict vectors","title":"Rimu.DictVectors.walkernumber_and_length","text":"walkernumber_and_length(v)\n\nCompute walkernumber and length at the same time. When MPI is used, this is more efficient than calling them separately.\n\n\n\n\n\n","category":"function"},{"location":"dictvectors.html#Rimu.Interfaces.dot_from_right","page":"Dict vectors","title":"Rimu.Interfaces.dot_from_right","text":"dot_from_right(w, op::AbstractObservable, v)\n\nInternal function evaluates the 3-argument dot() function in order from right to left.\n\n\n\n\n\n","category":"function"},{"location":"dictvectors.html#Projectors","page":"Dict vectors","title":"Projectors","text":"","category":"section"},{"location":"dictvectors.html","page":"Dict vectors","title":"Dict vectors","text":"AbstractProjector\nNormProjector\nNorm2Projector\nUniformProjector\nNorm1ProjectorPPop\nRimu.DictVectors.FrozenDVec\nRimu.DictVectors.FrozenPDVec","category":"page"},{"location":"dictvectors.html#Rimu.DictVectors.AbstractProjector","page":"Dict vectors","title":"Rimu.DictVectors.AbstractProjector","text":"Abstract supertype for projectors to be used in in lieu of DVecs or Vectors in dot products. Implemented subtypes:\n\nUniformProjector\nNormProjector\nNorm2Projector\nNorm1ProjectorPPop\n\nSee also PostStepStrategy for use of projectors in ProjectorMonteCarloProblem.\n\nInterface\n\nDefine a method for LinearAlgebra.dot(projector, v).\n\n\n\n\n\n","category":"type"},{"location":"dictvectors.html#Rimu.DictVectors.NormProjector","page":"Dict vectors","title":"Rimu.DictVectors.NormProjector","text":"NormProjector() <: AbstractProjector\n\nResults in computing the one-norm when used in dot(). E.g.\n\ndot(NormProjector(),x)\n-> norm(x,1)\n\nNormProjector() thus represents the vector sign.(x).\n\nSee also PostStepStrategy, and AbstractProjector for use of projectors in ProjectorMonteCarloProblem.\n\n\n\n\n\n","category":"type"},{"location":"dictvectors.html#Rimu.DictVectors.Norm2Projector","page":"Dict vectors","title":"Rimu.DictVectors.Norm2Projector","text":"Norm2Projector() <: AbstractProjector\n\nResults in computing the two-norm when used in dot(). E.g.\n\ndot(NormProjector(),x)\n-> norm(x,2) # with type Float64\n\nSee also PostStepStrategy, and AbstractProjector for use of projectors in ProjectorMonteCarloProblem.\n\n\n\n\n\n","category":"type"},{"location":"dictvectors.html#Rimu.DictVectors.UniformProjector","page":"Dict vectors","title":"Rimu.DictVectors.UniformProjector","text":"UniformProjector() <: AbstractProjector\n\nRepresents a vector with all elements 1. To be used with dot(). Minimizes memory allocations.\n\nUniformProjector()⋅v == sum(v)\ndot(UniformProjector(), LO, v) == sum(LO*v)\n\nSee also PostStepStrategy, and AbstractProjector for use of projectors in ProjectorMonteCarloProblem.\n\n\n\n\n\n","category":"type"},{"location":"dictvectors.html#Rimu.DictVectors.Norm1ProjectorPPop","page":"Dict vectors","title":"Rimu.DictVectors.Norm1ProjectorPPop","text":"Norm1ProjectorPPop() <: AbstractProjector\n\nResults in computing the one-norm per population when used in dot(). E.g.\n\ndot(Norm1ProjectorPPop(),x)\n-> norm(real.(x),1) + im*norm(imag.(x),1)\n\nSee also PostStepStrategy, and AbstractProjector for use of projectors in ProjectorMonteCarloProblem.\n\n\n\n\n\n","category":"type"},{"location":"dictvectors.html#Rimu.DictVectors.FrozenDVec","page":"Dict vectors","title":"Rimu.DictVectors.FrozenDVec","text":"FrozenDVec\n\nA frozen DVec(s) can't be modified or used in the conventional manner, but support faster dot products. See: freeze.\n\n\n\n\n\n","category":"type"},{"location":"dictvectors.html#Rimu.DictVectors.FrozenPDVec","page":"Dict vectors","title":"Rimu.DictVectors.FrozenPDVec","text":"FrozenPDVec\n\nParallel version of FrozenDVec. See: freeze, PDVec.\n\n\n\n\n\n","category":"type"},{"location":"dictvectors.html#Initiator-rules","page":"Dict vectors","title":"Initiator rules","text":"","category":"section"},{"location":"dictvectors.html","page":"Dict vectors","title":"Dict vectors","text":"Rimu.DictVectors.InitiatorRule\nRimu.DictVectors.AbstractInitiatorValue\nRimu.DictVectors.InitiatorValue\nRimu.DictVectors.initiator_valtype\nRimu.DictVectors.to_initiator_value\nRimu.DictVectors.from_initiator_value\nRimu.DictVectors.Initiator\nRimu.DictVectors.SimpleInitiator\nRimu.DictVectors.CoherentInitiator\nRimu.DictVectors.NonInitiator\nRimu.DictVectors.NonInitiatorValue","category":"page"},{"location":"dictvectors.html#Rimu.DictVectors.InitiatorRule","page":"Dict vectors","title":"Rimu.DictVectors.InitiatorRule","text":"InitiatorRule{V}\n\nAbstract type for defining initiator rules for InitiatorDVec. Concrete implementations:\n\nInitiator\nSimpleInitiator\nCoherentInitiator\nNonInitiator\n\nExtended Help\n\nInitiatorRules define how to store and retrieve data from associated AbstractInitiatorValues. When defining a new InitiatorRule, also define the following:\n\ninitiator_valtype\nfrom_initiator_value\nto_initiator_value\n\n\n\n\n\n","category":"type"},{"location":"dictvectors.html#Rimu.DictVectors.AbstractInitiatorValue","page":"Dict vectors","title":"Rimu.DictVectors.AbstractInitiatorValue","text":"abstract type AbstractInitiatorValue{V}\n\nA value equipped with additional information that enables a variation of the initiator approximation. To be used with PDVec, InitiatorDVec and InitiatorRules.\n\nMust define:\n\nBase.zero, Base.:+, Base.:-, Base.:*\nfrom_initiator_value and to_initiator_value\n\n\n\n\n\n","category":"type"},{"location":"dictvectors.html#Rimu.DictVectors.InitiatorValue","page":"Dict vectors","title":"Rimu.DictVectors.InitiatorValue","text":"InitiatorValue{V}(; safe::V, unsafe::V, initiator::V) where V\n\nComposite \"walker\" with three fields. For use with InitiatorDVecs.\n\n\n\n\n\n","category":"type"},{"location":"dictvectors.html#Rimu.DictVectors.initiator_valtype","page":"Dict vectors","title":"Rimu.DictVectors.initiator_valtype","text":"initiator_valtype(rule::InitiatorRule, T)\n\nReturn the AbstractInitiatorValue{T} that is employed by the rule.\n\n\n\n\n\n","category":"function"},{"location":"dictvectors.html#Rimu.DictVectors.to_initiator_value","page":"Dict vectors","title":"Rimu.DictVectors.to_initiator_value","text":"to_initiator_value(::InitiatorRule, k::K, v::V, parent)\n\nConvert v to an AbstractInitiatorValue, taking the initiator rule and the parent that spawned it into account.\n\n\n\n\n\n","category":"function"},{"location":"dictvectors.html#Rimu.DictVectors.from_initiator_value","page":"Dict vectors","title":"Rimu.DictVectors.from_initiator_value","text":"from_initiator_value(i::InitiatorRule, v::AbstractInitiatorValue)\n\nConvert the AbstractInitiatorValue v into a scalar value according to the InitiatorRule i.\n\n\n\n\n\n","category":"function"},{"location":"dictvectors.html#Rimu.DictVectors.Initiator","page":"Dict vectors","title":"Rimu.DictVectors.Initiator","text":"Initiator(threshold = 1.0) <: InitiatorRule\n\nInitiator rule to be passed to PDVec or InitiatorDVec. An initiator is a configuration add with a coefficient with magnitude abs(v[add]) > threshold. The threshold can be passed as a keyword argument. Rules:\n\nInitiators can spawn anywhere.\nNon-initiators can spawn to initiators.\n\nSee InitiatorRule.\n\n\n\n\n\n","category":"type"},{"location":"dictvectors.html#Rimu.DictVectors.SimpleInitiator","page":"Dict vectors","title":"Rimu.DictVectors.SimpleInitiator","text":"SimpleInitiator(threshold = 1.0) <: InitiatorRule\n\nInitiator rule to be passed to PDVec or InitiatorDVec. An initiator is a configuration add with a coefficient with magnitude abs(v[add]) > threshold. The threshold can be passed as a keyword argument. Rules:\n\nInitiators can spawn anywhere.\nNon-initiators cannot spawn.\n\nSee InitiatorRule.\n\n\n\n\n\n","category":"type"},{"location":"dictvectors.html#Rimu.DictVectors.CoherentInitiator","page":"Dict vectors","title":"Rimu.DictVectors.CoherentInitiator","text":"CoherentInitiator(threshold = 1.0) <: InitiatorRule\n\nInitiator rule to be passed to PDVec or InitiatorDVec. An initiator is a configuration add with a coefficient with magnitude abs(v[add]) > threshold. The threshold can be passed as a keyword argument. Rules:\n\nInitiators can spawn anywhere.\nNon-initiators can spawn to initiators.\nMultiple non-initiators can spawn to a single non-initiator if their contributions add up to a value greater than the initiator threshold.\n\nSee InitiatorRule.\n\n\n\n\n\n","category":"type"},{"location":"dictvectors.html#Rimu.DictVectors.NonInitiator","page":"Dict vectors","title":"Rimu.DictVectors.NonInitiator","text":"NonInitiator() <: InitiatorRule\n\nInitiator rule that disables the approximation. This is the default setting for PDVec.\n\nSee InitiatorRule.\n\n\n\n\n\n","category":"type"},{"location":"dictvectors.html#Rimu.DictVectors.NonInitiatorValue","page":"Dict vectors","title":"Rimu.DictVectors.NonInitiatorValue","text":"NonInitiatorValue{V}\n\nValue that does not contain any additional information - used with NonInitiator, the default initiator rule for PDVec.\n\n\n\n\n\n","category":"type"},{"location":"dictvectors.html#PDVec-internals","page":"Dict vectors","title":"PDVec internals","text":"","category":"section"},{"location":"dictvectors.html#Working-memory","page":"Dict vectors","title":"Working memory","text":"","category":"section"},{"location":"dictvectors.html","page":"Dict vectors","title":"Dict vectors","text":"Modules = [DictVectors]\nPages = [\"pdworkingmemory.jl\"]","category":"page"},{"location":"dictvectors.html#Rimu.DictVectors.FirstColumnIterator","page":"Dict vectors","title":"Rimu.DictVectors.FirstColumnIterator","text":"FirstColumnIterator{W,D} <: AbstractVector{D}\n\nIterates segments in the first column of a working memory that belong to a specified rank.\n\nSee PDWorkingMemory, remote_segments and local_segments.\n\n\n\n\n\n","category":"type"},{"location":"dictvectors.html#Rimu.DictVectors.PDWorkingMemory","page":"Dict vectors","title":"Rimu.DictVectors.PDWorkingMemory","text":"PDWorkingMemory(t::PDVec)\n\nThe working memory that handles threading and MPI distribution for operations that involve operators, such as FCIQMC propagation, operator-vector multiplication and three-way dot products with PDVecs.\n\nThe working memory is structured as a two-dimensional array of segments, which themselves are Dicts (see PDVec). The number of rows in this array is equal to the number of segments across all MPI ranks (covering the entire address space), while the number of columns corresponds to the number of segments in the current MPI rank (i.e. column corresponds to the part of the address space that is local to the current rank).\n\nThe purpose of this organisation is to allow spawning in parallel without using locks or atomic operations. The spawning is performed by applying the following sequence of operations:\n\nperform_spawns!: each segment in the PDVec is multiplied by the operator independently, with the results being stored in a column of the working memory.\ncollect_local!: the rows of the working memory are summed to the first column.\nsynchronize_remote!: the segments corresponding to other MPI ranks are distributed and transferred to the first column.\nmove_and_compress!: the results are stochastically compressed and moved to the result PDVec\n\nWhen used with three-argument dot products, a full copy of the left-hand side vector is materialized in the first column of the working memory on all ranks.\n\n\n\n\n\n","category":"type"},{"location":"dictvectors.html#Rimu.DictVectors.PDWorkingMemoryColumn","page":"Dict vectors","title":"Rimu.DictVectors.PDWorkingMemoryColumn","text":"PDWorkingMemoryColumn\n\nA column in PDWorkingMemory. Supports getindex, deposit! and StochasticStyle and acts as a target for spawning. Can be used as a target in a three-way dot-product.\n\n\n\n\n\n","category":"type"},{"location":"dictvectors.html#Rimu.DictVectors.collect_local!-Tuple{PDWorkingMemory}","page":"Dict vectors","title":"Rimu.DictVectors.collect_local!","text":"collect_local!(w::PDWorkingMemory)\n\nSum each row in w and store the result in the first column. This step must be performed before using local_segments or remote_segments to move the values elsewhere.\n\nSee PDWorkingMemory.\n\n\n\n\n\n","category":"method"},{"location":"dictvectors.html#Rimu.DictVectors.first_column-Union{Tuple{PDWorkingMemory{K, V, W, S}}, Tuple{S}, Tuple{W}, Tuple{V}, Tuple{K}} where {K, V, W, S}","page":"Dict vectors","title":"Rimu.DictVectors.first_column","text":"first_column(::PDWorkingMemory)\n\nReturn the first column of the working memory. This is where the vectors are collected with collect_local!, synchronize_remote!, copy_to_local!.\n\nSee PDWorkingMemory.\n\n\n\n\n\n","category":"method"},{"location":"dictvectors.html#Rimu.DictVectors.local_segments-Tuple{PDWorkingMemory}","page":"Dict vectors","title":"Rimu.DictVectors.local_segments","text":"local_segments(w::PDWorkingMemory)\n\nReturns iterator over the segments in the first column of w on the current rank. Iterates Dicts.\n\nSee PDWorkingMemory.\n\n\n\n\n\n","category":"method"},{"location":"dictvectors.html#Rimu.DictVectors.move_and_compress!-Tuple{PDVec, PDWorkingMemory}","page":"Dict vectors","title":"Rimu.DictVectors.move_and_compress!","text":"move_and_compress!(dst::PDVec, src::PDWorkingMemory)\nmove_and_compress!(::CompressionStrategy, dst::PDVec, src::PDWorkingMemory)\n\nMove the values in src to dst, compressing the according to the CompressionStrategy on the way. This step can only be performed after collect_local! and synchronize_remote!.\n\nSee PDWorkingMemory.\n\n\n\n\n\n","category":"method"},{"location":"dictvectors.html#Rimu.DictVectors.num_columns-Tuple{PDWorkingMemory}","page":"Dict vectors","title":"Rimu.DictVectors.num_columns","text":"num_columns(w::PDWorkingMemory) -> Int\n\nNumber of columns in the working memory. The number of rows is equal to the number of segments in the local MPI rank.\n\nSee PDWorkingMemory.\n\n\n\n\n\n","category":"method"},{"location":"dictvectors.html#Rimu.DictVectors.num_rows-Tuple{PDWorkingMemory}","page":"Dict vectors","title":"Rimu.DictVectors.num_rows","text":"num_rows(w::PDWorkingMemory) -> Int\n\nNumber of rows in the working memory. The number of rows is equal to the number of segments accross all MPI ranks.\n\nSee PDWorkingMemory.\n\n\n\n\n\n","category":"method"},{"location":"dictvectors.html#Rimu.DictVectors.perform_spawns!-Tuple{PDWorkingMemory, PDVec, Any, Any}","page":"Dict vectors","title":"Rimu.DictVectors.perform_spawns!","text":"perform_spawns!(w::PDWorkingMemory, v::PDVec, ham, boost)\n\nPerform spawns from v through ham to w. boost increases the number of spawns without affecting the expectation value of the process.\n\nSee PDVec and PDWorkingMemory.\n\n\n\n\n\n","category":"method"},{"location":"dictvectors.html#Rimu.DictVectors.remote_segments-Tuple{PDWorkingMemory, Any}","page":"Dict vectors","title":"Rimu.DictVectors.remote_segments","text":"remote_segments(w::PDWorkingMemory, rank_id)\n\nReturns iterator over the segments in the first column of w that belong to rank rank_id. Iterates Dicts.\n\nSee PDWorkingMemory.\n\n\n\n\n\n","category":"method"},{"location":"dictvectors.html#Rimu.DictVectors.synchronize_remote!-Tuple{PDWorkingMemory}","page":"Dict vectors","title":"Rimu.DictVectors.synchronize_remote!","text":"synchronize_remote!([::Communicator,] w::PDWorkingMemory) -> names, values\n\nSynchronize non-local segments across MPI and add the results to the first column. Controlled by the Communicator. This can only be perfomed after collect_local!.\n\nShould return a Tuple of names and a Tuple of values to report.\n\nSee PDWorkingMemory.\n\n\n\n\n\n","category":"method"},{"location":"dictvectors.html#Communicators","page":"Dict vectors","title":"Communicators","text":"","category":"section"},{"location":"dictvectors.html","page":"Dict vectors","title":"Dict vectors","text":"Modules = [DictVectors]\nPages = [\"communicators.jl\"]","category":"page"},{"location":"dictvectors.html#Rimu.DictVectors.AllToAll","page":"Dict vectors","title":"Rimu.DictVectors.AllToAll","text":"AllToAll{K,V}(; mpi_comm, n_segments, report) <: Communicator\n\nCommunicator that uses collective communication using MPI.Alltoall[v]!.\n\nKeyword arguments\n\nmpi_comm=MPI.COMM_WORLD: the MPI communicator to use.\nn_segments=Threads.nthreads(): the number of segments per rank to use. Should match the PDVec the communicator is used with.\nreport=false: if set to true, report MPI communication times during a projector Monte Carlo run.\n\nSee also: Communicator.\n\n\n\n\n\n","category":"type"},{"location":"dictvectors.html#Rimu.DictVectors.Communicator","page":"Dict vectors","title":"Rimu.DictVectors.Communicator","text":"abstract type Communicator\n\nCommunicators are used to handle MPI communication when using PDVecs. Currently, three implementations are provided, NotDistributed, AllToAll and PointToPoint. The communicator is picked automatically according to the number of MPI ranks available.\n\nWhen implementing a communicator, use local_segments and remote_segments.\n\nInterface\n\nsynchronize_remote!\nmpi_rank\nmpi_size\nmpi_comm\n\nOptional interface\n\nis_distributed: defaults to returning true.\nmerge_remote_reductions: defaults to using MPI.Allreduce.\ntotal_num_segments: defaults to n * mpi_size.\ntarget_segment: defaults to selecting using fastrange  to pick the segment.\n\nSee also: PDVec, PDWorkingMemory.\n\n\n\n\n\n","category":"type"},{"location":"dictvectors.html#Rimu.DictVectors.LocalPart","page":"Dict vectors","title":"Rimu.DictVectors.LocalPart","text":"LocalPart <: Communicator\n\nWhen localpart is used, the vector's Communicator is replaced with this. This allows iteration and local reductions.\n\n\n\n\n\n","category":"type"},{"location":"dictvectors.html#Rimu.DictVectors.NestedSegmentedBuffer","page":"Dict vectors","title":"Rimu.DictVectors.NestedSegmentedBuffer","text":"NestedSegmentedBuffer{T}(nrows) <: AbstractMatrix{AbstractVector{T}}\n\nMatrix of vectors stored in a single buffer with collective MPI communication support. The number of rows in the matrix is fixed to nrows.\n\nUsed in the AllToAll communication strategy, where each column corresponds to an MPI rank and each row corresponds to a segment in the PDVec.\n\nSupported operations\n\nappend_collections!: add a column to the matrix.\nappend_empty_column!: add an empty column to the matrix.\nmpi_exchange_alltoall!: each rank sends the i-th column of the matrix to the (i-1)-st rank.\nmpi_exchange_allgather!: each rank sends the 1-st column of the matrix to all ranks.\n\nSee also: SegmentedBuffer.\n\n\n\n\n\n","category":"type"},{"location":"dictvectors.html#Rimu.DictVectors.NotDistributed","page":"Dict vectors","title":"Rimu.DictVectors.NotDistributed","text":"NotDistributed <: Communicator\n\nThis Communicator is used when MPI is not available.\n\n\n\n\n\n","category":"type"},{"location":"dictvectors.html#Rimu.DictVectors.PointToPoint","page":"Dict vectors","title":"Rimu.DictVectors.PointToPoint","text":"PointToPoint{K,V}(; mpi_comm, report) <: Communicator\n\nMPI Communicator that uses circular communication using MPI.Isend and MPI.Recv!.\n\nKeyword arguments\n\nmpi_comm=MPI.COMM_WORLD: the MPI communicator to use.\nreport=false: if set to true, report MPI communication times during a projector Monte Carlo run.\n\n\n\n\n\n","category":"type"},{"location":"dictvectors.html#Rimu.DictVectors.SegmentedBuffer","page":"Dict vectors","title":"Rimu.DictVectors.SegmentedBuffer","text":"SegmentedBuffer{T}() <: AbstractVector{AbstractVector{T}}\n\nBehaves like a vector of vectors, but is stored in a single buffer. It can be sent/received over MPI keeping its structure intact. Used in the PointToPoint communication strategy.\n\nSupported operations\n\nreplace_collections!: insert data into the buffers\nmpi_send: send the contents of a buffer to a given rank\nmpi_recv_any!: receive a message sent by mpi_send from any rank, storing the contents in this buffer\n\nSee also: NestedSegmentedBuffer.\n\n\n\n\n\n","category":"type"},{"location":"dictvectors.html#Rimu.DictVectors.append_collections!-Tuple{Rimu.DictVectors.NestedSegmentedBuffer, Any}","page":"Dict vectors","title":"Rimu.DictVectors.append_collections!","text":"append_collections!(buf::NestedSegmentedBuffer, iters)\n\nAdd a column to buf. The length of iters should match buf.nrows.\n\nSee also: NestedSegmentedBuffer, append_empty_column!.\n\n\n\n\n\n","category":"method"},{"location":"dictvectors.html#Rimu.DictVectors.append_empty_column!-Tuple{Rimu.DictVectors.NestedSegmentedBuffer}","page":"Dict vectors","title":"Rimu.DictVectors.append_empty_column!","text":"append_empty_column!(buf::NestedSegmentedBuffer)\n\nLike append_collections!, but adds an empty column.\n\nSee also: NestedSegmentedBuffer, append_collections!.\n\n\n\n\n\n","category":"method"},{"location":"dictvectors.html#Rimu.DictVectors.copy_to_local!","page":"Dict vectors","title":"Rimu.DictVectors.copy_to_local!","text":"copy_to_local!([::Communicator,] w::PDWorkingMemory, t::PDVec) -> PDVec\n\nCopy pairs in t from all ranks and return them as a (possibly) new PDVec, possibly using the PDWorkingMemory as temporary storage.\n\nSee also: PDVec, PDWorkingMemory, Communicator.\n\n\n\n\n\n","category":"function"},{"location":"dictvectors.html#Rimu.DictVectors.is_distributed-Tuple{Rimu.DictVectors.Communicator}","page":"Dict vectors","title":"Rimu.DictVectors.is_distributed","text":"is_distributed(::Communicator)\n\nReturn true if Communicator operates over MPI.\n\n\n\n\n\n","category":"method"},{"location":"dictvectors.html#Rimu.DictVectors.merge_remote_reductions-Tuple{Rimu.DictVectors.Communicator, Any, Any}","page":"Dict vectors","title":"Rimu.DictVectors.merge_remote_reductions","text":"merge_remote_reductions(c::Communicator, op, x)\n\nMerge the results of reductions over MPI. By default, it uses MPI.Allreduce.\n\nSee also: Communicator.\n\n\n\n\n\n","category":"method"},{"location":"dictvectors.html#Rimu.DictVectors.mpi_comm","page":"Dict vectors","title":"Rimu.DictVectors.mpi_comm","text":"mpi_comm(::Communicator) -> MPI.Comm\n\nReturn the MPI.Comm that the Communicator operates on.\n\n\n\n\n\n","category":"function"},{"location":"dictvectors.html#Rimu.DictVectors.mpi_exchange_allgather!-Tuple{Rimu.DictVectors.NestedSegmentedBuffer, Rimu.DictVectors.NestedSegmentedBuffer, Any}","page":"Dict vectors","title":"Rimu.DictVectors.mpi_exchange_allgather!","text":"mpi_exchange_allgather!(src::NestedSegmentedBuffer, dst::NestedSegmentedBuffer, comm)\n\nThe first and only column in src will be sent to all ranks. The data from all ranks will be gethered in dst. After this operation, dst will contain the same data on all ranks.\n\nSee also NestedSegmentedBuffer, mpi_exchange_alltoall!.\n\n\n\n\n\n","category":"method"},{"location":"dictvectors.html#Rimu.DictVectors.mpi_exchange_alltoall!-Tuple{Rimu.DictVectors.NestedSegmentedBuffer, Rimu.DictVectors.NestedSegmentedBuffer, Any}","page":"Dict vectors","title":"Rimu.DictVectors.mpi_exchange_alltoall!","text":"mpi_exchange_alltoall!(src::NestedSegmentedBuffer, dst::NestedSegmentedBuffer, comm)\n\nThe n-th column from src will be sent to rank n-1. The data sent from rank r will be stored in the (r+1)-st column of dst.\n\nSee also: NestedSegmentedBuffer, mpi_exchange_allgather!.\n\n\n\n\n\n","category":"method"},{"location":"dictvectors.html#Rimu.DictVectors.mpi_rank","page":"Dict vectors","title":"Rimu.DictVectors.mpi_rank","text":"mpi_rank(::Communicator) -> Int\n\nReturn the MPI rank of the Communicator.\n\n\n\n\n\n","category":"function"},{"location":"dictvectors.html#Rimu.DictVectors.mpi_recv_any!-Tuple{Rimu.DictVectors.SegmentedBuffer, Any}","page":"Dict vectors","title":"Rimu.DictVectors.mpi_recv_any!","text":"mpi_recv_any!(buf::SegmentedBuffer, comm::MPI_Comm) -> Int\n\nFind a source that is ready to send a buffer and receive from it. Return the rank ID of the sender.\n\n\n\n\n\n","category":"method"},{"location":"dictvectors.html#Rimu.DictVectors.mpi_send-Tuple{Rimu.DictVectors.SegmentedBuffer, Any, Any}","page":"Dict vectors","title":"Rimu.DictVectors.mpi_send","text":"mpi_send(buf::SegmentedBuffer, dest, comm::MPI.Comm)\n\nSend the buffer to rank with id dest.\n\n\n\n\n\n","category":"method"},{"location":"dictvectors.html#Rimu.DictVectors.mpi_size","page":"Dict vectors","title":"Rimu.DictVectors.mpi_size","text":"mpi_size(::Communicator) -> Int\n\nReturn the total number of MPI ranks in the Communicator.\n\n\n\n\n\n","category":"function"},{"location":"dictvectors.html#Rimu.DictVectors.replace_collections!-Tuple{Rimu.DictVectors.SegmentedBuffer, Any}","page":"Dict vectors","title":"Rimu.DictVectors.replace_collections!","text":"replace_collections!(buf::SegmentedBuffer, iters)\n\nInsert collections in iters into a SegmentedBuffer.\n\njulia> using Rimu.DictVectors: SegmentedBuffer\n\njulia> buf = SegmentedBuffer{Int}()\n0-element SegmentedBuffer{Int64}\n\njulia> Rimu.DictVectors.replace_collections!(buf, [[1,2,3], [4,5]])\n2-element SegmentedBuffer{Int64}:\n [1, 2, 3]\n [4, 5]\n\njulia> Rimu.DictVectors.replace_collections!(buf, [[1], [2,3], [4]])\n3-element SegmentedBuffer{Int64}:\n [1]\n [2, 3]\n [4]\n\n\n\n\n\n","category":"method"},{"location":"dictvectors.html#Rimu.DictVectors.target_segment-Tuple{Rimu.DictVectors.Communicator, Any, Any}","page":"Dict vectors","title":"Rimu.DictVectors.target_segment","text":"target_segment(c::Communicator, k, num_segments) -> target, is_local\n\nThis function is used to determine where in the PDVec a key should be stored. If the key is local (stored on the same MPI rank), return its segment index and true. If the key is non-local, return any value and false.\n\nSee also: PDVec, Communicator.\n\n\n\n\n\n","category":"method"},{"location":"dictvectors.html#Rimu.DictVectors.total_num_segments-Tuple{Rimu.DictVectors.Communicator, Any}","page":"Dict vectors","title":"Rimu.DictVectors.total_num_segments","text":"total_num_segments(c::Communicator, n) -> Int\n\nReturn the total number of segments, including the remote ones, where n is number of local segments.\n\nSee also: PDVec, Communicator.\n\n\n\n\n\n","category":"method"},{"location":"dictvectors.html#Index","page":"Dict vectors","title":"Index","text":"","category":"section"},{"location":"dictvectors.html","page":"Dict vectors","title":"Dict vectors","text":"Pages   = [\"dictvectors.md\"]","category":"page"}]
}
