var documenterSearchIndex = {"docs":
[{"location":"mpi.html#Working-with-MPI","page":"Using MPI","title":"Working with MPI","text":"","category":"section"},{"location":"mpi.html","page":"Using MPI","title":"Using MPI","text":"If you are using PDVecs to store your vectors, working with MPI should be fairly straightforward. Generally, PDVec will work with MPI automatically, as long as MPI is set up correctly and a few common pitfalls are avoided.","category":"page"},{"location":"mpi.html#Configuring-MPI","page":"Using MPI","title":"Configuring MPI","text":"","category":"section"},{"location":"mpi.html","page":"Using MPI","title":"Using MPI","text":"When running on a cluster, ensure that MPI.jl is using the system binary. See the MPI.jl documentation for more information.","category":"page"},{"location":"mpi.html","page":"Using MPI","title":"Using MPI","text":"It is always a good idea to start your script with a quick test that ensures the MPI is set up correctly. One way to do this is to open with","category":"page"},{"location":"mpi.html","page":"Using MPI","title":"Using MPI","text":"mpi_allprintln(\"hello\")","category":"page"},{"location":"mpi.html","page":"Using MPI","title":"Using MPI","text":"which should print something like","category":"page"},{"location":"mpi.html","page":"Using MPI","title":"Using MPI","text":"[ rank 0: hello\n[ rank 1: hello\n[ rank 2: hello\n[ rank 3: hello","category":"page"},{"location":"mpi.html","page":"Using MPI","title":"Using MPI","text":"If it prints rank 0 several times, the code will run, but ranks will not communicate.","category":"page"},{"location":"mpi.html#Using-Slurm","page":"Using MPI","title":"Using Slurm","text":"","category":"section"},{"location":"mpi.html","page":"Using MPI","title":"Using MPI","text":"When using PDVec, the recommended setup is to use threads to parallelise the computation within a node, and to only use MPI for inter-node communication. In a slurm script, this is done as follows:","category":"page"},{"location":"mpi.html","page":"Using MPI","title":"Using MPI","text":"...\n#SBATCH --ntasks-per-node=1\n#SBATCH --nodes=4            # replace 4 with the desired number of nodes\n#SBATCH --cpus-per-task=28   # replace 28 with the number of cores available in a node\n#SBATCH --hint=nomultithread # don't use hyperthreading\n...\n\nsrun julia --project -tauto script.jl","category":"page"},{"location":"mpi.html","page":"Using MPI","title":"Using MPI","text":"On some clusters, additional settings must be used with srun, for example the CTCP cluster requires the following.","category":"page"},{"location":"mpi.html","page":"Using MPI","title":"Using MPI","text":"srun mpi=pmi2 julia --project -tauto script.jl","category":"page"},{"location":"mpi.html#Common-pitfalls-with-reducing-functions","page":"Using MPI","title":"Common pitfalls with reducing functions","text":"","category":"section"},{"location":"mpi.html#Using-@mpi_root","page":"Using MPI","title":"Using @mpi_root","text":"","category":"section"},{"location":"mpi.html","page":"Using MPI","title":"Using MPI","text":"Take care to not use reducing functions (such as length, sum, norm, ...) inside @mpi_root blocks. Doing so will only initiate the distributed reduction on one rank only, which will cause the code to go out of sync and freeze. As an example, to report the current length of a vector, calculate the length before the @mpi_root block:","category":"page"},{"location":"mpi.html","page":"Using MPI","title":"Using MPI","text":"len = length(pdvec)\n@mpi_root println(\"vector length is $len\")","category":"page"},{"location":"mpi.html#Threaded-operations-and-reductions","page":"Using MPI","title":"Threaded operations and reductions","text":"","category":"section"},{"location":"mpi.html","page":"Using MPI","title":"Using MPI","text":"When using functions that take anonymous functions, such as map(!), sum, or mapreduce, it is important that the anonymous functions passed to them do not perform any MPI-reducing operations (length, norm, sum, etc.). These anonymous functions are executed on multiple threads and initiating MPI communication from multiple threads may cause issues.","category":"page"},{"location":"mpi.html","page":"Using MPI","title":"Using MPI","text":"As an example, suppose we want to scale a vector by its length by using map!. The correct way to write this code is as","category":"page"},{"location":"mpi.html","page":"Using MPI","title":"Using MPI","text":"len = length(pdvec)\nmap!(values(pdvec)) do x\n\tx / len\nend","category":"page"},{"location":"mpi.html","page":"Using MPI","title":"Using MPI","text":"Similar to the previous example, len is calculated first and not within the body of map!. In this specific case, an even better option is to use the scale! function from VectorInterface.jl:","category":"page"},{"location":"mpi.html","page":"Using MPI","title":"Using MPI","text":"scale!(pdvec, 1 / length(pdvec))","category":"page"},{"location":"projectormontecarlo.html#Projector-Monte-Carlo-/-FCIQMC","page":"Projector Monte Carlo","title":"Projector Monte Carlo / FCIQMC","text":"","category":"section"},{"location":"projectormontecarlo.html","page":"Projector Monte Carlo","title":"Projector Monte Carlo","text":"The purpose of Projector Monte Carlo is to stochastically sample the ground state, i.e. the  eigenvector corresponding to the lowest eigenvalue of a quantum Hamiltonian, or more generally,  a very large matrix. Rimu implements a flavor of Projector Monte Carlo called  Full Configuration Interaction Quantum Monte Carlo (FCIQMC).","category":"page"},{"location":"projectormontecarlo.html#ProjectorMonteCarloProblem","page":"Projector Monte Carlo","title":"ProjectorMonteCarloProblem","text":"","category":"section"},{"location":"projectormontecarlo.html","page":"Projector Monte Carlo","title":"Projector Monte Carlo","text":"To run a projector Monte Carlo simulation you set up a problem with ProjectorMonteCarloProblem and solve it with solve. Alternatively you can init it with to obtain a PMCSimulation struct, step!  through time steps, and solve! it to completion. ","category":"page"},{"location":"projectormontecarlo.html","page":"Projector Monte Carlo","title":"Projector Monte Carlo","text":"ProjectorMonteCarloProblem\ninit\nsolve\nsolve!\nstep!","category":"page"},{"location":"projectormontecarlo.html#Rimu.ProjectorMonteCarloProblem-projectormontecarlo","page":"Projector Monte Carlo","title":"Rimu.ProjectorMonteCarloProblem","text":"ProjectorMonteCarloProblem(hamiltonian::AbstractHamiltonian; kwargs...)\n\nDefines a problem to be solved by projector quantum Monte Carlo (QMC) methods, such as the the FCIQMC algorithm.\n\nCommon keyword arguments and defaults:\n\ntime_step = 0.01: Initial time step size.\nlast_step = 100: Controls the number of steps.\ntarget_walkers = 1_000: Target for the 1-norm of the coefficient vector.\nstart_at = starting_address(hamiltonian): Define the initial state vector(s).   An r  s matrix of state vectors can be passed where r is the   number of replicas and s the number of spectral states. See also   default_starting_vector.\nstyle = IsDynamicSemistochastic(): The StochasticStyle of the simulation.\ninitiator = false: Whether to use initiators. Can be true, false, or a valid   InitiatorRule.\nthreading: Default is to use multithreading and/or MPI if available. Set to true to force PDVec for the starting vector, false for serial computation; may be overridden by start_at.\nreporting_strategy = ReportDFAndInfo(): How and when to report results, see ReportingStrategy.\npost_step_strategy = (): Extract observables (e.g. ProjectedEnergy), see PostStepStrategy.\nn_replicas = 1: Number of synchronised independent simulations.\nreplica_strategy = NoStats(n_replicas): Which results to report from replica simulations, see ReplicaStrategy.\nn_spectral = 1: Number of targeted spectral states. Set n_spectral > 1 to find excited states.\nspectral_strategy = GramSchmidt(n_spectral): The SpectralStrategy used for orthogonalizing spectral states.\n\nExample\n\njulia> hamiltonian = HubbardReal1D(BoseFS(1,2,3));\n\njulia> problem = ProjectorMonteCarloProblem(hamiltonian; target_walkers = 500, last_step = 100);\n\njulia> simulation = solve(problem);\n\njulia> simulation.success[]\ntrue\n\njulia> size(DataFrame(simulation))\n(100, 9)\n\nFurther keyword arguments:\n\nstarting_step = 1: Starting step of the simulation.\nwall_time = Inf: Maximum time allowed for the simulation.\nsimulation_plan = SimulationPlan(; starting_step, last_step, wall_time): Defines the   duration of the simulation. Takes precedence over last_step and wall_time.\nζ = 0.08: Damping parameter for the shift update.\nξ = ζ^2/4: Forcing parameter for the shift update.\nshift_strategy = DoubleLogUpdate(; target_walkers, ζ, ξ): How to update the shift,   see ShiftStrategy.\ntime_step_strategy = ConstantTimeStep(): Adjust time step or not, see   TimeStepStrategy.\nalgorithm = FCIQMC(; shift_strategy, time_step_strategy): The algorithm to use.   Currenlty only FCIQMC is implemented.\nshift: Initial shift value or collection of shift values. Determined by default from the   Hamiltonian and the starting vectors.\ninitial_shift_parameters: Initial shift parameters or collection of initial shift   parameters. Overrides shift if provided.\nmax_length = 2 * target_walkers + 100: Maximum length of the vectors.\ndisplay_name = \"PMCSimulation\": Name displayed in progress bar (via ProgressLogging).\nmetadata: User-supplied metadata to be added to the report. Must be an iterable of pairs or a NamedTuple, e.g. metadata = (\"key1\" => \"value1\", \"key2\" => \"value2\"). All metadata is converted to strings.\nrandom_seed = true: Provide and store a seed for the random number generator. If set to   true, a new random seed is generated from RandomDevice(). If set to number, this   number is used as the seed. This seed is used by solve (and init) to re-seed the   default random number generator (consistently on each MPI rank) such that   solveing the same ProjectorMonteCarloProblem twice will yield identical results. If   set to false, no seed is used and consecutive random numbers are used.\nminimum_size = 2*num_spectral_states(spectral_strategy): The minimum size of the basis   used to construct starting vectors for simulations of spectral states, if start_at   is not provided.\n\nSee also init, solve.\n\n\n\n\n\n","category":"type"},{"location":"projectormontecarlo.html#CommonSolve.init-projectormontecarlo","page":"Projector Monte Carlo","title":"CommonSolve.init","text":"init(p::ExactDiagonalizationProblem, [algorithm]; kwargs...)\n\nInitialize a solver for an ExactDiagonalizationProblem p with an optional algorithm. Returns a solver instance that can be solved with solve.\n\nFor a description of the keyword arguments, see the documentation for ExactDiagonalizationProblem.\n\n\n\n\n\ninit(problem::ProjectorMonteCarloProblem; copy_vectors=true)::PMCSimulation\n\nInitialise a Rimu.PMCSimulation.\n\nSee also ProjectorMonteCarloProblem, solve!, solve, step!, Rimu.PMCSimulation.\n\n\n\n\n\n","category":"function"},{"location":"projectormontecarlo.html#CommonSolve.solve-projectormontecarlo","page":"Projector Monte Carlo","title":"CommonSolve.solve","text":"solve(::ProjectorMonteCarloProblem)::PMCSimulation\n\nInitialize and solve a ProjectorMonteCarloProblem until the last step is completed or the wall time limit is reached.\n\nSee also init, solve!, step!, Rimu.PMCSimulation, and solve(::ExactDiagonalizationProblem).\n\n\n\n\n\n","category":"function"},{"location":"projectormontecarlo.html#CommonSolve.solve!-projectormontecarlo","page":"Projector Monte Carlo","title":"CommonSolve.solve!","text":"solve!(sm::PMCSimulation; kwargs...)::PMCSimulation\n\nSolve a Rimu.PMCSimulation until the last step is completed or the wall time limit is reached.\n\nTo continue a previously completed simulation, set a new last_step or wall_time using the keyword arguments. Optionally, changes can be made to the replica_strategy, the post_step_strategy, or the reporting_strategy.\n\nOptional keyword arguments:\n\nlast_step = nothing: Set the last step to a new value and continue the simulation.\nwall_time = nothing: Set the allowed wall time to a new value and continue the   simulation.\nreset_time = false: Reset the elapsed_time counter and continue the simulation.\nempty_report = false: Empty the report before continuing the simulation.\nreplica_strategy = nothing: Change the replica strategy. Requires the number of replicas   to match the number of replicas in the simulation sm. Implies empty_report = true.\npost_step_strategy = nothing: Change the post-step strategy. Implies   empty_report = true.\nreporting_strategy = nothing: Change the reporting strategy. Implies   empty_report = true.\nmetadata = nothing: Add metadata to the report.\n\nSee also ProjectorMonteCarloProblem, init, solve, step!, Rimu.PMCSimulation.\n\n\n\n\n\n","category":"function"},{"location":"projectormontecarlo.html#CommonSolve.step!-projectormontecarlo","page":"Projector Monte Carlo","title":"CommonSolve.step!","text":"step!(sm::PMCSimulation)::PMCSimulation\n\nAdvance the simulation by one step.\n\nCalling solve! will advance the simulation until the last step or the wall time is exceeded. When completing the simulation without calling solve!, the simulation report needs to be finalised by calling Rimu.finalize_report!.\n\nSee also ProjectorMonteCarloProblem, init, solve!, solve, Rimu.PMCSimulation.\n\n\n\n\n\n","category":"function"},{"location":"projectormontecarlo.html","page":"Projector Monte Carlo","title":"Projector Monte Carlo","text":"After solve or solve! have been called the returned PMCSimulation contains the results of  the projector Monte Carlo calculation.","category":"page"},{"location":"projectormontecarlo.html#PMCSimulation-and-report-as-a-DataFrame","page":"Projector Monte Carlo","title":"PMCSimulation and report as a DataFrame","text":"","category":"section"},{"location":"projectormontecarlo.html","page":"Projector Monte Carlo","title":"Projector Monte Carlo","text":"Rimu.PMCSimulation","category":"page"},{"location":"projectormontecarlo.html#Rimu.PMCSimulation-projectormontecarlo","page":"Projector Monte Carlo","title":"Rimu.PMCSimulation","text":"PMCSimulation\n\nHolds the state and the results of a projector quantum Monte Carlo (PMC) simulation. Is returned by init(::ProjectorMonteCarloProblem) and solved with solve!(::PMCSimulation).\n\nObtain the results of a simulation sm as a DataFrame with DataFrame(sm).\n\nFields\n\nproblem::ProjectorMonteCarloProblem: The problem that was solved\nstate::Rimu.ReplicaState: The current state of the simulation\nreport::Rimu.Report: The report of the simulation\nmodified::Bool: Whether the simulation has been modified\naborted::Bool: Whether the simulation has been aborted\nsuccess::Bool: Whether the simulation has been completed successfully\nmessage::String: A message about the simulation status\nelapsed_time::Float64: The time elapsed during the simulation\n\nSee also state_vectors, ProjectorMonteCarloProblem, init, solve!.\n\n\n\n\n\n","category":"type"},{"location":"projectormontecarlo.html","page":"Projector Monte Carlo","title":"Projector Monte Carlo","text":"The DataFrame returned from DataFrame(::PMCSimulation) contains the time series data from  the projector Monte Carlo simulation that is of primary interest for analysis. Depending on the  reporting_strategy and other options passed as keyword arguments to  ProjectorMonteCarloProblem it can have different numbers of rows and columns. The rows  correspond to the reported time steps (Monte Carlo steps). There is at least one column with the name :step. Further columns are usually present with additional data reported from the simulation.","category":"page"},{"location":"projectormontecarlo.html","page":"Projector Monte Carlo","title":"Projector Monte Carlo","text":"For the default option algorithm = FCIQMC(; shift_strategy, time_step_strategy) with a single replica (n_replicas = 1) and single spectral state, the fields :shift, :norm, :len will  be present as well as others depending on the style argument and the post_step_strategy.","category":"page"},{"location":"projectormontecarlo.html","page":"Projector Monte Carlo","title":"Projector Monte Carlo","text":"If multiple replicas or spectral states are requested, then the relevant field names in the  DataFrame will have a suffix identifying the respective replica simulation, e.g. the shifts will be reported as shift_1, shift_2, ... ","category":"page"},{"location":"projectormontecarlo.html","page":"Projector Monte Carlo","title":"Projector Monte Carlo","text":"Many tools for analysing the time series data obtained from a  ProjectorMonteCarloProblem are contained in the Module StatsTools.","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"EditURL = \"../../../scripts/G2-example.jl\"","category":"page"},{"location":"generated/G2-example.html#Example-3:-Calculating-observables","page":"Calculating observables","title":"Example 3: Calculating observables","text":"","category":"section"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"This is an example calculation of the two-body correlation function G_2.","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"A runnable script for this example is located here. Run it with julia G2-example.jl.","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"First, we load the reqired packages. Rimu for FCIQMC calculation, and DataFrames for maniplating the output.","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"using Rimu\nusing Random\nusing DataFrames","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"We use the same Hamiltonian as the first example, a Bose-Hubbard model with 6 particles in 6 sites, with strong interactions (we expect a Mott insulating state).","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"m = n = 6\ninitial_address = near_uniform(BoseFS{n,m})\nH = HubbardReal1D(initial_address; u = 6.0, t = 1.0)","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"HubbardReal1D(fs\"|1 1 1 1 1 1⟩\"; u=6.0, t=1.0)","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"Now, we define the operators for the observables we wish to calculate.","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"dvals = 0:m-1\nG2list = ((G2RealCorrelator(d) for d in dvals)...,)","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"(G2RealCorrelator(0), G2RealCorrelator(1), G2RealCorrelator(2), G2RealCorrelator(3), G2RealCorrelator(4), G2RealCorrelator(5))","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"This is a tuple of G2RealCorrelators, subtypes of AbstractHamiltonian. It calculates the density-density correlation function on a lattice","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"    hatG^(2)(d) = frac1M sum_i^M hatn_i (hatn_i+d - delta_0d)","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"with normalisation","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"    sum_d=0^M-1 langle hatG^(2)(d) rangle = fracN (N-1)M","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"Observables that are defined by expectation values are calculated using the \"replica trick\". Thereby several independent copies or \"replicas\" of the state vector are propagated simultaneously. The reason is to have two (or more) stochastically independent copies of the state vector available such that we can calculate bias-free overlaps. We enable this by defining a ReplicaStrategy. Each replica has its own state and FCIQMC is effectively performed independently on each one.  For calculating observables, we use AllOverlaps for the ReplicaStrategy. At each timestep, after the FCIQMC step is performed on, this strategy calculates the overlaps of every operator with the wavefunctions from each pair of replicas.","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"To obtain an unbiased result, at least two replicas should be used. One can also use more than two to improve the statistics. This is particularly helpful when the walker number is low.","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"n_replicas = 3\nreplica_strategy = AllOverlaps(n_replicas; operator=G2list)","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"AllOverlaps{3, 6, Tuple{G2RealCorrelator{0}, G2RealCorrelator{1}, G2RealCorrelator{2}, G2RealCorrelator{3}, G2RealCorrelator{4}, G2RealCorrelator{5}}, true}((G2RealCorrelator(0), G2RealCorrelator(1), G2RealCorrelator(2), G2RealCorrelator(3), G2RealCorrelator(4), G2RealCorrelator(5)))","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"Other FCIQMC parameters and strategies can be set in the same way as before.","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"steps_equilibrate = 1_000\nsteps_measure = 5_000\ntarget_walkers = 100;\ntime_step = 0.001\n","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"Now, we run FCIQMC. Note that passing an initial vector is optional - if we only pass the style, a vector with the appropriate style is created automatically.","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"problem = ProjectorMonteCarloProblem(H;\n    style=IsDynamicSemistochastic(),\n    time_step,\n    last_step = steps_equilibrate + steps_measure,\n    target_walkers,\n    replica_strategy,\n)\nresult = solve(problem)\ndf = DataFrame(result);","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"The output DataFrame has FCIQMC statistics for each replica (e.g. shift, norm),","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"println(filter(startswith(\"shift_\"), names(df)))","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"[\"shift_1\", \"shift_2\", \"shift_3\"]\n","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"as well as vector-vector overlaps (e.g. c1_dot_c2),","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"println(filter(contains(\"dot\"), names(df)))","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"[\"c1_dot_c2\", \"c1_dot_c3\", \"c2_dot_c3\"]\n","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"and operator overlaps (e.g. c1_Op1_c2) between the replicas.","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"println(filter(contains(\"Op\"), names(df)))","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"[\"c1_Op1_c2\", \"c1_Op2_c2\", \"c1_Op3_c2\", \"c1_Op4_c2\", \"c1_Op5_c2\", \"c1_Op6_c2\", \"c1_Op1_c3\", \"c1_Op2_c3\", \"c1_Op3_c3\", \"c1_Op4_c3\", \"c1_Op5_c3\", \"c1_Op6_c3\", \"c2_Op1_c3\", \"c2_Op2_c3\", \"c2_Op3_c3\", \"c2_Op4_c3\", \"c2_Op5_c3\", \"c2_Op6_c3\"]\n","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"The vector-vector and operator overlaps go into calculating the Rayleigh quotient for an observable","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"    langle hatG^(2)(d) rangle = fracsum_ab mathbfc_a^dagger cdot hatG^(2)(d) cdot mathbfc_bsum_ab mathbfc_a^dagger cdot mathbfc_b ","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"The sum over all replica pairs (a,b), especially in the denominator, helps to avoid errors from poor sampling if the number of walkers is too low.","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"We use the function rayleigh_replica_estimator to calculate the Rayleigh quotient using all replicas in df, returning a RatioBlockingResult. Using the keyword skip will ignore the initial equilibration steps.","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"Now, we can calculate the correlation function for each value of d.","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"println(\"Two-body correlator from $n_replicas replicas:\")\nfor d in dvals\n    r = rayleigh_replica_estimator(df; op_name = \"Op$(d+1)\", skip=steps_equilibrate)\n    println(\"   G2($d) = $(r.f) ± $(r.σ_f)\")\nend","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"Two-body correlator from 3 replicas:\n   G2(0) = 0.21700684429903808 ± 0.0014019214253585429\n   G2(1) = 0.9162906623170534 ± 0.0006339486322387863\n   G2(2) = 0.9815185242892048 ± 0.0006305455093950494\n   G2(3) = 0.9873747824884448 ± 0.0006965034469000776\n   G2(4) = 0.9815185242892048 ± 0.0006305455093950494\n   G2(5) = 0.9162906623170534 ± 0.0006339486322387863\n","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"As expected, the onsite correlation at d=0 is low since this is a Mott insulating state with unit filling fraction, and is close to 10 for all other values of the displacement d.","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"Since we ran multiple independent replicas, we also have multiple estimates of the shift energy.","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"println(\"Shift energy from $n_replicas replicas:\")\nfor i in 1:n_replicas\n    se = shift_estimator(df; shift=\"shift_$i\", skip=steps_equilibrate)\n    println(\"   Replica $i: $(se.mean) ± $(se.err)\")\nend\n","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"Shift energy from 3 replicas:\n   Replica 1: -3.985650439948751 ± 0.1455512659118035\n   Replica 2: -4.057748144268046 ± 0.13398528434834336\n   Replica 3: -4.0615216012290905 ± 0.15031487486042483\n","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"This page was generated using Literate.jl.","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"EditURL = \"../../../scripts/BHM-example.jl\"","category":"page"},{"location":"generated/BHM-example.html#Example-1:-1D-Bose-Hubbard-Model","page":"1D Bose-Hubbard Model","title":"Example 1: 1D Bose-Hubbard Model","text":"","category":"section"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"This is an example calculation finding the ground state of a 1D Bose-Hubbard chain with 6 particles in 6 lattice sites.","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"A runnable script for this example is located here. Run it with julia BHM-example.jl.","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"First, we load Rimu and Plots.","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"using Rimu\nusing Plots","category":"page"},{"location":"generated/BHM-example.html#Setting-up-the-model","page":"1D Bose-Hubbard Model","title":"Setting up the model","text":"","category":"section"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"We start by defining the physical problem. First, we generate an initial configuration which will be used as a starting point of our computation. In this example, we use a bosonic Fock state with 6 particles evenly distributed in 6 lattice sites.","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"initial_address = near_uniform(BoseFS{6,6})","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"BoseFS{6,6}(1, 1, 1, 1, 1, 1)","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"The Hamiltonian is constructed by initializing a struct with an initial address and model parameters. Here, we use the Bose Hubbard model in one-dimensional real space.","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"H = HubbardReal1D(initial_address; u = 6.0, t = 1.0)","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"HubbardReal1D(fs\"|1 1 1 1 1 1⟩\"; u=6.0, t=1.0)","category":"page"},{"location":"generated/BHM-example.html#Parameters-of-the-calculation","page":"1D Bose-Hubbard Model","title":"Parameters of the calculation","text":"","category":"section"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"Now, let's setup the Monte Carlo calculation. We need to decide the number of walkers to use in this Monte Carlo run, which is equivalent to the average one-norm of the coefficient vector. Higher values will result in better statistics, but require more memory and computing power.","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"target_walkers = 1_000;","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"FCIQMC takes a certain number of steps to equllibrate, after which the observables will fluctuate around a mean value. In this example, we will devote 1000 steps to equilibration and take an additional 2000 steps for measurement.","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"steps_equilibrate = 1_000;\nsteps_measure = 2_000;\nlast_step = steps_equilibrate + steps_measure","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"3000","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"Next, we pick a time step size. FCIQMC does not have a time step error, but the time step needs to be small enough, or the computation might diverge. If the time step is too small, however, the computation might take a long time to equilibrate. The appropriate time step size is problem-dependent and is best determined through experimentation.","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"time_step = 0.001;","category":"page"},{"location":"generated/BHM-example.html#Defining-an-observable","page":"1D Bose-Hubbard Model","title":"Defining an observable","text":"","category":"section"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"Now, let's set up an observable to measure. Here we will measure the projected energy. In additon to the shift, the projected energy is a second estimator for the energy. It usually produces better statistics than the shift.","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"We first need to define a projector. Here, we use the function default_starting_vector to generate a vector with only a single occupied configuration. We will use the same vector as the starting vector for the FCIQMC calculation.","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"initial_vector = default_starting_vector(initial_address; style=IsDynamicSemistochastic())","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"DVec{BoseFS{6, 6, BitString{11, 1, UInt16}},Float64} with 1 entry, style = IsDynamicSemistochastic{Float64,ThresholdCompression,DynamicSemistochastic}()\n  fs\"|1 1 1 1 1 1⟩\" => 10.0","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"The choice of the style argument already determines the FCIQMC algorithm to use. IsDynamicSemistochastic is usually the best choice as it reduces noise and improves the sign problem.","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"Observables that can be calculated by projection of the fluctuating quantum state onto a constant vector are passed into the ProjectorMonteCarloProblem with the post_step_strategy keyword argument.","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"post_step_strategy = ProjectedEnergy(H, initial_vector)","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"ProjectedEnergy{HubbardReal1D{Float64, BoseFS{6, 6, BitString{11, 1, UInt16}}, 6.0, 1.0}, Rimu.DictVectors.FrozenDVec{BoseFS{6, 6, BitString{11, 1, UInt16}}, Float64}, Rimu.DictVectors.FrozenDVec{BoseFS{6, 6, BitString{11, 1, UInt16}}, Float64}}(:vproj, :hproj, HubbardReal1D(fs\"|1 1 1 1 1 1⟩\"; u=6.0, t=1.0), Rimu.FrozenDVec([fs\"|1 1 1 1 1 1⟩\"=>10.0]), Rimu.FrozenDVec([fs\"|1 1 1 1 2 0⟩\"=>-14.1421, fs\"|0 2 1 1 1 1⟩\"=>-14.1421, fs\"|1 1 1 1 0 2⟩\"=>-14.1421, fs\"|1 2 0 1 1 1⟩\"=>-14.1421, fs\"|2 0 1 1 1 1⟩\"=>-14.1421, fs\"|1 1 1 2 0 1⟩\"=>-14.1421, fs\"|1 1 2 0 1 1⟩\"=>-14.1421, fs\"|1 1 0 2 1 1⟩\"=>-14.1421, fs\"|1 1 1 0 2 1⟩\"=>-14.1421, fs\"|1 0 2 1 1 1⟩\"=>-14.1421, fs\"|2 1 1 1 1 0⟩\"=>-14.1421, fs\"|0 1 1 1 1 2⟩\"=>-14.1421]))","category":"page"},{"location":"generated/BHM-example.html#Running-the-calculation","page":"1D Bose-Hubbard Model","title":"Running the calculation","text":"","category":"section"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"This is a two-step process: First we define a ProjectorMonteCarloProblem with all the parameters needed for the simulation","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"problem = ProjectorMonteCarloProblem(\n    H;\n    start_at = initial_vector,\n    last_step,\n    time_step,\n    target_walkers,\n    post_step_strategy\n);","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"To run the simulation we simply call solve on the problem","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"simulation = solve(problem);","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"The simulation object contains the results of the simulation as well as state vectors and strategies. We can extract the time series data for further analysis:","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"df = DataFrame(simulation);","category":"page"},{"location":"generated/BHM-example.html#Analysing-the-results","page":"1D Bose-Hubbard Model","title":"Analysing the results","text":"","category":"section"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"We can plot the norm of the coefficient vector as a function of the number of steps.","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"hline(\n    [target_walkers];\n    label=\"target_walkers\", xlabel=\"step\", ylabel=\"norm\",\n    color=2, linestyle=:dash, margin = 1Plots.cm\n)\nplot!(df.step, df.norm, label=\"norm\", color=1)","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"<?xml version=\"1.0\" encoding=\"utf-8\"?>\n<svg xmlns=\"http://www.w3.org/2000/svg\" xmlns:xlink=\"http://www.w3.org/1999/xlink\" width=\"600\" height=\"400\" viewBox=\"0 0 2400 1600\">\n<defs>\n  <clipPath id=\"clip450\">\n    <rect x=\"0\" y=\"0\" width=\"2400\" height=\"1600\"/>\n  </clipPath>\n</defs>\n<path clip-path=\"url(#clip450)\" d=\"M0 1600 L2400 1600 L2400 0 L0 0  Z\" fill=\"#ffffff\" fill-rule=\"evenodd\" fill-opacity=\"1\"/>\n<defs>\n  <clipPath id=\"clip451\">\n    <rect x=\"480\" y=\"0\" width=\"1681\" height=\"1600\"/>\n  </clipPath>\n</defs>\n<path clip-path=\"url(#clip450)\" d=\"M404.284 1281.45 L2211.02 1281.45 L2211.02 188.976 L404.284 188.976  Z\" fill=\"#ffffff\" fill-rule=\"evenodd\" fill-opacity=\"1\"/>\n<defs>\n  <clipPath id=\"clip452\">\n    <rect x=\"404\" y=\"188\" width=\"1808\" height=\"1093\"/>\n  </clipPath>\n</defs>\n<polyline clip-path=\"url(#clip452)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:2; stroke-opacity:0.1; fill:none\" points=\"454.849,1281.45 454.849,188.976 \"/>\n<polyline clip-path=\"url(#clip452)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:2; stroke-opacity:0.1; fill:none\" points=\"1023.2,1281.45 1023.2,188.976 \"/>\n<polyline clip-path=\"url(#clip452)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:2; stroke-opacity:0.1; fill:none\" points=\"1591.54,1281.45 1591.54,188.976 \"/>\n<polyline clip-path=\"url(#clip452)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:2; stroke-opacity:0.1; fill:none\" points=\"2159.89,1281.45 2159.89,188.976 \"/>\n<polyline clip-path=\"url(#clip452)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:2; stroke-opacity:0.1; fill:none\" points=\"404.284,1260.84 2211.02,1260.84 \"/>\n<polyline clip-path=\"url(#clip452)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:2; stroke-opacity:0.1; fill:none\" points=\"404.284,1003.17 2211.02,1003.17 \"/>\n<polyline clip-path=\"url(#clip452)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:2; stroke-opacity:0.1; fill:none\" points=\"404.284,745.5 2211.02,745.5 \"/>\n<polyline clip-path=\"url(#clip452)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:2; stroke-opacity:0.1; fill:none\" points=\"404.284,487.832 2211.02,487.832 \"/>\n<polyline clip-path=\"url(#clip452)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:2; stroke-opacity:0.1; fill:none\" points=\"404.284,230.164 2211.02,230.164 \"/>\n<polyline clip-path=\"url(#clip450)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"404.284,1281.45 2211.02,1281.45 \"/>\n<polyline clip-path=\"url(#clip450)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"454.849,1281.45 454.849,1262.55 \"/>\n<polyline clip-path=\"url(#clip450)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"1023.2,1281.45 1023.2,1262.55 \"/>\n<polyline clip-path=\"url(#clip450)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"1591.54,1281.45 1591.54,1262.55 \"/>\n<polyline clip-path=\"url(#clip450)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"2159.89,1281.45 2159.89,1262.55 \"/>\n<path clip-path=\"url(#clip450)\" d=\"M454.849 1312.37 Q451.238 1312.37 449.41 1315.93 Q447.604 1319.47 447.604 1326.6 Q447.604 1333.71 449.41 1337.27 Q451.238 1340.82 454.849 1340.82 Q458.484 1340.82 460.289 1337.27 Q462.118 1333.71 462.118 1326.6 Q462.118 1319.47 460.289 1315.93 Q458.484 1312.37 454.849 1312.37 M454.849 1308.66 Q460.659 1308.66 463.715 1313.27 Q466.794 1317.85 466.794 1326.6 Q466.794 1335.33 463.715 1339.94 Q460.659 1344.52 454.849 1344.52 Q449.039 1344.52 445.96 1339.94 Q442.905 1335.33 442.905 1326.6 Q442.905 1317.85 445.96 1313.27 Q449.039 1308.66 454.849 1308.66 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip450)\" d=\"M967.722 1339.91 L975.361 1339.91 L975.361 1313.55 L967.05 1315.21 L967.05 1310.95 L975.314 1309.29 L979.99 1309.29 L979.99 1339.91 L987.629 1339.91 L987.629 1343.85 L967.722 1343.85 L967.722 1339.91 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip450)\" d=\"M1007.07 1312.37 Q1003.46 1312.37 1001.63 1315.93 Q999.828 1319.47 999.828 1326.6 Q999.828 1333.71 1001.63 1337.27 Q1003.46 1340.82 1007.07 1340.82 Q1010.71 1340.82 1012.51 1337.27 Q1014.34 1333.71 1014.34 1326.6 Q1014.34 1319.47 1012.51 1315.93 Q1010.71 1312.37 1007.07 1312.37 M1007.07 1308.66 Q1012.88 1308.66 1015.94 1313.27 Q1019.02 1317.85 1019.02 1326.6 Q1019.02 1335.33 1015.94 1339.94 Q1012.88 1344.52 1007.07 1344.52 Q1001.26 1344.52 998.185 1339.94 Q995.129 1335.33 995.129 1326.6 Q995.129 1317.85 998.185 1313.27 Q1001.26 1308.66 1007.07 1308.66 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip450)\" d=\"M1037.24 1312.37 Q1033.62 1312.37 1031.8 1315.93 Q1029.99 1319.47 1029.99 1326.6 Q1029.99 1333.71 1031.8 1337.27 Q1033.62 1340.82 1037.24 1340.82 Q1040.87 1340.82 1042.68 1337.27 Q1044.5 1333.71 1044.5 1326.6 Q1044.5 1319.47 1042.68 1315.93 Q1040.87 1312.37 1037.24 1312.37 M1037.24 1308.66 Q1043.05 1308.66 1046.1 1313.27 Q1049.18 1317.85 1049.18 1326.6 Q1049.18 1335.33 1046.1 1339.94 Q1043.05 1344.52 1037.24 1344.52 Q1031.43 1344.52 1028.35 1339.94 Q1025.29 1335.33 1025.29 1326.6 Q1025.29 1317.85 1028.35 1313.27 Q1031.43 1308.66 1037.24 1308.66 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip450)\" d=\"M1067.4 1312.37 Q1063.79 1312.37 1061.96 1315.93 Q1060.15 1319.47 1060.15 1326.6 Q1060.15 1333.71 1061.96 1337.27 Q1063.79 1340.82 1067.4 1340.82 Q1071.03 1340.82 1072.84 1337.27 Q1074.67 1333.71 1074.67 1326.6 Q1074.67 1319.47 1072.84 1315.93 Q1071.03 1312.37 1067.4 1312.37 M1067.4 1308.66 Q1073.21 1308.66 1076.26 1313.27 Q1079.34 1317.85 1079.34 1326.6 Q1079.34 1335.33 1076.26 1339.94 Q1073.21 1344.52 1067.4 1344.52 Q1061.59 1344.52 1058.51 1339.94 Q1055.45 1335.33 1055.45 1326.6 Q1055.45 1317.85 1058.51 1313.27 Q1061.59 1308.66 1067.4 1308.66 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip450)\" d=\"M1540.15 1339.91 L1556.47 1339.91 L1556.47 1343.85 L1534.53 1343.85 L1534.53 1339.91 Q1537.19 1337.16 1541.77 1332.53 Q1546.38 1327.88 1547.56 1326.53 Q1549.81 1324.01 1550.69 1322.27 Q1551.59 1320.51 1551.59 1318.82 Q1551.59 1316.07 1549.64 1314.33 Q1547.72 1312.6 1544.62 1312.6 Q1542.42 1312.6 1539.97 1313.36 Q1537.54 1314.13 1534.76 1315.68 L1534.76 1310.95 Q1537.58 1309.82 1540.04 1309.24 Q1542.49 1308.66 1544.53 1308.66 Q1549.9 1308.66 1553.09 1311.35 Q1556.29 1314.03 1556.29 1318.52 Q1556.29 1320.65 1555.48 1322.57 Q1554.69 1324.47 1552.58 1327.07 Q1552.01 1327.74 1548.9 1330.95 Q1545.8 1334.15 1540.15 1339.91 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip450)\" d=\"M1576.29 1312.37 Q1572.68 1312.37 1570.85 1315.93 Q1569.04 1319.47 1569.04 1326.6 Q1569.04 1333.71 1570.85 1337.27 Q1572.68 1340.82 1576.29 1340.82 Q1579.92 1340.82 1581.73 1337.27 Q1583.56 1333.71 1583.56 1326.6 Q1583.56 1319.47 1581.73 1315.93 Q1579.92 1312.37 1576.29 1312.37 M1576.29 1308.66 Q1582.1 1308.66 1585.15 1313.27 Q1588.23 1317.85 1588.23 1326.6 Q1588.23 1335.33 1585.15 1339.94 Q1582.1 1344.52 1576.29 1344.52 Q1570.48 1344.52 1567.4 1339.94 Q1564.34 1335.33 1564.34 1326.6 Q1564.34 1317.85 1567.4 1313.27 Q1570.48 1308.66 1576.29 1308.66 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip450)\" d=\"M1606.45 1312.37 Q1602.84 1312.37 1601.01 1315.93 Q1599.2 1319.47 1599.2 1326.6 Q1599.2 1333.71 1601.01 1337.27 Q1602.84 1340.82 1606.45 1340.82 Q1610.08 1340.82 1611.89 1337.27 Q1613.72 1333.71 1613.72 1326.6 Q1613.72 1319.47 1611.89 1315.93 Q1610.08 1312.37 1606.45 1312.37 M1606.45 1308.66 Q1612.26 1308.66 1615.32 1313.27 Q1618.39 1317.85 1618.39 1326.6 Q1618.39 1335.33 1615.32 1339.94 Q1612.26 1344.52 1606.45 1344.52 Q1600.64 1344.52 1597.56 1339.94 Q1594.51 1335.33 1594.51 1326.6 Q1594.51 1317.85 1597.56 1313.27 Q1600.64 1308.66 1606.45 1308.66 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip450)\" d=\"M1636.61 1312.37 Q1633 1312.37 1631.17 1315.93 Q1629.37 1319.47 1629.37 1326.6 Q1629.37 1333.71 1631.17 1337.27 Q1633 1340.82 1636.61 1340.82 Q1640.25 1340.82 1642.05 1337.27 Q1643.88 1333.71 1643.88 1326.6 Q1643.88 1319.47 1642.05 1315.93 Q1640.25 1312.37 1636.61 1312.37 M1636.61 1308.66 Q1642.42 1308.66 1645.48 1313.27 Q1648.56 1317.85 1648.56 1326.6 Q1648.56 1335.33 1645.48 1339.94 Q1642.42 1344.52 1636.61 1344.52 Q1630.8 1344.52 1627.72 1339.94 Q1624.67 1335.33 1624.67 1326.6 Q1624.67 1317.85 1627.72 1313.27 Q1630.8 1308.66 1636.61 1308.66 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip450)\" d=\"M2118.57 1325.21 Q2121.93 1325.93 2123.8 1328.2 Q2125.7 1330.47 2125.7 1333.8 Q2125.7 1338.92 2122.18 1341.72 Q2118.66 1344.52 2112.18 1344.52 Q2110.01 1344.52 2107.69 1344.08 Q2105.4 1343.66 2102.95 1342.81 L2102.95 1338.29 Q2104.89 1339.43 2107.2 1340 Q2109.52 1340.58 2112.04 1340.58 Q2116.44 1340.58 2118.73 1338.85 Q2121.05 1337.11 2121.05 1333.8 Q2121.05 1330.75 2118.89 1329.03 Q2116.76 1327.3 2112.95 1327.3 L2108.92 1327.3 L2108.92 1323.45 L2113.13 1323.45 Q2116.58 1323.45 2118.41 1322.09 Q2120.24 1320.7 2120.24 1318.11 Q2120.24 1315.44 2118.34 1314.03 Q2116.46 1312.6 2112.95 1312.6 Q2111.02 1312.6 2108.82 1313.01 Q2106.63 1313.43 2103.99 1314.31 L2103.99 1310.14 Q2106.65 1309.4 2108.96 1309.03 Q2111.3 1308.66 2113.36 1308.66 Q2118.69 1308.66 2121.79 1311.09 Q2124.89 1313.5 2124.89 1317.62 Q2124.89 1320.49 2123.25 1322.48 Q2121.6 1324.45 2118.57 1325.21 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip450)\" d=\"M2144.57 1312.37 Q2140.95 1312.37 2139.13 1315.93 Q2137.32 1319.47 2137.32 1326.6 Q2137.32 1333.71 2139.13 1337.27 Q2140.95 1340.82 2144.57 1340.82 Q2148.2 1340.82 2150.01 1337.27 Q2151.83 1333.71 2151.83 1326.6 Q2151.83 1319.47 2150.01 1315.93 Q2148.2 1312.37 2144.57 1312.37 M2144.57 1308.66 Q2150.38 1308.66 2153.43 1313.27 Q2156.51 1317.85 2156.51 1326.6 Q2156.51 1335.33 2153.43 1339.94 Q2150.38 1344.52 2144.57 1344.52 Q2138.76 1344.52 2135.68 1339.94 Q2132.62 1335.33 2132.62 1326.6 Q2132.62 1317.85 2135.68 1313.27 Q2138.76 1308.66 2144.57 1308.66 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip450)\" d=\"M2174.73 1312.37 Q2171.12 1312.37 2169.29 1315.93 Q2167.48 1319.47 2167.48 1326.6 Q2167.48 1333.71 2169.29 1337.27 Q2171.12 1340.82 2174.73 1340.82 Q2178.36 1340.82 2180.17 1337.27 Q2182 1333.71 2182 1326.6 Q2182 1319.47 2180.17 1315.93 Q2178.36 1312.37 2174.73 1312.37 M2174.73 1308.66 Q2180.54 1308.66 2183.59 1313.27 Q2186.67 1317.85 2186.67 1326.6 Q2186.67 1335.33 2183.59 1339.94 Q2180.54 1344.52 2174.73 1344.52 Q2168.92 1344.52 2165.84 1339.94 Q2162.78 1335.33 2162.78 1326.6 Q2162.78 1317.85 2165.84 1313.27 Q2168.92 1308.66 2174.73 1308.66 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip450)\" d=\"M2204.89 1312.37 Q2201.28 1312.37 2199.45 1315.93 Q2197.64 1319.47 2197.64 1326.6 Q2197.64 1333.71 2199.45 1337.27 Q2201.28 1340.82 2204.89 1340.82 Q2208.52 1340.82 2210.33 1337.27 Q2212.16 1333.71 2212.16 1326.6 Q2212.16 1319.47 2210.33 1315.93 Q2208.52 1312.37 2204.89 1312.37 M2204.89 1308.66 Q2210.7 1308.66 2213.75 1313.27 Q2216.83 1317.85 2216.83 1326.6 Q2216.83 1335.33 2213.75 1339.94 Q2210.7 1344.52 2204.89 1344.52 Q2199.08 1344.52 2196 1339.94 Q2192.94 1335.33 2192.94 1326.6 Q2192.94 1317.85 2196 1313.27 Q2199.08 1308.66 2204.89 1308.66 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip450)\" d=\"M1266.04 1391.71 L1266.04 1397.25 Q1263.56 1395.98 1260.88 1395.34 Q1258.21 1394.71 1255.34 1394.71 Q1250.98 1394.71 1248.79 1396.04 Q1246.62 1397.38 1246.62 1400.05 Q1246.62 1402.09 1248.18 1403.27 Q1249.74 1404.41 1254.45 1405.46 L1256.46 1405.91 Q1262.7 1407.25 1265.31 1409.7 Q1267.95 1412.12 1267.95 1416.48 Q1267.95 1421.44 1264 1424.34 Q1260.09 1427.23 1253.21 1427.23 Q1250.35 1427.23 1247.23 1426.66 Q1244.14 1426.12 1240.7 1425.01 L1240.7 1418.96 Q1243.95 1420.65 1247.1 1421.51 Q1250.25 1422.33 1253.34 1422.33 Q1257.48 1422.33 1259.7 1420.93 Q1261.93 1419.5 1261.93 1416.92 Q1261.93 1414.54 1260.31 1413.26 Q1258.72 1411.99 1253.27 1410.81 L1251.24 1410.33 Q1245.79 1409.19 1243.38 1406.83 Q1240.96 1404.45 1240.96 1400.31 Q1240.96 1395.28 1244.52 1392.54 Q1248.09 1389.8 1254.64 1389.8 Q1257.89 1389.8 1260.75 1390.28 Q1263.62 1390.76 1266.04 1391.71 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip450)\" d=\"M1283.07 1380.54 L1283.07 1390.66 L1295.13 1390.66 L1295.13 1395.22 L1283.07 1395.22 L1283.07 1414.57 Q1283.07 1418.93 1284.24 1420.17 Q1285.45 1421.41 1289.11 1421.41 L1295.13 1421.41 L1295.13 1426.31 L1289.11 1426.31 Q1282.33 1426.31 1279.76 1423.8 Q1277.18 1421.25 1277.18 1414.57 L1277.18 1395.22 L1272.88 1395.22 L1272.88 1390.66 L1277.18 1390.66 L1277.18 1380.54 L1283.07 1380.54 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip450)\" d=\"M1333.32 1407.02 L1333.32 1409.89 L1306.4 1409.89 Q1306.78 1415.94 1310.02 1419.12 Q1313.3 1422.27 1319.13 1422.27 Q1322.5 1422.27 1325.65 1421.44 Q1328.84 1420.61 1331.95 1418.96 L1331.95 1424.5 Q1328.8 1425.83 1325.49 1426.53 Q1322.18 1427.23 1318.78 1427.23 Q1310.25 1427.23 1305.25 1422.27 Q1300.29 1417.3 1300.29 1408.84 Q1300.29 1400.08 1305 1394.96 Q1309.74 1389.8 1317.76 1389.8 Q1324.95 1389.8 1329.12 1394.45 Q1333.32 1399.07 1333.32 1407.02 M1327.47 1405.3 Q1327.4 1400.5 1324.76 1397.63 Q1322.15 1394.77 1317.82 1394.77 Q1312.92 1394.77 1309.96 1397.54 Q1307.03 1400.31 1306.59 1405.34 L1327.47 1405.3 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip450)\" d=\"M1348.6 1420.96 L1348.6 1439.87 L1342.71 1439.87 L1342.71 1390.66 L1348.6 1390.66 L1348.6 1396.07 Q1350.45 1392.89 1353.25 1391.36 Q1356.08 1389.8 1360 1389.8 Q1366.49 1389.8 1370.53 1394.96 Q1374.6 1400.12 1374.6 1408.52 Q1374.6 1416.92 1370.53 1422.08 Q1366.49 1427.23 1360 1427.23 Q1356.08 1427.23 1353.25 1425.71 Q1350.45 1424.15 1348.6 1420.96 M1368.53 1408.52 Q1368.53 1402.06 1365.85 1398.4 Q1363.21 1394.71 1358.56 1394.71 Q1353.92 1394.71 1351.24 1398.4 Q1348.6 1402.06 1348.6 1408.52 Q1348.6 1414.98 1351.24 1418.67 Q1353.92 1422.33 1358.56 1422.33 Q1363.21 1422.33 1365.85 1418.67 Q1368.53 1414.98 1368.53 1408.52 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><polyline clip-path=\"url(#clip450)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"404.284,1281.45 404.284,188.976 \"/>\n<polyline clip-path=\"url(#clip450)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"404.284,1260.84 423.181,1260.84 \"/>\n<polyline clip-path=\"url(#clip450)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"404.284,1003.17 423.181,1003.17 \"/>\n<polyline clip-path=\"url(#clip450)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"404.284,745.5 423.181,745.5 \"/>\n<polyline clip-path=\"url(#clip450)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"404.284,487.832 423.181,487.832 \"/>\n<polyline clip-path=\"url(#clip450)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"404.284,230.164 423.181,230.164 \"/>\n<path clip-path=\"url(#clip450)\" d=\"M356.339 1246.63 Q352.728 1246.63 350.899 1250.2 Q349.094 1253.74 349.094 1260.87 Q349.094 1267.98 350.899 1271.54 Q352.728 1275.08 356.339 1275.08 Q359.973 1275.08 361.779 1271.54 Q363.608 1267.98 363.608 1260.87 Q363.608 1253.74 361.779 1250.2 Q359.973 1246.63 356.339 1246.63 M356.339 1242.93 Q362.149 1242.93 365.205 1247.54 Q368.284 1252.12 368.284 1260.87 Q368.284 1269.6 365.205 1274.2 Q362.149 1278.79 356.339 1278.79 Q350.529 1278.79 347.45 1274.2 Q344.395 1269.6 344.395 1260.87 Q344.395 1252.12 347.45 1247.54 Q350.529 1242.93 356.339 1242.93 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip450)\" d=\"M290.043 1016.51 L306.363 1016.51 L306.363 1020.45 L284.418 1020.45 L284.418 1016.51 Q287.08 1013.76 291.664 1009.13 Q296.27 1004.48 297.451 1003.13 Q299.696 1000.61 300.576 998.874 Q301.478 997.114 301.478 995.425 Q301.478 992.67 299.534 990.934 Q297.613 989.198 294.511 989.198 Q292.312 989.198 289.858 989.962 Q287.427 990.725 284.65 992.276 L284.65 987.554 Q287.474 986.42 289.927 985.841 Q292.381 985.263 294.418 985.263 Q299.789 985.263 302.983 987.948 Q306.177 990.633 306.177 995.124 Q306.177 997.253 305.367 999.175 Q304.58 1001.07 302.474 1003.67 Q301.895 1004.34 298.793 1007.55 Q295.691 1010.75 290.043 1016.51 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip450)\" d=\"M316.224 985.888 L334.58 985.888 L334.58 989.823 L320.506 989.823 L320.506 998.295 Q321.524 997.948 322.543 997.786 Q323.562 997.6 324.58 997.6 Q330.367 997.6 333.747 1000.77 Q337.126 1003.94 337.126 1009.36 Q337.126 1014.94 333.654 1018.04 Q330.182 1021.12 323.862 1021.12 Q321.687 1021.12 319.418 1020.75 Q317.173 1020.38 314.765 1019.64 L314.765 1014.94 Q316.849 1016.07 319.071 1016.63 Q321.293 1017.18 323.77 1017.18 Q327.774 1017.18 330.112 1015.08 Q332.45 1012.97 332.45 1009.36 Q332.45 1005.75 330.112 1003.64 Q327.774 1001.54 323.77 1001.54 Q321.895 1001.54 320.02 1001.95 Q318.168 1002.37 316.224 1003.25 L316.224 985.888 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip450)\" d=\"M356.339 988.966 Q352.728 988.966 350.899 992.531 Q349.094 996.073 349.094 1003.2 Q349.094 1010.31 350.899 1013.87 Q352.728 1017.42 356.339 1017.42 Q359.973 1017.42 361.779 1013.87 Q363.608 1010.31 363.608 1003.2 Q363.608 996.073 361.779 992.531 Q359.973 988.966 356.339 988.966 M356.339 985.263 Q362.149 985.263 365.205 989.869 Q368.284 994.452 368.284 1003.2 Q368.284 1011.93 365.205 1016.54 Q362.149 1021.12 356.339 1021.12 Q350.529 1021.12 347.45 1016.54 Q344.395 1011.93 344.395 1003.2 Q344.395 994.452 347.45 989.869 Q350.529 985.263 356.339 985.263 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip450)\" d=\"M286.062 728.22 L304.418 728.22 L304.418 732.155 L290.344 732.155 L290.344 740.627 Q291.363 740.28 292.381 740.118 Q293.4 739.933 294.418 739.933 Q300.205 739.933 303.585 743.104 Q306.964 746.275 306.964 751.692 Q306.964 757.271 303.492 760.372 Q300.02 763.451 293.701 763.451 Q291.525 763.451 289.256 763.081 Q287.011 762.71 284.603 761.97 L284.603 757.271 Q286.687 758.405 288.909 758.96 Q291.131 759.516 293.608 759.516 Q297.613 759.516 299.951 757.409 Q302.288 755.303 302.288 751.692 Q302.288 748.081 299.951 745.974 Q297.613 743.868 293.608 743.868 Q291.733 743.868 289.858 744.285 Q288.006 744.701 286.062 745.581 L286.062 728.22 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip450)\" d=\"M326.177 731.298 Q322.566 731.298 320.737 734.863 Q318.932 738.405 318.932 745.535 Q318.932 752.641 320.737 756.206 Q322.566 759.747 326.177 759.747 Q329.811 759.747 331.617 756.206 Q333.446 752.641 333.446 745.535 Q333.446 738.405 331.617 734.863 Q329.811 731.298 326.177 731.298 M326.177 727.595 Q331.987 727.595 335.043 732.201 Q338.122 736.785 338.122 745.535 Q338.122 754.261 335.043 758.868 Q331.987 763.451 326.177 763.451 Q320.367 763.451 317.288 758.868 Q314.233 754.261 314.233 745.535 Q314.233 736.785 317.288 732.201 Q320.367 727.595 326.177 727.595 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip450)\" d=\"M356.339 731.298 Q352.728 731.298 350.899 734.863 Q349.094 738.405 349.094 745.535 Q349.094 752.641 350.899 756.206 Q352.728 759.747 356.339 759.747 Q359.973 759.747 361.779 756.206 Q363.608 752.641 363.608 745.535 Q363.608 738.405 361.779 734.863 Q359.973 731.298 356.339 731.298 M356.339 727.595 Q362.149 727.595 365.205 732.201 Q368.284 736.785 368.284 745.535 Q368.284 754.261 365.205 758.868 Q362.149 763.451 356.339 763.451 Q350.529 763.451 347.45 758.868 Q344.395 754.261 344.395 745.535 Q344.395 736.785 347.45 732.201 Q350.529 727.595 356.339 727.595 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip450)\" d=\"M284.835 470.552 L307.057 470.552 L307.057 472.543 L294.511 505.112 L289.627 505.112 L301.432 474.487 L284.835 474.487 L284.835 470.552 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip450)\" d=\"M316.224 470.552 L334.58 470.552 L334.58 474.487 L320.506 474.487 L320.506 482.959 Q321.524 482.612 322.543 482.45 Q323.562 482.265 324.58 482.265 Q330.367 482.265 333.747 485.436 Q337.126 488.608 337.126 494.024 Q337.126 499.603 333.654 502.705 Q330.182 505.783 323.862 505.783 Q321.687 505.783 319.418 505.413 Q317.173 505.043 314.765 504.302 L314.765 499.603 Q316.849 500.737 319.071 501.293 Q321.293 501.848 323.77 501.848 Q327.774 501.848 330.112 499.742 Q332.45 497.635 332.45 494.024 Q332.45 490.413 330.112 488.307 Q327.774 486.2 323.77 486.2 Q321.895 486.2 320.02 486.617 Q318.168 487.033 316.224 487.913 L316.224 470.552 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip450)\" d=\"M356.339 473.631 Q352.728 473.631 350.899 477.196 Q349.094 480.737 349.094 487.867 Q349.094 494.973 350.899 498.538 Q352.728 502.08 356.339 502.08 Q359.973 502.08 361.779 498.538 Q363.608 494.973 363.608 487.867 Q363.608 480.737 361.779 477.196 Q359.973 473.631 356.339 473.631 M356.339 469.927 Q362.149 469.927 365.205 474.534 Q368.284 479.117 368.284 487.867 Q368.284 496.594 365.205 501.2 Q362.149 505.783 356.339 505.783 Q350.529 505.783 347.45 501.2 Q344.395 496.594 344.395 487.867 Q344.395 479.117 347.45 474.534 Q350.529 469.927 356.339 469.927 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip450)\" d=\"M256.664 243.509 L264.303 243.509 L264.303 217.144 L255.992 218.81 L255.992 214.551 L264.256 212.884 L268.932 212.884 L268.932 243.509 L276.571 243.509 L276.571 247.444 L256.664 247.444 L256.664 243.509 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip450)\" d=\"M296.015 215.963 Q292.404 215.963 290.576 219.528 Q288.77 223.069 288.77 230.199 Q288.77 237.305 290.576 240.87 Q292.404 244.412 296.015 244.412 Q299.65 244.412 301.455 240.87 Q303.284 237.305 303.284 230.199 Q303.284 223.069 301.455 219.528 Q299.65 215.963 296.015 215.963 M296.015 212.259 Q301.826 212.259 304.881 216.866 Q307.96 221.449 307.96 230.199 Q307.96 238.926 304.881 243.532 Q301.826 248.116 296.015 248.116 Q290.205 248.116 287.127 243.532 Q284.071 238.926 284.071 230.199 Q284.071 221.449 287.127 216.866 Q290.205 212.259 296.015 212.259 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip450)\" d=\"M326.177 215.963 Q322.566 215.963 320.737 219.528 Q318.932 223.069 318.932 230.199 Q318.932 237.305 320.737 240.87 Q322.566 244.412 326.177 244.412 Q329.811 244.412 331.617 240.87 Q333.446 237.305 333.446 230.199 Q333.446 223.069 331.617 219.528 Q329.811 215.963 326.177 215.963 M326.177 212.259 Q331.987 212.259 335.043 216.866 Q338.122 221.449 338.122 230.199 Q338.122 238.926 335.043 243.532 Q331.987 248.116 326.177 248.116 Q320.367 248.116 317.288 243.532 Q314.233 238.926 314.233 230.199 Q314.233 221.449 317.288 216.866 Q320.367 212.259 326.177 212.259 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip450)\" d=\"M356.339 215.963 Q352.728 215.963 350.899 219.528 Q349.094 223.069 349.094 230.199 Q349.094 237.305 350.899 240.87 Q352.728 244.412 356.339 244.412 Q359.973 244.412 361.779 240.87 Q363.608 237.305 363.608 230.199 Q363.608 223.069 361.779 219.528 Q359.973 215.963 356.339 215.963 M356.339 212.259 Q362.149 212.259 365.205 216.866 Q368.284 221.449 368.284 230.199 Q368.284 238.926 365.205 243.532 Q362.149 248.116 356.339 248.116 Q350.529 248.116 347.45 243.532 Q344.395 238.926 344.395 230.199 Q344.395 221.449 347.45 216.866 Q350.529 212.259 356.339 212.259 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip450)\" d=\"M184.22 784.801 L205.736 784.801 L205.736 790.657 L184.411 790.657 Q179.351 790.657 176.836 792.631 Q174.322 794.604 174.322 798.551 Q174.322 803.293 177.345 806.03 Q180.369 808.768 185.589 808.768 L205.736 808.768 L205.736 814.656 L170.088 814.656 L170.088 808.768 L175.627 808.768 Q172.412 806.667 170.821 803.834 Q169.229 800.97 169.229 797.246 Q169.229 791.103 173.049 787.952 Q176.836 784.801 184.22 784.801 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip450)\" d=\"M174.194 759.306 Q174.194 764.017 177.886 766.754 Q181.547 769.491 187.944 769.491 Q194.342 769.491 198.034 766.786 Q201.694 764.049 201.694 759.306 Q201.694 754.627 198.002 751.89 Q194.31 749.153 187.944 749.153 Q181.61 749.153 177.918 751.89 Q174.194 754.627 174.194 759.306 M169.229 759.306 Q169.229 751.667 174.194 747.307 Q179.16 742.946 187.944 742.946 Q196.697 742.946 201.694 747.307 Q206.659 751.667 206.659 759.306 Q206.659 766.977 201.694 771.337 Q196.697 775.666 187.944 775.666 Q179.16 775.666 174.194 771.337 Q169.229 766.977 169.229 759.306 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip450)\" d=\"M175.563 712.582 Q174.99 713.569 174.735 714.746 Q174.449 715.892 174.449 717.293 Q174.449 722.258 177.696 724.931 Q180.91 727.573 186.958 727.573 L205.736 727.573 L205.736 733.461 L170.088 733.461 L170.088 727.573 L175.627 727.573 Q172.38 725.727 170.821 722.767 Q169.229 719.807 169.229 715.574 Q169.229 714.969 169.325 714.237 Q169.388 713.505 169.547 712.614 L175.563 712.582 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip450)\" d=\"M176.932 679.83 Q172.985 677.634 171.107 674.579 Q169.229 671.523 169.229 667.385 Q169.229 661.815 173.144 658.792 Q177.027 655.768 184.22 655.768 L205.736 655.768 L205.736 661.656 L184.411 661.656 Q179.287 661.656 176.804 663.47 Q174.322 665.285 174.322 669.009 Q174.322 673.56 177.345 676.202 Q180.369 678.844 185.589 678.844 L205.736 678.844 L205.736 684.732 L184.411 684.732 Q179.255 684.732 176.804 686.546 Q174.322 688.36 174.322 692.148 Q174.322 696.636 177.377 699.278 Q180.401 701.919 185.589 701.919 L205.736 701.919 L205.736 707.808 L170.088 707.808 L170.088 701.919 L175.627 701.919 Q172.348 699.914 170.789 697.113 Q169.229 694.312 169.229 690.461 Q169.229 686.578 171.202 683.873 Q173.176 681.135 176.932 679.83 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><polyline clip-path=\"url(#clip452)\" style=\"stroke:#e26f46; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" stroke-dasharray=\"16, 10\" points=\"-1402.46,230.164 4017.76,230.164 \"/>\n<polyline clip-path=\"url(#clip452)\" style=\"stroke:#009af9; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"455.418,1250.53 455.986,1250.45 456.554,1250.31 457.123,1250.09 457.691,1249.81 458.259,1249.47 458.828,1249.06 459.396,1248.58 459.964,1247.01 460.533,1246.43 461.101,1245.76 461.669,1245.03 462.238,1243.17 462.806,1241.26 463.375,1240.31 463.943,1239.26 464.511,1236.05 465.08,1234.84 465.648,1232.43 466.216,1230.97 466.785,1229.4 467.353,1227.67 467.921,1225.82 468.49,1223.88 469.058,1221.77 469.626,1219.5 470.195,1217.06 470.763,1214.48 471.331,1211.72 471.9,1208.8 472.468,1204.61 473.036,1200.34 473.605,1196.89 474.173,1193.23 474.741,1189.4 475.31,1184.31 475.878,1180.03 476.446,1175.55 477.015,1170.8 477.583,1165.91 478.152,1159.72 478.72,1153.31 479.288,1144.61 479.857,1138.73 480.425,1131.6 480.993,1124.24 481.562,1117.67 482.13,1108.85 482.698,1100.87 483.267,1093.63 483.835,1086.16 484.403,1076.38 484.972,1067.57 485.54,1057.64 486.108,1047.42 486.677,1036.99 487.245,1027.4 487.813,1016.74 488.382,1006.89 488.95,997.955 489.518,988.917 490.087,979.727 490.655,970.443 491.224,959.009 491.792,948.456 492.36,937.833 492.929,928.261 493.497,916.475 494.065,903.695 494.634,892.013 495.202,880.335 495.77,868.696 496.339,858.092 496.907,848.671 497.475,837.029 498.044,825.524 498.612,814.989 499.18,805.571 499.749,793.133 500.317,783.74 500.885,771.327 501.454,762.175 502.022,748.795 502.59,740.894 503.159,730.971 503.727,722.098 504.295,711.122 504.864,701.48 505.432,691.828 506.001,681.292 506.569,671.82 507.137,662.445 507.706,652.249 508.274,643.081 508.842,633.172 509.411,623.331 509.979,614.706 510.547,605.304 511.116,597.962 511.684,587.764 512.252,577.85 512.821,569.143 513.389,562.53 513.957,555.04 514.526,547.752 515.094,539.443 515.662,531.47 516.231,525.617 516.799,517.746 517.367,512.16 517.936,506.565 518.504,502.025 519.072,493.342 519.641,486.901 520.209,480.591 520.778,474.428 521.346,469.419 521.914,464.779 522.483,458.884 523.051,454.211 523.619,446.405 524.188,439.936 524.756,433.684 525.324,430.69 525.893,426.57 526.461,423.59 527.029,417.486 527.598,414.65 528.166,409.749 528.734,406.749 529.303,400.966 529.871,394.33 530.439,388.912 531.008,384.744 531.576,380.629 532.144,377.84 532.713,375.053 533.281,370.92 533.85,365.002 534.418,362.401 534.986,358.959 535.555,355.401 536.123,351.012 536.691,346.712 537.26,343.689 537.828,341.66 538.396,338.696 538.965,335.646 539.533,332.836 540.101,327.994 540.67,326.425 541.238,321.725 541.806,321.709 542.375,318.486 542.943,316.27 543.511,311.766 544.08,310.777 544.648,308.703 545.216,305.859 545.785,302.011 546.353,300.505 546.921,295.94 547.49,294.688 548.058,295.275 548.627,293.955 549.195,294.561 549.763,296.06 550.332,293.472 550.9,292.044 551.468,291.463 552.037,291.203 552.605,288.588 553.173,287.12 553.742,286.894 554.31,285.581 554.878,282.036 555.447,281.775 556.015,281.217 556.583,279.826 557.152,279.678 557.72,279.264 558.288,278.894 558.857,277.655 559.425,274.323 559.993,276.129 560.562,274.963 561.13,273.674 561.698,272.401 562.267,273.16 562.835,270.82 563.404,271.657 563.972,272.21 564.54,271.732 565.109,269.286 565.677,269.012 566.245,269.463 566.814,266.102 567.382,263.963 567.95,263.98 568.519,264.101 569.087,266.143 569.655,266.819 570.224,265.372 570.792,264.855 571.36,263.537 571.929,261.241 572.497,259.944 573.065,258.827 573.634,257.727 574.202,257.725 574.77,258.862 575.339,256.568 575.907,255.504 576.476,256.313 577.044,256.154 577.612,253.119 578.181,253.307 578.749,252.498 579.317,252.751 579.886,251.842 580.454,251.931 581.022,252.122 581.591,251.351 582.159,250.481 582.727,251.673 583.296,250.722 583.864,251.078 584.432,251.277 585.001,250.605 585.569,250.837 586.137,251.937 586.706,251.951 587.274,251.945 587.842,252.975 588.411,251.906 588.979,251.942 589.547,251.693 590.116,248.458 590.684,247.385 591.253,246.466 591.821,247.495 592.389,245.651 592.958,246.878 593.526,247.05 594.094,247.121 594.663,247.23 595.231,246.347 595.799,246.244 596.368,247.136 596.936,246.998 597.504,245.946 598.073,246.992 598.641,245.993 599.209,244.853 599.778,246.207 600.346,244.146 600.914,243.272 601.483,243.282 602.051,241.564 602.619,241.644 603.188,240.934 603.756,241.3 604.325,241.57 604.893,243.826 605.461,244.835 606.03,244.832 606.598,242.791 607.166,245.97 607.735,247.039 608.303,246.797 608.871,244.525 609.44,244.532 610.008,245.37 610.576,243.191 611.145,243.122 611.713,243.197 612.281,242.088 612.85,242.059 613.418,240.11 613.986,242.421 614.555,243.618 615.123,243.457 615.691,243.143 616.26,242.122 616.828,242.24 617.396,243.003 617.965,244.134 618.533,243.988 619.102,245.851 619.67,245.627 620.238,245.342 620.807,244.098 621.375,244.922 621.943,244.858 622.512,245.648 623.08,245.207 623.648,244.716 624.217,242.46 624.785,239.129 625.353,241.406 625.922,240.444 626.49,240.299 627.058,240.217 627.627,240.101 628.195,239.051 628.763,241.259 629.332,240.068 629.9,241.121 630.468,241.168 631.037,241.158 631.605,240.164 632.173,237.004 632.742,235.004 633.31,235.383 633.879,237.507 634.447,237.693 635.015,238.608 635.584,238.817 636.152,239.977 636.72,237.57 637.289,238.574 637.857,238.502 638.425,238.296 638.994,235.239 639.562,233.551 640.13,233.633 640.699,234.004 641.267,234.093 641.835,233.156 642.404,232.613 642.972,232.023 643.54,233.449 644.109,234.81 644.677,233.023 645.245,233.325 645.814,233.667 646.382,235.032 646.951,236.121 647.519,233.143 648.087,234.372 648.656,237.5 649.224,235.345 649.792,235.557 650.361,235.687 650.929,235.89 651.497,239.892 652.066,239.833 652.634,239.654 653.202,237.091 653.771,235.196 654.339,235.297 654.907,235.387 655.476,237.436 656.044,236.33 656.612,237.327 657.181,237.002 657.749,237.902 658.317,234.712 658.886,232.839 659.454,231.138 660.022,230.458 660.591,231.906 661.159,232.009 661.728,232.411 662.296,232.732 662.864,233.167 663.433,234.276 664.001,234.413 664.569,232.19 665.138,231.592 665.706,231.843 666.274,232.203 666.843,229.628 667.411,229.997 667.979,230.362 668.548,229.637 669.116,227.052 669.684,224.558 670.253,225.573 670.821,226.156 671.389,225.744 671.958,225.613 672.526,225.088 673.094,223.942 673.663,227.009 674.231,227.955 674.799,228.777 675.368,229.496 675.936,232.246 676.505,232.688 677.073,233.909 677.641,236.409 678.21,235.512 678.778,239.512 679.346,238.296 679.915,238.192 680.483,237.111 681.051,238.182 681.62,238.16 682.188,238.073 682.756,240.136 683.325,239.877 683.893,239.601 684.461,240.261 685.03,243.061 685.598,242.544 686.166,240.069 686.735,237.629 687.303,236.335 687.871,236.298 688.44,237.373 689.008,236.335 689.577,236.245 690.145,236.165 690.713,235.104 691.282,236.17 691.85,236.077 692.418,237.105 692.987,236.796 693.555,235.572 694.123,236.384 694.692,237.33 695.26,237.14 695.828,237.889 696.397,235.587 696.965,233.526 697.533,232.658 698.102,232.873 698.67,231.08 699.238,230.014 699.807,234.274 700.375,232.254 700.943,232.396 701.512,232.482 702.08,231.234 702.648,230.355 703.217,229.624 703.785,229.741 704.354,230.962 704.922,228.245 705.49,230.745 706.059,231.092 706.627,232.324 707.195,229.181 707.764,230.571 708.332,227.667 708.9,229.301 709.469,229.62 710.037,231.1 710.605,231.19 711.174,232.331 711.742,229.47 712.31,231.824 712.879,232.038 713.447,232.294 714.015,231.665 714.584,235.009 715.152,231.956 715.72,232.13 716.289,233.368 716.857,232.479 717.425,233.661 717.994,235.67 718.562,235.58 719.131,233.369 719.699,233.393 720.267,233.6 720.836,233.727 721.404,233.829 721.972,232.951 722.541,234.06 723.109,236.283 723.677,235.03 724.246,234.951 724.814,233.804 725.382,234.063 725.951,233.925 726.519,233.845 727.087,234.781 727.656,233.611 728.224,233.389 728.792,233.317 729.361,233.182 729.929,233.299 730.497,232.103 731.066,231.039 731.634,230.144 732.203,231.438 732.771,232.484 733.339,231.363 733.908,233.62 734.476,232.549 735.044,231.527 735.613,231.431 736.181,232.523 736.749,232.669 737.318,233.634 737.886,233.761 738.454,233.646 739.023,233.634 739.591,232.55 740.159,233.595 740.728,233.349 741.296,234.371 741.864,232.933 742.433,229.938 743.001,229.217 743.569,228.569 744.138,229.115 744.706,229.734 745.274,230.986 745.843,232.138 746.411,232.305 746.98,230.372 747.548,231.758 748.116,235.23 748.685,236.196 749.253,234.858 749.821,233.962 750.39,233.919 750.958,231.84 751.526,231.963 752.095,231.038 752.663,234.482 753.231,234.389 753.8,233.292 754.368,233.332 754.936,233.106 755.505,236.042 756.073,235.735 756.641,233.696 757.21,233.623 757.778,235.718 758.346,232.618 758.915,232.639 759.483,231.544 760.052,229.495 760.62,230.699 761.188,230.773 761.757,230.981 762.325,231.153 762.893,232.183 763.462,233.057 764.03,232.132 764.598,231.105 765.167,231.084 765.735,232.294 766.303,231.227 766.872,229.448 767.44,228.831 768.008,227.96 768.577,229.354 769.145,229.699 769.713,230.992 770.282,231.144 770.85,232.392 771.418,231.385 771.987,231.681 772.555,232.842 773.123,230.87 773.692,231.079 774.26,232.05 774.829,231.804 775.397,233.999 775.965,234.953 776.534,234.8 777.102,232.508 777.67,233.635 778.239,233.472 778.807,233.236 779.375,233.979 779.944,233.815 780.512,232.666 781.08,232.501 781.649,231.366 782.217,231.35 782.785,231.215 783.354,231.162 783.922,232.113 784.49,233.001 785.059,235.12 785.627,233.853 786.195,232.418 786.764,233.518 787.332,232.479 787.9,233.485 788.469,233.383 789.037,233.293 789.606,234.105 790.174,233.95 790.742,230.459 791.311,226.413 791.879,225.637 792.447,229.039 793.016,228.975 793.584,232.112 794.152,231.989 794.721,230.939 795.289,228.945 795.857,230.176 796.426,230.247 796.994,231.394 797.562,231.352 798.131,233.352 798.699,232.221 799.267,231.094 799.836,231.138 800.404,230.941 800.972,230.865 801.541,230.888 802.109,231.865 802.678,231.694 803.246,229.428 803.814,228.875 804.383,228.014 804.951,228.196 805.519,230.548 806.088,231.632 806.656,229.744 807.224,228.899 807.793,232.321 808.361,233.204 808.929,234.013 809.498,234.95 810.066,234.735 810.634,234.407 811.203,234.143 811.771,236.163 812.339,236.832 812.908,236.542 813.476,235.227 814.044,234.704 814.613,233.272 815.181,231.926 815.749,230.615 816.318,230.666 816.886,230.45 817.455,230.386 818.023,231.439 818.591,232.51 819.16,232.104 819.728,230.953 820.296,229.905 820.865,229.944 821.433,229.946 822.001,231.112 822.57,232.075 823.138,230.946 823.706,231.849 824.275,232.981 824.843,231.618 825.411,232.505 825.98,231.474 826.548,231.406 827.116,230.188 827.685,229.032 828.253,231.386 828.821,232.242 829.39,232.1 829.958,232.062 830.526,230.9 831.095,230.077 831.663,229.203 832.232,229.546 832.8,229.851 833.368,229.13 833.937,229.356 834.505,228.638 835.073,226.89 835.642,226.909 836.21,225.01 836.778,225.547 837.347,227.695 837.915,228.831 838.483,229.011 839.052,228.098 839.62,229.563 840.188,231.749 840.757,231.405 841.325,231.161 841.893,232.332 842.462,232.341 843.03,229.193 843.598,228.334 844.167,227.629 844.735,228.835 845.304,229.869 845.872,229.259 846.44,231.542 847.009,230.391 847.577,230.399 848.145,231.721 848.714,229.797 849.282,229.768 849.85,228.944 850.419,227.113 850.987,226.281 851.555,225.542 852.124,224.971 852.692,226.519 853.26,227.957 853.829,228.054 854.397,226.151 854.965,225.539 855.534,225.97 856.102,227.216 856.67,227.415 857.239,226.721 857.807,228.168 858.375,229.418 858.944,228.727 859.512,231.062 860.081,231.11 860.649,232.463 861.217,232.851 861.786,231.857 862.354,229.643 862.922,230.798 863.491,231.782 864.059,233.822 864.627,234.856 865.196,234.634 865.764,235.519 866.332,236.248 866.901,233.113 867.469,231.823 868.037,230.797 868.606,228.774 869.174,229.026 869.742,228.451 870.311,227.554 870.879,227.819 871.447,229.953 872.016,229.8 872.584,228.959 873.152,228.402 873.721,228.795 874.289,231.246 874.858,230.258 875.426,233.499 875.994,232.385 876.563,234.382 877.131,235.118 877.699,234.826 878.268,234.865 878.836,232.629 879.404,232.685 879.973,232.526 880.541,232.586 881.109,230.444 881.678,229.673 882.246,230.141 882.814,230.088 883.383,231.266 883.951,232.28 884.519,234.42 885.088,234.556 885.656,237.567 886.224,240.359 886.793,239.757 887.361,240.392 887.93,239.735 888.498,240.242 889.066,239.591 889.635,239.818 890.203,238.062 890.771,234.424 891.34,230.016 891.908,228.971 892.476,230.025 893.045,230.132 893.613,231.185 894.181,227.017 894.75,227.258 895.318,227.356 895.886,226.529 896.455,225.598 897.023,224.825 897.591,226.091 898.16,228.118 898.728,230.468 899.296,231.393 899.865,232.211 900.433,231.095 901.001,229.959 901.57,225.93 902.138,226.235 902.707,226.427 903.275,230.026 903.843,232.249 904.412,234.359 904.98,234.114 905.548,232.741 906.117,231.373 906.685,228.245 907.253,229.31 907.822,229.42 908.39,228.411 908.958,227.134 909.527,229.345 910.095,229.536 910.663,232.776 911.232,232.363 911.8,231.283 912.368,230.563 912.937,230.655 913.505,228.611 914.073,227.819 914.642,227.88 915.21,227.143 915.779,227.54 916.347,227.86 916.915,231.186 917.484,232.088 918.052,232.808 918.62,233.687 919.189,232.452 919.757,233.248 920.325,233.795 920.894,232.483 921.462,231.322 922.03,231.128 922.599,230.065 923.167,229.203 923.735,229.196 924.304,228.295 924.872,229.783 925.44,229.932 926.009,227.88 926.577,227.096 927.145,227.277 927.714,228.596 928.282,227.71 928.85,227.896 929.419,227.135 929.987,228.285 930.556,228.465 931.124,228.675 931.692,227.163 932.261,227.515 932.829,229.95 933.397,233.24 933.966,231.774 934.534,229.676 935.102,230.545 935.671,227.514 936.239,227.83 936.807,227.06 937.376,228.601 937.944,227.93 938.512,227.077 939.081,225.176 939.649,224.469 940.217,223.728 940.786,224.03 941.354,225.438 941.922,227.213 942.491,229.327 943.059,229.441 943.627,231.835 944.196,229.727 944.764,228.756 945.333,231.094 945.901,230.256 946.469,229.339 947.038,231.597 947.606,231.565 948.174,231.603 948.743,230.696 949.311,229.773 949.879,228.843 950.448,230.877 951.016,229.898 951.584,230.068 952.153,231.531 952.721,227.639 953.289,227.917 953.858,226.027 954.426,226.414 954.994,230.956 955.563,232.112 956.131,232.329 956.699,232.152 957.268,232.17 957.836,231.252 958.405,232.26 958.973,229.09 959.541,229.293 960.11,231.498 960.678,229.483 961.246,228.611 961.815,226.986 962.383,225.163 962.951,226.446 963.52,224.585 964.088,226.135 964.656,226.463 965.225,227.799 965.793,226.179 966.361,226.639 966.93,227.147 967.498,228.462 968.066,230.795 968.635,230.89 969.203,231.018 969.771,233.273 970.34,235.276 970.908,233.927 971.476,233.713 972.045,232.574 972.613,234.606 973.182,235.535 973.75,233.118 974.318,232.91 974.887,232.842 975.455,235.123 976.023,235.76 976.592,239.6 977.16,238.899 977.728,239.601 978.297,238.96 978.865,239.586 979.433,238.157 980.002,236.445 980.57,233.78 981.138,232.519 981.707,231.206 982.275,231.183 982.843,231.08 983.412,231.39 983.98,232.346 984.548,231.308 985.117,230.241 985.685,228.456 986.253,230.379 986.822,229.442 987.39,230.467 987.959,232.221 988.527,232.015 989.095,230.897 989.664,232.951 990.232,231.73 990.8,232.612 991.369,233.467 991.937,233.374 992.505,232.207 993.074,233.902 993.642,232.525 994.21,231.328 994.779,230.169 995.347,230.149 995.915,231.14 996.484,231.175 997.052,233.147 997.62,234.083 998.189,233.93 998.757,236.618 999.325,236.055 999.894,235.514 1000.46,232.861 1001.03,231.683 1001.6,229.342 1002.17,226.15 1002.74,225.466 1003.3,225.919 1003.87,227.282 1004.44,227.584 1005.01,229.876 1005.58,230.109 1006.15,229.961 1006.71,227.862 1007.28,229.09 1007.85,228.344 1008.42,228.459 1008.99,227.492 1009.56,226.934 1010.12,225.19 1010.69,226.376 1011.26,225.498 1011.83,225.813 1012.4,226.247 1012.97,227.446 1013.53,229.825 1014.1,229.877 1014.67,232.038 1015.24,232.997 1015.81,231.889 1016.38,233.229 1016.94,231.999 1017.51,232.697 1018.08,232.475 1018.65,231.352 1019.22,231.405 1019.79,231.359 1020.35,231.486 1020.92,230.42 1021.49,229.492 1022.06,229.619 1022.63,230.429 1023.2,230.575 1023.76,230.579 1024.33,231.69 1024.9,232.647 1025.47,231.53 1026.04,233.684 1026.61,231.487 1027.17,229.194 1027.74,229.265 1028.31,229.318 1028.88,227.285 1029.45,227.454 1030.02,226.523 1030.58,224.757 1031.15,225.021 1031.72,224.332 1032.29,224.734 1032.86,224.36 1033.43,223.761 1033.99,223.981 1034.56,224.593 1035.13,225.211 1035.7,225.694 1036.27,226.377 1036.84,224.535 1037.4,226.039 1037.97,230.497 1038.54,230.667 1039.11,230.631 1039.68,229.701 1040.25,232.712 1040.81,231.654 1041.38,232.683 1041.95,232.525 1042.52,234.221 1043.09,234.984 1043.66,232.651 1044.22,233.522 1044.79,232.449 1045.36,231.461 1045.93,229.087 1046.5,229.065 1047.07,227.188 1047.63,225.472 1048.2,228.798 1048.77,226.981 1049.34,227.424 1049.91,228.964 1050.48,229.21 1051.05,229.473 1051.61,230.746 1052.18,229.723 1052.75,229.761 1053.32,231.862 1053.89,231.845 1054.46,233.96 1055.02,234.642 1055.59,234.381 1056.16,235.021 1056.73,234.804 1057.3,234.455 1057.87,234.207 1058.43,232.763 1059,233.695 1059.57,236.609 1060.14,237.032 1060.71,235.54 1061.28,234.222 1061.84,232.939 1062.41,233.826 1062.98,233.822 1063.55,232.526 1064.12,233.485 1064.69,230.346 1065.25,231.392 1065.82,231.397 1066.39,229.103 1066.96,229.163 1067.53,229.169 1068.1,229.214 1068.66,229.2 1069.23,231.598 1069.8,231.645 1070.37,232.624 1070.94,233.587 1071.51,233.126 1072.07,233.131 1072.64,232.863 1073.21,233.717 1073.78,233.491 1074.35,233.078 1074.92,233.001 1075.48,232.809 1076.05,231.635 1076.62,232.585 1077.19,234.535 1077.76,233.14 1078.33,234.016 1078.89,233.613 1079.46,232.204 1080.03,234.096 1080.6,234.791 1081.17,234.374 1081.74,233.01 1082.3,233.89 1082.87,234.775 1083.44,235.437 1084.01,234.74 1084.58,234.216 1085.15,235.069 1085.71,234.522 1086.28,233.165 1086.85,233.793 1087.42,231.338 1087.99,232.16 1088.56,232.738 1089.12,232.549 1089.69,231.277 1090.26,233.283 1090.83,233.937 1091.4,231.518 1091.97,231.264 1092.53,229.973 1093.1,229.935 1093.67,229.79 1094.24,231.627 1094.81,231.501 1095.38,230.311 1095.94,231.077 1096.51,231.598 1097.08,230.273 1097.65,231.263 1098.22,230.198 1098.79,227.916 1099.35,227.103 1099.92,227.473 1100.49,229.538 1101.06,229.713 1101.63,229.478 1102.2,229.586 1102.76,230.467 1103.33,231.364 1103.9,231.154 1104.47,232.102 1105.04,230.586 1105.61,231.658 1106.17,232.365 1106.74,231.069 1107.31,231.94 1107.88,229.5 1108.45,226.493 1109.02,225.543 1109.58,224.773 1110.15,225.993 1110.72,226.107 1111.29,225.217 1111.86,225.387 1112.43,227.71 1112.99,227.864 1113.56,226.747 1114.13,225.035 1114.7,224.505 1115.27,225.67 1115.84,225.994 1116.4,227.089 1116.97,227.999 1117.54,228.104 1118.11,228.488 1118.68,226.545 1119.25,227.84 1119.81,229.043 1120.38,227.001 1120.95,227.217 1121.52,226.338 1122.09,225.816 1122.66,225.102 1123.23,225.47 1123.79,224.953 1124.36,224.313 1124.93,225.071 1125.5,228.383 1126.07,229.571 1126.64,231.339 1127.2,230.083 1127.77,230.849 1128.34,230.628 1128.91,231.445 1129.48,230.34 1130.05,230.247 1130.61,230.226 1131.18,230.164 1131.75,231.004 1132.32,230.744 1132.89,230.648 1133.46,232.832 1134.02,231.767 1134.59,231.743 1135.16,233.547 1135.73,233.095 1136.3,232.781 1136.87,230.37 1137.43,228.135 1138,227.19 1138.57,229.447 1139.14,229.513 1139.71,228.428 1140.28,226.31 1140.84,227.454 1141.41,224.759 1141.98,226.336 1142.55,226.277 1143.12,225.29 1143.69,225.649 1144.25,225.004 1144.82,225.509 1145.39,225.871 1145.96,226.161 1146.53,226.429 1147.1,226.953 1147.66,225.086 1148.23,224.576 1148.8,224.823 1149.37,226.546 1149.94,227.747 1150.51,228.123 1151.07,227.217 1151.64,226.514 1152.21,227.762 1152.78,229.112 1153.35,230.352 1153.92,232.65 1154.48,232.562 1155.05,233.448 1155.62,234.213 1156.19,234.882 1156.76,236.536 1157.33,237.097 1157.89,237.492 1158.46,236.995 1159.03,235.758 1159.6,236.349 1160.17,235.087 1160.74,235.631 1161.3,236.334 1161.87,232.916 1162.44,231.617 1163.01,231.549 1163.58,231.337 1164.15,229.934 1164.71,231.997 1165.28,231.816 1165.85,232.756 1166.42,234.733 1166.99,233.457 1167.56,231.268 1168.12,229.982 1168.69,231.882 1169.26,231.916 1169.83,232.627 1170.4,232.465 1170.97,233.399 1171.53,234.258 1172.1,233.929 1172.67,232.781 1173.24,232.592 1173.81,233.418 1174.38,231.047 1174.94,230.991 1175.51,231.899 1176.08,231.67 1176.65,231.479 1177.22,231.505 1177.79,230.513 1178.35,230.528 1178.92,228.204 1179.49,228.285 1180.06,229.602 1180.63,227.637 1181.2,226.719 1181.76,223.965 1182.33,223.453 1182.9,227.858 1183.47,229.223 1184.04,227.392 1184.61,227.506 1185.17,227.614 1185.74,229.964 1186.31,229.946 1186.88,229.828 1187.45,229.01 1188.02,230.07 1188.58,229.018 1189.15,230.052 1189.72,231.054 1190.29,231.257 1190.86,231.292 1191.43,232.033 1192,232.042 1192.56,230.987 1193.13,229.911 1193.7,228.991 1194.27,229.905 1194.84,231.064 1195.41,230.88 1195.97,230.655 1196.54,230.763 1197.11,231.798 1197.68,232.605 1198.25,230.277 1198.82,230.221 1199.38,230.132 1199.95,229.932 1200.52,229.729 1201.09,228.813 1201.66,227.757 1202.23,228.982 1202.79,230.139 1203.36,229.166 1203.93,226.936 1204.5,223.704 1205.07,223.096 1205.64,220.532 1206.2,221.477 1206.77,221.09 1207.34,222.815 1207.91,221.267 1208.48,219.895 1209.05,220.768 1209.61,223.69 1210.18,223.882 1210.75,224.762 1211.32,222.935 1211.89,224.673 1212.46,226.187 1213.02,225.714 1213.59,228.185 1214.16,227.568 1214.73,228.912 1215.3,231.306 1215.87,232.07 1216.43,230.049 1217,229.177 1217.57,228.556 1218.14,228.817 1218.71,228.206 1219.28,227.45 1219.84,229.887 1220.41,232.187 1220.98,232.299 1221.55,231.216 1222.12,230.339 1222.69,229.515 1223.25,229.752 1223.82,228.986 1224.39,228.152 1224.96,228.353 1225.53,229.525 1226.1,230.768 1226.66,228.866 1227.23,228.293 1227.8,230.539 1228.37,232.722 1228.94,230.766 1229.51,230.782 1230.07,230.709 1230.64,230.916 1231.21,231.002 1231.78,231.953 1232.35,231.908 1232.92,233.981 1233.48,234.976 1234.05,235.743 1234.62,233.513 1235.19,231.193 1235.76,233.265 1236.33,232.983 1236.89,230.87 1237.46,230.929 1238.03,230.148 1238.6,227.976 1239.17,228.349 1239.74,228.695 1240.3,226.034 1240.87,228.614 1241.44,228.806 1242.01,226.916 1242.58,225.044 1243.15,226.703 1243.71,227.099 1244.28,229.687 1244.85,233.081 1245.42,231.914 1245.99,232.977 1246.56,233.006 1247.12,233.079 1247.69,231.883 1248.26,230.752 1248.83,233.031 1249.4,235.118 1249.97,232.82 1250.53,233.664 1251.1,233.42 1251.67,234.359 1252.24,233.105 1252.81,233.986 1253.38,233.703 1253.94,233.969 1254.51,233.816 1255.08,232.796 1255.65,233.828 1256.22,232.672 1256.79,233.594 1257.35,232.417 1257.92,232.335 1258.49,231.196 1259.06,229.985 1259.63,232.115 1260.2,234.166 1260.76,232.964 1261.33,231.748 1261.9,231.591 1262.47,232.474 1263.04,232.393 1263.61,230.439 1264.18,231.627 1264.74,231.628 1265.31,233.571 1265.88,236.399 1266.45,236.921 1267.02,237.501 1267.59,234.597 1268.15,234.206 1268.72,234.709 1269.29,235.255 1269.86,234.792 1270.43,235.387 1271,236.129 1271.56,235.629 1272.13,237.177 1272.7,236.719 1273.27,237.174 1273.84,234.949 1274.41,238.647 1274.97,236.918 1275.54,234.259 1276.11,234.66 1276.68,232.993 1277.25,233.705 1277.82,235.311 1278.38,234.739 1278.95,233.183 1279.52,233.552 1280.09,234.281 1280.66,233.613 1281.23,231.111 1281.79,231.011 1282.36,229.911 1282.93,229.794 1283.5,231.853 1284.07,232.882 1284.64,233.575 1285.2,233.237 1285.77,232.883 1286.34,231.577 1286.91,229.153 1287.48,226.985 1288.05,227.182 1288.61,229.318 1289.18,228.122 1289.75,228.065 1290.32,229.14 1290.89,228.852 1291.46,226.56 1292.02,227.698 1292.59,226.915 1293.16,226.008 1293.73,225.052 1294.3,226.333 1294.87,226.635 1295.43,225.788 1296,225.838 1296.57,225.159 1297.14,224.401 1297.71,222.725 1298.28,223.361 1298.84,223.959 1299.41,223.15 1299.98,221.706 1300.55,221.429 1301.12,222.008 1301.69,224.557 1302.25,225.038 1302.82,226.092 1303.39,226.51 1303.96,227.769 1304.53,230.076 1305.1,229.093 1305.66,231.276 1306.23,231.2 1306.8,230.167 1307.37,230.031 1307.94,230.137 1308.51,230.201 1309.07,229.178 1309.64,233.316 1310.21,233.961 1310.78,233.658 1311.35,235.381 1311.92,233.926 1312.48,232.516 1313.05,232.222 1313.62,229.19 1314.19,229.242 1314.76,229.166 1315.33,228.214 1315.89,228.273 1316.46,228.325 1317.03,227.524 1317.6,227.525 1318.17,225.748 1318.74,224.702 1319.3,226.178 1319.87,228.448 1320.44,229.631 1321.01,228.598 1321.58,227.601 1322.15,226.773 1322.71,226.914 1323.28,226.028 1323.85,226.336 1324.42,226.627 1324.99,227.858 1325.56,228.258 1326.12,228.678 1326.69,228.952 1327.26,226.888 1327.83,226.265 1328.4,226.718 1328.97,226.13 1329.53,226.267 1330.1,226.559 1330.67,227.939 1331.24,228.184 1331.81,228.58 1332.38,228.749 1332.94,226.93 1333.51,227.095 1334.08,227.549 1334.65,228.841 1335.22,226.937 1335.79,229.466 1336.36,229.575 1336.92,231.659 1337.49,232.57 1338.06,231.176 1338.63,232.207 1339.2,231.014 1339.77,231.241 1340.33,232.237 1340.9,233.481 1341.47,234.343 1342.04,236.374 1342.61,234.032 1343.18,234.744 1343.74,234.58 1344.31,233.365 1344.88,235.247 1345.45,236.885 1346.02,236.784 1346.59,238.644 1347.15,235.84 1347.72,234.467 1348.29,238.13 1348.86,238.438 1349.43,236.826 1350,236.111 1350.56,236.594 1351.13,238.04 1351.7,237.398 1352.27,237.135 1352.84,235.64 1353.41,234.291 1353.97,235.032 1354.54,232.299 1355.11,231.987 1355.68,230.636 1356.25,229.555 1356.82,229.493 1357.38,228.345 1357.95,228.519 1358.52,228.775 1359.09,228.87 1359.66,227.897 1360.23,230.062 1360.79,228.924 1361.36,230.119 1361.93,231.177 1362.5,232.339 1363.07,230.011 1363.64,228.015 1364.2,229.044 1364.77,228.17 1365.34,227.098 1365.91,227.098 1366.48,226.233 1367.05,224.388 1367.61,226.022 1368.18,227.305 1368.75,226.424 1369.32,226.742 1369.89,229.079 1370.46,229.12 1371.02,229.334 1371.59,227.318 1372.16,225.377 1372.73,226.008 1373.3,227.048 1373.87,229.207 1374.43,231.443 1375,231.044 1375.57,234.265 1376.14,233.852 1376.71,233.511 1377.28,233.597 1377.84,232.264 1378.41,231.168 1378.98,230.94 1379.55,231.016 1380.12,231.043 1380.69,231.061 1381.25,232.045 1381.82,232.026 1382.39,228.742 1382.96,230.757 1383.53,230.83 1384.1,232.979 1384.66,232.764 1385.23,232.953 1385.8,232.586 1386.37,232.112 1386.94,231.759 1387.51,232.821 1388.07,233.626 1388.64,232.317 1389.21,230.138 1389.78,230.068 1390.35,229.981 1390.92,229.818 1391.48,227.521 1392.05,225.548 1392.62,226.892 1393.19,227.215 1393.76,229.457 1394.33,230.72 1394.89,229.798 1395.46,229.758 1396.03,230.853 1396.6,229.578 1397.17,229.575 1397.74,228.179 1398.3,227.237 1398.87,228.344 1399.44,228.2 1400.01,228.309 1400.58,228.296 1401.15,228.276 1401.71,226.628 1402.28,226.86 1402.85,227.157 1403.42,227.509 1403.99,225.699 1404.56,226.832 1405.13,225.915 1405.69,226.046 1406.26,227.386 1406.83,228.639 1407.4,228.639 1407.97,226.726 1408.54,226.859 1409.1,227.063 1409.67,230.395 1410.24,229.327 1410.81,229.285 1411.38,229.608 1411.95,230.728 1412.51,230.618 1413.08,229.661 1413.65,229.849 1414.22,230 1414.79,231.133 1415.36,232.327 1415.92,230.968 1416.49,232.129 1417.06,235.895 1417.63,234.634 1418.2,234.308 1418.77,234.098 1419.33,234.02 1419.9,233.648 1420.47,232.442 1421.04,232.237 1421.61,229.061 1422.18,231.022 1422.74,229.058 1423.31,228.012 1423.88,227.224 1424.45,228.607 1425.02,228.862 1425.59,230.067 1426.15,229.841 1426.72,228.887 1427.29,228.949 1427.86,228.947 1428.43,230.879 1429,230.623 1429.56,229.493 1430.13,228.446 1430.7,228.745 1431.27,226.779 1431.84,228.179 1432.41,228.352 1432.97,228.522 1433.54,229.64 1434.11,229.603 1434.68,229.593 1435.25,229.527 1435.82,228.533 1436.38,226.687 1436.95,226.923 1437.52,227.022 1438.09,225.197 1438.66,225.654 1439.23,225.87 1439.79,227.239 1440.36,226.484 1440.93,227.731 1441.5,228.021 1442.07,227.342 1442.64,229.821 1443.2,229.849 1443.77,232.062 1444.34,230.987 1444.91,230.069 1445.48,231.099 1446.05,231.039 1446.61,232.165 1447.18,232.178 1447.75,232.161 1448.32,232.232 1448.89,229.909 1449.46,229.841 1450.02,229.916 1450.59,229.912 1451.16,227.93 1451.73,229.279 1452.3,229.483 1452.87,229.644 1453.43,229.603 1454,231.819 1454.57,231.619 1455.14,230.507 1455.71,230.455 1456.28,231.619 1456.84,233.665 1457.41,232.384 1457.98,232.43 1458.55,230.38 1459.12,231.463 1459.69,230.376 1460.25,231.279 1460.82,231.207 1461.39,232.986 1461.96,232.559 1462.53,230.373 1463.1,230.176 1463.66,230.353 1464.23,230.425 1464.8,229.408 1465.37,230.65 1465.94,230.76 1466.51,229.885 1467.07,230.994 1467.64,229.049 1468.21,230.075 1468.78,226.109 1469.35,227.643 1469.92,227.67 1470.48,225.929 1471.05,226.083 1471.62,226.373 1472.19,227.658 1472.76,226.775 1473.33,227.071 1473.89,227.535 1474.46,227.801 1475.03,228.117 1475.6,228.185 1476.17,228.5 1476.74,228.564 1477.31,229.879 1477.87,230.989 1478.44,233.956 1479.01,235.637 1479.58,236.371 1480.15,235.85 1480.72,234.239 1481.28,233.029 1481.85,232.959 1482.42,230.652 1482.99,232.741 1483.56,232.521 1484.13,234.442 1484.69,233.154 1485.26,234.819 1485.83,236.511 1486.4,237.239 1486.97,238.751 1487.54,238.217 1488.1,235.378 1488.67,235.074 1489.24,237.66 1489.81,237.821 1490.38,239.094 1490.95,239.352 1491.51,239.402 1492.08,236.658 1492.65,237.011 1493.22,237.469 1493.79,236.729 1494.36,234.994 1494.92,234.553 1495.49,233.238 1496.06,232.004 1496.63,232.635 1497.2,231.412 1497.77,231.188 1498.33,228.793 1498.9,229.013 1499.47,228.757 1500.04,229.741 1500.61,227.686 1501.18,228.829 1501.74,226.625 1502.31,225.766 1502.88,225.029 1503.45,226.515 1504.02,229.912 1504.59,229.719 1505.15,231.694 1505.72,228.5 1506.29,228.55 1506.86,229.559 1507.43,228.604 1508,231.495 1508.56,231.249 1509.13,228.726 1509.7,228.592 1510.27,227.746 1510.84,228.617 1511.41,228.622 1511.97,227.63 1512.54,226.633 1513.11,225.878 1513.68,227.908 1514.25,225.954 1514.82,226.242 1515.38,228.595 1515.95,229.45 1516.52,231.51 1517.09,228.215 1517.66,227.403 1518.23,227.643 1518.79,228.809 1519.36,228.713 1519.93,230.924 1520.5,232.005 1521.07,232.783 1521.64,233.427 1522.2,232.143 1522.77,232.741 1523.34,232.507 1523.91,232.008 1524.48,231.886 1525.05,231.695 1525.61,231.555 1526.18,232.263 1526.75,233.412 1527.32,233.247 1527.89,228.704 1528.46,229.794 1529.02,226.664 1529.59,226.784 1530.16,226.898 1530.73,225.973 1531.3,224.24 1531.87,226.89 1532.43,228.037 1533,224.863 1533.57,225.243 1534.14,225.627 1534.71,226.968 1535.28,227.294 1535.84,228.367 1536.41,227.278 1536.98,225.129 1537.55,225.133 1538.12,225.582 1538.69,223.855 1539.25,223.139 1539.82,225.281 1540.39,225.587 1540.96,226.003 1541.53,226.287 1542.1,226.475 1542.66,226.706 1543.23,225.054 1543.8,226.415 1544.37,225.919 1544.94,225.265 1545.51,226.789 1546.08,227.098 1546.64,228.418 1547.21,227.503 1547.78,226.682 1548.35,228.887 1548.92,229.147 1549.49,231.137 1550.05,228.112 1550.62,231.179 1551.19,232.216 1551.76,232.007 1552.33,231.063 1552.9,231.071 1553.46,232.985 1554.03,232.576 1554.6,232.373 1555.17,232.556 1555.74,230.407 1556.31,229.29 1556.87,230.398 1557.44,229.271 1558.01,227.315 1558.58,226.887 1559.15,228.345 1559.72,228.503 1560.28,228.779 1560.85,229.994 1561.42,232.382 1561.99,230.324 1562.56,233.305 1563.13,230.018 1563.69,230.015 1564.26,227.992 1564.83,228.26 1565.4,228.634 1565.97,229.752 1566.54,229.815 1567.1,229.883 1567.67,231.902 1568.24,232.981 1568.81,232.942 1569.38,232.059 1569.95,234.025 1570.51,234.791 1571.08,235.57 1571.65,235.335 1572.22,235.015 1572.79,232.608 1573.36,231.527 1573.92,229.431 1574.49,229.358 1575.06,230.541 1575.63,230.453 1576.2,230.58 1576.77,232.601 1577.33,231.547 1577.9,233.647 1578.47,233.364 1579.04,234.132 1579.61,232.92 1580.18,228.392 1580.74,228.713 1581.31,229.941 1581.88,230.904 1582.45,230.792 1583.02,231.913 1583.59,233.982 1584.15,233.642 1584.72,228.245 1585.29,228.454 1585.86,231.184 1586.43,229.825 1587,228.996 1587.56,229.247 1588.13,229.114 1588.7,229.122 1589.27,232.385 1589.84,233.314 1590.41,233.078 1590.97,232.893 1591.54,232.663 1592.11,232.247 1592.68,229.811 1593.25,229.888 1593.82,229.834 1594.38,227.59 1594.95,229.772 1595.52,229.647 1596.09,228.816 1596.66,231.02 1597.23,232.101 1597.79,229.835 1598.36,231.78 1598.93,231.492 1599.5,231.233 1600.07,230.172 1600.64,228.159 1601.2,233.664 1601.77,233.483 1602.34,233.228 1602.91,230.841 1603.48,228.902 1604.05,228.056 1604.61,229.299 1605.18,230.481 1605.75,230.503 1606.32,231.402 1606.89,229.18 1607.46,228.313 1608.02,229.612 1608.59,230.616 1609.16,230.545 1609.73,230.449 1610.3,232.437 1610.87,231.46 1611.43,233.501 1612,234.184 1612.57,233.666 1613.14,232.371 1613.71,231.054 1614.28,231.988 1614.84,231.842 1615.41,230.611 1615.98,230.598 1616.55,229.745 1617.12,229.02 1617.69,227.945 1618.26,227.973 1618.82,226.696 1619.39,228.302 1619.96,229.392 1620.53,229.381 1621.1,230.471 1621.67,231.368 1622.23,229.191 1622.8,229.263 1623.37,230.411 1623.94,230.572 1624.51,229.617 1625.08,230.661 1625.64,230.231 1626.21,231.151 1626.78,230.027 1627.35,231.046 1627.92,229.808 1628.49,228.736 1629.05,229.771 1629.62,227.605 1630.19,230.755 1630.76,230.713 1631.33,228.5 1631.9,227.451 1632.46,228.662 1633.03,229.714 1633.6,229.712 1634.17,229.675 1634.74,227.593 1635.31,225.782 1635.87,227.115 1636.44,228.251 1637.01,225.482 1637.58,225.909 1638.15,228.323 1638.72,226.395 1639.28,227.734 1639.85,227.824 1640.42,229.025 1640.99,229.153 1641.56,231.315 1642.13,230.349 1642.69,228.407 1643.26,228.548 1643.83,229.758 1644.4,230.818 1644.97,230.75 1645.54,230.671 1646.1,230.802 1646.67,229.752 1647.24,230.759 1647.81,225.614 1648.38,226.092 1648.95,229.665 1649.51,227.861 1650.08,225.653 1650.65,228.142 1651.22,225.986 1651.79,226.63 1652.36,225.885 1652.92,224.119 1653.49,225.695 1654.06,224.185 1654.63,226.4 1655.2,228.829 1655.77,229.954 1656.33,230.917 1656.9,229.842 1657.47,231.985 1658.04,233.001 1658.61,235.953 1659.18,235.644 1659.74,236.546 1660.31,236.134 1660.88,233.601 1661.45,233.593 1662.02,232.416 1662.59,232.459 1663.15,231.367 1663.72,231.28 1664.29,231.264 1664.86,230.168 1665.43,229.181 1666,229.252 1666.56,230.297 1667.13,229.391 1667.7,229.597 1668.27,230.578 1668.84,229.509 1669.41,227.465 1669.97,228.702 1670.54,232.945 1671.11,233.701 1671.68,235.366 1672.25,233.045 1672.82,233.839 1673.38,232.666 1673.95,231.772 1674.52,229.607 1675.09,231.647 1675.66,231.454 1676.23,230.278 1676.79,229.271 1677.36,229.379 1677.93,231.378 1678.5,231.432 1679.07,232.431 1679.64,233.454 1680.2,230.291 1680.77,230.224 1681.34,228.904 1681.91,229.972 1682.48,232.926 1683.05,230.703 1683.61,230.733 1684.18,229.711 1684.75,228.807 1685.32,230.118 1685.89,228.277 1686.46,230.615 1687.02,233.648 1687.59,233.353 1688.16,234.026 1688.73,232.861 1689.3,232.517 1689.87,232.548 1690.44,233.51 1691,233.214 1691.57,233.237 1692.14,232.854 1692.71,232.485 1693.28,234.22 1693.85,234.028 1694.41,235.766 1694.98,234.44 1695.55,234.066 1696.12,232.946 1696.69,232.548 1697.26,232.411 1697.82,230.166 1698.39,228.128 1698.96,227.085 1699.53,226.269 1700.1,226.62 1700.67,227.842 1701.23,225.697 1701.8,225.868 1702.37,227.256 1702.94,228.376 1703.51,226.329 1704.08,228.623 1704.64,226.8 1705.21,229.216 1705.78,227.387 1706.35,227.632 1706.92,227.69 1707.49,228.952 1708.05,229.23 1708.62,230.385 1709.19,230.358 1709.76,231.199 1710.33,233.048 1710.9,232.706 1711.46,233.525 1712.03,232.213 1712.6,230.767 1713.17,229.571 1713.74,227.66 1714.31,227.882 1714.87,230.137 1715.44,230.162 1716.01,231.046 1716.58,232.166 1717.15,232.026 1717.72,229.73 1718.28,228.677 1718.85,230.849 1719.42,231.991 1719.99,229.747 1720.56,229.902 1721.13,230.955 1721.69,230.025 1722.26,229.947 1722.83,229.894 1723.4,231.123 1723.97,231.275 1724.54,231.289 1725.1,233.278 1725.67,232.152 1726.24,230.792 1726.81,230.812 1727.38,231.637 1727.95,232.401 1728.51,231.139 1729.08,232.216 1729.65,231.991 1730.22,231.881 1730.79,233.815 1731.36,232.301 1731.92,230.87 1732.49,229.707 1733.06,229.795 1733.63,231.886 1734.2,230.85 1734.77,232.701 1735.33,231.525 1735.9,232.167 1736.47,232.804 1737.04,231.556 1737.61,231.134 1738.18,232.025 1738.74,232.872 1739.31,232.713 1739.88,231.416 1740.45,233.398 1741.02,234.061 1741.59,233.674 1742.15,232.362 1742.72,231.994 1743.29,228.708 1743.86,227.602 1744.43,227.749 1745,227.861 1745.56,229.01 1746.13,230.107 1746.7,230.067 1747.27,230.103 1747.84,229.959 1748.41,229.884 1748.97,230.078 1749.54,230.9 1750.11,230.745 1750.68,231.638 1751.25,229.326 1751.82,228.336 1752.38,229.373 1752.95,231.454 1753.52,232.292 1754.09,233.159 1754.66,232.827 1755.23,232.482 1755.79,234.45 1756.36,235.167 1756.93,235.879 1757.5,236.179 1758.07,234.914 1758.64,234.564 1759.21,233.919 1759.77,232.396 1760.34,234.174 1760.91,233.469 1761.48,232.088 1762.05,229.731 1762.62,229.659 1763.18,230.727 1763.75,230.646 1764.32,229.722 1764.89,227.524 1765.46,228.35 1766.03,227.305 1766.59,226.487 1767.16,226.391 1767.73,224.291 1768.3,222.512 1768.87,223.141 1769.44,224.696 1770,223.973 1770.57,224.333 1771.14,222.6 1771.71,223.157 1772.28,223.644 1772.85,224.884 1773.41,225.14 1773.98,226.482 1774.55,225.714 1775.12,227.139 1775.69,228.435 1776.26,226.509 1776.82,224.482 1777.39,225.94 1777.96,227.307 1778.53,226.582 1779.1,226.851 1779.67,226.189 1780.23,226.486 1780.8,226.716 1781.37,225.039 1781.94,225.417 1782.51,226.952 1783.08,225.253 1783.64,224.606 1784.21,228.177 1784.78,230.448 1785.35,229.501 1785.92,227.725 1786.49,228.139 1787.05,230.502 1787.62,229.306 1788.19,230.527 1788.76,230.483 1789.33,230.446 1789.9,229.302 1790.46,230.329 1791.03,230.272 1791.6,231.125 1792.17,231.814 1792.74,231.502 1793.31,230.397 1793.87,228.341 1794.44,228.422 1795.01,228.74 1795.58,229.796 1796.15,229.942 1796.72,229.161 1797.28,227.617 1797.85,230.841 1798.42,230.806 1798.99,232.874 1799.56,233.892 1800.13,231.637 1800.69,229.744 1801.26,228.965 1801.83,228.104 1802.4,229.459 1802.97,227.443 1803.54,228.017 1804.1,227.055 1804.67,228.454 1805.24,229.319 1805.81,228.513 1806.38,225.503 1806.95,225.054 1807.51,226.453 1808.08,225.821 1808.65,224.325 1809.22,225.89 1809.79,226.342 1810.36,228.957 1810.92,228.873 1811.49,229.04 1812.06,230.316 1812.63,230.236 1813.2,232.447 1813.77,232.216 1814.33,233.036 1814.9,232.945 1815.47,231.793 1816.04,229.553 1816.61,229.7 1817.18,227.595 1817.74,228.05 1818.31,228.43 1818.88,231.629 1819.45,234.489 1820.02,232.283 1820.59,231.141 1821.15,229.855 1821.72,229.978 1822.29,229.086 1822.86,230.422 1823.43,228.469 1824,228.673 1824.56,227.685 1825.13,228.076 1825.7,227.208 1826.27,228.441 1826.84,227.531 1827.41,227.796 1827.97,227.179 1828.54,228.729 1829.11,228.92 1829.68,231.201 1830.25,233.108 1830.82,232.926 1831.39,233.963 1831.95,230.529 1832.52,232.694 1833.09,233.773 1833.66,234.734 1834.23,234.673 1834.8,233.436 1835.36,233.204 1835.93,233.074 1836.5,229.71 1837.07,230.776 1837.64,229.506 1838.21,228.742 1838.77,230.838 1839.34,230.894 1839.91,229.829 1840.48,227.879 1841.05,228.12 1841.62,230.585 1842.18,233.779 1842.75,232.579 1843.32,231.525 1843.89,232.384 1844.46,229.979 1845.03,231.057 1845.59,231.133 1846.16,231.319 1846.73,230.303 1847.3,228.294 1847.87,227.476 1848.44,228.796 1849,228.051 1849.57,228.472 1850.14,227.815 1850.71,229.971 1851.28,229.035 1851.85,226.242 1852.41,228.668 1852.98,227.524 1853.55,227.761 1854.12,226.807 1854.69,228.123 1855.26,228.235 1855.82,227.411 1856.39,227.559 1856.96,226.834 1857.53,226.175 1858.1,225.505 1858.67,227.117 1859.23,227.292 1859.8,228.896 1860.37,229.293 1860.94,231.546 1861.51,232.56 1862.08,230.58 1862.64,231.52 1863.21,231.693 1863.78,232.643 1864.35,232.353 1864.92,229.026 1865.49,228.114 1866.05,228.269 1866.62,229.399 1867.19,230.496 1867.76,232.59 1868.33,233.88 1868.9,232.69 1869.46,234.491 1870.03,235.308 1870.6,234.151 1871.17,233.189 1871.74,232.016 1872.31,232.016 1872.87,231.07 1873.44,230.352 1874.01,231.375 1874.58,229.382 1875.15,228.737 1875.72,230.968 1876.28,229.067 1876.85,230.315 1877.42,230.328 1877.99,230.422 1878.56,231.621 1879.13,232.598 1879.69,233.487 1880.26,233.445 1880.83,231.389 1881.4,231.632 1881.97,230.501 1882.54,227.475 1883.1,228.554 1883.67,228.816 1884.24,229.063 1884.81,230.532 1885.38,232.71 1885.95,232.697 1886.51,231.421 1887.08,231.426 1887.65,230.43 1888.22,234.518 1888.79,235.545 1889.36,232.972 1889.92,232.682 1890.49,233.732 1891.06,232.386 1891.63,232.313 1892.2,231.017 1892.77,230.975 1893.33,229.049 1893.9,227.942 1894.47,225.914 1895.04,227.438 1895.61,230.712 1896.18,231.922 1896.74,231.88 1897.31,229.653 1897.88,230.774 1898.45,230.721 1899.02,231.564 1899.59,233.684 1900.16,231.705 1900.72,232.731 1901.29,232.766 1901.86,232.761 1902.43,232.474 1903,234.444 1903.57,234.158 1904.13,235.722 1904.7,236.179 1905.27,234.621 1905.84,231.02 1906.41,231.93 1906.98,230.541 1907.54,230.605 1908.11,230.487 1908.68,231.604 1909.25,231.529 1909.82,231.567 1910.39,232.698 1910.95,234.47 1911.52,235.248 1912.09,236.036 1912.66,236.508 1913.23,234.909 1913.8,234.507 1914.36,235.096 1914.93,234.655 1915.5,235.413 1916.07,237.172 1916.64,235.565 1917.21,235.037 1917.77,233.595 1918.34,233.209 1918.91,231.917 1919.48,232.73 1920.05,232.361 1920.62,229.864 1921.18,228.678 1921.75,227.882 1922.32,231.038 1922.89,228.831 1923.46,227.638 1924.03,228.575 1924.59,227.577 1925.16,229.831 1925.73,228.784 1926.3,228.905 1926.87,228.749 1927.44,227.894 1928,227.994 1928.57,228.166 1929.14,227.121 1929.71,227.24 1930.28,228.491 1930.85,230.427 1931.41,229.218 1931.98,229.125 1932.55,227.831 1933.12,229.857 1933.69,227.905 1934.26,227.991 1934.82,227.144 1935.39,227.208 1935.96,227.322 1936.53,229.576 1937.1,230.622 1937.67,229.327 1938.23,229.304 1938.8,230.46 1939.37,229.115 1939.94,230.084 1940.51,230.843 1941.08,230.708 1941.64,231.732 1942.21,232.633 1942.78,232.479 1943.35,232.203 1943.92,234.13 1944.49,233.904 1945.05,233.569 1945.62,233.364 1946.19,234.149 1946.76,231.717 1947.33,231.457 1947.9,230.162 1948.46,231.486 1949.03,231.062 1949.6,229.944 1950.17,231.111 1950.74,229.958 1951.31,227.824 1951.87,225.907 1952.44,225.233 1953.01,226.472 1953.58,228.977 1954.15,228.103 1954.72,228.243 1955.28,229.275 1955.85,229.476 1956.42,228.309 1956.99,227.541 1957.56,228.711 1958.13,229.79 1958.69,229.912 1959.26,231.833 1959.83,231.502 1960.4,232.266 1960.97,234.336 1961.54,234.155 1962.1,232.737 1962.67,233.52 1963.24,235.485 1963.81,234.064 1964.38,231.425 1964.95,231.274 1965.51,232.177 1966.08,232.918 1966.65,231.706 1967.22,230.504 1967.79,231.348 1968.36,230.295 1968.92,229.232 1969.49,227.302 1970.06,230.495 1970.63,230.386 1971.2,227.13 1971.77,229.298 1972.34,232.4 1972.9,231.154 1973.47,229 1974.04,229.17 1974.61,229.202 1975.18,229.294 1975.75,228.402 1976.31,228.526 1976.88,226.538 1977.45,226.694 1978.02,225.748 1978.59,226.101 1979.16,224.271 1979.72,223.604 1980.29,224.817 1980.86,225.054 1981.43,224.345 1982,223.737 1982.57,222.114 1983.13,222.511 1983.7,223.021 1984.27,223.617 1984.84,224.116 1985.41,224.586 1985.98,222.751 1986.54,224.34 1987.11,224.957 1987.68,227.418 1988.25,228.651 1988.82,229.037 1989.39,229.178 1989.95,229.25 1990.52,228.343 1991.09,229.573 1991.66,233.537 1992.23,230.213 1992.8,231.196 1993.36,232.197 1993.93,230.064 1994.5,231.076 1995.07,230.94 1995.64,233.977 1996.21,233.812 1996.77,234.455 1997.34,233.252 1997.91,233.934 1998.48,234.962 1999.05,236.827 1999.62,237.531 2000.18,237.017 2000.75,237.572 2001.32,237.964 2001.89,237.324 2002.46,237.788 2003.03,237.218 2003.59,239.773 2004.16,239.012 2004.73,237.545 2005.3,236.78 2005.87,235.13 2006.44,234.552 2007,233.112 2007.57,231.67 2008.14,231.535 2008.71,231.399 2009.28,231.277 2009.85,230.049 2010.41,230.865 2010.98,228.807 2011.55,228.85 2012.12,228.838 2012.69,228.843 2013.26,231.115 2013.82,229.841 2014.39,229.74 2014.96,228.668 2015.53,229.744 2016.1,228.497 2016.67,230.498 2017.23,229.464 2017.8,228.366 2018.37,229.45 2018.94,229.288 2019.51,229.557 2020.08,231.685 2020.64,231.459 2021.21,229.26 2021.78,228.146 2022.35,228.096 2022.92,226.062 2023.49,225.145 2024.05,223.258 2024.62,225.017 2025.19,225.362 2025.76,226.542 2026.33,227.028 2026.9,228.019 2027.46,229.177 2028.03,229.517 2028.6,229.44 2029.17,229.451 2029.74,229.514 2030.31,231.73 2030.87,229.508 2031.44,229.699 2032.01,229.729 2032.58,230.743 2033.15,230.584 2033.72,231.569 2034.28,232.646 2034.85,233.514 2035.42,234.333 2035.99,231.847 2036.56,229.534 2037.13,229.669 2037.69,228.602 2038.26,227.645 2038.83,228.921 2039.4,227.79 2039.97,229.107 2040.54,228.054 2041.11,229.155 2041.67,232.25 2042.24,231.903 2042.81,231.762 2043.38,231.496 2043.95,231.57 2044.52,232.463 2045.08,231.267 2045.65,231.144 2046.22,230.037 2046.79,227.849 2047.36,228.004 2047.93,228.164 2048.49,230.282 2049.06,230.204 2049.63,231.02 2050.2,227.769 2050.77,228.817 2051.34,228.668 2051.9,228.744 2052.47,227.961 2053.04,228.163 2053.61,227.293 2054.18,225.3 2054.75,223.667 2055.31,224.265 2055.88,226.543 2056.45,226.753 2057.02,223.782 2057.59,224.308 2058.16,226.526 2058.72,226.931 2059.29,230.133 2059.86,231.161 2060.43,231.141 2061,230.932 2061.57,229.664 2062.13,230.514 2062.7,228.541 2063.27,227.71 2063.84,229.962 2064.41,231.025 2064.98,230.995 2065.54,232.032 2066.11,231.767 2066.68,231.571 2067.25,231.374 2067.82,233.466 2068.39,231.262 2068.95,232.638 2069.52,231.437 2070.09,228.095 2070.66,231.356 2071.23,231.26 2071.8,233.291 2072.36,233.162 2072.93,232.774 2073.5,232.462 2074.07,233.469 2074.64,234.372 2075.21,232.975 2075.77,231.501 2076.34,232.466 2076.91,231.179 2077.48,231.182 2078.05,231.312 2078.62,231.13 2079.18,230.122 2079.75,229.987 2080.32,227.773 2080.89,226.892 2081.46,227.063 2082.03,226.664 2082.59,225.88 2083.16,227.323 2083.73,227.453 2084.3,226.565 2084.87,225.832 2085.44,227.331 2086,229.632 2086.57,229.519 2087.14,228.624 2087.71,226.611 2088.28,226.75 2088.85,226.875 2089.41,229.144 2089.98,229.276 2090.55,227.237 2091.12,227.329 2091.69,226.317 2092.26,226.487 2092.82,226.819 2093.39,226.996 2093.96,226.264 2094.53,223.754 2095.1,224.428 2095.67,225.769 2096.23,224.944 2096.8,223.417 2097.37,224.628 2097.94,226.344 2098.51,226.524 2099.08,224.59 2099.64,226.039 2100.21,226.487 2100.78,227.821 2101.35,229.113 2101.92,228.385 2102.49,228.495 2103.05,226.628 2103.62,227.856 2104.19,228.41 2104.76,229.538 2105.33,228.525 2105.9,233.23 2106.46,233.191 2107.03,233.019 2107.6,234.118 2108.17,235.063 2108.74,233.738 2109.31,233.52 2109.87,233.278 2110.44,233.311 2111.01,230.224 2111.58,230.366 2112.15,232.26 2112.72,231.462 2113.29,232.618 2113.85,230.448 2114.42,231.605 2114.99,231.684 2115.56,232.691 2116.13,233.616 2116.7,236.538 2117.26,237.281 2117.83,234.783 2118.4,233.567 2118.97,236.549 2119.54,236.146 2120.11,236.885 2120.67,238.406 2121.24,238.785 2121.81,239.124 2122.38,236.252 2122.95,236.659 2123.52,237.264 2124.08,236.852 2124.65,233.205 2125.22,231.006 2125.79,229.97 2126.36,228.75 2126.93,227.528 2127.49,225.89 2128.06,227.041 2128.63,227.369 2129.2,227.456 2129.77,225.673 2130.34,225.111 2130.9,226.484 2131.47,226.887 2132.04,224.184 2132.61,224.615 2133.18,223.854 2133.75,224.189 2134.31,224.987 2134.88,226.518 2135.45,227.727 2136.02,228.942 2136.59,230.162 2137.16,230.397 2137.72,230.454 2138.29,229.665 2138.86,233.911 2139.43,231.792 2140,230.925 2140.57,230.907 2141.13,229.044 2141.7,228.311 2142.27,227.487 2142.84,227.659 2143.41,227.116 2143.98,228.514 2144.54,228.57 2145.11,228.673 2145.68,230.007 2146.25,231.236 2146.82,233.199 2147.39,233.023 2147.95,231.801 2148.52,232.684 2149.09,232.53 2149.66,230.381 2150.23,228.296 2150.8,229.42 2151.36,227.686 2151.93,226.915 2152.5,226.061 2153.07,228.604 2153.64,228.667 2154.21,230.146 2154.77,230.294 2155.34,233.408 2155.91,234.198 2156.48,236.144 2157.05,234.777 2157.62,235.635 2158.18,234.26 2158.75,233.129 2159.32,232.796 2159.89,229.529 \"/>\n<path clip-path=\"url(#clip450)\" d=\"M1625.75 1245.03 L2150.8 1245.03 L2150.8 1089.51 L1625.75 1089.51  Z\" fill=\"#ffffff\" fill-rule=\"evenodd\" fill-opacity=\"1\"/>\n<polyline clip-path=\"url(#clip450)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"1625.75,1245.03 2150.8,1245.03 2150.8,1089.51 1625.75,1089.51 1625.75,1245.03 \"/>\n<polyline clip-path=\"url(#clip450)\" style=\"stroke:#e26f46; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" stroke-dasharray=\"16, 10\" points=\"1645.83,1141.35 1766.28,1141.35 \"/>\n<path clip-path=\"url(#clip450)\" d=\"M1793.76 1125.34 L1793.76 1132.71 L1802.53 1132.71 L1802.53 1136.02 L1793.76 1136.02 L1793.76 1150.09 Q1793.76 1153.26 1794.61 1154.16 Q1795.49 1155.07 1798.16 1155.07 L1802.53 1155.07 L1802.53 1158.63 L1798.16 1158.63 Q1793.23 1158.63 1791.35 1156.8 Q1789.48 1154.95 1789.48 1150.09 L1789.48 1136.02 L1786.35 1136.02 L1786.35 1132.71 L1789.48 1132.71 L1789.48 1125.34 L1793.76 1125.34 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip450)\" d=\"M1819.92 1145.6 Q1814.75 1145.6 1812.76 1146.78 Q1810.77 1147.96 1810.77 1150.81 Q1810.77 1153.08 1812.25 1154.42 Q1813.76 1155.74 1816.33 1155.74 Q1819.87 1155.74 1822 1153.24 Q1824.15 1150.72 1824.15 1146.55 L1824.15 1145.6 L1819.92 1145.6 M1828.41 1143.84 L1828.41 1158.63 L1824.15 1158.63 L1824.15 1154.7 Q1822.69 1157.06 1820.52 1158.19 Q1818.34 1159.3 1815.19 1159.3 Q1811.21 1159.3 1808.85 1157.08 Q1806.51 1154.84 1806.51 1151.09 Q1806.51 1146.71 1809.43 1144.49 Q1812.37 1142.27 1818.18 1142.27 L1824.15 1142.27 L1824.15 1141.85 Q1824.15 1138.91 1822.21 1137.31 Q1820.29 1135.69 1816.79 1135.69 Q1814.57 1135.69 1812.46 1136.22 Q1810.36 1136.76 1808.41 1137.82 L1808.41 1133.89 Q1810.75 1132.98 1812.95 1132.54 Q1815.15 1132.08 1817.23 1132.08 Q1822.86 1132.08 1825.63 1135 Q1828.41 1137.91 1828.41 1143.84 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip450)\" d=\"M1852.21 1136.69 Q1851.49 1136.27 1850.63 1136.09 Q1849.8 1135.88 1848.78 1135.88 Q1845.17 1135.88 1843.23 1138.24 Q1841.3 1140.58 1841.3 1144.97 L1841.3 1158.63 L1837.02 1158.63 L1837.02 1132.71 L1841.3 1132.71 L1841.3 1136.73 Q1842.65 1134.37 1844.8 1133.24 Q1846.95 1132.08 1850.03 1132.08 Q1850.47 1132.08 1851 1132.15 Q1851.54 1132.2 1852.18 1132.31 L1852.21 1136.69 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip450)\" d=\"M1872.9 1145.37 Q1872.9 1140.74 1870.98 1138.19 Q1869.08 1135.65 1865.63 1135.65 Q1862.21 1135.65 1860.29 1138.19 Q1858.39 1140.74 1858.39 1145.37 Q1858.39 1149.97 1860.29 1152.52 Q1862.21 1155.07 1865.63 1155.07 Q1869.08 1155.07 1870.98 1152.52 Q1872.9 1149.97 1872.9 1145.37 M1877.16 1155.41 Q1877.16 1162.03 1874.22 1165.25 Q1871.28 1168.49 1865.22 1168.49 Q1862.97 1168.49 1860.98 1168.15 Q1858.99 1167.82 1857.11 1167.13 L1857.11 1162.98 Q1858.99 1164 1860.82 1164.49 Q1862.65 1164.97 1864.54 1164.97 Q1868.73 1164.97 1870.82 1162.78 Q1872.9 1160.6 1872.9 1156.18 L1872.9 1154.07 Q1871.58 1156.36 1869.52 1157.5 Q1867.46 1158.63 1864.59 1158.63 Q1859.82 1158.63 1856.91 1155 Q1853.99 1151.36 1853.99 1145.37 Q1853.99 1139.35 1856.91 1135.72 Q1859.82 1132.08 1864.59 1132.08 Q1867.46 1132.08 1869.52 1133.22 Q1871.58 1134.35 1872.9 1136.64 L1872.9 1132.71 L1877.16 1132.71 L1877.16 1155.41 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip450)\" d=\"M1908.11 1144.6 L1908.11 1146.69 L1888.53 1146.69 Q1888.8 1151.09 1891.17 1153.4 Q1893.55 1155.69 1897.79 1155.69 Q1900.24 1155.69 1902.53 1155.09 Q1904.85 1154.49 1907.11 1153.28 L1907.11 1157.31 Q1904.82 1158.28 1902.42 1158.79 Q1900.01 1159.3 1897.53 1159.3 Q1891.33 1159.3 1887.69 1155.69 Q1884.08 1152.08 1884.08 1145.92 Q1884.08 1139.56 1887.51 1135.83 Q1890.96 1132.08 1896.79 1132.08 Q1902.02 1132.08 1905.05 1135.46 Q1908.11 1138.82 1908.11 1144.6 M1903.85 1143.35 Q1903.8 1139.86 1901.88 1137.78 Q1899.98 1135.69 1896.84 1135.69 Q1893.27 1135.69 1891.12 1137.71 Q1888.99 1139.72 1888.67 1143.38 L1903.85 1143.35 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip450)\" d=\"M1919.31 1125.34 L1919.31 1132.71 L1928.09 1132.71 L1928.09 1136.02 L1919.31 1136.02 L1919.31 1150.09 Q1919.31 1153.26 1920.17 1154.16 Q1921.05 1155.07 1923.71 1155.07 L1928.09 1155.07 L1928.09 1158.63 L1923.71 1158.63 Q1918.78 1158.63 1916.91 1156.8 Q1915.03 1154.95 1915.03 1150.09 L1915.03 1136.02 L1911.91 1136.02 L1911.91 1132.71 L1915.03 1132.71 L1915.03 1125.34 L1919.31 1125.34 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip450)\" d=\"M1953.39 1166.5 L1953.39 1169.81 L1928.76 1169.81 L1928.76 1166.5 L1953.39 1166.5 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip450)\" d=\"M1954.91 1132.71 L1959.17 1132.71 L1964.5 1152.94 L1969.8 1132.71 L1974.82 1132.71 L1980.15 1152.94 L1985.45 1132.71 L1989.71 1132.71 L1982.92 1158.63 L1977.9 1158.63 L1972.32 1137.38 L1966.72 1158.63 L1961.7 1158.63 L1954.91 1132.71 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip450)\" d=\"M2007.95 1145.6 Q2002.78 1145.6 2000.79 1146.78 Q1998.8 1147.96 1998.8 1150.81 Q1998.8 1153.08 2000.28 1154.42 Q2001.79 1155.74 2004.36 1155.74 Q2007.9 1155.74 2010.03 1153.24 Q2012.18 1150.72 2012.18 1146.55 L2012.18 1145.6 L2007.95 1145.6 M2016.44 1143.84 L2016.44 1158.63 L2012.18 1158.63 L2012.18 1154.7 Q2010.72 1157.06 2008.55 1158.19 Q2006.37 1159.3 2003.22 1159.3 Q1999.24 1159.3 1996.88 1157.08 Q1994.54 1154.84 1994.54 1151.09 Q1994.54 1146.71 1997.46 1144.49 Q2000.4 1142.27 2006.21 1142.27 L2012.18 1142.27 L2012.18 1141.85 Q2012.18 1138.91 2010.24 1137.31 Q2008.32 1135.69 2004.82 1135.69 Q2002.6 1135.69 2000.49 1136.22 Q1998.39 1136.76 1996.44 1137.82 L1996.44 1133.89 Q1998.78 1132.98 2000.98 1132.54 Q2003.18 1132.08 2005.26 1132.08 Q2010.89 1132.08 2013.66 1135 Q2016.44 1137.91 2016.44 1143.84 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip450)\" d=\"M2025.22 1122.61 L2029.47 1122.61 L2029.47 1158.63 L2025.22 1158.63 L2025.22 1122.61 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip450)\" d=\"M2038.22 1122.61 L2042.51 1122.61 L2042.51 1143.89 L2055.22 1132.71 L2060.65 1132.71 L2046.91 1144.84 L2061.23 1158.63 L2055.68 1158.63 L2042.51 1145.97 L2042.51 1158.63 L2038.22 1158.63 L2038.22 1122.61 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip450)\" d=\"M2086.33 1144.6 L2086.33 1146.69 L2066.74 1146.69 Q2067.02 1151.09 2069.38 1153.4 Q2071.77 1155.69 2076 1155.69 Q2078.46 1155.69 2080.75 1155.09 Q2083.06 1154.49 2085.33 1153.28 L2085.33 1157.31 Q2083.04 1158.28 2080.63 1158.79 Q2078.22 1159.3 2075.75 1159.3 Q2069.54 1159.3 2065.91 1155.69 Q2062.3 1152.08 2062.3 1145.92 Q2062.3 1139.56 2065.72 1135.83 Q2069.17 1132.08 2075.01 1132.08 Q2080.24 1132.08 2083.27 1135.46 Q2086.33 1138.82 2086.33 1144.6 M2082.07 1143.35 Q2082.02 1139.86 2080.1 1137.78 Q2078.2 1135.69 2075.05 1135.69 Q2071.49 1135.69 2069.34 1137.71 Q2067.21 1139.72 2066.88 1143.38 L2082.07 1143.35 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip450)\" d=\"M2108.34 1136.69 Q2107.62 1136.27 2106.77 1136.09 Q2105.93 1135.88 2104.91 1135.88 Q2101.3 1135.88 2099.36 1138.24 Q2097.44 1140.58 2097.44 1144.97 L2097.44 1158.63 L2093.15 1158.63 L2093.15 1132.71 L2097.44 1132.71 L2097.44 1136.73 Q2098.78 1134.37 2100.93 1133.24 Q2103.09 1132.08 2106.16 1132.08 Q2106.6 1132.08 2107.14 1132.15 Q2107.67 1132.2 2108.32 1132.31 L2108.34 1136.69 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip450)\" d=\"M2129.34 1133.47 L2129.34 1137.5 Q2127.53 1136.57 2125.59 1136.11 Q2123.64 1135.65 2121.56 1135.65 Q2118.39 1135.65 2116.79 1136.62 Q2115.21 1137.59 2115.21 1139.53 Q2115.21 1141.02 2116.35 1141.87 Q2117.48 1142.71 2120.91 1143.47 L2122.37 1143.79 Q2126.9 1144.77 2128.8 1146.55 Q2130.72 1148.31 2130.72 1151.48 Q2130.72 1155.09 2127.85 1157.2 Q2125.01 1159.3 2120.01 1159.3 Q2117.92 1159.3 2115.65 1158.89 Q2113.41 1158.49 2110.91 1157.68 L2110.91 1153.28 Q2113.27 1154.51 2115.56 1155.14 Q2117.85 1155.74 2120.1 1155.74 Q2123.11 1155.74 2124.73 1154.72 Q2126.35 1153.68 2126.35 1151.8 Q2126.35 1150.07 2125.17 1149.14 Q2124.01 1148.22 2120.05 1147.36 L2118.57 1147.01 Q2114.61 1146.18 2112.85 1144.47 Q2111.09 1142.73 2111.09 1139.72 Q2111.09 1136.06 2113.69 1134.07 Q2116.28 1132.08 2121.05 1132.08 Q2123.41 1132.08 2125.49 1132.43 Q2127.58 1132.78 2129.34 1133.47 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><polyline clip-path=\"url(#clip450)\" style=\"stroke:#009af9; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"1645.83,1193.19 1766.28,1193.19 \"/>\n<path clip-path=\"url(#clip450)\" d=\"M1808.06 1194.82 L1808.06 1210.47 L1803.8 1210.47 L1803.8 1194.96 Q1803.8 1191.28 1802.37 1189.45 Q1800.93 1187.62 1798.06 1187.62 Q1794.61 1187.62 1792.62 1189.82 Q1790.63 1192.02 1790.63 1195.82 L1790.63 1210.47 L1786.35 1210.47 L1786.35 1184.55 L1790.63 1184.55 L1790.63 1188.57 Q1792.16 1186.24 1794.22 1185.08 Q1796.3 1183.92 1799.01 1183.92 Q1803.48 1183.92 1805.77 1186.7 Q1808.06 1189.45 1808.06 1194.82 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip450)\" d=\"M1826.61 1187.53 Q1823.18 1187.53 1821.19 1190.22 Q1819.2 1192.88 1819.2 1197.53 Q1819.2 1202.18 1821.17 1204.87 Q1823.16 1207.53 1826.61 1207.53 Q1830.01 1207.53 1832 1204.85 Q1833.99 1202.16 1833.99 1197.53 Q1833.99 1192.93 1832 1190.24 Q1830.01 1187.53 1826.61 1187.53 M1826.61 1183.92 Q1832.16 1183.92 1835.33 1187.53 Q1838.5 1191.14 1838.5 1197.53 Q1838.5 1203.9 1835.33 1207.53 Q1832.16 1211.14 1826.61 1211.14 Q1821.03 1211.14 1817.86 1207.53 Q1814.71 1203.9 1814.71 1197.53 Q1814.71 1191.14 1817.86 1187.53 Q1821.03 1183.92 1826.61 1183.92 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip450)\" d=\"M1860.59 1188.53 Q1859.87 1188.11 1859.01 1187.93 Q1858.18 1187.72 1857.16 1187.72 Q1853.55 1187.72 1851.61 1190.08 Q1849.68 1192.42 1849.68 1196.81 L1849.68 1210.47 L1845.4 1210.47 L1845.4 1184.55 L1849.68 1184.55 L1849.68 1188.57 Q1851.03 1186.21 1853.18 1185.08 Q1855.33 1183.92 1858.41 1183.92 Q1858.85 1183.92 1859.38 1183.99 Q1859.92 1184.04 1860.56 1184.15 L1860.59 1188.53 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip450)\" d=\"M1884.41 1189.52 Q1886 1186.65 1888.23 1185.29 Q1890.45 1183.92 1893.46 1183.92 Q1897.51 1183.92 1899.71 1186.77 Q1901.91 1189.59 1901.91 1194.82 L1901.91 1210.47 L1897.62 1210.47 L1897.62 1194.96 Q1897.62 1191.24 1896.3 1189.43 Q1894.98 1187.62 1892.28 1187.62 Q1888.97 1187.62 1887.04 1189.82 Q1885.12 1192.02 1885.12 1195.82 L1885.12 1210.47 L1880.84 1210.47 L1880.84 1194.96 Q1880.84 1191.21 1879.52 1189.43 Q1878.2 1187.62 1875.45 1187.62 Q1872.18 1187.62 1870.26 1189.85 Q1868.34 1192.05 1868.34 1195.82 L1868.34 1210.47 L1864.06 1210.47 L1864.06 1184.55 L1868.34 1184.55 L1868.34 1188.57 Q1869.8 1186.19 1871.84 1185.06 Q1873.87 1183.92 1876.67 1183.92 Q1879.5 1183.92 1881.47 1185.36 Q1883.46 1186.79 1884.41 1189.52 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /></svg>\n","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"After an initial equilibriation period, the norm fluctuates around the target number of walkers.","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"Now, let's look at using the shift to estimate the ground state energy of H. The mean of the shift is a useful estimator of the energy. Calculating the error bars is a bit more involved as autocorrelations have to be removed from the time series. This can be done with the function shift_estimator, which performs a blocking analysis on the shift column of the dataframe.","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"se = shift_estimator(df; skip=steps_equilibrate)","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"BlockingResult{Float64}\n  mean = -4.029 ± 0.022\n  with uncertainty of ± 0.00197191838159122\n  from 62 blocks after 5 transformations (k = 6).\n","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"Here, se contains the calculated mean and standard errors of the shift, as well as some additional information related to the blocking analysis.","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"Computing the error of the projected energy is a bit more complicated, as it's a ratio of fluctuating variables contained in the hproj and vproj columns in the dataframe. Thankfully, the complications are handled by the function projected_energy.","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"pe = projected_energy(df; skip=steps_equilibrate)","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"RatioBlockingResult{Float64,MonteCarloMeasurements.Particles{Float64, 2000}}\n  ratio = -4.01156 ± (0.00316074, 0.00321964) (MC)\n  95% confidence interval: [-4.01766, -4.00561] (MC)\n  linear error propagation: -4.01174 ± 0.00314823\n  |δ_y| = |0.00214861| (≤ 0.1 for normal approx)\n  Blocking successful with 15 blocks after 7 transformations (k = 8).\n","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"The result is a ratio distribution. We extract its median and the edges of the 95% confidence interval.","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"v = val_and_errs(pe; p=0.95)","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"(val = -4.011557370578022, val_l = 0.00609934912993193, val_u = 0.0059449649140495)","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"Let's visualise these estimators together with the time series of the shift.","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"plot(df.step, df.shift, ylabel=\"energy\", xlabel=\"step\", label=\"shift\", margin = 1Plots.cm)\n\nplot!(x->se.mean, df.step[steps_equilibrate+1:end], ribbon=se.err, label=\"shift mean\")\nplot!(\n    x -> v.val, df.step[steps_equilibrate+1:end], ribbon=(v.val_l,v.val_u),\n    label=\"projected energy\",\n)\nlens!([steps_equilibrate, last_step], [-5.1, -2.9]; inset=(1, bbox(0.2, 0.25, 0.6, 0.4)))","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"<?xml version=\"1.0\" encoding=\"utf-8\"?>\n<svg xmlns=\"http://www.w3.org/2000/svg\" xmlns:xlink=\"http://www.w3.org/1999/xlink\" width=\"600\" height=\"400\" viewBox=\"0 0 2400 1600\">\n<defs>\n  <clipPath id=\"clip480\">\n    <rect x=\"0\" y=\"0\" width=\"2400\" height=\"1600\"/>\n  </clipPath>\n</defs>\n<path clip-path=\"url(#clip480)\" d=\"M0 1600 L2400 1600 L2400 0 L0 0  Z\" fill=\"#ffffff\" fill-rule=\"evenodd\" fill-opacity=\"1\"/>\n<defs>\n  <clipPath id=\"clip481\">\n    <rect x=\"480\" y=\"0\" width=\"1681\" height=\"1600\"/>\n  </clipPath>\n</defs>\n<path clip-path=\"url(#clip480)\" d=\"M346.853 1281.45 L2211.02 1281.45 L2211.02 188.976 L346.853 188.976  Z\" fill=\"#ffffff\" fill-rule=\"evenodd\" fill-opacity=\"1\"/>\n<defs>\n  <clipPath id=\"clip482\">\n    <rect x=\"346\" y=\"188\" width=\"1865\" height=\"1093\"/>\n  </clipPath>\n</defs>\n<polyline clip-path=\"url(#clip482)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:2; stroke-opacity:0.1; fill:none\" points=\"399.026,1281.45 399.026,188.976 \"/>\n<polyline clip-path=\"url(#clip482)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:2; stroke-opacity:0.1; fill:none\" points=\"985.439,1281.45 985.439,188.976 \"/>\n<polyline clip-path=\"url(#clip482)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:2; stroke-opacity:0.1; fill:none\" points=\"1571.85,1281.45 1571.85,188.976 \"/>\n<polyline clip-path=\"url(#clip482)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:2; stroke-opacity:0.1; fill:none\" points=\"2158.26,1281.45 2158.26,188.976 \"/>\n<polyline clip-path=\"url(#clip482)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:2; stroke-opacity:0.1; fill:none\" points=\"346.853,1142.91 2211.02,1142.91 \"/>\n<polyline clip-path=\"url(#clip482)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:2; stroke-opacity:0.1; fill:none\" points=\"346.853,978.538 2211.02,978.538 \"/>\n<polyline clip-path=\"url(#clip482)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:2; stroke-opacity:0.1; fill:none\" points=\"346.853,814.168 2211.02,814.168 \"/>\n<polyline clip-path=\"url(#clip482)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:2; stroke-opacity:0.1; fill:none\" points=\"346.853,649.798 2211.02,649.798 \"/>\n<polyline clip-path=\"url(#clip482)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:2; stroke-opacity:0.1; fill:none\" points=\"346.853,485.428 2211.02,485.428 \"/>\n<polyline clip-path=\"url(#clip482)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:2; stroke-opacity:0.1; fill:none\" points=\"346.853,321.058 2211.02,321.058 \"/>\n<polyline clip-path=\"url(#clip480)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"346.853,1281.45 2211.02,1281.45 \"/>\n<polyline clip-path=\"url(#clip480)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"399.026,1281.45 399.026,1262.55 \"/>\n<polyline clip-path=\"url(#clip480)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"985.439,1281.45 985.439,1262.55 \"/>\n<polyline clip-path=\"url(#clip480)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"1571.85,1281.45 1571.85,1262.55 \"/>\n<polyline clip-path=\"url(#clip480)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"2158.26,1281.45 2158.26,1262.55 \"/>\n<path clip-path=\"url(#clip480)\" d=\"M399.026 1312.37 Q395.415 1312.37 393.587 1315.93 Q391.781 1319.47 391.781 1326.6 Q391.781 1333.71 393.587 1337.27 Q395.415 1340.82 399.026 1340.82 Q402.661 1340.82 404.466 1337.27 Q406.295 1333.71 406.295 1326.6 Q406.295 1319.47 404.466 1315.93 Q402.661 1312.37 399.026 1312.37 M399.026 1308.66 Q404.837 1308.66 407.892 1313.27 Q410.971 1317.85 410.971 1326.6 Q410.971 1335.33 407.892 1339.94 Q404.837 1344.52 399.026 1344.52 Q393.216 1344.52 390.138 1339.94 Q387.082 1335.33 387.082 1326.6 Q387.082 1317.85 390.138 1313.27 Q393.216 1308.66 399.026 1308.66 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip480)\" d=\"M929.965 1339.91 L937.604 1339.91 L937.604 1313.55 L929.293 1315.21 L929.293 1310.95 L937.557 1309.29 L942.233 1309.29 L942.233 1339.91 L949.872 1339.91 L949.872 1343.85 L929.965 1343.85 L929.965 1339.91 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip480)\" d=\"M969.316 1312.37 Q965.705 1312.37 963.877 1315.93 Q962.071 1319.47 962.071 1326.6 Q962.071 1333.71 963.877 1337.27 Q965.705 1340.82 969.316 1340.82 Q972.951 1340.82 974.756 1337.27 Q976.585 1333.71 976.585 1326.6 Q976.585 1319.47 974.756 1315.93 Q972.951 1312.37 969.316 1312.37 M969.316 1308.66 Q975.127 1308.66 978.182 1313.27 Q981.261 1317.85 981.261 1326.6 Q981.261 1335.33 978.182 1339.94 Q975.127 1344.52 969.316 1344.52 Q963.506 1344.52 960.428 1339.94 Q957.372 1335.33 957.372 1326.6 Q957.372 1317.85 960.428 1313.27 Q963.506 1308.66 969.316 1308.66 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip480)\" d=\"M999.478 1312.37 Q995.867 1312.37 994.038 1315.93 Q992.233 1319.47 992.233 1326.6 Q992.233 1333.71 994.038 1337.27 Q995.867 1340.82 999.478 1340.82 Q1003.11 1340.82 1004.92 1337.27 Q1006.75 1333.71 1006.75 1326.6 Q1006.75 1319.47 1004.92 1315.93 Q1003.11 1312.37 999.478 1312.37 M999.478 1308.66 Q1005.29 1308.66 1008.34 1313.27 Q1011.42 1317.85 1011.42 1326.6 Q1011.42 1335.33 1008.34 1339.94 Q1005.29 1344.52 999.478 1344.52 Q993.668 1344.52 990.589 1339.94 Q987.534 1335.33 987.534 1326.6 Q987.534 1317.85 990.589 1313.27 Q993.668 1308.66 999.478 1308.66 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip480)\" d=\"M1029.64 1312.37 Q1026.03 1312.37 1024.2 1315.93 Q1022.39 1319.47 1022.39 1326.6 Q1022.39 1333.71 1024.2 1337.27 Q1026.03 1340.82 1029.64 1340.82 Q1033.27 1340.82 1035.08 1337.27 Q1036.91 1333.71 1036.91 1326.6 Q1036.91 1319.47 1035.08 1315.93 Q1033.27 1312.37 1029.64 1312.37 M1029.64 1308.66 Q1035.45 1308.66 1038.51 1313.27 Q1041.58 1317.85 1041.58 1326.6 Q1041.58 1335.33 1038.51 1339.94 Q1035.45 1344.52 1029.64 1344.52 Q1023.83 1344.52 1020.75 1339.94 Q1017.7 1335.33 1017.7 1326.6 Q1017.7 1317.85 1020.75 1313.27 Q1023.83 1308.66 1029.64 1308.66 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip480)\" d=\"M1520.46 1339.91 L1536.78 1339.91 L1536.78 1343.85 L1514.84 1343.85 L1514.84 1339.91 Q1517.5 1337.16 1522.08 1332.53 Q1526.69 1327.88 1527.87 1326.53 Q1530.12 1324.01 1531 1322.27 Q1531.9 1320.51 1531.9 1318.82 Q1531.9 1316.07 1529.95 1314.33 Q1528.03 1312.6 1524.93 1312.6 Q1522.73 1312.6 1520.28 1313.36 Q1517.85 1314.13 1515.07 1315.68 L1515.07 1310.95 Q1517.89 1309.82 1520.35 1309.24 Q1522.8 1308.66 1524.84 1308.66 Q1530.21 1308.66 1533.4 1311.35 Q1536.6 1314.03 1536.6 1318.52 Q1536.6 1320.65 1535.79 1322.57 Q1535 1324.47 1532.89 1327.07 Q1532.31 1327.74 1529.21 1330.95 Q1526.11 1334.15 1520.46 1339.91 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip480)\" d=\"M1556.6 1312.37 Q1552.99 1312.37 1551.16 1315.93 Q1549.35 1319.47 1549.35 1326.6 Q1549.35 1333.71 1551.16 1337.27 Q1552.99 1340.82 1556.6 1340.82 Q1560.23 1340.82 1562.04 1337.27 Q1563.87 1333.71 1563.87 1326.6 Q1563.87 1319.47 1562.04 1315.93 Q1560.23 1312.37 1556.6 1312.37 M1556.6 1308.66 Q1562.41 1308.66 1565.46 1313.27 Q1568.54 1317.85 1568.54 1326.6 Q1568.54 1335.33 1565.46 1339.94 Q1562.41 1344.52 1556.6 1344.52 Q1550.79 1344.52 1547.71 1339.94 Q1544.65 1335.33 1544.65 1326.6 Q1544.65 1317.85 1547.71 1313.27 Q1550.79 1308.66 1556.6 1308.66 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip480)\" d=\"M1586.76 1312.37 Q1583.15 1312.37 1581.32 1315.93 Q1579.51 1319.47 1579.51 1326.6 Q1579.51 1333.71 1581.32 1337.27 Q1583.15 1340.82 1586.76 1340.82 Q1590.39 1340.82 1592.2 1337.27 Q1594.03 1333.71 1594.03 1326.6 Q1594.03 1319.47 1592.2 1315.93 Q1590.39 1312.37 1586.76 1312.37 M1586.76 1308.66 Q1592.57 1308.66 1595.62 1313.27 Q1598.7 1317.85 1598.7 1326.6 Q1598.7 1335.33 1595.62 1339.94 Q1592.57 1344.52 1586.76 1344.52 Q1580.95 1344.52 1577.87 1339.94 Q1574.81 1335.33 1574.81 1326.6 Q1574.81 1317.85 1577.87 1313.27 Q1580.95 1308.66 1586.76 1308.66 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip480)\" d=\"M1616.92 1312.37 Q1613.31 1312.37 1611.48 1315.93 Q1609.68 1319.47 1609.68 1326.6 Q1609.68 1333.71 1611.48 1337.27 Q1613.31 1340.82 1616.92 1340.82 Q1620.55 1340.82 1622.36 1337.27 Q1624.19 1333.71 1624.19 1326.6 Q1624.19 1319.47 1622.36 1315.93 Q1620.55 1312.37 1616.92 1312.37 M1616.92 1308.66 Q1622.73 1308.66 1625.79 1313.27 Q1628.87 1317.85 1628.87 1326.6 Q1628.87 1335.33 1625.79 1339.94 Q1622.73 1344.52 1616.92 1344.52 Q1611.11 1344.52 1608.03 1339.94 Q1604.98 1335.33 1604.98 1326.6 Q1604.98 1317.85 1608.03 1313.27 Q1611.11 1308.66 1616.92 1308.66 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip480)\" d=\"M2116.94 1325.21 Q2120.3 1325.93 2122.18 1328.2 Q2124.07 1330.47 2124.07 1333.8 Q2124.07 1338.92 2120.56 1341.72 Q2117.04 1344.52 2110.56 1344.52 Q2108.38 1344.52 2106.07 1344.08 Q2103.77 1343.66 2101.32 1342.81 L2101.32 1338.29 Q2103.26 1339.43 2105.58 1340 Q2107.89 1340.58 2110.42 1340.58 Q2114.82 1340.58 2117.11 1338.85 Q2119.42 1337.11 2119.42 1333.8 Q2119.42 1330.75 2117.27 1329.03 Q2115.14 1327.3 2111.32 1327.3 L2107.29 1327.3 L2107.29 1323.45 L2111.51 1323.45 Q2114.95 1323.45 2116.78 1322.09 Q2118.61 1320.7 2118.61 1318.11 Q2118.61 1315.44 2116.71 1314.03 Q2114.84 1312.6 2111.32 1312.6 Q2109.4 1312.6 2107.2 1313.01 Q2105 1313.43 2102.36 1314.31 L2102.36 1310.14 Q2105.02 1309.4 2107.34 1309.03 Q2109.68 1308.66 2111.74 1308.66 Q2117.06 1308.66 2120.16 1311.09 Q2123.26 1313.5 2123.26 1317.62 Q2123.26 1320.49 2121.62 1322.48 Q2119.98 1324.45 2116.94 1325.21 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip480)\" d=\"M2142.94 1312.37 Q2139.33 1312.37 2137.5 1315.93 Q2135.69 1319.47 2135.69 1326.6 Q2135.69 1333.71 2137.5 1337.27 Q2139.33 1340.82 2142.94 1340.82 Q2146.57 1340.82 2148.38 1337.27 Q2150.21 1333.71 2150.21 1326.6 Q2150.21 1319.47 2148.38 1315.93 Q2146.57 1312.37 2142.94 1312.37 M2142.94 1308.66 Q2148.75 1308.66 2151.81 1313.27 Q2154.88 1317.85 2154.88 1326.6 Q2154.88 1335.33 2151.81 1339.94 Q2148.75 1344.52 2142.94 1344.52 Q2137.13 1344.52 2134.05 1339.94 Q2131 1335.33 2131 1326.6 Q2131 1317.85 2134.05 1313.27 Q2137.13 1308.66 2142.94 1308.66 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip480)\" d=\"M2173.1 1312.37 Q2169.49 1312.37 2167.66 1315.93 Q2165.86 1319.47 2165.86 1326.6 Q2165.86 1333.71 2167.66 1337.27 Q2169.49 1340.82 2173.1 1340.82 Q2176.74 1340.82 2178.54 1337.27 Q2180.37 1333.71 2180.37 1326.6 Q2180.37 1319.47 2178.54 1315.93 Q2176.74 1312.37 2173.1 1312.37 M2173.1 1308.66 Q2178.91 1308.66 2181.97 1313.27 Q2185.05 1317.85 2185.05 1326.6 Q2185.05 1335.33 2181.97 1339.94 Q2178.91 1344.52 2173.1 1344.52 Q2167.29 1344.52 2164.21 1339.94 Q2161.16 1335.33 2161.16 1326.6 Q2161.16 1317.85 2164.21 1313.27 Q2167.29 1308.66 2173.1 1308.66 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip480)\" d=\"M2203.26 1312.37 Q2199.65 1312.37 2197.82 1315.93 Q2196.02 1319.47 2196.02 1326.6 Q2196.02 1333.71 2197.82 1337.27 Q2199.65 1340.82 2203.26 1340.82 Q2206.9 1340.82 2208.7 1337.27 Q2210.53 1333.71 2210.53 1326.6 Q2210.53 1319.47 2208.7 1315.93 Q2206.9 1312.37 2203.26 1312.37 M2203.26 1308.66 Q2209.07 1308.66 2212.13 1313.27 Q2215.21 1317.85 2215.21 1326.6 Q2215.21 1335.33 2212.13 1339.94 Q2209.07 1344.52 2203.26 1344.52 Q2197.45 1344.52 2194.38 1339.94 Q2191.32 1335.33 2191.32 1326.6 Q2191.32 1317.85 2194.38 1313.27 Q2197.45 1308.66 2203.26 1308.66 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip480)\" d=\"M1237.32 1391.71 L1237.32 1397.25 Q1234.84 1395.98 1232.17 1395.34 Q1229.49 1394.71 1226.63 1394.71 Q1222.27 1394.71 1220.07 1396.04 Q1217.91 1397.38 1217.91 1400.05 Q1217.91 1402.09 1219.47 1403.27 Q1221.03 1404.41 1225.74 1405.46 L1227.74 1405.91 Q1233.98 1407.25 1236.59 1409.7 Q1239.23 1412.12 1239.23 1416.48 Q1239.23 1421.44 1235.29 1424.34 Q1231.37 1427.23 1224.5 1427.23 Q1221.63 1427.23 1218.51 1426.66 Q1215.42 1426.12 1211.99 1425.01 L1211.99 1418.96 Q1215.23 1420.65 1218.38 1421.51 Q1221.54 1422.33 1224.62 1422.33 Q1228.76 1422.33 1230.99 1420.93 Q1233.22 1419.5 1233.22 1416.92 Q1233.22 1414.54 1231.59 1413.26 Q1230 1411.99 1224.56 1410.81 L1222.52 1410.33 Q1217.08 1409.19 1214.66 1406.83 Q1212.24 1404.45 1212.24 1400.31 Q1212.24 1395.28 1215.81 1392.54 Q1219.37 1389.8 1225.93 1389.8 Q1229.17 1389.8 1232.04 1390.28 Q1234.9 1390.76 1237.32 1391.71 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip480)\" d=\"M1254.35 1380.54 L1254.35 1390.66 L1266.41 1390.66 L1266.41 1395.22 L1254.35 1395.22 L1254.35 1414.57 Q1254.35 1418.93 1255.53 1420.17 Q1256.74 1421.41 1260.4 1421.41 L1266.41 1421.41 L1266.41 1426.31 L1260.4 1426.31 Q1253.62 1426.31 1251.04 1423.8 Q1248.46 1421.25 1248.46 1414.57 L1248.46 1395.22 L1244.17 1395.22 L1244.17 1390.66 L1248.46 1390.66 L1248.46 1380.54 L1254.35 1380.54 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip480)\" d=\"M1304.61 1407.02 L1304.61 1409.89 L1277.68 1409.89 Q1278.06 1415.94 1281.31 1419.12 Q1284.59 1422.27 1290.41 1422.27 Q1293.79 1422.27 1296.94 1421.44 Q1300.12 1420.61 1303.24 1418.96 L1303.24 1424.5 Q1300.09 1425.83 1296.78 1426.53 Q1293.47 1427.23 1290.06 1427.23 Q1281.53 1427.23 1276.54 1422.27 Q1271.57 1417.3 1271.57 1408.84 Q1271.57 1400.08 1276.28 1394.96 Q1281.02 1389.8 1289.04 1389.8 Q1296.24 1389.8 1300.41 1394.45 Q1304.61 1399.07 1304.61 1407.02 M1298.75 1405.3 Q1298.69 1400.5 1296.05 1397.63 Q1293.44 1394.77 1289.11 1394.77 Q1284.21 1394.77 1281.25 1397.54 Q1278.32 1400.31 1277.87 1405.34 L1298.75 1405.3 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip480)\" d=\"M1319.89 1420.96 L1319.89 1439.87 L1314 1439.87 L1314 1390.66 L1319.89 1390.66 L1319.89 1396.07 Q1321.73 1392.89 1324.53 1391.36 Q1327.37 1389.8 1331.28 1389.8 Q1337.77 1389.8 1341.82 1394.96 Q1345.89 1400.12 1345.89 1408.52 Q1345.89 1416.92 1341.82 1422.08 Q1337.77 1427.23 1331.28 1427.23 Q1327.37 1427.23 1324.53 1425.71 Q1321.73 1424.15 1319.89 1420.96 M1339.81 1408.52 Q1339.81 1402.06 1337.14 1398.4 Q1334.5 1394.71 1329.85 1394.71 Q1325.2 1394.71 1322.53 1398.4 Q1319.89 1402.06 1319.89 1408.52 Q1319.89 1414.98 1322.53 1418.67 Q1325.2 1422.33 1329.85 1422.33 Q1334.5 1422.33 1337.14 1418.67 Q1339.81 1414.98 1339.81 1408.52 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><polyline clip-path=\"url(#clip480)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"346.853,1281.45 346.853,188.976 \"/>\n<polyline clip-path=\"url(#clip480)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"346.853,1142.91 365.751,1142.91 \"/>\n<polyline clip-path=\"url(#clip480)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"346.853,978.538 365.751,978.538 \"/>\n<polyline clip-path=\"url(#clip480)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"346.853,814.168 365.751,814.168 \"/>\n<polyline clip-path=\"url(#clip480)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"346.853,649.798 365.751,649.798 \"/>\n<polyline clip-path=\"url(#clip480)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"346.853,485.428 365.751,485.428 \"/>\n<polyline clip-path=\"url(#clip480)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"346.853,321.058 365.751,321.058 \"/>\n<path clip-path=\"url(#clip480)\" d=\"M298.909 1128.71 Q295.298 1128.71 293.469 1132.27 Q291.664 1135.81 291.664 1142.94 Q291.664 1150.05 293.469 1153.61 Q295.298 1157.16 298.909 1157.16 Q302.543 1157.16 304.349 1153.61 Q306.177 1150.05 306.177 1142.94 Q306.177 1135.81 304.349 1132.27 Q302.543 1128.71 298.909 1128.71 M298.909 1125 Q304.719 1125 307.775 1129.61 Q310.853 1134.19 310.853 1142.94 Q310.853 1151.67 307.775 1156.28 Q304.719 1160.86 298.909 1160.86 Q293.099 1160.86 290.02 1156.28 Q286.964 1151.67 286.964 1142.94 Q286.964 1134.19 290.02 1129.61 Q293.099 1125 298.909 1125 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip480)\" d=\"M259.557 991.883 L267.196 991.883 L267.196 965.518 L258.886 967.184 L258.886 962.925 L267.15 961.258 L271.826 961.258 L271.826 991.883 L279.465 991.883 L279.465 995.818 L259.557 995.818 L259.557 991.883 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip480)\" d=\"M298.909 964.337 Q295.298 964.337 293.469 967.902 Q291.664 971.444 291.664 978.573 Q291.664 985.68 293.469 989.244 Q295.298 992.786 298.909 992.786 Q302.543 992.786 304.349 989.244 Q306.177 985.68 306.177 978.573 Q306.177 971.444 304.349 967.902 Q302.543 964.337 298.909 964.337 M298.909 960.633 Q304.719 960.633 307.775 965.24 Q310.853 969.823 310.853 978.573 Q310.853 987.3 307.775 991.906 Q304.719 996.49 298.909 996.49 Q293.099 996.49 290.02 991.906 Q286.964 987.3 286.964 978.573 Q286.964 969.823 290.02 965.24 Q293.099 960.633 298.909 960.633 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip480)\" d=\"M262.775 827.513 L279.094 827.513 L279.094 831.448 L257.15 831.448 L257.15 827.513 Q259.812 824.758 264.395 820.129 Q269.002 815.476 270.182 814.134 Q272.428 811.61 273.307 809.874 Q274.21 808.115 274.21 806.425 Q274.21 803.671 272.266 801.935 Q270.344 800.198 267.242 800.198 Q265.043 800.198 262.59 800.962 Q260.159 801.726 257.381 803.277 L257.381 798.555 Q260.205 797.421 262.659 796.842 Q265.113 796.263 267.15 796.263 Q272.52 796.263 275.715 798.948 Q278.909 801.634 278.909 806.124 Q278.909 808.254 278.099 810.175 Q277.312 812.073 275.205 814.666 Q274.627 815.337 271.525 818.555 Q268.423 821.749 262.775 827.513 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip480)\" d=\"M298.909 799.967 Q295.298 799.967 293.469 803.532 Q291.664 807.073 291.664 814.203 Q291.664 821.309 293.469 824.874 Q295.298 828.416 298.909 828.416 Q302.543 828.416 304.349 824.874 Q306.177 821.309 306.177 814.203 Q306.177 807.073 304.349 803.532 Q302.543 799.967 298.909 799.967 M298.909 796.263 Q304.719 796.263 307.775 800.87 Q310.853 805.453 310.853 814.203 Q310.853 822.93 307.775 827.536 Q304.719 832.12 298.909 832.12 Q293.099 832.12 290.02 827.536 Q286.964 822.93 286.964 814.203 Q286.964 805.453 290.02 800.87 Q293.099 796.263 298.909 796.263 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip480)\" d=\"M272.914 648.444 Q276.27 649.162 278.145 651.43 Q280.043 653.699 280.043 657.032 Q280.043 662.148 276.525 664.949 Q273.006 667.749 266.525 667.749 Q264.349 667.749 262.034 667.31 Q259.742 666.893 257.289 666.036 L257.289 661.523 Q259.233 662.657 261.548 663.236 Q263.863 663.814 266.386 663.814 Q270.784 663.814 273.076 662.078 Q275.39 660.342 275.39 657.032 Q275.39 653.976 273.238 652.263 Q271.108 650.527 267.289 650.527 L263.261 650.527 L263.261 646.685 L267.474 646.685 Q270.923 646.685 272.752 645.319 Q274.58 643.93 274.58 641.338 Q274.58 638.676 272.682 637.264 Q270.807 635.828 267.289 635.828 Q265.367 635.828 263.168 636.245 Q260.969 636.662 258.33 637.541 L258.33 633.375 Q260.992 632.634 263.307 632.264 Q265.645 631.893 267.705 631.893 Q273.029 631.893 276.131 634.324 Q279.233 636.731 279.233 640.851 Q279.233 643.722 277.59 645.713 Q275.946 647.68 272.914 648.444 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip480)\" d=\"M298.909 635.597 Q295.298 635.597 293.469 639.162 Q291.664 642.703 291.664 649.833 Q291.664 656.939 293.469 660.504 Q295.298 664.046 298.909 664.046 Q302.543 664.046 304.349 660.504 Q306.177 656.939 306.177 649.833 Q306.177 642.703 304.349 639.162 Q302.543 635.597 298.909 635.597 M298.909 631.893 Q304.719 631.893 307.775 636.5 Q310.853 641.083 310.853 649.833 Q310.853 658.56 307.775 663.166 Q304.719 667.749 298.909 667.749 Q293.099 667.749 290.02 663.166 Q286.964 658.56 286.964 649.833 Q286.964 641.083 290.02 636.5 Q293.099 631.893 298.909 631.893 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip480)\" d=\"M271.594 472.222 L259.789 490.671 L271.594 490.671 L271.594 472.222 M270.367 468.148 L276.247 468.148 L276.247 490.671 L281.177 490.671 L281.177 494.56 L276.247 494.56 L276.247 502.708 L271.594 502.708 L271.594 494.56 L255.992 494.56 L255.992 490.046 L270.367 468.148 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip480)\" d=\"M298.909 471.227 Q295.298 471.227 293.469 474.792 Q291.664 478.333 291.664 485.463 Q291.664 492.569 293.469 496.134 Q295.298 499.676 298.909 499.676 Q302.543 499.676 304.349 496.134 Q306.177 492.569 306.177 485.463 Q306.177 478.333 304.349 474.792 Q302.543 471.227 298.909 471.227 M298.909 467.523 Q304.719 467.523 307.775 472.13 Q310.853 476.713 310.853 485.463 Q310.853 494.19 307.775 498.796 Q304.719 503.379 298.909 503.379 Q293.099 503.379 290.02 498.796 Q286.964 494.19 286.964 485.463 Q286.964 476.713 290.02 472.13 Q293.099 467.523 298.909 467.523 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip480)\" d=\"M258.793 303.778 L277.15 303.778 L277.15 307.713 L263.076 307.713 L263.076 316.185 Q264.094 315.838 265.113 315.676 Q266.131 315.491 267.15 315.491 Q272.937 315.491 276.316 318.662 Q279.696 321.833 279.696 327.25 Q279.696 332.829 276.224 335.931 Q272.752 339.009 266.432 339.009 Q264.256 339.009 261.988 338.639 Q259.742 338.268 257.335 337.528 L257.335 332.829 Q259.418 333.963 261.641 334.519 Q263.863 335.074 266.34 335.074 Q270.344 335.074 272.682 332.968 Q275.02 330.861 275.02 327.25 Q275.02 323.639 272.682 321.532 Q270.344 319.426 266.34 319.426 Q264.465 319.426 262.59 319.843 Q260.738 320.259 258.793 321.139 L258.793 303.778 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip480)\" d=\"M298.909 306.857 Q295.298 306.857 293.469 310.421 Q291.664 313.963 291.664 321.093 Q291.664 328.199 293.469 331.764 Q295.298 335.306 298.909 335.306 Q302.543 335.306 304.349 331.764 Q306.177 328.199 306.177 321.093 Q306.177 313.963 304.349 310.421 Q302.543 306.857 298.909 306.857 M298.909 303.153 Q304.719 303.153 307.775 307.759 Q310.853 312.343 310.853 321.093 Q310.853 329.819 307.775 334.426 Q304.719 339.009 298.909 339.009 Q293.099 339.009 290.02 334.426 Q286.964 329.819 286.964 321.093 Q286.964 312.343 290.02 307.759 Q293.099 303.153 298.909 303.153 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip480)\" d=\"M186.448 812.969 L189.313 812.969 L189.313 839.896 Q195.36 839.514 198.543 836.268 Q201.694 832.989 201.694 827.165 Q201.694 823.791 200.867 820.64 Q200.039 817.457 198.384 814.338 L203.922 814.338 Q205.259 817.489 205.959 820.799 Q206.659 824.109 206.659 827.515 Q206.659 836.045 201.694 841.042 Q196.729 846.007 188.263 846.007 Q179.51 846.007 174.385 841.296 Q169.229 836.554 169.229 828.533 Q169.229 821.34 173.876 817.17 Q178.491 812.969 186.448 812.969 M184.73 818.826 Q179.924 818.889 177.059 821.531 Q174.194 824.141 174.194 828.47 Q174.194 833.371 176.963 836.331 Q179.733 839.259 184.761 839.705 L184.73 818.826 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip480)\" d=\"M184.22 773.724 L205.736 773.724 L205.736 779.581 L184.411 779.581 Q179.351 779.581 176.836 781.554 Q174.322 783.528 174.322 787.474 Q174.322 792.217 177.345 794.954 Q180.369 797.691 185.589 797.691 L205.736 797.691 L205.736 803.58 L170.088 803.58 L170.088 797.691 L175.627 797.691 Q172.412 795.591 170.821 792.758 Q169.229 789.893 169.229 786.169 Q169.229 780.027 173.049 776.876 Q176.836 773.724 184.22 773.724 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip480)\" d=\"M186.448 731.552 L189.313 731.552 L189.313 758.479 Q195.36 758.097 198.543 754.85 Q201.694 751.572 201.694 745.747 Q201.694 742.373 200.867 739.222 Q200.039 736.04 198.384 732.92 L203.922 732.92 Q205.259 736.071 205.959 739.382 Q206.659 742.692 206.659 746.097 Q206.659 754.627 201.694 759.624 Q196.729 764.59 188.263 764.59 Q179.51 764.59 174.385 759.879 Q169.229 755.137 169.229 747.116 Q169.229 739.923 173.876 735.753 Q178.491 731.552 186.448 731.552 M184.73 737.408 Q179.924 737.472 177.059 740.114 Q174.194 742.724 174.194 747.052 Q174.194 751.954 176.963 754.914 Q179.733 757.842 184.761 758.288 L184.73 737.408 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip480)\" d=\"M175.563 701.283 Q174.99 702.269 174.735 703.447 Q174.449 704.593 174.449 705.993 Q174.449 710.959 177.696 713.632 Q180.91 716.274 186.958 716.274 L205.736 716.274 L205.736 722.162 L170.088 722.162 L170.088 716.274 L175.627 716.274 Q172.38 714.428 170.821 711.468 Q169.229 708.508 169.229 704.275 Q169.229 703.67 169.325 702.938 Q169.388 702.206 169.547 701.315 L175.563 701.283 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip480)\" d=\"M187.499 672.828 Q181.133 672.828 177.632 675.47 Q174.131 678.08 174.131 682.822 Q174.131 687.533 177.632 690.175 Q181.133 692.785 187.499 692.785 Q193.833 692.785 197.334 690.175 Q200.835 687.533 200.835 682.822 Q200.835 678.08 197.334 675.47 Q193.833 672.828 187.499 672.828 M201.312 666.972 Q210.415 666.972 214.839 671.014 Q219.295 675.056 219.295 683.395 Q219.295 686.482 218.818 689.22 Q218.372 691.957 217.418 694.535 L211.72 694.535 Q213.121 691.957 213.789 689.443 Q214.457 686.928 214.457 684.318 Q214.457 678.557 211.434 675.693 Q208.442 672.828 202.363 672.828 L199.466 672.828 Q202.617 674.642 204.177 677.475 Q205.736 680.308 205.736 684.254 Q205.736 690.811 200.739 694.822 Q195.742 698.832 187.499 698.832 Q179.223 698.832 174.226 694.822 Q169.229 690.811 169.229 684.254 Q169.229 680.308 170.789 677.475 Q172.348 674.642 175.499 672.828 L170.088 672.828 L170.088 666.972 L201.312 666.972 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip480)\" d=\"M209.047 640.076 Q215.412 642.559 217.354 644.914 Q219.295 647.27 219.295 651.216 L219.295 655.895 L214.394 655.895 L214.394 652.458 Q214.394 650.039 213.248 648.702 Q212.102 647.365 207.837 645.742 L205.164 644.692 L170.088 659.11 L170.088 652.903 L197.97 641.763 L170.088 630.623 L170.088 624.417 L209.047 640.076 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><polyline clip-path=\"url(#clip482)\" style=\"stroke:#009af9; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"399.613,1021.8 400.199,910.53 400.786,808.44 401.372,714.909 401.958,629.366 402.545,551.286 403.131,480.178 403.718,415.59 404.304,461.017 404.891,403.256 405.477,351.092 406.063,304.164 406.65,342.787 407.236,374.248 407.823,333.276 408.409,297.242 408.995,381.53 409.582,347.399 410.168,369.353 410.755,342.217 411.341,318.049 411.927,297.954 412.514,280.204 413.1,263.761 413.687,250.695 414.273,240.532 414.86,232.672 415.446,226.48 416.032,222.338 416.619,219.895 417.205,245.314 417.792,266.888 418.378,266.79 418.964,268.215 419.551,270.583 420.137,292.663 420.724,297.186 421.31,302.691 421.896,309.795 422.483,316.73 423.069,338.707 423.656,360.017 424.242,404.944 424.829,413.749 425.415,433.839 426.001,453.494 426.588,463.339 427.174,491.588 427.761,509.939 428.347,520.299 428.933,531.055 429.52,557.479 430.106,574.783 430.693,597.941 431.279,621.095 431.865,643.672 432.452,659.781 433.038,680.633 433.625,695.781 434.211,705.323 434.798,714.734 435.384,724.272 435.97,733.682 436.557,752.168 437.143,765.963 437.73,779.422 438.316,788.078 438.902,805.038 439.489,825.083 440.075,840.382 440.662,855.165 441.248,869.369 441.835,879.743 442.421,886.045 443.007,899.302 443.594,911.855 444.18,921.261 444.767,927.259 445.353,941.924 445.939,947.813 446.526,962.005 447.112,967.27 447.699,983.689 448.285,985.829 448.871,993.191 449.458,997.968 450.044,1007.96 450.631,1014.75 451.217,1021.62 451.804,1030.61 452.39,1037.21 452.976,1043.67 453.563,1052.04 454.149,1058.24 454.736,1066.12 455.322,1073.94 455.908,1079.33 456.495,1086.43 457.081,1089.46 457.668,1098.33 458.254,1106.74 458.84,1112.91 459.427,1115.18 460.013,1119.25 460.6,1123.07 461.186,1128.93 461.773,1134.28 462.359,1135.91 462.945,1141.31 463.532,1142.75 464.118,1144.33 464.705,1144.17 465.291,1151.38 465.877,1154.83 466.464,1158.19 467.05,1161.42 467.637,1162.82 468.223,1163.72 468.809,1166.82 469.396,1168.01 469.982,1174.49 470.569,1178.9 471.155,1183.09 471.742,1182.16 472.328,1183.11 472.914,1182.33 473.501,1186.61 474.087,1185.83 474.674,1188.39 475.26,1188.08 475.846,1192.18 476.433,1197.73 477.019,1201.53 477.606,1203.53 478.192,1205.54 478.778,1205.63 479.365,1205.79 479.951,1208.05 480.538,1213.08 481.124,1213.28 481.711,1214.8 482.297,1216.57 482.883,1219.65 483.47,1222.69 484.056,1223.96 484.643,1223.86 485.229,1225.16 485.815,1226.67 486.402,1227.9 486.988,1232.12 487.575,1231.75 488.161,1235.9 488.748,1233.47 489.334,1235.62 489.92,1236.42 490.507,1240.5 491.093,1239.73 491.68,1240.51 492.266,1242.43 492.852,1245.82 493.439,1246.02 494.025,1250.52 494.612,1250.53 495.198,1248.01 495.784,1248.13 496.371,1245.61 496.957,1241.83 497.544,1243.68 498.13,1244 498.717,1243.17 499.303,1241.92 499.889,1243.92 500.476,1244.42 501.062,1243.23 501.649,1243.55 502.235,1246.96 502.821,1245.96 503.408,1245.38 503.994,1245.94 504.581,1244.85 505.167,1244.12 505.753,1243.34 506.34,1243.76 506.926,1247.05 507.513,1243.44 508.099,1243.83 508.686,1244.41 509.272,1245.01 509.858,1242.88 510.445,1244.93 511.031,1242.74 511.618,1240.91 512.204,1240.46 512.79,1242.69 513.377,1242.04 513.963,1240.42 514.55,1243.94 515.136,1245.89 515.722,1244.99 516.309,1243.95 516.895,1240.32 517.482,1238.47 518.068,1239.47 518.655,1239.25 519.241,1240.13 519.827,1242.34 520.414,1243.28 521,1244 521.587,1244.73 522.173,1244.02 522.759,1241.79 523.346,1244.11 523.932,1244.85 524.519,1243.12 525.105,1242.65 525.691,1246.03 526.278,1245.18 526.864,1245.66 527.451,1244.75 528.037,1245.38 528.624,1244.7 529.21,1243.88 529.796,1244.34 530.383,1244.95 530.969,1242.85 531.556,1243.55 532.142,1242.55 532.728,1241.75 533.315,1242.1 533.901,1241.26 534.488,1239.27 535.074,1238.69 535.661,1238.13 536.247,1236.2 536.833,1237.03 537.42,1236.43 538.006,1236.2 538.593,1239.93 539.179,1240.88 539.765,1241.66 540.352,1239.88 540.938,1241.87 541.525,1239.85 542.111,1239.19 542.697,1238.66 543.284,1238.08 543.87,1238.81 544.457,1238.53 545.043,1236.94 545.63,1236.68 546.216,1237.64 546.802,1235.85 547.389,1236.74 547.975,1237.84 548.562,1235.67 549.148,1237.98 549.734,1238.77 550.321,1238.42 550.907,1240.35 551.494,1239.95 552.08,1240.59 552.666,1239.83 553.253,1239.19 553.839,1235.93 554.426,1234.25 555.012,1233.87 555.599,1236.19 556.185,1231.67 556.771,1229.85 557.358,1229.73 557.944,1232.31 558.531,1231.93 559.117,1230.46 559.703,1232.94 560.29,1232.7 560.876,1232.26 561.463,1233.39 562.049,1233.12 562.635,1235.38 563.222,1232.09 563.808,1230.19 564.395,1230.06 564.981,1230.13 565.568,1231.14 566.154,1230.68 566.74,1229.37 567.327,1227.55 567.913,1227.38 568.5,1224.57 569.086,1224.46 569.672,1224.44 570.259,1225.69 570.845,1224.24 571.432,1223.95 572.018,1222.53 572.605,1222.71 573.191,1222.97 573.777,1225.57 574.364,1229.64 574.95,1226.42 575.537,1227.39 576.123,1227.32 576.709,1227.17 577.296,1227.06 577.882,1228.19 578.469,1225.06 579.055,1226.34 579.641,1224.7 580.228,1224.36 580.814,1224.09 581.401,1225.11 581.987,1229 582.574,1231.44 583.16,1230.83 583.746,1227.91 584.333,1227.48 584.919,1226.09 585.506,1225.6 586.092,1223.85 586.678,1226.76 587.265,1225.25 587.851,1225.13 588.438,1225.19 589.024,1228.98 589.61,1231.06 590.197,1230.87 590.783,1230.29 591.37,1230.08 591.956,1231.2 592.543,1231.83 593.129,1232.54 593.715,1230.63 594.302,1228.77 594.888,1230.99 595.475,1230.52 596.061,1229.99 596.647,1228.12 597.234,1226.57 597.82,1230.31 598.407,1228.63 598.993,1224.43 599.579,1227.06 600.166,1226.65 600.752,1226.34 601.339,1225.94 601.925,1220.54 602.512,1220.37 603.098,1220.36 603.684,1223.48 604.271,1225.78 604.857,1225.52 605.444,1225.27 606.03,1222.45 606.616,1223.72 607.203,1222.25 607.789,1222.49 608.376,1221.14 608.962,1225.12 609.548,1227.45 610.135,1229.6 610.721,1230.46 611.308,1228.56 611.894,1228.38 612.481,1227.81 613.067,1227.34 613.653,1226.7 614.24,1225.18 614.826,1224.89 615.413,1227.69 615.999,1228.41 616.585,1228.05 617.172,1227.54 617.758,1230.84 618.345,1230.37 618.931,1229.9 619.518,1230.84 620.104,1234.21 620.69,1237.52 621.277,1236.35 621.863,1235.71 622.45,1236.35 623.036,1236.63 623.622,1237.43 624.209,1239.04 624.795,1235.23 625.382,1234.08 625.968,1233.07 626.554,1232.17 627.141,1228.6 627.727,1227.97 628.314,1226.32 628.9,1222.95 629.487,1223.96 630.073,1218.58 630.659,1219.94 631.246,1219.87 631.832,1221.08 632.419,1219.5 633.005,1219.32 633.591,1219.23 634.178,1216.32 634.764,1216.41 635.351,1216.52 635.937,1215.41 636.523,1211.47 637.11,1211.82 637.696,1214.75 638.283,1217.7 638.869,1219.21 639.456,1219.1 640.042,1217.53 640.628,1218.71 641.215,1218.67 641.801,1218.62 642.388,1219.85 642.974,1218.33 643.56,1218.3 644.147,1216.8 644.733,1217.03 645.32,1218.46 645.906,1217.26 646.492,1215.86 647.079,1215.93 647.665,1214.77 648.252,1217.58 648.838,1220.14 649.425,1221.19 650.011,1220.84 650.597,1223.11 651.184,1224.47 651.77,1218.92 652.357,1221.45 652.943,1221.22 653.529,1221.05 654.116,1222.61 654.702,1223.73 655.289,1224.68 655.875,1224.54 656.462,1222.96 657.048,1226.47 657.634,1223.27 658.221,1222.8 658.807,1221.18 659.394,1225.21 659.98,1223.43 660.566,1227.2 661.153,1225.14 661.739,1224.74 662.326,1222.83 662.912,1222.69 663.498,1221.18 664.085,1224.85 664.671,1221.8 665.258,1221.48 665.844,1221.1 666.431,1221.86 667.017,1217.46 667.603,1221.32 668.19,1221.05 668.776,1219.38 669.363,1220.46 669.949,1218.86 670.535,1216.14 671.122,1216.12 671.708,1218.87 672.295,1218.76 672.881,1218.41 673.467,1218.15 674.054,1217.93 674.64,1218.98 675.227,1217.46 675.813,1214.45 676.4,1215.94 676.986,1215.92 677.572,1217.29 678.159,1216.86 678.745,1216.94 679.332,1216.95 679.918,1215.63 680.504,1217.04 681.091,1217.25 681.677,1217.26 682.264,1217.35 682.85,1217.12 683.436,1218.6 684.023,1219.94 684.609,1221.08 685.196,1219.4 685.782,1218 686.369,1219.4 686.955,1216.43 687.541,1217.74 688.128,1219.01 688.714,1219.1 689.301,1217.64 689.887,1217.39 690.473,1216.07 691.06,1215.82 691.646,1215.87 692.233,1215.8 692.819,1217.13 693.405,1215.7 693.992,1215.94 694.578,1214.52 695.165,1216.29 695.751,1220.12 696.338,1221.06 696.924,1221.93 697.51,1221.26 698.097,1220.48 698.683,1218.87 699.27,1217.34 699.856,1217.07 700.442,1219.54 701.029,1217.73 701.615,1213.15 702.202,1211.76 702.788,1213.36 703.375,1214.41 703.961,1214.37 704.547,1216.98 705.134,1216.78 705.72,1217.94 706.307,1213.42 706.893,1213.44 707.479,1214.76 708.066,1214.63 708.652,1214.84 709.239,1210.93 709.825,1211.18 710.411,1213.7 710.998,1213.71 711.584,1210.88 712.171,1214.79 712.757,1214.7 713.344,1216.06 713.93,1218.7 714.516,1217.15 715.103,1217.04 715.689,1216.75 716.276,1216.51 716.862,1215.14 717.448,1213.95 718.035,1215.08 718.621,1216.37 719.208,1216.37 719.794,1214.77 720.38,1216.11 720.967,1218.39 721.553,1219.21 722.14,1220.38 722.726,1218.63 723.313,1218.2 723.899,1216.53 724.485,1216.31 725.072,1214.66 725.658,1215.91 726.245,1215.49 726.831,1213.94 727.417,1216.44 728.004,1216.15 728.59,1214.86 729.177,1215.14 729.763,1212.23 730.349,1210.89 730.936,1210.96 731.522,1213.84 732.109,1212.31 732.695,1212.43 733.282,1212.66 733.868,1211.61 734.454,1211.72 735.041,1213.13 735.627,1213.28 736.214,1214.7 736.8,1214.69 737.386,1214.84 737.973,1214.88 738.559,1213.61 739.146,1212.41 739.732,1209.57 740.318,1211.1 740.905,1212.87 741.491,1211.38 742.078,1212.65 742.664,1211.28 743.251,1211.33 743.837,1211.36 744.423,1210.22 745.01,1210.32 745.596,1214.78 746.183,1220.03 746.769,1221.13 747.355,1216.83 747.942,1216.94 748.528,1212.89 749.115,1213 749.701,1214.32 750.288,1216.89 750.874,1215.32 751.46,1215.23 752.047,1213.74 752.633,1213.76 753.22,1211.12 753.806,1212.52 754.392,1213.93 754.979,1213.85 755.565,1214.08 756.152,1214.16 756.738,1214.11 757.324,1212.82 757.911,1213 758.497,1215.91 759.084,1216.65 759.67,1217.8 760.257,1217.62 760.843,1214.61 761.429,1213.19 762.016,1215.61 762.602,1216.72 763.189,1212.3 763.775,1211.09 764.361,1209.96 764.948,1208.63 765.534,1208.79 766.121,1209.1 766.707,1209.34 767.293,1206.6 767.88,1205.57 768.466,1205.78 769.053,1207.33 769.639,1207.89 770.226,1209.64 770.812,1211.32 771.398,1212.98 771.985,1212.9 772.571,1213.17 773.158,1213.25 773.744,1211.87 774.33,1210.44 774.917,1210.91 775.503,1212.36 776.09,1213.71 776.676,1213.66 777.262,1213.67 777.849,1212.15 778.435,1210.87 779.022,1212.3 779.608,1211.1 780.195,1209.58 780.781,1211.29 781.367,1210.09 781.954,1211.38 782.54,1211.43 783.127,1212.99 783.713,1214.49 784.299,1211.45 784.886,1210.31 785.472,1210.44 786.059,1210.44 786.645,1211.91 787.232,1212.96 787.818,1214.1 788.404,1213.68 788.991,1213.29 789.577,1214.24 790.164,1213.97 790.75,1214.93 791.336,1217.23 791.923,1217.29 792.509,1219.84 793.096,1219.27 793.682,1216.61 794.268,1215.19 794.855,1214.99 795.441,1216.21 796.028,1214.36 796.614,1211.53 797.201,1211.93 797.787,1212.22 798.373,1210.67 798.96,1210.6 799.546,1214.64 800.133,1215.79 800.719,1216.75 801.305,1215.25 801.892,1213.94 802.478,1214.74 803.065,1211.79 803.651,1213.25 804.237,1213.24 804.824,1211.51 805.41,1213.97 805.997,1214.02 806.583,1215.1 807.17,1217.51 807.756,1218.67 808.342,1219.72 808.929,1220.58 809.515,1218.71 810.102,1216.94 810.688,1216.87 811.274,1219.39 811.861,1220.28 812.447,1219.84 813.034,1218.33 813.62,1218.15 814.206,1219.12 814.793,1217.33 815.379,1215.76 815.966,1216.67 816.552,1213.67 817.139,1213.59 817.725,1211.8 818.311,1211.24 818.898,1212.46 819.484,1215.3 820.071,1213.81 820.657,1212.51 821.243,1209.81 821.83,1208.37 822.416,1208.54 823.003,1207.27 823.589,1206.18 824.175,1210.12 824.762,1211.72 825.348,1213.02 825.935,1215.63 826.521,1215.34 827.108,1216.12 827.694,1217.33 828.28,1217.05 828.867,1214.34 829.453,1214.54 830.04,1215.64 830.626,1216.4 831.212,1215.93 831.799,1212.78 832.385,1214.04 832.972,1209.81 833.558,1211.18 834.145,1208.51 834.731,1207.44 835.317,1207.7 835.904,1207.53 836.49,1210.33 837.077,1210.19 837.663,1210.34 838.249,1210.2 838.836,1212.93 839.422,1213.92 840.009,1213.33 840.595,1213.4 841.181,1211.86 841.768,1210.51 842.354,1207.67 842.941,1207.38 843.527,1203.33 844.114,1199.47 844.7,1200 845.286,1198.92 845.873,1199.52 846.459,1198.61 847.046,1199.21 847.632,1198.67 848.218,1200.73 848.805,1205.29 849.391,1210.92 849.978,1212.29 850.564,1210.95 851.15,1210.81 851.737,1209.44 852.323,1214.83 852.91,1214.6 853.496,1214.55 854.083,1215.69 854.669,1216.99 855.255,1218.11 855.842,1216.61 856.428,1214.08 857.015,1211.07 857.601,1209.86 858.187,1208.76 858.774,1210.17 859.36,1211.62 859.947,1216.86 860.533,1216.57 861.119,1216.42 861.706,1211.84 862.292,1208.95 862.879,1206.14 863.465,1206.36 864.052,1208.05 864.638,1209.77 865.224,1213.8 865.811,1212.47 866.397,1212.35 866.984,1213.68 867.57,1215.38 868.156,1212.59 868.743,1212.36 869.329,1208.15 869.916,1208.63 870.502,1209.98 871.089,1210.89 871.675,1210.76 872.261,1213.4 872.848,1214.47 873.434,1214.45 874.021,1215.47 874.607,1215.03 875.193,1214.68 875.78,1210.41 876.366,1209.21 876.953,1208.22 877.539,1207.01 878.125,1208.53 878.712,1207.43 879.298,1206.64 879.885,1208.26 880.471,1209.71 881.058,1209.94 881.644,1211.3 882.23,1212.42 882.817,1212.45 883.403,1213.65 883.99,1211.76 884.576,1211.58 885.162,1214.25 885.749,1215.33 886.335,1215.17 886.922,1213.53 887.508,1214.72 888.094,1214.54 888.681,1215.59 889.267,1214.17 889.854,1213.99 890.44,1213.76 891.027,1215.76 891.613,1215.38 892.199,1212.28 892.786,1208 893.372,1209.83 893.959,1212.52 894.545,1211.41 895.131,1215.34 895.718,1214.99 896.304,1216.05 896.891,1214.13 897.477,1215.04 898.063,1216.21 898.65,1218.75 899.236,1219.79 899.823,1220.89 900.409,1220.67 900.996,1219 901.582,1216.82 902.168,1214.15 902.755,1214.02 903.341,1210.92 903.928,1213.63 904.514,1214.9 905.1,1211.89 905.687,1212.96 906.273,1214.15 906.86,1211.23 907.446,1211.24 908.032,1211.15 908.619,1212.3 909.205,1213.49 909.792,1214.71 910.378,1212.09 910.965,1213.35 911.551,1213.13 912.137,1211.23 912.724,1216.26 913.31,1215.96 913.897,1218.47 914.483,1218.08 915.069,1212.27 915.656,1210.74 916.242,1210.41 916.829,1210.58 917.415,1210.51 918.002,1211.66 918.588,1210.31 919.174,1214.39 919.761,1214.15 920.347,1211.3 920.934,1213.89 921.52,1215.04 922.106,1217.19 922.693,1219.64 923.279,1218.1 923.866,1220.61 924.452,1218.74 925.038,1218.42 925.625,1216.78 926.211,1218.94 926.798,1218.45 927.384,1217.88 927.971,1216.25 928.557,1213.26 929.143,1213.12 929.73,1212.93 930.316,1209.97 930.903,1207.27 931.489,1208.9 932.075,1209.09 932.662,1210.48 933.248,1207.77 933.835,1206.44 934.421,1209.46 935.007,1209.66 935.594,1209.68 936.18,1206.63 936.767,1205.67 937.353,1200.49 937.94,1201.17 938.526,1200.02 939.112,1200.62 939.699,1199.58 940.285,1201.21 940.872,1203.25 941.458,1206.57 942.044,1208.13 942.631,1209.78 943.217,1209.78 943.804,1209.89 944.39,1209.46 944.976,1208.18 945.563,1209.48 946.149,1210.84 946.736,1213.16 947.322,1210.7 947.909,1211.92 948.495,1210.6 949.081,1208.31 949.668,1208.53 950.254,1209.93 950.841,1207.24 951.427,1208.76 952.013,1207.57 952.6,1206.39 953.186,1206.43 953.773,1207.87 954.359,1205.61 954.945,1207.31 955.532,1208.81 956.118,1210.29 956.705,1210.31 957.291,1209.02 957.878,1208.95 958.464,1206.35 959.05,1205.06 959.637,1205.16 960.223,1201.55 960.81,1202.12 961.396,1202.67 961.982,1206 962.569,1207.47 963.155,1210.48 963.742,1214.64 964.328,1215.63 964.915,1215.16 965.501,1213.51 966.087,1213.19 966.674,1210.27 967.26,1209.98 967.847,1210.17 968.433,1212.91 969.019,1211.37 969.606,1212.37 970.192,1212.26 970.779,1213.56 971.365,1214.35 971.951,1216.7 972.538,1215.29 973.124,1216.52 973.711,1216.23 974.297,1215.78 974.884,1214.33 975.47,1211.3 976.056,1211.24 976.643,1208.44 977.229,1207.14 977.816,1208.51 978.402,1206.72 978.988,1208.24 979.575,1207.29 980.161,1207.51 980.748,1208.92 981.334,1208.82 981.92,1208.85 982.507,1208.65 983.093,1210.01 983.68,1211.21 984.266,1211.06 984.853,1210.02 985.439,1209.82 986.025,1209.81 986.612,1208.35 987.198,1207.06 987.785,1208.45 988.371,1205.61 988.957,1208.38 989.544,1211.34 990.13,1211.27 990.717,1211.22 991.303,1213.89 991.889,1213.74 992.476,1215.02 993.062,1217.4 993.649,1217.19 994.235,1218.22 994.822,1217.84 995.408,1218.47 995.994,1219.39 996.581,1219.27 997.167,1218.63 997.754,1217.97 998.34,1217.47 998.926,1216.7 999.513,1219.18 1000.1,1217.38 1000.69,1211.69 1001.27,1211.46 1001.86,1211.5 1002.44,1212.7 1003.03,1208.79 1003.62,1210.1 1004.2,1208.72 1004.79,1208.86 1005.38,1206.59 1005.96,1205.49 1006.55,1208.41 1007.14,1207.21 1007.72,1208.53 1008.31,1209.75 1008.9,1212.81 1009.48,1212.87 1010.07,1215.33 1010.65,1217.63 1011.24,1213.44 1011.83,1215.83 1012.41,1215.34 1013,1213.41 1013.59,1213.12 1014.17,1212.8 1014.76,1211.16 1015.35,1212.48 1015.93,1212.44 1016.52,1209.72 1017.11,1209.69 1017.69,1206.89 1018.28,1205.9 1018.86,1206.13 1019.45,1205.18 1020.04,1205.34 1020.62,1205.68 1021.21,1205.9 1021.8,1207.68 1022.38,1206.4 1022.97,1202.5 1023.56,1201.78 1024.14,1203.55 1024.73,1205.14 1025.32,1206.71 1025.9,1205.48 1026.49,1205.39 1027.07,1206.99 1027.66,1205.68 1028.25,1209.69 1028.83,1208.32 1029.42,1208.28 1030.01,1211.24 1030.59,1211.18 1031.18,1211.2 1031.77,1211.17 1032.35,1211.21 1032.94,1208.12 1033.52,1208.02 1034.11,1206.7 1034.7,1205.38 1035.28,1205.9 1035.87,1205.82 1036.46,1206.09 1037.04,1204.91 1037.63,1205.11 1038.22,1205.56 1038.8,1205.59 1039.39,1205.77 1039.98,1207.23 1040.56,1205.96 1041.15,1203.35 1041.73,1205.06 1042.32,1203.84 1042.91,1204.27 1043.49,1206.02 1044.08,1203.49 1044.67,1202.49 1045.25,1202.91 1045.84,1204.59 1046.43,1203.36 1047.01,1202.11 1047.6,1201.13 1048.19,1201.91 1048.77,1202.47 1049.36,1201.26 1049.94,1201.84 1050.53,1203.51 1051.12,1202.61 1051.7,1205.72 1052.29,1204.62 1052.88,1203.81 1053.46,1203.99 1054.05,1205.59 1054.64,1202.95 1055.22,1202.01 1055.81,1205.07 1056.39,1205.37 1056.98,1207.02 1057.57,1207.08 1058.15,1207.27 1058.74,1204.89 1059.33,1205.01 1059.91,1206.53 1060.5,1205.53 1061.09,1204.83 1061.67,1206.52 1062.26,1205.22 1062.85,1206.58 1063.43,1209.55 1064.02,1210.66 1064.6,1210.26 1065.19,1207.64 1065.78,1207.43 1066.36,1207.75 1066.95,1207.63 1067.54,1206.5 1068.12,1205.32 1068.71,1205.56 1069.3,1204.3 1069.88,1206.23 1070.47,1204.82 1071.06,1203.86 1071.64,1205.49 1072.23,1204.33 1072.81,1207.47 1073.4,1211.39 1073.99,1212.71 1074.57,1213.83 1075.16,1212.39 1075.75,1212.34 1076.33,1213.6 1076.92,1213.51 1077.51,1210.62 1078.09,1210.48 1078.68,1211.99 1079.26,1214.29 1079.85,1215.11 1080.44,1213.74 1081.02,1213.44 1081.61,1212.12 1082.2,1211.02 1082.78,1210.94 1083.37,1210.49 1083.96,1213.06 1084.54,1211.47 1085.13,1209.97 1085.72,1212.65 1086.3,1212.45 1086.89,1213.66 1087.47,1214.44 1088.06,1215.47 1088.65,1215.12 1089.23,1215.91 1089.82,1216.87 1090.41,1216.04 1090.99,1211.88 1091.58,1210.38 1092.17,1208.09 1092.75,1209.7 1093.34,1208.7 1093.93,1208.97 1094.51,1207.9 1095.1,1209.3 1095.68,1209.42 1096.27,1209.44 1096.86,1209.52 1097.44,1208.43 1098.03,1208.75 1098.62,1208.86 1099.2,1206 1099.79,1207.32 1100.38,1207.31 1100.96,1204.92 1101.55,1205.42 1102.14,1205.75 1102.72,1208.83 1103.31,1211.73 1103.89,1213.01 1104.48,1210.15 1105.07,1210.08 1105.65,1211.51 1106.24,1214.3 1106.83,1212.92 1107.41,1216.48 1108,1214.57 1108.59,1214.75 1109.17,1216.13 1109.76,1215.79 1110.34,1216.74 1110.93,1216.21 1111.52,1215.86 1112.1,1215.6 1112.69,1215.35 1113.28,1214.77 1113.86,1217.27 1114.45,1218.06 1115.04,1217.88 1115.62,1215.78 1116.21,1214.32 1116.8,1213.89 1117.38,1215.12 1117.97,1216.11 1118.55,1214.58 1119.14,1212.89 1119.73,1211.3 1120.31,1208.3 1120.9,1208.35 1121.49,1207.14 1122.07,1206.05 1122.66,1205.08 1123.25,1202.79 1123.83,1201.89 1124.42,1201.2 1125.01,1201.66 1125.59,1203.11 1126.18,1202.19 1126.76,1203.68 1127.35,1202.84 1127.94,1201.79 1128.52,1206.09 1129.11,1207.72 1129.7,1207.77 1130.28,1208.01 1130.87,1209.81 1131.46,1207.13 1132.04,1207.31 1132.63,1206.05 1133.21,1203.4 1133.8,1204.95 1134.39,1207.72 1134.97,1209.37 1135.56,1206.9 1136.15,1206.81 1136.73,1205.84 1137.32,1205.98 1137.91,1204.71 1138.49,1203.5 1139.08,1203.83 1139.67,1205.23 1140.25,1205.41 1140.84,1204.27 1141.42,1207.28 1142.01,1207.33 1142.6,1206.12 1143.18,1206.38 1143.77,1206.59 1144.36,1206.52 1144.94,1207.78 1145.53,1207.75 1146.12,1210.76 1146.7,1210.71 1147.29,1209.04 1147.88,1211.61 1148.46,1212.87 1149.05,1216.52 1149.63,1217.34 1150.22,1211.81 1150.81,1210.09 1151.39,1212.49 1151.98,1212.42 1152.57,1212.34 1153.15,1209.36 1153.74,1209.38 1154.33,1209.54 1154.91,1210.61 1155.5,1209.27 1156.09,1210.64 1156.67,1209.32 1157.26,1208.02 1157.84,1207.73 1158.43,1207.66 1159.02,1206.66 1159.6,1206.6 1160.19,1207.93 1160.78,1209.31 1161.36,1210.51 1161.95,1209.35 1162.54,1207.85 1163.12,1208.07 1163.71,1208.34 1164.29,1208.19 1164.88,1206.83 1165.47,1205.73 1166.05,1208.7 1166.64,1208.77 1167.23,1208.89 1167.81,1209.15 1168.4,1209.42 1168.99,1210.62 1169.57,1212.03 1170.16,1210.5 1170.75,1209.02 1171.33,1210.29 1171.92,1213.21 1172.5,1217.48 1173.09,1218.43 1173.68,1221.92 1174.26,1220.95 1174.85,1221.67 1175.44,1219.67 1176.02,1221.85 1176.61,1223.85 1177.2,1222.98 1177.78,1219.45 1178.37,1219.37 1178.96,1218.39 1179.54,1220.89 1180.13,1218.82 1180.71,1217 1181.3,1217.72 1181.89,1214.63 1182.47,1215.48 1183.06,1213.8 1183.65,1210.71 1184.23,1209.69 1184.82,1212.27 1185.41,1213.41 1185.99,1214.24 1186.58,1213.94 1187.16,1214.77 1187.75,1215.8 1188.34,1212.71 1188.92,1209.72 1189.51,1209.52 1190.1,1210.88 1190.68,1211.99 1191.27,1213.06 1191.86,1212.77 1192.44,1213.77 1193.03,1214.89 1193.62,1214.68 1194.2,1213.2 1194.79,1211.6 1195.37,1214.06 1195.96,1214.84 1196.55,1211.96 1197.13,1209.11 1197.72,1211.59 1198.31,1211.56 1198.89,1211.64 1199.48,1211.35 1200.07,1211.22 1200.65,1209.96 1201.24,1209.97 1201.83,1207.22 1202.41,1205.83 1203,1204.7 1203.58,1207.47 1204.17,1210.41 1204.76,1207.68 1205.34,1207.97 1205.93,1210.66 1206.52,1210.56 1207.1,1211.56 1207.69,1214.38 1208.28,1213.95 1208.86,1213.55 1209.45,1217.04 1210.03,1213.8 1210.62,1213.59 1211.21,1216.08 1211.79,1218.59 1212.38,1216.57 1212.97,1216.14 1213.55,1212.86 1214.14,1208.45 1214.73,1209.89 1215.31,1208.46 1215.9,1208.35 1216.49,1208.19 1217.07,1209.67 1217.66,1211.1 1218.24,1208.11 1218.83,1205.31 1219.42,1208.19 1220,1207.02 1220.59,1207.25 1221.18,1205.94 1221.76,1207.47 1222.35,1206.24 1222.94,1206.52 1223.52,1206.08 1224.11,1206.18 1224.7,1207.42 1225.28,1206.01 1225.87,1207.42 1226.45,1206.15 1227.04,1207.6 1227.63,1207.65 1228.21,1209.08 1228.8,1210.63 1229.39,1207.86 1229.97,1205.13 1230.56,1206.6 1231.15,1208.11 1231.73,1208.28 1232.32,1207.09 1232.91,1207.14 1233.49,1209.63 1234.08,1208.07 1234.66,1208.03 1235.25,1205.46 1235.84,1201.68 1236.42,1200.83 1237.01,1199.9 1237.6,1203.51 1238.18,1203.91 1238.77,1203.15 1239.36,1202.32 1239.94,1202.8 1240.53,1201.9 1241.11,1200.8 1241.7,1201.3 1242.29,1199.13 1242.87,1199.55 1243.46,1198.79 1244.05,1201.52 1244.63,1196.55 1245.22,1198.6 1245.81,1201.91 1246.39,1201.28 1246.98,1203.34 1247.57,1202.34 1248.15,1200.15 1248.74,1200.77 1249.32,1202.68 1249.91,1202.12 1250.5,1201.09 1251.08,1201.85 1251.67,1205.03 1252.26,1205.13 1252.84,1206.54 1253.43,1206.7 1254.02,1204.03 1254.6,1202.65 1255.19,1201.67 1255.78,1202.03 1256.36,1202.41 1256.95,1204.04 1257.53,1207.16 1258.12,1210 1258.71,1209.83 1259.29,1207.13 1259.88,1208.71 1260.47,1208.83 1261.05,1207.49 1261.64,1207.89 1262.23,1210.9 1262.81,1209.51 1263.4,1210.59 1263.98,1211.85 1264.57,1213.2 1265.16,1211.67 1265.74,1211.37 1266.33,1212.56 1266.92,1212.61 1267.5,1213.6 1268.09,1214.71 1268.68,1217.02 1269.26,1216.39 1269.85,1215.79 1270.44,1216.99 1271.02,1219.03 1271.61,1219.61 1272.19,1219.08 1272.78,1215.99 1273.37,1215.51 1273.95,1214.28 1274.54,1213.84 1275.13,1212.3 1275.71,1209.36 1276.3,1210.64 1276.89,1207.83 1277.47,1207.9 1278.06,1209.22 1278.65,1209.39 1279.23,1209.26 1279.82,1209.18 1280.4,1210.51 1280.99,1205.14 1281.58,1204.22 1282.16,1204.52 1282.75,1202.18 1283.34,1203.94 1283.92,1205.69 1284.51,1206.01 1285.1,1209.91 1285.68,1209.86 1286.27,1209.99 1286.86,1211.25 1287.44,1211.22 1288.03,1211.2 1288.61,1212.29 1289.2,1212.36 1289.79,1214.73 1290.37,1216.2 1290.96,1214.42 1291.55,1211.58 1292.13,1210.08 1292.72,1211.44 1293.31,1212.78 1293.89,1213.91 1294.48,1213.82 1295.06,1215.05 1295.65,1214.76 1296.24,1214.48 1296.82,1212.97 1297.41,1212.51 1298,1212.01 1298.58,1211.69 1299.17,1214.4 1299.76,1215.3 1300.34,1214.81 1300.93,1215.66 1301.52,1215.58 1302.1,1215.3 1302.69,1213.6 1303.27,1213.34 1303.86,1212.88 1304.45,1212.7 1305.03,1215.1 1305.62,1214.97 1306.21,1214.46 1306.79,1212.84 1307.38,1215.35 1307.97,1212.15 1308.55,1212.02 1309.14,1209.32 1309.73,1208.1 1310.31,1209.85 1310.9,1208.49 1311.48,1209.99 1312.07,1209.67 1312.66,1208.34 1313.24,1206.67 1313.83,1205.46 1314.42,1202.69 1315,1205.6 1315.59,1204.57 1316.18,1204.67 1316.76,1206.14 1317.35,1203.6 1317.93,1201.33 1318.52,1201.29 1319.11,1198.68 1319.69,1202.14 1320.28,1203.79 1320.87,1198.88 1321.45,1198.27 1322.04,1200.17 1322.63,1200.94 1323.21,1200.15 1323.8,1198.1 1324.39,1198.73 1324.97,1198.89 1325.56,1200.67 1326.14,1202.3 1326.73,1201.22 1327.32,1204.67 1327.9,1205.02 1328.49,1206.73 1329.08,1208.13 1329.66,1208.22 1330.25,1209.73 1330.84,1209.55 1331.42,1209.26 1332.01,1209.17 1332.6,1210.47 1333.18,1207.72 1333.77,1209.2 1334.35,1207.67 1334.94,1206.3 1335.53,1204.76 1336.11,1207.74 1336.7,1210.33 1337.29,1209.05 1337.87,1210.22 1338.46,1211.66 1339.05,1211.74 1339.63,1212.94 1340.22,1215.43 1340.8,1213.46 1341.39,1211.9 1341.98,1213.11 1342.56,1212.8 1343.15,1209.85 1343.74,1209.82 1344.32,1209.57 1344.91,1212.21 1345.5,1214.8 1346.08,1214.11 1346.67,1212.86 1347.26,1210.14 1347.84,1207.25 1348.43,1207.74 1349.01,1203.52 1349.6,1203.95 1350.19,1204.3 1350.77,1204.1 1351.36,1205.75 1351.95,1207.13 1352.53,1207.4 1353.12,1207.28 1353.71,1207.22 1354.29,1207.18 1354.88,1205.87 1355.47,1205.85 1356.05,1210.08 1356.64,1207.49 1357.22,1207.38 1357.81,1204.56 1358.4,1204.77 1358.98,1204.46 1359.57,1204.87 1360.16,1205.42 1360.74,1205.83 1361.33,1204.41 1361.92,1203.29 1362.5,1204.91 1363.09,1207.69 1363.68,1207.78 1364.26,1207.9 1364.85,1208.12 1365.43,1211.11 1366.02,1213.74 1366.61,1212.11 1367.19,1211.78 1367.78,1208.94 1368.37,1207.31 1368.95,1208.5 1369.54,1208.56 1370.13,1207.15 1370.71,1208.79 1371.3,1208.81 1371.88,1210.64 1372.47,1211.91 1373.06,1210.55 1373.64,1210.78 1374.23,1210.69 1374.82,1210.75 1375.4,1210.83 1375.99,1213.01 1376.58,1212.8 1377.16,1212.5 1377.75,1212.12 1378.34,1214.54 1378.92,1213.18 1379.51,1214.46 1380.09,1214.39 1380.68,1212.76 1381.27,1211.2 1381.85,1211.24 1382.44,1213.77 1383.03,1213.68 1383.61,1213.5 1384.2,1209.25 1384.79,1210.63 1385.37,1210.71 1385.96,1210.31 1386.55,1208.87 1387.13,1209 1387.72,1210.23 1388.3,1210 1388.89,1209.81 1389.48,1208.34 1390.06,1206.76 1390.65,1208.47 1391.24,1206.94 1391.82,1201.97 1392.41,1203.47 1393,1203.79 1393.58,1203.95 1394.17,1203.96 1394.75,1204.34 1395.34,1205.83 1395.93,1206.04 1396.51,1210.12 1397.1,1207.6 1397.69,1210.13 1398.27,1211.52 1398.86,1212.59 1399.45,1210.87 1400.03,1210.58 1400.62,1209.05 1401.21,1209.34 1401.79,1210.59 1402.38,1210.54 1402.96,1210.58 1403.55,1208.1 1404.14,1208.41 1404.72,1209.87 1405.31,1211.25 1405.9,1210.9 1406.48,1213.49 1407.07,1211.76 1407.66,1211.59 1408.24,1211.41 1408.83,1210 1409.42,1210.06 1410,1210.09 1410.59,1210.19 1411.17,1211.5 1411.76,1213.94 1412.35,1213.72 1412.93,1213.67 1413.52,1216.12 1414.11,1215.65 1414.69,1215.49 1415.28,1213.82 1415.87,1214.88 1416.45,1213.35 1417.04,1213.04 1417.63,1213.97 1418.21,1210.82 1418.8,1210.8 1419.38,1207.92 1419.97,1209.27 1420.56,1210.45 1421.14,1209.11 1421.73,1209.16 1422.32,1207.68 1422.9,1207.61 1423.49,1207.58 1424.08,1207.43 1424.66,1210.41 1425.25,1210.5 1425.83,1210.41 1426.42,1210.42 1427.01,1213.01 1427.59,1211.31 1428.18,1211.07 1428.77,1210.88 1429.35,1210.94 1429.94,1208.07 1430.53,1208.29 1431.11,1209.7 1431.7,1209.76 1432.29,1208.24 1432.87,1205.53 1433.46,1207.11 1434.04,1207 1434.63,1209.61 1435.22,1208.19 1435.8,1209.58 1436.39,1208.39 1436.98,1208.46 1437.56,1206.11 1438.15,1206.6 1438.74,1209.39 1439.32,1209.64 1439.91,1209.41 1440.5,1209.31 1441.08,1210.62 1441.67,1209.03 1442.25,1208.87 1442.84,1209.99 1443.43,1208.56 1444.01,1211.07 1444.6,1209.76 1445.19,1214.92 1445.77,1213.03 1446.36,1213.06 1446.95,1215.38 1447.53,1215.29 1448.12,1215.02 1448.7,1213.45 1449.29,1214.66 1449.88,1214.36 1450.46,1213.83 1451.05,1213.56 1451.64,1213.21 1452.22,1213.17 1452.81,1212.81 1453.4,1212.77 1453.98,1211.1 1454.57,1209.66 1455.16,1205.77 1455.74,1203.48 1456.33,1202.38 1456.91,1202.9 1457.5,1204.86 1458.09,1206.34 1458.67,1206.36 1459.26,1209.29 1459.85,1206.56 1460.43,1206.78 1461.02,1204.21 1461.61,1205.78 1462.19,1203.53 1462.78,1201.2 1463.37,1200.08 1463.95,1197.92 1464.54,1198.4 1465.12,1201.91 1465.71,1202.18 1466.3,1198.66 1466.88,1198.26 1467.47,1196.39 1468.06,1195.83 1468.64,1195.53 1469.23,1198.89 1469.82,1198.26 1470.4,1197.48 1470.99,1198.27 1471.57,1200.37 1472.16,1200.82 1472.75,1202.43 1473.33,1203.96 1473.92,1203.09 1474.51,1204.62 1475.09,1204.88 1475.68,1207.97 1476.27,1207.72 1476.85,1208.08 1477.44,1206.84 1478.03,1209.52 1478.61,1208.1 1479.2,1210.99 1479.78,1212.2 1480.37,1213.26 1480.96,1211.47 1481.54,1207.15 1482.13,1207.41 1482.72,1204.85 1483.3,1208.96 1483.89,1208.94 1484.48,1207.67 1485.06,1208.93 1485.65,1205.21 1486.24,1205.49 1486.82,1208.75 1487.41,1208.96 1487.99,1210.1 1488.58,1209.03 1489.17,1209.06 1489.75,1210.39 1490.34,1211.75 1490.93,1212.81 1491.51,1210.29 1492.1,1212.88 1492.69,1212.62 1493.27,1209.66 1493.86,1208.59 1494.45,1205.93 1495.03,1210.18 1495.62,1211.28 1496.2,1211.04 1496.79,1209.59 1497.38,1209.75 1497.96,1206.91 1498.55,1205.48 1499.14,1204.42 1499.72,1203.52 1500.31,1205.11 1500.9,1204.28 1501.48,1204.52 1502.07,1205.11 1502.65,1205.22 1503.24,1205.42 1503.83,1205.57 1504.41,1204.61 1505,1203.06 1505.59,1203.19 1506.17,1209.03 1506.76,1207.65 1507.35,1211.72 1507.93,1211.66 1508.52,1211.59 1509.11,1212.88 1509.69,1215.23 1510.28,1211.94 1510.86,1210.54 1511.45,1214.71 1512.04,1214.35 1512.62,1213.98 1513.21,1212.36 1513.8,1212.02 1514.38,1210.69 1514.97,1212.15 1515.56,1215.01 1516.14,1215.14 1516.73,1214.68 1517.32,1217.04 1517.9,1218.12 1518.49,1215.53 1519.07,1215.26 1519.66,1214.83 1520.25,1214.57 1520.83,1214.43 1521.42,1214.22 1522.01,1216.45 1522.59,1214.82 1523.18,1215.56 1523.77,1216.51 1524.35,1214.66 1524.94,1214.35 1525.52,1212.71 1526.11,1213.94 1526.7,1215.08 1527.28,1212.3 1527.87,1212 1528.46,1209.43 1529.04,1213.34 1529.63,1209.4 1530.22,1208.03 1530.8,1208.25 1531.39,1209.43 1531.98,1209.4 1532.56,1206.88 1533.15,1207.34 1533.73,1207.54 1534.32,1207.25 1534.91,1209.99 1535.49,1211.43 1536.08,1210.02 1536.67,1211.48 1537.25,1214.04 1537.84,1214.67 1538.43,1212.86 1539.01,1212.7 1539.6,1212.38 1540.19,1210.84 1540.77,1207.73 1541.36,1210.36 1541.94,1206.47 1542.53,1210.67 1543.12,1210.68 1543.7,1213.31 1544.29,1213.02 1544.88,1212.58 1545.46,1211.17 1546.05,1211.1 1546.64,1211.02 1547.22,1208.39 1547.81,1206.94 1548.4,1206.92 1548.98,1208 1549.57,1205.39 1550.15,1204.29 1550.74,1203.15 1551.33,1203.32 1551.91,1203.61 1552.5,1206.63 1553.09,1207.97 1553.67,1210.67 1554.26,1210.78 1554.85,1209.26 1555.43,1209.37 1556.02,1209.19 1556.6,1206.55 1557.19,1207.86 1557.78,1205.09 1558.36,1205.37 1558.95,1204.28 1559.54,1205.76 1560.12,1211.59 1560.71,1211.22 1561.3,1209.66 1561.88,1208.41 1562.47,1208.54 1563.06,1207.06 1563.64,1204.32 1564.23,1204.66 1564.81,1211.6 1565.4,1211.38 1565.99,1207.87 1566.57,1209.61 1567.16,1210.7 1567.75,1210.4 1568.33,1210.6 1568.92,1210.62 1569.51,1206.39 1570.09,1205.13 1570.68,1205.35 1571.27,1205.52 1571.85,1205.75 1572.44,1206.23 1573.02,1209.35 1573.61,1209.26 1574.2,1209.34 1574.78,1212.26 1575.37,1209.49 1575.96,1209.66 1576.54,1210.76 1577.13,1207.92 1577.72,1206.49 1578.3,1209.39 1578.89,1206.87 1579.47,1207.2 1580.06,1207.51 1580.65,1208.86 1581.23,1211.48 1581.82,1204.36 1582.41,1204.51 1582.99,1204.76 1583.58,1207.79 1584.17,1210.29 1584.75,1211.43 1585.34,1209.86 1585.93,1208.35 1586.51,1208.31 1587.1,1207.13 1587.68,1209.99 1588.27,1211.14 1588.86,1209.5 1589.44,1208.21 1590.03,1208.29 1590.62,1208.41 1591.2,1205.81 1591.79,1207.03 1592.38,1204.33 1592.96,1203.35 1593.55,1203.93 1594.14,1205.53 1594.72,1207.19 1595.31,1205.95 1595.89,1206.09 1596.48,1207.65 1597.07,1207.66 1597.65,1208.76 1598.24,1209.71 1598.83,1211.14 1599.41,1211.16 1600,1212.87 1600.59,1210.87 1601.17,1209.5 1601.76,1209.54 1602.34,1208.14 1602.93,1206.96 1603.52,1209.77 1604.1,1209.7 1604.69,1208.23 1605.28,1208.01 1605.86,1209.24 1606.45,1207.9 1607.04,1208.45 1607.62,1207.25 1608.21,1208.68 1608.8,1207.36 1609.38,1208.95 1609.97,1210.35 1610.55,1209.04 1611.14,1211.87 1611.73,1207.84 1612.31,1207.88 1612.9,1210.74 1613.49,1212.15 1614.07,1210.64 1614.66,1209.31 1615.25,1209.33 1615.83,1209.39 1616.42,1212.11 1617.01,1214.52 1617.59,1212.9 1618.18,1211.51 1618.76,1215.15 1619.35,1214.71 1619.94,1211.69 1620.52,1214.24 1621.11,1212.6 1621.7,1212.54 1622.28,1211.04 1622.87,1210.9 1623.46,1208.12 1624.04,1209.34 1624.63,1211.86 1625.22,1211.73 1625.8,1210.19 1626.39,1208.83 1626.97,1208.9 1627.56,1208.98 1628.15,1208.8 1628.73,1210.15 1629.32,1208.85 1629.91,1215.52 1630.49,1215.02 1631.08,1210.48 1631.67,1212.84 1632.25,1215.76 1632.84,1212.65 1633.42,1215.49 1634.01,1214.77 1634.6,1215.82 1635.18,1218.22 1635.77,1216.33 1636.36,1218.4 1636.94,1215.68 1637.53,1212.63 1638.12,1211.2 1638.7,1209.95 1639.29,1211.33 1639.88,1208.55 1640.46,1207.17 1641.05,1203.24 1641.63,1203.5 1642.22,1202.18 1642.81,1202.56 1643.39,1205.71 1643.98,1205.64 1644.57,1207.09 1645.15,1206.97 1645.74,1208.34 1646.33,1208.42 1646.91,1208.41 1647.5,1209.81 1648.09,1211.09 1648.67,1211.03 1649.26,1209.69 1649.84,1210.87 1650.43,1210.62 1651.02,1209.36 1651.6,1210.74 1652.19,1213.41 1652.78,1211.87 1653.36,1206.38 1653.95,1205.33 1654.54,1203.06 1655.12,1205.96 1655.71,1204.85 1656.29,1206.28 1656.88,1207.39 1657.47,1210.16 1658.05,1207.52 1658.64,1207.74 1659.23,1209.23 1659.81,1210.54 1660.4,1210.42 1660.99,1207.84 1661.57,1207.74 1662.16,1206.41 1662.75,1205.01 1663.33,1209.05 1663.92,1209.14 1664.5,1210.85 1665.09,1209.5 1665.68,1205.65 1666.26,1208.48 1666.85,1208.42 1667.44,1209.74 1668.02,1210.93 1668.61,1209.26 1669.2,1211.65 1669.78,1208.66 1670.37,1204.69 1670.96,1204.99 1671.54,1204.03 1672.13,1205.45 1672.71,1205.83 1673.3,1205.73 1673.89,1204.42 1674.47,1204.72 1675.06,1204.61 1675.65,1205.03 1676.23,1205.44 1676.82,1203.12 1677.41,1203.27 1677.99,1200.89 1678.58,1202.48 1679.17,1202.86 1679.75,1204.23 1680.34,1204.67 1680.92,1204.79 1681.51,1207.66 1682.1,1210.31 1682.68,1211.71 1683.27,1212.85 1683.86,1212.5 1684.44,1211 1685.03,1213.84 1685.62,1213.73 1686.2,1212.04 1686.79,1210.66 1687.37,1213.37 1687.96,1210.49 1688.55,1212.89 1689.13,1209.84 1689.72,1212.24 1690.31,1211.99 1690.89,1211.98 1691.48,1210.41 1692.07,1210.07 1692.65,1208.6 1693.24,1208.63 1693.83,1207.53 1694.41,1205.09 1695,1205.46 1695.58,1204.33 1696.17,1205.95 1696.76,1207.79 1697.34,1209.33 1697.93,1211.82 1698.52,1211.6 1699.1,1208.73 1699.69,1208.69 1700.28,1207.54 1700.86,1206.06 1701.45,1206.19 1702.04,1209.14 1702.62,1210.52 1703.21,1207.73 1703.79,1206.22 1704.38,1209.1 1704.97,1208.91 1705.55,1207.54 1706.14,1208.73 1706.73,1208.84 1707.31,1208.91 1707.9,1207.32 1708.49,1207.1 1709.07,1207.05 1709.66,1204.43 1710.24,1205.82 1710.83,1207.54 1711.42,1207.5 1712,1206.41 1712.59,1205.37 1713.18,1206.96 1713.76,1205.53 1714.35,1205.77 1714.94,1205.87 1715.52,1203.3 1716.11,1205.19 1716.7,1207 1717.28,1208.49 1717.87,1208.39 1718.45,1205.68 1719.04,1206.98 1719.63,1204.55 1720.21,1206.02 1720.8,1205.15 1721.39,1204.27 1721.97,1205.83 1722.56,1206.34 1723.15,1205.15 1723.73,1204 1724.32,1204.14 1724.91,1205.77 1725.49,1203.15 1726.08,1202.2 1726.66,1202.61 1727.25,1204.23 1727.84,1204.65 1728.42,1208.88 1729.01,1210.36 1729.6,1210.23 1730.18,1210.15 1730.77,1208.71 1731.36,1207.32 1731.94,1207.37 1732.53,1207.33 1733.11,1207.51 1733.7,1207.62 1734.29,1207.37 1734.87,1206.3 1735.46,1206.49 1736.05,1205.31 1736.63,1208.28 1737.22,1209.59 1737.81,1208.29 1738.39,1205.6 1738.98,1204.47 1739.57,1203.29 1740.15,1203.65 1740.74,1204.03 1741.32,1201.4 1741.91,1200.35 1742.5,1199.29 1743.08,1198.75 1743.67,1200.25 1744.26,1200.59 1744.84,1201.32 1745.43,1203.21 1746.02,1200.83 1746.6,1201.65 1747.19,1203.37 1747.78,1206.39 1748.36,1206.49 1748.95,1205.12 1749.53,1205.21 1750.12,1206.4 1750.71,1209.27 1751.29,1208.26 1751.88,1209.66 1752.47,1210.8 1753.05,1211.02 1753.64,1213.83 1754.23,1216.28 1754.81,1215.66 1755.4,1213.83 1755.99,1214.91 1756.57,1214.6 1757.16,1216.99 1757.74,1216.46 1758.33,1216.01 1758.92,1214.57 1759.5,1214.37 1760.09,1212.76 1760.68,1213.85 1761.26,1212.12 1761.85,1210.51 1762.44,1213.05 1763.02,1215.77 1763.61,1214.03 1764.19,1212.36 1764.78,1213.38 1765.37,1213.12 1765.95,1214.06 1766.54,1213.78 1767.13,1213.57 1767.71,1215.84 1768.3,1215.48 1768.89,1213.61 1769.47,1215.89 1770.06,1216.85 1770.65,1212.37 1771.23,1209.46 1771.82,1210.69 1772.4,1213.01 1772.99,1212.54 1773.58,1209.52 1774.16,1211.06 1774.75,1209.5 1775.34,1209.55 1775.92,1209.58 1776.51,1211.07 1777.1,1209.75 1777.68,1209.82 1778.27,1208.71 1778.86,1207.79 1779.44,1208.15 1780.03,1209.56 1780.61,1212.22 1781.2,1212.16 1781.79,1211.8 1782.37,1210.46 1782.96,1210.28 1783.55,1211.3 1784.13,1213.33 1784.72,1209.2 1785.31,1209.23 1785.89,1206.52 1786.48,1205.12 1787.06,1207.97 1787.65,1210.4 1788.24,1211.42 1788.82,1212.57 1789.41,1210.86 1790,1213.5 1790.58,1212.82 1791.17,1214.13 1791.76,1212.39 1792.34,1211.31 1792.93,1212.38 1793.52,1216.32 1794.1,1217.02 1794.69,1215.34 1795.27,1216.26 1795.86,1218.3 1796.45,1216.42 1797.03,1215.95 1797.62,1212.65 1798.21,1212.79 1798.79,1212.61 1799.38,1210.98 1799.97,1211.08 1800.55,1208.19 1801.14,1208.44 1801.73,1207.31 1802.31,1207.36 1802.9,1208.79 1803.48,1211.67 1804.07,1211.49 1804.66,1214.24 1805.24,1213.71 1805.83,1213.27 1806.42,1209.15 1807,1205.39 1807.59,1208.15 1808.18,1209.59 1808.76,1211.24 1809.35,1211.09 1809.94,1212.25 1810.52,1210.54 1811.11,1213.07 1811.69,1212.85 1812.28,1214.17 1812.87,1213.73 1813.45,1214.91 1814.04,1213.38 1814.63,1214.61 1815.21,1214.33 1815.8,1215.19 1816.39,1213.26 1816.97,1213.04 1817.56,1210.11 1818.14,1207.59 1818.73,1207.76 1819.32,1206.33 1819.9,1210.71 1820.49,1207.88 1821.08,1206.41 1821.66,1205.06 1822.25,1205.02 1822.84,1206.53 1823.42,1206.74 1824.01,1206.84 1824.6,1211.14 1825.18,1209.77 1825.77,1211.41 1826.35,1212.42 1826.94,1209.73 1827.53,1209.64 1828.11,1211 1828.7,1213.55 1829.29,1213.29 1829.87,1210.14 1830.46,1205.96 1831.05,1207.44 1831.63,1208.75 1832.22,1207.59 1832.81,1210.67 1833.39,1209.27 1833.98,1209.15 1834.56,1208.88 1835.15,1210.18 1835.74,1212.79 1836.32,1213.89 1836.91,1212.25 1837.5,1213.25 1838.08,1212.76 1838.67,1213.66 1839.26,1210.91 1839.84,1212.14 1840.43,1215.79 1841.01,1212.74 1841.6,1214.27 1842.19,1214.02 1842.77,1215.32 1843.36,1213.7 1843.95,1213.61 1844.53,1214.73 1845.12,1214.61 1845.71,1215.61 1846.29,1216.55 1846.88,1217.52 1847.47,1215.55 1848.05,1215.4 1848.64,1213.39 1849.22,1212.91 1849.81,1210 1850.4,1208.64 1850.98,1211.16 1851.57,1209.92 1852.16,1209.66 1852.74,1208.39 1853.33,1208.7 1853.92,1212.98 1854.5,1214.19 1855.09,1214.04 1855.68,1212.62 1856.26,1211.21 1856.85,1208.48 1857.43,1206.73 1858.02,1208.19 1858.61,1205.77 1859.19,1204.59 1859.78,1205.97 1860.37,1207.13 1860.95,1208.58 1861.54,1208.54 1862.13,1209.72 1862.71,1210.63 1863.3,1209.3 1863.88,1211.86 1864.47,1212.72 1865.06,1209.85 1865.64,1212.3 1866.23,1210.71 1866.82,1210.69 1867.4,1210.56 1867.99,1208.99 1868.58,1207.68 1869.16,1206.46 1869.75,1206.43 1870.34,1209.03 1870.92,1208.68 1871.51,1210.11 1872.09,1214.04 1872.68,1212.71 1873.27,1212.41 1873.85,1212.12 1874.44,1210.24 1875.03,1207.39 1875.61,1207.34 1876.2,1208.94 1876.79,1208.9 1877.37,1210.17 1877.96,1204.83 1878.55,1203.37 1879.13,1206.6 1879.72,1206.9 1880.3,1205.47 1880.89,1207.14 1881.48,1207.17 1882.06,1208.81 1882.65,1208.84 1883.24,1211.33 1883.82,1212.79 1884.41,1215.48 1885,1213.61 1885.58,1209.43 1886.17,1207.84 1886.76,1207.84 1887.34,1210.7 1887.93,1209.25 1888.51,1209.31 1889.1,1208.2 1889.69,1205.39 1890.27,1207.89 1890.86,1206.51 1891.45,1206.4 1892.03,1206.34 1892.62,1206.65 1893.21,1204.02 1893.79,1204.28 1894.38,1202.13 1894.96,1201.39 1895.55,1203.28 1896.14,1207.86 1896.72,1206.65 1897.31,1208.42 1897.9,1208.32 1898.48,1208.47 1899.07,1207 1899.66,1207.06 1900.24,1206.98 1900.83,1205.47 1901.42,1203.09 1902,1201.96 1902.59,1200.8 1903.17,1200.03 1903.76,1201.97 1904.35,1202.37 1904.93,1201.49 1905.52,1201.94 1906.11,1200.83 1906.69,1198.4 1907.28,1200.32 1907.87,1200.87 1908.45,1202.63 1909.04,1203.05 1909.63,1204.66 1910.21,1203.55 1910.8,1203.97 1911.38,1207.16 1911.97,1208.71 1912.56,1209.78 1913.14,1205.74 1913.73,1208.59 1914.32,1210.17 1914.9,1209.02 1915.49,1210.35 1916.08,1207.49 1916.66,1208.86 1917.25,1208.74 1917.83,1208.97 1918.42,1210.12 1919.01,1210.05 1919.59,1209.88 1920.18,1211.29 1920.77,1211.21 1921.35,1209.66 1921.94,1207.19 1922.53,1208.75 1923.11,1208.9 1923.7,1210.61 1924.29,1208.03 1924.87,1210.58 1925.46,1210.52 1926.04,1211.68 1926.63,1211.67 1927.22,1211.6 1927.8,1208.74 1928.39,1207.4 1928.98,1209.07 1929.56,1209.12 1930.15,1207.64 1930.74,1209.38 1931.32,1208.15 1931.91,1207.16 1932.5,1207.32 1933.08,1205.97 1933.67,1204.76 1934.25,1204.9 1934.84,1205.2 1935.43,1202.63 1936.01,1202.82 1936.6,1203.17 1937.19,1203.35 1937.77,1202.24 1938.36,1205.31 1938.95,1205.61 1939.53,1207.26 1940.12,1205.54 1940.71,1206.06 1941.29,1207.49 1941.88,1205.98 1942.46,1207.45 1943.05,1210.23 1943.64,1212.78 1944.22,1213.76 1944.81,1212.28 1945.4,1209.12 1945.98,1210.29 1946.57,1210.16 1947.16,1208.87 1947.74,1208.63 1948.33,1210.16 1948.91,1211.21 1949.5,1209.75 1950.09,1208.39 1950.67,1208.24 1951.26,1205.74 1951.85,1206.13 1952.43,1205.1 1953.02,1202.35 1953.61,1202.48 1954.19,1204.23 1954.78,1203.14 1955.37,1200.48 1955.95,1202.21 1956.54,1205.55 1957.12,1205.71 1957.71,1204.51 1958.3,1203.49 1958.88,1205 1959.47,1206.53 1960.06,1205.42 1960.64,1206.76 1961.23,1208.14 1961.82,1210.67 1962.4,1206.59 1962.99,1206.73 1963.58,1210.95 1964.16,1208.21 1964.75,1204.2 1965.33,1205.76 1965.92,1208.54 1966.51,1208.35 1967.09,1208.33 1967.68,1208.24 1968.27,1209.42 1968.85,1209.3 1969.44,1211.93 1970.03,1211.82 1970.61,1213.13 1971.2,1212.79 1971.78,1215.26 1972.37,1216.27 1972.96,1214.87 1973.54,1214.7 1974.13,1215.75 1974.72,1216.68 1975.3,1218.94 1975.89,1218.63 1976.48,1218.17 1977.06,1217.58 1977.65,1217.1 1978.24,1216.65 1978.82,1219.16 1979.41,1217.3 1979.99,1216.65 1980.58,1213.59 1981.17,1212.06 1981.75,1211.59 1982.34,1211.44 1982.93,1211.37 1983.51,1212.57 1984.1,1211.02 1984.69,1205.87 1985.27,1210.12 1985.86,1208.84 1986.45,1207.5 1987.03,1210.23 1987.62,1208.92 1988.2,1209.07 1988.79,1205.09 1989.38,1205.21 1989.96,1204.27 1990.55,1205.73 1991.14,1204.77 1991.72,1203.33 1992.31,1200.76 1992.9,1199.67 1993.48,1200.15 1994.07,1199.25 1994.65,1198.55 1995.24,1199.19 1995.83,1198.4 1996.41,1198.95 1997,1195.41 1997.59,1196.17 1998.17,1197.86 1998.76,1198.68 1999.35,1200.67 1999.93,1201.3 2000.52,1203.07 2001.11,1204.87 2001.69,1205.01 2002.28,1205.15 2002.86,1205.28 2003.45,1206.85 2004.04,1205.79 2004.62,1208.45 2005.21,1208.43 2005.8,1208.48 2006.38,1208.5 2006.97,1205.58 2007.56,1207.22 2008.14,1207.36 2008.73,1208.76 2009.32,1207.4 2009.9,1209.03 2010.49,1206.47 2011.07,1207.81 2011.66,1209.25 2012.25,1207.89 2012.83,1208.12 2013.42,1207.79 2014.01,1205.04 2014.59,1205.29 2015.18,1208.12 2015.77,1209.59 2016.35,1209.71 2016.94,1212.4 2017.53,1213.69 2018.11,1216.26 2018.7,1214.16 2019.28,1213.85 2019.87,1212.44 2020.46,1211.9 2021.04,1210.69 2021.63,1209.24 2022.22,1208.83 2022.8,1208.94 2023.39,1208.95 2023.98,1208.88 2024.56,1206.02 2025.15,1208.87 2025.73,1208.64 2026.32,1208.61 2026.91,1207.3 2027.49,1207.49 2028.08,1206.2 2028.67,1204.76 2029.25,1203.56 2029.84,1202.41 2030.43,1205.55 2031.01,1208.51 2031.6,1208.35 2032.19,1209.75 2032.77,1211.04 2033.36,1209.44 2033.94,1210.95 2034.53,1209.3 2035.12,1210.69 2035.7,1209.31 2036.29,1205.31 2036.88,1205.71 2037.46,1205.85 2038.05,1206.15 2038.64,1206.02 2039.22,1204.82 2039.81,1206.32 2040.4,1206.46 2040.98,1207.87 2041.57,1210.72 2042.15,1210.58 2042.74,1210.42 2043.33,1207.72 2043.91,1207.82 2044.5,1206.76 2045.09,1210.96 2045.67,1209.66 2046.26,1209.89 2046.85,1209.83 2047.43,1210.88 2048.02,1210.68 2048.6,1211.86 2049.19,1214.51 2049.78,1216.75 2050.36,1216.14 2050.95,1213.34 2051.54,1213.16 2052.12,1217.1 2052.71,1216.58 2053.3,1213.85 2053.88,1213.42 2054.47,1209.34 2055.06,1208.01 2055.64,1208.01 2056.23,1208.25 2056.81,1209.89 2057.4,1208.79 2057.99,1211.35 2058.57,1212.47 2059.16,1209.61 2059.75,1208.23 2060.33,1208.24 2060.92,1206.87 2061.51,1207.17 2062.09,1207.38 2062.68,1207.6 2063.27,1204.84 2063.85,1207.64 2064.44,1205.81 2065.02,1207.32 2065.61,1211.63 2066.2,1207.44 2066.78,1207.54 2067.37,1204.86 2067.96,1204.95 2068.54,1205.38 2069.13,1205.72 2069.72,1204.35 2070.3,1203.08 2070.89,1204.8 2071.48,1206.65 2072.06,1205.36 2072.65,1206.98 2073.23,1206.94 2073.82,1206.75 2074.41,1206.96 2074.99,1208.25 2075.58,1208.42 2076.17,1211.3 2076.75,1212.51 2077.34,1212.37 2077.93,1212.97 2078.51,1214.07 2079.1,1212.31 2079.68,1212.21 2080.27,1213.44 2080.86,1214.48 2081.44,1212.64 2082.03,1209.73 2082.62,1209.89 2083.2,1211.07 2083.79,1213.72 2084.38,1213.63 2084.96,1213.55 2085.55,1210.69 2086.14,1210.54 2086.72,1213.22 2087.31,1213.17 2087.89,1214.56 2088.48,1214.43 2089.07,1214.1 2089.65,1213.95 2090.24,1214.98 2090.83,1218.33 2091.41,1217.62 2092,1216.03 2092.59,1217.21 2093.17,1219.32 2093.76,1217.93 2094.35,1215.84 2094.93,1215.71 2095.52,1218.31 2096.1,1216.57 2096.69,1216.1 2097.28,1214.46 2097.86,1212.84 2098.45,1213.81 2099.04,1213.71 2099.62,1216.18 2100.21,1214.68 2100.8,1214.02 2101.38,1212.6 2101.97,1213.93 2102.55,1207.84 2103.14,1207.82 2103.73,1207.96 2104.31,1206.46 2104.9,1205.12 2105.49,1206.72 2106.07,1206.92 2106.66,1207.15 2107.25,1207.03 2107.83,1210.97 2108.42,1210.78 2109.01,1208.31 2109.59,1209.3 2110.18,1207.76 2110.76,1210.52 2111.35,1209.01 2111.94,1208.87 2112.52,1207.52 2113.11,1206.24 2113.7,1202.33 2114.28,1201.2 2114.87,1204.29 2115.46,1205.76 2116.04,1201.77 2116.63,1202.13 2117.22,1201.01 2117.8,1198.85 2118.39,1198.14 2118.97,1197.47 2119.56,1201.01 2120.15,1200.32 2120.73,1199.36 2121.32,1199.72 2121.91,1204.32 2122.49,1207.11 2123.08,1208.43 2123.67,1210.02 2124.25,1211.65 2124.84,1213.84 2125.42,1212.46 2126.01,1212.11 2126.6,1212.07 2127.18,1214.45 2127.77,1215.29 2128.36,1213.64 2128.94,1213.21 2129.53,1216.8 2130.12,1216.39 2130.7,1217.52 2131.29,1217.24 2131.88,1216.36 2132.46,1214.51 2133.05,1213.04 2133.63,1211.52 2134.22,1209.96 2134.81,1209.66 2135.39,1209.58 2135.98,1210.6 2136.57,1205.08 2137.15,1207.74 2137.74,1208.83 2138.33,1208.84 2138.91,1211.24 2139.5,1212.22 2140.09,1213.34 2140.67,1213.19 2141.26,1213.95 2141.84,1212.22 2142.43,1212.19 2143.02,1212.09 2143.6,1210.4 2144.19,1208.8 2144.78,1206.21 2145.36,1206.37 2145.95,1207.89 2146.54,1206.69 2147.12,1206.83 2147.71,1209.57 2148.3,1212.27 2148.88,1210.86 2149.47,1213.13 2150.05,1214.2 2150.64,1215.39 2151.23,1212.19 2151.81,1212.15 2152.4,1210.26 2152.99,1210.07 2153.57,1206.01 2154.16,1204.89 2154.75,1202.25 2155.33,1203.88 2155.92,1202.64 2156.5,1204.3 2157.09,1205.67 2157.68,1206.03 2158.26,1210.22 \"/>\n<path clip-path=\"url(#clip482)\" d=\"M986.025 1209.49 L986.612 1209.49 L987.198 1209.49 L987.785 1209.49 L988.371 1209.49 L988.957 1209.49 L989.544 1209.49 L990.13 1209.49 L990.717 1209.49 L991.303 1209.49 L991.889 1209.49 L992.476 1209.49 L993.062 1209.49 L993.649 1209.49 L994.235 1209.49 L994.822 1209.49 L995.408 1209.49 L995.994 1209.49 L996.581 1209.49 L997.167 1209.49 L997.754 1209.49 L998.34 1209.49 L998.926 1209.49 L999.513 1209.49 L1000.1 1209.49 L1000.69 1209.49 L1001.27 1209.49 L1001.86 1209.49 L1002.44 1209.49 L1003.03 1209.49 L1003.62 1209.49 L1004.2 1209.49 L1004.79 1209.49 L1005.38 1209.49 L1005.96 1209.49 L1006.55 1209.49 L1007.14 1209.49 L1007.72 1209.49 L1008.31 1209.49 L1008.9 1209.49 L1009.48 1209.49 L1010.07 1209.49 L1010.65 1209.49 L1011.24 1209.49 L1011.83 1209.49 L1012.41 1209.49 L1013 1209.49 L1013.59 1209.49 L1014.17 1209.49 L1014.76 1209.49 L1015.35 1209.49 L1015.93 1209.49 L1016.52 1209.49 L1017.11 1209.49 L1017.69 1209.49 L1018.28 1209.49 L1018.86 1209.49 L1019.45 1209.49 L1020.04 1209.49 L1020.62 1209.49 L1021.21 1209.49 L1021.8 1209.49 L1022.38 1209.49 L1022.97 1209.49 L1023.56 1209.49 L1024.14 1209.49 L1024.73 1209.49 L1025.32 1209.49 L1025.9 1209.49 L1026.49 1209.49 L1027.07 1209.49 L1027.66 1209.49 L1028.25 1209.49 L1028.83 1209.49 L1029.42 1209.49 L1030.01 1209.49 L1030.59 1209.49 L1031.18 1209.49 L1031.77 1209.49 L1032.35 1209.49 L1032.94 1209.49 L1033.52 1209.49 L1034.11 1209.49 L1034.7 1209.49 L1035.28 1209.49 L1035.87 1209.49 L1036.46 1209.49 L1037.04 1209.49 L1037.63 1209.49 L1038.22 1209.49 L1038.8 1209.49 L1039.39 1209.49 L1039.98 1209.49 L1040.56 1209.49 L1041.15 1209.49 L1041.73 1209.49 L1042.32 1209.49 L1042.91 1209.49 L1043.49 1209.49 L1044.08 1209.49 L1044.67 1209.49 L1045.25 1209.49 L1045.84 1209.49 L1046.43 1209.49 L1047.01 1209.49 L1047.6 1209.49 L1048.19 1209.49 L1048.77 1209.49 L1049.36 1209.49 L1049.94 1209.49 L1050.53 1209.49 L1051.12 1209.49 L1051.7 1209.49 L1052.29 1209.49 L1052.88 1209.49 L1053.46 1209.49 L1054.05 1209.49 L1054.64 1209.49 L1055.22 1209.49 L1055.81 1209.49 L1056.39 1209.49 L1056.98 1209.49 L1057.57 1209.49 L1058.15 1209.49 L1058.74 1209.49 L1059.33 1209.49 L1059.91 1209.49 L1060.5 1209.49 L1061.09 1209.49 L1061.67 1209.49 L1062.26 1209.49 L1062.85 1209.49 L1063.43 1209.49 L1064.02 1209.49 L1064.6 1209.49 L1065.19 1209.49 L1065.78 1209.49 L1066.36 1209.49 L1066.95 1209.49 L1067.54 1209.49 L1068.12 1209.49 L1068.71 1209.49 L1069.3 1209.49 L1069.88 1209.49 L1070.47 1209.49 L1071.06 1209.49 L1071.64 1209.49 L1072.23 1209.49 L1072.81 1209.49 L1073.4 1209.49 L1073.99 1209.49 L1074.57 1209.49 L1075.16 1209.49 L1075.75 1209.49 L1076.33 1209.49 L1076.92 1209.49 L1077.51 1209.49 L1078.09 1209.49 L1078.68 1209.49 L1079.26 1209.49 L1079.85 1209.49 L1080.44 1209.49 L1081.02 1209.49 L1081.61 1209.49 L1082.2 1209.49 L1082.78 1209.49 L1083.37 1209.49 L1083.96 1209.49 L1084.54 1209.49 L1085.13 1209.49 L1085.72 1209.49 L1086.3 1209.49 L1086.89 1209.49 L1087.47 1209.49 L1088.06 1209.49 L1088.65 1209.49 L1089.23 1209.49 L1089.82 1209.49 L1090.41 1209.49 L1090.99 1209.49 L1091.58 1209.49 L1092.17 1209.49 L1092.75 1209.49 L1093.34 1209.49 L1093.93 1209.49 L1094.51 1209.49 L1095.1 1209.49 L1095.68 1209.49 L1096.27 1209.49 L1096.86 1209.49 L1097.44 1209.49 L1098.03 1209.49 L1098.62 1209.49 L1099.2 1209.49 L1099.79 1209.49 L1100.38 1209.49 L1100.96 1209.49 L1101.55 1209.49 L1102.14 1209.49 L1102.72 1209.49 L1103.31 1209.49 L1103.89 1209.49 L1104.48 1209.49 L1105.07 1209.49 L1105.65 1209.49 L1106.24 1209.49 L1106.83 1209.49 L1107.41 1209.49 L1108 1209.49 L1108.59 1209.49 L1109.17 1209.49 L1109.76 1209.49 L1110.34 1209.49 L1110.93 1209.49 L1111.52 1209.49 L1112.1 1209.49 L1112.69 1209.49 L1113.28 1209.49 L1113.86 1209.49 L1114.45 1209.49 L1115.04 1209.49 L1115.62 1209.49 L1116.21 1209.49 L1116.8 1209.49 L1117.38 1209.49 L1117.97 1209.49 L1118.55 1209.49 L1119.14 1209.49 L1119.73 1209.49 L1120.31 1209.49 L1120.9 1209.49 L1121.49 1209.49 L1122.07 1209.49 L1122.66 1209.49 L1123.25 1209.49 L1123.83 1209.49 L1124.42 1209.49 L1125.01 1209.49 L1125.59 1209.49 L1126.18 1209.49 L1126.76 1209.49 L1127.35 1209.49 L1127.94 1209.49 L1128.52 1209.49 L1129.11 1209.49 L1129.7 1209.49 L1130.28 1209.49 L1130.87 1209.49 L1131.46 1209.49 L1132.04 1209.49 L1132.63 1209.49 L1133.21 1209.49 L1133.8 1209.49 L1134.39 1209.49 L1134.97 1209.49 L1135.56 1209.49 L1136.15 1209.49 L1136.73 1209.49 L1137.32 1209.49 L1137.91 1209.49 L1138.49 1209.49 L1139.08 1209.49 L1139.67 1209.49 L1140.25 1209.49 L1140.84 1209.49 L1141.42 1209.49 L1142.01 1209.49 L1142.6 1209.49 L1143.18 1209.49 L1143.77 1209.49 L1144.36 1209.49 L1144.94 1209.49 L1145.53 1209.49 L1146.12 1209.49 L1146.7 1209.49 L1147.29 1209.49 L1147.88 1209.49 L1148.46 1209.49 L1149.05 1209.49 L1149.63 1209.49 L1150.22 1209.49 L1150.81 1209.49 L1151.39 1209.49 L1151.98 1209.49 L1152.57 1209.49 L1153.15 1209.49 L1153.74 1209.49 L1154.33 1209.49 L1154.91 1209.49 L1155.5 1209.49 L1156.09 1209.49 L1156.67 1209.49 L1157.26 1209.49 L1157.84 1209.49 L1158.43 1209.49 L1159.02 1209.49 L1159.6 1209.49 L1160.19 1209.49 L1160.78 1209.49 L1161.36 1209.49 L1161.95 1209.49 L1162.54 1209.49 L1163.12 1209.49 L1163.71 1209.49 L1164.29 1209.49 L1164.88 1209.49 L1165.47 1209.49 L1166.05 1209.49 L1166.64 1209.49 L1167.23 1209.49 L1167.81 1209.49 L1168.4 1209.49 L1168.99 1209.49 L1169.57 1209.49 L1170.16 1209.49 L1170.75 1209.49 L1171.33 1209.49 L1171.92 1209.49 L1172.5 1209.49 L1173.09 1209.49 L1173.68 1209.49 L1174.26 1209.49 L1174.85 1209.49 L1175.44 1209.49 L1176.02 1209.49 L1176.61 1209.49 L1177.2 1209.49 L1177.78 1209.49 L1178.37 1209.49 L1178.96 1209.49 L1179.54 1209.49 L1180.13 1209.49 L1180.71 1209.49 L1181.3 1209.49 L1181.89 1209.49 L1182.47 1209.49 L1183.06 1209.49 L1183.65 1209.49 L1184.23 1209.49 L1184.82 1209.49 L1185.41 1209.49 L1185.99 1209.49 L1186.58 1209.49 L1187.16 1209.49 L1187.75 1209.49 L1188.34 1209.49 L1188.92 1209.49 L1189.51 1209.49 L1190.1 1209.49 L1190.68 1209.49 L1191.27 1209.49 L1191.86 1209.49 L1192.44 1209.49 L1193.03 1209.49 L1193.62 1209.49 L1194.2 1209.49 L1194.79 1209.49 L1195.37 1209.49 L1195.96 1209.49 L1196.55 1209.49 L1197.13 1209.49 L1197.72 1209.49 L1198.31 1209.49 L1198.89 1209.49 L1199.48 1209.49 L1200.07 1209.49 L1200.65 1209.49 L1201.24 1209.49 L1201.83 1209.49 L1202.41 1209.49 L1203 1209.49 L1203.58 1209.49 L1204.17 1209.49 L1204.76 1209.49 L1205.34 1209.49 L1205.93 1209.49 L1206.52 1209.49 L1207.1 1209.49 L1207.69 1209.49 L1208.28 1209.49 L1208.86 1209.49 L1209.45 1209.49 L1210.03 1209.49 L1210.62 1209.49 L1211.21 1209.49 L1211.79 1209.49 L1212.38 1209.49 L1212.97 1209.49 L1213.55 1209.49 L1214.14 1209.49 L1214.73 1209.49 L1215.31 1209.49 L1215.9 1209.49 L1216.49 1209.49 L1217.07 1209.49 L1217.66 1209.49 L1218.24 1209.49 L1218.83 1209.49 L1219.42 1209.49 L1220 1209.49 L1220.59 1209.49 L1221.18 1209.49 L1221.76 1209.49 L1222.35 1209.49 L1222.94 1209.49 L1223.52 1209.49 L1224.11 1209.49 L1224.7 1209.49 L1225.28 1209.49 L1225.87 1209.49 L1226.45 1209.49 L1227.04 1209.49 L1227.63 1209.49 L1228.21 1209.49 L1228.8 1209.49 L1229.39 1209.49 L1229.97 1209.49 L1230.56 1209.49 L1231.15 1209.49 L1231.73 1209.49 L1232.32 1209.49 L1232.91 1209.49 L1233.49 1209.49 L1234.08 1209.49 L1234.66 1209.49 L1235.25 1209.49 L1235.84 1209.49 L1236.42 1209.49 L1237.01 1209.49 L1237.6 1209.49 L1238.18 1209.49 L1238.77 1209.49 L1239.36 1209.49 L1239.94 1209.49 L1240.53 1209.49 L1241.11 1209.49 L1241.7 1209.49 L1242.29 1209.49 L1242.87 1209.49 L1243.46 1209.49 L1244.05 1209.49 L1244.63 1209.49 L1245.22 1209.49 L1245.81 1209.49 L1246.39 1209.49 L1246.98 1209.49 L1247.57 1209.49 L1248.15 1209.49 L1248.74 1209.49 L1249.32 1209.49 L1249.91 1209.49 L1250.5 1209.49 L1251.08 1209.49 L1251.67 1209.49 L1252.26 1209.49 L1252.84 1209.49 L1253.43 1209.49 L1254.02 1209.49 L1254.6 1209.49 L1255.19 1209.49 L1255.78 1209.49 L1256.36 1209.49 L1256.95 1209.49 L1257.53 1209.49 L1258.12 1209.49 L1258.71 1209.49 L1259.29 1209.49 L1259.88 1209.49 L1260.47 1209.49 L1261.05 1209.49 L1261.64 1209.49 L1262.23 1209.49 L1262.81 1209.49 L1263.4 1209.49 L1263.98 1209.49 L1264.57 1209.49 L1265.16 1209.49 L1265.74 1209.49 L1266.33 1209.49 L1266.92 1209.49 L1267.5 1209.49 L1268.09 1209.49 L1268.68 1209.49 L1269.26 1209.49 L1269.85 1209.49 L1270.44 1209.49 L1271.02 1209.49 L1271.61 1209.49 L1272.19 1209.49 L1272.78 1209.49 L1273.37 1209.49 L1273.95 1209.49 L1274.54 1209.49 L1275.13 1209.49 L1275.71 1209.49 L1276.3 1209.49 L1276.89 1209.49 L1277.47 1209.49 L1278.06 1209.49 L1278.65 1209.49 L1279.23 1209.49 L1279.82 1209.49 L1280.4 1209.49 L1280.99 1209.49 L1281.58 1209.49 L1282.16 1209.49 L1282.75 1209.49 L1283.34 1209.49 L1283.92 1209.49 L1284.51 1209.49 L1285.1 1209.49 L1285.68 1209.49 L1286.27 1209.49 L1286.86 1209.49 L1287.44 1209.49 L1288.03 1209.49 L1288.61 1209.49 L1289.2 1209.49 L1289.79 1209.49 L1290.37 1209.49 L1290.96 1209.49 L1291.55 1209.49 L1292.13 1209.49 L1292.72 1209.49 L1293.31 1209.49 L1293.89 1209.49 L1294.48 1209.49 L1295.06 1209.49 L1295.65 1209.49 L1296.24 1209.49 L1296.82 1209.49 L1297.41 1209.49 L1298 1209.49 L1298.58 1209.49 L1299.17 1209.49 L1299.76 1209.49 L1300.34 1209.49 L1300.93 1209.49 L1301.52 1209.49 L1302.1 1209.49 L1302.69 1209.49 L1303.27 1209.49 L1303.86 1209.49 L1304.45 1209.49 L1305.03 1209.49 L1305.62 1209.49 L1306.21 1209.49 L1306.79 1209.49 L1307.38 1209.49 L1307.97 1209.49 L1308.55 1209.49 L1309.14 1209.49 L1309.73 1209.49 L1310.31 1209.49 L1310.9 1209.49 L1311.48 1209.49 L1312.07 1209.49 L1312.66 1209.49 L1313.24 1209.49 L1313.83 1209.49 L1314.42 1209.49 L1315 1209.49 L1315.59 1209.49 L1316.18 1209.49 L1316.76 1209.49 L1317.35 1209.49 L1317.93 1209.49 L1318.52 1209.49 L1319.11 1209.49 L1319.69 1209.49 L1320.28 1209.49 L1320.87 1209.49 L1321.45 1209.49 L1322.04 1209.49 L1322.63 1209.49 L1323.21 1209.49 L1323.8 1209.49 L1324.39 1209.49 L1324.97 1209.49 L1325.56 1209.49 L1326.14 1209.49 L1326.73 1209.49 L1327.32 1209.49 L1327.9 1209.49 L1328.49 1209.49 L1329.08 1209.49 L1329.66 1209.49 L1330.25 1209.49 L1330.84 1209.49 L1331.42 1209.49 L1332.01 1209.49 L1332.6 1209.49 L1333.18 1209.49 L1333.77 1209.49 L1334.35 1209.49 L1334.94 1209.49 L1335.53 1209.49 L1336.11 1209.49 L1336.7 1209.49 L1337.29 1209.49 L1337.87 1209.49 L1338.46 1209.49 L1339.05 1209.49 L1339.63 1209.49 L1340.22 1209.49 L1340.8 1209.49 L1341.39 1209.49 L1341.98 1209.49 L1342.56 1209.49 L1343.15 1209.49 L1343.74 1209.49 L1344.32 1209.49 L1344.91 1209.49 L1345.5 1209.49 L1346.08 1209.49 L1346.67 1209.49 L1347.26 1209.49 L1347.84 1209.49 L1348.43 1209.49 L1349.01 1209.49 L1349.6 1209.49 L1350.19 1209.49 L1350.77 1209.49 L1351.36 1209.49 L1351.95 1209.49 L1352.53 1209.49 L1353.12 1209.49 L1353.71 1209.49 L1354.29 1209.49 L1354.88 1209.49 L1355.47 1209.49 L1356.05 1209.49 L1356.64 1209.49 L1357.22 1209.49 L1357.81 1209.49 L1358.4 1209.49 L1358.98 1209.49 L1359.57 1209.49 L1360.16 1209.49 L1360.74 1209.49 L1361.33 1209.49 L1361.92 1209.49 L1362.5 1209.49 L1363.09 1209.49 L1363.68 1209.49 L1364.26 1209.49 L1364.85 1209.49 L1365.43 1209.49 L1366.02 1209.49 L1366.61 1209.49 L1367.19 1209.49 L1367.78 1209.49 L1368.37 1209.49 L1368.95 1209.49 L1369.54 1209.49 L1370.13 1209.49 L1370.71 1209.49 L1371.3 1209.49 L1371.88 1209.49 L1372.47 1209.49 L1373.06 1209.49 L1373.64 1209.49 L1374.23 1209.49 L1374.82 1209.49 L1375.4 1209.49 L1375.99 1209.49 L1376.58 1209.49 L1377.16 1209.49 L1377.75 1209.49 L1378.34 1209.49 L1378.92 1209.49 L1379.51 1209.49 L1380.09 1209.49 L1380.68 1209.49 L1381.27 1209.49 L1381.85 1209.49 L1382.44 1209.49 L1383.03 1209.49 L1383.61 1209.49 L1384.2 1209.49 L1384.79 1209.49 L1385.37 1209.49 L1385.96 1209.49 L1386.55 1209.49 L1387.13 1209.49 L1387.72 1209.49 L1388.3 1209.49 L1388.89 1209.49 L1389.48 1209.49 L1390.06 1209.49 L1390.65 1209.49 L1391.24 1209.49 L1391.82 1209.49 L1392.41 1209.49 L1393 1209.49 L1393.58 1209.49 L1394.17 1209.49 L1394.75 1209.49 L1395.34 1209.49 L1395.93 1209.49 L1396.51 1209.49 L1397.1 1209.49 L1397.69 1209.49 L1398.27 1209.49 L1398.86 1209.49 L1399.45 1209.49 L1400.03 1209.49 L1400.62 1209.49 L1401.21 1209.49 L1401.79 1209.49 L1402.38 1209.49 L1402.96 1209.49 L1403.55 1209.49 L1404.14 1209.49 L1404.72 1209.49 L1405.31 1209.49 L1405.9 1209.49 L1406.48 1209.49 L1407.07 1209.49 L1407.66 1209.49 L1408.24 1209.49 L1408.83 1209.49 L1409.42 1209.49 L1410 1209.49 L1410.59 1209.49 L1411.17 1209.49 L1411.76 1209.49 L1412.35 1209.49 L1412.93 1209.49 L1413.52 1209.49 L1414.11 1209.49 L1414.69 1209.49 L1415.28 1209.49 L1415.87 1209.49 L1416.45 1209.49 L1417.04 1209.49 L1417.63 1209.49 L1418.21 1209.49 L1418.8 1209.49 L1419.38 1209.49 L1419.97 1209.49 L1420.56 1209.49 L1421.14 1209.49 L1421.73 1209.49 L1422.32 1209.49 L1422.9 1209.49 L1423.49 1209.49 L1424.08 1209.49 L1424.66 1209.49 L1425.25 1209.49 L1425.83 1209.49 L1426.42 1209.49 L1427.01 1209.49 L1427.59 1209.49 L1428.18 1209.49 L1428.77 1209.49 L1429.35 1209.49 L1429.94 1209.49 L1430.53 1209.49 L1431.11 1209.49 L1431.7 1209.49 L1432.29 1209.49 L1432.87 1209.49 L1433.46 1209.49 L1434.04 1209.49 L1434.63 1209.49 L1435.22 1209.49 L1435.8 1209.49 L1436.39 1209.49 L1436.98 1209.49 L1437.56 1209.49 L1438.15 1209.49 L1438.74 1209.49 L1439.32 1209.49 L1439.91 1209.49 L1440.5 1209.49 L1441.08 1209.49 L1441.67 1209.49 L1442.25 1209.49 L1442.84 1209.49 L1443.43 1209.49 L1444.01 1209.49 L1444.6 1209.49 L1445.19 1209.49 L1445.77 1209.49 L1446.36 1209.49 L1446.95 1209.49 L1447.53 1209.49 L1448.12 1209.49 L1448.7 1209.49 L1449.29 1209.49 L1449.88 1209.49 L1450.46 1209.49 L1451.05 1209.49 L1451.64 1209.49 L1452.22 1209.49 L1452.81 1209.49 L1453.4 1209.49 L1453.98 1209.49 L1454.57 1209.49 L1455.16 1209.49 L1455.74 1209.49 L1456.33 1209.49 L1456.91 1209.49 L1457.5 1209.49 L1458.09 1209.49 L1458.67 1209.49 L1459.26 1209.49 L1459.85 1209.49 L1460.43 1209.49 L1461.02 1209.49 L1461.61 1209.49 L1462.19 1209.49 L1462.78 1209.49 L1463.37 1209.49 L1463.95 1209.49 L1464.54 1209.49 L1465.12 1209.49 L1465.71 1209.49 L1466.3 1209.49 L1466.88 1209.49 L1467.47 1209.49 L1468.06 1209.49 L1468.64 1209.49 L1469.23 1209.49 L1469.82 1209.49 L1470.4 1209.49 L1470.99 1209.49 L1471.57 1209.49 L1472.16 1209.49 L1472.75 1209.49 L1473.33 1209.49 L1473.92 1209.49 L1474.51 1209.49 L1475.09 1209.49 L1475.68 1209.49 L1476.27 1209.49 L1476.85 1209.49 L1477.44 1209.49 L1478.03 1209.49 L1478.61 1209.49 L1479.2 1209.49 L1479.78 1209.49 L1480.37 1209.49 L1480.96 1209.49 L1481.54 1209.49 L1482.13 1209.49 L1482.72 1209.49 L1483.3 1209.49 L1483.89 1209.49 L1484.48 1209.49 L1485.06 1209.49 L1485.65 1209.49 L1486.24 1209.49 L1486.82 1209.49 L1487.41 1209.49 L1487.99 1209.49 L1488.58 1209.49 L1489.17 1209.49 L1489.75 1209.49 L1490.34 1209.49 L1490.93 1209.49 L1491.51 1209.49 L1492.1 1209.49 L1492.69 1209.49 L1493.27 1209.49 L1493.86 1209.49 L1494.45 1209.49 L1495.03 1209.49 L1495.62 1209.49 L1496.2 1209.49 L1496.79 1209.49 L1497.38 1209.49 L1497.96 1209.49 L1498.55 1209.49 L1499.14 1209.49 L1499.72 1209.49 L1500.31 1209.49 L1500.9 1209.49 L1501.48 1209.49 L1502.07 1209.49 L1502.65 1209.49 L1503.24 1209.49 L1503.83 1209.49 L1504.41 1209.49 L1505 1209.49 L1505.59 1209.49 L1506.17 1209.49 L1506.76 1209.49 L1507.35 1209.49 L1507.93 1209.49 L1508.52 1209.49 L1509.11 1209.49 L1509.69 1209.49 L1510.28 1209.49 L1510.86 1209.49 L1511.45 1209.49 L1512.04 1209.49 L1512.62 1209.49 L1513.21 1209.49 L1513.8 1209.49 L1514.38 1209.49 L1514.97 1209.49 L1515.56 1209.49 L1516.14 1209.49 L1516.73 1209.49 L1517.32 1209.49 L1517.9 1209.49 L1518.49 1209.49 L1519.07 1209.49 L1519.66 1209.49 L1520.25 1209.49 L1520.83 1209.49 L1521.42 1209.49 L1522.01 1209.49 L1522.59 1209.49 L1523.18 1209.49 L1523.77 1209.49 L1524.35 1209.49 L1524.94 1209.49 L1525.52 1209.49 L1526.11 1209.49 L1526.7 1209.49 L1527.28 1209.49 L1527.87 1209.49 L1528.46 1209.49 L1529.04 1209.49 L1529.63 1209.49 L1530.22 1209.49 L1530.8 1209.49 L1531.39 1209.49 L1531.98 1209.49 L1532.56 1209.49 L1533.15 1209.49 L1533.73 1209.49 L1534.32 1209.49 L1534.91 1209.49 L1535.49 1209.49 L1536.08 1209.49 L1536.67 1209.49 L1537.25 1209.49 L1537.84 1209.49 L1538.43 1209.49 L1539.01 1209.49 L1539.6 1209.49 L1540.19 1209.49 L1540.77 1209.49 L1541.36 1209.49 L1541.94 1209.49 L1542.53 1209.49 L1543.12 1209.49 L1543.7 1209.49 L1544.29 1209.49 L1544.88 1209.49 L1545.46 1209.49 L1546.05 1209.49 L1546.64 1209.49 L1547.22 1209.49 L1547.81 1209.49 L1548.4 1209.49 L1548.98 1209.49 L1549.57 1209.49 L1550.15 1209.49 L1550.74 1209.49 L1551.33 1209.49 L1551.91 1209.49 L1552.5 1209.49 L1553.09 1209.49 L1553.67 1209.49 L1554.26 1209.49 L1554.85 1209.49 L1555.43 1209.49 L1556.02 1209.49 L1556.6 1209.49 L1557.19 1209.49 L1557.78 1209.49 L1558.36 1209.49 L1558.95 1209.49 L1559.54 1209.49 L1560.12 1209.49 L1560.71 1209.49 L1561.3 1209.49 L1561.88 1209.49 L1562.47 1209.49 L1563.06 1209.49 L1563.64 1209.49 L1564.23 1209.49 L1564.81 1209.49 L1565.4 1209.49 L1565.99 1209.49 L1566.57 1209.49 L1567.16 1209.49 L1567.75 1209.49 L1568.33 1209.49 L1568.92 1209.49 L1569.51 1209.49 L1570.09 1209.49 L1570.68 1209.49 L1571.27 1209.49 L1571.85 1209.49 L1572.44 1209.49 L1573.02 1209.49 L1573.61 1209.49 L1574.2 1209.49 L1574.78 1209.49 L1575.37 1209.49 L1575.96 1209.49 L1576.54 1209.49 L1577.13 1209.49 L1577.72 1209.49 L1578.3 1209.49 L1578.89 1209.49 L1579.47 1209.49 L1580.06 1209.49 L1580.65 1209.49 L1581.23 1209.49 L1581.82 1209.49 L1582.41 1209.49 L1582.99 1209.49 L1583.58 1209.49 L1584.17 1209.49 L1584.75 1209.49 L1585.34 1209.49 L1585.93 1209.49 L1586.51 1209.49 L1587.1 1209.49 L1587.68 1209.49 L1588.27 1209.49 L1588.86 1209.49 L1589.44 1209.49 L1590.03 1209.49 L1590.62 1209.49 L1591.2 1209.49 L1591.79 1209.49 L1592.38 1209.49 L1592.96 1209.49 L1593.55 1209.49 L1594.14 1209.49 L1594.72 1209.49 L1595.31 1209.49 L1595.89 1209.49 L1596.48 1209.49 L1597.07 1209.49 L1597.65 1209.49 L1598.24 1209.49 L1598.83 1209.49 L1599.41 1209.49 L1600 1209.49 L1600.59 1209.49 L1601.17 1209.49 L1601.76 1209.49 L1602.34 1209.49 L1602.93 1209.49 L1603.52 1209.49 L1604.1 1209.49 L1604.69 1209.49 L1605.28 1209.49 L1605.86 1209.49 L1606.45 1209.49 L1607.04 1209.49 L1607.62 1209.49 L1608.21 1209.49 L1608.8 1209.49 L1609.38 1209.49 L1609.97 1209.49 L1610.55 1209.49 L1611.14 1209.49 L1611.73 1209.49 L1612.31 1209.49 L1612.9 1209.49 L1613.49 1209.49 L1614.07 1209.49 L1614.66 1209.49 L1615.25 1209.49 L1615.83 1209.49 L1616.42 1209.49 L1617.01 1209.49 L1617.59 1209.49 L1618.18 1209.49 L1618.76 1209.49 L1619.35 1209.49 L1619.94 1209.49 L1620.52 1209.49 L1621.11 1209.49 L1621.7 1209.49 L1622.28 1209.49 L1622.87 1209.49 L1623.46 1209.49 L1624.04 1209.49 L1624.63 1209.49 L1625.22 1209.49 L1625.8 1209.49 L1626.39 1209.49 L1626.97 1209.49 L1627.56 1209.49 L1628.15 1209.49 L1628.73 1209.49 L1629.32 1209.49 L1629.91 1209.49 L1630.49 1209.49 L1631.08 1209.49 L1631.67 1209.49 L1632.25 1209.49 L1632.84 1209.49 L1633.42 1209.49 L1634.01 1209.49 L1634.6 1209.49 L1635.18 1209.49 L1635.77 1209.49 L1636.36 1209.49 L1636.94 1209.49 L1637.53 1209.49 L1638.12 1209.49 L1638.7 1209.49 L1639.29 1209.49 L1639.88 1209.49 L1640.46 1209.49 L1641.05 1209.49 L1641.63 1209.49 L1642.22 1209.49 L1642.81 1209.49 L1643.39 1209.49 L1643.98 1209.49 L1644.57 1209.49 L1645.15 1209.49 L1645.74 1209.49 L1646.33 1209.49 L1646.91 1209.49 L1647.5 1209.49 L1648.09 1209.49 L1648.67 1209.49 L1649.26 1209.49 L1649.84 1209.49 L1650.43 1209.49 L1651.02 1209.49 L1651.6 1209.49 L1652.19 1209.49 L1652.78 1209.49 L1653.36 1209.49 L1653.95 1209.49 L1654.54 1209.49 L1655.12 1209.49 L1655.71 1209.49 L1656.29 1209.49 L1656.88 1209.49 L1657.47 1209.49 L1658.05 1209.49 L1658.64 1209.49 L1659.23 1209.49 L1659.81 1209.49 L1660.4 1209.49 L1660.99 1209.49 L1661.57 1209.49 L1662.16 1209.49 L1662.75 1209.49 L1663.33 1209.49 L1663.92 1209.49 L1664.5 1209.49 L1665.09 1209.49 L1665.68 1209.49 L1666.26 1209.49 L1666.85 1209.49 L1667.44 1209.49 L1668.02 1209.49 L1668.61 1209.49 L1669.2 1209.49 L1669.78 1209.49 L1670.37 1209.49 L1670.96 1209.49 L1671.54 1209.49 L1672.13 1209.49 L1672.71 1209.49 L1673.3 1209.49 L1673.89 1209.49 L1674.47 1209.49 L1675.06 1209.49 L1675.65 1209.49 L1676.23 1209.49 L1676.82 1209.49 L1677.41 1209.49 L1677.99 1209.49 L1678.58 1209.49 L1679.17 1209.49 L1679.75 1209.49 L1680.34 1209.49 L1680.92 1209.49 L1681.51 1209.49 L1682.1 1209.49 L1682.68 1209.49 L1683.27 1209.49 L1683.86 1209.49 L1684.44 1209.49 L1685.03 1209.49 L1685.62 1209.49 L1686.2 1209.49 L1686.79 1209.49 L1687.37 1209.49 L1687.96 1209.49 L1688.55 1209.49 L1689.13 1209.49 L1689.72 1209.49 L1690.31 1209.49 L1690.89 1209.49 L1691.48 1209.49 L1692.07 1209.49 L1692.65 1209.49 L1693.24 1209.49 L1693.83 1209.49 L1694.41 1209.49 L1695 1209.49 L1695.58 1209.49 L1696.17 1209.49 L1696.76 1209.49 L1697.34 1209.49 L1697.93 1209.49 L1698.52 1209.49 L1699.1 1209.49 L1699.69 1209.49 L1700.28 1209.49 L1700.86 1209.49 L1701.45 1209.49 L1702.04 1209.49 L1702.62 1209.49 L1703.21 1209.49 L1703.79 1209.49 L1704.38 1209.49 L1704.97 1209.49 L1705.55 1209.49 L1706.14 1209.49 L1706.73 1209.49 L1707.31 1209.49 L1707.9 1209.49 L1708.49 1209.49 L1709.07 1209.49 L1709.66 1209.49 L1710.24 1209.49 L1710.83 1209.49 L1711.42 1209.49 L1712 1209.49 L1712.59 1209.49 L1713.18 1209.49 L1713.76 1209.49 L1714.35 1209.49 L1714.94 1209.49 L1715.52 1209.49 L1716.11 1209.49 L1716.7 1209.49 L1717.28 1209.49 L1717.87 1209.49 L1718.45 1209.49 L1719.04 1209.49 L1719.63 1209.49 L1720.21 1209.49 L1720.8 1209.49 L1721.39 1209.49 L1721.97 1209.49 L1722.56 1209.49 L1723.15 1209.49 L1723.73 1209.49 L1724.32 1209.49 L1724.91 1209.49 L1725.49 1209.49 L1726.08 1209.49 L1726.66 1209.49 L1727.25 1209.49 L1727.84 1209.49 L1728.42 1209.49 L1729.01 1209.49 L1729.6 1209.49 L1730.18 1209.49 L1730.77 1209.49 L1731.36 1209.49 L1731.94 1209.49 L1732.53 1209.49 L1733.11 1209.49 L1733.7 1209.49 L1734.29 1209.49 L1734.87 1209.49 L1735.46 1209.49 L1736.05 1209.49 L1736.63 1209.49 L1737.22 1209.49 L1737.81 1209.49 L1738.39 1209.49 L1738.98 1209.49 L1739.57 1209.49 L1740.15 1209.49 L1740.74 1209.49 L1741.32 1209.49 L1741.91 1209.49 L1742.5 1209.49 L1743.08 1209.49 L1743.67 1209.49 L1744.26 1209.49 L1744.84 1209.49 L1745.43 1209.49 L1746.02 1209.49 L1746.6 1209.49 L1747.19 1209.49 L1747.78 1209.49 L1748.36 1209.49 L1748.95 1209.49 L1749.53 1209.49 L1750.12 1209.49 L1750.71 1209.49 L1751.29 1209.49 L1751.88 1209.49 L1752.47 1209.49 L1753.05 1209.49 L1753.64 1209.49 L1754.23 1209.49 L1754.81 1209.49 L1755.4 1209.49 L1755.99 1209.49 L1756.57 1209.49 L1757.16 1209.49 L1757.74 1209.49 L1758.33 1209.49 L1758.92 1209.49 L1759.5 1209.49 L1760.09 1209.49 L1760.68 1209.49 L1761.26 1209.49 L1761.85 1209.49 L1762.44 1209.49 L1763.02 1209.49 L1763.61 1209.49 L1764.19 1209.49 L1764.78 1209.49 L1765.37 1209.49 L1765.95 1209.49 L1766.54 1209.49 L1767.13 1209.49 L1767.71 1209.49 L1768.3 1209.49 L1768.89 1209.49 L1769.47 1209.49 L1770.06 1209.49 L1770.65 1209.49 L1771.23 1209.49 L1771.82 1209.49 L1772.4 1209.49 L1772.99 1209.49 L1773.58 1209.49 L1774.16 1209.49 L1774.75 1209.49 L1775.34 1209.49 L1775.92 1209.49 L1776.51 1209.49 L1777.1 1209.49 L1777.68 1209.49 L1778.27 1209.49 L1778.86 1209.49 L1779.44 1209.49 L1780.03 1209.49 L1780.61 1209.49 L1781.2 1209.49 L1781.79 1209.49 L1782.37 1209.49 L1782.96 1209.49 L1783.55 1209.49 L1784.13 1209.49 L1784.72 1209.49 L1785.31 1209.49 L1785.89 1209.49 L1786.48 1209.49 L1787.06 1209.49 L1787.65 1209.49 L1788.24 1209.49 L1788.82 1209.49 L1789.41 1209.49 L1790 1209.49 L1790.58 1209.49 L1791.17 1209.49 L1791.76 1209.49 L1792.34 1209.49 L1792.93 1209.49 L1793.52 1209.49 L1794.1 1209.49 L1794.69 1209.49 L1795.27 1209.49 L1795.86 1209.49 L1796.45 1209.49 L1797.03 1209.49 L1797.62 1209.49 L1798.21 1209.49 L1798.79 1209.49 L1799.38 1209.49 L1799.97 1209.49 L1800.55 1209.49 L1801.14 1209.49 L1801.73 1209.49 L1802.31 1209.49 L1802.9 1209.49 L1803.48 1209.49 L1804.07 1209.49 L1804.66 1209.49 L1805.24 1209.49 L1805.83 1209.49 L1806.42 1209.49 L1807 1209.49 L1807.59 1209.49 L1808.18 1209.49 L1808.76 1209.49 L1809.35 1209.49 L1809.94 1209.49 L1810.52 1209.49 L1811.11 1209.49 L1811.69 1209.49 L1812.28 1209.49 L1812.87 1209.49 L1813.45 1209.49 L1814.04 1209.49 L1814.63 1209.49 L1815.21 1209.49 L1815.8 1209.49 L1816.39 1209.49 L1816.97 1209.49 L1817.56 1209.49 L1818.14 1209.49 L1818.73 1209.49 L1819.32 1209.49 L1819.9 1209.49 L1820.49 1209.49 L1821.08 1209.49 L1821.66 1209.49 L1822.25 1209.49 L1822.84 1209.49 L1823.42 1209.49 L1824.01 1209.49 L1824.6 1209.49 L1825.18 1209.49 L1825.77 1209.49 L1826.35 1209.49 L1826.94 1209.49 L1827.53 1209.49 L1828.11 1209.49 L1828.7 1209.49 L1829.29 1209.49 L1829.87 1209.49 L1830.46 1209.49 L1831.05 1209.49 L1831.63 1209.49 L1832.22 1209.49 L1832.81 1209.49 L1833.39 1209.49 L1833.98 1209.49 L1834.56 1209.49 L1835.15 1209.49 L1835.74 1209.49 L1836.32 1209.49 L1836.91 1209.49 L1837.5 1209.49 L1838.08 1209.49 L1838.67 1209.49 L1839.26 1209.49 L1839.84 1209.49 L1840.43 1209.49 L1841.01 1209.49 L1841.6 1209.49 L1842.19 1209.49 L1842.77 1209.49 L1843.36 1209.49 L1843.95 1209.49 L1844.53 1209.49 L1845.12 1209.49 L1845.71 1209.49 L1846.29 1209.49 L1846.88 1209.49 L1847.47 1209.49 L1848.05 1209.49 L1848.64 1209.49 L1849.22 1209.49 L1849.81 1209.49 L1850.4 1209.49 L1850.98 1209.49 L1851.57 1209.49 L1852.16 1209.49 L1852.74 1209.49 L1853.33 1209.49 L1853.92 1209.49 L1854.5 1209.49 L1855.09 1209.49 L1855.68 1209.49 L1856.26 1209.49 L1856.85 1209.49 L1857.43 1209.49 L1858.02 1209.49 L1858.61 1209.49 L1859.19 1209.49 L1859.78 1209.49 L1860.37 1209.49 L1860.95 1209.49 L1861.54 1209.49 L1862.13 1209.49 L1862.71 1209.49 L1863.3 1209.49 L1863.88 1209.49 L1864.47 1209.49 L1865.06 1209.49 L1865.64 1209.49 L1866.23 1209.49 L1866.82 1209.49 L1867.4 1209.49 L1867.99 1209.49 L1868.58 1209.49 L1869.16 1209.49 L1869.75 1209.49 L1870.34 1209.49 L1870.92 1209.49 L1871.51 1209.49 L1872.09 1209.49 L1872.68 1209.49 L1873.27 1209.49 L1873.85 1209.49 L1874.44 1209.49 L1875.03 1209.49 L1875.61 1209.49 L1876.2 1209.49 L1876.79 1209.49 L1877.37 1209.49 L1877.96 1209.49 L1878.55 1209.49 L1879.13 1209.49 L1879.72 1209.49 L1880.3 1209.49 L1880.89 1209.49 L1881.48 1209.49 L1882.06 1209.49 L1882.65 1209.49 L1883.24 1209.49 L1883.82 1209.49 L1884.41 1209.49 L1885 1209.49 L1885.58 1209.49 L1886.17 1209.49 L1886.76 1209.49 L1887.34 1209.49 L1887.93 1209.49 L1888.51 1209.49 L1889.1 1209.49 L1889.69 1209.49 L1890.27 1209.49 L1890.86 1209.49 L1891.45 1209.49 L1892.03 1209.49 L1892.62 1209.49 L1893.21 1209.49 L1893.79 1209.49 L1894.38 1209.49 L1894.96 1209.49 L1895.55 1209.49 L1896.14 1209.49 L1896.72 1209.49 L1897.31 1209.49 L1897.9 1209.49 L1898.48 1209.49 L1899.07 1209.49 L1899.66 1209.49 L1900.24 1209.49 L1900.83 1209.49 L1901.42 1209.49 L1902 1209.49 L1902.59 1209.49 L1903.17 1209.49 L1903.76 1209.49 L1904.35 1209.49 L1904.93 1209.49 L1905.52 1209.49 L1906.11 1209.49 L1906.69 1209.49 L1907.28 1209.49 L1907.87 1209.49 L1908.45 1209.49 L1909.04 1209.49 L1909.63 1209.49 L1910.21 1209.49 L1910.8 1209.49 L1911.38 1209.49 L1911.97 1209.49 L1912.56 1209.49 L1913.14 1209.49 L1913.73 1209.49 L1914.32 1209.49 L1914.9 1209.49 L1915.49 1209.49 L1916.08 1209.49 L1916.66 1209.49 L1917.25 1209.49 L1917.83 1209.49 L1918.42 1209.49 L1919.01 1209.49 L1919.59 1209.49 L1920.18 1209.49 L1920.77 1209.49 L1921.35 1209.49 L1921.94 1209.49 L1922.53 1209.49 L1923.11 1209.49 L1923.7 1209.49 L1924.29 1209.49 L1924.87 1209.49 L1925.46 1209.49 L1926.04 1209.49 L1926.63 1209.49 L1927.22 1209.49 L1927.8 1209.49 L1928.39 1209.49 L1928.98 1209.49 L1929.56 1209.49 L1930.15 1209.49 L1930.74 1209.49 L1931.32 1209.49 L1931.91 1209.49 L1932.5 1209.49 L1933.08 1209.49 L1933.67 1209.49 L1934.25 1209.49 L1934.84 1209.49 L1935.43 1209.49 L1936.01 1209.49 L1936.6 1209.49 L1937.19 1209.49 L1937.77 1209.49 L1938.36 1209.49 L1938.95 1209.49 L1939.53 1209.49 L1940.12 1209.49 L1940.71 1209.49 L1941.29 1209.49 L1941.88 1209.49 L1942.46 1209.49 L1943.05 1209.49 L1943.64 1209.49 L1944.22 1209.49 L1944.81 1209.49 L1945.4 1209.49 L1945.98 1209.49 L1946.57 1209.49 L1947.16 1209.49 L1947.74 1209.49 L1948.33 1209.49 L1948.91 1209.49 L1949.5 1209.49 L1950.09 1209.49 L1950.67 1209.49 L1951.26 1209.49 L1951.85 1209.49 L1952.43 1209.49 L1953.02 1209.49 L1953.61 1209.49 L1954.19 1209.49 L1954.78 1209.49 L1955.37 1209.49 L1955.95 1209.49 L1956.54 1209.49 L1957.12 1209.49 L1957.71 1209.49 L1958.3 1209.49 L1958.88 1209.49 L1959.47 1209.49 L1960.06 1209.49 L1960.64 1209.49 L1961.23 1209.49 L1961.82 1209.49 L1962.4 1209.49 L1962.99 1209.49 L1963.58 1209.49 L1964.16 1209.49 L1964.75 1209.49 L1965.33 1209.49 L1965.92 1209.49 L1966.51 1209.49 L1967.09 1209.49 L1967.68 1209.49 L1968.27 1209.49 L1968.85 1209.49 L1969.44 1209.49 L1970.03 1209.49 L1970.61 1209.49 L1971.2 1209.49 L1971.78 1209.49 L1972.37 1209.49 L1972.96 1209.49 L1973.54 1209.49 L1974.13 1209.49 L1974.72 1209.49 L1975.3 1209.49 L1975.89 1209.49 L1976.48 1209.49 L1977.06 1209.49 L1977.65 1209.49 L1978.24 1209.49 L1978.82 1209.49 L1979.41 1209.49 L1979.99 1209.49 L1980.58 1209.49 L1981.17 1209.49 L1981.75 1209.49 L1982.34 1209.49 L1982.93 1209.49 L1983.51 1209.49 L1984.1 1209.49 L1984.69 1209.49 L1985.27 1209.49 L1985.86 1209.49 L1986.45 1209.49 L1987.03 1209.49 L1987.62 1209.49 L1988.2 1209.49 L1988.79 1209.49 L1989.38 1209.49 L1989.96 1209.49 L1990.55 1209.49 L1991.14 1209.49 L1991.72 1209.49 L1992.31 1209.49 L1992.9 1209.49 L1993.48 1209.49 L1994.07 1209.49 L1994.65 1209.49 L1995.24 1209.49 L1995.83 1209.49 L1996.41 1209.49 L1997 1209.49 L1997.59 1209.49 L1998.17 1209.49 L1998.76 1209.49 L1999.35 1209.49 L1999.93 1209.49 L2000.52 1209.49 L2001.11 1209.49 L2001.69 1209.49 L2002.28 1209.49 L2002.86 1209.49 L2003.45 1209.49 L2004.04 1209.49 L2004.62 1209.49 L2005.21 1209.49 L2005.8 1209.49 L2006.38 1209.49 L2006.97 1209.49 L2007.56 1209.49 L2008.14 1209.49 L2008.73 1209.49 L2009.32 1209.49 L2009.9 1209.49 L2010.49 1209.49 L2011.07 1209.49 L2011.66 1209.49 L2012.25 1209.49 L2012.83 1209.49 L2013.42 1209.49 L2014.01 1209.49 L2014.59 1209.49 L2015.18 1209.49 L2015.77 1209.49 L2016.35 1209.49 L2016.94 1209.49 L2017.53 1209.49 L2018.11 1209.49 L2018.7 1209.49 L2019.28 1209.49 L2019.87 1209.49 L2020.46 1209.49 L2021.04 1209.49 L2021.63 1209.49 L2022.22 1209.49 L2022.8 1209.49 L2023.39 1209.49 L2023.98 1209.49 L2024.56 1209.49 L2025.15 1209.49 L2025.73 1209.49 L2026.32 1209.49 L2026.91 1209.49 L2027.49 1209.49 L2028.08 1209.49 L2028.67 1209.49 L2029.25 1209.49 L2029.84 1209.49 L2030.43 1209.49 L2031.01 1209.49 L2031.6 1209.49 L2032.19 1209.49 L2032.77 1209.49 L2033.36 1209.49 L2033.94 1209.49 L2034.53 1209.49 L2035.12 1209.49 L2035.7 1209.49 L2036.29 1209.49 L2036.88 1209.49 L2037.46 1209.49 L2038.05 1209.49 L2038.64 1209.49 L2039.22 1209.49 L2039.81 1209.49 L2040.4 1209.49 L2040.98 1209.49 L2041.57 1209.49 L2042.15 1209.49 L2042.74 1209.49 L2043.33 1209.49 L2043.91 1209.49 L2044.5 1209.49 L2045.09 1209.49 L2045.67 1209.49 L2046.26 1209.49 L2046.85 1209.49 L2047.43 1209.49 L2048.02 1209.49 L2048.6 1209.49 L2049.19 1209.49 L2049.78 1209.49 L2050.36 1209.49 L2050.95 1209.49 L2051.54 1209.49 L2052.12 1209.49 L2052.71 1209.49 L2053.3 1209.49 L2053.88 1209.49 L2054.47 1209.49 L2055.06 1209.49 L2055.64 1209.49 L2056.23 1209.49 L2056.81 1209.49 L2057.4 1209.49 L2057.99 1209.49 L2058.57 1209.49 L2059.16 1209.49 L2059.75 1209.49 L2060.33 1209.49 L2060.92 1209.49 L2061.51 1209.49 L2062.09 1209.49 L2062.68 1209.49 L2063.27 1209.49 L2063.85 1209.49 L2064.44 1209.49 L2065.02 1209.49 L2065.61 1209.49 L2066.2 1209.49 L2066.78 1209.49 L2067.37 1209.49 L2067.96 1209.49 L2068.54 1209.49 L2069.13 1209.49 L2069.72 1209.49 L2070.3 1209.49 L2070.89 1209.49 L2071.48 1209.49 L2072.06 1209.49 L2072.65 1209.49 L2073.23 1209.49 L2073.82 1209.49 L2074.41 1209.49 L2074.99 1209.49 L2075.58 1209.49 L2076.17 1209.49 L2076.75 1209.49 L2077.34 1209.49 L2077.93 1209.49 L2078.51 1209.49 L2079.1 1209.49 L2079.68 1209.49 L2080.27 1209.49 L2080.86 1209.49 L2081.44 1209.49 L2082.03 1209.49 L2082.62 1209.49 L2083.2 1209.49 L2083.79 1209.49 L2084.38 1209.49 L2084.96 1209.49 L2085.55 1209.49 L2086.14 1209.49 L2086.72 1209.49 L2087.31 1209.49 L2087.89 1209.49 L2088.48 1209.49 L2089.07 1209.49 L2089.65 1209.49 L2090.24 1209.49 L2090.83 1209.49 L2091.41 1209.49 L2092 1209.49 L2092.59 1209.49 L2093.17 1209.49 L2093.76 1209.49 L2094.35 1209.49 L2094.93 1209.49 L2095.52 1209.49 L2096.1 1209.49 L2096.69 1209.49 L2097.28 1209.49 L2097.86 1209.49 L2098.45 1209.49 L2099.04 1209.49 L2099.62 1209.49 L2100.21 1209.49 L2100.8 1209.49 L2101.38 1209.49 L2101.97 1209.49 L2102.55 1209.49 L2103.14 1209.49 L2103.73 1209.49 L2104.31 1209.49 L2104.9 1209.49 L2105.49 1209.49 L2106.07 1209.49 L2106.66 1209.49 L2107.25 1209.49 L2107.83 1209.49 L2108.42 1209.49 L2109.01 1209.49 L2109.59 1209.49 L2110.18 1209.49 L2110.76 1209.49 L2111.35 1209.49 L2111.94 1209.49 L2112.52 1209.49 L2113.11 1209.49 L2113.7 1209.49 L2114.28 1209.49 L2114.87 1209.49 L2115.46 1209.49 L2116.04 1209.49 L2116.63 1209.49 L2117.22 1209.49 L2117.8 1209.49 L2118.39 1209.49 L2118.97 1209.49 L2119.56 1209.49 L2120.15 1209.49 L2120.73 1209.49 L2121.32 1209.49 L2121.91 1209.49 L2122.49 1209.49 L2123.08 1209.49 L2123.67 1209.49 L2124.25 1209.49 L2124.84 1209.49 L2125.42 1209.49 L2126.01 1209.49 L2126.6 1209.49 L2127.18 1209.49 L2127.77 1209.49 L2128.36 1209.49 L2128.94 1209.49 L2129.53 1209.49 L2130.12 1209.49 L2130.7 1209.49 L2131.29 1209.49 L2131.88 1209.49 L2132.46 1209.49 L2133.05 1209.49 L2133.63 1209.49 L2134.22 1209.49 L2134.81 1209.49 L2135.39 1209.49 L2135.98 1209.49 L2136.57 1209.49 L2137.15 1209.49 L2137.74 1209.49 L2138.33 1209.49 L2138.91 1209.49 L2139.5 1209.49 L2140.09 1209.49 L2140.67 1209.49 L2141.26 1209.49 L2141.84 1209.49 L2142.43 1209.49 L2143.02 1209.49 L2143.6 1209.49 L2144.19 1209.49 L2144.78 1209.49 L2145.36 1209.49 L2145.95 1209.49 L2146.54 1209.49 L2147.12 1209.49 L2147.71 1209.49 L2148.3 1209.49 L2148.88 1209.49 L2149.47 1209.49 L2150.05 1209.49 L2150.64 1209.49 L2151.23 1209.49 L2151.81 1209.49 L2152.4 1209.49 L2152.99 1209.49 L2153.57 1209.49 L2154.16 1209.49 L2154.75 1209.49 L2155.33 1209.49 L2155.92 1209.49 L2156.5 1209.49 L2157.09 1209.49 L2157.68 1209.49 L2158.26 1209.49 L2158.26 1208.78 L2157.68 1208.78 L2157.09 1208.78 L2156.5 1208.78 L2155.92 1208.78 L2155.33 1208.78 L2154.75 1208.78 L2154.16 1208.78 L2153.57 1208.78 L2152.99 1208.78 L2152.4 1208.78 L2151.81 1208.78 L2151.23 1208.78 L2150.64 1208.78 L2150.05 1208.78 L2149.47 1208.78 L2148.88 1208.78 L2148.3 1208.78 L2147.71 1208.78 L2147.12 1208.78 L2146.54 1208.78 L2145.95 1208.78 L2145.36 1208.78 L2144.78 1208.78 L2144.19 1208.78 L2143.6 1208.78 L2143.02 1208.78 L2142.43 1208.78 L2141.84 1208.78 L2141.26 1208.78 L2140.67 1208.78 L2140.09 1208.78 L2139.5 1208.78 L2138.91 1208.78 L2138.33 1208.78 L2137.74 1208.78 L2137.15 1208.78 L2136.57 1208.78 L2135.98 1208.78 L2135.39 1208.78 L2134.81 1208.78 L2134.22 1208.78 L2133.63 1208.78 L2133.05 1208.78 L2132.46 1208.78 L2131.88 1208.78 L2131.29 1208.78 L2130.7 1208.78 L2130.12 1208.78 L2129.53 1208.78 L2128.94 1208.78 L2128.36 1208.78 L2127.77 1208.78 L2127.18 1208.78 L2126.6 1208.78 L2126.01 1208.78 L2125.42 1208.78 L2124.84 1208.78 L2124.25 1208.78 L2123.67 1208.78 L2123.08 1208.78 L2122.49 1208.78 L2121.91 1208.78 L2121.32 1208.78 L2120.73 1208.78 L2120.15 1208.78 L2119.56 1208.78 L2118.97 1208.78 L2118.39 1208.78 L2117.8 1208.78 L2117.22 1208.78 L2116.63 1208.78 L2116.04 1208.78 L2115.46 1208.78 L2114.87 1208.78 L2114.28 1208.78 L2113.7 1208.78 L2113.11 1208.78 L2112.52 1208.78 L2111.94 1208.78 L2111.35 1208.78 L2110.76 1208.78 L2110.18 1208.78 L2109.59 1208.78 L2109.01 1208.78 L2108.42 1208.78 L2107.83 1208.78 L2107.25 1208.78 L2106.66 1208.78 L2106.07 1208.78 L2105.49 1208.78 L2104.9 1208.78 L2104.31 1208.78 L2103.73 1208.78 L2103.14 1208.78 L2102.55 1208.78 L2101.97 1208.78 L2101.38 1208.78 L2100.8 1208.78 L2100.21 1208.78 L2099.62 1208.78 L2099.04 1208.78 L2098.45 1208.78 L2097.86 1208.78 L2097.28 1208.78 L2096.69 1208.78 L2096.1 1208.78 L2095.52 1208.78 L2094.93 1208.78 L2094.35 1208.78 L2093.76 1208.78 L2093.17 1208.78 L2092.59 1208.78 L2092 1208.78 L2091.41 1208.78 L2090.83 1208.78 L2090.24 1208.78 L2089.65 1208.78 L2089.07 1208.78 L2088.48 1208.78 L2087.89 1208.78 L2087.31 1208.78 L2086.72 1208.78 L2086.14 1208.78 L2085.55 1208.78 L2084.96 1208.78 L2084.38 1208.78 L2083.79 1208.78 L2083.2 1208.78 L2082.62 1208.78 L2082.03 1208.78 L2081.44 1208.78 L2080.86 1208.78 L2080.27 1208.78 L2079.68 1208.78 L2079.1 1208.78 L2078.51 1208.78 L2077.93 1208.78 L2077.34 1208.78 L2076.75 1208.78 L2076.17 1208.78 L2075.58 1208.78 L2074.99 1208.78 L2074.41 1208.78 L2073.82 1208.78 L2073.23 1208.78 L2072.65 1208.78 L2072.06 1208.78 L2071.48 1208.78 L2070.89 1208.78 L2070.3 1208.78 L2069.72 1208.78 L2069.13 1208.78 L2068.54 1208.78 L2067.96 1208.78 L2067.37 1208.78 L2066.78 1208.78 L2066.2 1208.78 L2065.61 1208.78 L2065.02 1208.78 L2064.44 1208.78 L2063.85 1208.78 L2063.27 1208.78 L2062.68 1208.78 L2062.09 1208.78 L2061.51 1208.78 L2060.92 1208.78 L2060.33 1208.78 L2059.75 1208.78 L2059.16 1208.78 L2058.57 1208.78 L2057.99 1208.78 L2057.4 1208.78 L2056.81 1208.78 L2056.23 1208.78 L2055.64 1208.78 L2055.06 1208.78 L2054.47 1208.78 L2053.88 1208.78 L2053.3 1208.78 L2052.71 1208.78 L2052.12 1208.78 L2051.54 1208.78 L2050.95 1208.78 L2050.36 1208.78 L2049.78 1208.78 L2049.19 1208.78 L2048.6 1208.78 L2048.02 1208.78 L2047.43 1208.78 L2046.85 1208.78 L2046.26 1208.78 L2045.67 1208.78 L2045.09 1208.78 L2044.5 1208.78 L2043.91 1208.78 L2043.33 1208.78 L2042.74 1208.78 L2042.15 1208.78 L2041.57 1208.78 L2040.98 1208.78 L2040.4 1208.78 L2039.81 1208.78 L2039.22 1208.78 L2038.64 1208.78 L2038.05 1208.78 L2037.46 1208.78 L2036.88 1208.78 L2036.29 1208.78 L2035.7 1208.78 L2035.12 1208.78 L2034.53 1208.78 L2033.94 1208.78 L2033.36 1208.78 L2032.77 1208.78 L2032.19 1208.78 L2031.6 1208.78 L2031.01 1208.78 L2030.43 1208.78 L2029.84 1208.78 L2029.25 1208.78 L2028.67 1208.78 L2028.08 1208.78 L2027.49 1208.78 L2026.91 1208.78 L2026.32 1208.78 L2025.73 1208.78 L2025.15 1208.78 L2024.56 1208.78 L2023.98 1208.78 L2023.39 1208.78 L2022.8 1208.78 L2022.22 1208.78 L2021.63 1208.78 L2021.04 1208.78 L2020.46 1208.78 L2019.87 1208.78 L2019.28 1208.78 L2018.7 1208.78 L2018.11 1208.78 L2017.53 1208.78 L2016.94 1208.78 L2016.35 1208.78 L2015.77 1208.78 L2015.18 1208.78 L2014.59 1208.78 L2014.01 1208.78 L2013.42 1208.78 L2012.83 1208.78 L2012.25 1208.78 L2011.66 1208.78 L2011.07 1208.78 L2010.49 1208.78 L2009.9 1208.78 L2009.32 1208.78 L2008.73 1208.78 L2008.14 1208.78 L2007.56 1208.78 L2006.97 1208.78 L2006.38 1208.78 L2005.8 1208.78 L2005.21 1208.78 L2004.62 1208.78 L2004.04 1208.78 L2003.45 1208.78 L2002.86 1208.78 L2002.28 1208.78 L2001.69 1208.78 L2001.11 1208.78 L2000.52 1208.78 L1999.93 1208.78 L1999.35 1208.78 L1998.76 1208.78 L1998.17 1208.78 L1997.59 1208.78 L1997 1208.78 L1996.41 1208.78 L1995.83 1208.78 L1995.24 1208.78 L1994.65 1208.78 L1994.07 1208.78 L1993.48 1208.78 L1992.9 1208.78 L1992.31 1208.78 L1991.72 1208.78 L1991.14 1208.78 L1990.55 1208.78 L1989.96 1208.78 L1989.38 1208.78 L1988.79 1208.78 L1988.2 1208.78 L1987.62 1208.78 L1987.03 1208.78 L1986.45 1208.78 L1985.86 1208.78 L1985.27 1208.78 L1984.69 1208.78 L1984.1 1208.78 L1983.51 1208.78 L1982.93 1208.78 L1982.34 1208.78 L1981.75 1208.78 L1981.17 1208.78 L1980.58 1208.78 L1979.99 1208.78 L1979.41 1208.78 L1978.82 1208.78 L1978.24 1208.78 L1977.65 1208.78 L1977.06 1208.78 L1976.48 1208.78 L1975.89 1208.78 L1975.3 1208.78 L1974.72 1208.78 L1974.13 1208.78 L1973.54 1208.78 L1972.96 1208.78 L1972.37 1208.78 L1971.78 1208.78 L1971.2 1208.78 L1970.61 1208.78 L1970.03 1208.78 L1969.44 1208.78 L1968.85 1208.78 L1968.27 1208.78 L1967.68 1208.78 L1967.09 1208.78 L1966.51 1208.78 L1965.92 1208.78 L1965.33 1208.78 L1964.75 1208.78 L1964.16 1208.78 L1963.58 1208.78 L1962.99 1208.78 L1962.4 1208.78 L1961.82 1208.78 L1961.23 1208.78 L1960.64 1208.78 L1960.06 1208.78 L1959.47 1208.78 L1958.88 1208.78 L1958.3 1208.78 L1957.71 1208.78 L1957.12 1208.78 L1956.54 1208.78 L1955.95 1208.78 L1955.37 1208.78 L1954.78 1208.78 L1954.19 1208.78 L1953.61 1208.78 L1953.02 1208.78 L1952.43 1208.78 L1951.85 1208.78 L1951.26 1208.78 L1950.67 1208.78 L1950.09 1208.78 L1949.5 1208.78 L1948.91 1208.78 L1948.33 1208.78 L1947.74 1208.78 L1947.16 1208.78 L1946.57 1208.78 L1945.98 1208.78 L1945.4 1208.78 L1944.81 1208.78 L1944.22 1208.78 L1943.64 1208.78 L1943.05 1208.78 L1942.46 1208.78 L1941.88 1208.78 L1941.29 1208.78 L1940.71 1208.78 L1940.12 1208.78 L1939.53 1208.78 L1938.95 1208.78 L1938.36 1208.78 L1937.77 1208.78 L1937.19 1208.78 L1936.6 1208.78 L1936.01 1208.78 L1935.43 1208.78 L1934.84 1208.78 L1934.25 1208.78 L1933.67 1208.78 L1933.08 1208.78 L1932.5 1208.78 L1931.91 1208.78 L1931.32 1208.78 L1930.74 1208.78 L1930.15 1208.78 L1929.56 1208.78 L1928.98 1208.78 L1928.39 1208.78 L1927.8 1208.78 L1927.22 1208.78 L1926.63 1208.78 L1926.04 1208.78 L1925.46 1208.78 L1924.87 1208.78 L1924.29 1208.78 L1923.7 1208.78 L1923.11 1208.78 L1922.53 1208.78 L1921.94 1208.78 L1921.35 1208.78 L1920.77 1208.78 L1920.18 1208.78 L1919.59 1208.78 L1919.01 1208.78 L1918.42 1208.78 L1917.83 1208.78 L1917.25 1208.78 L1916.66 1208.78 L1916.08 1208.78 L1915.49 1208.78 L1914.9 1208.78 L1914.32 1208.78 L1913.73 1208.78 L1913.14 1208.78 L1912.56 1208.78 L1911.97 1208.78 L1911.38 1208.78 L1910.8 1208.78 L1910.21 1208.78 L1909.63 1208.78 L1909.04 1208.78 L1908.45 1208.78 L1907.87 1208.78 L1907.28 1208.78 L1906.69 1208.78 L1906.11 1208.78 L1905.52 1208.78 L1904.93 1208.78 L1904.35 1208.78 L1903.76 1208.78 L1903.17 1208.78 L1902.59 1208.78 L1902 1208.78 L1901.42 1208.78 L1900.83 1208.78 L1900.24 1208.78 L1899.66 1208.78 L1899.07 1208.78 L1898.48 1208.78 L1897.9 1208.78 L1897.31 1208.78 L1896.72 1208.78 L1896.14 1208.78 L1895.55 1208.78 L1894.96 1208.78 L1894.38 1208.78 L1893.79 1208.78 L1893.21 1208.78 L1892.62 1208.78 L1892.03 1208.78 L1891.45 1208.78 L1890.86 1208.78 L1890.27 1208.78 L1889.69 1208.78 L1889.1 1208.78 L1888.51 1208.78 L1887.93 1208.78 L1887.34 1208.78 L1886.76 1208.78 L1886.17 1208.78 L1885.58 1208.78 L1885 1208.78 L1884.41 1208.78 L1883.82 1208.78 L1883.24 1208.78 L1882.65 1208.78 L1882.06 1208.78 L1881.48 1208.78 L1880.89 1208.78 L1880.3 1208.78 L1879.72 1208.78 L1879.13 1208.78 L1878.55 1208.78 L1877.96 1208.78 L1877.37 1208.78 L1876.79 1208.78 L1876.2 1208.78 L1875.61 1208.78 L1875.03 1208.78 L1874.44 1208.78 L1873.85 1208.78 L1873.27 1208.78 L1872.68 1208.78 L1872.09 1208.78 L1871.51 1208.78 L1870.92 1208.78 L1870.34 1208.78 L1869.75 1208.78 L1869.16 1208.78 L1868.58 1208.78 L1867.99 1208.78 L1867.4 1208.78 L1866.82 1208.78 L1866.23 1208.78 L1865.64 1208.78 L1865.06 1208.78 L1864.47 1208.78 L1863.88 1208.78 L1863.3 1208.78 L1862.71 1208.78 L1862.13 1208.78 L1861.54 1208.78 L1860.95 1208.78 L1860.37 1208.78 L1859.78 1208.78 L1859.19 1208.78 L1858.61 1208.78 L1858.02 1208.78 L1857.43 1208.78 L1856.85 1208.78 L1856.26 1208.78 L1855.68 1208.78 L1855.09 1208.78 L1854.5 1208.78 L1853.92 1208.78 L1853.33 1208.78 L1852.74 1208.78 L1852.16 1208.78 L1851.57 1208.78 L1850.98 1208.78 L1850.4 1208.78 L1849.81 1208.78 L1849.22 1208.78 L1848.64 1208.78 L1848.05 1208.78 L1847.47 1208.78 L1846.88 1208.78 L1846.29 1208.78 L1845.71 1208.78 L1845.12 1208.78 L1844.53 1208.78 L1843.95 1208.78 L1843.36 1208.78 L1842.77 1208.78 L1842.19 1208.78 L1841.6 1208.78 L1841.01 1208.78 L1840.43 1208.78 L1839.84 1208.78 L1839.26 1208.78 L1838.67 1208.78 L1838.08 1208.78 L1837.5 1208.78 L1836.91 1208.78 L1836.32 1208.78 L1835.74 1208.78 L1835.15 1208.78 L1834.56 1208.78 L1833.98 1208.78 L1833.39 1208.78 L1832.81 1208.78 L1832.22 1208.78 L1831.63 1208.78 L1831.05 1208.78 L1830.46 1208.78 L1829.87 1208.78 L1829.29 1208.78 L1828.7 1208.78 L1828.11 1208.78 L1827.53 1208.78 L1826.94 1208.78 L1826.35 1208.78 L1825.77 1208.78 L1825.18 1208.78 L1824.6 1208.78 L1824.01 1208.78 L1823.42 1208.78 L1822.84 1208.78 L1822.25 1208.78 L1821.66 1208.78 L1821.08 1208.78 L1820.49 1208.78 L1819.9 1208.78 L1819.32 1208.78 L1818.73 1208.78 L1818.14 1208.78 L1817.56 1208.78 L1816.97 1208.78 L1816.39 1208.78 L1815.8 1208.78 L1815.21 1208.78 L1814.63 1208.78 L1814.04 1208.78 L1813.45 1208.78 L1812.87 1208.78 L1812.28 1208.78 L1811.69 1208.78 L1811.11 1208.78 L1810.52 1208.78 L1809.94 1208.78 L1809.35 1208.78 L1808.76 1208.78 L1808.18 1208.78 L1807.59 1208.78 L1807 1208.78 L1806.42 1208.78 L1805.83 1208.78 L1805.24 1208.78 L1804.66 1208.78 L1804.07 1208.78 L1803.48 1208.78 L1802.9 1208.78 L1802.31 1208.78 L1801.73 1208.78 L1801.14 1208.78 L1800.55 1208.78 L1799.97 1208.78 L1799.38 1208.78 L1798.79 1208.78 L1798.21 1208.78 L1797.62 1208.78 L1797.03 1208.78 L1796.45 1208.78 L1795.86 1208.78 L1795.27 1208.78 L1794.69 1208.78 L1794.1 1208.78 L1793.52 1208.78 L1792.93 1208.78 L1792.34 1208.78 L1791.76 1208.78 L1791.17 1208.78 L1790.58 1208.78 L1790 1208.78 L1789.41 1208.78 L1788.82 1208.78 L1788.24 1208.78 L1787.65 1208.78 L1787.06 1208.78 L1786.48 1208.78 L1785.89 1208.78 L1785.31 1208.78 L1784.72 1208.78 L1784.13 1208.78 L1783.55 1208.78 L1782.96 1208.78 L1782.37 1208.78 L1781.79 1208.78 L1781.2 1208.78 L1780.61 1208.78 L1780.03 1208.78 L1779.44 1208.78 L1778.86 1208.78 L1778.27 1208.78 L1777.68 1208.78 L1777.1 1208.78 L1776.51 1208.78 L1775.92 1208.78 L1775.34 1208.78 L1774.75 1208.78 L1774.16 1208.78 L1773.58 1208.78 L1772.99 1208.78 L1772.4 1208.78 L1771.82 1208.78 L1771.23 1208.78 L1770.65 1208.78 L1770.06 1208.78 L1769.47 1208.78 L1768.89 1208.78 L1768.3 1208.78 L1767.71 1208.78 L1767.13 1208.78 L1766.54 1208.78 L1765.95 1208.78 L1765.37 1208.78 L1764.78 1208.78 L1764.19 1208.78 L1763.61 1208.78 L1763.02 1208.78 L1762.44 1208.78 L1761.85 1208.78 L1761.26 1208.78 L1760.68 1208.78 L1760.09 1208.78 L1759.5 1208.78 L1758.92 1208.78 L1758.33 1208.78 L1757.74 1208.78 L1757.16 1208.78 L1756.57 1208.78 L1755.99 1208.78 L1755.4 1208.78 L1754.81 1208.78 L1754.23 1208.78 L1753.64 1208.78 L1753.05 1208.78 L1752.47 1208.78 L1751.88 1208.78 L1751.29 1208.78 L1750.71 1208.78 L1750.12 1208.78 L1749.53 1208.78 L1748.95 1208.78 L1748.36 1208.78 L1747.78 1208.78 L1747.19 1208.78 L1746.6 1208.78 L1746.02 1208.78 L1745.43 1208.78 L1744.84 1208.78 L1744.26 1208.78 L1743.67 1208.78 L1743.08 1208.78 L1742.5 1208.78 L1741.91 1208.78 L1741.32 1208.78 L1740.74 1208.78 L1740.15 1208.78 L1739.57 1208.78 L1738.98 1208.78 L1738.39 1208.78 L1737.81 1208.78 L1737.22 1208.78 L1736.63 1208.78 L1736.05 1208.78 L1735.46 1208.78 L1734.87 1208.78 L1734.29 1208.78 L1733.7 1208.78 L1733.11 1208.78 L1732.53 1208.78 L1731.94 1208.78 L1731.36 1208.78 L1730.77 1208.78 L1730.18 1208.78 L1729.6 1208.78 L1729.01 1208.78 L1728.42 1208.78 L1727.84 1208.78 L1727.25 1208.78 L1726.66 1208.78 L1726.08 1208.78 L1725.49 1208.78 L1724.91 1208.78 L1724.32 1208.78 L1723.73 1208.78 L1723.15 1208.78 L1722.56 1208.78 L1721.97 1208.78 L1721.39 1208.78 L1720.8 1208.78 L1720.21 1208.78 L1719.63 1208.78 L1719.04 1208.78 L1718.45 1208.78 L1717.87 1208.78 L1717.28 1208.78 L1716.7 1208.78 L1716.11 1208.78 L1715.52 1208.78 L1714.94 1208.78 L1714.35 1208.78 L1713.76 1208.78 L1713.18 1208.78 L1712.59 1208.78 L1712 1208.78 L1711.42 1208.78 L1710.83 1208.78 L1710.24 1208.78 L1709.66 1208.78 L1709.07 1208.78 L1708.49 1208.78 L1707.9 1208.78 L1707.31 1208.78 L1706.73 1208.78 L1706.14 1208.78 L1705.55 1208.78 L1704.97 1208.78 L1704.38 1208.78 L1703.79 1208.78 L1703.21 1208.78 L1702.62 1208.78 L1702.04 1208.78 L1701.45 1208.78 L1700.86 1208.78 L1700.28 1208.78 L1699.69 1208.78 L1699.1 1208.78 L1698.52 1208.78 L1697.93 1208.78 L1697.34 1208.78 L1696.76 1208.78 L1696.17 1208.78 L1695.58 1208.78 L1695 1208.78 L1694.41 1208.78 L1693.83 1208.78 L1693.24 1208.78 L1692.65 1208.78 L1692.07 1208.78 L1691.48 1208.78 L1690.89 1208.78 L1690.31 1208.78 L1689.72 1208.78 L1689.13 1208.78 L1688.55 1208.78 L1687.96 1208.78 L1687.37 1208.78 L1686.79 1208.78 L1686.2 1208.78 L1685.62 1208.78 L1685.03 1208.78 L1684.44 1208.78 L1683.86 1208.78 L1683.27 1208.78 L1682.68 1208.78 L1682.1 1208.78 L1681.51 1208.78 L1680.92 1208.78 L1680.34 1208.78 L1679.75 1208.78 L1679.17 1208.78 L1678.58 1208.78 L1677.99 1208.78 L1677.41 1208.78 L1676.82 1208.78 L1676.23 1208.78 L1675.65 1208.78 L1675.06 1208.78 L1674.47 1208.78 L1673.89 1208.78 L1673.3 1208.78 L1672.71 1208.78 L1672.13 1208.78 L1671.54 1208.78 L1670.96 1208.78 L1670.37 1208.78 L1669.78 1208.78 L1669.2 1208.78 L1668.61 1208.78 L1668.02 1208.78 L1667.44 1208.78 L1666.85 1208.78 L1666.26 1208.78 L1665.68 1208.78 L1665.09 1208.78 L1664.5 1208.78 L1663.92 1208.78 L1663.33 1208.78 L1662.75 1208.78 L1662.16 1208.78 L1661.57 1208.78 L1660.99 1208.78 L1660.4 1208.78 L1659.81 1208.78 L1659.23 1208.78 L1658.64 1208.78 L1658.05 1208.78 L1657.47 1208.78 L1656.88 1208.78 L1656.29 1208.78 L1655.71 1208.78 L1655.12 1208.78 L1654.54 1208.78 L1653.95 1208.78 L1653.36 1208.78 L1652.78 1208.78 L1652.19 1208.78 L1651.6 1208.78 L1651.02 1208.78 L1650.43 1208.78 L1649.84 1208.78 L1649.26 1208.78 L1648.67 1208.78 L1648.09 1208.78 L1647.5 1208.78 L1646.91 1208.78 L1646.33 1208.78 L1645.74 1208.78 L1645.15 1208.78 L1644.57 1208.78 L1643.98 1208.78 L1643.39 1208.78 L1642.81 1208.78 L1642.22 1208.78 L1641.63 1208.78 L1641.05 1208.78 L1640.46 1208.78 L1639.88 1208.78 L1639.29 1208.78 L1638.7 1208.78 L1638.12 1208.78 L1637.53 1208.78 L1636.94 1208.78 L1636.36 1208.78 L1635.77 1208.78 L1635.18 1208.78 L1634.6 1208.78 L1634.01 1208.78 L1633.42 1208.78 L1632.84 1208.78 L1632.25 1208.78 L1631.67 1208.78 L1631.08 1208.78 L1630.49 1208.78 L1629.91 1208.78 L1629.32 1208.78 L1628.73 1208.78 L1628.15 1208.78 L1627.56 1208.78 L1626.97 1208.78 L1626.39 1208.78 L1625.8 1208.78 L1625.22 1208.78 L1624.63 1208.78 L1624.04 1208.78 L1623.46 1208.78 L1622.87 1208.78 L1622.28 1208.78 L1621.7 1208.78 L1621.11 1208.78 L1620.52 1208.78 L1619.94 1208.78 L1619.35 1208.78 L1618.76 1208.78 L1618.18 1208.78 L1617.59 1208.78 L1617.01 1208.78 L1616.42 1208.78 L1615.83 1208.78 L1615.25 1208.78 L1614.66 1208.78 L1614.07 1208.78 L1613.49 1208.78 L1612.9 1208.78 L1612.31 1208.78 L1611.73 1208.78 L1611.14 1208.78 L1610.55 1208.78 L1609.97 1208.78 L1609.38 1208.78 L1608.8 1208.78 L1608.21 1208.78 L1607.62 1208.78 L1607.04 1208.78 L1606.45 1208.78 L1605.86 1208.78 L1605.28 1208.78 L1604.69 1208.78 L1604.1 1208.78 L1603.52 1208.78 L1602.93 1208.78 L1602.34 1208.78 L1601.76 1208.78 L1601.17 1208.78 L1600.59 1208.78 L1600 1208.78 L1599.41 1208.78 L1598.83 1208.78 L1598.24 1208.78 L1597.65 1208.78 L1597.07 1208.78 L1596.48 1208.78 L1595.89 1208.78 L1595.31 1208.78 L1594.72 1208.78 L1594.14 1208.78 L1593.55 1208.78 L1592.96 1208.78 L1592.38 1208.78 L1591.79 1208.78 L1591.2 1208.78 L1590.62 1208.78 L1590.03 1208.78 L1589.44 1208.78 L1588.86 1208.78 L1588.27 1208.78 L1587.68 1208.78 L1587.1 1208.78 L1586.51 1208.78 L1585.93 1208.78 L1585.34 1208.78 L1584.75 1208.78 L1584.17 1208.78 L1583.58 1208.78 L1582.99 1208.78 L1582.41 1208.78 L1581.82 1208.78 L1581.23 1208.78 L1580.65 1208.78 L1580.06 1208.78 L1579.47 1208.78 L1578.89 1208.78 L1578.3 1208.78 L1577.72 1208.78 L1577.13 1208.78 L1576.54 1208.78 L1575.96 1208.78 L1575.37 1208.78 L1574.78 1208.78 L1574.2 1208.78 L1573.61 1208.78 L1573.02 1208.78 L1572.44 1208.78 L1571.85 1208.78 L1571.27 1208.78 L1570.68 1208.78 L1570.09 1208.78 L1569.51 1208.78 L1568.92 1208.78 L1568.33 1208.78 L1567.75 1208.78 L1567.16 1208.78 L1566.57 1208.78 L1565.99 1208.78 L1565.4 1208.78 L1564.81 1208.78 L1564.23 1208.78 L1563.64 1208.78 L1563.06 1208.78 L1562.47 1208.78 L1561.88 1208.78 L1561.3 1208.78 L1560.71 1208.78 L1560.12 1208.78 L1559.54 1208.78 L1558.95 1208.78 L1558.36 1208.78 L1557.78 1208.78 L1557.19 1208.78 L1556.6 1208.78 L1556.02 1208.78 L1555.43 1208.78 L1554.85 1208.78 L1554.26 1208.78 L1553.67 1208.78 L1553.09 1208.78 L1552.5 1208.78 L1551.91 1208.78 L1551.33 1208.78 L1550.74 1208.78 L1550.15 1208.78 L1549.57 1208.78 L1548.98 1208.78 L1548.4 1208.78 L1547.81 1208.78 L1547.22 1208.78 L1546.64 1208.78 L1546.05 1208.78 L1545.46 1208.78 L1544.88 1208.78 L1544.29 1208.78 L1543.7 1208.78 L1543.12 1208.78 L1542.53 1208.78 L1541.94 1208.78 L1541.36 1208.78 L1540.77 1208.78 L1540.19 1208.78 L1539.6 1208.78 L1539.01 1208.78 L1538.43 1208.78 L1537.84 1208.78 L1537.25 1208.78 L1536.67 1208.78 L1536.08 1208.78 L1535.49 1208.78 L1534.91 1208.78 L1534.32 1208.78 L1533.73 1208.78 L1533.15 1208.78 L1532.56 1208.78 L1531.98 1208.78 L1531.39 1208.78 L1530.8 1208.78 L1530.22 1208.78 L1529.63 1208.78 L1529.04 1208.78 L1528.46 1208.78 L1527.87 1208.78 L1527.28 1208.78 L1526.7 1208.78 L1526.11 1208.78 L1525.52 1208.78 L1524.94 1208.78 L1524.35 1208.78 L1523.77 1208.78 L1523.18 1208.78 L1522.59 1208.78 L1522.01 1208.78 L1521.42 1208.78 L1520.83 1208.78 L1520.25 1208.78 L1519.66 1208.78 L1519.07 1208.78 L1518.49 1208.78 L1517.9 1208.78 L1517.32 1208.78 L1516.73 1208.78 L1516.14 1208.78 L1515.56 1208.78 L1514.97 1208.78 L1514.38 1208.78 L1513.8 1208.78 L1513.21 1208.78 L1512.62 1208.78 L1512.04 1208.78 L1511.45 1208.78 L1510.86 1208.78 L1510.28 1208.78 L1509.69 1208.78 L1509.11 1208.78 L1508.52 1208.78 L1507.93 1208.78 L1507.35 1208.78 L1506.76 1208.78 L1506.17 1208.78 L1505.59 1208.78 L1505 1208.78 L1504.41 1208.78 L1503.83 1208.78 L1503.24 1208.78 L1502.65 1208.78 L1502.07 1208.78 L1501.48 1208.78 L1500.9 1208.78 L1500.31 1208.78 L1499.72 1208.78 L1499.14 1208.78 L1498.55 1208.78 L1497.96 1208.78 L1497.38 1208.78 L1496.79 1208.78 L1496.2 1208.78 L1495.62 1208.78 L1495.03 1208.78 L1494.45 1208.78 L1493.86 1208.78 L1493.27 1208.78 L1492.69 1208.78 L1492.1 1208.78 L1491.51 1208.78 L1490.93 1208.78 L1490.34 1208.78 L1489.75 1208.78 L1489.17 1208.78 L1488.58 1208.78 L1487.99 1208.78 L1487.41 1208.78 L1486.82 1208.78 L1486.24 1208.78 L1485.65 1208.78 L1485.06 1208.78 L1484.48 1208.78 L1483.89 1208.78 L1483.3 1208.78 L1482.72 1208.78 L1482.13 1208.78 L1481.54 1208.78 L1480.96 1208.78 L1480.37 1208.78 L1479.78 1208.78 L1479.2 1208.78 L1478.61 1208.78 L1478.03 1208.78 L1477.44 1208.78 L1476.85 1208.78 L1476.27 1208.78 L1475.68 1208.78 L1475.09 1208.78 L1474.51 1208.78 L1473.92 1208.78 L1473.33 1208.78 L1472.75 1208.78 L1472.16 1208.78 L1471.57 1208.78 L1470.99 1208.78 L1470.4 1208.78 L1469.82 1208.78 L1469.23 1208.78 L1468.64 1208.78 L1468.06 1208.78 L1467.47 1208.78 L1466.88 1208.78 L1466.3 1208.78 L1465.71 1208.78 L1465.12 1208.78 L1464.54 1208.78 L1463.95 1208.78 L1463.37 1208.78 L1462.78 1208.78 L1462.19 1208.78 L1461.61 1208.78 L1461.02 1208.78 L1460.43 1208.78 L1459.85 1208.78 L1459.26 1208.78 L1458.67 1208.78 L1458.09 1208.78 L1457.5 1208.78 L1456.91 1208.78 L1456.33 1208.78 L1455.74 1208.78 L1455.16 1208.78 L1454.57 1208.78 L1453.98 1208.78 L1453.4 1208.78 L1452.81 1208.78 L1452.22 1208.78 L1451.64 1208.78 L1451.05 1208.78 L1450.46 1208.78 L1449.88 1208.78 L1449.29 1208.78 L1448.7 1208.78 L1448.12 1208.78 L1447.53 1208.78 L1446.95 1208.78 L1446.36 1208.78 L1445.77 1208.78 L1445.19 1208.78 L1444.6 1208.78 L1444.01 1208.78 L1443.43 1208.78 L1442.84 1208.78 L1442.25 1208.78 L1441.67 1208.78 L1441.08 1208.78 L1440.5 1208.78 L1439.91 1208.78 L1439.32 1208.78 L1438.74 1208.78 L1438.15 1208.78 L1437.56 1208.78 L1436.98 1208.78 L1436.39 1208.78 L1435.8 1208.78 L1435.22 1208.78 L1434.63 1208.78 L1434.04 1208.78 L1433.46 1208.78 L1432.87 1208.78 L1432.29 1208.78 L1431.7 1208.78 L1431.11 1208.78 L1430.53 1208.78 L1429.94 1208.78 L1429.35 1208.78 L1428.77 1208.78 L1428.18 1208.78 L1427.59 1208.78 L1427.01 1208.78 L1426.42 1208.78 L1425.83 1208.78 L1425.25 1208.78 L1424.66 1208.78 L1424.08 1208.78 L1423.49 1208.78 L1422.9 1208.78 L1422.32 1208.78 L1421.73 1208.78 L1421.14 1208.78 L1420.56 1208.78 L1419.97 1208.78 L1419.38 1208.78 L1418.8 1208.78 L1418.21 1208.78 L1417.63 1208.78 L1417.04 1208.78 L1416.45 1208.78 L1415.87 1208.78 L1415.28 1208.78 L1414.69 1208.78 L1414.11 1208.78 L1413.52 1208.78 L1412.93 1208.78 L1412.35 1208.78 L1411.76 1208.78 L1411.17 1208.78 L1410.59 1208.78 L1410 1208.78 L1409.42 1208.78 L1408.83 1208.78 L1408.24 1208.78 L1407.66 1208.78 L1407.07 1208.78 L1406.48 1208.78 L1405.9 1208.78 L1405.31 1208.78 L1404.72 1208.78 L1404.14 1208.78 L1403.55 1208.78 L1402.96 1208.78 L1402.38 1208.78 L1401.79 1208.78 L1401.21 1208.78 L1400.62 1208.78 L1400.03 1208.78 L1399.45 1208.78 L1398.86 1208.78 L1398.27 1208.78 L1397.69 1208.78 L1397.1 1208.78 L1396.51 1208.78 L1395.93 1208.78 L1395.34 1208.78 L1394.75 1208.78 L1394.17 1208.78 L1393.58 1208.78 L1393 1208.78 L1392.41 1208.78 L1391.82 1208.78 L1391.24 1208.78 L1390.65 1208.78 L1390.06 1208.78 L1389.48 1208.78 L1388.89 1208.78 L1388.3 1208.78 L1387.72 1208.78 L1387.13 1208.78 L1386.55 1208.78 L1385.96 1208.78 L1385.37 1208.78 L1384.79 1208.78 L1384.2 1208.78 L1383.61 1208.78 L1383.03 1208.78 L1382.44 1208.78 L1381.85 1208.78 L1381.27 1208.78 L1380.68 1208.78 L1380.09 1208.78 L1379.51 1208.78 L1378.92 1208.78 L1378.34 1208.78 L1377.75 1208.78 L1377.16 1208.78 L1376.58 1208.78 L1375.99 1208.78 L1375.4 1208.78 L1374.82 1208.78 L1374.23 1208.78 L1373.64 1208.78 L1373.06 1208.78 L1372.47 1208.78 L1371.88 1208.78 L1371.3 1208.78 L1370.71 1208.78 L1370.13 1208.78 L1369.54 1208.78 L1368.95 1208.78 L1368.37 1208.78 L1367.78 1208.78 L1367.19 1208.78 L1366.61 1208.78 L1366.02 1208.78 L1365.43 1208.78 L1364.85 1208.78 L1364.26 1208.78 L1363.68 1208.78 L1363.09 1208.78 L1362.5 1208.78 L1361.92 1208.78 L1361.33 1208.78 L1360.74 1208.78 L1360.16 1208.78 L1359.57 1208.78 L1358.98 1208.78 L1358.4 1208.78 L1357.81 1208.78 L1357.22 1208.78 L1356.64 1208.78 L1356.05 1208.78 L1355.47 1208.78 L1354.88 1208.78 L1354.29 1208.78 L1353.71 1208.78 L1353.12 1208.78 L1352.53 1208.78 L1351.95 1208.78 L1351.36 1208.78 L1350.77 1208.78 L1350.19 1208.78 L1349.6 1208.78 L1349.01 1208.78 L1348.43 1208.78 L1347.84 1208.78 L1347.26 1208.78 L1346.67 1208.78 L1346.08 1208.78 L1345.5 1208.78 L1344.91 1208.78 L1344.32 1208.78 L1343.74 1208.78 L1343.15 1208.78 L1342.56 1208.78 L1341.98 1208.78 L1341.39 1208.78 L1340.8 1208.78 L1340.22 1208.78 L1339.63 1208.78 L1339.05 1208.78 L1338.46 1208.78 L1337.87 1208.78 L1337.29 1208.78 L1336.7 1208.78 L1336.11 1208.78 L1335.53 1208.78 L1334.94 1208.78 L1334.35 1208.78 L1333.77 1208.78 L1333.18 1208.78 L1332.6 1208.78 L1332.01 1208.78 L1331.42 1208.78 L1330.84 1208.78 L1330.25 1208.78 L1329.66 1208.78 L1329.08 1208.78 L1328.49 1208.78 L1327.9 1208.78 L1327.32 1208.78 L1326.73 1208.78 L1326.14 1208.78 L1325.56 1208.78 L1324.97 1208.78 L1324.39 1208.78 L1323.8 1208.78 L1323.21 1208.78 L1322.63 1208.78 L1322.04 1208.78 L1321.45 1208.78 L1320.87 1208.78 L1320.28 1208.78 L1319.69 1208.78 L1319.11 1208.78 L1318.52 1208.78 L1317.93 1208.78 L1317.35 1208.78 L1316.76 1208.78 L1316.18 1208.78 L1315.59 1208.78 L1315 1208.78 L1314.42 1208.78 L1313.83 1208.78 L1313.24 1208.78 L1312.66 1208.78 L1312.07 1208.78 L1311.48 1208.78 L1310.9 1208.78 L1310.31 1208.78 L1309.73 1208.78 L1309.14 1208.78 L1308.55 1208.78 L1307.97 1208.78 L1307.38 1208.78 L1306.79 1208.78 L1306.21 1208.78 L1305.62 1208.78 L1305.03 1208.78 L1304.45 1208.78 L1303.86 1208.78 L1303.27 1208.78 L1302.69 1208.78 L1302.1 1208.78 L1301.52 1208.78 L1300.93 1208.78 L1300.34 1208.78 L1299.76 1208.78 L1299.17 1208.78 L1298.58 1208.78 L1298 1208.78 L1297.41 1208.78 L1296.82 1208.78 L1296.24 1208.78 L1295.65 1208.78 L1295.06 1208.78 L1294.48 1208.78 L1293.89 1208.78 L1293.31 1208.78 L1292.72 1208.78 L1292.13 1208.78 L1291.55 1208.78 L1290.96 1208.78 L1290.37 1208.78 L1289.79 1208.78 L1289.2 1208.78 L1288.61 1208.78 L1288.03 1208.78 L1287.44 1208.78 L1286.86 1208.78 L1286.27 1208.78 L1285.68 1208.78 L1285.1 1208.78 L1284.51 1208.78 L1283.92 1208.78 L1283.34 1208.78 L1282.75 1208.78 L1282.16 1208.78 L1281.58 1208.78 L1280.99 1208.78 L1280.4 1208.78 L1279.82 1208.78 L1279.23 1208.78 L1278.65 1208.78 L1278.06 1208.78 L1277.47 1208.78 L1276.89 1208.78 L1276.3 1208.78 L1275.71 1208.78 L1275.13 1208.78 L1274.54 1208.78 L1273.95 1208.78 L1273.37 1208.78 L1272.78 1208.78 L1272.19 1208.78 L1271.61 1208.78 L1271.02 1208.78 L1270.44 1208.78 L1269.85 1208.78 L1269.26 1208.78 L1268.68 1208.78 L1268.09 1208.78 L1267.5 1208.78 L1266.92 1208.78 L1266.33 1208.78 L1265.74 1208.78 L1265.16 1208.78 L1264.57 1208.78 L1263.98 1208.78 L1263.4 1208.78 L1262.81 1208.78 L1262.23 1208.78 L1261.64 1208.78 L1261.05 1208.78 L1260.47 1208.78 L1259.88 1208.78 L1259.29 1208.78 L1258.71 1208.78 L1258.12 1208.78 L1257.53 1208.78 L1256.95 1208.78 L1256.36 1208.78 L1255.78 1208.78 L1255.19 1208.78 L1254.6 1208.78 L1254.02 1208.78 L1253.43 1208.78 L1252.84 1208.78 L1252.26 1208.78 L1251.67 1208.78 L1251.08 1208.78 L1250.5 1208.78 L1249.91 1208.78 L1249.32 1208.78 L1248.74 1208.78 L1248.15 1208.78 L1247.57 1208.78 L1246.98 1208.78 L1246.39 1208.78 L1245.81 1208.78 L1245.22 1208.78 L1244.63 1208.78 L1244.05 1208.78 L1243.46 1208.78 L1242.87 1208.78 L1242.29 1208.78 L1241.7 1208.78 L1241.11 1208.78 L1240.53 1208.78 L1239.94 1208.78 L1239.36 1208.78 L1238.77 1208.78 L1238.18 1208.78 L1237.6 1208.78 L1237.01 1208.78 L1236.42 1208.78 L1235.84 1208.78 L1235.25 1208.78 L1234.66 1208.78 L1234.08 1208.78 L1233.49 1208.78 L1232.91 1208.78 L1232.32 1208.78 L1231.73 1208.78 L1231.15 1208.78 L1230.56 1208.78 L1229.97 1208.78 L1229.39 1208.78 L1228.8 1208.78 L1228.21 1208.78 L1227.63 1208.78 L1227.04 1208.78 L1226.45 1208.78 L1225.87 1208.78 L1225.28 1208.78 L1224.7 1208.78 L1224.11 1208.78 L1223.52 1208.78 L1222.94 1208.78 L1222.35 1208.78 L1221.76 1208.78 L1221.18 1208.78 L1220.59 1208.78 L1220 1208.78 L1219.42 1208.78 L1218.83 1208.78 L1218.24 1208.78 L1217.66 1208.78 L1217.07 1208.78 L1216.49 1208.78 L1215.9 1208.78 L1215.31 1208.78 L1214.73 1208.78 L1214.14 1208.78 L1213.55 1208.78 L1212.97 1208.78 L1212.38 1208.78 L1211.79 1208.78 L1211.21 1208.78 L1210.62 1208.78 L1210.03 1208.78 L1209.45 1208.78 L1208.86 1208.78 L1208.28 1208.78 L1207.69 1208.78 L1207.1 1208.78 L1206.52 1208.78 L1205.93 1208.78 L1205.34 1208.78 L1204.76 1208.78 L1204.17 1208.78 L1203.58 1208.78 L1203 1208.78 L1202.41 1208.78 L1201.83 1208.78 L1201.24 1208.78 L1200.65 1208.78 L1200.07 1208.78 L1199.48 1208.78 L1198.89 1208.78 L1198.31 1208.78 L1197.72 1208.78 L1197.13 1208.78 L1196.55 1208.78 L1195.96 1208.78 L1195.37 1208.78 L1194.79 1208.78 L1194.2 1208.78 L1193.62 1208.78 L1193.03 1208.78 L1192.44 1208.78 L1191.86 1208.78 L1191.27 1208.78 L1190.68 1208.78 L1190.1 1208.78 L1189.51 1208.78 L1188.92 1208.78 L1188.34 1208.78 L1187.75 1208.78 L1187.16 1208.78 L1186.58 1208.78 L1185.99 1208.78 L1185.41 1208.78 L1184.82 1208.78 L1184.23 1208.78 L1183.65 1208.78 L1183.06 1208.78 L1182.47 1208.78 L1181.89 1208.78 L1181.3 1208.78 L1180.71 1208.78 L1180.13 1208.78 L1179.54 1208.78 L1178.96 1208.78 L1178.37 1208.78 L1177.78 1208.78 L1177.2 1208.78 L1176.61 1208.78 L1176.02 1208.78 L1175.44 1208.78 L1174.85 1208.78 L1174.26 1208.78 L1173.68 1208.78 L1173.09 1208.78 L1172.5 1208.78 L1171.92 1208.78 L1171.33 1208.78 L1170.75 1208.78 L1170.16 1208.78 L1169.57 1208.78 L1168.99 1208.78 L1168.4 1208.78 L1167.81 1208.78 L1167.23 1208.78 L1166.64 1208.78 L1166.05 1208.78 L1165.47 1208.78 L1164.88 1208.78 L1164.29 1208.78 L1163.71 1208.78 L1163.12 1208.78 L1162.54 1208.78 L1161.95 1208.78 L1161.36 1208.78 L1160.78 1208.78 L1160.19 1208.78 L1159.6 1208.78 L1159.02 1208.78 L1158.43 1208.78 L1157.84 1208.78 L1157.26 1208.78 L1156.67 1208.78 L1156.09 1208.78 L1155.5 1208.78 L1154.91 1208.78 L1154.33 1208.78 L1153.74 1208.78 L1153.15 1208.78 L1152.57 1208.78 L1151.98 1208.78 L1151.39 1208.78 L1150.81 1208.78 L1150.22 1208.78 L1149.63 1208.78 L1149.05 1208.78 L1148.46 1208.78 L1147.88 1208.78 L1147.29 1208.78 L1146.7 1208.78 L1146.12 1208.78 L1145.53 1208.78 L1144.94 1208.78 L1144.36 1208.78 L1143.77 1208.78 L1143.18 1208.78 L1142.6 1208.78 L1142.01 1208.78 L1141.42 1208.78 L1140.84 1208.78 L1140.25 1208.78 L1139.67 1208.78 L1139.08 1208.78 L1138.49 1208.78 L1137.91 1208.78 L1137.32 1208.78 L1136.73 1208.78 L1136.15 1208.78 L1135.56 1208.78 L1134.97 1208.78 L1134.39 1208.78 L1133.8 1208.78 L1133.21 1208.78 L1132.63 1208.78 L1132.04 1208.78 L1131.46 1208.78 L1130.87 1208.78 L1130.28 1208.78 L1129.7 1208.78 L1129.11 1208.78 L1128.52 1208.78 L1127.94 1208.78 L1127.35 1208.78 L1126.76 1208.78 L1126.18 1208.78 L1125.59 1208.78 L1125.01 1208.78 L1124.42 1208.78 L1123.83 1208.78 L1123.25 1208.78 L1122.66 1208.78 L1122.07 1208.78 L1121.49 1208.78 L1120.9 1208.78 L1120.31 1208.78 L1119.73 1208.78 L1119.14 1208.78 L1118.55 1208.78 L1117.97 1208.78 L1117.38 1208.78 L1116.8 1208.78 L1116.21 1208.78 L1115.62 1208.78 L1115.04 1208.78 L1114.45 1208.78 L1113.86 1208.78 L1113.28 1208.78 L1112.69 1208.78 L1112.1 1208.78 L1111.52 1208.78 L1110.93 1208.78 L1110.34 1208.78 L1109.76 1208.78 L1109.17 1208.78 L1108.59 1208.78 L1108 1208.78 L1107.41 1208.78 L1106.83 1208.78 L1106.24 1208.78 L1105.65 1208.78 L1105.07 1208.78 L1104.48 1208.78 L1103.89 1208.78 L1103.31 1208.78 L1102.72 1208.78 L1102.14 1208.78 L1101.55 1208.78 L1100.96 1208.78 L1100.38 1208.78 L1099.79 1208.78 L1099.2 1208.78 L1098.62 1208.78 L1098.03 1208.78 L1097.44 1208.78 L1096.86 1208.78 L1096.27 1208.78 L1095.68 1208.78 L1095.1 1208.78 L1094.51 1208.78 L1093.93 1208.78 L1093.34 1208.78 L1092.75 1208.78 L1092.17 1208.78 L1091.58 1208.78 L1090.99 1208.78 L1090.41 1208.78 L1089.82 1208.78 L1089.23 1208.78 L1088.65 1208.78 L1088.06 1208.78 L1087.47 1208.78 L1086.89 1208.78 L1086.3 1208.78 L1085.72 1208.78 L1085.13 1208.78 L1084.54 1208.78 L1083.96 1208.78 L1083.37 1208.78 L1082.78 1208.78 L1082.2 1208.78 L1081.61 1208.78 L1081.02 1208.78 L1080.44 1208.78 L1079.85 1208.78 L1079.26 1208.78 L1078.68 1208.78 L1078.09 1208.78 L1077.51 1208.78 L1076.92 1208.78 L1076.33 1208.78 L1075.75 1208.78 L1075.16 1208.78 L1074.57 1208.78 L1073.99 1208.78 L1073.4 1208.78 L1072.81 1208.78 L1072.23 1208.78 L1071.64 1208.78 L1071.06 1208.78 L1070.47 1208.78 L1069.88 1208.78 L1069.3 1208.78 L1068.71 1208.78 L1068.12 1208.78 L1067.54 1208.78 L1066.95 1208.78 L1066.36 1208.78 L1065.78 1208.78 L1065.19 1208.78 L1064.6 1208.78 L1064.02 1208.78 L1063.43 1208.78 L1062.85 1208.78 L1062.26 1208.78 L1061.67 1208.78 L1061.09 1208.78 L1060.5 1208.78 L1059.91 1208.78 L1059.33 1208.78 L1058.74 1208.78 L1058.15 1208.78 L1057.57 1208.78 L1056.98 1208.78 L1056.39 1208.78 L1055.81 1208.78 L1055.22 1208.78 L1054.64 1208.78 L1054.05 1208.78 L1053.46 1208.78 L1052.88 1208.78 L1052.29 1208.78 L1051.7 1208.78 L1051.12 1208.78 L1050.53 1208.78 L1049.94 1208.78 L1049.36 1208.78 L1048.77 1208.78 L1048.19 1208.78 L1047.6 1208.78 L1047.01 1208.78 L1046.43 1208.78 L1045.84 1208.78 L1045.25 1208.78 L1044.67 1208.78 L1044.08 1208.78 L1043.49 1208.78 L1042.91 1208.78 L1042.32 1208.78 L1041.73 1208.78 L1041.15 1208.78 L1040.56 1208.78 L1039.98 1208.78 L1039.39 1208.78 L1038.8 1208.78 L1038.22 1208.78 L1037.63 1208.78 L1037.04 1208.78 L1036.46 1208.78 L1035.87 1208.78 L1035.28 1208.78 L1034.7 1208.78 L1034.11 1208.78 L1033.52 1208.78 L1032.94 1208.78 L1032.35 1208.78 L1031.77 1208.78 L1031.18 1208.78 L1030.59 1208.78 L1030.01 1208.78 L1029.42 1208.78 L1028.83 1208.78 L1028.25 1208.78 L1027.66 1208.78 L1027.07 1208.78 L1026.49 1208.78 L1025.9 1208.78 L1025.32 1208.78 L1024.73 1208.78 L1024.14 1208.78 L1023.56 1208.78 L1022.97 1208.78 L1022.38 1208.78 L1021.8 1208.78 L1021.21 1208.78 L1020.62 1208.78 L1020.04 1208.78 L1019.45 1208.78 L1018.86 1208.78 L1018.28 1208.78 L1017.69 1208.78 L1017.11 1208.78 L1016.52 1208.78 L1015.93 1208.78 L1015.35 1208.78 L1014.76 1208.78 L1014.17 1208.78 L1013.59 1208.78 L1013 1208.78 L1012.41 1208.78 L1011.83 1208.78 L1011.24 1208.78 L1010.65 1208.78 L1010.07 1208.78 L1009.48 1208.78 L1008.9 1208.78 L1008.31 1208.78 L1007.72 1208.78 L1007.14 1208.78 L1006.55 1208.78 L1005.96 1208.78 L1005.38 1208.78 L1004.79 1208.78 L1004.2 1208.78 L1003.62 1208.78 L1003.03 1208.78 L1002.44 1208.78 L1001.86 1208.78 L1001.27 1208.78 L1000.69 1208.78 L1000.1 1208.78 L999.513 1208.78 L998.926 1208.78 L998.34 1208.78 L997.754 1208.78 L997.167 1208.78 L996.581 1208.78 L995.994 1208.78 L995.408 1208.78 L994.822 1208.78 L994.235 1208.78 L993.649 1208.78 L993.062 1208.78 L992.476 1208.78 L991.889 1208.78 L991.303 1208.78 L990.717 1208.78 L990.13 1208.78 L989.544 1208.78 L988.957 1208.78 L988.371 1208.78 L987.785 1208.78 L987.198 1208.78 L986.612 1208.78 L986.025 1208.78  Z\" fill=\"#e26f46\" fill-rule=\"evenodd\" fill-opacity=\"0.5\"/>\n<polyline clip-path=\"url(#clip482)\" style=\"stroke:#e26f46; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"986.025,1209.13 986.612,1209.13 987.198,1209.13 987.785,1209.13 988.371,1209.13 988.957,1209.13 989.544,1209.13 990.13,1209.13 990.717,1209.13 991.303,1209.13 991.889,1209.13 992.476,1209.13 993.062,1209.13 993.649,1209.13 994.235,1209.13 994.822,1209.13 995.408,1209.13 995.994,1209.13 996.581,1209.13 997.167,1209.13 997.754,1209.13 998.34,1209.13 998.926,1209.13 999.513,1209.13 1000.1,1209.13 1000.69,1209.13 1001.27,1209.13 1001.86,1209.13 1002.44,1209.13 1003.03,1209.13 1003.62,1209.13 1004.2,1209.13 1004.79,1209.13 1005.38,1209.13 1005.96,1209.13 1006.55,1209.13 1007.14,1209.13 1007.72,1209.13 1008.31,1209.13 1008.9,1209.13 1009.48,1209.13 1010.07,1209.13 1010.65,1209.13 1011.24,1209.13 1011.83,1209.13 1012.41,1209.13 1013,1209.13 1013.59,1209.13 1014.17,1209.13 1014.76,1209.13 1015.35,1209.13 1015.93,1209.13 1016.52,1209.13 1017.11,1209.13 1017.69,1209.13 1018.28,1209.13 1018.86,1209.13 1019.45,1209.13 1020.04,1209.13 1020.62,1209.13 1021.21,1209.13 1021.8,1209.13 1022.38,1209.13 1022.97,1209.13 1023.56,1209.13 1024.14,1209.13 1024.73,1209.13 1025.32,1209.13 1025.9,1209.13 1026.49,1209.13 1027.07,1209.13 1027.66,1209.13 1028.25,1209.13 1028.83,1209.13 1029.42,1209.13 1030.01,1209.13 1030.59,1209.13 1031.18,1209.13 1031.77,1209.13 1032.35,1209.13 1032.94,1209.13 1033.52,1209.13 1034.11,1209.13 1034.7,1209.13 1035.28,1209.13 1035.87,1209.13 1036.46,1209.13 1037.04,1209.13 1037.63,1209.13 1038.22,1209.13 1038.8,1209.13 1039.39,1209.13 1039.98,1209.13 1040.56,1209.13 1041.15,1209.13 1041.73,1209.13 1042.32,1209.13 1042.91,1209.13 1043.49,1209.13 1044.08,1209.13 1044.67,1209.13 1045.25,1209.13 1045.84,1209.13 1046.43,1209.13 1047.01,1209.13 1047.6,1209.13 1048.19,1209.13 1048.77,1209.13 1049.36,1209.13 1049.94,1209.13 1050.53,1209.13 1051.12,1209.13 1051.7,1209.13 1052.29,1209.13 1052.88,1209.13 1053.46,1209.13 1054.05,1209.13 1054.64,1209.13 1055.22,1209.13 1055.81,1209.13 1056.39,1209.13 1056.98,1209.13 1057.57,1209.13 1058.15,1209.13 1058.74,1209.13 1059.33,1209.13 1059.91,1209.13 1060.5,1209.13 1061.09,1209.13 1061.67,1209.13 1062.26,1209.13 1062.85,1209.13 1063.43,1209.13 1064.02,1209.13 1064.6,1209.13 1065.19,1209.13 1065.78,1209.13 1066.36,1209.13 1066.95,1209.13 1067.54,1209.13 1068.12,1209.13 1068.71,1209.13 1069.3,1209.13 1069.88,1209.13 1070.47,1209.13 1071.06,1209.13 1071.64,1209.13 1072.23,1209.13 1072.81,1209.13 1073.4,1209.13 1073.99,1209.13 1074.57,1209.13 1075.16,1209.13 1075.75,1209.13 1076.33,1209.13 1076.92,1209.13 1077.51,1209.13 1078.09,1209.13 1078.68,1209.13 1079.26,1209.13 1079.85,1209.13 1080.44,1209.13 1081.02,1209.13 1081.61,1209.13 1082.2,1209.13 1082.78,1209.13 1083.37,1209.13 1083.96,1209.13 1084.54,1209.13 1085.13,1209.13 1085.72,1209.13 1086.3,1209.13 1086.89,1209.13 1087.47,1209.13 1088.06,1209.13 1088.65,1209.13 1089.23,1209.13 1089.82,1209.13 1090.41,1209.13 1090.99,1209.13 1091.58,1209.13 1092.17,1209.13 1092.75,1209.13 1093.34,1209.13 1093.93,1209.13 1094.51,1209.13 1095.1,1209.13 1095.68,1209.13 1096.27,1209.13 1096.86,1209.13 1097.44,1209.13 1098.03,1209.13 1098.62,1209.13 1099.2,1209.13 1099.79,1209.13 1100.38,1209.13 1100.96,1209.13 1101.55,1209.13 1102.14,1209.13 1102.72,1209.13 1103.31,1209.13 1103.89,1209.13 1104.48,1209.13 1105.07,1209.13 1105.65,1209.13 1106.24,1209.13 1106.83,1209.13 1107.41,1209.13 1108,1209.13 1108.59,1209.13 1109.17,1209.13 1109.76,1209.13 1110.34,1209.13 1110.93,1209.13 1111.52,1209.13 1112.1,1209.13 1112.69,1209.13 1113.28,1209.13 1113.86,1209.13 1114.45,1209.13 1115.04,1209.13 1115.62,1209.13 1116.21,1209.13 1116.8,1209.13 1117.38,1209.13 1117.97,1209.13 1118.55,1209.13 1119.14,1209.13 1119.73,1209.13 1120.31,1209.13 1120.9,1209.13 1121.49,1209.13 1122.07,1209.13 1122.66,1209.13 1123.25,1209.13 1123.83,1209.13 1124.42,1209.13 1125.01,1209.13 1125.59,1209.13 1126.18,1209.13 1126.76,1209.13 1127.35,1209.13 1127.94,1209.13 1128.52,1209.13 1129.11,1209.13 1129.7,1209.13 1130.28,1209.13 1130.87,1209.13 1131.46,1209.13 1132.04,1209.13 1132.63,1209.13 1133.21,1209.13 1133.8,1209.13 1134.39,1209.13 1134.97,1209.13 1135.56,1209.13 1136.15,1209.13 1136.73,1209.13 1137.32,1209.13 1137.91,1209.13 1138.49,1209.13 1139.08,1209.13 1139.67,1209.13 1140.25,1209.13 1140.84,1209.13 1141.42,1209.13 1142.01,1209.13 1142.6,1209.13 1143.18,1209.13 1143.77,1209.13 1144.36,1209.13 1144.94,1209.13 1145.53,1209.13 1146.12,1209.13 1146.7,1209.13 1147.29,1209.13 1147.88,1209.13 1148.46,1209.13 1149.05,1209.13 1149.63,1209.13 1150.22,1209.13 1150.81,1209.13 1151.39,1209.13 1151.98,1209.13 1152.57,1209.13 1153.15,1209.13 1153.74,1209.13 1154.33,1209.13 1154.91,1209.13 1155.5,1209.13 1156.09,1209.13 1156.67,1209.13 1157.26,1209.13 1157.84,1209.13 1158.43,1209.13 1159.02,1209.13 1159.6,1209.13 1160.19,1209.13 1160.78,1209.13 1161.36,1209.13 1161.95,1209.13 1162.54,1209.13 1163.12,1209.13 1163.71,1209.13 1164.29,1209.13 1164.88,1209.13 1165.47,1209.13 1166.05,1209.13 1166.64,1209.13 1167.23,1209.13 1167.81,1209.13 1168.4,1209.13 1168.99,1209.13 1169.57,1209.13 1170.16,1209.13 1170.75,1209.13 1171.33,1209.13 1171.92,1209.13 1172.5,1209.13 1173.09,1209.13 1173.68,1209.13 1174.26,1209.13 1174.85,1209.13 1175.44,1209.13 1176.02,1209.13 1176.61,1209.13 1177.2,1209.13 1177.78,1209.13 1178.37,1209.13 1178.96,1209.13 1179.54,1209.13 1180.13,1209.13 1180.71,1209.13 1181.3,1209.13 1181.89,1209.13 1182.47,1209.13 1183.06,1209.13 1183.65,1209.13 1184.23,1209.13 1184.82,1209.13 1185.41,1209.13 1185.99,1209.13 1186.58,1209.13 1187.16,1209.13 1187.75,1209.13 1188.34,1209.13 1188.92,1209.13 1189.51,1209.13 1190.1,1209.13 1190.68,1209.13 1191.27,1209.13 1191.86,1209.13 1192.44,1209.13 1193.03,1209.13 1193.62,1209.13 1194.2,1209.13 1194.79,1209.13 1195.37,1209.13 1195.96,1209.13 1196.55,1209.13 1197.13,1209.13 1197.72,1209.13 1198.31,1209.13 1198.89,1209.13 1199.48,1209.13 1200.07,1209.13 1200.65,1209.13 1201.24,1209.13 1201.83,1209.13 1202.41,1209.13 1203,1209.13 1203.58,1209.13 1204.17,1209.13 1204.76,1209.13 1205.34,1209.13 1205.93,1209.13 1206.52,1209.13 1207.1,1209.13 1207.69,1209.13 1208.28,1209.13 1208.86,1209.13 1209.45,1209.13 1210.03,1209.13 1210.62,1209.13 1211.21,1209.13 1211.79,1209.13 1212.38,1209.13 1212.97,1209.13 1213.55,1209.13 1214.14,1209.13 1214.73,1209.13 1215.31,1209.13 1215.9,1209.13 1216.49,1209.13 1217.07,1209.13 1217.66,1209.13 1218.24,1209.13 1218.83,1209.13 1219.42,1209.13 1220,1209.13 1220.59,1209.13 1221.18,1209.13 1221.76,1209.13 1222.35,1209.13 1222.94,1209.13 1223.52,1209.13 1224.11,1209.13 1224.7,1209.13 1225.28,1209.13 1225.87,1209.13 1226.45,1209.13 1227.04,1209.13 1227.63,1209.13 1228.21,1209.13 1228.8,1209.13 1229.39,1209.13 1229.97,1209.13 1230.56,1209.13 1231.15,1209.13 1231.73,1209.13 1232.32,1209.13 1232.91,1209.13 1233.49,1209.13 1234.08,1209.13 1234.66,1209.13 1235.25,1209.13 1235.84,1209.13 1236.42,1209.13 1237.01,1209.13 1237.6,1209.13 1238.18,1209.13 1238.77,1209.13 1239.36,1209.13 1239.94,1209.13 1240.53,1209.13 1241.11,1209.13 1241.7,1209.13 1242.29,1209.13 1242.87,1209.13 1243.46,1209.13 1244.05,1209.13 1244.63,1209.13 1245.22,1209.13 1245.81,1209.13 1246.39,1209.13 1246.98,1209.13 1247.57,1209.13 1248.15,1209.13 1248.74,1209.13 1249.32,1209.13 1249.91,1209.13 1250.5,1209.13 1251.08,1209.13 1251.67,1209.13 1252.26,1209.13 1252.84,1209.13 1253.43,1209.13 1254.02,1209.13 1254.6,1209.13 1255.19,1209.13 1255.78,1209.13 1256.36,1209.13 1256.95,1209.13 1257.53,1209.13 1258.12,1209.13 1258.71,1209.13 1259.29,1209.13 1259.88,1209.13 1260.47,1209.13 1261.05,1209.13 1261.64,1209.13 1262.23,1209.13 1262.81,1209.13 1263.4,1209.13 1263.98,1209.13 1264.57,1209.13 1265.16,1209.13 1265.74,1209.13 1266.33,1209.13 1266.92,1209.13 1267.5,1209.13 1268.09,1209.13 1268.68,1209.13 1269.26,1209.13 1269.85,1209.13 1270.44,1209.13 1271.02,1209.13 1271.61,1209.13 1272.19,1209.13 1272.78,1209.13 1273.37,1209.13 1273.95,1209.13 1274.54,1209.13 1275.13,1209.13 1275.71,1209.13 1276.3,1209.13 1276.89,1209.13 1277.47,1209.13 1278.06,1209.13 1278.65,1209.13 1279.23,1209.13 1279.82,1209.13 1280.4,1209.13 1280.99,1209.13 1281.58,1209.13 1282.16,1209.13 1282.75,1209.13 1283.34,1209.13 1283.92,1209.13 1284.51,1209.13 1285.1,1209.13 1285.68,1209.13 1286.27,1209.13 1286.86,1209.13 1287.44,1209.13 1288.03,1209.13 1288.61,1209.13 1289.2,1209.13 1289.79,1209.13 1290.37,1209.13 1290.96,1209.13 1291.55,1209.13 1292.13,1209.13 1292.72,1209.13 1293.31,1209.13 1293.89,1209.13 1294.48,1209.13 1295.06,1209.13 1295.65,1209.13 1296.24,1209.13 1296.82,1209.13 1297.41,1209.13 1298,1209.13 1298.58,1209.13 1299.17,1209.13 1299.76,1209.13 1300.34,1209.13 1300.93,1209.13 1301.52,1209.13 1302.1,1209.13 1302.69,1209.13 1303.27,1209.13 1303.86,1209.13 1304.45,1209.13 1305.03,1209.13 1305.62,1209.13 1306.21,1209.13 1306.79,1209.13 1307.38,1209.13 1307.97,1209.13 1308.55,1209.13 1309.14,1209.13 1309.73,1209.13 1310.31,1209.13 1310.9,1209.13 1311.48,1209.13 1312.07,1209.13 1312.66,1209.13 1313.24,1209.13 1313.83,1209.13 1314.42,1209.13 1315,1209.13 1315.59,1209.13 1316.18,1209.13 1316.76,1209.13 1317.35,1209.13 1317.93,1209.13 1318.52,1209.13 1319.11,1209.13 1319.69,1209.13 1320.28,1209.13 1320.87,1209.13 1321.45,1209.13 1322.04,1209.13 1322.63,1209.13 1323.21,1209.13 1323.8,1209.13 1324.39,1209.13 1324.97,1209.13 1325.56,1209.13 1326.14,1209.13 1326.73,1209.13 1327.32,1209.13 1327.9,1209.13 1328.49,1209.13 1329.08,1209.13 1329.66,1209.13 1330.25,1209.13 1330.84,1209.13 1331.42,1209.13 1332.01,1209.13 1332.6,1209.13 1333.18,1209.13 1333.77,1209.13 1334.35,1209.13 1334.94,1209.13 1335.53,1209.13 1336.11,1209.13 1336.7,1209.13 1337.29,1209.13 1337.87,1209.13 1338.46,1209.13 1339.05,1209.13 1339.63,1209.13 1340.22,1209.13 1340.8,1209.13 1341.39,1209.13 1341.98,1209.13 1342.56,1209.13 1343.15,1209.13 1343.74,1209.13 1344.32,1209.13 1344.91,1209.13 1345.5,1209.13 1346.08,1209.13 1346.67,1209.13 1347.26,1209.13 1347.84,1209.13 1348.43,1209.13 1349.01,1209.13 1349.6,1209.13 1350.19,1209.13 1350.77,1209.13 1351.36,1209.13 1351.95,1209.13 1352.53,1209.13 1353.12,1209.13 1353.71,1209.13 1354.29,1209.13 1354.88,1209.13 1355.47,1209.13 1356.05,1209.13 1356.64,1209.13 1357.22,1209.13 1357.81,1209.13 1358.4,1209.13 1358.98,1209.13 1359.57,1209.13 1360.16,1209.13 1360.74,1209.13 1361.33,1209.13 1361.92,1209.13 1362.5,1209.13 1363.09,1209.13 1363.68,1209.13 1364.26,1209.13 1364.85,1209.13 1365.43,1209.13 1366.02,1209.13 1366.61,1209.13 1367.19,1209.13 1367.78,1209.13 1368.37,1209.13 1368.95,1209.13 1369.54,1209.13 1370.13,1209.13 1370.71,1209.13 1371.3,1209.13 1371.88,1209.13 1372.47,1209.13 1373.06,1209.13 1373.64,1209.13 1374.23,1209.13 1374.82,1209.13 1375.4,1209.13 1375.99,1209.13 1376.58,1209.13 1377.16,1209.13 1377.75,1209.13 1378.34,1209.13 1378.92,1209.13 1379.51,1209.13 1380.09,1209.13 1380.68,1209.13 1381.27,1209.13 1381.85,1209.13 1382.44,1209.13 1383.03,1209.13 1383.61,1209.13 1384.2,1209.13 1384.79,1209.13 1385.37,1209.13 1385.96,1209.13 1386.55,1209.13 1387.13,1209.13 1387.72,1209.13 1388.3,1209.13 1388.89,1209.13 1389.48,1209.13 1390.06,1209.13 1390.65,1209.13 1391.24,1209.13 1391.82,1209.13 1392.41,1209.13 1393,1209.13 1393.58,1209.13 1394.17,1209.13 1394.75,1209.13 1395.34,1209.13 1395.93,1209.13 1396.51,1209.13 1397.1,1209.13 1397.69,1209.13 1398.27,1209.13 1398.86,1209.13 1399.45,1209.13 1400.03,1209.13 1400.62,1209.13 1401.21,1209.13 1401.79,1209.13 1402.38,1209.13 1402.96,1209.13 1403.55,1209.13 1404.14,1209.13 1404.72,1209.13 1405.31,1209.13 1405.9,1209.13 1406.48,1209.13 1407.07,1209.13 1407.66,1209.13 1408.24,1209.13 1408.83,1209.13 1409.42,1209.13 1410,1209.13 1410.59,1209.13 1411.17,1209.13 1411.76,1209.13 1412.35,1209.13 1412.93,1209.13 1413.52,1209.13 1414.11,1209.13 1414.69,1209.13 1415.28,1209.13 1415.87,1209.13 1416.45,1209.13 1417.04,1209.13 1417.63,1209.13 1418.21,1209.13 1418.8,1209.13 1419.38,1209.13 1419.97,1209.13 1420.56,1209.13 1421.14,1209.13 1421.73,1209.13 1422.32,1209.13 1422.9,1209.13 1423.49,1209.13 1424.08,1209.13 1424.66,1209.13 1425.25,1209.13 1425.83,1209.13 1426.42,1209.13 1427.01,1209.13 1427.59,1209.13 1428.18,1209.13 1428.77,1209.13 1429.35,1209.13 1429.94,1209.13 1430.53,1209.13 1431.11,1209.13 1431.7,1209.13 1432.29,1209.13 1432.87,1209.13 1433.46,1209.13 1434.04,1209.13 1434.63,1209.13 1435.22,1209.13 1435.8,1209.13 1436.39,1209.13 1436.98,1209.13 1437.56,1209.13 1438.15,1209.13 1438.74,1209.13 1439.32,1209.13 1439.91,1209.13 1440.5,1209.13 1441.08,1209.13 1441.67,1209.13 1442.25,1209.13 1442.84,1209.13 1443.43,1209.13 1444.01,1209.13 1444.6,1209.13 1445.19,1209.13 1445.77,1209.13 1446.36,1209.13 1446.95,1209.13 1447.53,1209.13 1448.12,1209.13 1448.7,1209.13 1449.29,1209.13 1449.88,1209.13 1450.46,1209.13 1451.05,1209.13 1451.64,1209.13 1452.22,1209.13 1452.81,1209.13 1453.4,1209.13 1453.98,1209.13 1454.57,1209.13 1455.16,1209.13 1455.74,1209.13 1456.33,1209.13 1456.91,1209.13 1457.5,1209.13 1458.09,1209.13 1458.67,1209.13 1459.26,1209.13 1459.85,1209.13 1460.43,1209.13 1461.02,1209.13 1461.61,1209.13 1462.19,1209.13 1462.78,1209.13 1463.37,1209.13 1463.95,1209.13 1464.54,1209.13 1465.12,1209.13 1465.71,1209.13 1466.3,1209.13 1466.88,1209.13 1467.47,1209.13 1468.06,1209.13 1468.64,1209.13 1469.23,1209.13 1469.82,1209.13 1470.4,1209.13 1470.99,1209.13 1471.57,1209.13 1472.16,1209.13 1472.75,1209.13 1473.33,1209.13 1473.92,1209.13 1474.51,1209.13 1475.09,1209.13 1475.68,1209.13 1476.27,1209.13 1476.85,1209.13 1477.44,1209.13 1478.03,1209.13 1478.61,1209.13 1479.2,1209.13 1479.78,1209.13 1480.37,1209.13 1480.96,1209.13 1481.54,1209.13 1482.13,1209.13 1482.72,1209.13 1483.3,1209.13 1483.89,1209.13 1484.48,1209.13 1485.06,1209.13 1485.65,1209.13 1486.24,1209.13 1486.82,1209.13 1487.41,1209.13 1487.99,1209.13 1488.58,1209.13 1489.17,1209.13 1489.75,1209.13 1490.34,1209.13 1490.93,1209.13 1491.51,1209.13 1492.1,1209.13 1492.69,1209.13 1493.27,1209.13 1493.86,1209.13 1494.45,1209.13 1495.03,1209.13 1495.62,1209.13 1496.2,1209.13 1496.79,1209.13 1497.38,1209.13 1497.96,1209.13 1498.55,1209.13 1499.14,1209.13 1499.72,1209.13 1500.31,1209.13 1500.9,1209.13 1501.48,1209.13 1502.07,1209.13 1502.65,1209.13 1503.24,1209.13 1503.83,1209.13 1504.41,1209.13 1505,1209.13 1505.59,1209.13 1506.17,1209.13 1506.76,1209.13 1507.35,1209.13 1507.93,1209.13 1508.52,1209.13 1509.11,1209.13 1509.69,1209.13 1510.28,1209.13 1510.86,1209.13 1511.45,1209.13 1512.04,1209.13 1512.62,1209.13 1513.21,1209.13 1513.8,1209.13 1514.38,1209.13 1514.97,1209.13 1515.56,1209.13 1516.14,1209.13 1516.73,1209.13 1517.32,1209.13 1517.9,1209.13 1518.49,1209.13 1519.07,1209.13 1519.66,1209.13 1520.25,1209.13 1520.83,1209.13 1521.42,1209.13 1522.01,1209.13 1522.59,1209.13 1523.18,1209.13 1523.77,1209.13 1524.35,1209.13 1524.94,1209.13 1525.52,1209.13 1526.11,1209.13 1526.7,1209.13 1527.28,1209.13 1527.87,1209.13 1528.46,1209.13 1529.04,1209.13 1529.63,1209.13 1530.22,1209.13 1530.8,1209.13 1531.39,1209.13 1531.98,1209.13 1532.56,1209.13 1533.15,1209.13 1533.73,1209.13 1534.32,1209.13 1534.91,1209.13 1535.49,1209.13 1536.08,1209.13 1536.67,1209.13 1537.25,1209.13 1537.84,1209.13 1538.43,1209.13 1539.01,1209.13 1539.6,1209.13 1540.19,1209.13 1540.77,1209.13 1541.36,1209.13 1541.94,1209.13 1542.53,1209.13 1543.12,1209.13 1543.7,1209.13 1544.29,1209.13 1544.88,1209.13 1545.46,1209.13 1546.05,1209.13 1546.64,1209.13 1547.22,1209.13 1547.81,1209.13 1548.4,1209.13 1548.98,1209.13 1549.57,1209.13 1550.15,1209.13 1550.74,1209.13 1551.33,1209.13 1551.91,1209.13 1552.5,1209.13 1553.09,1209.13 1553.67,1209.13 1554.26,1209.13 1554.85,1209.13 1555.43,1209.13 1556.02,1209.13 1556.6,1209.13 1557.19,1209.13 1557.78,1209.13 1558.36,1209.13 1558.95,1209.13 1559.54,1209.13 1560.12,1209.13 1560.71,1209.13 1561.3,1209.13 1561.88,1209.13 1562.47,1209.13 1563.06,1209.13 1563.64,1209.13 1564.23,1209.13 1564.81,1209.13 1565.4,1209.13 1565.99,1209.13 1566.57,1209.13 1567.16,1209.13 1567.75,1209.13 1568.33,1209.13 1568.92,1209.13 1569.51,1209.13 1570.09,1209.13 1570.68,1209.13 1571.27,1209.13 1571.85,1209.13 1572.44,1209.13 1573.02,1209.13 1573.61,1209.13 1574.2,1209.13 1574.78,1209.13 1575.37,1209.13 1575.96,1209.13 1576.54,1209.13 1577.13,1209.13 1577.72,1209.13 1578.3,1209.13 1578.89,1209.13 1579.47,1209.13 1580.06,1209.13 1580.65,1209.13 1581.23,1209.13 1581.82,1209.13 1582.41,1209.13 1582.99,1209.13 1583.58,1209.13 1584.17,1209.13 1584.75,1209.13 1585.34,1209.13 1585.93,1209.13 1586.51,1209.13 1587.1,1209.13 1587.68,1209.13 1588.27,1209.13 1588.86,1209.13 1589.44,1209.13 1590.03,1209.13 1590.62,1209.13 1591.2,1209.13 1591.79,1209.13 1592.38,1209.13 1592.96,1209.13 1593.55,1209.13 1594.14,1209.13 1594.72,1209.13 1595.31,1209.13 1595.89,1209.13 1596.48,1209.13 1597.07,1209.13 1597.65,1209.13 1598.24,1209.13 1598.83,1209.13 1599.41,1209.13 1600,1209.13 1600.59,1209.13 1601.17,1209.13 1601.76,1209.13 1602.34,1209.13 1602.93,1209.13 1603.52,1209.13 1604.1,1209.13 1604.69,1209.13 1605.28,1209.13 1605.86,1209.13 1606.45,1209.13 1607.04,1209.13 1607.62,1209.13 1608.21,1209.13 1608.8,1209.13 1609.38,1209.13 1609.97,1209.13 1610.55,1209.13 1611.14,1209.13 1611.73,1209.13 1612.31,1209.13 1612.9,1209.13 1613.49,1209.13 1614.07,1209.13 1614.66,1209.13 1615.25,1209.13 1615.83,1209.13 1616.42,1209.13 1617.01,1209.13 1617.59,1209.13 1618.18,1209.13 1618.76,1209.13 1619.35,1209.13 1619.94,1209.13 1620.52,1209.13 1621.11,1209.13 1621.7,1209.13 1622.28,1209.13 1622.87,1209.13 1623.46,1209.13 1624.04,1209.13 1624.63,1209.13 1625.22,1209.13 1625.8,1209.13 1626.39,1209.13 1626.97,1209.13 1627.56,1209.13 1628.15,1209.13 1628.73,1209.13 1629.32,1209.13 1629.91,1209.13 1630.49,1209.13 1631.08,1209.13 1631.67,1209.13 1632.25,1209.13 1632.84,1209.13 1633.42,1209.13 1634.01,1209.13 1634.6,1209.13 1635.18,1209.13 1635.77,1209.13 1636.36,1209.13 1636.94,1209.13 1637.53,1209.13 1638.12,1209.13 1638.7,1209.13 1639.29,1209.13 1639.88,1209.13 1640.46,1209.13 1641.05,1209.13 1641.63,1209.13 1642.22,1209.13 1642.81,1209.13 1643.39,1209.13 1643.98,1209.13 1644.57,1209.13 1645.15,1209.13 1645.74,1209.13 1646.33,1209.13 1646.91,1209.13 1647.5,1209.13 1648.09,1209.13 1648.67,1209.13 1649.26,1209.13 1649.84,1209.13 1650.43,1209.13 1651.02,1209.13 1651.6,1209.13 1652.19,1209.13 1652.78,1209.13 1653.36,1209.13 1653.95,1209.13 1654.54,1209.13 1655.12,1209.13 1655.71,1209.13 1656.29,1209.13 1656.88,1209.13 1657.47,1209.13 1658.05,1209.13 1658.64,1209.13 1659.23,1209.13 1659.81,1209.13 1660.4,1209.13 1660.99,1209.13 1661.57,1209.13 1662.16,1209.13 1662.75,1209.13 1663.33,1209.13 1663.92,1209.13 1664.5,1209.13 1665.09,1209.13 1665.68,1209.13 1666.26,1209.13 1666.85,1209.13 1667.44,1209.13 1668.02,1209.13 1668.61,1209.13 1669.2,1209.13 1669.78,1209.13 1670.37,1209.13 1670.96,1209.13 1671.54,1209.13 1672.13,1209.13 1672.71,1209.13 1673.3,1209.13 1673.89,1209.13 1674.47,1209.13 1675.06,1209.13 1675.65,1209.13 1676.23,1209.13 1676.82,1209.13 1677.41,1209.13 1677.99,1209.13 1678.58,1209.13 1679.17,1209.13 1679.75,1209.13 1680.34,1209.13 1680.92,1209.13 1681.51,1209.13 1682.1,1209.13 1682.68,1209.13 1683.27,1209.13 1683.86,1209.13 1684.44,1209.13 1685.03,1209.13 1685.62,1209.13 1686.2,1209.13 1686.79,1209.13 1687.37,1209.13 1687.96,1209.13 1688.55,1209.13 1689.13,1209.13 1689.72,1209.13 1690.31,1209.13 1690.89,1209.13 1691.48,1209.13 1692.07,1209.13 1692.65,1209.13 1693.24,1209.13 1693.83,1209.13 1694.41,1209.13 1695,1209.13 1695.58,1209.13 1696.17,1209.13 1696.76,1209.13 1697.34,1209.13 1697.93,1209.13 1698.52,1209.13 1699.1,1209.13 1699.69,1209.13 1700.28,1209.13 1700.86,1209.13 1701.45,1209.13 1702.04,1209.13 1702.62,1209.13 1703.21,1209.13 1703.79,1209.13 1704.38,1209.13 1704.97,1209.13 1705.55,1209.13 1706.14,1209.13 1706.73,1209.13 1707.31,1209.13 1707.9,1209.13 1708.49,1209.13 1709.07,1209.13 1709.66,1209.13 1710.24,1209.13 1710.83,1209.13 1711.42,1209.13 1712,1209.13 1712.59,1209.13 1713.18,1209.13 1713.76,1209.13 1714.35,1209.13 1714.94,1209.13 1715.52,1209.13 1716.11,1209.13 1716.7,1209.13 1717.28,1209.13 1717.87,1209.13 1718.45,1209.13 1719.04,1209.13 1719.63,1209.13 1720.21,1209.13 1720.8,1209.13 1721.39,1209.13 1721.97,1209.13 1722.56,1209.13 1723.15,1209.13 1723.73,1209.13 1724.32,1209.13 1724.91,1209.13 1725.49,1209.13 1726.08,1209.13 1726.66,1209.13 1727.25,1209.13 1727.84,1209.13 1728.42,1209.13 1729.01,1209.13 1729.6,1209.13 1730.18,1209.13 1730.77,1209.13 1731.36,1209.13 1731.94,1209.13 1732.53,1209.13 1733.11,1209.13 1733.7,1209.13 1734.29,1209.13 1734.87,1209.13 1735.46,1209.13 1736.05,1209.13 1736.63,1209.13 1737.22,1209.13 1737.81,1209.13 1738.39,1209.13 1738.98,1209.13 1739.57,1209.13 1740.15,1209.13 1740.74,1209.13 1741.32,1209.13 1741.91,1209.13 1742.5,1209.13 1743.08,1209.13 1743.67,1209.13 1744.26,1209.13 1744.84,1209.13 1745.43,1209.13 1746.02,1209.13 1746.6,1209.13 1747.19,1209.13 1747.78,1209.13 1748.36,1209.13 1748.95,1209.13 1749.53,1209.13 1750.12,1209.13 1750.71,1209.13 1751.29,1209.13 1751.88,1209.13 1752.47,1209.13 1753.05,1209.13 1753.64,1209.13 1754.23,1209.13 1754.81,1209.13 1755.4,1209.13 1755.99,1209.13 1756.57,1209.13 1757.16,1209.13 1757.74,1209.13 1758.33,1209.13 1758.92,1209.13 1759.5,1209.13 1760.09,1209.13 1760.68,1209.13 1761.26,1209.13 1761.85,1209.13 1762.44,1209.13 1763.02,1209.13 1763.61,1209.13 1764.19,1209.13 1764.78,1209.13 1765.37,1209.13 1765.95,1209.13 1766.54,1209.13 1767.13,1209.13 1767.71,1209.13 1768.3,1209.13 1768.89,1209.13 1769.47,1209.13 1770.06,1209.13 1770.65,1209.13 1771.23,1209.13 1771.82,1209.13 1772.4,1209.13 1772.99,1209.13 1773.58,1209.13 1774.16,1209.13 1774.75,1209.13 1775.34,1209.13 1775.92,1209.13 1776.51,1209.13 1777.1,1209.13 1777.68,1209.13 1778.27,1209.13 1778.86,1209.13 1779.44,1209.13 1780.03,1209.13 1780.61,1209.13 1781.2,1209.13 1781.79,1209.13 1782.37,1209.13 1782.96,1209.13 1783.55,1209.13 1784.13,1209.13 1784.72,1209.13 1785.31,1209.13 1785.89,1209.13 1786.48,1209.13 1787.06,1209.13 1787.65,1209.13 1788.24,1209.13 1788.82,1209.13 1789.41,1209.13 1790,1209.13 1790.58,1209.13 1791.17,1209.13 1791.76,1209.13 1792.34,1209.13 1792.93,1209.13 1793.52,1209.13 1794.1,1209.13 1794.69,1209.13 1795.27,1209.13 1795.86,1209.13 1796.45,1209.13 1797.03,1209.13 1797.62,1209.13 1798.21,1209.13 1798.79,1209.13 1799.38,1209.13 1799.97,1209.13 1800.55,1209.13 1801.14,1209.13 1801.73,1209.13 1802.31,1209.13 1802.9,1209.13 1803.48,1209.13 1804.07,1209.13 1804.66,1209.13 1805.24,1209.13 1805.83,1209.13 1806.42,1209.13 1807,1209.13 1807.59,1209.13 1808.18,1209.13 1808.76,1209.13 1809.35,1209.13 1809.94,1209.13 1810.52,1209.13 1811.11,1209.13 1811.69,1209.13 1812.28,1209.13 1812.87,1209.13 1813.45,1209.13 1814.04,1209.13 1814.63,1209.13 1815.21,1209.13 1815.8,1209.13 1816.39,1209.13 1816.97,1209.13 1817.56,1209.13 1818.14,1209.13 1818.73,1209.13 1819.32,1209.13 1819.9,1209.13 1820.49,1209.13 1821.08,1209.13 1821.66,1209.13 1822.25,1209.13 1822.84,1209.13 1823.42,1209.13 1824.01,1209.13 1824.6,1209.13 1825.18,1209.13 1825.77,1209.13 1826.35,1209.13 1826.94,1209.13 1827.53,1209.13 1828.11,1209.13 1828.7,1209.13 1829.29,1209.13 1829.87,1209.13 1830.46,1209.13 1831.05,1209.13 1831.63,1209.13 1832.22,1209.13 1832.81,1209.13 1833.39,1209.13 1833.98,1209.13 1834.56,1209.13 1835.15,1209.13 1835.74,1209.13 1836.32,1209.13 1836.91,1209.13 1837.5,1209.13 1838.08,1209.13 1838.67,1209.13 1839.26,1209.13 1839.84,1209.13 1840.43,1209.13 1841.01,1209.13 1841.6,1209.13 1842.19,1209.13 1842.77,1209.13 1843.36,1209.13 1843.95,1209.13 1844.53,1209.13 1845.12,1209.13 1845.71,1209.13 1846.29,1209.13 1846.88,1209.13 1847.47,1209.13 1848.05,1209.13 1848.64,1209.13 1849.22,1209.13 1849.81,1209.13 1850.4,1209.13 1850.98,1209.13 1851.57,1209.13 1852.16,1209.13 1852.74,1209.13 1853.33,1209.13 1853.92,1209.13 1854.5,1209.13 1855.09,1209.13 1855.68,1209.13 1856.26,1209.13 1856.85,1209.13 1857.43,1209.13 1858.02,1209.13 1858.61,1209.13 1859.19,1209.13 1859.78,1209.13 1860.37,1209.13 1860.95,1209.13 1861.54,1209.13 1862.13,1209.13 1862.71,1209.13 1863.3,1209.13 1863.88,1209.13 1864.47,1209.13 1865.06,1209.13 1865.64,1209.13 1866.23,1209.13 1866.82,1209.13 1867.4,1209.13 1867.99,1209.13 1868.58,1209.13 1869.16,1209.13 1869.75,1209.13 1870.34,1209.13 1870.92,1209.13 1871.51,1209.13 1872.09,1209.13 1872.68,1209.13 1873.27,1209.13 1873.85,1209.13 1874.44,1209.13 1875.03,1209.13 1875.61,1209.13 1876.2,1209.13 1876.79,1209.13 1877.37,1209.13 1877.96,1209.13 1878.55,1209.13 1879.13,1209.13 1879.72,1209.13 1880.3,1209.13 1880.89,1209.13 1881.48,1209.13 1882.06,1209.13 1882.65,1209.13 1883.24,1209.13 1883.82,1209.13 1884.41,1209.13 1885,1209.13 1885.58,1209.13 1886.17,1209.13 1886.76,1209.13 1887.34,1209.13 1887.93,1209.13 1888.51,1209.13 1889.1,1209.13 1889.69,1209.13 1890.27,1209.13 1890.86,1209.13 1891.45,1209.13 1892.03,1209.13 1892.62,1209.13 1893.21,1209.13 1893.79,1209.13 1894.38,1209.13 1894.96,1209.13 1895.55,1209.13 1896.14,1209.13 1896.72,1209.13 1897.31,1209.13 1897.9,1209.13 1898.48,1209.13 1899.07,1209.13 1899.66,1209.13 1900.24,1209.13 1900.83,1209.13 1901.42,1209.13 1902,1209.13 1902.59,1209.13 1903.17,1209.13 1903.76,1209.13 1904.35,1209.13 1904.93,1209.13 1905.52,1209.13 1906.11,1209.13 1906.69,1209.13 1907.28,1209.13 1907.87,1209.13 1908.45,1209.13 1909.04,1209.13 1909.63,1209.13 1910.21,1209.13 1910.8,1209.13 1911.38,1209.13 1911.97,1209.13 1912.56,1209.13 1913.14,1209.13 1913.73,1209.13 1914.32,1209.13 1914.9,1209.13 1915.49,1209.13 1916.08,1209.13 1916.66,1209.13 1917.25,1209.13 1917.83,1209.13 1918.42,1209.13 1919.01,1209.13 1919.59,1209.13 1920.18,1209.13 1920.77,1209.13 1921.35,1209.13 1921.94,1209.13 1922.53,1209.13 1923.11,1209.13 1923.7,1209.13 1924.29,1209.13 1924.87,1209.13 1925.46,1209.13 1926.04,1209.13 1926.63,1209.13 1927.22,1209.13 1927.8,1209.13 1928.39,1209.13 1928.98,1209.13 1929.56,1209.13 1930.15,1209.13 1930.74,1209.13 1931.32,1209.13 1931.91,1209.13 1932.5,1209.13 1933.08,1209.13 1933.67,1209.13 1934.25,1209.13 1934.84,1209.13 1935.43,1209.13 1936.01,1209.13 1936.6,1209.13 1937.19,1209.13 1937.77,1209.13 1938.36,1209.13 1938.95,1209.13 1939.53,1209.13 1940.12,1209.13 1940.71,1209.13 1941.29,1209.13 1941.88,1209.13 1942.46,1209.13 1943.05,1209.13 1943.64,1209.13 1944.22,1209.13 1944.81,1209.13 1945.4,1209.13 1945.98,1209.13 1946.57,1209.13 1947.16,1209.13 1947.74,1209.13 1948.33,1209.13 1948.91,1209.13 1949.5,1209.13 1950.09,1209.13 1950.67,1209.13 1951.26,1209.13 1951.85,1209.13 1952.43,1209.13 1953.02,1209.13 1953.61,1209.13 1954.19,1209.13 1954.78,1209.13 1955.37,1209.13 1955.95,1209.13 1956.54,1209.13 1957.12,1209.13 1957.71,1209.13 1958.3,1209.13 1958.88,1209.13 1959.47,1209.13 1960.06,1209.13 1960.64,1209.13 1961.23,1209.13 1961.82,1209.13 1962.4,1209.13 1962.99,1209.13 1963.58,1209.13 1964.16,1209.13 1964.75,1209.13 1965.33,1209.13 1965.92,1209.13 1966.51,1209.13 1967.09,1209.13 1967.68,1209.13 1968.27,1209.13 1968.85,1209.13 1969.44,1209.13 1970.03,1209.13 1970.61,1209.13 1971.2,1209.13 1971.78,1209.13 1972.37,1209.13 1972.96,1209.13 1973.54,1209.13 1974.13,1209.13 1974.72,1209.13 1975.3,1209.13 1975.89,1209.13 1976.48,1209.13 1977.06,1209.13 1977.65,1209.13 1978.24,1209.13 1978.82,1209.13 1979.41,1209.13 1979.99,1209.13 1980.58,1209.13 1981.17,1209.13 1981.75,1209.13 1982.34,1209.13 1982.93,1209.13 1983.51,1209.13 1984.1,1209.13 1984.69,1209.13 1985.27,1209.13 1985.86,1209.13 1986.45,1209.13 1987.03,1209.13 1987.62,1209.13 1988.2,1209.13 1988.79,1209.13 1989.38,1209.13 1989.96,1209.13 1990.55,1209.13 1991.14,1209.13 1991.72,1209.13 1992.31,1209.13 1992.9,1209.13 1993.48,1209.13 1994.07,1209.13 1994.65,1209.13 1995.24,1209.13 1995.83,1209.13 1996.41,1209.13 1997,1209.13 1997.59,1209.13 1998.17,1209.13 1998.76,1209.13 1999.35,1209.13 1999.93,1209.13 2000.52,1209.13 2001.11,1209.13 2001.69,1209.13 2002.28,1209.13 2002.86,1209.13 2003.45,1209.13 2004.04,1209.13 2004.62,1209.13 2005.21,1209.13 2005.8,1209.13 2006.38,1209.13 2006.97,1209.13 2007.56,1209.13 2008.14,1209.13 2008.73,1209.13 2009.32,1209.13 2009.9,1209.13 2010.49,1209.13 2011.07,1209.13 2011.66,1209.13 2012.25,1209.13 2012.83,1209.13 2013.42,1209.13 2014.01,1209.13 2014.59,1209.13 2015.18,1209.13 2015.77,1209.13 2016.35,1209.13 2016.94,1209.13 2017.53,1209.13 2018.11,1209.13 2018.7,1209.13 2019.28,1209.13 2019.87,1209.13 2020.46,1209.13 2021.04,1209.13 2021.63,1209.13 2022.22,1209.13 2022.8,1209.13 2023.39,1209.13 2023.98,1209.13 2024.56,1209.13 2025.15,1209.13 2025.73,1209.13 2026.32,1209.13 2026.91,1209.13 2027.49,1209.13 2028.08,1209.13 2028.67,1209.13 2029.25,1209.13 2029.84,1209.13 2030.43,1209.13 2031.01,1209.13 2031.6,1209.13 2032.19,1209.13 2032.77,1209.13 2033.36,1209.13 2033.94,1209.13 2034.53,1209.13 2035.12,1209.13 2035.7,1209.13 2036.29,1209.13 2036.88,1209.13 2037.46,1209.13 2038.05,1209.13 2038.64,1209.13 2039.22,1209.13 2039.81,1209.13 2040.4,1209.13 2040.98,1209.13 2041.57,1209.13 2042.15,1209.13 2042.74,1209.13 2043.33,1209.13 2043.91,1209.13 2044.5,1209.13 2045.09,1209.13 2045.67,1209.13 2046.26,1209.13 2046.85,1209.13 2047.43,1209.13 2048.02,1209.13 2048.6,1209.13 2049.19,1209.13 2049.78,1209.13 2050.36,1209.13 2050.95,1209.13 2051.54,1209.13 2052.12,1209.13 2052.71,1209.13 2053.3,1209.13 2053.88,1209.13 2054.47,1209.13 2055.06,1209.13 2055.64,1209.13 2056.23,1209.13 2056.81,1209.13 2057.4,1209.13 2057.99,1209.13 2058.57,1209.13 2059.16,1209.13 2059.75,1209.13 2060.33,1209.13 2060.92,1209.13 2061.51,1209.13 2062.09,1209.13 2062.68,1209.13 2063.27,1209.13 2063.85,1209.13 2064.44,1209.13 2065.02,1209.13 2065.61,1209.13 2066.2,1209.13 2066.78,1209.13 2067.37,1209.13 2067.96,1209.13 2068.54,1209.13 2069.13,1209.13 2069.72,1209.13 2070.3,1209.13 2070.89,1209.13 2071.48,1209.13 2072.06,1209.13 2072.65,1209.13 2073.23,1209.13 2073.82,1209.13 2074.41,1209.13 2074.99,1209.13 2075.58,1209.13 2076.17,1209.13 2076.75,1209.13 2077.34,1209.13 2077.93,1209.13 2078.51,1209.13 2079.1,1209.13 2079.68,1209.13 2080.27,1209.13 2080.86,1209.13 2081.44,1209.13 2082.03,1209.13 2082.62,1209.13 2083.2,1209.13 2083.79,1209.13 2084.38,1209.13 2084.96,1209.13 2085.55,1209.13 2086.14,1209.13 2086.72,1209.13 2087.31,1209.13 2087.89,1209.13 2088.48,1209.13 2089.07,1209.13 2089.65,1209.13 2090.24,1209.13 2090.83,1209.13 2091.41,1209.13 2092,1209.13 2092.59,1209.13 2093.17,1209.13 2093.76,1209.13 2094.35,1209.13 2094.93,1209.13 2095.52,1209.13 2096.1,1209.13 2096.69,1209.13 2097.28,1209.13 2097.86,1209.13 2098.45,1209.13 2099.04,1209.13 2099.62,1209.13 2100.21,1209.13 2100.8,1209.13 2101.38,1209.13 2101.97,1209.13 2102.55,1209.13 2103.14,1209.13 2103.73,1209.13 2104.31,1209.13 2104.9,1209.13 2105.49,1209.13 2106.07,1209.13 2106.66,1209.13 2107.25,1209.13 2107.83,1209.13 2108.42,1209.13 2109.01,1209.13 2109.59,1209.13 2110.18,1209.13 2110.76,1209.13 2111.35,1209.13 2111.94,1209.13 2112.52,1209.13 2113.11,1209.13 2113.7,1209.13 2114.28,1209.13 2114.87,1209.13 2115.46,1209.13 2116.04,1209.13 2116.63,1209.13 2117.22,1209.13 2117.8,1209.13 2118.39,1209.13 2118.97,1209.13 2119.56,1209.13 2120.15,1209.13 2120.73,1209.13 2121.32,1209.13 2121.91,1209.13 2122.49,1209.13 2123.08,1209.13 2123.67,1209.13 2124.25,1209.13 2124.84,1209.13 2125.42,1209.13 2126.01,1209.13 2126.6,1209.13 2127.18,1209.13 2127.77,1209.13 2128.36,1209.13 2128.94,1209.13 2129.53,1209.13 2130.12,1209.13 2130.7,1209.13 2131.29,1209.13 2131.88,1209.13 2132.46,1209.13 2133.05,1209.13 2133.63,1209.13 2134.22,1209.13 2134.81,1209.13 2135.39,1209.13 2135.98,1209.13 2136.57,1209.13 2137.15,1209.13 2137.74,1209.13 2138.33,1209.13 2138.91,1209.13 2139.5,1209.13 2140.09,1209.13 2140.67,1209.13 2141.26,1209.13 2141.84,1209.13 2142.43,1209.13 2143.02,1209.13 2143.6,1209.13 2144.19,1209.13 2144.78,1209.13 2145.36,1209.13 2145.95,1209.13 2146.54,1209.13 2147.12,1209.13 2147.71,1209.13 2148.3,1209.13 2148.88,1209.13 2149.47,1209.13 2150.05,1209.13 2150.64,1209.13 2151.23,1209.13 2151.81,1209.13 2152.4,1209.13 2152.99,1209.13 2153.57,1209.13 2154.16,1209.13 2154.75,1209.13 2155.33,1209.13 2155.92,1209.13 2156.5,1209.13 2157.09,1209.13 2157.68,1209.13 2158.26,1209.13 \"/>\n<path clip-path=\"url(#clip482)\" d=\"M986.025 1208.95 L986.612 1208.95 L987.198 1208.95 L987.785 1208.95 L988.371 1208.95 L988.957 1208.95 L989.544 1208.95 L990.13 1208.95 L990.717 1208.95 L991.303 1208.95 L991.889 1208.95 L992.476 1208.95 L993.062 1208.95 L993.649 1208.95 L994.235 1208.95 L994.822 1208.95 L995.408 1208.95 L995.994 1208.95 L996.581 1208.95 L997.167 1208.95 L997.754 1208.95 L998.34 1208.95 L998.926 1208.95 L999.513 1208.95 L1000.1 1208.95 L1000.69 1208.95 L1001.27 1208.95 L1001.86 1208.95 L1002.44 1208.95 L1003.03 1208.95 L1003.62 1208.95 L1004.2 1208.95 L1004.79 1208.95 L1005.38 1208.95 L1005.96 1208.95 L1006.55 1208.95 L1007.14 1208.95 L1007.72 1208.95 L1008.31 1208.95 L1008.9 1208.95 L1009.48 1208.95 L1010.07 1208.95 L1010.65 1208.95 L1011.24 1208.95 L1011.83 1208.95 L1012.41 1208.95 L1013 1208.95 L1013.59 1208.95 L1014.17 1208.95 L1014.76 1208.95 L1015.35 1208.95 L1015.93 1208.95 L1016.52 1208.95 L1017.11 1208.95 L1017.69 1208.95 L1018.28 1208.95 L1018.86 1208.95 L1019.45 1208.95 L1020.04 1208.95 L1020.62 1208.95 L1021.21 1208.95 L1021.8 1208.95 L1022.38 1208.95 L1022.97 1208.95 L1023.56 1208.95 L1024.14 1208.95 L1024.73 1208.95 L1025.32 1208.95 L1025.9 1208.95 L1026.49 1208.95 L1027.07 1208.95 L1027.66 1208.95 L1028.25 1208.95 L1028.83 1208.95 L1029.42 1208.95 L1030.01 1208.95 L1030.59 1208.95 L1031.18 1208.95 L1031.77 1208.95 L1032.35 1208.95 L1032.94 1208.95 L1033.52 1208.95 L1034.11 1208.95 L1034.7 1208.95 L1035.28 1208.95 L1035.87 1208.95 L1036.46 1208.95 L1037.04 1208.95 L1037.63 1208.95 L1038.22 1208.95 L1038.8 1208.95 L1039.39 1208.95 L1039.98 1208.95 L1040.56 1208.95 L1041.15 1208.95 L1041.73 1208.95 L1042.32 1208.95 L1042.91 1208.95 L1043.49 1208.95 L1044.08 1208.95 L1044.67 1208.95 L1045.25 1208.95 L1045.84 1208.95 L1046.43 1208.95 L1047.01 1208.95 L1047.6 1208.95 L1048.19 1208.95 L1048.77 1208.95 L1049.36 1208.95 L1049.94 1208.95 L1050.53 1208.95 L1051.12 1208.95 L1051.7 1208.95 L1052.29 1208.95 L1052.88 1208.95 L1053.46 1208.95 L1054.05 1208.95 L1054.64 1208.95 L1055.22 1208.95 L1055.81 1208.95 L1056.39 1208.95 L1056.98 1208.95 L1057.57 1208.95 L1058.15 1208.95 L1058.74 1208.95 L1059.33 1208.95 L1059.91 1208.95 L1060.5 1208.95 L1061.09 1208.95 L1061.67 1208.95 L1062.26 1208.95 L1062.85 1208.95 L1063.43 1208.95 L1064.02 1208.95 L1064.6 1208.95 L1065.19 1208.95 L1065.78 1208.95 L1066.36 1208.95 L1066.95 1208.95 L1067.54 1208.95 L1068.12 1208.95 L1068.71 1208.95 L1069.3 1208.95 L1069.88 1208.95 L1070.47 1208.95 L1071.06 1208.95 L1071.64 1208.95 L1072.23 1208.95 L1072.81 1208.95 L1073.4 1208.95 L1073.99 1208.95 L1074.57 1208.95 L1075.16 1208.95 L1075.75 1208.95 L1076.33 1208.95 L1076.92 1208.95 L1077.51 1208.95 L1078.09 1208.95 L1078.68 1208.95 L1079.26 1208.95 L1079.85 1208.95 L1080.44 1208.95 L1081.02 1208.95 L1081.61 1208.95 L1082.2 1208.95 L1082.78 1208.95 L1083.37 1208.95 L1083.96 1208.95 L1084.54 1208.95 L1085.13 1208.95 L1085.72 1208.95 L1086.3 1208.95 L1086.89 1208.95 L1087.47 1208.95 L1088.06 1208.95 L1088.65 1208.95 L1089.23 1208.95 L1089.82 1208.95 L1090.41 1208.95 L1090.99 1208.95 L1091.58 1208.95 L1092.17 1208.95 L1092.75 1208.95 L1093.34 1208.95 L1093.93 1208.95 L1094.51 1208.95 L1095.1 1208.95 L1095.68 1208.95 L1096.27 1208.95 L1096.86 1208.95 L1097.44 1208.95 L1098.03 1208.95 L1098.62 1208.95 L1099.2 1208.95 L1099.79 1208.95 L1100.38 1208.95 L1100.96 1208.95 L1101.55 1208.95 L1102.14 1208.95 L1102.72 1208.95 L1103.31 1208.95 L1103.89 1208.95 L1104.48 1208.95 L1105.07 1208.95 L1105.65 1208.95 L1106.24 1208.95 L1106.83 1208.95 L1107.41 1208.95 L1108 1208.95 L1108.59 1208.95 L1109.17 1208.95 L1109.76 1208.95 L1110.34 1208.95 L1110.93 1208.95 L1111.52 1208.95 L1112.1 1208.95 L1112.69 1208.95 L1113.28 1208.95 L1113.86 1208.95 L1114.45 1208.95 L1115.04 1208.95 L1115.62 1208.95 L1116.21 1208.95 L1116.8 1208.95 L1117.38 1208.95 L1117.97 1208.95 L1118.55 1208.95 L1119.14 1208.95 L1119.73 1208.95 L1120.31 1208.95 L1120.9 1208.95 L1121.49 1208.95 L1122.07 1208.95 L1122.66 1208.95 L1123.25 1208.95 L1123.83 1208.95 L1124.42 1208.95 L1125.01 1208.95 L1125.59 1208.95 L1126.18 1208.95 L1126.76 1208.95 L1127.35 1208.95 L1127.94 1208.95 L1128.52 1208.95 L1129.11 1208.95 L1129.7 1208.95 L1130.28 1208.95 L1130.87 1208.95 L1131.46 1208.95 L1132.04 1208.95 L1132.63 1208.95 L1133.21 1208.95 L1133.8 1208.95 L1134.39 1208.95 L1134.97 1208.95 L1135.56 1208.95 L1136.15 1208.95 L1136.73 1208.95 L1137.32 1208.95 L1137.91 1208.95 L1138.49 1208.95 L1139.08 1208.95 L1139.67 1208.95 L1140.25 1208.95 L1140.84 1208.95 L1141.42 1208.95 L1142.01 1208.95 L1142.6 1208.95 L1143.18 1208.95 L1143.77 1208.95 L1144.36 1208.95 L1144.94 1208.95 L1145.53 1208.95 L1146.12 1208.95 L1146.7 1208.95 L1147.29 1208.95 L1147.88 1208.95 L1148.46 1208.95 L1149.05 1208.95 L1149.63 1208.95 L1150.22 1208.95 L1150.81 1208.95 L1151.39 1208.95 L1151.98 1208.95 L1152.57 1208.95 L1153.15 1208.95 L1153.74 1208.95 L1154.33 1208.95 L1154.91 1208.95 L1155.5 1208.95 L1156.09 1208.95 L1156.67 1208.95 L1157.26 1208.95 L1157.84 1208.95 L1158.43 1208.95 L1159.02 1208.95 L1159.6 1208.95 L1160.19 1208.95 L1160.78 1208.95 L1161.36 1208.95 L1161.95 1208.95 L1162.54 1208.95 L1163.12 1208.95 L1163.71 1208.95 L1164.29 1208.95 L1164.88 1208.95 L1165.47 1208.95 L1166.05 1208.95 L1166.64 1208.95 L1167.23 1208.95 L1167.81 1208.95 L1168.4 1208.95 L1168.99 1208.95 L1169.57 1208.95 L1170.16 1208.95 L1170.75 1208.95 L1171.33 1208.95 L1171.92 1208.95 L1172.5 1208.95 L1173.09 1208.95 L1173.68 1208.95 L1174.26 1208.95 L1174.85 1208.95 L1175.44 1208.95 L1176.02 1208.95 L1176.61 1208.95 L1177.2 1208.95 L1177.78 1208.95 L1178.37 1208.95 L1178.96 1208.95 L1179.54 1208.95 L1180.13 1208.95 L1180.71 1208.95 L1181.3 1208.95 L1181.89 1208.95 L1182.47 1208.95 L1183.06 1208.95 L1183.65 1208.95 L1184.23 1208.95 L1184.82 1208.95 L1185.41 1208.95 L1185.99 1208.95 L1186.58 1208.95 L1187.16 1208.95 L1187.75 1208.95 L1188.34 1208.95 L1188.92 1208.95 L1189.51 1208.95 L1190.1 1208.95 L1190.68 1208.95 L1191.27 1208.95 L1191.86 1208.95 L1192.44 1208.95 L1193.03 1208.95 L1193.62 1208.95 L1194.2 1208.95 L1194.79 1208.95 L1195.37 1208.95 L1195.96 1208.95 L1196.55 1208.95 L1197.13 1208.95 L1197.72 1208.95 L1198.31 1208.95 L1198.89 1208.95 L1199.48 1208.95 L1200.07 1208.95 L1200.65 1208.95 L1201.24 1208.95 L1201.83 1208.95 L1202.41 1208.95 L1203 1208.95 L1203.58 1208.95 L1204.17 1208.95 L1204.76 1208.95 L1205.34 1208.95 L1205.93 1208.95 L1206.52 1208.95 L1207.1 1208.95 L1207.69 1208.95 L1208.28 1208.95 L1208.86 1208.95 L1209.45 1208.95 L1210.03 1208.95 L1210.62 1208.95 L1211.21 1208.95 L1211.79 1208.95 L1212.38 1208.95 L1212.97 1208.95 L1213.55 1208.95 L1214.14 1208.95 L1214.73 1208.95 L1215.31 1208.95 L1215.9 1208.95 L1216.49 1208.95 L1217.07 1208.95 L1217.66 1208.95 L1218.24 1208.95 L1218.83 1208.95 L1219.42 1208.95 L1220 1208.95 L1220.59 1208.95 L1221.18 1208.95 L1221.76 1208.95 L1222.35 1208.95 L1222.94 1208.95 L1223.52 1208.95 L1224.11 1208.95 L1224.7 1208.95 L1225.28 1208.95 L1225.87 1208.95 L1226.45 1208.95 L1227.04 1208.95 L1227.63 1208.95 L1228.21 1208.95 L1228.8 1208.95 L1229.39 1208.95 L1229.97 1208.95 L1230.56 1208.95 L1231.15 1208.95 L1231.73 1208.95 L1232.32 1208.95 L1232.91 1208.95 L1233.49 1208.95 L1234.08 1208.95 L1234.66 1208.95 L1235.25 1208.95 L1235.84 1208.95 L1236.42 1208.95 L1237.01 1208.95 L1237.6 1208.95 L1238.18 1208.95 L1238.77 1208.95 L1239.36 1208.95 L1239.94 1208.95 L1240.53 1208.95 L1241.11 1208.95 L1241.7 1208.95 L1242.29 1208.95 L1242.87 1208.95 L1243.46 1208.95 L1244.05 1208.95 L1244.63 1208.95 L1245.22 1208.95 L1245.81 1208.95 L1246.39 1208.95 L1246.98 1208.95 L1247.57 1208.95 L1248.15 1208.95 L1248.74 1208.95 L1249.32 1208.95 L1249.91 1208.95 L1250.5 1208.95 L1251.08 1208.95 L1251.67 1208.95 L1252.26 1208.95 L1252.84 1208.95 L1253.43 1208.95 L1254.02 1208.95 L1254.6 1208.95 L1255.19 1208.95 L1255.78 1208.95 L1256.36 1208.95 L1256.95 1208.95 L1257.53 1208.95 L1258.12 1208.95 L1258.71 1208.95 L1259.29 1208.95 L1259.88 1208.95 L1260.47 1208.95 L1261.05 1208.95 L1261.64 1208.95 L1262.23 1208.95 L1262.81 1208.95 L1263.4 1208.95 L1263.98 1208.95 L1264.57 1208.95 L1265.16 1208.95 L1265.74 1208.95 L1266.33 1208.95 L1266.92 1208.95 L1267.5 1208.95 L1268.09 1208.95 L1268.68 1208.95 L1269.26 1208.95 L1269.85 1208.95 L1270.44 1208.95 L1271.02 1208.95 L1271.61 1208.95 L1272.19 1208.95 L1272.78 1208.95 L1273.37 1208.95 L1273.95 1208.95 L1274.54 1208.95 L1275.13 1208.95 L1275.71 1208.95 L1276.3 1208.95 L1276.89 1208.95 L1277.47 1208.95 L1278.06 1208.95 L1278.65 1208.95 L1279.23 1208.95 L1279.82 1208.95 L1280.4 1208.95 L1280.99 1208.95 L1281.58 1208.95 L1282.16 1208.95 L1282.75 1208.95 L1283.34 1208.95 L1283.92 1208.95 L1284.51 1208.95 L1285.1 1208.95 L1285.68 1208.95 L1286.27 1208.95 L1286.86 1208.95 L1287.44 1208.95 L1288.03 1208.95 L1288.61 1208.95 L1289.2 1208.95 L1289.79 1208.95 L1290.37 1208.95 L1290.96 1208.95 L1291.55 1208.95 L1292.13 1208.95 L1292.72 1208.95 L1293.31 1208.95 L1293.89 1208.95 L1294.48 1208.95 L1295.06 1208.95 L1295.65 1208.95 L1296.24 1208.95 L1296.82 1208.95 L1297.41 1208.95 L1298 1208.95 L1298.58 1208.95 L1299.17 1208.95 L1299.76 1208.95 L1300.34 1208.95 L1300.93 1208.95 L1301.52 1208.95 L1302.1 1208.95 L1302.69 1208.95 L1303.27 1208.95 L1303.86 1208.95 L1304.45 1208.95 L1305.03 1208.95 L1305.62 1208.95 L1306.21 1208.95 L1306.79 1208.95 L1307.38 1208.95 L1307.97 1208.95 L1308.55 1208.95 L1309.14 1208.95 L1309.73 1208.95 L1310.31 1208.95 L1310.9 1208.95 L1311.48 1208.95 L1312.07 1208.95 L1312.66 1208.95 L1313.24 1208.95 L1313.83 1208.95 L1314.42 1208.95 L1315 1208.95 L1315.59 1208.95 L1316.18 1208.95 L1316.76 1208.95 L1317.35 1208.95 L1317.93 1208.95 L1318.52 1208.95 L1319.11 1208.95 L1319.69 1208.95 L1320.28 1208.95 L1320.87 1208.95 L1321.45 1208.95 L1322.04 1208.95 L1322.63 1208.95 L1323.21 1208.95 L1323.8 1208.95 L1324.39 1208.95 L1324.97 1208.95 L1325.56 1208.95 L1326.14 1208.95 L1326.73 1208.95 L1327.32 1208.95 L1327.9 1208.95 L1328.49 1208.95 L1329.08 1208.95 L1329.66 1208.95 L1330.25 1208.95 L1330.84 1208.95 L1331.42 1208.95 L1332.01 1208.95 L1332.6 1208.95 L1333.18 1208.95 L1333.77 1208.95 L1334.35 1208.95 L1334.94 1208.95 L1335.53 1208.95 L1336.11 1208.95 L1336.7 1208.95 L1337.29 1208.95 L1337.87 1208.95 L1338.46 1208.95 L1339.05 1208.95 L1339.63 1208.95 L1340.22 1208.95 L1340.8 1208.95 L1341.39 1208.95 L1341.98 1208.95 L1342.56 1208.95 L1343.15 1208.95 L1343.74 1208.95 L1344.32 1208.95 L1344.91 1208.95 L1345.5 1208.95 L1346.08 1208.95 L1346.67 1208.95 L1347.26 1208.95 L1347.84 1208.95 L1348.43 1208.95 L1349.01 1208.95 L1349.6 1208.95 L1350.19 1208.95 L1350.77 1208.95 L1351.36 1208.95 L1351.95 1208.95 L1352.53 1208.95 L1353.12 1208.95 L1353.71 1208.95 L1354.29 1208.95 L1354.88 1208.95 L1355.47 1208.95 L1356.05 1208.95 L1356.64 1208.95 L1357.22 1208.95 L1357.81 1208.95 L1358.4 1208.95 L1358.98 1208.95 L1359.57 1208.95 L1360.16 1208.95 L1360.74 1208.95 L1361.33 1208.95 L1361.92 1208.95 L1362.5 1208.95 L1363.09 1208.95 L1363.68 1208.95 L1364.26 1208.95 L1364.85 1208.95 L1365.43 1208.95 L1366.02 1208.95 L1366.61 1208.95 L1367.19 1208.95 L1367.78 1208.95 L1368.37 1208.95 L1368.95 1208.95 L1369.54 1208.95 L1370.13 1208.95 L1370.71 1208.95 L1371.3 1208.95 L1371.88 1208.95 L1372.47 1208.95 L1373.06 1208.95 L1373.64 1208.95 L1374.23 1208.95 L1374.82 1208.95 L1375.4 1208.95 L1375.99 1208.95 L1376.58 1208.95 L1377.16 1208.95 L1377.75 1208.95 L1378.34 1208.95 L1378.92 1208.95 L1379.51 1208.95 L1380.09 1208.95 L1380.68 1208.95 L1381.27 1208.95 L1381.85 1208.95 L1382.44 1208.95 L1383.03 1208.95 L1383.61 1208.95 L1384.2 1208.95 L1384.79 1208.95 L1385.37 1208.95 L1385.96 1208.95 L1386.55 1208.95 L1387.13 1208.95 L1387.72 1208.95 L1388.3 1208.95 L1388.89 1208.95 L1389.48 1208.95 L1390.06 1208.95 L1390.65 1208.95 L1391.24 1208.95 L1391.82 1208.95 L1392.41 1208.95 L1393 1208.95 L1393.58 1208.95 L1394.17 1208.95 L1394.75 1208.95 L1395.34 1208.95 L1395.93 1208.95 L1396.51 1208.95 L1397.1 1208.95 L1397.69 1208.95 L1398.27 1208.95 L1398.86 1208.95 L1399.45 1208.95 L1400.03 1208.95 L1400.62 1208.95 L1401.21 1208.95 L1401.79 1208.95 L1402.38 1208.95 L1402.96 1208.95 L1403.55 1208.95 L1404.14 1208.95 L1404.72 1208.95 L1405.31 1208.95 L1405.9 1208.95 L1406.48 1208.95 L1407.07 1208.95 L1407.66 1208.95 L1408.24 1208.95 L1408.83 1208.95 L1409.42 1208.95 L1410 1208.95 L1410.59 1208.95 L1411.17 1208.95 L1411.76 1208.95 L1412.35 1208.95 L1412.93 1208.95 L1413.52 1208.95 L1414.11 1208.95 L1414.69 1208.95 L1415.28 1208.95 L1415.87 1208.95 L1416.45 1208.95 L1417.04 1208.95 L1417.63 1208.95 L1418.21 1208.95 L1418.8 1208.95 L1419.38 1208.95 L1419.97 1208.95 L1420.56 1208.95 L1421.14 1208.95 L1421.73 1208.95 L1422.32 1208.95 L1422.9 1208.95 L1423.49 1208.95 L1424.08 1208.95 L1424.66 1208.95 L1425.25 1208.95 L1425.83 1208.95 L1426.42 1208.95 L1427.01 1208.95 L1427.59 1208.95 L1428.18 1208.95 L1428.77 1208.95 L1429.35 1208.95 L1429.94 1208.95 L1430.53 1208.95 L1431.11 1208.95 L1431.7 1208.95 L1432.29 1208.95 L1432.87 1208.95 L1433.46 1208.95 L1434.04 1208.95 L1434.63 1208.95 L1435.22 1208.95 L1435.8 1208.95 L1436.39 1208.95 L1436.98 1208.95 L1437.56 1208.95 L1438.15 1208.95 L1438.74 1208.95 L1439.32 1208.95 L1439.91 1208.95 L1440.5 1208.95 L1441.08 1208.95 L1441.67 1208.95 L1442.25 1208.95 L1442.84 1208.95 L1443.43 1208.95 L1444.01 1208.95 L1444.6 1208.95 L1445.19 1208.95 L1445.77 1208.95 L1446.36 1208.95 L1446.95 1208.95 L1447.53 1208.95 L1448.12 1208.95 L1448.7 1208.95 L1449.29 1208.95 L1449.88 1208.95 L1450.46 1208.95 L1451.05 1208.95 L1451.64 1208.95 L1452.22 1208.95 L1452.81 1208.95 L1453.4 1208.95 L1453.98 1208.95 L1454.57 1208.95 L1455.16 1208.95 L1455.74 1208.95 L1456.33 1208.95 L1456.91 1208.95 L1457.5 1208.95 L1458.09 1208.95 L1458.67 1208.95 L1459.26 1208.95 L1459.85 1208.95 L1460.43 1208.95 L1461.02 1208.95 L1461.61 1208.95 L1462.19 1208.95 L1462.78 1208.95 L1463.37 1208.95 L1463.95 1208.95 L1464.54 1208.95 L1465.12 1208.95 L1465.71 1208.95 L1466.3 1208.95 L1466.88 1208.95 L1467.47 1208.95 L1468.06 1208.95 L1468.64 1208.95 L1469.23 1208.95 L1469.82 1208.95 L1470.4 1208.95 L1470.99 1208.95 L1471.57 1208.95 L1472.16 1208.95 L1472.75 1208.95 L1473.33 1208.95 L1473.92 1208.95 L1474.51 1208.95 L1475.09 1208.95 L1475.68 1208.95 L1476.27 1208.95 L1476.85 1208.95 L1477.44 1208.95 L1478.03 1208.95 L1478.61 1208.95 L1479.2 1208.95 L1479.78 1208.95 L1480.37 1208.95 L1480.96 1208.95 L1481.54 1208.95 L1482.13 1208.95 L1482.72 1208.95 L1483.3 1208.95 L1483.89 1208.95 L1484.48 1208.95 L1485.06 1208.95 L1485.65 1208.95 L1486.24 1208.95 L1486.82 1208.95 L1487.41 1208.95 L1487.99 1208.95 L1488.58 1208.95 L1489.17 1208.95 L1489.75 1208.95 L1490.34 1208.95 L1490.93 1208.95 L1491.51 1208.95 L1492.1 1208.95 L1492.69 1208.95 L1493.27 1208.95 L1493.86 1208.95 L1494.45 1208.95 L1495.03 1208.95 L1495.62 1208.95 L1496.2 1208.95 L1496.79 1208.95 L1497.38 1208.95 L1497.96 1208.95 L1498.55 1208.95 L1499.14 1208.95 L1499.72 1208.95 L1500.31 1208.95 L1500.9 1208.95 L1501.48 1208.95 L1502.07 1208.95 L1502.65 1208.95 L1503.24 1208.95 L1503.83 1208.95 L1504.41 1208.95 L1505 1208.95 L1505.59 1208.95 L1506.17 1208.95 L1506.76 1208.95 L1507.35 1208.95 L1507.93 1208.95 L1508.52 1208.95 L1509.11 1208.95 L1509.69 1208.95 L1510.28 1208.95 L1510.86 1208.95 L1511.45 1208.95 L1512.04 1208.95 L1512.62 1208.95 L1513.21 1208.95 L1513.8 1208.95 L1514.38 1208.95 L1514.97 1208.95 L1515.56 1208.95 L1516.14 1208.95 L1516.73 1208.95 L1517.32 1208.95 L1517.9 1208.95 L1518.49 1208.95 L1519.07 1208.95 L1519.66 1208.95 L1520.25 1208.95 L1520.83 1208.95 L1521.42 1208.95 L1522.01 1208.95 L1522.59 1208.95 L1523.18 1208.95 L1523.77 1208.95 L1524.35 1208.95 L1524.94 1208.95 L1525.52 1208.95 L1526.11 1208.95 L1526.7 1208.95 L1527.28 1208.95 L1527.87 1208.95 L1528.46 1208.95 L1529.04 1208.95 L1529.63 1208.95 L1530.22 1208.95 L1530.8 1208.95 L1531.39 1208.95 L1531.98 1208.95 L1532.56 1208.95 L1533.15 1208.95 L1533.73 1208.95 L1534.32 1208.95 L1534.91 1208.95 L1535.49 1208.95 L1536.08 1208.95 L1536.67 1208.95 L1537.25 1208.95 L1537.84 1208.95 L1538.43 1208.95 L1539.01 1208.95 L1539.6 1208.95 L1540.19 1208.95 L1540.77 1208.95 L1541.36 1208.95 L1541.94 1208.95 L1542.53 1208.95 L1543.12 1208.95 L1543.7 1208.95 L1544.29 1208.95 L1544.88 1208.95 L1545.46 1208.95 L1546.05 1208.95 L1546.64 1208.95 L1547.22 1208.95 L1547.81 1208.95 L1548.4 1208.95 L1548.98 1208.95 L1549.57 1208.95 L1550.15 1208.95 L1550.74 1208.95 L1551.33 1208.95 L1551.91 1208.95 L1552.5 1208.95 L1553.09 1208.95 L1553.67 1208.95 L1554.26 1208.95 L1554.85 1208.95 L1555.43 1208.95 L1556.02 1208.95 L1556.6 1208.95 L1557.19 1208.95 L1557.78 1208.95 L1558.36 1208.95 L1558.95 1208.95 L1559.54 1208.95 L1560.12 1208.95 L1560.71 1208.95 L1561.3 1208.95 L1561.88 1208.95 L1562.47 1208.95 L1563.06 1208.95 L1563.64 1208.95 L1564.23 1208.95 L1564.81 1208.95 L1565.4 1208.95 L1565.99 1208.95 L1566.57 1208.95 L1567.16 1208.95 L1567.75 1208.95 L1568.33 1208.95 L1568.92 1208.95 L1569.51 1208.95 L1570.09 1208.95 L1570.68 1208.95 L1571.27 1208.95 L1571.85 1208.95 L1572.44 1208.95 L1573.02 1208.95 L1573.61 1208.95 L1574.2 1208.95 L1574.78 1208.95 L1575.37 1208.95 L1575.96 1208.95 L1576.54 1208.95 L1577.13 1208.95 L1577.72 1208.95 L1578.3 1208.95 L1578.89 1208.95 L1579.47 1208.95 L1580.06 1208.95 L1580.65 1208.95 L1581.23 1208.95 L1581.82 1208.95 L1582.41 1208.95 L1582.99 1208.95 L1583.58 1208.95 L1584.17 1208.95 L1584.75 1208.95 L1585.34 1208.95 L1585.93 1208.95 L1586.51 1208.95 L1587.1 1208.95 L1587.68 1208.95 L1588.27 1208.95 L1588.86 1208.95 L1589.44 1208.95 L1590.03 1208.95 L1590.62 1208.95 L1591.2 1208.95 L1591.79 1208.95 L1592.38 1208.95 L1592.96 1208.95 L1593.55 1208.95 L1594.14 1208.95 L1594.72 1208.95 L1595.31 1208.95 L1595.89 1208.95 L1596.48 1208.95 L1597.07 1208.95 L1597.65 1208.95 L1598.24 1208.95 L1598.83 1208.95 L1599.41 1208.95 L1600 1208.95 L1600.59 1208.95 L1601.17 1208.95 L1601.76 1208.95 L1602.34 1208.95 L1602.93 1208.95 L1603.52 1208.95 L1604.1 1208.95 L1604.69 1208.95 L1605.28 1208.95 L1605.86 1208.95 L1606.45 1208.95 L1607.04 1208.95 L1607.62 1208.95 L1608.21 1208.95 L1608.8 1208.95 L1609.38 1208.95 L1609.97 1208.95 L1610.55 1208.95 L1611.14 1208.95 L1611.73 1208.95 L1612.31 1208.95 L1612.9 1208.95 L1613.49 1208.95 L1614.07 1208.95 L1614.66 1208.95 L1615.25 1208.95 L1615.83 1208.95 L1616.42 1208.95 L1617.01 1208.95 L1617.59 1208.95 L1618.18 1208.95 L1618.76 1208.95 L1619.35 1208.95 L1619.94 1208.95 L1620.52 1208.95 L1621.11 1208.95 L1621.7 1208.95 L1622.28 1208.95 L1622.87 1208.95 L1623.46 1208.95 L1624.04 1208.95 L1624.63 1208.95 L1625.22 1208.95 L1625.8 1208.95 L1626.39 1208.95 L1626.97 1208.95 L1627.56 1208.95 L1628.15 1208.95 L1628.73 1208.95 L1629.32 1208.95 L1629.91 1208.95 L1630.49 1208.95 L1631.08 1208.95 L1631.67 1208.95 L1632.25 1208.95 L1632.84 1208.95 L1633.42 1208.95 L1634.01 1208.95 L1634.6 1208.95 L1635.18 1208.95 L1635.77 1208.95 L1636.36 1208.95 L1636.94 1208.95 L1637.53 1208.95 L1638.12 1208.95 L1638.7 1208.95 L1639.29 1208.95 L1639.88 1208.95 L1640.46 1208.95 L1641.05 1208.95 L1641.63 1208.95 L1642.22 1208.95 L1642.81 1208.95 L1643.39 1208.95 L1643.98 1208.95 L1644.57 1208.95 L1645.15 1208.95 L1645.74 1208.95 L1646.33 1208.95 L1646.91 1208.95 L1647.5 1208.95 L1648.09 1208.95 L1648.67 1208.95 L1649.26 1208.95 L1649.84 1208.95 L1650.43 1208.95 L1651.02 1208.95 L1651.6 1208.95 L1652.19 1208.95 L1652.78 1208.95 L1653.36 1208.95 L1653.95 1208.95 L1654.54 1208.95 L1655.12 1208.95 L1655.71 1208.95 L1656.29 1208.95 L1656.88 1208.95 L1657.47 1208.95 L1658.05 1208.95 L1658.64 1208.95 L1659.23 1208.95 L1659.81 1208.95 L1660.4 1208.95 L1660.99 1208.95 L1661.57 1208.95 L1662.16 1208.95 L1662.75 1208.95 L1663.33 1208.95 L1663.92 1208.95 L1664.5 1208.95 L1665.09 1208.95 L1665.68 1208.95 L1666.26 1208.95 L1666.85 1208.95 L1667.44 1208.95 L1668.02 1208.95 L1668.61 1208.95 L1669.2 1208.95 L1669.78 1208.95 L1670.37 1208.95 L1670.96 1208.95 L1671.54 1208.95 L1672.13 1208.95 L1672.71 1208.95 L1673.3 1208.95 L1673.89 1208.95 L1674.47 1208.95 L1675.06 1208.95 L1675.65 1208.95 L1676.23 1208.95 L1676.82 1208.95 L1677.41 1208.95 L1677.99 1208.95 L1678.58 1208.95 L1679.17 1208.95 L1679.75 1208.95 L1680.34 1208.95 L1680.92 1208.95 L1681.51 1208.95 L1682.1 1208.95 L1682.68 1208.95 L1683.27 1208.95 L1683.86 1208.95 L1684.44 1208.95 L1685.03 1208.95 L1685.62 1208.95 L1686.2 1208.95 L1686.79 1208.95 L1687.37 1208.95 L1687.96 1208.95 L1688.55 1208.95 L1689.13 1208.95 L1689.72 1208.95 L1690.31 1208.95 L1690.89 1208.95 L1691.48 1208.95 L1692.07 1208.95 L1692.65 1208.95 L1693.24 1208.95 L1693.83 1208.95 L1694.41 1208.95 L1695 1208.95 L1695.58 1208.95 L1696.17 1208.95 L1696.76 1208.95 L1697.34 1208.95 L1697.93 1208.95 L1698.52 1208.95 L1699.1 1208.95 L1699.69 1208.95 L1700.28 1208.95 L1700.86 1208.95 L1701.45 1208.95 L1702.04 1208.95 L1702.62 1208.95 L1703.21 1208.95 L1703.79 1208.95 L1704.38 1208.95 L1704.97 1208.95 L1705.55 1208.95 L1706.14 1208.95 L1706.73 1208.95 L1707.31 1208.95 L1707.9 1208.95 L1708.49 1208.95 L1709.07 1208.95 L1709.66 1208.95 L1710.24 1208.95 L1710.83 1208.95 L1711.42 1208.95 L1712 1208.95 L1712.59 1208.95 L1713.18 1208.95 L1713.76 1208.95 L1714.35 1208.95 L1714.94 1208.95 L1715.52 1208.95 L1716.11 1208.95 L1716.7 1208.95 L1717.28 1208.95 L1717.87 1208.95 L1718.45 1208.95 L1719.04 1208.95 L1719.63 1208.95 L1720.21 1208.95 L1720.8 1208.95 L1721.39 1208.95 L1721.97 1208.95 L1722.56 1208.95 L1723.15 1208.95 L1723.73 1208.95 L1724.32 1208.95 L1724.91 1208.95 L1725.49 1208.95 L1726.08 1208.95 L1726.66 1208.95 L1727.25 1208.95 L1727.84 1208.95 L1728.42 1208.95 L1729.01 1208.95 L1729.6 1208.95 L1730.18 1208.95 L1730.77 1208.95 L1731.36 1208.95 L1731.94 1208.95 L1732.53 1208.95 L1733.11 1208.95 L1733.7 1208.95 L1734.29 1208.95 L1734.87 1208.95 L1735.46 1208.95 L1736.05 1208.95 L1736.63 1208.95 L1737.22 1208.95 L1737.81 1208.95 L1738.39 1208.95 L1738.98 1208.95 L1739.57 1208.95 L1740.15 1208.95 L1740.74 1208.95 L1741.32 1208.95 L1741.91 1208.95 L1742.5 1208.95 L1743.08 1208.95 L1743.67 1208.95 L1744.26 1208.95 L1744.84 1208.95 L1745.43 1208.95 L1746.02 1208.95 L1746.6 1208.95 L1747.19 1208.95 L1747.78 1208.95 L1748.36 1208.95 L1748.95 1208.95 L1749.53 1208.95 L1750.12 1208.95 L1750.71 1208.95 L1751.29 1208.95 L1751.88 1208.95 L1752.47 1208.95 L1753.05 1208.95 L1753.64 1208.95 L1754.23 1208.95 L1754.81 1208.95 L1755.4 1208.95 L1755.99 1208.95 L1756.57 1208.95 L1757.16 1208.95 L1757.74 1208.95 L1758.33 1208.95 L1758.92 1208.95 L1759.5 1208.95 L1760.09 1208.95 L1760.68 1208.95 L1761.26 1208.95 L1761.85 1208.95 L1762.44 1208.95 L1763.02 1208.95 L1763.61 1208.95 L1764.19 1208.95 L1764.78 1208.95 L1765.37 1208.95 L1765.95 1208.95 L1766.54 1208.95 L1767.13 1208.95 L1767.71 1208.95 L1768.3 1208.95 L1768.89 1208.95 L1769.47 1208.95 L1770.06 1208.95 L1770.65 1208.95 L1771.23 1208.95 L1771.82 1208.95 L1772.4 1208.95 L1772.99 1208.95 L1773.58 1208.95 L1774.16 1208.95 L1774.75 1208.95 L1775.34 1208.95 L1775.92 1208.95 L1776.51 1208.95 L1777.1 1208.95 L1777.68 1208.95 L1778.27 1208.95 L1778.86 1208.95 L1779.44 1208.95 L1780.03 1208.95 L1780.61 1208.95 L1781.2 1208.95 L1781.79 1208.95 L1782.37 1208.95 L1782.96 1208.95 L1783.55 1208.95 L1784.13 1208.95 L1784.72 1208.95 L1785.31 1208.95 L1785.89 1208.95 L1786.48 1208.95 L1787.06 1208.95 L1787.65 1208.95 L1788.24 1208.95 L1788.82 1208.95 L1789.41 1208.95 L1790 1208.95 L1790.58 1208.95 L1791.17 1208.95 L1791.76 1208.95 L1792.34 1208.95 L1792.93 1208.95 L1793.52 1208.95 L1794.1 1208.95 L1794.69 1208.95 L1795.27 1208.95 L1795.86 1208.95 L1796.45 1208.95 L1797.03 1208.95 L1797.62 1208.95 L1798.21 1208.95 L1798.79 1208.95 L1799.38 1208.95 L1799.97 1208.95 L1800.55 1208.95 L1801.14 1208.95 L1801.73 1208.95 L1802.31 1208.95 L1802.9 1208.95 L1803.48 1208.95 L1804.07 1208.95 L1804.66 1208.95 L1805.24 1208.95 L1805.83 1208.95 L1806.42 1208.95 L1807 1208.95 L1807.59 1208.95 L1808.18 1208.95 L1808.76 1208.95 L1809.35 1208.95 L1809.94 1208.95 L1810.52 1208.95 L1811.11 1208.95 L1811.69 1208.95 L1812.28 1208.95 L1812.87 1208.95 L1813.45 1208.95 L1814.04 1208.95 L1814.63 1208.95 L1815.21 1208.95 L1815.8 1208.95 L1816.39 1208.95 L1816.97 1208.95 L1817.56 1208.95 L1818.14 1208.95 L1818.73 1208.95 L1819.32 1208.95 L1819.9 1208.95 L1820.49 1208.95 L1821.08 1208.95 L1821.66 1208.95 L1822.25 1208.95 L1822.84 1208.95 L1823.42 1208.95 L1824.01 1208.95 L1824.6 1208.95 L1825.18 1208.95 L1825.77 1208.95 L1826.35 1208.95 L1826.94 1208.95 L1827.53 1208.95 L1828.11 1208.95 L1828.7 1208.95 L1829.29 1208.95 L1829.87 1208.95 L1830.46 1208.95 L1831.05 1208.95 L1831.63 1208.95 L1832.22 1208.95 L1832.81 1208.95 L1833.39 1208.95 L1833.98 1208.95 L1834.56 1208.95 L1835.15 1208.95 L1835.74 1208.95 L1836.32 1208.95 L1836.91 1208.95 L1837.5 1208.95 L1838.08 1208.95 L1838.67 1208.95 L1839.26 1208.95 L1839.84 1208.95 L1840.43 1208.95 L1841.01 1208.95 L1841.6 1208.95 L1842.19 1208.95 L1842.77 1208.95 L1843.36 1208.95 L1843.95 1208.95 L1844.53 1208.95 L1845.12 1208.95 L1845.71 1208.95 L1846.29 1208.95 L1846.88 1208.95 L1847.47 1208.95 L1848.05 1208.95 L1848.64 1208.95 L1849.22 1208.95 L1849.81 1208.95 L1850.4 1208.95 L1850.98 1208.95 L1851.57 1208.95 L1852.16 1208.95 L1852.74 1208.95 L1853.33 1208.95 L1853.92 1208.95 L1854.5 1208.95 L1855.09 1208.95 L1855.68 1208.95 L1856.26 1208.95 L1856.85 1208.95 L1857.43 1208.95 L1858.02 1208.95 L1858.61 1208.95 L1859.19 1208.95 L1859.78 1208.95 L1860.37 1208.95 L1860.95 1208.95 L1861.54 1208.95 L1862.13 1208.95 L1862.71 1208.95 L1863.3 1208.95 L1863.88 1208.95 L1864.47 1208.95 L1865.06 1208.95 L1865.64 1208.95 L1866.23 1208.95 L1866.82 1208.95 L1867.4 1208.95 L1867.99 1208.95 L1868.58 1208.95 L1869.16 1208.95 L1869.75 1208.95 L1870.34 1208.95 L1870.92 1208.95 L1871.51 1208.95 L1872.09 1208.95 L1872.68 1208.95 L1873.27 1208.95 L1873.85 1208.95 L1874.44 1208.95 L1875.03 1208.95 L1875.61 1208.95 L1876.2 1208.95 L1876.79 1208.95 L1877.37 1208.95 L1877.96 1208.95 L1878.55 1208.95 L1879.13 1208.95 L1879.72 1208.95 L1880.3 1208.95 L1880.89 1208.95 L1881.48 1208.95 L1882.06 1208.95 L1882.65 1208.95 L1883.24 1208.95 L1883.82 1208.95 L1884.41 1208.95 L1885 1208.95 L1885.58 1208.95 L1886.17 1208.95 L1886.76 1208.95 L1887.34 1208.95 L1887.93 1208.95 L1888.51 1208.95 L1889.1 1208.95 L1889.69 1208.95 L1890.27 1208.95 L1890.86 1208.95 L1891.45 1208.95 L1892.03 1208.95 L1892.62 1208.95 L1893.21 1208.95 L1893.79 1208.95 L1894.38 1208.95 L1894.96 1208.95 L1895.55 1208.95 L1896.14 1208.95 L1896.72 1208.95 L1897.31 1208.95 L1897.9 1208.95 L1898.48 1208.95 L1899.07 1208.95 L1899.66 1208.95 L1900.24 1208.95 L1900.83 1208.95 L1901.42 1208.95 L1902 1208.95 L1902.59 1208.95 L1903.17 1208.95 L1903.76 1208.95 L1904.35 1208.95 L1904.93 1208.95 L1905.52 1208.95 L1906.11 1208.95 L1906.69 1208.95 L1907.28 1208.95 L1907.87 1208.95 L1908.45 1208.95 L1909.04 1208.95 L1909.63 1208.95 L1910.21 1208.95 L1910.8 1208.95 L1911.38 1208.95 L1911.97 1208.95 L1912.56 1208.95 L1913.14 1208.95 L1913.73 1208.95 L1914.32 1208.95 L1914.9 1208.95 L1915.49 1208.95 L1916.08 1208.95 L1916.66 1208.95 L1917.25 1208.95 L1917.83 1208.95 L1918.42 1208.95 L1919.01 1208.95 L1919.59 1208.95 L1920.18 1208.95 L1920.77 1208.95 L1921.35 1208.95 L1921.94 1208.95 L1922.53 1208.95 L1923.11 1208.95 L1923.7 1208.95 L1924.29 1208.95 L1924.87 1208.95 L1925.46 1208.95 L1926.04 1208.95 L1926.63 1208.95 L1927.22 1208.95 L1927.8 1208.95 L1928.39 1208.95 L1928.98 1208.95 L1929.56 1208.95 L1930.15 1208.95 L1930.74 1208.95 L1931.32 1208.95 L1931.91 1208.95 L1932.5 1208.95 L1933.08 1208.95 L1933.67 1208.95 L1934.25 1208.95 L1934.84 1208.95 L1935.43 1208.95 L1936.01 1208.95 L1936.6 1208.95 L1937.19 1208.95 L1937.77 1208.95 L1938.36 1208.95 L1938.95 1208.95 L1939.53 1208.95 L1940.12 1208.95 L1940.71 1208.95 L1941.29 1208.95 L1941.88 1208.95 L1942.46 1208.95 L1943.05 1208.95 L1943.64 1208.95 L1944.22 1208.95 L1944.81 1208.95 L1945.4 1208.95 L1945.98 1208.95 L1946.57 1208.95 L1947.16 1208.95 L1947.74 1208.95 L1948.33 1208.95 L1948.91 1208.95 L1949.5 1208.95 L1950.09 1208.95 L1950.67 1208.95 L1951.26 1208.95 L1951.85 1208.95 L1952.43 1208.95 L1953.02 1208.95 L1953.61 1208.95 L1954.19 1208.95 L1954.78 1208.95 L1955.37 1208.95 L1955.95 1208.95 L1956.54 1208.95 L1957.12 1208.95 L1957.71 1208.95 L1958.3 1208.95 L1958.88 1208.95 L1959.47 1208.95 L1960.06 1208.95 L1960.64 1208.95 L1961.23 1208.95 L1961.82 1208.95 L1962.4 1208.95 L1962.99 1208.95 L1963.58 1208.95 L1964.16 1208.95 L1964.75 1208.95 L1965.33 1208.95 L1965.92 1208.95 L1966.51 1208.95 L1967.09 1208.95 L1967.68 1208.95 L1968.27 1208.95 L1968.85 1208.95 L1969.44 1208.95 L1970.03 1208.95 L1970.61 1208.95 L1971.2 1208.95 L1971.78 1208.95 L1972.37 1208.95 L1972.96 1208.95 L1973.54 1208.95 L1974.13 1208.95 L1974.72 1208.95 L1975.3 1208.95 L1975.89 1208.95 L1976.48 1208.95 L1977.06 1208.95 L1977.65 1208.95 L1978.24 1208.95 L1978.82 1208.95 L1979.41 1208.95 L1979.99 1208.95 L1980.58 1208.95 L1981.17 1208.95 L1981.75 1208.95 L1982.34 1208.95 L1982.93 1208.95 L1983.51 1208.95 L1984.1 1208.95 L1984.69 1208.95 L1985.27 1208.95 L1985.86 1208.95 L1986.45 1208.95 L1987.03 1208.95 L1987.62 1208.95 L1988.2 1208.95 L1988.79 1208.95 L1989.38 1208.95 L1989.96 1208.95 L1990.55 1208.95 L1991.14 1208.95 L1991.72 1208.95 L1992.31 1208.95 L1992.9 1208.95 L1993.48 1208.95 L1994.07 1208.95 L1994.65 1208.95 L1995.24 1208.95 L1995.83 1208.95 L1996.41 1208.95 L1997 1208.95 L1997.59 1208.95 L1998.17 1208.95 L1998.76 1208.95 L1999.35 1208.95 L1999.93 1208.95 L2000.52 1208.95 L2001.11 1208.95 L2001.69 1208.95 L2002.28 1208.95 L2002.86 1208.95 L2003.45 1208.95 L2004.04 1208.95 L2004.62 1208.95 L2005.21 1208.95 L2005.8 1208.95 L2006.38 1208.95 L2006.97 1208.95 L2007.56 1208.95 L2008.14 1208.95 L2008.73 1208.95 L2009.32 1208.95 L2009.9 1208.95 L2010.49 1208.95 L2011.07 1208.95 L2011.66 1208.95 L2012.25 1208.95 L2012.83 1208.95 L2013.42 1208.95 L2014.01 1208.95 L2014.59 1208.95 L2015.18 1208.95 L2015.77 1208.95 L2016.35 1208.95 L2016.94 1208.95 L2017.53 1208.95 L2018.11 1208.95 L2018.7 1208.95 L2019.28 1208.95 L2019.87 1208.95 L2020.46 1208.95 L2021.04 1208.95 L2021.63 1208.95 L2022.22 1208.95 L2022.8 1208.95 L2023.39 1208.95 L2023.98 1208.95 L2024.56 1208.95 L2025.15 1208.95 L2025.73 1208.95 L2026.32 1208.95 L2026.91 1208.95 L2027.49 1208.95 L2028.08 1208.95 L2028.67 1208.95 L2029.25 1208.95 L2029.84 1208.95 L2030.43 1208.95 L2031.01 1208.95 L2031.6 1208.95 L2032.19 1208.95 L2032.77 1208.95 L2033.36 1208.95 L2033.94 1208.95 L2034.53 1208.95 L2035.12 1208.95 L2035.7 1208.95 L2036.29 1208.95 L2036.88 1208.95 L2037.46 1208.95 L2038.05 1208.95 L2038.64 1208.95 L2039.22 1208.95 L2039.81 1208.95 L2040.4 1208.95 L2040.98 1208.95 L2041.57 1208.95 L2042.15 1208.95 L2042.74 1208.95 L2043.33 1208.95 L2043.91 1208.95 L2044.5 1208.95 L2045.09 1208.95 L2045.67 1208.95 L2046.26 1208.95 L2046.85 1208.95 L2047.43 1208.95 L2048.02 1208.95 L2048.6 1208.95 L2049.19 1208.95 L2049.78 1208.95 L2050.36 1208.95 L2050.95 1208.95 L2051.54 1208.95 L2052.12 1208.95 L2052.71 1208.95 L2053.3 1208.95 L2053.88 1208.95 L2054.47 1208.95 L2055.06 1208.95 L2055.64 1208.95 L2056.23 1208.95 L2056.81 1208.95 L2057.4 1208.95 L2057.99 1208.95 L2058.57 1208.95 L2059.16 1208.95 L2059.75 1208.95 L2060.33 1208.95 L2060.92 1208.95 L2061.51 1208.95 L2062.09 1208.95 L2062.68 1208.95 L2063.27 1208.95 L2063.85 1208.95 L2064.44 1208.95 L2065.02 1208.95 L2065.61 1208.95 L2066.2 1208.95 L2066.78 1208.95 L2067.37 1208.95 L2067.96 1208.95 L2068.54 1208.95 L2069.13 1208.95 L2069.72 1208.95 L2070.3 1208.95 L2070.89 1208.95 L2071.48 1208.95 L2072.06 1208.95 L2072.65 1208.95 L2073.23 1208.95 L2073.82 1208.95 L2074.41 1208.95 L2074.99 1208.95 L2075.58 1208.95 L2076.17 1208.95 L2076.75 1208.95 L2077.34 1208.95 L2077.93 1208.95 L2078.51 1208.95 L2079.1 1208.95 L2079.68 1208.95 L2080.27 1208.95 L2080.86 1208.95 L2081.44 1208.95 L2082.03 1208.95 L2082.62 1208.95 L2083.2 1208.95 L2083.79 1208.95 L2084.38 1208.95 L2084.96 1208.95 L2085.55 1208.95 L2086.14 1208.95 L2086.72 1208.95 L2087.31 1208.95 L2087.89 1208.95 L2088.48 1208.95 L2089.07 1208.95 L2089.65 1208.95 L2090.24 1208.95 L2090.83 1208.95 L2091.41 1208.95 L2092 1208.95 L2092.59 1208.95 L2093.17 1208.95 L2093.76 1208.95 L2094.35 1208.95 L2094.93 1208.95 L2095.52 1208.95 L2096.1 1208.95 L2096.69 1208.95 L2097.28 1208.95 L2097.86 1208.95 L2098.45 1208.95 L2099.04 1208.95 L2099.62 1208.95 L2100.21 1208.95 L2100.8 1208.95 L2101.38 1208.95 L2101.97 1208.95 L2102.55 1208.95 L2103.14 1208.95 L2103.73 1208.95 L2104.31 1208.95 L2104.9 1208.95 L2105.49 1208.95 L2106.07 1208.95 L2106.66 1208.95 L2107.25 1208.95 L2107.83 1208.95 L2108.42 1208.95 L2109.01 1208.95 L2109.59 1208.95 L2110.18 1208.95 L2110.76 1208.95 L2111.35 1208.95 L2111.94 1208.95 L2112.52 1208.95 L2113.11 1208.95 L2113.7 1208.95 L2114.28 1208.95 L2114.87 1208.95 L2115.46 1208.95 L2116.04 1208.95 L2116.63 1208.95 L2117.22 1208.95 L2117.8 1208.95 L2118.39 1208.95 L2118.97 1208.95 L2119.56 1208.95 L2120.15 1208.95 L2120.73 1208.95 L2121.32 1208.95 L2121.91 1208.95 L2122.49 1208.95 L2123.08 1208.95 L2123.67 1208.95 L2124.25 1208.95 L2124.84 1208.95 L2125.42 1208.95 L2126.01 1208.95 L2126.6 1208.95 L2127.18 1208.95 L2127.77 1208.95 L2128.36 1208.95 L2128.94 1208.95 L2129.53 1208.95 L2130.12 1208.95 L2130.7 1208.95 L2131.29 1208.95 L2131.88 1208.95 L2132.46 1208.95 L2133.05 1208.95 L2133.63 1208.95 L2134.22 1208.95 L2134.81 1208.95 L2135.39 1208.95 L2135.98 1208.95 L2136.57 1208.95 L2137.15 1208.95 L2137.74 1208.95 L2138.33 1208.95 L2138.91 1208.95 L2139.5 1208.95 L2140.09 1208.95 L2140.67 1208.95 L2141.26 1208.95 L2141.84 1208.95 L2142.43 1208.95 L2143.02 1208.95 L2143.6 1208.95 L2144.19 1208.95 L2144.78 1208.95 L2145.36 1208.95 L2145.95 1208.95 L2146.54 1208.95 L2147.12 1208.95 L2147.71 1208.95 L2148.3 1208.95 L2148.88 1208.95 L2149.47 1208.95 L2150.05 1208.95 L2150.64 1208.95 L2151.23 1208.95 L2151.81 1208.95 L2152.4 1208.95 L2152.99 1208.95 L2153.57 1208.95 L2154.16 1208.95 L2154.75 1208.95 L2155.33 1208.95 L2155.92 1208.95 L2156.5 1208.95 L2157.09 1208.95 L2157.68 1208.95 L2158.26 1208.95 L2158.26 1208.75 L2157.68 1208.75 L2157.09 1208.75 L2156.5 1208.75 L2155.92 1208.75 L2155.33 1208.75 L2154.75 1208.75 L2154.16 1208.75 L2153.57 1208.75 L2152.99 1208.75 L2152.4 1208.75 L2151.81 1208.75 L2151.23 1208.75 L2150.64 1208.75 L2150.05 1208.75 L2149.47 1208.75 L2148.88 1208.75 L2148.3 1208.75 L2147.71 1208.75 L2147.12 1208.75 L2146.54 1208.75 L2145.95 1208.75 L2145.36 1208.75 L2144.78 1208.75 L2144.19 1208.75 L2143.6 1208.75 L2143.02 1208.75 L2142.43 1208.75 L2141.84 1208.75 L2141.26 1208.75 L2140.67 1208.75 L2140.09 1208.75 L2139.5 1208.75 L2138.91 1208.75 L2138.33 1208.75 L2137.74 1208.75 L2137.15 1208.75 L2136.57 1208.75 L2135.98 1208.75 L2135.39 1208.75 L2134.81 1208.75 L2134.22 1208.75 L2133.63 1208.75 L2133.05 1208.75 L2132.46 1208.75 L2131.88 1208.75 L2131.29 1208.75 L2130.7 1208.75 L2130.12 1208.75 L2129.53 1208.75 L2128.94 1208.75 L2128.36 1208.75 L2127.77 1208.75 L2127.18 1208.75 L2126.6 1208.75 L2126.01 1208.75 L2125.42 1208.75 L2124.84 1208.75 L2124.25 1208.75 L2123.67 1208.75 L2123.08 1208.75 L2122.49 1208.75 L2121.91 1208.75 L2121.32 1208.75 L2120.73 1208.75 L2120.15 1208.75 L2119.56 1208.75 L2118.97 1208.75 L2118.39 1208.75 L2117.8 1208.75 L2117.22 1208.75 L2116.63 1208.75 L2116.04 1208.75 L2115.46 1208.75 L2114.87 1208.75 L2114.28 1208.75 L2113.7 1208.75 L2113.11 1208.75 L2112.52 1208.75 L2111.94 1208.75 L2111.35 1208.75 L2110.76 1208.75 L2110.18 1208.75 L2109.59 1208.75 L2109.01 1208.75 L2108.42 1208.75 L2107.83 1208.75 L2107.25 1208.75 L2106.66 1208.75 L2106.07 1208.75 L2105.49 1208.75 L2104.9 1208.75 L2104.31 1208.75 L2103.73 1208.75 L2103.14 1208.75 L2102.55 1208.75 L2101.97 1208.75 L2101.38 1208.75 L2100.8 1208.75 L2100.21 1208.75 L2099.62 1208.75 L2099.04 1208.75 L2098.45 1208.75 L2097.86 1208.75 L2097.28 1208.75 L2096.69 1208.75 L2096.1 1208.75 L2095.52 1208.75 L2094.93 1208.75 L2094.35 1208.75 L2093.76 1208.75 L2093.17 1208.75 L2092.59 1208.75 L2092 1208.75 L2091.41 1208.75 L2090.83 1208.75 L2090.24 1208.75 L2089.65 1208.75 L2089.07 1208.75 L2088.48 1208.75 L2087.89 1208.75 L2087.31 1208.75 L2086.72 1208.75 L2086.14 1208.75 L2085.55 1208.75 L2084.96 1208.75 L2084.38 1208.75 L2083.79 1208.75 L2083.2 1208.75 L2082.62 1208.75 L2082.03 1208.75 L2081.44 1208.75 L2080.86 1208.75 L2080.27 1208.75 L2079.68 1208.75 L2079.1 1208.75 L2078.51 1208.75 L2077.93 1208.75 L2077.34 1208.75 L2076.75 1208.75 L2076.17 1208.75 L2075.58 1208.75 L2074.99 1208.75 L2074.41 1208.75 L2073.82 1208.75 L2073.23 1208.75 L2072.65 1208.75 L2072.06 1208.75 L2071.48 1208.75 L2070.89 1208.75 L2070.3 1208.75 L2069.72 1208.75 L2069.13 1208.75 L2068.54 1208.75 L2067.96 1208.75 L2067.37 1208.75 L2066.78 1208.75 L2066.2 1208.75 L2065.61 1208.75 L2065.02 1208.75 L2064.44 1208.75 L2063.85 1208.75 L2063.27 1208.75 L2062.68 1208.75 L2062.09 1208.75 L2061.51 1208.75 L2060.92 1208.75 L2060.33 1208.75 L2059.75 1208.75 L2059.16 1208.75 L2058.57 1208.75 L2057.99 1208.75 L2057.4 1208.75 L2056.81 1208.75 L2056.23 1208.75 L2055.64 1208.75 L2055.06 1208.75 L2054.47 1208.75 L2053.88 1208.75 L2053.3 1208.75 L2052.71 1208.75 L2052.12 1208.75 L2051.54 1208.75 L2050.95 1208.75 L2050.36 1208.75 L2049.78 1208.75 L2049.19 1208.75 L2048.6 1208.75 L2048.02 1208.75 L2047.43 1208.75 L2046.85 1208.75 L2046.26 1208.75 L2045.67 1208.75 L2045.09 1208.75 L2044.5 1208.75 L2043.91 1208.75 L2043.33 1208.75 L2042.74 1208.75 L2042.15 1208.75 L2041.57 1208.75 L2040.98 1208.75 L2040.4 1208.75 L2039.81 1208.75 L2039.22 1208.75 L2038.64 1208.75 L2038.05 1208.75 L2037.46 1208.75 L2036.88 1208.75 L2036.29 1208.75 L2035.7 1208.75 L2035.12 1208.75 L2034.53 1208.75 L2033.94 1208.75 L2033.36 1208.75 L2032.77 1208.75 L2032.19 1208.75 L2031.6 1208.75 L2031.01 1208.75 L2030.43 1208.75 L2029.84 1208.75 L2029.25 1208.75 L2028.67 1208.75 L2028.08 1208.75 L2027.49 1208.75 L2026.91 1208.75 L2026.32 1208.75 L2025.73 1208.75 L2025.15 1208.75 L2024.56 1208.75 L2023.98 1208.75 L2023.39 1208.75 L2022.8 1208.75 L2022.22 1208.75 L2021.63 1208.75 L2021.04 1208.75 L2020.46 1208.75 L2019.87 1208.75 L2019.28 1208.75 L2018.7 1208.75 L2018.11 1208.75 L2017.53 1208.75 L2016.94 1208.75 L2016.35 1208.75 L2015.77 1208.75 L2015.18 1208.75 L2014.59 1208.75 L2014.01 1208.75 L2013.42 1208.75 L2012.83 1208.75 L2012.25 1208.75 L2011.66 1208.75 L2011.07 1208.75 L2010.49 1208.75 L2009.9 1208.75 L2009.32 1208.75 L2008.73 1208.75 L2008.14 1208.75 L2007.56 1208.75 L2006.97 1208.75 L2006.38 1208.75 L2005.8 1208.75 L2005.21 1208.75 L2004.62 1208.75 L2004.04 1208.75 L2003.45 1208.75 L2002.86 1208.75 L2002.28 1208.75 L2001.69 1208.75 L2001.11 1208.75 L2000.52 1208.75 L1999.93 1208.75 L1999.35 1208.75 L1998.76 1208.75 L1998.17 1208.75 L1997.59 1208.75 L1997 1208.75 L1996.41 1208.75 L1995.83 1208.75 L1995.24 1208.75 L1994.65 1208.75 L1994.07 1208.75 L1993.48 1208.75 L1992.9 1208.75 L1992.31 1208.75 L1991.72 1208.75 L1991.14 1208.75 L1990.55 1208.75 L1989.96 1208.75 L1989.38 1208.75 L1988.79 1208.75 L1988.2 1208.75 L1987.62 1208.75 L1987.03 1208.75 L1986.45 1208.75 L1985.86 1208.75 L1985.27 1208.75 L1984.69 1208.75 L1984.1 1208.75 L1983.51 1208.75 L1982.93 1208.75 L1982.34 1208.75 L1981.75 1208.75 L1981.17 1208.75 L1980.58 1208.75 L1979.99 1208.75 L1979.41 1208.75 L1978.82 1208.75 L1978.24 1208.75 L1977.65 1208.75 L1977.06 1208.75 L1976.48 1208.75 L1975.89 1208.75 L1975.3 1208.75 L1974.72 1208.75 L1974.13 1208.75 L1973.54 1208.75 L1972.96 1208.75 L1972.37 1208.75 L1971.78 1208.75 L1971.2 1208.75 L1970.61 1208.75 L1970.03 1208.75 L1969.44 1208.75 L1968.85 1208.75 L1968.27 1208.75 L1967.68 1208.75 L1967.09 1208.75 L1966.51 1208.75 L1965.92 1208.75 L1965.33 1208.75 L1964.75 1208.75 L1964.16 1208.75 L1963.58 1208.75 L1962.99 1208.75 L1962.4 1208.75 L1961.82 1208.75 L1961.23 1208.75 L1960.64 1208.75 L1960.06 1208.75 L1959.47 1208.75 L1958.88 1208.75 L1958.3 1208.75 L1957.71 1208.75 L1957.12 1208.75 L1956.54 1208.75 L1955.95 1208.75 L1955.37 1208.75 L1954.78 1208.75 L1954.19 1208.75 L1953.61 1208.75 L1953.02 1208.75 L1952.43 1208.75 L1951.85 1208.75 L1951.26 1208.75 L1950.67 1208.75 L1950.09 1208.75 L1949.5 1208.75 L1948.91 1208.75 L1948.33 1208.75 L1947.74 1208.75 L1947.16 1208.75 L1946.57 1208.75 L1945.98 1208.75 L1945.4 1208.75 L1944.81 1208.75 L1944.22 1208.75 L1943.64 1208.75 L1943.05 1208.75 L1942.46 1208.75 L1941.88 1208.75 L1941.29 1208.75 L1940.71 1208.75 L1940.12 1208.75 L1939.53 1208.75 L1938.95 1208.75 L1938.36 1208.75 L1937.77 1208.75 L1937.19 1208.75 L1936.6 1208.75 L1936.01 1208.75 L1935.43 1208.75 L1934.84 1208.75 L1934.25 1208.75 L1933.67 1208.75 L1933.08 1208.75 L1932.5 1208.75 L1931.91 1208.75 L1931.32 1208.75 L1930.74 1208.75 L1930.15 1208.75 L1929.56 1208.75 L1928.98 1208.75 L1928.39 1208.75 L1927.8 1208.75 L1927.22 1208.75 L1926.63 1208.75 L1926.04 1208.75 L1925.46 1208.75 L1924.87 1208.75 L1924.29 1208.75 L1923.7 1208.75 L1923.11 1208.75 L1922.53 1208.75 L1921.94 1208.75 L1921.35 1208.75 L1920.77 1208.75 L1920.18 1208.75 L1919.59 1208.75 L1919.01 1208.75 L1918.42 1208.75 L1917.83 1208.75 L1917.25 1208.75 L1916.66 1208.75 L1916.08 1208.75 L1915.49 1208.75 L1914.9 1208.75 L1914.32 1208.75 L1913.73 1208.75 L1913.14 1208.75 L1912.56 1208.75 L1911.97 1208.75 L1911.38 1208.75 L1910.8 1208.75 L1910.21 1208.75 L1909.63 1208.75 L1909.04 1208.75 L1908.45 1208.75 L1907.87 1208.75 L1907.28 1208.75 L1906.69 1208.75 L1906.11 1208.75 L1905.52 1208.75 L1904.93 1208.75 L1904.35 1208.75 L1903.76 1208.75 L1903.17 1208.75 L1902.59 1208.75 L1902 1208.75 L1901.42 1208.75 L1900.83 1208.75 L1900.24 1208.75 L1899.66 1208.75 L1899.07 1208.75 L1898.48 1208.75 L1897.9 1208.75 L1897.31 1208.75 L1896.72 1208.75 L1896.14 1208.75 L1895.55 1208.75 L1894.96 1208.75 L1894.38 1208.75 L1893.79 1208.75 L1893.21 1208.75 L1892.62 1208.75 L1892.03 1208.75 L1891.45 1208.75 L1890.86 1208.75 L1890.27 1208.75 L1889.69 1208.75 L1889.1 1208.75 L1888.51 1208.75 L1887.93 1208.75 L1887.34 1208.75 L1886.76 1208.75 L1886.17 1208.75 L1885.58 1208.75 L1885 1208.75 L1884.41 1208.75 L1883.82 1208.75 L1883.24 1208.75 L1882.65 1208.75 L1882.06 1208.75 L1881.48 1208.75 L1880.89 1208.75 L1880.3 1208.75 L1879.72 1208.75 L1879.13 1208.75 L1878.55 1208.75 L1877.96 1208.75 L1877.37 1208.75 L1876.79 1208.75 L1876.2 1208.75 L1875.61 1208.75 L1875.03 1208.75 L1874.44 1208.75 L1873.85 1208.75 L1873.27 1208.75 L1872.68 1208.75 L1872.09 1208.75 L1871.51 1208.75 L1870.92 1208.75 L1870.34 1208.75 L1869.75 1208.75 L1869.16 1208.75 L1868.58 1208.75 L1867.99 1208.75 L1867.4 1208.75 L1866.82 1208.75 L1866.23 1208.75 L1865.64 1208.75 L1865.06 1208.75 L1864.47 1208.75 L1863.88 1208.75 L1863.3 1208.75 L1862.71 1208.75 L1862.13 1208.75 L1861.54 1208.75 L1860.95 1208.75 L1860.37 1208.75 L1859.78 1208.75 L1859.19 1208.75 L1858.61 1208.75 L1858.02 1208.75 L1857.43 1208.75 L1856.85 1208.75 L1856.26 1208.75 L1855.68 1208.75 L1855.09 1208.75 L1854.5 1208.75 L1853.92 1208.75 L1853.33 1208.75 L1852.74 1208.75 L1852.16 1208.75 L1851.57 1208.75 L1850.98 1208.75 L1850.4 1208.75 L1849.81 1208.75 L1849.22 1208.75 L1848.64 1208.75 L1848.05 1208.75 L1847.47 1208.75 L1846.88 1208.75 L1846.29 1208.75 L1845.71 1208.75 L1845.12 1208.75 L1844.53 1208.75 L1843.95 1208.75 L1843.36 1208.75 L1842.77 1208.75 L1842.19 1208.75 L1841.6 1208.75 L1841.01 1208.75 L1840.43 1208.75 L1839.84 1208.75 L1839.26 1208.75 L1838.67 1208.75 L1838.08 1208.75 L1837.5 1208.75 L1836.91 1208.75 L1836.32 1208.75 L1835.74 1208.75 L1835.15 1208.75 L1834.56 1208.75 L1833.98 1208.75 L1833.39 1208.75 L1832.81 1208.75 L1832.22 1208.75 L1831.63 1208.75 L1831.05 1208.75 L1830.46 1208.75 L1829.87 1208.75 L1829.29 1208.75 L1828.7 1208.75 L1828.11 1208.75 L1827.53 1208.75 L1826.94 1208.75 L1826.35 1208.75 L1825.77 1208.75 L1825.18 1208.75 L1824.6 1208.75 L1824.01 1208.75 L1823.42 1208.75 L1822.84 1208.75 L1822.25 1208.75 L1821.66 1208.75 L1821.08 1208.75 L1820.49 1208.75 L1819.9 1208.75 L1819.32 1208.75 L1818.73 1208.75 L1818.14 1208.75 L1817.56 1208.75 L1816.97 1208.75 L1816.39 1208.75 L1815.8 1208.75 L1815.21 1208.75 L1814.63 1208.75 L1814.04 1208.75 L1813.45 1208.75 L1812.87 1208.75 L1812.28 1208.75 L1811.69 1208.75 L1811.11 1208.75 L1810.52 1208.75 L1809.94 1208.75 L1809.35 1208.75 L1808.76 1208.75 L1808.18 1208.75 L1807.59 1208.75 L1807 1208.75 L1806.42 1208.75 L1805.83 1208.75 L1805.24 1208.75 L1804.66 1208.75 L1804.07 1208.75 L1803.48 1208.75 L1802.9 1208.75 L1802.31 1208.75 L1801.73 1208.75 L1801.14 1208.75 L1800.55 1208.75 L1799.97 1208.75 L1799.38 1208.75 L1798.79 1208.75 L1798.21 1208.75 L1797.62 1208.75 L1797.03 1208.75 L1796.45 1208.75 L1795.86 1208.75 L1795.27 1208.75 L1794.69 1208.75 L1794.1 1208.75 L1793.52 1208.75 L1792.93 1208.75 L1792.34 1208.75 L1791.76 1208.75 L1791.17 1208.75 L1790.58 1208.75 L1790 1208.75 L1789.41 1208.75 L1788.82 1208.75 L1788.24 1208.75 L1787.65 1208.75 L1787.06 1208.75 L1786.48 1208.75 L1785.89 1208.75 L1785.31 1208.75 L1784.72 1208.75 L1784.13 1208.75 L1783.55 1208.75 L1782.96 1208.75 L1782.37 1208.75 L1781.79 1208.75 L1781.2 1208.75 L1780.61 1208.75 L1780.03 1208.75 L1779.44 1208.75 L1778.86 1208.75 L1778.27 1208.75 L1777.68 1208.75 L1777.1 1208.75 L1776.51 1208.75 L1775.92 1208.75 L1775.34 1208.75 L1774.75 1208.75 L1774.16 1208.75 L1773.58 1208.75 L1772.99 1208.75 L1772.4 1208.75 L1771.82 1208.75 L1771.23 1208.75 L1770.65 1208.75 L1770.06 1208.75 L1769.47 1208.75 L1768.89 1208.75 L1768.3 1208.75 L1767.71 1208.75 L1767.13 1208.75 L1766.54 1208.75 L1765.95 1208.75 L1765.37 1208.75 L1764.78 1208.75 L1764.19 1208.75 L1763.61 1208.75 L1763.02 1208.75 L1762.44 1208.75 L1761.85 1208.75 L1761.26 1208.75 L1760.68 1208.75 L1760.09 1208.75 L1759.5 1208.75 L1758.92 1208.75 L1758.33 1208.75 L1757.74 1208.75 L1757.16 1208.75 L1756.57 1208.75 L1755.99 1208.75 L1755.4 1208.75 L1754.81 1208.75 L1754.23 1208.75 L1753.64 1208.75 L1753.05 1208.75 L1752.47 1208.75 L1751.88 1208.75 L1751.29 1208.75 L1750.71 1208.75 L1750.12 1208.75 L1749.53 1208.75 L1748.95 1208.75 L1748.36 1208.75 L1747.78 1208.75 L1747.19 1208.75 L1746.6 1208.75 L1746.02 1208.75 L1745.43 1208.75 L1744.84 1208.75 L1744.26 1208.75 L1743.67 1208.75 L1743.08 1208.75 L1742.5 1208.75 L1741.91 1208.75 L1741.32 1208.75 L1740.74 1208.75 L1740.15 1208.75 L1739.57 1208.75 L1738.98 1208.75 L1738.39 1208.75 L1737.81 1208.75 L1737.22 1208.75 L1736.63 1208.75 L1736.05 1208.75 L1735.46 1208.75 L1734.87 1208.75 L1734.29 1208.75 L1733.7 1208.75 L1733.11 1208.75 L1732.53 1208.75 L1731.94 1208.75 L1731.36 1208.75 L1730.77 1208.75 L1730.18 1208.75 L1729.6 1208.75 L1729.01 1208.75 L1728.42 1208.75 L1727.84 1208.75 L1727.25 1208.75 L1726.66 1208.75 L1726.08 1208.75 L1725.49 1208.75 L1724.91 1208.75 L1724.32 1208.75 L1723.73 1208.75 L1723.15 1208.75 L1722.56 1208.75 L1721.97 1208.75 L1721.39 1208.75 L1720.8 1208.75 L1720.21 1208.75 L1719.63 1208.75 L1719.04 1208.75 L1718.45 1208.75 L1717.87 1208.75 L1717.28 1208.75 L1716.7 1208.75 L1716.11 1208.75 L1715.52 1208.75 L1714.94 1208.75 L1714.35 1208.75 L1713.76 1208.75 L1713.18 1208.75 L1712.59 1208.75 L1712 1208.75 L1711.42 1208.75 L1710.83 1208.75 L1710.24 1208.75 L1709.66 1208.75 L1709.07 1208.75 L1708.49 1208.75 L1707.9 1208.75 L1707.31 1208.75 L1706.73 1208.75 L1706.14 1208.75 L1705.55 1208.75 L1704.97 1208.75 L1704.38 1208.75 L1703.79 1208.75 L1703.21 1208.75 L1702.62 1208.75 L1702.04 1208.75 L1701.45 1208.75 L1700.86 1208.75 L1700.28 1208.75 L1699.69 1208.75 L1699.1 1208.75 L1698.52 1208.75 L1697.93 1208.75 L1697.34 1208.75 L1696.76 1208.75 L1696.17 1208.75 L1695.58 1208.75 L1695 1208.75 L1694.41 1208.75 L1693.83 1208.75 L1693.24 1208.75 L1692.65 1208.75 L1692.07 1208.75 L1691.48 1208.75 L1690.89 1208.75 L1690.31 1208.75 L1689.72 1208.75 L1689.13 1208.75 L1688.55 1208.75 L1687.96 1208.75 L1687.37 1208.75 L1686.79 1208.75 L1686.2 1208.75 L1685.62 1208.75 L1685.03 1208.75 L1684.44 1208.75 L1683.86 1208.75 L1683.27 1208.75 L1682.68 1208.75 L1682.1 1208.75 L1681.51 1208.75 L1680.92 1208.75 L1680.34 1208.75 L1679.75 1208.75 L1679.17 1208.75 L1678.58 1208.75 L1677.99 1208.75 L1677.41 1208.75 L1676.82 1208.75 L1676.23 1208.75 L1675.65 1208.75 L1675.06 1208.75 L1674.47 1208.75 L1673.89 1208.75 L1673.3 1208.75 L1672.71 1208.75 L1672.13 1208.75 L1671.54 1208.75 L1670.96 1208.75 L1670.37 1208.75 L1669.78 1208.75 L1669.2 1208.75 L1668.61 1208.75 L1668.02 1208.75 L1667.44 1208.75 L1666.85 1208.75 L1666.26 1208.75 L1665.68 1208.75 L1665.09 1208.75 L1664.5 1208.75 L1663.92 1208.75 L1663.33 1208.75 L1662.75 1208.75 L1662.16 1208.75 L1661.57 1208.75 L1660.99 1208.75 L1660.4 1208.75 L1659.81 1208.75 L1659.23 1208.75 L1658.64 1208.75 L1658.05 1208.75 L1657.47 1208.75 L1656.88 1208.75 L1656.29 1208.75 L1655.71 1208.75 L1655.12 1208.75 L1654.54 1208.75 L1653.95 1208.75 L1653.36 1208.75 L1652.78 1208.75 L1652.19 1208.75 L1651.6 1208.75 L1651.02 1208.75 L1650.43 1208.75 L1649.84 1208.75 L1649.26 1208.75 L1648.67 1208.75 L1648.09 1208.75 L1647.5 1208.75 L1646.91 1208.75 L1646.33 1208.75 L1645.74 1208.75 L1645.15 1208.75 L1644.57 1208.75 L1643.98 1208.75 L1643.39 1208.75 L1642.81 1208.75 L1642.22 1208.75 L1641.63 1208.75 L1641.05 1208.75 L1640.46 1208.75 L1639.88 1208.75 L1639.29 1208.75 L1638.7 1208.75 L1638.12 1208.75 L1637.53 1208.75 L1636.94 1208.75 L1636.36 1208.75 L1635.77 1208.75 L1635.18 1208.75 L1634.6 1208.75 L1634.01 1208.75 L1633.42 1208.75 L1632.84 1208.75 L1632.25 1208.75 L1631.67 1208.75 L1631.08 1208.75 L1630.49 1208.75 L1629.91 1208.75 L1629.32 1208.75 L1628.73 1208.75 L1628.15 1208.75 L1627.56 1208.75 L1626.97 1208.75 L1626.39 1208.75 L1625.8 1208.75 L1625.22 1208.75 L1624.63 1208.75 L1624.04 1208.75 L1623.46 1208.75 L1622.87 1208.75 L1622.28 1208.75 L1621.7 1208.75 L1621.11 1208.75 L1620.52 1208.75 L1619.94 1208.75 L1619.35 1208.75 L1618.76 1208.75 L1618.18 1208.75 L1617.59 1208.75 L1617.01 1208.75 L1616.42 1208.75 L1615.83 1208.75 L1615.25 1208.75 L1614.66 1208.75 L1614.07 1208.75 L1613.49 1208.75 L1612.9 1208.75 L1612.31 1208.75 L1611.73 1208.75 L1611.14 1208.75 L1610.55 1208.75 L1609.97 1208.75 L1609.38 1208.75 L1608.8 1208.75 L1608.21 1208.75 L1607.62 1208.75 L1607.04 1208.75 L1606.45 1208.75 L1605.86 1208.75 L1605.28 1208.75 L1604.69 1208.75 L1604.1 1208.75 L1603.52 1208.75 L1602.93 1208.75 L1602.34 1208.75 L1601.76 1208.75 L1601.17 1208.75 L1600.59 1208.75 L1600 1208.75 L1599.41 1208.75 L1598.83 1208.75 L1598.24 1208.75 L1597.65 1208.75 L1597.07 1208.75 L1596.48 1208.75 L1595.89 1208.75 L1595.31 1208.75 L1594.72 1208.75 L1594.14 1208.75 L1593.55 1208.75 L1592.96 1208.75 L1592.38 1208.75 L1591.79 1208.75 L1591.2 1208.75 L1590.62 1208.75 L1590.03 1208.75 L1589.44 1208.75 L1588.86 1208.75 L1588.27 1208.75 L1587.68 1208.75 L1587.1 1208.75 L1586.51 1208.75 L1585.93 1208.75 L1585.34 1208.75 L1584.75 1208.75 L1584.17 1208.75 L1583.58 1208.75 L1582.99 1208.75 L1582.41 1208.75 L1581.82 1208.75 L1581.23 1208.75 L1580.65 1208.75 L1580.06 1208.75 L1579.47 1208.75 L1578.89 1208.75 L1578.3 1208.75 L1577.72 1208.75 L1577.13 1208.75 L1576.54 1208.75 L1575.96 1208.75 L1575.37 1208.75 L1574.78 1208.75 L1574.2 1208.75 L1573.61 1208.75 L1573.02 1208.75 L1572.44 1208.75 L1571.85 1208.75 L1571.27 1208.75 L1570.68 1208.75 L1570.09 1208.75 L1569.51 1208.75 L1568.92 1208.75 L1568.33 1208.75 L1567.75 1208.75 L1567.16 1208.75 L1566.57 1208.75 L1565.99 1208.75 L1565.4 1208.75 L1564.81 1208.75 L1564.23 1208.75 L1563.64 1208.75 L1563.06 1208.75 L1562.47 1208.75 L1561.88 1208.75 L1561.3 1208.75 L1560.71 1208.75 L1560.12 1208.75 L1559.54 1208.75 L1558.95 1208.75 L1558.36 1208.75 L1557.78 1208.75 L1557.19 1208.75 L1556.6 1208.75 L1556.02 1208.75 L1555.43 1208.75 L1554.85 1208.75 L1554.26 1208.75 L1553.67 1208.75 L1553.09 1208.75 L1552.5 1208.75 L1551.91 1208.75 L1551.33 1208.75 L1550.74 1208.75 L1550.15 1208.75 L1549.57 1208.75 L1548.98 1208.75 L1548.4 1208.75 L1547.81 1208.75 L1547.22 1208.75 L1546.64 1208.75 L1546.05 1208.75 L1545.46 1208.75 L1544.88 1208.75 L1544.29 1208.75 L1543.7 1208.75 L1543.12 1208.75 L1542.53 1208.75 L1541.94 1208.75 L1541.36 1208.75 L1540.77 1208.75 L1540.19 1208.75 L1539.6 1208.75 L1539.01 1208.75 L1538.43 1208.75 L1537.84 1208.75 L1537.25 1208.75 L1536.67 1208.75 L1536.08 1208.75 L1535.49 1208.75 L1534.91 1208.75 L1534.32 1208.75 L1533.73 1208.75 L1533.15 1208.75 L1532.56 1208.75 L1531.98 1208.75 L1531.39 1208.75 L1530.8 1208.75 L1530.22 1208.75 L1529.63 1208.75 L1529.04 1208.75 L1528.46 1208.75 L1527.87 1208.75 L1527.28 1208.75 L1526.7 1208.75 L1526.11 1208.75 L1525.52 1208.75 L1524.94 1208.75 L1524.35 1208.75 L1523.77 1208.75 L1523.18 1208.75 L1522.59 1208.75 L1522.01 1208.75 L1521.42 1208.75 L1520.83 1208.75 L1520.25 1208.75 L1519.66 1208.75 L1519.07 1208.75 L1518.49 1208.75 L1517.9 1208.75 L1517.32 1208.75 L1516.73 1208.75 L1516.14 1208.75 L1515.56 1208.75 L1514.97 1208.75 L1514.38 1208.75 L1513.8 1208.75 L1513.21 1208.75 L1512.62 1208.75 L1512.04 1208.75 L1511.45 1208.75 L1510.86 1208.75 L1510.28 1208.75 L1509.69 1208.75 L1509.11 1208.75 L1508.52 1208.75 L1507.93 1208.75 L1507.35 1208.75 L1506.76 1208.75 L1506.17 1208.75 L1505.59 1208.75 L1505 1208.75 L1504.41 1208.75 L1503.83 1208.75 L1503.24 1208.75 L1502.65 1208.75 L1502.07 1208.75 L1501.48 1208.75 L1500.9 1208.75 L1500.31 1208.75 L1499.72 1208.75 L1499.14 1208.75 L1498.55 1208.75 L1497.96 1208.75 L1497.38 1208.75 L1496.79 1208.75 L1496.2 1208.75 L1495.62 1208.75 L1495.03 1208.75 L1494.45 1208.75 L1493.86 1208.75 L1493.27 1208.75 L1492.69 1208.75 L1492.1 1208.75 L1491.51 1208.75 L1490.93 1208.75 L1490.34 1208.75 L1489.75 1208.75 L1489.17 1208.75 L1488.58 1208.75 L1487.99 1208.75 L1487.41 1208.75 L1486.82 1208.75 L1486.24 1208.75 L1485.65 1208.75 L1485.06 1208.75 L1484.48 1208.75 L1483.89 1208.75 L1483.3 1208.75 L1482.72 1208.75 L1482.13 1208.75 L1481.54 1208.75 L1480.96 1208.75 L1480.37 1208.75 L1479.78 1208.75 L1479.2 1208.75 L1478.61 1208.75 L1478.03 1208.75 L1477.44 1208.75 L1476.85 1208.75 L1476.27 1208.75 L1475.68 1208.75 L1475.09 1208.75 L1474.51 1208.75 L1473.92 1208.75 L1473.33 1208.75 L1472.75 1208.75 L1472.16 1208.75 L1471.57 1208.75 L1470.99 1208.75 L1470.4 1208.75 L1469.82 1208.75 L1469.23 1208.75 L1468.64 1208.75 L1468.06 1208.75 L1467.47 1208.75 L1466.88 1208.75 L1466.3 1208.75 L1465.71 1208.75 L1465.12 1208.75 L1464.54 1208.75 L1463.95 1208.75 L1463.37 1208.75 L1462.78 1208.75 L1462.19 1208.75 L1461.61 1208.75 L1461.02 1208.75 L1460.43 1208.75 L1459.85 1208.75 L1459.26 1208.75 L1458.67 1208.75 L1458.09 1208.75 L1457.5 1208.75 L1456.91 1208.75 L1456.33 1208.75 L1455.74 1208.75 L1455.16 1208.75 L1454.57 1208.75 L1453.98 1208.75 L1453.4 1208.75 L1452.81 1208.75 L1452.22 1208.75 L1451.64 1208.75 L1451.05 1208.75 L1450.46 1208.75 L1449.88 1208.75 L1449.29 1208.75 L1448.7 1208.75 L1448.12 1208.75 L1447.53 1208.75 L1446.95 1208.75 L1446.36 1208.75 L1445.77 1208.75 L1445.19 1208.75 L1444.6 1208.75 L1444.01 1208.75 L1443.43 1208.75 L1442.84 1208.75 L1442.25 1208.75 L1441.67 1208.75 L1441.08 1208.75 L1440.5 1208.75 L1439.91 1208.75 L1439.32 1208.75 L1438.74 1208.75 L1438.15 1208.75 L1437.56 1208.75 L1436.98 1208.75 L1436.39 1208.75 L1435.8 1208.75 L1435.22 1208.75 L1434.63 1208.75 L1434.04 1208.75 L1433.46 1208.75 L1432.87 1208.75 L1432.29 1208.75 L1431.7 1208.75 L1431.11 1208.75 L1430.53 1208.75 L1429.94 1208.75 L1429.35 1208.75 L1428.77 1208.75 L1428.18 1208.75 L1427.59 1208.75 L1427.01 1208.75 L1426.42 1208.75 L1425.83 1208.75 L1425.25 1208.75 L1424.66 1208.75 L1424.08 1208.75 L1423.49 1208.75 L1422.9 1208.75 L1422.32 1208.75 L1421.73 1208.75 L1421.14 1208.75 L1420.56 1208.75 L1419.97 1208.75 L1419.38 1208.75 L1418.8 1208.75 L1418.21 1208.75 L1417.63 1208.75 L1417.04 1208.75 L1416.45 1208.75 L1415.87 1208.75 L1415.28 1208.75 L1414.69 1208.75 L1414.11 1208.75 L1413.52 1208.75 L1412.93 1208.75 L1412.35 1208.75 L1411.76 1208.75 L1411.17 1208.75 L1410.59 1208.75 L1410 1208.75 L1409.42 1208.75 L1408.83 1208.75 L1408.24 1208.75 L1407.66 1208.75 L1407.07 1208.75 L1406.48 1208.75 L1405.9 1208.75 L1405.31 1208.75 L1404.72 1208.75 L1404.14 1208.75 L1403.55 1208.75 L1402.96 1208.75 L1402.38 1208.75 L1401.79 1208.75 L1401.21 1208.75 L1400.62 1208.75 L1400.03 1208.75 L1399.45 1208.75 L1398.86 1208.75 L1398.27 1208.75 L1397.69 1208.75 L1397.1 1208.75 L1396.51 1208.75 L1395.93 1208.75 L1395.34 1208.75 L1394.75 1208.75 L1394.17 1208.75 L1393.58 1208.75 L1393 1208.75 L1392.41 1208.75 L1391.82 1208.75 L1391.24 1208.75 L1390.65 1208.75 L1390.06 1208.75 L1389.48 1208.75 L1388.89 1208.75 L1388.3 1208.75 L1387.72 1208.75 L1387.13 1208.75 L1386.55 1208.75 L1385.96 1208.75 L1385.37 1208.75 L1384.79 1208.75 L1384.2 1208.75 L1383.61 1208.75 L1383.03 1208.75 L1382.44 1208.75 L1381.85 1208.75 L1381.27 1208.75 L1380.68 1208.75 L1380.09 1208.75 L1379.51 1208.75 L1378.92 1208.75 L1378.34 1208.75 L1377.75 1208.75 L1377.16 1208.75 L1376.58 1208.75 L1375.99 1208.75 L1375.4 1208.75 L1374.82 1208.75 L1374.23 1208.75 L1373.64 1208.75 L1373.06 1208.75 L1372.47 1208.75 L1371.88 1208.75 L1371.3 1208.75 L1370.71 1208.75 L1370.13 1208.75 L1369.54 1208.75 L1368.95 1208.75 L1368.37 1208.75 L1367.78 1208.75 L1367.19 1208.75 L1366.61 1208.75 L1366.02 1208.75 L1365.43 1208.75 L1364.85 1208.75 L1364.26 1208.75 L1363.68 1208.75 L1363.09 1208.75 L1362.5 1208.75 L1361.92 1208.75 L1361.33 1208.75 L1360.74 1208.75 L1360.16 1208.75 L1359.57 1208.75 L1358.98 1208.75 L1358.4 1208.75 L1357.81 1208.75 L1357.22 1208.75 L1356.64 1208.75 L1356.05 1208.75 L1355.47 1208.75 L1354.88 1208.75 L1354.29 1208.75 L1353.71 1208.75 L1353.12 1208.75 L1352.53 1208.75 L1351.95 1208.75 L1351.36 1208.75 L1350.77 1208.75 L1350.19 1208.75 L1349.6 1208.75 L1349.01 1208.75 L1348.43 1208.75 L1347.84 1208.75 L1347.26 1208.75 L1346.67 1208.75 L1346.08 1208.75 L1345.5 1208.75 L1344.91 1208.75 L1344.32 1208.75 L1343.74 1208.75 L1343.15 1208.75 L1342.56 1208.75 L1341.98 1208.75 L1341.39 1208.75 L1340.8 1208.75 L1340.22 1208.75 L1339.63 1208.75 L1339.05 1208.75 L1338.46 1208.75 L1337.87 1208.75 L1337.29 1208.75 L1336.7 1208.75 L1336.11 1208.75 L1335.53 1208.75 L1334.94 1208.75 L1334.35 1208.75 L1333.77 1208.75 L1333.18 1208.75 L1332.6 1208.75 L1332.01 1208.75 L1331.42 1208.75 L1330.84 1208.75 L1330.25 1208.75 L1329.66 1208.75 L1329.08 1208.75 L1328.49 1208.75 L1327.9 1208.75 L1327.32 1208.75 L1326.73 1208.75 L1326.14 1208.75 L1325.56 1208.75 L1324.97 1208.75 L1324.39 1208.75 L1323.8 1208.75 L1323.21 1208.75 L1322.63 1208.75 L1322.04 1208.75 L1321.45 1208.75 L1320.87 1208.75 L1320.28 1208.75 L1319.69 1208.75 L1319.11 1208.75 L1318.52 1208.75 L1317.93 1208.75 L1317.35 1208.75 L1316.76 1208.75 L1316.18 1208.75 L1315.59 1208.75 L1315 1208.75 L1314.42 1208.75 L1313.83 1208.75 L1313.24 1208.75 L1312.66 1208.75 L1312.07 1208.75 L1311.48 1208.75 L1310.9 1208.75 L1310.31 1208.75 L1309.73 1208.75 L1309.14 1208.75 L1308.55 1208.75 L1307.97 1208.75 L1307.38 1208.75 L1306.79 1208.75 L1306.21 1208.75 L1305.62 1208.75 L1305.03 1208.75 L1304.45 1208.75 L1303.86 1208.75 L1303.27 1208.75 L1302.69 1208.75 L1302.1 1208.75 L1301.52 1208.75 L1300.93 1208.75 L1300.34 1208.75 L1299.76 1208.75 L1299.17 1208.75 L1298.58 1208.75 L1298 1208.75 L1297.41 1208.75 L1296.82 1208.75 L1296.24 1208.75 L1295.65 1208.75 L1295.06 1208.75 L1294.48 1208.75 L1293.89 1208.75 L1293.31 1208.75 L1292.72 1208.75 L1292.13 1208.75 L1291.55 1208.75 L1290.96 1208.75 L1290.37 1208.75 L1289.79 1208.75 L1289.2 1208.75 L1288.61 1208.75 L1288.03 1208.75 L1287.44 1208.75 L1286.86 1208.75 L1286.27 1208.75 L1285.68 1208.75 L1285.1 1208.75 L1284.51 1208.75 L1283.92 1208.75 L1283.34 1208.75 L1282.75 1208.75 L1282.16 1208.75 L1281.58 1208.75 L1280.99 1208.75 L1280.4 1208.75 L1279.82 1208.75 L1279.23 1208.75 L1278.65 1208.75 L1278.06 1208.75 L1277.47 1208.75 L1276.89 1208.75 L1276.3 1208.75 L1275.71 1208.75 L1275.13 1208.75 L1274.54 1208.75 L1273.95 1208.75 L1273.37 1208.75 L1272.78 1208.75 L1272.19 1208.75 L1271.61 1208.75 L1271.02 1208.75 L1270.44 1208.75 L1269.85 1208.75 L1269.26 1208.75 L1268.68 1208.75 L1268.09 1208.75 L1267.5 1208.75 L1266.92 1208.75 L1266.33 1208.75 L1265.74 1208.75 L1265.16 1208.75 L1264.57 1208.75 L1263.98 1208.75 L1263.4 1208.75 L1262.81 1208.75 L1262.23 1208.75 L1261.64 1208.75 L1261.05 1208.75 L1260.47 1208.75 L1259.88 1208.75 L1259.29 1208.75 L1258.71 1208.75 L1258.12 1208.75 L1257.53 1208.75 L1256.95 1208.75 L1256.36 1208.75 L1255.78 1208.75 L1255.19 1208.75 L1254.6 1208.75 L1254.02 1208.75 L1253.43 1208.75 L1252.84 1208.75 L1252.26 1208.75 L1251.67 1208.75 L1251.08 1208.75 L1250.5 1208.75 L1249.91 1208.75 L1249.32 1208.75 L1248.74 1208.75 L1248.15 1208.75 L1247.57 1208.75 L1246.98 1208.75 L1246.39 1208.75 L1245.81 1208.75 L1245.22 1208.75 L1244.63 1208.75 L1244.05 1208.75 L1243.46 1208.75 L1242.87 1208.75 L1242.29 1208.75 L1241.7 1208.75 L1241.11 1208.75 L1240.53 1208.75 L1239.94 1208.75 L1239.36 1208.75 L1238.77 1208.75 L1238.18 1208.75 L1237.6 1208.75 L1237.01 1208.75 L1236.42 1208.75 L1235.84 1208.75 L1235.25 1208.75 L1234.66 1208.75 L1234.08 1208.75 L1233.49 1208.75 L1232.91 1208.75 L1232.32 1208.75 L1231.73 1208.75 L1231.15 1208.75 L1230.56 1208.75 L1229.97 1208.75 L1229.39 1208.75 L1228.8 1208.75 L1228.21 1208.75 L1227.63 1208.75 L1227.04 1208.75 L1226.45 1208.75 L1225.87 1208.75 L1225.28 1208.75 L1224.7 1208.75 L1224.11 1208.75 L1223.52 1208.75 L1222.94 1208.75 L1222.35 1208.75 L1221.76 1208.75 L1221.18 1208.75 L1220.59 1208.75 L1220 1208.75 L1219.42 1208.75 L1218.83 1208.75 L1218.24 1208.75 L1217.66 1208.75 L1217.07 1208.75 L1216.49 1208.75 L1215.9 1208.75 L1215.31 1208.75 L1214.73 1208.75 L1214.14 1208.75 L1213.55 1208.75 L1212.97 1208.75 L1212.38 1208.75 L1211.79 1208.75 L1211.21 1208.75 L1210.62 1208.75 L1210.03 1208.75 L1209.45 1208.75 L1208.86 1208.75 L1208.28 1208.75 L1207.69 1208.75 L1207.1 1208.75 L1206.52 1208.75 L1205.93 1208.75 L1205.34 1208.75 L1204.76 1208.75 L1204.17 1208.75 L1203.58 1208.75 L1203 1208.75 L1202.41 1208.75 L1201.83 1208.75 L1201.24 1208.75 L1200.65 1208.75 L1200.07 1208.75 L1199.48 1208.75 L1198.89 1208.75 L1198.31 1208.75 L1197.72 1208.75 L1197.13 1208.75 L1196.55 1208.75 L1195.96 1208.75 L1195.37 1208.75 L1194.79 1208.75 L1194.2 1208.75 L1193.62 1208.75 L1193.03 1208.75 L1192.44 1208.75 L1191.86 1208.75 L1191.27 1208.75 L1190.68 1208.75 L1190.1 1208.75 L1189.51 1208.75 L1188.92 1208.75 L1188.34 1208.75 L1187.75 1208.75 L1187.16 1208.75 L1186.58 1208.75 L1185.99 1208.75 L1185.41 1208.75 L1184.82 1208.75 L1184.23 1208.75 L1183.65 1208.75 L1183.06 1208.75 L1182.47 1208.75 L1181.89 1208.75 L1181.3 1208.75 L1180.71 1208.75 L1180.13 1208.75 L1179.54 1208.75 L1178.96 1208.75 L1178.37 1208.75 L1177.78 1208.75 L1177.2 1208.75 L1176.61 1208.75 L1176.02 1208.75 L1175.44 1208.75 L1174.85 1208.75 L1174.26 1208.75 L1173.68 1208.75 L1173.09 1208.75 L1172.5 1208.75 L1171.92 1208.75 L1171.33 1208.75 L1170.75 1208.75 L1170.16 1208.75 L1169.57 1208.75 L1168.99 1208.75 L1168.4 1208.75 L1167.81 1208.75 L1167.23 1208.75 L1166.64 1208.75 L1166.05 1208.75 L1165.47 1208.75 L1164.88 1208.75 L1164.29 1208.75 L1163.71 1208.75 L1163.12 1208.75 L1162.54 1208.75 L1161.95 1208.75 L1161.36 1208.75 L1160.78 1208.75 L1160.19 1208.75 L1159.6 1208.75 L1159.02 1208.75 L1158.43 1208.75 L1157.84 1208.75 L1157.26 1208.75 L1156.67 1208.75 L1156.09 1208.75 L1155.5 1208.75 L1154.91 1208.75 L1154.33 1208.75 L1153.74 1208.75 L1153.15 1208.75 L1152.57 1208.75 L1151.98 1208.75 L1151.39 1208.75 L1150.81 1208.75 L1150.22 1208.75 L1149.63 1208.75 L1149.05 1208.75 L1148.46 1208.75 L1147.88 1208.75 L1147.29 1208.75 L1146.7 1208.75 L1146.12 1208.75 L1145.53 1208.75 L1144.94 1208.75 L1144.36 1208.75 L1143.77 1208.75 L1143.18 1208.75 L1142.6 1208.75 L1142.01 1208.75 L1141.42 1208.75 L1140.84 1208.75 L1140.25 1208.75 L1139.67 1208.75 L1139.08 1208.75 L1138.49 1208.75 L1137.91 1208.75 L1137.32 1208.75 L1136.73 1208.75 L1136.15 1208.75 L1135.56 1208.75 L1134.97 1208.75 L1134.39 1208.75 L1133.8 1208.75 L1133.21 1208.75 L1132.63 1208.75 L1132.04 1208.75 L1131.46 1208.75 L1130.87 1208.75 L1130.28 1208.75 L1129.7 1208.75 L1129.11 1208.75 L1128.52 1208.75 L1127.94 1208.75 L1127.35 1208.75 L1126.76 1208.75 L1126.18 1208.75 L1125.59 1208.75 L1125.01 1208.75 L1124.42 1208.75 L1123.83 1208.75 L1123.25 1208.75 L1122.66 1208.75 L1122.07 1208.75 L1121.49 1208.75 L1120.9 1208.75 L1120.31 1208.75 L1119.73 1208.75 L1119.14 1208.75 L1118.55 1208.75 L1117.97 1208.75 L1117.38 1208.75 L1116.8 1208.75 L1116.21 1208.75 L1115.62 1208.75 L1115.04 1208.75 L1114.45 1208.75 L1113.86 1208.75 L1113.28 1208.75 L1112.69 1208.75 L1112.1 1208.75 L1111.52 1208.75 L1110.93 1208.75 L1110.34 1208.75 L1109.76 1208.75 L1109.17 1208.75 L1108.59 1208.75 L1108 1208.75 L1107.41 1208.75 L1106.83 1208.75 L1106.24 1208.75 L1105.65 1208.75 L1105.07 1208.75 L1104.48 1208.75 L1103.89 1208.75 L1103.31 1208.75 L1102.72 1208.75 L1102.14 1208.75 L1101.55 1208.75 L1100.96 1208.75 L1100.38 1208.75 L1099.79 1208.75 L1099.2 1208.75 L1098.62 1208.75 L1098.03 1208.75 L1097.44 1208.75 L1096.86 1208.75 L1096.27 1208.75 L1095.68 1208.75 L1095.1 1208.75 L1094.51 1208.75 L1093.93 1208.75 L1093.34 1208.75 L1092.75 1208.75 L1092.17 1208.75 L1091.58 1208.75 L1090.99 1208.75 L1090.41 1208.75 L1089.82 1208.75 L1089.23 1208.75 L1088.65 1208.75 L1088.06 1208.75 L1087.47 1208.75 L1086.89 1208.75 L1086.3 1208.75 L1085.72 1208.75 L1085.13 1208.75 L1084.54 1208.75 L1083.96 1208.75 L1083.37 1208.75 L1082.78 1208.75 L1082.2 1208.75 L1081.61 1208.75 L1081.02 1208.75 L1080.44 1208.75 L1079.85 1208.75 L1079.26 1208.75 L1078.68 1208.75 L1078.09 1208.75 L1077.51 1208.75 L1076.92 1208.75 L1076.33 1208.75 L1075.75 1208.75 L1075.16 1208.75 L1074.57 1208.75 L1073.99 1208.75 L1073.4 1208.75 L1072.81 1208.75 L1072.23 1208.75 L1071.64 1208.75 L1071.06 1208.75 L1070.47 1208.75 L1069.88 1208.75 L1069.3 1208.75 L1068.71 1208.75 L1068.12 1208.75 L1067.54 1208.75 L1066.95 1208.75 L1066.36 1208.75 L1065.78 1208.75 L1065.19 1208.75 L1064.6 1208.75 L1064.02 1208.75 L1063.43 1208.75 L1062.85 1208.75 L1062.26 1208.75 L1061.67 1208.75 L1061.09 1208.75 L1060.5 1208.75 L1059.91 1208.75 L1059.33 1208.75 L1058.74 1208.75 L1058.15 1208.75 L1057.57 1208.75 L1056.98 1208.75 L1056.39 1208.75 L1055.81 1208.75 L1055.22 1208.75 L1054.64 1208.75 L1054.05 1208.75 L1053.46 1208.75 L1052.88 1208.75 L1052.29 1208.75 L1051.7 1208.75 L1051.12 1208.75 L1050.53 1208.75 L1049.94 1208.75 L1049.36 1208.75 L1048.77 1208.75 L1048.19 1208.75 L1047.6 1208.75 L1047.01 1208.75 L1046.43 1208.75 L1045.84 1208.75 L1045.25 1208.75 L1044.67 1208.75 L1044.08 1208.75 L1043.49 1208.75 L1042.91 1208.75 L1042.32 1208.75 L1041.73 1208.75 L1041.15 1208.75 L1040.56 1208.75 L1039.98 1208.75 L1039.39 1208.75 L1038.8 1208.75 L1038.22 1208.75 L1037.63 1208.75 L1037.04 1208.75 L1036.46 1208.75 L1035.87 1208.75 L1035.28 1208.75 L1034.7 1208.75 L1034.11 1208.75 L1033.52 1208.75 L1032.94 1208.75 L1032.35 1208.75 L1031.77 1208.75 L1031.18 1208.75 L1030.59 1208.75 L1030.01 1208.75 L1029.42 1208.75 L1028.83 1208.75 L1028.25 1208.75 L1027.66 1208.75 L1027.07 1208.75 L1026.49 1208.75 L1025.9 1208.75 L1025.32 1208.75 L1024.73 1208.75 L1024.14 1208.75 L1023.56 1208.75 L1022.97 1208.75 L1022.38 1208.75 L1021.8 1208.75 L1021.21 1208.75 L1020.62 1208.75 L1020.04 1208.75 L1019.45 1208.75 L1018.86 1208.75 L1018.28 1208.75 L1017.69 1208.75 L1017.11 1208.75 L1016.52 1208.75 L1015.93 1208.75 L1015.35 1208.75 L1014.76 1208.75 L1014.17 1208.75 L1013.59 1208.75 L1013 1208.75 L1012.41 1208.75 L1011.83 1208.75 L1011.24 1208.75 L1010.65 1208.75 L1010.07 1208.75 L1009.48 1208.75 L1008.9 1208.75 L1008.31 1208.75 L1007.72 1208.75 L1007.14 1208.75 L1006.55 1208.75 L1005.96 1208.75 L1005.38 1208.75 L1004.79 1208.75 L1004.2 1208.75 L1003.62 1208.75 L1003.03 1208.75 L1002.44 1208.75 L1001.86 1208.75 L1001.27 1208.75 L1000.69 1208.75 L1000.1 1208.75 L999.513 1208.75 L998.926 1208.75 L998.34 1208.75 L997.754 1208.75 L997.167 1208.75 L996.581 1208.75 L995.994 1208.75 L995.408 1208.75 L994.822 1208.75 L994.235 1208.75 L993.649 1208.75 L993.062 1208.75 L992.476 1208.75 L991.889 1208.75 L991.303 1208.75 L990.717 1208.75 L990.13 1208.75 L989.544 1208.75 L988.957 1208.75 L988.371 1208.75 L987.785 1208.75 L987.198 1208.75 L986.612 1208.75 L986.025 1208.75  Z\" fill=\"#3da44d\" fill-rule=\"evenodd\" fill-opacity=\"0.5\"/>\n<polyline clip-path=\"url(#clip482)\" style=\"stroke:#3da44d; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"986.025,1208.85 986.612,1208.85 987.198,1208.85 987.785,1208.85 988.371,1208.85 988.957,1208.85 989.544,1208.85 990.13,1208.85 990.717,1208.85 991.303,1208.85 991.889,1208.85 992.476,1208.85 993.062,1208.85 993.649,1208.85 994.235,1208.85 994.822,1208.85 995.408,1208.85 995.994,1208.85 996.581,1208.85 997.167,1208.85 997.754,1208.85 998.34,1208.85 998.926,1208.85 999.513,1208.85 1000.1,1208.85 1000.69,1208.85 1001.27,1208.85 1001.86,1208.85 1002.44,1208.85 1003.03,1208.85 1003.62,1208.85 1004.2,1208.85 1004.79,1208.85 1005.38,1208.85 1005.96,1208.85 1006.55,1208.85 1007.14,1208.85 1007.72,1208.85 1008.31,1208.85 1008.9,1208.85 1009.48,1208.85 1010.07,1208.85 1010.65,1208.85 1011.24,1208.85 1011.83,1208.85 1012.41,1208.85 1013,1208.85 1013.59,1208.85 1014.17,1208.85 1014.76,1208.85 1015.35,1208.85 1015.93,1208.85 1016.52,1208.85 1017.11,1208.85 1017.69,1208.85 1018.28,1208.85 1018.86,1208.85 1019.45,1208.85 1020.04,1208.85 1020.62,1208.85 1021.21,1208.85 1021.8,1208.85 1022.38,1208.85 1022.97,1208.85 1023.56,1208.85 1024.14,1208.85 1024.73,1208.85 1025.32,1208.85 1025.9,1208.85 1026.49,1208.85 1027.07,1208.85 1027.66,1208.85 1028.25,1208.85 1028.83,1208.85 1029.42,1208.85 1030.01,1208.85 1030.59,1208.85 1031.18,1208.85 1031.77,1208.85 1032.35,1208.85 1032.94,1208.85 1033.52,1208.85 1034.11,1208.85 1034.7,1208.85 1035.28,1208.85 1035.87,1208.85 1036.46,1208.85 1037.04,1208.85 1037.63,1208.85 1038.22,1208.85 1038.8,1208.85 1039.39,1208.85 1039.98,1208.85 1040.56,1208.85 1041.15,1208.85 1041.73,1208.85 1042.32,1208.85 1042.91,1208.85 1043.49,1208.85 1044.08,1208.85 1044.67,1208.85 1045.25,1208.85 1045.84,1208.85 1046.43,1208.85 1047.01,1208.85 1047.6,1208.85 1048.19,1208.85 1048.77,1208.85 1049.36,1208.85 1049.94,1208.85 1050.53,1208.85 1051.12,1208.85 1051.7,1208.85 1052.29,1208.85 1052.88,1208.85 1053.46,1208.85 1054.05,1208.85 1054.64,1208.85 1055.22,1208.85 1055.81,1208.85 1056.39,1208.85 1056.98,1208.85 1057.57,1208.85 1058.15,1208.85 1058.74,1208.85 1059.33,1208.85 1059.91,1208.85 1060.5,1208.85 1061.09,1208.85 1061.67,1208.85 1062.26,1208.85 1062.85,1208.85 1063.43,1208.85 1064.02,1208.85 1064.6,1208.85 1065.19,1208.85 1065.78,1208.85 1066.36,1208.85 1066.95,1208.85 1067.54,1208.85 1068.12,1208.85 1068.71,1208.85 1069.3,1208.85 1069.88,1208.85 1070.47,1208.85 1071.06,1208.85 1071.64,1208.85 1072.23,1208.85 1072.81,1208.85 1073.4,1208.85 1073.99,1208.85 1074.57,1208.85 1075.16,1208.85 1075.75,1208.85 1076.33,1208.85 1076.92,1208.85 1077.51,1208.85 1078.09,1208.85 1078.68,1208.85 1079.26,1208.85 1079.85,1208.85 1080.44,1208.85 1081.02,1208.85 1081.61,1208.85 1082.2,1208.85 1082.78,1208.85 1083.37,1208.85 1083.96,1208.85 1084.54,1208.85 1085.13,1208.85 1085.72,1208.85 1086.3,1208.85 1086.89,1208.85 1087.47,1208.85 1088.06,1208.85 1088.65,1208.85 1089.23,1208.85 1089.82,1208.85 1090.41,1208.85 1090.99,1208.85 1091.58,1208.85 1092.17,1208.85 1092.75,1208.85 1093.34,1208.85 1093.93,1208.85 1094.51,1208.85 1095.1,1208.85 1095.68,1208.85 1096.27,1208.85 1096.86,1208.85 1097.44,1208.85 1098.03,1208.85 1098.62,1208.85 1099.2,1208.85 1099.79,1208.85 1100.38,1208.85 1100.96,1208.85 1101.55,1208.85 1102.14,1208.85 1102.72,1208.85 1103.31,1208.85 1103.89,1208.85 1104.48,1208.85 1105.07,1208.85 1105.65,1208.85 1106.24,1208.85 1106.83,1208.85 1107.41,1208.85 1108,1208.85 1108.59,1208.85 1109.17,1208.85 1109.76,1208.85 1110.34,1208.85 1110.93,1208.85 1111.52,1208.85 1112.1,1208.85 1112.69,1208.85 1113.28,1208.85 1113.86,1208.85 1114.45,1208.85 1115.04,1208.85 1115.62,1208.85 1116.21,1208.85 1116.8,1208.85 1117.38,1208.85 1117.97,1208.85 1118.55,1208.85 1119.14,1208.85 1119.73,1208.85 1120.31,1208.85 1120.9,1208.85 1121.49,1208.85 1122.07,1208.85 1122.66,1208.85 1123.25,1208.85 1123.83,1208.85 1124.42,1208.85 1125.01,1208.85 1125.59,1208.85 1126.18,1208.85 1126.76,1208.85 1127.35,1208.85 1127.94,1208.85 1128.52,1208.85 1129.11,1208.85 1129.7,1208.85 1130.28,1208.85 1130.87,1208.85 1131.46,1208.85 1132.04,1208.85 1132.63,1208.85 1133.21,1208.85 1133.8,1208.85 1134.39,1208.85 1134.97,1208.85 1135.56,1208.85 1136.15,1208.85 1136.73,1208.85 1137.32,1208.85 1137.91,1208.85 1138.49,1208.85 1139.08,1208.85 1139.67,1208.85 1140.25,1208.85 1140.84,1208.85 1141.42,1208.85 1142.01,1208.85 1142.6,1208.85 1143.18,1208.85 1143.77,1208.85 1144.36,1208.85 1144.94,1208.85 1145.53,1208.85 1146.12,1208.85 1146.7,1208.85 1147.29,1208.85 1147.88,1208.85 1148.46,1208.85 1149.05,1208.85 1149.63,1208.85 1150.22,1208.85 1150.81,1208.85 1151.39,1208.85 1151.98,1208.85 1152.57,1208.85 1153.15,1208.85 1153.74,1208.85 1154.33,1208.85 1154.91,1208.85 1155.5,1208.85 1156.09,1208.85 1156.67,1208.85 1157.26,1208.85 1157.84,1208.85 1158.43,1208.85 1159.02,1208.85 1159.6,1208.85 1160.19,1208.85 1160.78,1208.85 1161.36,1208.85 1161.95,1208.85 1162.54,1208.85 1163.12,1208.85 1163.71,1208.85 1164.29,1208.85 1164.88,1208.85 1165.47,1208.85 1166.05,1208.85 1166.64,1208.85 1167.23,1208.85 1167.81,1208.85 1168.4,1208.85 1168.99,1208.85 1169.57,1208.85 1170.16,1208.85 1170.75,1208.85 1171.33,1208.85 1171.92,1208.85 1172.5,1208.85 1173.09,1208.85 1173.68,1208.85 1174.26,1208.85 1174.85,1208.85 1175.44,1208.85 1176.02,1208.85 1176.61,1208.85 1177.2,1208.85 1177.78,1208.85 1178.37,1208.85 1178.96,1208.85 1179.54,1208.85 1180.13,1208.85 1180.71,1208.85 1181.3,1208.85 1181.89,1208.85 1182.47,1208.85 1183.06,1208.85 1183.65,1208.85 1184.23,1208.85 1184.82,1208.85 1185.41,1208.85 1185.99,1208.85 1186.58,1208.85 1187.16,1208.85 1187.75,1208.85 1188.34,1208.85 1188.92,1208.85 1189.51,1208.85 1190.1,1208.85 1190.68,1208.85 1191.27,1208.85 1191.86,1208.85 1192.44,1208.85 1193.03,1208.85 1193.62,1208.85 1194.2,1208.85 1194.79,1208.85 1195.37,1208.85 1195.96,1208.85 1196.55,1208.85 1197.13,1208.85 1197.72,1208.85 1198.31,1208.85 1198.89,1208.85 1199.48,1208.85 1200.07,1208.85 1200.65,1208.85 1201.24,1208.85 1201.83,1208.85 1202.41,1208.85 1203,1208.85 1203.58,1208.85 1204.17,1208.85 1204.76,1208.85 1205.34,1208.85 1205.93,1208.85 1206.52,1208.85 1207.1,1208.85 1207.69,1208.85 1208.28,1208.85 1208.86,1208.85 1209.45,1208.85 1210.03,1208.85 1210.62,1208.85 1211.21,1208.85 1211.79,1208.85 1212.38,1208.85 1212.97,1208.85 1213.55,1208.85 1214.14,1208.85 1214.73,1208.85 1215.31,1208.85 1215.9,1208.85 1216.49,1208.85 1217.07,1208.85 1217.66,1208.85 1218.24,1208.85 1218.83,1208.85 1219.42,1208.85 1220,1208.85 1220.59,1208.85 1221.18,1208.85 1221.76,1208.85 1222.35,1208.85 1222.94,1208.85 1223.52,1208.85 1224.11,1208.85 1224.7,1208.85 1225.28,1208.85 1225.87,1208.85 1226.45,1208.85 1227.04,1208.85 1227.63,1208.85 1228.21,1208.85 1228.8,1208.85 1229.39,1208.85 1229.97,1208.85 1230.56,1208.85 1231.15,1208.85 1231.73,1208.85 1232.32,1208.85 1232.91,1208.85 1233.49,1208.85 1234.08,1208.85 1234.66,1208.85 1235.25,1208.85 1235.84,1208.85 1236.42,1208.85 1237.01,1208.85 1237.6,1208.85 1238.18,1208.85 1238.77,1208.85 1239.36,1208.85 1239.94,1208.85 1240.53,1208.85 1241.11,1208.85 1241.7,1208.85 1242.29,1208.85 1242.87,1208.85 1243.46,1208.85 1244.05,1208.85 1244.63,1208.85 1245.22,1208.85 1245.81,1208.85 1246.39,1208.85 1246.98,1208.85 1247.57,1208.85 1248.15,1208.85 1248.74,1208.85 1249.32,1208.85 1249.91,1208.85 1250.5,1208.85 1251.08,1208.85 1251.67,1208.85 1252.26,1208.85 1252.84,1208.85 1253.43,1208.85 1254.02,1208.85 1254.6,1208.85 1255.19,1208.85 1255.78,1208.85 1256.36,1208.85 1256.95,1208.85 1257.53,1208.85 1258.12,1208.85 1258.71,1208.85 1259.29,1208.85 1259.88,1208.85 1260.47,1208.85 1261.05,1208.85 1261.64,1208.85 1262.23,1208.85 1262.81,1208.85 1263.4,1208.85 1263.98,1208.85 1264.57,1208.85 1265.16,1208.85 1265.74,1208.85 1266.33,1208.85 1266.92,1208.85 1267.5,1208.85 1268.09,1208.85 1268.68,1208.85 1269.26,1208.85 1269.85,1208.85 1270.44,1208.85 1271.02,1208.85 1271.61,1208.85 1272.19,1208.85 1272.78,1208.85 1273.37,1208.85 1273.95,1208.85 1274.54,1208.85 1275.13,1208.85 1275.71,1208.85 1276.3,1208.85 1276.89,1208.85 1277.47,1208.85 1278.06,1208.85 1278.65,1208.85 1279.23,1208.85 1279.82,1208.85 1280.4,1208.85 1280.99,1208.85 1281.58,1208.85 1282.16,1208.85 1282.75,1208.85 1283.34,1208.85 1283.92,1208.85 1284.51,1208.85 1285.1,1208.85 1285.68,1208.85 1286.27,1208.85 1286.86,1208.85 1287.44,1208.85 1288.03,1208.85 1288.61,1208.85 1289.2,1208.85 1289.79,1208.85 1290.37,1208.85 1290.96,1208.85 1291.55,1208.85 1292.13,1208.85 1292.72,1208.85 1293.31,1208.85 1293.89,1208.85 1294.48,1208.85 1295.06,1208.85 1295.65,1208.85 1296.24,1208.85 1296.82,1208.85 1297.41,1208.85 1298,1208.85 1298.58,1208.85 1299.17,1208.85 1299.76,1208.85 1300.34,1208.85 1300.93,1208.85 1301.52,1208.85 1302.1,1208.85 1302.69,1208.85 1303.27,1208.85 1303.86,1208.85 1304.45,1208.85 1305.03,1208.85 1305.62,1208.85 1306.21,1208.85 1306.79,1208.85 1307.38,1208.85 1307.97,1208.85 1308.55,1208.85 1309.14,1208.85 1309.73,1208.85 1310.31,1208.85 1310.9,1208.85 1311.48,1208.85 1312.07,1208.85 1312.66,1208.85 1313.24,1208.85 1313.83,1208.85 1314.42,1208.85 1315,1208.85 1315.59,1208.85 1316.18,1208.85 1316.76,1208.85 1317.35,1208.85 1317.93,1208.85 1318.52,1208.85 1319.11,1208.85 1319.69,1208.85 1320.28,1208.85 1320.87,1208.85 1321.45,1208.85 1322.04,1208.85 1322.63,1208.85 1323.21,1208.85 1323.8,1208.85 1324.39,1208.85 1324.97,1208.85 1325.56,1208.85 1326.14,1208.85 1326.73,1208.85 1327.32,1208.85 1327.9,1208.85 1328.49,1208.85 1329.08,1208.85 1329.66,1208.85 1330.25,1208.85 1330.84,1208.85 1331.42,1208.85 1332.01,1208.85 1332.6,1208.85 1333.18,1208.85 1333.77,1208.85 1334.35,1208.85 1334.94,1208.85 1335.53,1208.85 1336.11,1208.85 1336.7,1208.85 1337.29,1208.85 1337.87,1208.85 1338.46,1208.85 1339.05,1208.85 1339.63,1208.85 1340.22,1208.85 1340.8,1208.85 1341.39,1208.85 1341.98,1208.85 1342.56,1208.85 1343.15,1208.85 1343.74,1208.85 1344.32,1208.85 1344.91,1208.85 1345.5,1208.85 1346.08,1208.85 1346.67,1208.85 1347.26,1208.85 1347.84,1208.85 1348.43,1208.85 1349.01,1208.85 1349.6,1208.85 1350.19,1208.85 1350.77,1208.85 1351.36,1208.85 1351.95,1208.85 1352.53,1208.85 1353.12,1208.85 1353.71,1208.85 1354.29,1208.85 1354.88,1208.85 1355.47,1208.85 1356.05,1208.85 1356.64,1208.85 1357.22,1208.85 1357.81,1208.85 1358.4,1208.85 1358.98,1208.85 1359.57,1208.85 1360.16,1208.85 1360.74,1208.85 1361.33,1208.85 1361.92,1208.85 1362.5,1208.85 1363.09,1208.85 1363.68,1208.85 1364.26,1208.85 1364.85,1208.85 1365.43,1208.85 1366.02,1208.85 1366.61,1208.85 1367.19,1208.85 1367.78,1208.85 1368.37,1208.85 1368.95,1208.85 1369.54,1208.85 1370.13,1208.85 1370.71,1208.85 1371.3,1208.85 1371.88,1208.85 1372.47,1208.85 1373.06,1208.85 1373.64,1208.85 1374.23,1208.85 1374.82,1208.85 1375.4,1208.85 1375.99,1208.85 1376.58,1208.85 1377.16,1208.85 1377.75,1208.85 1378.34,1208.85 1378.92,1208.85 1379.51,1208.85 1380.09,1208.85 1380.68,1208.85 1381.27,1208.85 1381.85,1208.85 1382.44,1208.85 1383.03,1208.85 1383.61,1208.85 1384.2,1208.85 1384.79,1208.85 1385.37,1208.85 1385.96,1208.85 1386.55,1208.85 1387.13,1208.85 1387.72,1208.85 1388.3,1208.85 1388.89,1208.85 1389.48,1208.85 1390.06,1208.85 1390.65,1208.85 1391.24,1208.85 1391.82,1208.85 1392.41,1208.85 1393,1208.85 1393.58,1208.85 1394.17,1208.85 1394.75,1208.85 1395.34,1208.85 1395.93,1208.85 1396.51,1208.85 1397.1,1208.85 1397.69,1208.85 1398.27,1208.85 1398.86,1208.85 1399.45,1208.85 1400.03,1208.85 1400.62,1208.85 1401.21,1208.85 1401.79,1208.85 1402.38,1208.85 1402.96,1208.85 1403.55,1208.85 1404.14,1208.85 1404.72,1208.85 1405.31,1208.85 1405.9,1208.85 1406.48,1208.85 1407.07,1208.85 1407.66,1208.85 1408.24,1208.85 1408.83,1208.85 1409.42,1208.85 1410,1208.85 1410.59,1208.85 1411.17,1208.85 1411.76,1208.85 1412.35,1208.85 1412.93,1208.85 1413.52,1208.85 1414.11,1208.85 1414.69,1208.85 1415.28,1208.85 1415.87,1208.85 1416.45,1208.85 1417.04,1208.85 1417.63,1208.85 1418.21,1208.85 1418.8,1208.85 1419.38,1208.85 1419.97,1208.85 1420.56,1208.85 1421.14,1208.85 1421.73,1208.85 1422.32,1208.85 1422.9,1208.85 1423.49,1208.85 1424.08,1208.85 1424.66,1208.85 1425.25,1208.85 1425.83,1208.85 1426.42,1208.85 1427.01,1208.85 1427.59,1208.85 1428.18,1208.85 1428.77,1208.85 1429.35,1208.85 1429.94,1208.85 1430.53,1208.85 1431.11,1208.85 1431.7,1208.85 1432.29,1208.85 1432.87,1208.85 1433.46,1208.85 1434.04,1208.85 1434.63,1208.85 1435.22,1208.85 1435.8,1208.85 1436.39,1208.85 1436.98,1208.85 1437.56,1208.85 1438.15,1208.85 1438.74,1208.85 1439.32,1208.85 1439.91,1208.85 1440.5,1208.85 1441.08,1208.85 1441.67,1208.85 1442.25,1208.85 1442.84,1208.85 1443.43,1208.85 1444.01,1208.85 1444.6,1208.85 1445.19,1208.85 1445.77,1208.85 1446.36,1208.85 1446.95,1208.85 1447.53,1208.85 1448.12,1208.85 1448.7,1208.85 1449.29,1208.85 1449.88,1208.85 1450.46,1208.85 1451.05,1208.85 1451.64,1208.85 1452.22,1208.85 1452.81,1208.85 1453.4,1208.85 1453.98,1208.85 1454.57,1208.85 1455.16,1208.85 1455.74,1208.85 1456.33,1208.85 1456.91,1208.85 1457.5,1208.85 1458.09,1208.85 1458.67,1208.85 1459.26,1208.85 1459.85,1208.85 1460.43,1208.85 1461.02,1208.85 1461.61,1208.85 1462.19,1208.85 1462.78,1208.85 1463.37,1208.85 1463.95,1208.85 1464.54,1208.85 1465.12,1208.85 1465.71,1208.85 1466.3,1208.85 1466.88,1208.85 1467.47,1208.85 1468.06,1208.85 1468.64,1208.85 1469.23,1208.85 1469.82,1208.85 1470.4,1208.85 1470.99,1208.85 1471.57,1208.85 1472.16,1208.85 1472.75,1208.85 1473.33,1208.85 1473.92,1208.85 1474.51,1208.85 1475.09,1208.85 1475.68,1208.85 1476.27,1208.85 1476.85,1208.85 1477.44,1208.85 1478.03,1208.85 1478.61,1208.85 1479.2,1208.85 1479.78,1208.85 1480.37,1208.85 1480.96,1208.85 1481.54,1208.85 1482.13,1208.85 1482.72,1208.85 1483.3,1208.85 1483.89,1208.85 1484.48,1208.85 1485.06,1208.85 1485.65,1208.85 1486.24,1208.85 1486.82,1208.85 1487.41,1208.85 1487.99,1208.85 1488.58,1208.85 1489.17,1208.85 1489.75,1208.85 1490.34,1208.85 1490.93,1208.85 1491.51,1208.85 1492.1,1208.85 1492.69,1208.85 1493.27,1208.85 1493.86,1208.85 1494.45,1208.85 1495.03,1208.85 1495.62,1208.85 1496.2,1208.85 1496.79,1208.85 1497.38,1208.85 1497.96,1208.85 1498.55,1208.85 1499.14,1208.85 1499.72,1208.85 1500.31,1208.85 1500.9,1208.85 1501.48,1208.85 1502.07,1208.85 1502.65,1208.85 1503.24,1208.85 1503.83,1208.85 1504.41,1208.85 1505,1208.85 1505.59,1208.85 1506.17,1208.85 1506.76,1208.85 1507.35,1208.85 1507.93,1208.85 1508.52,1208.85 1509.11,1208.85 1509.69,1208.85 1510.28,1208.85 1510.86,1208.85 1511.45,1208.85 1512.04,1208.85 1512.62,1208.85 1513.21,1208.85 1513.8,1208.85 1514.38,1208.85 1514.97,1208.85 1515.56,1208.85 1516.14,1208.85 1516.73,1208.85 1517.32,1208.85 1517.9,1208.85 1518.49,1208.85 1519.07,1208.85 1519.66,1208.85 1520.25,1208.85 1520.83,1208.85 1521.42,1208.85 1522.01,1208.85 1522.59,1208.85 1523.18,1208.85 1523.77,1208.85 1524.35,1208.85 1524.94,1208.85 1525.52,1208.85 1526.11,1208.85 1526.7,1208.85 1527.28,1208.85 1527.87,1208.85 1528.46,1208.85 1529.04,1208.85 1529.63,1208.85 1530.22,1208.85 1530.8,1208.85 1531.39,1208.85 1531.98,1208.85 1532.56,1208.85 1533.15,1208.85 1533.73,1208.85 1534.32,1208.85 1534.91,1208.85 1535.49,1208.85 1536.08,1208.85 1536.67,1208.85 1537.25,1208.85 1537.84,1208.85 1538.43,1208.85 1539.01,1208.85 1539.6,1208.85 1540.19,1208.85 1540.77,1208.85 1541.36,1208.85 1541.94,1208.85 1542.53,1208.85 1543.12,1208.85 1543.7,1208.85 1544.29,1208.85 1544.88,1208.85 1545.46,1208.85 1546.05,1208.85 1546.64,1208.85 1547.22,1208.85 1547.81,1208.85 1548.4,1208.85 1548.98,1208.85 1549.57,1208.85 1550.15,1208.85 1550.74,1208.85 1551.33,1208.85 1551.91,1208.85 1552.5,1208.85 1553.09,1208.85 1553.67,1208.85 1554.26,1208.85 1554.85,1208.85 1555.43,1208.85 1556.02,1208.85 1556.6,1208.85 1557.19,1208.85 1557.78,1208.85 1558.36,1208.85 1558.95,1208.85 1559.54,1208.85 1560.12,1208.85 1560.71,1208.85 1561.3,1208.85 1561.88,1208.85 1562.47,1208.85 1563.06,1208.85 1563.64,1208.85 1564.23,1208.85 1564.81,1208.85 1565.4,1208.85 1565.99,1208.85 1566.57,1208.85 1567.16,1208.85 1567.75,1208.85 1568.33,1208.85 1568.92,1208.85 1569.51,1208.85 1570.09,1208.85 1570.68,1208.85 1571.27,1208.85 1571.85,1208.85 1572.44,1208.85 1573.02,1208.85 1573.61,1208.85 1574.2,1208.85 1574.78,1208.85 1575.37,1208.85 1575.96,1208.85 1576.54,1208.85 1577.13,1208.85 1577.72,1208.85 1578.3,1208.85 1578.89,1208.85 1579.47,1208.85 1580.06,1208.85 1580.65,1208.85 1581.23,1208.85 1581.82,1208.85 1582.41,1208.85 1582.99,1208.85 1583.58,1208.85 1584.17,1208.85 1584.75,1208.85 1585.34,1208.85 1585.93,1208.85 1586.51,1208.85 1587.1,1208.85 1587.68,1208.85 1588.27,1208.85 1588.86,1208.85 1589.44,1208.85 1590.03,1208.85 1590.62,1208.85 1591.2,1208.85 1591.79,1208.85 1592.38,1208.85 1592.96,1208.85 1593.55,1208.85 1594.14,1208.85 1594.72,1208.85 1595.31,1208.85 1595.89,1208.85 1596.48,1208.85 1597.07,1208.85 1597.65,1208.85 1598.24,1208.85 1598.83,1208.85 1599.41,1208.85 1600,1208.85 1600.59,1208.85 1601.17,1208.85 1601.76,1208.85 1602.34,1208.85 1602.93,1208.85 1603.52,1208.85 1604.1,1208.85 1604.69,1208.85 1605.28,1208.85 1605.86,1208.85 1606.45,1208.85 1607.04,1208.85 1607.62,1208.85 1608.21,1208.85 1608.8,1208.85 1609.38,1208.85 1609.97,1208.85 1610.55,1208.85 1611.14,1208.85 1611.73,1208.85 1612.31,1208.85 1612.9,1208.85 1613.49,1208.85 1614.07,1208.85 1614.66,1208.85 1615.25,1208.85 1615.83,1208.85 1616.42,1208.85 1617.01,1208.85 1617.59,1208.85 1618.18,1208.85 1618.76,1208.85 1619.35,1208.85 1619.94,1208.85 1620.52,1208.85 1621.11,1208.85 1621.7,1208.85 1622.28,1208.85 1622.87,1208.85 1623.46,1208.85 1624.04,1208.85 1624.63,1208.85 1625.22,1208.85 1625.8,1208.85 1626.39,1208.85 1626.97,1208.85 1627.56,1208.85 1628.15,1208.85 1628.73,1208.85 1629.32,1208.85 1629.91,1208.85 1630.49,1208.85 1631.08,1208.85 1631.67,1208.85 1632.25,1208.85 1632.84,1208.85 1633.42,1208.85 1634.01,1208.85 1634.6,1208.85 1635.18,1208.85 1635.77,1208.85 1636.36,1208.85 1636.94,1208.85 1637.53,1208.85 1638.12,1208.85 1638.7,1208.85 1639.29,1208.85 1639.88,1208.85 1640.46,1208.85 1641.05,1208.85 1641.63,1208.85 1642.22,1208.85 1642.81,1208.85 1643.39,1208.85 1643.98,1208.85 1644.57,1208.85 1645.15,1208.85 1645.74,1208.85 1646.33,1208.85 1646.91,1208.85 1647.5,1208.85 1648.09,1208.85 1648.67,1208.85 1649.26,1208.85 1649.84,1208.85 1650.43,1208.85 1651.02,1208.85 1651.6,1208.85 1652.19,1208.85 1652.78,1208.85 1653.36,1208.85 1653.95,1208.85 1654.54,1208.85 1655.12,1208.85 1655.71,1208.85 1656.29,1208.85 1656.88,1208.85 1657.47,1208.85 1658.05,1208.85 1658.64,1208.85 1659.23,1208.85 1659.81,1208.85 1660.4,1208.85 1660.99,1208.85 1661.57,1208.85 1662.16,1208.85 1662.75,1208.85 1663.33,1208.85 1663.92,1208.85 1664.5,1208.85 1665.09,1208.85 1665.68,1208.85 1666.26,1208.85 1666.85,1208.85 1667.44,1208.85 1668.02,1208.85 1668.61,1208.85 1669.2,1208.85 1669.78,1208.85 1670.37,1208.85 1670.96,1208.85 1671.54,1208.85 1672.13,1208.85 1672.71,1208.85 1673.3,1208.85 1673.89,1208.85 1674.47,1208.85 1675.06,1208.85 1675.65,1208.85 1676.23,1208.85 1676.82,1208.85 1677.41,1208.85 1677.99,1208.85 1678.58,1208.85 1679.17,1208.85 1679.75,1208.85 1680.34,1208.85 1680.92,1208.85 1681.51,1208.85 1682.1,1208.85 1682.68,1208.85 1683.27,1208.85 1683.86,1208.85 1684.44,1208.85 1685.03,1208.85 1685.62,1208.85 1686.2,1208.85 1686.79,1208.85 1687.37,1208.85 1687.96,1208.85 1688.55,1208.85 1689.13,1208.85 1689.72,1208.85 1690.31,1208.85 1690.89,1208.85 1691.48,1208.85 1692.07,1208.85 1692.65,1208.85 1693.24,1208.85 1693.83,1208.85 1694.41,1208.85 1695,1208.85 1695.58,1208.85 1696.17,1208.85 1696.76,1208.85 1697.34,1208.85 1697.93,1208.85 1698.52,1208.85 1699.1,1208.85 1699.69,1208.85 1700.28,1208.85 1700.86,1208.85 1701.45,1208.85 1702.04,1208.85 1702.62,1208.85 1703.21,1208.85 1703.79,1208.85 1704.38,1208.85 1704.97,1208.85 1705.55,1208.85 1706.14,1208.85 1706.73,1208.85 1707.31,1208.85 1707.9,1208.85 1708.49,1208.85 1709.07,1208.85 1709.66,1208.85 1710.24,1208.85 1710.83,1208.85 1711.42,1208.85 1712,1208.85 1712.59,1208.85 1713.18,1208.85 1713.76,1208.85 1714.35,1208.85 1714.94,1208.85 1715.52,1208.85 1716.11,1208.85 1716.7,1208.85 1717.28,1208.85 1717.87,1208.85 1718.45,1208.85 1719.04,1208.85 1719.63,1208.85 1720.21,1208.85 1720.8,1208.85 1721.39,1208.85 1721.97,1208.85 1722.56,1208.85 1723.15,1208.85 1723.73,1208.85 1724.32,1208.85 1724.91,1208.85 1725.49,1208.85 1726.08,1208.85 1726.66,1208.85 1727.25,1208.85 1727.84,1208.85 1728.42,1208.85 1729.01,1208.85 1729.6,1208.85 1730.18,1208.85 1730.77,1208.85 1731.36,1208.85 1731.94,1208.85 1732.53,1208.85 1733.11,1208.85 1733.7,1208.85 1734.29,1208.85 1734.87,1208.85 1735.46,1208.85 1736.05,1208.85 1736.63,1208.85 1737.22,1208.85 1737.81,1208.85 1738.39,1208.85 1738.98,1208.85 1739.57,1208.85 1740.15,1208.85 1740.74,1208.85 1741.32,1208.85 1741.91,1208.85 1742.5,1208.85 1743.08,1208.85 1743.67,1208.85 1744.26,1208.85 1744.84,1208.85 1745.43,1208.85 1746.02,1208.85 1746.6,1208.85 1747.19,1208.85 1747.78,1208.85 1748.36,1208.85 1748.95,1208.85 1749.53,1208.85 1750.12,1208.85 1750.71,1208.85 1751.29,1208.85 1751.88,1208.85 1752.47,1208.85 1753.05,1208.85 1753.64,1208.85 1754.23,1208.85 1754.81,1208.85 1755.4,1208.85 1755.99,1208.85 1756.57,1208.85 1757.16,1208.85 1757.74,1208.85 1758.33,1208.85 1758.92,1208.85 1759.5,1208.85 1760.09,1208.85 1760.68,1208.85 1761.26,1208.85 1761.85,1208.85 1762.44,1208.85 1763.02,1208.85 1763.61,1208.85 1764.19,1208.85 1764.78,1208.85 1765.37,1208.85 1765.95,1208.85 1766.54,1208.85 1767.13,1208.85 1767.71,1208.85 1768.3,1208.85 1768.89,1208.85 1769.47,1208.85 1770.06,1208.85 1770.65,1208.85 1771.23,1208.85 1771.82,1208.85 1772.4,1208.85 1772.99,1208.85 1773.58,1208.85 1774.16,1208.85 1774.75,1208.85 1775.34,1208.85 1775.92,1208.85 1776.51,1208.85 1777.1,1208.85 1777.68,1208.85 1778.27,1208.85 1778.86,1208.85 1779.44,1208.85 1780.03,1208.85 1780.61,1208.85 1781.2,1208.85 1781.79,1208.85 1782.37,1208.85 1782.96,1208.85 1783.55,1208.85 1784.13,1208.85 1784.72,1208.85 1785.31,1208.85 1785.89,1208.85 1786.48,1208.85 1787.06,1208.85 1787.65,1208.85 1788.24,1208.85 1788.82,1208.85 1789.41,1208.85 1790,1208.85 1790.58,1208.85 1791.17,1208.85 1791.76,1208.85 1792.34,1208.85 1792.93,1208.85 1793.52,1208.85 1794.1,1208.85 1794.69,1208.85 1795.27,1208.85 1795.86,1208.85 1796.45,1208.85 1797.03,1208.85 1797.62,1208.85 1798.21,1208.85 1798.79,1208.85 1799.38,1208.85 1799.97,1208.85 1800.55,1208.85 1801.14,1208.85 1801.73,1208.85 1802.31,1208.85 1802.9,1208.85 1803.48,1208.85 1804.07,1208.85 1804.66,1208.85 1805.24,1208.85 1805.83,1208.85 1806.42,1208.85 1807,1208.85 1807.59,1208.85 1808.18,1208.85 1808.76,1208.85 1809.35,1208.85 1809.94,1208.85 1810.52,1208.85 1811.11,1208.85 1811.69,1208.85 1812.28,1208.85 1812.87,1208.85 1813.45,1208.85 1814.04,1208.85 1814.63,1208.85 1815.21,1208.85 1815.8,1208.85 1816.39,1208.85 1816.97,1208.85 1817.56,1208.85 1818.14,1208.85 1818.73,1208.85 1819.32,1208.85 1819.9,1208.85 1820.49,1208.85 1821.08,1208.85 1821.66,1208.85 1822.25,1208.85 1822.84,1208.85 1823.42,1208.85 1824.01,1208.85 1824.6,1208.85 1825.18,1208.85 1825.77,1208.85 1826.35,1208.85 1826.94,1208.85 1827.53,1208.85 1828.11,1208.85 1828.7,1208.85 1829.29,1208.85 1829.87,1208.85 1830.46,1208.85 1831.05,1208.85 1831.63,1208.85 1832.22,1208.85 1832.81,1208.85 1833.39,1208.85 1833.98,1208.85 1834.56,1208.85 1835.15,1208.85 1835.74,1208.85 1836.32,1208.85 1836.91,1208.85 1837.5,1208.85 1838.08,1208.85 1838.67,1208.85 1839.26,1208.85 1839.84,1208.85 1840.43,1208.85 1841.01,1208.85 1841.6,1208.85 1842.19,1208.85 1842.77,1208.85 1843.36,1208.85 1843.95,1208.85 1844.53,1208.85 1845.12,1208.85 1845.71,1208.85 1846.29,1208.85 1846.88,1208.85 1847.47,1208.85 1848.05,1208.85 1848.64,1208.85 1849.22,1208.85 1849.81,1208.85 1850.4,1208.85 1850.98,1208.85 1851.57,1208.85 1852.16,1208.85 1852.74,1208.85 1853.33,1208.85 1853.92,1208.85 1854.5,1208.85 1855.09,1208.85 1855.68,1208.85 1856.26,1208.85 1856.85,1208.85 1857.43,1208.85 1858.02,1208.85 1858.61,1208.85 1859.19,1208.85 1859.78,1208.85 1860.37,1208.85 1860.95,1208.85 1861.54,1208.85 1862.13,1208.85 1862.71,1208.85 1863.3,1208.85 1863.88,1208.85 1864.47,1208.85 1865.06,1208.85 1865.64,1208.85 1866.23,1208.85 1866.82,1208.85 1867.4,1208.85 1867.99,1208.85 1868.58,1208.85 1869.16,1208.85 1869.75,1208.85 1870.34,1208.85 1870.92,1208.85 1871.51,1208.85 1872.09,1208.85 1872.68,1208.85 1873.27,1208.85 1873.85,1208.85 1874.44,1208.85 1875.03,1208.85 1875.61,1208.85 1876.2,1208.85 1876.79,1208.85 1877.37,1208.85 1877.96,1208.85 1878.55,1208.85 1879.13,1208.85 1879.72,1208.85 1880.3,1208.85 1880.89,1208.85 1881.48,1208.85 1882.06,1208.85 1882.65,1208.85 1883.24,1208.85 1883.82,1208.85 1884.41,1208.85 1885,1208.85 1885.58,1208.85 1886.17,1208.85 1886.76,1208.85 1887.34,1208.85 1887.93,1208.85 1888.51,1208.85 1889.1,1208.85 1889.69,1208.85 1890.27,1208.85 1890.86,1208.85 1891.45,1208.85 1892.03,1208.85 1892.62,1208.85 1893.21,1208.85 1893.79,1208.85 1894.38,1208.85 1894.96,1208.85 1895.55,1208.85 1896.14,1208.85 1896.72,1208.85 1897.31,1208.85 1897.9,1208.85 1898.48,1208.85 1899.07,1208.85 1899.66,1208.85 1900.24,1208.85 1900.83,1208.85 1901.42,1208.85 1902,1208.85 1902.59,1208.85 1903.17,1208.85 1903.76,1208.85 1904.35,1208.85 1904.93,1208.85 1905.52,1208.85 1906.11,1208.85 1906.69,1208.85 1907.28,1208.85 1907.87,1208.85 1908.45,1208.85 1909.04,1208.85 1909.63,1208.85 1910.21,1208.85 1910.8,1208.85 1911.38,1208.85 1911.97,1208.85 1912.56,1208.85 1913.14,1208.85 1913.73,1208.85 1914.32,1208.85 1914.9,1208.85 1915.49,1208.85 1916.08,1208.85 1916.66,1208.85 1917.25,1208.85 1917.83,1208.85 1918.42,1208.85 1919.01,1208.85 1919.59,1208.85 1920.18,1208.85 1920.77,1208.85 1921.35,1208.85 1921.94,1208.85 1922.53,1208.85 1923.11,1208.85 1923.7,1208.85 1924.29,1208.85 1924.87,1208.85 1925.46,1208.85 1926.04,1208.85 1926.63,1208.85 1927.22,1208.85 1927.8,1208.85 1928.39,1208.85 1928.98,1208.85 1929.56,1208.85 1930.15,1208.85 1930.74,1208.85 1931.32,1208.85 1931.91,1208.85 1932.5,1208.85 1933.08,1208.85 1933.67,1208.85 1934.25,1208.85 1934.84,1208.85 1935.43,1208.85 1936.01,1208.85 1936.6,1208.85 1937.19,1208.85 1937.77,1208.85 1938.36,1208.85 1938.95,1208.85 1939.53,1208.85 1940.12,1208.85 1940.71,1208.85 1941.29,1208.85 1941.88,1208.85 1942.46,1208.85 1943.05,1208.85 1943.64,1208.85 1944.22,1208.85 1944.81,1208.85 1945.4,1208.85 1945.98,1208.85 1946.57,1208.85 1947.16,1208.85 1947.74,1208.85 1948.33,1208.85 1948.91,1208.85 1949.5,1208.85 1950.09,1208.85 1950.67,1208.85 1951.26,1208.85 1951.85,1208.85 1952.43,1208.85 1953.02,1208.85 1953.61,1208.85 1954.19,1208.85 1954.78,1208.85 1955.37,1208.85 1955.95,1208.85 1956.54,1208.85 1957.12,1208.85 1957.71,1208.85 1958.3,1208.85 1958.88,1208.85 1959.47,1208.85 1960.06,1208.85 1960.64,1208.85 1961.23,1208.85 1961.82,1208.85 1962.4,1208.85 1962.99,1208.85 1963.58,1208.85 1964.16,1208.85 1964.75,1208.85 1965.33,1208.85 1965.92,1208.85 1966.51,1208.85 1967.09,1208.85 1967.68,1208.85 1968.27,1208.85 1968.85,1208.85 1969.44,1208.85 1970.03,1208.85 1970.61,1208.85 1971.2,1208.85 1971.78,1208.85 1972.37,1208.85 1972.96,1208.85 1973.54,1208.85 1974.13,1208.85 1974.72,1208.85 1975.3,1208.85 1975.89,1208.85 1976.48,1208.85 1977.06,1208.85 1977.65,1208.85 1978.24,1208.85 1978.82,1208.85 1979.41,1208.85 1979.99,1208.85 1980.58,1208.85 1981.17,1208.85 1981.75,1208.85 1982.34,1208.85 1982.93,1208.85 1983.51,1208.85 1984.1,1208.85 1984.69,1208.85 1985.27,1208.85 1985.86,1208.85 1986.45,1208.85 1987.03,1208.85 1987.62,1208.85 1988.2,1208.85 1988.79,1208.85 1989.38,1208.85 1989.96,1208.85 1990.55,1208.85 1991.14,1208.85 1991.72,1208.85 1992.31,1208.85 1992.9,1208.85 1993.48,1208.85 1994.07,1208.85 1994.65,1208.85 1995.24,1208.85 1995.83,1208.85 1996.41,1208.85 1997,1208.85 1997.59,1208.85 1998.17,1208.85 1998.76,1208.85 1999.35,1208.85 1999.93,1208.85 2000.52,1208.85 2001.11,1208.85 2001.69,1208.85 2002.28,1208.85 2002.86,1208.85 2003.45,1208.85 2004.04,1208.85 2004.62,1208.85 2005.21,1208.85 2005.8,1208.85 2006.38,1208.85 2006.97,1208.85 2007.56,1208.85 2008.14,1208.85 2008.73,1208.85 2009.32,1208.85 2009.9,1208.85 2010.49,1208.85 2011.07,1208.85 2011.66,1208.85 2012.25,1208.85 2012.83,1208.85 2013.42,1208.85 2014.01,1208.85 2014.59,1208.85 2015.18,1208.85 2015.77,1208.85 2016.35,1208.85 2016.94,1208.85 2017.53,1208.85 2018.11,1208.85 2018.7,1208.85 2019.28,1208.85 2019.87,1208.85 2020.46,1208.85 2021.04,1208.85 2021.63,1208.85 2022.22,1208.85 2022.8,1208.85 2023.39,1208.85 2023.98,1208.85 2024.56,1208.85 2025.15,1208.85 2025.73,1208.85 2026.32,1208.85 2026.91,1208.85 2027.49,1208.85 2028.08,1208.85 2028.67,1208.85 2029.25,1208.85 2029.84,1208.85 2030.43,1208.85 2031.01,1208.85 2031.6,1208.85 2032.19,1208.85 2032.77,1208.85 2033.36,1208.85 2033.94,1208.85 2034.53,1208.85 2035.12,1208.85 2035.7,1208.85 2036.29,1208.85 2036.88,1208.85 2037.46,1208.85 2038.05,1208.85 2038.64,1208.85 2039.22,1208.85 2039.81,1208.85 2040.4,1208.85 2040.98,1208.85 2041.57,1208.85 2042.15,1208.85 2042.74,1208.85 2043.33,1208.85 2043.91,1208.85 2044.5,1208.85 2045.09,1208.85 2045.67,1208.85 2046.26,1208.85 2046.85,1208.85 2047.43,1208.85 2048.02,1208.85 2048.6,1208.85 2049.19,1208.85 2049.78,1208.85 2050.36,1208.85 2050.95,1208.85 2051.54,1208.85 2052.12,1208.85 2052.71,1208.85 2053.3,1208.85 2053.88,1208.85 2054.47,1208.85 2055.06,1208.85 2055.64,1208.85 2056.23,1208.85 2056.81,1208.85 2057.4,1208.85 2057.99,1208.85 2058.57,1208.85 2059.16,1208.85 2059.75,1208.85 2060.33,1208.85 2060.92,1208.85 2061.51,1208.85 2062.09,1208.85 2062.68,1208.85 2063.27,1208.85 2063.85,1208.85 2064.44,1208.85 2065.02,1208.85 2065.61,1208.85 2066.2,1208.85 2066.78,1208.85 2067.37,1208.85 2067.96,1208.85 2068.54,1208.85 2069.13,1208.85 2069.72,1208.85 2070.3,1208.85 2070.89,1208.85 2071.48,1208.85 2072.06,1208.85 2072.65,1208.85 2073.23,1208.85 2073.82,1208.85 2074.41,1208.85 2074.99,1208.85 2075.58,1208.85 2076.17,1208.85 2076.75,1208.85 2077.34,1208.85 2077.93,1208.85 2078.51,1208.85 2079.1,1208.85 2079.68,1208.85 2080.27,1208.85 2080.86,1208.85 2081.44,1208.85 2082.03,1208.85 2082.62,1208.85 2083.2,1208.85 2083.79,1208.85 2084.38,1208.85 2084.96,1208.85 2085.55,1208.85 2086.14,1208.85 2086.72,1208.85 2087.31,1208.85 2087.89,1208.85 2088.48,1208.85 2089.07,1208.85 2089.65,1208.85 2090.24,1208.85 2090.83,1208.85 2091.41,1208.85 2092,1208.85 2092.59,1208.85 2093.17,1208.85 2093.76,1208.85 2094.35,1208.85 2094.93,1208.85 2095.52,1208.85 2096.1,1208.85 2096.69,1208.85 2097.28,1208.85 2097.86,1208.85 2098.45,1208.85 2099.04,1208.85 2099.62,1208.85 2100.21,1208.85 2100.8,1208.85 2101.38,1208.85 2101.97,1208.85 2102.55,1208.85 2103.14,1208.85 2103.73,1208.85 2104.31,1208.85 2104.9,1208.85 2105.49,1208.85 2106.07,1208.85 2106.66,1208.85 2107.25,1208.85 2107.83,1208.85 2108.42,1208.85 2109.01,1208.85 2109.59,1208.85 2110.18,1208.85 2110.76,1208.85 2111.35,1208.85 2111.94,1208.85 2112.52,1208.85 2113.11,1208.85 2113.7,1208.85 2114.28,1208.85 2114.87,1208.85 2115.46,1208.85 2116.04,1208.85 2116.63,1208.85 2117.22,1208.85 2117.8,1208.85 2118.39,1208.85 2118.97,1208.85 2119.56,1208.85 2120.15,1208.85 2120.73,1208.85 2121.32,1208.85 2121.91,1208.85 2122.49,1208.85 2123.08,1208.85 2123.67,1208.85 2124.25,1208.85 2124.84,1208.85 2125.42,1208.85 2126.01,1208.85 2126.6,1208.85 2127.18,1208.85 2127.77,1208.85 2128.36,1208.85 2128.94,1208.85 2129.53,1208.85 2130.12,1208.85 2130.7,1208.85 2131.29,1208.85 2131.88,1208.85 2132.46,1208.85 2133.05,1208.85 2133.63,1208.85 2134.22,1208.85 2134.81,1208.85 2135.39,1208.85 2135.98,1208.85 2136.57,1208.85 2137.15,1208.85 2137.74,1208.85 2138.33,1208.85 2138.91,1208.85 2139.5,1208.85 2140.09,1208.85 2140.67,1208.85 2141.26,1208.85 2141.84,1208.85 2142.43,1208.85 2143.02,1208.85 2143.6,1208.85 2144.19,1208.85 2144.78,1208.85 2145.36,1208.85 2145.95,1208.85 2146.54,1208.85 2147.12,1208.85 2147.71,1208.85 2148.3,1208.85 2148.88,1208.85 2149.47,1208.85 2150.05,1208.85 2150.64,1208.85 2151.23,1208.85 2151.81,1208.85 2152.4,1208.85 2152.99,1208.85 2153.57,1208.85 2154.16,1208.85 2154.75,1208.85 2155.33,1208.85 2155.92,1208.85 2156.5,1208.85 2157.09,1208.85 2157.68,1208.85 2158.26,1208.85 \"/>\n<polyline clip-path=\"url(#clip482)\" style=\"stroke:#d3d3d3; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"1561.82,1190.58 1400.13,899.083 \"/>\n<polyline clip-path=\"url(#clip482)\" style=\"stroke:#d3d3d3; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"985.439,1226.74 985.439,1190.58 2158.26,1190.58 2158.26,1226.74 985.439,1226.74 \"/>\n<path clip-path=\"url(#clip480)\" d=\"M1564.14 432.752 L2148.88 432.752 L2148.88 225.392 L1564.14 225.392  Z\" fill=\"#ffffff\" fill-rule=\"evenodd\" fill-opacity=\"1\"/>\n<polyline clip-path=\"url(#clip480)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"1564.14,432.752 2148.88,432.752 2148.88,225.392 1564.14,225.392 1564.14,432.752 \"/>\n<polyline clip-path=\"url(#clip480)\" style=\"stroke:#009af9; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"1584.85,277.232 1709.13,277.232 \"/>\n<path clip-path=\"url(#clip480)\" d=\"M1748.27 269.35 L1748.27 273.378 Q1746.46 272.452 1744.52 271.989 Q1742.57 271.526 1740.49 271.526 Q1737.32 271.526 1735.72 272.498 Q1734.15 273.471 1734.15 275.415 Q1734.15 276.896 1735.28 277.753 Q1736.41 278.586 1739.84 279.35 L1741.3 279.674 Q1745.84 280.646 1747.73 282.429 Q1749.66 284.188 1749.66 287.359 Q1749.66 290.97 1746.78 293.077 Q1743.94 295.183 1738.94 295.183 Q1736.85 295.183 1734.59 294.767 Q1732.34 294.373 1729.84 293.563 L1729.84 289.165 Q1732.2 290.392 1734.49 291.017 Q1736.78 291.619 1739.03 291.619 Q1742.04 291.619 1743.66 290.6 Q1745.28 289.558 1745.28 287.683 Q1745.28 285.947 1744.1 285.021 Q1742.94 284.095 1738.98 283.239 L1737.5 282.892 Q1733.54 282.058 1731.78 280.345 Q1730.03 278.609 1730.03 275.6 Q1730.03 271.943 1732.62 269.952 Q1735.21 267.961 1739.98 267.961 Q1742.34 267.961 1744.42 268.309 Q1746.51 268.656 1748.27 269.35 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip480)\" d=\"M1777.99 278.864 L1777.99 294.512 L1773.73 294.512 L1773.73 279.003 Q1773.73 275.322 1772.29 273.494 Q1770.86 271.665 1767.99 271.665 Q1764.54 271.665 1762.55 273.864 Q1760.56 276.063 1760.56 279.859 L1760.56 294.512 L1756.28 294.512 L1756.28 258.494 L1760.56 258.494 L1760.56 272.614 Q1762.09 270.276 1764.15 269.119 Q1766.23 267.961 1768.94 267.961 Q1773.4 267.961 1775.7 270.739 Q1777.99 273.494 1777.99 278.864 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip480)\" d=\"M1786.48 268.586 L1790.74 268.586 L1790.74 294.512 L1786.48 294.512 L1786.48 268.586 M1786.48 258.494 L1790.74 258.494 L1790.74 263.887 L1786.48 263.887 L1786.48 258.494 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip480)\" d=\"M1812.78 258.494 L1812.78 262.035 L1808.71 262.035 Q1806.41 262.035 1805.51 262.961 Q1804.63 263.887 1804.63 266.295 L1804.63 268.586 L1811.65 268.586 L1811.65 271.896 L1804.63 271.896 L1804.63 294.512 L1800.35 294.512 L1800.35 271.896 L1796.28 271.896 L1796.28 268.586 L1800.35 268.586 L1800.35 266.781 Q1800.35 262.452 1802.36 260.484 Q1804.38 258.494 1808.75 258.494 L1812.78 258.494 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip480)\" d=\"M1819.72 261.225 L1819.72 268.586 L1828.5 268.586 L1828.5 271.896 L1819.72 271.896 L1819.72 285.97 Q1819.72 289.142 1820.58 290.045 Q1821.46 290.947 1824.12 290.947 L1828.5 290.947 L1828.5 294.512 L1824.12 294.512 Q1819.19 294.512 1817.32 292.683 Q1815.44 290.832 1815.44 285.97 L1815.44 271.896 L1812.32 271.896 L1812.32 268.586 L1815.44 268.586 L1815.44 261.225 L1819.72 261.225 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><polyline clip-path=\"url(#clip480)\" style=\"stroke:#e26f46; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"1584.85,329.072 1709.13,329.072 \"/>\n<path clip-path=\"url(#clip480)\" d=\"M1748.27 321.19 L1748.27 325.218 Q1746.46 324.292 1744.52 323.829 Q1742.57 323.366 1740.49 323.366 Q1737.32 323.366 1735.72 324.338 Q1734.15 325.311 1734.15 327.255 Q1734.15 328.736 1735.28 329.593 Q1736.41 330.426 1739.84 331.19 L1741.3 331.514 Q1745.84 332.486 1747.73 334.269 Q1749.66 336.028 1749.66 339.199 Q1749.66 342.81 1746.78 344.917 Q1743.94 347.023 1738.94 347.023 Q1736.85 347.023 1734.59 346.607 Q1732.34 346.213 1729.84 345.403 L1729.84 341.005 Q1732.2 342.232 1734.49 342.857 Q1736.78 343.459 1739.03 343.459 Q1742.04 343.459 1743.66 342.44 Q1745.28 341.398 1745.28 339.523 Q1745.28 337.787 1744.1 336.861 Q1742.94 335.935 1738.98 335.079 L1737.5 334.732 Q1733.54 333.898 1731.78 332.185 Q1730.03 330.449 1730.03 327.44 Q1730.03 323.783 1732.62 321.792 Q1735.21 319.801 1739.98 319.801 Q1742.34 319.801 1744.42 320.149 Q1746.51 320.496 1748.27 321.19 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip480)\" d=\"M1777.99 330.704 L1777.99 346.352 L1773.73 346.352 L1773.73 330.843 Q1773.73 327.162 1772.29 325.334 Q1770.86 323.505 1767.99 323.505 Q1764.54 323.505 1762.55 325.704 Q1760.56 327.903 1760.56 331.699 L1760.56 346.352 L1756.28 346.352 L1756.28 310.334 L1760.56 310.334 L1760.56 324.454 Q1762.09 322.116 1764.15 320.959 Q1766.23 319.801 1768.94 319.801 Q1773.4 319.801 1775.7 322.579 Q1777.99 325.334 1777.99 330.704 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip480)\" d=\"M1786.48 320.426 L1790.74 320.426 L1790.74 346.352 L1786.48 346.352 L1786.48 320.426 M1786.48 310.334 L1790.74 310.334 L1790.74 315.727 L1786.48 315.727 L1786.48 310.334 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip480)\" d=\"M1812.78 310.334 L1812.78 313.875 L1808.71 313.875 Q1806.41 313.875 1805.51 314.801 Q1804.63 315.727 1804.63 318.135 L1804.63 320.426 L1811.65 320.426 L1811.65 323.736 L1804.63 323.736 L1804.63 346.352 L1800.35 346.352 L1800.35 323.736 L1796.28 323.736 L1796.28 320.426 L1800.35 320.426 L1800.35 318.621 Q1800.35 314.292 1802.36 312.324 Q1804.38 310.334 1808.75 310.334 L1812.78 310.334 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip480)\" d=\"M1819.72 313.065 L1819.72 320.426 L1828.5 320.426 L1828.5 323.736 L1819.72 323.736 L1819.72 337.81 Q1819.72 340.982 1820.58 341.885 Q1821.46 342.787 1824.12 342.787 L1828.5 342.787 L1828.5 346.352 L1824.12 346.352 Q1819.19 346.352 1817.32 344.523 Q1815.44 342.672 1815.44 337.81 L1815.44 323.736 L1812.32 323.736 L1812.32 320.426 L1815.44 320.426 L1815.44 313.065 L1819.72 313.065 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip480)\" d=\"M1869.35 325.403 Q1870.95 322.533 1873.17 321.167 Q1875.4 319.801 1878.4 319.801 Q1882.46 319.801 1884.65 322.649 Q1886.85 325.473 1886.85 330.704 L1886.85 346.352 L1882.57 346.352 L1882.57 330.843 Q1882.57 327.116 1881.25 325.311 Q1879.93 323.505 1877.22 323.505 Q1873.91 323.505 1871.99 325.704 Q1870.07 327.903 1870.07 331.699 L1870.07 346.352 L1865.79 346.352 L1865.79 330.843 Q1865.79 327.093 1864.47 325.311 Q1863.15 323.505 1860.4 323.505 Q1857.13 323.505 1855.21 325.727 Q1853.29 327.926 1853.29 331.699 L1853.29 346.352 L1849.01 346.352 L1849.01 320.426 L1853.29 320.426 L1853.29 324.454 Q1854.75 322.07 1856.78 320.936 Q1858.82 319.801 1861.62 319.801 Q1864.45 319.801 1866.41 321.236 Q1868.4 322.672 1869.35 325.403 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip480)\" d=\"M1917.52 332.324 L1917.52 334.408 L1897.94 334.408 Q1898.22 338.806 1900.58 341.121 Q1902.96 343.412 1907.2 343.412 Q1909.65 343.412 1911.95 342.81 Q1914.26 342.209 1916.53 341.005 L1916.53 345.033 Q1914.24 346.005 1911.83 346.514 Q1909.42 347.023 1906.95 347.023 Q1900.74 347.023 1897.11 343.412 Q1893.5 339.801 1893.5 333.644 Q1893.5 327.278 1896.92 323.551 Q1900.37 319.801 1906.21 319.801 Q1911.44 319.801 1914.47 323.181 Q1917.52 326.537 1917.52 332.324 M1913.27 331.074 Q1913.22 327.579 1911.3 325.496 Q1909.4 323.412 1906.25 323.412 Q1902.69 323.412 1900.53 325.426 Q1898.4 327.44 1898.08 331.098 L1913.27 331.074 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip480)\" d=\"M1936.3 333.32 Q1931.14 333.32 1929.14 334.5 Q1927.15 335.681 1927.15 338.528 Q1927.15 340.797 1928.64 342.139 Q1930.14 343.459 1932.71 343.459 Q1936.25 343.459 1938.38 340.959 Q1940.53 338.435 1940.53 334.269 L1940.53 333.32 L1936.3 333.32 M1944.79 331.56 L1944.79 346.352 L1940.53 346.352 L1940.53 342.417 Q1939.08 344.778 1936.9 345.912 Q1934.72 347.023 1931.58 347.023 Q1927.59 347.023 1925.23 344.801 Q1922.89 342.556 1922.89 338.806 Q1922.89 334.431 1925.81 332.209 Q1928.75 329.986 1934.56 329.986 L1940.53 329.986 L1940.53 329.57 Q1940.53 326.63 1938.59 325.033 Q1936.67 323.412 1933.17 323.412 Q1930.95 323.412 1928.84 323.945 Q1926.74 324.477 1924.79 325.542 L1924.79 321.607 Q1927.13 320.704 1929.33 320.264 Q1931.53 319.801 1933.61 319.801 Q1939.24 319.801 1942.02 322.718 Q1944.79 325.635 1944.79 331.56 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip480)\" d=\"M1975.12 330.704 L1975.12 346.352 L1970.86 346.352 L1970.86 330.843 Q1970.86 327.162 1969.42 325.334 Q1967.99 323.505 1965.12 323.505 Q1961.67 323.505 1959.68 325.704 Q1957.69 327.903 1957.69 331.699 L1957.69 346.352 L1953.4 346.352 L1953.4 320.426 L1957.69 320.426 L1957.69 324.454 Q1959.21 322.116 1961.27 320.959 Q1963.36 319.801 1966.07 319.801 Q1970.53 319.801 1972.83 322.579 Q1975.12 325.334 1975.12 330.704 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><polyline clip-path=\"url(#clip480)\" style=\"stroke:#3da44d; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"1584.85,380.912 1709.13,380.912 \"/>\n<path clip-path=\"url(#clip480)\" d=\"M1734.12 394.303 L1734.12 408.053 L1729.84 408.053 L1729.84 372.266 L1734.12 372.266 L1734.12 376.201 Q1735.47 373.887 1737.5 372.776 Q1739.56 371.641 1742.41 371.641 Q1747.13 371.641 1750.07 375.391 Q1753.03 379.141 1753.03 385.252 Q1753.03 391.363 1750.07 395.113 Q1747.13 398.863 1742.41 398.863 Q1739.56 398.863 1737.5 397.752 Q1735.47 396.618 1734.12 394.303 M1748.61 385.252 Q1748.61 380.553 1746.67 377.891 Q1744.75 375.206 1741.37 375.206 Q1737.99 375.206 1736.04 377.891 Q1734.12 380.553 1734.12 385.252 Q1734.12 389.951 1736.04 392.637 Q1737.99 395.299 1741.37 395.299 Q1744.75 395.299 1746.67 392.637 Q1748.61 389.951 1748.61 385.252 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip480)\" d=\"M1775.12 376.248 Q1774.4 375.831 1773.54 375.646 Q1772.71 375.438 1771.69 375.438 Q1768.08 375.438 1766.14 377.799 Q1764.22 380.137 1764.22 384.535 L1764.22 398.192 L1759.93 398.192 L1759.93 372.266 L1764.22 372.266 L1764.22 376.294 Q1765.56 373.933 1767.71 372.799 Q1769.86 371.641 1772.94 371.641 Q1773.38 371.641 1773.91 371.711 Q1774.45 371.757 1775.09 371.873 L1775.12 376.248 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip480)\" d=\"M1788.59 375.252 Q1785.16 375.252 1783.17 377.938 Q1781.18 380.6 1781.18 385.252 Q1781.18 389.905 1783.15 392.59 Q1785.14 395.252 1788.59 395.252 Q1791.99 395.252 1793.98 392.567 Q1795.97 389.882 1795.97 385.252 Q1795.97 380.646 1793.98 377.961 Q1791.99 375.252 1788.59 375.252 M1788.59 371.641 Q1794.15 371.641 1797.32 375.252 Q1800.49 378.863 1800.49 385.252 Q1800.49 391.618 1797.32 395.252 Q1794.15 398.863 1788.59 398.863 Q1783.01 398.863 1779.84 395.252 Q1776.69 391.618 1776.69 385.252 Q1776.69 378.863 1779.84 375.252 Q1783.01 371.641 1788.59 371.641 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip480)\" d=\"M1807.55 372.266 L1811.81 372.266 L1811.81 398.655 Q1811.81 403.609 1809.91 405.831 Q1808.03 408.053 1803.84 408.053 L1802.22 408.053 L1802.22 404.442 L1803.36 404.442 Q1805.79 404.442 1806.67 403.308 Q1807.55 402.197 1807.55 398.655 L1807.55 372.266 M1807.55 362.174 L1811.81 362.174 L1811.81 367.567 L1807.55 367.567 L1807.55 362.174 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip480)\" d=\"M1842.9 384.164 L1842.9 386.248 L1823.31 386.248 Q1823.59 390.646 1825.95 392.961 Q1828.34 395.252 1832.57 395.252 Q1835.03 395.252 1837.32 394.65 Q1839.63 394.049 1841.9 392.845 L1841.9 396.873 Q1839.61 397.845 1837.2 398.354 Q1834.79 398.863 1832.32 398.863 Q1826.11 398.863 1822.48 395.252 Q1818.87 391.641 1818.87 385.484 Q1818.87 379.118 1822.29 375.391 Q1825.74 371.641 1831.58 371.641 Q1836.81 371.641 1839.84 375.021 Q1842.9 378.377 1842.9 384.164 M1838.64 382.914 Q1838.59 379.419 1836.67 377.336 Q1834.77 375.252 1831.62 375.252 Q1828.06 375.252 1825.9 377.266 Q1823.78 379.28 1823.45 382.938 L1838.64 382.914 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip480)\" d=\"M1868.54 373.262 L1868.54 377.243 Q1866.74 376.248 1864.91 375.762 Q1863.1 375.252 1861.25 375.252 Q1857.11 375.252 1854.82 377.891 Q1852.52 380.507 1852.52 385.252 Q1852.52 389.998 1854.82 392.637 Q1857.11 395.252 1861.25 395.252 Q1863.1 395.252 1864.91 394.766 Q1866.74 394.257 1868.54 393.262 L1868.54 397.197 Q1866.76 398.03 1864.84 398.447 Q1862.94 398.863 1860.79 398.863 Q1854.93 398.863 1851.48 395.183 Q1848.03 391.502 1848.03 385.252 Q1848.03 378.91 1851.51 375.276 Q1855 371.641 1861.07 371.641 Q1863.03 371.641 1864.91 372.058 Q1866.78 372.451 1868.54 373.262 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip480)\" d=\"M1880.16 364.905 L1880.16 372.266 L1888.94 372.266 L1888.94 375.576 L1880.16 375.576 L1880.16 389.65 Q1880.16 392.822 1881.02 393.725 Q1881.9 394.627 1884.56 394.627 L1888.94 394.627 L1888.94 398.192 L1884.56 398.192 Q1879.63 398.192 1877.76 396.363 Q1875.88 394.512 1875.88 389.65 L1875.88 375.576 L1872.76 375.576 L1872.76 372.266 L1875.88 372.266 L1875.88 364.905 L1880.16 364.905 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip480)\" d=\"M1916.71 384.164 L1916.71 386.248 L1897.13 386.248 Q1897.41 390.646 1899.77 392.961 Q1902.15 395.252 1906.39 395.252 Q1908.84 395.252 1911.14 394.65 Q1913.45 394.049 1915.72 392.845 L1915.72 396.873 Q1913.43 397.845 1911.02 398.354 Q1908.61 398.863 1906.14 398.863 Q1899.93 398.863 1896.3 395.252 Q1892.69 391.641 1892.69 385.484 Q1892.69 379.118 1896.11 375.391 Q1899.56 371.641 1905.4 371.641 Q1910.63 371.641 1913.66 375.021 Q1916.71 378.377 1916.71 384.164 M1912.46 382.914 Q1912.41 379.419 1910.49 377.336 Q1908.59 375.252 1905.44 375.252 Q1901.88 375.252 1899.72 377.266 Q1897.59 379.28 1897.27 382.938 L1912.46 382.914 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip480)\" d=\"M1940.77 376.201 L1940.77 362.174 L1945.02 362.174 L1945.02 398.192 L1940.77 398.192 L1940.77 394.303 Q1939.42 396.618 1937.36 397.752 Q1935.33 398.863 1932.46 398.863 Q1927.76 398.863 1924.79 395.113 Q1921.85 391.363 1921.85 385.252 Q1921.85 379.141 1924.79 375.391 Q1927.76 371.641 1932.46 371.641 Q1935.33 371.641 1937.36 372.776 Q1939.42 373.887 1940.77 376.201 M1926.25 385.252 Q1926.25 389.951 1928.17 392.637 Q1930.12 395.299 1933.5 395.299 Q1936.88 395.299 1938.82 392.637 Q1940.77 389.951 1940.77 385.252 Q1940.77 380.553 1938.82 377.891 Q1936.88 375.206 1933.5 375.206 Q1930.12 375.206 1928.17 377.891 Q1926.25 380.553 1926.25 385.252 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip480)\" d=\"M1991.04 384.164 L1991.04 386.248 L1971.46 386.248 Q1971.74 390.646 1974.1 392.961 Q1976.48 395.252 1980.72 395.252 Q1983.17 395.252 1985.46 394.65 Q1987.78 394.049 1990.05 392.845 L1990.05 396.873 Q1987.76 397.845 1985.35 398.354 Q1982.94 398.863 1980.46 398.863 Q1974.26 398.863 1970.63 395.252 Q1967.02 391.641 1967.02 385.484 Q1967.02 379.118 1970.44 375.391 Q1973.89 371.641 1979.72 371.641 Q1984.95 371.641 1987.99 375.021 Q1991.04 378.377 1991.04 384.164 M1986.78 382.914 Q1986.74 379.419 1984.82 377.336 Q1982.92 375.252 1979.77 375.252 Q1976.2 375.252 1974.05 377.266 Q1971.92 379.28 1971.6 382.938 L1986.78 382.914 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip480)\" d=\"M2019.58 382.544 L2019.58 398.192 L2015.32 398.192 L2015.32 382.683 Q2015.32 379.002 2013.89 377.174 Q2012.45 375.345 2009.58 375.345 Q2006.14 375.345 2004.14 377.544 Q2002.15 379.743 2002.15 383.539 L2002.15 398.192 L1997.87 398.192 L1997.87 372.266 L2002.15 372.266 L2002.15 376.294 Q2003.68 373.956 2005.74 372.799 Q2007.83 371.641 2010.53 371.641 Q2015 371.641 2017.29 374.419 Q2019.58 377.174 2019.58 382.544 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip480)\" d=\"M2050.26 384.164 L2050.26 386.248 L2030.67 386.248 Q2030.95 390.646 2033.31 392.961 Q2035.7 395.252 2039.93 395.252 Q2042.39 395.252 2044.68 394.65 Q2046.99 394.049 2049.26 392.845 L2049.26 396.873 Q2046.97 397.845 2044.56 398.354 Q2042.15 398.863 2039.68 398.863 Q2033.47 398.863 2029.84 395.252 Q2026.23 391.641 2026.23 385.484 Q2026.23 379.118 2029.65 375.391 Q2033.1 371.641 2038.94 371.641 Q2044.17 371.641 2047.2 375.021 Q2050.26 378.377 2050.26 384.164 M2046 382.914 Q2045.95 379.419 2044.03 377.336 Q2042.13 375.252 2038.98 375.252 Q2035.42 375.252 2033.26 377.266 Q2031.14 379.28 2030.81 382.938 L2046 382.914 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip480)\" d=\"M2072.27 376.248 Q2071.55 375.831 2070.7 375.646 Q2069.86 375.438 2068.84 375.438 Q2065.23 375.438 2063.29 377.799 Q2061.37 380.137 2061.37 384.535 L2061.37 398.192 L2057.08 398.192 L2057.08 372.266 L2061.37 372.266 L2061.37 376.294 Q2062.71 373.933 2064.86 372.799 Q2067.01 371.641 2070.09 371.641 Q2070.53 371.641 2071.07 371.711 Q2071.6 371.757 2072.25 371.873 L2072.27 376.248 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip480)\" d=\"M2092.96 384.928 Q2092.96 380.299 2091.04 377.752 Q2089.14 375.206 2085.69 375.206 Q2082.27 375.206 2080.35 377.752 Q2078.45 380.299 2078.45 384.928 Q2078.45 389.535 2080.35 392.081 Q2082.27 394.627 2085.69 394.627 Q2089.14 394.627 2091.04 392.081 Q2092.96 389.535 2092.96 384.928 M2097.22 394.975 Q2097.22 401.595 2094.28 404.812 Q2091.34 408.053 2085.28 408.053 Q2083.03 408.053 2081.04 407.706 Q2079.05 407.382 2077.18 406.687 L2077.18 402.544 Q2079.05 403.562 2080.88 404.049 Q2082.71 404.535 2084.61 404.535 Q2088.8 404.535 2090.88 402.336 Q2092.96 400.16 2092.96 395.738 L2092.96 393.632 Q2091.64 395.924 2089.58 397.058 Q2087.52 398.192 2084.65 398.192 Q2079.88 398.192 2076.97 394.558 Q2074.05 390.924 2074.05 384.928 Q2074.05 378.91 2076.97 375.276 Q2079.88 371.641 2084.65 371.641 Q2087.52 371.641 2089.58 372.776 Q2091.64 373.91 2092.96 376.201 L2092.96 372.266 L2097.22 372.266 L2097.22 394.975 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip480)\" d=\"M2116.78 400.599 Q2114.98 405.229 2113.26 406.641 Q2111.55 408.053 2108.68 408.053 L2105.28 408.053 L2105.28 404.488 L2107.78 404.488 Q2109.54 404.488 2110.51 403.655 Q2111.48 402.822 2112.66 399.72 L2113.43 397.775 L2102.94 372.266 L2107.45 372.266 L2115.56 392.544 L2123.66 372.266 L2128.17 372.266 L2116.78 400.599 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip480)\" d=\"M719.687 899.083 L1838.19 899.083 L1838.19 462.094 L719.687 462.094  Z\" fill=\"#ffffff\" fill-rule=\"evenodd\" fill-opacity=\"1\"/>\n<defs>\n  <clipPath id=\"clip483\">\n    <rect x=\"719\" y=\"462\" width=\"1120\" height=\"438\"/>\n  </clipPath>\n</defs>\n<polyline clip-path=\"url(#clip483)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:2; stroke-opacity:0.1; fill:none\" points=\"719.687,899.083 719.687,462.094 \"/>\n<polyline clip-path=\"url(#clip483)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:2; stroke-opacity:0.1; fill:none\" points=\"999.313,899.083 999.313,462.094 \"/>\n<polyline clip-path=\"url(#clip483)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:2; stroke-opacity:0.1; fill:none\" points=\"1278.94,899.083 1278.94,462.094 \"/>\n<polyline clip-path=\"url(#clip483)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:2; stroke-opacity:0.1; fill:none\" points=\"1558.56,899.083 1558.56,462.094 \"/>\n<polyline clip-path=\"url(#clip483)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:2; stroke-opacity:0.1; fill:none\" points=\"1838.19,899.083 1838.19,462.094 \"/>\n<polyline clip-path=\"url(#clip483)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:2; stroke-opacity:0.1; fill:none\" points=\"719.687,879.22 1838.19,879.22 \"/>\n<polyline clip-path=\"url(#clip483)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:2; stroke-opacity:0.1; fill:none\" points=\"719.687,779.904 1838.19,779.904 \"/>\n<polyline clip-path=\"url(#clip483)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:2; stroke-opacity:0.1; fill:none\" points=\"719.687,680.588 1838.19,680.588 \"/>\n<polyline clip-path=\"url(#clip483)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:2; stroke-opacity:0.1; fill:none\" points=\"719.687,581.273 1838.19,581.273 \"/>\n<polyline clip-path=\"url(#clip483)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:2; stroke-opacity:0.1; fill:none\" points=\"719.687,481.957 1838.19,481.957 \"/>\n<polyline clip-path=\"url(#clip480)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"719.687,899.083 1838.19,899.083 \"/>\n<polyline clip-path=\"url(#clip480)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"719.687,899.083 719.687,880.185 \"/>\n<polyline clip-path=\"url(#clip480)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"999.313,899.083 999.313,880.185 \"/>\n<polyline clip-path=\"url(#clip480)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"1278.94,899.083 1278.94,880.185 \"/>\n<polyline clip-path=\"url(#clip480)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"1558.56,899.083 1558.56,880.185 \"/>\n<polyline clip-path=\"url(#clip480)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"1838.19,899.083 1838.19,880.185 \"/>\n<path clip-path=\"url(#clip480)\" d=\"M664.213 957.547 L671.852 957.547 L671.852 931.182 L663.542 932.849 L663.542 928.589 L671.806 926.923 L676.482 926.923 L676.482 957.547 L684.12 957.547 L684.12 961.483 L664.213 961.483 L664.213 957.547 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip480)\" d=\"M703.565 930.001 Q699.954 930.001 698.125 933.566 Q696.319 937.108 696.319 944.237 Q696.319 951.344 698.125 954.909 Q699.954 958.45 703.565 958.45 Q707.199 958.45 709.005 954.909 Q710.833 951.344 710.833 944.237 Q710.833 937.108 709.005 933.566 Q707.199 930.001 703.565 930.001 M703.565 926.298 Q709.375 926.298 712.43 930.904 Q715.509 935.487 715.509 944.237 Q715.509 952.964 712.43 957.571 Q709.375 962.154 703.565 962.154 Q697.755 962.154 694.676 957.571 Q691.62 952.964 691.62 944.237 Q691.62 935.487 694.676 930.904 Q697.755 926.298 703.565 926.298 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip480)\" d=\"M733.727 930.001 Q730.116 930.001 728.287 933.566 Q726.481 937.108 726.481 944.237 Q726.481 951.344 728.287 954.909 Q730.116 958.45 733.727 958.45 Q737.361 958.45 739.166 954.909 Q740.995 951.344 740.995 944.237 Q740.995 937.108 739.166 933.566 Q737.361 930.001 733.727 930.001 M733.727 926.298 Q739.537 926.298 742.592 930.904 Q745.671 935.487 745.671 944.237 Q745.671 952.964 742.592 957.571 Q739.537 962.154 733.727 962.154 Q727.916 962.154 724.838 957.571 Q721.782 952.964 721.782 944.237 Q721.782 935.487 724.838 930.904 Q727.916 926.298 733.727 926.298 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip480)\" d=\"M763.888 930.001 Q760.277 930.001 758.449 933.566 Q756.643 937.108 756.643 944.237 Q756.643 951.344 758.449 954.909 Q760.277 958.45 763.888 958.45 Q767.523 958.45 769.328 954.909 Q771.157 951.344 771.157 944.237 Q771.157 937.108 769.328 933.566 Q767.523 930.001 763.888 930.001 M763.888 926.298 Q769.699 926.298 772.754 930.904 Q775.833 935.487 775.833 944.237 Q775.833 952.964 772.754 957.571 Q769.699 962.154 763.888 962.154 Q758.078 962.154 755 957.571 Q751.944 952.964 751.944 944.237 Q751.944 935.487 755 930.904 Q758.078 926.298 763.888 926.298 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip480)\" d=\"M943.839 957.547 L951.477 957.547 L951.477 931.182 L943.167 932.849 L943.167 928.589 L951.431 926.923 L956.107 926.923 L956.107 957.547 L963.746 957.547 L963.746 961.483 L943.839 961.483 L943.839 957.547 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip480)\" d=\"M973.237 926.923 L991.593 926.923 L991.593 930.858 L977.519 930.858 L977.519 939.33 Q978.538 938.983 979.556 938.821 Q980.575 938.636 981.593 938.636 Q987.38 938.636 990.76 941.807 Q994.139 944.978 994.139 950.395 Q994.139 955.973 990.667 959.075 Q987.195 962.154 980.875 962.154 Q978.7 962.154 976.431 961.784 Q974.186 961.413 971.778 960.672 L971.778 955.973 Q973.862 957.108 976.084 957.663 Q978.306 958.219 980.783 958.219 Q984.788 958.219 987.125 956.112 Q989.463 954.006 989.463 950.395 Q989.463 946.784 987.125 944.677 Q984.788 942.571 980.783 942.571 Q978.908 942.571 977.033 942.987 Q975.181 943.404 973.237 944.284 L973.237 926.923 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip480)\" d=\"M1013.35 930.001 Q1009.74 930.001 1007.91 933.566 Q1006.11 937.108 1006.11 944.237 Q1006.11 951.344 1007.91 954.909 Q1009.74 958.45 1013.35 958.45 Q1016.99 958.45 1018.79 954.909 Q1020.62 951.344 1020.62 944.237 Q1020.62 937.108 1018.79 933.566 Q1016.99 930.001 1013.35 930.001 M1013.35 926.298 Q1019.16 926.298 1022.22 930.904 Q1025.3 935.487 1025.3 944.237 Q1025.3 952.964 1022.22 957.571 Q1019.16 962.154 1013.35 962.154 Q1007.54 962.154 1004.46 957.571 Q1001.41 952.964 1001.41 944.237 Q1001.41 935.487 1004.46 930.904 Q1007.54 926.298 1013.35 926.298 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip480)\" d=\"M1043.51 930.001 Q1039.9 930.001 1038.07 933.566 Q1036.27 937.108 1036.27 944.237 Q1036.27 951.344 1038.07 954.909 Q1039.9 958.45 1043.51 958.45 Q1047.15 958.45 1048.95 954.909 Q1050.78 951.344 1050.78 944.237 Q1050.78 937.108 1048.95 933.566 Q1047.15 930.001 1043.51 930.001 M1043.51 926.298 Q1049.32 926.298 1052.38 930.904 Q1055.46 935.487 1055.46 944.237 Q1055.46 952.964 1052.38 957.571 Q1049.32 962.154 1043.51 962.154 Q1037.7 962.154 1034.63 957.571 Q1031.57 952.964 1031.57 944.237 Q1031.57 935.487 1034.63 930.904 Q1037.7 926.298 1043.51 926.298 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip480)\" d=\"M1227.55 957.547 L1243.87 957.547 L1243.87 961.483 L1221.92 961.483 L1221.92 957.547 Q1224.59 954.793 1229.17 950.163 Q1233.78 945.511 1234.96 944.168 Q1237.2 941.645 1238.08 939.909 Q1238.98 938.149 1238.98 936.46 Q1238.98 933.705 1237.04 931.969 Q1235.12 930.233 1232.02 930.233 Q1229.82 930.233 1227.36 930.997 Q1224.93 931.761 1222.16 933.312 L1222.16 928.589 Q1224.98 927.455 1227.43 926.876 Q1229.89 926.298 1231.92 926.298 Q1237.3 926.298 1240.49 928.983 Q1243.68 931.668 1243.68 936.159 Q1243.68 938.288 1242.87 940.21 Q1242.09 942.108 1239.98 944.7 Q1239.4 945.372 1236.3 948.589 Q1233.2 951.784 1227.55 957.547 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip480)\" d=\"M1263.68 930.001 Q1260.07 930.001 1258.24 933.566 Q1256.44 937.108 1256.44 944.237 Q1256.44 951.344 1258.24 954.909 Q1260.07 958.45 1263.68 958.45 Q1267.32 958.45 1269.12 954.909 Q1270.95 951.344 1270.95 944.237 Q1270.95 937.108 1269.12 933.566 Q1267.32 930.001 1263.68 930.001 M1263.68 926.298 Q1269.49 926.298 1272.55 930.904 Q1275.63 935.487 1275.63 944.237 Q1275.63 952.964 1272.55 957.571 Q1269.49 962.154 1263.68 962.154 Q1257.87 962.154 1254.8 957.571 Q1251.74 952.964 1251.74 944.237 Q1251.74 935.487 1254.8 930.904 Q1257.87 926.298 1263.68 926.298 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip480)\" d=\"M1293.85 930.001 Q1290.23 930.001 1288.41 933.566 Q1286.6 937.108 1286.6 944.237 Q1286.6 951.344 1288.41 954.909 Q1290.23 958.45 1293.85 958.45 Q1297.48 958.45 1299.29 954.909 Q1301.11 951.344 1301.11 944.237 Q1301.11 937.108 1299.29 933.566 Q1297.48 930.001 1293.85 930.001 M1293.85 926.298 Q1299.66 926.298 1302.71 930.904 Q1305.79 935.487 1305.79 944.237 Q1305.79 952.964 1302.71 957.571 Q1299.66 962.154 1293.85 962.154 Q1288.04 962.154 1284.96 957.571 Q1281.9 952.964 1281.9 944.237 Q1281.9 935.487 1284.96 930.904 Q1288.04 926.298 1293.85 926.298 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip480)\" d=\"M1324.01 930.001 Q1320.4 930.001 1318.57 933.566 Q1316.76 937.108 1316.76 944.237 Q1316.76 951.344 1318.57 954.909 Q1320.4 958.45 1324.01 958.45 Q1327.64 958.45 1329.45 954.909 Q1331.28 951.344 1331.28 944.237 Q1331.28 937.108 1329.45 933.566 Q1327.64 930.001 1324.01 930.001 M1324.01 926.298 Q1329.82 926.298 1332.87 930.904 Q1335.95 935.487 1335.95 944.237 Q1335.95 952.964 1332.87 957.571 Q1329.82 962.154 1324.01 962.154 Q1318.2 962.154 1315.12 957.571 Q1312.06 952.964 1312.06 944.237 Q1312.06 935.487 1315.12 930.904 Q1318.2 926.298 1324.01 926.298 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip480)\" d=\"M1507.18 957.547 L1523.49 957.547 L1523.49 961.483 L1501.55 961.483 L1501.55 957.547 Q1504.21 954.793 1508.8 950.163 Q1513.4 945.511 1514.58 944.168 Q1516.83 941.645 1517.71 939.909 Q1518.61 938.149 1518.61 936.46 Q1518.61 933.705 1516.67 931.969 Q1514.74 930.233 1511.64 930.233 Q1509.44 930.233 1506.99 930.997 Q1504.56 931.761 1501.78 933.312 L1501.78 928.589 Q1504.61 927.455 1507.06 926.876 Q1509.51 926.298 1511.55 926.298 Q1516.92 926.298 1520.12 928.983 Q1523.31 931.668 1523.31 936.159 Q1523.31 938.288 1522.5 940.21 Q1521.71 942.108 1519.61 944.7 Q1519.03 945.372 1515.93 948.589 Q1512.82 951.784 1507.18 957.547 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip480)\" d=\"M1533.36 926.923 L1551.71 926.923 L1551.71 930.858 L1537.64 930.858 L1537.64 939.33 Q1538.66 938.983 1539.68 938.821 Q1540.69 938.636 1541.71 938.636 Q1547.5 938.636 1550.88 941.807 Q1554.26 944.978 1554.26 950.395 Q1554.26 955.973 1550.79 959.075 Q1547.31 962.154 1540.99 962.154 Q1538.82 962.154 1536.55 961.784 Q1534.3 961.413 1531.9 960.672 L1531.9 955.973 Q1533.98 957.108 1536.2 957.663 Q1538.43 958.219 1540.9 958.219 Q1544.91 958.219 1547.24 956.112 Q1549.58 954.006 1549.58 950.395 Q1549.58 946.784 1547.24 944.677 Q1544.91 942.571 1540.9 942.571 Q1539.03 942.571 1537.15 942.987 Q1535.3 943.404 1533.36 944.284 L1533.36 926.923 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip480)\" d=\"M1573.47 930.001 Q1569.86 930.001 1568.03 933.566 Q1566.23 937.108 1566.23 944.237 Q1566.23 951.344 1568.03 954.909 Q1569.86 958.45 1573.47 958.45 Q1577.11 958.45 1578.91 954.909 Q1580.74 951.344 1580.74 944.237 Q1580.74 937.108 1578.91 933.566 Q1577.11 930.001 1573.47 930.001 M1573.47 926.298 Q1579.28 926.298 1582.34 930.904 Q1585.42 935.487 1585.42 944.237 Q1585.42 952.964 1582.34 957.571 Q1579.28 962.154 1573.47 962.154 Q1567.66 962.154 1564.58 957.571 Q1561.53 952.964 1561.53 944.237 Q1561.53 935.487 1564.58 930.904 Q1567.66 926.298 1573.47 926.298 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip480)\" d=\"M1603.63 930.001 Q1600.02 930.001 1598.19 933.566 Q1596.39 937.108 1596.39 944.237 Q1596.39 951.344 1598.19 954.909 Q1600.02 958.45 1603.63 958.45 Q1607.27 958.45 1609.07 954.909 Q1610.9 951.344 1610.9 944.237 Q1610.9 937.108 1609.07 933.566 Q1607.27 930.001 1603.63 930.001 M1603.63 926.298 Q1609.44 926.298 1612.5 930.904 Q1615.58 935.487 1615.58 944.237 Q1615.58 952.964 1612.5 957.571 Q1609.44 962.154 1603.63 962.154 Q1597.82 962.154 1594.74 957.571 Q1591.69 952.964 1591.69 944.237 Q1591.69 935.487 1594.74 930.904 Q1597.82 926.298 1603.63 926.298 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip480)\" d=\"M1796.87 942.848 Q1800.23 943.566 1802.1 945.835 Q1804 948.103 1804 951.436 Q1804 956.552 1800.48 959.353 Q1796.96 962.154 1790.48 962.154 Q1788.31 962.154 1785.99 961.714 Q1783.7 961.297 1781.25 960.441 L1781.25 955.927 Q1783.19 957.061 1785.5 957.64 Q1787.82 958.219 1790.34 958.219 Q1794.74 958.219 1797.03 956.483 Q1799.35 954.747 1799.35 951.436 Q1799.35 948.381 1797.19 946.668 Q1795.06 944.932 1791.25 944.932 L1787.22 944.932 L1787.22 941.089 L1791.43 941.089 Q1794.88 941.089 1796.71 939.724 Q1798.54 938.335 1798.54 935.742 Q1798.54 933.08 1796.64 931.668 Q1794.76 930.233 1791.25 930.233 Q1789.32 930.233 1787.13 930.649 Q1784.93 931.066 1782.29 931.946 L1782.29 927.779 Q1784.95 927.038 1787.26 926.668 Q1789.6 926.298 1791.66 926.298 Q1796.99 926.298 1800.09 928.728 Q1803.19 931.136 1803.19 935.256 Q1803.19 938.126 1801.55 940.117 Q1799.9 942.085 1796.87 942.848 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip480)\" d=\"M1822.87 930.001 Q1819.25 930.001 1817.43 933.566 Q1815.62 937.108 1815.62 944.237 Q1815.62 951.344 1817.43 954.909 Q1819.25 958.45 1822.87 958.45 Q1826.5 958.45 1828.31 954.909 Q1830.13 951.344 1830.13 944.237 Q1830.13 937.108 1828.31 933.566 Q1826.5 930.001 1822.87 930.001 M1822.87 926.298 Q1828.68 926.298 1831.73 930.904 Q1834.81 935.487 1834.81 944.237 Q1834.81 952.964 1831.73 957.571 Q1828.68 962.154 1822.87 962.154 Q1817.06 962.154 1813.98 957.571 Q1810.92 952.964 1810.92 944.237 Q1810.92 935.487 1813.98 930.904 Q1817.06 926.298 1822.87 926.298 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip480)\" d=\"M1853.03 930.001 Q1849.42 930.001 1847.59 933.566 Q1845.78 937.108 1845.78 944.237 Q1845.78 951.344 1847.59 954.909 Q1849.42 958.45 1853.03 958.45 Q1856.66 958.45 1858.47 954.909 Q1860.3 951.344 1860.3 944.237 Q1860.3 937.108 1858.47 933.566 Q1856.66 930.001 1853.03 930.001 M1853.03 926.298 Q1858.84 926.298 1861.89 930.904 Q1864.97 935.487 1864.97 944.237 Q1864.97 952.964 1861.89 957.571 Q1858.84 962.154 1853.03 962.154 Q1847.22 962.154 1844.14 957.571 Q1841.08 952.964 1841.08 944.237 Q1841.08 935.487 1844.14 930.904 Q1847.22 926.298 1853.03 926.298 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip480)\" d=\"M1883.19 930.001 Q1879.58 930.001 1877.75 933.566 Q1875.94 937.108 1875.94 944.237 Q1875.94 951.344 1877.75 954.909 Q1879.58 958.45 1883.19 958.45 Q1886.82 958.45 1888.63 954.909 Q1890.46 951.344 1890.46 944.237 Q1890.46 937.108 1888.63 933.566 Q1886.82 930.001 1883.19 930.001 M1883.19 926.298 Q1889 926.298 1892.06 930.904 Q1895.13 935.487 1895.13 944.237 Q1895.13 952.964 1892.06 957.571 Q1889 962.154 1883.19 962.154 Q1877.38 962.154 1874.3 957.571 Q1871.24 952.964 1871.24 944.237 Q1871.24 935.487 1874.3 930.904 Q1877.38 926.298 1883.19 926.298 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><polyline clip-path=\"url(#clip480)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"719.687,899.083 719.687,462.094 \"/>\n<polyline clip-path=\"url(#clip480)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"719.687,879.22 738.585,879.22 \"/>\n<polyline clip-path=\"url(#clip480)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"719.687,779.904 738.585,779.904 \"/>\n<polyline clip-path=\"url(#clip480)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"719.687,680.588 738.585,680.588 \"/>\n<polyline clip-path=\"url(#clip480)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"719.687,581.273 738.585,581.273 \"/>\n<polyline clip-path=\"url(#clip480)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"719.687,481.957 738.585,481.957 \"/>\n<path clip-path=\"url(#clip480)\" d=\"M576.743 879.671 L606.419 879.671 L606.419 883.606 L576.743 883.606 L576.743 879.671 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip480)\" d=\"M616.558 861.94 L634.914 861.94 L634.914 865.875 L620.84 865.875 L620.84 874.347 Q621.859 874 622.877 873.838 Q623.896 873.652 624.914 873.652 Q630.702 873.652 634.081 876.824 Q637.461 879.995 637.461 885.412 Q637.461 890.99 633.989 894.092 Q630.516 897.171 624.197 897.171 Q622.021 897.171 619.752 896.8 Q617.507 896.43 615.1 895.689 L615.1 890.99 Q617.183 892.125 619.405 892.68 Q621.627 893.236 624.104 893.236 Q628.109 893.236 630.447 891.129 Q632.785 889.023 632.785 885.412 Q632.785 881.801 630.447 879.694 Q628.109 877.588 624.104 877.588 Q622.229 877.588 620.354 878.004 Q618.502 878.421 616.558 879.301 L616.558 861.94 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip480)\" d=\"M646.674 890.62 L651.558 890.62 L651.558 896.5 L646.674 896.5 L646.674 890.62 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip480)\" d=\"M671.743 865.018 Q668.132 865.018 666.303 868.583 Q664.498 872.125 664.498 879.254 Q664.498 886.361 666.303 889.925 Q668.132 893.467 671.743 893.467 Q675.377 893.467 677.183 889.925 Q679.011 886.361 679.011 879.254 Q679.011 872.125 677.183 868.583 Q675.377 865.018 671.743 865.018 M671.743 861.315 Q677.553 861.315 680.609 865.921 Q683.687 870.504 683.687 879.254 Q683.687 887.981 680.609 892.588 Q677.553 897.171 671.743 897.171 Q665.933 897.171 662.854 892.588 Q659.799 887.981 659.799 879.254 Q659.799 870.504 662.854 865.921 Q665.933 861.315 671.743 861.315 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip480)\" d=\"M577.739 780.355 L607.415 780.355 L607.415 784.291 L577.739 784.291 L577.739 780.355 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip480)\" d=\"M630.354 766.698 L618.549 785.147 L630.354 785.147 L630.354 766.698 M629.127 762.624 L635.007 762.624 L635.007 785.147 L639.938 785.147 L639.938 789.036 L635.007 789.036 L635.007 797.184 L630.354 797.184 L630.354 789.036 L614.753 789.036 L614.753 784.522 L629.127 762.624 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip480)\" d=\"M647.669 791.304 L652.553 791.304 L652.553 797.184 L647.669 797.184 L647.669 791.304 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip480)\" d=\"M662.785 762.624 L681.141 762.624 L681.141 766.559 L667.067 766.559 L667.067 775.031 Q668.086 774.684 669.104 774.522 Q670.123 774.337 671.141 774.337 Q676.928 774.337 680.308 777.508 Q683.687 780.679 683.687 786.096 Q683.687 791.675 680.215 794.777 Q676.743 797.855 670.424 797.855 Q668.248 797.855 665.979 797.485 Q663.734 797.115 661.326 796.374 L661.326 791.675 Q663.41 792.809 665.632 793.365 Q667.854 793.92 670.331 793.92 Q674.336 793.92 676.673 791.814 Q679.011 789.707 679.011 786.096 Q679.011 782.485 676.673 780.379 Q674.336 778.272 670.331 778.272 Q668.456 778.272 666.581 778.689 Q664.729 779.105 662.785 779.985 L662.785 762.624 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip480)\" d=\"M576.743 681.04 L606.419 681.04 L606.419 684.975 L576.743 684.975 L576.743 681.04 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip480)\" d=\"M629.359 667.382 L617.553 685.831 L629.359 685.831 L629.359 667.382 M628.132 663.308 L634.012 663.308 L634.012 685.831 L638.942 685.831 L638.942 689.72 L634.012 689.72 L634.012 697.868 L629.359 697.868 L629.359 689.72 L613.757 689.72 L613.757 685.206 L628.132 663.308 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip480)\" d=\"M646.674 691.989 L651.558 691.989 L651.558 697.868 L646.674 697.868 L646.674 691.989 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip480)\" d=\"M671.743 666.387 Q668.132 666.387 666.303 669.952 Q664.498 673.494 664.498 680.623 Q664.498 687.73 666.303 691.294 Q668.132 694.836 671.743 694.836 Q675.377 694.836 677.183 691.294 Q679.011 687.73 679.011 680.623 Q679.011 673.494 677.183 669.952 Q675.377 666.387 671.743 666.387 M671.743 662.683 Q677.553 662.683 680.609 667.29 Q683.687 671.873 683.687 680.623 Q683.687 689.35 680.609 693.956 Q677.553 698.54 671.743 698.54 Q665.933 698.54 662.854 693.956 Q659.799 689.35 659.799 680.623 Q659.799 671.873 662.854 667.29 Q665.933 662.683 671.743 662.683 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip480)\" d=\"M577.739 581.724 L607.415 581.724 L607.415 585.659 L577.739 585.659 L577.739 581.724 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip480)\" d=\"M631.674 579.919 Q635.03 580.636 636.905 582.905 Q638.803 585.173 638.803 588.507 Q638.803 593.622 635.285 596.423 Q631.766 599.224 625.285 599.224 Q623.109 599.224 620.794 598.784 Q618.502 598.368 616.049 597.511 L616.049 592.997 Q617.993 594.132 620.308 594.71 Q622.623 595.289 625.146 595.289 Q629.544 595.289 631.836 593.553 Q634.151 591.817 634.151 588.507 Q634.151 585.451 631.998 583.738 Q629.868 582.002 626.049 582.002 L622.021 582.002 L622.021 578.159 L626.234 578.159 Q629.683 578.159 631.512 576.794 Q633.34 575.405 633.34 572.812 Q633.34 570.15 631.442 568.738 Q629.567 567.303 626.049 567.303 Q624.127 567.303 621.928 567.72 Q619.729 568.136 617.09 569.016 L617.09 564.849 Q619.752 564.109 622.067 563.738 Q624.405 563.368 626.465 563.368 Q631.789 563.368 634.891 565.798 Q637.993 568.206 637.993 572.326 Q637.993 575.196 636.35 577.187 Q634.706 579.155 631.674 579.919 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip480)\" d=\"M647.669 592.673 L652.553 592.673 L652.553 598.553 L647.669 598.553 L647.669 592.673 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip480)\" d=\"M662.785 563.993 L681.141 563.993 L681.141 567.928 L667.067 567.928 L667.067 576.4 Q668.086 576.053 669.104 575.891 Q670.123 575.706 671.141 575.706 Q676.928 575.706 680.308 578.877 Q683.687 582.048 683.687 587.465 Q683.687 593.044 680.215 596.145 Q676.743 599.224 670.424 599.224 Q668.248 599.224 665.979 598.854 Q663.734 598.483 661.326 597.743 L661.326 593.044 Q663.41 594.178 665.632 594.733 Q667.854 595.289 670.331 595.289 Q674.336 595.289 676.673 593.183 Q679.011 591.076 679.011 587.465 Q679.011 583.854 676.673 581.747 Q674.336 579.641 670.331 579.641 Q668.456 579.641 666.581 580.058 Q664.729 580.474 662.785 581.354 L662.785 563.993 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip480)\" d=\"M576.743 482.409 L606.419 482.409 L606.419 486.344 L576.743 486.344 L576.743 482.409 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip480)\" d=\"M630.678 480.603 Q634.035 481.321 635.91 483.589 Q637.808 485.858 637.808 489.191 Q637.808 494.307 634.289 497.108 Q630.771 499.909 624.29 499.909 Q622.114 499.909 619.799 499.469 Q617.507 499.052 615.053 498.196 L615.053 493.682 Q616.998 494.816 619.313 495.395 Q621.627 495.973 624.151 495.973 Q628.549 495.973 630.84 494.237 Q633.155 492.501 633.155 489.191 Q633.155 486.136 631.002 484.423 Q628.873 482.686 625.053 482.686 L621.026 482.686 L621.026 478.844 L625.239 478.844 Q628.688 478.844 630.516 477.478 Q632.345 476.089 632.345 473.497 Q632.345 470.835 630.447 469.423 Q628.572 467.987 625.053 467.987 Q623.132 467.987 620.933 468.404 Q618.734 468.821 616.095 469.7 L616.095 465.534 Q618.757 464.793 621.072 464.423 Q623.41 464.052 625.47 464.052 Q630.794 464.052 633.896 466.483 Q636.998 468.89 636.998 473.011 Q636.998 475.881 635.354 477.872 Q633.711 479.839 630.678 480.603 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip480)\" d=\"M646.674 493.358 L651.558 493.358 L651.558 499.237 L646.674 499.237 L646.674 493.358 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip480)\" d=\"M671.743 467.756 Q668.132 467.756 666.303 471.321 Q664.498 474.862 664.498 481.992 Q664.498 489.098 666.303 492.663 Q668.132 496.205 671.743 496.205 Q675.377 496.205 677.183 492.663 Q679.011 489.098 679.011 481.992 Q679.011 474.862 677.183 471.321 Q675.377 467.756 671.743 467.756 M671.743 464.052 Q677.553 464.052 680.609 468.659 Q683.687 473.242 683.687 481.992 Q683.687 490.719 680.609 495.325 Q677.553 499.909 671.743 499.909 Q665.933 499.909 662.854 495.325 Q659.799 490.719 659.799 481.992 Q659.799 473.242 662.854 468.659 Q665.933 464.052 671.743 464.052 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><polyline clip-path=\"url(#clip483)\" style=\"stroke:#009af9; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"160.995,-1577.5 161.555,-2922.08 162.114,-4155.78 162.673,-5286.05 163.232,-6319.78 163.792,-7263.33 164.351,-8122.62 164.91,-8903.13 165.469,-8354.17 166.029,-9052.18 166.588,-9682.55 167.147,-10249.6 167.706,-9782.91 168.266,-9402.72 168.825,-9897.85 169.384,-10333.3 169.943,-9314.72 170.503,-9727.18 171.062,-9461.87 171.621,-9789.79 172.18,-10081.9 172.74,-10324.7 173.299,-10539.2 173.858,-10737.9 174.417,-10895.8 174.977,-11018.6 175.536,-11113.6 176.095,-11188.4 176.655,-11238.5 177.214,-11268 177.773,-10960.8 178.332,-10700.1 178.892,-10701.3 179.451,-10684.1 180.01,-10655.4 180.569,-10388.6 181.129,-10334 181.688,-10267.4 182.247,-10181.6 182.806,-10097.8 183.366,-9832.21 183.925,-9574.7 184.484,-9031.79 185.043,-8925.38 185.603,-8682.61 186.162,-8445.08 186.721,-8326.11 187.28,-7984.74 187.84,-7762.98 188.399,-7637.79 188.958,-7507.81 189.517,-7188.49 190.077,-6979.38 190.636,-6699.53 191.195,-6419.73 191.754,-6146.9 192.314,-5952.24 192.873,-5700.25 193.432,-5517.2 193.991,-5401.89 194.551,-5288.16 195.11,-5172.9 195.669,-5059.19 196.228,-4835.79 196.788,-4669.09 197.347,-4506.44 197.906,-4401.85 198.465,-4196.89 199.025,-3954.66 199.584,-3769.78 200.143,-3591.14 200.702,-3419.49 201.262,-3294.13 201.821,-3217.98 202.38,-3057.78 202.939,-2906.08 203.499,-2792.41 204.058,-2719.92 204.617,-2542.71 205.176,-2471.54 205.736,-2300.04 206.295,-2236.42 206.854,-2038 207.413,-2012.14 207.973,-1923.18 208.532,-1865.45 209.091,-1744.74 209.65,-1662.65 210.21,-1579.62 210.769,-1471.04 211.328,-1391.25 211.887,-1313.12 212.447,-1212.06 213.006,-1137.14 213.565,-1041.89 214.124,-947.357 214.684,-882.239 215.243,-796.48 215.802,-759.775 216.361,-652.591 216.921,-551.02 217.48,-476.472 218.039,-448.993 218.598,-399.795 219.158,-353.622 219.717,-282.918 220.276,-218.157 220.835,-198.502 221.395,-133.257 221.954,-115.845 222.513,-96.764 223.072,-98.7201 223.632,-11.6067 224.191,30.148 224.75,70.7176 225.309,109.758 225.869,126.714 226.428,137.519 226.987,175.008 227.546,189.433 228.106,267.649 228.665,321.031 229.224,371.687 229.783,360.345 230.343,371.817 230.902,362.427 231.461,414.113 232.02,404.783 232.58,435.703 233.139,431.894 233.698,481.535 234.257,548.565 234.817,594.454 235.376,618.589 235.935,642.9 236.494,644.019 237.054,645.951 237.613,673.261 238.172,734.024 238.731,736.442 239.291,754.782 239.85,776.187 240.409,813.39 240.968,850.167 241.528,865.551 242.087,864.288 242.646,880.078 243.205,898.241 243.765,913.075 244.324,964.07 244.883,959.623 245.442,1009.77 246.002,980.492 246.561,1006.47 247.12,1016.05 247.679,1065.43 248.239,1056.11 248.798,1065.56 249.357,1088.72 249.916,1129.65 250.476,1132.12 251.035,1186.53 251.594,1186.59 252.153,1156.19 252.713,1157.6 253.272,1127.13 253.831,1081.46 254.39,1103.88 254.95,1107.64 255.509,1097.69 256.068,1082.54 256.627,1106.78 257.187,1112.71 257.746,1098.4 258.305,1102.24 258.864,1143.49 259.424,1131.39 259.983,1124.31 260.542,1131.16 261.101,1117.9 261.661,1109.11 262.22,1099.69 262.779,1104.75 263.338,1144.59 263.898,1100.97 264.457,1105.65 265.016,1112.7 265.575,1119.88 266.135,1094.14 266.694,1118.95 267.253,1092.45 267.812,1070.32 268.372,1064.93 268.931,1091.88 269.49,1084.05 270.049,1064.48 270.609,1106.97 271.168,1130.52 271.727,1119.65 272.286,1107.08 272.846,1063.19 273.405,1040.88 273.964,1052.95 274.523,1050.33 275.083,1060.87 275.642,1087.68 276.201,1098.97 276.76,1107.73 277.32,1116.55 277.879,1107.96 278.438,1080.97 278.997,1109.06 279.557,1117.97 280.116,1097.02 280.675,1091.42 281.234,1132.18 281.794,1122.01 282.353,1127.81 282.912,1116.76 283.471,1124.33 284.031,1116.15 284.59,1106.29 285.149,1111.83 285.708,1119.2 286.268,1093.75 286.827,1102.3 287.386,1090.19 287.945,1080.48 288.505,1084.68 289.064,1074.59 289.623,1050.49 290.182,1043.49 290.742,1036.8 291.301,1013.45 291.86,1023.51 292.419,1016.16 292.979,1013.37 293.538,1058.54 294.097,1070.03 294.656,1079.36 295.216,1057.85 295.775,1081.93 296.334,1057.5 296.893,1049.55 297.453,1043.17 298.012,1036.16 298.571,1044.97 299.13,1041.57 299.69,1022.33 300.249,1019.25 300.808,1030.83 301.368,1009.21 301.927,1019.95 302.486,1033.23 303.045,1007.05 303.605,1034.95 304.164,1044.54 304.723,1040.31 305.282,1063.59 305.842,1058.79 306.401,1066.51 306.96,1057.36 307.519,1049.6 308.079,1010.16 308.638,989.829 309.197,985.316 309.756,1013.28 310.316,958.683 310.875,936.683 311.434,935.305 311.993,966.403 312.553,961.833 313.112,944.013 313.671,974.029 314.23,971.089 314.79,965.864 315.349,979.484 315.908,976.24 316.467,1003.54 317.027,963.714 317.586,940.851 318.145,939.244 318.704,940.117 319.264,952.339 319.823,946.752 320.382,930.864 320.941,908.86 321.501,906.845 322.06,872.838 322.619,871.542 323.178,871.278 323.738,886.412 324.297,868.947 324.856,865.383 325.415,848.203 325.975,850.443 326.534,853.604 327.093,885.019 327.652,934.136 328.212,895.207 328.771,907.01 329.33,906.121 329.889,904.276 330.449,903.009 331.008,916.596 331.567,878.778 332.126,894.257 332.686,874.461 333.245,870.319 333.804,867.072 334.363,879.452 334.923,926.458 335.482,955.971 336.041,948.494 336.6,913.267 337.16,908.048 337.719,891.217 338.278,885.297 338.837,864.203 339.397,899.34 339.956,881.132 340.515,879.674 341.074,880.361 341.634,926.223 342.193,951.311 342.752,948.967 343.311,942.041 343.871,939.448 344.43,953.019 344.989,960.654 345.548,969.195 346.108,946.151 346.667,923.638 347.226,950.416 347.785,944.771 348.345,938.405 348.904,915.768 349.463,897.048 350.022,942.243 350.582,921.918 351.141,871.146 351.7,902.982 352.259,898.031 352.819,894.308 353.378,889.391 353.937,824.199 354.496,822.132 355.056,821.975 355.615,859.66 356.174,887.499 356.733,884.343 357.293,881.328 357.852,847.305 358.411,862.561 358.97,844.876 359.53,847.807 360.089,831.436 360.648,879.508 361.207,907.65 361.767,933.633 362.326,944.023 362.885,921.143 363.444,918.982 364.004,912.082 364.563,906.33 365.122,898.671 365.681,880.245 366.241,876.807 366.8,910.561 367.359,919.356 367.918,914.97 368.478,908.774 369.037,948.667 369.596,943.034 370.155,937.347 370.715,948.691 371.274,989.431 371.833,1029.44 372.392,1015.28 372.952,1007.57 373.511,1015.25 374.07,1018.67 374.629,1028.28 375.189,1047.76 375.748,1001.66 376.307,987.802 376.866,975.577 377.426,964.705 377.985,921.641 378.544,914.026 379.103,893.991 379.663,853.325 380.222,865.577 380.781,800.565 381.34,816.955 381.9,816.096 382.459,830.732 383.018,811.616 383.577,809.482 384.137,808.386 384.696,773.208 385.255,774.229 385.814,775.603 386.374,762.212 386.933,714.544 387.492,718.782 388.051,754.281 388.611,789.916 389.17,808.081 389.729,806.767 390.288,787.859 390.848,802.049 391.407,801.572 391.966,800.95 392.525,815.873 393.085,797.483 393.644,797.095 394.203,779.004 394.762,781.758 395.322,799.068 395.881,784.543 396.44,767.647 396.999,768.441 397.559,754.417 398.118,788.465 398.677,819.337 399.236,831.988 399.796,827.832 400.355,855.232 400.914,871.73 401.473,804.646 402.033,835.242 402.592,832.365 403.151,830.312 403.71,849.25 404.27,862.763 404.829,874.194 405.388,872.522 405.947,853.455 406.507,895.9 407.066,857.214 407.625,851.563 408.184,831.886 408.744,880.66 409.303,859.115 409.862,904.619 410.421,879.731 410.981,874.984 411.54,851.875 412.099,850.164 412.658,831.884 413.218,876.226 413.777,839.404 414.336,835.529 414.895,830.916 415.455,840.172 416.014,786.953 416.573,833.617 417.132,830.327 417.692,810.209 418.251,823.227 418.81,803.873 419.369,771.064 419.929,770.786 420.488,804.024 421.047,802.651 421.606,798.398 422.166,795.326 422.725,792.615 423.284,805.346 423.843,786.985 424.403,750.647 424.962,768.56 425.521,768.303 426.08,784.941 426.64,779.728 427.199,780.705 427.758,780.813 428.318,764.897 428.877,781.927 429.436,784.38 429.995,784.519 430.555,785.676 431.114,782.885 431.673,800.771 432.232,816.937 432.792,830.746 433.351,810.389 433.91,793.523 434.469,810.461 435.029,774.522 435.588,790.343 436.147,805.712 436.706,806.79 437.266,789.206 437.825,786.173 438.384,770.174 438.943,767.106 439.503,767.804 440.062,766.926 440.621,782.942 441.18,765.722 441.74,768.549 442.299,751.431 442.858,772.824 443.417,819.134 443.977,830.528 444.536,840.997 445.095,832.921 445.654,823.507 446.214,803.96 446.773,785.557 447.332,782.317 447.891,812.086 448.451,790.219 449.01,734.943 449.569,718.11 450.128,737.394 450.688,750.086 451.247,749.589 451.806,781.214 452.365,778.759 452.925,792.765 453.484,738.211 454.043,738.34 454.602,754.348 455.162,752.75 455.721,755.33 456.28,708.064 456.839,711.09 457.399,741.574 457.958,741.638 458.517,707.477 459.076,754.712 459.636,753.619 460.195,770.105 460.754,801.916 461.313,783.192 461.873,781.862 462.432,778.393 462.991,775.436 463.55,758.903 464.11,744.515 464.669,758.2 465.228,773.763 465.787,773.809 466.347,754.464 466.906,770.615 467.465,798.27 468.024,808.179 468.584,822.268 469.143,801.051 469.702,795.881 470.261,775.692 470.821,773.046 471.38,753.087 471.939,768.254 472.498,763.211 473.058,744.454 473.617,774.695 474.176,771.186 474.735,755.607 475.295,758.911 475.854,723.793 476.413,707.538 476.972,708.479 477.532,743.201 478.091,724.704 478.65,726.215 479.209,728.917 479.769,716.246 480.328,717.655 480.887,734.65 481.446,736.473 482.006,753.632 482.565,753.512 483.124,755.278 483.683,755.781 484.243,740.495 484.802,725.897 485.361,691.575 485.92,710.058 486.48,731.552 487.039,713.498 487.598,728.851 488.157,712.28 488.717,712.854 489.276,713.287 489.835,699.509 490.394,700.739 490.954,754.571 491.513,818.009 492.072,831.305 492.631,779.356 493.191,780.708 493.75,731.714 494.309,733.056 494.868,749.029 495.428,780.144 495.987,761.159 496.546,760.043 497.105,741.967 497.665,742.259 498.224,710.368 498.783,727.219 499.342,744.331 499.902,743.348 500.461,746.148 501.02,747.111 501.579,746.522 502.139,730.915 502.698,733.086 503.257,768.275 503.816,777.178 504.376,791.098 504.935,788.898 505.494,752.553 506.053,735.365 506.613,764.622 507.172,778.025 507.731,724.586 508.29,710 508.85,696.293 509.409,680.311 509.968,682.225 510.527,685.986 511.087,688.853 511.646,655.699 512.205,643.259 512.764,645.788 513.324,664.612 513.883,671.305 514.442,692.502 515.001,712.77 515.561,732.859 516.12,731.914 516.679,735.161 517.238,736.078 517.798,719.443 518.357,702.18 518.916,707.853 519.475,725.381 520.035,741.623 520.594,741.085 521.153,741.115 521.712,722.85 522.272,707.384 522.831,724.581 523.39,710.123 523.949,691.75 524.509,712.371 525.068,697.943 525.627,713.468 526.186,714.122 526.746,732.908 527.305,751.072 527.864,714.396 528.423,700.545 528.983,702.134 529.542,702.135 530.101,719.85 530.66,732.567 531.22,746.327 531.779,741.247 532.338,736.628 532.897,748.068 533.457,744.831 534.016,756.354 534.575,784.249 535.134,784.969 535.694,815.71 536.253,808.896 536.812,776.644 537.371,759.569 537.931,757.158 538.49,771.853 539.049,749.481 539.608,715.263 540.168,720.192 540.727,723.652 541.286,704.907 541.845,704.09 542.405,752.953 542.964,766.743 543.523,778.38 544.082,760.221 544.642,744.383 545.201,754.062 545.76,718.438 546.319,736.12 546.879,735.933 547.438,715.052 547.997,744.84 548.556,745.403 549.116,758.477 549.675,787.592 550.234,801.564 550.793,814.342 551.353,824.695 551.912,802.056 552.471,780.634 553.031,779.785 553.59,810.267 554.149,821.095 554.708,815.764 555.268,797.537 555.827,795.317 556.386,807.04 556.945,785.406 557.505,766.398 558.064,777.48 558.623,741.207 559.182,740.181 559.742,718.581 560.301,711.754 560.86,726.583 561.419,760.9 561.979,742.892 562.538,727.21 563.097,694.545 563.656,677.088 564.216,679.15 564.775,663.786 565.334,650.603 565.893,698.231 566.453,717.65 567.012,733.298 567.571,764.902 568.13,761.368 568.69,770.752 569.249,785.364 569.808,782.001 570.367,749.217 570.927,751.675 571.486,765.011 572.045,774.134 572.604,768.507 573.164,730.381 573.723,745.593 574.282,694.506 574.841,711.046 575.401,678.856 575.96,665.934 576.519,669.018 577.078,666.962 577.638,700.791 578.197,699.147 578.756,700.876 579.315,699.203 579.875,732.188 580.434,744.225 580.993,737.016 581.552,737.855 582.112,719.343 582.671,703.026 583.23,668.623 583.789,665.154 584.349,616.182 584.908,569.605 585.467,576.002 586.026,562.942 586.586,570.216 587.145,559.191 587.704,566.401 588.263,559.878 588.823,584.743 589.382,639.854 589.941,707.989 590.5,724.466 591.06,708.269 591.619,706.62 592.178,690.066 592.737,755.229 593.297,752.423 593.856,751.779 594.415,765.609 594.974,781.313 595.534,794.808 596.093,776.642 596.652,746.102 597.211,709.812 597.771,695.163 598.33,681.897 598.889,698.843 599.448,716.426 600.008,779.716 600.567,776.239 601.126,774.443 601.685,719.105 602.245,684.145 602.804,650.23 603.363,652.795 603.922,673.241 604.482,693.996 605.041,742.796 605.6,726.665 606.159,725.193 606.719,741.279 607.278,761.854 607.837,728.07 608.396,725.326 608.956,674.516 609.515,680.227 610.074,696.549 610.633,707.542 611.193,705.978 611.752,737.95 612.311,750.853 612.87,750.622 613.43,762.882 613.989,757.583 614.548,753.378 615.107,701.823 615.667,687.291 616.226,675.356 616.785,660.669 617.344,679.057 617.904,665.81 618.463,656.227 619.022,675.793 619.581,693.363 620.141,696.058 620.7,712.49 621.259,726.07 621.818,726.469 622.378,740.929 622.937,718.129 623.496,715.895 624.055,748.203 624.615,761.198 625.174,759.306 625.733,739.502 626.292,753.888 626.852,751.727 627.411,764.367 627.97,747.25 628.529,745.011 629.089,742.237 629.648,766.421 630.207,761.817 630.766,724.399 631.326,672.646 631.885,694.81 632.444,727.321 633.003,713.803 633.563,761.309 634.122,757.159 634.681,769.962 635.24,746.739 635.8,757.744 636.359,771.816 636.918,802.545 637.477,815.142 638.037,828.479 638.596,825.742 639.155,805.598 639.714,779.247 640.274,746.973 640.833,745.426 641.392,707.998 641.951,740.638 642.511,756.033 643.07,719.716 643.629,732.614 644.188,746.99 644.748,711.729 645.307,711.799 645.866,710.762 646.425,724.595 646.985,738.956 647.544,753.686 648.103,722.112 648.662,737.291 649.222,734.699 649.781,711.704 650.34,772.456 650.899,768.87 651.459,799.2 652.018,794.41 652.577,724.242 653.136,705.796 653.696,701.771 654.255,703.891 654.814,702.992 655.373,716.832 655.933,700.619 656.492,749.843 657.051,746.991 657.61,712.573 658.17,743.859 658.729,757.764 659.288,783.737 659.847,813.281 660.407,794.718 660.966,824.998 661.525,802.463 662.084,798.554 662.644,778.757 663.203,804.875 663.762,798.899 664.321,792.018 664.881,772.308 665.44,736.166 665.999,734.486 666.558,732.244 667.118,696.446 667.677,663.868 668.236,683.584 668.795,685.809 669.355,702.669 669.914,669.857 670.473,653.815 671.032,690.324 671.592,692.687 672.151,692.913 672.71,656.075 673.269,644.472 673.829,581.907 674.388,590.106 674.947,576.268 675.506,583.522 676.066,570.867 676.625,590.612 677.184,615.246 677.743,655.412 678.303,674.187 678.862,694.136 679.421,694.183 679.981,695.492 680.54,690.322 681.099,674.884 681.658,690.57 682.218,707.001 682.777,735.021 683.336,705.33 683.895,720.002 684.455,704.107 685.014,676.399 685.573,679.001 686.132,696.034 686.692,663.452 687.251,681.839 687.81,667.453 688.369,653.217 688.929,653.669 689.488,671.074 690.047,643.712 690.606,664.278 691.166,682.405 691.725,700.287 692.284,700.6 692.843,685.004 693.403,684.157 693.962,652.773 694.521,637.077 695.08,638.293 695.64,594.65 696.199,601.555 696.758,608.284 697.317,648.519 697.877,666.243 698.436,702.614 698.995,752.943 699.554,764.889 700.114,759.237 700.673,739.191 701.232,735.342 701.791,700.138 702.351,696.563 702.91,698.908 703.469,731.932 704.028,713.373 704.588,725.412 705.147,724.176 705.706,739.874 706.265,749.448 706.825,777.747 707.384,760.709 707.943,775.624 708.502,772.129 709.062,766.674 709.621,749.088 710.18,712.569 710.739,711.851 711.299,677.932 711.858,662.243 712.417,678.824 712.976,657.173 713.536,675.611 714.095,664.051 714.654,666.768 715.213,683.734 715.773,682.546 716.332,682.876 716.891,680.513 717.45,696.885 718.01,711.397 718.569,709.608 719.128,697.042 719.687,694.656 720.247,694.47 720.806,676.854 721.365,661.308 721.924,678.144 722.484,643.759 723.043,677.305 723.602,712.97 724.161,712.148 724.721,711.598 725.28,743.771 725.839,742.009 726.398,757.427 726.958,786.207 727.517,783.73 728.076,796.096 728.635,791.6 729.195,799.128 729.754,810.27 730.313,808.8 730.872,801.127 731.432,793.18 731.991,787.134 732.55,777.814 733.109,807.811 733.669,786.002 734.228,717.294 734.787,714.519 735.346,714.934 735.906,729.415 736.465,682.151 737.024,698.047 737.583,681.375 738.143,683.079 738.702,655.603 739.261,642.292 739.82,677.627 740.38,663.113 740.939,679.004 741.498,693.861 742.057,730.806 742.617,731.475 743.176,761.27 743.735,789.078 744.294,738.369 744.854,767.299 745.413,761.341 745.972,738.003 746.531,734.505 747.091,730.67 747.65,710.872 748.209,726.772 748.768,726.322 749.328,693.38 749.887,693.127 750.446,659.25 751.005,647.318 751.565,650.053 752.124,638.636 752.683,640.567 753.242,644.64 753.802,647.241 754.361,668.767 754.92,653.261 755.479,606.132 756.039,597.446 756.598,618.914 757.157,638.079 757.716,657.067 758.276,642.218 758.835,641.156 759.394,660.469 759.953,644.603 760.513,693.029 761.072,676.521 761.631,676.056 762.19,711.751 762.75,711.132 763.309,711.359 763.868,710.954 764.427,711.472 764.987,674.053 765.546,672.859 766.105,656.977 766.664,641.036 767.224,647.246 767.783,646.263 768.342,649.561 768.901,635.257 769.461,637.724 770.02,643.218 770.579,643.538 771.138,645.682 771.698,663.372 772.257,647.948 772.816,616.433 773.375,637.094 773.935,622.348 774.494,627.52 775.053,648.685 775.612,618.213 776.172,606.024 776.731,611.178 777.29,631.401 777.849,616.636 778.409,601.514 778.968,589.622 779.527,599.005 780.086,605.871 780.646,591.147 781.205,598.264 781.764,618.336 782.323,607.504 782.883,645.085 783.442,631.769 784.001,622.047 784.56,624.228 785.12,643.53 785.679,611.585 786.238,600.3 786.797,637.265 787.357,640.844 787.916,660.819 788.475,661.484 789.034,663.82 789.594,635.039 790.153,636.567 790.712,654.892 791.271,642.79 791.831,634.308 792.39,654.712 792.949,639.097 793.508,655.514 794.068,691.366 794.627,704.8 795.186,699.943 795.745,668.344 796.305,665.795 796.864,669.634 797.423,668.138 797.982,654.469 798.542,640.257 799.101,643.197 799.66,627.963 800.219,651.221 800.779,634.222 801.338,622.624 801.897,642.357 802.456,628.355 803.016,666.209 803.575,713.594 804.134,729.617 804.693,743.086 805.253,725.645 805.812,725.143 806.371,740.32 806.931,739.179 807.49,704.259 808.049,702.594 808.608,720.813 809.168,748.682 809.727,758.551 810.286,742.06 810.845,738.372 811.405,722.495 811.964,709.159 812.523,708.184 813.082,702.791 813.642,733.791 814.201,714.59 814.76,696.414 815.319,728.807 815.879,726.4 816.438,741.087 816.997,750.436 817.556,762.96 818.116,758.745 818.675,768.28 819.234,779.899 819.793,769.847 820.353,719.498 820.912,701.391 821.471,673.751 822.03,693.157 822.59,681.131 823.149,684.392 823.708,671.389 824.267,688.394 824.827,689.807 825.386,690.105 825.945,691.06 826.504,677.85 827.064,681.672 827.623,683.003 828.182,648.461 828.741,664.425 829.301,664.302 829.86,635.386 830.419,641.466 830.978,645.514 831.538,682.664 832.097,717.717 832.656,733.175 833.215,698.654 833.775,697.839 834.334,715.083 834.893,748.839 835.452,732.094 836.012,775.136 836.571,752.109 837.13,754.214 837.689,770.874 838.249,766.746 838.808,778.23 839.367,771.919 839.926,767.681 840.486,764.455 841.045,761.49 841.604,754.437 842.163,784.665 842.723,794.206 843.282,792.06 843.841,766.717 844.4,748.998 844.96,743.851 845.519,758.694 846.078,770.619 846.637,752.18 847.197,731.719 847.756,712.545 848.315,676.3 848.874,676.927 849.434,662.213 849.993,649.129 850.552,637.314 851.111,609.704 851.671,598.853 852.23,590.455 852.789,596.053 853.348,613.506 853.908,602.437 854.467,620.483 855.026,610.353 855.585,597.552 856.145,649.628 856.704,669.246 857.263,669.865 857.822,672.781 858.382,694.498 858.941,662.088 859.5,664.376 860.059,649.062 860.619,617.052 861.178,635.796 861.737,669.262 862.296,689.169 862.856,659.309 863.415,658.254 863.974,646.506 864.533,648.298 865.093,632.862 865.652,618.306 866.211,622.24 866.77,639.179 867.33,641.346 867.889,627.581 868.448,663.939 869.007,664.551 869.567,649.993 870.126,653.061 870.685,655.601 871.244,654.795 871.804,669.992 872.363,669.647 872.922,706.048 873.481,705.392 874.041,685.282 874.6,716.303 875.159,731.479 875.718,775.649 876.278,785.556 876.837,718.651 877.396,697.923 877.955,726.952 878.515,726.029 879.074,725.156 879.633,689.032 880.192,689.374 880.752,691.302 881.311,704.246 881.87,687.951 882.429,704.514 882.989,688.62 883.548,672.882 884.107,669.411 884.666,668.535 885.226,656.516 885.785,655.792 886.344,671.819 886.903,688.502 887.463,703.035 888.022,689.024 888.581,670.875 889.14,673.496 889.7,676.81 890.259,674.961 890.818,658.484 891.377,645.271 891.937,681.173 892.496,682.009 893.055,683.398 893.614,686.548 894.174,689.815 894.733,704.338 895.292,721.341 895.851,702.846 896.411,685.03 896.97,700.331 897.529,735.629 898.088,787.214 898.648,798.702 899.207,840.865 899.766,829.102 900.325,837.797 900.885,813.677 901.444,840.077 902.003,864.184 902.562,853.737 903.122,811.024 903.681,810.018 904.24,798.181 904.799,828.404 905.359,803.457 905.918,781.445 906.477,790.08 907.036,752.714 907.596,762.999 908.155,742.712 908.714,705.445 909.273,693.055 909.833,724.282 910.392,738.031 910.951,748.088 911.51,744.484 912.07,754.495 912.629,766.951 913.188,729.524 913.747,693.405 914.307,691.017 914.866,707.409 915.425,720.897 915.984,733.789 916.544,730.268 917.103,742.434 917.662,755.89 918.221,753.362 918.781,735.509 919.34,716.153 919.899,745.871 920.458,755.258 921.018,720.541 921.577,686.058 922.136,716.073 922.695,715.627 923.255,716.593 923.814,713.167 924.373,711.583 924.932,696.34 925.492,696.497 926.051,663.274 926.61,646.388 927.169,632.774 927.729,666.267 928.288,701.807 928.847,668.835 929.406,672.318 929.966,704.74 930.525,703.596 931.084,715.646 931.644,749.761 932.203,744.586 932.762,739.716 933.321,781.9 933.881,742.704 934.44,740.172 934.999,770.243 935.558,800.569 936.118,776.16 936.677,771.013 937.236,731.34 937.795,678.05 938.355,695.541 938.914,678.248 939.473,676.916 940.032,674.891 940.592,692.832 941.151,710.112 941.71,674.034 942.269,640.207 942.829,674.937 943.388,660.812 943.947,663.58 944.506,647.751 945.066,666.245 945.625,651.436 946.184,654.726 946.743,649.432 947.303,650.674 947.862,665.635 948.421,648.55 948.98,665.642 949.54,650.326 950.099,667.827 950.658,668.425 951.217,685.696 951.777,704.433 952.336,670.964 952.895,638.005 953.454,655.741 954.014,674.039 954.573,676.027 955.132,661.679 955.691,662.229 956.251,692.316 956.81,673.526 957.369,673.07 957.928,641.983 958.488,596.256 959.047,586.066 959.606,574.787 960.165,618.445 960.725,623.258 961.284,614.056 961.843,604.028 962.402,609.77 962.962,598.937 963.521,585.598 964.08,591.656 964.639,565.473 965.199,570.561 965.758,561.323 966.317,594.348 966.876,534.341 967.436,559.103 967.995,599.044 968.554,591.444 969.113,616.371 969.673,604.269 970.232,577.801 970.791,585.258 971.35,608.404 971.91,601.642 972.469,589.093 973.028,598.365 973.587,636.741 974.147,638.009 974.706,655.052 975.265,656.973 975.824,624.681 976.384,607.946 976.943,596.181 977.502,600.463 978.061,605.094 978.621,624.838 979.18,662.526 979.739,696.861 980.298,694.747 980.858,662.136 981.417,681.191 981.976,682.702 982.535,666.468 983.095,671.309 983.654,707.679 984.213,690.949 984.772,703.984 985.332,719.193 985.891,735.442 986.45,716.96 987.009,713.4 987.569,727.763 988.128,728.326 988.687,740.279 989.246,753.682 989.806,781.642 990.365,773.99 990.924,766.735 991.483,781.286 992.043,805.981 992.602,812.899 993.161,806.554 993.72,769.229 994.28,763.442 994.839,748.504 995.398,743.222 995.957,724.602 996.517,689.107 997.076,704.584 997.635,670.573 998.194,671.436 998.754,687.36 999.313,689.507 999.872,687.882 1000.43,686.884 1000.99,702.952 1001.55,638.107 1002.11,626.961 1002.67,630.572 1003.23,602.284 1003.79,623.65 1004.35,644.718 1004.91,648.63 1005.46,695.7 1006.02,695.18 1006.58,696.656 1007.14,711.924 1007.7,711.599 1008.26,711.363 1008.82,724.504 1009.38,725.297 1009.94,753.961 1010.5,771.687 1011.06,750.257 1011.62,715.897 1012.18,697.83 1012.73,714.232 1013.29,730.365 1013.85,744.124 1014.41,742.965 1014.97,757.853 1015.53,754.297 1016.09,750.915 1016.65,732.703 1017.21,727.129 1017.77,721.122 1018.33,717.286 1018.89,750.043 1019.45,760.81 1020.01,754.918 1020.56,765.197 1021.12,764.28 1021.68,760.907 1022.24,740.384 1022.8,737.22 1023.36,731.606 1023.92,729.449 1024.48,758.429 1025.04,756.827 1025.6,750.664 1026.16,731.191 1026.72,761.475 1027.28,722.773 1027.83,721.263 1028.39,688.659 1028.95,673.85 1029.51,695.069 1030.07,678.52 1030.63,696.671 1031.19,692.832 1031.75,676.816 1032.31,656.571 1032.87,641.926 1033.43,608.543 1033.99,643.638 1034.55,631.189 1035.1,632.373 1035.66,650.19 1036.22,619.471 1036.78,591.998 1037.34,591.518 1037.9,559.999 1038.46,601.785 1039.02,621.724 1039.58,562.448 1040.14,555.102 1040.7,578.07 1041.26,587.318 1041.82,577.846 1042.38,552.96 1042.93,560.692 1043.49,562.618 1044.05,584.116 1044.61,603.734 1045.17,590.751 1045.73,632.373 1046.29,636.625 1046.85,657.339 1047.41,674.184 1047.97,675.35 1048.53,693.591 1049.09,691.413 1049.65,687.902 1050.2,686.839 1050.76,702.522 1051.32,669.213 1051.88,687.117 1052.44,668.72 1053,652.088 1053.56,633.477 1054.12,669.452 1054.68,700.856 1055.24,685.355 1055.8,699.432 1056.36,716.852 1056.92,717.81 1057.48,732.304 1058.03,762.394 1058.59,738.595 1059.15,719.766 1059.71,734.456 1060.27,730.624 1060.83,694.999 1061.39,694.695 1061.95,691.657 1062.51,723.551 1063.07,754.842 1063.63,746.433 1064.19,731.422 1064.75,698.489 1065.3,663.626 1065.86,669.508 1066.42,618.461 1066.98,623.706 1067.54,627.955 1068.1,625.56 1068.66,645.524 1069.22,662.131 1069.78,665.417 1070.34,663.972 1070.9,663.286 1071.46,662.743 1072.02,646.958 1072.57,646.689 1073.13,697.764 1073.69,666.531 1074.25,665.19 1074.81,631.131 1075.37,633.662 1075.93,629.868 1076.49,634.795 1077.05,641.516 1077.61,646.488 1078.17,629.254 1078.73,615.743 1079.29,635.311 1079.85,668.94 1080.4,670.056 1080.96,671.45 1081.52,674.066 1082.08,710.258 1082.64,741.979 1083.2,722.34 1083.76,718.289 1084.32,684.007 1084.88,664.363 1085.44,678.686 1086,679.43 1086.56,662.342 1087.12,682.173 1087.67,682.401 1088.23,704.515 1088.79,719.906 1089.35,703.433 1089.91,706.247 1090.47,705.148 1091.03,705.917 1091.59,706.806 1092.15,733.243 1092.71,730.701 1093.27,727.057 1093.83,722.468 1094.39,751.64 1094.94,735.27 1095.5,750.67 1096.06,749.917 1096.62,730.177 1097.18,711.373 1097.74,711.849 1098.3,742.322 1098.86,741.305 1099.42,739.114 1099.98,687.745 1100.54,704.476 1101.1,705.381 1101.66,700.575 1102.22,683.146 1102.77,684.703 1103.33,699.613 1103.89,696.8 1104.45,694.53 1105.01,676.751 1105.57,657.656 1106.13,678.379 1106.69,659.857 1107.25,599.803 1107.81,617.96 1108.37,621.726 1108.93,623.765 1109.49,623.781 1110.04,628.456 1110.6,646.407 1111.16,648.928 1111.72,698.262 1112.28,667.769 1112.84,698.376 1113.4,715.146 1113.96,728.166 1114.52,707.375 1115.08,703.855 1115.64,685.309 1116.2,688.89 1116.76,703.983 1117.31,703.4 1117.87,703.816 1118.43,673.812 1118.99,677.614 1119.55,695.245 1120.11,711.897 1120.67,707.74 1121.23,739.015 1121.79,718.093 1122.35,716.003 1122.91,713.89 1123.47,696.827 1124.03,697.572 1124.59,697.898 1125.14,699.116 1125.7,714.932 1126.26,744.39 1126.82,741.752 1127.38,741.2 1127.94,770.752 1128.5,765.135 1129.06,763.133 1129.62,743.006 1130.18,755.738 1130.74,737.316 1131.3,733.526 1131.86,744.829 1132.41,706.774 1132.97,706.446 1133.53,671.718 1134.09,688.057 1134.65,702.25 1135.21,686.06 1135.77,686.721 1136.33,668.729 1136.89,667.901 1137.45,667.552 1138.01,665.808 1138.57,701.733 1139.13,702.888 1139.68,701.804 1140.24,701.936 1140.8,733.153 1141.36,712.66 1141.92,709.722 1142.48,707.405 1143.04,708.213 1143.6,673.52 1144.16,676.161 1144.72,693.209 1145.28,693.92 1145.84,675.51 1146.4,642.813 1146.96,661.926 1147.51,660.519 1148.07,692.093 1148.63,674.987 1149.19,691.692 1149.75,677.419 1150.31,678.209 1150.87,649.857 1151.43,655.717 1151.99,689.397 1152.55,692.427 1153.11,689.64 1153.67,688.454 1154.23,704.356 1154.78,685.07 1155.34,683.192 1155.9,696.758 1156.46,679.414 1157.02,709.729 1157.58,693.947 1158.14,756.227 1158.7,733.427 1159.26,733.777 1159.82,761.837 1160.38,760.724 1160.94,757.44 1161.5,738.457 1162.05,753.086 1162.61,749.485 1163.17,743.15 1163.73,739.788 1164.29,735.565 1164.85,735.12 1165.41,730.796 1165.97,730.303 1166.53,710.132 1167.09,692.762 1167.65,645.74 1168.21,618.008 1168.77,604.71 1169.33,611.031 1169.88,634.734 1170.44,652.563 1171,652.786 1171.56,688.265 1172.12,655.205 1172.68,657.875 1173.24,626.845 1173.8,645.859 1174.36,618.643 1174.92,590.457 1175.48,576.964 1176.04,550.823 1176.6,556.623 1177.15,599.077 1177.71,602.264 1178.27,559.831 1178.83,554.965 1179.39,532.409 1179.95,525.556 1180.51,521.914 1181.07,562.536 1181.63,554.947 1182.19,545.562 1182.75,555.023 1183.31,580.434 1183.87,585.907 1184.43,605.301 1184.98,623.809 1185.54,613.292 1186.1,631.795 1186.66,634.933 1187.22,672.29 1187.78,669.246 1188.34,673.631 1188.9,658.598 1189.46,690.997 1190.02,673.824 1190.58,708.818 1191.14,723.354 1191.7,736.256 1192.25,714.559 1192.81,662.369 1193.37,665.479 1193.93,634.535 1194.49,684.293 1195.05,684.024 1195.61,668.66 1196.17,683.853 1196.73,638.881 1197.29,642.331 1197.85,681.678 1198.41,684.22 1198.97,697.982 1199.52,685.06 1200.08,685.46 1200.64,701.505 1201.2,717.916 1201.76,730.824 1202.32,700.324 1202.88,731.658 1203.44,728.444 1204,692.733 1204.56,679.784 1205.12,647.609 1205.68,698.995 1206.24,712.335 1206.8,709.422 1207.35,691.889 1207.91,693.827 1208.47,659.504 1209.03,642.25 1209.59,629.418 1210.15,618.464 1210.71,637.698 1211.27,627.664 1211.83,630.544 1212.39,637.695 1212.95,639.039 1213.51,641.525 1214.07,643.252 1214.62,631.679 1215.18,612.906 1215.74,614.511 1216.3,685.063 1216.86,668.375 1217.42,717.624 1217.98,716.828 1218.54,716.08 1219.1,731.573 1219.66,759.982 1220.22,720.321 1220.78,703.338 1221.34,753.728 1221.89,749.413 1222.45,744.91 1223.01,725.298 1223.57,721.174 1224.13,705.221 1224.69,722.861 1225.25,757.415 1225.81,758.906 1226.37,753.419 1226.93,781.847 1227.49,794.967 1228.05,763.647 1228.61,760.348 1229.17,755.25 1229.72,752.075 1230.28,750.319 1230.84,747.839 1231.4,774.782 1231.96,755.034 1232.52,763.966 1233.08,775.506 1233.64,753.15 1234.2,749.341 1234.76,729.571 1235.32,744.467 1235.88,758.159 1236.44,724.632 1236.99,720.94 1237.55,689.971 1238.11,737.213 1238.67,689.632 1239.23,672.995 1239.79,675.654 1240.35,689.942 1240.91,689.539 1241.47,659.117 1242.03,664.692 1242.59,667.145 1243.15,663.58 1243.71,696.675 1244.26,714.156 1244.82,697.009 1245.38,714.662 1245.94,745.631 1246.5,753.225 1247.06,731.363 1247.62,729.443 1248.18,725.629 1248.74,706.952 1249.3,669.42 1249.86,701.13 1250.42,654.137 1250.98,704.928 1251.54,705.015 1252.09,736.848 1252.65,733.307 1253.21,728.022 1253.77,710.921 1254.33,710.063 1254.89,709.1 1255.45,677.416 1256.01,659.868 1256.57,659.621 1257.13,672.686 1257.69,641.087 1258.25,627.801 1258.81,614.06 1259.36,616.109 1259.92,619.564 1260.48,656.044 1261.04,672.33 1261.6,704.875 1262.16,706.245 1262.72,687.908 1263.28,689.164 1263.84,687.089 1264.4,655.125 1264.96,670.981 1265.52,637.457 1266.08,640.845 1266.63,627.731 1267.19,645.626 1267.75,716.027 1268.31,711.523 1268.87,692.674 1269.43,677.602 1269.99,679.136 1270.55,661.294 1271.11,628.132 1271.67,632.315 1272.23,716.171 1272.79,713.483 1273.35,671.101 1273.91,692.162 1274.46,705.297 1275.02,701.716 1275.58,704.074 1276.14,704.279 1276.7,653.257 1277.26,637.922 1277.82,640.675 1278.38,642.698 1278.94,645.469 1279.5,651.264 1280.06,688.952 1280.62,687.851 1281.18,688.788 1281.73,724.132 1282.29,690.663 1282.85,692.749 1283.41,705.958 1283.97,671.724 1284.53,654.438 1285.09,689.496 1285.65,659 1286.21,663.033 1286.77,666.707 1287.33,683.063 1287.89,714.688 1288.45,628.671 1289,630.449 1289.56,633.444 1290.12,670.104 1290.68,700.387 1291.24,714.057 1291.8,695.187 1292.36,676.86 1292.92,676.425 1293.48,662.164 1294.04,696.728 1294.6,710.657 1295.16,690.818 1295.72,675.205 1296.28,676.182 1296.83,677.568 1297.39,646.186 1297.95,660.876 1298.51,628.299 1299.07,616.497 1299.63,623.43 1300.19,642.763 1300.75,662.83 1301.31,647.84 1301.87,649.592 1302.43,668.452 1302.99,668.515 1303.55,681.791 1304.1,693.309 1304.66,710.549 1305.22,710.783 1305.78,731.484 1306.34,707.367 1306.9,690.819 1307.46,691.228 1308.02,674.345 1308.58,660.119 1309.14,693.997 1309.7,693.164 1310.26,675.395 1310.82,672.778 1311.38,687.673 1311.93,671.425 1312.49,678.044 1313.05,663.546 1313.61,680.922 1314.17,664.931 1314.73,684.134 1315.29,701.094 1315.85,685.261 1316.41,719.397 1316.97,670.694 1317.53,671.179 1318.09,705.787 1318.65,722.761 1319.2,704.592 1319.76,688.536 1320.32,688.704 1320.88,689.428 1321.44,722.271 1322,751.439 1322.56,731.904 1323.12,715.017 1323.68,759.014 1324.24,753.763 1324.8,717.226 1325.36,748.027 1325.92,728.207 1326.47,727.53 1327.03,709.399 1327.59,707.749 1328.15,674.05 1328.71,688.902 1329.27,719.356 1329.83,717.691 1330.39,699.17 1330.95,682.629 1331.51,683.495 1332.07,684.554 1332.63,682.34 1333.19,698.651 1333.75,682.953 1334.3,763.516 1334.86,757.441 1335.42,702.616 1335.98,731.104 1336.54,766.425 1337.1,728.788 1337.66,763.223 1338.22,754.423 1338.78,767.179 1339.34,796.124 1339.9,773.336 1340.46,798.332 1341.02,765.502 1341.57,728.559 1342.13,711.292 1342.69,696.209 1343.25,712.888 1343.81,679.255 1344.37,662.681 1344.93,615.179 1345.49,618.277 1346.05,602.322 1346.61,606.869 1347.17,645.036 1347.73,644.096 1348.29,661.601 1348.84,660.235 1349.4,676.723 1349.96,677.714 1350.52,677.631 1351.08,694.529 1351.64,710.047 1352.2,709.227 1352.76,693.092 1353.32,707.292 1353.88,704.289 1354.44,689.046 1355,705.722 1355.56,738.014 1356.12,719.437 1356.67,653.109 1357.23,640.329 1357.79,612.947 1358.35,647.973 1358.91,634.562 1359.47,651.928 1360.03,665.25 1360.59,698.805 1361.15,666.887 1361.71,669.474 1362.27,687.574 1362.83,703.376 1363.39,701.954 1363.94,670.753 1364.5,669.53 1365.06,653.407 1365.62,636.572 1366.18,685.376 1366.74,686.388 1367.3,707.117 1367.86,690.731 1368.42,644.273 1368.98,678.435 1369.54,677.787 1370.1,693.686 1370.66,708.041 1371.21,687.845 1371.77,716.786 1372.33,680.631 1372.89,632.696 1373.45,636.277 1374.01,624.671 1374.57,641.86 1375.13,646.452 1375.69,645.244 1376.25,629.336 1376.81,632.959 1377.37,631.655 1377.93,636.752 1378.49,641.743 1379.04,613.651 1379.6,615.44 1380.16,586.783 1380.72,606 1381.28,610.581 1381.84,627.05 1382.4,632.469 1382.96,633.885 1383.52,668.538 1384.08,700.562 1384.64,717.545 1385.2,731.278 1385.76,726.984 1386.31,708.906 1386.87,743.247 1387.43,741.937 1387.99,721.507 1388.55,704.844 1389.11,737.497 1389.67,702.696 1390.23,731.764 1390.79,694.891 1391.35,723.896 1391.91,720.899 1392.47,720.765 1393.03,701.724 1393.58,697.724 1394.14,679.86 1394.7,680.215 1395.26,666.931 1395.82,637.464 1396.38,641.98 1396.94,628.277 1397.5,647.921 1398.06,670.062 1398.62,688.688 1399.18,718.869 1399.74,716.16 1400.3,681.44 1400.86,681.048 1401.41,667.149 1401.97,649.234 1402.53,650.832 1403.09,686.383 1403.65,703.069 1404.21,669.374 1404.77,651.188 1405.33,685.934 1405.89,683.62 1406.45,667.145 1407.01,681.53 1407.57,682.805 1408.13,683.698 1408.68,664.451 1409.24,661.764 1409.8,661.2 1410.36,629.509 1410.92,646.293 1411.48,667.094 1412.04,666.592 1412.6,653.408 1413.16,640.904 1413.72,660.092 1414.28,642.828 1414.84,645.745 1415.4,646.91 1415.95,615.89 1416.51,638.648 1417.07,660.512 1417.63,678.593 1418.19,677.349 1418.75,644.559 1419.31,660.333 1419.87,630.971 1420.43,648.716 1420.99,638.184 1421.55,627.534 1422.11,646.376 1422.67,652.585 1423.23,638.253 1423.78,624.333 1424.34,626.007 1424.9,645.646 1425.46,614.038 1426.02,602.577 1426.58,607.481 1427.14,627.078 1427.7,632.199 1428.26,683.319 1428.82,701.133 1429.38,699.618 1429.94,698.592 1430.5,681.263 1431.05,664.385 1431.61,665.033 1432.17,664.5 1432.73,666.783 1433.29,668.013 1433.85,665.052 1434.41,652.155 1434.97,654.367 1435.53,640.121 1436.09,676.035 1436.65,691.846 1437.21,676.129 1437.77,643.643 1438.33,630.033 1438.88,615.71 1439.44,620.029 1440,624.638 1440.56,592.874 1441.12,580.225 1441.68,567.417 1442.24,560.904 1442.8,579.052 1443.36,583.102 1443.92,591.936 1444.48,614.788 1445.04,586.058 1445.6,595.944 1446.15,616.705 1446.71,653.202 1447.27,654.459 1447.83,637.826 1448.39,638.929 1448.95,653.304 1449.51,687.958 1450.07,675.801 1450.63,692.76 1451.19,706.465 1451.75,709.109 1452.31,743.138 1452.87,772.733 1453.42,765.258 1453.98,743.11 1454.54,756.104 1455.1,752.385 1455.66,781.246 1456.22,774.874 1456.78,769.414 1457.34,752.04 1457.9,749.65 1458.46,730.177 1459.02,743.349 1459.58,722.391 1460.14,702.986 1460.7,733.728 1461.25,766.583 1461.81,745.518 1462.37,725.385 1462.93,737.641 1463.49,734.526 1464.05,745.92 1464.61,742.489 1465.17,740.021 1465.73,767.338 1466.29,763.005 1466.85,740.419 1467.41,768.021 1467.97,779.654 1468.52,725.405 1469.08,690.328 1469.64,705.133 1470.2,733.23 1470.76,727.49 1471.32,690.975 1471.88,709.674 1472.44,690.75 1473,691.329 1473.56,691.807 1474.12,709.704 1474.68,693.832 1475.24,694.673 1475.79,681.215 1476.35,670.077 1476.91,674.478 1477.47,691.455 1478.03,723.688 1478.59,722.982 1479.15,718.525 1479.71,702.37 1480.27,700.194 1480.83,712.538 1481.39,737.09 1481.95,687.205 1482.51,687.553 1483.07,654.787 1483.62,637.889 1484.18,672.284 1484.74,701.617 1485.3,713.994 1485.86,727.878 1486.42,707.224 1486.98,739.103 1487.54,730.931 1488.1,746.687 1488.66,725.693 1489.22,712.636 1489.78,725.556 1490.34,773.251 1490.89,781.706 1491.45,761.382 1492.01,772.426 1492.57,797.173 1493.13,774.464 1493.69,768.714 1494.25,728.855 1494.81,730.556 1495.37,728.321 1495.93,708.611 1496.49,709.829 1497.05,674.991 1497.61,677.932 1498.16,664.366 1498.72,664.916 1499.28,682.214 1499.84,716.95 1500.4,714.839 1500.96,748.026 1501.52,741.68 1502.08,736.37 1502.64,686.602 1503.2,641.055 1503.76,674.52 1504.32,691.852 1504.88,711.781 1505.44,709.942 1505.99,724.015 1506.55,703.347 1507.11,733.962 1507.67,731.281 1508.23,747.239 1508.79,741.869 1509.35,756.124 1509.91,737.696 1510.47,752.511 1511.03,749.157 1511.59,759.569 1512.15,736.17 1512.71,733.608 1513.26,698.129 1513.82,667.754 1514.38,669.722 1514.94,652.501 1515.5,705.436 1516.06,671.239 1516.62,653.431 1517.18,637.151 1517.74,636.691 1518.3,654.831 1518.86,657.479 1519.42,658.587 1519.98,710.659 1520.53,694.031 1521.09,713.815 1521.65,726.015 1522.21,693.509 1522.77,692.421 1523.33,708.942 1523.89,739.672 1524.45,736.607 1525.01,698.489 1525.57,648.038 1526.13,665.848 1526.69,681.707 1527.25,667.755 1527.81,704.937 1528.36,688.025 1528.92,686.557 1529.48,683.324 1530.04,698.969 1530.6,730.488 1531.16,743.892 1531.72,724.002 1532.28,736.119 1532.84,730.169 1533.4,741.001 1533.96,707.863 1534.52,722.624 1535.08,766.791 1535.63,729.949 1536.19,748.369 1536.75,745.455 1537.31,761.159 1537.87,741.549 1538.43,740.432 1538.99,753.942 1539.55,752.476 1540.11,764.639 1540.67,775.995 1541.23,787.722 1541.79,763.889 1542.35,762.093 1542.9,737.799 1543.46,731.952 1544.02,696.777 1544.58,680.383 1545.14,710.814 1545.7,695.892 1546.26,692.749 1546.82,677.308 1547.38,681.114 1547.94,732.788 1548.5,747.467 1549.06,745.654 1549.62,728.499 1550.18,711.48 1550.73,678.401 1551.29,657.317 1551.85,674.928 1552.41,645.744 1552.97,631.493 1553.53,648.179 1554.09,662.124 1554.65,679.677 1555.21,679.12 1555.77,693.434 1556.33,704.458 1556.89,688.304 1557.45,719.276 1558,729.648 1558.56,695.009 1559.12,724.653 1559.68,705.379 1560.24,705.125 1560.8,703.6 1561.36,684.651 1561.92,668.811 1562.48,654.037 1563.04,653.665 1563.6,685.057 1564.16,680.861 1564.72,698.203 1565.28,745.633 1565.83,729.531 1566.39,725.918 1566.95,722.453 1567.51,699.691 1568.07,665.277 1568.63,664.701 1569.19,684.024 1569.75,683.554 1570.31,698.84 1570.87,634.32 1571.43,616.754 1571.99,655.707 1572.55,659.417 1573.1,642.083 1573.66,662.205 1574.22,662.676 1574.78,682.414 1575.34,682.812 1575.9,712.853 1576.46,730.566 1577.02,763.044 1577.58,740.464 1578.14,689.876 1578.7,670.667 1579.26,670.774 1579.82,705.294 1580.37,687.814 1580.93,688.467 1581.49,675.021 1582.05,641.173 1582.61,671.288 1583.17,654.637 1583.73,653.296 1584.29,652.58 1584.85,656.293 1585.41,624.502 1585.97,627.691 1586.53,601.749 1587.09,592.804 1587.65,615.566 1588.2,670.975 1588.76,656.373 1589.32,677.695 1589.88,676.573 1590.44,678.303 1591,660.621 1591.56,661.349 1592.12,660.328 1592.68,642.088 1593.24,613.333 1593.8,599.723 1594.36,585.696 1594.92,576.4 1595.47,599.731 1596.03,604.611 1596.59,593.961 1597.15,599.404 1597.71,586.044 1598.27,556.585 1598.83,579.849 1599.39,586.524 1599.95,607.779 1600.51,612.817 1601.07,632.233 1601.63,618.887 1602.19,623.905 1602.74,662.536 1603.3,681.257 1603.86,694.22 1604.42,645.324 1604.98,679.753 1605.54,698.891 1606.1,684.965 1606.66,701.108 1607.22,666.523 1607.78,683.075 1608.34,681.592 1608.9,684.428 1609.46,698.289 1610.02,697.42 1610.57,695.391 1611.13,712.406 1611.69,711.477 1612.25,692.735 1612.81,662.826 1613.37,681.754 1613.93,683.514 1614.49,704.151 1615.05,673.045 1615.61,703.795 1616.17,703.142 1616.73,717.103 1617.29,717.023 1617.84,716.155 1618.4,681.637 1618.96,665.364 1619.52,685.584 1620.08,686.213 1620.64,668.304 1621.2,689.357 1621.76,674.441 1622.32,662.524 1622.88,664.453 1623.44,648.158 1624,633.48 1624.56,635.137 1625.11,638.781 1625.67,607.752 1626.23,610.097 1626.79,614.238 1627.35,616.407 1627.91,603.038 1628.47,640.147 1629.03,643.772 1629.59,663.756 1630.15,642.916 1630.71,649.179 1631.27,666.489 1631.83,648.204 1632.39,666.041 1632.94,699.623 1633.5,730.399 1634.06,742.269 1634.62,724.38 1635.18,686.207 1635.74,700.298 1636.3,698.736 1636.86,683.129 1637.42,680.234 1637.98,698.776 1638.54,711.401 1639.1,693.856 1639.66,677.337 1640.21,675.548 1640.77,645.382 1641.33,650.082 1641.89,637.632 1642.45,604.34 1643.01,605.91 1643.57,627.045 1644.13,613.908 1644.69,581.827 1645.25,602.639 1645.81,643.033 1646.37,645.017 1646.93,630.462 1647.48,618.157 1648.04,636.408 1648.6,654.856 1649.16,641.461 1649.72,657.675 1650.28,674.34 1650.84,704.928 1651.4,655.655 1651.96,657.26 1652.52,708.335 1653.08,675.236 1653.64,626.686 1654.2,645.619 1654.76,679.19 1655.31,676.877 1655.87,676.683 1656.43,675.526 1656.99,689.814 1657.55,688.402 1658.11,720.091 1658.67,718.771 1659.23,734.657 1659.79,730.489 1660.35,760.372 1660.91,772.615 1661.47,755.658 1662.03,753.606 1662.58,766.269 1663.14,777.559 1663.7,804.883 1664.26,801.157 1664.82,795.545 1665.38,788.422 1665.94,782.632 1666.5,777.151 1667.06,807.545 1667.62,784.991 1668.18,777.134 1668.74,740.182 1669.3,721.67 1669.85,716.083 1670.41,714.214 1670.97,713.39 1671.53,727.91 1672.09,709.149 1672.65,646.904 1673.21,698.234 1673.77,682.754 1674.33,666.657 1674.89,699.608 1675.45,683.726 1676.01,685.588 1676.57,637.468 1677.13,638.896 1677.68,627.623 1678.24,645.279 1678.8,633.577 1679.36,616.176 1679.92,585.193 1680.48,571.982 1681.04,577.851 1681.6,566.931 1682.16,558.439 1682.72,566.158 1683.28,556.588 1683.84,563.262 1684.4,520.567 1684.95,529.679 1685.51,550.177 1686.07,560.02 1686.63,584.057 1687.19,591.651 1687.75,613.024 1688.31,634.842 1688.87,636.503 1689.43,638.22 1689.99,639.755 1690.55,658.745 1691.11,645.937 1691.67,678.072 1692.23,677.826 1692.78,678.414 1693.34,678.741 1693.9,643.428 1694.46,663.183 1695.02,664.863 1695.58,681.842 1696.14,665.4 1696.7,685.115 1697.26,654.174 1697.82,670.329 1698.38,687.796 1698.94,671.324 1699.5,674.084 1700.05,670.136 1700.61,636.841 1701.17,639.932 1701.73,674.124 1702.29,691.898 1702.85,693.305 1703.41,725.827 1703.97,741.453 1704.53,772.497 1705.09,747.113 1705.65,743.303 1706.21,726.288 1706.77,719.785 1707.32,705.207 1707.88,687.688 1708.44,682.647 1709,684.059 1709.56,684.106 1710.12,683.345 1710.68,648.684 1711.24,683.161 1711.8,680.36 1712.36,680.034 1712.92,664.21 1713.48,666.532 1714.04,650.898 1714.6,633.5 1715.15,619.046 1715.71,605.078 1716.27,642.995 1716.83,678.875 1717.39,676.943 1717.95,693.857 1718.51,709.372 1719.07,690.109 1719.63,708.252 1720.19,688.31 1720.75,705.161 1721.31,688.525 1721.87,640.133 1722.42,644.964 1722.98,646.651 1723.54,650.339 1724.1,648.761 1724.66,634.258 1725.22,652.393 1725.78,653.991 1726.34,671.099 1726.9,705.516 1727.46,703.796 1728.02,701.941 1728.58,669.288 1729.14,670.469 1729.69,657.626 1730.25,708.455 1730.81,692.733 1731.37,695.496 1731.93,694.757 1732.49,707.495 1733.05,704.999 1733.61,719.261 1734.17,751.364 1734.73,778.399 1735.29,771.053 1735.85,737.218 1736.41,735.036 1736.97,782.584 1737.52,776.318 1738.08,743.401 1738.64,738.17 1739.2,688.898 1739.76,672.73 1740.32,672.733 1740.88,675.729 1741.44,695.44 1742,682.223 1742.56,713.122 1743.12,726.66 1743.68,692.057 1744.24,675.393 1744.79,675.601 1745.35,659.021 1745.91,662.617 1746.47,665.209 1747.03,667.865 1747.59,634.525 1748.15,668.246 1748.71,646.22 1749.27,664.379 1749.83,716.526 1750.39,665.912 1750.95,667.05 1751.51,634.705 1752.06,635.771 1752.62,640.974 1753.18,645.075 1753.74,628.487 1754.3,613.219 1754.86,633.966 1755.42,656.318 1755.98,640.701 1756.54,660.273 1757.1,659.903 1757.66,657.551 1758.22,660.054 1758.78,675.625 1759.34,677.754 1759.89,712.579 1760.45,727.139 1761.01,725.471 1761.57,732.671 1762.13,746.027 1762.69,724.738 1763.25,723.571 1763.81,738.336 1764.37,750.914 1764.93,728.757 1765.49,693.502 1766.05,695.448 1766.61,709.705 1767.16,741.757 1767.72,740.673 1768.28,739.767 1768.84,705.165 1769.4,703.409 1769.96,735.694 1770.52,735.143 1771.08,751.892 1771.64,750.413 1772.2,746.337 1772.76,744.583 1773.32,757.042 1773.88,797.518 1774.43,788.948 1774.99,769.723 1775.55,783.992 1776.11,809.465 1776.67,792.615 1777.23,767.455 1777.79,765.814 1778.35,797.21 1778.91,776.238 1779.47,770.498 1780.03,750.704 1780.59,731.142 1781.15,742.895 1781.71,741.716 1782.26,771.519 1782.82,753.357 1783.38,745.367 1783.94,728.192 1784.5,744.299 1785.06,670.755 1785.62,670.425 1786.18,672.211 1786.74,653.985 1787.3,637.844 1787.86,657.244 1788.42,659.588 1788.98,662.368 1789.53,660.877 1790.09,708.529 1790.65,706.289 1791.21,676.409 1791.77,688.331 1792.33,669.707 1792.89,703.129 1793.45,684.828 1794.01,683.132 1794.57,666.807 1795.13,651.43 1795.69,604.195 1796.25,590.468 1796.8,627.77 1797.36,645.546 1797.92,597.364 1798.48,601.77 1799.04,588.222 1799.6,562.052 1800.16,553.496 1800.72,545.443 1801.28,588.163 1801.84,579.852 1802.4,568.261 1802.96,572.592 1803.52,628.144 1804.08,661.85 1804.63,677.885 1805.19,697.119 1805.75,716.736 1806.31,743.217 1806.87,726.494 1807.43,722.309 1807.99,721.805 1808.55,750.594 1809.11,760.772 1809.67,740.819 1810.23,735.639 1810.79,778.961 1811.35,774.061 1811.9,787.664 1812.46,784.366 1813.02,773.724 1813.58,751.351 1814.14,733.503 1814.7,715.188 1815.26,696.394 1815.82,692.694 1816.38,691.728 1816.94,704.038 1817.5,637.318 1818.06,669.572 1818.62,682.719 1819.18,682.776 1819.73,711.825 1820.29,723.688 1820.85,737.194 1821.41,735.313 1821.97,744.599 1822.53,723.604 1823.09,723.235 1823.65,722.107 1824.21,701.615 1824.77,682.321 1825.33,651.055 1825.89,652.902 1826.45,671.28 1827,656.856 1827.56,658.504 1828.12,691.614 1828.68,724.314 1829.24,707.227 1829.8,734.691 1830.36,747.544 1830.92,761.923 1831.48,723.302 1832.04,722.787 1832.6,700.009 1833.16,697.694 1833.72,648.597 1834.27,635.128 1834.83,603.128 1835.39,622.885 1835.95,607.91 1836.51,627.938 1837.07,644.52 1837.63,648.854 1838.19,699.474 \"/>\n<path clip-path=\"url(#clip483)\" d=\"M720.247 690.687 L720.806 690.687 L721.365 690.687 L721.924 690.687 L722.484 690.687 L723.043 690.687 L723.602 690.687 L724.161 690.687 L724.721 690.687 L725.28 690.687 L725.839 690.687 L726.398 690.687 L726.958 690.687 L727.517 690.687 L728.076 690.687 L728.635 690.687 L729.195 690.687 L729.754 690.687 L730.313 690.687 L730.872 690.687 L731.432 690.687 L731.991 690.687 L732.55 690.687 L733.109 690.687 L733.669 690.687 L734.228 690.687 L734.787 690.687 L735.346 690.687 L735.906 690.687 L736.465 690.687 L737.024 690.687 L737.583 690.687 L738.143 690.687 L738.702 690.687 L739.261 690.687 L739.82 690.687 L740.38 690.687 L740.939 690.687 L741.498 690.687 L742.057 690.687 L742.617 690.687 L743.176 690.687 L743.735 690.687 L744.294 690.687 L744.854 690.687 L745.413 690.687 L745.972 690.687 L746.531 690.687 L747.091 690.687 L747.65 690.687 L748.209 690.687 L748.768 690.687 L749.328 690.687 L749.887 690.687 L750.446 690.687 L751.005 690.687 L751.565 690.687 L752.124 690.687 L752.683 690.687 L753.242 690.687 L753.802 690.687 L754.361 690.687 L754.92 690.687 L755.479 690.687 L756.039 690.687 L756.598 690.687 L757.157 690.687 L757.716 690.687 L758.276 690.687 L758.835 690.687 L759.394 690.687 L759.953 690.687 L760.513 690.687 L761.072 690.687 L761.631 690.687 L762.19 690.687 L762.75 690.687 L763.309 690.687 L763.868 690.687 L764.427 690.687 L764.987 690.687 L765.546 690.687 L766.105 690.687 L766.664 690.687 L767.224 690.687 L767.783 690.687 L768.342 690.687 L768.901 690.687 L769.461 690.687 L770.02 690.687 L770.579 690.687 L771.138 690.687 L771.698 690.687 L772.257 690.687 L772.816 690.687 L773.375 690.687 L773.935 690.687 L774.494 690.687 L775.053 690.687 L775.612 690.687 L776.172 690.687 L776.731 690.687 L777.29 690.687 L777.849 690.687 L778.409 690.687 L778.968 690.687 L779.527 690.687 L780.086 690.687 L780.646 690.687 L781.205 690.687 L781.764 690.687 L782.323 690.687 L782.883 690.687 L783.442 690.687 L784.001 690.687 L784.56 690.687 L785.12 690.687 L785.679 690.687 L786.238 690.687 L786.797 690.687 L787.357 690.687 L787.916 690.687 L788.475 690.687 L789.034 690.687 L789.594 690.687 L790.153 690.687 L790.712 690.687 L791.271 690.687 L791.831 690.687 L792.39 690.687 L792.949 690.687 L793.508 690.687 L794.068 690.687 L794.627 690.687 L795.186 690.687 L795.745 690.687 L796.305 690.687 L796.864 690.687 L797.423 690.687 L797.982 690.687 L798.542 690.687 L799.101 690.687 L799.66 690.687 L800.219 690.687 L800.779 690.687 L801.338 690.687 L801.897 690.687 L802.456 690.687 L803.016 690.687 L803.575 690.687 L804.134 690.687 L804.693 690.687 L805.253 690.687 L805.812 690.687 L806.371 690.687 L806.931 690.687 L807.49 690.687 L808.049 690.687 L808.608 690.687 L809.168 690.687 L809.727 690.687 L810.286 690.687 L810.845 690.687 L811.405 690.687 L811.964 690.687 L812.523 690.687 L813.082 690.687 L813.642 690.687 L814.201 690.687 L814.76 690.687 L815.319 690.687 L815.879 690.687 L816.438 690.687 L816.997 690.687 L817.556 690.687 L818.116 690.687 L818.675 690.687 L819.234 690.687 L819.793 690.687 L820.353 690.687 L820.912 690.687 L821.471 690.687 L822.03 690.687 L822.59 690.687 L823.149 690.687 L823.708 690.687 L824.267 690.687 L824.827 690.687 L825.386 690.687 L825.945 690.687 L826.504 690.687 L827.064 690.687 L827.623 690.687 L828.182 690.687 L828.741 690.687 L829.301 690.687 L829.86 690.687 L830.419 690.687 L830.978 690.687 L831.538 690.687 L832.097 690.687 L832.656 690.687 L833.215 690.687 L833.775 690.687 L834.334 690.687 L834.893 690.687 L835.452 690.687 L836.012 690.687 L836.571 690.687 L837.13 690.687 L837.689 690.687 L838.249 690.687 L838.808 690.687 L839.367 690.687 L839.926 690.687 L840.486 690.687 L841.045 690.687 L841.604 690.687 L842.163 690.687 L842.723 690.687 L843.282 690.687 L843.841 690.687 L844.4 690.687 L844.96 690.687 L845.519 690.687 L846.078 690.687 L846.637 690.687 L847.197 690.687 L847.756 690.687 L848.315 690.687 L848.874 690.687 L849.434 690.687 L849.993 690.687 L850.552 690.687 L851.111 690.687 L851.671 690.687 L852.23 690.687 L852.789 690.687 L853.348 690.687 L853.908 690.687 L854.467 690.687 L855.026 690.687 L855.585 690.687 L856.145 690.687 L856.704 690.687 L857.263 690.687 L857.822 690.687 L858.382 690.687 L858.941 690.687 L859.5 690.687 L860.059 690.687 L860.619 690.687 L861.178 690.687 L861.737 690.687 L862.296 690.687 L862.856 690.687 L863.415 690.687 L863.974 690.687 L864.533 690.687 L865.093 690.687 L865.652 690.687 L866.211 690.687 L866.77 690.687 L867.33 690.687 L867.889 690.687 L868.448 690.687 L869.007 690.687 L869.567 690.687 L870.126 690.687 L870.685 690.687 L871.244 690.687 L871.804 690.687 L872.363 690.687 L872.922 690.687 L873.481 690.687 L874.041 690.687 L874.6 690.687 L875.159 690.687 L875.718 690.687 L876.278 690.687 L876.837 690.687 L877.396 690.687 L877.955 690.687 L878.515 690.687 L879.074 690.687 L879.633 690.687 L880.192 690.687 L880.752 690.687 L881.311 690.687 L881.87 690.687 L882.429 690.687 L882.989 690.687 L883.548 690.687 L884.107 690.687 L884.666 690.687 L885.226 690.687 L885.785 690.687 L886.344 690.687 L886.903 690.687 L887.463 690.687 L888.022 690.687 L888.581 690.687 L889.14 690.687 L889.7 690.687 L890.259 690.687 L890.818 690.687 L891.377 690.687 L891.937 690.687 L892.496 690.687 L893.055 690.687 L893.614 690.687 L894.174 690.687 L894.733 690.687 L895.292 690.687 L895.851 690.687 L896.411 690.687 L896.97 690.687 L897.529 690.687 L898.088 690.687 L898.648 690.687 L899.207 690.687 L899.766 690.687 L900.325 690.687 L900.885 690.687 L901.444 690.687 L902.003 690.687 L902.562 690.687 L903.122 690.687 L903.681 690.687 L904.24 690.687 L904.799 690.687 L905.359 690.687 L905.918 690.687 L906.477 690.687 L907.036 690.687 L907.596 690.687 L908.155 690.687 L908.714 690.687 L909.273 690.687 L909.833 690.687 L910.392 690.687 L910.951 690.687 L911.51 690.687 L912.07 690.687 L912.629 690.687 L913.188 690.687 L913.747 690.687 L914.307 690.687 L914.866 690.687 L915.425 690.687 L915.984 690.687 L916.544 690.687 L917.103 690.687 L917.662 690.687 L918.221 690.687 L918.781 690.687 L919.34 690.687 L919.899 690.687 L920.458 690.687 L921.018 690.687 L921.577 690.687 L922.136 690.687 L922.695 690.687 L923.255 690.687 L923.814 690.687 L924.373 690.687 L924.932 690.687 L925.492 690.687 L926.051 690.687 L926.61 690.687 L927.169 690.687 L927.729 690.687 L928.288 690.687 L928.847 690.687 L929.406 690.687 L929.966 690.687 L930.525 690.687 L931.084 690.687 L931.644 690.687 L932.203 690.687 L932.762 690.687 L933.321 690.687 L933.881 690.687 L934.44 690.687 L934.999 690.687 L935.558 690.687 L936.118 690.687 L936.677 690.687 L937.236 690.687 L937.795 690.687 L938.355 690.687 L938.914 690.687 L939.473 690.687 L940.032 690.687 L940.592 690.687 L941.151 690.687 L941.71 690.687 L942.269 690.687 L942.829 690.687 L943.388 690.687 L943.947 690.687 L944.506 690.687 L945.066 690.687 L945.625 690.687 L946.184 690.687 L946.743 690.687 L947.303 690.687 L947.862 690.687 L948.421 690.687 L948.98 690.687 L949.54 690.687 L950.099 690.687 L950.658 690.687 L951.217 690.687 L951.777 690.687 L952.336 690.687 L952.895 690.687 L953.454 690.687 L954.014 690.687 L954.573 690.687 L955.132 690.687 L955.691 690.687 L956.251 690.687 L956.81 690.687 L957.369 690.687 L957.928 690.687 L958.488 690.687 L959.047 690.687 L959.606 690.687 L960.165 690.687 L960.725 690.687 L961.284 690.687 L961.843 690.687 L962.402 690.687 L962.962 690.687 L963.521 690.687 L964.08 690.687 L964.639 690.687 L965.199 690.687 L965.758 690.687 L966.317 690.687 L966.876 690.687 L967.436 690.687 L967.995 690.687 L968.554 690.687 L969.113 690.687 L969.673 690.687 L970.232 690.687 L970.791 690.687 L971.35 690.687 L971.91 690.687 L972.469 690.687 L973.028 690.687 L973.587 690.687 L974.147 690.687 L974.706 690.687 L975.265 690.687 L975.824 690.687 L976.384 690.687 L976.943 690.687 L977.502 690.687 L978.061 690.687 L978.621 690.687 L979.18 690.687 L979.739 690.687 L980.298 690.687 L980.858 690.687 L981.417 690.687 L981.976 690.687 L982.535 690.687 L983.095 690.687 L983.654 690.687 L984.213 690.687 L984.772 690.687 L985.332 690.687 L985.891 690.687 L986.45 690.687 L987.009 690.687 L987.569 690.687 L988.128 690.687 L988.687 690.687 L989.246 690.687 L989.806 690.687 L990.365 690.687 L990.924 690.687 L991.483 690.687 L992.043 690.687 L992.602 690.687 L993.161 690.687 L993.72 690.687 L994.28 690.687 L994.839 690.687 L995.398 690.687 L995.957 690.687 L996.517 690.687 L997.076 690.687 L997.635 690.687 L998.194 690.687 L998.754 690.687 L999.313 690.687 L999.872 690.687 L1000.43 690.687 L1000.99 690.687 L1001.55 690.687 L1002.11 690.687 L1002.67 690.687 L1003.23 690.687 L1003.79 690.687 L1004.35 690.687 L1004.91 690.687 L1005.46 690.687 L1006.02 690.687 L1006.58 690.687 L1007.14 690.687 L1007.7 690.687 L1008.26 690.687 L1008.82 690.687 L1009.38 690.687 L1009.94 690.687 L1010.5 690.687 L1011.06 690.687 L1011.62 690.687 L1012.18 690.687 L1012.73 690.687 L1013.29 690.687 L1013.85 690.687 L1014.41 690.687 L1014.97 690.687 L1015.53 690.687 L1016.09 690.687 L1016.65 690.687 L1017.21 690.687 L1017.77 690.687 L1018.33 690.687 L1018.89 690.687 L1019.45 690.687 L1020.01 690.687 L1020.56 690.687 L1021.12 690.687 L1021.68 690.687 L1022.24 690.687 L1022.8 690.687 L1023.36 690.687 L1023.92 690.687 L1024.48 690.687 L1025.04 690.687 L1025.6 690.687 L1026.16 690.687 L1026.72 690.687 L1027.28 690.687 L1027.83 690.687 L1028.39 690.687 L1028.95 690.687 L1029.51 690.687 L1030.07 690.687 L1030.63 690.687 L1031.19 690.687 L1031.75 690.687 L1032.31 690.687 L1032.87 690.687 L1033.43 690.687 L1033.99 690.687 L1034.55 690.687 L1035.1 690.687 L1035.66 690.687 L1036.22 690.687 L1036.78 690.687 L1037.34 690.687 L1037.9 690.687 L1038.46 690.687 L1039.02 690.687 L1039.58 690.687 L1040.14 690.687 L1040.7 690.687 L1041.26 690.687 L1041.82 690.687 L1042.38 690.687 L1042.93 690.687 L1043.49 690.687 L1044.05 690.687 L1044.61 690.687 L1045.17 690.687 L1045.73 690.687 L1046.29 690.687 L1046.85 690.687 L1047.41 690.687 L1047.97 690.687 L1048.53 690.687 L1049.09 690.687 L1049.65 690.687 L1050.2 690.687 L1050.76 690.687 L1051.32 690.687 L1051.88 690.687 L1052.44 690.687 L1053 690.687 L1053.56 690.687 L1054.12 690.687 L1054.68 690.687 L1055.24 690.687 L1055.8 690.687 L1056.36 690.687 L1056.92 690.687 L1057.48 690.687 L1058.03 690.687 L1058.59 690.687 L1059.15 690.687 L1059.71 690.687 L1060.27 690.687 L1060.83 690.687 L1061.39 690.687 L1061.95 690.687 L1062.51 690.687 L1063.07 690.687 L1063.63 690.687 L1064.19 690.687 L1064.75 690.687 L1065.3 690.687 L1065.86 690.687 L1066.42 690.687 L1066.98 690.687 L1067.54 690.687 L1068.1 690.687 L1068.66 690.687 L1069.22 690.687 L1069.78 690.687 L1070.34 690.687 L1070.9 690.687 L1071.46 690.687 L1072.02 690.687 L1072.57 690.687 L1073.13 690.687 L1073.69 690.687 L1074.25 690.687 L1074.81 690.687 L1075.37 690.687 L1075.93 690.687 L1076.49 690.687 L1077.05 690.687 L1077.61 690.687 L1078.17 690.687 L1078.73 690.687 L1079.29 690.687 L1079.85 690.687 L1080.4 690.687 L1080.96 690.687 L1081.52 690.687 L1082.08 690.687 L1082.64 690.687 L1083.2 690.687 L1083.76 690.687 L1084.32 690.687 L1084.88 690.687 L1085.44 690.687 L1086 690.687 L1086.56 690.687 L1087.12 690.687 L1087.67 690.687 L1088.23 690.687 L1088.79 690.687 L1089.35 690.687 L1089.91 690.687 L1090.47 690.687 L1091.03 690.687 L1091.59 690.687 L1092.15 690.687 L1092.71 690.687 L1093.27 690.687 L1093.83 690.687 L1094.39 690.687 L1094.94 690.687 L1095.5 690.687 L1096.06 690.687 L1096.62 690.687 L1097.18 690.687 L1097.74 690.687 L1098.3 690.687 L1098.86 690.687 L1099.42 690.687 L1099.98 690.687 L1100.54 690.687 L1101.1 690.687 L1101.66 690.687 L1102.22 690.687 L1102.77 690.687 L1103.33 690.687 L1103.89 690.687 L1104.45 690.687 L1105.01 690.687 L1105.57 690.687 L1106.13 690.687 L1106.69 690.687 L1107.25 690.687 L1107.81 690.687 L1108.37 690.687 L1108.93 690.687 L1109.49 690.687 L1110.04 690.687 L1110.6 690.687 L1111.16 690.687 L1111.72 690.687 L1112.28 690.687 L1112.84 690.687 L1113.4 690.687 L1113.96 690.687 L1114.52 690.687 L1115.08 690.687 L1115.64 690.687 L1116.2 690.687 L1116.76 690.687 L1117.31 690.687 L1117.87 690.687 L1118.43 690.687 L1118.99 690.687 L1119.55 690.687 L1120.11 690.687 L1120.67 690.687 L1121.23 690.687 L1121.79 690.687 L1122.35 690.687 L1122.91 690.687 L1123.47 690.687 L1124.03 690.687 L1124.59 690.687 L1125.14 690.687 L1125.7 690.687 L1126.26 690.687 L1126.82 690.687 L1127.38 690.687 L1127.94 690.687 L1128.5 690.687 L1129.06 690.687 L1129.62 690.687 L1130.18 690.687 L1130.74 690.687 L1131.3 690.687 L1131.86 690.687 L1132.41 690.687 L1132.97 690.687 L1133.53 690.687 L1134.09 690.687 L1134.65 690.687 L1135.21 690.687 L1135.77 690.687 L1136.33 690.687 L1136.89 690.687 L1137.45 690.687 L1138.01 690.687 L1138.57 690.687 L1139.13 690.687 L1139.68 690.687 L1140.24 690.687 L1140.8 690.687 L1141.36 690.687 L1141.92 690.687 L1142.48 690.687 L1143.04 690.687 L1143.6 690.687 L1144.16 690.687 L1144.72 690.687 L1145.28 690.687 L1145.84 690.687 L1146.4 690.687 L1146.96 690.687 L1147.51 690.687 L1148.07 690.687 L1148.63 690.687 L1149.19 690.687 L1149.75 690.687 L1150.31 690.687 L1150.87 690.687 L1151.43 690.687 L1151.99 690.687 L1152.55 690.687 L1153.11 690.687 L1153.67 690.687 L1154.23 690.687 L1154.78 690.687 L1155.34 690.687 L1155.9 690.687 L1156.46 690.687 L1157.02 690.687 L1157.58 690.687 L1158.14 690.687 L1158.7 690.687 L1159.26 690.687 L1159.82 690.687 L1160.38 690.687 L1160.94 690.687 L1161.5 690.687 L1162.05 690.687 L1162.61 690.687 L1163.17 690.687 L1163.73 690.687 L1164.29 690.687 L1164.85 690.687 L1165.41 690.687 L1165.97 690.687 L1166.53 690.687 L1167.09 690.687 L1167.65 690.687 L1168.21 690.687 L1168.77 690.687 L1169.33 690.687 L1169.88 690.687 L1170.44 690.687 L1171 690.687 L1171.56 690.687 L1172.12 690.687 L1172.68 690.687 L1173.24 690.687 L1173.8 690.687 L1174.36 690.687 L1174.92 690.687 L1175.48 690.687 L1176.04 690.687 L1176.6 690.687 L1177.15 690.687 L1177.71 690.687 L1178.27 690.687 L1178.83 690.687 L1179.39 690.687 L1179.95 690.687 L1180.51 690.687 L1181.07 690.687 L1181.63 690.687 L1182.19 690.687 L1182.75 690.687 L1183.31 690.687 L1183.87 690.687 L1184.43 690.687 L1184.98 690.687 L1185.54 690.687 L1186.1 690.687 L1186.66 690.687 L1187.22 690.687 L1187.78 690.687 L1188.34 690.687 L1188.9 690.687 L1189.46 690.687 L1190.02 690.687 L1190.58 690.687 L1191.14 690.687 L1191.7 690.687 L1192.25 690.687 L1192.81 690.687 L1193.37 690.687 L1193.93 690.687 L1194.49 690.687 L1195.05 690.687 L1195.61 690.687 L1196.17 690.687 L1196.73 690.687 L1197.29 690.687 L1197.85 690.687 L1198.41 690.687 L1198.97 690.687 L1199.52 690.687 L1200.08 690.687 L1200.64 690.687 L1201.2 690.687 L1201.76 690.687 L1202.32 690.687 L1202.88 690.687 L1203.44 690.687 L1204 690.687 L1204.56 690.687 L1205.12 690.687 L1205.68 690.687 L1206.24 690.687 L1206.8 690.687 L1207.35 690.687 L1207.91 690.687 L1208.47 690.687 L1209.03 690.687 L1209.59 690.687 L1210.15 690.687 L1210.71 690.687 L1211.27 690.687 L1211.83 690.687 L1212.39 690.687 L1212.95 690.687 L1213.51 690.687 L1214.07 690.687 L1214.62 690.687 L1215.18 690.687 L1215.74 690.687 L1216.3 690.687 L1216.86 690.687 L1217.42 690.687 L1217.98 690.687 L1218.54 690.687 L1219.1 690.687 L1219.66 690.687 L1220.22 690.687 L1220.78 690.687 L1221.34 690.687 L1221.89 690.687 L1222.45 690.687 L1223.01 690.687 L1223.57 690.687 L1224.13 690.687 L1224.69 690.687 L1225.25 690.687 L1225.81 690.687 L1226.37 690.687 L1226.93 690.687 L1227.49 690.687 L1228.05 690.687 L1228.61 690.687 L1229.17 690.687 L1229.72 690.687 L1230.28 690.687 L1230.84 690.687 L1231.4 690.687 L1231.96 690.687 L1232.52 690.687 L1233.08 690.687 L1233.64 690.687 L1234.2 690.687 L1234.76 690.687 L1235.32 690.687 L1235.88 690.687 L1236.44 690.687 L1236.99 690.687 L1237.55 690.687 L1238.11 690.687 L1238.67 690.687 L1239.23 690.687 L1239.79 690.687 L1240.35 690.687 L1240.91 690.687 L1241.47 690.687 L1242.03 690.687 L1242.59 690.687 L1243.15 690.687 L1243.71 690.687 L1244.26 690.687 L1244.82 690.687 L1245.38 690.687 L1245.94 690.687 L1246.5 690.687 L1247.06 690.687 L1247.62 690.687 L1248.18 690.687 L1248.74 690.687 L1249.3 690.687 L1249.86 690.687 L1250.42 690.687 L1250.98 690.687 L1251.54 690.687 L1252.09 690.687 L1252.65 690.687 L1253.21 690.687 L1253.77 690.687 L1254.33 690.687 L1254.89 690.687 L1255.45 690.687 L1256.01 690.687 L1256.57 690.687 L1257.13 690.687 L1257.69 690.687 L1258.25 690.687 L1258.81 690.687 L1259.36 690.687 L1259.92 690.687 L1260.48 690.687 L1261.04 690.687 L1261.6 690.687 L1262.16 690.687 L1262.72 690.687 L1263.28 690.687 L1263.84 690.687 L1264.4 690.687 L1264.96 690.687 L1265.52 690.687 L1266.08 690.687 L1266.63 690.687 L1267.19 690.687 L1267.75 690.687 L1268.31 690.687 L1268.87 690.687 L1269.43 690.687 L1269.99 690.687 L1270.55 690.687 L1271.11 690.687 L1271.67 690.687 L1272.23 690.687 L1272.79 690.687 L1273.35 690.687 L1273.91 690.687 L1274.46 690.687 L1275.02 690.687 L1275.58 690.687 L1276.14 690.687 L1276.7 690.687 L1277.26 690.687 L1277.82 690.687 L1278.38 690.687 L1278.94 690.687 L1279.5 690.687 L1280.06 690.687 L1280.62 690.687 L1281.18 690.687 L1281.73 690.687 L1282.29 690.687 L1282.85 690.687 L1283.41 690.687 L1283.97 690.687 L1284.53 690.687 L1285.09 690.687 L1285.65 690.687 L1286.21 690.687 L1286.77 690.687 L1287.33 690.687 L1287.89 690.687 L1288.45 690.687 L1289 690.687 L1289.56 690.687 L1290.12 690.687 L1290.68 690.687 L1291.24 690.687 L1291.8 690.687 L1292.36 690.687 L1292.92 690.687 L1293.48 690.687 L1294.04 690.687 L1294.6 690.687 L1295.16 690.687 L1295.72 690.687 L1296.28 690.687 L1296.83 690.687 L1297.39 690.687 L1297.95 690.687 L1298.51 690.687 L1299.07 690.687 L1299.63 690.687 L1300.19 690.687 L1300.75 690.687 L1301.31 690.687 L1301.87 690.687 L1302.43 690.687 L1302.99 690.687 L1303.55 690.687 L1304.1 690.687 L1304.66 690.687 L1305.22 690.687 L1305.78 690.687 L1306.34 690.687 L1306.9 690.687 L1307.46 690.687 L1308.02 690.687 L1308.58 690.687 L1309.14 690.687 L1309.7 690.687 L1310.26 690.687 L1310.82 690.687 L1311.38 690.687 L1311.93 690.687 L1312.49 690.687 L1313.05 690.687 L1313.61 690.687 L1314.17 690.687 L1314.73 690.687 L1315.29 690.687 L1315.85 690.687 L1316.41 690.687 L1316.97 690.687 L1317.53 690.687 L1318.09 690.687 L1318.65 690.687 L1319.2 690.687 L1319.76 690.687 L1320.32 690.687 L1320.88 690.687 L1321.44 690.687 L1322 690.687 L1322.56 690.687 L1323.12 690.687 L1323.68 690.687 L1324.24 690.687 L1324.8 690.687 L1325.36 690.687 L1325.92 690.687 L1326.47 690.687 L1327.03 690.687 L1327.59 690.687 L1328.15 690.687 L1328.71 690.687 L1329.27 690.687 L1329.83 690.687 L1330.39 690.687 L1330.95 690.687 L1331.51 690.687 L1332.07 690.687 L1332.63 690.687 L1333.19 690.687 L1333.75 690.687 L1334.3 690.687 L1334.86 690.687 L1335.42 690.687 L1335.98 690.687 L1336.54 690.687 L1337.1 690.687 L1337.66 690.687 L1338.22 690.687 L1338.78 690.687 L1339.34 690.687 L1339.9 690.687 L1340.46 690.687 L1341.02 690.687 L1341.57 690.687 L1342.13 690.687 L1342.69 690.687 L1343.25 690.687 L1343.81 690.687 L1344.37 690.687 L1344.93 690.687 L1345.49 690.687 L1346.05 690.687 L1346.61 690.687 L1347.17 690.687 L1347.73 690.687 L1348.29 690.687 L1348.84 690.687 L1349.4 690.687 L1349.96 690.687 L1350.52 690.687 L1351.08 690.687 L1351.64 690.687 L1352.2 690.687 L1352.76 690.687 L1353.32 690.687 L1353.88 690.687 L1354.44 690.687 L1355 690.687 L1355.56 690.687 L1356.12 690.687 L1356.67 690.687 L1357.23 690.687 L1357.79 690.687 L1358.35 690.687 L1358.91 690.687 L1359.47 690.687 L1360.03 690.687 L1360.59 690.687 L1361.15 690.687 L1361.71 690.687 L1362.27 690.687 L1362.83 690.687 L1363.39 690.687 L1363.94 690.687 L1364.5 690.687 L1365.06 690.687 L1365.62 690.687 L1366.18 690.687 L1366.74 690.687 L1367.3 690.687 L1367.86 690.687 L1368.42 690.687 L1368.98 690.687 L1369.54 690.687 L1370.1 690.687 L1370.66 690.687 L1371.21 690.687 L1371.77 690.687 L1372.33 690.687 L1372.89 690.687 L1373.45 690.687 L1374.01 690.687 L1374.57 690.687 L1375.13 690.687 L1375.69 690.687 L1376.25 690.687 L1376.81 690.687 L1377.37 690.687 L1377.93 690.687 L1378.49 690.687 L1379.04 690.687 L1379.6 690.687 L1380.16 690.687 L1380.72 690.687 L1381.28 690.687 L1381.84 690.687 L1382.4 690.687 L1382.96 690.687 L1383.52 690.687 L1384.08 690.687 L1384.64 690.687 L1385.2 690.687 L1385.76 690.687 L1386.31 690.687 L1386.87 690.687 L1387.43 690.687 L1387.99 690.687 L1388.55 690.687 L1389.11 690.687 L1389.67 690.687 L1390.23 690.687 L1390.79 690.687 L1391.35 690.687 L1391.91 690.687 L1392.47 690.687 L1393.03 690.687 L1393.58 690.687 L1394.14 690.687 L1394.7 690.687 L1395.26 690.687 L1395.82 690.687 L1396.38 690.687 L1396.94 690.687 L1397.5 690.687 L1398.06 690.687 L1398.62 690.687 L1399.18 690.687 L1399.74 690.687 L1400.3 690.687 L1400.86 690.687 L1401.41 690.687 L1401.97 690.687 L1402.53 690.687 L1403.09 690.687 L1403.65 690.687 L1404.21 690.687 L1404.77 690.687 L1405.33 690.687 L1405.89 690.687 L1406.45 690.687 L1407.01 690.687 L1407.57 690.687 L1408.13 690.687 L1408.68 690.687 L1409.24 690.687 L1409.8 690.687 L1410.36 690.687 L1410.92 690.687 L1411.48 690.687 L1412.04 690.687 L1412.6 690.687 L1413.16 690.687 L1413.72 690.687 L1414.28 690.687 L1414.84 690.687 L1415.4 690.687 L1415.95 690.687 L1416.51 690.687 L1417.07 690.687 L1417.63 690.687 L1418.19 690.687 L1418.75 690.687 L1419.31 690.687 L1419.87 690.687 L1420.43 690.687 L1420.99 690.687 L1421.55 690.687 L1422.11 690.687 L1422.67 690.687 L1423.23 690.687 L1423.78 690.687 L1424.34 690.687 L1424.9 690.687 L1425.46 690.687 L1426.02 690.687 L1426.58 690.687 L1427.14 690.687 L1427.7 690.687 L1428.26 690.687 L1428.82 690.687 L1429.38 690.687 L1429.94 690.687 L1430.5 690.687 L1431.05 690.687 L1431.61 690.687 L1432.17 690.687 L1432.73 690.687 L1433.29 690.687 L1433.85 690.687 L1434.41 690.687 L1434.97 690.687 L1435.53 690.687 L1436.09 690.687 L1436.65 690.687 L1437.21 690.687 L1437.77 690.687 L1438.33 690.687 L1438.88 690.687 L1439.44 690.687 L1440 690.687 L1440.56 690.687 L1441.12 690.687 L1441.68 690.687 L1442.24 690.687 L1442.8 690.687 L1443.36 690.687 L1443.92 690.687 L1444.48 690.687 L1445.04 690.687 L1445.6 690.687 L1446.15 690.687 L1446.71 690.687 L1447.27 690.687 L1447.83 690.687 L1448.39 690.687 L1448.95 690.687 L1449.51 690.687 L1450.07 690.687 L1450.63 690.687 L1451.19 690.687 L1451.75 690.687 L1452.31 690.687 L1452.87 690.687 L1453.42 690.687 L1453.98 690.687 L1454.54 690.687 L1455.1 690.687 L1455.66 690.687 L1456.22 690.687 L1456.78 690.687 L1457.34 690.687 L1457.9 690.687 L1458.46 690.687 L1459.02 690.687 L1459.58 690.687 L1460.14 690.687 L1460.7 690.687 L1461.25 690.687 L1461.81 690.687 L1462.37 690.687 L1462.93 690.687 L1463.49 690.687 L1464.05 690.687 L1464.61 690.687 L1465.17 690.687 L1465.73 690.687 L1466.29 690.687 L1466.85 690.687 L1467.41 690.687 L1467.97 690.687 L1468.52 690.687 L1469.08 690.687 L1469.64 690.687 L1470.2 690.687 L1470.76 690.687 L1471.32 690.687 L1471.88 690.687 L1472.44 690.687 L1473 690.687 L1473.56 690.687 L1474.12 690.687 L1474.68 690.687 L1475.24 690.687 L1475.79 690.687 L1476.35 690.687 L1476.91 690.687 L1477.47 690.687 L1478.03 690.687 L1478.59 690.687 L1479.15 690.687 L1479.71 690.687 L1480.27 690.687 L1480.83 690.687 L1481.39 690.687 L1481.95 690.687 L1482.51 690.687 L1483.07 690.687 L1483.62 690.687 L1484.18 690.687 L1484.74 690.687 L1485.3 690.687 L1485.86 690.687 L1486.42 690.687 L1486.98 690.687 L1487.54 690.687 L1488.1 690.687 L1488.66 690.687 L1489.22 690.687 L1489.78 690.687 L1490.34 690.687 L1490.89 690.687 L1491.45 690.687 L1492.01 690.687 L1492.57 690.687 L1493.13 690.687 L1493.69 690.687 L1494.25 690.687 L1494.81 690.687 L1495.37 690.687 L1495.93 690.687 L1496.49 690.687 L1497.05 690.687 L1497.61 690.687 L1498.16 690.687 L1498.72 690.687 L1499.28 690.687 L1499.84 690.687 L1500.4 690.687 L1500.96 690.687 L1501.52 690.687 L1502.08 690.687 L1502.64 690.687 L1503.2 690.687 L1503.76 690.687 L1504.32 690.687 L1504.88 690.687 L1505.44 690.687 L1505.99 690.687 L1506.55 690.687 L1507.11 690.687 L1507.67 690.687 L1508.23 690.687 L1508.79 690.687 L1509.35 690.687 L1509.91 690.687 L1510.47 690.687 L1511.03 690.687 L1511.59 690.687 L1512.15 690.687 L1512.71 690.687 L1513.26 690.687 L1513.82 690.687 L1514.38 690.687 L1514.94 690.687 L1515.5 690.687 L1516.06 690.687 L1516.62 690.687 L1517.18 690.687 L1517.74 690.687 L1518.3 690.687 L1518.86 690.687 L1519.42 690.687 L1519.98 690.687 L1520.53 690.687 L1521.09 690.687 L1521.65 690.687 L1522.21 690.687 L1522.77 690.687 L1523.33 690.687 L1523.89 690.687 L1524.45 690.687 L1525.01 690.687 L1525.57 690.687 L1526.13 690.687 L1526.69 690.687 L1527.25 690.687 L1527.81 690.687 L1528.36 690.687 L1528.92 690.687 L1529.48 690.687 L1530.04 690.687 L1530.6 690.687 L1531.16 690.687 L1531.72 690.687 L1532.28 690.687 L1532.84 690.687 L1533.4 690.687 L1533.96 690.687 L1534.52 690.687 L1535.08 690.687 L1535.63 690.687 L1536.19 690.687 L1536.75 690.687 L1537.31 690.687 L1537.87 690.687 L1538.43 690.687 L1538.99 690.687 L1539.55 690.687 L1540.11 690.687 L1540.67 690.687 L1541.23 690.687 L1541.79 690.687 L1542.35 690.687 L1542.9 690.687 L1543.46 690.687 L1544.02 690.687 L1544.58 690.687 L1545.14 690.687 L1545.7 690.687 L1546.26 690.687 L1546.82 690.687 L1547.38 690.687 L1547.94 690.687 L1548.5 690.687 L1549.06 690.687 L1549.62 690.687 L1550.18 690.687 L1550.73 690.687 L1551.29 690.687 L1551.85 690.687 L1552.41 690.687 L1552.97 690.687 L1553.53 690.687 L1554.09 690.687 L1554.65 690.687 L1555.21 690.687 L1555.77 690.687 L1556.33 690.687 L1556.89 690.687 L1557.45 690.687 L1558 690.687 L1558.56 690.687 L1559.12 690.687 L1559.68 690.687 L1560.24 690.687 L1560.8 690.687 L1561.36 690.687 L1561.92 690.687 L1562.48 690.687 L1563.04 690.687 L1563.6 690.687 L1564.16 690.687 L1564.72 690.687 L1565.28 690.687 L1565.83 690.687 L1566.39 690.687 L1566.95 690.687 L1567.51 690.687 L1568.07 690.687 L1568.63 690.687 L1569.19 690.687 L1569.75 690.687 L1570.31 690.687 L1570.87 690.687 L1571.43 690.687 L1571.99 690.687 L1572.55 690.687 L1573.1 690.687 L1573.66 690.687 L1574.22 690.687 L1574.78 690.687 L1575.34 690.687 L1575.9 690.687 L1576.46 690.687 L1577.02 690.687 L1577.58 690.687 L1578.14 690.687 L1578.7 690.687 L1579.26 690.687 L1579.82 690.687 L1580.37 690.687 L1580.93 690.687 L1581.49 690.687 L1582.05 690.687 L1582.61 690.687 L1583.17 690.687 L1583.73 690.687 L1584.29 690.687 L1584.85 690.687 L1585.41 690.687 L1585.97 690.687 L1586.53 690.687 L1587.09 690.687 L1587.65 690.687 L1588.2 690.687 L1588.76 690.687 L1589.32 690.687 L1589.88 690.687 L1590.44 690.687 L1591 690.687 L1591.56 690.687 L1592.12 690.687 L1592.68 690.687 L1593.24 690.687 L1593.8 690.687 L1594.36 690.687 L1594.92 690.687 L1595.47 690.687 L1596.03 690.687 L1596.59 690.687 L1597.15 690.687 L1597.71 690.687 L1598.27 690.687 L1598.83 690.687 L1599.39 690.687 L1599.95 690.687 L1600.51 690.687 L1601.07 690.687 L1601.63 690.687 L1602.19 690.687 L1602.74 690.687 L1603.3 690.687 L1603.86 690.687 L1604.42 690.687 L1604.98 690.687 L1605.54 690.687 L1606.1 690.687 L1606.66 690.687 L1607.22 690.687 L1607.78 690.687 L1608.34 690.687 L1608.9 690.687 L1609.46 690.687 L1610.02 690.687 L1610.57 690.687 L1611.13 690.687 L1611.69 690.687 L1612.25 690.687 L1612.81 690.687 L1613.37 690.687 L1613.93 690.687 L1614.49 690.687 L1615.05 690.687 L1615.61 690.687 L1616.17 690.687 L1616.73 690.687 L1617.29 690.687 L1617.84 690.687 L1618.4 690.687 L1618.96 690.687 L1619.52 690.687 L1620.08 690.687 L1620.64 690.687 L1621.2 690.687 L1621.76 690.687 L1622.32 690.687 L1622.88 690.687 L1623.44 690.687 L1624 690.687 L1624.56 690.687 L1625.11 690.687 L1625.67 690.687 L1626.23 690.687 L1626.79 690.687 L1627.35 690.687 L1627.91 690.687 L1628.47 690.687 L1629.03 690.687 L1629.59 690.687 L1630.15 690.687 L1630.71 690.687 L1631.27 690.687 L1631.83 690.687 L1632.39 690.687 L1632.94 690.687 L1633.5 690.687 L1634.06 690.687 L1634.62 690.687 L1635.18 690.687 L1635.74 690.687 L1636.3 690.687 L1636.86 690.687 L1637.42 690.687 L1637.98 690.687 L1638.54 690.687 L1639.1 690.687 L1639.66 690.687 L1640.21 690.687 L1640.77 690.687 L1641.33 690.687 L1641.89 690.687 L1642.45 690.687 L1643.01 690.687 L1643.57 690.687 L1644.13 690.687 L1644.69 690.687 L1645.25 690.687 L1645.81 690.687 L1646.37 690.687 L1646.93 690.687 L1647.48 690.687 L1648.04 690.687 L1648.6 690.687 L1649.16 690.687 L1649.72 690.687 L1650.28 690.687 L1650.84 690.687 L1651.4 690.687 L1651.96 690.687 L1652.52 690.687 L1653.08 690.687 L1653.64 690.687 L1654.2 690.687 L1654.76 690.687 L1655.31 690.687 L1655.87 690.687 L1656.43 690.687 L1656.99 690.687 L1657.55 690.687 L1658.11 690.687 L1658.67 690.687 L1659.23 690.687 L1659.79 690.687 L1660.35 690.687 L1660.91 690.687 L1661.47 690.687 L1662.03 690.687 L1662.58 690.687 L1663.14 690.687 L1663.7 690.687 L1664.26 690.687 L1664.82 690.687 L1665.38 690.687 L1665.94 690.687 L1666.5 690.687 L1667.06 690.687 L1667.62 690.687 L1668.18 690.687 L1668.74 690.687 L1669.3 690.687 L1669.85 690.687 L1670.41 690.687 L1670.97 690.687 L1671.53 690.687 L1672.09 690.687 L1672.65 690.687 L1673.21 690.687 L1673.77 690.687 L1674.33 690.687 L1674.89 690.687 L1675.45 690.687 L1676.01 690.687 L1676.57 690.687 L1677.13 690.687 L1677.68 690.687 L1678.24 690.687 L1678.8 690.687 L1679.36 690.687 L1679.92 690.687 L1680.48 690.687 L1681.04 690.687 L1681.6 690.687 L1682.16 690.687 L1682.72 690.687 L1683.28 690.687 L1683.84 690.687 L1684.4 690.687 L1684.95 690.687 L1685.51 690.687 L1686.07 690.687 L1686.63 690.687 L1687.19 690.687 L1687.75 690.687 L1688.31 690.687 L1688.87 690.687 L1689.43 690.687 L1689.99 690.687 L1690.55 690.687 L1691.11 690.687 L1691.67 690.687 L1692.23 690.687 L1692.78 690.687 L1693.34 690.687 L1693.9 690.687 L1694.46 690.687 L1695.02 690.687 L1695.58 690.687 L1696.14 690.687 L1696.7 690.687 L1697.26 690.687 L1697.82 690.687 L1698.38 690.687 L1698.94 690.687 L1699.5 690.687 L1700.05 690.687 L1700.61 690.687 L1701.17 690.687 L1701.73 690.687 L1702.29 690.687 L1702.85 690.687 L1703.41 690.687 L1703.97 690.687 L1704.53 690.687 L1705.09 690.687 L1705.65 690.687 L1706.21 690.687 L1706.77 690.687 L1707.32 690.687 L1707.88 690.687 L1708.44 690.687 L1709 690.687 L1709.56 690.687 L1710.12 690.687 L1710.68 690.687 L1711.24 690.687 L1711.8 690.687 L1712.36 690.687 L1712.92 690.687 L1713.48 690.687 L1714.04 690.687 L1714.6 690.687 L1715.15 690.687 L1715.71 690.687 L1716.27 690.687 L1716.83 690.687 L1717.39 690.687 L1717.95 690.687 L1718.51 690.687 L1719.07 690.687 L1719.63 690.687 L1720.19 690.687 L1720.75 690.687 L1721.31 690.687 L1721.87 690.687 L1722.42 690.687 L1722.98 690.687 L1723.54 690.687 L1724.1 690.687 L1724.66 690.687 L1725.22 690.687 L1725.78 690.687 L1726.34 690.687 L1726.9 690.687 L1727.46 690.687 L1728.02 690.687 L1728.58 690.687 L1729.14 690.687 L1729.69 690.687 L1730.25 690.687 L1730.81 690.687 L1731.37 690.687 L1731.93 690.687 L1732.49 690.687 L1733.05 690.687 L1733.61 690.687 L1734.17 690.687 L1734.73 690.687 L1735.29 690.687 L1735.85 690.687 L1736.41 690.687 L1736.97 690.687 L1737.52 690.687 L1738.08 690.687 L1738.64 690.687 L1739.2 690.687 L1739.76 690.687 L1740.32 690.687 L1740.88 690.687 L1741.44 690.687 L1742 690.687 L1742.56 690.687 L1743.12 690.687 L1743.68 690.687 L1744.24 690.687 L1744.79 690.687 L1745.35 690.687 L1745.91 690.687 L1746.47 690.687 L1747.03 690.687 L1747.59 690.687 L1748.15 690.687 L1748.71 690.687 L1749.27 690.687 L1749.83 690.687 L1750.39 690.687 L1750.95 690.687 L1751.51 690.687 L1752.06 690.687 L1752.62 690.687 L1753.18 690.687 L1753.74 690.687 L1754.3 690.687 L1754.86 690.687 L1755.42 690.687 L1755.98 690.687 L1756.54 690.687 L1757.1 690.687 L1757.66 690.687 L1758.22 690.687 L1758.78 690.687 L1759.34 690.687 L1759.89 690.687 L1760.45 690.687 L1761.01 690.687 L1761.57 690.687 L1762.13 690.687 L1762.69 690.687 L1763.25 690.687 L1763.81 690.687 L1764.37 690.687 L1764.93 690.687 L1765.49 690.687 L1766.05 690.687 L1766.61 690.687 L1767.16 690.687 L1767.72 690.687 L1768.28 690.687 L1768.84 690.687 L1769.4 690.687 L1769.96 690.687 L1770.52 690.687 L1771.08 690.687 L1771.64 690.687 L1772.2 690.687 L1772.76 690.687 L1773.32 690.687 L1773.88 690.687 L1774.43 690.687 L1774.99 690.687 L1775.55 690.687 L1776.11 690.687 L1776.67 690.687 L1777.23 690.687 L1777.79 690.687 L1778.35 690.687 L1778.91 690.687 L1779.47 690.687 L1780.03 690.687 L1780.59 690.687 L1781.15 690.687 L1781.71 690.687 L1782.26 690.687 L1782.82 690.687 L1783.38 690.687 L1783.94 690.687 L1784.5 690.687 L1785.06 690.687 L1785.62 690.687 L1786.18 690.687 L1786.74 690.687 L1787.3 690.687 L1787.86 690.687 L1788.42 690.687 L1788.98 690.687 L1789.53 690.687 L1790.09 690.687 L1790.65 690.687 L1791.21 690.687 L1791.77 690.687 L1792.33 690.687 L1792.89 690.687 L1793.45 690.687 L1794.01 690.687 L1794.57 690.687 L1795.13 690.687 L1795.69 690.687 L1796.25 690.687 L1796.8 690.687 L1797.36 690.687 L1797.92 690.687 L1798.48 690.687 L1799.04 690.687 L1799.6 690.687 L1800.16 690.687 L1800.72 690.687 L1801.28 690.687 L1801.84 690.687 L1802.4 690.687 L1802.96 690.687 L1803.52 690.687 L1804.08 690.687 L1804.63 690.687 L1805.19 690.687 L1805.75 690.687 L1806.31 690.687 L1806.87 690.687 L1807.43 690.687 L1807.99 690.687 L1808.55 690.687 L1809.11 690.687 L1809.67 690.687 L1810.23 690.687 L1810.79 690.687 L1811.35 690.687 L1811.9 690.687 L1812.46 690.687 L1813.02 690.687 L1813.58 690.687 L1814.14 690.687 L1814.7 690.687 L1815.26 690.687 L1815.82 690.687 L1816.38 690.687 L1816.94 690.687 L1817.5 690.687 L1818.06 690.687 L1818.62 690.687 L1819.18 690.687 L1819.73 690.687 L1820.29 690.687 L1820.85 690.687 L1821.41 690.687 L1821.97 690.687 L1822.53 690.687 L1823.09 690.687 L1823.65 690.687 L1824.21 690.687 L1824.77 690.687 L1825.33 690.687 L1825.89 690.687 L1826.45 690.687 L1827 690.687 L1827.56 690.687 L1828.12 690.687 L1828.68 690.687 L1829.24 690.687 L1829.8 690.687 L1830.36 690.687 L1830.92 690.687 L1831.48 690.687 L1832.04 690.687 L1832.6 690.687 L1833.16 690.687 L1833.72 690.687 L1834.27 690.687 L1834.83 690.687 L1835.39 690.687 L1835.95 690.687 L1836.51 690.687 L1837.07 690.687 L1837.63 690.687 L1838.19 690.687 L1838.19 682.034 L1837.63 682.034 L1837.07 682.034 L1836.51 682.034 L1835.95 682.034 L1835.39 682.034 L1834.83 682.034 L1834.27 682.034 L1833.72 682.034 L1833.16 682.034 L1832.6 682.034 L1832.04 682.034 L1831.48 682.034 L1830.92 682.034 L1830.36 682.034 L1829.8 682.034 L1829.24 682.034 L1828.68 682.034 L1828.12 682.034 L1827.56 682.034 L1827 682.034 L1826.45 682.034 L1825.89 682.034 L1825.33 682.034 L1824.77 682.034 L1824.21 682.034 L1823.65 682.034 L1823.09 682.034 L1822.53 682.034 L1821.97 682.034 L1821.41 682.034 L1820.85 682.034 L1820.29 682.034 L1819.73 682.034 L1819.18 682.034 L1818.62 682.034 L1818.06 682.034 L1817.5 682.034 L1816.94 682.034 L1816.38 682.034 L1815.82 682.034 L1815.26 682.034 L1814.7 682.034 L1814.14 682.034 L1813.58 682.034 L1813.02 682.034 L1812.46 682.034 L1811.9 682.034 L1811.35 682.034 L1810.79 682.034 L1810.23 682.034 L1809.67 682.034 L1809.11 682.034 L1808.55 682.034 L1807.99 682.034 L1807.43 682.034 L1806.87 682.034 L1806.31 682.034 L1805.75 682.034 L1805.19 682.034 L1804.63 682.034 L1804.08 682.034 L1803.52 682.034 L1802.96 682.034 L1802.4 682.034 L1801.84 682.034 L1801.28 682.034 L1800.72 682.034 L1800.16 682.034 L1799.6 682.034 L1799.04 682.034 L1798.48 682.034 L1797.92 682.034 L1797.36 682.034 L1796.8 682.034 L1796.25 682.034 L1795.69 682.034 L1795.13 682.034 L1794.57 682.034 L1794.01 682.034 L1793.45 682.034 L1792.89 682.034 L1792.33 682.034 L1791.77 682.034 L1791.21 682.034 L1790.65 682.034 L1790.09 682.034 L1789.53 682.034 L1788.98 682.034 L1788.42 682.034 L1787.86 682.034 L1787.3 682.034 L1786.74 682.034 L1786.18 682.034 L1785.62 682.034 L1785.06 682.034 L1784.5 682.034 L1783.94 682.034 L1783.38 682.034 L1782.82 682.034 L1782.26 682.034 L1781.71 682.034 L1781.15 682.034 L1780.59 682.034 L1780.03 682.034 L1779.47 682.034 L1778.91 682.034 L1778.35 682.034 L1777.79 682.034 L1777.23 682.034 L1776.67 682.034 L1776.11 682.034 L1775.55 682.034 L1774.99 682.034 L1774.43 682.034 L1773.88 682.034 L1773.32 682.034 L1772.76 682.034 L1772.2 682.034 L1771.64 682.034 L1771.08 682.034 L1770.52 682.034 L1769.96 682.034 L1769.4 682.034 L1768.84 682.034 L1768.28 682.034 L1767.72 682.034 L1767.16 682.034 L1766.61 682.034 L1766.05 682.034 L1765.49 682.034 L1764.93 682.034 L1764.37 682.034 L1763.81 682.034 L1763.25 682.034 L1762.69 682.034 L1762.13 682.034 L1761.57 682.034 L1761.01 682.034 L1760.45 682.034 L1759.89 682.034 L1759.34 682.034 L1758.78 682.034 L1758.22 682.034 L1757.66 682.034 L1757.1 682.034 L1756.54 682.034 L1755.98 682.034 L1755.42 682.034 L1754.86 682.034 L1754.3 682.034 L1753.74 682.034 L1753.18 682.034 L1752.62 682.034 L1752.06 682.034 L1751.51 682.034 L1750.95 682.034 L1750.39 682.034 L1749.83 682.034 L1749.27 682.034 L1748.71 682.034 L1748.15 682.034 L1747.59 682.034 L1747.03 682.034 L1746.47 682.034 L1745.91 682.034 L1745.35 682.034 L1744.79 682.034 L1744.24 682.034 L1743.68 682.034 L1743.12 682.034 L1742.56 682.034 L1742 682.034 L1741.44 682.034 L1740.88 682.034 L1740.32 682.034 L1739.76 682.034 L1739.2 682.034 L1738.64 682.034 L1738.08 682.034 L1737.52 682.034 L1736.97 682.034 L1736.41 682.034 L1735.85 682.034 L1735.29 682.034 L1734.73 682.034 L1734.17 682.034 L1733.61 682.034 L1733.05 682.034 L1732.49 682.034 L1731.93 682.034 L1731.37 682.034 L1730.81 682.034 L1730.25 682.034 L1729.69 682.034 L1729.14 682.034 L1728.58 682.034 L1728.02 682.034 L1727.46 682.034 L1726.9 682.034 L1726.34 682.034 L1725.78 682.034 L1725.22 682.034 L1724.66 682.034 L1724.1 682.034 L1723.54 682.034 L1722.98 682.034 L1722.42 682.034 L1721.87 682.034 L1721.31 682.034 L1720.75 682.034 L1720.19 682.034 L1719.63 682.034 L1719.07 682.034 L1718.51 682.034 L1717.95 682.034 L1717.39 682.034 L1716.83 682.034 L1716.27 682.034 L1715.71 682.034 L1715.15 682.034 L1714.6 682.034 L1714.04 682.034 L1713.48 682.034 L1712.92 682.034 L1712.36 682.034 L1711.8 682.034 L1711.24 682.034 L1710.68 682.034 L1710.12 682.034 L1709.56 682.034 L1709 682.034 L1708.44 682.034 L1707.88 682.034 L1707.32 682.034 L1706.77 682.034 L1706.21 682.034 L1705.65 682.034 L1705.09 682.034 L1704.53 682.034 L1703.97 682.034 L1703.41 682.034 L1702.85 682.034 L1702.29 682.034 L1701.73 682.034 L1701.17 682.034 L1700.61 682.034 L1700.05 682.034 L1699.5 682.034 L1698.94 682.034 L1698.38 682.034 L1697.82 682.034 L1697.26 682.034 L1696.7 682.034 L1696.14 682.034 L1695.58 682.034 L1695.02 682.034 L1694.46 682.034 L1693.9 682.034 L1693.34 682.034 L1692.78 682.034 L1692.23 682.034 L1691.67 682.034 L1691.11 682.034 L1690.55 682.034 L1689.99 682.034 L1689.43 682.034 L1688.87 682.034 L1688.31 682.034 L1687.75 682.034 L1687.19 682.034 L1686.63 682.034 L1686.07 682.034 L1685.51 682.034 L1684.95 682.034 L1684.4 682.034 L1683.84 682.034 L1683.28 682.034 L1682.72 682.034 L1682.16 682.034 L1681.6 682.034 L1681.04 682.034 L1680.48 682.034 L1679.92 682.034 L1679.36 682.034 L1678.8 682.034 L1678.24 682.034 L1677.68 682.034 L1677.13 682.034 L1676.57 682.034 L1676.01 682.034 L1675.45 682.034 L1674.89 682.034 L1674.33 682.034 L1673.77 682.034 L1673.21 682.034 L1672.65 682.034 L1672.09 682.034 L1671.53 682.034 L1670.97 682.034 L1670.41 682.034 L1669.85 682.034 L1669.3 682.034 L1668.74 682.034 L1668.18 682.034 L1667.62 682.034 L1667.06 682.034 L1666.5 682.034 L1665.94 682.034 L1665.38 682.034 L1664.82 682.034 L1664.26 682.034 L1663.7 682.034 L1663.14 682.034 L1662.58 682.034 L1662.03 682.034 L1661.47 682.034 L1660.91 682.034 L1660.35 682.034 L1659.79 682.034 L1659.23 682.034 L1658.67 682.034 L1658.11 682.034 L1657.55 682.034 L1656.99 682.034 L1656.43 682.034 L1655.87 682.034 L1655.31 682.034 L1654.76 682.034 L1654.2 682.034 L1653.64 682.034 L1653.08 682.034 L1652.52 682.034 L1651.96 682.034 L1651.4 682.034 L1650.84 682.034 L1650.28 682.034 L1649.72 682.034 L1649.16 682.034 L1648.6 682.034 L1648.04 682.034 L1647.48 682.034 L1646.93 682.034 L1646.37 682.034 L1645.81 682.034 L1645.25 682.034 L1644.69 682.034 L1644.13 682.034 L1643.57 682.034 L1643.01 682.034 L1642.45 682.034 L1641.89 682.034 L1641.33 682.034 L1640.77 682.034 L1640.21 682.034 L1639.66 682.034 L1639.1 682.034 L1638.54 682.034 L1637.98 682.034 L1637.42 682.034 L1636.86 682.034 L1636.3 682.034 L1635.74 682.034 L1635.18 682.034 L1634.62 682.034 L1634.06 682.034 L1633.5 682.034 L1632.94 682.034 L1632.39 682.034 L1631.83 682.034 L1631.27 682.034 L1630.71 682.034 L1630.15 682.034 L1629.59 682.034 L1629.03 682.034 L1628.47 682.034 L1627.91 682.034 L1627.35 682.034 L1626.79 682.034 L1626.23 682.034 L1625.67 682.034 L1625.11 682.034 L1624.56 682.034 L1624 682.034 L1623.44 682.034 L1622.88 682.034 L1622.32 682.034 L1621.76 682.034 L1621.2 682.034 L1620.64 682.034 L1620.08 682.034 L1619.52 682.034 L1618.96 682.034 L1618.4 682.034 L1617.84 682.034 L1617.29 682.034 L1616.73 682.034 L1616.17 682.034 L1615.61 682.034 L1615.05 682.034 L1614.49 682.034 L1613.93 682.034 L1613.37 682.034 L1612.81 682.034 L1612.25 682.034 L1611.69 682.034 L1611.13 682.034 L1610.57 682.034 L1610.02 682.034 L1609.46 682.034 L1608.9 682.034 L1608.34 682.034 L1607.78 682.034 L1607.22 682.034 L1606.66 682.034 L1606.1 682.034 L1605.54 682.034 L1604.98 682.034 L1604.42 682.034 L1603.86 682.034 L1603.3 682.034 L1602.74 682.034 L1602.19 682.034 L1601.63 682.034 L1601.07 682.034 L1600.51 682.034 L1599.95 682.034 L1599.39 682.034 L1598.83 682.034 L1598.27 682.034 L1597.71 682.034 L1597.15 682.034 L1596.59 682.034 L1596.03 682.034 L1595.47 682.034 L1594.92 682.034 L1594.36 682.034 L1593.8 682.034 L1593.24 682.034 L1592.68 682.034 L1592.12 682.034 L1591.56 682.034 L1591 682.034 L1590.44 682.034 L1589.88 682.034 L1589.32 682.034 L1588.76 682.034 L1588.2 682.034 L1587.65 682.034 L1587.09 682.034 L1586.53 682.034 L1585.97 682.034 L1585.41 682.034 L1584.85 682.034 L1584.29 682.034 L1583.73 682.034 L1583.17 682.034 L1582.61 682.034 L1582.05 682.034 L1581.49 682.034 L1580.93 682.034 L1580.37 682.034 L1579.82 682.034 L1579.26 682.034 L1578.7 682.034 L1578.14 682.034 L1577.58 682.034 L1577.02 682.034 L1576.46 682.034 L1575.9 682.034 L1575.34 682.034 L1574.78 682.034 L1574.22 682.034 L1573.66 682.034 L1573.1 682.034 L1572.55 682.034 L1571.99 682.034 L1571.43 682.034 L1570.87 682.034 L1570.31 682.034 L1569.75 682.034 L1569.19 682.034 L1568.63 682.034 L1568.07 682.034 L1567.51 682.034 L1566.95 682.034 L1566.39 682.034 L1565.83 682.034 L1565.28 682.034 L1564.72 682.034 L1564.16 682.034 L1563.6 682.034 L1563.04 682.034 L1562.48 682.034 L1561.92 682.034 L1561.36 682.034 L1560.8 682.034 L1560.24 682.034 L1559.68 682.034 L1559.12 682.034 L1558.56 682.034 L1558 682.034 L1557.45 682.034 L1556.89 682.034 L1556.33 682.034 L1555.77 682.034 L1555.21 682.034 L1554.65 682.034 L1554.09 682.034 L1553.53 682.034 L1552.97 682.034 L1552.41 682.034 L1551.85 682.034 L1551.29 682.034 L1550.73 682.034 L1550.18 682.034 L1549.62 682.034 L1549.06 682.034 L1548.5 682.034 L1547.94 682.034 L1547.38 682.034 L1546.82 682.034 L1546.26 682.034 L1545.7 682.034 L1545.14 682.034 L1544.58 682.034 L1544.02 682.034 L1543.46 682.034 L1542.9 682.034 L1542.35 682.034 L1541.79 682.034 L1541.23 682.034 L1540.67 682.034 L1540.11 682.034 L1539.55 682.034 L1538.99 682.034 L1538.43 682.034 L1537.87 682.034 L1537.31 682.034 L1536.75 682.034 L1536.19 682.034 L1535.63 682.034 L1535.08 682.034 L1534.52 682.034 L1533.96 682.034 L1533.4 682.034 L1532.84 682.034 L1532.28 682.034 L1531.72 682.034 L1531.16 682.034 L1530.6 682.034 L1530.04 682.034 L1529.48 682.034 L1528.92 682.034 L1528.36 682.034 L1527.81 682.034 L1527.25 682.034 L1526.69 682.034 L1526.13 682.034 L1525.57 682.034 L1525.01 682.034 L1524.45 682.034 L1523.89 682.034 L1523.33 682.034 L1522.77 682.034 L1522.21 682.034 L1521.65 682.034 L1521.09 682.034 L1520.53 682.034 L1519.98 682.034 L1519.42 682.034 L1518.86 682.034 L1518.3 682.034 L1517.74 682.034 L1517.18 682.034 L1516.62 682.034 L1516.06 682.034 L1515.5 682.034 L1514.94 682.034 L1514.38 682.034 L1513.82 682.034 L1513.26 682.034 L1512.71 682.034 L1512.15 682.034 L1511.59 682.034 L1511.03 682.034 L1510.47 682.034 L1509.91 682.034 L1509.35 682.034 L1508.79 682.034 L1508.23 682.034 L1507.67 682.034 L1507.11 682.034 L1506.55 682.034 L1505.99 682.034 L1505.44 682.034 L1504.88 682.034 L1504.32 682.034 L1503.76 682.034 L1503.2 682.034 L1502.64 682.034 L1502.08 682.034 L1501.52 682.034 L1500.96 682.034 L1500.4 682.034 L1499.84 682.034 L1499.28 682.034 L1498.72 682.034 L1498.16 682.034 L1497.61 682.034 L1497.05 682.034 L1496.49 682.034 L1495.93 682.034 L1495.37 682.034 L1494.81 682.034 L1494.25 682.034 L1493.69 682.034 L1493.13 682.034 L1492.57 682.034 L1492.01 682.034 L1491.45 682.034 L1490.89 682.034 L1490.34 682.034 L1489.78 682.034 L1489.22 682.034 L1488.66 682.034 L1488.1 682.034 L1487.54 682.034 L1486.98 682.034 L1486.42 682.034 L1485.86 682.034 L1485.3 682.034 L1484.74 682.034 L1484.18 682.034 L1483.62 682.034 L1483.07 682.034 L1482.51 682.034 L1481.95 682.034 L1481.39 682.034 L1480.83 682.034 L1480.27 682.034 L1479.71 682.034 L1479.15 682.034 L1478.59 682.034 L1478.03 682.034 L1477.47 682.034 L1476.91 682.034 L1476.35 682.034 L1475.79 682.034 L1475.24 682.034 L1474.68 682.034 L1474.12 682.034 L1473.56 682.034 L1473 682.034 L1472.44 682.034 L1471.88 682.034 L1471.32 682.034 L1470.76 682.034 L1470.2 682.034 L1469.64 682.034 L1469.08 682.034 L1468.52 682.034 L1467.97 682.034 L1467.41 682.034 L1466.85 682.034 L1466.29 682.034 L1465.73 682.034 L1465.17 682.034 L1464.61 682.034 L1464.05 682.034 L1463.49 682.034 L1462.93 682.034 L1462.37 682.034 L1461.81 682.034 L1461.25 682.034 L1460.7 682.034 L1460.14 682.034 L1459.58 682.034 L1459.02 682.034 L1458.46 682.034 L1457.9 682.034 L1457.34 682.034 L1456.78 682.034 L1456.22 682.034 L1455.66 682.034 L1455.1 682.034 L1454.54 682.034 L1453.98 682.034 L1453.42 682.034 L1452.87 682.034 L1452.31 682.034 L1451.75 682.034 L1451.19 682.034 L1450.63 682.034 L1450.07 682.034 L1449.51 682.034 L1448.95 682.034 L1448.39 682.034 L1447.83 682.034 L1447.27 682.034 L1446.71 682.034 L1446.15 682.034 L1445.6 682.034 L1445.04 682.034 L1444.48 682.034 L1443.92 682.034 L1443.36 682.034 L1442.8 682.034 L1442.24 682.034 L1441.68 682.034 L1441.12 682.034 L1440.56 682.034 L1440 682.034 L1439.44 682.034 L1438.88 682.034 L1438.33 682.034 L1437.77 682.034 L1437.21 682.034 L1436.65 682.034 L1436.09 682.034 L1435.53 682.034 L1434.97 682.034 L1434.41 682.034 L1433.85 682.034 L1433.29 682.034 L1432.73 682.034 L1432.17 682.034 L1431.61 682.034 L1431.05 682.034 L1430.5 682.034 L1429.94 682.034 L1429.38 682.034 L1428.82 682.034 L1428.26 682.034 L1427.7 682.034 L1427.14 682.034 L1426.58 682.034 L1426.02 682.034 L1425.46 682.034 L1424.9 682.034 L1424.34 682.034 L1423.78 682.034 L1423.23 682.034 L1422.67 682.034 L1422.11 682.034 L1421.55 682.034 L1420.99 682.034 L1420.43 682.034 L1419.87 682.034 L1419.31 682.034 L1418.75 682.034 L1418.19 682.034 L1417.63 682.034 L1417.07 682.034 L1416.51 682.034 L1415.95 682.034 L1415.4 682.034 L1414.84 682.034 L1414.28 682.034 L1413.72 682.034 L1413.16 682.034 L1412.6 682.034 L1412.04 682.034 L1411.48 682.034 L1410.92 682.034 L1410.36 682.034 L1409.8 682.034 L1409.24 682.034 L1408.68 682.034 L1408.13 682.034 L1407.57 682.034 L1407.01 682.034 L1406.45 682.034 L1405.89 682.034 L1405.33 682.034 L1404.77 682.034 L1404.21 682.034 L1403.65 682.034 L1403.09 682.034 L1402.53 682.034 L1401.97 682.034 L1401.41 682.034 L1400.86 682.034 L1400.3 682.034 L1399.74 682.034 L1399.18 682.034 L1398.62 682.034 L1398.06 682.034 L1397.5 682.034 L1396.94 682.034 L1396.38 682.034 L1395.82 682.034 L1395.26 682.034 L1394.7 682.034 L1394.14 682.034 L1393.58 682.034 L1393.03 682.034 L1392.47 682.034 L1391.91 682.034 L1391.35 682.034 L1390.79 682.034 L1390.23 682.034 L1389.67 682.034 L1389.11 682.034 L1388.55 682.034 L1387.99 682.034 L1387.43 682.034 L1386.87 682.034 L1386.31 682.034 L1385.76 682.034 L1385.2 682.034 L1384.64 682.034 L1384.08 682.034 L1383.52 682.034 L1382.96 682.034 L1382.4 682.034 L1381.84 682.034 L1381.28 682.034 L1380.72 682.034 L1380.16 682.034 L1379.6 682.034 L1379.04 682.034 L1378.49 682.034 L1377.93 682.034 L1377.37 682.034 L1376.81 682.034 L1376.25 682.034 L1375.69 682.034 L1375.13 682.034 L1374.57 682.034 L1374.01 682.034 L1373.45 682.034 L1372.89 682.034 L1372.33 682.034 L1371.77 682.034 L1371.21 682.034 L1370.66 682.034 L1370.1 682.034 L1369.54 682.034 L1368.98 682.034 L1368.42 682.034 L1367.86 682.034 L1367.3 682.034 L1366.74 682.034 L1366.18 682.034 L1365.62 682.034 L1365.06 682.034 L1364.5 682.034 L1363.94 682.034 L1363.39 682.034 L1362.83 682.034 L1362.27 682.034 L1361.71 682.034 L1361.15 682.034 L1360.59 682.034 L1360.03 682.034 L1359.47 682.034 L1358.91 682.034 L1358.35 682.034 L1357.79 682.034 L1357.23 682.034 L1356.67 682.034 L1356.12 682.034 L1355.56 682.034 L1355 682.034 L1354.44 682.034 L1353.88 682.034 L1353.32 682.034 L1352.76 682.034 L1352.2 682.034 L1351.64 682.034 L1351.08 682.034 L1350.52 682.034 L1349.96 682.034 L1349.4 682.034 L1348.84 682.034 L1348.29 682.034 L1347.73 682.034 L1347.17 682.034 L1346.61 682.034 L1346.05 682.034 L1345.49 682.034 L1344.93 682.034 L1344.37 682.034 L1343.81 682.034 L1343.25 682.034 L1342.69 682.034 L1342.13 682.034 L1341.57 682.034 L1341.02 682.034 L1340.46 682.034 L1339.9 682.034 L1339.34 682.034 L1338.78 682.034 L1338.22 682.034 L1337.66 682.034 L1337.1 682.034 L1336.54 682.034 L1335.98 682.034 L1335.42 682.034 L1334.86 682.034 L1334.3 682.034 L1333.75 682.034 L1333.19 682.034 L1332.63 682.034 L1332.07 682.034 L1331.51 682.034 L1330.95 682.034 L1330.39 682.034 L1329.83 682.034 L1329.27 682.034 L1328.71 682.034 L1328.15 682.034 L1327.59 682.034 L1327.03 682.034 L1326.47 682.034 L1325.92 682.034 L1325.36 682.034 L1324.8 682.034 L1324.24 682.034 L1323.68 682.034 L1323.12 682.034 L1322.56 682.034 L1322 682.034 L1321.44 682.034 L1320.88 682.034 L1320.32 682.034 L1319.76 682.034 L1319.2 682.034 L1318.65 682.034 L1318.09 682.034 L1317.53 682.034 L1316.97 682.034 L1316.41 682.034 L1315.85 682.034 L1315.29 682.034 L1314.73 682.034 L1314.17 682.034 L1313.61 682.034 L1313.05 682.034 L1312.49 682.034 L1311.93 682.034 L1311.38 682.034 L1310.82 682.034 L1310.26 682.034 L1309.7 682.034 L1309.14 682.034 L1308.58 682.034 L1308.02 682.034 L1307.46 682.034 L1306.9 682.034 L1306.34 682.034 L1305.78 682.034 L1305.22 682.034 L1304.66 682.034 L1304.1 682.034 L1303.55 682.034 L1302.99 682.034 L1302.43 682.034 L1301.87 682.034 L1301.31 682.034 L1300.75 682.034 L1300.19 682.034 L1299.63 682.034 L1299.07 682.034 L1298.51 682.034 L1297.95 682.034 L1297.39 682.034 L1296.83 682.034 L1296.28 682.034 L1295.72 682.034 L1295.16 682.034 L1294.6 682.034 L1294.04 682.034 L1293.48 682.034 L1292.92 682.034 L1292.36 682.034 L1291.8 682.034 L1291.24 682.034 L1290.68 682.034 L1290.12 682.034 L1289.56 682.034 L1289 682.034 L1288.45 682.034 L1287.89 682.034 L1287.33 682.034 L1286.77 682.034 L1286.21 682.034 L1285.65 682.034 L1285.09 682.034 L1284.53 682.034 L1283.97 682.034 L1283.41 682.034 L1282.85 682.034 L1282.29 682.034 L1281.73 682.034 L1281.18 682.034 L1280.62 682.034 L1280.06 682.034 L1279.5 682.034 L1278.94 682.034 L1278.38 682.034 L1277.82 682.034 L1277.26 682.034 L1276.7 682.034 L1276.14 682.034 L1275.58 682.034 L1275.02 682.034 L1274.46 682.034 L1273.91 682.034 L1273.35 682.034 L1272.79 682.034 L1272.23 682.034 L1271.67 682.034 L1271.11 682.034 L1270.55 682.034 L1269.99 682.034 L1269.43 682.034 L1268.87 682.034 L1268.31 682.034 L1267.75 682.034 L1267.19 682.034 L1266.63 682.034 L1266.08 682.034 L1265.52 682.034 L1264.96 682.034 L1264.4 682.034 L1263.84 682.034 L1263.28 682.034 L1262.72 682.034 L1262.16 682.034 L1261.6 682.034 L1261.04 682.034 L1260.48 682.034 L1259.92 682.034 L1259.36 682.034 L1258.81 682.034 L1258.25 682.034 L1257.69 682.034 L1257.13 682.034 L1256.57 682.034 L1256.01 682.034 L1255.45 682.034 L1254.89 682.034 L1254.33 682.034 L1253.77 682.034 L1253.21 682.034 L1252.65 682.034 L1252.09 682.034 L1251.54 682.034 L1250.98 682.034 L1250.42 682.034 L1249.86 682.034 L1249.3 682.034 L1248.74 682.034 L1248.18 682.034 L1247.62 682.034 L1247.06 682.034 L1246.5 682.034 L1245.94 682.034 L1245.38 682.034 L1244.82 682.034 L1244.26 682.034 L1243.71 682.034 L1243.15 682.034 L1242.59 682.034 L1242.03 682.034 L1241.47 682.034 L1240.91 682.034 L1240.35 682.034 L1239.79 682.034 L1239.23 682.034 L1238.67 682.034 L1238.11 682.034 L1237.55 682.034 L1236.99 682.034 L1236.44 682.034 L1235.88 682.034 L1235.32 682.034 L1234.76 682.034 L1234.2 682.034 L1233.64 682.034 L1233.08 682.034 L1232.52 682.034 L1231.96 682.034 L1231.4 682.034 L1230.84 682.034 L1230.28 682.034 L1229.72 682.034 L1229.17 682.034 L1228.61 682.034 L1228.05 682.034 L1227.49 682.034 L1226.93 682.034 L1226.37 682.034 L1225.81 682.034 L1225.25 682.034 L1224.69 682.034 L1224.13 682.034 L1223.57 682.034 L1223.01 682.034 L1222.45 682.034 L1221.89 682.034 L1221.34 682.034 L1220.78 682.034 L1220.22 682.034 L1219.66 682.034 L1219.1 682.034 L1218.54 682.034 L1217.98 682.034 L1217.42 682.034 L1216.86 682.034 L1216.3 682.034 L1215.74 682.034 L1215.18 682.034 L1214.62 682.034 L1214.07 682.034 L1213.51 682.034 L1212.95 682.034 L1212.39 682.034 L1211.83 682.034 L1211.27 682.034 L1210.71 682.034 L1210.15 682.034 L1209.59 682.034 L1209.03 682.034 L1208.47 682.034 L1207.91 682.034 L1207.35 682.034 L1206.8 682.034 L1206.24 682.034 L1205.68 682.034 L1205.12 682.034 L1204.56 682.034 L1204 682.034 L1203.44 682.034 L1202.88 682.034 L1202.32 682.034 L1201.76 682.034 L1201.2 682.034 L1200.64 682.034 L1200.08 682.034 L1199.52 682.034 L1198.97 682.034 L1198.41 682.034 L1197.85 682.034 L1197.29 682.034 L1196.73 682.034 L1196.17 682.034 L1195.61 682.034 L1195.05 682.034 L1194.49 682.034 L1193.93 682.034 L1193.37 682.034 L1192.81 682.034 L1192.25 682.034 L1191.7 682.034 L1191.14 682.034 L1190.58 682.034 L1190.02 682.034 L1189.46 682.034 L1188.9 682.034 L1188.34 682.034 L1187.78 682.034 L1187.22 682.034 L1186.66 682.034 L1186.1 682.034 L1185.54 682.034 L1184.98 682.034 L1184.43 682.034 L1183.87 682.034 L1183.31 682.034 L1182.75 682.034 L1182.19 682.034 L1181.63 682.034 L1181.07 682.034 L1180.51 682.034 L1179.95 682.034 L1179.39 682.034 L1178.83 682.034 L1178.27 682.034 L1177.71 682.034 L1177.15 682.034 L1176.6 682.034 L1176.04 682.034 L1175.48 682.034 L1174.92 682.034 L1174.36 682.034 L1173.8 682.034 L1173.24 682.034 L1172.68 682.034 L1172.12 682.034 L1171.56 682.034 L1171 682.034 L1170.44 682.034 L1169.88 682.034 L1169.33 682.034 L1168.77 682.034 L1168.21 682.034 L1167.65 682.034 L1167.09 682.034 L1166.53 682.034 L1165.97 682.034 L1165.41 682.034 L1164.85 682.034 L1164.29 682.034 L1163.73 682.034 L1163.17 682.034 L1162.61 682.034 L1162.05 682.034 L1161.5 682.034 L1160.94 682.034 L1160.38 682.034 L1159.82 682.034 L1159.26 682.034 L1158.7 682.034 L1158.14 682.034 L1157.58 682.034 L1157.02 682.034 L1156.46 682.034 L1155.9 682.034 L1155.34 682.034 L1154.78 682.034 L1154.23 682.034 L1153.67 682.034 L1153.11 682.034 L1152.55 682.034 L1151.99 682.034 L1151.43 682.034 L1150.87 682.034 L1150.31 682.034 L1149.75 682.034 L1149.19 682.034 L1148.63 682.034 L1148.07 682.034 L1147.51 682.034 L1146.96 682.034 L1146.4 682.034 L1145.84 682.034 L1145.28 682.034 L1144.72 682.034 L1144.16 682.034 L1143.6 682.034 L1143.04 682.034 L1142.48 682.034 L1141.92 682.034 L1141.36 682.034 L1140.8 682.034 L1140.24 682.034 L1139.68 682.034 L1139.13 682.034 L1138.57 682.034 L1138.01 682.034 L1137.45 682.034 L1136.89 682.034 L1136.33 682.034 L1135.77 682.034 L1135.21 682.034 L1134.65 682.034 L1134.09 682.034 L1133.53 682.034 L1132.97 682.034 L1132.41 682.034 L1131.86 682.034 L1131.3 682.034 L1130.74 682.034 L1130.18 682.034 L1129.62 682.034 L1129.06 682.034 L1128.5 682.034 L1127.94 682.034 L1127.38 682.034 L1126.82 682.034 L1126.26 682.034 L1125.7 682.034 L1125.14 682.034 L1124.59 682.034 L1124.03 682.034 L1123.47 682.034 L1122.91 682.034 L1122.35 682.034 L1121.79 682.034 L1121.23 682.034 L1120.67 682.034 L1120.11 682.034 L1119.55 682.034 L1118.99 682.034 L1118.43 682.034 L1117.87 682.034 L1117.31 682.034 L1116.76 682.034 L1116.2 682.034 L1115.64 682.034 L1115.08 682.034 L1114.52 682.034 L1113.96 682.034 L1113.4 682.034 L1112.84 682.034 L1112.28 682.034 L1111.72 682.034 L1111.16 682.034 L1110.6 682.034 L1110.04 682.034 L1109.49 682.034 L1108.93 682.034 L1108.37 682.034 L1107.81 682.034 L1107.25 682.034 L1106.69 682.034 L1106.13 682.034 L1105.57 682.034 L1105.01 682.034 L1104.45 682.034 L1103.89 682.034 L1103.33 682.034 L1102.77 682.034 L1102.22 682.034 L1101.66 682.034 L1101.1 682.034 L1100.54 682.034 L1099.98 682.034 L1099.42 682.034 L1098.86 682.034 L1098.3 682.034 L1097.74 682.034 L1097.18 682.034 L1096.62 682.034 L1096.06 682.034 L1095.5 682.034 L1094.94 682.034 L1094.39 682.034 L1093.83 682.034 L1093.27 682.034 L1092.71 682.034 L1092.15 682.034 L1091.59 682.034 L1091.03 682.034 L1090.47 682.034 L1089.91 682.034 L1089.35 682.034 L1088.79 682.034 L1088.23 682.034 L1087.67 682.034 L1087.12 682.034 L1086.56 682.034 L1086 682.034 L1085.44 682.034 L1084.88 682.034 L1084.32 682.034 L1083.76 682.034 L1083.2 682.034 L1082.64 682.034 L1082.08 682.034 L1081.52 682.034 L1080.96 682.034 L1080.4 682.034 L1079.85 682.034 L1079.29 682.034 L1078.73 682.034 L1078.17 682.034 L1077.61 682.034 L1077.05 682.034 L1076.49 682.034 L1075.93 682.034 L1075.37 682.034 L1074.81 682.034 L1074.25 682.034 L1073.69 682.034 L1073.13 682.034 L1072.57 682.034 L1072.02 682.034 L1071.46 682.034 L1070.9 682.034 L1070.34 682.034 L1069.78 682.034 L1069.22 682.034 L1068.66 682.034 L1068.1 682.034 L1067.54 682.034 L1066.98 682.034 L1066.42 682.034 L1065.86 682.034 L1065.3 682.034 L1064.75 682.034 L1064.19 682.034 L1063.63 682.034 L1063.07 682.034 L1062.51 682.034 L1061.95 682.034 L1061.39 682.034 L1060.83 682.034 L1060.27 682.034 L1059.71 682.034 L1059.15 682.034 L1058.59 682.034 L1058.03 682.034 L1057.48 682.034 L1056.92 682.034 L1056.36 682.034 L1055.8 682.034 L1055.24 682.034 L1054.68 682.034 L1054.12 682.034 L1053.56 682.034 L1053 682.034 L1052.44 682.034 L1051.88 682.034 L1051.32 682.034 L1050.76 682.034 L1050.2 682.034 L1049.65 682.034 L1049.09 682.034 L1048.53 682.034 L1047.97 682.034 L1047.41 682.034 L1046.85 682.034 L1046.29 682.034 L1045.73 682.034 L1045.17 682.034 L1044.61 682.034 L1044.05 682.034 L1043.49 682.034 L1042.93 682.034 L1042.38 682.034 L1041.82 682.034 L1041.26 682.034 L1040.7 682.034 L1040.14 682.034 L1039.58 682.034 L1039.02 682.034 L1038.46 682.034 L1037.9 682.034 L1037.34 682.034 L1036.78 682.034 L1036.22 682.034 L1035.66 682.034 L1035.1 682.034 L1034.55 682.034 L1033.99 682.034 L1033.43 682.034 L1032.87 682.034 L1032.31 682.034 L1031.75 682.034 L1031.19 682.034 L1030.63 682.034 L1030.07 682.034 L1029.51 682.034 L1028.95 682.034 L1028.39 682.034 L1027.83 682.034 L1027.28 682.034 L1026.72 682.034 L1026.16 682.034 L1025.6 682.034 L1025.04 682.034 L1024.48 682.034 L1023.92 682.034 L1023.36 682.034 L1022.8 682.034 L1022.24 682.034 L1021.68 682.034 L1021.12 682.034 L1020.56 682.034 L1020.01 682.034 L1019.45 682.034 L1018.89 682.034 L1018.33 682.034 L1017.77 682.034 L1017.21 682.034 L1016.65 682.034 L1016.09 682.034 L1015.53 682.034 L1014.97 682.034 L1014.41 682.034 L1013.85 682.034 L1013.29 682.034 L1012.73 682.034 L1012.18 682.034 L1011.62 682.034 L1011.06 682.034 L1010.5 682.034 L1009.94 682.034 L1009.38 682.034 L1008.82 682.034 L1008.26 682.034 L1007.7 682.034 L1007.14 682.034 L1006.58 682.034 L1006.02 682.034 L1005.46 682.034 L1004.91 682.034 L1004.35 682.034 L1003.79 682.034 L1003.23 682.034 L1002.67 682.034 L1002.11 682.034 L1001.55 682.034 L1000.99 682.034 L1000.43 682.034 L999.872 682.034 L999.313 682.034 L998.754 682.034 L998.194 682.034 L997.635 682.034 L997.076 682.034 L996.517 682.034 L995.957 682.034 L995.398 682.034 L994.839 682.034 L994.28 682.034 L993.72 682.034 L993.161 682.034 L992.602 682.034 L992.043 682.034 L991.483 682.034 L990.924 682.034 L990.365 682.034 L989.806 682.034 L989.246 682.034 L988.687 682.034 L988.128 682.034 L987.569 682.034 L987.009 682.034 L986.45 682.034 L985.891 682.034 L985.332 682.034 L984.772 682.034 L984.213 682.034 L983.654 682.034 L983.095 682.034 L982.535 682.034 L981.976 682.034 L981.417 682.034 L980.858 682.034 L980.298 682.034 L979.739 682.034 L979.18 682.034 L978.621 682.034 L978.061 682.034 L977.502 682.034 L976.943 682.034 L976.384 682.034 L975.824 682.034 L975.265 682.034 L974.706 682.034 L974.147 682.034 L973.587 682.034 L973.028 682.034 L972.469 682.034 L971.91 682.034 L971.35 682.034 L970.791 682.034 L970.232 682.034 L969.673 682.034 L969.113 682.034 L968.554 682.034 L967.995 682.034 L967.436 682.034 L966.876 682.034 L966.317 682.034 L965.758 682.034 L965.199 682.034 L964.639 682.034 L964.08 682.034 L963.521 682.034 L962.962 682.034 L962.402 682.034 L961.843 682.034 L961.284 682.034 L960.725 682.034 L960.165 682.034 L959.606 682.034 L959.047 682.034 L958.488 682.034 L957.928 682.034 L957.369 682.034 L956.81 682.034 L956.251 682.034 L955.691 682.034 L955.132 682.034 L954.573 682.034 L954.014 682.034 L953.454 682.034 L952.895 682.034 L952.336 682.034 L951.777 682.034 L951.217 682.034 L950.658 682.034 L950.099 682.034 L949.54 682.034 L948.98 682.034 L948.421 682.034 L947.862 682.034 L947.303 682.034 L946.743 682.034 L946.184 682.034 L945.625 682.034 L945.066 682.034 L944.506 682.034 L943.947 682.034 L943.388 682.034 L942.829 682.034 L942.269 682.034 L941.71 682.034 L941.151 682.034 L940.592 682.034 L940.032 682.034 L939.473 682.034 L938.914 682.034 L938.355 682.034 L937.795 682.034 L937.236 682.034 L936.677 682.034 L936.118 682.034 L935.558 682.034 L934.999 682.034 L934.44 682.034 L933.881 682.034 L933.321 682.034 L932.762 682.034 L932.203 682.034 L931.644 682.034 L931.084 682.034 L930.525 682.034 L929.966 682.034 L929.406 682.034 L928.847 682.034 L928.288 682.034 L927.729 682.034 L927.169 682.034 L926.61 682.034 L926.051 682.034 L925.492 682.034 L924.932 682.034 L924.373 682.034 L923.814 682.034 L923.255 682.034 L922.695 682.034 L922.136 682.034 L921.577 682.034 L921.018 682.034 L920.458 682.034 L919.899 682.034 L919.34 682.034 L918.781 682.034 L918.221 682.034 L917.662 682.034 L917.103 682.034 L916.544 682.034 L915.984 682.034 L915.425 682.034 L914.866 682.034 L914.307 682.034 L913.747 682.034 L913.188 682.034 L912.629 682.034 L912.07 682.034 L911.51 682.034 L910.951 682.034 L910.392 682.034 L909.833 682.034 L909.273 682.034 L908.714 682.034 L908.155 682.034 L907.596 682.034 L907.036 682.034 L906.477 682.034 L905.918 682.034 L905.359 682.034 L904.799 682.034 L904.24 682.034 L903.681 682.034 L903.122 682.034 L902.562 682.034 L902.003 682.034 L901.444 682.034 L900.885 682.034 L900.325 682.034 L899.766 682.034 L899.207 682.034 L898.648 682.034 L898.088 682.034 L897.529 682.034 L896.97 682.034 L896.411 682.034 L895.851 682.034 L895.292 682.034 L894.733 682.034 L894.174 682.034 L893.614 682.034 L893.055 682.034 L892.496 682.034 L891.937 682.034 L891.377 682.034 L890.818 682.034 L890.259 682.034 L889.7 682.034 L889.14 682.034 L888.581 682.034 L888.022 682.034 L887.463 682.034 L886.903 682.034 L886.344 682.034 L885.785 682.034 L885.226 682.034 L884.666 682.034 L884.107 682.034 L883.548 682.034 L882.989 682.034 L882.429 682.034 L881.87 682.034 L881.311 682.034 L880.752 682.034 L880.192 682.034 L879.633 682.034 L879.074 682.034 L878.515 682.034 L877.955 682.034 L877.396 682.034 L876.837 682.034 L876.278 682.034 L875.718 682.034 L875.159 682.034 L874.6 682.034 L874.041 682.034 L873.481 682.034 L872.922 682.034 L872.363 682.034 L871.804 682.034 L871.244 682.034 L870.685 682.034 L870.126 682.034 L869.567 682.034 L869.007 682.034 L868.448 682.034 L867.889 682.034 L867.33 682.034 L866.77 682.034 L866.211 682.034 L865.652 682.034 L865.093 682.034 L864.533 682.034 L863.974 682.034 L863.415 682.034 L862.856 682.034 L862.296 682.034 L861.737 682.034 L861.178 682.034 L860.619 682.034 L860.059 682.034 L859.5 682.034 L858.941 682.034 L858.382 682.034 L857.822 682.034 L857.263 682.034 L856.704 682.034 L856.145 682.034 L855.585 682.034 L855.026 682.034 L854.467 682.034 L853.908 682.034 L853.348 682.034 L852.789 682.034 L852.23 682.034 L851.671 682.034 L851.111 682.034 L850.552 682.034 L849.993 682.034 L849.434 682.034 L848.874 682.034 L848.315 682.034 L847.756 682.034 L847.197 682.034 L846.637 682.034 L846.078 682.034 L845.519 682.034 L844.96 682.034 L844.4 682.034 L843.841 682.034 L843.282 682.034 L842.723 682.034 L842.163 682.034 L841.604 682.034 L841.045 682.034 L840.486 682.034 L839.926 682.034 L839.367 682.034 L838.808 682.034 L838.249 682.034 L837.689 682.034 L837.13 682.034 L836.571 682.034 L836.012 682.034 L835.452 682.034 L834.893 682.034 L834.334 682.034 L833.775 682.034 L833.215 682.034 L832.656 682.034 L832.097 682.034 L831.538 682.034 L830.978 682.034 L830.419 682.034 L829.86 682.034 L829.301 682.034 L828.741 682.034 L828.182 682.034 L827.623 682.034 L827.064 682.034 L826.504 682.034 L825.945 682.034 L825.386 682.034 L824.827 682.034 L824.267 682.034 L823.708 682.034 L823.149 682.034 L822.59 682.034 L822.03 682.034 L821.471 682.034 L820.912 682.034 L820.353 682.034 L819.793 682.034 L819.234 682.034 L818.675 682.034 L818.116 682.034 L817.556 682.034 L816.997 682.034 L816.438 682.034 L815.879 682.034 L815.319 682.034 L814.76 682.034 L814.201 682.034 L813.642 682.034 L813.082 682.034 L812.523 682.034 L811.964 682.034 L811.405 682.034 L810.845 682.034 L810.286 682.034 L809.727 682.034 L809.168 682.034 L808.608 682.034 L808.049 682.034 L807.49 682.034 L806.931 682.034 L806.371 682.034 L805.812 682.034 L805.253 682.034 L804.693 682.034 L804.134 682.034 L803.575 682.034 L803.016 682.034 L802.456 682.034 L801.897 682.034 L801.338 682.034 L800.779 682.034 L800.219 682.034 L799.66 682.034 L799.101 682.034 L798.542 682.034 L797.982 682.034 L797.423 682.034 L796.864 682.034 L796.305 682.034 L795.745 682.034 L795.186 682.034 L794.627 682.034 L794.068 682.034 L793.508 682.034 L792.949 682.034 L792.39 682.034 L791.831 682.034 L791.271 682.034 L790.712 682.034 L790.153 682.034 L789.594 682.034 L789.034 682.034 L788.475 682.034 L787.916 682.034 L787.357 682.034 L786.797 682.034 L786.238 682.034 L785.679 682.034 L785.12 682.034 L784.56 682.034 L784.001 682.034 L783.442 682.034 L782.883 682.034 L782.323 682.034 L781.764 682.034 L781.205 682.034 L780.646 682.034 L780.086 682.034 L779.527 682.034 L778.968 682.034 L778.409 682.034 L777.849 682.034 L777.29 682.034 L776.731 682.034 L776.172 682.034 L775.612 682.034 L775.053 682.034 L774.494 682.034 L773.935 682.034 L773.375 682.034 L772.816 682.034 L772.257 682.034 L771.698 682.034 L771.138 682.034 L770.579 682.034 L770.02 682.034 L769.461 682.034 L768.901 682.034 L768.342 682.034 L767.783 682.034 L767.224 682.034 L766.664 682.034 L766.105 682.034 L765.546 682.034 L764.987 682.034 L764.427 682.034 L763.868 682.034 L763.309 682.034 L762.75 682.034 L762.19 682.034 L761.631 682.034 L761.072 682.034 L760.513 682.034 L759.953 682.034 L759.394 682.034 L758.835 682.034 L758.276 682.034 L757.716 682.034 L757.157 682.034 L756.598 682.034 L756.039 682.034 L755.479 682.034 L754.92 682.034 L754.361 682.034 L753.802 682.034 L753.242 682.034 L752.683 682.034 L752.124 682.034 L751.565 682.034 L751.005 682.034 L750.446 682.034 L749.887 682.034 L749.328 682.034 L748.768 682.034 L748.209 682.034 L747.65 682.034 L747.091 682.034 L746.531 682.034 L745.972 682.034 L745.413 682.034 L744.854 682.034 L744.294 682.034 L743.735 682.034 L743.176 682.034 L742.617 682.034 L742.057 682.034 L741.498 682.034 L740.939 682.034 L740.38 682.034 L739.82 682.034 L739.261 682.034 L738.702 682.034 L738.143 682.034 L737.583 682.034 L737.024 682.034 L736.465 682.034 L735.906 682.034 L735.346 682.034 L734.787 682.034 L734.228 682.034 L733.669 682.034 L733.109 682.034 L732.55 682.034 L731.991 682.034 L731.432 682.034 L730.872 682.034 L730.313 682.034 L729.754 682.034 L729.195 682.034 L728.635 682.034 L728.076 682.034 L727.517 682.034 L726.958 682.034 L726.398 682.034 L725.839 682.034 L725.28 682.034 L724.721 682.034 L724.161 682.034 L723.602 682.034 L723.043 682.034 L722.484 682.034 L721.924 682.034 L721.365 682.034 L720.806 682.034 L720.247 682.034  Z\" fill=\"#e26f46\" fill-rule=\"evenodd\" fill-opacity=\"0.5\"/>\n<polyline clip-path=\"url(#clip483)\" style=\"stroke:#e26f46; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"720.247,686.361 720.806,686.361 721.365,686.361 721.924,686.361 722.484,686.361 723.043,686.361 723.602,686.361 724.161,686.361 724.721,686.361 725.28,686.361 725.839,686.361 726.398,686.361 726.958,686.361 727.517,686.361 728.076,686.361 728.635,686.361 729.195,686.361 729.754,686.361 730.313,686.361 730.872,686.361 731.432,686.361 731.991,686.361 732.55,686.361 733.109,686.361 733.669,686.361 734.228,686.361 734.787,686.361 735.346,686.361 735.906,686.361 736.465,686.361 737.024,686.361 737.583,686.361 738.143,686.361 738.702,686.361 739.261,686.361 739.82,686.361 740.38,686.361 740.939,686.361 741.498,686.361 742.057,686.361 742.617,686.361 743.176,686.361 743.735,686.361 744.294,686.361 744.854,686.361 745.413,686.361 745.972,686.361 746.531,686.361 747.091,686.361 747.65,686.361 748.209,686.361 748.768,686.361 749.328,686.361 749.887,686.361 750.446,686.361 751.005,686.361 751.565,686.361 752.124,686.361 752.683,686.361 753.242,686.361 753.802,686.361 754.361,686.361 754.92,686.361 755.479,686.361 756.039,686.361 756.598,686.361 757.157,686.361 757.716,686.361 758.276,686.361 758.835,686.361 759.394,686.361 759.953,686.361 760.513,686.361 761.072,686.361 761.631,686.361 762.19,686.361 762.75,686.361 763.309,686.361 763.868,686.361 764.427,686.361 764.987,686.361 765.546,686.361 766.105,686.361 766.664,686.361 767.224,686.361 767.783,686.361 768.342,686.361 768.901,686.361 769.461,686.361 770.02,686.361 770.579,686.361 771.138,686.361 771.698,686.361 772.257,686.361 772.816,686.361 773.375,686.361 773.935,686.361 774.494,686.361 775.053,686.361 775.612,686.361 776.172,686.361 776.731,686.361 777.29,686.361 777.849,686.361 778.409,686.361 778.968,686.361 779.527,686.361 780.086,686.361 780.646,686.361 781.205,686.361 781.764,686.361 782.323,686.361 782.883,686.361 783.442,686.361 784.001,686.361 784.56,686.361 785.12,686.361 785.679,686.361 786.238,686.361 786.797,686.361 787.357,686.361 787.916,686.361 788.475,686.361 789.034,686.361 789.594,686.361 790.153,686.361 790.712,686.361 791.271,686.361 791.831,686.361 792.39,686.361 792.949,686.361 793.508,686.361 794.068,686.361 794.627,686.361 795.186,686.361 795.745,686.361 796.305,686.361 796.864,686.361 797.423,686.361 797.982,686.361 798.542,686.361 799.101,686.361 799.66,686.361 800.219,686.361 800.779,686.361 801.338,686.361 801.897,686.361 802.456,686.361 803.016,686.361 803.575,686.361 804.134,686.361 804.693,686.361 805.253,686.361 805.812,686.361 806.371,686.361 806.931,686.361 807.49,686.361 808.049,686.361 808.608,686.361 809.168,686.361 809.727,686.361 810.286,686.361 810.845,686.361 811.405,686.361 811.964,686.361 812.523,686.361 813.082,686.361 813.642,686.361 814.201,686.361 814.76,686.361 815.319,686.361 815.879,686.361 816.438,686.361 816.997,686.361 817.556,686.361 818.116,686.361 818.675,686.361 819.234,686.361 819.793,686.361 820.353,686.361 820.912,686.361 821.471,686.361 822.03,686.361 822.59,686.361 823.149,686.361 823.708,686.361 824.267,686.361 824.827,686.361 825.386,686.361 825.945,686.361 826.504,686.361 827.064,686.361 827.623,686.361 828.182,686.361 828.741,686.361 829.301,686.361 829.86,686.361 830.419,686.361 830.978,686.361 831.538,686.361 832.097,686.361 832.656,686.361 833.215,686.361 833.775,686.361 834.334,686.361 834.893,686.361 835.452,686.361 836.012,686.361 836.571,686.361 837.13,686.361 837.689,686.361 838.249,686.361 838.808,686.361 839.367,686.361 839.926,686.361 840.486,686.361 841.045,686.361 841.604,686.361 842.163,686.361 842.723,686.361 843.282,686.361 843.841,686.361 844.4,686.361 844.96,686.361 845.519,686.361 846.078,686.361 846.637,686.361 847.197,686.361 847.756,686.361 848.315,686.361 848.874,686.361 849.434,686.361 849.993,686.361 850.552,686.361 851.111,686.361 851.671,686.361 852.23,686.361 852.789,686.361 853.348,686.361 853.908,686.361 854.467,686.361 855.026,686.361 855.585,686.361 856.145,686.361 856.704,686.361 857.263,686.361 857.822,686.361 858.382,686.361 858.941,686.361 859.5,686.361 860.059,686.361 860.619,686.361 861.178,686.361 861.737,686.361 862.296,686.361 862.856,686.361 863.415,686.361 863.974,686.361 864.533,686.361 865.093,686.361 865.652,686.361 866.211,686.361 866.77,686.361 867.33,686.361 867.889,686.361 868.448,686.361 869.007,686.361 869.567,686.361 870.126,686.361 870.685,686.361 871.244,686.361 871.804,686.361 872.363,686.361 872.922,686.361 873.481,686.361 874.041,686.361 874.6,686.361 875.159,686.361 875.718,686.361 876.278,686.361 876.837,686.361 877.396,686.361 877.955,686.361 878.515,686.361 879.074,686.361 879.633,686.361 880.192,686.361 880.752,686.361 881.311,686.361 881.87,686.361 882.429,686.361 882.989,686.361 883.548,686.361 884.107,686.361 884.666,686.361 885.226,686.361 885.785,686.361 886.344,686.361 886.903,686.361 887.463,686.361 888.022,686.361 888.581,686.361 889.14,686.361 889.7,686.361 890.259,686.361 890.818,686.361 891.377,686.361 891.937,686.361 892.496,686.361 893.055,686.361 893.614,686.361 894.174,686.361 894.733,686.361 895.292,686.361 895.851,686.361 896.411,686.361 896.97,686.361 897.529,686.361 898.088,686.361 898.648,686.361 899.207,686.361 899.766,686.361 900.325,686.361 900.885,686.361 901.444,686.361 902.003,686.361 902.562,686.361 903.122,686.361 903.681,686.361 904.24,686.361 904.799,686.361 905.359,686.361 905.918,686.361 906.477,686.361 907.036,686.361 907.596,686.361 908.155,686.361 908.714,686.361 909.273,686.361 909.833,686.361 910.392,686.361 910.951,686.361 911.51,686.361 912.07,686.361 912.629,686.361 913.188,686.361 913.747,686.361 914.307,686.361 914.866,686.361 915.425,686.361 915.984,686.361 916.544,686.361 917.103,686.361 917.662,686.361 918.221,686.361 918.781,686.361 919.34,686.361 919.899,686.361 920.458,686.361 921.018,686.361 921.577,686.361 922.136,686.361 922.695,686.361 923.255,686.361 923.814,686.361 924.373,686.361 924.932,686.361 925.492,686.361 926.051,686.361 926.61,686.361 927.169,686.361 927.729,686.361 928.288,686.361 928.847,686.361 929.406,686.361 929.966,686.361 930.525,686.361 931.084,686.361 931.644,686.361 932.203,686.361 932.762,686.361 933.321,686.361 933.881,686.361 934.44,686.361 934.999,686.361 935.558,686.361 936.118,686.361 936.677,686.361 937.236,686.361 937.795,686.361 938.355,686.361 938.914,686.361 939.473,686.361 940.032,686.361 940.592,686.361 941.151,686.361 941.71,686.361 942.269,686.361 942.829,686.361 943.388,686.361 943.947,686.361 944.506,686.361 945.066,686.361 945.625,686.361 946.184,686.361 946.743,686.361 947.303,686.361 947.862,686.361 948.421,686.361 948.98,686.361 949.54,686.361 950.099,686.361 950.658,686.361 951.217,686.361 951.777,686.361 952.336,686.361 952.895,686.361 953.454,686.361 954.014,686.361 954.573,686.361 955.132,686.361 955.691,686.361 956.251,686.361 956.81,686.361 957.369,686.361 957.928,686.361 958.488,686.361 959.047,686.361 959.606,686.361 960.165,686.361 960.725,686.361 961.284,686.361 961.843,686.361 962.402,686.361 962.962,686.361 963.521,686.361 964.08,686.361 964.639,686.361 965.199,686.361 965.758,686.361 966.317,686.361 966.876,686.361 967.436,686.361 967.995,686.361 968.554,686.361 969.113,686.361 969.673,686.361 970.232,686.361 970.791,686.361 971.35,686.361 971.91,686.361 972.469,686.361 973.028,686.361 973.587,686.361 974.147,686.361 974.706,686.361 975.265,686.361 975.824,686.361 976.384,686.361 976.943,686.361 977.502,686.361 978.061,686.361 978.621,686.361 979.18,686.361 979.739,686.361 980.298,686.361 980.858,686.361 981.417,686.361 981.976,686.361 982.535,686.361 983.095,686.361 983.654,686.361 984.213,686.361 984.772,686.361 985.332,686.361 985.891,686.361 986.45,686.361 987.009,686.361 987.569,686.361 988.128,686.361 988.687,686.361 989.246,686.361 989.806,686.361 990.365,686.361 990.924,686.361 991.483,686.361 992.043,686.361 992.602,686.361 993.161,686.361 993.72,686.361 994.28,686.361 994.839,686.361 995.398,686.361 995.957,686.361 996.517,686.361 997.076,686.361 997.635,686.361 998.194,686.361 998.754,686.361 999.313,686.361 999.872,686.361 1000.43,686.361 1000.99,686.361 1001.55,686.361 1002.11,686.361 1002.67,686.361 1003.23,686.361 1003.79,686.361 1004.35,686.361 1004.91,686.361 1005.46,686.361 1006.02,686.361 1006.58,686.361 1007.14,686.361 1007.7,686.361 1008.26,686.361 1008.82,686.361 1009.38,686.361 1009.94,686.361 1010.5,686.361 1011.06,686.361 1011.62,686.361 1012.18,686.361 1012.73,686.361 1013.29,686.361 1013.85,686.361 1014.41,686.361 1014.97,686.361 1015.53,686.361 1016.09,686.361 1016.65,686.361 1017.21,686.361 1017.77,686.361 1018.33,686.361 1018.89,686.361 1019.45,686.361 1020.01,686.361 1020.56,686.361 1021.12,686.361 1021.68,686.361 1022.24,686.361 1022.8,686.361 1023.36,686.361 1023.92,686.361 1024.48,686.361 1025.04,686.361 1025.6,686.361 1026.16,686.361 1026.72,686.361 1027.28,686.361 1027.83,686.361 1028.39,686.361 1028.95,686.361 1029.51,686.361 1030.07,686.361 1030.63,686.361 1031.19,686.361 1031.75,686.361 1032.31,686.361 1032.87,686.361 1033.43,686.361 1033.99,686.361 1034.55,686.361 1035.1,686.361 1035.66,686.361 1036.22,686.361 1036.78,686.361 1037.34,686.361 1037.9,686.361 1038.46,686.361 1039.02,686.361 1039.58,686.361 1040.14,686.361 1040.7,686.361 1041.26,686.361 1041.82,686.361 1042.38,686.361 1042.93,686.361 1043.49,686.361 1044.05,686.361 1044.61,686.361 1045.17,686.361 1045.73,686.361 1046.29,686.361 1046.85,686.361 1047.41,686.361 1047.97,686.361 1048.53,686.361 1049.09,686.361 1049.65,686.361 1050.2,686.361 1050.76,686.361 1051.32,686.361 1051.88,686.361 1052.44,686.361 1053,686.361 1053.56,686.361 1054.12,686.361 1054.68,686.361 1055.24,686.361 1055.8,686.361 1056.36,686.361 1056.92,686.361 1057.48,686.361 1058.03,686.361 1058.59,686.361 1059.15,686.361 1059.71,686.361 1060.27,686.361 1060.83,686.361 1061.39,686.361 1061.95,686.361 1062.51,686.361 1063.07,686.361 1063.63,686.361 1064.19,686.361 1064.75,686.361 1065.3,686.361 1065.86,686.361 1066.42,686.361 1066.98,686.361 1067.54,686.361 1068.1,686.361 1068.66,686.361 1069.22,686.361 1069.78,686.361 1070.34,686.361 1070.9,686.361 1071.46,686.361 1072.02,686.361 1072.57,686.361 1073.13,686.361 1073.69,686.361 1074.25,686.361 1074.81,686.361 1075.37,686.361 1075.93,686.361 1076.49,686.361 1077.05,686.361 1077.61,686.361 1078.17,686.361 1078.73,686.361 1079.29,686.361 1079.85,686.361 1080.4,686.361 1080.96,686.361 1081.52,686.361 1082.08,686.361 1082.64,686.361 1083.2,686.361 1083.76,686.361 1084.32,686.361 1084.88,686.361 1085.44,686.361 1086,686.361 1086.56,686.361 1087.12,686.361 1087.67,686.361 1088.23,686.361 1088.79,686.361 1089.35,686.361 1089.91,686.361 1090.47,686.361 1091.03,686.361 1091.59,686.361 1092.15,686.361 1092.71,686.361 1093.27,686.361 1093.83,686.361 1094.39,686.361 1094.94,686.361 1095.5,686.361 1096.06,686.361 1096.62,686.361 1097.18,686.361 1097.74,686.361 1098.3,686.361 1098.86,686.361 1099.42,686.361 1099.98,686.361 1100.54,686.361 1101.1,686.361 1101.66,686.361 1102.22,686.361 1102.77,686.361 1103.33,686.361 1103.89,686.361 1104.45,686.361 1105.01,686.361 1105.57,686.361 1106.13,686.361 1106.69,686.361 1107.25,686.361 1107.81,686.361 1108.37,686.361 1108.93,686.361 1109.49,686.361 1110.04,686.361 1110.6,686.361 1111.16,686.361 1111.72,686.361 1112.28,686.361 1112.84,686.361 1113.4,686.361 1113.96,686.361 1114.52,686.361 1115.08,686.361 1115.64,686.361 1116.2,686.361 1116.76,686.361 1117.31,686.361 1117.87,686.361 1118.43,686.361 1118.99,686.361 1119.55,686.361 1120.11,686.361 1120.67,686.361 1121.23,686.361 1121.79,686.361 1122.35,686.361 1122.91,686.361 1123.47,686.361 1124.03,686.361 1124.59,686.361 1125.14,686.361 1125.7,686.361 1126.26,686.361 1126.82,686.361 1127.38,686.361 1127.94,686.361 1128.5,686.361 1129.06,686.361 1129.62,686.361 1130.18,686.361 1130.74,686.361 1131.3,686.361 1131.86,686.361 1132.41,686.361 1132.97,686.361 1133.53,686.361 1134.09,686.361 1134.65,686.361 1135.21,686.361 1135.77,686.361 1136.33,686.361 1136.89,686.361 1137.45,686.361 1138.01,686.361 1138.57,686.361 1139.13,686.361 1139.68,686.361 1140.24,686.361 1140.8,686.361 1141.36,686.361 1141.92,686.361 1142.48,686.361 1143.04,686.361 1143.6,686.361 1144.16,686.361 1144.72,686.361 1145.28,686.361 1145.84,686.361 1146.4,686.361 1146.96,686.361 1147.51,686.361 1148.07,686.361 1148.63,686.361 1149.19,686.361 1149.75,686.361 1150.31,686.361 1150.87,686.361 1151.43,686.361 1151.99,686.361 1152.55,686.361 1153.11,686.361 1153.67,686.361 1154.23,686.361 1154.78,686.361 1155.34,686.361 1155.9,686.361 1156.46,686.361 1157.02,686.361 1157.58,686.361 1158.14,686.361 1158.7,686.361 1159.26,686.361 1159.82,686.361 1160.38,686.361 1160.94,686.361 1161.5,686.361 1162.05,686.361 1162.61,686.361 1163.17,686.361 1163.73,686.361 1164.29,686.361 1164.85,686.361 1165.41,686.361 1165.97,686.361 1166.53,686.361 1167.09,686.361 1167.65,686.361 1168.21,686.361 1168.77,686.361 1169.33,686.361 1169.88,686.361 1170.44,686.361 1171,686.361 1171.56,686.361 1172.12,686.361 1172.68,686.361 1173.24,686.361 1173.8,686.361 1174.36,686.361 1174.92,686.361 1175.48,686.361 1176.04,686.361 1176.6,686.361 1177.15,686.361 1177.71,686.361 1178.27,686.361 1178.83,686.361 1179.39,686.361 1179.95,686.361 1180.51,686.361 1181.07,686.361 1181.63,686.361 1182.19,686.361 1182.75,686.361 1183.31,686.361 1183.87,686.361 1184.43,686.361 1184.98,686.361 1185.54,686.361 1186.1,686.361 1186.66,686.361 1187.22,686.361 1187.78,686.361 1188.34,686.361 1188.9,686.361 1189.46,686.361 1190.02,686.361 1190.58,686.361 1191.14,686.361 1191.7,686.361 1192.25,686.361 1192.81,686.361 1193.37,686.361 1193.93,686.361 1194.49,686.361 1195.05,686.361 1195.61,686.361 1196.17,686.361 1196.73,686.361 1197.29,686.361 1197.85,686.361 1198.41,686.361 1198.97,686.361 1199.52,686.361 1200.08,686.361 1200.64,686.361 1201.2,686.361 1201.76,686.361 1202.32,686.361 1202.88,686.361 1203.44,686.361 1204,686.361 1204.56,686.361 1205.12,686.361 1205.68,686.361 1206.24,686.361 1206.8,686.361 1207.35,686.361 1207.91,686.361 1208.47,686.361 1209.03,686.361 1209.59,686.361 1210.15,686.361 1210.71,686.361 1211.27,686.361 1211.83,686.361 1212.39,686.361 1212.95,686.361 1213.51,686.361 1214.07,686.361 1214.62,686.361 1215.18,686.361 1215.74,686.361 1216.3,686.361 1216.86,686.361 1217.42,686.361 1217.98,686.361 1218.54,686.361 1219.1,686.361 1219.66,686.361 1220.22,686.361 1220.78,686.361 1221.34,686.361 1221.89,686.361 1222.45,686.361 1223.01,686.361 1223.57,686.361 1224.13,686.361 1224.69,686.361 1225.25,686.361 1225.81,686.361 1226.37,686.361 1226.93,686.361 1227.49,686.361 1228.05,686.361 1228.61,686.361 1229.17,686.361 1229.72,686.361 1230.28,686.361 1230.84,686.361 1231.4,686.361 1231.96,686.361 1232.52,686.361 1233.08,686.361 1233.64,686.361 1234.2,686.361 1234.76,686.361 1235.32,686.361 1235.88,686.361 1236.44,686.361 1236.99,686.361 1237.55,686.361 1238.11,686.361 1238.67,686.361 1239.23,686.361 1239.79,686.361 1240.35,686.361 1240.91,686.361 1241.47,686.361 1242.03,686.361 1242.59,686.361 1243.15,686.361 1243.71,686.361 1244.26,686.361 1244.82,686.361 1245.38,686.361 1245.94,686.361 1246.5,686.361 1247.06,686.361 1247.62,686.361 1248.18,686.361 1248.74,686.361 1249.3,686.361 1249.86,686.361 1250.42,686.361 1250.98,686.361 1251.54,686.361 1252.09,686.361 1252.65,686.361 1253.21,686.361 1253.77,686.361 1254.33,686.361 1254.89,686.361 1255.45,686.361 1256.01,686.361 1256.57,686.361 1257.13,686.361 1257.69,686.361 1258.25,686.361 1258.81,686.361 1259.36,686.361 1259.92,686.361 1260.48,686.361 1261.04,686.361 1261.6,686.361 1262.16,686.361 1262.72,686.361 1263.28,686.361 1263.84,686.361 1264.4,686.361 1264.96,686.361 1265.52,686.361 1266.08,686.361 1266.63,686.361 1267.19,686.361 1267.75,686.361 1268.31,686.361 1268.87,686.361 1269.43,686.361 1269.99,686.361 1270.55,686.361 1271.11,686.361 1271.67,686.361 1272.23,686.361 1272.79,686.361 1273.35,686.361 1273.91,686.361 1274.46,686.361 1275.02,686.361 1275.58,686.361 1276.14,686.361 1276.7,686.361 1277.26,686.361 1277.82,686.361 1278.38,686.361 1278.94,686.361 1279.5,686.361 1280.06,686.361 1280.62,686.361 1281.18,686.361 1281.73,686.361 1282.29,686.361 1282.85,686.361 1283.41,686.361 1283.97,686.361 1284.53,686.361 1285.09,686.361 1285.65,686.361 1286.21,686.361 1286.77,686.361 1287.33,686.361 1287.89,686.361 1288.45,686.361 1289,686.361 1289.56,686.361 1290.12,686.361 1290.68,686.361 1291.24,686.361 1291.8,686.361 1292.36,686.361 1292.92,686.361 1293.48,686.361 1294.04,686.361 1294.6,686.361 1295.16,686.361 1295.72,686.361 1296.28,686.361 1296.83,686.361 1297.39,686.361 1297.95,686.361 1298.51,686.361 1299.07,686.361 1299.63,686.361 1300.19,686.361 1300.75,686.361 1301.31,686.361 1301.87,686.361 1302.43,686.361 1302.99,686.361 1303.55,686.361 1304.1,686.361 1304.66,686.361 1305.22,686.361 1305.78,686.361 1306.34,686.361 1306.9,686.361 1307.46,686.361 1308.02,686.361 1308.58,686.361 1309.14,686.361 1309.7,686.361 1310.26,686.361 1310.82,686.361 1311.38,686.361 1311.93,686.361 1312.49,686.361 1313.05,686.361 1313.61,686.361 1314.17,686.361 1314.73,686.361 1315.29,686.361 1315.85,686.361 1316.41,686.361 1316.97,686.361 1317.53,686.361 1318.09,686.361 1318.65,686.361 1319.2,686.361 1319.76,686.361 1320.32,686.361 1320.88,686.361 1321.44,686.361 1322,686.361 1322.56,686.361 1323.12,686.361 1323.68,686.361 1324.24,686.361 1324.8,686.361 1325.36,686.361 1325.92,686.361 1326.47,686.361 1327.03,686.361 1327.59,686.361 1328.15,686.361 1328.71,686.361 1329.27,686.361 1329.83,686.361 1330.39,686.361 1330.95,686.361 1331.51,686.361 1332.07,686.361 1332.63,686.361 1333.19,686.361 1333.75,686.361 1334.3,686.361 1334.86,686.361 1335.42,686.361 1335.98,686.361 1336.54,686.361 1337.1,686.361 1337.66,686.361 1338.22,686.361 1338.78,686.361 1339.34,686.361 1339.9,686.361 1340.46,686.361 1341.02,686.361 1341.57,686.361 1342.13,686.361 1342.69,686.361 1343.25,686.361 1343.81,686.361 1344.37,686.361 1344.93,686.361 1345.49,686.361 1346.05,686.361 1346.61,686.361 1347.17,686.361 1347.73,686.361 1348.29,686.361 1348.84,686.361 1349.4,686.361 1349.96,686.361 1350.52,686.361 1351.08,686.361 1351.64,686.361 1352.2,686.361 1352.76,686.361 1353.32,686.361 1353.88,686.361 1354.44,686.361 1355,686.361 1355.56,686.361 1356.12,686.361 1356.67,686.361 1357.23,686.361 1357.79,686.361 1358.35,686.361 1358.91,686.361 1359.47,686.361 1360.03,686.361 1360.59,686.361 1361.15,686.361 1361.71,686.361 1362.27,686.361 1362.83,686.361 1363.39,686.361 1363.94,686.361 1364.5,686.361 1365.06,686.361 1365.62,686.361 1366.18,686.361 1366.74,686.361 1367.3,686.361 1367.86,686.361 1368.42,686.361 1368.98,686.361 1369.54,686.361 1370.1,686.361 1370.66,686.361 1371.21,686.361 1371.77,686.361 1372.33,686.361 1372.89,686.361 1373.45,686.361 1374.01,686.361 1374.57,686.361 1375.13,686.361 1375.69,686.361 1376.25,686.361 1376.81,686.361 1377.37,686.361 1377.93,686.361 1378.49,686.361 1379.04,686.361 1379.6,686.361 1380.16,686.361 1380.72,686.361 1381.28,686.361 1381.84,686.361 1382.4,686.361 1382.96,686.361 1383.52,686.361 1384.08,686.361 1384.64,686.361 1385.2,686.361 1385.76,686.361 1386.31,686.361 1386.87,686.361 1387.43,686.361 1387.99,686.361 1388.55,686.361 1389.11,686.361 1389.67,686.361 1390.23,686.361 1390.79,686.361 1391.35,686.361 1391.91,686.361 1392.47,686.361 1393.03,686.361 1393.58,686.361 1394.14,686.361 1394.7,686.361 1395.26,686.361 1395.82,686.361 1396.38,686.361 1396.94,686.361 1397.5,686.361 1398.06,686.361 1398.62,686.361 1399.18,686.361 1399.74,686.361 1400.3,686.361 1400.86,686.361 1401.41,686.361 1401.97,686.361 1402.53,686.361 1403.09,686.361 1403.65,686.361 1404.21,686.361 1404.77,686.361 1405.33,686.361 1405.89,686.361 1406.45,686.361 1407.01,686.361 1407.57,686.361 1408.13,686.361 1408.68,686.361 1409.24,686.361 1409.8,686.361 1410.36,686.361 1410.92,686.361 1411.48,686.361 1412.04,686.361 1412.6,686.361 1413.16,686.361 1413.72,686.361 1414.28,686.361 1414.84,686.361 1415.4,686.361 1415.95,686.361 1416.51,686.361 1417.07,686.361 1417.63,686.361 1418.19,686.361 1418.75,686.361 1419.31,686.361 1419.87,686.361 1420.43,686.361 1420.99,686.361 1421.55,686.361 1422.11,686.361 1422.67,686.361 1423.23,686.361 1423.78,686.361 1424.34,686.361 1424.9,686.361 1425.46,686.361 1426.02,686.361 1426.58,686.361 1427.14,686.361 1427.7,686.361 1428.26,686.361 1428.82,686.361 1429.38,686.361 1429.94,686.361 1430.5,686.361 1431.05,686.361 1431.61,686.361 1432.17,686.361 1432.73,686.361 1433.29,686.361 1433.85,686.361 1434.41,686.361 1434.97,686.361 1435.53,686.361 1436.09,686.361 1436.65,686.361 1437.21,686.361 1437.77,686.361 1438.33,686.361 1438.88,686.361 1439.44,686.361 1440,686.361 1440.56,686.361 1441.12,686.361 1441.68,686.361 1442.24,686.361 1442.8,686.361 1443.36,686.361 1443.92,686.361 1444.48,686.361 1445.04,686.361 1445.6,686.361 1446.15,686.361 1446.71,686.361 1447.27,686.361 1447.83,686.361 1448.39,686.361 1448.95,686.361 1449.51,686.361 1450.07,686.361 1450.63,686.361 1451.19,686.361 1451.75,686.361 1452.31,686.361 1452.87,686.361 1453.42,686.361 1453.98,686.361 1454.54,686.361 1455.1,686.361 1455.66,686.361 1456.22,686.361 1456.78,686.361 1457.34,686.361 1457.9,686.361 1458.46,686.361 1459.02,686.361 1459.58,686.361 1460.14,686.361 1460.7,686.361 1461.25,686.361 1461.81,686.361 1462.37,686.361 1462.93,686.361 1463.49,686.361 1464.05,686.361 1464.61,686.361 1465.17,686.361 1465.73,686.361 1466.29,686.361 1466.85,686.361 1467.41,686.361 1467.97,686.361 1468.52,686.361 1469.08,686.361 1469.64,686.361 1470.2,686.361 1470.76,686.361 1471.32,686.361 1471.88,686.361 1472.44,686.361 1473,686.361 1473.56,686.361 1474.12,686.361 1474.68,686.361 1475.24,686.361 1475.79,686.361 1476.35,686.361 1476.91,686.361 1477.47,686.361 1478.03,686.361 1478.59,686.361 1479.15,686.361 1479.71,686.361 1480.27,686.361 1480.83,686.361 1481.39,686.361 1481.95,686.361 1482.51,686.361 1483.07,686.361 1483.62,686.361 1484.18,686.361 1484.74,686.361 1485.3,686.361 1485.86,686.361 1486.42,686.361 1486.98,686.361 1487.54,686.361 1488.1,686.361 1488.66,686.361 1489.22,686.361 1489.78,686.361 1490.34,686.361 1490.89,686.361 1491.45,686.361 1492.01,686.361 1492.57,686.361 1493.13,686.361 1493.69,686.361 1494.25,686.361 1494.81,686.361 1495.37,686.361 1495.93,686.361 1496.49,686.361 1497.05,686.361 1497.61,686.361 1498.16,686.361 1498.72,686.361 1499.28,686.361 1499.84,686.361 1500.4,686.361 1500.96,686.361 1501.52,686.361 1502.08,686.361 1502.64,686.361 1503.2,686.361 1503.76,686.361 1504.32,686.361 1504.88,686.361 1505.44,686.361 1505.99,686.361 1506.55,686.361 1507.11,686.361 1507.67,686.361 1508.23,686.361 1508.79,686.361 1509.35,686.361 1509.91,686.361 1510.47,686.361 1511.03,686.361 1511.59,686.361 1512.15,686.361 1512.71,686.361 1513.26,686.361 1513.82,686.361 1514.38,686.361 1514.94,686.361 1515.5,686.361 1516.06,686.361 1516.62,686.361 1517.18,686.361 1517.74,686.361 1518.3,686.361 1518.86,686.361 1519.42,686.361 1519.98,686.361 1520.53,686.361 1521.09,686.361 1521.65,686.361 1522.21,686.361 1522.77,686.361 1523.33,686.361 1523.89,686.361 1524.45,686.361 1525.01,686.361 1525.57,686.361 1526.13,686.361 1526.69,686.361 1527.25,686.361 1527.81,686.361 1528.36,686.361 1528.92,686.361 1529.48,686.361 1530.04,686.361 1530.6,686.361 1531.16,686.361 1531.72,686.361 1532.28,686.361 1532.84,686.361 1533.4,686.361 1533.96,686.361 1534.52,686.361 1535.08,686.361 1535.63,686.361 1536.19,686.361 1536.75,686.361 1537.31,686.361 1537.87,686.361 1538.43,686.361 1538.99,686.361 1539.55,686.361 1540.11,686.361 1540.67,686.361 1541.23,686.361 1541.79,686.361 1542.35,686.361 1542.9,686.361 1543.46,686.361 1544.02,686.361 1544.58,686.361 1545.14,686.361 1545.7,686.361 1546.26,686.361 1546.82,686.361 1547.38,686.361 1547.94,686.361 1548.5,686.361 1549.06,686.361 1549.62,686.361 1550.18,686.361 1550.73,686.361 1551.29,686.361 1551.85,686.361 1552.41,686.361 1552.97,686.361 1553.53,686.361 1554.09,686.361 1554.65,686.361 1555.21,686.361 1555.77,686.361 1556.33,686.361 1556.89,686.361 1557.45,686.361 1558,686.361 1558.56,686.361 1559.12,686.361 1559.68,686.361 1560.24,686.361 1560.8,686.361 1561.36,686.361 1561.92,686.361 1562.48,686.361 1563.04,686.361 1563.6,686.361 1564.16,686.361 1564.72,686.361 1565.28,686.361 1565.83,686.361 1566.39,686.361 1566.95,686.361 1567.51,686.361 1568.07,686.361 1568.63,686.361 1569.19,686.361 1569.75,686.361 1570.31,686.361 1570.87,686.361 1571.43,686.361 1571.99,686.361 1572.55,686.361 1573.1,686.361 1573.66,686.361 1574.22,686.361 1574.78,686.361 1575.34,686.361 1575.9,686.361 1576.46,686.361 1577.02,686.361 1577.58,686.361 1578.14,686.361 1578.7,686.361 1579.26,686.361 1579.82,686.361 1580.37,686.361 1580.93,686.361 1581.49,686.361 1582.05,686.361 1582.61,686.361 1583.17,686.361 1583.73,686.361 1584.29,686.361 1584.85,686.361 1585.41,686.361 1585.97,686.361 1586.53,686.361 1587.09,686.361 1587.65,686.361 1588.2,686.361 1588.76,686.361 1589.32,686.361 1589.88,686.361 1590.44,686.361 1591,686.361 1591.56,686.361 1592.12,686.361 1592.68,686.361 1593.24,686.361 1593.8,686.361 1594.36,686.361 1594.92,686.361 1595.47,686.361 1596.03,686.361 1596.59,686.361 1597.15,686.361 1597.71,686.361 1598.27,686.361 1598.83,686.361 1599.39,686.361 1599.95,686.361 1600.51,686.361 1601.07,686.361 1601.63,686.361 1602.19,686.361 1602.74,686.361 1603.3,686.361 1603.86,686.361 1604.42,686.361 1604.98,686.361 1605.54,686.361 1606.1,686.361 1606.66,686.361 1607.22,686.361 1607.78,686.361 1608.34,686.361 1608.9,686.361 1609.46,686.361 1610.02,686.361 1610.57,686.361 1611.13,686.361 1611.69,686.361 1612.25,686.361 1612.81,686.361 1613.37,686.361 1613.93,686.361 1614.49,686.361 1615.05,686.361 1615.61,686.361 1616.17,686.361 1616.73,686.361 1617.29,686.361 1617.84,686.361 1618.4,686.361 1618.96,686.361 1619.52,686.361 1620.08,686.361 1620.64,686.361 1621.2,686.361 1621.76,686.361 1622.32,686.361 1622.88,686.361 1623.44,686.361 1624,686.361 1624.56,686.361 1625.11,686.361 1625.67,686.361 1626.23,686.361 1626.79,686.361 1627.35,686.361 1627.91,686.361 1628.47,686.361 1629.03,686.361 1629.59,686.361 1630.15,686.361 1630.71,686.361 1631.27,686.361 1631.83,686.361 1632.39,686.361 1632.94,686.361 1633.5,686.361 1634.06,686.361 1634.62,686.361 1635.18,686.361 1635.74,686.361 1636.3,686.361 1636.86,686.361 1637.42,686.361 1637.98,686.361 1638.54,686.361 1639.1,686.361 1639.66,686.361 1640.21,686.361 1640.77,686.361 1641.33,686.361 1641.89,686.361 1642.45,686.361 1643.01,686.361 1643.57,686.361 1644.13,686.361 1644.69,686.361 1645.25,686.361 1645.81,686.361 1646.37,686.361 1646.93,686.361 1647.48,686.361 1648.04,686.361 1648.6,686.361 1649.16,686.361 1649.72,686.361 1650.28,686.361 1650.84,686.361 1651.4,686.361 1651.96,686.361 1652.52,686.361 1653.08,686.361 1653.64,686.361 1654.2,686.361 1654.76,686.361 1655.31,686.361 1655.87,686.361 1656.43,686.361 1656.99,686.361 1657.55,686.361 1658.11,686.361 1658.67,686.361 1659.23,686.361 1659.79,686.361 1660.35,686.361 1660.91,686.361 1661.47,686.361 1662.03,686.361 1662.58,686.361 1663.14,686.361 1663.7,686.361 1664.26,686.361 1664.82,686.361 1665.38,686.361 1665.94,686.361 1666.5,686.361 1667.06,686.361 1667.62,686.361 1668.18,686.361 1668.74,686.361 1669.3,686.361 1669.85,686.361 1670.41,686.361 1670.97,686.361 1671.53,686.361 1672.09,686.361 1672.65,686.361 1673.21,686.361 1673.77,686.361 1674.33,686.361 1674.89,686.361 1675.45,686.361 1676.01,686.361 1676.57,686.361 1677.13,686.361 1677.68,686.361 1678.24,686.361 1678.8,686.361 1679.36,686.361 1679.92,686.361 1680.48,686.361 1681.04,686.361 1681.6,686.361 1682.16,686.361 1682.72,686.361 1683.28,686.361 1683.84,686.361 1684.4,686.361 1684.95,686.361 1685.51,686.361 1686.07,686.361 1686.63,686.361 1687.19,686.361 1687.75,686.361 1688.31,686.361 1688.87,686.361 1689.43,686.361 1689.99,686.361 1690.55,686.361 1691.11,686.361 1691.67,686.361 1692.23,686.361 1692.78,686.361 1693.34,686.361 1693.9,686.361 1694.46,686.361 1695.02,686.361 1695.58,686.361 1696.14,686.361 1696.7,686.361 1697.26,686.361 1697.82,686.361 1698.38,686.361 1698.94,686.361 1699.5,686.361 1700.05,686.361 1700.61,686.361 1701.17,686.361 1701.73,686.361 1702.29,686.361 1702.85,686.361 1703.41,686.361 1703.97,686.361 1704.53,686.361 1705.09,686.361 1705.65,686.361 1706.21,686.361 1706.77,686.361 1707.32,686.361 1707.88,686.361 1708.44,686.361 1709,686.361 1709.56,686.361 1710.12,686.361 1710.68,686.361 1711.24,686.361 1711.8,686.361 1712.36,686.361 1712.92,686.361 1713.48,686.361 1714.04,686.361 1714.6,686.361 1715.15,686.361 1715.71,686.361 1716.27,686.361 1716.83,686.361 1717.39,686.361 1717.95,686.361 1718.51,686.361 1719.07,686.361 1719.63,686.361 1720.19,686.361 1720.75,686.361 1721.31,686.361 1721.87,686.361 1722.42,686.361 1722.98,686.361 1723.54,686.361 1724.1,686.361 1724.66,686.361 1725.22,686.361 1725.78,686.361 1726.34,686.361 1726.9,686.361 1727.46,686.361 1728.02,686.361 1728.58,686.361 1729.14,686.361 1729.69,686.361 1730.25,686.361 1730.81,686.361 1731.37,686.361 1731.93,686.361 1732.49,686.361 1733.05,686.361 1733.61,686.361 1734.17,686.361 1734.73,686.361 1735.29,686.361 1735.85,686.361 1736.41,686.361 1736.97,686.361 1737.52,686.361 1738.08,686.361 1738.64,686.361 1739.2,686.361 1739.76,686.361 1740.32,686.361 1740.88,686.361 1741.44,686.361 1742,686.361 1742.56,686.361 1743.12,686.361 1743.68,686.361 1744.24,686.361 1744.79,686.361 1745.35,686.361 1745.91,686.361 1746.47,686.361 1747.03,686.361 1747.59,686.361 1748.15,686.361 1748.71,686.361 1749.27,686.361 1749.83,686.361 1750.39,686.361 1750.95,686.361 1751.51,686.361 1752.06,686.361 1752.62,686.361 1753.18,686.361 1753.74,686.361 1754.3,686.361 1754.86,686.361 1755.42,686.361 1755.98,686.361 1756.54,686.361 1757.1,686.361 1757.66,686.361 1758.22,686.361 1758.78,686.361 1759.34,686.361 1759.89,686.361 1760.45,686.361 1761.01,686.361 1761.57,686.361 1762.13,686.361 1762.69,686.361 1763.25,686.361 1763.81,686.361 1764.37,686.361 1764.93,686.361 1765.49,686.361 1766.05,686.361 1766.61,686.361 1767.16,686.361 1767.72,686.361 1768.28,686.361 1768.84,686.361 1769.4,686.361 1769.96,686.361 1770.52,686.361 1771.08,686.361 1771.64,686.361 1772.2,686.361 1772.76,686.361 1773.32,686.361 1773.88,686.361 1774.43,686.361 1774.99,686.361 1775.55,686.361 1776.11,686.361 1776.67,686.361 1777.23,686.361 1777.79,686.361 1778.35,686.361 1778.91,686.361 1779.47,686.361 1780.03,686.361 1780.59,686.361 1781.15,686.361 1781.71,686.361 1782.26,686.361 1782.82,686.361 1783.38,686.361 1783.94,686.361 1784.5,686.361 1785.06,686.361 1785.62,686.361 1786.18,686.361 1786.74,686.361 1787.3,686.361 1787.86,686.361 1788.42,686.361 1788.98,686.361 1789.53,686.361 1790.09,686.361 1790.65,686.361 1791.21,686.361 1791.77,686.361 1792.33,686.361 1792.89,686.361 1793.45,686.361 1794.01,686.361 1794.57,686.361 1795.13,686.361 1795.69,686.361 1796.25,686.361 1796.8,686.361 1797.36,686.361 1797.92,686.361 1798.48,686.361 1799.04,686.361 1799.6,686.361 1800.16,686.361 1800.72,686.361 1801.28,686.361 1801.84,686.361 1802.4,686.361 1802.96,686.361 1803.52,686.361 1804.08,686.361 1804.63,686.361 1805.19,686.361 1805.75,686.361 1806.31,686.361 1806.87,686.361 1807.43,686.361 1807.99,686.361 1808.55,686.361 1809.11,686.361 1809.67,686.361 1810.23,686.361 1810.79,686.361 1811.35,686.361 1811.9,686.361 1812.46,686.361 1813.02,686.361 1813.58,686.361 1814.14,686.361 1814.7,686.361 1815.26,686.361 1815.82,686.361 1816.38,686.361 1816.94,686.361 1817.5,686.361 1818.06,686.361 1818.62,686.361 1819.18,686.361 1819.73,686.361 1820.29,686.361 1820.85,686.361 1821.41,686.361 1821.97,686.361 1822.53,686.361 1823.09,686.361 1823.65,686.361 1824.21,686.361 1824.77,686.361 1825.33,686.361 1825.89,686.361 1826.45,686.361 1827,686.361 1827.56,686.361 1828.12,686.361 1828.68,686.361 1829.24,686.361 1829.8,686.361 1830.36,686.361 1830.92,686.361 1831.48,686.361 1832.04,686.361 1832.6,686.361 1833.16,686.361 1833.72,686.361 1834.27,686.361 1834.83,686.361 1835.39,686.361 1835.95,686.361 1836.51,686.361 1837.07,686.361 1837.63,686.361 1838.19,686.361 \"/>\n<path clip-path=\"url(#clip483)\" d=\"M720.247 684.096 L720.806 684.096 L721.365 684.096 L721.924 684.096 L722.484 684.096 L723.043 684.096 L723.602 684.096 L724.161 684.096 L724.721 684.096 L725.28 684.096 L725.839 684.096 L726.398 684.096 L726.958 684.096 L727.517 684.096 L728.076 684.096 L728.635 684.096 L729.195 684.096 L729.754 684.096 L730.313 684.096 L730.872 684.096 L731.432 684.096 L731.991 684.096 L732.55 684.096 L733.109 684.096 L733.669 684.096 L734.228 684.096 L734.787 684.096 L735.346 684.096 L735.906 684.096 L736.465 684.096 L737.024 684.096 L737.583 684.096 L738.143 684.096 L738.702 684.096 L739.261 684.096 L739.82 684.096 L740.38 684.096 L740.939 684.096 L741.498 684.096 L742.057 684.096 L742.617 684.096 L743.176 684.096 L743.735 684.096 L744.294 684.096 L744.854 684.096 L745.413 684.096 L745.972 684.096 L746.531 684.096 L747.091 684.096 L747.65 684.096 L748.209 684.096 L748.768 684.096 L749.328 684.096 L749.887 684.096 L750.446 684.096 L751.005 684.096 L751.565 684.096 L752.124 684.096 L752.683 684.096 L753.242 684.096 L753.802 684.096 L754.361 684.096 L754.92 684.096 L755.479 684.096 L756.039 684.096 L756.598 684.096 L757.157 684.096 L757.716 684.096 L758.276 684.096 L758.835 684.096 L759.394 684.096 L759.953 684.096 L760.513 684.096 L761.072 684.096 L761.631 684.096 L762.19 684.096 L762.75 684.096 L763.309 684.096 L763.868 684.096 L764.427 684.096 L764.987 684.096 L765.546 684.096 L766.105 684.096 L766.664 684.096 L767.224 684.096 L767.783 684.096 L768.342 684.096 L768.901 684.096 L769.461 684.096 L770.02 684.096 L770.579 684.096 L771.138 684.096 L771.698 684.096 L772.257 684.096 L772.816 684.096 L773.375 684.096 L773.935 684.096 L774.494 684.096 L775.053 684.096 L775.612 684.096 L776.172 684.096 L776.731 684.096 L777.29 684.096 L777.849 684.096 L778.409 684.096 L778.968 684.096 L779.527 684.096 L780.086 684.096 L780.646 684.096 L781.205 684.096 L781.764 684.096 L782.323 684.096 L782.883 684.096 L783.442 684.096 L784.001 684.096 L784.56 684.096 L785.12 684.096 L785.679 684.096 L786.238 684.096 L786.797 684.096 L787.357 684.096 L787.916 684.096 L788.475 684.096 L789.034 684.096 L789.594 684.096 L790.153 684.096 L790.712 684.096 L791.271 684.096 L791.831 684.096 L792.39 684.096 L792.949 684.096 L793.508 684.096 L794.068 684.096 L794.627 684.096 L795.186 684.096 L795.745 684.096 L796.305 684.096 L796.864 684.096 L797.423 684.096 L797.982 684.096 L798.542 684.096 L799.101 684.096 L799.66 684.096 L800.219 684.096 L800.779 684.096 L801.338 684.096 L801.897 684.096 L802.456 684.096 L803.016 684.096 L803.575 684.096 L804.134 684.096 L804.693 684.096 L805.253 684.096 L805.812 684.096 L806.371 684.096 L806.931 684.096 L807.49 684.096 L808.049 684.096 L808.608 684.096 L809.168 684.096 L809.727 684.096 L810.286 684.096 L810.845 684.096 L811.405 684.096 L811.964 684.096 L812.523 684.096 L813.082 684.096 L813.642 684.096 L814.201 684.096 L814.76 684.096 L815.319 684.096 L815.879 684.096 L816.438 684.096 L816.997 684.096 L817.556 684.096 L818.116 684.096 L818.675 684.096 L819.234 684.096 L819.793 684.096 L820.353 684.096 L820.912 684.096 L821.471 684.096 L822.03 684.096 L822.59 684.096 L823.149 684.096 L823.708 684.096 L824.267 684.096 L824.827 684.096 L825.386 684.096 L825.945 684.096 L826.504 684.096 L827.064 684.096 L827.623 684.096 L828.182 684.096 L828.741 684.096 L829.301 684.096 L829.86 684.096 L830.419 684.096 L830.978 684.096 L831.538 684.096 L832.097 684.096 L832.656 684.096 L833.215 684.096 L833.775 684.096 L834.334 684.096 L834.893 684.096 L835.452 684.096 L836.012 684.096 L836.571 684.096 L837.13 684.096 L837.689 684.096 L838.249 684.096 L838.808 684.096 L839.367 684.096 L839.926 684.096 L840.486 684.096 L841.045 684.096 L841.604 684.096 L842.163 684.096 L842.723 684.096 L843.282 684.096 L843.841 684.096 L844.4 684.096 L844.96 684.096 L845.519 684.096 L846.078 684.096 L846.637 684.096 L847.197 684.096 L847.756 684.096 L848.315 684.096 L848.874 684.096 L849.434 684.096 L849.993 684.096 L850.552 684.096 L851.111 684.096 L851.671 684.096 L852.23 684.096 L852.789 684.096 L853.348 684.096 L853.908 684.096 L854.467 684.096 L855.026 684.096 L855.585 684.096 L856.145 684.096 L856.704 684.096 L857.263 684.096 L857.822 684.096 L858.382 684.096 L858.941 684.096 L859.5 684.096 L860.059 684.096 L860.619 684.096 L861.178 684.096 L861.737 684.096 L862.296 684.096 L862.856 684.096 L863.415 684.096 L863.974 684.096 L864.533 684.096 L865.093 684.096 L865.652 684.096 L866.211 684.096 L866.77 684.096 L867.33 684.096 L867.889 684.096 L868.448 684.096 L869.007 684.096 L869.567 684.096 L870.126 684.096 L870.685 684.096 L871.244 684.096 L871.804 684.096 L872.363 684.096 L872.922 684.096 L873.481 684.096 L874.041 684.096 L874.6 684.096 L875.159 684.096 L875.718 684.096 L876.278 684.096 L876.837 684.096 L877.396 684.096 L877.955 684.096 L878.515 684.096 L879.074 684.096 L879.633 684.096 L880.192 684.096 L880.752 684.096 L881.311 684.096 L881.87 684.096 L882.429 684.096 L882.989 684.096 L883.548 684.096 L884.107 684.096 L884.666 684.096 L885.226 684.096 L885.785 684.096 L886.344 684.096 L886.903 684.096 L887.463 684.096 L888.022 684.096 L888.581 684.096 L889.14 684.096 L889.7 684.096 L890.259 684.096 L890.818 684.096 L891.377 684.096 L891.937 684.096 L892.496 684.096 L893.055 684.096 L893.614 684.096 L894.174 684.096 L894.733 684.096 L895.292 684.096 L895.851 684.096 L896.411 684.096 L896.97 684.096 L897.529 684.096 L898.088 684.096 L898.648 684.096 L899.207 684.096 L899.766 684.096 L900.325 684.096 L900.885 684.096 L901.444 684.096 L902.003 684.096 L902.562 684.096 L903.122 684.096 L903.681 684.096 L904.24 684.096 L904.799 684.096 L905.359 684.096 L905.918 684.096 L906.477 684.096 L907.036 684.096 L907.596 684.096 L908.155 684.096 L908.714 684.096 L909.273 684.096 L909.833 684.096 L910.392 684.096 L910.951 684.096 L911.51 684.096 L912.07 684.096 L912.629 684.096 L913.188 684.096 L913.747 684.096 L914.307 684.096 L914.866 684.096 L915.425 684.096 L915.984 684.096 L916.544 684.096 L917.103 684.096 L917.662 684.096 L918.221 684.096 L918.781 684.096 L919.34 684.096 L919.899 684.096 L920.458 684.096 L921.018 684.096 L921.577 684.096 L922.136 684.096 L922.695 684.096 L923.255 684.096 L923.814 684.096 L924.373 684.096 L924.932 684.096 L925.492 684.096 L926.051 684.096 L926.61 684.096 L927.169 684.096 L927.729 684.096 L928.288 684.096 L928.847 684.096 L929.406 684.096 L929.966 684.096 L930.525 684.096 L931.084 684.096 L931.644 684.096 L932.203 684.096 L932.762 684.096 L933.321 684.096 L933.881 684.096 L934.44 684.096 L934.999 684.096 L935.558 684.096 L936.118 684.096 L936.677 684.096 L937.236 684.096 L937.795 684.096 L938.355 684.096 L938.914 684.096 L939.473 684.096 L940.032 684.096 L940.592 684.096 L941.151 684.096 L941.71 684.096 L942.269 684.096 L942.829 684.096 L943.388 684.096 L943.947 684.096 L944.506 684.096 L945.066 684.096 L945.625 684.096 L946.184 684.096 L946.743 684.096 L947.303 684.096 L947.862 684.096 L948.421 684.096 L948.98 684.096 L949.54 684.096 L950.099 684.096 L950.658 684.096 L951.217 684.096 L951.777 684.096 L952.336 684.096 L952.895 684.096 L953.454 684.096 L954.014 684.096 L954.573 684.096 L955.132 684.096 L955.691 684.096 L956.251 684.096 L956.81 684.096 L957.369 684.096 L957.928 684.096 L958.488 684.096 L959.047 684.096 L959.606 684.096 L960.165 684.096 L960.725 684.096 L961.284 684.096 L961.843 684.096 L962.402 684.096 L962.962 684.096 L963.521 684.096 L964.08 684.096 L964.639 684.096 L965.199 684.096 L965.758 684.096 L966.317 684.096 L966.876 684.096 L967.436 684.096 L967.995 684.096 L968.554 684.096 L969.113 684.096 L969.673 684.096 L970.232 684.096 L970.791 684.096 L971.35 684.096 L971.91 684.096 L972.469 684.096 L973.028 684.096 L973.587 684.096 L974.147 684.096 L974.706 684.096 L975.265 684.096 L975.824 684.096 L976.384 684.096 L976.943 684.096 L977.502 684.096 L978.061 684.096 L978.621 684.096 L979.18 684.096 L979.739 684.096 L980.298 684.096 L980.858 684.096 L981.417 684.096 L981.976 684.096 L982.535 684.096 L983.095 684.096 L983.654 684.096 L984.213 684.096 L984.772 684.096 L985.332 684.096 L985.891 684.096 L986.45 684.096 L987.009 684.096 L987.569 684.096 L988.128 684.096 L988.687 684.096 L989.246 684.096 L989.806 684.096 L990.365 684.096 L990.924 684.096 L991.483 684.096 L992.043 684.096 L992.602 684.096 L993.161 684.096 L993.72 684.096 L994.28 684.096 L994.839 684.096 L995.398 684.096 L995.957 684.096 L996.517 684.096 L997.076 684.096 L997.635 684.096 L998.194 684.096 L998.754 684.096 L999.313 684.096 L999.872 684.096 L1000.43 684.096 L1000.99 684.096 L1001.55 684.096 L1002.11 684.096 L1002.67 684.096 L1003.23 684.096 L1003.79 684.096 L1004.35 684.096 L1004.91 684.096 L1005.46 684.096 L1006.02 684.096 L1006.58 684.096 L1007.14 684.096 L1007.7 684.096 L1008.26 684.096 L1008.82 684.096 L1009.38 684.096 L1009.94 684.096 L1010.5 684.096 L1011.06 684.096 L1011.62 684.096 L1012.18 684.096 L1012.73 684.096 L1013.29 684.096 L1013.85 684.096 L1014.41 684.096 L1014.97 684.096 L1015.53 684.096 L1016.09 684.096 L1016.65 684.096 L1017.21 684.096 L1017.77 684.096 L1018.33 684.096 L1018.89 684.096 L1019.45 684.096 L1020.01 684.096 L1020.56 684.096 L1021.12 684.096 L1021.68 684.096 L1022.24 684.096 L1022.8 684.096 L1023.36 684.096 L1023.92 684.096 L1024.48 684.096 L1025.04 684.096 L1025.6 684.096 L1026.16 684.096 L1026.72 684.096 L1027.28 684.096 L1027.83 684.096 L1028.39 684.096 L1028.95 684.096 L1029.51 684.096 L1030.07 684.096 L1030.63 684.096 L1031.19 684.096 L1031.75 684.096 L1032.31 684.096 L1032.87 684.096 L1033.43 684.096 L1033.99 684.096 L1034.55 684.096 L1035.1 684.096 L1035.66 684.096 L1036.22 684.096 L1036.78 684.096 L1037.34 684.096 L1037.9 684.096 L1038.46 684.096 L1039.02 684.096 L1039.58 684.096 L1040.14 684.096 L1040.7 684.096 L1041.26 684.096 L1041.82 684.096 L1042.38 684.096 L1042.93 684.096 L1043.49 684.096 L1044.05 684.096 L1044.61 684.096 L1045.17 684.096 L1045.73 684.096 L1046.29 684.096 L1046.85 684.096 L1047.41 684.096 L1047.97 684.096 L1048.53 684.096 L1049.09 684.096 L1049.65 684.096 L1050.2 684.096 L1050.76 684.096 L1051.32 684.096 L1051.88 684.096 L1052.44 684.096 L1053 684.096 L1053.56 684.096 L1054.12 684.096 L1054.68 684.096 L1055.24 684.096 L1055.8 684.096 L1056.36 684.096 L1056.92 684.096 L1057.48 684.096 L1058.03 684.096 L1058.59 684.096 L1059.15 684.096 L1059.71 684.096 L1060.27 684.096 L1060.83 684.096 L1061.39 684.096 L1061.95 684.096 L1062.51 684.096 L1063.07 684.096 L1063.63 684.096 L1064.19 684.096 L1064.75 684.096 L1065.3 684.096 L1065.86 684.096 L1066.42 684.096 L1066.98 684.096 L1067.54 684.096 L1068.1 684.096 L1068.66 684.096 L1069.22 684.096 L1069.78 684.096 L1070.34 684.096 L1070.9 684.096 L1071.46 684.096 L1072.02 684.096 L1072.57 684.096 L1073.13 684.096 L1073.69 684.096 L1074.25 684.096 L1074.81 684.096 L1075.37 684.096 L1075.93 684.096 L1076.49 684.096 L1077.05 684.096 L1077.61 684.096 L1078.17 684.096 L1078.73 684.096 L1079.29 684.096 L1079.85 684.096 L1080.4 684.096 L1080.96 684.096 L1081.52 684.096 L1082.08 684.096 L1082.64 684.096 L1083.2 684.096 L1083.76 684.096 L1084.32 684.096 L1084.88 684.096 L1085.44 684.096 L1086 684.096 L1086.56 684.096 L1087.12 684.096 L1087.67 684.096 L1088.23 684.096 L1088.79 684.096 L1089.35 684.096 L1089.91 684.096 L1090.47 684.096 L1091.03 684.096 L1091.59 684.096 L1092.15 684.096 L1092.71 684.096 L1093.27 684.096 L1093.83 684.096 L1094.39 684.096 L1094.94 684.096 L1095.5 684.096 L1096.06 684.096 L1096.62 684.096 L1097.18 684.096 L1097.74 684.096 L1098.3 684.096 L1098.86 684.096 L1099.42 684.096 L1099.98 684.096 L1100.54 684.096 L1101.1 684.096 L1101.66 684.096 L1102.22 684.096 L1102.77 684.096 L1103.33 684.096 L1103.89 684.096 L1104.45 684.096 L1105.01 684.096 L1105.57 684.096 L1106.13 684.096 L1106.69 684.096 L1107.25 684.096 L1107.81 684.096 L1108.37 684.096 L1108.93 684.096 L1109.49 684.096 L1110.04 684.096 L1110.6 684.096 L1111.16 684.096 L1111.72 684.096 L1112.28 684.096 L1112.84 684.096 L1113.4 684.096 L1113.96 684.096 L1114.52 684.096 L1115.08 684.096 L1115.64 684.096 L1116.2 684.096 L1116.76 684.096 L1117.31 684.096 L1117.87 684.096 L1118.43 684.096 L1118.99 684.096 L1119.55 684.096 L1120.11 684.096 L1120.67 684.096 L1121.23 684.096 L1121.79 684.096 L1122.35 684.096 L1122.91 684.096 L1123.47 684.096 L1124.03 684.096 L1124.59 684.096 L1125.14 684.096 L1125.7 684.096 L1126.26 684.096 L1126.82 684.096 L1127.38 684.096 L1127.94 684.096 L1128.5 684.096 L1129.06 684.096 L1129.62 684.096 L1130.18 684.096 L1130.74 684.096 L1131.3 684.096 L1131.86 684.096 L1132.41 684.096 L1132.97 684.096 L1133.53 684.096 L1134.09 684.096 L1134.65 684.096 L1135.21 684.096 L1135.77 684.096 L1136.33 684.096 L1136.89 684.096 L1137.45 684.096 L1138.01 684.096 L1138.57 684.096 L1139.13 684.096 L1139.68 684.096 L1140.24 684.096 L1140.8 684.096 L1141.36 684.096 L1141.92 684.096 L1142.48 684.096 L1143.04 684.096 L1143.6 684.096 L1144.16 684.096 L1144.72 684.096 L1145.28 684.096 L1145.84 684.096 L1146.4 684.096 L1146.96 684.096 L1147.51 684.096 L1148.07 684.096 L1148.63 684.096 L1149.19 684.096 L1149.75 684.096 L1150.31 684.096 L1150.87 684.096 L1151.43 684.096 L1151.99 684.096 L1152.55 684.096 L1153.11 684.096 L1153.67 684.096 L1154.23 684.096 L1154.78 684.096 L1155.34 684.096 L1155.9 684.096 L1156.46 684.096 L1157.02 684.096 L1157.58 684.096 L1158.14 684.096 L1158.7 684.096 L1159.26 684.096 L1159.82 684.096 L1160.38 684.096 L1160.94 684.096 L1161.5 684.096 L1162.05 684.096 L1162.61 684.096 L1163.17 684.096 L1163.73 684.096 L1164.29 684.096 L1164.85 684.096 L1165.41 684.096 L1165.97 684.096 L1166.53 684.096 L1167.09 684.096 L1167.65 684.096 L1168.21 684.096 L1168.77 684.096 L1169.33 684.096 L1169.88 684.096 L1170.44 684.096 L1171 684.096 L1171.56 684.096 L1172.12 684.096 L1172.68 684.096 L1173.24 684.096 L1173.8 684.096 L1174.36 684.096 L1174.92 684.096 L1175.48 684.096 L1176.04 684.096 L1176.6 684.096 L1177.15 684.096 L1177.71 684.096 L1178.27 684.096 L1178.83 684.096 L1179.39 684.096 L1179.95 684.096 L1180.51 684.096 L1181.07 684.096 L1181.63 684.096 L1182.19 684.096 L1182.75 684.096 L1183.31 684.096 L1183.87 684.096 L1184.43 684.096 L1184.98 684.096 L1185.54 684.096 L1186.1 684.096 L1186.66 684.096 L1187.22 684.096 L1187.78 684.096 L1188.34 684.096 L1188.9 684.096 L1189.46 684.096 L1190.02 684.096 L1190.58 684.096 L1191.14 684.096 L1191.7 684.096 L1192.25 684.096 L1192.81 684.096 L1193.37 684.096 L1193.93 684.096 L1194.49 684.096 L1195.05 684.096 L1195.61 684.096 L1196.17 684.096 L1196.73 684.096 L1197.29 684.096 L1197.85 684.096 L1198.41 684.096 L1198.97 684.096 L1199.52 684.096 L1200.08 684.096 L1200.64 684.096 L1201.2 684.096 L1201.76 684.096 L1202.32 684.096 L1202.88 684.096 L1203.44 684.096 L1204 684.096 L1204.56 684.096 L1205.12 684.096 L1205.68 684.096 L1206.24 684.096 L1206.8 684.096 L1207.35 684.096 L1207.91 684.096 L1208.47 684.096 L1209.03 684.096 L1209.59 684.096 L1210.15 684.096 L1210.71 684.096 L1211.27 684.096 L1211.83 684.096 L1212.39 684.096 L1212.95 684.096 L1213.51 684.096 L1214.07 684.096 L1214.62 684.096 L1215.18 684.096 L1215.74 684.096 L1216.3 684.096 L1216.86 684.096 L1217.42 684.096 L1217.98 684.096 L1218.54 684.096 L1219.1 684.096 L1219.66 684.096 L1220.22 684.096 L1220.78 684.096 L1221.34 684.096 L1221.89 684.096 L1222.45 684.096 L1223.01 684.096 L1223.57 684.096 L1224.13 684.096 L1224.69 684.096 L1225.25 684.096 L1225.81 684.096 L1226.37 684.096 L1226.93 684.096 L1227.49 684.096 L1228.05 684.096 L1228.61 684.096 L1229.17 684.096 L1229.72 684.096 L1230.28 684.096 L1230.84 684.096 L1231.4 684.096 L1231.96 684.096 L1232.52 684.096 L1233.08 684.096 L1233.64 684.096 L1234.2 684.096 L1234.76 684.096 L1235.32 684.096 L1235.88 684.096 L1236.44 684.096 L1236.99 684.096 L1237.55 684.096 L1238.11 684.096 L1238.67 684.096 L1239.23 684.096 L1239.79 684.096 L1240.35 684.096 L1240.91 684.096 L1241.47 684.096 L1242.03 684.096 L1242.59 684.096 L1243.15 684.096 L1243.71 684.096 L1244.26 684.096 L1244.82 684.096 L1245.38 684.096 L1245.94 684.096 L1246.5 684.096 L1247.06 684.096 L1247.62 684.096 L1248.18 684.096 L1248.74 684.096 L1249.3 684.096 L1249.86 684.096 L1250.42 684.096 L1250.98 684.096 L1251.54 684.096 L1252.09 684.096 L1252.65 684.096 L1253.21 684.096 L1253.77 684.096 L1254.33 684.096 L1254.89 684.096 L1255.45 684.096 L1256.01 684.096 L1256.57 684.096 L1257.13 684.096 L1257.69 684.096 L1258.25 684.096 L1258.81 684.096 L1259.36 684.096 L1259.92 684.096 L1260.48 684.096 L1261.04 684.096 L1261.6 684.096 L1262.16 684.096 L1262.72 684.096 L1263.28 684.096 L1263.84 684.096 L1264.4 684.096 L1264.96 684.096 L1265.52 684.096 L1266.08 684.096 L1266.63 684.096 L1267.19 684.096 L1267.75 684.096 L1268.31 684.096 L1268.87 684.096 L1269.43 684.096 L1269.99 684.096 L1270.55 684.096 L1271.11 684.096 L1271.67 684.096 L1272.23 684.096 L1272.79 684.096 L1273.35 684.096 L1273.91 684.096 L1274.46 684.096 L1275.02 684.096 L1275.58 684.096 L1276.14 684.096 L1276.7 684.096 L1277.26 684.096 L1277.82 684.096 L1278.38 684.096 L1278.94 684.096 L1279.5 684.096 L1280.06 684.096 L1280.62 684.096 L1281.18 684.096 L1281.73 684.096 L1282.29 684.096 L1282.85 684.096 L1283.41 684.096 L1283.97 684.096 L1284.53 684.096 L1285.09 684.096 L1285.65 684.096 L1286.21 684.096 L1286.77 684.096 L1287.33 684.096 L1287.89 684.096 L1288.45 684.096 L1289 684.096 L1289.56 684.096 L1290.12 684.096 L1290.68 684.096 L1291.24 684.096 L1291.8 684.096 L1292.36 684.096 L1292.92 684.096 L1293.48 684.096 L1294.04 684.096 L1294.6 684.096 L1295.16 684.096 L1295.72 684.096 L1296.28 684.096 L1296.83 684.096 L1297.39 684.096 L1297.95 684.096 L1298.51 684.096 L1299.07 684.096 L1299.63 684.096 L1300.19 684.096 L1300.75 684.096 L1301.31 684.096 L1301.87 684.096 L1302.43 684.096 L1302.99 684.096 L1303.55 684.096 L1304.1 684.096 L1304.66 684.096 L1305.22 684.096 L1305.78 684.096 L1306.34 684.096 L1306.9 684.096 L1307.46 684.096 L1308.02 684.096 L1308.58 684.096 L1309.14 684.096 L1309.7 684.096 L1310.26 684.096 L1310.82 684.096 L1311.38 684.096 L1311.93 684.096 L1312.49 684.096 L1313.05 684.096 L1313.61 684.096 L1314.17 684.096 L1314.73 684.096 L1315.29 684.096 L1315.85 684.096 L1316.41 684.096 L1316.97 684.096 L1317.53 684.096 L1318.09 684.096 L1318.65 684.096 L1319.2 684.096 L1319.76 684.096 L1320.32 684.096 L1320.88 684.096 L1321.44 684.096 L1322 684.096 L1322.56 684.096 L1323.12 684.096 L1323.68 684.096 L1324.24 684.096 L1324.8 684.096 L1325.36 684.096 L1325.92 684.096 L1326.47 684.096 L1327.03 684.096 L1327.59 684.096 L1328.15 684.096 L1328.71 684.096 L1329.27 684.096 L1329.83 684.096 L1330.39 684.096 L1330.95 684.096 L1331.51 684.096 L1332.07 684.096 L1332.63 684.096 L1333.19 684.096 L1333.75 684.096 L1334.3 684.096 L1334.86 684.096 L1335.42 684.096 L1335.98 684.096 L1336.54 684.096 L1337.1 684.096 L1337.66 684.096 L1338.22 684.096 L1338.78 684.096 L1339.34 684.096 L1339.9 684.096 L1340.46 684.096 L1341.02 684.096 L1341.57 684.096 L1342.13 684.096 L1342.69 684.096 L1343.25 684.096 L1343.81 684.096 L1344.37 684.096 L1344.93 684.096 L1345.49 684.096 L1346.05 684.096 L1346.61 684.096 L1347.17 684.096 L1347.73 684.096 L1348.29 684.096 L1348.84 684.096 L1349.4 684.096 L1349.96 684.096 L1350.52 684.096 L1351.08 684.096 L1351.64 684.096 L1352.2 684.096 L1352.76 684.096 L1353.32 684.096 L1353.88 684.096 L1354.44 684.096 L1355 684.096 L1355.56 684.096 L1356.12 684.096 L1356.67 684.096 L1357.23 684.096 L1357.79 684.096 L1358.35 684.096 L1358.91 684.096 L1359.47 684.096 L1360.03 684.096 L1360.59 684.096 L1361.15 684.096 L1361.71 684.096 L1362.27 684.096 L1362.83 684.096 L1363.39 684.096 L1363.94 684.096 L1364.5 684.096 L1365.06 684.096 L1365.62 684.096 L1366.18 684.096 L1366.74 684.096 L1367.3 684.096 L1367.86 684.096 L1368.42 684.096 L1368.98 684.096 L1369.54 684.096 L1370.1 684.096 L1370.66 684.096 L1371.21 684.096 L1371.77 684.096 L1372.33 684.096 L1372.89 684.096 L1373.45 684.096 L1374.01 684.096 L1374.57 684.096 L1375.13 684.096 L1375.69 684.096 L1376.25 684.096 L1376.81 684.096 L1377.37 684.096 L1377.93 684.096 L1378.49 684.096 L1379.04 684.096 L1379.6 684.096 L1380.16 684.096 L1380.72 684.096 L1381.28 684.096 L1381.84 684.096 L1382.4 684.096 L1382.96 684.096 L1383.52 684.096 L1384.08 684.096 L1384.64 684.096 L1385.2 684.096 L1385.76 684.096 L1386.31 684.096 L1386.87 684.096 L1387.43 684.096 L1387.99 684.096 L1388.55 684.096 L1389.11 684.096 L1389.67 684.096 L1390.23 684.096 L1390.79 684.096 L1391.35 684.096 L1391.91 684.096 L1392.47 684.096 L1393.03 684.096 L1393.58 684.096 L1394.14 684.096 L1394.7 684.096 L1395.26 684.096 L1395.82 684.096 L1396.38 684.096 L1396.94 684.096 L1397.5 684.096 L1398.06 684.096 L1398.62 684.096 L1399.18 684.096 L1399.74 684.096 L1400.3 684.096 L1400.86 684.096 L1401.41 684.096 L1401.97 684.096 L1402.53 684.096 L1403.09 684.096 L1403.65 684.096 L1404.21 684.096 L1404.77 684.096 L1405.33 684.096 L1405.89 684.096 L1406.45 684.096 L1407.01 684.096 L1407.57 684.096 L1408.13 684.096 L1408.68 684.096 L1409.24 684.096 L1409.8 684.096 L1410.36 684.096 L1410.92 684.096 L1411.48 684.096 L1412.04 684.096 L1412.6 684.096 L1413.16 684.096 L1413.72 684.096 L1414.28 684.096 L1414.84 684.096 L1415.4 684.096 L1415.95 684.096 L1416.51 684.096 L1417.07 684.096 L1417.63 684.096 L1418.19 684.096 L1418.75 684.096 L1419.31 684.096 L1419.87 684.096 L1420.43 684.096 L1420.99 684.096 L1421.55 684.096 L1422.11 684.096 L1422.67 684.096 L1423.23 684.096 L1423.78 684.096 L1424.34 684.096 L1424.9 684.096 L1425.46 684.096 L1426.02 684.096 L1426.58 684.096 L1427.14 684.096 L1427.7 684.096 L1428.26 684.096 L1428.82 684.096 L1429.38 684.096 L1429.94 684.096 L1430.5 684.096 L1431.05 684.096 L1431.61 684.096 L1432.17 684.096 L1432.73 684.096 L1433.29 684.096 L1433.85 684.096 L1434.41 684.096 L1434.97 684.096 L1435.53 684.096 L1436.09 684.096 L1436.65 684.096 L1437.21 684.096 L1437.77 684.096 L1438.33 684.096 L1438.88 684.096 L1439.44 684.096 L1440 684.096 L1440.56 684.096 L1441.12 684.096 L1441.68 684.096 L1442.24 684.096 L1442.8 684.096 L1443.36 684.096 L1443.92 684.096 L1444.48 684.096 L1445.04 684.096 L1445.6 684.096 L1446.15 684.096 L1446.71 684.096 L1447.27 684.096 L1447.83 684.096 L1448.39 684.096 L1448.95 684.096 L1449.51 684.096 L1450.07 684.096 L1450.63 684.096 L1451.19 684.096 L1451.75 684.096 L1452.31 684.096 L1452.87 684.096 L1453.42 684.096 L1453.98 684.096 L1454.54 684.096 L1455.1 684.096 L1455.66 684.096 L1456.22 684.096 L1456.78 684.096 L1457.34 684.096 L1457.9 684.096 L1458.46 684.096 L1459.02 684.096 L1459.58 684.096 L1460.14 684.096 L1460.7 684.096 L1461.25 684.096 L1461.81 684.096 L1462.37 684.096 L1462.93 684.096 L1463.49 684.096 L1464.05 684.096 L1464.61 684.096 L1465.17 684.096 L1465.73 684.096 L1466.29 684.096 L1466.85 684.096 L1467.41 684.096 L1467.97 684.096 L1468.52 684.096 L1469.08 684.096 L1469.64 684.096 L1470.2 684.096 L1470.76 684.096 L1471.32 684.096 L1471.88 684.096 L1472.44 684.096 L1473 684.096 L1473.56 684.096 L1474.12 684.096 L1474.68 684.096 L1475.24 684.096 L1475.79 684.096 L1476.35 684.096 L1476.91 684.096 L1477.47 684.096 L1478.03 684.096 L1478.59 684.096 L1479.15 684.096 L1479.71 684.096 L1480.27 684.096 L1480.83 684.096 L1481.39 684.096 L1481.95 684.096 L1482.51 684.096 L1483.07 684.096 L1483.62 684.096 L1484.18 684.096 L1484.74 684.096 L1485.3 684.096 L1485.86 684.096 L1486.42 684.096 L1486.98 684.096 L1487.54 684.096 L1488.1 684.096 L1488.66 684.096 L1489.22 684.096 L1489.78 684.096 L1490.34 684.096 L1490.89 684.096 L1491.45 684.096 L1492.01 684.096 L1492.57 684.096 L1493.13 684.096 L1493.69 684.096 L1494.25 684.096 L1494.81 684.096 L1495.37 684.096 L1495.93 684.096 L1496.49 684.096 L1497.05 684.096 L1497.61 684.096 L1498.16 684.096 L1498.72 684.096 L1499.28 684.096 L1499.84 684.096 L1500.4 684.096 L1500.96 684.096 L1501.52 684.096 L1502.08 684.096 L1502.64 684.096 L1503.2 684.096 L1503.76 684.096 L1504.32 684.096 L1504.88 684.096 L1505.44 684.096 L1505.99 684.096 L1506.55 684.096 L1507.11 684.096 L1507.67 684.096 L1508.23 684.096 L1508.79 684.096 L1509.35 684.096 L1509.91 684.096 L1510.47 684.096 L1511.03 684.096 L1511.59 684.096 L1512.15 684.096 L1512.71 684.096 L1513.26 684.096 L1513.82 684.096 L1514.38 684.096 L1514.94 684.096 L1515.5 684.096 L1516.06 684.096 L1516.62 684.096 L1517.18 684.096 L1517.74 684.096 L1518.3 684.096 L1518.86 684.096 L1519.42 684.096 L1519.98 684.096 L1520.53 684.096 L1521.09 684.096 L1521.65 684.096 L1522.21 684.096 L1522.77 684.096 L1523.33 684.096 L1523.89 684.096 L1524.45 684.096 L1525.01 684.096 L1525.57 684.096 L1526.13 684.096 L1526.69 684.096 L1527.25 684.096 L1527.81 684.096 L1528.36 684.096 L1528.92 684.096 L1529.48 684.096 L1530.04 684.096 L1530.6 684.096 L1531.16 684.096 L1531.72 684.096 L1532.28 684.096 L1532.84 684.096 L1533.4 684.096 L1533.96 684.096 L1534.52 684.096 L1535.08 684.096 L1535.63 684.096 L1536.19 684.096 L1536.75 684.096 L1537.31 684.096 L1537.87 684.096 L1538.43 684.096 L1538.99 684.096 L1539.55 684.096 L1540.11 684.096 L1540.67 684.096 L1541.23 684.096 L1541.79 684.096 L1542.35 684.096 L1542.9 684.096 L1543.46 684.096 L1544.02 684.096 L1544.58 684.096 L1545.14 684.096 L1545.7 684.096 L1546.26 684.096 L1546.82 684.096 L1547.38 684.096 L1547.94 684.096 L1548.5 684.096 L1549.06 684.096 L1549.62 684.096 L1550.18 684.096 L1550.73 684.096 L1551.29 684.096 L1551.85 684.096 L1552.41 684.096 L1552.97 684.096 L1553.53 684.096 L1554.09 684.096 L1554.65 684.096 L1555.21 684.096 L1555.77 684.096 L1556.33 684.096 L1556.89 684.096 L1557.45 684.096 L1558 684.096 L1558.56 684.096 L1559.12 684.096 L1559.68 684.096 L1560.24 684.096 L1560.8 684.096 L1561.36 684.096 L1561.92 684.096 L1562.48 684.096 L1563.04 684.096 L1563.6 684.096 L1564.16 684.096 L1564.72 684.096 L1565.28 684.096 L1565.83 684.096 L1566.39 684.096 L1566.95 684.096 L1567.51 684.096 L1568.07 684.096 L1568.63 684.096 L1569.19 684.096 L1569.75 684.096 L1570.31 684.096 L1570.87 684.096 L1571.43 684.096 L1571.99 684.096 L1572.55 684.096 L1573.1 684.096 L1573.66 684.096 L1574.22 684.096 L1574.78 684.096 L1575.34 684.096 L1575.9 684.096 L1576.46 684.096 L1577.02 684.096 L1577.58 684.096 L1578.14 684.096 L1578.7 684.096 L1579.26 684.096 L1579.82 684.096 L1580.37 684.096 L1580.93 684.096 L1581.49 684.096 L1582.05 684.096 L1582.61 684.096 L1583.17 684.096 L1583.73 684.096 L1584.29 684.096 L1584.85 684.096 L1585.41 684.096 L1585.97 684.096 L1586.53 684.096 L1587.09 684.096 L1587.65 684.096 L1588.2 684.096 L1588.76 684.096 L1589.32 684.096 L1589.88 684.096 L1590.44 684.096 L1591 684.096 L1591.56 684.096 L1592.12 684.096 L1592.68 684.096 L1593.24 684.096 L1593.8 684.096 L1594.36 684.096 L1594.92 684.096 L1595.47 684.096 L1596.03 684.096 L1596.59 684.096 L1597.15 684.096 L1597.71 684.096 L1598.27 684.096 L1598.83 684.096 L1599.39 684.096 L1599.95 684.096 L1600.51 684.096 L1601.07 684.096 L1601.63 684.096 L1602.19 684.096 L1602.74 684.096 L1603.3 684.096 L1603.86 684.096 L1604.42 684.096 L1604.98 684.096 L1605.54 684.096 L1606.1 684.096 L1606.66 684.096 L1607.22 684.096 L1607.78 684.096 L1608.34 684.096 L1608.9 684.096 L1609.46 684.096 L1610.02 684.096 L1610.57 684.096 L1611.13 684.096 L1611.69 684.096 L1612.25 684.096 L1612.81 684.096 L1613.37 684.096 L1613.93 684.096 L1614.49 684.096 L1615.05 684.096 L1615.61 684.096 L1616.17 684.096 L1616.73 684.096 L1617.29 684.096 L1617.84 684.096 L1618.4 684.096 L1618.96 684.096 L1619.52 684.096 L1620.08 684.096 L1620.64 684.096 L1621.2 684.096 L1621.76 684.096 L1622.32 684.096 L1622.88 684.096 L1623.44 684.096 L1624 684.096 L1624.56 684.096 L1625.11 684.096 L1625.67 684.096 L1626.23 684.096 L1626.79 684.096 L1627.35 684.096 L1627.91 684.096 L1628.47 684.096 L1629.03 684.096 L1629.59 684.096 L1630.15 684.096 L1630.71 684.096 L1631.27 684.096 L1631.83 684.096 L1632.39 684.096 L1632.94 684.096 L1633.5 684.096 L1634.06 684.096 L1634.62 684.096 L1635.18 684.096 L1635.74 684.096 L1636.3 684.096 L1636.86 684.096 L1637.42 684.096 L1637.98 684.096 L1638.54 684.096 L1639.1 684.096 L1639.66 684.096 L1640.21 684.096 L1640.77 684.096 L1641.33 684.096 L1641.89 684.096 L1642.45 684.096 L1643.01 684.096 L1643.57 684.096 L1644.13 684.096 L1644.69 684.096 L1645.25 684.096 L1645.81 684.096 L1646.37 684.096 L1646.93 684.096 L1647.48 684.096 L1648.04 684.096 L1648.6 684.096 L1649.16 684.096 L1649.72 684.096 L1650.28 684.096 L1650.84 684.096 L1651.4 684.096 L1651.96 684.096 L1652.52 684.096 L1653.08 684.096 L1653.64 684.096 L1654.2 684.096 L1654.76 684.096 L1655.31 684.096 L1655.87 684.096 L1656.43 684.096 L1656.99 684.096 L1657.55 684.096 L1658.11 684.096 L1658.67 684.096 L1659.23 684.096 L1659.79 684.096 L1660.35 684.096 L1660.91 684.096 L1661.47 684.096 L1662.03 684.096 L1662.58 684.096 L1663.14 684.096 L1663.7 684.096 L1664.26 684.096 L1664.82 684.096 L1665.38 684.096 L1665.94 684.096 L1666.5 684.096 L1667.06 684.096 L1667.62 684.096 L1668.18 684.096 L1668.74 684.096 L1669.3 684.096 L1669.85 684.096 L1670.41 684.096 L1670.97 684.096 L1671.53 684.096 L1672.09 684.096 L1672.65 684.096 L1673.21 684.096 L1673.77 684.096 L1674.33 684.096 L1674.89 684.096 L1675.45 684.096 L1676.01 684.096 L1676.57 684.096 L1677.13 684.096 L1677.68 684.096 L1678.24 684.096 L1678.8 684.096 L1679.36 684.096 L1679.92 684.096 L1680.48 684.096 L1681.04 684.096 L1681.6 684.096 L1682.16 684.096 L1682.72 684.096 L1683.28 684.096 L1683.84 684.096 L1684.4 684.096 L1684.95 684.096 L1685.51 684.096 L1686.07 684.096 L1686.63 684.096 L1687.19 684.096 L1687.75 684.096 L1688.31 684.096 L1688.87 684.096 L1689.43 684.096 L1689.99 684.096 L1690.55 684.096 L1691.11 684.096 L1691.67 684.096 L1692.23 684.096 L1692.78 684.096 L1693.34 684.096 L1693.9 684.096 L1694.46 684.096 L1695.02 684.096 L1695.58 684.096 L1696.14 684.096 L1696.7 684.096 L1697.26 684.096 L1697.82 684.096 L1698.38 684.096 L1698.94 684.096 L1699.5 684.096 L1700.05 684.096 L1700.61 684.096 L1701.17 684.096 L1701.73 684.096 L1702.29 684.096 L1702.85 684.096 L1703.41 684.096 L1703.97 684.096 L1704.53 684.096 L1705.09 684.096 L1705.65 684.096 L1706.21 684.096 L1706.77 684.096 L1707.32 684.096 L1707.88 684.096 L1708.44 684.096 L1709 684.096 L1709.56 684.096 L1710.12 684.096 L1710.68 684.096 L1711.24 684.096 L1711.8 684.096 L1712.36 684.096 L1712.92 684.096 L1713.48 684.096 L1714.04 684.096 L1714.6 684.096 L1715.15 684.096 L1715.71 684.096 L1716.27 684.096 L1716.83 684.096 L1717.39 684.096 L1717.95 684.096 L1718.51 684.096 L1719.07 684.096 L1719.63 684.096 L1720.19 684.096 L1720.75 684.096 L1721.31 684.096 L1721.87 684.096 L1722.42 684.096 L1722.98 684.096 L1723.54 684.096 L1724.1 684.096 L1724.66 684.096 L1725.22 684.096 L1725.78 684.096 L1726.34 684.096 L1726.9 684.096 L1727.46 684.096 L1728.02 684.096 L1728.58 684.096 L1729.14 684.096 L1729.69 684.096 L1730.25 684.096 L1730.81 684.096 L1731.37 684.096 L1731.93 684.096 L1732.49 684.096 L1733.05 684.096 L1733.61 684.096 L1734.17 684.096 L1734.73 684.096 L1735.29 684.096 L1735.85 684.096 L1736.41 684.096 L1736.97 684.096 L1737.52 684.096 L1738.08 684.096 L1738.64 684.096 L1739.2 684.096 L1739.76 684.096 L1740.32 684.096 L1740.88 684.096 L1741.44 684.096 L1742 684.096 L1742.56 684.096 L1743.12 684.096 L1743.68 684.096 L1744.24 684.096 L1744.79 684.096 L1745.35 684.096 L1745.91 684.096 L1746.47 684.096 L1747.03 684.096 L1747.59 684.096 L1748.15 684.096 L1748.71 684.096 L1749.27 684.096 L1749.83 684.096 L1750.39 684.096 L1750.95 684.096 L1751.51 684.096 L1752.06 684.096 L1752.62 684.096 L1753.18 684.096 L1753.74 684.096 L1754.3 684.096 L1754.86 684.096 L1755.42 684.096 L1755.98 684.096 L1756.54 684.096 L1757.1 684.096 L1757.66 684.096 L1758.22 684.096 L1758.78 684.096 L1759.34 684.096 L1759.89 684.096 L1760.45 684.096 L1761.01 684.096 L1761.57 684.096 L1762.13 684.096 L1762.69 684.096 L1763.25 684.096 L1763.81 684.096 L1764.37 684.096 L1764.93 684.096 L1765.49 684.096 L1766.05 684.096 L1766.61 684.096 L1767.16 684.096 L1767.72 684.096 L1768.28 684.096 L1768.84 684.096 L1769.4 684.096 L1769.96 684.096 L1770.52 684.096 L1771.08 684.096 L1771.64 684.096 L1772.2 684.096 L1772.76 684.096 L1773.32 684.096 L1773.88 684.096 L1774.43 684.096 L1774.99 684.096 L1775.55 684.096 L1776.11 684.096 L1776.67 684.096 L1777.23 684.096 L1777.79 684.096 L1778.35 684.096 L1778.91 684.096 L1779.47 684.096 L1780.03 684.096 L1780.59 684.096 L1781.15 684.096 L1781.71 684.096 L1782.26 684.096 L1782.82 684.096 L1783.38 684.096 L1783.94 684.096 L1784.5 684.096 L1785.06 684.096 L1785.62 684.096 L1786.18 684.096 L1786.74 684.096 L1787.3 684.096 L1787.86 684.096 L1788.42 684.096 L1788.98 684.096 L1789.53 684.096 L1790.09 684.096 L1790.65 684.096 L1791.21 684.096 L1791.77 684.096 L1792.33 684.096 L1792.89 684.096 L1793.45 684.096 L1794.01 684.096 L1794.57 684.096 L1795.13 684.096 L1795.69 684.096 L1796.25 684.096 L1796.8 684.096 L1797.36 684.096 L1797.92 684.096 L1798.48 684.096 L1799.04 684.096 L1799.6 684.096 L1800.16 684.096 L1800.72 684.096 L1801.28 684.096 L1801.84 684.096 L1802.4 684.096 L1802.96 684.096 L1803.52 684.096 L1804.08 684.096 L1804.63 684.096 L1805.19 684.096 L1805.75 684.096 L1806.31 684.096 L1806.87 684.096 L1807.43 684.096 L1807.99 684.096 L1808.55 684.096 L1809.11 684.096 L1809.67 684.096 L1810.23 684.096 L1810.79 684.096 L1811.35 684.096 L1811.9 684.096 L1812.46 684.096 L1813.02 684.096 L1813.58 684.096 L1814.14 684.096 L1814.7 684.096 L1815.26 684.096 L1815.82 684.096 L1816.38 684.096 L1816.94 684.096 L1817.5 684.096 L1818.06 684.096 L1818.62 684.096 L1819.18 684.096 L1819.73 684.096 L1820.29 684.096 L1820.85 684.096 L1821.41 684.096 L1821.97 684.096 L1822.53 684.096 L1823.09 684.096 L1823.65 684.096 L1824.21 684.096 L1824.77 684.096 L1825.33 684.096 L1825.89 684.096 L1826.45 684.096 L1827 684.096 L1827.56 684.096 L1828.12 684.096 L1828.68 684.096 L1829.24 684.096 L1829.8 684.096 L1830.36 684.096 L1830.92 684.096 L1831.48 684.096 L1832.04 684.096 L1832.6 684.096 L1833.16 684.096 L1833.72 684.096 L1834.27 684.096 L1834.83 684.096 L1835.39 684.096 L1835.95 684.096 L1836.51 684.096 L1837.07 684.096 L1837.63 684.096 L1838.19 684.096 L1838.19 681.703 L1837.63 681.703 L1837.07 681.703 L1836.51 681.703 L1835.95 681.703 L1835.39 681.703 L1834.83 681.703 L1834.27 681.703 L1833.72 681.703 L1833.16 681.703 L1832.6 681.703 L1832.04 681.703 L1831.48 681.703 L1830.92 681.703 L1830.36 681.703 L1829.8 681.703 L1829.24 681.703 L1828.68 681.703 L1828.12 681.703 L1827.56 681.703 L1827 681.703 L1826.45 681.703 L1825.89 681.703 L1825.33 681.703 L1824.77 681.703 L1824.21 681.703 L1823.65 681.703 L1823.09 681.703 L1822.53 681.703 L1821.97 681.703 L1821.41 681.703 L1820.85 681.703 L1820.29 681.703 L1819.73 681.703 L1819.18 681.703 L1818.62 681.703 L1818.06 681.703 L1817.5 681.703 L1816.94 681.703 L1816.38 681.703 L1815.82 681.703 L1815.26 681.703 L1814.7 681.703 L1814.14 681.703 L1813.58 681.703 L1813.02 681.703 L1812.46 681.703 L1811.9 681.703 L1811.35 681.703 L1810.79 681.703 L1810.23 681.703 L1809.67 681.703 L1809.11 681.703 L1808.55 681.703 L1807.99 681.703 L1807.43 681.703 L1806.87 681.703 L1806.31 681.703 L1805.75 681.703 L1805.19 681.703 L1804.63 681.703 L1804.08 681.703 L1803.52 681.703 L1802.96 681.703 L1802.4 681.703 L1801.84 681.703 L1801.28 681.703 L1800.72 681.703 L1800.16 681.703 L1799.6 681.703 L1799.04 681.703 L1798.48 681.703 L1797.92 681.703 L1797.36 681.703 L1796.8 681.703 L1796.25 681.703 L1795.69 681.703 L1795.13 681.703 L1794.57 681.703 L1794.01 681.703 L1793.45 681.703 L1792.89 681.703 L1792.33 681.703 L1791.77 681.703 L1791.21 681.703 L1790.65 681.703 L1790.09 681.703 L1789.53 681.703 L1788.98 681.703 L1788.42 681.703 L1787.86 681.703 L1787.3 681.703 L1786.74 681.703 L1786.18 681.703 L1785.62 681.703 L1785.06 681.703 L1784.5 681.703 L1783.94 681.703 L1783.38 681.703 L1782.82 681.703 L1782.26 681.703 L1781.71 681.703 L1781.15 681.703 L1780.59 681.703 L1780.03 681.703 L1779.47 681.703 L1778.91 681.703 L1778.35 681.703 L1777.79 681.703 L1777.23 681.703 L1776.67 681.703 L1776.11 681.703 L1775.55 681.703 L1774.99 681.703 L1774.43 681.703 L1773.88 681.703 L1773.32 681.703 L1772.76 681.703 L1772.2 681.703 L1771.64 681.703 L1771.08 681.703 L1770.52 681.703 L1769.96 681.703 L1769.4 681.703 L1768.84 681.703 L1768.28 681.703 L1767.72 681.703 L1767.16 681.703 L1766.61 681.703 L1766.05 681.703 L1765.49 681.703 L1764.93 681.703 L1764.37 681.703 L1763.81 681.703 L1763.25 681.703 L1762.69 681.703 L1762.13 681.703 L1761.57 681.703 L1761.01 681.703 L1760.45 681.703 L1759.89 681.703 L1759.34 681.703 L1758.78 681.703 L1758.22 681.703 L1757.66 681.703 L1757.1 681.703 L1756.54 681.703 L1755.98 681.703 L1755.42 681.703 L1754.86 681.703 L1754.3 681.703 L1753.74 681.703 L1753.18 681.703 L1752.62 681.703 L1752.06 681.703 L1751.51 681.703 L1750.95 681.703 L1750.39 681.703 L1749.83 681.703 L1749.27 681.703 L1748.71 681.703 L1748.15 681.703 L1747.59 681.703 L1747.03 681.703 L1746.47 681.703 L1745.91 681.703 L1745.35 681.703 L1744.79 681.703 L1744.24 681.703 L1743.68 681.703 L1743.12 681.703 L1742.56 681.703 L1742 681.703 L1741.44 681.703 L1740.88 681.703 L1740.32 681.703 L1739.76 681.703 L1739.2 681.703 L1738.64 681.703 L1738.08 681.703 L1737.52 681.703 L1736.97 681.703 L1736.41 681.703 L1735.85 681.703 L1735.29 681.703 L1734.73 681.703 L1734.17 681.703 L1733.61 681.703 L1733.05 681.703 L1732.49 681.703 L1731.93 681.703 L1731.37 681.703 L1730.81 681.703 L1730.25 681.703 L1729.69 681.703 L1729.14 681.703 L1728.58 681.703 L1728.02 681.703 L1727.46 681.703 L1726.9 681.703 L1726.34 681.703 L1725.78 681.703 L1725.22 681.703 L1724.66 681.703 L1724.1 681.703 L1723.54 681.703 L1722.98 681.703 L1722.42 681.703 L1721.87 681.703 L1721.31 681.703 L1720.75 681.703 L1720.19 681.703 L1719.63 681.703 L1719.07 681.703 L1718.51 681.703 L1717.95 681.703 L1717.39 681.703 L1716.83 681.703 L1716.27 681.703 L1715.71 681.703 L1715.15 681.703 L1714.6 681.703 L1714.04 681.703 L1713.48 681.703 L1712.92 681.703 L1712.36 681.703 L1711.8 681.703 L1711.24 681.703 L1710.68 681.703 L1710.12 681.703 L1709.56 681.703 L1709 681.703 L1708.44 681.703 L1707.88 681.703 L1707.32 681.703 L1706.77 681.703 L1706.21 681.703 L1705.65 681.703 L1705.09 681.703 L1704.53 681.703 L1703.97 681.703 L1703.41 681.703 L1702.85 681.703 L1702.29 681.703 L1701.73 681.703 L1701.17 681.703 L1700.61 681.703 L1700.05 681.703 L1699.5 681.703 L1698.94 681.703 L1698.38 681.703 L1697.82 681.703 L1697.26 681.703 L1696.7 681.703 L1696.14 681.703 L1695.58 681.703 L1695.02 681.703 L1694.46 681.703 L1693.9 681.703 L1693.34 681.703 L1692.78 681.703 L1692.23 681.703 L1691.67 681.703 L1691.11 681.703 L1690.55 681.703 L1689.99 681.703 L1689.43 681.703 L1688.87 681.703 L1688.31 681.703 L1687.75 681.703 L1687.19 681.703 L1686.63 681.703 L1686.07 681.703 L1685.51 681.703 L1684.95 681.703 L1684.4 681.703 L1683.84 681.703 L1683.28 681.703 L1682.72 681.703 L1682.16 681.703 L1681.6 681.703 L1681.04 681.703 L1680.48 681.703 L1679.92 681.703 L1679.36 681.703 L1678.8 681.703 L1678.24 681.703 L1677.68 681.703 L1677.13 681.703 L1676.57 681.703 L1676.01 681.703 L1675.45 681.703 L1674.89 681.703 L1674.33 681.703 L1673.77 681.703 L1673.21 681.703 L1672.65 681.703 L1672.09 681.703 L1671.53 681.703 L1670.97 681.703 L1670.41 681.703 L1669.85 681.703 L1669.3 681.703 L1668.74 681.703 L1668.18 681.703 L1667.62 681.703 L1667.06 681.703 L1666.5 681.703 L1665.94 681.703 L1665.38 681.703 L1664.82 681.703 L1664.26 681.703 L1663.7 681.703 L1663.14 681.703 L1662.58 681.703 L1662.03 681.703 L1661.47 681.703 L1660.91 681.703 L1660.35 681.703 L1659.79 681.703 L1659.23 681.703 L1658.67 681.703 L1658.11 681.703 L1657.55 681.703 L1656.99 681.703 L1656.43 681.703 L1655.87 681.703 L1655.31 681.703 L1654.76 681.703 L1654.2 681.703 L1653.64 681.703 L1653.08 681.703 L1652.52 681.703 L1651.96 681.703 L1651.4 681.703 L1650.84 681.703 L1650.28 681.703 L1649.72 681.703 L1649.16 681.703 L1648.6 681.703 L1648.04 681.703 L1647.48 681.703 L1646.93 681.703 L1646.37 681.703 L1645.81 681.703 L1645.25 681.703 L1644.69 681.703 L1644.13 681.703 L1643.57 681.703 L1643.01 681.703 L1642.45 681.703 L1641.89 681.703 L1641.33 681.703 L1640.77 681.703 L1640.21 681.703 L1639.66 681.703 L1639.1 681.703 L1638.54 681.703 L1637.98 681.703 L1637.42 681.703 L1636.86 681.703 L1636.3 681.703 L1635.74 681.703 L1635.18 681.703 L1634.62 681.703 L1634.06 681.703 L1633.5 681.703 L1632.94 681.703 L1632.39 681.703 L1631.83 681.703 L1631.27 681.703 L1630.71 681.703 L1630.15 681.703 L1629.59 681.703 L1629.03 681.703 L1628.47 681.703 L1627.91 681.703 L1627.35 681.703 L1626.79 681.703 L1626.23 681.703 L1625.67 681.703 L1625.11 681.703 L1624.56 681.703 L1624 681.703 L1623.44 681.703 L1622.88 681.703 L1622.32 681.703 L1621.76 681.703 L1621.2 681.703 L1620.64 681.703 L1620.08 681.703 L1619.52 681.703 L1618.96 681.703 L1618.4 681.703 L1617.84 681.703 L1617.29 681.703 L1616.73 681.703 L1616.17 681.703 L1615.61 681.703 L1615.05 681.703 L1614.49 681.703 L1613.93 681.703 L1613.37 681.703 L1612.81 681.703 L1612.25 681.703 L1611.69 681.703 L1611.13 681.703 L1610.57 681.703 L1610.02 681.703 L1609.46 681.703 L1608.9 681.703 L1608.34 681.703 L1607.78 681.703 L1607.22 681.703 L1606.66 681.703 L1606.1 681.703 L1605.54 681.703 L1604.98 681.703 L1604.42 681.703 L1603.86 681.703 L1603.3 681.703 L1602.74 681.703 L1602.19 681.703 L1601.63 681.703 L1601.07 681.703 L1600.51 681.703 L1599.95 681.703 L1599.39 681.703 L1598.83 681.703 L1598.27 681.703 L1597.71 681.703 L1597.15 681.703 L1596.59 681.703 L1596.03 681.703 L1595.47 681.703 L1594.92 681.703 L1594.36 681.703 L1593.8 681.703 L1593.24 681.703 L1592.68 681.703 L1592.12 681.703 L1591.56 681.703 L1591 681.703 L1590.44 681.703 L1589.88 681.703 L1589.32 681.703 L1588.76 681.703 L1588.2 681.703 L1587.65 681.703 L1587.09 681.703 L1586.53 681.703 L1585.97 681.703 L1585.41 681.703 L1584.85 681.703 L1584.29 681.703 L1583.73 681.703 L1583.17 681.703 L1582.61 681.703 L1582.05 681.703 L1581.49 681.703 L1580.93 681.703 L1580.37 681.703 L1579.82 681.703 L1579.26 681.703 L1578.7 681.703 L1578.14 681.703 L1577.58 681.703 L1577.02 681.703 L1576.46 681.703 L1575.9 681.703 L1575.34 681.703 L1574.78 681.703 L1574.22 681.703 L1573.66 681.703 L1573.1 681.703 L1572.55 681.703 L1571.99 681.703 L1571.43 681.703 L1570.87 681.703 L1570.31 681.703 L1569.75 681.703 L1569.19 681.703 L1568.63 681.703 L1568.07 681.703 L1567.51 681.703 L1566.95 681.703 L1566.39 681.703 L1565.83 681.703 L1565.28 681.703 L1564.72 681.703 L1564.16 681.703 L1563.6 681.703 L1563.04 681.703 L1562.48 681.703 L1561.92 681.703 L1561.36 681.703 L1560.8 681.703 L1560.24 681.703 L1559.68 681.703 L1559.12 681.703 L1558.56 681.703 L1558 681.703 L1557.45 681.703 L1556.89 681.703 L1556.33 681.703 L1555.77 681.703 L1555.21 681.703 L1554.65 681.703 L1554.09 681.703 L1553.53 681.703 L1552.97 681.703 L1552.41 681.703 L1551.85 681.703 L1551.29 681.703 L1550.73 681.703 L1550.18 681.703 L1549.62 681.703 L1549.06 681.703 L1548.5 681.703 L1547.94 681.703 L1547.38 681.703 L1546.82 681.703 L1546.26 681.703 L1545.7 681.703 L1545.14 681.703 L1544.58 681.703 L1544.02 681.703 L1543.46 681.703 L1542.9 681.703 L1542.35 681.703 L1541.79 681.703 L1541.23 681.703 L1540.67 681.703 L1540.11 681.703 L1539.55 681.703 L1538.99 681.703 L1538.43 681.703 L1537.87 681.703 L1537.31 681.703 L1536.75 681.703 L1536.19 681.703 L1535.63 681.703 L1535.08 681.703 L1534.52 681.703 L1533.96 681.703 L1533.4 681.703 L1532.84 681.703 L1532.28 681.703 L1531.72 681.703 L1531.16 681.703 L1530.6 681.703 L1530.04 681.703 L1529.48 681.703 L1528.92 681.703 L1528.36 681.703 L1527.81 681.703 L1527.25 681.703 L1526.69 681.703 L1526.13 681.703 L1525.57 681.703 L1525.01 681.703 L1524.45 681.703 L1523.89 681.703 L1523.33 681.703 L1522.77 681.703 L1522.21 681.703 L1521.65 681.703 L1521.09 681.703 L1520.53 681.703 L1519.98 681.703 L1519.42 681.703 L1518.86 681.703 L1518.3 681.703 L1517.74 681.703 L1517.18 681.703 L1516.62 681.703 L1516.06 681.703 L1515.5 681.703 L1514.94 681.703 L1514.38 681.703 L1513.82 681.703 L1513.26 681.703 L1512.71 681.703 L1512.15 681.703 L1511.59 681.703 L1511.03 681.703 L1510.47 681.703 L1509.91 681.703 L1509.35 681.703 L1508.79 681.703 L1508.23 681.703 L1507.67 681.703 L1507.11 681.703 L1506.55 681.703 L1505.99 681.703 L1505.44 681.703 L1504.88 681.703 L1504.32 681.703 L1503.76 681.703 L1503.2 681.703 L1502.64 681.703 L1502.08 681.703 L1501.52 681.703 L1500.96 681.703 L1500.4 681.703 L1499.84 681.703 L1499.28 681.703 L1498.72 681.703 L1498.16 681.703 L1497.61 681.703 L1497.05 681.703 L1496.49 681.703 L1495.93 681.703 L1495.37 681.703 L1494.81 681.703 L1494.25 681.703 L1493.69 681.703 L1493.13 681.703 L1492.57 681.703 L1492.01 681.703 L1491.45 681.703 L1490.89 681.703 L1490.34 681.703 L1489.78 681.703 L1489.22 681.703 L1488.66 681.703 L1488.1 681.703 L1487.54 681.703 L1486.98 681.703 L1486.42 681.703 L1485.86 681.703 L1485.3 681.703 L1484.74 681.703 L1484.18 681.703 L1483.62 681.703 L1483.07 681.703 L1482.51 681.703 L1481.95 681.703 L1481.39 681.703 L1480.83 681.703 L1480.27 681.703 L1479.71 681.703 L1479.15 681.703 L1478.59 681.703 L1478.03 681.703 L1477.47 681.703 L1476.91 681.703 L1476.35 681.703 L1475.79 681.703 L1475.24 681.703 L1474.68 681.703 L1474.12 681.703 L1473.56 681.703 L1473 681.703 L1472.44 681.703 L1471.88 681.703 L1471.32 681.703 L1470.76 681.703 L1470.2 681.703 L1469.64 681.703 L1469.08 681.703 L1468.52 681.703 L1467.97 681.703 L1467.41 681.703 L1466.85 681.703 L1466.29 681.703 L1465.73 681.703 L1465.17 681.703 L1464.61 681.703 L1464.05 681.703 L1463.49 681.703 L1462.93 681.703 L1462.37 681.703 L1461.81 681.703 L1461.25 681.703 L1460.7 681.703 L1460.14 681.703 L1459.58 681.703 L1459.02 681.703 L1458.46 681.703 L1457.9 681.703 L1457.34 681.703 L1456.78 681.703 L1456.22 681.703 L1455.66 681.703 L1455.1 681.703 L1454.54 681.703 L1453.98 681.703 L1453.42 681.703 L1452.87 681.703 L1452.31 681.703 L1451.75 681.703 L1451.19 681.703 L1450.63 681.703 L1450.07 681.703 L1449.51 681.703 L1448.95 681.703 L1448.39 681.703 L1447.83 681.703 L1447.27 681.703 L1446.71 681.703 L1446.15 681.703 L1445.6 681.703 L1445.04 681.703 L1444.48 681.703 L1443.92 681.703 L1443.36 681.703 L1442.8 681.703 L1442.24 681.703 L1441.68 681.703 L1441.12 681.703 L1440.56 681.703 L1440 681.703 L1439.44 681.703 L1438.88 681.703 L1438.33 681.703 L1437.77 681.703 L1437.21 681.703 L1436.65 681.703 L1436.09 681.703 L1435.53 681.703 L1434.97 681.703 L1434.41 681.703 L1433.85 681.703 L1433.29 681.703 L1432.73 681.703 L1432.17 681.703 L1431.61 681.703 L1431.05 681.703 L1430.5 681.703 L1429.94 681.703 L1429.38 681.703 L1428.82 681.703 L1428.26 681.703 L1427.7 681.703 L1427.14 681.703 L1426.58 681.703 L1426.02 681.703 L1425.46 681.703 L1424.9 681.703 L1424.34 681.703 L1423.78 681.703 L1423.23 681.703 L1422.67 681.703 L1422.11 681.703 L1421.55 681.703 L1420.99 681.703 L1420.43 681.703 L1419.87 681.703 L1419.31 681.703 L1418.75 681.703 L1418.19 681.703 L1417.63 681.703 L1417.07 681.703 L1416.51 681.703 L1415.95 681.703 L1415.4 681.703 L1414.84 681.703 L1414.28 681.703 L1413.72 681.703 L1413.16 681.703 L1412.6 681.703 L1412.04 681.703 L1411.48 681.703 L1410.92 681.703 L1410.36 681.703 L1409.8 681.703 L1409.24 681.703 L1408.68 681.703 L1408.13 681.703 L1407.57 681.703 L1407.01 681.703 L1406.45 681.703 L1405.89 681.703 L1405.33 681.703 L1404.77 681.703 L1404.21 681.703 L1403.65 681.703 L1403.09 681.703 L1402.53 681.703 L1401.97 681.703 L1401.41 681.703 L1400.86 681.703 L1400.3 681.703 L1399.74 681.703 L1399.18 681.703 L1398.62 681.703 L1398.06 681.703 L1397.5 681.703 L1396.94 681.703 L1396.38 681.703 L1395.82 681.703 L1395.26 681.703 L1394.7 681.703 L1394.14 681.703 L1393.58 681.703 L1393.03 681.703 L1392.47 681.703 L1391.91 681.703 L1391.35 681.703 L1390.79 681.703 L1390.23 681.703 L1389.67 681.703 L1389.11 681.703 L1388.55 681.703 L1387.99 681.703 L1387.43 681.703 L1386.87 681.703 L1386.31 681.703 L1385.76 681.703 L1385.2 681.703 L1384.64 681.703 L1384.08 681.703 L1383.52 681.703 L1382.96 681.703 L1382.4 681.703 L1381.84 681.703 L1381.28 681.703 L1380.72 681.703 L1380.16 681.703 L1379.6 681.703 L1379.04 681.703 L1378.49 681.703 L1377.93 681.703 L1377.37 681.703 L1376.81 681.703 L1376.25 681.703 L1375.69 681.703 L1375.13 681.703 L1374.57 681.703 L1374.01 681.703 L1373.45 681.703 L1372.89 681.703 L1372.33 681.703 L1371.77 681.703 L1371.21 681.703 L1370.66 681.703 L1370.1 681.703 L1369.54 681.703 L1368.98 681.703 L1368.42 681.703 L1367.86 681.703 L1367.3 681.703 L1366.74 681.703 L1366.18 681.703 L1365.62 681.703 L1365.06 681.703 L1364.5 681.703 L1363.94 681.703 L1363.39 681.703 L1362.83 681.703 L1362.27 681.703 L1361.71 681.703 L1361.15 681.703 L1360.59 681.703 L1360.03 681.703 L1359.47 681.703 L1358.91 681.703 L1358.35 681.703 L1357.79 681.703 L1357.23 681.703 L1356.67 681.703 L1356.12 681.703 L1355.56 681.703 L1355 681.703 L1354.44 681.703 L1353.88 681.703 L1353.32 681.703 L1352.76 681.703 L1352.2 681.703 L1351.64 681.703 L1351.08 681.703 L1350.52 681.703 L1349.96 681.703 L1349.4 681.703 L1348.84 681.703 L1348.29 681.703 L1347.73 681.703 L1347.17 681.703 L1346.61 681.703 L1346.05 681.703 L1345.49 681.703 L1344.93 681.703 L1344.37 681.703 L1343.81 681.703 L1343.25 681.703 L1342.69 681.703 L1342.13 681.703 L1341.57 681.703 L1341.02 681.703 L1340.46 681.703 L1339.9 681.703 L1339.34 681.703 L1338.78 681.703 L1338.22 681.703 L1337.66 681.703 L1337.1 681.703 L1336.54 681.703 L1335.98 681.703 L1335.42 681.703 L1334.86 681.703 L1334.3 681.703 L1333.75 681.703 L1333.19 681.703 L1332.63 681.703 L1332.07 681.703 L1331.51 681.703 L1330.95 681.703 L1330.39 681.703 L1329.83 681.703 L1329.27 681.703 L1328.71 681.703 L1328.15 681.703 L1327.59 681.703 L1327.03 681.703 L1326.47 681.703 L1325.92 681.703 L1325.36 681.703 L1324.8 681.703 L1324.24 681.703 L1323.68 681.703 L1323.12 681.703 L1322.56 681.703 L1322 681.703 L1321.44 681.703 L1320.88 681.703 L1320.32 681.703 L1319.76 681.703 L1319.2 681.703 L1318.65 681.703 L1318.09 681.703 L1317.53 681.703 L1316.97 681.703 L1316.41 681.703 L1315.85 681.703 L1315.29 681.703 L1314.73 681.703 L1314.17 681.703 L1313.61 681.703 L1313.05 681.703 L1312.49 681.703 L1311.93 681.703 L1311.38 681.703 L1310.82 681.703 L1310.26 681.703 L1309.7 681.703 L1309.14 681.703 L1308.58 681.703 L1308.02 681.703 L1307.46 681.703 L1306.9 681.703 L1306.34 681.703 L1305.78 681.703 L1305.22 681.703 L1304.66 681.703 L1304.1 681.703 L1303.55 681.703 L1302.99 681.703 L1302.43 681.703 L1301.87 681.703 L1301.31 681.703 L1300.75 681.703 L1300.19 681.703 L1299.63 681.703 L1299.07 681.703 L1298.51 681.703 L1297.95 681.703 L1297.39 681.703 L1296.83 681.703 L1296.28 681.703 L1295.72 681.703 L1295.16 681.703 L1294.6 681.703 L1294.04 681.703 L1293.48 681.703 L1292.92 681.703 L1292.36 681.703 L1291.8 681.703 L1291.24 681.703 L1290.68 681.703 L1290.12 681.703 L1289.56 681.703 L1289 681.703 L1288.45 681.703 L1287.89 681.703 L1287.33 681.703 L1286.77 681.703 L1286.21 681.703 L1285.65 681.703 L1285.09 681.703 L1284.53 681.703 L1283.97 681.703 L1283.41 681.703 L1282.85 681.703 L1282.29 681.703 L1281.73 681.703 L1281.18 681.703 L1280.62 681.703 L1280.06 681.703 L1279.5 681.703 L1278.94 681.703 L1278.38 681.703 L1277.82 681.703 L1277.26 681.703 L1276.7 681.703 L1276.14 681.703 L1275.58 681.703 L1275.02 681.703 L1274.46 681.703 L1273.91 681.703 L1273.35 681.703 L1272.79 681.703 L1272.23 681.703 L1271.67 681.703 L1271.11 681.703 L1270.55 681.703 L1269.99 681.703 L1269.43 681.703 L1268.87 681.703 L1268.31 681.703 L1267.75 681.703 L1267.19 681.703 L1266.63 681.703 L1266.08 681.703 L1265.52 681.703 L1264.96 681.703 L1264.4 681.703 L1263.84 681.703 L1263.28 681.703 L1262.72 681.703 L1262.16 681.703 L1261.6 681.703 L1261.04 681.703 L1260.48 681.703 L1259.92 681.703 L1259.36 681.703 L1258.81 681.703 L1258.25 681.703 L1257.69 681.703 L1257.13 681.703 L1256.57 681.703 L1256.01 681.703 L1255.45 681.703 L1254.89 681.703 L1254.33 681.703 L1253.77 681.703 L1253.21 681.703 L1252.65 681.703 L1252.09 681.703 L1251.54 681.703 L1250.98 681.703 L1250.42 681.703 L1249.86 681.703 L1249.3 681.703 L1248.74 681.703 L1248.18 681.703 L1247.62 681.703 L1247.06 681.703 L1246.5 681.703 L1245.94 681.703 L1245.38 681.703 L1244.82 681.703 L1244.26 681.703 L1243.71 681.703 L1243.15 681.703 L1242.59 681.703 L1242.03 681.703 L1241.47 681.703 L1240.91 681.703 L1240.35 681.703 L1239.79 681.703 L1239.23 681.703 L1238.67 681.703 L1238.11 681.703 L1237.55 681.703 L1236.99 681.703 L1236.44 681.703 L1235.88 681.703 L1235.32 681.703 L1234.76 681.703 L1234.2 681.703 L1233.64 681.703 L1233.08 681.703 L1232.52 681.703 L1231.96 681.703 L1231.4 681.703 L1230.84 681.703 L1230.28 681.703 L1229.72 681.703 L1229.17 681.703 L1228.61 681.703 L1228.05 681.703 L1227.49 681.703 L1226.93 681.703 L1226.37 681.703 L1225.81 681.703 L1225.25 681.703 L1224.69 681.703 L1224.13 681.703 L1223.57 681.703 L1223.01 681.703 L1222.45 681.703 L1221.89 681.703 L1221.34 681.703 L1220.78 681.703 L1220.22 681.703 L1219.66 681.703 L1219.1 681.703 L1218.54 681.703 L1217.98 681.703 L1217.42 681.703 L1216.86 681.703 L1216.3 681.703 L1215.74 681.703 L1215.18 681.703 L1214.62 681.703 L1214.07 681.703 L1213.51 681.703 L1212.95 681.703 L1212.39 681.703 L1211.83 681.703 L1211.27 681.703 L1210.71 681.703 L1210.15 681.703 L1209.59 681.703 L1209.03 681.703 L1208.47 681.703 L1207.91 681.703 L1207.35 681.703 L1206.8 681.703 L1206.24 681.703 L1205.68 681.703 L1205.12 681.703 L1204.56 681.703 L1204 681.703 L1203.44 681.703 L1202.88 681.703 L1202.32 681.703 L1201.76 681.703 L1201.2 681.703 L1200.64 681.703 L1200.08 681.703 L1199.52 681.703 L1198.97 681.703 L1198.41 681.703 L1197.85 681.703 L1197.29 681.703 L1196.73 681.703 L1196.17 681.703 L1195.61 681.703 L1195.05 681.703 L1194.49 681.703 L1193.93 681.703 L1193.37 681.703 L1192.81 681.703 L1192.25 681.703 L1191.7 681.703 L1191.14 681.703 L1190.58 681.703 L1190.02 681.703 L1189.46 681.703 L1188.9 681.703 L1188.34 681.703 L1187.78 681.703 L1187.22 681.703 L1186.66 681.703 L1186.1 681.703 L1185.54 681.703 L1184.98 681.703 L1184.43 681.703 L1183.87 681.703 L1183.31 681.703 L1182.75 681.703 L1182.19 681.703 L1181.63 681.703 L1181.07 681.703 L1180.51 681.703 L1179.95 681.703 L1179.39 681.703 L1178.83 681.703 L1178.27 681.703 L1177.71 681.703 L1177.15 681.703 L1176.6 681.703 L1176.04 681.703 L1175.48 681.703 L1174.92 681.703 L1174.36 681.703 L1173.8 681.703 L1173.24 681.703 L1172.68 681.703 L1172.12 681.703 L1171.56 681.703 L1171 681.703 L1170.44 681.703 L1169.88 681.703 L1169.33 681.703 L1168.77 681.703 L1168.21 681.703 L1167.65 681.703 L1167.09 681.703 L1166.53 681.703 L1165.97 681.703 L1165.41 681.703 L1164.85 681.703 L1164.29 681.703 L1163.73 681.703 L1163.17 681.703 L1162.61 681.703 L1162.05 681.703 L1161.5 681.703 L1160.94 681.703 L1160.38 681.703 L1159.82 681.703 L1159.26 681.703 L1158.7 681.703 L1158.14 681.703 L1157.58 681.703 L1157.02 681.703 L1156.46 681.703 L1155.9 681.703 L1155.34 681.703 L1154.78 681.703 L1154.23 681.703 L1153.67 681.703 L1153.11 681.703 L1152.55 681.703 L1151.99 681.703 L1151.43 681.703 L1150.87 681.703 L1150.31 681.703 L1149.75 681.703 L1149.19 681.703 L1148.63 681.703 L1148.07 681.703 L1147.51 681.703 L1146.96 681.703 L1146.4 681.703 L1145.84 681.703 L1145.28 681.703 L1144.72 681.703 L1144.16 681.703 L1143.6 681.703 L1143.04 681.703 L1142.48 681.703 L1141.92 681.703 L1141.36 681.703 L1140.8 681.703 L1140.24 681.703 L1139.68 681.703 L1139.13 681.703 L1138.57 681.703 L1138.01 681.703 L1137.45 681.703 L1136.89 681.703 L1136.33 681.703 L1135.77 681.703 L1135.21 681.703 L1134.65 681.703 L1134.09 681.703 L1133.53 681.703 L1132.97 681.703 L1132.41 681.703 L1131.86 681.703 L1131.3 681.703 L1130.74 681.703 L1130.18 681.703 L1129.62 681.703 L1129.06 681.703 L1128.5 681.703 L1127.94 681.703 L1127.38 681.703 L1126.82 681.703 L1126.26 681.703 L1125.7 681.703 L1125.14 681.703 L1124.59 681.703 L1124.03 681.703 L1123.47 681.703 L1122.91 681.703 L1122.35 681.703 L1121.79 681.703 L1121.23 681.703 L1120.67 681.703 L1120.11 681.703 L1119.55 681.703 L1118.99 681.703 L1118.43 681.703 L1117.87 681.703 L1117.31 681.703 L1116.76 681.703 L1116.2 681.703 L1115.64 681.703 L1115.08 681.703 L1114.52 681.703 L1113.96 681.703 L1113.4 681.703 L1112.84 681.703 L1112.28 681.703 L1111.72 681.703 L1111.16 681.703 L1110.6 681.703 L1110.04 681.703 L1109.49 681.703 L1108.93 681.703 L1108.37 681.703 L1107.81 681.703 L1107.25 681.703 L1106.69 681.703 L1106.13 681.703 L1105.57 681.703 L1105.01 681.703 L1104.45 681.703 L1103.89 681.703 L1103.33 681.703 L1102.77 681.703 L1102.22 681.703 L1101.66 681.703 L1101.1 681.703 L1100.54 681.703 L1099.98 681.703 L1099.42 681.703 L1098.86 681.703 L1098.3 681.703 L1097.74 681.703 L1097.18 681.703 L1096.62 681.703 L1096.06 681.703 L1095.5 681.703 L1094.94 681.703 L1094.39 681.703 L1093.83 681.703 L1093.27 681.703 L1092.71 681.703 L1092.15 681.703 L1091.59 681.703 L1091.03 681.703 L1090.47 681.703 L1089.91 681.703 L1089.35 681.703 L1088.79 681.703 L1088.23 681.703 L1087.67 681.703 L1087.12 681.703 L1086.56 681.703 L1086 681.703 L1085.44 681.703 L1084.88 681.703 L1084.32 681.703 L1083.76 681.703 L1083.2 681.703 L1082.64 681.703 L1082.08 681.703 L1081.52 681.703 L1080.96 681.703 L1080.4 681.703 L1079.85 681.703 L1079.29 681.703 L1078.73 681.703 L1078.17 681.703 L1077.61 681.703 L1077.05 681.703 L1076.49 681.703 L1075.93 681.703 L1075.37 681.703 L1074.81 681.703 L1074.25 681.703 L1073.69 681.703 L1073.13 681.703 L1072.57 681.703 L1072.02 681.703 L1071.46 681.703 L1070.9 681.703 L1070.34 681.703 L1069.78 681.703 L1069.22 681.703 L1068.66 681.703 L1068.1 681.703 L1067.54 681.703 L1066.98 681.703 L1066.42 681.703 L1065.86 681.703 L1065.3 681.703 L1064.75 681.703 L1064.19 681.703 L1063.63 681.703 L1063.07 681.703 L1062.51 681.703 L1061.95 681.703 L1061.39 681.703 L1060.83 681.703 L1060.27 681.703 L1059.71 681.703 L1059.15 681.703 L1058.59 681.703 L1058.03 681.703 L1057.48 681.703 L1056.92 681.703 L1056.36 681.703 L1055.8 681.703 L1055.24 681.703 L1054.68 681.703 L1054.12 681.703 L1053.56 681.703 L1053 681.703 L1052.44 681.703 L1051.88 681.703 L1051.32 681.703 L1050.76 681.703 L1050.2 681.703 L1049.65 681.703 L1049.09 681.703 L1048.53 681.703 L1047.97 681.703 L1047.41 681.703 L1046.85 681.703 L1046.29 681.703 L1045.73 681.703 L1045.17 681.703 L1044.61 681.703 L1044.05 681.703 L1043.49 681.703 L1042.93 681.703 L1042.38 681.703 L1041.82 681.703 L1041.26 681.703 L1040.7 681.703 L1040.14 681.703 L1039.58 681.703 L1039.02 681.703 L1038.46 681.703 L1037.9 681.703 L1037.34 681.703 L1036.78 681.703 L1036.22 681.703 L1035.66 681.703 L1035.1 681.703 L1034.55 681.703 L1033.99 681.703 L1033.43 681.703 L1032.87 681.703 L1032.31 681.703 L1031.75 681.703 L1031.19 681.703 L1030.63 681.703 L1030.07 681.703 L1029.51 681.703 L1028.95 681.703 L1028.39 681.703 L1027.83 681.703 L1027.28 681.703 L1026.72 681.703 L1026.16 681.703 L1025.6 681.703 L1025.04 681.703 L1024.48 681.703 L1023.92 681.703 L1023.36 681.703 L1022.8 681.703 L1022.24 681.703 L1021.68 681.703 L1021.12 681.703 L1020.56 681.703 L1020.01 681.703 L1019.45 681.703 L1018.89 681.703 L1018.33 681.703 L1017.77 681.703 L1017.21 681.703 L1016.65 681.703 L1016.09 681.703 L1015.53 681.703 L1014.97 681.703 L1014.41 681.703 L1013.85 681.703 L1013.29 681.703 L1012.73 681.703 L1012.18 681.703 L1011.62 681.703 L1011.06 681.703 L1010.5 681.703 L1009.94 681.703 L1009.38 681.703 L1008.82 681.703 L1008.26 681.703 L1007.7 681.703 L1007.14 681.703 L1006.58 681.703 L1006.02 681.703 L1005.46 681.703 L1004.91 681.703 L1004.35 681.703 L1003.79 681.703 L1003.23 681.703 L1002.67 681.703 L1002.11 681.703 L1001.55 681.703 L1000.99 681.703 L1000.43 681.703 L999.872 681.703 L999.313 681.703 L998.754 681.703 L998.194 681.703 L997.635 681.703 L997.076 681.703 L996.517 681.703 L995.957 681.703 L995.398 681.703 L994.839 681.703 L994.28 681.703 L993.72 681.703 L993.161 681.703 L992.602 681.703 L992.043 681.703 L991.483 681.703 L990.924 681.703 L990.365 681.703 L989.806 681.703 L989.246 681.703 L988.687 681.703 L988.128 681.703 L987.569 681.703 L987.009 681.703 L986.45 681.703 L985.891 681.703 L985.332 681.703 L984.772 681.703 L984.213 681.703 L983.654 681.703 L983.095 681.703 L982.535 681.703 L981.976 681.703 L981.417 681.703 L980.858 681.703 L980.298 681.703 L979.739 681.703 L979.18 681.703 L978.621 681.703 L978.061 681.703 L977.502 681.703 L976.943 681.703 L976.384 681.703 L975.824 681.703 L975.265 681.703 L974.706 681.703 L974.147 681.703 L973.587 681.703 L973.028 681.703 L972.469 681.703 L971.91 681.703 L971.35 681.703 L970.791 681.703 L970.232 681.703 L969.673 681.703 L969.113 681.703 L968.554 681.703 L967.995 681.703 L967.436 681.703 L966.876 681.703 L966.317 681.703 L965.758 681.703 L965.199 681.703 L964.639 681.703 L964.08 681.703 L963.521 681.703 L962.962 681.703 L962.402 681.703 L961.843 681.703 L961.284 681.703 L960.725 681.703 L960.165 681.703 L959.606 681.703 L959.047 681.703 L958.488 681.703 L957.928 681.703 L957.369 681.703 L956.81 681.703 L956.251 681.703 L955.691 681.703 L955.132 681.703 L954.573 681.703 L954.014 681.703 L953.454 681.703 L952.895 681.703 L952.336 681.703 L951.777 681.703 L951.217 681.703 L950.658 681.703 L950.099 681.703 L949.54 681.703 L948.98 681.703 L948.421 681.703 L947.862 681.703 L947.303 681.703 L946.743 681.703 L946.184 681.703 L945.625 681.703 L945.066 681.703 L944.506 681.703 L943.947 681.703 L943.388 681.703 L942.829 681.703 L942.269 681.703 L941.71 681.703 L941.151 681.703 L940.592 681.703 L940.032 681.703 L939.473 681.703 L938.914 681.703 L938.355 681.703 L937.795 681.703 L937.236 681.703 L936.677 681.703 L936.118 681.703 L935.558 681.703 L934.999 681.703 L934.44 681.703 L933.881 681.703 L933.321 681.703 L932.762 681.703 L932.203 681.703 L931.644 681.703 L931.084 681.703 L930.525 681.703 L929.966 681.703 L929.406 681.703 L928.847 681.703 L928.288 681.703 L927.729 681.703 L927.169 681.703 L926.61 681.703 L926.051 681.703 L925.492 681.703 L924.932 681.703 L924.373 681.703 L923.814 681.703 L923.255 681.703 L922.695 681.703 L922.136 681.703 L921.577 681.703 L921.018 681.703 L920.458 681.703 L919.899 681.703 L919.34 681.703 L918.781 681.703 L918.221 681.703 L917.662 681.703 L917.103 681.703 L916.544 681.703 L915.984 681.703 L915.425 681.703 L914.866 681.703 L914.307 681.703 L913.747 681.703 L913.188 681.703 L912.629 681.703 L912.07 681.703 L911.51 681.703 L910.951 681.703 L910.392 681.703 L909.833 681.703 L909.273 681.703 L908.714 681.703 L908.155 681.703 L907.596 681.703 L907.036 681.703 L906.477 681.703 L905.918 681.703 L905.359 681.703 L904.799 681.703 L904.24 681.703 L903.681 681.703 L903.122 681.703 L902.562 681.703 L902.003 681.703 L901.444 681.703 L900.885 681.703 L900.325 681.703 L899.766 681.703 L899.207 681.703 L898.648 681.703 L898.088 681.703 L897.529 681.703 L896.97 681.703 L896.411 681.703 L895.851 681.703 L895.292 681.703 L894.733 681.703 L894.174 681.703 L893.614 681.703 L893.055 681.703 L892.496 681.703 L891.937 681.703 L891.377 681.703 L890.818 681.703 L890.259 681.703 L889.7 681.703 L889.14 681.703 L888.581 681.703 L888.022 681.703 L887.463 681.703 L886.903 681.703 L886.344 681.703 L885.785 681.703 L885.226 681.703 L884.666 681.703 L884.107 681.703 L883.548 681.703 L882.989 681.703 L882.429 681.703 L881.87 681.703 L881.311 681.703 L880.752 681.703 L880.192 681.703 L879.633 681.703 L879.074 681.703 L878.515 681.703 L877.955 681.703 L877.396 681.703 L876.837 681.703 L876.278 681.703 L875.718 681.703 L875.159 681.703 L874.6 681.703 L874.041 681.703 L873.481 681.703 L872.922 681.703 L872.363 681.703 L871.804 681.703 L871.244 681.703 L870.685 681.703 L870.126 681.703 L869.567 681.703 L869.007 681.703 L868.448 681.703 L867.889 681.703 L867.33 681.703 L866.77 681.703 L866.211 681.703 L865.652 681.703 L865.093 681.703 L864.533 681.703 L863.974 681.703 L863.415 681.703 L862.856 681.703 L862.296 681.703 L861.737 681.703 L861.178 681.703 L860.619 681.703 L860.059 681.703 L859.5 681.703 L858.941 681.703 L858.382 681.703 L857.822 681.703 L857.263 681.703 L856.704 681.703 L856.145 681.703 L855.585 681.703 L855.026 681.703 L854.467 681.703 L853.908 681.703 L853.348 681.703 L852.789 681.703 L852.23 681.703 L851.671 681.703 L851.111 681.703 L850.552 681.703 L849.993 681.703 L849.434 681.703 L848.874 681.703 L848.315 681.703 L847.756 681.703 L847.197 681.703 L846.637 681.703 L846.078 681.703 L845.519 681.703 L844.96 681.703 L844.4 681.703 L843.841 681.703 L843.282 681.703 L842.723 681.703 L842.163 681.703 L841.604 681.703 L841.045 681.703 L840.486 681.703 L839.926 681.703 L839.367 681.703 L838.808 681.703 L838.249 681.703 L837.689 681.703 L837.13 681.703 L836.571 681.703 L836.012 681.703 L835.452 681.703 L834.893 681.703 L834.334 681.703 L833.775 681.703 L833.215 681.703 L832.656 681.703 L832.097 681.703 L831.538 681.703 L830.978 681.703 L830.419 681.703 L829.86 681.703 L829.301 681.703 L828.741 681.703 L828.182 681.703 L827.623 681.703 L827.064 681.703 L826.504 681.703 L825.945 681.703 L825.386 681.703 L824.827 681.703 L824.267 681.703 L823.708 681.703 L823.149 681.703 L822.59 681.703 L822.03 681.703 L821.471 681.703 L820.912 681.703 L820.353 681.703 L819.793 681.703 L819.234 681.703 L818.675 681.703 L818.116 681.703 L817.556 681.703 L816.997 681.703 L816.438 681.703 L815.879 681.703 L815.319 681.703 L814.76 681.703 L814.201 681.703 L813.642 681.703 L813.082 681.703 L812.523 681.703 L811.964 681.703 L811.405 681.703 L810.845 681.703 L810.286 681.703 L809.727 681.703 L809.168 681.703 L808.608 681.703 L808.049 681.703 L807.49 681.703 L806.931 681.703 L806.371 681.703 L805.812 681.703 L805.253 681.703 L804.693 681.703 L804.134 681.703 L803.575 681.703 L803.016 681.703 L802.456 681.703 L801.897 681.703 L801.338 681.703 L800.779 681.703 L800.219 681.703 L799.66 681.703 L799.101 681.703 L798.542 681.703 L797.982 681.703 L797.423 681.703 L796.864 681.703 L796.305 681.703 L795.745 681.703 L795.186 681.703 L794.627 681.703 L794.068 681.703 L793.508 681.703 L792.949 681.703 L792.39 681.703 L791.831 681.703 L791.271 681.703 L790.712 681.703 L790.153 681.703 L789.594 681.703 L789.034 681.703 L788.475 681.703 L787.916 681.703 L787.357 681.703 L786.797 681.703 L786.238 681.703 L785.679 681.703 L785.12 681.703 L784.56 681.703 L784.001 681.703 L783.442 681.703 L782.883 681.703 L782.323 681.703 L781.764 681.703 L781.205 681.703 L780.646 681.703 L780.086 681.703 L779.527 681.703 L778.968 681.703 L778.409 681.703 L777.849 681.703 L777.29 681.703 L776.731 681.703 L776.172 681.703 L775.612 681.703 L775.053 681.703 L774.494 681.703 L773.935 681.703 L773.375 681.703 L772.816 681.703 L772.257 681.703 L771.698 681.703 L771.138 681.703 L770.579 681.703 L770.02 681.703 L769.461 681.703 L768.901 681.703 L768.342 681.703 L767.783 681.703 L767.224 681.703 L766.664 681.703 L766.105 681.703 L765.546 681.703 L764.987 681.703 L764.427 681.703 L763.868 681.703 L763.309 681.703 L762.75 681.703 L762.19 681.703 L761.631 681.703 L761.072 681.703 L760.513 681.703 L759.953 681.703 L759.394 681.703 L758.835 681.703 L758.276 681.703 L757.716 681.703 L757.157 681.703 L756.598 681.703 L756.039 681.703 L755.479 681.703 L754.92 681.703 L754.361 681.703 L753.802 681.703 L753.242 681.703 L752.683 681.703 L752.124 681.703 L751.565 681.703 L751.005 681.703 L750.446 681.703 L749.887 681.703 L749.328 681.703 L748.768 681.703 L748.209 681.703 L747.65 681.703 L747.091 681.703 L746.531 681.703 L745.972 681.703 L745.413 681.703 L744.854 681.703 L744.294 681.703 L743.735 681.703 L743.176 681.703 L742.617 681.703 L742.057 681.703 L741.498 681.703 L740.939 681.703 L740.38 681.703 L739.82 681.703 L739.261 681.703 L738.702 681.703 L738.143 681.703 L737.583 681.703 L737.024 681.703 L736.465 681.703 L735.906 681.703 L735.346 681.703 L734.787 681.703 L734.228 681.703 L733.669 681.703 L733.109 681.703 L732.55 681.703 L731.991 681.703 L731.432 681.703 L730.872 681.703 L730.313 681.703 L729.754 681.703 L729.195 681.703 L728.635 681.703 L728.076 681.703 L727.517 681.703 L726.958 681.703 L726.398 681.703 L725.839 681.703 L725.28 681.703 L724.721 681.703 L724.161 681.703 L723.602 681.703 L723.043 681.703 L722.484 681.703 L721.924 681.703 L721.365 681.703 L720.806 681.703 L720.247 681.703  Z\" fill=\"#3da44d\" fill-rule=\"evenodd\" fill-opacity=\"0.5\"/>\n<polyline clip-path=\"url(#clip483)\" style=\"stroke:#3da44d; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"720.247,682.884 720.806,682.884 721.365,682.884 721.924,682.884 722.484,682.884 723.043,682.884 723.602,682.884 724.161,682.884 724.721,682.884 725.28,682.884 725.839,682.884 726.398,682.884 726.958,682.884 727.517,682.884 728.076,682.884 728.635,682.884 729.195,682.884 729.754,682.884 730.313,682.884 730.872,682.884 731.432,682.884 731.991,682.884 732.55,682.884 733.109,682.884 733.669,682.884 734.228,682.884 734.787,682.884 735.346,682.884 735.906,682.884 736.465,682.884 737.024,682.884 737.583,682.884 738.143,682.884 738.702,682.884 739.261,682.884 739.82,682.884 740.38,682.884 740.939,682.884 741.498,682.884 742.057,682.884 742.617,682.884 743.176,682.884 743.735,682.884 744.294,682.884 744.854,682.884 745.413,682.884 745.972,682.884 746.531,682.884 747.091,682.884 747.65,682.884 748.209,682.884 748.768,682.884 749.328,682.884 749.887,682.884 750.446,682.884 751.005,682.884 751.565,682.884 752.124,682.884 752.683,682.884 753.242,682.884 753.802,682.884 754.361,682.884 754.92,682.884 755.479,682.884 756.039,682.884 756.598,682.884 757.157,682.884 757.716,682.884 758.276,682.884 758.835,682.884 759.394,682.884 759.953,682.884 760.513,682.884 761.072,682.884 761.631,682.884 762.19,682.884 762.75,682.884 763.309,682.884 763.868,682.884 764.427,682.884 764.987,682.884 765.546,682.884 766.105,682.884 766.664,682.884 767.224,682.884 767.783,682.884 768.342,682.884 768.901,682.884 769.461,682.884 770.02,682.884 770.579,682.884 771.138,682.884 771.698,682.884 772.257,682.884 772.816,682.884 773.375,682.884 773.935,682.884 774.494,682.884 775.053,682.884 775.612,682.884 776.172,682.884 776.731,682.884 777.29,682.884 777.849,682.884 778.409,682.884 778.968,682.884 779.527,682.884 780.086,682.884 780.646,682.884 781.205,682.884 781.764,682.884 782.323,682.884 782.883,682.884 783.442,682.884 784.001,682.884 784.56,682.884 785.12,682.884 785.679,682.884 786.238,682.884 786.797,682.884 787.357,682.884 787.916,682.884 788.475,682.884 789.034,682.884 789.594,682.884 790.153,682.884 790.712,682.884 791.271,682.884 791.831,682.884 792.39,682.884 792.949,682.884 793.508,682.884 794.068,682.884 794.627,682.884 795.186,682.884 795.745,682.884 796.305,682.884 796.864,682.884 797.423,682.884 797.982,682.884 798.542,682.884 799.101,682.884 799.66,682.884 800.219,682.884 800.779,682.884 801.338,682.884 801.897,682.884 802.456,682.884 803.016,682.884 803.575,682.884 804.134,682.884 804.693,682.884 805.253,682.884 805.812,682.884 806.371,682.884 806.931,682.884 807.49,682.884 808.049,682.884 808.608,682.884 809.168,682.884 809.727,682.884 810.286,682.884 810.845,682.884 811.405,682.884 811.964,682.884 812.523,682.884 813.082,682.884 813.642,682.884 814.201,682.884 814.76,682.884 815.319,682.884 815.879,682.884 816.438,682.884 816.997,682.884 817.556,682.884 818.116,682.884 818.675,682.884 819.234,682.884 819.793,682.884 820.353,682.884 820.912,682.884 821.471,682.884 822.03,682.884 822.59,682.884 823.149,682.884 823.708,682.884 824.267,682.884 824.827,682.884 825.386,682.884 825.945,682.884 826.504,682.884 827.064,682.884 827.623,682.884 828.182,682.884 828.741,682.884 829.301,682.884 829.86,682.884 830.419,682.884 830.978,682.884 831.538,682.884 832.097,682.884 832.656,682.884 833.215,682.884 833.775,682.884 834.334,682.884 834.893,682.884 835.452,682.884 836.012,682.884 836.571,682.884 837.13,682.884 837.689,682.884 838.249,682.884 838.808,682.884 839.367,682.884 839.926,682.884 840.486,682.884 841.045,682.884 841.604,682.884 842.163,682.884 842.723,682.884 843.282,682.884 843.841,682.884 844.4,682.884 844.96,682.884 845.519,682.884 846.078,682.884 846.637,682.884 847.197,682.884 847.756,682.884 848.315,682.884 848.874,682.884 849.434,682.884 849.993,682.884 850.552,682.884 851.111,682.884 851.671,682.884 852.23,682.884 852.789,682.884 853.348,682.884 853.908,682.884 854.467,682.884 855.026,682.884 855.585,682.884 856.145,682.884 856.704,682.884 857.263,682.884 857.822,682.884 858.382,682.884 858.941,682.884 859.5,682.884 860.059,682.884 860.619,682.884 861.178,682.884 861.737,682.884 862.296,682.884 862.856,682.884 863.415,682.884 863.974,682.884 864.533,682.884 865.093,682.884 865.652,682.884 866.211,682.884 866.77,682.884 867.33,682.884 867.889,682.884 868.448,682.884 869.007,682.884 869.567,682.884 870.126,682.884 870.685,682.884 871.244,682.884 871.804,682.884 872.363,682.884 872.922,682.884 873.481,682.884 874.041,682.884 874.6,682.884 875.159,682.884 875.718,682.884 876.278,682.884 876.837,682.884 877.396,682.884 877.955,682.884 878.515,682.884 879.074,682.884 879.633,682.884 880.192,682.884 880.752,682.884 881.311,682.884 881.87,682.884 882.429,682.884 882.989,682.884 883.548,682.884 884.107,682.884 884.666,682.884 885.226,682.884 885.785,682.884 886.344,682.884 886.903,682.884 887.463,682.884 888.022,682.884 888.581,682.884 889.14,682.884 889.7,682.884 890.259,682.884 890.818,682.884 891.377,682.884 891.937,682.884 892.496,682.884 893.055,682.884 893.614,682.884 894.174,682.884 894.733,682.884 895.292,682.884 895.851,682.884 896.411,682.884 896.97,682.884 897.529,682.884 898.088,682.884 898.648,682.884 899.207,682.884 899.766,682.884 900.325,682.884 900.885,682.884 901.444,682.884 902.003,682.884 902.562,682.884 903.122,682.884 903.681,682.884 904.24,682.884 904.799,682.884 905.359,682.884 905.918,682.884 906.477,682.884 907.036,682.884 907.596,682.884 908.155,682.884 908.714,682.884 909.273,682.884 909.833,682.884 910.392,682.884 910.951,682.884 911.51,682.884 912.07,682.884 912.629,682.884 913.188,682.884 913.747,682.884 914.307,682.884 914.866,682.884 915.425,682.884 915.984,682.884 916.544,682.884 917.103,682.884 917.662,682.884 918.221,682.884 918.781,682.884 919.34,682.884 919.899,682.884 920.458,682.884 921.018,682.884 921.577,682.884 922.136,682.884 922.695,682.884 923.255,682.884 923.814,682.884 924.373,682.884 924.932,682.884 925.492,682.884 926.051,682.884 926.61,682.884 927.169,682.884 927.729,682.884 928.288,682.884 928.847,682.884 929.406,682.884 929.966,682.884 930.525,682.884 931.084,682.884 931.644,682.884 932.203,682.884 932.762,682.884 933.321,682.884 933.881,682.884 934.44,682.884 934.999,682.884 935.558,682.884 936.118,682.884 936.677,682.884 937.236,682.884 937.795,682.884 938.355,682.884 938.914,682.884 939.473,682.884 940.032,682.884 940.592,682.884 941.151,682.884 941.71,682.884 942.269,682.884 942.829,682.884 943.388,682.884 943.947,682.884 944.506,682.884 945.066,682.884 945.625,682.884 946.184,682.884 946.743,682.884 947.303,682.884 947.862,682.884 948.421,682.884 948.98,682.884 949.54,682.884 950.099,682.884 950.658,682.884 951.217,682.884 951.777,682.884 952.336,682.884 952.895,682.884 953.454,682.884 954.014,682.884 954.573,682.884 955.132,682.884 955.691,682.884 956.251,682.884 956.81,682.884 957.369,682.884 957.928,682.884 958.488,682.884 959.047,682.884 959.606,682.884 960.165,682.884 960.725,682.884 961.284,682.884 961.843,682.884 962.402,682.884 962.962,682.884 963.521,682.884 964.08,682.884 964.639,682.884 965.199,682.884 965.758,682.884 966.317,682.884 966.876,682.884 967.436,682.884 967.995,682.884 968.554,682.884 969.113,682.884 969.673,682.884 970.232,682.884 970.791,682.884 971.35,682.884 971.91,682.884 972.469,682.884 973.028,682.884 973.587,682.884 974.147,682.884 974.706,682.884 975.265,682.884 975.824,682.884 976.384,682.884 976.943,682.884 977.502,682.884 978.061,682.884 978.621,682.884 979.18,682.884 979.739,682.884 980.298,682.884 980.858,682.884 981.417,682.884 981.976,682.884 982.535,682.884 983.095,682.884 983.654,682.884 984.213,682.884 984.772,682.884 985.332,682.884 985.891,682.884 986.45,682.884 987.009,682.884 987.569,682.884 988.128,682.884 988.687,682.884 989.246,682.884 989.806,682.884 990.365,682.884 990.924,682.884 991.483,682.884 992.043,682.884 992.602,682.884 993.161,682.884 993.72,682.884 994.28,682.884 994.839,682.884 995.398,682.884 995.957,682.884 996.517,682.884 997.076,682.884 997.635,682.884 998.194,682.884 998.754,682.884 999.313,682.884 999.872,682.884 1000.43,682.884 1000.99,682.884 1001.55,682.884 1002.11,682.884 1002.67,682.884 1003.23,682.884 1003.79,682.884 1004.35,682.884 1004.91,682.884 1005.46,682.884 1006.02,682.884 1006.58,682.884 1007.14,682.884 1007.7,682.884 1008.26,682.884 1008.82,682.884 1009.38,682.884 1009.94,682.884 1010.5,682.884 1011.06,682.884 1011.62,682.884 1012.18,682.884 1012.73,682.884 1013.29,682.884 1013.85,682.884 1014.41,682.884 1014.97,682.884 1015.53,682.884 1016.09,682.884 1016.65,682.884 1017.21,682.884 1017.77,682.884 1018.33,682.884 1018.89,682.884 1019.45,682.884 1020.01,682.884 1020.56,682.884 1021.12,682.884 1021.68,682.884 1022.24,682.884 1022.8,682.884 1023.36,682.884 1023.92,682.884 1024.48,682.884 1025.04,682.884 1025.6,682.884 1026.16,682.884 1026.72,682.884 1027.28,682.884 1027.83,682.884 1028.39,682.884 1028.95,682.884 1029.51,682.884 1030.07,682.884 1030.63,682.884 1031.19,682.884 1031.75,682.884 1032.31,682.884 1032.87,682.884 1033.43,682.884 1033.99,682.884 1034.55,682.884 1035.1,682.884 1035.66,682.884 1036.22,682.884 1036.78,682.884 1037.34,682.884 1037.9,682.884 1038.46,682.884 1039.02,682.884 1039.58,682.884 1040.14,682.884 1040.7,682.884 1041.26,682.884 1041.82,682.884 1042.38,682.884 1042.93,682.884 1043.49,682.884 1044.05,682.884 1044.61,682.884 1045.17,682.884 1045.73,682.884 1046.29,682.884 1046.85,682.884 1047.41,682.884 1047.97,682.884 1048.53,682.884 1049.09,682.884 1049.65,682.884 1050.2,682.884 1050.76,682.884 1051.32,682.884 1051.88,682.884 1052.44,682.884 1053,682.884 1053.56,682.884 1054.12,682.884 1054.68,682.884 1055.24,682.884 1055.8,682.884 1056.36,682.884 1056.92,682.884 1057.48,682.884 1058.03,682.884 1058.59,682.884 1059.15,682.884 1059.71,682.884 1060.27,682.884 1060.83,682.884 1061.39,682.884 1061.95,682.884 1062.51,682.884 1063.07,682.884 1063.63,682.884 1064.19,682.884 1064.75,682.884 1065.3,682.884 1065.86,682.884 1066.42,682.884 1066.98,682.884 1067.54,682.884 1068.1,682.884 1068.66,682.884 1069.22,682.884 1069.78,682.884 1070.34,682.884 1070.9,682.884 1071.46,682.884 1072.02,682.884 1072.57,682.884 1073.13,682.884 1073.69,682.884 1074.25,682.884 1074.81,682.884 1075.37,682.884 1075.93,682.884 1076.49,682.884 1077.05,682.884 1077.61,682.884 1078.17,682.884 1078.73,682.884 1079.29,682.884 1079.85,682.884 1080.4,682.884 1080.96,682.884 1081.52,682.884 1082.08,682.884 1082.64,682.884 1083.2,682.884 1083.76,682.884 1084.32,682.884 1084.88,682.884 1085.44,682.884 1086,682.884 1086.56,682.884 1087.12,682.884 1087.67,682.884 1088.23,682.884 1088.79,682.884 1089.35,682.884 1089.91,682.884 1090.47,682.884 1091.03,682.884 1091.59,682.884 1092.15,682.884 1092.71,682.884 1093.27,682.884 1093.83,682.884 1094.39,682.884 1094.94,682.884 1095.5,682.884 1096.06,682.884 1096.62,682.884 1097.18,682.884 1097.74,682.884 1098.3,682.884 1098.86,682.884 1099.42,682.884 1099.98,682.884 1100.54,682.884 1101.1,682.884 1101.66,682.884 1102.22,682.884 1102.77,682.884 1103.33,682.884 1103.89,682.884 1104.45,682.884 1105.01,682.884 1105.57,682.884 1106.13,682.884 1106.69,682.884 1107.25,682.884 1107.81,682.884 1108.37,682.884 1108.93,682.884 1109.49,682.884 1110.04,682.884 1110.6,682.884 1111.16,682.884 1111.72,682.884 1112.28,682.884 1112.84,682.884 1113.4,682.884 1113.96,682.884 1114.52,682.884 1115.08,682.884 1115.64,682.884 1116.2,682.884 1116.76,682.884 1117.31,682.884 1117.87,682.884 1118.43,682.884 1118.99,682.884 1119.55,682.884 1120.11,682.884 1120.67,682.884 1121.23,682.884 1121.79,682.884 1122.35,682.884 1122.91,682.884 1123.47,682.884 1124.03,682.884 1124.59,682.884 1125.14,682.884 1125.7,682.884 1126.26,682.884 1126.82,682.884 1127.38,682.884 1127.94,682.884 1128.5,682.884 1129.06,682.884 1129.62,682.884 1130.18,682.884 1130.74,682.884 1131.3,682.884 1131.86,682.884 1132.41,682.884 1132.97,682.884 1133.53,682.884 1134.09,682.884 1134.65,682.884 1135.21,682.884 1135.77,682.884 1136.33,682.884 1136.89,682.884 1137.45,682.884 1138.01,682.884 1138.57,682.884 1139.13,682.884 1139.68,682.884 1140.24,682.884 1140.8,682.884 1141.36,682.884 1141.92,682.884 1142.48,682.884 1143.04,682.884 1143.6,682.884 1144.16,682.884 1144.72,682.884 1145.28,682.884 1145.84,682.884 1146.4,682.884 1146.96,682.884 1147.51,682.884 1148.07,682.884 1148.63,682.884 1149.19,682.884 1149.75,682.884 1150.31,682.884 1150.87,682.884 1151.43,682.884 1151.99,682.884 1152.55,682.884 1153.11,682.884 1153.67,682.884 1154.23,682.884 1154.78,682.884 1155.34,682.884 1155.9,682.884 1156.46,682.884 1157.02,682.884 1157.58,682.884 1158.14,682.884 1158.7,682.884 1159.26,682.884 1159.82,682.884 1160.38,682.884 1160.94,682.884 1161.5,682.884 1162.05,682.884 1162.61,682.884 1163.17,682.884 1163.73,682.884 1164.29,682.884 1164.85,682.884 1165.41,682.884 1165.97,682.884 1166.53,682.884 1167.09,682.884 1167.65,682.884 1168.21,682.884 1168.77,682.884 1169.33,682.884 1169.88,682.884 1170.44,682.884 1171,682.884 1171.56,682.884 1172.12,682.884 1172.68,682.884 1173.24,682.884 1173.8,682.884 1174.36,682.884 1174.92,682.884 1175.48,682.884 1176.04,682.884 1176.6,682.884 1177.15,682.884 1177.71,682.884 1178.27,682.884 1178.83,682.884 1179.39,682.884 1179.95,682.884 1180.51,682.884 1181.07,682.884 1181.63,682.884 1182.19,682.884 1182.75,682.884 1183.31,682.884 1183.87,682.884 1184.43,682.884 1184.98,682.884 1185.54,682.884 1186.1,682.884 1186.66,682.884 1187.22,682.884 1187.78,682.884 1188.34,682.884 1188.9,682.884 1189.46,682.884 1190.02,682.884 1190.58,682.884 1191.14,682.884 1191.7,682.884 1192.25,682.884 1192.81,682.884 1193.37,682.884 1193.93,682.884 1194.49,682.884 1195.05,682.884 1195.61,682.884 1196.17,682.884 1196.73,682.884 1197.29,682.884 1197.85,682.884 1198.41,682.884 1198.97,682.884 1199.52,682.884 1200.08,682.884 1200.64,682.884 1201.2,682.884 1201.76,682.884 1202.32,682.884 1202.88,682.884 1203.44,682.884 1204,682.884 1204.56,682.884 1205.12,682.884 1205.68,682.884 1206.24,682.884 1206.8,682.884 1207.35,682.884 1207.91,682.884 1208.47,682.884 1209.03,682.884 1209.59,682.884 1210.15,682.884 1210.71,682.884 1211.27,682.884 1211.83,682.884 1212.39,682.884 1212.95,682.884 1213.51,682.884 1214.07,682.884 1214.62,682.884 1215.18,682.884 1215.74,682.884 1216.3,682.884 1216.86,682.884 1217.42,682.884 1217.98,682.884 1218.54,682.884 1219.1,682.884 1219.66,682.884 1220.22,682.884 1220.78,682.884 1221.34,682.884 1221.89,682.884 1222.45,682.884 1223.01,682.884 1223.57,682.884 1224.13,682.884 1224.69,682.884 1225.25,682.884 1225.81,682.884 1226.37,682.884 1226.93,682.884 1227.49,682.884 1228.05,682.884 1228.61,682.884 1229.17,682.884 1229.72,682.884 1230.28,682.884 1230.84,682.884 1231.4,682.884 1231.96,682.884 1232.52,682.884 1233.08,682.884 1233.64,682.884 1234.2,682.884 1234.76,682.884 1235.32,682.884 1235.88,682.884 1236.44,682.884 1236.99,682.884 1237.55,682.884 1238.11,682.884 1238.67,682.884 1239.23,682.884 1239.79,682.884 1240.35,682.884 1240.91,682.884 1241.47,682.884 1242.03,682.884 1242.59,682.884 1243.15,682.884 1243.71,682.884 1244.26,682.884 1244.82,682.884 1245.38,682.884 1245.94,682.884 1246.5,682.884 1247.06,682.884 1247.62,682.884 1248.18,682.884 1248.74,682.884 1249.3,682.884 1249.86,682.884 1250.42,682.884 1250.98,682.884 1251.54,682.884 1252.09,682.884 1252.65,682.884 1253.21,682.884 1253.77,682.884 1254.33,682.884 1254.89,682.884 1255.45,682.884 1256.01,682.884 1256.57,682.884 1257.13,682.884 1257.69,682.884 1258.25,682.884 1258.81,682.884 1259.36,682.884 1259.92,682.884 1260.48,682.884 1261.04,682.884 1261.6,682.884 1262.16,682.884 1262.72,682.884 1263.28,682.884 1263.84,682.884 1264.4,682.884 1264.96,682.884 1265.52,682.884 1266.08,682.884 1266.63,682.884 1267.19,682.884 1267.75,682.884 1268.31,682.884 1268.87,682.884 1269.43,682.884 1269.99,682.884 1270.55,682.884 1271.11,682.884 1271.67,682.884 1272.23,682.884 1272.79,682.884 1273.35,682.884 1273.91,682.884 1274.46,682.884 1275.02,682.884 1275.58,682.884 1276.14,682.884 1276.7,682.884 1277.26,682.884 1277.82,682.884 1278.38,682.884 1278.94,682.884 1279.5,682.884 1280.06,682.884 1280.62,682.884 1281.18,682.884 1281.73,682.884 1282.29,682.884 1282.85,682.884 1283.41,682.884 1283.97,682.884 1284.53,682.884 1285.09,682.884 1285.65,682.884 1286.21,682.884 1286.77,682.884 1287.33,682.884 1287.89,682.884 1288.45,682.884 1289,682.884 1289.56,682.884 1290.12,682.884 1290.68,682.884 1291.24,682.884 1291.8,682.884 1292.36,682.884 1292.92,682.884 1293.48,682.884 1294.04,682.884 1294.6,682.884 1295.16,682.884 1295.72,682.884 1296.28,682.884 1296.83,682.884 1297.39,682.884 1297.95,682.884 1298.51,682.884 1299.07,682.884 1299.63,682.884 1300.19,682.884 1300.75,682.884 1301.31,682.884 1301.87,682.884 1302.43,682.884 1302.99,682.884 1303.55,682.884 1304.1,682.884 1304.66,682.884 1305.22,682.884 1305.78,682.884 1306.34,682.884 1306.9,682.884 1307.46,682.884 1308.02,682.884 1308.58,682.884 1309.14,682.884 1309.7,682.884 1310.26,682.884 1310.82,682.884 1311.38,682.884 1311.93,682.884 1312.49,682.884 1313.05,682.884 1313.61,682.884 1314.17,682.884 1314.73,682.884 1315.29,682.884 1315.85,682.884 1316.41,682.884 1316.97,682.884 1317.53,682.884 1318.09,682.884 1318.65,682.884 1319.2,682.884 1319.76,682.884 1320.32,682.884 1320.88,682.884 1321.44,682.884 1322,682.884 1322.56,682.884 1323.12,682.884 1323.68,682.884 1324.24,682.884 1324.8,682.884 1325.36,682.884 1325.92,682.884 1326.47,682.884 1327.03,682.884 1327.59,682.884 1328.15,682.884 1328.71,682.884 1329.27,682.884 1329.83,682.884 1330.39,682.884 1330.95,682.884 1331.51,682.884 1332.07,682.884 1332.63,682.884 1333.19,682.884 1333.75,682.884 1334.3,682.884 1334.86,682.884 1335.42,682.884 1335.98,682.884 1336.54,682.884 1337.1,682.884 1337.66,682.884 1338.22,682.884 1338.78,682.884 1339.34,682.884 1339.9,682.884 1340.46,682.884 1341.02,682.884 1341.57,682.884 1342.13,682.884 1342.69,682.884 1343.25,682.884 1343.81,682.884 1344.37,682.884 1344.93,682.884 1345.49,682.884 1346.05,682.884 1346.61,682.884 1347.17,682.884 1347.73,682.884 1348.29,682.884 1348.84,682.884 1349.4,682.884 1349.96,682.884 1350.52,682.884 1351.08,682.884 1351.64,682.884 1352.2,682.884 1352.76,682.884 1353.32,682.884 1353.88,682.884 1354.44,682.884 1355,682.884 1355.56,682.884 1356.12,682.884 1356.67,682.884 1357.23,682.884 1357.79,682.884 1358.35,682.884 1358.91,682.884 1359.47,682.884 1360.03,682.884 1360.59,682.884 1361.15,682.884 1361.71,682.884 1362.27,682.884 1362.83,682.884 1363.39,682.884 1363.94,682.884 1364.5,682.884 1365.06,682.884 1365.62,682.884 1366.18,682.884 1366.74,682.884 1367.3,682.884 1367.86,682.884 1368.42,682.884 1368.98,682.884 1369.54,682.884 1370.1,682.884 1370.66,682.884 1371.21,682.884 1371.77,682.884 1372.33,682.884 1372.89,682.884 1373.45,682.884 1374.01,682.884 1374.57,682.884 1375.13,682.884 1375.69,682.884 1376.25,682.884 1376.81,682.884 1377.37,682.884 1377.93,682.884 1378.49,682.884 1379.04,682.884 1379.6,682.884 1380.16,682.884 1380.72,682.884 1381.28,682.884 1381.84,682.884 1382.4,682.884 1382.96,682.884 1383.52,682.884 1384.08,682.884 1384.64,682.884 1385.2,682.884 1385.76,682.884 1386.31,682.884 1386.87,682.884 1387.43,682.884 1387.99,682.884 1388.55,682.884 1389.11,682.884 1389.67,682.884 1390.23,682.884 1390.79,682.884 1391.35,682.884 1391.91,682.884 1392.47,682.884 1393.03,682.884 1393.58,682.884 1394.14,682.884 1394.7,682.884 1395.26,682.884 1395.82,682.884 1396.38,682.884 1396.94,682.884 1397.5,682.884 1398.06,682.884 1398.62,682.884 1399.18,682.884 1399.74,682.884 1400.3,682.884 1400.86,682.884 1401.41,682.884 1401.97,682.884 1402.53,682.884 1403.09,682.884 1403.65,682.884 1404.21,682.884 1404.77,682.884 1405.33,682.884 1405.89,682.884 1406.45,682.884 1407.01,682.884 1407.57,682.884 1408.13,682.884 1408.68,682.884 1409.24,682.884 1409.8,682.884 1410.36,682.884 1410.92,682.884 1411.48,682.884 1412.04,682.884 1412.6,682.884 1413.16,682.884 1413.72,682.884 1414.28,682.884 1414.84,682.884 1415.4,682.884 1415.95,682.884 1416.51,682.884 1417.07,682.884 1417.63,682.884 1418.19,682.884 1418.75,682.884 1419.31,682.884 1419.87,682.884 1420.43,682.884 1420.99,682.884 1421.55,682.884 1422.11,682.884 1422.67,682.884 1423.23,682.884 1423.78,682.884 1424.34,682.884 1424.9,682.884 1425.46,682.884 1426.02,682.884 1426.58,682.884 1427.14,682.884 1427.7,682.884 1428.26,682.884 1428.82,682.884 1429.38,682.884 1429.94,682.884 1430.5,682.884 1431.05,682.884 1431.61,682.884 1432.17,682.884 1432.73,682.884 1433.29,682.884 1433.85,682.884 1434.41,682.884 1434.97,682.884 1435.53,682.884 1436.09,682.884 1436.65,682.884 1437.21,682.884 1437.77,682.884 1438.33,682.884 1438.88,682.884 1439.44,682.884 1440,682.884 1440.56,682.884 1441.12,682.884 1441.68,682.884 1442.24,682.884 1442.8,682.884 1443.36,682.884 1443.92,682.884 1444.48,682.884 1445.04,682.884 1445.6,682.884 1446.15,682.884 1446.71,682.884 1447.27,682.884 1447.83,682.884 1448.39,682.884 1448.95,682.884 1449.51,682.884 1450.07,682.884 1450.63,682.884 1451.19,682.884 1451.75,682.884 1452.31,682.884 1452.87,682.884 1453.42,682.884 1453.98,682.884 1454.54,682.884 1455.1,682.884 1455.66,682.884 1456.22,682.884 1456.78,682.884 1457.34,682.884 1457.9,682.884 1458.46,682.884 1459.02,682.884 1459.58,682.884 1460.14,682.884 1460.7,682.884 1461.25,682.884 1461.81,682.884 1462.37,682.884 1462.93,682.884 1463.49,682.884 1464.05,682.884 1464.61,682.884 1465.17,682.884 1465.73,682.884 1466.29,682.884 1466.85,682.884 1467.41,682.884 1467.97,682.884 1468.52,682.884 1469.08,682.884 1469.64,682.884 1470.2,682.884 1470.76,682.884 1471.32,682.884 1471.88,682.884 1472.44,682.884 1473,682.884 1473.56,682.884 1474.12,682.884 1474.68,682.884 1475.24,682.884 1475.79,682.884 1476.35,682.884 1476.91,682.884 1477.47,682.884 1478.03,682.884 1478.59,682.884 1479.15,682.884 1479.71,682.884 1480.27,682.884 1480.83,682.884 1481.39,682.884 1481.95,682.884 1482.51,682.884 1483.07,682.884 1483.62,682.884 1484.18,682.884 1484.74,682.884 1485.3,682.884 1485.86,682.884 1486.42,682.884 1486.98,682.884 1487.54,682.884 1488.1,682.884 1488.66,682.884 1489.22,682.884 1489.78,682.884 1490.34,682.884 1490.89,682.884 1491.45,682.884 1492.01,682.884 1492.57,682.884 1493.13,682.884 1493.69,682.884 1494.25,682.884 1494.81,682.884 1495.37,682.884 1495.93,682.884 1496.49,682.884 1497.05,682.884 1497.61,682.884 1498.16,682.884 1498.72,682.884 1499.28,682.884 1499.84,682.884 1500.4,682.884 1500.96,682.884 1501.52,682.884 1502.08,682.884 1502.64,682.884 1503.2,682.884 1503.76,682.884 1504.32,682.884 1504.88,682.884 1505.44,682.884 1505.99,682.884 1506.55,682.884 1507.11,682.884 1507.67,682.884 1508.23,682.884 1508.79,682.884 1509.35,682.884 1509.91,682.884 1510.47,682.884 1511.03,682.884 1511.59,682.884 1512.15,682.884 1512.71,682.884 1513.26,682.884 1513.82,682.884 1514.38,682.884 1514.94,682.884 1515.5,682.884 1516.06,682.884 1516.62,682.884 1517.18,682.884 1517.74,682.884 1518.3,682.884 1518.86,682.884 1519.42,682.884 1519.98,682.884 1520.53,682.884 1521.09,682.884 1521.65,682.884 1522.21,682.884 1522.77,682.884 1523.33,682.884 1523.89,682.884 1524.45,682.884 1525.01,682.884 1525.57,682.884 1526.13,682.884 1526.69,682.884 1527.25,682.884 1527.81,682.884 1528.36,682.884 1528.92,682.884 1529.48,682.884 1530.04,682.884 1530.6,682.884 1531.16,682.884 1531.72,682.884 1532.28,682.884 1532.84,682.884 1533.4,682.884 1533.96,682.884 1534.52,682.884 1535.08,682.884 1535.63,682.884 1536.19,682.884 1536.75,682.884 1537.31,682.884 1537.87,682.884 1538.43,682.884 1538.99,682.884 1539.55,682.884 1540.11,682.884 1540.67,682.884 1541.23,682.884 1541.79,682.884 1542.35,682.884 1542.9,682.884 1543.46,682.884 1544.02,682.884 1544.58,682.884 1545.14,682.884 1545.7,682.884 1546.26,682.884 1546.82,682.884 1547.38,682.884 1547.94,682.884 1548.5,682.884 1549.06,682.884 1549.62,682.884 1550.18,682.884 1550.73,682.884 1551.29,682.884 1551.85,682.884 1552.41,682.884 1552.97,682.884 1553.53,682.884 1554.09,682.884 1554.65,682.884 1555.21,682.884 1555.77,682.884 1556.33,682.884 1556.89,682.884 1557.45,682.884 1558,682.884 1558.56,682.884 1559.12,682.884 1559.68,682.884 1560.24,682.884 1560.8,682.884 1561.36,682.884 1561.92,682.884 1562.48,682.884 1563.04,682.884 1563.6,682.884 1564.16,682.884 1564.72,682.884 1565.28,682.884 1565.83,682.884 1566.39,682.884 1566.95,682.884 1567.51,682.884 1568.07,682.884 1568.63,682.884 1569.19,682.884 1569.75,682.884 1570.31,682.884 1570.87,682.884 1571.43,682.884 1571.99,682.884 1572.55,682.884 1573.1,682.884 1573.66,682.884 1574.22,682.884 1574.78,682.884 1575.34,682.884 1575.9,682.884 1576.46,682.884 1577.02,682.884 1577.58,682.884 1578.14,682.884 1578.7,682.884 1579.26,682.884 1579.82,682.884 1580.37,682.884 1580.93,682.884 1581.49,682.884 1582.05,682.884 1582.61,682.884 1583.17,682.884 1583.73,682.884 1584.29,682.884 1584.85,682.884 1585.41,682.884 1585.97,682.884 1586.53,682.884 1587.09,682.884 1587.65,682.884 1588.2,682.884 1588.76,682.884 1589.32,682.884 1589.88,682.884 1590.44,682.884 1591,682.884 1591.56,682.884 1592.12,682.884 1592.68,682.884 1593.24,682.884 1593.8,682.884 1594.36,682.884 1594.92,682.884 1595.47,682.884 1596.03,682.884 1596.59,682.884 1597.15,682.884 1597.71,682.884 1598.27,682.884 1598.83,682.884 1599.39,682.884 1599.95,682.884 1600.51,682.884 1601.07,682.884 1601.63,682.884 1602.19,682.884 1602.74,682.884 1603.3,682.884 1603.86,682.884 1604.42,682.884 1604.98,682.884 1605.54,682.884 1606.1,682.884 1606.66,682.884 1607.22,682.884 1607.78,682.884 1608.34,682.884 1608.9,682.884 1609.46,682.884 1610.02,682.884 1610.57,682.884 1611.13,682.884 1611.69,682.884 1612.25,682.884 1612.81,682.884 1613.37,682.884 1613.93,682.884 1614.49,682.884 1615.05,682.884 1615.61,682.884 1616.17,682.884 1616.73,682.884 1617.29,682.884 1617.84,682.884 1618.4,682.884 1618.96,682.884 1619.52,682.884 1620.08,682.884 1620.64,682.884 1621.2,682.884 1621.76,682.884 1622.32,682.884 1622.88,682.884 1623.44,682.884 1624,682.884 1624.56,682.884 1625.11,682.884 1625.67,682.884 1626.23,682.884 1626.79,682.884 1627.35,682.884 1627.91,682.884 1628.47,682.884 1629.03,682.884 1629.59,682.884 1630.15,682.884 1630.71,682.884 1631.27,682.884 1631.83,682.884 1632.39,682.884 1632.94,682.884 1633.5,682.884 1634.06,682.884 1634.62,682.884 1635.18,682.884 1635.74,682.884 1636.3,682.884 1636.86,682.884 1637.42,682.884 1637.98,682.884 1638.54,682.884 1639.1,682.884 1639.66,682.884 1640.21,682.884 1640.77,682.884 1641.33,682.884 1641.89,682.884 1642.45,682.884 1643.01,682.884 1643.57,682.884 1644.13,682.884 1644.69,682.884 1645.25,682.884 1645.81,682.884 1646.37,682.884 1646.93,682.884 1647.48,682.884 1648.04,682.884 1648.6,682.884 1649.16,682.884 1649.72,682.884 1650.28,682.884 1650.84,682.884 1651.4,682.884 1651.96,682.884 1652.52,682.884 1653.08,682.884 1653.64,682.884 1654.2,682.884 1654.76,682.884 1655.31,682.884 1655.87,682.884 1656.43,682.884 1656.99,682.884 1657.55,682.884 1658.11,682.884 1658.67,682.884 1659.23,682.884 1659.79,682.884 1660.35,682.884 1660.91,682.884 1661.47,682.884 1662.03,682.884 1662.58,682.884 1663.14,682.884 1663.7,682.884 1664.26,682.884 1664.82,682.884 1665.38,682.884 1665.94,682.884 1666.5,682.884 1667.06,682.884 1667.62,682.884 1668.18,682.884 1668.74,682.884 1669.3,682.884 1669.85,682.884 1670.41,682.884 1670.97,682.884 1671.53,682.884 1672.09,682.884 1672.65,682.884 1673.21,682.884 1673.77,682.884 1674.33,682.884 1674.89,682.884 1675.45,682.884 1676.01,682.884 1676.57,682.884 1677.13,682.884 1677.68,682.884 1678.24,682.884 1678.8,682.884 1679.36,682.884 1679.92,682.884 1680.48,682.884 1681.04,682.884 1681.6,682.884 1682.16,682.884 1682.72,682.884 1683.28,682.884 1683.84,682.884 1684.4,682.884 1684.95,682.884 1685.51,682.884 1686.07,682.884 1686.63,682.884 1687.19,682.884 1687.75,682.884 1688.31,682.884 1688.87,682.884 1689.43,682.884 1689.99,682.884 1690.55,682.884 1691.11,682.884 1691.67,682.884 1692.23,682.884 1692.78,682.884 1693.34,682.884 1693.9,682.884 1694.46,682.884 1695.02,682.884 1695.58,682.884 1696.14,682.884 1696.7,682.884 1697.26,682.884 1697.82,682.884 1698.38,682.884 1698.94,682.884 1699.5,682.884 1700.05,682.884 1700.61,682.884 1701.17,682.884 1701.73,682.884 1702.29,682.884 1702.85,682.884 1703.41,682.884 1703.97,682.884 1704.53,682.884 1705.09,682.884 1705.65,682.884 1706.21,682.884 1706.77,682.884 1707.32,682.884 1707.88,682.884 1708.44,682.884 1709,682.884 1709.56,682.884 1710.12,682.884 1710.68,682.884 1711.24,682.884 1711.8,682.884 1712.36,682.884 1712.92,682.884 1713.48,682.884 1714.04,682.884 1714.6,682.884 1715.15,682.884 1715.71,682.884 1716.27,682.884 1716.83,682.884 1717.39,682.884 1717.95,682.884 1718.51,682.884 1719.07,682.884 1719.63,682.884 1720.19,682.884 1720.75,682.884 1721.31,682.884 1721.87,682.884 1722.42,682.884 1722.98,682.884 1723.54,682.884 1724.1,682.884 1724.66,682.884 1725.22,682.884 1725.78,682.884 1726.34,682.884 1726.9,682.884 1727.46,682.884 1728.02,682.884 1728.58,682.884 1729.14,682.884 1729.69,682.884 1730.25,682.884 1730.81,682.884 1731.37,682.884 1731.93,682.884 1732.49,682.884 1733.05,682.884 1733.61,682.884 1734.17,682.884 1734.73,682.884 1735.29,682.884 1735.85,682.884 1736.41,682.884 1736.97,682.884 1737.52,682.884 1738.08,682.884 1738.64,682.884 1739.2,682.884 1739.76,682.884 1740.32,682.884 1740.88,682.884 1741.44,682.884 1742,682.884 1742.56,682.884 1743.12,682.884 1743.68,682.884 1744.24,682.884 1744.79,682.884 1745.35,682.884 1745.91,682.884 1746.47,682.884 1747.03,682.884 1747.59,682.884 1748.15,682.884 1748.71,682.884 1749.27,682.884 1749.83,682.884 1750.39,682.884 1750.95,682.884 1751.51,682.884 1752.06,682.884 1752.62,682.884 1753.18,682.884 1753.74,682.884 1754.3,682.884 1754.86,682.884 1755.42,682.884 1755.98,682.884 1756.54,682.884 1757.1,682.884 1757.66,682.884 1758.22,682.884 1758.78,682.884 1759.34,682.884 1759.89,682.884 1760.45,682.884 1761.01,682.884 1761.57,682.884 1762.13,682.884 1762.69,682.884 1763.25,682.884 1763.81,682.884 1764.37,682.884 1764.93,682.884 1765.49,682.884 1766.05,682.884 1766.61,682.884 1767.16,682.884 1767.72,682.884 1768.28,682.884 1768.84,682.884 1769.4,682.884 1769.96,682.884 1770.52,682.884 1771.08,682.884 1771.64,682.884 1772.2,682.884 1772.76,682.884 1773.32,682.884 1773.88,682.884 1774.43,682.884 1774.99,682.884 1775.55,682.884 1776.11,682.884 1776.67,682.884 1777.23,682.884 1777.79,682.884 1778.35,682.884 1778.91,682.884 1779.47,682.884 1780.03,682.884 1780.59,682.884 1781.15,682.884 1781.71,682.884 1782.26,682.884 1782.82,682.884 1783.38,682.884 1783.94,682.884 1784.5,682.884 1785.06,682.884 1785.62,682.884 1786.18,682.884 1786.74,682.884 1787.3,682.884 1787.86,682.884 1788.42,682.884 1788.98,682.884 1789.53,682.884 1790.09,682.884 1790.65,682.884 1791.21,682.884 1791.77,682.884 1792.33,682.884 1792.89,682.884 1793.45,682.884 1794.01,682.884 1794.57,682.884 1795.13,682.884 1795.69,682.884 1796.25,682.884 1796.8,682.884 1797.36,682.884 1797.92,682.884 1798.48,682.884 1799.04,682.884 1799.6,682.884 1800.16,682.884 1800.72,682.884 1801.28,682.884 1801.84,682.884 1802.4,682.884 1802.96,682.884 1803.52,682.884 1804.08,682.884 1804.63,682.884 1805.19,682.884 1805.75,682.884 1806.31,682.884 1806.87,682.884 1807.43,682.884 1807.99,682.884 1808.55,682.884 1809.11,682.884 1809.67,682.884 1810.23,682.884 1810.79,682.884 1811.35,682.884 1811.9,682.884 1812.46,682.884 1813.02,682.884 1813.58,682.884 1814.14,682.884 1814.7,682.884 1815.26,682.884 1815.82,682.884 1816.38,682.884 1816.94,682.884 1817.5,682.884 1818.06,682.884 1818.62,682.884 1819.18,682.884 1819.73,682.884 1820.29,682.884 1820.85,682.884 1821.41,682.884 1821.97,682.884 1822.53,682.884 1823.09,682.884 1823.65,682.884 1824.21,682.884 1824.77,682.884 1825.33,682.884 1825.89,682.884 1826.45,682.884 1827,682.884 1827.56,682.884 1828.12,682.884 1828.68,682.884 1829.24,682.884 1829.8,682.884 1830.36,682.884 1830.92,682.884 1831.48,682.884 1832.04,682.884 1832.6,682.884 1833.16,682.884 1833.72,682.884 1834.27,682.884 1834.83,682.884 1835.39,682.884 1835.95,682.884 1836.51,682.884 1837.07,682.884 1837.63,682.884 1838.19,682.884 \"/>\n</svg>\n","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"In this case the projected energy and the shift are close to each other and the error bars are hard to see.","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"The problem was just a toy example, as the dimension of the Hamiltonian is rather small:","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"dimension(H)","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"462","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"In this case, it's easy (and more efficient) to calculate the exact ground state energy using standard linear algebra. Read more about Rimu's capabilities for exact diagonalization in the example \"Exact diagonalization\".","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"edp = ExactDiagonalizationProblem(H)\nexact_energy = solve(edp).values[1]","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"-4.021502406906473","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"We finish by comparing our FCIQMC results with the exact computation.","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"println(\n    \"\"\"\n    Energy from $steps_measure steps with $target_walkers walkers:\n    Shift: $(se.mean) ± $(se.err)\n    Projected Energy: $(v.val) ± ($(v.val_l), $(v.val_u))\n    Exact Energy: $exact_energy\n    \"\"\"\n)\n\n","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"Energy from 2000 steps with 1000 walkers:\nShift: -4.029059417312698 ± 0.021780550421102655\nProjected Energy: -4.011557370578022 ± (0.00609934912993193, 0.0059449649140495)\nExact Energy: -4.021502406906473\n\n","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"This page was generated using Literate.jl.","category":"page"},{"location":"statstools.html#Module-StatsTools","page":"StatsTools","title":"Module StatsTools","text":"","category":"section"},{"location":"statstools.html","page":"StatsTools","title":"StatsTools","text":"The  module StatsTools contains helper function for analysis and post processing of Monte Carlo data.","category":"page"},{"location":"statstools.html#Blocking-analysis","page":"StatsTools","title":"Blocking analysis","text":"","category":"section"},{"location":"statstools.html","page":"StatsTools","title":"StatsTools","text":"After equilibration, FCIQMC produces information about observables through correlated time series. In order to estimate the statistical errors the time series need to be decorrelated. The main workhorse for achieving this is the blocking_analysis, which is based on the paper by Flyvberg and Peterson JCP (1989), and automated with the M test of Jonsson PRE (2018).","category":"page"},{"location":"statstools.html","page":"StatsTools","title":"StatsTools","text":"Analysing the stochastic errors of observables obtained from the ratio of sample means is done with ratio_of_means, where error propagation of correlated uncertainties is done with the help of the package MonteCarloMeasurements.","category":"page"},{"location":"statstools.html","page":"StatsTools","title":"StatsTools","text":"Many convenience functions are implemented for directly analysing data obtained from solve as a DataFrame. See, e.g., shift_estimator and projected_energy. Asymptotically unbiased estimators are implemented as mixed_estimator, growth_estimator and rayleigh_replica_estimator.","category":"page"},{"location":"statstools.html#Exported","page":"StatsTools","title":"Exported","text":"","category":"section"},{"location":"statstools.html","page":"StatsTools","title":"StatsTools","text":"Modules = [StatsTools]\nPages = [\"StatsTools.jl\", \"blocking.jl\", \"ratio_of_means.jl\", \"convenience.jl\",\n  \"variances.jl\", \"growth_witness.jl\", \"reweighting.jl\", \"fidelity.jl\", \"variational_energy_estimator.jl\"\n]\nPrivate = false","category":"page"},{"location":"statstools.html#Rimu.StatsTools","page":"StatsTools","title":"Rimu.StatsTools","text":"Tools for the statistical analysis of Monte Carlo data.\n\nExports:\n\nblocking_analysis\nblocking_analysis_data\nratio_of_means\ngrowth_witness\nsmoothen\nshift_estimator\nprojected_energy\nvariational_energy_estimator\ngrowth_estimator\ngrowth_estimator_analysis\nmixed_estimator\nmixed_estimator_analysis\nrayleigh_replica_estimator\nrayleigh_replica_estimator_analysis\nval_and_errs\nval\nmean_and_se\n\n\n\n\n\n","category":"module"},{"location":"statstools.html#Rimu.StatsTools.blocking_analysis-Tuple{AbstractVector}","page":"StatsTools","title":"Rimu.StatsTools.blocking_analysis","text":"blocking_analysis(v::AbstractVector; α = 0.01, corrected = true, skip=0, warn=true)\n-> BlockingResult(mean, err, err_err, p_cov, k, blocks)\n\nCompute the sample mean mean and estimate the standard deviation of the mean (standard error) err of a correlated time series. It uses the blocking algorithm from Flyvberg and Peterson JCP (1989) and the M test of Jonsson PRE (2018) at significance level 1-α.\n\nUse skip to skip the first skip elements in v. corrected controls whether bias correction for variances is used. If decorrelating the time series fails according to the M test, NaN is returned as the standard error and -1 for k. The keyword argument warn controls whether a warning message is logged.\n\nThe summary result is returned as a BlockingResult. k - 1 is the number of blocking transformations required to pass the hypothesis test for an uncorrelated time series and err_err the estimated standard error or err.\n\nThe detailed results from each reblocking step can be obtained with blocking_analysis_data.\n\nSee BlockingResult, shift_estimator, ratio_of_means, blocking_analysis_data.\n\n\n\n\n\n","category":"method"},{"location":"statstools.html#Rimu.StatsTools.blocking_analysis_data-Tuple{AbstractVector}","page":"StatsTools","title":"Rimu.StatsTools.blocking_analysis_data","text":"blocking_analysis_data(v::AbstractVector; kwargs...) ->\n(; br::BlockingResult, df::DataFrame)\n\nPerform a blocking_analysis and return the summary result br as well as a DataFrame df with information about the standard error in each blocking step.\n\nFor a description of the keyword arguments see blocking_analysis.\n\nExample\n\njulia> data = smoothen(rand(10_000), 2^6); # generate correlated data\n\njulia> br, df = blocking_analysis_data(data)\n(br = BlockingResult{Float64}\n  mean = 0.5088 ± 0.0029\n  with uncertainty of ± 0.00023454488294744232\n  from 78 blocks after 7 transformations (k = 8).\n, df = 13×6 DataFrame\n Row │ blocks  mean      std_err      std_err_err  p_cov       mj\n     │ Int64   Float64   Float64      Float64      Float64     Float64\n─────┼──────────────────────────────────────────────────────────────────────\n   1 │  10000  0.508806  0.000375044  2.6521e-6    1.40658e-7  9715.08\n   2 │   5000  0.508806  0.000528547  5.28599e-6   2.79361e-7  4778.14\n   3 │   2500  0.508806  0.000743386  1.05152e-5   5.52622e-7  2298.64\n   4 │   1250  0.508806  0.00104064   2.08212e-5   1.08293e-6  1056.24\n   5 │    625  0.508806  0.00144177   4.08121e-5   2.07871e-6   427.949\n   6 │    312  0.508736  0.00194209   7.78707e-5   3.77171e-6   128.711\n   7 │    156  0.508736  0.00247921   0.00014081   6.14647e-6    17.3075\n   8 │     78  0.508736  0.00291063   0.000234545  8.47174e-6     0.731386\n   9 │     39  0.508736  0.00284613   0.000326474  8.10046e-6     0.901054\n  10 │     19  0.508241  0.0026998    0.000449967  7.28892e-6     2.85915\n  11 │      9  0.507939  0.00359907   0.000899766  1.29533e-5     1.08644\n  12 │      4  0.509327  0.00440559   0.00179857   1.94092e-5     0.0370381\n  13 │      2  0.509327  0.00432708   0.00305971   1.87237e-5     0.125)\n\njulia> using StatsPlots; unicodeplots();\n\njulia> plot([br.k,br.k],[0.0,maximum(df.std_err.+df.std_err_err)], label=\"m test\");\n\njulia> @df df plot!(\n           1:length(:std_err), :std_err;\n           err=:std_err_err, xlabel=\"k\", label=\"std err\",\n           title=\"std err vs blocking steps\"\n       )\n               ⠀⠀⠀⠀⠀⠀⠀⠀⠀std err vs blocking steps⠀⠀⠀⠀⠀⠀⠀⠀\n               ┌────────────────────────────────────────┐\n    0.00423501 │⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⡀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⢠⠀⠀⠀⠀│ m test\n               │⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⡇⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⢀⠀⠀⢸⠀⠀⠀⠀│ std err\n               │⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⡇⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⢸⠀⠀⢸⠀⠀⠀⠀│\n               │⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⡇⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⢸⠀⠀⢸⠀⠀⠀⠀│\n               │⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⡇⠀⠀⠀⠀⠀⠀⠀⠀⡇⠀⡠⢺⠒⠒⢺⠀⠀⠀⠀│\n               │⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⡇⠀⠀⡀⠀⠀⡆⣀⠤⡗⠉⠀⢸⠀⠀⢸⡆⠀⠀⠀│\n               │⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⢀⡧⠤⠔⡗⠊⠉⡏⠀⠀⡇⠀⠀⢸⠀⠀⢸⢣⠀⠀⠀│\n               │⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⢀⠔⠁⡇⠀⠀⠁⠀⠀⠁⠀⠀⠁⠀⠀⠀⠀⠀⢸⠸⡀⠀⠀│\n               │⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⢀⠴⠁⠀⠀⡇⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠸⠀⡇⠀⠀│\n               │⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⢀⠔⠁⠀⠀⠀⠀⡇⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⢸⠀⠀│\n               │⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⢀⠔⠊⠀⠀⠀⠀⠀⠀⡇⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠈⣦⠀│\n               │⠀⠀⠀⠀⠀⠀⠀⠀⡠⠔⠒⠁⠀⠀⠀⠀⠀⠀⠀⠀⡇⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⢹⠀│\n               │⠀⠀⠀⢀⣀⠤⠒⠉⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⡇⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⢸⠀│\n               │⠀⠒⠉⠁⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⡇⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⢸⠀│\n   -0.00012335 │⠤⠤⠤⠤⠤⠤⠤⠤⠤⠤⠤⠤⠤⠤⠤⠤⠤⠤⠤⠤⠧⠤⠤⠤⠤⠤⠤⠤⠤⠤⠤⠤⠤⠤⠤⠤⠤⠤⠤⠤│\n               └────────────────────────────────────────┘\n               ⠀0.64⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀k⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀13.36⠀\n\nA vertical line at k==8 indicates the blocking step identified by hypothesis testing to decorrelate the time series data. The decorrelation length can thus be estimated at 2^k-1 = 2^7 = 128. Note that the data was correlated with a sliding window of 2^6 steps.\n\nSee blocking_analysis, BlockingResult.\n\n\n\n\n\n","category":"method"},{"location":"statstools.html#Rimu.StatsTools.mean_and_se-Tuple{Rimu.StatsTools.BlockingResult}","page":"StatsTools","title":"Rimu.StatsTools.mean_and_se","text":"mean_and_se(v::AbstractVector; α = 0.01, corrected::Bool=true, skip=0) -> mean, err\nmean_and_se(r::BlockingResult) -> mean, err\n\nReturn the mean and standard error (as a tuple) of a time series obtained from blocking_analysis. See also BlockingResult.\n\n\n\n\n\n","category":"method"},{"location":"statstools.html#Statistics.cov-Tuple{Rimu.StatsTools.BlockingResult{<:Complex}}","page":"StatsTools","title":"Statistics.cov","text":"cov(r::BlockingResult{<:Complex})\n\nReturn the covariance matrix of the multivariate normal distribution approximating the uncertainty of the blocking result r of a complex time series. See (https://en.wikipedia.org/wiki/Complexnormaldistribution).\n\n\n\n\n\n","category":"method"},{"location":"statstools.html#Rimu.StatsTools.ratio_of_means-Tuple{Any, Any}","page":"StatsTools","title":"Rimu.StatsTools.ratio_of_means","text":"ratio_of_means(num, denom; α=0.01, corrected=true, mc_samples=nothing, skip=0, warn=true)\n-> r::RatioBlockingResult\n\nEstimate the ratio of mean(num)/mean(denom) assuming that num and denom are possibly correlated time series, skipping the first skip elements. A blocking analysis with m-test is used to uncorrelate the time series, see blocking_analysis. The remaining standard error and correlation of the means is propagated using MonteCarloMeasurements. The results are reported as a RatioBlockingResult.\n\nRobust estimates for the ratio are obtained from pmedian(r) and confidence intervals from pquantile(), e.g. pquantile(r, [0.025, 0.975]) for the 95% confidence interval.\n\nEstimates from linear uncertainty propagation are returned as r.f and r.σ_f using x_by_y_linear. The standard error estimate r.σ_f should only be trusted when the coefficient of variation std(denom)/mean(denom) is small: abs(r.δ_y) < 0.1. Under this condition can the ratio be approximated as a normal distribution. See wikipedia and Díaz-Francés, Rubio (2013)\n\nThe keyword mc_samples controls the number of samples used for error propagation by MonteCarloMeasurements. Use nothing for the default and Val(1000) to set the number to 1000 samples in a type-consistent way.\n\nThe keyword warn controls whether warning messages are logged when blocking fails or noisy denominators are encountered.\n\nNote: to compute statistics on the RatioBlockingResult, use functions pmedian, pquantile, pmiddle, piterate, pextrema, pminimum, pmaximum, pmean, and pcov.\n\n\n\n\n\n","category":"method"},{"location":"statstools.html#Rimu.StatsTools.errs-Tuple","page":"StatsTools","title":"Rimu.StatsTools.errs","text":"errs(x; n=1, p=nothing, name=:err) -> (; err_l, err_u)\n\nReturn the lower and upper error bar for the uncertain value x.\n\nSee val_and_errs.\n\n\n\n\n\n","category":"method"},{"location":"statstools.html#Rimu.StatsTools.to_measurement-Tuple{MonteCarloMeasurements.Particles}","page":"StatsTools","title":"Rimu.StatsTools.to_measurement","text":"to_measurement(p::MonteCarloMeasurements.Particles) -> ::Measurements.measurement\n\nConvert an uncertain number from MonteCarloMeasurements  to Measurements format  using the median as the central point. The new ± boundaries will include  the 68% quantile around the median.\n\n\n\n\n\n","category":"method"},{"location":"statstools.html#Rimu.StatsTools.val-Tuple{Any}","page":"StatsTools","title":"Rimu.StatsTools.val","text":"val(x)\n\nReturn the best estimate value for an uncertain x. Defaults to the median for uncertain x represented by a (sampled) distribution. Supports  MonteCarloMeasurements and Measurements.\n\nSee errs, BlockingResult, RatioBlockingResult.\n\n\n\n\n\n","category":"method"},{"location":"statstools.html#Rimu.StatsTools.val_and_errs-Tuple{Any}","page":"StatsTools","title":"Rimu.StatsTools.val_and_errs","text":"val_and_errs(x; n=1, p=nothing, name=:val) -> (;val, val_l, val_u)\n\nReturn the median and the lower and upper error bar for the uncertain value x as a NamedTuple. This is useful for plotting scripts. The interval [val - val_l, val + val_u] represents the confidence interval at level n*σ, or at probability p. Setting p overrides n. Supports  MonteCarloMeasurements and Measurements. The  names in the NamedTuple can be changed with name.\n\nExample:\n\njulia> results = [blocking_analysis(i:0.1:2i+20) for i in 1:3]; # mock results\n\njulia> v = val_and_errs.(results, name=\"res\"); # Vector of NamedTuple's with standard errors\n\njulia> DataFrame(v)\n3×3 DataFrame\n Row │ res      res_l    res_u\n     │ Float64  Float64  Float64\n─────┼───────────────────────────\n   1 │    11.5  1.7282   1.7282\n   2 │    13.0  1.7282   1.7282\n   3 │    14.5  1.78885  1.78885\n\nSee NamedTuple, val, errs, BlockingResult, RatioBlockingResult.\n\n\n\n\n\n","category":"method"},{"location":"statstools.html#Rimu.StatsTools.growth_witness","page":"StatsTools","title":"Rimu.StatsTools.growth_witness","text":"growth_witness(df::DataFrame, [b];\n    shift=:shift,\n    norm=:norm,\n    time_step=determine_constant_time_step(df),\n    skip=0\n)\ngrowth_witness(sim::PMCSimulation, [b]; kwargs...)\n\nCalculate the growth witness directly from the result (DataFrame or PMCSimulation) of solveing a ProjectorMonteCarloProblem. The keyword arguments shift and norm can be used to change the names of the relevant columns.\n\n\n\n\n\n","category":"function"},{"location":"statstools.html#Rimu.StatsTools.growth_witness-Tuple{AbstractArray, AbstractArray, Any}","page":"StatsTools","title":"Rimu.StatsTools.growth_witness","text":"growth_witness(shift::AbstractArray, norm::AbstractArray, dt, [b]; skip=0)\n\nCompute the growth witness\n\nG^(n) = S^(n) - fracvertmathbfc^(n+1)vert -\n          vertmathbfc^(n)vertvertmathbfc^(n)vert dtau\n\nwhere S is the shift and vertmathbfc^(n)vert == norm[n, 1]. Setting b ≥ 1 a sliding average over b time steps is computed using smoothen(). The first skip time steps are skipped. mean(growth_witness) is approximately the same as growth_estimator with h=0.\n\nSee also growth_estimator.\n\n\n\n\n\n","category":"method"},{"location":"statstools.html#Rimu.StatsTools.smoothen-Tuple{AbstractVector, Integer}","page":"StatsTools","title":"Rimu.StatsTools.smoothen","text":"smoothen(noisy::AbstractVector, b)\n\nSmoothen the array noisy by averaging over a sliding window of length b and wrapping noisy periodically. The mean(noisy) is preserved.\n\n\n\n\n\n","category":"method"},{"location":"statstools.html#Rimu.StatsTools.growth_estimator-NTuple{4, Any}","page":"StatsTools","title":"Rimu.StatsTools.growth_estimator","text":"growth_estimator(\n    shift, wn, h, time_step;\n    skip = 0,\n    E_r = mean(shift[skip+1:end]),\n    weights = w_exp,\n    change_type = identity,\n    kwargs...\n)\ngrowth_estimator(\n    df::DataFrame, h;\n    shift_name=:shift,\n    norm_name=:norm,\n    time_step=determine_constant_time_step(df),\n    kwargs...\n)\ngrowth_estimator(sim::PMCSimulation; kwargs...)\n-> r::RatioBlockingResult\n\nCompute the growth estimator with reference energy E_r by the reweighting technique described in Umrigar et al. (1993), see Eq. (20). shift and wn are equal length vectors containing the shift and walker number time series, respectively.  Reweighting is done over h time steps and length(shift) - skip time steps are used for the blocking analysis done with ratio_of_means. weights is a function that calulates the weights. See w_exp and w_lin.\n\nE_gr = E_r - frac1dτln\n    fracsum_n w_h+1^(n+1) N_mathrmw^(n+1)\n        sum_m w_h^(m) N_mathrmw^(m) \n\nwhere dτ is the time_step\n\nWhen h is greater than the autocorrelation time scale of the shift, then E_gr (returned as r.ratio) is an unbiased but approximate estimator for the ground state energy E_0 with an error mathcalO(dτ^2) and potentially increased confidence intervals compared to the (biased) shift estimator.  Error propagation is done with MonteCarloMeasurements. Propagation through the logarithm can be modified by setting change_type to to_measurement in order to avoid NaN results from negative outliers.\n\nIf success==true the blocking analysis was successful in k-1 steps, using blocks uncorrelated data points.\n\nThe second method calculates the growth estimator directly from a PMCSimulation or DataFrame returned by solve. The keyword arguments shift_name and norm_name can be used to change the names of the relevant columns.\n\nSee also mixed_estimator and RatioBlockingResult.\n\n\n\n\n\n","category":"method"},{"location":"statstools.html#Rimu.StatsTools.growth_estimator_analysis-Tuple{Any}","page":"StatsTools","title":"Rimu.StatsTools.growth_estimator_analysis","text":"growth_estimator_analysis(df::DataFrame; kwargs...)\ngrowth_estimator_analysis(sim::PMCSimulation; kwargs...)\n-> (; df_ge, correlation_estimate, se, se_l, se_u)\n\nCompute the growth_estimator on a DataFrame df or PMCSimulation sim. repeatedly over a range of reweighting depths.\n\nReturns a NamedTuple with the fields\n\ndf_ge: DataFrame with reweighting depth and growth_estiamator data. See example below.\ncorrelation_estimate: estimated correlation time from blocking analysis\nse, se_l, se_u: shift_estimator and error\n\nKeyword arguments\n\nh_range: The default is about h_values values from 0 to twice the estimated correlation time\nh_values = 100: minimum number of reweighting depths\nskip = 0: initial time steps to exclude from averaging\nthreading = Threads.nthreads() > 1: if false a progress meter is displayed\nshift_name = :shift name of column in df with shift data\nnorm_name = :norm name of column in df with walkernumber data\nwarn = true whether to log warning messages when blocking fails or denominators are small\n\nExample\n\nsim = solve(...)\ndf_ge, correlation_estimate, se, se_l, se_u = growth_estimator_analysis(sim; skip=5_000)\n\nusing StatsPlots\n@df df_ge plot(_ -> se, :h, ribbon = (se_l, se_u), label = \"⟨S⟩\") # constant line and ribbon for shift estimator\n@df df_ge plot!(:h, :val, ribbon = (:val_l, :val_u), label=\"E_gr\") # growth estimator as a function of reweighting depth\nxlabel!(\"h\")\n\nSee also: growth_estimator, mixed_estimator_analysis.\n\n\n\n\n\n","category":"method"},{"location":"statstools.html#Rimu.StatsTools.mixed_estimator-Tuple{AbstractVector, AbstractVector, AbstractVector, Any, Any}","page":"StatsTools","title":"Rimu.StatsTools.mixed_estimator","text":"mixed_estimator(\n    hproj, vproj, shift, h, time_step;\n    skip = 0,\n    E_r = mean(shift[skip+1:end]),\n    weights = w_exp,\n    kwargs...\n)\nmixed_estimator(\n    df::DataFrame, h;\n    hproj_name=:hproj,\n    vproj_name=:vproj,\n    shift_name=:shift,\n    time_step=determine_constant_time_step(df),\n    kwargs...\n)\nmixed_estimator(sim::PMCSimulation, h; kwargs...)\n-> r::RatioBlockingResult\n\nCompute the mixed estimator by the reweighting technique described in Umrigar et al. (1993), Eq. (19)\n\nE_mathrmmix = fracsum_n w_h^(n)  (Hmathbfv)mathbfc^(n)\n        sum_m w_h^(m)  mathbfvmathbfc^(m) \n\nwhere the time series hproj == (Hmathbfv)mathbfc^(n) and vproj == mathbfvmathbfc^(m) have the same length as shift (See ProjectedEnergy on how to set these up).  Reweighting is done over h time steps and length(shift) - skip time steps are used for the blocking analysis done with ratio_of_means. weights is a function that calulates the weights. See w_exp and w_lin.  Additional keyword arguments are passed on to ratio_of_means.\n\nWhen h is greater than the autocorrelation time scale of the shift, then r.ratio is an unbiased but approximate estimator for the ground state energy E_0 with an error mathcalO(dτ^2), where dτ is the time_step, and potentially increased confidence intervals compared to the unweighted ratio.  Error propagation is done with MonteCarloMeasurements. Results are returned as RatioBlockingResult.\n\nThe second method calculates the mixed energy estimator directly from a DataFrame or PMCSimulation returned by solve. The keyword arguments hproj_name, vproj_name, and shift_name can be used to change the names of the relevant columns.\n\nSee also growth_estimator.\n\n\n\n\n\n","category":"method"},{"location":"statstools.html#Rimu.StatsTools.mixed_estimator_analysis-Tuple{DataFrame}","page":"StatsTools","title":"Rimu.StatsTools.mixed_estimator_analysis","text":"mixed_estimator_analysis(df::DataFrame; kwargs...)\nmixed_estimator_analysis(sim::PMCSimulation; kwargs...)\n-> (; df_me, correlation_estimate, se, se_l, se_u)\n\nCompute the mixed_estimator on a DataFrame df or PMCSimulation sim returned from solve repeatedly over a range of reweighting depths.\n\nReturns a NamedTuple with the fields\n\ndf_me: DataFrame with reweighting depth and mixed_estiamator data. See example below.\ncorrelation_estimate: estimated correlation time from blocking analysis\nse, se_l, se_u: shift_estimator and error\n\nKeyword arguments\n\nh_range: The default is about h_values values from 0 to twice the estimated correlation time\nh_values = 100: minimum number of reweighting depths\nskip = 0: initial time steps to exclude from averaging\nthreading = Threads.nthreads() > 1: if false a progress meter is displayed\nshift_name = :shift name of column in df with shift data\nhproj_name = :hproj name of column in df with operator overlap data\nvproj_name = :vproj name of column in df with projector overlap data\nwarn = true whether to log warning messages when blocking fails or denominators are small\n\nExample\n\nsim = solve(...)\ndf_me, correlation_estimate, se, se_l, se_u = mixed_estimator_analysis(sim; skip=5_000)\n\nusing StatsPlots\n@df df_me plot(_ -> se, :h, ribbon = (se_l, se_u), label = \"⟨S⟩\") # constant line and ribbon for shift estimator\n@df df_me plot!(:h, :val, ribbon = (:val_l, :val_u), label=\"E_mix\") # mixed estimator as a function of reweighting depth\nxlabel!(\"h\")\n\nSee also: mixed_estimator, growth_estimator_analysis.\n\n\n\n\n\n","category":"method"},{"location":"statstools.html#Rimu.StatsTools.projected_energy-Tuple{Any}","page":"StatsTools","title":"Rimu.StatsTools.projected_energy","text":"projected_energy(df::DataFrame; skip=0, hproj=:hproj, vproj=:vproj, kwargs...)\nprojected_energy(sim::PMCSimulation; kwargs...)\n-> r::RatioBlockingResult\n\nCompute the projected energy estimator\n\nE_mathrmp = fracsum_n  mathbfvHmathbfc^(n)\n        sum_m mathbfvmathbfc^(m) \n\nwhere the time series df.hproj == mathbfvHmathbfc^(n) and df.vproj == mathbfvmathbfc^(m) are taken from df, skipping the first skip entries (use post_step_strategy =ProjectedEnergy(...) to set these up in ProjectorMonteCarloProblem). projected_energy is equivalent to mixed_estimator with h=0.\n\nThe keyword arguments hproj and vproj can be used to change the names of the relevant columns. Other kwargs are passed on to ratio_of_means. Returns a RatioBlockingResult.\n\nSee NamedTuple, val_and_errs, val, errs for processing results.\n\n\n\n\n\n","category":"method"},{"location":"statstools.html#Rimu.StatsTools.rayleigh_replica_estimator-Tuple{Vector, Vector, Vector, Any, Any}","page":"StatsTools","title":"Rimu.StatsTools.rayleigh_replica_estimator","text":"rayleigh_replica_estimator(\n    op_ol, vec_ol, shift, h, time_step;\n    skip = 0,\n    E_r = mean(shift[skip+1:end]),\n    weights = w_exp,\n    kwargs...\n)\nrayleigh_replica_estimator(\n    df::DataFrame;\n    shift_name=\"shift\",\n    op_name=\"Op1\",\n    vec_name=\"dot\",\n    h=0,\n    skip=0,\n    Anorm=1,\n    kwargs...\n)\nrayleigh_replica_estimator(sim::PMCSimulation; kwargs...)\n-> r::RatioBlockingResult\n\nCompute the estimator of a Rayleigh quotient of operator hatA with reweighting,\n\nA_mathrmest(h) = fracsum_ab sum_n w_ha^(n) w_hb^(n)\n    mathbfc_a^(n) cdot hatA cdot mathbfc_b^(n)\n    sum_ab sum_n w_ha^(n) w_hb^(n) mathbfc_a^(n) cdot mathbfc_b^(n)\n\nusing data from multiple replicas.\n\nArgument op_ol holds data for the operator overlap mathbfc_a^(n) hatA mathbfc_b^(n) and vec_ol holds data for the vector overlap mathbfc_a^(n) mathbfc_b^(n). They are of type Vector{Vector}, with each element Vector holding the data for a pair of replicas. Argument shift is of type Vector{Vector}, with each element Vector holding the shift data for each individual replica.\n\nThe second method computes the Rayleigh quotient directly from a DataFrame or PMCSimulation returned by solve. The keyword arguments shift_name, op_name and vec_name can be used to change the names of the relevant columns, see AllOverlaps for default formatting. The operator overlap data can be scaled by a prefactor Anorm. A specific reweighting depth can be set with keyword argument h. The default is h = 0 which calculates the Rayleigh quotient without reweighting.\n\nThe reweighting is an extension of the mixed estimator using the reweighting technique described in Umrigar et al. (1993). Reweighting is done over h time steps and length(shift) - skip time steps are used for the blocking analysis done with ratio_of_means. weights is a function that calulates the weights. See w_exp and w_lin. Additional keyword arguments are passed on to ratio_of_means.\n\nError propagation is done with MonteCarloMeasurements. Results are returned as RatioBlockingResult.\n\nSee also mixed_estimator, growth_estimator.\n\n\n\n\n\n","category":"method"},{"location":"statstools.html#Rimu.StatsTools.rayleigh_replica_estimator_analysis-Tuple{Any}","page":"StatsTools","title":"Rimu.StatsTools.rayleigh_replica_estimator_analysis","text":"rayleigh_replica_estimator_analysis(df::DataFrame; kwargs...)\nrayleigh_replica_estimator_analysis(sim::PMCSimulation; kwargs...)\n-> (; df_rre, df_se)\n\nCompute the rayleigh_replica_estimator on a DataFrame df or PMCSimulation sim returned from solve repeatedly over a range of reweighting depths.\n\nReturns a NamedTuple with the fields\n\ndf_rre: DataFrame with reweighting depth and rayleigh_replica_estimator data. See example below.\ndf_se: DataFrame with shift_estimator output, one row per replica\n\nKeyword arguments\n\nh_range: The default is about h_values values from 0 to twice the estimated correlation time\nh_values = 100: minimum number of reweighting depths\nskip = 0: initial time steps to exclude from averaging\nthreading = Threads.nthreads() > 1: if false a progress meter is displayed\nshift_name = \"shift\": shift data corresponding to column in df with names <shift>_1, ...\nop_name = \"Op1\": name of operator overlap corresponding to column in df with names c1_<op_ol>_c2, ...\nvec_name = \"dot\": name of vector-vector overlap corresponding to column in df with names c1_<vec_ol>_c2, ...\nAnorm = 1: a scalar prefactor to scale the operator overlap data\nwarn = true: whether to log warning messages when blocking fails or denominators are small\n\nExample\n\nsim = solve(...)\ndf_rre, df_se = rayleigh_replica_estimator_analysis(sim; skip=5_000)\n\nusing StatsPlots\n@df df_rre plot(_ -> se, :h, ribbon = (se_l, se_u), label = \"⟨S⟩\") # constant line and ribbon for shift estimator\n@df df_rre plot!(:h, :val, ribbon = (:val_l, :val_u), label=\"E_mix\") # Rayleigh quotient estimator as a function of reweighting depth\nxlabel!(\"h\")\n\nSee also: rayleigh_replica_estimator, mixed_estimator_analysis, AllOverlaps.\n\n\n\n\n\n","category":"method"},{"location":"statstools.html#Rimu.StatsTools.shift_estimator-Tuple{Any}","page":"StatsTools","title":"Rimu.StatsTools.shift_estimator","text":"shift_estimator(df::DataFrame; shift=:shift, kwargs...)\nshift_estimator(sim::PMCSimulation; kwargs...)\n-> r::BlockingResult\n\nReturn the shift estimator from the data in df.shift. The keyword argument shift can be used to change the name of the relevant column. Other keyword arguments are passed on to blocking_analysis. Returns a BlockingResult.\n\nSee also growth_estimator, projected_energy.\n\n\n\n\n\n","category":"method"},{"location":"statstools.html#Rimu.StatsTools.w_exp-Tuple{Union{SubArray{<:Any, 1, <:Vector, <:Any, true}, Vector}, Any, Any}","page":"StatsTools","title":"Rimu.StatsTools.w_exp","text":"w_exp(shift, h, time_step; E_r = mean(shift), skip = 0)\n\nCompute the weights for reweighting over h time steps with reference energy E_r from the exponential formula\n\nw_h^(n) = prod_j=1^h exp-dτ(S^(q+n-j)-E_r) \n\nwhere q = skip and dτ is the time_step.\n\nSee also w_lin, growth_estimator, mixed_estimator.\n\n\n\n\n\n","category":"method"},{"location":"statstools.html#Rimu.StatsTools.w_lin-Tuple{Union{SubArray{<:Any, 1, <:Vector, <:Any, true}, Vector}, Any, Any}","page":"StatsTools","title":"Rimu.StatsTools.w_lin","text":"w_lin(shift, h, time_step; E_r = mean(shift), skip = 0)\n\nCompute the weights for reweighting over h time steps with reference energy E_r from the linearised formula\n\nw_h^(n) = prod_j=1^h 1-dτ(S^(q+n-j)-E_r) \n\nwhere q = skip and dτ is the time_step.\n\nSee also w_exp, growth_estimator, mixed_estimator.\n\n\n\n\n\n","category":"method"},{"location":"statstools.html#Rimu.StatsTools.replica_fidelity-Tuple{Any}","page":"StatsTools","title":"Rimu.StatsTools.replica_fidelity","text":"replica_fidelity(df::DataFrame; p_field = :hproj, skip = 0)\nreplica_fidelity(sim::PMCSimulation; kwargs...)\n\nCompute the fidelity of the average coefficient vector and the projector defined in p_field from the PMCSimulation or DataFrame returned by solve, using replicas _1 and _2. Calls ratio_of_means to perform a blocking analysis on a ratio of the means of separate time series and returns a RatioBlockingResult. The first skip steps in the time series are skipped.\n\nThe fidelity of states |ψ⟩ and |ϕ⟩ is defined as\n\nF(ψϕ) = fracψϕ^2ψψϕϕ \n\nSpecifically, replica_fidelity computes\n\nF(mathbfvmathbfc) =\n    frac(mathbfc_1mathbfv)(mathbfvmathbfc_1)\n    mathbfc_1mathbfc_1 \n\nwhere v is the projector specified by p_field, which is assumed to be normalised to unity with the two-norm (i.e. v⋅v == 1), and mathbfc_1 and mathbfc_2 are two replica coefficient vectors.\n\n\n\n\n\n","category":"method"},{"location":"statstools.html#Rimu.StatsTools.variational_energy_estimator-Tuple{Any, Any}","page":"StatsTools","title":"Rimu.StatsTools.variational_energy_estimator","text":"variational_energy_estimator(shifts, overlaps; kwargs...)\nvariational_energy_estimator(df::DataFrame; max_replicas=:all, kwargs...)\nvariational_energy_estimator(sim::PMCSimulation; kwargs...)\n-> r::RatioBlockingResult\n\nCompute the variational energy estimator from the replica time series of the shifts and coefficient vector overlaps by blocking analysis. The keyword argument max_replicas can be used to constrain the number of replicas processed to be smaller than all available in df. Other keyword arguments are passed on to ratio_of_means(). Returns a RatioBlockingResult.\n\nAn estimator for the variational energy\n\nfracmathbfc^ mathbfHmathbfcmathbfc^mathbfc\n\nis calculated from\n\nE_v  =  fracsum_ab^R overline(S_a+S_b) mathbfc_a^ mathbfc_b\n               2sum_ab^R overlinemathbfc_a^ mathbfc_b \n\nwhere the sum goes over distinct pairs out of the R replicas. See arXiv:2103.07800.\n\nThe DataFrame and PMCSimulation versions can extract the relevant information from the result of solve. Set up the ProjectorMonteCarloProblem with the keyword argument replica_strategy = AllOverlaps(R) and R ≥ 2. If passing shifts and overlaps, the data has to be arranged in the correct order (as provided in the DataFrame version).\n\nSee AllOverlaps.\n\n\n\n\n\n","category":"method"},{"location":"statstools.html#Additional-docstrings","page":"StatsTools","title":"Additional docstrings","text":"","category":"section"},{"location":"statstools.html","page":"StatsTools","title":"StatsTools","text":"Modules = [StatsTools]\nPages = [\"StatsTools.jl\", \"blocking.jl\", \"ratio_of_means.jl\", \"convenience.jl\",\n  \"variances.jl\", \"growth_witness.jl\", \"reweighting.jl\"\n]\nPublic = false","category":"page"},{"location":"statstools.html#MonteCarloMeasurements.Particles-Tuple{Rimu.StatsTools.BlockingResult{<:Real}}","page":"StatsTools","title":"MonteCarloMeasurements.Particles","text":"MonteCarloMeasurements.Particles(r::BlockingResult; mc_samples = 2000)\nMonteCarloMeasurements.±(r::BlockingResult)\n\nConvert a BlockingResult into a Particles object for nonlinear error propagation with MonteCarloMeasurements.\n\n\n\n\n\n","category":"method"},{"location":"statstools.html#Rimu.StatsTools.BlockingResult","page":"StatsTools","title":"Rimu.StatsTools.BlockingResult","text":"BlockingResult(mean, err, err_err, p_cov, k, blocks)\n\nResult of blocking_analysis.\n\nFields:\n\nmean: sample mean\nerr: standard error (estimated standard deviation of the mean)\nerr_err: estimated uncertainty of err\np_cov: estimated pseudo covariance of mean, relevant for complex time series\nk::Int: k-1 blocking steps were used to uncorrelate time series\nblocks::Int: number of uncorrelated values after blocking\n\nHas methods for NamedTuple, val_and_errs, val, errs, mean_and_se, Measurements.:±, MonteCarloMeasurements.Particles, and Statistics.cov for Complex data.\n\nExample:\n\njulia> blocking_analysis(smoothen(randn(2^10), 2^5))\nBlockingResult{Float64}\n  mean = -0.026 ± 0.029\n  with uncertainty of ± 0.003638545517264226\n  from 32 blocks after 5 transformations (k = 6).\n\n\n\n\n\n","category":"type"},{"location":"statstools.html#Measurements.measurement-Tuple{Rimu.StatsTools.BlockingResult{<:Real}}","page":"StatsTools","title":"Measurements.measurement","text":"measurement(r::BlockingResult)\nMeasurements.±(r::BlockingResult)\n\nConvert a BlockingResult into a Measurement for linear error propagation with Measurements.\n\nLimitation: Does not account for covariance in complex BlockingResult. Consider using MonteCarloMeasurements.Particles(r)!\n\n\n\n\n\n","category":"method"},{"location":"statstools.html#Rimu.StatsTools.blocker-Union{Tuple{AbstractVector{T}}, Tuple{T}} where T","page":"StatsTools","title":"Rimu.StatsTools.blocker","text":"blocker(v::Vector) -> new_v::Vector\n\nReblock the data by successively taking the mean of two adjacent data points to form a new vector with a half of the length(v). The last data point will be discarded if length(v) is odd.\n\n\n\n\n\n","category":"method"},{"location":"statstools.html#Rimu.StatsTools.blocks_with_m-Tuple{Any}","page":"StatsTools","title":"Rimu.StatsTools.blocks_with_m","text":"blocks_with_m(v; corrected = true) -> (;blocks, mean, std_err, std_err_err, p_cov, mj)\n\nPerform the blocking algorithm from Flyvberg and Peterson JCP (1989). Returns named tuple with the results from all blocking steps. See mtest().\n\n\n\n\n\n","category":"method"},{"location":"statstools.html#Rimu.StatsTools.mtest-Tuple{AbstractVector}","page":"StatsTools","title":"Rimu.StatsTools.mtest","text":"mtest(mj::AbstractVector; α = 0.01) -> k\nmtest(table::NamedTuple; α = 0.01) -> k\n\nHypothesis test for decorrelation of a time series after blocking transformations with significance level 1-α after Jonson PRE (2018). mj or table.mj is expected to be a vector with relevant M_j values from a blocking analysis as obtained from blocks_with_m(). Returns the row number k where the M-test is passed. If the M-test has failed mtest() returns the value -1.\n\n\n\n\n\n","category":"method"},{"location":"statstools.html#Rimu.StatsTools.RatioBlockingResult","page":"StatsTools","title":"Rimu.StatsTools.RatioBlockingResult","text":"RatioBlockingResult(ratio, f, σ_f, δ_y, k, success)\n\nResult of ratio_of_means().\n\nFields:\n\nratio::P: ratio with uncertainties propagated by MonteCarloMeasurements\nf::T: ratio of means\nσ_f::T: std from linear propagation\nδ_y::T: coefficient of variation for denominator (≤ 0.1 for normal approx)\nk::Int: k-1 blocking steps were used to uncorrelate time series\nblocks::Int: number of data values after blocking\nsuccess::Bool: false if any of the blocking steps failed\n\nHas methods for NamedTuple, val_and_errs, val, errs.\n\nNote: to compute statistics on the RatioBlockingResult, use functions pmedian, pquantile, pmiddle, piterate, pextrema, pminimum, pmaximum, pmean, and pcov.\n\n\n\n\n\n","category":"type"},{"location":"statstools.html#Rimu.StatsTools.particles-Tuple{Any, Any, Any}","page":"StatsTools","title":"Rimu.StatsTools.particles","text":"particles(samples, μ, σ)\nparticles(samples, μ::AbstractVector, Σ::AbstractMatrix)\n\nReturn Particles object from MonteCarloMeasurements with single- or multivariate normal distribution. Zero variance parameters are supported.\n\n\n\n\n\n","category":"method"},{"location":"statstools.html#Rimu.StatsTools.particles-Tuple{Any, Distributions.Distribution}","page":"StatsTools","title":"Rimu.StatsTools.particles","text":"particles(samples, d)\nparticles(::Nothing, d)\nparticles(::Val{T}, d) where T\n\nReturn Particles object from  MonteCarloMeasurements using  a type-stable constructor if possible. Pass nothing for the default number of particles or Val(1_000) for using 1000 particles in a type-stable manner. If d is a Particles object it is passed through without re-sampling.\n\n\n\n\n\n","category":"method"},{"location":"statstools.html#Rimu.StatsTools.ratio_estimators-Tuple{AbstractVector{<:Real}, AbstractVector{<:Real}}","page":"StatsTools","title":"Rimu.StatsTools.ratio_estimators","text":"ratio_estimators(x, y, [k]; corrected=true, mc_samples=10_000) -> (; r, f, σ_f, δ_y, n)\n\nEstimators for the ratio of means mean(x)/mean(y). If k is given, k-1 blocking steps are performed to remove internal correlations in the time series x and y. Otherwise these are assumed to be free of internal correlations. Correlations between x and y may be present and are taken into account.\n\nReturn values:\n\nr::Particles is the Monte Carlo sampled ratio estimator, see Particles\nf = mean(x)/mean(y)\nσ_f standard deviation of f from linear error propagation (normal approximation)\nδ_y = std(y)/mean(y) coefficient of variation; < 0.1 for normal approximation to work\nn: number of uncorrelated data used for uncertainty estimation\n\n\n\n\n\n","category":"method"},{"location":"statstools.html#Rimu.StatsTools.x_by_y_linear-NTuple{5, Any}","page":"StatsTools","title":"Rimu.StatsTools.x_by_y_linear","text":"x_by_y_linear(μ_x,μ_y,σ_x,σ_y,ρ) -> f, σ_f\n\nLinear error propagation for ratio f = x/y assuming x and y are correlated normal random variables and assuming the ratio can be approximated as a normal distribution. See wikipedia and Díaz-Francés, Rubio (2013).\n\nσ_f = sqrtfracσ_xμ_y^2 + fracμ_x σ_yμ_y^2^2 - frac2 ρ μ_xμ_y^3\n\n\n\n\n\n","category":"method"},{"location":"statstools.html#Core.NamedTuple-Tuple{Rimu.StatsTools.BlockingResult}","page":"StatsTools","title":"Core.NamedTuple","text":"NamedTuple(x::BlockingResult; n=1, p=nothing, name=:val)\nNamedTuple(x::RatioBlockingResult; n=1, p=nothing, name=:val)\n\nReturn a named tuple with value and error bars (see val_and_errs) as well as additional numerical fields relevant for x.\n\nExample:\n\njulia> results = [blocking_analysis(i:0.1:2i+20) for i in 1:3]; # mock results\n\njulia> df = NamedTuple.(results, name=:res)|>DataFrame\n3×7 DataFrame\n Row │ res      res_l    res_u    res_err_err  res_p_cov  res_k  res_blocks\n     │ Float64  Float64  Float64  Float64      Float64    Int64  Int64\n─────┼──────────────────────────────────────────────────────────────────────\n   1 │    11.5  1.7282   1.7282      0.352767    2.98667      5          13\n   2 │    13.0  1.7282   1.7282      0.352767    2.98667      5          13\n   3 │    14.5  1.78885  1.78885     0.350823    3.2          5          14\n\njulia> rbs = ratio_of_means(1 .+sin.(1:0.1:11),2 .+sin.(2:0.1:12)); # more mock results\n\njulia> [NamedTuple(rbs),]|>DataFrame\n1×9 DataFrame\n Row │ val       val_l      val_u      val_f     val_σ_f    val_δ_y    val_k  val_blocks  val_success\n     │ Float64   Float64    Float64    Float64   Float64    Float64    Int64  Int64       Bool\n─────┼────────────────────────────────────────────────────────────────────────────────────────────────\n   1 │ 0.581549  0.0925669  0.0812292  0.560532  0.0875548  0.0875548      4          12         true\n\n\nSee val_and_errs, val, errs, BlockingResult, RatioBlockingResult.\n\n\n\n\n\n","category":"method"},{"location":"statstools.html#Rimu.StatsTools.autocovariance-Tuple{AbstractVector, Int64}","page":"StatsTools","title":"Rimu.StatsTools.autocovariance","text":"autocovariance(v::Vector,h::Int; corrected::Bool=true)\n\nhatgamma(h) =frac1nsum_t=1^n-h(v_t+h-barv)(v_t-barv)^* Calculate the autocovariance of dataset v with a delay h. If corrected is true (the default) then the sum is scaled with n-h, whereas the sum is scaled with n if corrected is false where n = length(v).\n\n\n\n\n\n","category":"method"},{"location":"statstools.html#Rimu.StatsTools.pseudo_cov-Tuple{Any, Any}","page":"StatsTools","title":"Rimu.StatsTools.pseudo_cov","text":"pseudo_cov(x, y; xmean = mean(x), ymean = mean(y), corrected = true)\n\nCompute the pseudo covariance between collections x and y returning a scalar:\n\nfrac1nsum_i=1^n (x_i - barx)(y_i - bary)\n\nOptionally, precomputed means can be passed as keyword arguments. pseudo_cov(x,y) is functionally equivalent to Statistics.cov(x, conj(y); corrected = false) but it is found to be significantly faster and avoids allocations.\n\n\n\n\n\n","category":"method"},{"location":"statstools.html#Rimu.StatsTools.determine_constant_time_step-Tuple{Any}","page":"StatsTools","title":"Rimu.StatsTools.determine_constant_time_step","text":"determine_constant_time_step(df) -> time_step\n\nGiven a DataFrame df, determine the time step that was used to compute it. Throw an error if time step is not constant.\n\n\n\n\n\n","category":"method"},{"location":"statstools.html#Index","page":"StatsTools","title":"Index","text":"","category":"section"},{"location":"statstools.html","page":"StatsTools","title":"StatsTools","text":"Pages   = [\"statstools.md\"]","category":"page"},{"location":"interfaces.html#Module-Interfaces","page":"Interfaces","title":"Module Interfaces","text":"","category":"section"},{"location":"interfaces.html","page":"Interfaces","title":"Interfaces","text":"Interfaces","category":"page"},{"location":"interfaces.html#Rimu.Interfaces","page":"Interfaces","title":"Rimu.Interfaces","text":"module Interfaces\n\nThis module contains interfaces that can be used to extend and modify the algorithms and behaviours of Rimu.\n\nInterfaces\n\nFollow the links for the definitions of the interfaces!\n\nAbstractHamiltonian for defining Hamiltonians\nAbstractOperator for defining observable operators\nAbstractDVec for defining data structures for Rimu as in DictVectors\nStochasticStyle for controlling the stochastic algorithms used by ProjectorMonteCarloProblem as implemented in StochasticStyles\n\nAdditional exports\n\nInterface functions forAbstractHamiltonians:\n\ndiagonal_element\nnum_offdiagonals\nget_offdiagonal\noffdiagonals.\nrandom_offdiagonal\nstarting_address\nLOStructure\nallows_address_type\n\nworking with  AbstractDVecs and StochasticStyle\n\ndeposit!\ndefault_style\nCompressionStrategy\nThe interface from VectorInterface.jl.\n\nFunctions Rimu.jl uses to do FCIQMC:\n\napply_column!\napply_operator!\nstep_stats\n\n\n\n\n\n","category":"module"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"EditURL = \"../../../scripts/HO-example.jl\"","category":"page"},{"location":"generated/HO-example.html#Example-5:-Degenerate-perturbation-theory-in-a-harmonic-oscillator-basis","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Example 5: Degenerate perturbation theory in a harmonic oscillator basis","text":"","category":"section"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"Rimu can also handle non-lattice systems. This example looks at weakly-interacting bosonic particles in a harmonic oscillator external potential using a basis of (Cartesian product) single-particle eigenstates of the harmonic oscillator potential. Blocks of degenerate non-interacting states are coupled by a contact interaction in first order degenerate perturbation theory. This example shows how to generate these blocks and find the energy and angular momentum eigenstates.","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"A runnable script for this example is located here. Run it with julia HO-example.jl.","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"First, load all needed packages.","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"using Rimu\nusing DataFrames\nusing LinearAlgebra","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"Define the system size for N=2 particles in a 2D harmonic oscillator allowing M=4 levels in each dimension, including the groundstate.","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"N = 2\nM = 4;","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"Use a tuple S to define the range of harmonic oscillator states in a Cartesian basis, in this isotropic case n_xn_y=01ldotsM-1.","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"S = (M, M);","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"In Rimu the N-particle states are still stored as Fock states.","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"P = prod(S)\naddr = BoseFS(P, M => N)","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"BoseFS{2,16}(0, 0, 0, 2, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0)","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"Here, the numbering of the modes folds in the two spatial dimensions.  Use the utility function fock_to_cart to convert a Fock address to human-readable Cartesian quantum numbers for inspection.","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"fock_to_cart(addr, S)","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"2-element StaticArraysCore.SVector{2, Tuple{Int64, Int64}} with indices SOneTo(2):\n (3, 0)\n (3, 0)","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"The output shows that all N particles are in single-particle state n_x=M-1 n_y=0.","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"The harmonic oscillator Hamiltonian HOCartesianContactInteractions handles contact interactions with first-order perturbation theory, so the matrix representation will block according to the non-interacting energy of the basis states. The first task is to find all blocks of basis states with the same energy. The strength of the interaction is not relevant at this point, just that it is non-zero. Use an arbitrary N-particle starting address to build the Hamiltonian.","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"H = HOCartesianContactInteractions(BoseFS(P, 1 => N); S);","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"Then, use the utility function get_all_blocks to find all blocks. The blocks are found by looping over all possible states with N particles in Cartesian states defined by S. Note that this will only work for total energy up to the maximum accessible by a single particle. The N-particle groundstate energy for a 2D harmonic oscillator is E_0 = N hbar omega and the maximum single-particle energy is E = (E_0 + M - 1) hbar omega.","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"block_df = get_all_blocks(H; max_energy = N + M - 1)","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"<div><div style = \"float: left;\"><span>7×6 DataFrame</span></div><div style = \"clear: both;\"></div></div><div class = \"data-frame\" style = \"overflow-x: scroll;\"><table class = \"data-frame\" style = \"margin-bottom: 6px;\"><thead><tr class = \"header\"><th class = \"rowNumber\" style = \"font-weight: bold; text-align: right;\">Row</th><th style = \"text-align: left;\">block_id</th><th style = \"text-align: left;\">block_E0</th><th style = \"text-align: left;\">block_size</th><th style = \"text-align: left;\">addr</th><th style = \"text-align: left;\">indices</th><th style = \"text-align: left;\">t_basis</th></tr><tr class = \"subheader headerLastRow\"><th class = \"rowNumber\" style = \"font-weight: bold; text-align: right;\"></th><th title = \"Int64\" style = \"text-align: left;\">Int64</th><th title = \"Float64\" style = \"text-align: left;\">Float64</th><th title = \"Int64\" style = \"text-align: left;\">Int64</th><th title = \"BoseFS{2, 16, BitString{17, 1, UInt32}}\" style = \"text-align: left;\">BoseFS…</th><th title = \"Tuple{Int64, Int64}\" style = \"text-align: left;\">Tuple…</th><th title = \"Float64\" style = \"text-align: left;\">Float64</th></tr></thead><tbody><tr><td class = \"rowNumber\" style = \"font-weight: bold; text-align: right;\">1</td><td style = \"text-align: right;\">1</td><td style = \"text-align: right;\">2.0</td><td style = \"text-align: right;\">1</td><td style = \"text-align: left;\">fs&quot;|2 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0⟩&quot;</td><td style = \"text-align: left;\">(1, 1)</td><td style = \"text-align: right;\">1.11846</td></tr><tr><td class = \"rowNumber\" style = \"font-weight: bold; text-align: right;\">2</td><td style = \"text-align: right;\">2</td><td style = \"text-align: right;\">3.0</td><td style = \"text-align: right;\">1</td><td style = \"text-align: left;\">fs&quot;|1 1 0 0 0 0 0 0 0 0 0 0 0 0 0 0⟩&quot;</td><td style = \"text-align: left;\">(2, 1)</td><td style = \"text-align: right;\">3.4946e-5</td></tr><tr><td class = \"rowNumber\" style = \"font-weight: bold; text-align: right;\">3</td><td style = \"text-align: right;\">3</td><td style = \"text-align: right;\">4.0</td><td style = \"text-align: right;\">4</td><td style = \"text-align: left;\">fs&quot;|0 2 0 0 0 0 0 0 0 0 0 0 0 0 0 0⟩&quot;</td><td style = \"text-align: left;\">(2, 2)</td><td style = \"text-align: right;\">2.617e-5</td></tr><tr><td class = \"rowNumber\" style = \"font-weight: bold; text-align: right;\">4</td><td style = \"text-align: right;\">4</td><td style = \"text-align: right;\">5.0</td><td style = \"text-align: right;\">5</td><td style = \"text-align: left;\">fs&quot;|0 1 1 0 0 0 0 0 0 0 0 0 0 0 0 0⟩&quot;</td><td style = \"text-align: left;\">(3, 2)</td><td style = \"text-align: right;\">1.544e-5</td></tr><tr><td class = \"rowNumber\" style = \"font-weight: bold; text-align: right;\">5</td><td style = \"text-align: right;\">5</td><td style = \"text-align: right;\">3.0</td><td style = \"text-align: right;\">1</td><td style = \"text-align: left;\">fs&quot;|1 0 0 0 1 0 0 0 0 0 0 0 0 0 0 0⟩&quot;</td><td style = \"text-align: left;\">(5, 1)</td><td style = \"text-align: right;\">3.717e-6</td></tr><tr><td class = \"rowNumber\" style = \"font-weight: bold; text-align: right;\">6</td><td style = \"text-align: right;\">6</td><td style = \"text-align: right;\">4.0</td><td style = \"text-align: right;\">2</td><td style = \"text-align: left;\">fs&quot;|0 1 0 0 1 0 0 0 0 0 0 0 0 0 0 0⟩&quot;</td><td style = \"text-align: left;\">(5, 2)</td><td style = \"text-align: right;\">7.053e-6</td></tr><tr><td class = \"rowNumber\" style = \"font-weight: bold; text-align: right;\">7</td><td style = \"text-align: right;\">7</td><td style = \"text-align: right;\">5.0</td><td style = \"text-align: right;\">5</td><td style = \"text-align: left;\">fs&quot;|0 0 1 0 1 0 0 0 0 0 0 0 0 0 0 0⟩&quot;</td><td style = \"text-align: left;\">(5, 3)</td><td style = \"text-align: right;\">1.3515e-5</td></tr></tbody></table></div>","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"This outputs a list of blocks in H indexed by the noninteracting energy of all states in the block, and a single address that can be used to rebuild the block for further analysis.","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"addr1 = block_df[7,:addr]\nE = block_df[7,:block_E0]","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"5.0","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"First, notice that all basis states have the same energy, defined by the block.","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"basis1 = build_basis(H, addr1)\nmap(b -> Hamiltonians.noninteracting_energy(H, b), basis1)","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"5-element Vector{Float64}:\n 5.0\n 5.0\n 5.0\n 5.0\n 5.0","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"There are two blocks at each energy level (except the groundstate), which are different due to parity conservation, which is the only other symmetry in the Cartesian harmonic oscillator. The basis of this other block is different,","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"addr2 = block_df[4,:addr]\nbasis2 = build_basis(H, addr2);\nbasis1 ≠ basis2","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"true","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"but its basis elements have the same energy.","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"map(b -> Hamiltonians.noninteracting_energy(H, b), basis2)","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"5-element Vector{Float64}:\n 5.0\n 5.0\n 5.0\n 5.0\n 5.0","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"However, since this system is an isotropic harmonic oscillator, it is possible to build simultaneous eigenstates of the angular momentum operator L_z, implemented with AxialAngularMomentumHO.","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"Lz = AxialAngularMomentumHO(S)","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"AxialAngularMomentumHO((4, 4); z_dim = 3, addr = BoseFS{0,16}(0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0))","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"L_z does not conserve parity, so both blocks are required. First combine the bases of each block and convert to DVecs.","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"dvs = map(b -> DVec(b => 1.0), vcat(basis1, basis2));","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"and then compute overlaps for the matrix elements of L_z.","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"Lz_mat = [dot(v, Lz, w) for v in dvs, w in dvs]","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"10×10 Matrix{ComplexF64}:\n 0.0+0.0im      0.0+0.0im      0.0+0.0im      0.0+0.0im      0.0+0.0im      0.0+1.0im      0.0+0.0im      0.0+0.0im      0.0+0.0im      0.0-1.41421im\n 0.0+0.0im      0.0+0.0im      0.0+0.0im      0.0+0.0im      0.0+0.0im      0.0+0.0im      0.0+1.0im      0.0+0.0im      0.0+0.0im      0.0+1.41421im\n 0.0+0.0im      0.0+0.0im      0.0+0.0im      0.0+0.0im      0.0+0.0im      0.0+0.0im      0.0+0.0im      0.0-2.0im      0.0+1.73205im  0.0+0.0im\n 0.0+0.0im      0.0+0.0im      0.0+0.0im      0.0+0.0im      0.0+0.0im      0.0+1.41421im  0.0-1.41421im  0.0+0.0im      0.0+0.0im      0.0-1.0im\n 0.0+0.0im      0.0+0.0im      0.0+0.0im      0.0+0.0im      0.0+0.0im      0.0+0.0im      0.0+0.0im      0.0+1.73205im  0.0+0.0im      0.0+0.0im\n 0.0-1.0im      0.0+0.0im      0.0+0.0im      0.0-1.41421im  0.0+0.0im      0.0+0.0im      0.0+0.0im      0.0+0.0im      0.0+0.0im      0.0+0.0im\n 0.0+0.0im      0.0-1.0im      0.0+0.0im      0.0+1.41421im  0.0+0.0im      0.0+0.0im      0.0+0.0im      0.0+0.0im      0.0+0.0im      0.0+0.0im\n 0.0+0.0im      0.0+0.0im      0.0+2.0im      0.0+0.0im      0.0-1.73205im  0.0+0.0im      0.0+0.0im      0.0+0.0im      0.0+0.0im      0.0+0.0im\n 0.0+0.0im      0.0+0.0im      0.0-1.73205im  0.0+0.0im      0.0+0.0im      0.0+0.0im      0.0+0.0im      0.0+0.0im      0.0+0.0im      0.0+0.0im\n 0.0+1.41421im  0.0-1.41421im  0.0+0.0im      0.0+1.0im      0.0+0.0im      0.0+0.0im      0.0+0.0im      0.0+0.0im      0.0+0.0im      0.0+0.0im","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"By diagonalising this matrix the eigenstate have energy E and well-defined angular momentum.","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"Diagonalise this matrix to obtain the eigenstates of L_z. The eigenvectors provide the linear combinations of basis states with well-defined angular momentum, within the subspace of energy E.","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"Lz_vals, Lz_vecs = eigen(Lz_mat)","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"Eigen{ComplexF64, Float64, Matrix{ComplexF64}, Vector{Float64}}\nvalues:\n10-element Vector{Float64}:\n -2.9999999999999956\n -2.999999999999992\n -0.9999999999999991\n -0.9999999999999991\n -0.9999999999999989\n  1.0000000000000002\n  1.0000000000000027\n  1.0000000000000036\n  3.0\n  3.0000000000000004\nvectors:\n10×10 Matrix{ComplexF64}:\n -5.21142e-19-1.11022e-16im        0.0+0.353553im   8.5601e-18-0.0618116im            0.0+0.353553im    0.0394729+0.494592im     -0.000677524+0.16408im               0.0-0.353553im  -3.16732e-17-0.472311im           0.0+0.353553im  -5.48449e-18-5.55112e-17im\n -5.21142e-19-5.55112e-17im        0.0-0.353553im   8.5601e-18-0.0618116im            0.0-0.353553im    0.0394729+0.494592im     -0.000677524+0.16408im               0.0+0.353553im  -3.16732e-17-0.472311im           0.0-0.353553im  -5.48449e-18-5.55112e-17im\n -7.63858e-18-0.612372im           0.0+0.0im       1.29697e-17-0.350841im             0.0+0.0im       -0.00347719-0.0435689im     -0.00137905+0.333971im              0.0+0.0im       -4.17496e-17+0.116023im           0.0+0.0im        5.13001e-18-0.612372im\n  4.62223e-33-2.77556e-17im        0.0+0.5im       3.08149e-33+5.55112e-17im          0.0-0.5im       8.67362e-18+3.46945e-17im           0.0+0.0im                   0.0+0.5im       -6.16298e-33+1.38778e-17im        0.0+0.5im       -1.54074e-33-2.77556e-17im\n          0.0+0.353553im           0.0+0.0im               0.0-0.607675im             0.0+0.0im       -0.00602267-0.0754635im     -0.00238858+0.578455im              0.0+0.0im       -8.32667e-17+0.200958im           0.0+0.0im                0.0+0.353553im\n -3.33067e-16+1.80109e-17im  -0.353553+0.0im         0.0618116-6.81613e-18im     0.353553+0.0im         -0.494592+0.0394729im         0.16408+0.000677524im      0.353553+0.0im          -0.472311-1.92131e-17im   0.353553+0.0im        5.55112e-17+6.86785e-18im\n -2.77556e-16+1.80109e-17im   0.353553+0.0im         0.0618116-6.81613e-18im    -0.353553+0.0im         -0.494592+0.0394729im         0.16408+0.000677524im     -0.353553+0.0im          -0.472311-1.92131e-17im  -0.353553+0.0im       -1.66533e-16+6.86785e-18im\n    -0.612372+1.31535e-17im        0.0+0.0im          0.350841-1.23225e-17im          0.0+0.0im         0.0435689-0.00347719im       0.333971+0.00137905im            0.0+0.0im           0.116023+4.42387e-17im        0.0+0.0im           0.612372-5.88226e-18im\n     0.353553-2.94055e-17im        0.0+0.0im          0.607675-3.22708e-17im  5.55112e-17+0.0im         0.0754635-0.00602267im       0.578455+0.00238858im   -1.38778e-16+0.0im           0.200958+5.6114e-17im         0.0+0.0im          -0.353553+1.82545e-17im\n          0.0+0.0im                0.5+0.0im               0.0+0.0im                  0.5+0.0im               0.0+0.0im                   0.0+0.0im                   0.5+0.0im                0.0+0.0im               -0.5-0.0im                0.0+0.0im","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"Finally, consider the effect of interactions by looking at how states in a single block are perturbed. Only the energy shift due to the interaction is relevant so now rebuild the Hamiltonian without the non-interacting energy.","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"Hint = HOCartesianContactInteractions(addr1; S, interaction_only = true)\nΔE = eigvals(Matrix(Hint, addr1))","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"5-element Vector{Float64}:\n -2.081668171172327e-17\n  1.0625181290352691e-17\n  0.15915494309189532\n  0.15915494309189535\n  0.15915494309189543","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"Two eigenstates in this block are unaffected by the interaction and three have a non-zero energy shift.","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"The default strength of the interaction is g = 1.0. Other interactions strengths can be obtained by using keyword argument g in HOCartesianContactInteractions or by rescaling ΔE since the interactions are handled with first-order perturbation theory.","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"Rimu also contains HOCartesianEnergyConservedPerDim which is a similar Hamiltonian but with the stricter condition that the contact interaction only connects states that have the same total energy in each dimension, rather than conserving the overall total energy. Both Hamiltonians can handle anisotropic systems by passing a tuple S whose elements are not all the same. This will alter which states are connected by the interaction, but assumes that the harmonic trapping frequencies in each dimension are commensurate.","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"This page was generated using Literate.jl.","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"EditURL = \"../../../scripts/exact-example.jl\"","category":"page"},{"location":"generated/exact-example.html#Example-4:-Exact-diagonalization","page":"Exact diagonalization","title":"Example 4: Exact diagonalization","text":"","category":"section"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"When working with smaller systems or when multiple eigenvalues of a system are required, one can use an exact diagonalization method. There are a few ways to go about this, each with its pros and cons. The purpose of this tutorial is to show off the methods as well as provide a few tips regarding them.","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"A runnable script for this example is located here. Run it with julia exact-example.jl.","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"We start by loading Rimu.","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"using Rimu","category":"page"},{"location":"generated/exact-example.html#Introduction","page":"Exact diagonalization","title":"Introduction","text":"","category":"section"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"We will look at a bosonic system of 4 particles in 5 sites, formulated in momentum space. Let's start by building the Hamiltonian. To create a Fock state where all particles have zero momentum, we put all the particles in the mode at the centre of the address.","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"M = 5\nN = 4\nadd = BoseFS(M, cld(M, 2) => N)\nham = HubbardMom1D(add)","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"HubbardMom1D(fs\"|0 0 4 0 0⟩\"; u=1.0, t=1.0)","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"Before performing exact diagonalization, it is a good idea to check the dimension of the Hamiltonian.","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"dimension(ham)","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"70","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"Keep in mind that this is an estimate of the number of Fock states the Hamiltonian can act on, not the actual matrix size - the matrix size can sometimes be smaller. It can still be used as a guide to decide whether a Hamiltonian is amenable to exact diagonalization and to determine which algorithm would be best suited to diagonalising it.","category":"page"},{"location":"generated/exact-example.html#The-BasisSetRepresentation","page":"Exact diagonalization","title":"The BasisSetRepresentation","text":"","category":"section"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"As we'll see later, there are two ways to construct the matrices from Hamiltonians directly, but they both use BasisSetRepresentation under the hood. The BasisSetRepresentation, when called with a Hamiltonian and optionally a starting address, constructs the sparse matrix of the system, as well as its basis. The starting address defaults to the one that was used to initialize the Hamiltonian. BasisSetRepresentation only returns the part of the matrix that is accessible from this starting address through non-zero offdiagonal elements.","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"bsr = BasisSetRepresentation(ham);","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"To access the matrix or basis, access the sparse_matrix and basis fields, respectively.","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"bsr.sparse_matrix","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"14×14 SparseArrays.SparseMatrixCSC{Float64, Int32} with 104 stored entries:\n -6.8       0.69282   0.69282    ⋅         ⋅         ⋅         ⋅         ⋅          ⋅         ⋅         ⋅         ⋅         ⋅         ⋅ \n  0.69282  -3.03607   0.4       0.4       0.8        ⋅        0.4       0.282843   0.565685  0.8        ⋅         ⋅         ⋅         ⋅ \n  0.69282   0.4       1.43607   0.8       0.4       0.565685  0.8       0.282843    ⋅        0.4        ⋅         ⋅         ⋅         ⋅ \n   ⋅        0.4       0.8       2.81803   0.4       0.282843   ⋅        0.565685    ⋅        0.4       0.69282   0.69282    ⋅         ⋅ \n   ⋅        0.8       0.4       0.4       0.581966   ⋅        0.4       0.565685   0.282843   ⋅         ⋅        0.69282   0.69282    ⋅ \n   ⋅         ⋅        0.565685  0.282843   ⋅        8.47214   0.282843  0.8         ⋅         ⋅         ⋅        0.489898   ⋅        0.489898\n   ⋅        0.4       0.8        ⋅        0.4       0.282843  2.81803   0.565685    ⋅        0.4        ⋅         ⋅        0.69282   0.69282\n   ⋅        0.282843  0.282843  0.565685  0.565685  0.8       0.565685  4.4        0.8       0.565685  0.489898  0.489898  0.489898  0.489898\n   ⋅        0.565685   ⋅         ⋅        0.282843   ⋅         ⋅        0.8       -0.472136  0.282843  0.489898   ⋅        0.489898   ⋅ \n   ⋅        0.8       0.4       0.4        ⋅         ⋅        0.4       0.565685   0.282843  0.581966  0.69282    ⋅         ⋅        0.69282\n   ⋅         ⋅         ⋅        0.69282    ⋅         ⋅         ⋅        0.489898   0.489898  0.69282   1.56393    ⋅         ⋅         ⋅ \n   ⋅         ⋅         ⋅        0.69282   0.69282   0.489898   ⋅        0.489898    ⋅         ⋅         ⋅        6.03607    ⋅         ⋅ \n   ⋅         ⋅         ⋅         ⋅        0.69282    ⋅        0.69282   0.489898   0.489898   ⋅         ⋅         ⋅        1.56393    ⋅ \n   ⋅         ⋅         ⋅         ⋅         ⋅        0.489898  0.69282   0.489898    ⋅        0.69282    ⋅         ⋅         ⋅        6.03607","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"bsr.basis","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"14-element Vector{BoseFS{4, 5, BitString{8, 1, UInt8}}}:\n fs\"|0 0 4 0 0⟩\"\n fs\"|0 1 2 1 0⟩\"\n fs\"|1 0 2 0 1⟩\"\n fs\"|2 1 1 0 0⟩\"\n fs\"|1 0 1 2 0⟩\"\n fs\"|2 0 0 0 2⟩\"\n fs\"|0 0 1 1 2⟩\"\n fs\"|1 1 0 1 1⟩\"\n fs\"|0 2 0 2 0⟩\"\n fs\"|0 2 1 0 1⟩\"\n fs\"|1 3 0 0 0⟩\"\n fs\"|3 0 0 1 0⟩\"\n fs\"|0 0 0 3 1⟩\"\n fs\"|0 1 0 0 3⟩\"","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"When the basis is not needed, we can use Matrix or sparse directly.","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"Matrix(ham)","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"14×14 Matrix{Float64}:\n -6.8       0.69282   0.69282   0.0       0.0       0.0       0.0       0.0        0.0       0.0       0.0       0.0       0.0       0.0\n  0.69282  -3.03607   0.4       0.4       0.8       0.0       0.4       0.282843   0.565685  0.8       0.0       0.0       0.0       0.0\n  0.69282   0.4       1.43607   0.8       0.4       0.565685  0.8       0.282843   0.0       0.4       0.0       0.0       0.0       0.0\n  0.0       0.4       0.8       2.81803   0.4       0.282843  0.0       0.565685   0.0       0.4       0.69282   0.69282   0.0       0.0\n  0.0       0.8       0.4       0.4       0.581966  0.0       0.4       0.565685   0.282843  0.0       0.0       0.69282   0.69282   0.0\n  0.0       0.0       0.565685  0.282843  0.0       8.47214   0.282843  0.8        0.0       0.0       0.0       0.489898  0.0       0.489898\n  0.0       0.4       0.8       0.0       0.4       0.282843  2.81803   0.565685   0.0       0.4       0.0       0.0       0.69282   0.69282\n  0.0       0.282843  0.282843  0.565685  0.565685  0.8       0.565685  4.4        0.8       0.565685  0.489898  0.489898  0.489898  0.489898\n  0.0       0.565685  0.0       0.0       0.282843  0.0       0.0       0.8       -0.472136  0.282843  0.489898  0.0       0.489898  0.0\n  0.0       0.8       0.4       0.4       0.0       0.0       0.4       0.565685   0.282843  0.581966  0.69282   0.0       0.0       0.69282\n  0.0       0.0       0.0       0.69282   0.0       0.0       0.0       0.489898   0.489898  0.69282   1.56393   0.0       0.0       0.0\n  0.0       0.0       0.0       0.69282   0.69282   0.489898  0.0       0.489898   0.0       0.0       0.0       6.03607   0.0       0.0\n  0.0       0.0       0.0       0.0       0.69282   0.0       0.69282   0.489898   0.489898  0.0       0.0       0.0       1.56393   0.0\n  0.0       0.0       0.0       0.0       0.0       0.489898  0.69282   0.489898   0.0       0.69282   0.0       0.0       0.0       6.03607","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"sparse(ham)","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"14×14 SparseArrays.SparseMatrixCSC{Float64, Int32} with 104 stored entries:\n -6.8       0.69282   0.69282    ⋅         ⋅         ⋅         ⋅         ⋅          ⋅         ⋅         ⋅         ⋅         ⋅         ⋅ \n  0.69282  -3.03607   0.4       0.4       0.8        ⋅        0.4       0.282843   0.565685  0.8        ⋅         ⋅         ⋅         ⋅ \n  0.69282   0.4       1.43607   0.8       0.4       0.565685  0.8       0.282843    ⋅        0.4        ⋅         ⋅         ⋅         ⋅ \n   ⋅        0.4       0.8       2.81803   0.4       0.282843   ⋅        0.565685    ⋅        0.4       0.69282   0.69282    ⋅         ⋅ \n   ⋅        0.8       0.4       0.4       0.581966   ⋅        0.4       0.565685   0.282843   ⋅         ⋅        0.69282   0.69282    ⋅ \n   ⋅         ⋅        0.565685  0.282843   ⋅        8.47214   0.282843  0.8         ⋅         ⋅         ⋅        0.489898   ⋅        0.489898\n   ⋅        0.4       0.8        ⋅        0.4       0.282843  2.81803   0.565685    ⋅        0.4        ⋅         ⋅        0.69282   0.69282\n   ⋅        0.282843  0.282843  0.565685  0.565685  0.8       0.565685  4.4        0.8       0.565685  0.489898  0.489898  0.489898  0.489898\n   ⋅        0.565685   ⋅         ⋅        0.282843   ⋅         ⋅        0.8       -0.472136  0.282843  0.489898   ⋅        0.489898   ⋅ \n   ⋅        0.8       0.4       0.4        ⋅         ⋅        0.4       0.565685   0.282843  0.581966  0.69282    ⋅         ⋅        0.69282\n   ⋅         ⋅         ⋅        0.69282    ⋅         ⋅         ⋅        0.489898   0.489898  0.69282   1.56393    ⋅         ⋅         ⋅ \n   ⋅         ⋅         ⋅        0.69282   0.69282   0.489898   ⋅        0.489898    ⋅         ⋅         ⋅        6.03607    ⋅         ⋅ \n   ⋅         ⋅         ⋅         ⋅        0.69282    ⋅        0.69282   0.489898   0.489898   ⋅         ⋅         ⋅        1.56393    ⋅ \n   ⋅         ⋅         ⋅         ⋅         ⋅        0.489898  0.69282   0.489898    ⋅        0.69282    ⋅         ⋅         ⋅        6.03607","category":"page"},{"location":"generated/exact-example.html#Computing-eigenvalues","page":"Exact diagonalization","title":"Computing eigenvalues","text":"","category":"section"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"Now that we have a way of constructing matrices from Hamiltonians, we can use standard Julia functionality to diagonalise them.","category":"page"},{"location":"generated/exact-example.html#The-built-in-method","page":"Exact diagonalization","title":"The built-in method","text":"","category":"section"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"Let's begin by looking at the eigen, eigvecs, and eigvals functions from the LinearAlgebra standard library. They operate on dense matrices and return the full spectra, hence they are only useful for small systems, or when all eigenvalues are required.","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"using LinearAlgebra\n\nmat = Matrix(ham)\neig = eigen(mat);","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"The values can be accessed like so:","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"eig.values","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"14-element Vector{Float64}:\n -6.979863998321608\n -3.3631242916133672\n -0.759019192277071\n  0.1358418221962303\n  0.1578999869460933\n  0.8767114411781449\n  1.5305929970973349\n  1.5835732611867455\n  3.072870330325866\n  3.1256726539518453\n  4.862107221562177\n  6.2606948503805935\n  6.402671211183116\n  9.093371706203953","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"The vectors are stored as columns in eig.vectors:","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"eig.vectors","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"14×14 Matrix{Float64}:\n -0.980348    -0.175378    -0.0135766   -3.15026e-15   0.0221221   0.0697193   9.29812e-16  -0.0314466   -1.42247e-16  -0.0360987   -0.0161557  -9.02056e-17   0.00625248  -0.0058099\n  0.177701    -0.932229    -0.105473     3.33067e-14  -0.225254    0.132826    9.4369e-16    0.00292026  -1.49013e-15  -0.0861158   -0.0907789  -1.16573e-15   0.0591715   -0.0264275\n  0.0768085    0.0622307   -0.0129069   -6.11039e-14   0.447424    0.63969     1.24831e-14  -0.383444    -3.80078e-15  -0.431051    -0.181167   -1.16573e-15   0.0599783   -0.106852\n -0.0119687    0.0373038   -0.0678797    0.0693699    -0.0495446  -0.416847    0.33773      -0.0584554   -0.601232     -0.467179    -0.215841   -0.140166      0.190543    -0.114342\n -0.0214153    0.175119     0.20169     -0.616673     -0.522017    0.296818    0.31234       0.122119     0.123629     -0.106455    -0.126661   -0.0829132     0.148347    -0.0574235\n -0.00237613  -0.00294196  -0.00143189   6.05072e-15  -0.0427486  -0.0110863  -1.72085e-15   0.0663108   -5.55112e-17   0.00167015   0.0832916   4.36456e-15  -0.448519    -0.8863\n -0.0119687    0.0373038   -0.0678797   -0.0693699    -0.0495446  -0.416847   -0.33773      -0.0584554    0.601232     -0.467179    -0.215841    0.140166      0.190543    -0.114342\n -0.00234782  -0.00840544   0.098969    -1.28231e-14   0.0847116  -0.082999    6.70297e-15  -0.274424     3.2474e-15    0.575786    -0.61385    -5.37764e-15   0.353775    -0.259338\n -0.0138439    0.165902    -0.922758     1.50713e-14  -0.1111      0.172508   -4.02109e-15   0.207974    -4.85723e-17   0.0848902   -0.149153   -8.60423e-16   0.0712921   -0.0301968\n -0.0214153    0.175119     0.20169      0.616673     -0.522017    0.296818   -0.31234       0.122119    -0.123629     -0.106455    -0.126661    0.0829132     0.148347    -0.0574235\n  0.00363555  -0.0455298    0.133824    -0.332825      0.290831    0.057199   -0.527627      0.588225    -0.332816     -0.0472302   -0.18528    -0.00844536    0.0915588   -0.0346434\n  0.00195478  -0.0150664   -0.0206752    0.0642658     0.0638689   0.0250518  -0.0999631     0.012992     0.111668      0.0393523    0.423534   -0.688046      0.513839    -0.222499\n  0.00363555  -0.0455298    0.133824     0.332825      0.290831    0.057199    0.527627      0.588225     0.332816     -0.0472302   -0.18528     0.00844536    0.0915588   -0.0346434\n  0.00195478  -0.0150664   -0.0206752   -0.0642658     0.0638689   0.0250518   0.0999631     0.012992    -0.111668      0.0393523    0.423534    0.688046      0.513839    -0.222499","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"If you need the full spectrum, but would like to use less memory, consider using the in-place eigen!.","category":"page"},{"location":"generated/exact-example.html#Iterative-sparse-solvers","page":"Exact diagonalization","title":"Iterative sparse solvers","text":"","category":"section"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"For larger Hamiltonians, it is better to use an iterative solver. There are several options. We will look at eigs from Arpack.jl and eigsolve from KrylovKit.jl.","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"Let's start with Arpack's eigs. It is important to set the nev and which keyword arguments. nev sets the number of eigenpairs to find. which should in most cases be set to :SR, which will find the eigenvalues with the smallest real part.","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"using Arpack\n\nnum_eigvals = 3\n\nsparse_matrix = sparse(ham)\nvals_ar, vecs_ar = eigs(sparse_matrix; which=:SR, nev=num_eigvals)\nvals_ar","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"3-element Vector{Float64}:\n -6.979863998321618\n -3.363124291613361\n -0.7590191922770777","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"Using KrylovKit's eigsolve is similar, but the nev and which are given as positional arguments. Note that KrylovKit may sometimes return more than nev eigenpairs if it happens to find them.","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"using KrylovKit\n\nvals_kk, vecs_kk = eigsolve(sparse_matrix, num_eigvals, :SR)\nvals_kk","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"14-element Vector{Float64}:\n -6.9798639983216155\n -3.363124291613378\n -0.7590191922770888\n  0.13584182219621432\n  0.15789998694609153\n  0.8767114411781325\n  1.5305929970973366\n  1.5835732611867348\n  3.0728703303258644\n  3.1256726539518427\n  4.862107221562174\n  6.260694850380592\n  6.402671211183112\n  9.093371706203955","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"Both solvers use variants of the Lanczos algorithm for Hermitian matrices and the Arnoldi algorithm for non-Hermitian ones. These may in some cases miss degenerate eigenpairs.","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"If diagonalization takes too long, you can reduce the tolerance by setting the tol keyword argument to eigs or eigsolve. Using drastically lower tolerances than the default can still produce good results in practice. This, however, should be checked on a case-by-case basis.","category":"page"},{"location":"generated/exact-example.html#The-matrix-free-method","page":"Exact diagonalization","title":"The matrix-free method","text":"","category":"section"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"KrylovKit's eigsolve function is implemented in a way that does not require the linear operator and vector to be Julia arrays. Rimu leverages this functionality, which allows diagonalising Hamiltonians without ever needing to construct the matrix - all matrix elements are generated on the fly.","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"While this method is by far the slowest of the ones discussed, it also uses drastically less memory. This allows us to diagonalise much larger Hamiltonians.","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"To use this method, you first need a starting vector. It's best to use PDVec here as it leverages threading during the diagonalization.","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"dvec = PDVec(add => 1.0)","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"1-element PDVec: style = IsDeterministic{Float64}()\n  fs\"|0 0 4 0 0⟩\" => 1.0","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"Then, pass that vector and the Hamiltonian to eigsolve.","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"vals_mf, vecs_mf = eigsolve(ham, dvec, num_eigvals, :SR; issymmetric=true)\nvals_mf","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"10-element Vector{Float64}:\n -6.979863998321612\n -3.3631242916133406\n -0.7590191922770728\n  0.1578999869460862\n  0.8767114411781503\n  1.5835732611867401\n  3.125672653951839\n  4.862107221562172\n  6.402671211183112\n  9.093371706203953","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"Keep in mind that if an eigenvector is orthogonal to dvec, KrylovKit will miss it. Consider the following example:","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"eigsolve(ham, vecs_mf[2], num_eigvals, :SR, issymmetric=true)[1]","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"1-element Vector{Float64}:\n -3.3631242916133606","category":"page"},{"location":"generated/exact-example.html#Reducing-matrix-size-with-symmetries","page":"Exact diagonalization","title":"Reducing matrix size with symmetries","text":"","category":"section"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"As these matrices tend to get large quickly, memory is usually the bottleneck.  There are currently two methods implemented to reduce the matrix size, ParitySymmetry and TimeReversalSymmetry. These symmetries work by performing a unitary transformation on the Hamiltonian which causes it to become block-diagonal. When building a matrix from a block-diagonal Hamiltonian, only the block that contains the starting address is constructed.","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"You should only use these where the relevant symmetries actually apply - no checks are performed to make sure they do. There is also currently no way of using both at the same time. Please consult the documentation for a more in-depth description of these options.","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"The Hamiltonian presented in this example is compatible with ParitySymmetry. Let's see how the matrix size is reduced when applying it.","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"size(sparse(ham))","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"(14, 14)","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"size(sparse(ParitySymmetry(ham)))","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"(10, 10)","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"In this small example, the size reduction is modest, but for larger systems, you can expect to reduce the dimension of the matrix by about half.","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"all_eigs = eigvals(Matrix(ham))\neven_eigs = eigvals(Matrix(ParitySymmetry(ham)))","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"10-element Vector{Float64}:\n -6.979863998321619\n -3.3631242916133615\n -0.7590191922770766\n  0.1578999869460802\n  0.876711441178143\n  1.5835732611867412\n  3.1256726539518436\n  4.862107221562176\n  6.4026712111831126\n  9.093371706203952","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"The eigenvalues of the transformed Hamiltonian are a subset of the full spectrum. To get the other half, we can pass the even=false keyword argument to ParitySymmetry. When doing that, we need to make sure the starting address of the Hamiltonian is not symmetric under reversal:","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"add_odd = BoseFS(M, cld(M, 2) => N - 3, cld(M, 2) - 1 => 2, cld(M, 2) + 2 => 1)","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"BoseFS{4,5}(0, 2, 1, 0, 1)","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"odd_eigs = eigvals(Matrix(ParitySymmetry(HubbardMom1D(add_odd); even=false)))","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"4-element Vector{Float64}:\n 0.135841822196218\n 1.530592997097328\n 3.0728703303258613\n 6.260694850380591","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"Now, let's check that combining the two sets of eigenvalues indeed recovers the whole spectrum.","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"sort([even_eigs; odd_eigs]) ≈ all_eigs","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"true","category":"page"},{"location":"generated/exact-example.html#Computing-observables","page":"Exact diagonalization","title":"Computing observables","text":"","category":"section"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"Since building a matrix from an operator only builds the part that is reachable from the starting address, we need to use a different approach when computing observables.","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"To demonstrate this, we will use the DensityMatrixDiagonal operator, which in this case will give the momentum density.","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"The idea here is to construct a PDVec from the computed eigenvector and use it directly with the operator.","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"dvec = PDVec(zip(bsr.basis, eigvecs(Matrix(ham))[:, 1]))","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"14-element PDVec: style = IsDeterministic{Float64}()\n  fs\"|1 0 1 2 0⟩\" => -0.0214153\n  fs\"|2 0 0 0 2⟩\" => -0.00237613\n  fs\"|0 0 4 0 0⟩\" => -0.980348\n  fs\"|0 0 0 3 1⟩\" => 0.00363555\n  fs\"|2 1 1 0 0⟩\" => -0.0119687\n  fs\"|1 0 2 0 1⟩\" => 0.0768085\n  fs\"|1 3 0 0 0⟩\" => 0.00363555\n  fs\"|0 1 2 1 0⟩\" => 0.177701\n  fs\"|0 0 1 1 2⟩\" => -0.0119687\n  fs\"|3 0 0 1 0⟩\" => 0.00195478\n  fs\"|0 2 0 2 0⟩\" => -0.0138439\n  fs\"|1 1 0 1 1⟩\" => -0.00234782\n  fs\"|0 1 0 0 3⟩\" => 0.00195478\n  fs\"|0 2 1 0 1⟩\" => -0.0214153","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"The eigenvectors these methods produce are normalized, hence we can use the three-argument dot to compute the values of observables. Here we are computing the single particle momentum density distribution, which is just the diagonal of the single-particle density matrix in momentum space.","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"[dot(dvec, DensityMatrixDiagonal(i), dvec) for i in 1:M]","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"5-element Vector{Float64}:\n 0.006686138945087833\n 0.033070399772042\n 3.9204869225657397\n 0.033070399772041965\n 0.006686138945087815","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"This page was generated using Literate.jl.","category":"page"},{"location":"rimuio.html#Module-RimuIO","page":"I/O","title":"Module RimuIO","text":"","category":"section"},{"location":"rimuio.html","page":"I/O","title":"I/O","text":"Modules = [RimuIO]","category":"page"},{"location":"rimuio.html#Rimu.RimuIO","page":"I/O","title":"Rimu.RimuIO","text":"Module to provide file input and output functionality for Rimu. Provides convenience functions:\n\nRimuIO.save_df(filename, df::DataFrame) Save dataframe in Arrow format.\nRimuIO.load_df(filename) Load Arrow file into dataframe.\n\n\n\n\n\n","category":"module"},{"location":"rimuio.html#Rimu.RimuIO.load_df-Tuple{Any}","page":"I/O","title":"Rimu.RimuIO.load_df","text":"RimuIO.load_df(filename; propagate_metadata = true, add_filename = true) -> DataFrame\n\nLoad Arrow file into DataFrame. Optionally propagate metadata to DataFrame and add the file name as metadata.\n\nSee also RimuIO.save_df.\n\n\n\n\n\n","category":"method"},{"location":"rimuio.html#Rimu.RimuIO.save_df-Tuple{Any, DataFrame}","page":"I/O","title":"Rimu.RimuIO.save_df","text":"RimuIO.save_df(filename, df::DataFrame; kwargs...)\n\nSave dataframe in Arrow format.\n\nKeyword arguments are passed on to Arrow.write. Compression is enabled by default for large DataFrames (over 10,000 rows).\n\nTable-level metadata of the DataFrame is saved as Arrow metadata (with String value) unless overwritten with the keyword argument metadata.\n\nSee also RimuIO.load_df.\n\n\n\n\n\n","category":"method"},{"location":"rimuio.html#Index","page":"I/O","title":"Index","text":"","category":"section"},{"location":"rimuio.html","page":"I/O","title":"I/O","text":"Pages   = [\"rimuio.md\"]","category":"page"},{"location":"hamiltonians.html#Module-Hamiltonians","page":"Hamiltonians","title":"Module Hamiltonians","text":"","category":"section"},{"location":"hamiltonians.html","page":"Hamiltonians","title":"Hamiltonians","text":"This module contains definitions of Hamiltonians, in particular specific physical models of interest. These are organised by means of an interface around the abstract type AbstractHamiltonian, in the spirit of the AbstractArray interface as discussed in the Julia Documentation.","category":"page"},{"location":"hamiltonians.html","page":"Hamiltonians","title":"Hamiltonians","text":"The Hamiltonians can be used for projector quantum Monte Carlo with ProjectorMonteCarloProblem or for exact diagonalization with ExactDiagonalizationProblem, see Exact Diagonalization.","category":"page"},{"location":"hamiltonians.html","page":"Hamiltonians","title":"Hamiltonians","text":"Hamiltonians","category":"page"},{"location":"hamiltonians.html#Rimu.Hamiltonians","page":"Hamiltonians","title":"Rimu.Hamiltonians","text":"The module Rimu.Hamiltonians defines types and functions for working with Hamiltonians.\n\nExported concrete Hamiltonian types\n\nReal space Hubbard models\n\nHubbardReal1D\nHubbardReal1DEP\nHubbardRealSpace\nExtendedHubbardReal1D\n\nMomentum space Hubbard models\n\nHubbardMom1D\nHubbardMom1DEP\n\nHarmonic oscillator models\n\nHOCartesianContactInteractions\nHOCartesianEnergyConservedPerDim\nHOCartesianCentralImpurity\n\nOther\n\nFroehlichPolaron\nMatrixHamiltonian\nTranscorrelated1D\n\nWrappers\n\nGutzwillerSampling\nGuidingVectorSampling\nParitySymmetry\nTimeReversalSymmetry\nStoquastic\n\nObservables\n\nParticleNumberOperator\nG2RealCorrelator\nG2MomCorrelator\nG2RealSpace\nDensityMatrixDiagonal\nSingleParticleExcitation\nTwoParticleExcitation\nMomentum\nAxialAngularMomentumHO\n\nInterface for working with Hamiltonians\n\nAbstractHamiltonian: defined in the module Interfaces\n\n\n\n\n\n","category":"module"},{"location":"hamiltonians.html","page":"Hamiltonians","title":"Hamiltonians","text":"Here is a list of fully implemented model Hamiltonians. There are several variants of the Hubbard model in real and momentum space, as well as some other models.","category":"page"},{"location":"hamiltonians.html#Real-space-Hubbard-models","page":"Hamiltonians","title":"Real space Hubbard models","text":"","category":"section"},{"location":"hamiltonians.html","page":"Hamiltonians","title":"Hamiltonians","text":"HubbardReal1D\nHubbardReal1DEP\nHubbardRealSpace\nExtendedHubbardReal1D","category":"page"},{"location":"hamiltonians.html#Rimu.Hamiltonians.HubbardReal1D","page":"Hamiltonians","title":"Rimu.Hamiltonians.HubbardReal1D","text":"HubbardReal1D(address; u=1.0, t=1.0)\n\nImplements a one-dimensional Bose Hubbard chain in real space.\n\nhatH = -t sum_langle ijrangle a_i^ a_j + fracu2sum_i n_i (n_i-1)\n\nArguments\n\naddress: the starting address, defines number of particles and sites.\nu: the interaction parameter.\nt: the hopping strength.\n\nSee also\n\nHubbardMom1D\nExtendedHubbardReal1D\n\n\n\n\n\n","category":"type"},{"location":"hamiltonians.html#Rimu.Hamiltonians.HubbardReal1DEP","page":"Hamiltonians","title":"Rimu.Hamiltonians.HubbardReal1DEP","text":"HubbardReal1DEP(address; u=1.0, t=1.0, v_ho=1.0)\n\nImplements a one-dimensional Bose Hubbard chain in real space with external potential.\n\nhatH = -t sum_langle ijrangle a_i^ a_j + sum_i ϵ_i n_i\n+ fracu2sum_i n_i (n_i-1)\n\nArguments\n\naddress: the starting address, defines number of particles and sites.\nu: the interaction parameter.\nt: the hopping strength.\nv_ho: strength of the external harmonic oscillator potential ϵ_i = v_ho i^2.\n\nThe first index is i=0 and the maximum of the potential occurs in the centre of the lattice.\n\nSee also\n\nHubbardReal1D\nHubbardMom1D\nExtendedHubbardReal1D\n\n\n\n\n\n","category":"type"},{"location":"hamiltonians.html#Rimu.Hamiltonians.HubbardRealSpace","page":"Hamiltonians","title":"Rimu.Hamiltonians.HubbardRealSpace","text":"HubbardRealSpace(address; geometry=PeriodicBoundaries(M,), t=ones(C), u=ones(C, C), v=zeros(C, D))\n\nHubbard model in real space. Supports single or multi-component Fock state addresses (with C components) and various (rectangular) lattice geometries in D dimensions.\n\n  hatH = -sum_langle ijrangleσ t_σ a^_iσ a_jσ +\n  frac12sum_iσ u_σσ n_iσ (n_iσ - 1) +\n  sum_iστu_στ n_iσ n_iτ\n\nIf v is nonzero then this calculates hatH + hatV by adding the harmonic trapping potential\n\n    hatV = sum_iσd v_σd x_di^2 n_iσ\n\nwhere x_di is the distance of site i from the centre of the trap along dimension d.\n\nAddress types\n\nBoseFS: Single-component Bose-Hubbard model.\nFermiFS: Single-component Fermi-Hubbard model.\nCompositeFS: For multi-component models.\n\nNote that a single component of fermions cannot interact with itself. A warning is produced if addressis incompatible with the interaction parameters u.\n\nGeometries\n\nImplemented CubicGrids for keyword geometry\n\nPeriodicBoundaries\nHardwallBoundaries\nLadderBoundaries\n\nDefault is geometry=PeriodicBoundaries(M,), i.e. a one-dimensional lattice with the number of sites M inferred from the number of modes in address.\n\nOther parameters\n\nt: the hopping strengths. Must be a vector of length C. The i-th element of the vector corresponds to the hopping strength of the i-th component.\nu: the on-site interaction parameters. Must be a symmetric matrix. u[i, j] corresponds to the interaction between the i-th and j-th component. u[i, i] corresponds to the interaction of a component with itself. Note that u[i,i] must be zero for fermionic components.\nv: the trap potential strengths. Must be a matrix of size C × D. v[i,j] is the strength of the trap for component i in the jth dimension.\n\n\n\n\n\n","category":"type"},{"location":"hamiltonians.html#Rimu.Hamiltonians.ExtendedHubbardReal1D","page":"Hamiltonians","title":"Rimu.Hamiltonians.ExtendedHubbardReal1D","text":"ExtendedHubbardReal1D(address; u=1.0, v=1.0, t=1.0, boundary_condition=:periodic)\n\nImplements the extended Hubbard model on a one-dimensional chain in real space. This Hamiltonian can be either real or complex, depending on the choice of boundary_condition.\n\nhatH = -t sum_langle ijrangle a_i^ a_j + fracu2sum_i n_i (n_i-1) +\nv sum_langle ijrangle n_i n_j\n\nArguments\n\naddress: the starting address.\nu: on-site interaction parameter\nv: the next-neighbor interaction\nt: the hopping strength\nboundary_condition The following values are supported:\n:periodic: usual period boundary condition realising a ring geometry.\n:hard_wall: hopping over the boundary is not allowed.\n:twisted: like :periodic but hopping over the boundary incurs an additional factor of -1.\nθ <: Number: like :periodic and :twisted but hopping over the boundary incurs a factor exp(iθ) for a hop to the right and exp(iθ) for a hop to the left. With this choice the Hamiltonian will have a complex eltype whereas otherwise the eltype is determined by the type of the parameters t, u, and v.\n\nSee also HubbardRealSpace.\n\n\n\n\n\n","category":"type"},{"location":"hamiltonians.html#Momentum-space-Hubbard-models","page":"Hamiltonians","title":"Momentum space Hubbard models","text":"","category":"section"},{"location":"hamiltonians.html","page":"Hamiltonians","title":"Hamiltonians","text":"HubbardMom1D\nHubbardMom1DEP\nExtendedHubbardMom1D","category":"page"},{"location":"hamiltonians.html#Rimu.Hamiltonians.HubbardMom1D","page":"Hamiltonians","title":"Rimu.Hamiltonians.HubbardMom1D","text":"HubbardMom1D(address; u=1.0, t=1.0, dispersion=hubbard_dispersion)\n\nImplements a one-dimensional Bose Hubbard chain in momentum space.\n\nhatH =  sum_k ϵ_k n_k + fracuMsum_kpqr a^_r a^_q a_p a_k δ_r+qp+k\n\nArguments\n\naddress: the starting address, defines number of particles and sites.\nu: the interaction parameter.\nt: the hopping strength.\ndispersion: defines ϵ_k =dispersion(t, k)\nhubbard_dispersion: ϵ_k = -2(Re(t) cos(k) + Im(t) sin(k))\ncontinuum_dispersion: ϵ_k = Re(t) k^2 - 2 Im(t) k\n\nSee also\n\nHubbardReal1D\nExtendedHubbardReal1D\n\n\n\n\n\n","category":"type"},{"location":"hamiltonians.html#Rimu.Hamiltonians.HubbardMom1DEP","page":"Hamiltonians","title":"Rimu.Hamiltonians.HubbardMom1DEP","text":"HubbardMom1DEP(address; u=1.0, t=1.0, v_ho=1.0, dispersion=hubbard_dispersion)\n\nImplements a one-dimensional Bose Hubbard chain in momentum space with harmonic external potential.\n\nH = sum_k ϵ_k n_k + fracuMsum_kpqr a^_r a^_q a_p a_k δ_r+qp+k\n            + V_mathrmho \n\nwhere\n\nbeginaligned\nV_mathrmho  = frac1M sum_pq  mathrmDFTV_ext_p-q \n                    a^_p a_q \nV_mathrmext(x) = v_mathrmho x^2 \nendaligned\n\nis an external harmonic potential in momentum space, mathrmDFT_k is a discrete Fourier transform performed by fft()[k%M + 1], and M == num_modes(address).\n\nArguments\n\naddress: the starting address, defines number of particles and sites.\nu: the interaction parameter.\nt: the hopping strength.\ndispersion: defines ϵ_k =dispersion(t, k)\nhubbard_dispersion: ϵ_k = -2Re(t) cos(k) + Im(t) sin(k)\ncontinuum_dispersion: ϵ_k = Re(t) k^2 - 2 Im(t) k\nv_ho: strength of the external harmonic oscillator potential v_mathrmho.\n\nSee also HubbardMom1D, HubbardReal1DEP, Transcorrelated1D, Hamiltonians.\n\n\n\n\n\n","category":"type"},{"location":"hamiltonians.html#Rimu.Hamiltonians.ExtendedHubbardMom1D","page":"Hamiltonians","title":"Rimu.Hamiltonians.ExtendedHubbardMom1D","text":"ExtendedHubbardMom1D(\n    address; \n    u=1.0, t=1.0, v=1.0, dispersion=hubbard_dispersion, boundary_condition = 0.0\n)\n\nImplements a one-dimensional extended Hubbard chain, also known as the t - V model,  in momentum space.\n\nhatH =  sum_k ϵ_k n_k + frac12M sum_kpqr (u + 2v cos(q-p)) a^_r a^_q a_p a_k δ_r+qp+k\n\nArguments\n\naddress: the starting address, defines number of particles and sites.\nu: the interaction parameter.\nt: the hopping strength.\nboundary_condition: θ <: Number: hopping over the boundary incurs a   factor exp(iθ) for a hop to the right and exp(iθ) for a hop to the left.\ndispersion: defines ϵ_k =dispersion(t, k + θ)\nhubbard_dispersion: ϵ_k = -2 (Re(t) cos(k + θ) + Im(t) sin(k + θ))\ncontinuum_dispersion: ϵ_k = Re(t) (k + θ)^2 - 2 Im(t) (k + θ)\n\nSee also\n\nHubbardMom1D\nHubbardReal1D\nExtendedHubbardReal1D\n\n\n\n\n\n","category":"type"},{"location":"hamiltonians.html#Harmonic-oscillator-models","page":"Hamiltonians","title":"Harmonic oscillator models","text":"","category":"section"},{"location":"hamiltonians.html","page":"Hamiltonians","title":"Hamiltonians","text":"HOCartesianContactInteractions\nHOCartesianEnergyConservedPerDim\nHOCartesianCentralImpurity","category":"page"},{"location":"hamiltonians.html#Rimu.Hamiltonians.HOCartesianContactInteractions","page":"Hamiltonians","title":"Rimu.Hamiltonians.HOCartesianContactInteractions","text":"HOCartesianContactInteractions(addr; S, η, g = 1.0, interaction_only = false, block_by_level = true)\n\nImplements a bosonic harmonic oscillator in Cartesian basis with contact interactions\n\nhatH = sum_i epsilon_mathbfi n_mathbfi + fracg2sum_mathbfijkl\n    V_mathbfijkl a^_mathbfi a^_mathbfj a_mathbfk a_mathbfl\n\nFor a D-dimensional harmonic oscillator indices mathbfi mathbfj ldots are D-tuples. The energy scale is defined by the first dimension i.e. hbar omega_x so that single particle energies are\n\n    fracepsilon_mathbfihbar omega_x = (i_x + 12) + eta_y (i_y+12) + ldots\n\nThe factors eta_y ldots allow for anisotropic trapping geometries and are assumed to be greater than 1 so that omega_x is the smallest trapping frequency.\n\nBy default the offdiagonal elements due to the interactions are consistent with first-order degenerate perturbation theory\n\n    V_mathbfijkl = delta_epsilon_mathbfi + epsilon_mathbfj\n        ^epsilon_mathbfk + epsilon_mathbfl\n        prod_d in x yldots mathcalI(i_dj_dk_dl_d)\n\nwhere the delta function indicates that the total noninteracting energy is conserved meaning all states with the same noninteracting energy are connected by this interaction and the Hamiltonian blocks according to noninteracting energy levels. Setting block_by_level = false will disable this restriction and allow coupling between basis states of any noninteracting energy level, leading to many more offdiagonals and fewer but larger blocks (the blocks are still distinguished by parity of basis states). Alternatively, see HOCartesianEnergyConservedPerDim for a model with the stronger restriction that conserves energy separately per spatial dimension. The integral mathcalI(abcd) is of four one dimensional harmonic oscillator basis functions, implemented in four_oscillator_integral_general.\n\nArguments\n\naddr: the starting address, defines number of particles and total number of modes.\nS: Tuple of the number of levels in each dimension, including the groundstate. The   allowed couplings between states is defined by the aspect ratio of S .- 1. Defaults   to a 1D spectrum with number of levels matching modes of addr. Will be sorted to make   the first dimension the largest.\nη: Define a custom aspect ratio for the trapping potential strengths, instead of deriving   from S .- 1. This will only affect the single particle energy scale and not the   interactions. The values are always scaled relative to the first dimension, which sets   the energy scale of the system, hbaromega_x.\ng: the (isotropic) bare interaction parameter. The value of g is assumed   to be in trap units.\ninteraction_only: if set to true then the noninteracting single-particle terms are   ignored. Useful if only energy shifts due to interactions are required.\nblock_by_level: if set to false will allow the interactions to couple all states without   comparing their noninteracting energy.\n\nwarning: Warning\nnum_offdiagonals is a bad estimate for this Hamiltonian. Take care when building a matrix or using QMC methods. Use get_all_blocks first then pass option col_hint = block_size to BasisSetRep to safely build the matrix.\n\n\n\n\n\n","category":"type"},{"location":"hamiltonians.html#Rimu.Hamiltonians.HOCartesianEnergyConservedPerDim","page":"Hamiltonians","title":"Rimu.Hamiltonians.HOCartesianEnergyConservedPerDim","text":"HOCartesianEnergyConservedPerDim(addr; S, η, g = 1.0, interaction_only = false)\n\nImplements a bosonic harmonic oscillator in Cartesian basis with contact interactions\n\nhatH = sum_i ϵ_i n_i + fracg2sum_ijkl V_ijkl a^_i a^_j a_k a_l\n\nwith the additional restriction that the interactions only couple states with the same energy in each dimension separately. See HOCartesianContactInteractions for a model that conserves total energy.\n\nFor a D-dimensional harmonic oscillator indices mathbfi mathbfj ldots are D-tuples. The energy scale is defined by the first dimension i.e. hbar omega_x so that single particle energies are\n\n    fracepsilon_mathbfihbar omega_x = (i_x + 12) + eta_y (i_y+12) + ldots\n\nThe factors eta_y ldots allow for anisotropic trapping geometries and are assumed to be greater than 1 so that omega_x is the smallest trapping frequency.\n\nMatrix elements V_mathbfijkl are for a contact interaction calculated in this basis using first-order degenerate perturbation theory.\n\n    V_mathbfijkl = prod_d in x yldots mathcalI(i_dj_dk_dl_d)\n        delta_i_d + j_d^k_d + l_d\n\nwhere the delta-function indicates that the noninteracting energy is conserved along each dimension. The integral mathcalI(abcd) is of four one dimensional harmonic oscillator basis functions, see four_oscillator_integral_general, with the additional restriction that energy is conserved in each dimension.\n\nArguments\n\naddr: the starting address, defines number of particles and total number of modes.\nS: Tuple of the number of levels in each dimension, including the groundstate. Defaults   to a 1D spectrum with number of levels matching modes of addr. Will be sorted to   make the first dimension the largest.\nη: Define a custom aspect ratio for the trapping potential strengths, instead of deriving   from S .- 1. The values are always scaled relative to the first dimension, which sets   the energy scale of the system, hbaromega_x.\ng: the (isotropic) interparticle interaction parameter. The value of g is assumed   to be in trap units.\ninteraction_only: if set to true then the noninteracting single-particle terms are   ignored. Useful if only energy shifts due to interactions are required.\n\n\n\n\n\n","category":"type"},{"location":"hamiltonians.html#Rimu.Hamiltonians.HOCartesianCentralImpurity","page":"Hamiltonians","title":"Rimu.Hamiltonians.HOCartesianCentralImpurity","text":"HOCartesianCentralImpurity(addr; kwargs...)\n\nHamiltonian of non-interacting particles in an arbitrary harmonic trap with a delta-function potential at the centre, with strength g,\n\nhatH_mathrmrel = sum_mathbfi ϵ_mathbfi n_mathbfi\n    + gsum_mathbfij V_mathbfij a^_mathbfi a_mathbfj\n\nFor a D-dimensional harmonic oscillator indices mathbfi mathbfj ldots are D-tuples. The energy scale is defined by the first dimension i.e. hbar omega_x so that single particle energies are\n\n    fracepsilon_mathbfihbar omega_x = (i_x + 12) + eta_y (i_y+12) + ldots\n\nThe factors eta_y ldots allow for anisotropic trapping geometries and are assumed to be greater than 1 so that omega_x is the smallest trapping frequency.\n\nMatrix elements V_mathbfij are for a delta function potential calculated in this basis\n\n    V_mathbfij = prod_d in x yldots psi_i_d(0) psi_j_d(0)\n\nOnly even parity states feel this impurity, so all i_d are even. Note that the matrix representation of this Hamiltonian for a single particle is completely dense in the even-parity subspace.\n\nArguments\n\naddr: the starting address, defines number of particles and total number of modes.\nmax_nx = num_modes(addr) - 1: the maximum harmonic oscillator index number in the x-dimension.   Must be even. Index number for the harmonic oscillator groundstate is 0.\nηs = (): a tuple of aspect ratios for the remaining dimensions (η_y, ...). Should be empty   for a 1D trap or contain values greater than 1.0. The maximum index   in other dimensions will be the largest even number less than M/η_y.\nS = nothing: Instead of max_nx, manually set the number of levels in each dimension,   including the groundstate. Must be a Tuple of Ints.\ng = 1.0: the strength of the delta impurity in (x-dimension) trap units.\nimpurity_only=false: if set to true then the trap energy terms are ignored. Useful if   only energy shifts due to the impurity are required.\n\nwarning: Warning\nDue to use of `SpecialFunctions` with large arguments the matrix representation of\nthis Hamiltonian may not be strictly symmetric, but is approximately symmetric within\nmachine precision.\n\nSee also HOCartesianContactInteractions andHOCartesianEnergyConservedPerDim.\n\n\n\n\n\n","category":"type"},{"location":"hamiltonians.html#Other-model-Hamiltonians","page":"Hamiltonians","title":"Other model Hamiltonians","text":"","category":"section"},{"location":"hamiltonians.html","page":"Hamiltonians","title":"Hamiltonians","text":"MatrixHamiltonian\nTranscorrelated1D\nFroehlichPolaron","category":"page"},{"location":"hamiltonians.html#Rimu.Hamiltonians.MatrixHamiltonian","page":"Hamiltonians","title":"Rimu.Hamiltonians.MatrixHamiltonian","text":"MatrixHamiltonian(\n    mat::AbstractMatrix{T};\n    starting_address::Int = starting_address(mat)\n) <: AbstractHamiltonian{T}\n\nWrap an abstract matrix mat as an AbstractHamiltonian object. Works with stochastic methods of ProjectorMonteCarloProblem() and DVec. Optionally, a valid index can be provided as the starting_address.\n\nSpecialised methods are implemented for sparse matrices of type AbstractSparseMatrixCSC. One based indexing is required for the matrix mat.\n\n\n\n\n\n","category":"type"},{"location":"hamiltonians.html#Rimu.Hamiltonians.Transcorrelated1D","page":"Hamiltonians","title":"Rimu.Hamiltonians.Transcorrelated1D","text":"Transcorrelated1D(address; t=1.0, v=1.0, v_ho=0.0, cutoff=1, three_body_term=true)\n\nImplements a transcorrelated Hamiltonian for contact interactions in one dimensional momentum space from Jeszenski et al. (2018). Currently limited to two component fermionic addresses.\n\nbeginaligned\n\ntildeH = t sum_kσk^2 n_kσ \n    quad + sum_pqkσσ T_pqk a^_p-kσ a^_q+kσ a_qσ a_pσ \n    quad + sum_pqskkσσ Q_kka^_p-kσ a^_q+kσ a^_s+k-kσ\n                                       a_sσ a_qσ a_pσ \n    quad + V_mathrmho\nendaligned\n\nwhere\n\nbeginaligned\ntildeu(k) = begincases -frac2k^2 mathrmif  k  k_c\n0  mathrmotherwise\nendcases\n\n\nT_pqk = fracvM + frac2vMleftk^2tildeu(k)\n          - (p - q)ktildeu(k)right + frac2v^2tW(k)\nW(k) = frac1M^2sum_q (k - q)q tildeu(q)tildeu(k - q) \nQ_kl = -fracv^2t M^2k tildeu(k)ltildeu(l)\nendaligned\n\nArguments\n\naddress: The starting address, defines number of particles and sites.\nv: The interaction parameter.\nt: The kinetic energy prefactor.\nv_ho: Strength of the external harmonic oscillator potential V_mathrmho. See HubbardMom1DEP.\ncutoff controls k_c in equations above. Note: skipping generating off-diagonal elements below the cutoff is not implemented - zero-valued elements are returned instead.\nthree_body_term: If set to false, generating three body excitations is skipped. Note: when disabling three body terms, cutoff should be set to a higher value for best results.\n\nSee also\n\nHubbardMom1D\nHubbardMom1DEP\n\n\n\n\n\n","category":"type"},{"location":"hamiltonians.html#Rimu.Hamiltonians.FroehlichPolaron","page":"Hamiltonians","title":"Rimu.Hamiltonians.FroehlichPolaron","text":"FroehlichPolaron(address::OccupationNumberFS{M}; kwargs...) <: AbstractHamiltonian\n\nThe Froehlich polaron Hamiltonian for a 1D lattice with M momentum modes is given by\n\nH = (p_f - p)^2m + ωN - v Σₖ(aₖ^ + aₖ)\n\nwhere p is the total momentum, p_f = Σ_k k aₖ^ aₖ is the momentum operator for the bosons, and k part of the momentum lattice with separation 2πl. N is the number operator for the bosons.\n\nKeyword Arguments\n\np=0.0: the total momentum p.\nv=1.0: the coupling strength v.\nmass=1.0: the particle mass m.\nomega=1.0: the oscillation frequency of the phonons ω.\nl=1.0: the box size in real space l. Provides scale parameter of the momentum   lattice.\nmomentum_cutoff=nothing: the maximum boson momentum allowed for an address.\nmode_cutoff: the maximum number of bosons in each momentum mode. Defaults to the maximum   value supported by the address type OccupationNumberFS.\n\nExamples\n\njulia> fs = OccupationNumberFS(0,0,0)\nOccupationNumberFS{3, UInt8}(0, 0, 0)\n\njulia> ham = FroehlichPolaron(fs; v=0.5)\nFroehlichPolaron(fs\"|0 0 0⟩{8}\"; v=0.5, mass=1.0, omega=1.0, l=1.0, p=0.0, mode_cutoff=255)\n\njulia> dimension(ham)\n16777216\n\njulia> dimension(FroehlichPolaron(fs; v=0.5, mode_cutoff=5))\n216\n\nSee also OccupationNumberFS, dimension, AbstractHamiltonian.\n\n\n\n\n\n","category":"type"},{"location":"hamiltonians.html#Convenience-functions","page":"Hamiltonians","title":"Convenience functions","text":"","category":"section"},{"location":"hamiltonians.html","page":"Hamiltonians","title":"Hamiltonians","text":"rayleigh_quotient\nmomentum\nhubbard_dispersion\ncontinuum_dispersion\nshift_lattice\nshift_lattice_inv","category":"page"},{"location":"hamiltonians.html#Rimu.Hamiltonians.rayleigh_quotient","page":"Hamiltonians","title":"Rimu.Hamiltonians.rayleigh_quotient","text":"rayleigh_quotient(H, v)\n\nReturn the Rayleigh quotient of the linear operator H and the vector v:\n\nfrac v  H  v  vv \n\n\n\n\n\n","category":"function"},{"location":"hamiltonians.html#Rimu.Hamiltonians.momentum","page":"Hamiltonians","title":"Rimu.Hamiltonians.momentum","text":"momentum(ham::AbstractHamiltonian)\n\nMomentum as a linear operator in Fock space. Pass a Hamiltonian ham in order to convey information about the Fock basis. Returns an AbstractHamiltonian that represents the momentum operator.\n\nNote: momentum is currently only defined on HubbardMom1D.\n\nExample\n\njulia> add = BoseFS((1, 0, 2, 1, 2, 1, 1, 3));\n\n\njulia> ham = HubbardMom1D(add; u = 2.0, t = 1.0);\n\n\njulia> mom = momentum(ham);\n\n\njulia> diagonal_element(mom, add) # calculate the momentum of a single configuration\n-1.5707963267948966\n\njulia> v = DVec(add => 10; capacity=1000);\n\n\njulia> rayleigh_quotient(mom, v) # momentum expectation value for state vector `v`\n-1.5707963267948966\n\nPart of the AbstractHamiltonian interface.\n\n\n\n\n\n","category":"function"},{"location":"hamiltonians.html#Rimu.Hamiltonians.hubbard_dispersion","page":"Hamiltonians","title":"Rimu.Hamiltonians.hubbard_dispersion","text":"hubbard_dispersion(t, k)\n\nDispersion relation for HubbardMom1D. Returns -2(Re(t) cos(k) + Im(t) sin(k)).\n\nSee also continuum_dispersion.\n\n\n\n\n\n","category":"function"},{"location":"hamiltonians.html#Rimu.Hamiltonians.continuum_dispersion","page":"Hamiltonians","title":"Rimu.Hamiltonians.continuum_dispersion","text":"continuum_dispersion(t, k)\n\nDispersion relation for HubbardMom1D. Returns Re(t) k^2 - 2 Im(t) k.\n\nSee also hubbard_dispersion.\n\n\n\n\n\n","category":"function"},{"location":"hamiltonians.html#Rimu.Hamiltonians.shift_lattice","page":"Hamiltonians","title":"Rimu.Hamiltonians.shift_lattice","text":"shift_lattice(is)\n\nCircular shift contiguous indices is in interval [M÷2, M÷2) such that set starts with 0, where M=length(is).\n\nInverse operation: shift_lattice_inv. Used in HubbardReal1DEP and HubbardMom1DEP\n\n\n\n\n\n","category":"function"},{"location":"hamiltonians.html#Rimu.Hamiltonians.shift_lattice_inv","page":"Hamiltonians","title":"Rimu.Hamiltonians.shift_lattice_inv","text":"shift_lattice_inv(js)\n\nCircular shift indices starting with 0 into a contiguous set in interval [M÷2, M÷2), where M=length(js).\n\nInverse operation of shift_lattice. Used in HubbardReal1DEP and HubbardMom1DEP\n\n\n\n\n\n","category":"function"},{"location":"hamiltonians.html#Hamiltonian-wrappers","page":"Hamiltonians","title":"Hamiltonian wrappers","text":"","category":"section"},{"location":"hamiltonians.html","page":"Hamiltonians","title":"Hamiltonians","text":"The following Hamiltonians are constructed from an existing Hamiltonian instance and change its behaviour:","category":"page"},{"location":"hamiltonians.html","page":"Hamiltonians","title":"Hamiltonians","text":"GutzwillerSampling\nGuidingVectorSampling\nParitySymmetry\nTimeReversalSymmetry\nStoquastic","category":"page"},{"location":"hamiltonians.html#Rimu.Hamiltonians.GutzwillerSampling","page":"Hamiltonians","title":"Rimu.Hamiltonians.GutzwillerSampling","text":"GutzwillerSampling(::AbstractHamiltonian; g)\n\nWrapper over any AbstractHamiltonian that implements Gutzwiller sampling. In this importance sampling scheme the Hamiltonian is modified as follows\n\ntildeH_ij = H_ij e^-g(H_ii - H_jj) \n\nThis way off-diagonal spawns to higher-energy configurations are discouraged and spawns to lower-energy configurations encouraged for positive g.\n\nConstructor\n\nGutzwillerSampling(::AbstractHamiltonian, g)\nGutzwillerSampling(::AbstractHamiltonian; g)\n\nAfter construction, we can access the underlying Hamiltonian with G.hamiltonian and the g parameter with G.g.\n\nExample\n\njulia> H = HubbardMom1D(BoseFS(1,1,1); u=6.0, t=1.0)\nHubbardMom1D(fs\"|1 1 1⟩\"; u=6.0, t=1.0)\n\njulia> G = GutzwillerSampling(H, g=0.3)\nGutzwillerSampling(HubbardMom1D(fs\"|1 1 1⟩\"; u=6.0, t=1.0); g=0.3)\n\njulia> get_offdiagonal(H, BoseFS(2, 1, 0), 1)\n(BoseFS{3,3}(1, 0, 2), 2.0)\n\njulia> get_offdiagonal(G, BoseFS(2, 1, 0), 1)\n(BoseFS{3,3}(1, 0, 2), 0.8131393194811987)\n\nObservables\n\nTo calculate observables, pass the transformed Hamiltonian G to AllOverlaps with keyword argument transform=G.\n\n\n\n\n\n","category":"type"},{"location":"hamiltonians.html#Rimu.Hamiltonians.GuidingVectorSampling","page":"Hamiltonians","title":"Rimu.Hamiltonians.GuidingVectorSampling","text":"GuidingVectorSampling\n\nWrapper over any AbstractHamiltonian that implements guided vector a.k.a. guided wave function sampling. In this importance sampling scheme the Hamiltonian is modified as follows.\n\ntildeH_ij = v_i H_ij v_j^-1\n\nand where v is the guiding vector. v_i and v_j are also thresholded to avoid dividing by zero (see below).\n\nConstructors\n\nGuidingVectorSampling(::AbstractHamiltonian, vector, eps)\nGuidingVectorSampling(::AbstractHamiltonian; vector, eps)\n\neps is a thresholding parameter used to avoid dividing by zero; all values below eps are set to eps. It is recommended that eps is in the same value range as the guiding vector. The default value is set to eps=norm(v, Inf) * 1e-2\n\nAfter construction, we can access the underlying hamiltonian with G.hamiltonian, the eps parameter with G.eps, and the guiding vector with G.vector.\n\nExample\n\njulia> H = HubbardReal1D(BoseFS(1,1,1); u=6.0, t=1.0);\n\njulia> v = DVec(starting_address(H) => 10; capacity=1);\n\njulia> G = GuidingVectorSampling(H, v, 0.1);\n\njulia> get_offdiagonal(H, starting_address(H), 4)\n(BoseFS{3,3}(2, 0, 1), -1.4142135623730951)\n\njulia> get_offdiagonal(G, starting_address(G), 4)\n(BoseFS{3,3}(2, 0, 1), -0.014142135623730952)\n\nObservables\n\nTo calculate observables, pass the transformed Hamiltonian G to AllOverlaps with keyword argument transform=G.\n\n\n\n\n\n","category":"type"},{"location":"hamiltonians.html#Rimu.Hamiltonians.ParitySymmetry","page":"Hamiltonians","title":"Rimu.Hamiltonians.ParitySymmetry","text":"ParitySymmetry(ham::AbstractHamiltonian{T}; even=true) <: AbstractHamiltonian{T}\n\nImpose even or odd parity on all states and the Hamiltonian ham as controlled by the keyword argument even. Parity symmetry of the Hamiltonian is assumed. For some Hamiltonians, ParitySymmetry reduces the size of the Hilbert space by half.\n\nParitySymmetry performs a unitary transformation, leaving the eigenvalues unchanged and preserving the LOStructure. This is achieved by changing the basis set to states with defined parity. Effectively, a non-even address α is replaced by frac12(α  α) for even and odd parity, respectively, where ᾱ == reverse(α).\n\nNotes\n\nThis modifier currently only works on starting_addresss with an odd number of modes.\nFor odd parity, the starting_address of the underlying Hamiltonian cannot be symmetric.\nIf parity is not a symmetry of the Hamiltonian ham then the result is undefined.\nParitySymmetry works by modifying the offdiagonals iterator.\n\njulia> ham = HubbardReal1D(BoseFS(0,2,1))\nHubbardReal1D(fs\"|0 2 1⟩\"; u=1.0, t=1.0)\n\njulia> size(Matrix(ham))\n(10, 10)\n\njulia> size(Matrix(ParitySymmetry(ham)))\n(6, 6)\n\njulia> size(Matrix(ParitySymmetry(ham; odd=true)))\n(4, 4)\n\njulia> eigvals(Matrix(ham))[1] ≈ eigvals(Matrix(ParitySymmetry(ham)))[1]\ntrue\n\nSee also TimeReversalSymmetry.\n\n\n\n\n\n","category":"type"},{"location":"hamiltonians.html#Rimu.Hamiltonians.TimeReversalSymmetry","page":"Hamiltonians","title":"Rimu.Hamiltonians.TimeReversalSymmetry","text":"TimeReversalSymmetry(ham::AbstractHamiltonian{T}; even=true) <: AbstractHamiltonian{T}\n\nImpose even or odd time reversal on all states and the Hamiltonian ham as controlled by the keyword argument even. If time reversal is a symmetry of the Hamiltonian it will block (reducing Hilbert space dimension) preserving the eigenvalues and LOStructure.\n\nNotes\n\nThis modifier only works two component starting_addresses.\nFor odd time reversal symmetry, the starting_address of the underlying Hamiltonian must not be symmetric.\nIf time reversal is not a symmetry of the Hamiltonian ham then the result is undefined.\nTimeReversalSymmetry works by modifying the offdiagonals iterator.\n\njulia> ham = HubbardMom1D(FermiFS2C((1,0,1),(0,1,1)));\n\njulia> size(Matrix(ham))\n(3, 3)\n\njulia> size(Matrix(TimeReversalSymmetry(ham)))\n(2, 2)\n\njulia> size(Matrix(TimeReversalSymmetry(ham, even=false)))\n(1, 1)\n\njulia> eigvals(Matrix(TimeReversalSymmetry(ham)))[1] ≈ eigvals(Matrix(ham))[1]\ntrue\n\nSee also ParitySymmetry.\n\n\n\n\n\n","category":"type"},{"location":"hamiltonians.html#Rimu.Hamiltonians.Stoquastic","page":"Hamiltonians","title":"Rimu.Hamiltonians.Stoquastic","text":"Stoquastic(ham <: AbstractHamiltonian) <: AbstractHamiltonian\n\nA wrapper for an AbstractHamiltonian that replaces all off-diagonal matrix elements v by -abs(v), thus making the new Hamiltonian stoquastic.\n\nA stoquastic Hamiltonian does not have a Monte Carlo sign problem. For a hermitian ham the smallest eigenvalue of Stoquastic(ham) is ≤ the smallest eigenvalue of ham.\n\n\n\n\n\n","category":"type"},{"location":"hamiltonians.html#Observables","page":"Hamiltonians","title":"Observables","text":"","category":"section"},{"location":"hamiltonians.html","page":"Hamiltonians","title":"Hamiltonians","text":"Rimu.jl offers two other supertypes for operators that are less  restrictive than AbstractHamiltonian.  AbstractObservable and AbstractOperators both can represent a physical observable. Their expectation values can be sampled during a ProjectorMonteCarloProblem simulation by  passing them into a suitable ReplicaStrategy, e.g.  AllOverlaps. Some observables are also AbstractHamiltonians. The full type hierarchy is","category":"page"},{"location":"hamiltonians.html","page":"Hamiltonians","title":"Hamiltonians","text":"AbstractHamiltonian{T} <: AbstractOperator{T} <: AbstractObservable{T}","category":"page"},{"location":"hamiltonians.html","page":"Hamiltonians","title":"Hamiltonians","text":"ParticleNumberOperator\nG2RealCorrelator\nG2RealSpace\nG2MomCorrelator\nSuperfluidCorrelator\nStringCorrelator\nDensityMatrixDiagonal\nSingleParticleExcitation\nTwoParticleExcitation\nReducedDensityMatrix\nMomentum\nAxialAngularMomentumHO","category":"page"},{"location":"hamiltonians.html#Rimu.Hamiltonians.ParticleNumberOperator","page":"Hamiltonians","title":"Rimu.Hamiltonians.ParticleNumberOperator","text":"ParticleNumberOperator() <: AbstractOperator{Float64}\n\nThe number operator in Fock space. This operator is diagonal in the Fock basis and returns the number of particles in the Fock state. It works with any address type that is a subtype of AbstractFockAddress.\n\njulia> p = ExactDiagonalizationProblem(FroehlichPolaron(fs\"|0 0⟩{}\"; mode_cutoff=5, v=3));\n\njulia> gs = solve(p).vectors[1]; # normalised ground state vector\n\njulia> dot(gs, ParticleNumberOperator(), gs) # particle number expectation value\n2.8823297252925917\n\nSee also AbstractHamiltonian.\n\n\n\n\n\n","category":"type"},{"location":"hamiltonians.html#Rimu.Hamiltonians.G2RealCorrelator","page":"Hamiltonians","title":"Rimu.Hamiltonians.G2RealCorrelator","text":"G2RealCorrelator(d::Int) <: AbstractOperator{Float64}\n\nTwo-body operator for density-density correlation between sites separated by d with 0 ≤ d < M.\n\n    hatG^(2)(d) = frac1M sum_i^M hatn_i (hatn_i+d - delta_0d)\n\nAssumes a one-dimensional lattice with periodic boundary conditions where\n\n    hatG^(2)(-M2 leq d  0) = hatG^(2)(d)\n\n    hatG^(2)(M2  d  M) = hatG^(2)(M - d)\n\nand normalisation\n\n    sum_d=0^M-1 langle hatG^(2)(d) rangle = fracN (N-1)M\n\nFor multicomponent basis, calculates correlations between all particles equally, equivalent to stacking all components into a single Fock state.\n\nArguments\n\nd::Integer: distance between sites.\n\nSee also\n\nHubbardReal1D\nG2RealSpace\nG2MomCorrelator\nAbstractOperator\nAllOverlaps\n\n\n\n\n\n","category":"type"},{"location":"hamiltonians.html#Rimu.Hamiltonians.G2RealSpace","page":"Hamiltonians","title":"Rimu.Hamiltonians.G2RealSpace","text":"G2RealSpace(geometry::CubicGrid, σ=1, τ=1; sum_components=false) <: AbstractOperator{SArray}\n\nTwo-body operator for density-density correlation for all Displacements d in the specified geometry.\n\n    hatG^(2)_στ(d) = frac1M _i n_σi (n_τi+d - δ_0dδ_στ)\n\nFor multicomponent addresses, σ and τ control the components involved. Alternatively, sum_components can be set to true, which treats all particles as belonging to the same component.\n\nExamples\n\njulia> geom = CubicGrid(2, 2);\n\njulia> g2 = G2RealSpace(geom)\nG2RealSpace(CubicGrid((2, 2), (true, true)), 1,1)\n\njulia> diagonal_element(g2, BoseFS(2,0,1,1))\n2×2 StaticArraysCore.SMatrix{2, 2, Float64, 4} with indices SOneTo(2)×SOneTo(2):\n 0.5  1.0\n 0.5  1.0\n\njulia> g2_cross = G2RealSpace(geom, 1, 2)\nG2RealSpace(CubicGrid((2, 2), (true, true)), 1,2)\n\njulia> g2_sum = G2RealSpace(geom, sum_components=true)\nG2RealSpace(CubicGrid((2, 2), (true, true)); sum_components=true)\n\njulia> diagonal_element(g2, fs\"|⇅⋅↓↑⟩\")\n2×2 StaticArraysCore.SMatrix{2, 2, Float64, 4} with indices SOneTo(2)×SOneTo(2):\n 0.0  0.0\n 0.0  0.5\n\njulia> diagonal_element(g2_cross, fs\"|⇅⋅↓↑⟩\")\n2×2 StaticArraysCore.SMatrix{2, 2, Float64, 4} with indices SOneTo(2)×SOneTo(2):\n 0.25  0.25\n 0.25  0.25\n\njulia> diagonal_element(g2_sum, fs\"|⇅⋅↓↑⟩\")\n2×2 StaticArraysCore.SMatrix{2, 2, Float64, 4} with indices SOneTo(2)×SOneTo(2):\n 0.5  1.0\n 0.5  1.0\n\nSee also\n\nCubicGrid\nHubbardRealSpace\nG2RealCorrelator\nG2MomCorrelator\nAbstractOperator\nAllOverlaps\n\n\n\n\n\n","category":"type"},{"location":"hamiltonians.html#Rimu.Hamiltonians.G2MomCorrelator","page":"Hamiltonians","title":"Rimu.Hamiltonians.G2MomCorrelator","text":"G2MomCorrelator(d::Int) <: AbstractOperator{ComplexF64}\n\nTwo-body correlation operator representing the density-density correlation at distance d. It returns a Complex value.\n\nCorrelation within a single component:\n\nhatG^(2)(d) = frac1Msum_spqr=1^M e^-id(p-q)2πM a^_s a^_p  a_q a_r δ_s+pq+r\n\nThe diagonal element, where (p-q)=0, is\n\nfrac1Msum_kp=1^M a^_k b^_p  b_p a_k \n\nArguments\n\nd::Integer: the distance between two particles.\n\nSee also\n\nRimu.G2RealCorrelator\nRimu.G2RealSpace\nRimu.AbstractOperator\nRimu.AllOverlaps\n\n\n\n\n\n","category":"type"},{"location":"hamiltonians.html#Rimu.Hamiltonians.SuperfluidCorrelator","page":"Hamiltonians","title":"Rimu.Hamiltonians.SuperfluidCorrelator","text":"SuperfluidCorrelator(d::Int) <: AbstractOperator{Float64}\n\nOperator for extracting superfluid correlation between sites separated by a distance d with 0 ≤ d < M:\n\n    hatC_textSF(d) = frac1M sum_i^M a_i^dagger a_i + d\n\nAssumes a one-dimensional lattice with M sites and periodic boundary conditions. M is also the number of modes in the Fock state address.\n\nUsage\n\nSuperfluid correlations can be extracted from a Monte Carlo calculation by wrapping SuperfluidCorrelator with AllOverlaps and passing into ProjectorMonteCarloProblem with the replica keyword argument. For an example with a similar use of G2RealCorrelator see G2 Correlator Example.\n\nSee also HubbardReal1D, G2RealCorrelator, AbstractOperator, and AllOverlaps.\n\n\n\n\n\n","category":"type"},{"location":"hamiltonians.html#Rimu.Hamiltonians.StringCorrelator","page":"Hamiltonians","title":"Rimu.Hamiltonians.StringCorrelator","text":"StringCorrelator(d::Int; address=nothing, type=nothing) <: AbstractOperator{T}\n\nOperator for extracting string correlation between lattice sites on a one-dimensional Hubbard lattice separated by a distance d with 0 ≤ d < M\n\n    C_textstring(d) = frac1M sum_j^M δ n_j\n                                         (e^i π sum_j  k  j + d δ n_k) δ n_j+d\n\nHere, δ n_j = n_j - n is the boson number deviation from the mean filling number and n = NM is the mean filling number of lattice sites with N particles and M lattice sites (or modes).\n\nAssumes a one-dimensional lattice with periodic boundary conditions. For usage see SuperfluidCorrelator and AllOverlaps.\n\nThe default element type T is ComplexF64. This can be overridden with the type keyword argument. If an address is provided, then T is calculated from the address type. It is set to ComplexF64 for non-integer filling numbers, and to Float64 for integer filling numbers or if d==0.\n\nSee also HubbardReal1D, G2RealCorrelator, SuperfluidCorrelator, AbstractOperator, and AllOverlaps.\n\n\n\n\n\n","category":"type"},{"location":"hamiltonians.html#Rimu.Hamiltonians.DensityMatrixDiagonal","page":"Hamiltonians","title":"Rimu.Hamiltonians.DensityMatrixDiagonal","text":"DensityMatrixDiagonal(mode; component=0) <: AbstractHamiltonian\n\nRepresent a diagonal element of the single-particle density:\n\nhatn_iσ = hat a^_iσ hat a_iσ\n\nwhere i is the mode and σ is the component. If component is zero, the sum over all components is computed.\n\nSee also\n\nsingle_particle_density\nSingleParticleDensity\nSingleParticleExcitation\n\n\n\n\n\n","category":"type"},{"location":"hamiltonians.html#Rimu.Hamiltonians.SingleParticleExcitation","page":"Hamiltonians","title":"Rimu.Hamiltonians.SingleParticleExcitation","text":"SingleParticleExcitation(i, j) <: AbstractOperator\n\nRepresent the ij element of the single-particle reduced density matrix:\n\nρ^(1)_ij = a^_i a_j\n\nwhere i <: Int and j <: Int specify the mode numbers.\n\nSee also\n\nsingle_particle_density\nSingleParticleDensity\nTwoParticleExcitation\n\n\n\n\n\n","category":"type"},{"location":"hamiltonians.html#Rimu.Hamiltonians.TwoParticleExcitation","page":"Hamiltonians","title":"Rimu.Hamiltonians.TwoParticleExcitation","text":"TwoParticleExcitation(i, j, k, l) <: AbstractOperator\n\nRepresent the ij kl element of the two-particle reduced density matrix:\n\nρ^(2)_ij kl =  a^_i a^_j a_l a_k\n\nwhere i, j, k, and l (all <: Int) specify the mode numbers.\n\nSee also\n\nsingle_particle_density\nSingleParticleDensity\nSingleParticleExcitation\n\n\n\n\n\n","category":"type"},{"location":"hamiltonians.html#Rimu.Hamiltonians.ReducedDensityMatrix","page":"Hamiltonians","title":"Rimu.Hamiltonians.ReducedDensityMatrix","text":"ReducedDensityMatrix{T=Float64}(p) <: AbstractObservable{Hermitian{T, Matrix{T}}}\n\nA matrix-valued operator that can be used to calculate the p-particle reduced density matrix. The matrix elements are defined as:\n\nhatρ^(p)_j_1j_1k_1k_p =  prod_i=1^p a^_j_i prod_l=p^1 a_k_l\n\nThe integer indices j_i and k_i represent single particle modes. For efficiency they are chosen to be distinct and ordered:\n\nj_1  j_2  ldots  j_p quad land quad k_1  k_2  ldots  k_p\n\nReducedDensityMatrix can be used to construct the single-particle reduced density matrix (with p == 1) for fermionic and bosonic Fock spaces with address types <: SingleComponentFockAddress. For higher order reduced density matrices with p > 1 only fermionic Fock addresses (FermiFS) are supported due to the ordering of indices.\n\nReducedDensityMatrix can be used with dot or AllOverlaps to calculate the whole matrix in one go.\n\nExamples\n\njulia> dvec_b = PDVec(BoseFS(1,1) => 0.5, BoseFS(2,0) => 0.5)\n2-element PDVec: style = IsDeterministic{Float64}()\n  fs\"|2 0⟩\" => 0.5\n  fs\"|1 1⟩\" => 0.5\n\njulia> Op1 = ReducedDensityMatrix(1)\nReducedDensityMatrix{Float64}(1)\n\njulia> dot(dvec_b, Op1, dvec_b)\n2×2 Hermitian{Float64, Matrix{Float64}}:\n 0.75      0.353553\n 0.353553  0.25\n\njulia> Op2 = ReducedDensityMatrix{Float32}(2)\nReducedDensityMatrix{Float32}(2)\n\njulia> dot(dvec_b, Op2, dvec_b)\nERROR: ArgumentError: ReducedDensityMatrix(p) with `p > 1` requires `FermiFS` addresses\n\njulia> dvec_f = PDVec(FermiFS(1,1,0,0) => 0.5, FermiFS(0,1,1,0) => 0.5)\n2-element PDVec: style = IsDeterministic{Float64}()\n  fs\"|⋅↑↑⋅⟩\" => 0.5\n  fs\"|↑↑⋅⋅⟩\" => 0.5\n\njulia> dot(dvec_f, Op2, dvec_f)\n6×6 Hermitian{Float32, Matrix{Float32}}:\n 0.25  0.0  0.25  0.0  0.0  0.0\n 0.0   0.0  0.0   0.0  0.0  0.0\n 0.25  0.0  0.25  0.0  0.0  0.0\n 0.0   0.0  0.0   0.0  0.0  0.0\n 0.0   0.0  0.0   0.0  0.0  0.0\n 0.0   0.0  0.0   0.0  0.0  0.0\n\nSee also single_particle_density, SingleParticleDensity, SingleParticleExcitation, TwoParticleExcitation.\n\n\n\n\n\n","category":"type"},{"location":"hamiltonians.html#Rimu.Hamiltonians.Momentum","page":"Hamiltonians","title":"Rimu.Hamiltonians.Momentum","text":"Momentum(component=0; fold=true) <: AbstractHamiltonian\n\nThe momentum operator P.\n\nThe component argument controls which component of the address is taken into consideration. A value of 0 sums the contributions of all components. If fold is true, the momentum is folded into the Brillouin zone.\n\njulia> address = BoseFS((1, 0, 2, 1, 2, 1, 1, 3))\nBoseFS{11,8}(1, 0, 2, 1, 2, 1, 1, 3)\n\njulia> v = DVec(address => 10);\n\njulia> rayleigh_quotient(Momentum(), DVec(address => 1))\n-2.0\n\njulia> rayleigh_quotient(Momentum(fold=false), DVec(address => 1))\n14.0\n\n\n\n\n\n","category":"type"},{"location":"hamiltonians.html#Rimu.Hamiltonians.AxialAngularMomentumHO","page":"Hamiltonians","title":"Rimu.Hamiltonians.AxialAngularMomentumHO","text":"AxialAngularMomentumHO(S; z_dim = 3, addr = BoseFS(prod(S))) <: AbstractHamiltonian\n\nAngular momentum operator for application to Cartesian harmonic oscillator basis, see HOCartesianContactInteractions or HOCartesianEnergyConservedPerDim. Represents the projection of angular momentum onto z-axis:\n\nhatL_z = i hbar sum_j=1^N left( b_x b_y^dag - b_y b_x^dag right)\n\nwhere b_x^dag and b_x are raising and lowering (ladder) operators for  a harmonic oscillator in the x dimension, and simlarly for y.\n\nThis is implemented for an N particle Fock space with creation and annihilation operators as\n\nfrac1hbar hatL_z = i sum_n_x=1^M_x sum_n_y=1^M_y\n    left( a_n_x-1n_y+1^dag - a_n_x+1n_y-1^dag right) a_n_x n_y\n\nin units of hbar.\n\nArgument S is a tuple defining the range of Cartesian modes in each dimension and their mapping to Fock space modes in a SingleComponentFockAddress. If S indicates a 3D system the z dimension can be changed by setting z_dim; S should be be isotropic in the remaining x-y plane, i.e. must have S[x_dim] == S[y_dim]. The starting address addr only needs to satisfy num_modes(addr) == prod(S).\n\nExample\n\nCalculate the overlap of two Fock addresses interpreted as harmonic oscillator states in a 2D Cartesian basis\n\njulia> S = (2,2)\n(2, 2)\n\njulia> Lz = AxialAngularMomentumHO(S)\nAxialAngularMomentumHO((2, 2); z_dim = 3, addr = BoseFS{0,4}(0, 0, 0, 0))\n\njulia> v = DVec(BoseFS(prod(S), 2 => 1) => 1.0)\nDVec{BoseFS{1, 4, BitString{4, 1, UInt8}},Float64} with 1 entry, style = IsDeterministic{Float64}()\n  fs\"|0 1 0 0⟩\" => 1.0\n\njulia> w = DVec(BoseFS(prod(S), 3 => 1) => 1.0)\nDVec{BoseFS{1, 4, BitString{4, 1, UInt8}},Float64} with 1 entry, style = IsDeterministic{Float64}()\n  fs\"|0 0 1 0⟩\" => 1.0\n\njulia> dot(w, Lz, v)\n0.0 + 1.0im\n\n\n\n\n\n","category":"type"},{"location":"hamiltonians.html#Geometry","page":"Hamiltonians","title":"Geometry","text":"","category":"section"},{"location":"hamiltonians.html","page":"Hamiltonians","title":"Hamiltonians","text":"Lattices in higher dimensions are defined here and can be passed with the keyword argument geometry to HubbardRealSpace and G2RealSpace.","category":"page"},{"location":"hamiltonians.html","page":"Hamiltonians","title":"Hamiltonians","text":"CubicGrid\nHamiltonians.Directions\nHamiltonians.Displacements\nHamiltonians.neighbor_site\nPeriodicBoundaries\nHardwallBoundaries\nLadderBoundaries","category":"page"},{"location":"hamiltonians.html#Rimu.Hamiltonians.CubicGrid","page":"Hamiltonians","title":"Rimu.Hamiltonians.CubicGrid","text":"CubicGrid(dims::NTuple{D,Int}, fold::NTuple{D,Bool})\n\nRepresents a D-dimensional grid. Used to define a cubic lattice and boundary conditions for some AbstractHamiltonians, e.g. with the keyword argument geometry when constructing a HubbardRealSpace. The type instance can be used to convert between cartesian vector indices (tuples or SVectors) and linear indices (integers). When indexed with vectors, it folds them back into the grid if the out-of-bounds dimension is periodic and 0 otherwise (see example below).\n\ndims controls the size of the grid in each dimension.\nfold controls whether the boundaries in each dimension are periodic (or folded in the case of momentum space).\n\njulia> geo = CubicGrid((2,3), (true,false))\nCubicGrid{2}((2, 3), (true, false))\n\njulia> geo[1]\n(1, 1)\n\njulia> geo[2]\n(2, 1)\n\njulia> geo[3]\n(1, 2)\n\njulia> geo[(1,2)]\n3\n\njulia> geo[(3,2)] # 3 is folded back into 1\n3\n\njulia> geo[(3,3)]\n5\n\njulia> geo[(3,4)] # returns 0 if out of bounds\n0\n\nSee also PeriodicBoundaries, HardwallBoundaries and LadderBoundaries for special-case constructors. See also HubbardRealSpace and G2RealSpace.\n\n\n\n\n\n","category":"type"},{"location":"hamiltonians.html#Rimu.Hamiltonians.Directions","page":"Hamiltonians","title":"Rimu.Hamiltonians.Directions","text":"Directions(D) <: AbstractVector{SVector{D,Int}}\nDirections(geometry::CubicGrid) <: AbstractVector{SVector{D,Int}}\n\nIterate over axis-aligned direction vectors in D dimensions.\n\njulia> Directions(3)\n6-element Directions{3}:\n [1, 0, 0]\n [0, 1, 0]\n [0, 0, 1]\n [-1, 0, 0]\n [0, -1, 0]\n [0, 0, -1]\n\n\nSee also CubicGrid.\n\n\n\n\n\n","category":"type"},{"location":"hamiltonians.html#Rimu.Hamiltonians.Displacements","page":"Hamiltonians","title":"Rimu.Hamiltonians.Displacements","text":"Displacements(geometry::CubicGrid) <: AbstractVector{SVector{D,Int}}\n\nReturn all valid offset vectors in a CubicGrid. If center=true the (0,0) displacement is placed at the centre of the array.\n\njulia> geometry = CubicGrid((3,4));\n\njulia> reshape(Displacements(geometry), (3,4))\n3×4 reshape(::Displacements{2, CubicGrid{2, (3, 4), (true, true)}}, 3, 4) with eltype StaticArraysCore.SVector{2, Int64}:\n [0, 0]  [0, 1]  [0, 2]  [0, 3]\n [1, 0]  [1, 1]  [1, 2]  [1, 3]\n [2, 0]  [2, 1]  [2, 2]  [2, 3]\n\njulia> reshape(Displacements(geometry; center=true), (3,4))\n3×4 reshape(::Displacements{2, CubicGrid{2, (3, 4), (true, true)}}, 3, 4) with eltype StaticArraysCore.SVector{2, Int64}:\n [-1, -1]  [-1, 0]  [-1, 1]  [-1, 2]\n [0, -1]   [0, 0]   [0, 1]   [0, 2]\n [1, -1]   [1, 0]   [1, 1]   [1, 2]\n\n\n\n\n\n\n","category":"type"},{"location":"hamiltonians.html#Rimu.Hamiltonians.neighbor_site","page":"Hamiltonians","title":"Rimu.Hamiltonians.neighbor_site","text":"neighbor_site(geom::CubicGrid, site, i)\n\nFind the i-th neighbor of site in the geometry. If the move is illegal, return 0.\n\nSee also CubicGrid.\n\n\n\n\n\n","category":"function"},{"location":"hamiltonians.html#Rimu.Hamiltonians.PeriodicBoundaries","page":"Hamiltonians","title":"Rimu.Hamiltonians.PeriodicBoundaries","text":"PeriodicBoundaries(dims...) -> CubicGrid\nPeriodicBoundaries(dims) -> CubicGrid\n\nReturn a CubicGrid with all dimensions periodic. Equivalent to CubicGrid(dims).\n\n\n\n\n\n","category":"function"},{"location":"hamiltonians.html#Rimu.Hamiltonians.HardwallBoundaries","page":"Hamiltonians","title":"Rimu.Hamiltonians.HardwallBoundaries","text":"HardwallBoundaries(dims...) -> CubicGrid\nHardwallBoundaries(dims) -> CubicGrid\n\nReturn a CubicGrid with all dimensions non-periodic. Equivalent to CubicGrid(dims, (false, false, ...)).\n\n\n\n\n\n","category":"function"},{"location":"hamiltonians.html#Rimu.Hamiltonians.LadderBoundaries","page":"Hamiltonians","title":"Rimu.Hamiltonians.LadderBoundaries","text":"LadderBoundaries(dims...) -> CubicGrid\nLadderBoundaries(dims) -> CubicGrid\n\nReturn a CubicGrid where the first dimension is dimensions non-periodic and the rest are periodic. Equivalent to CubicGrid(dims, (true, false, ...)).\n\n\n\n\n\n","category":"function"},{"location":"hamiltonians.html#Index","page":"Hamiltonians","title":"Index","text":"","category":"section"},{"location":"hamiltonians.html","page":"Hamiltonians","title":"Hamiltonians","text":"Pages   = [\"hamiltonians.md\"]","category":"page"},{"location":"testing.html#Code-testing","page":"Code testing","title":"Code testing","text":"","category":"section"},{"location":"testing.html","page":"Code testing","title":"Code testing","text":"The script runtest.jl in the test/ folder contains tests of the code in Rimu. To run the test simply run the script from the Julia REPL or run","category":"page"},{"location":"testing.html","page":"Code testing","title":"Code testing","text":"Rimu$ julia test/runtest.jl","category":"page"},{"location":"testing.html","page":"Code testing","title":"Code testing","text":"from the command line.","category":"page"},{"location":"testing.html","page":"Code testing","title":"Code testing","text":"More tests should be added over time to test core functionality of the code. To add new tests, directly edit the file runtest.jl.","category":"page"},{"location":"testing.html#Automated-testing-with-GitHub-Actions","page":"Code testing","title":"Automated testing with GitHub Actions","text":"","category":"section"},{"location":"testing.html","page":"Code testing","title":"Code testing","text":"GitHub Actions are set up to run the test script automatically on the GitHub cloud server every time a new commit to the master branch is pushed to the server. The setup for this to happen is configured in the file actions.yml in the Rimu/.github/workflows folder.","category":"page"},{"location":"testing.html#Testing-of-custom-types-for-use-with-Rimu","page":"Code testing","title":"Testing of custom types for use with Rimu","text":"","category":"section"},{"location":"testing.html","page":"Code testing","title":"Code testing","text":"The module Rimu.InterfaceTests contains a number of functions to test the interfaces of the AbstractHamiltonian type hierarchy. See Interface tests in the section Advanced operator usage and custom Hamiltonians.","category":"page"},{"location":"exactdiagonalization.html#Exact-Diagonalization","page":"Exact Diagonalization","title":"Exact Diagonalization","text":"","category":"section"},{"location":"exactdiagonalization.html","page":"Exact Diagonalization","title":"Exact Diagonalization","text":"The main functionality of Rimu for exact diagonalization is contained in the module ExactDiagonalization.","category":"page"},{"location":"exactdiagonalization.html","page":"Exact Diagonalization","title":"Exact Diagonalization","text":"ExactDiagonalization","category":"page"},{"location":"exactdiagonalization.html#Rimu.ExactDiagonalization","page":"Exact Diagonalization","title":"Rimu.ExactDiagonalization","text":"The module Rimu.ExactDiagonalization provides a framework for exact diagonalization of quantum many-body systems defined by an AbstractHamiltonian type.\n\nThe main usage is through defining an ExactDiagonalizationProblem and solving it with the solve function. The module provides a unified interface for accessing different solver algorithms, which make use of solvers provided by external packages.\n\nExports\n\nExactDiagonalizationProblem\nBasisSetRepresentation\nbuild_basis\nKrylovKitSolver\nLinearAlgebraSolver\nArpackSolver\nLOBPCGSolver\n\n\n\n\n\n","category":"module"},{"location":"exactdiagonalization.html#ExactDiagonalizationProblem","page":"Exact Diagonalization","title":"ExactDiagonalizationProblem","text":"","category":"section"},{"location":"exactdiagonalization.html","page":"Exact Diagonalization","title":"Exact Diagonalization","text":"ExactDiagonalizationProblem\nsolve(::ExactDiagonalizationProblem)\ninit(::ExactDiagonalizationProblem)","category":"page"},{"location":"exactdiagonalization.html#Rimu.ExactDiagonalization.ExactDiagonalizationProblem","page":"Exact Diagonalization","title":"Rimu.ExactDiagonalization.ExactDiagonalizationProblem","text":"ExactDiagonalizationProblem(hamiltonian::AbstractHamiltonian, [v0]; kwargs...)\n\nDefines an exact diagonalization problem with an AbstractHamiltonian hamiltonian. Optionally, a starting vector of type AbstractDVec, or a single address or a collection of addresses can be passed as v0.\n\nExactDiagonalizationProblems can be solved with solve.\n\nKeyword arguments\n\nalgorithm=LinearAlgebraSolver(): The algorithm to use for solving the problem. The   algorithm can also be specified as the second positional argument in the init   function.\nOptional keyword arguments will be passed on to the init and solve functions.\n\nAlgorithms\n\nLinearAlgebraSolver(): An algorithm for solving the problem using the   dense-matrix eigensolver from the LinearAlgebra standard library (eventually using   LAPACK). Only suitable for small matrices.\nKrylovKitSolver(matrix_free=true): An algorithm for finding a few eigenvalues   and vectors. With matrix_free=true the problem is solved without instatiating a   matrix. This is suitable for large dimensions. With matrix_free=false the problem is   solved after instantiating a sparse matrix. This is faster if sufficient memory is   available. Requires using KrylovKit.\nArpackSolver(): An algorithm for solving the problem after instantiating a   sparse matrix and using the Arpack Fortran library. Requires using Arpack.\nLOBPCGSolver(): An algorithm for solving the problem after instantiating a   sparse matrix using the LOBPCG method. Requires using IterativeSolvers.\n\nKeyword arguments for matrix-based algorithms (also accepted by init)\n\nSee BasisSetRepresentation for more information.\n\nsizelim: The maximum size of the basis set representation. The default is 10^6 for   sparse matrices and 10^5 for dense matrices.\ncutoff: A cutoff value for the basis set representation.\nfilter: A filter function for the basis set representation.\nmax_depth = Inf: Limit the depth when building the matrix.\nminimum_size = Inf: Stop building the matrix after this size is reached.\nnnzs = 0: A hint for the number of non-zero elements in the basis set representation. Setting a non-zero value can speed up the computation.\ncol_hint = 0: A hint for the number of columns in the basis set representation.\nsort = false: Whether to sort the basis set representation.\n\nKeyword arguments for iterative algorithms (also accepted by solve)\n\nverbose = false: Whether to print additional information.\nabstol = nothing: The absolute tolerance for the solver. If nothing, the solver   chooses a default value.\nhowmany = 1: The minimum number of eigenvalues to compute.\nwhich = :SR: Whether to compute the largest or smallest eigenvalues.\nmaxiters = nothing: The maximum number of iterations for the solver. If nothing, the   solver chooses a default value.\n\nSolving an ExactDiagonalizationProblem\n\nThe solve function can be called directly on an ExactDiagonalizationProblem to solve it. Alternatively, the init function can be used to initialize a solver, which can then be solved with solve. The solve function returns a result type with the eigenvalues, eigenvectors, and convergence information.\n\nResult type\n\nThe result type for the solve function is determined by the algorithm used. It has the following fields:\n\nvalues::Vector: The eigenvalues.\nvectors::Vector{<:AbstractDVec}: The eigenvectors.\nsuccess::Bool: A boolean flag indicating whether the solver was successful.\ninfo: Convergence information.\nalgorithm: The algorithm used for the computation.\nproblem: The ExactDiagonalizationProblem that was solved.\nAdditional fields may be present depending on the algorithm used.\n\nIterating the result type will yield the eigenvalues, eigenvectors, and a boolean flag success in that order.\n\nExamples\n\njulia> p = ExactDiagonalizationProblem(HubbardReal1D(BoseFS(1,1,1)))\nExactDiagonalizationProblem(\n  HubbardReal1D(fs\"|1 1 1⟩\"; u=1.0, t=1.0),\n  nothing;\n  NamedTuple()...\n)\n\njulia> result = solve(p) # convert to dense matrix and solve with LinearAlgebra.eigen\nEDResult for algorithm LinearAlgebraSolver() with 10 eigenvalue(s),\n  values = [-5.09593, -1.51882, -1.51882, 1.55611, 1.6093, 1.6093, 4.0, 4.53982, 4.90952, 4.90952],\n  and vectors of length 10.\n  Convergence info: \"Dense matrix eigensolver solution from `LinearAlgebra.eigen`\", with howmany = 10 eigenvalues requested.\n  success = true.\n\njulia> using KrylovKit # an external package has to be installed and loaded\n\njulia> s = init(p; algorithm = KrylovKitSolver(true)) # solve without building a matrix\nKrylovKitDirectEDSolver\n with algorithm KrylovKitSolver(matrix_free = true,) for hamiltonian = HubbardReal1D(fs\"|1 1 1⟩\"; u=1.0, t=1.0),\n  v0 = 1-element PDVec: style = IsDeterministic{Float64}()\n  fs\"|1 1 1⟩\" => 1.0,\n  kwargs = NamedTuple()\n)\n\njulia> values, vectors, success = solve(s);\n\njulia> result.values[1] ≈ values[1]\ntrue\n\nSee also solve(::ExactDiagonalizationProblem), init(::ExactDiagonalizationProblem), KrylovKitSolver, ArpackSolver, LinearAlgebraSolver.\n\nnote: Note\nUsing the KrylovKitSolver() algorithms requires the KrylovKit.jl package. The package can be loaded with using KrylovKit. Using the ArpackSolver() algorithm requires the Arpack.jl package. The package can be loaded with using Arpack. Using the LOBPCGSolver() algorithm requires the IterativeSolvers.jl package. The package can be loaded with using IterativeSolvers.\n\n\n\n\n\n","category":"type"},{"location":"exactdiagonalization.html#CommonSolve.solve-Tuple{ExactDiagonalizationProblem}","page":"Exact Diagonalization","title":"CommonSolve.solve","text":"solve(p::ExactDiagonalizationProblem, [algorithm]; kwargs...)\n\nSolve an ExactDiagonalizationProblem p directly. Optionally specify an algorithm. Returns a result type with the eigenvalues, eigenvectors, and convergence information.\n\nFor a description of the keyword arguments, see the documentation for ExactDiagonalizationProblem.\n\nSee also solve(::ProjectorMonteCarloProblem).\n\n\n\n\n\n","category":"method"},{"location":"exactdiagonalization.html#CommonSolve.init-Tuple{ExactDiagonalizationProblem}","page":"Exact Diagonalization","title":"CommonSolve.init","text":"init(p::ExactDiagonalizationProblem, [algorithm]; kwargs...)\n\nInitialize a solver for an ExactDiagonalizationProblem p with an optional algorithm. Returns a solver instance that can be solved with solve.\n\nFor a description of the keyword arguments, see the documentation for ExactDiagonalizationProblem.\n\n\n\n\n\n","category":"method"},{"location":"exactdiagonalization.html#Solver-algorithms","page":"Exact Diagonalization","title":"Solver algorithms","text":"","category":"section"},{"location":"exactdiagonalization.html","page":"Exact Diagonalization","title":"Exact Diagonalization","text":"KrylovKitSolver\nLinearAlgebraSolver\nArpackSolver\nLOBPCGSolver","category":"page"},{"location":"exactdiagonalization.html#Rimu.ExactDiagonalization.KrylovKitSolver","page":"Exact Diagonalization","title":"Rimu.ExactDiagonalization.KrylovKitSolver","text":"KrylovKitSolver(matrix_free::Bool; kwargs...)\nKrylovKitSolver(; matrix_free = false, kwargs...)\n\nAlgorithm for solving a large ExactDiagonalizationProblem to find a few eigenvalues and vectors using the KrylovKit.jl package. The Lanczos method is used for hermitian matrices, and the Arnoldi method is used for non-hermitian matrices.\n\nArguments\n\nmatrix_free = false: Whether to use a matrix-free algorithm. If false, a sparse matrix   will be instantiated. This is typically faster and recommended for small matrices,   but requires more memory. If true, the matrix is not instantiated, which is useful for   large matrices that would not fit into memory. The calculation will parallelise using   threading and MPI if available by making use of PDVec.\nkwargs: Additional keyword arguments are passed on to the function   KrylovKit.eigsolve().\n\nSee also ExactDiagonalizationProblem, solve.\n\nnote: Note\nRequires the KrylovKit.jl package to be loaded with using KrylovKit.\n\n\n\n\n\n","category":"type"},{"location":"exactdiagonalization.html#Rimu.ExactDiagonalization.LinearAlgebraSolver","page":"Exact Diagonalization","title":"Rimu.ExactDiagonalization.LinearAlgebraSolver","text":"LinearAlgebraSolver(; kwargs...)\n\nAlgorithm for solving an ExactDiagonalizationProblem using the dense-matrix eigensolver from the LinearAlgebra standard library. This is only suitable for small matrices.\n\nThe kwargs are passed on to function LinearAlgebra.eigen.\n\nKeyword arguments\n\npermute = true: Whether to permute the matrix before diagonalization.\nscale = true: Whether to scale the matrix before diagonalization.\nsortby: The sorting order for the eigenvalues.\n\nSee also ExactDiagonalizationProblem, solve.\n\n\n\n\n\n","category":"type"},{"location":"exactdiagonalization.html#Rimu.ExactDiagonalization.ArpackSolver","page":"Exact Diagonalization","title":"Rimu.ExactDiagonalization.ArpackSolver","text":"ArpackSolver(; kwargs...)\n\nAlgorithm for solving an ExactDiagonalizationProblem after instantiating a sparse matrix. It uses the Lanzcos method for hermitian problems, and the Arnoldi method for non-hermitian problems, using the Arpack Fortran library. This is faster than KrylovKitSolver(; matrix_free=true), but it requires more memory and will only be useful if the matrix fits into memory.\n\nThe kwargs are passed on to the function Arpack.eigs().\n\nSee also ExactDiagonalizationProblem, solve.\n\nnote: Note\nRequires the Arpack.jl package to be loaded with using Arpack.\n\n\n\n\n\n","category":"type"},{"location":"exactdiagonalization.html#Rimu.ExactDiagonalization.LOBPCGSolver","page":"Exact Diagonalization","title":"Rimu.ExactDiagonalization.LOBPCGSolver","text":"LOBPCGSolver(; kwargs...)\n\nThe Locally Optimal Block Preconditioned Conjugate Gradient Method (LOBPCG). Algorithm for solving an ExactDiagonalizationProblem after instantiating a sparse matrix.\n\nLOBPCG is not suitable for non-hermitian eigenvalue problems.\n\nThe kwargs are passed on to the function IterativeSolvers.lobpcg().\n\nSee also ExactDiagonalizationProblem, solve.\n\nnote: Note\nRequires the IterativeSolvers.jl package to be loaded with using IterativeSolvers.\n\n\n\n\n\n","category":"type"},{"location":"exactdiagonalization.html#Converting-a-Hamiltonian-in-to-a-matrix","page":"Exact Diagonalization","title":"Converting a Hamiltonian in to a matrix","text":"","category":"section"},{"location":"exactdiagonalization.html","page":"Exact Diagonalization","title":"Exact Diagonalization","text":"BasisSetRepresentation\nbuild_basis\nMatrix\nsparse","category":"page"},{"location":"exactdiagonalization.html#Rimu.ExactDiagonalization.BasisSetRepresentation","page":"Exact Diagonalization","title":"Rimu.ExactDiagonalization.BasisSetRepresentation","text":"BasisSetRepresentation(\n    hamiltonian::AbstractHamiltonian, addr=starting_address(hamiltonian);\n    sizelim=10^7, cutoff, filter, max_depth, minimum_size, sort=false, kwargs...\n)\nBasisSetRepresentation(hamiltonian::AbstractHamiltonian, addresses::AbstractVector; kwargs...)\n\nEagerly construct the basis set representation of the operator hamiltonian with all addresses reachable from addr. Instead of a single address, a vector of addresses can be passed.\n\nAn ArgumentError is thrown if dimension(hamiltonian) > sizelim in order to prevent memory overflow. Set sizelim = Inf in order to disable this behaviour.\n\nProviding the number nnzs of expected calculated matrix elements and col_hint for the estimated number of nonzero off-diagonal matrix elements in each matrix column may improve performance.\n\nProviding an energy cutoff will skip the columns and rows with diagonal elements greater than cutoff. Alternatively, an arbitrary filter function can be used instead. Addresses passed as arguments are not filtered. To generate the matrix truncated to the subspace spanned by the addresses, use filter = Returns(false).\n\nProviding a max_depth will limit the size of the matrix and basis by only visiting addresses that are connected to the starting_address through max_depth hops through the Hamiltonian. Similarly, providing minimum_size will stop the bulding process after the basis reaches a length of at least minimum_size.\n\nSetting sort to true will sort the matrix rows and columns. This is useful when the order of the columns matters, e.g. when comparing matrices. Any additional keyword arguments are passed on to Base.sortperm.\n\nwarning: Warning\nThe order of the returned basis and matrix rows and columns is arbitrary and\nnon-deterministic. Use `sort=true` if the ordering matters.\n\nFields\n\nsparse_matrix: sparse matrix representing hamiltonian in the basis basis\nbasis: vector of addresses\nhamiltonian: the Hamiltonian hamiltonian\n\nExample\n\njulia> hamiltonian = HubbardReal1D(BoseFS(1,0,0));\n\njulia> bsr = BasisSetRepresentation(hamiltonian)\nBasisSetRepresentation(HubbardReal1D(fs\"|1 0 0⟩\"; u=1.0, t=1.0)) with dimension 3 and 6 stored entries:3×3 SparseArrays.SparseMatrixCSC{Float64, Int32} with 6 stored entries:\n   ⋅   -1.0  -1.0\n -1.0    ⋅   -1.0\n -1.0  -1.0    ⋅\n\njulia> BasisSetRepresentation(hamiltonian, bsr.basis[1:2]; filter = Returns(false)) # passing addresses and truncating\nBasisSetRepresentation(HubbardReal1D(fs\"|1 0 0⟩\"; u=1.0, t=1.0)) with dimension 2 and 2 stored entries:2×2 SparseArrays.SparseMatrixCSC{Float64, Int32} with 2 stored entries:\n   ⋅   -1.0\n -1.0    ⋅\n\njulia> using LinearAlgebra; round.(eigvals(Matrix(bsr)); digits = 4) # eigenvalues\n3-element Vector{Float64}:\n -2.0\n  1.0\n  1.0\n\njulia> ev = eigvecs(Matrix(bsr))[:,1]; ev = ev .* sign(ev[1]) # ground state eigenvector\n3-element Vector{Float64}:\n 0.5773502691896257\n 0.5773502691896255\n 0.5773502691896257\n\njulia> dv = DVec(zip(bsr.basis, ev)) # ground state as DVec\nDVec{BoseFS{1, 3, BitString{3, 1, UInt8}},Float64} with 3 entries, style = IsDeterministic{Float64}()\n  fs\"|0 0 1⟩\" => 0.57735\n  fs\"|0 1 0⟩\" => 0.57735\n  fs\"|1 0 0⟩\" => 0.57735\n\nHas methods for dimension, sparse, Matrix, starting_address.\n\nPart of the AbstractHamiltonian interface. See also build_basis.\n\n\n\n\n\n","category":"type"},{"location":"exactdiagonalization.html#Rimu.ExactDiagonalization.build_basis","page":"Exact Diagonalization","title":"Rimu.ExactDiagonalization.build_basis","text":"build_basis(\n    ham, address=starting_address(ham);\n    cutoff, filter, sizelim, sort=false, kwargs...\n) -> basis\nbuild_basis(ham, addresses::AbstractVector; kwargs...)\n\nGet all basis element of a linear operator ham that are reachable (via non-zero matrix elements) from the address address, returned as a vector. Instead of a single address, a vector of addresses can be passed. Does not return the matrix, for that purpose use BasisSetRepresentation.\n\nProviding an energy cutoff will skip addresses with diagonal elements greater than cutoff. Alternatively, an arbitrary filter function can be used instead. Addresses passed as arguments are not filtered.\n\nProviding a max_depth will limit the size of the basis by only visiting addresses that are connected to the starting_address through max_depth hops through the Hamiltonian. Similarly, providing minimum_size will stop the bulding process after the basis reaches a length of at least minimum_size.\n\nA maximum basis size sizelim can be set which will throw an error if the expected dimension of ham is larger than sizelim. This may be useful when memory may be a concern. These options are disabled by default.\n\nwarning: Warning\nThe order the basis is returned in is arbitrary and non-deterministic. Use\n`sort=true` if the ordering matters.\n\n\n\n\n\nbuild_basis(addr::AbstractFockAddress)\nbuild_basis(::Type{<:AbstractFockAddress}) -> basis\n\nReturn all possible Fock states of a given type as a vector. This method is much faster than build_basis(::AbstractHamiltonian, ...), but does not take matrix blocking into account. This version of build_basis accepts no additional arguments.\n\nAll address types except OccupationNumberFS are supported.\n\nReturns a sorted vector of length equal to the dimension of addr.\n\nSee also AbstractFockAddress.\n\n\n\n\n\n","category":"function"},{"location":"exactdiagonalization.html#Base.Matrix","page":"Exact Diagonalization","title":"Base.Matrix","text":"Matrix(\n    hamiltonian::AbstractHamiltonian, addr=starting_address(hamiltonian);\n    sizelim=10^4, kwargs...\n)\nMatrix(bsr::BasisSetRepresentation)\n\nReturn a dense matrix representation of hamiltonian or bsr. kwargs are passed to BasisSetRepresentation.\n\nSee BasisSetRepresentation.\n\n\n\n\n\n","category":"type"},{"location":"exactdiagonalization.html#SparseArrays.sparse","page":"Exact Diagonalization","title":"SparseArrays.sparse","text":"sparse(hamiltonian::AbstractHamiltonian, addr=starting_address(hamiltonian); kwargs...)\nsparse(bsr::BasisSetRepresentation)\n\nReturn a sparse matrix representation of hamiltonian or bsr. kwargs are passed to BasisSetRepresentation.\n\nSee BasisSetRepresentation.\n\n\n\n\n\n","category":"function"},{"location":"exactdiagonalization.html#Deprecated","page":"Exact Diagonalization","title":"Deprecated","text":"","category":"section"},{"location":"exactdiagonalization.html","page":"Exact Diagonalization","title":"Exact Diagonalization","text":"BasisSetRep","category":"page"},{"location":"exactdiagonalization.html#Rimu.ExactDiagonalization.BasisSetRep","page":"Exact Diagonalization","title":"Rimu.ExactDiagonalization.BasisSetRep","text":"BasisSetRep(args...; kwargs...)\n\nBasisSetRep is deprecated. Use BasisSetRepresentation instead.\n\n\n\n\n\n","category":"function"},{"location":"documentation.html#Documentation-generation","page":"Documentation generation","title":"Documentation generation","text":"","category":"section"},{"location":"documentation.html","page":"Documentation generation","title":"Documentation generation","text":"We are using Documenter.jl to generate the documentation web site based on markdown files stored in docs/src. Please help keeping the documentation up-to-date by editing the markdown files! For instructions on how to write appropriate documentation please refer to the relevant chapter in the Julia documentation and the Documenter.jl documentation.","category":"page"},{"location":"documentation.html#Generating-the-documentation-web-site","page":"Documentation generation","title":"Generating the documentation web site","text":"","category":"section"},{"location":"documentation.html","page":"Documentation generation","title":"Documentation generation","text":"The documentation pages can be generated by running the build script by typing","category":"page"},{"location":"documentation.html","page":"Documentation generation","title":"Documentation generation","text":"Rimu$ julia --project=docs docs/make.jl","category":"page"},{"location":"documentation.html","page":"Documentation generation","title":"Documentation generation","text":"on the shell prompt from the Rimu/ folder. A complete image of the static documentation web site will be generated in the folder docs/build/. It can be viewed locally by pointing a web browser to file docs/build/index.html, or by deploying it to the GitHub pages web server.","category":"page"},{"location":"documentation.html#Automatic-documentation-generation-and-deployment","page":"Documentation generation","title":"Automatic documentation generation and deployment","text":"","category":"section"},{"location":"documentation.html","page":"Documentation generation","title":"Documentation generation","text":"Our documentation is hosted on GitHub pages. The documentation web site can be built and deployed automatically with GitHub Actions. This needs to be set up with an appropriate script in the file .github/workflows/docs.yml, where triggers for this to happen can be defined. In the current set up, a new documentation web site is generated and deployed whenever someone pushes to the develop branch on the GitHub server. The updated documentation can then be accessed here.","category":"page"},{"location":"documentation.html","page":"Documentation generation","title":"Documentation generation","text":"Previews for pull-requests can be accessed by replacing 101 in the following link with the PR number: https://RimuQMC.github.io/Rimu.jl/previews/PR101/","category":"page"},{"location":"documentation.html#Example-scripts","page":"Documentation generation","title":"Example scripts","text":"","category":"section"},{"location":"documentation.html","page":"Documentation generation","title":"Documentation generation","text":"Examples should be added to the scripts folder, in the form of .jl files suitable for parsing by Literate. The process of generating documentation is automated in the docs/make.jl file and assumes that the following line is at (or near) the top of the script:","category":"page"},{"location":"documentation.html","page":"Documentation generation","title":"Documentation generation","text":"# # Example N: Title","category":"page"},{"location":"documentation.html","page":"Documentation generation","title":"Documentation generation","text":"where the number N and Title will be extracted automatically.","category":"page"},{"location":"documentation.html","page":"Documentation generation","title":"Documentation generation","text":"Tests for the results and output of specific scripts should be added at the end of each example. The code to run the test should be hidden from the final generated document by appending \"#hide\" to each line of testing code. For example,","category":"page"},{"location":"documentation.html","page":"Documentation generation","title":"Documentation generation","text":"using Test                          #hide\n@test isfile(\"result.out\")          #hide\n@test result == expected_result     #hide","category":"page"},{"location":"addresses.html#Module-BitStringAddresses","page":"BitString addresses","title":"Module BitStringAddresses","text":"","category":"section"},{"location":"addresses.html","page":"BitString addresses","title":"BitString addresses","text":"This module contains the implementations of BitString and various Fock addresses. The addresses serve as a basis for a Hamiltonian.","category":"page"},{"location":"addresses.html","page":"BitString addresses","title":"BitString addresses","text":"While there are not restrictions on the type of address a Hamiltonian uses, Rimu provides implementations for Bosonic, Fermionic, and mixed Fock States.","category":"page"},{"location":"addresses.html","page":"BitString addresses","title":"BitString addresses","text":"When implementing a new address type, care must be taken to make them space-efficient and stack-allocated - avoid using (heap-allocated) arrays to represent your addresses at all costs!","category":"page"},{"location":"addresses.html#Fock-addresses","page":"BitString addresses","title":"Fock addresses","text":"","category":"section"},{"location":"addresses.html","page":"BitString addresses","title":"BitString addresses","text":"Rimu provides a variety of address implementations that should make it straightforward to implement efficient Hamiltonians. Examples are:","category":"page"},{"location":"addresses.html","page":"BitString addresses","title":"BitString addresses","text":"BoseFS Single-component bosonic Fock state with fixed particle and mode number.\nFermiFS Single-component fermionic Fock state with fixed particle and mode number.\nCompositeFS Multi-component Fock state composed of the above types.\nOccupationNumberFS Single-component bosonic Fock state with a fixed number of modes. The number of particles is not part of the type and can be changed by operators.","category":"page"},{"location":"addresses.html#Fock-address-API","page":"BitString addresses","title":"Fock address API","text":"","category":"section"},{"location":"addresses.html","page":"BitString addresses","title":"BitString addresses","text":"Modules = [BitStringAddresses]\nPages = [\"fockaddress.jl\",\"bosefs.jl\",\"fermifs.jl\",\"multicomponent.jl\",\"occupationnumberfs.jl\"]\nPrivate = false","category":"page"},{"location":"addresses.html#Rimu.BitStringAddresses.AbstractFockAddress","page":"BitString addresses","title":"Rimu.BitStringAddresses.AbstractFockAddress","text":"AbstractFockAddress{N,M}\n\nAbstract type representing a Fock state with N particles and M modes.\n\nSee also SingleComponentFockAddress, CompositeFS, BoseFS, FermiFS.\n\n\n\n\n\n","category":"type"},{"location":"addresses.html#Rimu.BitStringAddresses.BoseFSIndex","page":"BitString addresses","title":"Rimu.BitStringAddresses.BoseFSIndex","text":"BoseFSIndex\n\nStruct used for indexing and performing excitations on a BoseFS.\n\nFields:\n\noccnum: the occupation number.\nmode: the index of the mode.\noffset: the position of the mode in the address. This is the bit offset of the mode when\n\nthe address is represented by a bitstring, and the position in the list when it is  represented by SortedParticleList.\n\n\n\n\n\n","category":"type"},{"location":"addresses.html#Rimu.BitStringAddresses.FermiFSIndex","page":"BitString addresses","title":"Rimu.BitStringAddresses.FermiFSIndex","text":"FermiFSIndex\n\nStruct used for indexing and performing excitations on a FermiFS.\n\nFields:\n\noccnum: the occupation number.\nmode: the index of the mode.\noffset: the position of the mode in the address. This is mode - 1 when the address is represented by a bitstring, and the position in the list when using SortedParticleList.\n\n\n\n\n\n","category":"type"},{"location":"addresses.html#Rimu.BitStringAddresses.OccupiedModeMap","page":"BitString addresses","title":"Rimu.BitStringAddresses.OccupiedModeMap","text":"OccupiedModeMap(addr) <: AbstractVector\n\nGet a map of occupied modes in address as an AbstractVector of indices compatible with excitation - BoseFSIndex or FermiFSIndex.\n\nOccupiedModeMap(addr)[i] contains the index for the i-th occupied mode. This is useful because repeatedly looking for occupied modes with find_occupied_mode can be time-consuming. OccupiedModeMap(addr) is an eager version of the iterator returned by occupied_modes. It is similar to onr but contains more information.\n\nExample\n\njulia> b = BoseFS(10, 0, 0, 0, 2, 0, 1)\nBoseFS{13,7}(10, 0, 0, 0, 2, 0, 1)\n\njulia> mb = OccupiedModeMap(b)\n3-element OccupiedModeMap{7, BoseFSIndex}:\n BoseFSIndex(occnum=10, mode=1, offset=0)\n BoseFSIndex(occnum=2, mode=5, offset=14)\n BoseFSIndex(occnum=1, mode=7, offset=18)\n\njulia> f = FermiFS(1,1,1,1,0,0,1,0,0)\nFermiFS{5,9}(1, 1, 1, 1, 0, 0, 1, 0, 0)\n\njulia> mf = OccupiedModeMap(f)\n5-element OccupiedModeMap{5, FermiFSIndex}:\n FermiFSIndex(occnum=1, mode=1, offset=0)\n FermiFSIndex(occnum=1, mode=2, offset=1)\n FermiFSIndex(occnum=1, mode=3, offset=2)\n FermiFSIndex(occnum=1, mode=4, offset=3)\n FermiFSIndex(occnum=1, mode=7, offset=6)\n\njulia> mf == collect(occupied_modes(f))\ntrue\n\njulia> dot(mf, mb)\n11\n\njulia> dot(mf, 1:20)\n17\n\nSee also dot, SingleComponentFockAddress.\n\n\n\n\n\n","category":"type"},{"location":"addresses.html#Rimu.BitStringAddresses.OccupiedPairsMap","page":"BitString addresses","title":"Rimu.BitStringAddresses.OccupiedPairsMap","text":"OccupiedPairsMap(addr::SingleComponentFockAddress) <: AbstractVector\n\nGet a map of all distinct pairs of indices in addr. Pairs involving multiply-occupied modes are counted once, (including self-pairing). This is useful for cases where identifying pairs of particles for eg. interactions is not well-defined or efficient to do on the fly. This is an eager iterator whose elements are a tuple of particle indices that can be given to excitation\n\nExample\n\njulia> addr = BoseFS(10, 0, 0, 0, 2, 0, 1)\nBoseFS{13,7}(10, 0, 0, 0, 2, 0, 1)\n\njulia> pairs = OccupiedPairsMap(addr)\n5-element OccupiedPairsMap{78, Tuple{BoseFSIndex, BoseFSIndex}}:\n (BoseFSIndex(occnum=10, mode=1, offset=0), BoseFSIndex(occnum=10, mode=1, offset=0))\n (BoseFSIndex(occnum=2, mode=5, offset=14), BoseFSIndex(occnum=2, mode=5, offset=14))\n (BoseFSIndex(occnum=2, mode=5, offset=14), BoseFSIndex(occnum=10, mode=1, offset=0))\n (BoseFSIndex(occnum=1, mode=7, offset=18), BoseFSIndex(occnum=10, mode=1, offset=0))\n (BoseFSIndex(occnum=1, mode=7, offset=18), BoseFSIndex(occnum=2, mode=5, offset=14))\n\njulia> excitation(addr, pairs[2], pairs[4])\n(BoseFS{13,7}(9, 0, 0, 0, 4, 0, 0), 10.954451150103322)\n\nSee also OccupiedModeMap.\n\n\n\n\n\n","category":"type"},{"location":"addresses.html#Rimu.BitStringAddresses.SingleComponentFockAddress","page":"BitString addresses","title":"Rimu.BitStringAddresses.SingleComponentFockAddress","text":"SingleComponentFockAddress{N,M} <: AbstractFockAddress{N,M}\n\nA type representing a single component Fock state with N particles and M modes.\n\nImplemented subtypes: BoseFS, FermiFS.\n\nSupported functionality\n\nfind_mode\nfind_occupied_mode\nnum_occupied_modes\noccupied_modes: Lazy iterator.\nOccupiedModeMap: AbstractVector with eager construction.\nexcitation: Create a new address.\nBoseFSIndex and FermiFSIndex for indexing.\n\nSee also CompositeFS, AbstractFockAddress.\n\n\n\n\n\n","category":"type"},{"location":"addresses.html#Rimu.BitStringAddresses.excitation","page":"BitString addresses","title":"Rimu.BitStringAddresses.excitation","text":"excitation(addr::SingleComponentFockAddress, creations::NTuple, destructions::NTuple)\n\nGenerate an excitation on address addr by applying creations and destructions, which are tuples of the appropriate address indices (i.e. BoseFSIndex for bosons, or FermiFSIndex for fermions).\n\na^_c_1 a^_c_2 ldots a_d_1 a_d_2 ldots mathrmaddrrangle to\nαmathrmnaddrrangle\n\nReturns the new address naddr and the factor α. The value of α is given by the square root of the product of mode occupations before destruction and after creation. If the excitation is illegal, returns an arbitrary address and the value 0.0.\n\nExample\n\njulia> f = FermiFS(1,1,0,0,1,1,1,1)\nFermiFS{6,8}(1, 1, 0, 0, 1, 1, 1, 1)\n\njulia> i, j, k, l = find_mode(f, (3,4,2,5))\n(FermiFSIndex(occnum=0, mode=3, offset=2), FermiFSIndex(occnum=0, mode=4, offset=3), FermiFSIndex(occnum=1, mode=2, offset=1), FermiFSIndex(occnum=1, mode=5, offset=4))\n\njulia> excitation(f, (i,j), (k,l))\n(FermiFS{6,8}(1, 0, 1, 1, 0, 1, 1, 1), -1.0)\n\nSee SingleComponentFockAddress.\n\n\n\n\n\n","category":"function"},{"location":"addresses.html#Rimu.BitStringAddresses.find_mode","page":"BitString addresses","title":"Rimu.BitStringAddresses.find_mode","text":"find_mode(::SingleComponentFockAddress, i)\n\nFind the i-th mode in address. Returns BoseFSIndex for BoseFS, and FermiFSIndex for FermiFS. Can work on a tuple of modes. Does not check bounds.\n\njulia> find_mode(BoseFS(1, 0, 2), 2)\nBoseFSIndex(occnum=0, mode=2, offset=2)\n\njulia> find_mode(FermiFS(1, 1, 1, 0), (2,3))\n(FermiFSIndex(occnum=1, mode=2, offset=1), FermiFSIndex(occnum=1, mode=3, offset=2))\n\nSee SingleComponentFockAddress.\n\n\n\n\n\n","category":"function"},{"location":"addresses.html#Rimu.BitStringAddresses.find_occupied_mode","page":"BitString addresses","title":"Rimu.BitStringAddresses.find_occupied_mode","text":"find_occupied_mode(::SingleComponentFockAddress, k)\nfind_occupied_mode(::BoseFS, k, [n])\n\nFind the k-th occupied mode in address (with at least n particles). Returns BoseFSIndex for BoseFS, and FermiFSIndex for FermiFS. When unsuccessful it returns a zero index.\n\nExample\n\njulia> find_occupied_mode(FermiFS(1, 1, 1, 0), 2)\nFermiFSIndex(occnum=1, mode=2, offset=1)\n\njulia> find_occupied_mode(BoseFS(1, 0, 2), 1)\nBoseFSIndex(occnum=1, mode=1, offset=0)\n\njulia> find_occupied_mode(BoseFS(1, 0, 2), 1, 2)\nBoseFSIndex(occnum=2, mode=3, offset=3)\n\nSee also occupied_modes, OccupiedModeMap, SingleComponentFockAddress.\n\n\n\n\n\n","category":"function"},{"location":"addresses.html#Rimu.BitStringAddresses.num_components-Tuple{AbstractFockAddress}","page":"BitString addresses","title":"Rimu.BitStringAddresses.num_components","text":"num_components(::Type{<:AbstractFockAddress})\nnum_components(::AbstractFockAddress)\n\nNumber of components in address.\n\n\n\n\n\n","category":"method"},{"location":"addresses.html#Rimu.BitStringAddresses.num_modes-Tuple{AbstractFockAddress}","page":"BitString addresses","title":"Rimu.BitStringAddresses.num_modes","text":"num_modes(::Type{<:AbstractFockAddress})\nnum_modes(::AbstractFockAddress)\n\nNumber of modes represented by address.\n\n\n\n\n\n","category":"method"},{"location":"addresses.html#Rimu.BitStringAddresses.num_occupied_modes","page":"BitString addresses","title":"Rimu.BitStringAddresses.num_occupied_modes","text":"num_occupied_modes(::SingleComponentFockAddress)\n\nGet the number of occupied modes in address. Equivalent to length(occupied_modes(address)), or the number of non-zeros in its ONR representation.\n\nExample\n\njulia> num_occupied_modes(BoseFS((1, 0, 2)))\n2\njulia> num_occupied_modes(FermiFS((1, 1, 1, 0)))\n3\n\nSee SingleComponentFockAddress.\n\n\n\n\n\n","category":"function"},{"location":"addresses.html#Rimu.BitStringAddresses.num_particles-Tuple{AbstractFockAddress}","page":"BitString addresses","title":"Rimu.BitStringAddresses.num_particles","text":"num_particles(::Type{<:AbstractFockAddress})\nnum_particles(::AbstractFockAddress)\n\nNumber of particles represented by address.\n\n\n\n\n\n","category":"method"},{"location":"addresses.html#Rimu.BitStringAddresses.occupied_modes","page":"BitString addresses","title":"Rimu.BitStringAddresses.occupied_modes","text":"occupied_modes(::SingleComponentFockAddress)\n\nReturn a lazy iterator over all occupied modes in an address. Iterates over BoseFSIndexs for BoseFS, and over FermiFSIndexs for FermiFS. See OccupiedModeMap for an eager version.\n\nExample\n\njulia> b = BoseFS((1,5,0,4));\n\njulia> foreach(println, occupied_modes(b))\nBoseFSIndex(occnum=1, mode=1, offset=0)\nBoseFSIndex(occnum=5, mode=2, offset=2)\nBoseFSIndex(occnum=4, mode=4, offset=9)\n\njulia> f = FermiFS((1,1,0,1,0,0,1));\n\njulia> foreach(println, occupied_modes(f))\nFermiFSIndex(occnum=1, mode=1, offset=0)\nFermiFSIndex(occnum=1, mode=2, offset=1)\nFermiFSIndex(occnum=1, mode=4, offset=3)\nFermiFSIndex(occnum=1, mode=7, offset=6)\n\nSee also find_occupied_mode, SingleComponentFockAddress.\n\n\n\n\n\n","category":"function"},{"location":"addresses.html#Rimu.BitStringAddresses.onr","page":"BitString addresses","title":"Rimu.BitStringAddresses.onr","text":"occupation_number_representation(fs::SingleComponentFockAddress)\nonr(fs::SingleComponentFockAddress)\n\nCompute and return the occupation number representation of the Fock state fs as an SVector{M}, where M is the number of modes.\n\n\n\n\n\n","category":"function"},{"location":"addresses.html#Rimu.BitStringAddresses.@fs_str-Tuple{Any}","page":"BitString addresses","title":"Rimu.BitStringAddresses.@fs_str","text":"fs\"$(string)\"\n\nParse the compact representation of a Fock state. Useful for copying the printout from a vector to the REPL.\n\nExample\n\njulia> DVec(BoseFS{3,4}(0, 1, 2, 0) => 1)\nDVec{BoseFS{3, 4, BitString{6, 1, UInt8}},Int64} with 1 entry, style = IsStochasticInteger{Int64}()\n  fs\"|0 1 2 0⟩\" => 1\n\njulia> fs\"|0 1 2 0⟩\" => 1 # Copied from above printout\nBoseFS{3,4}(0, 1, 2, 0) => 1\n\njulia> fs\"|1 2 3⟩⊗|0 1 0⟩\" # composite bosonic Fock state\nCompositeFS(\n  BoseFS{6,3}(1, 2, 3),\n  BoseFS{1,3}(0, 1, 0),\n)\n\njulia> fs\"|↑↓↑⟩\" # construct a fermionic Fock state\nCompositeFS(\n  FermiFS{2,3}(1, 0, 1),\n  FermiFS{1,3}(0, 1, 0),\n)\n\njulia> s = fs\"|0 1 2 0⟩{}\" # constructing OccupationNumberFS with default UInt8 container\nOccupationNumberFS{4, UInt8}(0, 1, 2, 0)\n\njulia> [s] # prints out with the signifcant number of bits specified in braces\n1-element Vector{OccupationNumberFS{4, UInt8}}:\n fs\"|0 1 2 0⟩{8}\"\n\nSee also FermiFS, BoseFS, CompositeFS, FermiFS2C, OccupationNumberFS.\n\n\n\n\n\n","category":"macro"},{"location":"addresses.html#Rimu.BitStringAddresses.BoseFS","page":"BitString addresses","title":"Rimu.BitStringAddresses.BoseFS","text":"BoseFS{N,M,S} <: SingleComponentFockAddress\n\nAddress type that represents a Fock state of N spinless bosons in M modes by wrapping a BitString, or a SortedParticleList. Which is wrapped is chosen automatically based on the properties of the address.\n\nConstructors\n\nBoseFS{[N,M]}(val::Integer...): Create BoseFS{N,M} from occupation numbers. This is type-stable if the number of modes M and the number of particles N are provided. Otherwise, M and N are inferred from the arguments.\nBoseFS{[N,M]}(onr): Create BoseFS{N,M} from occupation number representation, see onr. This is efficient if N and M are provided, and onr is a statically-sized collection, such as a Tuple or SVector.\nBoseFS{[N,M]}([M, ]pairs...): Provide the number of modes M and mode => occupation_number pairs. If M is provided as a type parameter, it should not be provided as the first argument.  Useful for creating sparse addresses. pairs can be multiple arguments or an iterator of pairs.\nBoseFS{N,M,S}(bs::S): Unsafe constructor. Does not check whether the number of particles in bs is equal to N.\n@fs_str: Addresses are sometimes printed in a compact manner. This representation can also be used as a constructor. See the last example below.\n\nExamples\n\njulia> BoseFS{6,5}(0, 1, 2, 3, 0)\nBoseFS{6,5}(0, 1, 2, 3, 0)\n\njulia> BoseFS([abs(i - 3) ≤ 1 ? i - 1 : 0 for i in 1:5])\nBoseFS{6,5}(0, 1, 2, 3, 0)\n\njulia> BoseFS(5, 2 => 1, 3 => 2, 4 => 3)\nBoseFS{6,5}(0, 1, 2, 3, 0)\n\njulia> BoseFS{6,5}(i => i - 1 for i in 2:4)\nBoseFS{6,5}(0, 1, 2, 3, 0)\n\njulia> fs\"|0 1 2 3 0⟩\"\nBoseFS{6,5}(0, 1, 2, 3, 0)\n\njulia> fs\"|b 5: 2 3 3 4 4 4⟩\"\nBoseFS{6,5}(0, 1, 2, 3, 0)\n\nSee also: SingleComponentFockAddress, OccupationNumberFS, FermiFS, CompositeFS, FermiFS2C.\n\n\n\n\n\n","category":"type"},{"location":"addresses.html#Rimu.BitStringAddresses.bose_hubbard_interaction-Union{Tuple{BoseFS{<:Any, <:Any, A}}, Tuple{A}} where A<:BitString","page":"BitString addresses","title":"Rimu.BitStringAddresses.bose_hubbard_interaction","text":"bose_hubbard_interaction(address)\n\nReturn Σ_i n_i (n_i-1) for computing the Bose-Hubbard on-site interaction (without the U prefactor.)\n\nExample\n\njulia> Hamiltonians.bose_hubbard_interaction(BoseFS{4,4}((2,1,1,0)))\n2\njulia> Hamiltonians.bose_hubbard_interaction(BoseFS{4,4}((3,0,1,0)))\n6\n\n\n\n\n\n","category":"method"},{"location":"addresses.html#Rimu.BitStringAddresses.hopnextneighbour-Union{Tuple{A}, Tuple{M}, Tuple{N}, Tuple{BoseFS{N, M, A}, Any}} where {N, M, A<:BitString}","page":"BitString addresses","title":"Rimu.BitStringAddresses.hopnextneighbour","text":"new_address, value = hopnextneighbour(add, chosen, boundary_condition)\n\nCompute the new address of a hopping event for the Hubbard model. Returns the new address and the square root of product of occupation numbers of the involved modes multiplied by a term consistent with boundary condition as the value.  The following boundary conditions are supported:\n\n:periodic: hopping over the boundary gives does not change the value.\n:twisted: hopping over the boundary flips the sign of the value.\n:hard_wall: hopping over the boundary gives a value of zero.\nθ <: Number: hopping over the boundary gives a value multiplied by exp(iθ) or exp(iθ) depending on the direction of hopping.\n\nThe off-diagonals are indexed as follows:\n\n(chosen + 1) ÷ 2 selects the hopping site.\nEven chosen indicates a hop to the left.\nOdd chosen indicates a hop to the right.\n\nExample\n\njulia> using Rimu.Hamiltonians: hopnextneighbour\n\njulia> hopnextneighbour(BoseFS(1, 0, 1), 3)\n(BoseFS{2,3}(2, 0, 0), 1.4142135623730951)\n\njulia> hopnextneighbour(BoseFS(1, 0, 1), 4)\n(BoseFS{2,3}(1, 1, 0), 1.0)\n\njulia> hopnextneighbour(BoseFS(1, 0, 1), 3, :twisted)\n(BoseFS{2,3}(2, 0, 0), -1.4142135623730951)\n\njulia> hopnextneighbour(BoseFS(1, 0, 1), 3, :hard_wall)\n(BoseFS{2,3}(2, 0, 0), 0.0)\n\njulia> hopnextneighbour(BoseFS(1, 0, 1), 3, π/4)\n(BoseFS{2,3}(2, 0, 0), 1.0000000000000002 + 1.0im)\n\n\n\n\n\n","category":"method"},{"location":"addresses.html#Rimu.BitStringAddresses.near_uniform-Union{Tuple{Type{<:BoseFS{N, M}}}, Tuple{M}, Tuple{N}} where {N, M}","page":"BitString addresses","title":"Rimu.BitStringAddresses.near_uniform","text":"near_uniform(BoseFS{N,M}) -> BoseFS{N,M}\n\nCreate bosonic Fock state with near uniform occupation number of M modes with a total of N particles.\n\nExamples\n\njulia> near_uniform(BoseFS{7,5})\nBoseFS{7,5}(2, 2, 1, 1, 1)\n\njulia> near_uniform(FermiFS{3,5})\nFermiFS{3,5}(1, 1, 1, 0, 0)\n\n\n\n\n\n","category":"method"},{"location":"addresses.html#Rimu.BitStringAddresses.FermiFS","page":"BitString addresses","title":"Rimu.BitStringAddresses.FermiFS","text":"FermiFS{N,M,S} <: SingleComponentFockAddress\n\nAddress type that represents a Fock state of N fermions of the same spin in M modes by wrapping a BitString, or a SortedParticleList. Which is wrapped is chosen automatically based on the properties of the address.\n\nConstructors\n\nFermiFS{[N,M]}(val::Integer...): Create FermiFS{N,M} from occupation numbers. This is type-stable if the number of modes M and the number of particles N are provided. Otherwise, M and N are inferred from the arguments.\nFermiFS{[N,M]}(onr): Create FermiFS{N,M}  from occupation number representation, see onr. This is efficient if N and M are provided, and onr is a statically-sized collection, such as a Tuple{M} or SVector{M}.\nFermiFS{[N,M]}([M, ]pairs...): Provide the number of modes M and pairs of the form mode => 1. If M is provided as a type parameter, it should not be provided as the first argument.  Useful for creating sparse addresses. pairs can be multiple arguments or an iterator of pairs.\nFermiFS{N,M,S}(bs::S): Unsafe constructor. Does not check whether the number of particles in bs is equal to N, or whether each mode only contains one particle.\n@fs_str: Addresses are sometimes printed in a compact manner. This representation can also be used as a constructor. See the last example below.\n\nExamples\n\njulia> FermiFS{3,5}(0, 1, 1, 1, 0)\nFermiFS{3,5}(0, 1, 1, 1, 0)\n\njulia> FermiFS([abs(i - 3) ≤ 1 for i in 1:5])\nFermiFS{3,5}(0, 1, 1, 1, 0)\n\njulia> FermiFS(5, 2 => 1, 3 => 1, 4 => 1)\nFermiFS{3,5}(0, 1, 1, 1, 0)\n\njulia> FermiFS{3,5}(i => 1 for i in 2:4)\nFermiFS{3,5}(0, 1, 1, 1, 0)\n\njulia> fs\"|⋅↑↑↑⋅⟩\"\nFermiFS{3,5}(0, 1, 1, 1, 0)\n\njulia> fs\"|f 5: 2 3 4⟩\"\nFermiFS{3,5}(0, 1, 1, 1, 0)\n\nSee also: SingleComponentFockAddress, BoseFS, CompositeFS, FermiFS2C, BitString, OccupationNumberFS.\n\n\n\n\n\n","category":"type"},{"location":"addresses.html#Rimu.BitStringAddresses.CompositeFS","page":"BitString addresses","title":"Rimu.BitStringAddresses.CompositeFS","text":"CompositeFS(addresses::SingleComponentFockAddress...) <: AbstractFockAddress\n\nUsed to encode addresses for multi-component models. All component addresses are expected have the same number of modes.\n\nSee also: BoseFS, FermiFS, SingleComponentFockAddress, num_modes, FermiFS2C, AbstractFockAddress.\n\n\n\n\n\n","category":"type"},{"location":"addresses.html#Rimu.BitStringAddresses.FermiFS2C","page":"BitString addresses","title":"Rimu.BitStringAddresses.FermiFS2C","text":"FermiFS2C <: AbstractFockAddress\nFermiFS2C(onr_a, onr_b)\n\nFock state address with two fermionic (spin) components. Alias for CompositeFS with two FermiFS components. Construct by specifying either two compatible FermiFSs, two onrs, or the number of modes followed by mode => occupation_number pairs, where occupation_number=1 will put a particle in the first component and occupation_number=-1 will put a particle in the second component. See examples below.\n\nExamples\n\njulia> FermiFS2C(FermiFS(1,0,0), FermiFS(0,1,1))\nCompositeFS(\n  FermiFS{1,3}(1, 0, 0),\n  FermiFS{2,3}(0, 1, 1),\n)\n\njulia> FermiFS2C((1,0,0), (0,1,1))\nCompositeFS(\n  FermiFS{1,3}(1, 0, 0),\n  FermiFS{2,3}(0, 1, 1),\n)\n\njulia> FermiFS2C(3, 1 => 1, 2 => -1, 3 => -1)\nCompositeFS(\n  FermiFS{1,3}(1, 0, 0),\n  FermiFS{2,3}(0, 1, 1),\n)\n\njulia> fs\"|↑↓↓⟩\"\nCompositeFS(\n  FermiFS{1,3}(1, 0, 0),\n  FermiFS{2,3}(0, 1, 1),\n)\n\n\n\n\n\n","category":"type"},{"location":"addresses.html#Rimu.BitStringAddresses.time_reverse-Union{Tuple{CompositeFS{2, N, M, T}}, Tuple{T}, Tuple{M}, Tuple{N}} where {N, M, T<:(Tuple{T, T} where T)}","page":"BitString addresses","title":"Rimu.BitStringAddresses.time_reverse","text":"time_reverse(addr)\n\nApply the time-reversal operation on a two-component Fock address that flips all the spins.\n\nRequires each component address to have the same type.\n\n\n\n\n\n","category":"method"},{"location":"addresses.html#Rimu.BitStringAddresses.OccupationNumberFS","page":"BitString addresses","title":"Rimu.BitStringAddresses.OccupationNumberFS","text":"OccupationNumberFS{M,T} <: SingleComponentFockAddress\n\nAddress type that stores the occupation numbers of a single component bosonic Fock state with M modes. The occupation numbers must fit into the type T <: Unsigned. The number of particles is runtime data, and can be retrieved with num_particles(address).\n\nConstructors\n\nOccupationNumberFS(val::Integer...): Construct from occupation numbers. Must be < 256 to fit into UInt8.\nOccupationNumberFS{[M,T]}(onr): Construct from collection onr with M occupation numbers with type T. If unspecified, the type T of the occupation numbers is inferred from the type of the arguments.\nOccupationNumberFS(fs::BoseFS): Construct from BoseFS.\nWith shortform macro @fs_str. Specify the number of significant bits in braces. See example below.\n\nExamples\n\njulia> ofs = OccupationNumberFS(1,2,3)\nOccupationNumberFS{3, UInt8}(1, 2, 3)\n\njulia> ofs == fs\"|1 2 3⟩{8}\"\ntrue\n\njulia> num_particles(ofs)\n6\n\n\n\n\n\n","category":"type"},{"location":"addresses.html#Rimu.BitStringAddresses.excitation-Union{Tuple{T}, Tuple{OccupationNumberFS{<:Any, T}, NTuple{var\"#s61\", Int64} where var\"#s61\", NTuple{var\"#s5\", Int64} where var\"#s5\"}} where T","page":"BitString addresses","title":"Rimu.BitStringAddresses.excitation","text":"excitation(addr::OccupationNumberFS, c::NTuple, d::NTuple)\n→ (nadd, α)\n\nGenerate an excitation on an OccupationNumberFS by applying the creation and destruction operators specified by the tuples of mode numbers c and d to the Fock state addr. The modes are indexed by integers (starting at 1), or by indices of type BoseFSIndex. The value of α is given by the square root of the product of mode occupations before destruction and after creation.\n\nThe number of particles may change by this type of excitation.\n\nExample\n\njulia> s = fs\"|1 2 3⟩{8}\"\nOccupationNumberFS{3, UInt8}(1, 2, 3)\n\njulia> num_particles(s)\n6\n\njulia> es, α = excitation(s, (1,1), (3,))\n(OccupationNumberFS{3, UInt8}(3, 2, 2), 4.242640687119285)\n\njulia> num_particles(es)\n7\n\n\n\n\n\n","category":"method"},{"location":"addresses.html#Internal-representations","page":"BitString addresses","title":"Internal representations","text":"","category":"section"},{"location":"addresses.html","page":"BitString addresses","title":"BitString addresses","text":"The atomic addresses, BoseFS and FermiFS, are implemented as either bitstrings or sorted lists of particles. Using these approaches over an occupation number representation makes the addresses much more space-efficient.","category":"page"},{"location":"addresses.html","page":"BitString addresses","title":"BitString addresses","text":"Therewhile OccupationNumberFS internally uses the occupation number representation,  which allows it to handle excitation operations that change the particle number. This is fast but requires more storage space.","category":"page"},{"location":"addresses.html#Internal-APIs","page":"BitString addresses","title":"Internal APIs","text":"","category":"section"},{"location":"addresses.html","page":"BitString addresses","title":"BitString addresses","text":"Modules = [BitStringAddresses]\nPages = [\"bitstring.jl\", \"sortedparticlelist.jl\"]\nPrivate = false","category":"page"},{"location":"addresses.html#Rimu.BitStringAddresses.BitString","page":"BitString addresses","title":"Rimu.BitStringAddresses.BitString","text":"BitString{B,N,T<:Unsigned}\n\nType for storing bitstrings of static size. Holds B bits in N chunks, where each chunk is of type T.\n\nN is chosen automatically to accommodate B bits as efficiently as possible.\n\nConstructors\n\nBitString{B,N,T}(::SVector{N,T}): unsafe constructor. Does not check for ghost bits.\nBitString{B,N,T}(i::T): as above, but sets i as the rightmost chunk.\nBitString{B}(::Integer): Convert integer to BitString. Integer is truncated to the correct number of bits.\n\n\n\n\n\n","category":"type"},{"location":"addresses.html#Rimu.BitStringAddresses.SortedParticleList","page":"BitString addresses","title":"Rimu.BitStringAddresses.SortedParticleList","text":"SortedParticleList{N,M,T<:Unsigned}\n\nType for storing sparse fock states. Stores the mode number of each particle as an entry with only its mode stored. The entries are always kept sorted.\n\nIterating over SortedParticleLists yields occupied modes as a tuple of occupation number, mode number, and position in list.\n\nConstructors\n\nSortedParticleList{N,M,T}(::SVector{N,T}): unsafe constructor. Does not sort input.\nSortedParticleList(arr::AbstractVector): convert ONR to SortedParticleList\n\n\n\n\n\n","category":"type"},{"location":"addresses.html#Index","page":"BitString addresses","title":"Index","text":"","category":"section"},{"location":"addresses.html","page":"BitString addresses","title":"BitString addresses","text":"Pages   = [\"addresses.md\"]","category":"page"},{"location":"API.html#API","page":"API","title":"API","text":"","category":"section"},{"location":"API.html#Rimu","page":"API","title":"Rimu","text":"","category":"section"},{"location":"API.html","page":"API","title":"API","text":"Modules = [Rimu]","category":"page"},{"location":"API.html#Rimu.Rimu","page":"API","title":"Rimu.Rimu","text":"Rimu\n\nRandom integrators for many-body quantum systems\n\nWelcome to Rimu version 0.14.0. Read the documentation online.\n\n\n\n\n\n","category":"module"},{"location":"API.html#Rimu.PACKAGE_VERSION","page":"API","title":"Rimu.PACKAGE_VERSION","text":"Rimu.PACKAGE_VERSION\n\nConstant that contains the current VersionNumber of Rimu.\n\n\n\n\n\n","category":"constant"},{"location":"API.html#DataFrames.DataFrame-Tuple{Rimu.Report}","page":"API","title":"DataFrames.DataFrame","text":"DataFrame(report::Report)\n\nConvert the Report to a DataFrame. Metadata is added as metadata to the DataFrame.\n\n\n\n\n\n","category":"method"},{"location":"API.html#Rimu.AllOverlaps","page":"API","title":"Rimu.AllOverlaps","text":"AllOverlaps(n_replicas=2; operator=nothing, transform=nothing, vecnorm=true)\n    <: ReplicaStrategy{n_replicas}\n\nRun n_replicas replicas and report overlaps between all pairs of replica vectors. If operator is not nothing, the overlap dot(c1, operator, c2) is reported as well. If operator is a tuple of operators, the overlaps are computed for all operators.\n\nColumn names in the report are of the form c{i}_dot_c{j} for vector-vector overlaps, and c{i}_Op{k}_c{j} for operator overlaps.\n\nSee ProjectorMonteCarloProblem, ReplicaStrategy and AbstractOperator (for an interface for implementing operators).\n\nTransformed Hamiltonians\n\nIf a transformed Hamiltonian G has been passed to ProjectorMonteCarloProblem then overlaps can be calculated by passing the same transformed Hamiltonian to AllOverlaps by setting transform=G. A warning is given if these two Hamiltonians do not match.\n\nImplemented transformations are:\n\nGutzwillerSampling\nGuidingVectorSampling\n\nIn the case of a transformed Hamiltonian the overlaps are defined as follows. For a similarity transformation G of the Hamiltonian (see e.g. GutzwillerSampling.)\n\n    hatG = f hatH f^-1\n\nThe expectation value of an operator hatA is\n\n    langle hatA rangle = langle psi  hatA  psi rangle\n        = fraclangle phi  f^-1 hatA f^-1  phi ranglelangle phi  f^-2  phi rangle\n\nwhere\n\n     phi rangle = f  psi rangle\n\nis the (right) eigenvector of hatG and  psi rangle is an eigenvector of hatH.\n\nFor a K-tuple of input operators (hatA_1  hatA_K), overlaps of langle phi  f^-1 hatA f^-1  phi rangle are reported as c{i}_Op{k}_c{j}. The correct vector-vector overlap langle phi  f^-2  phi rangle is reported last as c{i}_Op{K+1}_c{j}. This is in addition to the bare vector-vector overlap langle phi  f^-2  phi rangle that is reported as c{i}_dot_c{j}.\n\nIn either case the c{i}_dot_c{j} overlap can be omitted with the flag vecnorm=false.\n\n\n\n\n\n","category":"type"},{"location":"API.html#Rimu.ConstantTimeStep","page":"API","title":"Rimu.ConstantTimeStep","text":"ConstantTimeStep <: TimeStepStrategy\n\nKeep time_step constant.\n\n\n\n\n\n","category":"type"},{"location":"API.html#Rimu.DefaultShiftParameters","page":"API","title":"Rimu.DefaultShiftParameters","text":"DefaultShiftParameters\n\nDefault mutable struct for storing the shift parameters.\n\nSee ShiftStrategy, initialise_shift_parameters.\n\n\n\n\n\n","category":"type"},{"location":"API.html#Rimu.DontUpdate","page":"API","title":"Rimu.DontUpdate","text":"DontUpdate(; target_walkers = 1_000) <: ShiftStrategy\n\nDon't update the shift.  Return when target_walkers is reached.\n\nSee ShiftStrategy, ProjectorMonteCarloProblem.\n\n\n\n\n\n","category":"type"},{"location":"API.html#Rimu.DoubleLogProjected","page":"API","title":"Rimu.DoubleLogProjected","text":"DoubleLogProjected(; target, projector, ζ = 0.08, ξ = ζ^2/4) <: ShiftStrategy\n\nStrategy for updating the shift according to the log formula with damping parameter ζ and ξ after projecting onto projector.\n\nS^n+1 = S^n -fracζdτlnleft(fracPΨ^(n+1)PΨ^(n)right)-fracξdτlnleft(fracPΨ^(n+1)texttargetright)\n\nNote that adjusting the keyword maxlength in ProjectorMonteCarloProblem is advised as the default may not be appropriate.\n\nSee ShiftStrategy, ProjectorMonteCarloProblem.\n\n\n\n\n\n","category":"type"},{"location":"API.html#Rimu.DoubleLogSumUpdate","page":"API","title":"Rimu.DoubleLogSumUpdate","text":"DoubleLogSumUpdate(; target_walkers = 1000, ζ = 0.08, ξ = ζ^2/4, α = 1/2) <: ShiftStrategy\n\nStrategy for updating the shift according to the log formula with damping parameters ζ and ξ.\n\nS^n+1 = S^n -fracζdτlnleft(fracN_mathrmw^n+1N_mathrmw^nright)\n- fracξdτlnleft(fracN_mathrmw^n+1N_mathrmw^texttargetright)\n\nwhere N_mathrmw = (1-α)*walkernumber() + α*UniformProjector()⋅ψ computed with walkernumber() and UniformProjector(). When ξ = ζ^2/4 this corresponds to critical damping with a damping time scale T = 2/ζ.\n\nSee ShiftStrategy, ProjectorMonteCarloProblem.\n\n\n\n\n\n","category":"type"},{"location":"API.html#Rimu.DoubleLogUpdate","page":"API","title":"Rimu.DoubleLogUpdate","text":"DoubleLogUpdate(; target_walkers = 1_000, ζ = 0.08, ξ = ζ^2/4) <: ShiftStrategy\n\nStrategy for updating the shift according to the log formula with damping parameter ζ and ξ.\n\nS^n+1 = S^n -fracζdτlnleft(fracΨ_1^n+1Ψ_1^nright)-fracξdτlnleft(fracΨ_1^n+1Ψ_1^texttargetright)\n\nWhen ξ = ζ^2/4 this corresponds to critical damping with a damping time scale T = 2/ζ.\n\nSee ShiftStrategy, ProjectorMonteCarloProblem.\n\n\n\n\n\n","category":"type"},{"location":"API.html#Rimu.DoubleLogUpdateAfterTargetWalkers","page":"API","title":"Rimu.DoubleLogUpdateAfterTargetWalkers","text":"DoubleLogUpdateAfterTargetWalkers(target_walkers = 1_000, ζ = 0.08, ξ = ζ^2/4) <: ShiftStrategy\n\nStrategy for updating the shift: After target_walkers is reached, update the shift according to the log formula with damping parameter ζ and ξ.\n\nSee DoubleLogUpdate, ShiftStrategy, ProjectorMonteCarloProblem.\n\n\n\n\n\n","category":"type"},{"location":"API.html#Rimu.FCIQMC","page":"API","title":"Rimu.FCIQMC","text":"FCIQMC(; kwargs...) <: PMCAlgorithm\n\nAlgorithm for the full configuration interaction quantum Monte Carlo (FCIQMC) method. The default algorithm for ProjectorMonteCarloProblem.\n\nKeyword arguments and defaults:\n\nshift_strategy = DoubleLogUpdate(; targetwalkers = 1_000, ζ = 0.08,   ξ = ζ^2/4): How to update the shift.\ntime_step_strategy = ConstantTimeStep(): Adjust time step or not.\n\nSee also ProjectorMonteCarloProblem, ShiftStrategy, TimeStepStrategy, DoubleLogUpdate, ConstantTimeStep.\n\n\n\n\n\n","category":"type"},{"location":"API.html#Rimu.FciqmcRunStrategy","page":"API","title":"Rimu.FciqmcRunStrategy","text":" FciqmcRunStrategy{T}\n\nAbstract type representing the strategy for running and terminating lomc!(). The type parameter T is relevant for reporting the shift and the norm.\n\nImplemented strategies:\n\nRunTillLastStep\n\nwarning: Warning\nThe use of this strategy is deprecated. Pass the relevant arguments directly to ProjectorMonteCarloProblem or to lomc!() instead.\n\n\n\n\n\n","category":"type"},{"location":"API.html#Rimu.FirstOrderTransitionOperator","page":"API","title":"Rimu.FirstOrderTransitionOperator","text":"FirstOrderTransitionOperator(hamiltonian, shift, time_step) <: AbstractHamiltonian\nFirstOrderTransitionOperator(sp::DefaultShiftParameters, hamiltonian)\n\nFirst order transition operator\n\n𝐓 = 1 + dτ(S - 𝐇)\n\nwhere 𝐇 is the hamiltonian, dτ the time_step and S is the shift.\n\n𝐓 represents the first order expansion of the exponential evolution operator of the imaginary-time Schrödinger equation (Euler step) and repeated application will project out the ground state eigenvector of the hamiltonian.  It is the transition operator used in FCIQMC.\n\n\n\n\n\n","category":"type"},{"location":"API.html#Rimu.GramSchmidt","page":"API","title":"Rimu.GramSchmidt","text":"GramSchmidt(S; orthogonalization_interval = 1) <: SpectralStrategy{S}\n\nUse the Gram-Schmidt procedure to orthogonalize the excited states. A total of S spectral states are used in the simulation, and they are orthogonalized every  orthogonalization_interval steps.\n\nUse with the keyword argument spectral_strategy in ProjectorMonteCarloProblem.\n\n\n\n\n\n","category":"type"},{"location":"API.html#Rimu.LogUpdate","page":"API","title":"Rimu.LogUpdate","text":"LogUpdate(ζ = 0.08) <: ShiftStrategy\n\nStrategy for updating the shift according to the log formula with damping parameter ζ.\n\nS^n+1 = S^n -fracζdτlnleft(fracΨ_1^n+1Ψ_1^nright)\n\nSee ShiftStrategy, ProjectorMonteCarloProblem.\n\n\n\n\n\n","category":"type"},{"location":"API.html#Rimu.LogUpdateAfterTargetWalkers","page":"API","title":"Rimu.LogUpdateAfterTargetWalkers","text":"LogUpdateAfterTargetWalkers(target_walkers = 1_000, ζ = 0.08) <: ShiftStrategy\n\nStrategy for updating the shift: After target_walkers is reached, update the shift according to the log formula with damping parameter ζ.\n\nSee LogUpdate, ShiftStrategy, ProjectorMonteCarloProblem.\n\n\n\n\n\n","category":"type"},{"location":"API.html#Rimu.MultiScalar","page":"API","title":"Rimu.MultiScalar","text":"MultiScalar\n\nWrapper over a tuple that supports +, *, min, and max. Used with MPI communication because SVectors are treated as arrays by MPI.Allreduce and Tuples do not support scalar operations.\n\nExample\n\nSuppose you want to compute the sum of a vector dv and also get the number of positive elements it has in a single pass. You can use MultiScalar:\n\njulia> dv = DVec(:a => 1, :b => -2, :c => 1);\n\njulia> s, p = mapreduce(+, values(dv)) do v\n    Rimu.MultiScalar(v, Int(sign(v) == 1))\nend;\n\njulia> s, p\n(0, 2)\n\nNote that only MultiScalars with the same types can be operated on. This is a feature, as it forces type stability.\n\n\n\n\n\n","category":"type"},{"location":"API.html#Rimu.NoStats","page":"API","title":"Rimu.NoStats","text":"NoStats(N=1) <: ReplicaStrategy{N}\n\nThe default ReplicaStrategy. N replicas are run, but no statistics are collected.\n\nSee also ProjectorMonteCarloProblem.\n\n\n\n\n\n","category":"type"},{"location":"API.html#Rimu.PMCAlgorithm","page":"API","title":"Rimu.PMCAlgorithm","text":"PMCAlgorithm\n\nAbstract type for projector Monte Carlo algorithms.\n\nSee ProjectorMonteCarloProblem, FCIQMC.\n\n\n\n\n\n","category":"type"},{"location":"API.html#Rimu.PMCSimulation","page":"API","title":"Rimu.PMCSimulation","text":"PMCSimulation\n\nHolds the state and the results of a projector quantum Monte Carlo (PMC) simulation. Is returned by init(::ProjectorMonteCarloProblem) and solved with solve!(::PMCSimulation).\n\nObtain the results of a simulation sm as a DataFrame with DataFrame(sm).\n\nFields\n\nproblem::ProjectorMonteCarloProblem: The problem that was solved\nstate::Rimu.ReplicaState: The current state of the simulation\nreport::Rimu.Report: The report of the simulation\nmodified::Bool: Whether the simulation has been modified\naborted::Bool: Whether the simulation has been aborted\nsuccess::Bool: Whether the simulation has been completed successfully\nmessage::String: A message about the simulation status\nelapsed_time::Float64: The time elapsed during the simulation\n\nSee also state_vectors, ProjectorMonteCarloProblem, init, solve!.\n\n\n\n\n\n","category":"type"},{"location":"API.html#Rimu.PostStepStrategy","page":"API","title":"Rimu.PostStepStrategy","text":"PostStepStrategy\n\nSubtypes of PostStepStrategy can be used to perform arbitrary computation on a single state after an FCIQMC step is finished and report the results.\n\nImplemented strategies:\n\nProjectedEnergy\nProjector\nSignCoherence\nWalkerLoneliness\nTimer\n\nNote: A tuple of multiple strategies can be passed to ProjectorMonteCarloProblem. In that case, all reported column names must be distinct.\n\nInterface:\n\nA subtype of this type must implement post_step_action(::PostStepStrategy, ::SingleState, step::Int).\n\n\n\n\n\n","category":"type"},{"location":"API.html#Rimu.ProjectedEnergy","page":"API","title":"Rimu.ProjectedEnergy","text":"ProjectedEnergy(hamiltonian, projector; hproj=:hproj, vproj=:vproj) <: PostStepStrategy\n\nAfter every step, compute hproj = dot(projector, hamiltonian, dv) and vproj = dot(projector, dv), where dv is the instantaneous coefficient vector.  projector can be an AbstractDVec, or an AbstractProjector.\n\nReports to columns hproj and vproj, which can be used to compute projective energy, e.g. with projected_energy. The keyword arguments hproj and vproj can be used to change the names of these columns. This can be used to make the names unique when computing projected energies with different projectors in the same run.\n\nSee also projected_energy, ratio_of_means, mixed_estimator, and PostStepStrategy.\n\n\n\n\n\n","category":"type"},{"location":"API.html#Rimu.Projector","page":"API","title":"Rimu.Projector","text":"Projector(name=projector) <: PostStepStrategy\n\nAfter each step, compute dot(projector, dv) and report it in the DataFrame under name. projector can be an AbstractDVec, or an AbstractProjector.\n\n\n\n\n\n","category":"type"},{"location":"API.html#Rimu.ProjectorMonteCarloProblem","page":"API","title":"Rimu.ProjectorMonteCarloProblem","text":"ProjectorMonteCarloProblem(hamiltonian::AbstractHamiltonian; kwargs...)\n\nDefines a problem to be solved by projector quantum Monte Carlo (QMC) methods, such as the the FCIQMC algorithm.\n\nCommon keyword arguments and defaults:\n\ntime_step = 0.01: Initial time step size.\nlast_step = 100: Controls the number of steps.\ntarget_walkers = 1_000: Target for the 1-norm of the coefficient vector.\nstart_at = starting_address(hamiltonian): Define the initial state vector(s).   An r  s matrix of state vectors can be passed where r is the   number of replicas and s the number of spectral states. See also   default_starting_vector.\nstyle = IsDynamicSemistochastic(): The StochasticStyle of the simulation.\ninitiator = false: Whether to use initiators. Can be true, false, or a valid   InitiatorRule.\nthreading: Default is to use multithreading and/or MPI if available. Set to true to force PDVec for the starting vector, false for serial computation; may be overridden by start_at.\nreporting_strategy = ReportDFAndInfo(): How and when to report results, see ReportingStrategy.\npost_step_strategy = (): Extract observables (e.g. ProjectedEnergy), see PostStepStrategy.\nn_replicas = 1: Number of synchronised independent simulations.\nreplica_strategy = NoStats(n_replicas): Which results to report from replica simulations, see ReplicaStrategy.\nn_spectral = 1: Number of targeted spectral states. Set n_spectral > 1 to find excited states.\nspectral_strategy = GramSchmidt(n_spectral): The SpectralStrategy used for orthogonalizing spectral states.\n\nExample\n\njulia> hamiltonian = HubbardReal1D(BoseFS(1,2,3));\n\njulia> problem = ProjectorMonteCarloProblem(hamiltonian; target_walkers = 500, last_step = 100);\n\njulia> simulation = solve(problem);\n\njulia> simulation.success[]\ntrue\n\njulia> size(DataFrame(simulation))\n(100, 9)\n\nFurther keyword arguments:\n\nstarting_step = 1: Starting step of the simulation.\nwall_time = Inf: Maximum time allowed for the simulation.\nsimulation_plan = SimulationPlan(; starting_step, last_step, wall_time): Defines the   duration of the simulation. Takes precedence over last_step and wall_time.\nζ = 0.08: Damping parameter for the shift update.\nξ = ζ^2/4: Forcing parameter for the shift update.\nshift_strategy = DoubleLogUpdate(; target_walkers, ζ, ξ): How to update the shift,   see ShiftStrategy.\ntime_step_strategy = ConstantTimeStep(): Adjust time step or not, see   TimeStepStrategy.\nalgorithm = FCIQMC(; shift_strategy, time_step_strategy): The algorithm to use.   Currenlty only FCIQMC is implemented.\nshift: Initial shift value or collection of shift values. Determined by default from the   Hamiltonian and the starting vectors.\ninitial_shift_parameters: Initial shift parameters or collection of initial shift   parameters. Overrides shift if provided.\nmax_length = 2 * target_walkers + 100: Maximum length of the vectors.\ndisplay_name = \"PMCSimulation\": Name displayed in progress bar (via ProgressLogging).\nmetadata: User-supplied metadata to be added to the report. Must be an iterable of pairs or a NamedTuple, e.g. metadata = (\"key1\" => \"value1\", \"key2\" => \"value2\"). All metadata is converted to strings.\nrandom_seed = true: Provide and store a seed for the random number generator. If set to   true, a new random seed is generated from RandomDevice(). If set to number, this   number is used as the seed. This seed is used by solve (and init) to re-seed the   default random number generator (consistently on each MPI rank) such that   solveing the same ProjectorMonteCarloProblem twice will yield identical results. If   set to false, no seed is used and consecutive random numbers are used.\nminimum_size = 2*num_spectral_states(spectral_strategy): The minimum size of the basis   used to construct starting vectors for simulations of spectral states, if start_at   is not provided.\n\nSee also init, solve.\n\n\n\n\n\n","category":"type"},{"location":"API.html#Rimu.ReplicaState","page":"API","title":"Rimu.ReplicaState","text":"ReplicaState <: AbstractMatrix{SingleState}\n\nHolds information about multiple replicas of SpectralStates. Indexing the ReplicaState state[i, j] returns a SingleState from the ith replica and jth spectral state.\n\nFields\n\nspectral_states: Tuple of SpectralStates\nmax_length::Ref{Int}: Maximum length of the simulation\nstep::Ref{Int}: Current step of the simulation\nsimulation_plan: Simulation plan\nreporting_strategy: Reporting strategy\npost_step_strategy: Post-step strategy\nreplica_strategy: Replica strategy\n\nSee also ReplicaStrategy, Rimu.SpectralState, Rimu.SingleState, Rimu.PMCSimulation.\n\n\n\n\n\n","category":"type"},{"location":"API.html#Rimu.ReplicaStrategy","page":"API","title":"Rimu.ReplicaStrategy","text":"ReplicaStrategy{N}\n\nSupertype for strategies that can be passed to ProjectorMonteCarloProblem and control how many replicas are used, and what information is computed and returned. The number of replicas is N.\n\nConcrete implementations\n\nNoStats: run (possibly one) replica(s), but don't report any additional info.\nAllOverlaps: report overlaps between all pairs of replica vectors.\n\nInterface\n\nA subtype of ReplicaStrategy{N} must implement the following function:\n\nRimu.replica_stats - return a tuple of Strings or Symbols of names for replica statistics and a tuple of the values. These will be reported to the DataFrame returned by ProjectorMonteCarloProblem.\n\n\n\n\n\n","category":"type"},{"location":"API.html#Rimu.Report","page":"API","title":"Rimu.Report","text":"Report()\nReport(df::DataFrame)\n\nInternal structure that holds the temporary reported values as well as metadata. It can be converted to a DataFrame with DataFrame(report::Report).\n\nSee report!, report_metadata!, get_metadata.\n\n\n\n\n\n","category":"type"},{"location":"API.html#Rimu.ReportDFAndInfo","page":"API","title":"Rimu.ReportDFAndInfo","text":"ReportDFAndInfo(; reporting_interval=1, info_interval=100, io=stdout, writeinfo=false) <: ReportingStrategy\n\nThe default ReportingStrategy for ProjectorMonteCarloProblem. Report every reporting_intervalth step to a DataFrame and write info message to io every info_intervalth reported step (unless writeinfo == false). The flag writeinfo is useful for controlling info messages in MPI codes, e.g. by setting writeinfo =is_mpi_root().\n\nSee also ProjectorMonteCarloProblem, ReportToFile.\n\n\n\n\n\n","category":"type"},{"location":"API.html#Rimu.ReportToFile","page":"API","title":"Rimu.ReportToFile","text":"ReportToFile(; kwargs...) <: ReportingStrategy\n\nReportingStrategy for ProjectorMonteCarloProblem that writes the report directly to a file in the Arrow format. Useful when dealing with long jobs or large numbers of replicas, when the report can incur a significant memory cost.\n\nThe arrow file can be read back in with load_df(filename) or using Arrow; Arrow.Table(filename).\n\nKeyword arguments\n\nfilename = \"out.arrow\": the file to report to. If the file already exists, a new file is created.\nreporting_interval = 1: interval between simulation steps that are reported.\nchunk_size = 1000: the size of each chunk that is written to the file. A DataFrame of this size is collected in memory and written to disk. When saving, an info message is also printed to io.\nsave_if =is_mpi_root(): if this value is true, save the report, otherwise ignore it.\nreturn_df = false: if this value is true, read the file and return the data frame at the end of computation. Otherwise, an empty DataFrame is returned.\nio = stdout: The IO to print messages to. Set to devnull if you don't want to see messages printed out.\ncompress = :zstd: compression algorithm to use. Can be :zstd, :lz4 or nothing.\n\nSee also load_df, save_df, ReportDFAndInfo, and ProjectorMonteCarloProblem.\n\n\n\n\n\n","category":"type"},{"location":"API.html#Rimu.ReportingStrategy","page":"API","title":"Rimu.ReportingStrategy","text":"ReportingStrategy\n\nAbstract type for strategies for reporting data during a simulation of a ProjectorMonteCarloProblem.\n\nImplemented strategies:\n\nReportDFAndInfo\nReportToFile\n\nExtended help\n\nInterface:\n\nA ReportingStrategy can define any of the following:\n\nRimu.refine_reporting_strategy\nRimu.report!\nRimu.report_after_step!\nRimu.finalize_report!\nRimu.reporting_interval\n\n\n\n\n\n","category":"type"},{"location":"API.html#Rimu.RunTillLastStep","page":"API","title":"Rimu.RunTillLastStep","text":"RunTillLastStep(step::Int = 0 # number of current/starting timestep\n             laststep::Int = 100 # number of final timestep\n             shiftMode::Bool = false # whether to adjust shift\n             shift = 0.0 # starting/current value of shift\n             dτ::Float64 = 0.01 # current value of time step\n) <: FciqmcRunStrategy\n\nParameters for running lomc!() for a fixed number of time steps. For alternative strategies, see FciqmcRunStrategy.\n\nwarning: Warning\nThe use of this strategy is deprecated. Pass the relevant arguments directly to ProjectorMonteCarloProblem or to lomc!() instead.\n\n\n\n\n\n","category":"type"},{"location":"API.html#Rimu.ShiftStrategy","page":"API","title":"Rimu.ShiftStrategy","text":"ShiftStrategy\n\nAbstract type for defining the strategy for controlling the norm, potentially by updating the shift. Passed as a parameter to ProjectorMonteCarloProblem or to FCIQMC.\n\nImplemented strategies:\n\nDontUpdate\nDoubleLogUpdate - default in ProjectorMonteCarloProblem()\nLogUpdate\nLogUpdateAfterTargetWalkers - FCIQMC standard\nDoubleLogUpdateAfterTargetWalkers\n\nExtended help\n\nInternally To implement a custom strategy, define a new subtype of Rimu.ShiftStrategy and implement methods for:\n\nRimu.update_shift_parameters! - to update the shift_parameters\nRimu.initialise_shift_parameters - (optional) to initialise and construct a   custom implementation of the shift_parameters. The default implementation is   Rimu.DefaultShiftParameters.\n\n\n\n\n\n","category":"type"},{"location":"API.html#Rimu.SignCoherence","page":"API","title":"Rimu.SignCoherence","text":"SignCoherence(reference[; name=:coherence]) <: PostStepStrategy\n\nAfter each step, compute the proportion of configurations that have the same sign as they do in the reference_dvec. Reports to a column named name, which defaults to coherence.\n\n\n\n\n\n","category":"type"},{"location":"API.html#Rimu.SimulationPlan","page":"API","title":"Rimu.SimulationPlan","text":"SimulationPlan(; starting_step = 1, last_step = 100, wall_time = Inf)\n\nDefines the duration of the simulation. The simulation ends when the last_step is reached or the wall_time is exceeded.\n\nSee ProjectorMonteCarloProblem, PMCSimulation.\n\n\n\n\n\n","category":"type"},{"location":"API.html#Rimu.SingleParticleDensity","page":"API","title":"Rimu.SingleParticleDensity","text":"SingleParticleDensity(; save_every=1, component) <: PostStepStrategy\n\nPostStepStrategy  to  compute the diagonal single_particle_density. It records a Tuple with the same eltype as the vector.\n\nComputing the density at every time step can be expensive. This cost can be reduced by setting the save_every argument to a higher value. If the value is set, a vector of zeros is recorded when the saving is skipped.\n\nIf the address type has multiple components, the component argument can be used to compute the density on a per-component basis.\n\nThe density is not normalized, and must be divided by the vector norm(⋅,2) squared.\n\nSee also\n\nsingle_particle_density\nDensityMatrixDiagonal\n\n\n\n\n\n","category":"type"},{"location":"API.html#Rimu.SingleState","page":"API","title":"Rimu.SingleState","text":"SingleState(hamiltonian, algorithm, v, wm, pnorm, params, id)\n\nStruct that holds a single state vector and all information needed for an independent run of the algorithm. Can be advanced a step forward with Rimu.advance!.\n\nFields\n\nhamiltonian: Hamiltonian\nalgorithm: Algorithm\nv: Vector\npv: Previous vector\nwm: Working memory\nshift_parameters: Shift parameters\nid::String: id is appended to column names\n\nSee also SpectralStrategy, ReplicaStrategy, Rimu.SpectralState, Rimu.ReplicaState, Rimu.replica_stats, Rimu.PMCSimulation.\n\n\n\n\n\n","category":"type"},{"location":"API.html#Rimu.SpectralState","page":"API","title":"Rimu.SpectralState","text":"SpectralState <: AbstractVector{SingleState}\n\nHolds one or several Rimu.SingleStates representing the ground state and excited states of a single replica. Indexing the SpectralState state[i] returns the ith SingleState.\n\nFields\n\nsingle_states: Tuple of SingleStates\nspectral_strategy: Strategy for computing the spectral states\nid::String: Identifies the replica\n\nSee also SpectralStrategy, Rimu.ReplicaState, Rimu.SingleState, Rimu.PMCSimulation.\n\n\n\n\n\n","category":"type"},{"location":"API.html#Rimu.SpectralStrategy","page":"API","title":"Rimu.SpectralStrategy","text":"SpectralStrategy{S}\n\nAbstract type for spectral strategies. The spectral strategy is used to control the number of spectral states used in the simulation.\n\nImplemented Strategies\n\nGramSchmidt: Orthogonalize the spectral states using the Gram-Schmidt procedure.\n\n\n\n\n\n","category":"type"},{"location":"API.html#Rimu.StateVectors","page":"API","title":"Rimu.StateVectors","text":"StateVectors <: AbstractMatrix{V}\n\nRepresents a matrix of configuration vectors from the state. Construct this object with state_vectors.\n\n\n\n\n\n","category":"type"},{"location":"API.html#Rimu.TimeStepStrategy","page":"API","title":"Rimu.TimeStepStrategy","text":"TimeStepStrategy\n\nAbstract type for strategies for updating the time step with update_time_step(). Implemented strategies:\n\nConstantTimeStep\n\n\n\n\n\n","category":"type"},{"location":"API.html#Rimu.Timer","page":"API","title":"Rimu.Timer","text":"Timer <: PostStepStrategy\n\nRecord current time after every step. See Base.Libc.time for information on what time is recorded.\n\n\n\n\n\n","category":"type"},{"location":"API.html#Rimu.WalkerLoneliness","page":"API","title":"Rimu.WalkerLoneliness","text":"WalkerLoneliness(threshold=1) <: PostStepStrategy\n\nAfter each step, compute the proportion of configurations that are occupied by at most threshold walkers. Reports to a column named loneliness.\n\n\n\n\n\n","category":"type"},{"location":"API.html#CommonSolve.init-Tuple{ProjectorMonteCarloProblem}","page":"API","title":"CommonSolve.init","text":"init(problem::ProjectorMonteCarloProblem; copy_vectors=true)::PMCSimulation\n\nInitialise a Rimu.PMCSimulation.\n\nSee also ProjectorMonteCarloProblem, solve!, solve, step!, Rimu.PMCSimulation.\n\n\n\n\n\n","category":"method"},{"location":"API.html#CommonSolve.solve","page":"API","title":"CommonSolve.solve","text":"solve(::ProjectorMonteCarloProblem)::PMCSimulation\n\nInitialize and solve a ProjectorMonteCarloProblem until the last step is completed or the wall time limit is reached.\n\nSee also init, solve!, step!, Rimu.PMCSimulation, and solve(::ExactDiagonalizationProblem).\n\n\n\n\n\n","category":"function"},{"location":"API.html#CommonSolve.solve!-Tuple{Rimu.PMCSimulation}","page":"API","title":"CommonSolve.solve!","text":"solve!(sm::PMCSimulation; kwargs...)::PMCSimulation\n\nSolve a Rimu.PMCSimulation until the last step is completed or the wall time limit is reached.\n\nTo continue a previously completed simulation, set a new last_step or wall_time using the keyword arguments. Optionally, changes can be made to the replica_strategy, the post_step_strategy, or the reporting_strategy.\n\nOptional keyword arguments:\n\nlast_step = nothing: Set the last step to a new value and continue the simulation.\nwall_time = nothing: Set the allowed wall time to a new value and continue the   simulation.\nreset_time = false: Reset the elapsed_time counter and continue the simulation.\nempty_report = false: Empty the report before continuing the simulation.\nreplica_strategy = nothing: Change the replica strategy. Requires the number of replicas   to match the number of replicas in the simulation sm. Implies empty_report = true.\npost_step_strategy = nothing: Change the post-step strategy. Implies   empty_report = true.\nreporting_strategy = nothing: Change the reporting strategy. Implies   empty_report = true.\nmetadata = nothing: Add metadata to the report.\n\nSee also ProjectorMonteCarloProblem, init, solve, step!, Rimu.PMCSimulation.\n\n\n\n\n\n","category":"method"},{"location":"API.html#CommonSolve.step!-Tuple{Rimu.PMCSimulation}","page":"API","title":"CommonSolve.step!","text":"step!(sm::PMCSimulation)::PMCSimulation\n\nAdvance the simulation by one step.\n\nCalling solve! will advance the simulation until the last step or the wall time is exceeded. When completing the simulation without calling solve!, the simulation report needs to be finalised by calling Rimu.finalize_report!.\n\nSee also ProjectorMonteCarloProblem, init, solve!, solve, Rimu.PMCSimulation.\n\n\n\n\n\n","category":"method"},{"location":"API.html#Rimu.advance!-Tuple{FCIQMC, Any, Rimu.ReplicaState, Rimu.SingleState}","page":"API","title":"Rimu.advance!","text":"advance!(algorithm::PMCAlgorithm, report::Report, state::ReplicaState, s_state::SingleState)\n\nAdvance the s_state by one step according to the algorithm. The state is used only to access the various strategies involved. Steps, stats, and computed quantities are written to the report.\n\nReturns true if the step was successful and calculation should proceed, false when it should terminate.\n\nSee also solve!, step!.\n\n\n\n\n\n","category":"method"},{"location":"API.html#Rimu.all_overlaps-Union{Tuple{B}, Tuple{N}, Tuple{Union{Tuple, Vector}, NTuple{N, AbstractDVec}, Any, Val{B}}} where {N, B}","page":"API","title":"Rimu.all_overlaps","text":"all_overlaps(operators, vectors, working_memories, vecnorm=true)\n\nGet all overlaps between vectors and operators.  The flag vecnorm can disable the vector-vector overlap c{i}_dot_c{j}.\n\n\n\n\n\n","category":"method"},{"location":"API.html#Rimu.check_transform-Tuple{AllOverlaps, AbstractHamiltonian}","page":"API","title":"Rimu.check_transform","text":"check_transform(r::AllOverlaps, ham)\n\nCheck that the transformation provided to r::AllOverlaps matches the given Hamiltonian ham. Used as a sanity check before starting main ProjectorMonteCarloProblem loop.\n\n\n\n\n\n","category":"method"},{"location":"API.html#Rimu.clean_and_warn_if_others_present-Union{Tuple{names}, Tuple{NamedTuple{names}, Any}} where names","page":"API","title":"Rimu.clean_and_warn_if_others_present","text":"clean_and_warn_if_others_present(nt::NamedTuple{names}, keys) where {names}\n\nRemove keys from a NamedTuple that are not in keys and issue a warning if they are present.\n\n\n\n\n\n","category":"method"},{"location":"API.html#Rimu.default_logger-Tuple","page":"API","title":"Rimu.default_logger","text":"default_logger(args...)\n\nReset the global_logger to Logging.ConsoleLogger. Undoes the effect of smart_logger. Arguments are passed on to Logging.ConsoleLogger.\n\n\n\n\n\n","category":"method"},{"location":"API.html#Rimu.default_starting_vector-Tuple{AbstractHamiltonian}","page":"API","title":"Rimu.default_starting_vector","text":"default_starting_vector(hamiltonian::AbstractHamiltonian; kwargs...)\ndefault_starting_vector(\n    address=starting_address(hamiltonian);\n    style=IsDynamicSemistochastic(),\n    initiator=NonInitiator(),\n    threading=nothing,\n    population=10\n)\n\nReturn a default starting vector for ProjectorMonteCarloProblem. The default choice for the starting vector is\n\nv = PDVec(address => population; style, initiator)\n\nif threading is available, or otherwise\n\nv = DVec(address => population; style)\n\nif initiator == NonInitiator(), and\n\nv = InitiatorDVec(address => population; style, initiator)\n\nif not. See PDVec, DVec, InitiatorDVec, StochasticStyle, and InitiatorRule.\n\n\n\n\n\n","category":"method"},{"location":"API.html#Rimu.delete_and_warn_if_present-Union{Tuple{names}, Tuple{NamedTuple{names}, Any}} where names","page":"API","title":"Rimu.delete_and_warn_if_present","text":"delete_and_warn_if_present(nt::NamedTuple, keys)\n\nDelete keys from a NamedTuple and issue a warning if they are present. This is useful for removing unused keyword arguments.\n\n\n\n\n\n","category":"method"},{"location":"API.html#Rimu.finalize_report!-Tuple{ReportingStrategy, Any}","page":"API","title":"Rimu.finalize_report!","text":"finalize_report!(::ReportingStrategy, report)\n\nFinalize the report. This function is called after all steps in solve! have finished.\n\n\n\n\n\n","category":"method"},{"location":"API.html#Rimu.get_metadata-Tuple{Rimu.Report, Any}","page":"API","title":"Rimu.get_metadata","text":"get_metadata(report::Report, key)\n\nGet metadata key from report. key is converted to a String.\n\nSee also report_metadata!, Report, report!.\n\n\n\n\n\n","category":"method"},{"location":"API.html#Rimu.initialise_shift_parameters","page":"API","title":"Rimu.initialise_shift_parameters","text":"initialise_shift_parameters(s::ShiftStrategy, shift, norm, time_step, counter=0, shift_mode=false)\n\nInitiatlise a struct to store the shift parameters.\n\nSee ShiftStrategy, update_shift_parameters!, DefaultShiftParameters.\n\n\n\n\n\n","category":"function"},{"location":"API.html#Rimu.is_mpi_root","page":"API","title":"Rimu.is_mpi_root","text":"is_mpi_root(root = mpi_root)\n\nReturns true if called from the root rank\n\n\n\n\n\n","category":"function"},{"location":"API.html#Rimu.lomc!-Tuple{Any, Any}","page":"API","title":"Rimu.lomc!","text":"lomc!(ham::AbstractHamiltonian, [v]; kwargs...) -> df, state\nlomc!(state::ReplicaState, [df]; kwargs...) -> df, state\n\nLinear operator Monte Carlo: Perform a projector quantum Monte Carlo simulation for determining the lowest eigenvalue of ham. The details of the simulation are controlled by the optional keyword arguments and by the type of the optional starting vector v. Alternatively, a ReplicaState can be passed in to continue a previous simulation.\n\nCommon keyword arguments and defaults:\n\nlaststep = 100 - controls the number of steps.\ndτ = 0.01 - time step.\ntargetwalkers = 1000 - target for the 1-norm of the coefficient vector.\naddress = starting_address(ham) - set starting address for default v and shift.\nstyle = IsStochasticInteger() - set StochasticStyle for default v; unused if v is specified.\ninitiator = NonInitiator() - set InitiatorRule for default v; unused if v is specified.\nthreading - default is to use multithreading and MPI if multiple threads are available. Set to true to force PDVec for the starting vector, false for serial computation; unused if v is specified.\nshift = diagonal_element(ham, address) - initial value of shift.\npost_step_strategy::NTuple{N,<:PostStepStrategy} = () - extract observables (e.g. ProjectedEnergy), see PostStepStrategy. (Deprecated: post_step is accepted as an alias for post_step_strategy.)\nreplica_strategy::ReplicaStrategy = NoStats(1) - run several synchronised simulations, see ReplicaStrategy. (Deprecated: replica is accepted as an alias for replica_strategy.)\nreporting_strategy::ReportingStrategy = ReportDFAndInfo() - how and when to report results, see ReportingStrategy. (Deprecated: r_strat is accepted as an alias for reporting_strategy.)\nname = \"lomc!\" - name displayed in progress bar (via ProgressLogging)\nmetadata - user-supplied metadata to be added to the report df. Must be an iterable of pairs or a NamedTuple, e.g. metadata = (\"key1\" => \"value1\", \"key2\" => \"value2\"). All metadata is converted to strings.\n\nSome metadata is automatically added to the report df including Rimu.PACKAGE_VERSION and data from state.\n\nReturn values\n\nlomc! returns a named tuple with the following fields:\n\ndf: a DataFrame with all statistics being reported.\nstate: a ReplicaState that can be used for continuations.\n\nExample\n\njulia> address = BoseFS(1,2,3);\n\njulia> hamiltonian = HubbardReal1D(address);\n\njulia> df1, state = @suppress lomc!(hamiltonian; targetwalkers=500, laststep=100);\n\njulia> df2, _ = @suppress lomc!(state, df1; laststep=200, metadata=(;info=\"cont\")); # Continuation run\n\njulia> size(df1)\n(100, 9)\n\njulia> size(df2)\n(200, 9)\n\njulia> using DataFrames; metadata(df2, \"info\") # retrieve custom metadata\n\"cont\"\n\njulia> metadata(df2, \"hamiltonian\") # some metadata is automatically added\n\"HubbardReal1D(fs\\\"|1 2 3⟩\\\"; u=1.0, t=1.0)\"\n\nFurther keyword arguments and defaults:\n\nτ_strat::TimeStepStrategy = ConstantTimeStep() - adjust time step or not, see TimeStepStrategy\ns_strat::ShiftStrategy = DoubleLogUpdate(; target_walkers=targetwalkers, ζ = 0.08, ξ = ζ^2/4) - how to update the shift, see ShiftStrategy.\nmaxlength = 2 * s_strat.target_walkers + 100 - upper limit on the length of v; when reached, lomc! will abort\nwm - working memory for re-use in subsequent calculations; is mutated.\ndf = DataFrame() - when called with AbstractHamiltonian argument, a DataFrame can be passed for merging with the report df.\n\nThe default choice for the starting vector is v = default_starting_vector(; address, style, threading, initiator). See default_starting_vector, PDVec, DVec, StochasticStyle, and InitiatorRule.\n\nwarning: Warning\nThe use of this lomc! is deprecated. Use ProjectorMonteCarloProblem and solve instead.\n\n\n\n\n\n","category":"method"},{"location":"API.html#Rimu.mpi_allprintln-Tuple","page":"API","title":"Rimu.mpi_allprintln","text":"mpi_allprintln(args...)\n\nPrint a message to stdout from each rank separately, in order. MPI synchronizing.\n\n\n\n\n\n","category":"method"},{"location":"API.html#Rimu.mpi_barrier","page":"API","title":"Rimu.mpi_barrier","text":"mpi_barrier(comm = mpi_comm())\n\nThe MPI barrier with optional argument. MPI syncronizing.\n\n\n\n\n\n","category":"function"},{"location":"API.html#Rimu.mpi_rank","page":"API","title":"Rimu.mpi_rank","text":"mpi_rank(comm = mpi_comm())\n\nReturn the current MPI rank.\n\n\n\n\n\n","category":"function"},{"location":"API.html#Rimu.mpi_seed!","page":"API","title":"Rimu.mpi_seed!","text":"mpi_seed!(seed = rand(Random.RandomDevice(), UInt))\n\nRe-seed the random number generators in an MPI-safe way. If seed is provided, the random numbers from rand will follow a deterministic sequence.\n\nIndependence of the random number generators on different MPI ranks is achieved by adding hash(mpi_rank()) to seed.\n\n\n\n\n\n","category":"function"},{"location":"API.html#Rimu.mpi_size","page":"API","title":"Rimu.mpi_size","text":"mpi_size(comm = mpi_comm())\n\nSize of MPI communicator.\n\n\n\n\n\n","category":"function"},{"location":"API.html#Rimu.num_replicas-Union{Tuple{ReplicaStrategy{N}}, Tuple{N}} where N","page":"API","title":"Rimu.num_replicas","text":"num_replicas(state_or_strategy)\n\nReturn the number of replicas used in the simulation.\n\n\n\n\n\n","category":"method"},{"location":"API.html#Rimu.num_spectral_states-Union{Tuple{Rimu.SpectralStrategy{S}}, Tuple{S}} where S","page":"API","title":"Rimu.num_spectral_states","text":"num_spectral_states(state_or_strategy)\n\nReturn the number of spectral states used in the simulation.\n\n\n\n\n\n","category":"method"},{"location":"API.html#Rimu.post_step_action","page":"API","title":"Rimu.post_step_action","text":"post_step_action(::PostStepStrategy, ::SingleState, step) -> kvpairs\n\nCompute statistics after FCIQMC step. Should return a tuple of :key => value pairs. This function is only called every reporting_interval steps, as defined by the ReportingStrategy.\n\nSee also PostStepStrategy, ReportingStrategy.\n\n\n\n\n\n","category":"function"},{"location":"API.html#Rimu.refine_reporting_strategy-Tuple{ReportingStrategy}","page":"API","title":"Rimu.refine_reporting_strategy","text":"refine_reporting_strategy(reporting_strategy::ReportingStrategy) -> reporting_strategy\n\nInitialize the reporting strategy. This can be used to set up filenames or other attributes that need to be unique for a run of FCIQMC.\n\n\n\n\n\n","category":"method"},{"location":"API.html#Rimu.replace_keys-Tuple{NamedTuple, Any}","page":"API","title":"Rimu.replace_keys","text":"replace_keys(nt::NamedTuple, (:old1 => :new1, :old2 => :new2, ...))\n\nReplace keys in a NamedTuple with new keys. This is useful for renaming fields in a NamedTuple. Ignores keys that are not present in the NamedTuple.\n\n\n\n\n\n","category":"method"},{"location":"API.html#Rimu.replica_stats","page":"API","title":"Rimu.replica_stats","text":"replica_stats(RS::ReplicaStrategy{N}, spectral_states::NTuple{N,SingleState}) -> (names, values)\n\nReturn the names and values of statistics related to N replica states consistent with the ReplicaStrategy RS. names should be a tuple of Symbols or Strings and values should be a tuple of the same length. This function will be called every reporting_interval steps from ProjectorMonteCarloProblem, or once per time step if reporting_interval is not defined.\n\nPart of the ReplicaStrategy interface. See also SingleState.\n\n\n\n\n\n","category":"function"},{"location":"API.html#Rimu.report!-Tuple{ReportingStrategy, Any, Vararg{Any}}","page":"API","title":"Rimu.report!","text":" report!(::ReportingStrategy, step, report::Report, keys, values, id=\"\")\n report!(::ReportingStrategy, step, report::Report, nt, id=\"\")\n\nReport keys and values to report, which will be converted to a DataFrame before ProjectorMonteCarloProblem exits. Alternatively, a nt::NamedTuple can be passed in place of keys and values. If id is specified, it is appended to all keys. This is used to differentiate between values reported by different replicas.\n\nTo overload this function for a new ReportingStrategy, overload report!(::ReportingStrategy, step, args...) and apply the report by calling report!(args...).\n\n\n\n\n\n","category":"method"},{"location":"API.html#Rimu.report!-Tuple{Rimu.Report, DataFrame}","page":"API","title":"Rimu.report!","text":"report!(report::Report, df::DataFrame)\n\nConvert the DataFrame df to a Report. This function does not copy the data.\n\n\n\n\n\n","category":"method"},{"location":"API.html#Rimu.report!-Tuple{Rimu.Report, Union{AbstractString, Symbol}, Any}","page":"API","title":"Rimu.report!","text":"report!(report, keys, values, id=\"\")\nreport!(report, pairs, id=\"\")\n\nWrite keys, values pairs to report that will be converted to a DataFrame later. Alternatively, a named tuple or a collection of pairs can be passed instead of keys and values.\n\nThe value of id is appended to the name of the column, e.g. report!(report, :key, value, :_1) will report value to a column named :key_1.\n\n\n\n\n\n","category":"method"},{"location":"API.html#Rimu.report_after_step!-Tuple{ReportingStrategy, Any, Any, Vararg{Any}}","page":"API","title":"Rimu.report_after_step!","text":"report_after_step!(::ReportingStrategy, step, report, state) -> report\n\nThis function is called at the very end of a step, after Rimu.reporting_interval steps. It may modify the report.\n\n\n\n\n\n","category":"method"},{"location":"API.html#Rimu.report_metadata!-Tuple{Rimu.Report, Any, Any}","page":"API","title":"Rimu.report_metadata!","text":"report_metadata!(report::Report, key, value)\nreport_metadata!(report::Report, kvpairs)\n\nSet metadata key to value in report. key and value are converted to Strings. Alternatively, an iterable of key-value pairs or a NamedTuple can be passed.\n\nSee also get_metadata, report!, Report.\n\n\n\n\n\n","category":"method"},{"location":"API.html#Rimu.reporting_interval-Tuple{ReportingStrategy}","page":"API","title":"Rimu.reporting_interval","text":"reporting_interval(::ReportingStrategy)\n\nGet the interval between steps for which non-essential statistics are reported. Defaults to 1 if chosen ReportingStrategy does not specify an interval.\n\n\n\n\n\n","category":"method"},{"location":"API.html#Rimu.set_up_initial_shift_parameters-Union{Tuple{S}, Tuple{R}, Tuple{FCIQMC, Any, StaticArraysCore.SMatrix{R, S}, Any, Any}} where {R, S}","page":"API","title":"Rimu.set_up_initial_shift_parameters","text":"set_up_initial_shift_parameters(\n    algorithm::FCIQMC, hamiltonian, starting_vectors, shift, time_step, initial_shift_parameters\n)\n\nSet up the initial shift parameters for the FCIQMC algorithm.\n\n\n\n\n\n","category":"method"},{"location":"API.html#Rimu.single_particle_density-Tuple{Any}","page":"API","title":"Rimu.single_particle_density","text":"single_particle_density(dvec; component)\nsingle_particle_density(add; component)\n\nCompute the diagonal single particle density of vector dvec or address add. If the component argument is given, only that component of the addresses is taken into account. The result is always normalized so that sum(result) ≈ num_particles(address).\n\nExamples\n\njulia> v = DVec(fs\"|⋅↑⇅↓⋅⟩\" => 1.0, fs\"|↓↓⋅↑↑⟩\" => 0.5)\nDVec{FermiFS2C{2, 2, 5, 4, FermiFS{2, 5, BitString{5, 1, UInt8}}, FermiFS{2, 5, BitString{5, 1, UInt8}}},Float64} with 2 entries, style = IsDeterministic{Float64}()\n  fs\"|↓↓⋅↑↑⟩\" => 0.5\n  fs\"|⋅↑⇅↓⋅⟩\" => 1.0\n\njulia> single_particle_density(v)\n(0.2, 1.0, 1.6, 1.0, 0.2)\n\njulia> single_particle_density(v; component=1)\n(0.0, 0.8, 0.8, 0.2, 0.2)\n\nSee also\n\nSingleParticleDensity\n\n\n\n\n\n","category":"method"},{"location":"API.html#Rimu.smart_logger-Tuple","page":"API","title":"Rimu.smart_logger","text":"smart_logger(args...)\n\nEnable terminal progress bar during interactive use (i.e. unless running on CI or HPC). Arguments are passed on to the logger. This is run once during Rimu startup. Undo with default_logger or by setting Base.global_logger().\n\n\n\n\n\n","category":"method"},{"location":"API.html#Rimu.state_vectors-Tuple{R} where R<:Rimu.ReplicaState","page":"API","title":"Rimu.state_vectors","text":"state_vectors(state::ReplicaState)\nstate_vectors(sim::PMCSimulation)\n\nReturn an r×s AbstractMatrix of configuration vectors from the state, or the result of solve(::ProjectorMonteCarloProblem). The vectors can be accessed by indexing the resulting collection, where the row index corresponds to the replica index and the column index corresponds to the spectral state index.\n\nSee also ProjectorMonteCarloProblem, Rimu.PMCSimulation, Rimu.SingleState, Rimu.ReplicaState, Rimu.SpectralState.\n\n\n\n\n\n","category":"method"},{"location":"API.html#Rimu.update_shift_parameters!","page":"API","title":"Rimu.update_shift_parameters!","text":"update_shift_parameters!(\n    s <: ShiftStrategy,\n    shift_parameters,\n    tnorm,\n    v_new,\n    v_old,\n    step,\n    report\n) -> shift_stats, proceed\n\nUpdate the shift_parameters according to strategy s. See ShiftStrategy. Returns a named tuple of the shift statistics and a boolean proceed indicating whether the simulation should proceed.\n\nSee initialise_shift_parameters, ShiftStrategy.\n\n\n\n\n\n","category":"function"},{"location":"API.html#Rimu.update_time_step-Tuple{ConstantTimeStep, Any, Vararg{Any}}","page":"API","title":"Rimu.update_time_step","text":"update_time_step(s<:TimeStepStrategy, time_step, tnorm) -> new_time_step\n\nUpdate the time step according to the strategy s.\n\n\n\n\n\n","category":"method"},{"location":"API.html#Rimu.@mpi_root-Tuple","page":"API","title":"Rimu.@mpi_root","text":"@mpi_root expr\n\nEvaluate expression only on the root rank. Extra care needs to be taken as expr must not contain any code that involves syncronising MPI operations, i.e. actions that would require syncronous action of all MPI ranks.\n\nExample:\n\nwn = walkernumber(dv)   # an MPI syncronising function call that gathers\n                        # information from all MPI ranks\n@mpi_root @info \"The current walker number is\" wn # print info message on root only\n\n\n\n\n\n","category":"macro"},{"location":"API.html#Reexported-Submodules","page":"API","title":"Reexported Submodules","text":"","category":"section"},{"location":"API.html#ExactDiagonalization","page":"API","title":"ExactDiagonalization","text":"","category":"section"},{"location":"API.html","page":"API","title":"API","text":"See Exact Diagonalization","category":"page"},{"location":"API.html#Interfaces","page":"API","title":"Interfaces","text":"","category":"section"},{"location":"API.html","page":"API","title":"API","text":"See Module Interfaces","category":"page"},{"location":"API.html#StochasticStyles","page":"API","title":"StochasticStyles","text":"","category":"section"},{"location":"API.html","page":"API","title":"API","text":"See Module StochasticStyles","category":"page"},{"location":"API.html#Hamiltonians","page":"API","title":"Hamiltonians","text":"","category":"section"},{"location":"API.html","page":"API","title":"API","text":"See Module Hamiltonians","category":"page"},{"location":"API.html#BitStringAddresses","page":"API","title":"BitStringAddresses","text":"","category":"section"},{"location":"API.html","page":"API","title":"API","text":"See Module BitStringAddresses","category":"page"},{"location":"API.html#DictVectors","page":"API","title":"DictVectors","text":"","category":"section"},{"location":"API.html","page":"API","title":"API","text":"See Module DictVectors","category":"page"},{"location":"API.html#StatsTools","page":"API","title":"StatsTools","text":"","category":"section"},{"location":"API.html","page":"API","title":"API","text":"See Module StatsTools","category":"page"},{"location":"API.html#Index","page":"API","title":"Index","text":"","category":"section"},{"location":"API.html","page":"API","title":"API","text":"","category":"page"},{"location":"stochasticstyles.html#Module-StochasticStyles","page":"Stochastic styles","title":"Module StochasticStyles","text":"","category":"section"},{"location":"stochasticstyles.html","page":"Stochastic styles","title":"Stochastic styles","text":"StochasticStyles","category":"page"},{"location":"stochasticstyles.html#Rimu.StochasticStyles","page":"Stochastic styles","title":"Rimu.StochasticStyles","text":"This module provides concrete implementations of StochasticStyles, which specify the algorithm used by ProjectorMonteCarloProblem when performing stochastic matrix-vector multiplication.\n\nImplemented stochastic styles:\n\nStochasticStyle: abstract type for stochastic styles\nIsStochasticInteger\nIsDeterministic\nIsStochasticWithThreshold\nIsDynamicSemistochastic\nStyleUnknown\n\nThe offdiagonal spawning is defined in spawning.jl and is controlled by setting a SpawningStrategy.\n\nThe vector compression strategies are defined in compression.jl and are controlled by setting a CompressionStrategy.\n\n\n\n\n\n","category":"module"},{"location":"stochasticstyles.html#Available-StochasticStyles","page":"Stochastic styles","title":"Available StochasticStyles","text":"","category":"section"},{"location":"stochasticstyles.html","page":"Stochastic styles","title":"Stochastic styles","text":"StyleUnknown","category":"page"},{"location":"stochasticstyles.html#Rimu.Interfaces.StyleUnknown","page":"Stochastic styles","title":"Rimu.Interfaces.StyleUnknown","text":"StyleUnknown{T}() <: StochasticStyle\n\nTrait for value types not (currently) compatible with FCIQMC. This style makes it possible to construct dict vectors with unsupported valtypes.\n\nSee also StochasticStyle.\n\n\n\n\n\n","category":"type"},{"location":"stochasticstyles.html","page":"Stochastic styles","title":"Stochastic styles","text":"Modules = [StochasticStyles]\nPages = [\"styles.jl\"]","category":"page"},{"location":"stochasticstyles.html#Rimu.StochasticStyles.IsDeterministic","page":"Stochastic styles","title":"Rimu.StochasticStyles.IsDeterministic","text":"IsDeterministic{T=Float64}(compression=NoCompression()) <: StochasticStyle{T}\n\nPropagate with deterministic vector matrix multiplications. Stochastic compression of the resultant vector (after annihilations) can be triggered by setting the optional compression argument to a relevant CompressionStrategy.\n\nSee also StochasticStyle.\n\n\n\n\n\n","category":"type"},{"location":"stochasticstyles.html#Rimu.StochasticStyles.IsDynamicSemistochastic","page":"Stochastic styles","title":"Rimu.StochasticStyles.IsDynamicSemistochastic","text":"IsDynamicSemistochastic{T=Float64}(; kwargs...) <: StochasticStyle{T}\n\nQMC propagation with floating-point walker numbers and reduced noise. All possible spawns (offdiagonal elements in vector-matrix multiplication) are performed deterministically when number of walkers in a configuration is high, as controlled by the rel_spawning_threshold and abs_spawning_threshold keywords. Stochastic selection of spawns is controlled by the spawning keyword.\n\nBy default, a stochastic vector compression is applied after annihilations are completed. This behaviour can be changed to on-the-fly projection (as in IsStochasticInteger or IsStochasticWithThreshold) by setting late_compression=false, or modifying spawning and compression. See parameters below for a more detailed explanation.\n\nParameters:\n\nthreshold = 1.0: Values below this number are stochastically projected to this value or zero. See also ThresholdCompression.\nlate_compression = true: If this is set to true, stochastic vector compression is performed after all the spawns are performed. If it is set to false, values are stochastically projected as they are being spawned. late_compression=true is equivalent to setting compression=ThresholdCompression(threshold) and spawning=WithReplacement().  late_compression=false is equivalent to compression=NoCompression() and spawning=WithReplacement(threshold).\nrel_spawning_threshold = 1.0: If the walker number on a configuration times this threshold is greater than the number of offdiagonals, spawning is done deterministically. Should be set to 1 or more for best performance.\nabs_spawning_threshold = Inf: If the walker number on a configuration is greater than this value, spawning is done deterministically. Can be set to e.g.  abs_spawning_threshold = 0.1 * target_walkers.\nspawning = WithReplacement(): SpawningStrategy to use for the non-exact spawns.\ncompression = ThresholdCompression(threshold): CompressionStrategy used to compress the vector after a step. Overrides threshold.\n\nSee also StochasticStyle.\n\n\n\n\n\n","category":"type"},{"location":"stochasticstyles.html#Rimu.StochasticStyles.IsStochastic2Pop","page":"Stochastic styles","title":"Rimu.StochasticStyles.IsStochastic2Pop","text":"IsStochastic2Pop{T=Complex{Int}}() <: StochasticStyle{T}\n\nStochastic propagation with complex walker numbers representing two populations of integer walkers.\n\nWhen using this style, make sure to set a complex number as target walkers in the ShiftStrategy!\n\nThis style is experimental.\n\nSee also StochasticStyle.\n\n\n\n\n\n","category":"type"},{"location":"stochasticstyles.html#Rimu.StochasticStyles.IsStochasticInteger","page":"Stochastic styles","title":"Rimu.StochasticStyles.IsStochasticInteger","text":"IsStochasticInteger{T=Int}() <: StochasticStyle{T}\n\nFCIQMC algorithm with integer walkers as in Booth et al. (2009). During the vector matrix product each individual diagonal and spawning step is rounded stochastically to a nearby integer value.\n\nSee also StochasticStyle.\n\n\n\n\n\n","category":"type"},{"location":"stochasticstyles.html#Rimu.StochasticStyles.IsStochasticWithThreshold","page":"Stochastic styles","title":"Rimu.StochasticStyles.IsStochasticWithThreshold","text":"IsStochasticWithThreshold{T=Float64}(threshold=1.0) <: StochasticStyle{T}\n\nStochastic propagation with floating point walker numbers. During the vector matrix product each individual diagonal and spawning result is rounded stochastically if smaller than threshold (before annihilations). For a more customizable stochastic style, see IsDynamicSemistochastic.\n\nSee also StochasticStyle.\n\n\n\n\n\n","category":"type"},{"location":"stochasticstyles.html#The-StochasticStyle-interface","page":"Stochastic styles","title":"The StochasticStyle interface","text":"","category":"section"},{"location":"stochasticstyles.html","page":"Stochastic styles","title":"Stochastic styles","text":"StochasticStyle\nstep_stats\napply_column!\ndefault_style","category":"page"},{"location":"stochasticstyles.html#Rimu.Interfaces.StochasticStyle","page":"Stochastic styles","title":"Rimu.Interfaces.StochasticStyle","text":"StochasticStyle(v)\n\nAbstract type. When called as a function it returns the native style of the generalised vector v that determines how simulations are to proceed.\n\nUsage\n\nConcrete StochasticStyles can be used for the style keyword argument of ProjectorMonteCarloProblem, DVec and PDVec. The following styles are available:\n\nIsStochasticInteger\nIsDeterministic\nIsStochasticWithThreshold\nIsDynamicSemistochastic\nStyleUnknown\n\nExtended Help\n\nInterface\n\nWhen defining a new StochasticStyle, subtype it as MyStyle<:StochasticStyle{T} where T is the concrete value type the style is designed to work with.\n\nFor it to work with ProjectorMonteCarloProblem, a StochasticStyle must define the following:\n\napply_column!(::StochasticStyle, w, H, address, value)\nstep_stats(::StochasticStyle)\n\nand optionally\n\nCompressionStrategy(::StochasticStyle) for vector compression after annihilations,\n\nSee also StochasticStyles, Interfaces.\n\n\n\n\n\n","category":"type"},{"location":"stochasticstyles.html#Rimu.Interfaces.step_stats","page":"Stochastic styles","title":"Rimu.Interfaces.step_stats","text":"step_stats(::StochasticStyle)\nstep_stats(::CompressionStrategy)\n\nReturn a tuple of stat names (Symbol or String) and a tuple of zeros of the same length. These will be reported as columns in the DataFrame returned by ProjectorMonteCarloProblem.\n\n\n\n\n\n","category":"function"},{"location":"stochasticstyles.html#Rimu.Interfaces.apply_column!","page":"Stochastic styles","title":"Rimu.Interfaces.apply_column!","text":"apply_column!(v, op, addr, num, boost=1) -> stats::Tuple\n\nApply the product of column addr of the operator op and the scalar num to the vector v according to the StochasticStyle of v. By expectation value this should be equivalent to\n\nv .+= op[:, add] .* num\n\nThis is used to perform the spawning step in FCIQMC and to implement operator-vector multiplications. Mutates v and reports spawning statistics.\n\nThe boost argument multiplicatively increases the number of spawns to be performed without affecting the expectation value of the procedure.\n\n\n\n\n\n","category":"function"},{"location":"stochasticstyles.html#Rimu.Interfaces.default_style","page":"Stochastic styles","title":"Rimu.Interfaces.default_style","text":"default_style(::Type)\n\nPick a StochasticStyle based on the value type. Returns StyleUnknown if no known default style is set.\n\n\n\n\n\n","category":"function"},{"location":"stochasticstyles.html#Compression-strategies","page":"Stochastic styles","title":"Compression strategies","text":"","category":"section"},{"location":"stochasticstyles.html","page":"Stochastic styles","title":"Stochastic styles","text":"CompressionStrategy\nNoCompression\nStochasticStyles.ThresholdCompression\ncompress!","category":"page"},{"location":"stochasticstyles.html#Rimu.Interfaces.CompressionStrategy","page":"Stochastic styles","title":"Rimu.Interfaces.CompressionStrategy","text":"CompressionStrategy\n\nThe CompressionStrategy controls how a vector is compressed after a step.\n\nDefault implementation:\n\nNoCompression: no vector compression\n\nUsage\n\nA subtype of CompressionStrategy can be passed as a keyword argument to the constructors for some StochasticStyles. Calling CompressionStrategy(s::StochasticStyle) returns a relevant subtype. The default is NoCompression.\n\nInterface\n\nWhen defining a new CompressionStrategy, subtype it as MyCompressionStrategy <: CompressionStrategy and define these methods:\n\ncompress!(s::CompressionStrategy, v)\ncompress!(s::CompressionStrategy, w, v)\nstep_stats(s::CompressionStrategy)\n\n\n\n\n\n","category":"type"},{"location":"stochasticstyles.html#Rimu.Interfaces.NoCompression","page":"Stochastic styles","title":"Rimu.Interfaces.NoCompression","text":"NoCompression <: CompressionStrategy end\n\nDefault CompressionStrategy. Leaves the vector intact.\n\n\n\n\n\n","category":"type"},{"location":"stochasticstyles.html#Rimu.StochasticStyles.ThresholdCompression","page":"Stochastic styles","title":"Rimu.StochasticStyles.ThresholdCompression","text":"ThresholdCompression(threshold=1) <: CompressionStrategy\n\nCompressionStrategy that compresses a vector by threshold projection. Every entry in the vector with a value below the threshold is either set to zero, or increased to the threshold. The probabilty of setting it to zero is equal to abs(value) / threshold.\n\n\n\n\n\n","category":"type"},{"location":"stochasticstyles.html#Rimu.Interfaces.compress!","page":"Stochastic styles","title":"Rimu.Interfaces.compress!","text":"compress!([::CompressionStrategy,] v) -> ::NTuple{N,::Symbol}, ::NTuple{N}\ncompress!([::CompressionStrategy,] w, v) -> ::NTuple{N,::Symbol}, ::NTuple{N}\n\nCompress the vector v. The one-argument version compresses the vector in-place. The two-argument vector stores the result in w. The CompressionStrategy associated with the StochasticStyle of v is used to determine the type of compression.\n\nReturns two tuples, containing the names and values of statistics that are to be reported.\n\n\n\n\n\n","category":"function"},{"location":"stochasticstyles.html#Spawning-strategies-and-convenience-functions","page":"Stochastic styles","title":"Spawning strategies and convenience functions","text":"","category":"section"},{"location":"stochasticstyles.html","page":"Stochastic styles","title":"Stochastic styles","text":"The following functions and types are unexported, but are useful when defining new styles.","category":"page"},{"location":"stochasticstyles.html","page":"Stochastic styles","title":"Stochastic styles","text":"Modules = [StochasticStyles]\nPages = [\"spawning.jl\"]\nOrder = [:function,:method,:type]","category":"page"},{"location":"stochasticstyles.html#Rimu.StochasticStyles.diagonal_step!","page":"Stochastic styles","title":"Rimu.StochasticStyles.diagonal_step!","text":"diagonal_step!(w, op, add, val, threshold=0) -> (clones, deaths, zombies)\n\nPerform diagonal step on a walker add => val. Optional argument threshold sets the projection threshold. If eltype(w) is an Integer, the val is rounded to the nearest integer stochastically.\n\n\n\n\n\n","category":"function"},{"location":"stochasticstyles.html#Rimu.StochasticStyles.projected_deposit!","page":"Stochastic styles","title":"Rimu.StochasticStyles.projected_deposit!","text":"projected_deposit!(w, add, val, parent, threshold=0)\n\nLike deposit!, but performs threshold projection before spawning. If eltype(w) is an Integer, values are stochastically rounded.\n\nReturns the value deposited.\n\n\n\n\n\n","category":"function"},{"location":"stochasticstyles.html#Rimu.StochasticStyles.spawn!","page":"Stochastic styles","title":"Rimu.StochasticStyles.spawn!","text":"spawn!(s::SpawningStrategy, w, op::AbstractHamiltonian, add, val, boost)\nspawn!(s::SpawningStrategy, w, offdiags::AbstractOffdiagonals, add, val, boost)\n\nPerform stochastic spawns to w from address add with val walkers. val * boost controls the number of spawns performed.\n\nThis function should be overloaded in the second form, with offdiags as an argument.\n\nSee SpawningStrategy.\n\n\n\n\n\n","category":"function"},{"location":"stochasticstyles.html#Rimu.StochasticStyles.Bernoulli","page":"Stochastic styles","title":"Rimu.StochasticStyles.Bernoulli","text":"Bernoulli(threshold=0.0) <: SpawningStrategy\n\nPerform Bernoulli sampling. A spawn is attempted on each offdiagonal element with a probability that results in an expected number of spawns equal to the number of walkers on the spawning configuration. This is significantly less efficient than WithReplacement.\n\nIf the number of spawn attempts is greater than the number of offdiagonals, this functions like Exact, but is less efficient. For best performance, this strategy is to be used as a substrategy of DynamicSemistochastic.\n\nParameters\n\nthreshold sets the projection threshold.\n\nspawn! with this strategy returns the number of spawn attempts and the number of spawns.\n\n\n\n\n\n","category":"type"},{"location":"stochasticstyles.html#Rimu.StochasticStyles.DynamicSemistochastic","page":"Stochastic styles","title":"Rimu.StochasticStyles.DynamicSemistochastic","text":"DynamicSemistochastic(; strat, rel_threshold, abs_threshold) <: SpawningStrategy\n\nSpawningStrategy that behaves like strat when the number of walkers is low, but performs exact steps when it is high. What \"high\" means is controlled by the two thresholds described below.\n\nParameters\n\nstrat = WithReplacement(): a SpawningStrategy to use when the multiplication is not performed exactly. If the strat has a threshold different from zero, all spawns will be projected to that threshold.\nrel_threshold = 1.0: When deciding on whether to perform an exact spawn, this value is multiplied to the number of walkers. Should be set to 1 or more for best performance. This threshold is affected by the boost argument to spawn!.\nabs_threshold = Inf: When deciding on whether to perform an exact spawn, min(abs_threshold, num_offdiagonals) is used. This threshold is not affected by the boost argument to spawn!.\n\nSee e.g. WithoutReplacement for a description of the strat.threshold parameter.\n\nspawn! with this strategy returns the numbers of exact and inexact spawns, the number of spawn attempts and the number of spawns.\n\n\n\n\n\n","category":"type"},{"location":"stochasticstyles.html#Rimu.StochasticStyles.Exact","page":"Stochastic styles","title":"Rimu.StochasticStyles.Exact","text":"Exact(threshold=0.0) <: SpawningStrategy\n\nPerform an exact spawning step.\n\nParameters\n\nthreshold sets the projection threshold. If set to zero, no projection is performed.\n\nspawn! with this strategy returns the number of spawn attempts and the number of spawns.\n\n\n\n\n\n","category":"type"},{"location":"stochasticstyles.html#Rimu.StochasticStyles.SingleSpawn","page":"Stochastic styles","title":"Rimu.StochasticStyles.SingleSpawn","text":"SingleSpawn(threshold=0.0) <: SpawningStrategy\n\nPerform a single spawn. Useful as a building block for other stochastic styles.\n\nParameters\n\nthreshold sets the projection threshold. If set to zero, no projection is performed.\n\nspawn! with this strategy returns the number of spawn attempts (always 1) and the number of spawns.\n\n\n\n\n\n","category":"type"},{"location":"stochasticstyles.html#Rimu.StochasticStyles.SpawningStrategy","page":"Stochastic styles","title":"Rimu.StochasticStyles.SpawningStrategy","text":"SpawningStrategy\n\nA SpawningStrategy is used to control how spawns (multiplies with off-diagonal part of the column vector) are performed and can be passed to some of the StochasticStyles as keyword arguments.\n\nThe following concrete implementations are provided:\n\nExact: Perform exact spawns. Used by IsDeterministic.\nWithReplacement: The default stochastic spawning strategy. Spawns are chosen with replacement.\nDynamicSemistochastic: Behave like Exact when the number of spawns performed is high, and like a different substrategy otherwise. Used by IsDynamicSemistochastic.\nSingleSpawn: Perform a single spawn only. Used as a building block for other strategies.\nWithoutReplacement: Similar to WithReplacement, but ensures each spawn is only performed once. Only to be used as a substrategy of DynamicSemistochastic.\nBernoulli: Each spawn is attempted with a fixed probability. Only to be used as a substrategy of DynamicSemistochastic.\n\nInterface\n\nIn order to implement a new SpawningStrategy, define a method for spawn!.\n\n\n\n\n\n","category":"type"},{"location":"stochasticstyles.html#Rimu.StochasticStyles.WithReplacement","page":"Stochastic styles","title":"Rimu.StochasticStyles.WithReplacement","text":"WithReplacement(threshold=0.0) <: SpawningStrategy\n\nSpawningStrategy where spawn targets are sampled with replacement. This is the default spawning strategy for most of the StochasticStyles.\n\nParameters\n\nthreshold sets the projection threshold. If set to zero, no projection is performed.\n\nspawn! with this strategy returns the number of spawn attempts and the number of spawns.\n\n\n\n\n\n","category":"type"},{"location":"stochasticstyles.html#Rimu.StochasticStyles.WithoutReplacement","page":"Stochastic styles","title":"Rimu.StochasticStyles.WithoutReplacement","text":"WithoutReplacement(threshold=0.0) <: SpawningStrategy\n\nSpawningStrategy where spawn targets are sampled without replacement. This strategy needs to allocate a temporary array during spawning, which makes it significantly less efficient than WithReplacement.\n\nIf the number of spawn attempts is greater than the number of offdiagonals, this functions like Exact, but is less efficient. For best performance, this strategy is to be used as a substrategy of DynamicSemistochastic.\n\nParameters\n\nthreshold sets the projection threshold. If set to zero, no projection is performed.\n\nspawn! with this strategy returns the number of spawn attempts and the number of spawns.\n\n\n\n\n\n","category":"type"},{"location":"stochasticstyles.html#Index","page":"Stochastic styles","title":"Index","text":"","category":"section"},{"location":"stochasticstyles.html","page":"Stochastic styles","title":"Stochastic styles","text":"Pages   = [\"stochasticstyles.md\"]","category":"page"},{"location":"generated/BHM-example-mpi.html","page":"Rimu with MPI","title":"Rimu with MPI","text":"EditURL = \"../../../scripts/BHM-example-mpi.jl\"","category":"page"},{"location":"generated/BHM-example-mpi.html#Example-2:-Rimu-with-MPI","page":"Rimu with MPI","title":"Example 2: Rimu with MPI","text":"","category":"section"},{"location":"generated/BHM-example-mpi.html","page":"Rimu with MPI","title":"Rimu with MPI","text":"In this example, we will demonstrate using Rimu with MPI. MPI is a standard for parallel and distributed computing, and it is widely used in high-performance computing. Rimu provides support for MPI to enable parallel computations on multiple nodes.","category":"page"},{"location":"generated/BHM-example-mpi.html","page":"Rimu with MPI","title":"Rimu with MPI","text":"A runnable script for this example is located here. Run it with 2 MPI ranks with mpirun -n 2 julia BHM-example-mpi.jl.","category":"page"},{"location":"generated/BHM-example-mpi.html","page":"Rimu with MPI","title":"Rimu with MPI","text":"We start by importing Rimu.","category":"page"},{"location":"generated/BHM-example-mpi.html","page":"Rimu with MPI","title":"Rimu with MPI","text":"using Rimu","category":"page"},{"location":"generated/BHM-example-mpi.html","page":"Rimu with MPI","title":"Rimu with MPI","text":"Note that it is not necessary to initialise the MPI library, as this is already done automatically when Rimu is loaded.","category":"page"},{"location":"generated/BHM-example-mpi.html","page":"Rimu with MPI","title":"Rimu with MPI","text":"We will compute the ground state of a Bose-Hubbard model in momentum space with 10 particles in 10 sites.","category":"page"},{"location":"generated/BHM-example-mpi.html","page":"Rimu with MPI","title":"Rimu with MPI","text":"First, we define the Hamiltonian. We want to start from an address with zero momentum, which is located at mode 5 in the momentum grid. We put all 10 particles, all in the zero momentum mode.","category":"page"},{"location":"generated/BHM-example-mpi.html","page":"Rimu with MPI","title":"Rimu with MPI","text":"address = BoseFS(10, 5 => 10)","category":"page"},{"location":"generated/BHM-example-mpi.html","page":"Rimu with MPI","title":"Rimu with MPI","text":"BoseFS{10,10}(0, 0, 0, 0, 10, 0, 0, 0, 0, 0)","category":"page"},{"location":"generated/BHM-example-mpi.html","page":"Rimu with MPI","title":"Rimu with MPI","text":"We will set the interaction strength u to 6.0. The hopping strength t defaults to 1.0.","category":"page"},{"location":"generated/BHM-example-mpi.html","page":"Rimu with MPI","title":"Rimu with MPI","text":"H = HubbardMom1D(address; u=6.0)","category":"page"},{"location":"generated/BHM-example-mpi.html","page":"Rimu with MPI","title":"Rimu with MPI","text":"HubbardMom1D(fs\"|0 0 0 0 10 0 0 0 0 0⟩\"; u=6.0, t=1.0)","category":"page"},{"location":"generated/BHM-example-mpi.html","page":"Rimu with MPI","title":"Rimu with MPI","text":"We set a reporting strategy. We will use ReportToFile, which writes the reports directly to a file. This is useful for MPI calculations, as they will typically run non-interactively. The reports will be written to disk and can be inspected later. This has the additional benefit of reducing memory use in long-running jobs, as we don't need to keep the results in memory. It also allows us to inspect the results before the computation finishes and recover some data if it fails.","category":"page"},{"location":"generated/BHM-example-mpi.html","page":"Rimu with MPI","title":"Rimu with MPI","text":"The default settings will ensure that only the root MPI rank will write to the file, which is reasonable, and that data is saved in chunks of 1000 time steps. We choose to suppress progress messages with setting io=devnull.","category":"page"},{"location":"generated/BHM-example-mpi.html","page":"Rimu with MPI","title":"Rimu with MPI","text":"reporting_strategy = ReportToFile(\n    filename=\"result.arrow\",\n    io=devnull\n)","category":"page"},{"location":"generated/BHM-example-mpi.html","page":"Rimu with MPI","title":"Rimu with MPI","text":"ReportToFile{Symbol}(\"result.arrow\", 1, 1000, true, false, Base.DevNull(), :zstd, nothing)","category":"page"},{"location":"generated/BHM-example-mpi.html","page":"Rimu with MPI","title":"Rimu with MPI","text":"For running parallel computations with MPI, it is important that a compatible state vector is used. Here we explicitly set up an MPI-enabled state vector, PDVec, which is automatically MPI-distributed over the available number of MPI ranks. In addition, threading will be used with all threads available to Julia.","category":"page"},{"location":"generated/BHM-example-mpi.html","page":"Rimu with MPI","title":"Rimu with MPI","text":"initial_vector = PDVec(address => 1.0; style=IsDynamicSemistochastic())","category":"page"},{"location":"generated/BHM-example-mpi.html","page":"Rimu with MPI","title":"Rimu with MPI","text":"1-element PDVec: style = IsDynamicSemistochastic{Float64,ThresholdCompression,DynamicSemistochastic}()\n  fs\"|0 0 0 0 10 0 0 0 0 0⟩\" => 1.0","category":"page"},{"location":"generated/BHM-example-mpi.html","page":"Rimu with MPI","title":"Rimu with MPI","text":"Now, we can set other parameters as usual. We will perform the computation with 10000 walkers and for 10000 time steps. We will also compute the projected energy by passing a ProjectedEnergy object as a post_step_strategy.","category":"page"},{"location":"generated/BHM-example-mpi.html","page":"Rimu with MPI","title":"Rimu with MPI","text":"problem = ProjectorMonteCarloProblem(H;\n    start_at=initial_vector,\n    reporting_strategy,\n    post_step_strategy=ProjectedEnergy(H, initial_vector),\n    target_walkers=10_000,\n    time_step=1e-4,\n    last_step=10_000\n);","category":"page"},{"location":"generated/BHM-example-mpi.html","page":"Rimu with MPI","title":"Rimu with MPI","text":"The @mpi_root macro performs an action on the root rank only, which is useful for printing.","category":"page"},{"location":"generated/BHM-example-mpi.html","page":"Rimu with MPI","title":"Rimu with MPI","text":"@mpi_root println(\"Running FCIQMC with \", mpi_size(), \" rank(s).\")","category":"page"},{"location":"generated/BHM-example-mpi.html","page":"Rimu with MPI","title":"Rimu with MPI","text":"Running FCIQMC with 1 rank(s).\n","category":"page"},{"location":"generated/BHM-example-mpi.html","page":"Rimu with MPI","title":"Rimu with MPI","text":"Finally, we can run the computation.","category":"page"},{"location":"generated/BHM-example-mpi.html","page":"Rimu with MPI","title":"Rimu with MPI","text":"simulation = solve(problem);\n\n@mpi_root println(\"Simulation success = \", simulation.success)","category":"page"},{"location":"generated/BHM-example-mpi.html","page":"Rimu with MPI","title":"Rimu with MPI","text":"Simulation success = true\n","category":"page"},{"location":"generated/BHM-example-mpi.html","page":"Rimu with MPI","title":"Rimu with MPI","text":"Once the calculation is done, the results are available in the arrow file on disk.","category":"page"},{"location":"generated/BHM-example-mpi.html","page":"Rimu with MPI","title":"Rimu with MPI","text":"In a typical workflow, the simulation results would be loaded from disk and analysed in the REPL or with a separate script. The arrow file can be loaded into a DataFrame with metadata using the load_df function.","category":"page"},{"location":"generated/BHM-example-mpi.html","page":"Rimu with MPI","title":"Rimu with MPI","text":"","category":"page"},{"location":"generated/BHM-example-mpi.html","page":"Rimu with MPI","title":"Rimu with MPI","text":"This page was generated using Literate.jl.","category":"page"},{"location":"index.html#Rimu.jl-Package-Guide","page":"Guide","title":"Rimu.jl Package Guide","text":"","category":"section"},{"location":"index.html","page":"Guide","title":"Guide","text":"Random Integrators for many-body quantum systems","category":"page"},{"location":"index.html","page":"Guide","title":"Guide","text":"The grand aim is to develop a toolbox for many-body quantum systems that can be represented by a Hamiltonian in second quantisation language. Currently supported features include:","category":"page"},{"location":"index.html#Interacting-with-quantum-many-body-models","page":"Guide","title":"Interacting with quantum many-body models","text":"","category":"section"},{"location":"index.html","page":"Guide","title":"Guide","text":"Full configuration interaction quantum Monte Carlo (FCIQMC), a flavour of projector quantum Monte Carlo for stochastically solving the time-independent Schrödinger equation. See References.\nMatrix-free exact diagonalisation of quantum Hamiltonians (with external package KrylovKit.jl).\nSparse matrix representation of quantum Hamiltonians for exact diagonalisation with sparse linear algebra package of your choice (fastest for small systems).","category":"page"},{"location":"index.html#Representing-quantum-many-body-models","page":"Guide","title":"Representing quantum many-body models","text":"","category":"section"},{"location":"index.html","page":"Guide","title":"Guide","text":"A composable and efficient type system for representing single- and multi-component Fock states of bosons, fermions, and mixtures thereof, to be used as a basis for representing Hamiltonians.\nAn interface for defining many-body Hamiltonians.\nPre-defined models include:\nHubbard model in real space for bosons and fermions and mixtures in 1, 2, and 3 spatial dimensions.\nHubbard and related lattice models in momentum space for bosons and fermions in one spatial dimension.\nTranscorrelated Hamiltonian for contact interactions in one dimension for fermions, as described in Jeszenski et al. arXiv:1806.11268.","category":"page"},{"location":"index.html#Statistical-analysis-of-Monte-Carlo-data","page":"Guide","title":"Statistical analysis of Monte Carlo data","text":"","category":"section"},{"location":"index.html","page":"Guide","title":"Guide","text":"Blocking analysis following Flyvberg & Peterson JCP (1989), and automated with hypothesis testing by Jonsson","category":"page"},{"location":"index.html","page":"Guide","title":"Guide","text":"PRE (2018).","category":"page"},{"location":"index.html","page":"Guide","title":"Guide","text":"Unbiased estimators for the ground state energy by re-reweighting following Nightingale & Blöte PRB (1986) and Umrigar et al. JCP (1993).","category":"page"},{"location":"index.html","page":"Guide","title":"Guide","text":"The code supports parallelisation with MPI (harnessing MPI.jl) as well as native Julia threading (experimental). In the future, we may add tools to solve the time-dependent Schrödinger equation and Master equations for open system time evolution.","category":"page"},{"location":"index.html","page":"Guide","title":"Guide","text":"Concept: Joachim Brand and Elke Pahl.","category":"page"},{"location":"index.html","page":"Guide","title":"Guide","text":"Contributors: Joachim Brand, Elke Pahl, Mingrui Yang, Matija Čufar, Chris Bradly.","category":"page"},{"location":"index.html","page":"Guide","title":"Guide","text":"Discussions, help, and additional contributions are acknowledged by Ali Alavi, Didier Adrien, Chris Scott (NeSI), Alexander Pletzer (NeSI).","category":"page"},{"location":"index.html#Installation","page":"Guide","title":"Installation","text":"","category":"section"},{"location":"index.html#Installing-Rimu-for-usage","page":"Guide","title":"Installing Rimu for usage","text":"","category":"section"},{"location":"index.html","page":"Guide","title":"Guide","text":"Rimu is a registered package and can be installed with the package manager. Hit the ] key at the Julia REPL to get into Pkg mode and type","category":"page"},{"location":"index.html","page":"Guide","title":"Guide","text":"pkg> add Rimu","category":"page"},{"location":"index.html","page":"Guide","title":"Guide","text":"Alternatively, use","category":"page"},{"location":"index.html","page":"Guide","title":"Guide","text":"julia> using Pkg; Pkg.add(name=\"Rimu\")","category":"page"},{"location":"index.html","page":"Guide","title":"Guide","text":"in order to install Rimu from a script.","category":"page"},{"location":"index.html#Installing-Rimu-for-development","page":"Guide","title":"Installing Rimu for development","text":"","category":"section"},{"location":"index.html","page":"Guide","title":"Guide","text":"In order to be able to edit the source code, push changes, change and make new git branches, etc., clone the git repository with git clone to a convenient location, e.g. ~/mygitpackagefolder/. Then hit the ] key at the Julia REPL to get into Pkg mode and type","category":"page"},{"location":"index.html","page":"Guide","title":"Guide","text":"pkg> develop ~/mygitpackagefolder/rimu.jl","category":"page"},{"location":"index.html","page":"Guide","title":"Guide","text":"where the file path has to be adjusted to the location of the cloned git repository.","category":"page"},{"location":"index.html#Usage","page":"Guide","title":"Usage","text":"","category":"section"},{"location":"index.html","page":"Guide","title":"Guide","text":"The package is now installed and can be imported with","category":"page"},{"location":"index.html","page":"Guide","title":"Guide","text":"julia> using Rimu","category":"page"},{"location":"index.html","page":"Guide","title":"Guide","text":"When planning to edit the code of the package it is advisable to use the Revise package by issuing","category":"page"},{"location":"index.html","page":"Guide","title":"Guide","text":"julia> using Revise","category":"page"},{"location":"index.html","page":"Guide","title":"Guide","text":"before using Rimu. This will track any changes made to the source code of Rimu and the changed package will be available after saving the source code (hopefully, and most of the time, without restarting the Julia REPL).","category":"page"},{"location":"index.html","page":"Guide","title":"Guide","text":"Rimu offers a number of tools for representing Hamiltonians (see Hamiltonians) and state vectors / wave functions (see DictVectors) as well as algorithms to find the ground state, e.g. ProjectorMonteCarloProblem, ExactDiagonalizationProblem.","category":"page"},{"location":"index.html#Scripts","page":"Guide","title":"Scripts","text":"","category":"section"},{"location":"index.html","page":"Guide","title":"Guide","text":"Rimu is written as a Julia package to be imported with using Rimu as described above. It supplies useful functions and types. Performing actual calculations and analysing the results is done with scripts. The folder scripts/ contains a collections of scripts that are either examples for use of the Rimu package or useful scripts for data analysis. In particular:","category":"page"},{"location":"index.html","page":"Guide","title":"Guide","text":"scripts/BHM-example.jl is an example script that runs fciqmc on the 1D Bose-Hubbard model. A data frame with results is written to the file fciqmcdata.arrow.\nscripts/BHM-example-mpi.jl demonstrates basic usage of Rimu with MPI.","category":"page"},{"location":"index.html#MPI","page":"Guide","title":"MPI","text":"","category":"section"},{"location":"index.html","page":"Guide","title":"Guide","text":"The Rimu package can run in parallel on different processes or node and distribute work by making use of MPI, or \"message passing interface\". For example, running","category":"page"},{"location":"index.html","page":"Guide","title":"Guide","text":"> julia scripts/BHM-example.jl","category":"page"},{"location":"index.html","page":"Guide","title":"Guide","text":"will run on one processor with the main computation (i.e. after package loading and compilation) completing in 2.69 seconds.","category":"page"},{"location":"index.html","page":"Guide","title":"Guide","text":"Running","category":"page"},{"location":"index.html","page":"Guide","title":"Guide","text":"> mpirun -np 4 julia scripts/BHM-example-mpi.jl","category":"page"},{"location":"index.html","page":"Guide","title":"Guide","text":"on the same hardware makes use of 4 cores and the main part completes in 1.04 seconds, a speedup factor of 2.6. This seems reasonable, given that extra work needs to be done for communicating between different processes.","category":"page"},{"location":"index.html","page":"Guide","title":"Guide","text":"Using MPI parallelism with Rimu is easy. Enabling MPI enabled automatically if PDVec is used to store a vector. In that case, data will be stored in a distributed fashion among the MPI ranks and only communicated between ranks when necessary.","category":"page"},{"location":"index.html#Compatibility","page":"Guide","title":"Compatibility","text":"","category":"section"},{"location":"index.html","page":"Guide","title":"Guide","text":"We recommend using Rimu with the latest Julia release version. Rimu requires at least julia v1.9.","category":"page"},{"location":"index.html#References","page":"Guide","title":"References","text":"","category":"section"},{"location":"index.html","page":"Guide","title":"Guide","text":"The code implements the FCIQMC algorithm originally described in","category":"page"},{"location":"index.html","page":"Guide","title":"Guide","text":"\"Fermion Monte Carlo without fixed nodes: A game of life, death, and annihilation in Slater determinant space\", G. H. Booth, A. J. W. Thom, A. Alavi, J. Chem. Phys. 131, 054106 (2009).\n\"Communications: Survival of the fittest: accelerating convergence in full configuration-interaction quantum Monte Carlo.\", D. Cleland,  G. H. Booth, A. Alavi, J. Chem. Phys. 132, 041103 (2010).","category":"page"},{"location":"index.html","page":"Guide","title":"Guide","text":"Scientific papers describing additional features implemented in Rimu:","category":"page"},{"location":"index.html","page":"Guide","title":"Guide","text":"\"Improved walker population control for full configuration interaction quantum Monte Carlo\", M. Yang, E. Pahl, J. Brand, J. Chem. Phys. 153, 170143 (2020); arXiv:2008.01927.\n\"Stochastic differential equation approach to understanding the population control bias in full configuration interaction quantum Monte Carlo\", J. Brand, M. Yang, E. Pahl, arXiv:2103.07800 (2021).","category":"page"},{"location":"index.html","page":"Guide","title":"Guide","text":"Papers discussing results obtained with Rimu:","category":"page"},{"location":"index.html","page":"Guide","title":"Guide","text":"\"Polaron-Depleton Transition in the Yrast Excitations of a One-Dimensional Bose Gas with a Mobile Impurity\", M. Yang, M. Čufar, E. Pahl, J. Brand, Condens. Matter 7, 15 (2022).\n\"Magnetic impurity in a one-dimensional few-fermion system\", L. Rammelmüller, D. Huber, M. Čufar, J. Brand, A. Volosniev, arXiv:2204.01606 (2022).","category":"page"},{"location":"dictvectors.html#Module-DictVectors","page":"Dict vectors","title":"Module DictVectors","text":"","category":"section"},{"location":"dictvectors.html","page":"Dict vectors","title":"Dict vectors","text":"DictVectors\nAbstractDVec","category":"page"},{"location":"dictvectors.html#Rimu.DictVectors","page":"Dict vectors","title":"Rimu.DictVectors","text":"Module that provides concrete implementations of the AbstractDVec interface.\n\nDVec: basic AbstractDVec\nPDVec: parallel AbstractDVec with MPI and initiator support\nInitiatorDVec: allows storing information about initiator status\n\nSee Interfaces.\n\n\n\n\n\n","category":"module"},{"location":"dictvectors.html#Rimu.Interfaces.AbstractDVec","page":"Dict vectors","title":"Rimu.Interfaces.AbstractDVec","text":"AbstractDVec{K,V}\n\nAbstract data type for vector-like data structures with sparse storage. While conceptually AbstractDVecs represent elements of a vector space over a scalar type V, they are indexed by an arbitrary type K (could be non-integers) similar to dictionaries. They support the interface from VectorInterface.jl and are designed to work well for quantum Monte Carlo with ProjectorMonteCarloProblem and for matrix-free linear algebra with KrylovKit.\n\nConcrete implementations are available as PDVec, DVec, and InitiatorDVec.\n\nAbstractDVecs have a StochasticStyle which selects the spawning algorithm in FCIQMC. Looking up an element that is not stored in the AbstractDVec should return a zero, and setting a value to zero should remove it from the vector. To iterate over an AbstractDVec, use keys, pairs, or values. When possible, use reduction functions such as sum or mapreduce.\n\nInterface\n\nThe interface is similar to the AbstractDict interface, but with the changed behaviour as noted above.  Implement what would be needed for the AbstractDict interface (pairs, keys, values, setindex!, getindex, delete!, length, empty, empty!) and, in addition:\n\nStochasticStyle\nstorage returns an AbstractDict storing the raw data with possibly different valtype than V.\ndeposit!\n\nA default implementation for the VectorInterface.jl interface is provided through the above functions.\n\nSee also DictVectors, Interfaces.\n\n\n\n\n\n","category":"type"},{"location":"dictvectors.html#Concrete-implementations","page":"Dict vectors","title":"Concrete implementations","text":"","category":"section"},{"location":"dictvectors.html","page":"Dict vectors","title":"Dict vectors","text":"DVec\nInitiatorDVec\nPDVec","category":"page"},{"location":"dictvectors.html#Rimu.DictVectors.DVec","page":"Dict vectors","title":"Rimu.DictVectors.DVec","text":"DVec{K,V,D<:AbstractDict{K,V},S}\n\nDictionary-based vector-like data structure for use with FCIQMC and KrylovKit. While mostly behaving like a Dict, it supports various linear algebra operations such as norm and dot. It has a StochasticStyle that is used to select an appropriate spawning strategy in the FCIQMC algorithm.\n\nSee also: AbstractDVec, InitiatorDVec, PDVec.\n\nConstructors\n\nDVec(dict::AbstractDict[; style, capacity]): create a DVec with dict for storage. Note that the data may or may not be copied.\nDVec(args...[; style, capacity]): args... are passed to the Dict constructor. The Dict is used for storage.\nDVec{K,V}([; style, capacity]): create an empty DVec{K,V}.\nDVec(dv::AbstractDVec[; style, capacity]): create a DVec with the same contents as  adv. The style is inherited from dv by default.\n\nThe default style is selected based on the DVec's valtype (see default_style). If a style is given and the valtype does not match the style's eltype, the values are converted to an appropriate type.\n\nThe capacity argument is optional and sets the initial size of the DVec via Base.sizehint!.\n\nExamples\n\njulia> dv = DVec(:a => 1)\nDVec{Symbol,Int64} with 1 entry, style = IsStochasticInteger{Int64}()\n  :a => 1\n\njulia> dv = DVec(:a => 2, :b => 3; style=IsDeterministic())\nDVec{Symbol,Float64} with 2 entries, style = IsDeterministic{Float64}()\n  :a => 2.0\n  :b => 3.0\n\n\n\n\n\n","category":"type"},{"location":"dictvectors.html#Rimu.DictVectors.InitiatorDVec","page":"Dict vectors","title":"Rimu.DictVectors.InitiatorDVec","text":"InitiatorDVec{K,V} <: AbstractDVec{K,V}\n\nDictionary-based vector-like data structure for use with ProjectorMonteCarloProblem and KrylovKit.jl. See AbstractDVec. Functionally identical to DVec, but contains InitiatorValues internally in order to facilitate initiator methods. Initiator methods for controlling the Monte Carlo sign problem were first introduced in J. Chem. Phys. 132, 041103 (2010). How the initiators are handled is controlled by specifying an InitiatorRule with the initiator keyword argument (see below).\n\nSee also: AbstractDVec, DVec, PDVec.\n\nConstructors\n\nInitiatorDVec(dict::AbstractDict[; style, initiator, capacity]): create an InitiatorDVec with dict for storage.  Note that the data may or may not be copied.\nInitiatorDVec(args...[; style, initiator, capacity]): args... are passed to the Dict constructor. The Dict is used for storage.\nInitiatorDVec{K,V}([; style, initiator, capacity]): create an empty InitiatorDVec{K,V}.\nInitiatorDVec(dv::AbstractDVec[; style, initiator, capacity]): create an InitiatorDVec  with the same contents as dv. The style is inherited from dv by default.\n\nKeyword  arguments\n\nstyle: A valid StochasticStyle.  The default is selected based on the InitiatorDVec's valtype (see default_style). If a style is given and the valtype does not match the style's eltype, the values are converted to an appropriate type.\ninitiator = Initiator(1): A valid InitiatorRule. See Initiator.\ncapacity: Indicative size as Int. Optional. Sets the initial size of the InitiatorDVec via Base.sizehint!.\n\n\n\n\n\n","category":"type"},{"location":"dictvectors.html#Rimu.DictVectors.PDVec","page":"Dict vectors","title":"Rimu.DictVectors.PDVec","text":"PDVec{K,V}(; kwargs...)\nPDVec(iter; kwargs...)\nPDVec(pairs...; kwargs...)\n\nDictionary-based vector-like data structure for use with FCIQMC and KrylovKit.jl. While mostly behaving like a Dict, it supports various linear algebra operations such as norm and dot, and the interface defined in VectorInterface.\n\nThe P in PDVec stands for parallel. PDVecs perform mapreduce, foreach, and various linear algebra operations in a threaded manner. If MPI is available, these operations are automatically distributed as well. As such it is not recommended to iterate over pairs, keys, or values directly unless explicitly performing them on the localpart of the vector.\n\nSee also: AbstractDVec, DVec, InitiatorDVec.\n\nKeyword arguments\n\nstyle =default_style(V): A StochasticStyle that is used to select the spawning strategy in the FCIQMC algorithm.\ninitiator =NonInitiator(): An InitiatorRule, used in FCIQMC to remove the sign problem.\ncommunicator: A Communicator that controls how operations are performed when using MPI. The defaults are NotDistributed when not using MPI and AllToAll when using MPI.\n\nExtended Help\n\nSegmentation\n\nThe vector is split into Threads.nthreads() subdictionaries called segments. Which dictionary a key-value pair is mapped to is determined by the hash of the key. The purpose of this segmentation is to allow parallel processing - functions such as mapreduce, add! or dot (full list below) process each subdictionary on a separate thread.\n\nSee also PDWorkingMemory.\n\nExample\n\njulia> add = FermiFS2C((1,1,0,0), (0,0,1,1));\n\njulia> op = HubbardMom1D(add; t=4/π^2, u=4);\n\njulia> pv = PDVec(add => 1.0)\n1-element PDVec: style = IsDeterministic{Float64}()\n  fs\"|↑↑↓↓⟩\" => 1.0\n\njulia> pv = op * pv\n7-element PDVec: style = IsDeterministic{Float64}()\n  fs\"|↑↓↑↓⟩\" => 1.0\n  fs\"|↑↑↓↓⟩\" => 4.0\n  fs\"|↓↑↓↑⟩\" => 1.0\n  fs\"|↓↑↑↓⟩\" => -1.0\n  fs\"|⇅⋅⋅⇅⟩\" => 1.0\n  fs\"|↑↓↓↑⟩\" => -1.0\n  fs\"|⋅⇅⇅⋅⟩\" => 1.0\n\njulia> scale!(pv, -1); pv\n7-element PDVec: style = IsDeterministic{Float64}()\n  fs\"|↑↓↑↓⟩\" => -1.0\n  fs\"|↑↑↓↓⟩\" => -4.0\n  fs\"|↓↑↓↑⟩\" => -1.0\n  fs\"|↓↑↑↓⟩\" => 1.0\n  fs\"|⇅⋅⋅⇅⟩\" => -1.0\n  fs\"|↑↓↓↑⟩\" => 1.0\n  fs\"|⋅⇅⇅⋅⟩\" => -1.0\n\njulia> dest = similar(pv)\n0-element PDVec: style = IsDeterministic{Float64}()\n\njulia> map!(x -> x + 2, dest, values(pv))\n7-element PDVec: style = IsDeterministic{Float64}()\n  fs\"|↑↓↑↓⟩\" => 1.0\n  fs\"|↑↑↓↓⟩\" => -2.0\n  fs\"|↓↑↓↑⟩\" => 1.0\n  fs\"|↓↑↑↓⟩\" => 3.0\n  fs\"|⇅⋅⋅⇅⟩\" => 1.0\n  fs\"|↑↓↓↑⟩\" => 3.0\n  fs\"|⋅⇅⇅⋅⟩\" => 1.0\n\njulia> sum(values(pv))\n-6.0\n\njulia> dot(dest, pv)\n10.0\n\njulia> dot(dest, op, pv)\n44.0\n\nMPI\n\nWhen MPI is active, all parallel reductions are automatically reduced across MPI ranks with a call to MPI.Allreduce!.\n\nIn a distributed setting, PDVec does not support iteration without first making it explicit the iteration is only to be performed on the local segments of the vector. This is done with localpart. In general, even when not using MPI, it is best practice to use localpart when explicit iteration is required.\n\nUse with KrylovKit\n\nPDVec is compatible with eigsolve from KrylovKit.jl. When used, the diagonalisation is performed in a threaded and distributed manner. Using multiple MPI ranks with this method does not distribute the memory load effectively, but does result in significant speedups.\n\nExample\n\njulia> using KrylovKit\n\njulia> add = BoseFS((0,0,5,0,0));\n\njulia> op = HubbardMom1D(add; u=6.0);\n\njulia> pv = PDVec(add => 1.0);\n\njulia> results = eigsolve(op, pv, 4, :SR);\n\njulia> results[1][1:4]\n4-element Vector{Float64}:\n -3.4311156892322234\n  1.1821748602612363\n  3.7377753753082823\n  6.996390417443125\n\nParallel functionality\n\nThe following functions are threaded and MPI-compatible:\n\nFrom Base: mapreduce and derivatives (sum, prod, reduce...), all, any,map! (on values only), +, -, *\nFrom LinearAlgebra: rmul!, lmul!, mul!, axpy!, axpby!, dot, norm, normalize, normalize!\nThe full interface defined in VectorInterface.jl\n\n\n\n\n\n","category":"type"},{"location":"dictvectors.html#Interface-functions","page":"Dict vectors","title":"Interface functions","text":"","category":"section"},{"location":"dictvectors.html","page":"Dict vectors","title":"Dict vectors","text":"deposit!\nstorage\nfreeze\nlocalpart\napply_operator!\nsort_into_targets!\nworking_memory\nmapreduce\nsum_mutating!","category":"page"},{"location":"dictvectors.html#Rimu.Interfaces.deposit!","page":"Dict vectors","title":"Rimu.Interfaces.deposit!","text":"deposit!(w::InitiatorDVec, add, val, p_add=>p_val)\n\nAdd val into w at address add as an AbstractInitiatorValue.\n\n\n\n\n\ndeposit!(w::AbstractDVec, add, val, parent::Pair)\n\nAdd val into w at address add, taking into account initiator rules if applicable. parent contains the address => value pair from which the pair add => val was created. InitiatorDVec can intercept this and add its own functionality.\n\n\n\n\n\n","category":"function"},{"location":"dictvectors.html#Rimu.Interfaces.storage","page":"Dict vectors","title":"Rimu.Interfaces.storage","text":"storage(dvec) -> AbstractDict\n\nReturn the raw storage associated with dvec as an AbstractDict. Used in MPI communication.\n\n\n\n\n\n","category":"function"},{"location":"dictvectors.html#OrderedCollections.freeze","page":"Dict vectors","title":"OrderedCollections.freeze","text":"freeze(dv)\n\nCreate a \"frozen\" version of dv which can no longer be modified or used in the conventional manner, but supports faster dot products.\n\n\n\n\n\n","category":"function"},{"location":"dictvectors.html#Rimu.Interfaces.localpart","page":"Dict vectors","title":"Rimu.Interfaces.localpart","text":"localpart(dv) -> AbstractDVec\n\nGet the part of dv that is located on this MPI rank. Returns dv itself for vectors that can't be MPI distributed (DVecs and InitiatorDVecs).\n\n\n\n\n\n","category":"function"},{"location":"dictvectors.html#Rimu.Interfaces.apply_operator!","page":"Dict vectors","title":"Rimu.Interfaces.apply_operator!","text":"apply_operator!(working_memory, target, source, operator, boost=1, compress=Val(true)) ->\n    stat_names, stats, working_memory, target\n\nPerform a single matrix(/operator)-vector multiplication:\n\nv^(n + 1) = hatT v^(n) \n\nwhere hatT is the operator, v^(n+1) is the target and v^(n) is the source. The working_memory can be used as temporary storage.\n\nThe boost argument is passed to apply_column! and increases the number of spawns performed. For the operator to be applied without compressing the vector after, set compress to Val(false).\n\nWhether the operation is performed in a stochastic, semistochastic, or determistic way is controlled by the trait StochasticStyle(target). See StochasticStyle.\n\nReturns the step stats generated by the StochasticStyle, the working memory and the target vector. target and working_memory may be mutated and/or swapped.\n\n\n\n\n\n","category":"function"},{"location":"dictvectors.html#Rimu.Interfaces.sort_into_targets!","page":"Dict vectors","title":"Rimu.Interfaces.sort_into_targets!","text":"sort_into_targets!(target, source, stats) -> target, source, agg_stats\n\nAggregate coefficients from source to target and from stats to agg_stats according to thread- or MPI-level parallelism.\n\nReturns the new target and source, as the sorting process may involve swapping them.\n\n\n\n\n\n","category":"function"},{"location":"dictvectors.html#Rimu.Interfaces.working_memory","page":"Dict vectors","title":"Rimu.Interfaces.working_memory","text":"working_memory(dv::AbstractDVec)\n\nCreate a working memory instance compatible with dv. The working memory must be compatible with sort_into_targets! and apply_operator!.\n\n\n\n\n\n","category":"function"},{"location":"dictvectors.html#Base.mapreduce","page":"Dict vectors","title":"Base.mapreduce","text":"mapreduce(f, op, keys(::PDVec); [init])\nmapreduce(f, op, values(::PDVec); [init])\nmapreduce(f, op, pairs(::PDVec); [init])\n\nPerform a parallel reduction operation on PDVecs. MPI-compatible. Is used in the definition of various functions from Base such as reduce, sum, prod, etc.\n\ninit, if provided, must be a neutral element for op.\n\n\n\n\n\n","category":"function"},{"location":"dictvectors.html#Rimu.Interfaces.sum_mutating!","page":"Dict vectors","title":"Rimu.Interfaces.sum_mutating!","text":"sum_mutating!(accumulator, [f! = add!], keys(::PDVec); [init])\nsum_mutating!(accumulator, [f! = add!], values(::PDVec); [init])\nsum_mutating!(accumulator, [f! = add!], pairs(::PDVec); [init])\n\nPerform a parallel sum on PDVecs for vector-valued results while minimizing allocations. The result of the sum will be added to accumulator and stored in accumulator. MPI-compatible. If f! is provided, it must accept two arguments, the first being the accumulator and the second the element of the iterator. Otherwise,add! is used.\n\nIf provided, init must be a neutral element for + and of the same type as accumulator.\n\nSee also mapreduce.\n\n\n\n\n\nsum_mutating!(accumulator, [f! = add!], iterator)\n\nAdd the sum of elements in iterator to accumulator, storing the result in accumulator. If f! is provided, it must accept two arguments, the first being the accumulator and the second the element of the iterator. Otherwise, add! is used.\n\nSee also mapreduce.\n\n\n\n\n\n","category":"function"},{"location":"dictvectors.html#Supported-operations","page":"Dict vectors","title":"Supported operations","text":"","category":"section"},{"location":"dictvectors.html","page":"Dict vectors","title":"Dict vectors","text":"AbstractDVecs generally support most operations that are defined on Vectors and Dicts. This includes the interface from VectorInterface.jl, and many functions from the LinearAlgebra standard library.","category":"page"},{"location":"dictvectors.html","page":"Dict vectors","title":"Dict vectors","text":"A significant difference between AbstractDVecs, Vectors, and Dicts, is that iteration on them is disabled by default. Iteration must be explicitly performed on keys, values, or pairs, however, it is highly recommended you use mapreduce, reduce, or similar functions when performing reductions, as that will make the operations compatible with MPI.","category":"page"},{"location":"dictvectors.html","page":"Dict vectors","title":"Dict vectors","text":"In addition, Rimu defines the following function.","category":"page"},{"location":"dictvectors.html","page":"Dict vectors","title":"Dict vectors","text":"walkernumber\nwalkernumber_and_length\ndot_from_right","category":"page"},{"location":"dictvectors.html#Rimu.DictVectors.walkernumber","page":"Dict vectors","title":"Rimu.DictVectors.walkernumber","text":"walkernumber(v)\n\nCompute the number of walkers in v. It is used for updating the shift. Overload this function for modifying population control.\n\nIn most cases walkernumber(v) is identical to norm(v, 1). For AbstractDVecs with complex coefficients it reports the one norm separately for the real and the imaginary part as a ComplexF64. See Norm1ProjectorPPop.\n\n\n\n\n\n","category":"function"},{"location":"dictvectors.html#Rimu.DictVectors.walkernumber_and_length","page":"Dict vectors","title":"Rimu.DictVectors.walkernumber_and_length","text":"walkernumber_and_length(v)\n\nCompute walkernumber and length at the same time. When MPI is used, this is more efficient than calling them separately.\n\n\n\n\n\n","category":"function"},{"location":"dictvectors.html#Rimu.Interfaces.dot_from_right","page":"Dict vectors","title":"Rimu.Interfaces.dot_from_right","text":"dot_from_right(w, op::AbstractObservable, v)\n\nInternal function evaluates the 3-argument dot() function in order from right to left.\n\n\n\n\n\n","category":"function"},{"location":"dictvectors.html#Projectors","page":"Dict vectors","title":"Projectors","text":"","category":"section"},{"location":"dictvectors.html","page":"Dict vectors","title":"Dict vectors","text":"AbstractProjector\nNormProjector\nNorm2Projector\nUniformProjector\nNorm1ProjectorPPop\nRimu.DictVectors.FrozenDVec\nRimu.DictVectors.FrozenPDVec","category":"page"},{"location":"dictvectors.html#Rimu.DictVectors.AbstractProjector","page":"Dict vectors","title":"Rimu.DictVectors.AbstractProjector","text":"Abstract supertype for projectors to be used in in lieu of DVecs or Vectors in dot products. Implemented subtypes:\n\nUniformProjector\nNormProjector\nNorm2Projector\nNorm1ProjectorPPop\n\nSee also PostStepStrategy for use of projectors in ProjectorMonteCarloProblem.\n\nInterface\n\nDefine a method for LinearAlgebra.dot(projector, v).\n\n\n\n\n\n","category":"type"},{"location":"dictvectors.html#Rimu.DictVectors.NormProjector","page":"Dict vectors","title":"Rimu.DictVectors.NormProjector","text":"NormProjector() <: AbstractProjector\n\nResults in computing the one-norm when used in dot(). E.g.\n\ndot(NormProjector(),x)\n-> norm(x,1)\n\nNormProjector() thus represents the vector sign.(x).\n\nSee also PostStepStrategy, and AbstractProjector for use of projectors in ProjectorMonteCarloProblem.\n\n\n\n\n\n","category":"type"},{"location":"dictvectors.html#Rimu.DictVectors.Norm2Projector","page":"Dict vectors","title":"Rimu.DictVectors.Norm2Projector","text":"Norm2Projector() <: AbstractProjector\n\nResults in computing the two-norm when used in dot(). E.g.\n\ndot(NormProjector(),x)\n-> norm(x,2) # with type Float64\n\nSee also PostStepStrategy, and AbstractProjector for use of projectors in ProjectorMonteCarloProblem.\n\n\n\n\n\n","category":"type"},{"location":"dictvectors.html#Rimu.DictVectors.UniformProjector","page":"Dict vectors","title":"Rimu.DictVectors.UniformProjector","text":"UniformProjector() <: AbstractProjector\n\nRepresents a vector with all elements 1. To be used with dot(). Minimizes memory allocations.\n\nUniformProjector()⋅v == sum(v)\ndot(UniformProjector(), LO, v) == sum(LO*v)\n\nSee also PostStepStrategy, and AbstractProjector for use of projectors in ProjectorMonteCarloProblem.\n\n\n\n\n\n","category":"type"},{"location":"dictvectors.html#Rimu.DictVectors.Norm1ProjectorPPop","page":"Dict vectors","title":"Rimu.DictVectors.Norm1ProjectorPPop","text":"Norm1ProjectorPPop() <: AbstractProjector\n\nResults in computing the one-norm per population when used in dot(). E.g.\n\ndot(Norm1ProjectorPPop(),x)\n-> norm(real.(x),1) + im*norm(imag.(x),1)\n\nSee also PostStepStrategy, and AbstractProjector for use of projectors in ProjectorMonteCarloProblem.\n\n\n\n\n\n","category":"type"},{"location":"dictvectors.html#Rimu.DictVectors.FrozenDVec","page":"Dict vectors","title":"Rimu.DictVectors.FrozenDVec","text":"FrozenDVec\n\nA frozen DVec(s) can't be modified or used in the conventional manner, but support faster dot products. See: freeze.\n\n\n\n\n\n","category":"type"},{"location":"dictvectors.html#Rimu.DictVectors.FrozenPDVec","page":"Dict vectors","title":"Rimu.DictVectors.FrozenPDVec","text":"FrozenPDVec\n\nParallel version of FrozenDVec. See: freeze, PDVec.\n\n\n\n\n\n","category":"type"},{"location":"dictvectors.html#Initiator-rules","page":"Dict vectors","title":"Initiator rules","text":"","category":"section"},{"location":"dictvectors.html","page":"Dict vectors","title":"Dict vectors","text":"Rimu.DictVectors.InitiatorRule\nRimu.DictVectors.AbstractInitiatorValue\nRimu.DictVectors.InitiatorValue\nRimu.DictVectors.initiator_valtype\nRimu.DictVectors.to_initiator_value\nRimu.DictVectors.from_initiator_value\nRimu.DictVectors.Initiator\nRimu.DictVectors.SimpleInitiator\nRimu.DictVectors.CoherentInitiator\nRimu.DictVectors.NonInitiator\nRimu.DictVectors.NonInitiatorValue","category":"page"},{"location":"dictvectors.html#Rimu.DictVectors.InitiatorRule","page":"Dict vectors","title":"Rimu.DictVectors.InitiatorRule","text":"InitiatorRule{V}\n\nAbstract type for defining initiator rules for InitiatorDVec. Concrete implementations:\n\nInitiator\nSimpleInitiator\nCoherentInitiator\nNonInitiator\n\nExtended Help\n\nInitiatorRules define how to store and retrieve data from associated AbstractInitiatorValues. When defining a new InitiatorRule, also define the following:\n\ninitiator_valtype\nfrom_initiator_value\nto_initiator_value\n\n\n\n\n\n","category":"type"},{"location":"dictvectors.html#Rimu.DictVectors.AbstractInitiatorValue","page":"Dict vectors","title":"Rimu.DictVectors.AbstractInitiatorValue","text":"abstract type AbstractInitiatorValue{V}\n\nA value equipped with additional information that enables a variation of the initiator approximation. To be used with PDVec, InitiatorDVec and InitiatorRules.\n\nMust define:\n\nBase.zero, Base.:+, Base.:-, Base.:*\nfrom_initiator_value and to_initiator_value\n\n\n\n\n\n","category":"type"},{"location":"dictvectors.html#Rimu.DictVectors.InitiatorValue","page":"Dict vectors","title":"Rimu.DictVectors.InitiatorValue","text":"InitiatorValue{V}(; safe::V, unsafe::V, initiator::V) where V\n\nComposite \"walker\" with three fields. For use with InitiatorDVecs.\n\n\n\n\n\n","category":"type"},{"location":"dictvectors.html#Rimu.DictVectors.initiator_valtype","page":"Dict vectors","title":"Rimu.DictVectors.initiator_valtype","text":"initiator_valtype(rule::InitiatorRule, T)\n\nReturn the AbstractInitiatorValue{T} that is employed by the rule.\n\n\n\n\n\n","category":"function"},{"location":"dictvectors.html#Rimu.DictVectors.to_initiator_value","page":"Dict vectors","title":"Rimu.DictVectors.to_initiator_value","text":"to_initiator_value(::InitiatorRule, k::K, v::V, parent)\n\nConvert v to an AbstractInitiatorValue, taking the initiator rule and the parent that spawned it into account.\n\n\n\n\n\n","category":"function"},{"location":"dictvectors.html#Rimu.DictVectors.from_initiator_value","page":"Dict vectors","title":"Rimu.DictVectors.from_initiator_value","text":"from_initiator_value(i::InitiatorRule, v::AbstractInitiatorValue)\n\nConvert the AbstractInitiatorValue v into a scalar value according to the InitiatorRule i.\n\n\n\n\n\n","category":"function"},{"location":"dictvectors.html#Rimu.DictVectors.Initiator","page":"Dict vectors","title":"Rimu.DictVectors.Initiator","text":"Initiator(threshold = 1.0) <: InitiatorRule\n\nInitiator rule to be passed to PDVec or InitiatorDVec. An initiator is a configuration add with a coefficient with magnitude abs(v[add]) > threshold. The threshold can be passed as a keyword argument. Rules:\n\nInitiators can spawn anywhere.\nNon-initiators can spawn to initiators.\n\nSee InitiatorRule.\n\n\n\n\n\n","category":"type"},{"location":"dictvectors.html#Rimu.DictVectors.SimpleInitiator","page":"Dict vectors","title":"Rimu.DictVectors.SimpleInitiator","text":"SimpleInitiator(threshold = 1.0) <: InitiatorRule\n\nInitiator rule to be passed to PDVec or InitiatorDVec. An initiator is a configuration add with a coefficient with magnitude abs(v[add]) > threshold. The threshold can be passed as a keyword argument. Rules:\n\nInitiators can spawn anywhere.\nNon-initiators cannot spawn.\n\nSee InitiatorRule.\n\n\n\n\n\n","category":"type"},{"location":"dictvectors.html#Rimu.DictVectors.CoherentInitiator","page":"Dict vectors","title":"Rimu.DictVectors.CoherentInitiator","text":"CoherentInitiator(threshold = 1.0) <: InitiatorRule\n\nInitiator rule to be passed to PDVec or InitiatorDVec. An initiator is a configuration add with a coefficient with magnitude abs(v[add]) > threshold. The threshold can be passed as a keyword argument. Rules:\n\nInitiators can spawn anywhere.\nNon-initiators can spawn to initiators.\nMultiple non-initiators can spawn to a single non-initiator if their contributions add up to a value greater than the initiator threshold.\n\nSee InitiatorRule.\n\n\n\n\n\n","category":"type"},{"location":"dictvectors.html#Rimu.DictVectors.NonInitiator","page":"Dict vectors","title":"Rimu.DictVectors.NonInitiator","text":"NonInitiator() <: InitiatorRule\n\nInitiator rule that disables the approximation. This is the default setting for PDVec.\n\nSee InitiatorRule.\n\n\n\n\n\n","category":"type"},{"location":"dictvectors.html#Rimu.DictVectors.NonInitiatorValue","page":"Dict vectors","title":"Rimu.DictVectors.NonInitiatorValue","text":"NonInitiatorValue{V}\n\nValue that does not contain any additional information - used with NonInitiator, the default initiator rule for PDVec.\n\n\n\n\n\n","category":"type"},{"location":"dictvectors.html#PDVec-internals","page":"Dict vectors","title":"PDVec internals","text":"","category":"section"},{"location":"dictvectors.html#Working-memory","page":"Dict vectors","title":"Working memory","text":"","category":"section"},{"location":"dictvectors.html","page":"Dict vectors","title":"Dict vectors","text":"Modules = [DictVectors]\nPages = [\"pdworkingmemory.jl\"]","category":"page"},{"location":"dictvectors.html#Rimu.DictVectors.FirstColumnIterator","page":"Dict vectors","title":"Rimu.DictVectors.FirstColumnIterator","text":"FirstColumnIterator{W,D} <: AbstractVector{D}\n\nIterates segments in the first column of a working memory that belong to a specified rank.\n\nSee PDWorkingMemory, remote_segments and local_segments.\n\n\n\n\n\n","category":"type"},{"location":"dictvectors.html#Rimu.DictVectors.PDWorkingMemory","page":"Dict vectors","title":"Rimu.DictVectors.PDWorkingMemory","text":"PDWorkingMemory(t::PDVec)\n\nThe working memory that handles threading and MPI distribution for operations that involve operators, such as FCIQMC propagation, operator-vector multiplication and three-way dot products with PDVecs.\n\nThe working memory is structured as a two-dimensional array of segments, which themselves are Dicts (see PDVec). The number of rows in this array is equal to the number of segments across all MPI ranks (covering the entire address space), while the number of columns corresponds to the number of segments in the current MPI rank (i.e. column corresponds to the part of the address space that is local to the current rank).\n\nThe purpose of this organisation is to allow spawning in parallel without using locks or atomic operations. The spawning is performed by applying the following sequence of operations:\n\nperform_spawns!: each segment in the PDVec is multiplied by the operator independently, with the results being stored in a column of the working memory.\ncollect_local!: the rows of the working memory are summed to the first column.\nsynchronize_remote!: the segments corresponding to other MPI ranks are distributed and transferred to the first column.\nmove_and_compress!: the results are stochastically compressed and moved to the result PDVec\n\nWhen used with three-argument dot products, a full copy of the left-hand side vector is materialized in the first column of the working memory on all ranks.\n\n\n\n\n\n","category":"type"},{"location":"dictvectors.html#Rimu.DictVectors.PDWorkingMemoryColumn","page":"Dict vectors","title":"Rimu.DictVectors.PDWorkingMemoryColumn","text":"PDWorkingMemoryColumn\n\nA column in PDWorkingMemory. Supports getindex, deposit! and StochasticStyle and acts as a target for spawning. Can be used as a target in a three-way dot-product.\n\n\n\n\n\n","category":"type"},{"location":"dictvectors.html#Rimu.DictVectors.collect_local!-Tuple{PDWorkingMemory}","page":"Dict vectors","title":"Rimu.DictVectors.collect_local!","text":"collect_local!(w::PDWorkingMemory)\n\nSum each row in w and store the result in the first column. This step must be performed before using local_segments or remote_segments to move the values elsewhere.\n\nSee PDWorkingMemory.\n\n\n\n\n\n","category":"method"},{"location":"dictvectors.html#Rimu.DictVectors.first_column-Union{Tuple{PDWorkingMemory{K, V, W, S}}, Tuple{S}, Tuple{W}, Tuple{V}, Tuple{K}} where {K, V, W, S}","page":"Dict vectors","title":"Rimu.DictVectors.first_column","text":"first_column(::PDWorkingMemory)\n\nReturn the first column of the working memory. This is where the vectors are collected with collect_local!, synchronize_remote!, copy_to_local!.\n\nSee PDWorkingMemory.\n\n\n\n\n\n","category":"method"},{"location":"dictvectors.html#Rimu.DictVectors.local_segments-Tuple{PDWorkingMemory}","page":"Dict vectors","title":"Rimu.DictVectors.local_segments","text":"local_segments(w::PDWorkingMemory)\n\nReturns iterator over the segments in the first column of w on the current rank. Iterates Dicts.\n\nSee PDWorkingMemory.\n\n\n\n\n\n","category":"method"},{"location":"dictvectors.html#Rimu.DictVectors.move_and_compress!-Tuple{PDVec, PDWorkingMemory}","page":"Dict vectors","title":"Rimu.DictVectors.move_and_compress!","text":"move_and_compress!(dst::PDVec, src::PDWorkingMemory)\nmove_and_compress!(::CompressionStrategy, dst::PDVec, src::PDWorkingMemory)\n\nMove the values in src to dst, compressing the according to the CompressionStrategy on the way. This step can only be performed after collect_local! and synchronize_remote!.\n\nSee PDWorkingMemory.\n\n\n\n\n\n","category":"method"},{"location":"dictvectors.html#Rimu.DictVectors.num_columns-Tuple{PDWorkingMemory}","page":"Dict vectors","title":"Rimu.DictVectors.num_columns","text":"num_columns(w::PDWorkingMemory) -> Int\n\nNumber of columns in the working memory. The number of rows is equal to the number of segments in the local MPI rank.\n\nSee PDWorkingMemory.\n\n\n\n\n\n","category":"method"},{"location":"dictvectors.html#Rimu.DictVectors.num_rows-Tuple{PDWorkingMemory}","page":"Dict vectors","title":"Rimu.DictVectors.num_rows","text":"num_rows(w::PDWorkingMemory) -> Int\n\nNumber of rows in the working memory. The number of rows is equal to the number of segments accross all MPI ranks.\n\nSee PDWorkingMemory.\n\n\n\n\n\n","category":"method"},{"location":"dictvectors.html#Rimu.DictVectors.perform_spawns!-Tuple{PDWorkingMemory, PDVec, Any, Any}","page":"Dict vectors","title":"Rimu.DictVectors.perform_spawns!","text":"perform_spawns!(w::PDWorkingMemory, v::PDVec, ham, boost)\n\nPerform spawns from v through ham to w. boost increases the number of spawns without affecting the expectation value of the process.\n\nSee PDVec and PDWorkingMemory.\n\n\n\n\n\n","category":"method"},{"location":"dictvectors.html#Rimu.DictVectors.remote_segments-Tuple{PDWorkingMemory, Any}","page":"Dict vectors","title":"Rimu.DictVectors.remote_segments","text":"remote_segments(w::PDWorkingMemory, rank_id)\n\nReturns iterator over the segments in the first column of w that belong to rank rank_id. Iterates Dicts.\n\nSee PDWorkingMemory.\n\n\n\n\n\n","category":"method"},{"location":"dictvectors.html#Rimu.DictVectors.synchronize_remote!-Tuple{PDWorkingMemory}","page":"Dict vectors","title":"Rimu.DictVectors.synchronize_remote!","text":"synchronize_remote!([::Communicator,] w::PDWorkingMemory) -> names, values\n\nSynchronize non-local segments across MPI and add the results to the first column. Controlled by the Communicator. This can only be perfomed after collect_local!.\n\nShould return a Tuple of names and a Tuple of values to report.\n\nSee PDWorkingMemory.\n\n\n\n\n\n","category":"method"},{"location":"dictvectors.html#Communicators","page":"Dict vectors","title":"Communicators","text":"","category":"section"},{"location":"dictvectors.html","page":"Dict vectors","title":"Dict vectors","text":"Modules = [DictVectors]\nPages = [\"communicators.jl\"]","category":"page"},{"location":"dictvectors.html#Rimu.DictVectors.AllToAll","page":"Dict vectors","title":"Rimu.DictVectors.AllToAll","text":"AllToAll{K,V}(; mpi_comm, n_segments, report) <: Communicator\n\nCommunicator that uses collective communication using MPI.Alltoall[v]!.\n\nKeyword arguments\n\nmpi_comm=MPI.COMM_WORLD: the MPI communicator to use.\nn_segments=Threads.nthreads(): the number of segments per rank to use. Should match the PDVec the communicator is used with.\nreport=false: if set to true, report MPI communication times during a projector Monte Carlo run.\n\nSee also: Communicator.\n\n\n\n\n\n","category":"type"},{"location":"dictvectors.html#Rimu.DictVectors.Communicator","page":"Dict vectors","title":"Rimu.DictVectors.Communicator","text":"abstract type Communicator\n\nCommunicators are used to handle MPI communication when using PDVecs. Currently, three implementations are provided, NotDistributed, AllToAll and PointToPoint. The communicator is picked automatically according to the number of MPI ranks available.\n\nWhen implementing a communicator, use local_segments and remote_segments.\n\nInterface\n\nsynchronize_remote!\nmpi_rank\nmpi_size\nmpi_comm\n\nOptional interface\n\nis_distributed: defaults to returning true.\nmerge_remote_reductions: defaults to using MPI.Allreduce.\ntotal_num_segments: defaults to n * mpi_size.\ntarget_segment: defaults to selecting using fastrange  to pick the segment.\n\nSee also: PDVec, PDWorkingMemory.\n\n\n\n\n\n","category":"type"},{"location":"dictvectors.html#Rimu.DictVectors.LocalPart","page":"Dict vectors","title":"Rimu.DictVectors.LocalPart","text":"LocalPart <: Communicator\n\nWhen localpart is used, the vector's Communicator is replaced with this. This allows iteration and local reductions.\n\n\n\n\n\n","category":"type"},{"location":"dictvectors.html#Rimu.DictVectors.NestedSegmentedBuffer","page":"Dict vectors","title":"Rimu.DictVectors.NestedSegmentedBuffer","text":"NestedSegmentedBuffer{T}(nrows) <: AbstractMatrix{AbstractVector{T}}\n\nMatrix of vectors stored in a single buffer with collective MPI communication support. The number of rows in the matrix is fixed to nrows.\n\nUsed in the AllToAll communication strategy, where each column corresponds to an MPI rank and each row corresponds to a segment in the PDVec.\n\nSupported operations\n\nappend_collections!: add a column to the matrix.\nappend_empty_column!: add an empty column to the matrix.\nmpi_exchange_alltoall!: each rank sends the i-th column of the matrix to the (i-1)-st rank.\nmpi_exchange_allgather!: each rank sends the 1-st column of the matrix to all ranks.\n\nSee also: SegmentedBuffer.\n\n\n\n\n\n","category":"type"},{"location":"dictvectors.html#Rimu.DictVectors.NotDistributed","page":"Dict vectors","title":"Rimu.DictVectors.NotDistributed","text":"NotDistributed <: Communicator\n\nThis Communicator is used when MPI is not available.\n\n\n\n\n\n","category":"type"},{"location":"dictvectors.html#Rimu.DictVectors.PointToPoint","page":"Dict vectors","title":"Rimu.DictVectors.PointToPoint","text":"PointToPoint{K,V}(; mpi_comm, report) <: Communicator\n\nMPI Communicator that uses circular communication using MPI.Isend and MPI.Recv!.\n\nKeyword arguments\n\nmpi_comm=MPI.COMM_WORLD: the MPI communicator to use.\nreport=false: if set to true, report MPI communication times during a projector Monte Carlo run.\n\n\n\n\n\n","category":"type"},{"location":"dictvectors.html#Rimu.DictVectors.SegmentedBuffer","page":"Dict vectors","title":"Rimu.DictVectors.SegmentedBuffer","text":"SegmentedBuffer{T}() <: AbstractVector{AbstractVector{T}}\n\nBehaves like a vector of vectors, but is stored in a single buffer. It can be sent/received over MPI keeping its structure intact. Used in the PointToPoint communication strategy.\n\nSupported operations\n\nreplace_collections!: insert data into the buffers\nmpi_send: send the contents of a buffer to a given rank\nmpi_recv_any!: receive a message sent by mpi_send from any rank, storing the contents in this buffer\n\nSee also: NestedSegmentedBuffer.\n\n\n\n\n\n","category":"type"},{"location":"dictvectors.html#Rimu.DictVectors.append_collections!-Tuple{Rimu.DictVectors.NestedSegmentedBuffer, Any}","page":"Dict vectors","title":"Rimu.DictVectors.append_collections!","text":"append_collections!(buf::NestedSegmentedBuffer, iters)\n\nAdd a column to buf. The length of iters should match buf.nrows.\n\nSee also: NestedSegmentedBuffer, append_empty_column!.\n\n\n\n\n\n","category":"method"},{"location":"dictvectors.html#Rimu.DictVectors.append_empty_column!-Tuple{Rimu.DictVectors.NestedSegmentedBuffer}","page":"Dict vectors","title":"Rimu.DictVectors.append_empty_column!","text":"append_empty_column!(buf::NestedSegmentedBuffer)\n\nLike append_collections!, but adds an empty column.\n\nSee also: NestedSegmentedBuffer, append_collections!.\n\n\n\n\n\n","category":"method"},{"location":"dictvectors.html#Rimu.DictVectors.copy_to_local!","page":"Dict vectors","title":"Rimu.DictVectors.copy_to_local!","text":"copy_to_local!([::Communicator,] w::PDWorkingMemory, t::PDVec) -> PDVec\n\nCopy pairs in t from all ranks and return them as a (possibly) new PDVec, possibly using the PDWorkingMemory as temporary storage.\n\nSee also: PDVec, PDWorkingMemory, Communicator.\n\n\n\n\n\n","category":"function"},{"location":"dictvectors.html#Rimu.DictVectors.is_distributed-Tuple{Rimu.DictVectors.Communicator}","page":"Dict vectors","title":"Rimu.DictVectors.is_distributed","text":"is_distributed(::Communicator)\n\nReturn true if Communicator operates over MPI.\n\n\n\n\n\n","category":"method"},{"location":"dictvectors.html#Rimu.DictVectors.merge_remote_reductions-Tuple{Rimu.DictVectors.Communicator, Any, Any}","page":"Dict vectors","title":"Rimu.DictVectors.merge_remote_reductions","text":"merge_remote_reductions(c::Communicator, op, x)\n\nMerge the results of reductions over MPI. By default, it uses MPI.Allreduce.\n\nSee also: Communicator.\n\n\n\n\n\n","category":"method"},{"location":"dictvectors.html#Rimu.DictVectors.mpi_exchange_allgather!-Tuple{Rimu.DictVectors.NestedSegmentedBuffer, Rimu.DictVectors.NestedSegmentedBuffer, Any}","page":"Dict vectors","title":"Rimu.DictVectors.mpi_exchange_allgather!","text":"mpi_exchange_allgather!(src::NestedSegmentedBuffer, dst::NestedSegmentedBuffer, comm)\n\nThe first and only column in src will be sent to all ranks. The data from all ranks will be gethered in dst. After this operation, dst will contain the same data on all ranks.\n\nSee also NestedSegmentedBuffer, mpi_exchange_alltoall!.\n\n\n\n\n\n","category":"method"},{"location":"dictvectors.html#Rimu.DictVectors.mpi_exchange_alltoall!-Tuple{Rimu.DictVectors.NestedSegmentedBuffer, Rimu.DictVectors.NestedSegmentedBuffer, Any}","page":"Dict vectors","title":"Rimu.DictVectors.mpi_exchange_alltoall!","text":"mpi_exchange_alltoall!(src::NestedSegmentedBuffer, dst::NestedSegmentedBuffer, comm)\n\nThe n-th column from src will be sent to rank n-1. The data sent from rank r will be stored in the (r+1)-st column of dst.\n\nSee also: NestedSegmentedBuffer, mpi_exchange_allgather!.\n\n\n\n\n\n","category":"method"},{"location":"dictvectors.html#Rimu.DictVectors.mpi_recv_any!-Tuple{Rimu.DictVectors.SegmentedBuffer, Any}","page":"Dict vectors","title":"Rimu.DictVectors.mpi_recv_any!","text":"mpi_recv_any!(buf::SegmentedBuffer, comm::MPI_Comm) -> Int\n\nFind a source that is ready to send a buffer and receive from it. Return the rank ID of the sender.\n\n\n\n\n\n","category":"method"},{"location":"dictvectors.html#Rimu.DictVectors.mpi_send-Tuple{Rimu.DictVectors.SegmentedBuffer, Any, Any}","page":"Dict vectors","title":"Rimu.DictVectors.mpi_send","text":"mpi_send(buf::SegmentedBuffer, dest, comm::MPI.Comm)\n\nSend the buffer to rank with id dest.\n\n\n\n\n\n","category":"method"},{"location":"dictvectors.html#Rimu.DictVectors.replace_collections!-Tuple{Rimu.DictVectors.SegmentedBuffer, Any}","page":"Dict vectors","title":"Rimu.DictVectors.replace_collections!","text":"replace_collections!(buf::SegmentedBuffer, iters)\n\nInsert collections in iters into a SegmentedBuffer.\n\njulia> using Rimu.DictVectors: SegmentedBuffer\n\njulia> buf = SegmentedBuffer{Int}()\n0-element SegmentedBuffer{Int64}\n\njulia> Rimu.DictVectors.replace_collections!(buf, [[1,2,3], [4,5]])\n2-element SegmentedBuffer{Int64}:\n [1, 2, 3]\n [4, 5]\n\njulia> Rimu.DictVectors.replace_collections!(buf, [[1], [2,3], [4]])\n3-element SegmentedBuffer{Int64}:\n [1]\n [2, 3]\n [4]\n\n\n\n\n\n","category":"method"},{"location":"dictvectors.html#Rimu.DictVectors.target_segment-Tuple{Rimu.DictVectors.Communicator, Any, Any}","page":"Dict vectors","title":"Rimu.DictVectors.target_segment","text":"target_segment(c::Communicator, k, num_segments) -> target, is_local\n\nThis function is used to determine where in the PDVec a key should be stored. If the key is local (stored on the same MPI rank), return its segment index and true. If the key is non-local, return any value and false.\n\nSee also: PDVec, Communicator.\n\n\n\n\n\n","category":"method"},{"location":"dictvectors.html#Rimu.DictVectors.total_num_segments-Tuple{Rimu.DictVectors.Communicator, Any}","page":"Dict vectors","title":"Rimu.DictVectors.total_num_segments","text":"total_num_segments(c::Communicator, n) -> Int\n\nReturn the total number of segments, including the remote ones, where n is number of local segments.\n\nSee also: PDVec, Communicator.\n\n\n\n\n\n","category":"method"},{"location":"dictvectors.html#Rimu.mpi_comm","page":"Dict vectors","title":"Rimu.mpi_comm","text":"mpi_comm(::Communicator) -> MPI.Comm\n\nReturn the MPI.Comm that the Communicator operates on.\n\n\n\n\n\n","category":"function"},{"location":"dictvectors.html#Rimu.mpi_rank","page":"Dict vectors","title":"Rimu.mpi_rank","text":"mpi_rank(::Communicator) -> Int\n\nReturn the MPI rank of the Communicator.\n\n\n\n\n\n","category":"function"},{"location":"dictvectors.html#Rimu.mpi_size","page":"Dict vectors","title":"Rimu.mpi_size","text":"mpi_size(::Communicator) -> Int\n\nReturn the total number of MPI ranks in the Communicator.\n\n\n\n\n\n","category":"function"},{"location":"dictvectors.html#Index","page":"Dict vectors","title":"Index","text":"","category":"section"},{"location":"dictvectors.html","page":"Dict vectors","title":"Dict vectors","text":"Pages   = [\"dictvectors.md\"]","category":"page"},{"location":"custom_hamiltonians.html#Advanced-operator-usage-and-custom-Hamiltonians","page":"Custom Hamiltonians","title":"Advanced operator usage and custom Hamiltonians","text":"","category":"section"},{"location":"custom_hamiltonians.html","page":"Custom Hamiltonians","title":"Custom Hamiltonians","text":"Rimu can be used to work with custom Hamiltonians and observables that are user-defined and  not part of the Rimu.jl package. To make this possible and reliable, Rimu exposes a number   of interfaces and provides helper functions to test compliance with the interfaces through the   submodule Rimu.InterfaceTests, see Interface tests. This section covers the  relevant interfaces, the interface functions as well as potentially useful helper functions.","category":"page"},{"location":"custom_hamiltonians.html","page":"Custom Hamiltonians","title":"Custom Hamiltonians","text":"In order to define custom Hamiltonians or observables it is useful to know how the operator   type hierarchy works in Rimu. For an example of how to implement custom Hamiltonians that   are not part of the Rimu.jl package, see   RimuLegacyHamiltonians.jl.","category":"page"},{"location":"custom_hamiltonians.html#Operator-type-hierarchy","page":"Custom Hamiltonians","title":"Operator type hierarchy","text":"","category":"section"},{"location":"custom_hamiltonians.html","page":"Custom Hamiltonians","title":"Custom Hamiltonians","text":"Rimu offers a hierarchy of abstract types that define interfaces with different requirements for operators:","category":"page"},{"location":"custom_hamiltonians.html","page":"Custom Hamiltonians","title":"Custom Hamiltonians","text":"AbstractHamiltonian <: AbstractOperator <: AbstractObservable","category":"page"},{"location":"custom_hamiltonians.html","page":"Custom Hamiltonians","title":"Custom Hamiltonians","text":"The different abstract types have different requirements and are meant to be used for different purposes. ","category":"page"},{"location":"custom_hamiltonians.html","page":"Custom Hamiltonians","title":"Custom Hamiltonians","text":"AbstractHamiltonians are fully featured models that define a Hilbert space and a linear operator over a scalar field. They can be passed as a Hamiltonian into ProjectorMonteCarloProblem or ExactDiagonalizationProblem.\nAbstractOperator and AbstractObservable are supertypes of AbstractHamiltonian with less stringent conditions. They are useful for defining observables that can be used in a three-way dot product, or passed as observables into a ReplicaStrategy that can be inserted with the keyword replica_strategy into a ProjectorMonteCarloProblem.","category":"page"},{"location":"custom_hamiltonians.html#Hamiltonians-interface","page":"Custom Hamiltonians","title":"Hamiltonians interface","text":"","category":"section"},{"location":"custom_hamiltonians.html","page":"Custom Hamiltonians","title":"Custom Hamiltonians","text":"Behind the implementation of a particular model is a more abstract interface for defining Hamiltonians. If you want to define a new model you should make use of this interface. A new  model Hamiltonian should subtype to AbstractHamiltonian and implement the relevant methods.","category":"page"},{"location":"custom_hamiltonians.html","page":"Custom Hamiltonians","title":"Custom Hamiltonians","text":"AbstractHamiltonian\noffdiagonals\ndiagonal_element\nstarting_address","category":"page"},{"location":"custom_hamiltonians.html#Rimu.Interfaces.AbstractHamiltonian","page":"Custom Hamiltonians","title":"Rimu.Interfaces.AbstractHamiltonian","text":"AbstractHamiltonian{T} <: AbstractOperator{T}\n\nSupertype that provides an interface for linear operators over a linear space with scalar type T that are suitable for FCIQMC (with ProjectorMonteCarloProblem). Indexing is done with addresses (typically not integers) from an address space that may be large (and will not need to be completely generated).\n\nAbstractHamiltonian instances operate on vectors of type AbstractDVec from the module DictVectors and work well with addresses of type AbstractFockAddress from the module BitStringAddresses. The type works well with the external package KrylovKit.jl.\n\nFor available implementations see Hamiltonians.\n\nInterface\n\nBasic interface methods to implement:\n\nstarting_address(::AbstractHamiltonian)\ndiagonal_element(::AbstractHamiltonian, address)\nnum_offdiagonals(::AbstractHamiltonian, address)\nget_offdiagonal(::AbstractHamiltonian, address, chosen::Integer) (optional, see   below)\n\nOptional additional methods to implement:\n\nLOStructure(::Type{typeof(lo)}): defaults to AdjointUnknown\ndimension(::AbstractHamiltonian, addr): defaults to dimension of address space\nallows_address_type(h::AbstractHamiltonian, type): defaults to type :< typeof(starting_address(h))\nmomentum(::AbstractHamiltonian): no default\n\nProvides the following functions and methods:\n\noffdiagonals: iterator over reachable off-diagonal matrix elements\nrandom_offdiagonal: function to generate random off-diagonal matrix element\n*(H, v): deterministic matrix-vector multiply (allocating)\nH(v): equivalent to H * v.\nmul!(w, H, v): mutating matrix-vector multiply.\ndot(x, H, v): compute x⋅(H*v) minimizing allocations.\nH[address1, address2]: indexing with getindex() - mostly for testing purposes (slow!)\nBasisSetRepresentation: construct a basis set repesentation\nsparse, Matrix: construct a (sparse) matrix representation\n\nAlternatively to the above, offdiagonals can be implemented instead of get_offdiagonal. Sometimes this can be done efficiently. In this case num_offdiagonals should provide an upper bound on the number of elements obtained when iterating offdiagonals.\n\nSee also Hamiltonians, Interfaces, AbstractOperator, AbstractObservable.\n\n\n\n\n\n","category":"type"},{"location":"custom_hamiltonians.html#Rimu.Interfaces.offdiagonals","page":"Custom Hamiltonians","title":"Rimu.Interfaces.offdiagonals","text":"offdiagonals(h::AbstractHamiltonian, address)\n\nReturn an iterator over nonzero off-diagonal matrix elements of h in the same column as address. Will iterate over pairs (newaddress, matrixelement).\n\nExample\n\njulia> address = BoseFS(3,2,1);\n\n\njulia> H = HubbardReal1D(address);\n\n\njulia> h = offdiagonals(H, address)\n6-element Rimu.Hamiltonians.Offdiagonals{BoseFS{6, 3, BitString{8, 1, UInt8}}, Float64, HubbardReal1D{Float64, BoseFS{6, 3, BitString{8, 1, UInt8}}, 1.0, 1.0}}:\n (fs\"|2 3 1⟩\", -3.0)\n (fs\"|2 2 2⟩\", -2.449489742783178)\n (fs\"|3 1 2⟩\", -2.0)\n (fs\"|4 1 1⟩\", -2.8284271247461903)\n (fs\"|4 2 0⟩\", -2.0)\n (fs\"|3 3 0⟩\", -1.7320508075688772)\n\nPart of the AbstractHamiltonian interface.\n\nExtemded help\n\noffdiagonals return and iterator of type <:AbstractOffdiagonals. It defaults to returning Offdiagonals(h, a)\n\nSee also Offdiagonals, AbstractOffdiagonals.\n\n\n\n\n\n","category":"function"},{"location":"custom_hamiltonians.html#Rimu.Interfaces.diagonal_element","page":"Custom Hamiltonians","title":"Rimu.Interfaces.diagonal_element","text":"diagonal_element(ham, address)\n\nCompute the diagonal matrix element of the linear operator ham at address address.\n\nExample\n\njulia> address = BoseFS((3, 2, 1));\n\n\njulia> H = HubbardMom1D(address);\n\n\njulia> diagonal_element(H, address)\n8.666666666666664\n\nPart of the AbstractHamiltonian interface.\n\n\n\n\n\n","category":"function"},{"location":"custom_hamiltonians.html#Rimu.Interfaces.starting_address","page":"Custom Hamiltonians","title":"Rimu.Interfaces.starting_address","text":"starting_address(h)\n\nReturn the starting address for Hamiltonian h. When called on an AbstractMatrix, starting_address returns the index of the lowest diagonal element.\n\nExample\n\njulia> address = BoseFS((3, 2, 1));\n\n\njulia> H = HubbardMom1D(address);\n\n\njulia> address == starting_address(H)\ntrue\n\nPart of the AbstractHamiltonian interface.\n\n\n\n\n\n","category":"function"},{"location":"custom_hamiltonians.html","page":"Custom Hamiltonians","title":"Custom Hamiltonians","text":"The following functions may be implemented instead of offdiagonals.","category":"page"},{"location":"custom_hamiltonians.html","page":"Custom Hamiltonians","title":"Custom Hamiltonians","text":"num_offdiagonals\nget_offdiagonal","category":"page"},{"location":"custom_hamiltonians.html#Rimu.Interfaces.num_offdiagonals","page":"Custom Hamiltonians","title":"Rimu.Interfaces.num_offdiagonals","text":"num_offdiagonals(ham, address)\n\nCompute the number of number of reachable configurations from address address.\n\nExample\n\njulia> address = BoseFS((3, 2, 1));\n\n\njulia> H = HubbardMom1D(address);\n\n\njulia> num_offdiagonals(H, address)\n10\n\nPart of the AbstractHamiltonian interface.\n\n\n\n\n\n","category":"function"},{"location":"custom_hamiltonians.html#Rimu.Interfaces.get_offdiagonal","page":"Custom Hamiltonians","title":"Rimu.Interfaces.get_offdiagonal","text":"newadd, me = get_offdiagonal(ham, address, chosen)\n\nCompute value me and new address newadd of a single (off-diagonal) matrix element in a Hamiltonian ham. The off-diagonal element is in the same column as address address and is indexed by integer index chosen.\n\nExample\n\njulia> addr = BoseFS(3, 2, 1);\n\njulia> H = HubbardMom1D(addr);\n\njulia> get_offdiagonal(H, addr, 3)\n(BoseFS{6,3}(2, 1, 3), 1.0)\n\nPart of the AbstractHamiltonian interface.\n\n\n\n\n\n","category":"function"},{"location":"custom_hamiltonians.html","page":"Custom Hamiltonians","title":"Custom Hamiltonians","text":"The following functions come with default implementations, but may be customized.","category":"page"},{"location":"custom_hamiltonians.html","page":"Custom Hamiltonians","title":"Custom Hamiltonians","text":"random_offdiagonal\nHamiltonians.LOStructure\ndimension\nhas_adjoint\nallows_address_type\nBase.eltype\nVectorInterface.scalartype\nmul!","category":"page"},{"location":"custom_hamiltonians.html#Rimu.Interfaces.random_offdiagonal","page":"Custom Hamiltonians","title":"Rimu.Interfaces.random_offdiagonal","text":"random_offdiagonal(offdiagonals::AbstractOffdiagonals)\nrandom_offdiagonal(ham::AbstractHamiltonian, address)\n-> newaddress, probability, matrixelement\n\nGenerate a single random excitation, i.e. choose from one of the accessible off-diagonal elements in the column corresponding to address in the Hamiltonian matrix represented by ham. Alternatively, pass as argument an iterator over the accessible matrix elements.\n\nPart of the AbstractHamiltonian interface.\n\n\n\n\n\n","category":"function"},{"location":"custom_hamiltonians.html#Rimu.Interfaces.LOStructure","page":"Custom Hamiltonians","title":"Rimu.Interfaces.LOStructure","text":"LOStructure(op::AbstractHamiltonian)\nLOStructure(typeof(op))\n\nReturn information about the structure of the linear operator op. LOStructure is used as a trait to speficy symmetries or other properties of the linear operator op that may simplify or speed up calculations. Implemented instances are:\n\nIsDiagonal(): The operator is diagonal.\nIsHermitian(): The operator is complex and Hermitian or real and symmetric.\nAdjointKnown(): The operator is not Hermitian, but its   adjoint is implemented.\nAdjointUnknown(): adjoint for this operator is not   implemented.\n\nPart of the AbstractHamiltonian interface.\n\nIn order to define this trait for a new linear operator type, define a method for LOStructure(::Type{<:MyNewLOType}) = ….\n\n\n\n\n\n","category":"type"},{"location":"custom_hamiltonians.html#Rimu.Hamiltonians.dimension","page":"Custom Hamiltonians","title":"Rimu.Hamiltonians.dimension","text":"dimension(h::AbstractHamiltonian, addr=starting_address(h))\ndimension(h::AbstractObservable, addr)\ndimension(addr::AbstractFockAddress)\ndimension(::Type{<:AbstractFockAddress})\n\nReturn the estimated dimension of Hilbert space. May return a BigInt number.\n\nWhen called on an address or address type, the dimension of the linear space spanned by the address type is returned. When called on an AbstractHamiltonian, an upper bound on the dimension of the matrix representing the Hamiltonian is returned.\n\nExamples\n\njulia> dimension(OccupationNumberFS(1,2,3))\n16777216\n\njulia> dimension(HubbardReal1D(OccupationNumberFS(1,2,3)))\n28\n\njulia> dimension(BoseFS{200,100})\n1386083821086188248261127842108801860093488668581216236221011219101585442774669540\n\njulia> Float64(ans)\n1.3860838210861882e81\n\nPart of the AbstractHamiltonian interface. See also BasisSetRepresentation.\n\nExtended Help\n\nThe default fallback for dimension called on an AbstractHamiltonian is to return the dimension of the address space, which provides an upper bound. For new Hamiltonians a tighter bound can be provided by defining a custom method.\n\nWhen extending AbstractHamiltonian, define a method for the two-argument form dimension(h::MyNewHamiltonian, addr). For number-conserving Hamiltonians, the function Hamiltonians.number_conserving_dimension may be useful.\n\nWhen extending AbstractFockAddress, define a method for dimension(::Type{MyNewFockAddress}).\n\n\n\n\n\n","category":"function"},{"location":"custom_hamiltonians.html#Rimu.Interfaces.has_adjoint","page":"Custom Hamiltonians","title":"Rimu.Interfaces.has_adjoint","text":"has_adjoint(op)\n\nReturn true if adjoint is defined on op.\n\nPart of the AbstractHamiltonian interface.\n\nSee also LOStructure.\n\n\n\n\n\n","category":"function"},{"location":"custom_hamiltonians.html#Rimu.Interfaces.allows_address_type","page":"Custom Hamiltonians","title":"Rimu.Interfaces.allows_address_type","text":"allows_address_type(operator, addr_or_type)\n\nReturns true if addr_or_type is a valid address for operator. Otherwise, returns false.\n\nPart of the AbstractHamiltonian interface.\n\nExtended help\n\nDefaults to addr_or_type <: typeof(starting_address(operator)). Overload this function if the operator can be used with addresses of different types.\n\n\n\n\n\n","category":"function"},{"location":"custom_hamiltonians.html#Base.eltype","page":"Custom Hamiltonians","title":"Base.eltype","text":"eltype(op::AbstractObservable)\n\nReturn the type of the elements of the operator. This can be a vector value. For the underlying scalar type use scalartype.\n\nPart of the AbstractObservable interface.\n\nnote: Note\nNew types do not have to implement this method explicitly. An implementation is provided based on the AbstractObservable's type parameter.\n\n\n\n\n\n","category":"function"},{"location":"custom_hamiltonians.html#VectorInterface.scalartype","page":"Custom Hamiltonians","title":"VectorInterface.scalartype","text":"scalartype(op::AbstractObservable)\n\nReturn the type of the underlying scalar field of the operator. This may be different from the element type of the operator returned by eltype, which can be a vector value.\n\nPart of the AbstractObservable interface.\n\nnote: Note\nNew types do not have to implement this method explicitly. An implementation is provided based on the AbstractObservable's type parameter.\n\n\n\n\n\n","category":"function"},{"location":"custom_hamiltonians.html#LinearAlgebra.mul!","page":"Custom Hamiltonians","title":"LinearAlgebra.mul!","text":"LinearAlgebra.mul!(w::AbstractDVec, op::AbstractOperator, v::AbstractDVec)\n\nIn place multiplication of op with v and storing the result in w. The result is returned. Note that w needs to have a valtype that can hold a product of instances of eltype(op) and valtype(v). Moreover, the StochasticStyle of w needs to be <:IsDeterministic.\n\nPart of the AbstractOperator interface.\n\nThe default implementation relies of diagonal_element and offdiagonals to access the elements of the operator. The function can be overloaded for custom operators.\n\n\n\n\n\n","category":"function"},{"location":"custom_hamiltonians.html","page":"Custom Hamiltonians","title":"Custom Hamiltonians","text":"This interface relies on unexported functionality, including","category":"page"},{"location":"custom_hamiltonians.html","page":"Custom Hamiltonians","title":"Custom Hamiltonians","text":"Hamiltonians.adjoint\nHamiltonians.dot\nHamiltonians.AbstractOffdiagonals\nHamiltonians.Offdiagonals\nHamiltonians.check_address_type\nHamiltonians.number_conserving_dimension\nHamiltonians.number_conserving_bose_dimension\nHamiltonians.number_conserving_fermi_dimension","category":"page"},{"location":"custom_hamiltonians.html#Base.adjoint","page":"Custom Hamiltonians","title":"Base.adjoint","text":"adjoint(::LOStructure, op::AbstractObservable)\n\nRepresent the adjoint of an AbstractObservable. Extend this method to define custom adjoints.\n\n\n\n\n\n","category":"function"},{"location":"custom_hamiltonians.html#LinearAlgebra.dot","page":"Custom Hamiltonians","title":"LinearAlgebra.dot","text":"dot(w, op::AbstractObservable, v)\n\nEvaluate w⋅op(v) minimizing memory allocations.\n\n\n\n\n\n","category":"function"},{"location":"custom_hamiltonians.html#Rimu.Hamiltonians.AbstractOffdiagonals","page":"Custom Hamiltonians","title":"Rimu.Hamiltonians.AbstractOffdiagonals","text":"AbstractOffdiagonals{A,T}<:AbstractVector{Tuple{A,T}}\n\nIterator over new address and matrix elements for reachable off-diagonal matrix elements of a linear operator.\n\nSee Offdiagonals for a default implementation.\n\nMethods to define\n\noffdiagonals(h, a)::AbstractOffdiagonals: This function is used to construct the correct type of offdiagonals for a given combination of Hamiltonian h and Fock address a.\nBase.getindex(::AbstractOffdiagonals, i): should be equivalent to get_offdiagonal(h, a, i).\nBase.size(::AbstractOffdiagonals): should be equivalent to num_offdiagonals(h, a).\n\nSee also offdiagonals, AbstractHamiltonian, AbstractOperator.\n\n\n\n\n\n","category":"type"},{"location":"custom_hamiltonians.html#Rimu.Hamiltonians.Offdiagonals","page":"Custom Hamiltonians","title":"Rimu.Hamiltonians.Offdiagonals","text":"Offdiagonals(h, address) <: AbstractOffdiagonals\n\nIterator over new address and matrix element for reachable off-diagonal matrix elements of linear operator h from address address.  Represents an abstract vector containing the non-zero off-diagonal matrix elements of the column of h indexed by address. To construct this iterator use offdiagonals.\n\nThis is the default implementation of AbstractOffdiagonals defined in terms of num_offdiagonals and get_offdiagonal.\n\nSee also offdiagonals, AbstractHamiltonian, AbstractOperator.\n\n\n\n\n\n","category":"type"},{"location":"custom_hamiltonians.html#Rimu.Hamiltonians.check_address_type","page":"Custom Hamiltonians","title":"Rimu.Hamiltonians.check_address_type","text":"check_address_type(h::AbstractObservable, addr_or_type)\n\nThrow an ArgumentError if addr_or_type is not compatible with h, otherwise return true. Acceptable arguments are either an address or an address type, or a tuple or array thereof.\n\nSee also allows_address_type.\n\n\n\n\n\n","category":"function"},{"location":"custom_hamiltonians.html#Rimu.Hamiltonians.number_conserving_dimension","page":"Custom Hamiltonians","title":"Rimu.Hamiltonians.number_conserving_dimension","text":"number_conserving_dimension(address <: AbstractFockAddress)\n\nReturn the dimension of the Fock space spanned by the address type assuming particle number conservation.\n\nSee also number_conserving_bose_dimension, number_conserving_fermi_dimension, dimension.\n\n\n\n\n\n","category":"function"},{"location":"custom_hamiltonians.html#Rimu.Hamiltonians.number_conserving_bose_dimension","page":"Custom Hamiltonians","title":"Rimu.Hamiltonians.number_conserving_bose_dimension","text":"number_conserving_bose_dimension(n, m)\n\nReturn the dimension of the number-conserving Fock space for n bosons in m modes: binomial(n + m - 1, n).\n\nSee also number_conserving_fermi_dimension, number_conserving_dimension.\n\n\n\n\n\n","category":"function"},{"location":"custom_hamiltonians.html#Rimu.Hamiltonians.number_conserving_fermi_dimension","page":"Custom Hamiltonians","title":"Rimu.Hamiltonians.number_conserving_fermi_dimension","text":"number_conserving_fermi_dimension(n, m)\n\nReturn the dimension of the number-conserving Fock space for n fermions in m modes: binomial(m, n).\n\nSee also number_conserving_bose_dimension, number_conserving_dimension.\n\n\n\n\n\n","category":"function"},{"location":"custom_hamiltonians.html#Operator-and-observable-interface","page":"Custom Hamiltonians","title":"Operator and observable interface","text":"","category":"section"},{"location":"custom_hamiltonians.html","page":"Custom Hamiltonians","title":"Custom Hamiltonians","text":"AbstractObservable\nAbstractOperator","category":"page"},{"location":"custom_hamiltonians.html#Rimu.Interfaces.AbstractObservable","page":"Custom Hamiltonians","title":"Rimu.Interfaces.AbstractObservable","text":"AbstractObservable{T}\n\nMost permissive supertype for operators in the type hierarchy:\n\nAbstractHamiltonian{T} <: AbstractOperator{T} <: AbstractObservable{T}\n\nAbstractObservable provides an interface for operators that can appear in a three-way dot product dot(x, op, y) with two vectors of type AbstractDVec. The result is a value of type T, which is also returned by the eltype function. This may be a vector type associated with a scalar type returned by the scalartype function.\n\nThe AbstractObservable type is useful for defining observables that can be calculated in the context of a ProjectorMonteCarloProblem using AllOverlaps.\n\nInterface\n\nBasic interface methods to implement:\n\nInterfaces.dot_from_right(x, op, y)\nallows_address_type(op, type)\n\nOptional additional methods to implement:\n\nVectorInterface.scalartype(op): defaults to eltype(eltype(op))\nLOStructure(::Type{typeof(op)}): defaults to AdjointUnknown\n\nSee also AbstractOperator, AbstractHamiltonian, Interfaces.\n\n\n\n\n\n","category":"type"},{"location":"custom_hamiltonians.html#Rimu.Interfaces.AbstractOperator","page":"Custom Hamiltonians","title":"Rimu.Interfaces.AbstractOperator","text":"AbstractOperator{T} <: AbstractObservable{T}\n\nSupertype that provides an interface for linear operators over a linear space with elements of type T (returned by eltype) and general (custom type) indices called 'addresses'.\n\nAbstractOperator instances operate on vectors of type AbstractDVec from the module DictVectors and work well with addresses of type AbstractFockAddress from the module BitStringAddresses.\n\nThe defining feature of an AbstractOperator is that it can be applied to a vector with mul!(y, op, x) and that three-way dot products can be calculated with dot(x, op, y).\n\nThe AbstractOperator type is useful for defining operators that are not necessarily Hamiltonians, but that can be used in the context of a ProjectorMonteCarloProblem as observable operators in a ReplicaStrategy, e.g. for defining correlation functions. In contrast to AbstractHamiltonians, AbstractOperators do not need to have a starting_address. Moreover, the eltype of an AbstractOperator can be a vector value whereas AbstractHamiltonians requre a scalar eltype.\n\nAbstractHamiltonian{T} <: AbstractOperator{T} <: AbstractObservable{T}\n\nThe AbstractOperator type is part of the AbstractObservable hierarchy. It is more restrictive than AbstractObservable in that it requires the interface for the generation of diagonal and off-diagonal elements.\n\nFor concrete implementations see Hamiltonians. In order to implement a Hamiltonian for use in ProjectorMonteCarloProblem or ExactDiagonalizationProblem use the type AbstractHamiltonian instead.\n\nInterface\n\nBasic interface methods to implement:\n\nallows_address_type(op, type)\ndiagonal_element(op, address)\nnum_offdiagonals(op, address) and\nget_offdiagonal(op, address, chosen) or offdiagonals\n\nOptional additional methods to implement:\n\nVectorInterface.scalartype(op): defaults to eltype(eltype(op))\nLOStructure(::Type{typeof(op)}): defaults to AdjointUnknown\ndimension(op, addr): defaults to dimension of address space\n\nIn order to calculate observables efficiently, it may make sense to implement custom methods for Interfaces.dot_from_right(x, op, y) and LinearAlgebra.mul!(y, op, x).\n\nSee also AbstractHamiltonian, Interfaces.\n\n\n\n\n\n","category":"type"},{"location":"custom_hamiltonians.html#Interface-tests","page":"Custom Hamiltonians","title":"Interface tests","text":"","category":"section"},{"location":"custom_hamiltonians.html","page":"Custom Hamiltonians","title":"Custom Hamiltonians","text":"Helper functions that can be used for testing the various interfaces are provided in the  (unexported) submodule Rimu.InterfaceTests. ","category":"page"},{"location":"custom_hamiltonians.html","page":"Custom Hamiltonians","title":"Custom Hamiltonians","text":"Rimu.InterfaceTests","category":"page"},{"location":"custom_hamiltonians.html#Rimu.InterfaceTests","page":"Custom Hamiltonians","title":"Rimu.InterfaceTests","text":"The module Rimu.InterfaceTests provides functions to test compliance with the AbstractObservable, AbstractOperator, and AbstractHamiltonian interfaces. Load the module with using Rimu.InterfaceTests.\n\nThe module exports the following functions:\n\ntest_observable_interface\ntest_operator_interface\ntest_hamiltonian_interface\ntest_hamiltonian_structure\n\n\n\n\n\n","category":"module"},{"location":"custom_hamiltonians.html#Testing-functions","page":"Custom Hamiltonians","title":"Testing functions","text":"","category":"section"},{"location":"custom_hamiltonians.html","page":"Custom Hamiltonians","title":"Custom Hamiltonians","text":"Rimu.InterfaceTests.test_hamiltonian_interface\nRimu.InterfaceTests.test_hamiltonian_structure\nRimu.InterfaceTests.test_observable_interface\nRimu.InterfaceTests.test_operator_interface","category":"page"},{"location":"custom_hamiltonians.html#Rimu.InterfaceTests.test_hamiltonian_interface","page":"Custom Hamiltonians","title":"Rimu.InterfaceTests.test_hamiltonian_interface","text":"test_hamiltonian_interface(h, addr=starting_address(h); test_spawning=true)\n\nThe main purpose of this test function is to check that all required methods of the AbstractHamiltonian interface are defined and work as expected.\n\nSet test_spawning=false to skip tests that require offdiagonals to return an AbstractVector.\n\nThis function also tests the following properties of the Hamiltonian:\n\ndimension(h) ≥ dimension(h, addr)\nscalartype(h) === eltype(h)\nHamiltonian action on a vector <: AbstractDVec\nstarting_address returns an allows_address_type address\nLOStructure is one of IsDiagonal, IsHermitian, AdjointKnown\nthe AbstractOperator interface is tested\nthe AbstractObservable interface is tested\n\nExample\n\njulia> using Rimu.InterfaceTests\n\njulia> test_hamiltonian_interface(HubbardRealSpace(BoseFS(2,0,3,1)));\nTest Summary:                          | Pass  Total  Time\nObservable interface: HubbardRealSpace |    4      4  0.0s\nTest Summary:       | Pass  Total  Time\nallows_address_type |    1      1  0.0s\nTest Summary:                        | Pass  Total  Time\nOperator interface: HubbardRealSpace |    9      9  0.0s\nTest Summary:       | Pass  Total  Time\nallows_address_type |    1      1  0.0s\nTest Summary:                                 | Pass  Total  Time\nHamiltonians-only tests with HubbardRealSpace |    6      6  0.0s\n\nSee also test_operator_interface, test_observable_interface.\n\n\n\n\n\n","category":"function"},{"location":"custom_hamiltonians.html#Rimu.InterfaceTests.test_hamiltonian_structure","page":"Custom Hamiltonians","title":"Rimu.InterfaceTests.test_hamiltonian_structure","text":"test_hamiltonian_structure(h::AbstractHamiltonian; sizelim=20)\n\nTest the LOStructure of a small Hamiltonian h by instantiating it as a sparse matrix and checking whether the structure of the matrix is constistent with the result of LOStructure(h) and the eltype is consistent with eltype(h).\n\nThis function is intended to be used in automated test for small Hamiltonians where instantiating the matrix is quick. A warning will print if the dimension of the Hamiltonian is larger than 20.\n\nExample\n\njulia> using Rimu.InterfaceTests\n\njulia> test_hamiltonian_structure(HubbardRealSpace(BoseFS(2,0,1)));\nTest Summary: | Pass  Total  Time\nstructure     |    4      4  0.0s\n\n\n\n\n\n","category":"function"},{"location":"custom_hamiltonians.html#Rimu.InterfaceTests.test_observable_interface","page":"Custom Hamiltonians","title":"Rimu.InterfaceTests.test_observable_interface","text":"test_observable_interface(obs, addr)\n\nThis function tests compliance with the AbstractObservable interface for an observable obs at address addr (typically <: AbstractFockAddress) by checking that all required methods are defined.\n\nThe following properties are tested:\n\ndot(v, obs, v) returns a value of the same type as the eltype of the observable\nLOStructure is set consistently\n\nExample\n\njulia> using Rimu.InterfaceTests\n\njulia> test_observable_interface(ReducedDensityMatrix(2), FermiFS(1,0,1,1));\nTest Summary:                              | Pass  Total  Time\nObservable interface: ReducedDensityMatrix |    4      4  0.0s\n\nSee also AbstractObservable, test_operator_interface, test_hamiltonian_interface.\n\n\n\n\n\n","category":"function"},{"location":"custom_hamiltonians.html#Rimu.InterfaceTests.test_operator_interface","page":"Custom Hamiltonians","title":"Rimu.InterfaceTests.test_operator_interface","text":"test_operator_interface(op, addr; test_spawning=true)\n\nThis function tests compliance with the AbstractOperator interface for an operator op at address addr (typically <: AbstractFockAddress) by checking that all required methods are defined.\n\nIf test_spawning is true, tests are performed that require offdiagonals to return an Hamiltonians.AbstractOffDiagonals, which is a prerequisite for using the spawn! function. Otherwise, the spawning tests are skipped.\n\nThe following properties are tested:\n\ndiagonal_element returns a value of the same type as the eltype of the operator\noffdiagonals behaves like an AbstractVector\nnum_offdiagonals returns the correct number of offdiagonals\nrandom_offdiagonal returns a tuple with the correct types\nmul! and dot work as expected\ndimension returns a consistent value\nthe AbstractObservable interface is tested\n\nExample\n\njulia> using Rimu.InterfaceTests\n\njulia> test_operator_interface(SuperfluidCorrelator(3), BoseFS(1, 2, 3, 1));\nTest Summary:                              | Pass  Total  Time\nObservable interface: SuperfluidCorrelator |    4      4  0.0s\nTest Summary:       | Pass  Total  Time\nallows_address_type |    1      1  0.0s\nTest Summary:                            | Pass  Total  Time\nOperator interface: SuperfluidCorrelator |    9      9  0.0s\n\nSee also AbstractOperator, test_observable_interface, test_hamiltonian_interface.\n\n\n\n\n\n","category":"function"},{"location":"custom_hamiltonians.html#Utilities-for-harmonic-oscillator-models","page":"Custom Hamiltonians","title":"Utilities for harmonic oscillator models","text":"","category":"section"},{"location":"custom_hamiltonians.html","page":"Custom Hamiltonians","title":"Custom Hamiltonians","text":"Useful utilities for harmonic oscillator in Cartesian basis, see HOCartesianContactInteractions and HOCartesianEnergyConservedPerDim.","category":"page"},{"location":"custom_hamiltonians.html","page":"Custom Hamiltonians","title":"Custom Hamiltonians","text":"get_all_blocks\nfock_to_cart","category":"page"},{"location":"custom_hamiltonians.html#Rimu.Hamiltonians.get_all_blocks","page":"Custom Hamiltonians","title":"Rimu.Hamiltonians.get_all_blocks","text":"get_all_blocks(h::Union{HOCartesianContactInteractions,HOCartesianEnergyConservedPerDim};\n    target_energy = nothing,\n    max_energy = nothing,\n    max_blocks = nothing,\n    method = :vertices,\n    kwargs...) -> df\n\nFind all distinct blocks of h. Returns a DataFrame with columns\n\nblock_id: index of block in order found\nblock_E0: noninteracting energy of all elements in the block\nblock_size: number of elements in the block\naddr: first address that generates the block with e.g. BasisSetRepresentation\nindices: tuple of mode indices that allow recreation of the generating address   addr; in this case use e.g. BoseFS(M; indices .=> 1) This is useful when   the DataFrame is loaded from file since Arrow.jl converts custom   types to NamedTuples.\nt_basis: time to generate the basis for each block\n\nKeyword arguments:\n\ntarget_energy: only blocks with this noninteracting energy are found\nmax_energy: only blocks with noninteracting energy less than this are found\nmax_blocks: exit after finding this many blocks\nmethod: Choose between :vertices and :comb for method of enumerating   tuples of quantum numbers\nsave_to_file=nothing: if set then the DataFrame recording blocks is saved   after each new block is found\nadditional kwargs: passed to isapprox for comparing block energies.   Useful for anisotropic traps\n\nNote: If h was constructed with option block_by_level = false then the block seeds addr are determined by parity. In this case the blocks are not generated; t_basis will be zero, and block_size will be an estimate. Pass the seed addresses to BasisSetRepresentation with an appropriate filter to generate the blocks.\n\n\n\n\n\n","category":"function"},{"location":"custom_hamiltonians.html#Rimu.Hamiltonians.fock_to_cart","page":"Custom Hamiltonians","title":"Rimu.Hamiltonians.fock_to_cart","text":"fock_to_cart(addr, S; zero_index = true)\n\nConvert a Fock state address addr to Cartesian harmonic oscillator basis indices n_xn_yldots. These indices are bounded by S which is a tuple of the maximum number of states in each dimension. By default the groundstate in each dimension is indexed by 0, but this can be changed by setting zero_index = false.\n\n\n\n\n\n","category":"function"},{"location":"custom_hamiltonians.html","page":"Custom Hamiltonians","title":"Custom Hamiltonians","text":"Underlying integrals for the interaction matrix elements are implemented in the following unexported functions","category":"page"},{"location":"custom_hamiltonians.html","page":"Custom Hamiltonians","title":"Custom Hamiltonians","text":"Hamiltonians.four_oscillator_integral_general\nHamiltonians.ho_delta_potential\nHamiltonians.log_abs_oscillator_zero","category":"page"},{"location":"custom_hamiltonians.html#Rimu.Hamiltonians.four_oscillator_integral_general","page":"Custom Hamiltonians","title":"Rimu.Hamiltonians.four_oscillator_integral_general","text":"four_oscillator_integral_general(i, j, k, l; max_level = typemax(Int))\n\nIntegral of four one-dimensional harmonic oscillator functions,\n\n    mathcalI(ijkl) = int_-infty^infty dx \n    phi_i(x) phi_j(x) phi_k(x) phi_l(x)\n\nIndices i,j,k,l start at 0 for the groundstate.\n\nThis integral has a closed form in terms of the hypergeometric _3F_2 function, and is non-zero unless i+j+k+l is odd. See e.g. Titchmarsh (1948). This is a generalisation of the closed form in Papenbrock (2002), which is is the special case where i+j == k+l, but is numerically unstable for large arguments. Used in HOCartesianContactInteractions and HOCartesianEnergyConservedPerDim.\n\n\n\n\n\n","category":"function"},{"location":"custom_hamiltonians.html#Rimu.Hamiltonians.ho_delta_potential","page":"Custom Hamiltonians","title":"Rimu.Hamiltonians.ho_delta_potential","text":"ho_delta_potential(S, i, j; [vals])\n\nReturns the matrix element of a delta potential at the centre of a trap, i.e. the  product of two harmonic oscillator functions evaluated at the origin,\n\n    v_ij = phi_mathbfn_i(0) phi_mathbfn_j(0)\n\nwhich is only non-zero for even-parity states. The ith single particle state corresponds to a D-tuple of harmonic oscillator indices mathbfn_i. S defines the bounds of Cartesian harmonic oscillator indices for each dimension. The optional keyword argument vals allows passing pre-computed values of phi_i(0) to speed-up the calculation. The values can be calculated with log_abs_oscillator_zero.\n\nSee also HOCartesianCentralImpurity.\n\n\n\n\n\n","category":"function"},{"location":"custom_hamiltonians.html#Rimu.Hamiltonians.log_abs_oscillator_zero","page":"Custom Hamiltonians","title":"Rimu.Hamiltonians.log_abs_oscillator_zero","text":"log_abs_oscillator_zero(n)\n\nCompute the logarithm of the absolute value of the n^mathrmth 1D harmonic oscillator function evaluated at the origin. The overall sign is determined when the matrix element is evaluated in ho_delta_potential.\n\n\n\n\n\n","category":"function"},{"location":"custom_hamiltonians.html#Index","page":"Custom Hamiltonians","title":"Index","text":"","category":"section"},{"location":"custom_hamiltonians.html","page":"Custom Hamiltonians","title":"Custom Hamiltonians","text":"Pages   = [\"custom_hamiltonians.md\"]","category":"page"}]
}
